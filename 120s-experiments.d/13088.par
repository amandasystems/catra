// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R2, R25, R26, R27, R28, R29, R30, R31, R32, R33, R34, R35, R36, R37, R38, R39, R4, R40, R41, R42, R43, R5;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R33 += 1 };
  s0 -> s0 [0, 65535] { R32 += 1, R33 += 1 };
  s0 -> s2 [46, 46] { R33 += 1 };
  s0 -> s3 [47, 47] { R33 += 1 };
  s0 -> s1 [48, 65535] { R33 += 1 };
  s1 -> s1 [0, 45] { R33 += 1 };
  s1 -> s2 [46, 46] { R33 += 1 };
  s1 -> s3 [47, 47] { R33 += 1 };
  s1 -> s1 [48, 65535] { R33 += 1 };
  s2 -> s1 [0, 45] { R33 += 1 };
  s2 -> s2 [46, 46] { R33 += 1 };
  s2 -> s3 [47, 47] { R33 += 1 };
  s2 -> s1 [48, 114] { R33 += 1 };
  s2 -> s8 [115, 115] { R33 += 1 };
  s2 -> s1 [116, 65535] { R33 += 1 };
  s3 -> s3 [0, 45] { R33 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R33 += 1 };
  s3 -> s3 [47, 65535] { R33 += 1 };
  s4 -> s3 [0, 45] { R33 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R33 += 1 };
  s4 -> s3 [47, 114] { R33 += 1 };
  s4 -> s5 [115, 115] { R33 += 1 };
  s4 -> s3 [116, 65535] { R33 += 1 };
  s5 -> s3 [0, 45] { R33 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R33 += 1 };
  s5 -> s3 [47, 110] { R33 += 1 };
  s5 -> s6 [111, 111] { R33 += 1 };
  s5 -> s3 [112, 65535] { R33 += 1 };
  s6 -> s3 [0, 45] { R33 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R33 += 1 };
  s6 -> s3 [47, 98] { R33 += 1 };
  s6 -> s7 [99, 99] { R33 += 1 };
  s6 -> s3 [100, 65535] { R33 += 1 };
  s7 -> s3 [0, 45] { R33 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R33 += 1 };
  s7 -> s3 [47, 106] { R33 += 1 };
  s7 -> s3 [108, 65535] { R33 += 1 };
  s8 -> s1 [0, 45] { R33 += 1 };
  s8 -> s2 [46, 46] { R33 += 1 };
  s8 -> s3 [47, 47] { R33 += 1 };
  s8 -> s1 [48, 110] { R33 += 1 };
  s8 -> s9 [111, 111] { R33 += 1 };
  s8 -> s1 [112, 65535] { R33 += 1 };
  s9 -> s1 [0, 45] { R33 += 1 };
  s9 -> s2 [46, 46] { R33 += 1 };
  s9 -> s3 [47, 47] { R33 += 1 };
  s9 -> s1 [48, 98] { R33 += 1 };
  s9 -> s10 [99, 99] { R33 += 1 };
  s9 -> s1 [100, 65535] { R33 += 1 };
  s10 -> s1 [0, 45] { R33 += 1 };
  s10 -> s2 [46, 46] { R33 += 1 };
  s10 -> s3 [47, 47] { R33 += 1 };
  s10 -> s1 [48, 106] { R33 += 1 };
  s10 -> s1 [108, 65535] { R33 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R34 += 1, R35 += 1 };
  s0 -> s1 [0, 65535] { R35 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R35 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R37 += 1, R5 += 1 };
  s0 -> s2 [0, 65535] { R37 += 1, R4 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R36 += 1, R37 += 1 };
  s0 -> s3 [47, 47] { R37 += 1 };
  s0 -> s1 [48, 65535] { R37 += 1, R5 += 1 };
  s1 -> s1 [0, 46] { R37 += 1, R5 += 1 };
  s1 -> s3 [47, 47] { R37 += 1 };
  s1 -> s1 [48, 65535] { R37 += 1, R5 += 1 };
  s2 -> s1 [0, 46] { R37 += 1, R5 += 1 };
  s2 -> s2 [0, 65535] { R37 += 1, R4 += 1, R5 += 1 };
  s2 -> s3 [47, 47] { R37 += 1 };
  s2 -> s1 [48, 65535] { R37 += 1, R5 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R37 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 65535] { R39 += 1, R26 += 1, R27 += 1 };
  s0 -> s2 [0, 65535] { R39 += 1, R27 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R38 += 1, R39 += 1 };
  s1 -> s1 [0, 65535] { R39 += 1, R26 += 1, R27 += 1 };
  s1 -> s2 [0, 65535] { R39 += 1, R27 += 1, R0 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R39 += 1, R27 += 1, R0 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R39 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R39 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 63] { R41 += 1, R29 += 1 };
  s0 -> s0 [0, 65535] { R40 += 1, R41 += 1 };
  s0 -> s2 [0, 65535] { R41 += 1, R28 += 1, R29 += 1 };
  s0 -> s1 [65, 65535] { R41 += 1, R29 += 1 };
  s1 -> s1 [0, 63] { R41 += 1, R29 += 1 };
  s1 -> s1 [0, 65535] { R41 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [65, 65535] { R41 += 1, R29 += 1 };
  s2 -> s1 [0, 63] { R41 += 1, R29 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R41 += 1, R28 += 1, R29 += 1 };
  s2 -> s1 [65, 65535] { R41 += 1, R29 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R43 += 1, R30 += 1, R31 += 1 };
  s0 -> s2 [0, 65535] { R43 += 1, R31 += 1, R25 += 1 };
  s0 -> s0 [0, 65535] { R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535] { R43 += 1, R30 += 1, R31 += 1 };
  s1 -> s2 [0, 65535] { R43 += 1, R31 += 1, R25 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R43 += 1, R31 += 1, R25 += 1 };
  s2 -> s3 [0, 65535] { R43 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R43 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
};
constraint R1 = R27 && R2 = R43 && R4 = 0 && R5 - R26 = -1 && R32 = 10 && R33 = R43 && R34 = 10 && R35 = R43 && R36 = 10 && R37 = R43 && R38 = 10 && R39 = R43 && R40 = 10 && R41 = R43 && R42 = 10 && R0 != 0 && R26 - R27 < 1 && 0 < R26 && 9 < R43 && (R28 != 0 || R26 - R29 = 1 || (R25 = 0 && R26 = 1)) && (R30 != 0 || R26 - R31 = 1 || (R25 = 0 && R26 = 1)) && (R28 = 0 || (R25 = 0 && R26 = 1)) && (R30 = 0 || (R25 = 0 && R26 = 1));
// End of Parikh automata intersection problem
