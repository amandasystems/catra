// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R139, R143, R144, R176, R177, R178, R179, R180, R181, R182, R183, R184, R185, R186, R187, R188, R189, R190, R191, R192, R193, R194, R195, R196, R197, R198, R199, R2, R200, R201, R202, R203, R204, R205, R206, R4, R5;
synchronised {  // Automata constraining key1
automaton key1_0 {
  init s0;
  s0 -> s0 [0, 64];
  s0 -> s1 [67, 67];
  s0 -> s0 [68, 65535];
  s1 -> s1 [0, 64];
  s1 -> s1 [67, 65535];
  accepting s1;
};
automaton key1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton key1_2 {
  init s0;
  s0 -> s1 [0, 66] { R144 += 1 };
  s0 -> s0 [0, 65535] { R143 += 1, R144 += 1 };
  s0 -> s2 [67, 67];
  s0 -> s1 [68, 65535] { R144 += 1 };
  s1 -> s1 [0, 66] { R144 += 1 };
  s1 -> s2 [67, 67];
  s1 -> s1 [68, 65535] { R144 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton key1_3 {
  init s0;
  s0 -> s1 [0, 66] { R192 += 1 };
  s0 -> s0 [0, 65535] { R191 += 1, R192 += 1 };
  s0 -> s2 [67, 67] { R192 += 1 };
  s0 -> s1 [68, 65535] { R192 += 1 };
  s1 -> s1 [0, 66] { R192 += 1 };
  s1 -> s2 [67, 67] { R192 += 1 };
  s1 -> s1 [68, 65535] { R192 += 1 };
  s2 -> s2 [0, 65535] { R192 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton key1_4 {
  init s0;
  s0 -> s1 [0, 65535] { R194 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R193 += 1, R194 += 1 };
  s1 -> s1 [0, 65535] { R194 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton key1_5 {
  init s0;
  s0 -> s1 [0, 66] { R196 += 1 };
  s0 -> s0 [0, 65535] { R195 += 1, R196 += 1 };
  s0 -> s2 [0, 65535] { R196 += 1, R139 += 1 };
  s0 -> s3 [67, 67] { R196 += 1 };
  s0 -> s1 [68, 65535] { R196 += 1 };
  s1 -> s1 [0, 66] { R196 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [67, 67] { R196 += 1 };
  s1 -> s1 [68, 65535] { R196 += 1 };
  s2 -> s1 [0, 66] { R196 += 1 };
  s2 -> s2 [0, 65535] { R196 += 1, R139 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [67, 67] { R196 += 1 };
  s2 -> s1 [68, 65535] { R196 += 1 };
  s3 -> s3 [0, 65535] { R196 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton key1_6 {
  init s0;
  s0 -> s1 [0, 66] { R198 += 1, R182 += 1 };
  s0 -> s0 [0, 65535] { R197 += 1, R198 += 1 };
  s0 -> s2 [0, 65535] { R198 += 1, R181 += 1, R182 += 1 };
  s0 -> s3 [67, 67] { R198 += 1, R182 += 1 };
  s0 -> s1 [68, 65535] { R198 += 1, R182 += 1 };
  s1 -> s1 [0, 66] { R198 += 1, R182 += 1 };
  s1 -> s3 [67, 67] { R198 += 1, R182 += 1 };
  s1 -> s1 [68, 65535] { R198 += 1, R182 += 1 };
  s2 -> s1 [0, 66] { R198 += 1, R182 += 1 };
  s2 -> s2 [0, 65535] { R198 += 1, R181 += 1, R182 += 1 };
  s2 -> s3 [67, 67] { R198 += 1, R182 += 1 };
  s2 -> s1 [68, 65535] { R198 += 1, R182 += 1 };
  s3 -> s3 [0, 65535] { R198 += 1, R182 += 1 };
  s3 -> s4 [0, 65535] { R198 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R198 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
automaton key1_7 {
  init s0;
  s0 -> s0 [0, 65535] { R199 += 1, R200 += 1 };
  s0 -> s1 [0, 65535] { R200 += 1, R183 += 1, R184 += 1 };
  s0 -> s2 [0, 65535] { R200 += 1, R184 += 1, R0 += 1 };
  s1 -> s1 [0, 65535] { R200 += 1, R183 += 1, R184 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R200 += 1, R184 += 1, R0 += 1 };
  s2 -> s3 [0, 65535] { R200 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R200 += 1, R184 += 1, R0 += 1 };
  s3 -> s3 [0, 65535] { R200 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton key1_8 {
  init s0;
  s0 -> s1 [0, 66] { R202 += 1, R186 += 1, R5 += 1 };
  s0 -> s2 [0, 65535] { R202 += 1, R186 += 1, R4 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R201 += 1, R202 += 1 };
  s0 -> s3 [0, 65535] { R202 += 1, R185 += 1, R186 += 1 };
  s0 -> s4 [67, 67] { R202 += 1, R186 += 1 };
  s0 -> s1 [68, 65535] { R202 += 1, R186 += 1, R5 += 1 };
  s1 -> s1 [0, 66] { R202 += 1, R186 += 1, R5 += 1 };
  s1 -> s4 [67, 67] { R202 += 1, R186 += 1 };
  s1 -> s1 [68, 65535] { R202 += 1, R186 += 1, R5 += 1 };
  s2 -> s1 [0, 66] { R202 += 1, R186 += 1, R5 += 1 };
  s2 -> s2 [0, 65535] { R202 += 1, R186 += 1, R4 += 1, R5 += 1 };
  s2 -> s4 [67, 67] { R202 += 1, R186 += 1 };
  s2 -> s1 [68, 65535] { R202 += 1, R186 += 1, R5 += 1 };
  s3 -> s1 [0, 66] { R202 += 1, R186 += 1, R5 += 1 };
  s3 -> s2 [0, 65535] { R202 += 1, R186 += 1, R4 += 1, R5 += 1 };
  s3 -> s3 [0, 65535] { R202 += 1, R185 += 1, R186 += 1 };
  s3 -> s4 [67, 67] { R202 += 1, R186 += 1 };
  s3 -> s1 [68, 65535] { R202 += 1, R186 += 1, R5 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R202 += 1 };
  s4 -> s4 [0, 65535] { R202 += 1, R186 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R202 += 1 };
  accepting s4, s5, s6;
};
automaton key1_9 {
  init s0;
  s0 -> s1 [0, 66] { R204 += 1, R188 += 1, R178 += 1 };
  s0 -> s2 [0, 65535] { R204 += 1, R187 += 1, R188 += 1 };
  s0 -> s3 [0, 65535] { R204 += 1, R188 += 1, R177 += 1, R178 += 1 };
  s0 -> s0 [0, 65535] { R203 += 1, R204 += 1 };
  s0 -> s4 [67, 67] { R204 += 1, R188 += 1, R178 += 1 };
  s0 -> s1 [68, 65535] { R204 += 1, R188 += 1, R178 += 1 };
  s1 -> s1 [0, 66] { R204 += 1, R188 += 1, R178 += 1 };
  s1 -> s4 [67, 67] { R204 += 1, R188 += 1, R178 += 1 };
  s1 -> s1 [68, 65535] { R204 += 1, R188 += 1, R178 += 1 };
  s2 -> s1 [0, 66] { R204 += 1, R188 += 1, R178 += 1 };
  s2 -> s2 [0, 65535] { R204 += 1, R187 += 1, R188 += 1 };
  s2 -> s3 [0, 65535] { R204 += 1, R188 += 1, R177 += 1, R178 += 1 };
  s2 -> s4 [67, 67] { R204 += 1, R188 += 1, R178 += 1 };
  s2 -> s1 [68, 65535] { R204 += 1, R188 += 1, R178 += 1 };
  s3 -> s1 [0, 66] { R204 += 1, R188 += 1, R178 += 1 };
  s3 -> s3 [0, 65535] { R204 += 1, R188 += 1, R177 += 1, R178 += 1 };
  s3 -> s4 [67, 67] { R204 += 1, R188 += 1, R178 += 1 };
  s3 -> s1 [68, 65535] { R204 += 1, R188 += 1, R178 += 1 };
  s4 -> s4 [0, 65535] { R204 += 1, R188 += 1, R178 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R204 += 1, R188 += 1 };
  s4 -> s7 [0, 65535] { R204 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R204 += 1, R188 += 1 };
  s6 -> s7 [0, 65535] { R204 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R204 += 1 };
  accepting s4, s5, s6, s7;
};
automaton key1_10 {
  init s0;
  s0 -> s1 [0, 65535] { R206 += 1, R189 += 1, R190 += 1 };
  s0 -> s0 [0, 65535] { R205 += 1, R206 += 1 };
  s0 -> s2 [0, 65535] { R206 += 1, R190 += 1, R179 += 1, R180 += 1 };
  s0 -> s3 [0, 65535] { R206 += 1, R190 += 1, R180 += 1, R176 += 1 };
  s1 -> s1 [0, 65535] { R206 += 1, R189 += 1, R190 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s2 [0, 65535] { R206 += 1, R190 += 1, R179 += 1, R180 += 1 };
  s1 -> s3 [0, 65535] { R206 += 1, R190 += 1, R180 += 1, R176 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R206 += 1, R190 += 1, R179 += 1, R180 += 1 };
  s2 -> s3 [0, 65535] { R206 += 1, R190 += 1, R180 += 1, R176 += 1 };
  s2 -> s6 [0, 65535] { R206 += 1 };
  s3 -> s4 [0, 65535] { R206 += 1, R190 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R206 += 1, R190 += 1, R180 += 1, R176 += 1 };
  s3 -> s6 [0, 65535] { R206 += 1 };
  s4 -> s4 [0, 65535] { R206 += 1, R190 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R206 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R206 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R0 = R178 && R1 = R188 && R2 = R204 && R4 = 0 && R5 - R177 = -1 && R143 = 0 && R144 - R203 = -1 && R181 = 0 && R182 = R188 && R185 = 0 && R186 = R188 && R187 = 0 && R191 = R203 && R192 = R204 && R197 = R203 && R198 = R204 && R201 = R203 && R202 = R204 && R139 < 1 && R177 - R178 < 1 && -1 < R177 && -1 < R188 && R203 - R204 < 1 && -1 < R203 && (R177 != R179 || R178 = R180 || ((R176 != 0 || R178 - R179 < 1 || R179 < 0) && (R176 = 0 || R178 < R179 || R179 < 0))) && (R183 != 0 || R184 = R188 || (R178 = 0 && (R177 != 0 || R188 < 1))) && (R189 != 0 || R188 = R190 || (R178 = 0 && (R177 != 0 || R188 < 1))) && (R193 != R203 || R194 = R204 || (R188 = 0 && R203 = R204)) && (R195 != R203 || R196 = R204 || (R188 = 0 && R203 = R204)) && (R199 != R203 || R200 = R204 || (R188 = 0 && R203 = R204)) && (R203 != R205 || R204 = R206 || ((R188 != 0 || R204 - R205 < 1 || R205 < 0) && (R188 < 1 || R204 < R205 || R205 < 0))) && (R177 = R179 || (R176 = 0 && R177 = R178)) && (R183 = 0 || (R178 = 0 && (R177 != 0 || R188 < 1))) && (R189 = 0 || (R178 = 0 && (R177 != 0 || R188 < 1))) && (R193 = R203 || (R188 = 0 && R203 = R204)) && (R195 = R203 || (R188 = 0 && R203 = R204)) && (R199 = R203 || (R188 = 0 && R203 = R204)) && (R203 = R205 || (R188 = 0 && R203 = R204));
// End of Parikh automata intersection problem
