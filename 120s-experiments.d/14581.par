// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R11522, R11523, R11524, R11525, R11526, R11527, R11528, R11529, R11530, R11531, R12, R14072, R14073, R14074, R14075, R14498, R14499, R14500, R14501, R14502, R14503, R14712, R14713, R14714, R14715, R14716, R14717, R14718, R14719, R14720, R14721, R14722, R14723, R14724, R14725, R14726, R14727, R14728, R14729, R14730, R14731, R14732, R14733, R14734, R14735, R14736, R14737, R14738, R14739, R14740, R14741, R14742, R14743, R14744, R14745, R14746, R14747, R14748, R14749, R14750, R14751, R14752, R14753, R14754, R14755, R14756, R14757, R14758, R14759, R14760, R14761, R14762, R14763, R14764, R14765, R14766, R14767, R14768, R14769, R14770, R14771, R14772, R14773, R14774, R14775, R14776, R14777, R14778, R14779, R14780, R14781, R14782, R14783, R14784, R14785, R14786, R14787, R14788, R14789, R14790, R14791, R14792, R14793, R14794, R14795, R14796, R14797, R14798, R14799, R14800, R14801, R14802, R14803, R14804, R14805, R14806, R14807, R14808, R14809, R14810, R14811, R14812, R14813, R14814, R14815, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 72];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [73, 73];
  s0 -> s1 [74, 65535];
  s1 -> s1 [0, 72];
  s1 -> s2 [73, 73];
  s1 -> s1 [74, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s1 [0, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R25 += 1 };
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R14737 += 1, R19 += 1 };
  s0 -> s0 [0, 65535] { R14736 += 1, R14737 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R14737 += 1, R19 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 72] { R14739 += 1 };
  s0 -> s0 [0, 65535] { R14738 += 1, R14739 += 1 };
  s0 -> s2 [73, 73] { R14739 += 1 };
  s0 -> s3 [73, 73] { R14739 += 1 };
  s0 -> s1 [82, 65535] { R14739 += 1 };
  s1 -> s1 [0, 72] { R14739 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R14739 += 1 };
  s1 -> s3 [73, 73] { R14739 += 1 };
  s1 -> s1 [82, 65535] { R14739 += 1 };
  s2 -> s2 [0, 73] { R14739 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [82, 65535] { R14739 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 72] { R14741 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R14740 += 1, R14741 += 1 };
  s0 -> s2 [73, 73] { R14741 += 1, R38 += 1 };
  s0 -> s3 [73, 73] { R14741 += 1, R38 += 1 };
  s0 -> s1 [74, 65535] { R14741 += 1, R38 += 1 };
  s1 -> s1 [0, 72] { R14741 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R14741 += 1, R38 += 1 };
  s1 -> s3 [73, 73] { R14741 += 1, R38 += 1 };
  s1 -> s1 [74, 65535] { R14741 += 1, R38 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R14741 += 1, R38 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 72] { R14743 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R14742 += 1, R14743 += 1 };
  s0 -> s2 [73, 73] { R14743 += 1, R40 += 1 };
  s0 -> s3 [73, 73] { R14743 += 1, R40 += 1 };
  s0 -> s1 [74, 65535] { R14743 += 1, R40 += 1 };
  s1 -> s1 [0, 72] { R14743 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R14743 += 1, R40 += 1 };
  s1 -> s3 [73, 73] { R14743 += 1, R40 += 1 };
  s1 -> s1 [74, 65535] { R14743 += 1, R40 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R14743 += 1, R40 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 72] { R14745 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R14744 += 1, R14745 += 1 };
  s0 -> s2 [73, 73] { R14745 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [73, 73] { R14745 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [74, 65535] { R14745 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 72] { R14745 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R14745 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [73, 73] { R14745 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [74, 65535] { R14745 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535] { R14745 += 1, R42 += 1, R43 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 72] { R14747 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R14746 += 1, R14747 += 1 };
  s0 -> s2 [73, 73] { R14747 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [73, 73] { R14747 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [74, 65535] { R14747 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 72] { R14747 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R14747 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [73, 73] { R14747 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [74, 65535] { R14747 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R14747 += 1, R46 += 1, R47 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 72] { R14749 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R14748 += 1, R14749 += 1 };
  s0 -> s2 [73, 73] { R14749 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [73, 73] { R14749 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [74, 65535] { R14749 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 72] { R14749 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R14749 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [73, 73] { R14749 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [74, 65535] { R14749 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R14749 += 1, R52 += 1, R53 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 72] { R14751 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R14750 += 1, R14751 += 1 };
  s0 -> s2 [73, 73] { R14751 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [73, 73] { R14751 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [74, 65535] { R14751 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 72] { R14751 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R14751 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [73, 73] { R14751 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [74, 65535] { R14751 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R14751 += 1, R56 += 1, R57 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 72] { R14753 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R14752 += 1, R14753 += 1 };
  s0 -> s2 [73, 73] { R14753 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [73, 73] { R14753 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [74, 65535] { R14753 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 72] { R14753 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R14753 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [73, 73] { R14753 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [74, 65535] { R14753 += 1, R62 += 1, R63 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R14753 += 1, R62 += 1, R63 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 72] { R14773 += 1 };
  s0 -> s0 [0, 65535] { R14772 += 1, R14773 += 1 };
  s0 -> s2 [73, 73] { R14773 += 1 };
  s0 -> s1 [74, 65535] { R14773 += 1 };
  s1 -> s1 [0, 72] { R14773 += 1 };
  s1 -> s2 [73, 73] { R14773 += 1 };
  s1 -> s1 [74, 65535] { R14773 += 1 };
  s2 -> s2 [0, 65535] { R14773 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R14775 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R14774 += 1, R14775 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R14775 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 72] { R14777 += 1 };
  s0 -> s0 [0, 65535] { R14776 += 1, R14777 += 1 };
  s0 -> s2 [0, 65535] { R14777 += 1, R8 += 1 };
  s0 -> s3 [73, 73] { R14777 += 1 };
  s0 -> s1 [74, 65535] { R14777 += 1 };
  s1 -> s1 [0, 72] { R14777 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [73, 73] { R14777 += 1 };
  s1 -> s1 [74, 65535] { R14777 += 1 };
  s2 -> s1 [0, 72] { R14777 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R14777 += 1, R8 += 1 };
  s2 -> s3 [73, 73] { R14777 += 1 };
  s2 -> s1 [74, 65535] { R14777 += 1 };
  s3 -> s3 [0, 65535] { R14777 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 72] { R14779 += 1, R14717 += 1 };
  s0 -> s2 [0, 65535] { R14779 += 1, R14716 += 1, R14717 += 1 };
  s0 -> s0 [0, 65535] { R14778 += 1, R14779 += 1 };
  s0 -> s1 [74, 65535] { R14779 += 1, R14717 += 1 };
  s1 -> s1 [0, 72] { R14779 += 1, R14717 += 1 };
  s1 -> s1 [0, 65535] { R14779 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [74, 65535] { R14779 += 1, R14717 += 1 };
  s2 -> s1 [0, 72] { R14779 += 1, R14717 += 1 };
  s2 -> s2 [0, 65535] { R14779 += 1, R14716 += 1, R14717 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [74, 65535] { R14779 += 1, R14717 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s0 [0, 65535] { R14780 += 1, R14781 += 1 };
  s0 -> s1 [0, 65535] { R14781 += 1, R14719 += 1, R17 += 1 };
  s0 -> s2 [0, 65535] { R14781 += 1, R14718 += 1, R14719 += 1 };
  s1 -> s4 [0, 65535] { R14781 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R14781 += 1, R14719 += 1, R17 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R14781 += 1, R14719 += 1, R17 += 1 };
  s2 -> s2 [0, 65535] { R14781 += 1, R14718 += 1, R14719 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R14781 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 73] { R14783 += 1, R14721 += 1 };
  s0 -> s2 [0, 65535] { R14783 += 1, R14720 += 1, R14721 += 1 };
  s0 -> s0 [0, 65535] { R14782 += 1, R14783 += 1 };
  s0 -> s1 [81, 65535] { R14783 += 1, R14721 += 1 };
  s1 -> s1 [0, 73] { R14783 += 1, R14721 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R14783 += 1 };
  s1 -> s1 [81, 65535] { R14783 += 1, R14721 += 1 };
  s2 -> s1 [0, 73] { R14783 += 1, R14721 += 1 };
  s2 -> s2 [0, 65535] { R14783 += 1, R14720 += 1, R14721 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [81, 65535] { R14783 += 1, R14721 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R14785 += 1, R14722 += 1, R14723 += 1 };
  s0 -> s0 [0, 65535] { R14784 += 1, R14785 += 1 };
  s0 -> s2 [0, 65535] { R14785 += 1, R14723 += 1, R67 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R14785 += 1, R14722 += 1, R14723 += 1 };
  s1 -> s2 [0, 65535] { R14785 += 1, R14723 += 1, R67 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R14785 += 1 };
  s2 -> s2 [0, 65535] { R14785 += 1, R14723 += 1, R67 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R14785 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 80] { R14787 += 1, R14725 += 1 };
  s0 -> s0 [0, 65535] { R14786 += 1, R14787 += 1 };
  s0 -> s2 [0, 65535] { R14787 += 1, R14725 += 1, R69 += 1 };
  s0 -> s3 [0, 65535] { R14787 += 1, R14724 += 1, R14725 += 1 };
  s0 -> s1 [82, 65535] { R14787 += 1, R14725 += 1 };
  s1 -> s1 [0, 80] { R14787 += 1, R14725 += 1 };
  s1 -> s1 [0, 65535] { R14787 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [82, 65535] { R14787 += 1, R14725 += 1 };
  s2 -> s1 [0, 80] { R14787 += 1, R14725 += 1 };
  s2 -> s5 [0, 65535] { R14787 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R14787 += 1, R14725 += 1, R69 += 1 };
  s2 -> s1 [82, 65535] { R14787 += 1, R14725 += 1 };
  s3 -> s1 [0, 80] { R14787 += 1, R14725 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R14787 += 1, R14725 += 1, R69 += 1 };
  s3 -> s3 [0, 65535] { R14787 += 1, R14724 += 1, R14725 += 1 };
  s3 -> s1 [82, 65535] { R14787 += 1, R14725 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R14787 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 80] { R14789 += 1, R14727 += 1, R11525 += 1 };
  s0 -> s1 [0, 65535] { R14789 += 1, R14727 += 1 };
  s0 -> s0 [0, 65535] { R14788 += 1, R14789 += 1 };
  s0 -> s2 [0, 65535] { R14789 += 1, R14726 += 1, R14727 += 1 };
  s0 -> s1 [82, 65535] { R14789 += 1, R14727 += 1, R11525 += 1 };
  s1 -> s1 [0, 80] { R14789 += 1, R14727 += 1, R11525 += 1 };
  s1 -> s1 [0, 65535] { R14789 += 1, R14727 += 1 };
  s1 -> s4 [0, 65535] { R14789 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [82, 65535] { R14789 += 1, R14727 += 1, R11525 += 1 };
  s2 -> s1 [0, 80] { R14789 += 1, R14727 += 1, R11525 += 1 };
  s2 -> s1 [0, 65535] { R14789 += 1, R14727 += 1 };
  s2 -> s2 [0, 65535] { R14789 += 1, R14726 += 1, R14727 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [82, 65535] { R14789 += 1, R14727 += 1, R11525 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R14789 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R14791 += 1, R14729 += 1, R11530 += 1, R11531 += 1 };
  s0 -> s2 [0, 65535] { R14791 += 1, R14729 += 1, R11529 += 1, R11530 += 1 };
  s0 -> s3 [0, 65535] { R14791 += 1, R14728 += 1, R14729 += 1 };
  s0 -> s0 [0, 65535] { R14790 += 1, R14791 += 1 };
  s1 -> s1 [0, 65535] { R14791 += 1, R14729 += 1, R11530 += 1, R11531 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R14791 += 1, R14729 += 1 };
  s1 -> s5 [0, 65535] { R14791 += 1 };
  s2 -> s1 [0, 65535] { R14791 += 1, R14729 += 1, R11530 += 1, R11531 += 1 };
  s2 -> s2 [0, 65535] { R14791 += 1, R14729 += 1, R11529 += 1, R11530 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R14791 += 1 };
  s3 -> s1 [0, 65535] { R14791 += 1, R14729 += 1, R11530 += 1, R11531 += 1 };
  s3 -> s2 [0, 65535] { R14791 += 1, R14729 += 1, R11529 += 1, R11530 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R14791 += 1, R14728 += 1, R14729 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R14791 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R14791 += 1, R14729 += 1 };
  s6 -> s5 [0, 65535] { R14791 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 81] { R14793 += 1, R14731 += 1, R14075 += 1 };
  s0 -> s0 [0, 65535] { R14792 += 1, R14793 += 1 };
  s0 -> s2 [0, 65535] { R14793 += 1, R14730 += 1, R14731 += 1 };
  s0 -> s3 [0, 65535] { R14793 += 1, R14731 += 1, R14074 += 1, R14075 += 1 };
  s0 -> s4 [88, 88] { R14793 += 1, R14731 += 1, R14075 += 1 };
  s0 -> s1 [89, 65535] { R14793 += 1, R14731 += 1, R14075 += 1 };
  s1 -> s1 [0, 81] { R14793 += 1, R14731 += 1, R14075 += 1 };
  s1 -> s4 [88, 88] { R14793 += 1, R14731 += 1, R14075 += 1 };
  s1 -> s1 [89, 65535] { R14793 += 1, R14731 += 1, R14075 += 1 };
  s2 -> s1 [0, 81] { R14793 += 1, R14731 += 1, R14075 += 1 };
  s2 -> s2 [0, 65535] { R14793 += 1, R14730 += 1, R14731 += 1 };
  s2 -> s3 [0, 65535] { R14793 += 1, R14731 += 1, R14074 += 1, R14075 += 1 };
  s2 -> s4 [88, 88] { R14793 += 1, R14731 += 1, R14075 += 1 };
  s2 -> s1 [89, 65535] { R14793 += 1, R14731 += 1, R14075 += 1 };
  s3 -> s1 [0, 81] { R14793 += 1, R14731 += 1, R14075 += 1 };
  s3 -> s3 [0, 65535] { R14793 += 1, R14731 += 1, R14074 += 1, R14075 += 1 };
  s3 -> s4 [88, 88] { R14793 += 1, R14731 += 1, R14075 += 1 };
  s3 -> s1 [89, 65535] { R14793 += 1, R14731 += 1, R14075 += 1 };
  s4 -> s4 [0, 81] { R14793 += 1, R14731 += 1, R14075 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R14793 += 1 };
  s4 -> s4 [0, 65535] { R14793 += 1, R14731 += 1 };
  s4 -> s4 [88, 65535] { R14793 += 1, R14731 += 1, R14075 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R14793 += 1 };
  accepting s4, s5, s6;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R14795 += 1, R14733 += 1 };
  s0 -> s2 [0, 65535] { R14795 += 1, R14733 += 1, R14502 += 1, R14503 += 1 };
  s0 -> s0 [0, 65535] { R14794 += 1, R14795 += 1 };
  s0 -> s3 [0, 65535] { R14795 += 1, R14732 += 1, R14733 += 1 };
  s1 -> s1 [0, 65535] { R14795 += 1, R14733 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R14795 += 1 };
  s2 -> s1 [0, 65535] { R14795 += 1, R14733 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R14795 += 1, R14733 += 1, R14502 += 1, R14503 += 1 };
  s2 -> s5 [0, 65535] { R14795 += 1 };
  s3 -> s1 [0, 65535] { R14795 += 1, R14733 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R14795 += 1, R14733 += 1, R14502 += 1, R14503 += 1 };
  s3 -> s3 [0, 65535] { R14795 += 1, R14732 += 1, R14733 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R14795 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s0 [0, 65535] { R14796 += 1, R14797 += 1 };
  s0 -> s1 [0, 65535] { R14797 += 1, R14735 += 1 };
  s0 -> s2 [0, 65535] { R14797 += 1, R14734 += 1, R14735 += 1 };
  s1 -> s1 [0, 65535] { R14797 += 1, R14735 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R14797 += 1 };
  s2 -> s1 [0, 65535] { R14797 += 1, R14735 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R14797 += 1, R14734 += 1, R14735 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R14797 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s0 [0, 65535] { R14798 += 1, R14799 += 1 };
  s0 -> s1 [0, 65535] { R14799 += 1, R14754 += 1, R14755 += 1 };
  s0 -> s2 [0, 65535] { R14799 += 1, R14755 += 1, R18 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R14799 += 1, R14754 += 1, R14755 += 1 };
  s1 -> s2 [0, 65535] { R14799 += 1, R14755 += 1, R18 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R14799 += 1 };
  s2 -> s2 [0, 65535] { R14799 += 1, R14755 += 1, R18 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R14799 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 72] { R14801 += 1, R14757 += 1 };
  s0 -> s2 [0, 65535] { R14801 += 1, R14756 += 1, R14757 += 1 };
  s0 -> s0 [0, 65535] { R14800 += 1, R14801 += 1 };
  s0 -> s3 [73, 73] { R14801 += 1, R14757 += 1 };
  s0 -> s4 [73, 73] { R14801 += 1, R14757 += 1 };
  s0 -> s5 [81, 81] { R14801 += 1, R14757 += 1 };
  s0 -> s1 [82, 65535] { R14801 += 1, R14757 += 1 };
  s1 -> s1 [0, 72] { R14801 += 1, R14757 += 1 };
  s1 -> s3 [73, 73] { R14801 += 1, R14757 += 1 };
  s1 -> s4 [73, 73] { R14801 += 1, R14757 += 1 };
  s1 -> s5 [81, 81] { R14801 += 1, R14757 += 1 };
  s1 -> s1 [82, 65535] { R14801 += 1, R14757 += 1 };
  s2 -> s1 [0, 72] { R14801 += 1, R14757 += 1 };
  s2 -> s2 [0, 65535] { R14801 += 1, R14756 += 1, R14757 += 1 };
  s2 -> s3 [73, 73] { R14801 += 1, R14757 += 1 };
  s2 -> s4 [73, 73] { R14801 += 1, R14757 += 1 };
  s2 -> s5 [81, 81] { R14801 += 1, R14757 += 1 };
  s2 -> s1 [82, 65535] { R14801 += 1, R14757 += 1 };
  s4 -> s4 [0, 73] { R14801 += 1, R14757 += 1 };
  s4 -> s7 [81, 81] { R14801 += 1, R14757 += 1 };
  s4 -> s4 [82, 65535] { R14801 += 1, R14757 += 1 };
  s5 -> s5 [0, 72] { R14801 += 1, R14757 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R14801 += 1 };
  s5 -> s7 [73, 73] { R14801 += 1, R14757 += 1 };
  s5 -> s8 [73, 73] { R14801 += 1, R14757 += 1 };
  s5 -> s5 [81, 65535] { R14801 += 1, R14757 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 73] { R14801 += 1, R14757 += 1 };
  s7 -> s7 [0, 65535] { R14801 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [81, 65535] { R14801 += 1, R14757 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R14801 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 72] { R14803 += 1, R14759 += 1, R66 += 1 };
  s0 -> s2 [0, 65535] { R14803 += 1, R14758 += 1, R14759 += 1 };
  s0 -> s0 [0, 65535] { R14802 += 1, R14803 += 1 };
  s0 -> s3 [73, 73] { R14803 += 1, R14759 += 1, R66 += 1 };
  s0 -> s4 [73, 73] { R14803 += 1, R14759 += 1, R66 += 1 };
  s0 -> s1 [74, 65535] { R14803 += 1, R14759 += 1, R66 += 1 };
  s1 -> s1 [0, 72] { R14803 += 1, R14759 += 1, R66 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R14803 += 1 };
  s1 -> s3 [73, 73] { R14803 += 1, R14759 += 1, R66 += 1 };
  s1 -> s4 [73, 73] { R14803 += 1, R14759 += 1, R66 += 1 };
  s1 -> s1 [74, 65535] { R14803 += 1, R14759 += 1, R66 += 1 };
  s2 -> s1 [0, 72] { R14803 += 1, R14759 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R14803 += 1, R14758 += 1, R14759 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R14803 += 1, R14759 += 1, R66 += 1 };
  s2 -> s4 [73, 73] { R14803 += 1, R14759 += 1, R66 += 1 };
  s2 -> s1 [74, 65535] { R14803 += 1, R14759 += 1, R66 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R14803 += 1 };
  s3 -> s3 [0, 65535] { R14803 += 1, R14759 += 1, R66 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R14803 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R14803 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 72] { R14805 += 1, R14761 += 1, R68 += 1 };
  s0 -> s0 [0, 65535] { R14804 += 1, R14805 += 1 };
  s0 -> s2 [0, 65535] { R14805 += 1, R14760 += 1, R14761 += 1 };
  s0 -> s3 [73, 73] { R14805 += 1, R14761 += 1, R68 += 1 };
  s0 -> s4 [73, 73] { R14805 += 1, R14761 += 1, R68 += 1 };
  s0 -> s1 [74, 65535] { R14805 += 1, R14761 += 1, R68 += 1 };
  s1 -> s1 [0, 72] { R14805 += 1, R14761 += 1, R68 += 1 };
  s1 -> s1 [0, 65535] { R14805 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R14805 += 1, R14761 += 1, R68 += 1 };
  s1 -> s4 [73, 73] { R14805 += 1, R14761 += 1, R68 += 1 };
  s1 -> s1 [74, 65535] { R14805 += 1, R14761 += 1, R68 += 1 };
  s2 -> s1 [0, 72] { R14805 += 1, R14761 += 1, R68 += 1 };
  s2 -> s2 [0, 65535] { R14805 += 1, R14760 += 1, R14761 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R14805 += 1, R14761 += 1, R68 += 1 };
  s2 -> s4 [73, 73] { R14805 += 1, R14761 += 1, R68 += 1 };
  s2 -> s1 [74, 65535] { R14805 += 1, R14761 += 1, R68 += 1 };
  s3 -> s3 [0, 65535] { R14805 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R14805 += 1, R14761 += 1, R68 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R14805 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R14805 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 72] { R14807 += 1, R14763 += 1, R11523 += 1 };
  s0 -> s2 [0, 72] { R14807 += 1, R14763 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s0 [0, 65535] { R14806 += 1, R14807 += 1 };
  s0 -> s3 [0, 65535] { R14807 += 1, R14762 += 1, R14763 += 1 };
  s0 -> s4 [73, 73] { R14807 += 1, R14763 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s5 [73, 73] { R14807 += 1, R14763 += 1, R11523 += 1 };
  s0 -> s6 [73, 73] { R14807 += 1, R14763 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s7 [73, 73] { R14807 += 1, R14763 += 1, R11523 += 1 };
  s0 -> s1 [74, 80] { R14807 += 1, R14763 += 1, R11523 += 1 };
  s0 -> s2 [74, 65535] { R14807 += 1, R14763 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s1 [82, 65535] { R14807 += 1, R14763 += 1, R11523 += 1 };
  s1 -> s1 [0, 72] { R14807 += 1, R14763 += 1, R11523 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s1 [0, 65535] { R14807 += 1 };
  s1 -> s5 [73, 73] { R14807 += 1, R14763 += 1 };
  s1 -> s7 [73, 73] { R14807 += 1, R14763 += 1 };
  s1 -> s1 [74, 80] { R14807 += 1, R14763 += 1, R11523 += 1 };
  s1 -> s1 [74, 65535] { R14807 += 1, R14763 += 1 };
  s1 -> s1 [82, 65535] { R14807 += 1, R14763 += 1, R11523 += 1 };
  s2 -> s1 [0, 72] { R14807 += 1, R14763 += 1, R11523 += 1 };
  s2 -> s2 [0, 72] { R14807 += 1, R14763 += 1, R11522 += 1, R11523 += 1 };
  s2 -> s4 [73, 73] { R14807 += 1, R14763 += 1, R11522 += 1, R11523 += 1 };
  s2 -> s5 [73, 73] { R14807 += 1, R14763 += 1, R11523 += 1 };
  s2 -> s6 [73, 73] { R14807 += 1, R14763 += 1, R11522 += 1, R11523 += 1 };
  s2 -> s7 [73, 73] { R14807 += 1, R14763 += 1, R11523 += 1 };
  s2 -> s1 [74, 80] { R14807 += 1, R14763 += 1, R11523 += 1 };
  s2 -> s2 [74, 65535] { R14807 += 1, R14763 += 1, R11522 += 1, R11523 += 1 };
  s2 -> s1 [82, 65535] { R14807 += 1, R14763 += 1, R11523 += 1 };
  s3 -> s1 [0, 72] { R14807 += 1, R14763 += 1, R11523 += 1 };
  s3 -> s2 [0, 72] { R14807 += 1, R14763 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s3 [0, 65535] { R14807 += 1, R14762 += 1, R14763 += 1 };
  s3 -> s4 [73, 73] { R14807 += 1, R14763 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s5 [73, 73] { R14807 += 1, R14763 += 1, R11523 += 1 };
  s3 -> s6 [73, 73] { R14807 += 1, R14763 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s7 [73, 73] { R14807 += 1, R14763 += 1, R11523 += 1 };
  s3 -> s1 [74, 80] { R14807 += 1, R14763 += 1, R11523 += 1 };
  s3 -> s2 [74, 65535] { R14807 += 1, R14763 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s1 [82, 65535] { R14807 += 1, R14763 += 1, R11523 += 1 };
  s4 -> s7 [0, 80] { R14807 += 1, R14763 += 1, R11523 += 1 };
  s4 -> s4 [0, 65535] { R14807 += 1, R14763 += 1, R11522 += 1, R11523 += 1 };
  s4 -> s7 [82, 65535] { R14807 += 1, R14763 += 1, R11523 += 1 };
  s5 -> s5 [0, 65535] { R14807 += 1 };
  s5 -> s8 [0, 65535];
  s7 -> s7 [0, 80] { R14807 += 1, R14763 += 1, R11523 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R14807 += 1, R14763 += 1 };
  s7 -> s9 [0, 65535] { R14807 += 1 };
  s7 -> s7 [82, 65535] { R14807 += 1, R14763 += 1, R11523 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R14807 += 1 };
  accepting s8, s5, s9, s1, s7;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 72] { R14809 += 1, R14765 += 1, R11526 += 1, R11527 += 1 };
  s0 -> s2 [0, 65535] { R14809 += 1, R14764 += 1, R14765 += 1 };
  s0 -> s0 [0, 65535] { R14808 += 1, R14809 += 1 };
  s0 -> s3 [73, 73] { R14809 += 1, R14765 += 1, R11526 += 1, R11527 += 1 };
  s0 -> s4 [73, 73] { R14809 += 1, R14765 += 1, R11526 += 1, R11527 += 1 };
  s0 -> s1 [74, 65535] { R14809 += 1, R14765 += 1, R11526 += 1, R11527 += 1 };
  s1 -> s1 [0, 72] { R14809 += 1, R14765 += 1, R11526 += 1, R11527 += 1 };
  s1 -> s1 [0, 65535] { R14809 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [73, 73] { R14809 += 1, R14765 += 1, R11526 += 1, R11527 += 1 };
  s1 -> s4 [73, 73] { R14809 += 1, R14765 += 1, R11526 += 1, R11527 += 1 };
  s1 -> s1 [74, 65535] { R14809 += 1, R14765 += 1, R11526 += 1, R11527 += 1 };
  s2 -> s1 [0, 72] { R14809 += 1, R14765 += 1, R11526 += 1, R11527 += 1 };
  s2 -> s2 [0, 65535] { R14809 += 1, R14764 += 1, R14765 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [73, 73] { R14809 += 1, R14765 += 1, R11526 += 1, R11527 += 1 };
  s2 -> s4 [73, 73] { R14809 += 1, R14765 += 1, R11526 += 1, R11527 += 1 };
  s2 -> s1 [74, 65535] { R14809 += 1, R14765 += 1, R11526 += 1, R11527 += 1 };
  s3 -> s3 [0, 65535] { R14809 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R14809 += 1 };
  s4 -> s4 [0, 65535] { R14809 += 1, R14765 += 1, R11526 += 1, R11527 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R14809 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 72] { R14811 += 1, R14767 += 1, R14072 += 1, R14073 += 1 };
  s0 -> s2 [0, 65535] { R14811 += 1, R14766 += 1, R14767 += 1 };
  s0 -> s0 [0, 65535] { R14810 += 1, R14811 += 1 };
  s0 -> s3 [73, 73] { R14811 += 1, R14767 += 1, R14072 += 1, R14073 += 1 };
  s0 -> s4 [73, 73] { R14811 += 1, R14767 += 1, R14072 += 1, R14073 += 1 };
  s0 -> s1 [74, 65535] { R14811 += 1, R14767 += 1, R14072 += 1, R14073 += 1 };
  s1 -> s1 [0, 72] { R14811 += 1, R14767 += 1, R14072 += 1, R14073 += 1 };
  s1 -> s1 [0, 65535] { R14811 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [73, 73] { R14811 += 1, R14767 += 1, R14072 += 1, R14073 += 1 };
  s1 -> s4 [73, 73] { R14811 += 1, R14767 += 1, R14072 += 1, R14073 += 1 };
  s1 -> s1 [74, 65535] { R14811 += 1, R14767 += 1, R14072 += 1, R14073 += 1 };
  s2 -> s1 [0, 72] { R14811 += 1, R14767 += 1, R14072 += 1, R14073 += 1 };
  s2 -> s2 [0, 65535] { R14811 += 1, R14766 += 1, R14767 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [73, 73] { R14811 += 1, R14767 += 1, R14072 += 1, R14073 += 1 };
  s2 -> s4 [73, 73] { R14811 += 1, R14767 += 1, R14072 += 1, R14073 += 1 };
  s2 -> s1 [74, 65535] { R14811 += 1, R14767 += 1, R14072 += 1, R14073 += 1 };
  s3 -> s3 [0, 65535] { R14811 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R14811 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R14811 += 1, R14767 += 1, R14072 += 1, R14073 += 1 };
  s5 -> s5 [0, 65535] { R14811 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 72] { R14813 += 1, R14769 += 1, R14499 += 1, R14500 += 1 };
  s0 -> s2 [0, 72] { R14813 += 1, R14769 += 1, R14498 += 1, R14499 += 1 };
  s0 -> s3 [0, 65535] { R14813 += 1, R14768 += 1, R14769 += 1 };
  s0 -> s0 [0, 65535] { R14812 += 1, R14813 += 1 };
  s0 -> s4 [73, 73] { R14813 += 1, R14769 += 1, R14499 += 1, R14500 += 1 };
  s0 -> s5 [73, 73] { R14813 += 1, R14769 += 1, R14498 += 1, R14499 += 1 };
  s0 -> s6 [73, 73] { R14813 += 1, R14769 += 1, R14499 += 1, R14500 += 1 };
  s0 -> s7 [73, 73] { R14813 += 1, R14769 += 1, R14498 += 1, R14499 += 1 };
  s0 -> s1 [74, 65535] { R14813 += 1, R14769 += 1, R14499 += 1, R14500 += 1 };
  s0 -> s2 [74, 65535] { R14813 += 1, R14769 += 1, R14498 += 1, R14499 += 1 };
  s1 -> s1 [0, 72] { R14813 += 1, R14769 += 1, R14499 += 1, R14500 += 1 };
  s1 -> s1 [0, 65535] { R14813 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s4 [73, 73] { R14813 += 1, R14769 += 1, R14499 += 1, R14500 += 1 };
  s1 -> s6 [73, 73] { R14813 += 1, R14769 += 1, R14499 += 1, R14500 += 1 };
  s1 -> s1 [74, 65535] { R14813 += 1, R14769 += 1, R14499 += 1, R14500 += 1 };
  s2 -> s1 [0, 72] { R14813 += 1, R14769 += 1, R14499 += 1, R14500 += 1 };
  s2 -> s2 [0, 72] { R14813 += 1, R14769 += 1, R14498 += 1, R14499 += 1 };
  s2 -> s4 [73, 73] { R14813 += 1, R14769 += 1, R14499 += 1, R14500 += 1 };
  s2 -> s5 [73, 73] { R14813 += 1, R14769 += 1, R14498 += 1, R14499 += 1 };
  s2 -> s6 [73, 73] { R14813 += 1, R14769 += 1, R14499 += 1, R14500 += 1 };
  s2 -> s7 [73, 73] { R14813 += 1, R14769 += 1, R14498 += 1, R14499 += 1 };
  s2 -> s1 [74, 65535] { R14813 += 1, R14769 += 1, R14499 += 1, R14500 += 1 };
  s2 -> s2 [74, 65535] { R14813 += 1, R14769 += 1, R14498 += 1, R14499 += 1 };
  s3 -> s1 [0, 72] { R14813 += 1, R14769 += 1, R14499 += 1, R14500 += 1 };
  s3 -> s2 [0, 72] { R14813 += 1, R14769 += 1, R14498 += 1, R14499 += 1 };
  s3 -> s3 [0, 65535] { R14813 += 1, R14768 += 1, R14769 += 1 };
  s3 -> s4 [73, 73] { R14813 += 1, R14769 += 1, R14499 += 1, R14500 += 1 };
  s3 -> s5 [73, 73] { R14813 += 1, R14769 += 1, R14498 += 1, R14499 += 1 };
  s3 -> s6 [73, 73] { R14813 += 1, R14769 += 1, R14499 += 1, R14500 += 1 };
  s3 -> s7 [73, 73] { R14813 += 1, R14769 += 1, R14498 += 1, R14499 += 1 };
  s3 -> s1 [74, 65535] { R14813 += 1, R14769 += 1, R14499 += 1, R14500 += 1 };
  s3 -> s2 [74, 65535] { R14813 += 1, R14769 += 1, R14498 += 1, R14499 += 1 };
  s4 -> s4 [0, 65535] { R14813 += 1, R14769 += 1, R14499 += 1, R14500 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s9 [0, 65535] { R14813 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R14813 += 1 };
  s7 -> s4 [0, 65535] { R14813 += 1, R14769 += 1, R14499 += 1, R14500 += 1 };
  s7 -> s7 [0, 65535] { R14813 += 1, R14769 += 1, R14498 += 1, R14499 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R14813 += 1 };
  accepting s4, s8, s9, s6, s1;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 72] { R14815 += 1, R14771 += 1, R14713 += 1 };
  s0 -> s2 [0, 72] { R14815 += 1, R14771 += 1, R14712 += 1, R14713 += 1 };
  s0 -> s3 [0, 65535] { R14815 += 1, R14770 += 1, R14771 += 1 };
  s0 -> s0 [0, 65535] { R14814 += 1, R14815 += 1 };
  s0 -> s4 [73, 73] { R14815 += 1, R14771 += 1, R14712 += 1, R14713 += 1 };
  s0 -> s5 [73, 73] { R14815 += 1, R14771 += 1, R14712 += 1, R14713 += 1 };
  s0 -> s6 [73, 73] { R14815 += 1, R14771 += 1, R14713 += 1 };
  s0 -> s7 [73, 73] { R14815 += 1, R14771 += 1, R14713 += 1 };
  s0 -> s1 [74, 80] { R14815 += 1, R14771 += 1, R14713 += 1 };
  s0 -> s2 [74, 65535] { R14815 += 1, R14771 += 1, R14712 += 1, R14713 += 1 };
  s0 -> s8 [81, 81] { R14815 += 1, R14771 += 1, R14713 += 1 };
  s0 -> s1 [89, 65535] { R14815 += 1, R14771 += 1, R14713 += 1 };
  s1 -> s1 [0, 72] { R14815 += 1, R14771 += 1, R14713 += 1 };
  s1 -> s6 [73, 73] { R14815 += 1, R14771 += 1 };
  s1 -> s7 [73, 73] { R14815 += 1, R14771 += 1 };
  s1 -> s1 [74, 80] { R14815 += 1, R14771 += 1, R14713 += 1 };
  s1 -> s1 [74, 65535] { R14815 += 1, R14771 += 1 };
  s1 -> s8 [81, 81] { R14815 += 1, R14771 += 1, R14713 += 1 };
  s1 -> s1 [89, 65535] { R14815 += 1, R14771 += 1, R14713 += 1 };
  s2 -> s1 [0, 72] { R14815 += 1, R14771 += 1, R14713 += 1 };
  s2 -> s2 [0, 72] { R14815 += 1, R14771 += 1, R14712 += 1, R14713 += 1 };
  s2 -> s4 [73, 73] { R14815 += 1, R14771 += 1, R14712 += 1, R14713 += 1 };
  s2 -> s5 [73, 73] { R14815 += 1, R14771 += 1, R14712 += 1, R14713 += 1 };
  s2 -> s6 [73, 73] { R14815 += 1, R14771 += 1, R14713 += 1 };
  s2 -> s7 [73, 73] { R14815 += 1, R14771 += 1, R14713 += 1 };
  s2 -> s1 [74, 80] { R14815 += 1, R14771 += 1, R14713 += 1 };
  s2 -> s2 [74, 65535] { R14815 += 1, R14771 += 1, R14712 += 1, R14713 += 1 };
  s2 -> s8 [81, 81] { R14815 += 1, R14771 += 1, R14713 += 1 };
  s2 -> s1 [89, 65535] { R14815 += 1, R14771 += 1, R14713 += 1 };
  s3 -> s1 [0, 72] { R14815 += 1, R14771 += 1, R14713 += 1 };
  s3 -> s2 [0, 72] { R14815 += 1, R14771 += 1, R14712 += 1, R14713 += 1 };
  s3 -> s3 [0, 65535] { R14815 += 1, R14770 += 1, R14771 += 1 };
  s3 -> s4 [73, 73] { R14815 += 1, R14771 += 1, R14712 += 1, R14713 += 1 };
  s3 -> s5 [73, 73] { R14815 += 1, R14771 += 1, R14712 += 1, R14713 += 1 };
  s3 -> s6 [73, 73] { R14815 += 1, R14771 += 1, R14713 += 1 };
  s3 -> s7 [73, 73] { R14815 += 1, R14771 += 1, R14713 += 1 };
  s3 -> s1 [74, 80] { R14815 += 1, R14771 += 1, R14713 += 1 };
  s3 -> s2 [74, 65535] { R14815 += 1, R14771 += 1, R14712 += 1, R14713 += 1 };
  s3 -> s8 [81, 81] { R14815 += 1, R14771 += 1, R14713 += 1 };
  s3 -> s1 [89, 65535] { R14815 += 1, R14771 += 1, R14713 += 1 };
  s4 -> s7 [0, 80] { R14815 += 1, R14771 += 1, R14713 += 1 };
  s4 -> s4 [0, 65535] { R14815 += 1, R14771 += 1, R14712 += 1, R14713 += 1 };
  s4 -> s11 [81, 81] { R14815 += 1, R14771 += 1, R14713 += 1 };
  s4 -> s7 [89, 65535] { R14815 += 1, R14771 += 1, R14713 += 1 };
  s7 -> s7 [0, 80] { R14815 += 1, R14771 += 1, R14713 += 1 };
  s7 -> s7 [0, 65535] { R14815 += 1, R14771 += 1 };
  s7 -> s11 [81, 81] { R14815 += 1, R14771 += 1, R14713 += 1 };
  s7 -> s7 [89, 65535] { R14815 += 1, R14771 += 1, R14713 += 1 };
  s8 -> s8 [0, 72] { R14815 += 1, R14771 += 1 };
  s8 -> s8 [0, 65535] { R14815 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [73, 73] { R14815 += 1, R14771 += 1 };
  s8 -> s11 [73, 73] { R14815 += 1, R14771 += 1 };
  s8 -> s8 [74, 65535] { R14815 += 1, R14771 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R14815 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s12 [0, 65535] { R14815 += 1 };
  s11 -> s11 [0, 65535] { R14815 += 1, R14771 += 1 };
  s11 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R14815 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [113, 113];
  accepting s1;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
constraint R1 = R14731 && R2 = R14815 && R20 - R14815 = -1 && R21 = R14815 && R22 - R14815 = -1 && R23 = R14815 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R14075 + -1*R14073 - R53 = 0 && R52 + R14074 + R14072 = 0 && R14730 = 0 && R14756 = 0 && R14757 = 0 && R14762 = 0 && R14763 = 0 && R14768 = 0 && R14769 = 0 && R14770 = 0 && R14771 = 0 && R14772 = 0 && R14773 = R14815 && R14774 = 0 && R14775 = R14815 && R14776 = 0 && R14777 = R14815 && R14778 = 0 && R14779 = R14815 && R14780 = 0 && R14781 = R14815 && R14782 = 0 && R14783 = R14815 && R14784 = 0 && R14785 = R14815 && R14786 = 0 && R14787 = R14815 && R14788 = 0 && R14789 = R14815 && R14790 = 0 && R14791 = R14815 && R14792 = 0 && R14793 = R14815 && R14794 = 0 && R14795 = R14815 && R14796 = 0 && R14797 = R14815 && R14798 = 0 && R14799 = R14815 && R14800 = 0 && R14801 = R14815 && R14802 = 0 && R14803 = R14815 && R14804 = 0 && R14805 = R14815 && R14806 = 0 && R14807 = R14815 && R14808 = 0 && R14809 = R14815 && R14810 = 0 && R14811 = R14815 && R14812 = 0 && R14813 = R14815 && R14814 = 0 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R14075 + -1*R14073 - R53 < 1 && -1 < R14731 && 0 < R14815 && (R48 + R11531 + R11528 != 0 || ((R42 + R11524 + R11522 != 0 || R43 + R11525 + R11523 + -1*R14075 + -1*R14073 - R53 = 0 || R53 + R14075 + R14073 < 1) && (R42 + R11524 + R11522 = 0 || R53 + R14075 + R14073 < 1))) && (R48 + R11531 + R11528 != 0 || ((R46 + R11529 + R11526 != 0 || R47 + R11530 + R11527 + -1*R14075 + -1*R14073 - R53 = 0 || R53 + R14075 + R14073 < 1) && (R46 + R11529 + R11526 = 0 || R53 + R14075 + R14073 < 1))) && (R14716 != 0 || R14717 = R14731 || (R17 = 0 && R14731 = 0)) && (R14718 != 0 || R14719 = R14731 || (R17 = 0 && R14731 = 0)) && (R14720 != 0 || R14721 = R14731 || (R17 = 0 && R14731 = 0)) && (R14722 != 0 || R14723 = R14731 || (R17 = 0 && R14731 = 0)) && (R14724 != 0 || R14725 = R14731 || (R17 = 0 && R14731 = 0)) && (R14726 != 0 || R14727 = R14731 || (R17 = 0 && R14731 = 0)) && (R14728 != 0 || R14729 = R14731 || (R17 = 0 && R14731 = 0)) && (R14732 != 0 || R14731 = R14733 || (R17 = 0 && R14731 = 0)) && (R14734 != 0 || R14731 = R14735 || (R17 = 0 && R14731 = 0)) && (R18 = 0 || (R14754 = 0 && R14755 = 0)) && (R18 = 0 || (R14758 = 0 && R14759 = 0)) && (R18 = 0 || (R14760 = 0 && R14761 = 0)) && (R18 = 0 || (R14764 = 0 && R14765 = 0)) && (R18 = 0 || (R14766 = 0 && R14767 = 0)) && (R19 = 0 || (R14736 = 0 && R14737 = 0)) && (R19 = 0 || (R14738 = 0 && R14739 = 0)) && (R19 = 0 || (R14740 = 0 && R14741 = 0)) && (R19 = 0 || (R14742 = 0 && R14743 = 0)) && (R19 = 0 || (R14744 = 0 && R14745 = 0)) && (R19 = 0 || (R14746 = 0 && R14747 = 0)) && (R19 = 0 || (R14748 = 0 && R14749 = 0)) && (R19 = 0 || (R14750 = 0 && R14751 = 0)) && (R19 = 0 || (R14752 = 0 && R14753 = 0)) && (R48 + R11531 + R11528 = 0 || (R42 + R11524 + R11522 = 0 && R43 + R11525 + R11523 + -1*R14075 + -1*R14073 - R53 = 0)) && (R48 + R11531 + R11528 = 0 || (R46 + R11529 + R11526 = 0 && R47 + R11530 + R11527 + -1*R14075 + -1*R14073 - R53 = 0)) && (R58 + R14503 + R14500 = 0 || (R56 + R14501 + R14498 = 0 && R57 + R14502 + R14499 = 0)) && (R58 + R14503 + R14500 = 0 || (R62 + R14714 + R14712 = 0 && R63 + R14715 + R14713 = 0)) && (R14716 = 0 || (R17 = 0 && R14731 = 0)) && (R14718 = 0 || (R17 = 0 && R14731 = 0)) && (R14720 = 0 || (R17 = 0 && R14731 = 0)) && (R14722 = 0 || (R17 = 0 && R14731 = 0)) && (R14724 = 0 || (R17 = 0 && R14731 = 0)) && (R14726 = 0 || (R17 = 0 && R14731 = 0)) && (R14728 = 0 || (R17 = 0 && R14731 = 0)) && (R14732 = 0 || (R17 = 0 && R14731 = 0)) && (R14734 = 0 || (R17 = 0 && R14731 = 0));
// End of Parikh automata intersection problem
