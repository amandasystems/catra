// Parikh automata intersection problem, generated by OSTRICH+
counter int R10159, R10160, R10161, R10162, R10163, R10164, R10165, R10166, R10167, R10168, R10169, R10170, R10171, R10172, R10283, R10284, R10285, R10286, R10287, R10288, R10289, R10290, R10291, R10292, R10293, R10294, R10295, R10296, R10297, R10298, R10299, R10300, R10301, R10302, R10303, R10304, R10305, R10306, R10307, R10308, R10309, R10310, R10311, R10312, R10313, R10314, R10315, R10316, R10317, R10318, R10319, R10320, R10321, R10322, R10323, R10324, R10325, R10326, R10327, R10328, R10329, R10330, R10331, R10332, R10333, R10334, R10335, R10336, R10337, R10338, R10339, R10340, R10341, R10342, R10343, R10344, R10345, R10346, R10347, R10348, R10349, R10350, R10351, R10352, R10353, R10354, R10355, R10356, R10357, R10358, R10359, R10360, R10361, R10362, R10363, R10364, R10365, R10366, R10367, R10368, R10369, R10370, R10371, R10372, R10373, R10374, R10375, R10376, R10377, R10378, R10379, R10380, R10381, R10382, R10383, R10384, R10385, R10386, R10387, R10388, R10389, R10390, R10391, R10392, R12, R15, R16, R2, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R4, R45, R47, R49, R5, R50, R53, R54, R55, R59, R60, R61, R65, R66, R67, R68, R73, R74, R75, R76, R77, R83, R84, R85, R86, R87, R88, R89, R90, R91, R92, R93, R94, R95, R96;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [70, 70];
  s0 -> s0 [71, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [70, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R15 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 69];
  s0 -> s0 [0, 65535] { R16 += 1 };
  s0 -> s2 [70, 70];
  s0 -> s1 [71, 65535];
  s1 -> s1 [0, 69];
  s1 -> s2 [70, 70];
  s1 -> s1 [71, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R24 += 1 };
  s0 -> s0 [0, 65535] { R23 += 1, R24 += 1 };
  s0 -> s2 [9, 13] { R24 += 1 };
  s0 -> s1 [14, 31] { R24 += 1 };
  s0 -> s2 [32, 32] { R24 += 1 };
  s0 -> s1 [33, 65535] { R24 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R24 += 1 };
  s2 -> s1 [0, 65535] { R24 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R25 += 1, R26 += 1 };
  s1 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R28 += 1 };
  s0 -> s0 [0, 65535] { R27 += 1, R28 += 1 };
  s0 -> s2 [9, 13] { R28 += 1 };
  s0 -> s1 [14, 31] { R28 += 1 };
  s0 -> s2 [32, 32] { R28 += 1 };
  s0 -> s1 [33, 65535] { R28 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R28 += 1 };
  s2 -> s1 [0, 65535] { R28 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R29 += 1, R30 += 1 };
  s1 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R10314 += 1, R22 += 1 };
  s0 -> s0 [0, 65535] { R10313 += 1, R10314 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R10314 += 1, R22 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 69] { R10316 += 1 };
  s0 -> s0 [0, 65535] { R10315 += 1, R10316 += 1 };
  s0 -> s2 [70, 70] { R10316 += 1 };
  s0 -> s3 [70, 70] { R10316 += 1 };
  s0 -> s1 [76, 65535] { R10316 += 1 };
  s1 -> s1 [0, 69] { R10316 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R10316 += 1 };
  s1 -> s3 [70, 70] { R10316 += 1 };
  s1 -> s1 [76, 65535] { R10316 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 70] { R10316 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [76, 65535] { R10316 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 69] { R10318 += 1, R45 += 1 };
  s0 -> s0 [0, 65535] { R10317 += 1, R10318 += 1 };
  s0 -> s2 [70, 70] { R10318 += 1, R45 += 1 };
  s0 -> s3 [70, 70] { R10318 += 1, R45 += 1 };
  s0 -> s1 [71, 65535] { R10318 += 1, R45 += 1 };
  s1 -> s1 [0, 69] { R10318 += 1, R45 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R10318 += 1, R45 += 1 };
  s1 -> s3 [70, 70] { R10318 += 1, R45 += 1 };
  s1 -> s1 [71, 65535] { R10318 += 1, R45 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10318 += 1, R45 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 69] { R10320 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R10319 += 1, R10320 += 1 };
  s0 -> s2 [70, 70] { R10320 += 1, R47 += 1 };
  s0 -> s3 [70, 70] { R10320 += 1, R47 += 1 };
  s0 -> s1 [71, 65535] { R10320 += 1, R47 += 1 };
  s1 -> s1 [0, 69] { R10320 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R10320 += 1, R47 += 1 };
  s1 -> s3 [70, 70] { R10320 += 1, R47 += 1 };
  s1 -> s1 [71, 65535] { R10320 += 1, R47 += 1 };
  s2 -> s2 [0, 65535] { R10320 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 69] { R10322 += 1, R49 += 1, R50 += 1 };
  s0 -> s0 [0, 65535] { R10321 += 1, R10322 += 1 };
  s0 -> s2 [70, 70] { R10322 += 1, R49 += 1, R50 += 1 };
  s0 -> s3 [70, 70] { R10322 += 1, R49 += 1, R50 += 1 };
  s0 -> s1 [71, 65535] { R10322 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 69] { R10322 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R10322 += 1, R49 += 1, R50 += 1 };
  s1 -> s3 [70, 70] { R10322 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [71, 65535] { R10322 += 1, R49 += 1, R50 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10322 += 1, R49 += 1, R50 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 69] { R10324 += 1, R53 += 1, R54 += 1 };
  s0 -> s0 [0, 65535] { R10323 += 1, R10324 += 1 };
  s0 -> s2 [70, 70] { R10324 += 1, R53 += 1, R54 += 1 };
  s0 -> s3 [70, 70] { R10324 += 1, R53 += 1, R54 += 1 };
  s0 -> s1 [71, 65535] { R10324 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 69] { R10324 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R10324 += 1, R53 += 1, R54 += 1 };
  s1 -> s3 [70, 70] { R10324 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [71, 65535] { R10324 += 1, R53 += 1, R54 += 1 };
  s2 -> s2 [0, 65535] { R10324 += 1, R53 += 1, R54 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 69] { R10326 += 1, R59 += 1, R60 += 1 };
  s0 -> s0 [0, 65535] { R10325 += 1, R10326 += 1 };
  s0 -> s2 [70, 70] { R10326 += 1, R59 += 1, R60 += 1 };
  s0 -> s3 [70, 70] { R10326 += 1, R59 += 1, R60 += 1 };
  s0 -> s1 [71, 65535] { R10326 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 69] { R10326 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R10326 += 1, R59 += 1, R60 += 1 };
  s1 -> s3 [70, 70] { R10326 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [71, 65535] { R10326 += 1, R59 += 1, R60 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10326 += 1, R59 += 1, R60 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 69] { R10328 += 1, R65 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R10327 += 1, R10328 += 1 };
  s0 -> s2 [70, 70] { R10328 += 1, R65 += 1, R66 += 1 };
  s0 -> s3 [70, 70] { R10328 += 1, R65 += 1, R66 += 1 };
  s0 -> s1 [71, 65535] { R10328 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 69] { R10328 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R10328 += 1, R65 += 1, R66 += 1 };
  s1 -> s3 [70, 70] { R10328 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [71, 65535] { R10328 += 1, R65 += 1, R66 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R10328 += 1, R65 += 1, R66 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 69] { R10330 += 1, R73 += 1, R74 += 1 };
  s0 -> s0 [0, 65535] { R10329 += 1, R10330 += 1 };
  s0 -> s2 [70, 70] { R10330 += 1, R73 += 1, R74 += 1 };
  s0 -> s3 [70, 70] { R10330 += 1, R73 += 1, R74 += 1 };
  s0 -> s1 [71, 65535] { R10330 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 69] { R10330 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R10330 += 1, R73 += 1, R74 += 1 };
  s1 -> s3 [70, 70] { R10330 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [71, 65535] { R10330 += 1, R73 += 1, R74 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10330 += 1, R73 += 1, R74 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 69] { R10350 += 1 };
  s0 -> s0 [0, 65535] { R10349 += 1, R10350 += 1 };
  s0 -> s2 [70, 70] { R10350 += 1 };
  s0 -> s1 [71, 65535] { R10350 += 1 };
  s1 -> s1 [0, 69] { R10350 += 1 };
  s1 -> s2 [70, 70] { R10350 += 1 };
  s1 -> s1 [71, 65535] { R10350 += 1 };
  s2 -> s2 [0, 65535] { R10350 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R10351 += 1, R10352 += 1 };
  s0 -> s1 [0, 65535] { R10352 += 1, R2 += 1 };
  s1 -> s1 [0, 65535] { R10352 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 69] { R10354 += 1 };
  s0 -> s0 [0, 65535] { R10353 += 1, R10354 += 1 };
  s0 -> s2 [0, 65535] { R10354 += 1, R12 += 1 };
  s0 -> s3 [70, 70] { R10354 += 1 };
  s0 -> s1 [71, 65535] { R10354 += 1 };
  s1 -> s1 [0, 69] { R10354 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [70, 70] { R10354 += 1 };
  s1 -> s1 [71, 65535] { R10354 += 1 };
  s2 -> s1 [0, 69] { R10354 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10354 += 1, R12 += 1 };
  s2 -> s3 [70, 70] { R10354 += 1 };
  s2 -> s1 [71, 65535] { R10354 += 1 };
  s3 -> s3 [0, 65535] { R10354 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 69] { R10356 += 1, R10294 += 1 };
  s0 -> s0 [0, 65535] { R10355 += 1, R10356 += 1 };
  s0 -> s2 [0, 65535] { R10356 += 1, R10293 += 1, R10294 += 1 };
  s0 -> s1 [71, 65535] { R10356 += 1, R10294 += 1 };
  s1 -> s1 [0, 69] { R10356 += 1, R10294 += 1 };
  s1 -> s1 [0, 65535] { R10356 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [71, 65535] { R10356 += 1, R10294 += 1 };
  s2 -> s1 [0, 69] { R10356 += 1, R10294 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10356 += 1, R10293 += 1, R10294 += 1 };
  s2 -> s1 [71, 65535] { R10356 += 1, R10294 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s0 [0, 65535] { R10357 += 1, R10358 += 1 };
  s0 -> s1 [0, 65535] { R10358 += 1, R10296 += 1, R20 += 1 };
  s0 -> s2 [0, 65535] { R10358 += 1, R10295 += 1, R10296 += 1 };
  s1 -> s4 [0, 65535] { R10358 += 1 };
  s1 -> s1 [0, 65535] { R10358 += 1, R10296 += 1, R20 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10358 += 1, R10296 += 1, R20 += 1 };
  s2 -> s2 [0, 65535] { R10358 += 1, R10295 += 1, R10296 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10358 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 70] { R10360 += 1, R10298 += 1 };
  s0 -> s2 [0, 65535] { R10360 += 1, R10297 += 1, R10298 += 1 };
  s0 -> s0 [0, 65535] { R10359 += 1, R10360 += 1 };
  s0 -> s1 [75, 65535] { R10360 += 1, R10298 += 1 };
  s1 -> s1 [0, 70] { R10360 += 1, R10298 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R10360 += 1 };
  s1 -> s1 [75, 65535] { R10360 += 1, R10298 += 1 };
  s2 -> s1 [0, 70] { R10360 += 1, R10298 += 1 };
  s2 -> s2 [0, 65535] { R10360 += 1, R10297 += 1, R10298 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [75, 65535] { R10360 += 1, R10298 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s0 [0, 65535] { R10361 += 1, R10362 += 1 };
  s0 -> s1 [0, 65535] { R10362 += 1, R10300 += 1, R84 += 1 };
  s0 -> s2 [0, 65535] { R10362 += 1, R10299 += 1, R10300 += 1 };
  s1 -> s4 [0, 65535] { R10362 += 1 };
  s1 -> s1 [0, 65535] { R10362 += 1, R10300 += 1, R84 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10362 += 1, R10300 += 1, R84 += 1 };
  s2 -> s2 [0, 65535] { R10362 += 1, R10299 += 1, R10300 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10362 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 74] { R10364 += 1, R10302 += 1 };
  s0 -> s0 [0, 65535] { R10363 += 1, R10364 += 1 };
  s0 -> s2 [0, 65535] { R10364 += 1, R10302 += 1, R86 += 1 };
  s0 -> s3 [0, 65535] { R10364 += 1, R10301 += 1, R10302 += 1 };
  s0 -> s1 [76, 65535] { R10364 += 1, R10302 += 1 };
  s1 -> s1 [0, 74] { R10364 += 1, R10302 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R10364 += 1 };
  s1 -> s1 [76, 65535] { R10364 += 1, R10302 += 1 };
  s2 -> s1 [0, 74] { R10364 += 1, R10302 += 1 };
  s2 -> s2 [0, 65535] { R10364 += 1, R10302 += 1, R86 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R10364 += 1 };
  s2 -> s1 [76, 65535] { R10364 += 1, R10302 += 1 };
  s3 -> s1 [0, 74] { R10364 += 1, R10302 += 1 };
  s3 -> s2 [0, 65535] { R10364 += 1, R10302 += 1, R86 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10364 += 1, R10301 += 1, R10302 += 1 };
  s3 -> s1 [76, 65535] { R10364 += 1, R10302 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10364 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 65535] { R10366 += 1, R10303 += 1, R10304 += 1 };
  s0 -> s0 [0, 65535] { R10365 += 1, R10366 += 1 };
  s0 -> s2 [0, 65535] { R10366 += 1, R10304 += 1 };
  s0 -> s3 [0, 65535] { R10366 += 1, R10304 += 1, R90 += 1 };
  s1 -> s1 [0, 65535] { R10366 += 1, R10303 += 1, R10304 += 1 };
  s1 -> s2 [0, 65535] { R10366 += 1, R10304 += 1 };
  s1 -> s3 [0, 65535] { R10366 += 1, R10304 += 1, R90 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s4 [0, 65535] { R10366 += 1 };
  s2 -> s2 [0, 65535] { R10366 += 1, R10304 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s4 [0, 65535] { R10366 += 1 };
  s3 -> s2 [0, 65535] { R10366 += 1, R10304 += 1 };
  s3 -> s3 [0, 65535] { R10366 += 1, R10304 += 1, R90 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10366 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R10368 += 1, R10306 += 1, R94 += 1, R95 += 1 };
  s0 -> s2 [0, 65535] { R10368 += 1, R10305 += 1, R10306 += 1 };
  s0 -> s0 [0, 65535] { R10367 += 1, R10368 += 1 };
  s0 -> s3 [0, 65535] { R10368 += 1, R10306 += 1, R95 += 1, R96 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R10368 += 1, R10306 += 1, R94 += 1, R95 += 1 };
  s1 -> s5 [0, 65535] { R10368 += 1 };
  s1 -> s3 [0, 65535] { R10368 += 1, R10306 += 1, R95 += 1, R96 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R10368 += 1, R10306 += 1, R94 += 1, R95 += 1 };
  s2 -> s2 [0, 65535] { R10368 += 1, R10305 += 1, R10306 += 1 };
  s2 -> s3 [0, 65535] { R10368 += 1, R10306 += 1, R95 += 1, R96 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R10368 += 1 };
  s3 -> s3 [0, 65535] { R10368 += 1, R10306 += 1, R95 += 1, R96 += 1 };
  s3 -> s6 [0, 65535] { R10368 += 1, R10306 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10368 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R10368 += 1 };
  s6 -> s6 [0, 65535] { R10368 += 1, R10306 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s0 [0, 65535] { R10369 += 1, R10370 += 1 };
  s0 -> s1 [0, 65535] { R10370 += 1, R10308 += 1 };
  s0 -> s2 [0, 65535] { R10370 += 1, R10307 += 1, R10308 += 1 };
  s1 -> s1 [0, 65535] { R10370 += 1, R10308 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R10370 += 1 };
  s2 -> s1 [0, 65535] { R10370 += 1, R10308 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10370 += 1, R10307 += 1, R10308 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10370 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R10372 += 1, R10310 += 1 };
  s0 -> s2 [0, 65535] { R10372 += 1, R10310 += 1, R10170 += 1, R10172 += 1 };
  s0 -> s0 [0, 65535] { R10371 += 1, R10372 += 1 };
  s0 -> s3 [0, 65535] { R10372 += 1, R10309 += 1, R10310 += 1 };
  s0 -> s4 [0, 65535] { R10372 += 1, R10310 += 1, R10170 += 1 };
  s1 -> s1 [0, 65535] { R10372 += 1, R10310 += 1 };
  s1 -> s5 [0, 65535] { R10372 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s1 [0, 65535] { R10372 += 1, R10310 += 1 };
  s2 -> s2 [0, 65535] { R10372 += 1, R10310 += 1, R10170 += 1, R10172 += 1 };
  s2 -> s5 [0, 65535] { R10372 += 1 };
  s2 -> s4 [0, 65535] { R10372 += 1, R10310 += 1, R10170 += 1 };
  s2 -> s6 [0, 65535];
  s3 -> s1 [0, 65535] { R10372 += 1, R10310 += 1 };
  s3 -> s2 [0, 65535] { R10372 += 1, R10310 += 1, R10170 += 1, R10172 += 1 };
  s3 -> s3 [0, 65535] { R10372 += 1, R10309 += 1, R10310 += 1 };
  s3 -> s4 [0, 65535] { R10372 += 1, R10310 += 1, R10170 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s1 [0, 65535] { R10372 += 1, R10310 += 1 };
  s4 -> s5 [0, 65535] { R10372 += 1 };
  s4 -> s4 [0, 65535] { R10372 += 1, R10310 += 1, R10170 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R10372 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 65535] { R10374 += 1, R10312 += 1 };
  s0 -> s0 [0, 65535] { R10373 += 1, R10374 += 1 };
  s0 -> s2 [0, 65535] { R10374 += 1, R10311 += 1, R10312 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R10374 += 1, R10312 += 1 };
  s1 -> s4 [0, 65535] { R10374 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10374 += 1, R10312 += 1 };
  s2 -> s2 [0, 65535] { R10374 += 1, R10311 += 1, R10312 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10374 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s0 [0, 65535] { R10375 += 1, R10376 += 1 };
  s0 -> s1 [0, 65535] { R10376 += 1, R10332 += 1, R21 += 1 };
  s0 -> s2 [0, 65535] { R10376 += 1, R10331 += 1, R10332 += 1 };
  s1 -> s1 [0, 65535] { R10376 += 1, R10332 += 1, R21 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R10376 += 1 };
  s2 -> s1 [0, 65535] { R10376 += 1, R10332 += 1, R21 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10376 += 1, R10331 += 1, R10332 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10376 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 69] { R10378 += 1, R10334 += 1 };
  s0 -> s0 [0, 65535] { R10377 += 1, R10378 += 1 };
  s0 -> s2 [0, 65535] { R10378 += 1, R10333 += 1, R10334 += 1 };
  s0 -> s3 [70, 70] { R10378 += 1, R10334 += 1 };
  s0 -> s4 [70, 70] { R10378 += 1, R10334 += 1 };
  s0 -> s5 [75, 75] { R10378 += 1, R10334 += 1 };
  s0 -> s1 [76, 65535] { R10378 += 1, R10334 += 1 };
  s1 -> s1 [0, 69] { R10378 += 1, R10334 += 1 };
  s1 -> s3 [70, 70] { R10378 += 1, R10334 += 1 };
  s1 -> s4 [70, 70] { R10378 += 1, R10334 += 1 };
  s1 -> s5 [75, 75] { R10378 += 1, R10334 += 1 };
  s1 -> s1 [76, 65535] { R10378 += 1, R10334 += 1 };
  s2 -> s1 [0, 69] { R10378 += 1, R10334 += 1 };
  s2 -> s2 [0, 65535] { R10378 += 1, R10333 += 1, R10334 += 1 };
  s2 -> s3 [70, 70] { R10378 += 1, R10334 += 1 };
  s2 -> s4 [70, 70] { R10378 += 1, R10334 += 1 };
  s2 -> s5 [75, 75] { R10378 += 1, R10334 += 1 };
  s2 -> s1 [76, 65535] { R10378 += 1, R10334 += 1 };
  s3 -> s3 [0, 70] { R10378 += 1, R10334 += 1 };
  s3 -> s7 [75, 75] { R10378 += 1, R10334 += 1 };
  s3 -> s3 [76, 65535] { R10378 += 1, R10334 += 1 };
  s5 -> s5 [0, 69] { R10378 += 1, R10334 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R10378 += 1 };
  s5 -> s7 [70, 70] { R10378 += 1, R10334 += 1 };
  s5 -> s8 [70, 70] { R10378 += 1, R10334 += 1 };
  s5 -> s5 [75, 65535] { R10378 += 1, R10334 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 70] { R10378 += 1, R10334 += 1 };
  s7 -> s7 [0, 65535] { R10378 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [75, 65535] { R10378 += 1, R10334 += 1 };
  s8 -> s8 [0, 65535] { R10378 += 1 };
  s8 -> s6 [0, 65535];
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 69] { R10380 += 1, R10336 += 1, R83 += 1 };
  s0 -> s2 [0, 65535] { R10380 += 1, R10335 += 1, R10336 += 1 };
  s0 -> s0 [0, 65535] { R10379 += 1, R10380 += 1 };
  s0 -> s3 [70, 70] { R10380 += 1, R10336 += 1, R83 += 1 };
  s0 -> s4 [70, 70] { R10380 += 1, R10336 += 1, R83 += 1 };
  s0 -> s1 [71, 65535] { R10380 += 1, R10336 += 1, R83 += 1 };
  s1 -> s1 [0, 69] { R10380 += 1, R10336 += 1, R83 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10380 += 1 };
  s1 -> s3 [70, 70] { R10380 += 1, R10336 += 1, R83 += 1 };
  s1 -> s4 [70, 70] { R10380 += 1, R10336 += 1, R83 += 1 };
  s1 -> s1 [71, 65535] { R10380 += 1, R10336 += 1, R83 += 1 };
  s2 -> s1 [0, 69] { R10380 += 1, R10336 += 1, R83 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10380 += 1, R10335 += 1, R10336 += 1 };
  s2 -> s3 [70, 70] { R10380 += 1, R10336 += 1, R83 += 1 };
  s2 -> s4 [70, 70] { R10380 += 1, R10336 += 1, R83 += 1 };
  s2 -> s1 [71, 65535] { R10380 += 1, R10336 += 1, R83 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10380 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R10380 += 1 };
  s4 -> s4 [0, 65535] { R10380 += 1, R10336 += 1, R83 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10380 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 69] { R10382 += 1, R10338 += 1, R85 += 1 };
  s0 -> s2 [0, 65535] { R10382 += 1, R10337 += 1, R10338 += 1 };
  s0 -> s0 [0, 65535] { R10381 += 1, R10382 += 1 };
  s0 -> s3 [70, 70] { R10382 += 1, R10338 += 1, R85 += 1 };
  s0 -> s4 [70, 70] { R10382 += 1, R10338 += 1, R85 += 1 };
  s0 -> s1 [71, 65535] { R10382 += 1, R10338 += 1, R85 += 1 };
  s1 -> s1 [0, 69] { R10382 += 1, R10338 += 1, R85 += 1 };
  s1 -> s1 [0, 65535] { R10382 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [70, 70] { R10382 += 1, R10338 += 1, R85 += 1 };
  s1 -> s4 [70, 70] { R10382 += 1, R10338 += 1, R85 += 1 };
  s1 -> s1 [71, 65535] { R10382 += 1, R10338 += 1, R85 += 1 };
  s2 -> s1 [0, 69] { R10382 += 1, R10338 += 1, R85 += 1 };
  s2 -> s2 [0, 65535] { R10382 += 1, R10337 += 1, R10338 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [70, 70] { R10382 += 1, R10338 += 1, R85 += 1 };
  s2 -> s4 [70, 70] { R10382 += 1, R10338 += 1, R85 += 1 };
  s2 -> s1 [71, 65535] { R10382 += 1, R10338 += 1, R85 += 1 };
  s3 -> s3 [0, 65535] { R10382 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R10382 += 1 };
  s4 -> s4 [0, 65535] { R10382 += 1, R10338 += 1, R85 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10382 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 69] { R10384 += 1, R10340 += 1, R87 += 1, R88 += 1 };
  s0 -> s2 [0, 69] { R10384 += 1, R10340 += 1, R88 += 1 };
  s0 -> s0 [0, 65535] { R10383 += 1, R10384 += 1 };
  s0 -> s3 [0, 65535] { R10384 += 1, R10339 += 1, R10340 += 1 };
  s0 -> s4 [70, 70] { R10384 += 1, R10340 += 1, R88 += 1 };
  s0 -> s5 [70, 70] { R10384 += 1, R10340 += 1, R87 += 1, R88 += 1 };
  s0 -> s6 [70, 70] { R10384 += 1, R10340 += 1, R87 += 1, R88 += 1 };
  s0 -> s7 [70, 70] { R10384 += 1, R10340 += 1, R88 += 1 };
  s0 -> s2 [71, 74] { R10384 += 1, R10340 += 1, R88 += 1 };
  s0 -> s1 [71, 65535] { R10384 += 1, R10340 += 1, R87 += 1, R88 += 1 };
  s0 -> s8 [75, 75] { R10384 += 1, R10340 += 1, R88 += 1 };
  s0 -> s2 [76, 65535] { R10384 += 1, R10340 += 1, R88 += 1 };
  s1 -> s1 [0, 69] { R10384 += 1, R10340 += 1, R87 += 1, R88 += 1 };
  s1 -> s2 [0, 69] { R10384 += 1, R10340 += 1, R88 += 1 };
  s1 -> s4 [70, 70] { R10384 += 1, R10340 += 1, R88 += 1 };
  s1 -> s5 [70, 70] { R10384 += 1, R10340 += 1, R87 += 1, R88 += 1 };
  s1 -> s6 [70, 70] { R10384 += 1, R10340 += 1, R87 += 1, R88 += 1 };
  s1 -> s7 [70, 70] { R10384 += 1, R10340 += 1, R88 += 1 };
  s1 -> s2 [71, 74] { R10384 += 1, R10340 += 1, R88 += 1 };
  s1 -> s1 [71, 65535] { R10384 += 1, R10340 += 1, R87 += 1, R88 += 1 };
  s1 -> s8 [75, 75] { R10384 += 1, R10340 += 1, R88 += 1 };
  s1 -> s2 [76, 65535] { R10384 += 1, R10340 += 1, R88 += 1 };
  s2 -> s2 [0, 69] { R10384 += 1, R10340 += 1, R88 += 1 };
  s2 -> s4 [70, 70] { R10384 += 1, R10340 += 1, R88 += 1 };
  s2 -> s7 [70, 70] { R10384 += 1, R10340 += 1, R88 += 1 };
  s2 -> s2 [71, 74] { R10384 += 1, R10340 += 1, R88 += 1 };
  s2 -> s8 [75, 75] { R10384 += 1, R10340 += 1, R88 += 1 };
  s2 -> s2 [76, 65535] { R10384 += 1, R10340 += 1, R88 += 1 };
  s3 -> s1 [0, 69] { R10384 += 1, R10340 += 1, R87 += 1, R88 += 1 };
  s3 -> s2 [0, 69] { R10384 += 1, R10340 += 1, R88 += 1 };
  s3 -> s3 [0, 65535] { R10384 += 1, R10339 += 1, R10340 += 1 };
  s3 -> s4 [70, 70] { R10384 += 1, R10340 += 1, R88 += 1 };
  s3 -> s5 [70, 70] { R10384 += 1, R10340 += 1, R87 += 1, R88 += 1 };
  s3 -> s6 [70, 70] { R10384 += 1, R10340 += 1, R87 += 1, R88 += 1 };
  s3 -> s7 [70, 70] { R10384 += 1, R10340 += 1, R88 += 1 };
  s3 -> s2 [71, 74] { R10384 += 1, R10340 += 1, R88 += 1 };
  s3 -> s1 [71, 65535] { R10384 += 1, R10340 += 1, R87 += 1, R88 += 1 };
  s3 -> s8 [75, 75] { R10384 += 1, R10340 += 1, R88 += 1 };
  s3 -> s2 [76, 65535] { R10384 += 1, R10340 += 1, R88 += 1 };
  s6 -> s7 [0, 74] { R10384 += 1, R10340 += 1, R88 += 1 };
  s6 -> s6 [0, 65535] { R10384 += 1, R10340 += 1, R87 += 1, R88 += 1 };
  s6 -> s11 [75, 75] { R10384 += 1, R10340 += 1, R88 += 1 };
  s6 -> s7 [76, 65535] { R10384 += 1, R10340 += 1, R88 += 1 };
  s7 -> s7 [0, 74] { R10384 += 1, R10340 += 1, R88 += 1 };
  s7 -> s11 [75, 75] { R10384 += 1, R10340 += 1, R88 += 1 };
  s7 -> s7 [76, 65535] { R10384 += 1, R10340 += 1, R88 += 1 };
  s8 -> s8 [0, 69] { R10384 += 1, R10340 += 1, R88 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R10384 += 1 };
  s8 -> s10 [70, 70] { R10384 += 1, R10340 += 1, R88 += 1 };
  s8 -> s11 [70, 70] { R10384 += 1, R10340 += 1, R88 += 1 };
  s8 -> s8 [71, 65535] { R10384 += 1, R10340 += 1, R88 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R10384 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R10384 += 1, R10340 += 1, R88 += 1 };
  s11 -> s12 [0, 65535] { R10384 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R10384 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 69] { R10386 += 1, R10342 += 1, R91 += 1, R92 += 1 };
  s0 -> s2 [0, 65535] { R10386 += 1, R10341 += 1, R10342 += 1 };
  s0 -> s0 [0, 65535] { R10385 += 1, R10386 += 1 };
  s0 -> s3 [70, 70] { R10386 += 1, R10342 += 1, R91 += 1, R92 += 1 };
  s0 -> s4 [70, 70] { R10386 += 1, R10342 += 1, R91 += 1, R92 += 1 };
  s0 -> s1 [71, 65535] { R10386 += 1, R10342 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 69] { R10386 += 1, R10342 += 1, R91 += 1, R92 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10386 += 1 };
  s1 -> s3 [70, 70] { R10386 += 1, R10342 += 1, R91 += 1, R92 += 1 };
  s1 -> s4 [70, 70] { R10386 += 1, R10342 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [71, 65535] { R10386 += 1, R10342 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [0, 69] { R10386 += 1, R10342 += 1, R91 += 1, R92 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10386 += 1, R10341 += 1, R10342 += 1 };
  s2 -> s3 [70, 70] { R10386 += 1, R10342 += 1, R91 += 1, R92 += 1 };
  s2 -> s4 [70, 70] { R10386 += 1, R10342 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [71, 65535] { R10386 += 1, R10342 += 1, R91 += 1, R92 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10386 += 1, R10342 += 1, R91 += 1, R92 += 1 };
  s3 -> s6 [0, 65535] { R10386 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10386 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10386 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 69] { R10388 += 1, R10344 += 1, R10159 += 1, R10160 += 1 };
  s0 -> s2 [0, 69] { R10388 += 1, R10344 += 1, R10160 += 1, R10161 += 1 };
  s0 -> s3 [0, 65535] { R10388 += 1, R10343 += 1, R10344 += 1 };
  s0 -> s0 [0, 65535] { R10387 += 1, R10388 += 1 };
  s0 -> s4 [70, 70] { R10388 += 1, R10344 += 1, R10160 += 1, R10161 += 1 };
  s0 -> s5 [70, 70] { R10388 += 1, R10344 += 1, R10159 += 1, R10160 += 1 };
  s0 -> s6 [70, 70] { R10388 += 1, R10344 += 1, R10159 += 1, R10160 += 1 };
  s0 -> s7 [70, 70] { R10388 += 1, R10344 += 1, R10160 += 1, R10161 += 1 };
  s0 -> s1 [71, 65535] { R10388 += 1, R10344 += 1, R10159 += 1, R10160 += 1 };
  s0 -> s2 [71, 65535] { R10388 += 1, R10344 += 1, R10160 += 1, R10161 += 1 };
  s1 -> s1 [0, 69] { R10388 += 1, R10344 += 1, R10159 += 1, R10160 += 1 };
  s1 -> s2 [0, 69] { R10388 += 1, R10344 += 1, R10160 += 1, R10161 += 1 };
  s1 -> s4 [70, 70] { R10388 += 1, R10344 += 1, R10160 += 1, R10161 += 1 };
  s1 -> s5 [70, 70] { R10388 += 1, R10344 += 1, R10159 += 1, R10160 += 1 };
  s1 -> s6 [70, 70] { R10388 += 1, R10344 += 1, R10159 += 1, R10160 += 1 };
  s1 -> s7 [70, 70] { R10388 += 1, R10344 += 1, R10160 += 1, R10161 += 1 };
  s1 -> s1 [71, 65535] { R10388 += 1, R10344 += 1, R10159 += 1, R10160 += 1 };
  s1 -> s2 [71, 65535] { R10388 += 1, R10344 += 1, R10160 += 1, R10161 += 1 };
  s2 -> s2 [0, 69] { R10388 += 1, R10344 += 1, R10160 += 1, R10161 += 1 };
  s2 -> s11 [0, 69] { R10388 += 1, R10344 += 1 };
  s2 -> s4 [70, 70] { R10388 += 1, R10344 += 1, R10160 += 1, R10161 += 1 };
  s2 -> s8 [70, 70] { R10388 += 1, R10344 += 1 };
  s2 -> s12 [70, 70] { R10388 += 1, R10344 += 1 };
  s2 -> s7 [70, 70] { R10388 += 1, R10344 += 1, R10160 += 1, R10161 += 1 };
  s2 -> s2 [71, 65535] { R10388 += 1, R10344 += 1, R10160 += 1, R10161 += 1 };
  s2 -> s11 [71, 65535] { R10388 += 1, R10344 += 1 };
  s3 -> s1 [0, 69] { R10388 += 1, R10344 += 1, R10159 += 1, R10160 += 1 };
  s3 -> s2 [0, 69] { R10388 += 1, R10344 += 1, R10160 += 1, R10161 += 1 };
  s3 -> s3 [0, 65535] { R10388 += 1, R10343 += 1, R10344 += 1 };
  s3 -> s4 [70, 70] { R10388 += 1, R10344 += 1, R10160 += 1, R10161 += 1 };
  s3 -> s5 [70, 70] { R10388 += 1, R10344 += 1, R10159 += 1, R10160 += 1 };
  s3 -> s6 [70, 70] { R10388 += 1, R10344 += 1, R10159 += 1, R10160 += 1 };
  s3 -> s7 [70, 70] { R10388 += 1, R10344 += 1, R10160 += 1, R10161 += 1 };
  s3 -> s1 [71, 65535] { R10388 += 1, R10344 += 1, R10159 += 1, R10160 += 1 };
  s3 -> s2 [71, 65535] { R10388 += 1, R10344 += 1, R10160 += 1, R10161 += 1 };
  s4 -> s4 [0, 65535] { R10388 += 1, R10344 += 1, R10160 += 1, R10161 += 1 };
  s4 -> s8 [0, 65535] { R10388 += 1, R10344 += 1 };
  s5 -> s4 [0, 65535] { R10388 += 1, R10344 += 1, R10160 += 1, R10161 += 1 };
  s5 -> s5 [0, 65535] { R10388 += 1, R10344 += 1, R10159 += 1, R10160 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R10388 += 1, R10344 += 1 };
  s8 -> s10 [0, 65535] { R10388 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R10388 += 1 };
  s11 -> s11 [0, 69] { R10388 += 1, R10344 += 1 };
  s11 -> s11 [0, 65535] { R10388 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s8 [70, 70] { R10388 += 1, R10344 += 1 };
  s11 -> s12 [70, 70] { R10388 += 1, R10344 += 1 };
  s11 -> s11 [71, 65535] { R10388 += 1, R10344 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R10388 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 69] { R10390 += 1, R10346 += 1, R10165 += 1, R10166 += 1 };
  s0 -> s2 [0, 69] { R10390 += 1, R10346 += 1, R10166 += 1, R10167 += 1, R10168 += 1 };
  s0 -> s3 [0, 69] { R10390 += 1, R10346 += 1, R10166 += 1, R10168 += 1 };
  s0 -> s0 [0, 65535] { R10389 += 1, R10390 += 1 };
  s0 -> s4 [0, 65535] { R10390 += 1, R10345 += 1, R10346 += 1 };
  s0 -> s5 [70, 70] { R10390 += 1, R10346 += 1, R10166 += 1, R10167 += 1, R10168 += 1 };
  s0 -> s6 [70, 70] { R10390 += 1, R10346 += 1, R10166 += 1, R10168 += 1 };
  s0 -> s7 [70, 70] { R10390 += 1, R10346 += 1, R10165 += 1, R10166 += 1 };
  s0 -> s8 [70, 70] { R10390 += 1, R10346 += 1, R10166 += 1, R10168 += 1 };
  s0 -> s9 [70, 70] { R10390 += 1, R10346 += 1, R10165 += 1, R10166 += 1 };
  s0 -> s10 [70, 70] { R10390 += 1, R10346 += 1, R10166 += 1, R10167 += 1, R10168 += 1 };
  s0 -> s3 [71, 74] { R10390 += 1, R10346 += 1, R10166 += 1, R10168 += 1 };
  s0 -> s1 [71, 65535] { R10390 += 1, R10346 += 1, R10165 += 1, R10166 += 1 };
  s0 -> s2 [71, 65535] { R10390 += 1, R10346 += 1, R10166 += 1, R10167 += 1, R10168 += 1 };
  s0 -> s11 [75, 75] { R10390 += 1, R10346 += 1, R10166 += 1, R10168 += 1 };
  s0 -> s3 [76, 65535] { R10390 += 1, R10346 += 1, R10166 += 1, R10168 += 1 };
  s1 -> s1 [0, 69] { R10390 += 1, R10346 += 1, R10165 += 1, R10166 += 1 };
  s1 -> s2 [0, 69] { R10390 += 1, R10346 += 1, R10166 += 1, R10167 += 1, R10168 += 1 };
  s1 -> s3 [0, 69] { R10390 += 1, R10346 += 1, R10166 += 1, R10168 += 1 };
  s1 -> s5 [70, 70] { R10390 += 1, R10346 += 1, R10166 += 1, R10167 += 1, R10168 += 1 };
  s1 -> s6 [70, 70] { R10390 += 1, R10346 += 1, R10166 += 1, R10168 += 1 };
  s1 -> s7 [70, 70] { R10390 += 1, R10346 += 1, R10165 += 1, R10166 += 1 };
  s1 -> s8 [70, 70] { R10390 += 1, R10346 += 1, R10166 += 1, R10168 += 1 };
  s1 -> s9 [70, 70] { R10390 += 1, R10346 += 1, R10165 += 1, R10166 += 1 };
  s1 -> s10 [70, 70] { R10390 += 1, R10346 += 1, R10166 += 1, R10167 += 1, R10168 += 1 };
  s1 -> s3 [71, 74] { R10390 += 1, R10346 += 1, R10166 += 1, R10168 += 1 };
  s1 -> s1 [71, 65535] { R10390 += 1, R10346 += 1, R10165 += 1, R10166 += 1 };
  s1 -> s2 [71, 65535] { R10390 += 1, R10346 += 1, R10166 += 1, R10167 += 1, R10168 += 1 };
  s1 -> s11 [75, 75] { R10390 += 1, R10346 += 1, R10166 += 1, R10168 += 1 };
  s1 -> s3 [76, 65535] { R10390 += 1, R10346 += 1, R10166 += 1, R10168 += 1 };
  s2 -> s2 [0, 69] { R10390 += 1, R10346 += 1, R10166 += 1, R10167 += 1, R10168 += 1 };
  s2 -> s3 [0, 69] { R10390 += 1, R10346 += 1, R10166 += 1, R10168 += 1 };
  s2 -> s5 [70, 70] { R10390 += 1, R10346 += 1, R10166 += 1, R10167 += 1, R10168 += 1 };
  s2 -> s6 [70, 70] { R10390 += 1, R10346 += 1, R10166 += 1, R10168 += 1 };
  s2 -> s8 [70, 70] { R10390 += 1, R10346 += 1, R10166 += 1, R10168 += 1 };
  s2 -> s10 [70, 70] { R10390 += 1, R10346 += 1, R10166 += 1, R10167 += 1, R10168 += 1 };
  s2 -> s3 [71, 74] { R10390 += 1, R10346 += 1, R10166 += 1, R10168 += 1 };
  s2 -> s2 [71, 65535] { R10390 += 1, R10346 += 1, R10166 += 1, R10167 += 1, R10168 += 1 };
  s2 -> s11 [75, 75] { R10390 += 1, R10346 += 1, R10166 += 1, R10168 += 1 };
  s2 -> s3 [76, 65535] { R10390 += 1, R10346 += 1, R10166 += 1, R10168 += 1 };
  s3 -> s3 [0, 69] { R10390 += 1, R10346 += 1, R10166 += 1, R10168 += 1 };
  s3 -> s6 [70, 70] { R10390 += 1, R10346 += 1, R10166 += 1, R10168 += 1 };
  s3 -> s8 [70, 70] { R10390 += 1, R10346 += 1, R10166 += 1, R10168 += 1 };
  s3 -> s3 [71, 74] { R10390 += 1, R10346 += 1, R10166 += 1, R10168 += 1 };
  s3 -> s11 [75, 75] { R10390 += 1, R10346 += 1, R10166 += 1, R10168 += 1 };
  s3 -> s3 [76, 65535] { R10390 += 1, R10346 += 1, R10166 += 1, R10168 += 1 };
  s4 -> s1 [0, 69] { R10390 += 1, R10346 += 1, R10165 += 1, R10166 += 1 };
  s4 -> s2 [0, 69] { R10390 += 1, R10346 += 1, R10166 += 1, R10167 += 1, R10168 += 1 };
  s4 -> s3 [0, 69] { R10390 += 1, R10346 += 1, R10166 += 1, R10168 += 1 };
  s4 -> s4 [0, 65535] { R10390 += 1, R10345 += 1, R10346 += 1 };
  s4 -> s5 [70, 70] { R10390 += 1, R10346 += 1, R10166 += 1, R10167 += 1, R10168 += 1 };
  s4 -> s6 [70, 70] { R10390 += 1, R10346 += 1, R10166 += 1, R10168 += 1 };
  s4 -> s7 [70, 70] { R10390 += 1, R10346 += 1, R10165 += 1, R10166 += 1 };
  s4 -> s8 [70, 70] { R10390 += 1, R10346 += 1, R10166 += 1, R10168 += 1 };
  s4 -> s9 [70, 70] { R10390 += 1, R10346 += 1, R10165 += 1, R10166 += 1 };
  s4 -> s10 [70, 70] { R10390 += 1, R10346 += 1, R10166 += 1, R10167 += 1, R10168 += 1 };
  s4 -> s3 [71, 74] { R10390 += 1, R10346 += 1, R10166 += 1, R10168 += 1 };
  s4 -> s1 [71, 65535] { R10390 += 1, R10346 += 1, R10165 += 1, R10166 += 1 };
  s4 -> s2 [71, 65535] { R10390 += 1, R10346 += 1, R10166 += 1, R10167 += 1, R10168 += 1 };
  s4 -> s11 [75, 75] { R10390 += 1, R10346 += 1, R10166 += 1, R10168 += 1 };
  s4 -> s3 [76, 65535] { R10390 += 1, R10346 += 1, R10166 += 1, R10168 += 1 };
  s5 -> s6 [0, 74] { R10390 += 1, R10346 += 1, R10166 += 1, R10168 += 1 };
  s5 -> s5 [0, 65535] { R10390 += 1, R10346 += 1, R10166 += 1, R10167 += 1, R10168 += 1 };
  s5 -> s13 [75, 75] { R10390 += 1, R10346 += 1, R10166 += 1, R10168 += 1 };
  s5 -> s6 [76, 65535] { R10390 += 1, R10346 += 1, R10166 += 1, R10168 += 1 };
  s6 -> s6 [0, 74] { R10390 += 1, R10346 += 1, R10166 += 1, R10168 += 1 };
  s6 -> s13 [75, 75] { R10390 += 1, R10346 += 1, R10166 += 1, R10168 += 1 };
  s6 -> s6 [76, 65535] { R10390 += 1, R10346 += 1, R10166 += 1, R10168 += 1 };
  s7 -> s6 [0, 74] { R10390 += 1, R10346 += 1, R10166 += 1, R10168 += 1 };
  s7 -> s5 [0, 65535] { R10390 += 1, R10346 += 1, R10166 += 1, R10167 += 1, R10168 += 1 };
  s7 -> s7 [0, 65535] { R10390 += 1, R10346 += 1, R10165 += 1, R10166 += 1 };
  s7 -> s13 [75, 75] { R10390 += 1, R10346 += 1, R10166 += 1, R10168 += 1 };
  s7 -> s6 [76, 65535] { R10390 += 1, R10346 += 1, R10166 += 1, R10168 += 1 };
  s11 -> s11 [0, 69] { R10390 += 1, R10346 += 1, R10166 += 1, R10168 += 1 };
  s11 -> s11 [0, 65535] { R10390 += 1 };
  s11 -> s12 [0, 65535];
  s11 -> s13 [70, 70] { R10390 += 1, R10346 += 1, R10166 += 1, R10168 += 1 };
  s11 -> s14 [70, 70] { R10390 += 1, R10346 += 1, R10166 += 1, R10168 += 1 };
  s11 -> s11 [71, 65535] { R10390 += 1, R10346 += 1, R10166 += 1, R10168 += 1 };
  s12 -> s12 [0, 65535];
  s13 -> s15 [0, 65535] { R10390 += 1 };
  s13 -> s13 [0, 65535] { R10390 += 1, R10346 += 1, R10166 += 1, R10168 += 1 };
  s13 -> s12 [0, 65535];
  s14 -> s12 [0, 65535];
  s14 -> s14 [0, 65535] { R10390 += 1 };
  s15 -> s15 [0, 65535] { R10390 += 1 };
  s15 -> s12 [0, 65535];
  accepting s12, s13, s14, s15, s11;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 69] { R10392 += 1, R10348 += 1, R10284 += 1, R10285 += 1, R10286 += 1 };
  s0 -> s2 [0, 69] { R10392 += 1, R10348 += 1, R10283 += 1, R10284 += 1 };
  s0 -> s3 [0, 69] { R10392 += 1, R10348 += 1, R10284 += 1, R10286 += 1, R10287 += 1 };
  s0 -> s0 [0, 65535] { R10391 += 1, R10392 += 1 };
  s0 -> s4 [0, 65535] { R10392 += 1, R10347 += 1, R10348 += 1 };
  s0 -> s5 [70, 70] { R10392 += 1, R10348 += 1, R10283 += 1, R10284 += 1 };
  s0 -> s6 [70, 70] { R10392 += 1, R10348 += 1, R10284 += 1, R10286 += 1, R10287 += 1 };
  s0 -> s7 [70, 70] { R10392 += 1, R10348 += 1, R10283 += 1, R10284 += 1 };
  s0 -> s8 [70, 70] { R10392 += 1, R10348 += 1, R10284 += 1, R10286 += 1, R10287 += 1 };
  s0 -> s9 [70, 70] { R10392 += 1, R10348 += 1, R10284 += 1, R10285 += 1, R10286 += 1 };
  s0 -> s10 [70, 70] { R10392 += 1, R10348 += 1, R10284 += 1, R10285 += 1, R10286 += 1 };
  s0 -> s1 [71, 65535] { R10392 += 1, R10348 += 1, R10284 += 1, R10285 += 1, R10286 += 1 };
  s0 -> s2 [71, 65535] { R10392 += 1, R10348 += 1, R10283 += 1, R10284 += 1 };
  s0 -> s3 [71, 65535] { R10392 += 1, R10348 += 1, R10284 += 1, R10286 += 1, R10287 += 1 };
  s1 -> s1 [0, 69] { R10392 += 1, R10348 += 1, R10284 += 1, R10285 += 1, R10286 += 1 };
  s1 -> s3 [0, 69] { R10392 += 1, R10348 += 1, R10284 += 1, R10286 += 1, R10287 += 1 };
  s1 -> s15 [0, 69] { R10392 += 1, R10348 += 1 };
  s1 -> s6 [70, 70] { R10392 += 1, R10348 += 1, R10284 += 1, R10286 += 1, R10287 += 1 };
  s1 -> s11 [70, 70] { R10392 += 1, R10348 += 1 };
  s1 -> s18 [70, 70] { R10392 += 1, R10348 += 1 };
  s1 -> s8 [70, 70] { R10392 += 1, R10348 += 1, R10284 += 1, R10286 += 1, R10287 += 1 };
  s1 -> s9 [70, 70] { R10392 += 1, R10348 += 1, R10284 += 1, R10285 += 1, R10286 += 1 };
  s1 -> s10 [70, 70] { R10392 += 1, R10348 += 1, R10284 += 1, R10285 += 1, R10286 += 1 };
  s1 -> s1 [71, 65535] { R10392 += 1, R10348 += 1, R10284 += 1, R10285 += 1, R10286 += 1 };
  s1 -> s3 [71, 65535] { R10392 += 1, R10348 += 1, R10284 += 1, R10286 += 1, R10287 += 1 };
  s1 -> s15 [71, 65535] { R10392 += 1, R10348 += 1 };
  s2 -> s1 [0, 69] { R10392 += 1, R10348 += 1, R10284 += 1, R10285 += 1, R10286 += 1 };
  s2 -> s2 [0, 69] { R10392 += 1, R10348 += 1, R10283 += 1, R10284 += 1 };
  s2 -> s3 [0, 69] { R10392 += 1, R10348 += 1, R10284 += 1, R10286 += 1, R10287 += 1 };
  s2 -> s5 [70, 70] { R10392 += 1, R10348 += 1, R10283 += 1, R10284 += 1 };
  s2 -> s6 [70, 70] { R10392 += 1, R10348 += 1, R10284 += 1, R10286 += 1, R10287 += 1 };
  s2 -> s7 [70, 70] { R10392 += 1, R10348 += 1, R10283 += 1, R10284 += 1 };
  s2 -> s8 [70, 70] { R10392 += 1, R10348 += 1, R10284 += 1, R10286 += 1, R10287 += 1 };
  s2 -> s9 [70, 70] { R10392 += 1, R10348 += 1, R10284 += 1, R10285 += 1, R10286 += 1 };
  s2 -> s10 [70, 70] { R10392 += 1, R10348 += 1, R10284 += 1, R10285 += 1, R10286 += 1 };
  s2 -> s1 [71, 65535] { R10392 += 1, R10348 += 1, R10284 += 1, R10285 += 1, R10286 += 1 };
  s2 -> s2 [71, 65535] { R10392 += 1, R10348 += 1, R10283 += 1, R10284 += 1 };
  s2 -> s3 [71, 65535] { R10392 += 1, R10348 += 1, R10284 += 1, R10286 += 1, R10287 += 1 };
  s3 -> s3 [0, 69] { R10392 += 1, R10348 += 1, R10284 += 1, R10286 += 1, R10287 += 1 };
  s3 -> s15 [0, 69] { R10392 += 1, R10348 += 1 };
  s3 -> s16 [0, 69] { R10392 += 1, R10348 += 1, R10284 += 1 };
  s3 -> s6 [70, 70] { R10392 += 1, R10348 += 1, R10284 += 1, R10286 += 1, R10287 += 1 };
  s3 -> s17 [70, 70] { R10392 += 1, R10348 += 1, R10284 += 1 };
  s3 -> s11 [70, 70] { R10392 += 1, R10348 += 1 };
  s3 -> s14 [70, 70] { R10392 += 1, R10348 += 1, R10284 += 1 };
  s3 -> s18 [70, 70] { R10392 += 1, R10348 += 1 };
  s3 -> s8 [70, 70] { R10392 += 1, R10348 += 1, R10284 += 1, R10286 += 1, R10287 += 1 };
  s3 -> s3 [71, 65535] { R10392 += 1, R10348 += 1, R10284 += 1, R10286 += 1, R10287 += 1 };
  s3 -> s15 [71, 65535] { R10392 += 1, R10348 += 1 };
  s3 -> s16 [71, 65535] { R10392 += 1, R10348 += 1, R10284 += 1 };
  s4 -> s1 [0, 69] { R10392 += 1, R10348 += 1, R10284 += 1, R10285 += 1, R10286 += 1 };
  s4 -> s2 [0, 69] { R10392 += 1, R10348 += 1, R10283 += 1, R10284 += 1 };
  s4 -> s3 [0, 69] { R10392 += 1, R10348 += 1, R10284 += 1, R10286 += 1, R10287 += 1 };
  s4 -> s4 [0, 65535] { R10392 += 1, R10347 += 1, R10348 += 1 };
  s4 -> s5 [70, 70] { R10392 += 1, R10348 += 1, R10283 += 1, R10284 += 1 };
  s4 -> s6 [70, 70] { R10392 += 1, R10348 += 1, R10284 += 1, R10286 += 1, R10287 += 1 };
  s4 -> s7 [70, 70] { R10392 += 1, R10348 += 1, R10283 += 1, R10284 += 1 };
  s4 -> s8 [70, 70] { R10392 += 1, R10348 += 1, R10284 += 1, R10286 += 1, R10287 += 1 };
  s4 -> s9 [70, 70] { R10392 += 1, R10348 += 1, R10284 += 1, R10285 += 1, R10286 += 1 };
  s4 -> s10 [70, 70] { R10392 += 1, R10348 += 1, R10284 += 1, R10285 += 1, R10286 += 1 };
  s4 -> s1 [71, 65535] { R10392 += 1, R10348 += 1, R10284 += 1, R10285 += 1, R10286 += 1 };
  s4 -> s2 [71, 65535] { R10392 += 1, R10348 += 1, R10283 += 1, R10284 += 1 };
  s4 -> s3 [71, 65535] { R10392 += 1, R10348 += 1, R10284 += 1, R10286 += 1, R10287 += 1 };
  s6 -> s6 [0, 65535] { R10392 += 1, R10348 += 1, R10284 += 1, R10286 += 1, R10287 += 1 };
  s6 -> s11 [0, 65535] { R10392 += 1, R10348 += 1 };
  s6 -> s14 [0, 65535] { R10392 += 1, R10348 += 1, R10284 += 1 };
  s7 -> s6 [0, 65535] { R10392 += 1, R10348 += 1, R10284 += 1, R10286 += 1, R10287 += 1 };
  s7 -> s7 [0, 65535] { R10392 += 1, R10348 += 1, R10283 += 1, R10284 += 1 };
  s7 -> s10 [0, 65535] { R10392 += 1, R10348 += 1, R10284 += 1, R10285 += 1, R10286 += 1 };
  s10 -> s6 [0, 65535] { R10392 += 1, R10348 += 1, R10284 += 1, R10286 += 1, R10287 += 1 };
  s10 -> s11 [0, 65535] { R10392 += 1, R10348 += 1 };
  s10 -> s10 [0, 65535] { R10392 += 1, R10348 += 1, R10284 += 1, R10285 += 1, R10286 += 1 };
  s11 -> s12 [0, 65535] { R10392 += 1 };
  s11 -> s11 [0, 65535] { R10392 += 1, R10348 += 1 };
  s11 -> s13 [0, 65535];
  s12 -> s12 [0, 65535] { R10392 += 1 };
  s12 -> s13 [0, 65535];
  s13 -> s13 [0, 65535];
  s14 -> s11 [0, 65535] { R10392 += 1, R10348 += 1 };
  s14 -> s14 [0, 65535] { R10392 += 1, R10348 += 1, R10284 += 1 };
  s15 -> s15 [0, 69] { R10392 += 1, R10348 += 1 };
  s15 -> s15 [0, 65535] { R10392 += 1 };
  s15 -> s13 [0, 65535];
  s15 -> s11 [70, 70] { R10392 += 1, R10348 += 1 };
  s15 -> s18 [70, 70] { R10392 += 1, R10348 += 1 };
  s15 -> s15 [71, 65535] { R10392 += 1, R10348 += 1 };
  s16 -> s15 [0, 69] { R10392 += 1, R10348 += 1 };
  s16 -> s16 [0, 69] { R10392 += 1, R10348 += 1, R10284 += 1 };
  s16 -> s17 [70, 70] { R10392 += 1, R10348 += 1, R10284 += 1 };
  s16 -> s11 [70, 70] { R10392 += 1, R10348 += 1 };
  s16 -> s14 [70, 70] { R10392 += 1, R10348 += 1, R10284 += 1 };
  s16 -> s18 [70, 70] { R10392 += 1, R10348 += 1 };
  s16 -> s15 [71, 65535] { R10392 += 1, R10348 += 1 };
  s16 -> s16 [71, 65535] { R10392 += 1, R10348 += 1, R10284 += 1 };
  s18 -> s18 [0, 65535] { R10392 += 1 };
  s18 -> s13 [0, 65535];
  accepting s12, s13, s18, s15, s11;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [102, 102];
  accepting s1;
};
};
constraint R3 = R10392 && R23 - R10392 = -1 && R24 = R10392 && R25 - R10392 = -1 && R26 = R10392 && R27 = 0 && R28 = 1 && R29 = 0 && R30 = 1 && R45 + R84 + R83 + -1*R10170 + -1*R10166 - R66 = 0 && R49 + R89 + R87 = 0 && R50 + R90 + R88 + -1*R10170 + -1*R10166 - R66 = 0 && R55 + R96 + R93 + -1*R10172 + -1*R10168 - R68 = 0 && R65 + R10169 + R10165 = 0 && R67 + R10171 + R10167 = 0 && R10333 = 0 && R10334 = 0 && R10339 = 0 && R10340 = 0 && R10343 = 0 && R10344 = 0 && R10345 = 0 && R10346 = 0 && R10347 = 0 && R10348 = 0 && R10349 = 0 && R10350 = R10392 && R10351 = 0 && R10352 = R10392 && R10353 = 0 && R10354 = R10392 && R10355 = 0 && R10356 = R10392 && R10357 = 0 && R10358 = R10392 && R10359 = 0 && R10360 = R10392 && R10361 = 0 && R10362 = R10392 && R10363 = 0 && R10364 = R10392 && R10365 = 0 && R10366 = R10392 && R10367 = 0 && R10368 = R10392 && R10369 = 0 && R10370 = R10392 && R10371 = 0 && R10372 = R10392 && R10373 = 0 && R10374 = R10392 && R10375 = 0 && R10376 = R10392 && R10377 = 0 && R10378 = R10392 && R10379 = 0 && R10380 = R10392 && R10381 = 0 && R10382 = R10392 && R10383 = 0 && R10384 = R10392 && R10385 = 0 && R10386 = R10392 && R10387 = 0 && R10388 = R10392 && R10389 = 0 && R10390 = R10392 && R10391 = 0 && -1 < R2 && R12 < 1 && R15 < 1 && R16 < 1 && R47 + R86 + R85 < 1 && R61 + R10164 + R10161 < 1 && -1*R10170 + -1*R10166 - R66 < 1 && -1*R10172 + -1*R10168 - R68 < 1 && 0 < R10392 && (R2 != 0 || R20 = 0 || (R10293 = 0 && R10294 = 0)) && (R2 != 0 || R20 = 0 || (R10295 = 0 && R10296 = 0)) && (R2 != 0 || R20 = 0 || (R10297 = 0 && R10298 = 0)) && (R2 != 0 || R20 = 0 || (R10299 = 0 && R10300 = 0)) && (R2 != 0 || R20 = 0 || (R10301 = 0 && R10302 = 0)) && (R2 != 0 || R20 = 0 || (R10303 = 0 && R10304 = 0)) && (R2 != 0 || R20 = 0 || (R10305 = 0 && R10306 = 0)) && (R2 != 0 || R20 = 0 || (R10307 = 0 && R10308 = 0)) && (R2 != 0 || R20 = 0 || (R10309 = 0 && R10310 = 0)) && (R2 != 0 || R20 = 0 || (R10311 = 0 && R10312 = 0)) && (R53 + R94 + R91 != 0 || R54 + R95 + R92 + -1*R10170 + -1*R10166 - R66 = 0 || R66 + R10170 + R10166 < 1) && (R59 + R10162 + R10159 != 0 || R60 + R10163 + R10160 + -1*R10170 + -1*R10166 - R66 = 0 || R66 + R10170 + R10166 < 1) && (R66 + R10170 + R10166 != 0 || ((R53 + R94 + R91 != 0 || R54 + R95 + R92 = 0 || R68 + R10172 + R10168 < 1) && (R53 + R94 + R91 = 0 || R68 + R10172 + R10168 < 1))) && (R66 + R10170 + R10166 != 0 || ((R59 + R10162 + R10159 != 0 || R60 + R10163 + R10160 = 0 || R68 + R10172 + R10168 < 1) && (R59 + R10162 + R10159 = 0 || R68 + R10172 + R10168 < 1))) && (R66 + R10170 + R10166 != 0 || ((R73 + R10288 + R10283 != 0 || R74 + R10289 + R10284 = 0 || R68 + R10172 + R10168 < 1) && (R73 + R10288 + R10283 = 0 || R68 + R10172 + R10168 < 1))) && (R68 + R10172 + R10168 != 0 || R77 + R10292 + R10287 = 0 || (R75 + R10290 + R10285 = 0 && R76 + R10291 + R10286 = 0)) && (R73 + R10288 + R10283 != 0 || R66 + R10170 + R10166 + -1*R10289 + -1*R10284 - R74 = 0 || R66 + R10170 + R10166 < 1) && (R75 + R10290 + R10285 != 0 || R68 + R10172 + R10168 + -1*R10291 + -1*R10286 - R76 = 0 || R68 + R10172 + R10168 < 1) && (R10293 != 0 || R2 = R10294 || R2 < 1) && (R10295 != 0 || R2 = R10296 || R2 < 1) && (R10297 != 0 || R2 = R10298 || R2 < 1) && (R10299 != 0 || R2 = R10300 || R2 < 1) && (R10301 != 0 || R2 = R10302 || R2 < 1) && (R10303 != 0 || R2 = R10304 || R2 < 1) && (R10305 != 0 || R2 = R10306 || R2 < 1) && (R10307 != 0 || R2 = R10308 || R2 < 1) && (R10309 != 0 || R2 = R10310 || R2 < 1) && (R10311 != 0 || R2 = R10312 || R2 < 1) && (R21 = 0 || (R10331 = 0 && R10332 = 0)) && (R21 = 0 || (R10335 = 0 && R10336 = 0)) && (R21 = 0 || (R10337 = 0 && R10338 = 0)) && (R21 = 0 || (R10341 = 0 && R10342 = 0)) && (R22 = 0 || (R10313 = 0 && R10314 = 0)) && (R22 = 0 || (R10315 = 0 && R10316 = 0)) && (R22 = 0 || (R10317 = 0 && R10318 = 0)) && (R22 = 0 || (R10319 = 0 && R10320 = 0)) && (R22 = 0 || (R10321 = 0 && R10322 = 0)) && (R22 = 0 || (R10323 = 0 && R10324 = 0)) && (R22 = 0 || (R10325 = 0 && R10326 = 0)) && (R22 = 0 || (R10327 = 0 && R10328 = 0)) && (R22 = 0 || (R10329 = 0 && R10330 = 0)) && (R53 + R94 + R91 = 0 || R66 + R10170 + R10166 < 1) && (R59 + R10162 + R10159 = 0 || R66 + R10170 + R10166 < 1) && (R73 + R10288 + R10283 = 0 || R66 + R10170 + R10166 < 1) && (R75 + R10290 + R10285 = 0 || R68 + R10172 + R10168 < 1) && (R10293 = 0 || R2 < 1) && (R10295 = 0 || R2 < 1) && (R10297 = 0 || R2 < 1) && (R10299 = 0 || R2 < 1) && (R10301 = 0 || R2 < 1) && (R10303 = 0 || R2 < 1) && (R10305 = 0 || R2 < 1) && (R10307 = 0 || R2 < 1) && (R10309 = 0 || R2 < 1) && (R10311 = 0 || R2 < 1);
// End of Parikh automata intersection problem
