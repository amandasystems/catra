// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R11522, R11523, R11524, R11525, R11526, R11527, R11528, R11529, R11530, R11531, R11532, R11533, R11534, R11535, R12, R12380, R12381, R12382, R12383, R12384, R12385, R12698, R12699, R12700, R12701, R12702, R12703, R12704, R12705, R12706, R12707, R12708, R12709, R12710, R12711, R12712, R12713, R12714, R12715, R12716, R12717, R12718, R12719, R12720, R12721, R12722, R12723, R12724, R12725, R12726, R12727, R12728, R12729, R12730, R12731, R12732, R12733, R12734, R12735, R12736, R12737, R12738, R12739, R12740, R12741, R12742, R12743, R12744, R12745, R12746, R12747, R12748, R12749, R12750, R12751, R12752, R12753, R12754, R12755, R12756, R12757, R12758, R12759, R12760, R12761, R12762, R12763, R12764, R12765, R12766, R12767, R12768, R12769, R12770, R12771, R12772, R12773, R12774, R12775, R12776, R12777, R12778, R12779, R12780, R12781, R12782, R12783, R12784, R12785, R12786, R12787, R12788, R12789, R12790, R12791, R12792, R12793, R12794, R12795, R12796, R12797, R12798, R12799, R12800, R12801, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [84, 84];
  s0 -> s0 [85, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [84, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 83];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [84, 84];
  s0 -> s1 [85, 65535];
  s1 -> s1 [0, 83];
  s1 -> s2 [84, 84];
  s1 -> s1 [85, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R21 += 1 };
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s1 [0, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R12722 += 1, R12723 += 1 };
  s0 -> s1 [0, 65535] { R12723 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R12723 += 1, R19 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 83] { R12725 += 1 };
  s0 -> s0 [0, 65535] { R12724 += 1, R12725 += 1 };
  s0 -> s2 [84, 84] { R12725 += 1 };
  s0 -> s3 [84, 84] { R12725 += 1 };
  s0 -> s1 [86, 65535] { R12725 += 1 };
  s1 -> s1 [0, 83] { R12725 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R12725 += 1 };
  s1 -> s3 [84, 84] { R12725 += 1 };
  s1 -> s1 [86, 65535] { R12725 += 1 };
  s2 -> s2 [0, 84] { R12725 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [86, 65535] { R12725 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 83] { R12727 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R12726 += 1, R12727 += 1 };
  s0 -> s2 [84, 84] { R12727 += 1, R38 += 1 };
  s0 -> s3 [84, 84] { R12727 += 1, R38 += 1 };
  s0 -> s1 [85, 65535] { R12727 += 1, R38 += 1 };
  s1 -> s1 [0, 83] { R12727 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R12727 += 1, R38 += 1 };
  s1 -> s3 [84, 84] { R12727 += 1, R38 += 1 };
  s1 -> s1 [85, 65535] { R12727 += 1, R38 += 1 };
  s2 -> s2 [0, 65535] { R12727 += 1, R38 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 83] { R12729 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R12728 += 1, R12729 += 1 };
  s0 -> s2 [84, 84] { R12729 += 1, R40 += 1 };
  s0 -> s3 [84, 84] { R12729 += 1, R40 += 1 };
  s0 -> s1 [85, 65535] { R12729 += 1, R40 += 1 };
  s1 -> s1 [0, 83] { R12729 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R12729 += 1, R40 += 1 };
  s1 -> s3 [84, 84] { R12729 += 1, R40 += 1 };
  s1 -> s1 [85, 65535] { R12729 += 1, R40 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R12729 += 1, R40 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 83] { R12731 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R12730 += 1, R12731 += 1 };
  s0 -> s2 [84, 84] { R12731 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [84, 84] { R12731 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [85, 65535] { R12731 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 83] { R12731 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R12731 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [84, 84] { R12731 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [85, 65535] { R12731 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R12731 += 1, R42 += 1, R43 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 83] { R12733 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R12732 += 1, R12733 += 1 };
  s0 -> s2 [84, 84] { R12733 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [84, 84] { R12733 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [85, 65535] { R12733 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 83] { R12733 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R12733 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [84, 84] { R12733 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [85, 65535] { R12733 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535] { R12733 += 1, R46 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 83] { R12735 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R12734 += 1, R12735 += 1 };
  s0 -> s2 [84, 84] { R12735 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [84, 84] { R12735 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [85, 65535] { R12735 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 83] { R12735 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R12735 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [84, 84] { R12735 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [85, 65535] { R12735 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535] { R12735 += 1, R52 += 1, R53 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 83] { R12737 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R12736 += 1, R12737 += 1 };
  s0 -> s2 [84, 84] { R12737 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [84, 84] { R12737 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [85, 65535] { R12737 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 83] { R12737 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R12737 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [84, 84] { R12737 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [85, 65535] { R12737 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R12737 += 1, R56 += 1, R57 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 83] { R12739 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R12738 += 1, R12739 += 1 };
  s0 -> s2 [84, 84] { R12739 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [84, 84] { R12739 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [85, 65535] { R12739 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 83] { R12739 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R12739 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [84, 84] { R12739 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [85, 65535] { R12739 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R12739 += 1, R62 += 1, R63 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 83] { R12759 += 1 };
  s0 -> s0 [0, 65535] { R12758 += 1, R12759 += 1 };
  s0 -> s2 [84, 84] { R12759 += 1 };
  s0 -> s1 [85, 65535] { R12759 += 1 };
  s1 -> s1 [0, 83] { R12759 += 1 };
  s1 -> s2 [84, 84] { R12759 += 1 };
  s1 -> s1 [85, 65535] { R12759 += 1 };
  s2 -> s2 [0, 65535] { R12759 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R12761 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R12760 += 1, R12761 += 1 };
  s1 -> s1 [0, 65535] { R12761 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 83] { R12763 += 1 };
  s0 -> s2 [0, 65535] { R12763 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R12762 += 1, R12763 += 1 };
  s0 -> s3 [84, 84] { R12763 += 1 };
  s0 -> s1 [85, 65535] { R12763 += 1 };
  s1 -> s1 [0, 83] { R12763 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [84, 84] { R12763 += 1 };
  s1 -> s1 [85, 65535] { R12763 += 1 };
  s2 -> s1 [0, 83] { R12763 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R12763 += 1, R8 += 1 };
  s2 -> s3 [84, 84] { R12763 += 1 };
  s2 -> s1 [85, 65535] { R12763 += 1 };
  s3 -> s3 [0, 65535] { R12763 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 83] { R12765 += 1, R12703 += 1 };
  s0 -> s2 [0, 65535] { R12765 += 1, R12702 += 1, R12703 += 1 };
  s0 -> s0 [0, 65535] { R12764 += 1, R12765 += 1 };
  s0 -> s1 [85, 65535] { R12765 += 1, R12703 += 1 };
  s1 -> s1 [0, 83] { R12765 += 1, R12703 += 1 };
  s1 -> s1 [0, 65535] { R12765 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [85, 65535] { R12765 += 1, R12703 += 1 };
  s2 -> s1 [0, 83] { R12765 += 1, R12703 += 1 };
  s2 -> s2 [0, 65535] { R12765 += 1, R12702 += 1, R12703 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [85, 65535] { R12765 += 1, R12703 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R12767 += 1, R12705 += 1, R17 += 1 };
  s0 -> s2 [0, 65535] { R12767 += 1, R12704 += 1, R12705 += 1 };
  s0 -> s0 [0, 65535] { R12766 += 1, R12767 += 1 };
  s1 -> s1 [0, 65535] { R12767 += 1, R12705 += 1, R17 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R12767 += 1 };
  s2 -> s1 [0, 65535] { R12767 += 1, R12705 += 1, R17 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R12767 += 1, R12704 += 1, R12705 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R12767 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 65535] { R12769 += 1, R12707 += 1 };
  s0 -> s0 [0, 65535] { R12768 += 1, R12769 += 1 };
  s0 -> s2 [0, 65535] { R12769 += 1, R12706 += 1, R12707 += 1 };
  s1 -> s1 [0, 65535] { R12769 += 1, R12707 += 1 };
  s1 -> s4 [0, 65535] { R12769 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R12769 += 1, R12707 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R12769 += 1, R12706 += 1, R12707 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R12769 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R12771 += 1, R12708 += 1, R12709 += 1 };
  s0 -> s2 [0, 65535] { R12771 += 1, R12709 += 1, R67 += 1 };
  s0 -> s0 [0, 65535] { R12770 += 1, R12771 += 1 };
  s1 -> s1 [0, 65535] { R12771 += 1, R12708 += 1, R12709 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R12771 += 1, R12709 += 1, R67 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R12771 += 1 };
  s2 -> s2 [0, 65535] { R12771 += 1, R12709 += 1, R67 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R12771 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 84] { R12773 += 1, R12711 += 1 };
  s0 -> s0 [0, 65535] { R12772 += 1, R12773 += 1 };
  s0 -> s2 [0, 65535] { R12773 += 1, R12710 += 1, R12711 += 1 };
  s0 -> s3 [0, 65535] { R12773 += 1, R12711 += 1, R69 += 1 };
  s0 -> s1 [86, 65535] { R12773 += 1, R12711 += 1 };
  s1 -> s1 [0, 84] { R12773 += 1, R12711 += 1 };
  s1 -> s1 [0, 65535] { R12773 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [86, 65535] { R12773 += 1, R12711 += 1 };
  s2 -> s1 [0, 84] { R12773 += 1, R12711 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R12773 += 1, R12710 += 1, R12711 += 1 };
  s2 -> s3 [0, 65535] { R12773 += 1, R12711 += 1, R69 += 1 };
  s2 -> s1 [86, 65535] { R12773 += 1, R12711 += 1 };
  s3 -> s1 [0, 84] { R12773 += 1, R12711 += 1 };
  s3 -> s4 [0, 65535] { R12773 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R12773 += 1, R12711 += 1, R69 += 1 };
  s3 -> s1 [86, 65535] { R12773 += 1, R12711 += 1 };
  s4 -> s4 [0, 65535] { R12773 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 84] { R12775 += 1, R12713 += 1, R11525 += 1 };
  s0 -> s2 [0, 65535] { R12775 += 1, R12712 += 1, R12713 += 1 };
  s0 -> s1 [0, 65535] { R12775 += 1, R12713 += 1 };
  s0 -> s0 [0, 65535] { R12774 += 1, R12775 += 1 };
  s0 -> s1 [86, 65535] { R12775 += 1, R12713 += 1, R11525 += 1 };
  s1 -> s1 [0, 84] { R12775 += 1, R12713 += 1, R11525 += 1 };
  s1 -> s1 [0, 65535] { R12775 += 1, R12713 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R12775 += 1 };
  s1 -> s1 [86, 65535] { R12775 += 1, R12713 += 1, R11525 += 1 };
  s2 -> s1 [0, 84] { R12775 += 1, R12713 += 1, R11525 += 1 };
  s2 -> s2 [0, 65535] { R12775 += 1, R12712 += 1, R12713 += 1 };
  s2 -> s1 [0, 65535] { R12775 += 1, R12713 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [86, 65535] { R12775 += 1, R12713 += 1, R11525 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R12775 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R12777 += 1, R12715 += 1, R11530 += 1, R11531 += 1 };
  s0 -> s0 [0, 65535] { R12776 += 1, R12777 += 1 };
  s0 -> s2 [0, 65535] { R12777 += 1, R12714 += 1, R12715 += 1 };
  s0 -> s3 [0, 65535] { R12777 += 1, R12715 += 1, R11529 += 1, R11530 += 1 };
  s1 -> s4 [0, 65535] { R12777 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R12777 += 1, R12715 += 1, R11530 += 1, R11531 += 1 };
  s1 -> s6 [0, 65535] { R12777 += 1, R12715 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R12777 += 1, R12715 += 1, R11530 += 1, R11531 += 1 };
  s2 -> s2 [0, 65535] { R12777 += 1, R12714 += 1, R12715 += 1 };
  s2 -> s3 [0, 65535] { R12777 += 1, R12715 += 1, R11529 += 1, R11530 += 1 };
  s3 -> s4 [0, 65535] { R12777 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [0, 65535] { R12777 += 1, R12715 += 1, R11530 += 1, R11531 += 1 };
  s3 -> s3 [0, 65535] { R12777 += 1, R12715 += 1, R11529 += 1, R11530 += 1 };
  s4 -> s4 [0, 65535] { R12777 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R12777 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R12777 += 1, R12715 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 85] { R12779 += 1, R12717 += 1, R11535 += 1 };
  s0 -> s1 [0, 65535] { R12779 += 1, R12717 += 1 };
  s0 -> s2 [0, 65535] { R12779 += 1, R12716 += 1, R12717 += 1 };
  s0 -> s0 [0, 65535] { R12778 += 1, R12779 += 1 };
  s0 -> s1 [87, 65535] { R12779 += 1, R12717 += 1, R11535 += 1 };
  s1 -> s1 [0, 85] { R12779 += 1, R12717 += 1, R11535 += 1 };
  s1 -> s1 [0, 65535] { R12779 += 1, R12717 += 1 };
  s1 -> s4 [0, 65535] { R12779 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [87, 65535] { R12779 += 1, R12717 += 1, R11535 += 1 };
  s2 -> s1 [0, 85] { R12779 += 1, R12717 += 1, R11535 += 1 };
  s2 -> s1 [0, 65535] { R12779 += 1, R12717 += 1 };
  s2 -> s2 [0, 65535] { R12779 += 1, R12716 += 1, R12717 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [87, 65535] { R12779 += 1, R12717 += 1, R11535 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R12779 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R12781 += 1, R12719 += 1 };
  s0 -> s2 [0, 65535] { R12781 += 1, R12718 += 1, R12719 += 1 };
  s0 -> s0 [0, 65535] { R12780 += 1, R12781 += 1 };
  s1 -> s1 [0, 65535] { R12781 += 1, R12719 += 1 };
  s1 -> s4 [0, 65535] { R12781 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R12781 += 1, R12719 += 1 };
  s2 -> s2 [0, 65535] { R12781 += 1, R12718 += 1, R12719 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R12781 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 85] { R12783 += 1, R12721 += 1, R12701 += 1 };
  s0 -> s1 [0, 65535] { R12783 += 1, R12721 += 1 };
  s0 -> s2 [0, 65535] { R12783 += 1, R12720 += 1, R12721 += 1 };
  s0 -> s0 [0, 65535] { R12782 += 1, R12783 += 1 };
  s0 -> s1 [88, 65535] { R12783 += 1, R12721 += 1, R12701 += 1 };
  s1 -> s1 [0, 85] { R12783 += 1, R12721 += 1, R12701 += 1 };
  s1 -> s1 [0, 65535] { R12783 += 1, R12721 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R12783 += 1 };
  s1 -> s1 [88, 65535] { R12783 += 1, R12721 += 1, R12701 += 1 };
  s2 -> s1 [0, 85] { R12783 += 1, R12721 += 1, R12701 += 1 };
  s2 -> s1 [0, 65535] { R12783 += 1, R12721 += 1 };
  s2 -> s2 [0, 65535] { R12783 += 1, R12720 += 1, R12721 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [88, 65535] { R12783 += 1, R12721 += 1, R12701 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R12783 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R12785 += 1, R12741 += 1, R18 += 1 };
  s0 -> s2 [0, 65535] { R12785 += 1, R12740 += 1, R12741 += 1 };
  s0 -> s0 [0, 65535] { R12784 += 1, R12785 += 1 };
  s1 -> s1 [0, 65535] { R12785 += 1, R12741 += 1, R18 += 1 };
  s1 -> s4 [0, 65535] { R12785 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R12785 += 1, R12741 += 1, R18 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R12785 += 1, R12740 += 1, R12741 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R12785 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 83] { R12787 += 1, R12743 += 1 };
  s0 -> s0 [0, 65535] { R12786 += 1, R12787 += 1 };
  s0 -> s2 [0, 65535] { R12787 += 1, R12742 += 1, R12743 += 1 };
  s0 -> s3 [84, 84] { R12787 += 1, R12743 += 1 };
  s0 -> s4 [84, 84] { R12787 += 1, R12743 += 1 };
  s0 -> s5 [85, 85] { R12787 += 1, R12743 += 1 };
  s0 -> s1 [86, 65535] { R12787 += 1, R12743 += 1 };
  s1 -> s1 [0, 83] { R12787 += 1, R12743 += 1 };
  s1 -> s3 [84, 84] { R12787 += 1, R12743 += 1 };
  s1 -> s4 [84, 84] { R12787 += 1, R12743 += 1 };
  s1 -> s5 [85, 85] { R12787 += 1, R12743 += 1 };
  s1 -> s1 [86, 65535] { R12787 += 1, R12743 += 1 };
  s2 -> s1 [0, 83] { R12787 += 1, R12743 += 1 };
  s2 -> s2 [0, 65535] { R12787 += 1, R12742 += 1, R12743 += 1 };
  s2 -> s3 [84, 84] { R12787 += 1, R12743 += 1 };
  s2 -> s4 [84, 84] { R12787 += 1, R12743 += 1 };
  s2 -> s5 [85, 85] { R12787 += 1, R12743 += 1 };
  s2 -> s1 [86, 65535] { R12787 += 1, R12743 += 1 };
  s3 -> s3 [0, 84] { R12787 += 1, R12743 += 1 };
  s3 -> s8 [85, 85] { R12787 += 1, R12743 += 1 };
  s3 -> s3 [86, 65535] { R12787 += 1, R12743 += 1 };
  s5 -> s5 [0, 83] { R12787 += 1, R12743 += 1 };
  s5 -> s5 [0, 65535] { R12787 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [84, 84] { R12787 += 1, R12743 += 1 };
  s5 -> s8 [84, 84] { R12787 += 1, R12743 += 1 };
  s5 -> s5 [85, 65535] { R12787 += 1, R12743 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R12787 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R12787 += 1, R12743 += 1 };
  s8 -> s9 [0, 65535] { R12787 += 1 };
  s9 -> s6 [0, 65535];
  s9 -> s9 [0, 65535] { R12787 += 1 };
  accepting s8, s5, s9, s6, s7;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 83] { R12789 += 1, R12745 += 1, R66 += 1 };
  s0 -> s2 [0, 65535] { R12789 += 1, R12744 += 1, R12745 += 1 };
  s0 -> s0 [0, 65535] { R12788 += 1, R12789 += 1 };
  s0 -> s3 [84, 84] { R12789 += 1, R12745 += 1, R66 += 1 };
  s0 -> s4 [84, 84] { R12789 += 1, R12745 += 1, R66 += 1 };
  s0 -> s1 [85, 65535] { R12789 += 1, R12745 += 1, R66 += 1 };
  s1 -> s1 [0, 83] { R12789 += 1, R12745 += 1, R66 += 1 };
  s1 -> s1 [0, 65535] { R12789 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [84, 84] { R12789 += 1, R12745 += 1, R66 += 1 };
  s1 -> s4 [84, 84] { R12789 += 1, R12745 += 1, R66 += 1 };
  s1 -> s1 [85, 65535] { R12789 += 1, R12745 += 1, R66 += 1 };
  s2 -> s1 [0, 83] { R12789 += 1, R12745 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R12789 += 1, R12744 += 1, R12745 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [84, 84] { R12789 += 1, R12745 += 1, R66 += 1 };
  s2 -> s4 [84, 84] { R12789 += 1, R12745 += 1, R66 += 1 };
  s2 -> s1 [85, 65535] { R12789 += 1, R12745 += 1, R66 += 1 };
  s3 -> s3 [0, 65535] { R12789 += 1, R12745 += 1, R66 += 1 };
  s3 -> s6 [0, 65535] { R12789 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R12789 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R12789 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 83] { R12791 += 1, R12747 += 1, R68 += 1 };
  s0 -> s0 [0, 65535] { R12790 += 1, R12791 += 1 };
  s0 -> s2 [0, 65535] { R12791 += 1, R12746 += 1, R12747 += 1 };
  s0 -> s3 [84, 84] { R12791 += 1, R12747 += 1, R68 += 1 };
  s0 -> s4 [84, 84] { R12791 += 1, R12747 += 1, R68 += 1 };
  s0 -> s1 [85, 65535] { R12791 += 1, R12747 += 1, R68 += 1 };
  s1 -> s1 [0, 83] { R12791 += 1, R12747 += 1, R68 += 1 };
  s1 -> s1 [0, 65535] { R12791 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [84, 84] { R12791 += 1, R12747 += 1, R68 += 1 };
  s1 -> s4 [84, 84] { R12791 += 1, R12747 += 1, R68 += 1 };
  s1 -> s1 [85, 65535] { R12791 += 1, R12747 += 1, R68 += 1 };
  s2 -> s1 [0, 83] { R12791 += 1, R12747 += 1, R68 += 1 };
  s2 -> s2 [0, 65535] { R12791 += 1, R12746 += 1, R12747 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [84, 84] { R12791 += 1, R12747 += 1, R68 += 1 };
  s2 -> s4 [84, 84] { R12791 += 1, R12747 += 1, R68 += 1 };
  s2 -> s1 [85, 65535] { R12791 += 1, R12747 += 1, R68 += 1 };
  s3 -> s3 [0, 65535] { R12791 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R12791 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R12791 += 1, R12747 += 1, R68 += 1 };
  s5 -> s5 [0, 65535] { R12791 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 83] { R12793 += 1, R12749 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s2 [0, 83] { R12793 += 1, R12749 += 1, R11523 += 1 };
  s0 -> s0 [0, 65535] { R12792 += 1, R12793 += 1 };
  s0 -> s3 [0, 65535] { R12793 += 1, R12748 += 1, R12749 += 1 };
  s0 -> s4 [84, 84] { R12793 += 1, R12749 += 1, R11523 += 1 };
  s0 -> s5 [84, 84] { R12793 += 1, R12749 += 1, R11523 += 1 };
  s0 -> s6 [84, 84] { R12793 += 1, R12749 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s7 [84, 84] { R12793 += 1, R12749 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s1 [85, 65535] { R12793 += 1, R12749 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s2 [86, 65535] { R12793 += 1, R12749 += 1, R11523 += 1 };
  s1 -> s1 [0, 83] { R12793 += 1, R12749 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s2 [0, 83] { R12793 += 1, R12749 += 1, R11523 += 1 };
  s1 -> s4 [84, 84] { R12793 += 1, R12749 += 1, R11523 += 1 };
  s1 -> s5 [84, 84] { R12793 += 1, R12749 += 1, R11523 += 1 };
  s1 -> s6 [84, 84] { R12793 += 1, R12749 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s7 [84, 84] { R12793 += 1, R12749 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s1 [85, 65535] { R12793 += 1, R12749 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s2 [86, 65535] { R12793 += 1, R12749 += 1, R11523 += 1 };
  s2 -> s2 [0, 83] { R12793 += 1, R12749 += 1, R11523 += 1 };
  s2 -> s2 [0, 65535] { R12793 += 1 };
  s2 -> s9 [0, 65535];
  s2 -> s4 [84, 84] { R12793 += 1, R12749 += 1 };
  s2 -> s5 [84, 84] { R12793 += 1, R12749 += 1 };
  s2 -> s2 [85, 65535] { R12793 += 1, R12749 += 1 };
  s2 -> s2 [86, 65535] { R12793 += 1, R12749 += 1, R11523 += 1 };
  s3 -> s1 [0, 83] { R12793 += 1, R12749 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s2 [0, 83] { R12793 += 1, R12749 += 1, R11523 += 1 };
  s3 -> s3 [0, 65535] { R12793 += 1, R12748 += 1, R12749 += 1 };
  s3 -> s4 [84, 84] { R12793 += 1, R12749 += 1, R11523 += 1 };
  s3 -> s5 [84, 84] { R12793 += 1, R12749 += 1, R11523 += 1 };
  s3 -> s6 [84, 84] { R12793 += 1, R12749 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s7 [84, 84] { R12793 += 1, R12749 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s1 [85, 65535] { R12793 += 1, R12749 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s2 [86, 65535] { R12793 += 1, R12749 += 1, R11523 += 1 };
  s4 -> s4 [0, 65535] { R12793 += 1 };
  s4 -> s9 [0, 65535];
  s5 -> s5 [0, 84] { R12793 += 1, R12749 += 1, R11523 += 1 };
  s5 -> s8 [0, 65535] { R12793 += 1 };
  s5 -> s5 [0, 65535] { R12793 += 1, R12749 += 1 };
  s5 -> s9 [0, 65535];
  s5 -> s5 [86, 65535] { R12793 += 1, R12749 += 1, R11523 += 1 };
  s6 -> s5 [0, 84] { R12793 += 1, R12749 += 1, R11523 += 1 };
  s6 -> s6 [0, 65535] { R12793 += 1, R12749 += 1, R11522 += 1, R11523 += 1 };
  s6 -> s5 [86, 65535] { R12793 += 1, R12749 += 1, R11523 += 1 };
  s8 -> s8 [0, 65535] { R12793 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s4, s8, s5, s2, s9;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 83] { R12795 += 1, R12751 += 1, R11526 += 1, R11527 += 1 };
  s0 -> s0 [0, 65535] { R12794 += 1, R12795 += 1 };
  s0 -> s2 [0, 65535] { R12795 += 1, R12750 += 1, R12751 += 1 };
  s0 -> s3 [84, 84] { R12795 += 1, R12751 += 1, R11526 += 1, R11527 += 1 };
  s0 -> s4 [84, 84] { R12795 += 1, R12751 += 1, R11526 += 1, R11527 += 1 };
  s0 -> s1 [85, 65535] { R12795 += 1, R12751 += 1, R11526 += 1, R11527 += 1 };
  s1 -> s1 [0, 83] { R12795 += 1, R12751 += 1, R11526 += 1, R11527 += 1 };
  s1 -> s1 [0, 65535] { R12795 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [84, 84] { R12795 += 1, R12751 += 1, R11526 += 1, R11527 += 1 };
  s1 -> s4 [84, 84] { R12795 += 1, R12751 += 1, R11526 += 1, R11527 += 1 };
  s1 -> s1 [85, 65535] { R12795 += 1, R12751 += 1, R11526 += 1, R11527 += 1 };
  s2 -> s1 [0, 83] { R12795 += 1, R12751 += 1, R11526 += 1, R11527 += 1 };
  s2 -> s2 [0, 65535] { R12795 += 1, R12750 += 1, R12751 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [84, 84] { R12795 += 1, R12751 += 1, R11526 += 1, R11527 += 1 };
  s2 -> s4 [84, 84] { R12795 += 1, R12751 += 1, R11526 += 1, R11527 += 1 };
  s2 -> s1 [85, 65535] { R12795 += 1, R12751 += 1, R11526 += 1, R11527 += 1 };
  s3 -> s6 [0, 65535] { R12795 += 1 };
  s3 -> s3 [0, 65535] { R12795 += 1, R12751 += 1, R11526 += 1, R11527 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R12795 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R12795 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 83] { R12797 += 1, R12753 += 1, R11533 += 1 };
  s0 -> s2 [0, 83] { R12797 += 1, R12753 += 1, R11532 += 1, R11533 += 1 };
  s0 -> s0 [0, 65535] { R12796 += 1, R12797 += 1 };
  s0 -> s3 [0, 65535] { R12797 += 1, R12752 += 1, R12753 += 1 };
  s0 -> s4 [84, 84] { R12797 += 1, R12753 += 1, R11532 += 1, R11533 += 1 };
  s0 -> s5 [84, 84] { R12797 += 1, R12753 += 1, R11533 += 1 };
  s0 -> s6 [84, 84] { R12797 += 1, R12753 += 1, R11532 += 1, R11533 += 1 };
  s0 -> s7 [84, 84] { R12797 += 1, R12753 += 1, R11533 += 1 };
  s0 -> s1 [85, 85] { R12797 += 1, R12753 += 1, R11533 += 1 };
  s0 -> s2 [85, 65535] { R12797 += 1, R12753 += 1, R11532 += 1, R11533 += 1 };
  s0 -> s8 [87, 87] { R12797 += 1, R12753 += 1, R11533 += 1 };
  s0 -> s1 [88, 65535] { R12797 += 1, R12753 += 1, R11533 += 1 };
  s1 -> s1 [0, 83] { R12797 += 1, R12753 += 1, R11533 += 1 };
  s1 -> s5 [84, 84] { R12797 += 1, R12753 += 1, R11533 += 1 };
  s1 -> s7 [84, 84] { R12797 += 1, R12753 += 1, R11533 += 1 };
  s1 -> s1 [85, 85] { R12797 += 1, R12753 += 1, R11533 += 1 };
  s1 -> s8 [87, 87] { R12797 += 1, R12753 += 1, R11533 += 1 };
  s1 -> s1 [88, 65535] { R12797 += 1, R12753 += 1, R11533 += 1 };
  s2 -> s1 [0, 83] { R12797 += 1, R12753 += 1, R11533 += 1 };
  s2 -> s2 [0, 83] { R12797 += 1, R12753 += 1, R11532 += 1, R11533 += 1 };
  s2 -> s4 [84, 84] { R12797 += 1, R12753 += 1, R11532 += 1, R11533 += 1 };
  s2 -> s5 [84, 84] { R12797 += 1, R12753 += 1, R11533 += 1 };
  s2 -> s6 [84, 84] { R12797 += 1, R12753 += 1, R11532 += 1, R11533 += 1 };
  s2 -> s7 [84, 84] { R12797 += 1, R12753 += 1, R11533 += 1 };
  s2 -> s1 [85, 85] { R12797 += 1, R12753 += 1, R11533 += 1 };
  s2 -> s2 [85, 65535] { R12797 += 1, R12753 += 1, R11532 += 1, R11533 += 1 };
  s2 -> s8 [87, 87] { R12797 += 1, R12753 += 1, R11533 += 1 };
  s2 -> s1 [88, 65535] { R12797 += 1, R12753 += 1, R11533 += 1 };
  s3 -> s1 [0, 83] { R12797 += 1, R12753 += 1, R11533 += 1 };
  s3 -> s2 [0, 83] { R12797 += 1, R12753 += 1, R11532 += 1, R11533 += 1 };
  s3 -> s3 [0, 65535] { R12797 += 1, R12752 += 1, R12753 += 1 };
  s3 -> s4 [84, 84] { R12797 += 1, R12753 += 1, R11532 += 1, R11533 += 1 };
  s3 -> s5 [84, 84] { R12797 += 1, R12753 += 1, R11533 += 1 };
  s3 -> s6 [84, 84] { R12797 += 1, R12753 += 1, R11532 += 1, R11533 += 1 };
  s3 -> s7 [84, 84] { R12797 += 1, R12753 += 1, R11533 += 1 };
  s3 -> s1 [85, 85] { R12797 += 1, R12753 += 1, R11533 += 1 };
  s3 -> s2 [85, 65535] { R12797 += 1, R12753 += 1, R11532 += 1, R11533 += 1 };
  s3 -> s8 [87, 87] { R12797 += 1, R12753 += 1, R11533 += 1 };
  s3 -> s1 [88, 65535] { R12797 += 1, R12753 += 1, R11533 += 1 };
  s6 -> s7 [0, 85] { R12797 += 1, R12753 += 1, R11533 += 1 };
  s6 -> s6 [0, 65535] { R12797 += 1, R12753 += 1, R11532 += 1, R11533 += 1 };
  s6 -> s10 [87, 87] { R12797 += 1, R12753 += 1, R11533 += 1 };
  s6 -> s7 [88, 65535] { R12797 += 1, R12753 += 1, R11533 += 1 };
  s7 -> s7 [0, 85] { R12797 += 1, R12753 += 1, R11533 += 1 };
  s7 -> s10 [87, 87] { R12797 += 1, R12753 += 1, R11533 += 1 };
  s7 -> s7 [88, 65535] { R12797 += 1, R12753 += 1, R11533 += 1 };
  s8 -> s8 [0, 83] { R12797 += 1, R12753 += 1, R11533 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R12797 += 1 };
  s8 -> s10 [84, 84] { R12797 += 1, R12753 += 1 };
  s8 -> s11 [84, 84] { R12797 += 1, R12753 += 1 };
  s8 -> s8 [85, 85] { R12797 += 1, R12753 += 1, R11533 += 1 };
  s8 -> s8 [85, 65535] { R12797 += 1, R12753 += 1 };
  s8 -> s8 [87, 65535] { R12797 += 1, R12753 += 1, R11533 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 85] { R12797 += 1, R12753 += 1, R11533 += 1 };
  s10 -> s9 [0, 65535];
  s10 -> s12 [0, 65535] { R12797 += 1 };
  s10 -> s10 [0, 65535] { R12797 += 1, R12753 += 1 };
  s10 -> s10 [87, 65535] { R12797 += 1, R12753 += 1, R11533 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R12797 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R12797 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 83] { R12799 += 1, R12755 += 1, R12381 += 1, R12382 += 1 };
  s0 -> s2 [0, 83] { R12799 += 1, R12755 += 1, R12380 += 1, R12381 += 1 };
  s0 -> s0 [0, 65535] { R12798 += 1, R12799 += 1 };
  s0 -> s3 [0, 65535] { R12799 += 1, R12754 += 1, R12755 += 1 };
  s0 -> s4 [84, 84] { R12799 += 1, R12755 += 1, R12381 += 1, R12382 += 1 };
  s0 -> s5 [84, 84] { R12799 += 1, R12755 += 1, R12381 += 1, R12382 += 1 };
  s0 -> s6 [84, 84] { R12799 += 1, R12755 += 1, R12380 += 1, R12381 += 1 };
  s0 -> s7 [84, 84] { R12799 += 1, R12755 += 1, R12380 += 1, R12381 += 1 };
  s0 -> s1 [85, 65535] { R12799 += 1, R12755 += 1, R12381 += 1, R12382 += 1 };
  s0 -> s2 [85, 65535] { R12799 += 1, R12755 += 1, R12380 += 1, R12381 += 1 };
  s1 -> s1 [0, 83] { R12799 += 1, R12755 += 1, R12381 += 1, R12382 += 1 };
  s1 -> s11 [0, 83] { R12799 += 1, R12755 += 1 };
  s1 -> s4 [84, 84] { R12799 += 1, R12755 += 1, R12381 += 1, R12382 += 1 };
  s1 -> s5 [84, 84] { R12799 += 1, R12755 += 1, R12381 += 1, R12382 += 1 };
  s1 -> s12 [84, 84] { R12799 += 1, R12755 += 1 };
  s1 -> s8 [84, 84] { R12799 += 1, R12755 += 1 };
  s1 -> s1 [85, 65535] { R12799 += 1, R12755 += 1, R12381 += 1, R12382 += 1 };
  s1 -> s11 [85, 65535] { R12799 += 1, R12755 += 1 };
  s2 -> s1 [0, 83] { R12799 += 1, R12755 += 1, R12381 += 1, R12382 += 1 };
  s2 -> s2 [0, 83] { R12799 += 1, R12755 += 1, R12380 += 1, R12381 += 1 };
  s2 -> s4 [84, 84] { R12799 += 1, R12755 += 1, R12381 += 1, R12382 += 1 };
  s2 -> s5 [84, 84] { R12799 += 1, R12755 += 1, R12381 += 1, R12382 += 1 };
  s2 -> s6 [84, 84] { R12799 += 1, R12755 += 1, R12380 += 1, R12381 += 1 };
  s2 -> s7 [84, 84] { R12799 += 1, R12755 += 1, R12380 += 1, R12381 += 1 };
  s2 -> s1 [85, 65535] { R12799 += 1, R12755 += 1, R12381 += 1, R12382 += 1 };
  s2 -> s2 [85, 65535] { R12799 += 1, R12755 += 1, R12380 += 1, R12381 += 1 };
  s3 -> s1 [0, 83] { R12799 += 1, R12755 += 1, R12381 += 1, R12382 += 1 };
  s3 -> s2 [0, 83] { R12799 += 1, R12755 += 1, R12380 += 1, R12381 += 1 };
  s3 -> s3 [0, 65535] { R12799 += 1, R12754 += 1, R12755 += 1 };
  s3 -> s4 [84, 84] { R12799 += 1, R12755 += 1, R12381 += 1, R12382 += 1 };
  s3 -> s5 [84, 84] { R12799 += 1, R12755 += 1, R12381 += 1, R12382 += 1 };
  s3 -> s6 [84, 84] { R12799 += 1, R12755 += 1, R12380 += 1, R12381 += 1 };
  s3 -> s7 [84, 84] { R12799 += 1, R12755 += 1, R12380 += 1, R12381 += 1 };
  s3 -> s1 [85, 65535] { R12799 += 1, R12755 += 1, R12381 += 1, R12382 += 1 };
  s3 -> s2 [85, 65535] { R12799 += 1, R12755 += 1, R12380 += 1, R12381 += 1 };
  s5 -> s5 [0, 65535] { R12799 += 1, R12755 += 1, R12381 += 1, R12382 += 1 };
  s5 -> s8 [0, 65535] { R12799 += 1, R12755 += 1 };
  s6 -> s5 [0, 65535] { R12799 += 1, R12755 += 1, R12381 += 1, R12382 += 1 };
  s6 -> s6 [0, 65535] { R12799 += 1, R12755 += 1, R12380 += 1, R12381 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [0, 65535] { R12799 += 1 };
  s8 -> s8 [0, 65535] { R12799 += 1, R12755 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R12799 += 1 };
  s11 -> s11 [0, 83] { R12799 += 1, R12755 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R12799 += 1 };
  s11 -> s12 [84, 84] { R12799 += 1, R12755 += 1 };
  s11 -> s8 [84, 84] { R12799 += 1, R12755 += 1 };
  s11 -> s11 [85, 65535] { R12799 += 1, R12755 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R12799 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 83] { R12801 += 1, R12757 += 1, R12698 += 1, R12699 += 1 };
  s0 -> s2 [0, 83] { R12801 += 1, R12757 += 1, R12699 += 1 };
  s0 -> s0 [0, 65535] { R12800 += 1, R12801 += 1 };
  s0 -> s3 [0, 65535] { R12801 += 1, R12756 += 1, R12757 += 1 };
  s0 -> s4 [84, 84] { R12801 += 1, R12757 += 1, R12698 += 1, R12699 += 1 };
  s0 -> s5 [84, 84] { R12801 += 1, R12757 += 1, R12699 += 1 };
  s0 -> s6 [84, 84] { R12801 += 1, R12757 += 1, R12698 += 1, R12699 += 1 };
  s0 -> s7 [84, 84] { R12801 += 1, R12757 += 1, R12699 += 1 };
  s0 -> s8 [85, 85] { R12801 += 1, R12757 += 1, R12699 += 1 };
  s0 -> s1 [85, 65535] { R12801 += 1, R12757 += 1, R12698 += 1, R12699 += 1 };
  s0 -> s2 [88, 65535] { R12801 += 1, R12757 += 1, R12699 += 1 };
  s1 -> s1 [0, 83] { R12801 += 1, R12757 += 1, R12698 += 1, R12699 += 1 };
  s1 -> s2 [0, 83] { R12801 += 1, R12757 += 1, R12699 += 1 };
  s1 -> s4 [84, 84] { R12801 += 1, R12757 += 1, R12698 += 1, R12699 += 1 };
  s1 -> s5 [84, 84] { R12801 += 1, R12757 += 1, R12699 += 1 };
  s1 -> s6 [84, 84] { R12801 += 1, R12757 += 1, R12698 += 1, R12699 += 1 };
  s1 -> s7 [84, 84] { R12801 += 1, R12757 += 1, R12699 += 1 };
  s1 -> s8 [85, 85] { R12801 += 1, R12757 += 1, R12699 += 1 };
  s1 -> s1 [85, 65535] { R12801 += 1, R12757 += 1, R12698 += 1, R12699 += 1 };
  s1 -> s2 [88, 65535] { R12801 += 1, R12757 += 1, R12699 += 1 };
  s2 -> s2 [0, 83] { R12801 += 1, R12757 += 1, R12699 += 1 };
  s2 -> s5 [84, 84] { R12801 += 1, R12757 += 1 };
  s2 -> s7 [84, 84] { R12801 += 1, R12757 += 1 };
  s2 -> s8 [85, 85] { R12801 += 1, R12757 += 1, R12699 += 1 };
  s2 -> s2 [85, 65535] { R12801 += 1, R12757 += 1 };
  s2 -> s2 [88, 65535] { R12801 += 1, R12757 += 1, R12699 += 1 };
  s3 -> s1 [0, 83] { R12801 += 1, R12757 += 1, R12698 += 1, R12699 += 1 };
  s3 -> s2 [0, 83] { R12801 += 1, R12757 += 1, R12699 += 1 };
  s3 -> s3 [0, 65535] { R12801 += 1, R12756 += 1, R12757 += 1 };
  s3 -> s4 [84, 84] { R12801 += 1, R12757 += 1, R12698 += 1, R12699 += 1 };
  s3 -> s5 [84, 84] { R12801 += 1, R12757 += 1, R12699 += 1 };
  s3 -> s6 [84, 84] { R12801 += 1, R12757 += 1, R12698 += 1, R12699 += 1 };
  s3 -> s7 [84, 84] { R12801 += 1, R12757 += 1, R12699 += 1 };
  s3 -> s8 [85, 85] { R12801 += 1, R12757 += 1, R12699 += 1 };
  s3 -> s1 [85, 65535] { R12801 += 1, R12757 += 1, R12698 += 1, R12699 += 1 };
  s3 -> s2 [88, 65535] { R12801 += 1, R12757 += 1, R12699 += 1 };
  s4 -> s5 [0, 84] { R12801 += 1, R12757 += 1, R12699 += 1 };
  s4 -> s4 [0, 65535] { R12801 += 1, R12757 += 1, R12698 += 1, R12699 += 1 };
  s4 -> s10 [85, 85] { R12801 += 1, R12757 += 1, R12699 += 1 };
  s4 -> s5 [88, 65535] { R12801 += 1, R12757 += 1, R12699 += 1 };
  s5 -> s5 [0, 84] { R12801 += 1, R12757 += 1, R12699 += 1 };
  s5 -> s5 [0, 65535] { R12801 += 1, R12757 += 1 };
  s5 -> s10 [85, 85] { R12801 += 1, R12757 += 1, R12699 += 1 };
  s5 -> s5 [88, 65535] { R12801 += 1, R12757 += 1, R12699 += 1 };
  s8 -> s8 [0, 83] { R12801 += 1, R12757 += 1, R12699 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R12801 += 1 };
  s8 -> s10 [84, 84] { R12801 += 1, R12757 += 1 };
  s8 -> s11 [84, 84] { R12801 += 1, R12757 += 1 };
  s8 -> s8 [85, 85] { R12801 += 1, R12757 += 1, R12699 += 1 };
  s8 -> s8 [85, 65535] { R12801 += 1, R12757 += 1 };
  s8 -> s8 [88, 65535] { R12801 += 1, R12757 += 1, R12699 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 85] { R12801 += 1, R12757 += 1, R12699 += 1 };
  s10 -> s12 [0, 65535] { R12801 += 1 };
  s10 -> s10 [0, 65535] { R12801 += 1, R12757 += 1 };
  s10 -> s9 [0, 65535];
  s10 -> s10 [88, 65535] { R12801 += 1, R12757 += 1, R12699 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R12801 += 1 };
  s12 -> s12 [0, 65535] { R12801 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [116, 116];
  accepting s1;
};
};
synchronised {  // Automata constraining P62
automaton P62_0 {
  init s0;
  s0 -> s1 [117, 117];
  accepting s1;
};
};
constraint R2 = R12801 && R20 - R12801 = -1 && R21 = R12801 && R22 - R12801 = -1 && R23 = R12801 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R11535 + -1*R11533 - R53 = 0 && R52 + R11534 + R11532 = 0 && R12742 = 0 && R12743 = 0 && R12748 = 0 && R12749 = 0 && R12752 = 0 && R12753 = 0 && R12754 = 0 && R12755 = 0 && R12756 = 0 && R12757 = 0 && R12758 = 0 && R12759 = R12801 && R12760 = 0 && R12761 = R12801 && R12762 = 0 && R12763 = R12801 && R12764 = 0 && R12765 = R12801 && R12766 = 0 && R12767 = R12801 && R12768 = 0 && R12769 = R12801 && R12770 = 0 && R12771 = R12801 && R12772 = 0 && R12773 = R12801 && R12774 = 0 && R12775 = R12801 && R12776 = 0 && R12777 = R12801 && R12778 = 0 && R12779 = R12801 && R12780 = 0 && R12781 = R12801 && R12782 = 0 && R12783 = R12801 && R12784 = 0 && R12785 = R12801 && R12786 = 0 && R12787 = R12801 && R12788 = 0 && R12789 = R12801 && R12790 = 0 && R12791 = R12801 && R12792 = 0 && R12793 = R12801 && R12794 = 0 && R12795 = R12801 && R12796 = 0 && R12797 = R12801 && R12798 = 0 && R12799 = R12801 && R12800 = 0 && -1 < R1 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R11535 + -1*R11533 - R53 < 1 && 0 < R12801 && (R1 != 0 || R17 = 0 || (R12702 = 0 && R12703 = 0)) && (R1 != 0 || R17 = 0 || (R12704 = 0 && R12705 = 0)) && (R1 != 0 || R17 = 0 || (R12706 = 0 && R12707 = 0)) && (R1 != 0 || R17 = 0 || (R12708 = 0 && R12709 = 0)) && (R1 != 0 || R17 = 0 || (R12710 = 0 && R12711 = 0)) && (R1 != 0 || R17 = 0 || (R12712 = 0 && R12713 = 0)) && (R1 != 0 || R17 = 0 || (R12714 = 0 && R12715 = 0)) && (R1 != 0 || R17 = 0 || (R12716 = 0 && R12717 = 0)) && (R1 != 0 || R17 = 0 || (R12718 = 0 && R12719 = 0)) && (R1 != 0 || R17 = 0 || (R12720 = 0 && R12721 = 0)) && (R48 + R11531 + R11528 != 0 || ((R42 + R11524 + R11522 != 0 || R43 + R11525 + R11523 + -1*R11535 + -1*R11533 - R53 = 0 || R53 + R11535 + R11533 < 1) && (R42 + R11524 + R11522 = 0 || R53 + R11535 + R11533 < 1))) && (R48 + R11531 + R11528 != 0 || ((R46 + R11529 + R11526 != 0 || R47 + R11530 + R11527 + -1*R11535 + -1*R11533 - R53 = 0 || R53 + R11535 + R11533 < 1) && (R46 + R11529 + R11526 = 0 || R53 + R11535 + R11533 < 1))) && (R12702 != 0 || R1 = R12703 || R1 < 1) && (R12704 != 0 || R1 = R12705 || R1 < 1) && (R12706 != 0 || R1 = R12707 || R1 < 1) && (R12708 != 0 || R1 = R12709 || R1 < 1) && (R12710 != 0 || R1 = R12711 || R1 < 1) && (R12712 != 0 || R1 = R12713 || R1 < 1) && (R12714 != 0 || R1 = R12715 || R1 < 1) && (R12716 != 0 || R1 = R12717 || R1 < 1) && (R12718 != 0 || R1 = R12719 || R1 < 1) && (R12720 != 0 || R1 = R12721 || R1 < 1) && (R18 = 0 || (R12740 = 0 && R12741 = 0)) && (R18 = 0 || (R12744 = 0 && R12745 = 0)) && (R18 = 0 || (R12746 = 0 && R12747 = 0)) && (R18 = 0 || (R12750 = 0 && R12751 = 0)) && (R19 = 0 || (R12722 = 0 && R12723 = 0)) && (R19 = 0 || (R12724 = 0 && R12725 = 0)) && (R19 = 0 || (R12726 = 0 && R12727 = 0)) && (R19 = 0 || (R12728 = 0 && R12729 = 0)) && (R19 = 0 || (R12730 = 0 && R12731 = 0)) && (R19 = 0 || (R12732 = 0 && R12733 = 0)) && (R19 = 0 || (R12734 = 0 && R12735 = 0)) && (R19 = 0 || (R12736 = 0 && R12737 = 0)) && (R19 = 0 || (R12738 = 0 && R12739 = 0)) && (R48 + R11531 + R11528 = 0 || (R42 + R11524 + R11522 = 0 && R43 + R11525 + R11523 + -1*R11535 + -1*R11533 - R53 = 0)) && (R48 + R11531 + R11528 = 0 || (R46 + R11529 + R11526 = 0 && R47 + R11530 + R11527 + -1*R11535 + -1*R11533 - R53 = 0)) && (R58 + R12385 + R12382 = 0 || (R56 + R12383 + R12380 = 0 && R57 + R12384 + R12381 = 0)) && (R58 + R12385 + R12382 = 0 || (R62 + R12700 + R12698 = 0 && R63 + R12701 + R12699 = 0)) && (R12702 = 0 || R1 < 1) && (R12704 = 0 || R1 < 1) && (R12706 = 0 || R1 < 1) && (R12708 = 0 || R1 < 1) && (R12710 = 0 || R1 < 1) && (R12712 = 0 || R1 < 1) && (R12714 = 0 || R1 < 1) && (R12716 = 0 || R1 < 1) && (R12718 = 0 || R1 < 1) && (R12720 = 0 || R1 < 1);
// End of Parikh automata intersection problem
