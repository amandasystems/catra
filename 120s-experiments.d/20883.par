// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R12, R1350, R1351, R1352, R1353, R17, R1776, R1777, R1778, R1779, R1780, R1781, R1782, R1783, R1784, R1785, R1786, R1787, R1788, R1789, R1790, R1791, R1792, R1793, R1794, R1795, R1796, R1797, R1798, R1799, R18, R1800, R1801, R1802, R1803, R1804, R1805, R1806, R1807, R1808, R1809, R1810, R1811, R1812, R1813, R1814, R1815, R1816, R1817, R1818, R1819, R1820, R1821, R1822, R1823, R1824, R1825, R1826, R1827, R1828, R1829, R1830, R1831, R1832, R1833, R1834, R1835, R1836, R1837, R1838, R1839, R1840, R1841, R1842, R1843, R1844, R1845, R1846, R1847, R1848, R1849, R1850, R1851, R1852, R1853, R1854, R1855, R1856, R1857, R1858, R1859, R1860, R1861, R1862, R1863, R1864, R1865, R1866, R1867, R1868, R1869, R1870, R1871, R1872, R1873, R1874, R1875, R1876, R1877, R1878, R1879, R1880, R1881, R1882, R1883, R1884, R1885, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R70, R71, R72, R73, R74, R75, R76, R77, R78, R79, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 72];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [73, 73];
  s0 -> s1 [74, 65535];
  s1 -> s1 [0, 72];
  s1 -> s2 [73, 73];
  s1 -> s1 [74, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s1 [0, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R25 += 1 };
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R1806 += 1, R1807 += 1 };
  s0 -> s1 [0, 65535] { R1807 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R1807 += 1, R19 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 72] { R1809 += 1 };
  s0 -> s0 [0, 65535] { R1808 += 1, R1809 += 1 };
  s0 -> s2 [73, 73] { R1809 += 1 };
  s0 -> s3 [73, 73] { R1809 += 1 };
  s0 -> s1 [82, 65535] { R1809 += 1 };
  s1 -> s1 [0, 72] { R1809 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R1809 += 1 };
  s1 -> s3 [73, 73] { R1809 += 1 };
  s1 -> s1 [82, 65535] { R1809 += 1 };
  s2 -> s2 [0, 73] { R1809 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [82, 65535] { R1809 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 72] { R1811 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R1810 += 1, R1811 += 1 };
  s0 -> s2 [73, 73] { R1811 += 1, R38 += 1 };
  s0 -> s3 [73, 73] { R1811 += 1, R38 += 1 };
  s0 -> s1 [74, 65535] { R1811 += 1, R38 += 1 };
  s1 -> s1 [0, 72] { R1811 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R1811 += 1, R38 += 1 };
  s1 -> s3 [73, 73] { R1811 += 1, R38 += 1 };
  s1 -> s1 [74, 65535] { R1811 += 1, R38 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1811 += 1, R38 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 72] { R1813 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R1812 += 1, R1813 += 1 };
  s0 -> s2 [73, 73] { R1813 += 1, R40 += 1 };
  s0 -> s3 [73, 73] { R1813 += 1, R40 += 1 };
  s0 -> s1 [74, 65535] { R1813 += 1, R40 += 1 };
  s1 -> s1 [0, 72] { R1813 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R1813 += 1, R40 += 1 };
  s1 -> s3 [73, 73] { R1813 += 1, R40 += 1 };
  s1 -> s1 [74, 65535] { R1813 += 1, R40 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1813 += 1, R40 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 72] { R1815 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R1814 += 1, R1815 += 1 };
  s0 -> s2 [73, 73] { R1815 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [73, 73] { R1815 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [74, 65535] { R1815 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 72] { R1815 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R1815 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [73, 73] { R1815 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [74, 65535] { R1815 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1815 += 1, R42 += 1, R43 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 72] { R1817 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R1816 += 1, R1817 += 1 };
  s0 -> s2 [73, 73] { R1817 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [73, 73] { R1817 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [74, 65535] { R1817 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 72] { R1817 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R1817 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [73, 73] { R1817 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [74, 65535] { R1817 += 1, R46 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1817 += 1, R46 += 1, R47 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 72] { R1819 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R1818 += 1, R1819 += 1 };
  s0 -> s2 [73, 73] { R1819 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [73, 73] { R1819 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [74, 65535] { R1819 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 72] { R1819 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R1819 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [73, 73] { R1819 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [74, 65535] { R1819 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1819 += 1, R52 += 1, R53 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 72] { R1821 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R1820 += 1, R1821 += 1 };
  s0 -> s2 [73, 73] { R1821 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [73, 73] { R1821 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [74, 65535] { R1821 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 72] { R1821 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R1821 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [73, 73] { R1821 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [74, 65535] { R1821 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535] { R1821 += 1, R56 += 1, R57 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 72] { R1823 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R1822 += 1, R1823 += 1 };
  s0 -> s2 [73, 73] { R1823 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [73, 73] { R1823 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [74, 65535] { R1823 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 72] { R1823 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R1823 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [73, 73] { R1823 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [74, 65535] { R1823 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R1823 += 1, R62 += 1, R63 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 72] { R1843 += 1 };
  s0 -> s0 [0, 65535] { R1842 += 1, R1843 += 1 };
  s0 -> s2 [73, 73] { R1843 += 1 };
  s0 -> s1 [74, 65535] { R1843 += 1 };
  s1 -> s1 [0, 72] { R1843 += 1 };
  s1 -> s2 [73, 73] { R1843 += 1 };
  s1 -> s1 [74, 65535] { R1843 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1843 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R1845 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R1844 += 1, R1845 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R1845 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 72] { R1847 += 1 };
  s0 -> s0 [0, 65535] { R1846 += 1, R1847 += 1 };
  s0 -> s2 [0, 65535] { R1847 += 1, R8 += 1 };
  s0 -> s3 [73, 73] { R1847 += 1 };
  s0 -> s1 [74, 65535] { R1847 += 1 };
  s1 -> s1 [0, 72] { R1847 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [73, 73] { R1847 += 1 };
  s1 -> s1 [74, 65535] { R1847 += 1 };
  s2 -> s1 [0, 72] { R1847 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1847 += 1, R8 += 1 };
  s2 -> s3 [73, 73] { R1847 += 1 };
  s2 -> s1 [74, 65535] { R1847 += 1 };
  s3 -> s3 [0, 65535] { R1847 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 72] { R1849 += 1, R1787 += 1 };
  s0 -> s2 [0, 65535] { R1849 += 1, R1786 += 1, R1787 += 1 };
  s0 -> s0 [0, 65535] { R1848 += 1, R1849 += 1 };
  s0 -> s1 [74, 65535] { R1849 += 1, R1787 += 1 };
  s1 -> s1 [0, 72] { R1849 += 1, R1787 += 1 };
  s1 -> s1 [0, 65535] { R1849 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [74, 65535] { R1849 += 1, R1787 += 1 };
  s2 -> s1 [0, 72] { R1849 += 1, R1787 += 1 };
  s2 -> s2 [0, 65535] { R1849 += 1, R1786 += 1, R1787 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [74, 65535] { R1849 += 1, R1787 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R1851 += 1, R1788 += 1, R1789 += 1 };
  s0 -> s2 [0, 65535] { R1851 += 1, R1789 += 1, R17 += 1 };
  s0 -> s0 [0, 65535] { R1850 += 1, R1851 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1851 += 1, R1788 += 1, R1789 += 1 };
  s1 -> s2 [0, 65535] { R1851 += 1, R1789 += 1, R17 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R1851 += 1 };
  s2 -> s2 [0, 65535] { R1851 += 1, R1789 += 1, R17 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1851 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 73] { R1853 += 1, R1791 += 1 };
  s0 -> s2 [0, 65535] { R1853 += 1, R1790 += 1, R1791 += 1 };
  s0 -> s0 [0, 65535] { R1852 += 1, R1853 += 1 };
  s0 -> s1 [81, 65535] { R1853 += 1, R1791 += 1 };
  s1 -> s1 [0, 73] { R1853 += 1, R1791 += 1 };
  s1 -> s1 [0, 65535] { R1853 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [81, 65535] { R1853 += 1, R1791 += 1 };
  s2 -> s1 [0, 73] { R1853 += 1, R1791 += 1 };
  s2 -> s2 [0, 65535] { R1853 += 1, R1790 += 1, R1791 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [81, 65535] { R1853 += 1, R1791 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s0 [0, 65535] { R1854 += 1, R1855 += 1 };
  s0 -> s1 [0, 65535] { R1855 += 1, R1792 += 1, R1793 += 1 };
  s0 -> s2 [0, 65535] { R1855 += 1, R1793 += 1, R67 += 1 };
  s1 -> s1 [0, 65535] { R1855 += 1, R1792 += 1, R1793 += 1 };
  s1 -> s2 [0, 65535] { R1855 += 1, R1793 += 1, R67 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R1855 += 1 };
  s2 -> s2 [0, 65535] { R1855 += 1, R1793 += 1, R67 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1855 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 80] { R1857 += 1, R1795 += 1 };
  s0 -> s0 [0, 65535] { R1856 += 1, R1857 += 1 };
  s0 -> s2 [0, 65535] { R1857 += 1, R1795 += 1, R69 += 1 };
  s0 -> s3 [0, 65535] { R1857 += 1, R1794 += 1, R1795 += 1 };
  s0 -> s1 [82, 65535] { R1857 += 1, R1795 += 1 };
  s1 -> s1 [0, 80] { R1857 += 1, R1795 += 1 };
  s1 -> s1 [0, 65535] { R1857 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [82, 65535] { R1857 += 1, R1795 += 1 };
  s2 -> s1 [0, 80] { R1857 += 1, R1795 += 1 };
  s2 -> s2 [0, 65535] { R1857 += 1, R1795 += 1, R69 += 1 };
  s2 -> s5 [0, 65535] { R1857 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [82, 65535] { R1857 += 1, R1795 += 1 };
  s3 -> s1 [0, 80] { R1857 += 1, R1795 += 1 };
  s3 -> s2 [0, 65535] { R1857 += 1, R1795 += 1, R69 += 1 };
  s3 -> s3 [0, 65535] { R1857 += 1, R1794 += 1, R1795 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [82, 65535] { R1857 += 1, R1795 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1857 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 80] { R1859 += 1, R1797 += 1, R73 += 1 };
  s0 -> s2 [0, 65535] { R1859 += 1, R1796 += 1, R1797 += 1 };
  s0 -> s0 [0, 65535] { R1858 += 1, R1859 += 1 };
  s0 -> s3 [0, 65535] { R1859 += 1, R1797 += 1, R72 += 1, R73 += 1 };
  s0 -> s1 [82, 65535] { R1859 += 1, R1797 += 1, R73 += 1 };
  s1 -> s1 [0, 80] { R1859 += 1, R1797 += 1, R73 += 1 };
  s1 -> s1 [0, 65535] { R1859 += 1, R1797 += 1 };
  s1 -> s4 [0, 65535] { R1859 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [82, 65535] { R1859 += 1, R1797 += 1, R73 += 1 };
  s2 -> s1 [0, 80] { R1859 += 1, R1797 += 1, R73 += 1 };
  s2 -> s2 [0, 65535] { R1859 += 1, R1796 += 1, R1797 += 1 };
  s2 -> s3 [0, 65535] { R1859 += 1, R1797 += 1, R72 += 1, R73 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [82, 65535] { R1859 += 1, R1797 += 1, R73 += 1 };
  s3 -> s1 [0, 80] { R1859 += 1, R1797 += 1, R73 += 1 };
  s3 -> s3 [0, 65535] { R1859 += 1, R1797 += 1, R72 += 1, R73 += 1 };
  s3 -> s4 [0, 65535] { R1859 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [82, 65535] { R1859 += 1, R1797 += 1, R73 += 1 };
  s4 -> s4 [0, 65535] { R1859 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R1861 += 1, R1799 += 1, R78 += 1, R79 += 1 };
  s0 -> s0 [0, 65535] { R1860 += 1, R1861 += 1 };
  s0 -> s2 [0, 65535] { R1861 += 1, R1798 += 1, R1799 += 1 };
  s0 -> s3 [0, 65535] { R1861 += 1, R1799 += 1, R77 += 1, R78 += 1 };
  s1 -> s4 [0, 65535] { R1861 += 1 };
  s1 -> s1 [0, 65535] { R1861 += 1, R1799 += 1, R78 += 1, R79 += 1 };
  s1 -> s6 [0, 65535] { R1861 += 1, R1799 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R1861 += 1, R1799 += 1, R78 += 1, R79 += 1 };
  s2 -> s2 [0, 65535] { R1861 += 1, R1798 += 1, R1799 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R1861 += 1, R1799 += 1, R77 += 1, R78 += 1 };
  s3 -> s4 [0, 65535] { R1861 += 1 };
  s3 -> s1 [0, 65535] { R1861 += 1, R1799 += 1, R78 += 1, R79 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R1861 += 1, R1799 += 1, R77 += 1, R78 += 1 };
  s4 -> s4 [0, 65535] { R1861 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R1861 += 1 };
  s6 -> s6 [0, 65535] { R1861 += 1, R1799 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 81] { R1863 += 1, R1801 += 1, R1353 += 1 };
  s0 -> s2 [0, 65535] { R1863 += 1, R1801 += 1, R1352 += 1, R1353 += 1 };
  s0 -> s0 [0, 65535] { R1862 += 1, R1863 += 1 };
  s0 -> s3 [0, 65535] { R1863 += 1, R1800 += 1, R1801 += 1 };
  s0 -> s4 [85, 85] { R1863 += 1, R1801 += 1, R1353 += 1 };
  s0 -> s1 [86, 65535] { R1863 += 1, R1801 += 1, R1353 += 1 };
  s1 -> s1 [0, 81] { R1863 += 1, R1801 += 1, R1353 += 1 };
  s1 -> s4 [85, 85] { R1863 += 1, R1801 += 1, R1353 += 1 };
  s1 -> s1 [86, 65535] { R1863 += 1, R1801 += 1, R1353 += 1 };
  s2 -> s1 [0, 81] { R1863 += 1, R1801 += 1, R1353 += 1 };
  s2 -> s2 [0, 65535] { R1863 += 1, R1801 += 1, R1352 += 1, R1353 += 1 };
  s2 -> s4 [85, 85] { R1863 += 1, R1801 += 1, R1353 += 1 };
  s2 -> s1 [86, 65535] { R1863 += 1, R1801 += 1, R1353 += 1 };
  s3 -> s1 [0, 81] { R1863 += 1, R1801 += 1, R1353 += 1 };
  s3 -> s2 [0, 65535] { R1863 += 1, R1801 += 1, R1352 += 1, R1353 += 1 };
  s3 -> s3 [0, 65535] { R1863 += 1, R1800 += 1, R1801 += 1 };
  s3 -> s4 [85, 85] { R1863 += 1, R1801 += 1, R1353 += 1 };
  s3 -> s1 [86, 65535] { R1863 += 1, R1801 += 1, R1353 += 1 };
  s4 -> s4 [0, 81] { R1863 += 1, R1801 += 1, R1353 += 1 };
  s4 -> s5 [0, 65535] { R1863 += 1 };
  s4 -> s4 [0, 65535] { R1863 += 1, R1801 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [85, 65535] { R1863 += 1, R1801 += 1, R1353 += 1 };
  s5 -> s5 [0, 65535] { R1863 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s4, s5, s6;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R1865 += 1, R1803 += 1, R1780 += 1, R1781 += 1 };
  s0 -> s2 [0, 65535] { R1865 += 1, R1803 += 1 };
  s0 -> s3 [0, 65535] { R1865 += 1, R1802 += 1, R1803 += 1 };
  s0 -> s0 [0, 65535] { R1864 += 1, R1865 += 1 };
  s1 -> s1 [0, 65535] { R1865 += 1, R1803 += 1, R1780 += 1, R1781 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R1865 += 1, R1803 += 1 };
  s1 -> s5 [0, 65535] { R1865 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1865 += 1, R1803 += 1 };
  s2 -> s5 [0, 65535] { R1865 += 1 };
  s3 -> s1 [0, 65535] { R1865 += 1, R1803 += 1, R1780 += 1, R1781 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R1865 += 1, R1803 += 1 };
  s3 -> s3 [0, 65535] { R1865 += 1, R1802 += 1, R1803 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1865 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 80] { R1867 += 1, R1805 += 1, R1785 += 1 };
  s0 -> s2 [0, 65535] { R1867 += 1, R1804 += 1, R1805 += 1 };
  s0 -> s3 [0, 65535] { R1867 += 1, R1805 += 1, R1784 += 1, R1785 += 1 };
  s0 -> s0 [0, 65535] { R1866 += 1, R1867 += 1 };
  s0 -> s4 [81, 81] { R1867 += 1, R1805 += 1, R1785 += 1 };
  s0 -> s5 [81, 81] { R1867 += 1, R1805 += 1, R1785 += 1 };
  s0 -> s1 [86, 65535] { R1867 += 1, R1805 += 1, R1785 += 1 };
  s1 -> s1 [0, 80] { R1867 += 1, R1805 += 1, R1785 += 1 };
  s1 -> s6 [0, 65535] { R1867 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s1 [0, 65535] { R1867 += 1, R1805 += 1 };
  s1 -> s4 [81, 81] { R1867 += 1, R1805 += 1, R1785 += 1 };
  s1 -> s5 [81, 81] { R1867 += 1, R1805 += 1, R1785 += 1 };
  s1 -> s1 [86, 65535] { R1867 += 1, R1805 += 1, R1785 += 1 };
  s2 -> s1 [0, 80] { R1867 += 1, R1805 += 1, R1785 += 1 };
  s2 -> s2 [0, 65535] { R1867 += 1, R1804 += 1, R1805 += 1 };
  s2 -> s3 [0, 65535] { R1867 += 1, R1805 += 1, R1784 += 1, R1785 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s4 [81, 81] { R1867 += 1, R1805 += 1, R1785 += 1 };
  s2 -> s5 [81, 81] { R1867 += 1, R1805 += 1, R1785 += 1 };
  s2 -> s1 [86, 65535] { R1867 += 1, R1805 += 1, R1785 += 1 };
  s3 -> s1 [0, 80] { R1867 += 1, R1805 += 1, R1785 += 1 };
  s3 -> s3 [0, 65535] { R1867 += 1, R1805 += 1, R1784 += 1, R1785 += 1 };
  s3 -> s6 [0, 65535] { R1867 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s4 [81, 81] { R1867 += 1, R1805 += 1, R1785 += 1 };
  s3 -> s5 [81, 81] { R1867 += 1, R1805 += 1, R1785 += 1 };
  s3 -> s1 [86, 65535] { R1867 += 1, R1805 += 1, R1785 += 1 };
  s4 -> s4 [0, 65535] { R1867 += 1, R1805 += 1 };
  s4 -> s6 [0, 65535] { R1867 += 1 };
  s4 -> s7 [0, 65535];
  s5 -> s5 [0, 81] { R1867 += 1, R1805 += 1, R1785 += 1 };
  s5 -> s6 [0, 65535] { R1867 += 1 };
  s5 -> s7 [0, 65535];
  s5 -> s5 [0, 65535] { R1867 += 1, R1805 += 1 };
  s5 -> s5 [86, 65535] { R1867 += 1, R1805 += 1, R1785 += 1 };
  s6 -> s6 [0, 65535] { R1867 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R1869 += 1, R1824 += 1, R1825 += 1 };
  s0 -> s2 [0, 65535] { R1869 += 1, R1825 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R1868 += 1, R1869 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1869 += 1, R1824 += 1, R1825 += 1 };
  s1 -> s2 [0, 65535] { R1869 += 1, R1825 += 1, R18 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R1869 += 1 };
  s2 -> s2 [0, 65535] { R1869 += 1, R1825 += 1, R18 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1869 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 72] { R1871 += 1, R1827 += 1 };
  s0 -> s2 [0, 65535] { R1871 += 1, R1826 += 1, R1827 += 1 };
  s0 -> s0 [0, 65535] { R1870 += 1, R1871 += 1 };
  s0 -> s3 [73, 73] { R1871 += 1, R1827 += 1 };
  s0 -> s4 [73, 73] { R1871 += 1, R1827 += 1 };
  s0 -> s5 [81, 81] { R1871 += 1, R1827 += 1 };
  s0 -> s1 [82, 65535] { R1871 += 1, R1827 += 1 };
  s1 -> s1 [0, 72] { R1871 += 1, R1827 += 1 };
  s1 -> s3 [73, 73] { R1871 += 1, R1827 += 1 };
  s1 -> s4 [73, 73] { R1871 += 1, R1827 += 1 };
  s1 -> s5 [81, 81] { R1871 += 1, R1827 += 1 };
  s1 -> s1 [82, 65535] { R1871 += 1, R1827 += 1 };
  s2 -> s1 [0, 72] { R1871 += 1, R1827 += 1 };
  s2 -> s2 [0, 65535] { R1871 += 1, R1826 += 1, R1827 += 1 };
  s2 -> s3 [73, 73] { R1871 += 1, R1827 += 1 };
  s2 -> s4 [73, 73] { R1871 += 1, R1827 += 1 };
  s2 -> s5 [81, 81] { R1871 += 1, R1827 += 1 };
  s2 -> s1 [82, 65535] { R1871 += 1, R1827 += 1 };
  s4 -> s4 [0, 73] { R1871 += 1, R1827 += 1 };
  s4 -> s7 [81, 81] { R1871 += 1, R1827 += 1 };
  s4 -> s4 [82, 65535] { R1871 += 1, R1827 += 1 };
  s5 -> s5 [0, 72] { R1871 += 1, R1827 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R1871 += 1 };
  s5 -> s7 [73, 73] { R1871 += 1, R1827 += 1 };
  s5 -> s8 [73, 73] { R1871 += 1, R1827 += 1 };
  s5 -> s5 [81, 65535] { R1871 += 1, R1827 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 73] { R1871 += 1, R1827 += 1 };
  s7 -> s7 [0, 65535] { R1871 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [81, 65535] { R1871 += 1, R1827 += 1 };
  s8 -> s8 [0, 65535] { R1871 += 1 };
  s8 -> s6 [0, 65535];
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 72] { R1873 += 1, R1829 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R1872 += 1, R1873 += 1 };
  s0 -> s2 [0, 65535] { R1873 += 1, R1828 += 1, R1829 += 1 };
  s0 -> s3 [73, 73] { R1873 += 1, R1829 += 1, R66 += 1 };
  s0 -> s4 [73, 73] { R1873 += 1, R1829 += 1, R66 += 1 };
  s0 -> s1 [74, 65535] { R1873 += 1, R1829 += 1, R66 += 1 };
  s1 -> s1 [0, 72] { R1873 += 1, R1829 += 1, R66 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1873 += 1 };
  s1 -> s3 [73, 73] { R1873 += 1, R1829 += 1, R66 += 1 };
  s1 -> s4 [73, 73] { R1873 += 1, R1829 += 1, R66 += 1 };
  s1 -> s1 [74, 65535] { R1873 += 1, R1829 += 1, R66 += 1 };
  s2 -> s1 [0, 72] { R1873 += 1, R1829 += 1, R66 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1873 += 1, R1828 += 1, R1829 += 1 };
  s2 -> s3 [73, 73] { R1873 += 1, R1829 += 1, R66 += 1 };
  s2 -> s4 [73, 73] { R1873 += 1, R1829 += 1, R66 += 1 };
  s2 -> s1 [74, 65535] { R1873 += 1, R1829 += 1, R66 += 1 };
  s3 -> s3 [0, 65535] { R1873 += 1, R1829 += 1, R66 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R1873 += 1 };
  s4 -> s4 [0, 65535] { R1873 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1873 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 72] { R1875 += 1, R1831 += 1, R68 += 1 };
  s0 -> s0 [0, 65535] { R1874 += 1, R1875 += 1 };
  s0 -> s2 [0, 65535] { R1875 += 1, R1830 += 1, R1831 += 1 };
  s0 -> s3 [73, 73] { R1875 += 1, R1831 += 1, R68 += 1 };
  s0 -> s4 [73, 73] { R1875 += 1, R1831 += 1, R68 += 1 };
  s0 -> s1 [74, 65535] { R1875 += 1, R1831 += 1, R68 += 1 };
  s1 -> s1 [0, 72] { R1875 += 1, R1831 += 1, R68 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1875 += 1 };
  s1 -> s3 [73, 73] { R1875 += 1, R1831 += 1, R68 += 1 };
  s1 -> s4 [73, 73] { R1875 += 1, R1831 += 1, R68 += 1 };
  s1 -> s1 [74, 65535] { R1875 += 1, R1831 += 1, R68 += 1 };
  s2 -> s1 [0, 72] { R1875 += 1, R1831 += 1, R68 += 1 };
  s2 -> s2 [0, 65535] { R1875 += 1, R1830 += 1, R1831 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R1875 += 1, R1831 += 1, R68 += 1 };
  s2 -> s4 [73, 73] { R1875 += 1, R1831 += 1, R68 += 1 };
  s2 -> s1 [74, 65535] { R1875 += 1, R1831 += 1, R68 += 1 };
  s3 -> s6 [0, 65535] { R1875 += 1 };
  s3 -> s3 [0, 65535] { R1875 += 1, R1831 += 1, R68 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1875 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1875 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 72] { R1877 += 1, R1833 += 1, R70 += 1, R71 += 1 };
  s0 -> s2 [0, 65535] { R1877 += 1, R1832 += 1, R1833 += 1 };
  s0 -> s0 [0, 65535] { R1876 += 1, R1877 += 1 };
  s0 -> s3 [73, 73] { R1877 += 1, R1833 += 1, R70 += 1, R71 += 1 };
  s0 -> s4 [73, 73] { R1877 += 1, R1833 += 1, R70 += 1, R71 += 1 };
  s0 -> s1 [74, 65535] { R1877 += 1, R1833 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 72] { R1877 += 1, R1833 += 1, R70 += 1, R71 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R1877 += 1 };
  s1 -> s3 [73, 73] { R1877 += 1, R1833 += 1, R70 += 1, R71 += 1 };
  s1 -> s4 [73, 73] { R1877 += 1, R1833 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [74, 65535] { R1877 += 1, R1833 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [0, 72] { R1877 += 1, R1833 += 1, R70 += 1, R71 += 1 };
  s2 -> s2 [0, 65535] { R1877 += 1, R1832 += 1, R1833 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [73, 73] { R1877 += 1, R1833 += 1, R70 += 1, R71 += 1 };
  s2 -> s4 [73, 73] { R1877 += 1, R1833 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [74, 65535] { R1877 += 1, R1833 += 1, R70 += 1, R71 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R1877 += 1 };
  s4 -> s5 [0, 65535] { R1877 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R1877 += 1, R1833 += 1, R70 += 1, R71 += 1 };
  s5 -> s5 [0, 65535] { R1877 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 72] { R1879 += 1, R1835 += 1, R74 += 1, R75 += 1 };
  s0 -> s2 [0, 65535] { R1879 += 1, R1834 += 1, R1835 += 1 };
  s0 -> s0 [0, 65535] { R1878 += 1, R1879 += 1 };
  s0 -> s3 [73, 73] { R1879 += 1, R1835 += 1, R74 += 1, R75 += 1 };
  s0 -> s4 [73, 73] { R1879 += 1, R1835 += 1, R74 += 1, R75 += 1 };
  s0 -> s1 [74, 65535] { R1879 += 1, R1835 += 1, R74 += 1, R75 += 1 };
  s1 -> s1 [0, 72] { R1879 += 1, R1835 += 1, R74 += 1, R75 += 1 };
  s1 -> s1 [0, 65535] { R1879 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [73, 73] { R1879 += 1, R1835 += 1, R74 += 1, R75 += 1 };
  s1 -> s4 [73, 73] { R1879 += 1, R1835 += 1, R74 += 1, R75 += 1 };
  s1 -> s1 [74, 65535] { R1879 += 1, R1835 += 1, R74 += 1, R75 += 1 };
  s2 -> s1 [0, 72] { R1879 += 1, R1835 += 1, R74 += 1, R75 += 1 };
  s2 -> s2 [0, 65535] { R1879 += 1, R1834 += 1, R1835 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [73, 73] { R1879 += 1, R1835 += 1, R74 += 1, R75 += 1 };
  s2 -> s4 [73, 73] { R1879 += 1, R1835 += 1, R74 += 1, R75 += 1 };
  s2 -> s1 [74, 65535] { R1879 += 1, R1835 += 1, R74 += 1, R75 += 1 };
  s3 -> s3 [0, 65535] { R1879 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R1879 += 1 };
  s4 -> s4 [0, 65535] { R1879 += 1, R1835 += 1, R74 += 1, R75 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R1879 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 72] { R1881 += 1, R1837 += 1, R1350 += 1, R1351 += 1 };
  s0 -> s0 [0, 65535] { R1880 += 1, R1881 += 1 };
  s0 -> s2 [0, 65535] { R1881 += 1, R1836 += 1, R1837 += 1 };
  s0 -> s3 [73, 73] { R1881 += 1, R1837 += 1, R1350 += 1, R1351 += 1 };
  s0 -> s4 [73, 73] { R1881 += 1, R1837 += 1, R1350 += 1, R1351 += 1 };
  s0 -> s1 [74, 65535] { R1881 += 1, R1837 += 1, R1350 += 1, R1351 += 1 };
  s1 -> s1 [0, 72] { R1881 += 1, R1837 += 1, R1350 += 1, R1351 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1881 += 1 };
  s1 -> s3 [73, 73] { R1881 += 1, R1837 += 1, R1350 += 1, R1351 += 1 };
  s1 -> s4 [73, 73] { R1881 += 1, R1837 += 1, R1350 += 1, R1351 += 1 };
  s1 -> s1 [74, 65535] { R1881 += 1, R1837 += 1, R1350 += 1, R1351 += 1 };
  s2 -> s1 [0, 72] { R1881 += 1, R1837 += 1, R1350 += 1, R1351 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1881 += 1, R1836 += 1, R1837 += 1 };
  s2 -> s3 [73, 73] { R1881 += 1, R1837 += 1, R1350 += 1, R1351 += 1 };
  s2 -> s4 [73, 73] { R1881 += 1, R1837 += 1, R1350 += 1, R1351 += 1 };
  s2 -> s1 [74, 65535] { R1881 += 1, R1837 += 1, R1350 += 1, R1351 += 1 };
  s3 -> s3 [0, 65535] { R1881 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1881 += 1, R1837 += 1, R1350 += 1, R1351 += 1 };
  s4 -> s6 [0, 65535] { R1881 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1881 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 72] { R1883 += 1, R1839 += 1, R1776 += 1, R1777 += 1 };
  s0 -> s2 [0, 72] { R1883 += 1, R1839 += 1, R1777 += 1, R1778 += 1 };
  s0 -> s0 [0, 65535] { R1882 += 1, R1883 += 1 };
  s0 -> s3 [0, 65535] { R1883 += 1, R1838 += 1, R1839 += 1 };
  s0 -> s4 [73, 73] { R1883 += 1, R1839 += 1, R1776 += 1, R1777 += 1 };
  s0 -> s5 [73, 73] { R1883 += 1, R1839 += 1, R1777 += 1, R1778 += 1 };
  s0 -> s6 [73, 73] { R1883 += 1, R1839 += 1, R1777 += 1, R1778 += 1 };
  s0 -> s7 [73, 73] { R1883 += 1, R1839 += 1, R1776 += 1, R1777 += 1 };
  s0 -> s1 [74, 65535] { R1883 += 1, R1839 += 1, R1776 += 1, R1777 += 1 };
  s0 -> s2 [74, 65535] { R1883 += 1, R1839 += 1, R1777 += 1, R1778 += 1 };
  s1 -> s1 [0, 72] { R1883 += 1, R1839 += 1, R1776 += 1, R1777 += 1 };
  s1 -> s2 [0, 72] { R1883 += 1, R1839 += 1, R1777 += 1, R1778 += 1 };
  s1 -> s4 [73, 73] { R1883 += 1, R1839 += 1, R1776 += 1, R1777 += 1 };
  s1 -> s5 [73, 73] { R1883 += 1, R1839 += 1, R1777 += 1, R1778 += 1 };
  s1 -> s6 [73, 73] { R1883 += 1, R1839 += 1, R1777 += 1, R1778 += 1 };
  s1 -> s7 [73, 73] { R1883 += 1, R1839 += 1, R1776 += 1, R1777 += 1 };
  s1 -> s1 [74, 65535] { R1883 += 1, R1839 += 1, R1776 += 1, R1777 += 1 };
  s1 -> s2 [74, 65535] { R1883 += 1, R1839 += 1, R1777 += 1, R1778 += 1 };
  s2 -> s2 [0, 72] { R1883 += 1, R1839 += 1, R1777 += 1, R1778 += 1 };
  s2 -> s2 [0, 65535] { R1883 += 1 };
  s2 -> s9 [0, 65535];
  s2 -> s5 [73, 73] { R1883 += 1, R1839 += 1, R1777 += 1, R1778 += 1 };
  s2 -> s6 [73, 73] { R1883 += 1, R1839 += 1, R1777 += 1, R1778 += 1 };
  s2 -> s2 [74, 65535] { R1883 += 1, R1839 += 1, R1777 += 1, R1778 += 1 };
  s3 -> s1 [0, 72] { R1883 += 1, R1839 += 1, R1776 += 1, R1777 += 1 };
  s3 -> s2 [0, 72] { R1883 += 1, R1839 += 1, R1777 += 1, R1778 += 1 };
  s3 -> s3 [0, 65535] { R1883 += 1, R1838 += 1, R1839 += 1 };
  s3 -> s4 [73, 73] { R1883 += 1, R1839 += 1, R1776 += 1, R1777 += 1 };
  s3 -> s5 [73, 73] { R1883 += 1, R1839 += 1, R1777 += 1, R1778 += 1 };
  s3 -> s6 [73, 73] { R1883 += 1, R1839 += 1, R1777 += 1, R1778 += 1 };
  s3 -> s7 [73, 73] { R1883 += 1, R1839 += 1, R1776 += 1, R1777 += 1 };
  s3 -> s1 [74, 65535] { R1883 += 1, R1839 += 1, R1776 += 1, R1777 += 1 };
  s3 -> s2 [74, 65535] { R1883 += 1, R1839 += 1, R1777 += 1, R1778 += 1 };
  s5 -> s5 [0, 65535] { R1883 += 1 };
  s5 -> s9 [0, 65535];
  s6 -> s8 [0, 65535] { R1883 += 1 };
  s6 -> s9 [0, 65535];
  s6 -> s6 [0, 65535] { R1883 += 1, R1839 += 1, R1777 += 1, R1778 += 1 };
  s7 -> s6 [0, 65535] { R1883 += 1, R1839 += 1, R1777 += 1, R1778 += 1 };
  s7 -> s7 [0, 65535] { R1883 += 1, R1839 += 1, R1776 += 1, R1777 += 1 };
  s8 -> s8 [0, 65535] { R1883 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s8, s5, s2, s9, s6;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 72] { R1885 += 1, R1841 += 1, R1782 += 1, R1783 += 1 };
  s0 -> s2 [0, 65535] { R1885 += 1, R1840 += 1, R1841 += 1 };
  s0 -> s0 [0, 65535] { R1884 += 1, R1885 += 1 };
  s0 -> s3 [73, 73] { R1885 += 1, R1841 += 1, R1782 += 1, R1783 += 1 };
  s0 -> s4 [73, 73] { R1885 += 1, R1841 += 1, R1782 += 1, R1783 += 1 };
  s0 -> s1 [74, 65535] { R1885 += 1, R1841 += 1, R1782 += 1, R1783 += 1 };
  s1 -> s1 [0, 72] { R1885 += 1, R1841 += 1, R1782 += 1, R1783 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1885 += 1 };
  s1 -> s3 [73, 73] { R1885 += 1, R1841 += 1, R1782 += 1, R1783 += 1 };
  s1 -> s4 [73, 73] { R1885 += 1, R1841 += 1, R1782 += 1, R1783 += 1 };
  s1 -> s1 [74, 65535] { R1885 += 1, R1841 += 1, R1782 += 1, R1783 += 1 };
  s2 -> s1 [0, 72] { R1885 += 1, R1841 += 1, R1782 += 1, R1783 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1885 += 1, R1840 += 1, R1841 += 1 };
  s2 -> s3 [73, 73] { R1885 += 1, R1841 += 1, R1782 += 1, R1783 += 1 };
  s2 -> s4 [73, 73] { R1885 += 1, R1841 += 1, R1782 += 1, R1783 += 1 };
  s2 -> s1 [74, 65535] { R1885 += 1, R1841 += 1, R1782 += 1, R1783 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R1885 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1885 += 1, R1841 += 1, R1782 += 1, R1783 += 1 };
  s4 -> s6 [0, 65535] { R1885 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1885 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [113, 113];
  accepting s1;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
constraint R1 = R1801 && R2 = R1885 && R20 - R1885 = -1 && R21 = R1885 && R22 - R1885 = -1 && R23 = R1885 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R1353 + -1*R1351 - R53 = 0 && R52 + R1352 + R1350 = 0 && R1800 = 0 && R1826 = 0 && R1827 = 0 && R1838 = 0 && R1839 = 0 && R1842 = 0 && R1843 = R1885 && R1844 = 0 && R1845 = R1885 && R1846 = 0 && R1847 = R1885 && R1848 = 0 && R1849 = R1885 && R1850 = 0 && R1851 = R1885 && R1852 = 0 && R1853 = R1885 && R1854 = 0 && R1855 = R1885 && R1856 = 0 && R1857 = R1885 && R1858 = 0 && R1859 = R1885 && R1860 = 0 && R1861 = R1885 && R1862 = 0 && R1863 = R1885 && R1864 = 0 && R1865 = R1885 && R1866 = 0 && R1867 = R1885 && R1868 = 0 && R1869 = R1885 && R1870 = 0 && R1871 = R1885 && R1872 = 0 && R1873 = R1885 && R1874 = 0 && R1875 = R1885 && R1876 = 0 && R1877 = R1885 && R1878 = 0 && R1879 = R1885 && R1880 = 0 && R1881 = R1885 && R1882 = 0 && R1883 = R1885 && R1884 = 0 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R1353 + -1*R1351 - R53 < 1 && -1 < R1801 && 0 < R1885 && (R48 + R79 + R76 != 0 || ((R42 + R72 + R70 != 0 || R43 + R73 + R71 + -1*R1353 + -1*R1351 - R53 = 0 || R53 + R1353 + R1351 < 1) && (R42 + R72 + R70 = 0 || R53 + R1353 + R1351 < 1))) && (R48 + R79 + R76 != 0 || ((R46 + R77 + R74 != 0 || R47 + R78 + R75 + -1*R1353 + -1*R1351 - R53 = 0 || R53 + R1353 + R1351 < 1) && (R46 + R77 + R74 = 0 || R53 + R1353 + R1351 < 1))) && (R1786 != 0 || R1787 = R1801 || (R17 = 0 && R1801 = 0)) && (R1788 != 0 || R1789 = R1801 || (R17 = 0 && R1801 = 0)) && (R1790 != 0 || R1791 = R1801 || (R17 = 0 && R1801 = 0)) && (R1792 != 0 || R1793 = R1801 || (R17 = 0 && R1801 = 0)) && (R1794 != 0 || R1795 = R1801 || (R17 = 0 && R1801 = 0)) && (R1796 != 0 || R1797 = R1801 || (R17 = 0 && R1801 = 0)) && (R1798 != 0 || R1799 = R1801 || (R17 = 0 && R1801 = 0)) && (R1802 != 0 || R1801 = R1803 || (R17 = 0 && R1801 = 0)) && (R1804 != 0 || R1801 = R1805 || (R17 = 0 && R1801 = 0)) && (R18 = 0 || (R1824 = 0 && R1825 = 0)) && (R18 = 0 || (R1828 = 0 && R1829 = 0)) && (R18 = 0 || (R1830 = 0 && R1831 = 0)) && (R18 = 0 || (R1832 = 0 && R1833 = 0)) && (R18 = 0 || (R1834 = 0 && R1835 = 0)) && (R18 = 0 || (R1836 = 0 && R1837 = 0)) && (R18 = 0 || (R1840 = 0 && R1841 = 0)) && (R19 = 0 || (R1806 = 0 && R1807 = 0)) && (R19 = 0 || (R1808 = 0 && R1809 = 0)) && (R19 = 0 || (R1810 = 0 && R1811 = 0)) && (R19 = 0 || (R1812 = 0 && R1813 = 0)) && (R19 = 0 || (R1814 = 0 && R1815 = 0)) && (R19 = 0 || (R1816 = 0 && R1817 = 0)) && (R19 = 0 || (R1818 = 0 && R1819 = 0)) && (R19 = 0 || (R1820 = 0 && R1821 = 0)) && (R19 = 0 || (R1822 = 0 && R1823 = 0)) && (R48 + R79 + R76 = 0 || (R42 + R72 + R70 = 0 && R43 + R73 + R71 + -1*R1353 + -1*R1351 - R53 = 0)) && (R48 + R79 + R76 = 0 || (R46 + R77 + R74 = 0 && R47 + R78 + R75 + -1*R1353 + -1*R1351 - R53 = 0)) && (R58 + R1781 + R1778 = 0 || (R56 + R1779 + R1776 = 0 && R57 + R1780 + R1777 = 0)) && (R58 + R1781 + R1778 = 0 || (R62 + R1784 + R1782 = 0 && R63 + R1785 + R1783 = 0)) && (R1786 = 0 || (R17 = 0 && R1801 = 0)) && (R1788 = 0 || (R17 = 0 && R1801 = 0)) && (R1790 = 0 || (R17 = 0 && R1801 = 0)) && (R1792 = 0 || (R17 = 0 && R1801 = 0)) && (R1794 = 0 || (R17 = 0 && R1801 = 0)) && (R1796 = 0 || (R17 = 0 && R1801 = 0)) && (R1798 = 0 || (R17 = 0 && R1801 = 0)) && (R1802 = 0 || (R17 = 0 && R1801 = 0)) && (R1804 = 0 || (R17 = 0 && R1801 = 0));
// End of Parikh automata intersection problem
