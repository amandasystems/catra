// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R102, R103, R104, R105, R106, R107, R108, R109, R11, R110, R111, R112, R113, R114, R115, R116, R117, R118, R119, R12, R120, R121, R122, R123, R124, R125, R126, R127, R128, R129, R13, R130, R131, R132, R133, R134, R135, R136, R137, R138, R139, R14, R140, R141, R142, R143, R144, R145, R146, R147, R148, R149, R15, R150, R151, R152, R153, R154, R155, R156, R157, R158, R159, R16, R160, R161, R162, R163, R164, R165, R166, R167, R168, R169, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R31, R32, R33, R4, R5, R6, R7, R8;
synchronised {  // Automata constraining c5
automaton c5_0 {
  init s0;
  s0 -> s1 [99, 99];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s0 [0, 65535] { R30 += 1, R31 += 1 };
  s0 -> s1 [11, 11] { R31 += 1 };
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value2_4 {
  init s0;
  s0 -> s0 [0, 65535] { R32 += 1, R33 += 1 };
  s0 -> s1 [0, 65535] { R33 += 1, R7 += 1 };
  s1 -> s1 [0, 65535] { R33 += 1, R7 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s0 [0, 65535] { R136 += 1, R137 += 1 };
  s0 -> s1 [0, 65535] { R137 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R137 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s0 [0, 65535] { R138 += 1, R139 += 1 };
  s0 -> s1 [0, 65535] { R139 += 1, R22 += 1, R23 += 1 };
  s0 -> s2 [32, 32] { R139 += 1, R23 += 1 };
  s1 -> s1 [0, 65535] { R139 += 1, R22 += 1, R23 += 1 };
  s1 -> s2 [32, 32] { R139 += 1, R23 += 1 };
  s2 -> s2 [0, 65535] { R139 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R141 += 1, R25 += 1, R5 += 1 };
  s0 -> s2 [0, 65535] { R141 += 1, R24 += 1, R25 += 1 };
  s0 -> s0 [0, 65535] { R140 += 1, R141 += 1 };
  s1 -> s1 [0, 65535] { R141 += 1, R25 += 1, R5 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R141 += 1 };
  s2 -> s1 [0, 65535] { R141 += 1, R25 += 1, R5 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R141 += 1, R24 += 1, R25 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R141 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 8] { R143 += 1, R27 += 1 };
  s0 -> s2 [0, 65535] { R143 += 1, R26 += 1, R27 += 1 };
  s0 -> s0 [0, 65535] { R142 += 1, R143 += 1 };
  s0 -> s3 [9, 13] { R143 += 1, R27 += 1 };
  s0 -> s1 [14, 31] { R143 += 1, R27 += 1 };
  s0 -> s3 [32, 32] { R143 += 1, R27 += 1 };
  s0 -> s1 [33, 65535] { R143 += 1, R27 += 1 };
  s1 -> s1 [0, 65535] { R143 += 1, R27 += 1 };
  s1 -> s5 [0, 65535] { R143 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R143 += 1, R27 += 1 };
  s2 -> s2 [0, 65535] { R143 += 1, R26 += 1, R27 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R143 += 1, R27 += 1 };
  s2 -> s1 [14, 31] { R143 += 1, R27 += 1 };
  s2 -> s3 [32, 32] { R143 += 1, R27 += 1 };
  s2 -> s1 [33, 65535] { R143 += 1, R27 += 1 };
  s3 -> s1 [0, 65535] { R143 += 1, R27 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R143 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value2_9 {
  init s0;
  s0 -> s0 [0, 65535] { R144 += 1, R145 += 1 };
  s0 -> s1 [0, 65535] { R145 += 1, R29 += 1, R6 += 1 };
  s0 -> s2 [0, 65535] { R145 += 1, R28 += 1, R29 += 1 };
  s1 -> s4 [0, 65535] { R145 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R145 += 1, R29 += 1, R6 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R145 += 1, R29 += 1, R6 += 1 };
  s2 -> s2 [0, 65535] { R145 += 1, R28 += 1, R29 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R145 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 64] { R147 += 1, R113 += 1 };
  s0 -> s0 [0, 65535] { R146 += 1, R147 += 1 };
  s0 -> s2 [0, 65535] { R147 += 1, R112 += 1, R113 += 1 };
  s0 -> s3 [67, 67] { R147 += 1, R113 += 1 };
  s0 -> s1 [68, 65535] { R147 += 1, R113 += 1 };
  s1 -> s1 [0, 64] { R147 += 1, R113 += 1 };
  s1 -> s3 [67, 67] { R147 += 1, R113 += 1 };
  s1 -> s1 [68, 65535] { R147 += 1, R113 += 1 };
  s2 -> s1 [0, 64] { R147 += 1, R113 += 1 };
  s2 -> s2 [0, 65535] { R147 += 1, R112 += 1, R113 += 1 };
  s2 -> s3 [67, 67] { R147 += 1, R113 += 1 };
  s2 -> s1 [68, 65535] { R147 += 1, R113 += 1 };
  s3 -> s3 [0, 64] { R147 += 1, R113 += 1 };
  s3 -> s3 [0, 65535] { R147 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [67, 65535] { R147 += 1, R113 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 65535] { R149 += 1, R115 += 1, R0 += 1 };
  s0 -> s2 [0, 65535] { R149 += 1, R114 += 1, R115 += 1 };
  s0 -> s0 [0, 65535] { R148 += 1, R149 += 1 };
  s1 -> s1 [0, 65535] { R149 += 1, R115 += 1, R0 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R149 += 1 };
  s2 -> s1 [0, 65535] { R149 += 1, R115 += 1, R0 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R149 += 1, R114 += 1, R115 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R149 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 66] { R151 += 1, R117 += 1 };
  s0 -> s2 [0, 65535] { R151 += 1, R117 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R150 += 1, R151 += 1 };
  s0 -> s3 [0, 65535] { R151 += 1, R116 += 1, R117 += 1 };
  s0 -> s4 [67, 67] { R151 += 1, R117 += 1 };
  s0 -> s1 [68, 65535] { R151 += 1, R117 += 1 };
  s1 -> s1 [0, 66] { R151 += 1, R117 += 1 };
  s1 -> s1 [0, 65535] { R151 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s4 [67, 67] { R151 += 1, R117 += 1 };
  s1 -> s1 [68, 65535] { R151 += 1, R117 += 1 };
  s2 -> s1 [0, 66] { R151 += 1, R117 += 1 };
  s2 -> s2 [0, 65535] { R151 += 1, R117 += 1, R8 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R151 += 1 };
  s2 -> s4 [67, 67] { R151 += 1, R117 += 1 };
  s2 -> s1 [68, 65535] { R151 += 1, R117 += 1 };
  s3 -> s1 [0, 66] { R151 += 1, R117 += 1 };
  s3 -> s2 [0, 65535] { R151 += 1, R117 += 1, R8 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R151 += 1, R116 += 1, R117 += 1 };
  s3 -> s4 [67, 67] { R151 += 1, R117 += 1 };
  s3 -> s1 [68, 65535] { R151 += 1, R117 += 1 };
  s4 -> s4 [0, 65535] { R151 += 1, R117 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R151 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 8] { R153 += 1, R119 += 1, R15 += 1 };
  s0 -> s2 [0, 65535] { R153 += 1, R118 += 1, R119 += 1 };
  s0 -> s3 [0, 65535] { R153 += 1, R119 += 1, R14 += 1, R15 += 1 };
  s0 -> s0 [0, 65535] { R152 += 1, R153 += 1 };
  s0 -> s4 [9, 13] { R153 += 1, R119 += 1, R15 += 1 };
  s0 -> s1 [14, 31] { R153 += 1, R119 += 1, R15 += 1 };
  s0 -> s4 [32, 32] { R153 += 1, R119 += 1, R15 += 1 };
  s0 -> s1 [33, 65535] { R153 += 1, R119 += 1, R15 += 1 };
  s1 -> s7 [0, 65535] { R153 += 1, R119 += 1 };
  s1 -> s1 [0, 65535] { R153 += 1, R119 += 1, R15 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R153 += 1 };
  s2 -> s1 [0, 8] { R153 += 1, R119 += 1, R15 += 1 };
  s2 -> s2 [0, 65535] { R153 += 1, R118 += 1, R119 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R153 += 1, R119 += 1, R14 += 1, R15 += 1 };
  s2 -> s4 [9, 13] { R153 += 1, R119 += 1, R15 += 1 };
  s2 -> s1 [14, 31] { R153 += 1, R119 += 1, R15 += 1 };
  s2 -> s4 [32, 32] { R153 += 1, R119 += 1, R15 += 1 };
  s2 -> s1 [33, 65535] { R153 += 1, R119 += 1, R15 += 1 };
  s3 -> s1 [0, 8] { R153 += 1, R119 += 1, R15 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R153 += 1, R119 += 1, R14 += 1, R15 += 1 };
  s3 -> s6 [0, 65535] { R153 += 1 };
  s3 -> s4 [9, 13] { R153 += 1, R119 += 1, R15 += 1 };
  s3 -> s1 [14, 31] { R153 += 1, R119 += 1, R15 += 1 };
  s3 -> s4 [32, 32] { R153 += 1, R119 += 1, R15 += 1 };
  s3 -> s1 [33, 65535] { R153 += 1, R119 += 1, R15 += 1 };
  s4 -> s1 [0, 65535] { R153 += 1, R119 += 1, R15 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R153 += 1 };
  s7 -> s7 [0, 65535] { R153 += 1, R119 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R153 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s0 [0, 65535] { R154 += 1, R155 += 1 };
  s0 -> s1 [0, 65535] { R155 += 1, R120 += 1, R121 += 1 };
  s0 -> s2 [0, 65535] { R155 += 1, R121 += 1, R16 += 1, R17 += 1 };
  s0 -> s3 [0, 65535] { R155 += 1, R121 += 1, R17 += 1, R3 += 1 };
  s1 -> s1 [0, 65535] { R155 += 1, R120 += 1, R121 += 1 };
  s1 -> s2 [0, 65535] { R155 += 1, R121 += 1, R16 += 1, R17 += 1 };
  s1 -> s3 [0, 65535] { R155 += 1, R121 += 1, R17 += 1, R3 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R155 += 1, R121 += 1, R16 += 1, R17 += 1 };
  s2 -> s4 [0, 65535] { R155 += 1 };
  s2 -> s3 [0, 65535] { R155 += 1, R121 += 1, R17 += 1, R3 += 1 };
  s2 -> s6 [0, 65535];
  s3 -> s4 [0, 65535] { R155 += 1 };
  s3 -> s3 [0, 65535] { R155 += 1, R121 += 1, R17 += 1, R3 += 1 };
  s3 -> s5 [0, 65535] { R155 += 1, R121 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R155 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s4 [0, 65535] { R155 += 1 };
  s5 -> s5 [0, 65535] { R155 += 1, R121 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 8] { R157 += 1, R123 += 1, R19 += 1 };
  s0 -> s0 [0, 65535] { R156 += 1, R157 += 1 };
  s0 -> s2 [0, 65535] { R157 += 1, R123 += 1, R18 += 1, R19 += 1 };
  s0 -> s3 [0, 65535] { R157 += 1, R122 += 1, R123 += 1 };
  s0 -> s4 [9, 13] { R157 += 1, R123 += 1, R19 += 1 };
  s0 -> s1 [14, 31] { R157 += 1, R123 += 1, R19 += 1 };
  s0 -> s4 [32, 32] { R157 += 1, R123 += 1, R19 += 1 };
  s0 -> s1 [33, 65535] { R157 += 1, R123 += 1, R19 += 1 };
  s1 -> s7 [0, 65535] { R157 += 1, R123 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R157 += 1, R123 += 1, R19 += 1 };
  s1 -> s6 [0, 65535] { R157 += 1 };
  s2 -> s1 [0, 8] { R157 += 1, R123 += 1, R19 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R157 += 1, R123 += 1, R18 += 1, R19 += 1 };
  s2 -> s6 [0, 65535] { R157 += 1 };
  s2 -> s4 [9, 13] { R157 += 1, R123 += 1, R19 += 1 };
  s2 -> s1 [14, 31] { R157 += 1, R123 += 1, R19 += 1 };
  s2 -> s4 [32, 32] { R157 += 1, R123 += 1, R19 += 1 };
  s2 -> s1 [33, 65535] { R157 += 1, R123 += 1, R19 += 1 };
  s3 -> s1 [0, 8] { R157 += 1, R123 += 1, R19 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R157 += 1, R123 += 1, R18 += 1, R19 += 1 };
  s3 -> s3 [0, 65535] { R157 += 1, R122 += 1, R123 += 1 };
  s3 -> s4 [9, 13] { R157 += 1, R123 += 1, R19 += 1 };
  s3 -> s1 [14, 31] { R157 += 1, R123 += 1, R19 += 1 };
  s3 -> s4 [32, 32] { R157 += 1, R123 += 1, R19 += 1 };
  s3 -> s1 [33, 65535] { R157 += 1, R123 += 1, R19 += 1 };
  s4 -> s1 [0, 65535] { R157 += 1, R123 += 1, R19 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R157 += 1 };
  s7 -> s7 [0, 65535] { R157 += 1, R123 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R157 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 65535] { R159 += 1, R124 += 1, R125 += 1 };
  s0 -> s2 [0, 65535] { R159 += 1, R125 += 1, R21 += 1, R4 += 1 };
  s0 -> s3 [0, 65535] { R159 += 1, R125 += 1, R20 += 1, R21 += 1 };
  s0 -> s0 [0, 65535] { R158 += 1, R159 += 1 };
  s1 -> s1 [0, 65535] { R159 += 1, R124 += 1, R125 += 1 };
  s1 -> s2 [0, 65535] { R159 += 1, R125 += 1, R21 += 1, R4 += 1 };
  s1 -> s3 [0, 65535] { R159 += 1, R125 += 1, R20 += 1, R21 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R159 += 1, R125 += 1, R21 += 1, R4 += 1 };
  s2 -> s4 [0, 65535] { R159 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R159 += 1, R125 += 1 };
  s3 -> s2 [0, 65535] { R159 += 1, R125 += 1, R21 += 1, R4 += 1 };
  s3 -> s3 [0, 65535] { R159 += 1, R125 += 1, R20 += 1, R21 += 1 };
  s3 -> s4 [0, 65535] { R159 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R159 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R159 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R159 += 1, R125 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 66] { R161 += 1, R127 += 1, R103 += 1 };
  s0 -> s0 [0, 65535] { R160 += 1, R161 += 1 };
  s0 -> s2 [0, 65535] { R161 += 1, R126 += 1, R127 += 1 };
  s0 -> s3 [0, 65535] { R161 += 1, R127 += 1, R102 += 1, R103 += 1 };
  s0 -> s1 [68, 65535] { R161 += 1, R127 += 1, R103 += 1 };
  s1 -> s1 [0, 66] { R161 += 1, R127 += 1, R103 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R161 += 1 };
  s1 -> s1 [0, 65535] { R161 += 1, R127 += 1 };
  s1 -> s1 [68, 65535] { R161 += 1, R127 += 1, R103 += 1 };
  s2 -> s1 [0, 66] { R161 += 1, R127 += 1, R103 += 1 };
  s2 -> s2 [0, 65535] { R161 += 1, R126 += 1, R127 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R161 += 1, R127 += 1, R102 += 1, R103 += 1 };
  s2 -> s1 [68, 65535] { R161 += 1, R127 += 1, R103 += 1 };
  s3 -> s1 [0, 66] { R161 += 1, R127 += 1, R103 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R161 += 1 };
  s3 -> s3 [0, 65535] { R161 += 1, R127 += 1, R102 += 1, R103 += 1 };
  s3 -> s1 [68, 65535] { R161 += 1, R127 += 1, R103 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R161 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R162 += 1, R163 += 1 };
  s0 -> s1 [0, 65535] { R163 += 1, R129 += 1, R104 += 1, R105 += 1 };
  s0 -> s2 [0, 65535] { R163 += 1, R128 += 1, R129 += 1 };
  s0 -> s3 [0, 65535] { R163 += 1, R129 += 1, R105 += 1, R12 += 1 };
  s1 -> s1 [0, 65535] { R163 += 1, R129 += 1, R104 += 1, R105 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R163 += 1, R129 += 1, R105 += 1, R12 += 1 };
  s1 -> s6 [0, 65535] { R163 += 1 };
  s2 -> s1 [0, 65535] { R163 += 1, R129 += 1, R104 += 1, R105 += 1 };
  s2 -> s2 [0, 65535] { R163 += 1, R128 += 1, R129 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R163 += 1, R129 += 1, R105 += 1, R12 += 1 };
  s3 -> s4 [0, 65535] { R163 += 1, R129 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R163 += 1, R129 += 1, R105 += 1, R12 += 1 };
  s3 -> s6 [0, 65535] { R163 += 1 };
  s4 -> s4 [0, 65535] { R163 += 1, R129 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R163 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R163 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 67] { R165 += 1, R131 += 1, R107 += 1 };
  s0 -> s2 [0, 65535] { R165 += 1, R131 += 1, R106 += 1, R107 += 1 };
  s0 -> s0 [0, 65535] { R164 += 1, R165 += 1 };
  s0 -> s3 [0, 65535] { R165 += 1, R130 += 1, R131 += 1 };
  s0 -> s1 [69, 65535] { R165 += 1, R131 += 1, R107 += 1 };
  s1 -> s1 [0, 67] { R165 += 1, R131 += 1, R107 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R165 += 1 };
  s1 -> s1 [0, 65535] { R165 += 1, R131 += 1 };
  s1 -> s1 [69, 65535] { R165 += 1, R131 += 1, R107 += 1 };
  s2 -> s1 [0, 67] { R165 += 1, R131 += 1, R107 += 1 };
  s2 -> s2 [0, 65535] { R165 += 1, R131 += 1, R106 += 1, R107 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R165 += 1 };
  s2 -> s1 [69, 65535] { R165 += 1, R131 += 1, R107 += 1 };
  s3 -> s1 [0, 67] { R165 += 1, R131 += 1, R107 += 1 };
  s3 -> s2 [0, 65535] { R165 += 1, R131 += 1, R106 += 1, R107 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R165 += 1, R130 += 1, R131 += 1 };
  s3 -> s1 [69, 65535] { R165 += 1, R131 += 1, R107 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R165 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 65535] { R167 += 1, R133 += 1, R109 += 1, R13 += 1 };
  s0 -> s0 [0, 65535] { R166 += 1, R167 += 1 };
  s0 -> s2 [0, 65535] { R167 += 1, R133 += 1, R108 += 1, R109 += 1 };
  s0 -> s3 [0, 65535] { R167 += 1, R132 += 1, R133 += 1 };
  s1 -> s1 [0, 65535] { R167 += 1, R133 += 1, R109 += 1, R13 += 1 };
  s1 -> s5 [0, 65535] { R167 += 1 };
  s1 -> s6 [0, 65535] { R167 += 1, R133 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R167 += 1, R133 += 1, R109 += 1, R13 += 1 };
  s2 -> s5 [0, 65535] { R167 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R167 += 1, R133 += 1, R108 += 1, R109 += 1 };
  s3 -> s1 [0, 65535] { R167 += 1, R133 += 1, R109 += 1, R13 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R167 += 1, R133 += 1, R108 += 1, R109 += 1 };
  s3 -> s3 [0, 65535] { R167 += 1, R132 += 1, R133 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R167 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R167 += 1 };
  s6 -> s6 [0, 65535] { R167 += 1, R133 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 66] { R169 += 1, R135 += 1, R111 += 1 };
  s0 -> s2 [0, 65535] { R169 += 1, R134 += 1, R135 += 1 };
  s0 -> s0 [0, 65535] { R168 += 1, R169 += 1 };
  s0 -> s3 [0, 65535] { R169 += 1, R135 += 1, R110 += 1, R111 += 1 };
  s0 -> s4 [67, 67] { R169 += 1, R135 += 1, R111 += 1 };
  s0 -> s5 [67, 67] { R169 += 1, R135 += 1, R111 += 1 };
  s0 -> s6 [69, 69] { R169 += 1, R135 += 1, R111 += 1 };
  s0 -> s1 [70, 65535] { R169 += 1, R135 += 1, R111 += 1 };
  s1 -> s1 [0, 66] { R169 += 1, R135 += 1, R111 += 1 };
  s1 -> s4 [67, 67] { R169 += 1, R135 += 1, R111 += 1 };
  s1 -> s5 [67, 67] { R169 += 1, R135 += 1, R111 += 1 };
  s1 -> s6 [69, 69] { R169 += 1, R135 += 1, R111 += 1 };
  s1 -> s1 [70, 65535] { R169 += 1, R135 += 1, R111 += 1 };
  s2 -> s1 [0, 66] { R169 += 1, R135 += 1, R111 += 1 };
  s2 -> s2 [0, 65535] { R169 += 1, R134 += 1, R135 += 1 };
  s2 -> s3 [0, 65535] { R169 += 1, R135 += 1, R110 += 1, R111 += 1 };
  s2 -> s4 [67, 67] { R169 += 1, R135 += 1, R111 += 1 };
  s2 -> s5 [67, 67] { R169 += 1, R135 += 1, R111 += 1 };
  s2 -> s6 [69, 69] { R169 += 1, R135 += 1, R111 += 1 };
  s2 -> s1 [70, 65535] { R169 += 1, R135 += 1, R111 += 1 };
  s3 -> s1 [0, 66] { R169 += 1, R135 += 1, R111 += 1 };
  s3 -> s3 [0, 65535] { R169 += 1, R135 += 1, R110 += 1, R111 += 1 };
  s3 -> s4 [67, 67] { R169 += 1, R135 += 1, R111 += 1 };
  s3 -> s5 [67, 67] { R169 += 1, R135 += 1, R111 += 1 };
  s3 -> s6 [69, 69] { R169 += 1, R135 += 1, R111 += 1 };
  s3 -> s1 [70, 65535] { R169 += 1, R135 += 1, R111 += 1 };
  s5 -> s5 [0, 67] { R169 += 1, R135 += 1, R111 += 1 };
  s5 -> s9 [69, 69] { R169 += 1, R135 += 1, R111 += 1 };
  s5 -> s5 [70, 65535] { R169 += 1, R135 += 1, R111 += 1 };
  s6 -> s6 [0, 66] { R169 += 1, R135 += 1, R111 += 1 };
  s6 -> s6 [0, 65535] { R169 += 1, R135 += 1 };
  s6 -> s7 [0, 65535];
  s6 -> s8 [0, 65535] { R169 += 1 };
  s6 -> s9 [67, 67] { R169 += 1, R135 += 1, R111 += 1 };
  s6 -> s10 [67, 67] { R169 += 1, R135 += 1, R111 += 1 };
  s6 -> s6 [69, 65535] { R169 += 1, R135 += 1, R111 += 1 };
  s7 -> s7 [0, 65535];
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R169 += 1 };
  s9 -> s9 [0, 67] { R169 += 1, R135 += 1, R111 += 1 };
  s9 -> s9 [0, 65535] { R169 += 1, R135 += 1 };
  s9 -> s7 [0, 65535];
  s9 -> s8 [0, 65535] { R169 += 1 };
  s9 -> s9 [69, 65535] { R169 += 1, R135 += 1, R111 += 1 };
  s10 -> s10 [0, 65535] { R169 += 1, R135 += 1 };
  s10 -> s7 [0, 65535];
  s10 -> s8 [0, 65535] { R169 += 1 };
  accepting s8, s9, s6, s7, s10;
};
};
constraint R0 = R107 && R1 - R135 = 1 && R2 = R169 && R14 - R107 = -1 && R15 = R107 && R16 - R107 = -1 && R17 = R107 && R18 = 0 && R19 = 1 && R20 = 0 && R21 = 1 && R22 = R135 && R23 - R135 = 1 && R24 = R135 && R25 - R135 = 1 && R26 = 0 && R27 = 1 && R28 = 0 && R29 = 1 && R30 = 0 && R31 = 1 && R32 = 0 && R33 = 1 && R102 = 0 && R103 = R107 && R104 = 0 && R105 = R107 && R106 = 0 && R110 = 0 && R111 = 0 && R112 = 0 && R113 = R135 && R114 = 0 && R115 = R135 && R116 = 0 && R117 = R135 && R118 = 0 && R119 = R135 && R120 = 0 && R121 = R135 && R122 = 0 && R123 = R135 && R124 = 0 && R125 = R135 && R126 = 0 && R127 = R135 && R128 = 0 && R129 = R135 && R130 = 0 && R131 = R135 && R132 = 0 && R133 = R135 && R134 = 0 && R136 = 1 && R137 = R169 && R138 = 1 && R139 = R169 && R140 = 1 && R141 = R169 && R142 = 1 && R143 = R169 && R144 = 1 && R145 = R169 && R146 = 1 && R147 = R169 && R148 = 1 && R149 = R169 && R150 = 1 && R151 = R169 && R152 = 1 && R153 = R169 && R154 = 1 && R155 = R169 && R156 = 1 && R157 = R169 && R158 = 1 && R159 = R169 && R160 = 1 && R161 = R169 && R162 = 1 && R163 = R169 && R164 = 1 && R165 = R169 && R166 = 1 && R167 = R169 && R168 = 1 && R8 < 1 && R11 < 1 && 0 < R107 && -1 < R135 && 0 < R169 && (R13 = 0 || (R108 = 0 && R109 = 0));
// End of Parikh automata intersection problem
