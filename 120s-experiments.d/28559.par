// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R163, R164, R2, R239, R240, R241, R242, R243, R244, R245, R246, R247, R248, R249, R250, R251, R252, R253, R254, R255, R256, R257, R258, R259, R260, R261, R262, R263, R264, R265, R266, R267, R268, R269, R270, R271, R272, R273, R274, R275, R276, R277, R278, R279, R280, R281, R282, R283, R284, R285, R286, R287, R288, R289, R290, R291, R292, R293, R294, R295, R296, R297, R298, R299, R3, R300, R301, R302, R303, R304, R305, R306, R307, R308, R309, R310, R311, R312, R4, R5, R6, R7, R9;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R7 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R286 += 1 };
  s0 -> s0 [0, 65535] { R285 += 1, R286 += 1 };
  s0 -> s2 [46, 46] { R286 += 1 };
  s0 -> s3 [47, 47] { R286 += 1 };
  s0 -> s1 [48, 65535] { R286 += 1 };
  s1 -> s1 [0, 45] { R286 += 1 };
  s1 -> s2 [46, 46] { R286 += 1 };
  s1 -> s3 [47, 47] { R286 += 1 };
  s1 -> s1 [48, 65535] { R286 += 1 };
  s2 -> s1 [0, 45] { R286 += 1 };
  s2 -> s2 [46, 46] { R286 += 1 };
  s2 -> s3 [47, 47] { R286 += 1 };
  s2 -> s1 [48, 114] { R286 += 1 };
  s2 -> s8 [115, 115] { R286 += 1 };
  s2 -> s1 [116, 65535] { R286 += 1 };
  s3 -> s3 [0, 45] { R286 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R286 += 1 };
  s3 -> s3 [47, 65535] { R286 += 1 };
  s4 -> s3 [0, 45] { R286 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R286 += 1 };
  s4 -> s3 [47, 114] { R286 += 1 };
  s4 -> s5 [115, 115] { R286 += 1 };
  s4 -> s3 [116, 65535] { R286 += 1 };
  s5 -> s3 [0, 45] { R286 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R286 += 1 };
  s5 -> s3 [47, 110] { R286 += 1 };
  s5 -> s6 [111, 111] { R286 += 1 };
  s5 -> s3 [112, 65535] { R286 += 1 };
  s6 -> s3 [0, 45] { R286 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R286 += 1 };
  s6 -> s3 [47, 98] { R286 += 1 };
  s6 -> s7 [99, 99] { R286 += 1 };
  s6 -> s3 [100, 65535] { R286 += 1 };
  s7 -> s3 [0, 45] { R286 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R286 += 1 };
  s7 -> s3 [47, 106] { R286 += 1 };
  s7 -> s3 [108, 65535] { R286 += 1 };
  s8 -> s1 [0, 45] { R286 += 1 };
  s8 -> s2 [46, 46] { R286 += 1 };
  s8 -> s3 [47, 47] { R286 += 1 };
  s8 -> s1 [48, 110] { R286 += 1 };
  s8 -> s9 [111, 111] { R286 += 1 };
  s8 -> s1 [112, 65535] { R286 += 1 };
  s9 -> s1 [0, 45] { R286 += 1 };
  s9 -> s2 [46, 46] { R286 += 1 };
  s9 -> s3 [47, 47] { R286 += 1 };
  s9 -> s1 [48, 98] { R286 += 1 };
  s9 -> s10 [99, 99] { R286 += 1 };
  s9 -> s1 [100, 65535] { R286 += 1 };
  s10 -> s1 [0, 45] { R286 += 1 };
  s10 -> s2 [46, 46] { R286 += 1 };
  s10 -> s3 [47, 47] { R286 += 1 };
  s10 -> s1 [48, 106] { R286 += 1 };
  s10 -> s1 [108, 65535] { R286 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R288 += 1, R6 += 1 };
  s0 -> s0 [0, 65535] { R287 += 1, R288 += 1 };
  s1 -> s1 [0, 65535] { R288 += 1, R6 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R290 += 1, R164 += 1 };
  s0 -> s2 [0, 65535] { R290 += 1, R163 += 1, R164 += 1 };
  s0 -> s0 [0, 65535] { R289 += 1, R290 += 1 };
  s0 -> s3 [47, 47] { R290 += 1 };
  s0 -> s1 [48, 65535] { R290 += 1, R164 += 1 };
  s1 -> s1 [0, 46] { R290 += 1, R164 += 1 };
  s1 -> s3 [47, 47] { R290 += 1 };
  s1 -> s1 [48, 65535] { R290 += 1, R164 += 1 };
  s2 -> s1 [0, 46] { R290 += 1, R164 += 1 };
  s2 -> s2 [0, 65535] { R290 += 1, R163 += 1, R164 += 1 };
  s2 -> s3 [47, 47] { R290 += 1 };
  s2 -> s1 [48, 65535] { R290 += 1, R164 += 1 };
  s3 -> s3 [0, 65535] { R290 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 65535] { R292 += 1, R250 += 1, R3 += 1 };
  s0 -> s2 [0, 65535] { R292 += 1, R249 += 1, R250 += 1 };
  s0 -> s0 [0, 65535] { R291 += 1, R292 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R292 += 1, R250 += 1, R3 += 1 };
  s1 -> s4 [0, 65535] { R292 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R292 += 1, R250 += 1, R3 += 1 };
  s2 -> s2 [0, 65535] { R292 += 1, R249 += 1, R250 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R292 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 63] { R294 += 1, R266 += 1 };
  s0 -> s2 [0, 65535] { R294 += 1, R265 += 1, R266 += 1 };
  s0 -> s0 [0, 65535] { R293 += 1, R294 += 1 };
  s0 -> s3 [64, 64] { R294 += 1, R266 += 1 };
  s0 -> s1 [65, 65535] { R294 += 1, R266 += 1 };
  s1 -> s1 [0, 63] { R294 += 1, R266 += 1 };
  s1 -> s3 [64, 64] { R294 += 1, R266 += 1 };
  s1 -> s1 [65, 65535] { R294 += 1, R266 += 1 };
  s2 -> s1 [0, 63] { R294 += 1, R266 += 1 };
  s2 -> s2 [0, 65535] { R294 += 1, R265 += 1, R266 += 1 };
  s2 -> s3 [64, 64] { R294 += 1, R266 += 1 };
  s2 -> s1 [65, 65535] { R294 += 1, R266 += 1 };
  s3 -> s4 [0, 65535] { R294 += 1 };
  s3 -> s3 [0, 65535] { R294 += 1, R266 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R294 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R296 += 1, R267 += 1, R268 += 1 };
  s0 -> s0 [0, 65535] { R295 += 1, R296 += 1 };
  s0 -> s2 [0, 65535] { R296 += 1, R268 += 1, R5 += 1 };
  s1 -> s1 [0, 65535] { R296 += 1, R267 += 1, R268 += 1 };
  s1 -> s2 [0, 65535] { R296 += 1, R268 += 1, R5 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R296 += 1 };
  s2 -> s2 [0, 65535] { R296 += 1, R268 += 1, R5 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R296 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s0 [0, 65535] { R297 += 1, R298 += 1 };
  s0 -> s1 [0, 65535] { R298 += 1, R270 += 1, R248 += 1, R0 += 1 };
  s0 -> s2 [0, 65535] { R298 += 1, R270 += 1, R247 += 1, R248 += 1 };
  s0 -> s3 [0, 65535] { R298 += 1, R269 += 1, R270 += 1 };
  s1 -> s6 [0, 65535] { R298 += 1, R270 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R298 += 1 };
  s1 -> s1 [0, 65535] { R298 += 1, R270 += 1, R248 += 1, R0 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R298 += 1 };
  s2 -> s1 [0, 65535] { R298 += 1, R270 += 1, R248 += 1, R0 += 1 };
  s2 -> s2 [0, 65535] { R298 += 1, R270 += 1, R247 += 1, R248 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R298 += 1, R270 += 1, R248 += 1, R0 += 1 };
  s3 -> s2 [0, 65535] { R298 += 1, R270 += 1, R247 += 1, R248 += 1 };
  s3 -> s3 [0, 65535] { R298 += 1, R269 += 1, R270 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R298 += 1 };
  s6 -> s6 [0, 65535] { R298 += 1, R270 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R298 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 57] { R300 += 1, R272 += 1, R252 += 1 };
  s0 -> s0 [0, 65535] { R299 += 1, R300 += 1 };
  s0 -> s2 [0, 65535] { R300 += 1, R272 += 1, R251 += 1, R252 += 1 };
  s0 -> s3 [0, 65535] { R300 += 1, R271 += 1, R272 += 1 };
  s0 -> s4 [58, 58] { R300 += 1, R272 += 1, R252 += 1 };
  s0 -> s1 [59, 63] { R300 += 1, R272 += 1, R252 += 1 };
  s0 -> s1 [65, 65535] { R300 += 1, R272 += 1, R252 += 1 };
  s1 -> s1 [0, 57] { R300 += 1, R272 += 1, R252 += 1 };
  s1 -> s4 [58, 58] { R300 += 1, R272 += 1, R252 += 1 };
  s1 -> s1 [59, 63] { R300 += 1, R272 += 1, R252 += 1 };
  s1 -> s1 [65, 65535] { R300 += 1, R272 += 1, R252 += 1 };
  s2 -> s1 [0, 57] { R300 += 1, R272 += 1, R252 += 1 };
  s2 -> s2 [0, 65535] { R300 += 1, R272 += 1, R251 += 1, R252 += 1 };
  s2 -> s4 [58, 58] { R300 += 1, R272 += 1, R252 += 1 };
  s2 -> s1 [59, 63] { R300 += 1, R272 += 1, R252 += 1 };
  s2 -> s1 [65, 65535] { R300 += 1, R272 += 1, R252 += 1 };
  s3 -> s1 [0, 57] { R300 += 1, R272 += 1, R252 += 1 };
  s3 -> s2 [0, 65535] { R300 += 1, R272 += 1, R251 += 1, R252 += 1 };
  s3 -> s3 [0, 65535] { R300 += 1, R271 += 1, R272 += 1 };
  s3 -> s4 [58, 58] { R300 += 1, R272 += 1, R252 += 1 };
  s3 -> s1 [59, 63] { R300 += 1, R272 += 1, R252 += 1 };
  s3 -> s1 [65, 65535] { R300 += 1, R272 += 1, R252 += 1 };
  s4 -> s4 [0, 63] { R300 += 1, R272 += 1, R252 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R300 += 1 };
  s4 -> s4 [0, 65535] { R300 += 1, R272 += 1 };
  s4 -> s4 [65, 65535] { R300 += 1, R272 += 1, R252 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R300 += 1 };
  accepting s4, s5, s6;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65535] { R302 += 1, R274 += 1, R253 += 1, R254 += 1 };
  s0 -> s0 [0, 65535] { R301 += 1, R302 += 1 };
  s0 -> s2 [0, 65535] { R302 += 1, R274 += 1, R254 += 1, R4 += 1 };
  s0 -> s3 [0, 65535] { R302 += 1, R273 += 1, R274 += 1 };
  s1 -> s1 [0, 65535] { R302 += 1, R274 += 1, R253 += 1, R254 += 1 };
  s1 -> s6 [0, 65535] { R302 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R302 += 1, R274 += 1, R254 += 1, R4 += 1 };
  s2 -> s5 [0, 65535] { R302 += 1, R274 += 1 };
  s2 -> s6 [0, 65535] { R302 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R302 += 1, R274 += 1, R254 += 1, R4 += 1 };
  s3 -> s1 [0, 65535] { R302 += 1, R274 += 1, R253 += 1, R254 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R302 += 1, R274 += 1, R254 += 1, R4 += 1 };
  s3 -> s3 [0, 65535] { R302 += 1, R273 += 1, R274 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R302 += 1, R274 += 1 };
  s5 -> s6 [0, 65535] { R302 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R302 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 57] { R304 += 1, R276 += 1, R256 += 1, R10 += 1 };
  s0 -> s2 [0, 65535] { R304 += 1, R275 += 1, R276 += 1 };
  s0 -> s3 [0, 65535] { R304 += 1, R276 += 1, R255 += 1, R256 += 1 };
  s0 -> s0 [0, 65535] { R303 += 1, R304 += 1 };
  s0 -> s4 [0, 65535] { R304 += 1, R276 += 1, R256 += 1, R9 += 1, R10 += 1 };
  s0 -> s5 [58, 58] { R304 += 1, R276 += 1, R256 += 1 };
  s0 -> s1 [59, 65535] { R304 += 1, R276 += 1, R256 += 1, R10 += 1 };
  s1 -> s1 [0, 57] { R304 += 1, R276 += 1, R256 += 1, R10 += 1 };
  s1 -> s5 [58, 58] { R304 += 1, R276 += 1, R256 += 1 };
  s1 -> s1 [59, 65535] { R304 += 1, R276 += 1, R256 += 1, R10 += 1 };
  s2 -> s1 [0, 57] { R304 += 1, R276 += 1, R256 += 1, R10 += 1 };
  s2 -> s2 [0, 65535] { R304 += 1, R275 += 1, R276 += 1 };
  s2 -> s3 [0, 65535] { R304 += 1, R276 += 1, R255 += 1, R256 += 1 };
  s2 -> s4 [0, 65535] { R304 += 1, R276 += 1, R256 += 1, R9 += 1, R10 += 1 };
  s2 -> s5 [58, 58] { R304 += 1, R276 += 1, R256 += 1 };
  s2 -> s1 [59, 65535] { R304 += 1, R276 += 1, R256 += 1, R10 += 1 };
  s3 -> s1 [0, 57] { R304 += 1, R276 += 1, R256 += 1, R10 += 1 };
  s3 -> s3 [0, 65535] { R304 += 1, R276 += 1, R255 += 1, R256 += 1 };
  s3 -> s4 [0, 65535] { R304 += 1, R276 += 1, R256 += 1, R9 += 1, R10 += 1 };
  s3 -> s5 [58, 58] { R304 += 1, R276 += 1, R256 += 1 };
  s3 -> s1 [59, 65535] { R304 += 1, R276 += 1, R256 += 1, R10 += 1 };
  s4 -> s1 [0, 57] { R304 += 1, R276 += 1, R256 += 1, R10 += 1 };
  s4 -> s4 [0, 65535] { R304 += 1, R276 += 1, R256 += 1, R9 += 1, R10 += 1 };
  s4 -> s5 [58, 58] { R304 += 1, R276 += 1, R256 += 1 };
  s4 -> s1 [59, 65535] { R304 += 1, R276 += 1, R256 += 1, R10 += 1 };
  s5 -> s6 [0, 65535] { R304 += 1, R276 += 1 };
  s5 -> s7 [0, 65535];
  s5 -> s8 [0, 65535] { R304 += 1 };
  s5 -> s5 [0, 65535] { R304 += 1, R276 += 1, R256 += 1 };
  s6 -> s6 [0, 65535] { R304 += 1, R276 += 1 };
  s6 -> s7 [0, 65535];
  s6 -> s8 [0, 65535] { R304 += 1 };
  s7 -> s7 [0, 65535];
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R304 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 36] { R306 += 1, R278 += 1, R258 += 1, R240 += 1 };
  s0 -> s2 [0, 65535] { R306 += 1, R278 += 1, R258 += 1, R239 += 1, R240 += 1 };
  s0 -> s0 [0, 65535] { R305 += 1, R306 += 1 };
  s0 -> s3 [0, 65535] { R306 += 1, R278 += 1, R257 += 1, R258 += 1 };
  s0 -> s4 [0, 65535] { R306 += 1, R277 += 1, R278 += 1 };
  s0 -> s1 [38, 42] { R306 += 1, R278 += 1, R258 += 1, R240 += 1 };
  s0 -> s1 [44, 57] { R306 += 1, R278 += 1, R258 += 1, R240 += 1 };
  s0 -> s1 [59, 65535] { R306 += 1, R278 += 1, R258 += 1, R240 += 1 };
  s1 -> s1 [0, 36] { R306 += 1, R278 += 1, R258 += 1, R240 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s7 [0, 65535] { R306 += 1, R278 += 1 };
  s1 -> s6 [0, 65535] { R306 += 1 };
  s1 -> s1 [0, 65535] { R306 += 1, R278 += 1, R258 += 1 };
  s1 -> s1 [38, 42] { R306 += 1, R278 += 1, R258 += 1, R240 += 1 };
  s1 -> s1 [44, 57] { R306 += 1, R278 += 1, R258 += 1, R240 += 1 };
  s1 -> s1 [59, 65535] { R306 += 1, R278 += 1, R258 += 1, R240 += 1 };
  s2 -> s1 [0, 36] { R306 += 1, R278 += 1, R258 += 1, R240 += 1 };
  s2 -> s2 [0, 65535] { R306 += 1, R278 += 1, R258 += 1, R239 += 1, R240 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s7 [0, 65535] { R306 += 1, R278 += 1 };
  s2 -> s6 [0, 65535] { R306 += 1 };
  s2 -> s1 [38, 42] { R306 += 1, R278 += 1, R258 += 1, R240 += 1 };
  s2 -> s1 [44, 57] { R306 += 1, R278 += 1, R258 += 1, R240 += 1 };
  s2 -> s1 [59, 65535] { R306 += 1, R278 += 1, R258 += 1, R240 += 1 };
  s3 -> s1 [0, 36] { R306 += 1, R278 += 1, R258 += 1, R240 += 1 };
  s3 -> s2 [0, 65535] { R306 += 1, R278 += 1, R258 += 1, R239 += 1, R240 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R306 += 1, R278 += 1, R257 += 1, R258 += 1 };
  s3 -> s6 [0, 65535] { R306 += 1 };
  s3 -> s1 [38, 42] { R306 += 1, R278 += 1, R258 += 1, R240 += 1 };
  s3 -> s1 [44, 57] { R306 += 1, R278 += 1, R258 += 1, R240 += 1 };
  s3 -> s1 [59, 65535] { R306 += 1, R278 += 1, R258 += 1, R240 += 1 };
  s4 -> s1 [0, 36] { R306 += 1, R278 += 1, R258 += 1, R240 += 1 };
  s4 -> s2 [0, 65535] { R306 += 1, R278 += 1, R258 += 1, R239 += 1, R240 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s3 [0, 65535] { R306 += 1, R278 += 1, R257 += 1, R258 += 1 };
  s4 -> s4 [0, 65535] { R306 += 1, R277 += 1, R278 += 1 };
  s4 -> s1 [38, 42] { R306 += 1, R278 += 1, R258 += 1, R240 += 1 };
  s4 -> s1 [44, 57] { R306 += 1, R278 += 1, R258 += 1, R240 += 1 };
  s4 -> s1 [59, 65535] { R306 += 1, R278 += 1, R258 += 1, R240 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R306 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R306 += 1, R278 += 1 };
  s7 -> s6 [0, 65535] { R306 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 65535] { R308 += 1, R280 += 1, R259 += 1, R260 += 1 };
  s0 -> s2 [0, 65535] { R308 += 1, R279 += 1, R280 += 1 };
  s0 -> s3 [0, 65535] { R308 += 1, R280 += 1, R260 += 1, R242 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R307 += 1, R308 += 1 };
  s0 -> s4 [0, 65535] { R308 += 1, R280 += 1, R260 += 1, R241 += 1, R242 += 1 };
  s1 -> s1 [0, 65535] { R308 += 1, R280 += 1, R259 += 1, R260 += 1 };
  s1 -> s3 [0, 65535] { R308 += 1, R280 += 1, R260 += 1, R242 += 1, R2 += 1 };
  s1 -> s4 [0, 65535] { R308 += 1, R280 += 1, R260 += 1, R241 += 1, R242 += 1 };
  s1 -> s6 [0, 65535] { R308 += 1 };
  s1 -> s7 [0, 65535];
  s2 -> s1 [0, 65535] { R308 += 1, R280 += 1, R259 += 1, R260 += 1 };
  s2 -> s2 [0, 65535] { R308 += 1, R279 += 1, R280 += 1 };
  s2 -> s3 [0, 65535] { R308 += 1, R280 += 1, R260 += 1, R242 += 1, R2 += 1 };
  s2 -> s4 [0, 65535] { R308 += 1, R280 += 1, R260 += 1, R241 += 1, R242 += 1 };
  s2 -> s7 [0, 65535];
  s3 -> s5 [0, 65535] { R308 += 1, R280 += 1 };
  s3 -> s8 [0, 65535] { R308 += 1, R280 += 1, R260 += 1 };
  s3 -> s3 [0, 65535] { R308 += 1, R280 += 1, R260 += 1, R242 += 1, R2 += 1 };
  s3 -> s6 [0, 65535] { R308 += 1 };
  s3 -> s7 [0, 65535];
  s4 -> s5 [0, 65535] { R308 += 1, R280 += 1 };
  s4 -> s3 [0, 65535] { R308 += 1, R280 += 1, R260 += 1, R242 += 1, R2 += 1 };
  s4 -> s4 [0, 65535] { R308 += 1, R280 += 1, R260 += 1, R241 += 1, R242 += 1 };
  s4 -> s6 [0, 65535] { R308 += 1 };
  s4 -> s7 [0, 65535];
  s5 -> s5 [0, 65535] { R308 += 1, R280 += 1 };
  s5 -> s6 [0, 65535] { R308 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s6 [0, 65535] { R308 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  s8 -> s5 [0, 65535] { R308 += 1, R280 += 1 };
  s8 -> s8 [0, 65535] { R308 += 1, R280 += 1, R260 += 1 };
  s8 -> s6 [0, 65535] { R308 += 1 };
  s8 -> s7 [0, 65535];
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 36] { R310 += 1, R282 += 1, R262 += 1, R244 += 1 };
  s0 -> s2 [0, 65535] { R310 += 1, R282 += 1, R262 += 1, R243 += 1, R244 += 1 };
  s0 -> s3 [0, 65535] { R310 += 1, R281 += 1, R282 += 1 };
  s0 -> s0 [0, 65535] { R309 += 1, R310 += 1 };
  s0 -> s4 [0, 65535] { R310 += 1, R282 += 1, R261 += 1, R262 += 1 };
  s0 -> s1 [38, 42] { R310 += 1, R282 += 1, R262 += 1, R244 += 1 };
  s0 -> s1 [44, 65535] { R310 += 1, R282 += 1, R262 += 1, R244 += 1 };
  s1 -> s1 [0, 36] { R310 += 1, R282 += 1, R262 += 1, R244 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s7 [0, 65535] { R310 += 1, R282 += 1 };
  s1 -> s1 [0, 65535] { R310 += 1, R282 += 1, R262 += 1 };
  s1 -> s6 [0, 65535] { R310 += 1 };
  s1 -> s1 [38, 42] { R310 += 1, R282 += 1, R262 += 1, R244 += 1 };
  s1 -> s1 [44, 65535] { R310 += 1, R282 += 1, R262 += 1, R244 += 1 };
  s2 -> s1 [0, 36] { R310 += 1, R282 += 1, R262 += 1, R244 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s7 [0, 65535] { R310 += 1, R282 += 1 };
  s2 -> s2 [0, 65535] { R310 += 1, R282 += 1, R262 += 1, R243 += 1, R244 += 1 };
  s2 -> s6 [0, 65535] { R310 += 1 };
  s2 -> s1 [38, 42] { R310 += 1, R282 += 1, R262 += 1, R244 += 1 };
  s2 -> s1 [44, 65535] { R310 += 1, R282 += 1, R262 += 1, R244 += 1 };
  s3 -> s1 [0, 36] { R310 += 1, R282 += 1, R262 += 1, R244 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R310 += 1, R282 += 1, R262 += 1, R243 += 1, R244 += 1 };
  s3 -> s3 [0, 65535] { R310 += 1, R281 += 1, R282 += 1 };
  s3 -> s4 [0, 65535] { R310 += 1, R282 += 1, R261 += 1, R262 += 1 };
  s3 -> s1 [38, 42] { R310 += 1, R282 += 1, R262 += 1, R244 += 1 };
  s3 -> s1 [44, 65535] { R310 += 1, R282 += 1, R262 += 1, R244 += 1 };
  s4 -> s1 [0, 36] { R310 += 1, R282 += 1, R262 += 1, R244 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s2 [0, 65535] { R310 += 1, R282 += 1, R262 += 1, R243 += 1, R244 += 1 };
  s4 -> s6 [0, 65535] { R310 += 1 };
  s4 -> s4 [0, 65535] { R310 += 1, R282 += 1, R261 += 1, R262 += 1 };
  s4 -> s1 [38, 42] { R310 += 1, R282 += 1, R262 += 1, R244 += 1 };
  s4 -> s1 [44, 65535] { R310 += 1, R282 += 1, R262 += 1, R244 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R310 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R310 += 1, R282 += 1 };
  s7 -> s6 [0, 65535] { R310 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R312 += 1, R283 += 1, R284 += 1 };
  s0 -> s0 [0, 65535] { R311 += 1, R312 += 1 };
  s0 -> s2 [0, 65535] { R312 += 1, R284 += 1, R264 += 1, R245 += 1, R246 += 1 };
  s0 -> s3 [0, 65535] { R312 += 1, R284 += 1, R264 += 1, R246 += 1, R1 += 1 };
  s0 -> s4 [0, 65535] { R312 += 1, R284 += 1, R263 += 1, R264 += 1 };
  s1 -> s1 [0, 65535] { R312 += 1, R283 += 1, R284 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s2 [0, 65535] { R312 += 1, R284 += 1, R264 += 1, R245 += 1, R246 += 1 };
  s1 -> s3 [0, 65535] { R312 += 1, R284 += 1, R264 += 1, R246 += 1, R1 += 1 };
  s1 -> s4 [0, 65535] { R312 += 1, R284 += 1, R263 += 1, R264 += 1 };
  s2 -> s7 [0, 65535] { R312 += 1, R284 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R312 += 1, R284 += 1, R264 += 1, R245 += 1, R246 += 1 };
  s2 -> s6 [0, 65535] { R312 += 1 };
  s2 -> s3 [0, 65535] { R312 += 1, R284 += 1, R264 += 1, R246 += 1, R1 += 1 };
  s3 -> s7 [0, 65535] { R312 += 1, R284 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s8 [0, 65535] { R312 += 1, R284 += 1, R264 += 1 };
  s3 -> s6 [0, 65535] { R312 += 1 };
  s3 -> s3 [0, 65535] { R312 += 1, R284 += 1, R264 += 1, R246 += 1, R1 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s2 [0, 65535] { R312 += 1, R284 += 1, R264 += 1, R245 += 1, R246 += 1 };
  s4 -> s6 [0, 65535] { R312 += 1 };
  s4 -> s3 [0, 65535] { R312 += 1, R284 += 1, R264 += 1, R246 += 1, R1 += 1 };
  s4 -> s4 [0, 65535] { R312 += 1, R284 += 1, R263 += 1, R264 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R312 += 1 };
  s7 -> s7 [0, 65535] { R312 += 1, R284 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R312 += 1 };
  s8 -> s7 [0, 65535] { R312 += 1, R284 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s8 [0, 65535] { R312 += 1, R284 += 1, R264 += 1 };
  s8 -> s6 [0, 65535] { R312 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
};
constraint R4 = R242 && R5 = R248 && R6 = R250 && R7 = R312 && R9 = 0 && R10 = R246 && R163 = 0 && R164 = R284 && R239 - R246 = 1 && R240 = R242 && R241 - R246 = 1 && R243 = 0 && R244 = R246 && R245 = 0 && R247 = 10 && R249 - R284 = 1 && R251 = 0 && R252 = 9 && R253 = 0 && R254 = 9 && R255 = 0 && R256 = 9 && R257 = 0 && R258 = 9 && R259 = 0 && R260 = 9 && R261 = 0 && R262 = 9 && R263 = 0 && R264 = 9 && R265 = 0 && R266 = R284 && R267 = 0 && R268 = R284 && R269 = 0 && R270 = R284 && R271 = 0 && R272 = R284 && R273 = 0 && R274 = R284 && R275 = 0 && R276 = R284 && R277 = 0 && R278 = R284 && R279 = 0 && R280 = R284 && R281 = 0 && R282 = R284 && R283 = 0 && R285 = 10 && R286 = R312 && R287 = 10 && R288 = R312 && R289 = 10 && R290 = R312 && R291 = 10 && R292 = R312 && R293 = 10 && R294 = R312 && R295 = 10 && R296 = R312 && R297 = 10 && R298 = R312 && R299 = 10 && R300 = R312 && R301 = 10 && R302 = R312 && R303 = 10 && R304 = R312 && R305 = 10 && R306 = R312 && R307 = 10 && R308 = R312 && R309 = 10 && R310 = R312 && R311 = 10 && R0 != 0 && R1 != 0 && R2 != 0 && R3 != 0 && R246 < R242 && -1 < R246 && 9 < R248 && R284 < R250 && -1 < R284 && 9 < R312;
// End of Parikh automata intersection problem
