// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R12, R13, R1356, R1357, R2, R2027, R2028, R2029, R2030, R2031, R2032, R2033, R2034, R2035, R2036, R2037, R2156, R2157, R2158, R2159, R2160, R2161, R2162, R2163, R2164, R2165, R2166, R2167, R2168, R2169, R2170, R2171, R2172, R2173, R2174, R2175, R2176, R2177, R2178, R2179, R2180, R2181, R2182, R2183, R2184, R2185, R2186, R2187, R2188, R2189, R2190, R2191, R2192, R2193, R2194, R2195, R2196, R2197, R2198, R2199, R2200, R2201, R2202, R2203, R2204, R2205, R2206, R2207, R2208, R2209, R2210, R2211, R2212, R2213, R2214, R2215, R3, R4, R5, R6, R7, R8;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s1 [44, 44];
  s0 -> s0 [45, 57];
  s0 -> s2 [58, 58];
  s0 -> s0 [59, 65535];
  s1 -> s1 [0, 57];
  s1 -> s4 [58, 58];
  s1 -> s1 [59, 65535];
  s2 -> s0 [0, 43];
  s2 -> s1 [44, 44];
  s2 -> s0 [45, 46];
  s2 -> s3 [47, 47];
  s2 -> s0 [48, 57];
  s2 -> s2 [58, 58];
  s2 -> s0 [59, 65535];
  s3 -> s0 [0, 43];
  s3 -> s1 [44, 44];
  s3 -> s0 [45, 46];
  s3 -> s0 [48, 57];
  s3 -> s2 [58, 58];
  s3 -> s0 [59, 65535];
  s4 -> s1 [0, 46];
  s4 -> s5 [47, 47];
  s4 -> s1 [48, 57];
  s4 -> s4 [58, 58];
  s4 -> s1 [59, 65535];
  s5 -> s1 [0, 46];
  s5 -> s1 [48, 57];
  s5 -> s4 [58, 58];
  s5 -> s1 [59, 65535];
  accepting s1, s4, s5;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 43] { R1357 += 1 };
  s0 -> s0 [0, 65535] { R1356 += 1, R1357 += 1 };
  s0 -> s2 [44, 44];
  s0 -> s1 [45, 65535] { R1357 += 1 };
  s1 -> s1 [0, 43] { R1357 += 1 };
  s1 -> s2 [44, 44];
  s1 -> s1 [45, 65535] { R1357 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 43] { R2161 += 1 };
  s0 -> s0 [0, 65535] { R2160 += 1, R2161 += 1 };
  s0 -> s1 [45, 64] { R2161 += 1 };
  s0 -> s1 [91, 107] { R2161 += 1 };
  s0 -> s2 [108, 108] { R2161 += 1 };
  s0 -> s1 [109, 65535] { R2161 += 1 };
  s1 -> s1 [0, 43] { R2161 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [45, 64] { R2161 += 1 };
  s1 -> s1 [91, 65535] { R2161 += 1 };
  s2 -> s1 [0, 43] { R2161 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s1 [45, 64] { R2161 += 1 };
  s2 -> s1 [91, 110] { R2161 += 1 };
  s2 -> s3 [111, 111] { R2161 += 1 };
  s2 -> s1 [112, 65535] { R2161 += 1 };
  s3 -> s1 [0, 43] { R2161 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s1 [45, 64] { R2161 += 1 };
  s3 -> s1 [91, 98] { R2161 += 1 };
  s3 -> s4 [99, 99] { R2161 += 1 };
  s3 -> s1 [100, 65535] { R2161 += 1 };
  s4 -> s1 [0, 43] { R2161 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s1 [45, 64] { R2161 += 1 };
  s4 -> s1 [91, 96] { R2161 += 1 };
  s4 -> s5 [97, 97] { R2161 += 1 };
  s4 -> s1 [98, 65535] { R2161 += 1 };
  s5 -> s1 [0, 43] { R2161 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s1 [45, 64] { R2161 += 1 };
  s5 -> s1 [91, 107] { R2161 += 1 };
  s5 -> s6 [108, 108] { R2161 += 1 };
  s5 -> s1 [109, 65535] { R2161 += 1 };
  s6 -> s1 [0, 43] { R2161 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s1 [45, 64] { R2161 += 1 };
  s6 -> s1 [91, 103] { R2161 += 1 };
  s6 -> s7 [104, 104] { R2161 += 1 };
  s6 -> s1 [105, 65535] { R2161 += 1 };
  s7 -> s1 [0, 43] { R2161 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s1 [45, 64] { R2161 += 1 };
  s7 -> s1 [91, 110] { R2161 += 1 };
  s7 -> s8 [111, 111] { R2161 += 1 };
  s7 -> s1 [112, 65535] { R2161 += 1 };
  s8 -> s1 [0, 43] { R2161 += 1 };
  s8 -> s8 [0, 65535];
  s8 -> s1 [45, 64] { R2161 += 1 };
  s8 -> s1 [91, 114] { R2161 += 1 };
  s8 -> s9 [115, 115] { R2161 += 1 };
  s8 -> s1 [116, 65535] { R2161 += 1 };
  s9 -> s1 [0, 43] { R2161 += 1 };
  s9 -> s9 [0, 65535];
  s9 -> s1 [45, 64] { R2161 += 1 };
  s9 -> s1 [91, 115] { R2161 += 1 };
  s9 -> s10 [116, 116] { R2161 += 1 };
  s9 -> s1 [117, 65535] { R2161 += 1 };
  s10 -> s1 [0, 43] { R2161 += 1 };
  s10 -> s1 [45, 64] { R2161 += 1 };
  s10 -> s1 [91, 65535] { R2161 += 1 };
  accepting s3, s4, s8, s5, s2, s9, s6, s1, s7, s0;
};
automaton uri_4 {
  init s0;
  s0 -> s0 [0, 65535] { R2162 += 1, R2163 += 1 };
  s0 -> s1 [0, 65535] { R2163 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R2163 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 57] { R2165 += 1 };
  s0 -> s2 [0, 65535] { R2165 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R2164 += 1, R2165 += 1 };
  s0 -> s3 [58, 58] { R2165 += 1 };
  s0 -> s1 [59, 65535] { R2165 += 1 };
  s1 -> s1 [0, 57] { R2165 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R2165 += 1 };
  s1 -> s1 [59, 65535] { R2165 += 1 };
  s2 -> s1 [0, 57] { R2165 += 1 };
  s2 -> s2 [0, 65535] { R2165 += 1, R7 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [58, 58] { R2165 += 1 };
  s2 -> s1 [59, 65535] { R2165 += 1 };
  s3 -> s3 [0, 65535] { R2165 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 90] { R2167 += 1, R2035 += 1 };
  s0 -> s2 [0, 65535] { R2167 += 1, R2034 += 1, R2035 += 1 };
  s0 -> s0 [0, 65535] { R2166 += 1, R2167 += 1 };
  s0 -> s3 [91, 91] { R2167 += 1, R2035 += 1 };
  s0 -> s1 [92, 65535] { R2167 += 1, R2035 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R2167 += 1, R2035 += 1 };
  s1 -> s5 [0, 65535] { R2167 += 1 };
  s2 -> s1 [0, 90] { R2167 += 1, R2035 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2167 += 1, R2034 += 1, R2035 += 1 };
  s2 -> s3 [91, 91] { R2167 += 1, R2035 += 1 };
  s2 -> s1 [92, 65535] { R2167 += 1, R2035 += 1 };
  s3 -> s1 [0, 65535] { R2167 += 1, R2035 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2167 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R2169 += 1, R2036 += 1, R2037 += 1 };
  s0 -> s0 [0, 65535] { R2168 += 1, R2169 += 1 };
  s0 -> s2 [0, 65535] { R2169 += 1, R2037 += 1, R5 += 1 };
  s1 -> s1 [0, 65535] { R2169 += 1, R2036 += 1, R2037 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R2169 += 1, R2037 += 1, R5 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R2169 += 1, R2037 += 1, R5 += 1 };
  s2 -> s4 [0, 65535] { R2169 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2169 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 64] { R2171 += 1 };
  s0 -> s0 [0, 65535] { R2170 += 1, R2171 += 1 };
  s0 -> s1 [91, 107] { R2171 += 1 };
  s0 -> s2 [108, 108] { R2171 += 1 };
  s0 -> s1 [109, 65535] { R2171 += 1 };
  s1 -> s1 [0, 64] { R2171 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [91, 65535] { R2171 += 1 };
  s2 -> s1 [0, 64] { R2171 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s1 [91, 110] { R2171 += 1 };
  s2 -> s3 [111, 111] { R2171 += 1 };
  s2 -> s1 [112, 65535] { R2171 += 1 };
  s3 -> s1 [0, 64] { R2171 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s1 [91, 98] { R2171 += 1 };
  s3 -> s4 [99, 99] { R2171 += 1 };
  s3 -> s1 [100, 65535] { R2171 += 1 };
  s4 -> s1 [0, 64] { R2171 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s1 [91, 96] { R2171 += 1 };
  s4 -> s5 [97, 97] { R2171 += 1 };
  s4 -> s1 [98, 65535] { R2171 += 1 };
  s5 -> s1 [0, 64] { R2171 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s1 [91, 107] { R2171 += 1 };
  s5 -> s6 [108, 108] { R2171 += 1 };
  s5 -> s1 [109, 65535] { R2171 += 1 };
  s6 -> s1 [0, 64] { R2171 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s1 [91, 103] { R2171 += 1 };
  s6 -> s7 [104, 104] { R2171 += 1 };
  s6 -> s1 [105, 65535] { R2171 += 1 };
  s7 -> s1 [0, 64] { R2171 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s1 [91, 110] { R2171 += 1 };
  s7 -> s8 [111, 111] { R2171 += 1 };
  s7 -> s1 [112, 65535] { R2171 += 1 };
  s8 -> s1 [0, 64] { R2171 += 1 };
  s8 -> s8 [0, 65535];
  s8 -> s1 [91, 114] { R2171 += 1 };
  s8 -> s9 [115, 115] { R2171 += 1 };
  s8 -> s1 [116, 65535] { R2171 += 1 };
  s9 -> s1 [0, 64] { R2171 += 1 };
  s9 -> s9 [0, 65535];
  s9 -> s1 [91, 115] { R2171 += 1 };
  s9 -> s10 [116, 116] { R2171 += 1 };
  s9 -> s1 [117, 65535] { R2171 += 1 };
  s10 -> s1 [0, 64] { R2171 += 1 };
  s10 -> s1 [91, 65535] { R2171 += 1 };
  accepting s3, s4, s8, s5, s2, s9, s6, s1, s7, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s0 [0, 65535] { R2172 += 1, R2173 += 1 };
  s0 -> s1 [0, 65535] { R2173 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R2173 += 1, R0 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 57] { R2175 += 1 };
  s0 -> s2 [0, 65535] { R2175 += 1, R6 += 1 };
  s0 -> s0 [0, 65535] { R2174 += 1, R2175 += 1 };
  s0 -> s3 [58, 58] { R2175 += 1 };
  s0 -> s1 [59, 65535] { R2175 += 1 };
  s1 -> s1 [0, 57] { R2175 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R2175 += 1 };
  s1 -> s1 [59, 65535] { R2175 += 1 };
  s2 -> s1 [0, 57] { R2175 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2175 += 1, R6 += 1 };
  s2 -> s3 [58, 58] { R2175 += 1 };
  s2 -> s1 [59, 65535] { R2175 += 1 };
  s3 -> s3 [0, 65535] { R2175 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 90] { R2177 += 1, R2031 += 1 };
  s0 -> s0 [0, 65535] { R2176 += 1, R2177 += 1 };
  s0 -> s2 [0, 65535] { R2177 += 1, R2030 += 1, R2031 += 1 };
  s0 -> s3 [91, 91] { R2177 += 1, R2031 += 1 };
  s0 -> s1 [92, 65535] { R2177 += 1, R2031 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R2177 += 1 };
  s1 -> s1 [0, 65535] { R2177 += 1, R2031 += 1 };
  s2 -> s1 [0, 90] { R2177 += 1, R2031 += 1 };
  s2 -> s2 [0, 65535] { R2177 += 1, R2030 += 1, R2031 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [91, 91] { R2177 += 1, R2031 += 1 };
  s2 -> s1 [92, 65535] { R2177 += 1, R2031 += 1 };
  s3 -> s1 [0, 65535] { R2177 += 1, R2031 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2177 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s0 [0, 65535] { R2178 += 1, R2179 += 1 };
  s0 -> s1 [0, 65535] { R2179 += 1, R2033 += 1, R4 += 1 };
  s0 -> s2 [0, 65535] { R2179 += 1, R2032 += 1, R2033 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R2179 += 1, R2033 += 1, R4 += 1 };
  s1 -> s4 [0, 65535] { R2179 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R2179 += 1, R2033 += 1, R4 += 1 };
  s2 -> s2 [0, 65535] { R2179 += 1, R2032 += 1, R2033 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2179 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 46] { R2199 += 1, R13 += 1 };
  s0 -> s2 [0, 65535] { R2199 += 1, R12 += 1, R13 += 1 };
  s0 -> s0 [0, 65535] { R2198 += 1, R2199 += 1 };
  s0 -> s3 [47, 47] { R2199 += 1 };
  s0 -> s1 [48, 65535] { R2199 += 1, R13 += 1 };
  s1 -> s1 [0, 46] { R2199 += 1, R13 += 1 };
  s1 -> s3 [47, 47] { R2199 += 1 };
  s1 -> s1 [48, 65535] { R2199 += 1, R13 += 1 };
  s2 -> s1 [0, 46] { R2199 += 1, R13 += 1 };
  s2 -> s2 [0, 65535] { R2199 += 1, R12 += 1, R13 += 1 };
  s2 -> s3 [47, 47] { R2199 += 1 };
  s2 -> s1 [48, 65535] { R2199 += 1, R13 += 1 };
  s3 -> s3 [0, 65535] { R2199 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R2201 += 1, R2029 += 1 };
  s0 -> s0 [0, 65535] { R2200 += 1, R2201 += 1 };
  s1 -> s1 [0, 65535] { R2201 += 1, R2029 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_15 {
  init s0;
  s0 -> s0 [0, 65535] { R2202 += 1, R2203 += 1 };
  s0 -> s1 [0, 65535] { R2203 += 1, R2184 += 1, R2185 += 1 };
  s0 -> s2 [108, 108] { R2203 += 1, R2185 += 1 };
  s1 -> s1 [0, 65535] { R2203 += 1, R2184 += 1, R2185 += 1 };
  s1 -> s2 [108, 108] { R2203 += 1, R2185 += 1 };
  s2 -> s3 [111, 111] { R2203 += 1, R2185 += 1 };
  s3 -> s4 [99, 99] { R2203 += 1, R2185 += 1 };
  s4 -> s5 [97, 97] { R2203 += 1, R2185 += 1 };
  s5 -> s6 [108, 108] { R2203 += 1, R2185 += 1 };
  s6 -> s7 [104, 104] { R2203 += 1, R2185 += 1 };
  s7 -> s8 [111, 111] { R2203 += 1, R2185 += 1 };
  s8 -> s9 [115, 115] { R2203 += 1, R2185 += 1 };
  s9 -> s10 [116, 116] { R2203 += 1, R2185 += 1 };
  s10 -> s11 [0, 65535];
  s10 -> s10 [0, 65535] { R2203 += 1 };
  s11 -> s11 [0, 65535];
  accepting s10, s11;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R2205 += 1, R2186 += 1, R2187 += 1 };
  s0 -> s0 [0, 65535] { R2204 += 1, R2205 += 1 };
  s0 -> s2 [0, 65535] { R2205 += 1, R2187 += 1, R2 += 1 };
  s1 -> s1 [0, 65535] { R2205 += 1, R2186 += 1, R2187 += 1 };
  s1 -> s2 [0, 65535] { R2205 += 1, R2187 += 1, R2 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R2205 += 1 };
  s2 -> s2 [0, 65535] { R2205 += 1, R2187 += 1, R2 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2205 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 89] { R2207 += 1, R2189 += 1 };
  s0 -> s2 [0, 65535] { R2207 += 1, R2189 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R2206 += 1, R2207 += 1 };
  s0 -> s3 [0, 65535] { R2207 += 1, R2188 += 1, R2189 += 1 };
  s0 -> s4 [90, 90] { R2207 += 1, R2189 += 1 };
  s0 -> s1 [91, 65535] { R2207 += 1, R2189 += 1 };
  s1 -> s1 [0, 89] { R2207 += 1, R2189 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R2207 += 1 };
  s1 -> s4 [90, 90] { R2207 += 1, R2189 += 1 };
  s1 -> s1 [91, 65535] { R2207 += 1, R2189 += 1 };
  s2 -> s1 [0, 89] { R2207 += 1, R2189 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R2207 += 1 };
  s2 -> s2 [0, 65535] { R2207 += 1, R2189 += 1, R8 += 1 };
  s2 -> s4 [90, 90] { R2207 += 1, R2189 += 1 };
  s2 -> s1 [91, 65535] { R2207 += 1, R2189 += 1 };
  s3 -> s1 [0, 89] { R2207 += 1, R2189 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R2207 += 1, R2189 += 1, R8 += 1 };
  s3 -> s3 [0, 65535] { R2207 += 1, R2188 += 1, R2189 += 1 };
  s3 -> s4 [90, 90] { R2207 += 1, R2189 += 1 };
  s3 -> s1 [91, 65535] { R2207 += 1, R2189 += 1 };
  s4 -> s4 [0, 65535] { R2207 += 1, R2189 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2207 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R2209 += 1, R2191 += 1, R2156 += 1, R2157 += 1 };
  s0 -> s0 [0, 65535] { R2208 += 1, R2209 += 1 };
  s0 -> s2 [0, 65535] { R2209 += 1, R2191 += 1, R2157 += 1, R2027 += 1 };
  s0 -> s3 [0, 65535] { R2209 += 1, R2190 += 1, R2191 += 1 };
  s1 -> s1 [0, 65535] { R2209 += 1, R2191 += 1, R2156 += 1, R2157 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R2209 += 1, R2191 += 1, R2157 += 1, R2027 += 1 };
  s1 -> s6 [0, 65535] { R2209 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2209 += 1, R2191 += 1, R2157 += 1, R2027 += 1 };
  s2 -> s5 [0, 65535] { R2209 += 1, R2191 += 1 };
  s2 -> s6 [0, 65535] { R2209 += 1 };
  s3 -> s1 [0, 65535] { R2209 += 1, R2191 += 1, R2156 += 1, R2157 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R2209 += 1, R2191 += 1, R2157 += 1, R2027 += 1 };
  s3 -> s3 [0, 65535] { R2209 += 1, R2190 += 1, R2191 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2209 += 1, R2191 += 1 };
  s5 -> s6 [0, 65535] { R2209 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R2209 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 110] { R2211 += 1, R2193 += 1, R2159 += 1 };
  s0 -> s0 [0, 65535] { R2210 += 1, R2211 += 1 };
  s0 -> s2 [0, 65535] { R2211 += 1, R2193 += 1, R2158 += 1, R2159 += 1 };
  s0 -> s3 [0, 65535] { R2211 += 1, R2192 += 1, R2193 += 1 };
  s0 -> s4 [111, 111] { R2211 += 1, R2193 += 1, R2159 += 1 };
  s0 -> s1 [112, 65535] { R2211 += 1, R2193 += 1, R2159 += 1 };
  s1 -> s14 [0, 65535] { R2211 += 1, R2193 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R2211 += 1 };
  s1 -> s1 [0, 65535] { R2211 += 1, R2193 += 1, R2159 += 1 };
  s2 -> s1 [0, 110] { R2211 += 1, R2193 += 1, R2159 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R2211 += 1 };
  s2 -> s2 [0, 65535] { R2211 += 1, R2193 += 1, R2158 += 1, R2159 += 1 };
  s2 -> s4 [111, 111] { R2211 += 1, R2193 += 1, R2159 += 1 };
  s2 -> s1 [112, 65535] { R2211 += 1, R2193 += 1, R2159 += 1 };
  s3 -> s1 [0, 110] { R2211 += 1, R2193 += 1, R2159 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R2211 += 1, R2193 += 1, R2158 += 1, R2159 += 1 };
  s3 -> s3 [0, 65535] { R2211 += 1, R2192 += 1, R2193 += 1 };
  s3 -> s4 [111, 111] { R2211 += 1, R2193 += 1, R2159 += 1 };
  s3 -> s1 [112, 65535] { R2211 += 1, R2193 += 1, R2159 += 1 };
  s4 -> s1 [0, 98] { R2211 += 1, R2193 += 1, R2159 += 1 };
  s4 -> s4 [0, 65535] { R2211 += 1, R2193 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R2211 += 1 };
  s4 -> s7 [99, 99] { R2211 += 1, R2193 += 1, R2159 += 1 };
  s4 -> s1 [100, 65535] { R2211 += 1, R2193 += 1, R2159 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2211 += 1 };
  s7 -> s1 [0, 96] { R2211 += 1, R2193 += 1, R2159 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R2211 += 1, R2193 += 1 };
  s7 -> s6 [0, 65535] { R2211 += 1 };
  s7 -> s8 [97, 97] { R2211 += 1, R2193 += 1, R2159 += 1 };
  s7 -> s1 [98, 65535] { R2211 += 1, R2193 += 1, R2159 += 1 };
  s8 -> s1 [0, 107] { R2211 += 1, R2193 += 1, R2159 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s6 [0, 65535] { R2211 += 1 };
  s8 -> s8 [0, 65535] { R2211 += 1, R2193 += 1 };
  s8 -> s9 [108, 108] { R2211 += 1, R2193 += 1, R2159 += 1 };
  s8 -> s1 [109, 65535] { R2211 += 1, R2193 += 1, R2159 += 1 };
  s9 -> s1 [0, 103] { R2211 += 1, R2193 += 1, R2159 += 1 };
  s9 -> s5 [0, 65535];
  s9 -> s6 [0, 65535] { R2211 += 1 };
  s9 -> s9 [0, 65535] { R2211 += 1, R2193 += 1 };
  s9 -> s10 [104, 104] { R2211 += 1, R2193 += 1, R2159 += 1 };
  s9 -> s1 [105, 65535] { R2211 += 1, R2193 += 1, R2159 += 1 };
  s10 -> s1 [0, 110] { R2211 += 1, R2193 += 1, R2159 += 1 };
  s10 -> s5 [0, 65535];
  s10 -> s6 [0, 65535] { R2211 += 1 };
  s10 -> s10 [0, 65535] { R2211 += 1, R2193 += 1 };
  s10 -> s11 [111, 111] { R2211 += 1, R2193 += 1, R2159 += 1 };
  s10 -> s1 [112, 65535] { R2211 += 1, R2193 += 1, R2159 += 1 };
  s11 -> s1 [0, 114] { R2211 += 1, R2193 += 1, R2159 += 1 };
  s11 -> s5 [0, 65535];
  s11 -> s6 [0, 65535] { R2211 += 1 };
  s11 -> s11 [0, 65535] { R2211 += 1, R2193 += 1 };
  s11 -> s12 [115, 115] { R2211 += 1, R2193 += 1, R2159 += 1 };
  s11 -> s1 [116, 65535] { R2211 += 1, R2193 += 1, R2159 += 1 };
  s12 -> s1 [0, 115] { R2211 += 1, R2193 += 1, R2159 += 1 };
  s12 -> s12 [0, 65535] { R2211 += 1, R2193 += 1 };
  s12 -> s5 [0, 65535];
  s12 -> s6 [0, 65535] { R2211 += 1 };
  s12 -> s13 [116, 116] { R2211 += 1, R2193 += 1, R2159 += 1 };
  s12 -> s1 [117, 65535] { R2211 += 1, R2193 += 1, R2159 += 1 };
  s13 -> s1 [0, 65535] { R2211 += 1, R2193 += 1, R2159 += 1 };
  s14 -> s14 [0, 65535] { R2211 += 1, R2193 += 1 };
  s14 -> s5 [0, 65535];
  s14 -> s6 [0, 65535] { R2211 += 1 };
  accepting s3, s4, s12, s8, s5, s2, s9, s14, s6, s1, s7, s0, s10, s11;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 65535] { R2213 += 1, R2195 += 1, R2180 += 1, R2181 += 1 };
  s0 -> s2 [0, 65535] { R2213 += 1, R2194 += 1, R2195 += 1 };
  s0 -> s3 [0, 65535] { R2213 += 1, R2195 += 1, R2181 += 1, R2028 += 1 };
  s0 -> s0 [0, 65535] { R2212 += 1, R2213 += 1 };
  s1 -> s1 [0, 65535] { R2213 += 1, R2195 += 1, R2180 += 1, R2181 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R2213 += 1, R2195 += 1, R2181 += 1, R2028 += 1 };
  s1 -> s6 [0, 65535] { R2213 += 1 };
  s2 -> s1 [0, 65535] { R2213 += 1, R2195 += 1, R2180 += 1, R2181 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2213 += 1, R2194 += 1, R2195 += 1 };
  s2 -> s3 [0, 65535] { R2213 += 1, R2195 += 1, R2181 += 1, R2028 += 1 };
  s3 -> s4 [0, 65535] { R2213 += 1, R2195 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R2213 += 1, R2195 += 1, R2181 += 1, R2028 += 1 };
  s3 -> s6 [0, 65535] { R2213 += 1 };
  s4 -> s4 [0, 65535] { R2213 += 1, R2195 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R2213 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2213 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 65535] { R2215 += 1, R2197 += 1, R2182 += 1, R2183 += 1 };
  s0 -> s0 [0, 65535] { R2214 += 1, R2215 += 1 };
  s0 -> s2 [0, 65535] { R2215 += 1, R2196 += 1, R2197 += 1 };
  s0 -> s3 [108, 108] { R2215 += 1, R2197 += 1, R2183 += 1 };
  s1 -> s1 [0, 65535] { R2215 += 1, R2197 += 1, R2182 += 1, R2183 += 1 };
  s1 -> s3 [108, 108] { R2215 += 1, R2197 += 1, R2183 += 1 };
  s2 -> s1 [0, 65535] { R2215 += 1, R2197 += 1, R2182 += 1, R2183 += 1 };
  s2 -> s2 [0, 65535] { R2215 += 1, R2196 += 1, R2197 += 1 };
  s2 -> s3 [108, 108] { R2215 += 1, R2197 += 1, R2183 += 1 };
  s3 -> s4 [0, 65535] { R2215 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R2215 += 1, R2197 += 1 };
  s4 -> s4 [0, 65535] { R2215 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
};
synchronised {  // Automata constraining P57
automaton P57_0 {
  init s0;
  s0 -> s1 [122, 122];
  accepting s1;
};
};
constraint R3 = R2215 && R12 = 0 && R1356 = 0 && R1357 = R2179 && R2160 - R2179 = 1 && R2161 = R2215 && R2162 - R2179 = 1 && R2163 = R2215 && R2164 - R2179 = 1 && R2165 = R2215 && R2166 - R2179 = 1 && R2167 = R2215 && R2168 - R2179 = 1 && R2169 = R2215 && R2170 = 0 && R2171 = R2179 && R2172 = 0 && R2173 = R2179 && R2174 = 0 && R2175 = R2179 && R2176 = 0 && R2177 = R2179 && R2178 = 0 && R2182 = 0 && R2183 = 0 && R2184 = 0 && R2196 = 0 && R2198 = 10 && R2199 = R2215 && R2202 = 10 && R2203 = R2215 && R2214 = 10 && R0 != 0 && R1 != 0 && -1 < R2 && R6 < 1 && R7 < 1 && R8 < 1 && R2185 - R13 < 1 && R2197 - R13 < 1 && -1 < R13 && R2185 - R2029 < 1 && R2197 - R2029 < 1 && R2179 < R2215 && -1 < R2179 && 9 < R2215 && (R2 != 0 || R2027 = 0 || (R2156 = 0 && R2157 = 0)) && (R2 != 0 || R2027 = 0 || (R2158 = 0 && R2159 = 0)) && (R2030 != 0 || ((R4 != 0 || ((R0 != R2031 || R2031 = 1 || R2031 < 0) && (R0 = R2031 || R2031 = 1 || R0 < 1))) && (R4 = 0 || ((R0 != R2031 || R2031 = 1 || R2031 < 0) && (R2031 != 1 || -1 < R0) && (R0 = R2031 || R2031 = 1))))) && (R2032 != 0 || ((R4 != 0 || ((R0 != R2033 || R2033 = 1 || R2033 < 0) && (R0 = R2033 || R2033 = 1 || R0 < 1))) && (R4 = 0 || ((R0 != R2033 || R2033 = 1 || R2033 < 0) && (R2033 != 1 || -1 < R0) && (R0 = R2033 || R2033 = 1))))) && (R2034 != 0 || ((R5 != 0 || ((R1 != R2035 || R2035 = 1 || R2035 < 0) && (R1 = R2035 || R2035 = 1 || R1 < 1))) && (R5 = 0 || ((R1 != R2035 || R2035 = 1 || R2035 < 0) && (R2035 != 1 || -1 < R1) && (R1 = R2035 || R2035 = 1))))) && (R2036 != 0 || ((R5 != 0 || ((R1 != R2037 || R2037 = 1 || R2037 < 0) && (R1 = R2037 || R2037 = 1 || R1 < 1))) && (R5 = 0 || ((R1 != R2037 || R2037 = 1 || R2037 < 0) && (R2037 != 1 || -1 < R1) && (R1 = R2037 || R2037 = 1))))) && (R2156 != 0 || R2 = R2157 || R2 < 1) && (R2158 != 0 || R2 = R2159 || R2 < 1) && (R2186 != 0 || ((R2 != 0 || ((R13 != R2187 || R2187 - R2029 < 1 || R2029 < 1) && (R2029 != R2187 || R2187 - R13 < 1 || R13 < 1) && (R13 = R2187 || R2029 = R2187 || R13 < 1 || R2029 < 1))) && (R13 != R2187 || R2 < 1 || R2187 - R2029 < 1 || R2187 < 0) && (R2029 != R2187 || R2 < 1 || R2187 - R13 < 1) && (R13 = R2187 || R2029 = R2187 || R2 < 1))) && (R2188 != 0 || ((R2 != 0 || ((R13 != R2189 || R2189 - R2029 < 1 || R2029 < 1) && (R2029 != R2189 || R2189 - R13 < 1 || R13 < 1) && (R13 = R2189 || R2029 = R2189 || R13 < 1 || R2029 < 1))) && (R13 != R2189 || R2 < 1 || R2189 - R2029 < 1 || R2189 < 0) && (R2029 != R2189 || R2 < 1 || R2189 - R13 < 1) && (R13 = R2189 || R2029 = R2189 || R2 < 1))) && (R2190 != 0 || ((R2 != 0 || ((R13 != R2191 || R2191 - R2029 < 1 || R2029 < 1) && (R2029 != R2191 || R2191 - R13 < 1 || R13 < 1) && (R13 = R2191 || R2029 = R2191 || R13 < 1 || R2029 < 1))) && (R13 != R2191 || R2 < 1 || R2191 - R2029 < 1 || R2191 < 0) && (R2029 != R2191 || R2 < 1 || R2191 - R13 < 1) && (R13 = R2191 || R2029 = R2191 || R2 < 1))) && (R2192 != 0 || ((R2 != 0 || ((R13 != R2193 || R2193 - R2029 < 1 || R2029 < 1) && (R2029 != R2193 || R2193 - R13 < 1 || R13 < 1) && (R13 = R2193 || R2029 = R2193 || R13 < 1 || R2029 < 1))) && (R13 != R2193 || R2 < 1 || R2193 - R2029 < 1 || R2193 < 0) && (R2029 != R2193 || R2 < 1 || R2193 - R13 < 1) && (R13 = R2193 || R2029 = R2193 || R2 < 1))) && (R2194 != 0 || ((R2 != 0 || ((R13 != R2195 || R2195 - R2029 < 1 || R2029 < 1) && (R2029 != R2195 || R2195 - R13 < 1 || R13 < 1) && (R13 = R2195 || R2029 = R2195 || R13 < 1 || R2029 < 1))) && (R13 != R2195 || R2 < 1 || R2195 - R2029 < 1 || R2195 < 0) && (R2029 != R2195 || R2 < 1 || R2195 - R13 < 1) && (R13 = R2195 || R2029 = R2195 || R2 < 1))) && (R2200 != 10 || R2201 = R2215 || (R2029 = 0 && R2215 = 10)) && (R2204 != 10 || R2205 = R2215 || (R2029 = 0 && R2215 = 10)) && (R2206 != 10 || R2207 = R2215 || (R2029 = 0 && R2215 = 10)) && (R2208 != 10 || R2209 = R2215 || (R2029 = 0 && R2215 = 10)) && (R2210 != 10 || R2211 = R2215 || (R2029 = 0 && R2215 = 10)) && (R2212 != 10 || R2213 = R2215 || (R2029 = 0 && R2215 = 10)) && (R2028 = 0 || (R2180 = 0 && R2181 = 0)) && (R2030 = 0 || (R4 = 0 && R0 < 0)) && (R2032 = 0 || (R4 = 0 && R0 < 0)) && (R2034 = 0 || (R5 = 0 && R1 < 0)) && (R2036 = 0 || (R5 = 0 && R1 < 0)) && (R2156 = 0 || R2 < 1) && (R2158 = 0 || R2 < 1) && (R2186 = 0 || (R2 = 0 && (R13 < 1 || R2029 < 1))) && (R2188 = 0 || (R2 = 0 && (R13 < 1 || R2029 < 1))) && (R2190 = 0 || (R2 = 0 && (R13 < 1 || R2029 < 1))) && (R2192 = 0 || (R2 = 0 && (R13 < 1 || R2029 < 1))) && (R2194 = 0 || (R2 = 0 && (R13 < 1 || R2029 < 1))) && (R2200 = 10 || (R2029 = 0 && R2215 = 10)) && (R2204 = 10 || (R2029 = 0 && R2215 = 10)) && (R2206 = 10 || (R2029 = 0 && R2215 = 10)) && (R2208 = 10 || (R2029 = 0 && R2215 = 10)) && (R2210 = 10 || (R2029 = 0 && R2215 = 10)) && (R2212 = 10 || (R2029 = 0 && R2215 = 10)) && (R13 - R2185 < 1 || R2029 - R2185 < 1) && (R13 - R2197 < 1 || R2029 - R2197 < 1);
// End of Parikh automata intersection problem
