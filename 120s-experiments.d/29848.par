// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R15, R16, R2, R3, R4, R5, R5988, R5989, R5990, R5991, R5992, R5993, R5994, R5995, R5996, R5997, R5998, R6, R7, R8907, R8908, R8909, R8910, R8911, R8912, R8913, R8914, R8915, R8916, R8917, R8918, R8919, R8920, R8921, R8922, R8923, R8924, R8925, R8926, R8927, R8928, R8929, R8930, R8931, R8932, R8933, R8934, R8935, R8936, R8937, R8938, R8939, R8940, R8941, R8942, R8943, R8944, R8945, R8946, R8947, R8948, R8949, R8950, R8951, R8952, R8953, R8954, R8955, R8956, R8957, R8958, R8959, R8960, R8961, R8962, R8963, R8964, R8965, R8966, R8967, R8968, R8969, R8970, R8971, R8972, R8973, R8974, R8975, R8976, R8977, R8978, R8979, R8980, R8981, R8982, R8983, R8984, R8985, R8986, R8987, R8988, R8989, R8990, R8991, R8992, R8993, R8994, R8995, R8996, R8997, R8998, R8999, R9000, R9001, R9002, R9003, R9004, R9005, R9006, R9007, R9008, R9009, R9010, R9011, R9012, R9013, R9014, R9015, R9016, R9017, R9018, R9019, R9020;
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [119, 119];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R8976 += 1 };
  s0 -> s0 [0, 65535] { R8975 += 1, R8976 += 1 };
  s0 -> s2 [46, 46] { R8976 += 1 };
  s0 -> s3 [47, 47] { R8976 += 1 };
  s0 -> s1 [48, 65535] { R8976 += 1 };
  s1 -> s1 [0, 45] { R8976 += 1 };
  s1 -> s2 [46, 46] { R8976 += 1 };
  s1 -> s3 [47, 47] { R8976 += 1 };
  s1 -> s1 [48, 65535] { R8976 += 1 };
  s2 -> s1 [0, 45] { R8976 += 1 };
  s2 -> s2 [46, 46] { R8976 += 1 };
  s2 -> s3 [47, 47] { R8976 += 1 };
  s2 -> s1 [48, 114] { R8976 += 1 };
  s2 -> s8 [115, 115] { R8976 += 1 };
  s2 -> s1 [116, 65535] { R8976 += 1 };
  s3 -> s3 [0, 45] { R8976 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R8976 += 1 };
  s3 -> s3 [47, 65535] { R8976 += 1 };
  s4 -> s3 [0, 45] { R8976 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R8976 += 1 };
  s4 -> s3 [47, 114] { R8976 += 1 };
  s4 -> s5 [115, 115] { R8976 += 1 };
  s4 -> s3 [116, 65535] { R8976 += 1 };
  s5 -> s3 [0, 45] { R8976 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R8976 += 1 };
  s5 -> s3 [47, 110] { R8976 += 1 };
  s5 -> s6 [111, 111] { R8976 += 1 };
  s5 -> s3 [112, 65535] { R8976 += 1 };
  s6 -> s3 [0, 45] { R8976 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R8976 += 1 };
  s6 -> s3 [47, 98] { R8976 += 1 };
  s6 -> s7 [99, 99] { R8976 += 1 };
  s6 -> s3 [100, 65535] { R8976 += 1 };
  s7 -> s3 [0, 45] { R8976 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R8976 += 1 };
  s7 -> s3 [47, 106] { R8976 += 1 };
  s7 -> s3 [108, 65535] { R8976 += 1 };
  s8 -> s1 [0, 45] { R8976 += 1 };
  s8 -> s2 [46, 46] { R8976 += 1 };
  s8 -> s3 [47, 47] { R8976 += 1 };
  s8 -> s1 [48, 110] { R8976 += 1 };
  s8 -> s9 [111, 111] { R8976 += 1 };
  s8 -> s1 [112, 65535] { R8976 += 1 };
  s9 -> s1 [0, 45] { R8976 += 1 };
  s9 -> s2 [46, 46] { R8976 += 1 };
  s9 -> s3 [47, 47] { R8976 += 1 };
  s9 -> s1 [48, 98] { R8976 += 1 };
  s9 -> s10 [99, 99] { R8976 += 1 };
  s9 -> s1 [100, 65535] { R8976 += 1 };
  s10 -> s1 [0, 45] { R8976 += 1 };
  s10 -> s2 [46, 46] { R8976 += 1 };
  s10 -> s3 [47, 47] { R8976 += 1 };
  s10 -> s1 [48, 106] { R8976 += 1 };
  s10 -> s1 [108, 65535] { R8976 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R8977 += 1, R8978 += 1 };
  s0 -> s1 [0, 65535] { R8978 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R8978 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R8980 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R8979 += 1, R8980 += 1 };
  s0 -> s2 [0, 65535] { R8980 += 1, R15 += 1, R16 += 1 };
  s0 -> s3 [47, 47] { R8980 += 1 };
  s0 -> s1 [48, 65535] { R8980 += 1, R16 += 1 };
  s1 -> s1 [0, 46] { R8980 += 1, R16 += 1 };
  s1 -> s3 [47, 47] { R8980 += 1 };
  s1 -> s1 [48, 65535] { R8980 += 1, R16 += 1 };
  s2 -> s1 [0, 46] { R8980 += 1, R16 += 1 };
  s2 -> s2 [0, 65535] { R8980 += 1, R15 += 1, R16 += 1 };
  s2 -> s3 [47, 47] { R8980 += 1 };
  s2 -> s1 [48, 65535] { R8980 += 1, R16 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8980 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 36] { R8982 += 1, R8908 += 1 };
  s0 -> s0 [0, 65535] { R8981 += 1, R8982 += 1 };
  s0 -> s2 [0, 65535] { R8982 += 1, R8907 += 1, R8908 += 1 };
  s0 -> s1 [38, 42] { R8982 += 1, R8908 += 1 };
  s0 -> s1 [44, 45] { R8982 += 1, R8908 += 1 };
  s0 -> s1 [47, 62] { R8982 += 1, R8908 += 1 };
  s0 -> s1 [64, 65535] { R8982 += 1, R8908 += 1 };
  s1 -> s1 [0, 36] { R8982 += 1, R8908 += 1 };
  s1 -> s1 [0, 65535] { R8982 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [38, 42] { R8982 += 1, R8908 += 1 };
  s1 -> s1 [44, 45] { R8982 += 1, R8908 += 1 };
  s1 -> s1 [47, 62] { R8982 += 1, R8908 += 1 };
  s1 -> s1 [64, 65535] { R8982 += 1, R8908 += 1 };
  s2 -> s1 [0, 36] { R8982 += 1, R8908 += 1 };
  s2 -> s2 [0, 65535] { R8982 += 1, R8907 += 1, R8908 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [38, 42] { R8982 += 1, R8908 += 1 };
  s2 -> s1 [44, 45] { R8982 += 1, R8908 += 1 };
  s2 -> s1 [47, 62] { R8982 += 1, R8908 += 1 };
  s2 -> s1 [64, 65535] { R8982 += 1, R8908 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 65535] { R8984 += 1, R8910 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R8983 += 1, R8984 += 1 };
  s0 -> s2 [0, 65535] { R8984 += 1, R8909 += 1, R8910 += 1 };
  s1 -> s4 [0, 65535] { R8984 += 1 };
  s1 -> s1 [0, 65535] { R8984 += 1, R8910 += 1, R0 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R8984 += 1, R8910 += 1, R0 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R8984 += 1, R8909 += 1, R8910 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8984 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 62] { R8986 += 1, R8912 += 1, R5992 += 1 };
  s0 -> s2 [0, 65535] { R8986 += 1, R8912 += 1, R5991 += 1, R5992 += 1 };
  s0 -> s3 [0, 65535] { R8986 += 1, R8911 += 1, R8912 += 1 };
  s0 -> s0 [0, 65535] { R8985 += 1, R8986 += 1 };
  s0 -> s4 [63, 63] { R8986 += 1, R8912 += 1, R5992 += 1 };
  s0 -> s1 [64, 65535] { R8986 += 1, R8912 += 1, R5992 += 1 };
  s1 -> s1 [0, 65535] { R8986 += 1, R8912 += 1, R5992 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s7 [0, 65535] { R8986 += 1, R8912 += 1 };
  s1 -> s6 [0, 65535] { R8986 += 1 };
  s2 -> s1 [0, 62] { R8986 += 1, R8912 += 1, R5992 += 1 };
  s2 -> s2 [0, 65535] { R8986 += 1, R8912 += 1, R5991 += 1, R5992 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R8986 += 1 };
  s2 -> s4 [63, 63] { R8986 += 1, R8912 += 1, R5992 += 1 };
  s2 -> s1 [64, 65535] { R8986 += 1, R8912 += 1, R5992 += 1 };
  s3 -> s1 [0, 62] { R8986 += 1, R8912 += 1, R5992 += 1 };
  s3 -> s2 [0, 65535] { R8986 += 1, R8912 += 1, R5991 += 1, R5992 += 1 };
  s3 -> s3 [0, 65535] { R8986 += 1, R8911 += 1, R8912 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s4 [63, 63] { R8986 += 1, R8912 += 1, R5992 += 1 };
  s3 -> s1 [64, 65535] { R8986 += 1, R8912 += 1, R5992 += 1 };
  s4 -> s1 [0, 65535] { R8986 += 1, R8912 += 1, R5992 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8986 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R8986 += 1, R8912 += 1 };
  s7 -> s6 [0, 65535] { R8986 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 65535] { R8988 += 1, R8913 += 1, R8914 += 1 };
  s0 -> s2 [0, 65535] { R8988 += 1, R8914 += 1, R5994 += 1, R5 += 1 };
  s0 -> s3 [0, 65535] { R8988 += 1, R8914 += 1, R5993 += 1, R5994 += 1 };
  s0 -> s0 [0, 65535] { R8987 += 1, R8988 += 1 };
  s1 -> s1 [0, 65535] { R8988 += 1, R8913 += 1, R8914 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R8988 += 1, R8914 += 1, R5994 += 1, R5 += 1 };
  s1 -> s3 [0, 65535] { R8988 += 1, R8914 += 1, R5993 += 1, R5994 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8988 += 1, R8914 += 1, R5994 += 1, R5 += 1 };
  s2 -> s6 [0, 65535] { R8988 += 1, R8914 += 1 };
  s2 -> s5 [0, 65535] { R8988 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R8988 += 1, R8914 += 1, R5994 += 1, R5 += 1 };
  s3 -> s3 [0, 65535] { R8988 += 1, R8914 += 1, R5993 += 1, R5994 += 1 };
  s3 -> s5 [0, 65535] { R8988 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8988 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R8988 += 1, R8914 += 1 };
  s6 -> s5 [0, 65535] { R8988 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 43] { R8990 += 1, R8944 += 1 };
  s0 -> s0 [0, 65535] { R8989 += 1, R8990 += 1 };
  s0 -> s2 [0, 65535] { R8990 += 1, R8943 += 1, R8944 += 1 };
  s0 -> s1 [45, 63] { R8990 += 1, R8944 += 1 };
  s0 -> s3 [87, 87] { R8990 += 1, R8944 += 1 };
  s0 -> s1 [88, 65535] { R8990 += 1, R8944 += 1 };
  s1 -> s1 [0, 43] { R8990 += 1, R8944 += 1 };
  s1 -> s1 [45, 63] { R8990 += 1, R8944 += 1 };
  s1 -> s3 [87, 87] { R8990 += 1, R8944 += 1 };
  s1 -> s1 [88, 65535] { R8990 += 1, R8944 += 1 };
  s2 -> s1 [0, 43] { R8990 += 1, R8944 += 1 };
  s2 -> s2 [0, 65535] { R8990 += 1, R8943 += 1, R8944 += 1 };
  s2 -> s1 [45, 63] { R8990 += 1, R8944 += 1 };
  s2 -> s3 [87, 87] { R8990 += 1, R8944 += 1 };
  s2 -> s1 [88, 65535] { R8990 += 1, R8944 += 1 };
  s3 -> s3 [0, 43] { R8990 += 1, R8944 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8990 += 1 };
  s3 -> s3 [45, 63] { R8990 += 1, R8944 += 1 };
  s3 -> s3 [87, 65535] { R8990 += 1, R8944 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_10 {
  init s0;
  s0 -> s0 [0, 65535] { R8991 += 1, R8992 += 1 };
  s0 -> s1 [0, 65535] { R8992 += 1, R8946 += 1, R2 += 1 };
  s0 -> s2 [0, 65535] { R8992 += 1, R8945 += 1, R8946 += 1 };
  s1 -> s4 [0, 65535] { R8992 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R8992 += 1, R8946 += 1, R2 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R8992 += 1, R8946 += 1, R2 += 1 };
  s2 -> s2 [0, 65535] { R8992 += 1, R8945 += 1, R8946 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8992 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 57] { R8994 += 1, R8948 += 1 };
  s0 -> s2 [0, 65535] { R8994 += 1, R8947 += 1, R8948 += 1 };
  s0 -> s3 [0, 65535] { R8994 += 1, R8948 += 1, R10 += 1 };
  s0 -> s0 [0, 65535] { R8993 += 1, R8994 += 1 };
  s0 -> s4 [58, 58] { R8994 += 1, R8948 += 1 };
  s0 -> s1 [59, 65535] { R8994 += 1, R8948 += 1 };
  s1 -> s1 [0, 57] { R8994 += 1, R8948 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R8994 += 1 };
  s1 -> s4 [58, 58] { R8994 += 1, R8948 += 1 };
  s1 -> s1 [59, 65535] { R8994 += 1, R8948 += 1 };
  s2 -> s1 [0, 57] { R8994 += 1, R8948 += 1 };
  s2 -> s2 [0, 65535] { R8994 += 1, R8947 += 1, R8948 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R8994 += 1, R8948 += 1, R10 += 1 };
  s2 -> s4 [58, 58] { R8994 += 1, R8948 += 1 };
  s2 -> s1 [59, 65535] { R8994 += 1, R8948 += 1 };
  s3 -> s1 [0, 57] { R8994 += 1, R8948 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R8994 += 1, R8948 += 1, R10 += 1 };
  s3 -> s6 [0, 65535] { R8994 += 1 };
  s3 -> s4 [58, 58] { R8994 += 1, R8948 += 1 };
  s3 -> s1 [59, 65535] { R8994 += 1, R8948 += 1 };
  s4 -> s4 [0, 65535] { R8994 += 1, R8948 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8994 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 86] { R8996 += 1, R8950 += 1 };
  s0 -> s2 [0, 65535] { R8996 += 1, R8949 += 1, R8950 += 1 };
  s0 -> s0 [0, 65535] { R8995 += 1, R8996 += 1 };
  s0 -> s3 [0, 65535] { R8996 += 1, R8950 += 1, R11 += 1 };
  s0 -> s4 [87, 87] { R8996 += 1, R8950 += 1 };
  s0 -> s1 [88, 65535] { R8996 += 1, R8950 += 1 };
  s1 -> s1 [0, 86] { R8996 += 1, R8950 += 1 };
  s1 -> s1 [0, 65535] { R8996 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s4 [87, 87] { R8996 += 1, R8950 += 1 };
  s1 -> s1 [88, 65535] { R8996 += 1, R8950 += 1 };
  s2 -> s1 [0, 86] { R8996 += 1, R8950 += 1 };
  s2 -> s2 [0, 65535] { R8996 += 1, R8949 += 1, R8950 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R8996 += 1, R8950 += 1, R11 += 1 };
  s2 -> s4 [87, 87] { R8996 += 1, R8950 += 1 };
  s2 -> s1 [88, 65535] { R8996 += 1, R8950 += 1 };
  s3 -> s1 [0, 86] { R8996 += 1, R8950 += 1 };
  s3 -> s5 [0, 65535] { R8996 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R8996 += 1, R8950 += 1, R11 += 1 };
  s3 -> s4 [87, 87] { R8996 += 1, R8950 += 1 };
  s3 -> s1 [88, 65535] { R8996 += 1, R8950 += 1 };
  s4 -> s4 [0, 65535] { R8996 += 1, R8950 += 1 };
  s5 -> s5 [0, 65535] { R8996 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 90] { R8998 += 1, R8952 += 1, R5996 += 1 };
  s0 -> s2 [0, 65535] { R8998 += 1, R8951 += 1, R8952 += 1 };
  s0 -> s3 [0, 65535] { R8998 += 1, R8952 += 1, R5995 += 1, R5996 += 1 };
  s0 -> s0 [0, 65535] { R8997 += 1, R8998 += 1 };
  s0 -> s4 [91, 91] { R8998 += 1, R8952 += 1, R5996 += 1 };
  s0 -> s1 [92, 65535] { R8998 += 1, R8952 += 1, R5996 += 1 };
  s1 -> s1 [0, 65535] { R8998 += 1, R8952 += 1, R5996 += 1 };
  s1 -> s5 [0, 65535] { R8998 += 1 };
  s1 -> s7 [0, 65535] { R8998 += 1, R8952 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s1 [0, 90] { R8998 += 1, R8952 += 1, R5996 += 1 };
  s2 -> s2 [0, 65535] { R8998 += 1, R8951 += 1, R8952 += 1 };
  s2 -> s3 [0, 65535] { R8998 += 1, R8952 += 1, R5995 += 1, R5996 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s4 [91, 91] { R8998 += 1, R8952 += 1, R5996 += 1 };
  s2 -> s1 [92, 65535] { R8998 += 1, R8952 += 1, R5996 += 1 };
  s3 -> s1 [0, 90] { R8998 += 1, R8952 += 1, R5996 += 1 };
  s3 -> s3 [0, 65535] { R8998 += 1, R8952 += 1, R5995 += 1, R5996 += 1 };
  s3 -> s5 [0, 65535] { R8998 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s4 [91, 91] { R8998 += 1, R8952 += 1, R5996 += 1 };
  s3 -> s1 [92, 65535] { R8998 += 1, R8952 += 1, R5996 += 1 };
  s4 -> s1 [0, 65535] { R8998 += 1, R8952 += 1, R5996 += 1 };
  s5 -> s5 [0, 65535] { R8998 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R8998 += 1 };
  s7 -> s7 [0, 65535] { R8998 += 1, R8952 += 1 };
  s7 -> s6 [0, 65535];
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s0 [0, 65535] { R8999 += 1, R9000 += 1 };
  s0 -> s1 [0, 65535] { R9000 += 1, R8954 += 1, R5998 += 1, R6 += 1 };
  s0 -> s2 [0, 65535] { R9000 += 1, R8953 += 1, R8954 += 1 };
  s0 -> s3 [0, 65535] { R9000 += 1, R8954 += 1, R5997 += 1, R5998 += 1 };
  s1 -> s4 [0, 65535] { R9000 += 1 };
  s1 -> s1 [0, 65535] { R9000 += 1, R8954 += 1, R5998 += 1, R6 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R9000 += 1, R8954 += 1 };
  s2 -> s1 [0, 65535] { R9000 += 1, R8954 += 1, R5998 += 1, R6 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R9000 += 1, R8953 += 1, R8954 += 1 };
  s2 -> s3 [0, 65535] { R9000 += 1, R8954 += 1, R5997 += 1, R5998 += 1 };
  s3 -> s4 [0, 65535] { R9000 += 1 };
  s3 -> s1 [0, 65535] { R9000 += 1, R8954 += 1, R5998 += 1, R6 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R9000 += 1, R8954 += 1, R5997 += 1, R5998 += 1 };
  s4 -> s4 [0, 65535] { R9000 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R9000 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9000 += 1, R8954 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R9002 += 1, R8955 += 1, R8956 += 1 };
  s0 -> s2 [0, 65535] { R9002 += 1, R8956 += 1, R8920 += 1, R5990 += 1 };
  s0 -> s3 [0, 65535] { R9002 += 1, R8956 += 1, R8919 += 1, R8920 += 1 };
  s0 -> s0 [0, 65535] { R9001 += 1, R9002 += 1 };
  s1 -> s1 [0, 65535] { R9002 += 1, R8955 += 1, R8956 += 1 };
  s1 -> s2 [0, 65535] { R9002 += 1, R8956 += 1, R8920 += 1, R5990 += 1 };
  s1 -> s3 [0, 65535] { R9002 += 1, R8956 += 1, R8919 += 1, R8920 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s4 [0, 65535] { R9002 += 1 };
  s2 -> s2 [0, 65535] { R9002 += 1, R8956 += 1, R8920 += 1, R5990 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R9002 += 1, R8956 += 1 };
  s3 -> s4 [0, 65535] { R9002 += 1 };
  s3 -> s2 [0, 65535] { R9002 += 1, R8956 += 1, R8920 += 1, R5990 += 1 };
  s3 -> s3 [0, 65535] { R9002 += 1, R8956 += 1, R8919 += 1, R8920 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R9002 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R9002 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9002 += 1, R8956 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R9004 += 1, R8958 += 1, R8921 += 1, R8922 += 1 };
  s0 -> s2 [0, 65535] { R9004 += 1, R8957 += 1, R8958 += 1 };
  s0 -> s0 [0, 65535] { R9003 += 1, R9004 += 1 };
  s0 -> s3 [108, 108] { R9004 += 1, R8958 += 1, R8922 += 1 };
  s1 -> s1 [0, 65535] { R9004 += 1, R8958 += 1, R8921 += 1, R8922 += 1 };
  s1 -> s3 [108, 108] { R9004 += 1, R8958 += 1, R8922 += 1 };
  s2 -> s1 [0, 65535] { R9004 += 1, R8958 += 1, R8921 += 1, R8922 += 1 };
  s2 -> s2 [0, 65535] { R9004 += 1, R8957 += 1, R8958 += 1 };
  s2 -> s3 [108, 108] { R9004 += 1, R8958 += 1, R8922 += 1 };
  s3 -> s4 [111, 111] { R9004 += 1, R8958 += 1, R8922 += 1 };
  s4 -> s5 [99, 99] { R9004 += 1, R8958 += 1, R8922 += 1 };
  s5 -> s5 [0, 65535] { R9004 += 1, R8958 += 1 };
  s5 -> s6 [0, 65535] { R9004 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s6 [0, 65535] { R9004 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s5, s6, s7;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 86] { R9006 += 1, R8960 += 1, R8928 += 1 };
  s0 -> s0 [0, 65535] { R9005 += 1, R9006 += 1 };
  s0 -> s2 [0, 65535] { R9006 += 1, R8959 += 1, R8960 += 1 };
  s0 -> s3 [0, 65535] { R9006 += 1, R8960 += 1, R8927 += 1, R8928 += 1 };
  s0 -> s4 [87, 87] { R9006 += 1, R8960 += 1, R8928 += 1 };
  s0 -> s1 [88, 65535] { R9006 += 1, R8960 += 1, R8928 += 1 };
  s1 -> s1 [0, 86] { R9006 += 1, R8960 += 1, R8928 += 1 };
  s1 -> s4 [87, 87] { R9006 += 1, R8960 += 1, R8928 += 1 };
  s1 -> s1 [88, 65535] { R9006 += 1, R8960 += 1, R8928 += 1 };
  s2 -> s1 [0, 86] { R9006 += 1, R8960 += 1, R8928 += 1 };
  s2 -> s2 [0, 65535] { R9006 += 1, R8959 += 1, R8960 += 1 };
  s2 -> s3 [0, 65535] { R9006 += 1, R8960 += 1, R8927 += 1, R8928 += 1 };
  s2 -> s4 [87, 87] { R9006 += 1, R8960 += 1, R8928 += 1 };
  s2 -> s1 [88, 65535] { R9006 += 1, R8960 += 1, R8928 += 1 };
  s3 -> s1 [0, 86] { R9006 += 1, R8960 += 1, R8928 += 1 };
  s3 -> s3 [0, 65535] { R9006 += 1, R8960 += 1, R8927 += 1, R8928 += 1 };
  s3 -> s4 [87, 87] { R9006 += 1, R8960 += 1, R8928 += 1 };
  s3 -> s1 [88, 65535] { R9006 += 1, R8960 += 1, R8928 += 1 };
  s4 -> s4 [0, 65535] { R9006 += 1, R8960 += 1, R8928 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R9006 += 1 };
  s4 -> s7 [0, 65535] { R9006 += 1, R8960 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9006 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R9006 += 1 };
  s7 -> s7 [0, 65535] { R9006 += 1, R8960 += 1 };
  accepting s4, s5, s6, s7;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R9008 += 1, R8962 += 1, R8930 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R9007 += 1, R9008 += 1 };
  s0 -> s2 [0, 65535] { R9008 += 1, R8961 += 1, R8962 += 1 };
  s0 -> s3 [0, 65535] { R9008 += 1, R8962 += 1, R8929 += 1, R8930 += 1 };
  s1 -> s6 [0, 65535] { R9008 += 1, R8962 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R9008 += 1, R8962 += 1, R8930 += 1, R1 += 1 };
  s1 -> s5 [0, 65535] { R9008 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R9008 += 1, R8962 += 1, R8930 += 1, R1 += 1 };
  s2 -> s2 [0, 65535] { R9008 += 1, R8961 += 1, R8962 += 1 };
  s2 -> s3 [0, 65535] { R9008 += 1, R8962 += 1, R8929 += 1, R8930 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R9008 += 1, R8962 += 1, R8930 += 1, R1 += 1 };
  s3 -> s5 [0, 65535] { R9008 += 1 };
  s3 -> s3 [0, 65535] { R9008 += 1, R8962 += 1, R8929 += 1, R8930 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R9008 += 1 };
  s6 -> s6 [0, 65535] { R9008 += 1, R8962 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R9008 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 86] { R9010 += 1, R8964 += 1, R8932 += 1 };
  s0 -> s0 [0, 65535] { R9009 += 1, R9010 += 1 };
  s0 -> s2 [0, 65535] { R9010 += 1, R8964 += 1, R8931 += 1, R8932 += 1 };
  s0 -> s3 [0, 65535] { R9010 += 1, R8964 += 1, R8932 += 1, R7 += 1 };
  s0 -> s4 [0, 65535] { R9010 += 1, R8963 += 1, R8964 += 1 };
  s0 -> s5 [87, 87] { R9010 += 1, R8964 += 1, R8932 += 1 };
  s0 -> s1 [88, 65535] { R9010 += 1, R8964 += 1, R8932 += 1 };
  s1 -> s1 [0, 86] { R9010 += 1, R8964 += 1, R8932 += 1 };
  s1 -> s8 [0, 65535] { R9010 += 1 };
  s1 -> s1 [0, 65535] { R9010 += 1, R8964 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s5 [87, 87] { R9010 += 1, R8964 += 1, R8932 += 1 };
  s1 -> s1 [88, 65535] { R9010 += 1, R8964 += 1, R8932 += 1 };
  s2 -> s1 [0, 86] { R9010 += 1, R8964 += 1, R8932 += 1 };
  s2 -> s8 [0, 65535] { R9010 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R9010 += 1, R8964 += 1, R8931 += 1, R8932 += 1 };
  s2 -> s3 [0, 65535] { R9010 += 1, R8964 += 1, R8932 += 1, R7 += 1 };
  s2 -> s5 [87, 87] { R9010 += 1, R8964 += 1, R8932 += 1 };
  s2 -> s1 [88, 65535] { R9010 += 1, R8964 += 1, R8932 += 1 };
  s3 -> s1 [0, 86] { R9010 += 1, R8964 += 1, R8932 += 1 };
  s3 -> s7 [0, 65535] { R9010 += 1, R8964 += 1 };
  s3 -> s8 [0, 65535] { R9010 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R9010 += 1, R8964 += 1, R8932 += 1, R7 += 1 };
  s3 -> s5 [87, 87] { R9010 += 1, R8964 += 1, R8932 += 1 };
  s3 -> s1 [88, 65535] { R9010 += 1, R8964 += 1, R8932 += 1 };
  s4 -> s1 [0, 86] { R9010 += 1, R8964 += 1, R8932 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s2 [0, 65535] { R9010 += 1, R8964 += 1, R8931 += 1, R8932 += 1 };
  s4 -> s3 [0, 65535] { R9010 += 1, R8964 += 1, R8932 += 1, R7 += 1 };
  s4 -> s4 [0, 65535] { R9010 += 1, R8963 += 1, R8964 += 1 };
  s4 -> s5 [87, 87] { R9010 += 1, R8964 += 1, R8932 += 1 };
  s4 -> s1 [88, 65535] { R9010 += 1, R8964 += 1, R8932 += 1 };
  s5 -> s5 [0, 65535] { R9010 += 1, R8964 += 1, R8932 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R9010 += 1, R8964 += 1 };
  s7 -> s8 [0, 65535] { R9010 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R9010 += 1 };
  s8 -> s6 [0, 65535];
  accepting s3, s4, s8, s2, s6, s1, s7, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 86] { R9012 += 1, R8966 += 1, R8934 += 1, R8916 += 1 };
  s0 -> s2 [0, 65535] { R9012 += 1, R8966 += 1, R8934 += 1, R8915 += 1, R8916 += 1 };
  s0 -> s3 [0, 65535] { R9012 += 1, R8965 += 1, R8966 += 1 };
  s0 -> s0 [0, 65535] { R9011 += 1, R9012 += 1 };
  s0 -> s4 [0, 65535] { R9012 += 1, R8966 += 1, R8933 += 1, R8934 += 1 };
  s0 -> s1 [88, 65535] { R9012 += 1, R8966 += 1, R8934 += 1, R8916 += 1 };
  s1 -> s1 [0, 86] { R9012 += 1, R8966 += 1, R8934 += 1, R8916 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s7 [0, 65535] { R9012 += 1, R8966 += 1 };
  s1 -> s6 [0, 65535] { R9012 += 1 };
  s1 -> s1 [0, 65535] { R9012 += 1, R8966 += 1, R8934 += 1 };
  s1 -> s1 [88, 65535] { R9012 += 1, R8966 += 1, R8934 += 1, R8916 += 1 };
  s2 -> s1 [0, 86] { R9012 += 1, R8966 += 1, R8934 += 1, R8916 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s7 [0, 65535] { R9012 += 1, R8966 += 1 };
  s2 -> s2 [0, 65535] { R9012 += 1, R8966 += 1, R8934 += 1, R8915 += 1, R8916 += 1 };
  s2 -> s6 [0, 65535] { R9012 += 1 };
  s2 -> s1 [88, 65535] { R9012 += 1, R8966 += 1, R8934 += 1, R8916 += 1 };
  s3 -> s1 [0, 86] { R9012 += 1, R8966 += 1, R8934 += 1, R8916 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R9012 += 1, R8966 += 1, R8934 += 1, R8915 += 1, R8916 += 1 };
  s3 -> s3 [0, 65535] { R9012 += 1, R8965 += 1, R8966 += 1 };
  s3 -> s4 [0, 65535] { R9012 += 1, R8966 += 1, R8933 += 1, R8934 += 1 };
  s3 -> s1 [88, 65535] { R9012 += 1, R8966 += 1, R8934 += 1, R8916 += 1 };
  s4 -> s1 [0, 86] { R9012 += 1, R8966 += 1, R8934 += 1, R8916 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s2 [0, 65535] { R9012 += 1, R8966 += 1, R8934 += 1, R8915 += 1, R8916 += 1 };
  s4 -> s4 [0, 65535] { R9012 += 1, R8966 += 1, R8933 += 1, R8934 += 1 };
  s4 -> s6 [0, 65535] { R9012 += 1 };
  s4 -> s1 [88, 65535] { R9012 += 1, R8966 += 1, R8934 += 1, R8916 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9012 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R9012 += 1, R8966 += 1 };
  s7 -> s6 [0, 65535] { R9012 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 65535] { R9014 += 1, R8968 += 1, R8936 += 1, R8918 += 1, R5988 += 1 };
  s0 -> s0 [0, 65535] { R9013 += 1, R9014 += 1 };
  s0 -> s2 [0, 65535] { R9014 += 1, R8968 += 1, R8935 += 1, R8936 += 1 };
  s0 -> s3 [0, 65535] { R9014 += 1, R8967 += 1, R8968 += 1 };
  s0 -> s4 [0, 65535] { R9014 += 1, R8968 += 1, R8936 += 1, R8917 += 1, R8918 += 1 };
  s1 -> s1 [0, 65535] { R9014 += 1, R8968 += 1, R8936 += 1, R8918 += 1, R5988 += 1 };
  s1 -> s5 [0, 65535] { R9014 += 1 };
  s1 -> s8 [0, 65535] { R9014 += 1, R8968 += 1, R8936 += 1 };
  s1 -> s6 [0, 65535] { R9014 += 1, R8968 += 1 };
  s1 -> s7 [0, 65535];
  s2 -> s1 [0, 65535] { R9014 += 1, R8968 += 1, R8936 += 1, R8918 += 1, R5988 += 1 };
  s2 -> s5 [0, 65535] { R9014 += 1 };
  s2 -> s2 [0, 65535] { R9014 += 1, R8968 += 1, R8935 += 1, R8936 += 1 };
  s2 -> s4 [0, 65535] { R9014 += 1, R8968 += 1, R8936 += 1, R8917 += 1, R8918 += 1 };
  s2 -> s7 [0, 65535];
  s3 -> s1 [0, 65535] { R9014 += 1, R8968 += 1, R8936 += 1, R8918 += 1, R5988 += 1 };
  s3 -> s2 [0, 65535] { R9014 += 1, R8968 += 1, R8935 += 1, R8936 += 1 };
  s3 -> s3 [0, 65535] { R9014 += 1, R8967 += 1, R8968 += 1 };
  s3 -> s4 [0, 65535] { R9014 += 1, R8968 += 1, R8936 += 1, R8917 += 1, R8918 += 1 };
  s3 -> s7 [0, 65535];
  s4 -> s1 [0, 65535] { R9014 += 1, R8968 += 1, R8936 += 1, R8918 += 1, R5988 += 1 };
  s4 -> s5 [0, 65535] { R9014 += 1 };
  s4 -> s6 [0, 65535] { R9014 += 1, R8968 += 1 };
  s4 -> s4 [0, 65535] { R9014 += 1, R8968 += 1, R8936 += 1, R8917 += 1, R8918 += 1 };
  s4 -> s7 [0, 65535];
  s5 -> s5 [0, 65535] { R9014 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s5 [0, 65535] { R9014 += 1 };
  s6 -> s6 [0, 65535] { R9014 += 1, R8968 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  s8 -> s5 [0, 65535] { R9014 += 1 };
  s8 -> s8 [0, 65535] { R9014 += 1, R8968 += 1, R8936 += 1 };
  s8 -> s6 [0, 65535] { R9014 += 1, R8968 += 1 };
  s8 -> s7 [0, 65535];
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s0 [0, 65535] { R9015 += 1, R9016 += 1 };
  s0 -> s1 [0, 65535] { R9016 += 1, R8970 += 1, R8937 += 1, R8938 += 1 };
  s0 -> s2 [0, 65535] { R9016 += 1, R8970 += 1, R8938 += 1 };
  s0 -> s3 [0, 65535] { R9016 += 1, R8969 += 1, R8970 += 1 };
  s1 -> s1 [0, 65535] { R9016 += 1, R8970 += 1, R8937 += 1, R8938 += 1 };
  s1 -> s5 [0, 65535] { R9016 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R9016 += 1, R8970 += 1, R8938 += 1 };
  s2 -> s5 [0, 65535] { R9016 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s6 [0, 65535] { R9016 += 1, R8970 += 1 };
  s2 -> s2 [0, 65535] { R9016 += 1, R8970 += 1, R8938 += 1 };
  s3 -> s1 [0, 65535] { R9016 += 1, R8970 += 1, R8937 += 1, R8938 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R9016 += 1, R8970 += 1, R8938 += 1 };
  s3 -> s3 [0, 65535] { R9016 += 1, R8969 += 1, R8970 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R9016 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R9016 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R9016 += 1, R8970 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 65535] { R9018 += 1, R8972 += 1, R8940 += 1, R8924 += 1, R5989 += 1 };
  s0 -> s2 [0, 65535] { R9018 += 1, R8971 += 1, R8972 += 1 };
  s0 -> s3 [0, 65535] { R9018 += 1, R8972 += 1, R8940 += 1, R8923 += 1, R8924 += 1 };
  s0 -> s0 [0, 65535] { R9017 += 1, R9018 += 1 };
  s0 -> s4 [0, 65535] { R9018 += 1, R8972 += 1, R8939 += 1, R8940 += 1 };
  s1 -> s1 [0, 65535] { R9018 += 1, R8972 += 1, R8940 += 1, R8924 += 1, R5989 += 1 };
  s1 -> s8 [0, 65535] { R9018 += 1, R8972 += 1, R8940 += 1 };
  s1 -> s7 [0, 65535] { R9018 += 1, R8972 += 1 };
  s1 -> s5 [0, 65535] { R9018 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s1 [0, 65535] { R9018 += 1, R8972 += 1, R8940 += 1, R8924 += 1, R5989 += 1 };
  s2 -> s2 [0, 65535] { R9018 += 1, R8971 += 1, R8972 += 1 };
  s2 -> s3 [0, 65535] { R9018 += 1, R8972 += 1, R8940 += 1, R8923 += 1, R8924 += 1 };
  s2 -> s4 [0, 65535] { R9018 += 1, R8972 += 1, R8939 += 1, R8940 += 1 };
  s2 -> s6 [0, 65535];
  s3 -> s1 [0, 65535] { R9018 += 1, R8972 += 1, R8940 += 1, R8924 += 1, R5989 += 1 };
  s3 -> s3 [0, 65535] { R9018 += 1, R8972 += 1, R8940 += 1, R8923 += 1, R8924 += 1 };
  s3 -> s7 [0, 65535] { R9018 += 1, R8972 += 1 };
  s3 -> s5 [0, 65535] { R9018 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s1 [0, 65535] { R9018 += 1, R8972 += 1, R8940 += 1, R8924 += 1, R5989 += 1 };
  s4 -> s3 [0, 65535] { R9018 += 1, R8972 += 1, R8940 += 1, R8923 += 1, R8924 += 1 };
  s4 -> s5 [0, 65535] { R9018 += 1 };
  s4 -> s4 [0, 65535] { R9018 += 1, R8972 += 1, R8939 += 1, R8940 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R9018 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R9018 += 1, R8972 += 1 };
  s7 -> s5 [0, 65535] { R9018 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R9018 += 1, R8972 += 1, R8940 += 1 };
  s8 -> s7 [0, 65535] { R9018 += 1, R8972 += 1 };
  s8 -> s5 [0, 65535] { R9018 += 1 };
  s8 -> s6 [0, 65535];
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 65535] { R9020 += 1, R8974 += 1, R8942 += 1, R8925 += 1, R8926 += 1 };
  s0 -> s0 [0, 65535] { R9019 += 1, R9020 += 1 };
  s0 -> s2 [0, 65535] { R9020 += 1, R8974 += 1, R8941 += 1, R8942 += 1 };
  s0 -> s3 [0, 65535] { R9020 += 1, R8973 += 1, R8974 += 1 };
  s0 -> s4 [97, 97] { R9020 += 1, R8974 += 1, R8942 += 1, R8926 += 1 };
  s1 -> s1 [0, 65535] { R9020 += 1, R8974 += 1, R8942 += 1, R8925 += 1, R8926 += 1 };
  s1 -> s4 [97, 97] { R9020 += 1, R8974 += 1, R8942 += 1, R8926 += 1 };
  s2 -> s1 [0, 65535] { R9020 += 1, R8974 += 1, R8942 += 1, R8925 += 1, R8926 += 1 };
  s2 -> s2 [0, 65535] { R9020 += 1, R8974 += 1, R8941 += 1, R8942 += 1 };
  s2 -> s4 [97, 97] { R9020 += 1, R8974 += 1, R8942 += 1, R8926 += 1 };
  s3 -> s1 [0, 65535] { R9020 += 1, R8974 += 1, R8942 += 1, R8925 += 1, R8926 += 1 };
  s3 -> s2 [0, 65535] { R9020 += 1, R8974 += 1, R8941 += 1, R8942 += 1 };
  s3 -> s3 [0, 65535] { R9020 += 1, R8973 += 1, R8974 += 1 };
  s3 -> s4 [97, 97] { R9020 += 1, R8974 += 1, R8942 += 1, R8926 += 1 };
  s4 -> s5 [108, 108] { R9020 += 1, R8974 += 1, R8942 += 1, R8926 += 1 };
  s5 -> s6 [104, 104] { R9020 += 1, R8974 += 1, R8942 += 1, R8926 += 1 };
  s6 -> s7 [111, 111] { R9020 += 1, R8974 += 1, R8942 += 1, R8926 += 1 };
  s7 -> s8 [115, 115] { R9020 += 1, R8974 += 1, R8942 += 1, R8926 += 1 };
  s8 -> s9 [116, 116] { R9020 += 1, R8974 += 1, R8942 += 1, R8926 += 1 };
  s9 -> s10 [0, 65535] { R9020 += 1 };
  s9 -> s9 [0, 65535] { R9020 += 1, R8974 += 1, R8942 += 1 };
  s9 -> s11 [0, 65535] { R9020 += 1, R8974 += 1 };
  s9 -> s12 [0, 65535];
  s10 -> s10 [0, 65535] { R9020 += 1 };
  s10 -> s12 [0, 65535];
  s11 -> s10 [0, 65535] { R9020 += 1 };
  s11 -> s11 [0, 65535] { R9020 += 1, R8974 += 1 };
  s11 -> s12 [0, 65535];
  s12 -> s12 [0, 65535];
  accepting s9, s10, s11, s12;
};
};
constraint R1 = 0 && R2 = R8942 && R3 = R8914 && R4 = R9020 && R15 = 0 && R16 = R8974 && R5995 = 0 && R5996 = 1 && R5997 = 0 && R5998 = 1 && R8907 - R8974 = 1 && R8908 = R8914 && R8909 - R8974 = 1 && R8910 = R8914 && R8911 - R8974 = 1 && R8912 = R8914 && R8913 - R8974 = 1 && R8921 = 0 && R8922 = 0 && R8925 = 0 && R8926 = 0 && R8927 = 0 && R8928 = R8942 && R8929 = 0 && R8930 = R8942 && R8931 = 0 && R8932 = R8942 && R8933 = 0 && R8934 = R8942 && R8935 = 0 && R8936 = R8942 && R8937 = 0 && R8938 = R8942 && R8939 = 0 && R8940 = R8942 && R8941 = 0 && R8943 = 0 && R8944 = R8974 && R8945 = 0 && R8946 = R8974 && R8947 = 0 && R8948 = R8974 && R8949 = 0 && R8950 = R8974 && R8951 = 0 && R8952 = R8974 && R8953 = 0 && R8954 = R8974 && R8955 = 0 && R8956 = R8974 && R8957 = 0 && R8958 = R8974 && R8959 = 0 && R8960 = R8974 && R8961 = 0 && R8962 = R8974 && R8963 = 0 && R8964 = R8974 && R8965 = 0 && R8966 = R8974 && R8967 = 0 && R8968 = R8974 && R8969 = 0 && R8970 = R8974 && R8971 = 0 && R8972 = R8974 && R8973 = 0 && R8975 = 10 && R8976 = R9020 && R8977 = 10 && R8978 = R9020 && R8979 = 10 && R8980 = R9020 && R8981 = 10 && R8982 = R9020 && R8983 = 10 && R8984 = R9020 && R8985 = 10 && R8986 = R9020 && R8987 = 10 && R8988 = R9020 && R8989 = 10 && R8990 = R9020 && R8991 = 10 && R8992 = R9020 && R8993 = 10 && R8994 = R9020 && R8995 = 10 && R8996 = R9020 && R8997 = 10 && R8998 = R9020 && R8999 = 10 && R9000 = R9020 && R9001 = 10 && R9002 = R9020 && R9003 = 10 && R9004 = R9020 && R9005 = 10 && R9006 = R9020 && R9007 = 10 && R9008 = R9020 && R9009 = 10 && R9010 = R9020 && R9011 = 10 && R9012 = R9020 && R9013 = 10 && R9014 = R9020 && R9015 = 10 && R9016 = R9020 && R9017 = 10 && R9018 = R9020 && R9019 = 10 && R0 != 0 && R7 < 1 && R10 < 1 && R11 < 1 && R8974 < R8914 && 0 < R8942 && -1 < R8974 && 9 < R9020 && (R5991 != 0 || ((R5 != 0 || ((R0 != R5992 || R5992 = 1 || R5992 < 0) && (R0 = R5992 || R5992 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R5992 || R5992 = 1 || R5992 < 0) && (R5992 != 1 || -1 < R0) && (R0 = R5992 || R5992 = 1))))) && (R5993 != 0 || ((R5 != 0 || ((R0 != R5994 || R5994 = 1 || R5994 < 0) && (R0 = R5994 || R5994 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R5994 || R5994 = 1 || R5994 < 0) && (R5994 != 1 || -1 < R0) && (R0 = R5994 || R5994 = 1))))) && (R5988 = 0 || (R8915 = 0 && R8916 = 0)) && (R5988 = 0 || (R8917 = 0 && R8918 = 0)) && (R5989 = 0 || (R8923 = 0 && R8924 = 0)) && (R5990 = 0 || (R8919 = 0 && R8920 = 0)) && (R5991 = 0 || (R5 = 0 && R0 < 0)) && (R5993 = 0 || (R5 = 0 && R0 < 0));
// End of Parikh automata intersection problem
