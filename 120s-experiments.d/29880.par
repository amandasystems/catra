// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11960, R11961, R12, R13, R17933, R17934, R17935, R17936, R17937, R17938, R17939, R17940, R17941, R17942, R17943, R17944, R17945, R17946, R17947, R17948, R17949, R17950, R17951, R18480, R18481, R18482, R18483, R18484, R18485, R18486, R18487, R18488, R18489, R18490, R18491, R18492, R18493, R18494, R18495, R18496, R18497, R18498, R18499, R18500, R18501, R18502, R18503, R18504, R18505, R18506, R18507, R18508, R18509, R18510, R18511, R18512, R18513, R18514, R18515, R18516, R18517, R18518, R18519, R18520, R18521, R18522, R18523, R18524, R18525, R18526, R18527, R18528, R18529, R18530, R18531, R18532, R18533, R18534, R18535, R18536, R18537, R18538, R18539, R18540, R18541, R18542, R18543, R18544, R18545, R18546, R18547, R18548, R18549, R18550, R18551, R18552, R18553, R18554, R18555, R18556, R18557, R18558, R18559, R18560, R18561, R18562, R18563, R18564, R18565, R18566, R18567, R18568, R18569, R18570, R18571, R18572, R18573, R18574, R18575, R18576, R18577, R18578, R18579, R18580, R18581, R18582, R18583, R18584, R18585, R2, R3, R4, R5, R6, R7;
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [119, 119];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R18541 += 1 };
  s0 -> s0 [0, 65535] { R18540 += 1, R18541 += 1 };
  s0 -> s2 [46, 46] { R18541 += 1 };
  s0 -> s3 [47, 47] { R18541 += 1 };
  s0 -> s1 [48, 65535] { R18541 += 1 };
  s1 -> s1 [0, 45] { R18541 += 1 };
  s1 -> s2 [46, 46] { R18541 += 1 };
  s1 -> s3 [47, 47] { R18541 += 1 };
  s1 -> s1 [48, 65535] { R18541 += 1 };
  s2 -> s1 [0, 45] { R18541 += 1 };
  s2 -> s2 [46, 46] { R18541 += 1 };
  s2 -> s3 [47, 47] { R18541 += 1 };
  s2 -> s1 [48, 114] { R18541 += 1 };
  s2 -> s8 [115, 115] { R18541 += 1 };
  s2 -> s1 [116, 65535] { R18541 += 1 };
  s3 -> s3 [0, 45] { R18541 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R18541 += 1 };
  s3 -> s3 [47, 65535] { R18541 += 1 };
  s4 -> s3 [0, 45] { R18541 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R18541 += 1 };
  s4 -> s3 [47, 114] { R18541 += 1 };
  s4 -> s5 [115, 115] { R18541 += 1 };
  s4 -> s3 [116, 65535] { R18541 += 1 };
  s5 -> s3 [0, 45] { R18541 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R18541 += 1 };
  s5 -> s3 [47, 110] { R18541 += 1 };
  s5 -> s6 [111, 111] { R18541 += 1 };
  s5 -> s3 [112, 65535] { R18541 += 1 };
  s6 -> s3 [0, 45] { R18541 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R18541 += 1 };
  s6 -> s3 [47, 98] { R18541 += 1 };
  s6 -> s7 [99, 99] { R18541 += 1 };
  s6 -> s3 [100, 65535] { R18541 += 1 };
  s7 -> s3 [0, 45] { R18541 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R18541 += 1 };
  s7 -> s3 [47, 106] { R18541 += 1 };
  s7 -> s3 [108, 65535] { R18541 += 1 };
  s8 -> s1 [0, 45] { R18541 += 1 };
  s8 -> s2 [46, 46] { R18541 += 1 };
  s8 -> s3 [47, 47] { R18541 += 1 };
  s8 -> s1 [48, 110] { R18541 += 1 };
  s8 -> s9 [111, 111] { R18541 += 1 };
  s8 -> s1 [112, 65535] { R18541 += 1 };
  s9 -> s1 [0, 45] { R18541 += 1 };
  s9 -> s2 [46, 46] { R18541 += 1 };
  s9 -> s3 [47, 47] { R18541 += 1 };
  s9 -> s1 [48, 98] { R18541 += 1 };
  s9 -> s10 [99, 99] { R18541 += 1 };
  s9 -> s1 [100, 65535] { R18541 += 1 };
  s10 -> s1 [0, 45] { R18541 += 1 };
  s10 -> s2 [46, 46] { R18541 += 1 };
  s10 -> s3 [47, 47] { R18541 += 1 };
  s10 -> s1 [48, 106] { R18541 += 1 };
  s10 -> s1 [108, 65535] { R18541 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R18543 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R18542 += 1, R18543 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R18543 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R18545 += 1, R11961 += 1 };
  s0 -> s0 [0, 65535] { R18544 += 1, R18545 += 1 };
  s0 -> s2 [0, 65535] { R18545 += 1, R11960 += 1, R11961 += 1 };
  s0 -> s3 [47, 47] { R18545 += 1 };
  s0 -> s1 [48, 65535] { R18545 += 1, R11961 += 1 };
  s1 -> s1 [0, 46] { R18545 += 1, R11961 += 1 };
  s1 -> s3 [47, 47] { R18545 += 1 };
  s1 -> s1 [48, 65535] { R18545 += 1, R11961 += 1 };
  s2 -> s1 [0, 46] { R18545 += 1, R11961 += 1 };
  s2 -> s2 [0, 65535] { R18545 += 1, R11960 += 1, R11961 += 1 };
  s2 -> s3 [47, 47] { R18545 += 1 };
  s2 -> s1 [48, 65535] { R18545 += 1, R11961 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R18545 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 36] { R18547 += 1, R17945 += 1 };
  s0 -> s0 [0, 65535] { R18546 += 1, R18547 += 1 };
  s0 -> s2 [0, 65535] { R18547 += 1, R17944 += 1, R17945 += 1 };
  s0 -> s1 [38, 42] { R18547 += 1, R17945 += 1 };
  s0 -> s1 [44, 45] { R18547 += 1, R17945 += 1 };
  s0 -> s1 [47, 62] { R18547 += 1, R17945 += 1 };
  s0 -> s1 [64, 65535] { R18547 += 1, R17945 += 1 };
  s1 -> s1 [0, 36] { R18547 += 1, R17945 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R18547 += 1 };
  s1 -> s1 [38, 42] { R18547 += 1, R17945 += 1 };
  s1 -> s1 [44, 45] { R18547 += 1, R17945 += 1 };
  s1 -> s1 [47, 62] { R18547 += 1, R17945 += 1 };
  s1 -> s1 [64, 65535] { R18547 += 1, R17945 += 1 };
  s2 -> s1 [0, 36] { R18547 += 1, R17945 += 1 };
  s2 -> s2 [0, 65535] { R18547 += 1, R17944 += 1, R17945 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [38, 42] { R18547 += 1, R17945 += 1 };
  s2 -> s1 [44, 45] { R18547 += 1, R17945 += 1 };
  s2 -> s1 [47, 62] { R18547 += 1, R17945 += 1 };
  s2 -> s1 [64, 65535] { R18547 += 1, R17945 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s0 [0, 65535] { R18548 += 1, R18549 += 1 };
  s0 -> s1 [0, 65535] { R18549 += 1, R17946 += 1, R17947 += 1 };
  s0 -> s2 [0, 65535] { R18549 += 1, R17947 += 1, R0 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R18549 += 1, R17946 += 1, R17947 += 1 };
  s1 -> s2 [0, 65535] { R18549 += 1, R17947 += 1, R0 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R18549 += 1 };
  s2 -> s2 [0, 65535] { R18549 += 1, R17947 += 1, R0 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R18549 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 62] { R18551 += 1, R17949 += 1, R17937 += 1 };
  s0 -> s2 [0, 65535] { R18551 += 1, R17948 += 1, R17949 += 1 };
  s0 -> s3 [0, 65535] { R18551 += 1, R17949 += 1, R17936 += 1, R17937 += 1 };
  s0 -> s0 [0, 65535] { R18550 += 1, R18551 += 1 };
  s0 -> s4 [63, 63] { R18551 += 1, R17949 += 1, R17937 += 1 };
  s0 -> s1 [64, 65535] { R18551 += 1, R17949 += 1, R17937 += 1 };
  s1 -> s1 [0, 65535] { R18551 += 1, R17949 += 1, R17937 += 1 };
  s1 -> s5 [0, 65535] { R18551 += 1 };
  s1 -> s7 [0, 65535] { R18551 += 1, R17949 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s1 [0, 62] { R18551 += 1, R17949 += 1, R17937 += 1 };
  s2 -> s2 [0, 65535] { R18551 += 1, R17948 += 1, R17949 += 1 };
  s2 -> s3 [0, 65535] { R18551 += 1, R17949 += 1, R17936 += 1, R17937 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s4 [63, 63] { R18551 += 1, R17949 += 1, R17937 += 1 };
  s2 -> s1 [64, 65535] { R18551 += 1, R17949 += 1, R17937 += 1 };
  s3 -> s1 [0, 62] { R18551 += 1, R17949 += 1, R17937 += 1 };
  s3 -> s5 [0, 65535] { R18551 += 1 };
  s3 -> s3 [0, 65535] { R18551 += 1, R17949 += 1, R17936 += 1, R17937 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s4 [63, 63] { R18551 += 1, R17949 += 1, R17937 += 1 };
  s3 -> s1 [64, 65535] { R18551 += 1, R17949 += 1, R17937 += 1 };
  s4 -> s1 [0, 65535] { R18551 += 1, R17949 += 1, R17937 += 1 };
  s5 -> s5 [0, 65535] { R18551 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R18551 += 1 };
  s7 -> s7 [0, 65535] { R18551 += 1, R17949 += 1 };
  s7 -> s6 [0, 65535];
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 65535] { R18553 += 1, R17950 += 1, R17951 += 1 };
  s0 -> s2 [0, 65535] { R18553 += 1, R17951 += 1, R17939 += 1, R5 += 1 };
  s0 -> s3 [0, 65535] { R18553 += 1, R17951 += 1, R17938 += 1, R17939 += 1 };
  s0 -> s0 [0, 65535] { R18552 += 1, R18553 += 1 };
  s1 -> s1 [0, 65535] { R18553 += 1, R17950 += 1, R17951 += 1 };
  s1 -> s2 [0, 65535] { R18553 += 1, R17951 += 1, R17939 += 1, R5 += 1 };
  s1 -> s3 [0, 65535] { R18553 += 1, R17951 += 1, R17938 += 1, R17939 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R18553 += 1, R17951 += 1, R17939 += 1, R5 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R18553 += 1 };
  s2 -> s6 [0, 65535] { R18553 += 1, R17951 += 1 };
  s3 -> s2 [0, 65535] { R18553 += 1, R17951 += 1, R17939 += 1, R5 += 1 };
  s3 -> s3 [0, 65535] { R18553 += 1, R17951 += 1, R17938 += 1, R17939 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R18553 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R18553 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R18553 += 1 };
  s6 -> s6 [0, 65535] { R18553 += 1, R17951 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 43] { R18555 += 1, R18509 += 1 };
  s0 -> s2 [0, 65535] { R18555 += 1, R18508 += 1, R18509 += 1 };
  s0 -> s0 [0, 65535] { R18554 += 1, R18555 += 1 };
  s0 -> s1 [45, 63] { R18555 += 1, R18509 += 1 };
  s0 -> s3 [87, 87] { R18555 += 1, R18509 += 1 };
  s0 -> s1 [88, 65535] { R18555 += 1, R18509 += 1 };
  s1 -> s1 [0, 43] { R18555 += 1, R18509 += 1 };
  s1 -> s1 [45, 63] { R18555 += 1, R18509 += 1 };
  s1 -> s3 [87, 87] { R18555 += 1, R18509 += 1 };
  s1 -> s1 [88, 65535] { R18555 += 1, R18509 += 1 };
  s2 -> s1 [0, 43] { R18555 += 1, R18509 += 1 };
  s2 -> s2 [0, 65535] { R18555 += 1, R18508 += 1, R18509 += 1 };
  s2 -> s1 [45, 63] { R18555 += 1, R18509 += 1 };
  s2 -> s3 [87, 87] { R18555 += 1, R18509 += 1 };
  s2 -> s1 [88, 65535] { R18555 += 1, R18509 += 1 };
  s3 -> s3 [0, 43] { R18555 += 1, R18509 += 1 };
  s3 -> s3 [0, 65535] { R18555 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [45, 63] { R18555 += 1, R18509 += 1 };
  s3 -> s3 [87, 65535] { R18555 += 1, R18509 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_10 {
  init s0;
  s0 -> s0 [0, 65535] { R18556 += 1, R18557 += 1 };
  s0 -> s1 [0, 65535] { R18557 += 1, R18511 += 1, R2 += 1 };
  s0 -> s2 [0, 65535] { R18557 += 1, R18510 += 1, R18511 += 1 };
  s1 -> s1 [0, 65535] { R18557 += 1, R18511 += 1, R2 += 1 };
  s1 -> s4 [0, 65535] { R18557 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R18557 += 1, R18511 += 1, R2 += 1 };
  s2 -> s2 [0, 65535] { R18557 += 1, R18510 += 1, R18511 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R18557 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 57] { R18559 += 1, R18513 += 1 };
  s0 -> s0 [0, 65535] { R18558 += 1, R18559 += 1 };
  s0 -> s2 [0, 65535] { R18559 += 1, R18512 += 1, R18513 += 1 };
  s0 -> s3 [0, 65535] { R18559 += 1, R18513 += 1, R10 += 1 };
  s0 -> s4 [58, 58] { R18559 += 1, R18513 += 1 };
  s0 -> s1 [59, 65535] { R18559 += 1, R18513 += 1 };
  s1 -> s1 [0, 57] { R18559 += 1, R18513 += 1 };
  s1 -> s1 [0, 65535] { R18559 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s4 [58, 58] { R18559 += 1, R18513 += 1 };
  s1 -> s1 [59, 65535] { R18559 += 1, R18513 += 1 };
  s2 -> s1 [0, 57] { R18559 += 1, R18513 += 1 };
  s2 -> s2 [0, 65535] { R18559 += 1, R18512 += 1, R18513 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R18559 += 1, R18513 += 1, R10 += 1 };
  s2 -> s4 [58, 58] { R18559 += 1, R18513 += 1 };
  s2 -> s1 [59, 65535] { R18559 += 1, R18513 += 1 };
  s3 -> s1 [0, 57] { R18559 += 1, R18513 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R18559 += 1 };
  s3 -> s3 [0, 65535] { R18559 += 1, R18513 += 1, R10 += 1 };
  s3 -> s4 [58, 58] { R18559 += 1, R18513 += 1 };
  s3 -> s1 [59, 65535] { R18559 += 1, R18513 += 1 };
  s4 -> s4 [0, 65535] { R18559 += 1, R18513 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R18559 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 86] { R18561 += 1, R18515 += 1, R13 += 1 };
  s0 -> s2 [0, 65535] { R18561 += 1, R18514 += 1, R18515 += 1 };
  s0 -> s0 [0, 65535] { R18560 += 1, R18561 += 1 };
  s0 -> s3 [0, 65535] { R18561 += 1, R18515 += 1, R12 += 1, R13 += 1 };
  s0 -> s4 [87, 87] { R18561 += 1, R18515 += 1 };
  s0 -> s1 [88, 65535] { R18561 += 1, R18515 += 1, R13 += 1 };
  s1 -> s1 [0, 86] { R18561 += 1, R18515 += 1, R13 += 1 };
  s1 -> s4 [87, 87] { R18561 += 1, R18515 += 1 };
  s1 -> s1 [88, 65535] { R18561 += 1, R18515 += 1, R13 += 1 };
  s2 -> s1 [0, 86] { R18561 += 1, R18515 += 1, R13 += 1 };
  s2 -> s2 [0, 65535] { R18561 += 1, R18514 += 1, R18515 += 1 };
  s2 -> s3 [0, 65535] { R18561 += 1, R18515 += 1, R12 += 1, R13 += 1 };
  s2 -> s4 [87, 87] { R18561 += 1, R18515 += 1 };
  s2 -> s1 [88, 65535] { R18561 += 1, R18515 += 1, R13 += 1 };
  s3 -> s1 [0, 86] { R18561 += 1, R18515 += 1, R13 += 1 };
  s3 -> s3 [0, 65535] { R18561 += 1, R18515 += 1, R12 += 1, R13 += 1 };
  s3 -> s4 [87, 87] { R18561 += 1, R18515 += 1 };
  s3 -> s1 [88, 65535] { R18561 += 1, R18515 += 1, R13 += 1 };
  s4 -> s5 [0, 65535] { R18561 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R18561 += 1, R18515 += 1 };
  s5 -> s5 [0, 65535] { R18561 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s4, s5, s6;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 90] { R18563 += 1, R18517 += 1, R17941 += 1 };
  s0 -> s0 [0, 65535] { R18562 += 1, R18563 += 1 };
  s0 -> s2 [0, 65535] { R18563 += 1, R18516 += 1, R18517 += 1 };
  s0 -> s3 [0, 65535] { R18563 += 1, R18517 += 1, R17940 += 1, R17941 += 1 };
  s0 -> s4 [91, 91] { R18563 += 1, R18517 += 1, R17941 += 1 };
  s0 -> s1 [92, 65535] { R18563 += 1, R18517 += 1, R17941 += 1 };
  s1 -> s1 [0, 65535] { R18563 += 1, R18517 += 1, R17941 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R18563 += 1 };
  s1 -> s7 [0, 65535] { R18563 += 1, R18517 += 1 };
  s2 -> s1 [0, 90] { R18563 += 1, R18517 += 1, R17941 += 1 };
  s2 -> s2 [0, 65535] { R18563 += 1, R18516 += 1, R18517 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R18563 += 1, R18517 += 1, R17940 += 1, R17941 += 1 };
  s2 -> s4 [91, 91] { R18563 += 1, R18517 += 1, R17941 += 1 };
  s2 -> s1 [92, 65535] { R18563 += 1, R18517 += 1, R17941 += 1 };
  s3 -> s1 [0, 90] { R18563 += 1, R18517 += 1, R17941 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R18563 += 1 };
  s3 -> s3 [0, 65535] { R18563 += 1, R18517 += 1, R17940 += 1, R17941 += 1 };
  s3 -> s4 [91, 91] { R18563 += 1, R18517 += 1, R17941 += 1 };
  s3 -> s1 [92, 65535] { R18563 += 1, R18517 += 1, R17941 += 1 };
  s4 -> s1 [0, 65535] { R18563 += 1, R18517 += 1, R17941 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R18563 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R18563 += 1 };
  s7 -> s7 [0, 65535] { R18563 += 1, R18517 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R18565 += 1, R18519 += 1, R17942 += 1, R17943 += 1 };
  s0 -> s0 [0, 65535] { R18564 += 1, R18565 += 1 };
  s0 -> s2 [0, 65535] { R18565 += 1, R18519 += 1, R17943 += 1, R6 += 1 };
  s0 -> s3 [0, 65535] { R18565 += 1, R18518 += 1, R18519 += 1 };
  s1 -> s1 [0, 65535] { R18565 += 1, R18519 += 1, R17942 += 1, R17943 += 1 };
  s1 -> s2 [0, 65535] { R18565 += 1, R18519 += 1, R17943 += 1, R6 += 1 };
  s1 -> s6 [0, 65535] { R18565 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R18565 += 1, R18519 += 1 };
  s2 -> s2 [0, 65535] { R18565 += 1, R18519 += 1, R17943 += 1, R6 += 1 };
  s2 -> s6 [0, 65535] { R18565 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R18565 += 1, R18519 += 1, R17942 += 1, R17943 += 1 };
  s3 -> s2 [0, 65535] { R18565 += 1, R18519 += 1, R17943 += 1, R6 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R18565 += 1, R18518 += 1, R18519 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R18565 += 1, R18519 += 1 };
  s5 -> s6 [0, 65535] { R18565 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R18565 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s0 [0, 65535] { R18566 += 1, R18567 += 1 };
  s0 -> s1 [0, 65535] { R18567 += 1, R18520 += 1, R18521 += 1 };
  s0 -> s2 [0, 65535] { R18567 += 1, R18521 += 1, R18486 += 1, R18487 += 1 };
  s0 -> s3 [0, 65535] { R18567 += 1, R18521 += 1, R18487 += 1, R17935 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R18567 += 1, R18520 += 1, R18521 += 1 };
  s1 -> s2 [0, 65535] { R18567 += 1, R18521 += 1, R18486 += 1, R18487 += 1 };
  s1 -> s3 [0, 65535] { R18567 += 1, R18521 += 1, R18487 += 1, R17935 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R18567 += 1 };
  s2 -> s2 [0, 65535] { R18567 += 1, R18521 += 1, R18486 += 1, R18487 += 1 };
  s2 -> s3 [0, 65535] { R18567 += 1, R18521 += 1, R18487 += 1, R17935 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R18567 += 1 };
  s3 -> s3 [0, 65535] { R18567 += 1, R18521 += 1, R18487 += 1, R17935 += 1 };
  s3 -> s6 [0, 65535] { R18567 += 1, R18521 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R18567 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R18567 += 1 };
  s6 -> s6 [0, 65535] { R18567 += 1, R18521 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R18569 += 1, R18523 += 1 };
  s0 -> s2 [0, 65535] { R18569 += 1, R18522 += 1, R18523 += 1 };
  s0 -> s0 [0, 65535] { R18568 += 1, R18569 += 1 };
  s1 -> s1 [0, 65535] { R18569 += 1, R18523 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R18569 += 1 };
  s2 -> s1 [0, 65535] { R18569 += 1, R18523 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R18569 += 1, R18522 += 1, R18523 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R18569 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 86] { R18571 += 1, R18525 += 1, R18493 += 1 };
  s0 -> s2 [0, 65535] { R18571 += 1, R18525 += 1, R18492 += 1, R18493 += 1 };
  s0 -> s3 [0, 65535] { R18571 += 1, R18524 += 1, R18525 += 1 };
  s0 -> s0 [0, 65535] { R18570 += 1, R18571 += 1 };
  s0 -> s4 [87, 87] { R18571 += 1, R18525 += 1, R18493 += 1 };
  s0 -> s1 [88, 65535] { R18571 += 1, R18525 += 1, R18493 += 1 };
  s1 -> s1 [0, 86] { R18571 += 1, R18525 += 1, R18493 += 1 };
  s1 -> s4 [87, 87] { R18571 += 1, R18525 += 1, R18493 += 1 };
  s1 -> s1 [88, 65535] { R18571 += 1, R18525 += 1, R18493 += 1 };
  s2 -> s1 [0, 86] { R18571 += 1, R18525 += 1, R18493 += 1 };
  s2 -> s2 [0, 65535] { R18571 += 1, R18525 += 1, R18492 += 1, R18493 += 1 };
  s2 -> s4 [87, 87] { R18571 += 1, R18525 += 1, R18493 += 1 };
  s2 -> s1 [88, 65535] { R18571 += 1, R18525 += 1, R18493 += 1 };
  s3 -> s1 [0, 86] { R18571 += 1, R18525 += 1, R18493 += 1 };
  s3 -> s2 [0, 65535] { R18571 += 1, R18525 += 1, R18492 += 1, R18493 += 1 };
  s3 -> s3 [0, 65535] { R18571 += 1, R18524 += 1, R18525 += 1 };
  s3 -> s4 [87, 87] { R18571 += 1, R18525 += 1, R18493 += 1 };
  s3 -> s1 [88, 65535] { R18571 += 1, R18525 += 1, R18493 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R18571 += 1, R18525 += 1, R18493 += 1 };
  s4 -> s6 [0, 65535] { R18571 += 1, R18525 += 1 };
  s4 -> s7 [0, 65535] { R18571 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R18571 += 1, R18525 += 1 };
  s6 -> s7 [0, 65535] { R18571 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R18571 += 1 };
  accepting s4, s5, s6, s7;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R18573 += 1, R18527 += 1, R18495 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R18572 += 1, R18573 += 1 };
  s0 -> s2 [0, 65535] { R18573 += 1, R18526 += 1, R18527 += 1 };
  s0 -> s3 [0, 65535] { R18573 += 1, R18527 += 1, R18494 += 1, R18495 += 1 };
  s1 -> s4 [0, 65535] { R18573 += 1 };
  s1 -> s6 [0, 65535] { R18573 += 1, R18527 += 1 };
  s1 -> s1 [0, 65535] { R18573 += 1, R18527 += 1, R18495 += 1, R1 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R18573 += 1, R18527 += 1, R18495 += 1, R1 += 1 };
  s2 -> s2 [0, 65535] { R18573 += 1, R18526 += 1, R18527 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R18573 += 1, R18527 += 1, R18494 += 1, R18495 += 1 };
  s3 -> s4 [0, 65535] { R18573 += 1 };
  s3 -> s1 [0, 65535] { R18573 += 1, R18527 += 1, R18495 += 1, R1 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R18573 += 1, R18527 += 1, R18494 += 1, R18495 += 1 };
  s4 -> s4 [0, 65535] { R18573 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R18573 += 1 };
  s6 -> s6 [0, 65535] { R18573 += 1, R18527 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 86] { R18575 += 1, R18529 += 1, R18497 += 1 };
  s0 -> s2 [0, 65535] { R18575 += 1, R18528 += 1, R18529 += 1 };
  s0 -> s3 [0, 65535] { R18575 += 1, R18529 += 1, R18497 += 1, R7 += 1 };
  s0 -> s4 [0, 65535] { R18575 += 1, R18529 += 1, R18496 += 1, R18497 += 1 };
  s0 -> s0 [0, 65535] { R18574 += 1, R18575 += 1 };
  s0 -> s5 [87, 87] { R18575 += 1, R18529 += 1, R18497 += 1 };
  s0 -> s1 [88, 65535] { R18575 += 1, R18529 += 1, R18497 += 1 };
  s1 -> s1 [0, 86] { R18575 += 1, R18529 += 1, R18497 += 1 };
  s1 -> s6 [0, 65535] { R18575 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s1 [0, 65535] { R18575 += 1, R18529 += 1 };
  s1 -> s5 [87, 87] { R18575 += 1, R18529 += 1, R18497 += 1 };
  s1 -> s1 [88, 65535] { R18575 += 1, R18529 += 1, R18497 += 1 };
  s2 -> s1 [0, 86] { R18575 += 1, R18529 += 1, R18497 += 1 };
  s2 -> s2 [0, 65535] { R18575 += 1, R18528 += 1, R18529 += 1 };
  s2 -> s3 [0, 65535] { R18575 += 1, R18529 += 1, R18497 += 1, R7 += 1 };
  s2 -> s4 [0, 65535] { R18575 += 1, R18529 += 1, R18496 += 1, R18497 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s5 [87, 87] { R18575 += 1, R18529 += 1, R18497 += 1 };
  s2 -> s1 [88, 65535] { R18575 += 1, R18529 += 1, R18497 += 1 };
  s3 -> s1 [0, 86] { R18575 += 1, R18529 += 1, R18497 += 1 };
  s3 -> s8 [0, 65535] { R18575 += 1, R18529 += 1 };
  s3 -> s3 [0, 65535] { R18575 += 1, R18529 += 1, R18497 += 1, R7 += 1 };
  s3 -> s6 [0, 65535] { R18575 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s5 [87, 87] { R18575 += 1, R18529 += 1, R18497 += 1 };
  s3 -> s1 [88, 65535] { R18575 += 1, R18529 += 1, R18497 += 1 };
  s4 -> s1 [0, 86] { R18575 += 1, R18529 += 1, R18497 += 1 };
  s4 -> s3 [0, 65535] { R18575 += 1, R18529 += 1, R18497 += 1, R7 += 1 };
  s4 -> s4 [0, 65535] { R18575 += 1, R18529 += 1, R18496 += 1, R18497 += 1 };
  s4 -> s6 [0, 65535] { R18575 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s5 [87, 87] { R18575 += 1, R18529 += 1, R18497 += 1 };
  s4 -> s1 [88, 65535] { R18575 += 1, R18529 += 1, R18497 += 1 };
  s5 -> s5 [0, 65535] { R18575 += 1, R18529 += 1, R18497 += 1 };
  s6 -> s6 [0, 65535] { R18575 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R18575 += 1, R18529 += 1 };
  s8 -> s6 [0, 65535] { R18575 += 1 };
  s8 -> s7 [0, 65535];
  accepting s3, s4, s8, s2, s6, s1, s7, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 86] { R18577 += 1, R18531 += 1, R18499 += 1, R18481 += 1 };
  s0 -> s2 [0, 65535] { R18577 += 1, R18531 += 1, R18498 += 1, R18499 += 1 };
  s0 -> s3 [0, 65535] { R18577 += 1, R18531 += 1, R18499 += 1, R18480 += 1, R18481 += 1 };
  s0 -> s4 [0, 65535] { R18577 += 1, R18530 += 1, R18531 += 1 };
  s0 -> s0 [0, 65535] { R18576 += 1, R18577 += 1 };
  s0 -> s1 [88, 65535] { R18577 += 1, R18531 += 1, R18499 += 1, R18481 += 1 };
  s1 -> s1 [0, 86] { R18577 += 1, R18531 += 1, R18499 += 1, R18481 += 1 };
  s1 -> s1 [0, 65535] { R18577 += 1, R18531 += 1, R18499 += 1 };
  s1 -> s6 [0, 65535] { R18577 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s7 [0, 65535] { R18577 += 1, R18531 += 1 };
  s1 -> s1 [88, 65535] { R18577 += 1, R18531 += 1, R18499 += 1, R18481 += 1 };
  s2 -> s1 [0, 86] { R18577 += 1, R18531 += 1, R18499 += 1, R18481 += 1 };
  s2 -> s2 [0, 65535] { R18577 += 1, R18531 += 1, R18498 += 1, R18499 += 1 };
  s2 -> s3 [0, 65535] { R18577 += 1, R18531 += 1, R18499 += 1, R18480 += 1, R18481 += 1 };
  s2 -> s6 [0, 65535] { R18577 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [88, 65535] { R18577 += 1, R18531 += 1, R18499 += 1, R18481 += 1 };
  s3 -> s1 [0, 86] { R18577 += 1, R18531 += 1, R18499 += 1, R18481 += 1 };
  s3 -> s3 [0, 65535] { R18577 += 1, R18531 += 1, R18499 += 1, R18480 += 1, R18481 += 1 };
  s3 -> s6 [0, 65535] { R18577 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s7 [0, 65535] { R18577 += 1, R18531 += 1 };
  s3 -> s1 [88, 65535] { R18577 += 1, R18531 += 1, R18499 += 1, R18481 += 1 };
  s4 -> s1 [0, 86] { R18577 += 1, R18531 += 1, R18499 += 1, R18481 += 1 };
  s4 -> s2 [0, 65535] { R18577 += 1, R18531 += 1, R18498 += 1, R18499 += 1 };
  s4 -> s3 [0, 65535] { R18577 += 1, R18531 += 1, R18499 += 1, R18480 += 1, R18481 += 1 };
  s4 -> s4 [0, 65535] { R18577 += 1, R18530 += 1, R18531 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s1 [88, 65535] { R18577 += 1, R18531 += 1, R18499 += 1, R18481 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R18577 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R18577 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R18577 += 1, R18531 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 65535] { R18579 += 1, R18533 += 1, R18500 += 1, R18501 += 1 };
  s0 -> s2 [0, 65535] { R18579 += 1, R18533 += 1, R18501 += 1, R18482 += 1, R18483 += 1 };
  s0 -> s3 [0, 65535] { R18579 += 1, R18533 += 1, R18501 += 1, R18483 += 1, R17933 += 1 };
  s0 -> s0 [0, 65535] { R18578 += 1, R18579 += 1 };
  s0 -> s4 [0, 65535] { R18579 += 1, R18532 += 1, R18533 += 1 };
  s1 -> s1 [0, 65535] { R18579 += 1, R18533 += 1, R18500 += 1, R18501 += 1 };
  s1 -> s7 [0, 65535] { R18579 += 1 };
  s1 -> s2 [0, 65535] { R18579 += 1, R18533 += 1, R18501 += 1, R18482 += 1, R18483 += 1 };
  s1 -> s3 [0, 65535] { R18579 += 1, R18533 += 1, R18501 += 1, R18483 += 1, R17933 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R18579 += 1, R18533 += 1 };
  s2 -> s7 [0, 65535] { R18579 += 1 };
  s2 -> s2 [0, 65535] { R18579 += 1, R18533 += 1, R18501 += 1, R18482 += 1, R18483 += 1 };
  s2 -> s3 [0, 65535] { R18579 += 1, R18533 += 1, R18501 += 1, R18483 += 1, R17933 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R18579 += 1, R18533 += 1 };
  s3 -> s7 [0, 65535] { R18579 += 1 };
  s3 -> s3 [0, 65535] { R18579 += 1, R18533 += 1, R18501 += 1, R18483 += 1, R17933 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s8 [0, 65535] { R18579 += 1, R18533 += 1, R18501 += 1 };
  s4 -> s1 [0, 65535] { R18579 += 1, R18533 += 1, R18500 += 1, R18501 += 1 };
  s4 -> s2 [0, 65535] { R18579 += 1, R18533 += 1, R18501 += 1, R18482 += 1, R18483 += 1 };
  s4 -> s3 [0, 65535] { R18579 += 1, R18533 += 1, R18501 += 1, R18483 += 1, R17933 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R18579 += 1, R18532 += 1, R18533 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R18579 += 1, R18533 += 1 };
  s6 -> s7 [0, 65535] { R18579 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R18579 += 1 };
  s7 -> s5 [0, 65535];
  s8 -> s6 [0, 65535] { R18579 += 1, R18533 += 1 };
  s8 -> s7 [0, 65535] { R18579 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s8 [0, 65535] { R18579 += 1, R18533 += 1, R18501 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 65535] { R18581 += 1, R18535 += 1, R18503 += 1, R18484 += 1, R18485 += 1 };
  s0 -> s0 [0, 65535] { R18580 += 1, R18581 += 1 };
  s0 -> s2 [0, 65535] { R18581 += 1, R18535 += 1, R18502 += 1, R18503 += 1 };
  s0 -> s3 [0, 65535] { R18581 += 1, R18534 += 1, R18535 += 1 };
  s0 -> s4 [108, 108] { R18581 += 1, R18535 += 1, R18503 += 1, R18485 += 1 };
  s1 -> s1 [0, 65535] { R18581 += 1, R18535 += 1, R18503 += 1, R18484 += 1, R18485 += 1 };
  s1 -> s4 [108, 108] { R18581 += 1, R18535 += 1, R18503 += 1, R18485 += 1 };
  s2 -> s1 [0, 65535] { R18581 += 1, R18535 += 1, R18503 += 1, R18484 += 1, R18485 += 1 };
  s2 -> s2 [0, 65535] { R18581 += 1, R18535 += 1, R18502 += 1, R18503 += 1 };
  s2 -> s4 [108, 108] { R18581 += 1, R18535 += 1, R18503 += 1, R18485 += 1 };
  s3 -> s1 [0, 65535] { R18581 += 1, R18535 += 1, R18503 += 1, R18484 += 1, R18485 += 1 };
  s3 -> s2 [0, 65535] { R18581 += 1, R18535 += 1, R18502 += 1, R18503 += 1 };
  s3 -> s3 [0, 65535] { R18581 += 1, R18534 += 1, R18535 += 1 };
  s3 -> s4 [108, 108] { R18581 += 1, R18535 += 1, R18503 += 1, R18485 += 1 };
  s4 -> s5 [104, 104] { R18581 += 1, R18535 += 1, R18503 += 1, R18485 += 1 };
  s5 -> s6 [111, 111] { R18581 += 1, R18535 += 1, R18503 += 1, R18485 += 1 };
  s6 -> s7 [115, 115] { R18581 += 1, R18535 += 1, R18503 += 1, R18485 += 1 };
  s7 -> s8 [116, 116] { R18581 += 1, R18535 += 1, R18503 += 1, R18485 += 1 };
  s8 -> s9 [0, 65535] { R18581 += 1 };
  s8 -> s8 [0, 65535] { R18581 += 1, R18535 += 1, R18503 += 1 };
  s8 -> s10 [0, 65535] { R18581 += 1, R18535 += 1 };
  s8 -> s11 [0, 65535];
  s9 -> s9 [0, 65535] { R18581 += 1 };
  s9 -> s11 [0, 65535];
  s10 -> s9 [0, 65535] { R18581 += 1 };
  s10 -> s10 [0, 65535] { R18581 += 1, R18535 += 1 };
  s10 -> s11 [0, 65535];
  s11 -> s11 [0, 65535];
  accepting s8, s9, s10, s11;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 65535] { R18583 += 1, R18536 += 1, R18537 += 1 };
  s0 -> s0 [0, 65535] { R18582 += 1, R18583 += 1 };
  s0 -> s2 [0, 65535] { R18583 += 1, R18537 += 1, R18505 += 1, R18489 += 1, R17934 += 1 };
  s0 -> s3 [0, 65535] { R18583 += 1, R18537 += 1, R18505 += 1, R18488 += 1, R18489 += 1 };
  s0 -> s4 [0, 65535] { R18583 += 1, R18537 += 1, R18504 += 1, R18505 += 1 };
  s1 -> s1 [0, 65535] { R18583 += 1, R18536 += 1, R18537 += 1 };
  s1 -> s2 [0, 65535] { R18583 += 1, R18537 += 1, R18505 += 1, R18489 += 1, R17934 += 1 };
  s1 -> s3 [0, 65535] { R18583 += 1, R18537 += 1, R18505 += 1, R18488 += 1, R18489 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s4 [0, 65535] { R18583 += 1, R18537 += 1, R18504 += 1, R18505 += 1 };
  s2 -> s8 [0, 65535] { R18583 += 1, R18537 += 1, R18505 += 1 };
  s2 -> s2 [0, 65535] { R18583 += 1, R18537 += 1, R18505 += 1, R18489 += 1, R17934 += 1 };
  s2 -> s5 [0, 65535] { R18583 += 1 };
  s2 -> s7 [0, 65535] { R18583 += 1, R18537 += 1 };
  s2 -> s6 [0, 65535];
  s3 -> s2 [0, 65535] { R18583 += 1, R18537 += 1, R18505 += 1, R18489 += 1, R17934 += 1 };
  s3 -> s5 [0, 65535] { R18583 += 1 };
  s3 -> s3 [0, 65535] { R18583 += 1, R18537 += 1, R18505 += 1, R18488 += 1, R18489 += 1 };
  s3 -> s7 [0, 65535] { R18583 += 1, R18537 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s2 [0, 65535] { R18583 += 1, R18537 += 1, R18505 += 1, R18489 += 1, R17934 += 1 };
  s4 -> s5 [0, 65535] { R18583 += 1 };
  s4 -> s3 [0, 65535] { R18583 += 1, R18537 += 1, R18505 += 1, R18488 += 1, R18489 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R18583 += 1, R18537 += 1, R18504 += 1, R18505 += 1 };
  s5 -> s5 [0, 65535] { R18583 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R18583 += 1 };
  s7 -> s7 [0, 65535] { R18583 += 1, R18537 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R18583 += 1, R18537 += 1, R18505 += 1 };
  s8 -> s5 [0, 65535] { R18583 += 1 };
  s8 -> s7 [0, 65535] { R18583 += 1, R18537 += 1 };
  s8 -> s6 [0, 65535];
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 65535] { R18585 += 1, R18538 += 1, R18539 += 1 };
  s0 -> s0 [0, 65535] { R18584 += 1, R18585 += 1 };
  s0 -> s2 [0, 65535] { R18585 += 1, R18539 += 1, R18506 += 1, R18507 += 1 };
  s0 -> s3 [0, 65535] { R18585 += 1, R18539 += 1, R18507 += 1, R18490 += 1, R18491 += 1 };
  s0 -> s4 [108, 108] { R18585 += 1, R18539 += 1, R18507 += 1, R18491 += 1 };
  s1 -> s1 [0, 65535] { R18585 += 1, R18538 += 1, R18539 += 1 };
  s1 -> s2 [0, 65535] { R18585 += 1, R18539 += 1, R18506 += 1, R18507 += 1 };
  s1 -> s3 [0, 65535] { R18585 += 1, R18539 += 1, R18507 += 1, R18490 += 1, R18491 += 1 };
  s1 -> s4 [108, 108] { R18585 += 1, R18539 += 1, R18507 += 1, R18491 += 1 };
  s2 -> s2 [0, 65535] { R18585 += 1, R18539 += 1, R18506 += 1, R18507 += 1 };
  s2 -> s3 [0, 65535] { R18585 += 1, R18539 += 1, R18507 += 1, R18490 += 1, R18491 += 1 };
  s2 -> s4 [108, 108] { R18585 += 1, R18539 += 1, R18507 += 1, R18491 += 1 };
  s3 -> s3 [0, 65535] { R18585 += 1, R18539 += 1, R18507 += 1, R18490 += 1, R18491 += 1 };
  s3 -> s4 [108, 108] { R18585 += 1, R18539 += 1, R18507 += 1, R18491 += 1 };
  s4 -> s5 [111, 111] { R18585 += 1, R18539 += 1, R18507 += 1, R18491 += 1 };
  s5 -> s6 [99, 99] { R18585 += 1, R18539 += 1, R18507 += 1, R18491 += 1 };
  s6 -> s7 [97, 97] { R18585 += 1, R18539 += 1, R18507 += 1, R18491 += 1 };
  s7 -> s8 [0, 65535] { R18585 += 1, R18539 += 1 };
  s7 -> s9 [0, 65535];
  s7 -> s10 [0, 65535] { R18585 += 1 };
  s7 -> s7 [0, 65535] { R18585 += 1, R18539 += 1, R18507 += 1 };
  s8 -> s8 [0, 65535] { R18585 += 1, R18539 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [0, 65535] { R18585 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R18585 += 1 };
  accepting s7, s8, s9, s10;
};
};
constraint R1 = R18485 && R2 = R18507 && R3 = R17951 && R4 = R18585 && R12 = 0 && R13 = -1 && R11960 = 0 && R11961 = R18539 && R17940 = 0 && R17941 = 1 && R17942 = 0 && R17943 = 1 && R17944 - R18539 = 1 && R17945 = R17951 && R17946 - R18539 = 1 && R17947 = R17951 && R17948 - R18539 = 1 && R17949 = R17951 && R17950 - R18539 = 1 && R18484 = 0 && R18490 = 0 && R18491 = 0 && R18492 = 0 && R18493 = R18507 && R18494 = 0 && R18495 = R18507 && R18496 = 0 && R18497 = R18507 && R18498 = 0 && R18499 = R18507 && R18500 = 0 && R18501 = R18507 && R18502 = 0 && R18503 = R18507 && R18504 = 0 && R18505 = R18507 && R18506 = 0 && R18508 = 0 && R18509 = R18539 && R18510 = 0 && R18511 = R18539 && R18512 = 0 && R18513 = R18539 && R18514 = 0 && R18515 = R18539 && R18516 = 0 && R18517 = R18539 && R18518 = 0 && R18519 = R18539 && R18520 = 0 && R18521 = R18539 && R18522 = 0 && R18523 = R18539 && R18524 = 0 && R18525 = R18539 && R18526 = 0 && R18527 = R18539 && R18528 = 0 && R18529 = R18539 && R18530 = 0 && R18531 = R18539 && R18532 = 0 && R18533 = R18539 && R18534 = 0 && R18535 = R18539 && R18536 = 0 && R18537 = R18539 && R18538 = 0 && R18540 = 10 && R18541 = R18585 && R18542 = 10 && R18543 = R18585 && R18544 = 10 && R18545 = R18585 && R18546 = 10 && R18547 = R18585 && R18548 = 10 && R18549 = R18585 && R18550 = 10 && R18551 = R18585 && R18552 = 10 && R18553 = R18585 && R18554 = 10 && R18555 = R18585 && R18556 = 10 && R18557 = R18585 && R18558 = 10 && R18559 = R18585 && R18560 = 10 && R18561 = R18585 && R18562 = 10 && R18563 = R18585 && R18564 = 10 && R18565 = R18585 && R18566 = 10 && R18567 = R18585 && R18568 = 10 && R18569 = R18585 && R18570 = 10 && R18571 = R18585 && R18572 = 10 && R18573 = R18585 && R18574 = 10 && R18575 = R18585 && R18576 = 10 && R18577 = R18585 && R18578 = 10 && R18579 = R18585 && R18580 = 10 && R18581 = R18585 && R18582 = 10 && R18583 = R18585 && R18584 = 10 && R0 != 0 && R7 < 1 && R10 < 1 && R18539 < R17951 && -1 < R18485 && 0 < R18507 && -1 < R18539 && 9 < R18585 && (R17936 != 0 || ((R5 != 0 || ((R0 != R17937 || R17937 = 1 || R17937 < 0) && (R0 = R17937 || R17937 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R17937 || R17937 = 1 || R17937 < 0) && (R17937 != 1 || -1 < R0) && (R0 = R17937 || R17937 = 1))))) && (R17938 != 0 || ((R5 != 0 || ((R0 != R17939 || R17939 = 1 || R17939 < 0) && (R0 = R17939 || R17939 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R17939 || R17939 = 1 || R17939 < 0) && (R17939 != 1 || -1 < R0) && (R0 = R17939 || R17939 = 1))))) && (R18480 != 0 || R18481 = R18485 || (R17933 = 0 && R18485 = 0)) && (R18482 != 0 || R18483 = R18485 || (R17933 = 0 && R18485 = 0)) && (R17934 = 0 || (R18488 = 0 && R18489 = 0)) && (R17935 = 0 || (R18486 = 0 && R18487 = 0)) && (R17936 = 0 || (R5 = 0 && R0 < 0)) && (R17938 = 0 || (R5 = 0 && R0 < 0)) && (R18480 = 0 || (R17933 = 0 && R18485 = 0)) && (R18482 = 0 || (R17933 = 0 && R18485 = 0));
// End of Parikh automata intersection problem
