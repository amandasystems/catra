// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R10863, R10864, R10865, R10866, R10867, R10868, R10869, R10870, R11, R11085, R11086, R11087, R11088, R11089, R11090, R11091, R11092, R11093, R11094, R11095, R11096, R11097, R11098, R11099, R11100, R11101, R11102, R11103, R11104, R11105, R11106, R11107, R11108, R11109, R11110, R11111, R11112, R11113, R11114, R11115, R11116, R11117, R11118, R11119, R11120, R11121, R11122, R11123, R11124, R11125, R11126, R11127, R11128, R11129, R11130, R11131, R11132, R11133, R11134, R11135, R11136, R11137, R11138, R11139, R11140, R11141, R11142, R11143, R11144, R11145, R11146, R11147, R11148, R11149, R11150, R11151, R11152, R11153, R11154, R11155, R11156, R11157, R11158, R11159, R11160, R11161, R11162, R11163, R11164, R11165, R11166, R11167, R11168, R11169, R11170, R11171, R11172, R11173, R11174, R11175, R11176, R11177, R11178, R11179, R11180, R11181, R11182, R11183, R11184, R11185, R11186, R11187, R11188, R11189, R11190, R11191, R11192, R15, R16, R2, R3, R4, R5, R5988, R5989, R5990, R5991, R5992, R5993, R5994, R5995, R5996, R5997, R5998, R6, R7;
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [119, 119];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R11148 += 1 };
  s0 -> s0 [0, 65535] { R11147 += 1, R11148 += 1 };
  s0 -> s2 [46, 46] { R11148 += 1 };
  s0 -> s3 [47, 47] { R11148 += 1 };
  s0 -> s1 [48, 65535] { R11148 += 1 };
  s1 -> s1 [0, 45] { R11148 += 1 };
  s1 -> s2 [46, 46] { R11148 += 1 };
  s1 -> s3 [47, 47] { R11148 += 1 };
  s1 -> s1 [48, 65535] { R11148 += 1 };
  s2 -> s1 [0, 45] { R11148 += 1 };
  s2 -> s2 [46, 46] { R11148 += 1 };
  s2 -> s3 [47, 47] { R11148 += 1 };
  s2 -> s1 [48, 114] { R11148 += 1 };
  s2 -> s8 [115, 115] { R11148 += 1 };
  s2 -> s1 [116, 65535] { R11148 += 1 };
  s3 -> s3 [0, 45] { R11148 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R11148 += 1 };
  s3 -> s3 [47, 65535] { R11148 += 1 };
  s4 -> s3 [0, 45] { R11148 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R11148 += 1 };
  s4 -> s3 [47, 114] { R11148 += 1 };
  s4 -> s5 [115, 115] { R11148 += 1 };
  s4 -> s3 [116, 65535] { R11148 += 1 };
  s5 -> s3 [0, 45] { R11148 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R11148 += 1 };
  s5 -> s3 [47, 110] { R11148 += 1 };
  s5 -> s6 [111, 111] { R11148 += 1 };
  s5 -> s3 [112, 65535] { R11148 += 1 };
  s6 -> s3 [0, 45] { R11148 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R11148 += 1 };
  s6 -> s3 [47, 98] { R11148 += 1 };
  s6 -> s7 [99, 99] { R11148 += 1 };
  s6 -> s3 [100, 65535] { R11148 += 1 };
  s7 -> s3 [0, 45] { R11148 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R11148 += 1 };
  s7 -> s3 [47, 106] { R11148 += 1 };
  s7 -> s3 [108, 65535] { R11148 += 1 };
  s8 -> s1 [0, 45] { R11148 += 1 };
  s8 -> s2 [46, 46] { R11148 += 1 };
  s8 -> s3 [47, 47] { R11148 += 1 };
  s8 -> s1 [48, 110] { R11148 += 1 };
  s8 -> s9 [111, 111] { R11148 += 1 };
  s8 -> s1 [112, 65535] { R11148 += 1 };
  s9 -> s1 [0, 45] { R11148 += 1 };
  s9 -> s2 [46, 46] { R11148 += 1 };
  s9 -> s3 [47, 47] { R11148 += 1 };
  s9 -> s1 [48, 98] { R11148 += 1 };
  s9 -> s10 [99, 99] { R11148 += 1 };
  s9 -> s1 [100, 65535] { R11148 += 1 };
  s10 -> s1 [0, 45] { R11148 += 1 };
  s10 -> s2 [46, 46] { R11148 += 1 };
  s10 -> s3 [47, 47] { R11148 += 1 };
  s10 -> s1 [48, 106] { R11148 += 1 };
  s10 -> s1 [108, 65535] { R11148 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R11150 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R11149 += 1, R11150 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R11150 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R11152 += 1, R16 += 1 };
  s0 -> s2 [0, 65535] { R11152 += 1, R15 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R11151 += 1, R11152 += 1 };
  s0 -> s3 [47, 47] { R11152 += 1 };
  s0 -> s1 [48, 65535] { R11152 += 1, R16 += 1 };
  s1 -> s1 [0, 46] { R11152 += 1, R16 += 1 };
  s1 -> s3 [47, 47] { R11152 += 1 };
  s1 -> s1 [48, 65535] { R11152 += 1, R16 += 1 };
  s2 -> s1 [0, 46] { R11152 += 1, R16 += 1 };
  s2 -> s2 [0, 65535] { R11152 += 1, R15 += 1, R16 += 1 };
  s2 -> s3 [47, 47] { R11152 += 1 };
  s2 -> s1 [48, 65535] { R11152 += 1, R16 += 1 };
  s3 -> s3 [0, 65535] { R11152 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 36] { R11154 += 1, R10864 += 1 };
  s0 -> s2 [0, 65535] { R11154 += 1, R10863 += 1, R10864 += 1 };
  s0 -> s0 [0, 65535] { R11153 += 1, R11154 += 1 };
  s0 -> s1 [38, 42] { R11154 += 1, R10864 += 1 };
  s0 -> s1 [44, 45] { R11154 += 1, R10864 += 1 };
  s0 -> s1 [47, 62] { R11154 += 1, R10864 += 1 };
  s0 -> s1 [64, 65535] { R11154 += 1, R10864 += 1 };
  s1 -> s1 [0, 36] { R11154 += 1, R10864 += 1 };
  s1 -> s1 [0, 65535] { R11154 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [38, 42] { R11154 += 1, R10864 += 1 };
  s1 -> s1 [44, 45] { R11154 += 1, R10864 += 1 };
  s1 -> s1 [47, 62] { R11154 += 1, R10864 += 1 };
  s1 -> s1 [64, 65535] { R11154 += 1, R10864 += 1 };
  s2 -> s1 [0, 36] { R11154 += 1, R10864 += 1 };
  s2 -> s2 [0, 65535] { R11154 += 1, R10863 += 1, R10864 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [38, 42] { R11154 += 1, R10864 += 1 };
  s2 -> s1 [44, 45] { R11154 += 1, R10864 += 1 };
  s2 -> s1 [47, 62] { R11154 += 1, R10864 += 1 };
  s2 -> s1 [64, 65535] { R11154 += 1, R10864 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 65535] { R11156 += 1, R10866 += 1, R0 += 1 };
  s0 -> s2 [0, 65535] { R11156 += 1, R10865 += 1, R10866 += 1 };
  s0 -> s0 [0, 65535] { R11155 += 1, R11156 += 1 };
  s1 -> s4 [0, 65535] { R11156 += 1 };
  s1 -> s1 [0, 65535] { R11156 += 1, R10866 += 1, R0 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R11156 += 1, R10866 += 1, R0 += 1 };
  s2 -> s2 [0, 65535] { R11156 += 1, R10865 += 1, R10866 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R11156 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 62] { R11158 += 1, R10868 += 1, R5992 += 1 };
  s0 -> s0 [0, 65535] { R11157 += 1, R11158 += 1 };
  s0 -> s2 [0, 65535] { R11158 += 1, R10867 += 1, R10868 += 1 };
  s0 -> s3 [0, 65535] { R11158 += 1, R10868 += 1, R5991 += 1, R5992 += 1 };
  s0 -> s4 [63, 63] { R11158 += 1, R10868 += 1, R5992 += 1 };
  s0 -> s1 [64, 65535] { R11158 += 1, R10868 += 1, R5992 += 1 };
  s1 -> s7 [0, 65535] { R11158 += 1, R10868 += 1 };
  s1 -> s5 [0, 65535] { R11158 += 1 };
  s1 -> s1 [0, 65535] { R11158 += 1, R10868 += 1, R5992 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s1 [0, 62] { R11158 += 1, R10868 += 1, R5992 += 1 };
  s2 -> s2 [0, 65535] { R11158 += 1, R10867 += 1, R10868 += 1 };
  s2 -> s3 [0, 65535] { R11158 += 1, R10868 += 1, R5991 += 1, R5992 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s4 [63, 63] { R11158 += 1, R10868 += 1, R5992 += 1 };
  s2 -> s1 [64, 65535] { R11158 += 1, R10868 += 1, R5992 += 1 };
  s3 -> s1 [0, 62] { R11158 += 1, R10868 += 1, R5992 += 1 };
  s3 -> s5 [0, 65535] { R11158 += 1 };
  s3 -> s3 [0, 65535] { R11158 += 1, R10868 += 1, R5991 += 1, R5992 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s4 [63, 63] { R11158 += 1, R10868 += 1, R5992 += 1 };
  s3 -> s1 [64, 65535] { R11158 += 1, R10868 += 1, R5992 += 1 };
  s4 -> s1 [0, 65535] { R11158 += 1, R10868 += 1, R5992 += 1 };
  s5 -> s5 [0, 65535] { R11158 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R11158 += 1, R10868 += 1 };
  s7 -> s5 [0, 65535] { R11158 += 1 };
  s7 -> s6 [0, 65535];
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 65535] { R11160 += 1, R10870 += 1, R5994 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R11159 += 1, R11160 += 1 };
  s0 -> s2 [0, 65535] { R11160 += 1, R10869 += 1, R10870 += 1 };
  s0 -> s3 [0, 65535] { R11160 += 1, R10870 += 1, R5993 += 1, R5994 += 1 };
  s1 -> s1 [0, 65535] { R11160 += 1, R10870 += 1, R5994 += 1, R5 += 1 };
  s1 -> s4 [0, 65535] { R11160 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R11160 += 1, R10870 += 1 };
  s2 -> s1 [0, 65535] { R11160 += 1, R10870 += 1, R5994 += 1, R5 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R11160 += 1, R10869 += 1, R10870 += 1 };
  s2 -> s3 [0, 65535] { R11160 += 1, R10870 += 1, R5993 += 1, R5994 += 1 };
  s3 -> s1 [0, 65535] { R11160 += 1, R10870 += 1, R5994 += 1, R5 += 1 };
  s3 -> s4 [0, 65535] { R11160 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R11160 += 1, R10870 += 1, R5993 += 1, R5994 += 1 };
  s4 -> s4 [0, 65535] { R11160 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R11160 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R11160 += 1, R10870 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 43] { R11162 += 1, R11116 += 1 };
  s0 -> s2 [0, 65535] { R11162 += 1, R11115 += 1, R11116 += 1 };
  s0 -> s0 [0, 65535] { R11161 += 1, R11162 += 1 };
  s0 -> s1 [45, 63] { R11162 += 1, R11116 += 1 };
  s0 -> s3 [87, 87] { R11162 += 1, R11116 += 1 };
  s0 -> s1 [88, 65535] { R11162 += 1, R11116 += 1 };
  s1 -> s1 [0, 43] { R11162 += 1, R11116 += 1 };
  s1 -> s1 [45, 63] { R11162 += 1, R11116 += 1 };
  s1 -> s3 [87, 87] { R11162 += 1, R11116 += 1 };
  s1 -> s1 [88, 65535] { R11162 += 1, R11116 += 1 };
  s2 -> s1 [0, 43] { R11162 += 1, R11116 += 1 };
  s2 -> s2 [0, 65535] { R11162 += 1, R11115 += 1, R11116 += 1 };
  s2 -> s1 [45, 63] { R11162 += 1, R11116 += 1 };
  s2 -> s3 [87, 87] { R11162 += 1, R11116 += 1 };
  s2 -> s1 [88, 65535] { R11162 += 1, R11116 += 1 };
  s3 -> s3 [0, 43] { R11162 += 1, R11116 += 1 };
  s3 -> s3 [0, 65535] { R11162 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [45, 63] { R11162 += 1, R11116 += 1 };
  s3 -> s3 [87, 65535] { R11162 += 1, R11116 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_10 {
  init s0;
  s0 -> s0 [0, 65535] { R11163 += 1, R11164 += 1 };
  s0 -> s1 [0, 65535] { R11164 += 1, R11117 += 1, R11118 += 1 };
  s0 -> s2 [0, 65535] { R11164 += 1, R11118 += 1, R2 += 1 };
  s1 -> s1 [0, 65535] { R11164 += 1, R11117 += 1, R11118 += 1 };
  s1 -> s2 [0, 65535] { R11164 += 1, R11118 += 1, R2 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R11164 += 1 };
  s2 -> s2 [0, 65535] { R11164 += 1, R11118 += 1, R2 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R11164 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 57] { R11166 += 1, R11120 += 1 };
  s0 -> s2 [0, 65535] { R11166 += 1, R11120 += 1, R10 += 1 };
  s0 -> s0 [0, 65535] { R11165 += 1, R11166 += 1 };
  s0 -> s3 [0, 65535] { R11166 += 1, R11119 += 1, R11120 += 1 };
  s0 -> s4 [58, 58] { R11166 += 1, R11120 += 1 };
  s0 -> s1 [59, 65535] { R11166 += 1, R11120 += 1 };
  s1 -> s1 [0, 57] { R11166 += 1, R11120 += 1 };
  s1 -> s1 [0, 65535] { R11166 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s4 [58, 58] { R11166 += 1, R11120 += 1 };
  s1 -> s1 [59, 65535] { R11166 += 1, R11120 += 1 };
  s2 -> s1 [0, 57] { R11166 += 1, R11120 += 1 };
  s2 -> s2 [0, 65535] { R11166 += 1, R11120 += 1, R10 += 1 };
  s2 -> s6 [0, 65535] { R11166 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [58, 58] { R11166 += 1, R11120 += 1 };
  s2 -> s1 [59, 65535] { R11166 += 1, R11120 += 1 };
  s3 -> s1 [0, 57] { R11166 += 1, R11120 += 1 };
  s3 -> s2 [0, 65535] { R11166 += 1, R11120 += 1, R10 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R11166 += 1, R11119 += 1, R11120 += 1 };
  s3 -> s4 [58, 58] { R11166 += 1, R11120 += 1 };
  s3 -> s1 [59, 65535] { R11166 += 1, R11120 += 1 };
  s4 -> s4 [0, 65535] { R11166 += 1, R11120 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R11166 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 86] { R11168 += 1, R11122 += 1 };
  s0 -> s2 [0, 65535] { R11168 += 1, R11122 += 1, R11 += 1 };
  s0 -> s0 [0, 65535] { R11167 += 1, R11168 += 1 };
  s0 -> s3 [0, 65535] { R11168 += 1, R11121 += 1, R11122 += 1 };
  s0 -> s4 [87, 87] { R11168 += 1, R11122 += 1 };
  s0 -> s1 [88, 65535] { R11168 += 1, R11122 += 1 };
  s1 -> s1 [0, 86] { R11168 += 1, R11122 += 1 };
  s1 -> s1 [0, 65535] { R11168 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s4 [87, 87] { R11168 += 1, R11122 += 1 };
  s1 -> s1 [88, 65535] { R11168 += 1, R11122 += 1 };
  s2 -> s1 [0, 86] { R11168 += 1, R11122 += 1 };
  s2 -> s6 [0, 65535] { R11168 += 1 };
  s2 -> s2 [0, 65535] { R11168 += 1, R11122 += 1, R11 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [87, 87] { R11168 += 1, R11122 += 1 };
  s2 -> s1 [88, 65535] { R11168 += 1, R11122 += 1 };
  s3 -> s1 [0, 86] { R11168 += 1, R11122 += 1 };
  s3 -> s2 [0, 65535] { R11168 += 1, R11122 += 1, R11 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R11168 += 1, R11121 += 1, R11122 += 1 };
  s3 -> s4 [87, 87] { R11168 += 1, R11122 += 1 };
  s3 -> s1 [88, 65535] { R11168 += 1, R11122 += 1 };
  s4 -> s4 [0, 65535] { R11168 += 1, R11122 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R11168 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 90] { R11170 += 1, R11124 += 1, R5996 += 1 };
  s0 -> s2 [0, 65535] { R11170 += 1, R11123 += 1, R11124 += 1 };
  s0 -> s0 [0, 65535] { R11169 += 1, R11170 += 1 };
  s0 -> s3 [0, 65535] { R11170 += 1, R11124 += 1, R5995 += 1, R5996 += 1 };
  s0 -> s4 [91, 91] { R11170 += 1, R11124 += 1, R5996 += 1 };
  s0 -> s1 [92, 65535] { R11170 += 1, R11124 += 1, R5996 += 1 };
  s1 -> s7 [0, 65535] { R11170 += 1, R11124 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R11170 += 1 };
  s1 -> s1 [0, 65535] { R11170 += 1, R11124 += 1, R5996 += 1 };
  s2 -> s1 [0, 90] { R11170 += 1, R11124 += 1, R5996 += 1 };
  s2 -> s2 [0, 65535] { R11170 += 1, R11123 += 1, R11124 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R11170 += 1, R11124 += 1, R5995 += 1, R5996 += 1 };
  s2 -> s4 [91, 91] { R11170 += 1, R11124 += 1, R5996 += 1 };
  s2 -> s1 [92, 65535] { R11170 += 1, R11124 += 1, R5996 += 1 };
  s3 -> s1 [0, 90] { R11170 += 1, R11124 += 1, R5996 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R11170 += 1, R11124 += 1, R5995 += 1, R5996 += 1 };
  s3 -> s6 [0, 65535] { R11170 += 1 };
  s3 -> s4 [91, 91] { R11170 += 1, R11124 += 1, R5996 += 1 };
  s3 -> s1 [92, 65535] { R11170 += 1, R11124 += 1, R5996 += 1 };
  s4 -> s1 [0, 65535] { R11170 += 1, R11124 += 1, R5996 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R11170 += 1 };
  s7 -> s7 [0, 65535] { R11170 += 1, R11124 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R11170 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s0 [0, 65535] { R11171 += 1, R11172 += 1 };
  s0 -> s1 [0, 65535] { R11172 += 1, R11125 += 1, R11126 += 1 };
  s0 -> s2 [0, 65535] { R11172 += 1, R11126 += 1, R5998 += 1, R6 += 1 };
  s0 -> s3 [0, 65535] { R11172 += 1, R11126 += 1, R5997 += 1, R5998 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R11172 += 1, R11125 += 1, R11126 += 1 };
  s1 -> s2 [0, 65535] { R11172 += 1, R11126 += 1, R5998 += 1, R6 += 1 };
  s1 -> s3 [0, 65535] { R11172 += 1, R11126 += 1, R5997 += 1, R5998 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R11172 += 1 };
  s2 -> s2 [0, 65535] { R11172 += 1, R11126 += 1, R5998 += 1, R6 += 1 };
  s2 -> s6 [0, 65535] { R11172 += 1, R11126 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R11172 += 1 };
  s3 -> s2 [0, 65535] { R11172 += 1, R11126 += 1, R5998 += 1, R6 += 1 };
  s3 -> s3 [0, 65535] { R11172 += 1, R11126 += 1, R5997 += 1, R5998 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R11172 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R11172 += 1 };
  s6 -> s6 [0, 65535] { R11172 += 1, R11126 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R11174 += 1, R11128 += 1, R11092 += 1, R5990 += 1 };
  s0 -> s2 [0, 65535] { R11174 += 1, R11128 += 1, R11091 += 1, R11092 += 1 };
  s0 -> s0 [0, 65535] { R11173 += 1, R11174 += 1 };
  s0 -> s3 [0, 65535] { R11174 += 1, R11127 += 1, R11128 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R11174 += 1, R11128 += 1 };
  s1 -> s1 [0, 65535] { R11174 += 1, R11128 += 1, R11092 += 1, R5990 += 1 };
  s1 -> s5 [0, 65535] { R11174 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R11174 += 1, R11128 += 1, R11092 += 1, R5990 += 1 };
  s2 -> s2 [0, 65535] { R11174 += 1, R11128 += 1, R11091 += 1, R11092 += 1 };
  s2 -> s5 [0, 65535] { R11174 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R11174 += 1, R11128 += 1, R11092 += 1, R5990 += 1 };
  s3 -> s2 [0, 65535] { R11174 += 1, R11128 += 1, R11091 += 1, R11092 += 1 };
  s3 -> s3 [0, 65535] { R11174 += 1, R11127 += 1, R11128 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R11174 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R11174 += 1, R11128 += 1 };
  s6 -> s5 [0, 65535] { R11174 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R11176 += 1, R11129 += 1, R11130 += 1 };
  s0 -> s2 [0, 65535] { R11176 += 1, R11130 += 1, R11093 += 1, R11094 += 1 };
  s0 -> s0 [0, 65535] { R11175 += 1, R11176 += 1 };
  s0 -> s3 [108, 108] { R11176 += 1, R11130 += 1, R11094 += 1 };
  s1 -> s1 [0, 65535] { R11176 += 1, R11129 += 1, R11130 += 1 };
  s1 -> s2 [0, 65535] { R11176 += 1, R11130 += 1, R11093 += 1, R11094 += 1 };
  s1 -> s3 [108, 108] { R11176 += 1, R11130 += 1, R11094 += 1 };
  s2 -> s2 [0, 65535] { R11176 += 1, R11130 += 1, R11093 += 1, R11094 += 1 };
  s2 -> s3 [108, 108] { R11176 += 1, R11130 += 1, R11094 += 1 };
  s3 -> s4 [111, 111] { R11176 += 1, R11130 += 1, R11094 += 1 };
  s4 -> s5 [99, 99] { R11176 += 1, R11130 += 1, R11094 += 1 };
  s5 -> s6 [97, 97] { R11176 += 1, R11130 += 1, R11094 += 1 };
  s6 -> s7 [108, 108] { R11176 += 1, R11130 += 1, R11094 += 1 };
  s7 -> s8 [104, 104] { R11176 += 1, R11130 += 1, R11094 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [0, 65535] { R11176 += 1 };
  s8 -> s8 [0, 65535] { R11176 += 1, R11130 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R11176 += 1 };
  accepting s8, s9, s10;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 86] { R11178 += 1, R11132 += 1, R11100 += 1 };
  s0 -> s2 [0, 65535] { R11178 += 1, R11132 += 1, R11099 += 1, R11100 += 1 };
  s0 -> s0 [0, 65535] { R11177 += 1, R11178 += 1 };
  s0 -> s3 [0, 65535] { R11178 += 1, R11131 += 1, R11132 += 1 };
  s0 -> s4 [87, 87] { R11178 += 1, R11132 += 1, R11100 += 1 };
  s0 -> s1 [88, 65535] { R11178 += 1, R11132 += 1, R11100 += 1 };
  s1 -> s1 [0, 86] { R11178 += 1, R11132 += 1, R11100 += 1 };
  s1 -> s4 [87, 87] { R11178 += 1, R11132 += 1, R11100 += 1 };
  s1 -> s1 [88, 65535] { R11178 += 1, R11132 += 1, R11100 += 1 };
  s2 -> s1 [0, 86] { R11178 += 1, R11132 += 1, R11100 += 1 };
  s2 -> s2 [0, 65535] { R11178 += 1, R11132 += 1, R11099 += 1, R11100 += 1 };
  s2 -> s4 [87, 87] { R11178 += 1, R11132 += 1, R11100 += 1 };
  s2 -> s1 [88, 65535] { R11178 += 1, R11132 += 1, R11100 += 1 };
  s3 -> s1 [0, 86] { R11178 += 1, R11132 += 1, R11100 += 1 };
  s3 -> s2 [0, 65535] { R11178 += 1, R11132 += 1, R11099 += 1, R11100 += 1 };
  s3 -> s3 [0, 65535] { R11178 += 1, R11131 += 1, R11132 += 1 };
  s3 -> s4 [87, 87] { R11178 += 1, R11132 += 1, R11100 += 1 };
  s3 -> s1 [88, 65535] { R11178 += 1, R11132 += 1, R11100 += 1 };
  s4 -> s5 [0, 65535] { R11178 += 1, R11132 += 1 };
  s4 -> s4 [0, 65535] { R11178 += 1, R11132 += 1, R11100 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R11178 += 1 };
  s5 -> s5 [0, 65535] { R11178 += 1, R11132 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R11178 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R11178 += 1 };
  accepting s4, s5, s6, s7;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R11180 += 1, R11133 += 1, R11134 += 1 };
  s0 -> s0 [0, 65535] { R11179 += 1, R11180 += 1 };
  s0 -> s2 [0, 65535] { R11180 += 1, R11134 += 1, R11101 += 1, R11102 += 1 };
  s0 -> s3 [0, 65535] { R11180 += 1, R11134 += 1, R11102 += 1, R1 += 1 };
  s1 -> s1 [0, 65535] { R11180 += 1, R11133 += 1, R11134 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s2 [0, 65535] { R11180 += 1, R11134 += 1, R11101 += 1, R11102 += 1 };
  s1 -> s3 [0, 65535] { R11180 += 1, R11134 += 1, R11102 += 1, R1 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R11180 += 1, R11134 += 1, R11101 += 1, R11102 += 1 };
  s2 -> s6 [0, 65535] { R11180 += 1 };
  s2 -> s3 [0, 65535] { R11180 += 1, R11134 += 1, R11102 += 1, R1 += 1 };
  s3 -> s4 [0, 65535] { R11180 += 1, R11134 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R11180 += 1 };
  s3 -> s3 [0, 65535] { R11180 += 1, R11134 += 1, R11102 += 1, R1 += 1 };
  s4 -> s4 [0, 65535] { R11180 += 1, R11134 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R11180 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R11180 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 86] { R11182 += 1, R11136 += 1, R11104 += 1 };
  s0 -> s2 [0, 65535] { R11182 += 1, R11135 += 1, R11136 += 1 };
  s0 -> s3 [0, 65535] { R11182 += 1, R11136 += 1, R11104 += 1, R7 += 1 };
  s0 -> s4 [0, 65535] { R11182 += 1, R11136 += 1, R11103 += 1, R11104 += 1 };
  s0 -> s0 [0, 65535] { R11181 += 1, R11182 += 1 };
  s0 -> s5 [87, 87] { R11182 += 1, R11136 += 1, R11104 += 1 };
  s0 -> s1 [88, 65535] { R11182 += 1, R11136 += 1, R11104 += 1 };
  s1 -> s1 [0, 86] { R11182 += 1, R11136 += 1, R11104 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R11182 += 1 };
  s1 -> s1 [0, 65535] { R11182 += 1, R11136 += 1 };
  s1 -> s5 [87, 87] { R11182 += 1, R11136 += 1, R11104 += 1 };
  s1 -> s1 [88, 65535] { R11182 += 1, R11136 += 1, R11104 += 1 };
  s2 -> s1 [0, 86] { R11182 += 1, R11136 += 1, R11104 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R11182 += 1, R11135 += 1, R11136 += 1 };
  s2 -> s3 [0, 65535] { R11182 += 1, R11136 += 1, R11104 += 1, R7 += 1 };
  s2 -> s4 [0, 65535] { R11182 += 1, R11136 += 1, R11103 += 1, R11104 += 1 };
  s2 -> s5 [87, 87] { R11182 += 1, R11136 += 1, R11104 += 1 };
  s2 -> s1 [88, 65535] { R11182 += 1, R11136 += 1, R11104 += 1 };
  s3 -> s1 [0, 86] { R11182 += 1, R11136 += 1, R11104 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R11182 += 1, R11136 += 1, R11104 += 1, R7 += 1 };
  s3 -> s8 [0, 65535] { R11182 += 1, R11136 += 1 };
  s3 -> s7 [0, 65535] { R11182 += 1 };
  s3 -> s5 [87, 87] { R11182 += 1, R11136 += 1, R11104 += 1 };
  s3 -> s1 [88, 65535] { R11182 += 1, R11136 += 1, R11104 += 1 };
  s4 -> s1 [0, 86] { R11182 += 1, R11136 += 1, R11104 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s3 [0, 65535] { R11182 += 1, R11136 += 1, R11104 += 1, R7 += 1 };
  s4 -> s4 [0, 65535] { R11182 += 1, R11136 += 1, R11103 += 1, R11104 += 1 };
  s4 -> s7 [0, 65535] { R11182 += 1 };
  s4 -> s5 [87, 87] { R11182 += 1, R11136 += 1, R11104 += 1 };
  s4 -> s1 [88, 65535] { R11182 += 1, R11136 += 1, R11104 += 1 };
  s5 -> s5 [0, 65535] { R11182 += 1, R11136 += 1, R11104 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R11182 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R11182 += 1, R11136 += 1 };
  s8 -> s7 [0, 65535] { R11182 += 1 };
  accepting s3, s4, s8, s2, s6, s1, s7, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 86] { R11184 += 1, R11138 += 1, R11106 += 1, R11086 += 1 };
  s0 -> s2 [0, 65535] { R11184 += 1, R11137 += 1, R11138 += 1 };
  s0 -> s0 [0, 65535] { R11183 += 1, R11184 += 1 };
  s0 -> s3 [0, 65535] { R11184 += 1, R11138 += 1, R11105 += 1, R11106 += 1 };
  s0 -> s4 [0, 65535] { R11184 += 1, R11138 += 1, R11106 += 1, R11085 += 1, R11086 += 1 };
  s0 -> s1 [88, 65535] { R11184 += 1, R11138 += 1, R11106 += 1, R11086 += 1 };
  s1 -> s1 [0, 86] { R11184 += 1, R11138 += 1, R11106 += 1, R11086 += 1 };
  s1 -> s5 [0, 65535] { R11184 += 1 };
  s1 -> s6 [0, 65535] { R11184 += 1, R11138 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s1 [0, 65535] { R11184 += 1, R11138 += 1, R11106 += 1 };
  s1 -> s1 [88, 65535] { R11184 += 1, R11138 += 1, R11106 += 1, R11086 += 1 };
  s2 -> s1 [0, 86] { R11184 += 1, R11138 += 1, R11106 += 1, R11086 += 1 };
  s2 -> s2 [0, 65535] { R11184 += 1, R11137 += 1, R11138 += 1 };
  s2 -> s3 [0, 65535] { R11184 += 1, R11138 += 1, R11105 += 1, R11106 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s4 [0, 65535] { R11184 += 1, R11138 += 1, R11106 += 1, R11085 += 1, R11086 += 1 };
  s2 -> s1 [88, 65535] { R11184 += 1, R11138 += 1, R11106 += 1, R11086 += 1 };
  s3 -> s1 [0, 86] { R11184 += 1, R11138 += 1, R11106 += 1, R11086 += 1 };
  s3 -> s3 [0, 65535] { R11184 += 1, R11138 += 1, R11105 += 1, R11106 += 1 };
  s3 -> s5 [0, 65535] { R11184 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s4 [0, 65535] { R11184 += 1, R11138 += 1, R11106 += 1, R11085 += 1, R11086 += 1 };
  s3 -> s1 [88, 65535] { R11184 += 1, R11138 += 1, R11106 += 1, R11086 += 1 };
  s4 -> s1 [0, 86] { R11184 += 1, R11138 += 1, R11106 += 1, R11086 += 1 };
  s4 -> s5 [0, 65535] { R11184 += 1 };
  s4 -> s6 [0, 65535] { R11184 += 1, R11138 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s4 [0, 65535] { R11184 += 1, R11138 += 1, R11106 += 1, R11085 += 1, R11086 += 1 };
  s4 -> s1 [88, 65535] { R11184 += 1, R11138 += 1, R11106 += 1, R11086 += 1 };
  s5 -> s5 [0, 65535] { R11184 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s5 [0, 65535] { R11184 += 1 };
  s6 -> s6 [0, 65535] { R11184 += 1, R11138 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 65535] { R11186 += 1, R11140 += 1, R11108 += 1, R11087 += 1, R11088 += 1 };
  s0 -> s0 [0, 65535] { R11185 += 1, R11186 += 1 };
  s0 -> s2 [0, 65535] { R11186 += 1, R11140 += 1, R11107 += 1, R11108 += 1 };
  s0 -> s3 [0, 65535] { R11186 += 1, R11139 += 1, R11140 += 1 };
  s0 -> s4 [0, 65535] { R11186 += 1, R11140 += 1, R11108 += 1, R11088 += 1, R5988 += 1 };
  s1 -> s1 [0, 65535] { R11186 += 1, R11140 += 1, R11108 += 1, R11087 += 1, R11088 += 1 };
  s1 -> s5 [0, 65535] { R11186 += 1, R11140 += 1 };
  s1 -> s6 [0, 65535] { R11186 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s4 [0, 65535] { R11186 += 1, R11140 += 1, R11108 += 1, R11088 += 1, R5988 += 1 };
  s2 -> s1 [0, 65535] { R11186 += 1, R11140 += 1, R11108 += 1, R11087 += 1, R11088 += 1 };
  s2 -> s6 [0, 65535] { R11186 += 1 };
  s2 -> s2 [0, 65535] { R11186 += 1, R11140 += 1, R11107 += 1, R11108 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s4 [0, 65535] { R11186 += 1, R11140 += 1, R11108 += 1, R11088 += 1, R5988 += 1 };
  s3 -> s1 [0, 65535] { R11186 += 1, R11140 += 1, R11108 += 1, R11087 += 1, R11088 += 1 };
  s3 -> s2 [0, 65535] { R11186 += 1, R11140 += 1, R11107 += 1, R11108 += 1 };
  s3 -> s3 [0, 65535] { R11186 += 1, R11139 += 1, R11140 += 1 };
  s3 -> s8 [0, 65535];
  s3 -> s4 [0, 65535] { R11186 += 1, R11140 += 1, R11108 += 1, R11088 += 1, R5988 += 1 };
  s4 -> s5 [0, 65535] { R11186 += 1, R11140 += 1 };
  s4 -> s6 [0, 65535] { R11186 += 1 };
  s4 -> s7 [0, 65535] { R11186 += 1, R11140 += 1, R11108 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s4 [0, 65535] { R11186 += 1, R11140 += 1, R11108 += 1, R11088 += 1, R5988 += 1 };
  s5 -> s5 [0, 65535] { R11186 += 1, R11140 += 1 };
  s5 -> s6 [0, 65535] { R11186 += 1 };
  s5 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R11186 += 1 };
  s6 -> s8 [0, 65535];
  s7 -> s5 [0, 65535] { R11186 += 1, R11140 += 1 };
  s7 -> s6 [0, 65535] { R11186 += 1 };
  s7 -> s7 [0, 65535] { R11186 += 1, R11140 += 1, R11108 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s0 [0, 65535] { R11187 += 1, R11188 += 1 };
  s0 -> s1 [0, 65535] { R11188 += 1, R11142 += 1, R11109 += 1, R11110 += 1 };
  s0 -> s2 [0, 65535] { R11188 += 1, R11141 += 1, R11142 += 1 };
  s0 -> s3 [0, 65535] { R11188 += 1, R11142 += 1, R11110 += 1, R11089 += 1, R11090 += 1 };
  s0 -> s4 [115, 115] { R11188 += 1, R11142 += 1, R11110 += 1, R11090 += 1 };
  s1 -> s1 [0, 65535] { R11188 += 1, R11142 += 1, R11109 += 1, R11110 += 1 };
  s1 -> s3 [0, 65535] { R11188 += 1, R11142 += 1, R11110 += 1, R11089 += 1, R11090 += 1 };
  s1 -> s4 [115, 115] { R11188 += 1, R11142 += 1, R11110 += 1, R11090 += 1 };
  s2 -> s1 [0, 65535] { R11188 += 1, R11142 += 1, R11109 += 1, R11110 += 1 };
  s2 -> s2 [0, 65535] { R11188 += 1, R11141 += 1, R11142 += 1 };
  s2 -> s3 [0, 65535] { R11188 += 1, R11142 += 1, R11110 += 1, R11089 += 1, R11090 += 1 };
  s2 -> s4 [115, 115] { R11188 += 1, R11142 += 1, R11110 += 1, R11090 += 1 };
  s3 -> s3 [0, 65535] { R11188 += 1, R11142 += 1, R11110 += 1, R11089 += 1, R11090 += 1 };
  s3 -> s4 [115, 115] { R11188 += 1, R11142 += 1, R11110 += 1, R11090 += 1 };
  s4 -> s5 [116, 116] { R11188 += 1, R11142 += 1, R11110 += 1, R11090 += 1 };
  s5 -> s6 [0, 65535] { R11188 += 1 };
  s5 -> s7 [0, 65535] { R11188 += 1, R11142 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s5 [0, 65535] { R11188 += 1, R11142 += 1, R11110 += 1 };
  s6 -> s6 [0, 65535] { R11188 += 1 };
  s6 -> s8 [0, 65535];
  s7 -> s6 [0, 65535] { R11188 += 1 };
  s7 -> s7 [0, 65535] { R11188 += 1, R11142 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  accepting s5, s6, s7, s8;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 65535] { R11190 += 1, R11144 += 1, R11112 += 1, R11096 += 1, R5989 += 1 };
  s0 -> s0 [0, 65535] { R11189 += 1, R11190 += 1 };
  s0 -> s2 [0, 65535] { R11190 += 1, R11144 += 1, R11111 += 1, R11112 += 1 };
  s0 -> s3 [0, 65535] { R11190 += 1, R11144 += 1, R11112 += 1, R11095 += 1, R11096 += 1 };
  s0 -> s4 [0, 65535] { R11190 += 1, R11143 += 1, R11144 += 1 };
  s1 -> s1 [0, 65535] { R11190 += 1, R11144 += 1, R11112 += 1, R11096 += 1, R5989 += 1 };
  s1 -> s8 [0, 65535] { R11190 += 1, R11144 += 1, R11112 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R11190 += 1 };
  s1 -> s7 [0, 65535] { R11190 += 1, R11144 += 1 };
  s2 -> s1 [0, 65535] { R11190 += 1, R11144 += 1, R11112 += 1, R11096 += 1, R5989 += 1 };
  s2 -> s2 [0, 65535] { R11190 += 1, R11144 += 1, R11111 += 1, R11112 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R11190 += 1 };
  s2 -> s3 [0, 65535] { R11190 += 1, R11144 += 1, R11112 += 1, R11095 += 1, R11096 += 1 };
  s3 -> s1 [0, 65535] { R11190 += 1, R11144 += 1, R11112 += 1, R11096 += 1, R5989 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R11190 += 1 };
  s3 -> s3 [0, 65535] { R11190 += 1, R11144 += 1, R11112 += 1, R11095 += 1, R11096 += 1 };
  s3 -> s7 [0, 65535] { R11190 += 1, R11144 += 1 };
  s4 -> s1 [0, 65535] { R11190 += 1, R11144 += 1, R11112 += 1, R11096 += 1, R5989 += 1 };
  s4 -> s2 [0, 65535] { R11190 += 1, R11144 += 1, R11111 += 1, R11112 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s3 [0, 65535] { R11190 += 1, R11144 += 1, R11112 += 1, R11095 += 1, R11096 += 1 };
  s4 -> s4 [0, 65535] { R11190 += 1, R11143 += 1, R11144 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R11190 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R11190 += 1 };
  s7 -> s7 [0, 65535] { R11190 += 1, R11144 += 1 };
  s8 -> s8 [0, 65535] { R11190 += 1, R11144 += 1, R11112 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s6 [0, 65535] { R11190 += 1 };
  s8 -> s7 [0, 65535] { R11190 += 1, R11144 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 65535] { R11192 += 1, R11145 += 1, R11146 += 1 };
  s0 -> s2 [0, 65535] { R11192 += 1, R11146 += 1, R11113 += 1, R11114 += 1 };
  s0 -> s3 [0, 65535] { R11192 += 1, R11146 += 1, R11114 += 1, R11097 += 1, R11098 += 1 };
  s0 -> s0 [0, 65535] { R11191 += 1, R11192 += 1 };
  s0 -> s4 [111, 111] { R11192 += 1, R11146 += 1, R11114 += 1, R11098 += 1 };
  s1 -> s1 [0, 65535] { R11192 += 1, R11145 += 1, R11146 += 1 };
  s1 -> s2 [0, 65535] { R11192 += 1, R11146 += 1, R11113 += 1, R11114 += 1 };
  s1 -> s3 [0, 65535] { R11192 += 1, R11146 += 1, R11114 += 1, R11097 += 1, R11098 += 1 };
  s1 -> s4 [111, 111] { R11192 += 1, R11146 += 1, R11114 += 1, R11098 += 1 };
  s2 -> s2 [0, 65535] { R11192 += 1, R11146 += 1, R11113 += 1, R11114 += 1 };
  s2 -> s3 [0, 65535] { R11192 += 1, R11146 += 1, R11114 += 1, R11097 += 1, R11098 += 1 };
  s2 -> s4 [111, 111] { R11192 += 1, R11146 += 1, R11114 += 1, R11098 += 1 };
  s3 -> s3 [0, 65535] { R11192 += 1, R11146 += 1, R11114 += 1, R11097 += 1, R11098 += 1 };
  s3 -> s4 [111, 111] { R11192 += 1, R11146 += 1, R11114 += 1, R11098 += 1 };
  s4 -> s5 [0, 65535] { R11192 += 1, R11146 += 1 };
  s4 -> s6 [0, 65535] { R11192 += 1 };
  s4 -> s4 [0, 65535] { R11192 += 1, R11146 += 1, R11114 += 1 };
  s4 -> s7 [0, 65535];
  s5 -> s5 [0, 65535] { R11192 += 1, R11146 += 1 };
  s5 -> s6 [0, 65535] { R11192 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s6 [0, 65535] { R11192 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s4, s5, s6, s7;
};
};
constraint R1 = R11090 && R2 = R11114 && R3 = R10870 && R4 = R11192 && R15 = 0 && R16 = R11146 && R5995 = 0 && R5996 = 1 && R5997 = 0 && R5998 = 1 && R10863 - R11146 = 1 && R10864 = R10870 && R10865 - R11146 = 1 && R10866 = R10870 && R10867 - R11146 = 1 && R10868 = R10870 && R10869 - R11146 = 1 && R11089 = 0 && R11093 = 0 && R11094 = 0 && R11097 = 0 && R11098 = 0 && R11099 = 0 && R11100 = R11114 && R11101 = 0 && R11102 = R11114 && R11103 = 0 && R11104 = R11114 && R11105 = 0 && R11106 = R11114 && R11107 = 0 && R11108 = R11114 && R11109 = 0 && R11110 = R11114 && R11111 = 0 && R11112 = R11114 && R11113 = 0 && R11115 = 0 && R11116 = R11146 && R11117 = 0 && R11118 = R11146 && R11119 = 0 && R11120 = R11146 && R11121 = 0 && R11122 = R11146 && R11123 = 0 && R11124 = R11146 && R11125 = 0 && R11126 = R11146 && R11127 = 0 && R11128 = R11146 && R11129 = 0 && R11130 = R11146 && R11131 = 0 && R11132 = R11146 && R11133 = 0 && R11134 = R11146 && R11135 = 0 && R11136 = R11146 && R11137 = 0 && R11138 = R11146 && R11139 = 0 && R11140 = R11146 && R11141 = 0 && R11142 = R11146 && R11143 = 0 && R11144 = R11146 && R11145 = 0 && R11147 = 10 && R11148 = R11192 && R11149 = 10 && R11150 = R11192 && R11151 = 10 && R11152 = R11192 && R11153 = 10 && R11154 = R11192 && R11155 = 10 && R11156 = R11192 && R11157 = 10 && R11158 = R11192 && R11159 = 10 && R11160 = R11192 && R11161 = 10 && R11162 = R11192 && R11163 = 10 && R11164 = R11192 && R11165 = 10 && R11166 = R11192 && R11167 = 10 && R11168 = R11192 && R11169 = 10 && R11170 = R11192 && R11171 = 10 && R11172 = R11192 && R11173 = 10 && R11174 = R11192 && R11175 = 10 && R11176 = R11192 && R11177 = 10 && R11178 = R11192 && R11179 = 10 && R11180 = R11192 && R11181 = 10 && R11182 = R11192 && R11183 = 10 && R11184 = R11192 && R11185 = 10 && R11186 = R11192 && R11187 = 10 && R11188 = R11192 && R11189 = 10 && R11190 = R11192 && R11191 = 10 && R0 != 0 && R7 < 1 && R10 < 1 && R11 < 1 && R11146 < R10870 && -1 < R11090 && 0 < R11114 && -1 < R11146 && 9 < R11192 && (R5991 != 0 || ((R5 != 0 || ((R0 != R5992 || R5992 = 1 || R5992 < 0) && (R0 = R5992 || R5992 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R5992 || R5992 = 1 || R5992 < 0) && (R5992 != 1 || -1 < R0) && (R0 = R5992 || R5992 = 1))))) && (R5993 != 0 || ((R5 != 0 || ((R0 != R5994 || R5994 = 1 || R5994 < 0) && (R0 = R5994 || R5994 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R5994 || R5994 = 1 || R5994 < 0) && (R5994 != 1 || -1 < R0) && (R0 = R5994 || R5994 = 1))))) && (R11085 != 0 || R11086 = R11090 || (R5988 = 0 && R11090 = 0)) && (R11087 != 0 || R11088 = R11090 || (R5988 = 0 && R11090 = 0)) && (R5989 = 0 || (R11095 = 0 && R11096 = 0)) && (R5990 = 0 || (R11091 = 0 && R11092 = 0)) && (R5991 = 0 || (R5 = 0 && R0 < 0)) && (R5993 = 0 || (R5 = 0 && R0 < 0)) && (R11085 = 0 || (R5988 = 0 && R11090 = 0)) && (R11087 = 0 || (R5988 = 0 && R11090 = 0));
// End of Parikh automata intersection problem
