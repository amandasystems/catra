// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R2, R3, R4, R458, R460, R461, R5, R6, R684, R685, R7, R795, R796, R797, R798, R799, R8, R800, R801, R802, R803, R804, R805, R806, R807, R808, R809, R810, R811, R812, R813, R814, R815, R816, R817, R818, R819, R820, R821, R822, R823, R824, R825, R826, R827, R828, R829, R830, R831, R832, R833, R834, R835, R836, R837, R838, R839, R840, R841, R842, R843, R844, R845, R846, R847, R848, R849, R850, R851, R852, R853, R854, R855, R856, R857, R858, R859, R860, R861, R862, R863, R864, R865, R866, R867, R868, R869, R870, R871, R872, R873, R874, R875, R876, R877, R878, R879, R880, R881, R882, R883, R884, R885, R886, R887, R888, R889, R890, R891, R892, R893, R894, R895, R896, R897, R898, R899, R900, R901, R902, R903;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R6 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R863 += 1 };
  s0 -> s0 [0, 65535] { R862 += 1, R863 += 1 };
  s0 -> s2 [46, 46] { R863 += 1 };
  s0 -> s3 [47, 47] { R863 += 1 };
  s0 -> s1 [48, 65535] { R863 += 1 };
  s1 -> s1 [0, 45] { R863 += 1 };
  s1 -> s2 [46, 46] { R863 += 1 };
  s1 -> s3 [47, 47] { R863 += 1 };
  s1 -> s1 [48, 65535] { R863 += 1 };
  s2 -> s1 [0, 45] { R863 += 1 };
  s2 -> s2 [46, 46] { R863 += 1 };
  s2 -> s3 [47, 47] { R863 += 1 };
  s2 -> s1 [48, 114] { R863 += 1 };
  s2 -> s8 [115, 115] { R863 += 1 };
  s2 -> s1 [116, 65535] { R863 += 1 };
  s3 -> s3 [0, 45] { R863 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R863 += 1 };
  s3 -> s3 [47, 65535] { R863 += 1 };
  s4 -> s3 [0, 45] { R863 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R863 += 1 };
  s4 -> s3 [47, 114] { R863 += 1 };
  s4 -> s5 [115, 115] { R863 += 1 };
  s4 -> s3 [116, 65535] { R863 += 1 };
  s5 -> s3 [0, 45] { R863 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R863 += 1 };
  s5 -> s3 [47, 110] { R863 += 1 };
  s5 -> s6 [111, 111] { R863 += 1 };
  s5 -> s3 [112, 65535] { R863 += 1 };
  s6 -> s3 [0, 45] { R863 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R863 += 1 };
  s6 -> s3 [47, 98] { R863 += 1 };
  s6 -> s7 [99, 99] { R863 += 1 };
  s6 -> s3 [100, 65535] { R863 += 1 };
  s7 -> s3 [0, 45] { R863 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R863 += 1 };
  s7 -> s3 [47, 106] { R863 += 1 };
  s7 -> s3 [108, 65535] { R863 += 1 };
  s8 -> s1 [0, 45] { R863 += 1 };
  s8 -> s2 [46, 46] { R863 += 1 };
  s8 -> s3 [47, 47] { R863 += 1 };
  s8 -> s1 [48, 110] { R863 += 1 };
  s8 -> s9 [111, 111] { R863 += 1 };
  s8 -> s1 [112, 65535] { R863 += 1 };
  s9 -> s1 [0, 45] { R863 += 1 };
  s9 -> s2 [46, 46] { R863 += 1 };
  s9 -> s3 [47, 47] { R863 += 1 };
  s9 -> s1 [48, 98] { R863 += 1 };
  s9 -> s10 [99, 99] { R863 += 1 };
  s9 -> s1 [100, 65535] { R863 += 1 };
  s10 -> s1 [0, 45] { R863 += 1 };
  s10 -> s2 [46, 46] { R863 += 1 };
  s10 -> s3 [47, 47] { R863 += 1 };
  s10 -> s1 [48, 106] { R863 += 1 };
  s10 -> s1 [108, 65535] { R863 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R864 += 1, R865 += 1 };
  s0 -> s1 [0, 65535] { R865 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R865 += 1, R5 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R867 += 1, R685 += 1 };
  s0 -> s2 [0, 65535] { R867 += 1, R684 += 1, R685 += 1 };
  s0 -> s0 [0, 65535] { R866 += 1, R867 += 1 };
  s0 -> s3 [47, 47] { R867 += 1 };
  s0 -> s1 [48, 65535] { R867 += 1, R685 += 1 };
  s1 -> s1 [0, 46] { R867 += 1, R685 += 1 };
  s1 -> s3 [47, 47] { R867 += 1 };
  s1 -> s1 [48, 65535] { R867 += 1, R685 += 1 };
  s2 -> s1 [0, 46] { R867 += 1, R685 += 1 };
  s2 -> s2 [0, 65535] { R867 += 1, R684 += 1, R685 += 1 };
  s2 -> s3 [47, 47] { R867 += 1 };
  s2 -> s1 [48, 65535] { R867 += 1, R685 += 1 };
  s3 -> s3 [0, 65535] { R867 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 62] { R869 += 1, R827 += 1 };
  s0 -> s0 [0, 65535] { R868 += 1, R869 += 1 };
  s0 -> s2 [0, 65535] { R869 += 1, R826 += 1, R827 += 1 };
  s0 -> s3 [63, 63] { R869 += 1, R827 += 1 };
  s0 -> s1 [64, 65535] { R869 += 1, R827 += 1 };
  s1 -> s1 [0, 62] { R869 += 1, R827 += 1 };
  s1 -> s3 [63, 63] { R869 += 1, R827 += 1 };
  s1 -> s1 [64, 65535] { R869 += 1, R827 += 1 };
  s2 -> s1 [0, 62] { R869 += 1, R827 += 1 };
  s2 -> s2 [0, 65535] { R869 += 1, R826 += 1, R827 += 1 };
  s2 -> s3 [63, 63] { R869 += 1, R827 += 1 };
  s2 -> s1 [64, 65535] { R869 += 1, R827 += 1 };
  s3 -> s3 [0, 65535] { R869 += 1, R827 += 1 };
  s3 -> s4 [0, 65535] { R869 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R869 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 65535] { R871 += 1, R828 += 1, R829 += 1 };
  s0 -> s2 [0, 65535] { R871 += 1, R829 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R870 += 1, R871 += 1 };
  s1 -> s1 [0, 65535] { R871 += 1, R828 += 1, R829 += 1 };
  s1 -> s2 [0, 65535] { R871 += 1, R829 += 1, R3 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R871 += 1 };
  s2 -> s2 [0, 65535] { R871 += 1, R829 += 1, R3 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R871 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 62] { R873 += 1, R831 += 1, R461 += 1 };
  s0 -> s2 [0, 65535] { R873 += 1, R831 += 1, R460 += 1, R461 += 1 };
  s0 -> s3 [0, 65535] { R873 += 1, R830 += 1, R831 += 1 };
  s0 -> s0 [0, 65535] { R872 += 1, R873 += 1 };
  s0 -> s4 [63, 63] { R873 += 1, R831 += 1 };
  s0 -> s1 [64, 65535] { R873 += 1, R831 += 1, R461 += 1 };
  s1 -> s1 [0, 62] { R873 += 1, R831 += 1, R461 += 1 };
  s1 -> s4 [63, 63] { R873 += 1, R831 += 1 };
  s1 -> s1 [64, 65535] { R873 += 1, R831 += 1, R461 += 1 };
  s2 -> s1 [0, 62] { R873 += 1, R831 += 1, R461 += 1 };
  s2 -> s2 [0, 65535] { R873 += 1, R831 += 1, R460 += 1, R461 += 1 };
  s2 -> s4 [63, 63] { R873 += 1, R831 += 1 };
  s2 -> s1 [64, 65535] { R873 += 1, R831 += 1, R461 += 1 };
  s3 -> s1 [0, 62] { R873 += 1, R831 += 1, R461 += 1 };
  s3 -> s2 [0, 65535] { R873 += 1, R831 += 1, R460 += 1, R461 += 1 };
  s3 -> s3 [0, 65535] { R873 += 1, R830 += 1, R831 += 1 };
  s3 -> s4 [63, 63] { R873 += 1, R831 += 1 };
  s3 -> s1 [64, 65535] { R873 += 1, R831 += 1, R461 += 1 };
  s4 -> s4 [0, 65535] { R873 += 1, R831 += 1 };
  s4 -> s5 [0, 65535] { R873 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R873 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s4, s5, s6;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 62] { R875 += 1, R833 += 1, R801 += 1 };
  s0 -> s2 [0, 65535] { R875 += 1, R832 += 1, R833 += 1 };
  s0 -> s3 [0, 65535] { R875 += 1, R833 += 1, R800 += 1, R801 += 1 };
  s0 -> s0 [0, 65535] { R874 += 1, R875 += 1 };
  s0 -> s4 [63, 63] { R875 += 1, R833 += 1, R801 += 1 };
  s0 -> s1 [64, 65535] { R875 += 1, R833 += 1, R801 += 1 };
  s1 -> s1 [0, 65535] { R875 += 1, R833 += 1, R801 += 1 };
  s1 -> s5 [0, 65535] { R875 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R875 += 1, R833 += 1 };
  s2 -> s1 [0, 62] { R875 += 1, R833 += 1, R801 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R875 += 1, R832 += 1, R833 += 1 };
  s2 -> s3 [0, 65535] { R875 += 1, R833 += 1, R800 += 1, R801 += 1 };
  s2 -> s4 [63, 63] { R875 += 1, R833 += 1, R801 += 1 };
  s2 -> s1 [64, 65535] { R875 += 1, R833 += 1, R801 += 1 };
  s3 -> s1 [0, 62] { R875 += 1, R833 += 1, R801 += 1 };
  s3 -> s5 [0, 65535] { R875 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R875 += 1, R833 += 1, R800 += 1, R801 += 1 };
  s3 -> s4 [63, 63] { R875 += 1, R833 += 1, R801 += 1 };
  s3 -> s1 [64, 65535] { R875 += 1, R833 += 1, R801 += 1 };
  s4 -> s1 [0, 65535] { R875 += 1, R833 += 1, R801 += 1 };
  s5 -> s5 [0, 65535] { R875 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R875 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R875 += 1, R833 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R877 += 1, R835 += 1, R803 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R876 += 1, R877 += 1 };
  s0 -> s2 [0, 65535] { R877 += 1, R835 += 1, R802 += 1, R803 += 1 };
  s0 -> s3 [0, 65535] { R877 += 1, R834 += 1, R835 += 1 };
  s1 -> s5 [0, 65535] { R877 += 1 };
  s1 -> s1 [0, 65535] { R877 += 1, R835 += 1, R803 += 1, R8 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R877 += 1, R835 += 1 };
  s2 -> s5 [0, 65535] { R877 += 1 };
  s2 -> s1 [0, 65535] { R877 += 1, R835 += 1, R803 += 1, R8 += 1 };
  s2 -> s2 [0, 65535] { R877 += 1, R835 += 1, R802 += 1, R803 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R877 += 1, R835 += 1, R803 += 1, R8 += 1 };
  s3 -> s2 [0, 65535] { R877 += 1, R835 += 1, R802 += 1, R803 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R877 += 1, R834 += 1, R835 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R877 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R877 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R877 += 1, R835 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65535] { R879 += 1, R837 += 1, R804 += 1, R805 += 1 };
  s0 -> s2 [0, 65535] { R879 += 1, R837 += 1, R805 += 1, R0 += 1 };
  s0 -> s3 [0, 65535] { R879 += 1, R836 += 1, R837 += 1 };
  s0 -> s0 [0, 65535] { R878 += 1, R879 += 1 };
  s1 -> s5 [0, 65535] { R879 += 1 };
  s1 -> s1 [0, 65535] { R879 += 1, R837 += 1, R804 += 1, R805 += 1 };
  s1 -> s2 [0, 65535] { R879 += 1, R837 += 1, R805 += 1, R0 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R879 += 1 };
  s2 -> s2 [0, 65535] { R879 += 1, R837 += 1, R805 += 1, R0 += 1 };
  s2 -> s6 [0, 65535] { R879 += 1, R837 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R879 += 1, R837 += 1, R804 += 1, R805 += 1 };
  s3 -> s2 [0, 65535] { R879 += 1, R837 += 1, R805 += 1, R0 += 1 };
  s3 -> s3 [0, 65535] { R879 += 1, R836 += 1, R837 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R879 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R879 += 1 };
  s6 -> s6 [0, 65535] { R879 += 1, R837 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 37] { R881 += 1, R839 += 1, R807 += 1, R11 += 1 };
  s0 -> s2 [0, 65535] { R881 += 1, R839 += 1, R807 += 1, R10 += 1, R11 += 1 };
  s0 -> s0 [0, 65535] { R880 += 1, R881 += 1 };
  s0 -> s3 [0, 65535] { R881 += 1, R839 += 1, R806 += 1, R807 += 1 };
  s0 -> s4 [0, 65535] { R881 += 1, R838 += 1, R839 += 1 };
  s0 -> s5 [38, 38] { R881 += 1, R839 += 1, R807 += 1 };
  s0 -> s1 [39, 65535] { R881 += 1, R839 += 1, R807 += 1, R11 += 1 };
  s1 -> s1 [0, 37] { R881 += 1, R839 += 1, R807 += 1, R11 += 1 };
  s1 -> s5 [38, 38] { R881 += 1, R839 += 1, R807 += 1 };
  s1 -> s1 [39, 65535] { R881 += 1, R839 += 1, R807 += 1, R11 += 1 };
  s2 -> s1 [0, 37] { R881 += 1, R839 += 1, R807 += 1, R11 += 1 };
  s2 -> s2 [0, 65535] { R881 += 1, R839 += 1, R807 += 1, R10 += 1, R11 += 1 };
  s2 -> s5 [38, 38] { R881 += 1, R839 += 1, R807 += 1 };
  s2 -> s1 [39, 65535] { R881 += 1, R839 += 1, R807 += 1, R11 += 1 };
  s3 -> s1 [0, 37] { R881 += 1, R839 += 1, R807 += 1, R11 += 1 };
  s3 -> s2 [0, 65535] { R881 += 1, R839 += 1, R807 += 1, R10 += 1, R11 += 1 };
  s3 -> s3 [0, 65535] { R881 += 1, R839 += 1, R806 += 1, R807 += 1 };
  s3 -> s5 [38, 38] { R881 += 1, R839 += 1, R807 += 1 };
  s3 -> s1 [39, 65535] { R881 += 1, R839 += 1, R807 += 1, R11 += 1 };
  s4 -> s1 [0, 37] { R881 += 1, R839 += 1, R807 += 1, R11 += 1 };
  s4 -> s2 [0, 65535] { R881 += 1, R839 += 1, R807 += 1, R10 += 1, R11 += 1 };
  s4 -> s3 [0, 65535] { R881 += 1, R839 += 1, R806 += 1, R807 += 1 };
  s4 -> s4 [0, 65535] { R881 += 1, R838 += 1, R839 += 1 };
  s4 -> s5 [38, 38] { R881 += 1, R839 += 1, R807 += 1 };
  s4 -> s1 [39, 65535] { R881 += 1, R839 += 1, R807 += 1, R11 += 1 };
  s5 -> s5 [0, 65535] { R881 += 1, R839 += 1, R807 += 1 };
  s5 -> s6 [0, 65535] { R881 += 1, R839 += 1 };
  s5 -> s7 [0, 65535];
  s5 -> s8 [0, 65535] { R881 += 1 };
  s6 -> s6 [0, 65535] { R881 += 1, R839 += 1 };
  s6 -> s7 [0, 65535];
  s6 -> s8 [0, 65535] { R881 += 1 };
  s7 -> s7 [0, 65535];
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R881 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 45] { R883 += 1, R841 += 1, R809 += 1 };
  s0 -> s2 [0, 65535] { R883 += 1, R841 += 1, R808 += 1, R809 += 1 };
  s0 -> s0 [0, 65535] { R882 += 1, R883 += 1 };
  s0 -> s3 [0, 65535] { R883 += 1, R840 += 1, R841 += 1 };
  s0 -> s1 [47, 65535] { R883 += 1, R841 += 1, R809 += 1 };
  s1 -> s1 [0, 45] { R883 += 1, R841 += 1, R809 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R883 += 1 };
  s1 -> s1 [0, 65535] { R883 += 1, R841 += 1 };
  s1 -> s1 [47, 65535] { R883 += 1, R841 += 1, R809 += 1 };
  s2 -> s1 [0, 45] { R883 += 1, R841 += 1, R809 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R883 += 1, R841 += 1, R808 += 1, R809 += 1 };
  s2 -> s5 [0, 65535] { R883 += 1 };
  s2 -> s1 [47, 65535] { R883 += 1, R841 += 1, R809 += 1 };
  s3 -> s1 [0, 45] { R883 += 1, R841 += 1, R809 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R883 += 1, R841 += 1, R808 += 1, R809 += 1 };
  s3 -> s3 [0, 65535] { R883 += 1, R840 += 1, R841 += 1 };
  s3 -> s1 [47, 65535] { R883 += 1, R841 += 1, R809 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R883 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s0 [0, 65535] { R884 += 1, R885 += 1 };
  s0 -> s1 [0, 65535] { R885 += 1, R843 += 1, R811 += 1, R795 += 1 };
  s0 -> s2 [0, 65535] { R885 += 1, R842 += 1, R843 += 1 };
  s0 -> s3 [0, 65535] { R885 += 1, R843 += 1, R810 += 1, R811 += 1 };
  s1 -> s6 [0, 65535] { R885 += 1, R843 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R885 += 1, R843 += 1, R811 += 1, R795 += 1 };
  s1 -> s5 [0, 65535] { R885 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R885 += 1, R843 += 1, R811 += 1, R795 += 1 };
  s2 -> s2 [0, 65535] { R885 += 1, R842 += 1, R843 += 1 };
  s2 -> s3 [0, 65535] { R885 += 1, R843 += 1, R810 += 1, R811 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R885 += 1, R843 += 1, R811 += 1, R795 += 1 };
  s3 -> s5 [0, 65535] { R885 += 1 };
  s3 -> s3 [0, 65535] { R885 += 1, R843 += 1, R810 += 1, R811 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R885 += 1 };
  s6 -> s6 [0, 65535] { R885 += 1, R843 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R885 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 63] { R887 += 1, R845 += 1 };
  s0 -> s0 [0, 65535] { R886 += 1, R887 += 1 };
  s0 -> s2 [0, 65535] { R887 += 1, R844 += 1, R845 += 1 };
  s0 -> s3 [64, 64] { R887 += 1, R845 += 1 };
  s0 -> s1 [65, 65535] { R887 += 1, R845 += 1 };
  s1 -> s1 [0, 63] { R887 += 1, R845 += 1 };
  s1 -> s3 [64, 64] { R887 += 1, R845 += 1 };
  s1 -> s1 [65, 65535] { R887 += 1, R845 += 1 };
  s2 -> s1 [0, 63] { R887 += 1, R845 += 1 };
  s2 -> s2 [0, 65535] { R887 += 1, R844 += 1, R845 += 1 };
  s2 -> s3 [64, 64] { R887 += 1, R845 += 1 };
  s2 -> s1 [65, 65535] { R887 += 1, R845 += 1 };
  s3 -> s4 [0, 65535] { R887 += 1 };
  s3 -> s3 [0, 65535] { R887 += 1, R845 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R887 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R889 += 1, R847 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R888 += 1, R889 += 1 };
  s0 -> s2 [0, 65535] { R889 += 1, R846 += 1, R847 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R889 += 1, R847 += 1, R4 += 1 };
  s1 -> s4 [0, 65535] { R889 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R889 += 1, R847 += 1, R4 += 1 };
  s2 -> s2 [0, 65535] { R889 += 1, R846 += 1, R847 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R889 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 36] { R891 += 1, R849 += 1, R813 += 1 };
  s0 -> s2 [0, 65535] { R891 += 1, R848 += 1, R849 += 1 };
  s0 -> s3 [0, 65535] { R891 += 1, R849 += 1, R812 += 1, R813 += 1 };
  s0 -> s0 [0, 65535] { R890 += 1, R891 += 1 };
  s0 -> s1 [38, 42] { R891 += 1, R849 += 1, R813 += 1 };
  s0 -> s1 [44, 57] { R891 += 1, R849 += 1, R813 += 1 };
  s0 -> s1 [59, 63] { R891 += 1, R849 += 1, R813 += 1 };
  s0 -> s1 [65, 65535] { R891 += 1, R849 += 1, R813 += 1 };
  s1 -> s1 [0, 36] { R891 += 1, R849 += 1, R813 += 1 };
  s1 -> s1 [0, 65535] { R891 += 1, R849 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R891 += 1 };
  s1 -> s1 [38, 42] { R891 += 1, R849 += 1, R813 += 1 };
  s1 -> s1 [44, 57] { R891 += 1, R849 += 1, R813 += 1 };
  s1 -> s1 [59, 63] { R891 += 1, R849 += 1, R813 += 1 };
  s1 -> s1 [65, 65535] { R891 += 1, R849 += 1, R813 += 1 };
  s2 -> s1 [0, 36] { R891 += 1, R849 += 1, R813 += 1 };
  s2 -> s2 [0, 65535] { R891 += 1, R848 += 1, R849 += 1 };
  s2 -> s3 [0, 65535] { R891 += 1, R849 += 1, R812 += 1, R813 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [38, 42] { R891 += 1, R849 += 1, R813 += 1 };
  s2 -> s1 [44, 57] { R891 += 1, R849 += 1, R813 += 1 };
  s2 -> s1 [59, 63] { R891 += 1, R849 += 1, R813 += 1 };
  s2 -> s1 [65, 65535] { R891 += 1, R849 += 1, R813 += 1 };
  s3 -> s1 [0, 36] { R891 += 1, R849 += 1, R813 += 1 };
  s3 -> s3 [0, 65535] { R891 += 1, R849 += 1, R812 += 1, R813 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R891 += 1 };
  s3 -> s1 [38, 42] { R891 += 1, R849 += 1, R813 += 1 };
  s3 -> s1 [44, 57] { R891 += 1, R849 += 1, R813 += 1 };
  s3 -> s1 [59, 63] { R891 += 1, R849 += 1, R813 += 1 };
  s3 -> s1 [65, 65535] { R891 += 1, R849 += 1, R813 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R891 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 65535] { R893 += 1, R851 += 1, R814 += 1, R815 += 1 };
  s0 -> s2 [0, 65535] { R893 += 1, R851 += 1, R815 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R892 += 1, R893 += 1 };
  s0 -> s3 [0, 65535] { R893 += 1, R850 += 1, R851 += 1 };
  s1 -> s5 [0, 65535] { R893 += 1 };
  s1 -> s1 [0, 65535] { R893 += 1, R851 += 1, R814 += 1, R815 += 1 };
  s1 -> s2 [0, 65535] { R893 += 1, R851 += 1, R815 += 1, R2 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R893 += 1 };
  s2 -> s6 [0, 65535] { R893 += 1, R851 += 1 };
  s2 -> s2 [0, 65535] { R893 += 1, R851 += 1, R815 += 1, R2 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R893 += 1, R851 += 1, R814 += 1, R815 += 1 };
  s3 -> s2 [0, 65535] { R893 += 1, R851 += 1, R815 += 1, R2 += 1 };
  s3 -> s3 [0, 65535] { R893 += 1, R850 += 1, R851 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R893 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R893 += 1 };
  s6 -> s6 [0, 65535] { R893 += 1, R851 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 43] { R895 += 1, R853 += 1, R817 += 1 };
  s0 -> s2 [0, 65535] { R895 += 1, R852 += 1, R853 += 1 };
  s0 -> s3 [0, 65535] { R895 += 1, R853 += 1, R816 += 1, R817 += 1 };
  s0 -> s0 [0, 65535] { R894 += 1, R895 += 1 };
  s0 -> s1 [45, 64] { R895 += 1, R853 += 1, R817 += 1 };
  s0 -> s1 [91, 65535] { R895 += 1, R853 += 1, R817 += 1 };
  s1 -> s1 [0, 43] { R895 += 1, R853 += 1, R817 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R895 += 1 };
  s1 -> s1 [0, 65535] { R895 += 1, R853 += 1 };
  s1 -> s1 [45, 64] { R895 += 1, R853 += 1, R817 += 1 };
  s1 -> s1 [91, 65535] { R895 += 1, R853 += 1, R817 += 1 };
  s2 -> s1 [0, 43] { R895 += 1, R853 += 1, R817 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R895 += 1, R852 += 1, R853 += 1 };
  s2 -> s3 [0, 65535] { R895 += 1, R853 += 1, R816 += 1, R817 += 1 };
  s2 -> s1 [45, 64] { R895 += 1, R853 += 1, R817 += 1 };
  s2 -> s1 [91, 65535] { R895 += 1, R853 += 1, R817 += 1 };
  s3 -> s1 [0, 43] { R895 += 1, R853 += 1, R817 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R895 += 1 };
  s3 -> s3 [0, 65535] { R895 += 1, R853 += 1, R816 += 1, R817 += 1 };
  s3 -> s1 [45, 64] { R895 += 1, R853 += 1, R817 += 1 };
  s3 -> s1 [91, 65535] { R895 += 1, R853 += 1, R817 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R895 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 65535] { R897 += 1, R855 += 1, R819 += 1, R1 += 1 };
  s0 -> s2 [0, 65535] { R897 += 1, R854 += 1, R855 += 1 };
  s0 -> s0 [0, 65535] { R896 += 1, R897 += 1 };
  s0 -> s3 [0, 65535] { R897 += 1, R855 += 1, R818 += 1, R819 += 1 };
  s1 -> s1 [0, 65535] { R897 += 1, R855 += 1, R819 += 1, R1 += 1 };
  s1 -> s6 [0, 65535] { R897 += 1, R855 += 1 };
  s1 -> s4 [0, 65535] { R897 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R897 += 1, R855 += 1, R819 += 1, R1 += 1 };
  s2 -> s2 [0, 65535] { R897 += 1, R854 += 1, R855 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R897 += 1, R855 += 1, R818 += 1, R819 += 1 };
  s3 -> s1 [0, 65535] { R897 += 1, R855 += 1, R819 += 1, R1 += 1 };
  s3 -> s4 [0, 65535] { R897 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R897 += 1, R855 += 1, R818 += 1, R819 += 1 };
  s4 -> s4 [0, 65535] { R897 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R897 += 1, R855 += 1 };
  s6 -> s4 [0, 65535] { R897 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 57] { R899 += 1, R857 += 1, R821 += 1 };
  s0 -> s2 [0, 65535] { R899 += 1, R857 += 1, R821 += 1, R458 += 1 };
  s0 -> s0 [0, 65535] { R898 += 1, R899 += 1 };
  s0 -> s3 [0, 65535] { R899 += 1, R857 += 1, R820 += 1, R821 += 1 };
  s0 -> s4 [0, 65535] { R899 += 1, R856 += 1, R857 += 1 };
  s0 -> s5 [58, 58] { R899 += 1, R857 += 1, R821 += 1 };
  s0 -> s1 [59, 65535] { R899 += 1, R857 += 1, R821 += 1 };
  s1 -> s1 [0, 57] { R899 += 1, R857 += 1, R821 += 1 };
  s1 -> s7 [0, 65535] { R899 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R899 += 1, R857 += 1 };
  s1 -> s5 [58, 58] { R899 += 1, R857 += 1, R821 += 1 };
  s1 -> s1 [59, 65535] { R899 += 1, R857 += 1, R821 += 1 };
  s2 -> s1 [0, 57] { R899 += 1, R857 += 1, R821 += 1 };
  s2 -> s2 [0, 65535] { R899 += 1, R857 += 1, R821 += 1, R458 += 1 };
  s2 -> s8 [0, 65535] { R899 += 1, R857 += 1 };
  s2 -> s7 [0, 65535] { R899 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s5 [58, 58] { R899 += 1, R857 += 1, R821 += 1 };
  s2 -> s1 [59, 65535] { R899 += 1, R857 += 1, R821 += 1 };
  s3 -> s1 [0, 57] { R899 += 1, R857 += 1, R821 += 1 };
  s3 -> s2 [0, 65535] { R899 += 1, R857 += 1, R821 += 1, R458 += 1 };
  s3 -> s7 [0, 65535] { R899 += 1 };
  s3 -> s3 [0, 65535] { R899 += 1, R857 += 1, R820 += 1, R821 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s5 [58, 58] { R899 += 1, R857 += 1, R821 += 1 };
  s3 -> s1 [59, 65535] { R899 += 1, R857 += 1, R821 += 1 };
  s4 -> s1 [0, 57] { R899 += 1, R857 += 1, R821 += 1 };
  s4 -> s2 [0, 65535] { R899 += 1, R857 += 1, R821 += 1, R458 += 1 };
  s4 -> s3 [0, 65535] { R899 += 1, R857 += 1, R820 += 1, R821 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R899 += 1, R856 += 1, R857 += 1 };
  s4 -> s5 [58, 58] { R899 += 1, R857 += 1, R821 += 1 };
  s4 -> s1 [59, 65535] { R899 += 1, R857 += 1, R821 += 1 };
  s5 -> s5 [0, 65535] { R899 += 1, R857 += 1, R821 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R899 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R899 += 1, R857 += 1 };
  s8 -> s7 [0, 65535] { R899 += 1 };
  s8 -> s6 [0, 65535];
  accepting s3, s4, s8, s2, s6, s1, s7, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 90] { R901 += 1, R859 += 1, R823 += 1, R797 += 1 };
  s0 -> s0 [0, 65535] { R900 += 1, R901 += 1 };
  s0 -> s2 [0, 65535] { R901 += 1, R859 += 1, R823 += 1, R796 += 1, R797 += 1 };
  s0 -> s3 [0, 65535] { R901 += 1, R859 += 1, R822 += 1, R823 += 1 };
  s0 -> s4 [0, 65535] { R901 += 1, R858 += 1, R859 += 1 };
  s0 -> s5 [91, 91] { R901 += 1, R859 += 1, R823 += 1, R797 += 1 };
  s0 -> s1 [92, 65535] { R901 += 1, R859 += 1, R823 += 1, R797 += 1 };
  s1 -> s8 [0, 65535] { R901 += 1, R859 += 1 };
  s1 -> s1 [0, 65535] { R901 += 1, R859 += 1, R823 += 1, R797 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s9 [0, 65535] { R901 += 1, R859 += 1, R823 += 1 };
  s1 -> s7 [0, 65535] { R901 += 1 };
  s2 -> s1 [0, 90] { R901 += 1, R859 += 1, R823 += 1, R797 += 1 };
  s2 -> s2 [0, 65535] { R901 += 1, R859 += 1, R823 += 1, R796 += 1, R797 += 1 };
  s2 -> s8 [0, 65535] { R901 += 1, R859 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s7 [0, 65535] { R901 += 1 };
  s2 -> s5 [91, 91] { R901 += 1, R859 += 1, R823 += 1, R797 += 1 };
  s2 -> s1 [92, 65535] { R901 += 1, R859 += 1, R823 += 1, R797 += 1 };
  s3 -> s1 [0, 90] { R901 += 1, R859 += 1, R823 += 1, R797 += 1 };
  s3 -> s2 [0, 65535] { R901 += 1, R859 += 1, R823 += 1, R796 += 1, R797 += 1 };
  s3 -> s3 [0, 65535] { R901 += 1, R859 += 1, R822 += 1, R823 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s7 [0, 65535] { R901 += 1 };
  s3 -> s5 [91, 91] { R901 += 1, R859 += 1, R823 += 1, R797 += 1 };
  s3 -> s1 [92, 65535] { R901 += 1, R859 += 1, R823 += 1, R797 += 1 };
  s4 -> s1 [0, 90] { R901 += 1, R859 += 1, R823 += 1, R797 += 1 };
  s4 -> s2 [0, 65535] { R901 += 1, R859 += 1, R823 += 1, R796 += 1, R797 += 1 };
  s4 -> s3 [0, 65535] { R901 += 1, R859 += 1, R822 += 1, R823 += 1 };
  s4 -> s4 [0, 65535] { R901 += 1, R858 += 1, R859 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s5 [91, 91] { R901 += 1, R859 += 1, R823 += 1, R797 += 1 };
  s4 -> s1 [92, 65535] { R901 += 1, R859 += 1, R823 += 1, R797 += 1 };
  s5 -> s1 [0, 65535] { R901 += 1, R859 += 1, R823 += 1, R797 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R901 += 1 };
  s8 -> s8 [0, 65535] { R901 += 1, R859 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R901 += 1 };
  s9 -> s8 [0, 65535] { R901 += 1, R859 += 1 };
  s9 -> s6 [0, 65535];
  s9 -> s9 [0, 65535] { R901 += 1, R859 += 1, R823 += 1 };
  s9 -> s7 [0, 65535] { R901 += 1 };
  accepting s3, s4, s8, s2, s9, s6, s1, s7, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s0 [0, 65535] { R902 += 1, R903 += 1 };
  s0 -> s1 [0, 65535] { R903 += 1, R860 += 1, R861 += 1 };
  s0 -> s2 [0, 65535] { R903 += 1, R861 += 1, R825 += 1, R799 += 1, R7 += 1 };
  s0 -> s3 [0, 65535] { R903 += 1, R861 += 1, R824 += 1, R825 += 1 };
  s0 -> s4 [0, 65535] { R903 += 1, R861 += 1, R825 += 1, R798 += 1, R799 += 1 };
  s1 -> s1 [0, 65535] { R903 += 1, R860 += 1, R861 += 1 };
  s1 -> s2 [0, 65535] { R903 += 1, R861 += 1, R825 += 1, R799 += 1, R7 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s3 [0, 65535] { R903 += 1, R861 += 1, R824 += 1, R825 += 1 };
  s1 -> s4 [0, 65535] { R903 += 1, R861 += 1, R825 += 1, R798 += 1, R799 += 1 };
  s2 -> s5 [0, 65535] { R903 += 1 };
  s2 -> s8 [0, 65535] { R903 += 1, R861 += 1, R825 += 1 };
  s2 -> s2 [0, 65535] { R903 += 1, R861 += 1, R825 += 1, R799 += 1, R7 += 1 };
  s2 -> s6 [0, 65535] { R903 += 1, R861 += 1 };
  s2 -> s7 [0, 65535];
  s3 -> s5 [0, 65535] { R903 += 1 };
  s3 -> s2 [0, 65535] { R903 += 1, R861 += 1, R825 += 1, R799 += 1, R7 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s3 [0, 65535] { R903 += 1, R861 += 1, R824 += 1, R825 += 1 };
  s3 -> s4 [0, 65535] { R903 += 1, R861 += 1, R825 += 1, R798 += 1, R799 += 1 };
  s4 -> s5 [0, 65535] { R903 += 1 };
  s4 -> s2 [0, 65535] { R903 += 1, R861 += 1, R825 += 1, R799 += 1, R7 += 1 };
  s4 -> s6 [0, 65535] { R903 += 1, R861 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s4 [0, 65535] { R903 += 1, R861 += 1, R825 += 1, R798 += 1, R799 += 1 };
  s5 -> s5 [0, 65535] { R903 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s5 [0, 65535] { R903 += 1 };
  s6 -> s6 [0, 65535] { R903 += 1, R861 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  s8 -> s5 [0, 65535] { R903 += 1 };
  s8 -> s8 [0, 65535] { R903 += 1, R861 += 1, R825 += 1 };
  s8 -> s6 [0, 65535] { R903 += 1, R861 += 1 };
  s8 -> s7 [0, 65535];
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
};
constraint R3 = R807 && R4 = R825 && R5 = R843 && R6 = R903 && R10 = 0 && R460 = 0 && R461 - R806 = -1 && R684 = 0 && R685 = R861 && R800 = 0 && R801 = 1 && R802 = 0 && R803 = 1 && R804 = R806 && R805 = R807 && R812 = 0 && R813 = 1 && R814 = 0 && R815 = 1 && R816 = 2 && R817 = R825 && R818 = 2 && R819 = R825 && R820 = 2 && R821 = R825 && R822 = 2 && R823 = R825 && R824 = 2 && R826 - R861 = 1 && R827 = R843 && R828 - R861 = 1 && R829 = R843 && R830 - R861 = 1 && R831 = R843 && R832 - R861 = 1 && R833 = R843 && R834 - R861 = 1 && R835 = R843 && R836 - R861 = 1 && R837 = R843 && R838 - R861 = 1 && R839 = R843 && R840 - R861 = 1 && R841 = R843 && R842 - R861 = 1 && R844 = 0 && R845 = R861 && R846 = 0 && R847 = R861 && R848 = 0 && R849 = R861 && R850 = 0 && R851 = R861 && R852 = 0 && R853 = R861 && R854 = 0 && R855 = R861 && R856 = 0 && R857 = R861 && R858 = 0 && R859 = R861 && R860 = 0 && R862 = 10 && R863 = R903 && R864 = 10 && R865 = R903 && R866 = 10 && R867 = R903 && R868 = 10 && R869 = R903 && R870 = 10 && R871 = R903 && R872 = 10 && R873 = R903 && R874 = 10 && R875 = R903 && R876 = 10 && R877 = R903 && R878 = 10 && R879 = R903 && R880 = 10 && R881 = R903 && R882 = 10 && R883 = R903 && R884 = 10 && R885 = R903 && R886 = 10 && R887 = R903 && R888 = 10 && R889 = R903 && R890 = 10 && R891 = R903 && R892 = 10 && R893 = R903 && R894 = 10 && R895 = R903 && R896 = 10 && R897 = R903 && R898 = 10 && R899 = R903 && R900 = 10 && R901 = R903 && R902 = 10 && R0 != 0 && R1 != 0 && R2 != 0 && -1 < R11 && R458 < 1 && R806 - R807 < 1 && 0 < R806 && 1 < R825 && R861 < R843 && -1 < R861 && 9 < R903 && (R796 != 0 || ((R7 != 0 || ((R1 != R797 || R797 = 1 || R797 < 0) && (R1 = R797 || R797 = 1 || R1 < 1))) && (R7 = 0 || ((R1 != R797 || R797 = 1 || R797 < 0) && (R797 != 1 || -1 < R1) && (R1 = R797 || R797 = 1))))) && (R798 != 0 || ((R7 != 0 || ((R1 != R799 || R799 = 1 || R799 < 0) && (R1 = R799 || R799 = 1 || R1 < 1))) && (R7 = 0 || ((R1 != R799 || R799 = 1 || R799 < 0) && (R799 != 1 || -1 < R1) && (R1 = R799 || R799 = 1))))) && (R808 != 0 || R806 - R809 = 1 || (R795 = 0 && R806 = 1)) && (R810 != 0 || R806 - R811 = 1 || (R795 = 0 && R806 = 1)) && (R796 = 0 || (R7 = 0 && R1 < 0)) && (R798 = 0 || (R7 = 0 && R1 < 0)) && (R808 = 0 || (R795 = 0 && R806 = 1)) && (R810 = 0 || (R795 = 0 && R806 = 1));
// End of Parikh automata intersection problem
