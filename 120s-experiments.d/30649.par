// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R100, R101, R102, R103, R104, R105, R106, R107, R108, R109, R110, R111, R112, R113, R114, R115, R116, R117, R118, R119, R120, R121, R122, R123, R124, R125, R126, R127, R128, R129, R13, R130, R131, R132, R133, R134, R135, R136, R137, R138, R139, R140, R141, R142, R17, R18, R21, R22, R3, R33, R34, R35, R36, R37, R38, R39, R40, R41, R42, R43, R44, R45, R46, R47, R48, R49, R50, R51, R52, R53, R54, R55, R56, R57, R58, R59, R60, R65, R66, R67, R68, R69, R7, R70, R71, R72, R73, R74, R75, R76, R77, R78, R79, R80, R81, R82, R83, R84, R85, R86, R87, R88, R89, R90, R91, R92, R93, R94, R95, R96, R97, R98, R99;
synchronised {  // Automata constraining key2
automaton key2_0 {
  init s0;
  s0 -> s0 [0, 64];
  s0 -> s1 [65, 65];
  s0 -> s0 [66, 65535];
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton key2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton key2_2 {
  init s0;
  s0 -> s1 [0, 64];
  s0 -> s0 [0, 65535] { R13 += 1 };
  s0 -> s2 [65, 65];
  s0 -> s1 [66, 65535];
  s1 -> s1 [0, 64];
  s1 -> s2 [65, 65];
  s1 -> s1 [66, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton key2_3 {
  init s0;
  s0 -> s1 [0, 64] { R106 += 1 };
  s0 -> s0 [0, 65535] { R105 += 1, R106 += 1 };
  s0 -> s1 [66, 65535] { R106 += 1 };
  s1 -> s1 [0, 64] { R106 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [66, 65535] { R106 += 1 };
  accepting s0, s1;
};
automaton key2_4 {
  init s0;
  s0 -> s1 [0, 65535] { R108 += 1, R21 += 1 };
  s0 -> s0 [0, 65535] { R107 += 1, R108 += 1 };
  s1 -> s1 [0, 65535] { R108 += 1, R21 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton key2_5 {
  init s0;
  s0 -> s1 [0, 65] { R110 += 1 };
  s0 -> s0 [0, 65535] { R109 += 1, R110 += 1 };
  s0 -> s2 [79, 79] { R110 += 1 };
  s0 -> s1 [80, 65535] { R110 += 1 };
  s1 -> s1 [0, 65] { R110 += 1 };
  s1 -> s2 [79, 79] { R110 += 1 };
  s1 -> s1 [80, 65535] { R110 += 1 };
  s2 -> s2 [0, 65] { R110 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [79, 65535] { R110 += 1 };
  accepting s2;
};
automaton key2_6 {
  init s0;
  s0 -> s1 [0, 65535] { R112 += 1, R78 += 1 };
  s0 -> s0 [0, 65535] { R111 += 1, R112 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R112 += 1, R78 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton key2_7 {
  init s0;
  s0 -> s1 [0, 78] { R114 += 1 };
  s0 -> s0 [0, 65535] { R113 += 1, R114 += 1 };
  s0 -> s2 [0, 65535] { R114 += 1, R80 += 1 };
  s0 -> s1 [80, 65535] { R114 += 1 };
  s1 -> s1 [0, 78] { R114 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [80, 65535] { R114 += 1 };
  s2 -> s1 [0, 78] { R114 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R114 += 1, R80 += 1 };
  s2 -> s1 [80, 65535] { R114 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton key2_8 {
  init s0;
  s0 -> s1 [0, 78] { R116 += 1, R84 += 1 };
  s0 -> s0 [0, 65535] { R115 += 1, R116 += 1 };
  s0 -> s2 [0, 65535] { R116 += 1, R83 += 1, R84 += 1 };
  s0 -> s1 [80, 65535] { R116 += 1, R84 += 1 };
  s1 -> s1 [0, 78] { R116 += 1, R84 += 1 };
  s1 -> s1 [0, 65535] { R116 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [80, 65535] { R116 += 1, R84 += 1 };
  s2 -> s1 [0, 78] { R116 += 1, R84 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R116 += 1, R83 += 1, R84 += 1 };
  s2 -> s1 [80, 65535] { R116 += 1, R84 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton key2_9 {
  init s0;
  s0 -> s1 [0, 65535] { R118 += 1, R89 += 1, R90 += 1 };
  s0 -> s2 [0, 65535] { R118 += 1, R88 += 1, R89 += 1 };
  s0 -> s0 [0, 65535] { R117 += 1, R118 += 1 };
  s1 -> s1 [0, 65535] { R118 += 1, R89 += 1, R90 += 1 };
  s1 -> s4 [0, 65535] { R118 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R118 += 1, R89 += 1, R90 += 1 };
  s2 -> s2 [0, 65535] { R118 += 1, R88 += 1, R89 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R118 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton key2_10 {
  init s0;
  s0 -> s1 [0, 79] { R120 += 1, R94 += 1 };
  s0 -> s2 [0, 65535] { R120 += 1, R93 += 1, R94 += 1 };
  s0 -> s0 [0, 65535] { R119 += 1, R120 += 1 };
  s0 -> s1 [91, 65535] { R120 += 1, R94 += 1 };
  s1 -> s1 [0, 79] { R120 += 1, R94 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R120 += 1 };
  s1 -> s1 [91, 65535] { R120 += 1, R94 += 1 };
  s2 -> s1 [0, 79] { R120 += 1, R94 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R120 += 1, R93 += 1, R94 += 1 };
  s2 -> s1 [91, 65535] { R120 += 1, R94 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton key2_11 {
  init s0;
  s0 -> s0 [0, 65535] { R121 += 1, R122 += 1 };
  s0 -> s1 [0, 65535] { R122 += 1, R98 += 1, R99 += 1 };
  s0 -> s2 [0, 65535] { R122 += 1, R99 += 1, R100 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R122 += 1, R98 += 1, R99 += 1 };
  s1 -> s2 [0, 65535] { R122 += 1, R99 += 1, R100 += 1 };
  s2 -> s3 [0, 65535] { R122 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R122 += 1, R99 += 1, R100 += 1 };
  s3 -> s3 [0, 65535] { R122 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton key2_12 {
  init s0;
  s0 -> s1 [0, 78] { R124 += 1, R104 += 1 };
  s0 -> s2 [0, 65535] { R124 += 1, R103 += 1, R104 += 1 };
  s0 -> s0 [0, 65535] { R123 += 1, R124 += 1 };
  s0 -> s3 [79, 79] { R124 += 1, R104 += 1 };
  s0 -> s4 [79, 79] { R124 += 1, R104 += 1 };
  s0 -> s1 [91, 65535] { R124 += 1, R104 += 1 };
  s1 -> s1 [0, 78] { R124 += 1, R104 += 1 };
  s1 -> s1 [0, 65535] { R124 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [79, 79] { R124 += 1, R104 += 1 };
  s1 -> s4 [79, 79] { R124 += 1, R104 += 1 };
  s1 -> s1 [91, 65535] { R124 += 1, R104 += 1 };
  s2 -> s1 [0, 78] { R124 += 1, R104 += 1 };
  s2 -> s2 [0, 65535] { R124 += 1, R103 += 1, R104 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [79, 79] { R124 += 1, R104 += 1 };
  s2 -> s4 [79, 79] { R124 += 1, R104 += 1 };
  s2 -> s1 [91, 65535] { R124 += 1, R104 += 1 };
  s3 -> s3 [0, 79] { R124 += 1, R104 += 1 };
  s3 -> s3 [0, 65535] { R124 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [91, 65535] { R124 += 1, R104 += 1 };
  s4 -> s4 [0, 65535] { R124 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton key2_13 {
  init s0;
  s0 -> s0 [0, 65535] { R125 += 1, R126 += 1 };
  s0 -> s1 [0, 65535] { R126 += 1, R22 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R126 += 1, R22 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton key2_14 {
  init s0;
  s0 -> s1 [0, 64] { R128 += 1 };
  s0 -> s0 [0, 65535] { R127 += 1, R128 += 1 };
  s0 -> s2 [65, 65] { R128 += 1 };
  s0 -> s3 [65, 65] { R128 += 1 };
  s0 -> s1 [80, 65535] { R128 += 1 };
  s1 -> s1 [0, 64] { R128 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R128 += 1 };
  s1 -> s3 [65, 65] { R128 += 1 };
  s1 -> s1 [80, 65535] { R128 += 1 };
  s2 -> s2 [0, 65] { R128 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [80, 65535] { R128 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton key2_15 {
  init s0;
  s0 -> s1 [0, 64] { R130 += 1, R77 += 1 };
  s0 -> s0 [0, 65535] { R129 += 1, R130 += 1 };
  s0 -> s2 [65, 65] { R130 += 1, R77 += 1 };
  s0 -> s3 [65, 65] { R130 += 1, R77 += 1 };
  s0 -> s1 [66, 65535] { R130 += 1, R77 += 1 };
  s1 -> s1 [0, 64] { R130 += 1, R77 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R130 += 1, R77 += 1 };
  s1 -> s3 [65, 65] { R130 += 1, R77 += 1 };
  s1 -> s1 [66, 65535] { R130 += 1, R77 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R130 += 1, R77 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton key2_16 {
  init s0;
  s0 -> s1 [0, 64] { R132 += 1, R79 += 1 };
  s0 -> s0 [0, 65535] { R131 += 1, R132 += 1 };
  s0 -> s2 [65, 65] { R132 += 1, R79 += 1 };
  s0 -> s3 [65, 65] { R132 += 1, R79 += 1 };
  s0 -> s1 [66, 65535] { R132 += 1, R79 += 1 };
  s1 -> s1 [0, 64] { R132 += 1, R79 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R132 += 1, R79 += 1 };
  s1 -> s3 [65, 65] { R132 += 1, R79 += 1 };
  s1 -> s1 [66, 65535] { R132 += 1, R79 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R132 += 1, R79 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton key2_17 {
  init s0;
  s0 -> s1 [0, 64] { R134 += 1, R81 += 1, R82 += 1 };
  s0 -> s0 [0, 65535] { R133 += 1, R134 += 1 };
  s0 -> s2 [65, 65] { R134 += 1, R81 += 1, R82 += 1 };
  s0 -> s3 [65, 65] { R134 += 1, R81 += 1, R82 += 1 };
  s0 -> s1 [66, 65535] { R134 += 1, R81 += 1, R82 += 1 };
  s1 -> s1 [0, 64] { R134 += 1, R81 += 1, R82 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R134 += 1, R81 += 1, R82 += 1 };
  s1 -> s3 [65, 65] { R134 += 1, R81 += 1, R82 += 1 };
  s1 -> s1 [66, 65535] { R134 += 1, R81 += 1, R82 += 1 };
  s2 -> s2 [0, 65535] { R134 += 1, R81 += 1, R82 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton key2_18 {
  init s0;
  s0 -> s1 [0, 64] { R136 += 1, R85 += 1, R86 += 1 };
  s0 -> s0 [0, 65535] { R135 += 1, R136 += 1 };
  s0 -> s2 [65, 65] { R136 += 1, R85 += 1, R86 += 1 };
  s0 -> s3 [65, 65] { R136 += 1, R85 += 1, R86 += 1 };
  s0 -> s1 [66, 65535] { R136 += 1, R85 += 1, R86 += 1 };
  s1 -> s1 [0, 64] { R136 += 1, R85 += 1, R86 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R136 += 1, R85 += 1, R86 += 1 };
  s1 -> s3 [65, 65] { R136 += 1, R85 += 1, R86 += 1 };
  s1 -> s1 [66, 65535] { R136 += 1, R85 += 1, R86 += 1 };
  s2 -> s2 [0, 65535] { R136 += 1, R85 += 1, R86 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton key2_19 {
  init s0;
  s0 -> s1 [0, 64] { R138 += 1, R91 += 1, R92 += 1 };
  s0 -> s0 [0, 65535] { R137 += 1, R138 += 1 };
  s0 -> s2 [65, 65] { R138 += 1, R91 += 1, R92 += 1 };
  s0 -> s3 [65, 65] { R138 += 1, R91 += 1, R92 += 1 };
  s0 -> s1 [66, 65535] { R138 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 64] { R138 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R138 += 1, R91 += 1, R92 += 1 };
  s1 -> s3 [65, 65] { R138 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [66, 65535] { R138 += 1, R91 += 1, R92 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R138 += 1, R91 += 1, R92 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton key2_20 {
  init s0;
  s0 -> s1 [0, 64] { R140 += 1, R95 += 1, R96 += 1 };
  s0 -> s0 [0, 65535] { R139 += 1, R140 += 1 };
  s0 -> s2 [65, 65] { R140 += 1, R95 += 1, R96 += 1 };
  s0 -> s3 [65, 65] { R140 += 1, R95 += 1, R96 += 1 };
  s0 -> s1 [66, 65535] { R140 += 1, R95 += 1, R96 += 1 };
  s1 -> s1 [0, 64] { R140 += 1, R95 += 1, R96 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R140 += 1, R95 += 1, R96 += 1 };
  s1 -> s3 [65, 65] { R140 += 1, R95 += 1, R96 += 1 };
  s1 -> s1 [66, 65535] { R140 += 1, R95 += 1, R96 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R140 += 1, R95 += 1, R96 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton key2_21 {
  init s0;
  s0 -> s1 [0, 64] { R142 += 1, R101 += 1, R102 += 1 };
  s0 -> s0 [0, 65535] { R141 += 1, R142 += 1 };
  s0 -> s2 [65, 65] { R142 += 1, R101 += 1, R102 += 1 };
  s0 -> s3 [65, 65] { R142 += 1, R101 += 1, R102 += 1 };
  s0 -> s1 [66, 65535] { R142 += 1, R101 += 1, R102 += 1 };
  s1 -> s1 [0, 64] { R142 += 1, R101 += 1, R102 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R142 += 1, R101 += 1, R102 += 1 };
  s1 -> s3 [65, 65] { R142 += 1, R101 += 1, R102 += 1 };
  s1 -> s1 [66, 65535] { R142 += 1, R101 += 1, R102 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R142 += 1, R101 += 1, R102 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
};
synchronised {  // Automata constraining P35
automaton P35_0 {
  init s0;
  s0 -> s1 [111, 111];
  accepting s1;
};
};
synchronised {  // Automata constraining key1
automaton key1_0 {
  init s0;
  s0 -> s0 [0, 64];
  s0 -> s1 [65, 65];
  s0 -> s0 [66, 65535];
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton key1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton key1_2 {
  init s0;
  s0 -> s1 [0, 64];
  s0 -> s0 [0, 65535] { R7 += 1 };
  s0 -> s2 [65, 65];
  s0 -> s1 [66, 65535];
  s1 -> s1 [0, 64];
  s1 -> s2 [65, 65];
  s1 -> s1 [66, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton key1_3 {
  init s0;
  s0 -> s1 [0, 64] { R48 += 1 };
  s0 -> s0 [0, 65535] { R47 += 1, R48 += 1 };
  s0 -> s1 [66, 65535] { R48 += 1 };
  s1 -> s1 [0, 64] { R48 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [66, 65535] { R48 += 1 };
  accepting s0, s1;
};
automaton key1_4 {
  init s0;
  s0 -> s1 [0, 65535] { R50 += 1, R17 += 1 };
  s0 -> s0 [0, 65535] { R49 += 1, R50 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R50 += 1, R17 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton key1_5 {
  init s0;
  s0 -> s1 [0, 65] { R52 += 1 };
  s0 -> s0 [0, 65535] { R51 += 1, R52 += 1 };
  s0 -> s2 [80, 80] { R52 += 1 };
  s0 -> s1 [81, 65535] { R52 += 1 };
  s1 -> s1 [0, 65] { R52 += 1 };
  s1 -> s2 [80, 80] { R52 += 1 };
  s1 -> s1 [81, 65535] { R52 += 1 };
  s2 -> s2 [0, 65] { R52 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [80, 65535] { R52 += 1 };
  accepting s2;
};
automaton key1_6 {
  init s0;
  s0 -> s1 [0, 65535] { R54 += 1, R34 += 1 };
  s0 -> s0 [0, 65535] { R53 += 1, R54 += 1 };
  s1 -> s1 [0, 65535] { R54 += 1, R34 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton key1_7 {
  init s0;
  s0 -> s1 [0, 79] { R56 += 1 };
  s0 -> s2 [0, 65535] { R56 += 1, R36 += 1 };
  s0 -> s0 [0, 65535] { R55 += 1, R56 += 1 };
  s0 -> s1 [81, 65535] { R56 += 1 };
  s1 -> s1 [0, 79] { R56 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [81, 65535] { R56 += 1 };
  s2 -> s1 [0, 79] { R56 += 1 };
  s2 -> s2 [0, 65535] { R56 += 1, R36 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [81, 65535] { R56 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton key1_8 {
  init s0;
  s0 -> s1 [0, 79] { R58 += 1, R40 += 1 };
  s0 -> s2 [0, 65535] { R58 += 1, R39 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R57 += 1, R58 += 1 };
  s0 -> s3 [80, 80] { R58 += 1, R40 += 1 };
  s0 -> s1 [81, 65535] { R58 += 1, R40 += 1 };
  s1 -> s1 [0, 79] { R58 += 1, R40 += 1 };
  s1 -> s3 [80, 80] { R58 += 1, R40 += 1 };
  s1 -> s1 [81, 65535] { R58 += 1, R40 += 1 };
  s2 -> s1 [0, 79] { R58 += 1, R40 += 1 };
  s2 -> s2 [0, 65535] { R58 += 1, R39 += 1, R40 += 1 };
  s2 -> s3 [80, 80] { R58 += 1, R40 += 1 };
  s2 -> s1 [81, 65535] { R58 += 1, R40 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R58 += 1 };
  s3 -> s3 [0, 65535] { R58 += 1, R40 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R58 += 1 };
  accepting s3, s4, s5;
};
automaton key1_9 {
  init s0;
  s0 -> s1 [0, 65535] { R60 += 1, R44 += 1, R45 += 1 };
  s0 -> s2 [0, 65535] { R60 += 1, R45 += 1, R46 += 1 };
  s0 -> s0 [0, 65535] { R59 += 1, R60 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R60 += 1, R44 += 1, R45 += 1 };
  s1 -> s2 [0, 65535] { R60 += 1, R45 += 1, R46 += 1 };
  s2 -> s3 [0, 65535] { R60 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R60 += 1, R45 += 1, R46 += 1 };
  s3 -> s3 [0, 65535] { R60 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton key1_10 {
  init s0;
  s0 -> s0 [0, 65535] { R65 += 1, R66 += 1 };
  s0 -> s1 [0, 65535] { R66 += 1, R18 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R66 += 1, R18 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton key1_11 {
  init s0;
  s0 -> s1 [0, 64] { R68 += 1 };
  s0 -> s0 [0, 65535] { R67 += 1, R68 += 1 };
  s0 -> s2 [65, 65] { R68 += 1 };
  s0 -> s3 [65, 65] { R68 += 1 };
  s0 -> s1 [81, 65535] { R68 += 1 };
  s1 -> s1 [0, 64] { R68 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R68 += 1 };
  s1 -> s3 [65, 65] { R68 += 1 };
  s1 -> s1 [81, 65535] { R68 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65] { R68 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [81, 65535] { R68 += 1 };
  accepting s0, s1, s2, s3;
};
automaton key1_12 {
  init s0;
  s0 -> s1 [0, 64] { R70 += 1, R33 += 1 };
  s0 -> s0 [0, 65535] { R69 += 1, R70 += 1 };
  s0 -> s2 [65, 65] { R70 += 1, R33 += 1 };
  s0 -> s3 [65, 65] { R70 += 1, R33 += 1 };
  s0 -> s1 [66, 65535] { R70 += 1, R33 += 1 };
  s1 -> s1 [0, 64] { R70 += 1, R33 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R70 += 1, R33 += 1 };
  s1 -> s3 [65, 65] { R70 += 1, R33 += 1 };
  s1 -> s1 [66, 65535] { R70 += 1, R33 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R70 += 1, R33 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton key1_13 {
  init s0;
  s0 -> s1 [0, 64] { R72 += 1, R35 += 1 };
  s0 -> s0 [0, 65535] { R71 += 1, R72 += 1 };
  s0 -> s2 [65, 65] { R72 += 1, R35 += 1 };
  s0 -> s3 [65, 65] { R72 += 1, R35 += 1 };
  s0 -> s1 [66, 65535] { R72 += 1, R35 += 1 };
  s1 -> s1 [0, 64] { R72 += 1, R35 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R72 += 1, R35 += 1 };
  s1 -> s3 [65, 65] { R72 += 1, R35 += 1 };
  s1 -> s1 [66, 65535] { R72 += 1, R35 += 1 };
  s2 -> s2 [0, 65535] { R72 += 1, R35 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton key1_14 {
  init s0;
  s0 -> s1 [0, 64] { R74 += 1, R37 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R73 += 1, R74 += 1 };
  s0 -> s2 [65, 65] { R74 += 1, R37 += 1, R38 += 1 };
  s0 -> s3 [65, 65] { R74 += 1, R37 += 1, R38 += 1 };
  s0 -> s1 [66, 65535] { R74 += 1, R37 += 1, R38 += 1 };
  s1 -> s1 [0, 64] { R74 += 1, R37 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R74 += 1, R37 += 1, R38 += 1 };
  s1 -> s3 [65, 65] { R74 += 1, R37 += 1, R38 += 1 };
  s1 -> s1 [66, 65535] { R74 += 1, R37 += 1, R38 += 1 };
  s2 -> s2 [0, 65535] { R74 += 1, R37 += 1, R38 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton key1_15 {
  init s0;
  s0 -> s1 [0, 64] { R76 += 1, R41 += 1, R42 += 1 };
  s0 -> s0 [0, 65535] { R75 += 1, R76 += 1 };
  s0 -> s2 [65, 65] { R76 += 1, R41 += 1, R42 += 1 };
  s0 -> s3 [65, 65] { R76 += 1, R41 += 1, R42 += 1 };
  s0 -> s1 [66, 65535] { R76 += 1, R41 += 1, R42 += 1 };
  s1 -> s1 [0, 64] { R76 += 1, R41 += 1, R42 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R76 += 1, R41 += 1, R42 += 1 };
  s1 -> s3 [65, 65] { R76 += 1, R41 += 1, R42 += 1 };
  s1 -> s1 [66, 65535] { R76 += 1, R41 += 1, R42 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R76 += 1, R41 += 1, R42 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
};
synchronised {  // Automata constraining P4
automaton P4_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
constraint R1 = R58 && R3 = R110 && R34 + R33 + -1*R40 + -1*R38 = 0 && R39 + R37 = 0 && R51 = 0 && R52 = R58 && R57 = 0 && R109 = 0 && R7 < 1 && R13 < 1 && R36 + R35 < 1 && -1*R40 + -1*R38 < 1 && -1 < R58 && -1*R78 + -1*R77 < 1 && R80 + R79 < 1 && -1 < R110 && (R40 + R38 != 0 || R46 + R43 = 0 || (R44 + R41 = 0 && R45 + R42 = 0)) && (R44 + R41 != 0 || R40 + R38 + -1*R45 + -1*R42 = 0 || R40 + R38 < 1) && (R47 != 0 || R48 = R58 || (R17 = 0 && R58 = 0)) && (R49 != 0 || R50 = R58 || (R17 = 0 && R58 = 0)) && (R53 != 0 || R54 = R58 || (R17 = 0 && R58 = 0)) && (R55 != 0 || R56 = R58 || (R17 = 0 && R58 = 0)) && (R59 != 0 || R58 = R60 || (R17 = 0 && R58 = 0)) && (R78 + R77 != 0 || R90 + R87 = 0 || (R83 + R81 = 0 && R84 + R82 = 0)) && (R78 + R77 != 0 || R90 + R87 = 0 || (R88 + R85 = 0 && R89 + R86 = 0)) && (R78 + R77 != 0 || R90 + R87 = 0 || (R93 + R91 = 0 && R94 + R92 = 0)) && (R83 + R81 != 0 || R78 + R77 + -1*R84 + -1*R82 = 0 || R78 + R77 < 1) && (R88 + R85 != 0 || R78 + R77 + -1*R89 + -1*R86 = 0 || R78 + R77 < 1) && (R93 + R91 != 0 || R78 + R77 + -1*R94 + -1*R92 = 0 || R78 + R77 < 1) && (R105 != 0 || R106 = R110 || (R21 = 0 && R110 = 0)) && (R107 != 0 || R108 = R110 || (R21 = 0 && R110 = 0)) && (R111 != 0 || R110 = R112 || (R21 = 0 && R110 = 0)) && (R113 != 0 || R110 = R114 || (R21 = 0 && R110 = 0)) && (R115 != 0 || R110 = R116 || (R21 = 0 && R110 = 0)) && (R117 != 0 || R110 = R118 || (R21 = 0 && R110 = 0)) && (R119 != 0 || R110 = R120 || (R21 = 0 && R110 = 0)) && (R121 != 0 || R110 = R122 || (R21 = 0 && R110 = 0)) && (R123 != 0 || R110 = R124 || (R21 = 0 && R110 = 0)) && (R18 = 0 || (R65 = 0 && R66 = 0)) && (R18 = 0 || (R67 = 0 && R68 = 0)) && (R18 = 0 || (R69 = 0 && R70 = 0)) && (R18 = 0 || (R71 = 0 && R72 = 0)) && (R18 = 0 || (R73 = 0 && R74 = 0)) && (R18 = 0 || (R75 = 0 && R76 = 0)) && (R22 = 0 || (R125 = 0 && R126 = 0 && R127 = 0 && R128 = 0 && R129 = 0 && R130 = 0 && R131 = 0 && R132 = 0 && R133 = 0 && R134 = 0 && R135 = 0 && R136 = 0 && R137 = 0 && R138 = 0 && R139 = 0 && R140 = 0 && R141 = 0 && R142 = 0)) && (R44 + R41 = 0 || R40 + R38 < 1) && (R47 = 0 || (R17 = 0 && R58 = 0)) && (R49 = 0 || (R17 = 0 && R58 = 0)) && (R53 = 0 || (R17 = 0 && R58 = 0)) && (R55 = 0 || (R17 = 0 && R58 = 0)) && (R59 = 0 || (R17 = 0 && R58 = 0)) && (R83 + R81 = 0 || R78 + R77 < 1) && (R88 + R85 = 0 || R78 + R77 < 1) && (R93 + R91 = 0 || R78 + R77 < 1) && (R100 + R97 = 0 || (R98 + R95 = 0 && R99 + R96 = 0)) && (R100 + R97 = 0 || (R103 + R101 = 0 && R104 + R102 = 0)) && (R105 = 0 || (R21 = 0 && R110 = 0)) && (R107 = 0 || (R21 = 0 && R110 = 0)) && (R111 = 0 || (R21 = 0 && R110 = 0)) && (R113 = 0 || (R21 = 0 && R110 = 0)) && (R115 = 0 || (R21 = 0 && R110 = 0)) && (R117 = 0 || (R21 = 0 && R110 = 0)) && (R119 = 0 || (R21 = 0 && R110 = 0)) && (R121 = 0 || (R21 = 0 && R110 = 0)) && (R123 = 0 || (R21 = 0 && R110 = 0));
// End of Parikh automata intersection problem
