// Parikh automata intersection problem, generated by OSTRICH+
counter int R11, R12, R19, R2, R20, R21, R22, R23, R237, R238, R239, R24, R240, R241, R242, R243, R244, R245, R246, R247, R248, R249, R250, R251, R252, R253, R254, R255, R256, R257, R258, R259, R260, R261, R262, R263, R264, R265, R266, R267, R268, R269, R270, R271, R272, R273, R274, R275, R276, R277, R278, R279, R280, R281, R282, R283, R284, R285, R286, R287, R288, R289, R290, R291, R292, R293, R294, R295, R296, R297, R298, R299, R3, R300, R301, R302, R303, R304, R305, R306, R307, R308, R309, R310, R311, R312, R313, R314, R315, R316, R317, R318, R319, R320, R321, R322, R323, R324, R325, R326, R327, R328, R329, R330, R331, R332, R333, R334, R335, R336, R337, R338, R339, R340, R341, R342, R343, R344, R345, R346, R347, R348, R349, R350, R351, R352, R353, R354, R355, R356, R357, R358, R359, R360, R361, R362, R363, R364, R365, R366, R367, R368, R369, R370, R371, R372, R373, R374, R375, R376, R377, R378, R379, R380, R381, R382, R383, R384, R385, R386, R4, R43, R44, R45, R46, R47, R48, R49, R50, R51, R52, R53, R54, R55, R56, R57, R58, R59, R60, R61, R62, R63, R64, R65, R66, R67, R68, R69, R70, R71, R72, R73, R74, R75, R76, R77, R78, R79, R80, R81, R82, R83, R84, R85, R86;
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining c11
automaton c11_0 {
  init s0;
  s0 -> s1 [115, 115];
  accepting s1;
};
};
synchronised {  // Automata constraining P53
automaton P53_0 {
  init s0;
  s0 -> s1 [112, 112];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 43] { R310 += 1 };
  s0 -> s0 [0, 65535] { R309 += 1, R310 += 1 };
  s0 -> s1 [45, 45] { R310 += 1 };
  s0 -> s2 [46, 46] { R310 += 1 };
  s0 -> s1 [48, 62] { R310 += 1 };
  s0 -> s3 [65, 65] { R310 += 1 };
  s0 -> s1 [66, 65535] { R310 += 1 };
  s1 -> s1 [0, 43] { R310 += 1 };
  s1 -> s1 [45, 45] { R310 += 1 };
  s1 -> s2 [46, 46] { R310 += 1 };
  s1 -> s1 [48, 62] { R310 += 1 };
  s1 -> s3 [65, 65] { R310 += 1 };
  s1 -> s1 [66, 65535] { R310 += 1 };
  s2 -> s1 [0, 43] { R310 += 1 };
  s2 -> s1 [45, 45] { R310 += 1 };
  s2 -> s2 [46, 46] { R310 += 1 };
  s2 -> s1 [48, 62] { R310 += 1 };
  s2 -> s3 [65, 65] { R310 += 1 };
  s2 -> s1 [66, 114] { R310 += 1 };
  s2 -> s8 [115, 115] { R310 += 1 };
  s2 -> s1 [116, 65535] { R310 += 1 };
  s3 -> s3 [0, 43] { R310 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R310 += 1 };
  s3 -> s4 [46, 46] { R310 += 1 };
  s3 -> s3 [48, 62] { R310 += 1 };
  s3 -> s3 [65, 65535] { R310 += 1 };
  s4 -> s3 [0, 43] { R310 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R310 += 1 };
  s4 -> s4 [46, 46] { R310 += 1 };
  s4 -> s3 [48, 62] { R310 += 1 };
  s4 -> s3 [65, 114] { R310 += 1 };
  s4 -> s5 [115, 115] { R310 += 1 };
  s4 -> s3 [116, 65535] { R310 += 1 };
  s5 -> s3 [0, 43] { R310 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R310 += 1 };
  s5 -> s4 [46, 46] { R310 += 1 };
  s5 -> s3 [48, 62] { R310 += 1 };
  s5 -> s3 [65, 110] { R310 += 1 };
  s5 -> s6 [111, 111] { R310 += 1 };
  s5 -> s3 [112, 65535] { R310 += 1 };
  s6 -> s3 [0, 43] { R310 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R310 += 1 };
  s6 -> s4 [46, 46] { R310 += 1 };
  s6 -> s3 [48, 62] { R310 += 1 };
  s6 -> s3 [65, 98] { R310 += 1 };
  s6 -> s7 [99, 99] { R310 += 1 };
  s6 -> s3 [100, 65535] { R310 += 1 };
  s7 -> s3 [0, 43] { R310 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R310 += 1 };
  s7 -> s4 [46, 46] { R310 += 1 };
  s7 -> s3 [48, 62] { R310 += 1 };
  s7 -> s3 [65, 106] { R310 += 1 };
  s7 -> s3 [108, 65535] { R310 += 1 };
  s8 -> s1 [0, 43] { R310 += 1 };
  s8 -> s1 [45, 45] { R310 += 1 };
  s8 -> s2 [46, 46] { R310 += 1 };
  s8 -> s1 [48, 62] { R310 += 1 };
  s8 -> s3 [65, 65] { R310 += 1 };
  s8 -> s1 [66, 110] { R310 += 1 };
  s8 -> s9 [111, 111] { R310 += 1 };
  s8 -> s1 [112, 65535] { R310 += 1 };
  s9 -> s1 [0, 43] { R310 += 1 };
  s9 -> s1 [45, 45] { R310 += 1 };
  s9 -> s2 [46, 46] { R310 += 1 };
  s9 -> s1 [48, 62] { R310 += 1 };
  s9 -> s3 [65, 65] { R310 += 1 };
  s9 -> s1 [66, 98] { R310 += 1 };
  s9 -> s10 [99, 99] { R310 += 1 };
  s9 -> s1 [100, 65535] { R310 += 1 };
  s10 -> s1 [0, 43] { R310 += 1 };
  s10 -> s1 [45, 45] { R310 += 1 };
  s10 -> s2 [46, 46] { R310 += 1 };
  s10 -> s1 [48, 62] { R310 += 1 };
  s10 -> s3 [65, 65] { R310 += 1 };
  s10 -> s1 [66, 106] { R310 += 1 };
  s10 -> s1 [108, 65535] { R310 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R312 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R311 += 1, R312 += 1 };
  s1 -> s1 [0, 65535] { R312 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 57] { R314 += 1 };
  s0 -> s2 [0, 65535] { R314 += 1, R11 += 1 };
  s0 -> s0 [0, 65535] { R313 += 1, R314 += 1 };
  s0 -> s3 [58, 58] { R314 += 1 };
  s0 -> s1 [59, 65535] { R314 += 1 };
  s1 -> s1 [0, 57] { R314 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R314 += 1 };
  s1 -> s1 [59, 65535] { R314 += 1 };
  s2 -> s1 [0, 57] { R314 += 1 };
  s2 -> s2 [0, 65535] { R314 += 1, R11 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [58, 58] { R314 += 1 };
  s2 -> s1 [59, 65535] { R314 += 1 };
  s3 -> s3 [0, 65535] { R314 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 64] { R316 += 1 };
  s0 -> s2 [0, 65535] { R316 += 1, R12 += 1 };
  s0 -> s0 [0, 65535] { R315 += 1, R316 += 1 };
  s0 -> s3 [65, 65] { R316 += 1 };
  s0 -> s1 [66, 65535] { R316 += 1 };
  s1 -> s1 [0, 64] { R316 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R316 += 1 };
  s1 -> s1 [66, 65535] { R316 += 1 };
  s2 -> s1 [0, 64] { R316 += 1 };
  s2 -> s2 [0, 65535] { R316 += 1, R12 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [65, 65] { R316 += 1 };
  s2 -> s1 [66, 65535] { R316 += 1 };
  s3 -> s3 [0, 65535] { R316 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 90] { R318 += 1, R22 += 1 };
  s0 -> s2 [0, 65535] { R318 += 1, R21 += 1, R22 += 1 };
  s0 -> s0 [0, 65535] { R317 += 1, R318 += 1 };
  s0 -> s3 [91, 91] { R318 += 1, R22 += 1 };
  s0 -> s1 [92, 65535] { R318 += 1, R22 += 1 };
  s1 -> s5 [0, 65535] { R318 += 1 };
  s1 -> s1 [0, 65535] { R318 += 1, R22 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 90] { R318 += 1, R22 += 1 };
  s2 -> s2 [0, 65535] { R318 += 1, R21 += 1, R22 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [91, 91] { R318 += 1, R22 += 1 };
  s2 -> s1 [92, 65535] { R318 += 1, R22 += 1 };
  s3 -> s1 [0, 65535] { R318 += 1, R22 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R318 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R320 += 1, R23 += 1, R24 += 1 };
  s0 -> s2 [0, 65535] { R320 += 1, R24 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R319 += 1, R320 += 1 };
  s1 -> s1 [0, 65535] { R320 += 1, R23 += 1, R24 += 1 };
  s1 -> s2 [0, 65535] { R320 += 1, R24 += 1, R4 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R320 += 1, R24 += 1, R4 += 1 };
  s2 -> s3 [0, 65535] { R320 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R320 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 64] { R322 += 1, R244 += 1 };
  s0 -> s2 [0, 65535] { R322 += 1, R243 += 1, R244 += 1 };
  s0 -> s0 [0, 65535] { R321 += 1, R322 += 1 };
  s0 -> s1 [66, 65535] { R322 += 1, R244 += 1 };
  s1 -> s1 [0, 64] { R322 += 1, R244 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R322 += 1 };
  s1 -> s1 [66, 65535] { R322 += 1, R244 += 1 };
  s2 -> s1 [0, 64] { R322 += 1, R244 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R322 += 1, R243 += 1, R244 += 1 };
  s2 -> s1 [66, 65535] { R322 += 1, R244 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_9 {
  init s0;
  s0 -> s0 [0, 65535] { R323 += 1, R324 += 1 };
  s0 -> s1 [0, 65535] { R324 += 1, R246 += 1, R19 += 1 };
  s0 -> s2 [0, 65535] { R324 += 1, R245 += 1, R246 += 1 };
  s1 -> s1 [0, 65535] { R324 += 1, R246 += 1, R19 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R324 += 1 };
  s2 -> s1 [0, 65535] { R324 += 1, R246 += 1, R19 += 1 };
  s2 -> s2 [0, 65535] { R324 += 1, R245 += 1, R246 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R324 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65] { R326 += 1, R248 += 1 };
  s0 -> s0 [0, 65535] { R325 += 1, R326 += 1 };
  s0 -> s2 [0, 65535] { R326 += 1, R247 += 1, R248 += 1 };
  s0 -> s3 [80, 80] { R326 += 1, R248 += 1 };
  s0 -> s1 [81, 65535] { R326 += 1, R248 += 1 };
  s1 -> s1 [0, 65] { R326 += 1, R248 += 1 };
  s1 -> s3 [80, 80] { R326 += 1, R248 += 1 };
  s1 -> s1 [81, 65535] { R326 += 1, R248 += 1 };
  s2 -> s1 [0, 65] { R326 += 1, R248 += 1 };
  s2 -> s2 [0, 65535] { R326 += 1, R247 += 1, R248 += 1 };
  s2 -> s3 [80, 80] { R326 += 1, R248 += 1 };
  s2 -> s1 [81, 65535] { R326 += 1, R248 += 1 };
  s3 -> s3 [0, 65] { R326 += 1, R248 += 1 };
  s3 -> s3 [0, 65535] { R326 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [80, 65535] { R326 += 1, R248 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65535] { R328 += 1, R249 += 1, R250 += 1 };
  s0 -> s2 [0, 65535] { R328 += 1, R250 += 1, R44 += 1 };
  s0 -> s0 [0, 65535] { R327 += 1, R328 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R328 += 1, R249 += 1, R250 += 1 };
  s1 -> s2 [0, 65535] { R328 += 1, R250 += 1, R44 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R328 += 1 };
  s2 -> s2 [0, 65535] { R328 += 1, R250 += 1, R44 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R328 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 82] { R330 += 1, R252 += 1 };
  s0 -> s2 [0, 65535] { R330 += 1, R251 += 1, R252 += 1 };
  s0 -> s3 [0, 65535] { R330 += 1, R252 += 1, R46 += 1 };
  s0 -> s0 [0, 65535] { R329 += 1, R330 += 1 };
  s0 -> s1 [84, 65535] { R330 += 1, R252 += 1 };
  s1 -> s1 [0, 82] { R330 += 1, R252 += 1 };
  s1 -> s1 [0, 65535] { R330 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [84, 65535] { R330 += 1, R252 += 1 };
  s2 -> s1 [0, 82] { R330 += 1, R252 += 1 };
  s2 -> s2 [0, 65535] { R330 += 1, R251 += 1, R252 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R330 += 1, R252 += 1, R46 += 1 };
  s2 -> s1 [84, 65535] { R330 += 1, R252 += 1 };
  s3 -> s1 [0, 82] { R330 += 1, R252 += 1 };
  s3 -> s4 [0, 65535] { R330 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R330 += 1, R252 += 1, R46 += 1 };
  s3 -> s1 [84, 65535] { R330 += 1, R252 += 1 };
  s4 -> s4 [0, 65535] { R330 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 79] { R332 += 1, R254 += 1 };
  s0 -> s2 [0, 65535] { R332 += 1, R254 += 1, R48 += 1 };
  s0 -> s0 [0, 65535] { R331 += 1, R332 += 1 };
  s0 -> s3 [0, 65535] { R332 += 1, R253 += 1, R254 += 1 };
  s0 -> s1 [81, 65535] { R332 += 1, R254 += 1 };
  s1 -> s1 [0, 79] { R332 += 1, R254 += 1 };
  s1 -> s1 [0, 65535] { R332 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [81, 65535] { R332 += 1, R254 += 1 };
  s2 -> s1 [0, 79] { R332 += 1, R254 += 1 };
  s2 -> s2 [0, 65535] { R332 += 1, R254 += 1, R48 += 1 };
  s2 -> s5 [0, 65535] { R332 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [81, 65535] { R332 += 1, R254 += 1 };
  s3 -> s1 [0, 79] { R332 += 1, R254 += 1 };
  s3 -> s2 [0, 65535] { R332 += 1, R254 += 1, R48 += 1 };
  s3 -> s3 [0, 65535] { R332 += 1, R253 += 1, R254 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [81, 65535] { R332 += 1, R254 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R332 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s0 [0, 65535] { R333 += 1, R334 += 1 };
  s0 -> s1 [0, 65535] { R334 += 1, R255 += 1, R256 += 1 };
  s0 -> s2 [0, 65535] { R334 += 1, R256 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [0, 65535] { R334 += 1, R256 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 65535] { R334 += 1, R255 += 1, R256 += 1 };
  s1 -> s2 [0, 65535] { R334 += 1, R256 += 1, R52 += 1, R53 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [0, 65535] { R334 += 1, R256 += 1, R53 += 1, R54 += 1 };
  s2 -> s2 [0, 65535] { R334 += 1, R256 += 1, R52 += 1, R53 += 1 };
  s2 -> s5 [0, 65535] { R334 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R334 += 1, R256 += 1, R53 += 1, R54 += 1 };
  s3 -> s4 [0, 65535] { R334 += 1, R256 += 1 };
  s3 -> s5 [0, 65535] { R334 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R334 += 1, R256 += 1, R53 += 1, R54 += 1 };
  s4 -> s4 [0, 65535] { R334 += 1, R256 += 1 };
  s4 -> s5 [0, 65535] { R334 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R334 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R336 += 1, R257 += 1, R258 += 1 };
  s0 -> s2 [0, 65535] { R336 += 1, R258 += 1 };
  s0 -> s0 [0, 65535] { R335 += 1, R336 += 1 };
  s1 -> s1 [0, 65535] { R336 += 1, R257 += 1, R258 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R336 += 1, R258 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R336 += 1 };
  s2 -> s2 [0, 65535] { R336 += 1, R258 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R336 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 79] { R338 += 1, R260 += 1, R58 += 1 };
  s0 -> s2 [0, 65535] { R338 += 1, R260 += 1, R57 += 1, R58 += 1 };
  s0 -> s0 [0, 65535] { R337 += 1, R338 += 1 };
  s0 -> s3 [0, 65535] { R338 += 1, R259 += 1, R260 += 1 };
  s0 -> s1 [81, 65535] { R338 += 1, R260 += 1, R58 += 1 };
  s1 -> s1 [0, 79] { R338 += 1, R260 += 1, R58 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R338 += 1, R260 += 1 };
  s1 -> s5 [0, 65535] { R338 += 1 };
  s1 -> s1 [81, 65535] { R338 += 1, R260 += 1, R58 += 1 };
  s2 -> s1 [0, 79] { R338 += 1, R260 += 1, R58 += 1 };
  s2 -> s2 [0, 65535] { R338 += 1, R260 += 1, R57 += 1, R58 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R338 += 1 };
  s2 -> s1 [81, 65535] { R338 += 1, R260 += 1, R58 += 1 };
  s3 -> s1 [0, 79] { R338 += 1, R260 += 1, R58 += 1 };
  s3 -> s2 [0, 65535] { R338 += 1, R260 += 1, R57 += 1, R58 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R338 += 1, R259 += 1, R260 += 1 };
  s3 -> s1 [81, 65535] { R338 += 1, R260 += 1, R58 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R338 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s0 [0, 65535] { R339 += 1, R340 += 1 };
  s0 -> s1 [0, 65535] { R340 += 1, R261 += 1, R262 += 1 };
  s0 -> s2 [0, 65535] { R340 += 1, R262 += 1, R63 += 1, R64 += 1 };
  s0 -> s3 [0, 65535] { R340 += 1, R262 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535] { R340 += 1, R261 += 1, R262 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s2 [0, 65535] { R340 += 1, R262 += 1, R63 += 1, R64 += 1 };
  s1 -> s3 [0, 65535] { R340 += 1, R262 += 1, R62 += 1, R63 += 1 };
  s2 -> s4 [0, 65535] { R340 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R340 += 1, R262 += 1, R63 += 1, R64 += 1 };
  s2 -> s6 [0, 65535] { R340 += 1, R262 += 1 };
  s3 -> s4 [0, 65535] { R340 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R340 += 1, R262 += 1, R63 += 1, R64 += 1 };
  s3 -> s3 [0, 65535] { R340 += 1, R262 += 1, R62 += 1, R63 += 1 };
  s4 -> s4 [0, 65535] { R340 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R340 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R340 += 1, R262 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 80] { R342 += 1, R264 += 1, R68 += 1 };
  s0 -> s0 [0, 65535] { R341 += 1, R342 += 1 };
  s0 -> s2 [0, 65535] { R342 += 1, R263 += 1, R264 += 1 };
  s0 -> s3 [0, 65535] { R342 += 1, R264 += 1, R67 += 1, R68 += 1 };
  s0 -> s1 [91, 107] { R342 += 1, R264 += 1, R68 += 1 };
  s0 -> s4 [108, 108] { R342 += 1, R264 += 1, R68 += 1 };
  s0 -> s1 [109, 65535] { R342 += 1, R264 += 1, R68 += 1 };
  s1 -> s1 [0, 80] { R342 += 1, R264 += 1, R68 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R342 += 1, R264 += 1 };
  s1 -> s6 [0, 65535] { R342 += 1 };
  s1 -> s1 [91, 65535] { R342 += 1, R264 += 1, R68 += 1 };
  s2 -> s1 [0, 80] { R342 += 1, R264 += 1, R68 += 1 };
  s2 -> s2 [0, 65535] { R342 += 1, R263 += 1, R264 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R342 += 1, R264 += 1, R67 += 1, R68 += 1 };
  s2 -> s1 [91, 107] { R342 += 1, R264 += 1, R68 += 1 };
  s2 -> s4 [108, 108] { R342 += 1, R264 += 1, R68 += 1 };
  s2 -> s1 [109, 65535] { R342 += 1, R264 += 1, R68 += 1 };
  s3 -> s1 [0, 80] { R342 += 1, R264 += 1, R68 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R342 += 1, R264 += 1, R67 += 1, R68 += 1 };
  s3 -> s6 [0, 65535] { R342 += 1 };
  s3 -> s1 [91, 107] { R342 += 1, R264 += 1, R68 += 1 };
  s3 -> s4 [108, 108] { R342 += 1, R264 += 1, R68 += 1 };
  s3 -> s1 [109, 65535] { R342 += 1, R264 += 1, R68 += 1 };
  s4 -> s1 [0, 80] { R342 += 1, R264 += 1, R68 += 1 };
  s4 -> s4 [0, 65535] { R342 += 1, R264 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R342 += 1 };
  s4 -> s1 [91, 110] { R342 += 1, R264 += 1, R68 += 1 };
  s4 -> s7 [111, 111] { R342 += 1, R264 += 1, R68 += 1 };
  s4 -> s1 [112, 65535] { R342 += 1, R264 += 1, R68 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R342 += 1 };
  s7 -> s1 [0, 80] { R342 += 1, R264 += 1, R68 += 1 };
  s7 -> s7 [0, 65535] { R342 += 1, R264 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R342 += 1 };
  s7 -> s1 [91, 98] { R342 += 1, R264 += 1, R68 += 1 };
  s7 -> s8 [99, 99] { R342 += 1, R264 += 1, R68 += 1 };
  s7 -> s1 [100, 65535] { R342 += 1, R264 += 1, R68 += 1 };
  s8 -> s1 [0, 80] { R342 += 1, R264 += 1, R68 += 1 };
  s8 -> s8 [0, 65535] { R342 += 1, R264 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s6 [0, 65535] { R342 += 1 };
  s8 -> s1 [91, 96] { R342 += 1, R264 += 1, R68 += 1 };
  s8 -> s9 [97, 97] { R342 += 1, R264 += 1, R68 += 1 };
  s8 -> s1 [98, 65535] { R342 += 1, R264 += 1, R68 += 1 };
  s9 -> s1 [0, 80] { R342 += 1, R264 += 1, R68 += 1 };
  s9 -> s5 [0, 65535];
  s9 -> s6 [0, 65535] { R342 += 1 };
  s9 -> s9 [0, 65535] { R342 += 1, R264 += 1 };
  s9 -> s1 [91, 107] { R342 += 1, R264 += 1, R68 += 1 };
  s9 -> s10 [108, 108] { R342 += 1, R264 += 1, R68 += 1 };
  s9 -> s1 [109, 65535] { R342 += 1, R264 += 1, R68 += 1 };
  s10 -> s1 [0, 80] { R342 += 1, R264 += 1, R68 += 1 };
  s10 -> s10 [0, 65535] { R342 += 1, R264 += 1 };
  s10 -> s5 [0, 65535];
  s10 -> s6 [0, 65535] { R342 += 1 };
  s10 -> s1 [91, 103] { R342 += 1, R264 += 1, R68 += 1 };
  s10 -> s11 [104, 104] { R342 += 1, R264 += 1, R68 += 1 };
  s10 -> s1 [105, 65535] { R342 += 1, R264 += 1, R68 += 1 };
  s11 -> s1 [0, 80] { R342 += 1, R264 += 1, R68 += 1 };
  s11 -> s5 [0, 65535];
  s11 -> s6 [0, 65535] { R342 += 1 };
  s11 -> s11 [0, 65535] { R342 += 1, R264 += 1 };
  s11 -> s1 [91, 110] { R342 += 1, R264 += 1, R68 += 1 };
  s11 -> s12 [111, 111] { R342 += 1, R264 += 1, R68 += 1 };
  s11 -> s1 [112, 65535] { R342 += 1, R264 += 1, R68 += 1 };
  s12 -> s1 [0, 80] { R342 += 1, R264 += 1, R68 += 1 };
  s12 -> s5 [0, 65535];
  s12 -> s6 [0, 65535] { R342 += 1 };
  s12 -> s12 [0, 65535] { R342 += 1, R264 += 1 };
  s12 -> s1 [91, 114] { R342 += 1, R264 += 1, R68 += 1 };
  s12 -> s13 [115, 115] { R342 += 1, R264 += 1, R68 += 1 };
  s12 -> s1 [116, 65535] { R342 += 1, R264 += 1, R68 += 1 };
  s13 -> s1 [0, 80] { R342 += 1, R264 += 1, R68 += 1 };
  s13 -> s13 [0, 65535] { R342 += 1, R264 += 1 };
  s13 -> s5 [0, 65535];
  s13 -> s6 [0, 65535] { R342 += 1 };
  s13 -> s1 [91, 115] { R342 += 1, R264 += 1, R68 += 1 };
  s13 -> s14 [116, 116] { R342 += 1, R264 += 1, R68 += 1 };
  s13 -> s1 [117, 65535] { R342 += 1, R264 += 1, R68 += 1 };
  s14 -> s1 [0, 80] { R342 += 1, R264 += 1, R68 += 1 };
  s14 -> s1 [91, 65535] { R342 += 1, R264 += 1, R68 += 1 };
  accepting s3, s4, s12, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 65535] { R344 += 1, R266 += 1, R72 += 1, R73 += 1 };
  s0 -> s2 [0, 65535] { R344 += 1, R265 += 1, R266 += 1 };
  s0 -> s0 [0, 65535] { R343 += 1, R344 += 1 };
  s0 -> s3 [0, 65535] { R344 += 1, R266 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 65535] { R344 += 1, R266 += 1, R72 += 1, R73 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R344 += 1 };
  s1 -> s3 [0, 65535] { R344 += 1, R266 += 1, R73 += 1, R74 += 1 };
  s2 -> s1 [0, 65535] { R344 += 1, R266 += 1, R72 += 1, R73 += 1 };
  s2 -> s2 [0, 65535] { R344 += 1, R265 += 1, R266 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R344 += 1, R266 += 1, R73 += 1, R74 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R344 += 1, R266 += 1 };
  s3 -> s6 [0, 65535] { R344 += 1 };
  s3 -> s3 [0, 65535] { R344 += 1, R266 += 1, R73 += 1, R74 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R344 += 1, R266 += 1 };
  s5 -> s6 [0, 65535] { R344 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R344 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s0 [0, 65535] { R345 += 1, R346 += 1 };
  s0 -> s1 [0, 65535] { R346 += 1, R267 += 1, R268 += 1 };
  s0 -> s2 [0, 65535] { R346 += 1, R268 += 1, R78 += 1, R79 += 1 };
  s0 -> s3 [0, 65535] { R346 += 1, R268 += 1, R79 += 1, R80 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R346 += 1, R267 += 1, R268 += 1 };
  s1 -> s2 [0, 65535] { R346 += 1, R268 += 1, R78 += 1, R79 += 1 };
  s1 -> s3 [0, 65535] { R346 += 1, R268 += 1, R79 += 1, R80 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R346 += 1 };
  s2 -> s2 [0, 65535] { R346 += 1, R268 += 1, R78 += 1, R79 += 1 };
  s2 -> s3 [0, 65535] { R346 += 1, R268 += 1, R79 += 1, R80 += 1 };
  s3 -> s4 [0, 65535] { R346 += 1, R268 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R346 += 1 };
  s3 -> s3 [0, 65535] { R346 += 1, R268 += 1, R79 += 1, R80 += 1 };
  s4 -> s4 [0, 65535] { R346 += 1, R268 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R346 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R346 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 65535] { R348 += 1, R269 += 1, R270 += 1 };
  s0 -> s2 [0, 65535] { R348 += 1, R270 += 1 };
  s0 -> s0 [0, 65535] { R347 += 1, R348 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R348 += 1, R269 += 1, R270 += 1 };
  s1 -> s2 [0, 65535] { R348 += 1, R270 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R348 += 1, R270 += 1 };
  s2 -> s4 [0, 65535] { R348 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R348 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s0 [0, 65535] { R349 += 1, R350 += 1 };
  s0 -> s1 [0, 65535] { R350 += 1, R272 += 1, R84 += 1, R85 += 1 };
  s0 -> s2 [0, 65535] { R350 += 1, R272 += 1, R85 += 1, R86 += 1 };
  s0 -> s3 [0, 65535] { R350 += 1, R271 += 1, R272 += 1 };
  s1 -> s6 [0, 65535] { R350 += 1 };
  s1 -> s1 [0, 65535] { R350 += 1, R272 += 1, R84 += 1, R85 += 1 };
  s1 -> s2 [0, 65535] { R350 += 1, R272 += 1, R85 += 1, R86 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R350 += 1, R272 += 1 };
  s2 -> s6 [0, 65535] { R350 += 1 };
  s2 -> s2 [0, 65535] { R350 += 1, R272 += 1, R85 += 1, R86 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R350 += 1, R272 += 1, R84 += 1, R85 += 1 };
  s3 -> s2 [0, 65535] { R350 += 1, R272 += 1, R85 += 1, R86 += 1 };
  s3 -> s3 [0, 65535] { R350 += 1, R271 += 1, R272 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R350 += 1, R272 += 1 };
  s5 -> s6 [0, 65535] { R350 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R350 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 65535] { R352 += 1, R273 += 1, R274 += 1 };
  s0 -> s2 [0, 65535] { R352 += 1, R274 += 1 };
  s0 -> s0 [0, 65535] { R351 += 1, R352 += 1 };
  s1 -> s1 [0, 65535] { R352 += 1, R273 += 1, R274 += 1 };
  s1 -> s2 [0, 65535] { R352 += 1, R274 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R352 += 1, R274 += 1 };
  s2 -> s3 [0, 65535] { R352 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R352 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 79] { R354 += 1, R276 += 1, R241 += 1, R242 += 1 };
  s0 -> s2 [0, 65535] { R354 += 1, R275 += 1, R276 += 1 };
  s0 -> s1 [0, 65535] { R354 += 1, R276 += 1 };
  s0 -> s0 [0, 65535] { R353 += 1, R354 += 1 };
  s0 -> s3 [80, 80] { R354 += 1, R276 += 1, R241 += 1, R242 += 1 };
  s0 -> s4 [80, 80] { R354 += 1, R276 += 1, R241 += 1, R242 += 1 };
  s0 -> s1 [81, 65535] { R354 += 1, R276 += 1, R241 += 1, R242 += 1 };
  s1 -> s1 [0, 79] { R354 += 1, R276 += 1, R241 += 1, R242 += 1 };
  s1 -> s1 [0, 65535] { R354 += 1, R276 += 1 };
  s1 -> s6 [0, 65535] { R354 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s3 [80, 80] { R354 += 1, R276 += 1, R241 += 1, R242 += 1 };
  s1 -> s4 [80, 80] { R354 += 1, R276 += 1, R241 += 1, R242 += 1 };
  s1 -> s1 [81, 65535] { R354 += 1, R276 += 1, R241 += 1, R242 += 1 };
  s2 -> s1 [0, 79] { R354 += 1, R276 += 1, R241 += 1, R242 += 1 };
  s2 -> s2 [0, 65535] { R354 += 1, R275 += 1, R276 += 1 };
  s2 -> s1 [0, 65535] { R354 += 1, R276 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s3 [80, 80] { R354 += 1, R276 += 1, R241 += 1, R242 += 1 };
  s2 -> s4 [80, 80] { R354 += 1, R276 += 1, R241 += 1, R242 += 1 };
  s2 -> s1 [81, 65535] { R354 += 1, R276 += 1, R241 += 1, R242 += 1 };
  s3 -> s3 [0, 65535] { R354 += 1, R276 += 1 };
  s3 -> s6 [0, 65535] { R354 += 1 };
  s3 -> s7 [0, 65535];
  s4 -> s5 [0, 65535] { R354 += 1, R276 += 1 };
  s4 -> s6 [0, 65535] { R354 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s4 [0, 65535] { R354 += 1, R276 += 1, R241 += 1, R242 += 1 };
  s5 -> s5 [0, 65535] { R354 += 1, R276 += 1 };
  s5 -> s6 [0, 65535] { R354 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s6 [0, 65535] { R354 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 65535] { R356 += 1, R278 += 1, R20 += 1 };
  s0 -> s2 [0, 65535] { R356 += 1, R277 += 1, R278 += 1 };
  s0 -> s0 [0, 65535] { R355 += 1, R356 += 1 };
  s1 -> s1 [0, 65535] { R356 += 1, R278 += 1, R20 += 1 };
  s1 -> s4 [0, 65535] { R356 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R356 += 1, R278 += 1, R20 += 1 };
  s2 -> s2 [0, 65535] { R356 += 1, R277 += 1, R278 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R356 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 64] { R358 += 1, R280 += 1 };
  s0 -> s0 [0, 65535] { R357 += 1, R358 += 1 };
  s0 -> s2 [0, 65535] { R358 += 1, R279 += 1, R280 += 1 };
  s0 -> s3 [65, 65] { R358 += 1, R280 += 1 };
  s0 -> s4 [65, 65] { R358 += 1, R280 += 1 };
  s0 -> s1 [81, 65535] { R358 += 1, R280 += 1 };
  s1 -> s1 [0, 64] { R358 += 1, R280 += 1 };
  s1 -> s1 [0, 65535] { R358 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R358 += 1, R280 += 1 };
  s1 -> s4 [65, 65] { R358 += 1, R280 += 1 };
  s1 -> s1 [81, 65535] { R358 += 1, R280 += 1 };
  s2 -> s1 [0, 64] { R358 += 1, R280 += 1 };
  s2 -> s2 [0, 65535] { R358 += 1, R279 += 1, R280 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R358 += 1, R280 += 1 };
  s2 -> s4 [65, 65] { R358 += 1, R280 += 1 };
  s2 -> s1 [81, 65535] { R358 += 1, R280 += 1 };
  s3 -> s3 [0, 65] { R358 += 1, R280 += 1 };
  s3 -> s3 [0, 65535] { R358 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [81, 65535] { R358 += 1, R280 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R358 += 1 };
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_27 {
  init s0;
  s0 -> s1 [0, 64] { R360 += 1, R282 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R359 += 1, R360 += 1 };
  s0 -> s2 [0, 65535] { R360 += 1, R281 += 1, R282 += 1 };
  s0 -> s3 [65, 65] { R360 += 1, R282 += 1, R43 += 1 };
  s0 -> s4 [65, 65] { R360 += 1, R282 += 1, R43 += 1 };
  s0 -> s1 [66, 65535] { R360 += 1, R282 += 1, R43 += 1 };
  s1 -> s1 [0, 64] { R360 += 1, R282 += 1, R43 += 1 };
  s1 -> s1 [0, 65535] { R360 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R360 += 1, R282 += 1, R43 += 1 };
  s1 -> s4 [65, 65] { R360 += 1, R282 += 1, R43 += 1 };
  s1 -> s1 [66, 65535] { R360 += 1, R282 += 1, R43 += 1 };
  s2 -> s1 [0, 64] { R360 += 1, R282 += 1, R43 += 1 };
  s2 -> s2 [0, 65535] { R360 += 1, R281 += 1, R282 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R360 += 1, R282 += 1, R43 += 1 };
  s2 -> s4 [65, 65] { R360 += 1, R282 += 1, R43 += 1 };
  s2 -> s1 [66, 65535] { R360 += 1, R282 += 1, R43 += 1 };
  s3 -> s3 [0, 65535] { R360 += 1, R282 += 1, R43 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R360 += 1 };
  s4 -> s4 [0, 65535] { R360 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R360 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_28 {
  init s0;
  s0 -> s1 [0, 64] { R362 += 1, R284 += 1, R45 += 1 };
  s0 -> s2 [0, 65535] { R362 += 1, R283 += 1, R284 += 1 };
  s0 -> s0 [0, 65535] { R361 += 1, R362 += 1 };
  s0 -> s3 [65, 65] { R362 += 1, R284 += 1, R45 += 1 };
  s0 -> s4 [65, 65] { R362 += 1, R284 += 1, R45 += 1 };
  s0 -> s1 [66, 65535] { R362 += 1, R284 += 1, R45 += 1 };
  s1 -> s1 [0, 64] { R362 += 1, R284 += 1, R45 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R362 += 1 };
  s1 -> s3 [65, 65] { R362 += 1, R284 += 1, R45 += 1 };
  s1 -> s4 [65, 65] { R362 += 1, R284 += 1, R45 += 1 };
  s1 -> s1 [66, 65535] { R362 += 1, R284 += 1, R45 += 1 };
  s2 -> s1 [0, 64] { R362 += 1, R284 += 1, R45 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R362 += 1, R283 += 1, R284 += 1 };
  s2 -> s3 [65, 65] { R362 += 1, R284 += 1, R45 += 1 };
  s2 -> s4 [65, 65] { R362 += 1, R284 += 1, R45 += 1 };
  s2 -> s1 [66, 65535] { R362 += 1, R284 += 1, R45 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R362 += 1, R284 += 1, R45 += 1 };
  s3 -> s6 [0, 65535] { R362 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R362 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R362 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_29 {
  init s0;
  s0 -> s1 [0, 64] { R364 += 1, R286 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R363 += 1, R364 += 1 };
  s0 -> s2 [0, 65535] { R364 += 1, R285 += 1, R286 += 1 };
  s0 -> s3 [65, 65] { R364 += 1, R286 += 1, R47 += 1 };
  s0 -> s4 [65, 65] { R364 += 1, R286 += 1, R47 += 1 };
  s0 -> s1 [66, 65535] { R364 += 1, R286 += 1, R47 += 1 };
  s1 -> s1 [0, 64] { R364 += 1, R286 += 1, R47 += 1 };
  s1 -> s1 [0, 65535] { R364 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R364 += 1, R286 += 1, R47 += 1 };
  s1 -> s4 [65, 65] { R364 += 1, R286 += 1, R47 += 1 };
  s1 -> s1 [66, 65535] { R364 += 1, R286 += 1, R47 += 1 };
  s2 -> s1 [0, 64] { R364 += 1, R286 += 1, R47 += 1 };
  s2 -> s2 [0, 65535] { R364 += 1, R285 += 1, R286 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R364 += 1, R286 += 1, R47 += 1 };
  s2 -> s4 [65, 65] { R364 += 1, R286 += 1, R47 += 1 };
  s2 -> s1 [66, 65535] { R364 += 1, R286 += 1, R47 += 1 };
  s3 -> s3 [0, 65535] { R364 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R364 += 1 };
  s4 -> s4 [0, 65535] { R364 += 1, R286 += 1, R47 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R364 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_30 {
  init s0;
  s0 -> s1 [0, 64] { R366 += 1, R288 += 1, R49 += 1, R50 += 1 };
  s0 -> s2 [0, 65535] { R366 += 1, R287 += 1, R288 += 1 };
  s0 -> s0 [0, 65535] { R365 += 1, R366 += 1 };
  s0 -> s3 [65, 65] { R366 += 1, R288 += 1, R49 += 1, R50 += 1 };
  s0 -> s4 [65, 65] { R366 += 1, R288 += 1, R49 += 1, R50 += 1 };
  s0 -> s1 [66, 65535] { R366 += 1, R288 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 64] { R366 += 1, R288 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 65535] { R366 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R366 += 1, R288 += 1, R49 += 1, R50 += 1 };
  s1 -> s4 [65, 65] { R366 += 1, R288 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [66, 65535] { R366 += 1, R288 += 1, R49 += 1, R50 += 1 };
  s2 -> s1 [0, 64] { R366 += 1, R288 += 1, R49 += 1, R50 += 1 };
  s2 -> s2 [0, 65535] { R366 += 1, R287 += 1, R288 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R366 += 1, R288 += 1, R49 += 1, R50 += 1 };
  s2 -> s4 [65, 65] { R366 += 1, R288 += 1, R49 += 1, R50 += 1 };
  s2 -> s1 [66, 65535] { R366 += 1, R288 += 1, R49 += 1, R50 += 1 };
  s3 -> s6 [0, 65535] { R366 += 1 };
  s3 -> s3 [0, 65535] { R366 += 1, R288 += 1, R49 += 1, R50 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R366 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R366 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_31 {
  init s0;
  s0 -> s1 [0, 64] { R368 += 1, R290 += 1 };
  s0 -> s2 [0, 65535] { R368 += 1, R289 += 1, R290 += 1 };
  s0 -> s0 [0, 65535] { R367 += 1, R368 += 1 };
  s0 -> s3 [65, 65] { R368 += 1, R290 += 1 };
  s0 -> s4 [65, 65] { R368 += 1, R290 += 1 };
  s0 -> s1 [66, 65535] { R368 += 1, R290 += 1 };
  s1 -> s1 [0, 64] { R368 += 1, R290 += 1 };
  s1 -> s1 [0, 65535] { R368 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R368 += 1, R290 += 1 };
  s1 -> s4 [65, 65] { R368 += 1, R290 += 1 };
  s1 -> s1 [66, 65535] { R368 += 1, R290 += 1 };
  s2 -> s1 [0, 64] { R368 += 1, R290 += 1 };
  s2 -> s2 [0, 65535] { R368 += 1, R289 += 1, R290 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R368 += 1, R290 += 1 };
  s2 -> s4 [65, 65] { R368 += 1, R290 += 1 };
  s2 -> s1 [66, 65535] { R368 += 1, R290 += 1 };
  s3 -> s3 [0, 65535] { R368 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R368 += 1, R290 += 1 };
  s4 -> s6 [0, 65535] { R368 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R368 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_32 {
  init s0;
  s0 -> s1 [0, 64] { R370 += 1, R292 += 1, R55 += 1, R56 += 1 };
  s0 -> s2 [0, 65535] { R370 += 1, R291 += 1, R292 += 1 };
  s0 -> s0 [0, 65535] { R369 += 1, R370 += 1 };
  s0 -> s3 [65, 65] { R370 += 1, R292 += 1, R55 += 1, R56 += 1 };
  s0 -> s4 [65, 65] { R370 += 1, R292 += 1, R55 += 1, R56 += 1 };
  s0 -> s1 [66, 65535] { R370 += 1, R292 += 1, R55 += 1, R56 += 1 };
  s1 -> s1 [0, 64] { R370 += 1, R292 += 1, R55 += 1, R56 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R370 += 1 };
  s1 -> s3 [65, 65] { R370 += 1, R292 += 1, R55 += 1, R56 += 1 };
  s1 -> s4 [65, 65] { R370 += 1, R292 += 1, R55 += 1, R56 += 1 };
  s1 -> s1 [66, 65535] { R370 += 1, R292 += 1, R55 += 1, R56 += 1 };
  s2 -> s1 [0, 64] { R370 += 1, R292 += 1, R55 += 1, R56 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R370 += 1, R291 += 1, R292 += 1 };
  s2 -> s3 [65, 65] { R370 += 1, R292 += 1, R55 += 1, R56 += 1 };
  s2 -> s4 [65, 65] { R370 += 1, R292 += 1, R55 += 1, R56 += 1 };
  s2 -> s1 [66, 65535] { R370 += 1, R292 += 1, R55 += 1, R56 += 1 };
  s3 -> s3 [0, 65535] { R370 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R370 += 1, R292 += 1, R55 += 1, R56 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R370 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R370 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_33 {
  init s0;
  s0 -> s1 [0, 64] { R372 += 1, R294 += 1, R59 += 1, R60 += 1 };
  s0 -> s2 [0, 65535] { R372 += 1, R293 += 1, R294 += 1 };
  s0 -> s0 [0, 65535] { R371 += 1, R372 += 1 };
  s0 -> s3 [65, 65] { R372 += 1, R294 += 1, R59 += 1, R60 += 1 };
  s0 -> s4 [65, 65] { R372 += 1, R294 += 1, R59 += 1, R60 += 1 };
  s0 -> s1 [66, 65535] { R372 += 1, R294 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 64] { R372 += 1, R294 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 65535] { R372 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R372 += 1, R294 += 1, R59 += 1, R60 += 1 };
  s1 -> s4 [65, 65] { R372 += 1, R294 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [66, 65535] { R372 += 1, R294 += 1, R59 += 1, R60 += 1 };
  s2 -> s1 [0, 64] { R372 += 1, R294 += 1, R59 += 1, R60 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R372 += 1, R293 += 1, R294 += 1 };
  s2 -> s3 [65, 65] { R372 += 1, R294 += 1, R59 += 1, R60 += 1 };
  s2 -> s4 [65, 65] { R372 += 1, R294 += 1, R59 += 1, R60 += 1 };
  s2 -> s1 [66, 65535] { R372 += 1, R294 += 1, R59 += 1, R60 += 1 };
  s3 -> s3 [0, 65535] { R372 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R372 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R372 += 1, R294 += 1, R59 += 1, R60 += 1 };
  s5 -> s5 [0, 65535] { R372 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_34 {
  init s0;
  s0 -> s1 [0, 64] { R374 += 1, R296 += 1, R65 += 1, R66 += 1 };
  s0 -> s2 [0, 65535] { R374 += 1, R295 += 1, R296 += 1 };
  s0 -> s0 [0, 65535] { R373 += 1, R374 += 1 };
  s0 -> s3 [65, 65] { R374 += 1, R296 += 1, R65 += 1, R66 += 1 };
  s0 -> s4 [65, 65] { R374 += 1, R296 += 1, R65 += 1, R66 += 1 };
  s0 -> s1 [66, 65535] { R374 += 1, R296 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 64] { R374 += 1, R296 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 65535] { R374 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R374 += 1, R296 += 1, R65 += 1, R66 += 1 };
  s1 -> s4 [65, 65] { R374 += 1, R296 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [66, 65535] { R374 += 1, R296 += 1, R65 += 1, R66 += 1 };
  s2 -> s1 [0, 64] { R374 += 1, R296 += 1, R65 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R374 += 1, R295 += 1, R296 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R374 += 1, R296 += 1, R65 += 1, R66 += 1 };
  s2 -> s4 [65, 65] { R374 += 1, R296 += 1, R65 += 1, R66 += 1 };
  s2 -> s1 [66, 65535] { R374 += 1, R296 += 1, R65 += 1, R66 += 1 };
  s3 -> s3 [0, 65535] { R374 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R374 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R374 += 1, R296 += 1, R65 += 1, R66 += 1 };
  s5 -> s5 [0, 65535] { R374 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_35 {
  init s0;
  s0 -> s1 [0, 64] { R376 += 1, R298 += 1, R69 += 1, R70 += 1 };
  s0 -> s2 [0, 65535] { R376 += 1, R297 += 1, R298 += 1 };
  s0 -> s0 [0, 65535] { R375 += 1, R376 += 1 };
  s0 -> s3 [65, 65] { R376 += 1, R298 += 1, R69 += 1, R70 += 1 };
  s0 -> s4 [65, 65] { R376 += 1, R298 += 1, R69 += 1, R70 += 1 };
  s0 -> s1 [66, 65535] { R376 += 1, R298 += 1, R69 += 1, R70 += 1 };
  s1 -> s1 [0, 64] { R376 += 1, R298 += 1, R69 += 1, R70 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R376 += 1 };
  s1 -> s3 [65, 65] { R376 += 1, R298 += 1, R69 += 1, R70 += 1 };
  s1 -> s4 [65, 65] { R376 += 1, R298 += 1, R69 += 1, R70 += 1 };
  s1 -> s1 [66, 65535] { R376 += 1, R298 += 1, R69 += 1, R70 += 1 };
  s2 -> s1 [0, 64] { R376 += 1, R298 += 1, R69 += 1, R70 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R376 += 1, R297 += 1, R298 += 1 };
  s2 -> s3 [65, 65] { R376 += 1, R298 += 1, R69 += 1, R70 += 1 };
  s2 -> s4 [65, 65] { R376 += 1, R298 += 1, R69 += 1, R70 += 1 };
  s2 -> s1 [66, 65535] { R376 += 1, R298 += 1, R69 += 1, R70 += 1 };
  s3 -> s3 [0, 65535] { R376 += 1, R298 += 1, R69 += 1, R70 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R376 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R376 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R376 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_36 {
  init s0;
  s0 -> s1 [0, 64] { R378 += 1, R300 += 1, R75 += 1, R76 += 1 };
  s0 -> s2 [0, 65535] { R378 += 1, R299 += 1, R300 += 1 };
  s0 -> s0 [0, 65535] { R377 += 1, R378 += 1 };
  s0 -> s3 [65, 65] { R378 += 1, R300 += 1, R75 += 1, R76 += 1 };
  s0 -> s4 [65, 65] { R378 += 1, R300 += 1, R75 += 1, R76 += 1 };
  s0 -> s1 [66, 65535] { R378 += 1, R300 += 1, R75 += 1, R76 += 1 };
  s1 -> s1 [0, 64] { R378 += 1, R300 += 1, R75 += 1, R76 += 1 };
  s1 -> s1 [0, 65535] { R378 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R378 += 1, R300 += 1, R75 += 1, R76 += 1 };
  s1 -> s4 [65, 65] { R378 += 1, R300 += 1, R75 += 1, R76 += 1 };
  s1 -> s1 [66, 65535] { R378 += 1, R300 += 1, R75 += 1, R76 += 1 };
  s2 -> s1 [0, 64] { R378 += 1, R300 += 1, R75 += 1, R76 += 1 };
  s2 -> s2 [0, 65535] { R378 += 1, R299 += 1, R300 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R378 += 1, R300 += 1, R75 += 1, R76 += 1 };
  s2 -> s4 [65, 65] { R378 += 1, R300 += 1, R75 += 1, R76 += 1 };
  s2 -> s1 [66, 65535] { R378 += 1, R300 += 1, R75 += 1, R76 += 1 };
  s3 -> s3 [0, 65535] { R378 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R378 += 1, R300 += 1, R75 += 1, R76 += 1 };
  s4 -> s5 [0, 65535] { R378 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R378 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_37 {
  init s0;
  s0 -> s1 [0, 64] { R380 += 1, R302 += 1 };
  s0 -> s2 [0, 65535] { R380 += 1, R301 += 1, R302 += 1 };
  s0 -> s0 [0, 65535] { R379 += 1, R380 += 1 };
  s0 -> s3 [65, 65] { R380 += 1, R302 += 1 };
  s0 -> s4 [65, 65] { R380 += 1, R302 += 1 };
  s0 -> s1 [66, 65535] { R380 += 1, R302 += 1 };
  s1 -> s1 [0, 64] { R380 += 1, R302 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R380 += 1 };
  s1 -> s3 [65, 65] { R380 += 1, R302 += 1 };
  s1 -> s4 [65, 65] { R380 += 1, R302 += 1 };
  s1 -> s1 [66, 65535] { R380 += 1, R302 += 1 };
  s2 -> s1 [0, 64] { R380 += 1, R302 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R380 += 1, R301 += 1, R302 += 1 };
  s2 -> s3 [65, 65] { R380 += 1, R302 += 1 };
  s2 -> s4 [65, 65] { R380 += 1, R302 += 1 };
  s2 -> s1 [66, 65535] { R380 += 1, R302 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R380 += 1 };
  s4 -> s5 [0, 65535] { R380 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R380 += 1, R302 += 1 };
  s5 -> s5 [0, 65535] { R380 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_38 {
  init s0;
  s0 -> s1 [0, 64] { R382 += 1, R304 += 1, R81 += 1, R82 += 1 };
  s0 -> s2 [0, 65535] { R382 += 1, R303 += 1, R304 += 1 };
  s0 -> s0 [0, 65535] { R381 += 1, R382 += 1 };
  s0 -> s3 [65, 65] { R382 += 1, R304 += 1, R81 += 1, R82 += 1 };
  s0 -> s4 [65, 65] { R382 += 1, R304 += 1, R81 += 1, R82 += 1 };
  s0 -> s1 [66, 65535] { R382 += 1, R304 += 1, R81 += 1, R82 += 1 };
  s1 -> s1 [0, 64] { R382 += 1, R304 += 1, R81 += 1, R82 += 1 };
  s1 -> s1 [0, 65535] { R382 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R382 += 1, R304 += 1, R81 += 1, R82 += 1 };
  s1 -> s4 [65, 65] { R382 += 1, R304 += 1, R81 += 1, R82 += 1 };
  s1 -> s1 [66, 65535] { R382 += 1, R304 += 1, R81 += 1, R82 += 1 };
  s2 -> s1 [0, 64] { R382 += 1, R304 += 1, R81 += 1, R82 += 1 };
  s2 -> s2 [0, 65535] { R382 += 1, R303 += 1, R304 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R382 += 1, R304 += 1, R81 += 1, R82 += 1 };
  s2 -> s4 [65, 65] { R382 += 1, R304 += 1, R81 += 1, R82 += 1 };
  s2 -> s1 [66, 65535] { R382 += 1, R304 += 1, R81 += 1, R82 += 1 };
  s3 -> s3 [0, 65535] { R382 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R382 += 1, R304 += 1, R81 += 1, R82 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R382 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R382 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_39 {
  init s0;
  s0 -> s1 [0, 64] { R384 += 1, R306 += 1 };
  s0 -> s0 [0, 65535] { R383 += 1, R384 += 1 };
  s0 -> s2 [0, 65535] { R384 += 1, R305 += 1, R306 += 1 };
  s0 -> s3 [65, 65] { R384 += 1, R306 += 1 };
  s0 -> s4 [65, 65] { R384 += 1, R306 += 1 };
  s0 -> s1 [66, 65535] { R384 += 1, R306 += 1 };
  s1 -> s1 [0, 64] { R384 += 1, R306 += 1 };
  s1 -> s1 [0, 65535] { R384 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R384 += 1, R306 += 1 };
  s1 -> s4 [65, 65] { R384 += 1, R306 += 1 };
  s1 -> s1 [66, 65535] { R384 += 1, R306 += 1 };
  s2 -> s1 [0, 64] { R384 += 1, R306 += 1 };
  s2 -> s2 [0, 65535] { R384 += 1, R305 += 1, R306 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R384 += 1, R306 += 1 };
  s2 -> s4 [65, 65] { R384 += 1, R306 += 1 };
  s2 -> s1 [66, 65535] { R384 += 1, R306 += 1 };
  s3 -> s6 [0, 65535] { R384 += 1 };
  s3 -> s3 [0, 65535] { R384 += 1, R306 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R384 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R384 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_40 {
  init s0;
  s0 -> s1 [0, 64] { R386 += 1, R308 += 1, R237 += 1, R238 += 1 };
  s0 -> s2 [0, 64] { R386 += 1, R308 += 1, R238 += 1, R239 += 1 };
  s0 -> s3 [0, 65535] { R386 += 1, R307 += 1, R308 += 1 };
  s0 -> s0 [0, 65535] { R385 += 1, R386 += 1 };
  s0 -> s4 [65, 65] { R386 += 1, R308 += 1, R238 += 1, R239 += 1 };
  s0 -> s5 [65, 65] { R386 += 1, R308 += 1, R238 += 1, R239 += 1 };
  s0 -> s6 [65, 65] { R386 += 1, R308 += 1, R237 += 1, R238 += 1 };
  s0 -> s7 [65, 65] { R386 += 1, R308 += 1, R237 += 1, R238 += 1 };
  s0 -> s2 [66, 79] { R386 += 1, R308 += 1, R238 += 1, R239 += 1 };
  s0 -> s1 [66, 65535] { R386 += 1, R308 += 1, R237 += 1, R238 += 1 };
  s0 -> s2 [81, 65535] { R386 += 1, R308 += 1, R238 += 1, R239 += 1 };
  s1 -> s1 [0, 64] { R386 += 1, R308 += 1, R237 += 1, R238 += 1 };
  s1 -> s2 [0, 64] { R386 += 1, R308 += 1, R238 += 1, R239 += 1 };
  s1 -> s4 [65, 65] { R386 += 1, R308 += 1, R238 += 1, R239 += 1 };
  s1 -> s5 [65, 65] { R386 += 1, R308 += 1, R238 += 1, R239 += 1 };
  s1 -> s6 [65, 65] { R386 += 1, R308 += 1, R237 += 1, R238 += 1 };
  s1 -> s7 [65, 65] { R386 += 1, R308 += 1, R237 += 1, R238 += 1 };
  s1 -> s2 [66, 79] { R386 += 1, R308 += 1, R238 += 1, R239 += 1 };
  s1 -> s1 [66, 65535] { R386 += 1, R308 += 1, R237 += 1, R238 += 1 };
  s1 -> s2 [81, 65535] { R386 += 1, R308 += 1, R238 += 1, R239 += 1 };
  s2 -> s2 [0, 64] { R386 += 1, R308 += 1, R238 += 1, R239 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R386 += 1 };
  s2 -> s4 [65, 65] { R386 += 1, R308 += 1 };
  s2 -> s5 [65, 65] { R386 += 1, R308 += 1 };
  s2 -> s2 [66, 79] { R386 += 1, R308 += 1, R238 += 1, R239 += 1 };
  s2 -> s2 [66, 65535] { R386 += 1, R308 += 1 };
  s2 -> s2 [81, 65535] { R386 += 1, R308 += 1, R238 += 1, R239 += 1 };
  s3 -> s1 [0, 64] { R386 += 1, R308 += 1, R237 += 1, R238 += 1 };
  s3 -> s2 [0, 64] { R386 += 1, R308 += 1, R238 += 1, R239 += 1 };
  s3 -> s3 [0, 65535] { R386 += 1, R307 += 1, R308 += 1 };
  s3 -> s4 [65, 65] { R386 += 1, R308 += 1, R238 += 1, R239 += 1 };
  s3 -> s5 [65, 65] { R386 += 1, R308 += 1, R238 += 1, R239 += 1 };
  s3 -> s6 [65, 65] { R386 += 1, R308 += 1, R237 += 1, R238 += 1 };
  s3 -> s7 [65, 65] { R386 += 1, R308 += 1, R237 += 1, R238 += 1 };
  s3 -> s2 [66, 79] { R386 += 1, R308 += 1, R238 += 1, R239 += 1 };
  s3 -> s1 [66, 65535] { R386 += 1, R308 += 1, R237 += 1, R238 += 1 };
  s3 -> s2 [81, 65535] { R386 += 1, R308 += 1, R238 += 1, R239 += 1 };
  s4 -> s4 [0, 79] { R386 += 1, R308 += 1, R238 += 1, R239 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s9 [0, 65535] { R386 += 1 };
  s4 -> s4 [0, 65535] { R386 += 1, R308 += 1 };
  s4 -> s4 [81, 65535] { R386 += 1, R308 += 1, R238 += 1, R239 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s5 [0, 65535] { R386 += 1 };
  s7 -> s4 [0, 79] { R386 += 1, R308 += 1, R238 += 1, R239 += 1 };
  s7 -> s7 [0, 65535] { R386 += 1, R308 += 1, R237 += 1, R238 += 1 };
  s7 -> s4 [81, 65535] { R386 += 1, R308 += 1, R238 += 1, R239 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R386 += 1 };
  accepting s4, s8, s5, s2, s9;
};
};
constraint R2 = R276 && R3 = R386 && R21 = 0 && R22 = 1 && R23 = 0 && R24 = 1 && R44 + R43 = 0 && R243 = 0 && R244 = R276 && R245 = 0 && R246 = R276 && R247 = 0 && R248 = R276 && R249 = 0 && R250 = R276 && R251 = 0 && R252 = R276 && R253 = 0 && R254 = R276 && R255 = 0 && R256 = R276 && R257 = 0 && R258 = R276 && R259 = 0 && R260 = R276 && R261 = 0 && R262 = R276 && R263 = 0 && R264 = R276 && R265 = 0 && R266 = R276 && R267 = 0 && R268 = R276 && R269 = 0 && R270 = R276 && R271 = 0 && R272 = R276 && R273 = 0 && R274 = R276 && R275 = 0 && R307 = 0 && R308 = 0 && R309 = 10 && R310 = R386 && R311 = 10 && R312 = R386 && R313 = 10 && R314 = R386 && R315 = 10 && R316 = R386 && R317 = 10 && R318 = R386 && R319 = 10 && R320 = R386 && R321 = 10 && R322 = R386 && R323 = 10 && R324 = R386 && R325 = 10 && R326 = R386 && R327 = 10 && R328 = R386 && R329 = 10 && R330 = R386 && R331 = 10 && R332 = R386 && R333 = 10 && R334 = R386 && R335 = 10 && R336 = R386 && R337 = 10 && R338 = R386 && R339 = 10 && R340 = R386 && R341 = 10 && R342 = R386 && R343 = 10 && R344 = R386 && R345 = 10 && R346 = R386 && R347 = 10 && R348 = R386 && R349 = 10 && R350 = R386 && R351 = 10 && R352 = R386 && R353 = 10 && R354 = R386 && R355 = 10 && R356 = R386 && R357 = 10 && R358 = R386 && R359 = 10 && R360 = R386 && R361 = 10 && R362 = R386 && R363 = 10 && R364 = R386 && R365 = 10 && R366 = R386 && R367 = 10 && R368 = R386 && R369 = 10 && R370 = R386 && R371 = 10 && R372 = R386 && R373 = 10 && R374 = R386 && R375 = 10 && R376 = R386 && R377 = 10 && R378 = R386 && R379 = 10 && R380 = R386 && R381 = 10 && R382 = R386 && R383 = 10 && R384 = R386 && R385 = 10 && R74 + R71 + R242 + R239 != 0 && R11 < 1 && R12 < 1 && R46 + R45 < 1 && R48 + R47 < 1 && 0 < R276 && 9 < R386 && (R20 = 0 || (R277 = 0 && R278 = 0)) && (R20 = 0 || (R279 = 0 && R280 = 0)) && (R20 = 0 || (R281 = 0 && R282 = 0)) && (R20 = 0 || (R283 = 0 && R284 = 0)) && (R20 = 0 || (R285 = 0 && R286 = 0)) && (R20 = 0 || (R287 = 0 && R288 = 0)) && (R20 = 0 || (R289 = 0 && R290 = 0)) && (R20 = 0 || (R291 = 0 && R292 = 0)) && (R20 = 0 || (R293 = 0 && R294 = 0)) && (R20 = 0 || (R295 = 0 && R296 = 0)) && (R20 = 0 || (R297 = 0 && R298 = 0)) && (R20 = 0 || (R299 = 0 && R300 = 0)) && (R20 = 0 || (R301 = 0 && R302 = 0)) && (R20 = 0 || (R303 = 0 && R304 = 0)) && (R20 = 0 || (R305 = 0 && R306 = 0)) && (R54 + R51 = 0 || (R52 + R49 = 0 && R53 + R50 = 0)) && (R64 + R61 = 0 || (R57 + R55 = 0 && R58 + R56 = 0)) && (R64 + R61 = 0 || (R62 + R59 = 0 && R63 + R60 = 0)) && (R64 + R61 = 0 || (R67 + R65 = 0 && R68 + R66 = 0)) && (R64 + R61 = 0 || (R72 + R69 = 0 && R73 + R70 = 0)) && (R80 + R77 = 0 || (R78 + R75 = 0 && R79 + R76 = 0)) && (R86 + R83 = 0 || (R84 + R81 = 0 && R85 + R82 = 0)) && (R86 + R83 = 0 || (R240 + R237 = 0 && R241 + R238 = 0));
// End of Parikh automata intersection problem
