// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R13, R14, R15, R16, R17, R1769, R1770, R18, R2, R3, R3509, R3510, R3511, R3512, R3513, R3514, R4091, R4092, R4093, R4094, R4095, R4096, R4191, R4192, R4193, R4194, R4195, R4196, R4197, R4198, R4199, R4200, R4201, R4202, R4203, R4204, R4205, R4206, R4207, R4208, R4209, R4210, R4211, R4212, R4213, R4214, R4215, R4216, R4217, R4218, R4219, R4220, R4221, R4222, R4223, R4224, R4225, R4226, R4227, R4228, R4229, R4230, R4231, R4232, R4233, R4234, R4235, R4236, R4237, R4238, R4239, R4240, R4241, R4242, R4243, R4244, R4245, R4246, R4247, R4248, R4249, R4250, R4251, R4252, R4253, R4254, R4255, R4256, R4257, R4258, R4259, R4260, R4261, R4262, R4263, R4264, R4265, R4266, R4267, R4268, R4269, R4270, R4271, R4272, R4273, R4274, R4275, R4276, R4277, R4278, R4279, R4280, R4281, R4282, R4283, R4284, R7, R8;
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [119, 119];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 43] { R4236 += 1 };
  s0 -> s0 [0, 65535] { R4235 += 1, R4236 += 1 };
  s0 -> s1 [45, 45] { R4236 += 1 };
  s0 -> s2 [46, 46] { R4236 += 1 };
  s0 -> s1 [48, 62] { R4236 += 1 };
  s0 -> s3 [65, 65] { R4236 += 1 };
  s0 -> s1 [66, 65535] { R4236 += 1 };
  s1 -> s1 [0, 43] { R4236 += 1 };
  s1 -> s1 [45, 45] { R4236 += 1 };
  s1 -> s2 [46, 46] { R4236 += 1 };
  s1 -> s1 [48, 62] { R4236 += 1 };
  s1 -> s3 [65, 65] { R4236 += 1 };
  s1 -> s1 [66, 65535] { R4236 += 1 };
  s2 -> s1 [0, 43] { R4236 += 1 };
  s2 -> s1 [45, 45] { R4236 += 1 };
  s2 -> s2 [46, 46] { R4236 += 1 };
  s2 -> s1 [48, 62] { R4236 += 1 };
  s2 -> s3 [65, 65] { R4236 += 1 };
  s2 -> s1 [66, 114] { R4236 += 1 };
  s2 -> s8 [115, 115] { R4236 += 1 };
  s2 -> s1 [116, 65535] { R4236 += 1 };
  s3 -> s3 [0, 43] { R4236 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R4236 += 1 };
  s3 -> s4 [46, 46] { R4236 += 1 };
  s3 -> s3 [48, 62] { R4236 += 1 };
  s3 -> s3 [65, 65535] { R4236 += 1 };
  s4 -> s3 [0, 43] { R4236 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R4236 += 1 };
  s4 -> s4 [46, 46] { R4236 += 1 };
  s4 -> s3 [48, 62] { R4236 += 1 };
  s4 -> s3 [65, 114] { R4236 += 1 };
  s4 -> s5 [115, 115] { R4236 += 1 };
  s4 -> s3 [116, 65535] { R4236 += 1 };
  s5 -> s3 [0, 43] { R4236 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R4236 += 1 };
  s5 -> s4 [46, 46] { R4236 += 1 };
  s5 -> s3 [48, 62] { R4236 += 1 };
  s5 -> s3 [65, 110] { R4236 += 1 };
  s5 -> s6 [111, 111] { R4236 += 1 };
  s5 -> s3 [112, 65535] { R4236 += 1 };
  s6 -> s3 [0, 43] { R4236 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R4236 += 1 };
  s6 -> s4 [46, 46] { R4236 += 1 };
  s6 -> s3 [48, 62] { R4236 += 1 };
  s6 -> s3 [65, 98] { R4236 += 1 };
  s6 -> s7 [99, 99] { R4236 += 1 };
  s6 -> s3 [100, 65535] { R4236 += 1 };
  s7 -> s3 [0, 43] { R4236 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R4236 += 1 };
  s7 -> s4 [46, 46] { R4236 += 1 };
  s7 -> s3 [48, 62] { R4236 += 1 };
  s7 -> s3 [65, 106] { R4236 += 1 };
  s7 -> s3 [108, 65535] { R4236 += 1 };
  s8 -> s1 [0, 43] { R4236 += 1 };
  s8 -> s1 [45, 45] { R4236 += 1 };
  s8 -> s2 [46, 46] { R4236 += 1 };
  s8 -> s1 [48, 62] { R4236 += 1 };
  s8 -> s3 [65, 65] { R4236 += 1 };
  s8 -> s1 [66, 110] { R4236 += 1 };
  s8 -> s9 [111, 111] { R4236 += 1 };
  s8 -> s1 [112, 65535] { R4236 += 1 };
  s9 -> s1 [0, 43] { R4236 += 1 };
  s9 -> s1 [45, 45] { R4236 += 1 };
  s9 -> s2 [46, 46] { R4236 += 1 };
  s9 -> s1 [48, 62] { R4236 += 1 };
  s9 -> s3 [65, 65] { R4236 += 1 };
  s9 -> s1 [66, 98] { R4236 += 1 };
  s9 -> s10 [99, 99] { R4236 += 1 };
  s9 -> s1 [100, 65535] { R4236 += 1 };
  s10 -> s1 [0, 43] { R4236 += 1 };
  s10 -> s1 [45, 45] { R4236 += 1 };
  s10 -> s2 [46, 46] { R4236 += 1 };
  s10 -> s1 [48, 62] { R4236 += 1 };
  s10 -> s3 [65, 65] { R4236 += 1 };
  s10 -> s1 [66, 106] { R4236 += 1 };
  s10 -> s1 [108, 65535] { R4236 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R4238 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R4237 += 1, R4238 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R4238 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 57] { R4240 += 1 };
  s0 -> s0 [0, 65535] { R4239 += 1, R4240 += 1 };
  s0 -> s2 [0, 65535] { R4240 += 1, R7 += 1 };
  s0 -> s3 [58, 58] { R4240 += 1 };
  s0 -> s1 [59, 65535] { R4240 += 1 };
  s1 -> s1 [0, 57] { R4240 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R4240 += 1 };
  s1 -> s1 [59, 65535] { R4240 += 1 };
  s2 -> s1 [0, 57] { R4240 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R4240 += 1, R7 += 1 };
  s2 -> s3 [58, 58] { R4240 += 1 };
  s2 -> s1 [59, 65535] { R4240 += 1 };
  s3 -> s3 [0, 65535] { R4240 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 64] { R4242 += 1 };
  s0 -> s0 [0, 65535] { R4241 += 1, R4242 += 1 };
  s0 -> s2 [0, 65535] { R4242 += 1, R8 += 1 };
  s0 -> s3 [65, 65] { R4242 += 1 };
  s0 -> s1 [66, 65535] { R4242 += 1 };
  s1 -> s1 [0, 64] { R4242 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R4242 += 1 };
  s1 -> s1 [66, 65535] { R4242 += 1 };
  s2 -> s1 [0, 64] { R4242 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R4242 += 1, R8 += 1 };
  s2 -> s3 [65, 65] { R4242 += 1 };
  s2 -> s1 [66, 65535] { R4242 += 1 };
  s3 -> s3 [0, 65535] { R4242 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 90] { R4244 += 1, R16 += 1 };
  s0 -> s2 [0, 65535] { R4244 += 1, R15 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R4243 += 1, R4244 += 1 };
  s0 -> s3 [91, 91] { R4244 += 1, R16 += 1 };
  s0 -> s1 [92, 65535] { R4244 += 1, R16 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R4244 += 1, R16 += 1 };
  s1 -> s5 [0, 65535] { R4244 += 1 };
  s2 -> s1 [0, 90] { R4244 += 1, R16 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R4244 += 1, R15 += 1, R16 += 1 };
  s2 -> s3 [91, 91] { R4244 += 1, R16 += 1 };
  s2 -> s1 [92, 65535] { R4244 += 1, R16 += 1 };
  s3 -> s1 [0, 65535] { R4244 += 1, R16 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R4244 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R4246 += 1, R17 += 1, R18 += 1 };
  s0 -> s2 [0, 65535] { R4246 += 1, R18 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R4245 += 1, R4246 += 1 };
  s1 -> s1 [0, 65535] { R4246 += 1, R17 += 1, R18 += 1 };
  s1 -> s2 [0, 65535] { R4246 += 1, R18 += 1, R3 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R4246 += 1, R18 += 1, R3 += 1 };
  s2 -> s4 [0, 65535] { R4246 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4246 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 64] { R4248 += 1, R4198 += 1 };
  s0 -> s0 [0, 65535] { R4247 += 1, R4248 += 1 };
  s0 -> s2 [0, 65535] { R4248 += 1, R4197 += 1, R4198 += 1 };
  s0 -> s1 [66, 65535] { R4248 += 1, R4198 += 1 };
  s1 -> s1 [0, 64] { R4248 += 1, R4198 += 1 };
  s1 -> s1 [0, 65535] { R4248 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [66, 65535] { R4248 += 1, R4198 += 1 };
  s2 -> s1 [0, 64] { R4248 += 1, R4198 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R4248 += 1, R4197 += 1, R4198 += 1 };
  s2 -> s1 [66, 65535] { R4248 += 1, R4198 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R4250 += 1, R4199 += 1, R4200 += 1 };
  s0 -> s2 [0, 65535] { R4250 += 1, R4200 += 1, R13 += 1 };
  s0 -> s0 [0, 65535] { R4249 += 1, R4250 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R4250 += 1, R4199 += 1, R4200 += 1 };
  s1 -> s2 [0, 65535] { R4250 += 1, R4200 += 1, R13 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R4250 += 1, R4200 += 1, R13 += 1 };
  s2 -> s4 [0, 65535] { R4250 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4250 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65] { R4252 += 1, R4202 += 1 };
  s0 -> s2 [0, 65535] { R4252 += 1, R4201 += 1, R4202 += 1 };
  s0 -> s0 [0, 65535] { R4251 += 1, R4252 += 1 };
  s0 -> s1 [87, 65535] { R4252 += 1, R4202 += 1 };
  s1 -> s1 [0, 65] { R4252 += 1, R4202 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R4252 += 1 };
  s1 -> s1 [87, 65535] { R4252 += 1, R4202 += 1 };
  s2 -> s1 [0, 65] { R4252 += 1, R4202 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R4252 += 1, R4201 += 1, R4202 += 1 };
  s2 -> s1 [87, 65535] { R4252 += 1, R4202 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_11 {
  init s0;
  s0 -> s0 [0, 65535] { R4253 += 1, R4254 += 1 };
  s0 -> s1 [0, 65535] { R4254 += 1, R4203 += 1, R4204 += 1 };
  s0 -> s2 [0, 65535] { R4254 += 1, R4204 += 1, R1770 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R4254 += 1, R4203 += 1, R4204 += 1 };
  s1 -> s2 [0, 65535] { R4254 += 1, R4204 += 1, R1770 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R4254 += 1 };
  s2 -> s2 [0, 65535] { R4254 += 1, R4204 += 1, R1770 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4254 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 86] { R4256 += 1, R4206 += 1 };
  s0 -> s0 [0, 65535] { R4255 += 1, R4256 += 1 };
  s0 -> s2 [0, 65535] { R4256 += 1, R4205 += 1, R4206 += 1 };
  s0 -> s1 [88, 65535] { R4256 += 1, R4206 += 1 };
  s1 -> s1 [0, 86] { R4256 += 1, R4206 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R4256 += 1 };
  s1 -> s1 [88, 65535] { R4256 += 1, R4206 += 1 };
  s2 -> s1 [0, 86] { R4256 += 1, R4206 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R4256 += 1, R4205 += 1, R4206 += 1 };
  s2 -> s1 [88, 65535] { R4256 += 1, R4206 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 86] { R4258 += 1, R4208 += 1, R3514 += 1 };
  s0 -> s0 [0, 65535] { R4257 += 1, R4258 += 1 };
  s0 -> s2 [0, 65535] { R4258 += 1, R4207 += 1, R4208 += 1 };
  s0 -> s3 [0, 65535] { R4258 += 1, R4208 += 1, R3513 += 1, R3514 += 1 };
  s0 -> s1 [88, 65535] { R4258 += 1, R4208 += 1, R3514 += 1 };
  s1 -> s1 [0, 86] { R4258 += 1, R4208 += 1, R3514 += 1 };
  s1 -> s1 [0, 65535] { R4258 += 1, R4208 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R4258 += 1 };
  s1 -> s1 [88, 65535] { R4258 += 1, R4208 += 1, R3514 += 1 };
  s2 -> s1 [0, 86] { R4258 += 1, R4208 += 1, R3514 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R4258 += 1, R4207 += 1, R4208 += 1 };
  s2 -> s3 [0, 65535] { R4258 += 1, R4208 += 1, R3513 += 1, R3514 += 1 };
  s2 -> s1 [88, 65535] { R4258 += 1, R4208 += 1, R3514 += 1 };
  s3 -> s1 [0, 86] { R4258 += 1, R4208 += 1, R3514 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R4258 += 1, R4208 += 1, R3513 += 1, R3514 += 1 };
  s3 -> s5 [0, 65535] { R4258 += 1 };
  s3 -> s1 [88, 65535] { R4258 += 1, R4208 += 1, R3514 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R4258 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R4260 += 1, R4209 += 1, R4210 += 1 };
  s0 -> s0 [0, 65535] { R4259 += 1, R4260 += 1 };
  s0 -> s2 [0, 65535] { R4260 += 1, R4210 += 1 };
  s1 -> s1 [0, 65535] { R4260 += 1, R4209 += 1, R4210 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R4260 += 1, R4210 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R4260 += 1 };
  s2 -> s2 [0, 65535] { R4260 += 1, R4210 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4260 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R4262 += 1, R4211 += 1, R4212 += 1 };
  s0 -> s2 [0, 65535] { R4262 += 1, R4212 += 1 };
  s0 -> s0 [0, 65535] { R4261 += 1, R4262 += 1 };
  s1 -> s1 [0, 65535] { R4262 += 1, R4211 += 1, R4212 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R4262 += 1, R4212 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R4262 += 1, R4212 += 1 };
  s2 -> s4 [0, 65535] { R4262 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4262 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s0 [0, 65535] { R4263 += 1, R4264 += 1 };
  s0 -> s1 [0, 65535] { R4264 += 1, R4213 += 1, R4214 += 1 };
  s0 -> s2 [0, 65535] { R4264 += 1, R4214 += 1, R4195 += 1, R4196 += 1 };
  s0 -> s3 [0, 65535] { R4264 += 1, R4214 += 1 };
  s1 -> s1 [0, 65535] { R4264 += 1, R4213 += 1, R4214 += 1 };
  s1 -> s2 [0, 65535] { R4264 += 1, R4214 += 1, R4195 += 1, R4196 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s3 [0, 65535] { R4264 += 1, R4214 += 1 };
  s2 -> s2 [0, 65535] { R4264 += 1, R4214 += 1, R4195 += 1, R4196 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R4264 += 1 };
  s2 -> s3 [0, 65535] { R4264 += 1, R4214 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R4264 += 1 };
  s3 -> s3 [0, 65535] { R4264 += 1, R4214 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R4264 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 65535] { R4266 += 1, R4215 += 1, R4216 += 1 };
  s0 -> s0 [0, 65535] { R4265 += 1, R4266 += 1 };
  s0 -> s2 [0, 65535] { R4266 += 1, R4216 += 1 };
  s1 -> s1 [0, 65535] { R4266 += 1, R4215 += 1, R4216 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R4266 += 1, R4216 += 1 };
  s2 -> s3 [0, 65535] { R4266 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R4266 += 1, R4216 += 1 };
  s3 -> s3 [0, 65535] { R4266 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R4268 += 1, R4218 += 1, R14 += 1 };
  s0 -> s0 [0, 65535] { R4267 += 1, R4268 += 1 };
  s0 -> s2 [0, 65535] { R4268 += 1, R4217 += 1, R4218 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R4268 += 1, R4218 += 1, R14 += 1 };
  s1 -> s4 [0, 65535] { R4268 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R4268 += 1, R4218 += 1, R14 += 1 };
  s2 -> s2 [0, 65535] { R4268 += 1, R4217 += 1, R4218 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4268 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 64] { R4270 += 1, R4220 += 1 };
  s0 -> s2 [0, 65535] { R4270 += 1, R4219 += 1, R4220 += 1 };
  s0 -> s0 [0, 65535] { R4269 += 1, R4270 += 1 };
  s0 -> s3 [65, 65] { R4270 += 1, R4220 += 1 };
  s0 -> s4 [65, 65] { R4270 += 1, R4220 += 1 };
  s0 -> s5 [87, 87] { R4270 += 1, R4220 += 1 };
  s0 -> s1 [88, 65535] { R4270 += 1, R4220 += 1 };
  s1 -> s1 [0, 64] { R4270 += 1, R4220 += 1 };
  s1 -> s3 [65, 65] { R4270 += 1, R4220 += 1 };
  s1 -> s4 [65, 65] { R4270 += 1, R4220 += 1 };
  s1 -> s5 [87, 87] { R4270 += 1, R4220 += 1 };
  s1 -> s1 [88, 65535] { R4270 += 1, R4220 += 1 };
  s2 -> s1 [0, 64] { R4270 += 1, R4220 += 1 };
  s2 -> s2 [0, 65535] { R4270 += 1, R4219 += 1, R4220 += 1 };
  s2 -> s3 [65, 65] { R4270 += 1, R4220 += 1 };
  s2 -> s4 [65, 65] { R4270 += 1, R4220 += 1 };
  s2 -> s5 [87, 87] { R4270 += 1, R4220 += 1 };
  s2 -> s1 [88, 65535] { R4270 += 1, R4220 += 1 };
  s3 -> s3 [0, 65] { R4270 += 1, R4220 += 1 };
  s3 -> s8 [87, 87] { R4270 += 1, R4220 += 1 };
  s3 -> s3 [88, 65535] { R4270 += 1, R4220 += 1 };
  s5 -> s5 [0, 64] { R4270 += 1, R4220 += 1 };
  s5 -> s5 [0, 65535] { R4270 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [65, 65] { R4270 += 1, R4220 += 1 };
  s5 -> s8 [65, 65] { R4270 += 1, R4220 += 1 };
  s5 -> s5 [87, 65535] { R4270 += 1, R4220 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R4270 += 1 };
  s8 -> s8 [0, 65] { R4270 += 1, R4220 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R4270 += 1 };
  s8 -> s8 [87, 65535] { R4270 += 1, R4220 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 64] { R4272 += 1, R4222 += 1, R1769 += 1 };
  s0 -> s0 [0, 65535] { R4271 += 1, R4272 += 1 };
  s0 -> s2 [0, 65535] { R4272 += 1, R4221 += 1, R4222 += 1 };
  s0 -> s3 [65, 65] { R4272 += 1, R4222 += 1, R1769 += 1 };
  s0 -> s4 [65, 65] { R4272 += 1, R4222 += 1, R1769 += 1 };
  s0 -> s1 [66, 65535] { R4272 += 1, R4222 += 1, R1769 += 1 };
  s1 -> s1 [0, 64] { R4272 += 1, R4222 += 1, R1769 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R4272 += 1 };
  s1 -> s3 [65, 65] { R4272 += 1, R4222 += 1, R1769 += 1 };
  s1 -> s4 [65, 65] { R4272 += 1, R4222 += 1, R1769 += 1 };
  s1 -> s1 [66, 65535] { R4272 += 1, R4222 += 1, R1769 += 1 };
  s2 -> s1 [0, 64] { R4272 += 1, R4222 += 1, R1769 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R4272 += 1, R4221 += 1, R4222 += 1 };
  s2 -> s3 [65, 65] { R4272 += 1, R4222 += 1, R1769 += 1 };
  s2 -> s4 [65, 65] { R4272 += 1, R4222 += 1, R1769 += 1 };
  s2 -> s1 [66, 65535] { R4272 += 1, R4222 += 1, R1769 += 1 };
  s3 -> s3 [0, 65535] { R4272 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R4272 += 1, R4222 += 1, R1769 += 1 };
  s4 -> s6 [0, 65535] { R4272 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R4272 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 64] { R4274 += 1, R4224 += 1, R3509 += 1 };
  s0 -> s2 [0, 64] { R4274 += 1, R4224 += 1 };
  s0 -> s3 [0, 65535] { R4274 += 1, R4223 += 1, R4224 += 1 };
  s0 -> s0 [0, 65535] { R4273 += 1, R4274 += 1 };
  s0 -> s4 [65, 65] { R4274 += 1, R4224 += 1 };
  s0 -> s5 [65, 65] { R4274 += 1, R4224 += 1, R3509 += 1 };
  s0 -> s6 [65, 65] { R4274 += 1, R4224 += 1 };
  s0 -> s7 [65, 65] { R4274 += 1, R4224 += 1, R3509 += 1 };
  s0 -> s2 [66, 86] { R4274 += 1, R4224 += 1 };
  s0 -> s1 [66, 65535] { R4274 += 1, R4224 += 1, R3509 += 1 };
  s0 -> s2 [88, 65535] { R4274 += 1, R4224 += 1 };
  s1 -> s1 [0, 64] { R4274 += 1, R4224 += 1, R3509 += 1 };
  s1 -> s2 [0, 64] { R4274 += 1, R4224 += 1 };
  s1 -> s4 [65, 65] { R4274 += 1, R4224 += 1 };
  s1 -> s5 [65, 65] { R4274 += 1, R4224 += 1, R3509 += 1 };
  s1 -> s6 [65, 65] { R4274 += 1, R4224 += 1 };
  s1 -> s7 [65, 65] { R4274 += 1, R4224 += 1, R3509 += 1 };
  s1 -> s2 [66, 86] { R4274 += 1, R4224 += 1 };
  s1 -> s1 [66, 65535] { R4274 += 1, R4224 += 1, R3509 += 1 };
  s1 -> s2 [88, 65535] { R4274 += 1, R4224 += 1 };
  s2 -> s2 [0, 64] { R4274 += 1, R4224 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R4274 += 1 };
  s2 -> s4 [65, 65] { R4274 += 1, R4224 += 1 };
  s2 -> s6 [65, 65] { R4274 += 1, R4224 += 1 };
  s2 -> s2 [66, 86] { R4274 += 1, R4224 += 1 };
  s2 -> s2 [88, 65535] { R4274 += 1, R4224 += 1 };
  s3 -> s1 [0, 64] { R4274 += 1, R4224 += 1, R3509 += 1 };
  s3 -> s2 [0, 64] { R4274 += 1, R4224 += 1 };
  s3 -> s3 [0, 65535] { R4274 += 1, R4223 += 1, R4224 += 1 };
  s3 -> s4 [65, 65] { R4274 += 1, R4224 += 1 };
  s3 -> s5 [65, 65] { R4274 += 1, R4224 += 1, R3509 += 1 };
  s3 -> s6 [65, 65] { R4274 += 1, R4224 += 1 };
  s3 -> s7 [65, 65] { R4274 += 1, R4224 += 1, R3509 += 1 };
  s3 -> s2 [66, 86] { R4274 += 1, R4224 += 1 };
  s3 -> s1 [66, 65535] { R4274 += 1, R4224 += 1, R3509 += 1 };
  s3 -> s2 [88, 65535] { R4274 += 1, R4224 += 1 };
  s4 -> s4 [0, 86] { R4274 += 1, R4224 += 1 };
  s4 -> s4 [0, 65535] { R4274 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s4 [88, 65535] { R4274 += 1, R4224 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R4274 += 1 };
  s7 -> s4 [0, 86] { R4274 += 1, R4224 += 1 };
  s7 -> s7 [0, 65535] { R4274 += 1, R4224 += 1, R3509 += 1 };
  s7 -> s4 [88, 65535] { R4274 += 1, R4224 += 1 };
  s8 -> s8 [0, 65535];
  accepting s2, s4, s6, s8;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 64] { R4276 += 1, R4226 += 1, R3511 += 1, R3512 += 1 };
  s0 -> s2 [0, 65535] { R4276 += 1, R4225 += 1, R4226 += 1 };
  s0 -> s0 [0, 65535] { R4275 += 1, R4276 += 1 };
  s0 -> s3 [65, 65] { R4276 += 1, R4226 += 1, R3511 += 1, R3512 += 1 };
  s0 -> s4 [65, 65] { R4276 += 1, R4226 += 1, R3511 += 1, R3512 += 1 };
  s0 -> s1 [66, 65535] { R4276 += 1, R4226 += 1, R3511 += 1, R3512 += 1 };
  s1 -> s1 [0, 64] { R4276 += 1, R4226 += 1, R3511 += 1, R3512 += 1 };
  s1 -> s1 [0, 65535] { R4276 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R4276 += 1, R4226 += 1, R3511 += 1, R3512 += 1 };
  s1 -> s4 [65, 65] { R4276 += 1, R4226 += 1, R3511 += 1, R3512 += 1 };
  s1 -> s1 [66, 65535] { R4276 += 1, R4226 += 1, R3511 += 1, R3512 += 1 };
  s2 -> s1 [0, 64] { R4276 += 1, R4226 += 1, R3511 += 1, R3512 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R4276 += 1, R4225 += 1, R4226 += 1 };
  s2 -> s3 [65, 65] { R4276 += 1, R4226 += 1, R3511 += 1, R3512 += 1 };
  s2 -> s4 [65, 65] { R4276 += 1, R4226 += 1, R3511 += 1, R3512 += 1 };
  s2 -> s1 [66, 65535] { R4276 += 1, R4226 += 1, R3511 += 1, R3512 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R4276 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R4276 += 1 };
  s4 -> s4 [0, 65535] { R4276 += 1, R4226 += 1, R3511 += 1, R3512 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R4276 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 64] { R4278 += 1, R4228 += 1, R4091 += 1, R4092 += 1 };
  s0 -> s2 [0, 64] { R4278 += 1, R4228 += 1, R4092 += 1, R4093 += 1 };
  s0 -> s0 [0, 65535] { R4277 += 1, R4278 += 1 };
  s0 -> s3 [0, 65535] { R4278 += 1, R4227 += 1, R4228 += 1 };
  s0 -> s4 [65, 65] { R4278 += 1, R4228 += 1, R4092 += 1, R4093 += 1 };
  s0 -> s5 [65, 65] { R4278 += 1, R4228 += 1, R4091 += 1, R4092 += 1 };
  s0 -> s6 [65, 65] { R4278 += 1, R4228 += 1, R4092 += 1, R4093 += 1 };
  s0 -> s7 [65, 65] { R4278 += 1, R4228 += 1, R4091 += 1, R4092 += 1 };
  s0 -> s1 [66, 65535] { R4278 += 1, R4228 += 1, R4091 += 1, R4092 += 1 };
  s0 -> s2 [66, 65535] { R4278 += 1, R4228 += 1, R4092 += 1, R4093 += 1 };
  s1 -> s1 [0, 64] { R4278 += 1, R4228 += 1, R4091 += 1, R4092 += 1 };
  s1 -> s2 [0, 64] { R4278 += 1, R4228 += 1, R4092 += 1, R4093 += 1 };
  s1 -> s4 [65, 65] { R4278 += 1, R4228 += 1, R4092 += 1, R4093 += 1 };
  s1 -> s5 [65, 65] { R4278 += 1, R4228 += 1, R4091 += 1, R4092 += 1 };
  s1 -> s6 [65, 65] { R4278 += 1, R4228 += 1, R4092 += 1, R4093 += 1 };
  s1 -> s7 [65, 65] { R4278 += 1, R4228 += 1, R4091 += 1, R4092 += 1 };
  s1 -> s1 [66, 65535] { R4278 += 1, R4228 += 1, R4091 += 1, R4092 += 1 };
  s1 -> s2 [66, 65535] { R4278 += 1, R4228 += 1, R4092 += 1, R4093 += 1 };
  s2 -> s2 [0, 64] { R4278 += 1, R4228 += 1, R4092 += 1, R4093 += 1 };
  s2 -> s11 [0, 64] { R4278 += 1, R4228 += 1 };
  s2 -> s4 [65, 65] { R4278 += 1, R4228 += 1, R4092 += 1, R4093 += 1 };
  s2 -> s6 [65, 65] { R4278 += 1, R4228 += 1, R4092 += 1, R4093 += 1 };
  s2 -> s12 [65, 65] { R4278 += 1, R4228 += 1 };
  s2 -> s8 [65, 65] { R4278 += 1, R4228 += 1 };
  s2 -> s2 [66, 65535] { R4278 += 1, R4228 += 1, R4092 += 1, R4093 += 1 };
  s2 -> s11 [66, 65535] { R4278 += 1, R4228 += 1 };
  s3 -> s1 [0, 64] { R4278 += 1, R4228 += 1, R4091 += 1, R4092 += 1 };
  s3 -> s2 [0, 64] { R4278 += 1, R4228 += 1, R4092 += 1, R4093 += 1 };
  s3 -> s3 [0, 65535] { R4278 += 1, R4227 += 1, R4228 += 1 };
  s3 -> s4 [65, 65] { R4278 += 1, R4228 += 1, R4092 += 1, R4093 += 1 };
  s3 -> s5 [65, 65] { R4278 += 1, R4228 += 1, R4091 += 1, R4092 += 1 };
  s3 -> s6 [65, 65] { R4278 += 1, R4228 += 1, R4092 += 1, R4093 += 1 };
  s3 -> s7 [65, 65] { R4278 += 1, R4228 += 1, R4091 += 1, R4092 += 1 };
  s3 -> s1 [66, 65535] { R4278 += 1, R4228 += 1, R4091 += 1, R4092 += 1 };
  s3 -> s2 [66, 65535] { R4278 += 1, R4228 += 1, R4092 += 1, R4093 += 1 };
  s6 -> s6 [0, 65535] { R4278 += 1, R4228 += 1, R4092 += 1, R4093 += 1 };
  s6 -> s8 [0, 65535] { R4278 += 1, R4228 += 1 };
  s7 -> s6 [0, 65535] { R4278 += 1, R4228 += 1, R4092 += 1, R4093 += 1 };
  s7 -> s7 [0, 65535] { R4278 += 1, R4228 += 1, R4091 += 1, R4092 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [0, 65535] { R4278 += 1 };
  s8 -> s8 [0, 65535] { R4278 += 1, R4228 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R4278 += 1 };
  s11 -> s11 [0, 64] { R4278 += 1, R4228 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R4278 += 1 };
  s11 -> s12 [65, 65] { R4278 += 1, R4228 += 1 };
  s11 -> s8 [65, 65] { R4278 += 1, R4228 += 1 };
  s11 -> s11 [66, 65535] { R4278 += 1, R4228 += 1 };
  s12 -> s12 [0, 65535] { R4278 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 64] { R4280 += 1, R4230 += 1 };
  s0 -> s0 [0, 65535] { R4279 += 1, R4280 += 1 };
  s0 -> s2 [0, 65535] { R4280 += 1, R4229 += 1, R4230 += 1 };
  s0 -> s3 [65, 65] { R4280 += 1, R4230 += 1 };
  s0 -> s4 [65, 65] { R4280 += 1, R4230 += 1 };
  s0 -> s1 [66, 65535] { R4280 += 1, R4230 += 1 };
  s1 -> s1 [0, 64] { R4280 += 1, R4230 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R4280 += 1 };
  s1 -> s3 [65, 65] { R4280 += 1, R4230 += 1 };
  s1 -> s4 [65, 65] { R4280 += 1, R4230 += 1 };
  s1 -> s1 [66, 65535] { R4280 += 1, R4230 += 1 };
  s2 -> s1 [0, 64] { R4280 += 1, R4230 += 1 };
  s2 -> s2 [0, 65535] { R4280 += 1, R4229 += 1, R4230 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R4280 += 1, R4230 += 1 };
  s2 -> s4 [65, 65] { R4280 += 1, R4230 += 1 };
  s2 -> s1 [66, 65535] { R4280 += 1, R4230 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R4280 += 1, R4230 += 1 };
  s3 -> s6 [0, 65535] { R4280 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R4280 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R4280 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 64] { R4282 += 1, R4232 += 1, R4191 += 1, R4192 += 1 };
  s0 -> s2 [0, 64] { R4282 += 1, R4232 += 1, R4192 += 1, R4193 += 1 };
  s0 -> s0 [0, 65535] { R4281 += 1, R4282 += 1 };
  s0 -> s3 [0, 65535] { R4282 += 1, R4231 += 1, R4232 += 1 };
  s0 -> s4 [65, 65] { R4282 += 1, R4232 += 1, R4191 += 1, R4192 += 1 };
  s0 -> s5 [65, 65] { R4282 += 1, R4232 += 1, R4192 += 1, R4193 += 1 };
  s0 -> s6 [65, 65] { R4282 += 1, R4232 += 1, R4191 += 1, R4192 += 1 };
  s0 -> s7 [65, 65] { R4282 += 1, R4232 += 1, R4192 += 1, R4193 += 1 };
  s0 -> s1 [66, 65535] { R4282 += 1, R4232 += 1, R4191 += 1, R4192 += 1 };
  s0 -> s2 [66, 65535] { R4282 += 1, R4232 += 1, R4192 += 1, R4193 += 1 };
  s1 -> s1 [0, 64] { R4282 += 1, R4232 += 1, R4191 += 1, R4192 += 1 };
  s1 -> s2 [0, 64] { R4282 += 1, R4232 += 1, R4192 += 1, R4193 += 1 };
  s1 -> s4 [65, 65] { R4282 += 1, R4232 += 1, R4191 += 1, R4192 += 1 };
  s1 -> s5 [65, 65] { R4282 += 1, R4232 += 1, R4192 += 1, R4193 += 1 };
  s1 -> s6 [65, 65] { R4282 += 1, R4232 += 1, R4191 += 1, R4192 += 1 };
  s1 -> s7 [65, 65] { R4282 += 1, R4232 += 1, R4192 += 1, R4193 += 1 };
  s1 -> s1 [66, 65535] { R4282 += 1, R4232 += 1, R4191 += 1, R4192 += 1 };
  s1 -> s2 [66, 65535] { R4282 += 1, R4232 += 1, R4192 += 1, R4193 += 1 };
  s2 -> s2 [0, 64] { R4282 += 1, R4232 += 1, R4192 += 1, R4193 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R4282 += 1 };
  s2 -> s5 [65, 65] { R4282 += 1, R4232 += 1, R4192 += 1, R4193 += 1 };
  s2 -> s7 [65, 65] { R4282 += 1, R4232 += 1, R4192 += 1, R4193 += 1 };
  s2 -> s2 [66, 65535] { R4282 += 1, R4232 += 1, R4192 += 1, R4193 += 1 };
  s3 -> s1 [0, 64] { R4282 += 1, R4232 += 1, R4191 += 1, R4192 += 1 };
  s3 -> s2 [0, 64] { R4282 += 1, R4232 += 1, R4192 += 1, R4193 += 1 };
  s3 -> s3 [0, 65535] { R4282 += 1, R4231 += 1, R4232 += 1 };
  s3 -> s4 [65, 65] { R4282 += 1, R4232 += 1, R4191 += 1, R4192 += 1 };
  s3 -> s5 [65, 65] { R4282 += 1, R4232 += 1, R4192 += 1, R4193 += 1 };
  s3 -> s6 [65, 65] { R4282 += 1, R4232 += 1, R4191 += 1, R4192 += 1 };
  s3 -> s7 [65, 65] { R4282 += 1, R4232 += 1, R4192 += 1, R4193 += 1 };
  s3 -> s1 [66, 65535] { R4282 += 1, R4232 += 1, R4191 += 1, R4192 += 1 };
  s3 -> s2 [66, 65535] { R4282 += 1, R4232 += 1, R4192 += 1, R4193 += 1 };
  s5 -> s5 [0, 65535] { R4282 += 1 };
  s5 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R4282 += 1, R4232 += 1, R4191 += 1, R4192 += 1 };
  s6 -> s7 [0, 65535] { R4282 += 1, R4232 += 1, R4192 += 1, R4193 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s9 [0, 65535] { R4282 += 1 };
  s7 -> s7 [0, 65535] { R4282 += 1, R4232 += 1, R4192 += 1, R4193 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R4282 += 1 };
  accepting s8, s5, s2, s9, s7;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 64] { R4284 += 1, R4234 += 1 };
  s0 -> s2 [0, 65535] { R4284 += 1, R4233 += 1, R4234 += 1 };
  s0 -> s0 [0, 65535] { R4283 += 1, R4284 += 1 };
  s0 -> s3 [65, 65] { R4284 += 1, R4234 += 1 };
  s0 -> s4 [65, 65] { R4284 += 1, R4234 += 1 };
  s0 -> s1 [66, 65535] { R4284 += 1, R4234 += 1 };
  s1 -> s1 [0, 64] { R4284 += 1, R4234 += 1 };
  s1 -> s1 [0, 65535] { R4284 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R4284 += 1, R4234 += 1 };
  s1 -> s4 [65, 65] { R4284 += 1, R4234 += 1 };
  s1 -> s1 [66, 65535] { R4284 += 1, R4234 += 1 };
  s2 -> s1 [0, 64] { R4284 += 1, R4234 += 1 };
  s2 -> s2 [0, 65535] { R4284 += 1, R4233 += 1, R4234 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R4284 += 1, R4234 += 1 };
  s2 -> s4 [65, 65] { R4284 += 1, R4234 += 1 };
  s2 -> s1 [66, 65535] { R4284 += 1, R4234 += 1 };
  s3 -> s6 [0, 65535] { R4284 += 1 };
  s3 -> s3 [0, 65535] { R4284 += 1, R4234 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R4284 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R4284 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R1 = R4216 && R2 = R4284 && R15 = 0 && R16 = 1 && R17 = 0 && R18 = 1 && R1770 + R1769 = 0 && R4197 = 0 && R4198 = R4216 && R4199 = 0 && R4200 = R4216 && R4201 = 0 && R4202 = R4216 && R4203 = 0 && R4204 = R4216 && R4205 = 0 && R4206 = R4216 && R4207 = 0 && R4208 = R4216 && R4209 = 0 && R4210 = R4216 && R4211 = 0 && R4212 = R4216 && R4213 = 0 && R4214 = R4216 && R4215 = 0 && R4219 = 0 && R4220 = 0 && R4223 = 0 && R4224 = 0 && R4227 = 0 && R4228 = 0 && R4231 = 0 && R4232 = 0 && R4235 = 10 && R4236 = R4284 && R4237 = 10 && R4238 = R4284 && R4239 = 10 && R4240 = R4284 && R4241 = 10 && R4242 = R4284 && R4243 = 10 && R4244 = R4284 && R4245 = 10 && R4246 = R4284 && R4247 = 10 && R4248 = R4284 && R4249 = 10 && R4250 = R4284 && R4251 = 10 && R4252 = R4284 && R4253 = 10 && R4254 = R4284 && R4255 = 10 && R4256 = R4284 && R4257 = 10 && R4258 = R4284 && R4259 = 10 && R4260 = R4284 && R4261 = 10 && R4262 = R4284 && R4263 = 10 && R4264 = R4284 && R4265 = 10 && R4266 = R4284 && R4267 = 10 && R4268 = R4284 && R4269 = 10 && R4270 = R4284 && R4271 = 10 && R4272 = R4284 && R4273 = 10 && R4274 = R4284 && R4275 = 10 && R4276 = R4284 && R4277 = 10 && R4278 = R4284 && R4279 = 10 && R4280 = R4284 && R4281 = 10 && R4282 = R4284 && R4283 = 10 && R7 < 1 && R8 < 1 && R3510 + R3509 < 1 && 0 < R4216 && 9 < R4284 && (R14 = 0 || (R4217 = 0 && R4218 = 0)) && (R14 = 0 || (R4221 = 0 && R4222 = 0)) && (R14 = 0 || (R4225 = 0 && R4226 = 0)) && (R14 = 0 || (R4229 = 0 && R4230 = 0)) && (R14 = 0 || (R4233 = 0 && R4234 = 0)) && (R4096 + R4093 = 0 || (R3513 + R3511 = 0 && R3514 + R3512 = 0)) && (R4096 + R4093 = 0 || (R4094 + R4091 = 0 && R4095 + R4092 = 0)) && (R4196 + R4193 = 0 || (R4194 + R4191 = 0 && R4195 + R4192 = 0));
// End of Parikh automata intersection problem
