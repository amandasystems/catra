// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R12, R14, R15, R16, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R256, R257, R258, R259, R26, R27, R3, R32, R33, R332, R333, R334, R335, R336, R337, R338, R339, R34, R340, R341, R342, R343, R344, R345, R346, R347, R348, R349, R35, R350, R351, R352, R353, R354, R355, R356, R357, R358, R359, R360, R361, R362, R363, R364, R365, R366, R367, R368, R369, R370, R371, R372, R373, R374, R375, R376, R377, R378, R379, R380, R381, R382, R383, R384, R385, R386, R387, R388, R389, R390, R391, R392, R393, R394, R395, R396, R397, R398, R399, R4, R400, R401, R402, R403, R5, R9;
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s1 [9, 9] { R25 += 1 };
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 65535] { R27 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s1 -> s1 [0, 65535] { R27 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 64] { R365 += 1 };
  s0 -> s0 [0, 65535] { R364 += 1, R365 += 1 };
  s0 -> s2 [65, 65] { R365 += 1 };
  s0 -> s1 [66, 65535] { R365 += 1 };
  s1 -> s1 [0, 64] { R365 += 1 };
  s1 -> s2 [65, 65] { R365 += 1 };
  s1 -> s1 [66, 65535] { R365 += 1 };
  s2 -> s2 [0, 65535] { R365 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 65535] { R367 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R366 += 1, R367 += 1 };
  s1 -> s1 [0, 65535] { R367 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 64] { R369 += 1 };
  s0 -> s2 [0, 65535] { R369 += 1, R9 += 1 };
  s0 -> s0 [0, 65535] { R368 += 1, R369 += 1 };
  s0 -> s3 [65, 65] { R369 += 1 };
  s0 -> s1 [66, 65535] { R369 += 1 };
  s1 -> s1 [0, 64] { R369 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R369 += 1 };
  s1 -> s1 [66, 65535] { R369 += 1 };
  s2 -> s1 [0, 64] { R369 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R369 += 1, R9 += 1 };
  s2 -> s3 [65, 65] { R369 += 1 };
  s2 -> s1 [66, 65535] { R369 += 1 };
  s3 -> s3 [0, 65535] { R369 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 8] { R371 += 1, R17 += 1 };
  s0 -> s0 [0, 65535] { R370 += 1, R371 += 1 };
  s0 -> s2 [0, 65535] { R371 += 1, R16 += 1, R17 += 1 };
  s0 -> s3 [9, 13] { R371 += 1, R17 += 1 };
  s0 -> s1 [14, 31] { R371 += 1, R17 += 1 };
  s0 -> s3 [32, 32] { R371 += 1, R17 += 1 };
  s0 -> s1 [33, 65535] { R371 += 1, R17 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R371 += 1, R17 += 1 };
  s1 -> s5 [0, 65535] { R371 += 1 };
  s2 -> s1 [0, 8] { R371 += 1, R17 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R371 += 1, R16 += 1, R17 += 1 };
  s2 -> s3 [9, 13] { R371 += 1, R17 += 1 };
  s2 -> s1 [14, 31] { R371 += 1, R17 += 1 };
  s2 -> s3 [32, 32] { R371 += 1, R17 += 1 };
  s2 -> s1 [33, 65535] { R371 += 1, R17 += 1 };
  s3 -> s1 [0, 65535] { R371 += 1, R17 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R371 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 65535] { R373 += 1, R19 += 1, R3 += 1 };
  s0 -> s2 [0, 65535] { R373 += 1, R18 += 1, R19 += 1 };
  s0 -> s0 [0, 65535] { R372 += 1, R373 += 1 };
  s1 -> s1 [0, 65535] { R373 += 1, R19 += 1, R3 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R373 += 1 };
  s2 -> s1 [0, 65535] { R373 += 1, R19 += 1, R3 += 1 };
  s2 -> s2 [0, 65535] { R373 += 1, R18 += 1, R19 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R373 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 8] { R375 += 1, R21 += 1 };
  s0 -> s0 [0, 65535] { R374 += 1, R375 += 1 };
  s0 -> s2 [0, 65535] { R375 += 1, R20 += 1, R21 += 1 };
  s0 -> s3 [9, 13] { R375 += 1, R21 += 1 };
  s0 -> s1 [14, 31] { R375 += 1, R21 += 1 };
  s0 -> s3 [32, 32] { R375 += 1, R21 += 1 };
  s0 -> s1 [33, 65535] { R375 += 1, R21 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R375 += 1, R21 += 1 };
  s1 -> s5 [0, 65535] { R375 += 1 };
  s2 -> s1 [0, 8] { R375 += 1, R21 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R375 += 1, R20 += 1, R21 += 1 };
  s2 -> s3 [9, 13] { R375 += 1, R21 += 1 };
  s2 -> s1 [14, 31] { R375 += 1, R21 += 1 };
  s2 -> s3 [32, 32] { R375 += 1, R21 += 1 };
  s2 -> s1 [33, 65535] { R375 += 1, R21 += 1 };
  s3 -> s1 [0, 65535] { R375 += 1, R21 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R375 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s0 [0, 65535] { R376 += 1, R377 += 1 };
  s0 -> s1 [0, 65535] { R377 += 1, R23 += 1, R4 += 1 };
  s0 -> s2 [0, 65535] { R377 += 1, R22 += 1, R23 += 1 };
  s1 -> s4 [0, 65535] { R377 += 1 };
  s1 -> s1 [0, 65535] { R377 += 1, R23 += 1, R4 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R377 += 1, R23 += 1, R4 += 1 };
  s2 -> s2 [0, 65535] { R377 += 1, R22 += 1, R23 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R377 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 64] { R379 += 1, R339 += 1 };
  s0 -> s2 [0, 65535] { R379 += 1, R338 += 1, R339 += 1 };
  s0 -> s0 [0, 65535] { R378 += 1, R379 += 1 };
  s0 -> s1 [66, 65535] { R379 += 1, R339 += 1 };
  s1 -> s1 [0, 64] { R379 += 1, R339 += 1 };
  s1 -> s1 [0, 65535] { R379 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [66, 65535] { R379 += 1, R339 += 1 };
  s2 -> s1 [0, 64] { R379 += 1, R339 += 1 };
  s2 -> s2 [0, 65535] { R379 += 1, R338 += 1, R339 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [66, 65535] { R379 += 1, R339 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_13 {
  init s0;
  s0 -> s0 [0, 65535] { R380 += 1, R381 += 1 };
  s0 -> s1 [0, 65535] { R381 += 1, R341 += 1, R14 += 1 };
  s0 -> s2 [0, 65535] { R381 += 1, R340 += 1, R341 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R381 += 1, R341 += 1, R14 += 1 };
  s1 -> s4 [0, 65535] { R381 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R381 += 1, R341 += 1, R14 += 1 };
  s2 -> s2 [0, 65535] { R381 += 1, R340 += 1, R341 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R381 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 65] { R383 += 1, R343 += 1 };
  s0 -> s2 [0, 65535] { R383 += 1, R342 += 1, R343 += 1 };
  s0 -> s0 [0, 65535] { R382 += 1, R383 += 1 };
  s0 -> s3 [66, 66] { R383 += 1, R343 += 1 };
  s0 -> s1 [67, 65535] { R383 += 1, R343 += 1 };
  s1 -> s1 [0, 65] { R383 += 1, R343 += 1 };
  s1 -> s3 [66, 66] { R383 += 1, R343 += 1 };
  s1 -> s1 [67, 65535] { R383 += 1, R343 += 1 };
  s2 -> s1 [0, 65] { R383 += 1, R343 += 1 };
  s2 -> s2 [0, 65535] { R383 += 1, R342 += 1, R343 += 1 };
  s2 -> s3 [66, 66] { R383 += 1, R343 += 1 };
  s2 -> s1 [67, 65535] { R383 += 1, R343 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R383 += 1, R343 += 1 };
  s3 -> s5 [0, 65535] { R383 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R383 += 1 };
  accepting s3, s4, s5;
};
automaton value2_15 {
  init s0;
  s0 -> s0 [0, 65535] { R384 += 1, R385 += 1 };
  s0 -> s1 [0, 65535] { R385 += 1, R344 += 1, R345 += 1 };
  s0 -> s2 [0, 65535] { R385 += 1, R345 += 1, R33 += 1 };
  s1 -> s1 [0, 65535] { R385 += 1, R344 += 1, R345 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R385 += 1, R345 += 1, R33 += 1 };
  s2 -> s3 [0, 65535] { R385 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R385 += 1, R345 += 1, R33 += 1 };
  s3 -> s3 [0, 65535] { R385 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 65] { R387 += 1, R347 += 1 };
  s0 -> s2 [0, 65535] { R387 += 1, R347 += 1, R35 += 1 };
  s0 -> s0 [0, 65535] { R386 += 1, R387 += 1 };
  s0 -> s3 [0, 65535] { R387 += 1, R346 += 1, R347 += 1 };
  s0 -> s1 [67, 65535] { R387 += 1, R347 += 1 };
  s1 -> s1 [0, 65] { R387 += 1, R347 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R387 += 1 };
  s1 -> s1 [67, 65535] { R387 += 1, R347 += 1 };
  s2 -> s1 [0, 65] { R387 += 1, R347 += 1 };
  s2 -> s2 [0, 65535] { R387 += 1, R347 += 1, R35 += 1 };
  s2 -> s5 [0, 65535] { R387 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [67, 65535] { R387 += 1, R347 += 1 };
  s3 -> s1 [0, 65] { R387 += 1, R347 += 1 };
  s3 -> s2 [0, 65535] { R387 += 1, R347 += 1, R35 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R387 += 1, R346 += 1, R347 += 1 };
  s3 -> s1 [67, 65535] { R387 += 1, R347 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R387 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 65] { R389 += 1, R349 += 1, R259 += 1 };
  s0 -> s2 [0, 65535] { R389 += 1, R348 += 1, R349 += 1 };
  s0 -> s0 [0, 65535] { R388 += 1, R389 += 1 };
  s0 -> s3 [66, 66] { R389 += 1, R349 += 1, R259 += 1 };
  s0 -> s1 [67, 65535] { R389 += 1, R349 += 1, R259 += 1 };
  s1 -> s1 [0, 65] { R389 += 1, R349 += 1, R259 += 1 };
  s1 -> s3 [66, 66] { R389 += 1, R349 += 1, R259 += 1 };
  s1 -> s1 [67, 65535] { R389 += 1, R349 += 1, R259 += 1 };
  s2 -> s1 [0, 65] { R389 += 1, R349 += 1, R259 += 1 };
  s2 -> s2 [0, 65535] { R389 += 1, R348 += 1, R349 += 1 };
  s2 -> s3 [66, 66] { R389 += 1, R349 += 1, R259 += 1 };
  s2 -> s1 [67, 65535] { R389 += 1, R349 += 1, R259 += 1 };
  s3 -> s4 [0, 65535] { R389 += 1 };
  s3 -> s3 [0, 65535] { R389 += 1, R349 += 1, R259 += 1 };
  s3 -> s5 [0, 65535] { R389 += 1, R349 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R389 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s4 [0, 65535] { R389 += 1 };
  s5 -> s5 [0, 65535] { R389 += 1, R349 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s6;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R391 += 1, R351 += 1 };
  s0 -> s2 [0, 65535] { R391 += 1, R351 += 1, R336 += 1, R337 += 1 };
  s0 -> s0 [0, 65535] { R390 += 1, R391 += 1 };
  s0 -> s3 [0, 65535] { R391 += 1, R350 += 1, R351 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R391 += 1, R351 += 1 };
  s1 -> s5 [0, 65535] { R391 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R391 += 1, R351 += 1 };
  s2 -> s2 [0, 65535] { R391 += 1, R351 += 1, R336 += 1, R337 += 1 };
  s2 -> s5 [0, 65535] { R391 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R391 += 1, R351 += 1 };
  s3 -> s2 [0, 65535] { R391 += 1, R351 += 1, R336 += 1, R337 += 1 };
  s3 -> s3 [0, 65535] { R391 += 1, R350 += 1, R351 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R391 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_19 {
  init s0;
  s0 -> s0 [0, 65535] { R392 += 1, R393 += 1 };
  s0 -> s1 [0, 65535] { R393 += 1, R353 += 1, R15 += 1 };
  s0 -> s2 [0, 65535] { R393 += 1, R352 += 1, R353 += 1 };
  s1 -> s1 [0, 65535] { R393 += 1, R353 += 1, R15 += 1 };
  s1 -> s4 [0, 65535] { R393 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R393 += 1, R353 += 1, R15 += 1 };
  s2 -> s2 [0, 65535] { R393 += 1, R352 += 1, R353 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R393 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 64] { R395 += 1, R355 += 1 };
  s0 -> s2 [0, 65535] { R395 += 1, R354 += 1, R355 += 1 };
  s0 -> s0 [0, 65535] { R394 += 1, R395 += 1 };
  s0 -> s3 [65, 65] { R395 += 1, R355 += 1 };
  s0 -> s4 [65, 65] { R395 += 1, R355 += 1 };
  s0 -> s1 [67, 65535] { R395 += 1, R355 += 1 };
  s1 -> s1 [0, 64] { R395 += 1, R355 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R395 += 1 };
  s1 -> s3 [65, 65] { R395 += 1, R355 += 1 };
  s1 -> s4 [65, 65] { R395 += 1, R355 += 1 };
  s1 -> s1 [67, 65535] { R395 += 1, R355 += 1 };
  s2 -> s1 [0, 64] { R395 += 1, R355 += 1 };
  s2 -> s2 [0, 65535] { R395 += 1, R354 += 1, R355 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R395 += 1, R355 += 1 };
  s2 -> s4 [65, 65] { R395 += 1, R355 += 1 };
  s2 -> s1 [67, 65535] { R395 += 1, R355 += 1 };
  s3 -> s3 [0, 65535] { R395 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65] { R395 += 1, R355 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R395 += 1 };
  s4 -> s4 [67, 65535] { R395 += 1, R355 += 1 };
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 64] { R397 += 1, R357 += 1, R32 += 1 };
  s0 -> s2 [0, 65535] { R397 += 1, R356 += 1, R357 += 1 };
  s0 -> s0 [0, 65535] { R396 += 1, R397 += 1 };
  s0 -> s3 [65, 65] { R397 += 1, R357 += 1, R32 += 1 };
  s0 -> s4 [65, 65] { R397 += 1, R357 += 1, R32 += 1 };
  s0 -> s1 [66, 65535] { R397 += 1, R357 += 1, R32 += 1 };
  s1 -> s1 [0, 64] { R397 += 1, R357 += 1, R32 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R397 += 1 };
  s1 -> s3 [65, 65] { R397 += 1, R357 += 1, R32 += 1 };
  s1 -> s4 [65, 65] { R397 += 1, R357 += 1, R32 += 1 };
  s1 -> s1 [66, 65535] { R397 += 1, R357 += 1, R32 += 1 };
  s2 -> s1 [0, 64] { R397 += 1, R357 += 1, R32 += 1 };
  s2 -> s2 [0, 65535] { R397 += 1, R356 += 1, R357 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R397 += 1, R357 += 1, R32 += 1 };
  s2 -> s4 [65, 65] { R397 += 1, R357 += 1, R32 += 1 };
  s2 -> s1 [66, 65535] { R397 += 1, R357 += 1, R32 += 1 };
  s3 -> s6 [0, 65535] { R397 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R397 += 1, R357 += 1, R32 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R397 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R397 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 64] { R399 += 1, R359 += 1, R34 += 1 };
  s0 -> s2 [0, 65535] { R399 += 1, R358 += 1, R359 += 1 };
  s0 -> s0 [0, 65535] { R398 += 1, R399 += 1 };
  s0 -> s3 [65, 65] { R399 += 1, R359 += 1, R34 += 1 };
  s0 -> s4 [65, 65] { R399 += 1, R359 += 1, R34 += 1 };
  s0 -> s1 [66, 65535] { R399 += 1, R359 += 1, R34 += 1 };
  s1 -> s1 [0, 64] { R399 += 1, R359 += 1, R34 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R399 += 1 };
  s1 -> s3 [65, 65] { R399 += 1, R359 += 1, R34 += 1 };
  s1 -> s4 [65, 65] { R399 += 1, R359 += 1, R34 += 1 };
  s1 -> s1 [66, 65535] { R399 += 1, R359 += 1, R34 += 1 };
  s2 -> s1 [0, 64] { R399 += 1, R359 += 1, R34 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R399 += 1, R358 += 1, R359 += 1 };
  s2 -> s3 [65, 65] { R399 += 1, R359 += 1, R34 += 1 };
  s2 -> s4 [65, 65] { R399 += 1, R359 += 1, R34 += 1 };
  s2 -> s1 [66, 65535] { R399 += 1, R359 += 1, R34 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R399 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R399 += 1, R359 += 1, R34 += 1 };
  s4 -> s6 [0, 65535] { R399 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R399 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 64] { R401 += 1, R361 += 1, R256 += 1, R257 += 1 };
  s0 -> s2 [0, 64] { R401 += 1, R361 += 1, R257 += 1 };
  s0 -> s0 [0, 65535] { R400 += 1, R401 += 1 };
  s0 -> s3 [0, 65535] { R401 += 1, R360 += 1, R361 += 1 };
  s0 -> s4 [65, 65] { R401 += 1, R361 += 1, R257 += 1 };
  s0 -> s5 [65, 65] { R401 += 1, R361 += 1, R256 += 1, R257 += 1 };
  s0 -> s6 [65, 65] { R401 += 1, R361 += 1, R256 += 1, R257 += 1 };
  s0 -> s7 [65, 65] { R401 += 1, R361 += 1, R257 += 1 };
  s0 -> s1 [66, 65535] { R401 += 1, R361 += 1, R256 += 1, R257 += 1 };
  s0 -> s2 [67, 65535] { R401 += 1, R361 += 1, R257 += 1 };
  s1 -> s1 [0, 64] { R401 += 1, R361 += 1, R256 += 1, R257 += 1 };
  s1 -> s2 [0, 64] { R401 += 1, R361 += 1, R257 += 1 };
  s1 -> s4 [65, 65] { R401 += 1, R361 += 1, R257 += 1 };
  s1 -> s5 [65, 65] { R401 += 1, R361 += 1, R256 += 1, R257 += 1 };
  s1 -> s6 [65, 65] { R401 += 1, R361 += 1, R256 += 1, R257 += 1 };
  s1 -> s7 [65, 65] { R401 += 1, R361 += 1, R257 += 1 };
  s1 -> s1 [66, 65535] { R401 += 1, R361 += 1, R256 += 1, R257 += 1 };
  s1 -> s2 [67, 65535] { R401 += 1, R361 += 1, R257 += 1 };
  s2 -> s2 [0, 64] { R401 += 1, R361 += 1, R257 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R401 += 1 };
  s2 -> s4 [65, 65] { R401 += 1, R361 += 1, R257 += 1 };
  s2 -> s7 [65, 65] { R401 += 1, R361 += 1, R257 += 1 };
  s2 -> s2 [67, 65535] { R401 += 1, R361 += 1, R257 += 1 };
  s3 -> s1 [0, 64] { R401 += 1, R361 += 1, R256 += 1, R257 += 1 };
  s3 -> s2 [0, 64] { R401 += 1, R361 += 1, R257 += 1 };
  s3 -> s3 [0, 65535] { R401 += 1, R360 += 1, R361 += 1 };
  s3 -> s4 [65, 65] { R401 += 1, R361 += 1, R257 += 1 };
  s3 -> s5 [65, 65] { R401 += 1, R361 += 1, R256 += 1, R257 += 1 };
  s3 -> s6 [65, 65] { R401 += 1, R361 += 1, R256 += 1, R257 += 1 };
  s3 -> s7 [65, 65] { R401 += 1, R361 += 1, R257 += 1 };
  s3 -> s1 [66, 65535] { R401 += 1, R361 += 1, R256 += 1, R257 += 1 };
  s3 -> s2 [67, 65535] { R401 += 1, R361 += 1, R257 += 1 };
  s4 -> s4 [0, 65] { R401 += 1, R361 += 1, R257 += 1 };
  s4 -> s4 [0, 65535] { R401 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s4 [67, 65535] { R401 += 1, R361 += 1, R257 += 1 };
  s6 -> s4 [0, 65] { R401 += 1, R361 += 1, R257 += 1 };
  s6 -> s6 [0, 65535] { R401 += 1, R361 += 1, R256 += 1, R257 += 1 };
  s6 -> s4 [67, 65535] { R401 += 1, R361 += 1, R257 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R401 += 1 };
  s8 -> s8 [0, 65535];
  accepting s2, s4, s7, s8;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 64] { R403 += 1, R363 += 1, R332 += 1, R333 += 1 };
  s0 -> s2 [0, 64] { R403 += 1, R363 += 1, R333 += 1, R334 += 1 };
  s0 -> s3 [0, 65535] { R403 += 1, R362 += 1, R363 += 1 };
  s0 -> s0 [0, 65535] { R402 += 1, R403 += 1 };
  s0 -> s4 [65, 65] { R403 += 1, R363 += 1, R332 += 1, R333 += 1 };
  s0 -> s5 [65, 65] { R403 += 1, R363 += 1, R333 += 1, R334 += 1 };
  s0 -> s6 [65, 65] { R403 += 1, R363 += 1, R332 += 1, R333 += 1 };
  s0 -> s7 [65, 65] { R403 += 1, R363 += 1, R333 += 1, R334 += 1 };
  s0 -> s1 [66, 65535] { R403 += 1, R363 += 1, R332 += 1, R333 += 1 };
  s0 -> s2 [66, 65535] { R403 += 1, R363 += 1, R333 += 1, R334 += 1 };
  s1 -> s1 [0, 64] { R403 += 1, R363 += 1, R332 += 1, R333 += 1 };
  s1 -> s2 [0, 64] { R403 += 1, R363 += 1, R333 += 1, R334 += 1 };
  s1 -> s4 [65, 65] { R403 += 1, R363 += 1, R332 += 1, R333 += 1 };
  s1 -> s5 [65, 65] { R403 += 1, R363 += 1, R333 += 1, R334 += 1 };
  s1 -> s6 [65, 65] { R403 += 1, R363 += 1, R332 += 1, R333 += 1 };
  s1 -> s7 [65, 65] { R403 += 1, R363 += 1, R333 += 1, R334 += 1 };
  s1 -> s1 [66, 65535] { R403 += 1, R363 += 1, R332 += 1, R333 += 1 };
  s1 -> s2 [66, 65535] { R403 += 1, R363 += 1, R333 += 1, R334 += 1 };
  s2 -> s2 [0, 64] { R403 += 1, R363 += 1, R333 += 1, R334 += 1 };
  s2 -> s2 [0, 65535] { R403 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s5 [65, 65] { R403 += 1, R363 += 1, R333 += 1, R334 += 1 };
  s2 -> s7 [65, 65] { R403 += 1, R363 += 1, R333 += 1, R334 += 1 };
  s2 -> s2 [66, 65535] { R403 += 1, R363 += 1, R333 += 1, R334 += 1 };
  s3 -> s1 [0, 64] { R403 += 1, R363 += 1, R332 += 1, R333 += 1 };
  s3 -> s2 [0, 64] { R403 += 1, R363 += 1, R333 += 1, R334 += 1 };
  s3 -> s3 [0, 65535] { R403 += 1, R362 += 1, R363 += 1 };
  s3 -> s4 [65, 65] { R403 += 1, R363 += 1, R332 += 1, R333 += 1 };
  s3 -> s5 [65, 65] { R403 += 1, R363 += 1, R333 += 1, R334 += 1 };
  s3 -> s6 [65, 65] { R403 += 1, R363 += 1, R332 += 1, R333 += 1 };
  s3 -> s7 [65, 65] { R403 += 1, R363 += 1, R333 += 1, R334 += 1 };
  s3 -> s1 [66, 65535] { R403 += 1, R363 += 1, R332 += 1, R333 += 1 };
  s3 -> s2 [66, 65535] { R403 += 1, R363 += 1, R333 += 1, R334 += 1 };
  s5 -> s5 [0, 65535] { R403 += 1 };
  s5 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R403 += 1, R363 += 1, R332 += 1, R333 += 1 };
  s6 -> s7 [0, 65535] { R403 += 1, R363 += 1, R333 += 1, R334 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s9 [0, 65535] { R403 += 1 };
  s7 -> s7 [0, 65535] { R403 += 1, R363 += 1, R333 += 1, R334 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R403 += 1 };
  accepting s8, s5, s2, s9, s7;
};
};
constraint R1 = R351 && R2 = R403 && R16 - R351 = -1 && R17 = R351 && R18 - R351 = -1 && R19 = R351 && R20 = 0 && R21 = 1 && R22 = 0 && R23 = 1 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R33 + R32 + -1*R259 + -1*R257 = 0 && R258 + R256 = 0 && R338 = 0 && R339 = R351 && R340 = 0 && R341 = R351 && R342 = 0 && R343 = R351 && R344 = 0 && R345 = R351 && R346 = 0 && R347 = R351 && R348 = 0 && R349 = R351 && R350 = 0 && R360 = 0 && R361 = 0 && R362 = 0 && R363 = 0 && R364 = 1 && R365 = R403 && R366 = 1 && R367 = R403 && R368 = 1 && R369 = R403 && R370 = 1 && R371 = R403 && R372 = 1 && R373 = R403 && R374 = 1 && R375 = R403 && R376 = 1 && R377 = R403 && R378 = 1 && R379 = R403 && R380 = 1 && R381 = R403 && R382 = 1 && R383 = R403 && R384 = 1 && R385 = R403 && R386 = 1 && R387 = R403 && R388 = 1 && R389 = R403 && R390 = 1 && R391 = R403 && R392 = 1 && R393 = R403 && R394 = 1 && R395 = R403 && R396 = 1 && R397 = R403 && R398 = 1 && R399 = R403 && R400 = 1 && R401 = R403 && R402 = 1 && R9 < 1 && R12 < 1 && R35 + R34 < 1 && -1*R259 + -1*R257 < 1 && 0 < R351 && 0 < R403 && (R259 + R257 != 0 || R337 + R334 = 0 || (R335 + R332 = 0 && R336 + R333 = 0)) && (R335 + R332 != 0 || R259 + R257 + -1*R336 + -1*R333 = 0 || R259 + R257 < 1) && (R15 = 0 || (R352 = 0 && R353 = 0)) && (R15 = 0 || (R354 = 0 && R355 = 0)) && (R15 = 0 || (R356 = 0 && R357 = 0)) && (R15 = 0 || (R358 = 0 && R359 = 0)) && (R335 + R332 = 0 || R259 + R257 < 1);
// End of Parikh automata intersection problem
