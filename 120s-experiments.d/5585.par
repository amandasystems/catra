// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R10, R100, R101, R102, R103, R104, R105, R106, R107, R108, R109, R110, R111, R112, R113, R114, R115, R116, R13, R15, R16, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R31, R32, R37, R38, R39, R4, R40, R41, R42, R43, R44, R45, R46, R47, R48, R49, R5, R50, R51, R52, R53, R54, R55, R56, R57, R58, R59, R6, R60, R61, R62, R63, R64, R65, R66, R67, R68, R69, R70, R71, R72, R73, R74, R75, R76, R77, R78, R79, R80, R81, R82, R83, R84, R85, R86, R87, R88, R89, R90, R91, R92, R93, R94, R95, R96, R97, R98, R99;
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [99, 99];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R13 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s0 [0, 65535] { R25 += 1, R26 += 1 };
  s0 -> s1 [32, 32] { R26 += 1 };
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 65535] { R28 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R27 += 1, R28 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R28 += 1, R5 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 8] { R30 += 1 };
  s0 -> s0 [0, 65535] { R29 += 1, R30 += 1 };
  s0 -> s2 [9, 13] { R30 += 1 };
  s0 -> s1 [14, 31] { R30 += 1 };
  s0 -> s2 [32, 32] { R30 += 1 };
  s0 -> s1 [33, 65535] { R30 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R30 += 1 };
  s2 -> s1 [0, 65535] { R30 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_6 {
  init s0;
  s0 -> s0 [0, 65535] { R31 += 1, R32 += 1 };
  s0 -> s1 [0, 65535] { R32 += 1, R6 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R32 += 1, R6 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 64] { R78 += 1 };
  s0 -> s0 [0, 65535] { R77 += 1, R78 += 1 };
  s0 -> s2 [67, 67] { R78 += 1 };
  s0 -> s1 [68, 65535] { R78 += 1 };
  s1 -> s1 [0, 64] { R78 += 1 };
  s1 -> s2 [67, 67] { R78 += 1 };
  s1 -> s1 [68, 65535] { R78 += 1 };
  s2 -> s2 [0, 64] { R78 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [67, 65535] { R78 += 1 };
  accepting s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R79 += 1, R80 += 1 };
  s0 -> s1 [0, 65535] { R80 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R80 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 66] { R82 += 1 };
  s0 -> s2 [0, 65535] { R82 += 1, R10 += 1 };
  s0 -> s0 [0, 65535] { R81 += 1, R82 += 1 };
  s0 -> s3 [67, 67] { R82 += 1 };
  s0 -> s1 [68, 65535] { R82 += 1 };
  s1 -> s1 [0, 66] { R82 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [67, 67] { R82 += 1 };
  s1 -> s1 [68, 65535] { R82 += 1 };
  s2 -> s1 [0, 66] { R82 += 1 };
  s2 -> s2 [0, 65535] { R82 += 1, R10 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [67, 67] { R82 += 1 };
  s2 -> s1 [68, 65535] { R82 += 1 };
  s3 -> s3 [0, 65535] { R82 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 8] { R84 += 1, R18 += 1 };
  s0 -> s2 [0, 65535] { R84 += 1, R17 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R83 += 1, R84 += 1 };
  s0 -> s3 [9, 13] { R84 += 1, R18 += 1 };
  s0 -> s1 [14, 31] { R84 += 1, R18 += 1 };
  s0 -> s3 [32, 32] { R84 += 1, R18 += 1 };
  s0 -> s1 [33, 65535] { R84 += 1, R18 += 1 };
  s1 -> s1 [0, 65535] { R84 += 1, R18 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R84 += 1 };
  s2 -> s1 [0, 8] { R84 += 1, R18 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R84 += 1, R17 += 1, R18 += 1 };
  s2 -> s3 [9, 13] { R84 += 1, R18 += 1 };
  s2 -> s1 [14, 31] { R84 += 1, R18 += 1 };
  s2 -> s3 [32, 32] { R84 += 1, R18 += 1 };
  s2 -> s1 [33, 65535] { R84 += 1, R18 += 1 };
  s3 -> s1 [0, 65535] { R84 += 1, R18 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R84 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 65535] { R86 += 1, R20 += 1, R3 += 1 };
  s0 -> s2 [0, 65535] { R86 += 1, R19 += 1, R20 += 1 };
  s0 -> s0 [0, 65535] { R85 += 1, R86 += 1 };
  s1 -> s1 [0, 65535] { R86 += 1, R20 += 1, R3 += 1 };
  s1 -> s4 [0, 65535] { R86 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R86 += 1, R20 += 1, R3 += 1 };
  s2 -> s2 [0, 65535] { R86 += 1, R19 += 1, R20 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R86 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 8] { R88 += 1, R22 += 1 };
  s0 -> s2 [0, 65535] { R88 += 1, R21 += 1, R22 += 1 };
  s0 -> s0 [0, 65535] { R87 += 1, R88 += 1 };
  s0 -> s3 [9, 13] { R88 += 1, R22 += 1 };
  s0 -> s1 [14, 31] { R88 += 1, R22 += 1 };
  s0 -> s3 [32, 32] { R88 += 1, R22 += 1 };
  s0 -> s1 [33, 65535] { R88 += 1, R22 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R88 += 1, R22 += 1 };
  s1 -> s5 [0, 65535] { R88 += 1 };
  s2 -> s1 [0, 8] { R88 += 1, R22 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R88 += 1, R21 += 1, R22 += 1 };
  s2 -> s3 [9, 13] { R88 += 1, R22 += 1 };
  s2 -> s1 [14, 31] { R88 += 1, R22 += 1 };
  s2 -> s3 [32, 32] { R88 += 1, R22 += 1 };
  s2 -> s1 [33, 65535] { R88 += 1, R22 += 1 };
  s3 -> s1 [0, 65535] { R88 += 1, R22 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R88 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 65535] { R90 += 1, R24 += 1, R4 += 1 };
  s0 -> s2 [0, 65535] { R90 += 1, R23 += 1, R24 += 1 };
  s0 -> s0 [0, 65535] { R89 += 1, R90 += 1 };
  s1 -> s1 [0, 65535] { R90 += 1, R24 += 1, R4 += 1 };
  s1 -> s4 [0, 65535] { R90 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R90 += 1, R24 += 1, R4 += 1 };
  s2 -> s2 [0, 65535] { R90 += 1, R23 += 1, R24 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R90 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 66] { R92 += 1, R52 += 1 };
  s0 -> s0 [0, 65535] { R91 += 1, R92 += 1 };
  s0 -> s2 [0, 65535] { R92 += 1, R51 += 1, R52 += 1 };
  s0 -> s1 [68, 65535] { R92 += 1, R52 += 1 };
  s1 -> s1 [0, 66] { R92 += 1, R52 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R92 += 1 };
  s1 -> s1 [68, 65535] { R92 += 1, R52 += 1 };
  s2 -> s1 [0, 66] { R92 += 1, R52 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R92 += 1, R51 += 1, R52 += 1 };
  s2 -> s1 [68, 65535] { R92 += 1, R52 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 65535] { R94 += 1, R53 += 1, R54 += 1 };
  s0 -> s2 [0, 65535] { R94 += 1, R54 += 1, R15 += 1 };
  s0 -> s0 [0, 65535] { R93 += 1, R94 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R94 += 1, R53 += 1, R54 += 1 };
  s1 -> s2 [0, 65535] { R94 += 1, R54 += 1, R15 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R94 += 1, R54 += 1, R15 += 1 };
  s2 -> s4 [0, 65535] { R94 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R94 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 67] { R96 += 1, R56 += 1 };
  s0 -> s0 [0, 65535] { R95 += 1, R96 += 1 };
  s0 -> s2 [0, 65535] { R96 += 1, R55 += 1, R56 += 1 };
  s0 -> s3 [70, 70] { R96 += 1, R56 += 1 };
  s0 -> s1 [71, 65535] { R96 += 1, R56 += 1 };
  s1 -> s1 [0, 67] { R96 += 1, R56 += 1 };
  s1 -> s3 [70, 70] { R96 += 1, R56 += 1 };
  s1 -> s1 [71, 65535] { R96 += 1, R56 += 1 };
  s2 -> s1 [0, 67] { R96 += 1, R56 += 1 };
  s2 -> s2 [0, 65535] { R96 += 1, R55 += 1, R56 += 1 };
  s2 -> s3 [70, 70] { R96 += 1, R56 += 1 };
  s2 -> s1 [71, 65535] { R96 += 1, R56 += 1 };
  s3 -> s3 [0, 67] { R96 += 1, R56 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R96 += 1 };
  s3 -> s3 [70, 65535] { R96 += 1, R56 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton value2_17 {
  init s0;
  s0 -> s0 [0, 65535] { R97 += 1, R98 += 1 };
  s0 -> s1 [0, 65535] { R98 += 1, R57 += 1, R58 += 1 };
  s0 -> s2 [0, 65535] { R98 += 1, R58 += 1, R38 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R98 += 1, R57 += 1, R58 += 1 };
  s1 -> s2 [0, 65535] { R98 += 1, R58 += 1, R38 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R98 += 1 };
  s2 -> s2 [0, 65535] { R98 += 1, R58 += 1, R38 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R98 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 69] { R100 += 1, R60 += 1 };
  s0 -> s0 [0, 65535] { R99 += 1, R100 += 1 };
  s0 -> s2 [0, 65535] { R100 += 1, R60 += 1, R40 += 1 };
  s0 -> s3 [0, 65535] { R100 += 1, R59 += 1, R60 += 1 };
  s0 -> s1 [71, 65535] { R100 += 1, R60 += 1 };
  s1 -> s1 [0, 69] { R100 += 1, R60 += 1 };
  s1 -> s1 [0, 65535] { R100 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [71, 65535] { R100 += 1, R60 += 1 };
  s2 -> s1 [0, 69] { R100 += 1, R60 += 1 };
  s2 -> s2 [0, 65535] { R100 += 1, R60 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R100 += 1 };
  s2 -> s1 [71, 65535] { R100 += 1, R60 += 1 };
  s3 -> s1 [0, 69] { R100 += 1, R60 += 1 };
  s3 -> s2 [0, 65535] { R100 += 1, R60 += 1, R40 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R100 += 1, R59 += 1, R60 += 1 };
  s3 -> s1 [71, 65535] { R100 += 1, R60 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R100 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 69] { R102 += 1, R62 += 1, R44 += 1 };
  s0 -> s0 [0, 65535] { R101 += 1, R102 += 1 };
  s0 -> s2 [0, 65535] { R102 += 1, R61 += 1, R62 += 1 };
  s0 -> s3 [0, 65535] { R102 += 1, R62 += 1, R43 += 1, R44 += 1 };
  s0 -> s1 [71, 65535] { R102 += 1, R62 += 1, R44 += 1 };
  s1 -> s1 [0, 69] { R102 += 1, R62 += 1, R44 += 1 };
  s1 -> s4 [0, 65535] { R102 += 1 };
  s1 -> s1 [0, 65535] { R102 += 1, R62 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [71, 65535] { R102 += 1, R62 += 1, R44 += 1 };
  s2 -> s1 [0, 69] { R102 += 1, R62 += 1, R44 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R102 += 1, R61 += 1, R62 += 1 };
  s2 -> s3 [0, 65535] { R102 += 1, R62 += 1, R43 += 1, R44 += 1 };
  s2 -> s1 [71, 65535] { R102 += 1, R62 += 1, R44 += 1 };
  s3 -> s1 [0, 69] { R102 += 1, R62 += 1, R44 += 1 };
  s3 -> s4 [0, 65535] { R102 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R102 += 1, R62 += 1, R43 += 1, R44 += 1 };
  s3 -> s1 [71, 65535] { R102 += 1, R62 += 1, R44 += 1 };
  s4 -> s4 [0, 65535] { R102 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 65535] { R104 += 1, R63 += 1, R64 += 1 };
  s0 -> s0 [0, 65535] { R103 += 1, R104 += 1 };
  s0 -> s2 [0, 65535] { R104 += 1, R64 += 1, R49 += 1, R50 += 1 };
  s0 -> s3 [0, 65535] { R104 += 1, R64 += 1, R48 += 1, R49 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R104 += 1, R63 += 1, R64 += 1 };
  s1 -> s2 [0, 65535] { R104 += 1, R64 += 1, R49 += 1, R50 += 1 };
  s1 -> s3 [0, 65535] { R104 += 1, R64 += 1, R48 += 1, R49 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R104 += 1 };
  s2 -> s2 [0, 65535] { R104 += 1, R64 += 1, R49 += 1, R50 += 1 };
  s2 -> s6 [0, 65535] { R104 += 1, R64 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R104 += 1 };
  s3 -> s2 [0, 65535] { R104 += 1, R64 += 1, R49 += 1, R50 += 1 };
  s3 -> s3 [0, 65535] { R104 += 1, R64 += 1, R48 += 1, R49 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R104 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R104 += 1 };
  s6 -> s6 [0, 65535] { R104 += 1, R64 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R106 += 1, R66 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R105 += 1, R106 += 1 };
  s0 -> s2 [0, 65535] { R106 += 1, R65 += 1, R66 += 1 };
  s1 -> s4 [0, 65535] { R106 += 1 };
  s1 -> s1 [0, 65535] { R106 += 1, R66 += 1, R16 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R106 += 1, R66 += 1, R16 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R106 += 1, R65 += 1, R66 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R106 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 66] { R108 += 1, R68 += 1 };
  s0 -> s0 [0, 65535] { R107 += 1, R108 += 1 };
  s0 -> s2 [0, 65535] { R108 += 1, R67 += 1, R68 += 1 };
  s0 -> s3 [67, 67] { R108 += 1, R68 += 1 };
  s0 -> s4 [67, 67] { R108 += 1, R68 += 1 };
  s0 -> s1 [71, 65535] { R108 += 1, R68 += 1 };
  s1 -> s1 [0, 66] { R108 += 1, R68 += 1 };
  s1 -> s1 [0, 65535] { R108 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [67, 67] { R108 += 1, R68 += 1 };
  s1 -> s4 [67, 67] { R108 += 1, R68 += 1 };
  s1 -> s1 [71, 65535] { R108 += 1, R68 += 1 };
  s2 -> s1 [0, 66] { R108 += 1, R68 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R108 += 1, R67 += 1, R68 += 1 };
  s2 -> s3 [67, 67] { R108 += 1, R68 += 1 };
  s2 -> s4 [67, 67] { R108 += 1, R68 += 1 };
  s2 -> s1 [71, 65535] { R108 += 1, R68 += 1 };
  s3 -> s3 [0, 67] { R108 += 1, R68 += 1 };
  s3 -> s3 [0, 65535] { R108 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [71, 65535] { R108 += 1, R68 += 1 };
  s4 -> s4 [0, 65535] { R108 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 66] { R110 += 1, R70 += 1, R37 += 1 };
  s0 -> s2 [0, 65535] { R110 += 1, R69 += 1, R70 += 1 };
  s0 -> s0 [0, 65535] { R109 += 1, R110 += 1 };
  s0 -> s3 [67, 67] { R110 += 1, R70 += 1, R37 += 1 };
  s0 -> s4 [67, 67] { R110 += 1, R70 += 1, R37 += 1 };
  s0 -> s1 [68, 65535] { R110 += 1, R70 += 1, R37 += 1 };
  s1 -> s1 [0, 66] { R110 += 1, R70 += 1, R37 += 1 };
  s1 -> s1 [0, 65535] { R110 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [67, 67] { R110 += 1, R70 += 1, R37 += 1 };
  s1 -> s4 [67, 67] { R110 += 1, R70 += 1, R37 += 1 };
  s1 -> s1 [68, 65535] { R110 += 1, R70 += 1, R37 += 1 };
  s2 -> s1 [0, 66] { R110 += 1, R70 += 1, R37 += 1 };
  s2 -> s2 [0, 65535] { R110 += 1, R69 += 1, R70 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [67, 67] { R110 += 1, R70 += 1, R37 += 1 };
  s2 -> s4 [67, 67] { R110 += 1, R70 += 1, R37 += 1 };
  s2 -> s1 [68, 65535] { R110 += 1, R70 += 1, R37 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R110 += 1 };
  s4 -> s5 [0, 65535] { R110 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R110 += 1, R70 += 1, R37 += 1 };
  s5 -> s5 [0, 65535] { R110 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 66] { R112 += 1, R72 += 1, R39 += 1 };
  s0 -> s0 [0, 65535] { R111 += 1, R112 += 1 };
  s0 -> s2 [0, 65535] { R112 += 1, R71 += 1, R72 += 1 };
  s0 -> s3 [67, 67] { R112 += 1, R72 += 1, R39 += 1 };
  s0 -> s4 [67, 67] { R112 += 1, R72 += 1, R39 += 1 };
  s0 -> s1 [68, 65535] { R112 += 1, R72 += 1, R39 += 1 };
  s1 -> s1 [0, 66] { R112 += 1, R72 += 1, R39 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R112 += 1 };
  s1 -> s3 [67, 67] { R112 += 1, R72 += 1, R39 += 1 };
  s1 -> s4 [67, 67] { R112 += 1, R72 += 1, R39 += 1 };
  s1 -> s1 [68, 65535] { R112 += 1, R72 += 1, R39 += 1 };
  s2 -> s1 [0, 66] { R112 += 1, R72 += 1, R39 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R112 += 1, R71 += 1, R72 += 1 };
  s2 -> s3 [67, 67] { R112 += 1, R72 += 1, R39 += 1 };
  s2 -> s4 [67, 67] { R112 += 1, R72 += 1, R39 += 1 };
  s2 -> s1 [68, 65535] { R112 += 1, R72 += 1, R39 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R112 += 1, R72 += 1, R39 += 1 };
  s3 -> s6 [0, 65535] { R112 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R112 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R112 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 66] { R114 += 1, R74 += 1, R41 += 1, R42 += 1 };
  s0 -> s2 [0, 65535] { R114 += 1, R73 += 1, R74 += 1 };
  s0 -> s0 [0, 65535] { R113 += 1, R114 += 1 };
  s0 -> s3 [67, 67] { R114 += 1, R74 += 1, R41 += 1, R42 += 1 };
  s0 -> s4 [67, 67] { R114 += 1, R74 += 1, R41 += 1, R42 += 1 };
  s0 -> s1 [68, 65535] { R114 += 1, R74 += 1, R41 += 1, R42 += 1 };
  s1 -> s1 [0, 66] { R114 += 1, R74 += 1, R41 += 1, R42 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R114 += 1 };
  s1 -> s3 [67, 67] { R114 += 1, R74 += 1, R41 += 1, R42 += 1 };
  s1 -> s4 [67, 67] { R114 += 1, R74 += 1, R41 += 1, R42 += 1 };
  s1 -> s1 [68, 65535] { R114 += 1, R74 += 1, R41 += 1, R42 += 1 };
  s2 -> s1 [0, 66] { R114 += 1, R74 += 1, R41 += 1, R42 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R114 += 1, R73 += 1, R74 += 1 };
  s2 -> s3 [67, 67] { R114 += 1, R74 += 1, R41 += 1, R42 += 1 };
  s2 -> s4 [67, 67] { R114 += 1, R74 += 1, R41 += 1, R42 += 1 };
  s2 -> s1 [68, 65535] { R114 += 1, R74 += 1, R41 += 1, R42 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R114 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R114 += 1 };
  s4 -> s4 [0, 65535] { R114 += 1, R74 += 1, R41 += 1, R42 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R114 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 66] { R116 += 1, R76 += 1, R45 += 1, R46 += 1 };
  s0 -> s2 [0, 65535] { R116 += 1, R75 += 1, R76 += 1 };
  s0 -> s0 [0, 65535] { R115 += 1, R116 += 1 };
  s0 -> s3 [67, 67] { R116 += 1, R76 += 1, R45 += 1, R46 += 1 };
  s0 -> s4 [67, 67] { R116 += 1, R76 += 1, R45 += 1, R46 += 1 };
  s0 -> s1 [68, 65535] { R116 += 1, R76 += 1, R45 += 1, R46 += 1 };
  s1 -> s1 [0, 66] { R116 += 1, R76 += 1, R45 += 1, R46 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R116 += 1 };
  s1 -> s3 [67, 67] { R116 += 1, R76 += 1, R45 += 1, R46 += 1 };
  s1 -> s4 [67, 67] { R116 += 1, R76 += 1, R45 += 1, R46 += 1 };
  s1 -> s1 [68, 65535] { R116 += 1, R76 += 1, R45 += 1, R46 += 1 };
  s2 -> s1 [0, 66] { R116 += 1, R76 += 1, R45 += 1, R46 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R116 += 1, R75 += 1, R76 += 1 };
  s2 -> s3 [67, 67] { R116 += 1, R76 += 1, R45 += 1, R46 += 1 };
  s2 -> s4 [67, 67] { R116 += 1, R76 += 1, R45 += 1, R46 += 1 };
  s2 -> s1 [68, 65535] { R116 += 1, R76 += 1, R45 += 1, R46 += 1 };
  s3 -> s3 [0, 65535] { R116 += 1, R76 += 1, R45 += 1, R46 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R116 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R116 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R116 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R1 = R64 && R2 - R116 = 1 && R17 - R64 = -1 && R18 = R64 && R19 - R64 = -1 && R20 = R64 && R21 = 0 && R22 = 1 && R23 = 0 && R24 = 1 && R25 = R116 && R26 - R116 = 1 && R27 = R116 && R28 - R116 = 1 && R29 = 0 && R30 = 1 && R31 = 0 && R32 = 1 && R51 = 0 && R52 = R64 && R53 = 0 && R54 = R64 && R55 = 0 && R56 = R64 && R57 = 0 && R58 = R64 && R59 = 0 && R60 = R64 && R61 = 0 && R62 = R64 && R63 = 0 && R77 = 0 && R78 = R116 && R79 = 0 && R80 = R116 && R81 = 0 && R82 = R116 && R83 = 0 && R84 = R116 && R85 = 0 && R86 = R116 && R87 = 0 && R88 = R116 && R89 = 0 && R90 = R116 && R91 = 0 && R92 = R116 && R93 = 0 && R94 = R116 && R95 = 0 && R96 = R116 && R97 = 0 && R98 = R116 && R99 = 0 && R100 = R116 && R101 = 0 && R102 = R116 && R103 = 0 && R104 = R116 && R105 = 0 && R106 = R116 && R107 = 0 && R108 = R116 && R109 = 0 && R110 = R116 && R111 = 0 && R112 = R116 && R113 = 0 && R114 = R116 && R115 = 0 && R10 < 1 && R13 < 1 && -1*R38 + -1*R37 < 1 && R40 + R39 < 1 && 0 < R64 && -1 < R116 && (R38 + R37 != 0 || R50 + R47 = 0 || (R43 + R41 = 0 && R44 + R42 = 0)) && (R38 + R37 != 0 || R50 + R47 = 0 || (R48 + R45 = 0 && R49 + R46 = 0)) && (R43 + R41 != 0 || R38 + R37 + -1*R44 + -1*R42 = 0 || R38 + R37 < 1) && (R48 + R45 != 0 || R38 + R37 + -1*R49 + -1*R46 = 0 || R38 + R37 < 1) && (R16 = 0 || (R65 = 0 && R66 = 0)) && (R16 = 0 || (R67 = 0 && R68 = 0)) && (R16 = 0 || (R69 = 0 && R70 = 0)) && (R16 = 0 || (R71 = 0 && R72 = 0)) && (R16 = 0 || (R73 = 0 && R74 = 0)) && (R16 = 0 || (R75 = 0 && R76 = 0)) && (R43 + R41 = 0 || R38 + R37 < 1) && (R48 + R45 = 0 || R38 + R37 < 1);
// End of Parikh automata intersection problem
