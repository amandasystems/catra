// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R100, R101, R102, R103, R104, R105, R106, R107, R108, R109, R11, R110, R111, R112, R113, R114, R115, R116, R117, R118, R119, R12, R120, R121, R122, R123, R124, R125, R126, R127, R128, R129, R130, R131, R132, R133, R134, R135, R136, R137, R138, R139, R140, R2, R3, R4, R5, R6, R7, R77, R78, R79, R80, R81, R82, R83, R84, R85, R86, R87, R88, R89, R90, R91, R92, R93, R94, R95, R96, R97, R98, R99;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 60];
  s0 -> s1 [61, 61];
  s0 -> s0 [62, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60] { R12 += 1 };
  s0 -> s0 [0, 65535] { R11 += 1, R12 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535] { R12 += 1 };
  s1 -> s1 [0, 60] { R12 += 1 };
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535] { R12 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 64] { R102 += 1 };
  s0 -> s0 [0, 65535] { R101 += 1, R102 += 1 };
  s0 -> s2 [79, 79] { R102 += 1 };
  s0 -> s1 [80, 65535] { R102 += 1 };
  s1 -> s1 [0, 64] { R102 += 1 };
  s1 -> s2 [79, 79] { R102 += 1 };
  s1 -> s1 [80, 65535] { R102 += 1 };
  s2 -> s2 [0, 64] { R102 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [79, 65535] { R102 += 1 };
  accepting s2;
};
automaton value2_4 {
  init s0;
  s0 -> s0 [0, 65535] { R103 += 1, R104 += 1 };
  s0 -> s1 [0, 65535] { R104 += 1, R0 += 1 };
  s1 -> s1 [0, 65535] { R104 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 8] { R106 += 1, R80 += 1 };
  s0 -> s2 [0, 65535] { R106 += 1, R79 += 1, R80 += 1 };
  s0 -> s0 [0, 65535] { R105 += 1, R106 += 1 };
  s0 -> s3 [9, 13] { R106 += 1, R80 += 1 };
  s0 -> s1 [14, 31] { R106 += 1, R80 += 1 };
  s0 -> s3 [32, 32] { R106 += 1, R80 += 1 };
  s0 -> s1 [33, 65535] { R106 += 1, R80 += 1 };
  s1 -> s1 [0, 65535] { R106 += 1, R80 += 1 };
  s1 -> s5 [0, 65535] { R106 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R106 += 1, R80 += 1 };
  s2 -> s2 [0, 65535] { R106 += 1, R79 += 1, R80 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R106 += 1, R80 += 1 };
  s2 -> s1 [14, 31] { R106 += 1, R80 += 1 };
  s2 -> s3 [32, 32] { R106 += 1, R80 += 1 };
  s2 -> s1 [33, 65535] { R106 += 1, R80 += 1 };
  s3 -> s1 [0, 65535] { R106 += 1, R80 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R106 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 65535] { R108 += 1, R81 += 1, R82 += 1 };
  s0 -> s0 [0, 65535] { R107 += 1, R108 += 1 };
  s0 -> s2 [0, 65535] { R108 += 1, R82 += 1, R3 += 1 };
  s1 -> s1 [0, 65535] { R108 += 1, R81 += 1, R82 += 1 };
  s1 -> s2 [0, 65535] { R108 += 1, R82 += 1, R3 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R108 += 1 };
  s2 -> s2 [0, 65535] { R108 += 1, R82 += 1, R3 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R108 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 8] { R110 += 1, R84 += 1 };
  s0 -> s2 [0, 65535] { R110 += 1, R83 += 1, R84 += 1 };
  s0 -> s0 [0, 65535] { R109 += 1, R110 += 1 };
  s0 -> s3 [9, 13] { R110 += 1, R84 += 1 };
  s0 -> s1 [14, 31] { R110 += 1, R84 += 1 };
  s0 -> s3 [32, 32] { R110 += 1, R84 += 1 };
  s0 -> s1 [33, 65535] { R110 += 1, R84 += 1 };
  s1 -> s1 [0, 65535] { R110 += 1, R84 += 1 };
  s1 -> s5 [0, 65535] { R110 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R110 += 1, R84 += 1 };
  s2 -> s2 [0, 65535] { R110 += 1, R83 += 1, R84 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R110 += 1, R84 += 1 };
  s2 -> s1 [14, 31] { R110 += 1, R84 += 1 };
  s2 -> s3 [32, 32] { R110 += 1, R84 += 1 };
  s2 -> s1 [33, 65535] { R110 += 1, R84 += 1 };
  s3 -> s1 [0, 65535] { R110 += 1, R84 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R110 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R111 += 1, R112 += 1 };
  s0 -> s1 [0, 65535] { R112 += 1, R85 += 1, R86 += 1 };
  s0 -> s2 [0, 65535] { R112 += 1, R86 += 1, R4 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R112 += 1, R85 += 1, R86 += 1 };
  s1 -> s2 [0, 65535] { R112 += 1, R86 += 1, R4 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R112 += 1, R86 += 1, R4 += 1 };
  s2 -> s4 [0, 65535] { R112 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R112 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 64] { R118 += 1 };
  s0 -> s0 [0, 65535] { R117 += 1, R118 += 1 };
  s0 -> s2 [67, 67] { R118 += 1 };
  s0 -> s1 [68, 65535] { R118 += 1 };
  s1 -> s1 [0, 64] { R118 += 1 };
  s1 -> s2 [67, 67] { R118 += 1 };
  s1 -> s1 [68, 65535] { R118 += 1 };
  s2 -> s2 [0, 64] { R118 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [67, 65535] { R118 += 1 };
  accepting s2;
};
automaton value2_10 {
  init s0;
  s0 -> s0 [0, 65535] { R119 += 1, R120 += 1 };
  s0 -> s1 [0, 65535] { R120 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R120 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 66] { R122 += 1 };
  s0 -> s2 [0, 65535] { R122 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R121 += 1, R122 += 1 };
  s0 -> s3 [67, 67] { R122 += 1 };
  s0 -> s1 [68, 65535] { R122 += 1 };
  s1 -> s1 [0, 66] { R122 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [67, 67] { R122 += 1 };
  s1 -> s1 [68, 65535] { R122 += 1 };
  s2 -> s1 [0, 66] { R122 += 1 };
  s2 -> s2 [0, 65535] { R122 += 1, R7 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [67, 67] { R122 += 1 };
  s2 -> s1 [68, 65535] { R122 += 1 };
  s3 -> s3 [0, 65535] { R122 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 8] { R124 += 1, R88 += 1 };
  s0 -> s0 [0, 65535] { R123 += 1, R124 += 1 };
  s0 -> s2 [0, 65535] { R124 += 1, R87 += 1, R88 += 1 };
  s0 -> s3 [9, 13] { R124 += 1, R88 += 1 };
  s0 -> s1 [14, 31] { R124 += 1, R88 += 1 };
  s0 -> s3 [32, 32] { R124 += 1, R88 += 1 };
  s0 -> s1 [33, 65535] { R124 += 1, R88 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R124 += 1, R88 += 1 };
  s1 -> s5 [0, 65535] { R124 += 1 };
  s2 -> s1 [0, 8] { R124 += 1, R88 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R124 += 1, R87 += 1, R88 += 1 };
  s2 -> s3 [9, 13] { R124 += 1, R88 += 1 };
  s2 -> s1 [14, 31] { R124 += 1, R88 += 1 };
  s2 -> s3 [32, 32] { R124 += 1, R88 += 1 };
  s2 -> s1 [33, 65535] { R124 += 1, R88 += 1 };
  s3 -> s1 [0, 65535] { R124 += 1, R88 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R124 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s0 [0, 65535] { R125 += 1, R126 += 1 };
  s0 -> s1 [0, 65535] { R126 += 1, R90 += 1, R5 += 1 };
  s0 -> s2 [0, 65535] { R126 += 1, R89 += 1, R90 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R126 += 1 };
  s1 -> s1 [0, 65535] { R126 += 1, R90 += 1, R5 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R126 += 1, R90 += 1, R5 += 1 };
  s2 -> s2 [0, 65535] { R126 += 1, R89 += 1, R90 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R126 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 8] { R128 += 1, R92 += 1 };
  s0 -> s0 [0, 65535] { R127 += 1, R128 += 1 };
  s0 -> s2 [0, 65535] { R128 += 1, R91 += 1, R92 += 1 };
  s0 -> s3 [9, 13] { R128 += 1, R92 += 1 };
  s0 -> s1 [14, 31] { R128 += 1, R92 += 1 };
  s0 -> s3 [32, 32] { R128 += 1, R92 += 1 };
  s0 -> s1 [33, 65535] { R128 += 1, R92 += 1 };
  s1 -> s5 [0, 65535] { R128 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R128 += 1, R92 += 1 };
  s2 -> s1 [0, 8] { R128 += 1, R92 += 1 };
  s2 -> s2 [0, 65535] { R128 += 1, R91 += 1, R92 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R128 += 1, R92 += 1 };
  s2 -> s1 [14, 31] { R128 += 1, R92 += 1 };
  s2 -> s3 [32, 32] { R128 += 1, R92 += 1 };
  s2 -> s1 [33, 65535] { R128 += 1, R92 += 1 };
  s3 -> s1 [0, 65535] { R128 += 1, R92 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R128 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s0 [0, 65535] { R129 += 1, R130 += 1 };
  s0 -> s1 [0, 65535] { R130 += 1, R93 += 1, R94 += 1 };
  s0 -> s2 [0, 65535] { R130 += 1, R94 += 1, R6 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R130 += 1, R93 += 1, R94 += 1 };
  s1 -> s2 [0, 65535] { R130 += 1, R94 += 1, R6 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R130 += 1 };
  s2 -> s2 [0, 65535] { R130 += 1, R94 += 1, R6 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R130 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 66] { R132 += 1, R96 += 1 };
  s0 -> s0 [0, 65535] { R131 += 1, R132 += 1 };
  s0 -> s2 [0, 65535] { R132 += 1, R95 += 1, R96 += 1 };
  s0 -> s1 [68, 65535] { R132 += 1, R96 += 1 };
  s1 -> s1 [0, 66] { R132 += 1, R96 += 1 };
  s1 -> s1 [0, 65535] { R132 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [68, 65535] { R132 += 1, R96 += 1 };
  s2 -> s1 [0, 66] { R132 += 1, R96 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R132 += 1, R95 += 1, R96 += 1 };
  s2 -> s1 [68, 65535] { R132 += 1, R96 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_17 {
  init s0;
  s0 -> s0 [0, 65535] { R133 += 1, R134 += 1 };
  s0 -> s1 [0, 65535] { R134 += 1, R98 += 1, R77 += 1 };
  s0 -> s2 [0, 65535] { R134 += 1, R97 += 1, R98 += 1 };
  s1 -> s4 [0, 65535] { R134 += 1 };
  s1 -> s1 [0, 65535] { R134 += 1, R98 += 1, R77 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R134 += 1, R98 += 1, R77 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R134 += 1, R97 += 1, R98 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R134 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 67] { R136 += 1, R100 += 1 };
  s0 -> s0 [0, 65535] { R135 += 1, R136 += 1 };
  s0 -> s2 [0, 65535] { R136 += 1, R99 += 1, R100 += 1 };
  s0 -> s1 [91, 65535] { R136 += 1, R100 += 1 };
  s1 -> s1 [0, 67] { R136 += 1, R100 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R136 += 1 };
  s1 -> s1 [91, 65535] { R136 += 1, R100 += 1 };
  s2 -> s1 [0, 67] { R136 += 1, R100 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R136 += 1, R99 += 1, R100 += 1 };
  s2 -> s1 [91, 65535] { R136 += 1, R100 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 65535] { R138 += 1, R114 += 1, R78 += 1 };
  s0 -> s0 [0, 65535] { R137 += 1, R138 += 1 };
  s0 -> s2 [0, 65535] { R138 += 1, R113 += 1, R114 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R138 += 1 };
  s1 -> s1 [0, 65535] { R138 += 1, R114 += 1, R78 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R138 += 1, R114 += 1, R78 += 1 };
  s2 -> s2 [0, 65535] { R138 += 1, R113 += 1, R114 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R138 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 66] { R140 += 1, R116 += 1 };
  s0 -> s2 [0, 65535] { R140 += 1, R115 += 1, R116 += 1 };
  s0 -> s0 [0, 65535] { R139 += 1, R140 += 1 };
  s0 -> s3 [67, 67] { R140 += 1, R116 += 1 };
  s0 -> s4 [67, 67] { R140 += 1, R116 += 1 };
  s0 -> s1 [91, 65535] { R140 += 1, R116 += 1 };
  s1 -> s1 [0, 66] { R140 += 1, R116 += 1 };
  s1 -> s1 [0, 65535] { R140 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [67, 67] { R140 += 1, R116 += 1 };
  s1 -> s4 [67, 67] { R140 += 1, R116 += 1 };
  s1 -> s1 [91, 65535] { R140 += 1, R116 += 1 };
  s2 -> s1 [0, 66] { R140 += 1, R116 += 1 };
  s2 -> s2 [0, 65535] { R140 += 1, R115 += 1, R116 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [67, 67] { R140 += 1, R116 += 1 };
  s2 -> s4 [67, 67] { R140 += 1, R116 += 1 };
  s2 -> s1 [91, 65535] { R140 += 1, R116 += 1 };
  s3 -> s3 [0, 65535] { R140 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 67] { R140 += 1, R116 += 1 };
  s4 -> s4 [0, 65535] { R140 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [91, 65535] { R140 += 1, R116 += 1 };
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
};
synchronised {  // Automata constraining c5
automaton c5_0 {
  init s0;
  s0 -> s1 [99, 99];
  accepting s1;
};
};
constraint R1 = R100 && R2 = R112 && R11 = 0 && R12 = R140 && R87 - R100 = -1 && R88 = R100 && R89 - R100 = -1 && R90 = R100 && R91 = 0 && R92 = 1 && R93 = 0 && R94 = 1 && R95 = 0 && R96 = R100 && R97 = 0 && R98 = R100 && R99 = 0 && R101 - R140 = 1 && R102 = R112 && R103 - R140 = 1 && R104 = R112 && R105 - R140 = 1 && R106 = R112 && R107 - R140 = 1 && R108 = R112 && R109 - R140 = 1 && R110 = R112 && R111 - R140 = 1 && R117 = 0 && R118 = R140 && R119 = 0 && R120 = R140 && R121 = 0 && R122 = R140 && R123 = 0 && R124 = R140 && R125 = 0 && R126 = R140 && R127 = 0 && R128 = R140 && R129 = 0 && R130 = R140 && R131 = 0 && R132 = R140 && R133 = 0 && R134 = R140 && R135 = 0 && R136 = R140 && R137 = 0 && R138 = R140 && R139 = 0 && R0 != 0 && R7 < 1 && 0 < R100 && R140 < R112 && -1 < R140 && (R3 != 0 || ((R0 != R80 || R79 - R80 = -1 || R80 < 0) && (R0 = R80 || R0 < 1))) && (R3 != 0 || ((R0 != R82 || R81 - R82 = -1 || R82 < 0) && (R0 = R82 || R0 < 1))) && (R83 != 0 || ((R4 != 0 || ((R0 != R84 || R84 = 1 || R84 < 0) && (R0 = R84 || R84 = 1 || R0 < 1))) && (R4 = 0 || ((R0 != R84 || R84 = 1 || R84 < 0) && (R84 != 1 || -1 < R0) && (R0 = R84 || R84 = 1))))) && (R85 != 0 || ((R4 != 0 || ((R0 != R86 || R86 = 1 || R86 < 0) && (R0 = R86 || R86 = 1 || R0 < 1))) && (R4 = 0 || ((R0 != R86 || R86 = 1 || R86 < 0) && (R86 != 1 || -1 < R0) && (R0 = R86 || R86 = 1))))) && (R3 = 0 || (R0 = R80 && R79 - R80 = -1)) && (R3 = 0 || (R0 = R82 && R81 - R82 = -1)) && (R78 = 0 || (R113 = 0 && R114 = 0)) && (R78 = 0 || (R115 = 0 && R116 = 0)) && (R83 = 0 || (R4 = 0 && R0 < 0)) && (R85 = 0 || (R4 = 0 && R0 < 0));
// End of Parikh automata intersection problem
