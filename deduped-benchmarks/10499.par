// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R1144, R1145, R1146, R1147, R1148, R1149, R1150, R1151, R1152, R1153, R1154, R1155, R1156, R1157, R1158, R1159, R1160, R1161, R1162, R1163, R1164, R1165, R1166, R1167, R1168, R1169, R1170, R1171, R1172, R1173, R1174, R1175, R1176, R1177, R1178, R1179, R1180, R1181, R1182, R1183, R1184, R1185, R1186, R1187, R1188, R1189, R1190, R1191, R1192, R1193, R1194, R1195, R1196, R1197, R1198, R1199, R1200, R1201, R1202, R1203, R1204, R1205, R1206, R1207, R1208, R1209, R1210, R1211, R1212, R1213, R1214, R1215, R1216, R1217, R1218, R1219, R1220, R1221, R1222, R1223, R1224, R1225, R1226, R1227, R1228, R1229, R1230, R1231, R1232, R1233, R1234, R1235, R1236, R1237, R1238, R1239, R1240, R1241, R1242, R1243, R1244, R1245, R1246, R1247, R1248, R1249, R1250, R1251, R1252, R1253, R1254, R1255, R1256, R1257, R1258, R1259, R1260, R1261, R1262, R1263, R1264, R1265, R1266, R1267, R1268, R1269, R1270, R1271, R1272, R1273, R1274, R1275, R1276, R1277, R14, R17, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R31, R32, R33, R34, R35, R36, R37, R4, R42, R44, R46, R47, R5, R50, R51, R52, R56, R57, R58, R59, R6, R7, R872, R873, R874, R875;
synchronised {  // Automata constraining P9
automaton P9_0 {
  init s0;
  s0 -> s1 [98, 98];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R17 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s0 [0, 65535] { R30 += 1, R31 += 1 };
  s0 -> s1 [13, 13] { R31 += 1 };
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value2_4 {
  init s0;
  s0 -> s0 [0, 65535] { R32 += 1, R33 += 1 };
  s0 -> s1 [0, 65535] { R33 += 1, R6 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R33 += 1, R6 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 8] { R35 += 1 };
  s0 -> s0 [0, 65535] { R34 += 1, R35 += 1 };
  s0 -> s2 [9, 13] { R35 += 1 };
  s0 -> s1 [14, 31] { R35 += 1 };
  s0 -> s2 [32, 32] { R35 += 1 };
  s0 -> s1 [33, 65535] { R35 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R35 += 1 };
  s2 -> s1 [0, 65535] { R35 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 65535] { R37 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R36 += 1, R37 += 1 };
  s1 -> s1 [0, 65535] { R37 += 1, R7 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 64] { R1221 += 1 };
  s0 -> s0 [0, 65535] { R1220 += 1, R1221 += 1 };
  s0 -> s2 [66, 66] { R1221 += 1 };
  s0 -> s1 [67, 65535] { R1221 += 1 };
  s1 -> s1 [0, 64] { R1221 += 1 };
  s1 -> s2 [66, 66] { R1221 += 1 };
  s1 -> s1 [67, 65535] { R1221 += 1 };
  s2 -> s2 [0, 64] { R1221 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [66, 65535] { R1221 += 1 };
  accepting s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R1223 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R1222 += 1, R1223 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R1223 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 65] { R1225 += 1 };
  s0 -> s2 [0, 65535] { R1225 += 1, R14 += 1 };
  s0 -> s0 [0, 65535] { R1224 += 1, R1225 += 1 };
  s0 -> s3 [66, 66] { R1225 += 1 };
  s0 -> s1 [67, 65535] { R1225 += 1 };
  s1 -> s1 [0, 65] { R1225 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [66, 66] { R1225 += 1 };
  s1 -> s1 [67, 65535] { R1225 += 1 };
  s2 -> s1 [0, 65] { R1225 += 1 };
  s2 -> s2 [0, 65535] { R1225 += 1, R14 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [66, 66] { R1225 += 1 };
  s2 -> s1 [67, 65535] { R1225 += 1 };
  s3 -> s3 [0, 65535] { R1225 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 8] { R1227 += 1, R23 += 1 };
  s0 -> s0 [0, 65535] { R1226 += 1, R1227 += 1 };
  s0 -> s2 [0, 65535] { R1227 += 1, R22 += 1, R23 += 1 };
  s0 -> s3 [9, 13] { R1227 += 1, R23 += 1 };
  s0 -> s1 [14, 31] { R1227 += 1, R23 += 1 };
  s0 -> s3 [32, 32] { R1227 += 1, R23 += 1 };
  s0 -> s1 [33, 65535] { R1227 += 1, R23 += 1 };
  s1 -> s5 [0, 65535] { R1227 += 1 };
  s1 -> s1 [0, 65535] { R1227 += 1, R23 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R1227 += 1, R23 += 1 };
  s2 -> s2 [0, 65535] { R1227 += 1, R22 += 1, R23 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R1227 += 1, R23 += 1 };
  s2 -> s1 [14, 31] { R1227 += 1, R23 += 1 };
  s2 -> s3 [32, 32] { R1227 += 1, R23 += 1 };
  s2 -> s1 [33, 65535] { R1227 += 1, R23 += 1 };
  s3 -> s1 [0, 65535] { R1227 += 1, R23 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1227 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 65535] { R1229 += 1, R24 += 1, R25 += 1 };
  s0 -> s0 [0, 65535] { R1228 += 1, R1229 += 1 };
  s0 -> s2 [0, 65535] { R1229 += 1, R25 += 1, R4 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1229 += 1, R24 += 1, R25 += 1 };
  s1 -> s2 [0, 65535] { R1229 += 1, R25 += 1, R4 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1229 += 1, R25 += 1, R4 += 1 };
  s2 -> s4 [0, 65535] { R1229 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1229 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 8] { R1231 += 1, R27 += 1 };
  s0 -> s2 [0, 65535] { R1231 += 1, R26 += 1, R27 += 1 };
  s0 -> s0 [0, 65535] { R1230 += 1, R1231 += 1 };
  s0 -> s3 [9, 13] { R1231 += 1, R27 += 1 };
  s0 -> s1 [14, 31] { R1231 += 1, R27 += 1 };
  s0 -> s3 [32, 32] { R1231 += 1, R27 += 1 };
  s0 -> s1 [33, 65535] { R1231 += 1, R27 += 1 };
  s1 -> s5 [0, 65535] { R1231 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R1231 += 1, R27 += 1 };
  s2 -> s1 [0, 8] { R1231 += 1, R27 += 1 };
  s2 -> s2 [0, 65535] { R1231 += 1, R26 += 1, R27 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R1231 += 1, R27 += 1 };
  s2 -> s1 [14, 31] { R1231 += 1, R27 += 1 };
  s2 -> s3 [32, 32] { R1231 += 1, R27 += 1 };
  s2 -> s1 [33, 65535] { R1231 += 1, R27 += 1 };
  s3 -> s1 [0, 65535] { R1231 += 1, R27 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1231 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s0 [0, 65535] { R1232 += 1, R1233 += 1 };
  s0 -> s1 [0, 65535] { R1233 += 1, R28 += 1, R29 += 1 };
  s0 -> s2 [0, 65535] { R1233 += 1, R29 += 1, R5 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1233 += 1, R28 += 1, R29 += 1 };
  s1 -> s2 [0, 65535] { R1233 += 1, R29 += 1, R5 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R1233 += 1 };
  s2 -> s2 [0, 65535] { R1233 += 1, R29 += 1, R5 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1233 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s0 [0, 65535] { R1234 += 1, R1235 += 1 };
  s0 -> s1 [0, 65535] { R1235 += 1, R1165 += 1, R21 += 1 };
  s0 -> s2 [0, 65535] { R1235 += 1, R1164 += 1, R1165 += 1 };
  s1 -> s1 [0, 65535] { R1235 += 1, R1165 += 1, R21 += 1 };
  s1 -> s4 [0, 65535] { R1235 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R1235 += 1, R1165 += 1, R21 += 1 };
  s2 -> s2 [0, 65535] { R1235 += 1, R1164 += 1, R1165 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1235 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 65] { R1237 += 1, R1167 += 1 };
  s0 -> s0 [0, 65535] { R1236 += 1, R1237 += 1 };
  s0 -> s2 [0, 65535] { R1237 += 1, R1166 += 1, R1167 += 1 };
  s0 -> s3 [66, 66] { R1237 += 1, R1167 += 1 };
  s0 -> s4 [66, 66] { R1237 += 1, R1167 += 1 };
  s0 -> s1 [71, 65535] { R1237 += 1, R1167 += 1 };
  s1 -> s1 [0, 65] { R1237 += 1, R1167 += 1 };
  s1 -> s1 [0, 65535] { R1237 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [66, 66] { R1237 += 1, R1167 += 1 };
  s1 -> s4 [66, 66] { R1237 += 1, R1167 += 1 };
  s1 -> s1 [71, 65535] { R1237 += 1, R1167 += 1 };
  s2 -> s1 [0, 65] { R1237 += 1, R1167 += 1 };
  s2 -> s2 [0, 65535] { R1237 += 1, R1166 += 1, R1167 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [66, 66] { R1237 += 1, R1167 += 1 };
  s2 -> s4 [66, 66] { R1237 += 1, R1167 += 1 };
  s2 -> s1 [71, 65535] { R1237 += 1, R1167 += 1 };
  s3 -> s3 [0, 66] { R1237 += 1, R1167 += 1 };
  s3 -> s3 [0, 65535] { R1237 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [71, 65535] { R1237 += 1, R1167 += 1 };
  s4 -> s4 [0, 65535] { R1237 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 65] { R1239 += 1, R1169 += 1, R42 += 1 };
  s0 -> s2 [0, 65535] { R1239 += 1, R1168 += 1, R1169 += 1 };
  s0 -> s0 [0, 65535] { R1238 += 1, R1239 += 1 };
  s0 -> s3 [66, 66] { R1239 += 1, R1169 += 1, R42 += 1 };
  s0 -> s4 [66, 66] { R1239 += 1, R1169 += 1, R42 += 1 };
  s0 -> s1 [67, 65535] { R1239 += 1, R1169 += 1, R42 += 1 };
  s1 -> s1 [0, 65] { R1239 += 1, R1169 += 1, R42 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R1239 += 1 };
  s1 -> s3 [66, 66] { R1239 += 1, R1169 += 1, R42 += 1 };
  s1 -> s4 [66, 66] { R1239 += 1, R1169 += 1, R42 += 1 };
  s1 -> s1 [67, 65535] { R1239 += 1, R1169 += 1, R42 += 1 };
  s2 -> s1 [0, 65] { R1239 += 1, R1169 += 1, R42 += 1 };
  s2 -> s2 [0, 65535] { R1239 += 1, R1168 += 1, R1169 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [66, 66] { R1239 += 1, R1169 += 1, R42 += 1 };
  s2 -> s4 [66, 66] { R1239 += 1, R1169 += 1, R42 += 1 };
  s2 -> s1 [67, 65535] { R1239 += 1, R1169 += 1, R42 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R1239 += 1 };
  s4 -> s5 [0, 65535] { R1239 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R1239 += 1, R1169 += 1, R42 += 1 };
  s5 -> s5 [0, 65535] { R1239 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 65] { R1241 += 1, R1171 += 1, R44 += 1 };
  s0 -> s0 [0, 65535] { R1240 += 1, R1241 += 1 };
  s0 -> s2 [0, 65535] { R1241 += 1, R1170 += 1, R1171 += 1 };
  s0 -> s3 [66, 66] { R1241 += 1, R1171 += 1, R44 += 1 };
  s0 -> s4 [66, 66] { R1241 += 1, R1171 += 1, R44 += 1 };
  s0 -> s1 [67, 65535] { R1241 += 1, R1171 += 1, R44 += 1 };
  s1 -> s1 [0, 65] { R1241 += 1, R1171 += 1, R44 += 1 };
  s1 -> s1 [0, 65535] { R1241 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [66, 66] { R1241 += 1, R1171 += 1, R44 += 1 };
  s1 -> s4 [66, 66] { R1241 += 1, R1171 += 1, R44 += 1 };
  s1 -> s1 [67, 65535] { R1241 += 1, R1171 += 1, R44 += 1 };
  s2 -> s1 [0, 65] { R1241 += 1, R1171 += 1, R44 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R1241 += 1, R1170 += 1, R1171 += 1 };
  s2 -> s3 [66, 66] { R1241 += 1, R1171 += 1, R44 += 1 };
  s2 -> s4 [66, 66] { R1241 += 1, R1171 += 1, R44 += 1 };
  s2 -> s1 [67, 65535] { R1241 += 1, R1171 += 1, R44 += 1 };
  s3 -> s3 [0, 65535] { R1241 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R1241 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R1241 += 1, R1171 += 1, R44 += 1 };
  s5 -> s5 [0, 65535] { R1241 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65] { R1243 += 1, R1173 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R1242 += 1, R1243 += 1 };
  s0 -> s2 [0, 65535] { R1243 += 1, R1172 += 1, R1173 += 1 };
  s0 -> s3 [66, 66] { R1243 += 1, R1173 += 1, R46 += 1, R47 += 1 };
  s0 -> s4 [66, 66] { R1243 += 1, R1173 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [67, 65535] { R1243 += 1, R1173 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65] { R1243 += 1, R1173 += 1, R46 += 1, R47 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1243 += 1 };
  s1 -> s3 [66, 66] { R1243 += 1, R1173 += 1, R46 += 1, R47 += 1 };
  s1 -> s4 [66, 66] { R1243 += 1, R1173 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [67, 65535] { R1243 += 1, R1173 += 1, R46 += 1, R47 += 1 };
  s2 -> s1 [0, 65] { R1243 += 1, R1173 += 1, R46 += 1, R47 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1243 += 1, R1172 += 1, R1173 += 1 };
  s2 -> s3 [66, 66] { R1243 += 1, R1173 += 1, R46 += 1, R47 += 1 };
  s2 -> s4 [66, 66] { R1243 += 1, R1173 += 1, R46 += 1, R47 += 1 };
  s2 -> s1 [67, 65535] { R1243 += 1, R1173 += 1, R46 += 1, R47 += 1 };
  s3 -> s3 [0, 65535] { R1243 += 1, R1173 += 1, R46 += 1, R47 += 1 };
  s3 -> s6 [0, 65535] { R1243 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1243 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1243 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 65] { R1245 += 1, R1175 += 1, R50 += 1, R51 += 1 };
  s0 -> s2 [0, 65535] { R1245 += 1, R1174 += 1, R1175 += 1 };
  s0 -> s0 [0, 65535] { R1244 += 1, R1245 += 1 };
  s0 -> s3 [66, 66] { R1245 += 1, R1175 += 1, R50 += 1, R51 += 1 };
  s0 -> s4 [66, 66] { R1245 += 1, R1175 += 1, R50 += 1, R51 += 1 };
  s0 -> s1 [67, 65535] { R1245 += 1, R1175 += 1, R50 += 1, R51 += 1 };
  s1 -> s1 [0, 65] { R1245 += 1, R1175 += 1, R50 += 1, R51 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1245 += 1 };
  s1 -> s3 [66, 66] { R1245 += 1, R1175 += 1, R50 += 1, R51 += 1 };
  s1 -> s4 [66, 66] { R1245 += 1, R1175 += 1, R50 += 1, R51 += 1 };
  s1 -> s1 [67, 65535] { R1245 += 1, R1175 += 1, R50 += 1, R51 += 1 };
  s2 -> s1 [0, 65] { R1245 += 1, R1175 += 1, R50 += 1, R51 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1245 += 1, R1174 += 1, R1175 += 1 };
  s2 -> s3 [66, 66] { R1245 += 1, R1175 += 1, R50 += 1, R51 += 1 };
  s2 -> s4 [66, 66] { R1245 += 1, R1175 += 1, R50 += 1, R51 += 1 };
  s2 -> s1 [67, 65535] { R1245 += 1, R1175 += 1, R50 += 1, R51 += 1 };
  s3 -> s3 [0, 65535] { R1245 += 1, R1175 += 1, R50 += 1, R51 += 1 };
  s3 -> s6 [0, 65535] { R1245 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1245 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1245 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 65] { R1247 += 1, R1189 += 1 };
  s0 -> s2 [0, 65535] { R1247 += 1, R1188 += 1, R1189 += 1 };
  s0 -> s0 [0, 65535] { R1246 += 1, R1247 += 1 };
  s0 -> s3 [66, 66] { R1247 += 1, R1189 += 1 };
  s0 -> s1 [67, 65535] { R1247 += 1, R1189 += 1 };
  s1 -> s1 [0, 65] { R1247 += 1, R1189 += 1 };
  s1 -> s3 [66, 66] { R1247 += 1, R1189 += 1 };
  s1 -> s1 [67, 65535] { R1247 += 1, R1189 += 1 };
  s2 -> s1 [0, 65] { R1247 += 1, R1189 += 1 };
  s2 -> s2 [0, 65535] { R1247 += 1, R1188 += 1, R1189 += 1 };
  s2 -> s3 [66, 66] { R1247 += 1, R1189 += 1 };
  s2 -> s1 [67, 65535] { R1247 += 1, R1189 += 1 };
  s3 -> s4 [0, 65535] { R1247 += 1 };
  s3 -> s3 [0, 65535] { R1247 += 1, R1189 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1247 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R1249 += 1, R1191 += 1, R1 += 1 };
  s0 -> s2 [0, 65535] { R1249 += 1, R1190 += 1, R1191 += 1 };
  s0 -> s0 [0, 65535] { R1248 += 1, R1249 += 1 };
  s1 -> s4 [0, 65535] { R1249 += 1 };
  s1 -> s1 [0, 65535] { R1249 += 1, R1191 += 1, R1 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R1249 += 1, R1191 += 1, R1 += 1 };
  s2 -> s2 [0, 65535] { R1249 += 1, R1190 += 1, R1191 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1249 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 65] { R1251 += 1, R1193 += 1 };
  s0 -> s0 [0, 65535] { R1250 += 1, R1251 += 1 };
  s0 -> s2 [0, 65535] { R1251 += 1, R1192 += 1, R1193 += 1 };
  s0 -> s3 [0, 65535] { R1251 += 1, R1193 += 1, R11 += 1 };
  s0 -> s4 [66, 66] { R1251 += 1, R1193 += 1 };
  s0 -> s1 [67, 65535] { R1251 += 1, R1193 += 1 };
  s1 -> s1 [0, 65] { R1251 += 1, R1193 += 1 };
  s1 -> s1 [0, 65535] { R1251 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s4 [66, 66] { R1251 += 1, R1193 += 1 };
  s1 -> s1 [67, 65535] { R1251 += 1, R1193 += 1 };
  s2 -> s1 [0, 65] { R1251 += 1, R1193 += 1 };
  s2 -> s2 [0, 65535] { R1251 += 1, R1192 += 1, R1193 += 1 };
  s2 -> s3 [0, 65535] { R1251 += 1, R1193 += 1, R11 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s4 [66, 66] { R1251 += 1, R1193 += 1 };
  s2 -> s1 [67, 65535] { R1251 += 1, R1193 += 1 };
  s3 -> s1 [0, 65] { R1251 += 1, R1193 += 1 };
  s3 -> s5 [0, 65535] { R1251 += 1 };
  s3 -> s3 [0, 65535] { R1251 += 1, R1193 += 1, R11 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s4 [66, 66] { R1251 += 1, R1193 += 1 };
  s3 -> s1 [67, 65535] { R1251 += 1, R1193 += 1 };
  s4 -> s4 [0, 65535] { R1251 += 1, R1193 += 1 };
  s5 -> s5 [0, 65535] { R1251 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65] { R1253 += 1, R1195 += 1, R1151 += 1 };
  s0 -> s0 [0, 65535] { R1252 += 1, R1253 += 1 };
  s0 -> s2 [0, 65535] { R1253 += 1, R1195 += 1, R1150 += 1, R1151 += 1 };
  s0 -> s3 [0, 65535] { R1253 += 1, R1194 += 1, R1195 += 1 };
  s0 -> s1 [67, 65535] { R1253 += 1, R1195 += 1, R1151 += 1 };
  s1 -> s1 [0, 65] { R1253 += 1, R1195 += 1, R1151 += 1 };
  s1 -> s1 [0, 65535] { R1253 += 1, R1195 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R1253 += 1 };
  s1 -> s1 [67, 65535] { R1253 += 1, R1195 += 1, R1151 += 1 };
  s2 -> s1 [0, 65] { R1253 += 1, R1195 += 1, R1151 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1253 += 1, R1195 += 1, R1150 += 1, R1151 += 1 };
  s2 -> s5 [0, 65535] { R1253 += 1 };
  s2 -> s1 [67, 65535] { R1253 += 1, R1195 += 1, R1151 += 1 };
  s3 -> s1 [0, 65] { R1253 += 1, R1195 += 1, R1151 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R1253 += 1, R1195 += 1, R1150 += 1, R1151 += 1 };
  s3 -> s3 [0, 65535] { R1253 += 1, R1194 += 1, R1195 += 1 };
  s3 -> s1 [67, 65535] { R1253 += 1, R1195 += 1, R1151 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1253 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 65535] { R1255 += 1, R1197 += 1, R1152 += 1, R1153 += 1 };
  s0 -> s0 [0, 65535] { R1254 += 1, R1255 += 1 };
  s0 -> s2 [0, 65535] { R1255 += 1, R1197 += 1, R1153 += 1, R19 += 1 };
  s0 -> s3 [0, 65535] { R1255 += 1, R1196 += 1, R1197 += 1 };
  s1 -> s1 [0, 65535] { R1255 += 1, R1197 += 1, R1152 += 1, R1153 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R1255 += 1 };
  s1 -> s2 [0, 65535] { R1255 += 1, R1197 += 1, R1153 += 1, R19 += 1 };
  s2 -> s5 [0, 65535] { R1255 += 1, R1197 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s6 [0, 65535] { R1255 += 1 };
  s2 -> s2 [0, 65535] { R1255 += 1, R1197 += 1, R1153 += 1, R19 += 1 };
  s3 -> s1 [0, 65535] { R1255 += 1, R1197 += 1, R1152 += 1, R1153 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R1255 += 1, R1197 += 1, R1153 += 1, R19 += 1 };
  s3 -> s3 [0, 65535] { R1255 += 1, R1196 += 1, R1197 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1255 += 1, R1197 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s6 [0, 65535] { R1255 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R1255 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 66] { R1257 += 1, R1199 += 1, R1155 += 1 };
  s0 -> s2 [0, 65535] { R1257 += 1, R1199 += 1, R1154 += 1, R1155 += 1 };
  s0 -> s0 [0, 65535] { R1256 += 1, R1257 += 1 };
  s0 -> s3 [0, 65535] { R1257 += 1, R1198 += 1, R1199 += 1 };
  s0 -> s1 [70, 65535] { R1257 += 1, R1199 += 1, R1155 += 1 };
  s1 -> s1 [0, 66] { R1257 += 1, R1199 += 1, R1155 += 1 };
  s1 -> s1 [0, 65535] { R1257 += 1, R1199 += 1 };
  s1 -> s5 [0, 65535] { R1257 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [70, 65535] { R1257 += 1, R1199 += 1, R1155 += 1 };
  s2 -> s1 [0, 66] { R1257 += 1, R1199 += 1, R1155 += 1 };
  s2 -> s2 [0, 65535] { R1257 += 1, R1199 += 1, R1154 += 1, R1155 += 1 };
  s2 -> s5 [0, 65535] { R1257 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [70, 65535] { R1257 += 1, R1199 += 1, R1155 += 1 };
  s3 -> s1 [0, 66] { R1257 += 1, R1199 += 1, R1155 += 1 };
  s3 -> s2 [0, 65535] { R1257 += 1, R1199 += 1, R1154 += 1, R1155 += 1 };
  s3 -> s3 [0, 65535] { R1257 += 1, R1198 += 1, R1199 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [70, 65535] { R1257 += 1, R1199 += 1, R1155 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1257 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R1259 += 1, R1201 += 1, R1157 += 1, R57 += 1 };
  s0 -> s2 [0, 65535] { R1259 += 1, R1201 += 1, R1156 += 1, R1157 += 1 };
  s0 -> s0 [0, 65535] { R1258 += 1, R1259 += 1 };
  s0 -> s3 [0, 65535] { R1259 += 1, R1200 += 1, R1201 += 1 };
  s1 -> s5 [0, 65535] { R1259 += 1 };
  s1 -> s1 [0, 65535] { R1259 += 1, R1201 += 1, R1157 += 1, R57 += 1 };
  s1 -> s6 [0, 65535] { R1259 += 1, R1201 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R1259 += 1 };
  s2 -> s1 [0, 65535] { R1259 += 1, R1201 += 1, R1157 += 1, R57 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1259 += 1, R1201 += 1, R1156 += 1, R1157 += 1 };
  s3 -> s1 [0, 65535] { R1259 += 1, R1201 += 1, R1157 += 1, R57 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R1259 += 1, R1201 += 1, R1156 += 1, R1157 += 1 };
  s3 -> s3 [0, 65535] { R1259 += 1, R1200 += 1, R1201 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1259 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R1259 += 1 };
  s6 -> s6 [0, 65535] { R1259 += 1, R1201 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 69] { R1261 += 1, R1203 += 1, R1159 += 1 };
  s0 -> s2 [0, 65535] { R1261 += 1, R1203 += 1, R1159 += 1, R59 += 1 };
  s0 -> s0 [0, 65535] { R1260 += 1, R1261 += 1 };
  s0 -> s3 [0, 65535] { R1261 += 1, R1203 += 1, R1158 += 1, R1159 += 1 };
  s0 -> s4 [0, 65535] { R1261 += 1, R1202 += 1, R1203 += 1 };
  s0 -> s1 [71, 65535] { R1261 += 1, R1203 += 1, R1159 += 1 };
  s1 -> s1 [0, 69] { R1261 += 1, R1203 += 1, R1159 += 1 };
  s1 -> s6 [0, 65535] { R1261 += 1 };
  s1 -> s1 [0, 65535] { R1261 += 1, R1203 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [71, 65535] { R1261 += 1, R1203 += 1, R1159 += 1 };
  s2 -> s1 [0, 69] { R1261 += 1, R1203 += 1, R1159 += 1 };
  s2 -> s2 [0, 65535] { R1261 += 1, R1203 += 1, R1159 += 1, R59 += 1 };
  s2 -> s6 [0, 65535] { R1261 += 1 };
  s2 -> s7 [0, 65535] { R1261 += 1, R1203 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [71, 65535] { R1261 += 1, R1203 += 1, R1159 += 1 };
  s3 -> s1 [0, 69] { R1261 += 1, R1203 += 1, R1159 += 1 };
  s3 -> s2 [0, 65535] { R1261 += 1, R1203 += 1, R1159 += 1, R59 += 1 };
  s3 -> s6 [0, 65535] { R1261 += 1 };
  s3 -> s3 [0, 65535] { R1261 += 1, R1203 += 1, R1158 += 1, R1159 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [71, 65535] { R1261 += 1, R1203 += 1, R1159 += 1 };
  s4 -> s1 [0, 69] { R1261 += 1, R1203 += 1, R1159 += 1 };
  s4 -> s2 [0, 65535] { R1261 += 1, R1203 += 1, R1159 += 1, R59 += 1 };
  s4 -> s3 [0, 65535] { R1261 += 1, R1203 += 1, R1158 += 1, R1159 += 1 };
  s4 -> s4 [0, 65535] { R1261 += 1, R1202 += 1, R1203 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s1 [71, 65535] { R1261 += 1, R1203 += 1, R1159 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1261 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R1261 += 1 };
  s7 -> s7 [0, 65535] { R1261 += 1, R1203 += 1 };
  s7 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 69] { R1263 += 1, R1205 += 1, R1161 += 1, R875 += 1 };
  s0 -> s2 [0, 65535] { R1263 += 1, R1205 += 1, R1160 += 1, R1161 += 1 };
  s0 -> s0 [0, 65535] { R1262 += 1, R1263 += 1 };
  s0 -> s3 [0, 65535] { R1263 += 1, R1204 += 1, R1205 += 1 };
  s0 -> s4 [70, 70] { R1263 += 1, R1205 += 1, R1161 += 1, R875 += 1 };
  s0 -> s1 [71, 65535] { R1263 += 1, R1205 += 1, R1161 += 1, R875 += 1 };
  s1 -> s1 [0, 69] { R1263 += 1, R1205 += 1, R1161 += 1, R875 += 1 };
  s1 -> s4 [70, 70] { R1263 += 1, R1205 += 1, R1161 += 1, R875 += 1 };
  s1 -> s1 [71, 65535] { R1263 += 1, R1205 += 1, R1161 += 1, R875 += 1 };
  s2 -> s1 [0, 69] { R1263 += 1, R1205 += 1, R1161 += 1, R875 += 1 };
  s2 -> s2 [0, 65535] { R1263 += 1, R1205 += 1, R1160 += 1, R1161 += 1 };
  s2 -> s4 [70, 70] { R1263 += 1, R1205 += 1, R1161 += 1, R875 += 1 };
  s2 -> s1 [71, 65535] { R1263 += 1, R1205 += 1, R1161 += 1, R875 += 1 };
  s3 -> s1 [0, 69] { R1263 += 1, R1205 += 1, R1161 += 1, R875 += 1 };
  s3 -> s2 [0, 65535] { R1263 += 1, R1205 += 1, R1160 += 1, R1161 += 1 };
  s3 -> s3 [0, 65535] { R1263 += 1, R1204 += 1, R1205 += 1 };
  s3 -> s4 [70, 70] { R1263 += 1, R1205 += 1, R1161 += 1, R875 += 1 };
  s3 -> s1 [71, 65535] { R1263 += 1, R1205 += 1, R1161 += 1, R875 += 1 };
  s4 -> s5 [0, 65535] { R1263 += 1, R1205 += 1, R1161 += 1 };
  s4 -> s6 [0, 65535] { R1263 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s4 [0, 65535] { R1263 += 1, R1205 += 1, R1161 += 1, R875 += 1 };
  s4 -> s8 [0, 65535] { R1263 += 1, R1205 += 1 };
  s5 -> s5 [0, 65535] { R1263 += 1, R1205 += 1, R1161 += 1 };
  s5 -> s6 [0, 65535] { R1263 += 1 };
  s5 -> s7 [0, 65535];
  s5 -> s8 [0, 65535] { R1263 += 1, R1205 += 1 };
  s6 -> s6 [0, 65535] { R1263 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  s8 -> s6 [0, 65535] { R1263 += 1 };
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R1263 += 1, R1205 += 1 };
  accepting s4, s8, s5, s6, s7;
};
automaton value2_29 {
  init s0;
  s0 -> s0 [0, 65535] { R1264 += 1, R1265 += 1 };
  s0 -> s1 [0, 65535] { R1265 += 1, R1207 += 1, R1162 += 1, R1163 += 1 };
  s0 -> s2 [0, 65535] { R1265 += 1, R1207 += 1, R1163 += 1 };
  s0 -> s3 [0, 65535] { R1265 += 1, R1206 += 1, R1207 += 1 };
  s1 -> s5 [0, 65535] { R1265 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R1265 += 1, R1207 += 1, R1162 += 1, R1163 += 1 };
  s1 -> s2 [0, 65535] { R1265 += 1, R1207 += 1, R1163 += 1 };
  s2 -> s5 [0, 65535] { R1265 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s6 [0, 65535] { R1265 += 1, R1207 += 1 };
  s2 -> s2 [0, 65535] { R1265 += 1, R1207 += 1, R1163 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R1265 += 1, R1207 += 1, R1162 += 1, R1163 += 1 };
  s3 -> s2 [0, 65535] { R1265 += 1, R1207 += 1, R1163 += 1 };
  s3 -> s3 [0, 65535] { R1265 += 1, R1206 += 1, R1207 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1265 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R1265 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R1265 += 1, R1207 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R1267 += 1, R1208 += 1, R1209 += 1 };
  s0 -> s2 [0, 65535] { R1267 += 1, R1209 += 1, R1176 += 1, R1177 += 1 };
  s0 -> s0 [0, 65535] { R1266 += 1, R1267 += 1 };
  s0 -> s3 [0, 65535] { R1267 += 1, R1209 += 1, R1177 += 1, R20 += 1 };
  s1 -> s1 [0, 65535] { R1267 += 1, R1208 += 1, R1209 += 1 };
  s1 -> s2 [0, 65535] { R1267 += 1, R1209 += 1, R1176 += 1, R1177 += 1 };
  s1 -> s3 [0, 65535] { R1267 += 1, R1209 += 1, R1177 += 1, R20 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R1267 += 1, R1209 += 1, R1176 += 1, R1177 += 1 };
  s2 -> s5 [0, 65535] { R1267 += 1 };
  s2 -> s3 [0, 65535] { R1267 += 1, R1209 += 1, R1177 += 1, R20 += 1 };
  s2 -> s6 [0, 65535];
  s3 -> s4 [0, 65535] { R1267 += 1, R1209 += 1 };
  s3 -> s5 [0, 65535] { R1267 += 1 };
  s3 -> s3 [0, 65535] { R1267 += 1, R1209 += 1, R1177 += 1, R20 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R1267 += 1, R1209 += 1 };
  s4 -> s5 [0, 65535] { R1267 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R1267 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 65] { R1269 += 1, R1211 += 1, R1179 += 1 };
  s0 -> s0 [0, 65535] { R1268 += 1, R1269 += 1 };
  s0 -> s2 [0, 65535] { R1269 += 1, R1211 += 1, R1178 += 1, R1179 += 1 };
  s0 -> s3 [0, 65535] { R1269 += 1, R1210 += 1, R1211 += 1 };
  s0 -> s4 [66, 66] { R1269 += 1, R1211 += 1, R1179 += 1 };
  s0 -> s5 [66, 66] { R1269 += 1, R1211 += 1, R1179 += 1 };
  s0 -> s6 [70, 70] { R1269 += 1, R1211 += 1, R1179 += 1 };
  s0 -> s1 [71, 65535] { R1269 += 1, R1211 += 1, R1179 += 1 };
  s1 -> s1 [0, 65] { R1269 += 1, R1211 += 1, R1179 += 1 };
  s1 -> s4 [66, 66] { R1269 += 1, R1211 += 1, R1179 += 1 };
  s1 -> s5 [66, 66] { R1269 += 1, R1211 += 1, R1179 += 1 };
  s1 -> s6 [70, 70] { R1269 += 1, R1211 += 1, R1179 += 1 };
  s1 -> s1 [71, 65535] { R1269 += 1, R1211 += 1, R1179 += 1 };
  s2 -> s1 [0, 65] { R1269 += 1, R1211 += 1, R1179 += 1 };
  s2 -> s2 [0, 65535] { R1269 += 1, R1211 += 1, R1178 += 1, R1179 += 1 };
  s2 -> s4 [66, 66] { R1269 += 1, R1211 += 1, R1179 += 1 };
  s2 -> s5 [66, 66] { R1269 += 1, R1211 += 1, R1179 += 1 };
  s2 -> s6 [70, 70] { R1269 += 1, R1211 += 1, R1179 += 1 };
  s2 -> s1 [71, 65535] { R1269 += 1, R1211 += 1, R1179 += 1 };
  s3 -> s1 [0, 65] { R1269 += 1, R1211 += 1, R1179 += 1 };
  s3 -> s2 [0, 65535] { R1269 += 1, R1211 += 1, R1178 += 1, R1179 += 1 };
  s3 -> s3 [0, 65535] { R1269 += 1, R1210 += 1, R1211 += 1 };
  s3 -> s4 [66, 66] { R1269 += 1, R1211 += 1, R1179 += 1 };
  s3 -> s5 [66, 66] { R1269 += 1, R1211 += 1, R1179 += 1 };
  s3 -> s6 [70, 70] { R1269 += 1, R1211 += 1, R1179 += 1 };
  s3 -> s1 [71, 65535] { R1269 += 1, R1211 += 1, R1179 += 1 };
  s5 -> s5 [0, 66] { R1269 += 1, R1211 += 1, R1179 += 1 };
  s5 -> s10 [70, 70] { R1269 += 1, R1211 += 1, R1179 += 1 };
  s5 -> s5 [71, 65535] { R1269 += 1, R1211 += 1, R1179 += 1 };
  s6 -> s6 [0, 65] { R1269 += 1, R1211 += 1, R1179 += 1 };
  s6 -> s7 [0, 65535];
  s6 -> s6 [0, 65535] { R1269 += 1, R1211 += 1 };
  s6 -> s8 [0, 65535] { R1269 += 1 };
  s6 -> s9 [66, 66] { R1269 += 1, R1211 += 1, R1179 += 1 };
  s6 -> s10 [66, 66] { R1269 += 1, R1211 += 1, R1179 += 1 };
  s6 -> s6 [70, 65535] { R1269 += 1, R1211 += 1, R1179 += 1 };
  s7 -> s7 [0, 65535];
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R1269 += 1 };
  s9 -> s7 [0, 65535];
  s9 -> s9 [0, 65535] { R1269 += 1, R1211 += 1 };
  s9 -> s8 [0, 65535] { R1269 += 1 };
  s10 -> s10 [0, 66] { R1269 += 1, R1211 += 1, R1179 += 1 };
  s10 -> s7 [0, 65535];
  s10 -> s10 [0, 65535] { R1269 += 1, R1211 += 1 };
  s10 -> s8 [0, 65535] { R1269 += 1 };
  s10 -> s10 [70, 65535] { R1269 += 1, R1211 += 1, R1179 += 1 };
  accepting s8, s9, s6, s7, s10;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 65] { R1271 += 1, R1213 += 1, R1181 += 1, R56 += 1 };
  s0 -> s2 [0, 65535] { R1271 += 1, R1212 += 1, R1213 += 1 };
  s0 -> s3 [0, 65535] { R1271 += 1, R1213 += 1, R1180 += 1, R1181 += 1 };
  s0 -> s0 [0, 65535] { R1270 += 1, R1271 += 1 };
  s0 -> s4 [66, 66] { R1271 += 1, R1213 += 1, R1181 += 1, R56 += 1 };
  s0 -> s5 [66, 66] { R1271 += 1, R1213 += 1, R1181 += 1, R56 += 1 };
  s0 -> s1 [67, 65535] { R1271 += 1, R1213 += 1, R1181 += 1, R56 += 1 };
  s1 -> s1 [0, 65] { R1271 += 1, R1213 += 1, R1181 += 1, R56 += 1 };
  s1 -> s6 [0, 65535] { R1271 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s1 [0, 65535] { R1271 += 1, R1213 += 1 };
  s1 -> s4 [66, 66] { R1271 += 1, R1213 += 1, R1181 += 1, R56 += 1 };
  s1 -> s5 [66, 66] { R1271 += 1, R1213 += 1, R1181 += 1, R56 += 1 };
  s1 -> s1 [67, 65535] { R1271 += 1, R1213 += 1, R1181 += 1, R56 += 1 };
  s2 -> s1 [0, 65] { R1271 += 1, R1213 += 1, R1181 += 1, R56 += 1 };
  s2 -> s2 [0, 65535] { R1271 += 1, R1212 += 1, R1213 += 1 };
  s2 -> s3 [0, 65535] { R1271 += 1, R1213 += 1, R1180 += 1, R1181 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s4 [66, 66] { R1271 += 1, R1213 += 1, R1181 += 1, R56 += 1 };
  s2 -> s5 [66, 66] { R1271 += 1, R1213 += 1, R1181 += 1, R56 += 1 };
  s2 -> s1 [67, 65535] { R1271 += 1, R1213 += 1, R1181 += 1, R56 += 1 };
  s3 -> s1 [0, 65] { R1271 += 1, R1213 += 1, R1181 += 1, R56 += 1 };
  s3 -> s6 [0, 65535] { R1271 += 1 };
  s3 -> s3 [0, 65535] { R1271 += 1, R1213 += 1, R1180 += 1, R1181 += 1 };
  s3 -> s8 [0, 65535];
  s3 -> s4 [66, 66] { R1271 += 1, R1213 += 1, R1181 += 1, R56 += 1 };
  s3 -> s5 [66, 66] { R1271 += 1, R1213 += 1, R1181 += 1, R56 += 1 };
  s3 -> s1 [67, 65535] { R1271 += 1, R1213 += 1, R1181 += 1, R56 += 1 };
  s4 -> s6 [0, 65535] { R1271 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s4 [0, 65535] { R1271 += 1, R1213 += 1 };
  s5 -> s6 [0, 65535] { R1271 += 1 };
  s5 -> s7 [0, 65535] { R1271 += 1, R1213 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s5 [0, 65535] { R1271 += 1, R1213 += 1, R1181 += 1, R56 += 1 };
  s6 -> s6 [0, 65535] { R1271 += 1 };
  s6 -> s8 [0, 65535];
  s7 -> s6 [0, 65535] { R1271 += 1 };
  s7 -> s7 [0, 65535] { R1271 += 1, R1213 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 65] { R1273 += 1, R1215 += 1, R1183 += 1, R58 += 1 };
  s0 -> s2 [0, 65535] { R1273 += 1, R1214 += 1, R1215 += 1 };
  s0 -> s0 [0, 65535] { R1272 += 1, R1273 += 1 };
  s0 -> s3 [0, 65535] { R1273 += 1, R1215 += 1, R1182 += 1, R1183 += 1 };
  s0 -> s4 [66, 66] { R1273 += 1, R1215 += 1, R1183 += 1, R58 += 1 };
  s0 -> s5 [66, 66] { R1273 += 1, R1215 += 1, R1183 += 1, R58 += 1 };
  s0 -> s1 [67, 65535] { R1273 += 1, R1215 += 1, R1183 += 1, R58 += 1 };
  s1 -> s1 [0, 65] { R1273 += 1, R1215 += 1, R1183 += 1, R58 += 1 };
  s1 -> s1 [0, 65535] { R1273 += 1, R1215 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s7 [0, 65535] { R1273 += 1 };
  s1 -> s4 [66, 66] { R1273 += 1, R1215 += 1, R1183 += 1, R58 += 1 };
  s1 -> s5 [66, 66] { R1273 += 1, R1215 += 1, R1183 += 1, R58 += 1 };
  s1 -> s1 [67, 65535] { R1273 += 1, R1215 += 1, R1183 += 1, R58 += 1 };
  s2 -> s1 [0, 65] { R1273 += 1, R1215 += 1, R1183 += 1, R58 += 1 };
  s2 -> s2 [0, 65535] { R1273 += 1, R1214 += 1, R1215 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s3 [0, 65535] { R1273 += 1, R1215 += 1, R1182 += 1, R1183 += 1 };
  s2 -> s4 [66, 66] { R1273 += 1, R1215 += 1, R1183 += 1, R58 += 1 };
  s2 -> s5 [66, 66] { R1273 += 1, R1215 += 1, R1183 += 1, R58 += 1 };
  s2 -> s1 [67, 65535] { R1273 += 1, R1215 += 1, R1183 += 1, R58 += 1 };
  s3 -> s1 [0, 65] { R1273 += 1, R1215 += 1, R1183 += 1, R58 += 1 };
  s3 -> s8 [0, 65535];
  s3 -> s7 [0, 65535] { R1273 += 1 };
  s3 -> s3 [0, 65535] { R1273 += 1, R1215 += 1, R1182 += 1, R1183 += 1 };
  s3 -> s4 [66, 66] { R1273 += 1, R1215 += 1, R1183 += 1, R58 += 1 };
  s3 -> s5 [66, 66] { R1273 += 1, R1215 += 1, R1183 += 1, R58 += 1 };
  s3 -> s1 [67, 65535] { R1273 += 1, R1215 += 1, R1183 += 1, R58 += 1 };
  s4 -> s4 [0, 65535] { R1273 += 1, R1215 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s7 [0, 65535] { R1273 += 1 };
  s5 -> s6 [0, 65535] { R1273 += 1, R1215 += 1 };
  s5 -> s7 [0, 65535] { R1273 += 1 };
  s5 -> s5 [0, 65535] { R1273 += 1, R1215 += 1, R1183 += 1, R58 += 1 };
  s5 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R1273 += 1, R1215 += 1 };
  s6 -> s7 [0, 65535] { R1273 += 1 };
  s6 -> s8 [0, 65535];
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R1273 += 1 };
  s8 -> s8 [0, 65535];
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 65] { R1275 += 1, R1217 += 1, R1185 += 1, R872 += 1, R873 += 1 };
  s0 -> s2 [0, 65] { R1275 += 1, R1217 += 1, R1185 += 1, R873 += 1 };
  s0 -> s3 [0, 65535] { R1275 += 1, R1217 += 1, R1184 += 1, R1185 += 1 };
  s0 -> s4 [0, 65535] { R1275 += 1, R1216 += 1, R1217 += 1 };
  s0 -> s0 [0, 65535] { R1274 += 1, R1275 += 1 };
  s0 -> s5 [66, 66] { R1275 += 1, R1217 += 1, R1185 += 1, R873 += 1 };
  s0 -> s6 [66, 66] { R1275 += 1, R1217 += 1, R1185 += 1, R873 += 1 };
  s0 -> s7 [66, 66] { R1275 += 1, R1217 += 1, R1185 += 1, R872 += 1, R873 += 1 };
  s0 -> s8 [66, 66] { R1275 += 1, R1217 += 1, R1185 += 1, R872 += 1, R873 += 1 };
  s0 -> s2 [67, 69] { R1275 += 1, R1217 += 1, R1185 += 1, R873 += 1 };
  s0 -> s1 [67, 65535] { R1275 += 1, R1217 += 1, R1185 += 1, R872 += 1, R873 += 1 };
  s0 -> s2 [71, 65535] { R1275 += 1, R1217 += 1, R1185 += 1, R873 += 1 };
  s1 -> s1 [0, 65] { R1275 += 1, R1217 += 1, R1185 += 1, R872 += 1, R873 += 1 };
  s1 -> s2 [0, 65] { R1275 += 1, R1217 += 1, R1185 += 1, R873 += 1 };
  s1 -> s5 [66, 66] { R1275 += 1, R1217 += 1, R1185 += 1, R873 += 1 };
  s1 -> s6 [66, 66] { R1275 += 1, R1217 += 1, R1185 += 1, R873 += 1 };
  s1 -> s7 [66, 66] { R1275 += 1, R1217 += 1, R1185 += 1, R872 += 1, R873 += 1 };
  s1 -> s8 [66, 66] { R1275 += 1, R1217 += 1, R1185 += 1, R872 += 1, R873 += 1 };
  s1 -> s2 [67, 69] { R1275 += 1, R1217 += 1, R1185 += 1, R873 += 1 };
  s1 -> s1 [67, 65535] { R1275 += 1, R1217 += 1, R1185 += 1, R872 += 1, R873 += 1 };
  s1 -> s2 [71, 65535] { R1275 += 1, R1217 += 1, R1185 += 1, R873 += 1 };
  s2 -> s2 [0, 65] { R1275 += 1, R1217 += 1, R1185 += 1, R873 += 1 };
  s2 -> s9 [0, 65535];
  s2 -> s10 [0, 65535] { R1275 += 1 };
  s2 -> s2 [0, 65535] { R1275 += 1, R1217 += 1 };
  s2 -> s5 [66, 66] { R1275 += 1, R1217 += 1, R1185 += 1, R873 += 1 };
  s2 -> s6 [66, 66] { R1275 += 1, R1217 += 1, R1185 += 1, R873 += 1 };
  s2 -> s2 [67, 69] { R1275 += 1, R1217 += 1, R1185 += 1, R873 += 1 };
  s2 -> s2 [71, 65535] { R1275 += 1, R1217 += 1, R1185 += 1, R873 += 1 };
  s3 -> s1 [0, 65] { R1275 += 1, R1217 += 1, R1185 += 1, R872 += 1, R873 += 1 };
  s3 -> s2 [0, 65] { R1275 += 1, R1217 += 1, R1185 += 1, R873 += 1 };
  s3 -> s3 [0, 65535] { R1275 += 1, R1217 += 1, R1184 += 1, R1185 += 1 };
  s3 -> s5 [66, 66] { R1275 += 1, R1217 += 1, R1185 += 1, R873 += 1 };
  s3 -> s6 [66, 66] { R1275 += 1, R1217 += 1, R1185 += 1, R873 += 1 };
  s3 -> s7 [66, 66] { R1275 += 1, R1217 += 1, R1185 += 1, R872 += 1, R873 += 1 };
  s3 -> s8 [66, 66] { R1275 += 1, R1217 += 1, R1185 += 1, R872 += 1, R873 += 1 };
  s3 -> s2 [67, 69] { R1275 += 1, R1217 += 1, R1185 += 1, R873 += 1 };
  s3 -> s1 [67, 65535] { R1275 += 1, R1217 += 1, R1185 += 1, R872 += 1, R873 += 1 };
  s3 -> s2 [71, 65535] { R1275 += 1, R1217 += 1, R1185 += 1, R873 += 1 };
  s4 -> s1 [0, 65] { R1275 += 1, R1217 += 1, R1185 += 1, R872 += 1, R873 += 1 };
  s4 -> s2 [0, 65] { R1275 += 1, R1217 += 1, R1185 += 1, R873 += 1 };
  s4 -> s3 [0, 65535] { R1275 += 1, R1217 += 1, R1184 += 1, R1185 += 1 };
  s4 -> s4 [0, 65535] { R1275 += 1, R1216 += 1, R1217 += 1 };
  s4 -> s5 [66, 66] { R1275 += 1, R1217 += 1, R1185 += 1, R873 += 1 };
  s4 -> s6 [66, 66] { R1275 += 1, R1217 += 1, R1185 += 1, R873 += 1 };
  s4 -> s7 [66, 66] { R1275 += 1, R1217 += 1, R1185 += 1, R872 += 1, R873 += 1 };
  s4 -> s8 [66, 66] { R1275 += 1, R1217 += 1, R1185 += 1, R872 += 1, R873 += 1 };
  s4 -> s2 [67, 69] { R1275 += 1, R1217 += 1, R1185 += 1, R873 += 1 };
  s4 -> s1 [67, 65535] { R1275 += 1, R1217 += 1, R1185 += 1, R872 += 1, R873 += 1 };
  s4 -> s2 [71, 65535] { R1275 += 1, R1217 += 1, R1185 += 1, R873 += 1 };
  s5 -> s9 [0, 65535];
  s5 -> s5 [0, 65535] { R1275 += 1, R1217 += 1 };
  s5 -> s10 [0, 65535] { R1275 += 1 };
  s6 -> s6 [0, 69] { R1275 += 1, R1217 += 1, R1185 += 1, R873 += 1 };
  s6 -> s9 [0, 65535];
  s6 -> s6 [0, 65535] { R1275 += 1, R1217 += 1 };
  s6 -> s10 [0, 65535] { R1275 += 1 };
  s6 -> s6 [71, 65535] { R1275 += 1, R1217 += 1, R1185 += 1, R873 += 1 };
  s8 -> s6 [0, 69] { R1275 += 1, R1217 += 1, R1185 += 1, R873 += 1 };
  s8 -> s8 [0, 65535] { R1275 += 1, R1217 += 1, R1185 += 1, R872 += 1, R873 += 1 };
  s8 -> s6 [71, 65535] { R1275 += 1, R1217 += 1, R1185 += 1, R873 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R1275 += 1 };
  accepting s5, s2, s9, s6, s10;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 65] { R1277 += 1, R1219 += 1, R1187 += 1, R1145 += 1, R1146 += 1 };
  s0 -> s2 [0, 65] { R1277 += 1, R1219 += 1, R1187 += 1, R1144 += 1, R1145 += 1 };
  s0 -> s3 [0, 65535] { R1277 += 1, R1218 += 1, R1219 += 1 };
  s0 -> s0 [0, 65535] { R1276 += 1, R1277 += 1 };
  s0 -> s4 [0, 65535] { R1277 += 1, R1219 += 1, R1186 += 1, R1187 += 1 };
  s0 -> s5 [66, 66] { R1277 += 1, R1219 += 1, R1187 += 1, R1144 += 1, R1145 += 1 };
  s0 -> s6 [66, 66] { R1277 += 1, R1219 += 1, R1187 += 1, R1145 += 1, R1146 += 1 };
  s0 -> s7 [66, 66] { R1277 += 1, R1219 += 1, R1187 += 1, R1145 += 1, R1146 += 1 };
  s0 -> s8 [66, 66] { R1277 += 1, R1219 += 1, R1187 += 1, R1144 += 1, R1145 += 1 };
  s0 -> s1 [67, 65535] { R1277 += 1, R1219 += 1, R1187 += 1, R1145 += 1, R1146 += 1 };
  s0 -> s2 [67, 65535] { R1277 += 1, R1219 += 1, R1187 += 1, R1144 += 1, R1145 += 1 };
  s1 -> s1 [0, 65] { R1277 += 1, R1219 += 1, R1187 += 1, R1145 += 1, R1146 += 1 };
  s1 -> s13 [0, 65] { R1277 += 1, R1219 += 1, R1187 += 1 };
  s1 -> s6 [66, 66] { R1277 += 1, R1219 += 1, R1187 += 1, R1145 += 1, R1146 += 1 };
  s1 -> s14 [66, 66] { R1277 += 1, R1219 += 1, R1187 += 1 };
  s1 -> s7 [66, 66] { R1277 += 1, R1219 += 1, R1187 += 1, R1145 += 1, R1146 += 1 };
  s1 -> s9 [66, 66] { R1277 += 1, R1219 += 1, R1187 += 1 };
  s1 -> s1 [67, 65535] { R1277 += 1, R1219 += 1, R1187 += 1, R1145 += 1, R1146 += 1 };
  s1 -> s13 [67, 65535] { R1277 += 1, R1219 += 1, R1187 += 1 };
  s2 -> s1 [0, 65] { R1277 += 1, R1219 += 1, R1187 += 1, R1145 += 1, R1146 += 1 };
  s2 -> s2 [0, 65] { R1277 += 1, R1219 += 1, R1187 += 1, R1144 += 1, R1145 += 1 };
  s2 -> s5 [66, 66] { R1277 += 1, R1219 += 1, R1187 += 1, R1144 += 1, R1145 += 1 };
  s2 -> s6 [66, 66] { R1277 += 1, R1219 += 1, R1187 += 1, R1145 += 1, R1146 += 1 };
  s2 -> s7 [66, 66] { R1277 += 1, R1219 += 1, R1187 += 1, R1145 += 1, R1146 += 1 };
  s2 -> s8 [66, 66] { R1277 += 1, R1219 += 1, R1187 += 1, R1144 += 1, R1145 += 1 };
  s2 -> s1 [67, 65535] { R1277 += 1, R1219 += 1, R1187 += 1, R1145 += 1, R1146 += 1 };
  s2 -> s2 [67, 65535] { R1277 += 1, R1219 += 1, R1187 += 1, R1144 += 1, R1145 += 1 };
  s3 -> s1 [0, 65] { R1277 += 1, R1219 += 1, R1187 += 1, R1145 += 1, R1146 += 1 };
  s3 -> s2 [0, 65] { R1277 += 1, R1219 += 1, R1187 += 1, R1144 += 1, R1145 += 1 };
  s3 -> s3 [0, 65535] { R1277 += 1, R1218 += 1, R1219 += 1 };
  s3 -> s4 [0, 65535] { R1277 += 1, R1219 += 1, R1186 += 1, R1187 += 1 };
  s3 -> s5 [66, 66] { R1277 += 1, R1219 += 1, R1187 += 1, R1144 += 1, R1145 += 1 };
  s3 -> s6 [66, 66] { R1277 += 1, R1219 += 1, R1187 += 1, R1145 += 1, R1146 += 1 };
  s3 -> s7 [66, 66] { R1277 += 1, R1219 += 1, R1187 += 1, R1145 += 1, R1146 += 1 };
  s3 -> s8 [66, 66] { R1277 += 1, R1219 += 1, R1187 += 1, R1144 += 1, R1145 += 1 };
  s3 -> s1 [67, 65535] { R1277 += 1, R1219 += 1, R1187 += 1, R1145 += 1, R1146 += 1 };
  s3 -> s2 [67, 65535] { R1277 += 1, R1219 += 1, R1187 += 1, R1144 += 1, R1145 += 1 };
  s4 -> s1 [0, 65] { R1277 += 1, R1219 += 1, R1187 += 1, R1145 += 1, R1146 += 1 };
  s4 -> s2 [0, 65] { R1277 += 1, R1219 += 1, R1187 += 1, R1144 += 1, R1145 += 1 };
  s4 -> s4 [0, 65535] { R1277 += 1, R1219 += 1, R1186 += 1, R1187 += 1 };
  s4 -> s5 [66, 66] { R1277 += 1, R1219 += 1, R1187 += 1, R1144 += 1, R1145 += 1 };
  s4 -> s6 [66, 66] { R1277 += 1, R1219 += 1, R1187 += 1, R1145 += 1, R1146 += 1 };
  s4 -> s7 [66, 66] { R1277 += 1, R1219 += 1, R1187 += 1, R1145 += 1, R1146 += 1 };
  s4 -> s8 [66, 66] { R1277 += 1, R1219 += 1, R1187 += 1, R1144 += 1, R1145 += 1 };
  s4 -> s1 [67, 65535] { R1277 += 1, R1219 += 1, R1187 += 1, R1145 += 1, R1146 += 1 };
  s4 -> s2 [67, 65535] { R1277 += 1, R1219 += 1, R1187 += 1, R1144 += 1, R1145 += 1 };
  s5 -> s5 [0, 65535] { R1277 += 1, R1219 += 1, R1187 += 1, R1144 += 1, R1145 += 1 };
  s5 -> s6 [0, 65535] { R1277 += 1, R1219 += 1, R1187 += 1, R1145 += 1, R1146 += 1 };
  s6 -> s6 [0, 65535] { R1277 += 1, R1219 += 1, R1187 += 1, R1145 += 1, R1146 += 1 };
  s6 -> s9 [0, 65535] { R1277 += 1, R1219 += 1, R1187 += 1 };
  s9 -> s10 [0, 65535] { R1277 += 1, R1219 += 1 };
  s9 -> s11 [0, 65535] { R1277 += 1 };
  s9 -> s12 [0, 65535];
  s9 -> s9 [0, 65535] { R1277 += 1, R1219 += 1, R1187 += 1 };
  s10 -> s10 [0, 65535] { R1277 += 1, R1219 += 1 };
  s10 -> s11 [0, 65535] { R1277 += 1 };
  s10 -> s12 [0, 65535];
  s11 -> s11 [0, 65535] { R1277 += 1 };
  s11 -> s12 [0, 65535];
  s12 -> s12 [0, 65535];
  s13 -> s13 [0, 65] { R1277 += 1, R1219 += 1, R1187 += 1 };
  s13 -> s13 [0, 65535] { R1277 += 1, R1219 += 1 };
  s13 -> s11 [0, 65535] { R1277 += 1 };
  s13 -> s12 [0, 65535];
  s13 -> s14 [66, 66] { R1277 += 1, R1219 += 1, R1187 += 1 };
  s13 -> s9 [66, 66] { R1277 += 1, R1219 += 1, R1187 += 1 };
  s13 -> s13 [67, 65535] { R1277 += 1, R1219 += 1, R1187 += 1 };
  s14 -> s11 [0, 65535] { R1277 += 1 };
  s14 -> s12 [0, 65535];
  s14 -> s14 [0, 65535] { R1277 += 1, R1219 += 1 };
  accepting s12, s13, s9, s14, s10, s11;
};
};
synchronised {  // Automata constraining P37
automaton P37_0 {
  init s0;
  s0 -> s1 [9, 9];
  accepting s1;
};
};
synchronised {  // Automata constraining P38
automaton P38_0 {
  init s0;
  s0 -> s1 [10, 10];
  accepting s1;
};
};
synchronised {  // Automata constraining P36
automaton P36_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
constraint R1 = R1161 && R2 = R1219 && R3 - R1277 = 1 && R22 - R1219 = -1 && R23 = R1219 && R24 - R1219 = -1 && R25 = R1219 && R26 = 0 && R27 = 1 && R28 = 0 && R29 = 1 && R30 = R1277 && R31 - R1277 = 1 && R32 = R1277 && R33 - R1277 = 1 && R34 = 0 && R35 = 1 && R36 = 0 && R37 = 1 && R42 + R57 + R56 + -1*R875 + -1*R873 - R47 = 0 && R46 + R874 + R872 = 0 && R1160 = 0 && R1178 = 0 && R1179 = 0 && R1184 = 0 && R1185 = 0 && R1186 = 0 && R1187 = 0 && R1188 = 0 && R1189 = R1219 && R1190 = 0 && R1191 = R1219 && R1192 = 0 && R1193 = R1219 && R1194 = 0 && R1195 = R1219 && R1196 = 0 && R1197 = R1219 && R1198 = 0 && R1199 = R1219 && R1200 = 0 && R1201 = R1219 && R1202 = 0 && R1203 = R1219 && R1204 = 0 && R1205 = R1219 && R1206 = 0 && R1207 = R1219 && R1208 = 0 && R1209 = R1219 && R1210 = 0 && R1211 = R1219 && R1212 = 0 && R1213 = R1219 && R1214 = 0 && R1215 = R1219 && R1216 = 0 && R1217 = R1219 && R1218 = 0 && R1220 = 0 && R1221 = R1277 && R1222 = 0 && R1223 = R1277 && R1224 = 0 && R1225 = R1277 && R1226 = 0 && R1227 = R1277 && R1228 = 0 && R1229 = R1277 && R1230 = 0 && R1231 = R1277 && R1232 = 0 && R1233 = R1277 && R1234 = 0 && R1235 = R1277 && R1236 = 0 && R1237 = R1277 && R1238 = 0 && R1239 = R1277 && R1240 = 0 && R1241 = R1277 && R1242 = 0 && R1243 = R1277 && R1244 = 0 && R1245 = R1277 && R1246 = 0 && R1247 = R1277 && R1248 = 0 && R1249 = R1277 && R1250 = 0 && R1251 = R1277 && R1252 = 0 && R1253 = R1277 && R1254 = 0 && R1255 = R1277 && R1256 = 0 && R1257 = R1277 && R1258 = 0 && R1259 = R1277 && R1260 = 0 && R1261 = R1277 && R1262 = 0 && R1263 = R1277 && R1264 = 0 && R1265 = R1277 && R1266 = 0 && R1267 = R1277 && R1268 = 0 && R1269 = R1277 && R1270 = 0 && R1271 = R1277 && R1272 = 0 && R1273 = R1277 && R1274 = 0 && R1275 = R1277 && R1276 = 0 && R11 < 1 && R14 < 1 && R17 < 1 && R44 + R59 + R58 < 1 && -1*R875 + -1*R873 - R47 < 1 && -1 < R1161 && 0 < R1219 && -1 < R1277 && (R47 + R875 + R873 != 0 || R52 + R1149 + R1146 = 0 || (R50 + R1147 + R1144 = 0 && R51 + R1148 + R1145 = 0)) && (R50 + R1147 + R1144 != 0 || R47 + R875 + R873 + -1*R1148 + -1*R1145 - R51 = 0 || R47 + R875 + R873 < 1) && (R1150 != 0 || R1151 = R1161 || (R19 = 0 && R1161 = 0)) && (R1152 != 0 || R1153 = R1161 || (R19 = 0 && R1161 = 0)) && (R1154 != 0 || R1155 = R1161 || (R19 = 0 && R1161 = 0)) && (R1156 != 0 || R1157 = R1161 || (R19 = 0 && R1161 = 0)) && (R1158 != 0 || R1159 = R1161 || (R19 = 0 && R1161 = 0)) && (R1162 != 0 || R1161 = R1163 || (R19 = 0 && R1161 = 0)) && (R20 = 0 || (R1176 = 0 && R1177 = 0)) && (R20 = 0 || (R1180 = 0 && R1181 = 0)) && (R20 = 0 || (R1182 = 0 && R1183 = 0)) && (R21 = 0 || (R1164 = 0 && R1165 = 0)) && (R21 = 0 || (R1166 = 0 && R1167 = 0)) && (R21 = 0 || (R1168 = 0 && R1169 = 0)) && (R21 = 0 || (R1170 = 0 && R1171 = 0)) && (R21 = 0 || (R1172 = 0 && R1173 = 0)) && (R21 = 0 || (R1174 = 0 && R1175 = 0)) && (R50 + R1147 + R1144 = 0 || R47 + R875 + R873 < 1) && (R1150 = 0 || (R19 = 0 && R1161 = 0)) && (R1152 = 0 || (R19 = 0 && R1161 = 0)) && (R1154 = 0 || (R19 = 0 && R1161 = 0)) && (R1156 = 0 || (R19 = 0 && R1161 = 0)) && (R1158 = 0 || (R19 = 0 && R1161 = 0)) && (R1162 = 0 || (R19 = 0 && R1161 = 0));
// End of Parikh automata intersection problem
