// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R1278, R1279, R1280, R1281, R1282, R1283, R1284, R1285, R1286, R1287, R1288, R1289, R1290, R1291, R1292, R1293, R1294, R1295, R1296, R1297, R1298, R1299, R1300, R1301, R1302, R1303, R1304, R1305, R1306, R1307, R1308, R1309, R1310, R1311, R1312, R1313, R1314, R1315, R1316, R1317, R1318, R1319, R1320, R1321, R1322, R1323, R1324, R1325, R1326, R1327, R1328, R1329, R1330, R1331, R1332, R1333, R1334, R1335, R1336, R1337, R1338, R1339, R1340, R1341, R1342, R1343, R1344, R1345, R1346, R1347, R1348, R1349, R1350, R1351, R1352, R1353, R1354, R1355, R1356, R1357, R1358, R1359, R1360, R1361, R1362, R1363, R1364, R1365, R1366, R1367, R1368, R1369, R1370, R1371, R1372, R1373, R1374, R1375, R1376, R1377, R1378, R1379, R1380, R1381, R1382, R1383, R1384, R1385, R1386, R1387, R1388, R1389, R1390, R1391, R1392, R1393, R1394, R1395, R1396, R1397, R1398, R1399, R14, R1400, R1401, R1402, R1403, R1404, R1405, R1406, R1407, R1408, R1409, R1410, R1411, R1412, R1413, R1414, R1415, R17, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R31, R32, R33, R34, R35, R36, R37, R4, R42, R44, R46, R47, R5, R50, R51, R52, R56, R57, R58, R59, R6, R7;
synchronised {  // Automata constraining P9
automaton P9_0 {
  init s0;
  s0 -> s1 [98, 98];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R17 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s0 [0, 65535] { R30 += 1, R31 += 1 };
  s0 -> s1 [13, 13] { R31 += 1 };
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value2_4 {
  init s0;
  s0 -> s0 [0, 65535] { R32 += 1, R33 += 1 };
  s0 -> s1 [0, 65535] { R33 += 1, R6 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R33 += 1, R6 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 8] { R35 += 1 };
  s0 -> s0 [0, 65535] { R34 += 1, R35 += 1 };
  s0 -> s2 [9, 13] { R35 += 1 };
  s0 -> s1 [14, 31] { R35 += 1 };
  s0 -> s2 [32, 32] { R35 += 1 };
  s0 -> s1 [33, 65535] { R35 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R35 += 1 };
  s2 -> s1 [0, 65535] { R35 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 65535] { R37 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R36 += 1, R37 += 1 };
  s1 -> s1 [0, 65535] { R37 += 1, R7 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 64] { R1359 += 1 };
  s0 -> s0 [0, 65535] { R1358 += 1, R1359 += 1 };
  s0 -> s2 [66, 66] { R1359 += 1 };
  s0 -> s1 [67, 65535] { R1359 += 1 };
  s1 -> s1 [0, 64] { R1359 += 1 };
  s1 -> s2 [66, 66] { R1359 += 1 };
  s1 -> s1 [67, 65535] { R1359 += 1 };
  s2 -> s2 [0, 64] { R1359 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [66, 65535] { R1359 += 1 };
  accepting s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R1360 += 1, R1361 += 1 };
  s0 -> s1 [0, 65535] { R1361 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R1361 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 65] { R1363 += 1 };
  s0 -> s0 [0, 65535] { R1362 += 1, R1363 += 1 };
  s0 -> s2 [0, 65535] { R1363 += 1, R14 += 1 };
  s0 -> s3 [66, 66] { R1363 += 1 };
  s0 -> s1 [67, 65535] { R1363 += 1 };
  s1 -> s1 [0, 65] { R1363 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [66, 66] { R1363 += 1 };
  s1 -> s1 [67, 65535] { R1363 += 1 };
  s2 -> s1 [0, 65] { R1363 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1363 += 1, R14 += 1 };
  s2 -> s3 [66, 66] { R1363 += 1 };
  s2 -> s1 [67, 65535] { R1363 += 1 };
  s3 -> s3 [0, 65535] { R1363 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 8] { R1365 += 1, R23 += 1 };
  s0 -> s0 [0, 65535] { R1364 += 1, R1365 += 1 };
  s0 -> s2 [0, 65535] { R1365 += 1, R22 += 1, R23 += 1 };
  s0 -> s3 [9, 13] { R1365 += 1, R23 += 1 };
  s0 -> s1 [14, 31] { R1365 += 1, R23 += 1 };
  s0 -> s3 [32, 32] { R1365 += 1, R23 += 1 };
  s0 -> s1 [33, 65535] { R1365 += 1, R23 += 1 };
  s1 -> s5 [0, 65535] { R1365 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R1365 += 1, R23 += 1 };
  s2 -> s1 [0, 8] { R1365 += 1, R23 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1365 += 1, R22 += 1, R23 += 1 };
  s2 -> s3 [9, 13] { R1365 += 1, R23 += 1 };
  s2 -> s1 [14, 31] { R1365 += 1, R23 += 1 };
  s2 -> s3 [32, 32] { R1365 += 1, R23 += 1 };
  s2 -> s1 [33, 65535] { R1365 += 1, R23 += 1 };
  s3 -> s1 [0, 65535] { R1365 += 1, R23 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1365 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 65535] { R1367 += 1, R24 += 1, R25 += 1 };
  s0 -> s2 [0, 65535] { R1367 += 1, R25 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R1366 += 1, R1367 += 1 };
  s1 -> s1 [0, 65535] { R1367 += 1, R24 += 1, R25 += 1 };
  s1 -> s2 [0, 65535] { R1367 += 1, R25 += 1, R4 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1367 += 1, R25 += 1, R4 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R1367 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1367 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 8] { R1369 += 1, R27 += 1 };
  s0 -> s2 [0, 65535] { R1369 += 1, R26 += 1, R27 += 1 };
  s0 -> s0 [0, 65535] { R1368 += 1, R1369 += 1 };
  s0 -> s3 [9, 13] { R1369 += 1, R27 += 1 };
  s0 -> s1 [14, 31] { R1369 += 1, R27 += 1 };
  s0 -> s3 [32, 32] { R1369 += 1, R27 += 1 };
  s0 -> s1 [33, 65535] { R1369 += 1, R27 += 1 };
  s1 -> s1 [0, 65535] { R1369 += 1, R27 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R1369 += 1 };
  s2 -> s1 [0, 8] { R1369 += 1, R27 += 1 };
  s2 -> s2 [0, 65535] { R1369 += 1, R26 += 1, R27 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R1369 += 1, R27 += 1 };
  s2 -> s1 [14, 31] { R1369 += 1, R27 += 1 };
  s2 -> s3 [32, 32] { R1369 += 1, R27 += 1 };
  s2 -> s1 [33, 65535] { R1369 += 1, R27 += 1 };
  s3 -> s1 [0, 65535] { R1369 += 1, R27 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1369 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 65535] { R1371 += 1, R28 += 1, R29 += 1 };
  s0 -> s2 [0, 65535] { R1371 += 1, R29 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R1370 += 1, R1371 += 1 };
  s1 -> s1 [0, 65535] { R1371 += 1, R28 += 1, R29 += 1 };
  s1 -> s2 [0, 65535] { R1371 += 1, R29 += 1, R5 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1371 += 1, R29 += 1, R5 += 1 };
  s2 -> s3 [0, 65535] { R1371 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1371 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 65535] { R1373 += 1, R1302 += 1, R1303 += 1 };
  s0 -> s0 [0, 65535] { R1372 += 1, R1373 += 1 };
  s0 -> s2 [0, 65535] { R1373 += 1, R1303 += 1, R21 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1373 += 1, R1302 += 1, R1303 += 1 };
  s1 -> s2 [0, 65535] { R1373 += 1, R1303 += 1, R21 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R1373 += 1 };
  s2 -> s2 [0, 65535] { R1373 += 1, R1303 += 1, R21 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1373 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 65] { R1375 += 1, R1305 += 1 };
  s0 -> s0 [0, 65535] { R1374 += 1, R1375 += 1 };
  s0 -> s2 [0, 65535] { R1375 += 1, R1304 += 1, R1305 += 1 };
  s0 -> s3 [66, 66] { R1375 += 1, R1305 += 1 };
  s0 -> s4 [66, 66] { R1375 += 1, R1305 += 1 };
  s0 -> s1 [71, 65535] { R1375 += 1, R1305 += 1 };
  s1 -> s1 [0, 65] { R1375 += 1, R1305 += 1 };
  s1 -> s1 [0, 65535] { R1375 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [66, 66] { R1375 += 1, R1305 += 1 };
  s1 -> s4 [66, 66] { R1375 += 1, R1305 += 1 };
  s1 -> s1 [71, 65535] { R1375 += 1, R1305 += 1 };
  s2 -> s1 [0, 65] { R1375 += 1, R1305 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1375 += 1, R1304 += 1, R1305 += 1 };
  s2 -> s3 [66, 66] { R1375 += 1, R1305 += 1 };
  s2 -> s4 [66, 66] { R1375 += 1, R1305 += 1 };
  s2 -> s1 [71, 65535] { R1375 += 1, R1305 += 1 };
  s3 -> s3 [0, 66] { R1375 += 1, R1305 += 1 };
  s3 -> s3 [0, 65535] { R1375 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [71, 65535] { R1375 += 1, R1305 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1375 += 1 };
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 65] { R1377 += 1, R1307 += 1, R42 += 1 };
  s0 -> s0 [0, 65535] { R1376 += 1, R1377 += 1 };
  s0 -> s2 [0, 65535] { R1377 += 1, R1306 += 1, R1307 += 1 };
  s0 -> s3 [66, 66] { R1377 += 1, R1307 += 1, R42 += 1 };
  s0 -> s4 [66, 66] { R1377 += 1, R1307 += 1, R42 += 1 };
  s0 -> s1 [67, 65535] { R1377 += 1, R1307 += 1, R42 += 1 };
  s1 -> s1 [0, 65] { R1377 += 1, R1307 += 1, R42 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1377 += 1 };
  s1 -> s3 [66, 66] { R1377 += 1, R1307 += 1, R42 += 1 };
  s1 -> s4 [66, 66] { R1377 += 1, R1307 += 1, R42 += 1 };
  s1 -> s1 [67, 65535] { R1377 += 1, R1307 += 1, R42 += 1 };
  s2 -> s1 [0, 65] { R1377 += 1, R1307 += 1, R42 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1377 += 1, R1306 += 1, R1307 += 1 };
  s2 -> s3 [66, 66] { R1377 += 1, R1307 += 1, R42 += 1 };
  s2 -> s4 [66, 66] { R1377 += 1, R1307 += 1, R42 += 1 };
  s2 -> s1 [67, 65535] { R1377 += 1, R1307 += 1, R42 += 1 };
  s3 -> s6 [0, 65535] { R1377 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R1377 += 1, R1307 += 1, R42 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1377 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1377 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 65] { R1379 += 1, R1309 += 1, R44 += 1 };
  s0 -> s0 [0, 65535] { R1378 += 1, R1379 += 1 };
  s0 -> s2 [0, 65535] { R1379 += 1, R1308 += 1, R1309 += 1 };
  s0 -> s3 [66, 66] { R1379 += 1, R1309 += 1, R44 += 1 };
  s0 -> s4 [66, 66] { R1379 += 1, R1309 += 1, R44 += 1 };
  s0 -> s1 [67, 65535] { R1379 += 1, R1309 += 1, R44 += 1 };
  s1 -> s1 [0, 65] { R1379 += 1, R1309 += 1, R44 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1379 += 1 };
  s1 -> s3 [66, 66] { R1379 += 1, R1309 += 1, R44 += 1 };
  s1 -> s4 [66, 66] { R1379 += 1, R1309 += 1, R44 += 1 };
  s1 -> s1 [67, 65535] { R1379 += 1, R1309 += 1, R44 += 1 };
  s2 -> s1 [0, 65] { R1379 += 1, R1309 += 1, R44 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1379 += 1, R1308 += 1, R1309 += 1 };
  s2 -> s3 [66, 66] { R1379 += 1, R1309 += 1, R44 += 1 };
  s2 -> s4 [66, 66] { R1379 += 1, R1309 += 1, R44 += 1 };
  s2 -> s1 [67, 65535] { R1379 += 1, R1309 += 1, R44 += 1 };
  s3 -> s3 [0, 65535] { R1379 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1379 += 1, R1309 += 1, R44 += 1 };
  s4 -> s6 [0, 65535] { R1379 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1379 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65] { R1381 += 1, R1311 += 1, R46 += 1, R47 += 1 };
  s0 -> s2 [0, 65535] { R1381 += 1, R1310 += 1, R1311 += 1 };
  s0 -> s0 [0, 65535] { R1380 += 1, R1381 += 1 };
  s0 -> s3 [66, 66] { R1381 += 1, R1311 += 1, R46 += 1, R47 += 1 };
  s0 -> s4 [66, 66] { R1381 += 1, R1311 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [67, 65535] { R1381 += 1, R1311 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65] { R1381 += 1, R1311 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535] { R1381 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [66, 66] { R1381 += 1, R1311 += 1, R46 += 1, R47 += 1 };
  s1 -> s4 [66, 66] { R1381 += 1, R1311 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [67, 65535] { R1381 += 1, R1311 += 1, R46 += 1, R47 += 1 };
  s2 -> s1 [0, 65] { R1381 += 1, R1311 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535] { R1381 += 1, R1310 += 1, R1311 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [66, 66] { R1381 += 1, R1311 += 1, R46 += 1, R47 += 1 };
  s2 -> s4 [66, 66] { R1381 += 1, R1311 += 1, R46 += 1, R47 += 1 };
  s2 -> s1 [67, 65535] { R1381 += 1, R1311 += 1, R46 += 1, R47 += 1 };
  s3 -> s3 [0, 65535] { R1381 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1381 += 1, R1311 += 1, R46 += 1, R47 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R1381 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1381 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 65] { R1383 += 1, R1313 += 1, R50 += 1, R51 += 1 };
  s0 -> s0 [0, 65535] { R1382 += 1, R1383 += 1 };
  s0 -> s2 [0, 65535] { R1383 += 1, R1312 += 1, R1313 += 1 };
  s0 -> s3 [66, 66] { R1383 += 1, R1313 += 1, R50 += 1, R51 += 1 };
  s0 -> s4 [66, 66] { R1383 += 1, R1313 += 1, R50 += 1, R51 += 1 };
  s0 -> s1 [67, 65535] { R1383 += 1, R1313 += 1, R50 += 1, R51 += 1 };
  s1 -> s1 [0, 65] { R1383 += 1, R1313 += 1, R50 += 1, R51 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1383 += 1 };
  s1 -> s3 [66, 66] { R1383 += 1, R1313 += 1, R50 += 1, R51 += 1 };
  s1 -> s4 [66, 66] { R1383 += 1, R1313 += 1, R50 += 1, R51 += 1 };
  s1 -> s1 [67, 65535] { R1383 += 1, R1313 += 1, R50 += 1, R51 += 1 };
  s2 -> s1 [0, 65] { R1383 += 1, R1313 += 1, R50 += 1, R51 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1383 += 1, R1312 += 1, R1313 += 1 };
  s2 -> s3 [66, 66] { R1383 += 1, R1313 += 1, R50 += 1, R51 += 1 };
  s2 -> s4 [66, 66] { R1383 += 1, R1313 += 1, R50 += 1, R51 += 1 };
  s2 -> s1 [67, 65535] { R1383 += 1, R1313 += 1, R50 += 1, R51 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R1383 += 1 };
  s3 -> s3 [0, 65535] { R1383 += 1, R1313 += 1, R50 += 1, R51 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1383 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1383 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 65] { R1385 += 1, R1327 += 1 };
  s0 -> s2 [0, 65535] { R1385 += 1, R1326 += 1, R1327 += 1 };
  s0 -> s0 [0, 65535] { R1384 += 1, R1385 += 1 };
  s0 -> s3 [66, 66] { R1385 += 1, R1327 += 1 };
  s0 -> s1 [67, 65535] { R1385 += 1, R1327 += 1 };
  s1 -> s1 [0, 65] { R1385 += 1, R1327 += 1 };
  s1 -> s3 [66, 66] { R1385 += 1, R1327 += 1 };
  s1 -> s1 [67, 65535] { R1385 += 1, R1327 += 1 };
  s2 -> s1 [0, 65] { R1385 += 1, R1327 += 1 };
  s2 -> s2 [0, 65535] { R1385 += 1, R1326 += 1, R1327 += 1 };
  s2 -> s3 [66, 66] { R1385 += 1, R1327 += 1 };
  s2 -> s1 [67, 65535] { R1385 += 1, R1327 += 1 };
  s3 -> s3 [0, 65535] { R1385 += 1, R1327 += 1 };
  s3 -> s4 [0, 65535] { R1385 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1385 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
automaton value2_21 {
  init s0;
  s0 -> s0 [0, 65535] { R1386 += 1, R1387 += 1 };
  s0 -> s1 [0, 65535] { R1387 += 1, R1328 += 1, R1329 += 1 };
  s0 -> s2 [0, 65535] { R1387 += 1, R1329 += 1, R1 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1387 += 1, R1328 += 1, R1329 += 1 };
  s1 -> s2 [0, 65535] { R1387 += 1, R1329 += 1, R1 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R1387 += 1 };
  s2 -> s2 [0, 65535] { R1387 += 1, R1329 += 1, R1 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1387 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 65] { R1389 += 1, R1331 += 1 };
  s0 -> s2 [0, 65535] { R1389 += 1, R1331 += 1, R11 += 1 };
  s0 -> s3 [0, 65535] { R1389 += 1, R1330 += 1, R1331 += 1 };
  s0 -> s0 [0, 65535] { R1388 += 1, R1389 += 1 };
  s0 -> s4 [66, 66] { R1389 += 1, R1331 += 1 };
  s0 -> s1 [67, 65535] { R1389 += 1, R1331 += 1 };
  s1 -> s1 [0, 65] { R1389 += 1, R1331 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1389 += 1 };
  s1 -> s4 [66, 66] { R1389 += 1, R1331 += 1 };
  s1 -> s1 [67, 65535] { R1389 += 1, R1331 += 1 };
  s2 -> s1 [0, 65] { R1389 += 1, R1331 += 1 };
  s2 -> s2 [0, 65535] { R1389 += 1, R1331 += 1, R11 += 1 };
  s2 -> s6 [0, 65535] { R1389 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [66, 66] { R1389 += 1, R1331 += 1 };
  s2 -> s1 [67, 65535] { R1389 += 1, R1331 += 1 };
  s3 -> s1 [0, 65] { R1389 += 1, R1331 += 1 };
  s3 -> s2 [0, 65535] { R1389 += 1, R1331 += 1, R11 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R1389 += 1, R1330 += 1, R1331 += 1 };
  s3 -> s4 [66, 66] { R1389 += 1, R1331 += 1 };
  s3 -> s1 [67, 65535] { R1389 += 1, R1331 += 1 };
  s4 -> s4 [0, 65535] { R1389 += 1, R1331 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1389 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65] { R1391 += 1, R1333 += 1, R1289 += 1 };
  s0 -> s0 [0, 65535] { R1390 += 1, R1391 += 1 };
  s0 -> s2 [0, 65535] { R1391 += 1, R1332 += 1, R1333 += 1 };
  s0 -> s3 [0, 65535] { R1391 += 1, R1333 += 1, R1288 += 1, R1289 += 1 };
  s0 -> s1 [67, 65535] { R1391 += 1, R1333 += 1, R1289 += 1 };
  s1 -> s1 [0, 65] { R1391 += 1, R1333 += 1, R1289 += 1 };
  s1 -> s4 [0, 65535] { R1391 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1391 += 1, R1333 += 1 };
  s1 -> s1 [67, 65535] { R1391 += 1, R1333 += 1, R1289 += 1 };
  s2 -> s1 [0, 65] { R1391 += 1, R1333 += 1, R1289 += 1 };
  s2 -> s2 [0, 65535] { R1391 += 1, R1332 += 1, R1333 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R1391 += 1, R1333 += 1, R1288 += 1, R1289 += 1 };
  s2 -> s1 [67, 65535] { R1391 += 1, R1333 += 1, R1289 += 1 };
  s3 -> s1 [0, 65] { R1391 += 1, R1333 += 1, R1289 += 1 };
  s3 -> s4 [0, 65535] { R1391 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R1391 += 1, R1333 += 1, R1288 += 1, R1289 += 1 };
  s3 -> s1 [67, 65535] { R1391 += 1, R1333 += 1, R1289 += 1 };
  s4 -> s4 [0, 65535] { R1391 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 65535] { R1393 += 1, R1335 += 1, R1290 += 1, R1291 += 1 };
  s0 -> s2 [0, 65535] { R1393 += 1, R1335 += 1, R1291 += 1, R19 += 1 };
  s0 -> s3 [0, 65535] { R1393 += 1, R1334 += 1, R1335 += 1 };
  s0 -> s0 [0, 65535] { R1392 += 1, R1393 += 1 };
  s1 -> s1 [0, 65535] { R1393 += 1, R1335 += 1, R1290 += 1, R1291 += 1 };
  s1 -> s5 [0, 65535] { R1393 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R1393 += 1, R1335 += 1, R1291 += 1, R19 += 1 };
  s2 -> s5 [0, 65535] { R1393 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1393 += 1, R1335 += 1, R1291 += 1, R19 += 1 };
  s2 -> s6 [0, 65535] { R1393 += 1, R1335 += 1 };
  s3 -> s1 [0, 65535] { R1393 += 1, R1335 += 1, R1290 += 1, R1291 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R1393 += 1, R1335 += 1, R1291 += 1, R19 += 1 };
  s3 -> s3 [0, 65535] { R1393 += 1, R1334 += 1, R1335 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1393 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R1393 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R1393 += 1, R1335 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 66] { R1395 += 1, R1337 += 1, R1293 += 1 };
  s0 -> s0 [0, 65535] { R1394 += 1, R1395 += 1 };
  s0 -> s2 [0, 65535] { R1395 += 1, R1336 += 1, R1337 += 1 };
  s0 -> s3 [0, 65535] { R1395 += 1, R1337 += 1, R1292 += 1, R1293 += 1 };
  s0 -> s1 [70, 65535] { R1395 += 1, R1337 += 1, R1293 += 1 };
  s1 -> s1 [0, 66] { R1395 += 1, R1337 += 1, R1293 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R1395 += 1 };
  s1 -> s1 [0, 65535] { R1395 += 1, R1337 += 1 };
  s1 -> s1 [70, 65535] { R1395 += 1, R1337 += 1, R1293 += 1 };
  s2 -> s1 [0, 66] { R1395 += 1, R1337 += 1, R1293 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1395 += 1, R1336 += 1, R1337 += 1 };
  s2 -> s3 [0, 65535] { R1395 += 1, R1337 += 1, R1292 += 1, R1293 += 1 };
  s2 -> s1 [70, 65535] { R1395 += 1, R1337 += 1, R1293 += 1 };
  s3 -> s1 [0, 66] { R1395 += 1, R1337 += 1, R1293 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1395 += 1, R1337 += 1, R1292 += 1, R1293 += 1 };
  s3 -> s5 [0, 65535] { R1395 += 1 };
  s3 -> s1 [70, 65535] { R1395 += 1, R1337 += 1, R1293 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1395 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R1397 += 1, R1339 += 1, R1295 += 1, R57 += 1 };
  s0 -> s2 [0, 65535] { R1397 += 1, R1338 += 1, R1339 += 1 };
  s0 -> s3 [0, 65535] { R1397 += 1, R1339 += 1, R1294 += 1, R1295 += 1 };
  s0 -> s0 [0, 65535] { R1396 += 1, R1397 += 1 };
  s1 -> s1 [0, 65535] { R1397 += 1, R1339 += 1, R1295 += 1, R57 += 1 };
  s1 -> s4 [0, 65535] { R1397 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R1397 += 1, R1339 += 1 };
  s2 -> s1 [0, 65535] { R1397 += 1, R1339 += 1, R1295 += 1, R57 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1397 += 1, R1338 += 1, R1339 += 1 };
  s2 -> s3 [0, 65535] { R1397 += 1, R1339 += 1, R1294 += 1, R1295 += 1 };
  s3 -> s1 [0, 65535] { R1397 += 1, R1339 += 1, R1295 += 1, R57 += 1 };
  s3 -> s4 [0, 65535] { R1397 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R1397 += 1, R1339 += 1, R1294 += 1, R1295 += 1 };
  s4 -> s4 [0, 65535] { R1397 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R1397 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1397 += 1, R1339 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 69] { R1399 += 1, R1341 += 1, R1297 += 1 };
  s0 -> s2 [0, 65535] { R1399 += 1, R1341 += 1, R1296 += 1, R1297 += 1 };
  s0 -> s0 [0, 65535] { R1398 += 1, R1399 += 1 };
  s0 -> s3 [0, 65535] { R1399 += 1, R1340 += 1, R1341 += 1 };
  s0 -> s4 [0, 65535] { R1399 += 1, R1341 += 1, R1297 += 1, R59 += 1 };
  s0 -> s1 [71, 65535] { R1399 += 1, R1341 += 1, R1297 += 1 };
  s1 -> s1 [0, 69] { R1399 += 1, R1341 += 1, R1297 += 1 };
  s1 -> s5 [0, 65535] { R1399 += 1 };
  s1 -> s1 [0, 65535] { R1399 += 1, R1341 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s1 [71, 65535] { R1399 += 1, R1341 += 1, R1297 += 1 };
  s2 -> s1 [0, 69] { R1399 += 1, R1341 += 1, R1297 += 1 };
  s2 -> s2 [0, 65535] { R1399 += 1, R1341 += 1, R1296 += 1, R1297 += 1 };
  s2 -> s5 [0, 65535] { R1399 += 1 };
  s2 -> s4 [0, 65535] { R1399 += 1, R1341 += 1, R1297 += 1, R59 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s1 [71, 65535] { R1399 += 1, R1341 += 1, R1297 += 1 };
  s3 -> s1 [0, 69] { R1399 += 1, R1341 += 1, R1297 += 1 };
  s3 -> s2 [0, 65535] { R1399 += 1, R1341 += 1, R1296 += 1, R1297 += 1 };
  s3 -> s3 [0, 65535] { R1399 += 1, R1340 += 1, R1341 += 1 };
  s3 -> s4 [0, 65535] { R1399 += 1, R1341 += 1, R1297 += 1, R59 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s1 [71, 65535] { R1399 += 1, R1341 += 1, R1297 += 1 };
  s4 -> s1 [0, 69] { R1399 += 1, R1341 += 1, R1297 += 1 };
  s4 -> s5 [0, 65535] { R1399 += 1 };
  s4 -> s4 [0, 65535] { R1399 += 1, R1341 += 1, R1297 += 1, R59 += 1 };
  s4 -> s6 [0, 65535] { R1399 += 1, R1341 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s1 [71, 65535] { R1399 += 1, R1341 += 1, R1297 += 1 };
  s5 -> s5 [0, 65535] { R1399 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s5 [0, 65535] { R1399 += 1 };
  s6 -> s6 [0, 65535] { R1399 += 1, R1341 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 69] { R1401 += 1, R1343 += 1, R1299 += 1, R1281 += 1 };
  s0 -> s2 [0, 65535] { R1401 += 1, R1343 += 1, R1298 += 1, R1299 += 1 };
  s0 -> s3 [0, 65535] { R1401 += 1, R1343 += 1, R1299 += 1, R1280 += 1, R1281 += 1 };
  s0 -> s4 [0, 65535] { R1401 += 1, R1342 += 1, R1343 += 1 };
  s0 -> s0 [0, 65535] { R1400 += 1, R1401 += 1 };
  s0 -> s5 [70, 70] { R1401 += 1, R1343 += 1, R1299 += 1, R1281 += 1 };
  s0 -> s1 [71, 65535] { R1401 += 1, R1343 += 1, R1299 += 1, R1281 += 1 };
  s1 -> s1 [0, 69] { R1401 += 1, R1343 += 1, R1299 += 1, R1281 += 1 };
  s1 -> s5 [70, 70] { R1401 += 1, R1343 += 1, R1299 += 1, R1281 += 1 };
  s1 -> s1 [71, 65535] { R1401 += 1, R1343 += 1, R1299 += 1, R1281 += 1 };
  s2 -> s1 [0, 69] { R1401 += 1, R1343 += 1, R1299 += 1, R1281 += 1 };
  s2 -> s2 [0, 65535] { R1401 += 1, R1343 += 1, R1298 += 1, R1299 += 1 };
  s2 -> s3 [0, 65535] { R1401 += 1, R1343 += 1, R1299 += 1, R1280 += 1, R1281 += 1 };
  s2 -> s5 [70, 70] { R1401 += 1, R1343 += 1, R1299 += 1, R1281 += 1 };
  s2 -> s1 [71, 65535] { R1401 += 1, R1343 += 1, R1299 += 1, R1281 += 1 };
  s3 -> s1 [0, 69] { R1401 += 1, R1343 += 1, R1299 += 1, R1281 += 1 };
  s3 -> s3 [0, 65535] { R1401 += 1, R1343 += 1, R1299 += 1, R1280 += 1, R1281 += 1 };
  s3 -> s5 [70, 70] { R1401 += 1, R1343 += 1, R1299 += 1, R1281 += 1 };
  s3 -> s1 [71, 65535] { R1401 += 1, R1343 += 1, R1299 += 1, R1281 += 1 };
  s4 -> s1 [0, 69] { R1401 += 1, R1343 += 1, R1299 += 1, R1281 += 1 };
  s4 -> s2 [0, 65535] { R1401 += 1, R1343 += 1, R1298 += 1, R1299 += 1 };
  s4 -> s3 [0, 65535] { R1401 += 1, R1343 += 1, R1299 += 1, R1280 += 1, R1281 += 1 };
  s4 -> s4 [0, 65535] { R1401 += 1, R1342 += 1, R1343 += 1 };
  s4 -> s5 [70, 70] { R1401 += 1, R1343 += 1, R1299 += 1, R1281 += 1 };
  s4 -> s1 [71, 65535] { R1401 += 1, R1343 += 1, R1299 += 1, R1281 += 1 };
  s5 -> s6 [0, 65535] { R1401 += 1, R1343 += 1, R1299 += 1 };
  s5 -> s7 [0, 65535];
  s5 -> s8 [0, 65535] { R1401 += 1, R1343 += 1 };
  s5 -> s5 [0, 65535] { R1401 += 1, R1343 += 1, R1299 += 1, R1281 += 1 };
  s5 -> s9 [0, 65535] { R1401 += 1 };
  s6 -> s6 [0, 65535] { R1401 += 1, R1343 += 1, R1299 += 1 };
  s6 -> s7 [0, 65535];
  s6 -> s8 [0, 65535] { R1401 += 1, R1343 += 1 };
  s6 -> s9 [0, 65535] { R1401 += 1 };
  s7 -> s7 [0, 65535];
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R1401 += 1, R1343 += 1 };
  s8 -> s9 [0, 65535] { R1401 += 1 };
  s9 -> s7 [0, 65535];
  s9 -> s9 [0, 65535] { R1401 += 1 };
  accepting s8, s5, s9, s6, s7;
};
automaton value2_29 {
  init s0;
  s0 -> s0 [0, 65535] { R1402 += 1, R1403 += 1 };
  s0 -> s1 [0, 65535] { R1403 += 1, R1345 += 1, R1301 += 1, R1286 += 1, R1287 += 1 };
  s0 -> s2 [0, 65535] { R1403 += 1, R1344 += 1, R1345 += 1 };
  s0 -> s3 [0, 65535] { R1403 += 1, R1345 += 1, R1300 += 1, R1301 += 1 };
  s0 -> s4 [0, 65535] { R1403 += 1, R1345 += 1, R1301 += 1, R1285 += 1, R1286 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1403 += 1, R1345 += 1, R1301 += 1, R1286 += 1, R1287 += 1 };
  s1 -> s8 [0, 65535] { R1403 += 1, R1345 += 1, R1301 += 1 };
  s1 -> s6 [0, 65535] { R1403 += 1 };
  s1 -> s7 [0, 65535] { R1403 += 1, R1345 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R1403 += 1, R1345 += 1, R1301 += 1, R1286 += 1, R1287 += 1 };
  s2 -> s2 [0, 65535] { R1403 += 1, R1344 += 1, R1345 += 1 };
  s2 -> s3 [0, 65535] { R1403 += 1, R1345 += 1, R1300 += 1, R1301 += 1 };
  s2 -> s4 [0, 65535] { R1403 += 1, R1345 += 1, R1301 += 1, R1285 += 1, R1286 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [0, 65535] { R1403 += 1, R1345 += 1, R1301 += 1, R1286 += 1, R1287 += 1 };
  s3 -> s6 [0, 65535] { R1403 += 1 };
  s3 -> s3 [0, 65535] { R1403 += 1, R1345 += 1, R1300 += 1, R1301 += 1 };
  s3 -> s4 [0, 65535] { R1403 += 1, R1345 += 1, R1301 += 1, R1285 += 1, R1286 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s1 [0, 65535] { R1403 += 1, R1345 += 1, R1301 += 1, R1286 += 1, R1287 += 1 };
  s4 -> s6 [0, 65535] { R1403 += 1 };
  s4 -> s4 [0, 65535] { R1403 += 1, R1345 += 1, R1301 += 1, R1285 += 1, R1286 += 1 };
  s4 -> s7 [0, 65535] { R1403 += 1, R1345 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1403 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R1403 += 1 };
  s7 -> s7 [0, 65535] { R1403 += 1, R1345 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s8 [0, 65535] { R1403 += 1, R1345 += 1, R1301 += 1 };
  s8 -> s6 [0, 65535] { R1403 += 1 };
  s8 -> s7 [0, 65535] { R1403 += 1, R1345 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R1405 += 1, R1347 += 1, R1315 += 1, R20 += 1 };
  s0 -> s2 [0, 65535] { R1405 += 1, R1346 += 1, R1347 += 1 };
  s0 -> s0 [0, 65535] { R1404 += 1, R1405 += 1 };
  s0 -> s3 [0, 65535] { R1405 += 1, R1347 += 1, R1314 += 1, R1315 += 1 };
  s1 -> s6 [0, 65535] { R1405 += 1, R1347 += 1 };
  s1 -> s1 [0, 65535] { R1405 += 1, R1347 += 1, R1315 += 1, R20 += 1 };
  s1 -> s4 [0, 65535] { R1405 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R1405 += 1, R1347 += 1, R1315 += 1, R20 += 1 };
  s2 -> s2 [0, 65535] { R1405 += 1, R1346 += 1, R1347 += 1 };
  s2 -> s3 [0, 65535] { R1405 += 1, R1347 += 1, R1314 += 1, R1315 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s1 [0, 65535] { R1405 += 1, R1347 += 1, R1315 += 1, R20 += 1 };
  s3 -> s3 [0, 65535] { R1405 += 1, R1347 += 1, R1314 += 1, R1315 += 1 };
  s3 -> s4 [0, 65535] { R1405 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1405 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1405 += 1, R1347 += 1 };
  s6 -> s4 [0, 65535] { R1405 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 65] { R1407 += 1, R1349 += 1, R1317 += 1 };
  s0 -> s2 [0, 65535] { R1407 += 1, R1348 += 1, R1349 += 1 };
  s0 -> s3 [0, 65535] { R1407 += 1, R1349 += 1, R1316 += 1, R1317 += 1 };
  s0 -> s0 [0, 65535] { R1406 += 1, R1407 += 1 };
  s0 -> s4 [66, 66] { R1407 += 1, R1349 += 1, R1317 += 1 };
  s0 -> s5 [66, 66] { R1407 += 1, R1349 += 1, R1317 += 1 };
  s0 -> s6 [70, 70] { R1407 += 1, R1349 += 1, R1317 += 1 };
  s0 -> s1 [71, 65535] { R1407 += 1, R1349 += 1, R1317 += 1 };
  s1 -> s1 [0, 65] { R1407 += 1, R1349 += 1, R1317 += 1 };
  s1 -> s4 [66, 66] { R1407 += 1, R1349 += 1, R1317 += 1 };
  s1 -> s5 [66, 66] { R1407 += 1, R1349 += 1, R1317 += 1 };
  s1 -> s6 [70, 70] { R1407 += 1, R1349 += 1, R1317 += 1 };
  s1 -> s1 [71, 65535] { R1407 += 1, R1349 += 1, R1317 += 1 };
  s2 -> s1 [0, 65] { R1407 += 1, R1349 += 1, R1317 += 1 };
  s2 -> s2 [0, 65535] { R1407 += 1, R1348 += 1, R1349 += 1 };
  s2 -> s3 [0, 65535] { R1407 += 1, R1349 += 1, R1316 += 1, R1317 += 1 };
  s2 -> s4 [66, 66] { R1407 += 1, R1349 += 1, R1317 += 1 };
  s2 -> s5 [66, 66] { R1407 += 1, R1349 += 1, R1317 += 1 };
  s2 -> s6 [70, 70] { R1407 += 1, R1349 += 1, R1317 += 1 };
  s2 -> s1 [71, 65535] { R1407 += 1, R1349 += 1, R1317 += 1 };
  s3 -> s1 [0, 65] { R1407 += 1, R1349 += 1, R1317 += 1 };
  s3 -> s3 [0, 65535] { R1407 += 1, R1349 += 1, R1316 += 1, R1317 += 1 };
  s3 -> s4 [66, 66] { R1407 += 1, R1349 += 1, R1317 += 1 };
  s3 -> s5 [66, 66] { R1407 += 1, R1349 += 1, R1317 += 1 };
  s3 -> s6 [70, 70] { R1407 += 1, R1349 += 1, R1317 += 1 };
  s3 -> s1 [71, 65535] { R1407 += 1, R1349 += 1, R1317 += 1 };
  s4 -> s4 [0, 66] { R1407 += 1, R1349 += 1, R1317 += 1 };
  s4 -> s9 [70, 70] { R1407 += 1, R1349 += 1, R1317 += 1 };
  s4 -> s4 [71, 65535] { R1407 += 1, R1349 += 1, R1317 += 1 };
  s6 -> s6 [0, 65] { R1407 += 1, R1349 += 1, R1317 += 1 };
  s6 -> s6 [0, 65535] { R1407 += 1, R1349 += 1 };
  s6 -> s7 [0, 65535];
  s6 -> s8 [0, 65535] { R1407 += 1 };
  s6 -> s9 [66, 66] { R1407 += 1, R1349 += 1, R1317 += 1 };
  s6 -> s10 [66, 66] { R1407 += 1, R1349 += 1, R1317 += 1 };
  s6 -> s6 [70, 65535] { R1407 += 1, R1349 += 1, R1317 += 1 };
  s7 -> s7 [0, 65535];
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R1407 += 1 };
  s9 -> s9 [0, 66] { R1407 += 1, R1349 += 1, R1317 += 1 };
  s9 -> s9 [0, 65535] { R1407 += 1, R1349 += 1 };
  s9 -> s7 [0, 65535];
  s9 -> s8 [0, 65535] { R1407 += 1 };
  s9 -> s9 [70, 65535] { R1407 += 1, R1349 += 1, R1317 += 1 };
  s10 -> s10 [0, 65535] { R1407 += 1, R1349 += 1 };
  s10 -> s7 [0, 65535];
  s10 -> s8 [0, 65535] { R1407 += 1 };
  accepting s8, s9, s6, s7, s10;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 65] { R1409 += 1, R1351 += 1, R1319 += 1, R56 += 1 };
  s0 -> s2 [0, 65535] { R1409 += 1, R1351 += 1, R1318 += 1, R1319 += 1 };
  s0 -> s0 [0, 65535] { R1408 += 1, R1409 += 1 };
  s0 -> s3 [0, 65535] { R1409 += 1, R1350 += 1, R1351 += 1 };
  s0 -> s4 [66, 66] { R1409 += 1, R1351 += 1, R1319 += 1, R56 += 1 };
  s0 -> s5 [66, 66] { R1409 += 1, R1351 += 1, R1319 += 1, R56 += 1 };
  s0 -> s1 [67, 65535] { R1409 += 1, R1351 += 1, R1319 += 1, R56 += 1 };
  s1 -> s1 [0, 65] { R1409 += 1, R1351 += 1, R1319 += 1, R56 += 1 };
  s1 -> s7 [0, 65535] { R1409 += 1 };
  s1 -> s1 [0, 65535] { R1409 += 1, R1351 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s4 [66, 66] { R1409 += 1, R1351 += 1, R1319 += 1, R56 += 1 };
  s1 -> s5 [66, 66] { R1409 += 1, R1351 += 1, R1319 += 1, R56 += 1 };
  s1 -> s1 [67, 65535] { R1409 += 1, R1351 += 1, R1319 += 1, R56 += 1 };
  s2 -> s1 [0, 65] { R1409 += 1, R1351 += 1, R1319 += 1, R56 += 1 };
  s2 -> s2 [0, 65535] { R1409 += 1, R1351 += 1, R1318 += 1, R1319 += 1 };
  s2 -> s7 [0, 65535] { R1409 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s4 [66, 66] { R1409 += 1, R1351 += 1, R1319 += 1, R56 += 1 };
  s2 -> s5 [66, 66] { R1409 += 1, R1351 += 1, R1319 += 1, R56 += 1 };
  s2 -> s1 [67, 65535] { R1409 += 1, R1351 += 1, R1319 += 1, R56 += 1 };
  s3 -> s1 [0, 65] { R1409 += 1, R1351 += 1, R1319 += 1, R56 += 1 };
  s3 -> s2 [0, 65535] { R1409 += 1, R1351 += 1, R1318 += 1, R1319 += 1 };
  s3 -> s3 [0, 65535] { R1409 += 1, R1350 += 1, R1351 += 1 };
  s3 -> s8 [0, 65535];
  s3 -> s4 [66, 66] { R1409 += 1, R1351 += 1, R1319 += 1, R56 += 1 };
  s3 -> s5 [66, 66] { R1409 += 1, R1351 += 1, R1319 += 1, R56 += 1 };
  s3 -> s1 [67, 65535] { R1409 += 1, R1351 += 1, R1319 += 1, R56 += 1 };
  s4 -> s4 [0, 65535] { R1409 += 1, R1351 += 1 };
  s4 -> s7 [0, 65535] { R1409 += 1 };
  s4 -> s8 [0, 65535];
  s5 -> s6 [0, 65535] { R1409 += 1, R1351 += 1 };
  s5 -> s7 [0, 65535] { R1409 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s5 [0, 65535] { R1409 += 1, R1351 += 1, R1319 += 1, R56 += 1 };
  s6 -> s6 [0, 65535] { R1409 += 1, R1351 += 1 };
  s6 -> s7 [0, 65535] { R1409 += 1 };
  s6 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R1409 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 65] { R1411 += 1, R1353 += 1, R1321 += 1, R58 += 1 };
  s0 -> s0 [0, 65535] { R1410 += 1, R1411 += 1 };
  s0 -> s2 [0, 65535] { R1411 += 1, R1353 += 1, R1320 += 1, R1321 += 1 };
  s0 -> s3 [0, 65535] { R1411 += 1, R1352 += 1, R1353 += 1 };
  s0 -> s4 [66, 66] { R1411 += 1, R1353 += 1, R1321 += 1, R58 += 1 };
  s0 -> s5 [66, 66] { R1411 += 1, R1353 += 1, R1321 += 1, R58 += 1 };
  s0 -> s1 [67, 65535] { R1411 += 1, R1353 += 1, R1321 += 1, R58 += 1 };
  s1 -> s1 [0, 65] { R1411 += 1, R1353 += 1, R1321 += 1, R58 += 1 };
  s1 -> s1 [0, 65535] { R1411 += 1, R1353 += 1 };
  s1 -> s6 [0, 65535] { R1411 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s4 [66, 66] { R1411 += 1, R1353 += 1, R1321 += 1, R58 += 1 };
  s1 -> s5 [66, 66] { R1411 += 1, R1353 += 1, R1321 += 1, R58 += 1 };
  s1 -> s1 [67, 65535] { R1411 += 1, R1353 += 1, R1321 += 1, R58 += 1 };
  s2 -> s1 [0, 65] { R1411 += 1, R1353 += 1, R1321 += 1, R58 += 1 };
  s2 -> s2 [0, 65535] { R1411 += 1, R1353 += 1, R1320 += 1, R1321 += 1 };
  s2 -> s6 [0, 65535] { R1411 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s4 [66, 66] { R1411 += 1, R1353 += 1, R1321 += 1, R58 += 1 };
  s2 -> s5 [66, 66] { R1411 += 1, R1353 += 1, R1321 += 1, R58 += 1 };
  s2 -> s1 [67, 65535] { R1411 += 1, R1353 += 1, R1321 += 1, R58 += 1 };
  s3 -> s1 [0, 65] { R1411 += 1, R1353 += 1, R1321 += 1, R58 += 1 };
  s3 -> s2 [0, 65535] { R1411 += 1, R1353 += 1, R1320 += 1, R1321 += 1 };
  s3 -> s3 [0, 65535] { R1411 += 1, R1352 += 1, R1353 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s4 [66, 66] { R1411 += 1, R1353 += 1, R1321 += 1, R58 += 1 };
  s3 -> s5 [66, 66] { R1411 += 1, R1353 += 1, R1321 += 1, R58 += 1 };
  s3 -> s1 [67, 65535] { R1411 += 1, R1353 += 1, R1321 += 1, R58 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s4 [0, 65535] { R1411 += 1, R1353 += 1, R1321 += 1, R58 += 1 };
  s4 -> s6 [0, 65535] { R1411 += 1 };
  s4 -> s8 [0, 65535] { R1411 += 1, R1353 += 1 };
  s5 -> s5 [0, 65535] { R1411 += 1, R1353 += 1 };
  s5 -> s6 [0, 65535] { R1411 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s6 [0, 65535] { R1411 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  s8 -> s7 [0, 65535];
  s8 -> s6 [0, 65535] { R1411 += 1 };
  s8 -> s8 [0, 65535] { R1411 += 1, R1353 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 65] { R1413 += 1, R1355 += 1, R1323 += 1, R1278 += 1, R1279 += 1 };
  s0 -> s0 [0, 65535] { R1412 += 1, R1413 += 1 };
  s0 -> s2 [0, 65535] { R1413 += 1, R1355 += 1, R1322 += 1, R1323 += 1 };
  s0 -> s3 [0, 65535] { R1413 += 1, R1354 += 1, R1355 += 1 };
  s0 -> s4 [66, 66] { R1413 += 1, R1355 += 1, R1323 += 1, R1278 += 1, R1279 += 1 };
  s0 -> s5 [66, 66] { R1413 += 1, R1355 += 1, R1323 += 1, R1278 += 1, R1279 += 1 };
  s0 -> s1 [67, 65535] { R1413 += 1, R1355 += 1, R1323 += 1, R1278 += 1, R1279 += 1 };
  s1 -> s1 [0, 65] { R1413 += 1, R1355 += 1, R1323 += 1, R1278 += 1, R1279 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R1413 += 1 };
  s1 -> s1 [0, 65535] { R1413 += 1, R1355 += 1 };
  s1 -> s4 [66, 66] { R1413 += 1, R1355 += 1, R1323 += 1, R1278 += 1, R1279 += 1 };
  s1 -> s5 [66, 66] { R1413 += 1, R1355 += 1, R1323 += 1, R1278 += 1, R1279 += 1 };
  s1 -> s1 [67, 65535] { R1413 += 1, R1355 += 1, R1323 += 1, R1278 += 1, R1279 += 1 };
  s2 -> s1 [0, 65] { R1413 += 1, R1355 += 1, R1323 += 1, R1278 += 1, R1279 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s7 [0, 65535] { R1413 += 1 };
  s2 -> s2 [0, 65535] { R1413 += 1, R1355 += 1, R1322 += 1, R1323 += 1 };
  s2 -> s4 [66, 66] { R1413 += 1, R1355 += 1, R1323 += 1, R1278 += 1, R1279 += 1 };
  s2 -> s5 [66, 66] { R1413 += 1, R1355 += 1, R1323 += 1, R1278 += 1, R1279 += 1 };
  s2 -> s1 [67, 65535] { R1413 += 1, R1355 += 1, R1323 += 1, R1278 += 1, R1279 += 1 };
  s3 -> s1 [0, 65] { R1413 += 1, R1355 += 1, R1323 += 1, R1278 += 1, R1279 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s2 [0, 65535] { R1413 += 1, R1355 += 1, R1322 += 1, R1323 += 1 };
  s3 -> s3 [0, 65535] { R1413 += 1, R1354 += 1, R1355 += 1 };
  s3 -> s4 [66, 66] { R1413 += 1, R1355 += 1, R1323 += 1, R1278 += 1, R1279 += 1 };
  s3 -> s5 [66, 66] { R1413 += 1, R1355 += 1, R1323 += 1, R1278 += 1, R1279 += 1 };
  s3 -> s1 [67, 65535] { R1413 += 1, R1355 += 1, R1323 += 1, R1278 += 1, R1279 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R1413 += 1, R1355 += 1 };
  s4 -> s7 [0, 65535] { R1413 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R1413 += 1 };
  s5 -> s5 [0, 65535] { R1413 += 1, R1355 += 1, R1323 += 1, R1278 += 1, R1279 += 1 };
  s5 -> s8 [0, 65535] { R1413 += 1, R1355 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R1413 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R1413 += 1 };
  s8 -> s8 [0, 65535] { R1413 += 1, R1355 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 65] { R1415 += 1, R1357 += 1, R1325 += 1, R1282 += 1, R1283 += 1 };
  s0 -> s2 [0, 65535] { R1415 += 1, R1357 += 1, R1324 += 1, R1325 += 1 };
  s0 -> s3 [0, 65535] { R1415 += 1, R1356 += 1, R1357 += 1 };
  s0 -> s0 [0, 65535] { R1414 += 1, R1415 += 1 };
  s0 -> s4 [66, 66] { R1415 += 1, R1357 += 1, R1325 += 1, R1282 += 1, R1283 += 1 };
  s0 -> s5 [66, 66] { R1415 += 1, R1357 += 1, R1325 += 1, R1282 += 1, R1283 += 1 };
  s0 -> s1 [67, 65535] { R1415 += 1, R1357 += 1, R1325 += 1, R1282 += 1, R1283 += 1 };
  s1 -> s1 [0, 65] { R1415 += 1, R1357 += 1, R1325 += 1, R1282 += 1, R1283 += 1 };
  s1 -> s1 [0, 65535] { R1415 += 1, R1357 += 1 };
  s1 -> s6 [0, 65535] { R1415 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s4 [66, 66] { R1415 += 1, R1357 += 1, R1325 += 1, R1282 += 1, R1283 += 1 };
  s1 -> s5 [66, 66] { R1415 += 1, R1357 += 1, R1325 += 1, R1282 += 1, R1283 += 1 };
  s1 -> s1 [67, 65535] { R1415 += 1, R1357 += 1, R1325 += 1, R1282 += 1, R1283 += 1 };
  s2 -> s1 [0, 65] { R1415 += 1, R1357 += 1, R1325 += 1, R1282 += 1, R1283 += 1 };
  s2 -> s2 [0, 65535] { R1415 += 1, R1357 += 1, R1324 += 1, R1325 += 1 };
  s2 -> s6 [0, 65535] { R1415 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s4 [66, 66] { R1415 += 1, R1357 += 1, R1325 += 1, R1282 += 1, R1283 += 1 };
  s2 -> s5 [66, 66] { R1415 += 1, R1357 += 1, R1325 += 1, R1282 += 1, R1283 += 1 };
  s2 -> s1 [67, 65535] { R1415 += 1, R1357 += 1, R1325 += 1, R1282 += 1, R1283 += 1 };
  s3 -> s1 [0, 65] { R1415 += 1, R1357 += 1, R1325 += 1, R1282 += 1, R1283 += 1 };
  s3 -> s2 [0, 65535] { R1415 += 1, R1357 += 1, R1324 += 1, R1325 += 1 };
  s3 -> s3 [0, 65535] { R1415 += 1, R1356 += 1, R1357 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s4 [66, 66] { R1415 += 1, R1357 += 1, R1325 += 1, R1282 += 1, R1283 += 1 };
  s3 -> s5 [66, 66] { R1415 += 1, R1357 += 1, R1325 += 1, R1282 += 1, R1283 += 1 };
  s3 -> s1 [67, 65535] { R1415 += 1, R1357 += 1, R1325 += 1, R1282 += 1, R1283 += 1 };
  s4 -> s8 [0, 65535] { R1415 += 1, R1357 += 1 };
  s4 -> s4 [0, 65535] { R1415 += 1, R1357 += 1, R1325 += 1, R1282 += 1, R1283 += 1 };
  s4 -> s6 [0, 65535] { R1415 += 1 };
  s4 -> s7 [0, 65535];
  s5 -> s6 [0, 65535] { R1415 += 1 };
  s5 -> s5 [0, 65535] { R1415 += 1, R1357 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s6 [0, 65535] { R1415 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R1415 += 1, R1357 += 1 };
  s8 -> s6 [0, 65535] { R1415 += 1 };
  s8 -> s7 [0, 65535];
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
};
synchronised {  // Automata constraining P37
automaton P37_0 {
  init s0;
  s0 -> s1 [9, 9];
  accepting s1;
};
};
synchronised {  // Automata constraining P38
automaton P38_0 {
  init s0;
  s0 -> s1 [10, 10];
  accepting s1;
};
};
synchronised {  // Automata constraining P36
automaton P36_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
constraint R1 = R1299 && R2 = R1357 && R3 - R1415 = 1 && R22 - R1357 = -1 && R23 = R1357 && R24 - R1357 = -1 && R25 = R1357 && R26 = 0 && R27 = 1 && R28 = 0 && R29 = 1 && R30 = R1415 && R31 - R1415 = 1 && R32 = R1415 && R33 - R1415 = 1 && R34 = 0 && R35 = 1 && R36 = 0 && R37 = 1 && R42 + R57 + R56 + -1*R1281 + -1*R1279 - R47 = 0 && R46 + R1280 + R1278 = 0 && R1298 = 0 && R1316 = 0 && R1317 = 0 && R1326 = 0 && R1327 = R1357 && R1328 = 0 && R1329 = R1357 && R1330 = 0 && R1331 = R1357 && R1332 = 0 && R1333 = R1357 && R1334 = 0 && R1335 = R1357 && R1336 = 0 && R1337 = R1357 && R1338 = 0 && R1339 = R1357 && R1340 = 0 && R1341 = R1357 && R1342 = 0 && R1343 = R1357 && R1344 = 0 && R1345 = R1357 && R1346 = 0 && R1347 = R1357 && R1348 = 0 && R1349 = R1357 && R1350 = 0 && R1351 = R1357 && R1352 = 0 && R1353 = R1357 && R1354 = 0 && R1355 = R1357 && R1356 = 0 && R1358 = 0 && R1359 = R1415 && R1360 = 0 && R1361 = R1415 && R1362 = 0 && R1363 = R1415 && R1364 = 0 && R1365 = R1415 && R1366 = 0 && R1367 = R1415 && R1368 = 0 && R1369 = R1415 && R1370 = 0 && R1371 = R1415 && R1372 = 0 && R1373 = R1415 && R1374 = 0 && R1375 = R1415 && R1376 = 0 && R1377 = R1415 && R1378 = 0 && R1379 = R1415 && R1380 = 0 && R1381 = R1415 && R1382 = 0 && R1383 = R1415 && R1384 = 0 && R1385 = R1415 && R1386 = 0 && R1387 = R1415 && R1388 = 0 && R1389 = R1415 && R1390 = 0 && R1391 = R1415 && R1392 = 0 && R1393 = R1415 && R1394 = 0 && R1395 = R1415 && R1396 = 0 && R1397 = R1415 && R1398 = 0 && R1399 = R1415 && R1400 = 0 && R1401 = R1415 && R1402 = 0 && R1403 = R1415 && R1404 = 0 && R1405 = R1415 && R1406 = 0 && R1407 = R1415 && R1408 = 0 && R1409 = R1415 && R1410 = 0 && R1411 = R1415 && R1412 = 0 && R1413 = R1415 && R1414 = 0 && R11 < 1 && R14 < 1 && R17 < 1 && R44 + R59 + R58 < 1 && -1*R1281 + -1*R1279 - R47 < 1 && -1 < R1299 && 0 < R1357 && -1 < R1415 && (R47 + R1281 + R1279 != 0 || R52 + R1287 + R1284 = 0 || (R50 + R1285 + R1282 = 0 && R51 + R1286 + R1283 = 0)) && (R50 + R1285 + R1282 != 0 || R47 + R1281 + R1279 + -1*R1286 + -1*R1283 - R51 = 0 || R47 + R1281 + R1279 < 1) && (R1288 != 0 || R1289 = R1299 || (R19 = 0 && R1299 = 0)) && (R1290 != 0 || R1291 = R1299 || (R19 = 0 && R1299 = 0)) && (R1292 != 0 || R1293 = R1299 || (R19 = 0 && R1299 = 0)) && (R1294 != 0 || R1295 = R1299 || (R19 = 0 && R1299 = 0)) && (R1296 != 0 || R1297 = R1299 || (R19 = 0 && R1299 = 0)) && (R1300 != 0 || R1299 = R1301 || (R19 = 0 && R1299 = 0)) && (R20 = 0 || (R1314 = 0 && R1315 = 0)) && (R20 = 0 || (R1318 = 0 && R1319 = 0)) && (R20 = 0 || (R1320 = 0 && R1321 = 0)) && (R20 = 0 || (R1322 = 0 && R1323 = 0)) && (R20 = 0 || (R1324 = 0 && R1325 = 0)) && (R21 = 0 || (R1302 = 0 && R1303 = 0)) && (R21 = 0 || (R1304 = 0 && R1305 = 0)) && (R21 = 0 || (R1306 = 0 && R1307 = 0)) && (R21 = 0 || (R1308 = 0 && R1309 = 0)) && (R21 = 0 || (R1310 = 0 && R1311 = 0)) && (R21 = 0 || (R1312 = 0 && R1313 = 0)) && (R50 + R1285 + R1282 = 0 || R47 + R1281 + R1279 < 1) && (R1288 = 0 || (R19 = 0 && R1299 = 0)) && (R1290 = 0 || (R19 = 0 && R1299 = 0)) && (R1292 = 0 || (R19 = 0 && R1299 = 0)) && (R1294 = 0 || (R19 = 0 && R1299 = 0)) && (R1296 = 0 || (R19 = 0 && R1299 = 0)) && (R1300 = 0 || (R19 = 0 && R1299 = 0));
// End of Parikh automata intersection problem
