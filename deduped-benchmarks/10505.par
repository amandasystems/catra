// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R1278, R1279, R1280, R1281, R14, R1550, R1551, R1552, R1553, R1554, R1555, R1556, R1557, R1558, R1559, R1560, R1561, R1562, R1563, R1564, R1565, R1566, R1567, R1568, R1569, R1570, R1571, R1572, R1573, R1574, R1575, R1576, R1577, R1578, R1579, R1580, R1581, R1582, R1583, R1584, R1585, R1586, R1587, R1588, R1589, R1590, R1591, R1592, R1593, R1594, R1595, R1596, R1597, R1598, R1599, R1600, R1601, R1602, R1603, R1604, R1605, R1606, R1607, R1608, R1609, R1610, R1611, R1612, R1613, R1614, R1615, R1616, R1617, R1618, R1619, R1620, R1621, R1622, R1623, R1624, R1625, R1626, R1627, R1628, R1629, R1630, R1631, R1632, R1633, R1634, R1635, R1636, R1637, R1638, R1639, R1640, R1641, R1642, R1643, R1644, R1645, R1646, R1647, R1648, R1649, R1650, R1651, R1652, R1653, R1654, R1655, R1656, R1657, R1658, R1659, R1660, R1661, R1662, R1663, R1664, R1665, R1666, R1667, R1668, R1669, R1670, R1671, R1672, R1673, R1674, R1675, R1676, R1677, R1678, R1679, R1680, R1681, R1682, R1683, R17, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R31, R32, R33, R34, R35, R36, R37, R4, R42, R44, R46, R47, R5, R50, R51, R52, R56, R57, R58, R59, R6, R7;
synchronised {  // Automata constraining P9
automaton P9_0 {
  init s0;
  s0 -> s1 [98, 98];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R17 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s0 [0, 65535] { R30 += 1, R31 += 1 };
  s0 -> s1 [13, 13] { R31 += 1 };
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value2_4 {
  init s0;
  s0 -> s0 [0, 65535] { R32 += 1, R33 += 1 };
  s0 -> s1 [0, 65535] { R33 += 1, R6 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R33 += 1, R6 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 8] { R35 += 1 };
  s0 -> s0 [0, 65535] { R34 += 1, R35 += 1 };
  s0 -> s2 [9, 13] { R35 += 1 };
  s0 -> s1 [14, 31] { R35 += 1 };
  s0 -> s2 [32, 32] { R35 += 1 };
  s0 -> s1 [33, 65535] { R35 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R35 += 1 };
  s2 -> s1 [0, 65535] { R35 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 65535] { R37 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R36 += 1, R37 += 1 };
  s1 -> s1 [0, 65535] { R37 += 1, R7 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 64] { R1627 += 1 };
  s0 -> s0 [0, 65535] { R1626 += 1, R1627 += 1 };
  s0 -> s2 [66, 66] { R1627 += 1 };
  s0 -> s1 [67, 65535] { R1627 += 1 };
  s1 -> s1 [0, 64] { R1627 += 1 };
  s1 -> s2 [66, 66] { R1627 += 1 };
  s1 -> s1 [67, 65535] { R1627 += 1 };
  s2 -> s2 [0, 64] { R1627 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [66, 65535] { R1627 += 1 };
  accepting s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R1629 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R1628 += 1, R1629 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R1629 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 65] { R1631 += 1 };
  s0 -> s2 [0, 65535] { R1631 += 1, R14 += 1 };
  s0 -> s0 [0, 65535] { R1630 += 1, R1631 += 1 };
  s0 -> s3 [66, 66] { R1631 += 1 };
  s0 -> s1 [67, 65535] { R1631 += 1 };
  s1 -> s1 [0, 65] { R1631 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [66, 66] { R1631 += 1 };
  s1 -> s1 [67, 65535] { R1631 += 1 };
  s2 -> s1 [0, 65] { R1631 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1631 += 1, R14 += 1 };
  s2 -> s3 [66, 66] { R1631 += 1 };
  s2 -> s1 [67, 65535] { R1631 += 1 };
  s3 -> s3 [0, 65535] { R1631 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 8] { R1633 += 1, R23 += 1 };
  s0 -> s2 [0, 65535] { R1633 += 1, R22 += 1, R23 += 1 };
  s0 -> s0 [0, 65535] { R1632 += 1, R1633 += 1 };
  s0 -> s3 [9, 13] { R1633 += 1, R23 += 1 };
  s0 -> s1 [14, 31] { R1633 += 1, R23 += 1 };
  s0 -> s3 [32, 32] { R1633 += 1, R23 += 1 };
  s0 -> s1 [33, 65535] { R1633 += 1, R23 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R1633 += 1 };
  s1 -> s1 [0, 65535] { R1633 += 1, R23 += 1 };
  s2 -> s1 [0, 8] { R1633 += 1, R23 += 1 };
  s2 -> s2 [0, 65535] { R1633 += 1, R22 += 1, R23 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R1633 += 1, R23 += 1 };
  s2 -> s1 [14, 31] { R1633 += 1, R23 += 1 };
  s2 -> s3 [32, 32] { R1633 += 1, R23 += 1 };
  s2 -> s1 [33, 65535] { R1633 += 1, R23 += 1 };
  s3 -> s1 [0, 65535] { R1633 += 1, R23 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1633 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 65535] { R1635 += 1, R25 += 1, R4 += 1 };
  s0 -> s2 [0, 65535] { R1635 += 1, R24 += 1, R25 += 1 };
  s0 -> s0 [0, 65535] { R1634 += 1, R1635 += 1 };
  s1 -> s1 [0, 65535] { R1635 += 1, R25 += 1, R4 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R1635 += 1 };
  s2 -> s1 [0, 65535] { R1635 += 1, R25 += 1, R4 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1635 += 1, R24 += 1, R25 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1635 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 8] { R1637 += 1, R27 += 1 };
  s0 -> s0 [0, 65535] { R1636 += 1, R1637 += 1 };
  s0 -> s2 [0, 65535] { R1637 += 1, R26 += 1, R27 += 1 };
  s0 -> s3 [9, 13] { R1637 += 1, R27 += 1 };
  s0 -> s1 [14, 31] { R1637 += 1, R27 += 1 };
  s0 -> s3 [32, 32] { R1637 += 1, R27 += 1 };
  s0 -> s1 [33, 65535] { R1637 += 1, R27 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R1637 += 1 };
  s1 -> s1 [0, 65535] { R1637 += 1, R27 += 1 };
  s2 -> s1 [0, 8] { R1637 += 1, R27 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1637 += 1, R26 += 1, R27 += 1 };
  s2 -> s3 [9, 13] { R1637 += 1, R27 += 1 };
  s2 -> s1 [14, 31] { R1637 += 1, R27 += 1 };
  s2 -> s3 [32, 32] { R1637 += 1, R27 += 1 };
  s2 -> s1 [33, 65535] { R1637 += 1, R27 += 1 };
  s3 -> s1 [0, 65535] { R1637 += 1, R27 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1637 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 65535] { R1639 += 1, R28 += 1, R29 += 1 };
  s0 -> s2 [0, 65535] { R1639 += 1, R29 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R1638 += 1, R1639 += 1 };
  s1 -> s1 [0, 65535] { R1639 += 1, R28 += 1, R29 += 1 };
  s1 -> s2 [0, 65535] { R1639 += 1, R29 += 1, R5 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R1639 += 1 };
  s2 -> s2 [0, 65535] { R1639 += 1, R29 += 1, R5 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1639 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s0 [0, 65535] { R1640 += 1, R1641 += 1 };
  s0 -> s1 [0, 65535] { R1641 += 1, R1570 += 1, R1571 += 1 };
  s0 -> s2 [0, 65535] { R1641 += 1, R1571 += 1, R21 += 1 };
  s1 -> s1 [0, 65535] { R1641 += 1, R1570 += 1, R1571 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R1641 += 1, R1571 += 1, R21 += 1 };
  s2 -> s3 [0, 65535] { R1641 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1641 += 1, R1571 += 1, R21 += 1 };
  s3 -> s3 [0, 65535] { R1641 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 65] { R1643 += 1, R1573 += 1 };
  s0 -> s2 [0, 65535] { R1643 += 1, R1572 += 1, R1573 += 1 };
  s0 -> s0 [0, 65535] { R1642 += 1, R1643 += 1 };
  s0 -> s3 [66, 66] { R1643 += 1, R1573 += 1 };
  s0 -> s4 [66, 66] { R1643 += 1, R1573 += 1 };
  s0 -> s1 [71, 65535] { R1643 += 1, R1573 += 1 };
  s1 -> s1 [0, 65] { R1643 += 1, R1573 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1643 += 1 };
  s1 -> s3 [66, 66] { R1643 += 1, R1573 += 1 };
  s1 -> s4 [66, 66] { R1643 += 1, R1573 += 1 };
  s1 -> s1 [71, 65535] { R1643 += 1, R1573 += 1 };
  s2 -> s1 [0, 65] { R1643 += 1, R1573 += 1 };
  s2 -> s2 [0, 65535] { R1643 += 1, R1572 += 1, R1573 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [66, 66] { R1643 += 1, R1573 += 1 };
  s2 -> s4 [66, 66] { R1643 += 1, R1573 += 1 };
  s2 -> s1 [71, 65535] { R1643 += 1, R1573 += 1 };
  s3 -> s3 [0, 65535] { R1643 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 66] { R1643 += 1, R1573 += 1 };
  s4 -> s4 [0, 65535] { R1643 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [71, 65535] { R1643 += 1, R1573 += 1 };
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 65] { R1645 += 1, R1575 += 1, R42 += 1 };
  s0 -> s2 [0, 65535] { R1645 += 1, R1574 += 1, R1575 += 1 };
  s0 -> s0 [0, 65535] { R1644 += 1, R1645 += 1 };
  s0 -> s3 [66, 66] { R1645 += 1, R1575 += 1, R42 += 1 };
  s0 -> s4 [66, 66] { R1645 += 1, R1575 += 1, R42 += 1 };
  s0 -> s1 [67, 65535] { R1645 += 1, R1575 += 1, R42 += 1 };
  s1 -> s1 [0, 65] { R1645 += 1, R1575 += 1, R42 += 1 };
  s1 -> s1 [0, 65535] { R1645 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [66, 66] { R1645 += 1, R1575 += 1, R42 += 1 };
  s1 -> s4 [66, 66] { R1645 += 1, R1575 += 1, R42 += 1 };
  s1 -> s1 [67, 65535] { R1645 += 1, R1575 += 1, R42 += 1 };
  s2 -> s1 [0, 65] { R1645 += 1, R1575 += 1, R42 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R1645 += 1, R1574 += 1, R1575 += 1 };
  s2 -> s3 [66, 66] { R1645 += 1, R1575 += 1, R42 += 1 };
  s2 -> s4 [66, 66] { R1645 += 1, R1575 += 1, R42 += 1 };
  s2 -> s1 [67, 65535] { R1645 += 1, R1575 += 1, R42 += 1 };
  s3 -> s3 [0, 65535] { R1645 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R1645 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R1645 += 1, R1575 += 1, R42 += 1 };
  s5 -> s5 [0, 65535] { R1645 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 65] { R1647 += 1, R1577 += 1, R44 += 1 };
  s0 -> s2 [0, 65535] { R1647 += 1, R1576 += 1, R1577 += 1 };
  s0 -> s0 [0, 65535] { R1646 += 1, R1647 += 1 };
  s0 -> s3 [66, 66] { R1647 += 1, R1577 += 1, R44 += 1 };
  s0 -> s4 [66, 66] { R1647 += 1, R1577 += 1, R44 += 1 };
  s0 -> s1 [67, 65535] { R1647 += 1, R1577 += 1, R44 += 1 };
  s1 -> s1 [0, 65] { R1647 += 1, R1577 += 1, R44 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1647 += 1 };
  s1 -> s3 [66, 66] { R1647 += 1, R1577 += 1, R44 += 1 };
  s1 -> s4 [66, 66] { R1647 += 1, R1577 += 1, R44 += 1 };
  s1 -> s1 [67, 65535] { R1647 += 1, R1577 += 1, R44 += 1 };
  s2 -> s1 [0, 65] { R1647 += 1, R1577 += 1, R44 += 1 };
  s2 -> s2 [0, 65535] { R1647 += 1, R1576 += 1, R1577 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [66, 66] { R1647 += 1, R1577 += 1, R44 += 1 };
  s2 -> s4 [66, 66] { R1647 += 1, R1577 += 1, R44 += 1 };
  s2 -> s1 [67, 65535] { R1647 += 1, R1577 += 1, R44 += 1 };
  s3 -> s3 [0, 65535] { R1647 += 1, R1577 += 1, R44 += 1 };
  s3 -> s6 [0, 65535] { R1647 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1647 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1647 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65] { R1649 += 1, R1579 += 1, R46 += 1, R47 += 1 };
  s0 -> s2 [0, 65535] { R1649 += 1, R1578 += 1, R1579 += 1 };
  s0 -> s0 [0, 65535] { R1648 += 1, R1649 += 1 };
  s0 -> s3 [66, 66] { R1649 += 1, R1579 += 1, R46 += 1, R47 += 1 };
  s0 -> s4 [66, 66] { R1649 += 1, R1579 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [67, 65535] { R1649 += 1, R1579 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65] { R1649 += 1, R1579 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535] { R1649 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [66, 66] { R1649 += 1, R1579 += 1, R46 += 1, R47 += 1 };
  s1 -> s4 [66, 66] { R1649 += 1, R1579 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [67, 65535] { R1649 += 1, R1579 += 1, R46 += 1, R47 += 1 };
  s2 -> s1 [0, 65] { R1649 += 1, R1579 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535] { R1649 += 1, R1578 += 1, R1579 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [66, 66] { R1649 += 1, R1579 += 1, R46 += 1, R47 += 1 };
  s2 -> s4 [66, 66] { R1649 += 1, R1579 += 1, R46 += 1, R47 += 1 };
  s2 -> s1 [67, 65535] { R1649 += 1, R1579 += 1, R46 += 1, R47 += 1 };
  s3 -> s3 [0, 65535] { R1649 += 1, R1579 += 1, R46 += 1, R47 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R1649 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1649 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1649 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 65] { R1651 += 1, R1581 += 1, R50 += 1, R51 += 1 };
  s0 -> s0 [0, 65535] { R1650 += 1, R1651 += 1 };
  s0 -> s2 [0, 65535] { R1651 += 1, R1580 += 1, R1581 += 1 };
  s0 -> s3 [66, 66] { R1651 += 1, R1581 += 1, R50 += 1, R51 += 1 };
  s0 -> s4 [66, 66] { R1651 += 1, R1581 += 1, R50 += 1, R51 += 1 };
  s0 -> s1 [67, 65535] { R1651 += 1, R1581 += 1, R50 += 1, R51 += 1 };
  s1 -> s1 [0, 65] { R1651 += 1, R1581 += 1, R50 += 1, R51 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1651 += 1 };
  s1 -> s3 [66, 66] { R1651 += 1, R1581 += 1, R50 += 1, R51 += 1 };
  s1 -> s4 [66, 66] { R1651 += 1, R1581 += 1, R50 += 1, R51 += 1 };
  s1 -> s1 [67, 65535] { R1651 += 1, R1581 += 1, R50 += 1, R51 += 1 };
  s2 -> s1 [0, 65] { R1651 += 1, R1581 += 1, R50 += 1, R51 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1651 += 1, R1580 += 1, R1581 += 1 };
  s2 -> s3 [66, 66] { R1651 += 1, R1581 += 1, R50 += 1, R51 += 1 };
  s2 -> s4 [66, 66] { R1651 += 1, R1581 += 1, R50 += 1, R51 += 1 };
  s2 -> s1 [67, 65535] { R1651 += 1, R1581 += 1, R50 += 1, R51 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R1651 += 1, R1581 += 1, R50 += 1, R51 += 1 };
  s3 -> s6 [0, 65535] { R1651 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1651 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1651 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 65] { R1653 += 1, R1595 += 1 };
  s0 -> s0 [0, 65535] { R1652 += 1, R1653 += 1 };
  s0 -> s2 [0, 65535] { R1653 += 1, R1594 += 1, R1595 += 1 };
  s0 -> s3 [66, 66] { R1653 += 1, R1595 += 1 };
  s0 -> s1 [67, 65535] { R1653 += 1, R1595 += 1 };
  s1 -> s1 [0, 65] { R1653 += 1, R1595 += 1 };
  s1 -> s3 [66, 66] { R1653 += 1, R1595 += 1 };
  s1 -> s1 [67, 65535] { R1653 += 1, R1595 += 1 };
  s2 -> s1 [0, 65] { R1653 += 1, R1595 += 1 };
  s2 -> s2 [0, 65535] { R1653 += 1, R1594 += 1, R1595 += 1 };
  s2 -> s3 [66, 66] { R1653 += 1, R1595 += 1 };
  s2 -> s1 [67, 65535] { R1653 += 1, R1595 += 1 };
  s3 -> s4 [0, 65535] { R1653 += 1 };
  s3 -> s3 [0, 65535] { R1653 += 1, R1595 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1653 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
automaton value2_21 {
  init s0;
  s0 -> s0 [0, 65535] { R1654 += 1, R1655 += 1 };
  s0 -> s1 [0, 65535] { R1655 += 1, R1597 += 1, R1 += 1 };
  s0 -> s2 [0, 65535] { R1655 += 1, R1596 += 1, R1597 += 1 };
  s1 -> s1 [0, 65535] { R1655 += 1, R1597 += 1, R1 += 1 };
  s1 -> s4 [0, 65535] { R1655 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R1655 += 1, R1597 += 1, R1 += 1 };
  s2 -> s2 [0, 65535] { R1655 += 1, R1596 += 1, R1597 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1655 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 65] { R1657 += 1, R1599 += 1 };
  s0 -> s2 [0, 65535] { R1657 += 1, R1599 += 1, R11 += 1 };
  s0 -> s3 [0, 65535] { R1657 += 1, R1598 += 1, R1599 += 1 };
  s0 -> s0 [0, 65535] { R1656 += 1, R1657 += 1 };
  s0 -> s4 [66, 66] { R1657 += 1, R1599 += 1 };
  s0 -> s1 [67, 65535] { R1657 += 1, R1599 += 1 };
  s1 -> s1 [0, 65] { R1657 += 1, R1599 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1657 += 1 };
  s1 -> s4 [66, 66] { R1657 += 1, R1599 += 1 };
  s1 -> s1 [67, 65535] { R1657 += 1, R1599 += 1 };
  s2 -> s1 [0, 65] { R1657 += 1, R1599 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1657 += 1, R1599 += 1, R11 += 1 };
  s2 -> s6 [0, 65535] { R1657 += 1 };
  s2 -> s4 [66, 66] { R1657 += 1, R1599 += 1 };
  s2 -> s1 [67, 65535] { R1657 += 1, R1599 += 1 };
  s3 -> s1 [0, 65] { R1657 += 1, R1599 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R1657 += 1, R1599 += 1, R11 += 1 };
  s3 -> s3 [0, 65535] { R1657 += 1, R1598 += 1, R1599 += 1 };
  s3 -> s4 [66, 66] { R1657 += 1, R1599 += 1 };
  s3 -> s1 [67, 65535] { R1657 += 1, R1599 += 1 };
  s4 -> s4 [0, 65535] { R1657 += 1, R1599 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1657 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65] { R1659 += 1, R1601 += 1, R1557 += 1 };
  s0 -> s0 [0, 65535] { R1658 += 1, R1659 += 1 };
  s0 -> s2 [0, 65535] { R1659 += 1, R1601 += 1, R1556 += 1, R1557 += 1 };
  s0 -> s3 [0, 65535] { R1659 += 1, R1600 += 1, R1601 += 1 };
  s0 -> s1 [67, 65535] { R1659 += 1, R1601 += 1, R1557 += 1 };
  s1 -> s1 [0, 65] { R1659 += 1, R1601 += 1, R1557 += 1 };
  s1 -> s5 [0, 65535] { R1659 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R1659 += 1, R1601 += 1 };
  s1 -> s1 [67, 65535] { R1659 += 1, R1601 += 1, R1557 += 1 };
  s2 -> s1 [0, 65] { R1659 += 1, R1601 += 1, R1557 += 1 };
  s2 -> s5 [0, 65535] { R1659 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1659 += 1, R1601 += 1, R1556 += 1, R1557 += 1 };
  s2 -> s1 [67, 65535] { R1659 += 1, R1601 += 1, R1557 += 1 };
  s3 -> s1 [0, 65] { R1659 += 1, R1601 += 1, R1557 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R1659 += 1, R1601 += 1, R1556 += 1, R1557 += 1 };
  s3 -> s3 [0, 65535] { R1659 += 1, R1600 += 1, R1601 += 1 };
  s3 -> s1 [67, 65535] { R1659 += 1, R1601 += 1, R1557 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1659 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s0 [0, 65535] { R1660 += 1, R1661 += 1 };
  s0 -> s1 [0, 65535] { R1661 += 1, R1602 += 1, R1603 += 1 };
  s0 -> s2 [0, 65535] { R1661 += 1, R1603 += 1, R1559 += 1, R19 += 1 };
  s0 -> s3 [0, 65535] { R1661 += 1, R1603 += 1, R1558 += 1, R1559 += 1 };
  s1 -> s1 [0, 65535] { R1661 += 1, R1602 += 1, R1603 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R1661 += 1, R1603 += 1, R1559 += 1, R19 += 1 };
  s1 -> s3 [0, 65535] { R1661 += 1, R1603 += 1, R1558 += 1, R1559 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s6 [0, 65535] { R1661 += 1, R1603 += 1 };
  s2 -> s5 [0, 65535] { R1661 += 1 };
  s2 -> s2 [0, 65535] { R1661 += 1, R1603 += 1, R1559 += 1, R19 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R1661 += 1 };
  s3 -> s2 [0, 65535] { R1661 += 1, R1603 += 1, R1559 += 1, R19 += 1 };
  s3 -> s3 [0, 65535] { R1661 += 1, R1603 += 1, R1558 += 1, R1559 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1661 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R1661 += 1, R1603 += 1 };
  s6 -> s5 [0, 65535] { R1661 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 66] { R1663 += 1, R1605 += 1, R1561 += 1 };
  s0 -> s0 [0, 65535] { R1662 += 1, R1663 += 1 };
  s0 -> s2 [0, 65535] { R1663 += 1, R1604 += 1, R1605 += 1 };
  s0 -> s3 [0, 65535] { R1663 += 1, R1605 += 1, R1560 += 1, R1561 += 1 };
  s0 -> s1 [70, 65535] { R1663 += 1, R1605 += 1, R1561 += 1 };
  s1 -> s1 [0, 66] { R1663 += 1, R1605 += 1, R1561 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R1663 += 1, R1605 += 1 };
  s1 -> s5 [0, 65535] { R1663 += 1 };
  s1 -> s1 [70, 65535] { R1663 += 1, R1605 += 1, R1561 += 1 };
  s2 -> s1 [0, 66] { R1663 += 1, R1605 += 1, R1561 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1663 += 1, R1604 += 1, R1605 += 1 };
  s2 -> s3 [0, 65535] { R1663 += 1, R1605 += 1, R1560 += 1, R1561 += 1 };
  s2 -> s1 [70, 65535] { R1663 += 1, R1605 += 1, R1561 += 1 };
  s3 -> s1 [0, 66] { R1663 += 1, R1605 += 1, R1561 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1663 += 1, R1605 += 1, R1560 += 1, R1561 += 1 };
  s3 -> s5 [0, 65535] { R1663 += 1 };
  s3 -> s1 [70, 65535] { R1663 += 1, R1605 += 1, R1561 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1663 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s0 [0, 65535] { R1664 += 1, R1665 += 1 };
  s0 -> s1 [0, 65535] { R1665 += 1, R1606 += 1, R1607 += 1 };
  s0 -> s2 [0, 65535] { R1665 += 1, R1607 += 1, R1563 += 1, R57 += 1 };
  s0 -> s3 [0, 65535] { R1665 += 1, R1607 += 1, R1562 += 1, R1563 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R1665 += 1, R1606 += 1, R1607 += 1 };
  s1 -> s2 [0, 65535] { R1665 += 1, R1607 += 1, R1563 += 1, R57 += 1 };
  s1 -> s3 [0, 65535] { R1665 += 1, R1607 += 1, R1562 += 1, R1563 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s6 [0, 65535] { R1665 += 1, R1607 += 1 };
  s2 -> s5 [0, 65535] { R1665 += 1 };
  s2 -> s2 [0, 65535] { R1665 += 1, R1607 += 1, R1563 += 1, R57 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R1665 += 1 };
  s3 -> s2 [0, 65535] { R1665 += 1, R1607 += 1, R1563 += 1, R57 += 1 };
  s3 -> s3 [0, 65535] { R1665 += 1, R1607 += 1, R1562 += 1, R1563 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1665 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R1665 += 1, R1607 += 1 };
  s6 -> s5 [0, 65535] { R1665 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 69] { R1667 += 1, R1609 += 1, R1565 += 1 };
  s0 -> s2 [0, 65535] { R1667 += 1, R1608 += 1, R1609 += 1 };
  s0 -> s0 [0, 65535] { R1666 += 1, R1667 += 1 };
  s0 -> s3 [0, 65535] { R1667 += 1, R1609 += 1, R1565 += 1, R59 += 1 };
  s0 -> s4 [0, 65535] { R1667 += 1, R1609 += 1, R1564 += 1, R1565 += 1 };
  s0 -> s1 [71, 65535] { R1667 += 1, R1609 += 1, R1565 += 1 };
  s1 -> s1 [0, 69] { R1667 += 1, R1609 += 1, R1565 += 1 };
  s1 -> s5 [0, 65535] { R1667 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R1667 += 1, R1609 += 1 };
  s1 -> s1 [71, 65535] { R1667 += 1, R1609 += 1, R1565 += 1 };
  s2 -> s1 [0, 69] { R1667 += 1, R1609 += 1, R1565 += 1 };
  s2 -> s2 [0, 65535] { R1667 += 1, R1608 += 1, R1609 += 1 };
  s2 -> s3 [0, 65535] { R1667 += 1, R1609 += 1, R1565 += 1, R59 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s4 [0, 65535] { R1667 += 1, R1609 += 1, R1564 += 1, R1565 += 1 };
  s2 -> s1 [71, 65535] { R1667 += 1, R1609 += 1, R1565 += 1 };
  s3 -> s1 [0, 69] { R1667 += 1, R1609 += 1, R1565 += 1 };
  s3 -> s5 [0, 65535] { R1667 += 1 };
  s3 -> s3 [0, 65535] { R1667 += 1, R1609 += 1, R1565 += 1, R59 += 1 };
  s3 -> s7 [0, 65535] { R1667 += 1, R1609 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s1 [71, 65535] { R1667 += 1, R1609 += 1, R1565 += 1 };
  s4 -> s1 [0, 69] { R1667 += 1, R1609 += 1, R1565 += 1 };
  s4 -> s5 [0, 65535] { R1667 += 1 };
  s4 -> s3 [0, 65535] { R1667 += 1, R1609 += 1, R1565 += 1, R59 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R1667 += 1, R1609 += 1, R1564 += 1, R1565 += 1 };
  s4 -> s1 [71, 65535] { R1667 += 1, R1609 += 1, R1565 += 1 };
  s5 -> s5 [0, 65535] { R1667 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R1667 += 1 };
  s7 -> s7 [0, 65535] { R1667 += 1, R1609 += 1 };
  s7 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 69] { R1669 += 1, R1611 += 1, R1567 += 1, R1281 += 1 };
  s0 -> s2 [0, 65535] { R1669 += 1, R1611 += 1, R1567 += 1, R1280 += 1, R1281 += 1 };
  s0 -> s0 [0, 65535] { R1668 += 1, R1669 += 1 };
  s0 -> s3 [0, 65535] { R1669 += 1, R1611 += 1, R1566 += 1, R1567 += 1 };
  s0 -> s4 [0, 65535] { R1669 += 1, R1610 += 1, R1611 += 1 };
  s0 -> s5 [70, 70] { R1669 += 1, R1611 += 1, R1567 += 1, R1281 += 1 };
  s0 -> s1 [71, 65535] { R1669 += 1, R1611 += 1, R1567 += 1, R1281 += 1 };
  s1 -> s1 [0, 69] { R1669 += 1, R1611 += 1, R1567 += 1, R1281 += 1 };
  s1 -> s5 [70, 70] { R1669 += 1, R1611 += 1, R1567 += 1, R1281 += 1 };
  s1 -> s1 [71, 65535] { R1669 += 1, R1611 += 1, R1567 += 1, R1281 += 1 };
  s2 -> s1 [0, 69] { R1669 += 1, R1611 += 1, R1567 += 1, R1281 += 1 };
  s2 -> s2 [0, 65535] { R1669 += 1, R1611 += 1, R1567 += 1, R1280 += 1, R1281 += 1 };
  s2 -> s5 [70, 70] { R1669 += 1, R1611 += 1, R1567 += 1, R1281 += 1 };
  s2 -> s1 [71, 65535] { R1669 += 1, R1611 += 1, R1567 += 1, R1281 += 1 };
  s3 -> s1 [0, 69] { R1669 += 1, R1611 += 1, R1567 += 1, R1281 += 1 };
  s3 -> s2 [0, 65535] { R1669 += 1, R1611 += 1, R1567 += 1, R1280 += 1, R1281 += 1 };
  s3 -> s3 [0, 65535] { R1669 += 1, R1611 += 1, R1566 += 1, R1567 += 1 };
  s3 -> s5 [70, 70] { R1669 += 1, R1611 += 1, R1567 += 1, R1281 += 1 };
  s3 -> s1 [71, 65535] { R1669 += 1, R1611 += 1, R1567 += 1, R1281 += 1 };
  s4 -> s1 [0, 69] { R1669 += 1, R1611 += 1, R1567 += 1, R1281 += 1 };
  s4 -> s2 [0, 65535] { R1669 += 1, R1611 += 1, R1567 += 1, R1280 += 1, R1281 += 1 };
  s4 -> s3 [0, 65535] { R1669 += 1, R1611 += 1, R1566 += 1, R1567 += 1 };
  s4 -> s4 [0, 65535] { R1669 += 1, R1610 += 1, R1611 += 1 };
  s4 -> s5 [70, 70] { R1669 += 1, R1611 += 1, R1567 += 1, R1281 += 1 };
  s4 -> s1 [71, 65535] { R1669 += 1, R1611 += 1, R1567 += 1, R1281 += 1 };
  s5 -> s6 [0, 65535] { R1669 += 1, R1611 += 1 };
  s5 -> s7 [0, 65535] { R1669 += 1, R1611 += 1, R1567 += 1 };
  s5 -> s5 [0, 65535] { R1669 += 1, R1611 += 1, R1567 += 1, R1281 += 1 };
  s5 -> s8 [0, 65535] { R1669 += 1 };
  s5 -> s9 [0, 65535];
  s6 -> s6 [0, 65535] { R1669 += 1, R1611 += 1 };
  s6 -> s8 [0, 65535] { R1669 += 1 };
  s6 -> s9 [0, 65535];
  s7 -> s6 [0, 65535] { R1669 += 1, R1611 += 1 };
  s7 -> s7 [0, 65535] { R1669 += 1, R1611 += 1, R1567 += 1 };
  s7 -> s8 [0, 65535] { R1669 += 1 };
  s7 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R1669 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s8, s5, s9, s6, s7;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 65535] { R1671 += 1, R1612 += 1, R1613 += 1 };
  s0 -> s2 [0, 65535] { R1671 += 1, R1613 += 1, R1569 += 1 };
  s0 -> s3 [0, 65535] { R1671 += 1, R1613 += 1, R1568 += 1, R1569 += 1 };
  s0 -> s0 [0, 65535] { R1670 += 1, R1671 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R1671 += 1, R1612 += 1, R1613 += 1 };
  s1 -> s2 [0, 65535] { R1671 += 1, R1613 += 1, R1569 += 1 };
  s1 -> s3 [0, 65535] { R1671 += 1, R1613 += 1, R1568 += 1, R1569 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1671 += 1, R1613 += 1, R1569 += 1 };
  s2 -> s6 [0, 65535] { R1671 += 1, R1613 += 1 };
  s2 -> s5 [0, 65535] { R1671 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R1671 += 1, R1613 += 1, R1569 += 1 };
  s3 -> s3 [0, 65535] { R1671 += 1, R1613 += 1, R1568 += 1, R1569 += 1 };
  s3 -> s5 [0, 65535] { R1671 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1671 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R1671 += 1, R1613 += 1 };
  s6 -> s5 [0, 65535] { R1671 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R1673 += 1, R1615 += 1, R1583 += 1, R20 += 1 };
  s0 -> s0 [0, 65535] { R1672 += 1, R1673 += 1 };
  s0 -> s2 [0, 65535] { R1673 += 1, R1615 += 1, R1582 += 1, R1583 += 1 };
  s0 -> s3 [0, 65535] { R1673 += 1, R1614 += 1, R1615 += 1 };
  s1 -> s1 [0, 65535] { R1673 += 1, R1615 += 1, R1583 += 1, R20 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R1673 += 1, R1615 += 1 };
  s1 -> s5 [0, 65535] { R1673 += 1 };
  s2 -> s1 [0, 65535] { R1673 += 1, R1615 += 1, R1583 += 1, R20 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R1673 += 1 };
  s2 -> s2 [0, 65535] { R1673 += 1, R1615 += 1, R1582 += 1, R1583 += 1 };
  s3 -> s1 [0, 65535] { R1673 += 1, R1615 += 1, R1583 += 1, R20 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R1673 += 1, R1615 += 1, R1582 += 1, R1583 += 1 };
  s3 -> s3 [0, 65535] { R1673 += 1, R1614 += 1, R1615 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1673 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R1673 += 1, R1615 += 1 };
  s6 -> s5 [0, 65535] { R1673 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 65] { R1675 += 1, R1617 += 1, R1585 += 1 };
  s0 -> s0 [0, 65535] { R1674 += 1, R1675 += 1 };
  s0 -> s2 [0, 65535] { R1675 += 1, R1616 += 1, R1617 += 1 };
  s0 -> s3 [0, 65535] { R1675 += 1, R1617 += 1, R1584 += 1, R1585 += 1 };
  s0 -> s4 [66, 66] { R1675 += 1, R1617 += 1, R1585 += 1 };
  s0 -> s5 [66, 66] { R1675 += 1, R1617 += 1, R1585 += 1 };
  s0 -> s6 [70, 70] { R1675 += 1, R1617 += 1, R1585 += 1 };
  s0 -> s1 [71, 65535] { R1675 += 1, R1617 += 1, R1585 += 1 };
  s1 -> s1 [0, 65] { R1675 += 1, R1617 += 1, R1585 += 1 };
  s1 -> s4 [66, 66] { R1675 += 1, R1617 += 1, R1585 += 1 };
  s1 -> s5 [66, 66] { R1675 += 1, R1617 += 1, R1585 += 1 };
  s1 -> s6 [70, 70] { R1675 += 1, R1617 += 1, R1585 += 1 };
  s1 -> s1 [71, 65535] { R1675 += 1, R1617 += 1, R1585 += 1 };
  s2 -> s1 [0, 65] { R1675 += 1, R1617 += 1, R1585 += 1 };
  s2 -> s2 [0, 65535] { R1675 += 1, R1616 += 1, R1617 += 1 };
  s2 -> s3 [0, 65535] { R1675 += 1, R1617 += 1, R1584 += 1, R1585 += 1 };
  s2 -> s4 [66, 66] { R1675 += 1, R1617 += 1, R1585 += 1 };
  s2 -> s5 [66, 66] { R1675 += 1, R1617 += 1, R1585 += 1 };
  s2 -> s6 [70, 70] { R1675 += 1, R1617 += 1, R1585 += 1 };
  s2 -> s1 [71, 65535] { R1675 += 1, R1617 += 1, R1585 += 1 };
  s3 -> s1 [0, 65] { R1675 += 1, R1617 += 1, R1585 += 1 };
  s3 -> s3 [0, 65535] { R1675 += 1, R1617 += 1, R1584 += 1, R1585 += 1 };
  s3 -> s4 [66, 66] { R1675 += 1, R1617 += 1, R1585 += 1 };
  s3 -> s5 [66, 66] { R1675 += 1, R1617 += 1, R1585 += 1 };
  s3 -> s6 [70, 70] { R1675 += 1, R1617 += 1, R1585 += 1 };
  s3 -> s1 [71, 65535] { R1675 += 1, R1617 += 1, R1585 += 1 };
  s5 -> s5 [0, 66] { R1675 += 1, R1617 += 1, R1585 += 1 };
  s5 -> s9 [70, 70] { R1675 += 1, R1617 += 1, R1585 += 1 };
  s5 -> s5 [71, 65535] { R1675 += 1, R1617 += 1, R1585 += 1 };
  s6 -> s6 [0, 65] { R1675 += 1, R1617 += 1, R1585 += 1 };
  s6 -> s6 [0, 65535] { R1675 += 1, R1617 += 1 };
  s6 -> s7 [0, 65535];
  s6 -> s8 [0, 65535] { R1675 += 1 };
  s6 -> s9 [66, 66] { R1675 += 1, R1617 += 1, R1585 += 1 };
  s6 -> s10 [66, 66] { R1675 += 1, R1617 += 1, R1585 += 1 };
  s6 -> s6 [70, 65535] { R1675 += 1, R1617 += 1, R1585 += 1 };
  s7 -> s7 [0, 65535];
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R1675 += 1 };
  s9 -> s9 [0, 66] { R1675 += 1, R1617 += 1, R1585 += 1 };
  s9 -> s7 [0, 65535];
  s9 -> s8 [0, 65535] { R1675 += 1 };
  s9 -> s9 [0, 65535] { R1675 += 1, R1617 += 1 };
  s9 -> s9 [70, 65535] { R1675 += 1, R1617 += 1, R1585 += 1 };
  s10 -> s7 [0, 65535];
  s10 -> s8 [0, 65535] { R1675 += 1 };
  s10 -> s10 [0, 65535] { R1675 += 1, R1617 += 1 };
  accepting s8, s9, s6, s7, s10;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 65] { R1677 += 1, R1619 += 1, R1587 += 1, R56 += 1 };
  s0 -> s2 [0, 65535] { R1677 += 1, R1619 += 1, R1586 += 1, R1587 += 1 };
  s0 -> s0 [0, 65535] { R1676 += 1, R1677 += 1 };
  s0 -> s3 [0, 65535] { R1677 += 1, R1618 += 1, R1619 += 1 };
  s0 -> s4 [66, 66] { R1677 += 1, R1619 += 1, R1587 += 1, R56 += 1 };
  s0 -> s5 [66, 66] { R1677 += 1, R1619 += 1, R1587 += 1, R56 += 1 };
  s0 -> s1 [67, 65535] { R1677 += 1, R1619 += 1, R1587 += 1, R56 += 1 };
  s1 -> s1 [0, 65] { R1677 += 1, R1619 += 1, R1587 += 1, R56 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s8 [0, 65535] { R1677 += 1 };
  s1 -> s1 [0, 65535] { R1677 += 1, R1619 += 1 };
  s1 -> s4 [66, 66] { R1677 += 1, R1619 += 1, R1587 += 1, R56 += 1 };
  s1 -> s5 [66, 66] { R1677 += 1, R1619 += 1, R1587 += 1, R56 += 1 };
  s1 -> s1 [67, 65535] { R1677 += 1, R1619 += 1, R1587 += 1, R56 += 1 };
  s2 -> s1 [0, 65] { R1677 += 1, R1619 += 1, R1587 += 1, R56 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s8 [0, 65535] { R1677 += 1 };
  s2 -> s2 [0, 65535] { R1677 += 1, R1619 += 1, R1586 += 1, R1587 += 1 };
  s2 -> s4 [66, 66] { R1677 += 1, R1619 += 1, R1587 += 1, R56 += 1 };
  s2 -> s5 [66, 66] { R1677 += 1, R1619 += 1, R1587 += 1, R56 += 1 };
  s2 -> s1 [67, 65535] { R1677 += 1, R1619 += 1, R1587 += 1, R56 += 1 };
  s3 -> s1 [0, 65] { R1677 += 1, R1619 += 1, R1587 += 1, R56 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s2 [0, 65535] { R1677 += 1, R1619 += 1, R1586 += 1, R1587 += 1 };
  s3 -> s3 [0, 65535] { R1677 += 1, R1618 += 1, R1619 += 1 };
  s3 -> s4 [66, 66] { R1677 += 1, R1619 += 1, R1587 += 1, R56 += 1 };
  s3 -> s5 [66, 66] { R1677 += 1, R1619 += 1, R1587 += 1, R56 += 1 };
  s3 -> s1 [67, 65535] { R1677 += 1, R1619 += 1, R1587 += 1, R56 += 1 };
  s4 -> s4 [0, 65535] { R1677 += 1, R1619 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s8 [0, 65535] { R1677 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R1677 += 1, R1619 += 1 };
  s5 -> s8 [0, 65535] { R1677 += 1 };
  s5 -> s5 [0, 65535] { R1677 += 1, R1619 += 1, R1587 += 1, R56 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R1677 += 1, R1619 += 1 };
  s7 -> s8 [0, 65535] { R1677 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R1677 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 65] { R1679 += 1, R1621 += 1, R1589 += 1, R58 += 1 };
  s0 -> s0 [0, 65535] { R1678 += 1, R1679 += 1 };
  s0 -> s2 [0, 65535] { R1679 += 1, R1621 += 1, R1588 += 1, R1589 += 1 };
  s0 -> s3 [0, 65535] { R1679 += 1, R1620 += 1, R1621 += 1 };
  s0 -> s4 [66, 66] { R1679 += 1, R1621 += 1, R1589 += 1, R58 += 1 };
  s0 -> s5 [66, 66] { R1679 += 1, R1621 += 1, R1589 += 1, R58 += 1 };
  s0 -> s1 [67, 65535] { R1679 += 1, R1621 += 1, R1589 += 1, R58 += 1 };
  s1 -> s1 [0, 65] { R1679 += 1, R1621 += 1, R1589 += 1, R58 += 1 };
  s1 -> s1 [0, 65535] { R1679 += 1, R1621 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R1679 += 1 };
  s1 -> s4 [66, 66] { R1679 += 1, R1621 += 1, R1589 += 1, R58 += 1 };
  s1 -> s5 [66, 66] { R1679 += 1, R1621 += 1, R1589 += 1, R58 += 1 };
  s1 -> s1 [67, 65535] { R1679 += 1, R1621 += 1, R1589 += 1, R58 += 1 };
  s2 -> s1 [0, 65] { R1679 += 1, R1621 += 1, R1589 += 1, R58 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s7 [0, 65535] { R1679 += 1 };
  s2 -> s2 [0, 65535] { R1679 += 1, R1621 += 1, R1588 += 1, R1589 += 1 };
  s2 -> s4 [66, 66] { R1679 += 1, R1621 += 1, R1589 += 1, R58 += 1 };
  s2 -> s5 [66, 66] { R1679 += 1, R1621 += 1, R1589 += 1, R58 += 1 };
  s2 -> s1 [67, 65535] { R1679 += 1, R1621 += 1, R1589 += 1, R58 += 1 };
  s3 -> s1 [0, 65] { R1679 += 1, R1621 += 1, R1589 += 1, R58 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s2 [0, 65535] { R1679 += 1, R1621 += 1, R1588 += 1, R1589 += 1 };
  s3 -> s3 [0, 65535] { R1679 += 1, R1620 += 1, R1621 += 1 };
  s3 -> s4 [66, 66] { R1679 += 1, R1621 += 1, R1589 += 1, R58 += 1 };
  s3 -> s5 [66, 66] { R1679 += 1, R1621 += 1, R1589 += 1, R58 += 1 };
  s3 -> s1 [67, 65535] { R1679 += 1, R1621 += 1, R1589 += 1, R58 += 1 };
  s4 -> s8 [0, 65535] { R1679 += 1, R1621 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R1679 += 1 };
  s4 -> s4 [0, 65535] { R1679 += 1, R1621 += 1, R1589 += 1, R58 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R1679 += 1 };
  s5 -> s5 [0, 65535] { R1679 += 1, R1621 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R1679 += 1 };
  s8 -> s8 [0, 65535] { R1679 += 1, R1621 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R1679 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 65] { R1681 += 1, R1623 += 1, R1591 += 1, R1278 += 1, R1279 += 1 };
  s0 -> s0 [0, 65535] { R1680 += 1, R1681 += 1 };
  s0 -> s2 [0, 65535] { R1681 += 1, R1623 += 1, R1590 += 1, R1591 += 1 };
  s0 -> s3 [0, 65535] { R1681 += 1, R1622 += 1, R1623 += 1 };
  s0 -> s4 [66, 66] { R1681 += 1, R1623 += 1, R1591 += 1, R1278 += 1, R1279 += 1 };
  s0 -> s5 [66, 66] { R1681 += 1, R1623 += 1, R1591 += 1, R1278 += 1, R1279 += 1 };
  s0 -> s1 [67, 65535] { R1681 += 1, R1623 += 1, R1591 += 1, R1278 += 1, R1279 += 1 };
  s1 -> s1 [0, 65] { R1681 += 1, R1623 += 1, R1591 += 1, R1278 += 1, R1279 += 1 };
  s1 -> s6 [0, 65535] { R1681 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s1 [0, 65535] { R1681 += 1, R1623 += 1 };
  s1 -> s4 [66, 66] { R1681 += 1, R1623 += 1, R1591 += 1, R1278 += 1, R1279 += 1 };
  s1 -> s5 [66, 66] { R1681 += 1, R1623 += 1, R1591 += 1, R1278 += 1, R1279 += 1 };
  s1 -> s1 [67, 65535] { R1681 += 1, R1623 += 1, R1591 += 1, R1278 += 1, R1279 += 1 };
  s2 -> s1 [0, 65] { R1681 += 1, R1623 += 1, R1591 += 1, R1278 += 1, R1279 += 1 };
  s2 -> s6 [0, 65535] { R1681 += 1 };
  s2 -> s2 [0, 65535] { R1681 += 1, R1623 += 1, R1590 += 1, R1591 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s4 [66, 66] { R1681 += 1, R1623 += 1, R1591 += 1, R1278 += 1, R1279 += 1 };
  s2 -> s5 [66, 66] { R1681 += 1, R1623 += 1, R1591 += 1, R1278 += 1, R1279 += 1 };
  s2 -> s1 [67, 65535] { R1681 += 1, R1623 += 1, R1591 += 1, R1278 += 1, R1279 += 1 };
  s3 -> s1 [0, 65] { R1681 += 1, R1623 += 1, R1591 += 1, R1278 += 1, R1279 += 1 };
  s3 -> s2 [0, 65535] { R1681 += 1, R1623 += 1, R1590 += 1, R1591 += 1 };
  s3 -> s3 [0, 65535] { R1681 += 1, R1622 += 1, R1623 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s4 [66, 66] { R1681 += 1, R1623 += 1, R1591 += 1, R1278 += 1, R1279 += 1 };
  s3 -> s5 [66, 66] { R1681 += 1, R1623 += 1, R1591 += 1, R1278 += 1, R1279 += 1 };
  s3 -> s1 [67, 65535] { R1681 += 1, R1623 += 1, R1591 += 1, R1278 += 1, R1279 += 1 };
  s4 -> s6 [0, 65535] { R1681 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s4 [0, 65535] { R1681 += 1, R1623 += 1 };
  s5 -> s6 [0, 65535] { R1681 += 1 };
  s5 -> s7 [0, 65535];
  s5 -> s8 [0, 65535] { R1681 += 1, R1623 += 1 };
  s5 -> s5 [0, 65535] { R1681 += 1, R1623 += 1, R1591 += 1, R1278 += 1, R1279 += 1 };
  s6 -> s6 [0, 65535] { R1681 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  s8 -> s6 [0, 65535] { R1681 += 1 };
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R1681 += 1, R1623 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 65] { R1683 += 1, R1625 += 1, R1593 += 1, R1551 += 1, R1552 += 1 };
  s0 -> s2 [0, 65] { R1683 += 1, R1625 += 1, R1593 += 1, R1550 += 1, R1551 += 1 };
  s0 -> s0 [0, 65535] { R1682 += 1, R1683 += 1 };
  s0 -> s3 [0, 65535] { R1683 += 1, R1624 += 1, R1625 += 1 };
  s0 -> s4 [0, 65535] { R1683 += 1, R1625 += 1, R1592 += 1, R1593 += 1 };
  s0 -> s5 [66, 66] { R1683 += 1, R1625 += 1, R1593 += 1, R1550 += 1, R1551 += 1 };
  s0 -> s6 [66, 66] { R1683 += 1, R1625 += 1, R1593 += 1, R1551 += 1, R1552 += 1 };
  s0 -> s7 [66, 66] { R1683 += 1, R1625 += 1, R1593 += 1, R1550 += 1, R1551 += 1 };
  s0 -> s8 [66, 66] { R1683 += 1, R1625 += 1, R1593 += 1, R1551 += 1, R1552 += 1 };
  s0 -> s1 [67, 65535] { R1683 += 1, R1625 += 1, R1593 += 1, R1551 += 1, R1552 += 1 };
  s0 -> s2 [67, 65535] { R1683 += 1, R1625 += 1, R1593 += 1, R1550 += 1, R1551 += 1 };
  s1 -> s1 [0, 65] { R1683 += 1, R1625 += 1, R1593 += 1, R1551 += 1, R1552 += 1 };
  s1 -> s13 [0, 65] { R1683 += 1, R1625 += 1, R1593 += 1 };
  s1 -> s14 [66, 66] { R1683 += 1, R1625 += 1, R1593 += 1 };
  s1 -> s6 [66, 66] { R1683 += 1, R1625 += 1, R1593 += 1, R1551 += 1, R1552 += 1 };
  s1 -> s9 [66, 66] { R1683 += 1, R1625 += 1, R1593 += 1 };
  s1 -> s8 [66, 66] { R1683 += 1, R1625 += 1, R1593 += 1, R1551 += 1, R1552 += 1 };
  s1 -> s1 [67, 65535] { R1683 += 1, R1625 += 1, R1593 += 1, R1551 += 1, R1552 += 1 };
  s1 -> s13 [67, 65535] { R1683 += 1, R1625 += 1, R1593 += 1 };
  s2 -> s1 [0, 65] { R1683 += 1, R1625 += 1, R1593 += 1, R1551 += 1, R1552 += 1 };
  s2 -> s2 [0, 65] { R1683 += 1, R1625 += 1, R1593 += 1, R1550 += 1, R1551 += 1 };
  s2 -> s5 [66, 66] { R1683 += 1, R1625 += 1, R1593 += 1, R1550 += 1, R1551 += 1 };
  s2 -> s6 [66, 66] { R1683 += 1, R1625 += 1, R1593 += 1, R1551 += 1, R1552 += 1 };
  s2 -> s7 [66, 66] { R1683 += 1, R1625 += 1, R1593 += 1, R1550 += 1, R1551 += 1 };
  s2 -> s8 [66, 66] { R1683 += 1, R1625 += 1, R1593 += 1, R1551 += 1, R1552 += 1 };
  s2 -> s1 [67, 65535] { R1683 += 1, R1625 += 1, R1593 += 1, R1551 += 1, R1552 += 1 };
  s2 -> s2 [67, 65535] { R1683 += 1, R1625 += 1, R1593 += 1, R1550 += 1, R1551 += 1 };
  s3 -> s1 [0, 65] { R1683 += 1, R1625 += 1, R1593 += 1, R1551 += 1, R1552 += 1 };
  s3 -> s2 [0, 65] { R1683 += 1, R1625 += 1, R1593 += 1, R1550 += 1, R1551 += 1 };
  s3 -> s3 [0, 65535] { R1683 += 1, R1624 += 1, R1625 += 1 };
  s3 -> s4 [0, 65535] { R1683 += 1, R1625 += 1, R1592 += 1, R1593 += 1 };
  s3 -> s5 [66, 66] { R1683 += 1, R1625 += 1, R1593 += 1, R1550 += 1, R1551 += 1 };
  s3 -> s6 [66, 66] { R1683 += 1, R1625 += 1, R1593 += 1, R1551 += 1, R1552 += 1 };
  s3 -> s7 [66, 66] { R1683 += 1, R1625 += 1, R1593 += 1, R1550 += 1, R1551 += 1 };
  s3 -> s8 [66, 66] { R1683 += 1, R1625 += 1, R1593 += 1, R1551 += 1, R1552 += 1 };
  s3 -> s1 [67, 65535] { R1683 += 1, R1625 += 1, R1593 += 1, R1551 += 1, R1552 += 1 };
  s3 -> s2 [67, 65535] { R1683 += 1, R1625 += 1, R1593 += 1, R1550 += 1, R1551 += 1 };
  s4 -> s1 [0, 65] { R1683 += 1, R1625 += 1, R1593 += 1, R1551 += 1, R1552 += 1 };
  s4 -> s2 [0, 65] { R1683 += 1, R1625 += 1, R1593 += 1, R1550 += 1, R1551 += 1 };
  s4 -> s4 [0, 65535] { R1683 += 1, R1625 += 1, R1592 += 1, R1593 += 1 };
  s4 -> s5 [66, 66] { R1683 += 1, R1625 += 1, R1593 += 1, R1550 += 1, R1551 += 1 };
  s4 -> s6 [66, 66] { R1683 += 1, R1625 += 1, R1593 += 1, R1551 += 1, R1552 += 1 };
  s4 -> s7 [66, 66] { R1683 += 1, R1625 += 1, R1593 += 1, R1550 += 1, R1551 += 1 };
  s4 -> s8 [66, 66] { R1683 += 1, R1625 += 1, R1593 += 1, R1551 += 1, R1552 += 1 };
  s4 -> s1 [67, 65535] { R1683 += 1, R1625 += 1, R1593 += 1, R1551 += 1, R1552 += 1 };
  s4 -> s2 [67, 65535] { R1683 += 1, R1625 += 1, R1593 += 1, R1550 += 1, R1551 += 1 };
  s6 -> s6 [0, 65535] { R1683 += 1, R1625 += 1, R1593 += 1, R1551 += 1, R1552 += 1 };
  s6 -> s9 [0, 65535] { R1683 += 1, R1625 += 1, R1593 += 1 };
  s7 -> s6 [0, 65535] { R1683 += 1, R1625 += 1, R1593 += 1, R1551 += 1, R1552 += 1 };
  s7 -> s7 [0, 65535] { R1683 += 1, R1625 += 1, R1593 += 1, R1550 += 1, R1551 += 1 };
  s9 -> s10 [0, 65535] { R1683 += 1, R1625 += 1 };
  s9 -> s11 [0, 65535];
  s9 -> s9 [0, 65535] { R1683 += 1, R1625 += 1, R1593 += 1 };
  s9 -> s12 [0, 65535] { R1683 += 1 };
  s10 -> s10 [0, 65535] { R1683 += 1, R1625 += 1 };
  s10 -> s11 [0, 65535];
  s10 -> s12 [0, 65535] { R1683 += 1 };
  s11 -> s11 [0, 65535];
  s12 -> s11 [0, 65535];
  s12 -> s12 [0, 65535] { R1683 += 1 };
  s13 -> s13 [0, 65] { R1683 += 1, R1625 += 1, R1593 += 1 };
  s13 -> s11 [0, 65535];
  s13 -> s13 [0, 65535] { R1683 += 1, R1625 += 1 };
  s13 -> s12 [0, 65535] { R1683 += 1 };
  s13 -> s14 [66, 66] { R1683 += 1, R1625 += 1, R1593 += 1 };
  s13 -> s9 [66, 66] { R1683 += 1, R1625 += 1, R1593 += 1 };
  s13 -> s13 [67, 65535] { R1683 += 1, R1625 += 1, R1593 += 1 };
  s14 -> s11 [0, 65535];
  s14 -> s14 [0, 65535] { R1683 += 1, R1625 += 1 };
  s14 -> s12 [0, 65535] { R1683 += 1 };
  accepting s12, s13, s9, s14, s10, s11;
};
};
synchronised {  // Automata constraining P37
automaton P37_0 {
  init s0;
  s0 -> s1 [9, 9];
  accepting s1;
};
};
synchronised {  // Automata constraining P38
automaton P38_0 {
  init s0;
  s0 -> s1 [10, 10];
  accepting s1;
};
};
synchronised {  // Automata constraining P36
automaton P36_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
constraint R1 = R1567 && R2 = R1625 && R3 - R1683 = 1 && R22 - R1625 = -1 && R23 = R1625 && R24 - R1625 = -1 && R25 = R1625 && R26 = 0 && R27 = 1 && R28 = 0 && R29 = 1 && R30 = R1683 && R31 - R1683 = 1 && R32 = R1683 && R33 - R1683 = 1 && R34 = 0 && R35 = 1 && R36 = 0 && R37 = 1 && R42 + R57 + R56 + -1*R1281 + -1*R1279 - R47 = 0 && R46 + R1280 + R1278 = 0 && R1566 = 0 && R1584 = 0 && R1585 = 0 && R1592 = 0 && R1593 = 0 && R1594 = 0 && R1595 = R1625 && R1596 = 0 && R1597 = R1625 && R1598 = 0 && R1599 = R1625 && R1600 = 0 && R1601 = R1625 && R1602 = 0 && R1603 = R1625 && R1604 = 0 && R1605 = R1625 && R1606 = 0 && R1607 = R1625 && R1608 = 0 && R1609 = R1625 && R1610 = 0 && R1611 = R1625 && R1612 = 0 && R1613 = R1625 && R1614 = 0 && R1615 = R1625 && R1616 = 0 && R1617 = R1625 && R1618 = 0 && R1619 = R1625 && R1620 = 0 && R1621 = R1625 && R1622 = 0 && R1623 = R1625 && R1624 = 0 && R1626 = 0 && R1627 = R1683 && R1628 = 0 && R1629 = R1683 && R1630 = 0 && R1631 = R1683 && R1632 = 0 && R1633 = R1683 && R1634 = 0 && R1635 = R1683 && R1636 = 0 && R1637 = R1683 && R1638 = 0 && R1639 = R1683 && R1640 = 0 && R1641 = R1683 && R1642 = 0 && R1643 = R1683 && R1644 = 0 && R1645 = R1683 && R1646 = 0 && R1647 = R1683 && R1648 = 0 && R1649 = R1683 && R1650 = 0 && R1651 = R1683 && R1652 = 0 && R1653 = R1683 && R1654 = 0 && R1655 = R1683 && R1656 = 0 && R1657 = R1683 && R1658 = 0 && R1659 = R1683 && R1660 = 0 && R1661 = R1683 && R1662 = 0 && R1663 = R1683 && R1664 = 0 && R1665 = R1683 && R1666 = 0 && R1667 = R1683 && R1668 = 0 && R1669 = R1683 && R1670 = 0 && R1671 = R1683 && R1672 = 0 && R1673 = R1683 && R1674 = 0 && R1675 = R1683 && R1676 = 0 && R1677 = R1683 && R1678 = 0 && R1679 = R1683 && R1680 = 0 && R1681 = R1683 && R1682 = 0 && R11 < 1 && R14 < 1 && R17 < 1 && R44 + R59 + R58 < 1 && -1*R1281 + -1*R1279 - R47 < 1 && -1 < R1567 && 0 < R1625 && -1 < R1683 && (R47 + R1281 + R1279 != 0 || R52 + R1555 + R1552 = 0 || (R50 + R1553 + R1550 = 0 && R51 + R1554 + R1551 = 0)) && (R50 + R1553 + R1550 != 0 || R47 + R1281 + R1279 + -1*R1554 + -1*R1551 - R51 = 0 || R47 + R1281 + R1279 < 1) && (R1556 != 0 || R1557 = R1567 || (R19 = 0 && R1567 = 0)) && (R1558 != 0 || R1559 = R1567 || (R19 = 0 && R1567 = 0)) && (R1560 != 0 || R1561 = R1567 || (R19 = 0 && R1567 = 0)) && (R1562 != 0 || R1563 = R1567 || (R19 = 0 && R1567 = 0)) && (R1564 != 0 || R1565 = R1567 || (R19 = 0 && R1567 = 0)) && (R1568 != 0 || R1567 = R1569 || (R19 = 0 && R1567 = 0)) && (R20 = 0 || (R1582 = 0 && R1583 = 0)) && (R20 = 0 || (R1586 = 0 && R1587 = 0)) && (R20 = 0 || (R1588 = 0 && R1589 = 0)) && (R20 = 0 || (R1590 = 0 && R1591 = 0)) && (R21 = 0 || (R1570 = 0 && R1571 = 0)) && (R21 = 0 || (R1572 = 0 && R1573 = 0)) && (R21 = 0 || (R1574 = 0 && R1575 = 0)) && (R21 = 0 || (R1576 = 0 && R1577 = 0)) && (R21 = 0 || (R1578 = 0 && R1579 = 0)) && (R21 = 0 || (R1580 = 0 && R1581 = 0)) && (R50 + R1553 + R1550 = 0 || R47 + R1281 + R1279 < 1) && (R1556 = 0 || (R19 = 0 && R1567 = 0)) && (R1558 = 0 || (R19 = 0 && R1567 = 0)) && (R1560 = 0 || (R19 = 0 && R1567 = 0)) && (R1562 = 0 || (R19 = 0 && R1567 = 0)) && (R1564 = 0 || (R19 = 0 && R1567 = 0)) && (R1568 = 0 || (R19 = 0 && R1567 = 0));
// End of Parikh automata intersection problem
