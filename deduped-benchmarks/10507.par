// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R14, R1684, R1685, R1686, R1687, R1688, R1689, R1690, R1691, R1692, R1693, R1694, R1695, R1696, R1697, R1698, R1699, R17, R1700, R1701, R1702, R1703, R1704, R1705, R1706, R1707, R1708, R1709, R1710, R1711, R1712, R1713, R1714, R1715, R1716, R1717, R1718, R1719, R1720, R1721, R1722, R1723, R1724, R1725, R1726, R1727, R1728, R1729, R1730, R1731, R1732, R1733, R1734, R1735, R1736, R1737, R1738, R1739, R1740, R1741, R1742, R1743, R1744, R1745, R1746, R1747, R1748, R1749, R1750, R1751, R1752, R1753, R1754, R1755, R1756, R1757, R1758, R1759, R1760, R1761, R1762, R1763, R1764, R1765, R1766, R1767, R1768, R1769, R1770, R1771, R1772, R1773, R1774, R1775, R1776, R1777, R1778, R1779, R1780, R1781, R1782, R1783, R1784, R1785, R1786, R1787, R1788, R1789, R1790, R1791, R1792, R1793, R1794, R1795, R1796, R1797, R1798, R1799, R1800, R1801, R1802, R1803, R1804, R1805, R1806, R1807, R1808, R1809, R1810, R1811, R1812, R1813, R1814, R1815, R1816, R1817, R1818, R1819, R1820, R1821, R1822, R1823, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R31, R32, R33, R34, R35, R36, R37, R4, R42, R44, R46, R47, R5, R50, R51, R52, R56, R57, R6, R7;
synchronised {  // Automata constraining P9
automaton P9_0 {
  init s0;
  s0 -> s1 [98, 98];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R17 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s0 [0, 65535] { R30 += 1, R31 += 1 };
  s0 -> s1 [13, 13] { R31 += 1 };
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value2_4 {
  init s0;
  s0 -> s0 [0, 65535] { R32 += 1, R33 += 1 };
  s0 -> s1 [0, 65535] { R33 += 1, R6 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R33 += 1, R6 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 8] { R35 += 1 };
  s0 -> s0 [0, 65535] { R34 += 1, R35 += 1 };
  s0 -> s2 [9, 13] { R35 += 1 };
  s0 -> s1 [14, 31] { R35 += 1 };
  s0 -> s2 [32, 32] { R35 += 1 };
  s0 -> s1 [33, 65535] { R35 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R35 += 1 };
  s2 -> s1 [0, 65535] { R35 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 65535] { R37 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R36 += 1, R37 += 1 };
  s1 -> s1 [0, 65535] { R37 += 1, R7 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 64] { R1767 += 1 };
  s0 -> s0 [0, 65535] { R1766 += 1, R1767 += 1 };
  s0 -> s2 [66, 66] { R1767 += 1 };
  s0 -> s1 [67, 65535] { R1767 += 1 };
  s1 -> s1 [0, 64] { R1767 += 1 };
  s1 -> s2 [66, 66] { R1767 += 1 };
  s1 -> s1 [67, 65535] { R1767 += 1 };
  s2 -> s2 [0, 64] { R1767 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [66, 65535] { R1767 += 1 };
  accepting s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R1768 += 1, R1769 += 1 };
  s0 -> s1 [0, 65535] { R1769 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R1769 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 65] { R1771 += 1 };
  s0 -> s2 [0, 65535] { R1771 += 1, R14 += 1 };
  s0 -> s0 [0, 65535] { R1770 += 1, R1771 += 1 };
  s0 -> s3 [66, 66] { R1771 += 1 };
  s0 -> s1 [67, 65535] { R1771 += 1 };
  s1 -> s1 [0, 65] { R1771 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [66, 66] { R1771 += 1 };
  s1 -> s1 [67, 65535] { R1771 += 1 };
  s2 -> s1 [0, 65] { R1771 += 1 };
  s2 -> s2 [0, 65535] { R1771 += 1, R14 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [66, 66] { R1771 += 1 };
  s2 -> s1 [67, 65535] { R1771 += 1 };
  s3 -> s3 [0, 65535] { R1771 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 8] { R1773 += 1, R23 += 1 };
  s0 -> s0 [0, 65535] { R1772 += 1, R1773 += 1 };
  s0 -> s2 [0, 65535] { R1773 += 1, R22 += 1, R23 += 1 };
  s0 -> s3 [9, 13] { R1773 += 1, R23 += 1 };
  s0 -> s1 [14, 31] { R1773 += 1, R23 += 1 };
  s0 -> s3 [32, 32] { R1773 += 1, R23 += 1 };
  s0 -> s1 [33, 65535] { R1773 += 1, R23 += 1 };
  s1 -> s1 [0, 65535] { R1773 += 1, R23 += 1 };
  s1 -> s5 [0, 65535] { R1773 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R1773 += 1, R23 += 1 };
  s2 -> s2 [0, 65535] { R1773 += 1, R22 += 1, R23 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R1773 += 1, R23 += 1 };
  s2 -> s1 [14, 31] { R1773 += 1, R23 += 1 };
  s2 -> s3 [32, 32] { R1773 += 1, R23 += 1 };
  s2 -> s1 [33, 65535] { R1773 += 1, R23 += 1 };
  s3 -> s1 [0, 65535] { R1773 += 1, R23 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1773 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 65535] { R1775 += 1, R24 += 1, R25 += 1 };
  s0 -> s0 [0, 65535] { R1774 += 1, R1775 += 1 };
  s0 -> s2 [0, 65535] { R1775 += 1, R25 += 1, R4 += 1 };
  s1 -> s1 [0, 65535] { R1775 += 1, R24 += 1, R25 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R1775 += 1, R25 += 1, R4 += 1 };
  s2 -> s3 [0, 65535] { R1775 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1775 += 1, R25 += 1, R4 += 1 };
  s3 -> s3 [0, 65535] { R1775 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 8] { R1777 += 1, R27 += 1 };
  s0 -> s2 [0, 65535] { R1777 += 1, R26 += 1, R27 += 1 };
  s0 -> s0 [0, 65535] { R1776 += 1, R1777 += 1 };
  s0 -> s3 [9, 13] { R1777 += 1, R27 += 1 };
  s0 -> s1 [14, 31] { R1777 += 1, R27 += 1 };
  s0 -> s3 [32, 32] { R1777 += 1, R27 += 1 };
  s0 -> s1 [33, 65535] { R1777 += 1, R27 += 1 };
  s1 -> s5 [0, 65535] { R1777 += 1 };
  s1 -> s1 [0, 65535] { R1777 += 1, R27 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R1777 += 1, R27 += 1 };
  s2 -> s2 [0, 65535] { R1777 += 1, R26 += 1, R27 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R1777 += 1, R27 += 1 };
  s2 -> s1 [14, 31] { R1777 += 1, R27 += 1 };
  s2 -> s3 [32, 32] { R1777 += 1, R27 += 1 };
  s2 -> s1 [33, 65535] { R1777 += 1, R27 += 1 };
  s3 -> s1 [0, 65535] { R1777 += 1, R27 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1777 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 65535] { R1779 += 1, R28 += 1, R29 += 1 };
  s0 -> s0 [0, 65535] { R1778 += 1, R1779 += 1 };
  s0 -> s2 [0, 65535] { R1779 += 1, R29 += 1, R5 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R1779 += 1, R28 += 1, R29 += 1 };
  s1 -> s2 [0, 65535] { R1779 += 1, R29 += 1, R5 += 1 };
  s2 -> s3 [0, 65535] { R1779 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1779 += 1, R29 += 1, R5 += 1 };
  s3 -> s3 [0, 65535] { R1779 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s0 [0, 65535] { R1780 += 1, R1781 += 1 };
  s0 -> s1 [0, 65535] { R1781 += 1, R1710 += 1, R1711 += 1 };
  s0 -> s2 [0, 65535] { R1781 += 1, R1711 += 1, R21 += 1 };
  s1 -> s1 [0, 65535] { R1781 += 1, R1710 += 1, R1711 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R1781 += 1, R1711 += 1, R21 += 1 };
  s2 -> s2 [0, 65535] { R1781 += 1, R1711 += 1, R21 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R1781 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1781 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 65] { R1783 += 1, R1713 += 1 };
  s0 -> s0 [0, 65535] { R1782 += 1, R1783 += 1 };
  s0 -> s2 [0, 65535] { R1783 += 1, R1712 += 1, R1713 += 1 };
  s0 -> s3 [66, 66] { R1783 += 1, R1713 += 1 };
  s0 -> s4 [66, 66] { R1783 += 1, R1713 += 1 };
  s0 -> s1 [71, 65535] { R1783 += 1, R1713 += 1 };
  s1 -> s1 [0, 65] { R1783 += 1, R1713 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1783 += 1 };
  s1 -> s3 [66, 66] { R1783 += 1, R1713 += 1 };
  s1 -> s4 [66, 66] { R1783 += 1, R1713 += 1 };
  s1 -> s1 [71, 65535] { R1783 += 1, R1713 += 1 };
  s2 -> s1 [0, 65] { R1783 += 1, R1713 += 1 };
  s2 -> s2 [0, 65535] { R1783 += 1, R1712 += 1, R1713 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [66, 66] { R1783 += 1, R1713 += 1 };
  s2 -> s4 [66, 66] { R1783 += 1, R1713 += 1 };
  s2 -> s1 [71, 65535] { R1783 += 1, R1713 += 1 };
  s3 -> s3 [0, 65535] { R1783 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 66] { R1783 += 1, R1713 += 1 };
  s4 -> s4 [0, 65535] { R1783 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [71, 65535] { R1783 += 1, R1713 += 1 };
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 65] { R1785 += 1, R1715 += 1, R42 += 1 };
  s0 -> s2 [0, 65535] { R1785 += 1, R1714 += 1, R1715 += 1 };
  s0 -> s0 [0, 65535] { R1784 += 1, R1785 += 1 };
  s0 -> s3 [66, 66] { R1785 += 1, R1715 += 1, R42 += 1 };
  s0 -> s4 [66, 66] { R1785 += 1, R1715 += 1, R42 += 1 };
  s0 -> s1 [67, 65535] { R1785 += 1, R1715 += 1, R42 += 1 };
  s1 -> s1 [0, 65] { R1785 += 1, R1715 += 1, R42 += 1 };
  s1 -> s1 [0, 65535] { R1785 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [66, 66] { R1785 += 1, R1715 += 1, R42 += 1 };
  s1 -> s4 [66, 66] { R1785 += 1, R1715 += 1, R42 += 1 };
  s1 -> s1 [67, 65535] { R1785 += 1, R1715 += 1, R42 += 1 };
  s2 -> s1 [0, 65] { R1785 += 1, R1715 += 1, R42 += 1 };
  s2 -> s2 [0, 65535] { R1785 += 1, R1714 += 1, R1715 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [66, 66] { R1785 += 1, R1715 += 1, R42 += 1 };
  s2 -> s4 [66, 66] { R1785 += 1, R1715 += 1, R42 += 1 };
  s2 -> s1 [67, 65535] { R1785 += 1, R1715 += 1, R42 += 1 };
  s3 -> s3 [0, 65535] { R1785 += 1, R1715 += 1, R42 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R1785 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1785 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1785 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 65] { R1787 += 1, R1717 += 1, R44 += 1 };
  s0 -> s2 [0, 65535] { R1787 += 1, R1716 += 1, R1717 += 1 };
  s0 -> s0 [0, 65535] { R1786 += 1, R1787 += 1 };
  s0 -> s3 [66, 66] { R1787 += 1, R1717 += 1, R44 += 1 };
  s0 -> s4 [66, 66] { R1787 += 1, R1717 += 1, R44 += 1 };
  s0 -> s1 [67, 65535] { R1787 += 1, R1717 += 1, R44 += 1 };
  s1 -> s1 [0, 65] { R1787 += 1, R1717 += 1, R44 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1787 += 1 };
  s1 -> s3 [66, 66] { R1787 += 1, R1717 += 1, R44 += 1 };
  s1 -> s4 [66, 66] { R1787 += 1, R1717 += 1, R44 += 1 };
  s1 -> s1 [67, 65535] { R1787 += 1, R1717 += 1, R44 += 1 };
  s2 -> s1 [0, 65] { R1787 += 1, R1717 += 1, R44 += 1 };
  s2 -> s2 [0, 65535] { R1787 += 1, R1716 += 1, R1717 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [66, 66] { R1787 += 1, R1717 += 1, R44 += 1 };
  s2 -> s4 [66, 66] { R1787 += 1, R1717 += 1, R44 += 1 };
  s2 -> s1 [67, 65535] { R1787 += 1, R1717 += 1, R44 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R1787 += 1, R1717 += 1, R44 += 1 };
  s3 -> s6 [0, 65535] { R1787 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1787 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1787 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65] { R1789 += 1, R1719 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R1788 += 1, R1789 += 1 };
  s0 -> s2 [0, 65535] { R1789 += 1, R1718 += 1, R1719 += 1 };
  s0 -> s3 [66, 66] { R1789 += 1, R1719 += 1, R46 += 1, R47 += 1 };
  s0 -> s4 [66, 66] { R1789 += 1, R1719 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [67, 65535] { R1789 += 1, R1719 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65] { R1789 += 1, R1719 += 1, R46 += 1, R47 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1789 += 1 };
  s1 -> s3 [66, 66] { R1789 += 1, R1719 += 1, R46 += 1, R47 += 1 };
  s1 -> s4 [66, 66] { R1789 += 1, R1719 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [67, 65535] { R1789 += 1, R1719 += 1, R46 += 1, R47 += 1 };
  s2 -> s1 [0, 65] { R1789 += 1, R1719 += 1, R46 += 1, R47 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1789 += 1, R1718 += 1, R1719 += 1 };
  s2 -> s3 [66, 66] { R1789 += 1, R1719 += 1, R46 += 1, R47 += 1 };
  s2 -> s4 [66, 66] { R1789 += 1, R1719 += 1, R46 += 1, R47 += 1 };
  s2 -> s1 [67, 65535] { R1789 += 1, R1719 += 1, R46 += 1, R47 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R1789 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1789 += 1, R1719 += 1, R46 += 1, R47 += 1 };
  s4 -> s6 [0, 65535] { R1789 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1789 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 65] { R1791 += 1, R1721 += 1, R50 += 1, R51 += 1 };
  s0 -> s2 [0, 65535] { R1791 += 1, R1720 += 1, R1721 += 1 };
  s0 -> s0 [0, 65535] { R1790 += 1, R1791 += 1 };
  s0 -> s3 [66, 66] { R1791 += 1, R1721 += 1, R50 += 1, R51 += 1 };
  s0 -> s4 [66, 66] { R1791 += 1, R1721 += 1, R50 += 1, R51 += 1 };
  s0 -> s1 [67, 65535] { R1791 += 1, R1721 += 1, R50 += 1, R51 += 1 };
  s1 -> s1 [0, 65] { R1791 += 1, R1721 += 1, R50 += 1, R51 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1791 += 1 };
  s1 -> s3 [66, 66] { R1791 += 1, R1721 += 1, R50 += 1, R51 += 1 };
  s1 -> s4 [66, 66] { R1791 += 1, R1721 += 1, R50 += 1, R51 += 1 };
  s1 -> s1 [67, 65535] { R1791 += 1, R1721 += 1, R50 += 1, R51 += 1 };
  s2 -> s1 [0, 65] { R1791 += 1, R1721 += 1, R50 += 1, R51 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1791 += 1, R1720 += 1, R1721 += 1 };
  s2 -> s3 [66, 66] { R1791 += 1, R1721 += 1, R50 += 1, R51 += 1 };
  s2 -> s4 [66, 66] { R1791 += 1, R1721 += 1, R50 += 1, R51 += 1 };
  s2 -> s1 [67, 65535] { R1791 += 1, R1721 += 1, R50 += 1, R51 += 1 };
  s3 -> s3 [0, 65535] { R1791 += 1, R1721 += 1, R50 += 1, R51 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R1791 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1791 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1791 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 65] { R1793 += 1, R1735 += 1 };
  s0 -> s2 [0, 65535] { R1793 += 1, R1734 += 1, R1735 += 1 };
  s0 -> s0 [0, 65535] { R1792 += 1, R1793 += 1 };
  s0 -> s3 [66, 66] { R1793 += 1, R1735 += 1 };
  s0 -> s1 [67, 65535] { R1793 += 1, R1735 += 1 };
  s1 -> s1 [0, 65] { R1793 += 1, R1735 += 1 };
  s1 -> s3 [66, 66] { R1793 += 1, R1735 += 1 };
  s1 -> s1 [67, 65535] { R1793 += 1, R1735 += 1 };
  s2 -> s1 [0, 65] { R1793 += 1, R1735 += 1 };
  s2 -> s2 [0, 65535] { R1793 += 1, R1734 += 1, R1735 += 1 };
  s2 -> s3 [66, 66] { R1793 += 1, R1735 += 1 };
  s2 -> s1 [67, 65535] { R1793 += 1, R1735 += 1 };
  s3 -> s3 [0, 65535] { R1793 += 1, R1735 += 1 };
  s3 -> s4 [0, 65535] { R1793 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1793 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R1795 += 1, R1736 += 1, R1737 += 1 };
  s0 -> s2 [0, 65535] { R1795 += 1, R1737 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R1794 += 1, R1795 += 1 };
  s1 -> s1 [0, 65535] { R1795 += 1, R1736 += 1, R1737 += 1 };
  s1 -> s2 [0, 65535] { R1795 += 1, R1737 += 1, R1 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R1795 += 1 };
  s2 -> s2 [0, 65535] { R1795 += 1, R1737 += 1, R1 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1795 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 65] { R1797 += 1, R1739 += 1 };
  s0 -> s2 [0, 65535] { R1797 += 1, R1738 += 1, R1739 += 1 };
  s0 -> s3 [0, 65535] { R1797 += 1, R1739 += 1, R11 += 1 };
  s0 -> s0 [0, 65535] { R1796 += 1, R1797 += 1 };
  s0 -> s4 [66, 66] { R1797 += 1, R1739 += 1 };
  s0 -> s1 [67, 65535] { R1797 += 1, R1739 += 1 };
  s1 -> s1 [0, 65] { R1797 += 1, R1739 += 1 };
  s1 -> s1 [0, 65535] { R1797 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s4 [66, 66] { R1797 += 1, R1739 += 1 };
  s1 -> s1 [67, 65535] { R1797 += 1, R1739 += 1 };
  s2 -> s1 [0, 65] { R1797 += 1, R1739 += 1 };
  s2 -> s2 [0, 65535] { R1797 += 1, R1738 += 1, R1739 += 1 };
  s2 -> s3 [0, 65535] { R1797 += 1, R1739 += 1, R11 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s4 [66, 66] { R1797 += 1, R1739 += 1 };
  s2 -> s1 [67, 65535] { R1797 += 1, R1739 += 1 };
  s3 -> s1 [0, 65] { R1797 += 1, R1739 += 1 };
  s3 -> s5 [0, 65535] { R1797 += 1 };
  s3 -> s3 [0, 65535] { R1797 += 1, R1739 += 1, R11 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s4 [66, 66] { R1797 += 1, R1739 += 1 };
  s3 -> s1 [67, 65535] { R1797 += 1, R1739 += 1 };
  s4 -> s4 [0, 65535] { R1797 += 1, R1739 += 1 };
  s5 -> s5 [0, 65535] { R1797 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65] { R1799 += 1, R1741 += 1, R1697 += 1 };
  s0 -> s2 [0, 65535] { R1799 += 1, R1741 += 1, R1696 += 1, R1697 += 1 };
  s0 -> s0 [0, 65535] { R1798 += 1, R1799 += 1 };
  s0 -> s3 [0, 65535] { R1799 += 1, R1740 += 1, R1741 += 1 };
  s0 -> s1 [67, 65535] { R1799 += 1, R1741 += 1, R1697 += 1 };
  s1 -> s1 [0, 65] { R1799 += 1, R1741 += 1, R1697 += 1 };
  s1 -> s5 [0, 65535] { R1799 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R1799 += 1, R1741 += 1 };
  s1 -> s1 [67, 65535] { R1799 += 1, R1741 += 1, R1697 += 1 };
  s2 -> s1 [0, 65] { R1799 += 1, R1741 += 1, R1697 += 1 };
  s2 -> s2 [0, 65535] { R1799 += 1, R1741 += 1, R1696 += 1, R1697 += 1 };
  s2 -> s5 [0, 65535] { R1799 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [67, 65535] { R1799 += 1, R1741 += 1, R1697 += 1 };
  s3 -> s1 [0, 65] { R1799 += 1, R1741 += 1, R1697 += 1 };
  s3 -> s2 [0, 65535] { R1799 += 1, R1741 += 1, R1696 += 1, R1697 += 1 };
  s3 -> s3 [0, 65535] { R1799 += 1, R1740 += 1, R1741 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [67, 65535] { R1799 += 1, R1741 += 1, R1697 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1799 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 65535] { R1801 += 1, R1743 += 1, R1698 += 1, R1699 += 1 };
  s0 -> s2 [0, 65535] { R1801 += 1, R1743 += 1, R1699 += 1, R19 += 1 };
  s0 -> s3 [0, 65535] { R1801 += 1, R1742 += 1, R1743 += 1 };
  s0 -> s0 [0, 65535] { R1800 += 1, R1801 += 1 };
  s1 -> s1 [0, 65535] { R1801 += 1, R1743 += 1, R1698 += 1, R1699 += 1 };
  s1 -> s2 [0, 65535] { R1801 += 1, R1743 += 1, R1699 += 1, R19 += 1 };
  s1 -> s6 [0, 65535] { R1801 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R1801 += 1, R1743 += 1 };
  s2 -> s2 [0, 65535] { R1801 += 1, R1743 += 1, R1699 += 1, R19 += 1 };
  s2 -> s6 [0, 65535] { R1801 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R1801 += 1, R1743 += 1, R1698 += 1, R1699 += 1 };
  s3 -> s2 [0, 65535] { R1801 += 1, R1743 += 1, R1699 += 1, R19 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1801 += 1, R1742 += 1, R1743 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1801 += 1, R1743 += 1 };
  s5 -> s6 [0, 65535] { R1801 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R1801 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 66] { R1803 += 1, R1745 += 1, R1701 += 1 };
  s0 -> s0 [0, 65535] { R1802 += 1, R1803 += 1 };
  s0 -> s2 [0, 65535] { R1803 += 1, R1745 += 1, R1700 += 1, R1701 += 1 };
  s0 -> s3 [0, 65535] { R1803 += 1, R1744 += 1, R1745 += 1 };
  s0 -> s1 [70, 65535] { R1803 += 1, R1745 += 1, R1701 += 1 };
  s1 -> s1 [0, 66] { R1803 += 1, R1745 += 1, R1701 += 1 };
  s1 -> s1 [0, 65535] { R1803 += 1, R1745 += 1 };
  s1 -> s5 [0, 65535] { R1803 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [70, 65535] { R1803 += 1, R1745 += 1, R1701 += 1 };
  s2 -> s1 [0, 66] { R1803 += 1, R1745 += 1, R1701 += 1 };
  s2 -> s5 [0, 65535] { R1803 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1803 += 1, R1745 += 1, R1700 += 1, R1701 += 1 };
  s2 -> s1 [70, 65535] { R1803 += 1, R1745 += 1, R1701 += 1 };
  s3 -> s1 [0, 66] { R1803 += 1, R1745 += 1, R1701 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R1803 += 1, R1745 += 1, R1700 += 1, R1701 += 1 };
  s3 -> s3 [0, 65535] { R1803 += 1, R1744 += 1, R1745 += 1 };
  s3 -> s1 [70, 65535] { R1803 += 1, R1745 += 1, R1701 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1803 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R1805 += 1, R1747 += 1, R1702 += 1, R1703 += 1 };
  s0 -> s2 [0, 65535] { R1805 += 1, R1746 += 1, R1747 += 1 };
  s0 -> s0 [0, 65535] { R1804 += 1, R1805 += 1 };
  s0 -> s3 [0, 65535] { R1805 += 1, R1747 += 1, R1703 += 1, R57 += 1 };
  s1 -> s1 [0, 65535] { R1805 += 1, R1747 += 1, R1702 += 1, R1703 += 1 };
  s1 -> s3 [0, 65535] { R1805 += 1, R1747 += 1, R1703 += 1, R57 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R1805 += 1 };
  s2 -> s1 [0, 65535] { R1805 += 1, R1747 += 1, R1702 += 1, R1703 += 1 };
  s2 -> s2 [0, 65535] { R1805 += 1, R1746 += 1, R1747 += 1 };
  s2 -> s3 [0, 65535] { R1805 += 1, R1747 += 1, R1703 += 1, R57 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1805 += 1, R1747 += 1, R1703 += 1, R57 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R1805 += 1, R1747 += 1 };
  s3 -> s6 [0, 65535] { R1805 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1805 += 1, R1747 += 1 };
  s5 -> s6 [0, 65535] { R1805 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R1805 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 69] { R1807 += 1, R1749 += 1, R1705 += 1 };
  s0 -> s2 [0, 65535] { R1807 += 1, R1748 += 1, R1749 += 1 };
  s0 -> s3 [0, 65535] { R1807 += 1, R1749 += 1, R1704 += 1, R1705 += 1 };
  s0 -> s0 [0, 65535] { R1806 += 1, R1807 += 1 };
  s0 -> s1 [71, 65535] { R1807 += 1, R1749 += 1, R1705 += 1 };
  s1 -> s1 [0, 69] { R1807 += 1, R1749 += 1, R1705 += 1 };
  s1 -> s1 [0, 65535] { R1807 += 1, R1749 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R1807 += 1 };
  s1 -> s1 [71, 65535] { R1807 += 1, R1749 += 1, R1705 += 1 };
  s2 -> s1 [0, 69] { R1807 += 1, R1749 += 1, R1705 += 1 };
  s2 -> s2 [0, 65535] { R1807 += 1, R1748 += 1, R1749 += 1 };
  s2 -> s3 [0, 65535] { R1807 += 1, R1749 += 1, R1704 += 1, R1705 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [71, 65535] { R1807 += 1, R1749 += 1, R1705 += 1 };
  s3 -> s1 [0, 69] { R1807 += 1, R1749 += 1, R1705 += 1 };
  s3 -> s3 [0, 65535] { R1807 += 1, R1749 += 1, R1704 += 1, R1705 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R1807 += 1 };
  s3 -> s1 [71, 65535] { R1807 += 1, R1749 += 1, R1705 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1807 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R1809 += 1, R1751 += 1, R1707 += 1, R1689 += 1 };
  s0 -> s2 [0, 65535] { R1809 += 1, R1751 += 1, R1707 += 1 };
  s0 -> s3 [0, 65535] { R1809 += 1, R1751 += 1, R1706 += 1, R1707 += 1 };
  s0 -> s4 [0, 65535] { R1809 += 1, R1750 += 1, R1751 += 1 };
  s0 -> s0 [0, 65535] { R1808 += 1, R1809 += 1 };
  s1 -> s1 [0, 65535] { R1809 += 1, R1751 += 1, R1707 += 1, R1689 += 1 };
  s1 -> s7 [0, 65535] { R1809 += 1, R1751 += 1 };
  s1 -> s2 [0, 65535] { R1809 += 1, R1751 += 1, R1707 += 1 };
  s1 -> s6 [0, 65535] { R1809 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s7 [0, 65535] { R1809 += 1, R1751 += 1 };
  s2 -> s2 [0, 65535] { R1809 += 1, R1751 += 1, R1707 += 1 };
  s2 -> s6 [0, 65535] { R1809 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s1 [0, 65535] { R1809 += 1, R1751 += 1, R1707 += 1, R1689 += 1 };
  s3 -> s2 [0, 65535] { R1809 += 1, R1751 += 1, R1707 += 1 };
  s3 -> s6 [0, 65535] { R1809 += 1 };
  s3 -> s3 [0, 65535] { R1809 += 1, R1751 += 1, R1706 += 1, R1707 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s1 [0, 65535] { R1809 += 1, R1751 += 1, R1707 += 1, R1689 += 1 };
  s4 -> s2 [0, 65535] { R1809 += 1, R1751 += 1, R1707 += 1 };
  s4 -> s3 [0, 65535] { R1809 += 1, R1751 += 1, R1706 += 1, R1707 += 1 };
  s4 -> s4 [0, 65535] { R1809 += 1, R1750 += 1, R1751 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1809 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R1809 += 1, R1751 += 1 };
  s7 -> s6 [0, 65535] { R1809 += 1 };
  s7 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 65535] { R1811 += 1, R1753 += 1, R1708 += 1, R1709 += 1 };
  s0 -> s2 [0, 65535] { R1811 += 1, R1753 += 1, R1709 += 1, R1693 += 1, R1694 += 1 };
  s0 -> s3 [0, 65535] { R1811 += 1, R1752 += 1, R1753 += 1 };
  s0 -> s4 [0, 65535] { R1811 += 1, R1753 += 1, R1709 += 1, R1694 += 1, R1695 += 1 };
  s0 -> s0 [0, 65535] { R1810 += 1, R1811 += 1 };
  s1 -> s1 [0, 65535] { R1811 += 1, R1753 += 1, R1708 += 1, R1709 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s2 [0, 65535] { R1811 += 1, R1753 += 1, R1709 += 1, R1693 += 1, R1694 += 1 };
  s1 -> s7 [0, 65535] { R1811 += 1 };
  s1 -> s4 [0, 65535] { R1811 += 1, R1753 += 1, R1709 += 1, R1694 += 1, R1695 += 1 };
  s2 -> s5 [0, 65535] { R1811 += 1, R1753 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R1811 += 1, R1753 += 1, R1709 += 1, R1693 += 1, R1694 += 1 };
  s2 -> s7 [0, 65535] { R1811 += 1 };
  s2 -> s4 [0, 65535] { R1811 += 1, R1753 += 1, R1709 += 1, R1694 += 1, R1695 += 1 };
  s3 -> s1 [0, 65535] { R1811 += 1, R1753 += 1, R1708 += 1, R1709 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s2 [0, 65535] { R1811 += 1, R1753 += 1, R1709 += 1, R1693 += 1, R1694 += 1 };
  s3 -> s3 [0, 65535] { R1811 += 1, R1752 += 1, R1753 += 1 };
  s3 -> s4 [0, 65535] { R1811 += 1, R1753 += 1, R1709 += 1, R1694 += 1, R1695 += 1 };
  s4 -> s5 [0, 65535] { R1811 += 1, R1753 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R1811 += 1 };
  s4 -> s4 [0, 65535] { R1811 += 1, R1753 += 1, R1709 += 1, R1694 += 1, R1695 += 1 };
  s4 -> s8 [0, 65535] { R1811 += 1, R1753 += 1, R1709 += 1 };
  s5 -> s5 [0, 65535] { R1811 += 1, R1753 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R1811 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R1811 += 1 };
  s8 -> s5 [0, 65535] { R1811 += 1, R1753 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R1811 += 1 };
  s8 -> s8 [0, 65535] { R1811 += 1, R1753 += 1, R1709 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R1813 += 1, R1754 += 1, R1755 += 1 };
  s0 -> s2 [0, 65535] { R1813 += 1, R1755 += 1, R1722 += 1, R1723 += 1 };
  s0 -> s0 [0, 65535] { R1812 += 1, R1813 += 1 };
  s0 -> s3 [0, 65535] { R1813 += 1, R1755 += 1, R1723 += 1, R20 += 1 };
  s1 -> s1 [0, 65535] { R1813 += 1, R1754 += 1, R1755 += 1 };
  s1 -> s2 [0, 65535] { R1813 += 1, R1755 += 1, R1722 += 1, R1723 += 1 };
  s1 -> s3 [0, 65535] { R1813 += 1, R1755 += 1, R1723 += 1, R20 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R1813 += 1, R1755 += 1, R1722 += 1, R1723 += 1 };
  s2 -> s4 [0, 65535] { R1813 += 1 };
  s2 -> s3 [0, 65535] { R1813 += 1, R1755 += 1, R1723 += 1, R20 += 1 };
  s2 -> s6 [0, 65535];
  s3 -> s4 [0, 65535] { R1813 += 1 };
  s3 -> s3 [0, 65535] { R1813 += 1, R1755 += 1, R1723 += 1, R20 += 1 };
  s3 -> s5 [0, 65535] { R1813 += 1, R1755 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R1813 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s4 [0, 65535] { R1813 += 1 };
  s5 -> s5 [0, 65535] { R1813 += 1, R1755 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 65] { R1815 += 1, R1757 += 1, R1725 += 1 };
  s0 -> s2 [0, 65535] { R1815 += 1, R1757 += 1, R1724 += 1, R1725 += 1 };
  s0 -> s0 [0, 65535] { R1814 += 1, R1815 += 1 };
  s0 -> s3 [0, 65535] { R1815 += 1, R1756 += 1, R1757 += 1 };
  s0 -> s4 [66, 66] { R1815 += 1, R1757 += 1, R1725 += 1 };
  s0 -> s5 [66, 66] { R1815 += 1, R1757 += 1, R1725 += 1 };
  s0 -> s6 [70, 70] { R1815 += 1, R1757 += 1, R1725 += 1 };
  s0 -> s1 [71, 65535] { R1815 += 1, R1757 += 1, R1725 += 1 };
  s1 -> s1 [0, 65] { R1815 += 1, R1757 += 1, R1725 += 1 };
  s1 -> s4 [66, 66] { R1815 += 1, R1757 += 1, R1725 += 1 };
  s1 -> s5 [66, 66] { R1815 += 1, R1757 += 1, R1725 += 1 };
  s1 -> s6 [70, 70] { R1815 += 1, R1757 += 1, R1725 += 1 };
  s1 -> s1 [71, 65535] { R1815 += 1, R1757 += 1, R1725 += 1 };
  s2 -> s1 [0, 65] { R1815 += 1, R1757 += 1, R1725 += 1 };
  s2 -> s2 [0, 65535] { R1815 += 1, R1757 += 1, R1724 += 1, R1725 += 1 };
  s2 -> s4 [66, 66] { R1815 += 1, R1757 += 1, R1725 += 1 };
  s2 -> s5 [66, 66] { R1815 += 1, R1757 += 1, R1725 += 1 };
  s2 -> s6 [70, 70] { R1815 += 1, R1757 += 1, R1725 += 1 };
  s2 -> s1 [71, 65535] { R1815 += 1, R1757 += 1, R1725 += 1 };
  s3 -> s1 [0, 65] { R1815 += 1, R1757 += 1, R1725 += 1 };
  s3 -> s2 [0, 65535] { R1815 += 1, R1757 += 1, R1724 += 1, R1725 += 1 };
  s3 -> s3 [0, 65535] { R1815 += 1, R1756 += 1, R1757 += 1 };
  s3 -> s4 [66, 66] { R1815 += 1, R1757 += 1, R1725 += 1 };
  s3 -> s5 [66, 66] { R1815 += 1, R1757 += 1, R1725 += 1 };
  s3 -> s6 [70, 70] { R1815 += 1, R1757 += 1, R1725 += 1 };
  s3 -> s1 [71, 65535] { R1815 += 1, R1757 += 1, R1725 += 1 };
  s4 -> s4 [0, 66] { R1815 += 1, R1757 += 1, R1725 += 1 };
  s4 -> s10 [70, 70] { R1815 += 1, R1757 += 1, R1725 += 1 };
  s4 -> s4 [71, 65535] { R1815 += 1, R1757 += 1, R1725 += 1 };
  s6 -> s6 [0, 65] { R1815 += 1, R1757 += 1, R1725 += 1 };
  s6 -> s6 [0, 65535] { R1815 += 1, R1757 += 1 };
  s6 -> s7 [0, 65535];
  s6 -> s8 [0, 65535] { R1815 += 1 };
  s6 -> s9 [66, 66] { R1815 += 1, R1757 += 1, R1725 += 1 };
  s6 -> s10 [66, 66] { R1815 += 1, R1757 += 1, R1725 += 1 };
  s6 -> s6 [70, 65535] { R1815 += 1, R1757 += 1, R1725 += 1 };
  s7 -> s7 [0, 65535];
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R1815 += 1 };
  s9 -> s9 [0, 65535] { R1815 += 1, R1757 += 1 };
  s9 -> s7 [0, 65535];
  s9 -> s8 [0, 65535] { R1815 += 1 };
  s10 -> s10 [0, 66] { R1815 += 1, R1757 += 1, R1725 += 1 };
  s10 -> s7 [0, 65535];
  s10 -> s8 [0, 65535] { R1815 += 1 };
  s10 -> s10 [0, 65535] { R1815 += 1, R1757 += 1 };
  s10 -> s10 [70, 65535] { R1815 += 1, R1757 += 1, R1725 += 1 };
  accepting s8, s9, s6, s7, s10;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 65] { R1817 += 1, R1759 += 1, R1727 += 1, R56 += 1 };
  s0 -> s2 [0, 65535] { R1817 += 1, R1758 += 1, R1759 += 1 };
  s0 -> s3 [0, 65535] { R1817 += 1, R1759 += 1, R1726 += 1, R1727 += 1 };
  s0 -> s0 [0, 65535] { R1816 += 1, R1817 += 1 };
  s0 -> s4 [66, 66] { R1817 += 1, R1759 += 1, R1727 += 1, R56 += 1 };
  s0 -> s5 [66, 66] { R1817 += 1, R1759 += 1, R1727 += 1, R56 += 1 };
  s0 -> s1 [67, 65535] { R1817 += 1, R1759 += 1, R1727 += 1, R56 += 1 };
  s1 -> s1 [0, 65] { R1817 += 1, R1759 += 1, R1727 += 1, R56 += 1 };
  s1 -> s6 [0, 65535] { R1817 += 1 };
  s1 -> s1 [0, 65535] { R1817 += 1, R1759 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s4 [66, 66] { R1817 += 1, R1759 += 1, R1727 += 1, R56 += 1 };
  s1 -> s5 [66, 66] { R1817 += 1, R1759 += 1, R1727 += 1, R56 += 1 };
  s1 -> s1 [67, 65535] { R1817 += 1, R1759 += 1, R1727 += 1, R56 += 1 };
  s2 -> s1 [0, 65] { R1817 += 1, R1759 += 1, R1727 += 1, R56 += 1 };
  s2 -> s2 [0, 65535] { R1817 += 1, R1758 += 1, R1759 += 1 };
  s2 -> s3 [0, 65535] { R1817 += 1, R1759 += 1, R1726 += 1, R1727 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s4 [66, 66] { R1817 += 1, R1759 += 1, R1727 += 1, R56 += 1 };
  s2 -> s5 [66, 66] { R1817 += 1, R1759 += 1, R1727 += 1, R56 += 1 };
  s2 -> s1 [67, 65535] { R1817 += 1, R1759 += 1, R1727 += 1, R56 += 1 };
  s3 -> s1 [0, 65] { R1817 += 1, R1759 += 1, R1727 += 1, R56 += 1 };
  s3 -> s6 [0, 65535] { R1817 += 1 };
  s3 -> s3 [0, 65535] { R1817 += 1, R1759 += 1, R1726 += 1, R1727 += 1 };
  s3 -> s8 [0, 65535];
  s3 -> s4 [66, 66] { R1817 += 1, R1759 += 1, R1727 += 1, R56 += 1 };
  s3 -> s5 [66, 66] { R1817 += 1, R1759 += 1, R1727 += 1, R56 += 1 };
  s3 -> s1 [67, 65535] { R1817 += 1, R1759 += 1, R1727 += 1, R56 += 1 };
  s4 -> s4 [0, 65535] { R1817 += 1, R1759 += 1 };
  s4 -> s6 [0, 65535] { R1817 += 1 };
  s4 -> s8 [0, 65535];
  s5 -> s5 [0, 65535] { R1817 += 1, R1759 += 1, R1727 += 1, R56 += 1 };
  s5 -> s6 [0, 65535] { R1817 += 1 };
  s5 -> s7 [0, 65535] { R1817 += 1, R1759 += 1 };
  s5 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R1817 += 1 };
  s6 -> s8 [0, 65535];
  s7 -> s6 [0, 65535] { R1817 += 1 };
  s7 -> s7 [0, 65535] { R1817 += 1, R1759 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 65] { R1819 += 1, R1761 += 1, R1729 += 1, R1684 += 1 };
  s0 -> s2 [0, 65] { R1819 += 1, R1761 += 1, R1729 += 1 };
  s0 -> s0 [0, 65535] { R1818 += 1, R1819 += 1 };
  s0 -> s3 [0, 65535] { R1819 += 1, R1760 += 1, R1761 += 1 };
  s0 -> s4 [0, 65535] { R1819 += 1, R1761 += 1, R1728 += 1, R1729 += 1 };
  s0 -> s5 [66, 66] { R1819 += 1, R1761 += 1, R1729 += 1, R1684 += 1 };
  s0 -> s6 [66, 66] { R1819 += 1, R1761 += 1, R1729 += 1 };
  s0 -> s7 [66, 66] { R1819 += 1, R1761 += 1, R1729 += 1 };
  s0 -> s8 [66, 66] { R1819 += 1, R1761 += 1, R1729 += 1, R1684 += 1 };
  s0 -> s2 [67, 69] { R1819 += 1, R1761 += 1, R1729 += 1 };
  s0 -> s1 [67, 65535] { R1819 += 1, R1761 += 1, R1729 += 1, R1684 += 1 };
  s0 -> s2 [71, 65535] { R1819 += 1, R1761 += 1, R1729 += 1 };
  s1 -> s1 [0, 65] { R1819 += 1, R1761 += 1, R1729 += 1, R1684 += 1 };
  s1 -> s2 [0, 65] { R1819 += 1, R1761 += 1, R1729 += 1 };
  s1 -> s5 [66, 66] { R1819 += 1, R1761 += 1, R1729 += 1, R1684 += 1 };
  s1 -> s6 [66, 66] { R1819 += 1, R1761 += 1, R1729 += 1 };
  s1 -> s7 [66, 66] { R1819 += 1, R1761 += 1, R1729 += 1 };
  s1 -> s8 [66, 66] { R1819 += 1, R1761 += 1, R1729 += 1, R1684 += 1 };
  s1 -> s2 [67, 69] { R1819 += 1, R1761 += 1, R1729 += 1 };
  s1 -> s1 [67, 65535] { R1819 += 1, R1761 += 1, R1729 += 1, R1684 += 1 };
  s1 -> s2 [71, 65535] { R1819 += 1, R1761 += 1, R1729 += 1 };
  s2 -> s2 [0, 65] { R1819 += 1, R1761 += 1, R1729 += 1 };
  s2 -> s2 [0, 65535] { R1819 += 1, R1761 += 1 };
  s2 -> s9 [0, 65535] { R1819 += 1 };
  s2 -> s10 [0, 65535];
  s2 -> s6 [66, 66] { R1819 += 1, R1761 += 1, R1729 += 1 };
  s2 -> s7 [66, 66] { R1819 += 1, R1761 += 1, R1729 += 1 };
  s2 -> s2 [67, 69] { R1819 += 1, R1761 += 1, R1729 += 1 };
  s2 -> s2 [71, 65535] { R1819 += 1, R1761 += 1, R1729 += 1 };
  s3 -> s1 [0, 65] { R1819 += 1, R1761 += 1, R1729 += 1, R1684 += 1 };
  s3 -> s2 [0, 65] { R1819 += 1, R1761 += 1, R1729 += 1 };
  s3 -> s3 [0, 65535] { R1819 += 1, R1760 += 1, R1761 += 1 };
  s3 -> s4 [0, 65535] { R1819 += 1, R1761 += 1, R1728 += 1, R1729 += 1 };
  s3 -> s5 [66, 66] { R1819 += 1, R1761 += 1, R1729 += 1, R1684 += 1 };
  s3 -> s6 [66, 66] { R1819 += 1, R1761 += 1, R1729 += 1 };
  s3 -> s7 [66, 66] { R1819 += 1, R1761 += 1, R1729 += 1 };
  s3 -> s8 [66, 66] { R1819 += 1, R1761 += 1, R1729 += 1, R1684 += 1 };
  s3 -> s2 [67, 69] { R1819 += 1, R1761 += 1, R1729 += 1 };
  s3 -> s1 [67, 65535] { R1819 += 1, R1761 += 1, R1729 += 1, R1684 += 1 };
  s3 -> s2 [71, 65535] { R1819 += 1, R1761 += 1, R1729 += 1 };
  s4 -> s1 [0, 65] { R1819 += 1, R1761 += 1, R1729 += 1, R1684 += 1 };
  s4 -> s2 [0, 65] { R1819 += 1, R1761 += 1, R1729 += 1 };
  s4 -> s4 [0, 65535] { R1819 += 1, R1761 += 1, R1728 += 1, R1729 += 1 };
  s4 -> s5 [66, 66] { R1819 += 1, R1761 += 1, R1729 += 1, R1684 += 1 };
  s4 -> s6 [66, 66] { R1819 += 1, R1761 += 1, R1729 += 1 };
  s4 -> s7 [66, 66] { R1819 += 1, R1761 += 1, R1729 += 1 };
  s4 -> s8 [66, 66] { R1819 += 1, R1761 += 1, R1729 += 1, R1684 += 1 };
  s4 -> s2 [67, 69] { R1819 += 1, R1761 += 1, R1729 += 1 };
  s4 -> s1 [67, 65535] { R1819 += 1, R1761 += 1, R1729 += 1, R1684 += 1 };
  s4 -> s2 [71, 65535] { R1819 += 1, R1761 += 1, R1729 += 1 };
  s6 -> s6 [0, 65535] { R1819 += 1, R1761 += 1 };
  s6 -> s9 [0, 65535] { R1819 += 1 };
  s6 -> s10 [0, 65535];
  s7 -> s7 [0, 69] { R1819 += 1, R1761 += 1, R1729 += 1 };
  s7 -> s9 [0, 65535] { R1819 += 1 };
  s7 -> s7 [0, 65535] { R1819 += 1, R1761 += 1 };
  s7 -> s10 [0, 65535];
  s7 -> s7 [71, 65535] { R1819 += 1, R1761 += 1, R1729 += 1 };
  s8 -> s7 [0, 69] { R1819 += 1, R1761 += 1, R1729 += 1 };
  s8 -> s8 [0, 65535] { R1819 += 1, R1761 += 1, R1729 += 1, R1684 += 1 };
  s8 -> s7 [71, 65535] { R1819 += 1, R1761 += 1, R1729 += 1 };
  s9 -> s9 [0, 65535] { R1819 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  accepting s2, s9, s6, s7, s10;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 65] { R1821 += 1, R1763 += 1, R1731 += 1, R1687 += 1 };
  s0 -> s2 [0, 65] { R1821 += 1, R1763 += 1, R1731 += 1, R1686 += 1, R1687 += 1 };
  s0 -> s0 [0, 65535] { R1820 += 1, R1821 += 1 };
  s0 -> s3 [0, 65535] { R1821 += 1, R1762 += 1, R1763 += 1 };
  s0 -> s4 [0, 65535] { R1821 += 1, R1763 += 1, R1730 += 1, R1731 += 1 };
  s0 -> s5 [66, 66] { R1821 += 1, R1763 += 1, R1731 += 1, R1686 += 1, R1687 += 1 };
  s0 -> s6 [66, 66] { R1821 += 1, R1763 += 1, R1731 += 1, R1686 += 1, R1687 += 1 };
  s0 -> s7 [66, 66] { R1821 += 1, R1763 += 1, R1731 += 1, R1687 += 1 };
  s0 -> s8 [66, 66] { R1821 += 1, R1763 += 1, R1731 += 1, R1687 += 1 };
  s0 -> s1 [67, 69] { R1821 += 1, R1763 += 1, R1731 += 1, R1687 += 1 };
  s0 -> s2 [67, 65535] { R1821 += 1, R1763 += 1, R1731 += 1, R1686 += 1, R1687 += 1 };
  s0 -> s9 [70, 70] { R1821 += 1, R1763 += 1, R1731 += 1, R1687 += 1 };
  s0 -> s1 [71, 65535] { R1821 += 1, R1763 += 1, R1731 += 1, R1687 += 1 };
  s1 -> s1 [0, 65] { R1821 += 1, R1763 += 1, R1731 += 1, R1687 += 1 };
  s1 -> s7 [66, 66] { R1821 += 1, R1763 += 1, R1731 += 1, R1687 += 1 };
  s1 -> s8 [66, 66] { R1821 += 1, R1763 += 1, R1731 += 1, R1687 += 1 };
  s1 -> s1 [67, 69] { R1821 += 1, R1763 += 1, R1731 += 1, R1687 += 1 };
  s1 -> s9 [70, 70] { R1821 += 1, R1763 += 1, R1731 += 1, R1687 += 1 };
  s1 -> s1 [71, 65535] { R1821 += 1, R1763 += 1, R1731 += 1, R1687 += 1 };
  s2 -> s1 [0, 65] { R1821 += 1, R1763 += 1, R1731 += 1, R1687 += 1 };
  s2 -> s2 [0, 65] { R1821 += 1, R1763 += 1, R1731 += 1, R1686 += 1, R1687 += 1 };
  s2 -> s5 [66, 66] { R1821 += 1, R1763 += 1, R1731 += 1, R1686 += 1, R1687 += 1 };
  s2 -> s6 [66, 66] { R1821 += 1, R1763 += 1, R1731 += 1, R1686 += 1, R1687 += 1 };
  s2 -> s7 [66, 66] { R1821 += 1, R1763 += 1, R1731 += 1, R1687 += 1 };
  s2 -> s8 [66, 66] { R1821 += 1, R1763 += 1, R1731 += 1, R1687 += 1 };
  s2 -> s1 [67, 69] { R1821 += 1, R1763 += 1, R1731 += 1, R1687 += 1 };
  s2 -> s2 [67, 65535] { R1821 += 1, R1763 += 1, R1731 += 1, R1686 += 1, R1687 += 1 };
  s2 -> s9 [70, 70] { R1821 += 1, R1763 += 1, R1731 += 1, R1687 += 1 };
  s2 -> s1 [71, 65535] { R1821 += 1, R1763 += 1, R1731 += 1, R1687 += 1 };
  s3 -> s1 [0, 65] { R1821 += 1, R1763 += 1, R1731 += 1, R1687 += 1 };
  s3 -> s2 [0, 65] { R1821 += 1, R1763 += 1, R1731 += 1, R1686 += 1, R1687 += 1 };
  s3 -> s3 [0, 65535] { R1821 += 1, R1762 += 1, R1763 += 1 };
  s3 -> s4 [0, 65535] { R1821 += 1, R1763 += 1, R1730 += 1, R1731 += 1 };
  s3 -> s5 [66, 66] { R1821 += 1, R1763 += 1, R1731 += 1, R1686 += 1, R1687 += 1 };
  s3 -> s6 [66, 66] { R1821 += 1, R1763 += 1, R1731 += 1, R1686 += 1, R1687 += 1 };
  s3 -> s7 [66, 66] { R1821 += 1, R1763 += 1, R1731 += 1, R1687 += 1 };
  s3 -> s8 [66, 66] { R1821 += 1, R1763 += 1, R1731 += 1, R1687 += 1 };
  s3 -> s1 [67, 69] { R1821 += 1, R1763 += 1, R1731 += 1, R1687 += 1 };
  s3 -> s2 [67, 65535] { R1821 += 1, R1763 += 1, R1731 += 1, R1686 += 1, R1687 += 1 };
  s3 -> s9 [70, 70] { R1821 += 1, R1763 += 1, R1731 += 1, R1687 += 1 };
  s3 -> s1 [71, 65535] { R1821 += 1, R1763 += 1, R1731 += 1, R1687 += 1 };
  s4 -> s1 [0, 65] { R1821 += 1, R1763 += 1, R1731 += 1, R1687 += 1 };
  s4 -> s2 [0, 65] { R1821 += 1, R1763 += 1, R1731 += 1, R1686 += 1, R1687 += 1 };
  s4 -> s4 [0, 65535] { R1821 += 1, R1763 += 1, R1730 += 1, R1731 += 1 };
  s4 -> s5 [66, 66] { R1821 += 1, R1763 += 1, R1731 += 1, R1686 += 1, R1687 += 1 };
  s4 -> s6 [66, 66] { R1821 += 1, R1763 += 1, R1731 += 1, R1686 += 1, R1687 += 1 };
  s4 -> s7 [66, 66] { R1821 += 1, R1763 += 1, R1731 += 1, R1687 += 1 };
  s4 -> s8 [66, 66] { R1821 += 1, R1763 += 1, R1731 += 1, R1687 += 1 };
  s4 -> s1 [67, 69] { R1821 += 1, R1763 += 1, R1731 += 1, R1687 += 1 };
  s4 -> s2 [67, 65535] { R1821 += 1, R1763 += 1, R1731 += 1, R1686 += 1, R1687 += 1 };
  s4 -> s9 [70, 70] { R1821 += 1, R1763 += 1, R1731 += 1, R1687 += 1 };
  s4 -> s1 [71, 65535] { R1821 += 1, R1763 += 1, R1731 += 1, R1687 += 1 };
  s5 -> s7 [0, 69] { R1821 += 1, R1763 += 1, R1731 += 1, R1687 += 1 };
  s5 -> s5 [0, 65535] { R1821 += 1, R1763 += 1, R1731 += 1, R1686 += 1, R1687 += 1 };
  s5 -> s13 [70, 70] { R1821 += 1, R1763 += 1, R1731 += 1, R1687 += 1 };
  s5 -> s7 [71, 65535] { R1821 += 1, R1763 += 1, R1731 += 1, R1687 += 1 };
  s7 -> s7 [0, 69] { R1821 += 1, R1763 += 1, R1731 += 1, R1687 += 1 };
  s7 -> s13 [70, 70] { R1821 += 1, R1763 += 1, R1731 += 1, R1687 += 1 };
  s7 -> s7 [71, 65535] { R1821 += 1, R1763 += 1, R1731 += 1, R1687 += 1 };
  s9 -> s9 [0, 65] { R1821 += 1, R1763 += 1, R1731 += 1, R1687 += 1 };
  s9 -> s9 [0, 65535] { R1821 += 1, R1763 += 1 };
  s9 -> s10 [0, 65535];
  s9 -> s11 [0, 65535] { R1821 += 1 };
  s9 -> s12 [66, 66] { R1821 += 1, R1763 += 1, R1731 += 1, R1687 += 1 };
  s9 -> s13 [66, 66] { R1821 += 1, R1763 += 1, R1731 += 1, R1687 += 1 };
  s9 -> s9 [67, 65535] { R1821 += 1, R1763 += 1, R1731 += 1, R1687 += 1 };
  s10 -> s10 [0, 65535];
  s11 -> s10 [0, 65535];
  s11 -> s11 [0, 65535] { R1821 += 1 };
  s12 -> s12 [0, 65535] { R1821 += 1, R1763 += 1 };
  s12 -> s10 [0, 65535];
  s12 -> s11 [0, 65535] { R1821 += 1 };
  s13 -> s14 [0, 65535] { R1821 += 1, R1763 += 1 };
  s13 -> s10 [0, 65535];
  s13 -> s13 [0, 65535] { R1821 += 1, R1763 += 1, R1731 += 1, R1687 += 1 };
  s13 -> s11 [0, 65535] { R1821 += 1 };
  s14 -> s14 [0, 65535] { R1821 += 1, R1763 += 1 };
  s14 -> s10 [0, 65535];
  s14 -> s11 [0, 65535] { R1821 += 1 };
  accepting s12, s13, s9, s14, s10, s11;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 65] { R1823 += 1, R1765 += 1, R1733 += 1, R1690 += 1, R1691 += 1 };
  s0 -> s2 [0, 65535] { R1823 += 1, R1764 += 1, R1765 += 1 };
  s0 -> s0 [0, 65535] { R1822 += 1, R1823 += 1 };
  s0 -> s3 [0, 65535] { R1823 += 1, R1765 += 1, R1732 += 1, R1733 += 1 };
  s0 -> s4 [66, 66] { R1823 += 1, R1765 += 1, R1733 += 1, R1690 += 1, R1691 += 1 };
  s0 -> s5 [66, 66] { R1823 += 1, R1765 += 1, R1733 += 1, R1690 += 1, R1691 += 1 };
  s0 -> s1 [67, 65535] { R1823 += 1, R1765 += 1, R1733 += 1, R1690 += 1, R1691 += 1 };
  s1 -> s1 [0, 65] { R1823 += 1, R1765 += 1, R1733 += 1, R1690 += 1, R1691 += 1 };
  s1 -> s6 [0, 65535] { R1823 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s1 [0, 65535] { R1823 += 1, R1765 += 1 };
  s1 -> s4 [66, 66] { R1823 += 1, R1765 += 1, R1733 += 1, R1690 += 1, R1691 += 1 };
  s1 -> s5 [66, 66] { R1823 += 1, R1765 += 1, R1733 += 1, R1690 += 1, R1691 += 1 };
  s1 -> s1 [67, 65535] { R1823 += 1, R1765 += 1, R1733 += 1, R1690 += 1, R1691 += 1 };
  s2 -> s1 [0, 65] { R1823 += 1, R1765 += 1, R1733 += 1, R1690 += 1, R1691 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s2 [0, 65535] { R1823 += 1, R1764 += 1, R1765 += 1 };
  s2 -> s3 [0, 65535] { R1823 += 1, R1765 += 1, R1732 += 1, R1733 += 1 };
  s2 -> s4 [66, 66] { R1823 += 1, R1765 += 1, R1733 += 1, R1690 += 1, R1691 += 1 };
  s2 -> s5 [66, 66] { R1823 += 1, R1765 += 1, R1733 += 1, R1690 += 1, R1691 += 1 };
  s2 -> s1 [67, 65535] { R1823 += 1, R1765 += 1, R1733 += 1, R1690 += 1, R1691 += 1 };
  s3 -> s1 [0, 65] { R1823 += 1, R1765 += 1, R1733 += 1, R1690 += 1, R1691 += 1 };
  s3 -> s6 [0, 65535] { R1823 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s3 [0, 65535] { R1823 += 1, R1765 += 1, R1732 += 1, R1733 += 1 };
  s3 -> s4 [66, 66] { R1823 += 1, R1765 += 1, R1733 += 1, R1690 += 1, R1691 += 1 };
  s3 -> s5 [66, 66] { R1823 += 1, R1765 += 1, R1733 += 1, R1690 += 1, R1691 += 1 };
  s3 -> s1 [67, 65535] { R1823 += 1, R1765 += 1, R1733 += 1, R1690 += 1, R1691 += 1 };
  s4 -> s6 [0, 65535] { R1823 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s4 [0, 65535] { R1823 += 1, R1765 += 1 };
  s5 -> s6 [0, 65535] { R1823 += 1 };
  s5 -> s7 [0, 65535];
  s5 -> s5 [0, 65535] { R1823 += 1, R1765 += 1, R1733 += 1, R1690 += 1, R1691 += 1 };
  s5 -> s8 [0, 65535] { R1823 += 1, R1765 += 1 };
  s6 -> s6 [0, 65535] { R1823 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  s8 -> s6 [0, 65535] { R1823 += 1 };
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R1823 += 1, R1765 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
};
synchronised {  // Automata constraining P37
automaton P37_0 {
  init s0;
  s0 -> s1 [9, 9];
  accepting s1;
};
};
synchronised {  // Automata constraining P38
automaton P38_0 {
  init s0;
  s0 -> s1 [10, 10];
  accepting s1;
};
};
synchronised {  // Automata constraining P36
automaton P36_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
constraint R2 = R1765 && R3 - R1823 = 1 && R22 - R1765 = -1 && R23 = R1765 && R24 - R1765 = -1 && R25 = R1765 && R26 = 0 && R27 = 1 && R28 = 0 && R29 = 1 && R30 = R1823 && R31 - R1823 = 1 && R32 = R1823 && R33 - R1823 = 1 && R34 = 0 && R35 = 1 && R36 = 0 && R37 = 1 && R42 + R57 + R56 + -1*R1689 + -1*R1687 - R47 = 0 && R46 + R1688 + R1686 = 0 && R1724 = 0 && R1725 = 0 && R1728 = 0 && R1729 = 0 && R1730 = 0 && R1731 = 0 && R1734 = 0 && R1735 = R1765 && R1736 = 0 && R1737 = R1765 && R1738 = 0 && R1739 = R1765 && R1740 = 0 && R1741 = R1765 && R1742 = 0 && R1743 = R1765 && R1744 = 0 && R1745 = R1765 && R1746 = 0 && R1747 = R1765 && R1748 = 0 && R1749 = R1765 && R1750 = 0 && R1751 = R1765 && R1752 = 0 && R1753 = R1765 && R1754 = 0 && R1755 = R1765 && R1756 = 0 && R1757 = R1765 && R1758 = 0 && R1759 = R1765 && R1760 = 0 && R1761 = R1765 && R1762 = 0 && R1763 = R1765 && R1764 = 0 && R1766 = 0 && R1767 = R1823 && R1768 = 0 && R1769 = R1823 && R1770 = 0 && R1771 = R1823 && R1772 = 0 && R1773 = R1823 && R1774 = 0 && R1775 = R1823 && R1776 = 0 && R1777 = R1823 && R1778 = 0 && R1779 = R1823 && R1780 = 0 && R1781 = R1823 && R1782 = 0 && R1783 = R1823 && R1784 = 0 && R1785 = R1823 && R1786 = 0 && R1787 = R1823 && R1788 = 0 && R1789 = R1823 && R1790 = 0 && R1791 = R1823 && R1792 = 0 && R1793 = R1823 && R1794 = 0 && R1795 = R1823 && R1796 = 0 && R1797 = R1823 && R1798 = 0 && R1799 = R1823 && R1800 = 0 && R1801 = R1823 && R1802 = 0 && R1803 = R1823 && R1804 = 0 && R1805 = R1823 && R1806 = 0 && R1807 = R1823 && R1808 = 0 && R1809 = R1823 && R1810 = 0 && R1811 = R1823 && R1812 = 0 && R1813 = R1823 && R1814 = 0 && R1815 = R1823 && R1816 = 0 && R1817 = R1823 && R1818 = 0 && R1819 = R1823 && R1820 = 0 && R1821 = R1823 && R1822 = 0 && -1 < R1 && R11 < 1 && R14 < 1 && R17 < 1 && R44 + R1685 + R1684 < 1 && -1*R1689 + -1*R1687 - R47 < 1 && 0 < R1765 && -1 < R1823 && (R1 != 0 || R19 = 0 || (R1696 = 0 && R1697 = 0)) && (R1 != 0 || R19 = 0 || (R1698 = 0 && R1699 = 0)) && (R1 != 0 || R19 = 0 || (R1700 = 0 && R1701 = 0)) && (R1 != 0 || R19 = 0 || (R1702 = 0 && R1703 = 0)) && (R1 != 0 || R19 = 0 || (R1704 = 0 && R1705 = 0)) && (R1 != 0 || R19 = 0 || (R1706 = 0 && R1707 = 0)) && (R1 != 0 || R19 = 0 || (R1708 = 0 && R1709 = 0)) && (R47 + R1689 + R1687 != 0 || R52 + R1695 + R1692 = 0 || (R50 + R1693 + R1690 = 0 && R51 + R1694 + R1691 = 0)) && (R50 + R1693 + R1690 != 0 || R47 + R1689 + R1687 + -1*R1694 + -1*R1691 - R51 = 0 || R47 + R1689 + R1687 < 1) && (R1696 != 0 || R1 = R1697 || R1 < 1) && (R1698 != 0 || R1 = R1699 || R1 < 1) && (R1700 != 0 || R1 = R1701 || R1 < 1) && (R1702 != 0 || R1 = R1703 || R1 < 1) && (R1704 != 0 || R1 = R1705 || R1 < 1) && (R1706 != 0 || R1 = R1707 || R1 < 1) && (R1708 != 0 || R1 = R1709 || R1 < 1) && (R20 = 0 || (R1722 = 0 && R1723 = 0)) && (R20 = 0 || (R1726 = 0 && R1727 = 0)) && (R20 = 0 || (R1732 = 0 && R1733 = 0)) && (R21 = 0 || (R1710 = 0 && R1711 = 0)) && (R21 = 0 || (R1712 = 0 && R1713 = 0)) && (R21 = 0 || (R1714 = 0 && R1715 = 0)) && (R21 = 0 || (R1716 = 0 && R1717 = 0)) && (R21 = 0 || (R1718 = 0 && R1719 = 0)) && (R21 = 0 || (R1720 = 0 && R1721 = 0)) && (R50 + R1693 + R1690 = 0 || R47 + R1689 + R1687 < 1) && (R1696 = 0 || R1 < 1) && (R1698 = 0 || R1 < 1) && (R1700 = 0 || R1 < 1) && (R1702 = 0 || R1 < 1) && (R1704 = 0 || R1 < 1) && (R1706 = 0 || R1 < 1) && (R1708 = 0 || R1 < 1);
// End of Parikh automata intersection problem
