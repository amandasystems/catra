// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R14, R17, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R31, R32, R33, R34, R35, R36, R37, R4, R42, R44, R46, R466, R467, R468, R469, R47, R5, R50, R51, R52, R56, R57, R58, R59, R6, R7, R738, R739, R740, R741, R742, R743, R744, R745, R746, R747, R748, R749, R750, R751, R752, R753, R754, R755, R756, R757, R758, R759, R760, R761, R762, R763, R764, R765, R766, R767, R768, R769, R770, R771, R772, R773, R774, R775, R776, R777, R778, R779, R780, R781, R782, R783, R784, R785, R786, R787, R788, R789, R790, R791, R792, R793, R794, R795, R796, R797, R798, R799, R800, R801, R802, R803, R804, R805, R806, R807, R808, R809, R810, R811, R812, R813, R814, R815, R816, R817, R818, R819, R820, R821, R822, R823, R824, R825, R826, R827, R828, R829, R830, R831, R832, R833, R834, R835, R836, R837, R838, R839, R840, R841, R842, R843, R844, R845, R846, R847, R848, R849, R850, R851, R852, R853, R854, R855, R856, R857, R858, R859, R860, R861, R862, R863, R864, R865, R866, R867, R868, R869, R870, R871;
synchronised {  // Automata constraining P9
automaton P9_0 {
  init s0;
  s0 -> s1 [98, 98];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R17 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s0 [0, 65535] { R30 += 1, R31 += 1 };
  s0 -> s1 [13, 13] { R31 += 1 };
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value2_4 {
  init s0;
  s0 -> s0 [0, 65535] { R32 += 1, R33 += 1 };
  s0 -> s1 [0, 65535] { R33 += 1, R6 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R33 += 1, R6 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 8] { R35 += 1 };
  s0 -> s0 [0, 65535] { R34 += 1, R35 += 1 };
  s0 -> s2 [9, 13] { R35 += 1 };
  s0 -> s1 [14, 31] { R35 += 1 };
  s0 -> s2 [32, 32] { R35 += 1 };
  s0 -> s1 [33, 65535] { R35 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R35 += 1 };
  s2 -> s1 [0, 65535] { R35 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 65535] { R37 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R36 += 1, R37 += 1 };
  s1 -> s1 [0, 65535] { R37 += 1, R7 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 64] { R815 += 1 };
  s0 -> s0 [0, 65535] { R814 += 1, R815 += 1 };
  s0 -> s2 [66, 66] { R815 += 1 };
  s0 -> s1 [67, 65535] { R815 += 1 };
  s1 -> s1 [0, 64] { R815 += 1 };
  s1 -> s2 [66, 66] { R815 += 1 };
  s1 -> s1 [67, 65535] { R815 += 1 };
  s2 -> s2 [0, 64] { R815 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [66, 65535] { R815 += 1 };
  accepting s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R816 += 1, R817 += 1 };
  s0 -> s1 [0, 65535] { R817 += 1, R2 += 1 };
  s1 -> s1 [0, 65535] { R817 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 65] { R819 += 1 };
  s0 -> s0 [0, 65535] { R818 += 1, R819 += 1 };
  s0 -> s2 [0, 65535] { R819 += 1, R14 += 1 };
  s0 -> s3 [66, 66] { R819 += 1 };
  s0 -> s1 [67, 65535] { R819 += 1 };
  s1 -> s1 [0, 65] { R819 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [66, 66] { R819 += 1 };
  s1 -> s1 [67, 65535] { R819 += 1 };
  s2 -> s1 [0, 65] { R819 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R819 += 1, R14 += 1 };
  s2 -> s3 [66, 66] { R819 += 1 };
  s2 -> s1 [67, 65535] { R819 += 1 };
  s3 -> s3 [0, 65535] { R819 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 8] { R821 += 1, R23 += 1 };
  s0 -> s2 [0, 65535] { R821 += 1, R22 += 1, R23 += 1 };
  s0 -> s0 [0, 65535] { R820 += 1, R821 += 1 };
  s0 -> s3 [9, 13] { R821 += 1, R23 += 1 };
  s0 -> s1 [14, 31] { R821 += 1, R23 += 1 };
  s0 -> s3 [32, 32] { R821 += 1, R23 += 1 };
  s0 -> s1 [33, 65535] { R821 += 1, R23 += 1 };
  s1 -> s1 [0, 65535] { R821 += 1, R23 += 1 };
  s1 -> s5 [0, 65535] { R821 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R821 += 1, R23 += 1 };
  s2 -> s2 [0, 65535] { R821 += 1, R22 += 1, R23 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R821 += 1, R23 += 1 };
  s2 -> s1 [14, 31] { R821 += 1, R23 += 1 };
  s2 -> s3 [32, 32] { R821 += 1, R23 += 1 };
  s2 -> s1 [33, 65535] { R821 += 1, R23 += 1 };
  s3 -> s1 [0, 65535] { R821 += 1, R23 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R821 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s0 [0, 65535] { R822 += 1, R823 += 1 };
  s0 -> s1 [0, 65535] { R823 += 1, R25 += 1, R4 += 1 };
  s0 -> s2 [0, 65535] { R823 += 1, R24 += 1, R25 += 1 };
  s1 -> s4 [0, 65535] { R823 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R823 += 1, R25 += 1, R4 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R823 += 1, R25 += 1, R4 += 1 };
  s2 -> s2 [0, 65535] { R823 += 1, R24 += 1, R25 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R823 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 8] { R825 += 1, R27 += 1 };
  s0 -> s0 [0, 65535] { R824 += 1, R825 += 1 };
  s0 -> s2 [0, 65535] { R825 += 1, R26 += 1, R27 += 1 };
  s0 -> s3 [9, 13] { R825 += 1, R27 += 1 };
  s0 -> s1 [14, 31] { R825 += 1, R27 += 1 };
  s0 -> s3 [32, 32] { R825 += 1, R27 += 1 };
  s0 -> s1 [33, 65535] { R825 += 1, R27 += 1 };
  s1 -> s1 [0, 65535] { R825 += 1, R27 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R825 += 1 };
  s2 -> s1 [0, 8] { R825 += 1, R27 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R825 += 1, R26 += 1, R27 += 1 };
  s2 -> s3 [9, 13] { R825 += 1, R27 += 1 };
  s2 -> s1 [14, 31] { R825 += 1, R27 += 1 };
  s2 -> s3 [32, 32] { R825 += 1, R27 += 1 };
  s2 -> s1 [33, 65535] { R825 += 1, R27 += 1 };
  s3 -> s1 [0, 65535] { R825 += 1, R27 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R825 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 65535] { R827 += 1, R28 += 1, R29 += 1 };
  s0 -> s2 [0, 65535] { R827 += 1, R29 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R826 += 1, R827 += 1 };
  s1 -> s1 [0, 65535] { R827 += 1, R28 += 1, R29 += 1 };
  s1 -> s2 [0, 65535] { R827 += 1, R29 += 1, R5 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R827 += 1, R29 += 1, R5 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R827 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R827 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 65535] { R829 += 1, R758 += 1, R759 += 1 };
  s0 -> s0 [0, 65535] { R828 += 1, R829 += 1 };
  s0 -> s2 [0, 65535] { R829 += 1, R759 += 1, R21 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R829 += 1, R758 += 1, R759 += 1 };
  s1 -> s2 [0, 65535] { R829 += 1, R759 += 1, R21 += 1 };
  s2 -> s3 [0, 65535] { R829 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R829 += 1, R759 += 1, R21 += 1 };
  s3 -> s3 [0, 65535] { R829 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 65] { R831 += 1, R761 += 1 };
  s0 -> s0 [0, 65535] { R830 += 1, R831 += 1 };
  s0 -> s2 [0, 65535] { R831 += 1, R760 += 1, R761 += 1 };
  s0 -> s3 [66, 66] { R831 += 1, R761 += 1 };
  s0 -> s4 [66, 66] { R831 += 1, R761 += 1 };
  s0 -> s1 [71, 65535] { R831 += 1, R761 += 1 };
  s1 -> s1 [0, 65] { R831 += 1, R761 += 1 };
  s1 -> s1 [0, 65535] { R831 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [66, 66] { R831 += 1, R761 += 1 };
  s1 -> s4 [66, 66] { R831 += 1, R761 += 1 };
  s1 -> s1 [71, 65535] { R831 += 1, R761 += 1 };
  s2 -> s1 [0, 65] { R831 += 1, R761 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R831 += 1, R760 += 1, R761 += 1 };
  s2 -> s3 [66, 66] { R831 += 1, R761 += 1 };
  s2 -> s4 [66, 66] { R831 += 1, R761 += 1 };
  s2 -> s1 [71, 65535] { R831 += 1, R761 += 1 };
  s3 -> s3 [0, 65535] { R831 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 66] { R831 += 1, R761 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R831 += 1 };
  s4 -> s4 [71, 65535] { R831 += 1, R761 += 1 };
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 65] { R833 += 1, R763 += 1, R42 += 1 };
  s0 -> s2 [0, 65535] { R833 += 1, R762 += 1, R763 += 1 };
  s0 -> s0 [0, 65535] { R832 += 1, R833 += 1 };
  s0 -> s3 [66, 66] { R833 += 1, R763 += 1, R42 += 1 };
  s0 -> s4 [66, 66] { R833 += 1, R763 += 1, R42 += 1 };
  s0 -> s1 [67, 65535] { R833 += 1, R763 += 1, R42 += 1 };
  s1 -> s1 [0, 65] { R833 += 1, R763 += 1, R42 += 1 };
  s1 -> s1 [0, 65535] { R833 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [66, 66] { R833 += 1, R763 += 1, R42 += 1 };
  s1 -> s4 [66, 66] { R833 += 1, R763 += 1, R42 += 1 };
  s1 -> s1 [67, 65535] { R833 += 1, R763 += 1, R42 += 1 };
  s2 -> s1 [0, 65] { R833 += 1, R763 += 1, R42 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R833 += 1, R762 += 1, R763 += 1 };
  s2 -> s3 [66, 66] { R833 += 1, R763 += 1, R42 += 1 };
  s2 -> s4 [66, 66] { R833 += 1, R763 += 1, R42 += 1 };
  s2 -> s1 [67, 65535] { R833 += 1, R763 += 1, R42 += 1 };
  s3 -> s6 [0, 65535] { R833 += 1 };
  s3 -> s3 [0, 65535] { R833 += 1, R763 += 1, R42 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R833 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R833 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 65] { R835 += 1, R765 += 1, R44 += 1 };
  s0 -> s0 [0, 65535] { R834 += 1, R835 += 1 };
  s0 -> s2 [0, 65535] { R835 += 1, R764 += 1, R765 += 1 };
  s0 -> s3 [66, 66] { R835 += 1, R765 += 1, R44 += 1 };
  s0 -> s4 [66, 66] { R835 += 1, R765 += 1, R44 += 1 };
  s0 -> s1 [67, 65535] { R835 += 1, R765 += 1, R44 += 1 };
  s1 -> s1 [0, 65] { R835 += 1, R765 += 1, R44 += 1 };
  s1 -> s1 [0, 65535] { R835 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [66, 66] { R835 += 1, R765 += 1, R44 += 1 };
  s1 -> s4 [66, 66] { R835 += 1, R765 += 1, R44 += 1 };
  s1 -> s1 [67, 65535] { R835 += 1, R765 += 1, R44 += 1 };
  s2 -> s1 [0, 65] { R835 += 1, R765 += 1, R44 += 1 };
  s2 -> s2 [0, 65535] { R835 += 1, R764 += 1, R765 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [66, 66] { R835 += 1, R765 += 1, R44 += 1 };
  s2 -> s4 [66, 66] { R835 += 1, R765 += 1, R44 += 1 };
  s2 -> s1 [67, 65535] { R835 += 1, R765 += 1, R44 += 1 };
  s3 -> s6 [0, 65535] { R835 += 1 };
  s3 -> s3 [0, 65535] { R835 += 1, R765 += 1, R44 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R835 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R835 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65] { R837 += 1, R767 += 1, R46 += 1, R47 += 1 };
  s0 -> s2 [0, 65535] { R837 += 1, R766 += 1, R767 += 1 };
  s0 -> s0 [0, 65535] { R836 += 1, R837 += 1 };
  s0 -> s3 [66, 66] { R837 += 1, R767 += 1, R46 += 1, R47 += 1 };
  s0 -> s4 [66, 66] { R837 += 1, R767 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [67, 65535] { R837 += 1, R767 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65] { R837 += 1, R767 += 1, R46 += 1, R47 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R837 += 1 };
  s1 -> s3 [66, 66] { R837 += 1, R767 += 1, R46 += 1, R47 += 1 };
  s1 -> s4 [66, 66] { R837 += 1, R767 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [67, 65535] { R837 += 1, R767 += 1, R46 += 1, R47 += 1 };
  s2 -> s1 [0, 65] { R837 += 1, R767 += 1, R46 += 1, R47 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R837 += 1, R766 += 1, R767 += 1 };
  s2 -> s3 [66, 66] { R837 += 1, R767 += 1, R46 += 1, R47 += 1 };
  s2 -> s4 [66, 66] { R837 += 1, R767 += 1, R46 += 1, R47 += 1 };
  s2 -> s1 [67, 65535] { R837 += 1, R767 += 1, R46 += 1, R47 += 1 };
  s3 -> s6 [0, 65535] { R837 += 1 };
  s3 -> s3 [0, 65535] { R837 += 1, R767 += 1, R46 += 1, R47 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R837 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R837 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 65] { R839 += 1, R769 += 1, R50 += 1, R51 += 1 };
  s0 -> s0 [0, 65535] { R838 += 1, R839 += 1 };
  s0 -> s2 [0, 65535] { R839 += 1, R768 += 1, R769 += 1 };
  s0 -> s3 [66, 66] { R839 += 1, R769 += 1, R50 += 1, R51 += 1 };
  s0 -> s4 [66, 66] { R839 += 1, R769 += 1, R50 += 1, R51 += 1 };
  s0 -> s1 [67, 65535] { R839 += 1, R769 += 1, R50 += 1, R51 += 1 };
  s1 -> s1 [0, 65] { R839 += 1, R769 += 1, R50 += 1, R51 += 1 };
  s1 -> s1 [0, 65535] { R839 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [66, 66] { R839 += 1, R769 += 1, R50 += 1, R51 += 1 };
  s1 -> s4 [66, 66] { R839 += 1, R769 += 1, R50 += 1, R51 += 1 };
  s1 -> s1 [67, 65535] { R839 += 1, R769 += 1, R50 += 1, R51 += 1 };
  s2 -> s1 [0, 65] { R839 += 1, R769 += 1, R50 += 1, R51 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R839 += 1, R768 += 1, R769 += 1 };
  s2 -> s3 [66, 66] { R839 += 1, R769 += 1, R50 += 1, R51 += 1 };
  s2 -> s4 [66, 66] { R839 += 1, R769 += 1, R50 += 1, R51 += 1 };
  s2 -> s1 [67, 65535] { R839 += 1, R769 += 1, R50 += 1, R51 += 1 };
  s3 -> s3 [0, 65535] { R839 += 1, R769 += 1, R50 += 1, R51 += 1 };
  s3 -> s6 [0, 65535] { R839 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R839 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R839 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 65] { R841 += 1, R783 += 1 };
  s0 -> s2 [0, 65535] { R841 += 1, R782 += 1, R783 += 1 };
  s0 -> s0 [0, 65535] { R840 += 1, R841 += 1 };
  s0 -> s3 [66, 66] { R841 += 1, R783 += 1 };
  s0 -> s1 [67, 65535] { R841 += 1, R783 += 1 };
  s1 -> s1 [0, 65] { R841 += 1, R783 += 1 };
  s1 -> s3 [66, 66] { R841 += 1, R783 += 1 };
  s1 -> s1 [67, 65535] { R841 += 1, R783 += 1 };
  s2 -> s1 [0, 65] { R841 += 1, R783 += 1 };
  s2 -> s2 [0, 65535] { R841 += 1, R782 += 1, R783 += 1 };
  s2 -> s3 [66, 66] { R841 += 1, R783 += 1 };
  s2 -> s1 [67, 65535] { R841 += 1, R783 += 1 };
  s3 -> s4 [0, 65535] { R841 += 1 };
  s3 -> s3 [0, 65535] { R841 += 1, R783 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R841 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R843 += 1, R784 += 1, R785 += 1 };
  s0 -> s0 [0, 65535] { R842 += 1, R843 += 1 };
  s0 -> s2 [0, 65535] { R843 += 1, R785 += 1, R1 += 1 };
  s1 -> s1 [0, 65535] { R843 += 1, R784 += 1, R785 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R843 += 1, R785 += 1, R1 += 1 };
  s2 -> s3 [0, 65535] { R843 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R843 += 1, R785 += 1, R1 += 1 };
  s3 -> s3 [0, 65535] { R843 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 65] { R845 += 1, R787 += 1 };
  s0 -> s2 [0, 65535] { R845 += 1, R787 += 1, R11 += 1 };
  s0 -> s3 [0, 65535] { R845 += 1, R786 += 1, R787 += 1 };
  s0 -> s0 [0, 65535] { R844 += 1, R845 += 1 };
  s0 -> s4 [66, 66] { R845 += 1, R787 += 1 };
  s0 -> s1 [67, 65535] { R845 += 1, R787 += 1 };
  s1 -> s1 [0, 65] { R845 += 1, R787 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R845 += 1 };
  s1 -> s4 [66, 66] { R845 += 1, R787 += 1 };
  s1 -> s1 [67, 65535] { R845 += 1, R787 += 1 };
  s2 -> s1 [0, 65] { R845 += 1, R787 += 1 };
  s2 -> s6 [0, 65535] { R845 += 1 };
  s2 -> s2 [0, 65535] { R845 += 1, R787 += 1, R11 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [66, 66] { R845 += 1, R787 += 1 };
  s2 -> s1 [67, 65535] { R845 += 1, R787 += 1 };
  s3 -> s1 [0, 65] { R845 += 1, R787 += 1 };
  s3 -> s2 [0, 65535] { R845 += 1, R787 += 1, R11 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R845 += 1, R786 += 1, R787 += 1 };
  s3 -> s4 [66, 66] { R845 += 1, R787 += 1 };
  s3 -> s1 [67, 65535] { R845 += 1, R787 += 1 };
  s4 -> s4 [0, 65535] { R845 += 1, R787 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R845 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65] { R847 += 1, R789 += 1, R745 += 1 };
  s0 -> s2 [0, 65535] { R847 += 1, R789 += 1, R744 += 1, R745 += 1 };
  s0 -> s0 [0, 65535] { R846 += 1, R847 += 1 };
  s0 -> s3 [0, 65535] { R847 += 1, R788 += 1, R789 += 1 };
  s0 -> s1 [67, 65535] { R847 += 1, R789 += 1, R745 += 1 };
  s1 -> s1 [0, 65] { R847 += 1, R789 += 1, R745 += 1 };
  s1 -> s1 [0, 65535] { R847 += 1, R789 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R847 += 1 };
  s1 -> s1 [67, 65535] { R847 += 1, R789 += 1, R745 += 1 };
  s2 -> s1 [0, 65] { R847 += 1, R789 += 1, R745 += 1 };
  s2 -> s2 [0, 65535] { R847 += 1, R789 += 1, R744 += 1, R745 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R847 += 1 };
  s2 -> s1 [67, 65535] { R847 += 1, R789 += 1, R745 += 1 };
  s3 -> s1 [0, 65] { R847 += 1, R789 += 1, R745 += 1 };
  s3 -> s2 [0, 65535] { R847 += 1, R789 += 1, R744 += 1, R745 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R847 += 1, R788 += 1, R789 += 1 };
  s3 -> s1 [67, 65535] { R847 += 1, R789 += 1, R745 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R847 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s0 [0, 65535] { R848 += 1, R849 += 1 };
  s0 -> s1 [0, 65535] { R849 += 1, R791 += 1, R746 += 1, R747 += 1 };
  s0 -> s2 [0, 65535] { R849 += 1, R790 += 1, R791 += 1 };
  s0 -> s3 [0, 65535] { R849 += 1, R791 += 1, R747 += 1, R19 += 1 };
  s1 -> s1 [0, 65535] { R849 += 1, R791 += 1, R746 += 1, R747 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R849 += 1 };
  s1 -> s3 [0, 65535] { R849 += 1, R791 += 1, R747 += 1, R19 += 1 };
  s2 -> s1 [0, 65535] { R849 += 1, R791 += 1, R746 += 1, R747 += 1 };
  s2 -> s2 [0, 65535] { R849 += 1, R790 += 1, R791 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R849 += 1, R791 += 1, R747 += 1, R19 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R849 += 1 };
  s3 -> s6 [0, 65535] { R849 += 1, R791 += 1 };
  s3 -> s3 [0, 65535] { R849 += 1, R791 += 1, R747 += 1, R19 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R849 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R849 += 1 };
  s6 -> s6 [0, 65535] { R849 += 1, R791 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 66] { R851 += 1, R793 += 1, R749 += 1 };
  s0 -> s0 [0, 65535] { R850 += 1, R851 += 1 };
  s0 -> s2 [0, 65535] { R851 += 1, R792 += 1, R793 += 1 };
  s0 -> s3 [0, 65535] { R851 += 1, R793 += 1, R748 += 1, R749 += 1 };
  s0 -> s1 [70, 65535] { R851 += 1, R793 += 1, R749 += 1 };
  s1 -> s1 [0, 66] { R851 += 1, R793 += 1, R749 += 1 };
  s1 -> s4 [0, 65535] { R851 += 1 };
  s1 -> s1 [0, 65535] { R851 += 1, R793 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [70, 65535] { R851 += 1, R793 += 1, R749 += 1 };
  s2 -> s1 [0, 66] { R851 += 1, R793 += 1, R749 += 1 };
  s2 -> s2 [0, 65535] { R851 += 1, R792 += 1, R793 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R851 += 1, R793 += 1, R748 += 1, R749 += 1 };
  s2 -> s1 [70, 65535] { R851 += 1, R793 += 1, R749 += 1 };
  s3 -> s1 [0, 66] { R851 += 1, R793 += 1, R749 += 1 };
  s3 -> s4 [0, 65535] { R851 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R851 += 1, R793 += 1, R748 += 1, R749 += 1 };
  s3 -> s1 [70, 65535] { R851 += 1, R793 += 1, R749 += 1 };
  s4 -> s4 [0, 65535] { R851 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R853 += 1, R794 += 1, R795 += 1 };
  s0 -> s2 [0, 65535] { R853 += 1, R795 += 1, R750 += 1, R751 += 1 };
  s0 -> s3 [0, 65535] { R853 += 1, R795 += 1, R751 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R852 += 1, R853 += 1 };
  s1 -> s1 [0, 65535] { R853 += 1, R794 += 1, R795 += 1 };
  s1 -> s2 [0, 65535] { R853 += 1, R795 += 1, R750 += 1, R751 += 1 };
  s1 -> s3 [0, 65535] { R853 += 1, R795 += 1, R751 += 1, R57 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s4 [0, 65535] { R853 += 1 };
  s2 -> s2 [0, 65535] { R853 += 1, R795 += 1, R750 += 1, R751 += 1 };
  s2 -> s3 [0, 65535] { R853 += 1, R795 += 1, R751 += 1, R57 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s4 [0, 65535] { R853 += 1 };
  s3 -> s3 [0, 65535] { R853 += 1, R795 += 1, R751 += 1, R57 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R853 += 1, R795 += 1 };
  s4 -> s4 [0, 65535] { R853 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R853 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R853 += 1, R795 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 69] { R855 += 1, R797 += 1, R753 += 1 };
  s0 -> s2 [0, 65535] { R855 += 1, R797 += 1, R753 += 1, R59 += 1 };
  s0 -> s0 [0, 65535] { R854 += 1, R855 += 1 };
  s0 -> s3 [0, 65535] { R855 += 1, R796 += 1, R797 += 1 };
  s0 -> s4 [0, 65535] { R855 += 1, R797 += 1, R752 += 1, R753 += 1 };
  s0 -> s1 [71, 65535] { R855 += 1, R797 += 1, R753 += 1 };
  s1 -> s1 [0, 69] { R855 += 1, R797 += 1, R753 += 1 };
  s1 -> s1 [0, 65535] { R855 += 1, R797 += 1 };
  s1 -> s5 [0, 65535] { R855 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [71, 65535] { R855 += 1, R797 += 1, R753 += 1 };
  s2 -> s1 [0, 69] { R855 += 1, R797 += 1, R753 += 1 };
  s2 -> s2 [0, 65535] { R855 += 1, R797 += 1, R753 += 1, R59 += 1 };
  s2 -> s5 [0, 65535] { R855 += 1 };
  s2 -> s7 [0, 65535] { R855 += 1, R797 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s1 [71, 65535] { R855 += 1, R797 += 1, R753 += 1 };
  s3 -> s1 [0, 69] { R855 += 1, R797 += 1, R753 += 1 };
  s3 -> s2 [0, 65535] { R855 += 1, R797 += 1, R753 += 1, R59 += 1 };
  s3 -> s3 [0, 65535] { R855 += 1, R796 += 1, R797 += 1 };
  s3 -> s4 [0, 65535] { R855 += 1, R797 += 1, R752 += 1, R753 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s1 [71, 65535] { R855 += 1, R797 += 1, R753 += 1 };
  s4 -> s1 [0, 69] { R855 += 1, R797 += 1, R753 += 1 };
  s4 -> s2 [0, 65535] { R855 += 1, R797 += 1, R753 += 1, R59 += 1 };
  s4 -> s5 [0, 65535] { R855 += 1 };
  s4 -> s4 [0, 65535] { R855 += 1, R797 += 1, R752 += 1, R753 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s1 [71, 65535] { R855 += 1, R797 += 1, R753 += 1 };
  s5 -> s5 [0, 65535] { R855 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R855 += 1 };
  s7 -> s7 [0, 65535] { R855 += 1, R797 += 1 };
  s7 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R857 += 1, R799 += 1, R754 += 1, R755 += 1 };
  s0 -> s2 [0, 65535] { R857 += 1, R799 += 1, R755 += 1 };
  s0 -> s0 [0, 65535] { R856 += 1, R857 += 1 };
  s0 -> s3 [0, 65535] { R857 += 1, R798 += 1, R799 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R857 += 1, R799 += 1, R754 += 1, R755 += 1 };
  s1 -> s6 [0, 65535] { R857 += 1 };
  s1 -> s2 [0, 65535] { R857 += 1, R799 += 1, R755 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R857 += 1, R799 += 1 };
  s2 -> s6 [0, 65535] { R857 += 1 };
  s2 -> s2 [0, 65535] { R857 += 1, R799 += 1, R755 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R857 += 1, R799 += 1, R754 += 1, R755 += 1 };
  s3 -> s2 [0, 65535] { R857 += 1, R799 += 1, R755 += 1 };
  s3 -> s3 [0, 65535] { R857 += 1, R798 += 1, R799 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R857 += 1, R799 += 1 };
  s5 -> s6 [0, 65535] { R857 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R857 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s0 [0, 65535] { R858 += 1, R859 += 1 };
  s0 -> s1 [0, 65535] { R859 += 1, R801 += 1, R756 += 1, R757 += 1 };
  s0 -> s2 [0, 65535] { R859 += 1, R801 += 1, R757 += 1 };
  s0 -> s3 [0, 65535] { R859 += 1, R800 += 1, R801 += 1 };
  s1 -> s1 [0, 65535] { R859 += 1, R801 += 1, R756 += 1, R757 += 1 };
  s1 -> s2 [0, 65535] { R859 += 1, R801 += 1, R757 += 1 };
  s1 -> s6 [0, 65535] { R859 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R859 += 1, R801 += 1 };
  s2 -> s2 [0, 65535] { R859 += 1, R801 += 1, R757 += 1 };
  s2 -> s6 [0, 65535] { R859 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R859 += 1, R801 += 1, R756 += 1, R757 += 1 };
  s3 -> s2 [0, 65535] { R859 += 1, R801 += 1, R757 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R859 += 1, R800 += 1, R801 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R859 += 1, R801 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s6 [0, 65535] { R859 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R859 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R861 += 1, R803 += 1, R771 += 1, R20 += 1 };
  s0 -> s2 [0, 65535] { R861 += 1, R802 += 1, R803 += 1 };
  s0 -> s0 [0, 65535] { R860 += 1, R861 += 1 };
  s0 -> s3 [0, 65535] { R861 += 1, R803 += 1, R770 += 1, R771 += 1 };
  s1 -> s4 [0, 65535] { R861 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R861 += 1, R803 += 1, R771 += 1, R20 += 1 };
  s1 -> s6 [0, 65535] { R861 += 1, R803 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R861 += 1, R803 += 1, R771 += 1, R20 += 1 };
  s2 -> s2 [0, 65535] { R861 += 1, R802 += 1, R803 += 1 };
  s2 -> s3 [0, 65535] { R861 += 1, R803 += 1, R770 += 1, R771 += 1 };
  s3 -> s4 [0, 65535] { R861 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [0, 65535] { R861 += 1, R803 += 1, R771 += 1, R20 += 1 };
  s3 -> s3 [0, 65535] { R861 += 1, R803 += 1, R770 += 1, R771 += 1 };
  s4 -> s4 [0, 65535] { R861 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R861 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R861 += 1, R803 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 65] { R863 += 1, R805 += 1, R773 += 1 };
  s0 -> s2 [0, 65535] { R863 += 1, R805 += 1, R772 += 1, R773 += 1 };
  s0 -> s3 [0, 65535] { R863 += 1, R804 += 1, R805 += 1 };
  s0 -> s0 [0, 65535] { R862 += 1, R863 += 1 };
  s0 -> s4 [66, 66] { R863 += 1, R805 += 1, R773 += 1 };
  s0 -> s5 [66, 66] { R863 += 1, R805 += 1, R773 += 1 };
  s0 -> s6 [70, 70] { R863 += 1, R805 += 1, R773 += 1 };
  s0 -> s1 [71, 65535] { R863 += 1, R805 += 1, R773 += 1 };
  s1 -> s1 [0, 65] { R863 += 1, R805 += 1, R773 += 1 };
  s1 -> s4 [66, 66] { R863 += 1, R805 += 1, R773 += 1 };
  s1 -> s5 [66, 66] { R863 += 1, R805 += 1, R773 += 1 };
  s1 -> s6 [70, 70] { R863 += 1, R805 += 1, R773 += 1 };
  s1 -> s1 [71, 65535] { R863 += 1, R805 += 1, R773 += 1 };
  s2 -> s1 [0, 65] { R863 += 1, R805 += 1, R773 += 1 };
  s2 -> s2 [0, 65535] { R863 += 1, R805 += 1, R772 += 1, R773 += 1 };
  s2 -> s4 [66, 66] { R863 += 1, R805 += 1, R773 += 1 };
  s2 -> s5 [66, 66] { R863 += 1, R805 += 1, R773 += 1 };
  s2 -> s6 [70, 70] { R863 += 1, R805 += 1, R773 += 1 };
  s2 -> s1 [71, 65535] { R863 += 1, R805 += 1, R773 += 1 };
  s3 -> s1 [0, 65] { R863 += 1, R805 += 1, R773 += 1 };
  s3 -> s2 [0, 65535] { R863 += 1, R805 += 1, R772 += 1, R773 += 1 };
  s3 -> s3 [0, 65535] { R863 += 1, R804 += 1, R805 += 1 };
  s3 -> s4 [66, 66] { R863 += 1, R805 += 1, R773 += 1 };
  s3 -> s5 [66, 66] { R863 += 1, R805 += 1, R773 += 1 };
  s3 -> s6 [70, 70] { R863 += 1, R805 += 1, R773 += 1 };
  s3 -> s1 [71, 65535] { R863 += 1, R805 += 1, R773 += 1 };
  s4 -> s4 [0, 66] { R863 += 1, R805 += 1, R773 += 1 };
  s4 -> s10 [70, 70] { R863 += 1, R805 += 1, R773 += 1 };
  s4 -> s4 [71, 65535] { R863 += 1, R805 += 1, R773 += 1 };
  s6 -> s6 [0, 65] { R863 += 1, R805 += 1, R773 += 1 };
  s6 -> s7 [0, 65535];
  s6 -> s8 [0, 65535] { R863 += 1 };
  s6 -> s6 [0, 65535] { R863 += 1, R805 += 1 };
  s6 -> s9 [66, 66] { R863 += 1, R805 += 1, R773 += 1 };
  s6 -> s10 [66, 66] { R863 += 1, R805 += 1, R773 += 1 };
  s6 -> s6 [70, 65535] { R863 += 1, R805 += 1, R773 += 1 };
  s7 -> s7 [0, 65535];
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R863 += 1 };
  s9 -> s7 [0, 65535];
  s9 -> s8 [0, 65535] { R863 += 1 };
  s9 -> s9 [0, 65535] { R863 += 1, R805 += 1 };
  s10 -> s10 [0, 66] { R863 += 1, R805 += 1, R773 += 1 };
  s10 -> s7 [0, 65535];
  s10 -> s8 [0, 65535] { R863 += 1 };
  s10 -> s10 [0, 65535] { R863 += 1, R805 += 1 };
  s10 -> s10 [70, 65535] { R863 += 1, R805 += 1, R773 += 1 };
  accepting s8, s9, s6, s7, s10;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 65] { R865 += 1, R807 += 1, R775 += 1, R56 += 1 };
  s0 -> s2 [0, 65535] { R865 += 1, R806 += 1, R807 += 1 };
  s0 -> s0 [0, 65535] { R864 += 1, R865 += 1 };
  s0 -> s3 [0, 65535] { R865 += 1, R807 += 1, R774 += 1, R775 += 1 };
  s0 -> s4 [66, 66] { R865 += 1, R807 += 1, R775 += 1, R56 += 1 };
  s0 -> s5 [66, 66] { R865 += 1, R807 += 1, R775 += 1, R56 += 1 };
  s0 -> s1 [67, 65535] { R865 += 1, R807 += 1, R775 += 1, R56 += 1 };
  s1 -> s1 [0, 65] { R865 += 1, R807 += 1, R775 += 1, R56 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s8 [0, 65535] { R865 += 1 };
  s1 -> s1 [0, 65535] { R865 += 1, R807 += 1 };
  s1 -> s4 [66, 66] { R865 += 1, R807 += 1, R775 += 1, R56 += 1 };
  s1 -> s5 [66, 66] { R865 += 1, R807 += 1, R775 += 1, R56 += 1 };
  s1 -> s1 [67, 65535] { R865 += 1, R807 += 1, R775 += 1, R56 += 1 };
  s2 -> s1 [0, 65] { R865 += 1, R807 += 1, R775 += 1, R56 += 1 };
  s2 -> s2 [0, 65535] { R865 += 1, R806 += 1, R807 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s3 [0, 65535] { R865 += 1, R807 += 1, R774 += 1, R775 += 1 };
  s2 -> s4 [66, 66] { R865 += 1, R807 += 1, R775 += 1, R56 += 1 };
  s2 -> s5 [66, 66] { R865 += 1, R807 += 1, R775 += 1, R56 += 1 };
  s2 -> s1 [67, 65535] { R865 += 1, R807 += 1, R775 += 1, R56 += 1 };
  s3 -> s1 [0, 65] { R865 += 1, R807 += 1, R775 += 1, R56 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s8 [0, 65535] { R865 += 1 };
  s3 -> s3 [0, 65535] { R865 += 1, R807 += 1, R774 += 1, R775 += 1 };
  s3 -> s4 [66, 66] { R865 += 1, R807 += 1, R775 += 1, R56 += 1 };
  s3 -> s5 [66, 66] { R865 += 1, R807 += 1, R775 += 1, R56 += 1 };
  s3 -> s1 [67, 65535] { R865 += 1, R807 += 1, R775 += 1, R56 += 1 };
  s4 -> s4 [0, 65535] { R865 += 1, R807 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s8 [0, 65535] { R865 += 1 };
  s5 -> s6 [0, 65535] { R865 += 1, R807 += 1 };
  s5 -> s7 [0, 65535];
  s5 -> s8 [0, 65535] { R865 += 1 };
  s5 -> s5 [0, 65535] { R865 += 1, R807 += 1, R775 += 1, R56 += 1 };
  s6 -> s6 [0, 65535] { R865 += 1, R807 += 1 };
  s6 -> s7 [0, 65535];
  s6 -> s8 [0, 65535] { R865 += 1 };
  s7 -> s7 [0, 65535];
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R865 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 65] { R867 += 1, R809 += 1, R777 += 1, R58 += 1 };
  s0 -> s0 [0, 65535] { R866 += 1, R867 += 1 };
  s0 -> s2 [0, 65535] { R867 += 1, R809 += 1, R776 += 1, R777 += 1 };
  s0 -> s3 [0, 65535] { R867 += 1, R808 += 1, R809 += 1 };
  s0 -> s4 [66, 66] { R867 += 1, R809 += 1, R777 += 1, R58 += 1 };
  s0 -> s5 [66, 66] { R867 += 1, R809 += 1, R777 += 1, R58 += 1 };
  s0 -> s1 [67, 65535] { R867 += 1, R809 += 1, R777 += 1, R58 += 1 };
  s1 -> s1 [0, 65] { R867 += 1, R809 += 1, R777 += 1, R58 += 1 };
  s1 -> s6 [0, 65535] { R867 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s1 [0, 65535] { R867 += 1, R809 += 1 };
  s1 -> s4 [66, 66] { R867 += 1, R809 += 1, R777 += 1, R58 += 1 };
  s1 -> s5 [66, 66] { R867 += 1, R809 += 1, R777 += 1, R58 += 1 };
  s1 -> s1 [67, 65535] { R867 += 1, R809 += 1, R777 += 1, R58 += 1 };
  s2 -> s1 [0, 65] { R867 += 1, R809 += 1, R777 += 1, R58 += 1 };
  s2 -> s6 [0, 65535] { R867 += 1 };
  s2 -> s2 [0, 65535] { R867 += 1, R809 += 1, R776 += 1, R777 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s4 [66, 66] { R867 += 1, R809 += 1, R777 += 1, R58 += 1 };
  s2 -> s5 [66, 66] { R867 += 1, R809 += 1, R777 += 1, R58 += 1 };
  s2 -> s1 [67, 65535] { R867 += 1, R809 += 1, R777 += 1, R58 += 1 };
  s3 -> s1 [0, 65] { R867 += 1, R809 += 1, R777 += 1, R58 += 1 };
  s3 -> s2 [0, 65535] { R867 += 1, R809 += 1, R776 += 1, R777 += 1 };
  s3 -> s3 [0, 65535] { R867 += 1, R808 += 1, R809 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s4 [66, 66] { R867 += 1, R809 += 1, R777 += 1, R58 += 1 };
  s3 -> s5 [66, 66] { R867 += 1, R809 += 1, R777 += 1, R58 += 1 };
  s3 -> s1 [67, 65535] { R867 += 1, R809 += 1, R777 += 1, R58 += 1 };
  s4 -> s6 [0, 65535] { R867 += 1 };
  s4 -> s4 [0, 65535] { R867 += 1, R809 += 1, R777 += 1, R58 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s8 [0, 65535] { R867 += 1, R809 += 1 };
  s5 -> s6 [0, 65535] { R867 += 1 };
  s5 -> s5 [0, 65535] { R867 += 1, R809 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s6 [0, 65535] { R867 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  s8 -> s6 [0, 65535] { R867 += 1 };
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R867 += 1, R809 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 65] { R869 += 1, R811 += 1, R779 += 1, R467 += 1 };
  s0 -> s2 [0, 65] { R869 += 1, R811 += 1, R779 += 1, R466 += 1, R467 += 1 };
  s0 -> s3 [0, 65535] { R869 += 1, R810 += 1, R811 += 1 };
  s0 -> s4 [0, 65535] { R869 += 1, R811 += 1, R778 += 1, R779 += 1 };
  s0 -> s0 [0, 65535] { R868 += 1, R869 += 1 };
  s0 -> s5 [66, 66] { R869 += 1, R811 += 1, R779 += 1, R467 += 1 };
  s0 -> s6 [66, 66] { R869 += 1, R811 += 1, R779 += 1, R467 += 1 };
  s0 -> s7 [66, 66] { R869 += 1, R811 += 1, R779 += 1, R466 += 1, R467 += 1 };
  s0 -> s8 [66, 66] { R869 += 1, R811 += 1, R779 += 1, R466 += 1, R467 += 1 };
  s0 -> s1 [67, 69] { R869 += 1, R811 += 1, R779 += 1, R467 += 1 };
  s0 -> s2 [67, 65535] { R869 += 1, R811 += 1, R779 += 1, R466 += 1, R467 += 1 };
  s0 -> s9 [70, 70] { R869 += 1, R811 += 1, R779 += 1, R467 += 1 };
  s0 -> s1 [71, 65535] { R869 += 1, R811 += 1, R779 += 1, R467 += 1 };
  s1 -> s1 [0, 65] { R869 += 1, R811 += 1, R779 += 1, R467 += 1 };
  s1 -> s5 [66, 66] { R869 += 1, R811 += 1, R779 += 1, R467 += 1 };
  s1 -> s6 [66, 66] { R869 += 1, R811 += 1, R779 += 1, R467 += 1 };
  s1 -> s1 [67, 69] { R869 += 1, R811 += 1, R779 += 1, R467 += 1 };
  s1 -> s9 [70, 70] { R869 += 1, R811 += 1, R779 += 1, R467 += 1 };
  s1 -> s1 [71, 65535] { R869 += 1, R811 += 1, R779 += 1, R467 += 1 };
  s2 -> s1 [0, 65] { R869 += 1, R811 += 1, R779 += 1, R467 += 1 };
  s2 -> s2 [0, 65] { R869 += 1, R811 += 1, R779 += 1, R466 += 1, R467 += 1 };
  s2 -> s5 [66, 66] { R869 += 1, R811 += 1, R779 += 1, R467 += 1 };
  s2 -> s6 [66, 66] { R869 += 1, R811 += 1, R779 += 1, R467 += 1 };
  s2 -> s7 [66, 66] { R869 += 1, R811 += 1, R779 += 1, R466 += 1, R467 += 1 };
  s2 -> s8 [66, 66] { R869 += 1, R811 += 1, R779 += 1, R466 += 1, R467 += 1 };
  s2 -> s1 [67, 69] { R869 += 1, R811 += 1, R779 += 1, R467 += 1 };
  s2 -> s2 [67, 65535] { R869 += 1, R811 += 1, R779 += 1, R466 += 1, R467 += 1 };
  s2 -> s9 [70, 70] { R869 += 1, R811 += 1, R779 += 1, R467 += 1 };
  s2 -> s1 [71, 65535] { R869 += 1, R811 += 1, R779 += 1, R467 += 1 };
  s3 -> s1 [0, 65] { R869 += 1, R811 += 1, R779 += 1, R467 += 1 };
  s3 -> s2 [0, 65] { R869 += 1, R811 += 1, R779 += 1, R466 += 1, R467 += 1 };
  s3 -> s3 [0, 65535] { R869 += 1, R810 += 1, R811 += 1 };
  s3 -> s4 [0, 65535] { R869 += 1, R811 += 1, R778 += 1, R779 += 1 };
  s3 -> s5 [66, 66] { R869 += 1, R811 += 1, R779 += 1, R467 += 1 };
  s3 -> s6 [66, 66] { R869 += 1, R811 += 1, R779 += 1, R467 += 1 };
  s3 -> s7 [66, 66] { R869 += 1, R811 += 1, R779 += 1, R466 += 1, R467 += 1 };
  s3 -> s8 [66, 66] { R869 += 1, R811 += 1, R779 += 1, R466 += 1, R467 += 1 };
  s3 -> s1 [67, 69] { R869 += 1, R811 += 1, R779 += 1, R467 += 1 };
  s3 -> s2 [67, 65535] { R869 += 1, R811 += 1, R779 += 1, R466 += 1, R467 += 1 };
  s3 -> s9 [70, 70] { R869 += 1, R811 += 1, R779 += 1, R467 += 1 };
  s3 -> s1 [71, 65535] { R869 += 1, R811 += 1, R779 += 1, R467 += 1 };
  s4 -> s1 [0, 65] { R869 += 1, R811 += 1, R779 += 1, R467 += 1 };
  s4 -> s2 [0, 65] { R869 += 1, R811 += 1, R779 += 1, R466 += 1, R467 += 1 };
  s4 -> s4 [0, 65535] { R869 += 1, R811 += 1, R778 += 1, R779 += 1 };
  s4 -> s5 [66, 66] { R869 += 1, R811 += 1, R779 += 1, R467 += 1 };
  s4 -> s6 [66, 66] { R869 += 1, R811 += 1, R779 += 1, R467 += 1 };
  s4 -> s7 [66, 66] { R869 += 1, R811 += 1, R779 += 1, R466 += 1, R467 += 1 };
  s4 -> s8 [66, 66] { R869 += 1, R811 += 1, R779 += 1, R466 += 1, R467 += 1 };
  s4 -> s1 [67, 69] { R869 += 1, R811 += 1, R779 += 1, R467 += 1 };
  s4 -> s2 [67, 65535] { R869 += 1, R811 += 1, R779 += 1, R466 += 1, R467 += 1 };
  s4 -> s9 [70, 70] { R869 += 1, R811 += 1, R779 += 1, R467 += 1 };
  s4 -> s1 [71, 65535] { R869 += 1, R811 += 1, R779 += 1, R467 += 1 };
  s6 -> s6 [0, 69] { R869 += 1, R811 += 1, R779 += 1, R467 += 1 };
  s6 -> s13 [70, 70] { R869 += 1, R811 += 1, R779 += 1, R467 += 1 };
  s6 -> s6 [71, 65535] { R869 += 1, R811 += 1, R779 += 1, R467 += 1 };
  s7 -> s6 [0, 69] { R869 += 1, R811 += 1, R779 += 1, R467 += 1 };
  s7 -> s7 [0, 65535] { R869 += 1, R811 += 1, R779 += 1, R466 += 1, R467 += 1 };
  s7 -> s13 [70, 70] { R869 += 1, R811 += 1, R779 += 1, R467 += 1 };
  s7 -> s6 [71, 65535] { R869 += 1, R811 += 1, R779 += 1, R467 += 1 };
  s9 -> s9 [0, 65] { R869 += 1, R811 += 1, R779 += 1, R467 += 1 };
  s9 -> s10 [0, 65] { R869 += 1, R811 += 1, R779 += 1 };
  s9 -> s11 [66, 66] { R869 += 1, R811 += 1, R779 += 1 };
  s9 -> s12 [66, 66] { R869 += 1, R811 += 1, R779 += 1 };
  s9 -> s13 [66, 66] { R869 += 1, R811 += 1, R779 += 1, R467 += 1 };
  s9 -> s14 [66, 66] { R869 += 1, R811 += 1, R779 += 1, R467 += 1 };
  s9 -> s9 [67, 65535] { R869 += 1, R811 += 1, R779 += 1, R467 += 1 };
  s9 -> s10 [67, 65535] { R869 += 1, R811 += 1, R779 += 1 };
  s10 -> s10 [0, 65] { R869 += 1, R811 += 1, R779 += 1 };
  s10 -> s10 [0, 65535] { R869 += 1, R811 += 1 };
  s10 -> s15 [0, 65535];
  s10 -> s16 [0, 65535] { R869 += 1 };
  s10 -> s11 [66, 66] { R869 += 1, R811 += 1, R779 += 1 };
  s10 -> s12 [66, 66] { R869 += 1, R811 += 1, R779 += 1 };
  s10 -> s10 [67, 65535] { R869 += 1, R811 += 1, R779 += 1 };
  s11 -> s17 [0, 65535] { R869 += 1, R811 += 1 };
  s11 -> s15 [0, 65535];
  s11 -> s11 [0, 65535] { R869 += 1, R811 += 1, R779 += 1 };
  s11 -> s16 [0, 65535] { R869 += 1 };
  s12 -> s15 [0, 65535];
  s12 -> s12 [0, 65535] { R869 += 1, R811 += 1 };
  s12 -> s16 [0, 65535] { R869 += 1 };
  s13 -> s11 [0, 65535] { R869 += 1, R811 += 1, R779 += 1 };
  s13 -> s13 [0, 65535] { R869 += 1, R811 += 1, R779 += 1, R467 += 1 };
  s15 -> s15 [0, 65535];
  s16 -> s15 [0, 65535];
  s16 -> s16 [0, 65535] { R869 += 1 };
  s17 -> s17 [0, 65535] { R869 += 1, R811 += 1 };
  s17 -> s15 [0, 65535];
  s17 -> s16 [0, 65535] { R869 += 1 };
  accepting s17, s16, s12, s15, s10, s11;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 65] { R871 += 1, R813 += 1, R781 += 1, R738 += 1, R739 += 1 };
  s0 -> s2 [0, 65] { R871 += 1, R813 += 1, R781 += 1, R739 += 1, R740 += 1 };
  s0 -> s3 [0, 65535] { R871 += 1, R813 += 1, R780 += 1, R781 += 1 };
  s0 -> s4 [0, 65535] { R871 += 1, R812 += 1, R813 += 1 };
  s0 -> s0 [0, 65535] { R870 += 1, R871 += 1 };
  s0 -> s5 [66, 66] { R871 += 1, R813 += 1, R781 += 1, R739 += 1, R740 += 1 };
  s0 -> s6 [66, 66] { R871 += 1, R813 += 1, R781 += 1, R739 += 1, R740 += 1 };
  s0 -> s7 [66, 66] { R871 += 1, R813 += 1, R781 += 1, R738 += 1, R739 += 1 };
  s0 -> s8 [66, 66] { R871 += 1, R813 += 1, R781 += 1, R738 += 1, R739 += 1 };
  s0 -> s1 [67, 65535] { R871 += 1, R813 += 1, R781 += 1, R738 += 1, R739 += 1 };
  s0 -> s2 [67, 65535] { R871 += 1, R813 += 1, R781 += 1, R739 += 1, R740 += 1 };
  s1 -> s1 [0, 65] { R871 += 1, R813 += 1, R781 += 1, R738 += 1, R739 += 1 };
  s1 -> s2 [0, 65] { R871 += 1, R813 += 1, R781 += 1, R739 += 1, R740 += 1 };
  s1 -> s5 [66, 66] { R871 += 1, R813 += 1, R781 += 1, R739 += 1, R740 += 1 };
  s1 -> s6 [66, 66] { R871 += 1, R813 += 1, R781 += 1, R739 += 1, R740 += 1 };
  s1 -> s7 [66, 66] { R871 += 1, R813 += 1, R781 += 1, R738 += 1, R739 += 1 };
  s1 -> s8 [66, 66] { R871 += 1, R813 += 1, R781 += 1, R738 += 1, R739 += 1 };
  s1 -> s1 [67, 65535] { R871 += 1, R813 += 1, R781 += 1, R738 += 1, R739 += 1 };
  s1 -> s2 [67, 65535] { R871 += 1, R813 += 1, R781 += 1, R739 += 1, R740 += 1 };
  s2 -> s13 [0, 65] { R871 += 1, R813 += 1, R781 += 1 };
  s2 -> s2 [0, 65] { R871 += 1, R813 += 1, R781 += 1, R739 += 1, R740 += 1 };
  s2 -> s9 [66, 66] { R871 += 1, R813 += 1, R781 += 1 };
  s2 -> s5 [66, 66] { R871 += 1, R813 += 1, R781 += 1, R739 += 1, R740 += 1 };
  s2 -> s6 [66, 66] { R871 += 1, R813 += 1, R781 += 1, R739 += 1, R740 += 1 };
  s2 -> s14 [66, 66] { R871 += 1, R813 += 1, R781 += 1 };
  s2 -> s13 [67, 65535] { R871 += 1, R813 += 1, R781 += 1 };
  s2 -> s2 [67, 65535] { R871 += 1, R813 += 1, R781 += 1, R739 += 1, R740 += 1 };
  s3 -> s1 [0, 65] { R871 += 1, R813 += 1, R781 += 1, R738 += 1, R739 += 1 };
  s3 -> s2 [0, 65] { R871 += 1, R813 += 1, R781 += 1, R739 += 1, R740 += 1 };
  s3 -> s3 [0, 65535] { R871 += 1, R813 += 1, R780 += 1, R781 += 1 };
  s3 -> s5 [66, 66] { R871 += 1, R813 += 1, R781 += 1, R739 += 1, R740 += 1 };
  s3 -> s6 [66, 66] { R871 += 1, R813 += 1, R781 += 1, R739 += 1, R740 += 1 };
  s3 -> s7 [66, 66] { R871 += 1, R813 += 1, R781 += 1, R738 += 1, R739 += 1 };
  s3 -> s8 [66, 66] { R871 += 1, R813 += 1, R781 += 1, R738 += 1, R739 += 1 };
  s3 -> s1 [67, 65535] { R871 += 1, R813 += 1, R781 += 1, R738 += 1, R739 += 1 };
  s3 -> s2 [67, 65535] { R871 += 1, R813 += 1, R781 += 1, R739 += 1, R740 += 1 };
  s4 -> s1 [0, 65] { R871 += 1, R813 += 1, R781 += 1, R738 += 1, R739 += 1 };
  s4 -> s2 [0, 65] { R871 += 1, R813 += 1, R781 += 1, R739 += 1, R740 += 1 };
  s4 -> s3 [0, 65535] { R871 += 1, R813 += 1, R780 += 1, R781 += 1 };
  s4 -> s4 [0, 65535] { R871 += 1, R812 += 1, R813 += 1 };
  s4 -> s5 [66, 66] { R871 += 1, R813 += 1, R781 += 1, R739 += 1, R740 += 1 };
  s4 -> s6 [66, 66] { R871 += 1, R813 += 1, R781 += 1, R739 += 1, R740 += 1 };
  s4 -> s7 [66, 66] { R871 += 1, R813 += 1, R781 += 1, R738 += 1, R739 += 1 };
  s4 -> s8 [66, 66] { R871 += 1, R813 += 1, R781 += 1, R738 += 1, R739 += 1 };
  s4 -> s1 [67, 65535] { R871 += 1, R813 += 1, R781 += 1, R738 += 1, R739 += 1 };
  s4 -> s2 [67, 65535] { R871 += 1, R813 += 1, R781 += 1, R739 += 1, R740 += 1 };
  s5 -> s9 [0, 65535] { R871 += 1, R813 += 1, R781 += 1 };
  s5 -> s5 [0, 65535] { R871 += 1, R813 += 1, R781 += 1, R739 += 1, R740 += 1 };
  s7 -> s5 [0, 65535] { R871 += 1, R813 += 1, R781 += 1, R739 += 1, R740 += 1 };
  s7 -> s7 [0, 65535] { R871 += 1, R813 += 1, R781 += 1, R738 += 1, R739 += 1 };
  s9 -> s9 [0, 65535] { R871 += 1, R813 += 1, R781 += 1 };
  s9 -> s10 [0, 65535] { R871 += 1 };
  s9 -> s11 [0, 65535];
  s9 -> s12 [0, 65535] { R871 += 1, R813 += 1 };
  s10 -> s10 [0, 65535] { R871 += 1 };
  s10 -> s11 [0, 65535];
  s11 -> s11 [0, 65535];
  s12 -> s10 [0, 65535] { R871 += 1 };
  s12 -> s11 [0, 65535];
  s12 -> s12 [0, 65535] { R871 += 1, R813 += 1 };
  s13 -> s13 [0, 65] { R871 += 1, R813 += 1, R781 += 1 };
  s13 -> s10 [0, 65535] { R871 += 1 };
  s13 -> s11 [0, 65535];
  s13 -> s13 [0, 65535] { R871 += 1, R813 += 1 };
  s13 -> s9 [66, 66] { R871 += 1, R813 += 1, R781 += 1 };
  s13 -> s14 [66, 66] { R871 += 1, R813 += 1, R781 += 1 };
  s13 -> s13 [67, 65535] { R871 += 1, R813 += 1, R781 += 1 };
  s14 -> s10 [0, 65535] { R871 += 1 };
  s14 -> s11 [0, 65535];
  s14 -> s14 [0, 65535] { R871 += 1, R813 += 1 };
  accepting s12, s13, s9, s14, s10, s11;
};
};
synchronised {  // Automata constraining P37
automaton P37_0 {
  init s0;
  s0 -> s1 [9, 9];
  accepting s1;
};
};
synchronised {  // Automata constraining P38
automaton P38_0 {
  init s0;
  s0 -> s1 [10, 10];
  accepting s1;
};
};
synchronised {  // Automata constraining P36
automaton P36_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
constraint R2 = R813 && R3 - R871 = 1 && R22 - R813 = -1 && R23 = R813 && R24 - R813 = -1 && R25 = R813 && R26 = 0 && R27 = 1 && R28 = 0 && R29 = 1 && R30 = R871 && R31 - R871 = 1 && R32 = R871 && R33 - R871 = 1 && R34 = 0 && R35 = 1 && R36 = 0 && R37 = 1 && R42 + R57 + R56 + -1*R469 + -1*R467 - R47 = 0 && R46 + R468 + R466 = 0 && R772 = 0 && R773 = 0 && R778 = 0 && R779 = 0 && R780 = 0 && R781 = 0 && R782 = 0 && R783 = R813 && R784 = 0 && R785 = R813 && R786 = 0 && R787 = R813 && R788 = 0 && R789 = R813 && R790 = 0 && R791 = R813 && R792 = 0 && R793 = R813 && R794 = 0 && R795 = R813 && R796 = 0 && R797 = R813 && R798 = 0 && R799 = R813 && R800 = 0 && R801 = R813 && R802 = 0 && R803 = R813 && R804 = 0 && R805 = R813 && R806 = 0 && R807 = R813 && R808 = 0 && R809 = R813 && R810 = 0 && R811 = R813 && R812 = 0 && R814 = 0 && R815 = R871 && R816 = 0 && R817 = R871 && R818 = 0 && R819 = R871 && R820 = 0 && R821 = R871 && R822 = 0 && R823 = R871 && R824 = 0 && R825 = R871 && R826 = 0 && R827 = R871 && R828 = 0 && R829 = R871 && R830 = 0 && R831 = R871 && R832 = 0 && R833 = R871 && R834 = 0 && R835 = R871 && R836 = 0 && R837 = R871 && R838 = 0 && R839 = R871 && R840 = 0 && R841 = R871 && R842 = 0 && R843 = R871 && R844 = 0 && R845 = R871 && R846 = 0 && R847 = R871 && R848 = 0 && R849 = R871 && R850 = 0 && R851 = R871 && R852 = 0 && R853 = R871 && R854 = 0 && R855 = R871 && R856 = 0 && R857 = R871 && R858 = 0 && R859 = R871 && R860 = 0 && R861 = R871 && R862 = 0 && R863 = R871 && R864 = 0 && R865 = R871 && R866 = 0 && R867 = R871 && R868 = 0 && R869 = R871 && R870 = 0 && -1 < R1 && R11 < 1 && R14 < 1 && R17 < 1 && R44 + R59 + R58 < 1 && -1*R469 + -1*R467 - R47 < 1 && 0 < R813 && -1 < R871 && (R1 != 0 || R19 = 0 || (R744 = 0 && R745 = 0)) && (R1 != 0 || R19 = 0 || (R746 = 0 && R747 = 0)) && (R1 != 0 || R19 = 0 || (R748 = 0 && R749 = 0)) && (R1 != 0 || R19 = 0 || (R750 = 0 && R751 = 0)) && (R1 != 0 || R19 = 0 || (R752 = 0 && R753 = 0)) && (R1 != 0 || R19 = 0 || (R754 = 0 && R755 = 0)) && (R1 != 0 || R19 = 0 || (R756 = 0 && R757 = 0)) && (R47 + R469 + R467 != 0 || R52 + R743 + R740 = 0 || (R50 + R741 + R738 = 0 && R51 + R742 + R739 = 0)) && (R50 + R741 + R738 != 0 || R47 + R469 + R467 + -1*R742 + -1*R739 - R51 = 0 || R47 + R469 + R467 < 1) && (R744 != 0 || R1 = R745 || R1 < 1) && (R746 != 0 || R1 = R747 || R1 < 1) && (R748 != 0 || R1 = R749 || R1 < 1) && (R750 != 0 || R1 = R751 || R1 < 1) && (R752 != 0 || R1 = R753 || R1 < 1) && (R754 != 0 || R1 = R755 || R1 < 1) && (R756 != 0 || R1 = R757 || R1 < 1) && (R20 = 0 || (R770 = 0 && R771 = 0)) && (R20 = 0 || (R774 = 0 && R775 = 0)) && (R20 = 0 || (R776 = 0 && R777 = 0)) && (R21 = 0 || (R758 = 0 && R759 = 0)) && (R21 = 0 || (R760 = 0 && R761 = 0)) && (R21 = 0 || (R762 = 0 && R763 = 0)) && (R21 = 0 || (R764 = 0 && R765 = 0)) && (R21 = 0 || (R766 = 0 && R767 = 0)) && (R21 = 0 || (R768 = 0 && R769 = 0)) && (R50 + R741 + R738 = 0 || R47 + R469 + R467 < 1) && (R744 = 0 || R1 < 1) && (R746 = 0 || R1 < 1) && (R748 = 0 || R1 < 1) && (R750 = 0 || R1 < 1) && (R752 = 0 || R1 < 1) && (R754 = 0 || R1 < 1) && (R756 = 0 || R1 < 1);
// End of Parikh automata intersection problem
