// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R1000, R1001, R1002, R1003, R1004, R1005, R1006, R1007, R1008, R1009, R11, R14, R17, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R31, R32, R33, R34, R35, R36, R37, R4, R42, R44, R46, R47, R5, R50, R51, R52, R56, R57, R58, R59, R6, R7, R872, R873, R874, R875, R876, R877, R878, R879, R880, R881, R882, R883, R884, R885, R886, R887, R888, R889, R890, R891, R892, R893, R894, R895, R896, R897, R898, R899, R900, R901, R902, R903, R904, R905, R906, R907, R908, R909, R910, R911, R912, R913, R914, R915, R916, R917, R918, R919, R920, R921, R922, R923, R924, R925, R926, R927, R928, R929, R930, R931, R932, R933, R934, R935, R936, R937, R938, R939, R940, R941, R942, R943, R944, R945, R946, R947, R948, R949, R950, R951, R952, R953, R954, R955, R956, R957, R958, R959, R960, R961, R962, R963, R964, R965, R966, R967, R968, R969, R970, R971, R972, R973, R974, R975, R976, R977, R978, R979, R980, R981, R982, R983, R984, R985, R986, R987, R988, R989, R990, R991, R992, R993, R994, R995, R996, R997, R998, R999;
synchronised {  // Automata constraining P9
automaton P9_0 {
  init s0;
  s0 -> s1 [98, 98];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R17 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s0 [0, 65535] { R30 += 1, R31 += 1 };
  s0 -> s1 [13, 13] { R31 += 1 };
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value2_4 {
  init s0;
  s0 -> s0 [0, 65535] { R32 += 1, R33 += 1 };
  s0 -> s1 [0, 65535] { R33 += 1, R6 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R33 += 1, R6 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 8] { R35 += 1 };
  s0 -> s0 [0, 65535] { R34 += 1, R35 += 1 };
  s0 -> s2 [9, 13] { R35 += 1 };
  s0 -> s1 [14, 31] { R35 += 1 };
  s0 -> s2 [32, 32] { R35 += 1 };
  s0 -> s1 [33, 65535] { R35 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R35 += 1 };
  s2 -> s1 [0, 65535] { R35 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 65535] { R37 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R36 += 1, R37 += 1 };
  s1 -> s1 [0, 65535] { R37 += 1, R7 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 64] { R953 += 1 };
  s0 -> s0 [0, 65535] { R952 += 1, R953 += 1 };
  s0 -> s2 [66, 66] { R953 += 1 };
  s0 -> s1 [67, 65535] { R953 += 1 };
  s1 -> s1 [0, 64] { R953 += 1 };
  s1 -> s2 [66, 66] { R953 += 1 };
  s1 -> s1 [67, 65535] { R953 += 1 };
  s2 -> s2 [0, 64] { R953 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [66, 65535] { R953 += 1 };
  accepting s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R954 += 1, R955 += 1 };
  s0 -> s1 [0, 65535] { R955 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R955 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 65] { R957 += 1 };
  s0 -> s2 [0, 65535] { R957 += 1, R14 += 1 };
  s0 -> s0 [0, 65535] { R956 += 1, R957 += 1 };
  s0 -> s3 [66, 66] { R957 += 1 };
  s0 -> s1 [67, 65535] { R957 += 1 };
  s1 -> s1 [0, 65] { R957 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [66, 66] { R957 += 1 };
  s1 -> s1 [67, 65535] { R957 += 1 };
  s2 -> s1 [0, 65] { R957 += 1 };
  s2 -> s2 [0, 65535] { R957 += 1, R14 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [66, 66] { R957 += 1 };
  s2 -> s1 [67, 65535] { R957 += 1 };
  s3 -> s3 [0, 65535] { R957 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 8] { R959 += 1, R23 += 1 };
  s0 -> s0 [0, 65535] { R958 += 1, R959 += 1 };
  s0 -> s2 [0, 65535] { R959 += 1, R22 += 1, R23 += 1 };
  s0 -> s3 [9, 13] { R959 += 1, R23 += 1 };
  s0 -> s1 [14, 31] { R959 += 1, R23 += 1 };
  s0 -> s3 [32, 32] { R959 += 1, R23 += 1 };
  s0 -> s1 [33, 65535] { R959 += 1, R23 += 1 };
  s1 -> s5 [0, 65535] { R959 += 1 };
  s1 -> s1 [0, 65535] { R959 += 1, R23 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R959 += 1, R23 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R959 += 1, R22 += 1, R23 += 1 };
  s2 -> s3 [9, 13] { R959 += 1, R23 += 1 };
  s2 -> s1 [14, 31] { R959 += 1, R23 += 1 };
  s2 -> s3 [32, 32] { R959 += 1, R23 += 1 };
  s2 -> s1 [33, 65535] { R959 += 1, R23 += 1 };
  s3 -> s1 [0, 65535] { R959 += 1, R23 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R959 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 65535] { R961 += 1, R24 += 1, R25 += 1 };
  s0 -> s2 [0, 65535] { R961 += 1, R25 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R960 += 1, R961 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R961 += 1, R24 += 1, R25 += 1 };
  s1 -> s2 [0, 65535] { R961 += 1, R25 += 1, R4 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R961 += 1, R25 += 1, R4 += 1 };
  s2 -> s4 [0, 65535] { R961 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R961 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 8] { R963 += 1, R27 += 1 };
  s0 -> s2 [0, 65535] { R963 += 1, R26 += 1, R27 += 1 };
  s0 -> s0 [0, 65535] { R962 += 1, R963 += 1 };
  s0 -> s3 [9, 13] { R963 += 1, R27 += 1 };
  s0 -> s1 [14, 31] { R963 += 1, R27 += 1 };
  s0 -> s3 [32, 32] { R963 += 1, R27 += 1 };
  s0 -> s1 [33, 65535] { R963 += 1, R27 += 1 };
  s1 -> s1 [0, 65535] { R963 += 1, R27 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R963 += 1 };
  s2 -> s1 [0, 8] { R963 += 1, R27 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R963 += 1, R26 += 1, R27 += 1 };
  s2 -> s3 [9, 13] { R963 += 1, R27 += 1 };
  s2 -> s1 [14, 31] { R963 += 1, R27 += 1 };
  s2 -> s3 [32, 32] { R963 += 1, R27 += 1 };
  s2 -> s1 [33, 65535] { R963 += 1, R27 += 1 };
  s3 -> s1 [0, 65535] { R963 += 1, R27 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R963 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 65535] { R965 += 1, R29 += 1, R5 += 1 };
  s0 -> s2 [0, 65535] { R965 += 1, R28 += 1, R29 += 1 };
  s0 -> s0 [0, 65535] { R964 += 1, R965 += 1 };
  s1 -> s4 [0, 65535] { R965 += 1 };
  s1 -> s1 [0, 65535] { R965 += 1, R29 += 1, R5 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R965 += 1, R29 += 1, R5 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R965 += 1, R28 += 1, R29 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R965 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 65535] { R967 += 1, R897 += 1, R21 += 1 };
  s0 -> s0 [0, 65535] { R966 += 1, R967 += 1 };
  s0 -> s2 [0, 65535] { R967 += 1, R896 += 1, R897 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R967 += 1, R897 += 1, R21 += 1 };
  s1 -> s4 [0, 65535] { R967 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R967 += 1, R897 += 1, R21 += 1 };
  s2 -> s2 [0, 65535] { R967 += 1, R896 += 1, R897 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R967 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 65] { R969 += 1, R899 += 1 };
  s0 -> s0 [0, 65535] { R968 += 1, R969 += 1 };
  s0 -> s2 [0, 65535] { R969 += 1, R898 += 1, R899 += 1 };
  s0 -> s3 [66, 66] { R969 += 1, R899 += 1 };
  s0 -> s4 [66, 66] { R969 += 1, R899 += 1 };
  s0 -> s1 [71, 65535] { R969 += 1, R899 += 1 };
  s1 -> s1 [0, 65] { R969 += 1, R899 += 1 };
  s1 -> s1 [0, 65535] { R969 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [66, 66] { R969 += 1, R899 += 1 };
  s1 -> s4 [66, 66] { R969 += 1, R899 += 1 };
  s1 -> s1 [71, 65535] { R969 += 1, R899 += 1 };
  s2 -> s1 [0, 65] { R969 += 1, R899 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R969 += 1, R898 += 1, R899 += 1 };
  s2 -> s3 [66, 66] { R969 += 1, R899 += 1 };
  s2 -> s4 [66, 66] { R969 += 1, R899 += 1 };
  s2 -> s1 [71, 65535] { R969 += 1, R899 += 1 };
  s3 -> s3 [0, 66] { R969 += 1, R899 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R969 += 1 };
  s3 -> s3 [71, 65535] { R969 += 1, R899 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R969 += 1 };
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 65] { R971 += 1, R901 += 1, R42 += 1 };
  s0 -> s0 [0, 65535] { R970 += 1, R971 += 1 };
  s0 -> s2 [0, 65535] { R971 += 1, R900 += 1, R901 += 1 };
  s0 -> s3 [66, 66] { R971 += 1, R901 += 1, R42 += 1 };
  s0 -> s4 [66, 66] { R971 += 1, R901 += 1, R42 += 1 };
  s0 -> s1 [67, 65535] { R971 += 1, R901 += 1, R42 += 1 };
  s1 -> s1 [0, 65] { R971 += 1, R901 += 1, R42 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R971 += 1 };
  s1 -> s3 [66, 66] { R971 += 1, R901 += 1, R42 += 1 };
  s1 -> s4 [66, 66] { R971 += 1, R901 += 1, R42 += 1 };
  s1 -> s1 [67, 65535] { R971 += 1, R901 += 1, R42 += 1 };
  s2 -> s1 [0, 65] { R971 += 1, R901 += 1, R42 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R971 += 1, R900 += 1, R901 += 1 };
  s2 -> s3 [66, 66] { R971 += 1, R901 += 1, R42 += 1 };
  s2 -> s4 [66, 66] { R971 += 1, R901 += 1, R42 += 1 };
  s2 -> s1 [67, 65535] { R971 += 1, R901 += 1, R42 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R971 += 1, R901 += 1, R42 += 1 };
  s3 -> s6 [0, 65535] { R971 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R971 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R971 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 65] { R973 += 1, R903 += 1, R44 += 1 };
  s0 -> s0 [0, 65535] { R972 += 1, R973 += 1 };
  s0 -> s2 [0, 65535] { R973 += 1, R902 += 1, R903 += 1 };
  s0 -> s3 [66, 66] { R973 += 1, R903 += 1, R44 += 1 };
  s0 -> s4 [66, 66] { R973 += 1, R903 += 1, R44 += 1 };
  s0 -> s1 [67, 65535] { R973 += 1, R903 += 1, R44 += 1 };
  s1 -> s1 [0, 65] { R973 += 1, R903 += 1, R44 += 1 };
  s1 -> s1 [0, 65535] { R973 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [66, 66] { R973 += 1, R903 += 1, R44 += 1 };
  s1 -> s4 [66, 66] { R973 += 1, R903 += 1, R44 += 1 };
  s1 -> s1 [67, 65535] { R973 += 1, R903 += 1, R44 += 1 };
  s2 -> s1 [0, 65] { R973 += 1, R903 += 1, R44 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R973 += 1, R902 += 1, R903 += 1 };
  s2 -> s3 [66, 66] { R973 += 1, R903 += 1, R44 += 1 };
  s2 -> s4 [66, 66] { R973 += 1, R903 += 1, R44 += 1 };
  s2 -> s1 [67, 65535] { R973 += 1, R903 += 1, R44 += 1 };
  s3 -> s3 [0, 65535] { R973 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R973 += 1, R903 += 1, R44 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R973 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R973 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65] { R975 += 1, R905 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R974 += 1, R975 += 1 };
  s0 -> s2 [0, 65535] { R975 += 1, R904 += 1, R905 += 1 };
  s0 -> s3 [66, 66] { R975 += 1, R905 += 1, R46 += 1, R47 += 1 };
  s0 -> s4 [66, 66] { R975 += 1, R905 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [67, 65535] { R975 += 1, R905 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65] { R975 += 1, R905 += 1, R46 += 1, R47 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R975 += 1 };
  s1 -> s3 [66, 66] { R975 += 1, R905 += 1, R46 += 1, R47 += 1 };
  s1 -> s4 [66, 66] { R975 += 1, R905 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [67, 65535] { R975 += 1, R905 += 1, R46 += 1, R47 += 1 };
  s2 -> s1 [0, 65] { R975 += 1, R905 += 1, R46 += 1, R47 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R975 += 1, R904 += 1, R905 += 1 };
  s2 -> s3 [66, 66] { R975 += 1, R905 += 1, R46 += 1, R47 += 1 };
  s2 -> s4 [66, 66] { R975 += 1, R905 += 1, R46 += 1, R47 += 1 };
  s2 -> s1 [67, 65535] { R975 += 1, R905 += 1, R46 += 1, R47 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R975 += 1, R905 += 1, R46 += 1, R47 += 1 };
  s3 -> s6 [0, 65535] { R975 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R975 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R975 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 65] { R977 += 1, R907 += 1, R50 += 1, R51 += 1 };
  s0 -> s0 [0, 65535] { R976 += 1, R977 += 1 };
  s0 -> s2 [0, 65535] { R977 += 1, R906 += 1, R907 += 1 };
  s0 -> s3 [66, 66] { R977 += 1, R907 += 1, R50 += 1, R51 += 1 };
  s0 -> s4 [66, 66] { R977 += 1, R907 += 1, R50 += 1, R51 += 1 };
  s0 -> s1 [67, 65535] { R977 += 1, R907 += 1, R50 += 1, R51 += 1 };
  s1 -> s1 [0, 65] { R977 += 1, R907 += 1, R50 += 1, R51 += 1 };
  s1 -> s1 [0, 65535] { R977 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [66, 66] { R977 += 1, R907 += 1, R50 += 1, R51 += 1 };
  s1 -> s4 [66, 66] { R977 += 1, R907 += 1, R50 += 1, R51 += 1 };
  s1 -> s1 [67, 65535] { R977 += 1, R907 += 1, R50 += 1, R51 += 1 };
  s2 -> s1 [0, 65] { R977 += 1, R907 += 1, R50 += 1, R51 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R977 += 1, R906 += 1, R907 += 1 };
  s2 -> s3 [66, 66] { R977 += 1, R907 += 1, R50 += 1, R51 += 1 };
  s2 -> s4 [66, 66] { R977 += 1, R907 += 1, R50 += 1, R51 += 1 };
  s2 -> s1 [67, 65535] { R977 += 1, R907 += 1, R50 += 1, R51 += 1 };
  s3 -> s3 [0, 65535] { R977 += 1, R907 += 1, R50 += 1, R51 += 1 };
  s3 -> s6 [0, 65535] { R977 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R977 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R977 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 65] { R979 += 1, R921 += 1 };
  s0 -> s0 [0, 65535] { R978 += 1, R979 += 1 };
  s0 -> s2 [0, 65535] { R979 += 1, R920 += 1, R921 += 1 };
  s0 -> s3 [66, 66] { R979 += 1, R921 += 1 };
  s0 -> s1 [67, 65535] { R979 += 1, R921 += 1 };
  s1 -> s1 [0, 65] { R979 += 1, R921 += 1 };
  s1 -> s3 [66, 66] { R979 += 1, R921 += 1 };
  s1 -> s1 [67, 65535] { R979 += 1, R921 += 1 };
  s2 -> s1 [0, 65] { R979 += 1, R921 += 1 };
  s2 -> s2 [0, 65535] { R979 += 1, R920 += 1, R921 += 1 };
  s2 -> s3 [66, 66] { R979 += 1, R921 += 1 };
  s2 -> s1 [67, 65535] { R979 += 1, R921 += 1 };
  s3 -> s3 [0, 65535] { R979 += 1, R921 += 1 };
  s3 -> s4 [0, 65535] { R979 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R979 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
automaton value2_21 {
  init s0;
  s0 -> s0 [0, 65535] { R980 += 1, R981 += 1 };
  s0 -> s1 [0, 65535] { R981 += 1, R923 += 1, R1 += 1 };
  s0 -> s2 [0, 65535] { R981 += 1, R922 += 1, R923 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R981 += 1, R923 += 1, R1 += 1 };
  s1 -> s4 [0, 65535] { R981 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R981 += 1, R923 += 1, R1 += 1 };
  s2 -> s2 [0, 65535] { R981 += 1, R922 += 1, R923 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R981 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 65] { R983 += 1, R925 += 1 };
  s0 -> s2 [0, 65535] { R983 += 1, R924 += 1, R925 += 1 };
  s0 -> s3 [0, 65535] { R983 += 1, R925 += 1, R11 += 1 };
  s0 -> s0 [0, 65535] { R982 += 1, R983 += 1 };
  s0 -> s4 [66, 66] { R983 += 1, R925 += 1 };
  s0 -> s1 [67, 65535] { R983 += 1, R925 += 1 };
  s1 -> s1 [0, 65] { R983 += 1, R925 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R983 += 1 };
  s1 -> s4 [66, 66] { R983 += 1, R925 += 1 };
  s1 -> s1 [67, 65535] { R983 += 1, R925 += 1 };
  s2 -> s1 [0, 65] { R983 += 1, R925 += 1 };
  s2 -> s2 [0, 65535] { R983 += 1, R924 += 1, R925 += 1 };
  s2 -> s3 [0, 65535] { R983 += 1, R925 += 1, R11 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [66, 66] { R983 += 1, R925 += 1 };
  s2 -> s1 [67, 65535] { R983 += 1, R925 += 1 };
  s3 -> s1 [0, 65] { R983 += 1, R925 += 1 };
  s3 -> s3 [0, 65535] { R983 += 1, R925 += 1, R11 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R983 += 1 };
  s3 -> s4 [66, 66] { R983 += 1, R925 += 1 };
  s3 -> s1 [67, 65535] { R983 += 1, R925 += 1 };
  s4 -> s4 [0, 65535] { R983 += 1, R925 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R983 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65] { R985 += 1, R927 += 1, R883 += 1 };
  s0 -> s2 [0, 65535] { R985 += 1, R927 += 1, R882 += 1, R883 += 1 };
  s0 -> s3 [0, 65535] { R985 += 1, R926 += 1, R927 += 1 };
  s0 -> s0 [0, 65535] { R984 += 1, R985 += 1 };
  s0 -> s1 [67, 65535] { R985 += 1, R927 += 1, R883 += 1 };
  s1 -> s1 [0, 65] { R985 += 1, R927 += 1, R883 += 1 };
  s1 -> s1 [0, 65535] { R985 += 1, R927 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R985 += 1 };
  s1 -> s1 [67, 65535] { R985 += 1, R927 += 1, R883 += 1 };
  s2 -> s1 [0, 65] { R985 += 1, R927 += 1, R883 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R985 += 1 };
  s2 -> s2 [0, 65535] { R985 += 1, R927 += 1, R882 += 1, R883 += 1 };
  s2 -> s1 [67, 65535] { R985 += 1, R927 += 1, R883 += 1 };
  s3 -> s1 [0, 65] { R985 += 1, R927 += 1, R883 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R985 += 1, R927 += 1, R882 += 1, R883 += 1 };
  s3 -> s3 [0, 65535] { R985 += 1, R926 += 1, R927 += 1 };
  s3 -> s1 [67, 65535] { R985 += 1, R927 += 1, R883 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R985 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 65535] { R987 += 1, R929 += 1, R884 += 1, R885 += 1 };
  s0 -> s2 [0, 65535] { R987 += 1, R929 += 1, R885 += 1, R19 += 1 };
  s0 -> s0 [0, 65535] { R986 += 1, R987 += 1 };
  s0 -> s3 [0, 65535] { R987 += 1, R928 += 1, R929 += 1 };
  s1 -> s1 [0, 65535] { R987 += 1, R929 += 1, R884 += 1, R885 += 1 };
  s1 -> s2 [0, 65535] { R987 += 1, R929 += 1, R885 += 1, R19 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R987 += 1 };
  s2 -> s5 [0, 65535] { R987 += 1, R929 += 1 };
  s2 -> s2 [0, 65535] { R987 += 1, R929 += 1, R885 += 1, R19 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s6 [0, 65535] { R987 += 1 };
  s3 -> s1 [0, 65535] { R987 += 1, R929 += 1, R884 += 1, R885 += 1 };
  s3 -> s2 [0, 65535] { R987 += 1, R929 += 1, R885 += 1, R19 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R987 += 1, R928 += 1, R929 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R987 += 1, R929 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s6 [0, 65535] { R987 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R987 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 66] { R989 += 1, R931 += 1, R887 += 1 };
  s0 -> s2 [0, 65535] { R989 += 1, R930 += 1, R931 += 1 };
  s0 -> s3 [0, 65535] { R989 += 1, R931 += 1, R886 += 1, R887 += 1 };
  s0 -> s0 [0, 65535] { R988 += 1, R989 += 1 };
  s0 -> s1 [70, 65535] { R989 += 1, R931 += 1, R887 += 1 };
  s1 -> s1 [0, 66] { R989 += 1, R931 += 1, R887 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R989 += 1, R931 += 1 };
  s1 -> s5 [0, 65535] { R989 += 1 };
  s1 -> s1 [70, 65535] { R989 += 1, R931 += 1, R887 += 1 };
  s2 -> s1 [0, 66] { R989 += 1, R931 += 1, R887 += 1 };
  s2 -> s2 [0, 65535] { R989 += 1, R930 += 1, R931 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R989 += 1, R931 += 1, R886 += 1, R887 += 1 };
  s2 -> s1 [70, 65535] { R989 += 1, R931 += 1, R887 += 1 };
  s3 -> s1 [0, 66] { R989 += 1, R931 += 1, R887 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R989 += 1, R931 += 1, R886 += 1, R887 += 1 };
  s3 -> s5 [0, 65535] { R989 += 1 };
  s3 -> s1 [70, 65535] { R989 += 1, R931 += 1, R887 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R989 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R991 += 1, R932 += 1, R933 += 1 };
  s0 -> s2 [0, 65535] { R991 += 1, R933 += 1, R889 += 1, R57 += 1 };
  s0 -> s3 [0, 65535] { R991 += 1, R933 += 1, R888 += 1, R889 += 1 };
  s0 -> s0 [0, 65535] { R990 += 1, R991 += 1 };
  s1 -> s1 [0, 65535] { R991 += 1, R932 += 1, R933 += 1 };
  s1 -> s2 [0, 65535] { R991 += 1, R933 += 1, R889 += 1, R57 += 1 };
  s1 -> s3 [0, 65535] { R991 += 1, R933 += 1, R888 += 1, R889 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s4 [0, 65535] { R991 += 1 };
  s2 -> s6 [0, 65535] { R991 += 1, R933 += 1 };
  s2 -> s2 [0, 65535] { R991 += 1, R933 += 1, R889 += 1, R57 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s4 [0, 65535] { R991 += 1 };
  s3 -> s2 [0, 65535] { R991 += 1, R933 += 1, R889 += 1, R57 += 1 };
  s3 -> s3 [0, 65535] { R991 += 1, R933 += 1, R888 += 1, R889 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R991 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R991 += 1 };
  s6 -> s6 [0, 65535] { R991 += 1, R933 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 69] { R993 += 1, R935 += 1, R891 += 1 };
  s0 -> s2 [0, 65535] { R993 += 1, R934 += 1, R935 += 1 };
  s0 -> s3 [0, 65535] { R993 += 1, R935 += 1, R890 += 1, R891 += 1 };
  s0 -> s0 [0, 65535] { R992 += 1, R993 += 1 };
  s0 -> s4 [0, 65535] { R993 += 1, R935 += 1, R891 += 1, R59 += 1 };
  s0 -> s1 [71, 65535] { R993 += 1, R935 += 1, R891 += 1 };
  s1 -> s1 [0, 69] { R993 += 1, R935 += 1, R891 += 1 };
  s1 -> s1 [0, 65535] { R993 += 1, R935 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R993 += 1 };
  s1 -> s1 [71, 65535] { R993 += 1, R935 += 1, R891 += 1 };
  s2 -> s1 [0, 69] { R993 += 1, R935 += 1, R891 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R993 += 1, R934 += 1, R935 += 1 };
  s2 -> s3 [0, 65535] { R993 += 1, R935 += 1, R890 += 1, R891 += 1 };
  s2 -> s4 [0, 65535] { R993 += 1, R935 += 1, R891 += 1, R59 += 1 };
  s2 -> s1 [71, 65535] { R993 += 1, R935 += 1, R891 += 1 };
  s3 -> s1 [0, 69] { R993 += 1, R935 += 1, R891 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R993 += 1, R935 += 1, R890 += 1, R891 += 1 };
  s3 -> s4 [0, 65535] { R993 += 1, R935 += 1, R891 += 1, R59 += 1 };
  s3 -> s6 [0, 65535] { R993 += 1 };
  s3 -> s1 [71, 65535] { R993 += 1, R935 += 1, R891 += 1 };
  s4 -> s1 [0, 69] { R993 += 1, R935 += 1, R891 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R993 += 1, R935 += 1, R891 += 1, R59 += 1 };
  s4 -> s6 [0, 65535] { R993 += 1 };
  s4 -> s7 [0, 65535] { R993 += 1, R935 += 1 };
  s4 -> s1 [71, 65535] { R993 += 1, R935 += 1, R891 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R993 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R993 += 1 };
  s7 -> s7 [0, 65535] { R993 += 1, R935 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 69] { R995 += 1, R937 += 1, R893 += 1, R875 += 1 };
  s0 -> s2 [0, 65535] { R995 += 1, R937 += 1, R892 += 1, R893 += 1 };
  s0 -> s0 [0, 65535] { R994 += 1, R995 += 1 };
  s0 -> s3 [0, 65535] { R995 += 1, R936 += 1, R937 += 1 };
  s0 -> s4 [70, 70] { R995 += 1, R937 += 1, R893 += 1, R875 += 1 };
  s0 -> s1 [71, 65535] { R995 += 1, R937 += 1, R893 += 1, R875 += 1 };
  s1 -> s1 [0, 69] { R995 += 1, R937 += 1, R893 += 1, R875 += 1 };
  s1 -> s4 [70, 70] { R995 += 1, R937 += 1, R893 += 1, R875 += 1 };
  s1 -> s1 [71, 65535] { R995 += 1, R937 += 1, R893 += 1, R875 += 1 };
  s2 -> s1 [0, 69] { R995 += 1, R937 += 1, R893 += 1, R875 += 1 };
  s2 -> s2 [0, 65535] { R995 += 1, R937 += 1, R892 += 1, R893 += 1 };
  s2 -> s4 [70, 70] { R995 += 1, R937 += 1, R893 += 1, R875 += 1 };
  s2 -> s1 [71, 65535] { R995 += 1, R937 += 1, R893 += 1, R875 += 1 };
  s3 -> s1 [0, 69] { R995 += 1, R937 += 1, R893 += 1, R875 += 1 };
  s3 -> s2 [0, 65535] { R995 += 1, R937 += 1, R892 += 1, R893 += 1 };
  s3 -> s3 [0, 65535] { R995 += 1, R936 += 1, R937 += 1 };
  s3 -> s4 [70, 70] { R995 += 1, R937 += 1, R893 += 1, R875 += 1 };
  s3 -> s1 [71, 65535] { R995 += 1, R937 += 1, R893 += 1, R875 += 1 };
  s4 -> s5 [0, 65535] { R995 += 1, R937 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R995 += 1 };
  s4 -> s4 [0, 65535] { R995 += 1, R937 += 1, R893 += 1, R875 += 1 };
  s4 -> s8 [0, 65535] { R995 += 1, R937 += 1, R893 += 1 };
  s5 -> s5 [0, 65535] { R995 += 1, R937 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R995 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R995 += 1 };
  s8 -> s5 [0, 65535] { R995 += 1, R937 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R995 += 1 };
  s8 -> s8 [0, 65535] { R995 += 1, R937 += 1, R893 += 1 };
  accepting s4, s8, s5, s6, s7;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 65535] { R997 += 1, R939 += 1, R895 += 1, R880 += 1, R881 += 1 };
  s0 -> s2 [0, 65535] { R997 += 1, R938 += 1, R939 += 1 };
  s0 -> s3 [0, 65535] { R997 += 1, R939 += 1, R894 += 1, R895 += 1 };
  s0 -> s4 [0, 65535] { R997 += 1, R939 += 1, R895 += 1, R879 += 1, R880 += 1 };
  s0 -> s0 [0, 65535] { R996 += 1, R997 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s8 [0, 65535] { R997 += 1, R939 += 1, R895 += 1 };
  s1 -> s1 [0, 65535] { R997 += 1, R939 += 1, R895 += 1, R880 += 1, R881 += 1 };
  s1 -> s6 [0, 65535] { R997 += 1 };
  s1 -> s7 [0, 65535] { R997 += 1, R939 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R997 += 1, R939 += 1, R895 += 1, R880 += 1, R881 += 1 };
  s2 -> s2 [0, 65535] { R997 += 1, R938 += 1, R939 += 1 };
  s2 -> s3 [0, 65535] { R997 += 1, R939 += 1, R894 += 1, R895 += 1 };
  s2 -> s4 [0, 65535] { R997 += 1, R939 += 1, R895 += 1, R879 += 1, R880 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [0, 65535] { R997 += 1, R939 += 1, R895 += 1, R880 += 1, R881 += 1 };
  s3 -> s6 [0, 65535] { R997 += 1 };
  s3 -> s3 [0, 65535] { R997 += 1, R939 += 1, R894 += 1, R895 += 1 };
  s3 -> s4 [0, 65535] { R997 += 1, R939 += 1, R895 += 1, R879 += 1, R880 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s1 [0, 65535] { R997 += 1, R939 += 1, R895 += 1, R880 += 1, R881 += 1 };
  s4 -> s6 [0, 65535] { R997 += 1 };
  s4 -> s4 [0, 65535] { R997 += 1, R939 += 1, R895 += 1, R879 += 1, R880 += 1 };
  s4 -> s7 [0, 65535] { R997 += 1, R939 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R997 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R997 += 1 };
  s7 -> s7 [0, 65535] { R997 += 1, R939 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s8 [0, 65535] { R997 += 1, R939 += 1, R895 += 1 };
  s8 -> s6 [0, 65535] { R997 += 1 };
  s8 -> s7 [0, 65535] { R997 += 1, R939 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R999 += 1, R940 += 1, R941 += 1 };
  s0 -> s2 [0, 65535] { R999 += 1, R941 += 1, R908 += 1, R909 += 1 };
  s0 -> s0 [0, 65535] { R998 += 1, R999 += 1 };
  s0 -> s3 [0, 65535] { R999 += 1, R941 += 1, R909 += 1, R20 += 1 };
  s1 -> s1 [0, 65535] { R999 += 1, R940 += 1, R941 += 1 };
  s1 -> s2 [0, 65535] { R999 += 1, R941 += 1, R908 += 1, R909 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R999 += 1, R941 += 1, R909 += 1, R20 += 1 };
  s2 -> s4 [0, 65535] { R999 += 1 };
  s2 -> s2 [0, 65535] { R999 += 1, R941 += 1, R908 += 1, R909 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R999 += 1, R941 += 1, R909 += 1, R20 += 1 };
  s3 -> s4 [0, 65535] { R999 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R999 += 1, R941 += 1, R909 += 1, R20 += 1 };
  s3 -> s6 [0, 65535] { R999 += 1, R941 += 1 };
  s4 -> s4 [0, 65535] { R999 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R999 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R999 += 1, R941 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 65] { R1001 += 1, R943 += 1, R911 += 1 };
  s0 -> s0 [0, 65535] { R1000 += 1, R1001 += 1 };
  s0 -> s2 [0, 65535] { R1001 += 1, R942 += 1, R943 += 1 };
  s0 -> s3 [0, 65535] { R1001 += 1, R943 += 1, R910 += 1, R911 += 1 };
  s0 -> s4 [66, 66] { R1001 += 1, R943 += 1, R911 += 1 };
  s0 -> s5 [66, 66] { R1001 += 1, R943 += 1, R911 += 1 };
  s0 -> s6 [70, 70] { R1001 += 1, R943 += 1, R911 += 1 };
  s0 -> s1 [71, 65535] { R1001 += 1, R943 += 1, R911 += 1 };
  s1 -> s1 [0, 65] { R1001 += 1, R943 += 1, R911 += 1 };
  s1 -> s4 [66, 66] { R1001 += 1, R943 += 1, R911 += 1 };
  s1 -> s5 [66, 66] { R1001 += 1, R943 += 1, R911 += 1 };
  s1 -> s6 [70, 70] { R1001 += 1, R943 += 1, R911 += 1 };
  s1 -> s1 [71, 65535] { R1001 += 1, R943 += 1, R911 += 1 };
  s2 -> s1 [0, 65] { R1001 += 1, R943 += 1, R911 += 1 };
  s2 -> s2 [0, 65535] { R1001 += 1, R942 += 1, R943 += 1 };
  s2 -> s3 [0, 65535] { R1001 += 1, R943 += 1, R910 += 1, R911 += 1 };
  s2 -> s4 [66, 66] { R1001 += 1, R943 += 1, R911 += 1 };
  s2 -> s5 [66, 66] { R1001 += 1, R943 += 1, R911 += 1 };
  s2 -> s6 [70, 70] { R1001 += 1, R943 += 1, R911 += 1 };
  s2 -> s1 [71, 65535] { R1001 += 1, R943 += 1, R911 += 1 };
  s3 -> s1 [0, 65] { R1001 += 1, R943 += 1, R911 += 1 };
  s3 -> s3 [0, 65535] { R1001 += 1, R943 += 1, R910 += 1, R911 += 1 };
  s3 -> s4 [66, 66] { R1001 += 1, R943 += 1, R911 += 1 };
  s3 -> s5 [66, 66] { R1001 += 1, R943 += 1, R911 += 1 };
  s3 -> s6 [70, 70] { R1001 += 1, R943 += 1, R911 += 1 };
  s3 -> s1 [71, 65535] { R1001 += 1, R943 += 1, R911 += 1 };
  s5 -> s5 [0, 66] { R1001 += 1, R943 += 1, R911 += 1 };
  s5 -> s9 [70, 70] { R1001 += 1, R943 += 1, R911 += 1 };
  s5 -> s5 [71, 65535] { R1001 += 1, R943 += 1, R911 += 1 };
  s6 -> s6 [0, 65] { R1001 += 1, R943 += 1, R911 += 1 };
  s6 -> s7 [0, 65535] { R1001 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R1001 += 1, R943 += 1 };
  s6 -> s9 [66, 66] { R1001 += 1, R943 += 1, R911 += 1 };
  s6 -> s10 [66, 66] { R1001 += 1, R943 += 1, R911 += 1 };
  s6 -> s6 [70, 65535] { R1001 += 1, R943 += 1, R911 += 1 };
  s7 -> s7 [0, 65535] { R1001 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  s9 -> s9 [0, 66] { R1001 += 1, R943 += 1, R911 += 1 };
  s9 -> s7 [0, 65535] { R1001 += 1 };
  s9 -> s9 [0, 65535] { R1001 += 1, R943 += 1 };
  s9 -> s8 [0, 65535];
  s9 -> s9 [70, 65535] { R1001 += 1, R943 += 1, R911 += 1 };
  s10 -> s7 [0, 65535] { R1001 += 1 };
  s10 -> s8 [0, 65535];
  s10 -> s10 [0, 65535] { R1001 += 1, R943 += 1 };
  accepting s8, s9, s6, s7, s10;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 65] { R1003 += 1, R945 += 1, R913 += 1, R56 += 1 };
  s0 -> s0 [0, 65535] { R1002 += 1, R1003 += 1 };
  s0 -> s2 [0, 65535] { R1003 += 1, R944 += 1, R945 += 1 };
  s0 -> s3 [0, 65535] { R1003 += 1, R945 += 1, R912 += 1, R913 += 1 };
  s0 -> s4 [66, 66] { R1003 += 1, R945 += 1, R913 += 1, R56 += 1 };
  s0 -> s5 [66, 66] { R1003 += 1, R945 += 1, R913 += 1, R56 += 1 };
  s0 -> s1 [67, 65535] { R1003 += 1, R945 += 1, R913 += 1, R56 += 1 };
  s1 -> s1 [0, 65] { R1003 += 1, R945 += 1, R913 += 1, R56 += 1 };
  s1 -> s1 [0, 65535] { R1003 += 1, R945 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s8 [0, 65535] { R1003 += 1 };
  s1 -> s4 [66, 66] { R1003 += 1, R945 += 1, R913 += 1, R56 += 1 };
  s1 -> s5 [66, 66] { R1003 += 1, R945 += 1, R913 += 1, R56 += 1 };
  s1 -> s1 [67, 65535] { R1003 += 1, R945 += 1, R913 += 1, R56 += 1 };
  s2 -> s1 [0, 65] { R1003 += 1, R945 += 1, R913 += 1, R56 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s2 [0, 65535] { R1003 += 1, R944 += 1, R945 += 1 };
  s2 -> s3 [0, 65535] { R1003 += 1, R945 += 1, R912 += 1, R913 += 1 };
  s2 -> s4 [66, 66] { R1003 += 1, R945 += 1, R913 += 1, R56 += 1 };
  s2 -> s5 [66, 66] { R1003 += 1, R945 += 1, R913 += 1, R56 += 1 };
  s2 -> s1 [67, 65535] { R1003 += 1, R945 += 1, R913 += 1, R56 += 1 };
  s3 -> s1 [0, 65] { R1003 += 1, R945 += 1, R913 += 1, R56 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s8 [0, 65535] { R1003 += 1 };
  s3 -> s3 [0, 65535] { R1003 += 1, R945 += 1, R912 += 1, R913 += 1 };
  s3 -> s4 [66, 66] { R1003 += 1, R945 += 1, R913 += 1, R56 += 1 };
  s3 -> s5 [66, 66] { R1003 += 1, R945 += 1, R913 += 1, R56 += 1 };
  s3 -> s1 [67, 65535] { R1003 += 1, R945 += 1, R913 += 1, R56 += 1 };
  s4 -> s4 [0, 65535] { R1003 += 1, R945 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s8 [0, 65535] { R1003 += 1 };
  s5 -> s6 [0, 65535] { R1003 += 1, R945 += 1 };
  s5 -> s7 [0, 65535];
  s5 -> s8 [0, 65535] { R1003 += 1 };
  s5 -> s5 [0, 65535] { R1003 += 1, R945 += 1, R913 += 1, R56 += 1 };
  s6 -> s6 [0, 65535] { R1003 += 1, R945 += 1 };
  s6 -> s7 [0, 65535];
  s6 -> s8 [0, 65535] { R1003 += 1 };
  s7 -> s7 [0, 65535];
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R1003 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 65] { R1005 += 1, R947 += 1, R915 += 1, R58 += 1 };
  s0 -> s2 [0, 65535] { R1005 += 1, R946 += 1, R947 += 1 };
  s0 -> s0 [0, 65535] { R1004 += 1, R1005 += 1 };
  s0 -> s3 [0, 65535] { R1005 += 1, R947 += 1, R914 += 1, R915 += 1 };
  s0 -> s4 [66, 66] { R1005 += 1, R947 += 1, R915 += 1, R58 += 1 };
  s0 -> s5 [66, 66] { R1005 += 1, R947 += 1, R915 += 1, R58 += 1 };
  s0 -> s1 [67, 65535] { R1005 += 1, R947 += 1, R915 += 1, R58 += 1 };
  s1 -> s1 [0, 65] { R1005 += 1, R947 += 1, R915 += 1, R58 += 1 };
  s1 -> s7 [0, 65535] { R1005 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s1 [0, 65535] { R1005 += 1, R947 += 1 };
  s1 -> s4 [66, 66] { R1005 += 1, R947 += 1, R915 += 1, R58 += 1 };
  s1 -> s5 [66, 66] { R1005 += 1, R947 += 1, R915 += 1, R58 += 1 };
  s1 -> s1 [67, 65535] { R1005 += 1, R947 += 1, R915 += 1, R58 += 1 };
  s2 -> s1 [0, 65] { R1005 += 1, R947 += 1, R915 += 1, R58 += 1 };
  s2 -> s2 [0, 65535] { R1005 += 1, R946 += 1, R947 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s3 [0, 65535] { R1005 += 1, R947 += 1, R914 += 1, R915 += 1 };
  s2 -> s4 [66, 66] { R1005 += 1, R947 += 1, R915 += 1, R58 += 1 };
  s2 -> s5 [66, 66] { R1005 += 1, R947 += 1, R915 += 1, R58 += 1 };
  s2 -> s1 [67, 65535] { R1005 += 1, R947 += 1, R915 += 1, R58 += 1 };
  s3 -> s1 [0, 65] { R1005 += 1, R947 += 1, R915 += 1, R58 += 1 };
  s3 -> s7 [0, 65535] { R1005 += 1 };
  s3 -> s8 [0, 65535];
  s3 -> s3 [0, 65535] { R1005 += 1, R947 += 1, R914 += 1, R915 += 1 };
  s3 -> s4 [66, 66] { R1005 += 1, R947 += 1, R915 += 1, R58 += 1 };
  s3 -> s5 [66, 66] { R1005 += 1, R947 += 1, R915 += 1, R58 += 1 };
  s3 -> s1 [67, 65535] { R1005 += 1, R947 += 1, R915 += 1, R58 += 1 };
  s4 -> s4 [0, 65535] { R1005 += 1, R947 += 1 };
  s4 -> s7 [0, 65535] { R1005 += 1 };
  s4 -> s8 [0, 65535];
  s5 -> s6 [0, 65535] { R1005 += 1, R947 += 1 };
  s5 -> s7 [0, 65535] { R1005 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s5 [0, 65535] { R1005 += 1, R947 += 1, R915 += 1, R58 += 1 };
  s6 -> s6 [0, 65535] { R1005 += 1, R947 += 1 };
  s6 -> s7 [0, 65535] { R1005 += 1 };
  s6 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R1005 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 65] { R1007 += 1, R949 += 1, R917 += 1, R873 += 1 };
  s0 -> s2 [0, 65] { R1007 += 1, R949 += 1, R917 += 1, R872 += 1, R873 += 1 };
  s0 -> s3 [0, 65535] { R1007 += 1, R948 += 1, R949 += 1 };
  s0 -> s0 [0, 65535] { R1006 += 1, R1007 += 1 };
  s0 -> s4 [0, 65535] { R1007 += 1, R949 += 1, R916 += 1, R917 += 1 };
  s0 -> s5 [66, 66] { R1007 += 1, R949 += 1, R917 += 1, R872 += 1, R873 += 1 };
  s0 -> s6 [66, 66] { R1007 += 1, R949 += 1, R917 += 1, R872 += 1, R873 += 1 };
  s0 -> s7 [66, 66] { R1007 += 1, R949 += 1, R917 += 1, R873 += 1 };
  s0 -> s8 [66, 66] { R1007 += 1, R949 += 1, R917 += 1, R873 += 1 };
  s0 -> s1 [67, 69] { R1007 += 1, R949 += 1, R917 += 1, R873 += 1 };
  s0 -> s2 [67, 65535] { R1007 += 1, R949 += 1, R917 += 1, R872 += 1, R873 += 1 };
  s0 -> s1 [71, 65535] { R1007 += 1, R949 += 1, R917 += 1, R873 += 1 };
  s1 -> s1 [0, 65] { R1007 += 1, R949 += 1, R917 += 1, R873 += 1 };
  s1 -> s9 [0, 65535] { R1007 += 1 };
  s1 -> s10 [0, 65535];
  s1 -> s1 [0, 65535] { R1007 += 1, R949 += 1 };
  s1 -> s7 [66, 66] { R1007 += 1, R949 += 1, R917 += 1, R873 += 1 };
  s1 -> s8 [66, 66] { R1007 += 1, R949 += 1, R917 += 1, R873 += 1 };
  s1 -> s1 [67, 69] { R1007 += 1, R949 += 1, R917 += 1, R873 += 1 };
  s1 -> s1 [71, 65535] { R1007 += 1, R949 += 1, R917 += 1, R873 += 1 };
  s2 -> s1 [0, 65] { R1007 += 1, R949 += 1, R917 += 1, R873 += 1 };
  s2 -> s2 [0, 65] { R1007 += 1, R949 += 1, R917 += 1, R872 += 1, R873 += 1 };
  s2 -> s5 [66, 66] { R1007 += 1, R949 += 1, R917 += 1, R872 += 1, R873 += 1 };
  s2 -> s6 [66, 66] { R1007 += 1, R949 += 1, R917 += 1, R872 += 1, R873 += 1 };
  s2 -> s7 [66, 66] { R1007 += 1, R949 += 1, R917 += 1, R873 += 1 };
  s2 -> s8 [66, 66] { R1007 += 1, R949 += 1, R917 += 1, R873 += 1 };
  s2 -> s1 [67, 69] { R1007 += 1, R949 += 1, R917 += 1, R873 += 1 };
  s2 -> s2 [67, 65535] { R1007 += 1, R949 += 1, R917 += 1, R872 += 1, R873 += 1 };
  s2 -> s1 [71, 65535] { R1007 += 1, R949 += 1, R917 += 1, R873 += 1 };
  s3 -> s1 [0, 65] { R1007 += 1, R949 += 1, R917 += 1, R873 += 1 };
  s3 -> s2 [0, 65] { R1007 += 1, R949 += 1, R917 += 1, R872 += 1, R873 += 1 };
  s3 -> s3 [0, 65535] { R1007 += 1, R948 += 1, R949 += 1 };
  s3 -> s4 [0, 65535] { R1007 += 1, R949 += 1, R916 += 1, R917 += 1 };
  s3 -> s5 [66, 66] { R1007 += 1, R949 += 1, R917 += 1, R872 += 1, R873 += 1 };
  s3 -> s6 [66, 66] { R1007 += 1, R949 += 1, R917 += 1, R872 += 1, R873 += 1 };
  s3 -> s7 [66, 66] { R1007 += 1, R949 += 1, R917 += 1, R873 += 1 };
  s3 -> s8 [66, 66] { R1007 += 1, R949 += 1, R917 += 1, R873 += 1 };
  s3 -> s1 [67, 69] { R1007 += 1, R949 += 1, R917 += 1, R873 += 1 };
  s3 -> s2 [67, 65535] { R1007 += 1, R949 += 1, R917 += 1, R872 += 1, R873 += 1 };
  s3 -> s1 [71, 65535] { R1007 += 1, R949 += 1, R917 += 1, R873 += 1 };
  s4 -> s1 [0, 65] { R1007 += 1, R949 += 1, R917 += 1, R873 += 1 };
  s4 -> s2 [0, 65] { R1007 += 1, R949 += 1, R917 += 1, R872 += 1, R873 += 1 };
  s4 -> s4 [0, 65535] { R1007 += 1, R949 += 1, R916 += 1, R917 += 1 };
  s4 -> s5 [66, 66] { R1007 += 1, R949 += 1, R917 += 1, R872 += 1, R873 += 1 };
  s4 -> s6 [66, 66] { R1007 += 1, R949 += 1, R917 += 1, R872 += 1, R873 += 1 };
  s4 -> s7 [66, 66] { R1007 += 1, R949 += 1, R917 += 1, R873 += 1 };
  s4 -> s8 [66, 66] { R1007 += 1, R949 += 1, R917 += 1, R873 += 1 };
  s4 -> s1 [67, 69] { R1007 += 1, R949 += 1, R917 += 1, R873 += 1 };
  s4 -> s2 [67, 65535] { R1007 += 1, R949 += 1, R917 += 1, R872 += 1, R873 += 1 };
  s4 -> s1 [71, 65535] { R1007 += 1, R949 += 1, R917 += 1, R873 += 1 };
  s5 -> s8 [0, 69] { R1007 += 1, R949 += 1, R917 += 1, R873 += 1 };
  s5 -> s5 [0, 65535] { R1007 += 1, R949 += 1, R917 += 1, R872 += 1, R873 += 1 };
  s5 -> s8 [71, 65535] { R1007 += 1, R949 += 1, R917 += 1, R873 += 1 };
  s7 -> s9 [0, 65535] { R1007 += 1 };
  s7 -> s10 [0, 65535];
  s7 -> s7 [0, 65535] { R1007 += 1, R949 += 1 };
  s8 -> s8 [0, 69] { R1007 += 1, R949 += 1, R917 += 1, R873 += 1 };
  s8 -> s9 [0, 65535] { R1007 += 1 };
  s8 -> s10 [0, 65535];
  s8 -> s8 [0, 65535] { R1007 += 1, R949 += 1 };
  s8 -> s8 [71, 65535] { R1007 += 1, R949 += 1, R917 += 1, R873 += 1 };
  s9 -> s9 [0, 65535] { R1007 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  accepting s8, s9, s1, s7, s10;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 65] { R1009 += 1, R951 += 1, R919 += 1, R876 += 1, R877 += 1 };
  s0 -> s2 [0, 65535] { R1009 += 1, R950 += 1, R951 += 1 };
  s0 -> s0 [0, 65535] { R1008 += 1, R1009 += 1 };
  s0 -> s3 [0, 65535] { R1009 += 1, R951 += 1, R918 += 1, R919 += 1 };
  s0 -> s4 [66, 66] { R1009 += 1, R951 += 1, R919 += 1, R876 += 1, R877 += 1 };
  s0 -> s5 [66, 66] { R1009 += 1, R951 += 1, R919 += 1, R876 += 1, R877 += 1 };
  s0 -> s1 [67, 65535] { R1009 += 1, R951 += 1, R919 += 1, R876 += 1, R877 += 1 };
  s1 -> s1 [0, 65] { R1009 += 1, R951 += 1, R919 += 1, R876 += 1, R877 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s8 [0, 65535] { R1009 += 1 };
  s1 -> s1 [0, 65535] { R1009 += 1, R951 += 1 };
  s1 -> s4 [66, 66] { R1009 += 1, R951 += 1, R919 += 1, R876 += 1, R877 += 1 };
  s1 -> s5 [66, 66] { R1009 += 1, R951 += 1, R919 += 1, R876 += 1, R877 += 1 };
  s1 -> s1 [67, 65535] { R1009 += 1, R951 += 1, R919 += 1, R876 += 1, R877 += 1 };
  s2 -> s1 [0, 65] { R1009 += 1, R951 += 1, R919 += 1, R876 += 1, R877 += 1 };
  s2 -> s2 [0, 65535] { R1009 += 1, R950 += 1, R951 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s3 [0, 65535] { R1009 += 1, R951 += 1, R918 += 1, R919 += 1 };
  s2 -> s4 [66, 66] { R1009 += 1, R951 += 1, R919 += 1, R876 += 1, R877 += 1 };
  s2 -> s5 [66, 66] { R1009 += 1, R951 += 1, R919 += 1, R876 += 1, R877 += 1 };
  s2 -> s1 [67, 65535] { R1009 += 1, R951 += 1, R919 += 1, R876 += 1, R877 += 1 };
  s3 -> s1 [0, 65] { R1009 += 1, R951 += 1, R919 += 1, R876 += 1, R877 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s3 [0, 65535] { R1009 += 1, R951 += 1, R918 += 1, R919 += 1 };
  s3 -> s8 [0, 65535] { R1009 += 1 };
  s3 -> s4 [66, 66] { R1009 += 1, R951 += 1, R919 += 1, R876 += 1, R877 += 1 };
  s3 -> s5 [66, 66] { R1009 += 1, R951 += 1, R919 += 1, R876 += 1, R877 += 1 };
  s3 -> s1 [67, 65535] { R1009 += 1, R951 += 1, R919 += 1, R876 += 1, R877 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s8 [0, 65535] { R1009 += 1 };
  s4 -> s4 [0, 65535] { R1009 += 1, R951 += 1 };
  s5 -> s6 [0, 65535] { R1009 += 1, R951 += 1 };
  s5 -> s7 [0, 65535];
  s5 -> s8 [0, 65535] { R1009 += 1 };
  s5 -> s5 [0, 65535] { R1009 += 1, R951 += 1, R919 += 1, R876 += 1, R877 += 1 };
  s6 -> s6 [0, 65535] { R1009 += 1, R951 += 1 };
  s6 -> s7 [0, 65535];
  s6 -> s8 [0, 65535] { R1009 += 1 };
  s7 -> s7 [0, 65535];
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R1009 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
};
synchronised {  // Automata constraining P37
automaton P37_0 {
  init s0;
  s0 -> s1 [9, 9];
  accepting s1;
};
};
synchronised {  // Automata constraining P38
automaton P38_0 {
  init s0;
  s0 -> s1 [10, 10];
  accepting s1;
};
};
synchronised {  // Automata constraining P36
automaton P36_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
constraint R1 = R893 && R2 = R951 && R3 - R1009 = 1 && R22 - R951 = -1 && R23 = R951 && R24 - R951 = -1 && R25 = R951 && R26 = 0 && R27 = 1 && R28 = 0 && R29 = 1 && R30 = R1009 && R31 - R1009 = 1 && R32 = R1009 && R33 - R1009 = 1 && R34 = 0 && R35 = 1 && R36 = 0 && R37 = 1 && R42 + R57 + R56 + -1*R875 + -1*R873 - R47 = 0 && R46 + R874 + R872 = 0 && R892 = 0 && R910 = 0 && R911 = 0 && R916 = 0 && R917 = 0 && R920 = 0 && R921 = R951 && R922 = 0 && R923 = R951 && R924 = 0 && R925 = R951 && R926 = 0 && R927 = R951 && R928 = 0 && R929 = R951 && R930 = 0 && R931 = R951 && R932 = 0 && R933 = R951 && R934 = 0 && R935 = R951 && R936 = 0 && R937 = R951 && R938 = 0 && R939 = R951 && R940 = 0 && R941 = R951 && R942 = 0 && R943 = R951 && R944 = 0 && R945 = R951 && R946 = 0 && R947 = R951 && R948 = 0 && R949 = R951 && R950 = 0 && R952 = 0 && R953 = R1009 && R954 = 0 && R955 = R1009 && R956 = 0 && R957 = R1009 && R958 = 0 && R959 = R1009 && R960 = 0 && R961 = R1009 && R962 = 0 && R963 = R1009 && R964 = 0 && R965 = R1009 && R966 = 0 && R967 = R1009 && R968 = 0 && R969 = R1009 && R970 = 0 && R971 = R1009 && R972 = 0 && R973 = R1009 && R974 = 0 && R975 = R1009 && R976 = 0 && R977 = R1009 && R978 = 0 && R979 = R1009 && R980 = 0 && R981 = R1009 && R982 = 0 && R983 = R1009 && R984 = 0 && R985 = R1009 && R986 = 0 && R987 = R1009 && R988 = 0 && R989 = R1009 && R990 = 0 && R991 = R1009 && R992 = 0 && R993 = R1009 && R994 = 0 && R995 = R1009 && R996 = 0 && R997 = R1009 && R998 = 0 && R999 = R1009 && R1000 = 0 && R1001 = R1009 && R1002 = 0 && R1003 = R1009 && R1004 = 0 && R1005 = R1009 && R1006 = 0 && R1007 = R1009 && R1008 = 0 && R11 < 1 && R14 < 1 && R17 < 1 && R44 + R59 + R58 < 1 && -1*R875 + -1*R873 - R47 < 1 && -1 < R893 && 0 < R951 && -1 < R1009 && (R47 + R875 + R873 != 0 || R52 + R881 + R878 = 0 || (R50 + R879 + R876 = 0 && R51 + R880 + R877 = 0)) && (R50 + R879 + R876 != 0 || R47 + R875 + R873 + -1*R880 + -1*R877 - R51 = 0 || R47 + R875 + R873 < 1) && (R882 != 0 || R883 = R893 || (R19 = 0 && R893 = 0)) && (R884 != 0 || R885 = R893 || (R19 = 0 && R893 = 0)) && (R886 != 0 || R887 = R893 || (R19 = 0 && R893 = 0)) && (R888 != 0 || R889 = R893 || (R19 = 0 && R893 = 0)) && (R890 != 0 || R891 = R893 || (R19 = 0 && R893 = 0)) && (R894 != 0 || R893 = R895 || (R19 = 0 && R893 = 0)) && (R20 = 0 || (R908 = 0 && R909 = 0)) && (R20 = 0 || (R912 = 0 && R913 = 0)) && (R20 = 0 || (R914 = 0 && R915 = 0)) && (R20 = 0 || (R918 = 0 && R919 = 0)) && (R21 = 0 || (R896 = 0 && R897 = 0)) && (R21 = 0 || (R898 = 0 && R899 = 0)) && (R21 = 0 || (R900 = 0 && R901 = 0)) && (R21 = 0 || (R902 = 0 && R903 = 0)) && (R21 = 0 || (R904 = 0 && R905 = 0)) && (R21 = 0 || (R906 = 0 && R907 = 0)) && (R50 + R879 + R876 = 0 || R47 + R875 + R873 < 1) && (R882 = 0 || (R19 = 0 && R893 = 0)) && (R884 = 0 || (R19 = 0 && R893 = 0)) && (R886 = 0 || (R19 = 0 && R893 = 0)) && (R888 = 0 || (R19 = 0 && R893 = 0)) && (R890 = 0 || (R19 = 0 && R893 = 0)) && (R894 = 0 || (R19 = 0 && R893 = 0));
// End of Parikh automata intersection problem
