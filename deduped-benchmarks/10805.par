// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R12, R13, R2, R3, R322, R323, R4, R476, R477, R478, R479, R480, R481, R482, R483, R484, R485, R486, R487, R488, R489, R490, R491, R492, R493, R494, R495, R496, R497, R498, R499, R5, R564, R565, R566, R567, R568, R569, R570, R571, R572, R573, R574, R575, R576, R577, R578, R579, R580, R581, R582, R583, R584, R585, R586, R587, R588, R589, R590, R591, R592, R593, R594, R595, R596, R597, R598, R599, R6, R600, R601, R602, R603, R604, R605, R606, R607, R608, R609, R610, R611, R612, R613, R614, R615, R616, R617, R618, R619, R620, R621, R622, R623, R624, R625, R626, R627, R7, R8, R9;
synchronised {  // Automata constraining P25
automaton P25_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
synchronised {  // Automata constraining value1
automaton value1_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 60];
  s0 -> s1 [61, 61];
  s0 -> s0 [62, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 65535];
  accepting s1;
};
automaton value1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton value1_2 {
  init s0;
  s0 -> s1 [0, 60] { R323 += 1 };
  s0 -> s0 [0, 65535] { R322 += 1, R323 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535] { R323 += 1 };
  s1 -> s1 [0, 60] { R323 += 1 };
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535] { R323 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value1_3 {
  init s0;
  s0 -> s1 [0, 65535] { R499 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R498 += 1, R499 += 1 };
  s1 -> s1 [0, 65535] { R499 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_4 {
  init s0;
  s0 -> s1 [0, 65535] { R599 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R598 += 1, R599 += 1 };
  s1 -> s1 [0, 65535] { R599 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_5 {
  init s0;
  s0 -> s0 [0, 65535] { R600 += 1, R601 += 1 };
  s0 -> s1 [0, 65535] { R601 += 1, R494 += 1, R495 += 1 };
  s0 -> s2 [13, 13] { R601 += 1, R495 += 1 };
  s1 -> s1 [0, 65535] { R601 += 1, R494 += 1, R495 += 1 };
  s1 -> s2 [13, 13] { R601 += 1, R495 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R601 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value1_6 {
  init s0;
  s0 -> s1 [0, 65535] { R603 += 1, R496 += 1, R497 += 1 };
  s0 -> s2 [0, 65535] { R603 += 1, R497 += 1, R9 += 1 };
  s0 -> s0 [0, 65535] { R602 += 1, R603 += 1 };
  s1 -> s1 [0, 65535] { R603 += 1, R496 += 1, R497 += 1 };
  s1 -> s2 [0, 65535] { R603 += 1, R497 += 1, R9 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R603 += 1, R497 += 1, R9 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R603 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R603 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_7 {
  init s0;
  s0 -> s1 [0, 64] { R605 += 1, R575 += 1 };
  s0 -> s2 [0, 65535] { R605 += 1, R574 += 1, R575 += 1 };
  s0 -> s0 [0, 65535] { R604 += 1, R605 += 1 };
  s0 -> s3 [67, 67] { R605 += 1, R575 += 1 };
  s0 -> s1 [68, 65535] { R605 += 1, R575 += 1 };
  s1 -> s1 [0, 64] { R605 += 1, R575 += 1 };
  s1 -> s3 [67, 67] { R605 += 1, R575 += 1 };
  s1 -> s1 [68, 65535] { R605 += 1, R575 += 1 };
  s2 -> s1 [0, 64] { R605 += 1, R575 += 1 };
  s2 -> s2 [0, 65535] { R605 += 1, R574 += 1, R575 += 1 };
  s2 -> s3 [67, 67] { R605 += 1, R575 += 1 };
  s2 -> s1 [68, 65535] { R605 += 1, R575 += 1 };
  s3 -> s3 [0, 64] { R605 += 1, R575 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R605 += 1 };
  s3 -> s3 [67, 65535] { R605 += 1, R575 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton value1_8 {
  init s0;
  s0 -> s1 [0, 65535] { R607 += 1, R576 += 1, R577 += 1 };
  s0 -> s2 [0, 65535] { R607 += 1, R577 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R606 += 1, R607 += 1 };
  s1 -> s1 [0, 65535] { R607 += 1, R576 += 1, R577 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R607 += 1, R577 += 1, R2 += 1 };
  s2 -> s3 [0, 65535] { R607 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R607 += 1, R577 += 1, R2 += 1 };
  s3 -> s3 [0, 65535] { R607 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_9 {
  init s0;
  s0 -> s1 [0, 66] { R609 += 1, R579 += 1, R13 += 1 };
  s0 -> s2 [0, 65535] { R609 += 1, R578 += 1, R579 += 1 };
  s0 -> s3 [0, 65535] { R609 += 1, R579 += 1, R12 += 1, R13 += 1 };
  s0 -> s0 [0, 65535] { R608 += 1, R609 += 1 };
  s0 -> s4 [67, 67] { R609 += 1, R579 += 1 };
  s0 -> s1 [68, 65535] { R609 += 1, R579 += 1, R13 += 1 };
  s1 -> s1 [0, 66] { R609 += 1, R579 += 1, R13 += 1 };
  s1 -> s4 [67, 67] { R609 += 1, R579 += 1 };
  s1 -> s1 [68, 65535] { R609 += 1, R579 += 1, R13 += 1 };
  s2 -> s1 [0, 66] { R609 += 1, R579 += 1, R13 += 1 };
  s2 -> s2 [0, 65535] { R609 += 1, R578 += 1, R579 += 1 };
  s2 -> s3 [0, 65535] { R609 += 1, R579 += 1, R12 += 1, R13 += 1 };
  s2 -> s4 [67, 67] { R609 += 1, R579 += 1 };
  s2 -> s1 [68, 65535] { R609 += 1, R579 += 1, R13 += 1 };
  s3 -> s1 [0, 66] { R609 += 1, R579 += 1, R13 += 1 };
  s3 -> s3 [0, 65535] { R609 += 1, R579 += 1, R12 += 1, R13 += 1 };
  s3 -> s4 [67, 67] { R609 += 1, R579 += 1 };
  s3 -> s1 [68, 65535] { R609 += 1, R579 += 1, R13 += 1 };
  s4 -> s4 [0, 65535] { R609 += 1, R579 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R609 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R609 += 1 };
  accepting s4, s5, s6;
};
automaton value1_10 {
  init s0;
  s0 -> s1 [0, 8] { R611 += 1, R581 += 1, R487 += 1 };
  s0 -> s2 [0, 65535] { R611 += 1, R580 += 1, R581 += 1 };
  s0 -> s0 [0, 65535] { R610 += 1, R611 += 1 };
  s0 -> s3 [0, 65535] { R611 += 1, R581 += 1, R486 += 1, R487 += 1 };
  s0 -> s4 [9, 13] { R611 += 1, R581 += 1, R487 += 1 };
  s0 -> s1 [14, 31] { R611 += 1, R581 += 1, R487 += 1 };
  s0 -> s4 [32, 32] { R611 += 1, R581 += 1, R487 += 1 };
  s0 -> s1 [33, 65535] { R611 += 1, R581 += 1, R487 += 1 };
  s1 -> s7 [0, 65535] { R611 += 1, R581 += 1 };
  s1 -> s5 [0, 65535] { R611 += 1 };
  s1 -> s1 [0, 65535] { R611 += 1, R581 += 1, R487 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s1 [0, 8] { R611 += 1, R581 += 1, R487 += 1 };
  s2 -> s2 [0, 65535] { R611 += 1, R580 += 1, R581 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R611 += 1, R581 += 1, R486 += 1, R487 += 1 };
  s2 -> s4 [9, 13] { R611 += 1, R581 += 1, R487 += 1 };
  s2 -> s1 [14, 31] { R611 += 1, R581 += 1, R487 += 1 };
  s2 -> s4 [32, 32] { R611 += 1, R581 += 1, R487 += 1 };
  s2 -> s1 [33, 65535] { R611 += 1, R581 += 1, R487 += 1 };
  s3 -> s1 [0, 8] { R611 += 1, R581 += 1, R487 += 1 };
  s3 -> s5 [0, 65535] { R611 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R611 += 1, R581 += 1, R486 += 1, R487 += 1 };
  s3 -> s4 [9, 13] { R611 += 1, R581 += 1, R487 += 1 };
  s3 -> s1 [14, 31] { R611 += 1, R581 += 1, R487 += 1 };
  s3 -> s4 [32, 32] { R611 += 1, R581 += 1, R487 += 1 };
  s3 -> s1 [33, 65535] { R611 += 1, R581 += 1, R487 += 1 };
  s4 -> s1 [0, 65535] { R611 += 1, R581 += 1, R487 += 1 };
  s5 -> s5 [0, 65535] { R611 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R611 += 1, R581 += 1 };
  s7 -> s5 [0, 65535] { R611 += 1 };
  s7 -> s6 [0, 65535];
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton value1_11 {
  init s0;
  s0 -> s0 [0, 65535] { R612 += 1, R613 += 1 };
  s0 -> s1 [0, 65535] { R613 += 1, R583 += 1, R488 += 1, R489 += 1 };
  s0 -> s2 [0, 65535] { R613 += 1, R583 += 1, R489 += 1, R7 += 1 };
  s0 -> s3 [0, 65535] { R613 += 1, R582 += 1, R583 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R613 += 1, R583 += 1, R488 += 1, R489 += 1 };
  s1 -> s2 [0, 65535] { R613 += 1, R583 += 1, R489 += 1, R7 += 1 };
  s1 -> s6 [0, 65535] { R613 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R613 += 1, R583 += 1, R489 += 1, R7 += 1 };
  s2 -> s5 [0, 65535] { R613 += 1, R583 += 1 };
  s2 -> s6 [0, 65535] { R613 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R613 += 1, R583 += 1, R488 += 1, R489 += 1 };
  s3 -> s2 [0, 65535] { R613 += 1, R583 += 1, R489 += 1, R7 += 1 };
  s3 -> s3 [0, 65535] { R613 += 1, R582 += 1, R583 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R613 += 1, R583 += 1 };
  s5 -> s6 [0, 65535] { R613 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R613 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value1_12 {
  init s0;
  s0 -> s1 [0, 8] { R615 += 1, R585 += 1, R491 += 1 };
  s0 -> s2 [0, 65535] { R615 += 1, R585 += 1, R490 += 1, R491 += 1 };
  s0 -> s0 [0, 65535] { R614 += 1, R615 += 1 };
  s0 -> s3 [0, 65535] { R615 += 1, R584 += 1, R585 += 1 };
  s0 -> s4 [9, 13] { R615 += 1, R585 += 1, R491 += 1 };
  s0 -> s1 [14, 31] { R615 += 1, R585 += 1, R491 += 1 };
  s0 -> s4 [32, 32] { R615 += 1, R585 += 1, R491 += 1 };
  s0 -> s1 [33, 65535] { R615 += 1, R585 += 1, R491 += 1 };
  s1 -> s7 [0, 65535] { R615 += 1, R585 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R615 += 1 };
  s1 -> s1 [0, 65535] { R615 += 1, R585 += 1, R491 += 1 };
  s2 -> s1 [0, 8] { R615 += 1, R585 += 1, R491 += 1 };
  s2 -> s2 [0, 65535] { R615 += 1, R585 += 1, R490 += 1, R491 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R615 += 1 };
  s2 -> s4 [9, 13] { R615 += 1, R585 += 1, R491 += 1 };
  s2 -> s1 [14, 31] { R615 += 1, R585 += 1, R491 += 1 };
  s2 -> s4 [32, 32] { R615 += 1, R585 += 1, R491 += 1 };
  s2 -> s1 [33, 65535] { R615 += 1, R585 += 1, R491 += 1 };
  s3 -> s1 [0, 8] { R615 += 1, R585 += 1, R491 += 1 };
  s3 -> s2 [0, 65535] { R615 += 1, R585 += 1, R490 += 1, R491 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R615 += 1, R584 += 1, R585 += 1 };
  s3 -> s4 [9, 13] { R615 += 1, R585 += 1, R491 += 1 };
  s3 -> s1 [14, 31] { R615 += 1, R585 += 1, R491 += 1 };
  s3 -> s4 [32, 32] { R615 += 1, R585 += 1, R491 += 1 };
  s3 -> s1 [33, 65535] { R615 += 1, R585 += 1, R491 += 1 };
  s4 -> s1 [0, 65535] { R615 += 1, R585 += 1, R491 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R615 += 1 };
  s7 -> s7 [0, 65535] { R615 += 1, R585 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R615 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton value1_13 {
  init s0;
  s0 -> s1 [0, 65535] { R617 += 1, R586 += 1, R587 += 1 };
  s0 -> s2 [0, 65535] { R617 += 1, R587 += 1, R493 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R616 += 1, R617 += 1 };
  s0 -> s3 [0, 65535] { R617 += 1, R587 += 1, R492 += 1, R493 += 1 };
  s1 -> s1 [0, 65535] { R617 += 1, R586 += 1, R587 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R617 += 1, R587 += 1, R493 += 1, R8 += 1 };
  s1 -> s3 [0, 65535] { R617 += 1, R587 += 1, R492 += 1, R493 += 1 };
  s2 -> s6 [0, 65535] { R617 += 1, R587 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R617 += 1, R587 += 1, R493 += 1, R8 += 1 };
  s2 -> s5 [0, 65535] { R617 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R617 += 1, R587 += 1, R493 += 1, R8 += 1 };
  s3 -> s5 [0, 65535] { R617 += 1 };
  s3 -> s3 [0, 65535] { R617 += 1, R587 += 1, R492 += 1, R493 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R617 += 1 };
  s6 -> s6 [0, 65535] { R617 += 1, R587 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R617 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value1_14 {
  init s0;
  s0 -> s1 [0, 66] { R619 += 1, R589 += 1, R565 += 1 };
  s0 -> s0 [0, 65535] { R618 += 1, R619 += 1 };
  s0 -> s2 [0, 65535] { R619 += 1, R589 += 1, R564 += 1, R565 += 1 };
  s0 -> s3 [0, 65535] { R619 += 1, R588 += 1, R589 += 1 };
  s0 -> s1 [68, 65535] { R619 += 1, R589 += 1, R565 += 1 };
  s1 -> s1 [0, 66] { R619 += 1, R589 += 1, R565 += 1 };
  s1 -> s1 [0, 65535] { R619 += 1, R589 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R619 += 1 };
  s1 -> s1 [68, 65535] { R619 += 1, R589 += 1, R565 += 1 };
  s2 -> s1 [0, 66] { R619 += 1, R589 += 1, R565 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R619 += 1, R589 += 1, R564 += 1, R565 += 1 };
  s2 -> s5 [0, 65535] { R619 += 1 };
  s2 -> s1 [68, 65535] { R619 += 1, R589 += 1, R565 += 1 };
  s3 -> s1 [0, 66] { R619 += 1, R589 += 1, R565 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R619 += 1, R589 += 1, R564 += 1, R565 += 1 };
  s3 -> s3 [0, 65535] { R619 += 1, R588 += 1, R589 += 1 };
  s3 -> s1 [68, 65535] { R619 += 1, R589 += 1, R565 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R619 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value1_15 {
  init s0;
  s0 -> s0 [0, 65535] { R620 += 1, R621 += 1 };
  s0 -> s1 [0, 65535] { R621 += 1, R591 += 1, R567 += 1, R476 += 1 };
  s0 -> s2 [0, 65535] { R621 += 1, R591 += 1, R566 += 1, R567 += 1 };
  s0 -> s3 [0, 65535] { R621 += 1, R590 += 1, R591 += 1 };
  s1 -> s6 [0, 65535] { R621 += 1, R591 += 1 };
  s1 -> s1 [0, 65535] { R621 += 1, R591 += 1, R567 += 1, R476 += 1 };
  s1 -> s5 [0, 65535] { R621 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R621 += 1, R591 += 1, R567 += 1, R476 += 1 };
  s2 -> s2 [0, 65535] { R621 += 1, R591 += 1, R566 += 1, R567 += 1 };
  s2 -> s5 [0, 65535] { R621 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R621 += 1, R591 += 1, R567 += 1, R476 += 1 };
  s3 -> s2 [0, 65535] { R621 += 1, R591 += 1, R566 += 1, R567 += 1 };
  s3 -> s3 [0, 65535] { R621 += 1, R590 += 1, R591 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R621 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R621 += 1, R591 += 1 };
  s6 -> s5 [0, 65535] { R621 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value1_16 {
  init s0;
  s0 -> s1 [0, 67] { R623 += 1, R593 += 1, R569 += 1 };
  s0 -> s2 [0, 65535] { R623 += 1, R592 += 1, R593 += 1 };
  s0 -> s0 [0, 65535] { R622 += 1, R623 += 1 };
  s0 -> s3 [0, 65535] { R623 += 1, R593 += 1, R568 += 1, R569 += 1 };
  s0 -> s1 [83, 65535] { R623 += 1, R593 += 1, R569 += 1 };
  s1 -> s1 [0, 67] { R623 += 1, R593 += 1, R569 += 1 };
  s1 -> s4 [0, 65535] { R623 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R623 += 1, R593 += 1 };
  s1 -> s1 [83, 65535] { R623 += 1, R593 += 1, R569 += 1 };
  s2 -> s1 [0, 67] { R623 += 1, R593 += 1, R569 += 1 };
  s2 -> s2 [0, 65535] { R623 += 1, R592 += 1, R593 += 1 };
  s2 -> s3 [0, 65535] { R623 += 1, R593 += 1, R568 += 1, R569 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [83, 65535] { R623 += 1, R593 += 1, R569 += 1 };
  s3 -> s1 [0, 67] { R623 += 1, R593 += 1, R569 += 1 };
  s3 -> s4 [0, 65535] { R623 += 1 };
  s3 -> s3 [0, 65535] { R623 += 1, R593 += 1, R568 += 1, R569 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [83, 65535] { R623 += 1, R593 += 1, R569 += 1 };
  s4 -> s4 [0, 65535] { R623 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value1_17 {
  init s0;
  s0 -> s1 [0, 65535] { R625 += 1, R595 += 1, R571 += 1, R477 += 1 };
  s0 -> s2 [0, 65535] { R625 += 1, R594 += 1, R595 += 1 };
  s0 -> s3 [0, 65535] { R625 += 1, R595 += 1, R570 += 1, R571 += 1 };
  s0 -> s0 [0, 65535] { R624 += 1, R625 += 1 };
  s1 -> s1 [0, 65535] { R625 += 1, R595 += 1, R571 += 1, R477 += 1 };
  s1 -> s6 [0, 65535] { R625 += 1, R595 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R625 += 1 };
  s2 -> s1 [0, 65535] { R625 += 1, R595 += 1, R571 += 1, R477 += 1 };
  s2 -> s2 [0, 65535] { R625 += 1, R594 += 1, R595 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R625 += 1, R595 += 1, R570 += 1, R571 += 1 };
  s3 -> s1 [0, 65535] { R625 += 1, R595 += 1, R571 += 1, R477 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R625 += 1, R595 += 1, R570 += 1, R571 += 1 };
  s3 -> s5 [0, 65535] { R625 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R625 += 1 };
  s6 -> s6 [0, 65535] { R625 += 1, R595 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R625 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value1_18 {
  init s0;
  s0 -> s1 [0, 66] { R627 += 1, R597 += 1, R573 += 1 };
  s0 -> s2 [0, 65535] { R627 += 1, R596 += 1, R597 += 1 };
  s0 -> s0 [0, 65535] { R626 += 1, R627 += 1 };
  s0 -> s3 [0, 65535] { R627 += 1, R597 += 1, R572 += 1, R573 += 1 };
  s0 -> s4 [67, 67] { R627 += 1, R597 += 1, R573 += 1 };
  s0 -> s5 [67, 67] { R627 += 1, R597 += 1, R573 += 1 };
  s0 -> s6 [83, 83] { R627 += 1, R597 += 1, R573 += 1 };
  s0 -> s1 [84, 65535] { R627 += 1, R597 += 1, R573 += 1 };
  s1 -> s1 [0, 66] { R627 += 1, R597 += 1, R573 += 1 };
  s1 -> s4 [67, 67] { R627 += 1, R597 += 1, R573 += 1 };
  s1 -> s5 [67, 67] { R627 += 1, R597 += 1, R573 += 1 };
  s1 -> s6 [83, 83] { R627 += 1, R597 += 1, R573 += 1 };
  s1 -> s1 [84, 65535] { R627 += 1, R597 += 1, R573 += 1 };
  s2 -> s1 [0, 66] { R627 += 1, R597 += 1, R573 += 1 };
  s2 -> s2 [0, 65535] { R627 += 1, R596 += 1, R597 += 1 };
  s2 -> s3 [0, 65535] { R627 += 1, R597 += 1, R572 += 1, R573 += 1 };
  s2 -> s4 [67, 67] { R627 += 1, R597 += 1, R573 += 1 };
  s2 -> s5 [67, 67] { R627 += 1, R597 += 1, R573 += 1 };
  s2 -> s6 [83, 83] { R627 += 1, R597 += 1, R573 += 1 };
  s2 -> s1 [84, 65535] { R627 += 1, R597 += 1, R573 += 1 };
  s3 -> s1 [0, 66] { R627 += 1, R597 += 1, R573 += 1 };
  s3 -> s3 [0, 65535] { R627 += 1, R597 += 1, R572 += 1, R573 += 1 };
  s3 -> s4 [67, 67] { R627 += 1, R597 += 1, R573 += 1 };
  s3 -> s5 [67, 67] { R627 += 1, R597 += 1, R573 += 1 };
  s3 -> s6 [83, 83] { R627 += 1, R597 += 1, R573 += 1 };
  s3 -> s1 [84, 65535] { R627 += 1, R597 += 1, R573 += 1 };
  s4 -> s4 [0, 67] { R627 += 1, R597 += 1, R573 += 1 };
  s4 -> s10 [83, 83] { R627 += 1, R597 += 1, R573 += 1 };
  s4 -> s4 [84, 65535] { R627 += 1, R597 += 1, R573 += 1 };
  s6 -> s6 [0, 66] { R627 += 1, R597 += 1, R573 += 1 };
  s6 -> s7 [0, 65535] { R627 += 1 };
  s6 -> s6 [0, 65535] { R627 += 1, R597 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s9 [67, 67] { R627 += 1, R597 += 1, R573 += 1 };
  s6 -> s10 [67, 67] { R627 += 1, R597 += 1, R573 += 1 };
  s6 -> s6 [83, 65535] { R627 += 1, R597 += 1, R573 += 1 };
  s7 -> s7 [0, 65535] { R627 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R627 += 1, R597 += 1 };
  s9 -> s7 [0, 65535] { R627 += 1 };
  s9 -> s8 [0, 65535];
  s10 -> s10 [0, 67] { R627 += 1, R597 += 1, R573 += 1 };
  s10 -> s7 [0, 65535] { R627 += 1 };
  s10 -> s10 [0, 65535] { R627 += 1, R597 += 1 };
  s10 -> s8 [0, 65535];
  s10 -> s10 [83, 65535] { R627 += 1, R597 += 1, R573 += 1 };
  accepting s8, s9, s6, s7, s10;
};
};
synchronised {  // Automata constraining c5
automaton c5_0 {
  init s0;
  s0 -> s1 [99, 99];
  accepting s1;
};
};
synchronised {  // Automata constraining P27
automaton P27_0 {
  init s0;
  s0 -> s1 [10, 10];
  accepting s1;
};
};
synchronised {  // Automata constraining P26
automaton P26_0 {
  init s0;
  s0 -> s1 [9, 9];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s0 [91, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R10 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 8] { R479 += 1 };
  s0 -> s0 [0, 65535] { R478 += 1, R479 += 1 };
  s0 -> s2 [9, 13] { R479 += 1 };
  s0 -> s1 [14, 31] { R479 += 1 };
  s0 -> s2 [32, 32] { R479 += 1 };
  s0 -> s1 [33, 65535] { R479 += 1 };
  s1 -> s1 [0, 65535] { R479 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R479 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_4 {
  init s0;
  s0 -> s0 [0, 65535] { R480 += 1, R481 += 1 };
  s0 -> s1 [0, 65535] { R481 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R481 += 1, R5 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 8] { R483 += 1 };
  s0 -> s0 [0, 65535] { R482 += 1, R483 += 1 };
  s0 -> s2 [9, 13] { R483 += 1 };
  s0 -> s1 [14, 31] { R483 += 1 };
  s0 -> s2 [32, 32] { R483 += 1 };
  s0 -> s1 [33, 65535] { R483 += 1 };
  s1 -> s1 [0, 65535] { R483 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R483 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_6 {
  init s0;
  s0 -> s0 [0, 65535] { R484 += 1, R485 += 1 };
  s0 -> s1 [0, 65535] { R485 += 1, R6 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R485 += 1, R6 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
};
constraint R2 = R489 && R3 = R597 && R4 = R499 && R12 = 0 && R13 - R573 = -1 && R322 = 0 && R323 = R627 && R486 - R489 = -1 && R487 = R489 && R488 - R489 = -1 && R490 = 0 && R491 = 1 && R492 = 0 && R493 = 1 && R494 = 0 && R495 = 1 && R496 = 0 && R497 = 1 && R498 - R627 = 1 && R572 = 0 && R574 = 1 && R575 = R597 && R576 = 1 && R577 = R597 && R578 = 1 && R579 = R597 && R580 = 1 && R581 = R597 && R582 = 1 && R583 = R597 && R584 = 1 && R585 = R597 && R586 = 1 && R587 = R597 && R588 = 1 && R589 = R597 && R590 = 1 && R591 = R597 && R592 = 1 && R593 = R597 && R594 = 1 && R595 = R597 && R596 = 1 && R598 = 0 && R599 = R627 && R600 = 0 && R601 = R627 && R602 = 0 && R603 = R627 && R604 = 0 && R605 = R627 && R606 = 0 && R607 = R627 && R608 = 0 && R609 = R627 && R610 = 0 && R611 = R627 && R612 = 0 && R613 = R627 && R614 = 0 && R615 = R627 && R616 = 0 && R617 = R627 && R618 = 0 && R619 = R627 && R620 = 0 && R621 = R627 && R622 = 0 && R623 = R627 && R624 = 0 && R625 = R627 && R626 = 0 && R0 != 0 && R1 != 0 && R10 < 1 && R573 - R489 < 1 && 0 < R489 && R627 < R499 && -1 < R573 && 0 < R597 && -1 < R627 && (R5 != 0 || ((R1 != R479 || R478 - R479 = -1 || R479 < 0) && (R1 = R479 || R1 < 1))) && (R5 != 0 || ((R1 != R481 || R480 - R481 = -1 || R481 < 0) && (R1 = R481 || R1 < 1))) && (R482 != 0 || ((R6 != 0 || ((R1 != R483 || R483 = 1 || R483 < 0) && (R1 = R483 || R483 = 1 || R1 < 1))) && (R6 = 0 || ((R1 != R483 || R483 = 1 || R483 < 0) && (R483 != 1 || -1 < R1) && (R1 = R483 || R483 = 1))))) && (R484 != 0 || ((R6 != 0 || ((R1 != R485 || R485 = 1 || R485 < 0) && (R1 = R485 || R485 = 1 || R1 < 1))) && (R6 = 0 || ((R1 != R485 || R485 = 1 || R485 < 0) && (R485 != 1 || -1 < R1) && (R1 = R485 || R485 = 1))))) && (R489 != R565 || R564 = R573 || ((R476 != 0 || R565 - R573 < 1 || R565 < 1) && (R476 = 0 || R565 < R573 || R565 < 1))) && (R489 != R567 || R566 = R573 || ((R476 != 0 || R567 - R573 < 1 || R567 < 1) && (R476 = 0 || R567 < R573 || R567 < 1))) && (R489 != R569 || R568 = R573 || ((R476 != 0 || R569 - R573 < 1 || R569 < 1) && (R476 = 0 || R569 < R573 || R569 < 1))) && (R570 != 0 || R571 = R573 || (R477 = 0 && R573 = 0)) && (R5 = 0 || (R1 = R479 && R478 - R479 = -1)) && (R5 = 0 || (R1 = R481 && R480 - R481 = -1)) && (R482 = 0 || (R6 = 0 && R1 < 0)) && (R484 = 0 || (R6 = 0 && R1 < 0)) && (R489 = R565 || (R476 = 0 && R489 = R573)) && (R489 = R567 || (R476 = 0 && R489 = R573)) && (R489 = R569 || (R476 = 0 && R489 = R573)) && (R570 = 0 || (R477 = 0 && R573 = 0));
// End of Parikh automata intersection problem
