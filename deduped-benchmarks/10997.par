// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R100, R101, R102, R103, R104, R105, R106, R107, R108, R109, R110, R111, R112, R113, R114, R2, R3, R4, R5, R62, R63, R64, R65, R66, R67, R68, R69, R7, R70, R71, R72, R73, R74, R75, R76, R77, R78, R79, R8, R80, R81, R82, R83, R84, R85, R86, R87, R88, R89, R90, R91, R92, R93, R94, R95, R96, R97, R98, R99;
synchronised {  // Automata constraining c5
automaton c5_0 {
  init s0;
  s0 -> s1 [99, 99];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R62 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s0 [0, 65535] { R73 += 1, R74 += 1 };
  s0 -> s1 [32, 32] { R74 += 1 };
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value2_4 {
  init s0;
  s0 -> s0 [0, 65535] { R75 += 1, R76 += 1 };
  s0 -> s1 [0, 65535] { R76 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R76 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 8] { R78 += 1 };
  s0 -> s0 [0, 65535] { R77 += 1, R78 += 1 };
  s0 -> s2 [9, 13] { R78 += 1 };
  s0 -> s1 [14, 31] { R78 += 1 };
  s0 -> s2 [32, 32] { R78 += 1 };
  s0 -> s1 [33, 65535] { R78 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R78 += 1 };
  s2 -> s1 [0, 65535] { R78 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 65535] { R80 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R79 += 1, R80 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R80 += 1, R5 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 64] { R92 += 1 };
  s0 -> s0 [0, 65535] { R91 += 1, R92 += 1 };
  s0 -> s2 [67, 67] { R92 += 1 };
  s0 -> s1 [68, 65535] { R92 += 1 };
  s1 -> s1 [0, 64] { R92 += 1 };
  s1 -> s2 [67, 67] { R92 += 1 };
  s1 -> s1 [68, 65535] { R92 += 1 };
  s2 -> s2 [0, 64] { R92 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [67, 65535] { R92 += 1 };
  accepting s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R93 += 1, R94 += 1 };
  s0 -> s1 [0, 65535] { R94 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R94 += 1, R0 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 66] { R96 += 1, R8 += 1 };
  s0 -> s2 [0, 65535] { R96 += 1, R7 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R95 += 1, R96 += 1 };
  s0 -> s3 [67, 67] { R96 += 1 };
  s0 -> s1 [68, 65535] { R96 += 1, R8 += 1 };
  s1 -> s1 [0, 66] { R96 += 1, R8 += 1 };
  s1 -> s3 [67, 67] { R96 += 1 };
  s1 -> s1 [68, 65535] { R96 += 1, R8 += 1 };
  s2 -> s1 [0, 66] { R96 += 1, R8 += 1 };
  s2 -> s2 [0, 65535] { R96 += 1, R7 += 1, R8 += 1 };
  s2 -> s3 [67, 67] { R96 += 1 };
  s2 -> s1 [68, 65535] { R96 += 1, R8 += 1 };
  s3 -> s3 [0, 65535] { R96 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 8] { R98 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R97 += 1, R98 += 1 };
  s0 -> s2 [0, 65535] { R98 += 1, R65 += 1, R66 += 1 };
  s0 -> s3 [9, 13] { R98 += 1, R66 += 1 };
  s0 -> s1 [14, 31] { R98 += 1, R66 += 1 };
  s0 -> s3 [32, 32] { R98 += 1, R66 += 1 };
  s0 -> s1 [33, 65535] { R98 += 1, R66 += 1 };
  s1 -> s1 [0, 65535] { R98 += 1, R66 += 1 };
  s1 -> s5 [0, 65535] { R98 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R98 += 1, R66 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R98 += 1, R65 += 1, R66 += 1 };
  s2 -> s3 [9, 13] { R98 += 1, R66 += 1 };
  s2 -> s1 [14, 31] { R98 += 1, R66 += 1 };
  s2 -> s3 [32, 32] { R98 += 1, R66 += 1 };
  s2 -> s1 [33, 65535] { R98 += 1, R66 += 1 };
  s3 -> s1 [0, 65535] { R98 += 1, R66 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R98 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 65535] { R100 += 1, R68 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R99 += 1, R100 += 1 };
  s0 -> s2 [0, 65535] { R100 += 1, R67 += 1, R68 += 1 };
  s1 -> s1 [0, 65535] { R100 += 1, R68 += 1, R2 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R100 += 1 };
  s2 -> s1 [0, 65535] { R100 += 1, R68 += 1, R2 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R100 += 1, R67 += 1, R68 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R100 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 8] { R102 += 1, R70 += 1 };
  s0 -> s2 [0, 65535] { R102 += 1, R69 += 1, R70 += 1 };
  s0 -> s0 [0, 65535] { R101 += 1, R102 += 1 };
  s0 -> s3 [9, 13] { R102 += 1, R70 += 1 };
  s0 -> s1 [14, 31] { R102 += 1, R70 += 1 };
  s0 -> s3 [32, 32] { R102 += 1, R70 += 1 };
  s0 -> s1 [33, 65535] { R102 += 1, R70 += 1 };
  s1 -> s1 [0, 65535] { R102 += 1, R70 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R102 += 1 };
  s2 -> s1 [0, 8] { R102 += 1, R70 += 1 };
  s2 -> s2 [0, 65535] { R102 += 1, R69 += 1, R70 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R102 += 1, R70 += 1 };
  s2 -> s1 [14, 31] { R102 += 1, R70 += 1 };
  s2 -> s3 [32, 32] { R102 += 1, R70 += 1 };
  s2 -> s1 [33, 65535] { R102 += 1, R70 += 1 };
  s3 -> s1 [0, 65535] { R102 += 1, R70 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R102 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 65535] { R104 += 1, R72 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R103 += 1, R104 += 1 };
  s0 -> s2 [0, 65535] { R104 += 1, R71 += 1, R72 += 1 };
  s1 -> s1 [0, 65535] { R104 += 1, R72 += 1, R3 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R104 += 1 };
  s2 -> s1 [0, 65535] { R104 += 1, R72 += 1, R3 += 1 };
  s2 -> s2 [0, 65535] { R104 += 1, R71 += 1, R72 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R104 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 66] { R106 += 1, R82 += 1 };
  s0 -> s0 [0, 65535] { R105 += 1, R106 += 1 };
  s0 -> s2 [0, 65535] { R106 += 1, R81 += 1, R82 += 1 };
  s0 -> s1 [68, 65535] { R106 += 1, R82 += 1 };
  s1 -> s1 [0, 66] { R106 += 1, R82 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R106 += 1 };
  s1 -> s1 [68, 65535] { R106 += 1, R82 += 1 };
  s2 -> s1 [0, 66] { R106 += 1, R82 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R106 += 1, R81 += 1, R82 += 1 };
  s2 -> s1 [68, 65535] { R106 += 1, R82 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 65535] { R108 += 1, R83 += 1, R84 += 1 };
  s0 -> s0 [0, 65535] { R107 += 1, R108 += 1 };
  s0 -> s2 [0, 65535] { R108 += 1, R84 += 1, R63 += 1 };
  s1 -> s1 [0, 65535] { R108 += 1, R83 += 1, R84 += 1 };
  s1 -> s2 [0, 65535] { R108 += 1, R84 += 1, R63 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R108 += 1, R84 += 1, R63 += 1 };
  s2 -> s3 [0, 65535] { R108 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R108 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 67] { R110 += 1, R86 += 1 };
  s0 -> s2 [0, 65535] { R110 += 1, R85 += 1, R86 += 1 };
  s0 -> s0 [0, 65535] { R109 += 1, R110 += 1 };
  s0 -> s1 [71, 65535] { R110 += 1, R86 += 1 };
  s1 -> s1 [0, 67] { R110 += 1, R86 += 1 };
  s1 -> s1 [0, 65535] { R110 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [71, 65535] { R110 += 1, R86 += 1 };
  s2 -> s1 [0, 67] { R110 += 1, R86 += 1 };
  s2 -> s2 [0, 65535] { R110 += 1, R85 += 1, R86 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [71, 65535] { R110 += 1, R86 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 65535] { R112 += 1, R87 += 1, R88 += 1 };
  s0 -> s2 [0, 65535] { R112 += 1, R88 += 1, R64 += 1 };
  s0 -> s0 [0, 65535] { R111 += 1, R112 += 1 };
  s1 -> s1 [0, 65535] { R112 += 1, R87 += 1, R88 += 1 };
  s1 -> s2 [0, 65535] { R112 += 1, R88 += 1, R64 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R112 += 1, R88 += 1, R64 += 1 };
  s2 -> s3 [0, 65535] { R112 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R112 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 66] { R114 += 1, R90 += 1 };
  s0 -> s2 [0, 65535] { R114 += 1, R89 += 1, R90 += 1 };
  s0 -> s0 [0, 65535] { R113 += 1, R114 += 1 };
  s0 -> s3 [67, 67] { R114 += 1, R90 += 1 };
  s0 -> s4 [67, 67] { R114 += 1, R90 += 1 };
  s0 -> s1 [71, 65535] { R114 += 1, R90 += 1 };
  s1 -> s1 [0, 66] { R114 += 1, R90 += 1 };
  s1 -> s1 [0, 65535] { R114 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [67, 67] { R114 += 1, R90 += 1 };
  s1 -> s4 [67, 67] { R114 += 1, R90 += 1 };
  s1 -> s1 [71, 65535] { R114 += 1, R90 += 1 };
  s2 -> s1 [0, 66] { R114 += 1, R90 += 1 };
  s2 -> s2 [0, 65535] { R114 += 1, R89 += 1, R90 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [67, 67] { R114 += 1, R90 += 1 };
  s2 -> s4 [67, 67] { R114 += 1, R90 += 1 };
  s2 -> s1 [71, 65535] { R114 += 1, R90 += 1 };
  s3 -> s3 [0, 67] { R114 += 1, R90 += 1 };
  s3 -> s3 [0, 65535] { R114 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [71, 65535] { R114 += 1, R90 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R114 += 1 };
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
};
constraint R0 = R68 && R1 - R114 = 1 && R7 = 0 && R65 - R68 = -1 && R66 = R68 && R67 - R68 = -1 && R69 = 0 && R70 = 1 && R71 = 0 && R72 = 1 && R73 = R114 && R74 - R114 = 1 && R75 = R114 && R76 - R114 = 1 && R77 = 0 && R78 = 1 && R79 = 0 && R80 = 1 && R91 = 0 && R92 = R114 && R93 = 0 && R94 = R114 && R95 = 0 && R96 = R114 && R97 = 0 && R98 = R114 && R99 = 0 && R100 = R114 && R101 = 0 && R102 = R114 && R103 = 0 && R104 = R114 && R105 = 0 && R106 = R114 && R107 = 0 && R108 = R114 && R109 = 0 && R110 = R114 && R111 = 0 && R112 = R114 && R113 = 0 && R8 < R68 && -2 < R8 && R62 < 1 && 0 < R68 && -1 < R114 && (R64 != 0 || ((R87 != 0 || R8 - R88 = -1 || R8 < 0) && (R87 = 0 || R8 < 0))) && (R64 != 0 || ((R89 != 0 || R8 - R90 = -1 || R8 < 0) && (R89 = 0 || R8 < 0))) && (R68 != R82 || R8 - R81 = -1 || ((R63 != 0 || R82 - R8 < 2) && (R63 = 0 || R82 - R8 < 1 || R82 < 1))) && (R68 != R84 || R8 - R83 = -1 || ((R63 != 0 || R84 - R8 < 2) && (R63 = 0 || R84 - R8 < 1 || R84 < 1))) && (R68 != R86 || R8 - R85 = -1 || ((R63 != 0 || R86 - R8 < 2) && (R63 = 0 || R86 - R8 < 1 || R86 < 1))) && (R64 = 0 || (R8 - R88 = -1 && R87 = 0)) && (R64 = 0 || (R8 - R90 = -1 && R89 = 0)) && (R68 = R82 || (R8 - R68 = -1 && R63 = 0)) && (R68 = R84 || (R8 - R68 = -1 && R63 = 0)) && (R68 = R86 || (R8 - R68 = -1 && R63 = 0));
// End of Parikh automata intersection problem
