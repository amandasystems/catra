// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R12, R16, R160, R161, R164, R165, R166, R167, R168, R169, R17, R170, R171, R172, R173, R174, R175, R176, R177, R178, R179, R180, R181, R182, R183, R184, R185, R186, R187, R188, R189, R190, R191, R192, R193, R194, R195, R196, R197, R198, R199, R2, R200, R201, R202, R203, R204, R205, R206, R207, R208, R209, R210, R211, R212, R213, R214, R215, R216, R217, R218, R219, R220, R221, R222, R223, R224, R225, R226, R227, R228, R229, R230, R231, R232, R3, R4, R5, R6, R7, R8, R9;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [70, 70];
  s0 -> s0 [71, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [70, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R160 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 69];
  s0 -> s0 [0, 65535] { R161 += 1 };
  s0 -> s2 [70, 70];
  s0 -> s1 [71, 65535];
  s1 -> s1 [0, 69];
  s1 -> s2 [70, 70];
  s1 -> s1 [71, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R176 += 1 };
  s0 -> s0 [0, 65535] { R175 += 1, R176 += 1 };
  s0 -> s2 [9, 13] { R176 += 1 };
  s0 -> s1 [14, 31] { R176 += 1 };
  s0 -> s2 [32, 32] { R176 += 1 };
  s0 -> s1 [33, 65535] { R176 += 1 };
  s1 -> s1 [0, 65535] { R176 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R176 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s0 [0, 65535] { R177 += 1, R178 += 1 };
  s0 -> s1 [0, 65535] { R178 += 1, R7 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R178 += 1, R7 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R180 += 1 };
  s0 -> s0 [0, 65535] { R179 += 1, R180 += 1 };
  s0 -> s2 [9, 13] { R180 += 1 };
  s0 -> s1 [14, 31] { R180 += 1 };
  s0 -> s2 [32, 32] { R180 += 1 };
  s0 -> s1 [33, 65535] { R180 += 1 };
  s1 -> s1 [0, 65535] { R180 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R180 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R182 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R181 += 1, R182 += 1 };
  s1 -> s1 [0, 65535] { R182 += 1, R8 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 69] { R200 += 1 };
  s0 -> s0 [0, 65535] { R199 += 1, R200 += 1 };
  s0 -> s1 [71, 65535] { R200 += 1 };
  s1 -> s1 [0, 69] { R200 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [71, 65535] { R200 += 1 };
  accepting s0, s1;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 65535] { R202 += 1, R165 += 1 };
  s0 -> s0 [0, 65535] { R201 += 1, R202 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R202 += 1, R165 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 70] { R204 += 1 };
  s0 -> s0 [0, 65535] { R203 += 1, R204 += 1 };
  s0 -> s1 [91, 65535] { R204 += 1 };
  s1 -> s1 [0, 70] { R204 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [91, 65535] { R204 += 1 };
  accepting s0, s1;
};
automaton value2_11 {
  init s0;
  s0 -> s0 [0, 65535] { R229 += 1, R230 += 1 };
  s0 -> s1 [0, 65535] { R230 += 1, R166 += 1 };
  s1 -> s1 [0, 65535] { R230 += 1, R166 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 69] { R232 += 1 };
  s0 -> s0 [0, 65535] { R231 += 1, R232 += 1 };
  s0 -> s2 [70, 70] { R232 += 1 };
  s0 -> s3 [70, 70] { R232 += 1 };
  s0 -> s1 [91, 65535] { R232 += 1 };
  s1 -> s1 [0, 69] { R232 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R232 += 1 };
  s1 -> s3 [70, 70] { R232 += 1 };
  s1 -> s1 [91, 65535] { R232 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 70] { R232 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [91, 65535] { R232 += 1 };
  accepting s0, s1, s2, s3;
};
};
synchronised {  // Automata constraining P42
automaton P42_0 {
  init s0;
  s0 -> s1 [102, 102];
  accepting s1;
};
};
synchronised {  // Automata constraining value1
automaton value1_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 60];
  s0 -> s1 [61, 61];
  s0 -> s0 [62, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 65535];
  accepting s1;
};
automaton value1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value1_2 {
  init s0;
  s0 -> s1 [0, 60] { R17 += 1 };
  s0 -> s0 [0, 65535] { R16 += 1, R17 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535] { R17 += 1 };
  s1 -> s1 [0, 60] { R17 += 1 };
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535] { R17 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value1_3 {
  init s0;
  s0 -> s0 [0, 65535] { R187 += 1, R188 += 1 };
  s0 -> s1 [0, 65535] { R188 += 1, R0 += 1 };
  s1 -> s1 [0, 65535] { R188 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_4 {
  init s0;
  s0 -> s1 [0, 64] { R206 += 1 };
  s0 -> s0 [0, 65535] { R205 += 1, R206 += 1 };
  s0 -> s2 [66, 66] { R206 += 1 };
  s0 -> s1 [67, 65535] { R206 += 1 };
  s1 -> s1 [0, 64] { R206 += 1 };
  s1 -> s2 [66, 66] { R206 += 1 };
  s1 -> s1 [67, 65535] { R206 += 1 };
  s2 -> s2 [0, 64] { R206 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [66, 65535] { R206 += 1 };
  accepting s2;
};
automaton value1_5 {
  init s0;
  s0 -> s1 [0, 65535] { R208 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R207 += 1, R208 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R208 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_6 {
  init s0;
  s0 -> s1 [0, 65] { R210 += 1 };
  s0 -> s2 [0, 65535] { R210 += 1, R12 += 1 };
  s0 -> s0 [0, 65535] { R209 += 1, R210 += 1 };
  s0 -> s3 [66, 66] { R210 += 1 };
  s0 -> s1 [67, 65535] { R210 += 1 };
  s1 -> s1 [0, 65] { R210 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [66, 66] { R210 += 1 };
  s1 -> s1 [67, 65535] { R210 += 1 };
  s2 -> s1 [0, 65] { R210 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R210 += 1, R12 += 1 };
  s2 -> s3 [66, 66] { R210 += 1 };
  s2 -> s1 [67, 65535] { R210 += 1 };
  s3 -> s3 [0, 65535] { R210 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value1_7 {
  init s0;
  s0 -> s1 [0, 8] { R212 += 1, R168 += 1 };
  s0 -> s0 [0, 65535] { R211 += 1, R212 += 1 };
  s0 -> s2 [0, 65535] { R212 += 1, R167 += 1, R168 += 1 };
  s0 -> s3 [9, 13] { R212 += 1, R168 += 1 };
  s0 -> s1 [14, 31] { R212 += 1, R168 += 1 };
  s0 -> s3 [32, 32] { R212 += 1, R168 += 1 };
  s0 -> s1 [33, 65535] { R212 += 1, R168 += 1 };
  s1 -> s1 [0, 65535] { R212 += 1, R168 += 1 };
  s1 -> s5 [0, 65535] { R212 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R212 += 1, R168 += 1 };
  s2 -> s2 [0, 65535] { R212 += 1, R167 += 1, R168 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R212 += 1, R168 += 1 };
  s2 -> s1 [14, 31] { R212 += 1, R168 += 1 };
  s2 -> s3 [32, 32] { R212 += 1, R168 += 1 };
  s2 -> s1 [33, 65535] { R212 += 1, R168 += 1 };
  s3 -> s1 [0, 65535] { R212 += 1, R168 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R212 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value1_8 {
  init s0;
  s0 -> s1 [0, 65535] { R214 += 1, R170 += 1, R5 += 1 };
  s0 -> s2 [0, 65535] { R214 += 1, R169 += 1, R170 += 1 };
  s0 -> s0 [0, 65535] { R213 += 1, R214 += 1 };
  s1 -> s1 [0, 65535] { R214 += 1, R170 += 1, R5 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R214 += 1 };
  s2 -> s1 [0, 65535] { R214 += 1, R170 += 1, R5 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R214 += 1, R169 += 1, R170 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R214 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_9 {
  init s0;
  s0 -> s1 [0, 8] { R216 += 1, R172 += 1 };
  s0 -> s0 [0, 65535] { R215 += 1, R216 += 1 };
  s0 -> s2 [0, 65535] { R216 += 1, R171 += 1, R172 += 1 };
  s0 -> s3 [9, 13] { R216 += 1, R172 += 1 };
  s0 -> s1 [14, 31] { R216 += 1, R172 += 1 };
  s0 -> s3 [32, 32] { R216 += 1, R172 += 1 };
  s0 -> s1 [33, 65535] { R216 += 1, R172 += 1 };
  s1 -> s1 [0, 65535] { R216 += 1, R172 += 1 };
  s1 -> s5 [0, 65535] { R216 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R216 += 1, R172 += 1 };
  s2 -> s2 [0, 65535] { R216 += 1, R171 += 1, R172 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R216 += 1, R172 += 1 };
  s2 -> s1 [14, 31] { R216 += 1, R172 += 1 };
  s2 -> s3 [32, 32] { R216 += 1, R172 += 1 };
  s2 -> s1 [33, 65535] { R216 += 1, R172 += 1 };
  s3 -> s1 [0, 65535] { R216 += 1, R172 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R216 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value1_10 {
  init s0;
  s0 -> s1 [0, 65535] { R218 += 1, R173 += 1, R174 += 1 };
  s0 -> s0 [0, 65535] { R217 += 1, R218 += 1 };
  s0 -> s2 [0, 65535] { R218 += 1, R174 += 1, R6 += 1 };
  s1 -> s1 [0, 65535] { R218 += 1, R173 += 1, R174 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R218 += 1, R174 += 1, R6 += 1 };
  s2 -> s3 [0, 65535] { R218 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R218 += 1, R174 += 1, R6 += 1 };
  s3 -> s3 [0, 65535] { R218 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_11 {
  init s0;
  s0 -> s1 [0, 65] { R220 += 1, R190 += 1 };
  s0 -> s2 [0, 65535] { R220 += 1, R189 += 1, R190 += 1 };
  s0 -> s0 [0, 65535] { R219 += 1, R220 += 1 };
  s0 -> s3 [66, 66] { R220 += 1, R190 += 1 };
  s0 -> s1 [67, 65535] { R220 += 1, R190 += 1 };
  s1 -> s1 [0, 65] { R220 += 1, R190 += 1 };
  s1 -> s3 [66, 66] { R220 += 1, R190 += 1 };
  s1 -> s1 [67, 65535] { R220 += 1, R190 += 1 };
  s2 -> s1 [0, 65] { R220 += 1, R190 += 1 };
  s2 -> s2 [0, 65535] { R220 += 1, R189 += 1, R190 += 1 };
  s2 -> s3 [66, 66] { R220 += 1, R190 += 1 };
  s2 -> s1 [67, 65535] { R220 += 1, R190 += 1 };
  s3 -> s3 [0, 65535] { R220 += 1, R190 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R220 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R220 += 1 };
  accepting s3, s4, s5;
};
automaton value1_12 {
  init s0;
  s0 -> s0 [0, 65535] { R221 += 1, R222 += 1 };
  s0 -> s1 [0, 65535] { R222 += 1, R192 += 1, R1 += 1 };
  s0 -> s2 [0, 65535] { R222 += 1, R191 += 1, R192 += 1 };
  s1 -> s1 [0, 65535] { R222 += 1, R192 += 1, R1 += 1 };
  s1 -> s4 [0, 65535] { R222 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R222 += 1, R192 += 1, R1 += 1 };
  s2 -> s2 [0, 65535] { R222 += 1, R191 += 1, R192 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R222 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_13 {
  init s0;
  s0 -> s1 [0, 65] { R224 += 1, R194 += 1 };
  s0 -> s2 [0, 65535] { R224 += 1, R194 += 1, R9 += 1 };
  s0 -> s3 [0, 65535] { R224 += 1, R193 += 1, R194 += 1 };
  s0 -> s0 [0, 65535] { R223 += 1, R224 += 1 };
  s0 -> s4 [66, 66] { R224 += 1, R194 += 1 };
  s0 -> s1 [67, 65535] { R224 += 1, R194 += 1 };
  s1 -> s1 [0, 65] { R224 += 1, R194 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R224 += 1 };
  s1 -> s4 [66, 66] { R224 += 1, R194 += 1 };
  s1 -> s1 [67, 65535] { R224 += 1, R194 += 1 };
  s2 -> s1 [0, 65] { R224 += 1, R194 += 1 };
  s2 -> s2 [0, 65535] { R224 += 1, R194 += 1, R9 += 1 };
  s2 -> s6 [0, 65535] { R224 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [66, 66] { R224 += 1, R194 += 1 };
  s2 -> s1 [67, 65535] { R224 += 1, R194 += 1 };
  s3 -> s1 [0, 65] { R224 += 1, R194 += 1 };
  s3 -> s2 [0, 65535] { R224 += 1, R194 += 1, R9 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R224 += 1, R193 += 1, R194 += 1 };
  s3 -> s4 [66, 66] { R224 += 1, R194 += 1 };
  s3 -> s1 [67, 65535] { R224 += 1, R194 += 1 };
  s4 -> s4 [0, 65535] { R224 += 1, R194 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R224 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton value1_14 {
  init s0;
  s0 -> s1 [0, 65] { R226 += 1, R196 += 1, R184 += 1 };
  s0 -> s2 [0, 65535] { R226 += 1, R195 += 1, R196 += 1 };
  s0 -> s3 [0, 65535] { R226 += 1, R196 += 1, R183 += 1, R184 += 1 };
  s0 -> s0 [0, 65535] { R225 += 1, R226 += 1 };
  s0 -> s4 [66, 66] { R226 += 1, R196 += 1, R184 += 1 };
  s0 -> s1 [67, 65535] { R226 += 1, R196 += 1, R184 += 1 };
  s1 -> s1 [0, 65] { R226 += 1, R196 += 1, R184 += 1 };
  s1 -> s4 [66, 66] { R226 += 1, R196 += 1, R184 += 1 };
  s1 -> s1 [67, 65535] { R226 += 1, R196 += 1, R184 += 1 };
  s2 -> s1 [0, 65] { R226 += 1, R196 += 1, R184 += 1 };
  s2 -> s2 [0, 65535] { R226 += 1, R195 += 1, R196 += 1 };
  s2 -> s3 [0, 65535] { R226 += 1, R196 += 1, R183 += 1, R184 += 1 };
  s2 -> s4 [66, 66] { R226 += 1, R196 += 1, R184 += 1 };
  s2 -> s1 [67, 65535] { R226 += 1, R196 += 1, R184 += 1 };
  s3 -> s1 [0, 65] { R226 += 1, R196 += 1, R184 += 1 };
  s3 -> s3 [0, 65535] { R226 += 1, R196 += 1, R183 += 1, R184 += 1 };
  s3 -> s4 [66, 66] { R226 += 1, R196 += 1, R184 += 1 };
  s3 -> s1 [67, 65535] { R226 += 1, R196 += 1, R184 += 1 };
  s4 -> s5 [0, 65535] { R226 += 1, R196 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R226 += 1, R196 += 1, R184 += 1 };
  s4 -> s7 [0, 65535] { R226 += 1 };
  s5 -> s5 [0, 65535] { R226 += 1, R196 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R226 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R226 += 1 };
  accepting s4, s5, s6, s7;
};
automaton value1_15 {
  init s0;
  s0 -> s1 [0, 65535] { R228 += 1, R197 += 1, R198 += 1 };
  s0 -> s0 [0, 65535] { R227 += 1, R228 += 1 };
  s0 -> s2 [0, 65535] { R228 += 1, R198 += 1, R186 += 1, R164 += 1 };
  s0 -> s3 [0, 65535] { R228 += 1, R198 += 1, R185 += 1, R186 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R228 += 1, R197 += 1, R198 += 1 };
  s1 -> s2 [0, 65535] { R228 += 1, R198 += 1, R186 += 1, R164 += 1 };
  s1 -> s3 [0, 65535] { R228 += 1, R198 += 1, R185 += 1, R186 += 1 };
  s2 -> s6 [0, 65535] { R228 += 1, R198 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R228 += 1 };
  s2 -> s2 [0, 65535] { R228 += 1, R198 += 1, R186 += 1, R164 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R228 += 1 };
  s3 -> s2 [0, 65535] { R228 += 1, R198 += 1, R186 += 1, R164 += 1 };
  s3 -> s3 [0, 65535] { R228 += 1, R198 += 1, R185 += 1, R186 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R228 += 1 };
  s6 -> s6 [0, 65535] { R228 += 1, R198 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R228 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R1 = R184 && R2 = R198 && R3 = R188 && R4 = R204 && R16 = 0 && R17 = R228 && R167 - R198 = -1 && R168 = R198 && R169 - R198 = -1 && R170 = R198 && R171 = 0 && R172 = 1 && R173 = 0 && R174 = 1 && R175 - R204 = -1 && R176 = R204 && R177 - R204 = -1 && R178 = R204 && R179 = 0 && R180 = 1 && R181 = 0 && R182 = 1 && R183 = 0 && R187 - R228 = 1 && R189 = 0 && R190 = R198 && R191 = 0 && R192 = R198 && R193 = 0 && R194 = R198 && R195 = 0 && R196 = R198 && R197 = 0 && R199 = 0 && R200 = R204 && R201 = 0 && R202 = R204 && R203 = 0 && R205 = 0 && R206 = R228 && R207 = 0 && R208 = R228 && R209 = 0 && R210 = R228 && R211 = 0 && R212 = R228 && R213 = 0 && R214 = R228 && R215 = 0 && R216 = R228 && R217 = 0 && R218 = R228 && R219 = 0 && R220 = R228 && R221 = 0 && R222 = R228 && R223 = 0 && R224 = R228 && R225 = 0 && R226 = R228 && R227 = 0 && R0 != 0 && R9 < 1 && R12 < 1 && R160 < 1 && R161 < 1 && -1 < R184 && R228 < R188 && 0 < R198 && 0 < R204 && -1 < R228 && (R185 != 0 || R184 = R186 || (R164 = 0 && R184 = 0)) && (R166 = 0 || (R229 = 0 && R230 = 0 && R231 = 0 && R232 = 0)) && (R185 = 0 || (R164 = 0 && R184 = 0));
// End of Parikh automata intersection problem
