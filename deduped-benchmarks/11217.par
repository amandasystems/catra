// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R12, R16, R17, R2, R3, R4, R5, R500, R501, R504, R505, R506, R507, R508, R509, R510, R511, R512, R513, R514, R515, R516, R517, R518, R519, R520, R521, R522, R523, R524, R525, R526, R527, R528, R529, R530, R531, R532, R533, R534, R535, R536, R537, R538, R539, R540, R541, R542, R543, R544, R545, R546, R547, R548, R549, R550, R551, R552, R553, R554, R555, R556, R557, R558, R559, R560, R561, R562, R563, R564, R565, R566, R567, R568, R569, R570, R571, R572, R573, R574, R575, R576, R577, R578, R579, R580, R581, R582, R583, R584, R585, R586, R587, R588, R589, R590, R591, R592, R593, R594, R595, R596, R597, R598, R599, R6, R600, R7, R8, R9;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [70, 70];
  s0 -> s0 [71, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [70, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R500 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 69];
  s0 -> s0 [0, 65535] { R501 += 1 };
  s0 -> s2 [70, 70];
  s0 -> s1 [71, 65535];
  s1 -> s1 [0, 69];
  s1 -> s2 [70, 70];
  s1 -> s1 [71, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R518 += 1 };
  s0 -> s0 [0, 65535] { R517 += 1, R518 += 1 };
  s0 -> s2 [9, 13] { R518 += 1 };
  s0 -> s1 [14, 31] { R518 += 1 };
  s0 -> s2 [32, 32] { R518 += 1 };
  s0 -> s1 [33, 65535] { R518 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R518 += 1 };
  s2 -> s1 [0, 65535] { R518 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R520 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R519 += 1, R520 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R520 += 1, R7 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R522 += 1 };
  s0 -> s0 [0, 65535] { R521 += 1, R522 += 1 };
  s0 -> s2 [9, 13] { R522 += 1 };
  s0 -> s1 [14, 31] { R522 += 1 };
  s0 -> s2 [32, 32] { R522 += 1 };
  s0 -> s1 [33, 65535] { R522 += 1 };
  s1 -> s1 [0, 65535] { R522 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R522 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R524 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R523 += 1, R524 += 1 };
  s1 -> s1 [0, 65535] { R524 += 1, R8 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 69] { R528 += 1 };
  s0 -> s0 [0, 65535] { R527 += 1, R528 += 1 };
  s0 -> s1 [71, 65535] { R528 += 1 };
  s1 -> s1 [0, 69] { R528 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [71, 65535] { R528 += 1 };
  accepting s0, s1;
};
automaton value2_9 {
  init s0;
  s0 -> s0 [0, 65535] { R529 += 1, R530 += 1 };
  s0 -> s1 [0, 65535] { R530 += 1, R507 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R530 += 1, R507 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 70] { R532 += 1 };
  s0 -> s0 [0, 65535] { R531 += 1, R532 += 1 };
  s0 -> s1 [91, 65535] { R532 += 1 };
  s1 -> s1 [0, 70] { R532 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [91, 65535] { R532 += 1 };
  accepting s0, s1;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 65535] { R544 += 1, R508 += 1 };
  s0 -> s0 [0, 65535] { R543 += 1, R544 += 1 };
  s1 -> s1 [0, 65535] { R544 += 1, R508 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 69] { R546 += 1 };
  s0 -> s0 [0, 65535] { R545 += 1, R546 += 1 };
  s0 -> s2 [70, 70] { R546 += 1 };
  s0 -> s3 [70, 70] { R546 += 1 };
  s0 -> s1 [91, 65535] { R546 += 1 };
  s1 -> s1 [0, 69] { R546 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R546 += 1 };
  s1 -> s3 [70, 70] { R546 += 1 };
  s1 -> s1 [91, 65535] { R546 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 70] { R546 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [91, 65535] { R546 += 1 };
  accepting s0, s1, s2, s3;
};
};
synchronised {  // Automata constraining P71
automaton P71_0 {
  init s0;
  s0 -> s1 [98, 98];
  accepting s1;
};
};
synchronised {  // Automata constraining P42
automaton P42_0 {
  init s0;
  s0 -> s1 [102, 102];
  accepting s1;
};
};
synchronised {  // Automata constraining value1
automaton value1_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 60];
  s0 -> s1 [61, 61];
  s0 -> s0 [62, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 65535];
  accepting s1;
};
automaton value1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value1_2 {
  init s0;
  s0 -> s1 [0, 60] { R17 += 1 };
  s0 -> s0 [0, 65535] { R16 += 1, R17 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535] { R17 += 1 };
  s1 -> s1 [0, 60] { R17 += 1 };
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535] { R17 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value1_3 {
  init s0;
  s0 -> s0 [0, 65535] { R525 += 1, R526 += 1 };
  s0 -> s1 [0, 65535] { R526 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R526 += 1, R0 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_4 {
  init s0;
  s0 -> s1 [0, 64] { R568 += 1 };
  s0 -> s0 [0, 65535] { R567 += 1, R568 += 1 };
  s0 -> s2 [66, 66] { R568 += 1 };
  s0 -> s1 [67, 65535] { R568 += 1 };
  s1 -> s1 [0, 64] { R568 += 1 };
  s1 -> s2 [66, 66] { R568 += 1 };
  s1 -> s1 [67, 65535] { R568 += 1 };
  s2 -> s2 [0, 64] { R568 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [66, 65535] { R568 += 1 };
  accepting s2;
};
automaton value1_5 {
  init s0;
  s0 -> s1 [0, 65535] { R570 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R569 += 1, R570 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R570 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_6 {
  init s0;
  s0 -> s1 [0, 65] { R572 += 1 };
  s0 -> s0 [0, 65535] { R571 += 1, R572 += 1 };
  s0 -> s2 [0, 65535] { R572 += 1, R12 += 1 };
  s0 -> s3 [66, 66] { R572 += 1 };
  s0 -> s1 [67, 65535] { R572 += 1 };
  s1 -> s1 [0, 65] { R572 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [66, 66] { R572 += 1 };
  s1 -> s1 [67, 65535] { R572 += 1 };
  s2 -> s1 [0, 65] { R572 += 1 };
  s2 -> s2 [0, 65535] { R572 += 1, R12 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [66, 66] { R572 += 1 };
  s2 -> s1 [67, 65535] { R572 += 1 };
  s3 -> s3 [0, 65535] { R572 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value1_7 {
  init s0;
  s0 -> s1 [0, 8] { R574 += 1, R510 += 1 };
  s0 -> s0 [0, 65535] { R573 += 1, R574 += 1 };
  s0 -> s2 [0, 65535] { R574 += 1, R509 += 1, R510 += 1 };
  s0 -> s3 [9, 13] { R574 += 1, R510 += 1 };
  s0 -> s1 [14, 31] { R574 += 1, R510 += 1 };
  s0 -> s3 [32, 32] { R574 += 1, R510 += 1 };
  s0 -> s1 [33, 65535] { R574 += 1, R510 += 1 };
  s1 -> s5 [0, 65535] { R574 += 1 };
  s1 -> s1 [0, 65535] { R574 += 1, R510 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R574 += 1, R510 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R574 += 1, R509 += 1, R510 += 1 };
  s2 -> s3 [9, 13] { R574 += 1, R510 += 1 };
  s2 -> s1 [14, 31] { R574 += 1, R510 += 1 };
  s2 -> s3 [32, 32] { R574 += 1, R510 += 1 };
  s2 -> s1 [33, 65535] { R574 += 1, R510 += 1 };
  s3 -> s1 [0, 65535] { R574 += 1, R510 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R574 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value1_8 {
  init s0;
  s0 -> s1 [0, 65535] { R576 += 1, R512 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R575 += 1, R576 += 1 };
  s0 -> s2 [0, 65535] { R576 += 1, R511 += 1, R512 += 1 };
  s1 -> s1 [0, 65535] { R576 += 1, R512 += 1, R5 += 1 };
  s1 -> s4 [0, 65535] { R576 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R576 += 1, R512 += 1, R5 += 1 };
  s2 -> s2 [0, 65535] { R576 += 1, R511 += 1, R512 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R576 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_9 {
  init s0;
  s0 -> s1 [0, 8] { R578 += 1, R514 += 1 };
  s0 -> s0 [0, 65535] { R577 += 1, R578 += 1 };
  s0 -> s2 [0, 65535] { R578 += 1, R513 += 1, R514 += 1 };
  s0 -> s3 [9, 13] { R578 += 1, R514 += 1 };
  s0 -> s1 [14, 31] { R578 += 1, R514 += 1 };
  s0 -> s3 [32, 32] { R578 += 1, R514 += 1 };
  s0 -> s1 [33, 65535] { R578 += 1, R514 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R578 += 1, R514 += 1 };
  s1 -> s5 [0, 65535] { R578 += 1 };
  s2 -> s1 [0, 8] { R578 += 1, R514 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R578 += 1, R513 += 1, R514 += 1 };
  s2 -> s3 [9, 13] { R578 += 1, R514 += 1 };
  s2 -> s1 [14, 31] { R578 += 1, R514 += 1 };
  s2 -> s3 [32, 32] { R578 += 1, R514 += 1 };
  s2 -> s1 [33, 65535] { R578 += 1, R514 += 1 };
  s3 -> s1 [0, 65535] { R578 += 1, R514 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R578 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value1_10 {
  init s0;
  s0 -> s1 [0, 65535] { R580 += 1, R515 += 1, R516 += 1 };
  s0 -> s2 [0, 65535] { R580 += 1, R516 += 1, R6 += 1 };
  s0 -> s0 [0, 65535] { R579 += 1, R580 += 1 };
  s1 -> s1 [0, 65535] { R580 += 1, R515 += 1, R516 += 1 };
  s1 -> s2 [0, 65535] { R580 += 1, R516 += 1, R6 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R580 += 1 };
  s2 -> s2 [0, 65535] { R580 += 1, R516 += 1, R6 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R580 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_11 {
  init s0;
  s0 -> s1 [0, 65535] { R582 += 1, R539 += 1, R540 += 1 };
  s0 -> s2 [0, 65535] { R582 += 1, R540 += 1, R506 += 1 };
  s0 -> s0 [0, 65535] { R581 += 1, R582 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R582 += 1, R539 += 1, R540 += 1 };
  s1 -> s2 [0, 65535] { R582 += 1, R540 += 1, R506 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R582 += 1, R540 += 1, R506 += 1 };
  s2 -> s4 [0, 65535] { R582 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R582 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_12 {
  init s0;
  s0 -> s1 [0, 65] { R584 += 1, R542 += 1 };
  s0 -> s2 [0, 65535] { R584 += 1, R541 += 1, R542 += 1 };
  s0 -> s0 [0, 65535] { R583 += 1, R584 += 1 };
  s0 -> s3 [66, 66] { R584 += 1, R542 += 1 };
  s0 -> s4 [66, 66] { R584 += 1, R542 += 1 };
  s0 -> s1 [74, 65535] { R584 += 1, R542 += 1 };
  s1 -> s1 [0, 65] { R584 += 1, R542 += 1 };
  s1 -> s1 [0, 65535] { R584 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [66, 66] { R584 += 1, R542 += 1 };
  s1 -> s4 [66, 66] { R584 += 1, R542 += 1 };
  s1 -> s1 [74, 65535] { R584 += 1, R542 += 1 };
  s2 -> s1 [0, 65] { R584 += 1, R542 += 1 };
  s2 -> s2 [0, 65535] { R584 += 1, R541 += 1, R542 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [66, 66] { R584 += 1, R542 += 1 };
  s2 -> s4 [66, 66] { R584 += 1, R542 += 1 };
  s2 -> s1 [74, 65535] { R584 += 1, R542 += 1 };
  s3 -> s3 [0, 65535] { R584 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 66] { R584 += 1, R542 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R584 += 1 };
  s4 -> s4 [74, 65535] { R584 += 1, R542 += 1 };
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value1_13 {
  init s0;
  s0 -> s1 [0, 65] { R586 += 1, R552 += 1 };
  s0 -> s2 [0, 65535] { R586 += 1, R551 += 1, R552 += 1 };
  s0 -> s0 [0, 65535] { R585 += 1, R586 += 1 };
  s0 -> s3 [66, 66] { R586 += 1, R552 += 1 };
  s0 -> s1 [67, 65535] { R586 += 1, R552 += 1 };
  s1 -> s1 [0, 65] { R586 += 1, R552 += 1 };
  s1 -> s3 [66, 66] { R586 += 1, R552 += 1 };
  s1 -> s1 [67, 65535] { R586 += 1, R552 += 1 };
  s2 -> s1 [0, 65] { R586 += 1, R552 += 1 };
  s2 -> s2 [0, 65535] { R586 += 1, R551 += 1, R552 += 1 };
  s2 -> s3 [66, 66] { R586 += 1, R552 += 1 };
  s2 -> s1 [67, 65535] { R586 += 1, R552 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R586 += 1, R552 += 1 };
  s3 -> s5 [0, 65535] { R586 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R586 += 1 };
  accepting s3, s4, s5;
};
automaton value1_14 {
  init s0;
  s0 -> s1 [0, 65535] { R588 += 1, R553 += 1, R554 += 1 };
  s0 -> s0 [0, 65535] { R587 += 1, R588 += 1 };
  s0 -> s2 [0, 65535] { R588 += 1, R554 += 1, R1 += 1 };
  s1 -> s1 [0, 65535] { R588 += 1, R553 += 1, R554 += 1 };
  s1 -> s2 [0, 65535] { R588 += 1, R554 += 1, R1 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R588 += 1, R554 += 1, R1 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R588 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R588 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_15 {
  init s0;
  s0 -> s1 [0, 65] { R590 += 1, R556 += 1 };
  s0 -> s0 [0, 65535] { R589 += 1, R590 += 1 };
  s0 -> s2 [0, 65535] { R590 += 1, R555 += 1, R556 += 1 };
  s0 -> s3 [0, 65535] { R590 += 1, R556 += 1, R9 += 1 };
  s0 -> s4 [66, 66] { R590 += 1, R556 += 1 };
  s0 -> s1 [67, 65535] { R590 += 1, R556 += 1 };
  s1 -> s1 [0, 65] { R590 += 1, R556 += 1 };
  s1 -> s1 [0, 65535] { R590 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s4 [66, 66] { R590 += 1, R556 += 1 };
  s1 -> s1 [67, 65535] { R590 += 1, R556 += 1 };
  s2 -> s1 [0, 65] { R590 += 1, R556 += 1 };
  s2 -> s2 [0, 65535] { R590 += 1, R555 += 1, R556 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R590 += 1, R556 += 1, R9 += 1 };
  s2 -> s4 [66, 66] { R590 += 1, R556 += 1 };
  s2 -> s1 [67, 65535] { R590 += 1, R556 += 1 };
  s3 -> s1 [0, 65] { R590 += 1, R556 += 1 };
  s3 -> s5 [0, 65535] { R590 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R590 += 1, R556 += 1, R9 += 1 };
  s3 -> s4 [66, 66] { R590 += 1, R556 += 1 };
  s3 -> s1 [67, 65535] { R590 += 1, R556 += 1 };
  s4 -> s4 [0, 65535] { R590 += 1, R556 += 1 };
  s5 -> s5 [0, 65535] { R590 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton value1_16 {
  init s0;
  s0 -> s1 [0, 65] { R592 += 1, R558 += 1, R534 += 1 };
  s0 -> s0 [0, 65535] { R591 += 1, R592 += 1 };
  s0 -> s2 [0, 65535] { R592 += 1, R558 += 1, R533 += 1, R534 += 1 };
  s0 -> s3 [0, 65535] { R592 += 1, R557 += 1, R558 += 1 };
  s0 -> s1 [67, 65535] { R592 += 1, R558 += 1, R534 += 1 };
  s1 -> s1 [0, 65] { R592 += 1, R558 += 1, R534 += 1 };
  s1 -> s5 [0, 65535] { R592 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R592 += 1, R558 += 1 };
  s1 -> s1 [67, 65535] { R592 += 1, R558 += 1, R534 += 1 };
  s2 -> s1 [0, 65] { R592 += 1, R558 += 1, R534 += 1 };
  s2 -> s5 [0, 65535] { R592 += 1 };
  s2 -> s2 [0, 65535] { R592 += 1, R558 += 1, R533 += 1, R534 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [67, 65535] { R592 += 1, R558 += 1, R534 += 1 };
  s3 -> s1 [0, 65] { R592 += 1, R558 += 1, R534 += 1 };
  s3 -> s2 [0, 65535] { R592 += 1, R558 += 1, R533 += 1, R534 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R592 += 1, R557 += 1, R558 += 1 };
  s3 -> s1 [67, 65535] { R592 += 1, R558 += 1, R534 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R592 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value1_17 {
  init s0;
  s0 -> s1 [0, 65535] { R594 += 1, R560 += 1, R536 += 1, R504 += 1 };
  s0 -> s0 [0, 65535] { R593 += 1, R594 += 1 };
  s0 -> s2 [0, 65535] { R594 += 1, R560 += 1, R535 += 1, R536 += 1 };
  s0 -> s3 [0, 65535] { R594 += 1, R559 += 1, R560 += 1 };
  s1 -> s6 [0, 65535] { R594 += 1, R560 += 1 };
  s1 -> s1 [0, 65535] { R594 += 1, R560 += 1, R536 += 1, R504 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R594 += 1 };
  s2 -> s1 [0, 65535] { R594 += 1, R560 += 1, R536 += 1, R504 += 1 };
  s2 -> s2 [0, 65535] { R594 += 1, R560 += 1, R535 += 1, R536 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R594 += 1 };
  s3 -> s1 [0, 65535] { R594 += 1, R560 += 1, R536 += 1, R504 += 1 };
  s3 -> s2 [0, 65535] { R594 += 1, R560 += 1, R535 += 1, R536 += 1 };
  s3 -> s3 [0, 65535] { R594 += 1, R559 += 1, R560 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R594 += 1 };
  s6 -> s6 [0, 65535] { R594 += 1, R560 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R594 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value1_18 {
  init s0;
  s0 -> s1 [0, 66] { R596 += 1, R562 += 1, R538 += 1 };
  s0 -> s2 [0, 65535] { R596 += 1, R562 += 1, R537 += 1, R538 += 1 };
  s0 -> s0 [0, 65535] { R595 += 1, R596 += 1 };
  s0 -> s3 [0, 65535] { R596 += 1, R561 += 1, R562 += 1 };
  s0 -> s1 [73, 65535] { R596 += 1, R562 += 1, R538 += 1 };
  s1 -> s1 [0, 66] { R596 += 1, R562 += 1, R538 += 1 };
  s1 -> s1 [0, 65535] { R596 += 1, R562 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R596 += 1 };
  s1 -> s1 [73, 65535] { R596 += 1, R562 += 1, R538 += 1 };
  s2 -> s1 [0, 66] { R596 += 1, R562 += 1, R538 += 1 };
  s2 -> s2 [0, 65535] { R596 += 1, R562 += 1, R537 += 1, R538 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R596 += 1 };
  s2 -> s1 [73, 65535] { R596 += 1, R562 += 1, R538 += 1 };
  s3 -> s1 [0, 66] { R596 += 1, R562 += 1, R538 += 1 };
  s3 -> s2 [0, 65535] { R596 += 1, R562 += 1, R537 += 1, R538 += 1 };
  s3 -> s3 [0, 65535] { R596 += 1, R561 += 1, R562 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [73, 65535] { R596 += 1, R562 += 1, R538 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R596 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value1_19 {
  init s0;
  s0 -> s1 [0, 65535] { R598 += 1, R564 += 1, R548 += 1, R505 += 1 };
  s0 -> s2 [0, 65535] { R598 += 1, R563 += 1, R564 += 1 };
  s0 -> s3 [0, 65535] { R598 += 1, R564 += 1, R547 += 1, R548 += 1 };
  s0 -> s0 [0, 65535] { R597 += 1, R598 += 1 };
  s1 -> s1 [0, 65535] { R598 += 1, R564 += 1, R548 += 1, R505 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R598 += 1, R564 += 1 };
  s1 -> s5 [0, 65535] { R598 += 1 };
  s2 -> s1 [0, 65535] { R598 += 1, R564 += 1, R548 += 1, R505 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R598 += 1, R563 += 1, R564 += 1 };
  s2 -> s3 [0, 65535] { R598 += 1, R564 += 1, R547 += 1, R548 += 1 };
  s3 -> s1 [0, 65535] { R598 += 1, R564 += 1, R548 += 1, R505 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R598 += 1, R564 += 1, R547 += 1, R548 += 1 };
  s3 -> s5 [0, 65535] { R598 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R598 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R598 += 1, R564 += 1 };
  s6 -> s5 [0, 65535] { R598 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value1_20 {
  init s0;
  s0 -> s1 [0, 65] { R600 += 1, R566 += 1, R550 += 1 };
  s0 -> s2 [0, 65535] { R600 += 1, R566 += 1, R549 += 1, R550 += 1 };
  s0 -> s0 [0, 65535] { R599 += 1, R600 += 1 };
  s0 -> s3 [0, 65535] { R600 += 1, R565 += 1, R566 += 1 };
  s0 -> s4 [66, 66] { R600 += 1, R566 += 1, R550 += 1 };
  s0 -> s5 [66, 66] { R600 += 1, R566 += 1, R550 += 1 };
  s0 -> s6 [73, 73] { R600 += 1, R566 += 1, R550 += 1 };
  s0 -> s1 [74, 65535] { R600 += 1, R566 += 1, R550 += 1 };
  s1 -> s1 [0, 65] { R600 += 1, R566 += 1, R550 += 1 };
  s1 -> s4 [66, 66] { R600 += 1, R566 += 1, R550 += 1 };
  s1 -> s5 [66, 66] { R600 += 1, R566 += 1, R550 += 1 };
  s1 -> s6 [73, 73] { R600 += 1, R566 += 1, R550 += 1 };
  s1 -> s1 [74, 65535] { R600 += 1, R566 += 1, R550 += 1 };
  s2 -> s1 [0, 65] { R600 += 1, R566 += 1, R550 += 1 };
  s2 -> s2 [0, 65535] { R600 += 1, R566 += 1, R549 += 1, R550 += 1 };
  s2 -> s4 [66, 66] { R600 += 1, R566 += 1, R550 += 1 };
  s2 -> s5 [66, 66] { R600 += 1, R566 += 1, R550 += 1 };
  s2 -> s6 [73, 73] { R600 += 1, R566 += 1, R550 += 1 };
  s2 -> s1 [74, 65535] { R600 += 1, R566 += 1, R550 += 1 };
  s3 -> s1 [0, 65] { R600 += 1, R566 += 1, R550 += 1 };
  s3 -> s2 [0, 65535] { R600 += 1, R566 += 1, R549 += 1, R550 += 1 };
  s3 -> s3 [0, 65535] { R600 += 1, R565 += 1, R566 += 1 };
  s3 -> s4 [66, 66] { R600 += 1, R566 += 1, R550 += 1 };
  s3 -> s5 [66, 66] { R600 += 1, R566 += 1, R550 += 1 };
  s3 -> s6 [73, 73] { R600 += 1, R566 += 1, R550 += 1 };
  s3 -> s1 [74, 65535] { R600 += 1, R566 += 1, R550 += 1 };
  s4 -> s4 [0, 66] { R600 += 1, R566 += 1, R550 += 1 };
  s4 -> s9 [73, 73] { R600 += 1, R566 += 1, R550 += 1 };
  s4 -> s4 [74, 65535] { R600 += 1, R566 += 1, R550 += 1 };
  s6 -> s6 [0, 65] { R600 += 1, R566 += 1, R550 += 1 };
  s6 -> s7 [0, 65535] { R600 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R600 += 1, R566 += 1 };
  s6 -> s9 [66, 66] { R600 += 1, R566 += 1, R550 += 1 };
  s6 -> s10 [66, 66] { R600 += 1, R566 += 1, R550 += 1 };
  s6 -> s6 [73, 65535] { R600 += 1, R566 += 1, R550 += 1 };
  s7 -> s7 [0, 65535] { R600 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  s9 -> s9 [0, 66] { R600 += 1, R566 += 1, R550 += 1 };
  s9 -> s7 [0, 65535] { R600 += 1 };
  s9 -> s9 [0, 65535] { R600 += 1, R566 += 1 };
  s9 -> s8 [0, 65535];
  s9 -> s9 [73, 65535] { R600 += 1, R566 += 1, R550 += 1 };
  s10 -> s7 [0, 65535] { R600 += 1 };
  s10 -> s8 [0, 65535];
  s10 -> s10 [0, 65535] { R600 += 1, R566 += 1 };
  accepting s8, s9, s6, s7, s10;
};
};
constraint R2 = R566 && R3 = R526 && R4 = R532 && R16 = 0 && R17 = R600 && R509 - R566 = -1 && R510 = R566 && R511 - R566 = -1 && R512 = R566 && R513 = 0 && R514 = 1 && R515 = 0 && R516 = 1 && R517 - R532 = -1 && R518 = R532 && R519 - R532 = -1 && R520 = R532 && R521 = 0 && R522 = 1 && R523 = 0 && R524 = 1 && R525 - R600 = 1 && R527 = 0 && R528 = R532 && R529 = 0 && R530 = R532 && R531 = 0 && R549 = 0 && R550 = 0 && R551 = 0 && R552 = R566 && R553 = 0 && R554 = R566 && R555 = 0 && R556 = R566 && R557 = 0 && R558 = R566 && R559 = 0 && R560 = R566 && R561 = 0 && R562 = R566 && R563 = 0 && R564 = R566 && R565 = 0 && R567 = 0 && R568 = R600 && R569 = 0 && R570 = R600 && R571 = 0 && R572 = R600 && R573 = 0 && R574 = R600 && R575 = 0 && R576 = R600 && R577 = 0 && R578 = R600 && R579 = 0 && R580 = R600 && R581 = 0 && R582 = R600 && R583 = 0 && R584 = R600 && R585 = 0 && R586 = R600 && R587 = 0 && R588 = R600 && R589 = 0 && R590 = R600 && R591 = 0 && R592 = R600 && R593 = 0 && R594 = R600 && R595 = 0 && R596 = R600 && R597 = 0 && R598 = R600 && R599 = 0 && R0 != 0 && -1 < R1 && R9 < 1 && R12 < 1 && R500 < 1 && R501 < 1 && R600 < R526 && 0 < R532 && 0 < R566 && -1 < R600 && (R1 != 0 || R504 = 0 || (R533 = 0 && R534 = 0)) && (R1 != 0 || R504 = 0 || (R535 = 0 && R536 = 0)) && (R1 != 0 || R504 = 0 || (R537 = 0 && R538 = 0)) && (R533 != 0 || R1 = R534 || R1 < 1) && (R535 != 0 || R1 = R536 || R1 < 1) && (R537 != 0 || R1 = R538 || R1 < 1) && (R505 = 0 || (R547 = 0 && R548 = 0)) && (R506 = 0 || (R539 = 0 && R540 = 0)) && (R506 = 0 || (R541 = 0 && R542 = 0)) && (R508 = 0 || (R543 = 0 && R544 = 0)) && (R508 = 0 || (R545 = 0 && R546 = 0)) && (R533 = 0 || R1 < 1) && (R535 = 0 || R1 < 1) && (R537 = 0 || R1 < 1);
// End of Parikh automata intersection problem
