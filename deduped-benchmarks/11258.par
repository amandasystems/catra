// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R12, R14, R15, R16, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R256, R257, R258, R259, R26, R27, R3, R32, R33, R34, R35, R4, R404, R405, R406, R407, R408, R409, R410, R411, R412, R413, R414, R415, R416, R417, R418, R419, R420, R421, R422, R423, R424, R425, R426, R427, R428, R429, R430, R431, R432, R433, R434, R435, R436, R437, R438, R439, R440, R441, R442, R443, R444, R445, R446, R447, R448, R449, R450, R451, R452, R453, R454, R455, R456, R457, R458, R459, R460, R461, R462, R463, R464, R465, R466, R467, R468, R469, R470, R471, R472, R473, R474, R475, R5, R9;
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [99, 99];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s1 [9, 9] { R25 += 1 };
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 65535] { R27 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s1 -> s1 [0, 65535] { R27 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 64] { R437 += 1 };
  s0 -> s0 [0, 65535] { R436 += 1, R437 += 1 };
  s0 -> s2 [67, 67] { R437 += 1 };
  s0 -> s1 [68, 65535] { R437 += 1 };
  s1 -> s1 [0, 64] { R437 += 1 };
  s1 -> s2 [67, 67] { R437 += 1 };
  s1 -> s1 [68, 65535] { R437 += 1 };
  s2 -> s2 [0, 64] { R437 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [67, 65535] { R437 += 1 };
  accepting s2;
};
automaton value2_6 {
  init s0;
  s0 -> s0 [0, 65535] { R438 += 1, R439 += 1 };
  s0 -> s1 [0, 65535] { R439 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R439 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 66] { R441 += 1 };
  s0 -> s0 [0, 65535] { R440 += 1, R441 += 1 };
  s0 -> s2 [0, 65535] { R441 += 1, R9 += 1 };
  s0 -> s3 [67, 67] { R441 += 1 };
  s0 -> s1 [68, 65535] { R441 += 1 };
  s1 -> s1 [0, 66] { R441 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [67, 67] { R441 += 1 };
  s1 -> s1 [68, 65535] { R441 += 1 };
  s2 -> s1 [0, 66] { R441 += 1 };
  s2 -> s2 [0, 65535] { R441 += 1, R9 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [67, 67] { R441 += 1 };
  s2 -> s1 [68, 65535] { R441 += 1 };
  s3 -> s3 [0, 65535] { R441 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 8] { R443 += 1, R17 += 1 };
  s0 -> s0 [0, 65535] { R442 += 1, R443 += 1 };
  s0 -> s2 [0, 65535] { R443 += 1, R16 += 1, R17 += 1 };
  s0 -> s3 [9, 13] { R443 += 1, R17 += 1 };
  s0 -> s1 [14, 31] { R443 += 1, R17 += 1 };
  s0 -> s3 [32, 32] { R443 += 1, R17 += 1 };
  s0 -> s1 [33, 65535] { R443 += 1, R17 += 1 };
  s1 -> s5 [0, 65535] { R443 += 1 };
  s1 -> s1 [0, 65535] { R443 += 1, R17 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R443 += 1, R17 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R443 += 1, R16 += 1, R17 += 1 };
  s2 -> s3 [9, 13] { R443 += 1, R17 += 1 };
  s2 -> s1 [14, 31] { R443 += 1, R17 += 1 };
  s2 -> s3 [32, 32] { R443 += 1, R17 += 1 };
  s2 -> s1 [33, 65535] { R443 += 1, R17 += 1 };
  s3 -> s1 [0, 65535] { R443 += 1, R17 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R443 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 65535] { R445 += 1, R18 += 1, R19 += 1 };
  s0 -> s2 [0, 65535] { R445 += 1, R19 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R444 += 1, R445 += 1 };
  s1 -> s1 [0, 65535] { R445 += 1, R18 += 1, R19 += 1 };
  s1 -> s2 [0, 65535] { R445 += 1, R19 += 1, R3 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R445 += 1 };
  s2 -> s2 [0, 65535] { R445 += 1, R19 += 1, R3 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R445 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 8] { R447 += 1, R21 += 1 };
  s0 -> s2 [0, 65535] { R447 += 1, R20 += 1, R21 += 1 };
  s0 -> s0 [0, 65535] { R446 += 1, R447 += 1 };
  s0 -> s3 [9, 13] { R447 += 1, R21 += 1 };
  s0 -> s1 [14, 31] { R447 += 1, R21 += 1 };
  s0 -> s3 [32, 32] { R447 += 1, R21 += 1 };
  s0 -> s1 [33, 65535] { R447 += 1, R21 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R447 += 1 };
  s1 -> s1 [0, 65535] { R447 += 1, R21 += 1 };
  s2 -> s1 [0, 8] { R447 += 1, R21 += 1 };
  s2 -> s2 [0, 65535] { R447 += 1, R20 += 1, R21 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R447 += 1, R21 += 1 };
  s2 -> s1 [14, 31] { R447 += 1, R21 += 1 };
  s2 -> s3 [32, 32] { R447 += 1, R21 += 1 };
  s2 -> s1 [33, 65535] { R447 += 1, R21 += 1 };
  s3 -> s1 [0, 65535] { R447 += 1, R21 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R447 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s0 [0, 65535] { R448 += 1, R449 += 1 };
  s0 -> s1 [0, 65535] { R449 += 1, R23 += 1, R4 += 1 };
  s0 -> s2 [0, 65535] { R449 += 1, R22 += 1, R23 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R449 += 1, R23 += 1, R4 += 1 };
  s1 -> s4 [0, 65535] { R449 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R449 += 1, R23 += 1, R4 += 1 };
  s2 -> s2 [0, 65535] { R449 += 1, R22 += 1, R23 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R449 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 66] { R451 += 1, R411 += 1 };
  s0 -> s0 [0, 65535] { R450 += 1, R451 += 1 };
  s0 -> s2 [0, 65535] { R451 += 1, R410 += 1, R411 += 1 };
  s0 -> s1 [68, 65535] { R451 += 1, R411 += 1 };
  s1 -> s1 [0, 66] { R451 += 1, R411 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R451 += 1 };
  s1 -> s1 [68, 65535] { R451 += 1, R411 += 1 };
  s2 -> s1 [0, 66] { R451 += 1, R411 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R451 += 1, R410 += 1, R411 += 1 };
  s2 -> s1 [68, 65535] { R451 += 1, R411 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_13 {
  init s0;
  s0 -> s0 [0, 65535] { R452 += 1, R453 += 1 };
  s0 -> s1 [0, 65535] { R453 += 1, R413 += 1, R14 += 1 };
  s0 -> s2 [0, 65535] { R453 += 1, R412 += 1, R413 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R453 += 1, R413 += 1, R14 += 1 };
  s1 -> s4 [0, 65535] { R453 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R453 += 1, R413 += 1, R14 += 1 };
  s2 -> s2 [0, 65535] { R453 += 1, R412 += 1, R413 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R453 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 67] { R455 += 1, R415 += 1 };
  s0 -> s2 [0, 65535] { R455 += 1, R414 += 1, R415 += 1 };
  s0 -> s0 [0, 65535] { R454 += 1, R455 += 1 };
  s0 -> s3 [81, 81] { R455 += 1, R415 += 1 };
  s0 -> s1 [82, 65535] { R455 += 1, R415 += 1 };
  s1 -> s1 [0, 67] { R455 += 1, R415 += 1 };
  s1 -> s3 [81, 81] { R455 += 1, R415 += 1 };
  s1 -> s1 [82, 65535] { R455 += 1, R415 += 1 };
  s2 -> s1 [0, 67] { R455 += 1, R415 += 1 };
  s2 -> s2 [0, 65535] { R455 += 1, R414 += 1, R415 += 1 };
  s2 -> s3 [81, 81] { R455 += 1, R415 += 1 };
  s2 -> s1 [82, 65535] { R455 += 1, R415 += 1 };
  s3 -> s3 [0, 67] { R455 += 1, R415 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R455 += 1 };
  s3 -> s3 [81, 65535] { R455 += 1, R415 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton value2_15 {
  init s0;
  s0 -> s0 [0, 65535] { R456 += 1, R457 += 1 };
  s0 -> s1 [0, 65535] { R457 += 1, R416 += 1, R417 += 1 };
  s0 -> s2 [0, 65535] { R457 += 1, R417 += 1, R33 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R457 += 1, R416 += 1, R417 += 1 };
  s1 -> s2 [0, 65535] { R457 += 1, R417 += 1, R33 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R457 += 1, R417 += 1, R33 += 1 };
  s2 -> s4 [0, 65535] { R457 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R457 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 80] { R459 += 1, R419 += 1 };
  s0 -> s0 [0, 65535] { R458 += 1, R459 += 1 };
  s0 -> s2 [0, 65535] { R459 += 1, R419 += 1, R35 += 1 };
  s0 -> s3 [0, 65535] { R459 += 1, R418 += 1, R419 += 1 };
  s0 -> s1 [82, 65535] { R459 += 1, R419 += 1 };
  s1 -> s1 [0, 80] { R459 += 1, R419 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R459 += 1 };
  s1 -> s1 [82, 65535] { R459 += 1, R419 += 1 };
  s2 -> s1 [0, 80] { R459 += 1, R419 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R459 += 1, R419 += 1, R35 += 1 };
  s2 -> s5 [0, 65535] { R459 += 1 };
  s2 -> s1 [82, 65535] { R459 += 1, R419 += 1 };
  s3 -> s1 [0, 80] { R459 += 1, R419 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R459 += 1, R419 += 1, R35 += 1 };
  s3 -> s3 [0, 65535] { R459 += 1, R418 += 1, R419 += 1 };
  s3 -> s1 [82, 65535] { R459 += 1, R419 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R459 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 80] { R461 += 1, R421 += 1, R259 += 1 };
  s0 -> s0 [0, 65535] { R460 += 1, R461 += 1 };
  s0 -> s2 [0, 65535] { R461 += 1, R420 += 1, R421 += 1 };
  s0 -> s3 [81, 81] { R461 += 1, R421 += 1, R259 += 1 };
  s0 -> s1 [82, 65535] { R461 += 1, R421 += 1, R259 += 1 };
  s1 -> s1 [0, 80] { R461 += 1, R421 += 1, R259 += 1 };
  s1 -> s3 [81, 81] { R461 += 1, R421 += 1, R259 += 1 };
  s1 -> s1 [82, 65535] { R461 += 1, R421 += 1, R259 += 1 };
  s2 -> s1 [0, 80] { R461 += 1, R421 += 1, R259 += 1 };
  s2 -> s2 [0, 65535] { R461 += 1, R420 += 1, R421 += 1 };
  s2 -> s3 [81, 81] { R461 += 1, R421 += 1, R259 += 1 };
  s2 -> s1 [82, 65535] { R461 += 1, R421 += 1, R259 += 1 };
  s3 -> s4 [0, 65535] { R461 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R461 += 1, R421 += 1 };
  s3 -> s3 [0, 65535] { R461 += 1, R421 += 1, R259 += 1 };
  s4 -> s4 [0, 65535] { R461 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R461 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R461 += 1, R421 += 1 };
  accepting s3, s4, s5, s6;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R463 += 1, R423 += 1 };
  s0 -> s2 [0, 65535] { R463 += 1, R422 += 1, R423 += 1 };
  s0 -> s0 [0, 65535] { R462 += 1, R463 += 1 };
  s1 -> s1 [0, 65535] { R463 += 1, R423 += 1 };
  s1 -> s4 [0, 65535] { R463 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R463 += 1, R423 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R463 += 1, R422 += 1, R423 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R463 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 65535] { R465 += 1, R424 += 1, R425 += 1 };
  s0 -> s2 [0, 65535] { R465 += 1, R425 += 1, R15 += 1 };
  s0 -> s0 [0, 65535] { R464 += 1, R465 += 1 };
  s1 -> s1 [0, 65535] { R465 += 1, R424 += 1, R425 += 1 };
  s1 -> s2 [0, 65535] { R465 += 1, R425 += 1, R15 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R465 += 1, R425 += 1, R15 += 1 };
  s2 -> s3 [0, 65535] { R465 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R465 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 66] { R467 += 1, R427 += 1 };
  s0 -> s2 [0, 65535] { R467 += 1, R426 += 1, R427 += 1 };
  s0 -> s0 [0, 65535] { R466 += 1, R467 += 1 };
  s0 -> s3 [67, 67] { R467 += 1, R427 += 1 };
  s0 -> s4 [67, 67] { R467 += 1, R427 += 1 };
  s0 -> s1 [82, 65535] { R467 += 1, R427 += 1 };
  s1 -> s1 [0, 66] { R467 += 1, R427 += 1 };
  s1 -> s1 [0, 65535] { R467 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [67, 67] { R467 += 1, R427 += 1 };
  s1 -> s4 [67, 67] { R467 += 1, R427 += 1 };
  s1 -> s1 [82, 65535] { R467 += 1, R427 += 1 };
  s2 -> s1 [0, 66] { R467 += 1, R427 += 1 };
  s2 -> s2 [0, 65535] { R467 += 1, R426 += 1, R427 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [67, 67] { R467 += 1, R427 += 1 };
  s2 -> s4 [67, 67] { R467 += 1, R427 += 1 };
  s2 -> s1 [82, 65535] { R467 += 1, R427 += 1 };
  s3 -> s3 [0, 65535] { R467 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 67] { R467 += 1, R427 += 1 };
  s4 -> s4 [0, 65535] { R467 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [82, 65535] { R467 += 1, R427 += 1 };
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 66] { R469 += 1, R429 += 1, R32 += 1 };
  s0 -> s0 [0, 65535] { R468 += 1, R469 += 1 };
  s0 -> s2 [0, 65535] { R469 += 1, R428 += 1, R429 += 1 };
  s0 -> s3 [67, 67] { R469 += 1, R429 += 1, R32 += 1 };
  s0 -> s4 [67, 67] { R469 += 1, R429 += 1, R32 += 1 };
  s0 -> s1 [68, 65535] { R469 += 1, R429 += 1, R32 += 1 };
  s1 -> s1 [0, 66] { R469 += 1, R429 += 1, R32 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R469 += 1 };
  s1 -> s3 [67, 67] { R469 += 1, R429 += 1, R32 += 1 };
  s1 -> s4 [67, 67] { R469 += 1, R429 += 1, R32 += 1 };
  s1 -> s1 [68, 65535] { R469 += 1, R429 += 1, R32 += 1 };
  s2 -> s1 [0, 66] { R469 += 1, R429 += 1, R32 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R469 += 1, R428 += 1, R429 += 1 };
  s2 -> s3 [67, 67] { R469 += 1, R429 += 1, R32 += 1 };
  s2 -> s4 [67, 67] { R469 += 1, R429 += 1, R32 += 1 };
  s2 -> s1 [68, 65535] { R469 += 1, R429 += 1, R32 += 1 };
  s3 -> s3 [0, 65535] { R469 += 1, R429 += 1, R32 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R469 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R469 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R469 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 66] { R471 += 1, R431 += 1, R34 += 1 };
  s0 -> s0 [0, 65535] { R470 += 1, R471 += 1 };
  s0 -> s2 [0, 65535] { R471 += 1, R430 += 1, R431 += 1 };
  s0 -> s3 [67, 67] { R471 += 1, R431 += 1, R34 += 1 };
  s0 -> s4 [67, 67] { R471 += 1, R431 += 1, R34 += 1 };
  s0 -> s1 [68, 65535] { R471 += 1, R431 += 1, R34 += 1 };
  s1 -> s1 [0, 66] { R471 += 1, R431 += 1, R34 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R471 += 1 };
  s1 -> s3 [67, 67] { R471 += 1, R431 += 1, R34 += 1 };
  s1 -> s4 [67, 67] { R471 += 1, R431 += 1, R34 += 1 };
  s1 -> s1 [68, 65535] { R471 += 1, R431 += 1, R34 += 1 };
  s2 -> s1 [0, 66] { R471 += 1, R431 += 1, R34 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R471 += 1, R430 += 1, R431 += 1 };
  s2 -> s3 [67, 67] { R471 += 1, R431 += 1, R34 += 1 };
  s2 -> s4 [67, 67] { R471 += 1, R431 += 1, R34 += 1 };
  s2 -> s1 [68, 65535] { R471 += 1, R431 += 1, R34 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R471 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R471 += 1 };
  s4 -> s4 [0, 65535] { R471 += 1, R431 += 1, R34 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R471 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 66] { R473 += 1, R433 += 1, R257 += 1 };
  s0 -> s2 [0, 66] { R473 += 1, R433 += 1, R256 += 1, R257 += 1 };
  s0 -> s0 [0, 65535] { R472 += 1, R473 += 1 };
  s0 -> s3 [0, 65535] { R473 += 1, R432 += 1, R433 += 1 };
  s0 -> s4 [67, 67] { R473 += 1, R433 += 1, R256 += 1, R257 += 1 };
  s0 -> s5 [67, 67] { R473 += 1, R433 += 1, R257 += 1 };
  s0 -> s6 [67, 67] { R473 += 1, R433 += 1, R257 += 1 };
  s0 -> s7 [67, 67] { R473 += 1, R433 += 1, R256 += 1, R257 += 1 };
  s0 -> s1 [68, 80] { R473 += 1, R433 += 1, R257 += 1 };
  s0 -> s2 [68, 65535] { R473 += 1, R433 += 1, R256 += 1, R257 += 1 };
  s0 -> s1 [82, 65535] { R473 += 1, R433 += 1, R257 += 1 };
  s1 -> s1 [0, 66] { R473 += 1, R433 += 1, R257 += 1 };
  s1 -> s1 [0, 65535] { R473 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s5 [67, 67] { R473 += 1, R433 += 1, R257 += 1 };
  s1 -> s6 [67, 67] { R473 += 1, R433 += 1, R257 += 1 };
  s1 -> s1 [68, 80] { R473 += 1, R433 += 1, R257 += 1 };
  s1 -> s1 [82, 65535] { R473 += 1, R433 += 1, R257 += 1 };
  s2 -> s1 [0, 66] { R473 += 1, R433 += 1, R257 += 1 };
  s2 -> s2 [0, 66] { R473 += 1, R433 += 1, R256 += 1, R257 += 1 };
  s2 -> s4 [67, 67] { R473 += 1, R433 += 1, R256 += 1, R257 += 1 };
  s2 -> s5 [67, 67] { R473 += 1, R433 += 1, R257 += 1 };
  s2 -> s6 [67, 67] { R473 += 1, R433 += 1, R257 += 1 };
  s2 -> s7 [67, 67] { R473 += 1, R433 += 1, R256 += 1, R257 += 1 };
  s2 -> s1 [68, 80] { R473 += 1, R433 += 1, R257 += 1 };
  s2 -> s2 [68, 65535] { R473 += 1, R433 += 1, R256 += 1, R257 += 1 };
  s2 -> s1 [82, 65535] { R473 += 1, R433 += 1, R257 += 1 };
  s3 -> s1 [0, 66] { R473 += 1, R433 += 1, R257 += 1 };
  s3 -> s2 [0, 66] { R473 += 1, R433 += 1, R256 += 1, R257 += 1 };
  s3 -> s3 [0, 65535] { R473 += 1, R432 += 1, R433 += 1 };
  s3 -> s4 [67, 67] { R473 += 1, R433 += 1, R256 += 1, R257 += 1 };
  s3 -> s5 [67, 67] { R473 += 1, R433 += 1, R257 += 1 };
  s3 -> s6 [67, 67] { R473 += 1, R433 += 1, R257 += 1 };
  s3 -> s7 [67, 67] { R473 += 1, R433 += 1, R256 += 1, R257 += 1 };
  s3 -> s1 [68, 80] { R473 += 1, R433 += 1, R257 += 1 };
  s3 -> s2 [68, 65535] { R473 += 1, R433 += 1, R256 += 1, R257 += 1 };
  s3 -> s1 [82, 65535] { R473 += 1, R433 += 1, R257 += 1 };
  s4 -> s5 [0, 80] { R473 += 1, R433 += 1, R257 += 1 };
  s4 -> s4 [0, 65535] { R473 += 1, R433 += 1, R256 += 1, R257 += 1 };
  s4 -> s5 [82, 65535] { R473 += 1, R433 += 1, R257 += 1 };
  s5 -> s5 [0, 80] { R473 += 1, R433 += 1, R257 += 1 };
  s5 -> s5 [0, 65535] { R473 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s5 [82, 65535] { R473 += 1, R433 += 1, R257 += 1 };
  s6 -> s6 [0, 65535] { R473 += 1 };
  s6 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  accepting s1, s5, s6, s8;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 66] { R475 += 1, R435 += 1, R405 += 1, R406 += 1 };
  s0 -> s2 [0, 66] { R475 += 1, R435 += 1, R404 += 1, R405 += 1 };
  s0 -> s0 [0, 65535] { R474 += 1, R475 += 1 };
  s0 -> s3 [0, 65535] { R475 += 1, R434 += 1, R435 += 1 };
  s0 -> s4 [67, 67] { R475 += 1, R435 += 1, R405 += 1, R406 += 1 };
  s0 -> s5 [67, 67] { R475 += 1, R435 += 1, R404 += 1, R405 += 1 };
  s0 -> s6 [67, 67] { R475 += 1, R435 += 1, R404 += 1, R405 += 1 };
  s0 -> s7 [67, 67] { R475 += 1, R435 += 1, R405 += 1, R406 += 1 };
  s0 -> s1 [68, 65535] { R475 += 1, R435 += 1, R405 += 1, R406 += 1 };
  s0 -> s2 [68, 65535] { R475 += 1, R435 += 1, R404 += 1, R405 += 1 };
  s1 -> s11 [0, 66] { R475 += 1, R435 += 1 };
  s1 -> s1 [0, 66] { R475 += 1, R435 += 1, R405 += 1, R406 += 1 };
  s1 -> s4 [67, 67] { R475 += 1, R435 += 1, R405 += 1, R406 += 1 };
  s1 -> s8 [67, 67] { R475 += 1, R435 += 1 };
  s1 -> s12 [67, 67] { R475 += 1, R435 += 1 };
  s1 -> s7 [67, 67] { R475 += 1, R435 += 1, R405 += 1, R406 += 1 };
  s1 -> s11 [68, 65535] { R475 += 1, R435 += 1 };
  s1 -> s1 [68, 65535] { R475 += 1, R435 += 1, R405 += 1, R406 += 1 };
  s2 -> s1 [0, 66] { R475 += 1, R435 += 1, R405 += 1, R406 += 1 };
  s2 -> s2 [0, 66] { R475 += 1, R435 += 1, R404 += 1, R405 += 1 };
  s2 -> s4 [67, 67] { R475 += 1, R435 += 1, R405 += 1, R406 += 1 };
  s2 -> s5 [67, 67] { R475 += 1, R435 += 1, R404 += 1, R405 += 1 };
  s2 -> s6 [67, 67] { R475 += 1, R435 += 1, R404 += 1, R405 += 1 };
  s2 -> s7 [67, 67] { R475 += 1, R435 += 1, R405 += 1, R406 += 1 };
  s2 -> s1 [68, 65535] { R475 += 1, R435 += 1, R405 += 1, R406 += 1 };
  s2 -> s2 [68, 65535] { R475 += 1, R435 += 1, R404 += 1, R405 += 1 };
  s3 -> s1 [0, 66] { R475 += 1, R435 += 1, R405 += 1, R406 += 1 };
  s3 -> s2 [0, 66] { R475 += 1, R435 += 1, R404 += 1, R405 += 1 };
  s3 -> s3 [0, 65535] { R475 += 1, R434 += 1, R435 += 1 };
  s3 -> s4 [67, 67] { R475 += 1, R435 += 1, R405 += 1, R406 += 1 };
  s3 -> s5 [67, 67] { R475 += 1, R435 += 1, R404 += 1, R405 += 1 };
  s3 -> s6 [67, 67] { R475 += 1, R435 += 1, R404 += 1, R405 += 1 };
  s3 -> s7 [67, 67] { R475 += 1, R435 += 1, R405 += 1, R406 += 1 };
  s3 -> s1 [68, 65535] { R475 += 1, R435 += 1, R405 += 1, R406 += 1 };
  s3 -> s2 [68, 65535] { R475 += 1, R435 += 1, R404 += 1, R405 += 1 };
  s4 -> s4 [0, 65535] { R475 += 1, R435 += 1, R405 += 1, R406 += 1 };
  s4 -> s8 [0, 65535] { R475 += 1, R435 += 1 };
  s5 -> s4 [0, 65535] { R475 += 1, R435 += 1, R405 += 1, R406 += 1 };
  s5 -> s5 [0, 65535] { R475 += 1, R435 += 1, R404 += 1, R405 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [0, 65535] { R475 += 1 };
  s8 -> s8 [0, 65535] { R475 += 1, R435 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R475 += 1 };
  s11 -> s11 [0, 66] { R475 += 1, R435 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R475 += 1 };
  s11 -> s8 [67, 67] { R475 += 1, R435 += 1 };
  s11 -> s12 [67, 67] { R475 += 1, R435 += 1 };
  s11 -> s11 [68, 65535] { R475 += 1, R435 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R475 += 1 };
  accepting s12, s8, s9, s10, s11;
};
};
constraint R1 = R423 && R2 = R475 && R16 - R423 = -1 && R17 = R423 && R18 - R423 = -1 && R19 = R423 && R20 = 0 && R21 = 1 && R22 = 0 && R23 = 1 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R33 + R32 + -1*R259 + -1*R257 = 0 && R258 + R256 = 0 && R410 = 0 && R411 = R423 && R412 = 0 && R413 = R423 && R414 = 0 && R415 = R423 && R416 = 0 && R417 = R423 && R418 = 0 && R419 = R423 && R420 = 0 && R421 = R423 && R422 = 0 && R432 = 0 && R433 = 0 && R434 = 0 && R435 = 0 && R436 = 1 && R437 = R475 && R438 = 1 && R439 = R475 && R440 = 1 && R441 = R475 && R442 = 1 && R443 = R475 && R444 = 1 && R445 = R475 && R446 = 1 && R447 = R475 && R448 = 1 && R449 = R475 && R450 = 1 && R451 = R475 && R452 = 1 && R453 = R475 && R454 = 1 && R455 = R475 && R456 = 1 && R457 = R475 && R458 = 1 && R459 = R475 && R460 = 1 && R461 = R475 && R462 = 1 && R463 = R475 && R464 = 1 && R465 = R475 && R466 = 1 && R467 = R475 && R468 = 1 && R469 = R475 && R470 = 1 && R471 = R475 && R472 = 1 && R473 = R475 && R474 = 1 && R9 < 1 && R12 < 1 && R35 + R34 < 1 && -1*R259 + -1*R257 < 1 && 0 < R423 && 0 < R475 && (R259 + R257 != 0 || R409 + R406 = 0 || (R407 + R404 = 0 && R408 + R405 = 0)) && (R407 + R404 != 0 || R259 + R257 + -1*R408 + -1*R405 = 0 || R259 + R257 < 1) && (R15 = 0 || (R424 = 0 && R425 = 0)) && (R15 = 0 || (R426 = 0 && R427 = 0)) && (R15 = 0 || (R428 = 0 && R429 = 0)) && (R15 = 0 || (R430 = 0 && R431 = 0)) && (R407 + R404 = 0 || R259 + R257 < 1);
// End of Parikh automata intersection problem
