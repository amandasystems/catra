// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R13, R17, R18, R2, R213, R214, R217, R218, R219, R220, R221, R222, R223, R224, R225, R226, R227, R228, R229, R230, R231, R232, R233, R234, R235, R236, R237, R238, R239, R240, R241, R242, R243, R244, R245, R246, R247, R248, R249, R250, R251, R252, R253, R254, R255, R256, R257, R258, R259, R260, R261, R262, R263, R264, R265, R266, R267, R268, R269, R270, R271, R272, R273, R274, R275, R276, R277, R278, R279, R280, R281, R282, R283, R284, R285, R286, R287, R288, R289, R290, R291, R292, R293, R294, R295, R296, R297, R298, R299, R3, R300, R301, R302, R303, R304, R305, R306, R307, R308, R309, R310, R311, R4, R5, R6, R7, R8, R9;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [79, 79];
  s0 -> s0 [80, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [79, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R213 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 78];
  s0 -> s0 [0, 65535] { R214 += 1 };
  s0 -> s2 [79, 79];
  s0 -> s1 [80, 65535];
  s1 -> s1 [0, 78];
  s1 -> s2 [79, 79];
  s1 -> s1 [80, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R239 += 1 };
  s0 -> s0 [0, 65535] { R238 += 1, R239 += 1 };
  s0 -> s2 [9, 13] { R239 += 1 };
  s0 -> s1 [14, 31] { R239 += 1 };
  s0 -> s2 [32, 32] { R239 += 1 };
  s0 -> s1 [33, 65535] { R239 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R239 += 1 };
  s2 -> s1 [0, 65535] { R239 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R241 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R240 += 1, R241 += 1 };
  s1 -> s1 [0, 65535] { R241 += 1, R8 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R243 += 1 };
  s0 -> s0 [0, 65535] { R242 += 1, R243 += 1 };
  s0 -> s2 [9, 13] { R243 += 1 };
  s0 -> s1 [14, 31] { R243 += 1 };
  s0 -> s2 [32, 32] { R243 += 1 };
  s0 -> s1 [33, 65535] { R243 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R243 += 1 };
  s2 -> s1 [0, 65535] { R243 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s0 [0, 65535] { R244 += 1, R245 += 1 };
  s0 -> s1 [0, 65535] { R245 += 1, R9 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R245 += 1, R9 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 78] { R275 += 1 };
  s0 -> s0 [0, 65535] { R274 += 1, R275 += 1 };
  s0 -> s1 [80, 65535] { R275 += 1 };
  s1 -> s1 [0, 78] { R275 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [80, 65535] { R275 += 1 };
  accepting s0, s1;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 65535] { R277 += 1, R220 += 1 };
  s0 -> s0 [0, 65535] { R276 += 1, R277 += 1 };
  s1 -> s1 [0, 65535] { R277 += 1, R220 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 79] { R279 += 1 };
  s0 -> s0 [0, 65535] { R278 += 1, R279 += 1 };
  s0 -> s1 [91, 65535] { R279 += 1 };
  s1 -> s1 [0, 79] { R279 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [91, 65535] { R279 += 1 };
  accepting s0, s1;
};
automaton value2_11 {
  init s0;
  s0 -> s0 [0, 65535] { R284 += 1, R285 += 1 };
  s0 -> s1 [0, 65535] { R285 += 1, R221 += 1 };
  s1 -> s1 [0, 65535] { R285 += 1, R221 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 78] { R287 += 1 };
  s0 -> s0 [0, 65535] { R286 += 1, R287 += 1 };
  s0 -> s2 [79, 79] { R287 += 1 };
  s0 -> s3 [79, 79] { R287 += 1 };
  s0 -> s1 [91, 65535] { R287 += 1 };
  s1 -> s1 [0, 78] { R287 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [79, 79] { R287 += 1 };
  s1 -> s3 [79, 79] { R287 += 1 };
  s1 -> s1 [91, 65535] { R287 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 79] { R287 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [91, 65535] { R287 += 1 };
  accepting s0, s1, s2, s3;
};
};
synchronised {  // Automata constraining c0
automaton c0_0 {
  init s0;
  s0 -> s1 [111, 111];
  accepting s1;
};
};
synchronised {  // Automata constraining value1
automaton value1_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 60];
  s0 -> s1 [61, 61];
  s0 -> s0 [62, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 65535];
  accepting s1;
};
automaton value1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value1_2 {
  init s0;
  s0 -> s1 [0, 60] { R18 += 1 };
  s0 -> s0 [0, 65535] { R17 += 1, R18 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535] { R18 += 1 };
  s1 -> s1 [0, 60] { R18 += 1 };
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535] { R18 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value1_3 {
  init s0;
  s0 -> s1 [0, 64] { R257 += 1 };
  s0 -> s0 [0, 65535] { R256 += 1, R257 += 1 };
  s0 -> s2 [72, 72] { R257 += 1 };
  s0 -> s1 [73, 65535] { R257 += 1 };
  s1 -> s1 [0, 64] { R257 += 1 };
  s1 -> s2 [72, 72] { R257 += 1 };
  s1 -> s1 [73, 65535] { R257 += 1 };
  s2 -> s2 [0, 64] { R257 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [72, 65535] { R257 += 1 };
  accepting s2;
};
automaton value1_4 {
  init s0;
  s0 -> s1 [0, 65535] { R259 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R258 += 1, R259 += 1 };
  s1 -> s1 [0, 65535] { R259 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_5 {
  init s0;
  s0 -> s1 [0, 71] { R261 += 1 };
  s0 -> s2 [0, 65535] { R261 += 1, R10 += 1 };
  s0 -> s0 [0, 65535] { R260 += 1, R261 += 1 };
  s0 -> s3 [72, 72] { R261 += 1 };
  s0 -> s1 [73, 65535] { R261 += 1 };
  s1 -> s1 [0, 71] { R261 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [72, 72] { R261 += 1 };
  s1 -> s1 [73, 65535] { R261 += 1 };
  s2 -> s1 [0, 71] { R261 += 1 };
  s2 -> s2 [0, 65535] { R261 += 1, R10 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [72, 72] { R261 += 1 };
  s2 -> s1 [73, 65535] { R261 += 1 };
  s3 -> s3 [0, 65535] { R261 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value1_6 {
  init s0;
  s0 -> s1 [0, 8] { R263 += 1, R223 += 1 };
  s0 -> s2 [0, 65535] { R263 += 1, R222 += 1, R223 += 1 };
  s0 -> s0 [0, 65535] { R262 += 1, R263 += 1 };
  s0 -> s3 [9, 13] { R263 += 1, R223 += 1 };
  s0 -> s1 [14, 31] { R263 += 1, R223 += 1 };
  s0 -> s3 [32, 32] { R263 += 1, R223 += 1 };
  s0 -> s1 [33, 65535] { R263 += 1, R223 += 1 };
  s1 -> s5 [0, 65535] { R263 += 1 };
  s1 -> s1 [0, 65535] { R263 += 1, R223 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R263 += 1, R223 += 1 };
  s2 -> s2 [0, 65535] { R263 += 1, R222 += 1, R223 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R263 += 1, R223 += 1 };
  s2 -> s1 [14, 31] { R263 += 1, R223 += 1 };
  s2 -> s3 [32, 32] { R263 += 1, R223 += 1 };
  s2 -> s1 [33, 65535] { R263 += 1, R223 += 1 };
  s3 -> s1 [0, 65535] { R263 += 1, R223 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R263 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value1_7 {
  init s0;
  s0 -> s1 [0, 65535] { R265 += 1, R225 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R264 += 1, R265 += 1 };
  s0 -> s2 [0, 65535] { R265 += 1, R224 += 1, R225 += 1 };
  s1 -> s4 [0, 65535] { R265 += 1 };
  s1 -> s1 [0, 65535] { R265 += 1, R225 += 1, R4 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R265 += 1, R225 += 1, R4 += 1 };
  s2 -> s2 [0, 65535] { R265 += 1, R224 += 1, R225 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R265 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_8 {
  init s0;
  s0 -> s1 [0, 8] { R267 += 1, R227 += 1 };
  s0 -> s0 [0, 65535] { R266 += 1, R267 += 1 };
  s0 -> s2 [0, 65535] { R267 += 1, R226 += 1, R227 += 1 };
  s0 -> s3 [9, 13] { R267 += 1, R227 += 1 };
  s0 -> s1 [14, 31] { R267 += 1, R227 += 1 };
  s0 -> s3 [32, 32] { R267 += 1, R227 += 1 };
  s0 -> s1 [33, 65535] { R267 += 1, R227 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R267 += 1 };
  s1 -> s1 [0, 65535] { R267 += 1, R227 += 1 };
  s2 -> s1 [0, 8] { R267 += 1, R227 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R267 += 1, R226 += 1, R227 += 1 };
  s2 -> s3 [9, 13] { R267 += 1, R227 += 1 };
  s2 -> s1 [14, 31] { R267 += 1, R227 += 1 };
  s2 -> s3 [32, 32] { R267 += 1, R227 += 1 };
  s2 -> s1 [33, 65535] { R267 += 1, R227 += 1 };
  s3 -> s1 [0, 65535] { R267 += 1, R227 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R267 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value1_9 {
  init s0;
  s0 -> s1 [0, 65535] { R269 += 1, R229 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R268 += 1, R269 += 1 };
  s0 -> s2 [0, 65535] { R269 += 1, R228 += 1, R229 += 1 };
  s1 -> s1 [0, 65535] { R269 += 1, R229 += 1, R5 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R269 += 1 };
  s2 -> s1 [0, 65535] { R269 += 1, R229 += 1, R5 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R269 += 1, R228 += 1, R229 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R269 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_10 {
  init s0;
  s0 -> s1 [0, 71] { R271 += 1, R247 += 1 };
  s0 -> s2 [0, 65535] { R271 += 1, R246 += 1, R247 += 1 };
  s0 -> s0 [0, 65535] { R270 += 1, R271 += 1 };
  s0 -> s3 [72, 72] { R271 += 1, R247 += 1 };
  s0 -> s1 [73, 65535] { R271 += 1, R247 += 1 };
  s1 -> s1 [0, 71] { R271 += 1, R247 += 1 };
  s1 -> s3 [72, 72] { R271 += 1, R247 += 1 };
  s1 -> s1 [73, 65535] { R271 += 1, R247 += 1 };
  s2 -> s1 [0, 71] { R271 += 1, R247 += 1 };
  s2 -> s2 [0, 65535] { R271 += 1, R246 += 1, R247 += 1 };
  s2 -> s3 [72, 72] { R271 += 1, R247 += 1 };
  s2 -> s1 [73, 65535] { R271 += 1, R247 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R271 += 1, R247 += 1 };
  s3 -> s5 [0, 65535] { R271 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R271 += 1 };
  accepting s3, s4, s5;
};
automaton value1_11 {
  init s0;
  s0 -> s0 [0, 65535] { R272 += 1, R273 += 1 };
  s0 -> s1 [0, 65535] { R273 += 1, R249 += 1, R217 += 1 };
  s0 -> s2 [0, 65535] { R273 += 1, R248 += 1, R249 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R273 += 1 };
  s1 -> s1 [0, 65535] { R273 += 1, R249 += 1, R217 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R273 += 1, R249 += 1, R217 += 1 };
  s2 -> s2 [0, 65535] { R273 += 1, R248 += 1, R249 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R273 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_12 {
  init s0;
  s0 -> s1 [0, 64] { R289 += 1 };
  s0 -> s0 [0, 65535] { R288 += 1, R289 += 1 };
  s0 -> s2 [75, 75] { R289 += 1 };
  s0 -> s1 [76, 65535] { R289 += 1 };
  s1 -> s1 [0, 64] { R289 += 1 };
  s1 -> s2 [75, 75] { R289 += 1 };
  s1 -> s1 [76, 65535] { R289 += 1 };
  s2 -> s2 [0, 64] { R289 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [75, 65535] { R289 += 1 };
  accepting s2;
};
automaton value1_13 {
  init s0;
  s0 -> s1 [0, 65535] { R291 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R290 += 1, R291 += 1 };
  s1 -> s1 [0, 65535] { R291 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_14 {
  init s0;
  s0 -> s1 [0, 74] { R293 += 1 };
  s0 -> s0 [0, 65535] { R292 += 1, R293 += 1 };
  s0 -> s2 [0, 65535] { R293 += 1, R13 += 1 };
  s0 -> s3 [75, 75] { R293 += 1 };
  s0 -> s1 [76, 65535] { R293 += 1 };
  s1 -> s1 [0, 74] { R293 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [75, 75] { R293 += 1 };
  s1 -> s1 [76, 65535] { R293 += 1 };
  s2 -> s1 [0, 74] { R293 += 1 };
  s2 -> s2 [0, 65535] { R293 += 1, R13 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [75, 75] { R293 += 1 };
  s2 -> s1 [76, 65535] { R293 += 1 };
  s3 -> s3 [0, 65535] { R293 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value1_15 {
  init s0;
  s0 -> s1 [0, 8] { R295 += 1, R231 += 1 };
  s0 -> s2 [0, 65535] { R295 += 1, R230 += 1, R231 += 1 };
  s0 -> s0 [0, 65535] { R294 += 1, R295 += 1 };
  s0 -> s3 [9, 13] { R295 += 1, R231 += 1 };
  s0 -> s1 [14, 31] { R295 += 1, R231 += 1 };
  s0 -> s3 [32, 32] { R295 += 1, R231 += 1 };
  s0 -> s1 [33, 65535] { R295 += 1, R231 += 1 };
  s1 -> s1 [0, 65535] { R295 += 1, R231 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R295 += 1 };
  s2 -> s1 [0, 8] { R295 += 1, R231 += 1 };
  s2 -> s2 [0, 65535] { R295 += 1, R230 += 1, R231 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R295 += 1, R231 += 1 };
  s2 -> s1 [14, 31] { R295 += 1, R231 += 1 };
  s2 -> s3 [32, 32] { R295 += 1, R231 += 1 };
  s2 -> s1 [33, 65535] { R295 += 1, R231 += 1 };
  s3 -> s1 [0, 65535] { R295 += 1, R231 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R295 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value1_16 {
  init s0;
  s0 -> s1 [0, 65535] { R297 += 1, R233 += 1, R6 += 1 };
  s0 -> s2 [0, 65535] { R297 += 1, R232 += 1, R233 += 1 };
  s0 -> s0 [0, 65535] { R296 += 1, R297 += 1 };
  s1 -> s1 [0, 65535] { R297 += 1, R233 += 1, R6 += 1 };
  s1 -> s4 [0, 65535] { R297 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R297 += 1, R233 += 1, R6 += 1 };
  s2 -> s2 [0, 65535] { R297 += 1, R232 += 1, R233 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R297 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_17 {
  init s0;
  s0 -> s1 [0, 8] { R299 += 1, R235 += 1 };
  s0 -> s2 [0, 65535] { R299 += 1, R234 += 1, R235 += 1 };
  s0 -> s0 [0, 65535] { R298 += 1, R299 += 1 };
  s0 -> s3 [9, 13] { R299 += 1, R235 += 1 };
  s0 -> s1 [14, 31] { R299 += 1, R235 += 1 };
  s0 -> s3 [32, 32] { R299 += 1, R235 += 1 };
  s0 -> s1 [33, 65535] { R299 += 1, R235 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R299 += 1, R235 += 1 };
  s1 -> s5 [0, 65535] { R299 += 1 };
  s2 -> s1 [0, 8] { R299 += 1, R235 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R299 += 1, R234 += 1, R235 += 1 };
  s2 -> s3 [9, 13] { R299 += 1, R235 += 1 };
  s2 -> s1 [14, 31] { R299 += 1, R235 += 1 };
  s2 -> s3 [32, 32] { R299 += 1, R235 += 1 };
  s2 -> s1 [33, 65535] { R299 += 1, R235 += 1 };
  s3 -> s1 [0, 65535] { R299 += 1, R235 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R299 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value1_18 {
  init s0;
  s0 -> s0 [0, 65535] { R300 += 1, R301 += 1 };
  s0 -> s1 [0, 65535] { R301 += 1, R236 += 1, R237 += 1 };
  s0 -> s2 [0, 65535] { R301 += 1, R237 += 1, R7 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R301 += 1, R236 += 1, R237 += 1 };
  s1 -> s2 [0, 65535] { R301 += 1, R237 += 1, R7 += 1 };
  s2 -> s3 [0, 65535] { R301 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R301 += 1, R237 += 1, R7 += 1 };
  s3 -> s3 [0, 65535] { R301 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_19 {
  init s0;
  s0 -> s1 [0, 74] { R303 += 1, R251 += 1 };
  s0 -> s0 [0, 65535] { R302 += 1, R303 += 1 };
  s0 -> s2 [0, 65535] { R303 += 1, R250 += 1, R251 += 1 };
  s0 -> s1 [76, 65535] { R303 += 1, R251 += 1 };
  s1 -> s1 [0, 74] { R303 += 1, R251 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R303 += 1 };
  s1 -> s1 [76, 65535] { R303 += 1, R251 += 1 };
  s2 -> s1 [0, 74] { R303 += 1, R251 += 1 };
  s2 -> s2 [0, 65535] { R303 += 1, R250 += 1, R251 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [76, 65535] { R303 += 1, R251 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value1_20 {
  init s0;
  s0 -> s1 [0, 65535] { R305 += 1, R253 += 1, R218 += 1 };
  s0 -> s0 [0, 65535] { R304 += 1, R305 += 1 };
  s0 -> s2 [0, 65535] { R305 += 1, R252 += 1, R253 += 1 };
  s1 -> s1 [0, 65535] { R305 += 1, R253 += 1, R218 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R305 += 1 };
  s2 -> s1 [0, 65535] { R305 += 1, R253 += 1, R218 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R305 += 1, R252 += 1, R253 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R305 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_21 {
  init s0;
  s0 -> s1 [0, 75] { R307 += 1, R255 += 1 };
  s0 -> s0 [0, 65535] { R306 += 1, R307 += 1 };
  s0 -> s2 [0, 65535] { R307 += 1, R254 += 1, R255 += 1 };
  s0 -> s1 [91, 65535] { R307 += 1, R255 += 1 };
  s1 -> s1 [0, 75] { R307 += 1, R255 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R307 += 1 };
  s1 -> s1 [91, 65535] { R307 += 1, R255 += 1 };
  s2 -> s1 [0, 75] { R307 += 1, R255 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R307 += 1, R254 += 1, R255 += 1 };
  s2 -> s1 [91, 65535] { R307 += 1, R255 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value1_22 {
  init s0;
  s0 -> s0 [0, 65535] { R308 += 1, R309 += 1 };
  s0 -> s1 [0, 65535] { R309 += 1, R280 += 1, R281 += 1 };
  s0 -> s2 [0, 65535] { R309 += 1, R281 += 1, R219 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R309 += 1, R280 += 1, R281 += 1 };
  s1 -> s2 [0, 65535] { R309 += 1, R281 += 1, R219 += 1 };
  s2 -> s3 [0, 65535] { R309 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R309 += 1, R281 += 1, R219 += 1 };
  s3 -> s3 [0, 65535] { R309 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_23 {
  init s0;
  s0 -> s1 [0, 74] { R311 += 1, R283 += 1 };
  s0 -> s2 [0, 65535] { R311 += 1, R282 += 1, R283 += 1 };
  s0 -> s0 [0, 65535] { R310 += 1, R311 += 1 };
  s0 -> s3 [75, 75] { R311 += 1, R283 += 1 };
  s0 -> s4 [75, 75] { R311 += 1, R283 += 1 };
  s0 -> s1 [91, 65535] { R311 += 1, R283 += 1 };
  s1 -> s1 [0, 74] { R311 += 1, R283 += 1 };
  s1 -> s1 [0, 65535] { R311 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [75, 75] { R311 += 1, R283 += 1 };
  s1 -> s4 [75, 75] { R311 += 1, R283 += 1 };
  s1 -> s1 [91, 65535] { R311 += 1, R283 += 1 };
  s2 -> s1 [0, 74] { R311 += 1, R283 += 1 };
  s2 -> s2 [0, 65535] { R311 += 1, R282 += 1, R283 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [75, 75] { R311 += 1, R283 += 1 };
  s2 -> s4 [75, 75] { R311 += 1, R283 += 1 };
  s2 -> s1 [91, 65535] { R311 += 1, R283 += 1 };
  s3 -> s3 [0, 75] { R311 += 1, R283 += 1 };
  s3 -> s3 [0, 65535] { R311 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [91, 65535] { R311 += 1, R283 += 1 };
  s4 -> s4 [0, 65535] { R311 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
};
synchronised {  // Automata constraining P69
automaton P69_0 {
  init s0;
  s0 -> s1 [107, 107];
  accepting s1;
};
};
constraint R0 = R249 && R1 = R255 && R2 = R273 && R3 = R279 && R17 = 0 && R18 = R311 && R222 - R249 = -1 && R223 = R249 && R224 - R249 = -1 && R225 = R249 && R226 = 0 && R227 = 1 && R228 = 0 && R229 = 1 && R230 - R255 = -1 && R231 = R255 && R232 - R255 = -1 && R233 = R255 && R234 = 0 && R235 = 1 && R236 = 0 && R237 = 1 && R238 - R279 = -1 && R239 = R279 && R240 - R279 = -1 && R241 = R279 && R242 = 0 && R243 = 1 && R244 = 0 && R245 = 1 && R246 = 0 && R247 = R249 && R248 = 0 && R250 = 0 && R251 = R255 && R252 = 0 && R253 = R255 && R254 = 0 && R256 - R311 = 1 && R257 = R273 && R258 - R311 = 1 && R259 = R273 && R260 - R311 = 1 && R261 = R273 && R262 - R311 = 1 && R263 = R273 && R264 - R311 = 1 && R265 = R273 && R266 - R311 = 1 && R267 = R273 && R268 - R311 = 1 && R269 = R273 && R270 - R311 = 1 && R271 = R273 && R272 - R311 = 1 && R274 = 0 && R275 = R279 && R276 = 0 && R277 = R279 && R278 = 0 && R288 = 0 && R289 = R311 && R290 = 0 && R291 = R311 && R292 = 0 && R293 = R311 && R294 = 0 && R295 = R311 && R296 = 0 && R297 = R311 && R298 = 0 && R299 = R311 && R300 = 0 && R301 = R311 && R302 = 0 && R303 = R311 && R304 = 0 && R305 = R311 && R306 = 0 && R307 = R311 && R308 = 0 && R309 = R311 && R310 = 0 && R10 < 1 && R13 < 1 && R213 < 1 && R214 < 1 && 0 < R249 && 0 < R255 && R311 < R273 && 0 < R279 && -1 < R311 && (R219 = 0 || (R280 = 0 && R281 = 0)) && (R219 = 0 || (R282 = 0 && R283 = 0)) && (R221 = 0 || (R284 = 0 && R285 = 0)) && (R221 = 0 || (R286 = 0 && R287 = 0));
// End of Parikh automata intersection problem
