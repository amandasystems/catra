// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R172, R173, R2, R254, R255, R256, R257, R258, R259, R260, R261, R262, R263, R264, R265, R3, R300, R301, R302, R303, R304, R305, R306, R307, R308, R309, R310, R311, R312, R313, R314, R315, R316, R317, R318, R319, R320, R321, R322, R323, R324, R325, R326, R327, R328, R329, R330, R331, R332, R333, R4, R6, R7;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 60];
  s0 -> s1 [61, 61];
  s0 -> s0 [62, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60] { R173 += 1 };
  s0 -> s0 [0, 65535] { R172 += 1, R173 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535] { R173 += 1 };
  s1 -> s1 [0, 60] { R173 += 1 };
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535] { R173 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value2_3 {
  init s0;
  s0 -> s0 [0, 65535] { R264 += 1, R265 += 1 };
  s0 -> s1 [0, 65535] { R265 += 1, R0 += 1 };
  s1 -> s1 [0, 65535] { R265 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 64] { R311 += 1 };
  s0 -> s0 [0, 65535] { R310 += 1, R311 += 1 };
  s0 -> s2 [67, 67] { R311 += 1 };
  s0 -> s1 [68, 65535] { R311 += 1 };
  s1 -> s1 [0, 64] { R311 += 1 };
  s1 -> s2 [67, 67] { R311 += 1 };
  s1 -> s1 [68, 65535] { R311 += 1 };
  s2 -> s2 [0, 64] { R311 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [67, 65535] { R311 += 1 };
  accepting s2;
};
automaton value2_5 {
  init s0;
  s0 -> s0 [0, 65535] { R312 += 1, R313 += 1 };
  s0 -> s1 [0, 65535] { R313 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R313 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 66] { R315 += 1, R7 += 1 };
  s0 -> s2 [0, 65535] { R315 += 1, R6 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R314 += 1, R315 += 1 };
  s0 -> s3 [67, 67] { R315 += 1 };
  s0 -> s1 [68, 65535] { R315 += 1, R7 += 1 };
  s1 -> s1 [0, 66] { R315 += 1, R7 += 1 };
  s1 -> s3 [67, 67] { R315 += 1 };
  s1 -> s1 [68, 65535] { R315 += 1, R7 += 1 };
  s2 -> s1 [0, 66] { R315 += 1, R7 += 1 };
  s2 -> s2 [0, 65535] { R315 += 1, R6 += 1, R7 += 1 };
  s2 -> s3 [67, 67] { R315 += 1 };
  s2 -> s1 [68, 65535] { R315 += 1, R7 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R315 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 8] { R317 += 1, R257 += 1 };
  s0 -> s2 [0, 65535] { R317 += 1, R256 += 1, R257 += 1 };
  s0 -> s0 [0, 65535] { R316 += 1, R317 += 1 };
  s0 -> s3 [9, 13] { R317 += 1, R257 += 1 };
  s0 -> s1 [14, 31] { R317 += 1, R257 += 1 };
  s0 -> s3 [32, 32] { R317 += 1, R257 += 1 };
  s0 -> s1 [33, 65535] { R317 += 1, R257 += 1 };
  s1 -> s5 [0, 65535] { R317 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R317 += 1, R257 += 1 };
  s2 -> s1 [0, 8] { R317 += 1, R257 += 1 };
  s2 -> s2 [0, 65535] { R317 += 1, R256 += 1, R257 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R317 += 1, R257 += 1 };
  s2 -> s1 [14, 31] { R317 += 1, R257 += 1 };
  s2 -> s3 [32, 32] { R317 += 1, R257 += 1 };
  s2 -> s1 [33, 65535] { R317 += 1, R257 += 1 };
  s3 -> s1 [0, 65535] { R317 += 1, R257 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R317 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R319 += 1, R258 += 1, R259 += 1 };
  s0 -> s0 [0, 65535] { R318 += 1, R319 += 1 };
  s0 -> s2 [0, 65535] { R319 += 1, R259 += 1, R3 += 1 };
  s1 -> s1 [0, 65535] { R319 += 1, R258 += 1, R259 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R319 += 1, R259 += 1, R3 += 1 };
  s2 -> s3 [0, 65535] { R319 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R319 += 1, R259 += 1, R3 += 1 };
  s3 -> s3 [0, 65535] { R319 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 8] { R321 += 1, R261 += 1 };
  s0 -> s2 [0, 65535] { R321 += 1, R260 += 1, R261 += 1 };
  s0 -> s0 [0, 65535] { R320 += 1, R321 += 1 };
  s0 -> s3 [9, 13] { R321 += 1, R261 += 1 };
  s0 -> s1 [14, 31] { R321 += 1, R261 += 1 };
  s0 -> s3 [32, 32] { R321 += 1, R261 += 1 };
  s0 -> s1 [33, 65535] { R321 += 1, R261 += 1 };
  s1 -> s5 [0, 65535] { R321 += 1 };
  s1 -> s1 [0, 65535] { R321 += 1, R261 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R321 += 1, R261 += 1 };
  s2 -> s2 [0, 65535] { R321 += 1, R260 += 1, R261 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R321 += 1, R261 += 1 };
  s2 -> s1 [14, 31] { R321 += 1, R261 += 1 };
  s2 -> s3 [32, 32] { R321 += 1, R261 += 1 };
  s2 -> s1 [33, 65535] { R321 += 1, R261 += 1 };
  s3 -> s1 [0, 65535] { R321 += 1, R261 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R321 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value2_10 {
  init s0;
  s0 -> s0 [0, 65535] { R322 += 1, R323 += 1 };
  s0 -> s1 [0, 65535] { R323 += 1, R262 += 1, R263 += 1 };
  s0 -> s2 [0, 65535] { R323 += 1, R263 += 1, R4 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R323 += 1, R262 += 1, R263 += 1 };
  s1 -> s2 [0, 65535] { R323 += 1, R263 += 1, R4 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R323 += 1 };
  s2 -> s2 [0, 65535] { R323 += 1, R263 += 1, R4 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R323 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 66] { R325 += 1, R301 += 1 };
  s0 -> s2 [0, 65535] { R325 += 1, R300 += 1, R301 += 1 };
  s0 -> s0 [0, 65535] { R324 += 1, R325 += 1 };
  s0 -> s1 [68, 65535] { R325 += 1, R301 += 1 };
  s1 -> s1 [0, 66] { R325 += 1, R301 += 1 };
  s1 -> s1 [0, 65535] { R325 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [68, 65535] { R325 += 1, R301 += 1 };
  s2 -> s1 [0, 66] { R325 += 1, R301 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R325 += 1, R300 += 1, R301 += 1 };
  s2 -> s1 [68, 65535] { R325 += 1, R301 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 65535] { R327 += 1, R303 += 1, R254 += 1 };
  s0 -> s2 [0, 65535] { R327 += 1, R302 += 1, R303 += 1 };
  s0 -> s0 [0, 65535] { R326 += 1, R327 += 1 };
  s1 -> s1 [0, 65535] { R327 += 1, R303 += 1, R254 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R327 += 1 };
  s2 -> s1 [0, 65535] { R327 += 1, R303 += 1, R254 += 1 };
  s2 -> s2 [0, 65535] { R327 += 1, R302 += 1, R303 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R327 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 67] { R329 += 1, R305 += 1 };
  s0 -> s0 [0, 65535] { R328 += 1, R329 += 1 };
  s0 -> s2 [0, 65535] { R329 += 1, R304 += 1, R305 += 1 };
  s0 -> s1 [71, 65535] { R329 += 1, R305 += 1 };
  s1 -> s1 [0, 67] { R329 += 1, R305 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R329 += 1 };
  s1 -> s1 [71, 65535] { R329 += 1, R305 += 1 };
  s2 -> s1 [0, 67] { R329 += 1, R305 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R329 += 1, R304 += 1, R305 += 1 };
  s2 -> s1 [71, 65535] { R329 += 1, R305 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 65535] { R331 += 1, R306 += 1, R307 += 1 };
  s0 -> s0 [0, 65535] { R330 += 1, R331 += 1 };
  s0 -> s2 [0, 65535] { R331 += 1, R307 += 1, R255 += 1 };
  s1 -> s1 [0, 65535] { R331 += 1, R306 += 1, R307 += 1 };
  s1 -> s2 [0, 65535] { R331 += 1, R307 += 1, R255 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R331 += 1, R307 += 1, R255 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R331 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R331 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 66] { R333 += 1, R309 += 1 };
  s0 -> s2 [0, 65535] { R333 += 1, R308 += 1, R309 += 1 };
  s0 -> s0 [0, 65535] { R332 += 1, R333 += 1 };
  s0 -> s3 [67, 67] { R333 += 1, R309 += 1 };
  s0 -> s4 [67, 67] { R333 += 1, R309 += 1 };
  s0 -> s5 [71, 71] { R333 += 1, R309 += 1 };
  s0 -> s1 [72, 65535] { R333 += 1, R309 += 1 };
  s1 -> s1 [0, 66] { R333 += 1, R309 += 1 };
  s1 -> s3 [67, 67] { R333 += 1, R309 += 1 };
  s1 -> s4 [67, 67] { R333 += 1, R309 += 1 };
  s1 -> s5 [71, 71] { R333 += 1, R309 += 1 };
  s1 -> s1 [72, 65535] { R333 += 1, R309 += 1 };
  s2 -> s1 [0, 66] { R333 += 1, R309 += 1 };
  s2 -> s2 [0, 65535] { R333 += 1, R308 += 1, R309 += 1 };
  s2 -> s3 [67, 67] { R333 += 1, R309 += 1 };
  s2 -> s4 [67, 67] { R333 += 1, R309 += 1 };
  s2 -> s5 [71, 71] { R333 += 1, R309 += 1 };
  s2 -> s1 [72, 65535] { R333 += 1, R309 += 1 };
  s3 -> s3 [0, 67] { R333 += 1, R309 += 1 };
  s3 -> s7 [71, 71] { R333 += 1, R309 += 1 };
  s3 -> s3 [72, 65535] { R333 += 1, R309 += 1 };
  s5 -> s5 [0, 66] { R333 += 1, R309 += 1 };
  s5 -> s5 [0, 65535] { R333 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [67, 67] { R333 += 1, R309 += 1 };
  s5 -> s8 [67, 67] { R333 += 1, R309 += 1 };
  s5 -> s5 [71, 65535] { R333 += 1, R309 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 67] { R333 += 1, R309 += 1 };
  s7 -> s7 [0, 65535] { R333 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [71, 65535] { R333 += 1, R309 += 1 };
  s8 -> s8 [0, 65535] { R333 += 1 };
  s8 -> s6 [0, 65535];
  accepting s5, s6, s7, s8;
};
};
synchronised {  // Automata constraining c5
automaton c5_0 {
  init s0;
  s0 -> s1 [99, 99];
  accepting s1;
};
};
constraint R1 = R259 && R2 = R265 && R6 = 0 && R7 - R309 = -1 && R172 = 0 && R173 = R333 && R256 - R259 = -1 && R257 = R259 && R258 - R259 = -1 && R260 = 0 && R261 = 1 && R262 = 0 && R263 = 1 && R264 - R333 = 1 && R308 = 0 && R310 = 0 && R311 = R333 && R312 = 0 && R313 = R333 && R314 = 0 && R315 = R333 && R316 = 0 && R317 = R333 && R318 = 0 && R319 = R333 && R320 = 0 && R321 = R333 && R322 = 0 && R323 = R333 && R324 = 0 && R325 = R333 && R326 = 0 && R327 = R333 && R328 = 0 && R329 = R333 && R330 = 0 && R331 = R333 && R332 = 0 && R0 != 0 && R309 - R259 < 1 && 0 < R259 && R333 < R265 && -1 < R309 && -1 < R333 && (R259 != R301 || R300 = R309 || ((R254 != 0 || R301 - R309 < 1 || R301 < 1) && (R254 = 0 || R301 < R309 || R301 < 1))) && (R259 != R303 || R302 = R309 || ((R254 != 0 || R303 - R309 < 1 || R303 < 1) && (R254 = 0 || R303 < R309 || R303 < 1))) && (R259 != R305 || R304 = R309 || ((R254 != 0 || R305 - R309 < 1 || R305 < 1) && (R254 = 0 || R305 < R309 || R305 < 1))) && (R306 != 0 || R307 = R309 || (R255 = 0 && R309 = 0)) && (R259 = R301 || (R254 = 0 && R259 = R309)) && (R259 = R303 || (R254 = 0 && R259 = R309)) && (R259 = R305 || (R254 = 0 && R259 = R309)) && (R306 = 0 || (R255 = 0 && R309 = 0));
// End of Parikh automata intersection problem
