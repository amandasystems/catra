// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R102, R103, R104, R105, R106, R107, R108, R109, R110, R111, R112, R113, R114, R115, R116, R117, R118, R119, R120, R121, R122, R123, R124, R125, R126, R127, R128, R129, R130, R131, R132, R133, R134, R135, R136, R137, R138, R139, R140, R141, R142, R143, R144, R145, R146, R147, R148, R149, R150, R151, R152, R153, R154, R155, R156, R157, R158, R159, R160, R161, R162, R163, R164, R165, R166, R167, R168, R169, R170, R171, R172, R173, R174, R175, R176, R177, R178, R179, R180, R181, R182, R183, R184, R185, R186, R187, R188, R189, R190, R191, R192, R2, R3, R4, R5, R6, R7, R9;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R102 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s0 [0, 65535] { R121 += 1, R122 += 1 };
  s0 -> s1 [11, 11] { R122 += 1 };
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 65535] { R124 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R123 += 1, R124 += 1 };
  s1 -> s1 [0, 65535] { R124 += 1, R7 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s0 [0, 65535] { R159 += 1, R160 += 1 };
  s0 -> s1 [0, 65535] { R160 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R160 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s0 [0, 65535] { R161 += 1, R162 += 1 };
  s0 -> s1 [0, 65535] { R162 += 1, R113 += 1, R114 += 1 };
  s0 -> s2 [32, 32] { R162 += 1, R114 += 1 };
  s1 -> s1 [0, 65535] { R162 += 1, R113 += 1, R114 += 1 };
  s1 -> s2 [32, 32] { R162 += 1, R114 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R162 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R164 += 1, R115 += 1, R116 += 1 };
  s0 -> s0 [0, 65535] { R163 += 1, R164 += 1 };
  s0 -> s2 [0, 65535] { R164 += 1, R116 += 1, R5 += 1 };
  s1 -> s1 [0, 65535] { R164 += 1, R115 += 1, R116 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R164 += 1, R116 += 1, R5 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R164 += 1 };
  s2 -> s2 [0, 65535] { R164 += 1, R116 += 1, R5 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R164 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 8] { R166 += 1, R118 += 1 };
  s0 -> s2 [0, 65535] { R166 += 1, R117 += 1, R118 += 1 };
  s0 -> s0 [0, 65535] { R165 += 1, R166 += 1 };
  s0 -> s3 [9, 13] { R166 += 1, R118 += 1 };
  s0 -> s1 [14, 31] { R166 += 1, R118 += 1 };
  s0 -> s3 [32, 32] { R166 += 1, R118 += 1 };
  s0 -> s1 [33, 65535] { R166 += 1, R118 += 1 };
  s1 -> s5 [0, 65535] { R166 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R166 += 1, R118 += 1 };
  s2 -> s1 [0, 8] { R166 += 1, R118 += 1 };
  s2 -> s2 [0, 65535] { R166 += 1, R117 += 1, R118 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R166 += 1, R118 += 1 };
  s2 -> s1 [14, 31] { R166 += 1, R118 += 1 };
  s2 -> s3 [32, 32] { R166 += 1, R118 += 1 };
  s2 -> s1 [33, 65535] { R166 += 1, R118 += 1 };
  s3 -> s1 [0, 65535] { R166 += 1, R118 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R166 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 65535] { R168 += 1, R119 += 1, R120 += 1 };
  s0 -> s2 [0, 65535] { R168 += 1, R120 += 1, R6 += 1 };
  s0 -> s0 [0, 65535] { R167 += 1, R168 += 1 };
  s1 -> s1 [0, 65535] { R168 += 1, R119 += 1, R120 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R168 += 1, R120 += 1, R6 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R168 += 1, R120 += 1, R6 += 1 };
  s2 -> s4 [0, 65535] { R168 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R168 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 64] { R170 += 1, R136 += 1 };
  s0 -> s2 [0, 65535] { R170 += 1, R135 += 1, R136 += 1 };
  s0 -> s0 [0, 65535] { R169 += 1, R170 += 1 };
  s0 -> s3 [67, 67] { R170 += 1, R136 += 1 };
  s0 -> s1 [68, 65535] { R170 += 1, R136 += 1 };
  s1 -> s1 [0, 64] { R170 += 1, R136 += 1 };
  s1 -> s3 [67, 67] { R170 += 1, R136 += 1 };
  s1 -> s1 [68, 65535] { R170 += 1, R136 += 1 };
  s2 -> s1 [0, 64] { R170 += 1, R136 += 1 };
  s2 -> s2 [0, 65535] { R170 += 1, R135 += 1, R136 += 1 };
  s2 -> s3 [67, 67] { R170 += 1, R136 += 1 };
  s2 -> s1 [68, 65535] { R170 += 1, R136 += 1 };
  s3 -> s3 [0, 64] { R170 += 1, R136 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R170 += 1 };
  s3 -> s3 [67, 65535] { R170 += 1, R136 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton value2_11 {
  init s0;
  s0 -> s0 [0, 65535] { R171 += 1, R172 += 1 };
  s0 -> s1 [0, 65535] { R172 += 1, R137 += 1, R138 += 1 };
  s0 -> s2 [0, 65535] { R172 += 1, R138 += 1, R0 += 1 };
  s1 -> s1 [0, 65535] { R172 += 1, R137 += 1, R138 += 1 };
  s1 -> s2 [0, 65535] { R172 += 1, R138 += 1, R0 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R172 += 1 };
  s2 -> s2 [0, 65535] { R172 += 1, R138 += 1, R0 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R172 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 66] { R174 += 1, R140 += 1, R10 += 1 };
  s0 -> s2 [0, 65535] { R174 += 1, R140 += 1, R9 += 1, R10 += 1 };
  s0 -> s0 [0, 65535] { R173 += 1, R174 += 1 };
  s0 -> s3 [0, 65535] { R174 += 1, R139 += 1, R140 += 1 };
  s0 -> s4 [67, 67] { R174 += 1, R140 += 1 };
  s0 -> s1 [68, 65535] { R174 += 1, R140 += 1, R10 += 1 };
  s1 -> s1 [0, 66] { R174 += 1, R140 += 1, R10 += 1 };
  s1 -> s4 [67, 67] { R174 += 1, R140 += 1 };
  s1 -> s1 [68, 65535] { R174 += 1, R140 += 1, R10 += 1 };
  s2 -> s1 [0, 66] { R174 += 1, R140 += 1, R10 += 1 };
  s2 -> s2 [0, 65535] { R174 += 1, R140 += 1, R9 += 1, R10 += 1 };
  s2 -> s4 [67, 67] { R174 += 1, R140 += 1 };
  s2 -> s1 [68, 65535] { R174 += 1, R140 += 1, R10 += 1 };
  s3 -> s1 [0, 66] { R174 += 1, R140 += 1, R10 += 1 };
  s3 -> s2 [0, 65535] { R174 += 1, R140 += 1, R9 += 1, R10 += 1 };
  s3 -> s3 [0, 65535] { R174 += 1, R139 += 1, R140 += 1 };
  s3 -> s4 [67, 67] { R174 += 1, R140 += 1 };
  s3 -> s1 [68, 65535] { R174 += 1, R140 += 1, R10 += 1 };
  s4 -> s4 [0, 65535] { R174 += 1, R140 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R174 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R174 += 1 };
  accepting s4, s5, s6;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 8] { R176 += 1, R142 += 1, R106 += 1 };
  s0 -> s2 [0, 65535] { R176 += 1, R141 += 1, R142 += 1 };
  s0 -> s3 [0, 65535] { R176 += 1, R142 += 1, R105 += 1, R106 += 1 };
  s0 -> s0 [0, 65535] { R175 += 1, R176 += 1 };
  s0 -> s4 [9, 13] { R176 += 1, R142 += 1, R106 += 1 };
  s0 -> s1 [14, 31] { R176 += 1, R142 += 1, R106 += 1 };
  s0 -> s4 [32, 32] { R176 += 1, R142 += 1, R106 += 1 };
  s0 -> s1 [33, 65535] { R176 += 1, R142 += 1, R106 += 1 };
  s1 -> s7 [0, 65535] { R176 += 1, R142 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R176 += 1, R142 += 1, R106 += 1 };
  s1 -> s6 [0, 65535] { R176 += 1 };
  s2 -> s1 [0, 8] { R176 += 1, R142 += 1, R106 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R176 += 1, R141 += 1, R142 += 1 };
  s2 -> s3 [0, 65535] { R176 += 1, R142 += 1, R105 += 1, R106 += 1 };
  s2 -> s4 [9, 13] { R176 += 1, R142 += 1, R106 += 1 };
  s2 -> s1 [14, 31] { R176 += 1, R142 += 1, R106 += 1 };
  s2 -> s4 [32, 32] { R176 += 1, R142 += 1, R106 += 1 };
  s2 -> s1 [33, 65535] { R176 += 1, R142 += 1, R106 += 1 };
  s3 -> s1 [0, 8] { R176 += 1, R142 += 1, R106 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R176 += 1, R142 += 1, R105 += 1, R106 += 1 };
  s3 -> s6 [0, 65535] { R176 += 1 };
  s3 -> s4 [9, 13] { R176 += 1, R142 += 1, R106 += 1 };
  s3 -> s1 [14, 31] { R176 += 1, R142 += 1, R106 += 1 };
  s3 -> s4 [32, 32] { R176 += 1, R142 += 1, R106 += 1 };
  s3 -> s1 [33, 65535] { R176 += 1, R142 += 1, R106 += 1 };
  s4 -> s1 [0, 65535] { R176 += 1, R142 += 1, R106 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R176 += 1 };
  s7 -> s7 [0, 65535] { R176 += 1, R142 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R176 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 65535] { R178 += 1, R144 += 1, R108 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R177 += 1, R178 += 1 };
  s0 -> s2 [0, 65535] { R178 += 1, R144 += 1, R107 += 1, R108 += 1 };
  s0 -> s3 [0, 65535] { R178 += 1, R143 += 1, R144 += 1 };
  s1 -> s5 [0, 65535] { R178 += 1 };
  s1 -> s1 [0, 65535] { R178 += 1, R144 += 1, R108 += 1, R3 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R178 += 1, R144 += 1 };
  s2 -> s5 [0, 65535] { R178 += 1 };
  s2 -> s1 [0, 65535] { R178 += 1, R144 += 1, R108 += 1, R3 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R178 += 1, R144 += 1, R107 += 1, R108 += 1 };
  s3 -> s1 [0, 65535] { R178 += 1, R144 += 1, R108 += 1, R3 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R178 += 1, R144 += 1, R107 += 1, R108 += 1 };
  s3 -> s3 [0, 65535] { R178 += 1, R143 += 1, R144 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R178 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R178 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R178 += 1, R144 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 8] { R180 += 1, R146 += 1, R110 += 1 };
  s0 -> s2 [0, 65535] { R180 += 1, R145 += 1, R146 += 1 };
  s0 -> s3 [0, 65535] { R180 += 1, R146 += 1, R109 += 1, R110 += 1 };
  s0 -> s0 [0, 65535] { R179 += 1, R180 += 1 };
  s0 -> s4 [9, 13] { R180 += 1, R146 += 1, R110 += 1 };
  s0 -> s1 [14, 31] { R180 += 1, R146 += 1, R110 += 1 };
  s0 -> s4 [32, 32] { R180 += 1, R146 += 1, R110 += 1 };
  s0 -> s1 [33, 65535] { R180 += 1, R146 += 1, R110 += 1 };
  s1 -> s7 [0, 65535] { R180 += 1, R146 += 1 };
  s1 -> s1 [0, 65535] { R180 += 1, R146 += 1, R110 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R180 += 1 };
  s2 -> s1 [0, 8] { R180 += 1, R146 += 1, R110 += 1 };
  s2 -> s2 [0, 65535] { R180 += 1, R145 += 1, R146 += 1 };
  s2 -> s3 [0, 65535] { R180 += 1, R146 += 1, R109 += 1, R110 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [9, 13] { R180 += 1, R146 += 1, R110 += 1 };
  s2 -> s1 [14, 31] { R180 += 1, R146 += 1, R110 += 1 };
  s2 -> s4 [32, 32] { R180 += 1, R146 += 1, R110 += 1 };
  s2 -> s1 [33, 65535] { R180 += 1, R146 += 1, R110 += 1 };
  s3 -> s1 [0, 8] { R180 += 1, R146 += 1, R110 += 1 };
  s3 -> s3 [0, 65535] { R180 += 1, R146 += 1, R109 += 1, R110 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R180 += 1 };
  s3 -> s4 [9, 13] { R180 += 1, R146 += 1, R110 += 1 };
  s3 -> s1 [14, 31] { R180 += 1, R146 += 1, R110 += 1 };
  s3 -> s4 [32, 32] { R180 += 1, R146 += 1, R110 += 1 };
  s3 -> s1 [33, 65535] { R180 += 1, R146 += 1, R110 += 1 };
  s4 -> s1 [0, 65535] { R180 += 1, R146 += 1, R110 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R180 += 1 };
  s7 -> s7 [0, 65535] { R180 += 1, R146 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R180 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 65535] { R182 += 1, R148 += 1, R112 += 1, R4 += 1 };
  s0 -> s2 [0, 65535] { R182 += 1, R147 += 1, R148 += 1 };
  s0 -> s3 [0, 65535] { R182 += 1, R148 += 1, R111 += 1, R112 += 1 };
  s0 -> s0 [0, 65535] { R181 += 1, R182 += 1 };
  s1 -> s1 [0, 65535] { R182 += 1, R148 += 1, R112 += 1, R4 += 1 };
  s1 -> s6 [0, 65535] { R182 += 1, R148 += 1 };
  s1 -> s4 [0, 65535] { R182 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R182 += 1, R148 += 1, R112 += 1, R4 += 1 };
  s2 -> s2 [0, 65535] { R182 += 1, R147 += 1, R148 += 1 };
  s2 -> s3 [0, 65535] { R182 += 1, R148 += 1, R111 += 1, R112 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s1 [0, 65535] { R182 += 1, R148 += 1, R112 += 1, R4 += 1 };
  s3 -> s3 [0, 65535] { R182 += 1, R148 += 1, R111 += 1, R112 += 1 };
  s3 -> s4 [0, 65535] { R182 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R182 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R182 += 1, R148 += 1 };
  s6 -> s4 [0, 65535] { R182 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 66] { R184 += 1, R150 += 1, R126 += 1 };
  s0 -> s2 [0, 65535] { R184 += 1, R149 += 1, R150 += 1 };
  s0 -> s3 [0, 65535] { R184 += 1, R150 += 1, R125 += 1, R126 += 1 };
  s0 -> s0 [0, 65535] { R183 += 1, R184 += 1 };
  s0 -> s1 [68, 65535] { R184 += 1, R150 += 1, R126 += 1 };
  s1 -> s1 [0, 66] { R184 += 1, R150 += 1, R126 += 1 };
  s1 -> s1 [0, 65535] { R184 += 1, R150 += 1 };
  s1 -> s4 [0, 65535] { R184 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [68, 65535] { R184 += 1, R150 += 1, R126 += 1 };
  s2 -> s1 [0, 66] { R184 += 1, R150 += 1, R126 += 1 };
  s2 -> s2 [0, 65535] { R184 += 1, R149 += 1, R150 += 1 };
  s2 -> s3 [0, 65535] { R184 += 1, R150 += 1, R125 += 1, R126 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [68, 65535] { R184 += 1, R150 += 1, R126 += 1 };
  s3 -> s1 [0, 66] { R184 += 1, R150 += 1, R126 += 1 };
  s3 -> s4 [0, 65535] { R184 += 1 };
  s3 -> s3 [0, 65535] { R184 += 1, R150 += 1, R125 += 1, R126 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [68, 65535] { R184 += 1, R150 += 1, R126 += 1 };
  s4 -> s4 [0, 65535] { R184 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R186 += 1, R152 += 1, R127 += 1, R128 += 1 };
  s0 -> s2 [0, 65535] { R186 += 1, R152 += 1, R128 += 1, R103 += 1 };
  s0 -> s0 [0, 65535] { R185 += 1, R186 += 1 };
  s0 -> s3 [0, 65535] { R186 += 1, R151 += 1, R152 += 1 };
  s1 -> s1 [0, 65535] { R186 += 1, R152 += 1, R127 += 1, R128 += 1 };
  s1 -> s2 [0, 65535] { R186 += 1, R152 += 1, R128 += 1, R103 += 1 };
  s1 -> s6 [0, 65535] { R186 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R186 += 1, R152 += 1, R128 += 1, R103 += 1 };
  s2 -> s5 [0, 65535] { R186 += 1, R152 += 1 };
  s2 -> s6 [0, 65535] { R186 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R186 += 1, R152 += 1, R127 += 1, R128 += 1 };
  s3 -> s2 [0, 65535] { R186 += 1, R152 += 1, R128 += 1, R103 += 1 };
  s3 -> s3 [0, 65535] { R186 += 1, R151 += 1, R152 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R186 += 1, R152 += 1 };
  s5 -> s6 [0, 65535] { R186 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R186 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 67] { R188 += 1, R154 += 1, R130 += 1 };
  s0 -> s2 [0, 65535] { R188 += 1, R153 += 1, R154 += 1 };
  s0 -> s0 [0, 65535] { R187 += 1, R188 += 1 };
  s0 -> s3 [0, 65535] { R188 += 1, R154 += 1, R129 += 1, R130 += 1 };
  s0 -> s1 [74, 65535] { R188 += 1, R154 += 1, R130 += 1 };
  s1 -> s1 [0, 67] { R188 += 1, R154 += 1, R130 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R188 += 1, R154 += 1 };
  s1 -> s5 [0, 65535] { R188 += 1 };
  s1 -> s1 [74, 65535] { R188 += 1, R154 += 1, R130 += 1 };
  s2 -> s1 [0, 67] { R188 += 1, R154 += 1, R130 += 1 };
  s2 -> s2 [0, 65535] { R188 += 1, R153 += 1, R154 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R188 += 1, R154 += 1, R129 += 1, R130 += 1 };
  s2 -> s1 [74, 65535] { R188 += 1, R154 += 1, R130 += 1 };
  s3 -> s1 [0, 67] { R188 += 1, R154 += 1, R130 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R188 += 1, R154 += 1, R129 += 1, R130 += 1 };
  s3 -> s5 [0, 65535] { R188 += 1 };
  s3 -> s1 [74, 65535] { R188 += 1, R154 += 1, R130 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R188 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_20 {
  init s0;
  s0 -> s0 [0, 65535] { R189 += 1, R190 += 1 };
  s0 -> s1 [0, 65535] { R190 += 1, R156 += 1, R132 += 1, R104 += 1 };
  s0 -> s2 [0, 65535] { R190 += 1, R156 += 1, R131 += 1, R132 += 1 };
  s0 -> s3 [0, 65535] { R190 += 1, R155 += 1, R156 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R190 += 1, R156 += 1, R132 += 1, R104 += 1 };
  s1 -> s5 [0, 65535] { R190 += 1 };
  s1 -> s6 [0, 65535] { R190 += 1, R156 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R190 += 1, R156 += 1, R132 += 1, R104 += 1 };
  s2 -> s2 [0, 65535] { R190 += 1, R156 += 1, R131 += 1, R132 += 1 };
  s2 -> s5 [0, 65535] { R190 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R190 += 1, R156 += 1, R132 += 1, R104 += 1 };
  s3 -> s2 [0, 65535] { R190 += 1, R156 += 1, R131 += 1, R132 += 1 };
  s3 -> s3 [0, 65535] { R190 += 1, R155 += 1, R156 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R190 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R190 += 1 };
  s6 -> s6 [0, 65535] { R190 += 1, R156 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 66] { R192 += 1, R158 += 1, R134 += 1 };
  s0 -> s2 [0, 65535] { R192 += 1, R158 += 1, R133 += 1, R134 += 1 };
  s0 -> s0 [0, 65535] { R191 += 1, R192 += 1 };
  s0 -> s3 [0, 65535] { R192 += 1, R157 += 1, R158 += 1 };
  s0 -> s4 [67, 67] { R192 += 1, R158 += 1, R134 += 1 };
  s0 -> s5 [67, 67] { R192 += 1, R158 += 1, R134 += 1 };
  s0 -> s1 [74, 65535] { R192 += 1, R158 += 1, R134 += 1 };
  s1 -> s1 [0, 66] { R192 += 1, R158 += 1, R134 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R192 += 1, R158 += 1 };
  s1 -> s7 [0, 65535] { R192 += 1 };
  s1 -> s4 [67, 67] { R192 += 1, R158 += 1, R134 += 1 };
  s1 -> s5 [67, 67] { R192 += 1, R158 += 1, R134 += 1 };
  s1 -> s1 [74, 65535] { R192 += 1, R158 += 1, R134 += 1 };
  s2 -> s1 [0, 66] { R192 += 1, R158 += 1, R134 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R192 += 1, R158 += 1, R133 += 1, R134 += 1 };
  s2 -> s7 [0, 65535] { R192 += 1 };
  s2 -> s4 [67, 67] { R192 += 1, R158 += 1, R134 += 1 };
  s2 -> s5 [67, 67] { R192 += 1, R158 += 1, R134 += 1 };
  s2 -> s1 [74, 65535] { R192 += 1, R158 += 1, R134 += 1 };
  s3 -> s1 [0, 66] { R192 += 1, R158 += 1, R134 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s2 [0, 65535] { R192 += 1, R158 += 1, R133 += 1, R134 += 1 };
  s3 -> s3 [0, 65535] { R192 += 1, R157 += 1, R158 += 1 };
  s3 -> s4 [67, 67] { R192 += 1, R158 += 1, R134 += 1 };
  s3 -> s5 [67, 67] { R192 += 1, R158 += 1, R134 += 1 };
  s3 -> s1 [74, 65535] { R192 += 1, R158 += 1, R134 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R192 += 1 };
  s4 -> s4 [0, 65535] { R192 += 1, R158 += 1 };
  s5 -> s5 [0, 67] { R192 += 1, R158 += 1, R134 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R192 += 1 };
  s5 -> s5 [0, 65535] { R192 += 1, R158 += 1 };
  s5 -> s5 [74, 65535] { R192 += 1, R158 += 1, R134 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R192 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
};
synchronised {  // Automata constraining c5
automaton c5_0 {
  init s0;
  s0 -> s1 [99, 99];
  accepting s1;
};
};
constraint R0 = R108 && R1 - R158 = 1 && R2 = R192 && R9 = 0 && R105 - R108 = -1 && R106 = R108 && R107 - R108 = -1 && R109 = 0 && R110 = 1 && R111 = 0 && R112 = 1 && R113 = R158 && R114 - R158 = 1 && R115 = R158 && R116 - R158 = 1 && R117 = 0 && R118 = 1 && R119 = 0 && R120 = 1 && R121 = 0 && R122 = 1 && R123 = 0 && R124 = 1 && R135 = 0 && R136 = R158 && R137 = 0 && R138 = R158 && R139 = 0 && R140 = R158 && R141 = 0 && R142 = R158 && R143 = 0 && R144 = R158 && R145 = 0 && R146 = R158 && R147 = 0 && R148 = R158 && R149 = 0 && R150 = R158 && R151 = 0 && R152 = R158 && R153 = 0 && R154 = R158 && R155 = 0 && R156 = R158 && R157 = 0 && R159 = 1 && R160 = R192 && R161 = 1 && R162 = R192 && R163 = 1 && R164 = R192 && R165 = 1 && R166 = R192 && R167 = 1 && R168 = R192 && R169 = 1 && R170 = R192 && R171 = 1 && R172 = R192 && R173 = 1 && R174 = R192 && R175 = 1 && R176 = R192 && R177 = 1 && R178 = R192 && R179 = 1 && R180 = R192 && R181 = 1 && R182 = R192 && R183 = 1 && R184 = R192 && R185 = 1 && R186 = R192 && R187 = 1 && R188 = R192 && R189 = 1 && R190 = R192 && R191 = 1 && R10 < R108 && -2 < R10 && R102 < 1 && 0 < R108 && -1 < R158 && 0 < R192 && (R104 != 0 || ((R131 != 0 || R10 - R132 = -1 || R10 < 0) && (R131 = 0 || R10 < 0))) && (R104 != 0 || ((R133 != 0 || R10 - R134 = -1 || R10 < 0) && (R133 = 0 || R10 < 0))) && (R108 != R126 || R10 - R125 = -1 || ((R103 != 0 || R126 - R10 < 2) && (R103 = 0 || R126 - R10 < 1 || R126 < 1))) && (R108 != R128 || R10 - R127 = -1 || ((R103 != 0 || R128 - R10 < 2) && (R103 = 0 || R128 - R10 < 1 || R128 < 1))) && (R108 != R130 || R10 - R129 = -1 || ((R103 != 0 || R130 - R10 < 2) && (R103 = 0 || R130 - R10 < 1 || R130 < 1))) && (R104 = 0 || (R10 - R132 = -1 && R131 = 0)) && (R104 = 0 || (R10 - R134 = -1 && R133 = 0)) && (R108 = R126 || (R10 - R108 = -1 && R103 = 0)) && (R108 = R128 || (R10 - R108 = -1 && R103 = 0)) && (R108 = R130 || (R10 - R108 = -1 && R103 = 0));
// End of Parikh automata intersection problem
