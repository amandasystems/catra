// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R114, R115, R116, R117, R118, R119, R12, R120, R121, R122, R123, R124, R125, R126, R127, R128, R129, R130, R131, R132, R133, R134, R135, R136, R137, R138, R139, R140, R141, R142, R143, R144, R145, R146, R147, R148, R149, R150, R151, R152, R153, R154, R155, R156, R157, R158, R159, R16, R160, R161, R162, R163, R164, R165, R166, R167, R168, R169, R17, R170, R171, R172, R173, R174, R175, R176, R177, R178, R179, R180, R181, R182, R183, R184, R185, R186, R187, R188, R189, R190, R191, R192, R193, R194, R195, R196, R197, R198, R199, R2, R200, R201, R202, R203, R204, R205, R206, R207, R208, R209, R3, R4, R5, R6, R7, R8, R9;
synchronised {  // Automata constraining value1
automaton value1_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 60];
  s0 -> s1 [61, 61];
  s0 -> s0 [62, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 65535];
  accepting s1;
};
automaton value1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton value1_2 {
  init s0;
  s0 -> s1 [0, 60] { R17 += 1 };
  s0 -> s0 [0, 65535] { R16 += 1, R17 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535] { R17 += 1 };
  s1 -> s1 [0, 60] { R17 += 1 };
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535] { R17 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value1_3 {
  init s0;
  s0 -> s0 [0, 65535] { R146 += 1, R147 += 1 };
  s0 -> s1 [0, 65535] { R147 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R147 += 1, R0 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_4 {
  init s0;
  s0 -> s1 [0, 65535] { R149 += 1, R116 += 1, R117 += 1 };
  s0 -> s0 [0, 65535] { R148 += 1, R149 += 1 };
  s0 -> s2 [10, 10] { R149 += 1, R117 += 1 };
  s1 -> s1 [0, 65535] { R149 += 1, R116 += 1, R117 += 1 };
  s1 -> s2 [10, 10] { R149 += 1, R117 += 1 };
  s2 -> s2 [0, 65535] { R149 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value1_5 {
  init s0;
  s0 -> s0 [0, 65535] { R150 += 1, R151 += 1 };
  s0 -> s1 [0, 65535] { R151 += 1, R118 += 1, R119 += 1 };
  s0 -> s2 [0, 65535] { R151 += 1, R119 += 1, R5 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R151 += 1, R118 += 1, R119 += 1 };
  s1 -> s2 [0, 65535] { R151 += 1, R119 += 1, R5 += 1 };
  s2 -> s3 [0, 65535] { R151 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R151 += 1, R119 += 1, R5 += 1 };
  s3 -> s3 [0, 65535] { R151 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_6 {
  init s0;
  s0 -> s1 [0, 65535] { R181 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R180 += 1, R181 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R181 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_7 {
  init s0;
  s0 -> s0 [0, 65535] { R182 += 1, R183 += 1 };
  s0 -> s1 [0, 65535] { R183 += 1, R136 += 1, R137 += 1 };
  s0 -> s2 [13, 13] { R183 += 1, R137 += 1 };
  s1 -> s1 [0, 65535] { R183 += 1, R136 += 1, R137 += 1 };
  s1 -> s2 [13, 13] { R183 += 1, R137 += 1 };
  s2 -> s2 [0, 65535] { R183 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value1_8 {
  init s0;
  s0 -> s1 [0, 65535] { R185 += 1, R138 += 1, R139 += 1 };
  s0 -> s0 [0, 65535] { R184 += 1, R185 += 1 };
  s0 -> s2 [0, 65535] { R185 += 1, R139 += 1, R10 += 1 };
  s1 -> s1 [0, 65535] { R185 += 1, R138 += 1, R139 += 1 };
  s1 -> s2 [0, 65535] { R185 += 1, R139 += 1, R10 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R185 += 1 };
  s2 -> s2 [0, 65535] { R185 += 1, R139 += 1, R10 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R185 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_9 {
  init s0;
  s0 -> s1 [0, 64] { R187 += 1, R157 += 1 };
  s0 -> s0 [0, 65535] { R186 += 1, R187 += 1 };
  s0 -> s2 [0, 65535] { R187 += 1, R156 += 1, R157 += 1 };
  s0 -> s3 [67, 67] { R187 += 1, R157 += 1 };
  s0 -> s1 [68, 65535] { R187 += 1, R157 += 1 };
  s1 -> s1 [0, 64] { R187 += 1, R157 += 1 };
  s1 -> s3 [67, 67] { R187 += 1, R157 += 1 };
  s1 -> s1 [68, 65535] { R187 += 1, R157 += 1 };
  s2 -> s1 [0, 64] { R187 += 1, R157 += 1 };
  s2 -> s2 [0, 65535] { R187 += 1, R156 += 1, R157 += 1 };
  s2 -> s3 [67, 67] { R187 += 1, R157 += 1 };
  s2 -> s1 [68, 65535] { R187 += 1, R157 += 1 };
  s3 -> s3 [0, 64] { R187 += 1, R157 += 1 };
  s3 -> s3 [0, 65535] { R187 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [67, 65535] { R187 += 1, R157 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton value1_10 {
  init s0;
  s0 -> s1 [0, 65535] { R189 += 1, R158 += 1, R159 += 1 };
  s0 -> s0 [0, 65535] { R188 += 1, R189 += 1 };
  s0 -> s2 [0, 65535] { R189 += 1, R159 += 1, R2 += 1 };
  s1 -> s1 [0, 65535] { R189 += 1, R158 += 1, R159 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R189 += 1, R159 += 1, R2 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R189 += 1 };
  s2 -> s2 [0, 65535] { R189 += 1, R159 += 1, R2 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R189 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_11 {
  init s0;
  s0 -> s1 [0, 66] { R191 += 1, R161 += 1 };
  s0 -> s2 [0, 65535] { R191 += 1, R161 += 1, R12 += 1 };
  s0 -> s3 [0, 65535] { R191 += 1, R160 += 1, R161 += 1 };
  s0 -> s0 [0, 65535] { R190 += 1, R191 += 1 };
  s0 -> s4 [67, 67] { R191 += 1, R161 += 1 };
  s0 -> s1 [68, 65535] { R191 += 1, R161 += 1 };
  s1 -> s1 [0, 66] { R191 += 1, R161 += 1 };
  s1 -> s1 [0, 65535] { R191 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s4 [67, 67] { R191 += 1, R161 += 1 };
  s1 -> s1 [68, 65535] { R191 += 1, R161 += 1 };
  s2 -> s1 [0, 66] { R191 += 1, R161 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R191 += 1 };
  s2 -> s2 [0, 65535] { R191 += 1, R161 += 1, R12 += 1 };
  s2 -> s4 [67, 67] { R191 += 1, R161 += 1 };
  s2 -> s1 [68, 65535] { R191 += 1, R161 += 1 };
  s3 -> s1 [0, 66] { R191 += 1, R161 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R191 += 1, R161 += 1, R12 += 1 };
  s3 -> s3 [0, 65535] { R191 += 1, R160 += 1, R161 += 1 };
  s3 -> s4 [67, 67] { R191 += 1, R161 += 1 };
  s3 -> s1 [68, 65535] { R191 += 1, R161 += 1 };
  s4 -> s4 [0, 65535] { R191 += 1, R161 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R191 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton value1_12 {
  init s0;
  s0 -> s1 [0, 8] { R193 += 1, R163 += 1, R129 += 1 };
  s0 -> s2 [0, 65535] { R193 += 1, R163 += 1, R128 += 1, R129 += 1 };
  s0 -> s0 [0, 65535] { R192 += 1, R193 += 1 };
  s0 -> s3 [0, 65535] { R193 += 1, R162 += 1, R163 += 1 };
  s0 -> s4 [9, 13] { R193 += 1, R163 += 1, R129 += 1 };
  s0 -> s1 [14, 31] { R193 += 1, R163 += 1, R129 += 1 };
  s0 -> s4 [32, 32] { R193 += 1, R163 += 1, R129 += 1 };
  s0 -> s1 [33, 65535] { R193 += 1, R163 += 1, R129 += 1 };
  s1 -> s7 [0, 65535] { R193 += 1, R163 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R193 += 1 };
  s1 -> s1 [0, 65535] { R193 += 1, R163 += 1, R129 += 1 };
  s2 -> s1 [0, 8] { R193 += 1, R163 += 1, R129 += 1 };
  s2 -> s2 [0, 65535] { R193 += 1, R163 += 1, R128 += 1, R129 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R193 += 1 };
  s2 -> s4 [9, 13] { R193 += 1, R163 += 1, R129 += 1 };
  s2 -> s1 [14, 31] { R193 += 1, R163 += 1, R129 += 1 };
  s2 -> s4 [32, 32] { R193 += 1, R163 += 1, R129 += 1 };
  s2 -> s1 [33, 65535] { R193 += 1, R163 += 1, R129 += 1 };
  s3 -> s1 [0, 8] { R193 += 1, R163 += 1, R129 += 1 };
  s3 -> s2 [0, 65535] { R193 += 1, R163 += 1, R128 += 1, R129 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R193 += 1, R162 += 1, R163 += 1 };
  s3 -> s4 [9, 13] { R193 += 1, R163 += 1, R129 += 1 };
  s3 -> s1 [14, 31] { R193 += 1, R163 += 1, R129 += 1 };
  s3 -> s4 [32, 32] { R193 += 1, R163 += 1, R129 += 1 };
  s3 -> s1 [33, 65535] { R193 += 1, R163 += 1, R129 += 1 };
  s4 -> s1 [0, 65535] { R193 += 1, R163 += 1, R129 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R193 += 1 };
  s7 -> s7 [0, 65535] { R193 += 1, R163 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R193 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton value1_13 {
  init s0;
  s0 -> s1 [0, 65535] { R195 += 1, R165 += 1, R130 += 1, R131 += 1 };
  s0 -> s2 [0, 65535] { R195 += 1, R165 += 1, R131 += 1, R8 += 1 };
  s0 -> s3 [0, 65535] { R195 += 1, R164 += 1, R165 += 1 };
  s0 -> s0 [0, 65535] { R194 += 1, R195 += 1 };
  s1 -> s6 [0, 65535] { R195 += 1 };
  s1 -> s1 [0, 65535] { R195 += 1, R165 += 1, R130 += 1, R131 += 1 };
  s1 -> s2 [0, 65535] { R195 += 1, R165 += 1, R131 += 1, R8 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R195 += 1, R165 += 1 };
  s2 -> s6 [0, 65535] { R195 += 1 };
  s2 -> s2 [0, 65535] { R195 += 1, R165 += 1, R131 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R195 += 1, R165 += 1, R130 += 1, R131 += 1 };
  s3 -> s2 [0, 65535] { R195 += 1, R165 += 1, R131 += 1, R8 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R195 += 1, R164 += 1, R165 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R195 += 1, R165 += 1 };
  s5 -> s6 [0, 65535] { R195 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R195 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value1_14 {
  init s0;
  s0 -> s1 [0, 8] { R197 += 1, R167 += 1, R133 += 1 };
  s0 -> s2 [0, 65535] { R197 += 1, R166 += 1, R167 += 1 };
  s0 -> s0 [0, 65535] { R196 += 1, R197 += 1 };
  s0 -> s3 [0, 65535] { R197 += 1, R167 += 1, R132 += 1, R133 += 1 };
  s0 -> s4 [9, 13] { R197 += 1, R167 += 1, R133 += 1 };
  s0 -> s1 [14, 31] { R197 += 1, R167 += 1, R133 += 1 };
  s0 -> s4 [32, 32] { R197 += 1, R167 += 1, R133 += 1 };
  s0 -> s1 [33, 65535] { R197 += 1, R167 += 1, R133 += 1 };
  s1 -> s1 [0, 65535] { R197 += 1, R167 += 1, R133 += 1 };
  s1 -> s7 [0, 65535] { R197 += 1, R167 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R197 += 1 };
  s2 -> s1 [0, 8] { R197 += 1, R167 += 1, R133 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R197 += 1, R166 += 1, R167 += 1 };
  s2 -> s3 [0, 65535] { R197 += 1, R167 += 1, R132 += 1, R133 += 1 };
  s2 -> s4 [9, 13] { R197 += 1, R167 += 1, R133 += 1 };
  s2 -> s1 [14, 31] { R197 += 1, R167 += 1, R133 += 1 };
  s2 -> s4 [32, 32] { R197 += 1, R167 += 1, R133 += 1 };
  s2 -> s1 [33, 65535] { R197 += 1, R167 += 1, R133 += 1 };
  s3 -> s1 [0, 8] { R197 += 1, R167 += 1, R133 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R197 += 1, R167 += 1, R132 += 1, R133 += 1 };
  s3 -> s6 [0, 65535] { R197 += 1 };
  s3 -> s4 [9, 13] { R197 += 1, R167 += 1, R133 += 1 };
  s3 -> s1 [14, 31] { R197 += 1, R167 += 1, R133 += 1 };
  s3 -> s4 [32, 32] { R197 += 1, R167 += 1, R133 += 1 };
  s3 -> s1 [33, 65535] { R197 += 1, R167 += 1, R133 += 1 };
  s4 -> s1 [0, 65535] { R197 += 1, R167 += 1, R133 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R197 += 1 };
  s7 -> s7 [0, 65535] { R197 += 1, R167 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R197 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton value1_15 {
  init s0;
  s0 -> s1 [0, 65535] { R199 += 1, R169 += 1, R135 += 1, R9 += 1 };
  s0 -> s2 [0, 65535] { R199 += 1, R169 += 1, R134 += 1, R135 += 1 };
  s0 -> s3 [0, 65535] { R199 += 1, R168 += 1, R169 += 1 };
  s0 -> s0 [0, 65535] { R198 += 1, R199 += 1 };
  s1 -> s5 [0, 65535] { R199 += 1 };
  s1 -> s1 [0, 65535] { R199 += 1, R169 += 1, R135 += 1, R9 += 1 };
  s1 -> s6 [0, 65535] { R199 += 1, R169 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R199 += 1 };
  s2 -> s1 [0, 65535] { R199 += 1, R169 += 1, R135 += 1, R9 += 1 };
  s2 -> s2 [0, 65535] { R199 += 1, R169 += 1, R134 += 1, R135 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R199 += 1, R169 += 1, R135 += 1, R9 += 1 };
  s3 -> s2 [0, 65535] { R199 += 1, R169 += 1, R134 += 1, R135 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R199 += 1, R168 += 1, R169 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R199 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R199 += 1 };
  s6 -> s6 [0, 65535] { R199 += 1, R169 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value1_16 {
  init s0;
  s0 -> s1 [0, 66] { R201 += 1, R171 += 1, R141 += 1 };
  s0 -> s2 [0, 65535] { R201 += 1, R171 += 1, R140 += 1, R141 += 1 };
  s0 -> s0 [0, 65535] { R200 += 1, R201 += 1 };
  s0 -> s3 [0, 65535] { R201 += 1, R170 += 1, R171 += 1 };
  s0 -> s1 [68, 65535] { R201 += 1, R171 += 1, R141 += 1 };
  s1 -> s1 [0, 66] { R201 += 1, R171 += 1, R141 += 1 };
  s1 -> s1 [0, 65535] { R201 += 1, R171 += 1 };
  s1 -> s5 [0, 65535] { R201 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [68, 65535] { R201 += 1, R171 += 1, R141 += 1 };
  s2 -> s1 [0, 66] { R201 += 1, R171 += 1, R141 += 1 };
  s2 -> s2 [0, 65535] { R201 += 1, R171 += 1, R140 += 1, R141 += 1 };
  s2 -> s5 [0, 65535] { R201 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [68, 65535] { R201 += 1, R171 += 1, R141 += 1 };
  s3 -> s1 [0, 66] { R201 += 1, R171 += 1, R141 += 1 };
  s3 -> s2 [0, 65535] { R201 += 1, R171 += 1, R140 += 1, R141 += 1 };
  s3 -> s3 [0, 65535] { R201 += 1, R170 += 1, R171 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [68, 65535] { R201 += 1, R171 += 1, R141 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R201 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value1_17 {
  init s0;
  s0 -> s1 [0, 65535] { R203 += 1, R173 += 1, R143 += 1, R114 += 1 };
  s0 -> s2 [0, 65535] { R203 += 1, R172 += 1, R173 += 1 };
  s0 -> s3 [0, 65535] { R203 += 1, R173 += 1, R142 += 1, R143 += 1 };
  s0 -> s0 [0, 65535] { R202 += 1, R203 += 1 };
  s1 -> s4 [0, 65535] { R203 += 1 };
  s1 -> s1 [0, 65535] { R203 += 1, R173 += 1, R143 += 1, R114 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R203 += 1, R173 += 1 };
  s2 -> s1 [0, 65535] { R203 += 1, R173 += 1, R143 += 1, R114 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R203 += 1, R172 += 1, R173 += 1 };
  s2 -> s3 [0, 65535] { R203 += 1, R173 += 1, R142 += 1, R143 += 1 };
  s3 -> s4 [0, 65535] { R203 += 1 };
  s3 -> s1 [0, 65535] { R203 += 1, R173 += 1, R143 += 1, R114 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R203 += 1, R173 += 1, R142 += 1, R143 += 1 };
  s4 -> s4 [0, 65535] { R203 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R203 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R203 += 1, R173 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value1_18 {
  init s0;
  s0 -> s1 [0, 67] { R205 += 1, R175 += 1, R145 += 1 };
  s0 -> s2 [0, 65535] { R205 += 1, R174 += 1, R175 += 1 };
  s0 -> s3 [0, 65535] { R205 += 1, R175 += 1, R144 += 1, R145 += 1 };
  s0 -> s0 [0, 65535] { R204 += 1, R205 += 1 };
  s0 -> s1 [91, 65535] { R205 += 1, R175 += 1, R145 += 1 };
  s1 -> s1 [0, 67] { R205 += 1, R175 += 1, R145 += 1 };
  s1 -> s1 [0, 65535] { R205 += 1, R175 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R205 += 1 };
  s1 -> s1 [91, 65535] { R205 += 1, R175 += 1, R145 += 1 };
  s2 -> s1 [0, 67] { R205 += 1, R175 += 1, R145 += 1 };
  s2 -> s2 [0, 65535] { R205 += 1, R174 += 1, R175 += 1 };
  s2 -> s3 [0, 65535] { R205 += 1, R175 += 1, R144 += 1, R145 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [91, 65535] { R205 += 1, R175 += 1, R145 += 1 };
  s3 -> s1 [0, 67] { R205 += 1, R175 += 1, R145 += 1 };
  s3 -> s3 [0, 65535] { R205 += 1, R175 += 1, R144 += 1, R145 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R205 += 1 };
  s3 -> s1 [91, 65535] { R205 += 1, R175 += 1, R145 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R205 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value1_19 {
  init s0;
  s0 -> s1 [0, 65535] { R207 += 1, R176 += 1, R177 += 1 };
  s0 -> s0 [0, 65535] { R206 += 1, R207 += 1 };
  s0 -> s2 [0, 65535] { R207 += 1, R177 += 1, R152 += 1, R153 += 1 };
  s0 -> s3 [0, 65535] { R207 += 1, R177 += 1, R153 += 1, R115 += 1 };
  s1 -> s1 [0, 65535] { R207 += 1, R176 += 1, R177 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s2 [0, 65535] { R207 += 1, R177 += 1, R152 += 1, R153 += 1 };
  s1 -> s3 [0, 65535] { R207 += 1, R177 += 1, R153 += 1, R115 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R207 += 1, R177 += 1, R152 += 1, R153 += 1 };
  s2 -> s6 [0, 65535] { R207 += 1 };
  s2 -> s3 [0, 65535] { R207 += 1, R177 += 1, R153 += 1, R115 += 1 };
  s3 -> s4 [0, 65535] { R207 += 1, R177 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R207 += 1 };
  s3 -> s3 [0, 65535] { R207 += 1, R177 += 1, R153 += 1, R115 += 1 };
  s4 -> s4 [0, 65535] { R207 += 1, R177 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R207 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R207 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value1_20 {
  init s0;
  s0 -> s1 [0, 66] { R209 += 1, R179 += 1, R155 += 1 };
  s0 -> s0 [0, 65535] { R208 += 1, R209 += 1 };
  s0 -> s2 [0, 65535] { R209 += 1, R179 += 1, R154 += 1, R155 += 1 };
  s0 -> s3 [0, 65535] { R209 += 1, R178 += 1, R179 += 1 };
  s0 -> s4 [67, 67] { R209 += 1, R179 += 1, R155 += 1 };
  s0 -> s5 [67, 67] { R209 += 1, R179 += 1, R155 += 1 };
  s0 -> s1 [91, 65535] { R209 += 1, R179 += 1, R155 += 1 };
  s1 -> s1 [0, 66] { R209 += 1, R179 += 1, R155 += 1 };
  s1 -> s6 [0, 65535] { R209 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s1 [0, 65535] { R209 += 1, R179 += 1 };
  s1 -> s4 [67, 67] { R209 += 1, R179 += 1, R155 += 1 };
  s1 -> s5 [67, 67] { R209 += 1, R179 += 1, R155 += 1 };
  s1 -> s1 [91, 65535] { R209 += 1, R179 += 1, R155 += 1 };
  s2 -> s1 [0, 66] { R209 += 1, R179 += 1, R155 += 1 };
  s2 -> s6 [0, 65535] { R209 += 1 };
  s2 -> s2 [0, 65535] { R209 += 1, R179 += 1, R154 += 1, R155 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s4 [67, 67] { R209 += 1, R179 += 1, R155 += 1 };
  s2 -> s5 [67, 67] { R209 += 1, R179 += 1, R155 += 1 };
  s2 -> s1 [91, 65535] { R209 += 1, R179 += 1, R155 += 1 };
  s3 -> s1 [0, 66] { R209 += 1, R179 += 1, R155 += 1 };
  s3 -> s2 [0, 65535] { R209 += 1, R179 += 1, R154 += 1, R155 += 1 };
  s3 -> s3 [0, 65535] { R209 += 1, R178 += 1, R179 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s4 [67, 67] { R209 += 1, R179 += 1, R155 += 1 };
  s3 -> s5 [67, 67] { R209 += 1, R179 += 1, R155 += 1 };
  s3 -> s1 [91, 65535] { R209 += 1, R179 += 1, R155 += 1 };
  s4 -> s4 [0, 67] { R209 += 1, R179 += 1, R155 += 1 };
  s4 -> s6 [0, 65535] { R209 += 1 };
  s4 -> s4 [0, 65535] { R209 += 1, R179 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s4 [91, 65535] { R209 += 1, R179 += 1, R155 += 1 };
  s5 -> s6 [0, 65535] { R209 += 1 };
  s5 -> s5 [0, 65535] { R209 += 1, R179 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s6 [0, 65535] { R209 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
};
synchronised {  // Automata constraining c5
automaton c5_0 {
  init s0;
  s0 -> s1 [99, 99];
  accepting s1;
};
};
synchronised {  // Automata constraining P27
automaton P27_0 {
  init s0;
  s0 -> s1 [9, 9];
  accepting s1;
};
};
synchronised {  // Automata constraining P26
automaton P26_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s0 [91, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 8] { R121 += 1 };
  s0 -> s0 [0, 65535] { R120 += 1, R121 += 1 };
  s0 -> s2 [9, 13] { R121 += 1 };
  s0 -> s1 [14, 31] { R121 += 1 };
  s0 -> s2 [32, 32] { R121 += 1 };
  s0 -> s1 [33, 65535] { R121 += 1 };
  s1 -> s1 [0, 65535] { R121 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R121 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 65535] { R123 += 1, R6 += 1 };
  s0 -> s0 [0, 65535] { R122 += 1, R123 += 1 };
  s1 -> s1 [0, 65535] { R123 += 1, R6 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 8] { R125 += 1 };
  s0 -> s0 [0, 65535] { R124 += 1, R125 += 1 };
  s0 -> s2 [9, 13] { R125 += 1 };
  s0 -> s1 [14, 31] { R125 += 1 };
  s0 -> s2 [32, 32] { R125 += 1 };
  s0 -> s1 [33, 65535] { R125 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R125 += 1 };
  s2 -> s1 [0, 65535] { R125 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 65535] { R127 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R126 += 1, R127 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R127 += 1, R7 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
};
constraint R2 = R145 && R3 = R179 && R4 = R151 && R16 = 0 && R17 = R209 && R116 = 0 && R128 - R145 = -1 && R129 = R145 && R130 - R145 = -1 && R131 = R145 && R132 = 0 && R133 = 1 && R134 = 0 && R135 = 1 && R136 = 0 && R137 = 1 && R138 = 0 && R139 = 1 && R140 = 0 && R141 = R145 && R142 = 0 && R143 = R145 && R144 = 0 && R146 - R209 = 1 && R147 = R151 && R148 - R209 = 1 && R149 = R151 && R150 - R209 = 1 && R156 = 1 && R157 = R179 && R158 = 1 && R159 = R179 && R160 = 1 && R161 = R179 && R162 = 1 && R163 = R179 && R164 = 1 && R165 = R179 && R166 = 1 && R167 = R179 && R168 = 1 && R169 = R179 && R170 = 1 && R171 = R179 && R172 = 1 && R173 = R179 && R174 = 1 && R175 = R179 && R176 = 1 && R177 = R179 && R178 = 1 && R180 = 0 && R181 = R209 && R182 = 0 && R183 = R209 && R184 = 0 && R185 = R209 && R186 = 0 && R187 = R209 && R188 = 0 && R189 = R209 && R190 = 0 && R191 = R209 && R192 = 0 && R193 = R209 && R194 = 0 && R195 = R209 && R196 = 0 && R197 = R209 && R198 = 0 && R199 = R209 && R200 = 0 && R201 = R209 && R202 = 0 && R203 = R209 && R204 = 0 && R205 = R209 && R206 = 0 && R207 = R209 && R208 = 0 && R0 != 0 && R1 != 0 && R11 < 1 && R12 < 1 && 0 < R145 && R209 < R151 && 0 < R179 && -1 < R209 && (R0 != R117 || R117 = 1 || R117 < 0) && (R6 != 0 || ((R1 != R121 || R120 - R121 = -1 || R121 < 0) && (R1 = R121 || R1 < 1))) && (R6 != 0 || ((R1 != R123 || R122 - R123 = -1 || R123 < 0) && (R1 = R123 || R1 < 1))) && (R117 != 1 || -1 < R0) && (R118 != 0 || ((R5 != 0 || ((R0 != R119 || R119 = 1 || R119 < 0) && (R0 = R119 || R119 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R119 || R119 = 1 || R119 < 0) && (R119 != 1 || -1 < R0) && (R0 = R119 || R119 = 1))))) && (R124 != 0 || ((R7 != 0 || ((R1 != R125 || R125 = 1 || R125 < 0) && (R1 = R125 || R125 = 1 || R1 < 1))) && (R7 = 0 || ((R1 != R125 || R125 = 1 || R125 < 0) && (R125 != 1 || -1 < R1) && (R1 = R125 || R125 = 1))))) && (R126 != 0 || ((R7 != 0 || ((R1 != R127 || R127 = 1 || R127 < 0) && (R1 = R127 || R127 = 1 || R1 < 1))) && (R7 = 0 || ((R1 != R127 || R127 = 1 || R127 < 0) && (R127 != 1 || -1 < R1) && (R1 = R127 || R127 = 1))))) && (R0 = R117 || R117 = 1) && (R6 = 0 || (R1 = R121 && R120 - R121 = -1)) && (R6 = 0 || (R1 = R123 && R122 - R123 = -1)) && (R115 = 0 || (R152 = 0 && R153 = 0)) && (R115 = 0 || (R154 = 0 && R155 = 0)) && (R118 = 0 || (R5 = 0 && R0 < 0)) && (R124 = 0 || (R7 = 0 && R1 < 0)) && (R126 = 0 || (R7 = 0 && R1 < 0));
// End of Parikh automata intersection problem
