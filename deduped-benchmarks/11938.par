// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R100, R101, R102, R103, R104, R105, R106, R107, R108, R109, R110, R111, R112, R113, R114, R115, R116, R117, R118, R119, R12, R120, R121, R122, R123, R124, R125, R126, R127, R128, R129, R130, R131, R132, R133, R134, R135, R136, R137, R138, R139, R140, R141, R142, R143, R144, R145, R146, R147, R148, R149, R15, R150, R151, R152, R153, R154, R155, R156, R157, R158, R159, R160, R161, R162, R163, R164, R165, R166, R167, R168, R169, R17, R170, R171, R172, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R31, R32, R33, R34, R35, R36, R37, R38, R4, R43, R44, R45, R46, R47, R48, R49, R5, R50, R51, R52, R53, R54, R55, R56, R57, R58, R59, R6, R60, R61, R62, R63, R64, R65, R66, R67, R68, R69, R7, R70, R71, R72, R73, R74, R75, R76, R77, R78, R79, R8, R80, R81, R82, R83, R84, R85, R86, R87, R88, R89, R90, R91, R92, R93, R94, R95, R96, R97, R98, R99;
synchronised {  // Automata constraining P8
automaton P8_0 {
  init s0;
  s0 -> s1 [99, 99];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R15 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s0 [0, 65535] { R35 += 1, R36 += 1 };
  s0 -> s1 [13, 13] { R36 += 1 };
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 65535] { R38 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R37 += 1, R38 += 1 };
  s1 -> s1 [0, 65535] { R38 += 1, R8 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s0 [0, 65535] { R123 += 1, R124 += 1 };
  s0 -> s1 [0, 65535] { R124 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R124 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s0 [0, 65535] { R125 += 1, R126 += 1 };
  s0 -> s1 [0, 65535] { R126 += 1, R27 += 1, R28 += 1 };
  s0 -> s2 [12, 12] { R126 += 1, R28 += 1 };
  s1 -> s1 [0, 65535] { R126 += 1, R27 += 1, R28 += 1 };
  s1 -> s2 [12, 12] { R126 += 1, R28 += 1 };
  s2 -> s2 [0, 65535] { R126 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s0 [0, 65535] { R127 += 1, R128 += 1 };
  s0 -> s1 [0, 65535] { R128 += 1, R29 += 1, R30 += 1 };
  s0 -> s2 [0, 65535] { R128 += 1, R30 += 1, R6 += 1 };
  s1 -> s1 [0, 65535] { R128 += 1, R29 += 1, R30 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R128 += 1, R30 += 1, R6 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R128 += 1, R30 += 1, R6 += 1 };
  s2 -> s4 [0, 65535] { R128 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R128 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 8] { R130 += 1, R32 += 1 };
  s0 -> s2 [0, 65535] { R130 += 1, R31 += 1, R32 += 1 };
  s0 -> s0 [0, 65535] { R129 += 1, R130 += 1 };
  s0 -> s3 [9, 13] { R130 += 1, R32 += 1 };
  s0 -> s1 [14, 31] { R130 += 1, R32 += 1 };
  s0 -> s3 [32, 32] { R130 += 1, R32 += 1 };
  s0 -> s1 [33, 65535] { R130 += 1, R32 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R130 += 1 };
  s1 -> s1 [0, 65535] { R130 += 1, R32 += 1 };
  s2 -> s1 [0, 8] { R130 += 1, R32 += 1 };
  s2 -> s2 [0, 65535] { R130 += 1, R31 += 1, R32 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R130 += 1, R32 += 1 };
  s2 -> s1 [14, 31] { R130 += 1, R32 += 1 };
  s2 -> s3 [32, 32] { R130 += 1, R32 += 1 };
  s2 -> s1 [33, 65535] { R130 += 1, R32 += 1 };
  s3 -> s1 [0, 65535] { R130 += 1, R32 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R130 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 65535] { R132 += 1, R34 += 1, R7 += 1 };
  s0 -> s2 [0, 65535] { R132 += 1, R33 += 1, R34 += 1 };
  s0 -> s0 [0, 65535] { R131 += 1, R132 += 1 };
  s1 -> s1 [0, 65535] { R132 += 1, R34 += 1, R7 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R132 += 1 };
  s2 -> s1 [0, 65535] { R132 += 1, R34 += 1, R7 += 1 };
  s2 -> s2 [0, 65535] { R132 += 1, R33 += 1, R34 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R132 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 64] { R134 += 1, R84 += 1 };
  s0 -> s2 [0, 65535] { R134 += 1, R83 += 1, R84 += 1 };
  s0 -> s0 [0, 65535] { R133 += 1, R134 += 1 };
  s0 -> s3 [67, 67] { R134 += 1, R84 += 1 };
  s0 -> s1 [68, 65535] { R134 += 1, R84 += 1 };
  s1 -> s1 [0, 64] { R134 += 1, R84 += 1 };
  s1 -> s3 [67, 67] { R134 += 1, R84 += 1 };
  s1 -> s1 [68, 65535] { R134 += 1, R84 += 1 };
  s2 -> s1 [0, 64] { R134 += 1, R84 += 1 };
  s2 -> s2 [0, 65535] { R134 += 1, R83 += 1, R84 += 1 };
  s2 -> s3 [67, 67] { R134 += 1, R84 += 1 };
  s2 -> s1 [68, 65535] { R134 += 1, R84 += 1 };
  s3 -> s3 [0, 64] { R134 += 1, R84 += 1 };
  s3 -> s3 [0, 65535] { R134 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [67, 65535] { R134 += 1, R84 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 65535] { R136 += 1, R85 += 1, R86 += 1 };
  s0 -> s0 [0, 65535] { R135 += 1, R136 += 1 };
  s0 -> s2 [0, 65535] { R136 += 1, R86 += 1, R1 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R136 += 1, R85 += 1, R86 += 1 };
  s1 -> s2 [0, 65535] { R136 += 1, R86 += 1, R1 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R136 += 1 };
  s2 -> s2 [0, 65535] { R136 += 1, R86 += 1, R1 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R136 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 66] { R138 += 1, R88 += 1 };
  s0 -> s2 [0, 65535] { R138 += 1, R87 += 1, R88 += 1 };
  s0 -> s3 [0, 65535] { R138 += 1, R88 += 1, R12 += 1 };
  s0 -> s0 [0, 65535] { R137 += 1, R138 += 1 };
  s0 -> s4 [67, 67] { R138 += 1, R88 += 1 };
  s0 -> s1 [68, 65535] { R138 += 1, R88 += 1 };
  s1 -> s1 [0, 66] { R138 += 1, R88 += 1 };
  s1 -> s1 [0, 65535] { R138 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s4 [67, 67] { R138 += 1, R88 += 1 };
  s1 -> s1 [68, 65535] { R138 += 1, R88 += 1 };
  s2 -> s1 [0, 66] { R138 += 1, R88 += 1 };
  s2 -> s2 [0, 65535] { R138 += 1, R87 += 1, R88 += 1 };
  s2 -> s3 [0, 65535] { R138 += 1, R88 += 1, R12 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s4 [67, 67] { R138 += 1, R88 += 1 };
  s2 -> s1 [68, 65535] { R138 += 1, R88 += 1 };
  s3 -> s1 [0, 66] { R138 += 1, R88 += 1 };
  s3 -> s5 [0, 65535] { R138 += 1 };
  s3 -> s3 [0, 65535] { R138 += 1, R88 += 1, R12 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s4 [67, 67] { R138 += 1, R88 += 1 };
  s3 -> s1 [68, 65535] { R138 += 1, R88 += 1 };
  s4 -> s4 [0, 65535] { R138 += 1, R88 += 1 };
  s5 -> s5 [0, 65535] { R138 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 8] { R140 += 1, R90 += 1, R20 += 1 };
  s0 -> s2 [0, 65535] { R140 += 1, R89 += 1, R90 += 1 };
  s0 -> s0 [0, 65535] { R139 += 1, R140 += 1 };
  s0 -> s3 [0, 65535] { R140 += 1, R90 += 1, R19 += 1, R20 += 1 };
  s0 -> s4 [9, 13] { R140 += 1, R90 += 1, R20 += 1 };
  s0 -> s1 [14, 31] { R140 += 1, R90 += 1, R20 += 1 };
  s0 -> s4 [32, 32] { R140 += 1, R90 += 1, R20 += 1 };
  s0 -> s1 [33, 65535] { R140 += 1, R90 += 1, R20 += 1 };
  s1 -> s7 [0, 65535] { R140 += 1, R90 += 1 };
  s1 -> s5 [0, 65535] { R140 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R140 += 1, R90 += 1, R20 += 1 };
  s2 -> s1 [0, 8] { R140 += 1, R90 += 1, R20 += 1 };
  s2 -> s2 [0, 65535] { R140 += 1, R89 += 1, R90 += 1 };
  s2 -> s3 [0, 65535] { R140 += 1, R90 += 1, R19 += 1, R20 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s4 [9, 13] { R140 += 1, R90 += 1, R20 += 1 };
  s2 -> s1 [14, 31] { R140 += 1, R90 += 1, R20 += 1 };
  s2 -> s4 [32, 32] { R140 += 1, R90 += 1, R20 += 1 };
  s2 -> s1 [33, 65535] { R140 += 1, R90 += 1, R20 += 1 };
  s3 -> s1 [0, 8] { R140 += 1, R90 += 1, R20 += 1 };
  s3 -> s5 [0, 65535] { R140 += 1 };
  s3 -> s3 [0, 65535] { R140 += 1, R90 += 1, R19 += 1, R20 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s4 [9, 13] { R140 += 1, R90 += 1, R20 += 1 };
  s3 -> s1 [14, 31] { R140 += 1, R90 += 1, R20 += 1 };
  s3 -> s4 [32, 32] { R140 += 1, R90 += 1, R20 += 1 };
  s3 -> s1 [33, 65535] { R140 += 1, R90 += 1, R20 += 1 };
  s4 -> s1 [0, 65535] { R140 += 1, R90 += 1, R20 += 1 };
  s5 -> s5 [0, 65535] { R140 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R140 += 1, R90 += 1 };
  s7 -> s5 [0, 65535] { R140 += 1 };
  s7 -> s6 [0, 65535];
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 65535] { R142 += 1, R92 += 1, R22 += 1, R4 += 1 };
  s0 -> s2 [0, 65535] { R142 += 1, R92 += 1, R21 += 1, R22 += 1 };
  s0 -> s3 [0, 65535] { R142 += 1, R91 += 1, R92 += 1 };
  s0 -> s0 [0, 65535] { R141 += 1, R142 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R142 += 1, R92 += 1, R22 += 1, R4 += 1 };
  s1 -> s5 [0, 65535] { R142 += 1 };
  s1 -> s6 [0, 65535] { R142 += 1, R92 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R142 += 1, R92 += 1, R22 += 1, R4 += 1 };
  s2 -> s2 [0, 65535] { R142 += 1, R92 += 1, R21 += 1, R22 += 1 };
  s2 -> s5 [0, 65535] { R142 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R142 += 1, R92 += 1, R22 += 1, R4 += 1 };
  s3 -> s2 [0, 65535] { R142 += 1, R92 += 1, R21 += 1, R22 += 1 };
  s3 -> s3 [0, 65535] { R142 += 1, R91 += 1, R92 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R142 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R142 += 1 };
  s6 -> s6 [0, 65535] { R142 += 1, R92 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 8] { R144 += 1, R94 += 1, R24 += 1 };
  s0 -> s0 [0, 65535] { R143 += 1, R144 += 1 };
  s0 -> s2 [0, 65535] { R144 += 1, R94 += 1, R23 += 1, R24 += 1 };
  s0 -> s3 [0, 65535] { R144 += 1, R93 += 1, R94 += 1 };
  s0 -> s4 [9, 13] { R144 += 1, R94 += 1, R24 += 1 };
  s0 -> s1 [14, 31] { R144 += 1, R94 += 1, R24 += 1 };
  s0 -> s4 [32, 32] { R144 += 1, R94 += 1, R24 += 1 };
  s0 -> s1 [33, 65535] { R144 += 1, R94 += 1, R24 += 1 };
  s1 -> s7 [0, 65535] { R144 += 1, R94 += 1 };
  s1 -> s1 [0, 65535] { R144 += 1, R94 += 1, R24 += 1 };
  s1 -> s6 [0, 65535] { R144 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 8] { R144 += 1, R94 += 1, R24 += 1 };
  s2 -> s6 [0, 65535] { R144 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R144 += 1, R94 += 1, R23 += 1, R24 += 1 };
  s2 -> s4 [9, 13] { R144 += 1, R94 += 1, R24 += 1 };
  s2 -> s1 [14, 31] { R144 += 1, R94 += 1, R24 += 1 };
  s2 -> s4 [32, 32] { R144 += 1, R94 += 1, R24 += 1 };
  s2 -> s1 [33, 65535] { R144 += 1, R94 += 1, R24 += 1 };
  s3 -> s1 [0, 8] { R144 += 1, R94 += 1, R24 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R144 += 1, R94 += 1, R23 += 1, R24 += 1 };
  s3 -> s3 [0, 65535] { R144 += 1, R93 += 1, R94 += 1 };
  s3 -> s4 [9, 13] { R144 += 1, R94 += 1, R24 += 1 };
  s3 -> s1 [14, 31] { R144 += 1, R94 += 1, R24 += 1 };
  s3 -> s4 [32, 32] { R144 += 1, R94 += 1, R24 += 1 };
  s3 -> s1 [33, 65535] { R144 += 1, R94 += 1, R24 += 1 };
  s4 -> s1 [0, 65535] { R144 += 1, R94 += 1, R24 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R144 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R144 += 1, R94 += 1 };
  s7 -> s6 [0, 65535] { R144 += 1 };
  s7 -> s5 [0, 65535];
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 65535] { R146 += 1, R95 += 1, R96 += 1 };
  s0 -> s2 [0, 65535] { R146 += 1, R96 += 1, R25 += 1, R26 += 1 };
  s0 -> s0 [0, 65535] { R145 += 1, R146 += 1 };
  s0 -> s3 [0, 65535] { R146 += 1, R96 += 1, R26 += 1, R5 += 1 };
  s1 -> s1 [0, 65535] { R146 += 1, R95 += 1, R96 += 1 };
  s1 -> s2 [0, 65535] { R146 += 1, R96 += 1, R25 += 1, R26 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [0, 65535] { R146 += 1, R96 += 1, R26 += 1, R5 += 1 };
  s2 -> s2 [0, 65535] { R146 += 1, R96 += 1, R25 += 1, R26 += 1 };
  s2 -> s5 [0, 65535] { R146 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R146 += 1, R96 += 1, R26 += 1, R5 += 1 };
  s3 -> s4 [0, 65535] { R146 += 1, R96 += 1 };
  s3 -> s5 [0, 65535] { R146 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R146 += 1, R96 += 1, R26 += 1, R5 += 1 };
  s4 -> s4 [0, 65535] { R146 += 1, R96 += 1 };
  s4 -> s5 [0, 65535] { R146 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R146 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 66] { R148 += 1, R98 += 1, R58 += 1 };
  s0 -> s2 [0, 65535] { R148 += 1, R97 += 1, R98 += 1 };
  s0 -> s0 [0, 65535] { R147 += 1, R148 += 1 };
  s0 -> s3 [0, 65535] { R148 += 1, R98 += 1, R57 += 1, R58 += 1 };
  s0 -> s1 [68, 65535] { R148 += 1, R98 += 1, R58 += 1 };
  s1 -> s1 [0, 66] { R148 += 1, R98 += 1, R58 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R148 += 1 };
  s1 -> s1 [0, 65535] { R148 += 1, R98 += 1 };
  s1 -> s1 [68, 65535] { R148 += 1, R98 += 1, R58 += 1 };
  s2 -> s1 [0, 66] { R148 += 1, R98 += 1, R58 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R148 += 1, R97 += 1, R98 += 1 };
  s2 -> s3 [0, 65535] { R148 += 1, R98 += 1, R57 += 1, R58 += 1 };
  s2 -> s1 [68, 65535] { R148 += 1, R98 += 1, R58 += 1 };
  s3 -> s1 [0, 66] { R148 += 1, R98 += 1, R58 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R148 += 1 };
  s3 -> s3 [0, 65535] { R148 += 1, R98 += 1, R57 += 1, R58 += 1 };
  s3 -> s1 [68, 65535] { R148 += 1, R98 += 1, R58 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R148 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R150 += 1, R100 += 1, R60 += 1, R17 += 1 };
  s0 -> s2 [0, 65535] { R150 += 1, R100 += 1, R59 += 1, R60 += 1 };
  s0 -> s3 [0, 65535] { R150 += 1, R99 += 1, R100 += 1 };
  s0 -> s0 [0, 65535] { R149 += 1, R150 += 1 };
  s1 -> s1 [0, 65535] { R150 += 1, R100 += 1, R60 += 1, R17 += 1 };
  s1 -> s5 [0, 65535] { R150 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R150 += 1, R100 += 1 };
  s2 -> s1 [0, 65535] { R150 += 1, R100 += 1, R60 += 1, R17 += 1 };
  s2 -> s5 [0, 65535] { R150 += 1 };
  s2 -> s2 [0, 65535] { R150 += 1, R100 += 1, R59 += 1, R60 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R150 += 1, R100 += 1, R60 += 1, R17 += 1 };
  s3 -> s2 [0, 65535] { R150 += 1, R100 += 1, R59 += 1, R60 += 1 };
  s3 -> s3 [0, 65535] { R150 += 1, R99 += 1, R100 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R150 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R150 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R150 += 1, R100 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 67] { R152 += 1, R102 += 1, R62 += 1 };
  s0 -> s2 [0, 65535] { R152 += 1, R102 += 1, R61 += 1, R62 += 1 };
  s0 -> s0 [0, 65535] { R151 += 1, R152 += 1 };
  s0 -> s3 [0, 65535] { R152 += 1, R101 += 1, R102 += 1 };
  s0 -> s4 [73, 73] { R152 += 1, R102 += 1, R62 += 1 };
  s0 -> s1 [74, 65535] { R152 += 1, R102 += 1, R62 += 1 };
  s1 -> s1 [0, 67] { R152 += 1, R102 += 1, R62 += 1 };
  s1 -> s4 [73, 73] { R152 += 1, R102 += 1, R62 += 1 };
  s1 -> s1 [74, 65535] { R152 += 1, R102 += 1, R62 += 1 };
  s2 -> s1 [0, 67] { R152 += 1, R102 += 1, R62 += 1 };
  s2 -> s2 [0, 65535] { R152 += 1, R102 += 1, R61 += 1, R62 += 1 };
  s2 -> s4 [73, 73] { R152 += 1, R102 += 1, R62 += 1 };
  s2 -> s1 [74, 65535] { R152 += 1, R102 += 1, R62 += 1 };
  s3 -> s1 [0, 67] { R152 += 1, R102 += 1, R62 += 1 };
  s3 -> s2 [0, 65535] { R152 += 1, R102 += 1, R61 += 1, R62 += 1 };
  s3 -> s3 [0, 65535] { R152 += 1, R101 += 1, R102 += 1 };
  s3 -> s4 [73, 73] { R152 += 1, R102 += 1, R62 += 1 };
  s3 -> s1 [74, 65535] { R152 += 1, R102 += 1, R62 += 1 };
  s4 -> s4 [0, 67] { R152 += 1, R102 += 1, R62 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R152 += 1 };
  s4 -> s4 [0, 65535] { R152 += 1, R102 += 1 };
  s4 -> s4 [73, 65535] { R152 += 1, R102 += 1, R62 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R152 += 1 };
  accepting s4, s5, s6;
};
automaton value2_20 {
  init s0;
  s0 -> s0 [0, 65535] { R153 += 1, R154 += 1 };
  s0 -> s1 [0, 65535] { R154 += 1, R103 += 1, R104 += 1 };
  s0 -> s2 [0, 65535] { R154 += 1, R104 += 1, R64 += 1, R44 += 1 };
  s0 -> s3 [0, 65535] { R154 += 1, R104 += 1, R63 += 1, R64 += 1 };
  s1 -> s1 [0, 65535] { R154 += 1, R103 += 1, R104 += 1 };
  s1 -> s2 [0, 65535] { R154 += 1, R104 += 1, R64 += 1, R44 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R154 += 1, R104 += 1, R63 += 1, R64 += 1 };
  s2 -> s6 [0, 65535] { R154 += 1, R104 += 1 };
  s2 -> s4 [0, 65535] { R154 += 1 };
  s2 -> s2 [0, 65535] { R154 += 1, R104 += 1, R64 += 1, R44 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s4 [0, 65535] { R154 += 1 };
  s3 -> s2 [0, 65535] { R154 += 1, R104 += 1, R64 += 1, R44 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R154 += 1, R104 += 1, R63 += 1, R64 += 1 };
  s4 -> s4 [0, 65535] { R154 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R154 += 1, R104 += 1 };
  s6 -> s4 [0, 65535] { R154 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 72] { R156 += 1, R106 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R155 += 1, R156 += 1 };
  s0 -> s2 [0, 65535] { R156 += 1, R106 += 1, R65 += 1, R66 += 1 };
  s0 -> s3 [0, 65535] { R156 += 1, R106 += 1, R66 += 1, R46 += 1 };
  s0 -> s4 [0, 65535] { R156 += 1, R105 += 1, R106 += 1 };
  s0 -> s1 [74, 65535] { R156 += 1, R106 += 1, R66 += 1 };
  s1 -> s1 [0, 72] { R156 += 1, R106 += 1, R66 += 1 };
  s1 -> s6 [0, 65535] { R156 += 1 };
  s1 -> s1 [0, 65535] { R156 += 1, R106 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [74, 65535] { R156 += 1, R106 += 1, R66 += 1 };
  s2 -> s1 [0, 72] { R156 += 1, R106 += 1, R66 += 1 };
  s2 -> s6 [0, 65535] { R156 += 1 };
  s2 -> s2 [0, 65535] { R156 += 1, R106 += 1, R65 += 1, R66 += 1 };
  s2 -> s3 [0, 65535] { R156 += 1, R106 += 1, R66 += 1, R46 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [74, 65535] { R156 += 1, R106 += 1, R66 += 1 };
  s3 -> s1 [0, 72] { R156 += 1, R106 += 1, R66 += 1 };
  s3 -> s6 [0, 65535] { R156 += 1 };
  s3 -> s3 [0, 65535] { R156 += 1, R106 += 1, R66 += 1, R46 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s7 [0, 65535] { R156 += 1, R106 += 1 };
  s3 -> s1 [74, 65535] { R156 += 1, R106 += 1, R66 += 1 };
  s4 -> s1 [0, 72] { R156 += 1, R106 += 1, R66 += 1 };
  s4 -> s2 [0, 65535] { R156 += 1, R106 += 1, R65 += 1, R66 += 1 };
  s4 -> s3 [0, 65535] { R156 += 1, R106 += 1, R66 += 1, R46 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R156 += 1, R105 += 1, R106 += 1 };
  s4 -> s1 [74, 65535] { R156 += 1, R106 += 1, R66 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R156 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R156 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R156 += 1, R106 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 72] { R158 += 1, R108 += 1, R68 += 1, R50 += 1 };
  s0 -> s2 [0, 65535] { R158 += 1, R108 += 1, R68 += 1, R49 += 1, R50 += 1 };
  s0 -> s3 [0, 65535] { R158 += 1, R107 += 1, R108 += 1 };
  s0 -> s0 [0, 65535] { R157 += 1, R158 += 1 };
  s0 -> s4 [0, 65535] { R158 += 1, R108 += 1, R67 += 1, R68 += 1 };
  s0 -> s5 [73, 73] { R158 += 1, R108 += 1, R68 += 1, R50 += 1 };
  s0 -> s1 [74, 65535] { R158 += 1, R108 += 1, R68 += 1, R50 += 1 };
  s1 -> s1 [0, 72] { R158 += 1, R108 += 1, R68 += 1, R50 += 1 };
  s1 -> s5 [73, 73] { R158 += 1, R108 += 1, R68 += 1, R50 += 1 };
  s1 -> s1 [74, 65535] { R158 += 1, R108 += 1, R68 += 1, R50 += 1 };
  s2 -> s1 [0, 72] { R158 += 1, R108 += 1, R68 += 1, R50 += 1 };
  s2 -> s2 [0, 65535] { R158 += 1, R108 += 1, R68 += 1, R49 += 1, R50 += 1 };
  s2 -> s5 [73, 73] { R158 += 1, R108 += 1, R68 += 1, R50 += 1 };
  s2 -> s1 [74, 65535] { R158 += 1, R108 += 1, R68 += 1, R50 += 1 };
  s3 -> s1 [0, 72] { R158 += 1, R108 += 1, R68 += 1, R50 += 1 };
  s3 -> s2 [0, 65535] { R158 += 1, R108 += 1, R68 += 1, R49 += 1, R50 += 1 };
  s3 -> s3 [0, 65535] { R158 += 1, R107 += 1, R108 += 1 };
  s3 -> s4 [0, 65535] { R158 += 1, R108 += 1, R67 += 1, R68 += 1 };
  s3 -> s5 [73, 73] { R158 += 1, R108 += 1, R68 += 1, R50 += 1 };
  s3 -> s1 [74, 65535] { R158 += 1, R108 += 1, R68 += 1, R50 += 1 };
  s4 -> s1 [0, 72] { R158 += 1, R108 += 1, R68 += 1, R50 += 1 };
  s4 -> s2 [0, 65535] { R158 += 1, R108 += 1, R68 += 1, R49 += 1, R50 += 1 };
  s4 -> s4 [0, 65535] { R158 += 1, R108 += 1, R67 += 1, R68 += 1 };
  s4 -> s5 [73, 73] { R158 += 1, R108 += 1, R68 += 1, R50 += 1 };
  s4 -> s1 [74, 65535] { R158 += 1, R108 += 1, R68 += 1, R50 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R158 += 1, R108 += 1, R68 += 1 };
  s5 -> s8 [0, 65535] { R158 += 1, R108 += 1 };
  s5 -> s5 [0, 65535] { R158 += 1, R108 += 1, R68 += 1, R50 += 1 };
  s5 -> s9 [0, 65535] { R158 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R158 += 1, R108 += 1, R68 += 1 };
  s7 -> s8 [0, 65535] { R158 += 1, R108 += 1 };
  s7 -> s9 [0, 65535] { R158 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R158 += 1, R108 += 1 };
  s8 -> s9 [0, 65535] { R158 += 1 };
  s9 -> s6 [0, 65535];
  s9 -> s9 [0, 65535] { R158 += 1 };
  accepting s8, s5, s9, s6, s7;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R160 += 1, R110 += 1, R70 += 1, R54 += 1, R55 += 1 };
  s0 -> s2 [0, 65535] { R160 += 1, R109 += 1, R110 += 1 };
  s0 -> s3 [0, 65535] { R160 += 1, R110 += 1, R69 += 1, R70 += 1 };
  s0 -> s4 [0, 65535] { R160 += 1, R110 += 1, R70 += 1, R55 += 1, R56 += 1 };
  s0 -> s0 [0, 65535] { R159 += 1, R160 += 1 };
  s1 -> s1 [0, 65535] { R160 += 1, R110 += 1, R70 += 1, R54 += 1, R55 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R160 += 1, R110 += 1 };
  s1 -> s8 [0, 65535] { R160 += 1 };
  s1 -> s4 [0, 65535] { R160 += 1, R110 += 1, R70 += 1, R55 += 1, R56 += 1 };
  s2 -> s1 [0, 65535] { R160 += 1, R110 += 1, R70 += 1, R54 += 1, R55 += 1 };
  s2 -> s2 [0, 65535] { R160 += 1, R109 += 1, R110 += 1 };
  s2 -> s3 [0, 65535] { R160 += 1, R110 += 1, R69 += 1, R70 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s4 [0, 65535] { R160 += 1, R110 += 1, R70 += 1, R55 += 1, R56 += 1 };
  s3 -> s1 [0, 65535] { R160 += 1, R110 += 1, R70 += 1, R54 += 1, R55 += 1 };
  s3 -> s3 [0, 65535] { R160 += 1, R110 += 1, R69 += 1, R70 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s8 [0, 65535] { R160 += 1 };
  s3 -> s4 [0, 65535] { R160 += 1, R110 += 1, R70 += 1, R55 += 1, R56 += 1 };
  s4 -> s5 [0, 65535] { R160 += 1, R110 += 1, R70 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R160 += 1, R110 += 1 };
  s4 -> s8 [0, 65535] { R160 += 1 };
  s4 -> s4 [0, 65535] { R160 += 1, R110 += 1, R70 += 1, R55 += 1, R56 += 1 };
  s5 -> s5 [0, 65535] { R160 += 1, R110 += 1, R70 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R160 += 1, R110 += 1 };
  s5 -> s8 [0, 65535] { R160 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R160 += 1, R110 += 1 };
  s7 -> s8 [0, 65535] { R160 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R160 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s0 [0, 65535] { R161 += 1, R162 += 1 };
  s0 -> s1 [0, 65535] { R162 += 1, R111 += 1, R112 += 1 };
  s0 -> s2 [0, 65535] { R162 += 1, R112 += 1, R72 += 1, R18 += 1 };
  s0 -> s3 [0, 65535] { R162 += 1, R112 += 1, R71 += 1, R72 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R162 += 1, R111 += 1, R112 += 1 };
  s1 -> s2 [0, 65535] { R162 += 1, R112 += 1, R72 += 1, R18 += 1 };
  s1 -> s3 [0, 65535] { R162 += 1, R112 += 1, R71 += 1, R72 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R162 += 1 };
  s2 -> s2 [0, 65535] { R162 += 1, R112 += 1, R72 += 1, R18 += 1 };
  s2 -> s6 [0, 65535] { R162 += 1, R112 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R162 += 1 };
  s3 -> s2 [0, 65535] { R162 += 1, R112 += 1, R72 += 1, R18 += 1 };
  s3 -> s3 [0, 65535] { R162 += 1, R112 += 1, R71 += 1, R72 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R162 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R162 += 1 };
  s6 -> s6 [0, 65535] { R162 += 1, R112 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 66] { R164 += 1, R114 += 1, R74 += 1 };
  s0 -> s0 [0, 65535] { R163 += 1, R164 += 1 };
  s0 -> s2 [0, 65535] { R164 += 1, R114 += 1, R73 += 1, R74 += 1 };
  s0 -> s3 [0, 65535] { R164 += 1, R113 += 1, R114 += 1 };
  s0 -> s4 [67, 67] { R164 += 1, R114 += 1, R74 += 1 };
  s0 -> s5 [67, 67] { R164 += 1, R114 += 1, R74 += 1 };
  s0 -> s1 [74, 65535] { R164 += 1, R114 += 1, R74 += 1 };
  s1 -> s1 [0, 66] { R164 += 1, R114 += 1, R74 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R164 += 1 };
  s1 -> s1 [0, 65535] { R164 += 1, R114 += 1 };
  s1 -> s4 [67, 67] { R164 += 1, R114 += 1, R74 += 1 };
  s1 -> s5 [67, 67] { R164 += 1, R114 += 1, R74 += 1 };
  s1 -> s1 [74, 65535] { R164 += 1, R114 += 1, R74 += 1 };
  s2 -> s1 [0, 66] { R164 += 1, R114 += 1, R74 += 1 };
  s2 -> s2 [0, 65535] { R164 += 1, R114 += 1, R73 += 1, R74 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s7 [0, 65535] { R164 += 1 };
  s2 -> s4 [67, 67] { R164 += 1, R114 += 1, R74 += 1 };
  s2 -> s5 [67, 67] { R164 += 1, R114 += 1, R74 += 1 };
  s2 -> s1 [74, 65535] { R164 += 1, R114 += 1, R74 += 1 };
  s3 -> s1 [0, 66] { R164 += 1, R114 += 1, R74 += 1 };
  s3 -> s2 [0, 65535] { R164 += 1, R114 += 1, R73 += 1, R74 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R164 += 1, R113 += 1, R114 += 1 };
  s3 -> s4 [67, 67] { R164 += 1, R114 += 1, R74 += 1 };
  s3 -> s5 [67, 67] { R164 += 1, R114 += 1, R74 += 1 };
  s3 -> s1 [74, 65535] { R164 += 1, R114 += 1, R74 += 1 };
  s4 -> s4 [0, 65535] { R164 += 1, R114 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R164 += 1 };
  s5 -> s5 [0, 67] { R164 += 1, R114 += 1, R74 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R164 += 1, R114 += 1 };
  s5 -> s7 [0, 65535] { R164 += 1 };
  s5 -> s5 [74, 65535] { R164 += 1, R114 += 1, R74 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R164 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 66] { R166 += 1, R116 += 1, R76 += 1, R43 += 1 };
  s0 -> s2 [0, 65535] { R166 += 1, R116 += 1, R75 += 1, R76 += 1 };
  s0 -> s0 [0, 65535] { R165 += 1, R166 += 1 };
  s0 -> s3 [0, 65535] { R166 += 1, R115 += 1, R116 += 1 };
  s0 -> s4 [67, 67] { R166 += 1, R116 += 1, R76 += 1, R43 += 1 };
  s0 -> s5 [67, 67] { R166 += 1, R116 += 1, R76 += 1, R43 += 1 };
  s0 -> s1 [68, 65535] { R166 += 1, R116 += 1, R76 += 1, R43 += 1 };
  s1 -> s1 [0, 66] { R166 += 1, R116 += 1, R76 += 1, R43 += 1 };
  s1 -> s1 [0, 65535] { R166 += 1, R116 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R166 += 1 };
  s1 -> s4 [67, 67] { R166 += 1, R116 += 1, R76 += 1, R43 += 1 };
  s1 -> s5 [67, 67] { R166 += 1, R116 += 1, R76 += 1, R43 += 1 };
  s1 -> s1 [68, 65535] { R166 += 1, R116 += 1, R76 += 1, R43 += 1 };
  s2 -> s1 [0, 66] { R166 += 1, R116 += 1, R76 += 1, R43 += 1 };
  s2 -> s2 [0, 65535] { R166 += 1, R116 += 1, R75 += 1, R76 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s7 [0, 65535] { R166 += 1 };
  s2 -> s4 [67, 67] { R166 += 1, R116 += 1, R76 += 1, R43 += 1 };
  s2 -> s5 [67, 67] { R166 += 1, R116 += 1, R76 += 1, R43 += 1 };
  s2 -> s1 [68, 65535] { R166 += 1, R116 += 1, R76 += 1, R43 += 1 };
  s3 -> s1 [0, 66] { R166 += 1, R116 += 1, R76 += 1, R43 += 1 };
  s3 -> s2 [0, 65535] { R166 += 1, R116 += 1, R75 += 1, R76 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R166 += 1, R115 += 1, R116 += 1 };
  s3 -> s4 [67, 67] { R166 += 1, R116 += 1, R76 += 1, R43 += 1 };
  s3 -> s5 [67, 67] { R166 += 1, R116 += 1, R76 += 1, R43 += 1 };
  s3 -> s1 [68, 65535] { R166 += 1, R116 += 1, R76 += 1, R43 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R166 += 1, R116 += 1, R76 += 1, R43 += 1 };
  s4 -> s7 [0, 65535] { R166 += 1 };
  s4 -> s8 [0, 65535] { R166 += 1, R116 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R166 += 1 };
  s5 -> s5 [0, 65535] { R166 += 1, R116 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R166 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R166 += 1 };
  s8 -> s8 [0, 65535] { R166 += 1, R116 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 66] { R168 += 1, R118 += 1, R78 += 1, R45 += 1 };
  s0 -> s2 [0, 65535] { R168 += 1, R118 += 1, R77 += 1, R78 += 1 };
  s0 -> s3 [0, 65535] { R168 += 1, R117 += 1, R118 += 1 };
  s0 -> s0 [0, 65535] { R167 += 1, R168 += 1 };
  s0 -> s4 [67, 67] { R168 += 1, R118 += 1, R78 += 1, R45 += 1 };
  s0 -> s5 [67, 67] { R168 += 1, R118 += 1, R78 += 1, R45 += 1 };
  s0 -> s1 [68, 65535] { R168 += 1, R118 += 1, R78 += 1, R45 += 1 };
  s1 -> s1 [0, 66] { R168 += 1, R118 += 1, R78 += 1, R45 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R168 += 1, R118 += 1 };
  s1 -> s7 [0, 65535] { R168 += 1 };
  s1 -> s4 [67, 67] { R168 += 1, R118 += 1, R78 += 1, R45 += 1 };
  s1 -> s5 [67, 67] { R168 += 1, R118 += 1, R78 += 1, R45 += 1 };
  s1 -> s1 [68, 65535] { R168 += 1, R118 += 1, R78 += 1, R45 += 1 };
  s2 -> s1 [0, 66] { R168 += 1, R118 += 1, R78 += 1, R45 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R168 += 1, R118 += 1, R77 += 1, R78 += 1 };
  s2 -> s7 [0, 65535] { R168 += 1 };
  s2 -> s4 [67, 67] { R168 += 1, R118 += 1, R78 += 1, R45 += 1 };
  s2 -> s5 [67, 67] { R168 += 1, R118 += 1, R78 += 1, R45 += 1 };
  s2 -> s1 [68, 65535] { R168 += 1, R118 += 1, R78 += 1, R45 += 1 };
  s3 -> s1 [0, 66] { R168 += 1, R118 += 1, R78 += 1, R45 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s2 [0, 65535] { R168 += 1, R118 += 1, R77 += 1, R78 += 1 };
  s3 -> s3 [0, 65535] { R168 += 1, R117 += 1, R118 += 1 };
  s3 -> s4 [67, 67] { R168 += 1, R118 += 1, R78 += 1, R45 += 1 };
  s3 -> s5 [67, 67] { R168 += 1, R118 += 1, R78 += 1, R45 += 1 };
  s3 -> s1 [68, 65535] { R168 += 1, R118 += 1, R78 += 1, R45 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R168 += 1 };
  s4 -> s4 [0, 65535] { R168 += 1, R118 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R168 += 1 };
  s5 -> s8 [0, 65535] { R168 += 1, R118 += 1 };
  s5 -> s5 [0, 65535] { R168 += 1, R118 += 1, R78 += 1, R45 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R168 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R168 += 1 };
  s8 -> s8 [0, 65535] { R168 += 1, R118 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 66] { R170 += 1, R120 += 1, R80 += 1, R47 += 1, R48 += 1 };
  s0 -> s0 [0, 65535] { R169 += 1, R170 += 1 };
  s0 -> s2 [0, 65535] { R170 += 1, R119 += 1, R120 += 1 };
  s0 -> s3 [0, 65535] { R170 += 1, R120 += 1, R79 += 1, R80 += 1 };
  s0 -> s4 [67, 67] { R170 += 1, R120 += 1, R80 += 1, R47 += 1, R48 += 1 };
  s0 -> s5 [67, 67] { R170 += 1, R120 += 1, R80 += 1, R47 += 1, R48 += 1 };
  s0 -> s1 [68, 65535] { R170 += 1, R120 += 1, R80 += 1, R47 += 1, R48 += 1 };
  s1 -> s1 [0, 66] { R170 += 1, R120 += 1, R80 += 1, R47 += 1, R48 += 1 };
  s1 -> s1 [0, 65535] { R170 += 1, R120 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R170 += 1 };
  s1 -> s4 [67, 67] { R170 += 1, R120 += 1, R80 += 1, R47 += 1, R48 += 1 };
  s1 -> s5 [67, 67] { R170 += 1, R120 += 1, R80 += 1, R47 += 1, R48 += 1 };
  s1 -> s1 [68, 65535] { R170 += 1, R120 += 1, R80 += 1, R47 += 1, R48 += 1 };
  s2 -> s1 [0, 66] { R170 += 1, R120 += 1, R80 += 1, R47 += 1, R48 += 1 };
  s2 -> s2 [0, 65535] { R170 += 1, R119 += 1, R120 += 1 };
  s2 -> s3 [0, 65535] { R170 += 1, R120 += 1, R79 += 1, R80 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s4 [67, 67] { R170 += 1, R120 += 1, R80 += 1, R47 += 1, R48 += 1 };
  s2 -> s5 [67, 67] { R170 += 1, R120 += 1, R80 += 1, R47 += 1, R48 += 1 };
  s2 -> s1 [68, 65535] { R170 += 1, R120 += 1, R80 += 1, R47 += 1, R48 += 1 };
  s3 -> s1 [0, 66] { R170 += 1, R120 += 1, R80 += 1, R47 += 1, R48 += 1 };
  s3 -> s3 [0, 65535] { R170 += 1, R120 += 1, R79 += 1, R80 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s7 [0, 65535] { R170 += 1 };
  s3 -> s4 [67, 67] { R170 += 1, R120 += 1, R80 += 1, R47 += 1, R48 += 1 };
  s3 -> s5 [67, 67] { R170 += 1, R120 += 1, R80 += 1, R47 += 1, R48 += 1 };
  s3 -> s1 [68, 65535] { R170 += 1, R120 += 1, R80 += 1, R47 += 1, R48 += 1 };
  s4 -> s8 [0, 65535] { R170 += 1, R120 += 1 };
  s4 -> s4 [0, 65535] { R170 += 1, R120 += 1, R80 += 1, R47 += 1, R48 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R170 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R170 += 1 };
  s5 -> s5 [0, 65535] { R170 += 1, R120 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R170 += 1 };
  s8 -> s8 [0, 65535] { R170 += 1, R120 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R170 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 66] { R172 += 1, R122 += 1, R82 += 1, R51 += 1, R52 += 1 };
  s0 -> s0 [0, 65535] { R171 += 1, R172 += 1 };
  s0 -> s2 [0, 65535] { R172 += 1, R121 += 1, R122 += 1 };
  s0 -> s3 [0, 65535] { R172 += 1, R122 += 1, R81 += 1, R82 += 1 };
  s0 -> s4 [67, 67] { R172 += 1, R122 += 1, R82 += 1, R51 += 1, R52 += 1 };
  s0 -> s5 [67, 67] { R172 += 1, R122 += 1, R82 += 1, R51 += 1, R52 += 1 };
  s0 -> s1 [68, 65535] { R172 += 1, R122 += 1, R82 += 1, R51 += 1, R52 += 1 };
  s1 -> s1 [0, 66] { R172 += 1, R122 += 1, R82 += 1, R51 += 1, R52 += 1 };
  s1 -> s1 [0, 65535] { R172 += 1, R122 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R172 += 1 };
  s1 -> s4 [67, 67] { R172 += 1, R122 += 1, R82 += 1, R51 += 1, R52 += 1 };
  s1 -> s5 [67, 67] { R172 += 1, R122 += 1, R82 += 1, R51 += 1, R52 += 1 };
  s1 -> s1 [68, 65535] { R172 += 1, R122 += 1, R82 += 1, R51 += 1, R52 += 1 };
  s2 -> s1 [0, 66] { R172 += 1, R122 += 1, R82 += 1, R51 += 1, R52 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R172 += 1, R121 += 1, R122 += 1 };
  s2 -> s3 [0, 65535] { R172 += 1, R122 += 1, R81 += 1, R82 += 1 };
  s2 -> s4 [67, 67] { R172 += 1, R122 += 1, R82 += 1, R51 += 1, R52 += 1 };
  s2 -> s5 [67, 67] { R172 += 1, R122 += 1, R82 += 1, R51 += 1, R52 += 1 };
  s2 -> s1 [68, 65535] { R172 += 1, R122 += 1, R82 += 1, R51 += 1, R52 += 1 };
  s3 -> s1 [0, 66] { R172 += 1, R122 += 1, R82 += 1, R51 += 1, R52 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s7 [0, 65535] { R172 += 1 };
  s3 -> s3 [0, 65535] { R172 += 1, R122 += 1, R81 += 1, R82 += 1 };
  s3 -> s4 [67, 67] { R172 += 1, R122 += 1, R82 += 1, R51 += 1, R52 += 1 };
  s3 -> s5 [67, 67] { R172 += 1, R122 += 1, R82 += 1, R51 += 1, R52 += 1 };
  s3 -> s1 [68, 65535] { R172 += 1, R122 += 1, R82 += 1, R51 += 1, R52 += 1 };
  s4 -> s4 [0, 65535] { R172 += 1, R122 += 1, R82 += 1, R51 += 1, R52 += 1 };
  s4 -> s8 [0, 65535] { R172 += 1, R122 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R172 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R172 += 1 };
  s5 -> s5 [0, 65535] { R172 += 1, R122 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R172 += 1 };
  s8 -> s8 [0, 65535] { R172 += 1, R122 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R172 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
};
synchronised {  // Automata constraining P33
automaton P33_0 {
  init s0;
  s0 -> s1 [9, 9];
  accepting s1;
};
};
synchronised {  // Automata constraining P37
automaton P37_0 {
  init s0;
  s0 -> s1 [11, 11];
  accepting s1;
};
};
synchronised {  // Automata constraining P32
automaton P32_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
synchronised {  // Automata constraining P34
automaton P34_0 {
  init s0;
  s0 -> s1 [10, 10];
  accepting s1;
};
};
constraint R1 = R70 && R2 - R122 = 1 && R3 = R172 && R19 - R70 = -1 && R20 = R70 && R21 - R70 = -1 && R22 = R70 && R23 = 0 && R24 = 1 && R25 = 0 && R26 = 1 && R27 = R122 && R28 - R122 = 1 && R29 = R122 && R30 - R122 = 1 && R31 = 0 && R32 = 1 && R33 = 0 && R34 = 1 && R35 = 0 && R36 = 1 && R37 = 0 && R38 = 1 && R44 + R43 + -1*R50 + -1*R48 = 0 && R49 + R47 = 0 && R57 = 0 && R58 = R70 && R59 = 0 && R60 = R70 && R61 = 0 && R62 = R70 && R63 = 0 && R64 = R70 && R65 = 0 && R66 = R70 && R67 = 0 && R68 = R70 && R69 = 0 && R83 = 0 && R84 = R122 && R85 = 0 && R86 = R122 && R87 = 0 && R88 = R122 && R89 = 0 && R90 = R122 && R91 = 0 && R92 = R122 && R93 = 0 && R94 = R122 && R95 = 0 && R96 = R122 && R97 = 0 && R98 = R122 && R99 = 0 && R100 = R122 && R101 = 0 && R102 = R122 && R103 = 0 && R104 = R122 && R105 = 0 && R106 = R122 && R107 = 0 && R108 = R122 && R109 = 0 && R110 = R122 && R111 = 0 && R112 = R122 && R113 = 0 && R114 = R122 && R115 = 0 && R116 = R122 && R117 = 0 && R118 = R122 && R119 = 0 && R120 = R122 && R121 = 0 && R123 = 1 && R124 = R172 && R125 = 1 && R126 = R172 && R127 = 1 && R128 = R172 && R129 = 1 && R130 = R172 && R131 = 1 && R132 = R172 && R133 = 1 && R134 = R172 && R135 = 1 && R136 = R172 && R137 = 1 && R138 = R172 && R139 = 1 && R140 = R172 && R141 = 1 && R142 = R172 && R143 = 1 && R144 = R172 && R145 = 1 && R146 = R172 && R147 = 1 && R148 = R172 && R149 = 1 && R150 = R172 && R151 = 1 && R152 = R172 && R153 = 1 && R154 = R172 && R155 = 1 && R156 = R172 && R157 = 1 && R158 = R172 && R159 = 1 && R160 = R172 && R161 = 1 && R162 = R172 && R163 = 1 && R164 = R172 && R165 = 1 && R166 = R172 && R167 = 1 && R168 = R172 && R169 = 1 && R170 = R172 && R171 = 1 && R12 < 1 && R15 < 1 && R46 + R45 < 1 && -1*R50 + -1*R48 < 1 && 0 < R70 && -1 < R122 && 0 < R172 && (R50 + R48 != 0 || R56 + R53 = 0 || (R54 + R51 = 0 && R55 + R52 = 0)) && (R54 + R51 != 0 || R50 + R48 + -1*R55 + -1*R52 = 0 || R50 + R48 < 1) && (R18 = 0 || (R71 = 0 && R72 = 0)) && (R18 = 0 || (R73 = 0 && R74 = 0)) && (R18 = 0 || (R75 = 0 && R76 = 0)) && (R18 = 0 || (R77 = 0 && R78 = 0)) && (R18 = 0 || (R79 = 0 && R80 = 0)) && (R18 = 0 || (R81 = 0 && R82 = 0)) && (R54 + R51 = 0 || R50 + R48 < 1);
// End of Parikh automata intersection problem
