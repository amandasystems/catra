// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R2, R26, R27, R3, R38, R39, R40, R41, R42, R43, R44, R45, R46, R47;
synchronised {  // Automata constraining key1
automaton key1_0 {
  init s0;
  s0 -> s0 [0, 64];
  s0 -> s1 [66, 66];
  s0 -> s0 [67, 65535];
  s1 -> s1 [0, 64];
  s1 -> s1 [66, 65535];
  accepting s1;
};
automaton key1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R0 += 1 };
  accepting s0;
};
automaton key1_2 {
  init s0;
  s0 -> s1 [0, 65] { R3 += 1 };
  s0 -> s0 [0, 65535] { R2 += 1, R3 += 1 };
  s0 -> s2 [66, 66];
  s0 -> s1 [67, 65535] { R3 += 1 };
  s1 -> s1 [0, 65] { R3 += 1 };
  s1 -> s2 [66, 66];
  s1 -> s1 [67, 65535] { R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton key1_3 {
  init s0;
  s0 -> s1 [0, 65] { R39 += 1 };
  s0 -> s0 [0, 65535] { R38 += 1, R39 += 1 };
  s0 -> s1 [67, 65535] { R39 += 1 };
  s1 -> s1 [0, 65] { R39 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [67, 65535] { R39 += 1 };
  accepting s0, s1;
};
automaton key1_4 {
  init s0;
  s0 -> s1 [0, 65535] { R41 += 1, R26 += 1 };
  s0 -> s0 [0, 65535] { R40 += 1, R41 += 1 };
  s1 -> s1 [0, 65535] { R41 += 1, R26 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton key1_5 {
  init s0;
  s0 -> s0 [0, 65535] { R42 += 1, R43 += 1 };
  s0 -> s1 [0, 65535] { R43 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R43 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton key1_6 {
  init s0;
  s0 -> s0 [0, 65535] { R44 += 1, R45 += 1 };
  s0 -> s1 [0, 65535] { R45 += 1, R27 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R45 += 1, R27 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton key1_7 {
  init s0;
  s0 -> s1 [0, 65] { R47 += 1 };
  s0 -> s0 [0, 65535] { R46 += 1, R47 += 1 };
  s0 -> s2 [66, 66] { R47 += 1 };
  s0 -> s3 [66, 66] { R47 += 1 };
  s0 -> s4 [67, 67] { R47 += 1 };
  s0 -> s1 [68, 65535] { R47 += 1 };
  s1 -> s1 [0, 65] { R47 += 1 };
  s1 -> s2 [66, 66] { R47 += 1 };
  s1 -> s3 [66, 66] { R47 += 1 };
  s1 -> s4 [67, 67] { R47 += 1 };
  s1 -> s1 [68, 65535] { R47 += 1 };
  s2 -> s2 [0, 66] { R47 += 1 };
  s2 -> s5 [67, 67] { R47 += 1 };
  s2 -> s2 [68, 65535] { R47 += 1 };
  s4 -> s4 [0, 65] { R47 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s5 [66, 66] { R47 += 1 };
  s4 -> s6 [66, 66] { R47 += 1 };
  s4 -> s4 [67, 65535] { R47 += 1 };
  s5 -> s5 [0, 65535] { R47 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s4, s5, s6, s7;
};
};
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [98, 98];
  accepting s1;
};
};
constraint R2 = 0 && R3 - R47 = -1 && R46 = 0 && R47 - R0 < 1 && -1 < R47 && (R26 != 0 || ((R0 != R39 || R38 = R47 || R39 - R47 < 1) && (R0 = R39 || R0 - R47 < 1))) && (R26 != 0 || ((R0 != R41 || R40 = R47 || R41 - R47 < 1) && (R0 = R41 || R0 - R47 < 1))) && (R26 != 0 || ((R0 != R43 || R42 = R47 || R43 - R47 < 1) && (R0 = R43 || R0 - R47 < 1))) && (R44 != 0 || R45 = R47 || (R27 = 0 && (R0 < 1 || R47 < 1))) && (R26 = 0 || (R0 = R39 && (R38 = R47 || R39 < R47))) && (R26 = 0 || (R0 = R41 && (R40 = R47 || R41 < R47))) && (R26 = 0 || (R0 = R43 && (R42 = R47 || R43 < R47))) && (R44 = 0 || (R27 = 0 && (R0 < 1 || R47 < 1)));
// End of Parikh automata intersection problem
