// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R5, R6;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 60];
  s0 -> s1 [61, 61];
  s0 -> s0 [62, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60] { R6 += 1 };
  s0 -> s0 [0, 65535] { R5 += 1, R6 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535] { R6 += 1 };
  s1 -> s1 [0, 60] { R6 += 1 };
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535] { R6 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 65535] { R24 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R23 += 1, R24 += 1 };
  s1 -> s1 [0, 65535] { R24 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_4 {
  init s0;
  s0 -> s0 [0, 65535] { R25 += 1, R26 += 1 };
  s0 -> s1 [0, 65535] { R26 += 1, R0 += 1 };
  s1 -> s1 [0, 65535] { R26 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s0 [0, 65535] { R27 += 1, R28 += 1 };
  s0 -> s1 [0, 65535] { R28 += 1, R19 += 1, R20 += 1 };
  s0 -> s2 [12, 12] { R28 += 1, R20 += 1 };
  s1 -> s1 [0, 65535] { R28 += 1, R19 += 1, R20 += 1 };
  s1 -> s2 [12, 12] { R28 += 1, R20 += 1 };
  s2 -> s2 [0, 65535] { R28 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_6 {
  init s0;
  s0 -> s0 [0, 65535] { R29 += 1, R30 += 1 };
  s0 -> s1 [0, 65535] { R30 += 1, R22 += 1, R3 += 1 };
  s0 -> s2 [0, 65535] { R30 += 1, R21 += 1, R22 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R30 += 1 };
  s1 -> s1 [0, 65535] { R30 += 1, R22 += 1, R3 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R30 += 1, R22 += 1, R3 += 1 };
  s2 -> s2 [0, 65535] { R30 += 1, R21 += 1, R22 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R30 += 1 };
  accepting s3, s4, s2, s1, s0;
};
};
constraint R2 = R24 && R5 = 0 && R6 = R30 && R19 = 0 && R23 - R30 = 1 && R25 = 0 && R26 = R30 && R27 = 0 && R28 = R30 && R29 = 0 && R0 != 0 && R1 != 0 && R30 < R24 && -1 < R30 && (R0 != R20 || R20 = 1 || R20 < 0) && (R20 != 1 || -1 < R0) && (R21 != 0 || ((R3 != 0 || ((R0 != R22 || R22 = 1 || R22 < 0) && (R0 = R22 || R22 = 1 || R0 < 1))) && (R3 = 0 || ((R0 != R22 || R22 = 1 || R22 < 0) && (R22 != 1 || -1 < R0) && (R0 = R22 || R22 = 1))))) && (R0 = R20 || R20 = 1) && (R21 = 0 || (R3 = 0 && R0 < 0));
// End of Parikh automata intersection problem
