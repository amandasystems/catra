// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R12, R14, R15, R2, R3, R336, R337, R4, R496, R497, R498, R499, R5, R500, R501, R502, R503, R504, R505, R506, R507, R508, R509, R510, R511, R512, R513, R514, R515, R516, R517, R518, R519, R520, R521, R522, R523, R524, R525, R526, R527, R528, R529, R530, R531, R532, R533, R534, R535, R536, R537, R538, R539, R540, R541, R542, R543, R544, R545, R546, R547, R548, R549, R550, R551, R552, R553, R554, R555, R556, R557, R558, R559, R560, R561, R562, R563, R564, R565, R566, R567, R568, R569, R570, R571, R572, R573, R574, R575, R576, R577, R578, R579, R580, R581, R582, R583, R584, R585, R586, R587, R588, R589, R6, R7, R8, R9;
synchronised {  // Automata constraining value1
automaton value1_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 60];
  s0 -> s1 [61, 61];
  s0 -> s0 [62, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 65535];
  accepting s1;
};
automaton value1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton value1_2 {
  init s0;
  s0 -> s1 [0, 60] { R337 += 1 };
  s0 -> s0 [0, 65535] { R336 += 1, R337 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535] { R337 += 1 };
  s1 -> s1 [0, 60] { R337 += 1 };
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535] { R337 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value1_3 {
  init s0;
  s0 -> s1 [0, 65535] { R549 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R548 += 1, R549 += 1 };
  s1 -> s1 [0, 65535] { R549 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_4 {
  init s0;
  s0 -> s0 [0, 65535] { R550 += 1, R551 += 1 };
  s0 -> s1 [0, 65535] { R551 += 1, R522 += 1, R523 += 1 };
  s0 -> s2 [9, 9] { R551 += 1, R523 += 1 };
  s1 -> s1 [0, 65535] { R551 += 1, R522 += 1, R523 += 1 };
  s1 -> s2 [9, 9] { R551 += 1, R523 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R551 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value1_5 {
  init s0;
  s0 -> s0 [0, 65535] { R552 += 1, R553 += 1 };
  s0 -> s1 [0, 65535] { R553 += 1, R524 += 1, R525 += 1 };
  s0 -> s2 [0, 65535] { R553 += 1, R525 += 1, R11 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R553 += 1, R524 += 1, R525 += 1 };
  s1 -> s2 [0, 65535] { R553 += 1, R525 += 1, R11 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R553 += 1 };
  s2 -> s2 [0, 65535] { R553 += 1, R525 += 1, R11 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R553 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_6 {
  init s0;
  s0 -> s1 [0, 64] { R555 += 1, R533 += 1 };
  s0 -> s0 [0, 65535] { R554 += 1, R555 += 1 };
  s0 -> s2 [0, 65535] { R555 += 1, R532 += 1, R533 += 1 };
  s0 -> s1 [91, 65535] { R555 += 1, R533 += 1 };
  s1 -> s1 [0, 64] { R555 += 1, R533 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R555 += 1 };
  s1 -> s1 [91, 65535] { R555 += 1, R533 += 1 };
  s2 -> s1 [0, 64] { R555 += 1, R533 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R555 += 1, R532 += 1, R533 += 1 };
  s2 -> s1 [91, 65535] { R555 += 1, R533 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value1_7 {
  init s0;
  s0 -> s1 [0, 65535] { R557 += 1, R534 += 1, R535 += 1 };
  s0 -> s0 [0, 65535] { R556 += 1, R557 += 1 };
  s0 -> s2 [0, 65535] { R557 += 1, R535 += 1, R0 += 1 };
  s1 -> s1 [0, 65535] { R557 += 1, R534 += 1, R535 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R557 += 1, R535 += 1, R0 += 1 };
  s2 -> s3 [0, 65535] { R557 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R557 += 1, R535 += 1, R0 += 1 };
  s3 -> s3 [0, 65535] { R557 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_8 {
  init s0;
  s0 -> s1 [0, 8] { R559 += 1, R537 += 1, R499 += 1 };
  s0 -> s2 [0, 65535] { R559 += 1, R536 += 1, R537 += 1 };
  s0 -> s0 [0, 65535] { R558 += 1, R559 += 1 };
  s0 -> s3 [0, 65535] { R559 += 1, R537 += 1, R498 += 1, R499 += 1 };
  s0 -> s4 [9, 13] { R559 += 1, R537 += 1, R499 += 1 };
  s0 -> s1 [14, 31] { R559 += 1, R537 += 1, R499 += 1 };
  s0 -> s4 [32, 32] { R559 += 1, R537 += 1, R499 += 1 };
  s0 -> s1 [33, 65535] { R559 += 1, R537 += 1, R499 += 1 };
  s1 -> s5 [0, 65535] { R559 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R559 += 1, R537 += 1 };
  s1 -> s1 [0, 65535] { R559 += 1, R537 += 1, R499 += 1 };
  s2 -> s1 [0, 8] { R559 += 1, R537 += 1, R499 += 1 };
  s2 -> s2 [0, 65535] { R559 += 1, R536 += 1, R537 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R559 += 1, R537 += 1, R498 += 1, R499 += 1 };
  s2 -> s4 [9, 13] { R559 += 1, R537 += 1, R499 += 1 };
  s2 -> s1 [14, 31] { R559 += 1, R537 += 1, R499 += 1 };
  s2 -> s4 [32, 32] { R559 += 1, R537 += 1, R499 += 1 };
  s2 -> s1 [33, 65535] { R559 += 1, R537 += 1, R499 += 1 };
  s3 -> s1 [0, 8] { R559 += 1, R537 += 1, R499 += 1 };
  s3 -> s5 [0, 65535] { R559 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R559 += 1, R537 += 1, R498 += 1, R499 += 1 };
  s3 -> s4 [9, 13] { R559 += 1, R537 += 1, R499 += 1 };
  s3 -> s1 [14, 31] { R559 += 1, R537 += 1, R499 += 1 };
  s3 -> s4 [32, 32] { R559 += 1, R537 += 1, R499 += 1 };
  s3 -> s1 [33, 65535] { R559 += 1, R537 += 1, R499 += 1 };
  s4 -> s1 [0, 65535] { R559 += 1, R537 += 1, R499 += 1 };
  s5 -> s5 [0, 65535] { R559 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R559 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R559 += 1, R537 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton value1_9 {
  init s0;
  s0 -> s1 [0, 65535] { R561 += 1, R538 += 1, R539 += 1 };
  s0 -> s2 [0, 65535] { R561 += 1, R539 += 1, R500 += 1, R501 += 1 };
  s0 -> s0 [0, 65535] { R560 += 1, R561 += 1 };
  s0 -> s3 [0, 65535] { R561 += 1, R539 += 1, R501 += 1, R5 += 1 };
  s1 -> s1 [0, 65535] { R561 += 1, R538 += 1, R539 += 1 };
  s1 -> s2 [0, 65535] { R561 += 1, R539 += 1, R500 += 1, R501 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s3 [0, 65535] { R561 += 1, R539 += 1, R501 += 1, R5 += 1 };
  s2 -> s2 [0, 65535] { R561 += 1, R539 += 1, R500 += 1, R501 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s6 [0, 65535] { R561 += 1 };
  s2 -> s3 [0, 65535] { R561 += 1, R539 += 1, R501 += 1, R5 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R561 += 1, R539 += 1 };
  s3 -> s6 [0, 65535] { R561 += 1 };
  s3 -> s3 [0, 65535] { R561 += 1, R539 += 1, R501 += 1, R5 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R561 += 1, R539 += 1 };
  s5 -> s6 [0, 65535] { R561 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R561 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value1_10 {
  init s0;
  s0 -> s1 [0, 8] { R563 += 1, R541 += 1, R503 += 1 };
  s0 -> s0 [0, 65535] { R562 += 1, R563 += 1 };
  s0 -> s2 [0, 65535] { R563 += 1, R540 += 1, R541 += 1 };
  s0 -> s3 [0, 65535] { R563 += 1, R541 += 1, R502 += 1, R503 += 1 };
  s0 -> s4 [9, 13] { R563 += 1, R541 += 1, R503 += 1 };
  s0 -> s1 [14, 31] { R563 += 1, R541 += 1, R503 += 1 };
  s0 -> s4 [32, 32] { R563 += 1, R541 += 1, R503 += 1 };
  s0 -> s1 [33, 65535] { R563 += 1, R541 += 1, R503 += 1 };
  s1 -> s1 [0, 65535] { R563 += 1, R541 += 1, R503 += 1 };
  s1 -> s5 [0, 65535] { R563 += 1 };
  s1 -> s7 [0, 65535] { R563 += 1, R541 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s1 [0, 8] { R563 += 1, R541 += 1, R503 += 1 };
  s2 -> s2 [0, 65535] { R563 += 1, R540 += 1, R541 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R563 += 1, R541 += 1, R502 += 1, R503 += 1 };
  s2 -> s4 [9, 13] { R563 += 1, R541 += 1, R503 += 1 };
  s2 -> s1 [14, 31] { R563 += 1, R541 += 1, R503 += 1 };
  s2 -> s4 [32, 32] { R563 += 1, R541 += 1, R503 += 1 };
  s2 -> s1 [33, 65535] { R563 += 1, R541 += 1, R503 += 1 };
  s3 -> s1 [0, 8] { R563 += 1, R541 += 1, R503 += 1 };
  s3 -> s5 [0, 65535] { R563 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R563 += 1, R541 += 1, R502 += 1, R503 += 1 };
  s3 -> s4 [9, 13] { R563 += 1, R541 += 1, R503 += 1 };
  s3 -> s1 [14, 31] { R563 += 1, R541 += 1, R503 += 1 };
  s3 -> s4 [32, 32] { R563 += 1, R541 += 1, R503 += 1 };
  s3 -> s1 [33, 65535] { R563 += 1, R541 += 1, R503 += 1 };
  s4 -> s1 [0, 65535] { R563 += 1, R541 += 1, R503 += 1 };
  s5 -> s5 [0, 65535] { R563 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R563 += 1 };
  s7 -> s7 [0, 65535] { R563 += 1, R541 += 1 };
  s7 -> s6 [0, 65535];
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton value1_11 {
  init s0;
  s0 -> s0 [0, 65535] { R564 += 1, R565 += 1 };
  s0 -> s1 [0, 65535] { R565 += 1, R543 += 1, R505 += 1, R6 += 1 };
  s0 -> s2 [0, 65535] { R565 += 1, R542 += 1, R543 += 1 };
  s0 -> s3 [0, 65535] { R565 += 1, R543 += 1, R504 += 1, R505 += 1 };
  s1 -> s1 [0, 65535] { R565 += 1, R543 += 1, R505 += 1, R6 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R565 += 1, R543 += 1 };
  s1 -> s5 [0, 65535] { R565 += 1 };
  s2 -> s1 [0, 65535] { R565 += 1, R543 += 1, R505 += 1, R6 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R565 += 1, R542 += 1, R543 += 1 };
  s2 -> s3 [0, 65535] { R565 += 1, R543 += 1, R504 += 1, R505 += 1 };
  s3 -> s1 [0, 65535] { R565 += 1, R543 += 1, R505 += 1, R6 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R565 += 1 };
  s3 -> s3 [0, 65535] { R565 += 1, R543 += 1, R504 += 1, R505 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R565 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R565 += 1, R543 += 1 };
  s6 -> s5 [0, 65535] { R565 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value1_12 {
  init s0;
  s0 -> s1 [0, 64] { R567 += 1 };
  s0 -> s0 [0, 65535] { R566 += 1, R567 += 1 };
  s0 -> s2 [67, 67] { R567 += 1 };
  s0 -> s1 [68, 65535] { R567 += 1 };
  s1 -> s1 [0, 64] { R567 += 1 };
  s1 -> s2 [67, 67] { R567 += 1 };
  s1 -> s1 [68, 65535] { R567 += 1 };
  s2 -> s2 [0, 64] { R567 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [67, 65535] { R567 += 1 };
  accepting s2;
};
automaton value1_13 {
  init s0;
  s0 -> s0 [0, 65535] { R568 += 1, R569 += 1 };
  s0 -> s1 [0, 65535] { R569 += 1, R2 += 1 };
  s1 -> s1 [0, 65535] { R569 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_14 {
  init s0;
  s0 -> s1 [0, 66] { R571 += 1, R15 += 1 };
  s0 -> s2 [0, 65535] { R571 += 1, R14 += 1, R15 += 1 };
  s0 -> s0 [0, 65535] { R570 += 1, R571 += 1 };
  s0 -> s3 [67, 67] { R571 += 1 };
  s0 -> s1 [68, 65535] { R571 += 1, R15 += 1 };
  s1 -> s1 [0, 66] { R571 += 1, R15 += 1 };
  s1 -> s3 [67, 67] { R571 += 1 };
  s1 -> s1 [68, 65535] { R571 += 1, R15 += 1 };
  s2 -> s1 [0, 66] { R571 += 1, R15 += 1 };
  s2 -> s2 [0, 65535] { R571 += 1, R14 += 1, R15 += 1 };
  s2 -> s3 [67, 67] { R571 += 1 };
  s2 -> s1 [68, 65535] { R571 += 1, R15 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R571 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton value1_15 {
  init s0;
  s0 -> s1 [0, 8] { R573 += 1, R515 += 1 };
  s0 -> s2 [0, 65535] { R573 += 1, R514 += 1, R515 += 1 };
  s0 -> s0 [0, 65535] { R572 += 1, R573 += 1 };
  s0 -> s3 [9, 13] { R573 += 1, R515 += 1 };
  s0 -> s1 [14, 31] { R573 += 1, R515 += 1 };
  s0 -> s3 [32, 32] { R573 += 1, R515 += 1 };
  s0 -> s1 [33, 65535] { R573 += 1, R515 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R573 += 1 };
  s1 -> s1 [0, 65535] { R573 += 1, R515 += 1 };
  s2 -> s1 [0, 8] { R573 += 1, R515 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R573 += 1, R514 += 1, R515 += 1 };
  s2 -> s3 [9, 13] { R573 += 1, R515 += 1 };
  s2 -> s1 [14, 31] { R573 += 1, R515 += 1 };
  s2 -> s3 [32, 32] { R573 += 1, R515 += 1 };
  s2 -> s1 [33, 65535] { R573 += 1, R515 += 1 };
  s3 -> s1 [0, 65535] { R573 += 1, R515 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R573 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value1_16 {
  init s0;
  s0 -> s1 [0, 65535] { R575 += 1, R516 += 1, R517 += 1 };
  s0 -> s0 [0, 65535] { R574 += 1, R575 += 1 };
  s0 -> s2 [0, 65535] { R575 += 1, R517 += 1, R9 += 1 };
  s1 -> s1 [0, 65535] { R575 += 1, R516 += 1, R517 += 1 };
  s1 -> s2 [0, 65535] { R575 += 1, R517 += 1, R9 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R575 += 1 };
  s2 -> s2 [0, 65535] { R575 += 1, R517 += 1, R9 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R575 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_17 {
  init s0;
  s0 -> s1 [0, 8] { R577 += 1, R519 += 1 };
  s0 -> s2 [0, 65535] { R577 += 1, R518 += 1, R519 += 1 };
  s0 -> s0 [0, 65535] { R576 += 1, R577 += 1 };
  s0 -> s3 [9, 13] { R577 += 1, R519 += 1 };
  s0 -> s1 [14, 31] { R577 += 1, R519 += 1 };
  s0 -> s3 [32, 32] { R577 += 1, R519 += 1 };
  s0 -> s1 [33, 65535] { R577 += 1, R519 += 1 };
  s1 -> s5 [0, 65535] { R577 += 1 };
  s1 -> s1 [0, 65535] { R577 += 1, R519 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R577 += 1, R519 += 1 };
  s2 -> s2 [0, 65535] { R577 += 1, R518 += 1, R519 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R577 += 1, R519 += 1 };
  s2 -> s1 [14, 31] { R577 += 1, R519 += 1 };
  s2 -> s3 [32, 32] { R577 += 1, R519 += 1 };
  s2 -> s1 [33, 65535] { R577 += 1, R519 += 1 };
  s3 -> s1 [0, 65535] { R577 += 1, R519 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R577 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value1_18 {
  init s0;
  s0 -> s0 [0, 65535] { R578 += 1, R579 += 1 };
  s0 -> s1 [0, 65535] { R579 += 1, R520 += 1, R521 += 1 };
  s0 -> s2 [0, 65535] { R579 += 1, R521 += 1, R10 += 1 };
  s1 -> s1 [0, 65535] { R579 += 1, R520 += 1, R521 += 1 };
  s1 -> s2 [0, 65535] { R579 += 1, R521 += 1, R10 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R579 += 1, R521 += 1, R10 += 1 };
  s2 -> s3 [0, 65535] { R579 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R579 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_19 {
  init s0;
  s0 -> s1 [0, 66] { R581 += 1, R527 += 1 };
  s0 -> s2 [0, 65535] { R581 += 1, R526 += 1, R527 += 1 };
  s0 -> s0 [0, 65535] { R580 += 1, R581 += 1 };
  s0 -> s1 [68, 65535] { R581 += 1, R527 += 1 };
  s1 -> s1 [0, 66] { R581 += 1, R527 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R581 += 1 };
  s1 -> s1 [68, 65535] { R581 += 1, R527 += 1 };
  s2 -> s1 [0, 66] { R581 += 1, R527 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R581 += 1, R526 += 1, R527 += 1 };
  s2 -> s1 [68, 65535] { R581 += 1, R527 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value1_20 {
  init s0;
  s0 -> s1 [0, 65535] { R583 += 1, R529 += 1, R496 += 1 };
  s0 -> s2 [0, 65535] { R583 += 1, R528 += 1, R529 += 1 };
  s0 -> s0 [0, 65535] { R582 += 1, R583 += 1 };
  s1 -> s1 [0, 65535] { R583 += 1, R529 += 1, R496 += 1 };
  s1 -> s4 [0, 65535] { R583 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R583 += 1, R529 += 1, R496 += 1 };
  s2 -> s2 [0, 65535] { R583 += 1, R528 += 1, R529 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R583 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_21 {
  init s0;
  s0 -> s1 [0, 67] { R585 += 1, R531 += 1 };
  s0 -> s0 [0, 65535] { R584 += 1, R585 += 1 };
  s0 -> s2 [0, 65535] { R585 += 1, R530 += 1, R531 += 1 };
  s0 -> s3 [84, 84] { R585 += 1, R531 += 1 };
  s0 -> s1 [85, 65535] { R585 += 1, R531 += 1 };
  s1 -> s1 [0, 67] { R585 += 1, R531 += 1 };
  s1 -> s3 [84, 84] { R585 += 1, R531 += 1 };
  s1 -> s1 [85, 65535] { R585 += 1, R531 += 1 };
  s2 -> s1 [0, 67] { R585 += 1, R531 += 1 };
  s2 -> s2 [0, 65535] { R585 += 1, R530 += 1, R531 += 1 };
  s2 -> s3 [84, 84] { R585 += 1, R531 += 1 };
  s2 -> s1 [85, 65535] { R585 += 1, R531 += 1 };
  s3 -> s3 [0, 67] { R585 += 1, R531 += 1 };
  s3 -> s3 [0, 65535] { R585 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [84, 65535] { R585 += 1, R531 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton value1_22 {
  init s0;
  s0 -> s0 [0, 65535] { R586 += 1, R587 += 1 };
  s0 -> s1 [0, 65535] { R587 += 1, R545 += 1, R497 += 1 };
  s0 -> s2 [0, 65535] { R587 += 1, R544 += 1, R545 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R587 += 1, R545 += 1, R497 += 1 };
  s1 -> s4 [0, 65535] { R587 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R587 += 1, R545 += 1, R497 += 1 };
  s2 -> s2 [0, 65535] { R587 += 1, R544 += 1, R545 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R587 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_23 {
  init s0;
  s0 -> s1 [0, 66] { R589 += 1, R547 += 1 };
  s0 -> s2 [0, 65535] { R589 += 1, R546 += 1, R547 += 1 };
  s0 -> s0 [0, 65535] { R588 += 1, R589 += 1 };
  s0 -> s3 [67, 67] { R589 += 1, R547 += 1 };
  s0 -> s4 [67, 67] { R589 += 1, R547 += 1 };
  s0 -> s1 [85, 65535] { R589 += 1, R547 += 1 };
  s1 -> s1 [0, 66] { R589 += 1, R547 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R589 += 1 };
  s1 -> s3 [67, 67] { R589 += 1, R547 += 1 };
  s1 -> s4 [67, 67] { R589 += 1, R547 += 1 };
  s1 -> s1 [85, 65535] { R589 += 1, R547 += 1 };
  s2 -> s1 [0, 66] { R589 += 1, R547 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R589 += 1, R546 += 1, R547 += 1 };
  s2 -> s3 [67, 67] { R589 += 1, R547 += 1 };
  s2 -> s4 [67, 67] { R589 += 1, R547 += 1 };
  s2 -> s1 [85, 65535] { R589 += 1, R547 += 1 };
  s3 -> s3 [0, 67] { R589 += 1, R547 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R589 += 1 };
  s3 -> s3 [85, 65535] { R589 += 1, R547 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R589 += 1 };
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
};
synchronised {  // Automata constraining c5
automaton c5_0 {
  init s0;
  s0 -> s1 [99, 99];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s0 [91, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 8] { R507 += 1 };
  s0 -> s0 [0, 65535] { R506 += 1, R507 += 1 };
  s0 -> s2 [9, 13] { R507 += 1 };
  s0 -> s1 [14, 31] { R507 += 1 };
  s0 -> s2 [32, 32] { R507 += 1 };
  s0 -> s1 [33, 65535] { R507 += 1 };
  s1 -> s1 [0, 65535] { R507 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R507 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_4 {
  init s0;
  s0 -> s0 [0, 65535] { R508 += 1, R509 += 1 };
  s0 -> s1 [0, 65535] { R509 += 1, R7 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R509 += 1, R7 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 8] { R511 += 1 };
  s0 -> s0 [0, 65535] { R510 += 1, R511 += 1 };
  s0 -> s2 [9, 13] { R511 += 1 };
  s0 -> s1 [14, 31] { R511 += 1 };
  s0 -> s2 [32, 32] { R511 += 1 };
  s0 -> s1 [33, 65535] { R511 += 1 };
  s1 -> s1 [0, 65535] { R511 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R511 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 65535] { R513 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R512 += 1, R513 += 1 };
  s1 -> s1 [0, 65535] { R513 += 1, R8 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
};
synchronised {  // Automata constraining P26
automaton P26_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
constraint R2 = R531 && R3 = R543 && R4 = R589 && R14 = 0 && R15 - R530 = -1 && R336 = 0 && R337 - R588 = -1 && R514 - R531 = -1 && R515 = R531 && R516 - R531 = -1 && R517 = R531 && R518 = 0 && R519 = 1 && R520 = 0 && R521 = 1 && R522 = 0 && R523 = 1 && R524 = 0 && R525 = 1 && R532 = 1 && R533 = R543 && R534 = 1 && R535 = R543 && R536 = 1 && R537 = R543 && R538 = 1 && R539 = R543 && R540 = 1 && R541 = R543 && R542 = 1 && R548 = 0 && R549 - R588 = -1 && R550 = 0 && R551 - R588 = -1 && R552 = 0 && R553 - R588 = -1 && R554 = 0 && R555 - R588 = -1 && R556 = 0 && R557 - R588 = -1 && R558 = 0 && R559 - R588 = -1 && R560 = 0 && R561 - R588 = -1 && R562 = 0 && R563 - R588 = -1 && R564 = 0 && R565 - R588 = -1 && R566 = R588 && R567 = R589 && R568 = R588 && R569 = R589 && R570 = R588 && R571 = R589 && R572 = R588 && R573 = R589 && R574 = R588 && R575 = R589 && R576 = R588 && R577 = R589 && R578 = R588 && R579 = R589 && R580 = R588 && R581 = R589 && R582 = R588 && R583 = R589 && R584 = R588 && R585 = R589 && R586 = R588 && R587 = R589 && R0 != 0 && R1 != 0 && R12 < 1 && R530 - R531 < 1 && -1 < R530 && 0 < R531 && 0 < R543 && R588 - R589 < 1 && 0 < R588 && (R5 != 0 || ((R0 != R499 || R498 - R499 = -1 || R499 < 0) && (R0 = R499 || R0 < 1))) && (R5 != 0 || ((R0 != R501 || R500 - R501 = -1 || R501 < 0) && (R0 = R501 || R0 < 1))) && (R7 != 0 || ((R1 != R507 || R506 - R507 = -1 || R507 < 0) && (R1 = R507 || R1 < 1))) && (R7 != 0 || ((R1 != R509 || R508 - R509 = -1 || R509 < 0) && (R1 = R509 || R1 < 1))) && (R502 != 0 || ((R6 != 0 || ((R0 != R503 || R503 = 1 || R503 < 0) && (R0 = R503 || R503 = 1 || R0 < 1))) && (R6 = 0 || ((R0 != R503 || R503 = 1 || R503 < 0) && (R503 != 1 || -1 < R0) && (R0 = R503 || R503 = 1))))) && (R504 != 0 || ((R6 != 0 || ((R0 != R505 || R505 = 1 || R505 < 0) && (R0 = R505 || R505 = 1 || R0 < 1))) && (R6 = 0 || ((R0 != R505 || R505 = 1 || R505 < 0) && (R505 != 1 || -1 < R0) && (R0 = R505 || R505 = 1))))) && (R510 != 0 || ((R8 != 0 || ((R1 != R511 || R511 = 1 || R511 < 0) && (R1 = R511 || R511 = 1 || R1 < 1))) && (R8 = 0 || ((R1 != R511 || R511 = 1 || R511 < 0) && (R511 != 1 || -1 < R1) && (R1 = R511 || R511 = 1))))) && (R512 != 0 || ((R8 != 0 || ((R1 != R513 || R513 = 1 || R513 < 0) && (R1 = R513 || R513 = 1 || R1 < 1))) && (R8 = 0 || ((R1 != R513 || R513 = 1 || R513 < 0) && (R513 != 1 || -1 < R1) && (R1 = R513 || R513 = 1))))) && (R526 != R530 || R527 = R531 || (R496 = 0 && R530 = R531)) && (R528 != R530 || R529 = R531 || (R496 = 0 && R530 = R531)) && (R544 != 0 || R530 = R545 || (R497 = 0 && R530 = 0)) && (R546 != 0 || R530 = R547 || (R497 = 0 && R530 = 0)) && (R5 = 0 || (R0 = R499 && R498 - R499 = -1)) && (R5 = 0 || (R0 = R501 && R500 - R501 = -1)) && (R7 = 0 || (R1 = R507 && R506 - R507 = -1)) && (R7 = 0 || (R1 = R509 && R508 - R509 = -1)) && (R502 = 0 || (R6 = 0 && R0 < 0)) && (R504 = 0 || (R6 = 0 && R0 < 0)) && (R510 = 0 || (R8 = 0 && R1 < 0)) && (R512 = 0 || (R8 = 0 && R1 < 0)) && (R526 = R530 || (R496 = 0 && R530 = R531)) && (R528 = R530 || (R496 = 0 && R530 = R531)) && (R544 = 0 || (R497 = 0 && R530 = 0)) && (R546 = 0 || (R497 = 0 && R530 = 0));
// End of Parikh automata intersection problem
