// Parikh automata intersection problem, generated by OSTRICH+
counter int R100, R101, R102, R103, R104, R105, R106, R107, R108, R109, R110, R111, R112, R113, R114, R115, R116, R117, R118, R119, R120, R121, R122, R123, R124, R125, R126, R127, R128, R129, R130, R131, R132, R133, R134, R135, R136, R137, R138, R139, R140, R141, R142, R143, R144, R145, R146, R147, R148, R149, R15, R150, R151, R152, R153, R154, R155, R156, R157, R158, R159, R16, R160, R161, R162, R163, R164, R165, R166, R167, R168, R169, R170, R171, R172, R173, R174, R175, R176, R177, R178, R179, R180, R181, R182, R183, R184, R185, R186, R187, R188, R189, R190, R191, R192, R193, R194, R195, R196, R197, R198, R199, R2, R200, R201, R202, R203, R204, R205, R206, R207, R208, R209, R210, R211, R212, R213, R214, R215, R216, R217, R218, R61, R62, R63, R64, R65, R66, R67, R68, R69, R70, R71, R72, R73, R74, R75, R76, R77, R78, R79, R80, R81, R82, R83, R84, R85, R86, R87, R88, R89, R9, R90, R91, R92, R93, R94, R95, R96, R97, R98, R99;
synchronised {  // Automata constraining key1
automaton key1_0 {
  init s0;
  s0 -> s0 [0, 64];
  s0 -> s1 [65, 65];
  s0 -> s0 [66, 65535];
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton key1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton key1_2 {
  init s0;
  s0 -> s1 [0, 64];
  s0 -> s0 [0, 65535] { R9 += 1 };
  s0 -> s2 [65, 65];
  s0 -> s1 [66, 65535];
  s1 -> s1 [0, 64];
  s1 -> s2 [65, 65];
  s1 -> s1 [66, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton key1_3 {
  init s0;
  s0 -> s1 [0, 64] { R150 += 1 };
  s0 -> s0 [0, 65535] { R149 += 1, R150 += 1 };
  s0 -> s1 [66, 65535] { R150 += 1 };
  s1 -> s1 [0, 64] { R150 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [66, 65535] { R150 += 1 };
  accepting s0, s1;
};
automaton key1_4 {
  init s0;
  s0 -> s0 [0, 65535] { R151 += 1, R152 += 1 };
  s0 -> s1 [0, 65535] { R152 += 1, R15 += 1 };
  s1 -> s1 [0, 65535] { R152 += 1, R15 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton key1_5 {
  init s0;
  s0 -> s1 [0, 65] { R154 += 1 };
  s0 -> s0 [0, 65535] { R153 += 1, R154 += 1 };
  s0 -> s2 [73, 73] { R154 += 1 };
  s0 -> s1 [74, 65535] { R154 += 1 };
  s1 -> s1 [0, 65] { R154 += 1 };
  s1 -> s2 [73, 73] { R154 += 1 };
  s1 -> s1 [74, 65535] { R154 += 1 };
  s2 -> s2 [0, 65] { R154 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [73, 65535] { R154 += 1 };
  accepting s2;
};
automaton key1_6 {
  init s0;
  s0 -> s1 [0, 65535] { R156 += 1, R62 += 1 };
  s0 -> s0 [0, 65535] { R155 += 1, R156 += 1 };
  s1 -> s1 [0, 65535] { R156 += 1, R62 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton key1_7 {
  init s0;
  s0 -> s1 [0, 72] { R158 += 1 };
  s0 -> s0 [0, 65535] { R157 += 1, R158 += 1 };
  s0 -> s2 [0, 65535] { R158 += 1, R64 += 1 };
  s0 -> s1 [74, 65535] { R158 += 1 };
  s1 -> s1 [0, 72] { R158 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [74, 65535] { R158 += 1 };
  s2 -> s1 [0, 72] { R158 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R158 += 1, R64 += 1 };
  s2 -> s1 [74, 65535] { R158 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton key1_8 {
  init s0;
  s0 -> s1 [0, 72] { R160 += 1, R68 += 1 };
  s0 -> s0 [0, 65535] { R159 += 1, R160 += 1 };
  s0 -> s2 [0, 65535] { R160 += 1, R67 += 1, R68 += 1 };
  s0 -> s1 [74, 65535] { R160 += 1, R68 += 1 };
  s1 -> s1 [0, 72] { R160 += 1, R68 += 1 };
  s1 -> s1 [0, 65535] { R160 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [74, 65535] { R160 += 1, R68 += 1 };
  s2 -> s1 [0, 72] { R160 += 1, R68 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R160 += 1, R67 += 1, R68 += 1 };
  s2 -> s1 [74, 65535] { R160 += 1, R68 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton key1_9 {
  init s0;
  s0 -> s1 [0, 65535] { R162 += 1, R73 += 1, R74 += 1 };
  s0 -> s0 [0, 65535] { R161 += 1, R162 += 1 };
  s0 -> s2 [0, 65535] { R162 += 1, R72 += 1, R73 += 1 };
  s1 -> s1 [0, 65535] { R162 += 1, R73 += 1, R74 += 1 };
  s1 -> s4 [0, 65535] { R162 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R162 += 1, R73 += 1, R74 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R162 += 1, R72 += 1, R73 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R162 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton key1_10 {
  init s0;
  s0 -> s1 [0, 73] { R164 += 1, R78 += 1 };
  s0 -> s2 [0, 65535] { R164 += 1, R77 += 1, R78 += 1 };
  s0 -> s0 [0, 65535] { R163 += 1, R164 += 1 };
  s0 -> s3 [85, 85] { R164 += 1, R78 += 1 };
  s0 -> s1 [86, 65535] { R164 += 1, R78 += 1 };
  s1 -> s1 [0, 73] { R164 += 1, R78 += 1 };
  s1 -> s3 [85, 85] { R164 += 1, R78 += 1 };
  s1 -> s1 [86, 65535] { R164 += 1, R78 += 1 };
  s2 -> s1 [0, 73] { R164 += 1, R78 += 1 };
  s2 -> s2 [0, 65535] { R164 += 1, R77 += 1, R78 += 1 };
  s2 -> s3 [85, 85] { R164 += 1, R78 += 1 };
  s2 -> s1 [86, 65535] { R164 += 1, R78 += 1 };
  s3 -> s3 [0, 73] { R164 += 1, R78 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R164 += 1 };
  s3 -> s3 [85, 65535] { R164 += 1, R78 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton key1_11 {
  init s0;
  s0 -> s1 [0, 65535] { R166 += 1, R83 += 1, R84 += 1 };
  s0 -> s0 [0, 65535] { R165 += 1, R166 += 1 };
  s0 -> s2 [0, 65535] { R166 += 1, R82 += 1, R83 += 1 };
  s1 -> s4 [0, 65535] { R166 += 1 };
  s1 -> s1 [0, 65535] { R166 += 1, R83 += 1, R84 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R166 += 1, R83 += 1, R84 += 1 };
  s2 -> s2 [0, 65535] { R166 += 1, R82 += 1, R83 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R166 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton key1_12 {
  init s0;
  s0 -> s1 [0, 84] { R168 += 1, R89 += 1 };
  s0 -> s0 [0, 65535] { R167 += 1, R168 += 1 };
  s0 -> s2 [0, 65535] { R168 += 1, R88 += 1, R89 += 1 };
  s0 -> s3 [0, 65535] { R168 += 1, R89 += 1, R90 += 1 };
  s0 -> s1 [86, 65535] { R168 += 1, R89 += 1 };
  s1 -> s1 [0, 84] { R168 += 1, R89 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R168 += 1 };
  s1 -> s1 [86, 65535] { R168 += 1, R89 += 1 };
  s2 -> s1 [0, 84] { R168 += 1, R89 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R168 += 1, R88 += 1, R89 += 1 };
  s2 -> s3 [0, 65535] { R168 += 1, R89 += 1, R90 += 1 };
  s2 -> s1 [86, 65535] { R168 += 1, R89 += 1 };
  s3 -> s1 [0, 84] { R168 += 1, R89 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R168 += 1 };
  s3 -> s3 [0, 65535] { R168 += 1, R89 += 1, R90 += 1 };
  s3 -> s1 [86, 65535] { R168 += 1, R89 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R168 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton key1_13 {
  init s0;
  s0 -> s1 [0, 84] { R170 += 1, R96 += 1, R98 += 1 };
  s0 -> s2 [0, 65535] { R170 += 1, R96 += 1, R97 += 1, R98 += 1 };
  s0 -> s3 [0, 65535] { R170 += 1, R95 += 1, R96 += 1 };
  s0 -> s0 [0, 65535] { R169 += 1, R170 += 1 };
  s0 -> s4 [85, 85] { R170 += 1, R96 += 1, R98 += 1 };
  s0 -> s1 [86, 65535] { R170 += 1, R96 += 1, R98 += 1 };
  s1 -> s1 [0, 84] { R170 += 1, R96 += 1, R98 += 1 };
  s1 -> s4 [85, 85] { R170 += 1, R96 += 1, R98 += 1 };
  s1 -> s1 [86, 65535] { R170 += 1, R96 += 1, R98 += 1 };
  s2 -> s1 [0, 84] { R170 += 1, R96 += 1, R98 += 1 };
  s2 -> s2 [0, 65535] { R170 += 1, R96 += 1, R97 += 1, R98 += 1 };
  s2 -> s4 [85, 85] { R170 += 1, R96 += 1, R98 += 1 };
  s2 -> s1 [86, 65535] { R170 += 1, R96 += 1, R98 += 1 };
  s3 -> s1 [0, 84] { R170 += 1, R96 += 1, R98 += 1 };
  s3 -> s2 [0, 65535] { R170 += 1, R96 += 1, R97 += 1, R98 += 1 };
  s3 -> s3 [0, 65535] { R170 += 1, R95 += 1, R96 += 1 };
  s3 -> s4 [85, 85] { R170 += 1, R96 += 1, R98 += 1 };
  s3 -> s1 [86, 65535] { R170 += 1, R96 += 1, R98 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R170 += 1, R96 += 1, R98 += 1 };
  s4 -> s6 [0, 65535] { R170 += 1 };
  s4 -> s7 [0, 65535] { R170 += 1, R96 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R170 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R170 += 1 };
  s7 -> s7 [0, 65535] { R170 += 1, R96 += 1 };
  accepting s4, s5, s6, s7;
};
automaton key1_14 {
  init s0;
  s0 -> s0 [0, 65535] { R171 += 1, R172 += 1 };
  s0 -> s1 [0, 65535] { R172 += 1, R104 += 1, R105 += 1 };
  s0 -> s2 [0, 65535] { R172 += 1, R105 += 1, R107 += 1, R108 += 1 };
  s0 -> s3 [0, 65535] { R172 += 1, R105 += 1, R106 += 1, R107 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R172 += 1, R104 += 1, R105 += 1 };
  s1 -> s2 [0, 65535] { R172 += 1, R105 += 1, R107 += 1, R108 += 1 };
  s1 -> s3 [0, 65535] { R172 += 1, R105 += 1, R106 += 1, R107 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s6 [0, 65535] { R172 += 1, R105 += 1 };
  s2 -> s2 [0, 65535] { R172 += 1, R105 += 1, R107 += 1, R108 += 1 };
  s2 -> s5 [0, 65535] { R172 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R172 += 1, R105 += 1, R107 += 1, R108 += 1 };
  s3 -> s5 [0, 65535] { R172 += 1 };
  s3 -> s3 [0, 65535] { R172 += 1, R105 += 1, R106 += 1, R107 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R172 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R172 += 1, R105 += 1 };
  s6 -> s5 [0, 65535] { R172 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton key1_15 {
  init s0;
  s0 -> s0 [0, 65535] { R173 += 1, R174 += 1 };
  s0 -> s1 [0, 65535] { R174 += 1, R112 += 1, R113 += 1 };
  s0 -> s2 [0, 65535] { R174 += 1, R113 += 1, R114 += 1 };
  s1 -> s1 [0, 65535] { R174 += 1, R112 += 1, R113 += 1 };
  s1 -> s2 [0, 65535] { R174 += 1, R113 += 1, R114 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R174 += 1 };
  s2 -> s2 [0, 65535] { R174 += 1, R113 += 1, R114 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R174 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton key1_16 {
  init s0;
  s0 -> s1 [0, 72] { R176 += 1, R118 += 1 };
  s0 -> s0 [0, 65535] { R175 += 1, R176 += 1 };
  s0 -> s2 [0, 65535] { R176 += 1, R117 += 1, R118 += 1 };
  s0 -> s3 [73, 73] { R176 += 1, R118 += 1 };
  s0 -> s4 [73, 73] { R176 += 1, R118 += 1 };
  s0 -> s1 [86, 65535] { R176 += 1, R118 += 1 };
  s1 -> s1 [0, 72] { R176 += 1, R118 += 1 };
  s1 -> s1 [0, 65535] { R176 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R176 += 1, R118 += 1 };
  s1 -> s4 [73, 73] { R176 += 1, R118 += 1 };
  s1 -> s1 [86, 65535] { R176 += 1, R118 += 1 };
  s2 -> s1 [0, 72] { R176 += 1, R118 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R176 += 1, R117 += 1, R118 += 1 };
  s2 -> s3 [73, 73] { R176 += 1, R118 += 1 };
  s2 -> s4 [73, 73] { R176 += 1, R118 += 1 };
  s2 -> s1 [86, 65535] { R176 += 1, R118 += 1 };
  s3 -> s3 [0, 65535] { R176 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 73] { R176 += 1, R118 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R176 += 1 };
  s4 -> s4 [86, 65535] { R176 += 1, R118 += 1 };
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton key1_17 {
  init s0;
  s0 -> s1 [0, 72] { R178 += 1, R123 += 1, R124 += 1 };
  s0 -> s0 [0, 65535] { R177 += 1, R178 += 1 };
  s0 -> s2 [0, 65535] { R178 += 1, R122 += 1, R123 += 1 };
  s0 -> s3 [73, 73] { R178 += 1, R123 += 1, R124 += 1 };
  s0 -> s4 [73, 73] { R178 += 1, R123 += 1, R124 += 1 };
  s0 -> s1 [74, 65535] { R178 += 1, R123 += 1, R124 += 1 };
  s1 -> s1 [0, 72] { R178 += 1, R123 += 1, R124 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R178 += 1 };
  s1 -> s3 [73, 73] { R178 += 1, R123 += 1, R124 += 1 };
  s1 -> s4 [73, 73] { R178 += 1, R123 += 1, R124 += 1 };
  s1 -> s1 [74, 65535] { R178 += 1, R123 += 1, R124 += 1 };
  s2 -> s1 [0, 72] { R178 += 1, R123 += 1, R124 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R178 += 1, R122 += 1, R123 += 1 };
  s2 -> s3 [73, 73] { R178 += 1, R123 += 1, R124 += 1 };
  s2 -> s4 [73, 73] { R178 += 1, R123 += 1, R124 += 1 };
  s2 -> s1 [74, 65535] { R178 += 1, R123 += 1, R124 += 1 };
  s3 -> s3 [0, 65535] { R178 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R178 += 1 };
  s4 -> s4 [0, 65535] { R178 += 1, R123 += 1, R124 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R178 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton key1_18 {
  init s0;
  s0 -> s1 [0, 72] { R180 += 1, R129 += 1, R130 += 1 };
  s0 -> s0 [0, 65535] { R179 += 1, R180 += 1 };
  s0 -> s2 [0, 65535] { R180 += 1, R128 += 1, R129 += 1 };
  s0 -> s3 [73, 73] { R180 += 1, R129 += 1, R130 += 1 };
  s0 -> s4 [73, 73] { R180 += 1, R129 += 1, R130 += 1 };
  s0 -> s1 [74, 65535] { R180 += 1, R129 += 1, R130 += 1 };
  s1 -> s1 [0, 72] { R180 += 1, R129 += 1, R130 += 1 };
  s1 -> s1 [0, 65535] { R180 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R180 += 1, R129 += 1, R130 += 1 };
  s1 -> s4 [73, 73] { R180 += 1, R129 += 1, R130 += 1 };
  s1 -> s1 [74, 65535] { R180 += 1, R129 += 1, R130 += 1 };
  s2 -> s1 [0, 72] { R180 += 1, R129 += 1, R130 += 1 };
  s2 -> s2 [0, 65535] { R180 += 1, R128 += 1, R129 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R180 += 1, R129 += 1, R130 += 1 };
  s2 -> s4 [73, 73] { R180 += 1, R129 += 1, R130 += 1 };
  s2 -> s1 [74, 65535] { R180 += 1, R129 += 1, R130 += 1 };
  s3 -> s3 [0, 65535] { R180 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R180 += 1, R129 += 1, R130 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R180 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R180 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton key1_19 {
  init s0;
  s0 -> s1 [0, 72] { R182 += 1, R136 += 1, R137 += 1, R138 += 1 };
  s0 -> s0 [0, 65535] { R181 += 1, R182 += 1 };
  s0 -> s2 [0, 65535] { R182 += 1, R135 += 1, R136 += 1 };
  s0 -> s3 [73, 73] { R182 += 1, R136 += 1, R137 += 1, R138 += 1 };
  s0 -> s4 [73, 73] { R182 += 1, R136 += 1, R137 += 1, R138 += 1 };
  s0 -> s1 [74, 65535] { R182 += 1, R136 += 1, R137 += 1, R138 += 1 };
  s1 -> s1 [0, 72] { R182 += 1, R136 += 1, R137 += 1, R138 += 1 };
  s1 -> s1 [0, 65535] { R182 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R182 += 1, R136 += 1, R137 += 1, R138 += 1 };
  s1 -> s4 [73, 73] { R182 += 1, R136 += 1, R137 += 1, R138 += 1 };
  s1 -> s1 [74, 65535] { R182 += 1, R136 += 1, R137 += 1, R138 += 1 };
  s2 -> s1 [0, 72] { R182 += 1, R136 += 1, R137 += 1, R138 += 1 };
  s2 -> s2 [0, 65535] { R182 += 1, R135 += 1, R136 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R182 += 1, R136 += 1, R137 += 1, R138 += 1 };
  s2 -> s4 [73, 73] { R182 += 1, R136 += 1, R137 += 1, R138 += 1 };
  s2 -> s1 [74, 65535] { R182 += 1, R136 += 1, R137 += 1, R138 += 1 };
  s3 -> s3 [0, 65535] { R182 += 1, R136 += 1, R137 += 1, R138 += 1 };
  s3 -> s6 [0, 65535] { R182 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R182 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R182 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton key1_20 {
  init s0;
  s0 -> s1 [0, 72] { R184 += 1, R145 += 1, R146 += 1, R147 += 1 };
  s0 -> s2 [0, 65535] { R184 += 1, R144 += 1, R145 += 1 };
  s0 -> s0 [0, 65535] { R183 += 1, R184 += 1 };
  s0 -> s3 [73, 73] { R184 += 1, R145 += 1, R146 += 1, R147 += 1 };
  s0 -> s4 [73, 73] { R184 += 1, R145 += 1, R146 += 1, R147 += 1 };
  s0 -> s1 [74, 65535] { R184 += 1, R145 += 1, R146 += 1, R147 += 1 };
  s1 -> s1 [0, 72] { R184 += 1, R145 += 1, R146 += 1, R147 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R184 += 1 };
  s1 -> s3 [73, 73] { R184 += 1, R145 += 1, R146 += 1, R147 += 1 };
  s1 -> s4 [73, 73] { R184 += 1, R145 += 1, R146 += 1, R147 += 1 };
  s1 -> s1 [74, 65535] { R184 += 1, R145 += 1, R146 += 1, R147 += 1 };
  s2 -> s1 [0, 72] { R184 += 1, R145 += 1, R146 += 1, R147 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R184 += 1, R144 += 1, R145 += 1 };
  s2 -> s3 [73, 73] { R184 += 1, R145 += 1, R146 += 1, R147 += 1 };
  s2 -> s4 [73, 73] { R184 += 1, R145 += 1, R146 += 1, R147 += 1 };
  s2 -> s1 [74, 65535] { R184 += 1, R145 += 1, R146 += 1, R147 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R184 += 1 };
  s3 -> s3 [0, 65535] { R184 += 1, R145 += 1, R146 += 1, R147 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R184 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R184 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton key1_21 {
  init s0;
  s0 -> s1 [0, 65535] { R186 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R185 += 1, R186 += 1 };
  s1 -> s1 [0, 65535] { R186 += 1, R16 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton key1_22 {
  init s0;
  s0 -> s1 [0, 64] { R188 += 1 };
  s0 -> s0 [0, 65535] { R187 += 1, R188 += 1 };
  s0 -> s2 [65, 65] { R188 += 1 };
  s0 -> s3 [65, 65] { R188 += 1 };
  s0 -> s1 [74, 65535] { R188 += 1 };
  s1 -> s1 [0, 64] { R188 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R188 += 1 };
  s1 -> s3 [65, 65] { R188 += 1 };
  s1 -> s1 [74, 65535] { R188 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65] { R188 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [74, 65535] { R188 += 1 };
  accepting s0, s1, s2, s3;
};
automaton key1_23 {
  init s0;
  s0 -> s1 [0, 64] { R190 += 1, R61 += 1 };
  s0 -> s0 [0, 65535] { R189 += 1, R190 += 1 };
  s0 -> s2 [65, 65] { R190 += 1, R61 += 1 };
  s0 -> s3 [65, 65] { R190 += 1, R61 += 1 };
  s0 -> s1 [66, 65535] { R190 += 1, R61 += 1 };
  s1 -> s1 [0, 64] { R190 += 1, R61 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R190 += 1, R61 += 1 };
  s1 -> s3 [65, 65] { R190 += 1, R61 += 1 };
  s1 -> s1 [66, 65535] { R190 += 1, R61 += 1 };
  s2 -> s2 [0, 65535] { R190 += 1, R61 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton key1_24 {
  init s0;
  s0 -> s1 [0, 64] { R192 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R191 += 1, R192 += 1 };
  s0 -> s2 [65, 65] { R192 += 1, R63 += 1 };
  s0 -> s3 [65, 65] { R192 += 1, R63 += 1 };
  s0 -> s1 [66, 65535] { R192 += 1, R63 += 1 };
  s1 -> s1 [0, 64] { R192 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R192 += 1, R63 += 1 };
  s1 -> s3 [65, 65] { R192 += 1, R63 += 1 };
  s1 -> s1 [66, 65535] { R192 += 1, R63 += 1 };
  s2 -> s2 [0, 65535] { R192 += 1, R63 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton key1_25 {
  init s0;
  s0 -> s1 [0, 64] { R194 += 1, R65 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R193 += 1, R194 += 1 };
  s0 -> s2 [65, 65] { R194 += 1, R65 += 1, R66 += 1 };
  s0 -> s3 [65, 65] { R194 += 1, R65 += 1, R66 += 1 };
  s0 -> s1 [66, 65535] { R194 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 64] { R194 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R194 += 1, R65 += 1, R66 += 1 };
  s1 -> s3 [65, 65] { R194 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [66, 65535] { R194 += 1, R65 += 1, R66 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R194 += 1, R65 += 1, R66 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton key1_26 {
  init s0;
  s0 -> s1 [0, 64] { R196 += 1, R69 += 1, R70 += 1 };
  s0 -> s0 [0, 65535] { R195 += 1, R196 += 1 };
  s0 -> s2 [65, 65] { R196 += 1, R69 += 1, R70 += 1 };
  s0 -> s3 [65, 65] { R196 += 1, R69 += 1, R70 += 1 };
  s0 -> s1 [66, 65535] { R196 += 1, R69 += 1, R70 += 1 };
  s1 -> s1 [0, 64] { R196 += 1, R69 += 1, R70 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R196 += 1, R69 += 1, R70 += 1 };
  s1 -> s3 [65, 65] { R196 += 1, R69 += 1, R70 += 1 };
  s1 -> s1 [66, 65535] { R196 += 1, R69 += 1, R70 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R196 += 1, R69 += 1, R70 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton key1_27 {
  init s0;
  s0 -> s1 [0, 64] { R198 += 1, R75 += 1, R76 += 1 };
  s0 -> s0 [0, 65535] { R197 += 1, R198 += 1 };
  s0 -> s2 [65, 65] { R198 += 1, R75 += 1, R76 += 1 };
  s0 -> s3 [65, 65] { R198 += 1, R75 += 1, R76 += 1 };
  s0 -> s1 [66, 65535] { R198 += 1, R75 += 1, R76 += 1 };
  s1 -> s1 [0, 64] { R198 += 1, R75 += 1, R76 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R198 += 1, R75 += 1, R76 += 1 };
  s1 -> s3 [65, 65] { R198 += 1, R75 += 1, R76 += 1 };
  s1 -> s1 [66, 65535] { R198 += 1, R75 += 1, R76 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R198 += 1, R75 += 1, R76 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton key1_28 {
  init s0;
  s0 -> s1 [0, 64] { R200 += 1, R79 += 1, R80 += 1 };
  s0 -> s0 [0, 65535] { R199 += 1, R200 += 1 };
  s0 -> s2 [65, 65] { R200 += 1, R79 += 1, R80 += 1 };
  s0 -> s3 [65, 65] { R200 += 1, R79 += 1, R80 += 1 };
  s0 -> s1 [66, 65535] { R200 += 1, R79 += 1, R80 += 1 };
  s1 -> s1 [0, 64] { R200 += 1, R79 += 1, R80 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R200 += 1, R79 += 1, R80 += 1 };
  s1 -> s3 [65, 65] { R200 += 1, R79 += 1, R80 += 1 };
  s1 -> s1 [66, 65535] { R200 += 1, R79 += 1, R80 += 1 };
  s2 -> s2 [0, 65535] { R200 += 1, R79 += 1, R80 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton key1_29 {
  init s0;
  s0 -> s1 [0, 64] { R202 += 1, R85 += 1, R86 += 1 };
  s0 -> s0 [0, 65535] { R201 += 1, R202 += 1 };
  s0 -> s2 [65, 65] { R202 += 1, R85 += 1, R86 += 1 };
  s0 -> s3 [65, 65] { R202 += 1, R85 += 1, R86 += 1 };
  s0 -> s1 [66, 65535] { R202 += 1, R85 += 1, R86 += 1 };
  s1 -> s1 [0, 64] { R202 += 1, R85 += 1, R86 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R202 += 1, R85 += 1, R86 += 1 };
  s1 -> s3 [65, 65] { R202 += 1, R85 += 1, R86 += 1 };
  s1 -> s1 [66, 65535] { R202 += 1, R85 += 1, R86 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R202 += 1, R85 += 1, R86 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton key1_30 {
  init s0;
  s0 -> s1 [0, 64] { R204 += 1, R91 += 1, R92 += 1 };
  s0 -> s0 [0, 65535] { R203 += 1, R204 += 1 };
  s0 -> s2 [65, 65] { R204 += 1, R91 += 1, R92 += 1 };
  s0 -> s3 [65, 65] { R204 += 1, R91 += 1, R92 += 1 };
  s0 -> s1 [66, 65535] { R204 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 64] { R204 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R204 += 1, R91 += 1, R92 += 1 };
  s1 -> s3 [65, 65] { R204 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [66, 65535] { R204 += 1, R91 += 1, R92 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R204 += 1, R91 += 1, R92 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton key1_31 {
  init s0;
  s0 -> s1 [0, 64] { R206 += 1, R99 += 1, R100 += 1 };
  s0 -> s0 [0, 65535] { R205 += 1, R206 += 1 };
  s0 -> s2 [65, 65] { R206 += 1, R99 += 1, R100 += 1 };
  s0 -> s3 [65, 65] { R206 += 1, R99 += 1, R100 += 1 };
  s0 -> s1 [66, 65535] { R206 += 1, R99 += 1, R100 += 1 };
  s1 -> s1 [0, 64] { R206 += 1, R99 += 1, R100 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R206 += 1, R99 += 1, R100 += 1 };
  s1 -> s3 [65, 65] { R206 += 1, R99 += 1, R100 += 1 };
  s1 -> s1 [66, 65535] { R206 += 1, R99 += 1, R100 += 1 };
  s2 -> s2 [0, 65535] { R206 += 1, R99 += 1, R100 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton key1_32 {
  init s0;
  s0 -> s1 [0, 64] { R208 += 1, R109 += 1, R110 += 1 };
  s0 -> s0 [0, 65535] { R207 += 1, R208 += 1 };
  s0 -> s2 [65, 65] { R208 += 1, R109 += 1, R110 += 1 };
  s0 -> s3 [65, 65] { R208 += 1, R109 += 1, R110 += 1 };
  s0 -> s1 [66, 65535] { R208 += 1, R109 += 1, R110 += 1 };
  s1 -> s1 [0, 64] { R208 += 1, R109 += 1, R110 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R208 += 1, R109 += 1, R110 += 1 };
  s1 -> s3 [65, 65] { R208 += 1, R109 += 1, R110 += 1 };
  s1 -> s1 [66, 65535] { R208 += 1, R109 += 1, R110 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R208 += 1, R109 += 1, R110 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton key1_33 {
  init s0;
  s0 -> s1 [0, 64] { R210 += 1, R115 += 1, R116 += 1 };
  s0 -> s0 [0, 65535] { R209 += 1, R210 += 1 };
  s0 -> s2 [65, 65] { R210 += 1, R115 += 1, R116 += 1 };
  s0 -> s3 [65, 65] { R210 += 1, R115 += 1, R116 += 1 };
  s0 -> s1 [66, 65535] { R210 += 1, R115 += 1, R116 += 1 };
  s1 -> s1 [0, 64] { R210 += 1, R115 += 1, R116 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R210 += 1, R115 += 1, R116 += 1 };
  s1 -> s3 [65, 65] { R210 += 1, R115 += 1, R116 += 1 };
  s1 -> s1 [66, 65535] { R210 += 1, R115 += 1, R116 += 1 };
  s2 -> s2 [0, 65535] { R210 += 1, R115 += 1, R116 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton key1_34 {
  init s0;
  s0 -> s1 [0, 64] { R212 += 1, R119 += 1, R120 += 1 };
  s0 -> s0 [0, 65535] { R211 += 1, R212 += 1 };
  s0 -> s2 [65, 65] { R212 += 1, R119 += 1, R120 += 1 };
  s0 -> s3 [65, 65] { R212 += 1, R119 += 1, R120 += 1 };
  s0 -> s1 [66, 65535] { R212 += 1, R119 += 1, R120 += 1 };
  s1 -> s1 [0, 64] { R212 += 1, R119 += 1, R120 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R212 += 1, R119 += 1, R120 += 1 };
  s1 -> s3 [65, 65] { R212 += 1, R119 += 1, R120 += 1 };
  s1 -> s1 [66, 65535] { R212 += 1, R119 += 1, R120 += 1 };
  s2 -> s2 [0, 65535] { R212 += 1, R119 += 1, R120 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton key1_35 {
  init s0;
  s0 -> s1 [0, 64] { R214 += 1, R125 += 1, R126 += 1 };
  s0 -> s0 [0, 65535] { R213 += 1, R214 += 1 };
  s0 -> s2 [65, 65] { R214 += 1, R125 += 1, R126 += 1 };
  s0 -> s3 [65, 65] { R214 += 1, R125 += 1, R126 += 1 };
  s0 -> s1 [66, 65535] { R214 += 1, R125 += 1, R126 += 1 };
  s1 -> s1 [0, 64] { R214 += 1, R125 += 1, R126 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R214 += 1, R125 += 1, R126 += 1 };
  s1 -> s3 [65, 65] { R214 += 1, R125 += 1, R126 += 1 };
  s1 -> s1 [66, 65535] { R214 += 1, R125 += 1, R126 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R214 += 1, R125 += 1, R126 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton key1_36 {
  init s0;
  s0 -> s1 [0, 64] { R216 += 1, R131 += 1, R132 += 1 };
  s0 -> s0 [0, 65535] { R215 += 1, R216 += 1 };
  s0 -> s2 [65, 65] { R216 += 1, R131 += 1, R132 += 1 };
  s0 -> s3 [65, 65] { R216 += 1, R131 += 1, R132 += 1 };
  s0 -> s1 [66, 65535] { R216 += 1, R131 += 1, R132 += 1 };
  s1 -> s1 [0, 64] { R216 += 1, R131 += 1, R132 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R216 += 1, R131 += 1, R132 += 1 };
  s1 -> s3 [65, 65] { R216 += 1, R131 += 1, R132 += 1 };
  s1 -> s1 [66, 65535] { R216 += 1, R131 += 1, R132 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R216 += 1, R131 += 1, R132 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton key1_37 {
  init s0;
  s0 -> s1 [0, 64] { R218 += 1, R139 += 1, R140 += 1 };
  s0 -> s0 [0, 65535] { R217 += 1, R218 += 1 };
  s0 -> s2 [65, 65] { R218 += 1, R139 += 1, R140 += 1 };
  s0 -> s3 [65, 65] { R218 += 1, R139 += 1, R140 += 1 };
  s0 -> s1 [66, 65535] { R218 += 1, R139 += 1, R140 += 1 };
  s1 -> s1 [0, 64] { R218 += 1, R139 += 1, R140 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R218 += 1, R139 += 1, R140 += 1 };
  s1 -> s3 [65, 65] { R218 += 1, R139 += 1, R140 += 1 };
  s1 -> s1 [66, 65535] { R218 += 1, R139 += 1, R140 += 1 };
  s2 -> s2 [0, 65535] { R218 += 1, R139 += 1, R140 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
};
synchronised {  // Automata constraining P4
automaton P4_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining P12
automaton P12_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
constraint R2 = R170 && R62 + R61 + -1*R96 + -1*R92 = 0 && R77 + R75 = 0 && R78 + R76 + -1*R96 + -1*R92 = 0 && R84 + R81 + R124 + R121 + -1*R138 + -1*R134 - R94 - R98 = 0 && R95 + R91 = 0 && R97 + R93 + R137 + R133 = 0 && R153 = 0 && R154 = R170 && R163 = 0 && R164 = R170 && R169 = 0 && R9 < 1 && R64 + R63 < 1 && R90 + R87 + R130 + R127 < 1 && -1*R96 + -1*R92 < 1 && -1*R138 + -1*R134 - R94 - R98 < 1 && -1 < R170 && (R74 + R71 != 0 || ((R67 + R65 != 0 || R68 + R66 + -1*R96 + -1*R92 = 0 || R96 + R92 < 1) && (R67 + R65 = 0 || R96 + R92 < 1))) && (R74 + R71 != 0 || ((R72 + R69 != 0 || R73 + R70 + -1*R96 + -1*R92 = 0 || R96 + R92 < 1) && (R72 + R69 = 0 || R96 + R92 < 1))) && (R82 + R79 != 0 || R83 + R80 + -1*R96 + -1*R92 = 0 || (R74 + R71 = 0 && R96 + R92 = 0)) && (R88 + R85 != 0 || R89 + R86 + -1*R96 + -1*R92 = 0 || (R74 + R71 = 0 && R96 + R92 = 0)) && (R98 + R94 + R138 + R134 != 0 || R108 + R103 + R148 + R143 = 0 || (R106 + R101 + R146 + R141 = 0 && R107 + R102 + R147 + R142 = 0)) && (R104 + R99 != 0 || R96 + R92 + -1*R105 + -1*R100 = 0 || (R74 + R71 = 0 && R96 + R92 = 0)) && (R106 + R101 + R146 + R141 != 0 || R98 + R94 + R138 + R134 + -1*R147 + -1*R142 - R102 - R107 = 0 || R98 + R94 + R138 + R134 < 1) && (R149 != 0 || R150 = R170 || (R15 = 0 && R170 = 0)) && (R151 != 0 || R152 = R170 || (R15 = 0 && R170 = 0)) && (R155 != 0 || R156 = R170 || (R15 = 0 && R170 = 0)) && (R157 != 0 || R158 = R170 || (R15 = 0 && R170 = 0)) && (R159 != 0 || R160 = R170 || (R15 = 0 && R170 = 0)) && (R161 != 0 || R162 = R170 || (R15 = 0 && R170 = 0)) && (R165 != 0 || R166 = R170 || (R15 = 0 && R170 = 0)) && (R167 != 0 || R168 = R170 || (R15 = 0 && R170 = 0)) && (R171 != 0 || R170 = R172 || (R15 = 0 && R170 = 0)) && (R173 != 0 || R170 = R174 || (R15 = 0 && R170 = 0)) && (R175 != 0 || R170 = R176 || (R15 = 0 && R170 = 0)) && (R177 != 0 || R170 = R178 || (R15 = 0 && R170 = 0)) && (R179 != 0 || R170 = R180 || (R15 = 0 && R170 = 0)) && (R181 != 0 || R170 = R182 || (R15 = 0 && R170 = 0)) && (R183 != 0 || R170 = R184 || (R15 = 0 && R170 = 0)) && (R16 = 0 || (R185 = 0 && R186 = 0 && R187 = 0 && R188 = 0 && R189 = 0 && R190 = 0 && R191 = 0 && R192 = 0 && R193 = 0 && R194 = 0 && R195 = 0 && R196 = 0 && R197 = 0 && R198 = 0 && R199 = 0 && R200 = 0 && R201 = 0 && R202 = 0 && R203 = 0 && R204 = 0 && R205 = 0 && R206 = 0 && R207 = 0 && R208 = 0 && R209 = 0 && R210 = 0 && R211 = 0 && R212 = 0 && R213 = 0 && R214 = 0 && R215 = 0 && R216 = 0 && R217 = 0 && R218 = 0)) && (R74 + R71 = 0 || (R67 + R65 = 0 && R68 + R66 + -1*R96 + -1*R92 = 0)) && (R74 + R71 = 0 || (R72 + R69 = 0 && R73 + R70 + -1*R96 + -1*R92 = 0)) && (R82 + R79 = 0 || (R74 + R71 = 0 && R96 + R92 = 0)) && (R88 + R85 = 0 || (R74 + R71 = 0 && R96 + R92 = 0)) && (R104 + R99 = 0 || (R74 + R71 = 0 && R96 + R92 = 0)) && (R106 + R101 + R146 + R141 = 0 || R98 + R94 + R138 + R134 < 1) && (R114 + R111 = 0 || (R112 + R109 = 0 && R113 + R110 = 0)) && (R114 + R111 = 0 || (R117 + R115 = 0 && R118 + R116 = 0)) && (R114 + R111 = 0 || (R122 + R119 = 0 && R123 + R120 = 0)) && (R114 + R111 = 0 || (R128 + R125 = 0 && R129 + R126 = 0)) && (R114 + R111 = 0 || (R135 + R131 = 0 && R136 + R132 = 0)) && (R114 + R111 = 0 || (R144 + R139 = 0 && R145 + R140 = 0)) && (R149 = 0 || (R15 = 0 && R170 = 0)) && (R151 = 0 || (R15 = 0 && R170 = 0)) && (R155 = 0 || (R15 = 0 && R170 = 0)) && (R157 = 0 || (R15 = 0 && R170 = 0)) && (R159 = 0 || (R15 = 0 && R170 = 0)) && (R161 = 0 || (R15 = 0 && R170 = 0)) && (R165 = 0 || (R15 = 0 && R170 = 0)) && (R167 = 0 || (R15 = 0 && R170 = 0)) && (R171 = 0 || (R15 = 0 && R170 = 0)) && (R173 = 0 || (R15 = 0 && R170 = 0)) && (R175 = 0 || (R15 = 0 && R170 = 0)) && (R177 = 0 || (R15 = 0 && R170 = 0)) && (R179 = 0 || (R15 = 0 && R170 = 0)) && (R181 = 0 || (R15 = 0 && R170 = 0)) && (R183 = 0 || (R15 = 0 && R170 = 0));
// End of Parikh automata intersection problem
