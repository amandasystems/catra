// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R2, R3, R4, R5, R6;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R0 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R2 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1, R4 += 1 };
  s0 -> s1 [32, 32] { R4 += 1 };
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 65535] { R6 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R5 += 1, R6 += 1 };
  s1 -> s1 [0, 65535] { R6 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
};
constraint R0 = 1 && R3 = 0 && R4 = 1 && R5 = 0 && R6 = 1 && R2 < 1;
// End of Parikh automata intersection problem
