// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R13, R17, R18, R2, R232, R233, R234, R235, R236, R237, R238, R239, R240, R241, R242, R243, R244, R245, R246, R247, R248, R249, R250, R251, R252, R3, R317, R318, R319, R320, R321, R322, R323, R324, R325, R326, R327, R328, R329, R330, R331, R332, R333, R334, R335, R336, R337, R338, R339, R340, R341, R342, R343, R344, R345, R346, R347, R348, R349, R350, R351, R352, R353, R354, R355, R356, R357, R358, R359, R360, R361, R362, R363, R364, R365, R366, R367, R368, R369, R370, R371, R372, R373, R374, R375, R376, R377, R378, R379, R380, R4, R5, R6, R7, R8, R9;
synchronised {  // Automata constraining value1
automaton value1_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 60];
  s0 -> s1 [61, 61];
  s0 -> s0 [62, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 65535];
  accepting s1;
};
automaton value1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton value1_2 {
  init s0;
  s0 -> s1 [0, 60] { R18 += 1 };
  s0 -> s0 [0, 65535] { R17 += 1, R18 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535] { R18 += 1 };
  s1 -> s1 [0, 60] { R18 += 1 };
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535] { R18 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value1_3 {
  init s0;
  s0 -> s1 [0, 65535] { R252 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R251 += 1, R252 += 1 };
  s1 -> s1 [0, 65535] { R252 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_4 {
  init s0;
  s0 -> s1 [0, 64] { R348 += 1 };
  s0 -> s0 [0, 65535] { R347 += 1, R348 += 1 };
  s0 -> s2 [68, 68] { R348 += 1 };
  s0 -> s1 [69, 65535] { R348 += 1 };
  s1 -> s1 [0, 64] { R348 += 1 };
  s1 -> s2 [68, 68] { R348 += 1 };
  s1 -> s1 [69, 65535] { R348 += 1 };
  s2 -> s2 [0, 64] { R348 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [68, 65535] { R348 += 1 };
  accepting s2;
};
automaton value1_5 {
  init s0;
  s0 -> s0 [0, 65535] { R349 += 1, R350 += 1 };
  s0 -> s1 [0, 65535] { R350 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R350 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_6 {
  init s0;
  s0 -> s1 [0, 67] { R352 += 1 };
  s0 -> s0 [0, 65535] { R351 += 1, R352 += 1 };
  s0 -> s2 [0, 65535] { R352 += 1, R13 += 1 };
  s0 -> s3 [68, 68] { R352 += 1 };
  s0 -> s1 [69, 65535] { R352 += 1 };
  s1 -> s1 [0, 67] { R352 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [68, 68] { R352 += 1 };
  s1 -> s1 [69, 65535] { R352 += 1 };
  s2 -> s1 [0, 67] { R352 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R352 += 1, R13 += 1 };
  s2 -> s3 [68, 68] { R352 += 1 };
  s2 -> s1 [69, 65535] { R352 += 1 };
  s3 -> s3 [0, 65535] { R352 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value1_7 {
  init s0;
  s0 -> s1 [0, 8] { R354 += 1, R244 += 1 };
  s0 -> s0 [0, 65535] { R353 += 1, R354 += 1 };
  s0 -> s2 [0, 65535] { R354 += 1, R243 += 1, R244 += 1 };
  s0 -> s3 [9, 13] { R354 += 1, R244 += 1 };
  s0 -> s1 [14, 31] { R354 += 1, R244 += 1 };
  s0 -> s3 [32, 32] { R354 += 1, R244 += 1 };
  s0 -> s1 [33, 65535] { R354 += 1, R244 += 1 };
  s1 -> s5 [0, 65535] { R354 += 1 };
  s1 -> s1 [0, 65535] { R354 += 1, R244 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R354 += 1, R244 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R354 += 1, R243 += 1, R244 += 1 };
  s2 -> s3 [9, 13] { R354 += 1, R244 += 1 };
  s2 -> s1 [14, 31] { R354 += 1, R244 += 1 };
  s2 -> s3 [32, 32] { R354 += 1, R244 += 1 };
  s2 -> s1 [33, 65535] { R354 += 1, R244 += 1 };
  s3 -> s1 [0, 65535] { R354 += 1, R244 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R354 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value1_8 {
  init s0;
  s0 -> s1 [0, 65535] { R356 += 1, R246 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R355 += 1, R356 += 1 };
  s0 -> s2 [0, 65535] { R356 += 1, R245 += 1, R246 += 1 };
  s1 -> s4 [0, 65535] { R356 += 1 };
  s1 -> s1 [0, 65535] { R356 += 1, R246 += 1, R7 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R356 += 1, R246 += 1, R7 += 1 };
  s2 -> s2 [0, 65535] { R356 += 1, R245 += 1, R246 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R356 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_9 {
  init s0;
  s0 -> s1 [0, 8] { R358 += 1, R248 += 1 };
  s0 -> s0 [0, 65535] { R357 += 1, R358 += 1 };
  s0 -> s2 [0, 65535] { R358 += 1, R247 += 1, R248 += 1 };
  s0 -> s3 [9, 13] { R358 += 1, R248 += 1 };
  s0 -> s1 [14, 31] { R358 += 1, R248 += 1 };
  s0 -> s3 [32, 32] { R358 += 1, R248 += 1 };
  s0 -> s1 [33, 65535] { R358 += 1, R248 += 1 };
  s1 -> s1 [0, 65535] { R358 += 1, R248 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R358 += 1 };
  s2 -> s1 [0, 8] { R358 += 1, R248 += 1 };
  s2 -> s2 [0, 65535] { R358 += 1, R247 += 1, R248 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R358 += 1, R248 += 1 };
  s2 -> s1 [14, 31] { R358 += 1, R248 += 1 };
  s2 -> s3 [32, 32] { R358 += 1, R248 += 1 };
  s2 -> s1 [33, 65535] { R358 += 1, R248 += 1 };
  s3 -> s1 [0, 65535] { R358 += 1, R248 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R358 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value1_10 {
  init s0;
  s0 -> s1 [0, 65535] { R360 += 1, R249 += 1, R250 += 1 };
  s0 -> s2 [0, 65535] { R360 += 1, R250 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R359 += 1, R360 += 1 };
  s1 -> s1 [0, 65535] { R360 += 1, R249 += 1, R250 += 1 };
  s1 -> s2 [0, 65535] { R360 += 1, R250 += 1, R8 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R360 += 1, R250 += 1, R8 += 1 };
  s2 -> s3 [0, 65535] { R360 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R360 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_11 {
  init s0;
  s0 -> s0 [0, 65535] { R361 += 1, R362 += 1 };
  s0 -> s1 [0, 65535] { R362 += 1, R324 += 1, R234 += 1 };
  s0 -> s2 [0, 65535] { R362 += 1, R323 += 1, R324 += 1 };
  s1 -> s1 [0, 65535] { R362 += 1, R324 += 1, R234 += 1 };
  s1 -> s4 [0, 65535] { R362 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R362 += 1, R324 += 1, R234 += 1 };
  s2 -> s2 [0, 65535] { R362 += 1, R323 += 1, R324 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R362 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_12 {
  init s0;
  s0 -> s1 [0, 67] { R364 += 1, R326 += 1 };
  s0 -> s2 [0, 65535] { R364 += 1, R325 += 1, R326 += 1 };
  s0 -> s0 [0, 65535] { R363 += 1, R364 += 1 };
  s0 -> s3 [68, 68] { R364 += 1, R326 += 1 };
  s0 -> s4 [68, 68] { R364 += 1, R326 += 1 };
  s0 -> s1 [80, 65535] { R364 += 1, R326 += 1 };
  s1 -> s1 [0, 67] { R364 += 1, R326 += 1 };
  s1 -> s1 [0, 65535] { R364 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [68, 68] { R364 += 1, R326 += 1 };
  s1 -> s4 [68, 68] { R364 += 1, R326 += 1 };
  s1 -> s1 [80, 65535] { R364 += 1, R326 += 1 };
  s2 -> s1 [0, 67] { R364 += 1, R326 += 1 };
  s2 -> s2 [0, 65535] { R364 += 1, R325 += 1, R326 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [68, 68] { R364 += 1, R326 += 1 };
  s2 -> s4 [68, 68] { R364 += 1, R326 += 1 };
  s2 -> s1 [80, 65535] { R364 += 1, R326 += 1 };
  s3 -> s3 [0, 68] { R364 += 1, R326 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R364 += 1 };
  s3 -> s3 [80, 65535] { R364 += 1, R326 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R364 += 1 };
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value1_13 {
  init s0;
  s0 -> s1 [0, 67] { R366 += 1, R332 += 1 };
  s0 -> s0 [0, 65535] { R365 += 1, R366 += 1 };
  s0 -> s2 [0, 65535] { R366 += 1, R331 += 1, R332 += 1 };
  s0 -> s3 [68, 68] { R366 += 1, R332 += 1 };
  s0 -> s1 [69, 65535] { R366 += 1, R332 += 1 };
  s1 -> s1 [0, 67] { R366 += 1, R332 += 1 };
  s1 -> s3 [68, 68] { R366 += 1, R332 += 1 };
  s1 -> s1 [69, 65535] { R366 += 1, R332 += 1 };
  s2 -> s1 [0, 67] { R366 += 1, R332 += 1 };
  s2 -> s2 [0, 65535] { R366 += 1, R331 += 1, R332 += 1 };
  s2 -> s3 [68, 68] { R366 += 1, R332 += 1 };
  s2 -> s1 [69, 65535] { R366 += 1, R332 += 1 };
  s3 -> s3 [0, 65535] { R366 += 1, R332 += 1 };
  s3 -> s4 [0, 65535] { R366 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R366 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
automaton value1_14 {
  init s0;
  s0 -> s1 [0, 65535] { R368 += 1, R333 += 1, R334 += 1 };
  s0 -> s0 [0, 65535] { R367 += 1, R368 += 1 };
  s0 -> s2 [0, 65535] { R368 += 1, R334 += 1, R2 += 1 };
  s1 -> s1 [0, 65535] { R368 += 1, R333 += 1, R334 += 1 };
  s1 -> s2 [0, 65535] { R368 += 1, R334 += 1, R2 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R368 += 1, R334 += 1, R2 += 1 };
  s2 -> s3 [0, 65535] { R368 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R368 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_15 {
  init s0;
  s0 -> s1 [0, 67] { R370 += 1, R336 += 1 };
  s0 -> s0 [0, 65535] { R369 += 1, R370 += 1 };
  s0 -> s2 [0, 65535] { R370 += 1, R336 += 1, R10 += 1 };
  s0 -> s3 [0, 65535] { R370 += 1, R335 += 1, R336 += 1 };
  s0 -> s4 [68, 68] { R370 += 1, R336 += 1 };
  s0 -> s1 [69, 65535] { R370 += 1, R336 += 1 };
  s1 -> s1 [0, 67] { R370 += 1, R336 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R370 += 1 };
  s1 -> s4 [68, 68] { R370 += 1, R336 += 1 };
  s1 -> s1 [69, 65535] { R370 += 1, R336 += 1 };
  s2 -> s1 [0, 67] { R370 += 1, R336 += 1 };
  s2 -> s2 [0, 65535] { R370 += 1, R336 += 1, R10 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R370 += 1 };
  s2 -> s4 [68, 68] { R370 += 1, R336 += 1 };
  s2 -> s1 [69, 65535] { R370 += 1, R336 += 1 };
  s3 -> s1 [0, 67] { R370 += 1, R336 += 1 };
  s3 -> s2 [0, 65535] { R370 += 1, R336 += 1, R10 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R370 += 1, R335 += 1, R336 += 1 };
  s3 -> s4 [68, 68] { R370 += 1, R336 += 1 };
  s3 -> s1 [69, 65535] { R370 += 1, R336 += 1 };
  s4 -> s4 [0, 65535] { R370 += 1, R336 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R370 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton value1_16 {
  init s0;
  s0 -> s1 [0, 67] { R372 += 1, R338 += 1, R318 += 1 };
  s0 -> s2 [0, 65535] { R372 += 1, R338 += 1, R317 += 1, R318 += 1 };
  s0 -> s3 [0, 65535] { R372 += 1, R337 += 1, R338 += 1 };
  s0 -> s0 [0, 65535] { R371 += 1, R372 += 1 };
  s0 -> s1 [69, 65535] { R372 += 1, R338 += 1, R318 += 1 };
  s1 -> s1 [0, 67] { R372 += 1, R338 += 1, R318 += 1 };
  s1 -> s5 [0, 65535] { R372 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R372 += 1, R338 += 1 };
  s1 -> s1 [69, 65535] { R372 += 1, R338 += 1, R318 += 1 };
  s2 -> s1 [0, 67] { R372 += 1, R338 += 1, R318 += 1 };
  s2 -> s2 [0, 65535] { R372 += 1, R338 += 1, R317 += 1, R318 += 1 };
  s2 -> s5 [0, 65535] { R372 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [69, 65535] { R372 += 1, R338 += 1, R318 += 1 };
  s3 -> s1 [0, 67] { R372 += 1, R338 += 1, R318 += 1 };
  s3 -> s2 [0, 65535] { R372 += 1, R338 += 1, R317 += 1, R318 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R372 += 1, R337 += 1, R338 += 1 };
  s3 -> s1 [69, 65535] { R372 += 1, R338 += 1, R318 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R372 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value1_17 {
  init s0;
  s0 -> s0 [0, 65535] { R373 += 1, R374 += 1 };
  s0 -> s1 [0, 65535] { R374 += 1, R340 += 1, R319 += 1, R320 += 1 };
  s0 -> s2 [0, 65535] { R374 += 1, R339 += 1, R340 += 1 };
  s0 -> s3 [0, 65535] { R374 += 1, R340 += 1, R320 += 1, R232 += 1 };
  s1 -> s4 [0, 65535] { R374 += 1 };
  s1 -> s1 [0, 65535] { R374 += 1, R340 += 1, R319 += 1, R320 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [0, 65535] { R374 += 1, R340 += 1, R320 += 1, R232 += 1 };
  s2 -> s1 [0, 65535] { R374 += 1, R340 += 1, R319 += 1, R320 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R374 += 1, R339 += 1, R340 += 1 };
  s2 -> s3 [0, 65535] { R374 += 1, R340 += 1, R320 += 1, R232 += 1 };
  s3 -> s4 [0, 65535] { R374 += 1 };
  s3 -> s5 [0, 65535] { R374 += 1, R340 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R374 += 1, R340 += 1, R320 += 1, R232 += 1 };
  s4 -> s4 [0, 65535] { R374 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s4 [0, 65535] { R374 += 1 };
  s5 -> s5 [0, 65535] { R374 += 1, R340 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value1_18 {
  init s0;
  s0 -> s1 [0, 68] { R376 += 1, R342 += 1, R322 += 1 };
  s0 -> s2 [0, 65535] { R376 += 1, R342 += 1, R321 += 1, R322 += 1 };
  s0 -> s3 [0, 65535] { R376 += 1, R341 += 1, R342 += 1 };
  s0 -> s0 [0, 65535] { R375 += 1, R376 += 1 };
  s0 -> s4 [79, 79] { R376 += 1, R342 += 1, R322 += 1 };
  s0 -> s1 [80, 65535] { R376 += 1, R342 += 1, R322 += 1 };
  s1 -> s1 [0, 68] { R376 += 1, R342 += 1, R322 += 1 };
  s1 -> s4 [79, 79] { R376 += 1, R342 += 1, R322 += 1 };
  s1 -> s1 [80, 65535] { R376 += 1, R342 += 1, R322 += 1 };
  s2 -> s1 [0, 68] { R376 += 1, R342 += 1, R322 += 1 };
  s2 -> s2 [0, 65535] { R376 += 1, R342 += 1, R321 += 1, R322 += 1 };
  s2 -> s4 [79, 79] { R376 += 1, R342 += 1, R322 += 1 };
  s2 -> s1 [80, 65535] { R376 += 1, R342 += 1, R322 += 1 };
  s3 -> s1 [0, 68] { R376 += 1, R342 += 1, R322 += 1 };
  s3 -> s2 [0, 65535] { R376 += 1, R342 += 1, R321 += 1, R322 += 1 };
  s3 -> s3 [0, 65535] { R376 += 1, R341 += 1, R342 += 1 };
  s3 -> s4 [79, 79] { R376 += 1, R342 += 1, R322 += 1 };
  s3 -> s1 [80, 65535] { R376 += 1, R342 += 1, R322 += 1 };
  s4 -> s4 [0, 68] { R376 += 1, R342 += 1, R322 += 1 };
  s4 -> s4 [0, 65535] { R376 += 1, R342 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R376 += 1 };
  s4 -> s4 [79, 65535] { R376 += 1, R342 += 1, R322 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R376 += 1 };
  accepting s4, s5, s6;
};
automaton value1_19 {
  init s0;
  s0 -> s0 [0, 65535] { R377 += 1, R378 += 1 };
  s0 -> s1 [0, 65535] { R378 += 1, R344 += 1, R328 += 1, R233 += 1 };
  s0 -> s2 [0, 65535] { R378 += 1, R344 += 1, R327 += 1, R328 += 1 };
  s0 -> s3 [0, 65535] { R378 += 1, R343 += 1, R344 += 1 };
  s1 -> s6 [0, 65535] { R378 += 1, R344 += 1 };
  s1 -> s5 [0, 65535] { R378 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R378 += 1, R344 += 1, R328 += 1, R233 += 1 };
  s2 -> s5 [0, 65535] { R378 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R378 += 1, R344 += 1, R328 += 1, R233 += 1 };
  s2 -> s2 [0, 65535] { R378 += 1, R344 += 1, R327 += 1, R328 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R378 += 1, R344 += 1, R328 += 1, R233 += 1 };
  s3 -> s2 [0, 65535] { R378 += 1, R344 += 1, R327 += 1, R328 += 1 };
  s3 -> s3 [0, 65535] { R378 += 1, R343 += 1, R344 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R378 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R378 += 1, R344 += 1 };
  s6 -> s5 [0, 65535] { R378 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value1_20 {
  init s0;
  s0 -> s1 [0, 67] { R380 += 1, R346 += 1, R330 += 1 };
  s0 -> s0 [0, 65535] { R379 += 1, R380 += 1 };
  s0 -> s2 [0, 65535] { R380 += 1, R346 += 1, R329 += 1, R330 += 1 };
  s0 -> s3 [0, 65535] { R380 += 1, R345 += 1, R346 += 1 };
  s0 -> s4 [68, 68] { R380 += 1, R346 += 1, R330 += 1 };
  s0 -> s5 [68, 68] { R380 += 1, R346 += 1, R330 += 1 };
  s0 -> s1 [80, 65535] { R380 += 1, R346 += 1, R330 += 1 };
  s1 -> s1 [0, 67] { R380 += 1, R346 += 1, R330 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R380 += 1 };
  s1 -> s1 [0, 65535] { R380 += 1, R346 += 1 };
  s1 -> s4 [68, 68] { R380 += 1, R346 += 1, R330 += 1 };
  s1 -> s5 [68, 68] { R380 += 1, R346 += 1, R330 += 1 };
  s1 -> s1 [80, 65535] { R380 += 1, R346 += 1, R330 += 1 };
  s2 -> s1 [0, 67] { R380 += 1, R346 += 1, R330 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s7 [0, 65535] { R380 += 1 };
  s2 -> s2 [0, 65535] { R380 += 1, R346 += 1, R329 += 1, R330 += 1 };
  s2 -> s4 [68, 68] { R380 += 1, R346 += 1, R330 += 1 };
  s2 -> s5 [68, 68] { R380 += 1, R346 += 1, R330 += 1 };
  s2 -> s1 [80, 65535] { R380 += 1, R346 += 1, R330 += 1 };
  s3 -> s1 [0, 67] { R380 += 1, R346 += 1, R330 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s2 [0, 65535] { R380 += 1, R346 += 1, R329 += 1, R330 += 1 };
  s3 -> s3 [0, 65535] { R380 += 1, R345 += 1, R346 += 1 };
  s3 -> s4 [68, 68] { R380 += 1, R346 += 1, R330 += 1 };
  s3 -> s5 [68, 68] { R380 += 1, R346 += 1, R330 += 1 };
  s3 -> s1 [80, 65535] { R380 += 1, R346 += 1, R330 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R380 += 1, R346 += 1 };
  s4 -> s7 [0, 65535] { R380 += 1 };
  s5 -> s5 [0, 68] { R380 += 1, R346 += 1, R330 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R380 += 1, R346 += 1 };
  s5 -> s7 [0, 65535] { R380 += 1 };
  s5 -> s5 [80, 65535] { R380 += 1, R346 += 1, R330 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R380 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s0 [91, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R9 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 8] { R236 += 1 };
  s0 -> s0 [0, 65535] { R235 += 1, R236 += 1 };
  s0 -> s2 [9, 13] { R236 += 1 };
  s0 -> s1 [14, 31] { R236 += 1 };
  s0 -> s2 [32, 32] { R236 += 1 };
  s0 -> s1 [33, 65535] { R236 += 1 };
  s1 -> s1 [0, 65535] { R236 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R236 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 65535] { R238 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R237 += 1, R238 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R238 += 1, R5 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 8] { R240 += 1 };
  s0 -> s0 [0, 65535] { R239 += 1, R240 += 1 };
  s0 -> s2 [9, 13] { R240 += 1 };
  s0 -> s1 [14, 31] { R240 += 1 };
  s0 -> s2 [32, 32] { R240 += 1 };
  s0 -> s1 [33, 65535] { R240 += 1 };
  s1 -> s1 [0, 65535] { R240 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R240 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_6 {
  init s0;
  s0 -> s0 [0, 65535] { R241 += 1, R242 += 1 };
  s0 -> s1 [0, 65535] { R242 += 1, R6 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R242 += 1, R6 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
};
synchronised {  // Automata constraining P65
automaton P65_0 {
  init s0;
  s0 -> s1 [100, 100];
  accepting s1;
};
};
constraint R2 = R322 && R3 = R346 && R4 = R252 && R17 = 0 && R18 = R380 && R243 - R346 = -1 && R244 = R346 && R245 - R346 = -1 && R246 = R346 && R247 = 0 && R248 = 1 && R249 = 0 && R250 = 1 && R251 - R380 = 1 && R321 = 0 && R331 = 0 && R332 = R346 && R333 = 0 && R334 = R346 && R335 = 0 && R336 = R346 && R337 = 0 && R338 = R346 && R339 = 0 && R340 = R346 && R341 = 0 && R342 = R346 && R343 = 0 && R344 = R346 && R345 = 0 && R347 = 0 && R348 = R380 && R349 = 0 && R350 = R380 && R351 = 0 && R352 = R380 && R353 = 0 && R354 = R380 && R355 = 0 && R356 = R380 && R357 = 0 && R358 = R380 && R359 = 0 && R360 = R380 && R361 = 0 && R362 = R380 && R363 = 0 && R364 = R380 && R365 = 0 && R366 = R380 && R367 = 0 && R368 = R380 && R369 = 0 && R370 = R380 && R371 = 0 && R372 = R380 && R373 = 0 && R374 = R380 && R375 = 0 && R376 = R380 && R377 = 0 && R378 = R380 && R379 = 0 && R0 != 0 && R1 != 0 && R9 < 1 && R10 < 1 && R13 < 1 && R380 < R252 && -1 < R322 && 0 < R346 && -1 < R380 && (R5 != 0 || ((R1 != R236 || R235 - R236 = -1 || R236 < 0) && (R1 = R236 || R1 < 1))) && (R5 != 0 || ((R1 != R238 || R237 - R238 = -1 || R238 < 0) && (R1 = R238 || R1 < 1))) && (R239 != 0 || ((R6 != 0 || ((R1 != R240 || R240 = 1 || R240 < 0) && (R1 = R240 || R240 = 1 || R1 < 1))) && (R6 = 0 || ((R1 != R240 || R240 = 1 || R240 < 0) && (R240 != 1 || -1 < R1) && (R1 = R240 || R240 = 1))))) && (R241 != 0 || ((R6 != 0 || ((R1 != R242 || R242 = 1 || R242 < 0) && (R1 = R242 || R242 = 1 || R1 < 1))) && (R6 = 0 || ((R1 != R242 || R242 = 1 || R242 < 0) && (R242 != 1 || -1 < R1) && (R1 = R242 || R242 = 1))))) && (R317 != 0 || R318 = R322 || (R232 = 0 && R322 = 0)) && (R319 != 0 || R320 = R322 || (R232 = 0 && R322 = 0)) && (R5 = 0 || (R1 = R236 && R235 - R236 = -1)) && (R5 = 0 || (R1 = R238 && R237 - R238 = -1)) && (R233 = 0 || (R327 = 0 && R328 = 0)) && (R233 = 0 || (R329 = 0 && R330 = 0)) && (R234 = 0 || (R323 = 0 && R324 = 0)) && (R234 = 0 || (R325 = 0 && R326 = 0)) && (R239 = 0 || (R6 = 0 && R1 < 0)) && (R241 = 0 || (R6 = 0 && R1 < 0)) && (R317 = 0 || (R232 = 0 && R322 = 0)) && (R319 = 0 || (R232 = 0 && R322 = 0));
// End of Parikh automata intersection problem
