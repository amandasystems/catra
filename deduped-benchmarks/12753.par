// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R13, R17, R18, R2, R232, R233, R234, R235, R236, R237, R238, R239, R240, R241, R242, R243, R244, R245, R246, R247, R248, R249, R250, R251, R252, R253, R254, R255, R256, R257, R258, R259, R260, R261, R262, R263, R264, R265, R266, R267, R268, R269, R270, R271, R272, R273, R274, R275, R276, R277, R278, R279, R280, R281, R282, R283, R284, R285, R286, R287, R288, R289, R290, R291, R292, R293, R294, R295, R296, R297, R298, R299, R3, R300, R301, R302, R303, R304, R305, R306, R307, R308, R309, R310, R311, R312, R313, R314, R315, R316, R4, R5, R6, R7, R8, R9;
synchronised {  // Automata constraining value1
automaton value1_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 60];
  s0 -> s1 [61, 61];
  s0 -> s0 [62, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 65535];
  accepting s1;
};
automaton value1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton value1_2 {
  init s0;
  s0 -> s1 [0, 60] { R18 += 1 };
  s0 -> s0 [0, 65535] { R17 += 1, R18 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535] { R18 += 1 };
  s1 -> s1 [0, 60] { R18 += 1 };
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535] { R18 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value1_3 {
  init s0;
  s0 -> s1 [0, 65535] { R252 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R251 += 1, R252 += 1 };
  s1 -> s1 [0, 65535] { R252 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_4 {
  init s0;
  s0 -> s1 [0, 64] { R284 += 1 };
  s0 -> s0 [0, 65535] { R283 += 1, R284 += 1 };
  s0 -> s2 [68, 68] { R284 += 1 };
  s0 -> s1 [69, 65535] { R284 += 1 };
  s1 -> s1 [0, 64] { R284 += 1 };
  s1 -> s2 [68, 68] { R284 += 1 };
  s1 -> s1 [69, 65535] { R284 += 1 };
  s2 -> s2 [0, 64] { R284 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [68, 65535] { R284 += 1 };
  accepting s2;
};
automaton value1_5 {
  init s0;
  s0 -> s0 [0, 65535] { R285 += 1, R286 += 1 };
  s0 -> s1 [0, 65535] { R286 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R286 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_6 {
  init s0;
  s0 -> s1 [0, 67] { R288 += 1 };
  s0 -> s2 [0, 65535] { R288 += 1, R13 += 1 };
  s0 -> s0 [0, 65535] { R287 += 1, R288 += 1 };
  s0 -> s3 [68, 68] { R288 += 1 };
  s0 -> s1 [69, 65535] { R288 += 1 };
  s1 -> s1 [0, 67] { R288 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [68, 68] { R288 += 1 };
  s1 -> s1 [69, 65535] { R288 += 1 };
  s2 -> s1 [0, 67] { R288 += 1 };
  s2 -> s2 [0, 65535] { R288 += 1, R13 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [68, 68] { R288 += 1 };
  s2 -> s1 [69, 65535] { R288 += 1 };
  s3 -> s3 [0, 65535] { R288 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value1_7 {
  init s0;
  s0 -> s1 [0, 8] { R290 += 1, R244 += 1 };
  s0 -> s0 [0, 65535] { R289 += 1, R290 += 1 };
  s0 -> s2 [0, 65535] { R290 += 1, R243 += 1, R244 += 1 };
  s0 -> s3 [9, 13] { R290 += 1, R244 += 1 };
  s0 -> s1 [14, 31] { R290 += 1, R244 += 1 };
  s0 -> s3 [32, 32] { R290 += 1, R244 += 1 };
  s0 -> s1 [33, 65535] { R290 += 1, R244 += 1 };
  s1 -> s5 [0, 65535] { R290 += 1 };
  s1 -> s1 [0, 65535] { R290 += 1, R244 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R290 += 1, R244 += 1 };
  s2 -> s2 [0, 65535] { R290 += 1, R243 += 1, R244 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R290 += 1, R244 += 1 };
  s2 -> s1 [14, 31] { R290 += 1, R244 += 1 };
  s2 -> s3 [32, 32] { R290 += 1, R244 += 1 };
  s2 -> s1 [33, 65535] { R290 += 1, R244 += 1 };
  s3 -> s1 [0, 65535] { R290 += 1, R244 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R290 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value1_8 {
  init s0;
  s0 -> s1 [0, 65535] { R292 += 1, R245 += 1, R246 += 1 };
  s0 -> s0 [0, 65535] { R291 += 1, R292 += 1 };
  s0 -> s2 [0, 65535] { R292 += 1, R246 += 1, R7 += 1 };
  s1 -> s1 [0, 65535] { R292 += 1, R245 += 1, R246 += 1 };
  s1 -> s2 [0, 65535] { R292 += 1, R246 += 1, R7 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R292 += 1, R246 += 1, R7 += 1 };
  s2 -> s3 [0, 65535] { R292 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R292 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_9 {
  init s0;
  s0 -> s1 [0, 8] { R294 += 1, R248 += 1 };
  s0 -> s0 [0, 65535] { R293 += 1, R294 += 1 };
  s0 -> s2 [0, 65535] { R294 += 1, R247 += 1, R248 += 1 };
  s0 -> s3 [9, 13] { R294 += 1, R248 += 1 };
  s0 -> s1 [14, 31] { R294 += 1, R248 += 1 };
  s0 -> s3 [32, 32] { R294 += 1, R248 += 1 };
  s0 -> s1 [33, 65535] { R294 += 1, R248 += 1 };
  s1 -> s5 [0, 65535] { R294 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R294 += 1, R248 += 1 };
  s2 -> s1 [0, 8] { R294 += 1, R248 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R294 += 1, R247 += 1, R248 += 1 };
  s2 -> s3 [9, 13] { R294 += 1, R248 += 1 };
  s2 -> s1 [14, 31] { R294 += 1, R248 += 1 };
  s2 -> s3 [32, 32] { R294 += 1, R248 += 1 };
  s2 -> s1 [33, 65535] { R294 += 1, R248 += 1 };
  s3 -> s1 [0, 65535] { R294 += 1, R248 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R294 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value1_10 {
  init s0;
  s0 -> s1 [0, 65535] { R296 += 1, R250 += 1, R8 += 1 };
  s0 -> s2 [0, 65535] { R296 += 1, R249 += 1, R250 += 1 };
  s0 -> s0 [0, 65535] { R295 += 1, R296 += 1 };
  s1 -> s1 [0, 65535] { R296 += 1, R250 += 1, R8 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R296 += 1 };
  s2 -> s1 [0, 65535] { R296 += 1, R250 += 1, R8 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R296 += 1, R249 += 1, R250 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R296 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_11 {
  init s0;
  s0 -> s1 [0, 65535] { R298 += 1, R260 += 1, R234 += 1 };
  s0 -> s2 [0, 65535] { R298 += 1, R259 += 1, R260 += 1 };
  s0 -> s0 [0, 65535] { R297 += 1, R298 += 1 };
  s1 -> s1 [0, 65535] { R298 += 1, R260 += 1, R234 += 1 };
  s1 -> s4 [0, 65535] { R298 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R298 += 1, R260 += 1, R234 += 1 };
  s2 -> s2 [0, 65535] { R298 += 1, R259 += 1, R260 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R298 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_12 {
  init s0;
  s0 -> s1 [0, 67] { R300 += 1, R262 += 1 };
  s0 -> s2 [0, 65535] { R300 += 1, R261 += 1, R262 += 1 };
  s0 -> s0 [0, 65535] { R299 += 1, R300 += 1 };
  s0 -> s3 [68, 68] { R300 += 1, R262 += 1 };
  s0 -> s4 [68, 68] { R300 += 1, R262 += 1 };
  s0 -> s1 [80, 65535] { R300 += 1, R262 += 1 };
  s1 -> s1 [0, 67] { R300 += 1, R262 += 1 };
  s1 -> s1 [0, 65535] { R300 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [68, 68] { R300 += 1, R262 += 1 };
  s1 -> s4 [68, 68] { R300 += 1, R262 += 1 };
  s1 -> s1 [80, 65535] { R300 += 1, R262 += 1 };
  s2 -> s1 [0, 67] { R300 += 1, R262 += 1 };
  s2 -> s2 [0, 65535] { R300 += 1, R261 += 1, R262 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [68, 68] { R300 += 1, R262 += 1 };
  s2 -> s4 [68, 68] { R300 += 1, R262 += 1 };
  s2 -> s1 [80, 65535] { R300 += 1, R262 += 1 };
  s3 -> s3 [0, 65535] { R300 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 68] { R300 += 1, R262 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R300 += 1 };
  s4 -> s4 [80, 65535] { R300 += 1, R262 += 1 };
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value1_13 {
  init s0;
  s0 -> s1 [0, 67] { R302 += 1, R268 += 1 };
  s0 -> s2 [0, 65535] { R302 += 1, R267 += 1, R268 += 1 };
  s0 -> s0 [0, 65535] { R301 += 1, R302 += 1 };
  s0 -> s3 [68, 68] { R302 += 1, R268 += 1 };
  s0 -> s1 [69, 65535] { R302 += 1, R268 += 1 };
  s1 -> s1 [0, 67] { R302 += 1, R268 += 1 };
  s1 -> s3 [68, 68] { R302 += 1, R268 += 1 };
  s1 -> s1 [69, 65535] { R302 += 1, R268 += 1 };
  s2 -> s1 [0, 67] { R302 += 1, R268 += 1 };
  s2 -> s2 [0, 65535] { R302 += 1, R267 += 1, R268 += 1 };
  s2 -> s3 [68, 68] { R302 += 1, R268 += 1 };
  s2 -> s1 [69, 65535] { R302 += 1, R268 += 1 };
  s3 -> s3 [0, 65535] { R302 += 1, R268 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R302 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R302 += 1 };
  accepting s3, s4, s5;
};
automaton value1_14 {
  init s0;
  s0 -> s1 [0, 65535] { R304 += 1, R270 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R303 += 1, R304 += 1 };
  s0 -> s2 [0, 65535] { R304 += 1, R269 += 1, R270 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R304 += 1, R270 += 1, R2 += 1 };
  s1 -> s4 [0, 65535] { R304 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R304 += 1, R270 += 1, R2 += 1 };
  s2 -> s2 [0, 65535] { R304 += 1, R269 += 1, R270 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R304 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_15 {
  init s0;
  s0 -> s1 [0, 67] { R306 += 1, R272 += 1 };
  s0 -> s2 [0, 65535] { R306 += 1, R271 += 1, R272 += 1 };
  s0 -> s3 [0, 65535] { R306 += 1, R272 += 1, R10 += 1 };
  s0 -> s0 [0, 65535] { R305 += 1, R306 += 1 };
  s0 -> s4 [68, 68] { R306 += 1, R272 += 1 };
  s0 -> s1 [69, 65535] { R306 += 1, R272 += 1 };
  s1 -> s1 [0, 67] { R306 += 1, R272 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R306 += 1 };
  s1 -> s4 [68, 68] { R306 += 1, R272 += 1 };
  s1 -> s1 [69, 65535] { R306 += 1, R272 += 1 };
  s2 -> s1 [0, 67] { R306 += 1, R272 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R306 += 1, R271 += 1, R272 += 1 };
  s2 -> s3 [0, 65535] { R306 += 1, R272 += 1, R10 += 1 };
  s2 -> s4 [68, 68] { R306 += 1, R272 += 1 };
  s2 -> s1 [69, 65535] { R306 += 1, R272 += 1 };
  s3 -> s1 [0, 67] { R306 += 1, R272 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R306 += 1 };
  s3 -> s3 [0, 65535] { R306 += 1, R272 += 1, R10 += 1 };
  s3 -> s4 [68, 68] { R306 += 1, R272 += 1 };
  s3 -> s1 [69, 65535] { R306 += 1, R272 += 1 };
  s4 -> s4 [0, 65535] { R306 += 1, R272 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R306 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton value1_16 {
  init s0;
  s0 -> s1 [0, 67] { R308 += 1, R274 += 1, R254 += 1 };
  s0 -> s2 [0, 65535] { R308 += 1, R273 += 1, R274 += 1 };
  s0 -> s3 [0, 65535] { R308 += 1, R274 += 1, R253 += 1, R254 += 1 };
  s0 -> s0 [0, 65535] { R307 += 1, R308 += 1 };
  s0 -> s1 [69, 65535] { R308 += 1, R274 += 1, R254 += 1 };
  s1 -> s1 [0, 67] { R308 += 1, R274 += 1, R254 += 1 };
  s1 -> s4 [0, 65535] { R308 += 1 };
  s1 -> s1 [0, 65535] { R308 += 1, R274 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [69, 65535] { R308 += 1, R274 += 1, R254 += 1 };
  s2 -> s1 [0, 67] { R308 += 1, R274 += 1, R254 += 1 };
  s2 -> s2 [0, 65535] { R308 += 1, R273 += 1, R274 += 1 };
  s2 -> s3 [0, 65535] { R308 += 1, R274 += 1, R253 += 1, R254 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [69, 65535] { R308 += 1, R274 += 1, R254 += 1 };
  s3 -> s1 [0, 67] { R308 += 1, R274 += 1, R254 += 1 };
  s3 -> s4 [0, 65535] { R308 += 1 };
  s3 -> s3 [0, 65535] { R308 += 1, R274 += 1, R253 += 1, R254 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [69, 65535] { R308 += 1, R274 += 1, R254 += 1 };
  s4 -> s4 [0, 65535] { R308 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value1_17 {
  init s0;
  s0 -> s1 [0, 65535] { R310 += 1, R275 += 1, R276 += 1 };
  s0 -> s0 [0, 65535] { R309 += 1, R310 += 1 };
  s0 -> s2 [0, 65535] { R310 += 1, R276 += 1, R255 += 1, R256 += 1 };
  s0 -> s3 [0, 65535] { R310 += 1, R276 += 1, R256 += 1, R232 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R310 += 1, R275 += 1, R276 += 1 };
  s1 -> s2 [0, 65535] { R310 += 1, R276 += 1, R255 += 1, R256 += 1 };
  s1 -> s3 [0, 65535] { R310 += 1, R276 += 1, R256 += 1, R232 += 1 };
  s2 -> s4 [0, 65535] { R310 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R310 += 1, R276 += 1, R255 += 1, R256 += 1 };
  s2 -> s3 [0, 65535] { R310 += 1, R276 += 1, R256 += 1, R232 += 1 };
  s3 -> s4 [0, 65535] { R310 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R310 += 1, R276 += 1 };
  s3 -> s3 [0, 65535] { R310 += 1, R276 += 1, R256 += 1, R232 += 1 };
  s4 -> s4 [0, 65535] { R310 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R310 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R310 += 1, R276 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value1_18 {
  init s0;
  s0 -> s1 [0, 68] { R312 += 1, R278 += 1, R258 += 1 };
  s0 -> s0 [0, 65535] { R311 += 1, R312 += 1 };
  s0 -> s2 [0, 65535] { R312 += 1, R278 += 1, R257 += 1, R258 += 1 };
  s0 -> s3 [0, 65535] { R312 += 1, R277 += 1, R278 += 1 };
  s0 -> s1 [79, 65535] { R312 += 1, R278 += 1, R258 += 1 };
  s1 -> s1 [0, 68] { R312 += 1, R278 += 1, R258 += 1 };
  s1 -> s1 [0, 65535] { R312 += 1, R278 += 1 };
  s1 -> s5 [0, 65535] { R312 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [79, 65535] { R312 += 1, R278 += 1, R258 += 1 };
  s2 -> s1 [0, 68] { R312 += 1, R278 += 1, R258 += 1 };
  s2 -> s5 [0, 65535] { R312 += 1 };
  s2 -> s2 [0, 65535] { R312 += 1, R278 += 1, R257 += 1, R258 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [79, 65535] { R312 += 1, R278 += 1, R258 += 1 };
  s3 -> s1 [0, 68] { R312 += 1, R278 += 1, R258 += 1 };
  s3 -> s2 [0, 65535] { R312 += 1, R278 += 1, R257 += 1, R258 += 1 };
  s3 -> s3 [0, 65535] { R312 += 1, R277 += 1, R278 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [79, 65535] { R312 += 1, R278 += 1, R258 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R312 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value1_19 {
  init s0;
  s0 -> s1 [0, 65535] { R314 += 1, R280 += 1, R263 += 1, R264 += 1 };
  s0 -> s0 [0, 65535] { R313 += 1, R314 += 1 };
  s0 -> s2 [0, 65535] { R314 += 1, R280 += 1, R264 += 1, R233 += 1 };
  s0 -> s3 [0, 65535] { R314 += 1, R279 += 1, R280 += 1 };
  s1 -> s1 [0, 65535] { R314 += 1, R280 += 1, R263 += 1, R264 += 1 };
  s1 -> s2 [0, 65535] { R314 += 1, R280 += 1, R264 += 1, R233 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R314 += 1 };
  s2 -> s2 [0, 65535] { R314 += 1, R280 += 1, R264 += 1, R233 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R314 += 1, R280 += 1 };
  s2 -> s6 [0, 65535] { R314 += 1 };
  s3 -> s1 [0, 65535] { R314 += 1, R280 += 1, R263 += 1, R264 += 1 };
  s3 -> s2 [0, 65535] { R314 += 1, R280 += 1, R264 += 1, R233 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R314 += 1, R279 += 1, R280 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R314 += 1, R280 += 1 };
  s5 -> s6 [0, 65535] { R314 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R314 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value1_20 {
  init s0;
  s0 -> s1 [0, 67] { R316 += 1, R282 += 1, R266 += 1 };
  s0 -> s0 [0, 65535] { R315 += 1, R316 += 1 };
  s0 -> s2 [0, 65535] { R316 += 1, R281 += 1, R282 += 1 };
  s0 -> s3 [0, 65535] { R316 += 1, R282 += 1, R265 += 1, R266 += 1 };
  s0 -> s4 [68, 68] { R316 += 1, R282 += 1, R266 += 1 };
  s0 -> s5 [68, 68] { R316 += 1, R282 += 1, R266 += 1 };
  s0 -> s6 [79, 79] { R316 += 1, R282 += 1, R266 += 1 };
  s0 -> s1 [80, 65535] { R316 += 1, R282 += 1, R266 += 1 };
  s1 -> s1 [0, 67] { R316 += 1, R282 += 1, R266 += 1 };
  s1 -> s4 [68, 68] { R316 += 1, R282 += 1, R266 += 1 };
  s1 -> s5 [68, 68] { R316 += 1, R282 += 1, R266 += 1 };
  s1 -> s6 [79, 79] { R316 += 1, R282 += 1, R266 += 1 };
  s1 -> s1 [80, 65535] { R316 += 1, R282 += 1, R266 += 1 };
  s2 -> s1 [0, 67] { R316 += 1, R282 += 1, R266 += 1 };
  s2 -> s2 [0, 65535] { R316 += 1, R281 += 1, R282 += 1 };
  s2 -> s3 [0, 65535] { R316 += 1, R282 += 1, R265 += 1, R266 += 1 };
  s2 -> s4 [68, 68] { R316 += 1, R282 += 1, R266 += 1 };
  s2 -> s5 [68, 68] { R316 += 1, R282 += 1, R266 += 1 };
  s2 -> s6 [79, 79] { R316 += 1, R282 += 1, R266 += 1 };
  s2 -> s1 [80, 65535] { R316 += 1, R282 += 1, R266 += 1 };
  s3 -> s1 [0, 67] { R316 += 1, R282 += 1, R266 += 1 };
  s3 -> s3 [0, 65535] { R316 += 1, R282 += 1, R265 += 1, R266 += 1 };
  s3 -> s4 [68, 68] { R316 += 1, R282 += 1, R266 += 1 };
  s3 -> s5 [68, 68] { R316 += 1, R282 += 1, R266 += 1 };
  s3 -> s6 [79, 79] { R316 += 1, R282 += 1, R266 += 1 };
  s3 -> s1 [80, 65535] { R316 += 1, R282 += 1, R266 += 1 };
  s5 -> s5 [0, 68] { R316 += 1, R282 += 1, R266 += 1 };
  s5 -> s10 [79, 79] { R316 += 1, R282 += 1, R266 += 1 };
  s5 -> s5 [80, 65535] { R316 += 1, R282 += 1, R266 += 1 };
  s6 -> s6 [0, 67] { R316 += 1, R282 += 1, R266 += 1 };
  s6 -> s7 [0, 65535] { R316 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R316 += 1, R282 += 1 };
  s6 -> s9 [68, 68] { R316 += 1, R282 += 1, R266 += 1 };
  s6 -> s10 [68, 68] { R316 += 1, R282 += 1, R266 += 1 };
  s6 -> s6 [79, 65535] { R316 += 1, R282 += 1, R266 += 1 };
  s7 -> s7 [0, 65535] { R316 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R316 += 1, R282 += 1 };
  s9 -> s7 [0, 65535] { R316 += 1 };
  s9 -> s8 [0, 65535];
  s10 -> s10 [0, 68] { R316 += 1, R282 += 1, R266 += 1 };
  s10 -> s7 [0, 65535] { R316 += 1 };
  s10 -> s10 [0, 65535] { R316 += 1, R282 += 1 };
  s10 -> s8 [0, 65535];
  s10 -> s10 [79, 65535] { R316 += 1, R282 += 1, R266 += 1 };
  accepting s8, s9, s6, s7, s10;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s0 [91, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R9 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 8] { R236 += 1 };
  s0 -> s0 [0, 65535] { R235 += 1, R236 += 1 };
  s0 -> s2 [9, 13] { R236 += 1 };
  s0 -> s1 [14, 31] { R236 += 1 };
  s0 -> s2 [32, 32] { R236 += 1 };
  s0 -> s1 [33, 65535] { R236 += 1 };
  s1 -> s1 [0, 65535] { R236 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R236 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 65535] { R238 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R237 += 1, R238 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R238 += 1, R5 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 8] { R240 += 1 };
  s0 -> s0 [0, 65535] { R239 += 1, R240 += 1 };
  s0 -> s2 [9, 13] { R240 += 1 };
  s0 -> s1 [14, 31] { R240 += 1 };
  s0 -> s2 [32, 32] { R240 += 1 };
  s0 -> s1 [33, 65535] { R240 += 1 };
  s1 -> s1 [0, 65535] { R240 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R240 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_6 {
  init s0;
  s0 -> s0 [0, 65535] { R241 += 1, R242 += 1 };
  s0 -> s1 [0, 65535] { R242 += 1, R6 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R242 += 1, R6 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
};
synchronised {  // Automata constraining P65
automaton P65_0 {
  init s0;
  s0 -> s1 [100, 100];
  accepting s1;
};
};
constraint R3 = R282 && R4 = R252 && R17 = 0 && R18 = R316 && R243 - R282 = -1 && R244 = R282 && R245 - R282 = -1 && R246 = R282 && R247 = 0 && R248 = 1 && R249 = 0 && R250 = 1 && R251 - R316 = 1 && R265 = 0 && R266 = 0 && R267 = 0 && R268 = R282 && R269 = 0 && R270 = R282 && R271 = 0 && R272 = R282 && R273 = 0 && R274 = R282 && R275 = 0 && R276 = R282 && R277 = 0 && R278 = R282 && R279 = 0 && R280 = R282 && R281 = 0 && R283 = 0 && R284 = R316 && R285 = 0 && R286 = R316 && R287 = 0 && R288 = R316 && R289 = 0 && R290 = R316 && R291 = 0 && R292 = R316 && R293 = 0 && R294 = R316 && R295 = 0 && R296 = R316 && R297 = 0 && R298 = R316 && R299 = 0 && R300 = R316 && R301 = 0 && R302 = R316 && R303 = 0 && R304 = R316 && R305 = 0 && R306 = R316 && R307 = 0 && R308 = R316 && R309 = 0 && R310 = R316 && R311 = 0 && R312 = R316 && R313 = 0 && R314 = R316 && R315 = 0 && R0 != 0 && R1 != 0 && -1 < R2 && R9 < 1 && R10 < 1 && R13 < 1 && R316 < R252 && 0 < R282 && -1 < R316 && (R2 != 0 || R232 = 0 || (R253 = 0 && R254 = 0)) && (R2 != 0 || R232 = 0 || (R255 = 0 && R256 = 0)) && (R2 != 0 || R232 = 0 || (R257 = 0 && R258 = 0)) && (R5 != 0 || ((R1 != R236 || R235 - R236 = -1 || R236 < 0) && (R1 = R236 || R1 < 1))) && (R5 != 0 || ((R1 != R238 || R237 - R238 = -1 || R238 < 0) && (R1 = R238 || R1 < 1))) && (R239 != 0 || ((R6 != 0 || ((R1 != R240 || R240 = 1 || R240 < 0) && (R1 = R240 || R240 = 1 || R1 < 1))) && (R6 = 0 || ((R1 != R240 || R240 = 1 || R240 < 0) && (R240 != 1 || -1 < R1) && (R1 = R240 || R240 = 1))))) && (R241 != 0 || ((R6 != 0 || ((R1 != R242 || R242 = 1 || R242 < 0) && (R1 = R242 || R242 = 1 || R1 < 1))) && (R6 = 0 || ((R1 != R242 || R242 = 1 || R242 < 0) && (R242 != 1 || -1 < R1) && (R1 = R242 || R242 = 1))))) && (R253 != 0 || R2 = R254 || R2 < 1) && (R255 != 0 || R2 = R256 || R2 < 1) && (R257 != 0 || R2 = R258 || R2 < 1) && (R5 = 0 || (R1 = R236 && R235 - R236 = -1)) && (R5 = 0 || (R1 = R238 && R237 - R238 = -1)) && (R233 = 0 || (R263 = 0 && R264 = 0)) && (R234 = 0 || (R259 = 0 && R260 = 0)) && (R234 = 0 || (R261 = 0 && R262 = 0)) && (R239 = 0 || (R6 = 0 && R1 < 0)) && (R241 = 0 || (R6 = 0 && R1 < 0)) && (R253 = 0 || R2 < 1) && (R255 = 0 || R2 < 1) && (R257 = 0 || R2 < 1);
// End of Parikh automata intersection problem
