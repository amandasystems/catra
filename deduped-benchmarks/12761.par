// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R14, R15, R188, R189, R192, R193, R194, R195, R196, R197, R198, R199, R2, R200, R201, R202, R203, R204, R205, R206, R207, R208, R209, R210, R211, R212, R213, R214, R215, R216, R217, R218, R219, R220, R221, R222, R223, R224, R225, R226, R227, R228, R229, R230, R231, R232, R233, R234, R235, R236, R237, R238, R239, R240, R241, R242, R243, R244, R245, R246, R247, R248, R249, R250, R251, R252, R253, R254, R255, R256, R257, R258, R259, R260, R261, R262, R263, R264, R265, R266, R267, R268, R269, R270, R271, R272, R273, R274, R275, R3, R4, R5, R6, R7, R8, R9;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [87, 87];
  s0 -> s0 [88, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [87, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R188 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 86];
  s0 -> s0 [0, 65535] { R189 += 1 };
  s0 -> s2 [87, 87];
  s0 -> s1 [88, 65535];
  s1 -> s1 [0, 86];
  s1 -> s2 [87, 87];
  s1 -> s1 [88, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R213 += 1 };
  s0 -> s0 [0, 65535] { R212 += 1, R213 += 1 };
  s0 -> s2 [9, 13] { R213 += 1 };
  s0 -> s1 [14, 31] { R213 += 1 };
  s0 -> s2 [32, 32] { R213 += 1 };
  s0 -> s1 [33, 65535] { R213 += 1 };
  s1 -> s1 [0, 65535] { R213 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R213 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s0 [0, 65535] { R214 += 1, R215 += 1 };
  s0 -> s1 [0, 65535] { R215 += 1, R8 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R215 += 1, R8 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R217 += 1 };
  s0 -> s0 [0, 65535] { R216 += 1, R217 += 1 };
  s0 -> s2 [9, 13] { R217 += 1 };
  s0 -> s1 [14, 31] { R217 += 1 };
  s0 -> s2 [32, 32] { R217 += 1 };
  s0 -> s1 [33, 65535] { R217 += 1 };
  s1 -> s1 [0, 65535] { R217 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R217 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s0 [0, 65535] { R218 += 1, R219 += 1 };
  s0 -> s1 [0, 65535] { R219 += 1, R9 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R219 += 1, R9 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 86] { R239 += 1 };
  s0 -> s0 [0, 65535] { R238 += 1, R239 += 1 };
  s0 -> s1 [88, 65535] { R239 += 1 };
  s1 -> s1 [0, 86] { R239 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [88, 65535] { R239 += 1 };
  accepting s0, s1;
};
automaton value2_9 {
  init s0;
  s0 -> s0 [0, 65535] { R240 += 1, R241 += 1 };
  s0 -> s1 [0, 65535] { R241 += 1, R194 += 1 };
  s1 -> s1 [0, 65535] { R241 += 1, R194 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 87] { R243 += 1 };
  s0 -> s0 [0, 65535] { R242 += 1, R243 += 1 };
  s0 -> s1 [91, 65535] { R243 += 1 };
  s1 -> s1 [0, 87] { R243 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [91, 65535] { R243 += 1 };
  accepting s0, s1;
};
automaton value2_11 {
  init s0;
  s0 -> s0 [0, 65535] { R248 += 1, R249 += 1 };
  s0 -> s1 [0, 65535] { R249 += 1, R195 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R249 += 1, R195 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 86] { R251 += 1 };
  s0 -> s0 [0, 65535] { R250 += 1, R251 += 1 };
  s0 -> s2 [87, 87] { R251 += 1 };
  s0 -> s3 [87, 87] { R251 += 1 };
  s0 -> s1 [91, 65535] { R251 += 1 };
  s1 -> s1 [0, 86] { R251 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [87, 87] { R251 += 1 };
  s1 -> s3 [87, 87] { R251 += 1 };
  s1 -> s1 [91, 65535] { R251 += 1 };
  s2 -> s2 [0, 87] { R251 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [91, 65535] { R251 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
};
synchronised {  // Automata constraining c2
automaton c2_0 {
  init s0;
  s0 -> s1 [116, 116];
  accepting s1;
};
};
synchronised {  // Automata constraining P56
automaton P56_0 {
  init s0;
  s0 -> s1 [119, 119];
  accepting s1;
};
};
synchronised {  // Automata constraining value1
automaton value1_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 60];
  s0 -> s1 [61, 61];
  s0 -> s0 [62, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 65535];
  accepting s1;
};
automaton value1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value1_2 {
  init s0;
  s0 -> s1 [0, 60] { R15 += 1 };
  s0 -> s0 [0, 65535] { R14 += 1, R15 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535] { R15 += 1 };
  s1 -> s1 [0, 60] { R15 += 1 };
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535] { R15 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value1_3 {
  init s0;
  s0 -> s1 [0, 64] { R227 += 1 };
  s0 -> s0 [0, 65535] { R226 += 1, R227 += 1 };
  s0 -> s2 [72, 72] { R227 += 1 };
  s0 -> s1 [73, 65535] { R227 += 1 };
  s1 -> s1 [0, 64] { R227 += 1 };
  s1 -> s2 [72, 72] { R227 += 1 };
  s1 -> s1 [73, 65535] { R227 += 1 };
  s2 -> s2 [0, 64] { R227 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [72, 65535] { R227 += 1 };
  accepting s2;
};
automaton value1_4 {
  init s0;
  s0 -> s1 [0, 65535] { R229 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R228 += 1, R229 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R229 += 1, R0 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_5 {
  init s0;
  s0 -> s1 [0, 8] { R231 += 1, R197 += 1 };
  s0 -> s0 [0, 65535] { R230 += 1, R231 += 1 };
  s0 -> s2 [0, 65535] { R231 += 1, R196 += 1, R197 += 1 };
  s0 -> s3 [9, 13] { R231 += 1, R197 += 1 };
  s0 -> s1 [14, 31] { R231 += 1, R197 += 1 };
  s0 -> s3 [32, 32] { R231 += 1, R197 += 1 };
  s0 -> s1 [33, 65535] { R231 += 1, R197 += 1 };
  s1 -> s1 [0, 65535] { R231 += 1, R197 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R231 += 1 };
  s2 -> s1 [0, 8] { R231 += 1, R197 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R231 += 1, R196 += 1, R197 += 1 };
  s2 -> s3 [9, 13] { R231 += 1, R197 += 1 };
  s2 -> s1 [14, 31] { R231 += 1, R197 += 1 };
  s2 -> s3 [32, 32] { R231 += 1, R197 += 1 };
  s2 -> s1 [33, 65535] { R231 += 1, R197 += 1 };
  s3 -> s1 [0, 65535] { R231 += 1, R197 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R231 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value1_6 {
  init s0;
  s0 -> s0 [0, 65535] { R232 += 1, R233 += 1 };
  s0 -> s1 [0, 65535] { R233 += 1, R199 += 1, R4 += 1 };
  s0 -> s2 [0, 65535] { R233 += 1, R198 += 1, R199 += 1 };
  s1 -> s4 [0, 65535] { R233 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R233 += 1, R199 += 1, R4 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R233 += 1, R199 += 1, R4 += 1 };
  s2 -> s2 [0, 65535] { R233 += 1, R198 += 1, R199 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R233 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_7 {
  init s0;
  s0 -> s1 [0, 8] { R235 += 1, R201 += 1 };
  s0 -> s0 [0, 65535] { R234 += 1, R235 += 1 };
  s0 -> s2 [0, 65535] { R235 += 1, R200 += 1, R201 += 1 };
  s0 -> s3 [9, 13] { R235 += 1, R201 += 1 };
  s0 -> s1 [14, 31] { R235 += 1, R201 += 1 };
  s0 -> s3 [32, 32] { R235 += 1, R201 += 1 };
  s0 -> s1 [33, 65535] { R235 += 1, R201 += 1 };
  s1 -> s1 [0, 65535] { R235 += 1, R201 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R235 += 1 };
  s2 -> s1 [0, 8] { R235 += 1, R201 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R235 += 1, R200 += 1, R201 += 1 };
  s2 -> s3 [9, 13] { R235 += 1, R201 += 1 };
  s2 -> s1 [14, 31] { R235 += 1, R201 += 1 };
  s2 -> s3 [32, 32] { R235 += 1, R201 += 1 };
  s2 -> s1 [33, 65535] { R235 += 1, R201 += 1 };
  s3 -> s1 [0, 65535] { R235 += 1, R201 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R235 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value1_8 {
  init s0;
  s0 -> s1 [0, 65535] { R237 += 1, R203 += 1, R5 += 1 };
  s0 -> s2 [0, 65535] { R237 += 1, R202 += 1, R203 += 1 };
  s0 -> s0 [0, 65535] { R236 += 1, R237 += 1 };
  s1 -> s4 [0, 65535] { R237 += 1 };
  s1 -> s1 [0, 65535] { R237 += 1, R203 += 1, R5 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R237 += 1, R203 += 1, R5 += 1 };
  s2 -> s2 [0, 65535] { R237 += 1, R202 += 1, R203 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R237 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_9 {
  init s0;
  s0 -> s1 [0, 64] { R253 += 1 };
  s0 -> s0 [0, 65535] { R252 += 1, R253 += 1 };
  s0 -> s2 [84, 84] { R253 += 1 };
  s0 -> s1 [85, 65535] { R253 += 1 };
  s1 -> s1 [0, 64] { R253 += 1 };
  s1 -> s2 [84, 84] { R253 += 1 };
  s1 -> s1 [85, 65535] { R253 += 1 };
  s2 -> s2 [0, 64] { R253 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [84, 65535] { R253 += 1 };
  accepting s2;
};
automaton value1_10 {
  init s0;
  s0 -> s0 [0, 65535] { R254 += 1, R255 += 1 };
  s0 -> s1 [0, 65535] { R255 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R255 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_11 {
  init s0;
  s0 -> s1 [0, 83] { R257 += 1 };
  s0 -> s0 [0, 65535] { R256 += 1, R257 += 1 };
  s0 -> s2 [0, 65535] { R257 += 1, R10 += 1 };
  s0 -> s3 [84, 84] { R257 += 1 };
  s0 -> s1 [85, 65535] { R257 += 1 };
  s1 -> s1 [0, 83] { R257 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [84, 84] { R257 += 1 };
  s1 -> s1 [85, 65535] { R257 += 1 };
  s2 -> s1 [0, 83] { R257 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R257 += 1, R10 += 1 };
  s2 -> s3 [84, 84] { R257 += 1 };
  s2 -> s1 [85, 65535] { R257 += 1 };
  s3 -> s3 [0, 65535] { R257 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value1_12 {
  init s0;
  s0 -> s1 [0, 8] { R259 += 1, R205 += 1 };
  s0 -> s0 [0, 65535] { R258 += 1, R259 += 1 };
  s0 -> s2 [0, 65535] { R259 += 1, R204 += 1, R205 += 1 };
  s0 -> s3 [9, 13] { R259 += 1, R205 += 1 };
  s0 -> s1 [14, 31] { R259 += 1, R205 += 1 };
  s0 -> s3 [32, 32] { R259 += 1, R205 += 1 };
  s0 -> s1 [33, 65535] { R259 += 1, R205 += 1 };
  s1 -> s5 [0, 65535] { R259 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R259 += 1, R205 += 1 };
  s2 -> s1 [0, 8] { R259 += 1, R205 += 1 };
  s2 -> s2 [0, 65535] { R259 += 1, R204 += 1, R205 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R259 += 1, R205 += 1 };
  s2 -> s1 [14, 31] { R259 += 1, R205 += 1 };
  s2 -> s3 [32, 32] { R259 += 1, R205 += 1 };
  s2 -> s1 [33, 65535] { R259 += 1, R205 += 1 };
  s3 -> s1 [0, 65535] { R259 += 1, R205 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R259 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value1_13 {
  init s0;
  s0 -> s1 [0, 65535] { R261 += 1, R206 += 1, R207 += 1 };
  s0 -> s2 [0, 65535] { R261 += 1, R207 += 1, R6 += 1 };
  s0 -> s0 [0, 65535] { R260 += 1, R261 += 1 };
  s1 -> s1 [0, 65535] { R261 += 1, R206 += 1, R207 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R261 += 1, R207 += 1, R6 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R261 += 1, R207 += 1, R6 += 1 };
  s2 -> s4 [0, 65535] { R261 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R261 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_14 {
  init s0;
  s0 -> s1 [0, 8] { R263 += 1, R209 += 1 };
  s0 -> s2 [0, 65535] { R263 += 1, R208 += 1, R209 += 1 };
  s0 -> s0 [0, 65535] { R262 += 1, R263 += 1 };
  s0 -> s3 [9, 13] { R263 += 1, R209 += 1 };
  s0 -> s1 [14, 31] { R263 += 1, R209 += 1 };
  s0 -> s3 [32, 32] { R263 += 1, R209 += 1 };
  s0 -> s1 [33, 65535] { R263 += 1, R209 += 1 };
  s1 -> s1 [0, 65535] { R263 += 1, R209 += 1 };
  s1 -> s5 [0, 65535] { R263 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R263 += 1, R209 += 1 };
  s2 -> s2 [0, 65535] { R263 += 1, R208 += 1, R209 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R263 += 1, R209 += 1 };
  s2 -> s1 [14, 31] { R263 += 1, R209 += 1 };
  s2 -> s3 [32, 32] { R263 += 1, R209 += 1 };
  s2 -> s1 [33, 65535] { R263 += 1, R209 += 1 };
  s3 -> s1 [0, 65535] { R263 += 1, R209 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R263 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value1_15 {
  init s0;
  s0 -> s1 [0, 65535] { R265 += 1, R210 += 1, R211 += 1 };
  s0 -> s2 [0, 65535] { R265 += 1, R211 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R264 += 1, R265 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R265 += 1, R210 += 1, R211 += 1 };
  s1 -> s2 [0, 65535] { R265 += 1, R211 += 1, R7 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R265 += 1 };
  s2 -> s2 [0, 65535] { R265 += 1, R211 += 1, R7 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R265 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_16 {
  init s0;
  s0 -> s1 [0, 83] { R267 += 1, R221 += 1 };
  s0 -> s0 [0, 65535] { R266 += 1, R267 += 1 };
  s0 -> s2 [0, 65535] { R267 += 1, R220 += 1, R221 += 1 };
  s0 -> s1 [85, 65535] { R267 += 1, R221 += 1 };
  s1 -> s1 [0, 83] { R267 += 1, R221 += 1 };
  s1 -> s1 [0, 65535] { R267 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [85, 65535] { R267 += 1, R221 += 1 };
  s2 -> s1 [0, 83] { R267 += 1, R221 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R267 += 1, R220 += 1, R221 += 1 };
  s2 -> s1 [85, 65535] { R267 += 1, R221 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value1_17 {
  init s0;
  s0 -> s0 [0, 65535] { R268 += 1, R269 += 1 };
  s0 -> s1 [0, 65535] { R269 += 1, R223 += 1, R192 += 1 };
  s0 -> s2 [0, 65535] { R269 += 1, R222 += 1, R223 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R269 += 1, R223 += 1, R192 += 1 };
  s1 -> s4 [0, 65535] { R269 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R269 += 1, R223 += 1, R192 += 1 };
  s2 -> s2 [0, 65535] { R269 += 1, R222 += 1, R223 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R269 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_18 {
  init s0;
  s0 -> s1 [0, 84] { R271 += 1, R225 += 1 };
  s0 -> s2 [0, 65535] { R271 += 1, R224 += 1, R225 += 1 };
  s0 -> s0 [0, 65535] { R270 += 1, R271 += 1 };
  s0 -> s1 [91, 65535] { R271 += 1, R225 += 1 };
  s1 -> s1 [0, 84] { R271 += 1, R225 += 1 };
  s1 -> s1 [0, 65535] { R271 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [91, 65535] { R271 += 1, R225 += 1 };
  s2 -> s1 [0, 84] { R271 += 1, R225 += 1 };
  s2 -> s2 [0, 65535] { R271 += 1, R224 += 1, R225 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [91, 65535] { R271 += 1, R225 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value1_19 {
  init s0;
  s0 -> s1 [0, 65535] { R273 += 1, R245 += 1, R193 += 1 };
  s0 -> s2 [0, 65535] { R273 += 1, R244 += 1, R245 += 1 };
  s0 -> s0 [0, 65535] { R272 += 1, R273 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R273 += 1, R245 += 1, R193 += 1 };
  s1 -> s4 [0, 65535] { R273 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R273 += 1, R245 += 1, R193 += 1 };
  s2 -> s2 [0, 65535] { R273 += 1, R244 += 1, R245 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R273 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_20 {
  init s0;
  s0 -> s1 [0, 83] { R275 += 1, R247 += 1 };
  s0 -> s2 [0, 65535] { R275 += 1, R246 += 1, R247 += 1 };
  s0 -> s0 [0, 65535] { R274 += 1, R275 += 1 };
  s0 -> s3 [84, 84] { R275 += 1, R247 += 1 };
  s0 -> s4 [84, 84] { R275 += 1, R247 += 1 };
  s0 -> s1 [91, 65535] { R275 += 1, R247 += 1 };
  s1 -> s1 [0, 83] { R275 += 1, R247 += 1 };
  s1 -> s1 [0, 65535] { R275 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [84, 84] { R275 += 1, R247 += 1 };
  s1 -> s4 [84, 84] { R275 += 1, R247 += 1 };
  s1 -> s1 [91, 65535] { R275 += 1, R247 += 1 };
  s2 -> s1 [0, 83] { R275 += 1, R247 += 1 };
  s2 -> s2 [0, 65535] { R275 += 1, R246 += 1, R247 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [84, 84] { R275 += 1, R247 += 1 };
  s2 -> s4 [84, 84] { R275 += 1, R247 += 1 };
  s2 -> s1 [91, 65535] { R275 += 1, R247 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R275 += 1 };
  s4 -> s4 [0, 84] { R275 += 1, R247 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R275 += 1 };
  s4 -> s4 [91, 65535] { R275 += 1, R247 += 1 };
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
};
constraint R1 = R225 && R2 = R237 && R3 = R243 && R14 = 0 && R15 = R275 && R204 - R225 = -1 && R205 = R225 && R206 - R225 = -1 && R207 = R225 && R208 = 0 && R209 = 1 && R210 = 0 && R211 = 1 && R212 - R243 = -1 && R213 = R243 && R214 - R243 = -1 && R215 = R243 && R216 = 0 && R217 = 1 && R218 = 0 && R219 = 1 && R220 = 0 && R221 = R225 && R222 = 0 && R223 = R225 && R224 = 0 && R226 - R275 = 1 && R227 = R237 && R228 - R275 = 1 && R229 = R237 && R230 - R275 = 1 && R231 = R237 && R232 - R275 = 1 && R233 = R237 && R234 - R275 = 1 && R235 = R237 && R236 - R275 = 1 && R238 = 0 && R239 = R243 && R240 = 0 && R241 = R243 && R242 = 0 && R252 = 0 && R253 = R275 && R254 = 0 && R255 = R275 && R256 = 0 && R257 = R275 && R258 = 0 && R259 = R275 && R260 = 0 && R261 = R275 && R262 = 0 && R263 = R275 && R264 = 0 && R265 = R275 && R266 = 0 && R267 = R275 && R268 = 0 && R269 = R275 && R270 = 0 && R271 = R275 && R272 = 0 && R273 = R275 && R274 = 0 && R0 != 0 && R10 < 1 && R188 < 1 && R189 < 1 && 0 < R225 && R275 < R237 && 0 < R243 && -1 < R275 && (R4 != 0 || ((R0 != R197 || R196 - R197 = -1 || R197 < 0) && (R0 = R197 || R0 < 1))) && (R4 != 0 || ((R0 != R199 || R198 - R199 = -1 || R199 < 0) && (R0 = R199 || R0 < 1))) && (R200 != 0 || ((R5 != 0 || ((R0 != R201 || R201 = 1 || R201 < 0) && (R0 = R201 || R201 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R201 || R201 = 1 || R201 < 0) && (R201 != 1 || -1 < R0) && (R0 = R201 || R201 = 1))))) && (R202 != 0 || ((R5 != 0 || ((R0 != R203 || R203 = 1 || R203 < 0) && (R0 = R203 || R203 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R203 || R203 = 1 || R203 < 0) && (R203 != 1 || -1 < R0) && (R0 = R203 || R203 = 1))))) && (R4 = 0 || (R0 = R197 && R196 - R197 = -1)) && (R4 = 0 || (R0 = R199 && R198 - R199 = -1)) && (R193 = 0 || (R244 = 0 && R245 = 0)) && (R193 = 0 || (R246 = 0 && R247 = 0)) && (R195 = 0 || (R248 = 0 && R249 = 0)) && (R195 = 0 || (R250 = 0 && R251 = 0)) && (R200 = 0 || (R5 = 0 && R0 < 0)) && (R202 = 0 || (R5 = 0 && R0 < 0));
// End of Parikh automata intersection problem
