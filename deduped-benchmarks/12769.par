// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R12, R14, R15, R16, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R4, R484, R485, R486, R487, R5, R708, R709, R710, R711, R784, R785, R786, R787, R788, R789, R790, R791, R792, R793, R794, R795, R796, R797, R798, R799, R800, R801, R802, R803, R804, R805, R806, R807, R808, R809, R810, R811, R812, R813, R814, R815, R816, R817, R818, R819, R820, R821, R822, R823, R824, R825, R826, R827, R828, R829, R830, R831, R832, R833, R834, R835, R836, R837, R838, R839, R840, R841, R842, R843, R844, R845, R846, R847, R848, R849, R850, R851, R852, R853, R854, R855, R9;
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [98, 98];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s1 [32, 32] { R25 += 1 };
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value2_4 {
  init s0;
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s0 -> s1 [0, 65535] { R27 += 1, R5 += 1 };
  s1 -> s1 [0, 65535] { R27 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 64] { R817 += 1 };
  s0 -> s0 [0, 65535] { R816 += 1, R817 += 1 };
  s0 -> s2 [66, 66] { R817 += 1 };
  s0 -> s1 [67, 65535] { R817 += 1 };
  s1 -> s1 [0, 64] { R817 += 1 };
  s1 -> s2 [66, 66] { R817 += 1 };
  s1 -> s1 [67, 65535] { R817 += 1 };
  s2 -> s2 [0, 64] { R817 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [66, 65535] { R817 += 1 };
  accepting s2;
};
automaton value2_6 {
  init s0;
  s0 -> s0 [0, 65535] { R818 += 1, R819 += 1 };
  s0 -> s1 [0, 65535] { R819 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R819 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65] { R821 += 1 };
  s0 -> s0 [0, 65535] { R820 += 1, R821 += 1 };
  s0 -> s2 [0, 65535] { R821 += 1, R9 += 1 };
  s0 -> s3 [66, 66] { R821 += 1 };
  s0 -> s1 [67, 65535] { R821 += 1 };
  s1 -> s1 [0, 65] { R821 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [66, 66] { R821 += 1 };
  s1 -> s1 [67, 65535] { R821 += 1 };
  s2 -> s1 [0, 65] { R821 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R821 += 1, R9 += 1 };
  s2 -> s3 [66, 66] { R821 += 1 };
  s2 -> s1 [67, 65535] { R821 += 1 };
  s3 -> s3 [0, 65535] { R821 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 8] { R823 += 1, R17 += 1 };
  s0 -> s2 [0, 65535] { R823 += 1, R16 += 1, R17 += 1 };
  s0 -> s0 [0, 65535] { R822 += 1, R823 += 1 };
  s0 -> s3 [9, 13] { R823 += 1, R17 += 1 };
  s0 -> s1 [14, 31] { R823 += 1, R17 += 1 };
  s0 -> s3 [32, 32] { R823 += 1, R17 += 1 };
  s0 -> s1 [33, 65535] { R823 += 1, R17 += 1 };
  s1 -> s5 [0, 65535] { R823 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R823 += 1, R17 += 1 };
  s2 -> s1 [0, 8] { R823 += 1, R17 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R823 += 1, R16 += 1, R17 += 1 };
  s2 -> s3 [9, 13] { R823 += 1, R17 += 1 };
  s2 -> s1 [14, 31] { R823 += 1, R17 += 1 };
  s2 -> s3 [32, 32] { R823 += 1, R17 += 1 };
  s2 -> s1 [33, 65535] { R823 += 1, R17 += 1 };
  s3 -> s1 [0, 65535] { R823 += 1, R17 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R823 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 65535] { R825 += 1, R19 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R824 += 1, R825 += 1 };
  s0 -> s2 [0, 65535] { R825 += 1, R18 += 1, R19 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R825 += 1, R19 += 1, R3 += 1 };
  s1 -> s4 [0, 65535] { R825 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R825 += 1, R19 += 1, R3 += 1 };
  s2 -> s2 [0, 65535] { R825 += 1, R18 += 1, R19 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R825 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 8] { R827 += 1, R21 += 1 };
  s0 -> s2 [0, 65535] { R827 += 1, R20 += 1, R21 += 1 };
  s0 -> s0 [0, 65535] { R826 += 1, R827 += 1 };
  s0 -> s3 [9, 13] { R827 += 1, R21 += 1 };
  s0 -> s1 [14, 31] { R827 += 1, R21 += 1 };
  s0 -> s3 [32, 32] { R827 += 1, R21 += 1 };
  s0 -> s1 [33, 65535] { R827 += 1, R21 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R827 += 1, R21 += 1 };
  s1 -> s5 [0, 65535] { R827 += 1 };
  s2 -> s1 [0, 8] { R827 += 1, R21 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R827 += 1, R20 += 1, R21 += 1 };
  s2 -> s3 [9, 13] { R827 += 1, R21 += 1 };
  s2 -> s1 [14, 31] { R827 += 1, R21 += 1 };
  s2 -> s3 [32, 32] { R827 += 1, R21 += 1 };
  s2 -> s1 [33, 65535] { R827 += 1, R21 += 1 };
  s3 -> s1 [0, 65535] { R827 += 1, R21 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R827 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 65535] { R829 += 1, R23 += 1, R4 += 1 };
  s0 -> s2 [0, 65535] { R829 += 1, R22 += 1, R23 += 1 };
  s0 -> s0 [0, 65535] { R828 += 1, R829 += 1 };
  s1 -> s1 [0, 65535] { R829 += 1, R23 += 1, R4 += 1 };
  s1 -> s4 [0, 65535] { R829 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R829 += 1, R23 += 1, R4 += 1 };
  s2 -> s2 [0, 65535] { R829 += 1, R22 += 1, R23 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R829 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 65] { R831 += 1, R791 += 1 };
  s0 -> s2 [0, 65535] { R831 += 1, R790 += 1, R791 += 1 };
  s0 -> s0 [0, 65535] { R830 += 1, R831 += 1 };
  s0 -> s1 [67, 65535] { R831 += 1, R791 += 1 };
  s1 -> s1 [0, 65] { R831 += 1, R791 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R831 += 1 };
  s1 -> s1 [67, 65535] { R831 += 1, R791 += 1 };
  s2 -> s1 [0, 65] { R831 += 1, R791 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R831 += 1, R790 += 1, R791 += 1 };
  s2 -> s1 [67, 65535] { R831 += 1, R791 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 65535] { R833 += 1, R793 += 1, R14 += 1 };
  s0 -> s0 [0, 65535] { R832 += 1, R833 += 1 };
  s0 -> s2 [0, 65535] { R833 += 1, R792 += 1, R793 += 1 };
  s1 -> s1 [0, 65535] { R833 += 1, R793 += 1, R14 += 1 };
  s1 -> s4 [0, 65535] { R833 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R833 += 1, R793 += 1, R14 += 1 };
  s2 -> s2 [0, 65535] { R833 += 1, R792 += 1, R793 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R833 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 65535] { R835 += 1, R795 += 1 };
  s0 -> s0 [0, 65535] { R834 += 1, R835 += 1 };
  s0 -> s2 [0, 65535] { R835 += 1, R794 += 1, R795 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R835 += 1, R795 += 1 };
  s1 -> s4 [0, 65535] { R835 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R835 += 1, R795 += 1 };
  s2 -> s2 [0, 65535] { R835 += 1, R794 += 1, R795 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R835 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 65535] { R837 += 1, R797 += 1, R485 += 1 };
  s0 -> s2 [0, 65535] { R837 += 1, R796 += 1, R797 += 1 };
  s0 -> s0 [0, 65535] { R836 += 1, R837 += 1 };
  s1 -> s1 [0, 65535] { R837 += 1, R797 += 1, R485 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R837 += 1 };
  s2 -> s1 [0, 65535] { R837 += 1, R797 += 1, R485 += 1 };
  s2 -> s2 [0, 65535] { R837 += 1, R796 += 1, R797 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R837 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 66] { R839 += 1, R799 += 1 };
  s0 -> s2 [0, 65535] { R839 += 1, R798 += 1, R799 += 1 };
  s0 -> s3 [0, 65535] { R839 += 1, R799 += 1, R487 += 1 };
  s0 -> s0 [0, 65535] { R838 += 1, R839 += 1 };
  s0 -> s1 [68, 65535] { R839 += 1, R799 += 1 };
  s1 -> s1 [0, 66] { R839 += 1, R799 += 1 };
  s1 -> s1 [0, 65535] { R839 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [68, 65535] { R839 += 1, R799 += 1 };
  s2 -> s1 [0, 66] { R839 += 1, R799 += 1 };
  s2 -> s2 [0, 65535] { R839 += 1, R798 += 1, R799 += 1 };
  s2 -> s3 [0, 65535] { R839 += 1, R799 += 1, R487 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [68, 65535] { R839 += 1, R799 += 1 };
  s3 -> s1 [0, 66] { R839 += 1, R799 += 1 };
  s3 -> s4 [0, 65535] { R839 += 1 };
  s3 -> s3 [0, 65535] { R839 += 1, R799 += 1, R487 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [68, 65535] { R839 += 1, R799 += 1 };
  s4 -> s4 [0, 65535] { R839 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 66] { R841 += 1, R801 += 1, R711 += 1 };
  s0 -> s0 [0, 65535] { R840 += 1, R841 += 1 };
  s0 -> s2 [0, 65535] { R841 += 1, R800 += 1, R801 += 1 };
  s0 -> s3 [67, 67] { R841 += 1, R801 += 1, R711 += 1 };
  s0 -> s1 [68, 65535] { R841 += 1, R801 += 1, R711 += 1 };
  s1 -> s1 [0, 66] { R841 += 1, R801 += 1, R711 += 1 };
  s1 -> s3 [67, 67] { R841 += 1, R801 += 1, R711 += 1 };
  s1 -> s1 [68, 65535] { R841 += 1, R801 += 1, R711 += 1 };
  s2 -> s1 [0, 66] { R841 += 1, R801 += 1, R711 += 1 };
  s2 -> s2 [0, 65535] { R841 += 1, R800 += 1, R801 += 1 };
  s2 -> s3 [67, 67] { R841 += 1, R801 += 1, R711 += 1 };
  s2 -> s1 [68, 65535] { R841 += 1, R801 += 1, R711 += 1 };
  s3 -> s3 [0, 65535] { R841 += 1, R801 += 1, R711 += 1 };
  s3 -> s4 [0, 65535] { R841 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R841 += 1, R801 += 1 };
  s4 -> s4 [0, 65535] { R841 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R841 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R841 += 1, R801 += 1 };
  accepting s3, s4, s5, s6;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R842 += 1, R843 += 1 };
  s0 -> s1 [0, 65535] { R843 += 1, R803 += 1, R788 += 1, R789 += 1 };
  s0 -> s2 [0, 65535] { R843 += 1, R803 += 1 };
  s0 -> s3 [0, 65535] { R843 += 1, R802 += 1, R803 += 1 };
  s1 -> s5 [0, 65535] { R843 += 1 };
  s1 -> s1 [0, 65535] { R843 += 1, R803 += 1, R788 += 1, R789 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R843 += 1, R803 += 1 };
  s2 -> s5 [0, 65535] { R843 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R843 += 1, R803 += 1 };
  s3 -> s1 [0, 65535] { R843 += 1, R803 += 1, R788 += 1, R789 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R843 += 1, R803 += 1 };
  s3 -> s3 [0, 65535] { R843 += 1, R802 += 1, R803 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R843 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_19 {
  init s0;
  s0 -> s0 [0, 65535] { R844 += 1, R845 += 1 };
  s0 -> s1 [0, 65535] { R845 += 1, R804 += 1, R805 += 1 };
  s0 -> s2 [0, 65535] { R845 += 1, R805 += 1, R15 += 1 };
  s1 -> s1 [0, 65535] { R845 += 1, R804 += 1, R805 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R845 += 1, R805 += 1, R15 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R845 += 1 };
  s2 -> s2 [0, 65535] { R845 += 1, R805 += 1, R15 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R845 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 65] { R847 += 1, R807 += 1 };
  s0 -> s2 [0, 65535] { R847 += 1, R806 += 1, R807 += 1 };
  s0 -> s0 [0, 65535] { R846 += 1, R847 += 1 };
  s0 -> s3 [66, 66] { R847 += 1, R807 += 1 };
  s0 -> s4 [66, 66] { R847 += 1, R807 += 1 };
  s0 -> s5 [67, 67] { R847 += 1, R807 += 1 };
  s0 -> s1 [68, 65535] { R847 += 1, R807 += 1 };
  s1 -> s1 [0, 65] { R847 += 1, R807 += 1 };
  s1 -> s3 [66, 66] { R847 += 1, R807 += 1 };
  s1 -> s4 [66, 66] { R847 += 1, R807 += 1 };
  s1 -> s5 [67, 67] { R847 += 1, R807 += 1 };
  s1 -> s1 [68, 65535] { R847 += 1, R807 += 1 };
  s2 -> s1 [0, 65] { R847 += 1, R807 += 1 };
  s2 -> s2 [0, 65535] { R847 += 1, R806 += 1, R807 += 1 };
  s2 -> s3 [66, 66] { R847 += 1, R807 += 1 };
  s2 -> s4 [66, 66] { R847 += 1, R807 += 1 };
  s2 -> s5 [67, 67] { R847 += 1, R807 += 1 };
  s2 -> s1 [68, 65535] { R847 += 1, R807 += 1 };
  s3 -> s3 [0, 66] { R847 += 1, R807 += 1 };
  s3 -> s7 [67, 67] { R847 += 1, R807 += 1 };
  s3 -> s3 [68, 65535] { R847 += 1, R807 += 1 };
  s5 -> s5 [0, 65] { R847 += 1, R807 += 1 };
  s5 -> s5 [0, 65535] { R847 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [66, 66] { R847 += 1, R807 += 1 };
  s5 -> s8 [66, 66] { R847 += 1, R807 += 1 };
  s5 -> s5 [67, 65535] { R847 += 1, R807 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R847 += 1, R807 += 1 };
  s7 -> s9 [0, 65535] { R847 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R847 += 1 };
  s9 -> s9 [0, 65535] { R847 += 1 };
  s9 -> s6 [0, 65535];
  accepting s8, s5, s9, s6, s7;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65] { R849 += 1, R809 += 1, R484 += 1 };
  s0 -> s0 [0, 65535] { R848 += 1, R849 += 1 };
  s0 -> s2 [0, 65535] { R849 += 1, R808 += 1, R809 += 1 };
  s0 -> s3 [66, 66] { R849 += 1, R809 += 1, R484 += 1 };
  s0 -> s4 [66, 66] { R849 += 1, R809 += 1, R484 += 1 };
  s0 -> s1 [67, 65535] { R849 += 1, R809 += 1, R484 += 1 };
  s1 -> s1 [0, 65] { R849 += 1, R809 += 1, R484 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R849 += 1 };
  s1 -> s3 [66, 66] { R849 += 1, R809 += 1, R484 += 1 };
  s1 -> s4 [66, 66] { R849 += 1, R809 += 1, R484 += 1 };
  s1 -> s1 [67, 65535] { R849 += 1, R809 += 1, R484 += 1 };
  s2 -> s1 [0, 65] { R849 += 1, R809 += 1, R484 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R849 += 1, R808 += 1, R809 += 1 };
  s2 -> s3 [66, 66] { R849 += 1, R809 += 1, R484 += 1 };
  s2 -> s4 [66, 66] { R849 += 1, R809 += 1, R484 += 1 };
  s2 -> s1 [67, 65535] { R849 += 1, R809 += 1, R484 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R849 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R849 += 1, R809 += 1, R484 += 1 };
  s4 -> s6 [0, 65535] { R849 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R849 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 65] { R851 += 1, R811 += 1, R486 += 1 };
  s0 -> s0 [0, 65535] { R850 += 1, R851 += 1 };
  s0 -> s2 [0, 65535] { R851 += 1, R810 += 1, R811 += 1 };
  s0 -> s3 [66, 66] { R851 += 1, R811 += 1, R486 += 1 };
  s0 -> s4 [66, 66] { R851 += 1, R811 += 1, R486 += 1 };
  s0 -> s1 [67, 65535] { R851 += 1, R811 += 1, R486 += 1 };
  s1 -> s1 [0, 65] { R851 += 1, R811 += 1, R486 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R851 += 1 };
  s1 -> s3 [66, 66] { R851 += 1, R811 += 1, R486 += 1 };
  s1 -> s4 [66, 66] { R851 += 1, R811 += 1, R486 += 1 };
  s1 -> s1 [67, 65535] { R851 += 1, R811 += 1, R486 += 1 };
  s2 -> s1 [0, 65] { R851 += 1, R811 += 1, R486 += 1 };
  s2 -> s2 [0, 65535] { R851 += 1, R810 += 1, R811 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [66, 66] { R851 += 1, R811 += 1, R486 += 1 };
  s2 -> s4 [66, 66] { R851 += 1, R811 += 1, R486 += 1 };
  s2 -> s1 [67, 65535] { R851 += 1, R811 += 1, R486 += 1 };
  s3 -> s3 [0, 65535] { R851 += 1, R811 += 1, R486 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R851 += 1 };
  s4 -> s4 [0, 65535] { R851 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R851 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65] { R853 += 1, R813 += 1, R708 += 1, R709 += 1 };
  s0 -> s2 [0, 65] { R853 += 1, R813 += 1, R709 += 1 };
  s0 -> s0 [0, 65535] { R852 += 1, R853 += 1 };
  s0 -> s3 [0, 65535] { R853 += 1, R812 += 1, R813 += 1 };
  s0 -> s4 [66, 66] { R853 += 1, R813 += 1, R709 += 1 };
  s0 -> s5 [66, 66] { R853 += 1, R813 += 1, R708 += 1, R709 += 1 };
  s0 -> s6 [66, 66] { R853 += 1, R813 += 1, R708 += 1, R709 += 1 };
  s0 -> s7 [66, 66] { R853 += 1, R813 += 1, R709 += 1 };
  s0 -> s1 [67, 65535] { R853 += 1, R813 += 1, R708 += 1, R709 += 1 };
  s0 -> s2 [68, 65535] { R853 += 1, R813 += 1, R709 += 1 };
  s1 -> s1 [0, 65] { R853 += 1, R813 += 1, R708 += 1, R709 += 1 };
  s1 -> s2 [0, 65] { R853 += 1, R813 += 1, R709 += 1 };
  s1 -> s4 [66, 66] { R853 += 1, R813 += 1, R709 += 1 };
  s1 -> s5 [66, 66] { R853 += 1, R813 += 1, R708 += 1, R709 += 1 };
  s1 -> s6 [66, 66] { R853 += 1, R813 += 1, R708 += 1, R709 += 1 };
  s1 -> s7 [66, 66] { R853 += 1, R813 += 1, R709 += 1 };
  s1 -> s1 [67, 65535] { R853 += 1, R813 += 1, R708 += 1, R709 += 1 };
  s1 -> s2 [68, 65535] { R853 += 1, R813 += 1, R709 += 1 };
  s2 -> s2 [0, 65] { R853 += 1, R813 += 1, R709 += 1 };
  s2 -> s2 [0, 65535] { R853 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s4 [66, 66] { R853 += 1, R813 += 1, R709 += 1 };
  s2 -> s7 [66, 66] { R853 += 1, R813 += 1, R709 += 1 };
  s2 -> s2 [68, 65535] { R853 += 1, R813 += 1, R709 += 1 };
  s3 -> s1 [0, 65] { R853 += 1, R813 += 1, R708 += 1, R709 += 1 };
  s3 -> s2 [0, 65] { R853 += 1, R813 += 1, R709 += 1 };
  s3 -> s3 [0, 65535] { R853 += 1, R812 += 1, R813 += 1 };
  s3 -> s4 [66, 66] { R853 += 1, R813 += 1, R709 += 1 };
  s3 -> s5 [66, 66] { R853 += 1, R813 += 1, R708 += 1, R709 += 1 };
  s3 -> s6 [66, 66] { R853 += 1, R813 += 1, R708 += 1, R709 += 1 };
  s3 -> s7 [66, 66] { R853 += 1, R813 += 1, R709 += 1 };
  s3 -> s1 [67, 65535] { R853 += 1, R813 += 1, R708 += 1, R709 += 1 };
  s3 -> s2 [68, 65535] { R853 += 1, R813 += 1, R709 += 1 };
  s4 -> s4 [0, 66] { R853 += 1, R813 += 1, R709 += 1 };
  s4 -> s4 [0, 65535] { R853 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s4 [68, 65535] { R853 += 1, R813 += 1, R709 += 1 };
  s5 -> s4 [0, 66] { R853 += 1, R813 += 1, R709 += 1 };
  s5 -> s5 [0, 65535] { R853 += 1, R813 += 1, R708 += 1, R709 += 1 };
  s5 -> s4 [68, 65535] { R853 += 1, R813 += 1, R709 += 1 };
  s7 -> s7 [0, 65535] { R853 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  accepting s2, s4, s7, s8;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 65] { R855 += 1, R815 += 1, R784 += 1, R785 += 1 };
  s0 -> s2 [0, 65] { R855 += 1, R815 += 1, R785 += 1, R786 += 1 };
  s0 -> s0 [0, 65535] { R854 += 1, R855 += 1 };
  s0 -> s3 [0, 65535] { R855 += 1, R814 += 1, R815 += 1 };
  s0 -> s4 [66, 66] { R855 += 1, R815 += 1, R784 += 1, R785 += 1 };
  s0 -> s5 [66, 66] { R855 += 1, R815 += 1, R785 += 1, R786 += 1 };
  s0 -> s6 [66, 66] { R855 += 1, R815 += 1, R785 += 1, R786 += 1 };
  s0 -> s7 [66, 66] { R855 += 1, R815 += 1, R784 += 1, R785 += 1 };
  s0 -> s1 [67, 65535] { R855 += 1, R815 += 1, R784 += 1, R785 += 1 };
  s0 -> s2 [67, 65535] { R855 += 1, R815 += 1, R785 += 1, R786 += 1 };
  s1 -> s1 [0, 65] { R855 += 1, R815 += 1, R784 += 1, R785 += 1 };
  s1 -> s2 [0, 65] { R855 += 1, R815 += 1, R785 += 1, R786 += 1 };
  s1 -> s4 [66, 66] { R855 += 1, R815 += 1, R784 += 1, R785 += 1 };
  s1 -> s5 [66, 66] { R855 += 1, R815 += 1, R785 += 1, R786 += 1 };
  s1 -> s6 [66, 66] { R855 += 1, R815 += 1, R785 += 1, R786 += 1 };
  s1 -> s7 [66, 66] { R855 += 1, R815 += 1, R784 += 1, R785 += 1 };
  s1 -> s1 [67, 65535] { R855 += 1, R815 += 1, R784 += 1, R785 += 1 };
  s1 -> s2 [67, 65535] { R855 += 1, R815 += 1, R785 += 1, R786 += 1 };
  s2 -> s2 [0, 65] { R855 += 1, R815 += 1, R785 += 1, R786 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R855 += 1 };
  s2 -> s5 [66, 66] { R855 += 1, R815 += 1, R785 += 1, R786 += 1 };
  s2 -> s6 [66, 66] { R855 += 1, R815 += 1, R785 += 1, R786 += 1 };
  s2 -> s2 [67, 65535] { R855 += 1, R815 += 1, R785 += 1, R786 += 1 };
  s3 -> s1 [0, 65] { R855 += 1, R815 += 1, R784 += 1, R785 += 1 };
  s3 -> s2 [0, 65] { R855 += 1, R815 += 1, R785 += 1, R786 += 1 };
  s3 -> s3 [0, 65535] { R855 += 1, R814 += 1, R815 += 1 };
  s3 -> s4 [66, 66] { R855 += 1, R815 += 1, R784 += 1, R785 += 1 };
  s3 -> s5 [66, 66] { R855 += 1, R815 += 1, R785 += 1, R786 += 1 };
  s3 -> s6 [66, 66] { R855 += 1, R815 += 1, R785 += 1, R786 += 1 };
  s3 -> s7 [66, 66] { R855 += 1, R815 += 1, R784 += 1, R785 += 1 };
  s3 -> s1 [67, 65535] { R855 += 1, R815 += 1, R784 += 1, R785 += 1 };
  s3 -> s2 [67, 65535] { R855 += 1, R815 += 1, R785 += 1, R786 += 1 };
  s5 -> s9 [0, 65535] { R855 += 1 };
  s5 -> s5 [0, 65535] { R855 += 1, R815 += 1, R785 += 1, R786 += 1 };
  s5 -> s8 [0, 65535];
  s6 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R855 += 1 };
  s7 -> s5 [0, 65535] { R855 += 1, R815 += 1, R785 += 1, R786 += 1 };
  s7 -> s7 [0, 65535] { R855 += 1, R815 += 1, R784 += 1, R785 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R855 += 1 };
  s9 -> s8 [0, 65535];
  accepting s8, s5, s2, s9, s6;
};
};
constraint R1 = R803 && R2 = R855 && R16 - R803 = -1 && R17 = R803 && R18 - R803 = -1 && R19 = R803 && R20 = 0 && R21 = 1 && R22 = 0 && R23 = 1 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R485 + R484 + -1*R711 + -1*R709 = 0 && R710 + R708 = 0 && R790 = 0 && R791 = R803 && R792 = 0 && R793 = R803 && R794 = 0 && R795 = R803 && R796 = 0 && R797 = R803 && R798 = 0 && R799 = R803 && R800 = 0 && R801 = R803 && R802 = 0 && R806 = 0 && R807 = 0 && R812 = 0 && R813 = 0 && R814 = 0 && R815 = 0 && R816 = 1 && R817 = R855 && R818 = 1 && R819 = R855 && R820 = 1 && R821 = R855 && R822 = 1 && R823 = R855 && R824 = 1 && R825 = R855 && R826 = 1 && R827 = R855 && R828 = 1 && R829 = R855 && R830 = 1 && R831 = R855 && R832 = 1 && R833 = R855 && R834 = 1 && R835 = R855 && R836 = 1 && R837 = R855 && R838 = 1 && R839 = R855 && R840 = 1 && R841 = R855 && R842 = 1 && R843 = R855 && R844 = 1 && R845 = R855 && R846 = 1 && R847 = R855 && R848 = 1 && R849 = R855 && R850 = 1 && R851 = R855 && R852 = 1 && R853 = R855 && R854 = 1 && R9 < 1 && R12 < 1 && R487 + R486 < 1 && -1*R711 + -1*R709 < 1 && 0 < R803 && 0 < R855 && (R711 + R709 != 0 || R789 + R786 = 0 || (R787 + R784 = 0 && R788 + R785 = 0)) && (R787 + R784 != 0 || R711 + R709 + -1*R788 + -1*R785 = 0 || R711 + R709 < 1) && (R15 = 0 || (R804 = 0 && R805 = 0)) && (R15 = 0 || (R808 = 0 && R809 = 0)) && (R15 = 0 || (R810 = 0 && R811 = 0)) && (R787 + R784 = 0 || R711 + R709 < 1);
// End of Parikh automata intersection problem
