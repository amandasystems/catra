// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R2, R3, R5, R51, R52, R55, R56, R57, R58, R59, R6, R60, R61, R62, R63, R64, R65, R66, R67, R68, R69, R70, R71, R72, R73, R74;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [82, 82];
  s0 -> s0 [83, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [82, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R51 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 81];
  s0 -> s0 [0, 65535] { R52 += 1 };
  s0 -> s2 [82, 82];
  s0 -> s1 [83, 65535];
  s1 -> s1 [0, 81];
  s1 -> s2 [82, 82];
  s1 -> s1 [83, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R58 += 1 };
  s0 -> s0 [0, 65535] { R57 += 1, R58 += 1 };
  s0 -> s2 [9, 13] { R58 += 1 };
  s0 -> s1 [14, 31] { R58 += 1 };
  s0 -> s2 [32, 32] { R58 += 1 };
  s0 -> s1 [33, 65535] { R58 += 1 };
  s1 -> s1 [0, 65535] { R58 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R58 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s0 [0, 65535] { R59 += 1, R60 += 1 };
  s0 -> s1 [0, 65535] { R60 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R60 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R62 += 1 };
  s0 -> s0 [0, 65535] { R61 += 1, R62 += 1 };
  s0 -> s2 [9, 13] { R62 += 1 };
  s0 -> s1 [14, 31] { R62 += 1 };
  s0 -> s2 [32, 32] { R62 += 1 };
  s0 -> s1 [33, 65535] { R62 += 1 };
  s1 -> s1 [0, 65535] { R62 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R62 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s0 [0, 65535] { R63 += 1, R64 += 1 };
  s0 -> s1 [0, 65535] { R64 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R64 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 81] { R66 += 1 };
  s0 -> s0 [0, 65535] { R65 += 1, R66 += 1 };
  s0 -> s1 [83, 65535] { R66 += 1 };
  s1 -> s1 [0, 81] { R66 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [83, 65535] { R66 += 1 };
  accepting s0, s1;
};
automaton value2_9 {
  init s0;
  s0 -> s0 [0, 65535] { R67 += 1, R68 += 1 };
  s0 -> s1 [0, 65535] { R68 += 1, R55 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R68 += 1, R55 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 82] { R70 += 1 };
  s0 -> s0 [0, 65535] { R69 += 1, R70 += 1 };
  s0 -> s1 [91, 65535] { R70 += 1 };
  s1 -> s1 [0, 82] { R70 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [91, 65535] { R70 += 1 };
  accepting s0, s1;
};
automaton value2_11 {
  init s0;
  s0 -> s0 [0, 65535] { R71 += 1, R72 += 1 };
  s0 -> s1 [0, 65535] { R72 += 1, R56 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R72 += 1, R56 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 81] { R74 += 1 };
  s0 -> s0 [0, 65535] { R73 += 1, R74 += 1 };
  s0 -> s2 [82, 82] { R74 += 1 };
  s0 -> s3 [82, 82] { R74 += 1 };
  s0 -> s1 [91, 65535] { R74 += 1 };
  s1 -> s1 [0, 81] { R74 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [82, 82] { R74 += 1 };
  s1 -> s3 [82, 82] { R74 += 1 };
  s1 -> s1 [91, 65535] { R74 += 1 };
  s2 -> s2 [0, 82] { R74 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [91, 65535] { R74 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
};
synchronised {  // Automata constraining value1
automaton value1_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 60];
  s0 -> s1 [61, 61];
  s0 -> s0 [62, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 65535];
  accepting s1;
};
automaton value1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R0 += 1 };
  accepting s0;
};
automaton value1_2 {
  init s0;
  s0 -> s1 [0, 60] { R6 += 1 };
  s0 -> s0 [0, 65535] { R5 += 1, R6 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535] { R6 += 1 };
  s1 -> s1 [0, 60] { R6 += 1 };
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535] { R6 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value1_3 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
};
synchronised {  // Automata constraining c1
automaton c1_0 {
  init s0;
  s0 -> s1 [114, 114];
  accepting s1;
};
};
constraint R0 - R6 = 1 && R1 = R70 && R5 = 0 && R57 - R70 = -1 && R58 = R70 && R59 - R70 = -1 && R60 = R70 && R61 = 0 && R62 = 1 && R63 = 0 && R64 = 1 && R65 = 0 && R66 = R70 && R67 = 0 && R68 = R70 && R69 = 0 && -1 < R6 && R51 < 1 && R52 < 1 && 0 < R70 && (R56 = 0 || (R71 = 0 && R72 = 0 && R73 = 0 && R74 = 0));
// End of Parikh automata intersection problem
