// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R2, R34, R35, R4, R48, R49, R5, R50, R51, R52, R53, R54, R55, R56, R57, R58, R59;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s1 [44, 44];
  s0 -> s0 [45, 57];
  s0 -> s2 [58, 58];
  s0 -> s0 [59, 65535];
  s1 -> s1 [0, 57];
  s1 -> s4 [58, 58];
  s1 -> s1 [59, 65535];
  s2 -> s0 [0, 43];
  s2 -> s1 [44, 44];
  s2 -> s0 [45, 46];
  s2 -> s3 [47, 47];
  s2 -> s0 [48, 57];
  s2 -> s2 [58, 58];
  s2 -> s0 [59, 65535];
  s3 -> s0 [0, 43];
  s3 -> s1 [44, 44];
  s3 -> s0 [45, 46];
  s3 -> s0 [48, 57];
  s3 -> s2 [58, 58];
  s3 -> s0 [59, 65535];
  s4 -> s1 [0, 46];
  s4 -> s5 [47, 47];
  s4 -> s1 [48, 57];
  s4 -> s4 [58, 58];
  s4 -> s1 [59, 65535];
  s5 -> s1 [0, 46];
  s5 -> s1 [48, 57];
  s5 -> s4 [58, 58];
  s5 -> s1 [59, 65535];
  accepting s1, s4, s5;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 43] { R35 += 1 };
  s0 -> s0 [0, 65535] { R34 += 1, R35 += 1 };
  s0 -> s2 [44, 44];
  s0 -> s1 [45, 65535] { R35 += 1 };
  s1 -> s1 [0, 43] { R35 += 1 };
  s1 -> s2 [44, 44];
  s1 -> s1 [45, 65535] { R35 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
automaton uri_4 {
  init s0;
  s0 -> s0 [0, 65535] { R52 += 1, R53 += 1 };
  s0 -> s1 [0, 65535] { R53 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R53 += 1, R0 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 57] { R55 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R54 += 1, R55 += 1 };
  s0 -> s2 [0, 65535] { R55 += 1, R4 += 1, R5 += 1 };
  s0 -> s3 [58, 58] { R55 += 1 };
  s0 -> s1 [59, 65535] { R55 += 1, R5 += 1 };
  s1 -> s1 [0, 57] { R55 += 1, R5 += 1 };
  s1 -> s3 [58, 58] { R55 += 1 };
  s1 -> s1 [59, 65535] { R55 += 1, R5 += 1 };
  s2 -> s1 [0, 57] { R55 += 1, R5 += 1 };
  s2 -> s2 [0, 65535] { R55 += 1, R4 += 1, R5 += 1 };
  s2 -> s3 [58, 58] { R55 += 1 };
  s2 -> s1 [59, 65535] { R55 += 1, R5 += 1 };
  s3 -> s3 [0, 65535] { R55 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 90] { R57 += 1, R49 += 1 };
  s0 -> s0 [0, 65535] { R56 += 1, R57 += 1 };
  s0 -> s2 [0, 65535] { R57 += 1, R48 += 1, R49 += 1 };
  s0 -> s3 [91, 91] { R57 += 1, R49 += 1 };
  s0 -> s1 [92, 65535] { R57 += 1, R49 += 1 };
  s1 -> s1 [0, 65535] { R57 += 1, R49 += 1 };
  s1 -> s5 [0, 65535] { R57 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 90] { R57 += 1, R49 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R57 += 1, R48 += 1, R49 += 1 };
  s2 -> s3 [91, 91] { R57 += 1, R49 += 1 };
  s2 -> s1 [92, 65535] { R57 += 1, R49 += 1 };
  s3 -> s1 [0, 65535] { R57 += 1, R49 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R57 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R59 += 1, R50 += 1, R51 += 1 };
  s0 -> s0 [0, 65535] { R58 += 1, R59 += 1 };
  s0 -> s2 [0, 65535] { R59 += 1, R51 += 1, R2 += 1 };
  s1 -> s1 [0, 65535] { R59 += 1, R50 += 1, R51 += 1 };
  s1 -> s2 [0, 65535] { R59 += 1, R51 += 1, R2 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R59 += 1 };
  s2 -> s2 [0, 65535] { R59 += 1, R51 += 1, R2 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R59 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
};
constraint R1 - R59 = 1 && R4 = 0 && R34 = 0 && R35 = R59 && R52 = 0 && R53 = R59 && R54 = 0 && R55 = R59 && R56 = 0 && R57 = R59 && R58 = 0 && R0 != 0 && R5 != -1 && -1 < R59 && (R48 != 0 || ((R2 != 0 || ((R0 != R49 || R49 = 1 || R49 < 0) && (R0 = R49 || R49 = 1 || R0 < 1))) && (R2 = 0 || ((R0 != R49 || R49 = 1 || R49 < 0) && (R49 != 1 || -1 < R0) && (R0 = R49 || R49 = 1))))) && (R50 != 0 || ((R2 != 0 || ((R0 != R51 || R51 = 1 || R51 < 0) && (R0 = R51 || R51 = 1 || R0 < 1))) && (R2 = 0 || ((R0 != R51 || R51 = 1 || R51 < 0) && (R51 != 1 || -1 < R0) && (R0 = R51 || R51 = 1))))) && (R48 = 0 || (R2 = 0 && R0 < 0)) && (R50 = 0 || (R2 = 0 && R0 < 0));
// End of Parikh automata intersection problem
