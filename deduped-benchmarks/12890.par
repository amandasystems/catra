// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R100, R101, R102, R103, R104, R105, R106, R107, R108, R109, R110, R111, R112, R113, R114, R115, R116, R117, R118, R119, R120, R121, R122, R123, R124, R125, R126, R2, R3, R4, R5, R69, R7, R70, R8, R99;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s1 [44, 44];
  s0 -> s0 [45, 57];
  s0 -> s2 [58, 58];
  s0 -> s0 [59, 65535];
  s1 -> s1 [0, 57];
  s1 -> s4 [58, 58];
  s1 -> s1 [59, 65535];
  s2 -> s0 [0, 43];
  s2 -> s1 [44, 44];
  s2 -> s0 [45, 46];
  s2 -> s3 [47, 47];
  s2 -> s0 [48, 57];
  s2 -> s2 [58, 58];
  s2 -> s0 [59, 65535];
  s3 -> s0 [0, 43];
  s3 -> s1 [44, 44];
  s3 -> s0 [45, 46];
  s3 -> s0 [48, 57];
  s3 -> s2 [58, 58];
  s3 -> s0 [59, 65535];
  s4 -> s1 [0, 46];
  s4 -> s5 [47, 47];
  s4 -> s1 [48, 57];
  s4 -> s4 [58, 58];
  s4 -> s1 [59, 65535];
  s5 -> s1 [0, 46];
  s5 -> s1 [48, 57];
  s5 -> s4 [58, 58];
  s5 -> s1 [59, 65535];
  accepting s1, s4, s5;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 43] { R70 += 1 };
  s0 -> s0 [0, 65535] { R69 += 1, R70 += 1 };
  s0 -> s2 [44, 44];
  s0 -> s1 [45, 65535] { R70 += 1 };
  s1 -> s1 [0, 43] { R70 += 1 };
  s1 -> s2 [44, 44];
  s1 -> s1 [45, 65535] { R70 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 43] { R108 += 1 };
  s0 -> s0 [0, 65535] { R107 += 1, R108 += 1 };
  s0 -> s1 [45, 65535] { R108 += 1 };
  s1 -> s1 [0, 43] { R108 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [45, 65535] { R108 += 1 };
  accepting s0, s1;
};
automaton uri_4 {
  init s0;
  s0 -> s0 [0, 65535] { R109 += 1, R110 += 1 };
  s0 -> s1 [0, 65535] { R110 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R110 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 57] { R112 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R111 += 1, R112 += 1 };
  s0 -> s2 [0, 65535] { R112 += 1, R7 += 1, R8 += 1 };
  s0 -> s3 [58, 58] { R112 += 1 };
  s0 -> s1 [59, 65535] { R112 += 1, R8 += 1 };
  s1 -> s1 [0, 57] { R112 += 1, R8 += 1 };
  s1 -> s3 [58, 58] { R112 += 1 };
  s1 -> s1 [59, 65535] { R112 += 1, R8 += 1 };
  s2 -> s1 [0, 57] { R112 += 1, R8 += 1 };
  s2 -> s2 [0, 65535] { R112 += 1, R7 += 1, R8 += 1 };
  s2 -> s3 [58, 58] { R112 += 1 };
  s2 -> s1 [59, 65535] { R112 += 1, R8 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R112 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 90] { R114 += 1, R104 += 1 };
  s0 -> s2 [0, 65535] { R114 += 1, R103 += 1, R104 += 1 };
  s0 -> s0 [0, 65535] { R113 += 1, R114 += 1 };
  s0 -> s3 [91, 91] { R114 += 1, R104 += 1 };
  s0 -> s1 [92, 65535] { R114 += 1, R104 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R114 += 1, R104 += 1 };
  s1 -> s5 [0, 65535] { R114 += 1 };
  s2 -> s1 [0, 90] { R114 += 1, R104 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R114 += 1, R103 += 1, R104 += 1 };
  s2 -> s3 [91, 91] { R114 += 1, R104 += 1 };
  s2 -> s1 [92, 65535] { R114 += 1, R104 += 1 };
  s3 -> s1 [0, 65535] { R114 += 1, R104 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R114 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R116 += 1, R106 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R115 += 1, R116 += 1 };
  s0 -> s2 [0, 65535] { R116 += 1, R105 += 1, R106 += 1 };
  s1 -> s4 [0, 65535] { R116 += 1 };
  s1 -> s1 [0, 65535] { R116 += 1, R106 += 1, R4 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R116 += 1, R106 += 1, R4 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R116 += 1, R105 += 1, R106 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R116 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 64] { R118 += 1 };
  s0 -> s0 [0, 65535] { R117 += 1, R118 += 1 };
  s0 -> s1 [91, 65535] { R118 += 1 };
  s1 -> s1 [0, 64] { R118 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [91, 65535] { R118 += 1 };
  accepting s0, s1;
};
automaton uri_9 {
  init s0;
  s0 -> s0 [0, 65535] { R119 += 1, R120 += 1 };
  s0 -> s1 [0, 65535] { R120 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R120 += 1, R0 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 57] { R122 += 1 };
  s0 -> s0 [0, 65535] { R121 += 1, R122 += 1 };
  s0 -> s2 [0, 65535] { R122 += 1, R5 += 1 };
  s0 -> s3 [58, 58] { R122 += 1 };
  s0 -> s1 [59, 65535] { R122 += 1 };
  s1 -> s1 [0, 57] { R122 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R122 += 1 };
  s1 -> s1 [59, 65535] { R122 += 1 };
  s2 -> s1 [0, 57] { R122 += 1 };
  s2 -> s2 [0, 65535] { R122 += 1, R5 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [58, 58] { R122 += 1 };
  s2 -> s1 [59, 65535] { R122 += 1 };
  s3 -> s3 [0, 65535] { R122 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 90] { R124 += 1, R100 += 1 };
  s0 -> s0 [0, 65535] { R123 += 1, R124 += 1 };
  s0 -> s2 [0, 65535] { R124 += 1, R99 += 1, R100 += 1 };
  s0 -> s3 [91, 91] { R124 += 1, R100 += 1 };
  s0 -> s1 [92, 65535] { R124 += 1, R100 += 1 };
  s1 -> s1 [0, 65535] { R124 += 1, R100 += 1 };
  s1 -> s5 [0, 65535] { R124 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 90] { R124 += 1, R100 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R124 += 1, R99 += 1, R100 += 1 };
  s2 -> s3 [91, 91] { R124 += 1, R100 += 1 };
  s2 -> s1 [92, 65535] { R124 += 1, R100 += 1 };
  s3 -> s1 [0, 65535] { R124 += 1, R100 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R124 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 65535] { R126 += 1, R102 += 1, R3 += 1 };
  s0 -> s2 [0, 65535] { R126 += 1, R101 += 1, R102 += 1 };
  s0 -> s0 [0, 65535] { R125 += 1, R126 += 1 };
  s1 -> s1 [0, 65535] { R126 += 1, R102 += 1, R3 += 1 };
  s1 -> s4 [0, 65535] { R126 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R126 += 1, R102 += 1, R3 += 1 };
  s2 -> s2 [0, 65535] { R126 += 1, R101 += 1, R102 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R126 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
};
constraint R2 = R116 && R7 = 0 && R69 = 0 && R70 = R126 && R107 - R126 = 1 && R108 = R116 && R109 - R126 = 1 && R110 = R116 && R111 - R126 = 1 && R112 = R116 && R113 - R126 = 1 && R114 = R116 && R115 - R126 = 1 && R117 = 0 && R118 = R126 && R119 = 0 && R120 = R126 && R121 = 0 && R122 = R126 && R123 = 0 && R124 = R126 && R125 = 0 && R0 != 0 && R1 != 0 && R8 != -1 && R5 < 1 && R126 < R116 && -1 < R126 && (R99 != 0 || ((R3 != 0 || ((R0 != R100 || R100 = 1 || R100 < 0) && (R0 = R100 || R100 = 1 || R0 < 1))) && (R3 = 0 || ((R0 != R100 || R100 = 1 || R100 < 0) && (R100 != 1 || -1 < R0) && (R0 = R100 || R100 = 1))))) && (R101 != 0 || ((R3 != 0 || ((R0 != R102 || R102 = 1 || R102 < 0) && (R0 = R102 || R102 = 1 || R0 < 1))) && (R3 = 0 || ((R0 != R102 || R102 = 1 || R102 < 0) && (R102 != 1 || -1 < R0) && (R0 = R102 || R102 = 1))))) && (R103 != 0 || ((R4 != 0 || ((R1 != R104 || R104 = 1 || R104 < 0) && (R1 = R104 || R104 = 1 || R1 < 1))) && (R4 = 0 || ((R1 != R104 || R104 = 1 || R104 < 0) && (R104 != 1 || -1 < R1) && (R1 = R104 || R104 = 1))))) && (R105 != 0 || ((R4 != 0 || ((R1 != R106 || R106 = 1 || R106 < 0) && (R1 = R106 || R106 = 1 || R1 < 1))) && (R4 = 0 || ((R1 != R106 || R106 = 1 || R106 < 0) && (R106 != 1 || -1 < R1) && (R1 = R106 || R106 = 1))))) && (R99 = 0 || (R3 = 0 && R0 < 0)) && (R101 = 0 || (R3 = 0 && R0 < 0)) && (R103 = 0 || (R4 = 0 && R1 < 0)) && (R105 = 0 || (R4 = 0 && R1 < 0));
// End of Parikh automata intersection problem
