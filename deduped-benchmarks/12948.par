// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R2, R3, R4, R5;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R3 += 1 };
  s0 -> s0 [0, 65535] { R2 += 1, R3 += 1 };
  s0 -> s2 [46, 46] { R3 += 1 };
  s0 -> s1 [48, 62] { R3 += 1 };
  s0 -> s3 [63, 63] { R3 += 1 };
  s0 -> s1 [64, 65535] { R3 += 1 };
  s1 -> s1 [0, 45] { R3 += 1 };
  s1 -> s2 [46, 46] { R3 += 1 };
  s1 -> s1 [48, 62] { R3 += 1 };
  s1 -> s3 [63, 63] { R3 += 1 };
  s1 -> s1 [64, 65535] { R3 += 1 };
  s2 -> s1 [0, 45] { R3 += 1 };
  s2 -> s2 [46, 46] { R3 += 1 };
  s2 -> s1 [48, 62] { R3 += 1 };
  s2 -> s3 [63, 63] { R3 += 1 };
  s2 -> s1 [64, 114] { R3 += 1 };
  s2 -> s8 [115, 115] { R3 += 1 };
  s2 -> s1 [116, 65535] { R3 += 1 };
  s3 -> s3 [0, 45] { R3 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R3 += 1 };
  s3 -> s3 [48, 65535] { R3 += 1 };
  s4 -> s3 [0, 45] { R3 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R3 += 1 };
  s4 -> s3 [48, 114] { R3 += 1 };
  s4 -> s5 [115, 115] { R3 += 1 };
  s4 -> s3 [116, 65535] { R3 += 1 };
  s5 -> s3 [0, 45] { R3 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R3 += 1 };
  s5 -> s3 [48, 110] { R3 += 1 };
  s5 -> s6 [111, 111] { R3 += 1 };
  s5 -> s3 [112, 65535] { R3 += 1 };
  s6 -> s3 [0, 45] { R3 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R3 += 1 };
  s6 -> s3 [48, 98] { R3 += 1 };
  s6 -> s7 [99, 99] { R3 += 1 };
  s6 -> s3 [100, 65535] { R3 += 1 };
  s7 -> s3 [0, 45] { R3 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R3 += 1 };
  s7 -> s3 [48, 106] { R3 += 1 };
  s7 -> s3 [108, 65535] { R3 += 1 };
  s8 -> s1 [0, 45] { R3 += 1 };
  s8 -> s2 [46, 46] { R3 += 1 };
  s8 -> s1 [48, 62] { R3 += 1 };
  s8 -> s3 [63, 63] { R3 += 1 };
  s8 -> s1 [64, 110] { R3 += 1 };
  s8 -> s9 [111, 111] { R3 += 1 };
  s8 -> s1 [112, 65535] { R3 += 1 };
  s9 -> s1 [0, 45] { R3 += 1 };
  s9 -> s2 [46, 46] { R3 += 1 };
  s9 -> s1 [48, 62] { R3 += 1 };
  s9 -> s3 [63, 63] { R3 += 1 };
  s9 -> s1 [64, 98] { R3 += 1 };
  s9 -> s10 [99, 99] { R3 += 1 };
  s9 -> s1 [100, 65535] { R3 += 1 };
  s10 -> s1 [0, 45] { R3 += 1 };
  s10 -> s2 [46, 46] { R3 += 1 };
  s10 -> s1 [48, 62] { R3 += 1 };
  s10 -> s3 [63, 63] { R3 += 1 };
  s10 -> s1 [64, 106] { R3 += 1 };
  s10 -> s1 [108, 65535] { R3 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1, R5 += 1 };
  s0 -> s1 [0, 65535] { R5 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R5 += 1, R0 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
};
constraint R1 = R5 && R2 = 10 && R3 = R5 && R4 = 10 && R0 != 0 && 9 < R5;
// End of Parikh automata intersection problem
