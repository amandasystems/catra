// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R1050, R1054, R1055, R11, R12, R1314, R1315, R1443, R1444, R1445, R1446, R1447, R1448, R1449, R1450, R1451, R1452, R1453, R1454, R1455, R1456, R1457, R1458, R1459, R1460, R1461, R1462, R1463, R1464, R1465, R1466, R1467, R1468, R1469, R1470, R1471, R1472, R1473, R1474, R1475, R1476, R1477, R1478, R1479, R1480, R1481, R1482, R1483, R1484, R1485, R1486, R1487, R1488, R1489, R1490, R1491, R1492, R1493, R1494, R1495, R1496, R1497, R1498, R1499, R1500, R1501, R1502, R1503, R1504, R1505, R1506, R1507, R1508, R1509, R1510, R1511, R1512, R1513, R1514, R1515, R1516, R1517, R1518, R1519, R1520, R1521, R1522, R1523, R1524, R1525, R1526, R1527, R1528, R1529, R1530, R1531, R1532, R1533, R1534, R1535, R1536, R1537, R1538, R1539, R1540, R1541, R1542, R1543, R1544, R1545, R1546, R1547, R1548, R1549, R1550, R1551, R1552, R1553, R1554, R1555, R1556, R1557, R1558, R1559, R1560, R1561, R1562, R1563, R1564, R1565, R1566, R1567, R1568, R1569, R2, R3, R4, R5, R6, R7, R8, R9;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R7 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R1527 += 1 };
  s0 -> s0 [0, 65535] { R1526 += 1, R1527 += 1 };
  s0 -> s2 [46, 46] { R1527 += 1 };
  s0 -> s3 [47, 47] { R1527 += 1 };
  s0 -> s1 [48, 65535] { R1527 += 1 };
  s1 -> s1 [0, 45] { R1527 += 1 };
  s1 -> s2 [46, 46] { R1527 += 1 };
  s1 -> s3 [47, 47] { R1527 += 1 };
  s1 -> s1 [48, 65535] { R1527 += 1 };
  s2 -> s1 [0, 45] { R1527 += 1 };
  s2 -> s2 [46, 46] { R1527 += 1 };
  s2 -> s3 [47, 47] { R1527 += 1 };
  s2 -> s1 [48, 114] { R1527 += 1 };
  s2 -> s8 [115, 115] { R1527 += 1 };
  s2 -> s1 [116, 65535] { R1527 += 1 };
  s3 -> s3 [0, 45] { R1527 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R1527 += 1 };
  s3 -> s3 [47, 65535] { R1527 += 1 };
  s4 -> s3 [0, 45] { R1527 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R1527 += 1 };
  s4 -> s3 [47, 114] { R1527 += 1 };
  s4 -> s5 [115, 115] { R1527 += 1 };
  s4 -> s3 [116, 65535] { R1527 += 1 };
  s5 -> s3 [0, 45] { R1527 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R1527 += 1 };
  s5 -> s3 [47, 110] { R1527 += 1 };
  s5 -> s6 [111, 111] { R1527 += 1 };
  s5 -> s3 [112, 65535] { R1527 += 1 };
  s6 -> s3 [0, 45] { R1527 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R1527 += 1 };
  s6 -> s3 [47, 98] { R1527 += 1 };
  s6 -> s7 [99, 99] { R1527 += 1 };
  s6 -> s3 [100, 65535] { R1527 += 1 };
  s7 -> s3 [0, 45] { R1527 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R1527 += 1 };
  s7 -> s3 [47, 106] { R1527 += 1 };
  s7 -> s3 [108, 65535] { R1527 += 1 };
  s8 -> s1 [0, 45] { R1527 += 1 };
  s8 -> s2 [46, 46] { R1527 += 1 };
  s8 -> s3 [47, 47] { R1527 += 1 };
  s8 -> s1 [48, 110] { R1527 += 1 };
  s8 -> s9 [111, 111] { R1527 += 1 };
  s8 -> s1 [112, 65535] { R1527 += 1 };
  s9 -> s1 [0, 45] { R1527 += 1 };
  s9 -> s2 [46, 46] { R1527 += 1 };
  s9 -> s3 [47, 47] { R1527 += 1 };
  s9 -> s1 [48, 98] { R1527 += 1 };
  s9 -> s10 [99, 99] { R1527 += 1 };
  s9 -> s1 [100, 65535] { R1527 += 1 };
  s10 -> s1 [0, 45] { R1527 += 1 };
  s10 -> s2 [46, 46] { R1527 += 1 };
  s10 -> s3 [47, 47] { R1527 += 1 };
  s10 -> s1 [48, 106] { R1527 += 1 };
  s10 -> s1 [108, 65535] { R1527 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R1529 += 1, R6 += 1 };
  s0 -> s0 [0, 65535] { R1528 += 1, R1529 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R1529 += 1, R6 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R1531 += 1, R1315 += 1 };
  s0 -> s0 [0, 65535] { R1530 += 1, R1531 += 1 };
  s0 -> s2 [0, 65535] { R1531 += 1, R1314 += 1, R1315 += 1 };
  s0 -> s3 [47, 47] { R1531 += 1 };
  s0 -> s1 [48, 65535] { R1531 += 1, R1315 += 1 };
  s1 -> s1 [0, 46] { R1531 += 1, R1315 += 1 };
  s1 -> s3 [47, 47] { R1531 += 1 };
  s1 -> s1 [48, 65535] { R1531 += 1, R1315 += 1 };
  s2 -> s1 [0, 46] { R1531 += 1, R1315 += 1 };
  s2 -> s2 [0, 65535] { R1531 += 1, R1314 += 1, R1315 += 1 };
  s2 -> s3 [47, 47] { R1531 += 1 };
  s2 -> s1 [48, 65535] { R1531 += 1, R1315 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1531 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 65535] { R1533 += 1, R1488 += 1, R1489 += 1 };
  s0 -> s2 [0, 65535] { R1533 += 1, R1489 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R1532 += 1, R1533 += 1 };
  s1 -> s1 [0, 65535] { R1533 += 1, R1488 += 1, R1489 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R1533 += 1, R1489 += 1, R3 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1533 += 1, R1489 += 1, R3 += 1 };
  s2 -> s4 [0, 65535] { R1533 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1533 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 65535] { R1535 += 1, R1491 += 1, R1444 += 1, R1445 += 1 };
  s0 -> s0 [0, 65535] { R1534 += 1, R1535 += 1 };
  s0 -> s2 [0, 65535] { R1535 += 1, R1490 += 1, R1491 += 1 };
  s0 -> s3 [63, 63] { R1535 += 1, R1491 += 1, R1445 += 1 };
  s1 -> s1 [0, 65535] { R1535 += 1, R1491 += 1, R1444 += 1, R1445 += 1 };
  s1 -> s3 [63, 63] { R1535 += 1, R1491 += 1, R1445 += 1 };
  s2 -> s1 [0, 65535] { R1535 += 1, R1491 += 1, R1444 += 1, R1445 += 1 };
  s2 -> s2 [0, 65535] { R1535 += 1, R1490 += 1, R1491 += 1 };
  s2 -> s3 [63, 63] { R1535 += 1, R1491 += 1, R1445 += 1 };
  s3 -> s4 [0, 65535] { R1535 += 1 };
  s3 -> s3 [0, 65535] { R1535 += 1, R1491 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1535 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
automaton uri_7 {
  init s0;
  s0 -> s0 [0, 65535] { R1536 += 1, R1537 += 1 };
  s0 -> s1 [0, 65535] { R1537 += 1, R1492 += 1, R1493 += 1 };
  s0 -> s2 [0, 65535] { R1537 += 1, R1493 += 1, R1447 += 1, R8 += 1 };
  s0 -> s3 [0, 65535] { R1537 += 1, R1493 += 1, R1446 += 1, R1447 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R1537 += 1, R1492 += 1, R1493 += 1 };
  s1 -> s2 [0, 65535] { R1537 += 1, R1493 += 1, R1447 += 1, R8 += 1 };
  s1 -> s3 [0, 65535] { R1537 += 1, R1493 += 1, R1446 += 1, R1447 += 1 };
  s2 -> s6 [0, 65535] { R1537 += 1, R1493 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R1537 += 1 };
  s2 -> s2 [0, 65535] { R1537 += 1, R1493 += 1, R1447 += 1, R8 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R1537 += 1 };
  s3 -> s2 [0, 65535] { R1537 += 1, R1493 += 1, R1447 += 1, R8 += 1 };
  s3 -> s3 [0, 65535] { R1537 += 1, R1493 += 1, R1446 += 1, R1447 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1537 += 1 };
  s6 -> s6 [0, 65535] { R1537 += 1, R1493 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R1537 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 65535] { R1539 += 1, R1495 += 1, R1452 += 1, R1453 += 1 };
  s0 -> s2 [0, 65535] { R1539 += 1, R1494 += 1, R1495 += 1 };
  s0 -> s0 [0, 65535] { R1538 += 1, R1539 += 1 };
  s0 -> s3 [0, 65535] { R1539 += 1, R1495 += 1, R1453 += 1, R0 += 1 };
  s1 -> s1 [0, 65535] { R1539 += 1, R1495 += 1, R1452 += 1, R1453 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R1539 += 1 };
  s1 -> s3 [0, 65535] { R1539 += 1, R1495 += 1, R1453 += 1, R0 += 1 };
  s2 -> s1 [0, 65535] { R1539 += 1, R1495 += 1, R1452 += 1, R1453 += 1 };
  s2 -> s2 [0, 65535] { R1539 += 1, R1494 += 1, R1495 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R1539 += 1, R1495 += 1, R1453 += 1, R0 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R1539 += 1 };
  s3 -> s6 [0, 65535] { R1539 += 1, R1495 += 1 };
  s3 -> s3 [0, 65535] { R1539 += 1, R1495 += 1, R1453 += 1, R0 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1539 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R1539 += 1 };
  s6 -> s6 [0, 65535] { R1539 += 1, R1495 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 58] { R1541 += 1, R1497 += 1, R1455 += 1, R12 += 1 };
  s0 -> s2 [0, 65535] { R1541 += 1, R1497 += 1, R1454 += 1, R1455 += 1 };
  s0 -> s3 [0, 65535] { R1541 += 1, R1497 += 1, R1455 += 1, R11 += 1, R12 += 1 };
  s0 -> s4 [0, 65535] { R1541 += 1, R1496 += 1, R1497 += 1 };
  s0 -> s0 [0, 65535] { R1540 += 1, R1541 += 1 };
  s0 -> s5 [59, 59] { R1541 += 1, R1497 += 1, R1455 += 1 };
  s0 -> s1 [60, 65535] { R1541 += 1, R1497 += 1, R1455 += 1, R12 += 1 };
  s1 -> s1 [0, 58] { R1541 += 1, R1497 += 1, R1455 += 1, R12 += 1 };
  s1 -> s5 [59, 59] { R1541 += 1, R1497 += 1, R1455 += 1 };
  s1 -> s1 [60, 65535] { R1541 += 1, R1497 += 1, R1455 += 1, R12 += 1 };
  s2 -> s1 [0, 58] { R1541 += 1, R1497 += 1, R1455 += 1, R12 += 1 };
  s2 -> s2 [0, 65535] { R1541 += 1, R1497 += 1, R1454 += 1, R1455 += 1 };
  s2 -> s3 [0, 65535] { R1541 += 1, R1497 += 1, R1455 += 1, R11 += 1, R12 += 1 };
  s2 -> s5 [59, 59] { R1541 += 1, R1497 += 1, R1455 += 1 };
  s2 -> s1 [60, 65535] { R1541 += 1, R1497 += 1, R1455 += 1, R12 += 1 };
  s3 -> s1 [0, 58] { R1541 += 1, R1497 += 1, R1455 += 1, R12 += 1 };
  s3 -> s3 [0, 65535] { R1541 += 1, R1497 += 1, R1455 += 1, R11 += 1, R12 += 1 };
  s3 -> s5 [59, 59] { R1541 += 1, R1497 += 1, R1455 += 1 };
  s3 -> s1 [60, 65535] { R1541 += 1, R1497 += 1, R1455 += 1, R12 += 1 };
  s4 -> s1 [0, 58] { R1541 += 1, R1497 += 1, R1455 += 1, R12 += 1 };
  s4 -> s2 [0, 65535] { R1541 += 1, R1497 += 1, R1454 += 1, R1455 += 1 };
  s4 -> s3 [0, 65535] { R1541 += 1, R1497 += 1, R1455 += 1, R11 += 1, R12 += 1 };
  s4 -> s4 [0, 65535] { R1541 += 1, R1496 += 1, R1497 += 1 };
  s4 -> s5 [59, 59] { R1541 += 1, R1497 += 1, R1455 += 1 };
  s4 -> s1 [60, 65535] { R1541 += 1, R1497 += 1, R1455 += 1, R12 += 1 };
  s5 -> s6 [0, 65535] { R1541 += 1 };
  s5 -> s7 [0, 65535] { R1541 += 1, R1497 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s5 [0, 65535] { R1541 += 1, R1497 += 1, R1455 += 1 };
  s6 -> s6 [0, 65535] { R1541 += 1 };
  s6 -> s8 [0, 65535];
  s7 -> s6 [0, 65535] { R1541 += 1 };
  s7 -> s7 [0, 65535] { R1541 += 1, R1497 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  accepting s5, s6, s7, s8;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 37] { R1543 += 1, R1499 += 1, R1457 += 1 };
  s0 -> s2 [0, 65535] { R1543 += 1, R1499 += 1, R1457 += 1, R1050 += 1 };
  s0 -> s3 [0, 65535] { R1543 += 1, R1498 += 1, R1499 += 1 };
  s0 -> s4 [0, 65535] { R1543 += 1, R1499 += 1, R1456 += 1, R1457 += 1 };
  s0 -> s0 [0, 65535] { R1542 += 1, R1543 += 1 };
  s0 -> s5 [38, 38] { R1543 += 1, R1499 += 1, R1457 += 1 };
  s0 -> s1 [39, 65535] { R1543 += 1, R1499 += 1, R1457 += 1 };
  s1 -> s1 [0, 37] { R1543 += 1, R1499 += 1, R1457 += 1 };
  s1 -> s6 [0, 65535] { R1543 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s1 [0, 65535] { R1543 += 1, R1499 += 1 };
  s1 -> s5 [38, 38] { R1543 += 1, R1499 += 1, R1457 += 1 };
  s1 -> s1 [39, 65535] { R1543 += 1, R1499 += 1, R1457 += 1 };
  s2 -> s1 [0, 37] { R1543 += 1, R1499 += 1, R1457 += 1 };
  s2 -> s2 [0, 65535] { R1543 += 1, R1499 += 1, R1457 += 1, R1050 += 1 };
  s2 -> s6 [0, 65535] { R1543 += 1 };
  s2 -> s8 [0, 65535] { R1543 += 1, R1499 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s5 [38, 38] { R1543 += 1, R1499 += 1, R1457 += 1 };
  s2 -> s1 [39, 65535] { R1543 += 1, R1499 += 1, R1457 += 1 };
  s3 -> s1 [0, 37] { R1543 += 1, R1499 += 1, R1457 += 1 };
  s3 -> s2 [0, 65535] { R1543 += 1, R1499 += 1, R1457 += 1, R1050 += 1 };
  s3 -> s3 [0, 65535] { R1543 += 1, R1498 += 1, R1499 += 1 };
  s3 -> s4 [0, 65535] { R1543 += 1, R1499 += 1, R1456 += 1, R1457 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s5 [38, 38] { R1543 += 1, R1499 += 1, R1457 += 1 };
  s3 -> s1 [39, 65535] { R1543 += 1, R1499 += 1, R1457 += 1 };
  s4 -> s1 [0, 37] { R1543 += 1, R1499 += 1, R1457 += 1 };
  s4 -> s2 [0, 65535] { R1543 += 1, R1499 += 1, R1457 += 1, R1050 += 1 };
  s4 -> s6 [0, 65535] { R1543 += 1 };
  s4 -> s4 [0, 65535] { R1543 += 1, R1499 += 1, R1456 += 1, R1457 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s5 [38, 38] { R1543 += 1, R1499 += 1, R1457 += 1 };
  s4 -> s1 [39, 65535] { R1543 += 1, R1499 += 1, R1457 += 1 };
  s5 -> s5 [0, 65535] { R1543 += 1, R1499 += 1, R1457 += 1 };
  s6 -> s6 [0, 65535] { R1543 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  s8 -> s6 [0, 65535] { R1543 += 1 };
  s8 -> s8 [0, 65535] { R1543 += 1, R1499 += 1 };
  s8 -> s7 [0, 65535];
  accepting s3, s4, s8, s2, s6, s1, s7, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 63] { R1545 += 1, R1501 += 1 };
  s0 -> s2 [0, 65535] { R1545 += 1, R1500 += 1, R1501 += 1 };
  s0 -> s0 [0, 65535] { R1544 += 1, R1545 += 1 };
  s0 -> s3 [64, 64] { R1545 += 1, R1501 += 1 };
  s0 -> s1 [65, 65535] { R1545 += 1, R1501 += 1 };
  s1 -> s1 [0, 63] { R1545 += 1, R1501 += 1 };
  s1 -> s3 [64, 64] { R1545 += 1, R1501 += 1 };
  s1 -> s1 [65, 65535] { R1545 += 1, R1501 += 1 };
  s2 -> s1 [0, 63] { R1545 += 1, R1501 += 1 };
  s2 -> s2 [0, 65535] { R1545 += 1, R1500 += 1, R1501 += 1 };
  s2 -> s3 [64, 64] { R1545 += 1, R1501 += 1 };
  s2 -> s1 [65, 65535] { R1545 += 1, R1501 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1545 += 1, R1501 += 1 };
  s3 -> s5 [0, 65535] { R1545 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1545 += 1 };
  accepting s3, s4, s5;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 65535] { R1547 += 1, R1502 += 1, R1503 += 1 };
  s0 -> s0 [0, 65535] { R1546 += 1, R1547 += 1 };
  s0 -> s2 [0, 65535] { R1547 += 1, R1503 += 1, R5 += 1 };
  s1 -> s1 [0, 65535] { R1547 += 1, R1502 += 1, R1503 += 1 };
  s1 -> s2 [0, 65535] { R1547 += 1, R1503 += 1, R5 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R1547 += 1 };
  s2 -> s2 [0, 65535] { R1547 += 1, R1503 += 1, R5 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1547 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 36] { R1549 += 1, R1505 += 1, R1467 += 1 };
  s0 -> s2 [0, 65535] { R1549 += 1, R1505 += 1, R1466 += 1, R1467 += 1 };
  s0 -> s3 [0, 65535] { R1549 += 1, R1504 += 1, R1505 += 1 };
  s0 -> s0 [0, 65535] { R1548 += 1, R1549 += 1 };
  s0 -> s1 [38, 42] { R1549 += 1, R1505 += 1, R1467 += 1 };
  s0 -> s1 [44, 57] { R1549 += 1, R1505 += 1, R1467 += 1 };
  s0 -> s1 [59, 63] { R1549 += 1, R1505 += 1, R1467 += 1 };
  s0 -> s1 [65, 65535] { R1549 += 1, R1505 += 1, R1467 += 1 };
  s1 -> s1 [0, 36] { R1549 += 1, R1505 += 1, R1467 += 1 };
  s1 -> s1 [0, 65535] { R1549 += 1, R1505 += 1 };
  s1 -> s5 [0, 65535] { R1549 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [38, 42] { R1549 += 1, R1505 += 1, R1467 += 1 };
  s1 -> s1 [44, 57] { R1549 += 1, R1505 += 1, R1467 += 1 };
  s1 -> s1 [59, 63] { R1549 += 1, R1505 += 1, R1467 += 1 };
  s1 -> s1 [65, 65535] { R1549 += 1, R1505 += 1, R1467 += 1 };
  s2 -> s1 [0, 36] { R1549 += 1, R1505 += 1, R1467 += 1 };
  s2 -> s2 [0, 65535] { R1549 += 1, R1505 += 1, R1466 += 1, R1467 += 1 };
  s2 -> s5 [0, 65535] { R1549 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [38, 42] { R1549 += 1, R1505 += 1, R1467 += 1 };
  s2 -> s1 [44, 57] { R1549 += 1, R1505 += 1, R1467 += 1 };
  s2 -> s1 [59, 63] { R1549 += 1, R1505 += 1, R1467 += 1 };
  s2 -> s1 [65, 65535] { R1549 += 1, R1505 += 1, R1467 += 1 };
  s3 -> s1 [0, 36] { R1549 += 1, R1505 += 1, R1467 += 1 };
  s3 -> s2 [0, 65535] { R1549 += 1, R1505 += 1, R1466 += 1, R1467 += 1 };
  s3 -> s3 [0, 65535] { R1549 += 1, R1504 += 1, R1505 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [38, 42] { R1549 += 1, R1505 += 1, R1467 += 1 };
  s3 -> s1 [44, 57] { R1549 += 1, R1505 += 1, R1467 += 1 };
  s3 -> s1 [59, 63] { R1549 += 1, R1505 += 1, R1467 += 1 };
  s3 -> s1 [65, 65535] { R1549 += 1, R1505 += 1, R1467 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1549 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R1551 += 1, R1507 += 1, R1469 += 1, R2 += 1 };
  s0 -> s2 [0, 65535] { R1551 += 1, R1506 += 1, R1507 += 1 };
  s0 -> s0 [0, 65535] { R1550 += 1, R1551 += 1 };
  s0 -> s3 [0, 65535] { R1551 += 1, R1507 += 1, R1468 += 1, R1469 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R1551 += 1, R1507 += 1, R1469 += 1, R2 += 1 };
  s1 -> s5 [0, 65535] { R1551 += 1 };
  s1 -> s6 [0, 65535] { R1551 += 1, R1507 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R1551 += 1, R1507 += 1, R1469 += 1, R2 += 1 };
  s2 -> s2 [0, 65535] { R1551 += 1, R1506 += 1, R1507 += 1 };
  s2 -> s3 [0, 65535] { R1551 += 1, R1507 += 1, R1468 += 1, R1469 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R1551 += 1, R1507 += 1, R1469 += 1, R2 += 1 };
  s3 -> s5 [0, 65535] { R1551 += 1 };
  s3 -> s3 [0, 65535] { R1551 += 1, R1507 += 1, R1468 += 1, R1469 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1551 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R1551 += 1 };
  s6 -> s6 [0, 65535] { R1551 += 1, R1507 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 43] { R1553 += 1, R1509 += 1, R1471 += 1 };
  s0 -> s2 [0, 65535] { R1553 += 1, R1509 += 1, R1470 += 1, R1471 += 1 };
  s0 -> s3 [0, 65535] { R1553 += 1, R1508 += 1, R1509 += 1 };
  s0 -> s0 [0, 65535] { R1552 += 1, R1553 += 1 };
  s0 -> s1 [45, 57] { R1553 += 1, R1509 += 1, R1471 += 1 };
  s0 -> s4 [58, 58] { R1553 += 1, R1509 += 1, R1471 += 1 };
  s0 -> s1 [59, 65535] { R1553 += 1, R1509 += 1, R1471 += 1 };
  s1 -> s1 [0, 43] { R1553 += 1, R1509 += 1, R1471 += 1 };
  s1 -> s1 [45, 57] { R1553 += 1, R1509 += 1, R1471 += 1 };
  s1 -> s4 [58, 58] { R1553 += 1, R1509 += 1, R1471 += 1 };
  s1 -> s1 [59, 65535] { R1553 += 1, R1509 += 1, R1471 += 1 };
  s2 -> s1 [0, 43] { R1553 += 1, R1509 += 1, R1471 += 1 };
  s2 -> s2 [0, 65535] { R1553 += 1, R1509 += 1, R1470 += 1, R1471 += 1 };
  s2 -> s1 [45, 57] { R1553 += 1, R1509 += 1, R1471 += 1 };
  s2 -> s4 [58, 58] { R1553 += 1, R1509 += 1, R1471 += 1 };
  s2 -> s1 [59, 65535] { R1553 += 1, R1509 += 1, R1471 += 1 };
  s3 -> s1 [0, 43] { R1553 += 1, R1509 += 1, R1471 += 1 };
  s3 -> s2 [0, 65535] { R1553 += 1, R1509 += 1, R1470 += 1, R1471 += 1 };
  s3 -> s3 [0, 65535] { R1553 += 1, R1508 += 1, R1509 += 1 };
  s3 -> s1 [45, 57] { R1553 += 1, R1509 += 1, R1471 += 1 };
  s3 -> s4 [58, 58] { R1553 += 1, R1509 += 1, R1471 += 1 };
  s3 -> s1 [59, 65535] { R1553 += 1, R1509 += 1, R1471 += 1 };
  s4 -> s4 [0, 43] { R1553 += 1, R1509 += 1, R1471 += 1 };
  s4 -> s4 [0, 65535] { R1553 += 1, R1509 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R1553 += 1 };
  s4 -> s4 [45, 65535] { R1553 += 1, R1509 += 1, R1471 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1553 += 1 };
  accepting s4, s5, s6;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R1555 += 1, R1510 += 1, R1511 += 1 };
  s0 -> s2 [0, 65535] { R1555 += 1, R1511 += 1, R1472 += 1, R1473 += 1 };
  s0 -> s3 [0, 65535] { R1555 += 1, R1511 += 1, R1473 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R1554 += 1, R1555 += 1 };
  s1 -> s1 [0, 65535] { R1555 += 1, R1510 += 1, R1511 += 1 };
  s1 -> s2 [0, 65535] { R1555 += 1, R1511 += 1, R1472 += 1, R1473 += 1 };
  s1 -> s3 [0, 65535] { R1555 += 1, R1511 += 1, R1473 += 1, R4 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1555 += 1, R1511 += 1, R1472 += 1, R1473 += 1 };
  s2 -> s3 [0, 65535] { R1555 += 1, R1511 += 1, R1473 += 1, R4 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R1555 += 1 };
  s3 -> s4 [0, 65535] { R1555 += 1, R1511 += 1 };
  s3 -> s3 [0, 65535] { R1555 += 1, R1511 += 1, R1473 += 1, R4 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R1555 += 1 };
  s4 -> s4 [0, 65535] { R1555 += 1, R1511 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R1555 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1555 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 57] { R1557 += 1, R1513 += 1, R1475 += 1, R1055 += 1 };
  s0 -> s2 [0, 65535] { R1557 += 1, R1512 += 1, R1513 += 1 };
  s0 -> s3 [0, 65535] { R1557 += 1, R1513 += 1, R1475 += 1, R1054 += 1, R1055 += 1 };
  s0 -> s4 [0, 65535] { R1557 += 1, R1513 += 1, R1474 += 1, R1475 += 1 };
  s0 -> s0 [0, 65535] { R1556 += 1, R1557 += 1 };
  s0 -> s5 [58, 58] { R1557 += 1, R1513 += 1, R1475 += 1 };
  s0 -> s1 [59, 65535] { R1557 += 1, R1513 += 1, R1475 += 1, R1055 += 1 };
  s1 -> s1 [0, 57] { R1557 += 1, R1513 += 1, R1475 += 1, R1055 += 1 };
  s1 -> s5 [58, 58] { R1557 += 1, R1513 += 1, R1475 += 1 };
  s1 -> s1 [59, 65535] { R1557 += 1, R1513 += 1, R1475 += 1, R1055 += 1 };
  s2 -> s1 [0, 57] { R1557 += 1, R1513 += 1, R1475 += 1, R1055 += 1 };
  s2 -> s2 [0, 65535] { R1557 += 1, R1512 += 1, R1513 += 1 };
  s2 -> s3 [0, 65535] { R1557 += 1, R1513 += 1, R1475 += 1, R1054 += 1, R1055 += 1 };
  s2 -> s4 [0, 65535] { R1557 += 1, R1513 += 1, R1474 += 1, R1475 += 1 };
  s2 -> s5 [58, 58] { R1557 += 1, R1513 += 1, R1475 += 1 };
  s2 -> s1 [59, 65535] { R1557 += 1, R1513 += 1, R1475 += 1, R1055 += 1 };
  s3 -> s1 [0, 57] { R1557 += 1, R1513 += 1, R1475 += 1, R1055 += 1 };
  s3 -> s3 [0, 65535] { R1557 += 1, R1513 += 1, R1475 += 1, R1054 += 1, R1055 += 1 };
  s3 -> s5 [58, 58] { R1557 += 1, R1513 += 1, R1475 += 1 };
  s3 -> s1 [59, 65535] { R1557 += 1, R1513 += 1, R1475 += 1, R1055 += 1 };
  s4 -> s1 [0, 57] { R1557 += 1, R1513 += 1, R1475 += 1, R1055 += 1 };
  s4 -> s3 [0, 65535] { R1557 += 1, R1513 += 1, R1475 += 1, R1054 += 1, R1055 += 1 };
  s4 -> s4 [0, 65535] { R1557 += 1, R1513 += 1, R1474 += 1, R1475 += 1 };
  s4 -> s5 [58, 58] { R1557 += 1, R1513 += 1, R1475 += 1 };
  s4 -> s1 [59, 65535] { R1557 += 1, R1513 += 1, R1475 += 1, R1055 += 1 };
  s5 -> s6 [0, 65535] { R1557 += 1, R1513 += 1 };
  s5 -> s7 [0, 65535];
  s5 -> s8 [0, 65535] { R1557 += 1 };
  s5 -> s5 [0, 65535] { R1557 += 1, R1513 += 1, R1475 += 1 };
  s6 -> s6 [0, 65535] { R1557 += 1, R1513 += 1 };
  s6 -> s7 [0, 65535];
  s6 -> s8 [0, 65535] { R1557 += 1 };
  s7 -> s7 [0, 65535];
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R1557 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 90] { R1559 += 1, R1515 += 1, R1477 += 1, R1449 += 1 };
  s0 -> s2 [0, 65535] { R1559 += 1, R1515 += 1, R1476 += 1, R1477 += 1 };
  s0 -> s3 [0, 65535] { R1559 += 1, R1514 += 1, R1515 += 1 };
  s0 -> s0 [0, 65535] { R1558 += 1, R1559 += 1 };
  s0 -> s4 [0, 65535] { R1559 += 1, R1515 += 1, R1477 += 1, R1448 += 1, R1449 += 1 };
  s0 -> s5 [91, 91] { R1559 += 1, R1515 += 1, R1477 += 1, R1449 += 1 };
  s0 -> s1 [92, 65535] { R1559 += 1, R1515 += 1, R1477 += 1, R1449 += 1 };
  s1 -> s8 [0, 65535] { R1559 += 1, R1515 += 1 };
  s1 -> s1 [0, 65535] { R1559 += 1, R1515 += 1, R1477 += 1, R1449 += 1 };
  s1 -> s6 [0, 65535] { R1559 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s9 [0, 65535] { R1559 += 1, R1515 += 1, R1477 += 1 };
  s2 -> s1 [0, 90] { R1559 += 1, R1515 += 1, R1477 += 1, R1449 += 1 };
  s2 -> s2 [0, 65535] { R1559 += 1, R1515 += 1, R1476 += 1, R1477 += 1 };
  s2 -> s4 [0, 65535] { R1559 += 1, R1515 += 1, R1477 += 1, R1448 += 1, R1449 += 1 };
  s2 -> s6 [0, 65535] { R1559 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s5 [91, 91] { R1559 += 1, R1515 += 1, R1477 += 1, R1449 += 1 };
  s2 -> s1 [92, 65535] { R1559 += 1, R1515 += 1, R1477 += 1, R1449 += 1 };
  s3 -> s1 [0, 90] { R1559 += 1, R1515 += 1, R1477 += 1, R1449 += 1 };
  s3 -> s2 [0, 65535] { R1559 += 1, R1515 += 1, R1476 += 1, R1477 += 1 };
  s3 -> s3 [0, 65535] { R1559 += 1, R1514 += 1, R1515 += 1 };
  s3 -> s4 [0, 65535] { R1559 += 1, R1515 += 1, R1477 += 1, R1448 += 1, R1449 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s5 [91, 91] { R1559 += 1, R1515 += 1, R1477 += 1, R1449 += 1 };
  s3 -> s1 [92, 65535] { R1559 += 1, R1515 += 1, R1477 += 1, R1449 += 1 };
  s4 -> s1 [0, 90] { R1559 += 1, R1515 += 1, R1477 += 1, R1449 += 1 };
  s4 -> s4 [0, 65535] { R1559 += 1, R1515 += 1, R1477 += 1, R1448 += 1, R1449 += 1 };
  s4 -> s6 [0, 65535] { R1559 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s8 [0, 65535] { R1559 += 1, R1515 += 1 };
  s4 -> s5 [91, 91] { R1559 += 1, R1515 += 1, R1477 += 1, R1449 += 1 };
  s4 -> s1 [92, 65535] { R1559 += 1, R1515 += 1, R1477 += 1, R1449 += 1 };
  s5 -> s1 [0, 65535] { R1559 += 1, R1515 += 1, R1477 += 1, R1449 += 1 };
  s6 -> s6 [0, 65535] { R1559 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  s8 -> s6 [0, 65535] { R1559 += 1 };
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R1559 += 1, R1515 += 1 };
  s9 -> s8 [0, 65535] { R1559 += 1, R1515 += 1 };
  s9 -> s6 [0, 65535] { R1559 += 1 };
  s9 -> s7 [0, 65535];
  s9 -> s9 [0, 65535] { R1559 += 1, R1515 += 1, R1477 += 1 };
  accepting s3, s4, s8, s2, s9, s6, s1, s7, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 65535] { R1561 += 1, R1517 += 1, R1479 += 1, R1451 += 1, R9 += 1 };
  s0 -> s2 [0, 65535] { R1561 += 1, R1517 += 1, R1478 += 1, R1479 += 1 };
  s0 -> s3 [0, 65535] { R1561 += 1, R1517 += 1, R1479 += 1, R1450 += 1, R1451 += 1 };
  s0 -> s0 [0, 65535] { R1560 += 1, R1561 += 1 };
  s0 -> s4 [0, 65535] { R1561 += 1, R1516 += 1, R1517 += 1 };
  s1 -> s1 [0, 65535] { R1561 += 1, R1517 += 1, R1479 += 1, R1451 += 1, R9 += 1 };
  s1 -> s6 [0, 65535] { R1561 += 1 };
  s1 -> s7 [0, 65535] { R1561 += 1, R1517 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s8 [0, 65535] { R1561 += 1, R1517 += 1, R1479 += 1 };
  s2 -> s1 [0, 65535] { R1561 += 1, R1517 += 1, R1479 += 1, R1451 += 1, R9 += 1 };
  s2 -> s2 [0, 65535] { R1561 += 1, R1517 += 1, R1478 += 1, R1479 += 1 };
  s2 -> s6 [0, 65535] { R1561 += 1 };
  s2 -> s3 [0, 65535] { R1561 += 1, R1517 += 1, R1479 += 1, R1450 += 1, R1451 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s1 [0, 65535] { R1561 += 1, R1517 += 1, R1479 += 1, R1451 += 1, R9 += 1 };
  s3 -> s6 [0, 65535] { R1561 += 1 };
  s3 -> s3 [0, 65535] { R1561 += 1, R1517 += 1, R1479 += 1, R1450 += 1, R1451 += 1 };
  s3 -> s7 [0, 65535] { R1561 += 1, R1517 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s1 [0, 65535] { R1561 += 1, R1517 += 1, R1479 += 1, R1451 += 1, R9 += 1 };
  s4 -> s2 [0, 65535] { R1561 += 1, R1517 += 1, R1478 += 1, R1479 += 1 };
  s4 -> s3 [0, 65535] { R1561 += 1, R1517 += 1, R1479 += 1, R1450 += 1, R1451 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1561 += 1, R1516 += 1, R1517 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1561 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R1561 += 1 };
  s7 -> s7 [0, 65535] { R1561 += 1, R1517 += 1 };
  s7 -> s5 [0, 65535];
  s8 -> s6 [0, 65535] { R1561 += 1 };
  s8 -> s7 [0, 65535] { R1561 += 1, R1517 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s8 [0, 65535] { R1561 += 1, R1517 += 1, R1479 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 57] { R1563 += 1, R1519 += 1, R1481 += 1, R1459 += 1 };
  s0 -> s2 [0, 65535] { R1563 += 1, R1519 += 1, R1481 += 1, R1458 += 1, R1459 += 1 };
  s0 -> s3 [0, 65535] { R1563 += 1, R1518 += 1, R1519 += 1 };
  s0 -> s4 [0, 65535] { R1563 += 1, R1519 += 1, R1480 += 1, R1481 += 1 };
  s0 -> s0 [0, 65535] { R1562 += 1, R1563 += 1 };
  s0 -> s1 [59, 65535] { R1563 += 1, R1519 += 1, R1481 += 1, R1459 += 1 };
  s1 -> s1 [0, 57] { R1563 += 1, R1519 += 1, R1481 += 1, R1459 += 1 };
  s1 -> s5 [0, 65535] { R1563 += 1 };
  s1 -> s7 [0, 65535] { R1563 += 1, R1519 += 1 };
  s1 -> s1 [0, 65535] { R1563 += 1, R1519 += 1, R1481 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [59, 65535] { R1563 += 1, R1519 += 1, R1481 += 1, R1459 += 1 };
  s2 -> s1 [0, 57] { R1563 += 1, R1519 += 1, R1481 += 1, R1459 += 1 };
  s2 -> s2 [0, 65535] { R1563 += 1, R1519 += 1, R1481 += 1, R1458 += 1, R1459 += 1 };
  s2 -> s5 [0, 65535] { R1563 += 1 };
  s2 -> s7 [0, 65535] { R1563 += 1, R1519 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s1 [59, 65535] { R1563 += 1, R1519 += 1, R1481 += 1, R1459 += 1 };
  s3 -> s1 [0, 57] { R1563 += 1, R1519 += 1, R1481 += 1, R1459 += 1 };
  s3 -> s2 [0, 65535] { R1563 += 1, R1519 += 1, R1481 += 1, R1458 += 1, R1459 += 1 };
  s3 -> s3 [0, 65535] { R1563 += 1, R1518 += 1, R1519 += 1 };
  s3 -> s4 [0, 65535] { R1563 += 1, R1519 += 1, R1480 += 1, R1481 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s1 [59, 65535] { R1563 += 1, R1519 += 1, R1481 += 1, R1459 += 1 };
  s4 -> s1 [0, 57] { R1563 += 1, R1519 += 1, R1481 += 1, R1459 += 1 };
  s4 -> s2 [0, 65535] { R1563 += 1, R1519 += 1, R1481 += 1, R1458 += 1, R1459 += 1 };
  s4 -> s5 [0, 65535] { R1563 += 1 };
  s4 -> s4 [0, 65535] { R1563 += 1, R1519 += 1, R1480 += 1, R1481 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s1 [59, 65535] { R1563 += 1, R1519 += 1, R1481 += 1, R1459 += 1 };
  s5 -> s5 [0, 65535] { R1563 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R1563 += 1 };
  s7 -> s7 [0, 65535] { R1563 += 1, R1519 += 1 };
  s7 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 65535] { R1565 += 1, R1521 += 1, R1482 += 1, R1483 += 1 };
  s0 -> s2 [0, 65535] { R1565 += 1, R1521 += 1, R1483 += 1, R1461 += 1, R1 += 1 };
  s0 -> s3 [0, 65535] { R1565 += 1, R1521 += 1, R1483 += 1, R1460 += 1, R1461 += 1 };
  s0 -> s0 [0, 65535] { R1564 += 1, R1565 += 1 };
  s0 -> s4 [0, 65535] { R1565 += 1, R1520 += 1, R1521 += 1 };
  s1 -> s1 [0, 65535] { R1565 += 1, R1521 += 1, R1482 += 1, R1483 += 1 };
  s1 -> s2 [0, 65535] { R1565 += 1, R1521 += 1, R1483 += 1, R1461 += 1, R1 += 1 };
  s1 -> s3 [0, 65535] { R1565 += 1, R1521 += 1, R1483 += 1, R1460 += 1, R1461 += 1 };
  s1 -> s6 [0, 65535] { R1565 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1565 += 1, R1521 += 1, R1483 += 1, R1461 += 1, R1 += 1 };
  s2 -> s6 [0, 65535] { R1565 += 1 };
  s2 -> s8 [0, 65535] { R1565 += 1, R1521 += 1, R1483 += 1 };
  s2 -> s7 [0, 65535] { R1565 += 1, R1521 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R1565 += 1, R1521 += 1, R1483 += 1, R1461 += 1, R1 += 1 };
  s3 -> s3 [0, 65535] { R1565 += 1, R1521 += 1, R1483 += 1, R1460 += 1, R1461 += 1 };
  s3 -> s6 [0, 65535] { R1565 += 1 };
  s3 -> s7 [0, 65535] { R1565 += 1, R1521 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s1 [0, 65535] { R1565 += 1, R1521 += 1, R1482 += 1, R1483 += 1 };
  s4 -> s2 [0, 65535] { R1565 += 1, R1521 += 1, R1483 += 1, R1461 += 1, R1 += 1 };
  s4 -> s3 [0, 65535] { R1565 += 1, R1521 += 1, R1483 += 1, R1460 += 1, R1461 += 1 };
  s4 -> s4 [0, 65535] { R1565 += 1, R1520 += 1, R1521 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1565 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R1565 += 1 };
  s7 -> s7 [0, 65535] { R1565 += 1, R1521 += 1 };
  s7 -> s5 [0, 65535];
  s8 -> s6 [0, 65535] { R1565 += 1 };
  s8 -> s8 [0, 65535] { R1565 += 1, R1521 += 1, R1483 += 1 };
  s8 -> s7 [0, 65535] { R1565 += 1, R1521 += 1 };
  s8 -> s5 [0, 65535];
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 64] { R1567 += 1, R1523 += 1, R1485 += 1, R1463 += 1 };
  s0 -> s2 [0, 65535] { R1567 += 1, R1523 += 1, R1485 += 1, R1462 += 1, R1463 += 1 };
  s0 -> s0 [0, 65535] { R1566 += 1, R1567 += 1 };
  s0 -> s3 [0, 65535] { R1567 += 1, R1523 += 1, R1484 += 1, R1485 += 1 };
  s0 -> s4 [0, 65535] { R1567 += 1, R1522 += 1, R1523 += 1 };
  s0 -> s1 [91, 65535] { R1567 += 1, R1523 += 1, R1485 += 1, R1463 += 1 };
  s1 -> s1 [0, 64] { R1567 += 1, R1523 += 1, R1485 += 1, R1463 += 1 };
  s1 -> s1 [0, 65535] { R1567 += 1, R1523 += 1, R1485 += 1 };
  s1 -> s6 [0, 65535] { R1567 += 1 };
  s1 -> s7 [0, 65535] { R1567 += 1, R1523 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [91, 65535] { R1567 += 1, R1523 += 1, R1485 += 1, R1463 += 1 };
  s2 -> s1 [0, 64] { R1567 += 1, R1523 += 1, R1485 += 1, R1463 += 1 };
  s2 -> s2 [0, 65535] { R1567 += 1, R1523 += 1, R1485 += 1, R1462 += 1, R1463 += 1 };
  s2 -> s6 [0, 65535] { R1567 += 1 };
  s2 -> s7 [0, 65535] { R1567 += 1, R1523 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [91, 65535] { R1567 += 1, R1523 += 1, R1485 += 1, R1463 += 1 };
  s3 -> s1 [0, 64] { R1567 += 1, R1523 += 1, R1485 += 1, R1463 += 1 };
  s3 -> s2 [0, 65535] { R1567 += 1, R1523 += 1, R1485 += 1, R1462 += 1, R1463 += 1 };
  s3 -> s6 [0, 65535] { R1567 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R1567 += 1, R1523 += 1, R1484 += 1, R1485 += 1 };
  s3 -> s1 [91, 65535] { R1567 += 1, R1523 += 1, R1485 += 1, R1463 += 1 };
  s4 -> s1 [0, 64] { R1567 += 1, R1523 += 1, R1485 += 1, R1463 += 1 };
  s4 -> s2 [0, 65535] { R1567 += 1, R1523 += 1, R1485 += 1, R1462 += 1, R1463 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s3 [0, 65535] { R1567 += 1, R1523 += 1, R1484 += 1, R1485 += 1 };
  s4 -> s4 [0, 65535] { R1567 += 1, R1522 += 1, R1523 += 1 };
  s4 -> s1 [91, 65535] { R1567 += 1, R1523 += 1, R1485 += 1, R1463 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1567 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R1567 += 1 };
  s7 -> s7 [0, 65535] { R1567 += 1, R1523 += 1 };
  s7 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 65535] { R1569 += 1, R1525 += 1, R1486 += 1, R1487 += 1 };
  s0 -> s2 [0, 65535] { R1569 += 1, R1524 += 1, R1525 += 1 };
  s0 -> s3 [0, 65535] { R1569 += 1, R1525 += 1, R1487 += 1, R1464 += 1, R1465 += 1 };
  s0 -> s4 [0, 65535] { R1569 += 1, R1525 += 1, R1487 += 1, R1465 += 1, R1443 += 1 };
  s0 -> s0 [0, 65535] { R1568 += 1, R1569 += 1 };
  s1 -> s1 [0, 65535] { R1569 += 1, R1525 += 1, R1486 += 1, R1487 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R1569 += 1 };
  s1 -> s3 [0, 65535] { R1569 += 1, R1525 += 1, R1487 += 1, R1464 += 1, R1465 += 1 };
  s1 -> s4 [0, 65535] { R1569 += 1, R1525 += 1, R1487 += 1, R1465 += 1, R1443 += 1 };
  s2 -> s1 [0, 65535] { R1569 += 1, R1525 += 1, R1486 += 1, R1487 += 1 };
  s2 -> s2 [0, 65535] { R1569 += 1, R1524 += 1, R1525 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R1569 += 1, R1525 += 1, R1487 += 1, R1464 += 1, R1465 += 1 };
  s2 -> s4 [0, 65535] { R1569 += 1, R1525 += 1, R1487 += 1, R1465 += 1, R1443 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R1569 += 1 };
  s3 -> s3 [0, 65535] { R1569 += 1, R1525 += 1, R1487 += 1, R1464 += 1, R1465 += 1 };
  s3 -> s4 [0, 65535] { R1569 += 1, R1525 += 1, R1487 += 1, R1465 += 1, R1443 += 1 };
  s3 -> s7 [0, 65535] { R1569 += 1, R1525 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R1569 += 1 };
  s4 -> s4 [0, 65535] { R1569 += 1, R1525 += 1, R1487 += 1, R1465 += 1, R1443 += 1 };
  s4 -> s7 [0, 65535] { R1569 += 1, R1525 += 1 };
  s4 -> s8 [0, 65535] { R1569 += 1, R1525 += 1, R1487 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1569 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R1569 += 1 };
  s7 -> s7 [0, 65535] { R1569 += 1, R1525 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s6 [0, 65535] { R1569 += 1 };
  s8 -> s7 [0, 65535] { R1569 += 1, R1525 += 1 };
  s8 -> s8 [0, 65535] { R1569 += 1, R1525 += 1, R1487 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
};
constraint R3 = R1457 && R4 = R1461 && R5 = R1487 && R6 = R1499 && R7 = R1569 && R11 = 0 && R1054 = 0 && R1055 - R1460 = -1 && R1314 = 0 && R1315 = R1525 && R1444 = 0 && R1445 = 1 && R1446 = 0 && R1447 = 1 && R1448 = 0 && R1449 = 1 && R1450 = 0 && R1451 = 1 && R1452 = 1 && R1453 = R1457 && R1454 = 1 && R1455 = R1457 && R1456 = 1 && R1458 = R1460 && R1459 = R1461 && R1466 = 0 && R1467 = 4 && R1468 = 0 && R1469 = 4 && R1470 = 5 && R1471 = R1487 && R1472 = 5 && R1473 = R1487 && R1474 = 5 && R1475 = R1487 && R1476 = 5 && R1477 = R1487 && R1478 = 5 && R1479 = R1487 && R1480 = 5 && R1481 = R1487 && R1482 = 5 && R1483 = R1487 && R1484 = 5 && R1485 = R1487 && R1486 = 5 && R1488 - R1525 = 1 && R1489 = R1499 && R1490 - R1525 = 1 && R1491 = R1499 && R1492 - R1525 = 1 && R1493 = R1499 && R1494 - R1525 = 1 && R1495 = R1499 && R1496 - R1525 = 1 && R1497 = R1499 && R1498 - R1525 = 1 && R1500 = 0 && R1501 = R1525 && R1502 = 0 && R1503 = R1525 && R1504 = 0 && R1505 = R1525 && R1506 = 0 && R1507 = R1525 && R1508 = 0 && R1509 = R1525 && R1510 = 0 && R1511 = R1525 && R1512 = 0 && R1513 = R1525 && R1514 = 0 && R1515 = R1525 && R1516 = 0 && R1517 = R1525 && R1518 = 0 && R1519 = R1525 && R1520 = 0 && R1521 = R1525 && R1522 = 0 && R1523 = R1525 && R1524 = 0 && R1526 = 10 && R1527 = R1569 && R1528 = 10 && R1529 = R1569 && R1530 = 10 && R1531 = R1569 && R1532 = 10 && R1533 = R1569 && R1534 = 10 && R1535 = R1569 && R1536 = 10 && R1537 = R1569 && R1538 = 10 && R1539 = R1569 && R1540 = 10 && R1541 = R1569 && R1542 = 10 && R1543 = R1569 && R1544 = 10 && R1545 = R1569 && R1546 = 10 && R1547 = R1569 && R1548 = 10 && R1549 = R1569 && R1550 = 10 && R1551 = R1569 && R1552 = 10 && R1553 = R1569 && R1554 = 10 && R1555 = R1569 && R1556 = 10 && R1557 = R1569 && R1558 = 10 && R1559 = R1569 && R1560 = 10 && R1561 = R1569 && R1562 = 10 && R1563 = R1569 && R1564 = 10 && R1565 = R1569 && R1566 = 10 && R1567 = R1569 && R1568 = 10 && R0 != 0 && R1 != 0 && R2 != 0 && R12 < 0 && R1050 < 1 && 0 < R1457 && R1460 - R1461 < 1 && 0 < R1460 && 4 < R1487 && R1525 < R1499 && -1 < R1525 && 9 < R1569 && (R1462 != 0 || R1460 - R1463 = 1 || (R1443 = 0 && R1460 = 1)) && (R1464 != 0 || R1460 - R1465 = 1 || (R1443 = 0 && R1460 = 1)) && (R1462 = 0 || (R1443 = 0 && R1460 = 1)) && (R1464 = 0 || (R1443 = 0 && R1460 = 1));
// End of Parikh automata intersection problem
