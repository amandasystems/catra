// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R1120, R1121, R1122, R1123, R1124, R1125, R1126, R1127, R1128, R1129, R1130, R1131, R1132, R1133, R1134, R1135, R1136, R1137, R1138, R1139, R1140, R1141, R1142, R1143, R1144, R1145, R1146, R1147, R1148, R1149, R1150, R1151, R1152, R1153, R1154, R1155, R1156, R1157, R1158, R1159, R1160, R1161, R1162, R1163, R1164, R1165, R1166, R1167, R1168, R1169, R1170, R1171, R1172, R1173, R1174, R1175, R1176, R1177, R1178, R1179, R1180, R1181, R1182, R1183, R1184, R1185, R1186, R1187, R1188, R1189, R1190, R1191, R1192, R1193, R1194, R1195, R1196, R1197, R1198, R1199, R1200, R1201, R1202, R1203, R1204, R1205, R1206, R1207, R1208, R1209, R1210, R1211, R1212, R1213, R1214, R1215, R1216, R1217, R1218, R1219, R1220, R1221, R1222, R1223, R1224, R1225, R1226, R1227, R1228, R1229, R1230, R1231, R1232, R1233, R1234, R1235, R1236, R1237, R1238, R1239, R1240, R1241, R1242, R1243, R1244, R1245, R1246, R1247, R1248, R1249, R1250, R1251, R1252, R1253, R1254, R1255, R1256, R1257, R1258, R1259, R1260, R1261, R1262, R1263, R1264, R1265, R1266, R1267, R1268, R1269, R1270, R1271, R1272, R1273, R1274, R15, R16, R2, R3, R4, R5, R6, R647, R648, R7, R8, R9, R963, R964;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R8 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R1224 += 1 };
  s0 -> s0 [0, 65535] { R1223 += 1, R1224 += 1 };
  s0 -> s2 [46, 46] { R1224 += 1 };
  s0 -> s3 [47, 47] { R1224 += 1 };
  s0 -> s1 [48, 65535] { R1224 += 1 };
  s1 -> s1 [0, 45] { R1224 += 1 };
  s1 -> s2 [46, 46] { R1224 += 1 };
  s1 -> s3 [47, 47] { R1224 += 1 };
  s1 -> s1 [48, 65535] { R1224 += 1 };
  s2 -> s1 [0, 45] { R1224 += 1 };
  s2 -> s2 [46, 46] { R1224 += 1 };
  s2 -> s3 [47, 47] { R1224 += 1 };
  s2 -> s1 [48, 114] { R1224 += 1 };
  s2 -> s8 [115, 115] { R1224 += 1 };
  s2 -> s1 [116, 65535] { R1224 += 1 };
  s3 -> s3 [0, 45] { R1224 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R1224 += 1 };
  s3 -> s3 [47, 65535] { R1224 += 1 };
  s4 -> s3 [0, 45] { R1224 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R1224 += 1 };
  s4 -> s3 [47, 114] { R1224 += 1 };
  s4 -> s5 [115, 115] { R1224 += 1 };
  s4 -> s3 [116, 65535] { R1224 += 1 };
  s5 -> s3 [0, 45] { R1224 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R1224 += 1 };
  s5 -> s3 [47, 110] { R1224 += 1 };
  s5 -> s6 [111, 111] { R1224 += 1 };
  s5 -> s3 [112, 65535] { R1224 += 1 };
  s6 -> s3 [0, 45] { R1224 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R1224 += 1 };
  s6 -> s3 [47, 98] { R1224 += 1 };
  s6 -> s7 [99, 99] { R1224 += 1 };
  s6 -> s3 [100, 65535] { R1224 += 1 };
  s7 -> s3 [0, 45] { R1224 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R1224 += 1 };
  s7 -> s3 [47, 106] { R1224 += 1 };
  s7 -> s3 [108, 65535] { R1224 += 1 };
  s8 -> s1 [0, 45] { R1224 += 1 };
  s8 -> s2 [46, 46] { R1224 += 1 };
  s8 -> s3 [47, 47] { R1224 += 1 };
  s8 -> s1 [48, 110] { R1224 += 1 };
  s8 -> s9 [111, 111] { R1224 += 1 };
  s8 -> s1 [112, 65535] { R1224 += 1 };
  s9 -> s1 [0, 45] { R1224 += 1 };
  s9 -> s2 [46, 46] { R1224 += 1 };
  s9 -> s3 [47, 47] { R1224 += 1 };
  s9 -> s1 [48, 98] { R1224 += 1 };
  s9 -> s10 [99, 99] { R1224 += 1 };
  s9 -> s1 [100, 65535] { R1224 += 1 };
  s10 -> s1 [0, 45] { R1224 += 1 };
  s10 -> s2 [46, 46] { R1224 += 1 };
  s10 -> s3 [47, 47] { R1224 += 1 };
  s10 -> s1 [48, 106] { R1224 += 1 };
  s10 -> s1 [108, 65535] { R1224 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R1225 += 1, R1226 += 1 };
  s0 -> s1 [0, 65535] { R1226 += 1, R7 += 1 };
  s1 -> s1 [0, 65535] { R1226 += 1, R7 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R1228 += 1, R964 += 1 };
  s0 -> s2 [0, 65535] { R1228 += 1, R963 += 1, R964 += 1 };
  s0 -> s0 [0, 65535] { R1227 += 1, R1228 += 1 };
  s0 -> s3 [47, 47] { R1228 += 1 };
  s0 -> s1 [48, 65535] { R1228 += 1, R964 += 1 };
  s1 -> s1 [0, 46] { R1228 += 1, R964 += 1 };
  s1 -> s3 [47, 47] { R1228 += 1 };
  s1 -> s1 [48, 65535] { R1228 += 1, R964 += 1 };
  s2 -> s1 [0, 46] { R1228 += 1, R964 += 1 };
  s2 -> s2 [0, 65535] { R1228 += 1, R963 += 1, R964 += 1 };
  s2 -> s3 [47, 47] { R1228 += 1 };
  s2 -> s1 [48, 65535] { R1228 += 1, R964 += 1 };
  s3 -> s3 [0, 65535] { R1228 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 65535] { R1230 += 1, R1177 += 1, R1178 += 1 };
  s0 -> s2 [0, 65535] { R1230 += 1, R1178 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R1229 += 1, R1230 += 1 };
  s1 -> s1 [0, 65535] { R1230 += 1, R1177 += 1, R1178 += 1 };
  s1 -> s2 [0, 65535] { R1230 += 1, R1178 += 1, R4 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R1230 += 1 };
  s2 -> s2 [0, 65535] { R1230 += 1, R1178 += 1, R4 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1230 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 65535] { R1232 += 1, R1179 += 1, R1180 += 1 };
  s0 -> s0 [0, 65535] { R1231 += 1, R1232 += 1 };
  s0 -> s2 [0, 65535] { R1232 += 1, R1180 += 1, R1121 += 1, R1122 += 1 };
  s0 -> s3 [63, 63] { R1232 += 1, R1180 += 1, R1122 += 1 };
  s1 -> s1 [0, 65535] { R1232 += 1, R1179 += 1, R1180 += 1 };
  s1 -> s2 [0, 65535] { R1232 += 1, R1180 += 1, R1121 += 1, R1122 += 1 };
  s1 -> s3 [63, 63] { R1232 += 1, R1180 += 1, R1122 += 1 };
  s2 -> s2 [0, 65535] { R1232 += 1, R1180 += 1, R1121 += 1, R1122 += 1 };
  s2 -> s3 [63, 63] { R1232 += 1, R1180 += 1, R1122 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1232 += 1, R1180 += 1 };
  s3 -> s5 [0, 65535] { R1232 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1232 += 1 };
  accepting s3, s4, s5;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R1234 += 1, R1182 += 1, R1124 += 1, R9 += 1 };
  s0 -> s2 [0, 65535] { R1234 += 1, R1181 += 1, R1182 += 1 };
  s0 -> s0 [0, 65535] { R1233 += 1, R1234 += 1 };
  s0 -> s3 [0, 65535] { R1234 += 1, R1182 += 1, R1123 += 1, R1124 += 1 };
  s1 -> s1 [0, 65535] { R1234 += 1, R1182 += 1, R1124 += 1, R9 += 1 };
  s1 -> s6 [0, 65535] { R1234 += 1, R1182 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R1234 += 1 };
  s2 -> s1 [0, 65535] { R1234 += 1, R1182 += 1, R1124 += 1, R9 += 1 };
  s2 -> s2 [0, 65535] { R1234 += 1, R1181 += 1, R1182 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R1234 += 1, R1182 += 1, R1123 += 1, R1124 += 1 };
  s3 -> s3 [0, 65535] { R1234 += 1, R1182 += 1, R1123 += 1, R1124 += 1 };
  s3 -> s1 [0, 65535] { R1234 += 1, R1182 += 1, R1124 += 1, R9 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R1234 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1234 += 1 };
  s6 -> s6 [0, 65535] { R1234 += 1, R1182 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R1234 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 58] { R1236 += 1, R1184 += 1, R1146 += 1 };
  s0 -> s2 [0, 65535] { R1236 += 1, R1183 += 1, R1184 += 1 };
  s0 -> s3 [0, 65535] { R1236 += 1, R1184 += 1, R1145 += 1, R1146 += 1 };
  s0 -> s0 [0, 65535] { R1235 += 1, R1236 += 1 };
  s0 -> s4 [59, 59] { R1236 += 1, R1184 += 1, R1146 += 1 };
  s0 -> s1 [60, 65535] { R1236 += 1, R1184 += 1, R1146 += 1 };
  s1 -> s1 [0, 58] { R1236 += 1, R1184 += 1, R1146 += 1 };
  s1 -> s4 [59, 59] { R1236 += 1, R1184 += 1, R1146 += 1 };
  s1 -> s1 [60, 65535] { R1236 += 1, R1184 += 1, R1146 += 1 };
  s2 -> s1 [0, 58] { R1236 += 1, R1184 += 1, R1146 += 1 };
  s2 -> s2 [0, 65535] { R1236 += 1, R1183 += 1, R1184 += 1 };
  s2 -> s3 [0, 65535] { R1236 += 1, R1184 += 1, R1145 += 1, R1146 += 1 };
  s2 -> s4 [59, 59] { R1236 += 1, R1184 += 1, R1146 += 1 };
  s2 -> s1 [60, 65535] { R1236 += 1, R1184 += 1, R1146 += 1 };
  s3 -> s1 [0, 58] { R1236 += 1, R1184 += 1, R1146 += 1 };
  s3 -> s3 [0, 65535] { R1236 += 1, R1184 += 1, R1145 += 1, R1146 += 1 };
  s3 -> s4 [59, 59] { R1236 += 1, R1184 += 1, R1146 += 1 };
  s3 -> s1 [60, 65535] { R1236 += 1, R1184 += 1, R1146 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1236 += 1, R1184 += 1, R1146 += 1 };
  s4 -> s6 [0, 65535] { R1236 += 1, R1184 += 1 };
  s4 -> s7 [0, 65535] { R1236 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1236 += 1, R1184 += 1 };
  s6 -> s7 [0, 65535] { R1236 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R1236 += 1 };
  accepting s4, s5, s6, s7;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R1238 += 1, R1186 += 1, R1148 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R1237 += 1, R1238 += 1 };
  s0 -> s2 [0, 65535] { R1238 += 1, R1186 += 1, R1147 += 1, R1148 += 1 };
  s0 -> s3 [0, 65535] { R1238 += 1, R1185 += 1, R1186 += 1 };
  s1 -> s1 [0, 65535] { R1238 += 1, R1186 += 1, R1148 += 1, R3 += 1 };
  s1 -> s6 [0, 65535] { R1238 += 1, R1186 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R1238 += 1 };
  s2 -> s1 [0, 65535] { R1238 += 1, R1186 += 1, R1148 += 1, R3 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1238 += 1, R1186 += 1, R1147 += 1, R1148 += 1 };
  s2 -> s5 [0, 65535] { R1238 += 1 };
  s3 -> s1 [0, 65535] { R1238 += 1, R1186 += 1, R1148 += 1, R3 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R1238 += 1, R1186 += 1, R1147 += 1, R1148 += 1 };
  s3 -> s3 [0, 65535] { R1238 += 1, R1185 += 1, R1186 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1238 += 1 };
  s6 -> s6 [0, 65535] { R1238 += 1, R1186 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R1238 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 37] { R1240 += 1, R1188 += 1, R1150 += 1 };
  s0 -> s2 [0, 65535] { R1240 += 1, R1188 += 1, R1150 += 1, R11 += 1 };
  s0 -> s0 [0, 65535] { R1239 += 1, R1240 += 1 };
  s0 -> s3 [0, 65535] { R1240 += 1, R1187 += 1, R1188 += 1 };
  s0 -> s4 [0, 65535] { R1240 += 1, R1188 += 1, R1149 += 1, R1150 += 1 };
  s0 -> s5 [38, 38] { R1240 += 1, R1188 += 1, R1150 += 1 };
  s0 -> s1 [39, 65535] { R1240 += 1, R1188 += 1, R1150 += 1 };
  s1 -> s1 [0, 37] { R1240 += 1, R1188 += 1, R1150 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R1240 += 1, R1188 += 1 };
  s1 -> s7 [0, 65535] { R1240 += 1 };
  s1 -> s5 [38, 38] { R1240 += 1, R1188 += 1, R1150 += 1 };
  s1 -> s1 [39, 65535] { R1240 += 1, R1188 += 1, R1150 += 1 };
  s2 -> s1 [0, 37] { R1240 += 1, R1188 += 1, R1150 += 1 };
  s2 -> s2 [0, 65535] { R1240 += 1, R1188 += 1, R1150 += 1, R11 += 1 };
  s2 -> s8 [0, 65535] { R1240 += 1, R1188 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s7 [0, 65535] { R1240 += 1 };
  s2 -> s5 [38, 38] { R1240 += 1, R1188 += 1, R1150 += 1 };
  s2 -> s1 [39, 65535] { R1240 += 1, R1188 += 1, R1150 += 1 };
  s3 -> s1 [0, 37] { R1240 += 1, R1188 += 1, R1150 += 1 };
  s3 -> s2 [0, 65535] { R1240 += 1, R1188 += 1, R1150 += 1, R11 += 1 };
  s3 -> s3 [0, 65535] { R1240 += 1, R1187 += 1, R1188 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s4 [0, 65535] { R1240 += 1, R1188 += 1, R1149 += 1, R1150 += 1 };
  s3 -> s5 [38, 38] { R1240 += 1, R1188 += 1, R1150 += 1 };
  s3 -> s1 [39, 65535] { R1240 += 1, R1188 += 1, R1150 += 1 };
  s4 -> s1 [0, 37] { R1240 += 1, R1188 += 1, R1150 += 1 };
  s4 -> s2 [0, 65535] { R1240 += 1, R1188 += 1, R1150 += 1, R11 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R1240 += 1, R1188 += 1, R1149 += 1, R1150 += 1 };
  s4 -> s7 [0, 65535] { R1240 += 1 };
  s4 -> s5 [38, 38] { R1240 += 1, R1188 += 1, R1150 += 1 };
  s4 -> s1 [39, 65535] { R1240 += 1, R1188 += 1, R1150 += 1 };
  s5 -> s5 [0, 65535] { R1240 += 1, R1188 += 1, R1150 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R1240 += 1 };
  s8 -> s8 [0, 65535] { R1240 += 1, R1188 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R1240 += 1 };
  accepting s3, s4, s8, s2, s6, s1, s7, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 58] { R1242 += 1, R1190 += 1, R1152 += 1, R16 += 1 };
  s0 -> s2 [0, 65535] { R1242 += 1, R1189 += 1, R1190 += 1 };
  s0 -> s3 [0, 65535] { R1242 += 1, R1190 += 1, R1152 += 1, R15 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R1241 += 1, R1242 += 1 };
  s0 -> s4 [0, 65535] { R1242 += 1, R1190 += 1, R1151 += 1, R1152 += 1 };
  s0 -> s5 [59, 59] { R1242 += 1, R1190 += 1, R1152 += 1 };
  s0 -> s1 [60, 65535] { R1242 += 1, R1190 += 1, R1152 += 1, R16 += 1 };
  s1 -> s1 [0, 58] { R1242 += 1, R1190 += 1, R1152 += 1, R16 += 1 };
  s1 -> s5 [59, 59] { R1242 += 1, R1190 += 1, R1152 += 1 };
  s1 -> s1 [60, 65535] { R1242 += 1, R1190 += 1, R1152 += 1, R16 += 1 };
  s2 -> s1 [0, 58] { R1242 += 1, R1190 += 1, R1152 += 1, R16 += 1 };
  s2 -> s2 [0, 65535] { R1242 += 1, R1189 += 1, R1190 += 1 };
  s2 -> s3 [0, 65535] { R1242 += 1, R1190 += 1, R1152 += 1, R15 += 1, R16 += 1 };
  s2 -> s4 [0, 65535] { R1242 += 1, R1190 += 1, R1151 += 1, R1152 += 1 };
  s2 -> s5 [59, 59] { R1242 += 1, R1190 += 1, R1152 += 1 };
  s2 -> s1 [60, 65535] { R1242 += 1, R1190 += 1, R1152 += 1, R16 += 1 };
  s3 -> s1 [0, 58] { R1242 += 1, R1190 += 1, R1152 += 1, R16 += 1 };
  s3 -> s3 [0, 65535] { R1242 += 1, R1190 += 1, R1152 += 1, R15 += 1, R16 += 1 };
  s3 -> s5 [59, 59] { R1242 += 1, R1190 += 1, R1152 += 1 };
  s3 -> s1 [60, 65535] { R1242 += 1, R1190 += 1, R1152 += 1, R16 += 1 };
  s4 -> s1 [0, 58] { R1242 += 1, R1190 += 1, R1152 += 1, R16 += 1 };
  s4 -> s3 [0, 65535] { R1242 += 1, R1190 += 1, R1152 += 1, R15 += 1, R16 += 1 };
  s4 -> s4 [0, 65535] { R1242 += 1, R1190 += 1, R1151 += 1, R1152 += 1 };
  s4 -> s5 [59, 59] { R1242 += 1, R1190 += 1, R1152 += 1 };
  s4 -> s1 [60, 65535] { R1242 += 1, R1190 += 1, R1152 += 1, R16 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R1242 += 1, R1190 += 1, R1152 += 1 };
  s5 -> s7 [0, 65535] { R1242 += 1, R1190 += 1 };
  s5 -> s8 [0, 65535] { R1242 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R1242 += 1, R1190 += 1 };
  s7 -> s8 [0, 65535] { R1242 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R1242 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 58] { R1244 += 1, R1192 += 1, R1154 += 1, R1130 += 1 };
  s0 -> s0 [0, 65535] { R1243 += 1, R1244 += 1 };
  s0 -> s2 [0, 65535] { R1244 += 1, R1192 += 1, R1153 += 1, R1154 += 1 };
  s0 -> s3 [0, 65535] { R1244 += 1, R1192 += 1, R1154 += 1, R1129 += 1, R1130 += 1 };
  s0 -> s4 [0, 65535] { R1244 += 1, R1191 += 1, R1192 += 1 };
  s0 -> s1 [60, 65535] { R1244 += 1, R1192 += 1, R1154 += 1, R1130 += 1 };
  s1 -> s1 [0, 58] { R1244 += 1, R1192 += 1, R1154 += 1, R1130 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R1244 += 1 };
  s1 -> s7 [0, 65535] { R1244 += 1, R1192 += 1 };
  s1 -> s1 [0, 65535] { R1244 += 1, R1192 += 1, R1154 += 1 };
  s1 -> s1 [60, 65535] { R1244 += 1, R1192 += 1, R1154 += 1, R1130 += 1 };
  s2 -> s1 [0, 58] { R1244 += 1, R1192 += 1, R1154 += 1, R1130 += 1 };
  s2 -> s2 [0, 65535] { R1244 += 1, R1192 += 1, R1153 += 1, R1154 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R1244 += 1 };
  s2 -> s3 [0, 65535] { R1244 += 1, R1192 += 1, R1154 += 1, R1129 += 1, R1130 += 1 };
  s2 -> s1 [60, 65535] { R1244 += 1, R1192 += 1, R1154 += 1, R1130 += 1 };
  s3 -> s1 [0, 58] { R1244 += 1, R1192 += 1, R1154 += 1, R1130 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R1244 += 1 };
  s3 -> s3 [0, 65535] { R1244 += 1, R1192 += 1, R1154 += 1, R1129 += 1, R1130 += 1 };
  s3 -> s7 [0, 65535] { R1244 += 1, R1192 += 1 };
  s3 -> s1 [60, 65535] { R1244 += 1, R1192 += 1, R1154 += 1, R1130 += 1 };
  s4 -> s1 [0, 58] { R1244 += 1, R1192 += 1, R1154 += 1, R1130 += 1 };
  s4 -> s2 [0, 65535] { R1244 += 1, R1192 += 1, R1153 += 1, R1154 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s3 [0, 65535] { R1244 += 1, R1192 += 1, R1154 += 1, R1129 += 1, R1130 += 1 };
  s4 -> s4 [0, 65535] { R1244 += 1, R1191 += 1, R1192 += 1 };
  s4 -> s1 [60, 65535] { R1244 += 1, R1192 += 1, R1154 += 1, R1130 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1244 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R1244 += 1 };
  s7 -> s7 [0, 65535] { R1244 += 1, R1192 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s0 [0, 65535] { R1245 += 1, R1246 += 1 };
  s0 -> s1 [0, 65535] { R1246 += 1, R1193 += 1, R1194 += 1 };
  s0 -> s2 [0, 65535] { R1246 += 1, R1194 += 1, R1155 += 1, R1156 += 1 };
  s0 -> s3 [0, 65535] { R1246 += 1, R1194 += 1, R1156 += 1, R1131 += 1, R1132 += 1 };
  s0 -> s4 [0, 65535] { R1246 += 1, R1194 += 1, R1156 += 1, R1132 += 1, R0 += 1 };
  s1 -> s1 [0, 65535] { R1246 += 1, R1193 += 1, R1194 += 1 };
  s1 -> s2 [0, 65535] { R1246 += 1, R1194 += 1, R1155 += 1, R1156 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [0, 65535] { R1246 += 1, R1194 += 1, R1156 += 1, R1131 += 1, R1132 += 1 };
  s1 -> s4 [0, 65535] { R1246 += 1, R1194 += 1, R1156 += 1, R1132 += 1, R0 += 1 };
  s2 -> s5 [0, 65535] { R1246 += 1 };
  s2 -> s2 [0, 65535] { R1246 += 1, R1194 += 1, R1155 += 1, R1156 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R1246 += 1, R1194 += 1, R1156 += 1, R1131 += 1, R1132 += 1 };
  s2 -> s4 [0, 65535] { R1246 += 1, R1194 += 1, R1156 += 1, R1132 += 1, R0 += 1 };
  s3 -> s5 [0, 65535] { R1246 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R1246 += 1, R1194 += 1, R1156 += 1, R1131 += 1, R1132 += 1 };
  s3 -> s8 [0, 65535] { R1246 += 1, R1194 += 1 };
  s3 -> s4 [0, 65535] { R1246 += 1, R1194 += 1, R1156 += 1, R1132 += 1, R0 += 1 };
  s4 -> s5 [0, 65535] { R1246 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R1246 += 1, R1194 += 1, R1156 += 1 };
  s4 -> s8 [0, 65535] { R1246 += 1, R1194 += 1 };
  s4 -> s4 [0, 65535] { R1246 += 1, R1194 += 1, R1156 += 1, R1132 += 1, R0 += 1 };
  s5 -> s5 [0, 65535] { R1246 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R1246 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R1246 += 1, R1194 += 1, R1156 += 1 };
  s7 -> s8 [0, 65535] { R1246 += 1, R1194 += 1 };
  s8 -> s5 [0, 65535] { R1246 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R1246 += 1, R1194 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s0 [0, 65535] { R1247 += 1, R1248 += 1 };
  s0 -> s1 [0, 65535] { R1248 += 1, R1195 += 1, R1196 += 1 };
  s0 -> s2 [0, 65535] { R1248 += 1, R1196 += 1, R1157 += 1, R1158 += 1 };
  s0 -> s3 [0, 65535] { R1248 += 1, R1196 += 1, R1158 += 1 };
  s1 -> s1 [0, 65535] { R1248 += 1, R1195 += 1, R1196 += 1 };
  s1 -> s2 [0, 65535] { R1248 += 1, R1196 += 1, R1157 += 1, R1158 += 1 };
  s1 -> s3 [0, 65535] { R1248 += 1, R1196 += 1, R1158 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R1248 += 1, R1196 += 1, R1157 += 1, R1158 += 1 };
  s2 -> s4 [0, 65535] { R1248 += 1 };
  s2 -> s3 [0, 65535] { R1248 += 1, R1196 += 1, R1158 += 1 };
  s2 -> s6 [0, 65535];
  s3 -> s4 [0, 65535] { R1248 += 1 };
  s3 -> s3 [0, 65535] { R1248 += 1, R1196 += 1, R1158 += 1 };
  s3 -> s5 [0, 65535] { R1248 += 1, R1196 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R1248 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s4 [0, 65535] { R1248 += 1 };
  s5 -> s5 [0, 65535] { R1248 += 1, R1196 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 63] { R1250 += 1, R1198 += 1 };
  s0 -> s2 [0, 65535] { R1250 += 1, R1197 += 1, R1198 += 1 };
  s0 -> s0 [0, 65535] { R1249 += 1, R1250 += 1 };
  s0 -> s3 [64, 64] { R1250 += 1, R1198 += 1 };
  s0 -> s1 [65, 65535] { R1250 += 1, R1198 += 1 };
  s1 -> s1 [0, 63] { R1250 += 1, R1198 += 1 };
  s1 -> s3 [64, 64] { R1250 += 1, R1198 += 1 };
  s1 -> s1 [65, 65535] { R1250 += 1, R1198 += 1 };
  s2 -> s1 [0, 63] { R1250 += 1, R1198 += 1 };
  s2 -> s2 [0, 65535] { R1250 += 1, R1197 += 1, R1198 += 1 };
  s2 -> s3 [64, 64] { R1250 += 1, R1198 += 1 };
  s2 -> s1 [65, 65535] { R1250 += 1, R1198 += 1 };
  s3 -> s4 [0, 65535] { R1250 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R1250 += 1, R1198 += 1 };
  s4 -> s4 [0, 65535] { R1250 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R1252 += 1, R1199 += 1, R1200 += 1 };
  s0 -> s2 [0, 65535] { R1252 += 1, R1200 += 1, R6 += 1 };
  s0 -> s0 [0, 65535] { R1251 += 1, R1252 += 1 };
  s1 -> s1 [0, 65535] { R1252 += 1, R1199 += 1, R1200 += 1 };
  s1 -> s2 [0, 65535] { R1252 += 1, R1200 += 1, R6 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1252 += 1, R1200 += 1, R6 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R1252 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1252 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 36] { R1254 += 1, R1202 += 1, R1142 += 1 };
  s0 -> s2 [0, 65535] { R1254 += 1, R1201 += 1, R1202 += 1 };
  s0 -> s0 [0, 65535] { R1253 += 1, R1254 += 1 };
  s0 -> s3 [0, 65535] { R1254 += 1, R1202 += 1, R1141 += 1, R1142 += 1 };
  s0 -> s1 [38, 42] { R1254 += 1, R1202 += 1, R1142 += 1 };
  s0 -> s1 [44, 57] { R1254 += 1, R1202 += 1, R1142 += 1 };
  s0 -> s1 [59, 63] { R1254 += 1, R1202 += 1, R1142 += 1 };
  s0 -> s1 [65, 65535] { R1254 += 1, R1202 += 1, R1142 += 1 };
  s1 -> s1 [0, 36] { R1254 += 1, R1202 += 1, R1142 += 1 };
  s1 -> s1 [0, 65535] { R1254 += 1, R1202 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R1254 += 1 };
  s1 -> s1 [38, 42] { R1254 += 1, R1202 += 1, R1142 += 1 };
  s1 -> s1 [44, 57] { R1254 += 1, R1202 += 1, R1142 += 1 };
  s1 -> s1 [59, 63] { R1254 += 1, R1202 += 1, R1142 += 1 };
  s1 -> s1 [65, 65535] { R1254 += 1, R1202 += 1, R1142 += 1 };
  s2 -> s1 [0, 36] { R1254 += 1, R1202 += 1, R1142 += 1 };
  s2 -> s2 [0, 65535] { R1254 += 1, R1201 += 1, R1202 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R1254 += 1, R1202 += 1, R1141 += 1, R1142 += 1 };
  s2 -> s1 [38, 42] { R1254 += 1, R1202 += 1, R1142 += 1 };
  s2 -> s1 [44, 57] { R1254 += 1, R1202 += 1, R1142 += 1 };
  s2 -> s1 [59, 63] { R1254 += 1, R1202 += 1, R1142 += 1 };
  s2 -> s1 [65, 65535] { R1254 += 1, R1202 += 1, R1142 += 1 };
  s3 -> s1 [0, 36] { R1254 += 1, R1202 += 1, R1142 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R1254 += 1 };
  s3 -> s3 [0, 65535] { R1254 += 1, R1202 += 1, R1141 += 1, R1142 += 1 };
  s3 -> s1 [38, 42] { R1254 += 1, R1202 += 1, R1142 += 1 };
  s3 -> s1 [44, 57] { R1254 += 1, R1202 += 1, R1142 += 1 };
  s3 -> s1 [59, 63] { R1254 += 1, R1202 += 1, R1142 += 1 };
  s3 -> s1 [65, 65535] { R1254 += 1, R1202 += 1, R1142 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1254 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_18 {
  init s0;
  s0 -> s0 [0, 65535] { R1255 += 1, R1256 += 1 };
  s0 -> s1 [0, 65535] { R1256 += 1, R1203 += 1, R1204 += 1 };
  s0 -> s2 [0, 65535] { R1256 += 1, R1204 += 1, R1144 += 1, R2 += 1 };
  s0 -> s3 [0, 65535] { R1256 += 1, R1204 += 1, R1143 += 1, R1144 += 1 };
  s1 -> s1 [0, 65535] { R1256 += 1, R1203 += 1, R1204 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s2 [0, 65535] { R1256 += 1, R1204 += 1, R1144 += 1, R2 += 1 };
  s1 -> s3 [0, 65535] { R1256 += 1, R1204 += 1, R1143 += 1, R1144 += 1 };
  s2 -> s4 [0, 65535] { R1256 += 1 };
  s2 -> s6 [0, 65535] { R1256 += 1, R1204 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1256 += 1, R1204 += 1, R1144 += 1, R2 += 1 };
  s3 -> s4 [0, 65535] { R1256 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R1256 += 1, R1204 += 1, R1144 += 1, R2 += 1 };
  s3 -> s3 [0, 65535] { R1256 += 1, R1204 += 1, R1143 += 1, R1144 += 1 };
  s4 -> s4 [0, 65535] { R1256 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R1256 += 1 };
  s6 -> s6 [0, 65535] { R1256 += 1, R1204 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 43] { R1258 += 1, R1206 += 1, R1160 += 1 };
  s0 -> s2 [0, 65535] { R1258 += 1, R1205 += 1, R1206 += 1 };
  s0 -> s0 [0, 65535] { R1257 += 1, R1258 += 1 };
  s0 -> s3 [0, 65535] { R1258 += 1, R1206 += 1, R1159 += 1, R1160 += 1 };
  s0 -> s1 [45, 57] { R1258 += 1, R1206 += 1, R1160 += 1 };
  s0 -> s4 [58, 58] { R1258 += 1, R1206 += 1, R1160 += 1 };
  s0 -> s1 [59, 65535] { R1258 += 1, R1206 += 1, R1160 += 1 };
  s1 -> s1 [0, 43] { R1258 += 1, R1206 += 1, R1160 += 1 };
  s1 -> s1 [45, 57] { R1258 += 1, R1206 += 1, R1160 += 1 };
  s1 -> s4 [58, 58] { R1258 += 1, R1206 += 1, R1160 += 1 };
  s1 -> s1 [59, 65535] { R1258 += 1, R1206 += 1, R1160 += 1 };
  s2 -> s1 [0, 43] { R1258 += 1, R1206 += 1, R1160 += 1 };
  s2 -> s2 [0, 65535] { R1258 += 1, R1205 += 1, R1206 += 1 };
  s2 -> s3 [0, 65535] { R1258 += 1, R1206 += 1, R1159 += 1, R1160 += 1 };
  s2 -> s1 [45, 57] { R1258 += 1, R1206 += 1, R1160 += 1 };
  s2 -> s4 [58, 58] { R1258 += 1, R1206 += 1, R1160 += 1 };
  s2 -> s1 [59, 65535] { R1258 += 1, R1206 += 1, R1160 += 1 };
  s3 -> s1 [0, 43] { R1258 += 1, R1206 += 1, R1160 += 1 };
  s3 -> s3 [0, 65535] { R1258 += 1, R1206 += 1, R1159 += 1, R1160 += 1 };
  s3 -> s1 [45, 57] { R1258 += 1, R1206 += 1, R1160 += 1 };
  s3 -> s4 [58, 58] { R1258 += 1, R1206 += 1, R1160 += 1 };
  s3 -> s1 [59, 65535] { R1258 += 1, R1206 += 1, R1160 += 1 };
  s4 -> s4 [0, 43] { R1258 += 1, R1206 += 1, R1160 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1258 += 1, R1206 += 1 };
  s4 -> s6 [0, 65535] { R1258 += 1 };
  s4 -> s4 [45, 65535] { R1258 += 1, R1206 += 1, R1160 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1258 += 1 };
  accepting s4, s5, s6;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 65535] { R1260 += 1, R1208 += 1, R1161 += 1, R1162 += 1 };
  s0 -> s2 [0, 65535] { R1260 += 1, R1208 += 1, R1162 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R1259 += 1, R1260 += 1 };
  s0 -> s3 [0, 65535] { R1260 += 1, R1207 += 1, R1208 += 1 };
  s1 -> s1 [0, 65535] { R1260 += 1, R1208 += 1, R1161 += 1, R1162 += 1 };
  s1 -> s5 [0, 65535] { R1260 += 1 };
  s1 -> s2 [0, 65535] { R1260 += 1, R1208 += 1, R1162 += 1, R5 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R1260 += 1 };
  s2 -> s2 [0, 65535] { R1260 += 1, R1208 += 1, R1162 += 1, R5 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s6 [0, 65535] { R1260 += 1, R1208 += 1 };
  s3 -> s1 [0, 65535] { R1260 += 1, R1208 += 1, R1161 += 1, R1162 += 1 };
  s3 -> s2 [0, 65535] { R1260 += 1, R1208 += 1, R1162 += 1, R5 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1260 += 1, R1207 += 1, R1208 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1260 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R1260 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R1260 += 1, R1208 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 57] { R1262 += 1, R1210 += 1, R1164 += 1, R648 += 1 };
  s0 -> s2 [0, 65535] { R1262 += 1, R1210 += 1, R1164 += 1, R647 += 1, R648 += 1 };
  s0 -> s0 [0, 65535] { R1261 += 1, R1262 += 1 };
  s0 -> s3 [0, 65535] { R1262 += 1, R1209 += 1, R1210 += 1 };
  s0 -> s4 [0, 65535] { R1262 += 1, R1210 += 1, R1163 += 1, R1164 += 1 };
  s0 -> s5 [58, 58] { R1262 += 1, R1210 += 1, R1164 += 1 };
  s0 -> s1 [59, 65535] { R1262 += 1, R1210 += 1, R1164 += 1, R648 += 1 };
  s1 -> s1 [0, 57] { R1262 += 1, R1210 += 1, R1164 += 1, R648 += 1 };
  s1 -> s5 [58, 58] { R1262 += 1, R1210 += 1, R1164 += 1 };
  s1 -> s1 [59, 65535] { R1262 += 1, R1210 += 1, R1164 += 1, R648 += 1 };
  s2 -> s1 [0, 57] { R1262 += 1, R1210 += 1, R1164 += 1, R648 += 1 };
  s2 -> s2 [0, 65535] { R1262 += 1, R1210 += 1, R1164 += 1, R647 += 1, R648 += 1 };
  s2 -> s5 [58, 58] { R1262 += 1, R1210 += 1, R1164 += 1 };
  s2 -> s1 [59, 65535] { R1262 += 1, R1210 += 1, R1164 += 1, R648 += 1 };
  s3 -> s1 [0, 57] { R1262 += 1, R1210 += 1, R1164 += 1, R648 += 1 };
  s3 -> s2 [0, 65535] { R1262 += 1, R1210 += 1, R1164 += 1, R647 += 1, R648 += 1 };
  s3 -> s3 [0, 65535] { R1262 += 1, R1209 += 1, R1210 += 1 };
  s3 -> s4 [0, 65535] { R1262 += 1, R1210 += 1, R1163 += 1, R1164 += 1 };
  s3 -> s5 [58, 58] { R1262 += 1, R1210 += 1, R1164 += 1 };
  s3 -> s1 [59, 65535] { R1262 += 1, R1210 += 1, R1164 += 1, R648 += 1 };
  s4 -> s1 [0, 57] { R1262 += 1, R1210 += 1, R1164 += 1, R648 += 1 };
  s4 -> s2 [0, 65535] { R1262 += 1, R1210 += 1, R1164 += 1, R647 += 1, R648 += 1 };
  s4 -> s4 [0, 65535] { R1262 += 1, R1210 += 1, R1163 += 1, R1164 += 1 };
  s4 -> s5 [58, 58] { R1262 += 1, R1210 += 1, R1164 += 1 };
  s4 -> s1 [59, 65535] { R1262 += 1, R1210 += 1, R1164 += 1, R648 += 1 };
  s5 -> s5 [0, 65535] { R1262 += 1, R1210 += 1, R1164 += 1 };
  s5 -> s6 [0, 65535] { R1262 += 1, R1210 += 1 };
  s5 -> s7 [0, 65535] { R1262 += 1 };
  s5 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R1262 += 1, R1210 += 1 };
  s6 -> s7 [0, 65535] { R1262 += 1 };
  s6 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R1262 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  accepting s5, s6, s7, s8;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 90] { R1264 += 1, R1212 += 1, R1166 += 1, R1126 += 1 };
  s0 -> s2 [0, 65535] { R1264 += 1, R1211 += 1, R1212 += 1 };
  s0 -> s0 [0, 65535] { R1263 += 1, R1264 += 1 };
  s0 -> s3 [0, 65535] { R1264 += 1, R1212 += 1, R1166 += 1, R1125 += 1, R1126 += 1 };
  s0 -> s4 [0, 65535] { R1264 += 1, R1212 += 1, R1165 += 1, R1166 += 1 };
  s0 -> s5 [91, 91] { R1264 += 1, R1212 += 1, R1166 += 1, R1126 += 1 };
  s0 -> s1 [92, 65535] { R1264 += 1, R1212 += 1, R1166 += 1, R1126 += 1 };
  s1 -> s1 [0, 65535] { R1264 += 1, R1212 += 1, R1166 += 1, R1126 += 1 };
  s1 -> s6 [0, 65535] { R1264 += 1 };
  s1 -> s8 [0, 65535] { R1264 += 1, R1212 += 1 };
  s1 -> s9 [0, 65535] { R1264 += 1, R1212 += 1, R1166 += 1 };
  s1 -> s7 [0, 65535];
  s2 -> s1 [0, 90] { R1264 += 1, R1212 += 1, R1166 += 1, R1126 += 1 };
  s2 -> s2 [0, 65535] { R1264 += 1, R1211 += 1, R1212 += 1 };
  s2 -> s3 [0, 65535] { R1264 += 1, R1212 += 1, R1166 += 1, R1125 += 1, R1126 += 1 };
  s2 -> s4 [0, 65535] { R1264 += 1, R1212 += 1, R1165 += 1, R1166 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s5 [91, 91] { R1264 += 1, R1212 += 1, R1166 += 1, R1126 += 1 };
  s2 -> s1 [92, 65535] { R1264 += 1, R1212 += 1, R1166 += 1, R1126 += 1 };
  s3 -> s1 [0, 90] { R1264 += 1, R1212 += 1, R1166 += 1, R1126 += 1 };
  s3 -> s6 [0, 65535] { R1264 += 1 };
  s3 -> s3 [0, 65535] { R1264 += 1, R1212 += 1, R1166 += 1, R1125 += 1, R1126 += 1 };
  s3 -> s8 [0, 65535] { R1264 += 1, R1212 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s5 [91, 91] { R1264 += 1, R1212 += 1, R1166 += 1, R1126 += 1 };
  s3 -> s1 [92, 65535] { R1264 += 1, R1212 += 1, R1166 += 1, R1126 += 1 };
  s4 -> s1 [0, 90] { R1264 += 1, R1212 += 1, R1166 += 1, R1126 += 1 };
  s4 -> s6 [0, 65535] { R1264 += 1 };
  s4 -> s3 [0, 65535] { R1264 += 1, R1212 += 1, R1166 += 1, R1125 += 1, R1126 += 1 };
  s4 -> s4 [0, 65535] { R1264 += 1, R1212 += 1, R1165 += 1, R1166 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s5 [91, 91] { R1264 += 1, R1212 += 1, R1166 += 1, R1126 += 1 };
  s4 -> s1 [92, 65535] { R1264 += 1, R1212 += 1, R1166 += 1, R1126 += 1 };
  s5 -> s1 [0, 65535] { R1264 += 1, R1212 += 1, R1166 += 1, R1126 += 1 };
  s6 -> s6 [0, 65535] { R1264 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  s8 -> s6 [0, 65535] { R1264 += 1 };
  s8 -> s8 [0, 65535] { R1264 += 1, R1212 += 1 };
  s8 -> s7 [0, 65535];
  s9 -> s6 [0, 65535] { R1264 += 1 };
  s9 -> s8 [0, 65535] { R1264 += 1, R1212 += 1 };
  s9 -> s9 [0, 65535] { R1264 += 1, R1212 += 1, R1166 += 1 };
  s9 -> s7 [0, 65535];
  accepting s3, s4, s8, s2, s9, s6, s1, s7, s0;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 65535] { R1266 += 1, R1214 += 1, R1168 += 1, R1127 += 1, R1128 += 1 };
  s0 -> s2 [0, 65535] { R1266 += 1, R1213 += 1, R1214 += 1 };
  s0 -> s3 [0, 65535] { R1266 += 1, R1214 += 1, R1168 += 1, R1128 += 1, R10 += 1 };
  s0 -> s4 [0, 65535] { R1266 += 1, R1214 += 1, R1167 += 1, R1168 += 1 };
  s0 -> s0 [0, 65535] { R1265 += 1, R1266 += 1 };
  s1 -> s7 [0, 65535] { R1266 += 1, R1214 += 1 };
  s1 -> s1 [0, 65535] { R1266 += 1, R1214 += 1, R1168 += 1, R1127 += 1, R1128 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R1266 += 1, R1214 += 1, R1168 += 1, R1128 += 1, R10 += 1 };
  s1 -> s6 [0, 65535] { R1266 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R1266 += 1, R1214 += 1, R1168 += 1, R1127 += 1, R1128 += 1 };
  s2 -> s2 [0, 65535] { R1266 += 1, R1213 += 1, R1214 += 1 };
  s2 -> s3 [0, 65535] { R1266 += 1, R1214 += 1, R1168 += 1, R1128 += 1, R10 += 1 };
  s2 -> s4 [0, 65535] { R1266 += 1, R1214 += 1, R1167 += 1, R1168 += 1 };
  s3 -> s7 [0, 65535] { R1266 += 1, R1214 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R1266 += 1, R1214 += 1, R1168 += 1, R1128 += 1, R10 += 1 };
  s3 -> s6 [0, 65535] { R1266 += 1 };
  s3 -> s8 [0, 65535] { R1266 += 1, R1214 += 1, R1168 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s1 [0, 65535] { R1266 += 1, R1214 += 1, R1168 += 1, R1127 += 1, R1128 += 1 };
  s4 -> s3 [0, 65535] { R1266 += 1, R1214 += 1, R1168 += 1, R1128 += 1, R10 += 1 };
  s4 -> s6 [0, 65535] { R1266 += 1 };
  s4 -> s4 [0, 65535] { R1266 += 1, R1214 += 1, R1167 += 1, R1168 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1266 += 1 };
  s7 -> s7 [0, 65535] { R1266 += 1, R1214 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R1266 += 1 };
  s8 -> s7 [0, 65535] { R1266 += 1, R1214 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s6 [0, 65535] { R1266 += 1 };
  s8 -> s8 [0, 65535] { R1266 += 1, R1214 += 1, R1168 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 57] { R1268 += 1, R1216 += 1, R1170 += 1, R1134 += 1 };
  s0 -> s0 [0, 65535] { R1267 += 1, R1268 += 1 };
  s0 -> s2 [0, 65535] { R1268 += 1, R1216 += 1, R1170 += 1, R1133 += 1, R1134 += 1 };
  s0 -> s3 [0, 65535] { R1268 += 1, R1215 += 1, R1216 += 1 };
  s0 -> s4 [0, 65535] { R1268 += 1, R1216 += 1, R1169 += 1, R1170 += 1 };
  s0 -> s1 [59, 65535] { R1268 += 1, R1216 += 1, R1170 += 1, R1134 += 1 };
  s1 -> s1 [0, 57] { R1268 += 1, R1216 += 1, R1170 += 1, R1134 += 1 };
  s1 -> s7 [0, 65535] { R1268 += 1, R1216 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R1268 += 1 };
  s1 -> s1 [0, 65535] { R1268 += 1, R1216 += 1, R1170 += 1 };
  s1 -> s1 [59, 65535] { R1268 += 1, R1216 += 1, R1170 += 1, R1134 += 1 };
  s2 -> s1 [0, 57] { R1268 += 1, R1216 += 1, R1170 += 1, R1134 += 1 };
  s2 -> s7 [0, 65535] { R1268 += 1, R1216 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R1268 += 1 };
  s2 -> s2 [0, 65535] { R1268 += 1, R1216 += 1, R1170 += 1, R1133 += 1, R1134 += 1 };
  s2 -> s1 [59, 65535] { R1268 += 1, R1216 += 1, R1170 += 1, R1134 += 1 };
  s3 -> s1 [0, 57] { R1268 += 1, R1216 += 1, R1170 += 1, R1134 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R1268 += 1, R1216 += 1, R1170 += 1, R1133 += 1, R1134 += 1 };
  s3 -> s3 [0, 65535] { R1268 += 1, R1215 += 1, R1216 += 1 };
  s3 -> s4 [0, 65535] { R1268 += 1, R1216 += 1, R1169 += 1, R1170 += 1 };
  s3 -> s1 [59, 65535] { R1268 += 1, R1216 += 1, R1170 += 1, R1134 += 1 };
  s4 -> s1 [0, 57] { R1268 += 1, R1216 += 1, R1170 += 1, R1134 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R1268 += 1 };
  s4 -> s2 [0, 65535] { R1268 += 1, R1216 += 1, R1170 += 1, R1133 += 1, R1134 += 1 };
  s4 -> s4 [0, 65535] { R1268 += 1, R1216 += 1, R1169 += 1, R1170 += 1 };
  s4 -> s1 [59, 65535] { R1268 += 1, R1216 += 1, R1170 += 1, R1134 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1268 += 1 };
  s7 -> s7 [0, 65535] { R1268 += 1, R1216 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R1268 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 65535] { R1270 += 1, R1218 += 1, R1171 += 1, R1172 += 1 };
  s0 -> s2 [0, 65535] { R1270 += 1, R1218 += 1, R1172 += 1, R1136 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R1269 += 1, R1270 += 1 };
  s0 -> s3 [0, 65535] { R1270 += 1, R1218 += 1, R1172 += 1, R1135 += 1, R1136 += 1 };
  s0 -> s4 [0, 65535] { R1270 += 1, R1217 += 1, R1218 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1270 += 1, R1218 += 1, R1171 += 1, R1172 += 1 };
  s1 -> s6 [0, 65535] { R1270 += 1 };
  s1 -> s2 [0, 65535] { R1270 += 1, R1218 += 1, R1172 += 1, R1136 += 1, R1 += 1 };
  s1 -> s3 [0, 65535] { R1270 += 1, R1218 += 1, R1172 += 1, R1135 += 1, R1136 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s8 [0, 65535] { R1270 += 1, R1218 += 1, R1172 += 1 };
  s2 -> s6 [0, 65535] { R1270 += 1 };
  s2 -> s7 [0, 65535] { R1270 += 1, R1218 += 1 };
  s2 -> s2 [0, 65535] { R1270 += 1, R1218 += 1, R1172 += 1, R1136 += 1, R1 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R1270 += 1 };
  s3 -> s7 [0, 65535] { R1270 += 1, R1218 += 1 };
  s3 -> s2 [0, 65535] { R1270 += 1, R1218 += 1, R1172 += 1, R1136 += 1, R1 += 1 };
  s3 -> s3 [0, 65535] { R1270 += 1, R1218 += 1, R1172 += 1, R1135 += 1, R1136 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s1 [0, 65535] { R1270 += 1, R1218 += 1, R1171 += 1, R1172 += 1 };
  s4 -> s2 [0, 65535] { R1270 += 1, R1218 += 1, R1172 += 1, R1136 += 1, R1 += 1 };
  s4 -> s3 [0, 65535] { R1270 += 1, R1218 += 1, R1172 += 1, R1135 += 1, R1136 += 1 };
  s4 -> s4 [0, 65535] { R1270 += 1, R1217 += 1, R1218 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1270 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R1270 += 1 };
  s7 -> s7 [0, 65535] { R1270 += 1, R1218 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s8 [0, 65535] { R1270 += 1, R1218 += 1, R1172 += 1 };
  s8 -> s6 [0, 65535] { R1270 += 1 };
  s8 -> s7 [0, 65535] { R1270 += 1, R1218 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 64] { R1272 += 1, R1220 += 1, R1174 += 1, R1138 += 1 };
  s0 -> s0 [0, 65535] { R1271 += 1, R1272 += 1 };
  s0 -> s2 [0, 65535] { R1272 += 1, R1220 += 1, R1173 += 1, R1174 += 1 };
  s0 -> s3 [0, 65535] { R1272 += 1, R1220 += 1, R1174 += 1, R1137 += 1, R1138 += 1 };
  s0 -> s4 [0, 65535] { R1272 += 1, R1219 += 1, R1220 += 1 };
  s0 -> s1 [91, 65535] { R1272 += 1, R1220 += 1, R1174 += 1, R1138 += 1 };
  s1 -> s1 [0, 64] { R1272 += 1, R1220 += 1, R1174 += 1, R1138 += 1 };
  s1 -> s1 [0, 65535] { R1272 += 1, R1220 += 1, R1174 += 1 };
  s1 -> s6 [0, 65535] { R1272 += 1, R1220 += 1 };
  s1 -> s7 [0, 65535] { R1272 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [91, 65535] { R1272 += 1, R1220 += 1, R1174 += 1, R1138 += 1 };
  s2 -> s1 [0, 64] { R1272 += 1, R1220 += 1, R1174 += 1, R1138 += 1 };
  s2 -> s2 [0, 65535] { R1272 += 1, R1220 += 1, R1173 += 1, R1174 += 1 };
  s2 -> s7 [0, 65535] { R1272 += 1 };
  s2 -> s3 [0, 65535] { R1272 += 1, R1220 += 1, R1174 += 1, R1137 += 1, R1138 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [91, 65535] { R1272 += 1, R1220 += 1, R1174 += 1, R1138 += 1 };
  s3 -> s1 [0, 64] { R1272 += 1, R1220 += 1, R1174 += 1, R1138 += 1 };
  s3 -> s6 [0, 65535] { R1272 += 1, R1220 += 1 };
  s3 -> s7 [0, 65535] { R1272 += 1 };
  s3 -> s3 [0, 65535] { R1272 += 1, R1220 += 1, R1174 += 1, R1137 += 1, R1138 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [91, 65535] { R1272 += 1, R1220 += 1, R1174 += 1, R1138 += 1 };
  s4 -> s1 [0, 64] { R1272 += 1, R1220 += 1, R1174 += 1, R1138 += 1 };
  s4 -> s2 [0, 65535] { R1272 += 1, R1220 += 1, R1173 += 1, R1174 += 1 };
  s4 -> s3 [0, 65535] { R1272 += 1, R1220 += 1, R1174 += 1, R1137 += 1, R1138 += 1 };
  s4 -> s4 [0, 65535] { R1272 += 1, R1219 += 1, R1220 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s1 [91, 65535] { R1272 += 1, R1220 += 1, R1174 += 1, R1138 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1272 += 1, R1220 += 1 };
  s6 -> s7 [0, 65535] { R1272 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R1272 += 1 };
  s7 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton uri_27 {
  init s0;
  s0 -> s1 [0, 65535] { R1274 += 1, R1222 += 1, R1176 += 1, R1139 += 1, R1140 += 1 };
  s0 -> s2 [0, 65535] { R1274 += 1, R1222 += 1, R1176 += 1, R1140 += 1, R1120 += 1 };
  s0 -> s3 [0, 65535] { R1274 += 1, R1222 += 1, R1175 += 1, R1176 += 1 };
  s0 -> s0 [0, 65535] { R1273 += 1, R1274 += 1 };
  s0 -> s4 [0, 65535] { R1274 += 1, R1221 += 1, R1222 += 1 };
  s1 -> s1 [0, 65535] { R1274 += 1, R1222 += 1, R1176 += 1, R1139 += 1, R1140 += 1 };
  s1 -> s2 [0, 65535] { R1274 += 1, R1222 += 1, R1176 += 1, R1140 += 1, R1120 += 1 };
  s1 -> s6 [0, 65535] { R1274 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s8 [0, 65535] { R1274 += 1, R1222 += 1 };
  s2 -> s2 [0, 65535] { R1274 += 1, R1222 += 1, R1176 += 1, R1140 += 1, R1120 += 1 };
  s2 -> s6 [0, 65535] { R1274 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s7 [0, 65535] { R1274 += 1, R1222 += 1, R1176 += 1 };
  s2 -> s8 [0, 65535] { R1274 += 1, R1222 += 1 };
  s3 -> s1 [0, 65535] { R1274 += 1, R1222 += 1, R1176 += 1, R1139 += 1, R1140 += 1 };
  s3 -> s2 [0, 65535] { R1274 += 1, R1222 += 1, R1176 += 1, R1140 += 1, R1120 += 1 };
  s3 -> s3 [0, 65535] { R1274 += 1, R1222 += 1, R1175 += 1, R1176 += 1 };
  s3 -> s6 [0, 65535] { R1274 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s1 [0, 65535] { R1274 += 1, R1222 += 1, R1176 += 1, R1139 += 1, R1140 += 1 };
  s4 -> s2 [0, 65535] { R1274 += 1, R1222 += 1, R1176 += 1, R1140 += 1, R1120 += 1 };
  s4 -> s3 [0, 65535] { R1274 += 1, R1222 += 1, R1175 += 1, R1176 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1274 += 1, R1221 += 1, R1222 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1274 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R1274 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R1274 += 1, R1222 += 1, R1176 += 1 };
  s7 -> s8 [0, 65535] { R1274 += 1, R1222 += 1 };
  s8 -> s6 [0, 65535] { R1274 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s8 [0, 65535] { R1274 += 1, R1222 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
};
constraint R3 = R1132 && R4 = R1158 && R5 = R1136 && R6 = R1176 && R7 = R1196 && R8 = R1274 && R15 = 0 && R16 = 0 && R647 = 0 && R648 - R1135 = -1 && R963 = 0 && R964 = R1222 && R1121 = 0 && R1122 = 1 && R1123 = 0 && R1124 = 1 && R1125 = 0 && R1126 = 1 && R1127 = 0 && R1128 = 1 && R1129 = 1 && R1130 = R1132 && R1131 = 1 && R1133 = R1135 && R1134 = R1136 && R1141 = 0 && R1142 = 4 && R1143 = 0 && R1144 = 4 && R1145 = 1 && R1146 = R1158 && R1147 = 1 && R1148 = R1158 && R1149 = 1 && R1150 = R1158 && R1151 = 1 && R1152 = R1158 && R1153 = 1 && R1154 = R1158 && R1155 = 1 && R1156 = R1158 && R1157 = 1 && R1159 = 5 && R1160 = R1176 && R1161 = 5 && R1162 = R1176 && R1163 = 5 && R1164 = R1176 && R1165 = 5 && R1166 = R1176 && R1167 = 5 && R1168 = R1176 && R1169 = 5 && R1170 = R1176 && R1171 = 5 && R1172 = R1176 && R1173 = 5 && R1174 = R1176 && R1175 = 5 && R1177 - R1222 = 1 && R1178 = R1196 && R1179 - R1222 = 1 && R1180 = R1196 && R1181 - R1222 = 1 && R1182 = R1196 && R1183 - R1222 = 1 && R1184 = R1196 && R1185 - R1222 = 1 && R1186 = R1196 && R1187 - R1222 = 1 && R1188 = R1196 && R1189 - R1222 = 1 && R1190 = R1196 && R1191 - R1222 = 1 && R1192 = R1196 && R1193 - R1222 = 1 && R1194 = R1196 && R1195 - R1222 = 1 && R1197 = 0 && R1198 = R1222 && R1199 = 0 && R1200 = R1222 && R1201 = 0 && R1202 = R1222 && R1203 = 0 && R1204 = R1222 && R1205 = 0 && R1206 = R1222 && R1207 = 0 && R1208 = R1222 && R1209 = 0 && R1210 = R1222 && R1211 = 0 && R1212 = R1222 && R1213 = 0 && R1214 = R1222 && R1215 = 0 && R1216 = R1222 && R1217 = 0 && R1218 = R1222 && R1219 = 0 && R1220 = R1222 && R1221 = 0 && R1223 = 10 && R1224 = R1274 && R1225 = 10 && R1226 = R1274 && R1227 = 10 && R1228 = R1274 && R1229 = 10 && R1230 = R1274 && R1231 = 10 && R1232 = R1274 && R1233 = 10 && R1234 = R1274 && R1235 = 10 && R1236 = R1274 && R1237 = 10 && R1238 = R1274 && R1239 = 10 && R1240 = R1274 && R1241 = 10 && R1242 = R1274 && R1243 = 10 && R1244 = R1274 && R1245 = 10 && R1246 = R1274 && R1247 = 10 && R1248 = R1274 && R1249 = 10 && R1250 = R1274 && R1251 = 10 && R1252 = R1274 && R1253 = 10 && R1254 = R1274 && R1255 = 10 && R1256 = R1274 && R1257 = 10 && R1258 = R1274 && R1259 = 10 && R1260 = R1274 && R1261 = 10 && R1262 = R1274 && R1263 = 10 && R1264 = R1274 && R1265 = 10 && R1266 = R1274 && R1267 = 10 && R1268 = R1274 && R1269 = 10 && R1270 = R1274 && R1271 = 10 && R1272 = R1274 && R1273 = 10 && R0 != 0 && R1 != 0 && R2 != 0 && R11 < 1 && 0 < R1132 && R1135 - R1136 < 1 && 0 < R1135 && 0 < R1158 && 4 < R1176 && R1222 < R1196 && -1 < R1222 && 9 < R1274 && (R1137 != 0 || R1135 - R1138 = 1 || (R1120 = 0 && R1135 = 1)) && (R1139 != 0 || R1135 - R1140 = 1 || (R1120 = 0 && R1135 = 1)) && (R1137 = 0 || (R1120 = 0 && R1135 = 1)) && (R1139 = 0 || (R1120 = 0 && R1135 = 1));
// End of Parikh automata intersection problem
