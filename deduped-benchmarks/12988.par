// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R2, R3, R35, R36, R37, R38, R39, R4, R40, R41, R42, R43, R44, R45, R46, R47, R48, R49, R5, R50, R51, R52, R53, R54, R55, R56, R57, R58, R59, R60, R7, R8;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s1 [44, 44];
  s0 -> s0 [45, 57];
  s0 -> s2 [58, 58];
  s0 -> s0 [59, 65535];
  s1 -> s1 [0, 57];
  s1 -> s4 [58, 58];
  s1 -> s1 [59, 65535];
  s2 -> s0 [0, 43];
  s2 -> s1 [44, 44];
  s2 -> s0 [45, 46];
  s2 -> s3 [47, 47];
  s2 -> s0 [48, 57];
  s2 -> s2 [58, 58];
  s2 -> s0 [59, 65535];
  s3 -> s0 [0, 43];
  s3 -> s1 [44, 44];
  s3 -> s0 [45, 46];
  s3 -> s0 [48, 57];
  s3 -> s2 [58, 58];
  s3 -> s0 [59, 65535];
  s4 -> s1 [0, 46];
  s4 -> s5 [47, 47];
  s4 -> s1 [48, 57];
  s4 -> s4 [58, 58];
  s4 -> s1 [59, 65535];
  s5 -> s1 [0, 46];
  s5 -> s1 [48, 57];
  s5 -> s4 [58, 58];
  s5 -> s1 [59, 65535];
  accepting s1, s4, s5;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 43] { R8 += 1 };
  s0 -> s0 [0, 65535] { R7 += 1, R8 += 1 };
  s0 -> s2 [44, 44];
  s0 -> s1 [45, 65535] { R8 += 1 };
  s1 -> s1 [0, 43] { R8 += 1 };
  s1 -> s2 [44, 44];
  s1 -> s1 [45, 65535] { R8 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 43] { R44 += 1 };
  s0 -> s0 [0, 65535] { R43 += 1, R44 += 1 };
  s0 -> s1 [45, 65535] { R44 += 1 };
  s1 -> s1 [0, 43] { R44 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [45, 65535] { R44 += 1 };
  accepting s0, s1;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 65535] { R46 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R45 += 1, R46 += 1 };
  s1 -> s1 [0, 65535] { R46 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 65535] { R48 += 1, R39 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R47 += 1, R48 += 1 };
  s0 -> s2 [91, 91] { R48 += 1, R40 += 1 };
  s1 -> s1 [0, 65535] { R48 += 1, R39 += 1, R40 += 1 };
  s1 -> s2 [91, 91] { R48 += 1, R40 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R48 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 65535] { R50 += 1, R41 += 1, R42 += 1 };
  s0 -> s0 [0, 65535] { R49 += 1, R50 += 1 };
  s0 -> s2 [0, 65535] { R50 += 1, R42 += 1, R4 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R50 += 1, R41 += 1, R42 += 1 };
  s1 -> s2 [0, 65535] { R50 += 1, R42 += 1, R4 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R50 += 1, R42 += 1, R4 += 1 };
  s2 -> s4 [0, 65535] { R50 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R50 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 64] { R52 += 1 };
  s0 -> s0 [0, 65535] { R51 += 1, R52 += 1 };
  s0 -> s1 [91, 65535] { R52 += 1 };
  s1 -> s1 [0, 64] { R52 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [91, 65535] { R52 += 1 };
  accepting s0, s1;
};
automaton uri_8 {
  init s0;
  s0 -> s0 [0, 65535] { R53 += 1, R54 += 1 };
  s0 -> s1 [0, 65535] { R54 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R54 += 1, R0 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 57] { R56 += 1 };
  s0 -> s2 [0, 65535] { R56 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R55 += 1, R56 += 1 };
  s0 -> s3 [58, 58] { R56 += 1 };
  s0 -> s1 [59, 65535] { R56 += 1 };
  s1 -> s1 [0, 57] { R56 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R56 += 1 };
  s1 -> s1 [59, 65535] { R56 += 1 };
  s2 -> s1 [0, 57] { R56 += 1 };
  s2 -> s2 [0, 65535] { R56 += 1, R5 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [58, 58] { R56 += 1 };
  s2 -> s1 [59, 65535] { R56 += 1 };
  s3 -> s3 [0, 65535] { R56 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 90] { R58 += 1, R36 += 1 };
  s0 -> s0 [0, 65535] { R57 += 1, R58 += 1 };
  s0 -> s2 [0, 65535] { R58 += 1, R35 += 1, R36 += 1 };
  s0 -> s3 [91, 91] { R58 += 1, R36 += 1 };
  s0 -> s1 [92, 65535] { R58 += 1, R36 += 1 };
  s1 -> s5 [0, 65535] { R58 += 1 };
  s1 -> s1 [0, 65535] { R58 += 1, R36 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 90] { R58 += 1, R36 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R58 += 1, R35 += 1, R36 += 1 };
  s2 -> s3 [91, 91] { R58 += 1, R36 += 1 };
  s2 -> s1 [92, 65535] { R58 += 1, R36 += 1 };
  s3 -> s1 [0, 65535] { R58 += 1, R36 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R58 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s0 [0, 65535] { R59 += 1, R60 += 1 };
  s0 -> s1 [0, 65535] { R60 += 1, R38 += 1, R3 += 1 };
  s0 -> s2 [0, 65535] { R60 += 1, R37 += 1, R38 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R60 += 1 };
  s1 -> s1 [0, 65535] { R60 += 1, R38 += 1, R3 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R60 += 1, R38 += 1, R3 += 1 };
  s2 -> s2 [0, 65535] { R60 += 1, R37 += 1, R38 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R60 += 1 };
  accepting s3, s4, s2, s1, s0;
};
};
constraint R2 = R50 && R7 = 0 && R8 = R60 && R39 = 0 && R43 - R60 = 1 && R44 = R50 && R45 - R60 = 1 && R46 = R50 && R47 - R60 = 1 && R48 = R50 && R49 - R60 = 1 && R51 = 0 && R52 = R60 && R53 = 0 && R54 = R60 && R55 = 0 && R56 = R60 && R57 = 0 && R58 = R60 && R59 = 0 && R0 != 0 && R1 != 0 && R5 < 1 && R60 < R50 && -1 < R60 && (R1 != R40 || R40 = 1 || R40 < 0) && (R35 != 0 || ((R3 != 0 || ((R0 != R36 || R36 = 1 || R36 < 0) && (R0 = R36 || R36 = 1 || R0 < 1))) && (R3 = 0 || ((R0 != R36 || R36 = 1 || R36 < 0) && (R36 != 1 || -1 < R0) && (R0 = R36 || R36 = 1))))) && (R37 != 0 || ((R3 != 0 || ((R0 != R38 || R38 = 1 || R38 < 0) && (R0 = R38 || R38 = 1 || R0 < 1))) && (R3 = 0 || ((R0 != R38 || R38 = 1 || R38 < 0) && (R38 != 1 || -1 < R0) && (R0 = R38 || R38 = 1))))) && (R40 != 1 || -1 < R1) && (R41 != 0 || ((R4 != 0 || ((R1 != R42 || R42 = 1 || R42 < 0) && (R1 = R42 || R42 = 1 || R1 < 1))) && (R4 = 0 || ((R1 != R42 || R42 = 1 || R42 < 0) && (R42 != 1 || -1 < R1) && (R1 = R42 || R42 = 1))))) && (R1 = R40 || R40 = 1) && (R35 = 0 || (R3 = 0 && R0 < 0)) && (R37 = 0 || (R3 = 0 && R0 < 0)) && (R41 = 0 || (R4 = 0 && R1 < 0));
// End of Parikh automata intersection problem
