// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R2, R3, R4, R5, R6;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 57];
  s0 -> s1 [58, 58];
  s0 -> s0 [59, 64];
  s0 -> s2 [65, 65];
  s0 -> s0 [66, 65535];
  s1 -> s0 [0, 43];
  s1 -> s0 [45, 46];
  s1 -> s5 [47, 47];
  s1 -> s0 [48, 57];
  s1 -> s1 [58, 58];
  s1 -> s0 [59, 64];
  s1 -> s2 [65, 65];
  s1 -> s0 [66, 65535];
  s2 -> s2 [0, 43];
  s2 -> s2 [45, 57];
  s2 -> s3 [58, 58];
  s2 -> s2 [59, 65535];
  s3 -> s2 [0, 43];
  s3 -> s2 [45, 46];
  s3 -> s4 [47, 47];
  s3 -> s2 [48, 57];
  s3 -> s3 [58, 58];
  s3 -> s2 [59, 65535];
  s4 -> s2 [0, 43];
  s4 -> s2 [45, 46];
  s4 -> s2 [48, 57];
  s4 -> s3 [58, 58];
  s4 -> s2 [59, 65535];
  s5 -> s0 [0, 43];
  s5 -> s0 [45, 46];
  s5 -> s0 [48, 57];
  s5 -> s1 [58, 58];
  s5 -> s0 [59, 64];
  s5 -> s2 [65, 65];
  s5 -> s0 [66, 65535];
  accepting s2, s3, s4;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R0 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 57];
  s0 -> s0 [0, 65535] { R2 += 1 };
  s0 -> s2 [58, 58];
  s0 -> s1 [59, 65535];
  s1 -> s1 [0, 57];
  s1 -> s2 [58, 58];
  s1 -> s1 [59, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 90] { R4 += 1 };
  s0 -> s0 [0, 65535] { R3 += 1, R4 += 1 };
  s0 -> s2 [91, 91] { R4 += 1 };
  s0 -> s1 [92, 65535] { R4 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R4 += 1 };
  s2 -> s1 [0, 65535] { R4 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 65535] { R6 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R5 += 1, R6 += 1 };
  s1 -> s1 [0, 65535] { R6 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
};
constraint R0 != 0 && R2 < 1 && (R1 != 0 || ((R3 != 0 || ((R5 != 0 || ((R0 != R4 || R4 = 1 || R4 < 0) && (R0 != R6 || R6 = 1 || R6 < 0) && (R0 = R4 || R4 = 1 || R0 < 1) && (R0 = R6 || R6 = 1 || R0 < 1))) && (R5 = 0 || R0 < 1))) && (R3 = 0 || R0 < 1))) && (R1 = 0 || (R3 = 0 && R5 = 0 && (R0 != R4 || R4 = 1 || R4 < 0) && (R0 != R6 || R6 = 1 || R6 < 0) && (R4 != 1 || -1 < R0) && (R6 != 1 || -1 < R0) && (R0 = R4 || R4 = 1) && (R0 = R6 || R6 = 1)));
// End of Parikh automata intersection problem
