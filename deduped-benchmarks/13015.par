// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R100, R101, R102, R103, R104, R105, R106, R107, R108, R109, R110, R111, R112, R113, R114, R115, R116, R117, R118, R2, R3, R4, R5, R6, R65, R66, R67, R68, R69, R7, R70, R71, R72, R73, R74, R75, R76, R77, R78, R79, R80, R81, R82, R83, R84, R85, R86, R87, R88, R89, R9, R90, R91, R92, R93, R94, R95, R96, R97, R98, R99;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 43] { R94 += 1 };
  s0 -> s0 [0, 65535] { R93 += 1, R94 += 1 };
  s0 -> s2 [44, 44] { R94 += 1 };
  s0 -> s1 [45, 45] { R94 += 1 };
  s0 -> s3 [46, 46] { R94 += 1 };
  s0 -> s1 [48, 62] { R94 += 1 };
  s0 -> s1 [65, 65535] { R94 += 1 };
  s1 -> s1 [0, 43] { R94 += 1 };
  s1 -> s2 [44, 44] { R94 += 1 };
  s1 -> s1 [45, 45] { R94 += 1 };
  s1 -> s3 [46, 46] { R94 += 1 };
  s1 -> s1 [48, 62] { R94 += 1 };
  s1 -> s1 [65, 65535] { R94 += 1 };
  s2 -> s2 [0, 45] { R94 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s7 [46, 46] { R94 += 1 };
  s2 -> s2 [48, 62] { R94 += 1 };
  s2 -> s2 [65, 65535] { R94 += 1 };
  s3 -> s1 [0, 43] { R94 += 1 };
  s3 -> s2 [44, 44] { R94 += 1 };
  s3 -> s1 [45, 45] { R94 += 1 };
  s3 -> s3 [46, 46] { R94 += 1 };
  s3 -> s1 [48, 62] { R94 += 1 };
  s3 -> s1 [65, 114] { R94 += 1 };
  s3 -> s4 [115, 115] { R94 += 1 };
  s3 -> s1 [116, 65535] { R94 += 1 };
  s4 -> s1 [0, 43] { R94 += 1 };
  s4 -> s2 [44, 44] { R94 += 1 };
  s4 -> s1 [45, 45] { R94 += 1 };
  s4 -> s3 [46, 46] { R94 += 1 };
  s4 -> s1 [48, 62] { R94 += 1 };
  s4 -> s1 [65, 110] { R94 += 1 };
  s4 -> s5 [111, 111] { R94 += 1 };
  s4 -> s1 [112, 65535] { R94 += 1 };
  s5 -> s1 [0, 43] { R94 += 1 };
  s5 -> s2 [44, 44] { R94 += 1 };
  s5 -> s1 [45, 45] { R94 += 1 };
  s5 -> s3 [46, 46] { R94 += 1 };
  s5 -> s1 [48, 62] { R94 += 1 };
  s5 -> s1 [65, 98] { R94 += 1 };
  s5 -> s6 [99, 99] { R94 += 1 };
  s5 -> s1 [100, 65535] { R94 += 1 };
  s6 -> s1 [0, 43] { R94 += 1 };
  s6 -> s2 [44, 44] { R94 += 1 };
  s6 -> s1 [45, 45] { R94 += 1 };
  s6 -> s3 [46, 46] { R94 += 1 };
  s6 -> s1 [48, 62] { R94 += 1 };
  s6 -> s1 [65, 106] { R94 += 1 };
  s6 -> s1 [108, 65535] { R94 += 1 };
  s7 -> s2 [0, 45] { R94 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s7 [46, 46] { R94 += 1 };
  s7 -> s2 [48, 62] { R94 += 1 };
  s7 -> s2 [65, 114] { R94 += 1 };
  s7 -> s8 [115, 115] { R94 += 1 };
  s7 -> s2 [116, 65535] { R94 += 1 };
  s8 -> s2 [0, 45] { R94 += 1 };
  s8 -> s8 [0, 65535];
  s8 -> s7 [46, 46] { R94 += 1 };
  s8 -> s2 [48, 62] { R94 += 1 };
  s8 -> s2 [65, 110] { R94 += 1 };
  s8 -> s9 [111, 111] { R94 += 1 };
  s8 -> s2 [112, 65535] { R94 += 1 };
  s9 -> s2 [0, 45] { R94 += 1 };
  s9 -> s9 [0, 65535];
  s9 -> s7 [46, 46] { R94 += 1 };
  s9 -> s2 [48, 62] { R94 += 1 };
  s9 -> s2 [65, 98] { R94 += 1 };
  s9 -> s10 [99, 99] { R94 += 1 };
  s9 -> s2 [100, 65535] { R94 += 1 };
  s10 -> s2 [0, 45] { R94 += 1 };
  s10 -> s10 [0, 65535];
  s10 -> s7 [46, 46] { R94 += 1 };
  s10 -> s2 [48, 62] { R94 += 1 };
  s10 -> s2 [65, 106] { R94 += 1 };
  s10 -> s2 [108, 65535] { R94 += 1 };
  accepting s8, s2, s9, s7, s10;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R95 += 1, R96 += 1 };
  s0 -> s1 [0, 65535] { R96 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R96 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 43] { R98 += 1, R10 += 1 };
  s0 -> s2 [0, 65535] { R98 += 1, R9 += 1, R10 += 1 };
  s0 -> s0 [0, 65535] { R97 += 1, R98 += 1 };
  s0 -> s3 [44, 44] { R98 += 1 };
  s0 -> s1 [45, 65535] { R98 += 1, R10 += 1 };
  s1 -> s1 [0, 43] { R98 += 1, R10 += 1 };
  s1 -> s3 [44, 44] { R98 += 1 };
  s1 -> s1 [45, 65535] { R98 += 1, R10 += 1 };
  s2 -> s1 [0, 43] { R98 += 1, R10 += 1 };
  s2 -> s2 [0, 65535] { R98 += 1, R9 += 1, R10 += 1 };
  s2 -> s3 [44, 44] { R98 += 1 };
  s2 -> s1 [45, 65535] { R98 += 1, R10 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R98 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 43] { R100 += 1, R74 += 1 };
  s0 -> s0 [0, 65535] { R99 += 1, R100 += 1 };
  s0 -> s2 [0, 65535] { R100 += 1, R73 += 1, R74 += 1 };
  s0 -> s1 [45, 64] { R100 += 1, R74 += 1 };
  s0 -> s3 [80, 80] { R100 += 1, R74 += 1 };
  s0 -> s1 [81, 65535] { R100 += 1, R74 += 1 };
  s1 -> s1 [0, 43] { R100 += 1, R74 += 1 };
  s1 -> s1 [45, 64] { R100 += 1, R74 += 1 };
  s1 -> s3 [80, 80] { R100 += 1, R74 += 1 };
  s1 -> s1 [81, 65535] { R100 += 1, R74 += 1 };
  s2 -> s1 [0, 43] { R100 += 1, R74 += 1 };
  s2 -> s2 [0, 65535] { R100 += 1, R73 += 1, R74 += 1 };
  s2 -> s1 [45, 64] { R100 += 1, R74 += 1 };
  s2 -> s3 [80, 80] { R100 += 1, R74 += 1 };
  s2 -> s1 [81, 65535] { R100 += 1, R74 += 1 };
  s3 -> s3 [0, 43] { R100 += 1, R74 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R100 += 1 };
  s3 -> s3 [45, 64] { R100 += 1, R74 += 1 };
  s3 -> s3 [80, 65535] { R100 += 1, R74 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 65535] { R102 += 1, R75 += 1, R76 += 1 };
  s0 -> s2 [0, 65535] { R102 += 1, R76 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R101 += 1, R102 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R102 += 1, R75 += 1, R76 += 1 };
  s1 -> s2 [0, 65535] { R102 += 1, R76 += 1, R1 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R102 += 1, R76 += 1, R1 += 1 };
  s2 -> s4 [0, 65535] { R102 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R102 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 57] { R104 += 1, R78 += 1 };
  s0 -> s0 [0, 65535] { R103 += 1, R104 += 1 };
  s0 -> s2 [0, 65535] { R104 += 1, R77 += 1, R78 += 1 };
  s0 -> s3 [0, 65535] { R104 += 1, R78 += 1, R7 += 1 };
  s0 -> s4 [58, 58] { R104 += 1, R78 += 1 };
  s0 -> s1 [59, 65535] { R104 += 1, R78 += 1 };
  s1 -> s1 [0, 57] { R104 += 1, R78 += 1 };
  s1 -> s1 [0, 65535] { R104 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s4 [58, 58] { R104 += 1, R78 += 1 };
  s1 -> s1 [59, 65535] { R104 += 1, R78 += 1 };
  s2 -> s1 [0, 57] { R104 += 1, R78 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R104 += 1, R77 += 1, R78 += 1 };
  s2 -> s3 [0, 65535] { R104 += 1, R78 += 1, R7 += 1 };
  s2 -> s4 [58, 58] { R104 += 1, R78 += 1 };
  s2 -> s1 [59, 65535] { R104 += 1, R78 += 1 };
  s3 -> s1 [0, 57] { R104 += 1, R78 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R104 += 1 };
  s3 -> s3 [0, 65535] { R104 += 1, R78 += 1, R7 += 1 };
  s3 -> s4 [58, 58] { R104 += 1, R78 += 1 };
  s3 -> s1 [59, 65535] { R104 += 1, R78 += 1 };
  s4 -> s4 [0, 65535] { R104 += 1, R78 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R104 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 90] { R106 += 1, R80 += 1, R70 += 1 };
  s0 -> s0 [0, 65535] { R105 += 1, R106 += 1 };
  s0 -> s2 [0, 65535] { R106 += 1, R80 += 1, R69 += 1, R70 += 1 };
  s0 -> s3 [0, 65535] { R106 += 1, R79 += 1, R80 += 1 };
  s0 -> s4 [91, 91] { R106 += 1, R80 += 1, R70 += 1 };
  s0 -> s1 [92, 65535] { R106 += 1, R80 += 1, R70 += 1 };
  s1 -> s6 [0, 65535] { R106 += 1 };
  s1 -> s1 [0, 65535] { R106 += 1, R80 += 1, R70 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s7 [0, 65535] { R106 += 1, R80 += 1 };
  s2 -> s1 [0, 90] { R106 += 1, R80 += 1, R70 += 1 };
  s2 -> s6 [0, 65535] { R106 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R106 += 1, R80 += 1, R69 += 1, R70 += 1 };
  s2 -> s4 [91, 91] { R106 += 1, R80 += 1, R70 += 1 };
  s2 -> s1 [92, 65535] { R106 += 1, R80 += 1, R70 += 1 };
  s3 -> s1 [0, 90] { R106 += 1, R80 += 1, R70 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R106 += 1, R80 += 1, R69 += 1, R70 += 1 };
  s3 -> s3 [0, 65535] { R106 += 1, R79 += 1, R80 += 1 };
  s3 -> s4 [91, 91] { R106 += 1, R80 += 1, R70 += 1 };
  s3 -> s1 [92, 65535] { R106 += 1, R80 += 1, R70 += 1 };
  s4 -> s1 [0, 65535] { R106 += 1, R80 += 1, R70 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R106 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R106 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R106 += 1, R80 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R108 += 1, R81 += 1, R82 += 1 };
  s0 -> s2 [0, 65535] { R108 += 1, R82 += 1, R72 += 1, R5 += 1 };
  s0 -> s3 [0, 65535] { R108 += 1, R82 += 1, R71 += 1, R72 += 1 };
  s0 -> s0 [0, 65535] { R107 += 1, R108 += 1 };
  s1 -> s1 [0, 65535] { R108 += 1, R81 += 1, R82 += 1 };
  s1 -> s2 [0, 65535] { R108 += 1, R82 += 1, R72 += 1, R5 += 1 };
  s1 -> s3 [0, 65535] { R108 += 1, R82 += 1, R71 += 1, R72 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s4 [0, 65535] { R108 += 1 };
  s2 -> s2 [0, 65535] { R108 += 1, R82 += 1, R72 += 1, R5 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R108 += 1, R82 += 1 };
  s3 -> s4 [0, 65535] { R108 += 1 };
  s3 -> s2 [0, 65535] { R108 += 1, R82 += 1, R72 += 1, R5 += 1 };
  s3 -> s3 [0, 65535] { R108 += 1, R82 += 1, R71 += 1, R72 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R108 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R108 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R108 += 1, R82 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 64] { R110 += 1, R84 += 1 };
  s0 -> s0 [0, 65535] { R109 += 1, R110 += 1 };
  s0 -> s2 [0, 65535] { R110 += 1, R83 += 1, R84 += 1 };
  s0 -> s1 [91, 65535] { R110 += 1, R84 += 1 };
  s1 -> s1 [0, 64] { R110 += 1, R84 += 1 };
  s1 -> s1 [0, 65535] { R110 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [91, 65535] { R110 += 1, R84 += 1 };
  s2 -> s1 [0, 64] { R110 += 1, R84 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R110 += 1, R83 += 1, R84 += 1 };
  s2 -> s1 [91, 65535] { R110 += 1, R84 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65535] { R112 += 1, R85 += 1, R86 += 1 };
  s0 -> s2 [0, 65535] { R112 += 1, R86 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R111 += 1, R112 += 1 };
  s1 -> s1 [0, 65535] { R112 += 1, R85 += 1, R86 += 1 };
  s1 -> s2 [0, 65535] { R112 += 1, R86 += 1, R0 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R112 += 1, R86 += 1, R0 += 1 };
  s2 -> s3 [0, 65535] { R112 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R112 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 57] { R114 += 1, R88 += 1 };
  s0 -> s2 [0, 65535] { R114 += 1, R87 += 1, R88 += 1 };
  s0 -> s0 [0, 65535] { R113 += 1, R114 += 1 };
  s0 -> s3 [0, 65535] { R114 += 1, R88 += 1, R6 += 1 };
  s0 -> s4 [58, 58] { R114 += 1, R88 += 1 };
  s0 -> s1 [59, 65535] { R114 += 1, R88 += 1 };
  s1 -> s1 [0, 57] { R114 += 1, R88 += 1 };
  s1 -> s1 [0, 65535] { R114 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s4 [58, 58] { R114 += 1, R88 += 1 };
  s1 -> s1 [59, 65535] { R114 += 1, R88 += 1 };
  s2 -> s1 [0, 57] { R114 += 1, R88 += 1 };
  s2 -> s2 [0, 65535] { R114 += 1, R87 += 1, R88 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R114 += 1, R88 += 1, R6 += 1 };
  s2 -> s4 [58, 58] { R114 += 1, R88 += 1 };
  s2 -> s1 [59, 65535] { R114 += 1, R88 += 1 };
  s3 -> s1 [0, 57] { R114 += 1, R88 += 1 };
  s3 -> s5 [0, 65535] { R114 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R114 += 1, R88 += 1, R6 += 1 };
  s3 -> s4 [58, 58] { R114 += 1, R88 += 1 };
  s3 -> s1 [59, 65535] { R114 += 1, R88 += 1 };
  s4 -> s4 [0, 65535] { R114 += 1, R88 += 1 };
  s5 -> s5 [0, 65535] { R114 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 90] { R116 += 1, R90 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R115 += 1, R116 += 1 };
  s0 -> s2 [0, 65535] { R116 += 1, R90 += 1, R65 += 1, R66 += 1 };
  s0 -> s3 [0, 65535] { R116 += 1, R89 += 1, R90 += 1 };
  s0 -> s4 [91, 91] { R116 += 1, R90 += 1, R66 += 1 };
  s0 -> s1 [92, 65535] { R116 += 1, R90 += 1, R66 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s7 [0, 65535] { R116 += 1, R90 += 1 };
  s1 -> s6 [0, 65535] { R116 += 1 };
  s1 -> s1 [0, 65535] { R116 += 1, R90 += 1, R66 += 1 };
  s2 -> s1 [0, 90] { R116 += 1, R90 += 1, R66 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R116 += 1, R90 += 1, R65 += 1, R66 += 1 };
  s2 -> s6 [0, 65535] { R116 += 1 };
  s2 -> s4 [91, 91] { R116 += 1, R90 += 1, R66 += 1 };
  s2 -> s1 [92, 65535] { R116 += 1, R90 += 1, R66 += 1 };
  s3 -> s1 [0, 90] { R116 += 1, R90 += 1, R66 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R116 += 1, R90 += 1, R65 += 1, R66 += 1 };
  s3 -> s3 [0, 65535] { R116 += 1, R89 += 1, R90 += 1 };
  s3 -> s4 [91, 91] { R116 += 1, R90 += 1, R66 += 1 };
  s3 -> s1 [92, 65535] { R116 += 1, R90 += 1, R66 += 1 };
  s4 -> s1 [0, 65535] { R116 += 1, R90 += 1, R66 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R116 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R116 += 1, R90 += 1 };
  s7 -> s6 [0, 65535] { R116 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s0 [0, 65535] { R117 += 1, R118 += 1 };
  s0 -> s1 [0, 65535] { R118 += 1, R92 += 1, R68 += 1, R4 += 1 };
  s0 -> s2 [0, 65535] { R118 += 1, R91 += 1, R92 += 1 };
  s0 -> s3 [0, 65535] { R118 += 1, R92 += 1, R67 += 1, R68 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R118 += 1, R92 += 1, R68 += 1, R4 += 1 };
  s1 -> s5 [0, 65535] { R118 += 1 };
  s1 -> s6 [0, 65535] { R118 += 1, R92 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R118 += 1, R92 += 1, R68 += 1, R4 += 1 };
  s2 -> s2 [0, 65535] { R118 += 1, R91 += 1, R92 += 1 };
  s2 -> s3 [0, 65535] { R118 += 1, R92 += 1, R67 += 1, R68 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R118 += 1, R92 += 1, R68 += 1, R4 += 1 };
  s3 -> s5 [0, 65535] { R118 += 1 };
  s3 -> s3 [0, 65535] { R118 += 1, R92 += 1, R67 += 1, R68 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R118 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R118 += 1 };
  s6 -> s6 [0, 65535] { R118 += 1, R92 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R2 = R82 && R3 = R118 && R9 = 0 && R10 = R92 && R73 - R92 = 1 && R74 = R82 && R75 - R92 = 1 && R76 = R82 && R77 - R92 = 1 && R78 = R82 && R79 - R92 = 1 && R80 = R82 && R81 - R92 = 1 && R83 = 0 && R84 = R92 && R85 = 0 && R86 = R92 && R87 = 0 && R88 = R92 && R89 = 0 && R90 = R92 && R91 = 0 && R93 = 10 && R94 = R118 && R95 = 10 && R96 = R118 && R97 = 10 && R98 = R118 && R99 = 10 && R100 = R118 && R101 = 10 && R102 = R118 && R103 = 10 && R104 = R118 && R105 = 10 && R106 = R118 && R107 = 10 && R108 = R118 && R109 = 10 && R110 = R118 && R111 = 10 && R112 = R118 && R113 = 10 && R114 = R118 && R115 = 10 && R116 = R118 && R117 = 10 && R0 != 0 && R1 != 0 && R6 < 1 && R7 < 1 && R92 < R82 && -1 < R92 && 9 < R118 && (R65 != 0 || ((R4 != 0 || ((R0 != R66 || R66 = 1 || R66 < 0) && (R0 = R66 || R66 = 1 || R0 < 1))) && (R4 = 0 || ((R0 != R66 || R66 = 1 || R66 < 0) && (R66 != 1 || -1 < R0) && (R0 = R66 || R66 = 1))))) && (R67 != 0 || ((R4 != 0 || ((R0 != R68 || R68 = 1 || R68 < 0) && (R0 = R68 || R68 = 1 || R0 < 1))) && (R4 = 0 || ((R0 != R68 || R68 = 1 || R68 < 0) && (R68 != 1 || -1 < R0) && (R0 = R68 || R68 = 1))))) && (R69 != 0 || ((R5 != 0 || ((R1 != R70 || R70 = 1 || R70 < 0) && (R1 = R70 || R70 = 1 || R1 < 1))) && (R5 = 0 || ((R1 != R70 || R70 = 1 || R70 < 0) && (R70 != 1 || -1 < R1) && (R1 = R70 || R70 = 1))))) && (R71 != 0 || ((R5 != 0 || ((R1 != R72 || R72 = 1 || R72 < 0) && (R1 = R72 || R72 = 1 || R1 < 1))) && (R5 = 0 || ((R1 != R72 || R72 = 1 || R72 < 0) && (R72 != 1 || -1 < R1) && (R1 = R72 || R72 = 1))))) && (R65 = 0 || (R4 = 0 && R0 < 0)) && (R67 = 0 || (R4 = 0 && R0 < 0)) && (R69 = 0 || (R5 = 0 && R1 < 0)) && (R71 = 0 || (R5 = 0 && R1 < 0));
// End of Parikh automata intersection problem
