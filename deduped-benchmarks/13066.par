// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R2, R3, R38, R39, R4, R40, R41, R42, R43, R44, R45, R46, R47, R48, R49, R5, R50, R51, R52, R53, R54, R55, R56, R57, R58, R59, R6, R60, R61, R62, R63, R64, R65, R8, R9;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s1 [44, 44];
  s0 -> s0 [45, 57];
  s0 -> s2 [58, 58];
  s0 -> s0 [59, 65535];
  s1 -> s1 [0, 57];
  s1 -> s4 [58, 58];
  s1 -> s1 [59, 65535];
  s2 -> s0 [0, 43];
  s2 -> s1 [44, 44];
  s2 -> s0 [45, 46];
  s2 -> s3 [47, 47];
  s2 -> s0 [48, 57];
  s2 -> s2 [58, 58];
  s2 -> s0 [59, 65535];
  s3 -> s0 [0, 43];
  s3 -> s1 [44, 44];
  s3 -> s0 [45, 46];
  s3 -> s0 [48, 57];
  s3 -> s2 [58, 58];
  s3 -> s0 [59, 65535];
  s4 -> s1 [0, 46];
  s4 -> s5 [47, 47];
  s4 -> s1 [48, 57];
  s4 -> s4 [58, 58];
  s4 -> s1 [59, 65535];
  s5 -> s1 [0, 46];
  s5 -> s1 [48, 57];
  s5 -> s4 [58, 58];
  s5 -> s1 [59, 65535];
  accepting s1, s4, s5;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 43] { R9 += 1 };
  s0 -> s0 [0, 65535] { R8 += 1, R9 += 1 };
  s0 -> s2 [44, 44];
  s0 -> s1 [45, 65535] { R9 += 1 };
  s1 -> s1 [0, 43] { R9 += 1 };
  s1 -> s2 [44, 44];
  s1 -> s1 [45, 65535] { R9 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 43] { R47 += 1 };
  s0 -> s0 [0, 65535] { R46 += 1, R47 += 1 };
  s0 -> s1 [45, 64] { R47 += 1 };
  s0 -> s2 [85, 85] { R47 += 1 };
  s0 -> s1 [86, 65535] { R47 += 1 };
  s1 -> s1 [0, 43] { R47 += 1 };
  s1 -> s1 [45, 64] { R47 += 1 };
  s1 -> s2 [85, 85] { R47 += 1 };
  s1 -> s1 [86, 65535] { R47 += 1 };
  s2 -> s2 [0, 43] { R47 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [45, 64] { R47 += 1 };
  s2 -> s2 [85, 65535] { R47 += 1 };
  accepting s2;
};
automaton uri_4 {
  init s0;
  s0 -> s0 [0, 65535] { R48 += 1, R49 += 1 };
  s0 -> s1 [0, 65535] { R49 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R49 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 57] { R51 += 1 };
  s0 -> s0 [0, 65535] { R50 += 1, R51 += 1 };
  s0 -> s2 [0, 65535] { R51 += 1, R6 += 1 };
  s0 -> s3 [58, 58] { R51 += 1 };
  s0 -> s1 [59, 65535] { R51 += 1 };
  s1 -> s1 [0, 57] { R51 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R51 += 1 };
  s1 -> s1 [59, 65535] { R51 += 1 };
  s2 -> s1 [0, 57] { R51 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R51 += 1, R6 += 1 };
  s2 -> s3 [58, 58] { R51 += 1 };
  s2 -> s1 [59, 65535] { R51 += 1 };
  s3 -> s3 [0, 65535] { R51 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 90] { R53 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R52 += 1, R53 += 1 };
  s0 -> s2 [0, 65535] { R53 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [91, 91] { R53 += 1, R43 += 1 };
  s0 -> s1 [92, 65535] { R53 += 1, R43 += 1 };
  s1 -> s1 [0, 65535] { R53 += 1, R43 += 1 };
  s1 -> s5 [0, 65535] { R53 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 90] { R53 += 1, R43 += 1 };
  s2 -> s2 [0, 65535] { R53 += 1, R42 += 1, R43 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [91, 91] { R53 += 1, R43 += 1 };
  s2 -> s1 [92, 65535] { R53 += 1, R43 += 1 };
  s3 -> s1 [0, 65535] { R53 += 1, R43 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R53 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R55 += 1, R45 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R54 += 1, R55 += 1 };
  s0 -> s2 [0, 65535] { R55 += 1, R44 += 1, R45 += 1 };
  s1 -> s4 [0, 65535] { R55 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R55 += 1, R45 += 1, R4 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R55 += 1, R45 += 1, R4 += 1 };
  s2 -> s2 [0, 65535] { R55 += 1, R44 += 1, R45 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R55 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 64] { R57 += 1 };
  s0 -> s0 [0, 65535] { R56 += 1, R57 += 1 };
  s0 -> s1 [91, 65535] { R57 += 1 };
  s1 -> s1 [0, 64] { R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [91, 65535] { R57 += 1 };
  accepting s0, s1;
};
automaton uri_9 {
  init s0;
  s0 -> s0 [0, 65535] { R58 += 1, R59 += 1 };
  s0 -> s1 [0, 65535] { R59 += 1, R0 += 1 };
  s1 -> s1 [0, 65535] { R59 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 57] { R61 += 1 };
  s0 -> s0 [0, 65535] { R60 += 1, R61 += 1 };
  s0 -> s2 [0, 65535] { R61 += 1, R5 += 1 };
  s0 -> s3 [58, 58] { R61 += 1 };
  s0 -> s1 [59, 65535] { R61 += 1 };
  s1 -> s1 [0, 57] { R61 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R61 += 1 };
  s1 -> s1 [59, 65535] { R61 += 1 };
  s2 -> s1 [0, 57] { R61 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R61 += 1, R5 += 1 };
  s2 -> s3 [58, 58] { R61 += 1 };
  s2 -> s1 [59, 65535] { R61 += 1 };
  s3 -> s3 [0, 65535] { R61 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 90] { R63 += 1, R39 += 1 };
  s0 -> s2 [0, 65535] { R63 += 1, R38 += 1, R39 += 1 };
  s0 -> s0 [0, 65535] { R62 += 1, R63 += 1 };
  s0 -> s3 [91, 91] { R63 += 1, R39 += 1 };
  s0 -> s1 [92, 65535] { R63 += 1, R39 += 1 };
  s1 -> s1 [0, 65535] { R63 += 1, R39 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R63 += 1 };
  s2 -> s1 [0, 90] { R63 += 1, R39 += 1 };
  s2 -> s2 [0, 65535] { R63 += 1, R38 += 1, R39 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [91, 91] { R63 += 1, R39 += 1 };
  s2 -> s1 [92, 65535] { R63 += 1, R39 += 1 };
  s3 -> s1 [0, 65535] { R63 += 1, R39 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R63 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s0 [0, 65535] { R64 += 1, R65 += 1 };
  s0 -> s1 [0, 65535] { R65 += 1, R41 += 1, R3 += 1 };
  s0 -> s2 [0, 65535] { R65 += 1, R40 += 1, R41 += 1 };
  s1 -> s4 [0, 65535] { R65 += 1 };
  s1 -> s1 [0, 65535] { R65 += 1, R41 += 1, R3 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R65 += 1, R41 += 1, R3 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R65 += 1, R40 += 1, R41 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R65 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
};
constraint R2 = R55 && R8 = 0 && R9 = R65 && R46 - R65 = 1 && R47 = R55 && R48 - R65 = 1 && R49 = R55 && R50 - R65 = 1 && R51 = R55 && R52 - R65 = 1 && R53 = R55 && R54 - R65 = 1 && R56 = 0 && R57 = R65 && R58 = 0 && R59 = R65 && R60 = 0 && R61 = R65 && R62 = 0 && R63 = R65 && R64 = 0 && R0 != 0 && R1 != 0 && R5 < 1 && R6 < 1 && R65 < R55 && -1 < R65 && (R38 != 0 || ((R3 != 0 || ((R0 != R39 || R39 = 1 || R39 < 0) && (R0 = R39 || R39 = 1 || R0 < 1))) && (R3 = 0 || ((R0 != R39 || R39 = 1 || R39 < 0) && (R39 != 1 || -1 < R0) && (R0 = R39 || R39 = 1))))) && (R40 != 0 || ((R3 != 0 || ((R0 != R41 || R41 = 1 || R41 < 0) && (R0 = R41 || R41 = 1 || R0 < 1))) && (R3 = 0 || ((R0 != R41 || R41 = 1 || R41 < 0) && (R41 != 1 || -1 < R0) && (R0 = R41 || R41 = 1))))) && (R42 != 0 || ((R4 != 0 || ((R1 != R43 || R43 = 1 || R43 < 0) && (R1 = R43 || R43 = 1 || R1 < 1))) && (R4 = 0 || ((R1 != R43 || R43 = 1 || R43 < 0) && (R43 != 1 || -1 < R1) && (R1 = R43 || R43 = 1))))) && (R44 != 0 || ((R4 != 0 || ((R1 != R45 || R45 = 1 || R45 < 0) && (R1 = R45 || R45 = 1 || R1 < 1))) && (R4 = 0 || ((R1 != R45 || R45 = 1 || R45 < 0) && (R45 != 1 || -1 < R1) && (R1 = R45 || R45 = 1))))) && (R38 = 0 || (R3 = 0 && R0 < 0)) && (R40 = 0 || (R3 = 0 && R0 < 0)) && (R42 = 0 || (R4 = 0 && R1 < 0)) && (R44 = 0 || (R4 = 0 && R1 < 0));
// End of Parikh automata intersection problem
