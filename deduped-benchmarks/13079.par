// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R2, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R30, R31, R32, R33, R4, R5;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 43] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s1 [45, 45] { R25 += 1 };
  s0 -> s2 [46, 46] { R25 += 1 };
  s0 -> s1 [48, 62] { R25 += 1 };
  s0 -> s1 [65, 65535] { R25 += 1 };
  s1 -> s1 [0, 43] { R25 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [45, 45] { R25 += 1 };
  s1 -> s2 [46, 46] { R25 += 1 };
  s1 -> s1 [48, 62] { R25 += 1 };
  s1 -> s1 [65, 65535] { R25 += 1 };
  s2 -> s1 [0, 43] { R25 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s1 [45, 45] { R25 += 1 };
  s2 -> s2 [46, 46] { R25 += 1 };
  s2 -> s1 [48, 62] { R25 += 1 };
  s2 -> s1 [65, 114] { R25 += 1 };
  s2 -> s3 [115, 115] { R25 += 1 };
  s2 -> s1 [116, 65535] { R25 += 1 };
  s3 -> s1 [0, 43] { R25 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s1 [45, 45] { R25 += 1 };
  s3 -> s2 [46, 46] { R25 += 1 };
  s3 -> s1 [48, 62] { R25 += 1 };
  s3 -> s1 [65, 110] { R25 += 1 };
  s3 -> s4 [111, 111] { R25 += 1 };
  s3 -> s1 [112, 65535] { R25 += 1 };
  s4 -> s1 [0, 43] { R25 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s1 [45, 45] { R25 += 1 };
  s4 -> s2 [46, 46] { R25 += 1 };
  s4 -> s1 [48, 62] { R25 += 1 };
  s4 -> s1 [65, 98] { R25 += 1 };
  s4 -> s5 [99, 99] { R25 += 1 };
  s4 -> s1 [100, 65535] { R25 += 1 };
  s5 -> s1 [0, 43] { R25 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s1 [45, 45] { R25 += 1 };
  s5 -> s2 [46, 46] { R25 += 1 };
  s5 -> s1 [48, 62] { R25 += 1 };
  s5 -> s1 [65, 106] { R25 += 1 };
  s5 -> s1 [108, 65535] { R25 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s0 -> s1 [0, 65535] { R27 += 1, R0 += 1 };
  s1 -> s1 [0, 65535] { R27 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 92] { R29 += 1, R5 += 1 };
  s0 -> s2 [0, 65535] { R29 += 1, R4 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R28 += 1, R29 += 1 };
  s0 -> s3 [93, 93] { R29 += 1 };
  s0 -> s1 [94, 65535] { R29 += 1, R5 += 1 };
  s1 -> s1 [0, 92] { R29 += 1, R5 += 1 };
  s1 -> s3 [93, 93] { R29 += 1 };
  s1 -> s1 [94, 65535] { R29 += 1, R5 += 1 };
  s2 -> s1 [0, 92] { R29 += 1, R5 += 1 };
  s2 -> s2 [0, 65535] { R29 += 1, R4 += 1, R5 += 1 };
  s2 -> s3 [93, 93] { R29 += 1 };
  s2 -> s1 [94, 65535] { R29 += 1, R5 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R29 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 65535] { R31 += 1, R20 += 1, R21 += 1 };
  s0 -> s0 [0, 65535] { R30 += 1, R31 += 1 };
  s0 -> s2 [91, 91] { R31 += 1, R21 += 1 };
  s1 -> s1 [0, 65535] { R31 += 1, R20 += 1, R21 += 1 };
  s1 -> s2 [91, 91] { R31 += 1, R21 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R31 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 65535] { R33 += 1, R22 += 1, R23 += 1 };
  s0 -> s2 [0, 65535] { R33 += 1, R23 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R32 += 1, R33 += 1 };
  s1 -> s1 [0, 65535] { R33 += 1, R22 += 1, R23 += 1 };
  s1 -> s2 [0, 65535] { R33 += 1, R23 += 1, R2 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R33 += 1, R23 += 1, R2 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R33 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R33 += 1 };
  accepting s3, s4, s2, s1, s0;
};
};
constraint R1 = R33 && R4 = 0 && R20 = 0 && R24 = 10 && R25 = R33 && R26 = 10 && R27 = R33 && R28 = 10 && R29 = R33 && R30 = 10 && R31 = R33 && R32 = 10 && R0 != 0 && R5 != -1 && 9 < R33 && (R0 != R21 || R21 = 1 || R21 < 0) && (R21 != 1 || -1 < R0) && (R22 != 0 || ((R2 != 0 || ((R0 != R23 || R23 = 1 || R23 < 0) && (R0 = R23 || R23 = 1 || R0 < 1))) && (R2 = 0 || ((R0 != R23 || R23 = 1 || R23 < 0) && (R23 != 1 || -1 < R0) && (R0 = R23 || R23 = 1))))) && (R0 = R21 || R21 = 1) && (R22 = 0 || (R2 = 0 && R0 < 0));
// End of Parikh automata intersection problem
