// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R17, R18, R23, R24, R25, R26, R3, R4;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 57];
  s0 -> s1 [58, 58];
  s0 -> s0 [59, 65535];
  s1 -> s0 [0, 43];
  s1 -> s0 [45, 46];
  s1 -> s2 [47, 47];
  s1 -> s0 [48, 57];
  s1 -> s1 [58, 58];
  s1 -> s0 [59, 65535];
  s2 -> s0 [0, 43];
  s2 -> s0 [45, 46];
  s2 -> s0 [48, 57];
  s2 -> s1 [58, 58];
  s2 -> s0 [59, 65535];
  accepting s0, s1, s2;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R0 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 92] { R4 += 1 };
  s0 -> s0 [0, 65535] { R3 += 1, R4 += 1 };
  s0 -> s2 [93, 93];
  s0 -> s1 [94, 65535] { R4 += 1 };
  s1 -> s1 [0, 92] { R4 += 1 };
  s1 -> s2 [93, 93];
  s1 -> s1 [94, 65535] { R4 += 1 };
  s2 -> s1 [0, 57] { R4 += 2 };
  s2 -> s3 [58, 58];
  s2 -> s1 [59, 92] { R4 += 2 };
  s2 -> s2 [93, 93] { R4 += 1 };
  s2 -> s1 [94, 65535] { R4 += 2 };
  s3 -> s3 [0, 65535];
  accepting s3;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 92] { R18 += 1 };
  s0 -> s0 [0, 65535] { R17 += 1, R18 += 1 };
  s0 -> s2 [93, 93];
  s0 -> s1 [94, 65535] { R18 += 1 };
  s1 -> s1 [0, 92] { R18 += 1 };
  s1 -> s2 [93, 93];
  s1 -> s1 [94, 65535] { R18 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton uri_4 {
  init s0;
  s0 -> s0 [0, 65535] { R23 += 1, R24 += 1 };
  s0 -> s1 [91, 91] { R24 += 1 };
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 65535] { R26 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R25 += 1, R26 += 1 };
  s1 -> s1 [0, 65535] { R26 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
};
constraint R3 = 0 && R17 = 0 && R23 = 0 && R0 != 0 && R4 != -1 && R18 != -1 && (R0 != R24 || R24 = 1 || R24 < 0) && (R24 != 1 || -1 < R0) && (R25 != 0 || ((R1 != 0 || ((R0 != R26 || R26 = 1 || R26 < 0) && (R0 = R26 || R26 = 1 || R0 < 1))) && (R1 = 0 || ((R0 != R26 || R26 = 1 || R26 < 0) && (R26 != 1 || -1 < R0) && (R0 = R26 || R26 = 1))))) && (R0 = R24 || R24 = 1) && (R25 = 0 || (R1 = 0 && R0 < 0));
// End of Parikh automata intersection problem
