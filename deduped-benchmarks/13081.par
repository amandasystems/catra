// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R116, R117, R118, R119, R120, R121, R122, R123, R124, R125, R126, R127, R128, R129, R130, R131, R132, R133, R134, R135, R136, R137, R138, R139, R140, R141, R142, R143, R144, R145, R146, R147, R148, R149, R2, R3, R4, R6, R7, R80, R81;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 43] { R133 += 1 };
  s0 -> s0 [0, 65535] { R132 += 1, R133 += 1 };
  s0 -> s2 [44, 44] { R133 += 1 };
  s0 -> s1 [45, 45] { R133 += 1 };
  s0 -> s3 [46, 46] { R133 += 1 };
  s0 -> s1 [48, 62] { R133 += 1 };
  s0 -> s1 [65, 65535] { R133 += 1 };
  s1 -> s1 [0, 43] { R133 += 1 };
  s1 -> s2 [44, 44] { R133 += 1 };
  s1 -> s1 [45, 45] { R133 += 1 };
  s1 -> s3 [46, 46] { R133 += 1 };
  s1 -> s1 [48, 62] { R133 += 1 };
  s1 -> s1 [65, 65535] { R133 += 1 };
  s2 -> s2 [0, 45] { R133 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s7 [46, 46] { R133 += 1 };
  s2 -> s2 [48, 62] { R133 += 1 };
  s2 -> s2 [65, 65535] { R133 += 1 };
  s3 -> s1 [0, 43] { R133 += 1 };
  s3 -> s2 [44, 44] { R133 += 1 };
  s3 -> s1 [45, 45] { R133 += 1 };
  s3 -> s3 [46, 46] { R133 += 1 };
  s3 -> s1 [48, 62] { R133 += 1 };
  s3 -> s1 [65, 114] { R133 += 1 };
  s3 -> s4 [115, 115] { R133 += 1 };
  s3 -> s1 [116, 65535] { R133 += 1 };
  s4 -> s1 [0, 43] { R133 += 1 };
  s4 -> s2 [44, 44] { R133 += 1 };
  s4 -> s1 [45, 45] { R133 += 1 };
  s4 -> s3 [46, 46] { R133 += 1 };
  s4 -> s1 [48, 62] { R133 += 1 };
  s4 -> s1 [65, 110] { R133 += 1 };
  s4 -> s5 [111, 111] { R133 += 1 };
  s4 -> s1 [112, 65535] { R133 += 1 };
  s5 -> s1 [0, 43] { R133 += 1 };
  s5 -> s2 [44, 44] { R133 += 1 };
  s5 -> s1 [45, 45] { R133 += 1 };
  s5 -> s3 [46, 46] { R133 += 1 };
  s5 -> s1 [48, 62] { R133 += 1 };
  s5 -> s1 [65, 98] { R133 += 1 };
  s5 -> s6 [99, 99] { R133 += 1 };
  s5 -> s1 [100, 65535] { R133 += 1 };
  s6 -> s1 [0, 43] { R133 += 1 };
  s6 -> s2 [44, 44] { R133 += 1 };
  s6 -> s1 [45, 45] { R133 += 1 };
  s6 -> s3 [46, 46] { R133 += 1 };
  s6 -> s1 [48, 62] { R133 += 1 };
  s6 -> s1 [65, 106] { R133 += 1 };
  s6 -> s1 [108, 65535] { R133 += 1 };
  s7 -> s2 [0, 45] { R133 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s7 [46, 46] { R133 += 1 };
  s7 -> s2 [48, 62] { R133 += 1 };
  s7 -> s2 [65, 114] { R133 += 1 };
  s7 -> s8 [115, 115] { R133 += 1 };
  s7 -> s2 [116, 65535] { R133 += 1 };
  s8 -> s2 [0, 45] { R133 += 1 };
  s8 -> s8 [0, 65535];
  s8 -> s7 [46, 46] { R133 += 1 };
  s8 -> s2 [48, 62] { R133 += 1 };
  s8 -> s2 [65, 110] { R133 += 1 };
  s8 -> s9 [111, 111] { R133 += 1 };
  s8 -> s2 [112, 65535] { R133 += 1 };
  s9 -> s2 [0, 45] { R133 += 1 };
  s9 -> s9 [0, 65535];
  s9 -> s7 [46, 46] { R133 += 1 };
  s9 -> s2 [48, 62] { R133 += 1 };
  s9 -> s2 [65, 98] { R133 += 1 };
  s9 -> s10 [99, 99] { R133 += 1 };
  s9 -> s2 [100, 65535] { R133 += 1 };
  s10 -> s2 [0, 45] { R133 += 1 };
  s10 -> s10 [0, 65535];
  s10 -> s7 [46, 46] { R133 += 1 };
  s10 -> s2 [48, 62] { R133 += 1 };
  s10 -> s2 [65, 106] { R133 += 1 };
  s10 -> s2 [108, 65535] { R133 += 1 };
  accepting s8, s2, s9, s7, s10;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R134 += 1, R135 += 1 };
  s0 -> s1 [0, 65535] { R135 += 1, R2 += 1 };
  s1 -> s1 [0, 65535] { R135 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 43] { R137 += 1, R81 += 1 };
  s0 -> s0 [0, 65535] { R136 += 1, R137 += 1 };
  s0 -> s2 [0, 65535] { R137 += 1, R80 += 1, R81 += 1 };
  s0 -> s3 [44, 44] { R137 += 1 };
  s0 -> s1 [45, 65535] { R137 += 1, R81 += 1 };
  s1 -> s1 [0, 43] { R137 += 1, R81 += 1 };
  s1 -> s3 [44, 44] { R137 += 1 };
  s1 -> s1 [45, 65535] { R137 += 1, R81 += 1 };
  s2 -> s1 [0, 43] { R137 += 1, R81 += 1 };
  s2 -> s2 [0, 65535] { R137 += 1, R80 += 1, R81 += 1 };
  s2 -> s3 [44, 44] { R137 += 1 };
  s2 -> s1 [45, 65535] { R137 += 1, R81 += 1 };
  s3 -> s3 [0, 65535] { R137 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 43] { R139 += 1, R121 += 1 };
  s0 -> s2 [0, 65535] { R139 += 1, R120 += 1, R121 += 1 };
  s0 -> s0 [0, 65535] { R138 += 1, R139 += 1 };
  s0 -> s1 [45, 65535] { R139 += 1, R121 += 1 };
  s1 -> s1 [0, 43] { R139 += 1, R121 += 1 };
  s1 -> s1 [0, 65535] { R139 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [45, 65535] { R139 += 1, R121 += 1 };
  s2 -> s1 [0, 43] { R139 += 1, R121 += 1 };
  s2 -> s2 [0, 65535] { R139 += 1, R120 += 1, R121 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [45, 65535] { R139 += 1, R121 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 65535] { R141 += 1, R123 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R140 += 1, R141 += 1 };
  s0 -> s2 [0, 65535] { R141 += 1, R122 += 1, R123 += 1 };
  s1 -> s1 [0, 65535] { R141 += 1, R123 += 1, R1 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R141 += 1 };
  s2 -> s1 [0, 65535] { R141 += 1, R123 += 1, R1 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R141 += 1, R122 += 1, R123 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R141 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R143 += 1, R124 += 1, R125 += 1 };
  s0 -> s0 [0, 65535] { R142 += 1, R143 += 1 };
  s0 -> s2 [0, 65535] { R143 += 1, R125 += 1, R0 += 1 };
  s1 -> s1 [0, 65535] { R143 += 1, R124 += 1, R125 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R143 += 1, R125 += 1, R0 += 1 };
  s2 -> s3 [0, 65535] { R143 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R143 += 1, R125 += 1, R0 += 1 };
  s3 -> s3 [0, 65535] { R143 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 57] { R145 += 1, R127 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R144 += 1, R145 += 1 };
  s0 -> s2 [0, 65535] { R145 += 1, R127 += 1, R6 += 1, R7 += 1 };
  s0 -> s3 [0, 65535] { R145 += 1, R126 += 1, R127 += 1 };
  s0 -> s4 [58, 58] { R145 += 1, R127 += 1 };
  s0 -> s1 [59, 65535] { R145 += 1, R127 += 1, R7 += 1 };
  s1 -> s1 [0, 57] { R145 += 1, R127 += 1, R7 += 1 };
  s1 -> s4 [58, 58] { R145 += 1, R127 += 1 };
  s1 -> s1 [59, 65535] { R145 += 1, R127 += 1, R7 += 1 };
  s2 -> s1 [0, 57] { R145 += 1, R127 += 1, R7 += 1 };
  s2 -> s2 [0, 65535] { R145 += 1, R127 += 1, R6 += 1, R7 += 1 };
  s2 -> s4 [58, 58] { R145 += 1, R127 += 1 };
  s2 -> s1 [59, 65535] { R145 += 1, R127 += 1, R7 += 1 };
  s3 -> s1 [0, 57] { R145 += 1, R127 += 1, R7 += 1 };
  s3 -> s2 [0, 65535] { R145 += 1, R127 += 1, R6 += 1, R7 += 1 };
  s3 -> s3 [0, 65535] { R145 += 1, R126 += 1, R127 += 1 };
  s3 -> s4 [58, 58] { R145 += 1, R127 += 1 };
  s3 -> s1 [59, 65535] { R145 += 1, R127 += 1, R7 += 1 };
  s4 -> s4 [0, 65535] { R145 += 1, R127 += 1 };
  s4 -> s5 [0, 65535] { R145 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R145 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s4, s5, s6;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 90] { R147 += 1, R129 += 1, R117 += 1 };
  s0 -> s0 [0, 65535] { R146 += 1, R147 += 1 };
  s0 -> s2 [0, 65535] { R147 += 1, R129 += 1, R116 += 1, R117 += 1 };
  s0 -> s3 [0, 65535] { R147 += 1, R128 += 1, R129 += 1 };
  s0 -> s4 [91, 91] { R147 += 1, R129 += 1, R117 += 1 };
  s0 -> s1 [92, 65535] { R147 += 1, R129 += 1, R117 += 1 };
  s1 -> s7 [0, 65535] { R147 += 1, R129 += 1 };
  s1 -> s6 [0, 65535] { R147 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R147 += 1, R129 += 1, R117 += 1 };
  s2 -> s1 [0, 90] { R147 += 1, R129 += 1, R117 += 1 };
  s2 -> s2 [0, 65535] { R147 += 1, R129 += 1, R116 += 1, R117 += 1 };
  s2 -> s6 [0, 65535] { R147 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [91, 91] { R147 += 1, R129 += 1, R117 += 1 };
  s2 -> s1 [92, 65535] { R147 += 1, R129 += 1, R117 += 1 };
  s3 -> s1 [0, 90] { R147 += 1, R129 += 1, R117 += 1 };
  s3 -> s2 [0, 65535] { R147 += 1, R129 += 1, R116 += 1, R117 += 1 };
  s3 -> s3 [0, 65535] { R147 += 1, R128 += 1, R129 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s4 [91, 91] { R147 += 1, R129 += 1, R117 += 1 };
  s3 -> s1 [92, 65535] { R147 += 1, R129 += 1, R117 += 1 };
  s4 -> s1 [0, 65535] { R147 += 1, R129 += 1, R117 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R147 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R147 += 1, R129 += 1 };
  s7 -> s6 [0, 65535] { R147 += 1 };
  s7 -> s5 [0, 65535];
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s0 [0, 65535] { R148 += 1, R149 += 1 };
  s0 -> s1 [0, 65535] { R149 += 1, R131 += 1, R119 += 1, R4 += 1 };
  s0 -> s2 [0, 65535] { R149 += 1, R131 += 1, R118 += 1, R119 += 1 };
  s0 -> s3 [0, 65535] { R149 += 1, R130 += 1, R131 += 1 };
  s1 -> s1 [0, 65535] { R149 += 1, R131 += 1, R119 += 1, R4 += 1 };
  s1 -> s6 [0, 65535] { R149 += 1, R131 += 1 };
  s1 -> s5 [0, 65535] { R149 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R149 += 1, R131 += 1, R119 += 1, R4 += 1 };
  s2 -> s2 [0, 65535] { R149 += 1, R131 += 1, R118 += 1, R119 += 1 };
  s2 -> s5 [0, 65535] { R149 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R149 += 1, R131 += 1, R119 += 1, R4 += 1 };
  s3 -> s2 [0, 65535] { R149 += 1, R131 += 1, R118 += 1, R119 += 1 };
  s3 -> s3 [0, 65535] { R149 += 1, R130 += 1, R131 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R149 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R149 += 1, R131 += 1 };
  s6 -> s5 [0, 65535] { R149 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R2 = R123 && R3 = R149 && R6 = 0 && R80 = 0 && R81 = R131 && R120 - R131 = 1 && R121 = R123 && R122 - R131 = 1 && R124 = 0 && R125 = R131 && R126 = 0 && R127 = R131 && R128 = 0 && R129 = R131 && R130 = 0 && R132 = 10 && R133 = R149 && R134 = 10 && R135 = R149 && R136 = 10 && R137 = R149 && R138 = 10 && R139 = R149 && R140 = 10 && R141 = R149 && R142 = 10 && R143 = R149 && R144 = 10 && R145 = R149 && R146 = 10 && R147 = R149 && R148 = 10 && R0 != 0 && R1 != 0 && R7 != -1 && R131 < R123 && -1 < R131 && 9 < R149 && (R116 != 0 || ((R4 != 0 || ((R0 != R117 || R117 = 1 || R117 < 0) && (R0 = R117 || R117 = 1 || R0 < 1))) && (R4 = 0 || ((R0 != R117 || R117 = 1 || R117 < 0) && (R117 != 1 || -1 < R0) && (R0 = R117 || R117 = 1))))) && (R118 != 0 || ((R4 != 0 || ((R0 != R119 || R119 = 1 || R119 < 0) && (R0 = R119 || R119 = 1 || R0 < 1))) && (R4 = 0 || ((R0 != R119 || R119 = 1 || R119 < 0) && (R119 != 1 || -1 < R0) && (R0 = R119 || R119 = 1))))) && (R116 = 0 || (R4 = 0 && R0 < 0)) && (R118 = 0 || (R4 = 0 && R0 < 0));
// End of Parikh automata intersection problem
