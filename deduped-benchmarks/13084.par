// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R2, R26, R27, R28, R29, R3, R30, R31, R32, R33, R34, R35, R36, R37, R38, R39, R4, R40, R41, R42, R43, R6, R7;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s1 [44, 44];
  s0 -> s0 [45, 57];
  s0 -> s2 [58, 58];
  s0 -> s0 [59, 65535];
  s1 -> s1 [0, 57];
  s1 -> s4 [58, 58];
  s1 -> s1 [59, 65535];
  s2 -> s0 [0, 43];
  s2 -> s1 [44, 44];
  s2 -> s0 [45, 46];
  s2 -> s3 [47, 47];
  s2 -> s0 [48, 57];
  s2 -> s2 [58, 58];
  s2 -> s0 [59, 65535];
  s3 -> s0 [0, 43];
  s3 -> s1 [44, 44];
  s3 -> s0 [45, 46];
  s3 -> s0 [48, 57];
  s3 -> s2 [58, 58];
  s3 -> s0 [59, 65535];
  s4 -> s1 [0, 46];
  s4 -> s5 [47, 47];
  s4 -> s1 [48, 57];
  s4 -> s4 [58, 58];
  s4 -> s1 [59, 65535];
  s5 -> s1 [0, 46];
  s5 -> s1 [48, 57];
  s5 -> s4 [58, 58];
  s5 -> s1 [59, 65535];
  accepting s1, s4, s5;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 43] { R7 += 1 };
  s0 -> s0 [0, 65535] { R6 += 1, R7 += 1 };
  s0 -> s2 [44, 44];
  s0 -> s1 [45, 65535] { R7 += 1 };
  s1 -> s1 [0, 43] { R7 += 1 };
  s1 -> s2 [44, 44];
  s1 -> s1 [45, 65535] { R7 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 43] { R31 += 1 };
  s0 -> s0 [0, 65535] { R30 += 1, R31 += 1 };
  s0 -> s1 [45, 65535] { R31 += 1 };
  s1 -> s1 [0, 43] { R31 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [45, 65535] { R31 += 1 };
  accepting s0, s1;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 65535] { R33 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R32 += 1, R33 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R33 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 64] { R35 += 1 };
  s0 -> s0 [0, 65535] { R34 += 1, R35 += 1 };
  s0 -> s2 [84, 84] { R35 += 1 };
  s0 -> s1 [85, 65535] { R35 += 1 };
  s1 -> s1 [0, 64] { R35 += 1 };
  s1 -> s2 [84, 84] { R35 += 1 };
  s1 -> s1 [85, 65535] { R35 += 1 };
  s2 -> s2 [0, 64] { R35 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [84, 65535] { R35 += 1 };
  accepting s2;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 65535] { R37 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R36 += 1, R37 += 1 };
  s1 -> s1 [0, 65535] { R37 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 57] { R39 += 1 };
  s0 -> s2 [0, 65535] { R39 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R38 += 1, R39 += 1 };
  s0 -> s3 [58, 58] { R39 += 1 };
  s0 -> s1 [59, 65535] { R39 += 1 };
  s1 -> s1 [0, 57] { R39 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R39 += 1 };
  s1 -> s1 [59, 65535] { R39 += 1 };
  s2 -> s1 [0, 57] { R39 += 1 };
  s2 -> s2 [0, 65535] { R39 += 1, R4 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [58, 58] { R39 += 1 };
  s2 -> s1 [59, 65535] { R39 += 1 };
  s3 -> s3 [0, 65535] { R39 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 90] { R41 += 1, R27 += 1 };
  s0 -> s2 [0, 65535] { R41 += 1, R26 += 1, R27 += 1 };
  s0 -> s0 [0, 65535] { R40 += 1, R41 += 1 };
  s0 -> s3 [91, 91] { R41 += 1, R27 += 1 };
  s0 -> s1 [92, 65535] { R41 += 1, R27 += 1 };
  s1 -> s1 [0, 65535] { R41 += 1, R27 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R41 += 1 };
  s2 -> s1 [0, 90] { R41 += 1, R27 += 1 };
  s2 -> s2 [0, 65535] { R41 += 1, R26 += 1, R27 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [91, 91] { R41 += 1, R27 += 1 };
  s2 -> s1 [92, 65535] { R41 += 1, R27 += 1 };
  s3 -> s1 [0, 65535] { R41 += 1, R27 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R41 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R43 += 1, R28 += 1, R29 += 1 };
  s0 -> s0 [0, 65535] { R42 += 1, R43 += 1 };
  s0 -> s2 [0, 65535] { R43 += 1, R29 += 1, R3 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R43 += 1, R28 += 1, R29 += 1 };
  s1 -> s2 [0, 65535] { R43 += 1, R29 += 1, R3 += 1 };
  s2 -> s3 [0, 65535] { R43 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R43 += 1, R29 += 1, R3 += 1 };
  s3 -> s3 [0, 65535] { R43 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
};
constraint R2 = R33 && R6 = 0 && R7 = R43 && R30 - R43 = 1 && R31 = R33 && R32 - R43 = 1 && R34 = 0 && R35 = R43 && R36 = 0 && R37 = R43 && R38 = 0 && R39 = R43 && R40 = 0 && R41 = R43 && R42 = 0 && R0 != 0 && R1 != 0 && R4 < 1 && R43 < R33 && -1 < R43 && (R26 != 0 || ((R3 != 0 || ((R0 != R27 || R27 = 1 || R27 < 0) && (R0 = R27 || R27 = 1 || R0 < 1))) && (R3 = 0 || ((R0 != R27 || R27 = 1 || R27 < 0) && (R27 != 1 || -1 < R0) && (R0 = R27 || R27 = 1))))) && (R28 != 0 || ((R3 != 0 || ((R0 != R29 || R29 = 1 || R29 < 0) && (R0 = R29 || R29 = 1 || R0 < 1))) && (R3 = 0 || ((R0 != R29 || R29 = 1 || R29 < 0) && (R29 != 1 || -1 < R0) && (R0 = R29 || R29 = 1))))) && (R26 = 0 || (R3 = 0 && R0 < 0)) && (R28 = 0 || (R3 = 0 && R0 < 0));
// End of Parikh automata intersection problem
