// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R122, R123, R178, R179, R180, R181, R182, R183, R184, R185, R186, R187, R188, R189, R190, R191, R192, R193, R194, R195, R196, R197, R198, R199, R2, R200, R201, R202, R203, R204, R205, R206, R207, R208, R209, R210, R211, R212, R213, R214, R215, R216, R217, R218, R219, R220, R221, R222, R223, R224, R225, R226, R227, R228, R229, R230, R231, R3, R4, R5, R6, R8, R9;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 43] { R207 += 1 };
  s0 -> s0 [0, 65535] { R206 += 1, R207 += 1 };
  s0 -> s2 [44, 44] { R207 += 1 };
  s0 -> s1 [45, 45] { R207 += 1 };
  s0 -> s3 [46, 46] { R207 += 1 };
  s0 -> s1 [48, 62] { R207 += 1 };
  s0 -> s1 [65, 65535] { R207 += 1 };
  s1 -> s1 [0, 43] { R207 += 1 };
  s1 -> s2 [44, 44] { R207 += 1 };
  s1 -> s1 [45, 45] { R207 += 1 };
  s1 -> s3 [46, 46] { R207 += 1 };
  s1 -> s1 [48, 62] { R207 += 1 };
  s1 -> s1 [65, 65535] { R207 += 1 };
  s2 -> s2 [0, 45] { R207 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s7 [46, 46] { R207 += 1 };
  s2 -> s2 [48, 62] { R207 += 1 };
  s2 -> s2 [65, 65535] { R207 += 1 };
  s3 -> s1 [0, 43] { R207 += 1 };
  s3 -> s2 [44, 44] { R207 += 1 };
  s3 -> s1 [45, 45] { R207 += 1 };
  s3 -> s3 [46, 46] { R207 += 1 };
  s3 -> s1 [48, 62] { R207 += 1 };
  s3 -> s1 [65, 114] { R207 += 1 };
  s3 -> s4 [115, 115] { R207 += 1 };
  s3 -> s1 [116, 65535] { R207 += 1 };
  s4 -> s1 [0, 43] { R207 += 1 };
  s4 -> s2 [44, 44] { R207 += 1 };
  s4 -> s1 [45, 45] { R207 += 1 };
  s4 -> s3 [46, 46] { R207 += 1 };
  s4 -> s1 [48, 62] { R207 += 1 };
  s4 -> s1 [65, 110] { R207 += 1 };
  s4 -> s5 [111, 111] { R207 += 1 };
  s4 -> s1 [112, 65535] { R207 += 1 };
  s5 -> s1 [0, 43] { R207 += 1 };
  s5 -> s2 [44, 44] { R207 += 1 };
  s5 -> s1 [45, 45] { R207 += 1 };
  s5 -> s3 [46, 46] { R207 += 1 };
  s5 -> s1 [48, 62] { R207 += 1 };
  s5 -> s1 [65, 98] { R207 += 1 };
  s5 -> s6 [99, 99] { R207 += 1 };
  s5 -> s1 [100, 65535] { R207 += 1 };
  s6 -> s1 [0, 43] { R207 += 1 };
  s6 -> s2 [44, 44] { R207 += 1 };
  s6 -> s1 [45, 45] { R207 += 1 };
  s6 -> s3 [46, 46] { R207 += 1 };
  s6 -> s1 [48, 62] { R207 += 1 };
  s6 -> s1 [65, 106] { R207 += 1 };
  s6 -> s1 [108, 65535] { R207 += 1 };
  s7 -> s2 [0, 45] { R207 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s7 [46, 46] { R207 += 1 };
  s7 -> s2 [48, 62] { R207 += 1 };
  s7 -> s2 [65, 114] { R207 += 1 };
  s7 -> s8 [115, 115] { R207 += 1 };
  s7 -> s2 [116, 65535] { R207 += 1 };
  s8 -> s2 [0, 45] { R207 += 1 };
  s8 -> s8 [0, 65535];
  s8 -> s7 [46, 46] { R207 += 1 };
  s8 -> s2 [48, 62] { R207 += 1 };
  s8 -> s2 [65, 110] { R207 += 1 };
  s8 -> s9 [111, 111] { R207 += 1 };
  s8 -> s2 [112, 65535] { R207 += 1 };
  s9 -> s2 [0, 45] { R207 += 1 };
  s9 -> s9 [0, 65535];
  s9 -> s7 [46, 46] { R207 += 1 };
  s9 -> s2 [48, 62] { R207 += 1 };
  s9 -> s2 [65, 98] { R207 += 1 };
  s9 -> s10 [99, 99] { R207 += 1 };
  s9 -> s2 [100, 65535] { R207 += 1 };
  s10 -> s2 [0, 45] { R207 += 1 };
  s10 -> s10 [0, 65535];
  s10 -> s7 [46, 46] { R207 += 1 };
  s10 -> s2 [48, 62] { R207 += 1 };
  s10 -> s2 [65, 106] { R207 += 1 };
  s10 -> s2 [108, 65535] { R207 += 1 };
  accepting s8, s2, s9, s7, s10;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R209 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R208 += 1, R209 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R209 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 43] { R211 += 1, R123 += 1 };
  s0 -> s0 [0, 65535] { R210 += 1, R211 += 1 };
  s0 -> s2 [0, 65535] { R211 += 1, R122 += 1, R123 += 1 };
  s0 -> s3 [44, 44] { R211 += 1 };
  s0 -> s1 [45, 65535] { R211 += 1, R123 += 1 };
  s1 -> s1 [0, 43] { R211 += 1, R123 += 1 };
  s1 -> s3 [44, 44] { R211 += 1 };
  s1 -> s1 [45, 65535] { R211 += 1, R123 += 1 };
  s2 -> s1 [0, 43] { R211 += 1, R123 += 1 };
  s2 -> s2 [0, 65535] { R211 += 1, R122 += 1, R123 += 1 };
  s2 -> s3 [44, 44] { R211 += 1 };
  s2 -> s1 [45, 65535] { R211 += 1, R123 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R211 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 43] { R213 += 1, R187 += 1 };
  s0 -> s0 [0, 65535] { R212 += 1, R213 += 1 };
  s0 -> s2 [0, 65535] { R213 += 1, R186 += 1, R187 += 1 };
  s0 -> s1 [45, 65535] { R213 += 1, R187 += 1 };
  s1 -> s1 [0, 43] { R213 += 1, R187 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R213 += 1 };
  s1 -> s1 [45, 65535] { R213 += 1, R187 += 1 };
  s2 -> s1 [0, 43] { R213 += 1, R187 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R213 += 1, R186 += 1, R187 += 1 };
  s2 -> s1 [45, 65535] { R213 += 1, R187 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 65535] { R215 += 1, R189 += 1, R1 += 1 };
  s0 -> s2 [0, 65535] { R215 += 1, R188 += 1, R189 += 1 };
  s0 -> s0 [0, 65535] { R214 += 1, R215 += 1 };
  s1 -> s1 [0, 65535] { R215 += 1, R189 += 1, R1 += 1 };
  s1 -> s4 [0, 65535] { R215 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R215 += 1, R189 += 1, R1 += 1 };
  s2 -> s2 [0, 65535] { R215 += 1, R188 += 1, R189 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R215 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 57] { R217 += 1, R191 += 1, R9 += 1 };
  s0 -> s2 [0, 65535] { R217 += 1, R190 += 1, R191 += 1 };
  s0 -> s0 [0, 65535] { R216 += 1, R217 += 1 };
  s0 -> s3 [0, 65535] { R217 += 1, R191 += 1, R8 += 1, R9 += 1 };
  s0 -> s4 [58, 58] { R217 += 1, R191 += 1 };
  s0 -> s1 [59, 65535] { R217 += 1, R191 += 1, R9 += 1 };
  s1 -> s1 [0, 57] { R217 += 1, R191 += 1, R9 += 1 };
  s1 -> s4 [58, 58] { R217 += 1, R191 += 1 };
  s1 -> s1 [59, 65535] { R217 += 1, R191 += 1, R9 += 1 };
  s2 -> s1 [0, 57] { R217 += 1, R191 += 1, R9 += 1 };
  s2 -> s2 [0, 65535] { R217 += 1, R190 += 1, R191 += 1 };
  s2 -> s3 [0, 65535] { R217 += 1, R191 += 1, R8 += 1, R9 += 1 };
  s2 -> s4 [58, 58] { R217 += 1, R191 += 1 };
  s2 -> s1 [59, 65535] { R217 += 1, R191 += 1, R9 += 1 };
  s3 -> s1 [0, 57] { R217 += 1, R191 += 1, R9 += 1 };
  s3 -> s3 [0, 65535] { R217 += 1, R191 += 1, R8 += 1, R9 += 1 };
  s3 -> s4 [58, 58] { R217 += 1, R191 += 1 };
  s3 -> s1 [59, 65535] { R217 += 1, R191 += 1, R9 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R217 += 1 };
  s4 -> s4 [0, 65535] { R217 += 1, R191 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R217 += 1 };
  accepting s4, s5, s6;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 90] { R219 += 1, R193 += 1, R183 += 1 };
  s0 -> s2 [0, 65535] { R219 += 1, R192 += 1, R193 += 1 };
  s0 -> s3 [0, 65535] { R219 += 1, R193 += 1, R182 += 1, R183 += 1 };
  s0 -> s0 [0, 65535] { R218 += 1, R219 += 1 };
  s0 -> s4 [91, 91] { R219 += 1, R193 += 1, R183 += 1 };
  s0 -> s1 [92, 65535] { R219 += 1, R193 += 1, R183 += 1 };
  s1 -> s5 [0, 65535] { R219 += 1 };
  s1 -> s7 [0, 65535] { R219 += 1, R193 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R219 += 1, R193 += 1, R183 += 1 };
  s2 -> s1 [0, 90] { R219 += 1, R193 += 1, R183 += 1 };
  s2 -> s2 [0, 65535] { R219 += 1, R192 += 1, R193 += 1 };
  s2 -> s3 [0, 65535] { R219 += 1, R193 += 1, R182 += 1, R183 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s4 [91, 91] { R219 += 1, R193 += 1, R183 += 1 };
  s2 -> s1 [92, 65535] { R219 += 1, R193 += 1, R183 += 1 };
  s3 -> s1 [0, 90] { R219 += 1, R193 += 1, R183 += 1 };
  s3 -> s5 [0, 65535] { R219 += 1 };
  s3 -> s3 [0, 65535] { R219 += 1, R193 += 1, R182 += 1, R183 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s4 [91, 91] { R219 += 1, R193 += 1, R183 += 1 };
  s3 -> s1 [92, 65535] { R219 += 1, R193 += 1, R183 += 1 };
  s4 -> s1 [0, 65535] { R219 += 1, R193 += 1, R183 += 1 };
  s5 -> s5 [0, 65535] { R219 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R219 += 1 };
  s7 -> s7 [0, 65535] { R219 += 1, R193 += 1 };
  s7 -> s6 [0, 65535];
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R221 += 1, R195 += 1, R184 += 1, R185 += 1 };
  s0 -> s2 [0, 65535] { R221 += 1, R194 += 1, R195 += 1 };
  s0 -> s3 [0, 65535] { R221 += 1, R195 += 1, R185 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R220 += 1, R221 += 1 };
  s1 -> s1 [0, 65535] { R221 += 1, R195 += 1, R184 += 1, R185 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R221 += 1 };
  s1 -> s3 [0, 65535] { R221 += 1, R195 += 1, R185 += 1, R5 += 1 };
  s2 -> s1 [0, 65535] { R221 += 1, R195 += 1, R184 += 1, R185 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R221 += 1, R194 += 1, R195 += 1 };
  s2 -> s3 [0, 65535] { R221 += 1, R195 += 1, R185 += 1, R5 += 1 };
  s3 -> s4 [0, 65535] { R221 += 1, R195 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R221 += 1 };
  s3 -> s3 [0, 65535] { R221 += 1, R195 += 1, R185 += 1, R5 += 1 };
  s4 -> s4 [0, 65535] { R221 += 1, R195 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R221 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R221 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 64] { R223 += 1, R197 += 1 };
  s0 -> s2 [0, 65535] { R223 += 1, R196 += 1, R197 += 1 };
  s0 -> s0 [0, 65535] { R222 += 1, R223 += 1 };
  s0 -> s1 [91, 65535] { R223 += 1, R197 += 1 };
  s1 -> s1 [0, 64] { R223 += 1, R197 += 1 };
  s1 -> s1 [0, 65535] { R223 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [91, 65535] { R223 += 1, R197 += 1 };
  s2 -> s1 [0, 64] { R223 += 1, R197 += 1 };
  s2 -> s2 [0, 65535] { R223 += 1, R196 += 1, R197 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [91, 65535] { R223 += 1, R197 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_11 {
  init s0;
  s0 -> s0 [0, 65535] { R224 += 1, R225 += 1 };
  s0 -> s1 [0, 65535] { R225 += 1, R198 += 1, R199 += 1 };
  s0 -> s2 [0, 65535] { R225 += 1, R199 += 1, R0 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R225 += 1, R198 += 1, R199 += 1 };
  s1 -> s2 [0, 65535] { R225 += 1, R199 += 1, R0 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R225 += 1 };
  s2 -> s2 [0, 65535] { R225 += 1, R199 += 1, R0 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R225 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 57] { R227 += 1, R201 += 1 };
  s0 -> s2 [0, 65535] { R227 += 1, R201 += 1, R6 += 1 };
  s0 -> s0 [0, 65535] { R226 += 1, R227 += 1 };
  s0 -> s3 [0, 65535] { R227 += 1, R200 += 1, R201 += 1 };
  s0 -> s4 [58, 58] { R227 += 1, R201 += 1 };
  s0 -> s1 [59, 65535] { R227 += 1, R201 += 1 };
  s1 -> s1 [0, 57] { R227 += 1, R201 += 1 };
  s1 -> s1 [0, 65535] { R227 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s4 [58, 58] { R227 += 1, R201 += 1 };
  s1 -> s1 [59, 65535] { R227 += 1, R201 += 1 };
  s2 -> s1 [0, 57] { R227 += 1, R201 += 1 };
  s2 -> s2 [0, 65535] { R227 += 1, R201 += 1, R6 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R227 += 1 };
  s2 -> s4 [58, 58] { R227 += 1, R201 += 1 };
  s2 -> s1 [59, 65535] { R227 += 1, R201 += 1 };
  s3 -> s1 [0, 57] { R227 += 1, R201 += 1 };
  s3 -> s2 [0, 65535] { R227 += 1, R201 += 1, R6 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R227 += 1, R200 += 1, R201 += 1 };
  s3 -> s4 [58, 58] { R227 += 1, R201 += 1 };
  s3 -> s1 [59, 65535] { R227 += 1, R201 += 1 };
  s4 -> s4 [0, 65535] { R227 += 1, R201 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R227 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 90] { R229 += 1, R203 += 1, R179 += 1 };
  s0 -> s0 [0, 65535] { R228 += 1, R229 += 1 };
  s0 -> s2 [0, 65535] { R229 += 1, R203 += 1, R178 += 1, R179 += 1 };
  s0 -> s3 [0, 65535] { R229 += 1, R202 += 1, R203 += 1 };
  s0 -> s4 [91, 91] { R229 += 1, R203 += 1, R179 += 1 };
  s0 -> s1 [92, 65535] { R229 += 1, R203 += 1, R179 += 1 };
  s1 -> s6 [0, 65535] { R229 += 1 };
  s1 -> s7 [0, 65535] { R229 += 1, R203 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R229 += 1, R203 += 1, R179 += 1 };
  s2 -> s1 [0, 90] { R229 += 1, R203 += 1, R179 += 1 };
  s2 -> s6 [0, 65535] { R229 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R229 += 1, R203 += 1, R178 += 1, R179 += 1 };
  s2 -> s4 [91, 91] { R229 += 1, R203 += 1, R179 += 1 };
  s2 -> s1 [92, 65535] { R229 += 1, R203 += 1, R179 += 1 };
  s3 -> s1 [0, 90] { R229 += 1, R203 += 1, R179 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R229 += 1, R203 += 1, R178 += 1, R179 += 1 };
  s3 -> s3 [0, 65535] { R229 += 1, R202 += 1, R203 += 1 };
  s3 -> s4 [91, 91] { R229 += 1, R203 += 1, R179 += 1 };
  s3 -> s1 [92, 65535] { R229 += 1, R203 += 1, R179 += 1 };
  s4 -> s1 [0, 65535] { R229 += 1, R203 += 1, R179 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R229 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R229 += 1 };
  s7 -> s7 [0, 65535] { R229 += 1, R203 += 1 };
  s7 -> s5 [0, 65535];
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R231 += 1, R204 += 1, R205 += 1 };
  s0 -> s0 [0, 65535] { R230 += 1, R231 += 1 };
  s0 -> s2 [0, 65535] { R231 += 1, R205 += 1, R180 += 1, R181 += 1 };
  s0 -> s3 [0, 65535] { R231 += 1, R205 += 1, R181 += 1, R4 += 1 };
  s1 -> s1 [0, 65535] { R231 += 1, R204 += 1, R205 += 1 };
  s1 -> s2 [0, 65535] { R231 += 1, R205 += 1, R180 += 1, R181 += 1 };
  s1 -> s3 [0, 65535] { R231 += 1, R205 += 1, R181 += 1, R4 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s4 [0, 65535] { R231 += 1 };
  s2 -> s2 [0, 65535] { R231 += 1, R205 += 1, R180 += 1, R181 += 1 };
  s2 -> s3 [0, 65535] { R231 += 1, R205 += 1, R181 += 1, R4 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s4 [0, 65535] { R231 += 1 };
  s3 -> s3 [0, 65535] { R231 += 1, R205 += 1, R181 += 1, R4 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R231 += 1, R205 += 1 };
  s4 -> s4 [0, 65535] { R231 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R231 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R231 += 1, R205 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R2 = R195 && R3 = R231 && R8 = 0 && R122 = 0 && R123 = R205 && R186 - R205 = 1 && R187 = R195 && R188 - R205 = 1 && R189 = R195 && R190 - R205 = 1 && R191 = R195 && R192 - R205 = 1 && R193 = R195 && R194 - R205 = 1 && R196 = 0 && R197 = R205 && R198 = 0 && R199 = R205 && R200 = 0 && R201 = R205 && R202 = 0 && R203 = R205 && R204 = 0 && R206 = 10 && R207 = R231 && R208 = 10 && R209 = R231 && R210 = 10 && R211 = R231 && R212 = 10 && R213 = R231 && R214 = 10 && R215 = R231 && R216 = 10 && R217 = R231 && R218 = 10 && R219 = R231 && R220 = 10 && R221 = R231 && R222 = 10 && R223 = R231 && R224 = 10 && R225 = R231 && R226 = 10 && R227 = R231 && R228 = 10 && R229 = R231 && R230 = 10 && R0 != 0 && R1 != 0 && R9 != -1 && R6 < 1 && R205 < R195 && -1 < R205 && 9 < R231 && (R178 != 0 || ((R4 != 0 || ((R0 != R179 || R179 = 1 || R179 < 0) && (R0 = R179 || R179 = 1 || R0 < 1))) && (R4 = 0 || ((R0 != R179 || R179 = 1 || R179 < 0) && (R179 != 1 || -1 < R0) && (R0 = R179 || R179 = 1))))) && (R180 != 0 || ((R4 != 0 || ((R0 != R181 || R181 = 1 || R181 < 0) && (R0 = R181 || R181 = 1 || R0 < 1))) && (R4 = 0 || ((R0 != R181 || R181 = 1 || R181 < 0) && (R181 != 1 || -1 < R0) && (R0 = R181 || R181 = 1))))) && (R182 != 0 || ((R5 != 0 || ((R1 != R183 || R183 = 1 || R183 < 0) && (R1 = R183 || R183 = 1 || R1 < 1))) && (R5 = 0 || ((R1 != R183 || R183 = 1 || R183 < 0) && (R183 != 1 || -1 < R1) && (R1 = R183 || R183 = 1))))) && (R184 != 0 || ((R5 != 0 || ((R1 != R185 || R185 = 1 || R185 < 0) && (R1 = R185 || R185 = 1 || R1 < 1))) && (R5 = 0 || ((R1 != R185 || R185 = 1 || R185 < 0) && (R185 != 1 || -1 < R1) && (R1 = R185 || R185 = 1))))) && (R178 = 0 || (R4 = 0 && R0 < 0)) && (R180 = 0 || (R4 = 0 && R0 < 0)) && (R182 = 0 || (R5 = 0 && R1 < 0)) && (R184 = 0 || (R5 = 0 && R1 < 0));
// End of Parikh automata intersection problem
