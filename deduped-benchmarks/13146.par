// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R2, R3, R43, R44, R5, R6, R61, R62, R63, R64, R65, R66, R67, R68, R69, R70, R71, R72, R73, R74, R75, R76;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s1 [44, 44];
  s0 -> s0 [45, 57];
  s0 -> s2 [58, 58];
  s0 -> s0 [59, 65535];
  s1 -> s1 [0, 57];
  s1 -> s4 [58, 58];
  s1 -> s1 [59, 65535];
  s2 -> s0 [0, 43];
  s2 -> s1 [44, 44];
  s2 -> s0 [45, 46];
  s2 -> s3 [47, 47];
  s2 -> s0 [48, 57];
  s2 -> s2 [58, 58];
  s2 -> s0 [59, 65535];
  s3 -> s0 [0, 43];
  s3 -> s1 [44, 44];
  s3 -> s0 [45, 46];
  s3 -> s0 [48, 57];
  s3 -> s2 [58, 58];
  s3 -> s0 [59, 65535];
  s4 -> s1 [0, 46];
  s4 -> s5 [47, 47];
  s4 -> s1 [48, 57];
  s4 -> s4 [58, 58];
  s4 -> s1 [59, 65535];
  s5 -> s1 [0, 46];
  s5 -> s1 [48, 57];
  s5 -> s4 [58, 58];
  s5 -> s1 [59, 65535];
  accepting s1, s4, s5;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 43] { R44 += 1 };
  s0 -> s0 [0, 65535] { R43 += 1, R44 += 1 };
  s0 -> s2 [44, 44];
  s0 -> s1 [45, 65535] { R44 += 1 };
  s1 -> s1 [0, 43] { R44 += 1 };
  s1 -> s2 [44, 44];
  s1 -> s1 [45, 65535] { R44 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 43] { R66 += 1 };
  s0 -> s0 [0, 65535] { R65 += 1, R66 += 1 };
  s0 -> s1 [45, 65535] { R66 += 1 };
  s1 -> s1 [0, 43] { R66 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [45, 65535] { R66 += 1 };
  accepting s0, s1;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 65535] { R68 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R67 += 1, R68 += 1 };
  s1 -> s1 [0, 65535] { R68 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_5 {
  init s0;
  s0 -> s0 [0, 65535] { R69 += 1, R70 += 1 };
  s0 -> s1 [0, 65535] { R70 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R70 += 1, R0 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 57] { R72 += 1, R6 += 1 };
  s0 -> s2 [0, 65535] { R72 += 1, R5 += 1, R6 += 1 };
  s0 -> s0 [0, 65535] { R71 += 1, R72 += 1 };
  s0 -> s3 [58, 58] { R72 += 1 };
  s0 -> s1 [59, 65535] { R72 += 1, R6 += 1 };
  s1 -> s1 [0, 57] { R72 += 1, R6 += 1 };
  s1 -> s3 [58, 58] { R72 += 1 };
  s1 -> s1 [59, 65535] { R72 += 1, R6 += 1 };
  s2 -> s1 [0, 57] { R72 += 1, R6 += 1 };
  s2 -> s2 [0, 65535] { R72 += 1, R5 += 1, R6 += 1 };
  s2 -> s3 [58, 58] { R72 += 1 };
  s2 -> s1 [59, 65535] { R72 += 1, R6 += 1 };
  s3 -> s3 [0, 65535] { R72 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 90] { R74 += 1, R62 += 1 };
  s0 -> s0 [0, 65535] { R73 += 1, R74 += 1 };
  s0 -> s2 [0, 65535] { R74 += 1, R61 += 1, R62 += 1 };
  s0 -> s3 [91, 91] { R74 += 1, R62 += 1 };
  s0 -> s1 [92, 65535] { R74 += 1, R62 += 1 };
  s1 -> s5 [0, 65535] { R74 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R74 += 1, R62 += 1 };
  s2 -> s1 [0, 90] { R74 += 1, R62 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R74 += 1, R61 += 1, R62 += 1 };
  s2 -> s3 [91, 91] { R74 += 1, R62 += 1 };
  s2 -> s1 [92, 65535] { R74 += 1, R62 += 1 };
  s3 -> s1 [0, 65535] { R74 += 1, R62 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R74 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s0 [0, 65535] { R75 += 1, R76 += 1 };
  s0 -> s1 [0, 65535] { R76 += 1, R64 += 1, R3 += 1 };
  s0 -> s2 [0, 65535] { R76 += 1, R63 += 1, R64 += 1 };
  s1 -> s4 [0, 65535] { R76 += 1 };
  s1 -> s1 [0, 65535] { R76 += 1, R64 += 1, R3 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R76 += 1, R64 += 1, R3 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R76 += 1, R63 += 1, R64 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R76 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
};
constraint R2 = R68 && R5 = 0 && R43 = 0 && R44 = R76 && R65 - R76 = 1 && R66 = R68 && R67 - R76 = 1 && R69 = 0 && R70 = R76 && R71 = 0 && R72 = R76 && R73 = 0 && R74 = R76 && R75 = 0 && R0 != 0 && R1 != 0 && R6 != -1 && R76 < R68 && -1 < R76 && (R61 != 0 || ((R3 != 0 || ((R0 != R62 || R62 = 1 || R62 < 0) && (R0 = R62 || R62 = 1 || R0 < 1))) && (R3 = 0 || ((R0 != R62 || R62 = 1 || R62 < 0) && (R62 != 1 || -1 < R0) && (R0 = R62 || R62 = 1))))) && (R63 != 0 || ((R3 != 0 || ((R0 != R64 || R64 = 1 || R64 < 0) && (R0 = R64 || R64 = 1 || R0 < 1))) && (R3 = 0 || ((R0 != R64 || R64 = 1 || R64 < 0) && (R64 != 1 || -1 < R0) && (R0 = R64 || R64 = 1))))) && (R61 = 0 || (R3 = 0 && R0 < 0)) && (R63 = 0 || (R3 = 0 && R0 < 0));
// End of Parikh automata intersection problem
