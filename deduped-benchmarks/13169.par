// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R2, R3, R4, R47, R48, R49, R5, R50, R51, R52, R53, R54, R55, R56, R57, R58, R59, R60, R61, R62, R63, R64, R65, R66, R67, R68, R69, R7, R70, R71, R72, R73, R74, R75, R76, R77, R78, R79, R8, R80, R81, R82, R83, R84;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 43] { R66 += 1 };
  s0 -> s0 [0, 65535] { R65 += 1, R66 += 1 };
  s0 -> s2 [44, 44] { R66 += 1 };
  s0 -> s1 [45, 45] { R66 += 1 };
  s0 -> s3 [46, 46] { R66 += 1 };
  s0 -> s1 [48, 62] { R66 += 1 };
  s0 -> s1 [65, 65535] { R66 += 1 };
  s1 -> s1 [0, 43] { R66 += 1 };
  s1 -> s2 [44, 44] { R66 += 1 };
  s1 -> s1 [45, 45] { R66 += 1 };
  s1 -> s3 [46, 46] { R66 += 1 };
  s1 -> s1 [48, 62] { R66 += 1 };
  s1 -> s1 [65, 65535] { R66 += 1 };
  s2 -> s2 [0, 45] { R66 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s7 [46, 46] { R66 += 1 };
  s2 -> s2 [48, 62] { R66 += 1 };
  s2 -> s2 [65, 65535] { R66 += 1 };
  s3 -> s1 [0, 43] { R66 += 1 };
  s3 -> s2 [44, 44] { R66 += 1 };
  s3 -> s1 [45, 45] { R66 += 1 };
  s3 -> s3 [46, 46] { R66 += 1 };
  s3 -> s1 [48, 62] { R66 += 1 };
  s3 -> s1 [65, 114] { R66 += 1 };
  s3 -> s4 [115, 115] { R66 += 1 };
  s3 -> s1 [116, 65535] { R66 += 1 };
  s4 -> s1 [0, 43] { R66 += 1 };
  s4 -> s2 [44, 44] { R66 += 1 };
  s4 -> s1 [45, 45] { R66 += 1 };
  s4 -> s3 [46, 46] { R66 += 1 };
  s4 -> s1 [48, 62] { R66 += 1 };
  s4 -> s1 [65, 110] { R66 += 1 };
  s4 -> s5 [111, 111] { R66 += 1 };
  s4 -> s1 [112, 65535] { R66 += 1 };
  s5 -> s1 [0, 43] { R66 += 1 };
  s5 -> s2 [44, 44] { R66 += 1 };
  s5 -> s1 [45, 45] { R66 += 1 };
  s5 -> s3 [46, 46] { R66 += 1 };
  s5 -> s1 [48, 62] { R66 += 1 };
  s5 -> s1 [65, 98] { R66 += 1 };
  s5 -> s6 [99, 99] { R66 += 1 };
  s5 -> s1 [100, 65535] { R66 += 1 };
  s6 -> s1 [0, 43] { R66 += 1 };
  s6 -> s2 [44, 44] { R66 += 1 };
  s6 -> s1 [45, 45] { R66 += 1 };
  s6 -> s3 [46, 46] { R66 += 1 };
  s6 -> s1 [48, 62] { R66 += 1 };
  s6 -> s1 [65, 106] { R66 += 1 };
  s6 -> s1 [108, 65535] { R66 += 1 };
  s7 -> s2 [0, 45] { R66 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s7 [46, 46] { R66 += 1 };
  s7 -> s2 [48, 62] { R66 += 1 };
  s7 -> s2 [65, 114] { R66 += 1 };
  s7 -> s8 [115, 115] { R66 += 1 };
  s7 -> s2 [116, 65535] { R66 += 1 };
  s8 -> s2 [0, 45] { R66 += 1 };
  s8 -> s8 [0, 65535];
  s8 -> s7 [46, 46] { R66 += 1 };
  s8 -> s2 [48, 62] { R66 += 1 };
  s8 -> s2 [65, 110] { R66 += 1 };
  s8 -> s9 [111, 111] { R66 += 1 };
  s8 -> s2 [112, 65535] { R66 += 1 };
  s9 -> s2 [0, 45] { R66 += 1 };
  s9 -> s9 [0, 65535];
  s9 -> s7 [46, 46] { R66 += 1 };
  s9 -> s2 [48, 62] { R66 += 1 };
  s9 -> s2 [65, 98] { R66 += 1 };
  s9 -> s10 [99, 99] { R66 += 1 };
  s9 -> s2 [100, 65535] { R66 += 1 };
  s10 -> s2 [0, 45] { R66 += 1 };
  s10 -> s10 [0, 65535];
  s10 -> s7 [46, 46] { R66 += 1 };
  s10 -> s2 [48, 62] { R66 += 1 };
  s10 -> s2 [65, 106] { R66 += 1 };
  s10 -> s2 [108, 65535] { R66 += 1 };
  accepting s8, s2, s9, s7, s10;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R67 += 1, R68 += 1 };
  s0 -> s1 [0, 65535] { R68 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R68 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 43] { R70 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R69 += 1, R70 += 1 };
  s0 -> s2 [0, 65535] { R70 += 1, R7 += 1, R8 += 1 };
  s0 -> s3 [44, 44] { R70 += 1 };
  s0 -> s1 [45, 65535] { R70 += 1, R8 += 1 };
  s1 -> s1 [0, 43] { R70 += 1, R8 += 1 };
  s1 -> s3 [44, 44] { R70 += 1 };
  s1 -> s1 [45, 65535] { R70 += 1, R8 += 1 };
  s2 -> s1 [0, 43] { R70 += 1, R8 += 1 };
  s2 -> s2 [0, 65535] { R70 += 1, R7 += 1, R8 += 1 };
  s2 -> s3 [44, 44] { R70 += 1 };
  s2 -> s1 [45, 65535] { R70 += 1, R8 += 1 };
  s3 -> s3 [0, 65535] { R70 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 43] { R72 += 1, R52 += 1 };
  s0 -> s0 [0, 65535] { R71 += 1, R72 += 1 };
  s0 -> s2 [0, 65535] { R72 += 1, R51 += 1, R52 += 1 };
  s0 -> s1 [45, 65535] { R72 += 1, R52 += 1 };
  s1 -> s1 [0, 43] { R72 += 1, R52 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R72 += 1 };
  s1 -> s1 [45, 65535] { R72 += 1, R52 += 1 };
  s2 -> s1 [0, 43] { R72 += 1, R52 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R72 += 1, R51 += 1, R52 += 1 };
  s2 -> s1 [45, 65535] { R72 += 1, R52 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 65535] { R74 += 1, R53 += 1, R54 += 1 };
  s0 -> s0 [0, 65535] { R73 += 1, R74 += 1 };
  s0 -> s2 [0, 65535] { R74 += 1, R54 += 1, R1 += 1 };
  s1 -> s1 [0, 65535] { R74 += 1, R53 += 1, R54 += 1 };
  s1 -> s2 [0, 65535] { R74 += 1, R54 += 1, R1 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R74 += 1, R54 += 1, R1 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R74 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R74 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 64] { R76 += 1, R56 += 1 };
  s0 -> s0 [0, 65535] { R75 += 1, R76 += 1 };
  s0 -> s2 [0, 65535] { R76 += 1, R55 += 1, R56 += 1 };
  s0 -> s3 [83, 83] { R76 += 1, R56 += 1 };
  s0 -> s1 [84, 65535] { R76 += 1, R56 += 1 };
  s1 -> s1 [0, 64] { R76 += 1, R56 += 1 };
  s1 -> s3 [83, 83] { R76 += 1, R56 += 1 };
  s1 -> s1 [84, 65535] { R76 += 1, R56 += 1 };
  s2 -> s1 [0, 64] { R76 += 1, R56 += 1 };
  s2 -> s2 [0, 65535] { R76 += 1, R55 += 1, R56 += 1 };
  s2 -> s3 [83, 83] { R76 += 1, R56 += 1 };
  s2 -> s1 [84, 65535] { R76 += 1, R56 += 1 };
  s3 -> s3 [0, 64] { R76 += 1, R56 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R76 += 1 };
  s3 -> s3 [83, 65535] { R76 += 1, R56 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_8 {
  init s0;
  s0 -> s0 [0, 65535] { R77 += 1, R78 += 1 };
  s0 -> s1 [0, 65535] { R78 += 1, R58 += 1, R0 += 1 };
  s0 -> s2 [0, 65535] { R78 += 1, R57 += 1, R58 += 1 };
  s1 -> s4 [0, 65535] { R78 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R78 += 1, R58 += 1, R0 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R78 += 1, R58 += 1, R0 += 1 };
  s2 -> s2 [0, 65535] { R78 += 1, R57 += 1, R58 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R78 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 57] { R80 += 1, R60 += 1 };
  s0 -> s2 [0, 65535] { R80 += 1, R59 += 1, R60 += 1 };
  s0 -> s3 [0, 65535] { R80 += 1, R60 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R79 += 1, R80 += 1 };
  s0 -> s4 [58, 58] { R80 += 1, R60 += 1 };
  s0 -> s1 [59, 65535] { R80 += 1, R60 += 1 };
  s1 -> s1 [0, 57] { R80 += 1, R60 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R80 += 1 };
  s1 -> s4 [58, 58] { R80 += 1, R60 += 1 };
  s1 -> s1 [59, 65535] { R80 += 1, R60 += 1 };
  s2 -> s1 [0, 57] { R80 += 1, R60 += 1 };
  s2 -> s2 [0, 65535] { R80 += 1, R59 += 1, R60 += 1 };
  s2 -> s3 [0, 65535] { R80 += 1, R60 += 1, R5 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s4 [58, 58] { R80 += 1, R60 += 1 };
  s2 -> s1 [59, 65535] { R80 += 1, R60 += 1 };
  s3 -> s1 [0, 57] { R80 += 1, R60 += 1 };
  s3 -> s5 [0, 65535] { R80 += 1 };
  s3 -> s3 [0, 65535] { R80 += 1, R60 += 1, R5 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s4 [58, 58] { R80 += 1, R60 += 1 };
  s3 -> s1 [59, 65535] { R80 += 1, R60 += 1 };
  s4 -> s4 [0, 65535] { R80 += 1, R60 += 1 };
  s5 -> s5 [0, 65535] { R80 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 90] { R82 += 1, R62 += 1, R48 += 1 };
  s0 -> s2 [0, 65535] { R82 += 1, R62 += 1, R47 += 1, R48 += 1 };
  s0 -> s0 [0, 65535] { R81 += 1, R82 += 1 };
  s0 -> s3 [0, 65535] { R82 += 1, R61 += 1, R62 += 1 };
  s0 -> s4 [91, 91] { R82 += 1, R62 += 1, R48 += 1 };
  s0 -> s1 [92, 65535] { R82 += 1, R62 += 1, R48 += 1 };
  s1 -> s7 [0, 65535] { R82 += 1, R62 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R82 += 1 };
  s1 -> s1 [0, 65535] { R82 += 1, R62 += 1, R48 += 1 };
  s2 -> s1 [0, 90] { R82 += 1, R62 += 1, R48 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R82 += 1, R62 += 1, R47 += 1, R48 += 1 };
  s2 -> s6 [0, 65535] { R82 += 1 };
  s2 -> s4 [91, 91] { R82 += 1, R62 += 1, R48 += 1 };
  s2 -> s1 [92, 65535] { R82 += 1, R62 += 1, R48 += 1 };
  s3 -> s1 [0, 90] { R82 += 1, R62 += 1, R48 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R82 += 1, R62 += 1, R47 += 1, R48 += 1 };
  s3 -> s3 [0, 65535] { R82 += 1, R61 += 1, R62 += 1 };
  s3 -> s4 [91, 91] { R82 += 1, R62 += 1, R48 += 1 };
  s3 -> s1 [92, 65535] { R82 += 1, R62 += 1, R48 += 1 };
  s4 -> s1 [0, 65535] { R82 += 1, R62 += 1, R48 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R82 += 1 };
  s7 -> s7 [0, 65535] { R82 += 1, R62 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R82 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65535] { R84 += 1, R64 += 1, R50 += 1, R4 += 1 };
  s0 -> s2 [0, 65535] { R84 += 1, R64 += 1, R49 += 1, R50 += 1 };
  s0 -> s3 [0, 65535] { R84 += 1, R63 += 1, R64 += 1 };
  s0 -> s0 [0, 65535] { R83 += 1, R84 += 1 };
  s1 -> s1 [0, 65535] { R84 += 1, R64 += 1, R50 += 1, R4 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R84 += 1, R64 += 1 };
  s1 -> s5 [0, 65535] { R84 += 1 };
  s2 -> s1 [0, 65535] { R84 += 1, R64 += 1, R50 += 1, R4 += 1 };
  s2 -> s2 [0, 65535] { R84 += 1, R64 += 1, R49 += 1, R50 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R84 += 1 };
  s3 -> s1 [0, 65535] { R84 += 1, R64 += 1, R50 += 1, R4 += 1 };
  s3 -> s2 [0, 65535] { R84 += 1, R64 += 1, R49 += 1, R50 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R84 += 1, R63 += 1, R64 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R84 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R84 += 1, R64 += 1 };
  s6 -> s5 [0, 65535] { R84 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R2 = R54 && R3 = R84 && R7 = 0 && R8 = R64 && R51 - R64 = 1 && R52 = R54 && R53 - R64 = 1 && R55 = 0 && R56 = R64 && R57 = 0 && R58 = R64 && R59 = 0 && R60 = R64 && R61 = 0 && R62 = R64 && R63 = 0 && R65 = 10 && R66 = R84 && R67 = 10 && R68 = R84 && R69 = 10 && R70 = R84 && R71 = 10 && R72 = R84 && R73 = 10 && R74 = R84 && R75 = 10 && R76 = R84 && R77 = 10 && R78 = R84 && R79 = 10 && R80 = R84 && R81 = 10 && R82 = R84 && R83 = 10 && R0 != 0 && R1 != 0 && R5 < 1 && R64 < R54 && -1 < R64 && 9 < R84 && (R47 != 0 || ((R4 != 0 || ((R0 != R48 || R48 = 1 || R48 < 0) && (R0 = R48 || R48 = 1 || R0 < 1))) && (R4 = 0 || ((R0 != R48 || R48 = 1 || R48 < 0) && (R48 != 1 || -1 < R0) && (R0 = R48 || R48 = 1))))) && (R49 != 0 || ((R4 != 0 || ((R0 != R50 || R50 = 1 || R50 < 0) && (R0 = R50 || R50 = 1 || R0 < 1))) && (R4 = 0 || ((R0 != R50 || R50 = 1 || R50 < 0) && (R50 != 1 || -1 < R0) && (R0 = R50 || R50 = 1))))) && (R47 = 0 || (R4 = 0 && R0 < 0)) && (R49 = 0 || (R4 = 0 && R0 < 0));
// End of Parikh automata intersection problem
