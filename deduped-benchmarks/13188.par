// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R14, R15, R16, R17, R18, R19, R20, R21, R22, R3, R4;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 57];
  s0 -> s1 [58, 58];
  s0 -> s0 [59, 65535];
  s1 -> s2 [0, 43];
  s1 -> s2 [45, 46];
  s1 -> s3 [47, 47];
  s1 -> s2 [48, 57];
  s1 -> s1 [58, 58];
  s1 -> s2 [59, 65535];
  s2 -> s2 [0, 43];
  s2 -> s2 [45, 57];
  s2 -> s1 [58, 58];
  s2 -> s2 [59, 65535];
  s3 -> s2 [0, 43];
  s3 -> s2 [45, 46];
  s3 -> s2 [48, 57];
  s3 -> s1 [58, 58];
  s3 -> s2 [59, 65535];
  accepting s1, s2, s3;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R0 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 57] { R4 += 1 };
  s0 -> s0 [0, 65535] { R3 += 1, R4 += 1 };
  s0 -> s2 [58, 58];
  s0 -> s1 [59, 65535] { R4 += 1 };
  s1 -> s1 [0, 57] { R4 += 1 };
  s1 -> s2 [58, 58];
  s1 -> s1 [59, 65535] { R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 90] { R16 += 1 };
  s0 -> s0 [0, 65535] { R15 += 1, R16 += 1 };
  s0 -> s2 [91, 91] { R16 += 1 };
  s0 -> s1 [92, 65535] { R16 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R16 += 1 };
  s2 -> s1 [0, 65535] { R16 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 65535] { R18 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R17 += 1, R18 += 1 };
  s1 -> s1 [0, 65535] { R18 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 57] { R20 += 1 };
  s0 -> s0 [0, 65535] { R19 += 1, R20 += 1 };
  s0 -> s2 [58, 58] { R20 += 1 };
  s0 -> s1 [59, 65535] { R20 += 1 };
  s1 -> s1 [0, 57] { R20 += 1 };
  s1 -> s2 [58, 58] { R20 += 1 };
  s1 -> s1 [59, 65535] { R20 += 1 };
  s2 -> s2 [0, 65535] { R20 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s0 [0, 65535] { R21 += 1, R22 += 1 };
  s0 -> s1 [0, 65535] { R22 += 1, R14 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R22 += 1, R14 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
};
constraint R0 = R20 && R3 = 0 && R4 - R19 = -1 && R15 = 0 && R16 = 1 && R17 = 0 && R18 = 1 && R19 - R20 < 1 && 0 < R19 && (R19 != R21 || R20 = R22 || ((R14 != 0 || R20 - R21 < 1 || R21 < 1) && (R14 = 0 || R20 < R21 || R21 < 1))) && (R19 = R21 || (R14 = 0 && R19 = R20));
// End of Parikh automata intersection problem
