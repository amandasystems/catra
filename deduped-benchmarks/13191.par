// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R12, R13, R14, R15, R16, R17, R2, R3, R4, R5, R6, R7, R8, R9;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 43] { R9 += 1 };
  s0 -> s0 [0, 65535] { R8 += 1, R9 += 1 };
  s0 -> s1 [45, 45] { R9 += 1 };
  s0 -> s2 [46, 46] { R9 += 1 };
  s0 -> s1 [48, 62] { R9 += 1 };
  s0 -> s3 [69, 69] { R9 += 1 };
  s0 -> s1 [70, 65535] { R9 += 1 };
  s1 -> s1 [0, 43] { R9 += 1 };
  s1 -> s1 [45, 45] { R9 += 1 };
  s1 -> s2 [46, 46] { R9 += 1 };
  s1 -> s1 [48, 62] { R9 += 1 };
  s1 -> s3 [69, 69] { R9 += 1 };
  s1 -> s1 [70, 65535] { R9 += 1 };
  s2 -> s1 [0, 43] { R9 += 1 };
  s2 -> s1 [45, 45] { R9 += 1 };
  s2 -> s2 [46, 46] { R9 += 1 };
  s2 -> s1 [48, 62] { R9 += 1 };
  s2 -> s3 [69, 69] { R9 += 1 };
  s2 -> s1 [70, 114] { R9 += 1 };
  s2 -> s8 [115, 115] { R9 += 1 };
  s2 -> s1 [116, 65535] { R9 += 1 };
  s3 -> s3 [0, 43] { R9 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R9 += 1 };
  s3 -> s4 [46, 46] { R9 += 1 };
  s3 -> s3 [48, 62] { R9 += 1 };
  s3 -> s3 [69, 65535] { R9 += 1 };
  s4 -> s3 [0, 43] { R9 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R9 += 1 };
  s4 -> s4 [46, 46] { R9 += 1 };
  s4 -> s3 [48, 62] { R9 += 1 };
  s4 -> s3 [69, 114] { R9 += 1 };
  s4 -> s5 [115, 115] { R9 += 1 };
  s4 -> s3 [116, 65535] { R9 += 1 };
  s5 -> s3 [0, 43] { R9 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R9 += 1 };
  s5 -> s4 [46, 46] { R9 += 1 };
  s5 -> s3 [48, 62] { R9 += 1 };
  s5 -> s3 [69, 110] { R9 += 1 };
  s5 -> s6 [111, 111] { R9 += 1 };
  s5 -> s3 [112, 65535] { R9 += 1 };
  s6 -> s3 [0, 43] { R9 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R9 += 1 };
  s6 -> s4 [46, 46] { R9 += 1 };
  s6 -> s3 [48, 62] { R9 += 1 };
  s6 -> s3 [69, 98] { R9 += 1 };
  s6 -> s7 [99, 99] { R9 += 1 };
  s6 -> s3 [100, 65535] { R9 += 1 };
  s7 -> s3 [0, 43] { R9 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R9 += 1 };
  s7 -> s4 [46, 46] { R9 += 1 };
  s7 -> s3 [48, 62] { R9 += 1 };
  s7 -> s3 [69, 106] { R9 += 1 };
  s7 -> s3 [108, 65535] { R9 += 1 };
  s8 -> s1 [0, 43] { R9 += 1 };
  s8 -> s1 [45, 45] { R9 += 1 };
  s8 -> s2 [46, 46] { R9 += 1 };
  s8 -> s1 [48, 62] { R9 += 1 };
  s8 -> s3 [69, 69] { R9 += 1 };
  s8 -> s1 [70, 110] { R9 += 1 };
  s8 -> s9 [111, 111] { R9 += 1 };
  s8 -> s1 [112, 65535] { R9 += 1 };
  s9 -> s1 [0, 43] { R9 += 1 };
  s9 -> s1 [45, 45] { R9 += 1 };
  s9 -> s2 [46, 46] { R9 += 1 };
  s9 -> s1 [48, 62] { R9 += 1 };
  s9 -> s3 [69, 69] { R9 += 1 };
  s9 -> s1 [70, 98] { R9 += 1 };
  s9 -> s10 [99, 99] { R9 += 1 };
  s9 -> s1 [100, 65535] { R9 += 1 };
  s10 -> s1 [0, 43] { R9 += 1 };
  s10 -> s1 [45, 45] { R9 += 1 };
  s10 -> s2 [46, 46] { R9 += 1 };
  s10 -> s1 [48, 62] { R9 += 1 };
  s10 -> s3 [69, 69] { R9 += 1 };
  s10 -> s1 [70, 106] { R9 += 1 };
  s10 -> s1 [108, 65535] { R9 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R11 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R10 += 1, R11 += 1 };
  s1 -> s1 [0, 65535] { R11 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 57] { R13 += 1 };
  s0 -> s0 [0, 65535] { R12 += 1, R13 += 1 };
  s0 -> s2 [0, 65535] { R13 += 1, R3 += 1 };
  s0 -> s3 [58, 58] { R13 += 1 };
  s0 -> s1 [59, 65535] { R13 += 1 };
  s1 -> s1 [0, 57] { R13 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R13 += 1 };
  s1 -> s1 [59, 65535] { R13 += 1 };
  s2 -> s1 [0, 57] { R13 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R13 += 1, R3 += 1 };
  s2 -> s3 [58, 58] { R13 += 1 };
  s2 -> s1 [59, 65535] { R13 += 1 };
  s3 -> s3 [0, 65535] { R13 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 90] { R15 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R14 += 1, R15 += 1 };
  s0 -> s2 [0, 65535] { R15 += 1, R4 += 1, R5 += 1 };
  s0 -> s3 [91, 91] { R15 += 1, R5 += 1 };
  s0 -> s1 [92, 65535] { R15 += 1, R5 += 1 };
  s1 -> s5 [0, 65535] { R15 += 1 };
  s1 -> s1 [0, 65535] { R15 += 1, R5 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 90] { R15 += 1, R5 += 1 };
  s2 -> s2 [0, 65535] { R15 += 1, R4 += 1, R5 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [91, 91] { R15 += 1, R5 += 1 };
  s2 -> s1 [92, 65535] { R15 += 1, R5 += 1 };
  s3 -> s1 [0, 65535] { R15 += 1, R5 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R15 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 65535] { R17 += 1, R7 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R16 += 1, R17 += 1 };
  s0 -> s2 [0, 65535] { R17 += 1, R6 += 1, R7 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R17 += 1, R7 += 1, R2 += 1 };
  s1 -> s4 [0, 65535] { R17 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R17 += 1, R7 += 1, R2 += 1 };
  s2 -> s2 [0, 65535] { R17 += 1, R6 += 1, R7 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R17 += 1 };
  accepting s3, s4, s2, s1, s0;
};
};
constraint R1 = R17 && R8 = 10 && R9 = R17 && R10 = 10 && R11 = R17 && R12 = 10 && R13 = R17 && R14 = 10 && R15 = R17 && R16 = 10 && R0 != 0 && R3 < 1 && 9 < R17 && (R4 != 0 || ((R2 != 0 || ((R0 != R5 || R5 = 1 || R5 < 0) && (R0 = R5 || R5 = 1 || R0 < 1))) && (R2 = 0 || ((R0 != R5 || R5 = 1 || R5 < 0) && (R5 != 1 || -1 < R0) && (R0 = R5 || R5 = 1))))) && (R6 != 0 || ((R2 != 0 || ((R0 != R7 || R7 = 1 || R7 < 0) && (R0 = R7 || R7 = 1 || R0 < 1))) && (R2 = 0 || ((R0 != R7 || R7 = 1 || R7 < 0) && (R7 != 1 || -1 < R0) && (R0 = R7 || R7 = 1))))) && (R4 = 0 || (R2 = 0 && R0 < 0)) && (R6 = 0 || (R2 = 0 && R0 < 0));
// End of Parikh automata intersection problem
