// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R2, R21, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R31, R32, R33, R34, R5, R6;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s1 [44, 44];
  s0 -> s0 [45, 57];
  s0 -> s2 [58, 58];
  s0 -> s0 [59, 65535];
  s1 -> s1 [0, 57];
  s1 -> s4 [58, 58];
  s1 -> s1 [59, 65535];
  s2 -> s0 [0, 43];
  s2 -> s1 [44, 44];
  s2 -> s0 [45, 46];
  s2 -> s3 [47, 47];
  s2 -> s0 [48, 57];
  s2 -> s2 [58, 58];
  s2 -> s0 [59, 65535];
  s3 -> s0 [0, 43];
  s3 -> s1 [44, 44];
  s3 -> s0 [45, 46];
  s3 -> s0 [48, 57];
  s3 -> s2 [58, 58];
  s3 -> s0 [59, 65535];
  s4 -> s1 [0, 46];
  s4 -> s5 [47, 47];
  s4 -> s1 [48, 57];
  s4 -> s4 [58, 58];
  s4 -> s1 [59, 65535];
  s5 -> s1 [0, 46];
  s5 -> s1 [48, 57];
  s5 -> s4 [58, 58];
  s5 -> s1 [59, 65535];
  accepting s1, s4, s5;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 43] { R6 += 1 };
  s0 -> s0 [0, 65535] { R5 += 1, R6 += 1 };
  s0 -> s2 [44, 44];
  s0 -> s1 [45, 65535] { R6 += 1 };
  s1 -> s1 [0, 43] { R6 += 1 };
  s1 -> s2 [44, 44];
  s1 -> s1 [45, 65535] { R6 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 64] { R26 += 1 };
  s0 -> s0 [0, 65535] { R25 += 1, R26 += 1 };
  s0 -> s2 [81, 81] { R26 += 1 };
  s0 -> s1 [82, 65535] { R26 += 1 };
  s1 -> s1 [0, 64] { R26 += 1 };
  s1 -> s2 [81, 81] { R26 += 1 };
  s1 -> s1 [82, 65535] { R26 += 1 };
  s2 -> s2 [0, 64] { R26 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [81, 65535] { R26 += 1 };
  accepting s2;
};
automaton uri_5 {
  init s0;
  s0 -> s0 [0, 65535] { R27 += 1, R28 += 1 };
  s0 -> s1 [0, 65535] { R28 += 1, R0 += 1 };
  s1 -> s1 [0, 65535] { R28 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 57] { R30 += 1 };
  s0 -> s0 [0, 65535] { R29 += 1, R30 += 1 };
  s0 -> s2 [0, 65535] { R30 += 1, R3 += 1 };
  s0 -> s3 [58, 58] { R30 += 1 };
  s0 -> s1 [59, 65535] { R30 += 1 };
  s1 -> s1 [0, 57] { R30 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R30 += 1 };
  s1 -> s1 [59, 65535] { R30 += 1 };
  s2 -> s1 [0, 57] { R30 += 1 };
  s2 -> s2 [0, 65535] { R30 += 1, R3 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [58, 58] { R30 += 1 };
  s2 -> s1 [59, 65535] { R30 += 1 };
  s3 -> s3 [0, 65535] { R30 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 90] { R32 += 1, R22 += 1 };
  s0 -> s0 [0, 65535] { R31 += 1, R32 += 1 };
  s0 -> s2 [0, 65535] { R32 += 1, R21 += 1, R22 += 1 };
  s0 -> s3 [91, 91] { R32 += 1, R22 += 1 };
  s0 -> s1 [92, 65535] { R32 += 1, R22 += 1 };
  s1 -> s5 [0, 65535] { R32 += 1 };
  s1 -> s1 [0, 65535] { R32 += 1, R22 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 90] { R32 += 1, R22 += 1 };
  s2 -> s2 [0, 65535] { R32 += 1, R21 += 1, R22 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [91, 91] { R32 += 1, R22 += 1 };
  s2 -> s1 [92, 65535] { R32 += 1, R22 += 1 };
  s3 -> s1 [0, 65535] { R32 += 1, R22 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R32 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s0 [0, 65535] { R33 += 1, R34 += 1 };
  s0 -> s1 [0, 65535] { R34 += 1, R23 += 1, R24 += 1 };
  s0 -> s2 [0, 65535] { R34 += 1, R24 += 1, R2 += 1 };
  s1 -> s1 [0, 65535] { R34 += 1, R23 += 1, R24 += 1 };
  s1 -> s2 [0, 65535] { R34 += 1, R24 += 1, R2 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R34 += 1, R24 += 1, R2 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R34 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R34 += 1 };
  accepting s3, s4, s2, s1, s0;
};
};
constraint R1 - R34 = 1 && R5 = 0 && R6 = R34 && R25 = 0 && R26 = R34 && R27 = 0 && R28 = R34 && R29 = 0 && R30 = R34 && R31 = 0 && R32 = R34 && R33 = 0 && R0 != 0 && R3 < 1 && -1 < R34 && (R21 != 0 || ((R2 != 0 || ((R0 != R22 || R22 = 1 || R22 < 0) && (R0 = R22 || R22 = 1 || R0 < 1))) && (R2 = 0 || ((R0 != R22 || R22 = 1 || R22 < 0) && (R22 != 1 || -1 < R0) && (R0 = R22 || R22 = 1))))) && (R23 != 0 || ((R2 != 0 || ((R0 != R24 || R24 = 1 || R24 < 0) && (R0 = R24 || R24 = 1 || R0 < 1))) && (R2 = 0 || ((R0 != R24 || R24 = 1 || R24 < 0) && (R24 != 1 || -1 < R0) && (R0 = R24 || R24 = 1))))) && (R21 = 0 || (R2 = 0 && R0 < 0)) && (R23 = 0 || (R2 = 0 && R0 < 0));
// End of Parikh automata intersection problem
