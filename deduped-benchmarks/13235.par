// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R3, R39, R4, R40, R56, R57, R58, R59, R60, R61, R62, R63, R64, R65, R66, R67, R68, R69, R70;
synchronised {  // Automata constraining address
automaton address_0 {
  init s0;
  s0 -> s0 [0, 46];
  s0 -> s1 [47, 47];
  s0 -> s0 [48, 65535];
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton address_1 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton address_2 {
  init s0;
  s0 -> s1 [0, 46] { R40 += 1 };
  s0 -> s0 [0, 65535] { R39 += 1, R40 += 1 };
  s0 -> s2 [47, 47];
  s0 -> s1 [48, 65535] { R40 += 1 };
  s1 -> s1 [0, 46] { R40 += 1 };
  s1 -> s2 [47, 47];
  s1 -> s1 [48, 65535] { R40 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton address_3 {
  init s0;
  s0 -> s1 [0, 46] { R62 += 1 };
  s0 -> s0 [0, 65535] { R61 += 1, R62 += 1 };
  s0 -> s2 [47, 47] { R62 += 1 };
  s0 -> s1 [48, 65535] { R62 += 1 };
  s1 -> s1 [0, 46] { R62 += 1 };
  s1 -> s2 [47, 47] { R62 += 1 };
  s1 -> s1 [48, 65535] { R62 += 1 };
  s2 -> s2 [0, 65535] { R62 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton address_4 {
  init s0;
  s0 -> s1 [0, 65535] { R64 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R63 += 1, R64 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R64 += 1, R0 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton address_5 {
  init s0;
  s0 -> s1 [0, 46] { R66 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R65 += 1, R66 += 1 };
  s0 -> s2 [0, 65535] { R66 += 1, R3 += 1, R4 += 1 };
  s0 -> s3 [47, 47] { R66 += 1 };
  s0 -> s1 [48, 65535] { R66 += 1, R4 += 1 };
  s1 -> s1 [0, 46] { R66 += 1, R4 += 1 };
  s1 -> s3 [47, 47] { R66 += 1 };
  s1 -> s1 [48, 65535] { R66 += 1, R4 += 1 };
  s2 -> s1 [0, 46] { R66 += 1, R4 += 1 };
  s2 -> s2 [0, 65535] { R66 += 1, R3 += 1, R4 += 1 };
  s2 -> s3 [47, 47] { R66 += 1 };
  s2 -> s1 [48, 65535] { R66 += 1, R4 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R66 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton address_6 {
  init s0;
  s0 -> s1 [0, 46] { R68 += 1, R58 += 1 };
  s0 -> s0 [0, 65535] { R67 += 1, R68 += 1 };
  s0 -> s2 [0, 65535] { R68 += 1, R57 += 1, R58 += 1 };
  s0 -> s1 [48, 65535] { R68 += 1, R58 += 1 };
  s1 -> s1 [0, 46] { R68 += 1, R58 += 1 };
  s1 -> s1 [0, 65535] { R68 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [48, 65535] { R68 += 1, R58 += 1 };
  s2 -> s1 [0, 46] { R68 += 1, R58 += 1 };
  s2 -> s2 [0, 65535] { R68 += 1, R57 += 1, R58 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [48, 65535] { R68 += 1, R58 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton address_7 {
  init s0;
  s0 -> s0 [0, 65535] { R69 += 1, R70 += 1 };
  s0 -> s1 [0, 65535] { R70 += 1, R59 += 1, R60 += 1 };
  s0 -> s2 [0, 65535] { R70 += 1, R60 += 1, R56 += 1 };
  s1 -> s1 [0, 65535] { R70 += 1, R59 += 1, R60 += 1 };
  s1 -> s2 [0, 65535] { R70 += 1, R60 += 1, R56 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R70 += 1, R60 += 1, R56 += 1 };
  s2 -> s3 [0, 65535] { R70 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R70 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
};
constraint R1 = R66 && R3 = 0 && R39 = 0 && R40 - R65 = -1 && R61 = R65 && R62 = R66 && R4 < R0 && -2 < R4 && R65 - R66 < 1 && -1 < R65 && (R0 != R58 || R4 - R57 = -1 || (R58 - R4 < 2 && (R4 - R58 != -1 || R56 = 0))) && (R0 != R60 || R4 - R59 = -1 || (R60 - R4 < 2 && (R4 - R60 != -1 || R56 = 0))) && (R0 != 0 || R4 != -1 || ((R65 != R69 || ((R66 != R70 || ((R67 != R69 || R68 = R70 || R70 - R69 < 1 || R69 < 0) && (R67 = R69 || R70 - R69 < 1 || R69 < 0))) && (R66 = R70 || R66 - R69 < 1 || R69 < 0))) && (R65 = R69 || R66 - R65 < 1))) && (R63 != R65 || R64 = R66 || (R0 = 0 && (R4 != -1 || R66 - R65 < 1))) && (R65 != R69 || ((R66 != R70 || ((R67 != R69 || R68 = R70 || R0 < 1 || R70 < R69 || R69 < 0) && (R67 = R69 || R0 < 1 || R70 < R69 || R69 < 0))) && (R66 = R70 || R0 < 1 || R66 < R69 || R69 < 0))) && (R0 = R58 || (R0 - R4 = 1 && R56 = 0)) && (R0 = R60 || (R0 - R4 = 1 && R56 = 0)) && (R63 = R65 || (R0 = 0 && (R4 != -1 || R66 - R65 < 1))) && (R65 = R69 || R0 < 1);
// End of Parikh automata intersection problem
