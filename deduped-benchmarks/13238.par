// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R140, R141, R2, R208, R209, R241, R242, R243, R244, R245, R246, R247, R248, R249, R250, R251, R252, R253, R254, R255, R256, R257, R258, R259, R260, R261, R262, R263, R264, R265, R266, R267, R268, R269, R270, R271, R4, R5;
synchronised {  // Automata constraining address
automaton address_0 {
  init s0;
  s0 -> s0 [0, 46];
  s0 -> s1 [47, 47];
  s0 -> s0 [48, 65535];
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton address_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton address_2 {
  init s0;
  s0 -> s1 [0, 46] { R209 += 1 };
  s0 -> s0 [0, 65535] { R208 += 1, R209 += 1 };
  s0 -> s2 [47, 47];
  s0 -> s1 [48, 65535] { R209 += 1 };
  s1 -> s1 [0, 46] { R209 += 1 };
  s1 -> s2 [47, 47];
  s1 -> s1 [48, 65535] { R209 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton address_3 {
  init s0;
  s0 -> s1 [0, 46] { R257 += 1 };
  s0 -> s0 [0, 65535] { R256 += 1, R257 += 1 };
  s0 -> s2 [47, 47] { R257 += 1 };
  s0 -> s1 [48, 65535] { R257 += 1 };
  s1 -> s1 [0, 46] { R257 += 1 };
  s1 -> s2 [47, 47] { R257 += 1 };
  s1 -> s1 [48, 65535] { R257 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R257 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton address_4 {
  init s0;
  s0 -> s1 [0, 65535] { R259 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R258 += 1, R259 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R259 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton address_5 {
  init s0;
  s0 -> s1 [0, 46] { R261 += 1, R141 += 1 };
  s0 -> s0 [0, 65535] { R260 += 1, R261 += 1 };
  s0 -> s2 [0, 65535] { R261 += 1, R140 += 1, R141 += 1 };
  s0 -> s3 [47, 47] { R261 += 1 };
  s0 -> s1 [48, 65535] { R261 += 1, R141 += 1 };
  s1 -> s1 [0, 46] { R261 += 1, R141 += 1 };
  s1 -> s3 [47, 47] { R261 += 1 };
  s1 -> s1 [48, 65535] { R261 += 1, R141 += 1 };
  s2 -> s1 [0, 46] { R261 += 1, R141 += 1 };
  s2 -> s2 [0, 65535] { R261 += 1, R140 += 1, R141 += 1 };
  s2 -> s3 [47, 47] { R261 += 1 };
  s2 -> s1 [48, 65535] { R261 += 1, R141 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R261 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton address_6 {
  init s0;
  s0 -> s1 [0, 46] { R263 += 1, R247 += 1 };
  s0 -> s0 [0, 65535] { R262 += 1, R263 += 1 };
  s0 -> s2 [0, 65535] { R263 += 1, R246 += 1, R247 += 1 };
  s0 -> s3 [47, 47] { R263 += 1, R247 += 1 };
  s0 -> s1 [48, 65535] { R263 += 1, R247 += 1 };
  s1 -> s1 [0, 46] { R263 += 1, R247 += 1 };
  s1 -> s3 [47, 47] { R263 += 1, R247 += 1 };
  s1 -> s1 [48, 65535] { R263 += 1, R247 += 1 };
  s2 -> s1 [0, 46] { R263 += 1, R247 += 1 };
  s2 -> s2 [0, 65535] { R263 += 1, R246 += 1, R247 += 1 };
  s2 -> s3 [47, 47] { R263 += 1, R247 += 1 };
  s2 -> s1 [48, 65535] { R263 += 1, R247 += 1 };
  s3 -> s3 [0, 65535] { R263 += 1, R247 += 1 };
  s3 -> s4 [0, 65535] { R263 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R263 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
automaton address_7 {
  init s0;
  s0 -> s1 [0, 65535] { R265 += 1, R248 += 1, R249 += 1 };
  s0 -> s0 [0, 65535] { R264 += 1, R265 += 1 };
  s0 -> s2 [0, 65535] { R265 += 1, R249 += 1, R0 += 1 };
  s1 -> s1 [0, 65535] { R265 += 1, R248 += 1, R249 += 1 };
  s1 -> s2 [0, 65535] { R265 += 1, R249 += 1, R0 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R265 += 1 };
  s2 -> s2 [0, 65535] { R265 += 1, R249 += 1, R0 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R265 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton address_8 {
  init s0;
  s0 -> s1 [0, 46] { R267 += 1, R251 += 1, R5 += 1 };
  s0 -> s2 [0, 65535] { R267 += 1, R251 += 1, R4 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R266 += 1, R267 += 1 };
  s0 -> s3 [0, 65535] { R267 += 1, R250 += 1, R251 += 1 };
  s0 -> s4 [47, 47] { R267 += 1, R251 += 1 };
  s0 -> s1 [48, 65535] { R267 += 1, R251 += 1, R5 += 1 };
  s1 -> s1 [0, 46] { R267 += 1, R251 += 1, R5 += 1 };
  s1 -> s4 [47, 47] { R267 += 1, R251 += 1 };
  s1 -> s1 [48, 65535] { R267 += 1, R251 += 1, R5 += 1 };
  s2 -> s1 [0, 46] { R267 += 1, R251 += 1, R5 += 1 };
  s2 -> s2 [0, 65535] { R267 += 1, R251 += 1, R4 += 1, R5 += 1 };
  s2 -> s4 [47, 47] { R267 += 1, R251 += 1 };
  s2 -> s1 [48, 65535] { R267 += 1, R251 += 1, R5 += 1 };
  s3 -> s1 [0, 46] { R267 += 1, R251 += 1, R5 += 1 };
  s3 -> s2 [0, 65535] { R267 += 1, R251 += 1, R4 += 1, R5 += 1 };
  s3 -> s3 [0, 65535] { R267 += 1, R250 += 1, R251 += 1 };
  s3 -> s4 [47, 47] { R267 += 1, R251 += 1 };
  s3 -> s1 [48, 65535] { R267 += 1, R251 += 1, R5 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R267 += 1 };
  s4 -> s4 [0, 65535] { R267 += 1, R251 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R267 += 1 };
  accepting s4, s5, s6;
};
automaton address_9 {
  init s0;
  s0 -> s1 [0, 46] { R269 += 1, R253 += 1, R243 += 1 };
  s0 -> s2 [0, 65535] { R269 += 1, R253 += 1, R242 += 1, R243 += 1 };
  s0 -> s0 [0, 65535] { R268 += 1, R269 += 1 };
  s0 -> s3 [0, 65535] { R269 += 1, R252 += 1, R253 += 1 };
  s0 -> s4 [47, 47] { R269 += 1, R253 += 1, R243 += 1 };
  s0 -> s1 [48, 65535] { R269 += 1, R253 += 1, R243 += 1 };
  s1 -> s1 [0, 46] { R269 += 1, R253 += 1, R243 += 1 };
  s1 -> s4 [47, 47] { R269 += 1, R253 += 1, R243 += 1 };
  s1 -> s1 [48, 65535] { R269 += 1, R253 += 1, R243 += 1 };
  s2 -> s1 [0, 46] { R269 += 1, R253 += 1, R243 += 1 };
  s2 -> s2 [0, 65535] { R269 += 1, R253 += 1, R242 += 1, R243 += 1 };
  s2 -> s4 [47, 47] { R269 += 1, R253 += 1, R243 += 1 };
  s2 -> s1 [48, 65535] { R269 += 1, R253 += 1, R243 += 1 };
  s3 -> s1 [0, 46] { R269 += 1, R253 += 1, R243 += 1 };
  s3 -> s2 [0, 65535] { R269 += 1, R253 += 1, R242 += 1, R243 += 1 };
  s3 -> s3 [0, 65535] { R269 += 1, R252 += 1, R253 += 1 };
  s3 -> s4 [47, 47] { R269 += 1, R253 += 1, R243 += 1 };
  s3 -> s1 [48, 65535] { R269 += 1, R253 += 1, R243 += 1 };
  s4 -> s5 [0, 65535] { R269 += 1 };
  s4 -> s6 [0, 65535] { R269 += 1, R253 += 1 };
  s4 -> s4 [0, 65535] { R269 += 1, R253 += 1, R243 += 1 };
  s4 -> s7 [0, 65535];
  s5 -> s5 [0, 65535] { R269 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s5 [0, 65535] { R269 += 1 };
  s6 -> s6 [0, 65535] { R269 += 1, R253 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s4, s5, s6, s7;
};
automaton address_10 {
  init s0;
  s0 -> s0 [0, 65535] { R270 += 1, R271 += 1 };
  s0 -> s1 [0, 65535] { R271 += 1, R255 += 1, R244 += 1, R245 += 1 };
  s0 -> s2 [0, 65535] { R271 += 1, R254 += 1, R255 += 1 };
  s0 -> s3 [0, 65535] { R271 += 1, R255 += 1, R245 += 1, R241 += 1 };
  s1 -> s1 [0, 65535] { R271 += 1, R255 += 1, R244 += 1, R245 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R271 += 1 };
  s1 -> s3 [0, 65535] { R271 += 1, R255 += 1, R245 += 1, R241 += 1 };
  s2 -> s1 [0, 65535] { R271 += 1, R255 += 1, R244 += 1, R245 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R271 += 1, R254 += 1, R255 += 1 };
  s2 -> s3 [0, 65535] { R271 += 1, R255 += 1, R245 += 1, R241 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R271 += 1, R255 += 1 };
  s3 -> s6 [0, 65535] { R271 += 1 };
  s3 -> s3 [0, 65535] { R271 += 1, R255 += 1, R245 += 1, R241 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R271 += 1, R255 += 1 };
  s5 -> s6 [0, 65535] { R271 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R271 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R0 = R243 && R1 = R253 && R2 = R269 && R4 = 0 && R5 - R242 = -1 && R140 = 0 && R141 - R252 = -1 && R208 = 0 && R209 - R268 = -1 && R246 = R252 && R247 = R253 && R250 = R252 && R251 = R253 && R256 = R268 && R257 = R269 && R260 = R268 && R261 = R269 && R262 = R268 && R263 = R269 && R266 = R268 && R267 = R269 && R242 - R243 < 1 && -1 < R242 && R252 - R253 < 1 && -1 < R252 && R268 - R269 < 1 && -1 < R268 && (R242 != R244 || R243 = R245 || ((R241 != 0 || R243 - R244 < 1 || R244 < 0) && (R241 = 0 || R243 < R244 || R244 < 0))) && (R248 != R252 || R249 = R253 || (R243 = 0 && (R242 != 0 || R253 - R252 < 1))) && (R252 != R254 || R253 = R255 || ((R242 != 0 || R243 != 0 || R253 - R254 < 1 || R254 < 0) && (R243 < 1 || R253 < R254 || R254 < 0))) && (R258 != R268 || R259 = R269 || (R253 = 0 && (R252 != 0 || R269 - R268 < 1))) && (R264 != R268 || R265 = R269 || (R253 = 0 && (R252 != 0 || R269 - R268 < 1))) && (R268 != R270 || R269 = R271 || ((R252 != 0 || R253 != 0 || R269 - R270 < 1 || R270 < 0) && (R253 < 1 || R269 < R270 || R270 < 0))) && (R242 = R244 || (R241 = 0 && R242 = R243)) && (R248 = R252 || (R243 = 0 && (R242 != 0 || R253 - R252 < 1))) && (R252 = R254 || (R243 = 0 && (R242 != 0 || R253 - R252 < 1))) && (R258 = R268 || (R253 = 0 && (R252 != 0 || R269 - R268 < 1))) && (R264 = R268 || (R253 = 0 && (R252 != 0 || R269 - R268 < 1))) && (R268 = R270 || (R253 = 0 && (R252 != 0 || R269 - R268 < 1)));
// End of Parikh automata intersection problem
