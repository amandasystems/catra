// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R108, R109, R110, R111, R112, R113, R114, R115, R116, R117, R118, R119, R120, R121, R122, R123, R124, R125, R126, R127, R128, R129, R130, R131, R132, R133, R134, R135, R136, R137, R138, R2, R3, R7, R75, R76, R8;
synchronised {  // Automata constraining address
automaton address_0 {
  init s0;
  s0 -> s0 [0, 46];
  s0 -> s1 [47, 47];
  s0 -> s0 [48, 65535];
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton address_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton address_2 {
  init s0;
  s0 -> s1 [0, 46] { R76 += 1 };
  s0 -> s0 [0, 65535] { R75 += 1, R76 += 1 };
  s0 -> s2 [47, 47];
  s0 -> s1 [48, 65535] { R76 += 1 };
  s1 -> s1 [0, 46] { R76 += 1 };
  s1 -> s2 [47, 47];
  s1 -> s1 [48, 65535] { R76 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton address_3 {
  init s0;
  s0 -> s1 [0, 46] { R124 += 1 };
  s0 -> s0 [0, 65535] { R123 += 1, R124 += 1 };
  s0 -> s2 [47, 47] { R124 += 1 };
  s0 -> s1 [48, 65535] { R124 += 1 };
  s1 -> s1 [0, 46] { R124 += 1 };
  s1 -> s2 [47, 47] { R124 += 1 };
  s1 -> s1 [48, 65535] { R124 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R124 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton address_4 {
  init s0;
  s0 -> s0 [0, 65535] { R125 += 1, R126 += 1 };
  s0 -> s1 [0, 65535] { R126 += 1, R1 += 1 };
  s1 -> s1 [0, 65535] { R126 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton address_5 {
  init s0;
  s0 -> s1 [0, 46] { R128 += 1, R8 += 1 };
  s0 -> s2 [0, 65535] { R128 += 1, R7 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R127 += 1, R128 += 1 };
  s0 -> s3 [47, 47] { R128 += 1 };
  s0 -> s1 [48, 65535] { R128 += 1, R8 += 1 };
  s1 -> s1 [0, 46] { R128 += 1, R8 += 1 };
  s1 -> s3 [47, 47] { R128 += 1 };
  s1 -> s1 [48, 65535] { R128 += 1, R8 += 1 };
  s2 -> s1 [0, 46] { R128 += 1, R8 += 1 };
  s2 -> s2 [0, 65535] { R128 += 1, R7 += 1, R8 += 1 };
  s2 -> s3 [47, 47] { R128 += 1 };
  s2 -> s1 [48, 65535] { R128 += 1, R8 += 1 };
  s3 -> s3 [0, 65535] { R128 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton address_6 {
  init s0;
  s0 -> s1 [0, 46] { R130 += 1, R114 += 1 };
  s0 -> s2 [0, 65535] { R130 += 1, R113 += 1, R114 += 1 };
  s0 -> s0 [0, 65535] { R129 += 1, R130 += 1 };
  s0 -> s3 [47, 47] { R130 += 1, R114 += 1 };
  s0 -> s1 [48, 65535] { R130 += 1, R114 += 1 };
  s1 -> s1 [0, 46] { R130 += 1, R114 += 1 };
  s1 -> s3 [47, 47] { R130 += 1, R114 += 1 };
  s1 -> s1 [48, 65535] { R130 += 1, R114 += 1 };
  s2 -> s1 [0, 46] { R130 += 1, R114 += 1 };
  s2 -> s2 [0, 65535] { R130 += 1, R113 += 1, R114 += 1 };
  s2 -> s3 [47, 47] { R130 += 1, R114 += 1 };
  s2 -> s1 [48, 65535] { R130 += 1, R114 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R130 += 1 };
  s3 -> s3 [0, 65535] { R130 += 1, R114 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R130 += 1 };
  accepting s3, s4, s5;
};
automaton address_7 {
  init s0;
  s0 -> s0 [0, 65535] { R131 += 1, R132 += 1 };
  s0 -> s1 [0, 65535] { R132 += 1, R115 += 1, R116 += 1 };
  s0 -> s2 [0, 65535] { R132 += 1, R116 += 1, R0 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R132 += 1, R115 += 1, R116 += 1 };
  s1 -> s2 [0, 65535] { R132 += 1, R116 += 1, R0 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R132 += 1 };
  s2 -> s2 [0, 65535] { R132 += 1, R116 += 1, R0 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R132 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton address_8 {
  init s0;
  s0 -> s1 [0, 46] { R134 += 1, R118 += 1 };
  s0 -> s2 [0, 65535] { R134 += 1, R117 += 1, R118 += 1 };
  s0 -> s0 [0, 65535] { R133 += 1, R134 += 1 };
  s0 -> s3 [0, 65535] { R134 += 1, R118 += 1, R3 += 1 };
  s0 -> s4 [47, 47] { R134 += 1, R118 += 1 };
  s0 -> s1 [48, 65535] { R134 += 1, R118 += 1 };
  s1 -> s1 [0, 46] { R134 += 1, R118 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R134 += 1 };
  s1 -> s4 [47, 47] { R134 += 1, R118 += 1 };
  s1 -> s1 [48, 65535] { R134 += 1, R118 += 1 };
  s2 -> s1 [0, 46] { R134 += 1, R118 += 1 };
  s2 -> s2 [0, 65535] { R134 += 1, R117 += 1, R118 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R134 += 1, R118 += 1, R3 += 1 };
  s2 -> s4 [47, 47] { R134 += 1, R118 += 1 };
  s2 -> s1 [48, 65535] { R134 += 1, R118 += 1 };
  s3 -> s1 [0, 46] { R134 += 1, R118 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R134 += 1 };
  s3 -> s3 [0, 65535] { R134 += 1, R118 += 1, R3 += 1 };
  s3 -> s4 [47, 47] { R134 += 1, R118 += 1 };
  s3 -> s1 [48, 65535] { R134 += 1, R118 += 1 };
  s4 -> s4 [0, 65535] { R134 += 1, R118 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R134 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton address_9 {
  init s0;
  s0 -> s1 [0, 46] { R136 += 1, R120 += 1, R110 += 1 };
  s0 -> s2 [0, 65535] { R136 += 1, R119 += 1, R120 += 1 };
  s0 -> s3 [0, 65535] { R136 += 1, R120 += 1, R109 += 1, R110 += 1 };
  s0 -> s0 [0, 65535] { R135 += 1, R136 += 1 };
  s0 -> s4 [47, 47] { R136 += 1, R120 += 1, R110 += 1 };
  s0 -> s1 [48, 65535] { R136 += 1, R120 += 1, R110 += 1 };
  s1 -> s1 [0, 46] { R136 += 1, R120 += 1, R110 += 1 };
  s1 -> s4 [47, 47] { R136 += 1, R120 += 1, R110 += 1 };
  s1 -> s1 [48, 65535] { R136 += 1, R120 += 1, R110 += 1 };
  s2 -> s1 [0, 46] { R136 += 1, R120 += 1, R110 += 1 };
  s2 -> s2 [0, 65535] { R136 += 1, R119 += 1, R120 += 1 };
  s2 -> s3 [0, 65535] { R136 += 1, R120 += 1, R109 += 1, R110 += 1 };
  s2 -> s4 [47, 47] { R136 += 1, R120 += 1, R110 += 1 };
  s2 -> s1 [48, 65535] { R136 += 1, R120 += 1, R110 += 1 };
  s3 -> s1 [0, 46] { R136 += 1, R120 += 1, R110 += 1 };
  s3 -> s3 [0, 65535] { R136 += 1, R120 += 1, R109 += 1, R110 += 1 };
  s3 -> s4 [47, 47] { R136 += 1, R120 += 1, R110 += 1 };
  s3 -> s1 [48, 65535] { R136 += 1, R120 += 1, R110 += 1 };
  s4 -> s5 [0, 65535] { R136 += 1, R120 += 1 };
  s4 -> s6 [0, 65535] { R136 += 1 };
  s4 -> s4 [0, 65535] { R136 += 1, R120 += 1, R110 += 1 };
  s4 -> s7 [0, 65535];
  s5 -> s5 [0, 65535] { R136 += 1, R120 += 1 };
  s5 -> s6 [0, 65535] { R136 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s6 [0, 65535] { R136 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s4, s5, s6, s7;
};
automaton address_10 {
  init s0;
  s0 -> s0 [0, 65535] { R137 += 1, R138 += 1 };
  s0 -> s1 [0, 65535] { R138 += 1, R122 += 1, R112 += 1, R108 += 1 };
  s0 -> s2 [0, 65535] { R138 += 1, R121 += 1, R122 += 1 };
  s0 -> s3 [0, 65535] { R138 += 1, R122 += 1, R111 += 1, R112 += 1 };
  s1 -> s1 [0, 65535] { R138 += 1, R122 += 1, R112 += 1, R108 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R138 += 1 };
  s1 -> s6 [0, 65535] { R138 += 1, R122 += 1 };
  s2 -> s1 [0, 65535] { R138 += 1, R122 += 1, R112 += 1, R108 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R138 += 1, R121 += 1, R122 += 1 };
  s2 -> s3 [0, 65535] { R138 += 1, R122 += 1, R111 += 1, R112 += 1 };
  s3 -> s1 [0, 65535] { R138 += 1, R122 += 1, R112 += 1, R108 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R138 += 1 };
  s3 -> s3 [0, 65535] { R138 += 1, R122 += 1, R111 += 1, R112 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R138 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R138 += 1 };
  s6 -> s6 [0, 65535] { R138 += 1, R122 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R0 = R110 && R1 = R120 && R2 = R136 && R7 = 0 && R8 - R119 = -1 && R75 = 0 && R76 - R135 = -1 && R109 = 0 && R113 = R119 && R114 = R120 && R123 = R135 && R124 = R136 && R127 = R135 && R128 = R136 && R129 = R135 && R130 = R136 && R3 < 1 && -1 < R110 && R119 - R120 < 1 && -1 < R119 && R135 - R136 < 1 && -1 < R135 && (R111 != 0 || R110 = R112 || (R108 = 0 && R110 = 0)) && (R115 != R119 || R116 = R120 || (R110 = 0 && R119 = R120)) && (R117 != R119 || R118 = R120 || (R110 = 0 && R119 = R120)) && (R119 != R121 || R120 = R122 || ((R110 != 0 || R120 - R121 < 1 || R121 < 0) && (R110 < 1 || R120 < R121 || R121 < 0))) && (R125 != R135 || R126 = R136 || (R120 = 0 && (R119 != 0 || R136 - R135 < 1))) && (R131 != R135 || R132 = R136 || (R120 = 0 && (R119 != 0 || R136 - R135 < 1))) && (R133 != R135 || R134 = R136 || (R120 = 0 && (R119 != 0 || R136 - R135 < 1))) && (R135 != R137 || R136 = R138 || ((R119 != 0 || R120 != 0 || R136 - R137 < 1 || R137 < 0) && (R120 < 1 || R136 < R137 || R137 < 0))) && (R111 = 0 || (R108 = 0 && R110 = 0)) && (R115 = R119 || (R110 = 0 && R119 = R120)) && (R117 = R119 || (R110 = 0 && R119 = R120)) && (R119 = R121 || (R110 = 0 && R119 = R120)) && (R125 = R135 || (R120 = 0 && (R119 != 0 || R136 - R135 < 1))) && (R131 = R135 || (R120 = 0 && (R119 != 0 || R136 - R135 < 1))) && (R133 = R135 || (R120 = 0 && (R119 != 0 || R136 - R135 < 1))) && (R135 = R137 || (R120 = 0 && (R119 != 0 || R136 - R135 < 1)));
// End of Parikh automata intersection problem
