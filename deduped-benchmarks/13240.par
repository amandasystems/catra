// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R2, R3, R43, R44, R45, R46, R47, R48, R49, R50, R51, R52, R53, R54, R55, R56, R57, R58, R59, R6, R60, R61, R62, R63, R64, R65, R66, R67, R68, R69, R70, R71, R72, R73;
synchronised {  // Automata constraining address
automaton address_0 {
  init s0;
  s0 -> s0 [0, 46];
  s0 -> s1 [47, 47];
  s0 -> s0 [48, 65535];
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton address_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton address_2 {
  init s0;
  s0 -> s1 [0, 46] { R11 += 1 };
  s0 -> s0 [0, 65535] { R10 += 1, R11 += 1 };
  s0 -> s2 [47, 47];
  s0 -> s1 [48, 65535] { R11 += 1 };
  s1 -> s1 [0, 46] { R11 += 1 };
  s1 -> s2 [47, 47];
  s1 -> s1 [48, 65535] { R11 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton address_3 {
  init s0;
  s0 -> s1 [0, 46] { R59 += 1 };
  s0 -> s0 [0, 65535] { R58 += 1, R59 += 1 };
  s0 -> s2 [47, 47] { R59 += 1 };
  s0 -> s1 [48, 65535] { R59 += 1 };
  s1 -> s1 [0, 46] { R59 += 1 };
  s1 -> s2 [47, 47] { R59 += 1 };
  s1 -> s1 [48, 65535] { R59 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R59 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton address_4 {
  init s0;
  s0 -> s0 [0, 65535] { R60 += 1, R61 += 1 };
  s0 -> s1 [0, 65535] { R61 += 1, R1 += 1 };
  s1 -> s1 [0, 65535] { R61 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton address_5 {
  init s0;
  s0 -> s1 [0, 46] { R63 += 1 };
  s0 -> s0 [0, 65535] { R62 += 1, R63 += 1 };
  s0 -> s2 [0, 65535] { R63 += 1, R6 += 1 };
  s0 -> s3 [47, 47] { R63 += 1 };
  s0 -> s1 [48, 65535] { R63 += 1 };
  s1 -> s1 [0, 46] { R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [47, 47] { R63 += 1 };
  s1 -> s1 [48, 65535] { R63 += 1 };
  s2 -> s1 [0, 46] { R63 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R63 += 1, R6 += 1 };
  s2 -> s3 [47, 47] { R63 += 1 };
  s2 -> s1 [48, 65535] { R63 += 1 };
  s3 -> s3 [0, 65535] { R63 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton address_6 {
  init s0;
  s0 -> s1 [0, 46] { R65 += 1, R49 += 1 };
  s0 -> s2 [0, 65535] { R65 += 1, R48 += 1, R49 += 1 };
  s0 -> s0 [0, 65535] { R64 += 1, R65 += 1 };
  s0 -> s3 [47, 47] { R65 += 1, R49 += 1 };
  s0 -> s1 [48, 65535] { R65 += 1, R49 += 1 };
  s1 -> s1 [0, 46] { R65 += 1, R49 += 1 };
  s1 -> s3 [47, 47] { R65 += 1, R49 += 1 };
  s1 -> s1 [48, 65535] { R65 += 1, R49 += 1 };
  s2 -> s1 [0, 46] { R65 += 1, R49 += 1 };
  s2 -> s2 [0, 65535] { R65 += 1, R48 += 1, R49 += 1 };
  s2 -> s3 [47, 47] { R65 += 1, R49 += 1 };
  s2 -> s1 [48, 65535] { R65 += 1, R49 += 1 };
  s3 -> s3 [0, 65535] { R65 += 1, R49 += 1 };
  s3 -> s4 [0, 65535] { R65 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R65 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
automaton address_7 {
  init s0;
  s0 -> s1 [0, 65535] { R67 += 1, R51 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R66 += 1, R67 += 1 };
  s0 -> s2 [0, 65535] { R67 += 1, R50 += 1, R51 += 1 };
  s1 -> s1 [0, 65535] { R67 += 1, R51 += 1, R0 += 1 };
  s1 -> s4 [0, 65535] { R67 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R67 += 1, R51 += 1, R0 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R67 += 1, R50 += 1, R51 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R67 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton address_8 {
  init s0;
  s0 -> s1 [0, 46] { R69 += 1, R53 += 1 };
  s0 -> s2 [0, 65535] { R69 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [0, 65535] { R69 += 1, R53 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R68 += 1, R69 += 1 };
  s0 -> s4 [47, 47] { R69 += 1, R53 += 1 };
  s0 -> s1 [48, 65535] { R69 += 1, R53 += 1 };
  s1 -> s1 [0, 46] { R69 += 1, R53 += 1 };
  s1 -> s1 [0, 65535] { R69 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s4 [47, 47] { R69 += 1, R53 += 1 };
  s1 -> s1 [48, 65535] { R69 += 1, R53 += 1 };
  s2 -> s1 [0, 46] { R69 += 1, R53 += 1 };
  s2 -> s2 [0, 65535] { R69 += 1, R52 += 1, R53 += 1 };
  s2 -> s3 [0, 65535] { R69 += 1, R53 += 1, R3 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s4 [47, 47] { R69 += 1, R53 += 1 };
  s2 -> s1 [48, 65535] { R69 += 1, R53 += 1 };
  s3 -> s1 [0, 46] { R69 += 1, R53 += 1 };
  s3 -> s5 [0, 65535] { R69 += 1 };
  s3 -> s3 [0, 65535] { R69 += 1, R53 += 1, R3 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s4 [47, 47] { R69 += 1, R53 += 1 };
  s3 -> s1 [48, 65535] { R69 += 1, R53 += 1 };
  s4 -> s4 [0, 65535] { R69 += 1, R53 += 1 };
  s5 -> s5 [0, 65535] { R69 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton address_9 {
  init s0;
  s0 -> s1 [0, 46] { R71 += 1, R55 += 1, R45 += 1 };
  s0 -> s2 [0, 65535] { R71 += 1, R55 += 1, R44 += 1, R45 += 1 };
  s0 -> s3 [0, 65535] { R71 += 1, R54 += 1, R55 += 1 };
  s0 -> s0 [0, 65535] { R70 += 1, R71 += 1 };
  s0 -> s4 [47, 47] { R71 += 1, R55 += 1, R45 += 1 };
  s0 -> s1 [48, 65535] { R71 += 1, R55 += 1, R45 += 1 };
  s1 -> s1 [0, 46] { R71 += 1, R55 += 1, R45 += 1 };
  s1 -> s4 [47, 47] { R71 += 1, R55 += 1, R45 += 1 };
  s1 -> s1 [48, 65535] { R71 += 1, R55 += 1, R45 += 1 };
  s2 -> s1 [0, 46] { R71 += 1, R55 += 1, R45 += 1 };
  s2 -> s2 [0, 65535] { R71 += 1, R55 += 1, R44 += 1, R45 += 1 };
  s2 -> s4 [47, 47] { R71 += 1, R55 += 1, R45 += 1 };
  s2 -> s1 [48, 65535] { R71 += 1, R55 += 1, R45 += 1 };
  s3 -> s1 [0, 46] { R71 += 1, R55 += 1, R45 += 1 };
  s3 -> s2 [0, 65535] { R71 += 1, R55 += 1, R44 += 1, R45 += 1 };
  s3 -> s3 [0, 65535] { R71 += 1, R54 += 1, R55 += 1 };
  s3 -> s4 [47, 47] { R71 += 1, R55 += 1, R45 += 1 };
  s3 -> s1 [48, 65535] { R71 += 1, R55 += 1, R45 += 1 };
  s4 -> s4 [0, 65535] { R71 += 1, R55 += 1, R45 += 1 };
  s4 -> s5 [0, 65535] { R71 += 1, R55 += 1 };
  s4 -> s6 [0, 65535] { R71 += 1 };
  s4 -> s7 [0, 65535];
  s5 -> s5 [0, 65535] { R71 += 1, R55 += 1 };
  s5 -> s6 [0, 65535] { R71 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s6 [0, 65535] { R71 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s4, s5, s6, s7;
};
automaton address_10 {
  init s0;
  s0 -> s1 [0, 65535] { R73 += 1, R57 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R72 += 1, R73 += 1 };
  s0 -> s2 [0, 65535] { R73 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [0, 65535] { R73 += 1, R57 += 1, R47 += 1, R43 += 1 };
  s1 -> s1 [0, 65535] { R73 += 1, R57 += 1, R46 += 1, R47 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R73 += 1 };
  s1 -> s3 [0, 65535] { R73 += 1, R57 += 1, R47 += 1, R43 += 1 };
  s2 -> s1 [0, 65535] { R73 += 1, R57 += 1, R46 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R73 += 1, R56 += 1, R57 += 1 };
  s2 -> s3 [0, 65535] { R73 += 1, R57 += 1, R47 += 1, R43 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R73 += 1, R57 += 1 };
  s3 -> s6 [0, 65535] { R73 += 1 };
  s3 -> s3 [0, 65535] { R73 += 1, R57 += 1, R47 += 1, R43 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R73 += 1, R57 += 1 };
  s5 -> s6 [0, 65535] { R73 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R73 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R0 = R45 && R1 = R55 && R2 = R71 && R10 = 0 && R11 - R70 = -1 && R44 = 0 && R48 = 0 && R49 = R55 && R54 = 0 && R58 = R70 && R59 = R71 && R64 = R70 && R65 = R71 && R3 < 1 && R6 < 1 && -1 < R45 && -1 < R55 && R70 - R71 < 1 && -1 < R70 && (R46 != 0 || R45 = R47 || (R43 = 0 && R45 = 0)) && (R50 != 0 || R51 = R55 || (R45 = 0 && R55 = 0)) && (R52 != 0 || R53 = R55 || (R45 = 0 && R55 = 0)) && (R56 != 0 || R55 = R57 || (R45 = 0 && R55 = 0)) && (R60 != R70 || R61 = R71 || (R55 = 0 && R70 = R71)) && (R62 != R70 || R63 = R71 || (R55 = 0 && R70 = R71)) && (R66 != R70 || R67 = R71 || (R55 = 0 && R70 = R71)) && (R68 != R70 || R69 = R71 || (R55 = 0 && R70 = R71)) && (R70 != R72 || R71 = R73 || ((R55 != 0 || R71 - R72 < 1 || R72 < 0) && (R55 < 1 || R71 < R72 || R72 < 0))) && (R46 = 0 || (R43 = 0 && R45 = 0)) && (R50 = 0 || (R45 = 0 && R55 = 0)) && (R52 = 0 || (R45 = 0 && R55 = 0)) && (R56 = 0 || (R45 = 0 && R55 = 0)) && (R60 = R70 || (R55 = 0 && R70 = R71)) && (R62 = R70 || (R55 = 0 && R70 = R71)) && (R66 = R70 || (R55 = 0 && R70 = R71)) && (R68 = R70 || (R55 = 0 && R70 = R71)) && (R70 = R72 || (R55 = 0 && R70 = R71));
// End of Parikh automata intersection problem
