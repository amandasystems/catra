// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R12, R3, R4, R9;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s0 [0, 36];
  s0 -> s1 [37, 37];
  s0 -> s0 [38, 65535];
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 36] { R4 += 1 };
  s0 -> s0 [0, 65535] { R3 += 1, R4 += 1 };
  s0 -> s2 [37, 37];
  s0 -> s1 [38, 65535] { R4 += 1 };
  s1 -> s1 [0, 36] { R4 += 1 };
  s1 -> s2 [37, 37];
  s1 -> s1 [38, 65535] { R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 36] { R10 += 1 };
  s0 -> s0 [0, 65535] { R9 += 1, R10 += 1 };
  s0 -> s2 [37, 37] { R10 += 1 };
  s0 -> s1 [38, 65535] { R10 += 1 };
  s1 -> s1 [0, 36] { R10 += 1 };
  s1 -> s2 [37, 37] { R10 += 1 };
  s1 -> s1 [38, 65535] { R10 += 1 };
  s2 -> s2 [0, 65535] { R10 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 65535] { R12 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R11 += 1, R12 += 1 };
  s1 -> s1 [0, 65535] { R12 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
};
constraint R1 = R12 && R3 = 0 && R4 - R11 = -1 && R9 = R11 && R10 = R12 && R0 != 0 && R11 - R12 < 1 && -1 < R11 && 0 < R12;
// End of Parikh automata intersection problem
