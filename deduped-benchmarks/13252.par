// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R142, R143, R2, R210, R211, R243, R244, R245, R246, R247, R248, R249, R250, R251, R252, R253, R254, R255, R256, R257, R258, R259, R260, R261, R262, R263, R264, R265, R266, R267, R268, R269, R270, R271, R272, R273, R6, R7;
synchronised {  // Automata constraining url
automaton url_0 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton url_1 {
  init s0;
  s0 -> s1 [0, 57] { R211 += 1 };
  s0 -> s0 [0, 65535] { R210 += 1, R211 += 1 };
  s0 -> s2 [58, 58];
  s0 -> s1 [59, 65535] { R211 += 1 };
  s1 -> s1 [0, 57] { R211 += 1 };
  s1 -> s2 [58, 58];
  s1 -> s1 [59, 65535] { R211 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton url_2 {
  init s0;
  s0 -> s0 [0, 65535] { R254 += 1, R255 += 1 };
  s0 -> s1 [104, 104] { R255 += 1 };
  s1 -> s2 [116, 116] { R255 += 1 };
  s2 -> s3 [116, 116] { R255 += 1 };
  s3 -> s4 [112, 112] { R255 += 1 };
  s4 -> s4 [0, 65535];
  accepting s4;
};
automaton url_3 {
  init s0;
  s0 -> s1 [0, 65535] { R257 += 1, R245 += 1 };
  s0 -> s0 [0, 65535] { R256 += 1, R257 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R257 += 1, R245 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton url_4 {
  init s0;
  s0 -> s1 [0, 65535] { R259 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R258 += 1, R259 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R259 += 1, R0 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton url_5 {
  init s0;
  s0 -> s1 [0, 34] { R261 += 1 };
  s0 -> s0 [0, 65535] { R260 += 1, R261 += 1 };
  s0 -> s2 [0, 65535] { R261 += 1, R2 += 1 };
  s0 -> s3 [35, 35] { R261 += 1 };
  s0 -> s1 [36, 65535] { R261 += 1 };
  s1 -> s1 [0, 34] { R261 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [35, 35] { R261 += 1 };
  s1 -> s1 [36, 65535] { R261 += 1 };
  s2 -> s1 [0, 34] { R261 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R261 += 1, R2 += 1 };
  s2 -> s3 [35, 35] { R261 += 1 };
  s2 -> s1 [36, 65535] { R261 += 1 };
  s3 -> s3 [0, 65535] { R261 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton url_6 {
  init s0;
  s0 -> s1 [0, 46] { R263 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R262 += 1, R263 += 1 };
  s0 -> s2 [0, 65535] { R263 += 1, R6 += 1, R7 += 1 };
  s0 -> s3 [47, 47] { R263 += 1 };
  s0 -> s1 [48, 65535] { R263 += 1, R7 += 1 };
  s1 -> s1 [0, 46] { R263 += 1, R7 += 1 };
  s1 -> s3 [47, 47] { R263 += 1 };
  s1 -> s1 [48, 65535] { R263 += 1, R7 += 1 };
  s2 -> s1 [0, 46] { R263 += 1, R7 += 1 };
  s2 -> s2 [0, 65535] { R263 += 1, R6 += 1, R7 += 1 };
  s2 -> s3 [47, 47] { R263 += 1 };
  s2 -> s1 [48, 65535] { R263 += 1, R7 += 1 };
  s3 -> s3 [0, 65535] { R263 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton url_7 {
  init s0;
  s0 -> s1 [0, 62] { R265 += 1, R143 += 1 };
  s0 -> s2 [0, 65535] { R265 += 1, R142 += 1, R143 += 1 };
  s0 -> s0 [0, 65535] { R264 += 1, R265 += 1 };
  s0 -> s3 [63, 63] { R265 += 1 };
  s0 -> s1 [64, 65535] { R265 += 1, R143 += 1 };
  s1 -> s1 [0, 62] { R265 += 1, R143 += 1 };
  s1 -> s3 [63, 63] { R265 += 1 };
  s1 -> s1 [64, 65535] { R265 += 1, R143 += 1 };
  s2 -> s1 [0, 62] { R265 += 1, R143 += 1 };
  s2 -> s2 [0, 65535] { R265 += 1, R142 += 1, R143 += 1 };
  s2 -> s3 [63, 63] { R265 += 1 };
  s2 -> s1 [64, 65535] { R265 += 1, R143 += 1 };
  s3 -> s3 [0, 65535] { R265 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton url_8 {
  init s0;
  s0 -> s1 [0, 90] { R267 += 1, R247 += 1 };
  s0 -> s2 [0, 65535] { R267 += 1, R246 += 1, R247 += 1 };
  s0 -> s0 [0, 65535] { R266 += 1, R267 += 1 };
  s0 -> s3 [91, 91] { R267 += 1, R247 += 1 };
  s0 -> s1 [92, 65535] { R267 += 1, R247 += 1 };
  s1 -> s1 [0, 90] { R267 += 1, R247 += 1 };
  s1 -> s3 [91, 91] { R267 += 1, R247 += 1 };
  s1 -> s1 [92, 65535] { R267 += 1, R247 += 1 };
  s2 -> s1 [0, 90] { R267 += 1, R247 += 1 };
  s2 -> s2 [0, 65535] { R267 += 1, R246 += 1, R247 += 1 };
  s2 -> s3 [91, 91] { R267 += 1, R247 += 1 };
  s2 -> s1 [92, 65535] { R267 += 1, R247 += 1 };
  s3 -> s3 [0, 65535] { R267 += 1, R247 += 1 };
  s3 -> s4 [0, 65535] { R267 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R267 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
automaton url_9 {
  init s0;
  s0 -> s1 [0, 65535] { R269 += 1, R248 += 1, R249 += 1 };
  s0 -> s2 [0, 65535] { R269 += 1, R249 += 1, R243 += 1 };
  s0 -> s0 [0, 65535] { R268 += 1, R269 += 1 };
  s1 -> s1 [0, 65535] { R269 += 1, R248 += 1, R249 += 1 };
  s1 -> s2 [0, 65535] { R269 += 1, R249 += 1, R243 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R269 += 1 };
  s2 -> s2 [0, 65535] { R269 += 1, R249 += 1, R243 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R269 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton url_10 {
  init s0;
  s0 -> s0 [0, 65535] { R270 += 1, R271 += 1 };
  s0 -> s1 [0, 65535] { R271 += 1, R250 += 1, R251 += 1 };
  s0 -> s2 [47, 47] { R271 += 1, R251 += 1 };
  s1 -> s1 [0, 65535] { R271 += 1, R250 += 1, R251 += 1 };
  s1 -> s2 [47, 47] { R271 += 1, R251 += 1 };
  s2 -> s3 [47, 47] { R271 += 1, R251 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R271 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton url_11 {
  init s0;
  s0 -> s1 [0, 65535] { R273 += 1, R253 += 1, R244 += 1 };
  s0 -> s0 [0, 65535] { R272 += 1, R273 += 1 };
  s0 -> s2 [0, 65535] { R273 += 1, R252 += 1, R253 += 1 };
  s1 -> s1 [0, 65535] { R273 += 1, R253 += 1, R244 += 1 };
  s1 -> s4 [0, 65535] { R273 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R273 += 1, R253 += 1, R244 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R273 += 1, R252 += 1, R253 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R273 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
};
constraint R1 = R273 && R6 = 2 && R142 = 2 && R143 = R247 && R210 = 0 && R211 - R272 = -1 && R246 = 2 && R250 = 0 && R251 = 2 && R252 = 0 && R253 = 2 && R254 = 0 && R255 - R272 = -1 && R256 = 0 && R257 - R272 = -1 && R258 = R272 && R259 = R273 && R260 = R272 && R261 = R273 && R262 = R272 && R263 = R273 && R264 = R272 && R265 = R273 && R266 = R272 && R267 = R273 && R268 = R272 && R269 = R273 && R270 = R272 && R271 = R273 && R0 != R247 && R7 < R0 && R2 < 3 && R247 < R7 && 1 < R247 && R272 - R273 < 1 && 1 < R272 && (R248 != 2 || ((R243 != 0 || ((R0 != R249 || R249 - R7 < 1 || R247 < 3) && (R0 = R249 || R247 = R249 || R247 < 3))) && (R243 = 0 || ((R0 != R249 || R249 - R7 < 1) && (R0 = R249 || R247 = R249))))) && (R248 = 2 || (R243 = 0 && R247 = 2));
// End of Parikh automata intersection problem
