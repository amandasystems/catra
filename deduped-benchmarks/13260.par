// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R1011, R1015, R1016, R1267, R1268, R1393, R1394, R1455, R1456, R1457, R1458, R1459, R1460, R1461, R1462, R1463, R1464, R1465, R1466, R1467, R1468, R1469, R1470, R1471, R1472, R1473, R1474, R1475, R1476, R1477, R1478, R1479, R1480, R1481, R1482, R1483, R1484, R1485, R1486, R1487, R1488, R1489, R1490, R1491, R1492, R1493, R1494, R1495, R1496, R1497, R1498, R1499, R1500, R1501, R1502, R1503, R1504, R1505, R1506, R1507, R1508, R1509, R1510, R1511, R1512, R1513, R1514, R2, R4, R5;
synchronised {  // Automata constraining url
automaton url_0 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton url_1 {
  init s0;
  s0 -> s1 [0, 57] { R1394 += 1 };
  s0 -> s0 [0, 65535] { R1393 += 1, R1394 += 1 };
  s0 -> s2 [58, 58];
  s0 -> s1 [59, 65535] { R1394 += 1 };
  s1 -> s1 [0, 57] { R1394 += 1 };
  s1 -> s2 [58, 58];
  s1 -> s1 [59, 65535] { R1394 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton url_2 {
  init s0;
  s0 -> s0 [0, 65535] { R1471 += 1, R1472 += 1 };
  s0 -> s1 [104, 104] { R1472 += 1 };
  s1 -> s2 [116, 116] { R1472 += 1 };
  s2 -> s3 [116, 116] { R1472 += 1 };
  s3 -> s4 [112, 112] { R1472 += 1 };
  s4 -> s4 [0, 65535];
  accepting s4;
};
automaton url_3 {
  init s0;
  s0 -> s0 [0, 65535] { R1473 += 1, R1474 += 1 };
  s0 -> s1 [0, 65535] { R1474 += 1, R1458 += 1 };
  s1 -> s1 [0, 65535] { R1474 += 1, R1458 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton url_4 {
  init s0;
  s0 -> s0 [0, 65535] { R1487 += 1, R1488 += 1 };
  s0 -> s1 [0, 65535] { R1488 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R1488 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton url_5 {
  init s0;
  s0 -> s1 [0, 34] { R1490 += 1 };
  s0 -> s2 [0, 65535] { R1490 += 1, R1011 += 1 };
  s0 -> s0 [0, 65535] { R1489 += 1, R1490 += 1 };
  s0 -> s3 [35, 35] { R1490 += 1 };
  s0 -> s1 [36, 65535] { R1490 += 1 };
  s1 -> s1 [0, 34] { R1490 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [35, 35] { R1490 += 1 };
  s1 -> s1 [36, 65535] { R1490 += 1 };
  s2 -> s1 [0, 34] { R1490 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1490 += 1, R1011 += 1 };
  s2 -> s3 [35, 35] { R1490 += 1 };
  s2 -> s1 [36, 65535] { R1490 += 1 };
  s3 -> s3 [0, 65535] { R1490 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton url_6 {
  init s0;
  s0 -> s1 [0, 62] { R1492 += 1, R1016 += 1 };
  s0 -> s2 [0, 65535] { R1492 += 1, R1015 += 1, R1016 += 1 };
  s0 -> s0 [0, 65535] { R1491 += 1, R1492 += 1 };
  s0 -> s3 [63, 63] { R1492 += 1 };
  s0 -> s1 [64, 65535] { R1492 += 1, R1016 += 1 };
  s1 -> s1 [0, 62] { R1492 += 1, R1016 += 1 };
  s1 -> s3 [63, 63] { R1492 += 1 };
  s1 -> s1 [64, 65535] { R1492 += 1, R1016 += 1 };
  s2 -> s1 [0, 62] { R1492 += 1, R1016 += 1 };
  s2 -> s2 [0, 65535] { R1492 += 1, R1015 += 1, R1016 += 1 };
  s2 -> s3 [63, 63] { R1492 += 1 };
  s2 -> s1 [64, 65535] { R1492 += 1, R1016 += 1 };
  s3 -> s3 [0, 65535] { R1492 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton url_7 {
  init s0;
  s0 -> s1 [0, 46] { R1494 += 1, R1268 += 1 };
  s0 -> s2 [0, 65535] { R1494 += 1, R1267 += 1, R1268 += 1 };
  s0 -> s0 [0, 65535] { R1493 += 1, R1494 += 1 };
  s0 -> s3 [47, 47] { R1494 += 1 };
  s0 -> s1 [48, 65535] { R1494 += 1, R1268 += 1 };
  s1 -> s1 [0, 46] { R1494 += 1, R1268 += 1 };
  s1 -> s3 [47, 47] { R1494 += 1 };
  s1 -> s1 [48, 65535] { R1494 += 1, R1268 += 1 };
  s2 -> s1 [0, 46] { R1494 += 1, R1268 += 1 };
  s2 -> s2 [0, 65535] { R1494 += 1, R1267 += 1, R1268 += 1 };
  s2 -> s3 [47, 47] { R1494 += 1 };
  s2 -> s1 [48, 65535] { R1494 += 1, R1268 += 1 };
  s3 -> s3 [0, 65535] { R1494 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton url_8 {
  init s0;
  s0 -> s1 [0, 90] { R1496 += 1, R1464 += 1 };
  s0 -> s2 [0, 65535] { R1496 += 1, R1463 += 1, R1464 += 1 };
  s0 -> s0 [0, 65535] { R1495 += 1, R1496 += 1 };
  s0 -> s1 [92, 92] { R1496 += 1, R1464 += 1 };
  s0 -> s1 [94, 65535] { R1496 += 1, R1464 += 1 };
  s1 -> s1 [0, 90] { R1496 += 1, R1464 += 1 };
  s1 -> s1 [0, 65535] { R1496 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [92, 92] { R1496 += 1, R1464 += 1 };
  s1 -> s1 [94, 65535] { R1496 += 1, R1464 += 1 };
  s2 -> s1 [0, 90] { R1496 += 1, R1464 += 1 };
  s2 -> s2 [0, 65535] { R1496 += 1, R1463 += 1, R1464 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [92, 92] { R1496 += 1, R1464 += 1 };
  s2 -> s1 [94, 65535] { R1496 += 1, R1464 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton url_9 {
  init s0;
  s0 -> s1 [0, 65535] { R1498 += 1, R1466 += 1, R1456 += 1 };
  s0 -> s2 [0, 65535] { R1498 += 1, R1465 += 1, R1466 += 1 };
  s0 -> s0 [0, 65535] { R1497 += 1, R1498 += 1 };
  s1 -> s1 [0, 65535] { R1498 += 1, R1466 += 1, R1456 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R1498 += 1 };
  s2 -> s1 [0, 65535] { R1498 += 1, R1466 += 1, R1456 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1498 += 1, R1465 += 1, R1466 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1498 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton url_10 {
  init s0;
  s0 -> s1 [0, 65535] { R1500 += 1, R1467 += 1, R1468 += 1 };
  s0 -> s0 [0, 65535] { R1499 += 1, R1500 += 1 };
  s0 -> s2 [47, 47] { R1500 += 1, R1468 += 1 };
  s1 -> s1 [0, 65535] { R1500 += 1, R1467 += 1, R1468 += 1 };
  s1 -> s2 [47, 47] { R1500 += 1, R1468 += 1 };
  s2 -> s3 [47, 47] { R1500 += 1, R1468 += 1 };
  s3 -> s3 [0, 65535] { R1500 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton url_11 {
  init s0;
  s0 -> s1 [0, 65535] { R1502 += 1, R1470 += 1, R1457 += 1 };
  s0 -> s0 [0, 65535] { R1501 += 1, R1502 += 1 };
  s0 -> s2 [0, 65535] { R1502 += 1, R1469 += 1, R1470 += 1 };
  s1 -> s4 [0, 65535] { R1502 += 1 };
  s1 -> s1 [0, 65535] { R1502 += 1, R1470 += 1, R1457 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R1502 += 1, R1470 += 1, R1457 += 1 };
  s2 -> s2 [0, 65535] { R1502 += 1, R1469 += 1, R1470 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1502 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton url_12 {
  init s0;
  s0 -> s1 [0, 34] { R1504 += 1, R1476 += 1 };
  s0 -> s2 [0, 65535] { R1504 += 1, R1475 += 1, R1476 += 1 };
  s0 -> s0 [0, 65535] { R1503 += 1, R1504 += 1 };
  s0 -> s1 [36, 62] { R1504 += 1, R1476 += 1 };
  s0 -> s3 [63, 63] { R1504 += 1, R1476 += 1 };
  s0 -> s1 [64, 65535] { R1504 += 1, R1476 += 1 };
  s1 -> s1 [0, 34] { R1504 += 1, R1476 += 1 };
  s1 -> s1 [36, 62] { R1504 += 1, R1476 += 1 };
  s1 -> s3 [63, 63] { R1504 += 1, R1476 += 1 };
  s1 -> s1 [64, 65535] { R1504 += 1, R1476 += 1 };
  s2 -> s1 [0, 34] { R1504 += 1, R1476 += 1 };
  s2 -> s2 [0, 65535] { R1504 += 1, R1475 += 1, R1476 += 1 };
  s2 -> s1 [36, 62] { R1504 += 1, R1476 += 1 };
  s2 -> s3 [63, 63] { R1504 += 1, R1476 += 1 };
  s2 -> s1 [64, 65535] { R1504 += 1, R1476 += 1 };
  s3 -> s3 [0, 34] { R1504 += 1, R1476 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1504 += 1 };
  s3 -> s3 [36, 65535] { R1504 += 1, R1476 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton url_13 {
  init s0;
  s0 -> s0 [0, 65535] { R1505 += 1, R1506 += 1 };
  s0 -> s1 [0, 65535] { R1506 += 1, R1478 += 1, R0 += 1 };
  s0 -> s2 [0, 65535] { R1506 += 1, R1477 += 1, R1478 += 1 };
  s1 -> s4 [0, 65535] { R1506 += 1 };
  s1 -> s1 [0, 65535] { R1506 += 1, R1478 += 1, R0 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R1506 += 1, R1478 += 1, R0 += 1 };
  s2 -> s2 [0, 65535] { R1506 += 1, R1477 += 1, R1478 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1506 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton url_14 {
  init s0;
  s0 -> s1 [0, 62] { R1508 += 1, R1480 += 1, R5 += 1 };
  s0 -> s2 [0, 65535] { R1508 += 1, R1480 += 1, R4 += 1, R5 += 1 };
  s0 -> s3 [0, 65535] { R1508 += 1, R1479 += 1, R1480 += 1 };
  s0 -> s0 [0, 65535] { R1507 += 1, R1508 += 1 };
  s0 -> s4 [63, 63] { R1508 += 1, R1480 += 1 };
  s0 -> s1 [64, 65535] { R1508 += 1, R1480 += 1, R5 += 1 };
  s1 -> s1 [0, 62] { R1508 += 1, R1480 += 1, R5 += 1 };
  s1 -> s4 [63, 63] { R1508 += 1, R1480 += 1 };
  s1 -> s1 [64, 65535] { R1508 += 1, R1480 += 1, R5 += 1 };
  s2 -> s1 [0, 62] { R1508 += 1, R1480 += 1, R5 += 1 };
  s2 -> s2 [0, 65535] { R1508 += 1, R1480 += 1, R4 += 1, R5 += 1 };
  s2 -> s4 [63, 63] { R1508 += 1, R1480 += 1 };
  s2 -> s1 [64, 65535] { R1508 += 1, R1480 += 1, R5 += 1 };
  s3 -> s1 [0, 62] { R1508 += 1, R1480 += 1, R5 += 1 };
  s3 -> s2 [0, 65535] { R1508 += 1, R1480 += 1, R4 += 1, R5 += 1 };
  s3 -> s3 [0, 65535] { R1508 += 1, R1479 += 1, R1480 += 1 };
  s3 -> s4 [63, 63] { R1508 += 1, R1480 += 1 };
  s3 -> s1 [64, 65535] { R1508 += 1, R1480 += 1, R5 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1508 += 1, R1480 += 1 };
  s4 -> s6 [0, 65535] { R1508 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1508 += 1 };
  accepting s4, s5, s6;
};
automaton url_15 {
  init s0;
  s0 -> s1 [0, 65535] { R1510 += 1, R1481 += 1, R1482 += 1 };
  s0 -> s0 [0, 65535] { R1509 += 1, R1510 += 1 };
  s0 -> s2 [0, 65535] { R1510 += 1, R1482 += 1 };
  s1 -> s1 [0, 65535] { R1510 += 1, R1481 += 1, R1482 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R1510 += 1, R1482 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1510 += 1, R1482 += 1 };
  s2 -> s4 [0, 65535] { R1510 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1510 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton url_16 {
  init s0;
  s0 -> s1 [0, 58] { R1512 += 1, R1484 += 1, R1460 += 1 };
  s0 -> s0 [0, 65535] { R1511 += 1, R1512 += 1 };
  s0 -> s2 [0, 65535] { R1512 += 1, R1483 += 1, R1484 += 1 };
  s0 -> s3 [0, 65535] { R1512 += 1, R1484 += 1, R1459 += 1, R1460 += 1 };
  s0 -> s4 [59, 59] { R1512 += 1, R1484 += 1, R1460 += 1 };
  s0 -> s1 [60, 65535] { R1512 += 1, R1484 += 1, R1460 += 1 };
  s1 -> s1 [0, 58] { R1512 += 1, R1484 += 1, R1460 += 1 };
  s1 -> s4 [59, 59] { R1512 += 1, R1484 += 1, R1460 += 1 };
  s1 -> s1 [60, 65535] { R1512 += 1, R1484 += 1, R1460 += 1 };
  s2 -> s1 [0, 58] { R1512 += 1, R1484 += 1, R1460 += 1 };
  s2 -> s2 [0, 65535] { R1512 += 1, R1483 += 1, R1484 += 1 };
  s2 -> s3 [0, 65535] { R1512 += 1, R1484 += 1, R1459 += 1, R1460 += 1 };
  s2 -> s4 [59, 59] { R1512 += 1, R1484 += 1, R1460 += 1 };
  s2 -> s1 [60, 65535] { R1512 += 1, R1484 += 1, R1460 += 1 };
  s3 -> s1 [0, 58] { R1512 += 1, R1484 += 1, R1460 += 1 };
  s3 -> s3 [0, 65535] { R1512 += 1, R1484 += 1, R1459 += 1, R1460 += 1 };
  s3 -> s4 [59, 59] { R1512 += 1, R1484 += 1, R1460 += 1 };
  s3 -> s1 [60, 65535] { R1512 += 1, R1484 += 1, R1460 += 1 };
  s4 -> s5 [0, 65535] { R1512 += 1, R1484 += 1 };
  s4 -> s4 [0, 65535] { R1512 += 1, R1484 += 1, R1460 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R1512 += 1 };
  s5 -> s5 [0, 65535] { R1512 += 1, R1484 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R1512 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R1512 += 1 };
  accepting s4, s5, s6, s7;
};
automaton url_17 {
  init s0;
  s0 -> s1 [0, 65535] { R1514 += 1, R1486 += 1, R1461 += 1, R1462 += 1 };
  s0 -> s0 [0, 65535] { R1513 += 1, R1514 += 1 };
  s0 -> s2 [0, 65535] { R1514 += 1, R1485 += 1, R1486 += 1 };
  s0 -> s3 [0, 65535] { R1514 += 1, R1486 += 1, R1462 += 1, R1455 += 1 };
  s1 -> s1 [0, 65535] { R1514 += 1, R1486 += 1, R1461 += 1, R1462 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R1514 += 1 };
  s1 -> s3 [0, 65535] { R1514 += 1, R1486 += 1, R1462 += 1, R1455 += 1 };
  s2 -> s1 [0, 65535] { R1514 += 1, R1486 += 1, R1461 += 1, R1462 += 1 };
  s2 -> s2 [0, 65535] { R1514 += 1, R1485 += 1, R1486 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R1514 += 1, R1486 += 1, R1462 += 1, R1455 += 1 };
  s3 -> s4 [0, 65535] { R1514 += 1, R1486 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R1514 += 1 };
  s3 -> s3 [0, 65535] { R1514 += 1, R1486 += 1, R1462 += 1, R1455 += 1 };
  s4 -> s4 [0, 65535] { R1514 += 1, R1486 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R1514 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1514 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R0 - R1460 = 1 && R1 = R1486 && R2 = R1514 && R4 = 0 && R5 = R1460 && R1015 = 2 && R1267 = 2 && R1268 = R1485 && R1393 = 0 && R1394 - R1513 = -1 && R1459 = 0 && R1467 = 0 && R1468 = 2 && R1469 = 0 && R1470 = 2 && R1471 = 0 && R1472 - R1513 = -1 && R1473 = 0 && R1474 - R1513 = -1 && R1475 = R1485 && R1476 = R1486 && R1477 = R1485 && R1478 = R1486 && R1479 = R1485 && R1480 = R1486 && R1481 = R1485 && R1482 = R1486 && R1483 = R1485 && R1484 = R1486 && R1487 = R1513 && R1488 = R1514 && R1489 = R1513 && R1490 = R1514 && R1491 = R1513 && R1492 = R1514 && R1493 = R1513 && R1494 = R1514 && R1495 = R1513 && R1496 = R1514 && R1497 = R1513 && R1498 = R1514 && R1499 = R1513 && R1500 = R1514 && R1501 = R1513 && R1502 = R1514 && R1503 = R1513 && R1504 = R1514 && R1505 = R1513 && R1506 = R1514 && R1507 = R1513 && R1508 = R1514 && R1509 = R1513 && R1510 = R1514 && R1511 = R1513 && R1512 = R1514 && R1011 < 3 && R1485 - R1016 < 1 && -1 < R1460 && R1485 < R1486 && 1 < R1485 && R1513 - R1514 < 1 && 1 < R1513 && (R1461 != 0 || R1460 = R1462 || (R1455 = 0 && R1460 = 0)) && (R1463 != 2 || R1464 = R1485 || (R1456 = 0 && R1485 = 2)) && (R1465 != 2 || R1466 = R1485 || (R1456 = 0 && R1485 = 2)) && (R1461 = 0 || (R1455 = 0 && R1460 = 0)) && (R1463 = 2 || (R1456 = 0 && R1485 = 2)) && (R1465 = 2 || (R1456 = 0 && R1485 = 2));
// End of Parikh automata intersection problem
