// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R12, R13, R2, R45, R46, R47, R48, R49, R5, R50, R51, R52, R53, R54, R55, R56, R57, R58, R59, R60, R61, R62, R63, R64, R65, R66, R67, R68, R69, R70, R71, R72, R73, R74, R75, R8;
synchronised {  // Automata constraining url
automaton url_0 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton url_1 {
  init s0;
  s0 -> s1 [0, 57] { R13 += 1 };
  s0 -> s0 [0, 65535] { R12 += 1, R13 += 1 };
  s0 -> s2 [58, 58];
  s0 -> s1 [59, 65535] { R13 += 1 };
  s1 -> s1 [0, 57] { R13 += 1 };
  s1 -> s2 [58, 58];
  s1 -> s1 [59, 65535] { R13 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton url_2 {
  init s0;
  s0 -> s0 [0, 65535] { R56 += 1, R57 += 1 };
  s0 -> s1 [104, 104] { R57 += 1 };
  s1 -> s2 [116, 116] { R57 += 1 };
  s2 -> s3 [116, 116] { R57 += 1 };
  s3 -> s4 [112, 112] { R57 += 1 };
  s4 -> s4 [0, 65535];
  accepting s4;
};
automaton url_3 {
  init s0;
  s0 -> s0 [0, 65535] { R58 += 1, R59 += 1 };
  s0 -> s1 [0, 65535] { R59 += 1, R47 += 1 };
  s1 -> s1 [0, 65535] { R59 += 1, R47 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton url_4 {
  init s0;
  s0 -> s1 [0, 65535] { R61 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R60 += 1, R61 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R61 += 1, R0 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton url_5 {
  init s0;
  s0 -> s1 [0, 34] { R63 += 1 };
  s0 -> s0 [0, 65535] { R62 += 1, R63 += 1 };
  s0 -> s2 [0, 65535] { R63 += 1, R2 += 1 };
  s0 -> s3 [35, 35] { R63 += 1 };
  s0 -> s1 [36, 65535] { R63 += 1 };
  s1 -> s1 [0, 34] { R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [35, 35] { R63 += 1 };
  s1 -> s1 [36, 65535] { R63 += 1 };
  s2 -> s1 [0, 34] { R63 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R63 += 1, R2 += 1 };
  s2 -> s3 [35, 35] { R63 += 1 };
  s2 -> s1 [36, 65535] { R63 += 1 };
  s3 -> s3 [0, 65535] { R63 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton url_6 {
  init s0;
  s0 -> s1 [0, 62] { R65 += 1 };
  s0 -> s0 [0, 65535] { R64 += 1, R65 += 1 };
  s0 -> s2 [0, 65535] { R65 += 1, R5 += 1 };
  s0 -> s3 [63, 63] { R65 += 1 };
  s0 -> s1 [64, 65535] { R65 += 1 };
  s1 -> s1 [0, 62] { R65 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [63, 63] { R65 += 1 };
  s1 -> s1 [64, 65535] { R65 += 1 };
  s2 -> s1 [0, 62] { R65 += 1 };
  s2 -> s2 [0, 65535] { R65 += 1, R5 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [63, 63] { R65 += 1 };
  s2 -> s1 [64, 65535] { R65 += 1 };
  s3 -> s3 [0, 65535] { R65 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton url_7 {
  init s0;
  s0 -> s1 [0, 46] { R67 += 1 };
  s0 -> s0 [0, 65535] { R66 += 1, R67 += 1 };
  s0 -> s2 [0, 65535] { R67 += 1, R8 += 1 };
  s0 -> s3 [47, 47] { R67 += 1 };
  s0 -> s1 [48, 65535] { R67 += 1 };
  s1 -> s1 [0, 46] { R67 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [47, 47] { R67 += 1 };
  s1 -> s1 [48, 65535] { R67 += 1 };
  s2 -> s1 [0, 46] { R67 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R67 += 1, R8 += 1 };
  s2 -> s3 [47, 47] { R67 += 1 };
  s2 -> s1 [48, 65535] { R67 += 1 };
  s3 -> s3 [0, 65535] { R67 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton url_8 {
  init s0;
  s0 -> s1 [0, 90] { R69 += 1, R49 += 1 };
  s0 -> s0 [0, 65535] { R68 += 1, R69 += 1 };
  s0 -> s2 [0, 65535] { R69 += 1, R48 += 1, R49 += 1 };
  s0 -> s1 [92, 92] { R69 += 1, R49 += 1 };
  s0 -> s3 [93, 93] { R69 += 1, R49 += 1 };
  s0 -> s1 [94, 65535] { R69 += 1, R49 += 1 };
  s1 -> s1 [0, 90] { R69 += 1, R49 += 1 };
  s1 -> s1 [92, 92] { R69 += 1, R49 += 1 };
  s1 -> s3 [93, 93] { R69 += 1, R49 += 1 };
  s1 -> s1 [94, 65535] { R69 += 1, R49 += 1 };
  s2 -> s1 [0, 90] { R69 += 1, R49 += 1 };
  s2 -> s2 [0, 65535] { R69 += 1, R48 += 1, R49 += 1 };
  s2 -> s1 [92, 92] { R69 += 1, R49 += 1 };
  s2 -> s3 [93, 93] { R69 += 1, R49 += 1 };
  s2 -> s1 [94, 65535] { R69 += 1, R49 += 1 };
  s3 -> s3 [0, 90] { R69 += 1, R49 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R69 += 1 };
  s3 -> s3 [92, 65535] { R69 += 1, R49 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton url_9 {
  init s0;
  s0 -> s1 [0, 65535] { R71 += 1, R51 += 1, R45 += 1 };
  s0 -> s2 [0, 65535] { R71 += 1, R50 += 1, R51 += 1 };
  s0 -> s0 [0, 65535] { R70 += 1, R71 += 1 };
  s1 -> s1 [0, 65535] { R71 += 1, R51 += 1, R45 += 1 };
  s1 -> s4 [0, 65535] { R71 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R71 += 1, R51 += 1, R45 += 1 };
  s2 -> s2 [0, 65535] { R71 += 1, R50 += 1, R51 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R71 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton url_10 {
  init s0;
  s0 -> s1 [0, 65535] { R73 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R72 += 1, R73 += 1 };
  s0 -> s2 [47, 47] { R73 += 1, R53 += 1 };
  s1 -> s1 [0, 65535] { R73 += 1, R52 += 1, R53 += 1 };
  s1 -> s2 [47, 47] { R73 += 1, R53 += 1 };
  s2 -> s3 [47, 47] { R73 += 1, R53 += 1 };
  s3 -> s3 [0, 65535] { R73 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton url_11 {
  init s0;
  s0 -> s1 [0, 65535] { R75 += 1, R54 += 1, R55 += 1 };
  s0 -> s0 [0, 65535] { R74 += 1, R75 += 1 };
  s0 -> s2 [0, 65535] { R75 += 1, R55 += 1, R46 += 1 };
  s1 -> s1 [0, 65535] { R75 += 1, R54 += 1, R55 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R75 += 1, R55 += 1, R46 += 1 };
  s2 -> s3 [0, 65535] { R75 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R75 += 1, R55 += 1, R46 += 1 };
  s3 -> s3 [0, 65535] { R75 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
};
constraint R0 = R49 && R1 = R75 && R12 = 0 && R13 - R74 = -1 && R48 = 2 && R52 = 0 && R53 = 2 && R54 = 0 && R55 = 2 && R56 = 0 && R57 - R74 = -1 && R58 = 0 && R59 - R74 = -1 && R60 = R74 && R61 = R75 && R62 = R74 && R63 = R75 && R64 = R74 && R65 = R75 && R66 = R74 && R67 = R75 && R68 = R74 && R69 = R75 && R70 = R74 && R71 = R75 && R72 = R74 && R73 = R75 && R2 < 3 && R5 < 3 && R8 < 3 && 1 < R49 && R74 - R75 < 1 && 1 < R74 && (R49 != R51 || R50 = 2 || (R51 < 3 && (R51 != 2 || R45 = 0))) && (R49 = R51 || (R45 = 0 && R49 = 2));
// End of Parikh automata intersection problem
