// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R141, R142, R163, R164, R165, R166, R167, R168, R169, R170, R171, R172, R173, R174, R175, R176, R177, R178, R179, R180, R181, R182, R3, R4, R95, R96;
synchronised {  // Automata constraining url
automaton url_0 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton url_1 {
  init s0;
  s0 -> s1 [0, 57] { R142 += 1 };
  s0 -> s0 [0, 65535] { R141 += 1, R142 += 1 };
  s0 -> s2 [58, 58];
  s0 -> s1 [59, 65535] { R142 += 1 };
  s1 -> s1 [0, 57] { R142 += 1 };
  s1 -> s2 [58, 58];
  s1 -> s1 [59, 65535] { R142 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton url_2 {
  init s0;
  s0 -> s0 [0, 65535] { R169 += 1, R170 += 1 };
  s0 -> s1 [104, 104] { R170 += 1 };
  s1 -> s2 [116, 116] { R170 += 1 };
  s2 -> s3 [116, 116] { R170 += 1 };
  s3 -> s4 [112, 112] { R170 += 1 };
  s4 -> s4 [0, 65535];
  accepting s4;
};
automaton url_3 {
  init s0;
  s0 -> s0 [0, 65535] { R171 += 1, R172 += 1 };
  s0 -> s1 [0, 65535] { R172 += 1, R164 += 1 };
  s1 -> s1 [0, 65535] { R172 += 1, R164 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton url_4 {
  init s0;
  s0 -> s1 [0, 65535] { R174 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R173 += 1, R174 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R174 += 1, R0 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton url_5 {
  init s0;
  s0 -> s1 [0, 62] { R176 += 1, R4 += 1 };
  s0 -> s2 [0, 65535] { R176 += 1, R3 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R175 += 1, R176 += 1 };
  s0 -> s3 [63, 63] { R176 += 1 };
  s0 -> s1 [64, 65535] { R176 += 1, R4 += 1 };
  s1 -> s1 [0, 62] { R176 += 1, R4 += 1 };
  s1 -> s3 [63, 63] { R176 += 1 };
  s1 -> s1 [64, 65535] { R176 += 1, R4 += 1 };
  s2 -> s1 [0, 62] { R176 += 1, R4 += 1 };
  s2 -> s2 [0, 65535] { R176 += 1, R3 += 1, R4 += 1 };
  s2 -> s3 [63, 63] { R176 += 1 };
  s2 -> s1 [64, 65535] { R176 += 1, R4 += 1 };
  s3 -> s3 [0, 65535] { R176 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton url_6 {
  init s0;
  s0 -> s1 [0, 46] { R178 += 1, R96 += 1 };
  s0 -> s2 [0, 65535] { R178 += 1, R95 += 1, R96 += 1 };
  s0 -> s0 [0, 65535] { R177 += 1, R178 += 1 };
  s0 -> s3 [47, 47] { R178 += 1 };
  s0 -> s1 [48, 65535] { R178 += 1, R96 += 1 };
  s1 -> s1 [0, 46] { R178 += 1, R96 += 1 };
  s1 -> s3 [47, 47] { R178 += 1 };
  s1 -> s1 [48, 65535] { R178 += 1, R96 += 1 };
  s2 -> s1 [0, 46] { R178 += 1, R96 += 1 };
  s2 -> s2 [0, 65535] { R178 += 1, R95 += 1, R96 += 1 };
  s2 -> s3 [47, 47] { R178 += 1 };
  s2 -> s1 [48, 65535] { R178 += 1, R96 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R178 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton url_7 {
  init s0;
  s0 -> s1 [0, 65535] { R180 += 1, R165 += 1, R166 += 1 };
  s0 -> s0 [0, 65535] { R179 += 1, R180 += 1 };
  s0 -> s2 [47, 47] { R180 += 1, R166 += 1 };
  s1 -> s1 [0, 65535] { R180 += 1, R165 += 1, R166 += 1 };
  s1 -> s2 [47, 47] { R180 += 1, R166 += 1 };
  s2 -> s3 [47, 47] { R180 += 1, R166 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R180 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton url_8 {
  init s0;
  s0 -> s1 [0, 65535] { R182 += 1, R168 += 1, R163 += 1 };
  s0 -> s2 [0, 65535] { R182 += 1, R167 += 1, R168 += 1 };
  s0 -> s0 [0, 65535] { R181 += 1, R182 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R182 += 1, R168 += 1, R163 += 1 };
  s1 -> s4 [0, 65535] { R182 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R182 += 1, R168 += 1, R163 += 1 };
  s2 -> s2 [0, 65535] { R182 += 1, R167 += 1, R168 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R182 += 1 };
  accepting s3, s4, s2, s1, s0;
};
};
constraint R1 = R182 && R3 = 2 && R95 = 2 && R141 = 0 && R142 - R181 = -1 && R165 = 0 && R166 = 2 && R167 = 0 && R168 = 2 && R169 = 0 && R170 - R181 = -1 && R171 = 0 && R172 - R181 = -1 && R173 = R181 && R174 = R182 && R175 = R181 && R176 = R182 && R177 = R181 && R178 = R182 && R179 = R181 && R180 = R182 && R96 < R0 && R4 < R96 && -1 < R4 && R181 - R182 < 1 && 1 < R181;
// End of Parikh automata intersection problem
