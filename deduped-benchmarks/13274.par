// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R101, R102, R124, R125, R126, R127, R128, R129, R130, R131, R132, R133, R134, R135, R136, R137, R138, R139, R140, R141, R142, R143, R144, R2, R3, R97;
synchronised {  // Automata constraining url
automaton url_0 {
  init s0;
  s0 -> s0 [0, 65535] { R0 += 1 };
  accepting s0;
};
automaton url_1 {
  init s0;
  s0 -> s1 [0, 57] { R102 += 1 };
  s0 -> s0 [0, 65535] { R101 += 1, R102 += 1 };
  s0 -> s2 [58, 58];
  s0 -> s1 [59, 65535] { R102 += 1 };
  s1 -> s1 [0, 57] { R102 += 1 };
  s1 -> s2 [58, 58];
  s1 -> s1 [59, 65535] { R102 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton url_2 {
  init s0;
  s0 -> s0 [0, 65535] { R131 += 1, R132 += 1 };
  s0 -> s1 [104, 104] { R132 += 1 };
  s1 -> s2 [116, 116] { R132 += 1 };
  s2 -> s3 [116, 116] { R132 += 1 };
  s3 -> s4 [112, 112] { R132 += 1 };
  s4 -> s4 [0, 65535];
  accepting s4;
};
automaton url_3 {
  init s0;
  s0 -> s0 [0, 65535] { R133 += 1, R134 += 1 };
  s0 -> s1 [0, 65535] { R134 += 1, R126 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R134 += 1, R126 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton url_4 {
  init s0;
  s0 -> s1 [0, 62] { R136 += 1, R3 += 1 };
  s0 -> s2 [0, 65535] { R136 += 1, R2 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R135 += 1, R136 += 1 };
  s0 -> s3 [63, 63] { R136 += 1 };
  s0 -> s1 [64, 65535] { R136 += 1, R3 += 1 };
  s1 -> s1 [0, 62] { R136 += 1, R3 += 1 };
  s1 -> s3 [63, 63] { R136 += 1 };
  s1 -> s1 [64, 65535] { R136 += 1, R3 += 1 };
  s2 -> s1 [0, 62] { R136 += 1, R3 += 1 };
  s2 -> s2 [0, 65535] { R136 += 1, R2 += 1, R3 += 1 };
  s2 -> s3 [63, 63] { R136 += 1 };
  s2 -> s1 [64, 65535] { R136 += 1, R3 += 1 };
  s3 -> s3 [0, 65535] { R136 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton url_5 {
  init s0;
  s0 -> s1 [0, 46] { R138 += 1 };
  s0 -> s2 [0, 65535] { R138 += 1, R97 += 1 };
  s0 -> s0 [0, 65535] { R137 += 1, R138 += 1 };
  s0 -> s3 [47, 47] { R138 += 1 };
  s0 -> s1 [48, 65535] { R138 += 1 };
  s1 -> s1 [0, 46] { R138 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [47, 47] { R138 += 1 };
  s1 -> s1 [48, 65535] { R138 += 1 };
  s2 -> s1 [0, 46] { R138 += 1 };
  s2 -> s2 [0, 65535] { R138 += 1, R97 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [47, 47] { R138 += 1 };
  s2 -> s1 [48, 65535] { R138 += 1 };
  s3 -> s3 [0, 65535] { R138 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton url_6 {
  init s0;
  s0 -> s0 [0, 65535] { R139 += 1, R140 += 1 };
  s0 -> s1 [0, 65535] { R140 += 1, R124 += 1 };
  s1 -> s1 [0, 65535] { R140 += 1, R124 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton url_7 {
  init s0;
  s0 -> s1 [0, 65535] { R142 += 1, R127 += 1, R128 += 1 };
  s0 -> s0 [0, 65535] { R141 += 1, R142 += 1 };
  s0 -> s2 [47, 47] { R142 += 1, R128 += 1 };
  s1 -> s1 [0, 65535] { R142 += 1, R127 += 1, R128 += 1 };
  s1 -> s2 [47, 47] { R142 += 1, R128 += 1 };
  s2 -> s3 [47, 47] { R142 += 1, R128 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R142 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton url_8 {
  init s0;
  s0 -> s1 [0, 65535] { R144 += 1, R130 += 1, R125 += 1 };
  s0 -> s2 [0, 65535] { R144 += 1, R129 += 1, R130 += 1 };
  s0 -> s0 [0, 65535] { R143 += 1, R144 += 1 };
  s1 -> s1 [0, 65535] { R144 += 1, R130 += 1, R125 += 1 };
  s1 -> s4 [0, 65535] { R144 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R144 += 1, R130 += 1, R125 += 1 };
  s2 -> s2 [0, 65535] { R144 += 1, R129 += 1, R130 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R144 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
};
constraint R0 = R142 && R2 = 2 && R101 = 0 && R102 - R141 = -1 && R127 = 0 && R131 = 0 && R132 - R141 = -1 && R133 = 0 && R134 - R141 = -1 && R135 = R141 && R136 = R142 && -1 < R3 && R97 < 3 && R128 < 3 && R141 - R142 < 1 && 1 < R141 && (R128 != 2 || 1 < R124) && (R129 != 0 || ((R125 != 0 || ((R124 != R130 || R130 < 3) && (R124 != 1 || R130 != 2) && (R124 = R130 || R130 = 2 || R124 < 1))) && (R125 = 0 || (R130 < 3 && (R130 != 2 || 1 < R124) && (R124 = R130 || 1 < R130))))) && (R137 != R141 || R138 = R142 || (R124 = 0 && R141 = R142)) && (R139 != R141 || R140 = R142 || (R124 = 0 && R141 = R142)) && (R141 != R143 || R142 = R144 || ((R124 != 0 || R142 - R143 < 1 || R143 < 2) && (R124 = 0 || R142 < R143 || R143 < 2))) && (R124 = R128 || 1 < R128) && (R129 = 0 || (R125 = 0 && R124 < 1)) && (R137 = R141 || (R124 = 0 && R141 = R142)) && (R139 = R141 || (R124 = 0 && R141 = R142)) && (R141 = R143 || (R124 = 0 && R141 = R142));
// End of Parikh automata intersection problem
