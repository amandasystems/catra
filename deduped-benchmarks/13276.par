// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R2, R52, R53, R6, R7, R74, R75, R76, R77, R78, R79, R80, R81, R82, R83, R84, R85, R86, R87, R88, R89, R90, R91, R92, R93;
synchronised {  // Automata constraining url
automaton url_0 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton url_1 {
  init s0;
  s0 -> s1 [0, 57] { R53 += 1 };
  s0 -> s0 [0, 65535] { R52 += 1, R53 += 1 };
  s0 -> s2 [58, 58];
  s0 -> s1 [59, 65535] { R53 += 1 };
  s1 -> s1 [0, 57] { R53 += 1 };
  s1 -> s2 [58, 58];
  s1 -> s1 [59, 65535] { R53 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton url_2 {
  init s0;
  s0 -> s0 [0, 65535] { R80 += 1, R81 += 1 };
  s0 -> s1 [104, 104] { R81 += 1 };
  s1 -> s2 [116, 116] { R81 += 1 };
  s2 -> s3 [116, 116] { R81 += 1 };
  s3 -> s4 [112, 112] { R81 += 1 };
  s4 -> s4 [0, 65535];
  accepting s4;
};
automaton url_3 {
  init s0;
  s0 -> s0 [0, 65535] { R82 += 1, R83 += 1 };
  s0 -> s1 [0, 65535] { R83 += 1, R75 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R83 += 1, R75 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton url_4 {
  init s0;
  s0 -> s0 [0, 65535] { R84 += 1, R85 += 1 };
  s0 -> s1 [0, 65535] { R85 += 1, R0 += 1 };
  s1 -> s1 [0, 65535] { R85 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton url_5 {
  init s0;
  s0 -> s1 [0, 62] { R87 += 1 };
  s0 -> s0 [0, 65535] { R86 += 1, R87 += 1 };
  s0 -> s2 [0, 65535] { R87 += 1, R2 += 1 };
  s0 -> s3 [63, 63] { R87 += 1 };
  s0 -> s1 [64, 65535] { R87 += 1 };
  s1 -> s1 [0, 62] { R87 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [63, 63] { R87 += 1 };
  s1 -> s1 [64, 65535] { R87 += 1 };
  s2 -> s1 [0, 62] { R87 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R87 += 1, R2 += 1 };
  s2 -> s3 [63, 63] { R87 += 1 };
  s2 -> s1 [64, 65535] { R87 += 1 };
  s3 -> s3 [0, 65535] { R87 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton url_6 {
  init s0;
  s0 -> s1 [0, 46] { R89 += 1, R7 += 1 };
  s0 -> s2 [0, 65535] { R89 += 1, R6 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R88 += 1, R89 += 1 };
  s0 -> s3 [47, 47] { R89 += 1 };
  s0 -> s1 [48, 65535] { R89 += 1, R7 += 1 };
  s1 -> s1 [0, 46] { R89 += 1, R7 += 1 };
  s1 -> s3 [47, 47] { R89 += 1 };
  s1 -> s1 [48, 65535] { R89 += 1, R7 += 1 };
  s2 -> s1 [0, 46] { R89 += 1, R7 += 1 };
  s2 -> s2 [0, 65535] { R89 += 1, R6 += 1, R7 += 1 };
  s2 -> s3 [47, 47] { R89 += 1 };
  s2 -> s1 [48, 65535] { R89 += 1, R7 += 1 };
  s3 -> s3 [0, 65535] { R89 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton url_7 {
  init s0;
  s0 -> s0 [0, 65535] { R90 += 1, R91 += 1 };
  s0 -> s1 [0, 65535] { R91 += 1, R76 += 1, R77 += 1 };
  s0 -> s2 [47, 47] { R91 += 1, R77 += 1 };
  s1 -> s1 [0, 65535] { R91 += 1, R76 += 1, R77 += 1 };
  s1 -> s2 [47, 47] { R91 += 1, R77 += 1 };
  s2 -> s3 [47, 47] { R91 += 1, R77 += 1 };
  s3 -> s3 [0, 65535] { R91 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton url_8 {
  init s0;
  s0 -> s1 [0, 65535] { R93 += 1, R79 += 1, R74 += 1 };
  s0 -> s2 [0, 65535] { R93 += 1, R78 += 1, R79 += 1 };
  s0 -> s0 [0, 65535] { R92 += 1, R93 += 1 };
  s1 -> s1 [0, 65535] { R93 += 1, R79 += 1, R74 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R93 += 1 };
  s2 -> s1 [0, 65535] { R93 += 1, R79 += 1, R74 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R93 += 1, R78 += 1, R79 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R93 += 1 };
  accepting s3, s4, s2, s1, s0;
};
};
constraint R1 = R93 && R6 = 2 && R52 = 0 && R53 - R92 = -1 && R76 = 0 && R78 = 0 && R80 = 0 && R81 - R92 = -1 && R82 = 0 && R83 - R92 = -1 && R84 = R92 && R85 = R93 && R86 = R92 && R87 = R93 && R88 = R92 && R89 = R93 && R90 = R92 && R91 = R93 && R7 < R0 && R2 < 3 && -1 < R7 && R92 - R93 < 1 && 1 < R92 && (R0 != 1 || R7 != 0 || R77 != 2) && (R0 != 1 || R7 != 0 || R79 != 2) && (R0 != 1 || R7 != 0 || R77 = 2 || R77 = 1) && (R0 != 1 || R7 != 0 || R79 = 2 || R79 = 1) && (R77 = 2 || R0 < 2) && (R79 = 2 || R0 < 2);
// End of Parikh automata intersection problem
