// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R3, R4, R5, R6, R7, R8;
synchronised {  // Automata constraining url
automaton url_0 {
  init s0;
  s0 -> s0 [0, 34];
  s0 -> s0 [36, 58];
  s0 -> s1 [59, 59];
  s0 -> s0 [60, 62];
  s0 -> s0 [64, 65535];
  s1 -> s1 [0, 34];
  s1 -> s1 [36, 62];
  s1 -> s1 [64, 65535];
  accepting s1;
};
automaton url_1 {
  init s0;
  s0 -> s1 [0, 57];
  s0 -> s0 [0, 65535] { R0 += 1 };
  s0 -> s2 [58, 58];
  s0 -> s1 [59, 65535];
  s1 -> s1 [0, 57];
  s1 -> s2 [58, 58];
  s1 -> s1 [59, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton url_2 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton url_3 {
  init s0;
  s0 -> s1 [0, 46] { R6 += 1 };
  s0 -> s0 [0, 65535] { R5 += 1, R6 += 1 };
  s0 -> s2 [47, 47] { R6 += 1 };
  s0 -> s1 [48, 65535] { R6 += 1 };
  s1 -> s1 [0, 65535] { R6 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 46] { R6 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s3 [47, 47] { R6 += 1 };
  s2 -> s1 [48, 65535] { R6 += 1 };
  s3 -> s1 [0, 65535] { R6 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton url_4 {
  init s0;
  s0 -> s1 [0, 65535] { R8 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R7 += 1, R8 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R8 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
};
constraint R0 < 1 && (R4 != 0 || ((R5 != 0 || ((R7 != 0 || ((R3 != R6 || R6 < 3) && (R3 != R8 || R8 < 3) && (R3 != 1 || R6 != 2) && (R3 != 1 || R8 != 2) && (R3 = R6 || R6 = 2 || R3 < 1) && (R3 = R8 || R8 = 2 || R3 < 1))) && (R7 = 0 || R3 < 1))) && (R5 = 0 || R3 < 1))) && (R4 = 0 || (R5 = 0 && R7 = 0 && R6 < 3 && R8 < 3 && (R6 != 2 || 1 < R3) && (R8 != 2 || 1 < R3) && (R3 = R6 || 1 < R6) && (R3 = R8 || 1 < R8)));
// End of Parikh automata intersection problem
