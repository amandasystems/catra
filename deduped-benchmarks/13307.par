// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R12, R13, R14, R15, R16, R17, R18, R3, R4;
synchronised {  // Automata constraining url
automaton url_0 {
  init s0;
  s0 -> s0 [0, 57];
  s0 -> s1 [58, 58];
  s0 -> s0 [59, 65535];
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton url_1 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton url_2 {
  init s0;
  s0 -> s1 [0, 57] { R4 += 1 };
  s0 -> s0 [0, 65535] { R3 += 1, R4 += 1 };
  s0 -> s2 [58, 58];
  s0 -> s1 [59, 65535] { R4 += 1 };
  s1 -> s1 [0, 57] { R4 += 1 };
  s1 -> s2 [58, 58];
  s1 -> s1 [59, 65535] { R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton url_3 {
  init s0;
  s0 -> s0 [0, 65535] { R13 += 1, R14 += 1 };
  s0 -> s1 [0, 65535] { R14 += 1, R0 += 1 };
  s1 -> s1 [0, 65535] { R14 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton url_4 {
  init s0;
  s0 -> s1 [0, 64] { R16 += 1 };
  s0 -> s0 [0, 65535] { R15 += 1, R16 += 1 };
  s0 -> s1 [91, 103] { R16 += 1 };
  s0 -> s2 [104, 104] { R16 += 1 };
  s0 -> s1 [105, 65535] { R16 += 1 };
  s1 -> s1 [0, 64] { R16 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [91, 65535] { R16 += 1 };
  s2 -> s1 [0, 64] { R16 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s1 [91, 115] { R16 += 1 };
  s2 -> s3 [116, 116] { R16 += 1 };
  s2 -> s1 [117, 65535] { R16 += 1 };
  s3 -> s1 [0, 64] { R16 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s1 [91, 115] { R16 += 1 };
  s3 -> s4 [116, 116] { R16 += 1 };
  s3 -> s1 [117, 65535] { R16 += 1 };
  s4 -> s1 [0, 64] { R16 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s1 [91, 111] { R16 += 1 };
  s4 -> s5 [112, 112] { R16 += 1 };
  s4 -> s1 [113, 65535] { R16 += 1 };
  s5 -> s1 [0, 64] { R16 += 1 };
  s5 -> s1 [91, 65535] { R16 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton url_5 {
  init s0;
  s0 -> s0 [0, 65535] { R17 += 1, R18 += 1 };
  s0 -> s1 [0, 65535] { R18 += 1, R12 += 1 };
  s1 -> s1 [0, 65535] { R18 += 1, R12 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
};
constraint R1 = R14 && R3 = 0 && R4 - R13 = -1 && R0 != 0 && R13 - R14 < 1 && 0 < R13 && (R12 != 0 || ((R15 != 0 || ((R17 != 0 || ((R16 != R18 || R13 - R18 = 1 || R13 < 2) && (R16 = R18 || R13 < 2))) && (R17 = 0 || R13 < 2))) && (R15 = 0 || R13 < 2))) && (R12 = 0 || (R13 - R18 = 1 && R15 = 0 && R16 = R18 && R17 = 0));
// End of Parikh automata intersection problem
