// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R14, R15, R16, R17, R18, R19, R2, R20, R21, R4, R5;
synchronised {  // Automata constraining value
automaton value_0 {
  init s0;
  s0 -> s0 [0, 31];
  s0 -> s1 [32, 32];
  s0 -> s0 [33, 65535];
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value_1 {
  init s0;
  s0 -> s0 [0, 65535] { R0 += 1 };
  accepting s0;
};
automaton value_2 {
  init s0;
  s0 -> s1 [0, 31] { R5 += 1 };
  s0 -> s0 [0, 65535] { R4 += 1, R5 += 1 };
  s0 -> s2 [32, 32];
  s0 -> s1 [33, 65535] { R5 += 1 };
  s1 -> s1 [0, 31] { R5 += 1 };
  s1 -> s2 [32, 32];
  s1 -> s1 [33, 65535] { R5 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value_3 {
  init s0;
  s0 -> s1 [0, 8] { R15 += 1 };
  s0 -> s0 [0, 65535] { R14 += 1, R15 += 1 };
  s0 -> s2 [9, 13] { R15 += 1 };
  s0 -> s1 [14, 31] { R15 += 1 };
  s0 -> s2 [32, 32] { R15 += 1 };
  s0 -> s1 [33, 65535] { R15 += 1 };
  s1 -> s1 [0, 65535] { R15 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R15 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value_4 {
  init s0;
  s0 -> s1 [0, 65535] { R17 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R16 += 1, R17 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R17 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value_5 {
  init s0;
  s0 -> s1 [0, 8] { R19 += 1 };
  s0 -> s0 [0, 65535] { R18 += 1, R19 += 1 };
  s0 -> s2 [9, 13] { R19 += 1 };
  s0 -> s1 [14, 31] { R19 += 1 };
  s0 -> s2 [32, 32] { R19 += 1 };
  s0 -> s1 [33, 65535] { R19 += 1 };
  s1 -> s1 [0, 65535] { R19 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R19 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value_6 {
  init s0;
  s0 -> s1 [0, 65535] { R21 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s1 -> s1 [0, 65535] { R21 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value_7 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
};
constraint R0 = R17 && R4 = 0 && R5 - R17 = -1 && R14 - R17 = -1 && R15 = R17 && R16 - R17 = -1 && R18 = 0 && R19 = 1 && R20 = 0 && R21 = 1 && 0 < R17;
// End of Parikh automata intersection problem
