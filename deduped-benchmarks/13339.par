// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R140, R141, R2, R206, R207, R208, R209, R210, R211, R212, R213, R214, R215, R216, R217, R244, R245, R246, R247, R248, R249, R250, R251, R252, R253, R254, R255, R256, R257, R258, R259, R260, R261, R262, R263, R264, R265, R266, R267, R268, R269, R3, R4, R6, R7;
synchronised {  // Automata constraining value
automaton value_0 {
  init s0;
  s0 -> s0 [0, 31];
  s0 -> s1 [32, 32];
  s0 -> s0 [33, 65535];
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value_2 {
  init s0;
  s0 -> s1 [0, 31] { R141 += 1 };
  s0 -> s0 [0, 65535] { R140 += 1, R141 += 1 };
  s0 -> s2 [32, 32];
  s0 -> s1 [33, 65535] { R141 += 1 };
  s1 -> s1 [0, 31] { R141 += 1 };
  s1 -> s2 [32, 32];
  s1 -> s1 [33, 65535] { R141 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value_3 {
  init s0;
  s0 -> s1 [0, 8] { R209 += 1 };
  s0 -> s0 [0, 65535] { R208 += 1, R209 += 1 };
  s0 -> s2 [9, 13] { R209 += 1 };
  s0 -> s1 [14, 31] { R209 += 1 };
  s0 -> s2 [32, 32] { R209 += 1 };
  s0 -> s1 [33, 65535] { R209 += 1 };
  s1 -> s1 [0, 65535] { R209 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R209 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value_4 {
  init s0;
  s0 -> s1 [0, 65535] { R211 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R210 += 1, R211 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R211 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value_5 {
  init s0;
  s0 -> s1 [0, 8] { R213 += 1 };
  s0 -> s0 [0, 65535] { R212 += 1, R213 += 1 };
  s0 -> s2 [9, 13] { R213 += 1 };
  s0 -> s1 [14, 31] { R213 += 1 };
  s0 -> s2 [32, 32] { R213 += 1 };
  s0 -> s1 [33, 65535] { R213 += 1 };
  s1 -> s1 [0, 65535] { R213 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R213 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value_6 {
  init s0;
  s0 -> s1 [0, 65535] { R215 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R214 += 1, R215 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R215 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value_7 {
  init s0;
  s0 -> s0 [0, 65535] { R216 += 1, R217 += 1 };
  s0 -> s1 [0, 65535] { R217 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R217 += 1, R0 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value_8 {
  init s0;
  s0 -> s1 [0, 64] { R255 += 1 };
  s0 -> s0 [0, 65535] { R254 += 1, R255 += 1 };
  s0 -> s2 [84, 84] { R255 += 1 };
  s0 -> s1 [85, 65535] { R255 += 1 };
  s1 -> s1 [0, 64] { R255 += 1 };
  s1 -> s2 [84, 84] { R255 += 1 };
  s1 -> s1 [85, 65535] { R255 += 1 };
  s2 -> s2 [0, 64] { R255 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [84, 65535] { R255 += 1 };
  accepting s2;
};
automaton value_9 {
  init s0;
  s0 -> s0 [0, 65535] { R256 += 1, R257 += 1 };
  s0 -> s1 [0, 65535] { R257 += 1, R1 += 1 };
  s1 -> s1 [0, 65535] { R257 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value_10 {
  init s0;
  s0 -> s1 [0, 83] { R259 += 1, R7 += 1 };
  s0 -> s2 [0, 65535] { R259 += 1, R6 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R258 += 1, R259 += 1 };
  s0 -> s3 [84, 84] { R259 += 1 };
  s0 -> s1 [85, 65535] { R259 += 1, R7 += 1 };
  s1 -> s1 [0, 83] { R259 += 1, R7 += 1 };
  s1 -> s3 [84, 84] { R259 += 1 };
  s1 -> s1 [85, 65535] { R259 += 1, R7 += 1 };
  s2 -> s1 [0, 83] { R259 += 1, R7 += 1 };
  s2 -> s2 [0, 65535] { R259 += 1, R6 += 1, R7 += 1 };
  s2 -> s3 [84, 84] { R259 += 1 };
  s2 -> s1 [85, 65535] { R259 += 1, R7 += 1 };
  s3 -> s3 [0, 65535] { R259 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton value_11 {
  init s0;
  s0 -> s1 [0, 83] { R261 += 1, R245 += 1 };
  s0 -> s0 [0, 65535] { R260 += 1, R261 += 1 };
  s0 -> s2 [0, 65535] { R261 += 1, R244 += 1, R245 += 1 };
  s0 -> s1 [85, 65535] { R261 += 1, R245 += 1 };
  s1 -> s1 [0, 83] { R261 += 1, R245 += 1 };
  s1 -> s1 [0, 65535] { R261 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [85, 65535] { R261 += 1, R245 += 1 };
  s2 -> s1 [0, 83] { R261 += 1, R245 += 1 };
  s2 -> s2 [0, 65535] { R261 += 1, R244 += 1, R245 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [85, 65535] { R261 += 1, R245 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value_12 {
  init s0;
  s0 -> s1 [0, 65535] { R263 += 1, R246 += 1, R247 += 1 };
  s0 -> s2 [0, 65535] { R263 += 1, R247 += 1, R206 += 1 };
  s0 -> s0 [0, 65535] { R262 += 1, R263 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R263 += 1, R246 += 1, R247 += 1 };
  s1 -> s2 [0, 65535] { R263 += 1, R247 += 1, R206 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R263 += 1 };
  s2 -> s2 [0, 65535] { R263 += 1, R247 += 1, R206 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R263 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value_13 {
  init s0;
  s0 -> s1 [0, 84] { R265 += 1, R249 += 1 };
  s0 -> s2 [0, 65535] { R265 += 1, R248 += 1, R249 += 1 };
  s0 -> s0 [0, 65535] { R264 += 1, R265 += 1 };
  s0 -> s1 [88, 65535] { R265 += 1, R249 += 1 };
  s1 -> s1 [0, 84] { R265 += 1, R249 += 1 };
  s1 -> s1 [0, 65535] { R265 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [88, 65535] { R265 += 1, R249 += 1 };
  s2 -> s1 [0, 84] { R265 += 1, R249 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R265 += 1, R248 += 1, R249 += 1 };
  s2 -> s1 [88, 65535] { R265 += 1, R249 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value_14 {
  init s0;
  s0 -> s1 [0, 65535] { R267 += 1, R251 += 1, R207 += 1 };
  s0 -> s0 [0, 65535] { R266 += 1, R267 += 1 };
  s0 -> s2 [0, 65535] { R267 += 1, R250 += 1, R251 += 1 };
  s1 -> s1 [0, 65535] { R267 += 1, R251 += 1, R207 += 1 };
  s1 -> s4 [0, 65535] { R267 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R267 += 1, R251 += 1, R207 += 1 };
  s2 -> s2 [0, 65535] { R267 += 1, R250 += 1, R251 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R267 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value_15 {
  init s0;
  s0 -> s1 [0, 83] { R269 += 1, R253 += 1 };
  s0 -> s0 [0, 65535] { R268 += 1, R269 += 1 };
  s0 -> s2 [0, 65535] { R269 += 1, R252 += 1, R253 += 1 };
  s0 -> s3 [84, 84] { R269 += 1, R253 += 1 };
  s0 -> s4 [84, 84] { R269 += 1, R253 += 1 };
  s0 -> s5 [88, 88] { R269 += 1, R253 += 1 };
  s0 -> s1 [89, 65535] { R269 += 1, R253 += 1 };
  s1 -> s1 [0, 83] { R269 += 1, R253 += 1 };
  s1 -> s3 [84, 84] { R269 += 1, R253 += 1 };
  s1 -> s4 [84, 84] { R269 += 1, R253 += 1 };
  s1 -> s5 [88, 88] { R269 += 1, R253 += 1 };
  s1 -> s1 [89, 65535] { R269 += 1, R253 += 1 };
  s2 -> s1 [0, 83] { R269 += 1, R253 += 1 };
  s2 -> s2 [0, 65535] { R269 += 1, R252 += 1, R253 += 1 };
  s2 -> s3 [84, 84] { R269 += 1, R253 += 1 };
  s2 -> s4 [84, 84] { R269 += 1, R253 += 1 };
  s2 -> s5 [88, 88] { R269 += 1, R253 += 1 };
  s2 -> s1 [89, 65535] { R269 += 1, R253 += 1 };
  s3 -> s3 [0, 84] { R269 += 1, R253 += 1 };
  s3 -> s7 [88, 88] { R269 += 1, R253 += 1 };
  s3 -> s3 [89, 65535] { R269 += 1, R253 += 1 };
  s5 -> s5 [0, 83] { R269 += 1, R253 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R269 += 1 };
  s5 -> s7 [84, 84] { R269 += 1, R253 += 1 };
  s5 -> s8 [84, 84] { R269 += 1, R253 += 1 };
  s5 -> s5 [88, 65535] { R269 += 1, R253 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 84] { R269 += 1, R253 += 1 };
  s7 -> s7 [0, 65535] { R269 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [88, 65535] { R269 += 1, R253 += 1 };
  s8 -> s8 [0, 65535] { R269 += 1 };
  s8 -> s6 [0, 65535];
  accepting s5, s6, s7, s8;
};
};
synchronised {  // Automata constraining c0
automaton c0_0 {
  init s0;
  s0 -> s1 [116, 116];
  accepting s1;
};
};
constraint R2 = R217 && R6 = 0 && R7 - R253 = -1 && R140 = 0 && R141 = R269 && R208 - R217 = -1 && R209 = R217 && R210 - R217 = -1 && R211 = R217 && R212 = 0 && R213 = 1 && R214 = 0 && R215 = 1 && R216 - R269 = 1 && R252 = 0 && R254 = 0 && R255 = R269 && R258 = 0 && R259 = R269 && R268 = 0 && R0 != 0 && R253 - R1 < 1 && R269 < R217 && -1 < R253 && -1 < R269 && (R206 != 0 || ((R1 != R245 || R244 = R253 || R245 - R253 < 1) && (R1 = R245 || R1 - R253 < 1))) && (R206 != 0 || ((R1 != R247 || R246 = R253 || R247 - R253 < 1) && (R1 = R247 || R1 - R253 < 1))) && (R206 != 0 || ((R1 != R249 || R248 = R253 || R249 - R253 < 1) && (R1 = R249 || R1 - R253 < 1))) && (R250 != 0 || R251 = R253 || (R207 = 0 && (R1 < 1 || R253 < 1))) && (R256 != 0 || R257 = R269 || (R1 = 0 && (R253 != 0 || R269 < 1))) && (R260 != 0 || R261 = R269 || (R1 = 0 && (R253 != 0 || R269 < 1))) && (R262 != 0 || R263 = R269 || (R1 = 0 && (R253 != 0 || R269 < 1))) && (R264 != 0 || R265 = R269 || (R1 = 0 && (R253 != 0 || R269 < 1))) && (R266 != 0 || R267 = R269 || (R1 = 0 && (R253 != 0 || R269 < 1))) && (R206 = 0 || (R1 = R245 && (R244 = R253 || R245 < R253))) && (R206 = 0 || (R1 = R247 && (R246 = R253 || R247 < R253))) && (R206 = 0 || (R1 = R249 && (R248 = R253 || R249 < R253))) && (R250 = 0 || (R207 = 0 && (R1 < 1 || R253 < 1))) && (R256 = 0 || (R1 = 0 && (R253 != 0 || R269 < 1))) && (R260 = 0 || (R1 = 0 && (R253 != 0 || R269 < 1))) && (R262 = 0 || (R1 = 0 && (R253 != 0 || R269 < 1))) && (R264 = 0 || (R1 = 0 && (R253 != 0 || R269 < 1))) && (R266 = 0 || (R1 = 0 && (R253 != 0 || R269 < 1)));
// End of Parikh automata intersection problem
