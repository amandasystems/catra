// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R140, R141, R2, R206, R207, R208, R209, R210, R211, R212, R213, R214, R215, R216, R217, R218, R219, R220, R221, R222, R223, R224, R225, R226, R227, R228, R229, R230, R231, R232, R233, R234, R235, R236, R237, R238, R239, R240, R241, R242, R243, R3, R4, R6, R7;
synchronised {  // Automata constraining value
automaton value_0 {
  init s0;
  s0 -> s0 [0, 31];
  s0 -> s1 [32, 32];
  s0 -> s0 [33, 65535];
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value_2 {
  init s0;
  s0 -> s1 [0, 31] { R141 += 1 };
  s0 -> s0 [0, 65535] { R140 += 1, R141 += 1 };
  s0 -> s2 [32, 32];
  s0 -> s1 [33, 65535] { R141 += 1 };
  s1 -> s1 [0, 31] { R141 += 1 };
  s1 -> s2 [32, 32];
  s1 -> s1 [33, 65535] { R141 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value_3 {
  init s0;
  s0 -> s1 [0, 8] { R209 += 1 };
  s0 -> s0 [0, 65535] { R208 += 1, R209 += 1 };
  s0 -> s2 [9, 13] { R209 += 1 };
  s0 -> s1 [14, 31] { R209 += 1 };
  s0 -> s2 [32, 32] { R209 += 1 };
  s0 -> s1 [33, 65535] { R209 += 1 };
  s1 -> s1 [0, 65535] { R209 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R209 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value_4 {
  init s0;
  s0 -> s1 [0, 65535] { R211 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R210 += 1, R211 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R211 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value_5 {
  init s0;
  s0 -> s1 [0, 8] { R213 += 1 };
  s0 -> s0 [0, 65535] { R212 += 1, R213 += 1 };
  s0 -> s2 [9, 13] { R213 += 1 };
  s0 -> s1 [14, 31] { R213 += 1 };
  s0 -> s2 [32, 32] { R213 += 1 };
  s0 -> s1 [33, 65535] { R213 += 1 };
  s1 -> s1 [0, 65535] { R213 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R213 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value_6 {
  init s0;
  s0 -> s1 [0, 65535] { R215 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R214 += 1, R215 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R215 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value_7 {
  init s0;
  s0 -> s0 [0, 65535] { R216 += 1, R217 += 1 };
  s0 -> s1 [0, 65535] { R217 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R217 += 1, R0 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value_8 {
  init s0;
  s0 -> s1 [0, 64] { R229 += 1 };
  s0 -> s0 [0, 65535] { R228 += 1, R229 += 1 };
  s0 -> s2 [84, 84] { R229 += 1 };
  s0 -> s1 [85, 65535] { R229 += 1 };
  s1 -> s1 [0, 64] { R229 += 1 };
  s1 -> s2 [84, 84] { R229 += 1 };
  s1 -> s1 [85, 65535] { R229 += 1 };
  s2 -> s2 [0, 64] { R229 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [84, 65535] { R229 += 1 };
  accepting s2;
};
automaton value_9 {
  init s0;
  s0 -> s0 [0, 65535] { R230 += 1, R231 += 1 };
  s0 -> s1 [0, 65535] { R231 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R231 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value_10 {
  init s0;
  s0 -> s1 [0, 83] { R233 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R232 += 1, R233 += 1 };
  s0 -> s2 [0, 65535] { R233 += 1, R6 += 1, R7 += 1 };
  s0 -> s3 [84, 84] { R233 += 1 };
  s0 -> s1 [85, 65535] { R233 += 1, R7 += 1 };
  s1 -> s1 [0, 83] { R233 += 1, R7 += 1 };
  s1 -> s3 [84, 84] { R233 += 1 };
  s1 -> s1 [85, 65535] { R233 += 1, R7 += 1 };
  s2 -> s1 [0, 83] { R233 += 1, R7 += 1 };
  s2 -> s2 [0, 65535] { R233 += 1, R6 += 1, R7 += 1 };
  s2 -> s3 [84, 84] { R233 += 1 };
  s2 -> s1 [85, 65535] { R233 += 1, R7 += 1 };
  s3 -> s3 [0, 65535] { R233 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton value_11 {
  init s0;
  s0 -> s1 [0, 83] { R235 += 1, R219 += 1 };
  s0 -> s0 [0, 65535] { R234 += 1, R235 += 1 };
  s0 -> s2 [0, 65535] { R235 += 1, R218 += 1, R219 += 1 };
  s0 -> s1 [85, 65535] { R235 += 1, R219 += 1 };
  s1 -> s1 [0, 83] { R235 += 1, R219 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R235 += 1 };
  s1 -> s1 [85, 65535] { R235 += 1, R219 += 1 };
  s2 -> s1 [0, 83] { R235 += 1, R219 += 1 };
  s2 -> s2 [0, 65535] { R235 += 1, R218 += 1, R219 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [85, 65535] { R235 += 1, R219 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value_12 {
  init s0;
  s0 -> s1 [0, 65535] { R237 += 1, R220 += 1, R221 += 1 };
  s0 -> s0 [0, 65535] { R236 += 1, R237 += 1 };
  s0 -> s2 [0, 65535] { R237 += 1, R221 += 1, R206 += 1 };
  s1 -> s1 [0, 65535] { R237 += 1, R220 += 1, R221 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R237 += 1, R221 += 1, R206 += 1 };
  s2 -> s3 [0, 65535] { R237 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R237 += 1, R221 += 1, R206 += 1 };
  s3 -> s3 [0, 65535] { R237 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value_13 {
  init s0;
  s0 -> s1 [0, 84] { R239 += 1, R223 += 1 };
  s0 -> s0 [0, 65535] { R238 += 1, R239 += 1 };
  s0 -> s2 [0, 65535] { R239 += 1, R222 += 1, R223 += 1 };
  s0 -> s3 [88, 88] { R239 += 1, R223 += 1 };
  s0 -> s1 [89, 65535] { R239 += 1, R223 += 1 };
  s1 -> s1 [0, 84] { R239 += 1, R223 += 1 };
  s1 -> s3 [88, 88] { R239 += 1, R223 += 1 };
  s1 -> s1 [89, 65535] { R239 += 1, R223 += 1 };
  s2 -> s1 [0, 84] { R239 += 1, R223 += 1 };
  s2 -> s2 [0, 65535] { R239 += 1, R222 += 1, R223 += 1 };
  s2 -> s3 [88, 88] { R239 += 1, R223 += 1 };
  s2 -> s1 [89, 65535] { R239 += 1, R223 += 1 };
  s3 -> s3 [0, 84] { R239 += 1, R223 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R239 += 1 };
  s3 -> s3 [88, 65535] { R239 += 1, R223 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton value_14 {
  init s0;
  s0 -> s1 [0, 65535] { R241 += 1, R224 += 1, R225 += 1 };
  s0 -> s2 [0, 65535] { R241 += 1, R225 += 1, R207 += 1 };
  s0 -> s0 [0, 65535] { R240 += 1, R241 += 1 };
  s1 -> s1 [0, 65535] { R241 += 1, R224 += 1, R225 += 1 };
  s1 -> s2 [0, 65535] { R241 += 1, R225 += 1, R207 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R241 += 1 };
  s2 -> s2 [0, 65535] { R241 += 1, R225 += 1, R207 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R241 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value_15 {
  init s0;
  s0 -> s1 [0, 83] { R243 += 1, R227 += 1 };
  s0 -> s0 [0, 65535] { R242 += 1, R243 += 1 };
  s0 -> s2 [0, 65535] { R243 += 1, R226 += 1, R227 += 1 };
  s0 -> s3 [84, 84] { R243 += 1, R227 += 1 };
  s0 -> s4 [84, 84] { R243 += 1, R227 += 1 };
  s0 -> s1 [89, 65535] { R243 += 1, R227 += 1 };
  s1 -> s1 [0, 83] { R243 += 1, R227 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R243 += 1 };
  s1 -> s3 [84, 84] { R243 += 1, R227 += 1 };
  s1 -> s4 [84, 84] { R243 += 1, R227 += 1 };
  s1 -> s1 [89, 65535] { R243 += 1, R227 += 1 };
  s2 -> s1 [0, 83] { R243 += 1, R227 += 1 };
  s2 -> s2 [0, 65535] { R243 += 1, R226 += 1, R227 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [84, 84] { R243 += 1, R227 += 1 };
  s2 -> s4 [84, 84] { R243 += 1, R227 += 1 };
  s2 -> s1 [89, 65535] { R243 += 1, R227 += 1 };
  s3 -> s3 [0, 84] { R243 += 1, R227 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R243 += 1 };
  s3 -> s3 [89, 65535] { R243 += 1, R227 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R243 += 1 };
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
};
synchronised {  // Automata constraining c0
automaton c0_0 {
  init s0;
  s0 -> s1 [116, 116];
  accepting s1;
};
};
constraint R1 = R223 && R2 = R217 && R6 = 0 && R7 - R222 = -1 && R140 = 0 && R141 = R239 && R208 - R217 = -1 && R209 = R217 && R210 - R217 = -1 && R211 = R217 && R212 = 0 && R213 = 1 && R214 = 0 && R215 = 1 && R216 - R239 = 1 && R228 = 0 && R229 = R239 && R232 = 0 && R233 = R239 && R238 = 0 && R0 != 0 && R239 < R217 && R222 - R223 < 1 && -1 < R222 && -1 < R239 && (R218 != R222 || R219 = R223 || (R206 = 0 && R222 = R223)) && (R220 != R222 || R221 = R223 || (R206 = 0 && R222 = R223)) && (R222 != 0 || R223 != 0 || ((R240 != 0 || ((R242 != 0 || ((R239 != R243 || R241 = R243 || R217 - R243 < 1 || R243 < 1) && (R239 = R243 || R239 < 1))) && (R242 = 0 || R239 < 1))) && (R240 = 0 || R239 < 1))) && (R224 != 0 || R222 = R225 || (R207 = 0 && R222 = 0)) && (R226 != 0 || R222 = R227 || (R207 = 0 && R222 = 0)) && (R230 != 0 || R231 = R239 || (R223 = 0 && (R222 != 0 || R239 < 1))) && (R234 != 0 || R235 = R239 || (R223 = 0 && (R222 != 0 || R239 < 1))) && (R236 != 0 || R237 = R239 || (R223 = 0 && (R222 != 0 || R239 < 1))) && (R240 != 0 || ((R242 != 0 || ((R239 != R243 || R241 = R243 || R217 - R243 < 1 || R223 < 1 || R243 < 0) && (R239 = R243 || R223 < 1))) && (R242 = 0 || R223 < 1))) && (R218 = R222 || (R206 = 0 && R222 = R223)) && (R220 = R222 || (R206 = 0 && R222 = R223)) && (R224 = 0 || (R207 = 0 && R222 = 0)) && (R226 = 0 || (R207 = 0 && R222 = 0)) && (R230 = 0 || (R223 = 0 && (R222 != 0 || R239 < 1))) && (R234 = 0 || (R223 = 0 && (R222 != 0 || R239 < 1))) && (R236 = 0 || (R223 = 0 && (R222 != 0 || R239 < 1))) && (R240 = 0 || R223 < 1);
// End of Parikh automata intersection problem
