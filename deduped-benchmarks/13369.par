// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R100, R101, R102, R103, R104, R105, R106, R107, R108, R109, R110, R111, R112, R113, R114, R115, R116, R117, R118, R119, R120, R121, R2, R3, R4, R6, R66, R67, R7, R95, R96, R97, R98, R99;
synchronised {  // Automata constraining headerkey
automaton headerkey_0 {
  init s0;
  s0 -> s1 [0, 64];
  s0 -> s1 [91, 98];
  s0 -> s2 [99, 99];
  s0 -> s1 [100, 65535];
  s1 -> s1 [0, 64];
  s1 -> s1 [91, 65535];
  s2 -> s1 [0, 64];
  s2 -> s1 [91, 96];
  s2 -> s3 [97, 97];
  s2 -> s1 [98, 65535];
  s3 -> s1 [0, 64];
  s3 -> s1 [91, 98];
  s3 -> s4 [99, 99];
  s3 -> s1 [100, 65535];
  s4 -> s1 [0, 64];
  s4 -> s1 [91, 103];
  s4 -> s5 [104, 104];
  s4 -> s1 [105, 65535];
  s5 -> s1 [0, 64];
  s5 -> s1 [91, 100];
  s5 -> s6 [101, 101];
  s5 -> s1 [102, 65535];
  s6 -> s1 [0, 44];
  s6 -> s7 [45, 45];
  s6 -> s1 [46, 64];
  s6 -> s1 [91, 65535];
  s7 -> s1 [0, 64];
  s7 -> s1 [91, 98];
  s7 -> s8 [99, 99];
  s7 -> s1 [100, 65535];
  s8 -> s1 [0, 64];
  s8 -> s1 [91, 110];
  s8 -> s9 [111, 111];
  s8 -> s1 [112, 65535];
  s9 -> s1 [0, 64];
  s9 -> s1 [91, 109];
  s9 -> s10 [110, 110];
  s9 -> s1 [111, 65535];
  s10 -> s1 [0, 64];
  s10 -> s1 [91, 115];
  s10 -> s11 [116, 116];
  s10 -> s1 [117, 65535];
  s11 -> s1 [0, 64];
  s11 -> s1 [91, 113];
  s11 -> s12 [114, 114];
  s11 -> s1 [115, 65535];
  s12 -> s1 [0, 64];
  s12 -> s1 [91, 110];
  s12 -> s13 [111, 111];
  s12 -> s1 [112, 65535];
  s13 -> s1 [0, 64];
  s13 -> s1 [91, 107];
  s13 -> s14 [108, 108];
  s13 -> s1 [109, 65535];
  s14 -> s1 [0, 64];
  s14 -> s1 [91, 65535];
  accepting s3, s4, s12, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
};
synchronised {  // Automata constraining P45
automaton P45_0 {
  init s0;
  s0 -> s1 [80, 80];
  s1 -> s2 [65, 65];
  s2 -> s3 [84, 84];
  s3 -> s4 [67, 67];
  s4 -> s5 [72, 72];
  accepting s5;
};
};
synchronised {  // Automata constraining P41
automaton P41_0 {
  init s0;
  s0 -> s1 [80, 80];
  s1 -> s2 [85, 85];
  s2 -> s3 [84, 84];
  accepting s3;
};
};
synchronised {  // Automata constraining url
automaton url_0 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton url_1 {
  init s0;
  s0 -> s1 [0, 57] { R67 += 1 };
  s0 -> s0 [0, 65535] { R66 += 1, R67 += 1 };
  s0 -> s2 [58, 58];
  s0 -> s1 [59, 65535] { R67 += 1 };
  s1 -> s1 [0, 57] { R67 += 1 };
  s1 -> s2 [58, 58];
  s1 -> s1 [59, 65535] { R67 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton url_2 {
  init s0;
  s0 -> s1 [0, 65535] { R103 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R102 += 1, R103 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R103 += 1, R0 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton url_3 {
  init s0;
  s0 -> s1 [0, 65535] { R111 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R110 += 1, R111 += 1 };
  s1 -> s1 [0, 65535] { R111 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton url_4 {
  init s0;
  s0 -> s1 [0, 46] { R113 += 1, R7 += 1 };
  s0 -> s2 [0, 65535] { R113 += 1, R6 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R112 += 1, R113 += 1 };
  s0 -> s3 [47, 47] { R113 += 1 };
  s0 -> s1 [48, 65535] { R113 += 1, R7 += 1 };
  s1 -> s1 [0, 46] { R113 += 1, R7 += 1 };
  s1 -> s3 [47, 47] { R113 += 1 };
  s1 -> s1 [48, 65535] { R113 += 1, R7 += 1 };
  s2 -> s1 [0, 46] { R113 += 1, R7 += 1 };
  s2 -> s2 [0, 65535] { R113 += 1, R6 += 1, R7 += 1 };
  s2 -> s3 [47, 47] { R113 += 1 };
  s2 -> s1 [48, 65535] { R113 += 1, R7 += 1 };
  s3 -> s3 [0, 65535] { R113 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton url_5 {
  init s0;
  s0 -> s1 [0, 65535] { R115 += 1, R100 += 1, R101 += 1 };
  s0 -> s2 [0, 65535] { R115 += 1, R101 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R114 += 1, R115 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R115 += 1, R100 += 1, R101 += 1 };
  s1 -> s2 [0, 65535] { R115 += 1, R101 += 1, R2 += 1 };
  s2 -> s3 [0, 65535] { R115 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R115 += 1, R101 += 1, R2 += 1 };
  s3 -> s3 [0, 65535] { R115 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton url_6 {
  init s0;
  s0 -> s0 [0, 65535] { R116 += 1, R117 += 1 };
  s0 -> s1 [0, 65535] { R117 += 1, R105 += 1, R1 += 1 };
  s0 -> s2 [0, 65535] { R117 += 1, R104 += 1, R105 += 1 };
  s1 -> s1 [0, 65535] { R117 += 1, R105 += 1, R1 += 1 };
  s1 -> s4 [0, 65535] { R117 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R117 += 1, R105 += 1, R1 += 1 };
  s2 -> s2 [0, 65535] { R117 += 1, R104 += 1, R105 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R117 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton url_7 {
  init s0;
  s0 -> s0 [0, 65535] { R118 += 1, R119 += 1 };
  s0 -> s1 [0, 65535] { R119 += 1, R106 += 1, R107 += 1 };
  s0 -> s2 [0, 65535] { R119 += 1, R107 += 1, R96 += 1, R97 += 1 };
  s0 -> s3 [47, 47] { R119 += 1, R107 += 1, R97 += 1 };
  s1 -> s1 [0, 65535] { R119 += 1, R106 += 1, R107 += 1 };
  s1 -> s2 [0, 65535] { R119 += 1, R107 += 1, R96 += 1, R97 += 1 };
  s1 -> s3 [47, 47] { R119 += 1, R107 += 1, R97 += 1 };
  s2 -> s2 [0, 65535] { R119 += 1, R107 += 1, R96 += 1, R97 += 1 };
  s2 -> s3 [47, 47] { R119 += 1, R107 += 1, R97 += 1 };
  s3 -> s3 [0, 65535] { R119 += 1, R107 += 1 };
  s3 -> s4 [0, 65535] { R119 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R119 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
automaton url_8 {
  init s0;
  s0 -> s1 [0, 65535] { R121 += 1, R109 += 1, R98 += 1, R99 += 1 };
  s0 -> s2 [0, 65535] { R121 += 1, R109 += 1, R99 += 1, R95 += 1 };
  s0 -> s3 [0, 65535] { R121 += 1, R108 += 1, R109 += 1 };
  s0 -> s0 [0, 65535] { R120 += 1, R121 += 1 };
  s1 -> s5 [0, 65535] { R121 += 1 };
  s1 -> s1 [0, 65535] { R121 += 1, R109 += 1, R98 += 1, R99 += 1 };
  s1 -> s2 [0, 65535] { R121 += 1, R109 += 1, R99 += 1, R95 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R121 += 1 };
  s2 -> s2 [0, 65535] { R121 += 1, R109 += 1, R99 += 1, R95 += 1 };
  s2 -> s6 [0, 65535] { R121 += 1, R109 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R121 += 1, R109 += 1, R98 += 1, R99 += 1 };
  s3 -> s2 [0, 65535] { R121 += 1, R109 += 1, R99 += 1, R95 += 1 };
  s3 -> s3 [0, 65535] { R121 += 1, R108 += 1, R109 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R121 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R121 += 1 };
  s6 -> s6 [0, 65535] { R121 += 1, R109 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R3 = R109 && R4 = R121 && R6 = 2 && R7 = R108 && R66 = 0 && R67 - R120 = -1 && R96 = 0 && R100 = 2 && R101 = R108 && R102 = 0 && R103 - R120 = -1 && R104 = R108 && R105 = R109 && R106 = R108 && R107 = R109 && R110 = R120 && R111 = R121 && R112 = R120 && R113 = R121 && R114 = R120 && R115 = R121 && R116 = R120 && R117 = R121 && R118 = R120 && R119 = R121 && R0 != 0 && R1 != 0 && R2 != 0 && R108 - R109 < 1 && 1 < R108 && R120 - R121 < 1 && 0 < R120 && (R1 != R97 || R97 = 1 || R97 < 0) && (R97 != 1 || -1 < R1) && (R98 != 0 || ((R95 != 0 || ((R1 != R99 || R99 = 1 || R99 < 0) && (R1 = R99 || R99 = 1 || R1 < 1))) && (R95 = 0 || ((R1 != R99 || R99 = 1 || R99 < 0) && (R99 != 1 || -1 < R1) && (R1 = R99 || R99 = 1))))) && (R1 = R97 || R97 = 1) && (R98 = 0 || (R95 = 0 && R1 < 0));
// End of Parikh automata intersection problem
