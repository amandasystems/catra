// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R2, R3, R5, R6, R60, R63, R64, R65, R66, R67, R68, R69, R70, R71, R72, R73, R74, R75, R76, R77, R78, R79, R80, R81, R82, R83, R84, R85, R86, R87;
synchronised {  // Automata constraining headerkey
automaton headerkey_0 {
  init s0;
  s0 -> s0 [0, 64];
  s0 -> s0 [91, 65535];
  accepting s0;
};
};
synchronised {  // Automata constraining url
automaton url_0 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton url_1 {
  init s0;
  s0 -> s1 [0, 57];
  s0 -> s0 [0, 65535] { R60 += 1 };
  s0 -> s2 [58, 58];
  s0 -> s1 [59, 65535];
  s1 -> s1 [0, 57];
  s1 -> s2 [58, 58];
  s1 -> s1 [59, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton url_2 {
  init s0;
  s0 -> s1 [0, 65535] { R77 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R76 += 1, R77 += 1 };
  s1 -> s1 [0, 65535] { R77 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton url_3 {
  init s0;
  s0 -> s1 [0, 46] { R79 += 1, R6 += 1 };
  s0 -> s0 [0, 65535] { R78 += 1, R79 += 1 };
  s0 -> s2 [0, 65535] { R79 += 1, R5 += 1, R6 += 1 };
  s0 -> s3 [47, 47] { R79 += 1 };
  s0 -> s1 [48, 65535] { R79 += 1, R6 += 1 };
  s1 -> s1 [0, 46] { R79 += 1, R6 += 1 };
  s1 -> s3 [47, 47] { R79 += 1 };
  s1 -> s1 [48, 65535] { R79 += 1, R6 += 1 };
  s2 -> s1 [0, 46] { R79 += 1, R6 += 1 };
  s2 -> s2 [0, 65535] { R79 += 1, R5 += 1, R6 += 1 };
  s2 -> s3 [47, 47] { R79 += 1 };
  s2 -> s1 [48, 65535] { R79 += 1, R6 += 1 };
  s3 -> s3 [0, 65535] { R79 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton url_4 {
  init s0;
  s0 -> s1 [0, 65535] { R81 += 1, R69 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R80 += 1, R81 += 1 };
  s0 -> s2 [0, 65535] { R81 += 1, R68 += 1, R69 += 1 };
  s1 -> s1 [0, 65535] { R81 += 1, R69 += 1, R1 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R81 += 1 };
  s2 -> s1 [0, 65535] { R81 += 1, R69 += 1, R1 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R81 += 1, R68 += 1, R69 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R81 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton url_5 {
  init s0;
  s0 -> s0 [0, 65535] { R82 += 1, R83 += 1 };
  s0 -> s1 [0, 65535] { R83 += 1, R71 += 1, R0 += 1 };
  s0 -> s2 [0, 65535] { R83 += 1, R70 += 1, R71 += 1 };
  s1 -> s4 [0, 65535] { R83 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R83 += 1, R71 += 1, R0 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R83 += 1, R71 += 1, R0 += 1 };
  s2 -> s2 [0, 65535] { R83 += 1, R70 += 1, R71 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R83 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton url_6 {
  init s0;
  s0 -> s1 [0, 46] { R85 += 1, R73 += 1, R65 += 1 };
  s0 -> s2 [0, 65535] { R85 += 1, R72 += 1, R73 += 1 };
  s0 -> s0 [0, 65535] { R84 += 1, R85 += 1 };
  s0 -> s3 [0, 65535] { R85 += 1, R73 += 1, R64 += 1, R65 += 1 };
  s0 -> s4 [47, 47] { R85 += 1, R73 += 1, R65 += 1 };
  s0 -> s1 [48, 65535] { R85 += 1, R73 += 1, R65 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R85 += 1 };
  s1 -> s1 [0, 65535] { R85 += 1, R73 += 1, R65 += 1 };
  s1 -> s7 [0, 65535] { R85 += 1, R73 += 1 };
  s2 -> s1 [0, 46] { R85 += 1, R73 += 1, R65 += 1 };
  s2 -> s2 [0, 65535] { R85 += 1, R72 += 1, R73 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R85 += 1, R73 += 1, R64 += 1, R65 += 1 };
  s2 -> s4 [47, 47] { R85 += 1, R73 += 1, R65 += 1 };
  s2 -> s1 [48, 65535] { R85 += 1, R73 += 1, R65 += 1 };
  s3 -> s1 [0, 46] { R85 += 1, R73 += 1, R65 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R85 += 1 };
  s3 -> s3 [0, 65535] { R85 += 1, R73 += 1, R64 += 1, R65 += 1 };
  s3 -> s4 [47, 47] { R85 += 1, R73 += 1, R65 += 1 };
  s3 -> s1 [48, 65535] { R85 += 1, R73 += 1, R65 += 1 };
  s4 -> s1 [0, 65535] { R85 += 1, R73 += 1, R65 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R85 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R85 += 1 };
  s7 -> s7 [0, 65535] { R85 += 1, R73 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton url_7 {
  init s0;
  s0 -> s0 [0, 65535] { R86 += 1, R87 += 1 };
  s0 -> s1 [0, 65535] { R87 += 1, R74 += 1, R75 += 1 };
  s0 -> s2 [0, 65535] { R87 += 1, R75 += 1, R67 += 1, R63 += 1 };
  s0 -> s3 [0, 65535] { R87 += 1, R75 += 1, R66 += 1, R67 += 1 };
  s1 -> s1 [0, 65535] { R87 += 1, R74 += 1, R75 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R87 += 1, R75 += 1, R67 += 1, R63 += 1 };
  s1 -> s3 [0, 65535] { R87 += 1, R75 += 1, R66 += 1, R67 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R87 += 1, R75 += 1, R67 += 1, R63 += 1 };
  s2 -> s6 [0, 65535] { R87 += 1, R75 += 1 };
  s2 -> s5 [0, 65535] { R87 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R87 += 1, R75 += 1, R67 += 1, R63 += 1 };
  s3 -> s3 [0, 65535] { R87 += 1, R75 += 1, R66 += 1, R67 += 1 };
  s3 -> s5 [0, 65535] { R87 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R87 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R87 += 1, R75 += 1 };
  s6 -> s5 [0, 65535] { R87 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R2 = R75 && R3 = R87 && R5 = 2 && R6 = R74 && R68 = 2 && R69 = R74 && R70 = R74 && R71 = R75 && R72 = R74 && R73 = R75 && R76 = 0 && R77 = R87 && R78 = 0 && R79 = R87 && R80 = 0 && R81 = R87 && R82 = 0 && R83 = R87 && R84 = 0 && R85 = R87 && R86 = 0 && R0 != 0 && R1 != 0 && R60 < 1 && R74 - R75 < 1 && 1 < R74 && -1 < R87 && (R64 != 0 || ((R63 != 0 || ((R0 != R65 || R65 = 1 || R65 < 0) && (R0 = R65 || R65 = 1 || R0 < 1))) && (R63 = 0 || ((R0 != R65 || R65 = 1 || R65 < 0) && (R65 != 1 || -1 < R0) && (R0 = R65 || R65 = 1))))) && (R66 != 0 || ((R63 != 0 || ((R0 != R67 || R67 = 1 || R67 < 0) && (R0 = R67 || R67 = 1 || R0 < 1))) && (R63 = 0 || ((R0 != R67 || R67 = 1 || R67 < 0) && (R67 != 1 || -1 < R0) && (R0 = R67 || R67 = 1))))) && (R64 = 0 || (R63 = 0 && R0 < 0)) && (R66 = 0 || (R63 = 0 && R0 < 0));
// End of Parikh automata intersection problem
