// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R12, R13, R14, R15, R4, R5, R6, R7, R8, R9;
synchronised {  // Automata constraining key1
automaton key1_0 {
  init s0;
  s0 -> s0 [0, 64];
  s0 -> s1 [65, 65];
  s0 -> s0 [66, 65535];
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton key1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R0 += 1 };
  accepting s0;
};
automaton key1_2 {
  init s0;
  s0 -> s1 [0, 64];
  s0 -> s0 [0, 65535] { R1 += 1 };
  s0 -> s2 [65, 65];
  s0 -> s1 [66, 65535];
  s1 -> s1 [0, 64];
  s1 -> s2 [65, 65];
  s1 -> s1 [66, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton key1_3 {
  init s0;
  s0 -> s1 [0, 64] { R7 += 1 };
  s0 -> s0 [0, 65535] { R6 += 1, R7 += 1 };
  s0 -> s1 [66, 65535] { R7 += 1 };
  s1 -> s1 [0, 64] { R7 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [66, 65535] { R7 += 1 };
  accepting s0, s1;
};
automaton key1_4 {
  init s0;
  s0 -> s1 [0, 65535] { R9 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R8 += 1, R9 += 1 };
  s1 -> s1 [0, 65535] { R9 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton key1_5 {
  init s0;
  s0 -> s1 [0, 65] { R11 += 1 };
  s0 -> s0 [0, 65535] { R10 += 1, R11 += 1 };
  s0 -> s2 [86, 86] { R11 += 1 };
  s0 -> s1 [87, 65535] { R11 += 1 };
  s1 -> s1 [0, 65] { R11 += 1 };
  s1 -> s2 [86, 86] { R11 += 1 };
  s1 -> s1 [87, 65535] { R11 += 1 };
  s2 -> s2 [0, 65] { R11 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [86, 65535] { R11 += 1 };
  accepting s2;
};
automaton key1_6 {
  init s0;
  s0 -> s1 [0, 65535] { R13 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R12 += 1, R13 += 1 };
  s1 -> s1 [0, 65535] { R13 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton key1_7 {
  init s0;
  s0 -> s1 [0, 64] { R15 += 1 };
  s0 -> s0 [0, 65535] { R14 += 1, R15 += 1 };
  s0 -> s2 [65, 65] { R15 += 1 };
  s0 -> s3 [65, 65] { R15 += 1 };
  s0 -> s1 [87, 65535] { R15 += 1 };
  s1 -> s1 [0, 64] { R15 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R15 += 1 };
  s1 -> s3 [65, 65] { R15 += 1 };
  s1 -> s1 [87, 65535] { R15 += 1 };
  s2 -> s2 [0, 65] { R15 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [87, 65535] { R15 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
};
synchronised {  // Automata constraining P5
automaton P5_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
constraint R0 = R11 && R10 = 0 && R1 < 1 && -1 < R11 && (R6 != 0 || R7 = R11 || (R4 = 0 && R11 = 0)) && (R8 != 0 || R9 = R11 || (R4 = 0 && R11 = 0)) && (R5 = 0 || (R12 = 0 && R13 = 0 && R14 = 0 && R15 = 0)) && (R6 = 0 || (R4 = 0 && R11 = 0)) && (R8 = 0 || (R4 = 0 && R11 = 0));
// End of Parikh automata intersection problem
