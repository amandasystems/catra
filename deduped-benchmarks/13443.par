// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R100, R101, R102, R103, R104, R105, R106, R107, R108, R109, R110, R111, R112, R113, R114, R115, R116, R117, R118, R119, R12, R120, R121, R122, R123, R124, R125, R126, R127, R128, R129, R13, R130, R131, R132, R133, R134, R135, R14, R15, R2, R3, R6, R76, R77, R78, R79, R80, R81, R82, R83, R84, R85, R86, R87, R88, R89, R9, R90, R91, R92, R93, R94, R95, R96, R97, R98, R99;
synchronised {  // Automata constraining key1
automaton key1_0 {
  init s0;
  s0 -> s0 [0, 64];
  s0 -> s1 [67, 67];
  s0 -> s0 [68, 65535];
  s1 -> s1 [0, 64];
  s1 -> s1 [67, 65535];
  accepting s1;
};
automaton key1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton key1_2 {
  init s0;
  s0 -> s1 [0, 66];
  s0 -> s0 [0, 65535] { R9 += 1 };
  s0 -> s2 [67, 67];
  s0 -> s1 [68, 65535];
  s1 -> s1 [0, 66];
  s1 -> s2 [67, 67];
  s1 -> s1 [68, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton key1_3 {
  init s0;
  s0 -> s0 [0, 65535] { R76 += 1, R77 += 1 };
  s0 -> s1 [0, 65535] { R77 += 1, R15 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R77 += 1, R15 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton key1_4 {
  init s0;
  s0 -> s1 [0, 66] { R79 += 1 };
  s0 -> s0 [0, 65535] { R78 += 1, R79 += 1 };
  s0 -> s2 [67, 67] { R79 += 1 };
  s0 -> s3 [67, 67] { R79 += 1 };
  s0 -> s1 [85, 65535] { R79 += 1 };
  s1 -> s1 [0, 66] { R79 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [67, 67] { R79 += 1 };
  s1 -> s3 [67, 67] { R79 += 1 };
  s1 -> s1 [85, 65535] { R79 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 67] { R79 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [85, 65535] { R79 += 1 };
  accepting s0, s1, s2, s3;
};
automaton key1_5 {
  init s0;
  s0 -> s1 [0, 66] { R111 += 1 };
  s0 -> s0 [0, 65535] { R110 += 1, R111 += 1 };
  s0 -> s2 [67, 67] { R111 += 1 };
  s0 -> s1 [68, 65535] { R111 += 1 };
  s1 -> s1 [0, 66] { R111 += 1 };
  s1 -> s2 [67, 67] { R111 += 1 };
  s1 -> s1 [68, 65535] { R111 += 1 };
  s2 -> s2 [0, 65535] { R111 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton key1_6 {
  init s0;
  s0 -> s0 [0, 65535] { R112 += 1, R113 += 1 };
  s0 -> s1 [0, 65535] { R113 += 1, R1 += 1 };
  s1 -> s1 [0, 65535] { R113 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton key1_7 {
  init s0;
  s0 -> s1 [0, 66] { R115 += 1 };
  s0 -> s0 [0, 65535] { R114 += 1, R115 += 1 };
  s0 -> s2 [0, 65535] { R115 += 1, R6 += 1 };
  s0 -> s3 [67, 67] { R115 += 1 };
  s0 -> s1 [68, 65535] { R115 += 1 };
  s1 -> s1 [0, 66] { R115 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [67, 67] { R115 += 1 };
  s1 -> s1 [68, 65535] { R115 += 1 };
  s2 -> s1 [0, 66] { R115 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R115 += 1, R6 += 1 };
  s2 -> s3 [67, 67] { R115 += 1 };
  s2 -> s1 [68, 65535] { R115 += 1 };
  s3 -> s3 [0, 65535] { R115 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton key1_8 {
  init s0;
  s0 -> s1 [0, 65535] { R117 += 1, R86 += 1, R87 += 1 };
  s0 -> s2 [0, 65535] { R117 += 1, R87 += 1, R14 += 1 };
  s0 -> s0 [0, 65535] { R116 += 1, R117 += 1 };
  s1 -> s1 [0, 65535] { R117 += 1, R86 += 1, R87 += 1 };
  s1 -> s2 [0, 65535] { R117 += 1, R87 += 1, R14 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R117 += 1 };
  s2 -> s2 [0, 65535] { R117 += 1, R87 += 1, R14 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R117 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton key1_9 {
  init s0;
  s0 -> s1 [0, 66] { R119 += 1, R89 += 1 };
  s0 -> s2 [0, 65535] { R119 += 1, R88 += 1, R89 += 1 };
  s0 -> s0 [0, 65535] { R118 += 1, R119 += 1 };
  s0 -> s3 [67, 67] { R119 += 1, R89 += 1 };
  s0 -> s4 [67, 67] { R119 += 1, R89 += 1 };
  s0 -> s1 [85, 65535] { R119 += 1, R89 += 1 };
  s1 -> s1 [0, 66] { R119 += 1, R89 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R119 += 1 };
  s1 -> s3 [67, 67] { R119 += 1, R89 += 1 };
  s1 -> s4 [67, 67] { R119 += 1, R89 += 1 };
  s1 -> s1 [85, 65535] { R119 += 1, R89 += 1 };
  s2 -> s1 [0, 66] { R119 += 1, R89 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R119 += 1, R88 += 1, R89 += 1 };
  s2 -> s3 [67, 67] { R119 += 1, R89 += 1 };
  s2 -> s4 [67, 67] { R119 += 1, R89 += 1 };
  s2 -> s1 [85, 65535] { R119 += 1, R89 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R119 += 1 };
  s4 -> s4 [0, 67] { R119 += 1, R89 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R119 += 1 };
  s4 -> s4 [85, 65535] { R119 += 1, R89 += 1 };
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton key1_10 {
  init s0;
  s0 -> s1 [0, 66] { R121 += 1, R95 += 1 };
  s0 -> s2 [0, 65535] { R121 += 1, R94 += 1, R95 += 1 };
  s0 -> s0 [0, 65535] { R120 += 1, R121 += 1 };
  s0 -> s3 [67, 67] { R121 += 1, R95 += 1 };
  s0 -> s1 [68, 65535] { R121 += 1, R95 += 1 };
  s1 -> s1 [0, 66] { R121 += 1, R95 += 1 };
  s1 -> s3 [67, 67] { R121 += 1, R95 += 1 };
  s1 -> s1 [68, 65535] { R121 += 1, R95 += 1 };
  s2 -> s1 [0, 66] { R121 += 1, R95 += 1 };
  s2 -> s2 [0, 65535] { R121 += 1, R94 += 1, R95 += 1 };
  s2 -> s3 [67, 67] { R121 += 1, R95 += 1 };
  s2 -> s1 [68, 65535] { R121 += 1, R95 += 1 };
  s3 -> s4 [0, 65535] { R121 += 1 };
  s3 -> s3 [0, 65535] { R121 += 1, R95 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R121 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
automaton key1_11 {
  init s0;
  s0 -> s0 [0, 65535] { R122 += 1, R123 += 1 };
  s0 -> s1 [0, 65535] { R123 += 1, R96 += 1, R97 += 1 };
  s0 -> s2 [0, 65535] { R123 += 1, R97 += 1, R0 += 1 };
  s1 -> s1 [0, 65535] { R123 += 1, R96 += 1, R97 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R123 += 1, R97 += 1, R0 += 1 };
  s2 -> s3 [0, 65535] { R123 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R123 += 1, R97 += 1, R0 += 1 };
  s3 -> s3 [0, 65535] { R123 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton key1_12 {
  init s0;
  s0 -> s1 [0, 66] { R125 += 1, R99 += 1 };
  s0 -> s2 [0, 65535] { R125 += 1, R98 += 1, R99 += 1 };
  s0 -> s3 [0, 65535] { R125 += 1, R99 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R124 += 1, R125 += 1 };
  s0 -> s4 [67, 67] { R125 += 1, R99 += 1 };
  s0 -> s1 [68, 65535] { R125 += 1, R99 += 1 };
  s1 -> s1 [0, 66] { R125 += 1, R99 += 1 };
  s1 -> s1 [0, 65535] { R125 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s4 [67, 67] { R125 += 1, R99 += 1 };
  s1 -> s1 [68, 65535] { R125 += 1, R99 += 1 };
  s2 -> s1 [0, 66] { R125 += 1, R99 += 1 };
  s2 -> s2 [0, 65535] { R125 += 1, R98 += 1, R99 += 1 };
  s2 -> s3 [0, 65535] { R125 += 1, R99 += 1, R3 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s4 [67, 67] { R125 += 1, R99 += 1 };
  s2 -> s1 [68, 65535] { R125 += 1, R99 += 1 };
  s3 -> s1 [0, 66] { R125 += 1, R99 += 1 };
  s3 -> s5 [0, 65535] { R125 += 1 };
  s3 -> s3 [0, 65535] { R125 += 1, R99 += 1, R3 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s4 [67, 67] { R125 += 1, R99 += 1 };
  s3 -> s1 [68, 65535] { R125 += 1, R99 += 1 };
  s4 -> s4 [0, 65535] { R125 += 1, R99 += 1 };
  s5 -> s5 [0, 65535] { R125 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton key1_13 {
  init s0;
  s0 -> s1 [0, 66] { R127 += 1, R101 += 1, R81 += 1 };
  s0 -> s2 [0, 65535] { R127 += 1, R101 += 1, R80 += 1, R81 += 1 };
  s0 -> s0 [0, 65535] { R126 += 1, R127 += 1 };
  s0 -> s3 [0, 65535] { R127 += 1, R100 += 1, R101 += 1 };
  s0 -> s1 [68, 65535] { R127 += 1, R101 += 1, R81 += 1 };
  s1 -> s1 [0, 66] { R127 += 1, R101 += 1, R81 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R127 += 1, R101 += 1 };
  s1 -> s5 [0, 65535] { R127 += 1 };
  s1 -> s1 [68, 65535] { R127 += 1, R101 += 1, R81 += 1 };
  s2 -> s1 [0, 66] { R127 += 1, R101 += 1, R81 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R127 += 1 };
  s2 -> s2 [0, 65535] { R127 += 1, R101 += 1, R80 += 1, R81 += 1 };
  s2 -> s1 [68, 65535] { R127 += 1, R101 += 1, R81 += 1 };
  s3 -> s1 [0, 66] { R127 += 1, R101 += 1, R81 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R127 += 1, R101 += 1, R80 += 1, R81 += 1 };
  s3 -> s3 [0, 65535] { R127 += 1, R100 += 1, R101 += 1 };
  s3 -> s1 [68, 65535] { R127 += 1, R101 += 1, R81 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R127 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton key1_14 {
  init s0;
  s0 -> s1 [0, 65535] { R129 += 1, R103 += 1, R82 += 1, R83 += 1 };
  s0 -> s2 [0, 65535] { R129 += 1, R102 += 1, R103 += 1 };
  s0 -> s3 [0, 65535] { R129 += 1, R103 += 1, R83 += 1, R12 += 1 };
  s0 -> s0 [0, 65535] { R128 += 1, R129 += 1 };
  s1 -> s1 [0, 65535] { R129 += 1, R103 += 1, R82 += 1, R83 += 1 };
  s1 -> s4 [0, 65535] { R129 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [0, 65535] { R129 += 1, R103 += 1, R83 += 1, R12 += 1 };
  s2 -> s1 [0, 65535] { R129 += 1, R103 += 1, R82 += 1, R83 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R129 += 1, R102 += 1, R103 += 1 };
  s2 -> s3 [0, 65535] { R129 += 1, R103 += 1, R83 += 1, R12 += 1 };
  s3 -> s4 [0, 65535] { R129 += 1 };
  s3 -> s5 [0, 65535] { R129 += 1, R103 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R129 += 1, R103 += 1, R83 += 1, R12 += 1 };
  s4 -> s4 [0, 65535] { R129 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s4 [0, 65535] { R129 += 1 };
  s5 -> s5 [0, 65535] { R129 += 1, R103 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton key1_15 {
  init s0;
  s0 -> s1 [0, 67] { R131 += 1, R105 += 1, R85 += 1 };
  s0 -> s0 [0, 65535] { R130 += 1, R131 += 1 };
  s0 -> s2 [0, 65535] { R131 += 1, R104 += 1, R105 += 1 };
  s0 -> s3 [0, 65535] { R131 += 1, R105 += 1, R84 += 1, R85 += 1 };
  s0 -> s1 [84, 65535] { R131 += 1, R105 += 1, R85 += 1 };
  s1 -> s1 [0, 67] { R131 += 1, R105 += 1, R85 += 1 };
  s1 -> s1 [0, 65535] { R131 += 1, R105 += 1 };
  s1 -> s4 [0, 65535] { R131 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [84, 65535] { R131 += 1, R105 += 1, R85 += 1 };
  s2 -> s1 [0, 67] { R131 += 1, R105 += 1, R85 += 1 };
  s2 -> s2 [0, 65535] { R131 += 1, R104 += 1, R105 += 1 };
  s2 -> s3 [0, 65535] { R131 += 1, R105 += 1, R84 += 1, R85 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [84, 65535] { R131 += 1, R105 += 1, R85 += 1 };
  s3 -> s1 [0, 67] { R131 += 1, R105 += 1, R85 += 1 };
  s3 -> s3 [0, 65535] { R131 += 1, R105 += 1, R84 += 1, R85 += 1 };
  s3 -> s4 [0, 65535] { R131 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [84, 65535] { R131 += 1, R105 += 1, R85 += 1 };
  s4 -> s4 [0, 65535] { R131 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton key1_16 {
  init s0;
  s0 -> s1 [0, 65535] { R133 += 1, R107 += 1, R90 += 1, R91 += 1 };
  s0 -> s0 [0, 65535] { R132 += 1, R133 += 1 };
  s0 -> s2 [0, 65535] { R133 += 1, R106 += 1, R107 += 1 };
  s0 -> s3 [0, 65535] { R133 += 1, R107 += 1, R91 += 1, R13 += 1 };
  s1 -> s1 [0, 65535] { R133 += 1, R107 += 1, R90 += 1, R91 += 1 };
  s1 -> s4 [0, 65535] { R133 += 1 };
  s1 -> s3 [0, 65535] { R133 += 1, R107 += 1, R91 += 1, R13 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R133 += 1, R107 += 1, R90 += 1, R91 += 1 };
  s2 -> s2 [0, 65535] { R133 += 1, R106 += 1, R107 += 1 };
  s2 -> s3 [0, 65535] { R133 += 1, R107 += 1, R91 += 1, R13 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s4 [0, 65535] { R133 += 1 };
  s3 -> s3 [0, 65535] { R133 += 1, R107 += 1, R91 += 1, R13 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R133 += 1, R107 += 1 };
  s4 -> s4 [0, 65535] { R133 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R133 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R133 += 1, R107 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton key1_17 {
  init s0;
  s0 -> s1 [0, 66] { R135 += 1, R109 += 1, R93 += 1 };
  s0 -> s0 [0, 65535] { R134 += 1, R135 += 1 };
  s0 -> s2 [0, 65535] { R135 += 1, R108 += 1, R109 += 1 };
  s0 -> s3 [0, 65535] { R135 += 1, R109 += 1, R92 += 1, R93 += 1 };
  s0 -> s4 [67, 67] { R135 += 1, R109 += 1, R93 += 1 };
  s0 -> s5 [67, 67] { R135 += 1, R109 += 1, R93 += 1 };
  s0 -> s6 [84, 84] { R135 += 1, R109 += 1, R93 += 1 };
  s0 -> s1 [85, 65535] { R135 += 1, R109 += 1, R93 += 1 };
  s1 -> s1 [0, 66] { R135 += 1, R109 += 1, R93 += 1 };
  s1 -> s4 [67, 67] { R135 += 1, R109 += 1, R93 += 1 };
  s1 -> s5 [67, 67] { R135 += 1, R109 += 1, R93 += 1 };
  s1 -> s6 [84, 84] { R135 += 1, R109 += 1, R93 += 1 };
  s1 -> s1 [85, 65535] { R135 += 1, R109 += 1, R93 += 1 };
  s2 -> s1 [0, 66] { R135 += 1, R109 += 1, R93 += 1 };
  s2 -> s2 [0, 65535] { R135 += 1, R108 += 1, R109 += 1 };
  s2 -> s3 [0, 65535] { R135 += 1, R109 += 1, R92 += 1, R93 += 1 };
  s2 -> s4 [67, 67] { R135 += 1, R109 += 1, R93 += 1 };
  s2 -> s5 [67, 67] { R135 += 1, R109 += 1, R93 += 1 };
  s2 -> s6 [84, 84] { R135 += 1, R109 += 1, R93 += 1 };
  s2 -> s1 [85, 65535] { R135 += 1, R109 += 1, R93 += 1 };
  s3 -> s1 [0, 66] { R135 += 1, R109 += 1, R93 += 1 };
  s3 -> s3 [0, 65535] { R135 += 1, R109 += 1, R92 += 1, R93 += 1 };
  s3 -> s4 [67, 67] { R135 += 1, R109 += 1, R93 += 1 };
  s3 -> s5 [67, 67] { R135 += 1, R109 += 1, R93 += 1 };
  s3 -> s6 [84, 84] { R135 += 1, R109 += 1, R93 += 1 };
  s3 -> s1 [85, 65535] { R135 += 1, R109 += 1, R93 += 1 };
  s5 -> s5 [0, 67] { R135 += 1, R109 += 1, R93 += 1 };
  s5 -> s9 [84, 84] { R135 += 1, R109 += 1, R93 += 1 };
  s5 -> s5 [85, 65535] { R135 += 1, R109 += 1, R93 += 1 };
  s6 -> s6 [0, 66] { R135 += 1, R109 += 1, R93 += 1 };
  s6 -> s7 [0, 65535] { R135 += 1 };
  s6 -> s6 [0, 65535] { R135 += 1, R109 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s9 [67, 67] { R135 += 1, R109 += 1, R93 += 1 };
  s6 -> s10 [67, 67] { R135 += 1, R109 += 1, R93 += 1 };
  s6 -> s6 [84, 65535] { R135 += 1, R109 += 1, R93 += 1 };
  s7 -> s7 [0, 65535] { R135 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  s9 -> s9 [0, 67] { R135 += 1, R109 += 1, R93 += 1 };
  s9 -> s9 [0, 65535] { R135 += 1, R109 += 1 };
  s9 -> s7 [0, 65535] { R135 += 1 };
  s9 -> s8 [0, 65535];
  s9 -> s9 [84, 65535] { R135 += 1, R109 += 1, R93 += 1 };
  s10 -> s10 [0, 65535] { R135 += 1, R109 += 1 };
  s10 -> s7 [0, 65535] { R135 += 1 };
  s10 -> s8 [0, 65535];
  accepting s8, s9, s6, s7, s10;
};
};
synchronised {  // Automata constraining P13
automaton P13_0 {
  init s0;
  s0 -> s1 [99, 99];
  accepting s1;
};
};
constraint R1 = R109 && R2 = R135 && R92 = 0 && R93 = 0 && R94 = 0 && R95 = R109 && R108 = 0 && R110 = 0 && R111 = R135 && R120 = 0 && R121 = R135 && R134 = 0 && -1 < R0 && R3 < 1 && R6 < 1 && R9 < 1 && -1 < R109 && -1 < R135 && (R0 != 0 || R12 = 0 || (R80 = 0 && R81 = 0)) && (R0 != 0 || R12 = 0 || (R82 = 0 && R83 = 0)) && (R0 != 0 || R12 = 0 || (R84 = 0 && R85 = 0)) && (R80 != 0 || R0 = R81 || R0 < 1) && (R82 != 0 || R0 = R83 || R0 < 1) && (R84 != 0 || R0 = R85 || R0 < 1) && (R96 != 0 || R97 = R109 || (R0 = 0 && R109 = 0)) && (R98 != 0 || R99 = R109 || (R0 = 0 && R109 = 0)) && (R100 != 0 || R101 = R109 || (R0 = 0 && R109 = 0)) && (R102 != 0 || R103 = R109 || (R0 = 0 && R109 = 0)) && (R104 != 0 || R105 = R109 || (R0 = 0 && R109 = 0)) && (R106 != 0 || R107 = R109 || (R0 = 0 && R109 = 0)) && (R112 != 0 || R113 = R135 || (R109 = 0 && R135 = 0)) && (R114 != 0 || R115 = R135 || (R109 = 0 && R135 = 0)) && (R116 != 0 || R117 = R135 || (R109 = 0 && R135 = 0)) && (R118 != 0 || R119 = R135 || (R109 = 0 && R135 = 0)) && (R122 != 0 || R123 = R135 || (R109 = 0 && R135 = 0)) && (R124 != 0 || R125 = R135 || (R109 = 0 && R135 = 0)) && (R126 != 0 || R127 = R135 || (R109 = 0 && R135 = 0)) && (R128 != 0 || R129 = R135 || (R109 = 0 && R135 = 0)) && (R130 != 0 || R131 = R135 || (R109 = 0 && R135 = 0)) && (R132 != 0 || R133 = R135 || (R109 = 0 && R135 = 0)) && (R13 = 0 || (R90 = 0 && R91 = 0)) && (R14 = 0 || (R86 = 0 && R87 = 0)) && (R14 = 0 || (R88 = 0 && R89 = 0)) && (R15 = 0 || (R76 = 0 && R77 = 0)) && (R15 = 0 || (R78 = 0 && R79 = 0)) && (R80 = 0 || R0 < 1) && (R82 = 0 || R0 < 1) && (R84 = 0 || R0 < 1) && (R96 = 0 || (R0 = 0 && R109 = 0)) && (R98 = 0 || (R0 = 0 && R109 = 0)) && (R100 = 0 || (R0 = 0 && R109 = 0)) && (R102 = 0 || (R0 = 0 && R109 = 0)) && (R104 = 0 || (R0 = 0 && R109 = 0)) && (R106 = 0 || (R0 = 0 && R109 = 0)) && (R112 = 0 || (R109 = 0 && R135 = 0)) && (R114 = 0 || (R109 = 0 && R135 = 0)) && (R116 = 0 || (R109 = 0 && R135 = 0)) && (R118 = 0 || (R109 = 0 && R135 = 0)) && (R122 = 0 || (R109 = 0 && R135 = 0)) && (R124 = 0 || (R109 = 0 && R135 = 0)) && (R126 = 0 || (R109 = 0 && R135 = 0)) && (R128 = 0 || (R109 = 0 && R135 = 0)) && (R130 = 0 || (R109 = 0 && R135 = 0)) && (R132 = 0 || (R109 = 0 && R135 = 0));
// End of Parikh automata intersection problem
