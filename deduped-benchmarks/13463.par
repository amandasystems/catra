// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R2, R26, R27, R28, R29, R3, R30, R31, R32, R33, R34, R35, R36, R37;
synchronised {  // Automata constraining key2
automaton key2_0 {
  init s0;
  s0 -> s0 [0, 64];
  s0 -> s1 [79, 79];
  s0 -> s0 [80, 65535];
  s1 -> s1 [0, 64];
  s1 -> s1 [79, 65535];
  accepting s1;
};
automaton key2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R0 += 1 };
  accepting s0;
};
automaton key2_2 {
  init s0;
  s0 -> s1 [0, 78] { R3 += 1 };
  s0 -> s0 [0, 65535] { R2 += 1, R3 += 1 };
  s0 -> s2 [79, 79];
  s0 -> s1 [80, 65535] { R3 += 1 };
  s1 -> s1 [0, 78] { R3 += 1 };
  s1 -> s2 [79, 79];
  s1 -> s1 [80, 65535] { R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton key2_3 {
  init s0;
  s0 -> s1 [0, 78] { R29 += 1 };
  s0 -> s0 [0, 65535] { R28 += 1, R29 += 1 };
  s0 -> s1 [80, 65535] { R29 += 1 };
  s1 -> s1 [0, 78] { R29 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [80, 65535] { R29 += 1 };
  accepting s0, s1;
};
automaton key2_4 {
  init s0;
  s0 -> s0 [0, 65535] { R30 += 1, R31 += 1 };
  s0 -> s1 [0, 65535] { R31 += 1, R26 += 1 };
  s1 -> s1 [0, 65535] { R31 += 1, R26 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton key2_5 {
  init s0;
  s0 -> s1 [0, 79] { R33 += 1 };
  s0 -> s0 [0, 65535] { R32 += 1, R33 += 1 };
  s0 -> s2 [82, 82] { R33 += 1 };
  s0 -> s1 [83, 65535] { R33 += 1 };
  s1 -> s1 [0, 79] { R33 += 1 };
  s1 -> s2 [82, 82] { R33 += 1 };
  s1 -> s1 [83, 65535] { R33 += 1 };
  s2 -> s2 [0, 79] { R33 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [82, 65535] { R33 += 1 };
  accepting s2;
};
automaton key2_6 {
  init s0;
  s0 -> s0 [0, 65535] { R34 += 1, R35 += 1 };
  s0 -> s1 [0, 65535] { R35 += 1, R27 += 1 };
  s1 -> s1 [0, 65535] { R35 += 1, R27 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton key2_7 {
  init s0;
  s0 -> s1 [0, 78] { R37 += 1 };
  s0 -> s0 [0, 65535] { R36 += 1, R37 += 1 };
  s0 -> s2 [79, 79] { R37 += 1 };
  s0 -> s3 [79, 79] { R37 += 1 };
  s0 -> s1 [83, 65535] { R37 += 1 };
  s1 -> s1 [0, 78] { R37 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [79, 79] { R37 += 1 };
  s1 -> s3 [79, 79] { R37 += 1 };
  s1 -> s1 [83, 65535] { R37 += 1 };
  s2 -> s2 [0, 79] { R37 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [83, 65535] { R37 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
};
synchronised {  // Automata constraining P19
automaton P19_0 {
  init s0;
  s0 -> s1 [111, 111];
  accepting s1;
};
};
constraint R0 = R33 && R2 = 0 && R3 - R32 = -1 && R32 - R33 < 1 && -1 < R32 && (R27 != 0 || ((R34 != 0 || ((R36 != 0 || ((R32 != R37 || R35 = R37 || R33 < R37 || R37 < 1) && (R32 = R37 || R32 < 1))) && (R36 = 0 || R32 < 1))) && (R34 = 0 || R32 < 1))) && (R28 != R32 || R29 = R33 || (R26 = 0 && R32 = R33)) && (R30 != R32 || R31 = R33 || (R26 = 0 && R32 = R33)) && (R27 = 0 || (R32 = R37 && R34 = 0 && R36 = 0 && (R35 = R37 || R33 < R37 || R37 < 0))) && (R28 = R32 || (R26 = 0 && R32 = R33)) && (R30 = R32 || (R26 = 0 && R32 = R33));
// End of Parikh automata intersection problem
