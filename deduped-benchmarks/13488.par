// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R4, R5, R6, R7, R8;
synchronised {  // Automata constraining key1
automaton key1_0 {
  init s0;
  s0 -> s0 [0, 64];
  s0 -> s1 [66, 66];
  s0 -> s0 [67, 65535];
  s1 -> s1 [0, 64];
  s1 -> s1 [66, 65535];
  accepting s1;
};
automaton key1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R0 += 1 };
  accepting s0;
};
automaton key1_2 {
  init s0;
  s0 -> s1 [0, 65];
  s0 -> s0 [0, 65535] { R1 += 1 };
  s0 -> s2 [66, 66];
  s0 -> s1 [67, 65535];
  s1 -> s1 [0, 65];
  s1 -> s2 [66, 66];
  s1 -> s1 [67, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton key1_3 {
  init s0;
  s0 -> s1 [0, 65] { R6 += 1 };
  s0 -> s0 [0, 65535] { R5 += 1, R6 += 1 };
  s0 -> s2 [66, 66] { R6 += 1 };
  s0 -> s1 [67, 65535] { R6 += 1 };
  s1 -> s1 [0, 65] { R6 += 1 };
  s1 -> s2 [66, 66] { R6 += 1 };
  s1 -> s1 [67, 65535] { R6 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R6 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton key1_4 {
  init s0;
  s0 -> s0 [0, 65535] { R7 += 1, R8 += 1 };
  s0 -> s1 [0, 65535] { R8 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R8 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
};
constraint R0 = R6 && R5 = 0 && R1 < 1 && -1 < R6 && (R7 != 0 || R6 = R8 || (R4 = 0 && R6 = 0)) && (R7 = 0 || (R4 = 0 && R6 = 0));
// End of Parikh automata intersection problem
