// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R12, R13, R14, R15, R16, R17, R18, R19, R2, R20, R21, R22, R5, R8, R9;
synchronised {  // Automata constraining key1
automaton key1_0 {
  init s0;
  s0 -> s0 [0, 64];
  s0 -> s1 [67, 67];
  s0 -> s0 [68, 65535];
  s1 -> s1 [0, 64];
  s1 -> s1 [67, 65535];
  accepting s1;
};
automaton key1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton key1_2 {
  init s0;
  s0 -> s1 [0, 66];
  s0 -> s0 [0, 65535] { R5 += 1 };
  s0 -> s2 [67, 67];
  s0 -> s1 [68, 65535];
  s1 -> s1 [0, 66];
  s1 -> s2 [67, 67];
  s1 -> s1 [68, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton key1_3 {
  init s0;
  s0 -> s1 [0, 66] { R14 += 1 };
  s0 -> s0 [0, 65535] { R13 += 1, R14 += 1 };
  s0 -> s2 [67, 67] { R14 += 1 };
  s0 -> s1 [68, 65535] { R14 += 1 };
  s1 -> s1 [0, 66] { R14 += 1 };
  s1 -> s2 [67, 67] { R14 += 1 };
  s1 -> s1 [68, 65535] { R14 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R14 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton key1_4 {
  init s0;
  s0 -> s1 [0, 65535] { R16 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R15 += 1, R16 += 1 };
  s1 -> s1 [0, 65535] { R16 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton key1_5 {
  init s0;
  s0 -> s1 [0, 66] { R18 += 1 };
  s0 -> s0 [0, 65535] { R17 += 1, R18 += 1 };
  s0 -> s2 [0, 65535] { R18 += 1, R2 += 1 };
  s0 -> s3 [67, 67] { R18 += 1 };
  s0 -> s1 [68, 65535] { R18 += 1 };
  s1 -> s1 [0, 66] { R18 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [67, 67] { R18 += 1 };
  s1 -> s1 [68, 65535] { R18 += 1 };
  s2 -> s1 [0, 66] { R18 += 1 };
  s2 -> s2 [0, 65535] { R18 += 1, R2 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [67, 67] { R18 += 1 };
  s2 -> s1 [68, 65535] { R18 += 1 };
  s3 -> s3 [0, 65535] { R18 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton key1_6 {
  init s0;
  s0 -> s1 [0, 66] { R20 += 1, R10 += 1 };
  s0 -> s2 [0, 65535] { R20 += 1, R9 += 1, R10 += 1 };
  s0 -> s0 [0, 65535] { R19 += 1, R20 += 1 };
  s0 -> s1 [68, 65535] { R20 += 1, R10 += 1 };
  s1 -> s1 [0, 66] { R20 += 1, R10 += 1 };
  s1 -> s1 [0, 65535] { R20 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [68, 65535] { R20 += 1, R10 += 1 };
  s2 -> s1 [0, 66] { R20 += 1, R10 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R20 += 1, R9 += 1, R10 += 1 };
  s2 -> s1 [68, 65535] { R20 += 1, R10 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton key1_7 {
  init s0;
  s0 -> s1 [0, 65535] { R22 += 1, R12 += 1, R8 += 1 };
  s0 -> s2 [0, 65535] { R22 += 1, R11 += 1, R12 += 1 };
  s0 -> s0 [0, 65535] { R21 += 1, R22 += 1 };
  s1 -> s1 [0, 65535] { R22 += 1, R12 += 1, R8 += 1 };
  s1 -> s4 [0, 65535] { R22 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R22 += 1, R12 += 1, R8 += 1 };
  s2 -> s2 [0, 65535] { R22 += 1, R11 += 1, R12 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R22 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
};
constraint R1 = R14 && R13 = 0 && -1 < R0 && R2 < 1 && R5 < 1 && -1 < R14 && (R0 != 0 || R8 = 0 || (R9 = 0 && R10 = 0)) && (R0 != 0 || R8 = 0 || (R11 = 0 && R12 = 0)) && (R0 != 0 || ((R15 != 0 || ((R17 != 0 || ((R19 != 0 || ((R21 != 0 || ((R14 != R22 || ((R16 != R22 || ((R18 != R22 || R20 = R22 || R22 < 1) && (R18 = R22 || R22 < 1))) && (R16 = R22 || R22 < 1))) && (R14 = R22 || R14 < 1))) && (R21 = 0 || R14 < 1))) && (R19 = 0 || R14 < 1))) && (R17 = 0 || R14 < 1))) && (R15 = 0 || R14 < 1))) && (R9 != 0 || R0 = R10 || R0 < 1) && (R11 != 0 || R0 = R12 || R0 < 1) && (R15 != 0 || ((R17 != 0 || ((R19 != 0 || ((R21 != 0 || ((R14 != R22 || ((R16 != R22 || ((R18 != R22 || R20 = R22 || R0 < 1 || R22 < 0) && (R18 = R22 || R0 < 1 || R22 < 0))) && (R16 = R22 || R0 < 1 || R22 < 0))) && (R14 = R22 || R0 < 1))) && (R21 = 0 || R0 < 1))) && (R19 = 0 || R0 < 1))) && (R17 = 0 || R0 < 1))) && (R9 = 0 || R0 < 1) && (R11 = 0 || R0 < 1) && (R15 = 0 || R0 < 1);
// End of Parikh automata intersection problem
