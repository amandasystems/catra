// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R12, R13, R136, R137, R138, R139, R14, R140, R141, R142, R143, R144, R145, R146, R147, R148, R149, R15, R150, R151, R152, R153, R154, R155, R156, R157, R158, R159, R160, R161, R162, R163, R164, R165, R166, R167, R168, R169, R170, R171, R172, R173, R174, R175, R176, R177, R178, R179, R180, R181, R182, R183, R184, R185, R186, R187, R188, R189, R190, R191, R2, R3, R6, R76, R77, R78, R79, R9;
synchronised {  // Automata constraining key1
automaton key1_0 {
  init s0;
  s0 -> s0 [0, 64];
  s0 -> s1 [67, 67];
  s0 -> s0 [68, 65535];
  s1 -> s1 [0, 64];
  s1 -> s1 [67, 65535];
  accepting s1;
};
automaton key1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton key1_2 {
  init s0;
  s0 -> s1 [0, 66];
  s0 -> s0 [0, 65535] { R9 += 1 };
  s0 -> s2 [67, 67];
  s0 -> s1 [68, 65535];
  s1 -> s1 [0, 66];
  s1 -> s2 [67, 67];
  s1 -> s1 [68, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton key1_3 {
  init s0;
  s0 -> s0 [0, 65535] { R76 += 1, R77 += 1 };
  s0 -> s1 [0, 65535] { R77 += 1, R15 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R77 += 1, R15 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton key1_4 {
  init s0;
  s0 -> s1 [0, 66] { R79 += 1 };
  s0 -> s0 [0, 65535] { R78 += 1, R79 += 1 };
  s0 -> s2 [67, 67] { R79 += 1 };
  s0 -> s3 [67, 67] { R79 += 1 };
  s0 -> s1 [91, 65535] { R79 += 1 };
  s1 -> s1 [0, 66] { R79 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [67, 67] { R79 += 1 };
  s1 -> s3 [67, 67] { R79 += 1 };
  s1 -> s1 [91, 65535] { R79 += 1 };
  s2 -> s2 [0, 67] { R79 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [91, 65535] { R79 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton key1_5 {
  init s0;
  s0 -> s1 [0, 66] { R167 += 1 };
  s0 -> s0 [0, 65535] { R166 += 1, R167 += 1 };
  s0 -> s2 [67, 67] { R167 += 1 };
  s0 -> s1 [68, 65535] { R167 += 1 };
  s1 -> s1 [0, 66] { R167 += 1 };
  s1 -> s2 [67, 67] { R167 += 1 };
  s1 -> s1 [68, 65535] { R167 += 1 };
  s2 -> s2 [0, 65535] { R167 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton key1_6 {
  init s0;
  s0 -> s1 [0, 65535] { R169 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R168 += 1, R169 += 1 };
  s1 -> s1 [0, 65535] { R169 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton key1_7 {
  init s0;
  s0 -> s1 [0, 66] { R171 += 1 };
  s0 -> s0 [0, 65535] { R170 += 1, R171 += 1 };
  s0 -> s2 [0, 65535] { R171 += 1, R6 += 1 };
  s0 -> s3 [67, 67] { R171 += 1 };
  s0 -> s1 [68, 65535] { R171 += 1 };
  s1 -> s1 [0, 66] { R171 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [67, 67] { R171 += 1 };
  s1 -> s1 [68, 65535] { R171 += 1 };
  s2 -> s1 [0, 66] { R171 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R171 += 1, R6 += 1 };
  s2 -> s3 [67, 67] { R171 += 1 };
  s2 -> s1 [68, 65535] { R171 += 1 };
  s3 -> s3 [0, 65535] { R171 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton key1_8 {
  init s0;
  s0 -> s1 [0, 65535] { R173 += 1, R143 += 1, R14 += 1 };
  s0 -> s0 [0, 65535] { R172 += 1, R173 += 1 };
  s0 -> s2 [0, 65535] { R173 += 1, R142 += 1, R143 += 1 };
  s1 -> s1 [0, 65535] { R173 += 1, R143 += 1, R14 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R173 += 1 };
  s2 -> s1 [0, 65535] { R173 += 1, R143 += 1, R14 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R173 += 1, R142 += 1, R143 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R173 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton key1_9 {
  init s0;
  s0 -> s1 [0, 66] { R175 += 1, R145 += 1 };
  s0 -> s2 [0, 65535] { R175 += 1, R144 += 1, R145 += 1 };
  s0 -> s0 [0, 65535] { R174 += 1, R175 += 1 };
  s0 -> s3 [67, 67] { R175 += 1, R145 += 1 };
  s0 -> s4 [67, 67] { R175 += 1, R145 += 1 };
  s0 -> s1 [91, 65535] { R175 += 1, R145 += 1 };
  s1 -> s1 [0, 66] { R175 += 1, R145 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R175 += 1 };
  s1 -> s3 [67, 67] { R175 += 1, R145 += 1 };
  s1 -> s4 [67, 67] { R175 += 1, R145 += 1 };
  s1 -> s1 [91, 65535] { R175 += 1, R145 += 1 };
  s2 -> s1 [0, 66] { R175 += 1, R145 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R175 += 1, R144 += 1, R145 += 1 };
  s2 -> s3 [67, 67] { R175 += 1, R145 += 1 };
  s2 -> s4 [67, 67] { R175 += 1, R145 += 1 };
  s2 -> s1 [91, 65535] { R175 += 1, R145 += 1 };
  s3 -> s3 [0, 67] { R175 += 1, R145 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R175 += 1 };
  s3 -> s3 [91, 65535] { R175 += 1, R145 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R175 += 1 };
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton key1_10 {
  init s0;
  s0 -> s1 [0, 66] { R177 += 1, R151 += 1 };
  s0 -> s2 [0, 65535] { R177 += 1, R150 += 1, R151 += 1 };
  s0 -> s0 [0, 65535] { R176 += 1, R177 += 1 };
  s0 -> s3 [67, 67] { R177 += 1, R151 += 1 };
  s0 -> s1 [68, 65535] { R177 += 1, R151 += 1 };
  s1 -> s1 [0, 66] { R177 += 1, R151 += 1 };
  s1 -> s3 [67, 67] { R177 += 1, R151 += 1 };
  s1 -> s1 [68, 65535] { R177 += 1, R151 += 1 };
  s2 -> s1 [0, 66] { R177 += 1, R151 += 1 };
  s2 -> s2 [0, 65535] { R177 += 1, R150 += 1, R151 += 1 };
  s2 -> s3 [67, 67] { R177 += 1, R151 += 1 };
  s2 -> s1 [68, 65535] { R177 += 1, R151 += 1 };
  s3 -> s3 [0, 65535] { R177 += 1, R151 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R177 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R177 += 1 };
  accepting s3, s4, s5;
};
automaton key1_11 {
  init s0;
  s0 -> s0 [0, 65535] { R178 += 1, R179 += 1 };
  s0 -> s1 [0, 65535] { R179 += 1, R152 += 1, R153 += 1 };
  s0 -> s2 [0, 65535] { R179 += 1, R153 += 1, R0 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R179 += 1, R152 += 1, R153 += 1 };
  s1 -> s2 [0, 65535] { R179 += 1, R153 += 1, R0 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R179 += 1 };
  s2 -> s2 [0, 65535] { R179 += 1, R153 += 1, R0 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R179 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton key1_12 {
  init s0;
  s0 -> s1 [0, 66] { R181 += 1, R155 += 1 };
  s0 -> s2 [0, 65535] { R181 += 1, R155 += 1, R3 += 1 };
  s0 -> s3 [0, 65535] { R181 += 1, R154 += 1, R155 += 1 };
  s0 -> s0 [0, 65535] { R180 += 1, R181 += 1 };
  s0 -> s4 [67, 67] { R181 += 1, R155 += 1 };
  s0 -> s1 [68, 65535] { R181 += 1, R155 += 1 };
  s1 -> s1 [0, 66] { R181 += 1, R155 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R181 += 1 };
  s1 -> s4 [67, 67] { R181 += 1, R155 += 1 };
  s1 -> s1 [68, 65535] { R181 += 1, R155 += 1 };
  s2 -> s1 [0, 66] { R181 += 1, R155 += 1 };
  s2 -> s2 [0, 65535] { R181 += 1, R155 += 1, R3 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R181 += 1 };
  s2 -> s4 [67, 67] { R181 += 1, R155 += 1 };
  s2 -> s1 [68, 65535] { R181 += 1, R155 += 1 };
  s3 -> s1 [0, 66] { R181 += 1, R155 += 1 };
  s3 -> s2 [0, 65535] { R181 += 1, R155 += 1, R3 += 1 };
  s3 -> s3 [0, 65535] { R181 += 1, R154 += 1, R155 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s4 [67, 67] { R181 += 1, R155 += 1 };
  s3 -> s1 [68, 65535] { R181 += 1, R155 += 1 };
  s4 -> s4 [0, 65535] { R181 += 1, R155 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R181 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton key1_13 {
  init s0;
  s0 -> s1 [0, 66] { R183 += 1, R157 += 1, R137 += 1 };
  s0 -> s0 [0, 65535] { R182 += 1, R183 += 1 };
  s0 -> s2 [0, 65535] { R183 += 1, R157 += 1, R136 += 1, R137 += 1 };
  s0 -> s3 [0, 65535] { R183 += 1, R156 += 1, R157 += 1 };
  s0 -> s1 [68, 65535] { R183 += 1, R157 += 1, R137 += 1 };
  s1 -> s1 [0, 66] { R183 += 1, R157 += 1, R137 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R183 += 1, R157 += 1 };
  s1 -> s5 [0, 65535] { R183 += 1 };
  s1 -> s1 [68, 65535] { R183 += 1, R157 += 1, R137 += 1 };
  s2 -> s1 [0, 66] { R183 += 1, R157 += 1, R137 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R183 += 1 };
  s2 -> s2 [0, 65535] { R183 += 1, R157 += 1, R136 += 1, R137 += 1 };
  s2 -> s1 [68, 65535] { R183 += 1, R157 += 1, R137 += 1 };
  s3 -> s1 [0, 66] { R183 += 1, R157 += 1, R137 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R183 += 1, R157 += 1, R136 += 1, R137 += 1 };
  s3 -> s3 [0, 65535] { R183 += 1, R156 += 1, R157 += 1 };
  s3 -> s1 [68, 65535] { R183 += 1, R157 += 1, R137 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R183 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton key1_14 {
  init s0;
  s0 -> s1 [0, 65535] { R185 += 1, R158 += 1, R159 += 1 };
  s0 -> s2 [0, 65535] { R185 += 1, R159 += 1, R139 += 1, R12 += 1 };
  s0 -> s3 [0, 65535] { R185 += 1, R159 += 1, R138 += 1, R139 += 1 };
  s0 -> s0 [0, 65535] { R184 += 1, R185 += 1 };
  s1 -> s1 [0, 65535] { R185 += 1, R158 += 1, R159 += 1 };
  s1 -> s2 [0, 65535] { R185 += 1, R159 += 1, R139 += 1, R12 += 1 };
  s1 -> s3 [0, 65535] { R185 += 1, R159 += 1, R138 += 1, R139 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R185 += 1, R159 += 1 };
  s2 -> s2 [0, 65535] { R185 += 1, R159 += 1, R139 += 1, R12 += 1 };
  s2 -> s4 [0, 65535] { R185 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R185 += 1, R159 += 1, R139 += 1, R12 += 1 };
  s3 -> s3 [0, 65535] { R185 += 1, R159 += 1, R138 += 1, R139 += 1 };
  s3 -> s4 [0, 65535] { R185 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R185 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R185 += 1, R159 += 1 };
  s6 -> s4 [0, 65535] { R185 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton key1_15 {
  init s0;
  s0 -> s1 [0, 67] { R187 += 1, R161 += 1, R141 += 1 };
  s0 -> s2 [0, 65535] { R187 += 1, R161 += 1, R140 += 1, R141 += 1 };
  s0 -> s3 [0, 65535] { R187 += 1, R160 += 1, R161 += 1 };
  s0 -> s0 [0, 65535] { R186 += 1, R187 += 1 };
  s0 -> s4 [90, 90] { R187 += 1, R161 += 1, R141 += 1 };
  s0 -> s1 [91, 65535] { R187 += 1, R161 += 1, R141 += 1 };
  s1 -> s1 [0, 67] { R187 += 1, R161 += 1, R141 += 1 };
  s1 -> s4 [90, 90] { R187 += 1, R161 += 1, R141 += 1 };
  s1 -> s1 [91, 65535] { R187 += 1, R161 += 1, R141 += 1 };
  s2 -> s1 [0, 67] { R187 += 1, R161 += 1, R141 += 1 };
  s2 -> s2 [0, 65535] { R187 += 1, R161 += 1, R140 += 1, R141 += 1 };
  s2 -> s4 [90, 90] { R187 += 1, R161 += 1, R141 += 1 };
  s2 -> s1 [91, 65535] { R187 += 1, R161 += 1, R141 += 1 };
  s3 -> s1 [0, 67] { R187 += 1, R161 += 1, R141 += 1 };
  s3 -> s2 [0, 65535] { R187 += 1, R161 += 1, R140 += 1, R141 += 1 };
  s3 -> s3 [0, 65535] { R187 += 1, R160 += 1, R161 += 1 };
  s3 -> s4 [90, 90] { R187 += 1, R161 += 1, R141 += 1 };
  s3 -> s1 [91, 65535] { R187 += 1, R161 += 1, R141 += 1 };
  s4 -> s4 [0, 67] { R187 += 1, R161 += 1, R141 += 1 };
  s4 -> s4 [0, 65535] { R187 += 1, R161 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R187 += 1 };
  s4 -> s4 [90, 65535] { R187 += 1, R161 += 1, R141 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R187 += 1 };
  accepting s4, s5, s6;
};
automaton key1_16 {
  init s0;
  s0 -> s1 [0, 65535] { R189 += 1, R162 += 1, R163 += 1 };
  s0 -> s0 [0, 65535] { R188 += 1, R189 += 1 };
  s0 -> s2 [0, 65535] { R189 += 1, R163 += 1, R147 += 1, R13 += 1 };
  s0 -> s3 [0, 65535] { R189 += 1, R163 += 1, R146 += 1, R147 += 1 };
  s1 -> s1 [0, 65535] { R189 += 1, R162 += 1, R163 += 1 };
  s1 -> s2 [0, 65535] { R189 += 1, R163 += 1, R147 += 1, R13 += 1 };
  s1 -> s3 [0, 65535] { R189 += 1, R163 += 1, R146 += 1, R147 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R189 += 1, R163 += 1, R147 += 1, R13 += 1 };
  s2 -> s4 [0, 65535] { R189 += 1 };
  s2 -> s6 [0, 65535] { R189 += 1, R163 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R189 += 1, R163 += 1, R147 += 1, R13 += 1 };
  s3 -> s4 [0, 65535] { R189 += 1 };
  s3 -> s3 [0, 65535] { R189 += 1, R163 += 1, R146 += 1, R147 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R189 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R189 += 1 };
  s6 -> s6 [0, 65535] { R189 += 1, R163 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton key1_17 {
  init s0;
  s0 -> s1 [0, 66] { R191 += 1, R165 += 1, R149 += 1 };
  s0 -> s2 [0, 65535] { R191 += 1, R165 += 1, R148 += 1, R149 += 1 };
  s0 -> s3 [0, 65535] { R191 += 1, R164 += 1, R165 += 1 };
  s0 -> s0 [0, 65535] { R190 += 1, R191 += 1 };
  s0 -> s4 [67, 67] { R191 += 1, R165 += 1, R149 += 1 };
  s0 -> s5 [67, 67] { R191 += 1, R165 += 1, R149 += 1 };
  s0 -> s1 [91, 65535] { R191 += 1, R165 += 1, R149 += 1 };
  s1 -> s1 [0, 66] { R191 += 1, R165 += 1, R149 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R191 += 1, R165 += 1 };
  s1 -> s7 [0, 65535] { R191 += 1 };
  s1 -> s4 [67, 67] { R191 += 1, R165 += 1, R149 += 1 };
  s1 -> s5 [67, 67] { R191 += 1, R165 += 1, R149 += 1 };
  s1 -> s1 [91, 65535] { R191 += 1, R165 += 1, R149 += 1 };
  s2 -> s1 [0, 66] { R191 += 1, R165 += 1, R149 += 1 };
  s2 -> s2 [0, 65535] { R191 += 1, R165 += 1, R148 += 1, R149 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s7 [0, 65535] { R191 += 1 };
  s2 -> s4 [67, 67] { R191 += 1, R165 += 1, R149 += 1 };
  s2 -> s5 [67, 67] { R191 += 1, R165 += 1, R149 += 1 };
  s2 -> s1 [91, 65535] { R191 += 1, R165 += 1, R149 += 1 };
  s3 -> s1 [0, 66] { R191 += 1, R165 += 1, R149 += 1 };
  s3 -> s2 [0, 65535] { R191 += 1, R165 += 1, R148 += 1, R149 += 1 };
  s3 -> s3 [0, 65535] { R191 += 1, R164 += 1, R165 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s4 [67, 67] { R191 += 1, R165 += 1, R149 += 1 };
  s3 -> s5 [67, 67] { R191 += 1, R165 += 1, R149 += 1 };
  s3 -> s1 [91, 65535] { R191 += 1, R165 += 1, R149 += 1 };
  s4 -> s4 [0, 65535] { R191 += 1, R165 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R191 += 1 };
  s5 -> s5 [0, 67] { R191 += 1, R165 += 1, R149 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R191 += 1, R165 += 1 };
  s5 -> s7 [0, 65535] { R191 += 1 };
  s5 -> s5 [91, 65535] { R191 += 1, R165 += 1, R149 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R191 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
};
synchronised {  // Automata constraining P13
automaton P13_0 {
  init s0;
  s0 -> s1 [99, 99];
  accepting s1;
};
};
constraint R0 = R141 && R1 = R161 && R2 = R187 && R140 = 0 && R150 = 0 && R151 = R161 && R160 = 0 && R166 = 0 && R167 = R187 && R176 = 0 && R177 = R187 && R186 = 0 && R3 < 1 && R6 < 1 && R9 < 1 && -1 < R141 && -1 < R161 && -1 < R187 && (R136 != 0 || R137 = R141 || (R12 = 0 && R141 = 0)) && (R138 != 0 || R139 = R141 || (R12 = 0 && R141 = 0)) && (R152 != 0 || R153 = R161 || (R141 = 0 && R161 = 0)) && (R154 != 0 || R155 = R161 || (R141 = 0 && R161 = 0)) && (R156 != 0 || R157 = R161 || (R141 = 0 && R161 = 0)) && (R158 != 0 || R159 = R161 || (R141 = 0 && R161 = 0)) && (R161 != 0 || ((R188 != 0 || ((R190 != 0 || ((R187 != R191 || R189 = R191 || R191 < 1) && (R187 = R191 || R187 < 1))) && (R190 = 0 || R187 < 1))) && (R188 = 0 || R187 < 1))) && (R162 != 0 || R161 = R163 || (R141 = 0 && R161 = 0)) && (R164 != 0 || R161 = R165 || (R141 = 0 && R161 = 0)) && (R168 != 0 || R169 = R187 || (R161 = 0 && R187 = 0)) && (R170 != 0 || R171 = R187 || (R161 = 0 && R187 = 0)) && (R172 != 0 || R173 = R187 || (R161 = 0 && R187 = 0)) && (R174 != 0 || R175 = R187 || (R161 = 0 && R187 = 0)) && (R178 != 0 || R179 = R187 || (R161 = 0 && R187 = 0)) && (R180 != 0 || R181 = R187 || (R161 = 0 && R187 = 0)) && (R182 != 0 || R183 = R187 || (R161 = 0 && R187 = 0)) && (R184 != 0 || R185 = R187 || (R161 = 0 && R187 = 0)) && (R188 != 0 || ((R190 != 0 || ((R187 != R191 || R189 = R191 || R161 < 1 || R191 < 0) && (R187 = R191 || R161 < 1))) && (R190 = 0 || R161 < 1))) && (R13 = 0 || (R146 = 0 && R147 = 0)) && (R13 = 0 || (R148 = 0 && R149 = 0)) && (R14 = 0 || (R142 = 0 && R143 = 0)) && (R14 = 0 || (R144 = 0 && R145 = 0)) && (R15 = 0 || (R76 = 0 && R77 = 0)) && (R15 = 0 || (R78 = 0 && R79 = 0)) && (R136 = 0 || (R12 = 0 && R141 = 0)) && (R138 = 0 || (R12 = 0 && R141 = 0)) && (R152 = 0 || (R141 = 0 && R161 = 0)) && (R154 = 0 || (R141 = 0 && R161 = 0)) && (R156 = 0 || (R141 = 0 && R161 = 0)) && (R158 = 0 || (R141 = 0 && R161 = 0)) && (R162 = 0 || (R141 = 0 && R161 = 0)) && (R164 = 0 || (R141 = 0 && R161 = 0)) && (R168 = 0 || (R161 = 0 && R187 = 0)) && (R170 = 0 || (R161 = 0 && R187 = 0)) && (R172 = 0 || (R161 = 0 && R187 = 0)) && (R174 = 0 || (R161 = 0 && R187 = 0)) && (R178 = 0 || (R161 = 0 && R187 = 0)) && (R180 = 0 || (R161 = 0 && R187 = 0)) && (R182 = 0 || (R161 = 0 && R187 = 0)) && (R184 = 0 || (R161 = 0 && R187 = 0)) && (R188 = 0 || R161 < 1);
// End of Parikh automata intersection problem
