// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R139, R142, R145, R146, R147, R148, R149, R150, R151, R152, R153, R154, R155, R156, R157, R158, R159, R160, R161, R162, R163, R164, R165, R166, R167, R168, R169, R170, R171, R172, R173, R174, R175, R2, R4, R5;
synchronised {  // Automata constraining key1
automaton key1_0 {
  init s0;
  s0 -> s0 [0, 64];
  s0 -> s1 [67, 67];
  s0 -> s0 [68, 65535];
  s1 -> s1 [0, 64];
  s1 -> s1 [67, 65535];
  accepting s1;
};
automaton key1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton key1_2 {
  init s0;
  s0 -> s1 [0, 66];
  s0 -> s0 [0, 65535] { R142 += 1 };
  s0 -> s2 [67, 67];
  s0 -> s1 [68, 65535];
  s1 -> s1 [0, 66];
  s1 -> s2 [67, 67];
  s1 -> s1 [68, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton key1_3 {
  init s0;
  s0 -> s1 [0, 66] { R161 += 1 };
  s0 -> s0 [0, 65535] { R160 += 1, R161 += 1 };
  s0 -> s2 [67, 67] { R161 += 1 };
  s0 -> s1 [68, 65535] { R161 += 1 };
  s1 -> s1 [0, 66] { R161 += 1 };
  s1 -> s2 [67, 67] { R161 += 1 };
  s1 -> s1 [68, 65535] { R161 += 1 };
  s2 -> s2 [0, 65535] { R161 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton key1_4 {
  init s0;
  s0 -> s0 [0, 65535] { R162 += 1, R163 += 1 };
  s0 -> s1 [0, 65535] { R163 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R163 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton key1_5 {
  init s0;
  s0 -> s1 [0, 66] { R165 += 1 };
  s0 -> s2 [0, 65535] { R165 += 1, R139 += 1 };
  s0 -> s0 [0, 65535] { R164 += 1, R165 += 1 };
  s0 -> s3 [67, 67] { R165 += 1 };
  s0 -> s1 [68, 65535] { R165 += 1 };
  s1 -> s1 [0, 66] { R165 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [67, 67] { R165 += 1 };
  s1 -> s1 [68, 65535] { R165 += 1 };
  s2 -> s1 [0, 66] { R165 += 1 };
  s2 -> s2 [0, 65535] { R165 += 1, R139 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [67, 67] { R165 += 1 };
  s2 -> s1 [68, 65535] { R165 += 1 };
  s3 -> s3 [0, 65535] { R165 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton key1_6 {
  init s0;
  s0 -> s1 [0, 66] { R167 += 1, R151 += 1 };
  s0 -> s0 [0, 65535] { R166 += 1, R167 += 1 };
  s0 -> s2 [0, 65535] { R167 += 1, R150 += 1, R151 += 1 };
  s0 -> s3 [67, 67] { R167 += 1, R151 += 1 };
  s0 -> s1 [68, 65535] { R167 += 1, R151 += 1 };
  s1 -> s1 [0, 66] { R167 += 1, R151 += 1 };
  s1 -> s3 [67, 67] { R167 += 1, R151 += 1 };
  s1 -> s1 [68, 65535] { R167 += 1, R151 += 1 };
  s2 -> s1 [0, 66] { R167 += 1, R151 += 1 };
  s2 -> s2 [0, 65535] { R167 += 1, R150 += 1, R151 += 1 };
  s2 -> s3 [67, 67] { R167 += 1, R151 += 1 };
  s2 -> s1 [68, 65535] { R167 += 1, R151 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R167 += 1, R151 += 1 };
  s3 -> s5 [0, 65535] { R167 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R167 += 1 };
  accepting s3, s4, s5;
};
automaton key1_7 {
  init s0;
  s0 -> s1 [0, 65535] { R169 += 1, R153 += 1, R0 += 1 };
  s0 -> s2 [0, 65535] { R169 += 1, R152 += 1, R153 += 1 };
  s0 -> s0 [0, 65535] { R168 += 1, R169 += 1 };
  s1 -> s1 [0, 65535] { R169 += 1, R153 += 1, R0 += 1 };
  s1 -> s4 [0, 65535] { R169 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R169 += 1, R153 += 1, R0 += 1 };
  s2 -> s2 [0, 65535] { R169 += 1, R152 += 1, R153 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R169 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton key1_8 {
  init s0;
  s0 -> s1 [0, 66] { R171 += 1, R155 += 1, R5 += 1 };
  s0 -> s2 [0, 65535] { R171 += 1, R154 += 1, R155 += 1 };
  s0 -> s0 [0, 65535] { R170 += 1, R171 += 1 };
  s0 -> s3 [0, 65535] { R171 += 1, R155 += 1, R4 += 1, R5 += 1 };
  s0 -> s4 [67, 67] { R171 += 1, R155 += 1 };
  s0 -> s1 [68, 65535] { R171 += 1, R155 += 1, R5 += 1 };
  s1 -> s1 [0, 66] { R171 += 1, R155 += 1, R5 += 1 };
  s1 -> s4 [67, 67] { R171 += 1, R155 += 1 };
  s1 -> s1 [68, 65535] { R171 += 1, R155 += 1, R5 += 1 };
  s2 -> s1 [0, 66] { R171 += 1, R155 += 1, R5 += 1 };
  s2 -> s2 [0, 65535] { R171 += 1, R154 += 1, R155 += 1 };
  s2 -> s3 [0, 65535] { R171 += 1, R155 += 1, R4 += 1, R5 += 1 };
  s2 -> s4 [67, 67] { R171 += 1, R155 += 1 };
  s2 -> s1 [68, 65535] { R171 += 1, R155 += 1, R5 += 1 };
  s3 -> s1 [0, 66] { R171 += 1, R155 += 1, R5 += 1 };
  s3 -> s3 [0, 65535] { R171 += 1, R155 += 1, R4 += 1, R5 += 1 };
  s3 -> s4 [67, 67] { R171 += 1, R155 += 1 };
  s3 -> s1 [68, 65535] { R171 += 1, R155 += 1, R5 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R171 += 1, R155 += 1 };
  s4 -> s6 [0, 65535] { R171 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R171 += 1 };
  accepting s4, s5, s6;
};
automaton key1_9 {
  init s0;
  s0 -> s1 [0, 66] { R173 += 1, R157 += 1, R147 += 1 };
  s0 -> s2 [0, 65535] { R173 += 1, R157 += 1, R146 += 1, R147 += 1 };
  s0 -> s3 [0, 65535] { R173 += 1, R156 += 1, R157 += 1 };
  s0 -> s0 [0, 65535] { R172 += 1, R173 += 1 };
  s0 -> s4 [67, 67] { R173 += 1, R157 += 1, R147 += 1 };
  s0 -> s1 [68, 65535] { R173 += 1, R157 += 1, R147 += 1 };
  s1 -> s1 [0, 66] { R173 += 1, R157 += 1, R147 += 1 };
  s1 -> s4 [67, 67] { R173 += 1, R157 += 1, R147 += 1 };
  s1 -> s1 [68, 65535] { R173 += 1, R157 += 1, R147 += 1 };
  s2 -> s1 [0, 66] { R173 += 1, R157 += 1, R147 += 1 };
  s2 -> s2 [0, 65535] { R173 += 1, R157 += 1, R146 += 1, R147 += 1 };
  s2 -> s4 [67, 67] { R173 += 1, R157 += 1, R147 += 1 };
  s2 -> s1 [68, 65535] { R173 += 1, R157 += 1, R147 += 1 };
  s3 -> s1 [0, 66] { R173 += 1, R157 += 1, R147 += 1 };
  s3 -> s2 [0, 65535] { R173 += 1, R157 += 1, R146 += 1, R147 += 1 };
  s3 -> s3 [0, 65535] { R173 += 1, R156 += 1, R157 += 1 };
  s3 -> s4 [67, 67] { R173 += 1, R157 += 1, R147 += 1 };
  s3 -> s1 [68, 65535] { R173 += 1, R157 += 1, R147 += 1 };
  s4 -> s5 [0, 65535] { R173 += 1, R157 += 1 };
  s4 -> s6 [0, 65535] { R173 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s4 [0, 65535] { R173 += 1, R157 += 1, R147 += 1 };
  s5 -> s5 [0, 65535] { R173 += 1, R157 += 1 };
  s5 -> s6 [0, 65535] { R173 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s6 [0, 65535] { R173 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s4, s5, s6, s7;
};
automaton key1_10 {
  init s0;
  s0 -> s1 [0, 65535] { R175 += 1, R159 += 1, R149 += 1, R145 += 1 };
  s0 -> s2 [0, 65535] { R175 += 1, R159 += 1, R148 += 1, R149 += 1 };
  s0 -> s3 [0, 65535] { R175 += 1, R158 += 1, R159 += 1 };
  s0 -> s0 [0, 65535] { R174 += 1, R175 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R175 += 1, R159 += 1, R149 += 1, R145 += 1 };
  s1 -> s5 [0, 65535] { R175 += 1 };
  s1 -> s6 [0, 65535] { R175 += 1, R159 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R175 += 1, R159 += 1, R149 += 1, R145 += 1 };
  s2 -> s2 [0, 65535] { R175 += 1, R159 += 1, R148 += 1, R149 += 1 };
  s2 -> s5 [0, 65535] { R175 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R175 += 1, R159 += 1, R149 += 1, R145 += 1 };
  s3 -> s2 [0, 65535] { R175 += 1, R159 += 1, R148 += 1, R149 += 1 };
  s3 -> s3 [0, 65535] { R175 += 1, R158 += 1, R159 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R175 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R175 += 1 };
  s6 -> s6 [0, 65535] { R175 += 1, R159 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R0 = R147 && R1 = R157 && R2 = R173 && R4 = 0 && R5 - R146 = -1 && R150 = 0 && R151 = R157 && R154 = 0 && R155 = R157 && R156 = 0 && R160 = 0 && R161 = R173 && R166 = 0 && R167 = R173 && R170 = 0 && R171 = R173 && R172 = 0 && R139 < 1 && R142 < 1 && R146 - R147 < 1 && -1 < R146 && -1 < R157 && -1 < R173 && (R146 != R148 || R147 = R149 || ((R145 != 0 || R147 - R148 < 1 || R148 < 0) && (R145 = 0 || R147 < R148 || R148 < 0))) && (R152 != 0 || R153 = R157 || (R147 = 0 && (R146 != 0 || R157 < 1))) && (R158 != 0 || R157 = R159 || (R147 = 0 && (R146 != 0 || R157 < 1))) && (R162 != 0 || R163 = R173 || (R157 = 0 && R173 = 0)) && (R164 != 0 || R165 = R173 || (R157 = 0 && R173 = 0)) && (R168 != 0 || R169 = R173 || (R157 = 0 && R173 = 0)) && (R174 != 0 || R173 = R175 || (R157 = 0 && R173 = 0)) && (R146 = R148 || (R145 = 0 && R146 = R147)) && (R152 = 0 || (R147 = 0 && (R146 != 0 || R157 < 1))) && (R158 = 0 || (R147 = 0 && (R146 != 0 || R157 < 1))) && (R162 = 0 || (R157 = 0 && R173 = 0)) && (R164 = 0 || (R157 = 0 && R173 = 0)) && (R168 = 0 || (R157 = 0 && R173 = 0)) && (R174 = 0 || (R157 = 0 && R173 = 0));
// End of Parikh automata intersection problem
