// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R140, R141, R2, R207, R210, R211, R212, R213, R214, R215, R216, R217, R218, R219, R220, R221, R222, R223, R224, R225, R226, R227, R228, R229, R230, R231, R232, R233, R234, R235, R236, R237, R238, R239, R240, R4, R5;
synchronised {  // Automata constraining key1
automaton key1_0 {
  init s0;
  s0 -> s0 [0, 64];
  s0 -> s1 [67, 67];
  s0 -> s0 [68, 65535];
  s1 -> s1 [0, 64];
  s1 -> s1 [67, 65535];
  accepting s1;
};
automaton key1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton key1_2 {
  init s0;
  s0 -> s1 [0, 66];
  s0 -> s0 [0, 65535] { R207 += 1 };
  s0 -> s2 [67, 67];
  s0 -> s1 [68, 65535];
  s1 -> s1 [0, 66];
  s1 -> s2 [67, 67];
  s1 -> s1 [68, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton key1_3 {
  init s0;
  s0 -> s1 [0, 66] { R226 += 1 };
  s0 -> s0 [0, 65535] { R225 += 1, R226 += 1 };
  s0 -> s2 [67, 67] { R226 += 1 };
  s0 -> s1 [68, 65535] { R226 += 1 };
  s1 -> s1 [0, 66] { R226 += 1 };
  s1 -> s2 [67, 67] { R226 += 1 };
  s1 -> s1 [68, 65535] { R226 += 1 };
  s2 -> s2 [0, 65535] { R226 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton key1_4 {
  init s0;
  s0 -> s0 [0, 65535] { R227 += 1, R228 += 1 };
  s0 -> s1 [0, 65535] { R228 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R228 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton key1_5 {
  init s0;
  s0 -> s1 [0, 66] { R230 += 1, R141 += 1 };
  s0 -> s0 [0, 65535] { R229 += 1, R230 += 1 };
  s0 -> s2 [0, 65535] { R230 += 1, R140 += 1, R141 += 1 };
  s0 -> s3 [67, 67] { R230 += 1 };
  s0 -> s1 [68, 65535] { R230 += 1, R141 += 1 };
  s1 -> s1 [0, 66] { R230 += 1, R141 += 1 };
  s1 -> s3 [67, 67] { R230 += 1 };
  s1 -> s1 [68, 65535] { R230 += 1, R141 += 1 };
  s2 -> s1 [0, 66] { R230 += 1, R141 += 1 };
  s2 -> s2 [0, 65535] { R230 += 1, R140 += 1, R141 += 1 };
  s2 -> s3 [67, 67] { R230 += 1 };
  s2 -> s1 [68, 65535] { R230 += 1, R141 += 1 };
  s3 -> s3 [0, 65535] { R230 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton key1_6 {
  init s0;
  s0 -> s1 [0, 66] { R232 += 1, R216 += 1 };
  s0 -> s2 [0, 65535] { R232 += 1, R215 += 1, R216 += 1 };
  s0 -> s0 [0, 65535] { R231 += 1, R232 += 1 };
  s0 -> s3 [67, 67] { R232 += 1, R216 += 1 };
  s0 -> s1 [68, 65535] { R232 += 1, R216 += 1 };
  s1 -> s1 [0, 66] { R232 += 1, R216 += 1 };
  s1 -> s3 [67, 67] { R232 += 1, R216 += 1 };
  s1 -> s1 [68, 65535] { R232 += 1, R216 += 1 };
  s2 -> s1 [0, 66] { R232 += 1, R216 += 1 };
  s2 -> s2 [0, 65535] { R232 += 1, R215 += 1, R216 += 1 };
  s2 -> s3 [67, 67] { R232 += 1, R216 += 1 };
  s2 -> s1 [68, 65535] { R232 += 1, R216 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R232 += 1 };
  s3 -> s3 [0, 65535] { R232 += 1, R216 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R232 += 1 };
  accepting s3, s4, s5;
};
automaton key1_7 {
  init s0;
  s0 -> s0 [0, 65535] { R233 += 1, R234 += 1 };
  s0 -> s1 [0, 65535] { R234 += 1, R218 += 1, R0 += 1 };
  s0 -> s2 [0, 65535] { R234 += 1, R217 += 1, R218 += 1 };
  s1 -> s4 [0, 65535] { R234 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R234 += 1, R218 += 1, R0 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R234 += 1, R218 += 1, R0 += 1 };
  s2 -> s2 [0, 65535] { R234 += 1, R217 += 1, R218 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R234 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton key1_8 {
  init s0;
  s0 -> s1 [0, 66] { R236 += 1, R220 += 1, R5 += 1 };
  s0 -> s2 [0, 65535] { R236 += 1, R219 += 1, R220 += 1 };
  s0 -> s0 [0, 65535] { R235 += 1, R236 += 1 };
  s0 -> s3 [0, 65535] { R236 += 1, R220 += 1, R4 += 1, R5 += 1 };
  s0 -> s4 [67, 67] { R236 += 1, R220 += 1 };
  s0 -> s1 [68, 65535] { R236 += 1, R220 += 1, R5 += 1 };
  s1 -> s1 [0, 66] { R236 += 1, R220 += 1, R5 += 1 };
  s1 -> s4 [67, 67] { R236 += 1, R220 += 1 };
  s1 -> s1 [68, 65535] { R236 += 1, R220 += 1, R5 += 1 };
  s2 -> s1 [0, 66] { R236 += 1, R220 += 1, R5 += 1 };
  s2 -> s2 [0, 65535] { R236 += 1, R219 += 1, R220 += 1 };
  s2 -> s3 [0, 65535] { R236 += 1, R220 += 1, R4 += 1, R5 += 1 };
  s2 -> s4 [67, 67] { R236 += 1, R220 += 1 };
  s2 -> s1 [68, 65535] { R236 += 1, R220 += 1, R5 += 1 };
  s3 -> s1 [0, 66] { R236 += 1, R220 += 1, R5 += 1 };
  s3 -> s3 [0, 65535] { R236 += 1, R220 += 1, R4 += 1, R5 += 1 };
  s3 -> s4 [67, 67] { R236 += 1, R220 += 1 };
  s3 -> s1 [68, 65535] { R236 += 1, R220 += 1, R5 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R236 += 1, R220 += 1 };
  s4 -> s6 [0, 65535] { R236 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R236 += 1 };
  accepting s4, s5, s6;
};
automaton key1_9 {
  init s0;
  s0 -> s1 [0, 66] { R238 += 1, R222 += 1, R212 += 1 };
  s0 -> s0 [0, 65535] { R237 += 1, R238 += 1 };
  s0 -> s2 [0, 65535] { R238 += 1, R221 += 1, R222 += 1 };
  s0 -> s3 [0, 65535] { R238 += 1, R222 += 1, R211 += 1, R212 += 1 };
  s0 -> s4 [67, 67] { R238 += 1, R222 += 1, R212 += 1 };
  s0 -> s1 [68, 65535] { R238 += 1, R222 += 1, R212 += 1 };
  s1 -> s1 [0, 66] { R238 += 1, R222 += 1, R212 += 1 };
  s1 -> s4 [67, 67] { R238 += 1, R222 += 1, R212 += 1 };
  s1 -> s1 [68, 65535] { R238 += 1, R222 += 1, R212 += 1 };
  s2 -> s1 [0, 66] { R238 += 1, R222 += 1, R212 += 1 };
  s2 -> s2 [0, 65535] { R238 += 1, R221 += 1, R222 += 1 };
  s2 -> s3 [0, 65535] { R238 += 1, R222 += 1, R211 += 1, R212 += 1 };
  s2 -> s4 [67, 67] { R238 += 1, R222 += 1, R212 += 1 };
  s2 -> s1 [68, 65535] { R238 += 1, R222 += 1, R212 += 1 };
  s3 -> s1 [0, 66] { R238 += 1, R222 += 1, R212 += 1 };
  s3 -> s3 [0, 65535] { R238 += 1, R222 += 1, R211 += 1, R212 += 1 };
  s3 -> s4 [67, 67] { R238 += 1, R222 += 1, R212 += 1 };
  s3 -> s1 [68, 65535] { R238 += 1, R222 += 1, R212 += 1 };
  s4 -> s4 [0, 65535] { R238 += 1, R222 += 1, R212 += 1 };
  s4 -> s5 [0, 65535] { R238 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R238 += 1, R222 += 1 };
  s5 -> s5 [0, 65535] { R238 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R238 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R238 += 1, R222 += 1 };
  accepting s4, s5, s6, s7;
};
automaton key1_10 {
  init s0;
  s0 -> s0 [0, 65535] { R239 += 1, R240 += 1 };
  s0 -> s1 [0, 65535] { R240 += 1, R224 += 1, R213 += 1, R214 += 1 };
  s0 -> s2 [0, 65535] { R240 += 1, R224 += 1, R214 += 1, R210 += 1 };
  s0 -> s3 [0, 65535] { R240 += 1, R223 += 1, R224 += 1 };
  s1 -> s5 [0, 65535] { R240 += 1 };
  s1 -> s1 [0, 65535] { R240 += 1, R224 += 1, R213 += 1, R214 += 1 };
  s1 -> s2 [0, 65535] { R240 += 1, R224 += 1, R214 += 1, R210 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R240 += 1 };
  s2 -> s6 [0, 65535] { R240 += 1, R224 += 1 };
  s2 -> s2 [0, 65535] { R240 += 1, R224 += 1, R214 += 1, R210 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R240 += 1, R224 += 1, R213 += 1, R214 += 1 };
  s3 -> s2 [0, 65535] { R240 += 1, R224 += 1, R214 += 1, R210 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R240 += 1, R223 += 1, R224 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R240 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R240 += 1 };
  s6 -> s6 [0, 65535] { R240 += 1, R224 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R0 = R212 && R1 = R222 && R2 = R238 && R4 = 0 && R5 - R211 = -1 && R140 = 0 && R141 - R221 = -1 && R215 = R221 && R216 = R222 && R219 = R221 && R220 = R222 && R225 = 0 && R226 = R238 && R229 = 0 && R230 = R238 && R231 = 0 && R232 = R238 && R235 = 0 && R236 = R238 && R237 = 0 && R207 < 1 && R211 - R212 < 1 && -1 < R211 && R221 - R222 < 1 && -1 < R221 && -1 < R238 && (R211 != R213 || R212 = R214 || ((R210 != 0 || R212 - R213 < 1 || R213 < 0) && (R210 = 0 || R212 < R213 || R213 < 0))) && (R217 != R221 || R218 = R222 || (R212 = 0 && (R211 != 0 || R222 - R221 < 1))) && (R221 != R223 || R222 = R224 || ((R211 != 0 || R212 != 0 || R222 - R223 < 1 || R223 < 0) && (R212 < 1 || R222 < R223 || R223 < 0))) && (R227 != 0 || R228 = R238 || (R222 = 0 && (R221 != 0 || R238 < 1))) && (R233 != 0 || R234 = R238 || (R222 = 0 && (R221 != 0 || R238 < 1))) && (R239 != 0 || R238 = R240 || (R222 = 0 && (R221 != 0 || R238 < 1))) && (R211 = R213 || (R210 = 0 && R211 = R212)) && (R217 = R221 || (R212 = 0 && (R211 != 0 || R222 - R221 < 1))) && (R221 = R223 || (R212 = 0 && (R211 != 0 || R222 - R221 < 1))) && (R227 = 0 || (R222 = 0 && (R221 != 0 || R238 < 1))) && (R233 = 0 || (R222 = 0 && (R221 != 0 || R238 < 1))) && (R239 = 0 || (R222 = 0 && (R221 != 0 || R238 < 1)));
// End of Parikh automata intersection problem
