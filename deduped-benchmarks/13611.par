// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R2, R3, R39, R40, R41, R42, R43, R44, R45, R46, R47, R48, R49, R50, R51, R52, R53, R54, R55, R56, R57, R58, R59, R6, R60, R61, R62, R63, R64, R65;
synchronised {  // Automata constraining key2
automaton key2_0 {
  init s0;
  s0 -> s0 [0, 64];
  s0 -> s1 [79, 79];
  s0 -> s0 [80, 65535];
  s1 -> s1 [0, 64];
  s1 -> s1 [79, 65535];
  accepting s1;
};
automaton key2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton key2_2 {
  init s0;
  s0 -> s1 [0, 78] { R11 += 1 };
  s0 -> s0 [0, 65535] { R10 += 1, R11 += 1 };
  s0 -> s2 [79, 79];
  s0 -> s1 [80, 65535] { R11 += 1 };
  s1 -> s1 [0, 78] { R11 += 1 };
  s1 -> s2 [79, 79];
  s1 -> s1 [80, 65535] { R11 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton key2_3 {
  init s0;
  s0 -> s1 [0, 78] { R57 += 1 };
  s0 -> s0 [0, 65535] { R56 += 1, R57 += 1 };
  s0 -> s1 [80, 65535] { R57 += 1 };
  s1 -> s1 [0, 78] { R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [80, 65535] { R57 += 1 };
  accepting s0, s1;
};
automaton key2_4 {
  init s0;
  s0 -> s1 [0, 65535] { R59 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R58 += 1, R59 += 1 };
  s1 -> s1 [0, 65535] { R59 += 1, R40 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton key2_5 {
  init s0;
  s0 -> s1 [0, 79] { R61 += 1 };
  s0 -> s0 [0, 65535] { R60 += 1, R61 += 1 };
  s0 -> s1 [91, 65535] { R61 += 1 };
  s1 -> s1 [0, 79] { R61 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [91, 65535] { R61 += 1 };
  accepting s0, s1;
};
automaton key2_6 {
  init s0;
  s0 -> s1 [0, 65535] { R63 += 1, R41 += 1 };
  s0 -> s0 [0, 65535] { R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535] { R63 += 1, R41 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton key2_7 {
  init s0;
  s0 -> s1 [0, 78] { R65 += 1 };
  s0 -> s0 [0, 65535] { R64 += 1, R65 += 1 };
  s0 -> s2 [79, 79] { R65 += 1 };
  s0 -> s3 [79, 79] { R65 += 1 };
  s0 -> s1 [91, 65535] { R65 += 1 };
  s1 -> s1 [0, 78] { R65 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [79, 79] { R65 += 1 };
  s1 -> s3 [79, 79] { R65 += 1 };
  s1 -> s1 [91, 65535] { R65 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 79] { R65 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [91, 65535] { R65 += 1 };
  accepting s0, s1, s2, s3;
};
};
synchronised {  // Automata constraining key1
automaton key1_0 {
  init s0;
  s0 -> s0 [0, 64];
  s0 -> s1 [67, 67];
  s0 -> s0 [68, 65535];
  s1 -> s1 [0, 64];
  s1 -> s1 [67, 65535];
  accepting s1;
};
automaton key1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton key1_2 {
  init s0;
  s0 -> s1 [0, 66];
  s0 -> s0 [0, 65535] { R6 += 1 };
  s0 -> s2 [67, 67];
  s0 -> s1 [68, 65535];
  s1 -> s1 [0, 66];
  s1 -> s2 [67, 67];
  s1 -> s1 [68, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton key1_3 {
  init s0;
  s0 -> s1 [0, 66] { R47 += 1 };
  s0 -> s0 [0, 65535] { R46 += 1, R47 += 1 };
  s0 -> s2 [67, 67] { R47 += 1 };
  s0 -> s1 [68, 65535] { R47 += 1 };
  s1 -> s1 [0, 66] { R47 += 1 };
  s1 -> s2 [67, 67] { R47 += 1 };
  s1 -> s1 [68, 65535] { R47 += 1 };
  s2 -> s2 [0, 65535] { R47 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton key1_4 {
  init s0;
  s0 -> s0 [0, 65535] { R48 += 1, R49 += 1 };
  s0 -> s1 [0, 65535] { R49 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R49 += 1, R0 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton key1_5 {
  init s0;
  s0 -> s1 [0, 66] { R51 += 1 };
  s0 -> s0 [0, 65535] { R50 += 1, R51 += 1 };
  s0 -> s2 [0, 65535] { R51 += 1, R3 += 1 };
  s0 -> s3 [67, 67] { R51 += 1 };
  s0 -> s1 [68, 65535] { R51 += 1 };
  s1 -> s1 [0, 66] { R51 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [67, 67] { R51 += 1 };
  s1 -> s1 [68, 65535] { R51 += 1 };
  s2 -> s1 [0, 66] { R51 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R51 += 1, R3 += 1 };
  s2 -> s3 [67, 67] { R51 += 1 };
  s2 -> s1 [68, 65535] { R51 += 1 };
  s3 -> s3 [0, 65535] { R51 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton key1_6 {
  init s0;
  s0 -> s1 [0, 66] { R53 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R52 += 1, R53 += 1 };
  s0 -> s2 [0, 65535] { R53 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [67, 67] { R53 += 1, R43 += 1 };
  s0 -> s1 [68, 65535] { R53 += 1, R43 += 1 };
  s1 -> s1 [0, 66] { R53 += 1, R43 += 1 };
  s1 -> s3 [67, 67] { R53 += 1, R43 += 1 };
  s1 -> s1 [68, 65535] { R53 += 1, R43 += 1 };
  s2 -> s1 [0, 66] { R53 += 1, R43 += 1 };
  s2 -> s2 [0, 65535] { R53 += 1, R42 += 1, R43 += 1 };
  s2 -> s3 [67, 67] { R53 += 1, R43 += 1 };
  s2 -> s1 [68, 65535] { R53 += 1, R43 += 1 };
  s3 -> s3 [0, 65535] { R53 += 1, R43 += 1 };
  s3 -> s4 [0, 65535] { R53 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R53 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
automaton key1_7 {
  init s0;
  s0 -> s1 [0, 65535] { R55 += 1, R45 += 1, R39 += 1 };
  s0 -> s0 [0, 65535] { R54 += 1, R55 += 1 };
  s0 -> s2 [0, 65535] { R55 += 1, R44 += 1, R45 += 1 };
  s1 -> s1 [0, 65535] { R55 += 1, R45 += 1, R39 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R55 += 1 };
  s2 -> s1 [0, 65535] { R55 += 1, R45 += 1, R39 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R55 += 1, R44 += 1, R45 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R55 += 1 };
  accepting s3, s4, s2, s1, s0;
};
};
synchronised {  // Automata constraining P24
automaton P24_0 {
  init s0;
  s0 -> s1 [111, 111];
  accepting s1;
};
};
constraint R0 = R43 && R1 = R53 && R10 = 0 && R42 = 0 && R46 = 0 && R47 = R53 && R52 = 0 && R11 < R2 && R3 < 1 && R6 < 1 && -2 < R11 && -1 < R43 && -1 < R53 && (R2 != R57 || R11 - R56 = -1 || (R57 - R11 < 2 && (R11 - R57 != -1 || R40 = 0))) && (R2 != R59 || R11 - R58 = -1 || (R59 - R11 < 2 && (R11 - R59 != -1 || R40 = 0))) && (R2 != R61 || R11 - R60 = -1 || (R61 - R11 < 2 && (R11 - R61 != -1 || R40 = 0))) && (R41 != 0 || ((R62 != 0 || ((R64 != 0 || ((R63 != R65 || R11 - R65 = -1 || R2 < 1 || R11 < 0) && (R63 = R65 || R2 < 1 || R11 < 0))) && (R64 = 0 || R2 < 1 || R11 < 0))) && (R62 = 0 || R2 < 1 || R11 < 0))) && (R44 != 0 || R43 = R45 || (R39 = 0 && R43 = 0)) && (R48 != 0 || R49 = R53 || (R43 = 0 && R53 = 0)) && (R50 != 0 || R51 = R53 || (R43 = 0 && R53 = 0)) && (R54 != 0 || R53 = R55 || (R43 = 0 && R53 = 0)) && (R2 = R57 || (R2 - R11 = 1 && R40 = 0)) && (R2 = R59 || (R2 - R11 = 1 && R40 = 0)) && (R2 = R61 || (R2 - R11 = 1 && R40 = 0)) && (R41 = 0 || (R11 - R65 = -1 && R62 = 0 && R63 = R65 && R64 = 0)) && (R44 = 0 || (R39 = 0 && R43 = 0)) && (R48 = 0 || (R43 = 0 && R53 = 0)) && (R50 = 0 || (R43 = 0 && R53 = 0)) && (R54 = 0 || (R43 = 0 && R53 = 0));
// End of Parikh automata intersection problem
