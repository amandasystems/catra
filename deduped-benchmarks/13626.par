// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R13, R16, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R31, R32, R33, R34, R35, R36, R37, R38, R39, R4, R40, R41, R42, R43, R44, R45, R46, R47, R48, R49, R50, R51, R52, R53, R54, R55, R56, R57, R58, R59, R60, R61, R62, R63, R64, R65, R66, R67, R68, R69, R7, R70, R71, R72, R73, R74, R75, R76, R77, R78, R79, R80, R81, R82, R83, R84;
synchronised {  // Automata constraining key1
automaton key1_0 {
  init s0;
  s0 -> s0 [0, 64];
  s0 -> s1 [67, 67];
  s0 -> s0 [68, 65535];
  s1 -> s1 [0, 64];
  s1 -> s1 [67, 65535];
  accepting s1;
};
automaton key1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton key1_2 {
  init s0;
  s0 -> s1 [0, 66];
  s0 -> s0 [0, 65535] { R13 += 1 };
  s0 -> s2 [67, 67];
  s0 -> s1 [68, 65535];
  s1 -> s1 [0, 66];
  s1 -> s2 [67, 67];
  s1 -> s1 [68, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton key1_3 {
  init s0;
  s0 -> s0 [0, 65535] { R25 += 1, R26 += 1 };
  s0 -> s1 [0, 65535] { R26 += 1, R20 += 1 };
  s1 -> s1 [0, 65535] { R26 += 1, R20 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton key1_4 {
  init s0;
  s0 -> s1 [0, 66] { R28 += 1 };
  s0 -> s0 [0, 65535] { R27 += 1, R28 += 1 };
  s0 -> s2 [67, 67] { R28 += 1 };
  s0 -> s3 [67, 67] { R28 += 1 };
  s0 -> s1 [91, 65535] { R28 += 1 };
  s1 -> s1 [0, 66] { R28 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [67, 67] { R28 += 1 };
  s1 -> s3 [67, 67] { R28 += 1 };
  s1 -> s1 [91, 65535] { R28 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 67] { R28 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [91, 65535] { R28 += 1 };
  accepting s0, s1, s2, s3;
};
automaton key1_5 {
  init s0;
  s0 -> s1 [0, 66] { R60 += 1 };
  s0 -> s0 [0, 65535] { R59 += 1, R60 += 1 };
  s0 -> s2 [67, 67] { R60 += 1 };
  s0 -> s1 [68, 65535] { R60 += 1 };
  s1 -> s1 [0, 66] { R60 += 1 };
  s1 -> s2 [67, 67] { R60 += 1 };
  s1 -> s1 [68, 65535] { R60 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R60 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton key1_6 {
  init s0;
  s0 -> s1 [0, 65535] { R62 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R61 += 1, R62 += 1 };
  s1 -> s1 [0, 65535] { R62 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton key1_7 {
  init s0;
  s0 -> s1 [0, 66] { R64 += 1 };
  s0 -> s0 [0, 65535] { R63 += 1, R64 += 1 };
  s0 -> s2 [0, 65535] { R64 += 1, R10 += 1 };
  s0 -> s3 [67, 67] { R64 += 1 };
  s0 -> s1 [68, 65535] { R64 += 1 };
  s1 -> s1 [0, 66] { R64 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [67, 67] { R64 += 1 };
  s1 -> s1 [68, 65535] { R64 += 1 };
  s2 -> s1 [0, 66] { R64 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R64 += 1, R10 += 1 };
  s2 -> s3 [67, 67] { R64 += 1 };
  s2 -> s1 [68, 65535] { R64 += 1 };
  s3 -> s3 [0, 65535] { R64 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton key1_8 {
  init s0;
  s0 -> s1 [0, 65535] { R66 += 1, R36 += 1, R19 += 1 };
  s0 -> s2 [0, 65535] { R66 += 1, R35 += 1, R36 += 1 };
  s0 -> s0 [0, 65535] { R65 += 1, R66 += 1 };
  s1 -> s1 [0, 65535] { R66 += 1, R36 += 1, R19 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R66 += 1 };
  s2 -> s1 [0, 65535] { R66 += 1, R36 += 1, R19 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R66 += 1, R35 += 1, R36 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R66 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton key1_9 {
  init s0;
  s0 -> s1 [0, 66] { R68 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R67 += 1, R68 += 1 };
  s0 -> s2 [0, 65535] { R68 += 1, R37 += 1, R38 += 1 };
  s0 -> s3 [67, 67] { R68 += 1, R38 += 1 };
  s0 -> s4 [67, 67] { R68 += 1, R38 += 1 };
  s0 -> s1 [91, 65535] { R68 += 1, R38 += 1 };
  s1 -> s1 [0, 66] { R68 += 1, R38 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R68 += 1 };
  s1 -> s3 [67, 67] { R68 += 1, R38 += 1 };
  s1 -> s4 [67, 67] { R68 += 1, R38 += 1 };
  s1 -> s1 [91, 65535] { R68 += 1, R38 += 1 };
  s2 -> s1 [0, 66] { R68 += 1, R38 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R68 += 1, R37 += 1, R38 += 1 };
  s2 -> s3 [67, 67] { R68 += 1, R38 += 1 };
  s2 -> s4 [67, 67] { R68 += 1, R38 += 1 };
  s2 -> s1 [91, 65535] { R68 += 1, R38 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R68 += 1 };
  s4 -> s4 [0, 67] { R68 += 1, R38 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R68 += 1 };
  s4 -> s4 [91, 65535] { R68 += 1, R38 += 1 };
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton key1_10 {
  init s0;
  s0 -> s1 [0, 66] { R70 += 1, R44 += 1 };
  s0 -> s2 [0, 65535] { R70 += 1, R43 += 1, R44 += 1 };
  s0 -> s0 [0, 65535] { R69 += 1, R70 += 1 };
  s0 -> s3 [67, 67] { R70 += 1, R44 += 1 };
  s0 -> s1 [68, 65535] { R70 += 1, R44 += 1 };
  s1 -> s1 [0, 66] { R70 += 1, R44 += 1 };
  s1 -> s3 [67, 67] { R70 += 1, R44 += 1 };
  s1 -> s1 [68, 65535] { R70 += 1, R44 += 1 };
  s2 -> s1 [0, 66] { R70 += 1, R44 += 1 };
  s2 -> s2 [0, 65535] { R70 += 1, R43 += 1, R44 += 1 };
  s2 -> s3 [67, 67] { R70 += 1, R44 += 1 };
  s2 -> s1 [68, 65535] { R70 += 1, R44 += 1 };
  s3 -> s4 [0, 65535] { R70 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R70 += 1, R44 += 1 };
  s4 -> s4 [0, 65535] { R70 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
automaton key1_11 {
  init s0;
  s0 -> s1 [0, 65535] { R72 += 1, R45 += 1, R46 += 1 };
  s0 -> s0 [0, 65535] { R71 += 1, R72 += 1 };
  s0 -> s2 [0, 65535] { R72 += 1, R46 += 1, R1 += 1 };
  s1 -> s1 [0, 65535] { R72 += 1, R45 += 1, R46 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R72 += 1, R46 += 1, R1 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R72 += 1 };
  s2 -> s2 [0, 65535] { R72 += 1, R46 += 1, R1 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R72 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton key1_12 {
  init s0;
  s0 -> s1 [0, 66] { R74 += 1, R48 += 1 };
  s0 -> s2 [0, 65535] { R74 += 1, R47 += 1, R48 += 1 };
  s0 -> s3 [0, 65535] { R74 += 1, R48 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R73 += 1, R74 += 1 };
  s0 -> s4 [67, 67] { R74 += 1, R48 += 1 };
  s0 -> s1 [68, 65535] { R74 += 1, R48 += 1 };
  s1 -> s1 [0, 66] { R74 += 1, R48 += 1 };
  s1 -> s1 [0, 65535] { R74 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s4 [67, 67] { R74 += 1, R48 += 1 };
  s1 -> s1 [68, 65535] { R74 += 1, R48 += 1 };
  s2 -> s1 [0, 66] { R74 += 1, R48 += 1 };
  s2 -> s2 [0, 65535] { R74 += 1, R47 += 1, R48 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R74 += 1, R48 += 1, R7 += 1 };
  s2 -> s4 [67, 67] { R74 += 1, R48 += 1 };
  s2 -> s1 [68, 65535] { R74 += 1, R48 += 1 };
  s3 -> s1 [0, 66] { R74 += 1, R48 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R74 += 1, R48 += 1, R7 += 1 };
  s3 -> s6 [0, 65535] { R74 += 1 };
  s3 -> s4 [67, 67] { R74 += 1, R48 += 1 };
  s3 -> s1 [68, 65535] { R74 += 1, R48 += 1 };
  s4 -> s4 [0, 65535] { R74 += 1, R48 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R74 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton key1_13 {
  init s0;
  s0 -> s1 [0, 66] { R76 += 1, R50 += 1, R30 += 1 };
  s0 -> s0 [0, 65535] { R75 += 1, R76 += 1 };
  s0 -> s2 [0, 65535] { R76 += 1, R49 += 1, R50 += 1 };
  s0 -> s3 [0, 65535] { R76 += 1, R50 += 1, R29 += 1, R30 += 1 };
  s0 -> s1 [68, 65535] { R76 += 1, R50 += 1, R30 += 1 };
  s1 -> s1 [0, 66] { R76 += 1, R50 += 1, R30 += 1 };
  s1 -> s1 [0, 65535] { R76 += 1, R50 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R76 += 1 };
  s1 -> s1 [68, 65535] { R76 += 1, R50 += 1, R30 += 1 };
  s2 -> s1 [0, 66] { R76 += 1, R50 += 1, R30 += 1 };
  s2 -> s2 [0, 65535] { R76 += 1, R49 += 1, R50 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R76 += 1, R50 += 1, R29 += 1, R30 += 1 };
  s2 -> s1 [68, 65535] { R76 += 1, R50 += 1, R30 += 1 };
  s3 -> s1 [0, 66] { R76 += 1, R50 += 1, R30 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R76 += 1 };
  s3 -> s3 [0, 65535] { R76 += 1, R50 += 1, R29 += 1, R30 += 1 };
  s3 -> s1 [68, 65535] { R76 += 1, R50 += 1, R30 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R76 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton key1_14 {
  init s0;
  s0 -> s1 [0, 65535] { R78 += 1, R52 += 1, R32 += 1, R17 += 1 };
  s0 -> s0 [0, 65535] { R77 += 1, R78 += 1 };
  s0 -> s2 [0, 65535] { R78 += 1, R52 += 1, R31 += 1, R32 += 1 };
  s0 -> s3 [0, 65535] { R78 += 1, R51 += 1, R52 += 1 };
  s1 -> s1 [0, 65535] { R78 += 1, R52 += 1, R32 += 1, R17 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R78 += 1 };
  s1 -> s6 [0, 65535] { R78 += 1, R52 += 1 };
  s2 -> s1 [0, 65535] { R78 += 1, R52 += 1, R32 += 1, R17 += 1 };
  s2 -> s2 [0, 65535] { R78 += 1, R52 += 1, R31 += 1, R32 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R78 += 1 };
  s3 -> s1 [0, 65535] { R78 += 1, R52 += 1, R32 += 1, R17 += 1 };
  s3 -> s2 [0, 65535] { R78 += 1, R52 += 1, R31 += 1, R32 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R78 += 1, R51 += 1, R52 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R78 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R78 += 1 };
  s6 -> s6 [0, 65535] { R78 += 1, R52 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton key1_15 {
  init s0;
  s0 -> s1 [0, 67] { R80 += 1, R54 += 1, R34 += 1 };
  s0 -> s0 [0, 65535] { R79 += 1, R80 += 1 };
  s0 -> s2 [0, 65535] { R80 += 1, R54 += 1, R33 += 1, R34 += 1 };
  s0 -> s3 [0, 65535] { R80 += 1, R53 += 1, R54 += 1 };
  s0 -> s1 [91, 65535] { R80 += 1, R54 += 1, R34 += 1 };
  s1 -> s1 [0, 67] { R80 += 1, R54 += 1, R34 += 1 };
  s1 -> s5 [0, 65535] { R80 += 1 };
  s1 -> s1 [0, 65535] { R80 += 1, R54 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [91, 65535] { R80 += 1, R54 += 1, R34 += 1 };
  s2 -> s1 [0, 67] { R80 += 1, R54 += 1, R34 += 1 };
  s2 -> s5 [0, 65535] { R80 += 1 };
  s2 -> s2 [0, 65535] { R80 += 1, R54 += 1, R33 += 1, R34 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [91, 65535] { R80 += 1, R54 += 1, R34 += 1 };
  s3 -> s1 [0, 67] { R80 += 1, R54 += 1, R34 += 1 };
  s3 -> s2 [0, 65535] { R80 += 1, R54 += 1, R33 += 1, R34 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R80 += 1, R53 += 1, R54 += 1 };
  s3 -> s1 [91, 65535] { R80 += 1, R54 += 1, R34 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R80 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton key1_16 {
  init s0;
  s0 -> s1 [0, 65535] { R82 += 1, R56 += 1, R39 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R81 += 1, R82 += 1 };
  s0 -> s2 [0, 65535] { R82 += 1, R55 += 1, R56 += 1 };
  s0 -> s3 [0, 65535] { R82 += 1, R56 += 1, R40 += 1, R18 += 1 };
  s1 -> s1 [0, 65535] { R82 += 1, R56 += 1, R39 += 1, R40 += 1 };
  s1 -> s5 [0, 65535] { R82 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [0, 65535] { R82 += 1, R56 += 1, R40 += 1, R18 += 1 };
  s2 -> s1 [0, 65535] { R82 += 1, R56 += 1, R39 += 1, R40 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R82 += 1, R55 += 1, R56 += 1 };
  s2 -> s3 [0, 65535] { R82 += 1, R56 += 1, R40 += 1, R18 += 1 };
  s3 -> s4 [0, 65535] { R82 += 1, R56 += 1 };
  s3 -> s5 [0, 65535] { R82 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R82 += 1, R56 += 1, R40 += 1, R18 += 1 };
  s4 -> s4 [0, 65535] { R82 += 1, R56 += 1 };
  s4 -> s5 [0, 65535] { R82 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R82 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton key1_17 {
  init s0;
  s0 -> s1 [0, 66] { R84 += 1, R58 += 1, R42 += 1 };
  s0 -> s2 [0, 65535] { R84 += 1, R57 += 1, R58 += 1 };
  s0 -> s3 [0, 65535] { R84 += 1, R58 += 1, R41 += 1, R42 += 1 };
  s0 -> s0 [0, 65535] { R83 += 1, R84 += 1 };
  s0 -> s4 [67, 67] { R84 += 1, R58 += 1, R42 += 1 };
  s0 -> s5 [67, 67] { R84 += 1, R58 += 1, R42 += 1 };
  s0 -> s1 [91, 65535] { R84 += 1, R58 += 1, R42 += 1 };
  s1 -> s1 [0, 66] { R84 += 1, R58 += 1, R42 += 1 };
  s1 -> s1 [0, 65535] { R84 += 1, R58 += 1 };
  s1 -> s6 [0, 65535] { R84 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s4 [67, 67] { R84 += 1, R58 += 1, R42 += 1 };
  s1 -> s5 [67, 67] { R84 += 1, R58 += 1, R42 += 1 };
  s1 -> s1 [91, 65535] { R84 += 1, R58 += 1, R42 += 1 };
  s2 -> s1 [0, 66] { R84 += 1, R58 += 1, R42 += 1 };
  s2 -> s2 [0, 65535] { R84 += 1, R57 += 1, R58 += 1 };
  s2 -> s3 [0, 65535] { R84 += 1, R58 += 1, R41 += 1, R42 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s4 [67, 67] { R84 += 1, R58 += 1, R42 += 1 };
  s2 -> s5 [67, 67] { R84 += 1, R58 += 1, R42 += 1 };
  s2 -> s1 [91, 65535] { R84 += 1, R58 += 1, R42 += 1 };
  s3 -> s1 [0, 66] { R84 += 1, R58 += 1, R42 += 1 };
  s3 -> s3 [0, 65535] { R84 += 1, R58 += 1, R41 += 1, R42 += 1 };
  s3 -> s6 [0, 65535] { R84 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s4 [67, 67] { R84 += 1, R58 += 1, R42 += 1 };
  s3 -> s5 [67, 67] { R84 += 1, R58 += 1, R42 += 1 };
  s3 -> s1 [91, 65535] { R84 += 1, R58 += 1, R42 += 1 };
  s4 -> s6 [0, 65535] { R84 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s4 [0, 65535] { R84 += 1, R58 += 1 };
  s5 -> s5 [0, 67] { R84 += 1, R58 += 1, R42 += 1 };
  s5 -> s6 [0, 65535] { R84 += 1 };
  s5 -> s7 [0, 65535];
  s5 -> s5 [0, 65535] { R84 += 1, R58 += 1 };
  s5 -> s5 [91, 65535] { R84 += 1, R58 += 1, R42 += 1 };
  s6 -> s6 [0, 65535] { R84 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
};
synchronised {  // Automata constraining P16
automaton P16_0 {
  init s0;
  s0 -> s1 [99, 99];
  accepting s1;
};
};
synchronised {  // Automata constraining key2
automaton key2_0 {
  init s0;
  s0 -> s0 [0, 64];
  s0 -> s1 [77, 77];
  s0 -> s0 [78, 65535];
  s1 -> s1 [0, 64];
  s1 -> s1 [77, 65535];
  accepting s1;
};
automaton key2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R0 += 1 };
  accepting s0;
};
automaton key2_2 {
  init s0;
  s0 -> s1 [0, 76];
  s0 -> s0 [0, 65535] { R4 += 1 };
  s0 -> s2 [77, 77];
  s0 -> s1 [78, 65535];
  s1 -> s1 [0, 76];
  s1 -> s2 [77, 77];
  s1 -> s1 [78, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton key2_3 {
  init s0;
  s0 -> s1 [0, 76] { R22 += 1 };
  s0 -> s0 [0, 65535] { R21 += 1, R22 += 1 };
  s0 -> s2 [77, 77] { R22 += 1 };
  s0 -> s1 [78, 65535] { R22 += 1 };
  s1 -> s1 [0, 76] { R22 += 1 };
  s1 -> s2 [77, 77] { R22 += 1 };
  s1 -> s1 [78, 65535] { R22 += 1 };
  s2 -> s2 [0, 65535] { R22 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton key2_4 {
  init s0;
  s0 -> s0 [0, 65535] { R23 += 1, R24 += 1 };
  s0 -> s1 [0, 65535] { R24 += 1, R16 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R24 += 1, R16 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
};
constraint R0 = R22 && R2 = R44 && R3 = R70 && R21 = 0 && R43 = 0 && R59 = 0 && R60 = R70 && R69 = 0 && -1 < R1 && R4 < 1 && R7 < 1 && R10 < 1 && R13 < 1 && -1 < R22 && -1 < R44 && -1 < R70 && (R1 != 0 || R17 = 0 || (R29 = 0 && R30 = 0)) && (R1 != 0 || R17 = 0 || (R31 = 0 && R32 = 0)) && (R1 != 0 || R17 = 0 || (R33 = 0 && R34 = 0)) && (R23 != 0 || R22 = R24 || (R16 = 0 && R22 = 0)) && (R29 != 0 || R1 = R30 || R1 < 1) && (R31 != 0 || R1 = R32 || R1 < 1) && (R33 != 0 || R1 = R34 || R1 < 1) && (R44 != 0 || ((R71 != 0 || ((R73 != 0 || ((R75 != 0 || ((R77 != 0 || ((R79 != 0 || ((R81 != 0 || ((R83 != 0 || ((R70 != R84 || ((R72 != R84 || ((R74 != R84 || ((R76 != R84 || ((R78 != R84 || ((R80 != R84 || R82 = R84 || R84 < 1) && (R80 = R84 || R84 < 1))) && (R78 = R84 || R84 < 1))) && (R76 = R84 || R84 < 1))) && (R74 = R84 || R84 < 1))) && (R72 = R84 || R84 < 1))) && (R70 = R84 || R70 < 1))) && (R83 = 0 || R70 < 1))) && (R81 = 0 || R70 < 1))) && (R79 = 0 || R70 < 1))) && (R77 = 0 || R70 < 1))) && (R75 = 0 || R70 < 1))) && (R73 = 0 || R70 < 1))) && (R71 = 0 || R70 < 1))) && (R45 != 0 || R44 = R46 || (R1 = 0 && R44 = 0)) && (R47 != 0 || R44 = R48 || (R1 = 0 && R44 = 0)) && (R49 != 0 || R44 = R50 || (R1 = 0 && R44 = 0)) && (R51 != 0 || R44 = R52 || (R1 = 0 && R44 = 0)) && (R53 != 0 || R44 = R54 || (R1 = 0 && R44 = 0)) && (R55 != 0 || R44 = R56 || (R1 = 0 && R44 = 0)) && (R57 != 0 || R44 = R58 || (R1 = 0 && R44 = 0)) && (R61 != 0 || R62 = R70 || (R44 = 0 && R70 = 0)) && (R63 != 0 || R64 = R70 || (R44 = 0 && R70 = 0)) && (R65 != 0 || R66 = R70 || (R44 = 0 && R70 = 0)) && (R67 != 0 || R68 = R70 || (R44 = 0 && R70 = 0)) && (R71 != 0 || ((R73 != 0 || ((R75 != 0 || ((R77 != 0 || ((R79 != 0 || ((R81 != 0 || ((R83 != 0 || ((R70 != R84 || ((R72 != R84 || ((R74 != R84 || ((R76 != R84 || ((R78 != R84 || ((R80 != R84 || R82 = R84 || R44 < 1 || R84 < 0) && (R80 = R84 || R44 < 1 || R84 < 0))) && (R78 = R84 || R44 < 1 || R84 < 0))) && (R76 = R84 || R44 < 1 || R84 < 0))) && (R74 = R84 || R44 < 1 || R84 < 0))) && (R72 = R84 || R44 < 1 || R84 < 0))) && (R70 = R84 || R44 < 1))) && (R83 = 0 || R44 < 1))) && (R81 = 0 || R44 < 1))) && (R79 = 0 || R44 < 1))) && (R77 = 0 || R44 < 1))) && (R75 = 0 || R44 < 1))) && (R73 = 0 || R44 < 1))) && (R18 = 0 || (R39 = 0 && R40 = 0)) && (R18 = 0 || (R41 = 0 && R42 = 0)) && (R19 = 0 || (R35 = 0 && R36 = 0)) && (R19 = 0 || (R37 = 0 && R38 = 0)) && (R20 = 0 || (R25 = 0 && R26 = 0)) && (R20 = 0 || (R27 = 0 && R28 = 0)) && (R23 = 0 || (R16 = 0 && R22 = 0)) && (R29 = 0 || R1 < 1) && (R31 = 0 || R1 < 1) && (R33 = 0 || R1 < 1) && (R45 = 0 || (R1 = 0 && R44 = 0)) && (R47 = 0 || (R1 = 0 && R44 = 0)) && (R49 = 0 || (R1 = 0 && R44 = 0)) && (R51 = 0 || (R1 = 0 && R44 = 0)) && (R53 = 0 || (R1 = 0 && R44 = 0)) && (R55 = 0 || (R1 = 0 && R44 = 0)) && (R57 = 0 || (R1 = 0 && R44 = 0)) && (R61 = 0 || (R44 = 0 && R70 = 0)) && (R63 = 0 || (R44 = 0 && R70 = 0)) && (R65 = 0 || (R44 = 0 && R70 = 0)) && (R67 = 0 || (R44 = 0 && R70 = 0)) && (R71 = 0 || R44 < 1);
// End of Parikh automata intersection problem
