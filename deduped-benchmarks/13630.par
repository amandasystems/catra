// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R12, R13, R14, R15, R16, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R31, R32, R33, R34, R35, R36, R37, R38, R39, R40, R41, R42, R43, R44, R45, R46, R47, R48, R49, R50, R51, R52, R53, R54, R55, R56, R57, R58, R59, R6, R60, R61, R62, R63, R64, R65, R66, R67, R68, R69, R70, R71, R72, R73, R74, R75, R9;
synchronised {  // Automata constraining key1
automaton key1_0 {
  init s0;
  s0 -> s0 [0, 64];
  s0 -> s1 [67, 67];
  s0 -> s0 [68, 65535];
  s1 -> s1 [0, 64];
  s1 -> s1 [67, 65535];
  accepting s1;
};
automaton key1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton key1_2 {
  init s0;
  s0 -> s1 [0, 66];
  s0 -> s0 [0, 65535] { R9 += 1 };
  s0 -> s2 [67, 67];
  s0 -> s1 [68, 65535];
  s1 -> s1 [0, 66];
  s1 -> s2 [67, 67];
  s1 -> s1 [68, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton key1_3 {
  init s0;
  s0 -> s0 [0, 65535] { R16 += 1, R17 += 1 };
  s0 -> s1 [0, 65535] { R17 += 1, R15 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R17 += 1, R15 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton key1_4 {
  init s0;
  s0 -> s1 [0, 66] { R19 += 1 };
  s0 -> s0 [0, 65535] { R18 += 1, R19 += 1 };
  s0 -> s2 [67, 67] { R19 += 1 };
  s0 -> s3 [67, 67] { R19 += 1 };
  s0 -> s1 [91, 65535] { R19 += 1 };
  s1 -> s1 [0, 66] { R19 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [67, 67] { R19 += 1 };
  s1 -> s3 [67, 67] { R19 += 1 };
  s1 -> s1 [91, 65535] { R19 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 67] { R19 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [91, 65535] { R19 += 1 };
  accepting s0, s1, s2, s3;
};
automaton key1_5 {
  init s0;
  s0 -> s1 [0, 66] { R51 += 1 };
  s0 -> s0 [0, 65535] { R50 += 1, R51 += 1 };
  s0 -> s2 [67, 67] { R51 += 1 };
  s0 -> s1 [68, 65535] { R51 += 1 };
  s1 -> s1 [0, 66] { R51 += 1 };
  s1 -> s2 [67, 67] { R51 += 1 };
  s1 -> s1 [68, 65535] { R51 += 1 };
  s2 -> s2 [0, 65535] { R51 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton key1_6 {
  init s0;
  s0 -> s0 [0, 65535] { R52 += 1, R53 += 1 };
  s0 -> s1 [0, 65535] { R53 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R53 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton key1_7 {
  init s0;
  s0 -> s1 [0, 66] { R55 += 1 };
  s0 -> s2 [0, 65535] { R55 += 1, R6 += 1 };
  s0 -> s0 [0, 65535] { R54 += 1, R55 += 1 };
  s0 -> s3 [67, 67] { R55 += 1 };
  s0 -> s1 [68, 65535] { R55 += 1 };
  s1 -> s1 [0, 66] { R55 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [67, 67] { R55 += 1 };
  s1 -> s1 [68, 65535] { R55 += 1 };
  s2 -> s1 [0, 66] { R55 += 1 };
  s2 -> s2 [0, 65535] { R55 += 1, R6 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [67, 67] { R55 += 1 };
  s2 -> s1 [68, 65535] { R55 += 1 };
  s3 -> s3 [0, 65535] { R55 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton key1_8 {
  init s0;
  s0 -> s1 [0, 65535] { R57 += 1, R26 += 1, R27 += 1 };
  s0 -> s0 [0, 65535] { R56 += 1, R57 += 1 };
  s0 -> s2 [0, 65535] { R57 += 1, R27 += 1, R14 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R57 += 1, R26 += 1, R27 += 1 };
  s1 -> s2 [0, 65535] { R57 += 1, R27 += 1, R14 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R57 += 1 };
  s2 -> s2 [0, 65535] { R57 += 1, R27 += 1, R14 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R57 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton key1_9 {
  init s0;
  s0 -> s1 [0, 66] { R59 += 1, R29 += 1 };
  s0 -> s2 [0, 65535] { R59 += 1, R28 += 1, R29 += 1 };
  s0 -> s0 [0, 65535] { R58 += 1, R59 += 1 };
  s0 -> s3 [67, 67] { R59 += 1, R29 += 1 };
  s0 -> s4 [67, 67] { R59 += 1, R29 += 1 };
  s0 -> s1 [91, 65535] { R59 += 1, R29 += 1 };
  s1 -> s1 [0, 66] { R59 += 1, R29 += 1 };
  s1 -> s1 [0, 65535] { R59 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [67, 67] { R59 += 1, R29 += 1 };
  s1 -> s4 [67, 67] { R59 += 1, R29 += 1 };
  s1 -> s1 [91, 65535] { R59 += 1, R29 += 1 };
  s2 -> s1 [0, 66] { R59 += 1, R29 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R59 += 1, R28 += 1, R29 += 1 };
  s2 -> s3 [67, 67] { R59 += 1, R29 += 1 };
  s2 -> s4 [67, 67] { R59 += 1, R29 += 1 };
  s2 -> s1 [91, 65535] { R59 += 1, R29 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R59 += 1 };
  s4 -> s4 [0, 67] { R59 += 1, R29 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R59 += 1 };
  s4 -> s4 [91, 65535] { R59 += 1, R29 += 1 };
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton key1_10 {
  init s0;
  s0 -> s1 [0, 66] { R61 += 1, R35 += 1 };
  s0 -> s2 [0, 65535] { R61 += 1, R34 += 1, R35 += 1 };
  s0 -> s0 [0, 65535] { R60 += 1, R61 += 1 };
  s0 -> s3 [67, 67] { R61 += 1, R35 += 1 };
  s0 -> s1 [68, 65535] { R61 += 1, R35 += 1 };
  s1 -> s1 [0, 66] { R61 += 1, R35 += 1 };
  s1 -> s3 [67, 67] { R61 += 1, R35 += 1 };
  s1 -> s1 [68, 65535] { R61 += 1, R35 += 1 };
  s2 -> s1 [0, 66] { R61 += 1, R35 += 1 };
  s2 -> s2 [0, 65535] { R61 += 1, R34 += 1, R35 += 1 };
  s2 -> s3 [67, 67] { R61 += 1, R35 += 1 };
  s2 -> s1 [68, 65535] { R61 += 1, R35 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R61 += 1, R35 += 1 };
  s3 -> s5 [0, 65535] { R61 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R61 += 1 };
  accepting s3, s4, s5;
};
automaton key1_11 {
  init s0;
  s0 -> s1 [0, 65535] { R63 += 1, R36 += 1, R37 += 1 };
  s0 -> s2 [0, 65535] { R63 += 1, R37 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535] { R63 += 1, R36 += 1, R37 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R63 += 1, R37 += 1, R0 += 1 };
  s2 -> s3 [0, 65535] { R63 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R63 += 1, R37 += 1, R0 += 1 };
  s3 -> s3 [0, 65535] { R63 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton key1_12 {
  init s0;
  s0 -> s1 [0, 66] { R65 += 1, R39 += 1 };
  s0 -> s2 [0, 65535] { R65 += 1, R38 += 1, R39 += 1 };
  s0 -> s0 [0, 65535] { R64 += 1, R65 += 1 };
  s0 -> s3 [0, 65535] { R65 += 1, R39 += 1, R3 += 1 };
  s0 -> s4 [67, 67] { R65 += 1, R39 += 1 };
  s0 -> s1 [68, 65535] { R65 += 1, R39 += 1 };
  s1 -> s1 [0, 66] { R65 += 1, R39 += 1 };
  s1 -> s1 [0, 65535] { R65 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s4 [67, 67] { R65 += 1, R39 += 1 };
  s1 -> s1 [68, 65535] { R65 += 1, R39 += 1 };
  s2 -> s1 [0, 66] { R65 += 1, R39 += 1 };
  s2 -> s2 [0, 65535] { R65 += 1, R38 += 1, R39 += 1 };
  s2 -> s3 [0, 65535] { R65 += 1, R39 += 1, R3 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s4 [67, 67] { R65 += 1, R39 += 1 };
  s2 -> s1 [68, 65535] { R65 += 1, R39 += 1 };
  s3 -> s1 [0, 66] { R65 += 1, R39 += 1 };
  s3 -> s3 [0, 65535] { R65 += 1, R39 += 1, R3 += 1 };
  s3 -> s5 [0, 65535] { R65 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s4 [67, 67] { R65 += 1, R39 += 1 };
  s3 -> s1 [68, 65535] { R65 += 1, R39 += 1 };
  s4 -> s4 [0, 65535] { R65 += 1, R39 += 1 };
  s5 -> s5 [0, 65535] { R65 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton key1_13 {
  init s0;
  s0 -> s1 [0, 66] { R67 += 1, R41 += 1, R21 += 1 };
  s0 -> s2 [0, 65535] { R67 += 1, R41 += 1, R20 += 1, R21 += 1 };
  s0 -> s3 [0, 65535] { R67 += 1, R40 += 1, R41 += 1 };
  s0 -> s0 [0, 65535] { R66 += 1, R67 += 1 };
  s0 -> s1 [68, 65535] { R67 += 1, R41 += 1, R21 += 1 };
  s1 -> s1 [0, 66] { R67 += 1, R41 += 1, R21 += 1 };
  s1 -> s1 [0, 65535] { R67 += 1, R41 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R67 += 1 };
  s1 -> s1 [68, 65535] { R67 += 1, R41 += 1, R21 += 1 };
  s2 -> s1 [0, 66] { R67 += 1, R41 += 1, R21 += 1 };
  s2 -> s2 [0, 65535] { R67 += 1, R41 += 1, R20 += 1, R21 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R67 += 1 };
  s2 -> s1 [68, 65535] { R67 += 1, R41 += 1, R21 += 1 };
  s3 -> s1 [0, 66] { R67 += 1, R41 += 1, R21 += 1 };
  s3 -> s2 [0, 65535] { R67 += 1, R41 += 1, R20 += 1, R21 += 1 };
  s3 -> s3 [0, 65535] { R67 += 1, R40 += 1, R41 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [68, 65535] { R67 += 1, R41 += 1, R21 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R67 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton key1_14 {
  init s0;
  s0 -> s1 [0, 65535] { R69 += 1, R43 += 1, R23 += 1, R12 += 1 };
  s0 -> s0 [0, 65535] { R68 += 1, R69 += 1 };
  s0 -> s2 [0, 65535] { R69 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [0, 65535] { R69 += 1, R43 += 1, R22 += 1, R23 += 1 };
  s1 -> s1 [0, 65535] { R69 += 1, R43 += 1, R23 += 1, R12 += 1 };
  s1 -> s4 [0, 65535] { R69 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R69 += 1, R43 += 1 };
  s2 -> s1 [0, 65535] { R69 += 1, R43 += 1, R23 += 1, R12 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R69 += 1, R42 += 1, R43 += 1 };
  s2 -> s3 [0, 65535] { R69 += 1, R43 += 1, R22 += 1, R23 += 1 };
  s3 -> s1 [0, 65535] { R69 += 1, R43 += 1, R23 += 1, R12 += 1 };
  s3 -> s4 [0, 65535] { R69 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R69 += 1, R43 += 1, R22 += 1, R23 += 1 };
  s4 -> s4 [0, 65535] { R69 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R69 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R69 += 1, R43 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton key1_15 {
  init s0;
  s0 -> s1 [0, 67] { R71 += 1, R45 += 1, R25 += 1 };
  s0 -> s2 [0, 65535] { R71 += 1, R45 += 1, R24 += 1, R25 += 1 };
  s0 -> s3 [0, 65535] { R71 += 1, R44 += 1, R45 += 1 };
  s0 -> s0 [0, 65535] { R70 += 1, R71 += 1 };
  s0 -> s1 [91, 65535] { R71 += 1, R45 += 1, R25 += 1 };
  s1 -> s1 [0, 67] { R71 += 1, R45 += 1, R25 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R71 += 1, R45 += 1 };
  s1 -> s5 [0, 65535] { R71 += 1 };
  s1 -> s1 [91, 65535] { R71 += 1, R45 += 1, R25 += 1 };
  s2 -> s1 [0, 67] { R71 += 1, R45 += 1, R25 += 1 };
  s2 -> s2 [0, 65535] { R71 += 1, R45 += 1, R24 += 1, R25 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R71 += 1 };
  s2 -> s1 [91, 65535] { R71 += 1, R45 += 1, R25 += 1 };
  s3 -> s1 [0, 67] { R71 += 1, R45 += 1, R25 += 1 };
  s3 -> s2 [0, 65535] { R71 += 1, R45 += 1, R24 += 1, R25 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R71 += 1, R44 += 1, R45 += 1 };
  s3 -> s1 [91, 65535] { R71 += 1, R45 += 1, R25 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R71 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton key1_16 {
  init s0;
  s0 -> s1 [0, 65535] { R73 += 1, R47 += 1, R31 += 1, R13 += 1 };
  s0 -> s2 [0, 65535] { R73 += 1, R47 += 1, R30 += 1, R31 += 1 };
  s0 -> s0 [0, 65535] { R72 += 1, R73 += 1 };
  s0 -> s3 [0, 65535] { R73 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535] { R73 += 1, R47 += 1, R31 += 1, R13 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R73 += 1 };
  s1 -> s6 [0, 65535] { R73 += 1, R47 += 1 };
  s2 -> s1 [0, 65535] { R73 += 1, R47 += 1, R31 += 1, R13 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R73 += 1 };
  s2 -> s2 [0, 65535] { R73 += 1, R47 += 1, R30 += 1, R31 += 1 };
  s3 -> s1 [0, 65535] { R73 += 1, R47 += 1, R31 += 1, R13 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R73 += 1, R47 += 1, R30 += 1, R31 += 1 };
  s3 -> s3 [0, 65535] { R73 += 1, R46 += 1, R47 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R73 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R73 += 1 };
  s6 -> s6 [0, 65535] { R73 += 1, R47 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton key1_17 {
  init s0;
  s0 -> s1 [0, 66] { R75 += 1, R49 += 1, R33 += 1 };
  s0 -> s2 [0, 65535] { R75 += 1, R48 += 1, R49 += 1 };
  s0 -> s0 [0, 65535] { R74 += 1, R75 += 1 };
  s0 -> s3 [0, 65535] { R75 += 1, R49 += 1, R32 += 1, R33 += 1 };
  s0 -> s4 [67, 67] { R75 += 1, R49 += 1, R33 += 1 };
  s0 -> s5 [67, 67] { R75 += 1, R49 += 1, R33 += 1 };
  s0 -> s1 [91, 65535] { R75 += 1, R49 += 1, R33 += 1 };
  s1 -> s1 [0, 66] { R75 += 1, R49 += 1, R33 += 1 };
  s1 -> s1 [0, 65535] { R75 += 1, R49 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R75 += 1 };
  s1 -> s4 [67, 67] { R75 += 1, R49 += 1, R33 += 1 };
  s1 -> s5 [67, 67] { R75 += 1, R49 += 1, R33 += 1 };
  s1 -> s1 [91, 65535] { R75 += 1, R49 += 1, R33 += 1 };
  s2 -> s1 [0, 66] { R75 += 1, R49 += 1, R33 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R75 += 1, R48 += 1, R49 += 1 };
  s2 -> s3 [0, 65535] { R75 += 1, R49 += 1, R32 += 1, R33 += 1 };
  s2 -> s4 [67, 67] { R75 += 1, R49 += 1, R33 += 1 };
  s2 -> s5 [67, 67] { R75 += 1, R49 += 1, R33 += 1 };
  s2 -> s1 [91, 65535] { R75 += 1, R49 += 1, R33 += 1 };
  s3 -> s1 [0, 66] { R75 += 1, R49 += 1, R33 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s7 [0, 65535] { R75 += 1 };
  s3 -> s3 [0, 65535] { R75 += 1, R49 += 1, R32 += 1, R33 += 1 };
  s3 -> s4 [67, 67] { R75 += 1, R49 += 1, R33 += 1 };
  s3 -> s5 [67, 67] { R75 += 1, R49 += 1, R33 += 1 };
  s3 -> s1 [91, 65535] { R75 += 1, R49 += 1, R33 += 1 };
  s4 -> s4 [0, 67] { R75 += 1, R49 += 1, R33 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R75 += 1, R49 += 1 };
  s4 -> s7 [0, 65535] { R75 += 1 };
  s4 -> s4 [91, 65535] { R75 += 1, R49 += 1, R33 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R75 += 1 };
  s5 -> s5 [0, 65535] { R75 += 1, R49 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R75 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
};
synchronised {  // Automata constraining key2
automaton key2_0 {
  init s0;
  s0 -> s0 [0, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
};
synchronised {  // Automata constraining P13
automaton P13_0 {
  init s0;
  s0 -> s1 [99, 99];
  accepting s1;
};
};
constraint R1 = R35 && R2 = R61 && R34 = 0 && R50 = 0 && R51 = R61 && R60 = 0 && -1 < R0 && R3 < 1 && R6 < 1 && R9 < 1 && -1 < R35 && -1 < R61 && (R0 != 0 || R12 = 0 || (R20 = 0 && R21 = 0)) && (R0 != 0 || R12 = 0 || (R22 = 0 && R23 = 0)) && (R0 != 0 || R12 = 0 || (R24 = 0 && R25 = 0)) && (R20 != 0 || R0 = R21 || R0 < 1) && (R22 != 0 || R0 = R23 || R0 < 1) && (R24 != 0 || R0 = R25 || R0 < 1) && (R35 != 0 || ((R62 != 0 || ((R64 != 0 || ((R66 != 0 || ((R68 != 0 || ((R70 != 0 || ((R72 != 0 || ((R74 != 0 || ((R61 != R75 || ((R63 != R75 || ((R65 != R75 || ((R67 != R75 || ((R69 != R75 || ((R71 != R75 || R73 = R75 || R75 < 1) && (R71 = R75 || R75 < 1))) && (R69 = R75 || R75 < 1))) && (R67 = R75 || R75 < 1))) && (R65 = R75 || R75 < 1))) && (R63 = R75 || R75 < 1))) && (R61 = R75 || R61 < 1))) && (R74 = 0 || R61 < 1))) && (R72 = 0 || R61 < 1))) && (R70 = 0 || R61 < 1))) && (R68 = 0 || R61 < 1))) && (R66 = 0 || R61 < 1))) && (R64 = 0 || R61 < 1))) && (R62 = 0 || R61 < 1))) && (R36 != 0 || R35 = R37 || (R0 = 0 && R35 = 0)) && (R38 != 0 || R35 = R39 || (R0 = 0 && R35 = 0)) && (R40 != 0 || R35 = R41 || (R0 = 0 && R35 = 0)) && (R42 != 0 || R35 = R43 || (R0 = 0 && R35 = 0)) && (R44 != 0 || R35 = R45 || (R0 = 0 && R35 = 0)) && (R46 != 0 || R35 = R47 || (R0 = 0 && R35 = 0)) && (R48 != 0 || R35 = R49 || (R0 = 0 && R35 = 0)) && (R52 != 0 || R53 = R61 || (R35 = 0 && R61 = 0)) && (R54 != 0 || R55 = R61 || (R35 = 0 && R61 = 0)) && (R56 != 0 || R57 = R61 || (R35 = 0 && R61 = 0)) && (R58 != 0 || R59 = R61 || (R35 = 0 && R61 = 0)) && (R62 != 0 || ((R64 != 0 || ((R66 != 0 || ((R68 != 0 || ((R70 != 0 || ((R72 != 0 || ((R74 != 0 || ((R61 != R75 || ((R63 != R75 || ((R65 != R75 || ((R67 != R75 || ((R69 != R75 || ((R71 != R75 || R73 = R75 || R35 < 1 || R75 < 0) && (R71 = R75 || R35 < 1 || R75 < 0))) && (R69 = R75 || R35 < 1 || R75 < 0))) && (R67 = R75 || R35 < 1 || R75 < 0))) && (R65 = R75 || R35 < 1 || R75 < 0))) && (R63 = R75 || R35 < 1 || R75 < 0))) && (R61 = R75 || R35 < 1))) && (R74 = 0 || R35 < 1))) && (R72 = 0 || R35 < 1))) && (R70 = 0 || R35 < 1))) && (R68 = 0 || R35 < 1))) && (R66 = 0 || R35 < 1))) && (R64 = 0 || R35 < 1))) && (R13 = 0 || (R30 = 0 && R31 = 0)) && (R13 = 0 || (R32 = 0 && R33 = 0)) && (R14 = 0 || (R26 = 0 && R27 = 0)) && (R14 = 0 || (R28 = 0 && R29 = 0)) && (R15 = 0 || (R16 = 0 && R17 = 0)) && (R15 = 0 || (R18 = 0 && R19 = 0)) && (R20 = 0 || R0 < 1) && (R22 = 0 || R0 < 1) && (R24 = 0 || R0 < 1) && (R36 = 0 || (R0 = 0 && R35 = 0)) && (R38 = 0 || (R0 = 0 && R35 = 0)) && (R40 = 0 || (R0 = 0 && R35 = 0)) && (R42 = 0 || (R0 = 0 && R35 = 0)) && (R44 = 0 || (R0 = 0 && R35 = 0)) && (R46 = 0 || (R0 = 0 && R35 = 0)) && (R48 = 0 || (R0 = 0 && R35 = 0)) && (R52 = 0 || (R35 = 0 && R61 = 0)) && (R54 = 0 || (R35 = 0 && R61 = 0)) && (R56 = 0 || (R35 = 0 && R61 = 0)) && (R58 = 0 || (R35 = 0 && R61 = 0)) && (R62 = 0 || R35 < 1);
// End of Parikh automata intersection problem
