// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R12, R16, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R3, R31, R33, R35, R36, R39, R4, R40, R41, R45, R46, R47, R48, R745, R746, R747, R748, R749, R750, R751, R752, R753, R754, R755, R756, R757, R758, R759, R760, R761, R762, R763, R764, R765, R766, R767, R768, R769, R770, R771, R772, R773, R774, R775, R776, R777, R778, R779, R780, R781, R782, R783, R784, R785, R786, R787, R788, R789, R790, R791, R792, R793, R794, R795, R796, R797, R798, R799, R8, R800, R801, R802, R803, R804, R805, R806, R807, R808, R809, R810, R811, R812, R813, R814, R815, R816, R817, R818, R819, R820, R821, R822, R823, R824;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [76, 76];
  s0 -> s0 [77, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [76, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 75];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [76, 76];
  s0 -> s1 [77, 65535];
  s1 -> s1 [0, 75];
  s1 -> s2 [76, 76];
  s1 -> s1 [77, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R20 += 1 };
  s0 -> s0 [0, 65535] { R19 += 1, R20 += 1 };
  s0 -> s2 [9, 13] { R20 += 1 };
  s0 -> s1 [14, 31] { R20 += 1 };
  s0 -> s2 [32, 32] { R20 += 1 };
  s0 -> s1 [33, 65535] { R20 += 1 };
  s1 -> s1 [0, 65535] { R20 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R20 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s0 [0, 65535] { R21 += 1, R22 += 1 };
  s0 -> s1 [0, 65535] { R22 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R22 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R24 += 1 };
  s0 -> s0 [0, 65535] { R23 += 1, R24 += 1 };
  s0 -> s2 [9, 13] { R24 += 1 };
  s0 -> s1 [14, 31] { R24 += 1 };
  s0 -> s2 [32, 32] { R24 += 1 };
  s0 -> s1 [33, 65535] { R24 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R24 += 1 };
  s2 -> s1 [0, 65535] { R24 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R25 += 1, R26 += 1 };
  s1 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R769 += 1, R770 += 1 };
  s0 -> s1 [0, 65535] { R770 += 1, R18 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R770 += 1, R18 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 75] { R772 += 1 };
  s0 -> s0 [0, 65535] { R771 += 1, R772 += 1 };
  s0 -> s2 [76, 76] { R772 += 1 };
  s0 -> s3 [76, 76] { R772 += 1 };
  s0 -> s1 [88, 65535] { R772 += 1 };
  s1 -> s1 [0, 75] { R772 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [76, 76] { R772 += 1 };
  s1 -> s3 [76, 76] { R772 += 1 };
  s1 -> s1 [88, 65535] { R772 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 76] { R772 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [88, 65535] { R772 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 75] { R774 += 1, R31 += 1 };
  s0 -> s0 [0, 65535] { R773 += 1, R774 += 1 };
  s0 -> s2 [76, 76] { R774 += 1, R31 += 1 };
  s0 -> s3 [76, 76] { R774 += 1, R31 += 1 };
  s0 -> s1 [77, 65535] { R774 += 1, R31 += 1 };
  s1 -> s1 [0, 75] { R774 += 1, R31 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [76, 76] { R774 += 1, R31 += 1 };
  s1 -> s3 [76, 76] { R774 += 1, R31 += 1 };
  s1 -> s1 [77, 65535] { R774 += 1, R31 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R774 += 1, R31 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 75] { R776 += 1, R33 += 1 };
  s0 -> s0 [0, 65535] { R775 += 1, R776 += 1 };
  s0 -> s2 [76, 76] { R776 += 1, R33 += 1 };
  s0 -> s3 [76, 76] { R776 += 1, R33 += 1 };
  s0 -> s1 [77, 65535] { R776 += 1, R33 += 1 };
  s1 -> s1 [0, 75] { R776 += 1, R33 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [76, 76] { R776 += 1, R33 += 1 };
  s1 -> s3 [76, 76] { R776 += 1, R33 += 1 };
  s1 -> s1 [77, 65535] { R776 += 1, R33 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R776 += 1, R33 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 75] { R778 += 1, R35 += 1, R36 += 1 };
  s0 -> s0 [0, 65535] { R777 += 1, R778 += 1 };
  s0 -> s2 [76, 76] { R778 += 1, R35 += 1, R36 += 1 };
  s0 -> s3 [76, 76] { R778 += 1, R35 += 1, R36 += 1 };
  s0 -> s1 [77, 65535] { R778 += 1, R35 += 1, R36 += 1 };
  s1 -> s1 [0, 75] { R778 += 1, R35 += 1, R36 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [76, 76] { R778 += 1, R35 += 1, R36 += 1 };
  s1 -> s3 [76, 76] { R778 += 1, R35 += 1, R36 += 1 };
  s1 -> s1 [77, 65535] { R778 += 1, R35 += 1, R36 += 1 };
  s2 -> s2 [0, 65535] { R778 += 1, R35 += 1, R36 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 75] { R780 += 1, R39 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R779 += 1, R780 += 1 };
  s0 -> s2 [76, 76] { R780 += 1, R39 += 1, R40 += 1 };
  s0 -> s3 [76, 76] { R780 += 1, R39 += 1, R40 += 1 };
  s0 -> s1 [77, 65535] { R780 += 1, R39 += 1, R40 += 1 };
  s1 -> s1 [0, 75] { R780 += 1, R39 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [76, 76] { R780 += 1, R39 += 1, R40 += 1 };
  s1 -> s3 [76, 76] { R780 += 1, R39 += 1, R40 += 1 };
  s1 -> s1 [77, 65535] { R780 += 1, R39 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R780 += 1, R39 += 1, R40 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 75] { R794 += 1 };
  s0 -> s0 [0, 65535] { R793 += 1, R794 += 1 };
  s0 -> s2 [76, 76] { R794 += 1 };
  s0 -> s1 [77, 65535] { R794 += 1 };
  s1 -> s1 [0, 75] { R794 += 1 };
  s1 -> s2 [76, 76] { R794 += 1 };
  s1 -> s1 [77, 65535] { R794 += 1 };
  s2 -> s2 [0, 65535] { R794 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_15 {
  init s0;
  s0 -> s0 [0, 65535] { R795 += 1, R796 += 1 };
  s0 -> s1 [0, 65535] { R796 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R796 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 75] { R798 += 1 };
  s0 -> s0 [0, 65535] { R797 += 1, R798 += 1 };
  s0 -> s2 [0, 65535] { R798 += 1, R8 += 1 };
  s0 -> s3 [76, 76] { R798 += 1 };
  s0 -> s1 [77, 65535] { R798 += 1 };
  s1 -> s1 [0, 75] { R798 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [76, 76] { R798 += 1 };
  s1 -> s1 [77, 65535] { R798 += 1 };
  s2 -> s1 [0, 75] { R798 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R798 += 1, R8 += 1 };
  s2 -> s3 [76, 76] { R798 += 1 };
  s2 -> s1 [77, 65535] { R798 += 1 };
  s3 -> s3 [0, 65535] { R798 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 75] { R800 += 1, R756 += 1 };
  s0 -> s2 [0, 65535] { R800 += 1, R755 += 1, R756 += 1 };
  s0 -> s0 [0, 65535] { R799 += 1, R800 += 1 };
  s0 -> s1 [77, 65535] { R800 += 1, R756 += 1 };
  s1 -> s1 [0, 75] { R800 += 1, R756 += 1 };
  s1 -> s1 [0, 65535] { R800 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [77, 65535] { R800 += 1, R756 += 1 };
  s2 -> s1 [0, 75] { R800 += 1, R756 += 1 };
  s2 -> s2 [0, 65535] { R800 += 1, R755 += 1, R756 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [77, 65535] { R800 += 1, R756 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R801 += 1, R802 += 1 };
  s0 -> s1 [0, 65535] { R802 += 1, R758 += 1, R16 += 1 };
  s0 -> s2 [0, 65535] { R802 += 1, R757 += 1, R758 += 1 };
  s1 -> s1 [0, 65535] { R802 += 1, R758 += 1, R16 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R802 += 1 };
  s2 -> s1 [0, 65535] { R802 += 1, R758 += 1, R16 += 1 };
  s2 -> s2 [0, 65535] { R802 += 1, R757 += 1, R758 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R802 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 76] { R804 += 1, R760 += 1 };
  s0 -> s0 [0, 65535] { R803 += 1, R804 += 1 };
  s0 -> s2 [0, 65535] { R804 += 1, R759 += 1, R760 += 1 };
  s0 -> s1 [87, 65535] { R804 += 1, R760 += 1 };
  s1 -> s1 [0, 76] { R804 += 1, R760 += 1 };
  s1 -> s1 [0, 65535] { R804 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [87, 65535] { R804 += 1, R760 += 1 };
  s2 -> s1 [0, 76] { R804 += 1, R760 += 1 };
  s2 -> s2 [0, 65535] { R804 += 1, R759 += 1, R760 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [87, 65535] { R804 += 1, R760 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 65535] { R806 += 1, R761 += 1, R762 += 1 };
  s0 -> s2 [0, 65535] { R806 += 1, R762 += 1, R46 += 1 };
  s0 -> s0 [0, 65535] { R805 += 1, R806 += 1 };
  s1 -> s1 [0, 65535] { R806 += 1, R761 += 1, R762 += 1 };
  s1 -> s2 [0, 65535] { R806 += 1, R762 += 1, R46 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R806 += 1, R762 += 1, R46 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R806 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R806 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 86] { R808 += 1, R764 += 1 };
  s0 -> s0 [0, 65535] { R807 += 1, R808 += 1 };
  s0 -> s2 [0, 65535] { R808 += 1, R764 += 1, R48 += 1 };
  s0 -> s3 [0, 65535] { R808 += 1, R763 += 1, R764 += 1 };
  s0 -> s1 [88, 65535] { R808 += 1, R764 += 1 };
  s1 -> s1 [0, 86] { R808 += 1, R764 += 1 };
  s1 -> s1 [0, 65535] { R808 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [88, 65535] { R808 += 1, R764 += 1 };
  s2 -> s1 [0, 86] { R808 += 1, R764 += 1 };
  s2 -> s5 [0, 65535] { R808 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R808 += 1, R764 += 1, R48 += 1 };
  s2 -> s1 [88, 65535] { R808 += 1, R764 += 1 };
  s3 -> s1 [0, 86] { R808 += 1, R764 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R808 += 1, R764 += 1, R48 += 1 };
  s3 -> s3 [0, 65535] { R808 += 1, R763 += 1, R764 += 1 };
  s3 -> s1 [88, 65535] { R808 += 1, R764 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R808 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 86] { R810 += 1, R766 += 1, R748 += 1 };
  s0 -> s0 [0, 65535] { R809 += 1, R810 += 1 };
  s0 -> s2 [0, 65535] { R810 += 1, R765 += 1, R766 += 1 };
  s0 -> s3 [0, 65535] { R810 += 1, R766 += 1, R747 += 1, R748 += 1 };
  s0 -> s4 [87, 87] { R810 += 1, R766 += 1, R748 += 1 };
  s0 -> s1 [88, 65535] { R810 += 1, R766 += 1, R748 += 1 };
  s1 -> s1 [0, 86] { R810 += 1, R766 += 1, R748 += 1 };
  s1 -> s4 [87, 87] { R810 += 1, R766 += 1, R748 += 1 };
  s1 -> s1 [88, 65535] { R810 += 1, R766 += 1, R748 += 1 };
  s2 -> s1 [0, 86] { R810 += 1, R766 += 1, R748 += 1 };
  s2 -> s2 [0, 65535] { R810 += 1, R765 += 1, R766 += 1 };
  s2 -> s3 [0, 65535] { R810 += 1, R766 += 1, R747 += 1, R748 += 1 };
  s2 -> s4 [87, 87] { R810 += 1, R766 += 1, R748 += 1 };
  s2 -> s1 [88, 65535] { R810 += 1, R766 += 1, R748 += 1 };
  s3 -> s1 [0, 86] { R810 += 1, R766 += 1, R748 += 1 };
  s3 -> s3 [0, 65535] { R810 += 1, R766 += 1, R747 += 1, R748 += 1 };
  s3 -> s4 [87, 87] { R810 += 1, R766 += 1, R748 += 1 };
  s3 -> s1 [88, 65535] { R810 += 1, R766 += 1, R748 += 1 };
  s4 -> s5 [0, 65535] { R810 += 1 };
  s4 -> s6 [0, 65535] { R810 += 1, R766 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s4 [0, 65535] { R810 += 1, R766 += 1, R748 += 1 };
  s5 -> s5 [0, 65535] { R810 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s5 [0, 65535] { R810 += 1 };
  s6 -> s6 [0, 65535] { R810 += 1, R766 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s4, s5, s6, s7;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R812 += 1, R768 += 1, R753 += 1, R754 += 1 };
  s0 -> s0 [0, 65535] { R811 += 1, R812 += 1 };
  s0 -> s2 [0, 65535] { R812 += 1, R768 += 1, R752 += 1, R753 += 1 };
  s0 -> s3 [0, 65535] { R812 += 1, R767 += 1, R768 += 1 };
  s1 -> s1 [0, 65535] { R812 += 1, R768 += 1, R753 += 1, R754 += 1 };
  s1 -> s6 [0, 65535] { R812 += 1, R768 += 1 };
  s1 -> s5 [0, 65535] { R812 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R812 += 1, R768 += 1, R753 += 1, R754 += 1 };
  s2 -> s5 [0, 65535] { R812 += 1 };
  s2 -> s2 [0, 65535] { R812 += 1, R768 += 1, R752 += 1, R753 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R812 += 1, R768 += 1, R753 += 1, R754 += 1 };
  s3 -> s2 [0, 65535] { R812 += 1, R768 += 1, R752 += 1, R753 += 1 };
  s3 -> s3 [0, 65535] { R812 += 1, R767 += 1, R768 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R812 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R812 += 1, R768 += 1 };
  s6 -> s5 [0, 65535] { R812 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 65535] { R814 += 1, R781 += 1, R782 += 1 };
  s0 -> s2 [0, 65535] { R814 += 1, R782 += 1, R17 += 1 };
  s0 -> s0 [0, 65535] { R813 += 1, R814 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R814 += 1, R781 += 1, R782 += 1 };
  s1 -> s2 [0, 65535] { R814 += 1, R782 += 1, R17 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R814 += 1, R782 += 1, R17 += 1 };
  s2 -> s4 [0, 65535] { R814 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R814 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 75] { R816 += 1, R784 += 1 };
  s0 -> s2 [0, 65535] { R816 += 1, R783 += 1, R784 += 1 };
  s0 -> s0 [0, 65535] { R815 += 1, R816 += 1 };
  s0 -> s3 [76, 76] { R816 += 1, R784 += 1 };
  s0 -> s4 [76, 76] { R816 += 1, R784 += 1 };
  s0 -> s5 [87, 87] { R816 += 1, R784 += 1 };
  s0 -> s1 [88, 65535] { R816 += 1, R784 += 1 };
  s1 -> s1 [0, 75] { R816 += 1, R784 += 1 };
  s1 -> s3 [76, 76] { R816 += 1, R784 += 1 };
  s1 -> s4 [76, 76] { R816 += 1, R784 += 1 };
  s1 -> s5 [87, 87] { R816 += 1, R784 += 1 };
  s1 -> s1 [88, 65535] { R816 += 1, R784 += 1 };
  s2 -> s1 [0, 75] { R816 += 1, R784 += 1 };
  s2 -> s2 [0, 65535] { R816 += 1, R783 += 1, R784 += 1 };
  s2 -> s3 [76, 76] { R816 += 1, R784 += 1 };
  s2 -> s4 [76, 76] { R816 += 1, R784 += 1 };
  s2 -> s5 [87, 87] { R816 += 1, R784 += 1 };
  s2 -> s1 [88, 65535] { R816 += 1, R784 += 1 };
  s3 -> s3 [0, 76] { R816 += 1, R784 += 1 };
  s3 -> s7 [87, 87] { R816 += 1, R784 += 1 };
  s3 -> s3 [88, 65535] { R816 += 1, R784 += 1 };
  s5 -> s5 [0, 75] { R816 += 1, R784 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R816 += 1 };
  s5 -> s7 [76, 76] { R816 += 1, R784 += 1 };
  s5 -> s8 [76, 76] { R816 += 1, R784 += 1 };
  s5 -> s5 [87, 65535] { R816 += 1, R784 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 76] { R816 += 1, R784 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R816 += 1 };
  s7 -> s7 [87, 65535] { R816 += 1, R784 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R816 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 75] { R818 += 1, R786 += 1, R45 += 1 };
  s0 -> s0 [0, 65535] { R817 += 1, R818 += 1 };
  s0 -> s2 [0, 65535] { R818 += 1, R785 += 1, R786 += 1 };
  s0 -> s3 [76, 76] { R818 += 1, R786 += 1, R45 += 1 };
  s0 -> s4 [76, 76] { R818 += 1, R786 += 1, R45 += 1 };
  s0 -> s1 [77, 65535] { R818 += 1, R786 += 1, R45 += 1 };
  s1 -> s1 [0, 75] { R818 += 1, R786 += 1, R45 += 1 };
  s1 -> s1 [0, 65535] { R818 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [76, 76] { R818 += 1, R786 += 1, R45 += 1 };
  s1 -> s4 [76, 76] { R818 += 1, R786 += 1, R45 += 1 };
  s1 -> s1 [77, 65535] { R818 += 1, R786 += 1, R45 += 1 };
  s2 -> s1 [0, 75] { R818 += 1, R786 += 1, R45 += 1 };
  s2 -> s2 [0, 65535] { R818 += 1, R785 += 1, R786 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [76, 76] { R818 += 1, R786 += 1, R45 += 1 };
  s2 -> s4 [76, 76] { R818 += 1, R786 += 1, R45 += 1 };
  s2 -> s1 [77, 65535] { R818 += 1, R786 += 1, R45 += 1 };
  s3 -> s3 [0, 65535] { R818 += 1, R786 += 1, R45 += 1 };
  s3 -> s6 [0, 65535] { R818 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R818 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R818 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 75] { R820 += 1, R788 += 1, R47 += 1 };
  s0 -> s2 [0, 65535] { R820 += 1, R787 += 1, R788 += 1 };
  s0 -> s0 [0, 65535] { R819 += 1, R820 += 1 };
  s0 -> s3 [76, 76] { R820 += 1, R788 += 1, R47 += 1 };
  s0 -> s4 [76, 76] { R820 += 1, R788 += 1, R47 += 1 };
  s0 -> s1 [77, 65535] { R820 += 1, R788 += 1, R47 += 1 };
  s1 -> s1 [0, 75] { R820 += 1, R788 += 1, R47 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R820 += 1 };
  s1 -> s3 [76, 76] { R820 += 1, R788 += 1, R47 += 1 };
  s1 -> s4 [76, 76] { R820 += 1, R788 += 1, R47 += 1 };
  s1 -> s1 [77, 65535] { R820 += 1, R788 += 1, R47 += 1 };
  s2 -> s1 [0, 75] { R820 += 1, R788 += 1, R47 += 1 };
  s2 -> s2 [0, 65535] { R820 += 1, R787 += 1, R788 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [76, 76] { R820 += 1, R788 += 1, R47 += 1 };
  s2 -> s4 [76, 76] { R820 += 1, R788 += 1, R47 += 1 };
  s2 -> s1 [77, 65535] { R820 += 1, R788 += 1, R47 += 1 };
  s3 -> s3 [0, 65535] { R820 += 1, R788 += 1, R47 += 1 };
  s3 -> s6 [0, 65535] { R820 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R820 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R820 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 75] { R822 += 1, R790 += 1, R745 += 1, R746 += 1 };
  s0 -> s0 [0, 65535] { R821 += 1, R822 += 1 };
  s0 -> s2 [0, 65535] { R822 += 1, R789 += 1, R790 += 1 };
  s0 -> s3 [76, 76] { R822 += 1, R790 += 1, R745 += 1, R746 += 1 };
  s0 -> s4 [76, 76] { R822 += 1, R790 += 1, R745 += 1, R746 += 1 };
  s0 -> s1 [77, 65535] { R822 += 1, R790 += 1, R745 += 1, R746 += 1 };
  s1 -> s1 [0, 75] { R822 += 1, R790 += 1, R745 += 1, R746 += 1 };
  s1 -> s1 [0, 65535] { R822 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [76, 76] { R822 += 1, R790 += 1, R745 += 1, R746 += 1 };
  s1 -> s4 [76, 76] { R822 += 1, R790 += 1, R745 += 1, R746 += 1 };
  s1 -> s1 [77, 65535] { R822 += 1, R790 += 1, R745 += 1, R746 += 1 };
  s2 -> s1 [0, 75] { R822 += 1, R790 += 1, R745 += 1, R746 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R822 += 1, R789 += 1, R790 += 1 };
  s2 -> s3 [76, 76] { R822 += 1, R790 += 1, R745 += 1, R746 += 1 };
  s2 -> s4 [76, 76] { R822 += 1, R790 += 1, R745 += 1, R746 += 1 };
  s2 -> s1 [77, 65535] { R822 += 1, R790 += 1, R745 += 1, R746 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R822 += 1 };
  s3 -> s3 [0, 65535] { R822 += 1, R790 += 1, R745 += 1, R746 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R822 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R822 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 75] { R824 += 1, R792 += 1, R749 += 1, R750 += 1 };
  s0 -> s0 [0, 65535] { R823 += 1, R824 += 1 };
  s0 -> s2 [0, 65535] { R824 += 1, R791 += 1, R792 += 1 };
  s0 -> s3 [76, 76] { R824 += 1, R792 += 1, R749 += 1, R750 += 1 };
  s0 -> s4 [76, 76] { R824 += 1, R792 += 1, R749 += 1, R750 += 1 };
  s0 -> s1 [77, 65535] { R824 += 1, R792 += 1, R749 += 1, R750 += 1 };
  s1 -> s1 [0, 75] { R824 += 1, R792 += 1, R749 += 1, R750 += 1 };
  s1 -> s1 [0, 65535] { R824 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [76, 76] { R824 += 1, R792 += 1, R749 += 1, R750 += 1 };
  s1 -> s4 [76, 76] { R824 += 1, R792 += 1, R749 += 1, R750 += 1 };
  s1 -> s1 [77, 65535] { R824 += 1, R792 += 1, R749 += 1, R750 += 1 };
  s2 -> s1 [0, 75] { R824 += 1, R792 += 1, R749 += 1, R750 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R824 += 1, R791 += 1, R792 += 1 };
  s2 -> s3 [76, 76] { R824 += 1, R792 += 1, R749 += 1, R750 += 1 };
  s2 -> s4 [76, 76] { R824 += 1, R792 += 1, R749 += 1, R750 += 1 };
  s2 -> s1 [77, 65535] { R824 += 1, R792 += 1, R749 += 1, R750 += 1 };
  s3 -> s3 [0, 65535] { R824 += 1, R792 += 1, R749 += 1, R750 += 1 };
  s3 -> s6 [0, 65535] { R824 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R824 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R824 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [108, 108];
  accepting s1;
};
};
constraint R1 = R766 && R2 = R824 && R19 - R824 = -1 && R20 = R824 && R21 - R824 = -1 && R22 = R824 && R23 = 0 && R24 = 1 && R25 = 0 && R26 = 1 && R31 + R46 + R45 + -1*R748 + -1*R746 - R36 = 0 && R35 + R747 + R745 = 0 && R765 = 0 && R783 = 0 && R784 = 0 && R793 = 0 && R794 = R824 && R795 = 0 && R796 = R824 && R797 = 0 && R798 = R824 && R799 = 0 && R800 = R824 && R801 = 0 && R802 = R824 && R803 = 0 && R804 = R824 && R805 = 0 && R806 = R824 && R807 = 0 && R808 = R824 && R809 = 0 && R810 = R824 && R811 = 0 && R812 = R824 && R813 = 0 && R814 = R824 && R815 = 0 && R816 = R824 && R817 = 0 && R818 = R824 && R819 = 0 && R820 = R824 && R821 = 0 && R822 = R824 && R823 = 0 && R8 < 1 && R11 < 1 && R12 < 1 && R33 + R48 + R47 < 1 && -1*R748 + -1*R746 - R36 < 1 && -1 < R766 && 0 < R824 && (R36 + R748 + R746 != 0 || R41 + R754 + R751 = 0 || (R39 + R752 + R749 = 0 && R40 + R753 + R750 = 0)) && (R39 + R752 + R749 != 0 || R36 + R748 + R746 + -1*R753 + -1*R750 - R40 = 0 || R36 + R748 + R746 < 1) && (R755 != 0 || R756 = R766 || (R16 = 0 && R766 = 0)) && (R757 != 0 || R758 = R766 || (R16 = 0 && R766 = 0)) && (R759 != 0 || R760 = R766 || (R16 = 0 && R766 = 0)) && (R761 != 0 || R762 = R766 || (R16 = 0 && R766 = 0)) && (R763 != 0 || R764 = R766 || (R16 = 0 && R766 = 0)) && (R767 != 0 || R766 = R768 || (R16 = 0 && R766 = 0)) && (R17 = 0 || (R781 = 0 && R782 = 0)) && (R17 = 0 || (R785 = 0 && R786 = 0)) && (R17 = 0 || (R787 = 0 && R788 = 0)) && (R17 = 0 || (R789 = 0 && R790 = 0)) && (R17 = 0 || (R791 = 0 && R792 = 0)) && (R18 = 0 || (R769 = 0 && R770 = 0)) && (R18 = 0 || (R771 = 0 && R772 = 0)) && (R18 = 0 || (R773 = 0 && R774 = 0)) && (R18 = 0 || (R775 = 0 && R776 = 0)) && (R18 = 0 || (R777 = 0 && R778 = 0)) && (R18 = 0 || (R779 = 0 && R780 = 0)) && (R39 + R752 + R749 = 0 || R36 + R748 + R746 < 1) && (R755 = 0 || (R16 = 0 && R766 = 0)) && (R757 = 0 || (R16 = 0 && R766 = 0)) && (R759 = 0 || (R16 = 0 && R766 = 0)) && (R761 = 0 || (R16 = 0 && R766 = 0)) && (R763 = 0 || (R16 = 0 && R766 = 0)) && (R767 = 0 || (R16 = 0 && R766 = 0));
// End of Parikh automata intersection problem
