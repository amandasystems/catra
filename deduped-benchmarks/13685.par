// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R12, R16, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R3, R31, R33, R35, R36, R39, R4, R40, R41, R45, R46, R47, R48, R745, R746, R747, R748, R8, R825, R826, R827, R828, R829, R830, R831, R832, R833, R834, R835, R836, R837, R838, R839, R840, R841, R842, R843, R844, R845, R846, R847, R848, R849, R850, R851, R852, R853, R854, R855, R856, R857, R858, R859, R860, R861, R862, R863, R864, R865, R866, R867, R868, R869, R870, R871, R872, R873, R874, R875, R876, R877, R878, R879, R880, R881, R882, R883, R884, R885, R886, R887, R888, R889, R890, R891, R892, R893, R894, R895, R896, R897, R898, R899, R900;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [76, 76];
  s0 -> s0 [77, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [76, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 75];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [76, 76];
  s0 -> s1 [77, 65535];
  s1 -> s1 [0, 75];
  s1 -> s2 [76, 76];
  s1 -> s1 [77, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R20 += 1 };
  s0 -> s0 [0, 65535] { R19 += 1, R20 += 1 };
  s0 -> s2 [9, 13] { R20 += 1 };
  s0 -> s1 [14, 31] { R20 += 1 };
  s0 -> s2 [32, 32] { R20 += 1 };
  s0 -> s1 [33, 65535] { R20 += 1 };
  s1 -> s1 [0, 65535] { R20 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R20 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s0 [0, 65535] { R21 += 1, R22 += 1 };
  s0 -> s1 [0, 65535] { R22 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R22 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R24 += 1 };
  s0 -> s0 [0, 65535] { R23 += 1, R24 += 1 };
  s0 -> s2 [9, 13] { R24 += 1 };
  s0 -> s1 [14, 31] { R24 += 1 };
  s0 -> s2 [32, 32] { R24 += 1 };
  s0 -> s1 [33, 65535] { R24 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R24 += 1 };
  s2 -> s1 [0, 65535] { R24 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R25 += 1, R26 += 1 };
  s1 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R846 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R845 += 1, R846 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R846 += 1, R18 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 75] { R848 += 1 };
  s0 -> s0 [0, 65535] { R847 += 1, R848 += 1 };
  s0 -> s2 [76, 76] { R848 += 1 };
  s0 -> s3 [76, 76] { R848 += 1 };
  s0 -> s1 [88, 65535] { R848 += 1 };
  s1 -> s1 [0, 75] { R848 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [76, 76] { R848 += 1 };
  s1 -> s3 [76, 76] { R848 += 1 };
  s1 -> s1 [88, 65535] { R848 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 76] { R848 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [88, 65535] { R848 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 75] { R850 += 1, R31 += 1 };
  s0 -> s0 [0, 65535] { R849 += 1, R850 += 1 };
  s0 -> s2 [76, 76] { R850 += 1, R31 += 1 };
  s0 -> s3 [76, 76] { R850 += 1, R31 += 1 };
  s0 -> s1 [77, 65535] { R850 += 1, R31 += 1 };
  s1 -> s1 [0, 75] { R850 += 1, R31 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [76, 76] { R850 += 1, R31 += 1 };
  s1 -> s3 [76, 76] { R850 += 1, R31 += 1 };
  s1 -> s1 [77, 65535] { R850 += 1, R31 += 1 };
  s2 -> s2 [0, 65535] { R850 += 1, R31 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 75] { R852 += 1, R33 += 1 };
  s0 -> s0 [0, 65535] { R851 += 1, R852 += 1 };
  s0 -> s2 [76, 76] { R852 += 1, R33 += 1 };
  s0 -> s3 [76, 76] { R852 += 1, R33 += 1 };
  s0 -> s1 [77, 65535] { R852 += 1, R33 += 1 };
  s1 -> s1 [0, 75] { R852 += 1, R33 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [76, 76] { R852 += 1, R33 += 1 };
  s1 -> s3 [76, 76] { R852 += 1, R33 += 1 };
  s1 -> s1 [77, 65535] { R852 += 1, R33 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R852 += 1, R33 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 75] { R854 += 1, R35 += 1, R36 += 1 };
  s0 -> s0 [0, 65535] { R853 += 1, R854 += 1 };
  s0 -> s2 [76, 76] { R854 += 1, R35 += 1, R36 += 1 };
  s0 -> s3 [76, 76] { R854 += 1, R35 += 1, R36 += 1 };
  s0 -> s1 [77, 65535] { R854 += 1, R35 += 1, R36 += 1 };
  s1 -> s1 [0, 75] { R854 += 1, R35 += 1, R36 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [76, 76] { R854 += 1, R35 += 1, R36 += 1 };
  s1 -> s3 [76, 76] { R854 += 1, R35 += 1, R36 += 1 };
  s1 -> s1 [77, 65535] { R854 += 1, R35 += 1, R36 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R854 += 1, R35 += 1, R36 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 75] { R856 += 1, R39 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R855 += 1, R856 += 1 };
  s0 -> s2 [76, 76] { R856 += 1, R39 += 1, R40 += 1 };
  s0 -> s3 [76, 76] { R856 += 1, R39 += 1, R40 += 1 };
  s0 -> s1 [77, 65535] { R856 += 1, R39 += 1, R40 += 1 };
  s1 -> s1 [0, 75] { R856 += 1, R39 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [76, 76] { R856 += 1, R39 += 1, R40 += 1 };
  s1 -> s3 [76, 76] { R856 += 1, R39 += 1, R40 += 1 };
  s1 -> s1 [77, 65535] { R856 += 1, R39 += 1, R40 += 1 };
  s2 -> s2 [0, 65535] { R856 += 1, R39 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 75] { R870 += 1 };
  s0 -> s0 [0, 65535] { R869 += 1, R870 += 1 };
  s0 -> s2 [76, 76] { R870 += 1 };
  s0 -> s1 [77, 65535] { R870 += 1 };
  s1 -> s1 [0, 75] { R870 += 1 };
  s1 -> s2 [76, 76] { R870 += 1 };
  s1 -> s1 [77, 65535] { R870 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R870 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 65535] { R872 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R871 += 1, R872 += 1 };
  s1 -> s1 [0, 65535] { R872 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 75] { R874 += 1 };
  s0 -> s0 [0, 65535] { R873 += 1, R874 += 1 };
  s0 -> s2 [0, 65535] { R874 += 1, R8 += 1 };
  s0 -> s3 [76, 76] { R874 += 1 };
  s0 -> s1 [77, 65535] { R874 += 1 };
  s1 -> s1 [0, 75] { R874 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [76, 76] { R874 += 1 };
  s1 -> s1 [77, 65535] { R874 += 1 };
  s2 -> s1 [0, 75] { R874 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R874 += 1, R8 += 1 };
  s2 -> s3 [76, 76] { R874 += 1 };
  s2 -> s1 [77, 65535] { R874 += 1 };
  s3 -> s3 [0, 65535] { R874 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 75] { R876 += 1, R832 += 1 };
  s0 -> s2 [0, 65535] { R876 += 1, R831 += 1, R832 += 1 };
  s0 -> s0 [0, 65535] { R875 += 1, R876 += 1 };
  s0 -> s1 [77, 65535] { R876 += 1, R832 += 1 };
  s1 -> s1 [0, 75] { R876 += 1, R832 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R876 += 1 };
  s1 -> s1 [77, 65535] { R876 += 1, R832 += 1 };
  s2 -> s1 [0, 75] { R876 += 1, R832 += 1 };
  s2 -> s2 [0, 65535] { R876 += 1, R831 += 1, R832 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [77, 65535] { R876 += 1, R832 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R877 += 1, R878 += 1 };
  s0 -> s1 [0, 65535] { R878 += 1, R834 += 1, R16 += 1 };
  s0 -> s2 [0, 65535] { R878 += 1, R833 += 1, R834 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R878 += 1 };
  s1 -> s1 [0, 65535] { R878 += 1, R834 += 1, R16 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R878 += 1, R834 += 1, R16 += 1 };
  s2 -> s2 [0, 65535] { R878 += 1, R833 += 1, R834 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R878 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 76] { R880 += 1, R836 += 1 };
  s0 -> s0 [0, 65535] { R879 += 1, R880 += 1 };
  s0 -> s2 [0, 65535] { R880 += 1, R835 += 1, R836 += 1 };
  s0 -> s1 [87, 65535] { R880 += 1, R836 += 1 };
  s1 -> s1 [0, 76] { R880 += 1, R836 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R880 += 1 };
  s1 -> s1 [87, 65535] { R880 += 1, R836 += 1 };
  s2 -> s1 [0, 76] { R880 += 1, R836 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R880 += 1, R835 += 1, R836 += 1 };
  s2 -> s1 [87, 65535] { R880 += 1, R836 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 65535] { R882 += 1, R837 += 1, R838 += 1 };
  s0 -> s2 [0, 65535] { R882 += 1, R838 += 1, R46 += 1 };
  s0 -> s0 [0, 65535] { R881 += 1, R882 += 1 };
  s1 -> s1 [0, 65535] { R882 += 1, R837 += 1, R838 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R882 += 1, R838 += 1, R46 += 1 };
  s2 -> s3 [0, 65535] { R882 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R882 += 1, R838 += 1, R46 += 1 };
  s3 -> s3 [0, 65535] { R882 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 86] { R884 += 1, R840 += 1 };
  s0 -> s2 [0, 65535] { R884 += 1, R840 += 1, R48 += 1 };
  s0 -> s3 [0, 65535] { R884 += 1, R839 += 1, R840 += 1 };
  s0 -> s0 [0, 65535] { R883 += 1, R884 += 1 };
  s0 -> s1 [88, 65535] { R884 += 1, R840 += 1 };
  s1 -> s1 [0, 86] { R884 += 1, R840 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R884 += 1 };
  s1 -> s1 [88, 65535] { R884 += 1, R840 += 1 };
  s2 -> s1 [0, 86] { R884 += 1, R840 += 1 };
  s2 -> s2 [0, 65535] { R884 += 1, R840 += 1, R48 += 1 };
  s2 -> s5 [0, 65535] { R884 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [88, 65535] { R884 += 1, R840 += 1 };
  s3 -> s1 [0, 86] { R884 += 1, R840 += 1 };
  s3 -> s2 [0, 65535] { R884 += 1, R840 += 1, R48 += 1 };
  s3 -> s3 [0, 65535] { R884 += 1, R839 += 1, R840 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [88, 65535] { R884 += 1, R840 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R884 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 86] { R886 += 1, R842 += 1, R748 += 1 };
  s0 -> s0 [0, 65535] { R885 += 1, R886 += 1 };
  s0 -> s2 [0, 65535] { R886 += 1, R842 += 1, R747 += 1, R748 += 1 };
  s0 -> s3 [0, 65535] { R886 += 1, R841 += 1, R842 += 1 };
  s0 -> s4 [87, 87] { R886 += 1, R842 += 1, R748 += 1 };
  s0 -> s1 [88, 65535] { R886 += 1, R842 += 1, R748 += 1 };
  s1 -> s1 [0, 86] { R886 += 1, R842 += 1, R748 += 1 };
  s1 -> s4 [87, 87] { R886 += 1, R842 += 1, R748 += 1 };
  s1 -> s1 [88, 65535] { R886 += 1, R842 += 1, R748 += 1 };
  s2 -> s1 [0, 86] { R886 += 1, R842 += 1, R748 += 1 };
  s2 -> s2 [0, 65535] { R886 += 1, R842 += 1, R747 += 1, R748 += 1 };
  s2 -> s4 [87, 87] { R886 += 1, R842 += 1, R748 += 1 };
  s2 -> s1 [88, 65535] { R886 += 1, R842 += 1, R748 += 1 };
  s3 -> s1 [0, 86] { R886 += 1, R842 += 1, R748 += 1 };
  s3 -> s2 [0, 65535] { R886 += 1, R842 += 1, R747 += 1, R748 += 1 };
  s3 -> s3 [0, 65535] { R886 += 1, R841 += 1, R842 += 1 };
  s3 -> s4 [87, 87] { R886 += 1, R842 += 1, R748 += 1 };
  s3 -> s1 [88, 65535] { R886 += 1, R842 += 1, R748 += 1 };
  s4 -> s4 [0, 65535] { R886 += 1, R842 += 1, R748 += 1 };
  s4 -> s5 [0, 65535] { R886 += 1, R842 += 1 };
  s4 -> s6 [0, 65535] { R886 += 1 };
  s4 -> s7 [0, 65535];
  s5 -> s5 [0, 65535] { R886 += 1, R842 += 1 };
  s5 -> s6 [0, 65535] { R886 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s6 [0, 65535] { R886 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s4, s5, s6, s7;
};
automaton value2_23 {
  init s0;
  s0 -> s0 [0, 65535] { R887 += 1, R888 += 1 };
  s0 -> s1 [0, 65535] { R888 += 1, R844 += 1, R829 += 1, R830 += 1 };
  s0 -> s2 [0, 65535] { R888 += 1, R843 += 1, R844 += 1 };
  s0 -> s3 [0, 65535] { R888 += 1, R844 += 1 };
  s1 -> s4 [0, 65535] { R888 += 1 };
  s1 -> s1 [0, 65535] { R888 += 1, R844 += 1, R829 += 1, R830 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R888 += 1, R844 += 1 };
  s2 -> s1 [0, 65535] { R888 += 1, R844 += 1, R829 += 1, R830 += 1 };
  s2 -> s2 [0, 65535] { R888 += 1, R843 += 1, R844 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R888 += 1, R844 += 1 };
  s3 -> s4 [0, 65535] { R888 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R888 += 1, R844 += 1 };
  s4 -> s4 [0, 65535] { R888 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 65535] { R890 += 1, R857 += 1, R858 += 1 };
  s0 -> s2 [0, 65535] { R890 += 1, R858 += 1, R17 += 1 };
  s0 -> s0 [0, 65535] { R889 += 1, R890 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R890 += 1, R857 += 1, R858 += 1 };
  s1 -> s2 [0, 65535] { R890 += 1, R858 += 1, R17 += 1 };
  s2 -> s3 [0, 65535] { R890 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R890 += 1, R858 += 1, R17 += 1 };
  s3 -> s3 [0, 65535] { R890 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 75] { R892 += 1, R860 += 1 };
  s0 -> s2 [0, 65535] { R892 += 1, R859 += 1, R860 += 1 };
  s0 -> s0 [0, 65535] { R891 += 1, R892 += 1 };
  s0 -> s3 [76, 76] { R892 += 1, R860 += 1 };
  s0 -> s4 [76, 76] { R892 += 1, R860 += 1 };
  s0 -> s5 [87, 87] { R892 += 1, R860 += 1 };
  s0 -> s1 [88, 65535] { R892 += 1, R860 += 1 };
  s1 -> s1 [0, 75] { R892 += 1, R860 += 1 };
  s1 -> s3 [76, 76] { R892 += 1, R860 += 1 };
  s1 -> s4 [76, 76] { R892 += 1, R860 += 1 };
  s1 -> s5 [87, 87] { R892 += 1, R860 += 1 };
  s1 -> s1 [88, 65535] { R892 += 1, R860 += 1 };
  s2 -> s1 [0, 75] { R892 += 1, R860 += 1 };
  s2 -> s2 [0, 65535] { R892 += 1, R859 += 1, R860 += 1 };
  s2 -> s3 [76, 76] { R892 += 1, R860 += 1 };
  s2 -> s4 [76, 76] { R892 += 1, R860 += 1 };
  s2 -> s5 [87, 87] { R892 += 1, R860 += 1 };
  s2 -> s1 [88, 65535] { R892 += 1, R860 += 1 };
  s4 -> s4 [0, 76] { R892 += 1, R860 += 1 };
  s4 -> s7 [87, 87] { R892 += 1, R860 += 1 };
  s4 -> s4 [88, 65535] { R892 += 1, R860 += 1 };
  s5 -> s5 [0, 75] { R892 += 1, R860 += 1 };
  s5 -> s5 [0, 65535] { R892 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [76, 76] { R892 += 1, R860 += 1 };
  s5 -> s8 [76, 76] { R892 += 1, R860 += 1 };
  s5 -> s5 [87, 65535] { R892 += 1, R860 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 76] { R892 += 1, R860 += 1 };
  s7 -> s7 [0, 65535] { R892 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [87, 65535] { R892 += 1, R860 += 1 };
  s8 -> s8 [0, 65535] { R892 += 1 };
  s8 -> s6 [0, 65535];
  accepting s5, s6, s7, s8;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 75] { R894 += 1, R862 += 1, R45 += 1 };
  s0 -> s2 [0, 65535] { R894 += 1, R861 += 1, R862 += 1 };
  s0 -> s0 [0, 65535] { R893 += 1, R894 += 1 };
  s0 -> s3 [76, 76] { R894 += 1, R862 += 1, R45 += 1 };
  s0 -> s4 [76, 76] { R894 += 1, R862 += 1, R45 += 1 };
  s0 -> s1 [77, 65535] { R894 += 1, R862 += 1, R45 += 1 };
  s1 -> s1 [0, 75] { R894 += 1, R862 += 1, R45 += 1 };
  s1 -> s1 [0, 65535] { R894 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [76, 76] { R894 += 1, R862 += 1, R45 += 1 };
  s1 -> s4 [76, 76] { R894 += 1, R862 += 1, R45 += 1 };
  s1 -> s1 [77, 65535] { R894 += 1, R862 += 1, R45 += 1 };
  s2 -> s1 [0, 75] { R894 += 1, R862 += 1, R45 += 1 };
  s2 -> s2 [0, 65535] { R894 += 1, R861 += 1, R862 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [76, 76] { R894 += 1, R862 += 1, R45 += 1 };
  s2 -> s4 [76, 76] { R894 += 1, R862 += 1, R45 += 1 };
  s2 -> s1 [77, 65535] { R894 += 1, R862 += 1, R45 += 1 };
  s3 -> s3 [0, 65535] { R894 += 1, R862 += 1, R45 += 1 };
  s3 -> s6 [0, 65535] { R894 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R894 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R894 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 75] { R896 += 1, R864 += 1, R47 += 1 };
  s0 -> s2 [0, 65535] { R896 += 1, R863 += 1, R864 += 1 };
  s0 -> s0 [0, 65535] { R895 += 1, R896 += 1 };
  s0 -> s3 [76, 76] { R896 += 1, R864 += 1, R47 += 1 };
  s0 -> s4 [76, 76] { R896 += 1, R864 += 1, R47 += 1 };
  s0 -> s1 [77, 65535] { R896 += 1, R864 += 1, R47 += 1 };
  s1 -> s1 [0, 75] { R896 += 1, R864 += 1, R47 += 1 };
  s1 -> s1 [0, 65535] { R896 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [76, 76] { R896 += 1, R864 += 1, R47 += 1 };
  s1 -> s4 [76, 76] { R896 += 1, R864 += 1, R47 += 1 };
  s1 -> s1 [77, 65535] { R896 += 1, R864 += 1, R47 += 1 };
  s2 -> s1 [0, 75] { R896 += 1, R864 += 1, R47 += 1 };
  s2 -> s2 [0, 65535] { R896 += 1, R863 += 1, R864 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [76, 76] { R896 += 1, R864 += 1, R47 += 1 };
  s2 -> s4 [76, 76] { R896 += 1, R864 += 1, R47 += 1 };
  s2 -> s1 [77, 65535] { R896 += 1, R864 += 1, R47 += 1 };
  s3 -> s3 [0, 65535] { R896 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R896 += 1 };
  s4 -> s4 [0, 65535] { R896 += 1, R864 += 1, R47 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R896 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 75] { R898 += 1, R866 += 1, R745 += 1, R746 += 1 };
  s0 -> s2 [0, 65535] { R898 += 1, R865 += 1, R866 += 1 };
  s0 -> s0 [0, 65535] { R897 += 1, R898 += 1 };
  s0 -> s3 [76, 76] { R898 += 1, R866 += 1, R745 += 1, R746 += 1 };
  s0 -> s4 [76, 76] { R898 += 1, R866 += 1, R745 += 1, R746 += 1 };
  s0 -> s1 [77, 65535] { R898 += 1, R866 += 1, R745 += 1, R746 += 1 };
  s1 -> s1 [0, 75] { R898 += 1, R866 += 1, R745 += 1, R746 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R898 += 1 };
  s1 -> s3 [76, 76] { R898 += 1, R866 += 1, R745 += 1, R746 += 1 };
  s1 -> s4 [76, 76] { R898 += 1, R866 += 1, R745 += 1, R746 += 1 };
  s1 -> s1 [77, 65535] { R898 += 1, R866 += 1, R745 += 1, R746 += 1 };
  s2 -> s1 [0, 75] { R898 += 1, R866 += 1, R745 += 1, R746 += 1 };
  s2 -> s2 [0, 65535] { R898 += 1, R865 += 1, R866 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [76, 76] { R898 += 1, R866 += 1, R745 += 1, R746 += 1 };
  s2 -> s4 [76, 76] { R898 += 1, R866 += 1, R745 += 1, R746 += 1 };
  s2 -> s1 [77, 65535] { R898 += 1, R866 += 1, R745 += 1, R746 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R898 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R898 += 1, R866 += 1, R745 += 1, R746 += 1 };
  s4 -> s6 [0, 65535] { R898 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R898 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 75] { R900 += 1, R868 += 1, R826 += 1, R827 += 1 };
  s0 -> s2 [0, 75] { R900 += 1, R868 += 1, R825 += 1, R826 += 1 };
  s0 -> s0 [0, 65535] { R899 += 1, R900 += 1 };
  s0 -> s3 [0, 65535] { R900 += 1, R867 += 1, R868 += 1 };
  s0 -> s4 [76, 76] { R900 += 1, R868 += 1, R825 += 1, R826 += 1 };
  s0 -> s5 [76, 76] { R900 += 1, R868 += 1, R826 += 1, R827 += 1 };
  s0 -> s6 [76, 76] { R900 += 1, R868 += 1, R825 += 1, R826 += 1 };
  s0 -> s7 [76, 76] { R900 += 1, R868 += 1, R826 += 1, R827 += 1 };
  s0 -> s1 [77, 65535] { R900 += 1, R868 += 1, R826 += 1, R827 += 1 };
  s0 -> s2 [77, 65535] { R900 += 1, R868 += 1, R825 += 1, R826 += 1 };
  s1 -> s1 [0, 75] { R900 += 1, R868 += 1, R826 += 1, R827 += 1 };
  s1 -> s9 [0, 65535];
  s1 -> s1 [0, 65535] { R900 += 1 };
  s1 -> s5 [76, 76] { R900 += 1, R868 += 1, R826 += 1, R827 += 1 };
  s1 -> s7 [76, 76] { R900 += 1, R868 += 1, R826 += 1, R827 += 1 };
  s1 -> s1 [77, 65535] { R900 += 1, R868 += 1, R826 += 1, R827 += 1 };
  s2 -> s1 [0, 75] { R900 += 1, R868 += 1, R826 += 1, R827 += 1 };
  s2 -> s2 [0, 75] { R900 += 1, R868 += 1, R825 += 1, R826 += 1 };
  s2 -> s4 [76, 76] { R900 += 1, R868 += 1, R825 += 1, R826 += 1 };
  s2 -> s5 [76, 76] { R900 += 1, R868 += 1, R826 += 1, R827 += 1 };
  s2 -> s6 [76, 76] { R900 += 1, R868 += 1, R825 += 1, R826 += 1 };
  s2 -> s7 [76, 76] { R900 += 1, R868 += 1, R826 += 1, R827 += 1 };
  s2 -> s1 [77, 65535] { R900 += 1, R868 += 1, R826 += 1, R827 += 1 };
  s2 -> s2 [77, 65535] { R900 += 1, R868 += 1, R825 += 1, R826 += 1 };
  s3 -> s1 [0, 75] { R900 += 1, R868 += 1, R826 += 1, R827 += 1 };
  s3 -> s2 [0, 75] { R900 += 1, R868 += 1, R825 += 1, R826 += 1 };
  s3 -> s3 [0, 65535] { R900 += 1, R867 += 1, R868 += 1 };
  s3 -> s4 [76, 76] { R900 += 1, R868 += 1, R825 += 1, R826 += 1 };
  s3 -> s5 [76, 76] { R900 += 1, R868 += 1, R826 += 1, R827 += 1 };
  s3 -> s6 [76, 76] { R900 += 1, R868 += 1, R825 += 1, R826 += 1 };
  s3 -> s7 [76, 76] { R900 += 1, R868 += 1, R826 += 1, R827 += 1 };
  s3 -> s1 [77, 65535] { R900 += 1, R868 += 1, R826 += 1, R827 += 1 };
  s3 -> s2 [77, 65535] { R900 += 1, R868 += 1, R825 += 1, R826 += 1 };
  s5 -> s9 [0, 65535];
  s5 -> s5 [0, 65535] { R900 += 1 };
  s6 -> s6 [0, 65535] { R900 += 1, R868 += 1, R825 += 1, R826 += 1 };
  s6 -> s7 [0, 65535] { R900 += 1, R868 += 1, R826 += 1, R827 += 1 };
  s7 -> s8 [0, 65535] { R900 += 1 };
  s7 -> s9 [0, 65535];
  s7 -> s7 [0, 65535] { R900 += 1, R868 += 1, R826 += 1, R827 += 1 };
  s8 -> s8 [0, 65535] { R900 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s8, s5, s9, s1, s7;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [108, 108];
  accepting s1;
};
};
constraint R1 = R842 && R2 = R900 && R19 - R900 = -1 && R20 = R900 && R21 - R900 = -1 && R22 = R900 && R23 = 0 && R24 = 1 && R25 = 0 && R26 = 1 && R31 + R46 + R45 + -1*R748 + -1*R746 - R36 = 0 && R35 + R747 + R745 = 0 && R841 = 0 && R859 = 0 && R860 = 0 && R867 = 0 && R868 = 0 && R869 = 0 && R870 = R900 && R871 = 0 && R872 = R900 && R873 = 0 && R874 = R900 && R875 = 0 && R876 = R900 && R877 = 0 && R878 = R900 && R879 = 0 && R880 = R900 && R881 = 0 && R882 = R900 && R883 = 0 && R884 = R900 && R885 = 0 && R886 = R900 && R887 = 0 && R888 = R900 && R889 = 0 && R890 = R900 && R891 = 0 && R892 = R900 && R893 = 0 && R894 = R900 && R895 = 0 && R896 = R900 && R897 = 0 && R898 = R900 && R899 = 0 && R8 < 1 && R11 < 1 && R12 < 1 && R33 + R48 + R47 < 1 && -1*R748 + -1*R746 - R36 < 1 && -1 < R842 && 0 < R900 && (R36 + R748 + R746 != 0 || R41 + R830 + R827 = 0 || (R39 + R828 + R825 = 0 && R40 + R829 + R826 = 0)) && (R39 + R828 + R825 != 0 || R36 + R748 + R746 + -1*R829 + -1*R826 - R40 = 0 || R36 + R748 + R746 < 1) && (R831 != 0 || R832 = R842 || (R16 = 0 && R842 = 0)) && (R833 != 0 || R834 = R842 || (R16 = 0 && R842 = 0)) && (R835 != 0 || R836 = R842 || (R16 = 0 && R842 = 0)) && (R837 != 0 || R838 = R842 || (R16 = 0 && R842 = 0)) && (R839 != 0 || R840 = R842 || (R16 = 0 && R842 = 0)) && (R843 != 0 || R842 = R844 || (R16 = 0 && R842 = 0)) && (R17 = 0 || (R857 = 0 && R858 = 0)) && (R17 = 0 || (R861 = 0 && R862 = 0)) && (R17 = 0 || (R863 = 0 && R864 = 0)) && (R17 = 0 || (R865 = 0 && R866 = 0)) && (R18 = 0 || (R845 = 0 && R846 = 0)) && (R18 = 0 || (R847 = 0 && R848 = 0)) && (R18 = 0 || (R849 = 0 && R850 = 0)) && (R18 = 0 || (R851 = 0 && R852 = 0)) && (R18 = 0 || (R853 = 0 && R854 = 0)) && (R18 = 0 || (R855 = 0 && R856 = 0)) && (R39 + R828 + R825 = 0 || R36 + R748 + R746 < 1) && (R831 = 0 || (R16 = 0 && R842 = 0)) && (R833 = 0 || (R16 = 0 && R842 = 0)) && (R835 = 0 || (R16 = 0 && R842 = 0)) && (R837 = 0 || (R16 = 0 && R842 = 0)) && (R839 = 0 || (R16 = 0 && R842 = 0)) && (R843 = 0 || (R16 = 0 && R842 = 0));
// End of Parikh automata intersection problem
