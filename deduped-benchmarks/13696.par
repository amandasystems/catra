// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R125, R128, R129, R130, R131, R132, R133, R134, R135, R136, R137, R138, R139, R140, R141, R142, R143, R144, R145, R146, R147, R148, R149, R150, R151, R152, R153, R154, R155, R156, R157, R158, R159, R160, R161, R162, R163, R164, R165, R166, R167, R168, R169, R170, R171, R172, R173, R174, R175, R176, R177, R178, R179, R180, R181, R182, R183, R2, R3, R4, R5, R6, R8, R9;
synchronised {  // Automata constraining P29
automaton P29_0 {
  init s0;
  s0 -> s1 [11, 11];
  accepting s1;
};
};
synchronised {  // Automata constraining P28
automaton P28_0 {
  init s0;
  s0 -> s1 [13, 13];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R128 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s0 [0, 65535] { R138 += 1, R139 += 1 };
  s0 -> s1 [12, 12] { R139 += 1 };
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 65535] { R141 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R140 += 1, R141 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R141 += 1, R5 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 8] { R143 += 1 };
  s0 -> s0 [0, 65535] { R142 += 1, R143 += 1 };
  s0 -> s2 [9, 13] { R143 += 1 };
  s0 -> s1 [14, 31] { R143 += 1 };
  s0 -> s2 [32, 32] { R143 += 1 };
  s0 -> s1 [33, 65535] { R143 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R143 += 1 };
  s2 -> s1 [0, 65535] { R143 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 65535] { R145 += 1, R6 += 1 };
  s0 -> s0 [0, 65535] { R144 += 1, R145 += 1 };
  s1 -> s1 [0, 65535] { R145 += 1, R6 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 64] { R161 += 1 };
  s0 -> s0 [0, 65535] { R160 += 1, R161 += 1 };
  s0 -> s2 [89, 89] { R161 += 1 };
  s0 -> s1 [90, 65535] { R161 += 1 };
  s1 -> s1 [0, 64] { R161 += 1 };
  s1 -> s2 [89, 89] { R161 += 1 };
  s1 -> s1 [90, 65535] { R161 += 1 };
  s2 -> s2 [0, 64] { R161 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [89, 65535] { R161 += 1 };
  accepting s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R162 += 1, R163 += 1 };
  s0 -> s1 [0, 65535] { R163 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R163 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 88] { R165 += 1 };
  s0 -> s0 [0, 65535] { R164 += 1, R165 += 1 };
  s0 -> s2 [0, 65535] { R165 += 1, R125 += 1 };
  s0 -> s3 [89, 89] { R165 += 1 };
  s0 -> s1 [90, 65535] { R165 += 1 };
  s1 -> s1 [0, 88] { R165 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [89, 89] { R165 += 1 };
  s1 -> s1 [90, 65535] { R165 += 1 };
  s2 -> s1 [0, 88] { R165 += 1 };
  s2 -> s2 [0, 65535] { R165 += 1, R125 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [89, 89] { R165 += 1 };
  s2 -> s1 [90, 65535] { R165 += 1 };
  s3 -> s3 [0, 65535] { R165 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 8] { R167 += 1, R131 += 1 };
  s0 -> s0 [0, 65535] { R166 += 1, R167 += 1 };
  s0 -> s2 [0, 65535] { R167 += 1, R130 += 1, R131 += 1 };
  s0 -> s3 [9, 13] { R167 += 1, R131 += 1 };
  s0 -> s1 [14, 31] { R167 += 1, R131 += 1 };
  s0 -> s3 [32, 32] { R167 += 1, R131 += 1 };
  s0 -> s1 [33, 65535] { R167 += 1, R131 += 1 };
  s1 -> s5 [0, 65535] { R167 += 1 };
  s1 -> s1 [0, 65535] { R167 += 1, R131 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R167 += 1, R131 += 1 };
  s2 -> s2 [0, 65535] { R167 += 1, R130 += 1, R131 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R167 += 1, R131 += 1 };
  s2 -> s1 [14, 31] { R167 += 1, R131 += 1 };
  s2 -> s3 [32, 32] { R167 += 1, R131 += 1 };
  s2 -> s1 [33, 65535] { R167 += 1, R131 += 1 };
  s3 -> s1 [0, 65535] { R167 += 1, R131 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R167 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s0 [0, 65535] { R168 += 1, R169 += 1 };
  s0 -> s1 [0, 65535] { R169 += 1, R133 += 1, R3 += 1 };
  s0 -> s2 [0, 65535] { R169 += 1, R132 += 1, R133 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R169 += 1, R133 += 1, R3 += 1 };
  s1 -> s4 [0, 65535] { R169 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R169 += 1, R133 += 1, R3 += 1 };
  s2 -> s2 [0, 65535] { R169 += 1, R132 += 1, R133 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R169 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 8] { R171 += 1, R135 += 1 };
  s0 -> s0 [0, 65535] { R170 += 1, R171 += 1 };
  s0 -> s2 [0, 65535] { R171 += 1, R134 += 1, R135 += 1 };
  s0 -> s3 [9, 13] { R171 += 1, R135 += 1 };
  s0 -> s1 [14, 31] { R171 += 1, R135 += 1 };
  s0 -> s3 [32, 32] { R171 += 1, R135 += 1 };
  s0 -> s1 [33, 65535] { R171 += 1, R135 += 1 };
  s1 -> s1 [0, 65535] { R171 += 1, R135 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R171 += 1 };
  s2 -> s1 [0, 8] { R171 += 1, R135 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R171 += 1, R134 += 1, R135 += 1 };
  s2 -> s3 [9, 13] { R171 += 1, R135 += 1 };
  s2 -> s1 [14, 31] { R171 += 1, R135 += 1 };
  s2 -> s3 [32, 32] { R171 += 1, R135 += 1 };
  s2 -> s1 [33, 65535] { R171 += 1, R135 += 1 };
  s3 -> s1 [0, 65535] { R171 += 1, R135 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R171 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s0 [0, 65535] { R172 += 1, R173 += 1 };
  s0 -> s1 [0, 65535] { R173 += 1, R137 += 1, R4 += 1 };
  s0 -> s2 [0, 65535] { R173 += 1, R136 += 1, R137 += 1 };
  s1 -> s1 [0, 65535] { R173 += 1, R137 += 1, R4 += 1 };
  s1 -> s4 [0, 65535] { R173 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R173 += 1, R137 += 1, R4 += 1 };
  s2 -> s2 [0, 65535] { R173 += 1, R136 += 1, R137 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R173 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 88] { R175 += 1, R151 += 1 };
  s0 -> s2 [0, 65535] { R175 += 1, R150 += 1, R151 += 1 };
  s0 -> s0 [0, 65535] { R174 += 1, R175 += 1 };
  s0 -> s3 [89, 89] { R175 += 1, R151 += 1 };
  s0 -> s1 [90, 65535] { R175 += 1, R151 += 1 };
  s1 -> s1 [0, 88] { R175 += 1, R151 += 1 };
  s1 -> s3 [89, 89] { R175 += 1, R151 += 1 };
  s1 -> s1 [90, 65535] { R175 += 1, R151 += 1 };
  s2 -> s1 [0, 88] { R175 += 1, R151 += 1 };
  s2 -> s2 [0, 65535] { R175 += 1, R150 += 1, R151 += 1 };
  s2 -> s3 [89, 89] { R175 += 1, R151 += 1 };
  s2 -> s1 [90, 65535] { R175 += 1, R151 += 1 };
  s3 -> s3 [0, 65535] { R175 += 1, R151 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R175 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R175 += 1 };
  accepting s3, s4, s5;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 65535] { R177 += 1, R153 += 1, R0 += 1 };
  s0 -> s2 [0, 65535] { R177 += 1, R152 += 1, R153 += 1 };
  s0 -> s0 [0, 65535] { R176 += 1, R177 += 1 };
  s1 -> s1 [0, 65535] { R177 += 1, R153 += 1, R0 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R177 += 1 };
  s2 -> s1 [0, 65535] { R177 += 1, R153 += 1, R0 += 1 };
  s2 -> s2 [0, 65535] { R177 += 1, R152 += 1, R153 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R177 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 88] { R179 += 1, R155 += 1, R9 += 1 };
  s0 -> s0 [0, 65535] { R178 += 1, R179 += 1 };
  s0 -> s2 [0, 65535] { R179 += 1, R154 += 1, R155 += 1 };
  s0 -> s3 [0, 65535] { R179 += 1, R155 += 1, R8 += 1, R9 += 1 };
  s0 -> s4 [89, 89] { R179 += 1, R155 += 1 };
  s0 -> s1 [90, 65535] { R179 += 1, R155 += 1, R9 += 1 };
  s1 -> s1 [0, 88] { R179 += 1, R155 += 1, R9 += 1 };
  s1 -> s4 [89, 89] { R179 += 1, R155 += 1 };
  s1 -> s1 [90, 65535] { R179 += 1, R155 += 1, R9 += 1 };
  s2 -> s1 [0, 88] { R179 += 1, R155 += 1, R9 += 1 };
  s2 -> s2 [0, 65535] { R179 += 1, R154 += 1, R155 += 1 };
  s2 -> s3 [0, 65535] { R179 += 1, R155 += 1, R8 += 1, R9 += 1 };
  s2 -> s4 [89, 89] { R179 += 1, R155 += 1 };
  s2 -> s1 [90, 65535] { R179 += 1, R155 += 1, R9 += 1 };
  s3 -> s1 [0, 88] { R179 += 1, R155 += 1, R9 += 1 };
  s3 -> s3 [0, 65535] { R179 += 1, R155 += 1, R8 += 1, R9 += 1 };
  s3 -> s4 [89, 89] { R179 += 1, R155 += 1 };
  s3 -> s1 [90, 65535] { R179 += 1, R155 += 1, R9 += 1 };
  s4 -> s5 [0, 65535] { R179 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R179 += 1, R155 += 1 };
  s5 -> s5 [0, 65535] { R179 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s4, s5, s6;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 88] { R181 += 1, R157 += 1, R147 += 1 };
  s0 -> s2 [0, 65535] { R181 += 1, R156 += 1, R157 += 1 };
  s0 -> s3 [0, 65535] { R181 += 1, R157 += 1, R146 += 1, R147 += 1 };
  s0 -> s0 [0, 65535] { R180 += 1, R181 += 1 };
  s0 -> s4 [89, 89] { R181 += 1, R157 += 1, R147 += 1 };
  s0 -> s1 [90, 65535] { R181 += 1, R157 += 1, R147 += 1 };
  s1 -> s1 [0, 88] { R181 += 1, R157 += 1, R147 += 1 };
  s1 -> s4 [89, 89] { R181 += 1, R157 += 1, R147 += 1 };
  s1 -> s1 [90, 65535] { R181 += 1, R157 += 1, R147 += 1 };
  s2 -> s1 [0, 88] { R181 += 1, R157 += 1, R147 += 1 };
  s2 -> s2 [0, 65535] { R181 += 1, R156 += 1, R157 += 1 };
  s2 -> s3 [0, 65535] { R181 += 1, R157 += 1, R146 += 1, R147 += 1 };
  s2 -> s4 [89, 89] { R181 += 1, R157 += 1, R147 += 1 };
  s2 -> s1 [90, 65535] { R181 += 1, R157 += 1, R147 += 1 };
  s3 -> s1 [0, 88] { R181 += 1, R157 += 1, R147 += 1 };
  s3 -> s3 [0, 65535] { R181 += 1, R157 += 1, R146 += 1, R147 += 1 };
  s3 -> s4 [89, 89] { R181 += 1, R157 += 1, R147 += 1 };
  s3 -> s1 [90, 65535] { R181 += 1, R157 += 1, R147 += 1 };
  s4 -> s4 [0, 65535] { R181 += 1, R157 += 1, R147 += 1 };
  s4 -> s5 [0, 65535] { R181 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R181 += 1, R157 += 1 };
  s5 -> s5 [0, 65535] { R181 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R181 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R181 += 1, R157 += 1 };
  accepting s4, s5, s6, s7;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R183 += 1, R159 += 1, R149 += 1, R129 += 1 };
  s0 -> s0 [0, 65535] { R182 += 1, R183 += 1 };
  s0 -> s2 [0, 65535] { R183 += 1, R159 += 1, R148 += 1, R149 += 1 };
  s0 -> s3 [0, 65535] { R183 += 1, R158 += 1, R159 += 1 };
  s1 -> s1 [0, 65535] { R183 += 1, R159 += 1, R149 += 1, R129 += 1 };
  s1 -> s5 [0, 65535] { R183 += 1 };
  s1 -> s6 [0, 65535] { R183 += 1, R159 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R183 += 1, R159 += 1, R149 += 1, R129 += 1 };
  s2 -> s5 [0, 65535] { R183 += 1 };
  s2 -> s2 [0, 65535] { R183 += 1, R159 += 1, R148 += 1, R149 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R183 += 1, R159 += 1, R149 += 1, R129 += 1 };
  s3 -> s2 [0, 65535] { R183 += 1, R159 += 1, R148 += 1, R149 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R183 += 1, R158 += 1, R159 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R183 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R183 += 1 };
  s6 -> s6 [0, 65535] { R183 += 1, R159 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
synchronised {  // Automata constraining P27
automaton P27_0 {
  init s0;
  s0 -> s1 [10, 10];
  accepting s1;
};
};
synchronised {  // Automata constraining P25
automaton P25_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
synchronised {  // Automata constraining P26
automaton P26_0 {
  init s0;
  s0 -> s1 [9, 9];
  accepting s1;
};
};
constraint R0 = R147 && R1 = R159 && R2 - R183 = 1 && R8 = 0 && R9 - R146 = -1 && R130 - R159 = -1 && R131 = R159 && R132 - R159 = -1 && R133 = R159 && R134 = 0 && R135 = 1 && R136 = 0 && R137 = 1 && R138 = R183 && R139 - R183 = 1 && R140 = R183 && R141 - R183 = 1 && R142 = 0 && R143 = 1 && R144 = 0 && R145 = 1 && R150 = 0 && R151 = R159 && R152 = 0 && R153 = R159 && R154 = 0 && R155 = R159 && R156 = 0 && R157 = R159 && R158 = 0 && R160 = 0 && R161 = R183 && R162 = 0 && R163 = R183 && R164 = 0 && R165 = R183 && R166 = 0 && R167 = R183 && R168 = 0 && R169 = R183 && R170 = 0 && R171 = R183 && R172 = 0 && R173 = R183 && R174 = 0 && R175 = R183 && R176 = 0 && R177 = R183 && R178 = 0 && R179 = R183 && R180 = 0 && R181 = R183 && R182 = 0 && R125 < 1 && R128 < 1 && R146 - R147 < 1 && -1 < R146 && 0 < R159 && -1 < R183 && (R146 != R148 || R147 = R149 || ((R129 != 0 || R147 - R148 < 1 || R148 < 0) && (R129 = 0 || R147 < R148 || R148 < 0))) && (R146 = R148 || (R129 = 0 && R146 = R147));
// End of Parikh automata intersection problem
