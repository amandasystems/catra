// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R13, R14, R15, R16, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R31, R32, R33, R34, R35, R36, R37, R38, R39, R4, R40, R41, R42, R43, R44, R45, R46, R47, R48, R49, R5, R50, R51, R52, R53, R54, R55, R56, R57, R58, R59, R6, R60, R61, R62, R63, R64, R65, R66, R67, R68, R7;
synchronised {  // Automata constraining P29
automaton P29_0 {
  init s0;
  s0 -> s1 [11, 11];
  accepting s1;
};
};
synchronised {  // Automata constraining P28
automaton P28_0 {
  init s0;
  s0 -> s1 [13, 13];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R13 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s0 [0, 65535] { R23 += 1, R24 += 1 };
  s0 -> s1 [12, 12] { R24 += 1 };
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value2_4 {
  init s0;
  s0 -> s0 [0, 65535] { R25 += 1, R26 += 1 };
  s0 -> s1 [0, 65535] { R26 += 1, R5 += 1 };
  s1 -> s1 [0, 65535] { R26 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 8] { R28 += 1 };
  s0 -> s0 [0, 65535] { R27 += 1, R28 += 1 };
  s0 -> s2 [9, 13] { R28 += 1 };
  s0 -> s1 [14, 31] { R28 += 1 };
  s0 -> s2 [32, 32] { R28 += 1 };
  s0 -> s1 [33, 65535] { R28 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R28 += 1 };
  s2 -> s1 [0, 65535] { R28 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 65535] { R30 += 1, R6 += 1 };
  s0 -> s0 [0, 65535] { R29 += 1, R30 += 1 };
  s1 -> s1 [0, 65535] { R30 += 1, R6 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 64] { R46 += 1 };
  s0 -> s0 [0, 65535] { R45 += 1, R46 += 1 };
  s0 -> s2 [89, 89] { R46 += 1 };
  s0 -> s1 [90, 65535] { R46 += 1 };
  s1 -> s1 [0, 64] { R46 += 1 };
  s1 -> s2 [89, 89] { R46 += 1 };
  s1 -> s1 [90, 65535] { R46 += 1 };
  s2 -> s2 [0, 64] { R46 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [89, 65535] { R46 += 1 };
  accepting s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R48 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R47 += 1, R48 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R48 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 88] { R50 += 1 };
  s0 -> s2 [0, 65535] { R50 += 1, R10 += 1 };
  s0 -> s0 [0, 65535] { R49 += 1, R50 += 1 };
  s0 -> s3 [89, 89] { R50 += 1 };
  s0 -> s1 [90, 65535] { R50 += 1 };
  s1 -> s1 [0, 88] { R50 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [89, 89] { R50 += 1 };
  s1 -> s1 [90, 65535] { R50 += 1 };
  s2 -> s1 [0, 88] { R50 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R50 += 1, R10 += 1 };
  s2 -> s3 [89, 89] { R50 += 1 };
  s2 -> s1 [90, 65535] { R50 += 1 };
  s3 -> s3 [0, 65535] { R50 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 8] { R52 += 1, R16 += 1 };
  s0 -> s2 [0, 65535] { R52 += 1, R15 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R51 += 1, R52 += 1 };
  s0 -> s3 [9, 13] { R52 += 1, R16 += 1 };
  s0 -> s1 [14, 31] { R52 += 1, R16 += 1 };
  s0 -> s3 [32, 32] { R52 += 1, R16 += 1 };
  s0 -> s1 [33, 65535] { R52 += 1, R16 += 1 };
  s1 -> s5 [0, 65535] { R52 += 1 };
  s1 -> s1 [0, 65535] { R52 += 1, R16 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R52 += 1, R16 += 1 };
  s2 -> s2 [0, 65535] { R52 += 1, R15 += 1, R16 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R52 += 1, R16 += 1 };
  s2 -> s1 [14, 31] { R52 += 1, R16 += 1 };
  s2 -> s3 [32, 32] { R52 += 1, R16 += 1 };
  s2 -> s1 [33, 65535] { R52 += 1, R16 += 1 };
  s3 -> s1 [0, 65535] { R52 += 1, R16 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R52 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 65535] { R54 += 1, R18 += 1, R3 += 1 };
  s0 -> s2 [0, 65535] { R54 += 1, R17 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R53 += 1, R54 += 1 };
  s1 -> s1 [0, 65535] { R54 += 1, R18 += 1, R3 += 1 };
  s1 -> s4 [0, 65535] { R54 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R54 += 1, R18 += 1, R3 += 1 };
  s2 -> s2 [0, 65535] { R54 += 1, R17 += 1, R18 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R54 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 8] { R56 += 1, R20 += 1 };
  s0 -> s0 [0, 65535] { R55 += 1, R56 += 1 };
  s0 -> s2 [0, 65535] { R56 += 1, R19 += 1, R20 += 1 };
  s0 -> s3 [9, 13] { R56 += 1, R20 += 1 };
  s0 -> s1 [14, 31] { R56 += 1, R20 += 1 };
  s0 -> s3 [32, 32] { R56 += 1, R20 += 1 };
  s0 -> s1 [33, 65535] { R56 += 1, R20 += 1 };
  s1 -> s1 [0, 65535] { R56 += 1, R20 += 1 };
  s1 -> s5 [0, 65535] { R56 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R56 += 1, R20 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R56 += 1, R19 += 1, R20 += 1 };
  s2 -> s3 [9, 13] { R56 += 1, R20 += 1 };
  s2 -> s1 [14, 31] { R56 += 1, R20 += 1 };
  s2 -> s3 [32, 32] { R56 += 1, R20 += 1 };
  s2 -> s1 [33, 65535] { R56 += 1, R20 += 1 };
  s3 -> s1 [0, 65535] { R56 += 1, R20 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R56 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 65535] { R58 += 1, R22 += 1, R4 += 1 };
  s0 -> s2 [0, 65535] { R58 += 1, R21 += 1, R22 += 1 };
  s0 -> s0 [0, 65535] { R57 += 1, R58 += 1 };
  s1 -> s1 [0, 65535] { R58 += 1, R22 += 1, R4 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R58 += 1 };
  s2 -> s1 [0, 65535] { R58 += 1, R22 += 1, R4 += 1 };
  s2 -> s2 [0, 65535] { R58 += 1, R21 += 1, R22 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R58 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 88] { R60 += 1, R36 += 1 };
  s0 -> s0 [0, 65535] { R59 += 1, R60 += 1 };
  s0 -> s2 [0, 65535] { R60 += 1, R35 += 1, R36 += 1 };
  s0 -> s3 [89, 89] { R60 += 1, R36 += 1 };
  s0 -> s1 [90, 65535] { R60 += 1, R36 += 1 };
  s1 -> s1 [0, 88] { R60 += 1, R36 += 1 };
  s1 -> s3 [89, 89] { R60 += 1, R36 += 1 };
  s1 -> s1 [90, 65535] { R60 += 1, R36 += 1 };
  s2 -> s1 [0, 88] { R60 += 1, R36 += 1 };
  s2 -> s2 [0, 65535] { R60 += 1, R35 += 1, R36 += 1 };
  s2 -> s3 [89, 89] { R60 += 1, R36 += 1 };
  s2 -> s1 [90, 65535] { R60 += 1, R36 += 1 };
  s3 -> s4 [0, 65535] { R60 += 1 };
  s3 -> s3 [0, 65535] { R60 += 1, R36 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R60 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 65535] { R62 += 1, R37 += 1, R38 += 1 };
  s0 -> s2 [0, 65535] { R62 += 1, R38 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R61 += 1, R62 += 1 };
  s1 -> s1 [0, 65535] { R62 += 1, R37 += 1, R38 += 1 };
  s1 -> s2 [0, 65535] { R62 += 1, R38 += 1, R0 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R62 += 1, R38 += 1, R0 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R62 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R62 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 88] { R64 += 1, R40 += 1 };
  s0 -> s2 [0, 65535] { R64 += 1, R40 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R63 += 1, R64 += 1 };
  s0 -> s3 [0, 65535] { R64 += 1, R39 += 1, R40 += 1 };
  s0 -> s4 [89, 89] { R64 += 1, R40 += 1 };
  s0 -> s1 [90, 65535] { R64 += 1, R40 += 1 };
  s1 -> s1 [0, 88] { R64 += 1, R40 += 1 };
  s1 -> s1 [0, 65535] { R64 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s4 [89, 89] { R64 += 1, R40 += 1 };
  s1 -> s1 [90, 65535] { R64 += 1, R40 += 1 };
  s2 -> s1 [0, 88] { R64 += 1, R40 += 1 };
  s2 -> s2 [0, 65535] { R64 += 1, R40 += 1, R7 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R64 += 1 };
  s2 -> s4 [89, 89] { R64 += 1, R40 += 1 };
  s2 -> s1 [90, 65535] { R64 += 1, R40 += 1 };
  s3 -> s1 [0, 88] { R64 += 1, R40 += 1 };
  s3 -> s2 [0, 65535] { R64 += 1, R40 += 1, R7 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R64 += 1, R39 += 1, R40 += 1 };
  s3 -> s4 [89, 89] { R64 += 1, R40 += 1 };
  s3 -> s1 [90, 65535] { R64 += 1, R40 += 1 };
  s4 -> s4 [0, 65535] { R64 += 1, R40 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R64 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 88] { R66 += 1, R42 += 1, R32 += 1 };
  s0 -> s2 [0, 65535] { R66 += 1, R42 += 1, R31 += 1, R32 += 1 };
  s0 -> s0 [0, 65535] { R65 += 1, R66 += 1 };
  s0 -> s3 [0, 65535] { R66 += 1, R41 += 1, R42 += 1 };
  s0 -> s4 [89, 89] { R66 += 1, R42 += 1, R32 += 1 };
  s0 -> s1 [90, 65535] { R66 += 1, R42 += 1, R32 += 1 };
  s1 -> s1 [0, 88] { R66 += 1, R42 += 1, R32 += 1 };
  s1 -> s4 [89, 89] { R66 += 1, R42 += 1, R32 += 1 };
  s1 -> s1 [90, 65535] { R66 += 1, R42 += 1, R32 += 1 };
  s2 -> s1 [0, 88] { R66 += 1, R42 += 1, R32 += 1 };
  s2 -> s2 [0, 65535] { R66 += 1, R42 += 1, R31 += 1, R32 += 1 };
  s2 -> s4 [89, 89] { R66 += 1, R42 += 1, R32 += 1 };
  s2 -> s1 [90, 65535] { R66 += 1, R42 += 1, R32 += 1 };
  s3 -> s1 [0, 88] { R66 += 1, R42 += 1, R32 += 1 };
  s3 -> s2 [0, 65535] { R66 += 1, R42 += 1, R31 += 1, R32 += 1 };
  s3 -> s3 [0, 65535] { R66 += 1, R41 += 1, R42 += 1 };
  s3 -> s4 [89, 89] { R66 += 1, R42 += 1, R32 += 1 };
  s3 -> s1 [90, 65535] { R66 += 1, R42 += 1, R32 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R66 += 1 };
  s4 -> s7 [0, 65535] { R66 += 1, R42 += 1 };
  s4 -> s4 [0, 65535] { R66 += 1, R42 += 1, R32 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R66 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R66 += 1 };
  s7 -> s7 [0, 65535] { R66 += 1, R42 += 1 };
  accepting s4, s5, s6, s7;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R68 += 1, R44 += 1, R34 += 1, R14 += 1 };
  s0 -> s0 [0, 65535] { R67 += 1, R68 += 1 };
  s0 -> s2 [0, 65535] { R68 += 1, R43 += 1, R44 += 1 };
  s0 -> s3 [0, 65535] { R68 += 1, R44 += 1, R33 += 1, R34 += 1 };
  s1 -> s6 [0, 65535] { R68 += 1, R44 += 1 };
  s1 -> s4 [0, 65535] { R68 += 1 };
  s1 -> s1 [0, 65535] { R68 += 1, R44 += 1, R34 += 1, R14 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R68 += 1, R44 += 1, R34 += 1, R14 += 1 };
  s2 -> s2 [0, 65535] { R68 += 1, R43 += 1, R44 += 1 };
  s2 -> s3 [0, 65535] { R68 += 1, R44 += 1, R33 += 1, R34 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s4 [0, 65535] { R68 += 1 };
  s3 -> s1 [0, 65535] { R68 += 1, R44 += 1, R34 += 1, R14 += 1 };
  s3 -> s3 [0, 65535] { R68 += 1, R44 += 1, R33 += 1, R34 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R68 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R68 += 1, R44 += 1 };
  s6 -> s4 [0, 65535] { R68 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
synchronised {  // Automata constraining P27
automaton P27_0 {
  init s0;
  s0 -> s1 [10, 10];
  accepting s1;
};
};
synchronised {  // Automata constraining P25
automaton P25_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
synchronised {  // Automata constraining P26
automaton P26_0 {
  init s0;
  s0 -> s1 [9, 9];
  accepting s1;
};
};
constraint R0 = R32 && R1 = R44 && R2 - R68 = 1 && R15 - R44 = -1 && R16 = R44 && R17 - R44 = -1 && R18 = R44 && R19 = 0 && R20 = 1 && R21 = 0 && R22 = 1 && R23 = R68 && R24 - R68 = 1 && R25 = R68 && R26 - R68 = 1 && R27 = 0 && R28 = 1 && R29 = 0 && R30 = 1 && R31 = 0 && R35 = 0 && R36 = R44 && R37 = 0 && R38 = R44 && R39 = 0 && R40 = R44 && R41 = 0 && R42 = R44 && R43 = 0 && R45 = 0 && R46 = R68 && R47 = 0 && R48 = R68 && R49 = 0 && R50 = R68 && R51 = 0 && R52 = R68 && R53 = 0 && R54 = R68 && R55 = 0 && R56 = R68 && R57 = 0 && R58 = R68 && R59 = 0 && R60 = R68 && R61 = 0 && R62 = R68 && R63 = 0 && R64 = R68 && R65 = 0 && R66 = R68 && R67 = 0 && R7 < 1 && R10 < 1 && R13 < 1 && -1 < R32 && 0 < R44 && -1 < R68 && (R33 != 0 || R32 = R34 || (R14 = 0 && R32 = 0)) && (R33 = 0 || (R14 = 0 && R32 = 0));
// End of Parikh automata intersection problem
