// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R2, R247, R248, R3, R365, R366, R369, R370, R371, R372, R373, R374, R375, R376, R377, R378, R379, R380, R381, R382, R383, R384, R385, R386, R387, R388, R389, R390, R391, R392, R393, R394, R395, R396, R397, R398, R399, R4, R400, R401, R402, R403, R404, R405, R406, R407, R408, R409, R410, R411, R412, R413, R414, R415, R416, R417, R418, R419, R420, R421, R422, R423, R424, R5, R6, R7, R9;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [86, 86];
  s0 -> s0 [87, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [86, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R365 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 85];
  s0 -> s0 [0, 65535] { R366 += 1 };
  s0 -> s2 [86, 86];
  s0 -> s1 [87, 65535];
  s1 -> s1 [0, 85];
  s1 -> s2 [86, 86];
  s1 -> s1 [87, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R380 += 1 };
  s0 -> s0 [0, 65535] { R379 += 1, R380 += 1 };
  s0 -> s2 [9, 13] { R380 += 1 };
  s0 -> s1 [14, 31] { R380 += 1 };
  s0 -> s2 [32, 32] { R380 += 1 };
  s0 -> s1 [33, 65535] { R380 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R380 += 1 };
  s2 -> s1 [0, 65535] { R380 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s0 [0, 65535] { R381 += 1, R382 += 1 };
  s0 -> s1 [0, 65535] { R382 += 1, R6 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R382 += 1, R6 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R384 += 1 };
  s0 -> s0 [0, 65535] { R383 += 1, R384 += 1 };
  s0 -> s2 [9, 13] { R384 += 1 };
  s0 -> s1 [14, 31] { R384 += 1 };
  s0 -> s2 [32, 32] { R384 += 1 };
  s0 -> s1 [33, 65535] { R384 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R384 += 1 };
  s2 -> s1 [0, 65535] { R384 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R386 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R385 += 1, R386 += 1 };
  s1 -> s1 [0, 65535] { R386 += 1, R7 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 85] { R398 += 1 };
  s0 -> s0 [0, 65535] { R397 += 1, R398 += 1 };
  s0 -> s1 [87, 65535] { R398 += 1 };
  s1 -> s1 [0, 85] { R398 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [87, 65535] { R398 += 1 };
  accepting s0, s1;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 65535] { R400 += 1, R369 += 1 };
  s0 -> s0 [0, 65535] { R399 += 1, R400 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R400 += 1, R369 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 86] { R402 += 1 };
  s0 -> s0 [0, 65535] { R401 += 1, R402 += 1 };
  s0 -> s1 [91, 65535] { R402 += 1 };
  s1 -> s1 [0, 86] { R402 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [91, 65535] { R402 += 1 };
  accepting s0, s1;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 65535] { R422 += 1, R370 += 1 };
  s0 -> s0 [0, 65535] { R421 += 1, R422 += 1 };
  s1 -> s1 [0, 65535] { R422 += 1, R370 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 85] { R424 += 1 };
  s0 -> s0 [0, 65535] { R423 += 1, R424 += 1 };
  s0 -> s2 [86, 86] { R424 += 1 };
  s0 -> s3 [86, 86] { R424 += 1 };
  s0 -> s1 [91, 65535] { R424 += 1 };
  s1 -> s1 [0, 85] { R424 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [86, 86] { R424 += 1 };
  s1 -> s3 [86, 86] { R424 += 1 };
  s1 -> s1 [91, 65535] { R424 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 86] { R424 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [91, 65535] { R424 += 1 };
  accepting s0, s1, s2, s3;
};
};
synchronised {  // Automata constraining value1
automaton value1_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s1 [44, 44];
  s0 -> s0 [45, 65535];
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value1_2 {
  init s0;
  s0 -> s1 [0, 43] { R248 += 1 };
  s0 -> s0 [0, 65535] { R247 += 1, R248 += 1 };
  s0 -> s2 [44, 44];
  s0 -> s1 [45, 65535] { R248 += 1 };
  s1 -> s1 [0, 43] { R248 += 1 };
  s1 -> s2 [44, 44];
  s1 -> s1 [45, 65535] { R248 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value1_3 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
automaton value1_4 {
  init s0;
  s0 -> s1 [0, 60] { R404 += 1 };
  s0 -> s0 [0, 65535] { R403 += 1, R404 += 1 };
  s0 -> s2 [61, 61] { R404 += 1 };
  s0 -> s1 [62, 65535] { R404 += 1 };
  s1 -> s1 [0, 60] { R404 += 1 };
  s1 -> s2 [61, 61] { R404 += 1 };
  s1 -> s1 [62, 65535] { R404 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R404 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value1_5 {
  init s0;
  s0 -> s1 [0, 65535] { R406 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R405 += 1, R406 += 1 };
  s1 -> s1 [0, 65535] { R406 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_6 {
  init s0;
  s0 -> s1 [0, 60] { R408 += 1, R10 += 1 };
  s0 -> s2 [0, 65535] { R408 += 1, R9 += 1, R10 += 1 };
  s0 -> s0 [0, 65535] { R407 += 1, R408 += 1 };
  s0 -> s3 [61, 61] { R408 += 1 };
  s0 -> s1 [62, 65535] { R408 += 1, R10 += 1 };
  s1 -> s1 [0, 60] { R408 += 1, R10 += 1 };
  s1 -> s3 [61, 61] { R408 += 1 };
  s1 -> s1 [62, 65535] { R408 += 1, R10 += 1 };
  s2 -> s1 [0, 60] { R408 += 1, R10 += 1 };
  s2 -> s2 [0, 65535] { R408 += 1, R9 += 1, R10 += 1 };
  s2 -> s3 [61, 61] { R408 += 1 };
  s2 -> s1 [62, 65535] { R408 += 1, R10 += 1 };
  s3 -> s3 [0, 65535] { R408 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton value1_7 {
  init s0;
  s0 -> s0 [0, 65535] { R409 += 1, R410 += 1 };
  s0 -> s1 [0, 65535] { R410 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R410 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_8 {
  init s0;
  s0 -> s1 [0, 65535] { R412 += 1, R388 += 1, R0 += 1 };
  s0 -> s2 [0, 65535] { R412 += 1, R387 += 1, R388 += 1 };
  s0 -> s0 [0, 65535] { R411 += 1, R412 += 1 };
  s1 -> s1 [0, 65535] { R412 += 1, R388 += 1, R0 += 1 };
  s1 -> s4 [0, 65535] { R412 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R412 += 1, R388 += 1, R0 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R412 += 1, R387 += 1, R388 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R412 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_9 {
  init s0;
  s0 -> s1 [0, 65535] { R414 += 1, R390 += 1, R371 += 1, R372 += 1 };
  s0 -> s0 [0, 65535] { R413 += 1, R414 += 1 };
  s0 -> s2 [0, 65535] { R414 += 1, R389 += 1, R390 += 1 };
  s0 -> s3 [32, 32] { R414 += 1, R390 += 1, R372 += 1 };
  s1 -> s1 [0, 65535] { R414 += 1, R390 += 1, R371 += 1, R372 += 1 };
  s1 -> s3 [32, 32] { R414 += 1, R390 += 1, R372 += 1 };
  s2 -> s1 [0, 65535] { R414 += 1, R390 += 1, R371 += 1, R372 += 1 };
  s2 -> s2 [0, 65535] { R414 += 1, R389 += 1, R390 += 1 };
  s2 -> s3 [32, 32] { R414 += 1, R390 += 1, R372 += 1 };
  s3 -> s4 [0, 65535] { R414 += 1 };
  s3 -> s3 [0, 65535] { R414 += 1, R390 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R414 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
automaton value1_10 {
  init s0;
  s0 -> s1 [0, 65535] { R416 += 1, R391 += 1, R392 += 1 };
  s0 -> s2 [0, 65535] { R416 += 1, R392 += 1, R373 += 1, R374 += 1 };
  s0 -> s3 [0, 65535] { R416 += 1, R392 += 1, R374 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R415 += 1, R416 += 1 };
  s1 -> s1 [0, 65535] { R416 += 1, R391 += 1, R392 += 1 };
  s1 -> s2 [0, 65535] { R416 += 1, R392 += 1, R373 += 1, R374 += 1 };
  s1 -> s3 [0, 65535] { R416 += 1, R392 += 1, R374 += 1, R4 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R416 += 1, R392 += 1, R373 += 1, R374 += 1 };
  s2 -> s3 [0, 65535] { R416 += 1, R392 += 1, R374 += 1, R4 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s6 [0, 65535] { R416 += 1 };
  s3 -> s3 [0, 65535] { R416 += 1, R392 += 1, R374 += 1, R4 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R416 += 1, R392 += 1 };
  s3 -> s6 [0, 65535] { R416 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R416 += 1, R392 += 1 };
  s5 -> s6 [0, 65535] { R416 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R416 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value1_11 {
  init s0;
  s0 -> s1 [0, 8] { R418 += 1, R394 += 1, R376 += 1 };
  s0 -> s2 [0, 65535] { R418 += 1, R393 += 1, R394 += 1 };
  s0 -> s0 [0, 65535] { R417 += 1, R418 += 1 };
  s0 -> s3 [0, 65535] { R418 += 1, R394 += 1, R375 += 1, R376 += 1 };
  s0 -> s4 [9, 13] { R418 += 1, R394 += 1, R376 += 1 };
  s0 -> s1 [14, 31] { R418 += 1, R394 += 1, R376 += 1 };
  s0 -> s4 [32, 32] { R418 += 1, R394 += 1, R376 += 1 };
  s0 -> s1 [33, 65535] { R418 += 1, R394 += 1, R376 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s7 [0, 65535] { R418 += 1, R394 += 1 };
  s1 -> s1 [0, 65535] { R418 += 1, R394 += 1, R376 += 1 };
  s1 -> s6 [0, 65535] { R418 += 1 };
  s2 -> s1 [0, 8] { R418 += 1, R394 += 1, R376 += 1 };
  s2 -> s2 [0, 65535] { R418 += 1, R393 += 1, R394 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R418 += 1, R394 += 1, R375 += 1, R376 += 1 };
  s2 -> s4 [9, 13] { R418 += 1, R394 += 1, R376 += 1 };
  s2 -> s1 [14, 31] { R418 += 1, R394 += 1, R376 += 1 };
  s2 -> s4 [32, 32] { R418 += 1, R394 += 1, R376 += 1 };
  s2 -> s1 [33, 65535] { R418 += 1, R394 += 1, R376 += 1 };
  s3 -> s1 [0, 8] { R418 += 1, R394 += 1, R376 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R418 += 1 };
  s3 -> s3 [0, 65535] { R418 += 1, R394 += 1, R375 += 1, R376 += 1 };
  s3 -> s4 [9, 13] { R418 += 1, R394 += 1, R376 += 1 };
  s3 -> s1 [14, 31] { R418 += 1, R394 += 1, R376 += 1 };
  s3 -> s4 [32, 32] { R418 += 1, R394 += 1, R376 += 1 };
  s3 -> s1 [33, 65535] { R418 += 1, R394 += 1, R376 += 1 };
  s4 -> s1 [0, 65535] { R418 += 1, R394 += 1, R376 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R418 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R418 += 1, R394 += 1 };
  s7 -> s6 [0, 65535] { R418 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton value1_12 {
  init s0;
  s0 -> s0 [0, 65535] { R419 += 1, R420 += 1 };
  s0 -> s1 [0, 65535] { R420 += 1, R396 += 1, R377 += 1, R378 += 1 };
  s0 -> s2 [0, 65535] { R420 += 1, R396 += 1, R378 += 1, R5 += 1 };
  s0 -> s3 [0, 65535] { R420 += 1, R395 += 1, R396 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R420 += 1, R396 += 1, R377 += 1, R378 += 1 };
  s1 -> s2 [0, 65535] { R420 += 1, R396 += 1, R378 += 1, R5 += 1 };
  s1 -> s6 [0, 65535] { R420 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R420 += 1, R396 += 1, R378 += 1, R5 += 1 };
  s2 -> s5 [0, 65535] { R420 += 1, R396 += 1 };
  s2 -> s6 [0, 65535] { R420 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R420 += 1, R396 += 1, R377 += 1, R378 += 1 };
  s3 -> s2 [0, 65535] { R420 += 1, R396 += 1, R378 += 1, R5 += 1 };
  s3 -> s3 [0, 65535] { R420 += 1, R395 += 1, R396 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R420 += 1, R396 += 1 };
  s5 -> s6 [0, 65535] { R420 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R420 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
synchronised {  // Automata constraining P55
automaton P55_0 {
  init s0;
  s0 -> s1 [118, 118];
  accepting s1;
};
};
constraint R0 = R372 && R1 - R396 = 1 && R2 - R420 = 1 && R3 = R402 && R9 = 0 && R10 = R396 && R247 = 0 && R248 = R420 && R371 - R372 = -1 && R379 - R402 = -1 && R380 = R402 && R381 - R402 = -1 && R382 = R402 && R383 = 0 && R384 = 1 && R385 = 0 && R386 = 1 && R387 = 0 && R388 = R396 && R389 = 0 && R390 = R396 && R391 = 0 && R392 = R396 && R393 = 0 && R394 = R396 && R395 = 0 && R397 = 0 && R398 = R402 && R399 = 0 && R400 = R402 && R401 = 0 && R403 = 0 && R404 = R420 && R405 = 0 && R406 = R420 && R407 = 0 && R408 = R420 && R409 = 0 && R410 = R420 && R411 = 0 && R412 = R420 && R413 = 0 && R414 = R420 && R415 = 0 && R416 = R420 && R417 = 0 && R418 = R420 && R419 = 0 && R372 != 0 && R365 < 1 && R366 < 1 && -1 < R396 && 0 < R402 && -1 < R420 && (R372 != R374 || R373 - R374 = -1 || (R4 = 0 && R374 < 0)) && (R375 != 0 || ((R5 != 0 || ((R372 != R376 || R376 = 1 || R376 < 0) && (R372 = R376 || R376 = 1 || R372 < 1))) && (R5 = 0 || ((R372 != R376 || R376 = 1 || R376 < 0) && (R376 != 1 || -1 < R372) && (R372 = R376 || R376 = 1))))) && (R377 != 0 || ((R5 != 0 || ((R372 != R378 || R378 = 1 || R378 < 0) && (R372 = R378 || R378 = 1 || R372 < 1))) && (R5 = 0 || ((R372 != R378 || R378 = 1 || R378 < 0) && (R378 != 1 || -1 < R372) && (R372 = R378 || R378 = 1))))) && (R370 = 0 || (R421 = 0 && R422 = 0 && R423 = 0 && R424 = 0)) && (R372 = R374 || (R4 = 0 && R372 < 0)) && (R375 = 0 || (R5 = 0 && R372 < 0)) && (R377 = 0 || (R5 = 0 && R372 < 0));
// End of Parikh automata intersection problem
