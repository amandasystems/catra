// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R13, R14, R2, R269, R270, R3, R396, R397, R398, R399, R4, R400, R401, R402, R403, R404, R405, R406, R407, R408, R409, R410, R411, R412, R413, R414, R415, R416, R417, R418, R419, R420, R421, R422, R423, R424, R473, R474, R475, R476, R477, R478, R479, R480, R481, R482, R483, R484, R485, R486, R487, R488, R489, R490, R491, R492, R493, R494, R495, R496, R497, R498, R499, R5, R500, R501, R502, R503, R504, R505, R506, R507, R508, R509, R510, R511, R512, R513, R514, R515, R516, R517, R518, R519, R520, R6, R7, R8, R9;
synchronised {  // Automata constraining P67
automaton P67_0 {
  init s0;
  s0 -> s1 [121, 121];
  accepting s1;
};
};
synchronised {  // Automata constraining value1
automaton value1_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s1 [44, 44];
  s0 -> s0 [45, 65535];
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value1_2 {
  init s0;
  s0 -> s1 [0, 43] { R270 += 1 };
  s0 -> s0 [0, 65535] { R269 += 1, R270 += 1 };
  s0 -> s2 [44, 44];
  s0 -> s1 [45, 65535] { R270 += 1 };
  s1 -> s1 [0, 43] { R270 += 1 };
  s1 -> s2 [44, 44];
  s1 -> s1 [45, 65535] { R270 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value1_3 {
  init s0;
  s0 -> s1 [0, 43] { R420 += 1 };
  s0 -> s0 [0, 65535] { R419 += 1, R420 += 1 };
  s0 -> s1 [45, 65535] { R420 += 1 };
  s1 -> s1 [0, 43] { R420 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [45, 65535] { R420 += 1 };
  accepting s0, s1;
};
automaton value1_4 {
  init s0;
  s0 -> s1 [0, 65535] { R422 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R421 += 1, R422 += 1 };
  s1 -> s1 [0, 65535] { R422 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_5 {
  init s0;
  s0 -> s1 [0, 60] { R424 += 1 };
  s0 -> s2 [0, 65535] { R424 += 1, R10 += 1 };
  s0 -> s0 [0, 65535] { R423 += 1, R424 += 1 };
  s0 -> s3 [61, 61] { R424 += 1 };
  s0 -> s1 [62, 65535] { R424 += 1 };
  s1 -> s1 [0, 60] { R424 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [61, 61] { R424 += 1 };
  s1 -> s1 [62, 65535] { R424 += 1 };
  s2 -> s1 [0, 60] { R424 += 1 };
  s2 -> s2 [0, 65535] { R424 += 1, R10 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [61, 61] { R424 += 1 };
  s2 -> s1 [62, 65535] { R424 += 1 };
  s3 -> s3 [0, 65535] { R424 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value1_6 {
  init s0;
  s0 -> s1 [0, 64] { R496 += 1 };
  s0 -> s0 [0, 65535] { R495 += 1, R496 += 1 };
  s0 -> s2 [89, 89] { R496 += 1 };
  s0 -> s1 [90, 65535] { R496 += 1 };
  s1 -> s1 [0, 64] { R496 += 1 };
  s1 -> s2 [89, 89] { R496 += 1 };
  s1 -> s1 [90, 65535] { R496 += 1 };
  s2 -> s2 [0, 64] { R496 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [89, 65535] { R496 += 1 };
  accepting s2;
};
automaton value1_7 {
  init s0;
  s0 -> s0 [0, 65535] { R497 += 1, R498 += 1 };
  s0 -> s1 [0, 65535] { R498 += 1, R2 += 1 };
  s1 -> s1 [0, 65535] { R498 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_8 {
  init s0;
  s0 -> s1 [0, 60] { R500 += 1 };
  s0 -> s2 [0, 65535] { R500 += 1, R11 += 1 };
  s0 -> s0 [0, 65535] { R499 += 1, R500 += 1 };
  s0 -> s3 [61, 61] { R500 += 1 };
  s0 -> s1 [62, 65535] { R500 += 1 };
  s1 -> s1 [0, 60] { R500 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [61, 61] { R500 += 1 };
  s1 -> s1 [62, 65535] { R500 += 1 };
  s2 -> s1 [0, 60] { R500 += 1 };
  s2 -> s2 [0, 65535] { R500 += 1, R11 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [61, 61] { R500 += 1 };
  s2 -> s1 [62, 65535] { R500 += 1 };
  s3 -> s3 [0, 65535] { R500 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value1_9 {
  init s0;
  s0 -> s1 [0, 88] { R502 += 1, R14 += 1 };
  s0 -> s0 [0, 65535] { R501 += 1, R502 += 1 };
  s0 -> s2 [0, 65535] { R502 += 1, R13 += 1, R14 += 1 };
  s0 -> s3 [89, 89] { R502 += 1 };
  s0 -> s1 [90, 65535] { R502 += 1, R14 += 1 };
  s1 -> s1 [0, 88] { R502 += 1, R14 += 1 };
  s1 -> s3 [89, 89] { R502 += 1 };
  s1 -> s1 [90, 65535] { R502 += 1, R14 += 1 };
  s2 -> s1 [0, 88] { R502 += 1, R14 += 1 };
  s2 -> s2 [0, 65535] { R502 += 1, R13 += 1, R14 += 1 };
  s2 -> s3 [89, 89] { R502 += 1 };
  s2 -> s1 [90, 65535] { R502 += 1, R14 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R502 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton value1_10 {
  init s0;
  s0 -> s1 [0, 8] { R504 += 1, R408 += 1 };
  s0 -> s0 [0, 65535] { R503 += 1, R504 += 1 };
  s0 -> s2 [0, 65535] { R504 += 1, R407 += 1, R408 += 1 };
  s0 -> s3 [9, 13] { R504 += 1, R408 += 1 };
  s0 -> s1 [14, 31] { R504 += 1, R408 += 1 };
  s0 -> s3 [32, 32] { R504 += 1, R408 += 1 };
  s0 -> s1 [33, 65535] { R504 += 1, R408 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R504 += 1 };
  s1 -> s1 [0, 65535] { R504 += 1, R408 += 1 };
  s2 -> s1 [0, 8] { R504 += 1, R408 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R504 += 1, R407 += 1, R408 += 1 };
  s2 -> s3 [9, 13] { R504 += 1, R408 += 1 };
  s2 -> s1 [14, 31] { R504 += 1, R408 += 1 };
  s2 -> s3 [32, 32] { R504 += 1, R408 += 1 };
  s2 -> s1 [33, 65535] { R504 += 1, R408 += 1 };
  s3 -> s1 [0, 65535] { R504 += 1, R408 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R504 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value1_11 {
  init s0;
  s0 -> s1 [0, 65535] { R506 += 1, R409 += 1, R410 += 1 };
  s0 -> s0 [0, 65535] { R505 += 1, R506 += 1 };
  s0 -> s2 [0, 65535] { R506 += 1, R410 += 1, R7 += 1 };
  s1 -> s1 [0, 65535] { R506 += 1, R409 += 1, R410 += 1 };
  s1 -> s2 [0, 65535] { R506 += 1, R410 += 1, R7 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R506 += 1, R410 += 1, R7 += 1 };
  s2 -> s3 [0, 65535] { R506 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R506 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_12 {
  init s0;
  s0 -> s1 [0, 8] { R508 += 1, R412 += 1 };
  s0 -> s2 [0, 65535] { R508 += 1, R411 += 1, R412 += 1 };
  s0 -> s0 [0, 65535] { R507 += 1, R508 += 1 };
  s0 -> s3 [9, 13] { R508 += 1, R412 += 1 };
  s0 -> s1 [14, 31] { R508 += 1, R412 += 1 };
  s0 -> s3 [32, 32] { R508 += 1, R412 += 1 };
  s0 -> s1 [33, 65535] { R508 += 1, R412 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R508 += 1 };
  s1 -> s1 [0, 65535] { R508 += 1, R412 += 1 };
  s2 -> s1 [0, 8] { R508 += 1, R412 += 1 };
  s2 -> s2 [0, 65535] { R508 += 1, R411 += 1, R412 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R508 += 1, R412 += 1 };
  s2 -> s1 [14, 31] { R508 += 1, R412 += 1 };
  s2 -> s3 [32, 32] { R508 += 1, R412 += 1 };
  s2 -> s1 [33, 65535] { R508 += 1, R412 += 1 };
  s3 -> s1 [0, 65535] { R508 += 1, R412 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R508 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value1_13 {
  init s0;
  s0 -> s1 [0, 65535] { R510 += 1, R414 += 1, R8 += 1 };
  s0 -> s2 [0, 65535] { R510 += 1, R413 += 1, R414 += 1 };
  s0 -> s0 [0, 65535] { R509 += 1, R510 += 1 };
  s1 -> s1 [0, 65535] { R510 += 1, R414 += 1, R8 += 1 };
  s1 -> s4 [0, 65535] { R510 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R510 += 1, R414 += 1, R8 += 1 };
  s2 -> s2 [0, 65535] { R510 += 1, R413 += 1, R414 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R510 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_14 {
  init s0;
  s0 -> s1 [0, 88] { R512 += 1, R474 += 1 };
  s0 -> s2 [0, 65535] { R512 += 1, R473 += 1, R474 += 1 };
  s0 -> s0 [0, 65535] { R511 += 1, R512 += 1 };
  s0 -> s1 [90, 65535] { R512 += 1, R474 += 1 };
  s1 -> s1 [0, 88] { R512 += 1, R474 += 1 };
  s1 -> s1 [0, 65535] { R512 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [90, 65535] { R512 += 1, R474 += 1 };
  s2 -> s1 [0, 88] { R512 += 1, R474 += 1 };
  s2 -> s2 [0, 65535] { R512 += 1, R473 += 1, R474 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [90, 65535] { R512 += 1, R474 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value1_15 {
  init s0;
  s0 -> s1 [0, 65535] { R514 += 1, R476 += 1, R397 += 1 };
  s0 -> s2 [0, 65535] { R514 += 1, R475 += 1, R476 += 1 };
  s0 -> s0 [0, 65535] { R513 += 1, R514 += 1 };
  s1 -> s1 [0, 65535] { R514 += 1, R476 += 1, R397 += 1 };
  s1 -> s4 [0, 65535] { R514 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R514 += 1, R476 += 1, R397 += 1 };
  s2 -> s2 [0, 65535] { R514 += 1, R475 += 1, R476 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R514 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_16 {
  init s0;
  s0 -> s0 [0, 65535] { R515 += 1, R516 += 1 };
  s0 -> s1 [0, 65535] { R516 += 1, R478 += 1 };
  s0 -> s2 [0, 65535] { R516 += 1, R477 += 1, R478 += 1 };
  s1 -> s4 [0, 65535] { R516 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R516 += 1, R478 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R516 += 1, R478 += 1 };
  s2 -> s2 [0, 65535] { R516 += 1, R477 += 1, R478 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R516 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_17 {
  init s0;
  s0 -> s1 [0, 65535] { R518 += 1, R492 += 1, R398 += 1 };
  s0 -> s2 [0, 65535] { R518 += 1, R491 += 1, R492 += 1 };
  s0 -> s0 [0, 65535] { R517 += 1, R518 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R518 += 1 };
  s1 -> s1 [0, 65535] { R518 += 1, R492 += 1, R398 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R518 += 1, R492 += 1, R398 += 1 };
  s2 -> s2 [0, 65535] { R518 += 1, R491 += 1, R492 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R518 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_18 {
  init s0;
  s0 -> s1 [0, 88] { R520 += 1, R494 += 1 };
  s0 -> s2 [0, 65535] { R520 += 1, R493 += 1, R494 += 1 };
  s0 -> s0 [0, 65535] { R519 += 1, R520 += 1 };
  s0 -> s3 [89, 89] { R520 += 1, R494 += 1 };
  s0 -> s4 [89, 89] { R520 += 1, R494 += 1 };
  s0 -> s5 [90, 90] { R520 += 1, R494 += 1 };
  s0 -> s1 [91, 65535] { R520 += 1, R494 += 1 };
  s1 -> s1 [0, 88] { R520 += 1, R494 += 1 };
  s1 -> s3 [89, 89] { R520 += 1, R494 += 1 };
  s1 -> s4 [89, 89] { R520 += 1, R494 += 1 };
  s1 -> s5 [90, 90] { R520 += 1, R494 += 1 };
  s1 -> s1 [91, 65535] { R520 += 1, R494 += 1 };
  s2 -> s1 [0, 88] { R520 += 1, R494 += 1 };
  s2 -> s2 [0, 65535] { R520 += 1, R493 += 1, R494 += 1 };
  s2 -> s3 [89, 89] { R520 += 1, R494 += 1 };
  s2 -> s4 [89, 89] { R520 += 1, R494 += 1 };
  s2 -> s5 [90, 90] { R520 += 1, R494 += 1 };
  s2 -> s1 [91, 65535] { R520 += 1, R494 += 1 };
  s3 -> s3 [0, 89] { R520 += 1, R494 += 1 };
  s3 -> s8 [90, 90] { R520 += 1, R494 += 1 };
  s3 -> s3 [91, 65535] { R520 += 1, R494 += 1 };
  s5 -> s5 [0, 88] { R520 += 1, R494 += 1 };
  s5 -> s5 [0, 65535] { R520 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [89, 89] { R520 += 1, R494 += 1 };
  s5 -> s8 [89, 89] { R520 += 1, R494 += 1 };
  s5 -> s5 [90, 65535] { R520 += 1, R494 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R520 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s6 [0, 65535];
  s8 -> s9 [0, 65535] { R520 += 1 };
  s8 -> s8 [0, 65535] { R520 += 1, R494 += 1 };
  s9 -> s6 [0, 65535];
  s9 -> s9 [0, 65535] { R520 += 1 };
  accepting s8, s5, s9, s6, s7;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R396 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s0 [0, 65535] { R415 += 1, R416 += 1 };
  s0 -> s1 [32, 32] { R416 += 1 };
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value2_4 {
  init s0;
  s0 -> s0 [0, 65535] { R417 += 1, R418 += 1 };
  s0 -> s1 [0, 65535] { R418 += 1, R9 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R418 += 1, R9 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 64] { R480 += 1 };
  s0 -> s0 [0, 65535] { R479 += 1, R480 += 1 };
  s0 -> s1 [91, 65535] { R480 += 1 };
  s1 -> s1 [0, 64] { R480 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [91, 65535] { R480 += 1 };
  accepting s0, s1;
};
automaton value2_6 {
  init s0;
  s0 -> s0 [0, 65535] { R481 += 1, R482 += 1 };
  s0 -> s1 [0, 65535] { R482 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R482 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 8] { R484 += 1, R400 += 1 };
  s0 -> s0 [0, 65535] { R483 += 1, R484 += 1 };
  s0 -> s2 [0, 65535] { R484 += 1, R399 += 1, R400 += 1 };
  s0 -> s3 [9, 13] { R484 += 1, R400 += 1 };
  s0 -> s1 [14, 31] { R484 += 1, R400 += 1 };
  s0 -> s3 [32, 32] { R484 += 1, R400 += 1 };
  s0 -> s1 [33, 65535] { R484 += 1, R400 += 1 };
  s1 -> s5 [0, 65535] { R484 += 1 };
  s1 -> s1 [0, 65535] { R484 += 1, R400 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R484 += 1, R400 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R484 += 1, R399 += 1, R400 += 1 };
  s2 -> s3 [9, 13] { R484 += 1, R400 += 1 };
  s2 -> s1 [14, 31] { R484 += 1, R400 += 1 };
  s2 -> s3 [32, 32] { R484 += 1, R400 += 1 };
  s2 -> s1 [33, 65535] { R484 += 1, R400 += 1 };
  s3 -> s1 [0, 65535] { R484 += 1, R400 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R484 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R486 += 1, R402 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R485 += 1, R486 += 1 };
  s0 -> s2 [0, 65535] { R486 += 1, R401 += 1, R402 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R486 += 1, R402 += 1, R5 += 1 };
  s1 -> s4 [0, 65535] { R486 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R486 += 1, R402 += 1, R5 += 1 };
  s2 -> s2 [0, 65535] { R486 += 1, R401 += 1, R402 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R486 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 8] { R488 += 1, R404 += 1 };
  s0 -> s0 [0, 65535] { R487 += 1, R488 += 1 };
  s0 -> s2 [0, 65535] { R488 += 1, R403 += 1, R404 += 1 };
  s0 -> s3 [9, 13] { R488 += 1, R404 += 1 };
  s0 -> s1 [14, 31] { R488 += 1, R404 += 1 };
  s0 -> s3 [32, 32] { R488 += 1, R404 += 1 };
  s0 -> s1 [33, 65535] { R488 += 1, R404 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R488 += 1 };
  s1 -> s1 [0, 65535] { R488 += 1, R404 += 1 };
  s2 -> s1 [0, 8] { R488 += 1, R404 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R488 += 1, R403 += 1, R404 += 1 };
  s2 -> s3 [9, 13] { R488 += 1, R404 += 1 };
  s2 -> s1 [14, 31] { R488 += 1, R404 += 1 };
  s2 -> s3 [32, 32] { R488 += 1, R404 += 1 };
  s2 -> s1 [33, 65535] { R488 += 1, R404 += 1 };
  s3 -> s1 [0, 65535] { R488 += 1, R404 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R488 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value2_10 {
  init s0;
  s0 -> s0 [0, 65535] { R489 += 1, R490 += 1 };
  s0 -> s1 [0, 65535] { R490 += 1, R406 += 1, R6 += 1 };
  s0 -> s2 [0, 65535] { R490 += 1, R405 += 1, R406 += 1 };
  s1 -> s1 [0, 65535] { R490 += 1, R406 += 1, R6 += 1 };
  s1 -> s4 [0, 65535] { R490 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R490 += 1, R406 += 1, R6 += 1 };
  s2 -> s2 [0, 65535] { R490 += 1, R405 += 1, R406 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R490 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
};
constraint R2 = R410 && R3 = R424 && R4 = R490 && R13 = 0 && R14 - R494 = -1 && R269 = 0 && R270 = R520 && R407 - R410 = -1 && R408 = R410 && R409 - R410 = -1 && R411 = 0 && R412 = 1 && R413 = 0 && R414 = 1 && R415 = 0 && R416 = 1 && R417 = 0 && R418 = 1 && R419 - R520 = 1 && R420 = R424 && R421 - R520 = 1 && R422 = R424 && R423 - R520 = 1 && R479 = 1 && R480 = R490 && R481 = 1 && R482 = R490 && R483 = 1 && R484 = R490 && R485 = 1 && R486 = R490 && R487 = 1 && R488 = R490 && R489 = 1 && R493 = 0 && R495 = 0 && R496 = R520 && R497 = 0 && R498 = R520 && R499 = 0 && R500 = R520 && R501 = 0 && R502 = R520 && R503 = 0 && R504 = R520 && R505 = 0 && R506 = R520 && R507 = 0 && R508 = R520 && R509 = 0 && R510 = R520 && R511 = 0 && R512 = R520 && R513 = 0 && R514 = R520 && R515 = 0 && R516 = R520 && R517 = 0 && R518 = R520 && R519 = 0 && R0 != 0 && R1 != 0 && R10 < 1 && R11 < 1 && R396 < 1 && R494 - R410 < 1 && 0 < R410 && R520 < R424 && 0 < R490 && -1 < R494 && -1 < R520 && (R5 != 0 || ((R1 != R400 || R399 - R400 = -1 || R400 < 0) && (R1 = R400 || R1 < 1))) && (R5 != 0 || ((R1 != R402 || R401 - R402 = -1 || R402 < 0) && (R1 = R402 || R1 < 1))) && (R403 != 0 || ((R6 != 0 || ((R1 != R404 || R404 = 1 || R404 < 0) && (R1 = R404 || R404 = 1 || R1 < 1))) && (R6 = 0 || ((R1 != R404 || R404 = 1 || R404 < 0) && (R404 != 1 || -1 < R1) && (R1 = R404 || R404 = 1))))) && (R405 != 0 || ((R6 != 0 || ((R1 != R406 || R406 = 1 || R406 < 0) && (R1 = R406 || R406 = 1 || R1 < 1))) && (R6 = 0 || ((R1 != R406 || R406 = 1 || R406 < 0) && (R406 != 1 || -1 < R1) && (R1 = R406 || R406 = 1))))) && (R410 != R474 || R473 = R494 || ((R397 != 0 || R474 - R494 < 1 || R474 < 1) && (R397 = 0 || R474 < R494 || R474 < 1))) && (R410 != R476 || R475 = R494 || ((R397 != 0 || R476 - R494 < 1 || R476 < 1) && (R397 = 0 || R476 < R494 || R476 < 1))) && (R410 != R478 || R477 = R494 || ((R397 != 0 || R478 - R494 < 1 || R478 < 1) && (R397 = 0 || R478 < R494 || R478 < 1))) && (R491 != 0 || R492 = R494 || (R398 = 0 && R494 = 0)) && (R5 = 0 || (R1 = R400 && R399 - R400 = -1)) && (R5 = 0 || (R1 = R402 && R401 - R402 = -1)) && (R403 = 0 || (R6 = 0 && R1 < 0)) && (R405 = 0 || (R6 = 0 && R1 < 0)) && (R410 = R474 || (R397 = 0 && R410 = R494)) && (R410 = R476 || (R397 = 0 && R410 = R494)) && (R410 = R478 || (R397 = 0 && R410 = R494)) && (R491 = 0 || (R398 = 0 && R494 = 0));
// End of Parikh automata intersection problem
