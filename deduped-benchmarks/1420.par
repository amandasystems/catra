// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R13, R14, R2, R269, R270, R3, R396, R397, R398, R399, R4, R400, R401, R402, R403, R404, R405, R406, R407, R408, R409, R410, R411, R412, R413, R414, R415, R416, R417, R418, R419, R420, R421, R422, R423, R424, R425, R426, R427, R428, R429, R430, R431, R432, R433, R434, R435, R436, R437, R438, R439, R440, R441, R442, R443, R444, R445, R446, R447, R448, R449, R450, R451, R452, R453, R454, R455, R456, R457, R458, R459, R460, R461, R462, R463, R464, R465, R466, R467, R468, R469, R470, R471, R472, R5, R6, R7, R8, R9;
synchronised {  // Automata constraining P67
automaton P67_0 {
  init s0;
  s0 -> s1 [121, 121];
  accepting s1;
};
};
synchronised {  // Automata constraining value1
automaton value1_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s1 [44, 44];
  s0 -> s0 [45, 65535];
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value1_2 {
  init s0;
  s0 -> s1 [0, 43] { R270 += 1 };
  s0 -> s0 [0, 65535] { R269 += 1, R270 += 1 };
  s0 -> s2 [44, 44];
  s0 -> s1 [45, 65535] { R270 += 1 };
  s1 -> s1 [0, 43] { R270 += 1 };
  s1 -> s2 [44, 44];
  s1 -> s1 [45, 65535] { R270 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value1_3 {
  init s0;
  s0 -> s1 [0, 43] { R420 += 1 };
  s0 -> s0 [0, 65535] { R419 += 1, R420 += 1 };
  s0 -> s1 [45, 65535] { R420 += 1 };
  s1 -> s1 [0, 43] { R420 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [45, 65535] { R420 += 1 };
  accepting s0, s1;
};
automaton value1_4 {
  init s0;
  s0 -> s1 [0, 65535] { R422 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R421 += 1, R422 += 1 };
  s1 -> s1 [0, 65535] { R422 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_5 {
  init s0;
  s0 -> s1 [0, 60] { R424 += 1 };
  s0 -> s2 [0, 65535] { R424 += 1, R10 += 1 };
  s0 -> s0 [0, 65535] { R423 += 1, R424 += 1 };
  s0 -> s3 [61, 61] { R424 += 1 };
  s0 -> s1 [62, 65535] { R424 += 1 };
  s1 -> s1 [0, 60] { R424 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [61, 61] { R424 += 1 };
  s1 -> s1 [62, 65535] { R424 += 1 };
  s2 -> s1 [0, 60] { R424 += 1 };
  s2 -> s2 [0, 65535] { R424 += 1, R10 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [61, 61] { R424 += 1 };
  s2 -> s1 [62, 65535] { R424 += 1 };
  s3 -> s3 [0, 65535] { R424 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value1_6 {
  init s0;
  s0 -> s1 [0, 64] { R448 += 1 };
  s0 -> s0 [0, 65535] { R447 += 1, R448 += 1 };
  s0 -> s2 [89, 89] { R448 += 1 };
  s0 -> s1 [90, 65535] { R448 += 1 };
  s1 -> s1 [0, 64] { R448 += 1 };
  s1 -> s2 [89, 89] { R448 += 1 };
  s1 -> s1 [90, 65535] { R448 += 1 };
  s2 -> s2 [0, 64] { R448 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [89, 65535] { R448 += 1 };
  accepting s2;
};
automaton value1_7 {
  init s0;
  s0 -> s1 [0, 65535] { R450 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R449 += 1, R450 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R450 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_8 {
  init s0;
  s0 -> s1 [0, 60] { R452 += 1 };
  s0 -> s2 [0, 65535] { R452 += 1, R11 += 1 };
  s0 -> s0 [0, 65535] { R451 += 1, R452 += 1 };
  s0 -> s3 [61, 61] { R452 += 1 };
  s0 -> s1 [62, 65535] { R452 += 1 };
  s1 -> s1 [0, 60] { R452 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [61, 61] { R452 += 1 };
  s1 -> s1 [62, 65535] { R452 += 1 };
  s2 -> s1 [0, 60] { R452 += 1 };
  s2 -> s2 [0, 65535] { R452 += 1, R11 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [61, 61] { R452 += 1 };
  s2 -> s1 [62, 65535] { R452 += 1 };
  s3 -> s3 [0, 65535] { R452 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value1_9 {
  init s0;
  s0 -> s1 [0, 88] { R454 += 1, R14 += 1 };
  s0 -> s0 [0, 65535] { R453 += 1, R454 += 1 };
  s0 -> s2 [0, 65535] { R454 += 1, R13 += 1, R14 += 1 };
  s0 -> s3 [89, 89] { R454 += 1 };
  s0 -> s1 [90, 65535] { R454 += 1, R14 += 1 };
  s1 -> s1 [0, 88] { R454 += 1, R14 += 1 };
  s1 -> s3 [89, 89] { R454 += 1 };
  s1 -> s1 [90, 65535] { R454 += 1, R14 += 1 };
  s2 -> s1 [0, 88] { R454 += 1, R14 += 1 };
  s2 -> s2 [0, 65535] { R454 += 1, R13 += 1, R14 += 1 };
  s2 -> s3 [89, 89] { R454 += 1 };
  s2 -> s1 [90, 65535] { R454 += 1, R14 += 1 };
  s3 -> s3 [0, 65535] { R454 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton value1_10 {
  init s0;
  s0 -> s1 [0, 8] { R456 += 1, R408 += 1 };
  s0 -> s2 [0, 65535] { R456 += 1, R407 += 1, R408 += 1 };
  s0 -> s0 [0, 65535] { R455 += 1, R456 += 1 };
  s0 -> s3 [9, 13] { R456 += 1, R408 += 1 };
  s0 -> s1 [14, 31] { R456 += 1, R408 += 1 };
  s0 -> s3 [32, 32] { R456 += 1, R408 += 1 };
  s0 -> s1 [33, 65535] { R456 += 1, R408 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R456 += 1, R408 += 1 };
  s1 -> s5 [0, 65535] { R456 += 1 };
  s2 -> s1 [0, 8] { R456 += 1, R408 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R456 += 1, R407 += 1, R408 += 1 };
  s2 -> s3 [9, 13] { R456 += 1, R408 += 1 };
  s2 -> s1 [14, 31] { R456 += 1, R408 += 1 };
  s2 -> s3 [32, 32] { R456 += 1, R408 += 1 };
  s2 -> s1 [33, 65535] { R456 += 1, R408 += 1 };
  s3 -> s1 [0, 65535] { R456 += 1, R408 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R456 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value1_11 {
  init s0;
  s0 -> s0 [0, 65535] { R457 += 1, R458 += 1 };
  s0 -> s1 [0, 65535] { R458 += 1, R409 += 1, R410 += 1 };
  s0 -> s2 [0, 65535] { R458 += 1, R410 += 1, R7 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R458 += 1, R409 += 1, R410 += 1 };
  s1 -> s2 [0, 65535] { R458 += 1, R410 += 1, R7 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R458 += 1 };
  s2 -> s2 [0, 65535] { R458 += 1, R410 += 1, R7 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R458 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_12 {
  init s0;
  s0 -> s1 [0, 8] { R460 += 1, R412 += 1 };
  s0 -> s2 [0, 65535] { R460 += 1, R411 += 1, R412 += 1 };
  s0 -> s0 [0, 65535] { R459 += 1, R460 += 1 };
  s0 -> s3 [9, 13] { R460 += 1, R412 += 1 };
  s0 -> s1 [14, 31] { R460 += 1, R412 += 1 };
  s0 -> s3 [32, 32] { R460 += 1, R412 += 1 };
  s0 -> s1 [33, 65535] { R460 += 1, R412 += 1 };
  s1 -> s1 [0, 65535] { R460 += 1, R412 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R460 += 1 };
  s2 -> s1 [0, 8] { R460 += 1, R412 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R460 += 1, R411 += 1, R412 += 1 };
  s2 -> s3 [9, 13] { R460 += 1, R412 += 1 };
  s2 -> s1 [14, 31] { R460 += 1, R412 += 1 };
  s2 -> s3 [32, 32] { R460 += 1, R412 += 1 };
  s2 -> s1 [33, 65535] { R460 += 1, R412 += 1 };
  s3 -> s1 [0, 65535] { R460 += 1, R412 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R460 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value1_13 {
  init s0;
  s0 -> s0 [0, 65535] { R461 += 1, R462 += 1 };
  s0 -> s1 [0, 65535] { R462 += 1, R414 += 1, R8 += 1 };
  s0 -> s2 [0, 65535] { R462 += 1, R413 += 1, R414 += 1 };
  s1 -> s4 [0, 65535] { R462 += 1 };
  s1 -> s1 [0, 65535] { R462 += 1, R414 += 1, R8 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R462 += 1, R414 += 1, R8 += 1 };
  s2 -> s2 [0, 65535] { R462 += 1, R413 += 1, R414 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R462 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_14 {
  init s0;
  s0 -> s1 [0, 88] { R464 += 1, R426 += 1 };
  s0 -> s0 [0, 65535] { R463 += 1, R464 += 1 };
  s0 -> s2 [0, 65535] { R464 += 1, R425 += 1, R426 += 1 };
  s0 -> s1 [90, 65535] { R464 += 1, R426 += 1 };
  s1 -> s1 [0, 88] { R464 += 1, R426 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R464 += 1 };
  s1 -> s1 [90, 65535] { R464 += 1, R426 += 1 };
  s2 -> s1 [0, 88] { R464 += 1, R426 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R464 += 1, R425 += 1, R426 += 1 };
  s2 -> s1 [90, 65535] { R464 += 1, R426 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value1_15 {
  init s0;
  s0 -> s0 [0, 65535] { R465 += 1, R466 += 1 };
  s0 -> s1 [0, 65535] { R466 += 1, R427 += 1, R428 += 1 };
  s0 -> s2 [0, 65535] { R466 += 1, R428 += 1, R397 += 1 };
  s1 -> s1 [0, 65535] { R466 += 1, R427 += 1, R428 += 1 };
  s1 -> s2 [0, 65535] { R466 += 1, R428 += 1, R397 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R466 += 1 };
  s2 -> s2 [0, 65535] { R466 += 1, R428 += 1, R397 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R466 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_16 {
  init s0;
  s0 -> s1 [0, 89] { R468 += 1, R430 += 1 };
  s0 -> s2 [0, 65535] { R468 += 1, R429 += 1, R430 += 1 };
  s0 -> s0 [0, 65535] { R467 += 1, R468 += 1 };
  s0 -> s3 [90, 90] { R468 += 1, R430 += 1 };
  s0 -> s1 [91, 65535] { R468 += 1, R430 += 1 };
  s1 -> s1 [0, 89] { R468 += 1, R430 += 1 };
  s1 -> s3 [90, 90] { R468 += 1, R430 += 1 };
  s1 -> s1 [91, 65535] { R468 += 1, R430 += 1 };
  s2 -> s1 [0, 89] { R468 += 1, R430 += 1 };
  s2 -> s2 [0, 65535] { R468 += 1, R429 += 1, R430 += 1 };
  s2 -> s3 [90, 90] { R468 += 1, R430 += 1 };
  s2 -> s1 [91, 65535] { R468 += 1, R430 += 1 };
  s3 -> s3 [0, 65535] { R468 += 1, R430 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R468 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R468 += 1 };
  accepting s3, s4, s5;
};
automaton value1_17 {
  init s0;
  s0 -> s1 [0, 65535] { R470 += 1, R443 += 1, R444 += 1 };
  s0 -> s2 [0, 65535] { R470 += 1, R444 += 1, R398 += 1 };
  s0 -> s0 [0, 65535] { R469 += 1, R470 += 1 };
  s1 -> s1 [0, 65535] { R470 += 1, R443 += 1, R444 += 1 };
  s1 -> s2 [0, 65535] { R470 += 1, R444 += 1, R398 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R470 += 1, R444 += 1, R398 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R470 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R470 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_18 {
  init s0;
  s0 -> s1 [0, 88] { R472 += 1, R446 += 1 };
  s0 -> s0 [0, 65535] { R471 += 1, R472 += 1 };
  s0 -> s2 [0, 65535] { R472 += 1, R445 += 1, R446 += 1 };
  s0 -> s3 [89, 89] { R472 += 1, R446 += 1 };
  s0 -> s4 [89, 89] { R472 += 1, R446 += 1 };
  s0 -> s1 [91, 65535] { R472 += 1, R446 += 1 };
  s1 -> s1 [0, 88] { R472 += 1, R446 += 1 };
  s1 -> s1 [0, 65535] { R472 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [89, 89] { R472 += 1, R446 += 1 };
  s1 -> s4 [89, 89] { R472 += 1, R446 += 1 };
  s1 -> s1 [91, 65535] { R472 += 1, R446 += 1 };
  s2 -> s1 [0, 88] { R472 += 1, R446 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R472 += 1, R445 += 1, R446 += 1 };
  s2 -> s3 [89, 89] { R472 += 1, R446 += 1 };
  s2 -> s4 [89, 89] { R472 += 1, R446 += 1 };
  s2 -> s1 [91, 65535] { R472 += 1, R446 += 1 };
  s3 -> s3 [0, 89] { R472 += 1, R446 += 1 };
  s3 -> s3 [0, 65535] { R472 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [91, 65535] { R472 += 1, R446 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R472 += 1 };
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R396 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s0 [0, 65535] { R415 += 1, R416 += 1 };
  s0 -> s1 [32, 32] { R416 += 1 };
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value2_4 {
  init s0;
  s0 -> s0 [0, 65535] { R417 += 1, R418 += 1 };
  s0 -> s1 [0, 65535] { R418 += 1, R9 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R418 += 1, R9 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 64] { R432 += 1 };
  s0 -> s0 [0, 65535] { R431 += 1, R432 += 1 };
  s0 -> s1 [91, 65535] { R432 += 1 };
  s1 -> s1 [0, 64] { R432 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [91, 65535] { R432 += 1 };
  accepting s0, s1;
};
automaton value2_6 {
  init s0;
  s0 -> s0 [0, 65535] { R433 += 1, R434 += 1 };
  s0 -> s1 [0, 65535] { R434 += 1, R1 += 1 };
  s1 -> s1 [0, 65535] { R434 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 8] { R436 += 1, R400 += 1 };
  s0 -> s2 [0, 65535] { R436 += 1, R399 += 1, R400 += 1 };
  s0 -> s0 [0, 65535] { R435 += 1, R436 += 1 };
  s0 -> s3 [9, 13] { R436 += 1, R400 += 1 };
  s0 -> s1 [14, 31] { R436 += 1, R400 += 1 };
  s0 -> s3 [32, 32] { R436 += 1, R400 += 1 };
  s0 -> s1 [33, 65535] { R436 += 1, R400 += 1 };
  s1 -> s5 [0, 65535] { R436 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R436 += 1, R400 += 1 };
  s2 -> s1 [0, 8] { R436 += 1, R400 += 1 };
  s2 -> s2 [0, 65535] { R436 += 1, R399 += 1, R400 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R436 += 1, R400 += 1 };
  s2 -> s1 [14, 31] { R436 += 1, R400 += 1 };
  s2 -> s3 [32, 32] { R436 += 1, R400 += 1 };
  s2 -> s1 [33, 65535] { R436 += 1, R400 += 1 };
  s3 -> s1 [0, 65535] { R436 += 1, R400 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R436 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R437 += 1, R438 += 1 };
  s0 -> s1 [0, 65535] { R438 += 1, R402 += 1, R5 += 1 };
  s0 -> s2 [0, 65535] { R438 += 1, R401 += 1, R402 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R438 += 1, R402 += 1, R5 += 1 };
  s1 -> s4 [0, 65535] { R438 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R438 += 1, R402 += 1, R5 += 1 };
  s2 -> s2 [0, 65535] { R438 += 1, R401 += 1, R402 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R438 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 8] { R440 += 1, R404 += 1 };
  s0 -> s2 [0, 65535] { R440 += 1, R403 += 1, R404 += 1 };
  s0 -> s0 [0, 65535] { R439 += 1, R440 += 1 };
  s0 -> s3 [9, 13] { R440 += 1, R404 += 1 };
  s0 -> s1 [14, 31] { R440 += 1, R404 += 1 };
  s0 -> s3 [32, 32] { R440 += 1, R404 += 1 };
  s0 -> s1 [33, 65535] { R440 += 1, R404 += 1 };
  s1 -> s5 [0, 65535] { R440 += 1 };
  s1 -> s1 [0, 65535] { R440 += 1, R404 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R440 += 1, R404 += 1 };
  s2 -> s2 [0, 65535] { R440 += 1, R403 += 1, R404 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R440 += 1, R404 += 1 };
  s2 -> s1 [14, 31] { R440 += 1, R404 += 1 };
  s2 -> s3 [32, 32] { R440 += 1, R404 += 1 };
  s2 -> s1 [33, 65535] { R440 += 1, R404 += 1 };
  s3 -> s1 [0, 65535] { R440 += 1, R404 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R440 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 65535] { R442 += 1, R406 += 1, R6 += 1 };
  s0 -> s2 [0, 65535] { R442 += 1, R405 += 1, R406 += 1 };
  s0 -> s0 [0, 65535] { R441 += 1, R442 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R442 += 1 };
  s1 -> s1 [0, 65535] { R442 += 1, R406 += 1, R6 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R442 += 1, R406 += 1, R6 += 1 };
  s2 -> s2 [0, 65535] { R442 += 1, R405 += 1, R406 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R442 += 1 };
  accepting s3, s4, s2, s1, s0;
};
};
constraint R2 = R430 && R3 = R424 && R4 = R442 && R13 = 0 && R14 - R429 = -1 && R269 = 0 && R270 = R472 && R407 - R430 = -1 && R408 = R430 && R409 - R430 = -1 && R410 = R430 && R411 = 0 && R412 = 1 && R413 = 0 && R414 = 1 && R415 = 0 && R416 = 1 && R417 = 0 && R418 = 1 && R419 - R472 = 1 && R420 = R424 && R421 - R472 = 1 && R422 = R424 && R423 - R472 = 1 && R431 = 1 && R432 = R442 && R433 = 1 && R434 = R442 && R435 = 1 && R436 = R442 && R437 = 1 && R438 = R442 && R439 = 1 && R440 = R442 && R441 = 1 && R447 = 0 && R448 = R472 && R449 = 0 && R450 = R472 && R451 = 0 && R452 = R472 && R453 = 0 && R454 = R472 && R455 = 0 && R456 = R472 && R457 = 0 && R458 = R472 && R459 = 0 && R460 = R472 && R461 = 0 && R462 = R472 && R463 = 0 && R464 = R472 && R465 = 0 && R466 = R472 && R467 = 0 && R468 = R472 && R469 = 0 && R470 = R472 && R471 = 0 && R0 != 0 && R1 != 0 && R10 < 1 && R11 < 1 && R396 < 1 && R472 < R424 && R429 - R430 < 1 && -1 < R429 && 0 < R430 && 0 < R442 && -1 < R472 && (R5 != 0 || ((R1 != R400 || R399 - R400 = -1 || R400 < 0) && (R1 = R400 || R1 < 1))) && (R5 != 0 || ((R1 != R402 || R401 - R402 = -1 || R402 < 0) && (R1 = R402 || R1 < 1))) && (R403 != 0 || ((R6 != 0 || ((R1 != R404 || R404 = 1 || R404 < 0) && (R1 = R404 || R404 = 1 || R1 < 1))) && (R6 = 0 || ((R1 != R404 || R404 = 1 || R404 < 0) && (R404 != 1 || -1 < R1) && (R1 = R404 || R404 = 1))))) && (R405 != 0 || ((R6 != 0 || ((R1 != R406 || R406 = 1 || R406 < 0) && (R1 = R406 || R406 = 1 || R1 < 1))) && (R6 = 0 || ((R1 != R406 || R406 = 1 || R406 < 0) && (R406 != 1 || -1 < R1) && (R1 = R406 || R406 = 1))))) && (R425 != R429 || R426 = R430 || (R397 = 0 && R429 = R430)) && (R427 != R429 || R428 = R430 || (R397 = 0 && R429 = R430)) && (R443 != 0 || R429 = R444 || (R398 = 0 && R429 = 0)) && (R445 != 0 || R429 = R446 || (R398 = 0 && R429 = 0)) && (R5 = 0 || (R1 = R400 && R399 - R400 = -1)) && (R5 = 0 || (R1 = R402 && R401 - R402 = -1)) && (R403 = 0 || (R6 = 0 && R1 < 0)) && (R405 = 0 || (R6 = 0 && R1 < 0)) && (R425 = R429 || (R397 = 0 && R429 = R430)) && (R427 = R429 || (R397 = 0 && R429 = R430)) && (R443 = 0 || (R398 = 0 && R429 = 0)) && (R445 = 0 || (R398 = 0 && R429 = 0));
// End of Parikh automata intersection problem
