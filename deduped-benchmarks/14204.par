// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R12, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R3890, R3891, R3892, R3893, R3894, R3895, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R6436, R6437, R6438, R6439, R66, R67, R68, R69, R70, R71, R72, R7284, R7285, R7286, R7287, R7288, R7289, R73, R7394, R7395, R7396, R7397, R7398, R7399, R7400, R7401, R7402, R7403, R7404, R7405, R7406, R7407, R7408, R7409, R7410, R7411, R7412, R7413, R7414, R7415, R7416, R7417, R7418, R7419, R7420, R7421, R7422, R7423, R7424, R7425, R7426, R7427, R7428, R7429, R7430, R7431, R7432, R7433, R7434, R7435, R7436, R7437, R7438, R7439, R7440, R7441, R7442, R7443, R7444, R7445, R7446, R7447, R7448, R7449, R7450, R7451, R7452, R7453, R7454, R7455, R7456, R7457, R7458, R7459, R7460, R7461, R7462, R7463, R7464, R7465, R7466, R7467, R7468, R7469, R7470, R7471, R7472, R7473, R7474, R7475, R7476, R7477, R7478, R7479, R7480, R7481, R7482, R7483, R7484, R7485, R7486, R7487, R7488, R7489, R7490, R7491, R7492, R7493, R7494, R7495, R7496, R7497, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [81, 81];
  s0 -> s0 [82, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [81, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 80];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [81, 81];
  s0 -> s1 [82, 65535];
  s1 -> s1 [0, 80];
  s1 -> s2 [81, 81];
  s1 -> s1 [82, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s1 [0, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R25 += 1 };
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R7419 += 1, R19 += 1 };
  s0 -> s0 [0, 65535] { R7418 += 1, R7419 += 1 };
  s1 -> s1 [0, 65535] { R7419 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 80] { R7421 += 1 };
  s0 -> s0 [0, 65535] { R7420 += 1, R7421 += 1 };
  s0 -> s2 [81, 81] { R7421 += 1 };
  s0 -> s3 [81, 81] { R7421 += 1 };
  s0 -> s1 [83, 65535] { R7421 += 1 };
  s1 -> s1 [0, 80] { R7421 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R7421 += 1 };
  s1 -> s3 [81, 81] { R7421 += 1 };
  s1 -> s1 [83, 65535] { R7421 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 81] { R7421 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [83, 65535] { R7421 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 80] { R7423 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R7422 += 1, R7423 += 1 };
  s0 -> s2 [81, 81] { R7423 += 1, R38 += 1 };
  s0 -> s3 [81, 81] { R7423 += 1, R38 += 1 };
  s0 -> s1 [82, 65535] { R7423 += 1, R38 += 1 };
  s1 -> s1 [0, 80] { R7423 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R7423 += 1, R38 += 1 };
  s1 -> s3 [81, 81] { R7423 += 1, R38 += 1 };
  s1 -> s1 [82, 65535] { R7423 += 1, R38 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R7423 += 1, R38 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 80] { R7425 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R7424 += 1, R7425 += 1 };
  s0 -> s2 [81, 81] { R7425 += 1, R40 += 1 };
  s0 -> s3 [81, 81] { R7425 += 1, R40 += 1 };
  s0 -> s1 [82, 65535] { R7425 += 1, R40 += 1 };
  s1 -> s1 [0, 80] { R7425 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R7425 += 1, R40 += 1 };
  s1 -> s3 [81, 81] { R7425 += 1, R40 += 1 };
  s1 -> s1 [82, 65535] { R7425 += 1, R40 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R7425 += 1, R40 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 80] { R7427 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R7426 += 1, R7427 += 1 };
  s0 -> s2 [81, 81] { R7427 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [81, 81] { R7427 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [82, 65535] { R7427 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 80] { R7427 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R7427 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [81, 81] { R7427 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [82, 65535] { R7427 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7427 += 1, R42 += 1, R43 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 80] { R7429 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R7428 += 1, R7429 += 1 };
  s0 -> s2 [81, 81] { R7429 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [81, 81] { R7429 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [82, 65535] { R7429 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 80] { R7429 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R7429 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [81, 81] { R7429 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [82, 65535] { R7429 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7429 += 1, R46 += 1, R47 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 80] { R7431 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R7430 += 1, R7431 += 1 };
  s0 -> s2 [81, 81] { R7431 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [81, 81] { R7431 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [82, 65535] { R7431 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 80] { R7431 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R7431 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [81, 81] { R7431 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [82, 65535] { R7431 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7431 += 1, R52 += 1, R53 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 80] { R7433 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R7432 += 1, R7433 += 1 };
  s0 -> s2 [81, 81] { R7433 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [81, 81] { R7433 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [82, 65535] { R7433 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 80] { R7433 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R7433 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [81, 81] { R7433 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [82, 65535] { R7433 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7433 += 1, R56 += 1, R57 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 80] { R7435 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R7434 += 1, R7435 += 1 };
  s0 -> s2 [81, 81] { R7435 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [81, 81] { R7435 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [82, 65535] { R7435 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 80] { R7435 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R7435 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [81, 81] { R7435 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [82, 65535] { R7435 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7435 += 1, R62 += 1, R63 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 80] { R7455 += 1 };
  s0 -> s0 [0, 65535] { R7454 += 1, R7455 += 1 };
  s0 -> s2 [81, 81] { R7455 += 1 };
  s0 -> s1 [82, 65535] { R7455 += 1 };
  s1 -> s1 [0, 80] { R7455 += 1 };
  s1 -> s2 [81, 81] { R7455 += 1 };
  s1 -> s1 [82, 65535] { R7455 += 1 };
  s2 -> s2 [0, 65535] { R7455 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R7457 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R7456 += 1, R7457 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R7457 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 80] { R7459 += 1 };
  s0 -> s2 [0, 65535] { R7459 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R7458 += 1, R7459 += 1 };
  s0 -> s3 [81, 81] { R7459 += 1 };
  s0 -> s1 [82, 65535] { R7459 += 1 };
  s1 -> s1 [0, 80] { R7459 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [81, 81] { R7459 += 1 };
  s1 -> s1 [82, 65535] { R7459 += 1 };
  s2 -> s1 [0, 80] { R7459 += 1 };
  s2 -> s2 [0, 65535] { R7459 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [81, 81] { R7459 += 1 };
  s2 -> s1 [82, 65535] { R7459 += 1 };
  s3 -> s3 [0, 65535] { R7459 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 80] { R7461 += 1, R7399 += 1 };
  s0 -> s2 [0, 65535] { R7461 += 1, R7398 += 1, R7399 += 1 };
  s0 -> s0 [0, 65535] { R7460 += 1, R7461 += 1 };
  s0 -> s1 [82, 65535] { R7461 += 1, R7399 += 1 };
  s1 -> s1 [0, 80] { R7461 += 1, R7399 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R7461 += 1 };
  s1 -> s1 [82, 65535] { R7461 += 1, R7399 += 1 };
  s2 -> s1 [0, 80] { R7461 += 1, R7399 += 1 };
  s2 -> s2 [0, 65535] { R7461 += 1, R7398 += 1, R7399 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [82, 65535] { R7461 += 1, R7399 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R7463 += 1, R7400 += 1, R7401 += 1 };
  s0 -> s2 [0, 65535] { R7463 += 1, R7401 += 1, R17 += 1 };
  s0 -> s0 [0, 65535] { R7462 += 1, R7463 += 1 };
  s1 -> s1 [0, 65535] { R7463 += 1, R7400 += 1, R7401 += 1 };
  s1 -> s2 [0, 65535] { R7463 += 1, R7401 += 1, R17 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R7463 += 1, R7401 += 1, R17 += 1 };
  s2 -> s3 [0, 65535] { R7463 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7463 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 65535] { R7465 += 1, R7403 += 1 };
  s0 -> s2 [0, 65535] { R7465 += 1, R7402 += 1, R7403 += 1 };
  s0 -> s0 [0, 65535] { R7464 += 1, R7465 += 1 };
  s1 -> s1 [0, 65535] { R7465 += 1, R7403 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R7465 += 1 };
  s2 -> s1 [0, 65535] { R7465 += 1, R7403 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R7465 += 1, R7402 += 1, R7403 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7465 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R7467 += 1, R7405 += 1, R67 += 1 };
  s0 -> s2 [0, 65535] { R7467 += 1, R7404 += 1, R7405 += 1 };
  s0 -> s0 [0, 65535] { R7466 += 1, R7467 += 1 };
  s1 -> s4 [0, 65535] { R7467 += 1 };
  s1 -> s1 [0, 65535] { R7467 += 1, R7405 += 1, R67 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R7467 += 1, R7405 += 1, R67 += 1 };
  s2 -> s2 [0, 65535] { R7467 += 1, R7404 += 1, R7405 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7467 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 81] { R7469 += 1, R7407 += 1 };
  s0 -> s2 [0, 65535] { R7469 += 1, R7406 += 1, R7407 += 1 };
  s0 -> s0 [0, 65535] { R7468 += 1, R7469 += 1 };
  s0 -> s3 [0, 65535] { R7469 += 1, R7407 += 1, R69 += 1 };
  s0 -> s1 [83, 65535] { R7469 += 1, R7407 += 1 };
  s1 -> s1 [0, 81] { R7469 += 1, R7407 += 1 };
  s1 -> s1 [0, 65535] { R7469 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [83, 65535] { R7469 += 1, R7407 += 1 };
  s2 -> s1 [0, 81] { R7469 += 1, R7407 += 1 };
  s2 -> s2 [0, 65535] { R7469 += 1, R7406 += 1, R7407 += 1 };
  s2 -> s3 [0, 65535] { R7469 += 1, R7407 += 1, R69 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [83, 65535] { R7469 += 1, R7407 += 1 };
  s3 -> s1 [0, 81] { R7469 += 1, R7407 += 1 };
  s3 -> s4 [0, 65535] { R7469 += 1 };
  s3 -> s3 [0, 65535] { R7469 += 1, R7407 += 1, R69 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [83, 65535] { R7469 += 1, R7407 += 1 };
  s4 -> s4 [0, 65535] { R7469 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 81] { R7471 += 1, R7409 += 1, R73 += 1 };
  s0 -> s2 [0, 65535] { R7471 += 1, R7408 += 1, R7409 += 1 };
  s0 -> s3 [0, 65535] { R7471 += 1, R7409 += 1, R72 += 1, R73 += 1 };
  s0 -> s0 [0, 65535] { R7470 += 1, R7471 += 1 };
  s0 -> s1 [83, 65535] { R7471 += 1, R7409 += 1, R73 += 1 };
  s1 -> s1 [0, 81] { R7471 += 1, R7409 += 1, R73 += 1 };
  s1 -> s4 [0, 65535] { R7471 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R7471 += 1, R7409 += 1 };
  s1 -> s1 [83, 65535] { R7471 += 1, R7409 += 1, R73 += 1 };
  s2 -> s1 [0, 81] { R7471 += 1, R7409 += 1, R73 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R7471 += 1, R7408 += 1, R7409 += 1 };
  s2 -> s3 [0, 65535] { R7471 += 1, R7409 += 1, R72 += 1, R73 += 1 };
  s2 -> s1 [83, 65535] { R7471 += 1, R7409 += 1, R73 += 1 };
  s3 -> s1 [0, 81] { R7471 += 1, R7409 += 1, R73 += 1 };
  s3 -> s4 [0, 65535] { R7471 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R7471 += 1, R7409 += 1, R72 += 1, R73 += 1 };
  s3 -> s1 [83, 65535] { R7471 += 1, R7409 += 1, R73 += 1 };
  s4 -> s4 [0, 65535] { R7471 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R7473 += 1, R7411 += 1, R3894 += 1, R3895 += 1 };
  s0 -> s0 [0, 65535] { R7472 += 1, R7473 += 1 };
  s0 -> s2 [0, 65535] { R7473 += 1, R7411 += 1 };
  s0 -> s3 [0, 65535] { R7473 += 1, R7410 += 1, R7411 += 1 };
  s1 -> s1 [0, 65535] { R7473 += 1, R7411 += 1, R3894 += 1, R3895 += 1 };
  s1 -> s2 [0, 65535] { R7473 += 1, R7411 += 1 };
  s1 -> s5 [0, 65535] { R7473 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R7473 += 1, R7411 += 1 };
  s2 -> s5 [0, 65535] { R7473 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R7473 += 1, R7411 += 1, R3894 += 1, R3895 += 1 };
  s3 -> s2 [0, 65535] { R7473 += 1, R7411 += 1 };
  s3 -> s3 [0, 65535] { R7473 += 1, R7410 += 1, R7411 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R7473 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 82] { R7475 += 1, R7413 += 1, R6439 += 1 };
  s0 -> s2 [0, 65535] { R7475 += 1, R7412 += 1, R7413 += 1 };
  s0 -> s3 [0, 65535] { R7475 += 1, R7413 += 1, R6438 += 1, R6439 += 1 };
  s0 -> s0 [0, 65535] { R7474 += 1, R7475 += 1 };
  s0 -> s4 [88, 88] { R7475 += 1, R7413 += 1, R6439 += 1 };
  s0 -> s1 [89, 65535] { R7475 += 1, R7413 += 1, R6439 += 1 };
  s1 -> s1 [0, 82] { R7475 += 1, R7413 += 1, R6439 += 1 };
  s1 -> s4 [88, 88] { R7475 += 1, R7413 += 1, R6439 += 1 };
  s1 -> s1 [89, 65535] { R7475 += 1, R7413 += 1, R6439 += 1 };
  s2 -> s1 [0, 82] { R7475 += 1, R7413 += 1, R6439 += 1 };
  s2 -> s2 [0, 65535] { R7475 += 1, R7412 += 1, R7413 += 1 };
  s2 -> s3 [0, 65535] { R7475 += 1, R7413 += 1, R6438 += 1, R6439 += 1 };
  s2 -> s4 [88, 88] { R7475 += 1, R7413 += 1, R6439 += 1 };
  s2 -> s1 [89, 65535] { R7475 += 1, R7413 += 1, R6439 += 1 };
  s3 -> s1 [0, 82] { R7475 += 1, R7413 += 1, R6439 += 1 };
  s3 -> s3 [0, 65535] { R7475 += 1, R7413 += 1, R6438 += 1, R6439 += 1 };
  s3 -> s4 [88, 88] { R7475 += 1, R7413 += 1, R6439 += 1 };
  s3 -> s1 [89, 65535] { R7475 += 1, R7413 += 1, R6439 += 1 };
  s4 -> s4 [0, 82] { R7475 += 1, R7413 += 1, R6439 += 1 };
  s4 -> s4 [0, 65535] { R7475 += 1, R7413 += 1 };
  s4 -> s5 [0, 65535] { R7475 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [88, 65535] { R7475 += 1, R7413 += 1, R6439 += 1 };
  s5 -> s5 [0, 65535] { R7475 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s4, s5, s6;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R7477 += 1, R7414 += 1, R7415 += 1 };
  s0 -> s2 [0, 65535] { R7477 += 1, R7415 += 1 };
  s0 -> s0 [0, 65535] { R7476 += 1, R7477 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R7477 += 1, R7414 += 1, R7415 += 1 };
  s1 -> s2 [0, 65535] { R7477 += 1, R7415 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R7477 += 1 };
  s2 -> s2 [0, 65535] { R7477 += 1, R7415 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7477 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 81] { R7479 += 1, R7417 += 1, R7397 += 1 };
  s0 -> s0 [0, 65535] { R7478 += 1, R7479 += 1 };
  s0 -> s2 [0, 65535] { R7479 += 1, R7416 += 1, R7417 += 1 };
  s0 -> s1 [0, 65535] { R7479 += 1, R7417 += 1 };
  s0 -> s3 [82, 82] { R7479 += 1, R7417 += 1, R7397 += 1 };
  s0 -> s4 [82, 82] { R7479 += 1, R7417 += 1, R7397 += 1 };
  s0 -> s1 [89, 65535] { R7479 += 1, R7417 += 1, R7397 += 1 };
  s1 -> s1 [0, 81] { R7479 += 1, R7417 += 1, R7397 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R7479 += 1 };
  s1 -> s1 [0, 65535] { R7479 += 1, R7417 += 1 };
  s1 -> s3 [82, 82] { R7479 += 1, R7417 += 1, R7397 += 1 };
  s1 -> s4 [82, 82] { R7479 += 1, R7417 += 1, R7397 += 1 };
  s1 -> s1 [89, 65535] { R7479 += 1, R7417 += 1, R7397 += 1 };
  s2 -> s1 [0, 81] { R7479 += 1, R7417 += 1, R7397 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R7479 += 1, R7416 += 1, R7417 += 1 };
  s2 -> s1 [0, 65535] { R7479 += 1, R7417 += 1 };
  s2 -> s3 [82, 82] { R7479 += 1, R7417 += 1, R7397 += 1 };
  s2 -> s4 [82, 82] { R7479 += 1, R7417 += 1, R7397 += 1 };
  s2 -> s1 [89, 65535] { R7479 += 1, R7417 += 1, R7397 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R7479 += 1, R7417 += 1 };
  s3 -> s6 [0, 65535] { R7479 += 1 };
  s4 -> s4 [0, 82] { R7479 += 1, R7417 += 1, R7397 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R7479 += 1 };
  s4 -> s4 [0, 65535] { R7479 += 1, R7417 += 1 };
  s4 -> s4 [89, 65535] { R7479 += 1, R7417 += 1, R7397 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7479 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R7481 += 1, R7436 += 1, R7437 += 1 };
  s0 -> s2 [0, 65535] { R7481 += 1, R7437 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R7480 += 1, R7481 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R7481 += 1, R7436 += 1, R7437 += 1 };
  s1 -> s2 [0, 65535] { R7481 += 1, R7437 += 1, R18 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R7481 += 1, R7437 += 1, R18 += 1 };
  s2 -> s4 [0, 65535] { R7481 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7481 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 80] { R7483 += 1, R7439 += 1 };
  s0 -> s0 [0, 65535] { R7482 += 1, R7483 += 1 };
  s0 -> s2 [0, 65535] { R7483 += 1, R7438 += 1, R7439 += 1 };
  s0 -> s3 [81, 81] { R7483 += 1, R7439 += 1 };
  s0 -> s4 [81, 81] { R7483 += 1, R7439 += 1 };
  s0 -> s5 [82, 82] { R7483 += 1, R7439 += 1 };
  s0 -> s1 [83, 65535] { R7483 += 1, R7439 += 1 };
  s1 -> s1 [0, 80] { R7483 += 1, R7439 += 1 };
  s1 -> s3 [81, 81] { R7483 += 1, R7439 += 1 };
  s1 -> s4 [81, 81] { R7483 += 1, R7439 += 1 };
  s1 -> s5 [82, 82] { R7483 += 1, R7439 += 1 };
  s1 -> s1 [83, 65535] { R7483 += 1, R7439 += 1 };
  s2 -> s1 [0, 80] { R7483 += 1, R7439 += 1 };
  s2 -> s2 [0, 65535] { R7483 += 1, R7438 += 1, R7439 += 1 };
  s2 -> s3 [81, 81] { R7483 += 1, R7439 += 1 };
  s2 -> s4 [81, 81] { R7483 += 1, R7439 += 1 };
  s2 -> s5 [82, 82] { R7483 += 1, R7439 += 1 };
  s2 -> s1 [83, 65535] { R7483 += 1, R7439 += 1 };
  s4 -> s4 [0, 81] { R7483 += 1, R7439 += 1 };
  s4 -> s8 [82, 82] { R7483 += 1, R7439 += 1 };
  s4 -> s4 [83, 65535] { R7483 += 1, R7439 += 1 };
  s5 -> s5 [0, 80] { R7483 += 1, R7439 += 1 };
  s5 -> s5 [0, 65535] { R7483 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [81, 81] { R7483 += 1, R7439 += 1 };
  s5 -> s8 [81, 81] { R7483 += 1, R7439 += 1 };
  s5 -> s5 [82, 65535] { R7483 += 1, R7439 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R7483 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s6 [0, 65535];
  s8 -> s9 [0, 65535] { R7483 += 1 };
  s8 -> s8 [0, 65535] { R7483 += 1, R7439 += 1 };
  s9 -> s6 [0, 65535];
  s9 -> s9 [0, 65535] { R7483 += 1 };
  accepting s8, s5, s9, s6, s7;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 80] { R7485 += 1, R7441 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R7484 += 1, R7485 += 1 };
  s0 -> s2 [0, 65535] { R7485 += 1, R7440 += 1, R7441 += 1 };
  s0 -> s3 [81, 81] { R7485 += 1, R7441 += 1, R66 += 1 };
  s0 -> s4 [81, 81] { R7485 += 1, R7441 += 1, R66 += 1 };
  s0 -> s1 [82, 65535] { R7485 += 1, R7441 += 1, R66 += 1 };
  s1 -> s1 [0, 80] { R7485 += 1, R7441 += 1, R66 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R7485 += 1 };
  s1 -> s3 [81, 81] { R7485 += 1, R7441 += 1, R66 += 1 };
  s1 -> s4 [81, 81] { R7485 += 1, R7441 += 1, R66 += 1 };
  s1 -> s1 [82, 65535] { R7485 += 1, R7441 += 1, R66 += 1 };
  s2 -> s1 [0, 80] { R7485 += 1, R7441 += 1, R66 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R7485 += 1, R7440 += 1, R7441 += 1 };
  s2 -> s3 [81, 81] { R7485 += 1, R7441 += 1, R66 += 1 };
  s2 -> s4 [81, 81] { R7485 += 1, R7441 += 1, R66 += 1 };
  s2 -> s1 [82, 65535] { R7485 += 1, R7441 += 1, R66 += 1 };
  s3 -> s3 [0, 65535] { R7485 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R7485 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R7485 += 1, R7441 += 1, R66 += 1 };
  s5 -> s5 [0, 65535] { R7485 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 80] { R7487 += 1, R7443 += 1, R68 += 1 };
  s0 -> s0 [0, 65535] { R7486 += 1, R7487 += 1 };
  s0 -> s2 [0, 65535] { R7487 += 1, R7442 += 1, R7443 += 1 };
  s0 -> s3 [81, 81] { R7487 += 1, R7443 += 1, R68 += 1 };
  s0 -> s4 [81, 81] { R7487 += 1, R7443 += 1, R68 += 1 };
  s0 -> s1 [82, 65535] { R7487 += 1, R7443 += 1, R68 += 1 };
  s1 -> s1 [0, 80] { R7487 += 1, R7443 += 1, R68 += 1 };
  s1 -> s1 [0, 65535] { R7487 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [81, 81] { R7487 += 1, R7443 += 1, R68 += 1 };
  s1 -> s4 [81, 81] { R7487 += 1, R7443 += 1, R68 += 1 };
  s1 -> s1 [82, 65535] { R7487 += 1, R7443 += 1, R68 += 1 };
  s2 -> s1 [0, 80] { R7487 += 1, R7443 += 1, R68 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R7487 += 1, R7442 += 1, R7443 += 1 };
  s2 -> s3 [81, 81] { R7487 += 1, R7443 += 1, R68 += 1 };
  s2 -> s4 [81, 81] { R7487 += 1, R7443 += 1, R68 += 1 };
  s2 -> s1 [82, 65535] { R7487 += 1, R7443 += 1, R68 += 1 };
  s3 -> s6 [0, 65535] { R7487 += 1 };
  s3 -> s3 [0, 65535] { R7487 += 1, R7443 += 1, R68 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R7487 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7487 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 80] { R7489 += 1, R7445 += 1, R70 += 1, R71 += 1 };
  s0 -> s2 [0, 65535] { R7489 += 1, R7444 += 1, R7445 += 1 };
  s0 -> s0 [0, 65535] { R7488 += 1, R7489 += 1 };
  s0 -> s3 [81, 81] { R7489 += 1, R7445 += 1, R70 += 1, R71 += 1 };
  s0 -> s4 [81, 81] { R7489 += 1, R7445 += 1, R70 += 1, R71 += 1 };
  s0 -> s1 [82, 65535] { R7489 += 1, R7445 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 80] { R7489 += 1, R7445 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 65535] { R7489 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [81, 81] { R7489 += 1, R7445 += 1, R70 += 1, R71 += 1 };
  s1 -> s4 [81, 81] { R7489 += 1, R7445 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [82, 65535] { R7489 += 1, R7445 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [0, 80] { R7489 += 1, R7445 += 1, R70 += 1, R71 += 1 };
  s2 -> s2 [0, 65535] { R7489 += 1, R7444 += 1, R7445 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [81, 81] { R7489 += 1, R7445 += 1, R70 += 1, R71 += 1 };
  s2 -> s4 [81, 81] { R7489 += 1, R7445 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [82, 65535] { R7489 += 1, R7445 += 1, R70 += 1, R71 += 1 };
  s3 -> s3 [0, 65535] { R7489 += 1, R7445 += 1, R70 += 1, R71 += 1 };
  s3 -> s6 [0, 65535] { R7489 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R7489 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7489 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 80] { R7491 += 1, R7447 += 1, R3890 += 1, R3891 += 1 };
  s0 -> s2 [0, 80] { R7491 += 1, R7447 += 1, R3891 += 1, R3892 += 1 };
  s0 -> s3 [0, 65535] { R7491 += 1, R7446 += 1, R7447 += 1 };
  s0 -> s0 [0, 65535] { R7490 += 1, R7491 += 1 };
  s0 -> s4 [81, 81] { R7491 += 1, R7447 += 1, R3890 += 1, R3891 += 1 };
  s0 -> s5 [81, 81] { R7491 += 1, R7447 += 1, R3890 += 1, R3891 += 1 };
  s0 -> s6 [81, 81] { R7491 += 1, R7447 += 1, R3891 += 1, R3892 += 1 };
  s0 -> s7 [81, 81] { R7491 += 1, R7447 += 1, R3891 += 1, R3892 += 1 };
  s0 -> s1 [82, 65535] { R7491 += 1, R7447 += 1, R3890 += 1, R3891 += 1 };
  s0 -> s2 [82, 65535] { R7491 += 1, R7447 += 1, R3891 += 1, R3892 += 1 };
  s1 -> s1 [0, 80] { R7491 += 1, R7447 += 1, R3890 += 1, R3891 += 1 };
  s1 -> s2 [0, 80] { R7491 += 1, R7447 += 1, R3891 += 1, R3892 += 1 };
  s1 -> s4 [81, 81] { R7491 += 1, R7447 += 1, R3890 += 1, R3891 += 1 };
  s1 -> s5 [81, 81] { R7491 += 1, R7447 += 1, R3890 += 1, R3891 += 1 };
  s1 -> s6 [81, 81] { R7491 += 1, R7447 += 1, R3891 += 1, R3892 += 1 };
  s1 -> s7 [81, 81] { R7491 += 1, R7447 += 1, R3891 += 1, R3892 += 1 };
  s1 -> s1 [82, 65535] { R7491 += 1, R7447 += 1, R3890 += 1, R3891 += 1 };
  s1 -> s2 [82, 65535] { R7491 += 1, R7447 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s2 [0, 80] { R7491 += 1, R7447 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R7491 += 1 };
  s2 -> s6 [81, 81] { R7491 += 1, R7447 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s7 [81, 81] { R7491 += 1, R7447 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s2 [82, 65535] { R7491 += 1, R7447 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s1 [0, 80] { R7491 += 1, R7447 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s2 [0, 80] { R7491 += 1, R7447 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s3 [0, 65535] { R7491 += 1, R7446 += 1, R7447 += 1 };
  s3 -> s4 [81, 81] { R7491 += 1, R7447 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s5 [81, 81] { R7491 += 1, R7447 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s6 [81, 81] { R7491 += 1, R7447 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s7 [81, 81] { R7491 += 1, R7447 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s1 [82, 65535] { R7491 += 1, R7447 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s2 [82, 65535] { R7491 += 1, R7447 += 1, R3891 += 1, R3892 += 1 };
  s4 -> s4 [0, 65535] { R7491 += 1, R7447 += 1, R3890 += 1, R3891 += 1 };
  s4 -> s6 [0, 65535] { R7491 += 1, R7447 += 1, R3891 += 1, R3892 += 1 };
  s6 -> s6 [0, 65535] { R7491 += 1, R7447 += 1, R3891 += 1, R3892 += 1 };
  s6 -> s9 [0, 65535] { R7491 += 1 };
  s6 -> s8 [0, 65535];
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R7491 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R7491 += 1 };
  s9 -> s8 [0, 65535];
  accepting s8, s2, s9, s6, s7;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 80] { R7493 += 1, R7449 += 1, R6436 += 1, R6437 += 1 };
  s0 -> s2 [0, 65535] { R7493 += 1, R7448 += 1, R7449 += 1 };
  s0 -> s0 [0, 65535] { R7492 += 1, R7493 += 1 };
  s0 -> s3 [81, 81] { R7493 += 1, R7449 += 1, R6436 += 1, R6437 += 1 };
  s0 -> s4 [81, 81] { R7493 += 1, R7449 += 1, R6436 += 1, R6437 += 1 };
  s0 -> s1 [82, 65535] { R7493 += 1, R7449 += 1, R6436 += 1, R6437 += 1 };
  s1 -> s1 [0, 80] { R7493 += 1, R7449 += 1, R6436 += 1, R6437 += 1 };
  s1 -> s1 [0, 65535] { R7493 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [81, 81] { R7493 += 1, R7449 += 1, R6436 += 1, R6437 += 1 };
  s1 -> s4 [81, 81] { R7493 += 1, R7449 += 1, R6436 += 1, R6437 += 1 };
  s1 -> s1 [82, 65535] { R7493 += 1, R7449 += 1, R6436 += 1, R6437 += 1 };
  s2 -> s1 [0, 80] { R7493 += 1, R7449 += 1, R6436 += 1, R6437 += 1 };
  s2 -> s2 [0, 65535] { R7493 += 1, R7448 += 1, R7449 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [81, 81] { R7493 += 1, R7449 += 1, R6436 += 1, R6437 += 1 };
  s2 -> s4 [81, 81] { R7493 += 1, R7449 += 1, R6436 += 1, R6437 += 1 };
  s2 -> s1 [82, 65535] { R7493 += 1, R7449 += 1, R6436 += 1, R6437 += 1 };
  s3 -> s3 [0, 65535] { R7493 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R7493 += 1, R7449 += 1, R6436 += 1, R6437 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R7493 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7493 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 80] { R7495 += 1, R7451 += 1, R7285 += 1, R7286 += 1 };
  s0 -> s2 [0, 80] { R7495 += 1, R7451 += 1, R7284 += 1, R7285 += 1 };
  s0 -> s0 [0, 65535] { R7494 += 1, R7495 += 1 };
  s0 -> s3 [0, 65535] { R7495 += 1, R7450 += 1, R7451 += 1 };
  s0 -> s4 [81, 81] { R7495 += 1, R7451 += 1, R7285 += 1, R7286 += 1 };
  s0 -> s5 [81, 81] { R7495 += 1, R7451 += 1, R7285 += 1, R7286 += 1 };
  s0 -> s6 [81, 81] { R7495 += 1, R7451 += 1, R7284 += 1, R7285 += 1 };
  s0 -> s7 [81, 81] { R7495 += 1, R7451 += 1, R7284 += 1, R7285 += 1 };
  s0 -> s1 [82, 65535] { R7495 += 1, R7451 += 1, R7285 += 1, R7286 += 1 };
  s0 -> s2 [82, 65535] { R7495 += 1, R7451 += 1, R7284 += 1, R7285 += 1 };
  s1 -> s11 [0, 80] { R7495 += 1, R7451 += 1 };
  s1 -> s1 [0, 80] { R7495 += 1, R7451 += 1, R7285 += 1, R7286 += 1 };
  s1 -> s8 [81, 81] { R7495 += 1, R7451 += 1 };
  s1 -> s4 [81, 81] { R7495 += 1, R7451 += 1, R7285 += 1, R7286 += 1 };
  s1 -> s5 [81, 81] { R7495 += 1, R7451 += 1, R7285 += 1, R7286 += 1 };
  s1 -> s12 [81, 81] { R7495 += 1, R7451 += 1 };
  s1 -> s11 [82, 65535] { R7495 += 1, R7451 += 1 };
  s1 -> s1 [82, 65535] { R7495 += 1, R7451 += 1, R7285 += 1, R7286 += 1 };
  s2 -> s1 [0, 80] { R7495 += 1, R7451 += 1, R7285 += 1, R7286 += 1 };
  s2 -> s2 [0, 80] { R7495 += 1, R7451 += 1, R7284 += 1, R7285 += 1 };
  s2 -> s4 [81, 81] { R7495 += 1, R7451 += 1, R7285 += 1, R7286 += 1 };
  s2 -> s5 [81, 81] { R7495 += 1, R7451 += 1, R7285 += 1, R7286 += 1 };
  s2 -> s6 [81, 81] { R7495 += 1, R7451 += 1, R7284 += 1, R7285 += 1 };
  s2 -> s7 [81, 81] { R7495 += 1, R7451 += 1, R7284 += 1, R7285 += 1 };
  s2 -> s1 [82, 65535] { R7495 += 1, R7451 += 1, R7285 += 1, R7286 += 1 };
  s2 -> s2 [82, 65535] { R7495 += 1, R7451 += 1, R7284 += 1, R7285 += 1 };
  s3 -> s1 [0, 80] { R7495 += 1, R7451 += 1, R7285 += 1, R7286 += 1 };
  s3 -> s2 [0, 80] { R7495 += 1, R7451 += 1, R7284 += 1, R7285 += 1 };
  s3 -> s3 [0, 65535] { R7495 += 1, R7450 += 1, R7451 += 1 };
  s3 -> s4 [81, 81] { R7495 += 1, R7451 += 1, R7285 += 1, R7286 += 1 };
  s3 -> s5 [81, 81] { R7495 += 1, R7451 += 1, R7285 += 1, R7286 += 1 };
  s3 -> s6 [81, 81] { R7495 += 1, R7451 += 1, R7284 += 1, R7285 += 1 };
  s3 -> s7 [81, 81] { R7495 += 1, R7451 += 1, R7284 += 1, R7285 += 1 };
  s3 -> s1 [82, 65535] { R7495 += 1, R7451 += 1, R7285 += 1, R7286 += 1 };
  s3 -> s2 [82, 65535] { R7495 += 1, R7451 += 1, R7284 += 1, R7285 += 1 };
  s4 -> s8 [0, 65535] { R7495 += 1, R7451 += 1 };
  s4 -> s4 [0, 65535] { R7495 += 1, R7451 += 1, R7285 += 1, R7286 += 1 };
  s6 -> s4 [0, 65535] { R7495 += 1, R7451 += 1, R7285 += 1, R7286 += 1 };
  s6 -> s6 [0, 65535] { R7495 += 1, R7451 += 1, R7284 += 1, R7285 += 1 };
  s8 -> s9 [0, 65535] { R7495 += 1 };
  s8 -> s8 [0, 65535] { R7495 += 1, R7451 += 1 };
  s8 -> s10 [0, 65535];
  s9 -> s9 [0, 65535] { R7495 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s11 [0, 80] { R7495 += 1, R7451 += 1 };
  s11 -> s11 [0, 65535] { R7495 += 1 };
  s11 -> s10 [0, 65535];
  s11 -> s8 [81, 81] { R7495 += 1, R7451 += 1 };
  s11 -> s12 [81, 81] { R7495 += 1, R7451 += 1 };
  s11 -> s11 [82, 65535] { R7495 += 1, R7451 += 1 };
  s12 -> s10 [0, 65535];
  s12 -> s12 [0, 65535] { R7495 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 80] { R7497 += 1, R7453 += 1, R7395 += 1 };
  s0 -> s2 [0, 80] { R7497 += 1, R7453 += 1, R7394 += 1, R7395 += 1 };
  s0 -> s0 [0, 65535] { R7496 += 1, R7497 += 1 };
  s0 -> s3 [0, 65535] { R7497 += 1, R7452 += 1, R7453 += 1 };
  s0 -> s4 [81, 81] { R7497 += 1, R7453 += 1, R7394 += 1, R7395 += 1 };
  s0 -> s5 [81, 81] { R7497 += 1, R7453 += 1, R7395 += 1 };
  s0 -> s6 [81, 81] { R7497 += 1, R7453 += 1, R7395 += 1 };
  s0 -> s7 [81, 81] { R7497 += 1, R7453 += 1, R7394 += 1, R7395 += 1 };
  s0 -> s2 [82, 65535] { R7497 += 1, R7453 += 1, R7394 += 1, R7395 += 1 };
  s0 -> s1 [89, 65535] { R7497 += 1, R7453 += 1, R7395 += 1 };
  s1 -> s1 [0, 80] { R7497 += 1, R7453 += 1, R7395 += 1 };
  s1 -> s1 [0, 65535] { R7497 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s5 [81, 81] { R7497 += 1, R7453 += 1 };
  s1 -> s6 [81, 81] { R7497 += 1, R7453 += 1 };
  s1 -> s1 [82, 65535] { R7497 += 1, R7453 += 1 };
  s1 -> s1 [89, 65535] { R7497 += 1, R7453 += 1, R7395 += 1 };
  s2 -> s1 [0, 80] { R7497 += 1, R7453 += 1, R7395 += 1 };
  s2 -> s2 [0, 80] { R7497 += 1, R7453 += 1, R7394 += 1, R7395 += 1 };
  s2 -> s4 [81, 81] { R7497 += 1, R7453 += 1, R7394 += 1, R7395 += 1 };
  s2 -> s5 [81, 81] { R7497 += 1, R7453 += 1, R7395 += 1 };
  s2 -> s6 [81, 81] { R7497 += 1, R7453 += 1, R7395 += 1 };
  s2 -> s7 [81, 81] { R7497 += 1, R7453 += 1, R7394 += 1, R7395 += 1 };
  s2 -> s2 [82, 65535] { R7497 += 1, R7453 += 1, R7394 += 1, R7395 += 1 };
  s2 -> s1 [89, 65535] { R7497 += 1, R7453 += 1, R7395 += 1 };
  s3 -> s1 [0, 80] { R7497 += 1, R7453 += 1, R7395 += 1 };
  s3 -> s2 [0, 80] { R7497 += 1, R7453 += 1, R7394 += 1, R7395 += 1 };
  s3 -> s3 [0, 65535] { R7497 += 1, R7452 += 1, R7453 += 1 };
  s3 -> s4 [81, 81] { R7497 += 1, R7453 += 1, R7394 += 1, R7395 += 1 };
  s3 -> s5 [81, 81] { R7497 += 1, R7453 += 1, R7395 += 1 };
  s3 -> s6 [81, 81] { R7497 += 1, R7453 += 1, R7395 += 1 };
  s3 -> s7 [81, 81] { R7497 += 1, R7453 += 1, R7394 += 1, R7395 += 1 };
  s3 -> s2 [82, 65535] { R7497 += 1, R7453 += 1, R7394 += 1, R7395 += 1 };
  s3 -> s1 [89, 65535] { R7497 += 1, R7453 += 1, R7395 += 1 };
  s5 -> s5 [0, 81] { R7497 += 1, R7453 += 1, R7395 += 1 };
  s5 -> s5 [0, 65535] { R7497 += 1, R7453 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s9 [0, 65535] { R7497 += 1 };
  s5 -> s5 [89, 65535] { R7497 += 1, R7453 += 1, R7395 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R7497 += 1 };
  s7 -> s5 [0, 81] { R7497 += 1, R7453 += 1, R7395 += 1 };
  s7 -> s7 [0, 65535] { R7497 += 1, R7453 += 1, R7394 += 1, R7395 += 1 };
  s7 -> s5 [89, 65535] { R7497 += 1, R7453 += 1, R7395 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R7497 += 1 };
  accepting s8, s5, s9, s6, s1;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [113, 113];
  accepting s1;
};
};
synchronised {  // Automata constraining c1
automaton c1_0 {
  init s0;
  s0 -> s1 [114, 114];
  accepting s1;
};
};
constraint R1 = R7413 && R2 = R7497 && R20 - R7497 = -1 && R21 = R7497 && R22 - R7497 = -1 && R23 = R7497 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R6439 + -1*R6437 - R53 = 0 && R52 + R6438 + R6436 = 0 && R7412 = 0 && R7438 = 0 && R7439 = 0 && R7446 = 0 && R7447 = 0 && R7450 = 0 && R7451 = 0 && R7452 = 0 && R7453 = 0 && R7454 = 0 && R7455 = R7497 && R7456 = 0 && R7457 = R7497 && R7458 = 0 && R7459 = R7497 && R7460 = 0 && R7461 = R7497 && R7462 = 0 && R7463 = R7497 && R7464 = 0 && R7465 = R7497 && R7466 = 0 && R7467 = R7497 && R7468 = 0 && R7469 = R7497 && R7470 = 0 && R7471 = R7497 && R7472 = 0 && R7473 = R7497 && R7474 = 0 && R7475 = R7497 && R7476 = 0 && R7477 = R7497 && R7478 = 0 && R7479 = R7497 && R7480 = 0 && R7481 = R7497 && R7482 = 0 && R7483 = R7497 && R7484 = 0 && R7485 = R7497 && R7486 = 0 && R7487 = R7497 && R7488 = 0 && R7489 = R7497 && R7490 = 0 && R7491 = R7497 && R7492 = 0 && R7493 = R7497 && R7494 = 0 && R7495 = R7497 && R7496 = 0 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R6439 + -1*R6437 - R53 < 1 && -1 < R7413 && 0 < R7497 && (R48 + R3895 + R3892 != 0 || ((R42 + R72 + R70 != 0 || R43 + R73 + R71 + -1*R6439 + -1*R6437 - R53 = 0 || R53 + R6439 + R6437 < 1) && (R42 + R72 + R70 = 0 || R53 + R6439 + R6437 < 1))) && (R48 + R3895 + R3892 != 0 || ((R46 + R3893 + R3890 != 0 || R47 + R3894 + R3891 + -1*R6439 + -1*R6437 - R53 = 0 || R53 + R6439 + R6437 < 1) && (R46 + R3893 + R3890 = 0 || R53 + R6439 + R6437 < 1))) && (R7398 != 0 || R7399 = R7413 || (R17 = 0 && R7413 = 0)) && (R7400 != 0 || R7401 = R7413 || (R17 = 0 && R7413 = 0)) && (R7402 != 0 || R7403 = R7413 || (R17 = 0 && R7413 = 0)) && (R7404 != 0 || R7405 = R7413 || (R17 = 0 && R7413 = 0)) && (R7406 != 0 || R7407 = R7413 || (R17 = 0 && R7413 = 0)) && (R7408 != 0 || R7409 = R7413 || (R17 = 0 && R7413 = 0)) && (R7410 != 0 || R7411 = R7413 || (R17 = 0 && R7413 = 0)) && (R7414 != 0 || R7413 = R7415 || (R17 = 0 && R7413 = 0)) && (R7416 != 0 || R7413 = R7417 || (R17 = 0 && R7413 = 0)) && (R18 = 0 || (R7436 = 0 && R7437 = 0)) && (R18 = 0 || (R7440 = 0 && R7441 = 0)) && (R18 = 0 || (R7442 = 0 && R7443 = 0)) && (R18 = 0 || (R7444 = 0 && R7445 = 0)) && (R18 = 0 || (R7448 = 0 && R7449 = 0)) && (R19 = 0 || (R7418 = 0 && R7419 = 0)) && (R19 = 0 || (R7420 = 0 && R7421 = 0)) && (R19 = 0 || (R7422 = 0 && R7423 = 0)) && (R19 = 0 || (R7424 = 0 && R7425 = 0)) && (R19 = 0 || (R7426 = 0 && R7427 = 0)) && (R19 = 0 || (R7428 = 0 && R7429 = 0)) && (R19 = 0 || (R7430 = 0 && R7431 = 0)) && (R19 = 0 || (R7432 = 0 && R7433 = 0)) && (R19 = 0 || (R7434 = 0 && R7435 = 0)) && (R48 + R3895 + R3892 = 0 || (R42 + R72 + R70 = 0 && R43 + R73 + R71 + -1*R6439 + -1*R6437 - R53 = 0)) && (R48 + R3895 + R3892 = 0 || (R46 + R3893 + R3890 = 0 && R47 + R3894 + R3891 + -1*R6439 + -1*R6437 - R53 = 0)) && (R58 + R7289 + R7286 = 0 || (R56 + R7287 + R7284 = 0 && R57 + R7288 + R7285 = 0)) && (R58 + R7289 + R7286 = 0 || (R62 + R7396 + R7394 = 0 && R63 + R7397 + R7395 = 0)) && (R7398 = 0 || (R17 = 0 && R7413 = 0)) && (R7400 = 0 || (R17 = 0 && R7413 = 0)) && (R7402 = 0 || (R17 = 0 && R7413 = 0)) && (R7404 = 0 || (R17 = 0 && R7413 = 0)) && (R7406 = 0 || (R17 = 0 && R7413 = 0)) && (R7408 = 0 || (R17 = 0 && R7413 = 0)) && (R7410 = 0 || (R17 = 0 && R7413 = 0)) && (R7414 = 0 || (R17 = 0 && R7413 = 0)) && (R7416 = 0 || (R17 = 0 && R7413 = 0));
// End of Parikh automata intersection problem
