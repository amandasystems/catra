// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R12, R143, R144, R145, R146, R147, R148, R149, R150, R151, R152, R153, R154, R155, R156, R157, R158, R159, R16, R160, R161, R162, R163, R164, R165, R166, R167, R168, R169, R17, R170, R171, R2, R220, R221, R222, R223, R224, R225, R226, R227, R228, R229, R230, R231, R232, R233, R234, R235, R236, R237, R238, R239, R240, R241, R242, R243, R244, R245, R246, R247, R248, R249, R250, R251, R252, R253, R254, R255, R256, R257, R258, R259, R260, R261, R262, R263, R264, R265, R266, R267, R3, R4, R5, R6, R7, R8, R9;
synchronised {  // Automata constraining P67
automaton P67_0 {
  init s0;
  s0 -> s1 [121, 121];
  accepting s1;
};
};
synchronised {  // Automata constraining value1
automaton value1_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s1 [44, 44];
  s0 -> s0 [45, 65535];
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value1_2 {
  init s0;
  s0 -> s1 [0, 43] { R17 += 1 };
  s0 -> s0 [0, 65535] { R16 += 1, R17 += 1 };
  s0 -> s2 [44, 44];
  s0 -> s1 [45, 65535] { R17 += 1 };
  s1 -> s1 [0, 43] { R17 += 1 };
  s1 -> s2 [44, 44];
  s1 -> s1 [45, 65535] { R17 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value1_3 {
  init s0;
  s0 -> s1 [0, 43] { R167 += 1 };
  s0 -> s0 [0, 65535] { R166 += 1, R167 += 1 };
  s0 -> s1 [45, 65535] { R167 += 1 };
  s1 -> s1 [0, 43] { R167 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [45, 65535] { R167 += 1 };
  accepting s0, s1;
};
automaton value1_4 {
  init s0;
  s0 -> s1 [0, 65535] { R169 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R168 += 1, R169 += 1 };
  s1 -> s1 [0, 65535] { R169 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_5 {
  init s0;
  s0 -> s1 [0, 60] { R171 += 1 };
  s0 -> s0 [0, 65535] { R170 += 1, R171 += 1 };
  s0 -> s2 [0, 65535] { R171 += 1, R10 += 1 };
  s0 -> s3 [61, 61] { R171 += 1 };
  s0 -> s1 [62, 65535] { R171 += 1 };
  s1 -> s1 [0, 60] { R171 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [61, 61] { R171 += 1 };
  s1 -> s1 [62, 65535] { R171 += 1 };
  s2 -> s1 [0, 60] { R171 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R171 += 1, R10 += 1 };
  s2 -> s3 [61, 61] { R171 += 1 };
  s2 -> s1 [62, 65535] { R171 += 1 };
  s3 -> s3 [0, 65535] { R171 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value1_6 {
  init s0;
  s0 -> s1 [0, 64] { R243 += 1 };
  s0 -> s0 [0, 65535] { R242 += 1, R243 += 1 };
  s0 -> s2 [89, 89] { R243 += 1 };
  s0 -> s1 [90, 65535] { R243 += 1 };
  s1 -> s1 [0, 64] { R243 += 1 };
  s1 -> s2 [89, 89] { R243 += 1 };
  s1 -> s1 [90, 65535] { R243 += 1 };
  s2 -> s2 [0, 64] { R243 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [89, 65535] { R243 += 1 };
  accepting s2;
};
automaton value1_7 {
  init s0;
  s0 -> s0 [0, 65535] { R244 += 1, R245 += 1 };
  s0 -> s1 [0, 65535] { R245 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R245 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_8 {
  init s0;
  s0 -> s1 [0, 60] { R247 += 1 };
  s0 -> s2 [0, 65535] { R247 += 1, R11 += 1 };
  s0 -> s0 [0, 65535] { R246 += 1, R247 += 1 };
  s0 -> s3 [61, 61] { R247 += 1 };
  s0 -> s1 [62, 65535] { R247 += 1 };
  s1 -> s1 [0, 60] { R247 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [61, 61] { R247 += 1 };
  s1 -> s1 [62, 65535] { R247 += 1 };
  s2 -> s1 [0, 60] { R247 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R247 += 1, R11 += 1 };
  s2 -> s3 [61, 61] { R247 += 1 };
  s2 -> s1 [62, 65535] { R247 += 1 };
  s3 -> s3 [0, 65535] { R247 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value1_9 {
  init s0;
  s0 -> s1 [0, 88] { R249 += 1 };
  s0 -> s0 [0, 65535] { R248 += 1, R249 += 1 };
  s0 -> s2 [0, 65535] { R249 += 1, R12 += 1 };
  s0 -> s3 [89, 89] { R249 += 1 };
  s0 -> s1 [90, 65535] { R249 += 1 };
  s1 -> s1 [0, 88] { R249 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [89, 89] { R249 += 1 };
  s1 -> s1 [90, 65535] { R249 += 1 };
  s2 -> s1 [0, 88] { R249 += 1 };
  s2 -> s2 [0, 65535] { R249 += 1, R12 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [89, 89] { R249 += 1 };
  s2 -> s1 [90, 65535] { R249 += 1 };
  s3 -> s3 [0, 65535] { R249 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value1_10 {
  init s0;
  s0 -> s1 [0, 8] { R251 += 1, R155 += 1 };
  s0 -> s2 [0, 65535] { R251 += 1, R154 += 1, R155 += 1 };
  s0 -> s0 [0, 65535] { R250 += 1, R251 += 1 };
  s0 -> s3 [9, 13] { R251 += 1, R155 += 1 };
  s0 -> s1 [14, 31] { R251 += 1, R155 += 1 };
  s0 -> s3 [32, 32] { R251 += 1, R155 += 1 };
  s0 -> s1 [33, 65535] { R251 += 1, R155 += 1 };
  s1 -> s1 [0, 65535] { R251 += 1, R155 += 1 };
  s1 -> s5 [0, 65535] { R251 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R251 += 1, R155 += 1 };
  s2 -> s2 [0, 65535] { R251 += 1, R154 += 1, R155 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R251 += 1, R155 += 1 };
  s2 -> s1 [14, 31] { R251 += 1, R155 += 1 };
  s2 -> s3 [32, 32] { R251 += 1, R155 += 1 };
  s2 -> s1 [33, 65535] { R251 += 1, R155 += 1 };
  s3 -> s1 [0, 65535] { R251 += 1, R155 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R251 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value1_11 {
  init s0;
  s0 -> s1 [0, 65535] { R253 += 1, R157 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R252 += 1, R253 += 1 };
  s0 -> s2 [0, 65535] { R253 += 1, R156 += 1, R157 += 1 };
  s1 -> s4 [0, 65535] { R253 += 1 };
  s1 -> s1 [0, 65535] { R253 += 1, R157 += 1, R7 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R253 += 1, R157 += 1, R7 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R253 += 1, R156 += 1, R157 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R253 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_12 {
  init s0;
  s0 -> s1 [0, 8] { R255 += 1, R159 += 1 };
  s0 -> s2 [0, 65535] { R255 += 1, R158 += 1, R159 += 1 };
  s0 -> s0 [0, 65535] { R254 += 1, R255 += 1 };
  s0 -> s3 [9, 13] { R255 += 1, R159 += 1 };
  s0 -> s1 [14, 31] { R255 += 1, R159 += 1 };
  s0 -> s3 [32, 32] { R255 += 1, R159 += 1 };
  s0 -> s1 [33, 65535] { R255 += 1, R159 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R255 += 1, R159 += 1 };
  s1 -> s5 [0, 65535] { R255 += 1 };
  s2 -> s1 [0, 8] { R255 += 1, R159 += 1 };
  s2 -> s2 [0, 65535] { R255 += 1, R158 += 1, R159 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R255 += 1, R159 += 1 };
  s2 -> s1 [14, 31] { R255 += 1, R159 += 1 };
  s2 -> s3 [32, 32] { R255 += 1, R159 += 1 };
  s2 -> s1 [33, 65535] { R255 += 1, R159 += 1 };
  s3 -> s1 [0, 65535] { R255 += 1, R159 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R255 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value1_13 {
  init s0;
  s0 -> s0 [0, 65535] { R256 += 1, R257 += 1 };
  s0 -> s1 [0, 65535] { R257 += 1, R161 += 1, R8 += 1 };
  s0 -> s2 [0, 65535] { R257 += 1, R160 += 1, R161 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R257 += 1 };
  s1 -> s1 [0, 65535] { R257 += 1, R161 += 1, R8 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R257 += 1, R161 += 1, R8 += 1 };
  s2 -> s2 [0, 65535] { R257 += 1, R160 += 1, R161 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R257 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_14 {
  init s0;
  s0 -> s1 [0, 88] { R259 += 1, R221 += 1 };
  s0 -> s0 [0, 65535] { R258 += 1, R259 += 1 };
  s0 -> s2 [0, 65535] { R259 += 1, R220 += 1, R221 += 1 };
  s0 -> s1 [90, 65535] { R259 += 1, R221 += 1 };
  s1 -> s1 [0, 88] { R259 += 1, R221 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R259 += 1 };
  s1 -> s1 [90, 65535] { R259 += 1, R221 += 1 };
  s2 -> s1 [0, 88] { R259 += 1, R221 += 1 };
  s2 -> s2 [0, 65535] { R259 += 1, R220 += 1, R221 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [90, 65535] { R259 += 1, R221 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value1_15 {
  init s0;
  s0 -> s1 [0, 65535] { R261 += 1, R223 += 1, R144 += 1 };
  s0 -> s0 [0, 65535] { R260 += 1, R261 += 1 };
  s0 -> s2 [0, 65535] { R261 += 1, R222 += 1, R223 += 1 };
  s1 -> s1 [0, 65535] { R261 += 1, R223 += 1, R144 += 1 };
  s1 -> s4 [0, 65535] { R261 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R261 += 1, R223 += 1, R144 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R261 += 1, R222 += 1, R223 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R261 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_16 {
  init s0;
  s0 -> s1 [0, 65535] { R263 += 1, R225 += 1 };
  s0 -> s0 [0, 65535] { R262 += 1, R263 += 1 };
  s0 -> s2 [0, 65535] { R263 += 1, R224 += 1, R225 += 1 };
  s1 -> s1 [0, 65535] { R263 += 1, R225 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R263 += 1 };
  s2 -> s1 [0, 65535] { R263 += 1, R225 += 1 };
  s2 -> s2 [0, 65535] { R263 += 1, R224 += 1, R225 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R263 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_17 {
  init s0;
  s0 -> s1 [0, 65535] { R265 += 1, R239 += 1, R145 += 1 };
  s0 -> s2 [0, 65535] { R265 += 1, R238 += 1, R239 += 1 };
  s0 -> s0 [0, 65535] { R264 += 1, R265 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R265 += 1 };
  s1 -> s1 [0, 65535] { R265 += 1, R239 += 1, R145 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R265 += 1, R239 += 1, R145 += 1 };
  s2 -> s2 [0, 65535] { R265 += 1, R238 += 1, R239 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R265 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_18 {
  init s0;
  s0 -> s1 [0, 88] { R267 += 1, R241 += 1 };
  s0 -> s2 [0, 65535] { R267 += 1, R240 += 1, R241 += 1 };
  s0 -> s0 [0, 65535] { R266 += 1, R267 += 1 };
  s0 -> s3 [89, 89] { R267 += 1, R241 += 1 };
  s0 -> s4 [89, 89] { R267 += 1, R241 += 1 };
  s0 -> s5 [90, 90] { R267 += 1, R241 += 1 };
  s0 -> s1 [91, 65535] { R267 += 1, R241 += 1 };
  s1 -> s1 [0, 88] { R267 += 1, R241 += 1 };
  s1 -> s3 [89, 89] { R267 += 1, R241 += 1 };
  s1 -> s4 [89, 89] { R267 += 1, R241 += 1 };
  s1 -> s5 [90, 90] { R267 += 1, R241 += 1 };
  s1 -> s1 [91, 65535] { R267 += 1, R241 += 1 };
  s2 -> s1 [0, 88] { R267 += 1, R241 += 1 };
  s2 -> s2 [0, 65535] { R267 += 1, R240 += 1, R241 += 1 };
  s2 -> s3 [89, 89] { R267 += 1, R241 += 1 };
  s2 -> s4 [89, 89] { R267 += 1, R241 += 1 };
  s2 -> s5 [90, 90] { R267 += 1, R241 += 1 };
  s2 -> s1 [91, 65535] { R267 += 1, R241 += 1 };
  s4 -> s4 [0, 89] { R267 += 1, R241 += 1 };
  s4 -> s7 [90, 90] { R267 += 1, R241 += 1 };
  s4 -> s4 [91, 65535] { R267 += 1, R241 += 1 };
  s5 -> s5 [0, 88] { R267 += 1, R241 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R267 += 1 };
  s5 -> s7 [89, 89] { R267 += 1, R241 += 1 };
  s5 -> s8 [89, 89] { R267 += 1, R241 += 1 };
  s5 -> s5 [90, 65535] { R267 += 1, R241 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R267 += 1, R241 += 1 };
  s7 -> s9 [0, 65535] { R267 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R267 += 1 };
  s9 -> s6 [0, 65535];
  s9 -> s9 [0, 65535] { R267 += 1 };
  accepting s8, s5, s9, s6, s7;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R143 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s0 [0, 65535] { R162 += 1, R163 += 1 };
  s0 -> s1 [32, 32] { R163 += 1 };
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 65535] { R165 += 1, R9 += 1 };
  s0 -> s0 [0, 65535] { R164 += 1, R165 += 1 };
  s1 -> s1 [0, 65535] { R165 += 1, R9 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 64] { R227 += 1 };
  s0 -> s0 [0, 65535] { R226 += 1, R227 += 1 };
  s0 -> s1 [91, 65535] { R227 += 1 };
  s1 -> s1 [0, 64] { R227 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [91, 65535] { R227 += 1 };
  accepting s0, s1;
};
automaton value2_6 {
  init s0;
  s0 -> s0 [0, 65535] { R228 += 1, R229 += 1 };
  s0 -> s1 [0, 65535] { R229 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R229 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 8] { R231 += 1, R147 += 1 };
  s0 -> s2 [0, 65535] { R231 += 1, R146 += 1, R147 += 1 };
  s0 -> s0 [0, 65535] { R230 += 1, R231 += 1 };
  s0 -> s3 [9, 13] { R231 += 1, R147 += 1 };
  s0 -> s1 [14, 31] { R231 += 1, R147 += 1 };
  s0 -> s3 [32, 32] { R231 += 1, R147 += 1 };
  s0 -> s1 [33, 65535] { R231 += 1, R147 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R231 += 1, R147 += 1 };
  s1 -> s5 [0, 65535] { R231 += 1 };
  s2 -> s1 [0, 8] { R231 += 1, R147 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R231 += 1, R146 += 1, R147 += 1 };
  s2 -> s3 [9, 13] { R231 += 1, R147 += 1 };
  s2 -> s1 [14, 31] { R231 += 1, R147 += 1 };
  s2 -> s3 [32, 32] { R231 += 1, R147 += 1 };
  s2 -> s1 [33, 65535] { R231 += 1, R147 += 1 };
  s3 -> s1 [0, 65535] { R231 += 1, R147 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R231 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R233 += 1, R148 += 1, R149 += 1 };
  s0 -> s0 [0, 65535] { R232 += 1, R233 += 1 };
  s0 -> s2 [0, 65535] { R233 += 1, R149 += 1, R5 += 1 };
  s1 -> s1 [0, 65535] { R233 += 1, R148 += 1, R149 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R233 += 1, R149 += 1, R5 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R233 += 1 };
  s2 -> s2 [0, 65535] { R233 += 1, R149 += 1, R5 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R233 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 8] { R235 += 1, R151 += 1 };
  s0 -> s0 [0, 65535] { R234 += 1, R235 += 1 };
  s0 -> s2 [0, 65535] { R235 += 1, R150 += 1, R151 += 1 };
  s0 -> s3 [9, 13] { R235 += 1, R151 += 1 };
  s0 -> s1 [14, 31] { R235 += 1, R151 += 1 };
  s0 -> s3 [32, 32] { R235 += 1, R151 += 1 };
  s0 -> s1 [33, 65535] { R235 += 1, R151 += 1 };
  s1 -> s5 [0, 65535] { R235 += 1 };
  s1 -> s1 [0, 65535] { R235 += 1, R151 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R235 += 1, R151 += 1 };
  s2 -> s2 [0, 65535] { R235 += 1, R150 += 1, R151 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R235 += 1, R151 += 1 };
  s2 -> s1 [14, 31] { R235 += 1, R151 += 1 };
  s2 -> s3 [32, 32] { R235 += 1, R151 += 1 };
  s2 -> s1 [33, 65535] { R235 += 1, R151 += 1 };
  s3 -> s1 [0, 65535] { R235 += 1, R151 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R235 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 65535] { R237 += 1, R153 += 1, R6 += 1 };
  s0 -> s0 [0, 65535] { R236 += 1, R237 += 1 };
  s0 -> s2 [0, 65535] { R237 += 1, R152 += 1, R153 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R237 += 1 };
  s1 -> s1 [0, 65535] { R237 += 1, R153 += 1, R6 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R237 += 1, R153 += 1, R6 += 1 };
  s2 -> s2 [0, 65535] { R237 += 1, R152 += 1, R153 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R237 += 1 };
  accepting s3, s4, s2, s1, s0;
};
};
constraint R2 = R225 && R3 = R171 && R4 = R237 && R16 = 0 && R17 = R267 && R154 - R225 = -1 && R155 = R225 && R156 - R225 = -1 && R157 = R225 && R158 = 0 && R159 = 1 && R160 = 0 && R161 = 1 && R162 = 0 && R163 = 1 && R164 = 0 && R165 = 1 && R166 - R267 = 1 && R167 = R171 && R168 - R267 = 1 && R169 = R171 && R170 - R267 = 1 && R220 = 0 && R221 = R225 && R222 = 0 && R223 = R225 && R224 = 0 && R226 = 1 && R227 = R237 && R228 = 1 && R229 = R237 && R230 = 1 && R231 = R237 && R232 = 1 && R233 = R237 && R234 = 1 && R235 = R237 && R236 = 1 && R240 = 0 && R241 = 0 && R242 = 0 && R243 = R267 && R244 = 0 && R245 = R267 && R246 = 0 && R247 = R267 && R248 = 0 && R249 = R267 && R250 = 0 && R251 = R267 && R252 = 0 && R253 = R267 && R254 = 0 && R255 = R267 && R256 = 0 && R257 = R267 && R258 = 0 && R259 = R267 && R260 = 0 && R261 = R267 && R262 = 0 && R263 = R267 && R264 = 0 && R265 = R267 && R266 = 0 && R0 != 0 && R1 != 0 && R10 < 1 && R11 < 1 && R12 < 1 && R143 < 1 && R267 < R171 && 0 < R225 && 0 < R237 && -1 < R267 && (R5 != 0 || ((R1 != R147 || R146 - R147 = -1 || R147 < 0) && (R1 = R147 || R1 < 1))) && (R5 != 0 || ((R1 != R149 || R148 - R149 = -1 || R149 < 0) && (R1 = R149 || R1 < 1))) && (R150 != 0 || ((R6 != 0 || ((R1 != R151 || R151 = 1 || R151 < 0) && (R1 = R151 || R151 = 1 || R1 < 1))) && (R6 = 0 || ((R1 != R151 || R151 = 1 || R151 < 0) && (R151 != 1 || -1 < R1) && (R1 = R151 || R151 = 1))))) && (R152 != 0 || ((R6 != 0 || ((R1 != R153 || R153 = 1 || R153 < 0) && (R1 = R153 || R153 = 1 || R1 < 1))) && (R6 = 0 || ((R1 != R153 || R153 = 1 || R153 < 0) && (R153 != 1 || -1 < R1) && (R1 = R153 || R153 = 1))))) && (R5 = 0 || (R1 = R147 && R146 - R147 = -1)) && (R5 = 0 || (R1 = R149 && R148 - R149 = -1)) && (R145 = 0 || (R238 = 0 && R239 = 0)) && (R150 = 0 || (R6 = 0 && R1 < 0)) && (R152 = 0 || (R6 = 0 && R1 < 0));
// End of Parikh automata intersection problem
