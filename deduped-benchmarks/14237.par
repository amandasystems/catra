// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R11522, R11523, R11524, R11525, R11526, R11527, R11528, R11529, R11530, R11531, R12, R12802, R12803, R12804, R12805, R13228, R13229, R13230, R13231, R13232, R13233, R13234, R13235, R13236, R13237, R13238, R13239, R13240, R13241, R13242, R13243, R13244, R13245, R13246, R13247, R13248, R13249, R13250, R13251, R13252, R13253, R13254, R13255, R13256, R13257, R13258, R13259, R13260, R13261, R13262, R13263, R13264, R13265, R13266, R13267, R13268, R13269, R13270, R13271, R13272, R13273, R13274, R13275, R13276, R13277, R13278, R13279, R13280, R13281, R13282, R13283, R13284, R13285, R13286, R13287, R13288, R13289, R13290, R13291, R13292, R13293, R13294, R13295, R13296, R13297, R13298, R13299, R13300, R13301, R13302, R13303, R13304, R13305, R13306, R13307, R13308, R13309, R13310, R13311, R13312, R13313, R13314, R13315, R13316, R13317, R13318, R13319, R13320, R13321, R13322, R13323, R13324, R13325, R13326, R13327, R13328, R13329, R13330, R13331, R13332, R13333, R13334, R13335, R13336, R13337, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [81, 81];
  s0 -> s0 [82, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [81, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 80];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [81, 81];
  s0 -> s1 [82, 65535];
  s1 -> s1 [0, 80];
  s1 -> s2 [81, 81];
  s1 -> s1 [82, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s1 [0, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R25 += 1 };
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R13258 += 1, R13259 += 1 };
  s0 -> s1 [0, 65535] { R13259 += 1, R19 += 1 };
  s1 -> s1 [0, 65535] { R13259 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 80] { R13261 += 1 };
  s0 -> s0 [0, 65535] { R13260 += 1, R13261 += 1 };
  s0 -> s2 [81, 81] { R13261 += 1 };
  s0 -> s3 [81, 81] { R13261 += 1 };
  s0 -> s1 [83, 65535] { R13261 += 1 };
  s1 -> s1 [0, 80] { R13261 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R13261 += 1 };
  s1 -> s3 [81, 81] { R13261 += 1 };
  s1 -> s1 [83, 65535] { R13261 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 81] { R13261 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [83, 65535] { R13261 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 80] { R13263 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R13262 += 1, R13263 += 1 };
  s0 -> s2 [81, 81] { R13263 += 1, R38 += 1 };
  s0 -> s3 [81, 81] { R13263 += 1, R38 += 1 };
  s0 -> s1 [82, 65535] { R13263 += 1, R38 += 1 };
  s1 -> s1 [0, 80] { R13263 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R13263 += 1, R38 += 1 };
  s1 -> s3 [81, 81] { R13263 += 1, R38 += 1 };
  s1 -> s1 [82, 65535] { R13263 += 1, R38 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R13263 += 1, R38 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 80] { R13265 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R13264 += 1, R13265 += 1 };
  s0 -> s2 [81, 81] { R13265 += 1, R40 += 1 };
  s0 -> s3 [81, 81] { R13265 += 1, R40 += 1 };
  s0 -> s1 [82, 65535] { R13265 += 1, R40 += 1 };
  s1 -> s1 [0, 80] { R13265 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R13265 += 1, R40 += 1 };
  s1 -> s3 [81, 81] { R13265 += 1, R40 += 1 };
  s1 -> s1 [82, 65535] { R13265 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R13265 += 1, R40 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 80] { R13267 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R13266 += 1, R13267 += 1 };
  s0 -> s2 [81, 81] { R13267 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [81, 81] { R13267 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [82, 65535] { R13267 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 80] { R13267 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R13267 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [81, 81] { R13267 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [82, 65535] { R13267 += 1, R42 += 1, R43 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R13267 += 1, R42 += 1, R43 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 80] { R13269 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R13268 += 1, R13269 += 1 };
  s0 -> s2 [81, 81] { R13269 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [81, 81] { R13269 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [82, 65535] { R13269 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 80] { R13269 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R13269 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [81, 81] { R13269 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [82, 65535] { R13269 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R13269 += 1, R46 += 1, R47 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 80] { R13271 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R13270 += 1, R13271 += 1 };
  s0 -> s2 [81, 81] { R13271 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [81, 81] { R13271 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [82, 65535] { R13271 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 80] { R13271 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R13271 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [81, 81] { R13271 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [82, 65535] { R13271 += 1, R52 += 1, R53 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R13271 += 1, R52 += 1, R53 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 80] { R13273 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R13272 += 1, R13273 += 1 };
  s0 -> s2 [81, 81] { R13273 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [81, 81] { R13273 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [82, 65535] { R13273 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 80] { R13273 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R13273 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [81, 81] { R13273 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [82, 65535] { R13273 += 1, R56 += 1, R57 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R13273 += 1, R56 += 1, R57 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 80] { R13275 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R13274 += 1, R13275 += 1 };
  s0 -> s2 [81, 81] { R13275 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [81, 81] { R13275 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [82, 65535] { R13275 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 80] { R13275 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R13275 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [81, 81] { R13275 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [82, 65535] { R13275 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R13275 += 1, R62 += 1, R63 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 80] { R13295 += 1 };
  s0 -> s0 [0, 65535] { R13294 += 1, R13295 += 1 };
  s0 -> s2 [81, 81] { R13295 += 1 };
  s0 -> s1 [82, 65535] { R13295 += 1 };
  s1 -> s1 [0, 80] { R13295 += 1 };
  s1 -> s2 [81, 81] { R13295 += 1 };
  s1 -> s1 [82, 65535] { R13295 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R13295 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R13297 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R13296 += 1, R13297 += 1 };
  s1 -> s1 [0, 65535] { R13297 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 80] { R13299 += 1 };
  s0 -> s0 [0, 65535] { R13298 += 1, R13299 += 1 };
  s0 -> s2 [0, 65535] { R13299 += 1, R8 += 1 };
  s0 -> s3 [81, 81] { R13299 += 1 };
  s0 -> s1 [82, 65535] { R13299 += 1 };
  s1 -> s1 [0, 80] { R13299 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [81, 81] { R13299 += 1 };
  s1 -> s1 [82, 65535] { R13299 += 1 };
  s2 -> s1 [0, 80] { R13299 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R13299 += 1, R8 += 1 };
  s2 -> s3 [81, 81] { R13299 += 1 };
  s2 -> s1 [82, 65535] { R13299 += 1 };
  s3 -> s3 [0, 65535] { R13299 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 80] { R13301 += 1, R13239 += 1 };
  s0 -> s2 [0, 65535] { R13301 += 1, R13238 += 1, R13239 += 1 };
  s0 -> s0 [0, 65535] { R13300 += 1, R13301 += 1 };
  s0 -> s1 [82, 65535] { R13301 += 1, R13239 += 1 };
  s1 -> s1 [0, 80] { R13301 += 1, R13239 += 1 };
  s1 -> s1 [0, 65535] { R13301 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [82, 65535] { R13301 += 1, R13239 += 1 };
  s2 -> s1 [0, 80] { R13301 += 1, R13239 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R13301 += 1, R13238 += 1, R13239 += 1 };
  s2 -> s1 [82, 65535] { R13301 += 1, R13239 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R13303 += 1, R13240 += 1, R13241 += 1 };
  s0 -> s0 [0, 65535] { R13302 += 1, R13303 += 1 };
  s0 -> s2 [0, 65535] { R13303 += 1, R13241 += 1, R17 += 1 };
  s1 -> s1 [0, 65535] { R13303 += 1, R13240 += 1, R13241 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R13303 += 1, R13241 += 1, R17 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R13303 += 1 };
  s2 -> s2 [0, 65535] { R13303 += 1, R13241 += 1, R17 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R13303 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 65535] { R13305 += 1, R13243 += 1 };
  s0 -> s0 [0, 65535] { R13304 += 1, R13305 += 1 };
  s0 -> s2 [0, 65535] { R13305 += 1, R13242 += 1, R13243 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R13305 += 1, R13243 += 1 };
  s1 -> s4 [0, 65535] { R13305 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R13305 += 1, R13243 += 1 };
  s2 -> s2 [0, 65535] { R13305 += 1, R13242 += 1, R13243 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R13305 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R13307 += 1, R13245 += 1, R67 += 1 };
  s0 -> s2 [0, 65535] { R13307 += 1, R13244 += 1, R13245 += 1 };
  s0 -> s0 [0, 65535] { R13306 += 1, R13307 += 1 };
  s1 -> s1 [0, 65535] { R13307 += 1, R13245 += 1, R67 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R13307 += 1 };
  s2 -> s1 [0, 65535] { R13307 += 1, R13245 += 1, R67 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R13307 += 1, R13244 += 1, R13245 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R13307 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 81] { R13309 += 1, R13247 += 1 };
  s0 -> s0 [0, 65535] { R13308 += 1, R13309 += 1 };
  s0 -> s2 [0, 65535] { R13309 += 1, R13247 += 1, R69 += 1 };
  s0 -> s3 [0, 65535] { R13309 += 1, R13246 += 1, R13247 += 1 };
  s0 -> s1 [83, 65535] { R13309 += 1, R13247 += 1 };
  s1 -> s1 [0, 81] { R13309 += 1, R13247 += 1 };
  s1 -> s1 [0, 65535] { R13309 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [83, 65535] { R13309 += 1, R13247 += 1 };
  s2 -> s1 [0, 81] { R13309 += 1, R13247 += 1 };
  s2 -> s5 [0, 65535] { R13309 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R13309 += 1, R13247 += 1, R69 += 1 };
  s2 -> s1 [83, 65535] { R13309 += 1, R13247 += 1 };
  s3 -> s1 [0, 81] { R13309 += 1, R13247 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R13309 += 1, R13247 += 1, R69 += 1 };
  s3 -> s3 [0, 65535] { R13309 += 1, R13246 += 1, R13247 += 1 };
  s3 -> s1 [83, 65535] { R13309 += 1, R13247 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R13309 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 81] { R13311 += 1, R13249 += 1, R11525 += 1 };
  s0 -> s0 [0, 65535] { R13310 += 1, R13311 += 1 };
  s0 -> s1 [0, 65535] { R13311 += 1, R13249 += 1 };
  s0 -> s2 [0, 65535] { R13311 += 1, R13248 += 1, R13249 += 1 };
  s0 -> s1 [83, 65535] { R13311 += 1, R13249 += 1, R11525 += 1 };
  s1 -> s1 [0, 81] { R13311 += 1, R13249 += 1, R11525 += 1 };
  s1 -> s1 [0, 65535] { R13311 += 1, R13249 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R13311 += 1 };
  s1 -> s1 [83, 65535] { R13311 += 1, R13249 += 1, R11525 += 1 };
  s2 -> s1 [0, 81] { R13311 += 1, R13249 += 1, R11525 += 1 };
  s2 -> s1 [0, 65535] { R13311 += 1, R13249 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R13311 += 1, R13248 += 1, R13249 += 1 };
  s2 -> s1 [83, 65535] { R13311 += 1, R13249 += 1, R11525 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R13311 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R13313 += 1, R13250 += 1, R13251 += 1 };
  s0 -> s2 [0, 65535] { R13313 += 1, R13251 += 1, R11529 += 1, R11530 += 1 };
  s0 -> s3 [0, 65535] { R13313 += 1, R13251 += 1, R11530 += 1, R11531 += 1 };
  s0 -> s0 [0, 65535] { R13312 += 1, R13313 += 1 };
  s1 -> s1 [0, 65535] { R13313 += 1, R13250 += 1, R13251 += 1 };
  s1 -> s2 [0, 65535] { R13313 += 1, R13251 += 1, R11529 += 1, R11530 += 1 };
  s1 -> s3 [0, 65535] { R13313 += 1, R13251 += 1, R11530 += 1, R11531 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R13313 += 1, R13251 += 1, R11529 += 1, R11530 += 1 };
  s2 -> s4 [0, 65535] { R13313 += 1 };
  s2 -> s3 [0, 65535] { R13313 += 1, R13251 += 1, R11530 += 1, R11531 += 1 };
  s2 -> s6 [0, 65535];
  s3 -> s4 [0, 65535] { R13313 += 1 };
  s3 -> s5 [0, 65535] { R13313 += 1, R13251 += 1 };
  s3 -> s3 [0, 65535] { R13313 += 1, R13251 += 1, R11530 += 1, R11531 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R13313 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s4 [0, 65535] { R13313 += 1 };
  s5 -> s5 [0, 65535] { R13313 += 1, R13251 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 82] { R13315 += 1, R13253 += 1, R12805 += 1 };
  s0 -> s2 [0, 65535] { R13315 += 1, R13252 += 1, R13253 += 1 };
  s0 -> s0 [0, 65535] { R13314 += 1, R13315 += 1 };
  s0 -> s3 [88, 88] { R13315 += 1, R13253 += 1, R12805 += 1 };
  s0 -> s1 [89, 65535] { R13315 += 1, R13253 += 1, R12805 += 1 };
  s1 -> s1 [0, 82] { R13315 += 1, R13253 += 1, R12805 += 1 };
  s1 -> s3 [88, 88] { R13315 += 1, R13253 += 1, R12805 += 1 };
  s1 -> s1 [89, 65535] { R13315 += 1, R13253 += 1, R12805 += 1 };
  s2 -> s1 [0, 82] { R13315 += 1, R13253 += 1, R12805 += 1 };
  s2 -> s2 [0, 65535] { R13315 += 1, R13252 += 1, R13253 += 1 };
  s2 -> s3 [88, 88] { R13315 += 1, R13253 += 1, R12805 += 1 };
  s2 -> s1 [89, 65535] { R13315 += 1, R13253 += 1, R12805 += 1 };
  s3 -> s3 [0, 82] { R13315 += 1, R13253 += 1, R12805 += 1 };
  s3 -> s4 [0, 65535] { R13315 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R13315 += 1, R13253 += 1 };
  s3 -> s3 [88, 65535] { R13315 += 1, R13253 += 1, R12805 += 1 };
  s4 -> s4 [0, 65535] { R13315 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R13317 += 1, R13255 += 1 };
  s0 -> s0 [0, 65535] { R13316 += 1, R13317 += 1 };
  s0 -> s2 [0, 65535] { R13317 += 1, R13255 += 1, R13232 += 1, R13233 += 1 };
  s0 -> s3 [0, 65535] { R13317 += 1, R13254 += 1, R13255 += 1 };
  s1 -> s5 [0, 65535] { R13317 += 1 };
  s1 -> s1 [0, 65535] { R13317 += 1, R13255 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R13317 += 1 };
  s2 -> s1 [0, 65535] { R13317 += 1, R13255 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R13317 += 1, R13255 += 1, R13232 += 1, R13233 += 1 };
  s3 -> s1 [0, 65535] { R13317 += 1, R13255 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R13317 += 1, R13255 += 1, R13232 += 1, R13233 += 1 };
  s3 -> s3 [0, 65535] { R13317 += 1, R13254 += 1, R13255 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R13317 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 81] { R13319 += 1, R13257 += 1, R13237 += 1 };
  s0 -> s2 [0, 65535] { R13319 += 1, R13256 += 1, R13257 += 1 };
  s0 -> s0 [0, 65535] { R13318 += 1, R13319 += 1 };
  s0 -> s3 [0, 65535] { R13319 += 1, R13257 += 1, R13236 += 1, R13237 += 1 };
  s0 -> s4 [82, 82] { R13319 += 1, R13257 += 1, R13237 += 1 };
  s0 -> s5 [82, 82] { R13319 += 1, R13257 += 1, R13237 += 1 };
  s0 -> s1 [89, 65535] { R13319 += 1, R13257 += 1, R13237 += 1 };
  s1 -> s1 [0, 81] { R13319 += 1, R13257 += 1, R13237 += 1 };
  s1 -> s6 [0, 65535] { R13319 += 1 };
  s1 -> s1 [0, 65535] { R13319 += 1, R13257 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s4 [82, 82] { R13319 += 1, R13257 += 1, R13237 += 1 };
  s1 -> s5 [82, 82] { R13319 += 1, R13257 += 1, R13237 += 1 };
  s1 -> s1 [89, 65535] { R13319 += 1, R13257 += 1, R13237 += 1 };
  s2 -> s1 [0, 81] { R13319 += 1, R13257 += 1, R13237 += 1 };
  s2 -> s2 [0, 65535] { R13319 += 1, R13256 += 1, R13257 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s3 [0, 65535] { R13319 += 1, R13257 += 1, R13236 += 1, R13237 += 1 };
  s2 -> s4 [82, 82] { R13319 += 1, R13257 += 1, R13237 += 1 };
  s2 -> s5 [82, 82] { R13319 += 1, R13257 += 1, R13237 += 1 };
  s2 -> s1 [89, 65535] { R13319 += 1, R13257 += 1, R13237 += 1 };
  s3 -> s1 [0, 81] { R13319 += 1, R13257 += 1, R13237 += 1 };
  s3 -> s6 [0, 65535] { R13319 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s3 [0, 65535] { R13319 += 1, R13257 += 1, R13236 += 1, R13237 += 1 };
  s3 -> s4 [82, 82] { R13319 += 1, R13257 += 1, R13237 += 1 };
  s3 -> s5 [82, 82] { R13319 += 1, R13257 += 1, R13237 += 1 };
  s3 -> s1 [89, 65535] { R13319 += 1, R13257 += 1, R13237 += 1 };
  s4 -> s4 [0, 65535] { R13319 += 1, R13257 += 1 };
  s4 -> s6 [0, 65535] { R13319 += 1 };
  s4 -> s7 [0, 65535];
  s5 -> s5 [0, 82] { R13319 += 1, R13257 += 1, R13237 += 1 };
  s5 -> s6 [0, 65535] { R13319 += 1 };
  s5 -> s7 [0, 65535];
  s5 -> s5 [0, 65535] { R13319 += 1, R13257 += 1 };
  s5 -> s5 [89, 65535] { R13319 += 1, R13257 += 1, R13237 += 1 };
  s6 -> s6 [0, 65535] { R13319 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R13321 += 1, R13276 += 1, R13277 += 1 };
  s0 -> s0 [0, 65535] { R13320 += 1, R13321 += 1 };
  s0 -> s2 [0, 65535] { R13321 += 1, R13277 += 1, R18 += 1 };
  s1 -> s1 [0, 65535] { R13321 += 1, R13276 += 1, R13277 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R13321 += 1, R13277 += 1, R18 += 1 };
  s2 -> s3 [0, 65535] { R13321 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R13321 += 1, R13277 += 1, R18 += 1 };
  s3 -> s3 [0, 65535] { R13321 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 80] { R13323 += 1, R13279 += 1 };
  s0 -> s2 [0, 65535] { R13323 += 1, R13278 += 1, R13279 += 1 };
  s0 -> s0 [0, 65535] { R13322 += 1, R13323 += 1 };
  s0 -> s3 [81, 81] { R13323 += 1, R13279 += 1 };
  s0 -> s4 [81, 81] { R13323 += 1, R13279 += 1 };
  s0 -> s5 [82, 82] { R13323 += 1, R13279 += 1 };
  s0 -> s1 [83, 65535] { R13323 += 1, R13279 += 1 };
  s1 -> s1 [0, 80] { R13323 += 1, R13279 += 1 };
  s1 -> s3 [81, 81] { R13323 += 1, R13279 += 1 };
  s1 -> s4 [81, 81] { R13323 += 1, R13279 += 1 };
  s1 -> s5 [82, 82] { R13323 += 1, R13279 += 1 };
  s1 -> s1 [83, 65535] { R13323 += 1, R13279 += 1 };
  s2 -> s1 [0, 80] { R13323 += 1, R13279 += 1 };
  s2 -> s2 [0, 65535] { R13323 += 1, R13278 += 1, R13279 += 1 };
  s2 -> s3 [81, 81] { R13323 += 1, R13279 += 1 };
  s2 -> s4 [81, 81] { R13323 += 1, R13279 += 1 };
  s2 -> s5 [82, 82] { R13323 += 1, R13279 += 1 };
  s2 -> s1 [83, 65535] { R13323 += 1, R13279 += 1 };
  s3 -> s3 [0, 81] { R13323 += 1, R13279 += 1 };
  s3 -> s8 [82, 82] { R13323 += 1, R13279 += 1 };
  s3 -> s3 [83, 65535] { R13323 += 1, R13279 += 1 };
  s5 -> s5 [0, 80] { R13323 += 1, R13279 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R13323 += 1 };
  s5 -> s7 [81, 81] { R13323 += 1, R13279 += 1 };
  s5 -> s8 [81, 81] { R13323 += 1, R13279 += 1 };
  s5 -> s5 [82, 65535] { R13323 += 1, R13279 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R13323 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s9 [0, 65535] { R13323 += 1 };
  s8 -> s8 [0, 65535] { R13323 += 1, R13279 += 1 };
  s9 -> s6 [0, 65535];
  s9 -> s9 [0, 65535] { R13323 += 1 };
  accepting s8, s5, s9, s6, s7;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 80] { R13325 += 1, R13281 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R13324 += 1, R13325 += 1 };
  s0 -> s2 [0, 65535] { R13325 += 1, R13280 += 1, R13281 += 1 };
  s0 -> s3 [81, 81] { R13325 += 1, R13281 += 1, R66 += 1 };
  s0 -> s4 [81, 81] { R13325 += 1, R13281 += 1, R66 += 1 };
  s0 -> s1 [82, 65535] { R13325 += 1, R13281 += 1, R66 += 1 };
  s1 -> s1 [0, 80] { R13325 += 1, R13281 += 1, R66 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R13325 += 1 };
  s1 -> s3 [81, 81] { R13325 += 1, R13281 += 1, R66 += 1 };
  s1 -> s4 [81, 81] { R13325 += 1, R13281 += 1, R66 += 1 };
  s1 -> s1 [82, 65535] { R13325 += 1, R13281 += 1, R66 += 1 };
  s2 -> s1 [0, 80] { R13325 += 1, R13281 += 1, R66 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R13325 += 1, R13280 += 1, R13281 += 1 };
  s2 -> s3 [81, 81] { R13325 += 1, R13281 += 1, R66 += 1 };
  s2 -> s4 [81, 81] { R13325 += 1, R13281 += 1, R66 += 1 };
  s2 -> s1 [82, 65535] { R13325 += 1, R13281 += 1, R66 += 1 };
  s3 -> s3 [0, 65535] { R13325 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R13325 += 1 };
  s4 -> s4 [0, 65535] { R13325 += 1, R13281 += 1, R66 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R13325 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 80] { R13327 += 1, R13283 += 1, R68 += 1 };
  s0 -> s2 [0, 65535] { R13327 += 1, R13282 += 1, R13283 += 1 };
  s0 -> s0 [0, 65535] { R13326 += 1, R13327 += 1 };
  s0 -> s3 [81, 81] { R13327 += 1, R13283 += 1, R68 += 1 };
  s0 -> s4 [81, 81] { R13327 += 1, R13283 += 1, R68 += 1 };
  s0 -> s1 [82, 65535] { R13327 += 1, R13283 += 1, R68 += 1 };
  s1 -> s1 [0, 80] { R13327 += 1, R13283 += 1, R68 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R13327 += 1 };
  s1 -> s3 [81, 81] { R13327 += 1, R13283 += 1, R68 += 1 };
  s1 -> s4 [81, 81] { R13327 += 1, R13283 += 1, R68 += 1 };
  s1 -> s1 [82, 65535] { R13327 += 1, R13283 += 1, R68 += 1 };
  s2 -> s1 [0, 80] { R13327 += 1, R13283 += 1, R68 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R13327 += 1, R13282 += 1, R13283 += 1 };
  s2 -> s3 [81, 81] { R13327 += 1, R13283 += 1, R68 += 1 };
  s2 -> s4 [81, 81] { R13327 += 1, R13283 += 1, R68 += 1 };
  s2 -> s1 [82, 65535] { R13327 += 1, R13283 += 1, R68 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R13327 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R13327 += 1 };
  s4 -> s4 [0, 65535] { R13327 += 1, R13283 += 1, R68 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R13327 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 80] { R13329 += 1, R13285 += 1, R11523 += 1 };
  s0 -> s2 [0, 80] { R13329 += 1, R13285 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s3 [0, 65535] { R13329 += 1, R13284 += 1, R13285 += 1 };
  s0 -> s0 [0, 65535] { R13328 += 1, R13329 += 1 };
  s0 -> s4 [81, 81] { R13329 += 1, R13285 += 1, R11523 += 1 };
  s0 -> s5 [81, 81] { R13329 += 1, R13285 += 1, R11523 += 1 };
  s0 -> s6 [81, 81] { R13329 += 1, R13285 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s7 [81, 81] { R13329 += 1, R13285 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s2 [82, 65535] { R13329 += 1, R13285 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s1 [83, 65535] { R13329 += 1, R13285 += 1, R11523 += 1 };
  s1 -> s1 [0, 80] { R13329 += 1, R13285 += 1, R11523 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s1 [0, 65535] { R13329 += 1 };
  s1 -> s4 [81, 81] { R13329 += 1, R13285 += 1 };
  s1 -> s5 [81, 81] { R13329 += 1, R13285 += 1 };
  s1 -> s1 [82, 65535] { R13329 += 1, R13285 += 1 };
  s1 -> s1 [83, 65535] { R13329 += 1, R13285 += 1, R11523 += 1 };
  s2 -> s1 [0, 80] { R13329 += 1, R13285 += 1, R11523 += 1 };
  s2 -> s2 [0, 80] { R13329 += 1, R13285 += 1, R11522 += 1, R11523 += 1 };
  s2 -> s4 [81, 81] { R13329 += 1, R13285 += 1, R11523 += 1 };
  s2 -> s5 [81, 81] { R13329 += 1, R13285 += 1, R11523 += 1 };
  s2 -> s6 [81, 81] { R13329 += 1, R13285 += 1, R11522 += 1, R11523 += 1 };
  s2 -> s7 [81, 81] { R13329 += 1, R13285 += 1, R11522 += 1, R11523 += 1 };
  s2 -> s2 [82, 65535] { R13329 += 1, R13285 += 1, R11522 += 1, R11523 += 1 };
  s2 -> s1 [83, 65535] { R13329 += 1, R13285 += 1, R11523 += 1 };
  s3 -> s1 [0, 80] { R13329 += 1, R13285 += 1, R11523 += 1 };
  s3 -> s2 [0, 80] { R13329 += 1, R13285 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s3 [0, 65535] { R13329 += 1, R13284 += 1, R13285 += 1 };
  s3 -> s4 [81, 81] { R13329 += 1, R13285 += 1, R11523 += 1 };
  s3 -> s5 [81, 81] { R13329 += 1, R13285 += 1, R11523 += 1 };
  s3 -> s6 [81, 81] { R13329 += 1, R13285 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s7 [81, 81] { R13329 += 1, R13285 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s2 [82, 65535] { R13329 += 1, R13285 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s1 [83, 65535] { R13329 += 1, R13285 += 1, R11523 += 1 };
  s4 -> s4 [0, 81] { R13329 += 1, R13285 += 1, R11523 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s4 [0, 65535] { R13329 += 1, R13285 += 1 };
  s4 -> s9 [0, 65535] { R13329 += 1 };
  s4 -> s4 [83, 65535] { R13329 += 1, R13285 += 1, R11523 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s5 [0, 65535] { R13329 += 1 };
  s7 -> s4 [0, 81] { R13329 += 1, R13285 += 1, R11523 += 1 };
  s7 -> s7 [0, 65535] { R13329 += 1, R13285 += 1, R11522 += 1, R11523 += 1 };
  s7 -> s4 [83, 65535] { R13329 += 1, R13285 += 1, R11523 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R13329 += 1 };
  accepting s4, s8, s5, s9, s1;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 80] { R13331 += 1, R13287 += 1, R11526 += 1, R11527 += 1 };
  s0 -> s0 [0, 65535] { R13330 += 1, R13331 += 1 };
  s0 -> s2 [0, 65535] { R13331 += 1, R13286 += 1, R13287 += 1 };
  s0 -> s3 [81, 81] { R13331 += 1, R13287 += 1, R11526 += 1, R11527 += 1 };
  s0 -> s4 [81, 81] { R13331 += 1, R13287 += 1, R11526 += 1, R11527 += 1 };
  s0 -> s1 [82, 65535] { R13331 += 1, R13287 += 1, R11526 += 1, R11527 += 1 };
  s1 -> s1 [0, 80] { R13331 += 1, R13287 += 1, R11526 += 1, R11527 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R13331 += 1 };
  s1 -> s3 [81, 81] { R13331 += 1, R13287 += 1, R11526 += 1, R11527 += 1 };
  s1 -> s4 [81, 81] { R13331 += 1, R13287 += 1, R11526 += 1, R11527 += 1 };
  s1 -> s1 [82, 65535] { R13331 += 1, R13287 += 1, R11526 += 1, R11527 += 1 };
  s2 -> s1 [0, 80] { R13331 += 1, R13287 += 1, R11526 += 1, R11527 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R13331 += 1, R13286 += 1, R13287 += 1 };
  s2 -> s3 [81, 81] { R13331 += 1, R13287 += 1, R11526 += 1, R11527 += 1 };
  s2 -> s4 [81, 81] { R13331 += 1, R13287 += 1, R11526 += 1, R11527 += 1 };
  s2 -> s1 [82, 65535] { R13331 += 1, R13287 += 1, R11526 += 1, R11527 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R13331 += 1, R13287 += 1, R11526 += 1, R11527 += 1 };
  s3 -> s6 [0, 65535] { R13331 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R13331 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R13331 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 80] { R13333 += 1, R13289 += 1, R12803 += 1 };
  s0 -> s2 [0, 80] { R13333 += 1, R13289 += 1, R12802 += 1, R12803 += 1 };
  s0 -> s0 [0, 65535] { R13332 += 1, R13333 += 1 };
  s0 -> s3 [0, 65535] { R13333 += 1, R13288 += 1, R13289 += 1 };
  s0 -> s4 [81, 81] { R13333 += 1, R13289 += 1, R12802 += 1, R12803 += 1 };
  s0 -> s5 [81, 81] { R13333 += 1, R13289 += 1, R12803 += 1 };
  s0 -> s6 [81, 81] { R13333 += 1, R13289 += 1, R12802 += 1, R12803 += 1 };
  s0 -> s7 [81, 81] { R13333 += 1, R13289 += 1, R12803 += 1 };
  s0 -> s1 [82, 82] { R13333 += 1, R13289 += 1, R12803 += 1 };
  s0 -> s2 [82, 65535] { R13333 += 1, R13289 += 1, R12802 += 1, R12803 += 1 };
  s0 -> s1 [89, 65535] { R13333 += 1, R13289 += 1, R12803 += 1 };
  s1 -> s1 [0, 80] { R13333 += 1, R13289 += 1, R12803 += 1 };
  s1 -> s1 [0, 65535] { R13333 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s5 [81, 81] { R13333 += 1, R13289 += 1, R12803 += 1 };
  s1 -> s7 [81, 81] { R13333 += 1, R13289 += 1, R12803 += 1 };
  s1 -> s1 [82, 82] { R13333 += 1, R13289 += 1, R12803 += 1 };
  s1 -> s1 [89, 65535] { R13333 += 1, R13289 += 1, R12803 += 1 };
  s2 -> s1 [0, 80] { R13333 += 1, R13289 += 1, R12803 += 1 };
  s2 -> s2 [0, 80] { R13333 += 1, R13289 += 1, R12802 += 1, R12803 += 1 };
  s2 -> s4 [81, 81] { R13333 += 1, R13289 += 1, R12802 += 1, R12803 += 1 };
  s2 -> s5 [81, 81] { R13333 += 1, R13289 += 1, R12803 += 1 };
  s2 -> s6 [81, 81] { R13333 += 1, R13289 += 1, R12802 += 1, R12803 += 1 };
  s2 -> s7 [81, 81] { R13333 += 1, R13289 += 1, R12803 += 1 };
  s2 -> s1 [82, 82] { R13333 += 1, R13289 += 1, R12803 += 1 };
  s2 -> s2 [82, 65535] { R13333 += 1, R13289 += 1, R12802 += 1, R12803 += 1 };
  s2 -> s1 [89, 65535] { R13333 += 1, R13289 += 1, R12803 += 1 };
  s3 -> s1 [0, 80] { R13333 += 1, R13289 += 1, R12803 += 1 };
  s3 -> s2 [0, 80] { R13333 += 1, R13289 += 1, R12802 += 1, R12803 += 1 };
  s3 -> s3 [0, 65535] { R13333 += 1, R13288 += 1, R13289 += 1 };
  s3 -> s4 [81, 81] { R13333 += 1, R13289 += 1, R12802 += 1, R12803 += 1 };
  s3 -> s5 [81, 81] { R13333 += 1, R13289 += 1, R12803 += 1 };
  s3 -> s6 [81, 81] { R13333 += 1, R13289 += 1, R12802 += 1, R12803 += 1 };
  s3 -> s7 [81, 81] { R13333 += 1, R13289 += 1, R12803 += 1 };
  s3 -> s1 [82, 82] { R13333 += 1, R13289 += 1, R12803 += 1 };
  s3 -> s2 [82, 65535] { R13333 += 1, R13289 += 1, R12802 += 1, R12803 += 1 };
  s3 -> s1 [89, 65535] { R13333 += 1, R13289 += 1, R12803 += 1 };
  s5 -> s5 [0, 82] { R13333 += 1, R13289 += 1, R12803 += 1 };
  s5 -> s5 [0, 65535] { R13333 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s5 [89, 65535] { R13333 += 1, R13289 += 1, R12803 += 1 };
  s6 -> s5 [0, 82] { R13333 += 1, R13289 += 1, R12803 += 1 };
  s6 -> s6 [0, 65535] { R13333 += 1, R13289 += 1, R12802 += 1, R12803 += 1 };
  s6 -> s5 [89, 65535] { R13333 += 1, R13289 += 1, R12803 += 1 };
  s7 -> s7 [0, 65535] { R13333 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  accepting s1, s5, s7, s8;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 80] { R13335 += 1, R13291 += 1, R13228 += 1, R13229 += 1 };
  s0 -> s2 [0, 80] { R13335 += 1, R13291 += 1, R13229 += 1, R13230 += 1 };
  s0 -> s3 [0, 65535] { R13335 += 1, R13290 += 1, R13291 += 1 };
  s0 -> s0 [0, 65535] { R13334 += 1, R13335 += 1 };
  s0 -> s4 [81, 81] { R13335 += 1, R13291 += 1, R13228 += 1, R13229 += 1 };
  s0 -> s5 [81, 81] { R13335 += 1, R13291 += 1, R13229 += 1, R13230 += 1 };
  s0 -> s6 [81, 81] { R13335 += 1, R13291 += 1, R13229 += 1, R13230 += 1 };
  s0 -> s7 [81, 81] { R13335 += 1, R13291 += 1, R13228 += 1, R13229 += 1 };
  s0 -> s1 [82, 65535] { R13335 += 1, R13291 += 1, R13228 += 1, R13229 += 1 };
  s0 -> s2 [82, 65535] { R13335 += 1, R13291 += 1, R13229 += 1, R13230 += 1 };
  s1 -> s1 [0, 80] { R13335 += 1, R13291 += 1, R13228 += 1, R13229 += 1 };
  s1 -> s2 [0, 80] { R13335 += 1, R13291 += 1, R13229 += 1, R13230 += 1 };
  s1 -> s4 [81, 81] { R13335 += 1, R13291 += 1, R13228 += 1, R13229 += 1 };
  s1 -> s5 [81, 81] { R13335 += 1, R13291 += 1, R13229 += 1, R13230 += 1 };
  s1 -> s6 [81, 81] { R13335 += 1, R13291 += 1, R13229 += 1, R13230 += 1 };
  s1 -> s7 [81, 81] { R13335 += 1, R13291 += 1, R13228 += 1, R13229 += 1 };
  s1 -> s1 [82, 65535] { R13335 += 1, R13291 += 1, R13228 += 1, R13229 += 1 };
  s1 -> s2 [82, 65535] { R13335 += 1, R13291 += 1, R13229 += 1, R13230 += 1 };
  s2 -> s2 [0, 80] { R13335 += 1, R13291 += 1, R13229 += 1, R13230 += 1 };
  s2 -> s2 [0, 65535] { R13335 += 1 };
  s2 -> s9 [0, 65535];
  s2 -> s5 [81, 81] { R13335 += 1, R13291 += 1, R13229 += 1, R13230 += 1 };
  s2 -> s6 [81, 81] { R13335 += 1, R13291 += 1, R13229 += 1, R13230 += 1 };
  s2 -> s2 [82, 65535] { R13335 += 1, R13291 += 1, R13229 += 1, R13230 += 1 };
  s3 -> s1 [0, 80] { R13335 += 1, R13291 += 1, R13228 += 1, R13229 += 1 };
  s3 -> s2 [0, 80] { R13335 += 1, R13291 += 1, R13229 += 1, R13230 += 1 };
  s3 -> s3 [0, 65535] { R13335 += 1, R13290 += 1, R13291 += 1 };
  s3 -> s4 [81, 81] { R13335 += 1, R13291 += 1, R13228 += 1, R13229 += 1 };
  s3 -> s5 [81, 81] { R13335 += 1, R13291 += 1, R13229 += 1, R13230 += 1 };
  s3 -> s6 [81, 81] { R13335 += 1, R13291 += 1, R13229 += 1, R13230 += 1 };
  s3 -> s7 [81, 81] { R13335 += 1, R13291 += 1, R13228 += 1, R13229 += 1 };
  s3 -> s1 [82, 65535] { R13335 += 1, R13291 += 1, R13228 += 1, R13229 += 1 };
  s3 -> s2 [82, 65535] { R13335 += 1, R13291 += 1, R13229 += 1, R13230 += 1 };
  s5 -> s5 [0, 65535] { R13335 += 1 };
  s5 -> s9 [0, 65535];
  s6 -> s8 [0, 65535] { R13335 += 1 };
  s6 -> s6 [0, 65535] { R13335 += 1, R13291 += 1, R13229 += 1, R13230 += 1 };
  s6 -> s9 [0, 65535];
  s7 -> s6 [0, 65535] { R13335 += 1, R13291 += 1, R13229 += 1, R13230 += 1 };
  s7 -> s7 [0, 65535] { R13335 += 1, R13291 += 1, R13228 += 1, R13229 += 1 };
  s8 -> s8 [0, 65535] { R13335 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s8, s5, s2, s9, s6;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 80] { R13337 += 1, R13293 += 1, R13234 += 1, R13235 += 1 };
  s0 -> s2 [0, 65535] { R13337 += 1, R13292 += 1, R13293 += 1 };
  s0 -> s0 [0, 65535] { R13336 += 1, R13337 += 1 };
  s0 -> s3 [81, 81] { R13337 += 1, R13293 += 1, R13234 += 1, R13235 += 1 };
  s0 -> s4 [81, 81] { R13337 += 1, R13293 += 1, R13234 += 1, R13235 += 1 };
  s0 -> s1 [82, 65535] { R13337 += 1, R13293 += 1, R13234 += 1, R13235 += 1 };
  s1 -> s1 [0, 80] { R13337 += 1, R13293 += 1, R13234 += 1, R13235 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R13337 += 1 };
  s1 -> s3 [81, 81] { R13337 += 1, R13293 += 1, R13234 += 1, R13235 += 1 };
  s1 -> s4 [81, 81] { R13337 += 1, R13293 += 1, R13234 += 1, R13235 += 1 };
  s1 -> s1 [82, 65535] { R13337 += 1, R13293 += 1, R13234 += 1, R13235 += 1 };
  s2 -> s1 [0, 80] { R13337 += 1, R13293 += 1, R13234 += 1, R13235 += 1 };
  s2 -> s2 [0, 65535] { R13337 += 1, R13292 += 1, R13293 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [81, 81] { R13337 += 1, R13293 += 1, R13234 += 1, R13235 += 1 };
  s2 -> s4 [81, 81] { R13337 += 1, R13293 += 1, R13234 += 1, R13235 += 1 };
  s2 -> s1 [82, 65535] { R13337 += 1, R13293 += 1, R13234 += 1, R13235 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R13337 += 1 };
  s4 -> s5 [0, 65535] { R13337 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R13337 += 1, R13293 += 1, R13234 += 1, R13235 += 1 };
  s5 -> s5 [0, 65535] { R13337 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [113, 113];
  accepting s1;
};
};
synchronised {  // Automata constraining c1
automaton c1_0 {
  init s0;
  s0 -> s1 [114, 114];
  accepting s1;
};
};
constraint R1 = R13253 && R2 = R13337 && R20 - R13337 = -1 && R21 = R13337 && R22 - R13337 = -1 && R23 = R13337 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R12805 + -1*R12803 - R53 = 0 && R52 + R12804 + R12802 = 0 && R13252 = 0 && R13278 = 0 && R13279 = 0 && R13284 = 0 && R13285 = 0 && R13288 = 0 && R13289 = 0 && R13290 = 0 && R13291 = 0 && R13294 = 0 && R13295 = R13337 && R13296 = 0 && R13297 = R13337 && R13298 = 0 && R13299 = R13337 && R13300 = 0 && R13301 = R13337 && R13302 = 0 && R13303 = R13337 && R13304 = 0 && R13305 = R13337 && R13306 = 0 && R13307 = R13337 && R13308 = 0 && R13309 = R13337 && R13310 = 0 && R13311 = R13337 && R13312 = 0 && R13313 = R13337 && R13314 = 0 && R13315 = R13337 && R13316 = 0 && R13317 = R13337 && R13318 = 0 && R13319 = R13337 && R13320 = 0 && R13321 = R13337 && R13322 = 0 && R13323 = R13337 && R13324 = 0 && R13325 = R13337 && R13326 = 0 && R13327 = R13337 && R13328 = 0 && R13329 = R13337 && R13330 = 0 && R13331 = R13337 && R13332 = 0 && R13333 = R13337 && R13334 = 0 && R13335 = R13337 && R13336 = 0 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R12805 + -1*R12803 - R53 < 1 && -1 < R13253 && 0 < R13337 && (R48 + R11531 + R11528 != 0 || ((R42 + R11524 + R11522 != 0 || R43 + R11525 + R11523 + -1*R12805 + -1*R12803 - R53 = 0 || R53 + R12805 + R12803 < 1) && (R42 + R11524 + R11522 = 0 || R53 + R12805 + R12803 < 1))) && (R48 + R11531 + R11528 != 0 || ((R46 + R11529 + R11526 != 0 || R47 + R11530 + R11527 + -1*R12805 + -1*R12803 - R53 = 0 || R53 + R12805 + R12803 < 1) && (R46 + R11529 + R11526 = 0 || R53 + R12805 + R12803 < 1))) && (R13238 != 0 || R13239 = R13253 || (R17 = 0 && R13253 = 0)) && (R13240 != 0 || R13241 = R13253 || (R17 = 0 && R13253 = 0)) && (R13242 != 0 || R13243 = R13253 || (R17 = 0 && R13253 = 0)) && (R13244 != 0 || R13245 = R13253 || (R17 = 0 && R13253 = 0)) && (R13246 != 0 || R13247 = R13253 || (R17 = 0 && R13253 = 0)) && (R13248 != 0 || R13249 = R13253 || (R17 = 0 && R13253 = 0)) && (R13250 != 0 || R13251 = R13253 || (R17 = 0 && R13253 = 0)) && (R13254 != 0 || R13253 = R13255 || (R17 = 0 && R13253 = 0)) && (R13256 != 0 || R13253 = R13257 || (R17 = 0 && R13253 = 0)) && (R18 = 0 || (R13276 = 0 && R13277 = 0)) && (R18 = 0 || (R13280 = 0 && R13281 = 0)) && (R18 = 0 || (R13282 = 0 && R13283 = 0)) && (R18 = 0 || (R13286 = 0 && R13287 = 0)) && (R18 = 0 || (R13292 = 0 && R13293 = 0)) && (R19 = 0 || (R13258 = 0 && R13259 = 0)) && (R19 = 0 || (R13260 = 0 && R13261 = 0)) && (R19 = 0 || (R13262 = 0 && R13263 = 0)) && (R19 = 0 || (R13264 = 0 && R13265 = 0)) && (R19 = 0 || (R13266 = 0 && R13267 = 0)) && (R19 = 0 || (R13268 = 0 && R13269 = 0)) && (R19 = 0 || (R13270 = 0 && R13271 = 0)) && (R19 = 0 || (R13272 = 0 && R13273 = 0)) && (R19 = 0 || (R13274 = 0 && R13275 = 0)) && (R48 + R11531 + R11528 = 0 || (R42 + R11524 + R11522 = 0 && R43 + R11525 + R11523 + -1*R12805 + -1*R12803 - R53 = 0)) && (R48 + R11531 + R11528 = 0 || (R46 + R11529 + R11526 = 0 && R47 + R11530 + R11527 + -1*R12805 + -1*R12803 - R53 = 0)) && (R58 + R13233 + R13230 = 0 || (R56 + R13231 + R13228 = 0 && R57 + R13232 + R13229 = 0)) && (R58 + R13233 + R13230 = 0 || (R62 + R13236 + R13234 = 0 && R63 + R13237 + R13235 = 0)) && (R13238 = 0 || (R17 = 0 && R13253 = 0)) && (R13240 = 0 || (R17 = 0 && R13253 = 0)) && (R13242 = 0 || (R17 = 0 && R13253 = 0)) && (R13244 = 0 || (R17 = 0 && R13253 = 0)) && (R13246 = 0 || (R17 = 0 && R13253 = 0)) && (R13248 = 0 || (R17 = 0 && R13253 = 0)) && (R13250 = 0 || (R17 = 0 && R13253 = 0)) && (R13254 = 0 || (R17 = 0 && R13253 = 0)) && (R13256 = 0 || (R17 = 0 && R13253 = 0));
// End of Parikh automata intersection problem
