// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R12, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R2620, R2621, R2622, R2623, R2624, R2625, R2626, R2627, R2628, R2629, R2630, R2631, R2632, R2633, R2634, R2635, R2636, R2637, R2638, R2639, R2640, R2641, R2642, R2643, R2644, R2645, R2646, R2647, R2648, R2649, R2650, R2651, R2652, R2653, R2654, R2655, R2656, R2657, R2658, R2659, R2660, R2661, R2662, R2663, R2664, R2665, R2666, R2667, R2668, R2669, R2670, R2671, R2672, R2673, R2674, R2675, R2676, R2677, R2678, R2679, R2680, R2681, R2682, R2683, R2684, R2685, R2686, R2687, R2688, R2689, R2690, R2691, R2692, R2693, R2694, R2695, R2696, R2697, R2698, R2699, R27, R2700, R2701, R2702, R2703, R2704, R2705, R2706, R2707, R2708, R2709, R2710, R2711, R2712, R2713, R2714, R2715, R2716, R2717, R2718, R2719, R2720, R2721, R2722, R2723, R2724, R2725, R2726, R2727, R2728, R2729, R2730, R2731, R2732, R2733, R3, R38, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R70, R71, R72, R73, R74, R75, R76, R77, R78, R79, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [81, 81];
  s0 -> s0 [82, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [81, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 80];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [81, 81];
  s0 -> s1 [82, 65535];
  s1 -> s1 [0, 80];
  s1 -> s2 [81, 81];
  s1 -> s1 [82, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s1 [0, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R25 += 1 };
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R2654 += 1, R2655 += 1 };
  s0 -> s1 [0, 65535] { R2655 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R2655 += 1, R19 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 80] { R2657 += 1 };
  s0 -> s0 [0, 65535] { R2656 += 1, R2657 += 1 };
  s0 -> s2 [81, 81] { R2657 += 1 };
  s0 -> s3 [81, 81] { R2657 += 1 };
  s0 -> s1 [83, 65535] { R2657 += 1 };
  s1 -> s1 [0, 80] { R2657 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R2657 += 1 };
  s1 -> s3 [81, 81] { R2657 += 1 };
  s1 -> s1 [83, 65535] { R2657 += 1 };
  s2 -> s2 [0, 81] { R2657 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [83, 65535] { R2657 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 80] { R2659 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R2658 += 1, R2659 += 1 };
  s0 -> s2 [81, 81] { R2659 += 1, R38 += 1 };
  s0 -> s3 [81, 81] { R2659 += 1, R38 += 1 };
  s0 -> s1 [82, 65535] { R2659 += 1, R38 += 1 };
  s1 -> s1 [0, 80] { R2659 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R2659 += 1, R38 += 1 };
  s1 -> s3 [81, 81] { R2659 += 1, R38 += 1 };
  s1 -> s1 [82, 65535] { R2659 += 1, R38 += 1 };
  s2 -> s2 [0, 65535] { R2659 += 1, R38 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 80] { R2661 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R2660 += 1, R2661 += 1 };
  s0 -> s2 [81, 81] { R2661 += 1, R40 += 1 };
  s0 -> s3 [81, 81] { R2661 += 1, R40 += 1 };
  s0 -> s1 [82, 65535] { R2661 += 1, R40 += 1 };
  s1 -> s1 [0, 80] { R2661 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R2661 += 1, R40 += 1 };
  s1 -> s3 [81, 81] { R2661 += 1, R40 += 1 };
  s1 -> s1 [82, 65535] { R2661 += 1, R40 += 1 };
  s2 -> s2 [0, 65535] { R2661 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 80] { R2663 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R2662 += 1, R2663 += 1 };
  s0 -> s2 [81, 81] { R2663 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [81, 81] { R2663 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [82, 65535] { R2663 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 80] { R2663 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R2663 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [81, 81] { R2663 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [82, 65535] { R2663 += 1, R42 += 1, R43 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2663 += 1, R42 += 1, R43 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 80] { R2665 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R2664 += 1, R2665 += 1 };
  s0 -> s2 [81, 81] { R2665 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [81, 81] { R2665 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [82, 65535] { R2665 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 80] { R2665 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R2665 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [81, 81] { R2665 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [82, 65535] { R2665 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R2665 += 1, R46 += 1, R47 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 80] { R2667 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R2666 += 1, R2667 += 1 };
  s0 -> s2 [81, 81] { R2667 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [81, 81] { R2667 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [82, 65535] { R2667 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 80] { R2667 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R2667 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [81, 81] { R2667 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [82, 65535] { R2667 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R2667 += 1, R52 += 1, R53 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 80] { R2669 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R2668 += 1, R2669 += 1 };
  s0 -> s2 [81, 81] { R2669 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [81, 81] { R2669 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [82, 65535] { R2669 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 80] { R2669 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R2669 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [81, 81] { R2669 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [82, 65535] { R2669 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2669 += 1, R56 += 1, R57 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 80] { R2671 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R2670 += 1, R2671 += 1 };
  s0 -> s2 [81, 81] { R2671 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [81, 81] { R2671 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [82, 65535] { R2671 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 80] { R2671 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R2671 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [81, 81] { R2671 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [82, 65535] { R2671 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2671 += 1, R62 += 1, R63 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 80] { R2691 += 1 };
  s0 -> s0 [0, 65535] { R2690 += 1, R2691 += 1 };
  s0 -> s2 [81, 81] { R2691 += 1 };
  s0 -> s1 [82, 65535] { R2691 += 1 };
  s1 -> s1 [0, 80] { R2691 += 1 };
  s1 -> s2 [81, 81] { R2691 += 1 };
  s1 -> s1 [82, 65535] { R2691 += 1 };
  s2 -> s2 [0, 65535] { R2691 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R2693 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R2692 += 1, R2693 += 1 };
  s1 -> s1 [0, 65535] { R2693 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 80] { R2695 += 1 };
  s0 -> s0 [0, 65535] { R2694 += 1, R2695 += 1 };
  s0 -> s2 [0, 65535] { R2695 += 1, R8 += 1 };
  s0 -> s3 [81, 81] { R2695 += 1 };
  s0 -> s1 [82, 65535] { R2695 += 1 };
  s1 -> s1 [0, 80] { R2695 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [81, 81] { R2695 += 1 };
  s1 -> s1 [82, 65535] { R2695 += 1 };
  s2 -> s1 [0, 80] { R2695 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2695 += 1, R8 += 1 };
  s2 -> s3 [81, 81] { R2695 += 1 };
  s2 -> s1 [82, 65535] { R2695 += 1 };
  s3 -> s3 [0, 65535] { R2695 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 80] { R2697 += 1, R2635 += 1 };
  s0 -> s0 [0, 65535] { R2696 += 1, R2697 += 1 };
  s0 -> s2 [0, 65535] { R2697 += 1, R2634 += 1, R2635 += 1 };
  s0 -> s1 [82, 65535] { R2697 += 1, R2635 += 1 };
  s1 -> s1 [0, 80] { R2697 += 1, R2635 += 1 };
  s1 -> s1 [0, 65535] { R2697 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [82, 65535] { R2697 += 1, R2635 += 1 };
  s2 -> s1 [0, 80] { R2697 += 1, R2635 += 1 };
  s2 -> s2 [0, 65535] { R2697 += 1, R2634 += 1, R2635 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [82, 65535] { R2697 += 1, R2635 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R2699 += 1, R2637 += 1, R17 += 1 };
  s0 -> s2 [0, 65535] { R2699 += 1, R2636 += 1, R2637 += 1 };
  s0 -> s0 [0, 65535] { R2698 += 1, R2699 += 1 };
  s1 -> s1 [0, 65535] { R2699 += 1, R2637 += 1, R17 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R2699 += 1 };
  s2 -> s1 [0, 65535] { R2699 += 1, R2637 += 1, R17 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R2699 += 1, R2636 += 1, R2637 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2699 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 65535] { R2701 += 1, R2639 += 1 };
  s0 -> s0 [0, 65535] { R2700 += 1, R2701 += 1 };
  s0 -> s2 [0, 65535] { R2701 += 1, R2638 += 1, R2639 += 1 };
  s1 -> s4 [0, 65535] { R2701 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R2701 += 1, R2639 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R2701 += 1, R2639 += 1 };
  s2 -> s2 [0, 65535] { R2701 += 1, R2638 += 1, R2639 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2701 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R2703 += 1, R2640 += 1, R2641 += 1 };
  s0 -> s2 [0, 65535] { R2703 += 1, R2641 += 1, R67 += 1 };
  s0 -> s0 [0, 65535] { R2702 += 1, R2703 += 1 };
  s1 -> s1 [0, 65535] { R2703 += 1, R2640 += 1, R2641 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R2703 += 1, R2641 += 1, R67 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R2703 += 1 };
  s2 -> s2 [0, 65535] { R2703 += 1, R2641 += 1, R67 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2703 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 81] { R2705 += 1, R2643 += 1 };
  s0 -> s0 [0, 65535] { R2704 += 1, R2705 += 1 };
  s0 -> s2 [0, 65535] { R2705 += 1, R2642 += 1, R2643 += 1 };
  s0 -> s3 [0, 65535] { R2705 += 1, R2643 += 1, R69 += 1 };
  s0 -> s1 [83, 65535] { R2705 += 1, R2643 += 1 };
  s1 -> s1 [0, 81] { R2705 += 1, R2643 += 1 };
  s1 -> s1 [0, 65535] { R2705 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [83, 65535] { R2705 += 1, R2643 += 1 };
  s2 -> s1 [0, 81] { R2705 += 1, R2643 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2705 += 1, R2642 += 1, R2643 += 1 };
  s2 -> s3 [0, 65535] { R2705 += 1, R2643 += 1, R69 += 1 };
  s2 -> s1 [83, 65535] { R2705 += 1, R2643 += 1 };
  s3 -> s1 [0, 81] { R2705 += 1, R2643 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R2705 += 1 };
  s3 -> s3 [0, 65535] { R2705 += 1, R2643 += 1, R69 += 1 };
  s3 -> s1 [83, 65535] { R2705 += 1, R2643 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2705 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 81] { R2707 += 1, R2645 += 1, R73 += 1 };
  s0 -> s0 [0, 65535] { R2706 += 1, R2707 += 1 };
  s0 -> s2 [0, 65535] { R2707 += 1, R2645 += 1, R72 += 1, R73 += 1 };
  s0 -> s3 [0, 65535] { R2707 += 1, R2644 += 1, R2645 += 1 };
  s0 -> s1 [83, 65535] { R2707 += 1, R2645 += 1, R73 += 1 };
  s1 -> s1 [0, 81] { R2707 += 1, R2645 += 1, R73 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R2707 += 1 };
  s1 -> s1 [0, 65535] { R2707 += 1, R2645 += 1 };
  s1 -> s1 [83, 65535] { R2707 += 1, R2645 += 1, R73 += 1 };
  s2 -> s1 [0, 81] { R2707 += 1, R2645 += 1, R73 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R2707 += 1 };
  s2 -> s2 [0, 65535] { R2707 += 1, R2645 += 1, R72 += 1, R73 += 1 };
  s2 -> s1 [83, 65535] { R2707 += 1, R2645 += 1, R73 += 1 };
  s3 -> s1 [0, 81] { R2707 += 1, R2645 += 1, R73 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R2707 += 1, R2645 += 1, R72 += 1, R73 += 1 };
  s3 -> s3 [0, 65535] { R2707 += 1, R2644 += 1, R2645 += 1 };
  s3 -> s1 [83, 65535] { R2707 += 1, R2645 += 1, R73 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2707 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R2709 += 1, R2646 += 1, R2647 += 1 };
  s0 -> s2 [0, 65535] { R2709 += 1, R2647 += 1, R77 += 1, R78 += 1 };
  s0 -> s0 [0, 65535] { R2708 += 1, R2709 += 1 };
  s0 -> s3 [0, 65535] { R2709 += 1, R2647 += 1, R78 += 1, R79 += 1 };
  s1 -> s1 [0, 65535] { R2709 += 1, R2646 += 1, R2647 += 1 };
  s1 -> s2 [0, 65535] { R2709 += 1, R2647 += 1, R77 += 1, R78 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [0, 65535] { R2709 += 1, R2647 += 1, R78 += 1, R79 += 1 };
  s2 -> s4 [0, 65535] { R2709 += 1 };
  s2 -> s2 [0, 65535] { R2709 += 1, R2647 += 1, R77 += 1, R78 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R2709 += 1, R2647 += 1, R78 += 1, R79 += 1 };
  s3 -> s4 [0, 65535] { R2709 += 1 };
  s3 -> s5 [0, 65535] { R2709 += 1, R2647 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R2709 += 1, R2647 += 1, R78 += 1, R79 += 1 };
  s4 -> s4 [0, 65535] { R2709 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s4 [0, 65535] { R2709 += 1 };
  s5 -> s5 [0, 65535] { R2709 += 1, R2647 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 82] { R2711 += 1, R2649 += 1, R2623 += 1 };
  s0 -> s2 [0, 65535] { R2711 += 1, R2648 += 1, R2649 += 1 };
  s0 -> s3 [0, 65535] { R2711 += 1, R2649 += 1, R2622 += 1, R2623 += 1 };
  s0 -> s0 [0, 65535] { R2710 += 1, R2711 += 1 };
  s0 -> s4 [88, 88] { R2711 += 1, R2649 += 1, R2623 += 1 };
  s0 -> s1 [89, 65535] { R2711 += 1, R2649 += 1, R2623 += 1 };
  s1 -> s1 [0, 82] { R2711 += 1, R2649 += 1, R2623 += 1 };
  s1 -> s4 [88, 88] { R2711 += 1, R2649 += 1, R2623 += 1 };
  s1 -> s1 [89, 65535] { R2711 += 1, R2649 += 1, R2623 += 1 };
  s2 -> s1 [0, 82] { R2711 += 1, R2649 += 1, R2623 += 1 };
  s2 -> s2 [0, 65535] { R2711 += 1, R2648 += 1, R2649 += 1 };
  s2 -> s3 [0, 65535] { R2711 += 1, R2649 += 1, R2622 += 1, R2623 += 1 };
  s2 -> s4 [88, 88] { R2711 += 1, R2649 += 1, R2623 += 1 };
  s2 -> s1 [89, 65535] { R2711 += 1, R2649 += 1, R2623 += 1 };
  s3 -> s1 [0, 82] { R2711 += 1, R2649 += 1, R2623 += 1 };
  s3 -> s3 [0, 65535] { R2711 += 1, R2649 += 1, R2622 += 1, R2623 += 1 };
  s3 -> s4 [88, 88] { R2711 += 1, R2649 += 1, R2623 += 1 };
  s3 -> s1 [89, 65535] { R2711 += 1, R2649 += 1, R2623 += 1 };
  s4 -> s4 [0, 82] { R2711 += 1, R2649 += 1, R2623 += 1 };
  s4 -> s4 [0, 65535] { R2711 += 1, R2649 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R2711 += 1 };
  s4 -> s4 [88, 65535] { R2711 += 1, R2649 += 1, R2623 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2711 += 1 };
  accepting s4, s5, s6;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R2713 += 1, R2651 += 1, R2627 += 1, R2628 += 1 };
  s0 -> s0 [0, 65535] { R2712 += 1, R2713 += 1 };
  s0 -> s2 [0, 65535] { R2713 += 1, R2650 += 1, R2651 += 1 };
  s0 -> s3 [0, 65535] { R2713 += 1, R2651 += 1, R2628 += 1, R2629 += 1 };
  s1 -> s1 [0, 65535] { R2713 += 1, R2651 += 1, R2627 += 1, R2628 += 1 };
  s1 -> s5 [0, 65535] { R2713 += 1 };
  s1 -> s3 [0, 65535] { R2713 += 1, R2651 += 1, R2628 += 1, R2629 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s1 [0, 65535] { R2713 += 1, R2651 += 1, R2627 += 1, R2628 += 1 };
  s2 -> s2 [0, 65535] { R2713 += 1, R2650 += 1, R2651 += 1 };
  s2 -> s3 [0, 65535] { R2713 += 1, R2651 += 1, R2628 += 1, R2629 += 1 };
  s2 -> s6 [0, 65535];
  s3 -> s4 [0, 65535] { R2713 += 1, R2651 += 1 };
  s3 -> s5 [0, 65535] { R2713 += 1 };
  s3 -> s3 [0, 65535] { R2713 += 1, R2651 += 1, R2628 += 1, R2629 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R2713 += 1, R2651 += 1 };
  s4 -> s5 [0, 65535] { R2713 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R2713 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 81] { R2715 += 1, R2653 += 1, R2633 += 1 };
  s0 -> s2 [0, 65535] { R2715 += 1, R2652 += 1, R2653 += 1 };
  s0 -> s3 [0, 65535] { R2715 += 1, R2653 += 1, R2632 += 1, R2633 += 1 };
  s0 -> s0 [0, 65535] { R2714 += 1, R2715 += 1 };
  s0 -> s4 [82, 82] { R2715 += 1, R2653 += 1, R2633 += 1 };
  s0 -> s5 [82, 82] { R2715 += 1, R2653 += 1, R2633 += 1 };
  s0 -> s1 [89, 65535] { R2715 += 1, R2653 += 1, R2633 += 1 };
  s1 -> s1 [0, 81] { R2715 += 1, R2653 += 1, R2633 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R2715 += 1, R2653 += 1 };
  s1 -> s7 [0, 65535] { R2715 += 1 };
  s1 -> s4 [82, 82] { R2715 += 1, R2653 += 1, R2633 += 1 };
  s1 -> s5 [82, 82] { R2715 += 1, R2653 += 1, R2633 += 1 };
  s1 -> s1 [89, 65535] { R2715 += 1, R2653 += 1, R2633 += 1 };
  s2 -> s1 [0, 81] { R2715 += 1, R2653 += 1, R2633 += 1 };
  s2 -> s2 [0, 65535] { R2715 += 1, R2652 += 1, R2653 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R2715 += 1, R2653 += 1, R2632 += 1, R2633 += 1 };
  s2 -> s4 [82, 82] { R2715 += 1, R2653 += 1, R2633 += 1 };
  s2 -> s5 [82, 82] { R2715 += 1, R2653 += 1, R2633 += 1 };
  s2 -> s1 [89, 65535] { R2715 += 1, R2653 += 1, R2633 += 1 };
  s3 -> s1 [0, 81] { R2715 += 1, R2653 += 1, R2633 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s7 [0, 65535] { R2715 += 1 };
  s3 -> s3 [0, 65535] { R2715 += 1, R2653 += 1, R2632 += 1, R2633 += 1 };
  s3 -> s4 [82, 82] { R2715 += 1, R2653 += 1, R2633 += 1 };
  s3 -> s5 [82, 82] { R2715 += 1, R2653 += 1, R2633 += 1 };
  s3 -> s1 [89, 65535] { R2715 += 1, R2653 += 1, R2633 += 1 };
  s4 -> s4 [0, 82] { R2715 += 1, R2653 += 1, R2633 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R2715 += 1, R2653 += 1 };
  s4 -> s7 [0, 65535] { R2715 += 1 };
  s4 -> s4 [89, 65535] { R2715 += 1, R2653 += 1, R2633 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R2715 += 1, R2653 += 1 };
  s5 -> s7 [0, 65535] { R2715 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R2715 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s0 [0, 65535] { R2716 += 1, R2717 += 1 };
  s0 -> s1 [0, 65535] { R2717 += 1, R2672 += 1, R2673 += 1 };
  s0 -> s2 [0, 65535] { R2717 += 1, R2673 += 1, R18 += 1 };
  s1 -> s1 [0, 65535] { R2717 += 1, R2672 += 1, R2673 += 1 };
  s1 -> s2 [0, 65535] { R2717 += 1, R2673 += 1, R18 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R2717 += 1 };
  s2 -> s2 [0, 65535] { R2717 += 1, R2673 += 1, R18 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2717 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 80] { R2719 += 1, R2675 += 1 };
  s0 -> s2 [0, 65535] { R2719 += 1, R2674 += 1, R2675 += 1 };
  s0 -> s0 [0, 65535] { R2718 += 1, R2719 += 1 };
  s0 -> s3 [81, 81] { R2719 += 1, R2675 += 1 };
  s0 -> s4 [81, 81] { R2719 += 1, R2675 += 1 };
  s0 -> s5 [82, 82] { R2719 += 1, R2675 += 1 };
  s0 -> s1 [83, 65535] { R2719 += 1, R2675 += 1 };
  s1 -> s1 [0, 80] { R2719 += 1, R2675 += 1 };
  s1 -> s3 [81, 81] { R2719 += 1, R2675 += 1 };
  s1 -> s4 [81, 81] { R2719 += 1, R2675 += 1 };
  s1 -> s5 [82, 82] { R2719 += 1, R2675 += 1 };
  s1 -> s1 [83, 65535] { R2719 += 1, R2675 += 1 };
  s2 -> s1 [0, 80] { R2719 += 1, R2675 += 1 };
  s2 -> s2 [0, 65535] { R2719 += 1, R2674 += 1, R2675 += 1 };
  s2 -> s3 [81, 81] { R2719 += 1, R2675 += 1 };
  s2 -> s4 [81, 81] { R2719 += 1, R2675 += 1 };
  s2 -> s5 [82, 82] { R2719 += 1, R2675 += 1 };
  s2 -> s1 [83, 65535] { R2719 += 1, R2675 += 1 };
  s4 -> s4 [0, 81] { R2719 += 1, R2675 += 1 };
  s4 -> s7 [82, 82] { R2719 += 1, R2675 += 1 };
  s4 -> s4 [83, 65535] { R2719 += 1, R2675 += 1 };
  s5 -> s5 [0, 80] { R2719 += 1, R2675 += 1 };
  s5 -> s5 [0, 65535] { R2719 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [81, 81] { R2719 += 1, R2675 += 1 };
  s5 -> s8 [81, 81] { R2719 += 1, R2675 += 1 };
  s5 -> s5 [82, 65535] { R2719 += 1, R2675 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s9 [0, 65535] { R2719 += 1 };
  s7 -> s7 [0, 65535] { R2719 += 1, R2675 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R2719 += 1 };
  s8 -> s6 [0, 65535];
  s9 -> s9 [0, 65535] { R2719 += 1 };
  s9 -> s6 [0, 65535];
  accepting s8, s5, s9, s6, s7;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 80] { R2721 += 1, R2677 += 1, R66 += 1 };
  s0 -> s2 [0, 65535] { R2721 += 1, R2676 += 1, R2677 += 1 };
  s0 -> s0 [0, 65535] { R2720 += 1, R2721 += 1 };
  s0 -> s3 [81, 81] { R2721 += 1, R2677 += 1, R66 += 1 };
  s0 -> s4 [81, 81] { R2721 += 1, R2677 += 1, R66 += 1 };
  s0 -> s1 [82, 65535] { R2721 += 1, R2677 += 1, R66 += 1 };
  s1 -> s1 [0, 80] { R2721 += 1, R2677 += 1, R66 += 1 };
  s1 -> s1 [0, 65535] { R2721 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [81, 81] { R2721 += 1, R2677 += 1, R66 += 1 };
  s1 -> s4 [81, 81] { R2721 += 1, R2677 += 1, R66 += 1 };
  s1 -> s1 [82, 65535] { R2721 += 1, R2677 += 1, R66 += 1 };
  s2 -> s1 [0, 80] { R2721 += 1, R2677 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R2721 += 1, R2676 += 1, R2677 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [81, 81] { R2721 += 1, R2677 += 1, R66 += 1 };
  s2 -> s4 [81, 81] { R2721 += 1, R2677 += 1, R66 += 1 };
  s2 -> s1 [82, 65535] { R2721 += 1, R2677 += 1, R66 += 1 };
  s3 -> s3 [0, 65535] { R2721 += 1, R2677 += 1, R66 += 1 };
  s3 -> s6 [0, 65535] { R2721 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2721 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2721 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 80] { R2723 += 1, R2679 += 1, R68 += 1 };
  s0 -> s2 [0, 65535] { R2723 += 1, R2678 += 1, R2679 += 1 };
  s0 -> s0 [0, 65535] { R2722 += 1, R2723 += 1 };
  s0 -> s3 [81, 81] { R2723 += 1, R2679 += 1, R68 += 1 };
  s0 -> s4 [81, 81] { R2723 += 1, R2679 += 1, R68 += 1 };
  s0 -> s1 [82, 65535] { R2723 += 1, R2679 += 1, R68 += 1 };
  s1 -> s1 [0, 80] { R2723 += 1, R2679 += 1, R68 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R2723 += 1 };
  s1 -> s3 [81, 81] { R2723 += 1, R2679 += 1, R68 += 1 };
  s1 -> s4 [81, 81] { R2723 += 1, R2679 += 1, R68 += 1 };
  s1 -> s1 [82, 65535] { R2723 += 1, R2679 += 1, R68 += 1 };
  s2 -> s1 [0, 80] { R2723 += 1, R2679 += 1, R68 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2723 += 1, R2678 += 1, R2679 += 1 };
  s2 -> s3 [81, 81] { R2723 += 1, R2679 += 1, R68 += 1 };
  s2 -> s4 [81, 81] { R2723 += 1, R2679 += 1, R68 += 1 };
  s2 -> s1 [82, 65535] { R2723 += 1, R2679 += 1, R68 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R2723 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2723 += 1, R2679 += 1, R68 += 1 };
  s4 -> s6 [0, 65535] { R2723 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2723 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 80] { R2725 += 1, R2681 += 1, R70 += 1, R71 += 1 };
  s0 -> s0 [0, 65535] { R2724 += 1, R2725 += 1 };
  s0 -> s2 [0, 65535] { R2725 += 1, R2680 += 1, R2681 += 1 };
  s0 -> s3 [81, 81] { R2725 += 1, R2681 += 1, R70 += 1, R71 += 1 };
  s0 -> s4 [81, 81] { R2725 += 1, R2681 += 1, R70 += 1, R71 += 1 };
  s0 -> s1 [82, 65535] { R2725 += 1, R2681 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 80] { R2725 += 1, R2681 += 1, R70 += 1, R71 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R2725 += 1 };
  s1 -> s3 [81, 81] { R2725 += 1, R2681 += 1, R70 += 1, R71 += 1 };
  s1 -> s4 [81, 81] { R2725 += 1, R2681 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [82, 65535] { R2725 += 1, R2681 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [0, 80] { R2725 += 1, R2681 += 1, R70 += 1, R71 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2725 += 1, R2680 += 1, R2681 += 1 };
  s2 -> s3 [81, 81] { R2725 += 1, R2681 += 1, R70 += 1, R71 += 1 };
  s2 -> s4 [81, 81] { R2725 += 1, R2681 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [82, 65535] { R2725 += 1, R2681 += 1, R70 += 1, R71 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R2725 += 1, R2681 += 1, R70 += 1, R71 += 1 };
  s3 -> s6 [0, 65535] { R2725 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2725 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2725 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 80] { R2727 += 1, R2683 += 1, R74 += 1, R75 += 1 };
  s0 -> s0 [0, 65535] { R2726 += 1, R2727 += 1 };
  s0 -> s2 [0, 65535] { R2727 += 1, R2682 += 1, R2683 += 1 };
  s0 -> s3 [81, 81] { R2727 += 1, R2683 += 1, R74 += 1, R75 += 1 };
  s0 -> s4 [81, 81] { R2727 += 1, R2683 += 1, R74 += 1, R75 += 1 };
  s0 -> s1 [82, 65535] { R2727 += 1, R2683 += 1, R74 += 1, R75 += 1 };
  s1 -> s1 [0, 80] { R2727 += 1, R2683 += 1, R74 += 1, R75 += 1 };
  s1 -> s1 [0, 65535] { R2727 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [81, 81] { R2727 += 1, R2683 += 1, R74 += 1, R75 += 1 };
  s1 -> s4 [81, 81] { R2727 += 1, R2683 += 1, R74 += 1, R75 += 1 };
  s1 -> s1 [82, 65535] { R2727 += 1, R2683 += 1, R74 += 1, R75 += 1 };
  s2 -> s1 [0, 80] { R2727 += 1, R2683 += 1, R74 += 1, R75 += 1 };
  s2 -> s2 [0, 65535] { R2727 += 1, R2682 += 1, R2683 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [81, 81] { R2727 += 1, R2683 += 1, R74 += 1, R75 += 1 };
  s2 -> s4 [81, 81] { R2727 += 1, R2683 += 1, R74 += 1, R75 += 1 };
  s2 -> s1 [82, 65535] { R2727 += 1, R2683 += 1, R74 += 1, R75 += 1 };
  s3 -> s3 [0, 65535] { R2727 += 1, R2683 += 1, R74 += 1, R75 += 1 };
  s3 -> s6 [0, 65535] { R2727 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2727 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2727 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 80] { R2729 += 1, R2685 += 1, R2620 += 1, R2621 += 1 };
  s0 -> s0 [0, 65535] { R2728 += 1, R2729 += 1 };
  s0 -> s2 [0, 65535] { R2729 += 1, R2684 += 1, R2685 += 1 };
  s0 -> s3 [81, 81] { R2729 += 1, R2685 += 1, R2620 += 1, R2621 += 1 };
  s0 -> s4 [81, 81] { R2729 += 1, R2685 += 1, R2620 += 1, R2621 += 1 };
  s0 -> s1 [82, 65535] { R2729 += 1, R2685 += 1, R2620 += 1, R2621 += 1 };
  s1 -> s1 [0, 80] { R2729 += 1, R2685 += 1, R2620 += 1, R2621 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R2729 += 1 };
  s1 -> s3 [81, 81] { R2729 += 1, R2685 += 1, R2620 += 1, R2621 += 1 };
  s1 -> s4 [81, 81] { R2729 += 1, R2685 += 1, R2620 += 1, R2621 += 1 };
  s1 -> s1 [82, 65535] { R2729 += 1, R2685 += 1, R2620 += 1, R2621 += 1 };
  s2 -> s1 [0, 80] { R2729 += 1, R2685 += 1, R2620 += 1, R2621 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2729 += 1, R2684 += 1, R2685 += 1 };
  s2 -> s3 [81, 81] { R2729 += 1, R2685 += 1, R2620 += 1, R2621 += 1 };
  s2 -> s4 [81, 81] { R2729 += 1, R2685 += 1, R2620 += 1, R2621 += 1 };
  s2 -> s1 [82, 65535] { R2729 += 1, R2685 += 1, R2620 += 1, R2621 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R2729 += 1, R2685 += 1, R2620 += 1, R2621 += 1 };
  s3 -> s6 [0, 65535] { R2729 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2729 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2729 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 80] { R2731 += 1, R2687 += 1, R2624 += 1, R2625 += 1 };
  s0 -> s2 [0, 65535] { R2731 += 1, R2686 += 1, R2687 += 1 };
  s0 -> s0 [0, 65535] { R2730 += 1, R2731 += 1 };
  s0 -> s3 [81, 81] { R2731 += 1, R2687 += 1, R2624 += 1, R2625 += 1 };
  s0 -> s4 [81, 81] { R2731 += 1, R2687 += 1, R2624 += 1, R2625 += 1 };
  s0 -> s1 [82, 65535] { R2731 += 1, R2687 += 1, R2624 += 1, R2625 += 1 };
  s1 -> s1 [0, 80] { R2731 += 1, R2687 += 1, R2624 += 1, R2625 += 1 };
  s1 -> s1 [0, 65535] { R2731 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [81, 81] { R2731 += 1, R2687 += 1, R2624 += 1, R2625 += 1 };
  s1 -> s4 [81, 81] { R2731 += 1, R2687 += 1, R2624 += 1, R2625 += 1 };
  s1 -> s1 [82, 65535] { R2731 += 1, R2687 += 1, R2624 += 1, R2625 += 1 };
  s2 -> s1 [0, 80] { R2731 += 1, R2687 += 1, R2624 += 1, R2625 += 1 };
  s2 -> s2 [0, 65535] { R2731 += 1, R2686 += 1, R2687 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [81, 81] { R2731 += 1, R2687 += 1, R2624 += 1, R2625 += 1 };
  s2 -> s4 [81, 81] { R2731 += 1, R2687 += 1, R2624 += 1, R2625 += 1 };
  s2 -> s1 [82, 65535] { R2731 += 1, R2687 += 1, R2624 += 1, R2625 += 1 };
  s3 -> s6 [0, 65535] { R2731 += 1 };
  s3 -> s3 [0, 65535] { R2731 += 1, R2687 += 1, R2624 += 1, R2625 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2731 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2731 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 80] { R2733 += 1, R2689 += 1, R2630 += 1, R2631 += 1 };
  s0 -> s0 [0, 65535] { R2732 += 1, R2733 += 1 };
  s0 -> s2 [0, 65535] { R2733 += 1, R2688 += 1, R2689 += 1 };
  s0 -> s3 [81, 81] { R2733 += 1, R2689 += 1, R2630 += 1, R2631 += 1 };
  s0 -> s4 [81, 81] { R2733 += 1, R2689 += 1, R2630 += 1, R2631 += 1 };
  s0 -> s1 [82, 65535] { R2733 += 1, R2689 += 1, R2630 += 1, R2631 += 1 };
  s1 -> s1 [0, 80] { R2733 += 1, R2689 += 1, R2630 += 1, R2631 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R2733 += 1 };
  s1 -> s3 [81, 81] { R2733 += 1, R2689 += 1, R2630 += 1, R2631 += 1 };
  s1 -> s4 [81, 81] { R2733 += 1, R2689 += 1, R2630 += 1, R2631 += 1 };
  s1 -> s1 [82, 65535] { R2733 += 1, R2689 += 1, R2630 += 1, R2631 += 1 };
  s2 -> s1 [0, 80] { R2733 += 1, R2689 += 1, R2630 += 1, R2631 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2733 += 1, R2688 += 1, R2689 += 1 };
  s2 -> s3 [81, 81] { R2733 += 1, R2689 += 1, R2630 += 1, R2631 += 1 };
  s2 -> s4 [81, 81] { R2733 += 1, R2689 += 1, R2630 += 1, R2631 += 1 };
  s2 -> s1 [82, 65535] { R2733 += 1, R2689 += 1, R2630 += 1, R2631 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R2733 += 1 };
  s3 -> s3 [0, 65535] { R2733 += 1, R2689 += 1, R2630 += 1, R2631 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2733 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2733 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [113, 113];
  accepting s1;
};
};
synchronised {  // Automata constraining c1
automaton c1_0 {
  init s0;
  s0 -> s1 [114, 114];
  accepting s1;
};
};
constraint R1 = R2649 && R2 = R2733 && R20 - R2733 = -1 && R21 = R2733 && R22 - R2733 = -1 && R23 = R2733 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R2623 + -1*R2621 - R53 = 0 && R52 + R2622 + R2620 = 0 && R2648 = 0 && R2674 = 0 && R2675 = 0 && R2690 = 0 && R2691 = R2733 && R2692 = 0 && R2693 = R2733 && R2694 = 0 && R2695 = R2733 && R2696 = 0 && R2697 = R2733 && R2698 = 0 && R2699 = R2733 && R2700 = 0 && R2701 = R2733 && R2702 = 0 && R2703 = R2733 && R2704 = 0 && R2705 = R2733 && R2706 = 0 && R2707 = R2733 && R2708 = 0 && R2709 = R2733 && R2710 = 0 && R2711 = R2733 && R2712 = 0 && R2713 = R2733 && R2714 = 0 && R2715 = R2733 && R2716 = 0 && R2717 = R2733 && R2718 = 0 && R2719 = R2733 && R2720 = 0 && R2721 = R2733 && R2722 = 0 && R2723 = R2733 && R2724 = 0 && R2725 = R2733 && R2726 = 0 && R2727 = R2733 && R2728 = 0 && R2729 = R2733 && R2730 = 0 && R2731 = R2733 && R2732 = 0 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R2623 + -1*R2621 - R53 < 1 && -1 < R2649 && 0 < R2733 && (R48 + R79 + R76 != 0 || ((R42 + R72 + R70 != 0 || R43 + R73 + R71 + -1*R2623 + -1*R2621 - R53 = 0 || R53 + R2623 + R2621 < 1) && (R42 + R72 + R70 = 0 || R53 + R2623 + R2621 < 1))) && (R48 + R79 + R76 != 0 || ((R46 + R77 + R74 != 0 || R47 + R78 + R75 + -1*R2623 + -1*R2621 - R53 = 0 || R53 + R2623 + R2621 < 1) && (R46 + R77 + R74 = 0 || R53 + R2623 + R2621 < 1))) && (R2634 != 0 || R2635 = R2649 || (R17 = 0 && R2649 = 0)) && (R2636 != 0 || R2637 = R2649 || (R17 = 0 && R2649 = 0)) && (R2638 != 0 || R2639 = R2649 || (R17 = 0 && R2649 = 0)) && (R2640 != 0 || R2641 = R2649 || (R17 = 0 && R2649 = 0)) && (R2642 != 0 || R2643 = R2649 || (R17 = 0 && R2649 = 0)) && (R2644 != 0 || R2645 = R2649 || (R17 = 0 && R2649 = 0)) && (R2646 != 0 || R2647 = R2649 || (R17 = 0 && R2649 = 0)) && (R2650 != 0 || R2649 = R2651 || (R17 = 0 && R2649 = 0)) && (R2652 != 0 || R2649 = R2653 || (R17 = 0 && R2649 = 0)) && (R18 = 0 || (R2672 = 0 && R2673 = 0)) && (R18 = 0 || (R2676 = 0 && R2677 = 0)) && (R18 = 0 || (R2678 = 0 && R2679 = 0)) && (R18 = 0 || (R2680 = 0 && R2681 = 0)) && (R18 = 0 || (R2682 = 0 && R2683 = 0)) && (R18 = 0 || (R2684 = 0 && R2685 = 0)) && (R18 = 0 || (R2686 = 0 && R2687 = 0)) && (R18 = 0 || (R2688 = 0 && R2689 = 0)) && (R19 = 0 || (R2654 = 0 && R2655 = 0)) && (R19 = 0 || (R2656 = 0 && R2657 = 0)) && (R19 = 0 || (R2658 = 0 && R2659 = 0)) && (R19 = 0 || (R2660 = 0 && R2661 = 0)) && (R19 = 0 || (R2662 = 0 && R2663 = 0)) && (R19 = 0 || (R2664 = 0 && R2665 = 0)) && (R19 = 0 || (R2666 = 0 && R2667 = 0)) && (R19 = 0 || (R2668 = 0 && R2669 = 0)) && (R19 = 0 || (R2670 = 0 && R2671 = 0)) && (R48 + R79 + R76 = 0 || (R42 + R72 + R70 = 0 && R43 + R73 + R71 + -1*R2623 + -1*R2621 - R53 = 0)) && (R48 + R79 + R76 = 0 || (R46 + R77 + R74 = 0 && R47 + R78 + R75 + -1*R2623 + -1*R2621 - R53 = 0)) && (R58 + R2629 + R2626 = 0 || (R56 + R2627 + R2624 = 0 && R57 + R2628 + R2625 = 0)) && (R58 + R2629 + R2626 = 0 || (R62 + R2632 + R2630 = 0 && R63 + R2633 + R2631 = 0)) && (R2634 = 0 || (R17 = 0 && R2649 = 0)) && (R2636 = 0 || (R17 = 0 && R2649 = 0)) && (R2638 = 0 || (R17 = 0 && R2649 = 0)) && (R2640 = 0 || (R17 = 0 && R2649 = 0)) && (R2642 = 0 || (R17 = 0 && R2649 = 0)) && (R2644 = 0 || (R17 = 0 && R2649 = 0)) && (R2646 = 0 || (R17 = 0 && R2649 = 0)) && (R2650 = 0 || (R17 = 0 && R2649 = 0)) && (R2652 = 0 || (R17 = 0 && R2649 = 0));
// End of Parikh automata intersection problem
