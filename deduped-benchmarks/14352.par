// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R10252, R10253, R10254, R10255, R10256, R10257, R10258, R10259, R10260, R10261, R10574, R10575, R10576, R10577, R10578, R10579, R10580, R10581, R10582, R10583, R10584, R10585, R10586, R10587, R10588, R10589, R10590, R10591, R10592, R10593, R10594, R10595, R10596, R10597, R10598, R10599, R10600, R10601, R10602, R10603, R10604, R10605, R10606, R10607, R10608, R10609, R10610, R10611, R10612, R10613, R10614, R10615, R10616, R10617, R10618, R10619, R10620, R10621, R10622, R10623, R10624, R10625, R10626, R10627, R10628, R10629, R10630, R10631, R10632, R10633, R10634, R10635, R10636, R10637, R10638, R10639, R10640, R10641, R10642, R10643, R10644, R10645, R10646, R10647, R10648, R10649, R10650, R10651, R10652, R10653, R10654, R10655, R10656, R10657, R10658, R10659, R10660, R10661, R10662, R10663, R10664, R10665, R10666, R10667, R10668, R10669, R10670, R10671, R10672, R10673, R10674, R10675, R10676, R10677, R11, R12, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R70, R71, R72, R73, R7706, R7707, R7708, R7709, R7710, R7711, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [81, 81];
  s0 -> s0 [82, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [81, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 80];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [81, 81];
  s0 -> s1 [82, 65535];
  s1 -> s1 [0, 80];
  s1 -> s2 [81, 81];
  s1 -> s1 [82, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s1 [0, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R25 += 1 };
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R10598 += 1, R10599 += 1 };
  s0 -> s1 [0, 65535] { R10599 += 1, R19 += 1 };
  s1 -> s1 [0, 65535] { R10599 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 80] { R10601 += 1 };
  s0 -> s0 [0, 65535] { R10600 += 1, R10601 += 1 };
  s0 -> s2 [81, 81] { R10601 += 1 };
  s0 -> s3 [81, 81] { R10601 += 1 };
  s0 -> s1 [83, 65535] { R10601 += 1 };
  s1 -> s1 [0, 80] { R10601 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R10601 += 1 };
  s1 -> s3 [81, 81] { R10601 += 1 };
  s1 -> s1 [83, 65535] { R10601 += 1 };
  s2 -> s2 [0, 81] { R10601 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [83, 65535] { R10601 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 80] { R10603 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R10602 += 1, R10603 += 1 };
  s0 -> s2 [81, 81] { R10603 += 1, R38 += 1 };
  s0 -> s3 [81, 81] { R10603 += 1, R38 += 1 };
  s0 -> s1 [82, 65535] { R10603 += 1, R38 += 1 };
  s1 -> s1 [0, 80] { R10603 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R10603 += 1, R38 += 1 };
  s1 -> s3 [81, 81] { R10603 += 1, R38 += 1 };
  s1 -> s1 [82, 65535] { R10603 += 1, R38 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10603 += 1, R38 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 80] { R10605 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R10604 += 1, R10605 += 1 };
  s0 -> s2 [81, 81] { R10605 += 1, R40 += 1 };
  s0 -> s3 [81, 81] { R10605 += 1, R40 += 1 };
  s0 -> s1 [82, 65535] { R10605 += 1, R40 += 1 };
  s1 -> s1 [0, 80] { R10605 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R10605 += 1, R40 += 1 };
  s1 -> s3 [81, 81] { R10605 += 1, R40 += 1 };
  s1 -> s1 [82, 65535] { R10605 += 1, R40 += 1 };
  s2 -> s2 [0, 65535] { R10605 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 80] { R10607 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R10606 += 1, R10607 += 1 };
  s0 -> s2 [81, 81] { R10607 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [81, 81] { R10607 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [82, 65535] { R10607 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 80] { R10607 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R10607 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [81, 81] { R10607 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [82, 65535] { R10607 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535] { R10607 += 1, R42 += 1, R43 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 80] { R10609 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R10608 += 1, R10609 += 1 };
  s0 -> s2 [81, 81] { R10609 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [81, 81] { R10609 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [82, 65535] { R10609 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 80] { R10609 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R10609 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [81, 81] { R10609 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [82, 65535] { R10609 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10609 += 1, R46 += 1, R47 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 80] { R10611 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R10610 += 1, R10611 += 1 };
  s0 -> s2 [81, 81] { R10611 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [81, 81] { R10611 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [82, 65535] { R10611 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 80] { R10611 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R10611 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [81, 81] { R10611 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [82, 65535] { R10611 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535] { R10611 += 1, R52 += 1, R53 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 80] { R10613 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R10612 += 1, R10613 += 1 };
  s0 -> s2 [81, 81] { R10613 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [81, 81] { R10613 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [82, 65535] { R10613 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 80] { R10613 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R10613 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [81, 81] { R10613 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [82, 65535] { R10613 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R10613 += 1, R56 += 1, R57 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 80] { R10615 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R10614 += 1, R10615 += 1 };
  s0 -> s2 [81, 81] { R10615 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [81, 81] { R10615 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [82, 65535] { R10615 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 80] { R10615 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R10615 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [81, 81] { R10615 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [82, 65535] { R10615 += 1, R62 += 1, R63 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10615 += 1, R62 += 1, R63 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 80] { R10635 += 1 };
  s0 -> s0 [0, 65535] { R10634 += 1, R10635 += 1 };
  s0 -> s2 [81, 81] { R10635 += 1 };
  s0 -> s1 [82, 65535] { R10635 += 1 };
  s1 -> s1 [0, 80] { R10635 += 1 };
  s1 -> s2 [81, 81] { R10635 += 1 };
  s1 -> s1 [82, 65535] { R10635 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10635 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R10636 += 1, R10637 += 1 };
  s0 -> s1 [0, 65535] { R10637 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R10637 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 80] { R10639 += 1 };
  s0 -> s0 [0, 65535] { R10638 += 1, R10639 += 1 };
  s0 -> s2 [0, 65535] { R10639 += 1, R8 += 1 };
  s0 -> s3 [81, 81] { R10639 += 1 };
  s0 -> s1 [82, 65535] { R10639 += 1 };
  s1 -> s1 [0, 80] { R10639 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [81, 81] { R10639 += 1 };
  s1 -> s1 [82, 65535] { R10639 += 1 };
  s2 -> s1 [0, 80] { R10639 += 1 };
  s2 -> s2 [0, 65535] { R10639 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [81, 81] { R10639 += 1 };
  s2 -> s1 [82, 65535] { R10639 += 1 };
  s3 -> s3 [0, 65535] { R10639 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 80] { R10641 += 1, R10579 += 1 };
  s0 -> s2 [0, 65535] { R10641 += 1, R10578 += 1, R10579 += 1 };
  s0 -> s0 [0, 65535] { R10640 += 1, R10641 += 1 };
  s0 -> s1 [82, 65535] { R10641 += 1, R10579 += 1 };
  s1 -> s1 [0, 80] { R10641 += 1, R10579 += 1 };
  s1 -> s1 [0, 65535] { R10641 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [82, 65535] { R10641 += 1, R10579 += 1 };
  s2 -> s1 [0, 80] { R10641 += 1, R10579 += 1 };
  s2 -> s2 [0, 65535] { R10641 += 1, R10578 += 1, R10579 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [82, 65535] { R10641 += 1, R10579 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R10643 += 1, R10580 += 1, R10581 += 1 };
  s0 -> s2 [0, 65535] { R10643 += 1, R10581 += 1, R17 += 1 };
  s0 -> s0 [0, 65535] { R10642 += 1, R10643 += 1 };
  s1 -> s1 [0, 65535] { R10643 += 1, R10580 += 1, R10581 += 1 };
  s1 -> s2 [0, 65535] { R10643 += 1, R10581 += 1, R17 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10643 += 1, R10581 += 1, R17 += 1 };
  s2 -> s3 [0, 65535] { R10643 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10643 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 65535] { R10645 += 1, R10583 += 1 };
  s0 -> s2 [0, 65535] { R10645 += 1, R10582 += 1, R10583 += 1 };
  s0 -> s0 [0, 65535] { R10644 += 1, R10645 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R10645 += 1 };
  s1 -> s1 [0, 65535] { R10645 += 1, R10583 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10645 += 1, R10583 += 1 };
  s2 -> s2 [0, 65535] { R10645 += 1, R10582 += 1, R10583 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10645 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R10647 += 1, R10585 += 1, R67 += 1 };
  s0 -> s0 [0, 65535] { R10646 += 1, R10647 += 1 };
  s0 -> s2 [0, 65535] { R10647 += 1, R10584 += 1, R10585 += 1 };
  s1 -> s1 [0, 65535] { R10647 += 1, R10585 += 1, R67 += 1 };
  s1 -> s4 [0, 65535] { R10647 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10647 += 1, R10585 += 1, R67 += 1 };
  s2 -> s2 [0, 65535] { R10647 += 1, R10584 += 1, R10585 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10647 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 81] { R10649 += 1, R10587 += 1 };
  s0 -> s2 [0, 65535] { R10649 += 1, R10586 += 1, R10587 += 1 };
  s0 -> s0 [0, 65535] { R10648 += 1, R10649 += 1 };
  s0 -> s3 [0, 65535] { R10649 += 1, R10587 += 1, R69 += 1 };
  s0 -> s1 [83, 65535] { R10649 += 1, R10587 += 1 };
  s1 -> s1 [0, 81] { R10649 += 1, R10587 += 1 };
  s1 -> s1 [0, 65535] { R10649 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [83, 65535] { R10649 += 1, R10587 += 1 };
  s2 -> s1 [0, 81] { R10649 += 1, R10587 += 1 };
  s2 -> s2 [0, 65535] { R10649 += 1, R10586 += 1, R10587 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R10649 += 1, R10587 += 1, R69 += 1 };
  s2 -> s1 [83, 65535] { R10649 += 1, R10587 += 1 };
  s3 -> s1 [0, 81] { R10649 += 1, R10587 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R10649 += 1 };
  s3 -> s3 [0, 65535] { R10649 += 1, R10587 += 1, R69 += 1 };
  s3 -> s1 [83, 65535] { R10649 += 1, R10587 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10649 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 81] { R10651 += 1, R10589 += 1, R73 += 1 };
  s0 -> s2 [0, 65535] { R10651 += 1, R10589 += 1, R72 += 1, R73 += 1 };
  s0 -> s3 [0, 65535] { R10651 += 1, R10588 += 1, R10589 += 1 };
  s0 -> s0 [0, 65535] { R10650 += 1, R10651 += 1 };
  s0 -> s1 [83, 65535] { R10651 += 1, R10589 += 1, R73 += 1 };
  s1 -> s1 [0, 81] { R10651 += 1, R10589 += 1, R73 += 1 };
  s1 -> s1 [0, 65535] { R10651 += 1, R10589 += 1 };
  s1 -> s5 [0, 65535] { R10651 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [83, 65535] { R10651 += 1, R10589 += 1, R73 += 1 };
  s2 -> s1 [0, 81] { R10651 += 1, R10589 += 1, R73 += 1 };
  s2 -> s2 [0, 65535] { R10651 += 1, R10589 += 1, R72 += 1, R73 += 1 };
  s2 -> s5 [0, 65535] { R10651 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [83, 65535] { R10651 += 1, R10589 += 1, R73 += 1 };
  s3 -> s1 [0, 81] { R10651 += 1, R10589 += 1, R73 += 1 };
  s3 -> s2 [0, 65535] { R10651 += 1, R10589 += 1, R72 += 1, R73 += 1 };
  s3 -> s3 [0, 65535] { R10651 += 1, R10588 += 1, R10589 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [83, 65535] { R10651 += 1, R10589 += 1, R73 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10651 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R10653 += 1, R10591 += 1 };
  s0 -> s0 [0, 65535] { R10652 += 1, R10653 += 1 };
  s0 -> s2 [0, 65535] { R10653 += 1, R10590 += 1, R10591 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R10653 += 1, R10591 += 1 };
  s1 -> s4 [0, 65535] { R10653 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10653 += 1, R10591 += 1 };
  s2 -> s2 [0, 65535] { R10653 += 1, R10590 += 1, R10591 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10653 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 82] { R10655 += 1, R10593 += 1, R10255 += 1 };
  s0 -> s2 [0, 65535] { R10655 += 1, R10592 += 1, R10593 += 1 };
  s0 -> s3 [0, 65535] { R10655 += 1, R10593 += 1, R10254 += 1, R10255 += 1 };
  s0 -> s0 [0, 65535] { R10654 += 1, R10655 += 1 };
  s0 -> s4 [88, 88] { R10655 += 1, R10593 += 1, R10255 += 1 };
  s0 -> s1 [89, 65535] { R10655 += 1, R10593 += 1, R10255 += 1 };
  s1 -> s1 [0, 82] { R10655 += 1, R10593 += 1, R10255 += 1 };
  s1 -> s4 [88, 88] { R10655 += 1, R10593 += 1, R10255 += 1 };
  s1 -> s1 [89, 65535] { R10655 += 1, R10593 += 1, R10255 += 1 };
  s2 -> s1 [0, 82] { R10655 += 1, R10593 += 1, R10255 += 1 };
  s2 -> s2 [0, 65535] { R10655 += 1, R10592 += 1, R10593 += 1 };
  s2 -> s3 [0, 65535] { R10655 += 1, R10593 += 1, R10254 += 1, R10255 += 1 };
  s2 -> s4 [88, 88] { R10655 += 1, R10593 += 1, R10255 += 1 };
  s2 -> s1 [89, 65535] { R10655 += 1, R10593 += 1, R10255 += 1 };
  s3 -> s1 [0, 82] { R10655 += 1, R10593 += 1, R10255 += 1 };
  s3 -> s3 [0, 65535] { R10655 += 1, R10593 += 1, R10254 += 1, R10255 += 1 };
  s3 -> s4 [88, 88] { R10655 += 1, R10593 += 1, R10255 += 1 };
  s3 -> s1 [89, 65535] { R10655 += 1, R10593 += 1, R10255 += 1 };
  s4 -> s4 [0, 82] { R10655 += 1, R10593 += 1, R10255 += 1 };
  s4 -> s5 [0, 65535] { R10655 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R10655 += 1, R10593 += 1 };
  s4 -> s4 [88, 65535] { R10655 += 1, R10593 += 1, R10255 += 1 };
  s5 -> s5 [0, 65535] { R10655 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s4, s5, s6;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R10657 += 1, R10595 += 1, R10260 += 1, R10261 += 1 };
  s0 -> s0 [0, 65535] { R10656 += 1, R10657 += 1 };
  s0 -> s2 [0, 65535] { R10657 += 1, R10595 += 1, R10259 += 1, R10260 += 1 };
  s0 -> s3 [0, 65535] { R10657 += 1, R10594 += 1, R10595 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R10657 += 1, R10595 += 1, R10260 += 1, R10261 += 1 };
  s1 -> s6 [0, 65535] { R10657 += 1, R10595 += 1 };
  s1 -> s5 [0, 65535] { R10657 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R10657 += 1, R10595 += 1, R10260 += 1, R10261 += 1 };
  s2 -> s5 [0, 65535] { R10657 += 1 };
  s2 -> s2 [0, 65535] { R10657 += 1, R10595 += 1, R10259 += 1, R10260 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R10657 += 1, R10595 += 1, R10260 += 1, R10261 += 1 };
  s3 -> s2 [0, 65535] { R10657 += 1, R10595 += 1, R10259 += 1, R10260 += 1 };
  s3 -> s3 [0, 65535] { R10657 += 1, R10594 += 1, R10595 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10657 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R10657 += 1, R10595 += 1 };
  s6 -> s5 [0, 65535] { R10657 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 82] { R10659 += 1, R10597 += 1, R10577 += 1 };
  s0 -> s0 [0, 65535] { R10658 += 1, R10659 += 1 };
  s0 -> s2 [0, 65535] { R10659 += 1, R10596 += 1, R10597 += 1 };
  s0 -> s1 [0, 65535] { R10659 += 1, R10597 += 1 };
  s0 -> s1 [89, 65535] { R10659 += 1, R10597 += 1, R10577 += 1 };
  s1 -> s1 [0, 82] { R10659 += 1, R10597 += 1, R10577 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R10659 += 1 };
  s1 -> s1 [0, 65535] { R10659 += 1, R10597 += 1 };
  s1 -> s1 [89, 65535] { R10659 += 1, R10597 += 1, R10577 += 1 };
  s2 -> s1 [0, 82] { R10659 += 1, R10597 += 1, R10577 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10659 += 1, R10596 += 1, R10597 += 1 };
  s2 -> s1 [0, 65535] { R10659 += 1, R10597 += 1 };
  s2 -> s1 [89, 65535] { R10659 += 1, R10597 += 1, R10577 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10659 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R10661 += 1, R10616 += 1, R10617 += 1 };
  s0 -> s2 [0, 65535] { R10661 += 1, R10617 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R10660 += 1, R10661 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R10661 += 1, R10616 += 1, R10617 += 1 };
  s1 -> s2 [0, 65535] { R10661 += 1, R10617 += 1, R18 += 1 };
  s2 -> s3 [0, 65535] { R10661 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10661 += 1, R10617 += 1, R18 += 1 };
  s3 -> s3 [0, 65535] { R10661 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 80] { R10663 += 1, R10619 += 1 };
  s0 -> s0 [0, 65535] { R10662 += 1, R10663 += 1 };
  s0 -> s2 [0, 65535] { R10663 += 1, R10618 += 1, R10619 += 1 };
  s0 -> s3 [81, 81] { R10663 += 1, R10619 += 1 };
  s0 -> s4 [81, 81] { R10663 += 1, R10619 += 1 };
  s0 -> s5 [82, 82] { R10663 += 1, R10619 += 1 };
  s0 -> s1 [83, 65535] { R10663 += 1, R10619 += 1 };
  s1 -> s1 [0, 80] { R10663 += 1, R10619 += 1 };
  s1 -> s3 [81, 81] { R10663 += 1, R10619 += 1 };
  s1 -> s4 [81, 81] { R10663 += 1, R10619 += 1 };
  s1 -> s5 [82, 82] { R10663 += 1, R10619 += 1 };
  s1 -> s1 [83, 65535] { R10663 += 1, R10619 += 1 };
  s2 -> s1 [0, 80] { R10663 += 1, R10619 += 1 };
  s2 -> s2 [0, 65535] { R10663 += 1, R10618 += 1, R10619 += 1 };
  s2 -> s3 [81, 81] { R10663 += 1, R10619 += 1 };
  s2 -> s4 [81, 81] { R10663 += 1, R10619 += 1 };
  s2 -> s5 [82, 82] { R10663 += 1, R10619 += 1 };
  s2 -> s1 [83, 65535] { R10663 += 1, R10619 += 1 };
  s3 -> s3 [0, 81] { R10663 += 1, R10619 += 1 };
  s3 -> s8 [82, 82] { R10663 += 1, R10619 += 1 };
  s3 -> s3 [83, 65535] { R10663 += 1, R10619 += 1 };
  s5 -> s5 [0, 80] { R10663 += 1, R10619 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R10663 += 1 };
  s5 -> s7 [81, 81] { R10663 += 1, R10619 += 1 };
  s5 -> s8 [81, 81] { R10663 += 1, R10619 += 1 };
  s5 -> s5 [82, 65535] { R10663 += 1, R10619 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R10663 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s6 [0, 65535];
  s8 -> s9 [0, 65535] { R10663 += 1 };
  s8 -> s8 [0, 65535] { R10663 += 1, R10619 += 1 };
  s9 -> s6 [0, 65535];
  s9 -> s9 [0, 65535] { R10663 += 1 };
  accepting s8, s5, s9, s6, s7;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 80] { R10665 += 1, R10621 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R10664 += 1, R10665 += 1 };
  s0 -> s2 [0, 65535] { R10665 += 1, R10620 += 1, R10621 += 1 };
  s0 -> s3 [81, 81] { R10665 += 1, R10621 += 1, R66 += 1 };
  s0 -> s4 [81, 81] { R10665 += 1, R10621 += 1, R66 += 1 };
  s0 -> s1 [82, 65535] { R10665 += 1, R10621 += 1, R66 += 1 };
  s1 -> s1 [0, 80] { R10665 += 1, R10621 += 1, R66 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10665 += 1 };
  s1 -> s3 [81, 81] { R10665 += 1, R10621 += 1, R66 += 1 };
  s1 -> s4 [81, 81] { R10665 += 1, R10621 += 1, R66 += 1 };
  s1 -> s1 [82, 65535] { R10665 += 1, R10621 += 1, R66 += 1 };
  s2 -> s1 [0, 80] { R10665 += 1, R10621 += 1, R66 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10665 += 1, R10620 += 1, R10621 += 1 };
  s2 -> s3 [81, 81] { R10665 += 1, R10621 += 1, R66 += 1 };
  s2 -> s4 [81, 81] { R10665 += 1, R10621 += 1, R66 += 1 };
  s2 -> s1 [82, 65535] { R10665 += 1, R10621 += 1, R66 += 1 };
  s3 -> s3 [0, 65535] { R10665 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10665 += 1, R10621 += 1, R66 += 1 };
  s4 -> s6 [0, 65535] { R10665 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10665 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 80] { R10667 += 1, R10623 += 1, R68 += 1 };
  s0 -> s0 [0, 65535] { R10666 += 1, R10667 += 1 };
  s0 -> s2 [0, 65535] { R10667 += 1, R10622 += 1, R10623 += 1 };
  s0 -> s3 [81, 81] { R10667 += 1, R10623 += 1, R68 += 1 };
  s0 -> s4 [81, 81] { R10667 += 1, R10623 += 1, R68 += 1 };
  s0 -> s1 [82, 65535] { R10667 += 1, R10623 += 1, R68 += 1 };
  s1 -> s1 [0, 80] { R10667 += 1, R10623 += 1, R68 += 1 };
  s1 -> s1 [0, 65535] { R10667 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [81, 81] { R10667 += 1, R10623 += 1, R68 += 1 };
  s1 -> s4 [81, 81] { R10667 += 1, R10623 += 1, R68 += 1 };
  s1 -> s1 [82, 65535] { R10667 += 1, R10623 += 1, R68 += 1 };
  s2 -> s1 [0, 80] { R10667 += 1, R10623 += 1, R68 += 1 };
  s2 -> s2 [0, 65535] { R10667 += 1, R10622 += 1, R10623 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [81, 81] { R10667 += 1, R10623 += 1, R68 += 1 };
  s2 -> s4 [81, 81] { R10667 += 1, R10623 += 1, R68 += 1 };
  s2 -> s1 [82, 65535] { R10667 += 1, R10623 += 1, R68 += 1 };
  s3 -> s6 [0, 65535] { R10667 += 1 };
  s3 -> s3 [0, 65535] { R10667 += 1, R10623 += 1, R68 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10667 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10667 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 80] { R10669 += 1, R10625 += 1, R70 += 1, R71 += 1 };
  s0 -> s2 [0, 65535] { R10669 += 1, R10624 += 1, R10625 += 1 };
  s0 -> s0 [0, 65535] { R10668 += 1, R10669 += 1 };
  s0 -> s3 [81, 81] { R10669 += 1, R10625 += 1, R70 += 1, R71 += 1 };
  s0 -> s4 [81, 81] { R10669 += 1, R10625 += 1, R70 += 1, R71 += 1 };
  s0 -> s1 [82, 65535] { R10669 += 1, R10625 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 80] { R10669 += 1, R10625 += 1, R70 += 1, R71 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10669 += 1 };
  s1 -> s3 [81, 81] { R10669 += 1, R10625 += 1, R70 += 1, R71 += 1 };
  s1 -> s4 [81, 81] { R10669 += 1, R10625 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [82, 65535] { R10669 += 1, R10625 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [0, 80] { R10669 += 1, R10625 += 1, R70 += 1, R71 += 1 };
  s2 -> s2 [0, 65535] { R10669 += 1, R10624 += 1, R10625 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [81, 81] { R10669 += 1, R10625 += 1, R70 += 1, R71 += 1 };
  s2 -> s4 [81, 81] { R10669 += 1, R10625 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [82, 65535] { R10669 += 1, R10625 += 1, R70 += 1, R71 += 1 };
  s3 -> s3 [0, 65535] { R10669 += 1, R10625 += 1, R70 += 1, R71 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R10669 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10669 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10669 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 80] { R10671 += 1, R10627 += 1, R7706 += 1, R7707 += 1 };
  s0 -> s2 [0, 80] { R10671 += 1, R10627 += 1, R7707 += 1, R7708 += 1 };
  s0 -> s3 [0, 65535] { R10671 += 1, R10626 += 1, R10627 += 1 };
  s0 -> s0 [0, 65535] { R10670 += 1, R10671 += 1 };
  s0 -> s4 [81, 81] { R10671 += 1, R10627 += 1, R7706 += 1, R7707 += 1 };
  s0 -> s5 [81, 81] { R10671 += 1, R10627 += 1, R7707 += 1, R7708 += 1 };
  s0 -> s6 [81, 81] { R10671 += 1, R10627 += 1, R7706 += 1, R7707 += 1 };
  s0 -> s7 [81, 81] { R10671 += 1, R10627 += 1, R7707 += 1, R7708 += 1 };
  s0 -> s1 [82, 65535] { R10671 += 1, R10627 += 1, R7706 += 1, R7707 += 1 };
  s0 -> s2 [82, 65535] { R10671 += 1, R10627 += 1, R7707 += 1, R7708 += 1 };
  s1 -> s1 [0, 80] { R10671 += 1, R10627 += 1, R7706 += 1, R7707 += 1 };
  s1 -> s2 [0, 80] { R10671 += 1, R10627 += 1, R7707 += 1, R7708 += 1 };
  s1 -> s4 [81, 81] { R10671 += 1, R10627 += 1, R7706 += 1, R7707 += 1 };
  s1 -> s5 [81, 81] { R10671 += 1, R10627 += 1, R7707 += 1, R7708 += 1 };
  s1 -> s6 [81, 81] { R10671 += 1, R10627 += 1, R7706 += 1, R7707 += 1 };
  s1 -> s7 [81, 81] { R10671 += 1, R10627 += 1, R7707 += 1, R7708 += 1 };
  s1 -> s1 [82, 65535] { R10671 += 1, R10627 += 1, R7706 += 1, R7707 += 1 };
  s1 -> s2 [82, 65535] { R10671 += 1, R10627 += 1, R7707 += 1, R7708 += 1 };
  s2 -> s11 [0, 80] { R10671 += 1, R10627 += 1 };
  s2 -> s2 [0, 80] { R10671 += 1, R10627 += 1, R7707 += 1, R7708 += 1 };
  s2 -> s5 [81, 81] { R10671 += 1, R10627 += 1, R7707 += 1, R7708 += 1 };
  s2 -> s12 [81, 81] { R10671 += 1, R10627 += 1 };
  s2 -> s7 [81, 81] { R10671 += 1, R10627 += 1, R7707 += 1, R7708 += 1 };
  s2 -> s8 [81, 81] { R10671 += 1, R10627 += 1 };
  s2 -> s11 [82, 65535] { R10671 += 1, R10627 += 1 };
  s2 -> s2 [82, 65535] { R10671 += 1, R10627 += 1, R7707 += 1, R7708 += 1 };
  s3 -> s1 [0, 80] { R10671 += 1, R10627 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s2 [0, 80] { R10671 += 1, R10627 += 1, R7707 += 1, R7708 += 1 };
  s3 -> s3 [0, 65535] { R10671 += 1, R10626 += 1, R10627 += 1 };
  s3 -> s4 [81, 81] { R10671 += 1, R10627 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s5 [81, 81] { R10671 += 1, R10627 += 1, R7707 += 1, R7708 += 1 };
  s3 -> s6 [81, 81] { R10671 += 1, R10627 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s7 [81, 81] { R10671 += 1, R10627 += 1, R7707 += 1, R7708 += 1 };
  s3 -> s1 [82, 65535] { R10671 += 1, R10627 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s2 [82, 65535] { R10671 += 1, R10627 += 1, R7707 += 1, R7708 += 1 };
  s6 -> s6 [0, 65535] { R10671 += 1, R10627 += 1, R7706 += 1, R7707 += 1 };
  s6 -> s7 [0, 65535] { R10671 += 1, R10627 += 1, R7707 += 1, R7708 += 1 };
  s7 -> s7 [0, 65535] { R10671 += 1, R10627 += 1, R7707 += 1, R7708 += 1 };
  s7 -> s8 [0, 65535] { R10671 += 1, R10627 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [0, 65535] { R10671 += 1 };
  s8 -> s8 [0, 65535] { R10671 += 1, R10627 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R10671 += 1 };
  s11 -> s11 [0, 80] { R10671 += 1, R10627 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R10671 += 1 };
  s11 -> s12 [81, 81] { R10671 += 1, R10627 += 1 };
  s11 -> s8 [81, 81] { R10671 += 1, R10627 += 1 };
  s11 -> s11 [82, 65535] { R10671 += 1, R10627 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R10671 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 80] { R10673 += 1, R10629 += 1, R10252 += 1, R10253 += 1 };
  s0 -> s0 [0, 65535] { R10672 += 1, R10673 += 1 };
  s0 -> s2 [0, 65535] { R10673 += 1, R10628 += 1, R10629 += 1 };
  s0 -> s3 [81, 81] { R10673 += 1, R10629 += 1, R10252 += 1, R10253 += 1 };
  s0 -> s4 [81, 81] { R10673 += 1, R10629 += 1, R10252 += 1, R10253 += 1 };
  s0 -> s1 [82, 65535] { R10673 += 1, R10629 += 1, R10252 += 1, R10253 += 1 };
  s1 -> s1 [0, 80] { R10673 += 1, R10629 += 1, R10252 += 1, R10253 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10673 += 1 };
  s1 -> s3 [81, 81] { R10673 += 1, R10629 += 1, R10252 += 1, R10253 += 1 };
  s1 -> s4 [81, 81] { R10673 += 1, R10629 += 1, R10252 += 1, R10253 += 1 };
  s1 -> s1 [82, 65535] { R10673 += 1, R10629 += 1, R10252 += 1, R10253 += 1 };
  s2 -> s1 [0, 80] { R10673 += 1, R10629 += 1, R10252 += 1, R10253 += 1 };
  s2 -> s2 [0, 65535] { R10673 += 1, R10628 += 1, R10629 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [81, 81] { R10673 += 1, R10629 += 1, R10252 += 1, R10253 += 1 };
  s2 -> s4 [81, 81] { R10673 += 1, R10629 += 1, R10252 += 1, R10253 += 1 };
  s2 -> s1 [82, 65535] { R10673 += 1, R10629 += 1, R10252 += 1, R10253 += 1 };
  s3 -> s3 [0, 65535] { R10673 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10673 += 1, R10629 += 1, R10252 += 1, R10253 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R10673 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10673 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 80] { R10675 += 1, R10631 += 1, R10256 += 1, R10257 += 1 };
  s0 -> s2 [0, 65535] { R10675 += 1, R10630 += 1, R10631 += 1 };
  s0 -> s0 [0, 65535] { R10674 += 1, R10675 += 1 };
  s0 -> s3 [81, 81] { R10675 += 1, R10631 += 1, R10256 += 1, R10257 += 1 };
  s0 -> s4 [81, 81] { R10675 += 1, R10631 += 1, R10256 += 1, R10257 += 1 };
  s0 -> s1 [82, 65535] { R10675 += 1, R10631 += 1, R10256 += 1, R10257 += 1 };
  s1 -> s1 [0, 80] { R10675 += 1, R10631 += 1, R10256 += 1, R10257 += 1 };
  s1 -> s1 [0, 65535] { R10675 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [81, 81] { R10675 += 1, R10631 += 1, R10256 += 1, R10257 += 1 };
  s1 -> s4 [81, 81] { R10675 += 1, R10631 += 1, R10256 += 1, R10257 += 1 };
  s1 -> s1 [82, 65535] { R10675 += 1, R10631 += 1, R10256 += 1, R10257 += 1 };
  s2 -> s1 [0, 80] { R10675 += 1, R10631 += 1, R10256 += 1, R10257 += 1 };
  s2 -> s2 [0, 65535] { R10675 += 1, R10630 += 1, R10631 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [81, 81] { R10675 += 1, R10631 += 1, R10256 += 1, R10257 += 1 };
  s2 -> s4 [81, 81] { R10675 += 1, R10631 += 1, R10256 += 1, R10257 += 1 };
  s2 -> s1 [82, 65535] { R10675 += 1, R10631 += 1, R10256 += 1, R10257 += 1 };
  s3 -> s3 [0, 65535] { R10675 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10675 += 1, R10631 += 1, R10256 += 1, R10257 += 1 };
  s4 -> s6 [0, 65535] { R10675 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10675 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 80] { R10677 += 1, R10633 += 1, R10575 += 1 };
  s0 -> s2 [0, 80] { R10677 += 1, R10633 += 1, R10574 += 1, R10575 += 1 };
  s0 -> s0 [0, 65535] { R10676 += 1, R10677 += 1 };
  s0 -> s3 [0, 65535] { R10677 += 1, R10632 += 1, R10633 += 1 };
  s0 -> s4 [81, 81] { R10677 += 1, R10633 += 1, R10574 += 1, R10575 += 1 };
  s0 -> s5 [81, 81] { R10677 += 1, R10633 += 1, R10574 += 1, R10575 += 1 };
  s0 -> s6 [81, 81] { R10677 += 1, R10633 += 1, R10575 += 1 };
  s0 -> s7 [81, 81] { R10677 += 1, R10633 += 1, R10575 += 1 };
  s0 -> s8 [82, 82] { R10677 += 1, R10633 += 1, R10575 += 1 };
  s0 -> s2 [82, 65535] { R10677 += 1, R10633 += 1, R10574 += 1, R10575 += 1 };
  s0 -> s1 [89, 65535] { R10677 += 1, R10633 += 1, R10575 += 1 };
  s1 -> s1 [0, 80] { R10677 += 1, R10633 += 1, R10575 += 1 };
  s1 -> s6 [81, 81] { R10677 += 1, R10633 += 1 };
  s1 -> s7 [81, 81] { R10677 += 1, R10633 += 1 };
  s1 -> s8 [82, 82] { R10677 += 1, R10633 += 1, R10575 += 1 };
  s1 -> s1 [82, 65535] { R10677 += 1, R10633 += 1 };
  s1 -> s1 [89, 65535] { R10677 += 1, R10633 += 1, R10575 += 1 };
  s2 -> s1 [0, 80] { R10677 += 1, R10633 += 1, R10575 += 1 };
  s2 -> s2 [0, 80] { R10677 += 1, R10633 += 1, R10574 += 1, R10575 += 1 };
  s2 -> s4 [81, 81] { R10677 += 1, R10633 += 1, R10574 += 1, R10575 += 1 };
  s2 -> s5 [81, 81] { R10677 += 1, R10633 += 1, R10574 += 1, R10575 += 1 };
  s2 -> s6 [81, 81] { R10677 += 1, R10633 += 1, R10575 += 1 };
  s2 -> s7 [81, 81] { R10677 += 1, R10633 += 1, R10575 += 1 };
  s2 -> s8 [82, 82] { R10677 += 1, R10633 += 1, R10575 += 1 };
  s2 -> s2 [82, 65535] { R10677 += 1, R10633 += 1, R10574 += 1, R10575 += 1 };
  s2 -> s1 [89, 65535] { R10677 += 1, R10633 += 1, R10575 += 1 };
  s3 -> s1 [0, 80] { R10677 += 1, R10633 += 1, R10575 += 1 };
  s3 -> s2 [0, 80] { R10677 += 1, R10633 += 1, R10574 += 1, R10575 += 1 };
  s3 -> s3 [0, 65535] { R10677 += 1, R10632 += 1, R10633 += 1 };
  s3 -> s4 [81, 81] { R10677 += 1, R10633 += 1, R10574 += 1, R10575 += 1 };
  s3 -> s5 [81, 81] { R10677 += 1, R10633 += 1, R10574 += 1, R10575 += 1 };
  s3 -> s6 [81, 81] { R10677 += 1, R10633 += 1, R10575 += 1 };
  s3 -> s7 [81, 81] { R10677 += 1, R10633 += 1, R10575 += 1 };
  s3 -> s8 [82, 82] { R10677 += 1, R10633 += 1, R10575 += 1 };
  s3 -> s2 [82, 65535] { R10677 += 1, R10633 += 1, R10574 += 1, R10575 += 1 };
  s3 -> s1 [89, 65535] { R10677 += 1, R10633 += 1, R10575 += 1 };
  s4 -> s6 [0, 81] { R10677 += 1, R10633 += 1, R10575 += 1 };
  s4 -> s4 [0, 65535] { R10677 += 1, R10633 += 1, R10574 += 1, R10575 += 1 };
  s4 -> s11 [82, 82] { R10677 += 1, R10633 += 1, R10575 += 1 };
  s4 -> s6 [89, 65535] { R10677 += 1, R10633 += 1, R10575 += 1 };
  s6 -> s6 [0, 81] { R10677 += 1, R10633 += 1, R10575 += 1 };
  s6 -> s6 [0, 65535] { R10677 += 1, R10633 += 1 };
  s6 -> s11 [82, 82] { R10677 += 1, R10633 += 1, R10575 += 1 };
  s6 -> s6 [89, 65535] { R10677 += 1, R10633 += 1, R10575 += 1 };
  s8 -> s8 [0, 80] { R10677 += 1, R10633 += 1, R10575 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R10677 += 1 };
  s8 -> s10 [81, 81] { R10677 += 1, R10633 += 1 };
  s8 -> s11 [81, 81] { R10677 += 1, R10633 += 1 };
  s8 -> s8 [82, 82] { R10677 += 1, R10633 += 1, R10575 += 1 };
  s8 -> s8 [82, 65535] { R10677 += 1, R10633 += 1 };
  s8 -> s8 [89, 65535] { R10677 += 1, R10633 += 1, R10575 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R10677 += 1 };
  s11 -> s11 [0, 82] { R10677 += 1, R10633 += 1, R10575 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s12 [0, 65535] { R10677 += 1 };
  s11 -> s11 [0, 65535] { R10677 += 1, R10633 += 1 };
  s11 -> s11 [89, 65535] { R10677 += 1, R10633 += 1, R10575 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R10677 += 1 };
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [113, 113];
  accepting s1;
};
};
synchronised {  // Automata constraining c1
automaton c1_0 {
  init s0;
  s0 -> s1 [114, 114];
  accepting s1;
};
};
constraint R1 = R10593 && R2 = R10677 && R20 - R10677 = -1 && R21 = R10677 && R22 - R10677 = -1 && R23 = R10677 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R10255 + -1*R10253 - R53 = 0 && R52 + R10254 + R10252 = 0 && R10592 = 0 && R10618 = 0 && R10619 = 0 && R10626 = 0 && R10627 = 0 && R10632 = 0 && R10633 = 0 && R10634 = 0 && R10635 = R10677 && R10636 = 0 && R10637 = R10677 && R10638 = 0 && R10639 = R10677 && R10640 = 0 && R10641 = R10677 && R10642 = 0 && R10643 = R10677 && R10644 = 0 && R10645 = R10677 && R10646 = 0 && R10647 = R10677 && R10648 = 0 && R10649 = R10677 && R10650 = 0 && R10651 = R10677 && R10652 = 0 && R10653 = R10677 && R10654 = 0 && R10655 = R10677 && R10656 = 0 && R10657 = R10677 && R10658 = 0 && R10659 = R10677 && R10660 = 0 && R10661 = R10677 && R10662 = 0 && R10663 = R10677 && R10664 = 0 && R10665 = R10677 && R10666 = 0 && R10667 = R10677 && R10668 = 0 && R10669 = R10677 && R10670 = 0 && R10671 = R10677 && R10672 = 0 && R10673 = R10677 && R10674 = 0 && R10675 = R10677 && R10676 = 0 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R10255 + -1*R10253 - R53 < 1 && -1 < R10593 && 0 < R10677 && (R48 + R7711 + R7708 != 0 || ((R42 + R72 + R70 != 0 || R43 + R73 + R71 + -1*R10255 + -1*R10253 - R53 = 0 || R53 + R10255 + R10253 < 1) && (R42 + R72 + R70 = 0 || R53 + R10255 + R10253 < 1))) && (R48 + R7711 + R7708 != 0 || ((R46 + R7709 + R7706 != 0 || R47 + R7710 + R7707 + -1*R10255 + -1*R10253 - R53 = 0 || R53 + R10255 + R10253 < 1) && (R46 + R7709 + R7706 = 0 || R53 + R10255 + R10253 < 1))) && (R10578 != 0 || R10579 = R10593 || (R17 = 0 && R10593 = 0)) && (R10580 != 0 || R10581 = R10593 || (R17 = 0 && R10593 = 0)) && (R10582 != 0 || R10583 = R10593 || (R17 = 0 && R10593 = 0)) && (R10584 != 0 || R10585 = R10593 || (R17 = 0 && R10593 = 0)) && (R10586 != 0 || R10587 = R10593 || (R17 = 0 && R10593 = 0)) && (R10588 != 0 || R10589 = R10593 || (R17 = 0 && R10593 = 0)) && (R10590 != 0 || R10591 = R10593 || (R17 = 0 && R10593 = 0)) && (R10594 != 0 || R10593 = R10595 || (R17 = 0 && R10593 = 0)) && (R10596 != 0 || R10593 = R10597 || (R17 = 0 && R10593 = 0)) && (R18 = 0 || (R10616 = 0 && R10617 = 0)) && (R18 = 0 || (R10620 = 0 && R10621 = 0)) && (R18 = 0 || (R10622 = 0 && R10623 = 0)) && (R18 = 0 || (R10624 = 0 && R10625 = 0)) && (R18 = 0 || (R10628 = 0 && R10629 = 0)) && (R18 = 0 || (R10630 = 0 && R10631 = 0)) && (R19 = 0 || (R10598 = 0 && R10599 = 0)) && (R19 = 0 || (R10600 = 0 && R10601 = 0)) && (R19 = 0 || (R10602 = 0 && R10603 = 0)) && (R19 = 0 || (R10604 = 0 && R10605 = 0)) && (R19 = 0 || (R10606 = 0 && R10607 = 0)) && (R19 = 0 || (R10608 = 0 && R10609 = 0)) && (R19 = 0 || (R10610 = 0 && R10611 = 0)) && (R19 = 0 || (R10612 = 0 && R10613 = 0)) && (R19 = 0 || (R10614 = 0 && R10615 = 0)) && (R48 + R7711 + R7708 = 0 || (R42 + R72 + R70 = 0 && R43 + R73 + R71 + -1*R10255 + -1*R10253 - R53 = 0)) && (R48 + R7711 + R7708 = 0 || (R46 + R7709 + R7706 = 0 && R47 + R7710 + R7707 + -1*R10255 + -1*R10253 - R53 = 0)) && (R58 + R10261 + R10258 = 0 || (R56 + R10259 + R10256 = 0 && R57 + R10260 + R10257 = 0)) && (R58 + R10261 + R10258 = 0 || (R62 + R10576 + R10574 = 0 && R63 + R10577 + R10575 = 0)) && (R10578 = 0 || (R17 = 0 && R10593 = 0)) && (R10580 = 0 || (R17 = 0 && R10593 = 0)) && (R10582 = 0 || (R17 = 0 && R10593 = 0)) && (R10584 = 0 || (R17 = 0 && R10593 = 0)) && (R10586 = 0 || (R17 = 0 && R10593 = 0)) && (R10588 = 0 || (R17 = 0 && R10593 = 0)) && (R10590 = 0 || (R17 = 0 && R10593 = 0)) && (R10594 = 0 || (R17 = 0 && R10593 = 0)) && (R10596 = 0 || (R17 = 0 && R10593 = 0));
// End of Parikh automata intersection problem
