// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R11522, R11523, R11524, R11525, R12, R15342, R15343, R15344, R15345, R15346, R15347, R17, R17888, R17889, R17890, R17891, R18, R18736, R18737, R18738, R18739, R18740, R18741, R19, R19054, R19055, R19056, R19057, R19058, R19059, R19060, R19061, R19062, R19063, R19064, R19065, R19066, R19067, R19068, R19069, R19070, R19071, R19072, R19073, R19074, R19075, R19076, R19077, R19078, R19079, R19080, R19081, R19082, R19083, R19084, R19085, R19086, R19087, R19088, R19089, R19090, R19091, R19092, R19093, R19094, R19095, R19096, R19097, R19098, R19099, R19100, R19101, R19102, R19103, R19104, R19105, R19106, R19107, R19108, R19109, R19110, R19111, R19112, R19113, R19114, R19115, R19116, R19117, R19118, R19119, R19120, R19121, R19122, R19123, R19124, R19125, R19126, R19127, R19128, R19129, R19130, R19131, R19132, R19133, R19134, R19135, R19136, R19137, R19138, R19139, R19140, R19141, R19142, R19143, R19144, R19145, R19146, R19147, R19148, R19149, R19150, R19151, R19152, R19153, R19154, R19155, R19156, R19157, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 72];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [73, 73];
  s0 -> s1 [74, 65535];
  s1 -> s1 [0, 72];
  s1 -> s2 [73, 73];
  s1 -> s1 [74, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s1 [0, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R25 += 1 };
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R19079 += 1, R19 += 1 };
  s0 -> s0 [0, 65535] { R19078 += 1, R19079 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R19079 += 1, R19 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 72] { R19081 += 1 };
  s0 -> s0 [0, 65535] { R19080 += 1, R19081 += 1 };
  s0 -> s2 [73, 73] { R19081 += 1 };
  s0 -> s3 [73, 73] { R19081 += 1 };
  s0 -> s1 [82, 65535] { R19081 += 1 };
  s1 -> s1 [0, 72] { R19081 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R19081 += 1 };
  s1 -> s3 [73, 73] { R19081 += 1 };
  s1 -> s1 [82, 65535] { R19081 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 73] { R19081 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [82, 65535] { R19081 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 72] { R19083 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R19082 += 1, R19083 += 1 };
  s0 -> s2 [73, 73] { R19083 += 1, R38 += 1 };
  s0 -> s3 [73, 73] { R19083 += 1, R38 += 1 };
  s0 -> s1 [74, 65535] { R19083 += 1, R38 += 1 };
  s1 -> s1 [0, 72] { R19083 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R19083 += 1, R38 += 1 };
  s1 -> s3 [73, 73] { R19083 += 1, R38 += 1 };
  s1 -> s1 [74, 65535] { R19083 += 1, R38 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R19083 += 1, R38 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 72] { R19085 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R19084 += 1, R19085 += 1 };
  s0 -> s2 [73, 73] { R19085 += 1, R40 += 1 };
  s0 -> s3 [73, 73] { R19085 += 1, R40 += 1 };
  s0 -> s1 [74, 65535] { R19085 += 1, R40 += 1 };
  s1 -> s1 [0, 72] { R19085 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R19085 += 1, R40 += 1 };
  s1 -> s3 [73, 73] { R19085 += 1, R40 += 1 };
  s1 -> s1 [74, 65535] { R19085 += 1, R40 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R19085 += 1, R40 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 72] { R19087 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R19086 += 1, R19087 += 1 };
  s0 -> s2 [73, 73] { R19087 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [73, 73] { R19087 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [74, 65535] { R19087 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 72] { R19087 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R19087 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [73, 73] { R19087 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [74, 65535] { R19087 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R19087 += 1, R42 += 1, R43 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 72] { R19089 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R19088 += 1, R19089 += 1 };
  s0 -> s2 [73, 73] { R19089 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [73, 73] { R19089 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [74, 65535] { R19089 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 72] { R19089 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R19089 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [73, 73] { R19089 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [74, 65535] { R19089 += 1, R46 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R19089 += 1, R46 += 1, R47 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 72] { R19091 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R19090 += 1, R19091 += 1 };
  s0 -> s2 [73, 73] { R19091 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [73, 73] { R19091 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [74, 65535] { R19091 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 72] { R19091 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R19091 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [73, 73] { R19091 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [74, 65535] { R19091 += 1, R52 += 1, R53 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R19091 += 1, R52 += 1, R53 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 72] { R19093 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R19092 += 1, R19093 += 1 };
  s0 -> s2 [73, 73] { R19093 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [73, 73] { R19093 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [74, 65535] { R19093 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 72] { R19093 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R19093 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [73, 73] { R19093 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [74, 65535] { R19093 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R19093 += 1, R56 += 1, R57 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 72] { R19095 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R19094 += 1, R19095 += 1 };
  s0 -> s2 [73, 73] { R19095 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [73, 73] { R19095 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [74, 65535] { R19095 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 72] { R19095 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R19095 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [73, 73] { R19095 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [74, 65535] { R19095 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R19095 += 1, R62 += 1, R63 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 72] { R19115 += 1 };
  s0 -> s0 [0, 65535] { R19114 += 1, R19115 += 1 };
  s0 -> s2 [73, 73] { R19115 += 1 };
  s0 -> s1 [74, 65535] { R19115 += 1 };
  s1 -> s1 [0, 72] { R19115 += 1 };
  s1 -> s2 [73, 73] { R19115 += 1 };
  s1 -> s1 [74, 65535] { R19115 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R19115 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R19116 += 1, R19117 += 1 };
  s0 -> s1 [0, 65535] { R19117 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R19117 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 72] { R19119 += 1 };
  s0 -> s0 [0, 65535] { R19118 += 1, R19119 += 1 };
  s0 -> s2 [0, 65535] { R19119 += 1, R8 += 1 };
  s0 -> s3 [73, 73] { R19119 += 1 };
  s0 -> s1 [74, 65535] { R19119 += 1 };
  s1 -> s1 [0, 72] { R19119 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [73, 73] { R19119 += 1 };
  s1 -> s1 [74, 65535] { R19119 += 1 };
  s2 -> s1 [0, 72] { R19119 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R19119 += 1, R8 += 1 };
  s2 -> s3 [73, 73] { R19119 += 1 };
  s2 -> s1 [74, 65535] { R19119 += 1 };
  s3 -> s3 [0, 65535] { R19119 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 72] { R19121 += 1, R19059 += 1 };
  s0 -> s2 [0, 65535] { R19121 += 1, R19058 += 1, R19059 += 1 };
  s0 -> s0 [0, 65535] { R19120 += 1, R19121 += 1 };
  s0 -> s1 [74, 65535] { R19121 += 1, R19059 += 1 };
  s1 -> s1 [0, 72] { R19121 += 1, R19059 += 1 };
  s1 -> s1 [0, 65535] { R19121 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [74, 65535] { R19121 += 1, R19059 += 1 };
  s2 -> s1 [0, 72] { R19121 += 1, R19059 += 1 };
  s2 -> s2 [0, 65535] { R19121 += 1, R19058 += 1, R19059 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [74, 65535] { R19121 += 1, R19059 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R19123 += 1, R19060 += 1, R19061 += 1 };
  s0 -> s0 [0, 65535] { R19122 += 1, R19123 += 1 };
  s0 -> s2 [0, 65535] { R19123 += 1, R19061 += 1, R17 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R19123 += 1, R19060 += 1, R19061 += 1 };
  s1 -> s2 [0, 65535] { R19123 += 1, R19061 += 1, R17 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R19123 += 1 };
  s2 -> s2 [0, 65535] { R19123 += 1, R19061 += 1, R17 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R19123 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 73] { R19125 += 1, R19063 += 1 };
  s0 -> s0 [0, 65535] { R19124 += 1, R19125 += 1 };
  s0 -> s2 [0, 65535] { R19125 += 1, R19062 += 1, R19063 += 1 };
  s0 -> s1 [81, 65535] { R19125 += 1, R19063 += 1 };
  s1 -> s1 [0, 73] { R19125 += 1, R19063 += 1 };
  s1 -> s1 [0, 65535] { R19125 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [81, 65535] { R19125 += 1, R19063 += 1 };
  s2 -> s1 [0, 73] { R19125 += 1, R19063 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R19125 += 1, R19062 += 1, R19063 += 1 };
  s2 -> s1 [81, 65535] { R19125 += 1, R19063 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R19127 += 1, R19065 += 1, R67 += 1 };
  s0 -> s0 [0, 65535] { R19126 += 1, R19127 += 1 };
  s0 -> s2 [0, 65535] { R19127 += 1, R19064 += 1, R19065 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R19127 += 1, R19065 += 1, R67 += 1 };
  s1 -> s4 [0, 65535] { R19127 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R19127 += 1, R19065 += 1, R67 += 1 };
  s2 -> s2 [0, 65535] { R19127 += 1, R19064 += 1, R19065 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R19127 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 80] { R19129 += 1, R19067 += 1 };
  s0 -> s2 [0, 65535] { R19129 += 1, R19067 += 1, R69 += 1 };
  s0 -> s3 [0, 65535] { R19129 += 1, R19066 += 1, R19067 += 1 };
  s0 -> s0 [0, 65535] { R19128 += 1, R19129 += 1 };
  s0 -> s1 [82, 65535] { R19129 += 1, R19067 += 1 };
  s1 -> s1 [0, 80] { R19129 += 1, R19067 += 1 };
  s1 -> s1 [0, 65535] { R19129 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [82, 65535] { R19129 += 1, R19067 += 1 };
  s2 -> s1 [0, 80] { R19129 += 1, R19067 += 1 };
  s2 -> s5 [0, 65535] { R19129 += 1 };
  s2 -> s2 [0, 65535] { R19129 += 1, R19067 += 1, R69 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [82, 65535] { R19129 += 1, R19067 += 1 };
  s3 -> s1 [0, 80] { R19129 += 1, R19067 += 1 };
  s3 -> s2 [0, 65535] { R19129 += 1, R19067 += 1, R69 += 1 };
  s3 -> s3 [0, 65535] { R19129 += 1, R19066 += 1, R19067 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [82, 65535] { R19129 += 1, R19067 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R19129 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 80] { R19131 += 1, R19069 += 1, R11525 += 1 };
  s0 -> s1 [0, 65535] { R19131 += 1, R19069 += 1 };
  s0 -> s2 [0, 65535] { R19131 += 1, R19068 += 1, R19069 += 1 };
  s0 -> s0 [0, 65535] { R19130 += 1, R19131 += 1 };
  s0 -> s1 [82, 65535] { R19131 += 1, R19069 += 1, R11525 += 1 };
  s1 -> s1 [0, 80] { R19131 += 1, R19069 += 1, R11525 += 1 };
  s1 -> s1 [0, 65535] { R19131 += 1, R19069 += 1 };
  s1 -> s4 [0, 65535] { R19131 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [82, 65535] { R19131 += 1, R19069 += 1, R11525 += 1 };
  s2 -> s1 [0, 80] { R19131 += 1, R19069 += 1, R11525 += 1 };
  s2 -> s1 [0, 65535] { R19131 += 1, R19069 += 1 };
  s2 -> s2 [0, 65535] { R19131 += 1, R19068 += 1, R19069 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [82, 65535] { R19131 += 1, R19069 += 1, R11525 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R19131 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s0 [0, 65535] { R19132 += 1, R19133 += 1 };
  s0 -> s1 [0, 65535] { R19133 += 1, R19071 += 1 };
  s0 -> s2 [0, 65535] { R19133 += 1, R19071 += 1, R15346 += 1, R15347 += 1 };
  s0 -> s3 [0, 65535] { R19133 += 1, R19070 += 1, R19071 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R19133 += 1 };
  s1 -> s1 [0, 65535] { R19133 += 1, R19071 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R19133 += 1 };
  s2 -> s1 [0, 65535] { R19133 += 1, R19071 += 1 };
  s2 -> s2 [0, 65535] { R19133 += 1, R19071 += 1, R15346 += 1, R15347 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R19133 += 1, R19071 += 1 };
  s3 -> s2 [0, 65535] { R19133 += 1, R19071 += 1, R15346 += 1, R15347 += 1 };
  s3 -> s3 [0, 65535] { R19133 += 1, R19070 += 1, R19071 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R19133 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 81] { R19135 += 1, R19073 += 1, R17891 += 1 };
  s0 -> s2 [0, 65535] { R19135 += 1, R19072 += 1, R19073 += 1 };
  s0 -> s0 [0, 65535] { R19134 += 1, R19135 += 1 };
  s0 -> s3 [0, 65535] { R19135 += 1, R19073 += 1, R17890 += 1, R17891 += 1 };
  s0 -> s4 [88, 88] { R19135 += 1, R19073 += 1, R17891 += 1 };
  s0 -> s1 [89, 65535] { R19135 += 1, R19073 += 1, R17891 += 1 };
  s1 -> s1 [0, 81] { R19135 += 1, R19073 += 1, R17891 += 1 };
  s1 -> s4 [88, 88] { R19135 += 1, R19073 += 1, R17891 += 1 };
  s1 -> s1 [89, 65535] { R19135 += 1, R19073 += 1, R17891 += 1 };
  s2 -> s1 [0, 81] { R19135 += 1, R19073 += 1, R17891 += 1 };
  s2 -> s2 [0, 65535] { R19135 += 1, R19072 += 1, R19073 += 1 };
  s2 -> s3 [0, 65535] { R19135 += 1, R19073 += 1, R17890 += 1, R17891 += 1 };
  s2 -> s4 [88, 88] { R19135 += 1, R19073 += 1, R17891 += 1 };
  s2 -> s1 [89, 65535] { R19135 += 1, R19073 += 1, R17891 += 1 };
  s3 -> s1 [0, 81] { R19135 += 1, R19073 += 1, R17891 += 1 };
  s3 -> s3 [0, 65535] { R19135 += 1, R19073 += 1, R17890 += 1, R17891 += 1 };
  s3 -> s4 [88, 88] { R19135 += 1, R19073 += 1, R17891 += 1 };
  s3 -> s1 [89, 65535] { R19135 += 1, R19073 += 1, R17891 += 1 };
  s4 -> s4 [0, 81] { R19135 += 1, R19073 += 1, R17891 += 1 };
  s4 -> s4 [0, 65535] { R19135 += 1, R19073 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R19135 += 1 };
  s4 -> s4 [88, 65535] { R19135 += 1, R19073 += 1, R17891 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R19135 += 1 };
  accepting s4, s5, s6;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R19137 += 1, R19074 += 1, R19075 += 1 };
  s0 -> s2 [0, 65535] { R19137 += 1, R19075 += 1 };
  s0 -> s0 [0, 65535] { R19136 += 1, R19137 += 1 };
  s1 -> s1 [0, 65535] { R19137 += 1, R19074 += 1, R19075 += 1 };
  s1 -> s2 [0, 65535] { R19137 += 1, R19075 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R19137 += 1 };
  s2 -> s2 [0, 65535] { R19137 += 1, R19075 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R19137 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 81] { R19139 += 1, R19077 += 1, R19057 += 1 };
  s0 -> s0 [0, 65535] { R19138 += 1, R19139 += 1 };
  s0 -> s1 [0, 65535] { R19139 += 1, R19077 += 1 };
  s0 -> s2 [0, 65535] { R19139 += 1, R19076 += 1, R19077 += 1 };
  s0 -> s1 [89, 65535] { R19139 += 1, R19077 += 1, R19057 += 1 };
  s1 -> s1 [0, 81] { R19139 += 1, R19077 += 1, R19057 += 1 };
  s1 -> s1 [0, 65535] { R19139 += 1, R19077 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R19139 += 1 };
  s1 -> s1 [89, 65535] { R19139 += 1, R19077 += 1, R19057 += 1 };
  s2 -> s1 [0, 81] { R19139 += 1, R19077 += 1, R19057 += 1 };
  s2 -> s1 [0, 65535] { R19139 += 1, R19077 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R19139 += 1, R19076 += 1, R19077 += 1 };
  s2 -> s1 [89, 65535] { R19139 += 1, R19077 += 1, R19057 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R19139 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R19141 += 1, R19097 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R19140 += 1, R19141 += 1 };
  s0 -> s2 [0, 65535] { R19141 += 1, R19096 += 1, R19097 += 1 };
  s1 -> s1 [0, 65535] { R19141 += 1, R19097 += 1, R18 += 1 };
  s1 -> s4 [0, 65535] { R19141 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R19141 += 1, R19097 += 1, R18 += 1 };
  s2 -> s2 [0, 65535] { R19141 += 1, R19096 += 1, R19097 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R19141 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 72] { R19143 += 1, R19099 += 1 };
  s0 -> s0 [0, 65535] { R19142 += 1, R19143 += 1 };
  s0 -> s2 [0, 65535] { R19143 += 1, R19098 += 1, R19099 += 1 };
  s0 -> s3 [73, 73] { R19143 += 1, R19099 += 1 };
  s0 -> s4 [73, 73] { R19143 += 1, R19099 += 1 };
  s0 -> s5 [81, 81] { R19143 += 1, R19099 += 1 };
  s0 -> s1 [82, 65535] { R19143 += 1, R19099 += 1 };
  s1 -> s1 [0, 72] { R19143 += 1, R19099 += 1 };
  s1 -> s3 [73, 73] { R19143 += 1, R19099 += 1 };
  s1 -> s4 [73, 73] { R19143 += 1, R19099 += 1 };
  s1 -> s5 [81, 81] { R19143 += 1, R19099 += 1 };
  s1 -> s1 [82, 65535] { R19143 += 1, R19099 += 1 };
  s2 -> s1 [0, 72] { R19143 += 1, R19099 += 1 };
  s2 -> s2 [0, 65535] { R19143 += 1, R19098 += 1, R19099 += 1 };
  s2 -> s3 [73, 73] { R19143 += 1, R19099 += 1 };
  s2 -> s4 [73, 73] { R19143 += 1, R19099 += 1 };
  s2 -> s5 [81, 81] { R19143 += 1, R19099 += 1 };
  s2 -> s1 [82, 65535] { R19143 += 1, R19099 += 1 };
  s4 -> s4 [0, 73] { R19143 += 1, R19099 += 1 };
  s4 -> s8 [81, 81] { R19143 += 1, R19099 += 1 };
  s4 -> s4 [82, 65535] { R19143 += 1, R19099 += 1 };
  s5 -> s5 [0, 72] { R19143 += 1, R19099 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R19143 += 1 };
  s5 -> s7 [73, 73] { R19143 += 1, R19099 += 1 };
  s5 -> s8 [73, 73] { R19143 += 1, R19099 += 1 };
  s5 -> s5 [81, 65535] { R19143 += 1, R19099 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R19143 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 73] { R19143 += 1, R19099 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R19143 += 1 };
  s8 -> s8 [81, 65535] { R19143 += 1, R19099 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 72] { R19145 += 1, R19101 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R19144 += 1, R19145 += 1 };
  s0 -> s2 [0, 65535] { R19145 += 1, R19100 += 1, R19101 += 1 };
  s0 -> s3 [73, 73] { R19145 += 1, R19101 += 1, R66 += 1 };
  s0 -> s4 [73, 73] { R19145 += 1, R19101 += 1, R66 += 1 };
  s0 -> s1 [74, 65535] { R19145 += 1, R19101 += 1, R66 += 1 };
  s1 -> s1 [0, 72] { R19145 += 1, R19101 += 1, R66 += 1 };
  s1 -> s1 [0, 65535] { R19145 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R19145 += 1, R19101 += 1, R66 += 1 };
  s1 -> s4 [73, 73] { R19145 += 1, R19101 += 1, R66 += 1 };
  s1 -> s1 [74, 65535] { R19145 += 1, R19101 += 1, R66 += 1 };
  s2 -> s1 [0, 72] { R19145 += 1, R19101 += 1, R66 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R19145 += 1, R19100 += 1, R19101 += 1 };
  s2 -> s3 [73, 73] { R19145 += 1, R19101 += 1, R66 += 1 };
  s2 -> s4 [73, 73] { R19145 += 1, R19101 += 1, R66 += 1 };
  s2 -> s1 [74, 65535] { R19145 += 1, R19101 += 1, R66 += 1 };
  s3 -> s6 [0, 65535] { R19145 += 1 };
  s3 -> s3 [0, 65535] { R19145 += 1, R19101 += 1, R66 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R19145 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R19145 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 72] { R19147 += 1, R19103 += 1, R68 += 1 };
  s0 -> s0 [0, 65535] { R19146 += 1, R19147 += 1 };
  s0 -> s2 [0, 65535] { R19147 += 1, R19102 += 1, R19103 += 1 };
  s0 -> s3 [73, 73] { R19147 += 1, R19103 += 1, R68 += 1 };
  s0 -> s4 [73, 73] { R19147 += 1, R19103 += 1, R68 += 1 };
  s0 -> s1 [74, 65535] { R19147 += 1, R19103 += 1, R68 += 1 };
  s1 -> s1 [0, 72] { R19147 += 1, R19103 += 1, R68 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R19147 += 1 };
  s1 -> s3 [73, 73] { R19147 += 1, R19103 += 1, R68 += 1 };
  s1 -> s4 [73, 73] { R19147 += 1, R19103 += 1, R68 += 1 };
  s1 -> s1 [74, 65535] { R19147 += 1, R19103 += 1, R68 += 1 };
  s2 -> s1 [0, 72] { R19147 += 1, R19103 += 1, R68 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R19147 += 1, R19102 += 1, R19103 += 1 };
  s2 -> s3 [73, 73] { R19147 += 1, R19103 += 1, R68 += 1 };
  s2 -> s4 [73, 73] { R19147 += 1, R19103 += 1, R68 += 1 };
  s2 -> s1 [74, 65535] { R19147 += 1, R19103 += 1, R68 += 1 };
  s3 -> s3 [0, 65535] { R19147 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R19147 += 1, R19103 += 1, R68 += 1 };
  s4 -> s6 [0, 65535] { R19147 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R19147 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 72] { R19149 += 1, R19105 += 1, R11523 += 1 };
  s0 -> s2 [0, 72] { R19149 += 1, R19105 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s0 [0, 65535] { R19148 += 1, R19149 += 1 };
  s0 -> s3 [0, 65535] { R19149 += 1, R19104 += 1, R19105 += 1 };
  s0 -> s4 [73, 73] { R19149 += 1, R19105 += 1, R11523 += 1 };
  s0 -> s5 [73, 73] { R19149 += 1, R19105 += 1, R11523 += 1 };
  s0 -> s6 [73, 73] { R19149 += 1, R19105 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s7 [73, 73] { R19149 += 1, R19105 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s1 [74, 80] { R19149 += 1, R19105 += 1, R11523 += 1 };
  s0 -> s2 [74, 65535] { R19149 += 1, R19105 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s1 [82, 65535] { R19149 += 1, R19105 += 1, R11523 += 1 };
  s1 -> s1 [0, 72] { R19149 += 1, R19105 += 1, R11523 += 1 };
  s1 -> s1 [0, 65535] { R19149 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s4 [73, 73] { R19149 += 1, R19105 += 1 };
  s1 -> s5 [73, 73] { R19149 += 1, R19105 += 1 };
  s1 -> s1 [74, 80] { R19149 += 1, R19105 += 1, R11523 += 1 };
  s1 -> s1 [74, 65535] { R19149 += 1, R19105 += 1 };
  s1 -> s1 [82, 65535] { R19149 += 1, R19105 += 1, R11523 += 1 };
  s2 -> s1 [0, 72] { R19149 += 1, R19105 += 1, R11523 += 1 };
  s2 -> s2 [0, 72] { R19149 += 1, R19105 += 1, R11522 += 1, R11523 += 1 };
  s2 -> s4 [73, 73] { R19149 += 1, R19105 += 1, R11523 += 1 };
  s2 -> s5 [73, 73] { R19149 += 1, R19105 += 1, R11523 += 1 };
  s2 -> s6 [73, 73] { R19149 += 1, R19105 += 1, R11522 += 1, R11523 += 1 };
  s2 -> s7 [73, 73] { R19149 += 1, R19105 += 1, R11522 += 1, R11523 += 1 };
  s2 -> s1 [74, 80] { R19149 += 1, R19105 += 1, R11523 += 1 };
  s2 -> s2 [74, 65535] { R19149 += 1, R19105 += 1, R11522 += 1, R11523 += 1 };
  s2 -> s1 [82, 65535] { R19149 += 1, R19105 += 1, R11523 += 1 };
  s3 -> s1 [0, 72] { R19149 += 1, R19105 += 1, R11523 += 1 };
  s3 -> s2 [0, 72] { R19149 += 1, R19105 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s3 [0, 65535] { R19149 += 1, R19104 += 1, R19105 += 1 };
  s3 -> s4 [73, 73] { R19149 += 1, R19105 += 1, R11523 += 1 };
  s3 -> s5 [73, 73] { R19149 += 1, R19105 += 1, R11523 += 1 };
  s3 -> s6 [73, 73] { R19149 += 1, R19105 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s7 [73, 73] { R19149 += 1, R19105 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s1 [74, 80] { R19149 += 1, R19105 += 1, R11523 += 1 };
  s3 -> s2 [74, 65535] { R19149 += 1, R19105 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s1 [82, 65535] { R19149 += 1, R19105 += 1, R11523 += 1 };
  s4 -> s4 [0, 80] { R19149 += 1, R19105 += 1, R11523 += 1 };
  s4 -> s4 [0, 65535] { R19149 += 1, R19105 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s9 [0, 65535] { R19149 += 1 };
  s4 -> s4 [82, 65535] { R19149 += 1, R19105 += 1, R11523 += 1 };
  s5 -> s5 [0, 65535] { R19149 += 1 };
  s5 -> s8 [0, 65535];
  s6 -> s4 [0, 80] { R19149 += 1, R19105 += 1, R11523 += 1 };
  s6 -> s6 [0, 65535] { R19149 += 1, R19105 += 1, R11522 += 1, R11523 += 1 };
  s6 -> s4 [82, 65535] { R19149 += 1, R19105 += 1, R11523 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R19149 += 1 };
  accepting s4, s8, s5, s9, s1;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 72] { R19151 += 1, R19107 += 1, R15342 += 1, R15343 += 1 };
  s0 -> s2 [0, 72] { R19151 += 1, R19107 += 1, R15343 += 1, R15344 += 1 };
  s0 -> s3 [0, 65535] { R19151 += 1, R19106 += 1, R19107 += 1 };
  s0 -> s0 [0, 65535] { R19150 += 1, R19151 += 1 };
  s0 -> s4 [73, 73] { R19151 += 1, R19107 += 1, R15343 += 1, R15344 += 1 };
  s0 -> s5 [73, 73] { R19151 += 1, R19107 += 1, R15342 += 1, R15343 += 1 };
  s0 -> s6 [73, 73] { R19151 += 1, R19107 += 1, R15342 += 1, R15343 += 1 };
  s0 -> s7 [73, 73] { R19151 += 1, R19107 += 1, R15343 += 1, R15344 += 1 };
  s0 -> s1 [74, 65535] { R19151 += 1, R19107 += 1, R15342 += 1, R15343 += 1 };
  s0 -> s2 [74, 65535] { R19151 += 1, R19107 += 1, R15343 += 1, R15344 += 1 };
  s1 -> s1 [0, 72] { R19151 += 1, R19107 += 1, R15342 += 1, R15343 += 1 };
  s1 -> s2 [0, 72] { R19151 += 1, R19107 += 1, R15343 += 1, R15344 += 1 };
  s1 -> s4 [73, 73] { R19151 += 1, R19107 += 1, R15343 += 1, R15344 += 1 };
  s1 -> s5 [73, 73] { R19151 += 1, R19107 += 1, R15342 += 1, R15343 += 1 };
  s1 -> s6 [73, 73] { R19151 += 1, R19107 += 1, R15342 += 1, R15343 += 1 };
  s1 -> s7 [73, 73] { R19151 += 1, R19107 += 1, R15343 += 1, R15344 += 1 };
  s1 -> s1 [74, 65535] { R19151 += 1, R19107 += 1, R15342 += 1, R15343 += 1 };
  s1 -> s2 [74, 65535] { R19151 += 1, R19107 += 1, R15343 += 1, R15344 += 1 };
  s2 -> s2 [0, 72] { R19151 += 1, R19107 += 1, R15343 += 1, R15344 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R19151 += 1 };
  s2 -> s4 [73, 73] { R19151 += 1, R19107 += 1, R15343 += 1, R15344 += 1 };
  s2 -> s7 [73, 73] { R19151 += 1, R19107 += 1, R15343 += 1, R15344 += 1 };
  s2 -> s2 [74, 65535] { R19151 += 1, R19107 += 1, R15343 += 1, R15344 += 1 };
  s3 -> s1 [0, 72] { R19151 += 1, R19107 += 1, R15342 += 1, R15343 += 1 };
  s3 -> s2 [0, 72] { R19151 += 1, R19107 += 1, R15343 += 1, R15344 += 1 };
  s3 -> s3 [0, 65535] { R19151 += 1, R19106 += 1, R19107 += 1 };
  s3 -> s4 [73, 73] { R19151 += 1, R19107 += 1, R15343 += 1, R15344 += 1 };
  s3 -> s5 [73, 73] { R19151 += 1, R19107 += 1, R15342 += 1, R15343 += 1 };
  s3 -> s6 [73, 73] { R19151 += 1, R19107 += 1, R15342 += 1, R15343 += 1 };
  s3 -> s7 [73, 73] { R19151 += 1, R19107 += 1, R15343 += 1, R15344 += 1 };
  s3 -> s1 [74, 65535] { R19151 += 1, R19107 += 1, R15342 += 1, R15343 += 1 };
  s3 -> s2 [74, 65535] { R19151 += 1, R19107 += 1, R15343 += 1, R15344 += 1 };
  s4 -> s9 [0, 65535] { R19151 += 1 };
  s4 -> s4 [0, 65535] { R19151 += 1, R19107 += 1, R15343 += 1, R15344 += 1 };
  s4 -> s8 [0, 65535];
  s5 -> s4 [0, 65535] { R19151 += 1, R19107 += 1, R15343 += 1, R15344 += 1 };
  s5 -> s5 [0, 65535] { R19151 += 1, R19107 += 1, R15342 += 1, R15343 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R19151 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R19151 += 1 };
  s9 -> s8 [0, 65535];
  accepting s4, s8, s2, s9, s7;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 72] { R19153 += 1, R19109 += 1, R17888 += 1, R17889 += 1 };
  s0 -> s2 [0, 65535] { R19153 += 1, R19108 += 1, R19109 += 1 };
  s0 -> s0 [0, 65535] { R19152 += 1, R19153 += 1 };
  s0 -> s3 [73, 73] { R19153 += 1, R19109 += 1, R17888 += 1, R17889 += 1 };
  s0 -> s4 [73, 73] { R19153 += 1, R19109 += 1, R17888 += 1, R17889 += 1 };
  s0 -> s1 [74, 65535] { R19153 += 1, R19109 += 1, R17888 += 1, R17889 += 1 };
  s1 -> s1 [0, 72] { R19153 += 1, R19109 += 1, R17888 += 1, R17889 += 1 };
  s1 -> s1 [0, 65535] { R19153 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R19153 += 1, R19109 += 1, R17888 += 1, R17889 += 1 };
  s1 -> s4 [73, 73] { R19153 += 1, R19109 += 1, R17888 += 1, R17889 += 1 };
  s1 -> s1 [74, 65535] { R19153 += 1, R19109 += 1, R17888 += 1, R17889 += 1 };
  s2 -> s1 [0, 72] { R19153 += 1, R19109 += 1, R17888 += 1, R17889 += 1 };
  s2 -> s2 [0, 65535] { R19153 += 1, R19108 += 1, R19109 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R19153 += 1, R19109 += 1, R17888 += 1, R17889 += 1 };
  s2 -> s4 [73, 73] { R19153 += 1, R19109 += 1, R17888 += 1, R17889 += 1 };
  s2 -> s1 [74, 65535] { R19153 += 1, R19109 += 1, R17888 += 1, R17889 += 1 };
  s3 -> s3 [0, 65535] { R19153 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R19153 += 1, R19109 += 1, R17888 += 1, R17889 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R19153 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R19153 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 72] { R19155 += 1, R19111 += 1, R18737 += 1, R18738 += 1 };
  s0 -> s2 [0, 72] { R19155 += 1, R19111 += 1, R18736 += 1, R18737 += 1 };
  s0 -> s3 [0, 65535] { R19155 += 1, R19110 += 1, R19111 += 1 };
  s0 -> s0 [0, 65535] { R19154 += 1, R19155 += 1 };
  s0 -> s4 [73, 73] { R19155 += 1, R19111 += 1, R18737 += 1, R18738 += 1 };
  s0 -> s5 [73, 73] { R19155 += 1, R19111 += 1, R18736 += 1, R18737 += 1 };
  s0 -> s6 [73, 73] { R19155 += 1, R19111 += 1, R18737 += 1, R18738 += 1 };
  s0 -> s7 [73, 73] { R19155 += 1, R19111 += 1, R18736 += 1, R18737 += 1 };
  s0 -> s1 [74, 65535] { R19155 += 1, R19111 += 1, R18737 += 1, R18738 += 1 };
  s0 -> s2 [74, 65535] { R19155 += 1, R19111 += 1, R18736 += 1, R18737 += 1 };
  s1 -> s11 [0, 72] { R19155 += 1, R19111 += 1 };
  s1 -> s1 [0, 72] { R19155 += 1, R19111 += 1, R18737 += 1, R18738 += 1 };
  s1 -> s8 [73, 73] { R19155 += 1, R19111 += 1 };
  s1 -> s4 [73, 73] { R19155 += 1, R19111 += 1, R18737 += 1, R18738 += 1 };
  s1 -> s6 [73, 73] { R19155 += 1, R19111 += 1, R18737 += 1, R18738 += 1 };
  s1 -> s12 [73, 73] { R19155 += 1, R19111 += 1 };
  s1 -> s11 [74, 65535] { R19155 += 1, R19111 += 1 };
  s1 -> s1 [74, 65535] { R19155 += 1, R19111 += 1, R18737 += 1, R18738 += 1 };
  s2 -> s1 [0, 72] { R19155 += 1, R19111 += 1, R18737 += 1, R18738 += 1 };
  s2 -> s2 [0, 72] { R19155 += 1, R19111 += 1, R18736 += 1, R18737 += 1 };
  s2 -> s4 [73, 73] { R19155 += 1, R19111 += 1, R18737 += 1, R18738 += 1 };
  s2 -> s5 [73, 73] { R19155 += 1, R19111 += 1, R18736 += 1, R18737 += 1 };
  s2 -> s6 [73, 73] { R19155 += 1, R19111 += 1, R18737 += 1, R18738 += 1 };
  s2 -> s7 [73, 73] { R19155 += 1, R19111 += 1, R18736 += 1, R18737 += 1 };
  s2 -> s1 [74, 65535] { R19155 += 1, R19111 += 1, R18737 += 1, R18738 += 1 };
  s2 -> s2 [74, 65535] { R19155 += 1, R19111 += 1, R18736 += 1, R18737 += 1 };
  s3 -> s1 [0, 72] { R19155 += 1, R19111 += 1, R18737 += 1, R18738 += 1 };
  s3 -> s2 [0, 72] { R19155 += 1, R19111 += 1, R18736 += 1, R18737 += 1 };
  s3 -> s3 [0, 65535] { R19155 += 1, R19110 += 1, R19111 += 1 };
  s3 -> s4 [73, 73] { R19155 += 1, R19111 += 1, R18737 += 1, R18738 += 1 };
  s3 -> s5 [73, 73] { R19155 += 1, R19111 += 1, R18736 += 1, R18737 += 1 };
  s3 -> s6 [73, 73] { R19155 += 1, R19111 += 1, R18737 += 1, R18738 += 1 };
  s3 -> s7 [73, 73] { R19155 += 1, R19111 += 1, R18736 += 1, R18737 += 1 };
  s3 -> s1 [74, 65535] { R19155 += 1, R19111 += 1, R18737 += 1, R18738 += 1 };
  s3 -> s2 [74, 65535] { R19155 += 1, R19111 += 1, R18736 += 1, R18737 += 1 };
  s4 -> s8 [0, 65535] { R19155 += 1, R19111 += 1 };
  s4 -> s4 [0, 65535] { R19155 += 1, R19111 += 1, R18737 += 1, R18738 += 1 };
  s5 -> s4 [0, 65535] { R19155 += 1, R19111 += 1, R18737 += 1, R18738 += 1 };
  s5 -> s5 [0, 65535] { R19155 += 1, R19111 += 1, R18736 += 1, R18737 += 1 };
  s8 -> s9 [0, 65535] { R19155 += 1 };
  s8 -> s8 [0, 65535] { R19155 += 1, R19111 += 1 };
  s8 -> s10 [0, 65535];
  s9 -> s9 [0, 65535] { R19155 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s11 [0, 72] { R19155 += 1, R19111 += 1 };
  s11 -> s11 [0, 65535] { R19155 += 1 };
  s11 -> s10 [0, 65535];
  s11 -> s8 [73, 73] { R19155 += 1, R19111 += 1 };
  s11 -> s12 [73, 73] { R19155 += 1, R19111 += 1 };
  s11 -> s11 [74, 65535] { R19155 += 1, R19111 += 1 };
  s12 -> s10 [0, 65535];
  s12 -> s12 [0, 65535] { R19155 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 72] { R19157 += 1, R19113 += 1, R19055 += 1 };
  s0 -> s2 [0, 72] { R19157 += 1, R19113 += 1, R19054 += 1, R19055 += 1 };
  s0 -> s0 [0, 65535] { R19156 += 1, R19157 += 1 };
  s0 -> s3 [0, 65535] { R19157 += 1, R19112 += 1, R19113 += 1 };
  s0 -> s4 [73, 73] { R19157 += 1, R19113 += 1, R19054 += 1, R19055 += 1 };
  s0 -> s5 [73, 73] { R19157 += 1, R19113 += 1, R19055 += 1 };
  s0 -> s6 [73, 73] { R19157 += 1, R19113 += 1, R19055 += 1 };
  s0 -> s7 [73, 73] { R19157 += 1, R19113 += 1, R19054 += 1, R19055 += 1 };
  s0 -> s1 [74, 80] { R19157 += 1, R19113 += 1, R19055 += 1 };
  s0 -> s2 [74, 65535] { R19157 += 1, R19113 += 1, R19054 += 1, R19055 += 1 };
  s0 -> s8 [81, 81] { R19157 += 1, R19113 += 1, R19055 += 1 };
  s0 -> s1 [89, 65535] { R19157 += 1, R19113 += 1, R19055 += 1 };
  s1 -> s1 [0, 72] { R19157 += 1, R19113 += 1, R19055 += 1 };
  s1 -> s5 [73, 73] { R19157 += 1, R19113 += 1 };
  s1 -> s6 [73, 73] { R19157 += 1, R19113 += 1 };
  s1 -> s1 [74, 80] { R19157 += 1, R19113 += 1, R19055 += 1 };
  s1 -> s1 [74, 65535] { R19157 += 1, R19113 += 1 };
  s1 -> s8 [81, 81] { R19157 += 1, R19113 += 1, R19055 += 1 };
  s1 -> s1 [89, 65535] { R19157 += 1, R19113 += 1, R19055 += 1 };
  s2 -> s1 [0, 72] { R19157 += 1, R19113 += 1, R19055 += 1 };
  s2 -> s2 [0, 72] { R19157 += 1, R19113 += 1, R19054 += 1, R19055 += 1 };
  s2 -> s4 [73, 73] { R19157 += 1, R19113 += 1, R19054 += 1, R19055 += 1 };
  s2 -> s5 [73, 73] { R19157 += 1, R19113 += 1, R19055 += 1 };
  s2 -> s6 [73, 73] { R19157 += 1, R19113 += 1, R19055 += 1 };
  s2 -> s7 [73, 73] { R19157 += 1, R19113 += 1, R19054 += 1, R19055 += 1 };
  s2 -> s1 [74, 80] { R19157 += 1, R19113 += 1, R19055 += 1 };
  s2 -> s2 [74, 65535] { R19157 += 1, R19113 += 1, R19054 += 1, R19055 += 1 };
  s2 -> s8 [81, 81] { R19157 += 1, R19113 += 1, R19055 += 1 };
  s2 -> s1 [89, 65535] { R19157 += 1, R19113 += 1, R19055 += 1 };
  s3 -> s1 [0, 72] { R19157 += 1, R19113 += 1, R19055 += 1 };
  s3 -> s2 [0, 72] { R19157 += 1, R19113 += 1, R19054 += 1, R19055 += 1 };
  s3 -> s3 [0, 65535] { R19157 += 1, R19112 += 1, R19113 += 1 };
  s3 -> s4 [73, 73] { R19157 += 1, R19113 += 1, R19054 += 1, R19055 += 1 };
  s3 -> s5 [73, 73] { R19157 += 1, R19113 += 1, R19055 += 1 };
  s3 -> s6 [73, 73] { R19157 += 1, R19113 += 1, R19055 += 1 };
  s3 -> s7 [73, 73] { R19157 += 1, R19113 += 1, R19054 += 1, R19055 += 1 };
  s3 -> s1 [74, 80] { R19157 += 1, R19113 += 1, R19055 += 1 };
  s3 -> s2 [74, 65535] { R19157 += 1, R19113 += 1, R19054 += 1, R19055 += 1 };
  s3 -> s8 [81, 81] { R19157 += 1, R19113 += 1, R19055 += 1 };
  s3 -> s1 [89, 65535] { R19157 += 1, R19113 += 1, R19055 += 1 };
  s4 -> s6 [0, 80] { R19157 += 1, R19113 += 1, R19055 += 1 };
  s4 -> s4 [0, 65535] { R19157 += 1, R19113 += 1, R19054 += 1, R19055 += 1 };
  s4 -> s10 [81, 81] { R19157 += 1, R19113 += 1, R19055 += 1 };
  s4 -> s6 [89, 65535] { R19157 += 1, R19113 += 1, R19055 += 1 };
  s6 -> s6 [0, 80] { R19157 += 1, R19113 += 1, R19055 += 1 };
  s6 -> s6 [0, 65535] { R19157 += 1, R19113 += 1 };
  s6 -> s10 [81, 81] { R19157 += 1, R19113 += 1, R19055 += 1 };
  s6 -> s6 [89, 65535] { R19157 += 1, R19113 += 1, R19055 += 1 };
  s8 -> s8 [0, 72] { R19157 += 1, R19113 += 1, R19055 += 1 };
  s8 -> s8 [0, 65535] { R19157 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [73, 73] { R19157 += 1, R19113 += 1 };
  s8 -> s11 [73, 73] { R19157 += 1, R19113 += 1 };
  s8 -> s8 [74, 81] { R19157 += 1, R19113 += 1, R19055 += 1 };
  s8 -> s8 [74, 65535] { R19157 += 1, R19113 += 1 };
  s8 -> s8 [89, 65535] { R19157 += 1, R19113 += 1, R19055 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 81] { R19157 += 1, R19113 += 1, R19055 += 1 };
  s10 -> s9 [0, 65535];
  s10 -> s12 [0, 65535] { R19157 += 1 };
  s10 -> s10 [0, 65535] { R19157 += 1, R19113 += 1 };
  s10 -> s10 [89, 65535] { R19157 += 1, R19113 += 1, R19055 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R19157 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R19157 += 1 };
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [113, 113];
  accepting s1;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
constraint R1 = R19073 && R2 = R19157 && R20 - R19157 = -1 && R21 = R19157 && R22 - R19157 = -1 && R23 = R19157 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R17891 + -1*R17889 - R53 = 0 && R52 + R17890 + R17888 = 0 && R19072 = 0 && R19098 = 0 && R19099 = 0 && R19104 = 0 && R19105 = 0 && R19106 = 0 && R19107 = 0 && R19110 = 0 && R19111 = 0 && R19112 = 0 && R19113 = 0 && R19114 = 0 && R19115 = R19157 && R19116 = 0 && R19117 = R19157 && R19118 = 0 && R19119 = R19157 && R19120 = 0 && R19121 = R19157 && R19122 = 0 && R19123 = R19157 && R19124 = 0 && R19125 = R19157 && R19126 = 0 && R19127 = R19157 && R19128 = 0 && R19129 = R19157 && R19130 = 0 && R19131 = R19157 && R19132 = 0 && R19133 = R19157 && R19134 = 0 && R19135 = R19157 && R19136 = 0 && R19137 = R19157 && R19138 = 0 && R19139 = R19157 && R19140 = 0 && R19141 = R19157 && R19142 = 0 && R19143 = R19157 && R19144 = 0 && R19145 = R19157 && R19146 = 0 && R19147 = R19157 && R19148 = 0 && R19149 = R19157 && R19150 = 0 && R19151 = R19157 && R19152 = 0 && R19153 = R19157 && R19154 = 0 && R19155 = R19157 && R19156 = 0 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R17891 + -1*R17889 - R53 < 1 && -1 < R19073 && 0 < R19157 && (R48 + R15347 + R15344 != 0 || ((R42 + R11524 + R11522 != 0 || R43 + R11525 + R11523 + -1*R17891 + -1*R17889 - R53 = 0 || R53 + R17891 + R17889 < 1) && (R42 + R11524 + R11522 = 0 || R53 + R17891 + R17889 < 1))) && (R48 + R15347 + R15344 != 0 || ((R46 + R15345 + R15342 != 0 || R47 + R15346 + R15343 + -1*R17891 + -1*R17889 - R53 = 0 || R53 + R17891 + R17889 < 1) && (R46 + R15345 + R15342 = 0 || R53 + R17891 + R17889 < 1))) && (R19058 != 0 || R19059 = R19073 || (R17 = 0 && R19073 = 0)) && (R19060 != 0 || R19061 = R19073 || (R17 = 0 && R19073 = 0)) && (R19062 != 0 || R19063 = R19073 || (R17 = 0 && R19073 = 0)) && (R19064 != 0 || R19065 = R19073 || (R17 = 0 && R19073 = 0)) && (R19066 != 0 || R19067 = R19073 || (R17 = 0 && R19073 = 0)) && (R19068 != 0 || R19069 = R19073 || (R17 = 0 && R19073 = 0)) && (R19070 != 0 || R19071 = R19073 || (R17 = 0 && R19073 = 0)) && (R19074 != 0 || R19073 = R19075 || (R17 = 0 && R19073 = 0)) && (R19076 != 0 || R19073 = R19077 || (R17 = 0 && R19073 = 0)) && (R18 = 0 || (R19096 = 0 && R19097 = 0)) && (R18 = 0 || (R19100 = 0 && R19101 = 0)) && (R18 = 0 || (R19102 = 0 && R19103 = 0)) && (R18 = 0 || (R19108 = 0 && R19109 = 0)) && (R19 = 0 || (R19078 = 0 && R19079 = 0)) && (R19 = 0 || (R19080 = 0 && R19081 = 0)) && (R19 = 0 || (R19082 = 0 && R19083 = 0)) && (R19 = 0 || (R19084 = 0 && R19085 = 0)) && (R19 = 0 || (R19086 = 0 && R19087 = 0)) && (R19 = 0 || (R19088 = 0 && R19089 = 0)) && (R19 = 0 || (R19090 = 0 && R19091 = 0)) && (R19 = 0 || (R19092 = 0 && R19093 = 0)) && (R19 = 0 || (R19094 = 0 && R19095 = 0)) && (R48 + R15347 + R15344 = 0 || (R42 + R11524 + R11522 = 0 && R43 + R11525 + R11523 + -1*R17891 + -1*R17889 - R53 = 0)) && (R48 + R15347 + R15344 = 0 || (R46 + R15345 + R15342 = 0 && R47 + R15346 + R15343 + -1*R17891 + -1*R17889 - R53 = 0)) && (R58 + R18741 + R18738 = 0 || (R56 + R18739 + R18736 = 0 && R57 + R18740 + R18737 = 0)) && (R58 + R18741 + R18738 = 0 || (R62 + R19056 + R19054 = 0 && R63 + R19057 + R19055 = 0)) && (R19058 = 0 || (R17 = 0 && R19073 = 0)) && (R19060 = 0 || (R17 = 0 && R19073 = 0)) && (R19062 = 0 || (R17 = 0 && R19073 = 0)) && (R19064 = 0 || (R17 = 0 && R19073 = 0)) && (R19066 = 0 || (R17 = 0 && R19073 = 0)) && (R19068 = 0 || (R17 = 0 && R19073 = 0)) && (R19070 = 0 || (R17 = 0 && R19073 = 0)) && (R19074 = 0 || (R17 = 0 && R19073 = 0)) && (R19076 = 0 || (R17 = 0 && R19073 = 0));
// End of Parikh automata intersection problem
