// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R11522, R11523, R11524, R11525, R12, R15342, R15343, R15344, R15345, R15346, R15347, R16618, R16619, R16620, R16621, R16622, R16623, R16624, R16625, R16626, R16627, R16836, R16837, R16838, R16839, R16840, R16841, R16842, R16843, R16844, R16845, R16846, R16847, R16848, R16849, R16850, R16851, R16852, R16853, R16854, R16855, R16856, R16857, R16858, R16859, R16860, R16861, R16862, R16863, R16864, R16865, R16866, R16867, R16868, R16869, R16870, R16871, R16872, R16873, R16874, R16875, R16876, R16877, R16878, R16879, R16880, R16881, R16882, R16883, R16884, R16885, R16886, R16887, R16888, R16889, R16890, R16891, R16892, R16893, R16894, R16895, R16896, R16897, R16898, R16899, R16900, R16901, R16902, R16903, R16904, R16905, R16906, R16907, R16908, R16909, R16910, R16911, R16912, R16913, R16914, R16915, R16916, R16917, R16918, R16919, R16920, R16921, R16922, R16923, R16924, R16925, R16926, R16927, R16928, R16929, R16930, R16931, R16932, R16933, R16934, R16935, R16936, R16937, R16938, R16939, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 72];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [73, 73];
  s0 -> s1 [74, 65535];
  s1 -> s1 [0, 72];
  s1 -> s2 [73, 73];
  s1 -> s1 [74, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s1 [0, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R25 += 1 };
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R16860 += 1, R16861 += 1 };
  s0 -> s1 [0, 65535] { R16861 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R16861 += 1, R19 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 72] { R16863 += 1 };
  s0 -> s0 [0, 65535] { R16862 += 1, R16863 += 1 };
  s0 -> s2 [73, 73] { R16863 += 1 };
  s0 -> s3 [73, 73] { R16863 += 1 };
  s0 -> s1 [82, 65535] { R16863 += 1 };
  s1 -> s1 [0, 72] { R16863 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R16863 += 1 };
  s1 -> s3 [73, 73] { R16863 += 1 };
  s1 -> s1 [82, 65535] { R16863 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 73] { R16863 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [82, 65535] { R16863 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 72] { R16865 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R16864 += 1, R16865 += 1 };
  s0 -> s2 [73, 73] { R16865 += 1, R38 += 1 };
  s0 -> s3 [73, 73] { R16865 += 1, R38 += 1 };
  s0 -> s1 [74, 65535] { R16865 += 1, R38 += 1 };
  s1 -> s1 [0, 72] { R16865 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R16865 += 1, R38 += 1 };
  s1 -> s3 [73, 73] { R16865 += 1, R38 += 1 };
  s1 -> s1 [74, 65535] { R16865 += 1, R38 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R16865 += 1, R38 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 72] { R16867 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R16866 += 1, R16867 += 1 };
  s0 -> s2 [73, 73] { R16867 += 1, R40 += 1 };
  s0 -> s3 [73, 73] { R16867 += 1, R40 += 1 };
  s0 -> s1 [74, 65535] { R16867 += 1, R40 += 1 };
  s1 -> s1 [0, 72] { R16867 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R16867 += 1, R40 += 1 };
  s1 -> s3 [73, 73] { R16867 += 1, R40 += 1 };
  s1 -> s1 [74, 65535] { R16867 += 1, R40 += 1 };
  s2 -> s2 [0, 65535] { R16867 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 72] { R16869 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R16868 += 1, R16869 += 1 };
  s0 -> s2 [73, 73] { R16869 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [73, 73] { R16869 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [74, 65535] { R16869 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 72] { R16869 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R16869 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [73, 73] { R16869 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [74, 65535] { R16869 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R16869 += 1, R42 += 1, R43 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 72] { R16871 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R16870 += 1, R16871 += 1 };
  s0 -> s2 [73, 73] { R16871 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [73, 73] { R16871 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [74, 65535] { R16871 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 72] { R16871 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R16871 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [73, 73] { R16871 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [74, 65535] { R16871 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R16871 += 1, R46 += 1, R47 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 72] { R16873 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R16872 += 1, R16873 += 1 };
  s0 -> s2 [73, 73] { R16873 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [73, 73] { R16873 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [74, 65535] { R16873 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 72] { R16873 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R16873 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [73, 73] { R16873 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [74, 65535] { R16873 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535] { R16873 += 1, R52 += 1, R53 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 72] { R16875 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R16874 += 1, R16875 += 1 };
  s0 -> s2 [73, 73] { R16875 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [73, 73] { R16875 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [74, 65535] { R16875 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 72] { R16875 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R16875 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [73, 73] { R16875 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [74, 65535] { R16875 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R16875 += 1, R56 += 1, R57 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 72] { R16877 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R16876 += 1, R16877 += 1 };
  s0 -> s2 [73, 73] { R16877 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [73, 73] { R16877 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [74, 65535] { R16877 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 72] { R16877 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R16877 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [73, 73] { R16877 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [74, 65535] { R16877 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535] { R16877 += 1, R62 += 1, R63 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 72] { R16897 += 1 };
  s0 -> s0 [0, 65535] { R16896 += 1, R16897 += 1 };
  s0 -> s2 [73, 73] { R16897 += 1 };
  s0 -> s1 [74, 65535] { R16897 += 1 };
  s1 -> s1 [0, 72] { R16897 += 1 };
  s1 -> s2 [73, 73] { R16897 += 1 };
  s1 -> s1 [74, 65535] { R16897 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R16897 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R16899 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R16898 += 1, R16899 += 1 };
  s1 -> s1 [0, 65535] { R16899 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 72] { R16901 += 1 };
  s0 -> s0 [0, 65535] { R16900 += 1, R16901 += 1 };
  s0 -> s2 [0, 65535] { R16901 += 1, R8 += 1 };
  s0 -> s3 [73, 73] { R16901 += 1 };
  s0 -> s1 [74, 65535] { R16901 += 1 };
  s1 -> s1 [0, 72] { R16901 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [73, 73] { R16901 += 1 };
  s1 -> s1 [74, 65535] { R16901 += 1 };
  s2 -> s1 [0, 72] { R16901 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R16901 += 1, R8 += 1 };
  s2 -> s3 [73, 73] { R16901 += 1 };
  s2 -> s1 [74, 65535] { R16901 += 1 };
  s3 -> s3 [0, 65535] { R16901 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 72] { R16903 += 1, R16841 += 1 };
  s0 -> s0 [0, 65535] { R16902 += 1, R16903 += 1 };
  s0 -> s2 [0, 65535] { R16903 += 1, R16840 += 1, R16841 += 1 };
  s0 -> s1 [74, 65535] { R16903 += 1, R16841 += 1 };
  s1 -> s1 [0, 72] { R16903 += 1, R16841 += 1 };
  s1 -> s1 [0, 65535] { R16903 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [74, 65535] { R16903 += 1, R16841 += 1 };
  s2 -> s1 [0, 72] { R16903 += 1, R16841 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R16903 += 1, R16840 += 1, R16841 += 1 };
  s2 -> s1 [74, 65535] { R16903 += 1, R16841 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R16905 += 1, R16842 += 1, R16843 += 1 };
  s0 -> s0 [0, 65535] { R16904 += 1, R16905 += 1 };
  s0 -> s2 [0, 65535] { R16905 += 1, R16843 += 1, R17 += 1 };
  s1 -> s1 [0, 65535] { R16905 += 1, R16842 += 1, R16843 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R16905 += 1, R16843 += 1, R17 += 1 };
  s2 -> s3 [0, 65535] { R16905 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R16905 += 1, R16843 += 1, R17 += 1 };
  s3 -> s3 [0, 65535] { R16905 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 73] { R16907 += 1, R16845 += 1 };
  s0 -> s2 [0, 65535] { R16907 += 1, R16844 += 1, R16845 += 1 };
  s0 -> s0 [0, 65535] { R16906 += 1, R16907 += 1 };
  s0 -> s1 [81, 65535] { R16907 += 1, R16845 += 1 };
  s1 -> s1 [0, 73] { R16907 += 1, R16845 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R16907 += 1 };
  s1 -> s1 [81, 65535] { R16907 += 1, R16845 += 1 };
  s2 -> s1 [0, 73] { R16907 += 1, R16845 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R16907 += 1, R16844 += 1, R16845 += 1 };
  s2 -> s1 [81, 65535] { R16907 += 1, R16845 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R16909 += 1, R16846 += 1, R16847 += 1 };
  s0 -> s0 [0, 65535] { R16908 += 1, R16909 += 1 };
  s0 -> s2 [0, 65535] { R16909 += 1, R16847 += 1, R67 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R16909 += 1, R16846 += 1, R16847 += 1 };
  s1 -> s2 [0, 65535] { R16909 += 1, R16847 += 1, R67 += 1 };
  s2 -> s3 [0, 65535] { R16909 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R16909 += 1, R16847 += 1, R67 += 1 };
  s3 -> s3 [0, 65535] { R16909 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 80] { R16911 += 1, R16849 += 1 };
  s0 -> s2 [0, 65535] { R16911 += 1, R16849 += 1, R69 += 1 };
  s0 -> s3 [0, 65535] { R16911 += 1, R16848 += 1, R16849 += 1 };
  s0 -> s0 [0, 65535] { R16910 += 1, R16911 += 1 };
  s0 -> s1 [82, 65535] { R16911 += 1, R16849 += 1 };
  s1 -> s1 [0, 80] { R16911 += 1, R16849 += 1 };
  s1 -> s1 [0, 65535] { R16911 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [82, 65535] { R16911 += 1, R16849 += 1 };
  s2 -> s1 [0, 80] { R16911 += 1, R16849 += 1 };
  s2 -> s5 [0, 65535] { R16911 += 1 };
  s2 -> s2 [0, 65535] { R16911 += 1, R16849 += 1, R69 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [82, 65535] { R16911 += 1, R16849 += 1 };
  s3 -> s1 [0, 80] { R16911 += 1, R16849 += 1 };
  s3 -> s2 [0, 65535] { R16911 += 1, R16849 += 1, R69 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R16911 += 1, R16848 += 1, R16849 += 1 };
  s3 -> s1 [82, 65535] { R16911 += 1, R16849 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R16911 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 80] { R16913 += 1, R16851 += 1, R11525 += 1 };
  s0 -> s1 [0, 65535] { R16913 += 1, R16851 += 1 };
  s0 -> s2 [0, 65535] { R16913 += 1, R16850 += 1, R16851 += 1 };
  s0 -> s0 [0, 65535] { R16912 += 1, R16913 += 1 };
  s0 -> s1 [82, 65535] { R16913 += 1, R16851 += 1, R11525 += 1 };
  s1 -> s1 [0, 80] { R16913 += 1, R16851 += 1, R11525 += 1 };
  s1 -> s1 [0, 65535] { R16913 += 1, R16851 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R16913 += 1 };
  s1 -> s1 [82, 65535] { R16913 += 1, R16851 += 1, R11525 += 1 };
  s2 -> s1 [0, 80] { R16913 += 1, R16851 += 1, R11525 += 1 };
  s2 -> s1 [0, 65535] { R16913 += 1, R16851 += 1 };
  s2 -> s2 [0, 65535] { R16913 += 1, R16850 += 1, R16851 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [82, 65535] { R16913 += 1, R16851 += 1, R11525 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R16913 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R16915 += 1, R16853 += 1 };
  s0 -> s2 [0, 65535] { R16915 += 1, R16853 += 1, R15346 += 1, R15347 += 1 };
  s0 -> s3 [0, 65535] { R16915 += 1, R16852 += 1, R16853 += 1 };
  s0 -> s0 [0, 65535] { R16914 += 1, R16915 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R16915 += 1 };
  s1 -> s1 [0, 65535] { R16915 += 1, R16853 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R16915 += 1 };
  s2 -> s2 [0, 65535] { R16915 += 1, R16853 += 1, R15346 += 1, R15347 += 1 };
  s2 -> s1 [0, 65535] { R16915 += 1, R16853 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R16915 += 1, R16853 += 1 };
  s3 -> s2 [0, 65535] { R16915 += 1, R16853 += 1, R15346 += 1, R15347 += 1 };
  s3 -> s3 [0, 65535] { R16915 += 1, R16852 += 1, R16853 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R16915 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 81] { R16917 += 1, R16855 += 1, R16621 += 1 };
  s0 -> s2 [0, 65535] { R16917 += 1, R16854 += 1, R16855 += 1 };
  s0 -> s0 [0, 65535] { R16916 += 1, R16917 += 1 };
  s0 -> s3 [88, 88] { R16917 += 1, R16855 += 1, R16621 += 1 };
  s0 -> s1 [89, 65535] { R16917 += 1, R16855 += 1, R16621 += 1 };
  s1 -> s1 [0, 81] { R16917 += 1, R16855 += 1, R16621 += 1 };
  s1 -> s3 [88, 88] { R16917 += 1, R16855 += 1, R16621 += 1 };
  s1 -> s1 [89, 65535] { R16917 += 1, R16855 += 1, R16621 += 1 };
  s2 -> s1 [0, 81] { R16917 += 1, R16855 += 1, R16621 += 1 };
  s2 -> s2 [0, 65535] { R16917 += 1, R16854 += 1, R16855 += 1 };
  s2 -> s3 [88, 88] { R16917 += 1, R16855 += 1, R16621 += 1 };
  s2 -> s1 [89, 65535] { R16917 += 1, R16855 += 1, R16621 += 1 };
  s3 -> s3 [0, 81] { R16917 += 1, R16855 += 1, R16621 += 1 };
  s3 -> s4 [0, 65535] { R16917 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R16917 += 1, R16855 += 1 };
  s3 -> s3 [88, 65535] { R16917 += 1, R16855 += 1, R16621 += 1 };
  s4 -> s4 [0, 65535] { R16917 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R16919 += 1, R16856 += 1, R16857 += 1 };
  s0 -> s0 [0, 65535] { R16918 += 1, R16919 += 1 };
  s0 -> s2 [0, 65535] { R16919 += 1, R16857 += 1, R16625 += 1, R16626 += 1 };
  s0 -> s3 [0, 65535] { R16919 += 1, R16857 += 1, R16626 += 1, R16627 += 1 };
  s1 -> s1 [0, 65535] { R16919 += 1, R16856 += 1, R16857 += 1 };
  s1 -> s2 [0, 65535] { R16919 += 1, R16857 += 1, R16625 += 1, R16626 += 1 };
  s1 -> s3 [0, 65535] { R16919 += 1, R16857 += 1, R16626 += 1, R16627 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R16919 += 1, R16857 += 1, R16625 += 1, R16626 += 1 };
  s2 -> s3 [0, 65535] { R16919 += 1, R16857 += 1, R16626 += 1, R16627 += 1 };
  s2 -> s4 [0, 65535] { R16919 += 1 };
  s2 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R16919 += 1, R16857 += 1, R16626 += 1, R16627 += 1 };
  s3 -> s4 [0, 65535] { R16919 += 1 };
  s3 -> s5 [0, 65535] { R16919 += 1, R16857 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R16919 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s4 [0, 65535] { R16919 += 1 };
  s5 -> s5 [0, 65535] { R16919 += 1, R16857 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 65535] { R16921 += 1, R16859 += 1 };
  s0 -> s2 [0, 65535] { R16921 += 1, R16858 += 1, R16859 += 1 };
  s0 -> s0 [0, 65535] { R16920 += 1, R16921 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R16921 += 1 };
  s1 -> s1 [0, 65535] { R16921 += 1, R16859 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R16921 += 1, R16859 += 1 };
  s2 -> s2 [0, 65535] { R16921 += 1, R16858 += 1, R16859 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R16921 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s0 [0, 65535] { R16922 += 1, R16923 += 1 };
  s0 -> s1 [0, 65535] { R16923 += 1, R16878 += 1, R16879 += 1 };
  s0 -> s2 [0, 65535] { R16923 += 1, R16879 += 1, R18 += 1 };
  s1 -> s1 [0, 65535] { R16923 += 1, R16878 += 1, R16879 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R16923 += 1, R16879 += 1, R18 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R16923 += 1, R16879 += 1, R18 += 1 };
  s2 -> s4 [0, 65535] { R16923 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R16923 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 72] { R16925 += 1, R16881 += 1 };
  s0 -> s2 [0, 65535] { R16925 += 1, R16880 += 1, R16881 += 1 };
  s0 -> s0 [0, 65535] { R16924 += 1, R16925 += 1 };
  s0 -> s3 [73, 73] { R16925 += 1, R16881 += 1 };
  s0 -> s4 [73, 73] { R16925 += 1, R16881 += 1 };
  s0 -> s5 [81, 81] { R16925 += 1, R16881 += 1 };
  s0 -> s1 [82, 65535] { R16925 += 1, R16881 += 1 };
  s1 -> s1 [0, 72] { R16925 += 1, R16881 += 1 };
  s1 -> s3 [73, 73] { R16925 += 1, R16881 += 1 };
  s1 -> s4 [73, 73] { R16925 += 1, R16881 += 1 };
  s1 -> s5 [81, 81] { R16925 += 1, R16881 += 1 };
  s1 -> s1 [82, 65535] { R16925 += 1, R16881 += 1 };
  s2 -> s1 [0, 72] { R16925 += 1, R16881 += 1 };
  s2 -> s2 [0, 65535] { R16925 += 1, R16880 += 1, R16881 += 1 };
  s2 -> s3 [73, 73] { R16925 += 1, R16881 += 1 };
  s2 -> s4 [73, 73] { R16925 += 1, R16881 += 1 };
  s2 -> s5 [81, 81] { R16925 += 1, R16881 += 1 };
  s2 -> s1 [82, 65535] { R16925 += 1, R16881 += 1 };
  s3 -> s3 [0, 73] { R16925 += 1, R16881 += 1 };
  s3 -> s7 [81, 81] { R16925 += 1, R16881 += 1 };
  s3 -> s3 [82, 65535] { R16925 += 1, R16881 += 1 };
  s5 -> s5 [0, 72] { R16925 += 1, R16881 += 1 };
  s5 -> s5 [0, 65535] { R16925 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [73, 73] { R16925 += 1, R16881 += 1 };
  s5 -> s8 [73, 73] { R16925 += 1, R16881 += 1 };
  s5 -> s5 [81, 65535] { R16925 += 1, R16881 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 73] { R16925 += 1, R16881 += 1 };
  s7 -> s7 [0, 65535] { R16925 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [81, 65535] { R16925 += 1, R16881 += 1 };
  s8 -> s8 [0, 65535] { R16925 += 1 };
  s8 -> s6 [0, 65535];
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 72] { R16927 += 1, R16883 += 1, R66 += 1 };
  s0 -> s2 [0, 65535] { R16927 += 1, R16882 += 1, R16883 += 1 };
  s0 -> s0 [0, 65535] { R16926 += 1, R16927 += 1 };
  s0 -> s3 [73, 73] { R16927 += 1, R16883 += 1, R66 += 1 };
  s0 -> s4 [73, 73] { R16927 += 1, R16883 += 1, R66 += 1 };
  s0 -> s1 [74, 65535] { R16927 += 1, R16883 += 1, R66 += 1 };
  s1 -> s1 [0, 72] { R16927 += 1, R16883 += 1, R66 += 1 };
  s1 -> s1 [0, 65535] { R16927 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R16927 += 1, R16883 += 1, R66 += 1 };
  s1 -> s4 [73, 73] { R16927 += 1, R16883 += 1, R66 += 1 };
  s1 -> s1 [74, 65535] { R16927 += 1, R16883 += 1, R66 += 1 };
  s2 -> s1 [0, 72] { R16927 += 1, R16883 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R16927 += 1, R16882 += 1, R16883 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R16927 += 1, R16883 += 1, R66 += 1 };
  s2 -> s4 [73, 73] { R16927 += 1, R16883 += 1, R66 += 1 };
  s2 -> s1 [74, 65535] { R16927 += 1, R16883 += 1, R66 += 1 };
  s3 -> s3 [0, 65535] { R16927 += 1, R16883 += 1, R66 += 1 };
  s3 -> s6 [0, 65535] { R16927 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R16927 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R16927 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 72] { R16929 += 1, R16885 += 1, R68 += 1 };
  s0 -> s2 [0, 65535] { R16929 += 1, R16884 += 1, R16885 += 1 };
  s0 -> s0 [0, 65535] { R16928 += 1, R16929 += 1 };
  s0 -> s3 [73, 73] { R16929 += 1, R16885 += 1, R68 += 1 };
  s0 -> s4 [73, 73] { R16929 += 1, R16885 += 1, R68 += 1 };
  s0 -> s1 [74, 65535] { R16929 += 1, R16885 += 1, R68 += 1 };
  s1 -> s1 [0, 72] { R16929 += 1, R16885 += 1, R68 += 1 };
  s1 -> s1 [0, 65535] { R16929 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R16929 += 1, R16885 += 1, R68 += 1 };
  s1 -> s4 [73, 73] { R16929 += 1, R16885 += 1, R68 += 1 };
  s1 -> s1 [74, 65535] { R16929 += 1, R16885 += 1, R68 += 1 };
  s2 -> s1 [0, 72] { R16929 += 1, R16885 += 1, R68 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R16929 += 1, R16884 += 1, R16885 += 1 };
  s2 -> s3 [73, 73] { R16929 += 1, R16885 += 1, R68 += 1 };
  s2 -> s4 [73, 73] { R16929 += 1, R16885 += 1, R68 += 1 };
  s2 -> s1 [74, 65535] { R16929 += 1, R16885 += 1, R68 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R16929 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R16929 += 1 };
  s4 -> s4 [0, 65535] { R16929 += 1, R16885 += 1, R68 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R16929 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 72] { R16931 += 1, R16887 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s2 [0, 72] { R16931 += 1, R16887 += 1, R11523 += 1 };
  s0 -> s3 [0, 65535] { R16931 += 1, R16886 += 1, R16887 += 1 };
  s0 -> s0 [0, 65535] { R16930 += 1, R16931 += 1 };
  s0 -> s4 [73, 73] { R16931 += 1, R16887 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s5 [73, 73] { R16931 += 1, R16887 += 1, R11523 += 1 };
  s0 -> s6 [73, 73] { R16931 += 1, R16887 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s7 [73, 73] { R16931 += 1, R16887 += 1, R11523 += 1 };
  s0 -> s2 [74, 80] { R16931 += 1, R16887 += 1, R11523 += 1 };
  s0 -> s1 [74, 65535] { R16931 += 1, R16887 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s2 [82, 65535] { R16931 += 1, R16887 += 1, R11523 += 1 };
  s1 -> s1 [0, 72] { R16931 += 1, R16887 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s2 [0, 72] { R16931 += 1, R16887 += 1, R11523 += 1 };
  s1 -> s4 [73, 73] { R16931 += 1, R16887 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s5 [73, 73] { R16931 += 1, R16887 += 1, R11523 += 1 };
  s1 -> s6 [73, 73] { R16931 += 1, R16887 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s7 [73, 73] { R16931 += 1, R16887 += 1, R11523 += 1 };
  s1 -> s2 [74, 80] { R16931 += 1, R16887 += 1, R11523 += 1 };
  s1 -> s1 [74, 65535] { R16931 += 1, R16887 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s2 [82, 65535] { R16931 += 1, R16887 += 1, R11523 += 1 };
  s2 -> s2 [0, 72] { R16931 += 1, R16887 += 1, R11523 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R16931 += 1 };
  s2 -> s5 [73, 73] { R16931 += 1, R16887 += 1 };
  s2 -> s7 [73, 73] { R16931 += 1, R16887 += 1 };
  s2 -> s2 [74, 80] { R16931 += 1, R16887 += 1, R11523 += 1 };
  s2 -> s2 [74, 65535] { R16931 += 1, R16887 += 1 };
  s2 -> s2 [82, 65535] { R16931 += 1, R16887 += 1, R11523 += 1 };
  s3 -> s1 [0, 72] { R16931 += 1, R16887 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s2 [0, 72] { R16931 += 1, R16887 += 1, R11523 += 1 };
  s3 -> s3 [0, 65535] { R16931 += 1, R16886 += 1, R16887 += 1 };
  s3 -> s4 [73, 73] { R16931 += 1, R16887 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s5 [73, 73] { R16931 += 1, R16887 += 1, R11523 += 1 };
  s3 -> s6 [73, 73] { R16931 += 1, R16887 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s7 [73, 73] { R16931 += 1, R16887 += 1, R11523 += 1 };
  s3 -> s2 [74, 80] { R16931 += 1, R16887 += 1, R11523 += 1 };
  s3 -> s1 [74, 65535] { R16931 += 1, R16887 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s2 [82, 65535] { R16931 += 1, R16887 += 1, R11523 += 1 };
  s4 -> s5 [0, 80] { R16931 += 1, R16887 += 1, R11523 += 1 };
  s4 -> s4 [0, 65535] { R16931 += 1, R16887 += 1, R11522 += 1, R11523 += 1 };
  s4 -> s5 [82, 65535] { R16931 += 1, R16887 += 1, R11523 += 1 };
  s5 -> s5 [0, 80] { R16931 += 1, R16887 += 1, R11523 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s5 [0, 65535] { R16931 += 1, R16887 += 1 };
  s5 -> s9 [0, 65535] { R16931 += 1 };
  s5 -> s5 [82, 65535] { R16931 += 1, R16887 += 1, R11523 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R16931 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R16931 += 1 };
  accepting s8, s5, s2, s9, s7;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 72] { R16933 += 1, R16889 += 1, R15342 += 1, R15343 += 1 };
  s0 -> s2 [0, 72] { R16933 += 1, R16889 += 1, R15343 += 1, R15344 += 1 };
  s0 -> s3 [0, 65535] { R16933 += 1, R16888 += 1, R16889 += 1 };
  s0 -> s0 [0, 65535] { R16932 += 1, R16933 += 1 };
  s0 -> s4 [73, 73] { R16933 += 1, R16889 += 1, R15342 += 1, R15343 += 1 };
  s0 -> s5 [73, 73] { R16933 += 1, R16889 += 1, R15343 += 1, R15344 += 1 };
  s0 -> s6 [73, 73] { R16933 += 1, R16889 += 1, R15343 += 1, R15344 += 1 };
  s0 -> s7 [73, 73] { R16933 += 1, R16889 += 1, R15342 += 1, R15343 += 1 };
  s0 -> s1 [74, 65535] { R16933 += 1, R16889 += 1, R15342 += 1, R15343 += 1 };
  s0 -> s2 [74, 65535] { R16933 += 1, R16889 += 1, R15343 += 1, R15344 += 1 };
  s1 -> s1 [0, 72] { R16933 += 1, R16889 += 1, R15342 += 1, R15343 += 1 };
  s1 -> s2 [0, 72] { R16933 += 1, R16889 += 1, R15343 += 1, R15344 += 1 };
  s1 -> s4 [73, 73] { R16933 += 1, R16889 += 1, R15342 += 1, R15343 += 1 };
  s1 -> s5 [73, 73] { R16933 += 1, R16889 += 1, R15343 += 1, R15344 += 1 };
  s1 -> s6 [73, 73] { R16933 += 1, R16889 += 1, R15343 += 1, R15344 += 1 };
  s1 -> s7 [73, 73] { R16933 += 1, R16889 += 1, R15342 += 1, R15343 += 1 };
  s1 -> s1 [74, 65535] { R16933 += 1, R16889 += 1, R15342 += 1, R15343 += 1 };
  s1 -> s2 [74, 65535] { R16933 += 1, R16889 += 1, R15343 += 1, R15344 += 1 };
  s2 -> s2 [0, 72] { R16933 += 1, R16889 += 1, R15343 += 1, R15344 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R16933 += 1 };
  s2 -> s5 [73, 73] { R16933 += 1, R16889 += 1, R15343 += 1, R15344 += 1 };
  s2 -> s6 [73, 73] { R16933 += 1, R16889 += 1, R15343 += 1, R15344 += 1 };
  s2 -> s2 [74, 65535] { R16933 += 1, R16889 += 1, R15343 += 1, R15344 += 1 };
  s3 -> s1 [0, 72] { R16933 += 1, R16889 += 1, R15342 += 1, R15343 += 1 };
  s3 -> s2 [0, 72] { R16933 += 1, R16889 += 1, R15343 += 1, R15344 += 1 };
  s3 -> s3 [0, 65535] { R16933 += 1, R16888 += 1, R16889 += 1 };
  s3 -> s4 [73, 73] { R16933 += 1, R16889 += 1, R15342 += 1, R15343 += 1 };
  s3 -> s5 [73, 73] { R16933 += 1, R16889 += 1, R15343 += 1, R15344 += 1 };
  s3 -> s6 [73, 73] { R16933 += 1, R16889 += 1, R15343 += 1, R15344 += 1 };
  s3 -> s7 [73, 73] { R16933 += 1, R16889 += 1, R15342 += 1, R15343 += 1 };
  s3 -> s1 [74, 65535] { R16933 += 1, R16889 += 1, R15342 += 1, R15343 += 1 };
  s3 -> s2 [74, 65535] { R16933 += 1, R16889 += 1, R15343 += 1, R15344 += 1 };
  s4 -> s4 [0, 65535] { R16933 += 1, R16889 += 1, R15342 += 1, R15343 += 1 };
  s4 -> s6 [0, 65535] { R16933 += 1, R16889 += 1, R15343 += 1, R15344 += 1 };
  s5 -> s5 [0, 65535] { R16933 += 1 };
  s5 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R16933 += 1, R16889 += 1, R15343 += 1, R15344 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s9 [0, 65535] { R16933 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R16933 += 1 };
  accepting s8, s5, s2, s9, s6;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 72] { R16935 += 1, R16891 += 1, R16618 += 1, R16619 += 1 };
  s0 -> s2 [0, 72] { R16935 += 1, R16891 += 1, R16619 += 1 };
  s0 -> s3 [0, 65535] { R16935 += 1, R16890 += 1, R16891 += 1 };
  s0 -> s0 [0, 65535] { R16934 += 1, R16935 += 1 };
  s0 -> s4 [73, 73] { R16935 += 1, R16891 += 1, R16619 += 1 };
  s0 -> s5 [73, 73] { R16935 += 1, R16891 += 1, R16619 += 1 };
  s0 -> s6 [73, 73] { R16935 += 1, R16891 += 1, R16618 += 1, R16619 += 1 };
  s0 -> s7 [73, 73] { R16935 += 1, R16891 += 1, R16618 += 1, R16619 += 1 };
  s0 -> s2 [74, 81] { R16935 += 1, R16891 += 1, R16619 += 1 };
  s0 -> s1 [74, 65535] { R16935 += 1, R16891 += 1, R16618 += 1, R16619 += 1 };
  s0 -> s2 [89, 65535] { R16935 += 1, R16891 += 1, R16619 += 1 };
  s1 -> s1 [0, 72] { R16935 += 1, R16891 += 1, R16618 += 1, R16619 += 1 };
  s1 -> s2 [0, 72] { R16935 += 1, R16891 += 1, R16619 += 1 };
  s1 -> s4 [73, 73] { R16935 += 1, R16891 += 1, R16619 += 1 };
  s1 -> s5 [73, 73] { R16935 += 1, R16891 += 1, R16619 += 1 };
  s1 -> s6 [73, 73] { R16935 += 1, R16891 += 1, R16618 += 1, R16619 += 1 };
  s1 -> s7 [73, 73] { R16935 += 1, R16891 += 1, R16618 += 1, R16619 += 1 };
  s1 -> s2 [74, 81] { R16935 += 1, R16891 += 1, R16619 += 1 };
  s1 -> s1 [74, 65535] { R16935 += 1, R16891 += 1, R16618 += 1, R16619 += 1 };
  s1 -> s2 [89, 65535] { R16935 += 1, R16891 += 1, R16619 += 1 };
  s2 -> s2 [0, 72] { R16935 += 1, R16891 += 1, R16619 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R16935 += 1 };
  s2 -> s4 [73, 73] { R16935 += 1, R16891 += 1, R16619 += 1 };
  s2 -> s5 [73, 73] { R16935 += 1, R16891 += 1, R16619 += 1 };
  s2 -> s2 [74, 81] { R16935 += 1, R16891 += 1, R16619 += 1 };
  s2 -> s2 [89, 65535] { R16935 += 1, R16891 += 1, R16619 += 1 };
  s3 -> s1 [0, 72] { R16935 += 1, R16891 += 1, R16618 += 1, R16619 += 1 };
  s3 -> s2 [0, 72] { R16935 += 1, R16891 += 1, R16619 += 1 };
  s3 -> s3 [0, 65535] { R16935 += 1, R16890 += 1, R16891 += 1 };
  s3 -> s4 [73, 73] { R16935 += 1, R16891 += 1, R16619 += 1 };
  s3 -> s5 [73, 73] { R16935 += 1, R16891 += 1, R16619 += 1 };
  s3 -> s6 [73, 73] { R16935 += 1, R16891 += 1, R16618 += 1, R16619 += 1 };
  s3 -> s7 [73, 73] { R16935 += 1, R16891 += 1, R16618 += 1, R16619 += 1 };
  s3 -> s2 [74, 81] { R16935 += 1, R16891 += 1, R16619 += 1 };
  s3 -> s1 [74, 65535] { R16935 += 1, R16891 += 1, R16618 += 1, R16619 += 1 };
  s3 -> s2 [89, 65535] { R16935 += 1, R16891 += 1, R16619 += 1 };
  s4 -> s4 [0, 65535] { R16935 += 1 };
  s4 -> s8 [0, 65535];
  s5 -> s5 [0, 81] { R16935 += 1, R16891 += 1, R16619 += 1 };
  s5 -> s5 [0, 65535] { R16935 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s5 [89, 65535] { R16935 += 1, R16891 += 1, R16619 += 1 };
  s7 -> s5 [0, 81] { R16935 += 1, R16891 += 1, R16619 += 1 };
  s7 -> s7 [0, 65535] { R16935 += 1, R16891 += 1, R16618 += 1, R16619 += 1 };
  s7 -> s5 [89, 65535] { R16935 += 1, R16891 += 1, R16619 += 1 };
  s8 -> s8 [0, 65535];
  accepting s2, s4, s5, s8;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 72] { R16937 += 1, R16893 += 1, R16622 += 1, R16623 += 1 };
  s0 -> s2 [0, 65535] { R16937 += 1, R16892 += 1, R16893 += 1 };
  s0 -> s0 [0, 65535] { R16936 += 1, R16937 += 1 };
  s0 -> s3 [73, 73] { R16937 += 1, R16893 += 1, R16622 += 1, R16623 += 1 };
  s0 -> s4 [73, 73] { R16937 += 1, R16893 += 1, R16622 += 1, R16623 += 1 };
  s0 -> s1 [74, 65535] { R16937 += 1, R16893 += 1, R16622 += 1, R16623 += 1 };
  s1 -> s1 [0, 72] { R16937 += 1, R16893 += 1, R16622 += 1, R16623 += 1 };
  s1 -> s1 [0, 65535] { R16937 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R16937 += 1, R16893 += 1, R16622 += 1, R16623 += 1 };
  s1 -> s4 [73, 73] { R16937 += 1, R16893 += 1, R16622 += 1, R16623 += 1 };
  s1 -> s1 [74, 65535] { R16937 += 1, R16893 += 1, R16622 += 1, R16623 += 1 };
  s2 -> s1 [0, 72] { R16937 += 1, R16893 += 1, R16622 += 1, R16623 += 1 };
  s2 -> s2 [0, 65535] { R16937 += 1, R16892 += 1, R16893 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R16937 += 1, R16893 += 1, R16622 += 1, R16623 += 1 };
  s2 -> s4 [73, 73] { R16937 += 1, R16893 += 1, R16622 += 1, R16623 += 1 };
  s2 -> s1 [74, 65535] { R16937 += 1, R16893 += 1, R16622 += 1, R16623 += 1 };
  s3 -> s3 [0, 65535] { R16937 += 1, R16893 += 1, R16622 += 1, R16623 += 1 };
  s3 -> s6 [0, 65535] { R16937 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R16937 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R16937 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 72] { R16939 += 1, R16895 += 1, R16836 += 1, R16837 += 1 };
  s0 -> s2 [0, 72] { R16939 += 1, R16895 += 1, R16837 += 1 };
  s0 -> s3 [0, 65535] { R16939 += 1, R16894 += 1, R16895 += 1 };
  s0 -> s0 [0, 65535] { R16938 += 1, R16939 += 1 };
  s0 -> s4 [73, 73] { R16939 += 1, R16895 += 1, R16836 += 1, R16837 += 1 };
  s0 -> s5 [73, 73] { R16939 += 1, R16895 += 1, R16837 += 1 };
  s0 -> s6 [73, 73] { R16939 += 1, R16895 += 1, R16836 += 1, R16837 += 1 };
  s0 -> s7 [73, 73] { R16939 += 1, R16895 += 1, R16837 += 1 };
  s0 -> s2 [74, 80] { R16939 += 1, R16895 += 1, R16837 += 1 };
  s0 -> s1 [74, 65535] { R16939 += 1, R16895 += 1, R16836 += 1, R16837 += 1 };
  s0 -> s8 [81, 81] { R16939 += 1, R16895 += 1, R16837 += 1 };
  s0 -> s2 [89, 65535] { R16939 += 1, R16895 += 1, R16837 += 1 };
  s1 -> s1 [0, 72] { R16939 += 1, R16895 += 1, R16836 += 1, R16837 += 1 };
  s1 -> s2 [0, 72] { R16939 += 1, R16895 += 1, R16837 += 1 };
  s1 -> s4 [73, 73] { R16939 += 1, R16895 += 1, R16836 += 1, R16837 += 1 };
  s1 -> s5 [73, 73] { R16939 += 1, R16895 += 1, R16837 += 1 };
  s1 -> s6 [73, 73] { R16939 += 1, R16895 += 1, R16836 += 1, R16837 += 1 };
  s1 -> s7 [73, 73] { R16939 += 1, R16895 += 1, R16837 += 1 };
  s1 -> s2 [74, 80] { R16939 += 1, R16895 += 1, R16837 += 1 };
  s1 -> s1 [74, 65535] { R16939 += 1, R16895 += 1, R16836 += 1, R16837 += 1 };
  s1 -> s8 [81, 81] { R16939 += 1, R16895 += 1, R16837 += 1 };
  s1 -> s2 [89, 65535] { R16939 += 1, R16895 += 1, R16837 += 1 };
  s2 -> s2 [0, 72] { R16939 += 1, R16895 += 1, R16837 += 1 };
  s2 -> s5 [73, 73] { R16939 += 1, R16895 += 1 };
  s2 -> s7 [73, 73] { R16939 += 1, R16895 += 1 };
  s2 -> s2 [74, 80] { R16939 += 1, R16895 += 1, R16837 += 1 };
  s2 -> s2 [74, 65535] { R16939 += 1, R16895 += 1 };
  s2 -> s8 [81, 81] { R16939 += 1, R16895 += 1, R16837 += 1 };
  s2 -> s2 [89, 65535] { R16939 += 1, R16895 += 1, R16837 += 1 };
  s3 -> s1 [0, 72] { R16939 += 1, R16895 += 1, R16836 += 1, R16837 += 1 };
  s3 -> s2 [0, 72] { R16939 += 1, R16895 += 1, R16837 += 1 };
  s3 -> s3 [0, 65535] { R16939 += 1, R16894 += 1, R16895 += 1 };
  s3 -> s4 [73, 73] { R16939 += 1, R16895 += 1, R16836 += 1, R16837 += 1 };
  s3 -> s5 [73, 73] { R16939 += 1, R16895 += 1, R16837 += 1 };
  s3 -> s6 [73, 73] { R16939 += 1, R16895 += 1, R16836 += 1, R16837 += 1 };
  s3 -> s7 [73, 73] { R16939 += 1, R16895 += 1, R16837 += 1 };
  s3 -> s2 [74, 80] { R16939 += 1, R16895 += 1, R16837 += 1 };
  s3 -> s1 [74, 65535] { R16939 += 1, R16895 += 1, R16836 += 1, R16837 += 1 };
  s3 -> s8 [81, 81] { R16939 += 1, R16895 += 1, R16837 += 1 };
  s3 -> s2 [89, 65535] { R16939 += 1, R16895 += 1, R16837 += 1 };
  s4 -> s5 [0, 80] { R16939 += 1, R16895 += 1, R16837 += 1 };
  s4 -> s4 [0, 65535] { R16939 += 1, R16895 += 1, R16836 += 1, R16837 += 1 };
  s4 -> s10 [81, 81] { R16939 += 1, R16895 += 1, R16837 += 1 };
  s4 -> s5 [89, 65535] { R16939 += 1, R16895 += 1, R16837 += 1 };
  s5 -> s5 [0, 80] { R16939 += 1, R16895 += 1, R16837 += 1 };
  s5 -> s5 [0, 65535] { R16939 += 1, R16895 += 1 };
  s5 -> s10 [81, 81] { R16939 += 1, R16895 += 1, R16837 += 1 };
  s5 -> s5 [89, 65535] { R16939 += 1, R16895 += 1, R16837 += 1 };
  s8 -> s8 [0, 72] { R16939 += 1, R16895 += 1 };
  s8 -> s8 [0, 65535] { R16939 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [73, 73] { R16939 += 1, R16895 += 1 };
  s8 -> s11 [73, 73] { R16939 += 1, R16895 += 1 };
  s8 -> s8 [74, 65535] { R16939 += 1, R16895 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R16939 += 1, R16895 += 1 };
  s10 -> s12 [0, 65535] { R16939 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R16939 += 1 };
  s11 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R16939 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [113, 113];
  accepting s1;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
constraint R1 = R16855 && R2 = R16939 && R20 - R16939 = -1 && R21 = R16939 && R22 - R16939 = -1 && R23 = R16939 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R16621 + -1*R16619 - R53 = 0 && R52 + R16620 + R16618 = 0 && R16854 = 0 && R16880 = 0 && R16881 = 0 && R16886 = 0 && R16887 = 0 && R16888 = 0 && R16889 = 0 && R16890 = 0 && R16891 = 0 && R16894 = 0 && R16895 = 0 && R16896 = 0 && R16897 = R16939 && R16898 = 0 && R16899 = R16939 && R16900 = 0 && R16901 = R16939 && R16902 = 0 && R16903 = R16939 && R16904 = 0 && R16905 = R16939 && R16906 = 0 && R16907 = R16939 && R16908 = 0 && R16909 = R16939 && R16910 = 0 && R16911 = R16939 && R16912 = 0 && R16913 = R16939 && R16914 = 0 && R16915 = R16939 && R16916 = 0 && R16917 = R16939 && R16918 = 0 && R16919 = R16939 && R16920 = 0 && R16921 = R16939 && R16922 = 0 && R16923 = R16939 && R16924 = 0 && R16925 = R16939 && R16926 = 0 && R16927 = R16939 && R16928 = 0 && R16929 = R16939 && R16930 = 0 && R16931 = R16939 && R16932 = 0 && R16933 = R16939 && R16934 = 0 && R16935 = R16939 && R16936 = 0 && R16937 = R16939 && R16938 = 0 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R16621 + -1*R16619 - R53 < 1 && -1 < R16855 && 0 < R16939 && (R48 + R15347 + R15344 != 0 || ((R42 + R11524 + R11522 != 0 || R43 + R11525 + R11523 + -1*R16621 + -1*R16619 - R53 = 0 || R53 + R16621 + R16619 < 1) && (R42 + R11524 + R11522 = 0 || R53 + R16621 + R16619 < 1))) && (R48 + R15347 + R15344 != 0 || ((R46 + R15345 + R15342 != 0 || R47 + R15346 + R15343 + -1*R16621 + -1*R16619 - R53 = 0 || R53 + R16621 + R16619 < 1) && (R46 + R15345 + R15342 = 0 || R53 + R16621 + R16619 < 1))) && (R16840 != 0 || R16841 = R16855 || (R17 = 0 && R16855 = 0)) && (R16842 != 0 || R16843 = R16855 || (R17 = 0 && R16855 = 0)) && (R16844 != 0 || R16845 = R16855 || (R17 = 0 && R16855 = 0)) && (R16846 != 0 || R16847 = R16855 || (R17 = 0 && R16855 = 0)) && (R16848 != 0 || R16849 = R16855 || (R17 = 0 && R16855 = 0)) && (R16850 != 0 || R16851 = R16855 || (R17 = 0 && R16855 = 0)) && (R16852 != 0 || R16853 = R16855 || (R17 = 0 && R16855 = 0)) && (R16856 != 0 || R16855 = R16857 || (R17 = 0 && R16855 = 0)) && (R16858 != 0 || R16855 = R16859 || (R17 = 0 && R16855 = 0)) && (R18 = 0 || (R16878 = 0 && R16879 = 0)) && (R18 = 0 || (R16882 = 0 && R16883 = 0)) && (R18 = 0 || (R16884 = 0 && R16885 = 0)) && (R18 = 0 || (R16892 = 0 && R16893 = 0)) && (R19 = 0 || (R16860 = 0 && R16861 = 0)) && (R19 = 0 || (R16862 = 0 && R16863 = 0)) && (R19 = 0 || (R16864 = 0 && R16865 = 0)) && (R19 = 0 || (R16866 = 0 && R16867 = 0)) && (R19 = 0 || (R16868 = 0 && R16869 = 0)) && (R19 = 0 || (R16870 = 0 && R16871 = 0)) && (R19 = 0 || (R16872 = 0 && R16873 = 0)) && (R19 = 0 || (R16874 = 0 && R16875 = 0)) && (R19 = 0 || (R16876 = 0 && R16877 = 0)) && (R48 + R15347 + R15344 = 0 || (R42 + R11524 + R11522 = 0 && R43 + R11525 + R11523 + -1*R16621 + -1*R16619 - R53 = 0)) && (R48 + R15347 + R15344 = 0 || (R46 + R15345 + R15342 = 0 && R47 + R15346 + R15343 + -1*R16621 + -1*R16619 - R53 = 0)) && (R58 + R16627 + R16624 = 0 || (R56 + R16625 + R16622 = 0 && R57 + R16626 + R16623 = 0)) && (R58 + R16627 + R16624 = 0 || (R62 + R16838 + R16836 = 0 && R63 + R16839 + R16837 = 0)) && (R16840 = 0 || (R17 = 0 && R16855 = 0)) && (R16842 = 0 || (R17 = 0 && R16855 = 0)) && (R16844 = 0 || (R17 = 0 && R16855 = 0)) && (R16846 = 0 || (R17 = 0 && R16855 = 0)) && (R16848 = 0 || (R17 = 0 && R16855 = 0)) && (R16850 = 0 || (R17 = 0 && R16855 = 0)) && (R16852 = 0 || (R17 = 0 && R16855 = 0)) && (R16856 = 0 || (R17 = 0 && R16855 = 0)) && (R16858 = 0 || (R17 = 0 && R16855 = 0));
// End of Parikh automata intersection problem
