// Parikh automata intersection problem, generated by OSTRICH+
counter int R100, R101, R102, R103, R104, R105, R106, R107, R108, R109, R11, R110, R111, R112, R113, R114, R115, R116, R117, R118, R119, R12, R120, R121, R122, R123, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R338, R339, R340, R341, R342, R343, R344, R345, R346, R347, R348, R349, R350, R351, R352, R353, R354, R355, R356, R357, R358, R359, R360, R361, R362, R363, R364, R365, R366, R367, R368, R369, R370, R371, R372, R373, R374, R375, R376, R377, R378, R379, R380, R381, R382, R383, R384, R385, R386, R387, R388, R389, R390, R391, R392, R393, R394, R395, R396, R397, R398, R399, R4, R400, R401, R402, R403, R58, R59, R60, R61, R62, R63, R64, R65, R66, R67, R68, R69, R70, R71, R72, R73, R74, R75, R76, R77, R78, R79, R80, R81, R82, R83, R84, R85, R86, R87, R88, R89, R90, R91, R92, R93, R94, R95, R96, R97, R98, R99;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 72];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [73, 73];
  s0 -> s1 [74, 65535];
  s1 -> s1 [0, 72];
  s1 -> s2 [73, 73];
  s1 -> s1 [74, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R21 += 1 };
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R25 += 1 };
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 72] { R347 += 1 };
  s0 -> s0 [0, 65535] { R346 += 1, R347 += 1 };
  s0 -> s1 [74, 65535] { R347 += 1 };
  s1 -> s1 [0, 72] { R347 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [74, 65535] { R347 += 1 };
  accepting s0, s1;
};
automaton value2_9 {
  init s0;
  s0 -> s0 [0, 65535] { R348 += 1, R349 += 1 };
  s0 -> s1 [0, 65535] { R349 += 1, R18 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R349 += 1, R18 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 73] { R351 += 1 };
  s0 -> s0 [0, 65535] { R350 += 1, R351 += 1 };
  s0 -> s2 [74, 74] { R351 += 1 };
  s0 -> s1 [75, 65535] { R351 += 1 };
  s1 -> s1 [0, 73] { R351 += 1 };
  s1 -> s2 [74, 74] { R351 += 1 };
  s1 -> s1 [75, 65535] { R351 += 1 };
  s2 -> s2 [0, 65535] { R351 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_11 {
  init s0;
  s0 -> s0 [0, 65535] { R352 += 1, R353 += 1 };
  s0 -> s1 [0, 65535] { R353 += 1, R59 += 1 };
  s1 -> s1 [0, 65535] { R353 += 1, R59 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 73] { R355 += 1 };
  s0 -> s2 [0, 65535] { R355 += 1, R61 += 1 };
  s0 -> s0 [0, 65535] { R354 += 1, R355 += 1 };
  s0 -> s1 [75, 65535] { R355 += 1 };
  s1 -> s1 [0, 73] { R355 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [75, 65535] { R355 += 1 };
  s2 -> s1 [0, 73] { R355 += 1 };
  s2 -> s2 [0, 65535] { R355 += 1, R61 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [75, 65535] { R355 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 65535] { R357 += 1, R66 += 1, R67 += 1 };
  s0 -> s0 [0, 65535] { R356 += 1, R357 += 1 };
  s0 -> s2 [0, 65535] { R357 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 65535] { R357 += 1, R66 += 1, R67 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R357 += 1 };
  s2 -> s1 [0, 65535] { R357 += 1, R66 += 1, R67 += 1 };
  s2 -> s2 [0, 65535] { R357 += 1, R65 += 1, R66 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R357 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 73] { R359 += 1, R71 += 1 };
  s0 -> s0 [0, 65535] { R358 += 1, R359 += 1 };
  s0 -> s2 [0, 65535] { R359 += 1, R70 += 1, R71 += 1 };
  s0 -> s3 [74, 74] { R359 += 1, R71 += 1 };
  s0 -> s4 [74, 74] { R359 += 1, R71 += 1 };
  s0 -> s1 [86, 65535] { R359 += 1, R71 += 1 };
  s1 -> s1 [0, 73] { R359 += 1, R71 += 1 };
  s1 -> s1 [0, 65535] { R359 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [74, 74] { R359 += 1, R71 += 1 };
  s1 -> s4 [74, 74] { R359 += 1, R71 += 1 };
  s1 -> s1 [86, 65535] { R359 += 1, R71 += 1 };
  s2 -> s1 [0, 73] { R359 += 1, R71 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R359 += 1, R70 += 1, R71 += 1 };
  s2 -> s3 [74, 74] { R359 += 1, R71 += 1 };
  s2 -> s4 [74, 74] { R359 += 1, R71 += 1 };
  s2 -> s1 [86, 65535] { R359 += 1, R71 += 1 };
  s3 -> s3 [0, 74] { R359 += 1, R71 += 1 };
  s3 -> s3 [0, 65535] { R359 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [86, 65535] { R359 += 1, R71 += 1 };
  s4 -> s4 [0, 65535] { R359 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 73] { R361 += 1, R75 += 1 };
  s0 -> s0 [0, 65535] { R360 += 1, R361 += 1 };
  s0 -> s2 [0, 65535] { R361 += 1, R74 += 1, R75 += 1 };
  s0 -> s3 [74, 74] { R361 += 1, R75 += 1 };
  s0 -> s1 [75, 65535] { R361 += 1, R75 += 1 };
  s1 -> s1 [0, 73] { R361 += 1, R75 += 1 };
  s1 -> s3 [74, 74] { R361 += 1, R75 += 1 };
  s1 -> s1 [75, 65535] { R361 += 1, R75 += 1 };
  s2 -> s1 [0, 73] { R361 += 1, R75 += 1 };
  s2 -> s2 [0, 65535] { R361 += 1, R74 += 1, R75 += 1 };
  s2 -> s3 [74, 74] { R361 += 1, R75 += 1 };
  s2 -> s1 [75, 65535] { R361 += 1, R75 += 1 };
  s3 -> s3 [0, 65535] { R361 += 1, R75 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R361 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R361 += 1 };
  accepting s3, s4, s5;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 65535] { R363 += 1, R79 += 1, R80 += 1 };
  s0 -> s0 [0, 65535] { R362 += 1, R363 += 1 };
  s0 -> s2 [0, 65535] { R363 += 1, R80 += 1, R81 += 1 };
  s1 -> s1 [0, 65535] { R363 += 1, R79 += 1, R80 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R363 += 1, R80 += 1, R81 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R363 += 1 };
  s2 -> s2 [0, 65535] { R363 += 1, R80 += 1, R81 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R363 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 73] { R365 += 1, R86 += 1 };
  s0 -> s2 [0, 65535] { R365 += 1, R86 += 1, R87 += 1 };
  s0 -> s3 [0, 65535] { R365 += 1, R85 += 1, R86 += 1 };
  s0 -> s0 [0, 65535] { R364 += 1, R365 += 1 };
  s0 -> s1 [75, 65535] { R365 += 1, R86 += 1 };
  s1 -> s1 [0, 73] { R365 += 1, R86 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R365 += 1 };
  s1 -> s1 [75, 65535] { R365 += 1, R86 += 1 };
  s2 -> s1 [0, 73] { R365 += 1, R86 += 1 };
  s2 -> s2 [0, 65535] { R365 += 1, R86 += 1, R87 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R365 += 1 };
  s2 -> s1 [75, 65535] { R365 += 1, R86 += 1 };
  s3 -> s1 [0, 73] { R365 += 1, R86 += 1 };
  s3 -> s2 [0, 65535] { R365 += 1, R86 += 1, R87 += 1 };
  s3 -> s3 [0, 65535] { R365 += 1, R85 += 1, R86 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [75, 65535] { R365 += 1, R86 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R365 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 73] { R367 += 1, R93 += 1, R95 += 1 };
  s0 -> s0 [0, 65535] { R366 += 1, R367 += 1 };
  s0 -> s2 [0, 65535] { R367 += 1, R93 += 1, R94 += 1, R95 += 1 };
  s0 -> s3 [0, 65535] { R367 += 1, R92 += 1, R93 += 1 };
  s0 -> s1 [75, 65535] { R367 += 1, R93 += 1, R95 += 1 };
  s1 -> s1 [0, 73] { R367 += 1, R93 += 1, R95 += 1 };
  s1 -> s1 [0, 65535] { R367 += 1, R93 += 1 };
  s1 -> s5 [0, 65535] { R367 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [75, 65535] { R367 += 1, R93 += 1, R95 += 1 };
  s2 -> s1 [0, 73] { R367 += 1, R93 += 1, R95 += 1 };
  s2 -> s2 [0, 65535] { R367 += 1, R93 += 1, R94 += 1, R95 += 1 };
  s2 -> s5 [0, 65535] { R367 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [75, 65535] { R367 += 1, R93 += 1, R95 += 1 };
  s3 -> s1 [0, 73] { R367 += 1, R93 += 1, R95 += 1 };
  s3 -> s2 [0, 65535] { R367 += 1, R93 += 1, R94 += 1, R95 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R367 += 1, R92 += 1, R93 += 1 };
  s3 -> s1 [75, 65535] { R367 += 1, R93 += 1, R95 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R367 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 65535] { R369 += 1, R101 += 1, R102 += 1 };
  s0 -> s2 [0, 65535] { R369 += 1, R102 += 1, R104 += 1, R105 += 1 };
  s0 -> s3 [0, 65535] { R369 += 1, R102 += 1, R103 += 1, R104 += 1 };
  s0 -> s0 [0, 65535] { R368 += 1, R369 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R369 += 1, R101 += 1, R102 += 1 };
  s1 -> s2 [0, 65535] { R369 += 1, R102 += 1, R104 += 1, R105 += 1 };
  s1 -> s3 [0, 65535] { R369 += 1, R102 += 1, R103 += 1, R104 += 1 };
  s2 -> s6 [0, 65535] { R369 += 1, R102 += 1 };
  s2 -> s4 [0, 65535] { R369 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R369 += 1, R102 += 1, R104 += 1, R105 += 1 };
  s3 -> s4 [0, 65535] { R369 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R369 += 1, R102 += 1, R104 += 1, R105 += 1 };
  s3 -> s3 [0, 65535] { R369 += 1, R102 += 1, R103 += 1, R104 += 1 };
  s4 -> s4 [0, 65535] { R369 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R369 += 1, R102 += 1 };
  s6 -> s4 [0, 65535] { R369 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 74] { R371 += 1, R111 += 1, R113 += 1 };
  s0 -> s2 [0, 65535] { R371 += 1, R110 += 1, R111 += 1 };
  s0 -> s3 [0, 65535] { R371 += 1, R111 += 1, R112 += 1, R113 += 1 };
  s0 -> s0 [0, 65535] { R370 += 1, R371 += 1 };
  s0 -> s1 [85, 65535] { R371 += 1, R111 += 1, R113 += 1 };
  s1 -> s1 [0, 74] { R371 += 1, R111 += 1, R113 += 1 };
  s1 -> s1 [0, 65535] { R371 += 1, R111 += 1 };
  s1 -> s4 [0, 65535] { R371 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [85, 65535] { R371 += 1, R111 += 1, R113 += 1 };
  s2 -> s1 [0, 74] { R371 += 1, R111 += 1, R113 += 1 };
  s2 -> s2 [0, 65535] { R371 += 1, R110 += 1, R111 += 1 };
  s2 -> s3 [0, 65535] { R371 += 1, R111 += 1, R112 += 1, R113 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [85, 65535] { R371 += 1, R111 += 1, R113 += 1 };
  s3 -> s1 [0, 74] { R371 += 1, R111 += 1, R113 += 1 };
  s3 -> s3 [0, 65535] { R371 += 1, R111 += 1, R112 += 1, R113 += 1 };
  s3 -> s4 [0, 65535] { R371 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [85, 65535] { R371 += 1, R111 += 1, R113 += 1 };
  s4 -> s4 [0, 65535] { R371 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R373 += 1, R119 += 1, R120 += 1 };
  s0 -> s2 [0, 65535] { R373 += 1, R120 += 1, R121 += 1, R122 += 1 };
  s0 -> s0 [0, 65535] { R372 += 1, R373 += 1 };
  s0 -> s3 [0, 65535] { R373 += 1, R120 += 1, R122 += 1, R123 += 1 };
  s1 -> s1 [0, 65535] { R373 += 1, R119 += 1, R120 += 1 };
  s1 -> s2 [0, 65535] { R373 += 1, R120 += 1, R121 += 1, R122 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [0, 65535] { R373 += 1, R120 += 1, R122 += 1, R123 += 1 };
  s2 -> s2 [0, 65535] { R373 += 1, R120 += 1, R121 += 1, R122 += 1 };
  s2 -> s5 [0, 65535] { R373 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R373 += 1, R120 += 1, R122 += 1, R123 += 1 };
  s3 -> s4 [0, 65535] { R373 += 1, R120 += 1 };
  s3 -> s5 [0, 65535] { R373 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R373 += 1, R120 += 1, R122 += 1, R123 += 1 };
  s4 -> s4 [0, 65535] { R373 += 1, R120 += 1 };
  s4 -> s5 [0, 65535] { R373 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R373 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 73] { R375 += 1, R343 += 1, R345 += 1 };
  s0 -> s2 [0, 65535] { R375 += 1 };
  s0 -> s0 [0, 65535] { R374 += 1, R375 += 1 };
  s0 -> s1 [0, 65535] { R375 += 1, R343 += 1 };
  s0 -> s3 [74, 74] { R375 += 1, R343 += 1, R345 += 1 };
  s0 -> s4 [74, 74] { R375 += 1, R343 += 1, R345 += 1 };
  s0 -> s1 [85, 65535] { R375 += 1, R343 += 1, R345 += 1 };
  s1 -> s1 [0, 73] { R375 += 1, R343 += 1, R345 += 1 };
  s1 -> s2 [0, 65535] { R375 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R375 += 1, R343 += 1 };
  s1 -> s3 [74, 74] { R375 += 1, R343 += 1, R345 += 1 };
  s1 -> s4 [74, 74] { R375 += 1, R343 += 1, R345 += 1 };
  s1 -> s1 [85, 65535] { R375 += 1, R343 += 1, R345 += 1 };
  s2 -> s2 [0, 65535] { R375 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s3 [0, 74] { R375 += 1, R343 += 1, R345 += 1 };
  s3 -> s3 [0, 65535] { R375 += 1, R343 += 1 };
  s3 -> s2 [0, 65535] { R375 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [85, 65535] { R375 += 1, R343 += 1, R345 += 1 };
  s4 -> s2 [0, 65535] { R375 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R375 += 1, R343 += 1 };
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_23 {
  init s0;
  s0 -> s0 [0, 65535] { R376 += 1, R377 += 1 };
  s0 -> s1 [0, 65535] { R377 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R377 += 1, R19 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 72] { R379 += 1 };
  s0 -> s0 [0, 65535] { R378 += 1, R379 += 1 };
  s0 -> s2 [73, 73] { R379 += 1 };
  s0 -> s3 [73, 73] { R379 += 1 };
  s0 -> s1 [75, 65535] { R379 += 1 };
  s1 -> s1 [0, 72] { R379 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R379 += 1 };
  s1 -> s3 [73, 73] { R379 += 1 };
  s1 -> s1 [75, 65535] { R379 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 73] { R379 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [75, 65535] { R379 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 72] { R381 += 1, R58 += 1 };
  s0 -> s0 [0, 65535] { R380 += 1, R381 += 1 };
  s0 -> s2 [73, 73] { R381 += 1, R58 += 1 };
  s0 -> s3 [73, 73] { R381 += 1, R58 += 1 };
  s0 -> s1 [74, 65535] { R381 += 1, R58 += 1 };
  s1 -> s1 [0, 72] { R381 += 1, R58 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R381 += 1, R58 += 1 };
  s1 -> s3 [73, 73] { R381 += 1, R58 += 1 };
  s1 -> s1 [74, 65535] { R381 += 1, R58 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R381 += 1, R58 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 72] { R383 += 1, R60 += 1 };
  s0 -> s0 [0, 65535] { R382 += 1, R383 += 1 };
  s0 -> s2 [73, 73] { R383 += 1, R60 += 1 };
  s0 -> s3 [73, 73] { R383 += 1, R60 += 1 };
  s0 -> s1 [74, 65535] { R383 += 1, R60 += 1 };
  s1 -> s1 [0, 72] { R383 += 1, R60 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R383 += 1, R60 += 1 };
  s1 -> s3 [73, 73] { R383 += 1, R60 += 1 };
  s1 -> s1 [74, 65535] { R383 += 1, R60 += 1 };
  s2 -> s2 [0, 65535] { R383 += 1, R60 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 72] { R385 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R384 += 1, R385 += 1 };
  s0 -> s2 [73, 73] { R385 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [73, 73] { R385 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [74, 65535] { R385 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 72] { R385 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R385 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [73, 73] { R385 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [74, 65535] { R385 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535] { R385 += 1, R62 += 1, R63 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 72] { R387 += 1, R68 += 1, R69 += 1 };
  s0 -> s0 [0, 65535] { R386 += 1, R387 += 1 };
  s0 -> s2 [73, 73] { R387 += 1, R68 += 1, R69 += 1 };
  s0 -> s3 [73, 73] { R387 += 1, R68 += 1, R69 += 1 };
  s0 -> s1 [74, 65535] { R387 += 1, R68 += 1, R69 += 1 };
  s1 -> s1 [0, 72] { R387 += 1, R68 += 1, R69 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R387 += 1, R68 += 1, R69 += 1 };
  s1 -> s3 [73, 73] { R387 += 1, R68 += 1, R69 += 1 };
  s1 -> s1 [74, 65535] { R387 += 1, R68 += 1, R69 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R387 += 1, R68 += 1, R69 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 72] { R389 += 1, R72 += 1, R73 += 1 };
  s0 -> s0 [0, 65535] { R388 += 1, R389 += 1 };
  s0 -> s2 [73, 73] { R389 += 1, R72 += 1, R73 += 1 };
  s0 -> s3 [73, 73] { R389 += 1, R72 += 1, R73 += 1 };
  s0 -> s1 [74, 65535] { R389 += 1, R72 += 1, R73 += 1 };
  s1 -> s1 [0, 72] { R389 += 1, R72 += 1, R73 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R389 += 1, R72 += 1, R73 += 1 };
  s1 -> s3 [73, 73] { R389 += 1, R72 += 1, R73 += 1 };
  s1 -> s1 [74, 65535] { R389 += 1, R72 += 1, R73 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R389 += 1, R72 += 1, R73 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 72] { R391 += 1, R76 += 1, R77 += 1 };
  s0 -> s0 [0, 65535] { R390 += 1, R391 += 1 };
  s0 -> s2 [73, 73] { R391 += 1, R76 += 1, R77 += 1 };
  s0 -> s3 [73, 73] { R391 += 1, R76 += 1, R77 += 1 };
  s0 -> s1 [74, 65535] { R391 += 1, R76 += 1, R77 += 1 };
  s1 -> s1 [0, 72] { R391 += 1, R76 += 1, R77 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R391 += 1, R76 += 1, R77 += 1 };
  s1 -> s3 [73, 73] { R391 += 1, R76 += 1, R77 += 1 };
  s1 -> s1 [74, 65535] { R391 += 1, R76 += 1, R77 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R391 += 1, R76 += 1, R77 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 72] { R393 += 1, R82 += 1, R83 += 1 };
  s0 -> s0 [0, 65535] { R392 += 1, R393 += 1 };
  s0 -> s2 [73, 73] { R393 += 1, R82 += 1, R83 += 1 };
  s0 -> s3 [73, 73] { R393 += 1, R82 += 1, R83 += 1 };
  s0 -> s1 [74, 65535] { R393 += 1, R82 += 1, R83 += 1 };
  s1 -> s1 [0, 72] { R393 += 1, R82 += 1, R83 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R393 += 1, R82 += 1, R83 += 1 };
  s1 -> s3 [73, 73] { R393 += 1, R82 += 1, R83 += 1 };
  s1 -> s1 [74, 65535] { R393 += 1, R82 += 1, R83 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R393 += 1, R82 += 1, R83 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 72] { R395 += 1, R88 += 1, R89 += 1 };
  s0 -> s0 [0, 65535] { R394 += 1, R395 += 1 };
  s0 -> s2 [73, 73] { R395 += 1, R88 += 1, R89 += 1 };
  s0 -> s3 [73, 73] { R395 += 1, R88 += 1, R89 += 1 };
  s0 -> s1 [74, 65535] { R395 += 1, R88 += 1, R89 += 1 };
  s1 -> s1 [0, 72] { R395 += 1, R88 += 1, R89 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R395 += 1, R88 += 1, R89 += 1 };
  s1 -> s3 [73, 73] { R395 += 1, R88 += 1, R89 += 1 };
  s1 -> s1 [74, 65535] { R395 += 1, R88 += 1, R89 += 1 };
  s2 -> s2 [0, 65535] { R395 += 1, R88 += 1, R89 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 72] { R397 += 1, R96 += 1, R97 += 1 };
  s0 -> s0 [0, 65535] { R396 += 1, R397 += 1 };
  s0 -> s2 [73, 73] { R397 += 1, R96 += 1, R97 += 1 };
  s0 -> s3 [73, 73] { R397 += 1, R96 += 1, R97 += 1 };
  s0 -> s1 [74, 65535] { R397 += 1, R96 += 1, R97 += 1 };
  s1 -> s1 [0, 72] { R397 += 1, R96 += 1, R97 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R397 += 1, R96 += 1, R97 += 1 };
  s1 -> s3 [73, 73] { R397 += 1, R96 += 1, R97 += 1 };
  s1 -> s1 [74, 65535] { R397 += 1, R96 += 1, R97 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R397 += 1, R96 += 1, R97 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 72] { R399 += 1, R106 += 1, R107 += 1 };
  s0 -> s0 [0, 65535] { R398 += 1, R399 += 1 };
  s0 -> s2 [73, 73] { R399 += 1, R106 += 1, R107 += 1 };
  s0 -> s3 [73, 73] { R399 += 1, R106 += 1, R107 += 1 };
  s0 -> s1 [74, 65535] { R399 += 1, R106 += 1, R107 += 1 };
  s1 -> s1 [0, 72] { R399 += 1, R106 += 1, R107 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R399 += 1, R106 += 1, R107 += 1 };
  s1 -> s3 [73, 73] { R399 += 1, R106 += 1, R107 += 1 };
  s1 -> s1 [74, 65535] { R399 += 1, R106 += 1, R107 += 1 };
  s2 -> s2 [0, 65535] { R399 += 1, R106 += 1, R107 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 72] { R401 += 1, R114 += 1, R115 += 1 };
  s0 -> s0 [0, 65535] { R400 += 1, R401 += 1 };
  s0 -> s2 [73, 73] { R401 += 1, R114 += 1, R115 += 1 };
  s0 -> s3 [73, 73] { R401 += 1, R114 += 1, R115 += 1 };
  s0 -> s1 [74, 65535] { R401 += 1, R114 += 1, R115 += 1 };
  s1 -> s1 [0, 72] { R401 += 1, R114 += 1, R115 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R401 += 1, R114 += 1, R115 += 1 };
  s1 -> s3 [73, 73] { R401 += 1, R114 += 1, R115 += 1 };
  s1 -> s1 [74, 65535] { R401 += 1, R114 += 1, R115 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R401 += 1, R114 += 1, R115 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 72] { R403 += 1, R339 += 1, R340 += 1, R341 += 1 };
  s0 -> s2 [0, 72] { R403 += 1, R339 += 1, R341 += 1 };
  s0 -> s3 [0, 72] { R403 += 1, R338 += 1, R339 += 1 };
  s0 -> s0 [0, 65535] { R402 += 1, R403 += 1 };
  s0 -> s4 [73, 73] { R403 += 1, R339 += 1, R340 += 1, R341 += 1 };
  s0 -> s5 [73, 73] { R403 += 1, R338 += 1, R339 += 1 };
  s0 -> s6 [73, 73] { R403 += 1, R339 += 1, R341 += 1 };
  s0 -> s7 [73, 73] { R403 += 1, R339 += 1, R340 += 1, R341 += 1 };
  s0 -> s8 [73, 73] { R403 += 1, R338 += 1, R339 += 1 };
  s0 -> s9 [73, 73] { R403 += 1, R339 += 1, R341 += 1 };
  s0 -> s1 [74, 65535] { R403 += 1, R339 += 1, R340 += 1, R341 += 1 };
  s0 -> s3 [74, 65535] { R403 += 1, R338 += 1, R339 += 1 };
  s0 -> s10 [85, 85] { R403 += 1, R339 += 1, R341 += 1 };
  s0 -> s2 [86, 65535] { R403 += 1, R339 += 1, R341 += 1 };
  s1 -> s1 [0, 72] { R403 += 1, R339 += 1, R340 += 1, R341 += 1 };
  s1 -> s2 [0, 72] { R403 += 1, R339 += 1, R341 += 1 };
  s1 -> s4 [73, 73] { R403 += 1, R339 += 1, R340 += 1, R341 += 1 };
  s1 -> s6 [73, 73] { R403 += 1, R339 += 1, R341 += 1 };
  s1 -> s7 [73, 73] { R403 += 1, R339 += 1, R340 += 1, R341 += 1 };
  s1 -> s9 [73, 73] { R403 += 1, R339 += 1, R341 += 1 };
  s1 -> s1 [74, 65535] { R403 += 1, R339 += 1, R340 += 1, R341 += 1 };
  s1 -> s10 [85, 85] { R403 += 1, R339 += 1, R341 += 1 };
  s1 -> s2 [86, 65535] { R403 += 1, R339 += 1, R341 += 1 };
  s2 -> s2 [0, 72] { R403 += 1, R339 += 1, R341 += 1 };
  s2 -> s6 [73, 73] { R403 += 1, R339 += 1, R341 += 1 };
  s2 -> s9 [73, 73] { R403 += 1, R339 += 1, R341 += 1 };
  s2 -> s10 [85, 85] { R403 += 1, R339 += 1, R341 += 1 };
  s2 -> s2 [86, 65535] { R403 += 1, R339 += 1, R341 += 1 };
  s3 -> s1 [0, 72] { R403 += 1, R339 += 1, R340 += 1, R341 += 1 };
  s3 -> s2 [0, 72] { R403 += 1, R339 += 1, R341 += 1 };
  s3 -> s3 [0, 72] { R403 += 1, R338 += 1, R339 += 1 };
  s3 -> s4 [73, 73] { R403 += 1, R339 += 1, R340 += 1, R341 += 1 };
  s3 -> s5 [73, 73] { R403 += 1, R338 += 1, R339 += 1 };
  s3 -> s6 [73, 73] { R403 += 1, R339 += 1, R341 += 1 };
  s3 -> s7 [73, 73] { R403 += 1, R339 += 1, R340 += 1, R341 += 1 };
  s3 -> s8 [73, 73] { R403 += 1, R338 += 1, R339 += 1 };
  s3 -> s9 [73, 73] { R403 += 1, R339 += 1, R341 += 1 };
  s3 -> s1 [74, 65535] { R403 += 1, R339 += 1, R340 += 1, R341 += 1 };
  s3 -> s3 [74, 65535] { R403 += 1, R338 += 1, R339 += 1 };
  s3 -> s10 [85, 85] { R403 += 1, R339 += 1, R341 += 1 };
  s3 -> s2 [86, 65535] { R403 += 1, R339 += 1, R341 += 1 };
  s6 -> s6 [0, 73] { R403 += 1, R339 += 1, R341 += 1 };
  s6 -> s11 [85, 85] { R403 += 1, R339 += 1, R341 += 1 };
  s6 -> s6 [86, 65535] { R403 += 1, R339 += 1, R341 += 1 };
  s7 -> s6 [0, 73] { R403 += 1, R339 += 1, R341 += 1 };
  s7 -> s7 [0, 65535] { R403 += 1, R339 += 1, R340 += 1, R341 += 1 };
  s7 -> s11 [85, 85] { R403 += 1, R339 += 1, R341 += 1 };
  s7 -> s6 [86, 65535] { R403 += 1, R339 += 1, R341 += 1 };
  s8 -> s6 [0, 73] { R403 += 1, R339 += 1, R341 += 1 };
  s8 -> s7 [0, 65535] { R403 += 1, R339 += 1, R340 += 1, R341 += 1 };
  s8 -> s8 [0, 65535] { R403 += 1, R338 += 1, R339 += 1 };
  s8 -> s11 [85, 85] { R403 += 1, R339 += 1, R341 += 1 };
  s8 -> s6 [86, 65535] { R403 += 1, R339 += 1, R341 += 1 };
  s10 -> s10 [0, 72] { R403 += 1, R339 += 1, R341 += 1 };
  s10 -> s10 [0, 65535];
  s10 -> s11 [73, 73] { R403 += 1, R339 += 1 };
  s10 -> s12 [73, 73] { R403 += 1, R339 += 1 };
  s10 -> s10 [74, 65535] { R403 += 1, R339 += 1 };
  s10 -> s10 [85, 65535] { R403 += 1, R339 += 1, R341 += 1 };
  s11 -> s11 [0, 73] { R403 += 1, R339 += 1, R341 += 1 };
  s11 -> s11 [0, 65535] { R403 += 1, R339 += 1 };
  s11 -> s13 [0, 65535];
  s11 -> s11 [85, 65535] { R403 += 1, R339 += 1, R341 += 1 };
  s12 -> s12 [0, 65535];
  s13 -> s13 [0, 65535];
  accepting s10, s11, s12, s13;
};
};
synchronised {  // Automata constraining P4
automaton P4_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
synchronised {  // Automata constraining P48
automaton P48_0 {
  init s0;
  s0 -> s1 [106, 106];
  accepting s1;
};
};
constraint R2 = R375 && R20 - R375 = -1 && R21 = R375 && R22 - R375 = -1 && R23 = R375 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R59 + R58 + -1*R343 + -1*R339 = 0 && R74 + R72 = 0 && R75 + R73 + -1*R343 + -1*R339 = 0 && R342 + R338 = 0 && R344 + R340 = 0 && R345 + R341 = 0 && R346 = 0 && R347 = R375 && R348 = 0 && R349 = R375 && R350 = 0 && R351 = R375 && R352 = 0 && R353 = R375 && R354 = 0 && R355 = R375 && R356 = 0 && R357 = R375 && R358 = 0 && R359 = R375 && R360 = 0 && R361 = R375 && R362 = 0 && R363 = R375 && R364 = 0 && R365 = R375 && R366 = 0 && R367 = R375 && R368 = 0 && R369 = R375 && R370 = 0 && R371 = R375 && R372 = 0 && R373 = R375 && R374 = 0 && R402 = 0 && R403 = 0 && R11 < 1 && R12 < 1 && R61 + R60 < 1 && -1*R81 + -1*R78 < 1 && R87 + R84 < 1 && -1*R343 + -1*R339 < 1 && 0 < R375 && (R79 + R76 != 0 || R80 + R77 + -1*R343 + -1*R339 = 0 || R81 + R78 < 1) && (R81 + R78 != 0 || R105 + R100 = 0 || (R94 + R90 = 0 && R95 + R91 = 0)) && (R81 + R78 != 0 || R105 + R100 = 0 || (R103 + R98 = 0 && R104 + R99 = 0)) && (R81 + R78 != 0 || R105 + R100 = 0 || (R112 + R108 = 0 && R113 + R109 = 0)) && (R81 + R78 != 0 || ((R79 + R76 != 0 || R80 + R77 + -1*R343 + -1*R339 = 0 || R343 + R339 < 1) && (R79 + R76 = 0 || R343 + R339 < 1))) && (R85 + R82 != 0 || R86 + R83 + -1*R343 + -1*R339 = 0 || (R81 + R78 = 0 && R343 + R339 = 0)) && (R92 + R88 != 0 || R93 + R89 + -1*R343 + -1*R339 = 0 || (R81 + R78 = 0 && R343 + R339 = 0)) && (R94 + R90 != 0 || R81 + R78 + -1*R95 + -1*R91 = 0 || R81 + R78 < 1) && (R101 + R96 != 0 || R102 + R97 + -1*R343 + -1*R339 = 0 || (R81 + R78 = 0 && R343 + R339 = 0)) && (R103 + R98 != 0 || R81 + R78 + -1*R104 + -1*R99 = 0 || R81 + R78 < 1) && (R110 + R106 != 0 || R111 + R107 + -1*R343 + -1*R339 = 0 || (R81 + R78 = 0 && R343 + R339 = 0)) && (R112 + R108 != 0 || R81 + R78 + -1*R113 + -1*R109 = 0 || R81 + R78 < 1) && (R119 + R114 != 0 || R120 + R115 + -1*R343 + -1*R339 = 0 || (R81 + R78 = 0 && R343 + R339 = 0)) && (R19 = 0 || (R376 = 0 && R377 = 0)) && (R19 = 0 || (R378 = 0 && R379 = 0)) && (R19 = 0 || (R380 = 0 && R381 = 0)) && (R19 = 0 || (R382 = 0 && R383 = 0)) && (R19 = 0 || (R384 = 0 && R385 = 0)) && (R19 = 0 || (R386 = 0 && R387 = 0)) && (R19 = 0 || (R388 = 0 && R389 = 0)) && (R19 = 0 || (R390 = 0 && R391 = 0)) && (R19 = 0 || (R392 = 0 && R393 = 0)) && (R19 = 0 || (R394 = 0 && R395 = 0)) && (R19 = 0 || (R396 = 0 && R397 = 0)) && (R19 = 0 || (R398 = 0 && R399 = 0)) && (R19 = 0 || (R400 = 0 && R401 = 0)) && (R67 + R64 = 0 || (R65 + R62 = 0 && R66 + R63 = 0)) && (R67 + R64 = 0 || (R70 + R68 = 0 && R71 + R69 = 0)) && (R79 + R76 = 0 || R81 + R78 < 1) && (R85 + R82 = 0 || (R81 + R78 = 0 && R343 + R339 = 0)) && (R92 + R88 = 0 || (R81 + R78 = 0 && R343 + R339 = 0)) && (R94 + R90 = 0 || R81 + R78 < 1) && (R101 + R96 = 0 || (R81 + R78 = 0 && R343 + R339 = 0)) && (R103 + R98 = 0 || R81 + R78 < 1) && (R110 + R106 = 0 || (R81 + R78 = 0 && R343 + R339 = 0)) && (R112 + R108 = 0 || R81 + R78 < 1) && (R119 + R114 = 0 || (R81 + R78 = 0 && R343 + R339 = 0)) && (R123 + R118 = 0 || (R121 + R116 = 0 && R122 + R117 = 0));
// End of Parikh automata intersection problem
