// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R10000, R10001, R10002, R10003, R10004, R10005, R10006, R10007, R10008, R10009, R10010, R10011, R10012, R10013, R10014, R10015, R10016, R10017, R10018, R10019, R10020, R10021, R10022, R10023, R10024, R10025, R10026, R10027, R10028, R10029, R10030, R10031, R10032, R10033, R10034, R10035, R10036, R10037, R10038, R10039, R10040, R10041, R10042, R10043, R10044, R10045, R10046, R10047, R10048, R10049, R10050, R10051, R10052, R10053, R10054, R10055, R10056, R10057, R10058, R10059, R10060, R10061, R10062, R10063, R10064, R10065, R10066, R10067, R10068, R10069, R10070, R10071, R10072, R10073, R10074, R10075, R10076, R10077, R10078, R10079, R10080, R10081, R10082, R10083, R10084, R10085, R10086, R10087, R10088, R10089, R10090, R10091, R10092, R10093, R10094, R10095, R10096, R10097, R10098, R10099, R10100, R11, R14, R17, R2, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R31, R32, R33, R34, R35, R36, R37, R38, R4, R49, R5, R51, R53, R54, R57, R58, R59, R6, R63, R64, R6637, R6638, R6639, R6640, R6641, R6642, R67, R68, R69, R7, R73, R74, R77, R78, R79, R80, R81, R82, R83, R84, R8825, R8826, R8827, R8828, R9555, R9556, R9557, R9558, R9559, R9560, R9921, R9922, R9923, R9924, R9925, R9926, R9927, R9928, R9929, R9930, R9931, R9932, R9933, R9934, R9935, R9936, R9937, R9938, R9939, R9940, R9941, R9942, R9943, R9944, R9945, R9946, R9947, R9948, R9949, R9950, R9951, R9952, R9953, R9954, R9955, R9956, R9957, R9958, R9959, R9960, R9961, R9962, R9963, R9964, R9965, R9966, R9967, R9968, R9969, R9970, R9971, R9972, R9973, R9974, R9975, R9976, R9977, R9978, R9979, R9980, R9981, R9982, R9983, R9984, R9985, R9986, R9987, R9988, R9989, R9990, R9991, R9992, R9993, R9994, R9995, R9996, R9997, R9998, R9999;
synchronised {  // Automata constraining P9
automaton P9_0 {
  init s0;
  s0 -> s1 [98, 98];
  accepting s1;
};
};
synchronised {  // Automata constraining P51
automaton P51_0 {
  init s0;
  s0 -> s1 [102, 102];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R17 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s0 [0, 65535] { R31 += 1, R32 += 1 };
  s0 -> s1 [13, 13] { R32 += 1 };
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value2_4 {
  init s0;
  s0 -> s0 [0, 65535] { R33 += 1, R34 += 1 };
  s0 -> s1 [0, 65535] { R34 += 1, R6 += 1 };
  s1 -> s1 [0, 65535] { R34 += 1, R6 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 8] { R36 += 1 };
  s0 -> s0 [0, 65535] { R35 += 1, R36 += 1 };
  s0 -> s2 [9, 13] { R36 += 1 };
  s0 -> s1 [14, 31] { R36 += 1 };
  s0 -> s2 [32, 32] { R36 += 1 };
  s0 -> s1 [33, 65535] { R36 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R36 += 1 };
  s2 -> s1 [0, 65535] { R36 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 65535] { R38 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R37 += 1, R38 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R38 += 1, R7 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 64] { R10026 += 1 };
  s0 -> s0 [0, 65535] { R10025 += 1, R10026 += 1 };
  s0 -> s2 [66, 66] { R10026 += 1 };
  s0 -> s1 [67, 65535] { R10026 += 1 };
  s1 -> s1 [0, 64] { R10026 += 1 };
  s1 -> s2 [66, 66] { R10026 += 1 };
  s1 -> s1 [67, 65535] { R10026 += 1 };
  s2 -> s2 [0, 64] { R10026 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [66, 65535] { R10026 += 1 };
  accepting s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R10027 += 1, R10028 += 1 };
  s0 -> s1 [0, 65535] { R10028 += 1, R2 += 1 };
  s1 -> s1 [0, 65535] { R10028 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 65] { R10030 += 1 };
  s0 -> s2 [0, 65535] { R10030 += 1, R14 += 1 };
  s0 -> s0 [0, 65535] { R10029 += 1, R10030 += 1 };
  s0 -> s3 [66, 66] { R10030 += 1 };
  s0 -> s1 [67, 65535] { R10030 += 1 };
  s1 -> s1 [0, 65] { R10030 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [66, 66] { R10030 += 1 };
  s1 -> s1 [67, 65535] { R10030 += 1 };
  s2 -> s1 [0, 65] { R10030 += 1 };
  s2 -> s2 [0, 65535] { R10030 += 1, R14 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [66, 66] { R10030 += 1 };
  s2 -> s1 [67, 65535] { R10030 += 1 };
  s3 -> s3 [0, 65535] { R10030 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 8] { R10032 += 1, R24 += 1 };
  s0 -> s0 [0, 65535] { R10031 += 1, R10032 += 1 };
  s0 -> s2 [0, 65535] { R10032 += 1, R23 += 1, R24 += 1 };
  s0 -> s3 [9, 13] { R10032 += 1, R24 += 1 };
  s0 -> s1 [14, 31] { R10032 += 1, R24 += 1 };
  s0 -> s3 [32, 32] { R10032 += 1, R24 += 1 };
  s0 -> s1 [33, 65535] { R10032 += 1, R24 += 1 };
  s1 -> s5 [0, 65535] { R10032 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R10032 += 1, R24 += 1 };
  s2 -> s1 [0, 8] { R10032 += 1, R24 += 1 };
  s2 -> s2 [0, 65535] { R10032 += 1, R23 += 1, R24 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R10032 += 1, R24 += 1 };
  s2 -> s1 [14, 31] { R10032 += 1, R24 += 1 };
  s2 -> s3 [32, 32] { R10032 += 1, R24 += 1 };
  s2 -> s1 [33, 65535] { R10032 += 1, R24 += 1 };
  s3 -> s1 [0, 65535] { R10032 += 1, R24 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10032 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 65535] { R10034 += 1, R25 += 1, R26 += 1 };
  s0 -> s0 [0, 65535] { R10033 += 1, R10034 += 1 };
  s0 -> s2 [0, 65535] { R10034 += 1, R26 += 1, R4 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R10034 += 1, R25 += 1, R26 += 1 };
  s1 -> s2 [0, 65535] { R10034 += 1, R26 += 1, R4 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R10034 += 1 };
  s2 -> s2 [0, 65535] { R10034 += 1, R26 += 1, R4 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10034 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 8] { R10036 += 1, R28 += 1 };
  s0 -> s0 [0, 65535] { R10035 += 1, R10036 += 1 };
  s0 -> s2 [0, 65535] { R10036 += 1, R27 += 1, R28 += 1 };
  s0 -> s3 [9, 13] { R10036 += 1, R28 += 1 };
  s0 -> s1 [14, 31] { R10036 += 1, R28 += 1 };
  s0 -> s3 [32, 32] { R10036 += 1, R28 += 1 };
  s0 -> s1 [33, 65535] { R10036 += 1, R28 += 1 };
  s1 -> s1 [0, 65535] { R10036 += 1, R28 += 1 };
  s1 -> s5 [0, 65535] { R10036 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R10036 += 1, R28 += 1 };
  s2 -> s2 [0, 65535] { R10036 += 1, R27 += 1, R28 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R10036 += 1, R28 += 1 };
  s2 -> s1 [14, 31] { R10036 += 1, R28 += 1 };
  s2 -> s3 [32, 32] { R10036 += 1, R28 += 1 };
  s2 -> s1 [33, 65535] { R10036 += 1, R28 += 1 };
  s3 -> s1 [0, 65535] { R10036 += 1, R28 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10036 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 65535] { R10038 += 1, R30 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R10037 += 1, R10038 += 1 };
  s0 -> s2 [0, 65535] { R10038 += 1, R29 += 1, R30 += 1 };
  s1 -> s1 [0, 65535] { R10038 += 1, R30 += 1, R5 += 1 };
  s1 -> s4 [0, 65535] { R10038 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10038 += 1, R30 += 1, R5 += 1 };
  s2 -> s2 [0, 65535] { R10038 += 1, R29 += 1, R30 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10038 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 65535] { R10040 += 1, R9946 += 1, R22 += 1 };
  s0 -> s2 [0, 65535] { R10040 += 1, R9945 += 1, R9946 += 1 };
  s0 -> s0 [0, 65535] { R10039 += 1, R10040 += 1 };
  s1 -> s1 [0, 65535] { R10040 += 1, R9946 += 1, R22 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R10040 += 1 };
  s2 -> s1 [0, 65535] { R10040 += 1, R9946 += 1, R22 += 1 };
  s2 -> s2 [0, 65535] { R10040 += 1, R9945 += 1, R9946 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10040 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 65] { R10042 += 1, R9948 += 1 };
  s0 -> s0 [0, 65535] { R10041 += 1, R10042 += 1 };
  s0 -> s2 [0, 65535] { R10042 += 1, R9947 += 1, R9948 += 1 };
  s0 -> s3 [66, 66] { R10042 += 1, R9948 += 1 };
  s0 -> s4 [66, 66] { R10042 += 1, R9948 += 1 };
  s0 -> s1 [71, 65535] { R10042 += 1, R9948 += 1 };
  s1 -> s1 [0, 65] { R10042 += 1, R9948 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10042 += 1 };
  s1 -> s3 [66, 66] { R10042 += 1, R9948 += 1 };
  s1 -> s4 [66, 66] { R10042 += 1, R9948 += 1 };
  s1 -> s1 [71, 65535] { R10042 += 1, R9948 += 1 };
  s2 -> s1 [0, 65] { R10042 += 1, R9948 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10042 += 1, R9947 += 1, R9948 += 1 };
  s2 -> s3 [66, 66] { R10042 += 1, R9948 += 1 };
  s2 -> s4 [66, 66] { R10042 += 1, R9948 += 1 };
  s2 -> s1 [71, 65535] { R10042 += 1, R9948 += 1 };
  s3 -> s3 [0, 66] { R10042 += 1, R9948 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10042 += 1 };
  s3 -> s3 [71, 65535] { R10042 += 1, R9948 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10042 += 1 };
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 65] { R10044 += 1, R9950 += 1, R49 += 1 };
  s0 -> s2 [0, 65535] { R10044 += 1, R9949 += 1, R9950 += 1 };
  s0 -> s0 [0, 65535] { R10043 += 1, R10044 += 1 };
  s0 -> s3 [66, 66] { R10044 += 1, R9950 += 1, R49 += 1 };
  s0 -> s4 [66, 66] { R10044 += 1, R9950 += 1, R49 += 1 };
  s0 -> s1 [67, 65535] { R10044 += 1, R9950 += 1, R49 += 1 };
  s1 -> s1 [0, 65] { R10044 += 1, R9950 += 1, R49 += 1 };
  s1 -> s1 [0, 65535] { R10044 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [66, 66] { R10044 += 1, R9950 += 1, R49 += 1 };
  s1 -> s4 [66, 66] { R10044 += 1, R9950 += 1, R49 += 1 };
  s1 -> s1 [67, 65535] { R10044 += 1, R9950 += 1, R49 += 1 };
  s2 -> s1 [0, 65] { R10044 += 1, R9950 += 1, R49 += 1 };
  s2 -> s2 [0, 65535] { R10044 += 1, R9949 += 1, R9950 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [66, 66] { R10044 += 1, R9950 += 1, R49 += 1 };
  s2 -> s4 [66, 66] { R10044 += 1, R9950 += 1, R49 += 1 };
  s2 -> s1 [67, 65535] { R10044 += 1, R9950 += 1, R49 += 1 };
  s3 -> s3 [0, 65535] { R10044 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R10044 += 1 };
  s4 -> s4 [0, 65535] { R10044 += 1, R9950 += 1, R49 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R10044 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 65] { R10046 += 1, R9952 += 1, R51 += 1 };
  s0 -> s2 [0, 65535] { R10046 += 1, R9951 += 1, R9952 += 1 };
  s0 -> s0 [0, 65535] { R10045 += 1, R10046 += 1 };
  s0 -> s3 [66, 66] { R10046 += 1, R9952 += 1, R51 += 1 };
  s0 -> s4 [66, 66] { R10046 += 1, R9952 += 1, R51 += 1 };
  s0 -> s1 [67, 65535] { R10046 += 1, R9952 += 1, R51 += 1 };
  s1 -> s1 [0, 65] { R10046 += 1, R9952 += 1, R51 += 1 };
  s1 -> s1 [0, 65535] { R10046 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [66, 66] { R10046 += 1, R9952 += 1, R51 += 1 };
  s1 -> s4 [66, 66] { R10046 += 1, R9952 += 1, R51 += 1 };
  s1 -> s1 [67, 65535] { R10046 += 1, R9952 += 1, R51 += 1 };
  s2 -> s1 [0, 65] { R10046 += 1, R9952 += 1, R51 += 1 };
  s2 -> s2 [0, 65535] { R10046 += 1, R9951 += 1, R9952 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [66, 66] { R10046 += 1, R9952 += 1, R51 += 1 };
  s2 -> s4 [66, 66] { R10046 += 1, R9952 += 1, R51 += 1 };
  s2 -> s1 [67, 65535] { R10046 += 1, R9952 += 1, R51 += 1 };
  s3 -> s6 [0, 65535] { R10046 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10046 += 1, R9952 += 1, R51 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10046 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10046 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65] { R10048 += 1, R9954 += 1, R53 += 1, R54 += 1 };
  s0 -> s0 [0, 65535] { R10047 += 1, R10048 += 1 };
  s0 -> s2 [0, 65535] { R10048 += 1, R9953 += 1, R9954 += 1 };
  s0 -> s3 [66, 66] { R10048 += 1, R9954 += 1, R53 += 1, R54 += 1 };
  s0 -> s4 [66, 66] { R10048 += 1, R9954 += 1, R53 += 1, R54 += 1 };
  s0 -> s1 [67, 65535] { R10048 += 1, R9954 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 65] { R10048 += 1, R9954 += 1, R53 += 1, R54 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10048 += 1 };
  s1 -> s3 [66, 66] { R10048 += 1, R9954 += 1, R53 += 1, R54 += 1 };
  s1 -> s4 [66, 66] { R10048 += 1, R9954 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [67, 65535] { R10048 += 1, R9954 += 1, R53 += 1, R54 += 1 };
  s2 -> s1 [0, 65] { R10048 += 1, R9954 += 1, R53 += 1, R54 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10048 += 1, R9953 += 1, R9954 += 1 };
  s2 -> s3 [66, 66] { R10048 += 1, R9954 += 1, R53 += 1, R54 += 1 };
  s2 -> s4 [66, 66] { R10048 += 1, R9954 += 1, R53 += 1, R54 += 1 };
  s2 -> s1 [67, 65535] { R10048 += 1, R9954 += 1, R53 += 1, R54 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10048 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R10048 += 1 };
  s4 -> s4 [0, 65535] { R10048 += 1, R9954 += 1, R53 += 1, R54 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10048 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 65] { R10050 += 1, R9956 += 1, R57 += 1, R58 += 1 };
  s0 -> s0 [0, 65535] { R10049 += 1, R10050 += 1 };
  s0 -> s2 [0, 65535] { R10050 += 1, R9955 += 1, R9956 += 1 };
  s0 -> s3 [66, 66] { R10050 += 1, R9956 += 1, R57 += 1, R58 += 1 };
  s0 -> s4 [66, 66] { R10050 += 1, R9956 += 1, R57 += 1, R58 += 1 };
  s0 -> s1 [67, 65535] { R10050 += 1, R9956 += 1, R57 += 1, R58 += 1 };
  s1 -> s1 [0, 65] { R10050 += 1, R9956 += 1, R57 += 1, R58 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10050 += 1 };
  s1 -> s3 [66, 66] { R10050 += 1, R9956 += 1, R57 += 1, R58 += 1 };
  s1 -> s4 [66, 66] { R10050 += 1, R9956 += 1, R57 += 1, R58 += 1 };
  s1 -> s1 [67, 65535] { R10050 += 1, R9956 += 1, R57 += 1, R58 += 1 };
  s2 -> s1 [0, 65] { R10050 += 1, R9956 += 1, R57 += 1, R58 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10050 += 1, R9955 += 1, R9956 += 1 };
  s2 -> s3 [66, 66] { R10050 += 1, R9956 += 1, R57 += 1, R58 += 1 };
  s2 -> s4 [66, 66] { R10050 += 1, R9956 += 1, R57 += 1, R58 += 1 };
  s2 -> s1 [67, 65535] { R10050 += 1, R9956 += 1, R57 += 1, R58 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10050 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R10050 += 1 };
  s4 -> s4 [0, 65535] { R10050 += 1, R9956 += 1, R57 += 1, R58 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10050 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 65] { R10052 += 1, R9958 += 1, R63 += 1, R64 += 1 };
  s0 -> s2 [0, 65535] { R10052 += 1, R9957 += 1, R9958 += 1 };
  s0 -> s0 [0, 65535] { R10051 += 1, R10052 += 1 };
  s0 -> s3 [66, 66] { R10052 += 1, R9958 += 1, R63 += 1, R64 += 1 };
  s0 -> s4 [66, 66] { R10052 += 1, R9958 += 1, R63 += 1, R64 += 1 };
  s0 -> s1 [67, 65535] { R10052 += 1, R9958 += 1, R63 += 1, R64 += 1 };
  s1 -> s1 [0, 65] { R10052 += 1, R9958 += 1, R63 += 1, R64 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10052 += 1 };
  s1 -> s3 [66, 66] { R10052 += 1, R9958 += 1, R63 += 1, R64 += 1 };
  s1 -> s4 [66, 66] { R10052 += 1, R9958 += 1, R63 += 1, R64 += 1 };
  s1 -> s1 [67, 65535] { R10052 += 1, R9958 += 1, R63 += 1, R64 += 1 };
  s2 -> s1 [0, 65] { R10052 += 1, R9958 += 1, R63 += 1, R64 += 1 };
  s2 -> s2 [0, 65535] { R10052 += 1, R9957 += 1, R9958 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [66, 66] { R10052 += 1, R9958 += 1, R63 += 1, R64 += 1 };
  s2 -> s4 [66, 66] { R10052 += 1, R9958 += 1, R63 += 1, R64 += 1 };
  s2 -> s1 [67, 65535] { R10052 += 1, R9958 += 1, R63 += 1, R64 += 1 };
  s3 -> s3 [0, 65535] { R10052 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R10052 += 1 };
  s4 -> s4 [0, 65535] { R10052 += 1, R9958 += 1, R63 += 1, R64 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10052 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65] { R10054 += 1, R9960 += 1, R67 += 1, R68 += 1 };
  s0 -> s0 [0, 65535] { R10053 += 1, R10054 += 1 };
  s0 -> s2 [0, 65535] { R10054 += 1, R9959 += 1, R9960 += 1 };
  s0 -> s3 [66, 66] { R10054 += 1, R9960 += 1, R67 += 1, R68 += 1 };
  s0 -> s4 [66, 66] { R10054 += 1, R9960 += 1, R67 += 1, R68 += 1 };
  s0 -> s1 [67, 65535] { R10054 += 1, R9960 += 1, R67 += 1, R68 += 1 };
  s1 -> s1 [0, 65] { R10054 += 1, R9960 += 1, R67 += 1, R68 += 1 };
  s1 -> s1 [0, 65535] { R10054 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [66, 66] { R10054 += 1, R9960 += 1, R67 += 1, R68 += 1 };
  s1 -> s4 [66, 66] { R10054 += 1, R9960 += 1, R67 += 1, R68 += 1 };
  s1 -> s1 [67, 65535] { R10054 += 1, R9960 += 1, R67 += 1, R68 += 1 };
  s2 -> s1 [0, 65] { R10054 += 1, R9960 += 1, R67 += 1, R68 += 1 };
  s2 -> s2 [0, 65535] { R10054 += 1, R9959 += 1, R9960 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [66, 66] { R10054 += 1, R9960 += 1, R67 += 1, R68 += 1 };
  s2 -> s4 [66, 66] { R10054 += 1, R9960 += 1, R67 += 1, R68 += 1 };
  s2 -> s1 [67, 65535] { R10054 += 1, R9960 += 1, R67 += 1, R68 += 1 };
  s3 -> s3 [0, 65535] { R10054 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R10054 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R10054 += 1, R9960 += 1, R67 += 1, R68 += 1 };
  s5 -> s5 [0, 65535] { R10054 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 65] { R10056 += 1, R9962 += 1, R73 += 1, R74 += 1 };
  s0 -> s2 [0, 65535] { R10056 += 1, R9961 += 1, R9962 += 1 };
  s0 -> s0 [0, 65535] { R10055 += 1, R10056 += 1 };
  s0 -> s3 [66, 66] { R10056 += 1, R9962 += 1, R73 += 1, R74 += 1 };
  s0 -> s4 [66, 66] { R10056 += 1, R9962 += 1, R73 += 1, R74 += 1 };
  s0 -> s1 [67, 65535] { R10056 += 1, R9962 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 65] { R10056 += 1, R9962 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 65535] { R10056 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [66, 66] { R10056 += 1, R9962 += 1, R73 += 1, R74 += 1 };
  s1 -> s4 [66, 66] { R10056 += 1, R9962 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [67, 65535] { R10056 += 1, R9962 += 1, R73 += 1, R74 += 1 };
  s2 -> s1 [0, 65] { R10056 += 1, R9962 += 1, R73 += 1, R74 += 1 };
  s2 -> s2 [0, 65535] { R10056 += 1, R9961 += 1, R9962 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [66, 66] { R10056 += 1, R9962 += 1, R73 += 1, R74 += 1 };
  s2 -> s4 [66, 66] { R10056 += 1, R9962 += 1, R73 += 1, R74 += 1 };
  s2 -> s1 [67, 65535] { R10056 += 1, R9962 += 1, R73 += 1, R74 += 1 };
  s3 -> s6 [0, 65535] { R10056 += 1 };
  s3 -> s3 [0, 65535] { R10056 += 1, R9962 += 1, R73 += 1, R74 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10056 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10056 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65] { R10058 += 1, R9982 += 1 };
  s0 -> s2 [0, 65535] { R10058 += 1, R9981 += 1, R9982 += 1 };
  s0 -> s0 [0, 65535] { R10057 += 1, R10058 += 1 };
  s0 -> s3 [66, 66] { R10058 += 1, R9982 += 1 };
  s0 -> s1 [67, 65535] { R10058 += 1, R9982 += 1 };
  s1 -> s1 [0, 65] { R10058 += 1, R9982 += 1 };
  s1 -> s3 [66, 66] { R10058 += 1, R9982 += 1 };
  s1 -> s1 [67, 65535] { R10058 += 1, R9982 += 1 };
  s2 -> s1 [0, 65] { R10058 += 1, R9982 += 1 };
  s2 -> s2 [0, 65535] { R10058 += 1, R9981 += 1, R9982 += 1 };
  s2 -> s3 [66, 66] { R10058 += 1, R9982 += 1 };
  s2 -> s1 [67, 65535] { R10058 += 1, R9982 += 1 };
  s3 -> s3 [0, 65535] { R10058 += 1, R9982 += 1 };
  s3 -> s4 [0, 65535] { R10058 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10058 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 65535] { R10060 += 1, R9984 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R10059 += 1, R10060 += 1 };
  s0 -> s2 [0, 65535] { R10060 += 1, R9983 += 1, R9984 += 1 };
  s1 -> s1 [0, 65535] { R10060 += 1, R9984 += 1, R1 += 1 };
  s1 -> s4 [0, 65535] { R10060 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10060 += 1, R9984 += 1, R1 += 1 };
  s2 -> s2 [0, 65535] { R10060 += 1, R9983 += 1, R9984 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10060 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 65] { R10062 += 1, R9986 += 1 };
  s0 -> s0 [0, 65535] { R10061 += 1, R10062 += 1 };
  s0 -> s2 [0, 65535] { R10062 += 1, R9986 += 1, R11 += 1 };
  s0 -> s3 [0, 65535] { R10062 += 1, R9985 += 1, R9986 += 1 };
  s0 -> s4 [66, 66] { R10062 += 1, R9986 += 1 };
  s0 -> s1 [67, 65535] { R10062 += 1, R9986 += 1 };
  s1 -> s1 [0, 65] { R10062 += 1, R9986 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10062 += 1 };
  s1 -> s4 [66, 66] { R10062 += 1, R9986 += 1 };
  s1 -> s1 [67, 65535] { R10062 += 1, R9986 += 1 };
  s2 -> s1 [0, 65] { R10062 += 1, R9986 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R10062 += 1 };
  s2 -> s2 [0, 65535] { R10062 += 1, R9986 += 1, R11 += 1 };
  s2 -> s4 [66, 66] { R10062 += 1, R9986 += 1 };
  s2 -> s1 [67, 65535] { R10062 += 1, R9986 += 1 };
  s3 -> s1 [0, 65] { R10062 += 1, R9986 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R10062 += 1, R9986 += 1, R11 += 1 };
  s3 -> s3 [0, 65535] { R10062 += 1, R9985 += 1, R9986 += 1 };
  s3 -> s4 [66, 66] { R10062 += 1, R9986 += 1 };
  s3 -> s1 [67, 65535] { R10062 += 1, R9986 += 1 };
  s4 -> s4 [0, 65535] { R10062 += 1, R9986 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10062 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65] { R10064 += 1, R9988 += 1, R9926 += 1 };
  s0 -> s0 [0, 65535] { R10063 += 1, R10064 += 1 };
  s0 -> s2 [0, 65535] { R10064 += 1, R9987 += 1, R9988 += 1 };
  s0 -> s3 [0, 65535] { R10064 += 1, R9988 += 1, R9925 += 1, R9926 += 1 };
  s0 -> s1 [67, 65535] { R10064 += 1, R9988 += 1, R9926 += 1 };
  s1 -> s1 [0, 65] { R10064 += 1, R9988 += 1, R9926 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R10064 += 1, R9988 += 1 };
  s1 -> s5 [0, 65535] { R10064 += 1 };
  s1 -> s1 [67, 65535] { R10064 += 1, R9988 += 1, R9926 += 1 };
  s2 -> s1 [0, 65] { R10064 += 1, R9988 += 1, R9926 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10064 += 1, R9987 += 1, R9988 += 1 };
  s2 -> s3 [0, 65535] { R10064 += 1, R9988 += 1, R9925 += 1, R9926 += 1 };
  s2 -> s1 [67, 65535] { R10064 += 1, R9988 += 1, R9926 += 1 };
  s3 -> s1 [0, 65] { R10064 += 1, R9988 += 1, R9926 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R10064 += 1 };
  s3 -> s3 [0, 65535] { R10064 += 1, R9988 += 1, R9925 += 1, R9926 += 1 };
  s3 -> s1 [67, 65535] { R10064 += 1, R9988 += 1, R9926 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10064 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s0 [0, 65535] { R10065 += 1, R10066 += 1 };
  s0 -> s1 [0, 65535] { R10066 += 1, R9990 += 1, R9928 += 1, R20 += 1 };
  s0 -> s2 [0, 65535] { R10066 += 1, R9990 += 1, R9927 += 1, R9928 += 1 };
  s0 -> s3 [0, 65535] { R10066 += 1, R9989 += 1, R9990 += 1 };
  s1 -> s1 [0, 65535] { R10066 += 1, R9990 += 1, R9928 += 1, R20 += 1 };
  s1 -> s5 [0, 65535] { R10066 += 1 };
  s1 -> s6 [0, 65535] { R10066 += 1, R9990 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R10066 += 1, R9990 += 1, R9928 += 1, R20 += 1 };
  s2 -> s5 [0, 65535] { R10066 += 1 };
  s2 -> s2 [0, 65535] { R10066 += 1, R9990 += 1, R9927 += 1, R9928 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R10066 += 1, R9990 += 1, R9928 += 1, R20 += 1 };
  s3 -> s2 [0, 65535] { R10066 += 1, R9990 += 1, R9927 += 1, R9928 += 1 };
  s3 -> s3 [0, 65535] { R10066 += 1, R9989 += 1, R9990 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10066 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R10066 += 1 };
  s6 -> s6 [0, 65535] { R10066 += 1, R9990 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 66] { R10068 += 1, R9992 += 1, R9930 += 1 };
  s0 -> s2 [0, 65535] { R10068 += 1, R9992 += 1, R9929 += 1, R9930 += 1 };
  s0 -> s0 [0, 65535] { R10067 += 1, R10068 += 1 };
  s0 -> s3 [0, 65535] { R10068 += 1, R9991 += 1, R9992 += 1 };
  s0 -> s1 [70, 65535] { R10068 += 1, R9992 += 1, R9930 += 1 };
  s1 -> s1 [0, 66] { R10068 += 1, R9992 += 1, R9930 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R10068 += 1, R9992 += 1 };
  s1 -> s5 [0, 65535] { R10068 += 1 };
  s1 -> s1 [70, 65535] { R10068 += 1, R9992 += 1, R9930 += 1 };
  s2 -> s1 [0, 66] { R10068 += 1, R9992 += 1, R9930 += 1 };
  s2 -> s2 [0, 65535] { R10068 += 1, R9992 += 1, R9929 += 1, R9930 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R10068 += 1 };
  s2 -> s1 [70, 65535] { R10068 += 1, R9992 += 1, R9930 += 1 };
  s3 -> s1 [0, 66] { R10068 += 1, R9992 += 1, R9930 += 1 };
  s3 -> s2 [0, 65535] { R10068 += 1, R9992 += 1, R9929 += 1, R9930 += 1 };
  s3 -> s3 [0, 65535] { R10068 += 1, R9991 += 1, R9992 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [70, 65535] { R10068 += 1, R9992 += 1, R9930 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10068 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 65535] { R10070 += 1, R9994 += 1, R9931 += 1, R9932 += 1 };
  s0 -> s2 [0, 65535] { R10070 += 1, R9994 += 1, R9932 += 1, R78 += 1 };
  s0 -> s3 [0, 65535] { R10070 += 1, R9993 += 1, R9994 += 1 };
  s0 -> s0 [0, 65535] { R10069 += 1, R10070 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R10070 += 1, R9994 += 1, R9931 += 1, R9932 += 1 };
  s1 -> s2 [0, 65535] { R10070 += 1, R9994 += 1, R9932 += 1, R78 += 1 };
  s1 -> s6 [0, 65535] { R10070 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R10070 += 1, R9994 += 1 };
  s2 -> s2 [0, 65535] { R10070 += 1, R9994 += 1, R9932 += 1, R78 += 1 };
  s2 -> s6 [0, 65535] { R10070 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R10070 += 1, R9994 += 1, R9931 += 1, R9932 += 1 };
  s3 -> s2 [0, 65535] { R10070 += 1, R9994 += 1, R9932 += 1, R78 += 1 };
  s3 -> s3 [0, 65535] { R10070 += 1, R9993 += 1, R9994 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10070 += 1, R9994 += 1 };
  s5 -> s6 [0, 65535] { R10070 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R10070 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 69] { R10072 += 1, R9996 += 1, R9934 += 1 };
  s0 -> s2 [0, 65535] { R10072 += 1, R9995 += 1, R9996 += 1 };
  s0 -> s3 [0, 65535] { R10072 += 1, R9996 += 1, R9933 += 1, R9934 += 1 };
  s0 -> s4 [0, 65535] { R10072 += 1, R9996 += 1, R9934 += 1, R80 += 1 };
  s0 -> s0 [0, 65535] { R10071 += 1, R10072 += 1 };
  s0 -> s1 [71, 65535] { R10072 += 1, R9996 += 1, R9934 += 1 };
  s1 -> s1 [0, 69] { R10072 += 1, R9996 += 1, R9934 += 1 };
  s1 -> s1 [0, 65535] { R10072 += 1, R9996 += 1 };
  s1 -> s6 [0, 65535] { R10072 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s1 [71, 65535] { R10072 += 1, R9996 += 1, R9934 += 1 };
  s2 -> s1 [0, 69] { R10072 += 1, R9996 += 1, R9934 += 1 };
  s2 -> s2 [0, 65535] { R10072 += 1, R9995 += 1, R9996 += 1 };
  s2 -> s3 [0, 65535] { R10072 += 1, R9996 += 1, R9933 += 1, R9934 += 1 };
  s2 -> s4 [0, 65535] { R10072 += 1, R9996 += 1, R9934 += 1, R80 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s1 [71, 65535] { R10072 += 1, R9996 += 1, R9934 += 1 };
  s3 -> s1 [0, 69] { R10072 += 1, R9996 += 1, R9934 += 1 };
  s3 -> s3 [0, 65535] { R10072 += 1, R9996 += 1, R9933 += 1, R9934 += 1 };
  s3 -> s4 [0, 65535] { R10072 += 1, R9996 += 1, R9934 += 1, R80 += 1 };
  s3 -> s6 [0, 65535] { R10072 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s1 [71, 65535] { R10072 += 1, R9996 += 1, R9934 += 1 };
  s4 -> s1 [0, 69] { R10072 += 1, R9996 += 1, R9934 += 1 };
  s4 -> s5 [0, 65535] { R10072 += 1, R9996 += 1 };
  s4 -> s4 [0, 65535] { R10072 += 1, R9996 += 1, R9934 += 1, R80 += 1 };
  s4 -> s6 [0, 65535] { R10072 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s1 [71, 65535] { R10072 += 1, R9996 += 1, R9934 += 1 };
  s5 -> s5 [0, 65535] { R10072 += 1, R9996 += 1 };
  s5 -> s6 [0, 65535] { R10072 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s6 [0, 65535] { R10072 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 69] { R10074 += 1, R9998 += 1, R9936 += 1, R84 += 1 };
  s0 -> s2 [0, 65535] { R10074 += 1, R9997 += 1, R9998 += 1 };
  s0 -> s3 [0, 65535] { R10074 += 1, R9998 += 1, R9936 += 1, R83 += 1, R84 += 1 };
  s0 -> s0 [0, 65535] { R10073 += 1, R10074 += 1 };
  s0 -> s4 [0, 65535] { R10074 += 1, R9998 += 1, R9935 += 1, R9936 += 1 };
  s0 -> s1 [71, 65535] { R10074 += 1, R9998 += 1, R9936 += 1, R84 += 1 };
  s1 -> s1 [0, 69] { R10074 += 1, R9998 += 1, R9936 += 1, R84 += 1 };
  s1 -> s5 [0, 65535] { R10074 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R10074 += 1, R9998 += 1, R9936 += 1 };
  s1 -> s7 [0, 65535] { R10074 += 1, R9998 += 1 };
  s1 -> s1 [71, 65535] { R10074 += 1, R9998 += 1, R9936 += 1, R84 += 1 };
  s2 -> s1 [0, 69] { R10074 += 1, R9998 += 1, R9936 += 1, R84 += 1 };
  s2 -> s2 [0, 65535] { R10074 += 1, R9997 += 1, R9998 += 1 };
  s2 -> s3 [0, 65535] { R10074 += 1, R9998 += 1, R9936 += 1, R83 += 1, R84 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s4 [0, 65535] { R10074 += 1, R9998 += 1, R9935 += 1, R9936 += 1 };
  s2 -> s1 [71, 65535] { R10074 += 1, R9998 += 1, R9936 += 1, R84 += 1 };
  s3 -> s1 [0, 69] { R10074 += 1, R9998 += 1, R9936 += 1, R84 += 1 };
  s3 -> s5 [0, 65535] { R10074 += 1 };
  s3 -> s3 [0, 65535] { R10074 += 1, R9998 += 1, R9936 += 1, R83 += 1, R84 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s7 [0, 65535] { R10074 += 1, R9998 += 1 };
  s3 -> s1 [71, 65535] { R10074 += 1, R9998 += 1, R9936 += 1, R84 += 1 };
  s4 -> s1 [0, 69] { R10074 += 1, R9998 += 1, R9936 += 1, R84 += 1 };
  s4 -> s5 [0, 65535] { R10074 += 1 };
  s4 -> s3 [0, 65535] { R10074 += 1, R9998 += 1, R9936 += 1, R83 += 1, R84 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R10074 += 1, R9998 += 1, R9935 += 1, R9936 += 1 };
  s4 -> s1 [71, 65535] { R10074 += 1, R9998 += 1, R9936 += 1, R84 += 1 };
  s5 -> s5 [0, 65535] { R10074 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R10074 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R10074 += 1, R9998 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_32 {
  init s0;
  s0 -> s0 [0, 65535] { R10075 += 1, R10076 += 1 };
  s0 -> s1 [0, 65535] { R10076 += 1, R10000 += 1, R9938 += 1, R6641 += 1, R6642 += 1 };
  s0 -> s2 [0, 65535] { R10076 += 1, R9999 += 1, R10000 += 1 };
  s0 -> s3 [0, 65535] { R10076 += 1, R10000 += 1, R9937 += 1, R9938 += 1 };
  s0 -> s4 [0, 65535] { R10076 += 1, R10000 += 1, R9938 += 1 };
  s1 -> s1 [0, 65535] { R10076 += 1, R10000 += 1, R9938 += 1, R6641 += 1, R6642 += 1 };
  s1 -> s5 [0, 65535] { R10076 += 1 };
  s1 -> s4 [0, 65535] { R10076 += 1, R10000 += 1, R9938 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R10076 += 1, R10000 += 1 };
  s2 -> s1 [0, 65535] { R10076 += 1, R10000 += 1, R9938 += 1, R6641 += 1, R6642 += 1 };
  s2 -> s2 [0, 65535] { R10076 += 1, R9999 += 1, R10000 += 1 };
  s2 -> s3 [0, 65535] { R10076 += 1, R10000 += 1, R9937 += 1, R9938 += 1 };
  s2 -> s4 [0, 65535] { R10076 += 1, R10000 += 1, R9938 += 1 };
  s2 -> s6 [0, 65535];
  s3 -> s1 [0, 65535] { R10076 += 1, R10000 += 1, R9938 += 1, R6641 += 1, R6642 += 1 };
  s3 -> s5 [0, 65535] { R10076 += 1 };
  s3 -> s3 [0, 65535] { R10076 += 1, R10000 += 1, R9937 += 1, R9938 += 1 };
  s3 -> s4 [0, 65535] { R10076 += 1, R10000 += 1, R9938 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R10076 += 1 };
  s4 -> s4 [0, 65535] { R10076 += 1, R10000 += 1, R9938 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R10076 += 1, R10000 += 1 };
  s5 -> s5 [0, 65535] { R10076 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R10076 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R10076 += 1, R10000 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 70] { R10078 += 1, R10002 += 1, R9940 += 1, R8828 += 1 };
  s0 -> s0 [0, 65535] { R10077 += 1, R10078 += 1 };
  s0 -> s2 [0, 65535] { R10078 += 1, R10002 += 1, R9940 += 1, R8827 += 1, R8828 += 1 };
  s0 -> s3 [0, 65535] { R10078 += 1, R10002 += 1, R9939 += 1, R9940 += 1 };
  s0 -> s4 [0, 65535] { R10078 += 1, R10001 += 1, R10002 += 1 };
  s0 -> s5 [83, 83] { R10078 += 1, R10002 += 1, R9940 += 1, R8828 += 1 };
  s0 -> s1 [84, 65535] { R10078 += 1, R10002 += 1, R9940 += 1, R8828 += 1 };
  s1 -> s1 [0, 70] { R10078 += 1, R10002 += 1, R9940 += 1, R8828 += 1 };
  s1 -> s5 [83, 83] { R10078 += 1, R10002 += 1, R9940 += 1, R8828 += 1 };
  s1 -> s1 [84, 65535] { R10078 += 1, R10002 += 1, R9940 += 1, R8828 += 1 };
  s2 -> s1 [0, 70] { R10078 += 1, R10002 += 1, R9940 += 1, R8828 += 1 };
  s2 -> s2 [0, 65535] { R10078 += 1, R10002 += 1, R9940 += 1, R8827 += 1, R8828 += 1 };
  s2 -> s5 [83, 83] { R10078 += 1, R10002 += 1, R9940 += 1, R8828 += 1 };
  s2 -> s1 [84, 65535] { R10078 += 1, R10002 += 1, R9940 += 1, R8828 += 1 };
  s3 -> s1 [0, 70] { R10078 += 1, R10002 += 1, R9940 += 1, R8828 += 1 };
  s3 -> s2 [0, 65535] { R10078 += 1, R10002 += 1, R9940 += 1, R8827 += 1, R8828 += 1 };
  s3 -> s3 [0, 65535] { R10078 += 1, R10002 += 1, R9939 += 1, R9940 += 1 };
  s3 -> s5 [83, 83] { R10078 += 1, R10002 += 1, R9940 += 1, R8828 += 1 };
  s3 -> s1 [84, 65535] { R10078 += 1, R10002 += 1, R9940 += 1, R8828 += 1 };
  s4 -> s1 [0, 70] { R10078 += 1, R10002 += 1, R9940 += 1, R8828 += 1 };
  s4 -> s2 [0, 65535] { R10078 += 1, R10002 += 1, R9940 += 1, R8827 += 1, R8828 += 1 };
  s4 -> s3 [0, 65535] { R10078 += 1, R10002 += 1, R9939 += 1, R9940 += 1 };
  s4 -> s4 [0, 65535] { R10078 += 1, R10001 += 1, R10002 += 1 };
  s4 -> s5 [83, 83] { R10078 += 1, R10002 += 1, R9940 += 1, R8828 += 1 };
  s4 -> s1 [84, 65535] { R10078 += 1, R10002 += 1, R9940 += 1, R8828 += 1 };
  s5 -> s5 [0, 70] { R10078 += 1, R10002 += 1, R9940 += 1, R8828 += 1 };
  s5 -> s6 [0, 65535] { R10078 += 1 };
  s5 -> s7 [0, 65535];
  s5 -> s5 [0, 65535] { R10078 += 1, R10002 += 1, R9940 += 1 };
  s5 -> s8 [0, 65535] { R10078 += 1, R10002 += 1 };
  s5 -> s5 [83, 65535] { R10078 += 1, R10002 += 1, R9940 += 1, R8828 += 1 };
  s6 -> s6 [0, 65535] { R10078 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  s8 -> s6 [0, 65535] { R10078 += 1 };
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R10078 += 1, R10002 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 65535] { R10080 += 1, R10003 += 1, R10004 += 1 };
  s0 -> s2 [0, 65535] { R10080 += 1, R10004 += 1, R9942 += 1 };
  s0 -> s3 [0, 65535] { R10080 += 1, R10004 += 1, R9942 += 1, R9559 += 1, R9560 += 1 };
  s0 -> s4 [0, 65535] { R10080 += 1, R10004 += 1, R9941 += 1, R9942 += 1 };
  s0 -> s0 [0, 65535] { R10079 += 1, R10080 += 1 };
  s1 -> s1 [0, 65535] { R10080 += 1, R10003 += 1, R10004 += 1 };
  s1 -> s2 [0, 65535] { R10080 += 1, R10004 += 1, R9942 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R10080 += 1, R10004 += 1, R9942 += 1, R9559 += 1, R9560 += 1 };
  s1 -> s4 [0, 65535] { R10080 += 1, R10004 += 1, R9941 += 1, R9942 += 1 };
  s2 -> s2 [0, 65535] { R10080 += 1, R10004 += 1, R9942 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R10080 += 1 };
  s2 -> s7 [0, 65535] { R10080 += 1, R10004 += 1 };
  s3 -> s2 [0, 65535] { R10080 += 1, R10004 += 1, R9942 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10080 += 1, R10004 += 1, R9942 += 1, R9559 += 1, R9560 += 1 };
  s3 -> s6 [0, 65535] { R10080 += 1 };
  s3 -> s7 [0, 65535] { R10080 += 1, R10004 += 1 };
  s4 -> s2 [0, 65535] { R10080 += 1, R10004 += 1, R9942 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s3 [0, 65535] { R10080 += 1, R10004 += 1, R9942 += 1, R9559 += 1, R9560 += 1 };
  s4 -> s4 [0, 65535] { R10080 += 1, R10004 += 1, R9941 += 1, R9942 += 1 };
  s4 -> s6 [0, 65535] { R10080 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10080 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R10080 += 1 };
  s7 -> s7 [0, 65535] { R10080 += 1, R10004 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 70] { R10082 += 1, R10006 += 1, R9944 += 1, R9924 += 1 };
  s0 -> s0 [0, 65535] { R10081 += 1, R10082 += 1 };
  s0 -> s2 [0, 65535] { R10082 += 1, R10005 += 1, R10006 += 1 };
  s0 -> s3 [0, 65535] { R10082 += 1, R10006 += 1, R9943 += 1, R9944 += 1 };
  s0 -> s1 [0, 65535] { R10082 += 1, R10006 += 1, R9944 += 1 };
  s0 -> s1 [84, 65535] { R10082 += 1, R10006 += 1, R9944 += 1, R9924 += 1 };
  s1 -> s1 [0, 70] { R10082 += 1, R10006 += 1, R9944 += 1, R9924 += 1 };
  s1 -> s6 [0, 65535] { R10082 += 1, R10006 += 1 };
  s1 -> s1 [0, 65535] { R10082 += 1, R10006 += 1, R9944 += 1 };
  s1 -> s4 [0, 65535] { R10082 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [84, 65535] { R10082 += 1, R10006 += 1, R9944 += 1, R9924 += 1 };
  s2 -> s1 [0, 70] { R10082 += 1, R10006 += 1, R9944 += 1, R9924 += 1 };
  s2 -> s2 [0, 65535] { R10082 += 1, R10005 += 1, R10006 += 1 };
  s2 -> s3 [0, 65535] { R10082 += 1, R10006 += 1, R9943 += 1, R9944 += 1 };
  s2 -> s1 [0, 65535] { R10082 += 1, R10006 += 1, R9944 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [84, 65535] { R10082 += 1, R10006 += 1, R9944 += 1, R9924 += 1 };
  s3 -> s1 [0, 70] { R10082 += 1, R10006 += 1, R9944 += 1, R9924 += 1 };
  s3 -> s3 [0, 65535] { R10082 += 1, R10006 += 1, R9943 += 1, R9944 += 1 };
  s3 -> s1 [0, 65535] { R10082 += 1, R10006 += 1, R9944 += 1 };
  s3 -> s4 [0, 65535] { R10082 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [84, 65535] { R10082 += 1, R10006 += 1, R9944 += 1, R9924 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10082 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10082 += 1, R10006 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R10082 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 65535] { R10084 += 1, R10008 += 1, R9963 += 1, R9964 += 1 };
  s0 -> s2 [0, 65535] { R10084 += 1, R10008 += 1, R9964 += 1, R21 += 1 };
  s0 -> s3 [0, 65535] { R10084 += 1, R10007 += 1, R10008 += 1 };
  s0 -> s0 [0, 65535] { R10083 += 1, R10084 += 1 };
  s1 -> s1 [0, 65535] { R10084 += 1, R10008 += 1, R9963 += 1, R9964 += 1 };
  s1 -> s2 [0, 65535] { R10084 += 1, R10008 += 1, R9964 += 1, R21 += 1 };
  s1 -> s6 [0, 65535] { R10084 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R10084 += 1, R10008 += 1 };
  s2 -> s2 [0, 65535] { R10084 += 1, R10008 += 1, R9964 += 1, R21 += 1 };
  s2 -> s6 [0, 65535] { R10084 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R10084 += 1, R10008 += 1, R9963 += 1, R9964 += 1 };
  s3 -> s2 [0, 65535] { R10084 += 1, R10008 += 1, R9964 += 1, R21 += 1 };
  s3 -> s3 [0, 65535] { R10084 += 1, R10007 += 1, R10008 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10084 += 1, R10008 += 1 };
  s5 -> s6 [0, 65535] { R10084 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R10084 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 65] { R10086 += 1, R10010 += 1, R9966 += 1 };
  s0 -> s2 [0, 65535] { R10086 += 1, R10009 += 1, R10010 += 1 };
  s0 -> s0 [0, 65535] { R10085 += 1, R10086 += 1 };
  s0 -> s3 [0, 65535] { R10086 += 1, R10010 += 1, R9965 += 1, R9966 += 1 };
  s0 -> s4 [66, 66] { R10086 += 1, R10010 += 1, R9966 += 1 };
  s0 -> s5 [66, 66] { R10086 += 1, R10010 += 1, R9966 += 1 };
  s0 -> s6 [70, 70] { R10086 += 1, R10010 += 1, R9966 += 1 };
  s0 -> s1 [71, 65535] { R10086 += 1, R10010 += 1, R9966 += 1 };
  s1 -> s1 [0, 65] { R10086 += 1, R10010 += 1, R9966 += 1 };
  s1 -> s4 [66, 66] { R10086 += 1, R10010 += 1, R9966 += 1 };
  s1 -> s5 [66, 66] { R10086 += 1, R10010 += 1, R9966 += 1 };
  s1 -> s6 [70, 70] { R10086 += 1, R10010 += 1, R9966 += 1 };
  s1 -> s1 [71, 65535] { R10086 += 1, R10010 += 1, R9966 += 1 };
  s2 -> s1 [0, 65] { R10086 += 1, R10010 += 1, R9966 += 1 };
  s2 -> s2 [0, 65535] { R10086 += 1, R10009 += 1, R10010 += 1 };
  s2 -> s3 [0, 65535] { R10086 += 1, R10010 += 1, R9965 += 1, R9966 += 1 };
  s2 -> s4 [66, 66] { R10086 += 1, R10010 += 1, R9966 += 1 };
  s2 -> s5 [66, 66] { R10086 += 1, R10010 += 1, R9966 += 1 };
  s2 -> s6 [70, 70] { R10086 += 1, R10010 += 1, R9966 += 1 };
  s2 -> s1 [71, 65535] { R10086 += 1, R10010 += 1, R9966 += 1 };
  s3 -> s1 [0, 65] { R10086 += 1, R10010 += 1, R9966 += 1 };
  s3 -> s3 [0, 65535] { R10086 += 1, R10010 += 1, R9965 += 1, R9966 += 1 };
  s3 -> s4 [66, 66] { R10086 += 1, R10010 += 1, R9966 += 1 };
  s3 -> s5 [66, 66] { R10086 += 1, R10010 += 1, R9966 += 1 };
  s3 -> s6 [70, 70] { R10086 += 1, R10010 += 1, R9966 += 1 };
  s3 -> s1 [71, 65535] { R10086 += 1, R10010 += 1, R9966 += 1 };
  s5 -> s5 [0, 66] { R10086 += 1, R10010 += 1, R9966 += 1 };
  s5 -> s10 [70, 70] { R10086 += 1, R10010 += 1, R9966 += 1 };
  s5 -> s5 [71, 65535] { R10086 += 1, R10010 += 1, R9966 += 1 };
  s6 -> s6 [0, 65] { R10086 += 1, R10010 += 1, R9966 += 1 };
  s6 -> s7 [0, 65535] { R10086 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R10086 += 1, R10010 += 1 };
  s6 -> s9 [66, 66] { R10086 += 1, R10010 += 1, R9966 += 1 };
  s6 -> s10 [66, 66] { R10086 += 1, R10010 += 1, R9966 += 1 };
  s6 -> s6 [70, 65535] { R10086 += 1, R10010 += 1, R9966 += 1 };
  s7 -> s7 [0, 65535] { R10086 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R10086 += 1, R10010 += 1 };
  s9 -> s7 [0, 65535] { R10086 += 1 };
  s9 -> s8 [0, 65535];
  s10 -> s10 [0, 66] { R10086 += 1, R10010 += 1, R9966 += 1 };
  s10 -> s10 [0, 65535] { R10086 += 1, R10010 += 1 };
  s10 -> s7 [0, 65535] { R10086 += 1 };
  s10 -> s8 [0, 65535];
  s10 -> s10 [70, 65535] { R10086 += 1, R10010 += 1, R9966 += 1 };
  accepting s8, s9, s6, s7, s10;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 65] { R10088 += 1, R10012 += 1, R9968 += 1, R77 += 1 };
  s0 -> s2 [0, 65535] { R10088 += 1, R10011 += 1, R10012 += 1 };
  s0 -> s0 [0, 65535] { R10087 += 1, R10088 += 1 };
  s0 -> s3 [0, 65535] { R10088 += 1, R10012 += 1, R9967 += 1, R9968 += 1 };
  s0 -> s4 [66, 66] { R10088 += 1, R10012 += 1, R9968 += 1, R77 += 1 };
  s0 -> s5 [66, 66] { R10088 += 1, R10012 += 1, R9968 += 1, R77 += 1 };
  s0 -> s1 [67, 65535] { R10088 += 1, R10012 += 1, R9968 += 1, R77 += 1 };
  s1 -> s1 [0, 65] { R10088 += 1, R10012 += 1, R9968 += 1, R77 += 1 };
  s1 -> s1 [0, 65535] { R10088 += 1, R10012 += 1 };
  s1 -> s6 [0, 65535] { R10088 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s4 [66, 66] { R10088 += 1, R10012 += 1, R9968 += 1, R77 += 1 };
  s1 -> s5 [66, 66] { R10088 += 1, R10012 += 1, R9968 += 1, R77 += 1 };
  s1 -> s1 [67, 65535] { R10088 += 1, R10012 += 1, R9968 += 1, R77 += 1 };
  s2 -> s1 [0, 65] { R10088 += 1, R10012 += 1, R9968 += 1, R77 += 1 };
  s2 -> s2 [0, 65535] { R10088 += 1, R10011 += 1, R10012 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s3 [0, 65535] { R10088 += 1, R10012 += 1, R9967 += 1, R9968 += 1 };
  s2 -> s4 [66, 66] { R10088 += 1, R10012 += 1, R9968 += 1, R77 += 1 };
  s2 -> s5 [66, 66] { R10088 += 1, R10012 += 1, R9968 += 1, R77 += 1 };
  s2 -> s1 [67, 65535] { R10088 += 1, R10012 += 1, R9968 += 1, R77 += 1 };
  s3 -> s1 [0, 65] { R10088 += 1, R10012 += 1, R9968 += 1, R77 += 1 };
  s3 -> s6 [0, 65535] { R10088 += 1 };
  s3 -> s8 [0, 65535];
  s3 -> s3 [0, 65535] { R10088 += 1, R10012 += 1, R9967 += 1, R9968 += 1 };
  s3 -> s4 [66, 66] { R10088 += 1, R10012 += 1, R9968 += 1, R77 += 1 };
  s3 -> s5 [66, 66] { R10088 += 1, R10012 += 1, R9968 += 1, R77 += 1 };
  s3 -> s1 [67, 65535] { R10088 += 1, R10012 += 1, R9968 += 1, R77 += 1 };
  s4 -> s4 [0, 65535] { R10088 += 1, R10012 += 1 };
  s4 -> s6 [0, 65535] { R10088 += 1 };
  s4 -> s8 [0, 65535];
  s5 -> s6 [0, 65535] { R10088 += 1 };
  s5 -> s7 [0, 65535] { R10088 += 1, R10012 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s5 [0, 65535] { R10088 += 1, R10012 += 1, R9968 += 1, R77 += 1 };
  s6 -> s6 [0, 65535] { R10088 += 1 };
  s6 -> s8 [0, 65535];
  s7 -> s6 [0, 65535] { R10088 += 1 };
  s7 -> s7 [0, 65535] { R10088 += 1, R10012 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton value2_39 {
  init s0;
  s0 -> s1 [0, 65] { R10090 += 1, R10014 += 1, R9970 += 1, R79 += 1 };
  s0 -> s2 [0, 65535] { R10090 += 1, R10013 += 1, R10014 += 1 };
  s0 -> s3 [0, 65535] { R10090 += 1, R10014 += 1, R9969 += 1, R9970 += 1 };
  s0 -> s0 [0, 65535] { R10089 += 1, R10090 += 1 };
  s0 -> s4 [66, 66] { R10090 += 1, R10014 += 1, R9970 += 1, R79 += 1 };
  s0 -> s5 [66, 66] { R10090 += 1, R10014 += 1, R9970 += 1, R79 += 1 };
  s0 -> s1 [67, 65535] { R10090 += 1, R10014 += 1, R9970 += 1, R79 += 1 };
  s1 -> s1 [0, 65] { R10090 += 1, R10014 += 1, R9970 += 1, R79 += 1 };
  s1 -> s1 [0, 65535] { R10090 += 1, R10014 += 1 };
  s1 -> s6 [0, 65535] { R10090 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s4 [66, 66] { R10090 += 1, R10014 += 1, R9970 += 1, R79 += 1 };
  s1 -> s5 [66, 66] { R10090 += 1, R10014 += 1, R9970 += 1, R79 += 1 };
  s1 -> s1 [67, 65535] { R10090 += 1, R10014 += 1, R9970 += 1, R79 += 1 };
  s2 -> s1 [0, 65] { R10090 += 1, R10014 += 1, R9970 += 1, R79 += 1 };
  s2 -> s2 [0, 65535] { R10090 += 1, R10013 += 1, R10014 += 1 };
  s2 -> s3 [0, 65535] { R10090 += 1, R10014 += 1, R9969 += 1, R9970 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s4 [66, 66] { R10090 += 1, R10014 += 1, R9970 += 1, R79 += 1 };
  s2 -> s5 [66, 66] { R10090 += 1, R10014 += 1, R9970 += 1, R79 += 1 };
  s2 -> s1 [67, 65535] { R10090 += 1, R10014 += 1, R9970 += 1, R79 += 1 };
  s3 -> s1 [0, 65] { R10090 += 1, R10014 += 1, R9970 += 1, R79 += 1 };
  s3 -> s6 [0, 65535] { R10090 += 1 };
  s3 -> s3 [0, 65535] { R10090 += 1, R10014 += 1, R9969 += 1, R9970 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s4 [66, 66] { R10090 += 1, R10014 += 1, R9970 += 1, R79 += 1 };
  s3 -> s5 [66, 66] { R10090 += 1, R10014 += 1, R9970 += 1, R79 += 1 };
  s3 -> s1 [67, 65535] { R10090 += 1, R10014 += 1, R9970 += 1, R79 += 1 };
  s4 -> s4 [0, 65535] { R10090 += 1, R10014 += 1, R9970 += 1, R79 += 1 };
  s4 -> s8 [0, 65535] { R10090 += 1, R10014 += 1 };
  s4 -> s6 [0, 65535] { R10090 += 1 };
  s4 -> s7 [0, 65535];
  s5 -> s5 [0, 65535] { R10090 += 1, R10014 += 1 };
  s5 -> s6 [0, 65535] { R10090 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s6 [0, 65535] { R10090 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R10090 += 1, R10014 += 1 };
  s8 -> s6 [0, 65535] { R10090 += 1 };
  s8 -> s7 [0, 65535];
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton value2_40 {
  init s0;
  s0 -> s1 [0, 65] { R10092 += 1, R10016 += 1, R9972 += 1, R81 += 1, R82 += 1 };
  s0 -> s2 [0, 65535] { R10092 += 1, R10015 += 1, R10016 += 1 };
  s0 -> s3 [0, 65535] { R10092 += 1, R10016 += 1, R9971 += 1, R9972 += 1 };
  s0 -> s0 [0, 65535] { R10091 += 1, R10092 += 1 };
  s0 -> s4 [66, 66] { R10092 += 1, R10016 += 1, R9972 += 1, R81 += 1, R82 += 1 };
  s0 -> s5 [66, 66] { R10092 += 1, R10016 += 1, R9972 += 1, R81 += 1, R82 += 1 };
  s0 -> s1 [67, 65535] { R10092 += 1, R10016 += 1, R9972 += 1, R81 += 1, R82 += 1 };
  s1 -> s1 [0, 65] { R10092 += 1, R10016 += 1, R9972 += 1, R81 += 1, R82 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R10092 += 1, R10016 += 1 };
  s1 -> s8 [0, 65535] { R10092 += 1 };
  s1 -> s4 [66, 66] { R10092 += 1, R10016 += 1, R9972 += 1, R81 += 1, R82 += 1 };
  s1 -> s5 [66, 66] { R10092 += 1, R10016 += 1, R9972 += 1, R81 += 1, R82 += 1 };
  s1 -> s1 [67, 65535] { R10092 += 1, R10016 += 1, R9972 += 1, R81 += 1, R82 += 1 };
  s2 -> s1 [0, 65] { R10092 += 1, R10016 += 1, R9972 += 1, R81 += 1, R82 += 1 };
  s2 -> s2 [0, 65535] { R10092 += 1, R10015 += 1, R10016 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R10092 += 1, R10016 += 1, R9971 += 1, R9972 += 1 };
  s2 -> s4 [66, 66] { R10092 += 1, R10016 += 1, R9972 += 1, R81 += 1, R82 += 1 };
  s2 -> s5 [66, 66] { R10092 += 1, R10016 += 1, R9972 += 1, R81 += 1, R82 += 1 };
  s2 -> s1 [67, 65535] { R10092 += 1, R10016 += 1, R9972 += 1, R81 += 1, R82 += 1 };
  s3 -> s1 [0, 65] { R10092 += 1, R10016 += 1, R9972 += 1, R81 += 1, R82 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s8 [0, 65535] { R10092 += 1 };
  s3 -> s3 [0, 65535] { R10092 += 1, R10016 += 1, R9971 += 1, R9972 += 1 };
  s3 -> s4 [66, 66] { R10092 += 1, R10016 += 1, R9972 += 1, R81 += 1, R82 += 1 };
  s3 -> s5 [66, 66] { R10092 += 1, R10016 += 1, R9972 += 1, R81 += 1, R82 += 1 };
  s3 -> s1 [67, 65535] { R10092 += 1, R10016 += 1, R9972 += 1, R81 += 1, R82 += 1 };
  s4 -> s4 [0, 65535] { R10092 += 1, R10016 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s8 [0, 65535] { R10092 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R10092 += 1, R10016 += 1, R9972 += 1, R81 += 1, R82 += 1 };
  s5 -> s7 [0, 65535] { R10092 += 1, R10016 += 1 };
  s5 -> s8 [0, 65535] { R10092 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R10092 += 1, R10016 += 1 };
  s7 -> s8 [0, 65535] { R10092 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R10092 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton value2_41 {
  init s0;
  s0 -> s1 [0, 65] { R10094 += 1, R10018 += 1, R9974 += 1, R6637 += 1, R6638 += 1 };
  s0 -> s2 [0, 65] { R10094 += 1, R10018 += 1, R9974 += 1, R6638 += 1, R6639 += 1 };
  s0 -> s3 [0, 65535] { R10094 += 1, R10017 += 1, R10018 += 1 };
  s0 -> s0 [0, 65535] { R10093 += 1, R10094 += 1 };
  s0 -> s4 [0, 65535] { R10094 += 1, R10018 += 1, R9973 += 1, R9974 += 1 };
  s0 -> s5 [66, 66] { R10094 += 1, R10018 += 1, R9974 += 1, R6637 += 1, R6638 += 1 };
  s0 -> s6 [66, 66] { R10094 += 1, R10018 += 1, R9974 += 1, R6638 += 1, R6639 += 1 };
  s0 -> s7 [66, 66] { R10094 += 1, R10018 += 1, R9974 += 1, R6638 += 1, R6639 += 1 };
  s0 -> s8 [66, 66] { R10094 += 1, R10018 += 1, R9974 += 1, R6637 += 1, R6638 += 1 };
  s0 -> s1 [67, 65535] { R10094 += 1, R10018 += 1, R9974 += 1, R6637 += 1, R6638 += 1 };
  s0 -> s2 [67, 65535] { R10094 += 1, R10018 += 1, R9974 += 1, R6638 += 1, R6639 += 1 };
  s1 -> s1 [0, 65] { R10094 += 1, R10018 += 1, R9974 += 1, R6637 += 1, R6638 += 1 };
  s1 -> s2 [0, 65] { R10094 += 1, R10018 += 1, R9974 += 1, R6638 += 1, R6639 += 1 };
  s1 -> s5 [66, 66] { R10094 += 1, R10018 += 1, R9974 += 1, R6637 += 1, R6638 += 1 };
  s1 -> s6 [66, 66] { R10094 += 1, R10018 += 1, R9974 += 1, R6638 += 1, R6639 += 1 };
  s1 -> s7 [66, 66] { R10094 += 1, R10018 += 1, R9974 += 1, R6638 += 1, R6639 += 1 };
  s1 -> s8 [66, 66] { R10094 += 1, R10018 += 1, R9974 += 1, R6637 += 1, R6638 += 1 };
  s1 -> s1 [67, 65535] { R10094 += 1, R10018 += 1, R9974 += 1, R6637 += 1, R6638 += 1 };
  s1 -> s2 [67, 65535] { R10094 += 1, R10018 += 1, R9974 += 1, R6638 += 1, R6639 += 1 };
  s2 -> s2 [0, 65] { R10094 += 1, R10018 += 1, R9974 += 1, R6638 += 1, R6639 += 1 };
  s2 -> s11 [0, 65535];
  s2 -> s2 [0, 65535] { R10094 += 1, R10018 += 1 };
  s2 -> s10 [0, 65535] { R10094 += 1 };
  s2 -> s6 [66, 66] { R10094 += 1, R10018 += 1, R9974 += 1, R6638 += 1, R6639 += 1 };
  s2 -> s7 [66, 66] { R10094 += 1, R10018 += 1, R9974 += 1, R6638 += 1, R6639 += 1 };
  s2 -> s2 [67, 65535] { R10094 += 1, R10018 += 1, R9974 += 1, R6638 += 1, R6639 += 1 };
  s3 -> s1 [0, 65] { R10094 += 1, R10018 += 1, R9974 += 1, R6637 += 1, R6638 += 1 };
  s3 -> s2 [0, 65] { R10094 += 1, R10018 += 1, R9974 += 1, R6638 += 1, R6639 += 1 };
  s3 -> s3 [0, 65535] { R10094 += 1, R10017 += 1, R10018 += 1 };
  s3 -> s4 [0, 65535] { R10094 += 1, R10018 += 1, R9973 += 1, R9974 += 1 };
  s3 -> s5 [66, 66] { R10094 += 1, R10018 += 1, R9974 += 1, R6637 += 1, R6638 += 1 };
  s3 -> s6 [66, 66] { R10094 += 1, R10018 += 1, R9974 += 1, R6638 += 1, R6639 += 1 };
  s3 -> s7 [66, 66] { R10094 += 1, R10018 += 1, R9974 += 1, R6638 += 1, R6639 += 1 };
  s3 -> s8 [66, 66] { R10094 += 1, R10018 += 1, R9974 += 1, R6637 += 1, R6638 += 1 };
  s3 -> s1 [67, 65535] { R10094 += 1, R10018 += 1, R9974 += 1, R6637 += 1, R6638 += 1 };
  s3 -> s2 [67, 65535] { R10094 += 1, R10018 += 1, R9974 += 1, R6638 += 1, R6639 += 1 };
  s4 -> s1 [0, 65] { R10094 += 1, R10018 += 1, R9974 += 1, R6637 += 1, R6638 += 1 };
  s4 -> s2 [0, 65] { R10094 += 1, R10018 += 1, R9974 += 1, R6638 += 1, R6639 += 1 };
  s4 -> s4 [0, 65535] { R10094 += 1, R10018 += 1, R9973 += 1, R9974 += 1 };
  s4 -> s5 [66, 66] { R10094 += 1, R10018 += 1, R9974 += 1, R6637 += 1, R6638 += 1 };
  s4 -> s6 [66, 66] { R10094 += 1, R10018 += 1, R9974 += 1, R6638 += 1, R6639 += 1 };
  s4 -> s7 [66, 66] { R10094 += 1, R10018 += 1, R9974 += 1, R6638 += 1, R6639 += 1 };
  s4 -> s8 [66, 66] { R10094 += 1, R10018 += 1, R9974 += 1, R6637 += 1, R6638 += 1 };
  s4 -> s1 [67, 65535] { R10094 += 1, R10018 += 1, R9974 += 1, R6637 += 1, R6638 += 1 };
  s4 -> s2 [67, 65535] { R10094 += 1, R10018 += 1, R9974 += 1, R6638 += 1, R6639 += 1 };
  s5 -> s5 [0, 65535] { R10094 += 1, R10018 += 1, R9974 += 1, R6637 += 1, R6638 += 1 };
  s5 -> s7 [0, 65535] { R10094 += 1, R10018 += 1, R9974 += 1, R6638 += 1, R6639 += 1 };
  s6 -> s6 [0, 65535] { R10094 += 1, R10018 += 1 };
  s6 -> s10 [0, 65535] { R10094 += 1 };
  s6 -> s11 [0, 65535];
  s7 -> s7 [0, 65535] { R10094 += 1, R10018 += 1, R9974 += 1, R6638 += 1, R6639 += 1 };
  s7 -> s9 [0, 65535] { R10094 += 1, R10018 += 1 };
  s7 -> s10 [0, 65535] { R10094 += 1 };
  s7 -> s11 [0, 65535];
  s9 -> s9 [0, 65535] { R10094 += 1, R10018 += 1 };
  s9 -> s10 [0, 65535] { R10094 += 1 };
  s9 -> s11 [0, 65535];
  s10 -> s10 [0, 65535] { R10094 += 1 };
  s10 -> s11 [0, 65535];
  s11 -> s11 [0, 65535];
  accepting s2, s9, s6, s7, s10, s11;
};
automaton value2_42 {
  init s0;
  s0 -> s1 [0, 65] { R10096 += 1, R10020 += 1, R9976 += 1, R8825 += 1, R8826 += 1 };
  s0 -> s2 [0, 65535] { R10096 += 1, R10020 += 1, R9975 += 1, R9976 += 1 };
  s0 -> s3 [0, 65535] { R10096 += 1, R10019 += 1, R10020 += 1 };
  s0 -> s0 [0, 65535] { R10095 += 1, R10096 += 1 };
  s0 -> s4 [66, 66] { R10096 += 1, R10020 += 1, R9976 += 1, R8825 += 1, R8826 += 1 };
  s0 -> s5 [66, 66] { R10096 += 1, R10020 += 1, R9976 += 1, R8825 += 1, R8826 += 1 };
  s0 -> s1 [67, 65535] { R10096 += 1, R10020 += 1, R9976 += 1, R8825 += 1, R8826 += 1 };
  s1 -> s1 [0, 65] { R10096 += 1, R10020 += 1, R9976 += 1, R8825 += 1, R8826 += 1 };
  s1 -> s1 [0, 65535] { R10096 += 1, R10020 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R10096 += 1 };
  s1 -> s4 [66, 66] { R10096 += 1, R10020 += 1, R9976 += 1, R8825 += 1, R8826 += 1 };
  s1 -> s5 [66, 66] { R10096 += 1, R10020 += 1, R9976 += 1, R8825 += 1, R8826 += 1 };
  s1 -> s1 [67, 65535] { R10096 += 1, R10020 += 1, R9976 += 1, R8825 += 1, R8826 += 1 };
  s2 -> s1 [0, 65] { R10096 += 1, R10020 += 1, R9976 += 1, R8825 += 1, R8826 += 1 };
  s2 -> s2 [0, 65535] { R10096 += 1, R10020 += 1, R9975 += 1, R9976 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s7 [0, 65535] { R10096 += 1 };
  s2 -> s4 [66, 66] { R10096 += 1, R10020 += 1, R9976 += 1, R8825 += 1, R8826 += 1 };
  s2 -> s5 [66, 66] { R10096 += 1, R10020 += 1, R9976 += 1, R8825 += 1, R8826 += 1 };
  s2 -> s1 [67, 65535] { R10096 += 1, R10020 += 1, R9976 += 1, R8825 += 1, R8826 += 1 };
  s3 -> s1 [0, 65] { R10096 += 1, R10020 += 1, R9976 += 1, R8825 += 1, R8826 += 1 };
  s3 -> s2 [0, 65535] { R10096 += 1, R10020 += 1, R9975 += 1, R9976 += 1 };
  s3 -> s3 [0, 65535] { R10096 += 1, R10019 += 1, R10020 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s4 [66, 66] { R10096 += 1, R10020 += 1, R9976 += 1, R8825 += 1, R8826 += 1 };
  s3 -> s5 [66, 66] { R10096 += 1, R10020 += 1, R9976 += 1, R8825 += 1, R8826 += 1 };
  s3 -> s1 [67, 65535] { R10096 += 1, R10020 += 1, R9976 += 1, R8825 += 1, R8826 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R10096 += 1, R10020 += 1, R9976 += 1, R8825 += 1, R8826 += 1 };
  s4 -> s8 [0, 65535] { R10096 += 1, R10020 += 1 };
  s4 -> s7 [0, 65535] { R10096 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R10096 += 1 };
  s5 -> s5 [0, 65535] { R10096 += 1, R10020 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R10096 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R10096 += 1, R10020 += 1 };
  s8 -> s7 [0, 65535] { R10096 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton value2_43 {
  init s0;
  s0 -> s1 [0, 65] { R10098 += 1, R10022 += 1, R9978 += 1, R9556 += 1, R9557 += 1 };
  s0 -> s2 [0, 65] { R10098 += 1, R10022 += 1, R9978 += 1, R9555 += 1, R9556 += 1 };
  s0 -> s3 [0, 65535] { R10098 += 1, R10021 += 1, R10022 += 1 };
  s0 -> s4 [0, 65535] { R10098 += 1, R10022 += 1, R9977 += 1, R9978 += 1 };
  s0 -> s0 [0, 65535] { R10097 += 1, R10098 += 1 };
  s0 -> s5 [66, 66] { R10098 += 1, R10022 += 1, R9978 += 1, R9555 += 1, R9556 += 1 };
  s0 -> s6 [66, 66] { R10098 += 1, R10022 += 1, R9978 += 1, R9556 += 1, R9557 += 1 };
  s0 -> s7 [66, 66] { R10098 += 1, R10022 += 1, R9978 += 1, R9555 += 1, R9556 += 1 };
  s0 -> s8 [66, 66] { R10098 += 1, R10022 += 1, R9978 += 1, R9556 += 1, R9557 += 1 };
  s0 -> s1 [67, 65535] { R10098 += 1, R10022 += 1, R9978 += 1, R9556 += 1, R9557 += 1 };
  s0 -> s2 [67, 65535] { R10098 += 1, R10022 += 1, R9978 += 1, R9555 += 1, R9556 += 1 };
  s1 -> s1 [0, 65] { R10098 += 1, R10022 += 1, R9978 += 1, R9556 += 1, R9557 += 1 };
  s1 -> s1 [0, 65535] { R10098 += 1, R10022 += 1 };
  s1 -> s10 [0, 65535];
  s1 -> s11 [0, 65535] { R10098 += 1 };
  s1 -> s6 [66, 66] { R10098 += 1, R10022 += 1, R9978 += 1, R9556 += 1, R9557 += 1 };
  s1 -> s8 [66, 66] { R10098 += 1, R10022 += 1, R9978 += 1, R9556 += 1, R9557 += 1 };
  s1 -> s1 [67, 65535] { R10098 += 1, R10022 += 1, R9978 += 1, R9556 += 1, R9557 += 1 };
  s2 -> s1 [0, 65] { R10098 += 1, R10022 += 1, R9978 += 1, R9556 += 1, R9557 += 1 };
  s2 -> s2 [0, 65] { R10098 += 1, R10022 += 1, R9978 += 1, R9555 += 1, R9556 += 1 };
  s2 -> s5 [66, 66] { R10098 += 1, R10022 += 1, R9978 += 1, R9555 += 1, R9556 += 1 };
  s2 -> s6 [66, 66] { R10098 += 1, R10022 += 1, R9978 += 1, R9556 += 1, R9557 += 1 };
  s2 -> s7 [66, 66] { R10098 += 1, R10022 += 1, R9978 += 1, R9555 += 1, R9556 += 1 };
  s2 -> s8 [66, 66] { R10098 += 1, R10022 += 1, R9978 += 1, R9556 += 1, R9557 += 1 };
  s2 -> s1 [67, 65535] { R10098 += 1, R10022 += 1, R9978 += 1, R9556 += 1, R9557 += 1 };
  s2 -> s2 [67, 65535] { R10098 += 1, R10022 += 1, R9978 += 1, R9555 += 1, R9556 += 1 };
  s3 -> s1 [0, 65] { R10098 += 1, R10022 += 1, R9978 += 1, R9556 += 1, R9557 += 1 };
  s3 -> s2 [0, 65] { R10098 += 1, R10022 += 1, R9978 += 1, R9555 += 1, R9556 += 1 };
  s3 -> s3 [0, 65535] { R10098 += 1, R10021 += 1, R10022 += 1 };
  s3 -> s4 [0, 65535] { R10098 += 1, R10022 += 1, R9977 += 1, R9978 += 1 };
  s3 -> s5 [66, 66] { R10098 += 1, R10022 += 1, R9978 += 1, R9555 += 1, R9556 += 1 };
  s3 -> s6 [66, 66] { R10098 += 1, R10022 += 1, R9978 += 1, R9556 += 1, R9557 += 1 };
  s3 -> s7 [66, 66] { R10098 += 1, R10022 += 1, R9978 += 1, R9555 += 1, R9556 += 1 };
  s3 -> s8 [66, 66] { R10098 += 1, R10022 += 1, R9978 += 1, R9556 += 1, R9557 += 1 };
  s3 -> s1 [67, 65535] { R10098 += 1, R10022 += 1, R9978 += 1, R9556 += 1, R9557 += 1 };
  s3 -> s2 [67, 65535] { R10098 += 1, R10022 += 1, R9978 += 1, R9555 += 1, R9556 += 1 };
  s4 -> s1 [0, 65] { R10098 += 1, R10022 += 1, R9978 += 1, R9556 += 1, R9557 += 1 };
  s4 -> s2 [0, 65] { R10098 += 1, R10022 += 1, R9978 += 1, R9555 += 1, R9556 += 1 };
  s4 -> s4 [0, 65535] { R10098 += 1, R10022 += 1, R9977 += 1, R9978 += 1 };
  s4 -> s5 [66, 66] { R10098 += 1, R10022 += 1, R9978 += 1, R9555 += 1, R9556 += 1 };
  s4 -> s6 [66, 66] { R10098 += 1, R10022 += 1, R9978 += 1, R9556 += 1, R9557 += 1 };
  s4 -> s7 [66, 66] { R10098 += 1, R10022 += 1, R9978 += 1, R9555 += 1, R9556 += 1 };
  s4 -> s8 [66, 66] { R10098 += 1, R10022 += 1, R9978 += 1, R9556 += 1, R9557 += 1 };
  s4 -> s1 [67, 65535] { R10098 += 1, R10022 += 1, R9978 += 1, R9556 += 1, R9557 += 1 };
  s4 -> s2 [67, 65535] { R10098 += 1, R10022 += 1, R9978 += 1, R9555 += 1, R9556 += 1 };
  s6 -> s10 [0, 65535];
  s6 -> s6 [0, 65535] { R10098 += 1, R10022 += 1 };
  s6 -> s11 [0, 65535] { R10098 += 1 };
  s7 -> s7 [0, 65535] { R10098 += 1, R10022 += 1, R9978 += 1, R9555 += 1, R9556 += 1 };
  s7 -> s8 [0, 65535] { R10098 += 1, R10022 += 1, R9978 += 1, R9556 += 1, R9557 += 1 };
  s8 -> s9 [0, 65535] { R10098 += 1, R10022 += 1 };
  s8 -> s10 [0, 65535];
  s8 -> s11 [0, 65535] { R10098 += 1 };
  s8 -> s8 [0, 65535] { R10098 += 1, R10022 += 1, R9978 += 1, R9556 += 1, R9557 += 1 };
  s9 -> s9 [0, 65535] { R10098 += 1, R10022 += 1 };
  s9 -> s10 [0, 65535];
  s9 -> s11 [0, 65535] { R10098 += 1 };
  s10 -> s10 [0, 65535];
  s11 -> s10 [0, 65535];
  s11 -> s11 [0, 65535] { R10098 += 1 };
  accepting s8, s9, s6, s1, s10, s11;
};
automaton value2_44 {
  init s0;
  s0 -> s1 [0, 65] { R10100 += 1, R10024 += 1, R9980 += 1, R9922 += 1 };
  s0 -> s2 [0, 65] { R10100 += 1, R10024 += 1, R9980 += 1, R9921 += 1, R9922 += 1 };
  s0 -> s0 [0, 65535] { R10099 += 1, R10100 += 1 };
  s0 -> s3 [0, 65535] { R10100 += 1, R10024 += 1, R9979 += 1, R9980 += 1 };
  s0 -> s4 [0, 65535] { R10100 += 1, R10023 += 1, R10024 += 1 };
  s0 -> s5 [66, 66] { R10100 += 1, R10024 += 1, R9980 += 1, R9922 += 1 };
  s0 -> s6 [66, 66] { R10100 += 1, R10024 += 1, R9980 += 1, R9921 += 1, R9922 += 1 };
  s0 -> s7 [66, 66] { R10100 += 1, R10024 += 1, R9980 += 1, R9922 += 1 };
  s0 -> s8 [66, 66] { R10100 += 1, R10024 += 1, R9980 += 1, R9921 += 1, R9922 += 1 };
  s0 -> s1 [67, 69] { R10100 += 1, R10024 += 1, R9980 += 1, R9922 += 1 };
  s0 -> s2 [67, 65535] { R10100 += 1, R10024 += 1, R9980 += 1, R9921 += 1, R9922 += 1 };
  s0 -> s9 [70, 70] { R10100 += 1, R10024 += 1, R9980 += 1, R9922 += 1 };
  s0 -> s1 [84, 65535] { R10100 += 1, R10024 += 1, R9980 += 1, R9922 += 1 };
  s1 -> s1 [0, 65] { R10100 += 1, R10024 += 1, R9980 += 1, R9922 += 1 };
  s1 -> s5 [66, 66] { R10100 += 1, R10024 += 1, R9980 += 1 };
  s1 -> s7 [66, 66] { R10100 += 1, R10024 += 1, R9980 += 1 };
  s1 -> s1 [67, 69] { R10100 += 1, R10024 += 1, R9980 += 1, R9922 += 1 };
  s1 -> s1 [67, 65535] { R10100 += 1, R10024 += 1, R9980 += 1 };
  s1 -> s9 [70, 70] { R10100 += 1, R10024 += 1, R9980 += 1, R9922 += 1 };
  s1 -> s1 [84, 65535] { R10100 += 1, R10024 += 1, R9980 += 1, R9922 += 1 };
  s2 -> s1 [0, 65] { R10100 += 1, R10024 += 1, R9980 += 1, R9922 += 1 };
  s2 -> s2 [0, 65] { R10100 += 1, R10024 += 1, R9980 += 1, R9921 += 1, R9922 += 1 };
  s2 -> s5 [66, 66] { R10100 += 1, R10024 += 1, R9980 += 1, R9922 += 1 };
  s2 -> s6 [66, 66] { R10100 += 1, R10024 += 1, R9980 += 1, R9921 += 1, R9922 += 1 };
  s2 -> s7 [66, 66] { R10100 += 1, R10024 += 1, R9980 += 1, R9922 += 1 };
  s2 -> s8 [66, 66] { R10100 += 1, R10024 += 1, R9980 += 1, R9921 += 1, R9922 += 1 };
  s2 -> s1 [67, 69] { R10100 += 1, R10024 += 1, R9980 += 1, R9922 += 1 };
  s2 -> s2 [67, 65535] { R10100 += 1, R10024 += 1, R9980 += 1, R9921 += 1, R9922 += 1 };
  s2 -> s9 [70, 70] { R10100 += 1, R10024 += 1, R9980 += 1, R9922 += 1 };
  s2 -> s1 [84, 65535] { R10100 += 1, R10024 += 1, R9980 += 1, R9922 += 1 };
  s3 -> s1 [0, 65] { R10100 += 1, R10024 += 1, R9980 += 1, R9922 += 1 };
  s3 -> s2 [0, 65] { R10100 += 1, R10024 += 1, R9980 += 1, R9921 += 1, R9922 += 1 };
  s3 -> s3 [0, 65535] { R10100 += 1, R10024 += 1, R9979 += 1, R9980 += 1 };
  s3 -> s5 [66, 66] { R10100 += 1, R10024 += 1, R9980 += 1, R9922 += 1 };
  s3 -> s6 [66, 66] { R10100 += 1, R10024 += 1, R9980 += 1, R9921 += 1, R9922 += 1 };
  s3 -> s7 [66, 66] { R10100 += 1, R10024 += 1, R9980 += 1, R9922 += 1 };
  s3 -> s8 [66, 66] { R10100 += 1, R10024 += 1, R9980 += 1, R9921 += 1, R9922 += 1 };
  s3 -> s1 [67, 69] { R10100 += 1, R10024 += 1, R9980 += 1, R9922 += 1 };
  s3 -> s2 [67, 65535] { R10100 += 1, R10024 += 1, R9980 += 1, R9921 += 1, R9922 += 1 };
  s3 -> s9 [70, 70] { R10100 += 1, R10024 += 1, R9980 += 1, R9922 += 1 };
  s3 -> s1 [84, 65535] { R10100 += 1, R10024 += 1, R9980 += 1, R9922 += 1 };
  s4 -> s1 [0, 65] { R10100 += 1, R10024 += 1, R9980 += 1, R9922 += 1 };
  s4 -> s2 [0, 65] { R10100 += 1, R10024 += 1, R9980 += 1, R9921 += 1, R9922 += 1 };
  s4 -> s3 [0, 65535] { R10100 += 1, R10024 += 1, R9979 += 1, R9980 += 1 };
  s4 -> s4 [0, 65535] { R10100 += 1, R10023 += 1, R10024 += 1 };
  s4 -> s5 [66, 66] { R10100 += 1, R10024 += 1, R9980 += 1, R9922 += 1 };
  s4 -> s6 [66, 66] { R10100 += 1, R10024 += 1, R9980 += 1, R9921 += 1, R9922 += 1 };
  s4 -> s7 [66, 66] { R10100 += 1, R10024 += 1, R9980 += 1, R9922 += 1 };
  s4 -> s8 [66, 66] { R10100 += 1, R10024 += 1, R9980 += 1, R9921 += 1, R9922 += 1 };
  s4 -> s1 [67, 69] { R10100 += 1, R10024 += 1, R9980 += 1, R9922 += 1 };
  s4 -> s2 [67, 65535] { R10100 += 1, R10024 += 1, R9980 += 1, R9921 += 1, R9922 += 1 };
  s4 -> s9 [70, 70] { R10100 += 1, R10024 += 1, R9980 += 1, R9922 += 1 };
  s4 -> s1 [84, 65535] { R10100 += 1, R10024 += 1, R9980 += 1, R9922 += 1 };
  s6 -> s7 [0, 69] { R10100 += 1, R10024 += 1, R9980 += 1, R9922 += 1 };
  s6 -> s6 [0, 65535] { R10100 += 1, R10024 += 1, R9980 += 1, R9921 += 1, R9922 += 1 };
  s6 -> s12 [70, 70] { R10100 += 1, R10024 += 1, R9980 += 1, R9922 += 1 };
  s6 -> s7 [84, 65535] { R10100 += 1, R10024 += 1, R9980 += 1, R9922 += 1 };
  s7 -> s7 [0, 69] { R10100 += 1, R10024 += 1, R9980 += 1, R9922 += 1 };
  s7 -> s7 [0, 65535] { R10100 += 1, R10024 += 1, R9980 += 1 };
  s7 -> s12 [70, 70] { R10100 += 1, R10024 += 1, R9980 += 1, R9922 += 1 };
  s7 -> s7 [84, 65535] { R10100 += 1, R10024 += 1, R9980 += 1, R9922 += 1 };
  s9 -> s9 [0, 65] { R10100 += 1, R10024 += 1, R9980 += 1, R9922 += 1 };
  s9 -> s10 [0, 65535];
  s9 -> s11 [0, 65535] { R10100 += 1 };
  s9 -> s9 [0, 65535] { R10100 += 1, R10024 += 1 };
  s9 -> s12 [66, 66] { R10100 += 1, R10024 += 1, R9980 += 1 };
  s9 -> s13 [66, 66] { R10100 += 1, R10024 += 1, R9980 += 1 };
  s9 -> s9 [67, 70] { R10100 += 1, R10024 += 1, R9980 += 1, R9922 += 1 };
  s9 -> s9 [67, 65535] { R10100 += 1, R10024 += 1, R9980 += 1 };
  s9 -> s9 [84, 65535] { R10100 += 1, R10024 += 1, R9980 += 1, R9922 += 1 };
  s10 -> s10 [0, 65535];
  s11 -> s10 [0, 65535];
  s11 -> s11 [0, 65535] { R10100 += 1 };
  s12 -> s12 [0, 70] { R10100 += 1, R10024 += 1, R9980 += 1, R9922 += 1 };
  s12 -> s14 [0, 65535] { R10100 += 1, R10024 += 1 };
  s12 -> s12 [0, 65535] { R10100 += 1, R10024 += 1, R9980 += 1 };
  s12 -> s10 [0, 65535];
  s12 -> s11 [0, 65535] { R10100 += 1 };
  s12 -> s12 [84, 65535] { R10100 += 1, R10024 += 1, R9980 += 1, R9922 += 1 };
  s13 -> s10 [0, 65535];
  s13 -> s11 [0, 65535] { R10100 += 1 };
  s13 -> s13 [0, 65535] { R10100 += 1, R10024 += 1 };
  s14 -> s14 [0, 65535] { R10100 += 1, R10024 += 1 };
  s14 -> s10 [0, 65535];
  s14 -> s11 [0, 65535] { R10100 += 1 };
  accepting s12, s13, s9, s14, s10, s11;
};
};
synchronised {  // Automata constraining P37
automaton P37_0 {
  init s0;
  s0 -> s1 [9, 9];
  accepting s1;
};
};
synchronised {  // Automata constraining P38
automaton P38_0 {
  init s0;
  s0 -> s1 [10, 10];
  accepting s1;
};
};
synchronised {  // Automata constraining P36
automaton P36_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
constraint R1 = R9940 && R2 = R10024 && R3 - R10100 = 1 && R23 - R10024 = -1 && R24 = R10024 && R25 - R10024 = -1 && R26 = R10024 && R27 = 0 && R28 = 1 && R29 = 0 && R30 = 1 && R31 = R10100 && R32 - R10100 = 1 && R33 = R10100 && R34 - R10100 = 1 && R35 = 0 && R36 = 1 && R37 = 0 && R38 = 1 && R49 + R78 + R77 + -1*R8828 + -1*R8826 - R64 = 0 && R63 + R8827 + R8825 = 0 && R9939 = 0 && R9965 = 0 && R9966 = 0 && R9973 = 0 && R9974 = 0 && R9977 = 0 && R9978 = 0 && R9979 = 0 && R9980 = 0 && R9981 = 0 && R9982 = R10024 && R9983 = 0 && R9984 = R10024 && R9985 = 0 && R9986 = R10024 && R9987 = 0 && R9988 = R10024 && R9989 = 0 && R9990 = R10024 && R9991 = 0 && R9992 = R10024 && R9993 = 0 && R9994 = R10024 && R9995 = 0 && R9996 = R10024 && R9997 = 0 && R9998 = R10024 && R9999 = 0 && R10000 = R10024 && R10001 = 0 && R10002 = R10024 && R10003 = 0 && R10004 = R10024 && R10005 = 0 && R10006 = R10024 && R10007 = 0 && R10008 = R10024 && R10009 = 0 && R10010 = R10024 && R10011 = 0 && R10012 = R10024 && R10013 = 0 && R10014 = R10024 && R10015 = 0 && R10016 = R10024 && R10017 = 0 && R10018 = R10024 && R10019 = 0 && R10020 = R10024 && R10021 = 0 && R10022 = R10024 && R10023 = 0 && R10025 = 0 && R10026 = R10100 && R10027 = 0 && R10028 = R10100 && R10029 = 0 && R10030 = R10100 && R10031 = 0 && R10032 = R10100 && R10033 = 0 && R10034 = R10100 && R10035 = 0 && R10036 = R10100 && R10037 = 0 && R10038 = R10100 && R10039 = 0 && R10040 = R10100 && R10041 = 0 && R10042 = R10100 && R10043 = 0 && R10044 = R10100 && R10045 = 0 && R10046 = R10100 && R10047 = 0 && R10048 = R10100 && R10049 = 0 && R10050 = R10100 && R10051 = 0 && R10052 = R10100 && R10053 = 0 && R10054 = R10100 && R10055 = 0 && R10056 = R10100 && R10057 = 0 && R10058 = R10100 && R10059 = 0 && R10060 = R10100 && R10061 = 0 && R10062 = R10100 && R10063 = 0 && R10064 = R10100 && R10065 = 0 && R10066 = R10100 && R10067 = 0 && R10068 = R10100 && R10069 = 0 && R10070 = R10100 && R10071 = 0 && R10072 = R10100 && R10073 = 0 && R10074 = R10100 && R10075 = 0 && R10076 = R10100 && R10077 = 0 && R10078 = R10100 && R10079 = 0 && R10080 = R10100 && R10081 = 0 && R10082 = R10100 && R10083 = 0 && R10084 = R10100 && R10085 = 0 && R10086 = R10100 && R10087 = 0 && R10088 = R10100 && R10089 = 0 && R10090 = R10100 && R10091 = 0 && R10092 = R10100 && R10093 = 0 && R10094 = R10100 && R10095 = 0 && R10096 = R10100 && R10097 = 0 && R10098 = R10100 && R10099 = 0 && R11 < 1 && R14 < 1 && R17 < 1 && R51 + R80 + R79 < 1 && -1*R8828 + -1*R8826 - R64 < 1 && -1 < R9940 && 0 < R10024 && -1 < R10100 && (R59 + R6642 + R6639 != 0 || ((R53 + R83 + R81 != 0 || R54 + R84 + R82 + -1*R8828 + -1*R8826 - R64 = 0 || R64 + R8828 + R8826 < 1) && (R53 + R83 + R81 = 0 || R64 + R8828 + R8826 < 1))) && (R59 + R6642 + R6639 != 0 || ((R57 + R6640 + R6637 != 0 || R58 + R6641 + R6638 + -1*R8828 + -1*R8826 - R64 = 0 || R64 + R8828 + R8826 < 1) && (R57 + R6640 + R6637 = 0 || R64 + R8828 + R8826 < 1))) && (R9925 != 0 || R9926 = R9940 || (R20 = 0 && R9940 = 0)) && (R9927 != 0 || R9928 = R9940 || (R20 = 0 && R9940 = 0)) && (R9929 != 0 || R9930 = R9940 || (R20 = 0 && R9940 = 0)) && (R9931 != 0 || R9932 = R9940 || (R20 = 0 && R9940 = 0)) && (R9933 != 0 || R9934 = R9940 || (R20 = 0 && R9940 = 0)) && (R9935 != 0 || R9936 = R9940 || (R20 = 0 && R9940 = 0)) && (R9937 != 0 || R9938 = R9940 || (R20 = 0 && R9940 = 0)) && (R9941 != 0 || R9940 = R9942 || (R20 = 0 && R9940 = 0)) && (R9943 != 0 || R9940 = R9944 || (R20 = 0 && R9940 = 0)) && (R21 = 0 || (R9963 = 0 && R9964 = 0)) && (R21 = 0 || (R9967 = 0 && R9968 = 0)) && (R21 = 0 || (R9969 = 0 && R9970 = 0)) && (R21 = 0 || (R9971 = 0 && R9972 = 0)) && (R21 = 0 || (R9975 = 0 && R9976 = 0)) && (R22 = 0 || (R9945 = 0 && R9946 = 0)) && (R22 = 0 || (R9947 = 0 && R9948 = 0)) && (R22 = 0 || (R9949 = 0 && R9950 = 0)) && (R22 = 0 || (R9951 = 0 && R9952 = 0)) && (R22 = 0 || (R9953 = 0 && R9954 = 0)) && (R22 = 0 || (R9955 = 0 && R9956 = 0)) && (R22 = 0 || (R9957 = 0 && R9958 = 0)) && (R22 = 0 || (R9959 = 0 && R9960 = 0)) && (R22 = 0 || (R9961 = 0 && R9962 = 0)) && (R59 + R6642 + R6639 = 0 || (R53 + R83 + R81 = 0 && R54 + R84 + R82 + -1*R8828 + -1*R8826 - R64 = 0)) && (R59 + R6642 + R6639 = 0 || (R57 + R6640 + R6637 = 0 && R58 + R6641 + R6638 + -1*R8828 + -1*R8826 - R64 = 0)) && (R69 + R9560 + R9557 = 0 || (R67 + R9558 + R9555 = 0 && R68 + R9559 + R9556 = 0)) && (R69 + R9560 + R9557 = 0 || (R73 + R9923 + R9921 = 0 && R74 + R9924 + R9922 = 0)) && (R9925 = 0 || (R20 = 0 && R9940 = 0)) && (R9927 = 0 || (R20 = 0 && R9940 = 0)) && (R9929 = 0 || (R20 = 0 && R9940 = 0)) && (R9931 = 0 || (R20 = 0 && R9940 = 0)) && (R9933 = 0 || (R20 = 0 && R9940 = 0)) && (R9935 = 0 || (R20 = 0 && R9940 = 0)) && (R9937 = 0 || (R20 = 0 && R9940 = 0)) && (R9941 = 0 || (R20 = 0 && R9940 = 0)) && (R9943 = 0 || (R20 = 0 && R9940 = 0));
// End of Parikh automata intersection problem
