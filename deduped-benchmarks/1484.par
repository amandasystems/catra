// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R10281, R10282, R10283, R10284, R10285, R10286, R10287, R10288, R10289, R10290, R10291, R10292, R10293, R10294, R10295, R10296, R10297, R10298, R10299, R10300, R10301, R10302, R10303, R10304, R10305, R10306, R10307, R10308, R10309, R10310, R10311, R10312, R10313, R10314, R10315, R10316, R10317, R10318, R10319, R10320, R10321, R10322, R10323, R10324, R10325, R10326, R10327, R10328, R10329, R10330, R10331, R10332, R10333, R10334, R10335, R10336, R10337, R10338, R10339, R10340, R10341, R10342, R10343, R10344, R10345, R10346, R10347, R10348, R10349, R10350, R10351, R10352, R10353, R10354, R10355, R10356, R10357, R10358, R10359, R10360, R10361, R10362, R10363, R10364, R10365, R10366, R10367, R10368, R10369, R10370, R10371, R10372, R10373, R10374, R10375, R10376, R10377, R10378, R10379, R10380, R10381, R10382, R10383, R10384, R10385, R10386, R10387, R10388, R10389, R10390, R10391, R10392, R10393, R10394, R10395, R10396, R10397, R10398, R10399, R10400, R10401, R10402, R10403, R10404, R10405, R10406, R10407, R10408, R10409, R10410, R10411, R10412, R10413, R10414, R10415, R10416, R10417, R10418, R10419, R10420, R10421, R10422, R10423, R10424, R10425, R10426, R10427, R10428, R10429, R10430, R10431, R10432, R10433, R10434, R10435, R10436, R10437, R10438, R10439, R10440, R10441, R10442, R10443, R10444, R10445, R10446, R10447, R10448, R10449, R10450, R10451, R10452, R10453, R10454, R10455, R10456, R10457, R10458, R10459, R10460, R10461, R10462, R10463, R10464, R10465, R10466, R11, R14, R17, R2, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R31, R32, R33, R34, R35, R36, R37, R38, R4, R49, R5, R51, R53, R54, R57, R58, R59, R6, R63, R64, R6637, R6638, R6639, R6640, R6641, R6642, R67, R68, R69, R7, R73, R74, R77, R78, R79, R80, R81, R82, R83, R84, R8825, R8826, R8827, R8828;
synchronised {  // Automata constraining P9
automaton P9_0 {
  init s0;
  s0 -> s1 [98, 98];
  accepting s1;
};
};
synchronised {  // Automata constraining P51
automaton P51_0 {
  init s0;
  s0 -> s1 [102, 102];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R17 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s0 [0, 65535] { R31 += 1, R32 += 1 };
  s0 -> s1 [13, 13] { R32 += 1 };
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value2_4 {
  init s0;
  s0 -> s0 [0, 65535] { R33 += 1, R34 += 1 };
  s0 -> s1 [0, 65535] { R34 += 1, R6 += 1 };
  s1 -> s1 [0, 65535] { R34 += 1, R6 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 8] { R36 += 1 };
  s0 -> s0 [0, 65535] { R35 += 1, R36 += 1 };
  s0 -> s2 [9, 13] { R36 += 1 };
  s0 -> s1 [14, 31] { R36 += 1 };
  s0 -> s2 [32, 32] { R36 += 1 };
  s0 -> s1 [33, 65535] { R36 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R36 += 1 };
  s2 -> s1 [0, 65535] { R36 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 65535] { R38 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R37 += 1, R38 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R38 += 1, R7 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 64] { R10392 += 1 };
  s0 -> s0 [0, 65535] { R10391 += 1, R10392 += 1 };
  s0 -> s2 [66, 66] { R10392 += 1 };
  s0 -> s1 [67, 65535] { R10392 += 1 };
  s1 -> s1 [0, 64] { R10392 += 1 };
  s1 -> s2 [66, 66] { R10392 += 1 };
  s1 -> s1 [67, 65535] { R10392 += 1 };
  s2 -> s2 [0, 64] { R10392 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [66, 65535] { R10392 += 1 };
  accepting s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R10394 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R10393 += 1, R10394 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R10394 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 65] { R10396 += 1 };
  s0 -> s2 [0, 65535] { R10396 += 1, R14 += 1 };
  s0 -> s0 [0, 65535] { R10395 += 1, R10396 += 1 };
  s0 -> s3 [66, 66] { R10396 += 1 };
  s0 -> s1 [67, 65535] { R10396 += 1 };
  s1 -> s1 [0, 65] { R10396 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [66, 66] { R10396 += 1 };
  s1 -> s1 [67, 65535] { R10396 += 1 };
  s2 -> s1 [0, 65] { R10396 += 1 };
  s2 -> s2 [0, 65535] { R10396 += 1, R14 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [66, 66] { R10396 += 1 };
  s2 -> s1 [67, 65535] { R10396 += 1 };
  s3 -> s3 [0, 65535] { R10396 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 8] { R10398 += 1, R24 += 1 };
  s0 -> s2 [0, 65535] { R10398 += 1, R23 += 1, R24 += 1 };
  s0 -> s0 [0, 65535] { R10397 += 1, R10398 += 1 };
  s0 -> s3 [9, 13] { R10398 += 1, R24 += 1 };
  s0 -> s1 [14, 31] { R10398 += 1, R24 += 1 };
  s0 -> s3 [32, 32] { R10398 += 1, R24 += 1 };
  s0 -> s1 [33, 65535] { R10398 += 1, R24 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R10398 += 1 };
  s1 -> s1 [0, 65535] { R10398 += 1, R24 += 1 };
  s2 -> s1 [0, 8] { R10398 += 1, R24 += 1 };
  s2 -> s2 [0, 65535] { R10398 += 1, R23 += 1, R24 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R10398 += 1, R24 += 1 };
  s2 -> s1 [14, 31] { R10398 += 1, R24 += 1 };
  s2 -> s3 [32, 32] { R10398 += 1, R24 += 1 };
  s2 -> s1 [33, 65535] { R10398 += 1, R24 += 1 };
  s3 -> s1 [0, 65535] { R10398 += 1, R24 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10398 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s0 [0, 65535] { R10399 += 1, R10400 += 1 };
  s0 -> s1 [0, 65535] { R10400 += 1, R25 += 1, R26 += 1 };
  s0 -> s2 [0, 65535] { R10400 += 1, R26 += 1, R4 += 1 };
  s1 -> s1 [0, 65535] { R10400 += 1, R25 += 1, R26 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R10400 += 1, R26 += 1, R4 += 1 };
  s2 -> s3 [0, 65535] { R10400 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10400 += 1, R26 += 1, R4 += 1 };
  s3 -> s3 [0, 65535] { R10400 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 8] { R10402 += 1, R28 += 1 };
  s0 -> s0 [0, 65535] { R10401 += 1, R10402 += 1 };
  s0 -> s2 [0, 65535] { R10402 += 1, R27 += 1, R28 += 1 };
  s0 -> s3 [9, 13] { R10402 += 1, R28 += 1 };
  s0 -> s1 [14, 31] { R10402 += 1, R28 += 1 };
  s0 -> s3 [32, 32] { R10402 += 1, R28 += 1 };
  s0 -> s1 [33, 65535] { R10402 += 1, R28 += 1 };
  s1 -> s5 [0, 65535] { R10402 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R10402 += 1, R28 += 1 };
  s2 -> s1 [0, 8] { R10402 += 1, R28 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10402 += 1, R27 += 1, R28 += 1 };
  s2 -> s3 [9, 13] { R10402 += 1, R28 += 1 };
  s2 -> s1 [14, 31] { R10402 += 1, R28 += 1 };
  s2 -> s3 [32, 32] { R10402 += 1, R28 += 1 };
  s2 -> s1 [33, 65535] { R10402 += 1, R28 += 1 };
  s3 -> s1 [0, 65535] { R10402 += 1, R28 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10402 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 65535] { R10404 += 1, R29 += 1, R30 += 1 };
  s0 -> s0 [0, 65535] { R10403 += 1, R10404 += 1 };
  s0 -> s2 [0, 65535] { R10404 += 1, R30 += 1, R5 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R10404 += 1, R29 += 1, R30 += 1 };
  s1 -> s2 [0, 65535] { R10404 += 1, R30 += 1, R5 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R10404 += 1 };
  s2 -> s2 [0, 65535] { R10404 += 1, R30 += 1, R5 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10404 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 65535] { R10406 += 1, R10312 += 1, R22 += 1 };
  s0 -> s0 [0, 65535] { R10405 += 1, R10406 += 1 };
  s0 -> s2 [0, 65535] { R10406 += 1, R10311 += 1, R10312 += 1 };
  s1 -> s1 [0, 65535] { R10406 += 1, R10312 += 1, R22 += 1 };
  s1 -> s4 [0, 65535] { R10406 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10406 += 1, R10312 += 1, R22 += 1 };
  s2 -> s2 [0, 65535] { R10406 += 1, R10311 += 1, R10312 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10406 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 65] { R10408 += 1, R10314 += 1 };
  s0 -> s0 [0, 65535] { R10407 += 1, R10408 += 1 };
  s0 -> s2 [0, 65535] { R10408 += 1, R10313 += 1, R10314 += 1 };
  s0 -> s3 [66, 66] { R10408 += 1, R10314 += 1 };
  s0 -> s4 [66, 66] { R10408 += 1, R10314 += 1 };
  s0 -> s1 [71, 65535] { R10408 += 1, R10314 += 1 };
  s1 -> s1 [0, 65] { R10408 += 1, R10314 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10408 += 1 };
  s1 -> s3 [66, 66] { R10408 += 1, R10314 += 1 };
  s1 -> s4 [66, 66] { R10408 += 1, R10314 += 1 };
  s1 -> s1 [71, 65535] { R10408 += 1, R10314 += 1 };
  s2 -> s1 [0, 65] { R10408 += 1, R10314 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10408 += 1, R10313 += 1, R10314 += 1 };
  s2 -> s3 [66, 66] { R10408 += 1, R10314 += 1 };
  s2 -> s4 [66, 66] { R10408 += 1, R10314 += 1 };
  s2 -> s1 [71, 65535] { R10408 += 1, R10314 += 1 };
  s3 -> s3 [0, 66] { R10408 += 1, R10314 += 1 };
  s3 -> s3 [0, 65535] { R10408 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [71, 65535] { R10408 += 1, R10314 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10408 += 1 };
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 65] { R10410 += 1, R10316 += 1, R49 += 1 };
  s0 -> s2 [0, 65535] { R10410 += 1, R10315 += 1, R10316 += 1 };
  s0 -> s0 [0, 65535] { R10409 += 1, R10410 += 1 };
  s0 -> s3 [66, 66] { R10410 += 1, R10316 += 1, R49 += 1 };
  s0 -> s4 [66, 66] { R10410 += 1, R10316 += 1, R49 += 1 };
  s0 -> s1 [67, 65535] { R10410 += 1, R10316 += 1, R49 += 1 };
  s1 -> s1 [0, 65] { R10410 += 1, R10316 += 1, R49 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10410 += 1 };
  s1 -> s3 [66, 66] { R10410 += 1, R10316 += 1, R49 += 1 };
  s1 -> s4 [66, 66] { R10410 += 1, R10316 += 1, R49 += 1 };
  s1 -> s1 [67, 65535] { R10410 += 1, R10316 += 1, R49 += 1 };
  s2 -> s1 [0, 65] { R10410 += 1, R10316 += 1, R49 += 1 };
  s2 -> s2 [0, 65535] { R10410 += 1, R10315 += 1, R10316 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [66, 66] { R10410 += 1, R10316 += 1, R49 += 1 };
  s2 -> s4 [66, 66] { R10410 += 1, R10316 += 1, R49 += 1 };
  s2 -> s1 [67, 65535] { R10410 += 1, R10316 += 1, R49 += 1 };
  s3 -> s3 [0, 65535] { R10410 += 1, R10316 += 1, R49 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R10410 += 1 };
  s4 -> s4 [0, 65535] { R10410 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10410 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 65] { R10412 += 1, R10318 += 1, R51 += 1 };
  s0 -> s2 [0, 65535] { R10412 += 1, R10317 += 1, R10318 += 1 };
  s0 -> s0 [0, 65535] { R10411 += 1, R10412 += 1 };
  s0 -> s3 [66, 66] { R10412 += 1, R10318 += 1, R51 += 1 };
  s0 -> s4 [66, 66] { R10412 += 1, R10318 += 1, R51 += 1 };
  s0 -> s1 [67, 65535] { R10412 += 1, R10318 += 1, R51 += 1 };
  s1 -> s1 [0, 65] { R10412 += 1, R10318 += 1, R51 += 1 };
  s1 -> s1 [0, 65535] { R10412 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [66, 66] { R10412 += 1, R10318 += 1, R51 += 1 };
  s1 -> s4 [66, 66] { R10412 += 1, R10318 += 1, R51 += 1 };
  s1 -> s1 [67, 65535] { R10412 += 1, R10318 += 1, R51 += 1 };
  s2 -> s1 [0, 65] { R10412 += 1, R10318 += 1, R51 += 1 };
  s2 -> s2 [0, 65535] { R10412 += 1, R10317 += 1, R10318 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [66, 66] { R10412 += 1, R10318 += 1, R51 += 1 };
  s2 -> s4 [66, 66] { R10412 += 1, R10318 += 1, R51 += 1 };
  s2 -> s1 [67, 65535] { R10412 += 1, R10318 += 1, R51 += 1 };
  s3 -> s3 [0, 65535] { R10412 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10412 += 1, R10318 += 1, R51 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R10412 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10412 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65] { R10414 += 1, R10320 += 1, R53 += 1, R54 += 1 };
  s0 -> s0 [0, 65535] { R10413 += 1, R10414 += 1 };
  s0 -> s2 [0, 65535] { R10414 += 1, R10319 += 1, R10320 += 1 };
  s0 -> s3 [66, 66] { R10414 += 1, R10320 += 1, R53 += 1, R54 += 1 };
  s0 -> s4 [66, 66] { R10414 += 1, R10320 += 1, R53 += 1, R54 += 1 };
  s0 -> s1 [67, 65535] { R10414 += 1, R10320 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 65] { R10414 += 1, R10320 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 65535] { R10414 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [66, 66] { R10414 += 1, R10320 += 1, R53 += 1, R54 += 1 };
  s1 -> s4 [66, 66] { R10414 += 1, R10320 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [67, 65535] { R10414 += 1, R10320 += 1, R53 += 1, R54 += 1 };
  s2 -> s1 [0, 65] { R10414 += 1, R10320 += 1, R53 += 1, R54 += 1 };
  s2 -> s2 [0, 65535] { R10414 += 1, R10319 += 1, R10320 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [66, 66] { R10414 += 1, R10320 += 1, R53 += 1, R54 += 1 };
  s2 -> s4 [66, 66] { R10414 += 1, R10320 += 1, R53 += 1, R54 += 1 };
  s2 -> s1 [67, 65535] { R10414 += 1, R10320 += 1, R53 += 1, R54 += 1 };
  s3 -> s3 [0, 65535] { R10414 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R10414 += 1 };
  s4 -> s4 [0, 65535] { R10414 += 1, R10320 += 1, R53 += 1, R54 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10414 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 65] { R10416 += 1, R10322 += 1, R57 += 1, R58 += 1 };
  s0 -> s2 [0, 65535] { R10416 += 1, R10321 += 1, R10322 += 1 };
  s0 -> s0 [0, 65535] { R10415 += 1, R10416 += 1 };
  s0 -> s3 [66, 66] { R10416 += 1, R10322 += 1, R57 += 1, R58 += 1 };
  s0 -> s4 [66, 66] { R10416 += 1, R10322 += 1, R57 += 1, R58 += 1 };
  s0 -> s1 [67, 65535] { R10416 += 1, R10322 += 1, R57 += 1, R58 += 1 };
  s1 -> s1 [0, 65] { R10416 += 1, R10322 += 1, R57 += 1, R58 += 1 };
  s1 -> s1 [0, 65535] { R10416 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [66, 66] { R10416 += 1, R10322 += 1, R57 += 1, R58 += 1 };
  s1 -> s4 [66, 66] { R10416 += 1, R10322 += 1, R57 += 1, R58 += 1 };
  s1 -> s1 [67, 65535] { R10416 += 1, R10322 += 1, R57 += 1, R58 += 1 };
  s2 -> s1 [0, 65] { R10416 += 1, R10322 += 1, R57 += 1, R58 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10416 += 1, R10321 += 1, R10322 += 1 };
  s2 -> s3 [66, 66] { R10416 += 1, R10322 += 1, R57 += 1, R58 += 1 };
  s2 -> s4 [66, 66] { R10416 += 1, R10322 += 1, R57 += 1, R58 += 1 };
  s2 -> s1 [67, 65535] { R10416 += 1, R10322 += 1, R57 += 1, R58 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10416 += 1, R10322 += 1, R57 += 1, R58 += 1 };
  s3 -> s6 [0, 65535] { R10416 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10416 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10416 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 65] { R10418 += 1, R10324 += 1, R63 += 1, R64 += 1 };
  s0 -> s2 [0, 65535] { R10418 += 1, R10323 += 1, R10324 += 1 };
  s0 -> s0 [0, 65535] { R10417 += 1, R10418 += 1 };
  s0 -> s3 [66, 66] { R10418 += 1, R10324 += 1, R63 += 1, R64 += 1 };
  s0 -> s4 [66, 66] { R10418 += 1, R10324 += 1, R63 += 1, R64 += 1 };
  s0 -> s1 [67, 65535] { R10418 += 1, R10324 += 1, R63 += 1, R64 += 1 };
  s1 -> s1 [0, 65] { R10418 += 1, R10324 += 1, R63 += 1, R64 += 1 };
  s1 -> s1 [0, 65535] { R10418 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [66, 66] { R10418 += 1, R10324 += 1, R63 += 1, R64 += 1 };
  s1 -> s4 [66, 66] { R10418 += 1, R10324 += 1, R63 += 1, R64 += 1 };
  s1 -> s1 [67, 65535] { R10418 += 1, R10324 += 1, R63 += 1, R64 += 1 };
  s2 -> s1 [0, 65] { R10418 += 1, R10324 += 1, R63 += 1, R64 += 1 };
  s2 -> s2 [0, 65535] { R10418 += 1, R10323 += 1, R10324 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [66, 66] { R10418 += 1, R10324 += 1, R63 += 1, R64 += 1 };
  s2 -> s4 [66, 66] { R10418 += 1, R10324 += 1, R63 += 1, R64 += 1 };
  s2 -> s1 [67, 65535] { R10418 += 1, R10324 += 1, R63 += 1, R64 += 1 };
  s3 -> s3 [0, 65535] { R10418 += 1, R10324 += 1, R63 += 1, R64 += 1 };
  s3 -> s6 [0, 65535] { R10418 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10418 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10418 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65] { R10420 += 1, R10326 += 1, R67 += 1, R68 += 1 };
  s0 -> s0 [0, 65535] { R10419 += 1, R10420 += 1 };
  s0 -> s2 [0, 65535] { R10420 += 1, R10325 += 1, R10326 += 1 };
  s0 -> s3 [66, 66] { R10420 += 1, R10326 += 1, R67 += 1, R68 += 1 };
  s0 -> s4 [66, 66] { R10420 += 1, R10326 += 1, R67 += 1, R68 += 1 };
  s0 -> s1 [67, 65535] { R10420 += 1, R10326 += 1, R67 += 1, R68 += 1 };
  s1 -> s1 [0, 65] { R10420 += 1, R10326 += 1, R67 += 1, R68 += 1 };
  s1 -> s1 [0, 65535] { R10420 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [66, 66] { R10420 += 1, R10326 += 1, R67 += 1, R68 += 1 };
  s1 -> s4 [66, 66] { R10420 += 1, R10326 += 1, R67 += 1, R68 += 1 };
  s1 -> s1 [67, 65535] { R10420 += 1, R10326 += 1, R67 += 1, R68 += 1 };
  s2 -> s1 [0, 65] { R10420 += 1, R10326 += 1, R67 += 1, R68 += 1 };
  s2 -> s2 [0, 65535] { R10420 += 1, R10325 += 1, R10326 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [66, 66] { R10420 += 1, R10326 += 1, R67 += 1, R68 += 1 };
  s2 -> s4 [66, 66] { R10420 += 1, R10326 += 1, R67 += 1, R68 += 1 };
  s2 -> s1 [67, 65535] { R10420 += 1, R10326 += 1, R67 += 1, R68 += 1 };
  s3 -> s3 [0, 65535] { R10420 += 1, R10326 += 1, R67 += 1, R68 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R10420 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10420 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10420 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 65] { R10422 += 1, R10328 += 1, R73 += 1, R74 += 1 };
  s0 -> s0 [0, 65535] { R10421 += 1, R10422 += 1 };
  s0 -> s2 [0, 65535] { R10422 += 1, R10327 += 1, R10328 += 1 };
  s0 -> s3 [66, 66] { R10422 += 1, R10328 += 1, R73 += 1, R74 += 1 };
  s0 -> s4 [66, 66] { R10422 += 1, R10328 += 1, R73 += 1, R74 += 1 };
  s0 -> s1 [67, 65535] { R10422 += 1, R10328 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 65] { R10422 += 1, R10328 += 1, R73 += 1, R74 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10422 += 1 };
  s1 -> s3 [66, 66] { R10422 += 1, R10328 += 1, R73 += 1, R74 += 1 };
  s1 -> s4 [66, 66] { R10422 += 1, R10328 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [67, 65535] { R10422 += 1, R10328 += 1, R73 += 1, R74 += 1 };
  s2 -> s1 [0, 65] { R10422 += 1, R10328 += 1, R73 += 1, R74 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10422 += 1, R10327 += 1, R10328 += 1 };
  s2 -> s3 [66, 66] { R10422 += 1, R10328 += 1, R73 += 1, R74 += 1 };
  s2 -> s4 [66, 66] { R10422 += 1, R10328 += 1, R73 += 1, R74 += 1 };
  s2 -> s1 [67, 65535] { R10422 += 1, R10328 += 1, R73 += 1, R74 += 1 };
  s3 -> s3 [0, 65535] { R10422 += 1, R10328 += 1, R73 += 1, R74 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R10422 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10422 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10422 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65] { R10424 += 1, R10348 += 1 };
  s0 -> s2 [0, 65535] { R10424 += 1, R10347 += 1, R10348 += 1 };
  s0 -> s0 [0, 65535] { R10423 += 1, R10424 += 1 };
  s0 -> s3 [66, 66] { R10424 += 1, R10348 += 1 };
  s0 -> s1 [67, 65535] { R10424 += 1, R10348 += 1 };
  s1 -> s1 [0, 65] { R10424 += 1, R10348 += 1 };
  s1 -> s3 [66, 66] { R10424 += 1, R10348 += 1 };
  s1 -> s1 [67, 65535] { R10424 += 1, R10348 += 1 };
  s2 -> s1 [0, 65] { R10424 += 1, R10348 += 1 };
  s2 -> s2 [0, 65535] { R10424 += 1, R10347 += 1, R10348 += 1 };
  s2 -> s3 [66, 66] { R10424 += 1, R10348 += 1 };
  s2 -> s1 [67, 65535] { R10424 += 1, R10348 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R10424 += 1 };
  s3 -> s3 [0, 65535] { R10424 += 1, R10348 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10424 += 1 };
  accepting s3, s4, s5;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 65535] { R10426 += 1, R10350 += 1, R1 += 1 };
  s0 -> s2 [0, 65535] { R10426 += 1, R10349 += 1, R10350 += 1 };
  s0 -> s0 [0, 65535] { R10425 += 1, R10426 += 1 };
  s1 -> s1 [0, 65535] { R10426 += 1, R10350 += 1, R1 += 1 };
  s1 -> s4 [0, 65535] { R10426 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10426 += 1, R10350 += 1, R1 += 1 };
  s2 -> s2 [0, 65535] { R10426 += 1, R10349 += 1, R10350 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10426 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 65] { R10428 += 1, R10352 += 1 };
  s0 -> s2 [0, 65535] { R10428 += 1, R10351 += 1, R10352 += 1 };
  s0 -> s0 [0, 65535] { R10427 += 1, R10428 += 1 };
  s0 -> s3 [0, 65535] { R10428 += 1, R10352 += 1, R11 += 1 };
  s0 -> s4 [66, 66] { R10428 += 1, R10352 += 1 };
  s0 -> s1 [67, 65535] { R10428 += 1, R10352 += 1 };
  s1 -> s1 [0, 65] { R10428 += 1, R10352 += 1 };
  s1 -> s1 [0, 65535] { R10428 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s4 [66, 66] { R10428 += 1, R10352 += 1 };
  s1 -> s1 [67, 65535] { R10428 += 1, R10352 += 1 };
  s2 -> s1 [0, 65] { R10428 += 1, R10352 += 1 };
  s2 -> s2 [0, 65535] { R10428 += 1, R10351 += 1, R10352 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R10428 += 1, R10352 += 1, R11 += 1 };
  s2 -> s4 [66, 66] { R10428 += 1, R10352 += 1 };
  s2 -> s1 [67, 65535] { R10428 += 1, R10352 += 1 };
  s3 -> s1 [0, 65] { R10428 += 1, R10352 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R10428 += 1 };
  s3 -> s3 [0, 65535] { R10428 += 1, R10352 += 1, R11 += 1 };
  s3 -> s4 [66, 66] { R10428 += 1, R10352 += 1 };
  s3 -> s1 [67, 65535] { R10428 += 1, R10352 += 1 };
  s4 -> s4 [0, 65535] { R10428 += 1, R10352 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10428 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65] { R10430 += 1, R10354 += 1, R10292 += 1 };
  s0 -> s2 [0, 65535] { R10430 += 1, R10353 += 1, R10354 += 1 };
  s0 -> s0 [0, 65535] { R10429 += 1, R10430 += 1 };
  s0 -> s3 [0, 65535] { R10430 += 1, R10354 += 1, R10291 += 1, R10292 += 1 };
  s0 -> s1 [67, 65535] { R10430 += 1, R10354 += 1, R10292 += 1 };
  s1 -> s1 [0, 65] { R10430 += 1, R10354 += 1, R10292 += 1 };
  s1 -> s1 [0, 65535] { R10430 += 1, R10354 += 1 };
  s1 -> s4 [0, 65535] { R10430 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [67, 65535] { R10430 += 1, R10354 += 1, R10292 += 1 };
  s2 -> s1 [0, 65] { R10430 += 1, R10354 += 1, R10292 += 1 };
  s2 -> s2 [0, 65535] { R10430 += 1, R10353 += 1, R10354 += 1 };
  s2 -> s3 [0, 65535] { R10430 += 1, R10354 += 1, R10291 += 1, R10292 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [67, 65535] { R10430 += 1, R10354 += 1, R10292 += 1 };
  s3 -> s1 [0, 65] { R10430 += 1, R10354 += 1, R10292 += 1 };
  s3 -> s4 [0, 65535] { R10430 += 1 };
  s3 -> s3 [0, 65535] { R10430 += 1, R10354 += 1, R10291 += 1, R10292 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [67, 65535] { R10430 += 1, R10354 += 1, R10292 += 1 };
  s4 -> s4 [0, 65535] { R10430 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s0 [0, 65535] { R10431 += 1, R10432 += 1 };
  s0 -> s1 [0, 65535] { R10432 += 1, R10356 += 1, R10293 += 1, R10294 += 1 };
  s0 -> s2 [0, 65535] { R10432 += 1, R10355 += 1, R10356 += 1 };
  s0 -> s3 [0, 65535] { R10432 += 1, R10356 += 1, R10294 += 1, R20 += 1 };
  s1 -> s5 [0, 65535] { R10432 += 1 };
  s1 -> s1 [0, 65535] { R10432 += 1, R10356 += 1, R10293 += 1, R10294 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [0, 65535] { R10432 += 1, R10356 += 1, R10294 += 1, R20 += 1 };
  s2 -> s1 [0, 65535] { R10432 += 1, R10356 += 1, R10293 += 1, R10294 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R10432 += 1, R10355 += 1, R10356 += 1 };
  s2 -> s3 [0, 65535] { R10432 += 1, R10356 += 1, R10294 += 1, R20 += 1 };
  s3 -> s4 [0, 65535] { R10432 += 1, R10356 += 1 };
  s3 -> s5 [0, 65535] { R10432 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R10432 += 1, R10356 += 1, R10294 += 1, R20 += 1 };
  s4 -> s4 [0, 65535] { R10432 += 1, R10356 += 1 };
  s4 -> s5 [0, 65535] { R10432 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R10432 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 66] { R10434 += 1, R10358 += 1, R10296 += 1 };
  s0 -> s2 [0, 65535] { R10434 += 1, R10357 += 1, R10358 += 1 };
  s0 -> s3 [0, 65535] { R10434 += 1, R10358 += 1, R10295 += 1, R10296 += 1 };
  s0 -> s0 [0, 65535] { R10433 += 1, R10434 += 1 };
  s0 -> s1 [70, 65535] { R10434 += 1, R10358 += 1, R10296 += 1 };
  s1 -> s1 [0, 66] { R10434 += 1, R10358 += 1, R10296 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R10434 += 1, R10358 += 1 };
  s1 -> s5 [0, 65535] { R10434 += 1 };
  s1 -> s1 [70, 65535] { R10434 += 1, R10358 += 1, R10296 += 1 };
  s2 -> s1 [0, 66] { R10434 += 1, R10358 += 1, R10296 += 1 };
  s2 -> s2 [0, 65535] { R10434 += 1, R10357 += 1, R10358 += 1 };
  s2 -> s3 [0, 65535] { R10434 += 1, R10358 += 1, R10295 += 1, R10296 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [70, 65535] { R10434 += 1, R10358 += 1, R10296 += 1 };
  s3 -> s1 [0, 66] { R10434 += 1, R10358 += 1, R10296 += 1 };
  s3 -> s3 [0, 65535] { R10434 += 1, R10358 += 1, R10295 += 1, R10296 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R10434 += 1 };
  s3 -> s1 [70, 65535] { R10434 += 1, R10358 += 1, R10296 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10434 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 65535] { R10436 += 1, R10360 += 1, R10297 += 1, R10298 += 1 };
  s0 -> s2 [0, 65535] { R10436 += 1, R10360 += 1, R10298 += 1, R78 += 1 };
  s0 -> s3 [0, 65535] { R10436 += 1, R10359 += 1, R10360 += 1 };
  s0 -> s0 [0, 65535] { R10435 += 1, R10436 += 1 };
  s1 -> s1 [0, 65535] { R10436 += 1, R10360 += 1, R10297 += 1, R10298 += 1 };
  s1 -> s2 [0, 65535] { R10436 += 1, R10360 += 1, R10298 += 1, R78 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R10436 += 1 };
  s2 -> s2 [0, 65535] { R10436 += 1, R10360 += 1, R10298 += 1, R78 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R10436 += 1, R10360 += 1 };
  s2 -> s6 [0, 65535] { R10436 += 1 };
  s3 -> s1 [0, 65535] { R10436 += 1, R10360 += 1, R10297 += 1, R10298 += 1 };
  s3 -> s2 [0, 65535] { R10436 += 1, R10360 += 1, R10298 += 1, R78 += 1 };
  s3 -> s3 [0, 65535] { R10436 += 1, R10359 += 1, R10360 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10436 += 1, R10360 += 1 };
  s5 -> s6 [0, 65535] { R10436 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R10436 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 69] { R10438 += 1, R10362 += 1, R10300 += 1 };
  s0 -> s2 [0, 65535] { R10438 += 1, R10362 += 1, R10299 += 1, R10300 += 1 };
  s0 -> s3 [0, 65535] { R10438 += 1, R10361 += 1, R10362 += 1 };
  s0 -> s0 [0, 65535] { R10437 += 1, R10438 += 1 };
  s0 -> s4 [0, 65535] { R10438 += 1, R10362 += 1, R10300 += 1, R80 += 1 };
  s0 -> s1 [71, 65535] { R10438 += 1, R10362 += 1, R10300 += 1 };
  s1 -> s1 [0, 69] { R10438 += 1, R10362 += 1, R10300 += 1 };
  s1 -> s1 [0, 65535] { R10438 += 1, R10362 += 1 };
  s1 -> s6 [0, 65535] { R10438 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s1 [71, 65535] { R10438 += 1, R10362 += 1, R10300 += 1 };
  s2 -> s1 [0, 69] { R10438 += 1, R10362 += 1, R10300 += 1 };
  s2 -> s2 [0, 65535] { R10438 += 1, R10362 += 1, R10299 += 1, R10300 += 1 };
  s2 -> s6 [0, 65535] { R10438 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s4 [0, 65535] { R10438 += 1, R10362 += 1, R10300 += 1, R80 += 1 };
  s2 -> s1 [71, 65535] { R10438 += 1, R10362 += 1, R10300 += 1 };
  s3 -> s1 [0, 69] { R10438 += 1, R10362 += 1, R10300 += 1 };
  s3 -> s2 [0, 65535] { R10438 += 1, R10362 += 1, R10299 += 1, R10300 += 1 };
  s3 -> s3 [0, 65535] { R10438 += 1, R10361 += 1, R10362 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s4 [0, 65535] { R10438 += 1, R10362 += 1, R10300 += 1, R80 += 1 };
  s3 -> s1 [71, 65535] { R10438 += 1, R10362 += 1, R10300 += 1 };
  s4 -> s1 [0, 69] { R10438 += 1, R10362 += 1, R10300 += 1 };
  s4 -> s5 [0, 65535] { R10438 += 1, R10362 += 1 };
  s4 -> s6 [0, 65535] { R10438 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s4 [0, 65535] { R10438 += 1, R10362 += 1, R10300 += 1, R80 += 1 };
  s4 -> s1 [71, 65535] { R10438 += 1, R10362 += 1, R10300 += 1 };
  s5 -> s5 [0, 65535] { R10438 += 1, R10362 += 1 };
  s5 -> s6 [0, 65535] { R10438 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s6 [0, 65535] { R10438 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 69] { R10440 += 1, R10364 += 1, R10302 += 1, R84 += 1 };
  s0 -> s2 [0, 65535] { R10440 += 1, R10364 += 1, R10302 += 1, R83 += 1, R84 += 1 };
  s0 -> s3 [0, 65535] { R10440 += 1, R10364 += 1, R10301 += 1, R10302 += 1 };
  s0 -> s0 [0, 65535] { R10439 += 1, R10440 += 1 };
  s0 -> s4 [0, 65535] { R10440 += 1, R10363 += 1, R10364 += 1 };
  s0 -> s1 [71, 65535] { R10440 += 1, R10364 += 1, R10302 += 1, R84 += 1 };
  s1 -> s1 [0, 69] { R10440 += 1, R10364 += 1, R10302 += 1, R84 += 1 };
  s1 -> s6 [0, 65535] { R10440 += 1 };
  s1 -> s7 [0, 65535] { R10440 += 1, R10364 += 1 };
  s1 -> s1 [0, 65535] { R10440 += 1, R10364 += 1, R10302 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [71, 65535] { R10440 += 1, R10364 += 1, R10302 += 1, R84 += 1 };
  s2 -> s1 [0, 69] { R10440 += 1, R10364 += 1, R10302 += 1, R84 += 1 };
  s2 -> s6 [0, 65535] { R10440 += 1 };
  s2 -> s2 [0, 65535] { R10440 += 1, R10364 += 1, R10302 += 1, R83 += 1, R84 += 1 };
  s2 -> s7 [0, 65535] { R10440 += 1, R10364 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [71, 65535] { R10440 += 1, R10364 += 1, R10302 += 1, R84 += 1 };
  s3 -> s1 [0, 69] { R10440 += 1, R10364 += 1, R10302 += 1, R84 += 1 };
  s3 -> s6 [0, 65535] { R10440 += 1 };
  s3 -> s2 [0, 65535] { R10440 += 1, R10364 += 1, R10302 += 1, R83 += 1, R84 += 1 };
  s3 -> s3 [0, 65535] { R10440 += 1, R10364 += 1, R10301 += 1, R10302 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [71, 65535] { R10440 += 1, R10364 += 1, R10302 += 1, R84 += 1 };
  s4 -> s1 [0, 69] { R10440 += 1, R10364 += 1, R10302 += 1, R84 += 1 };
  s4 -> s2 [0, 65535] { R10440 += 1, R10364 += 1, R10302 += 1, R83 += 1, R84 += 1 };
  s4 -> s3 [0, 65535] { R10440 += 1, R10364 += 1, R10301 += 1, R10302 += 1 };
  s4 -> s4 [0, 65535] { R10440 += 1, R10363 += 1, R10364 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s1 [71, 65535] { R10440 += 1, R10364 += 1, R10302 += 1, R84 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10440 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R10440 += 1 };
  s7 -> s7 [0, 65535] { R10440 += 1, R10364 += 1 };
  s7 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 65535] { R10442 += 1, R10366 += 1, R10304 += 1, R6641 += 1, R6642 += 1 };
  s0 -> s2 [0, 65535] { R10442 += 1, R10366 += 1, R10304 += 1 };
  s0 -> s3 [0, 65535] { R10442 += 1, R10365 += 1, R10366 += 1 };
  s0 -> s4 [0, 65535] { R10442 += 1, R10366 += 1, R10303 += 1, R10304 += 1 };
  s0 -> s0 [0, 65535] { R10441 += 1, R10442 += 1 };
  s1 -> s1 [0, 65535] { R10442 += 1, R10366 += 1, R10304 += 1, R6641 += 1, R6642 += 1 };
  s1 -> s2 [0, 65535] { R10442 += 1, R10366 += 1, R10304 += 1 };
  s1 -> s5 [0, 65535] { R10442 += 1 };
  s1 -> s7 [0, 65535] { R10442 += 1, R10366 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R10442 += 1, R10366 += 1, R10304 += 1 };
  s2 -> s5 [0, 65535] { R10442 += 1 };
  s2 -> s7 [0, 65535] { R10442 += 1, R10366 += 1 };
  s2 -> s6 [0, 65535];
  s3 -> s1 [0, 65535] { R10442 += 1, R10366 += 1, R10304 += 1, R6641 += 1, R6642 += 1 };
  s3 -> s2 [0, 65535] { R10442 += 1, R10366 += 1, R10304 += 1 };
  s3 -> s3 [0, 65535] { R10442 += 1, R10365 += 1, R10366 += 1 };
  s3 -> s4 [0, 65535] { R10442 += 1, R10366 += 1, R10303 += 1, R10304 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s1 [0, 65535] { R10442 += 1, R10366 += 1, R10304 += 1, R6641 += 1, R6642 += 1 };
  s4 -> s2 [0, 65535] { R10442 += 1, R10366 += 1, R10304 += 1 };
  s4 -> s5 [0, 65535] { R10442 += 1 };
  s4 -> s4 [0, 65535] { R10442 += 1, R10366 += 1, R10303 += 1, R10304 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R10442 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R10442 += 1 };
  s7 -> s7 [0, 65535] { R10442 += 1, R10366 += 1 };
  s7 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 70] { R10444 += 1, R10368 += 1, R10306 += 1, R8828 += 1 };
  s0 -> s2 [0, 65535] { R10444 += 1, R10368 += 1, R10305 += 1, R10306 += 1 };
  s0 -> s3 [0, 65535] { R10444 += 1, R10368 += 1, R10306 += 1, R8827 += 1, R8828 += 1 };
  s0 -> s0 [0, 65535] { R10443 += 1, R10444 += 1 };
  s0 -> s4 [0, 65535] { R10444 += 1, R10367 += 1, R10368 += 1 };
  s0 -> s5 [83, 83] { R10444 += 1, R10368 += 1, R10306 += 1, R8828 += 1 };
  s0 -> s1 [84, 65535] { R10444 += 1, R10368 += 1, R10306 += 1, R8828 += 1 };
  s1 -> s1 [0, 70] { R10444 += 1, R10368 += 1, R10306 += 1, R8828 += 1 };
  s1 -> s5 [83, 83] { R10444 += 1, R10368 += 1, R10306 += 1, R8828 += 1 };
  s1 -> s1 [84, 65535] { R10444 += 1, R10368 += 1, R10306 += 1, R8828 += 1 };
  s2 -> s1 [0, 70] { R10444 += 1, R10368 += 1, R10306 += 1, R8828 += 1 };
  s2 -> s2 [0, 65535] { R10444 += 1, R10368 += 1, R10305 += 1, R10306 += 1 };
  s2 -> s3 [0, 65535] { R10444 += 1, R10368 += 1, R10306 += 1, R8827 += 1, R8828 += 1 };
  s2 -> s5 [83, 83] { R10444 += 1, R10368 += 1, R10306 += 1, R8828 += 1 };
  s2 -> s1 [84, 65535] { R10444 += 1, R10368 += 1, R10306 += 1, R8828 += 1 };
  s3 -> s1 [0, 70] { R10444 += 1, R10368 += 1, R10306 += 1, R8828 += 1 };
  s3 -> s3 [0, 65535] { R10444 += 1, R10368 += 1, R10306 += 1, R8827 += 1, R8828 += 1 };
  s3 -> s5 [83, 83] { R10444 += 1, R10368 += 1, R10306 += 1, R8828 += 1 };
  s3 -> s1 [84, 65535] { R10444 += 1, R10368 += 1, R10306 += 1, R8828 += 1 };
  s4 -> s1 [0, 70] { R10444 += 1, R10368 += 1, R10306 += 1, R8828 += 1 };
  s4 -> s2 [0, 65535] { R10444 += 1, R10368 += 1, R10305 += 1, R10306 += 1 };
  s4 -> s3 [0, 65535] { R10444 += 1, R10368 += 1, R10306 += 1, R8827 += 1, R8828 += 1 };
  s4 -> s4 [0, 65535] { R10444 += 1, R10367 += 1, R10368 += 1 };
  s4 -> s5 [83, 83] { R10444 += 1, R10368 += 1, R10306 += 1, R8828 += 1 };
  s4 -> s1 [84, 65535] { R10444 += 1, R10368 += 1, R10306 += 1, R8828 += 1 };
  s5 -> s5 [0, 70] { R10444 += 1, R10368 += 1, R10306 += 1, R8828 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R10444 += 1, R10368 += 1 };
  s5 -> s8 [0, 65535] { R10444 += 1 };
  s5 -> s5 [0, 65535] { R10444 += 1, R10368 += 1, R10306 += 1 };
  s5 -> s5 [83, 65535] { R10444 += 1, R10368 += 1, R10306 += 1, R8828 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R10444 += 1, R10368 += 1 };
  s7 -> s8 [0, 65535] { R10444 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R10444 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_34 {
  init s0;
  s0 -> s0 [0, 65535] { R10445 += 1, R10446 += 1 };
  s0 -> s1 [0, 65535] { R10446 += 1, R10370 += 1, R10307 += 1, R10308 += 1 };
  s0 -> s2 [0, 65535] { R10446 += 1, R10369 += 1, R10370 += 1 };
  s0 -> s3 [0, 65535] { R10446 += 1, R10370 += 1, R10308 += 1 };
  s1 -> s4 [0, 65535] { R10446 += 1 };
  s1 -> s1 [0, 65535] { R10446 += 1, R10370 += 1, R10307 += 1, R10308 += 1 };
  s1 -> s3 [0, 65535] { R10446 += 1, R10370 += 1, R10308 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s1 [0, 65535] { R10446 += 1, R10370 += 1, R10307 += 1, R10308 += 1 };
  s2 -> s2 [0, 65535] { R10446 += 1, R10369 += 1, R10370 += 1 };
  s2 -> s3 [0, 65535] { R10446 += 1, R10370 += 1, R10308 += 1 };
  s2 -> s6 [0, 65535];
  s3 -> s4 [0, 65535] { R10446 += 1 };
  s3 -> s3 [0, 65535] { R10446 += 1, R10370 += 1, R10308 += 1 };
  s3 -> s5 [0, 65535] { R10446 += 1, R10370 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R10446 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s4 [0, 65535] { R10446 += 1 };
  s5 -> s5 [0, 65535] { R10446 += 1, R10370 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 69] { R10448 += 1, R10372 += 1, R10310 += 1, R10290 += 1 };
  s0 -> s2 [0, 65535] { R10448 += 1, R10372 += 1, R10309 += 1, R10310 += 1 };
  s0 -> s0 [0, 65535] { R10447 += 1, R10448 += 1 };
  s0 -> s3 [0, 65535] { R10448 += 1, R10372 += 1, R10310 += 1, R10289 += 1, R10290 += 1 };
  s0 -> s4 [0, 65535] { R10448 += 1, R10371 += 1, R10372 += 1 };
  s0 -> s5 [70, 70] { R10448 += 1, R10372 += 1, R10310 += 1, R10290 += 1 };
  s0 -> s6 [70, 70] { R10448 += 1, R10372 += 1, R10310 += 1, R10290 += 1 };
  s0 -> s1 [84, 65535] { R10448 += 1, R10372 += 1, R10310 += 1, R10290 += 1 };
  s1 -> s1 [0, 69] { R10448 += 1, R10372 += 1, R10310 += 1, R10290 += 1 };
  s1 -> s7 [0, 65535] { R10448 += 1, R10372 += 1 };
  s1 -> s1 [0, 65535] { R10448 += 1, R10372 += 1, R10310 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s9 [0, 65535] { R10448 += 1 };
  s1 -> s5 [70, 70] { R10448 += 1, R10372 += 1, R10310 += 1, R10290 += 1 };
  s1 -> s6 [70, 70] { R10448 += 1, R10372 += 1, R10310 += 1, R10290 += 1 };
  s1 -> s1 [84, 65535] { R10448 += 1, R10372 += 1, R10310 += 1, R10290 += 1 };
  s2 -> s1 [0, 69] { R10448 += 1, R10372 += 1, R10310 += 1, R10290 += 1 };
  s2 -> s2 [0, 65535] { R10448 += 1, R10372 += 1, R10309 += 1, R10310 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s3 [0, 65535] { R10448 += 1, R10372 += 1, R10310 += 1, R10289 += 1, R10290 += 1 };
  s2 -> s9 [0, 65535] { R10448 += 1 };
  s2 -> s5 [70, 70] { R10448 += 1, R10372 += 1, R10310 += 1, R10290 += 1 };
  s2 -> s6 [70, 70] { R10448 += 1, R10372 += 1, R10310 += 1, R10290 += 1 };
  s2 -> s1 [84, 65535] { R10448 += 1, R10372 += 1, R10310 += 1, R10290 += 1 };
  s3 -> s1 [0, 69] { R10448 += 1, R10372 += 1, R10310 += 1, R10290 += 1 };
  s3 -> s7 [0, 65535] { R10448 += 1, R10372 += 1 };
  s3 -> s8 [0, 65535];
  s3 -> s3 [0, 65535] { R10448 += 1, R10372 += 1, R10310 += 1, R10289 += 1, R10290 += 1 };
  s3 -> s9 [0, 65535] { R10448 += 1 };
  s3 -> s5 [70, 70] { R10448 += 1, R10372 += 1, R10310 += 1, R10290 += 1 };
  s3 -> s6 [70, 70] { R10448 += 1, R10372 += 1, R10310 += 1, R10290 += 1 };
  s3 -> s1 [84, 65535] { R10448 += 1, R10372 += 1, R10310 += 1, R10290 += 1 };
  s4 -> s1 [0, 69] { R10448 += 1, R10372 += 1, R10310 += 1, R10290 += 1 };
  s4 -> s2 [0, 65535] { R10448 += 1, R10372 += 1, R10309 += 1, R10310 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s3 [0, 65535] { R10448 += 1, R10372 += 1, R10310 += 1, R10289 += 1, R10290 += 1 };
  s4 -> s4 [0, 65535] { R10448 += 1, R10371 += 1, R10372 += 1 };
  s4 -> s5 [70, 70] { R10448 += 1, R10372 += 1, R10310 += 1, R10290 += 1 };
  s4 -> s6 [70, 70] { R10448 += 1, R10372 += 1, R10310 += 1, R10290 += 1 };
  s4 -> s1 [84, 65535] { R10448 += 1, R10372 += 1, R10310 += 1, R10290 += 1 };
  s5 -> s5 [0, 70] { R10448 += 1, R10372 += 1, R10310 += 1, R10290 += 1 };
  s5 -> s7 [0, 65535] { R10448 += 1, R10372 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s5 [0, 65535] { R10448 += 1, R10372 += 1, R10310 += 1 };
  s5 -> s9 [0, 65535] { R10448 += 1 };
  s5 -> s5 [84, 65535] { R10448 += 1, R10372 += 1, R10310 += 1, R10290 += 1 };
  s6 -> s7 [0, 65535] { R10448 += 1, R10372 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R10448 += 1, R10372 += 1, R10310 += 1 };
  s6 -> s9 [0, 65535] { R10448 += 1 };
  s7 -> s7 [0, 65535] { R10448 += 1, R10372 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s9 [0, 65535] { R10448 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R10448 += 1 };
  accepting s3, s4, s8, s5, s2, s9, s6, s1, s7, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s0 [0, 65535] { R10449 += 1, R10450 += 1 };
  s0 -> s1 [0, 65535] { R10450 += 1, R10374 += 1, R10329 += 1, R10330 += 1 };
  s0 -> s2 [0, 65535] { R10450 += 1, R10373 += 1, R10374 += 1 };
  s0 -> s3 [0, 65535] { R10450 += 1, R10374 += 1, R10330 += 1, R21 += 1 };
  s1 -> s5 [0, 65535] { R10450 += 1 };
  s1 -> s1 [0, 65535] { R10450 += 1, R10374 += 1, R10329 += 1, R10330 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [0, 65535] { R10450 += 1, R10374 += 1, R10330 += 1, R21 += 1 };
  s2 -> s1 [0, 65535] { R10450 += 1, R10374 += 1, R10329 += 1, R10330 += 1 };
  s2 -> s2 [0, 65535] { R10450 += 1, R10373 += 1, R10374 += 1 };
  s2 -> s3 [0, 65535] { R10450 += 1, R10374 += 1, R10330 += 1, R21 += 1 };
  s2 -> s6 [0, 65535];
  s3 -> s4 [0, 65535] { R10450 += 1, R10374 += 1 };
  s3 -> s5 [0, 65535] { R10450 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R10450 += 1, R10374 += 1, R10330 += 1, R21 += 1 };
  s4 -> s4 [0, 65535] { R10450 += 1, R10374 += 1 };
  s4 -> s5 [0, 65535] { R10450 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R10450 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 65] { R10452 += 1, R10376 += 1, R10332 += 1 };
  s0 -> s2 [0, 65535] { R10452 += 1, R10376 += 1, R10331 += 1, R10332 += 1 };
  s0 -> s3 [0, 65535] { R10452 += 1, R10375 += 1, R10376 += 1 };
  s0 -> s0 [0, 65535] { R10451 += 1, R10452 += 1 };
  s0 -> s4 [66, 66] { R10452 += 1, R10376 += 1, R10332 += 1 };
  s0 -> s5 [66, 66] { R10452 += 1, R10376 += 1, R10332 += 1 };
  s0 -> s6 [70, 70] { R10452 += 1, R10376 += 1, R10332 += 1 };
  s0 -> s1 [71, 65535] { R10452 += 1, R10376 += 1, R10332 += 1 };
  s1 -> s1 [0, 65] { R10452 += 1, R10376 += 1, R10332 += 1 };
  s1 -> s4 [66, 66] { R10452 += 1, R10376 += 1, R10332 += 1 };
  s1 -> s5 [66, 66] { R10452 += 1, R10376 += 1, R10332 += 1 };
  s1 -> s6 [70, 70] { R10452 += 1, R10376 += 1, R10332 += 1 };
  s1 -> s1 [71, 65535] { R10452 += 1, R10376 += 1, R10332 += 1 };
  s2 -> s1 [0, 65] { R10452 += 1, R10376 += 1, R10332 += 1 };
  s2 -> s2 [0, 65535] { R10452 += 1, R10376 += 1, R10331 += 1, R10332 += 1 };
  s2 -> s4 [66, 66] { R10452 += 1, R10376 += 1, R10332 += 1 };
  s2 -> s5 [66, 66] { R10452 += 1, R10376 += 1, R10332 += 1 };
  s2 -> s6 [70, 70] { R10452 += 1, R10376 += 1, R10332 += 1 };
  s2 -> s1 [71, 65535] { R10452 += 1, R10376 += 1, R10332 += 1 };
  s3 -> s1 [0, 65] { R10452 += 1, R10376 += 1, R10332 += 1 };
  s3 -> s2 [0, 65535] { R10452 += 1, R10376 += 1, R10331 += 1, R10332 += 1 };
  s3 -> s3 [0, 65535] { R10452 += 1, R10375 += 1, R10376 += 1 };
  s3 -> s4 [66, 66] { R10452 += 1, R10376 += 1, R10332 += 1 };
  s3 -> s5 [66, 66] { R10452 += 1, R10376 += 1, R10332 += 1 };
  s3 -> s6 [70, 70] { R10452 += 1, R10376 += 1, R10332 += 1 };
  s3 -> s1 [71, 65535] { R10452 += 1, R10376 += 1, R10332 += 1 };
  s4 -> s4 [0, 66] { R10452 += 1, R10376 += 1, R10332 += 1 };
  s4 -> s9 [70, 70] { R10452 += 1, R10376 += 1, R10332 += 1 };
  s4 -> s4 [71, 65535] { R10452 += 1, R10376 += 1, R10332 += 1 };
  s6 -> s6 [0, 65] { R10452 += 1, R10376 += 1, R10332 += 1 };
  s6 -> s7 [0, 65535];
  s6 -> s6 [0, 65535] { R10452 += 1, R10376 += 1 };
  s6 -> s8 [0, 65535] { R10452 += 1 };
  s6 -> s9 [66, 66] { R10452 += 1, R10376 += 1, R10332 += 1 };
  s6 -> s10 [66, 66] { R10452 += 1, R10376 += 1, R10332 += 1 };
  s6 -> s6 [70, 65535] { R10452 += 1, R10376 += 1, R10332 += 1 };
  s7 -> s7 [0, 65535];
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R10452 += 1 };
  s9 -> s9 [0, 66] { R10452 += 1, R10376 += 1, R10332 += 1 };
  s9 -> s9 [0, 65535] { R10452 += 1, R10376 += 1 };
  s9 -> s7 [0, 65535];
  s9 -> s8 [0, 65535] { R10452 += 1 };
  s9 -> s9 [70, 65535] { R10452 += 1, R10376 += 1, R10332 += 1 };
  s10 -> s7 [0, 65535];
  s10 -> s8 [0, 65535] { R10452 += 1 };
  s10 -> s10 [0, 65535] { R10452 += 1, R10376 += 1 };
  accepting s8, s9, s6, s7, s10;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 65] { R10454 += 1, R10378 += 1, R10334 += 1, R77 += 1 };
  s0 -> s2 [0, 65535] { R10454 += 1, R10377 += 1, R10378 += 1 };
  s0 -> s3 [0, 65535] { R10454 += 1, R10378 += 1, R10333 += 1, R10334 += 1 };
  s0 -> s0 [0, 65535] { R10453 += 1, R10454 += 1 };
  s0 -> s4 [66, 66] { R10454 += 1, R10378 += 1, R10334 += 1, R77 += 1 };
  s0 -> s5 [66, 66] { R10454 += 1, R10378 += 1, R10334 += 1, R77 += 1 };
  s0 -> s1 [67, 65535] { R10454 += 1, R10378 += 1, R10334 += 1, R77 += 1 };
  s1 -> s1 [0, 65] { R10454 += 1, R10378 += 1, R10334 += 1, R77 += 1 };
  s1 -> s6 [0, 65535] { R10454 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s1 [0, 65535] { R10454 += 1, R10378 += 1 };
  s1 -> s4 [66, 66] { R10454 += 1, R10378 += 1, R10334 += 1, R77 += 1 };
  s1 -> s5 [66, 66] { R10454 += 1, R10378 += 1, R10334 += 1, R77 += 1 };
  s1 -> s1 [67, 65535] { R10454 += 1, R10378 += 1, R10334 += 1, R77 += 1 };
  s2 -> s1 [0, 65] { R10454 += 1, R10378 += 1, R10334 += 1, R77 += 1 };
  s2 -> s2 [0, 65535] { R10454 += 1, R10377 += 1, R10378 += 1 };
  s2 -> s3 [0, 65535] { R10454 += 1, R10378 += 1, R10333 += 1, R10334 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s4 [66, 66] { R10454 += 1, R10378 += 1, R10334 += 1, R77 += 1 };
  s2 -> s5 [66, 66] { R10454 += 1, R10378 += 1, R10334 += 1, R77 += 1 };
  s2 -> s1 [67, 65535] { R10454 += 1, R10378 += 1, R10334 += 1, R77 += 1 };
  s3 -> s1 [0, 65] { R10454 += 1, R10378 += 1, R10334 += 1, R77 += 1 };
  s3 -> s6 [0, 65535] { R10454 += 1 };
  s3 -> s3 [0, 65535] { R10454 += 1, R10378 += 1, R10333 += 1, R10334 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s4 [66, 66] { R10454 += 1, R10378 += 1, R10334 += 1, R77 += 1 };
  s3 -> s5 [66, 66] { R10454 += 1, R10378 += 1, R10334 += 1, R77 += 1 };
  s3 -> s1 [67, 65535] { R10454 += 1, R10378 += 1, R10334 += 1, R77 += 1 };
  s4 -> s4 [0, 65535] { R10454 += 1, R10378 += 1, R10334 += 1, R77 += 1 };
  s4 -> s8 [0, 65535] { R10454 += 1, R10378 += 1 };
  s4 -> s6 [0, 65535] { R10454 += 1 };
  s4 -> s7 [0, 65535];
  s5 -> s6 [0, 65535] { R10454 += 1 };
  s5 -> s7 [0, 65535];
  s5 -> s5 [0, 65535] { R10454 += 1, R10378 += 1 };
  s6 -> s6 [0, 65535] { R10454 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R10454 += 1, R10378 += 1 };
  s8 -> s6 [0, 65535] { R10454 += 1 };
  s8 -> s7 [0, 65535];
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton value2_39 {
  init s0;
  s0 -> s1 [0, 65] { R10456 += 1, R10380 += 1, R10336 += 1, R79 += 1 };
  s0 -> s0 [0, 65535] { R10455 += 1, R10456 += 1 };
  s0 -> s2 [0, 65535] { R10456 += 1, R10379 += 1, R10380 += 1 };
  s0 -> s3 [0, 65535] { R10456 += 1, R10380 += 1, R10335 += 1, R10336 += 1 };
  s0 -> s4 [66, 66] { R10456 += 1, R10380 += 1, R10336 += 1, R79 += 1 };
  s0 -> s5 [66, 66] { R10456 += 1, R10380 += 1, R10336 += 1, R79 += 1 };
  s0 -> s1 [67, 65535] { R10456 += 1, R10380 += 1, R10336 += 1, R79 += 1 };
  s1 -> s1 [0, 65] { R10456 += 1, R10380 += 1, R10336 += 1, R79 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s1 [0, 65535] { R10456 += 1, R10380 += 1 };
  s1 -> s8 [0, 65535] { R10456 += 1 };
  s1 -> s4 [66, 66] { R10456 += 1, R10380 += 1, R10336 += 1, R79 += 1 };
  s1 -> s5 [66, 66] { R10456 += 1, R10380 += 1, R10336 += 1, R79 += 1 };
  s1 -> s1 [67, 65535] { R10456 += 1, R10380 += 1, R10336 += 1, R79 += 1 };
  s2 -> s1 [0, 65] { R10456 += 1, R10380 += 1, R10336 += 1, R79 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s2 [0, 65535] { R10456 += 1, R10379 += 1, R10380 += 1 };
  s2 -> s3 [0, 65535] { R10456 += 1, R10380 += 1, R10335 += 1, R10336 += 1 };
  s2 -> s4 [66, 66] { R10456 += 1, R10380 += 1, R10336 += 1, R79 += 1 };
  s2 -> s5 [66, 66] { R10456 += 1, R10380 += 1, R10336 += 1, R79 += 1 };
  s2 -> s1 [67, 65535] { R10456 += 1, R10380 += 1, R10336 += 1, R79 += 1 };
  s3 -> s1 [0, 65] { R10456 += 1, R10380 += 1, R10336 += 1, R79 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s3 [0, 65535] { R10456 += 1, R10380 += 1, R10335 += 1, R10336 += 1 };
  s3 -> s8 [0, 65535] { R10456 += 1 };
  s3 -> s4 [66, 66] { R10456 += 1, R10380 += 1, R10336 += 1, R79 += 1 };
  s3 -> s5 [66, 66] { R10456 += 1, R10380 += 1, R10336 += 1, R79 += 1 };
  s3 -> s1 [67, 65535] { R10456 += 1, R10380 += 1, R10336 += 1, R79 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s8 [0, 65535] { R10456 += 1 };
  s4 -> s4 [0, 65535] { R10456 += 1, R10380 += 1 };
  s5 -> s6 [0, 65535] { R10456 += 1, R10380 += 1 };
  s5 -> s7 [0, 65535];
  s5 -> s8 [0, 65535] { R10456 += 1 };
  s5 -> s5 [0, 65535] { R10456 += 1, R10380 += 1, R10336 += 1, R79 += 1 };
  s6 -> s6 [0, 65535] { R10456 += 1, R10380 += 1 };
  s6 -> s7 [0, 65535];
  s6 -> s8 [0, 65535] { R10456 += 1 };
  s7 -> s7 [0, 65535];
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R10456 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton value2_40 {
  init s0;
  s0 -> s1 [0, 65] { R10458 += 1, R10382 += 1, R10338 += 1, R81 += 1, R82 += 1 };
  s0 -> s0 [0, 65535] { R10457 += 1, R10458 += 1 };
  s0 -> s2 [0, 65535] { R10458 += 1, R10381 += 1, R10382 += 1 };
  s0 -> s3 [0, 65535] { R10458 += 1, R10382 += 1, R10337 += 1, R10338 += 1 };
  s0 -> s4 [66, 66] { R10458 += 1, R10382 += 1, R10338 += 1, R81 += 1, R82 += 1 };
  s0 -> s5 [66, 66] { R10458 += 1, R10382 += 1, R10338 += 1, R81 += 1, R82 += 1 };
  s0 -> s1 [67, 65535] { R10458 += 1, R10382 += 1, R10338 += 1, R81 += 1, R82 += 1 };
  s1 -> s1 [0, 65] { R10458 += 1, R10382 += 1, R10338 += 1, R81 += 1, R82 += 1 };
  s1 -> s6 [0, 65535] { R10458 += 1 };
  s1 -> s1 [0, 65535] { R10458 += 1, R10382 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s4 [66, 66] { R10458 += 1, R10382 += 1, R10338 += 1, R81 += 1, R82 += 1 };
  s1 -> s5 [66, 66] { R10458 += 1, R10382 += 1, R10338 += 1, R81 += 1, R82 += 1 };
  s1 -> s1 [67, 65535] { R10458 += 1, R10382 += 1, R10338 += 1, R81 += 1, R82 += 1 };
  s2 -> s1 [0, 65] { R10458 += 1, R10382 += 1, R10338 += 1, R81 += 1, R82 += 1 };
  s2 -> s2 [0, 65535] { R10458 += 1, R10381 += 1, R10382 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s3 [0, 65535] { R10458 += 1, R10382 += 1, R10337 += 1, R10338 += 1 };
  s2 -> s4 [66, 66] { R10458 += 1, R10382 += 1, R10338 += 1, R81 += 1, R82 += 1 };
  s2 -> s5 [66, 66] { R10458 += 1, R10382 += 1, R10338 += 1, R81 += 1, R82 += 1 };
  s2 -> s1 [67, 65535] { R10458 += 1, R10382 += 1, R10338 += 1, R81 += 1, R82 += 1 };
  s3 -> s1 [0, 65] { R10458 += 1, R10382 += 1, R10338 += 1, R81 += 1, R82 += 1 };
  s3 -> s6 [0, 65535] { R10458 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s3 [0, 65535] { R10458 += 1, R10382 += 1, R10337 += 1, R10338 += 1 };
  s3 -> s4 [66, 66] { R10458 += 1, R10382 += 1, R10338 += 1, R81 += 1, R82 += 1 };
  s3 -> s5 [66, 66] { R10458 += 1, R10382 += 1, R10338 += 1, R81 += 1, R82 += 1 };
  s3 -> s1 [67, 65535] { R10458 += 1, R10382 += 1, R10338 += 1, R81 += 1, R82 += 1 };
  s4 -> s6 [0, 65535] { R10458 += 1 };
  s4 -> s4 [0, 65535] { R10458 += 1, R10382 += 1, R10338 += 1, R81 += 1, R82 += 1 };
  s4 -> s8 [0, 65535] { R10458 += 1, R10382 += 1 };
  s4 -> s7 [0, 65535];
  s5 -> s6 [0, 65535] { R10458 += 1 };
  s5 -> s5 [0, 65535] { R10458 += 1, R10382 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s6 [0, 65535] { R10458 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  s8 -> s6 [0, 65535] { R10458 += 1 };
  s8 -> s8 [0, 65535] { R10458 += 1, R10382 += 1 };
  s8 -> s7 [0, 65535];
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton value2_41 {
  init s0;
  s0 -> s1 [0, 65] { R10460 += 1, R10384 += 1, R10340 += 1, R6637 += 1, R6638 += 1 };
  s0 -> s2 [0, 65] { R10460 += 1, R10384 += 1, R10340 += 1, R6638 += 1, R6639 += 1 };
  s0 -> s0 [0, 65535] { R10459 += 1, R10460 += 1 };
  s0 -> s3 [0, 65535] { R10460 += 1, R10383 += 1, R10384 += 1 };
  s0 -> s4 [0, 65535] { R10460 += 1, R10384 += 1, R10339 += 1, R10340 += 1 };
  s0 -> s5 [66, 66] { R10460 += 1, R10384 += 1, R10340 += 1, R6638 += 1, R6639 += 1 };
  s0 -> s6 [66, 66] { R10460 += 1, R10384 += 1, R10340 += 1, R6637 += 1, R6638 += 1 };
  s0 -> s7 [66, 66] { R10460 += 1, R10384 += 1, R10340 += 1, R6637 += 1, R6638 += 1 };
  s0 -> s8 [66, 66] { R10460 += 1, R10384 += 1, R10340 += 1, R6638 += 1, R6639 += 1 };
  s0 -> s1 [67, 65535] { R10460 += 1, R10384 += 1, R10340 += 1, R6637 += 1, R6638 += 1 };
  s0 -> s2 [67, 65535] { R10460 += 1, R10384 += 1, R10340 += 1, R6638 += 1, R6639 += 1 };
  s1 -> s1 [0, 65] { R10460 += 1, R10384 += 1, R10340 += 1, R6637 += 1, R6638 += 1 };
  s1 -> s2 [0, 65] { R10460 += 1, R10384 += 1, R10340 += 1, R6638 += 1, R6639 += 1 };
  s1 -> s5 [66, 66] { R10460 += 1, R10384 += 1, R10340 += 1, R6638 += 1, R6639 += 1 };
  s1 -> s6 [66, 66] { R10460 += 1, R10384 += 1, R10340 += 1, R6637 += 1, R6638 += 1 };
  s1 -> s7 [66, 66] { R10460 += 1, R10384 += 1, R10340 += 1, R6637 += 1, R6638 += 1 };
  s1 -> s8 [66, 66] { R10460 += 1, R10384 += 1, R10340 += 1, R6638 += 1, R6639 += 1 };
  s1 -> s1 [67, 65535] { R10460 += 1, R10384 += 1, R10340 += 1, R6637 += 1, R6638 += 1 };
  s1 -> s2 [67, 65535] { R10460 += 1, R10384 += 1, R10340 += 1, R6638 += 1, R6639 += 1 };
  s2 -> s2 [0, 65] { R10460 += 1, R10384 += 1, R10340 += 1, R6638 += 1, R6639 += 1 };
  s2 -> s10 [0, 65535];
  s2 -> s2 [0, 65535] { R10460 += 1, R10384 += 1 };
  s2 -> s11 [0, 65535] { R10460 += 1 };
  s2 -> s5 [66, 66] { R10460 += 1, R10384 += 1, R10340 += 1, R6638 += 1, R6639 += 1 };
  s2 -> s8 [66, 66] { R10460 += 1, R10384 += 1, R10340 += 1, R6638 += 1, R6639 += 1 };
  s2 -> s2 [67, 65535] { R10460 += 1, R10384 += 1, R10340 += 1, R6638 += 1, R6639 += 1 };
  s3 -> s1 [0, 65] { R10460 += 1, R10384 += 1, R10340 += 1, R6637 += 1, R6638 += 1 };
  s3 -> s2 [0, 65] { R10460 += 1, R10384 += 1, R10340 += 1, R6638 += 1, R6639 += 1 };
  s3 -> s3 [0, 65535] { R10460 += 1, R10383 += 1, R10384 += 1 };
  s3 -> s4 [0, 65535] { R10460 += 1, R10384 += 1, R10339 += 1, R10340 += 1 };
  s3 -> s5 [66, 66] { R10460 += 1, R10384 += 1, R10340 += 1, R6638 += 1, R6639 += 1 };
  s3 -> s6 [66, 66] { R10460 += 1, R10384 += 1, R10340 += 1, R6637 += 1, R6638 += 1 };
  s3 -> s7 [66, 66] { R10460 += 1, R10384 += 1, R10340 += 1, R6637 += 1, R6638 += 1 };
  s3 -> s8 [66, 66] { R10460 += 1, R10384 += 1, R10340 += 1, R6638 += 1, R6639 += 1 };
  s3 -> s1 [67, 65535] { R10460 += 1, R10384 += 1, R10340 += 1, R6637 += 1, R6638 += 1 };
  s3 -> s2 [67, 65535] { R10460 += 1, R10384 += 1, R10340 += 1, R6638 += 1, R6639 += 1 };
  s4 -> s1 [0, 65] { R10460 += 1, R10384 += 1, R10340 += 1, R6637 += 1, R6638 += 1 };
  s4 -> s2 [0, 65] { R10460 += 1, R10384 += 1, R10340 += 1, R6638 += 1, R6639 += 1 };
  s4 -> s4 [0, 65535] { R10460 += 1, R10384 += 1, R10339 += 1, R10340 += 1 };
  s4 -> s5 [66, 66] { R10460 += 1, R10384 += 1, R10340 += 1, R6638 += 1, R6639 += 1 };
  s4 -> s6 [66, 66] { R10460 += 1, R10384 += 1, R10340 += 1, R6637 += 1, R6638 += 1 };
  s4 -> s7 [66, 66] { R10460 += 1, R10384 += 1, R10340 += 1, R6637 += 1, R6638 += 1 };
  s4 -> s8 [66, 66] { R10460 += 1, R10384 += 1, R10340 += 1, R6638 += 1, R6639 += 1 };
  s4 -> s1 [67, 65535] { R10460 += 1, R10384 += 1, R10340 += 1, R6637 += 1, R6638 += 1 };
  s4 -> s2 [67, 65535] { R10460 += 1, R10384 += 1, R10340 += 1, R6638 += 1, R6639 += 1 };
  s5 -> s10 [0, 65535];
  s5 -> s5 [0, 65535] { R10460 += 1, R10384 += 1 };
  s5 -> s11 [0, 65535] { R10460 += 1 };
  s6 -> s6 [0, 65535] { R10460 += 1, R10384 += 1, R10340 += 1, R6637 += 1, R6638 += 1 };
  s6 -> s8 [0, 65535] { R10460 += 1, R10384 += 1, R10340 += 1, R6638 += 1, R6639 += 1 };
  s8 -> s9 [0, 65535] { R10460 += 1, R10384 += 1 };
  s8 -> s10 [0, 65535];
  s8 -> s8 [0, 65535] { R10460 += 1, R10384 += 1, R10340 += 1, R6638 += 1, R6639 += 1 };
  s8 -> s11 [0, 65535] { R10460 += 1 };
  s9 -> s9 [0, 65535] { R10460 += 1, R10384 += 1 };
  s9 -> s10 [0, 65535];
  s9 -> s11 [0, 65535] { R10460 += 1 };
  s10 -> s10 [0, 65535];
  s11 -> s10 [0, 65535];
  s11 -> s11 [0, 65535] { R10460 += 1 };
  accepting s8, s5, s2, s9, s10, s11;
};
automaton value2_42 {
  init s0;
  s0 -> s1 [0, 65] { R10462 += 1, R10386 += 1, R10342 += 1, R8825 += 1, R8826 += 1 };
  s0 -> s2 [0, 65535] { R10462 += 1, R10386 += 1, R10341 += 1, R10342 += 1 };
  s0 -> s0 [0, 65535] { R10461 += 1, R10462 += 1 };
  s0 -> s3 [0, 65535] { R10462 += 1, R10385 += 1, R10386 += 1 };
  s0 -> s4 [66, 66] { R10462 += 1, R10386 += 1, R10342 += 1, R8825 += 1, R8826 += 1 };
  s0 -> s5 [66, 66] { R10462 += 1, R10386 += 1, R10342 += 1, R8825 += 1, R8826 += 1 };
  s0 -> s1 [67, 65535] { R10462 += 1, R10386 += 1, R10342 += 1, R8825 += 1, R8826 += 1 };
  s1 -> s1 [0, 65] { R10462 += 1, R10386 += 1, R10342 += 1, R8825 += 1, R8826 += 1 };
  s1 -> s6 [0, 65535] { R10462 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s1 [0, 65535] { R10462 += 1, R10386 += 1 };
  s1 -> s4 [66, 66] { R10462 += 1, R10386 += 1, R10342 += 1, R8825 += 1, R8826 += 1 };
  s1 -> s5 [66, 66] { R10462 += 1, R10386 += 1, R10342 += 1, R8825 += 1, R8826 += 1 };
  s1 -> s1 [67, 65535] { R10462 += 1, R10386 += 1, R10342 += 1, R8825 += 1, R8826 += 1 };
  s2 -> s1 [0, 65] { R10462 += 1, R10386 += 1, R10342 += 1, R8825 += 1, R8826 += 1 };
  s2 -> s2 [0, 65535] { R10462 += 1, R10386 += 1, R10341 += 1, R10342 += 1 };
  s2 -> s6 [0, 65535] { R10462 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s4 [66, 66] { R10462 += 1, R10386 += 1, R10342 += 1, R8825 += 1, R8826 += 1 };
  s2 -> s5 [66, 66] { R10462 += 1, R10386 += 1, R10342 += 1, R8825 += 1, R8826 += 1 };
  s2 -> s1 [67, 65535] { R10462 += 1, R10386 += 1, R10342 += 1, R8825 += 1, R8826 += 1 };
  s3 -> s1 [0, 65] { R10462 += 1, R10386 += 1, R10342 += 1, R8825 += 1, R8826 += 1 };
  s3 -> s2 [0, 65535] { R10462 += 1, R10386 += 1, R10341 += 1, R10342 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s3 [0, 65535] { R10462 += 1, R10385 += 1, R10386 += 1 };
  s3 -> s4 [66, 66] { R10462 += 1, R10386 += 1, R10342 += 1, R8825 += 1, R8826 += 1 };
  s3 -> s5 [66, 66] { R10462 += 1, R10386 += 1, R10342 += 1, R8825 += 1, R8826 += 1 };
  s3 -> s1 [67, 65535] { R10462 += 1, R10386 += 1, R10342 += 1, R8825 += 1, R8826 += 1 };
  s4 -> s6 [0, 65535] { R10462 += 1 };
  s4 -> s4 [0, 65535] { R10462 += 1, R10386 += 1 };
  s4 -> s7 [0, 65535];
  s5 -> s6 [0, 65535] { R10462 += 1 };
  s5 -> s7 [0, 65535];
  s5 -> s8 [0, 65535] { R10462 += 1, R10386 += 1 };
  s5 -> s5 [0, 65535] { R10462 += 1, R10386 += 1, R10342 += 1, R8825 += 1, R8826 += 1 };
  s6 -> s6 [0, 65535] { R10462 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  s8 -> s6 [0, 65535] { R10462 += 1 };
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R10462 += 1, R10386 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton value2_43 {
  init s0;
  s0 -> s1 [0, 65] { R10464 += 1, R10388 += 1, R10344 += 1, R10282 += 1, R10283 += 1 };
  s0 -> s2 [0, 65] { R10464 += 1, R10388 += 1, R10344 += 1, R10281 += 1, R10282 += 1 };
  s0 -> s0 [0, 65535] { R10463 += 1, R10464 += 1 };
  s0 -> s3 [0, 65535] { R10464 += 1, R10388 += 1, R10343 += 1, R10344 += 1 };
  s0 -> s4 [0, 65535] { R10464 += 1, R10387 += 1, R10388 += 1 };
  s0 -> s5 [66, 66] { R10464 += 1, R10388 += 1, R10344 += 1, R10281 += 1, R10282 += 1 };
  s0 -> s6 [66, 66] { R10464 += 1, R10388 += 1, R10344 += 1, R10281 += 1, R10282 += 1 };
  s0 -> s7 [66, 66] { R10464 += 1, R10388 += 1, R10344 += 1, R10282 += 1, R10283 += 1 };
  s0 -> s8 [66, 66] { R10464 += 1, R10388 += 1, R10344 += 1, R10282 += 1, R10283 += 1 };
  s0 -> s1 [67, 65535] { R10464 += 1, R10388 += 1, R10344 += 1, R10282 += 1, R10283 += 1 };
  s0 -> s2 [67, 65535] { R10464 += 1, R10388 += 1, R10344 += 1, R10281 += 1, R10282 += 1 };
  s1 -> s13 [0, 65] { R10464 += 1, R10388 += 1, R10344 += 1 };
  s1 -> s1 [0, 65] { R10464 += 1, R10388 += 1, R10344 += 1, R10282 += 1, R10283 += 1 };
  s1 -> s9 [66, 66] { R10464 += 1, R10388 += 1, R10344 += 1 };
  s1 -> s14 [66, 66] { R10464 += 1, R10388 += 1, R10344 += 1 };
  s1 -> s7 [66, 66] { R10464 += 1, R10388 += 1, R10344 += 1, R10282 += 1, R10283 += 1 };
  s1 -> s8 [66, 66] { R10464 += 1, R10388 += 1, R10344 += 1, R10282 += 1, R10283 += 1 };
  s1 -> s13 [67, 65535] { R10464 += 1, R10388 += 1, R10344 += 1 };
  s1 -> s1 [67, 65535] { R10464 += 1, R10388 += 1, R10344 += 1, R10282 += 1, R10283 += 1 };
  s2 -> s1 [0, 65] { R10464 += 1, R10388 += 1, R10344 += 1, R10282 += 1, R10283 += 1 };
  s2 -> s2 [0, 65] { R10464 += 1, R10388 += 1, R10344 += 1, R10281 += 1, R10282 += 1 };
  s2 -> s5 [66, 66] { R10464 += 1, R10388 += 1, R10344 += 1, R10281 += 1, R10282 += 1 };
  s2 -> s6 [66, 66] { R10464 += 1, R10388 += 1, R10344 += 1, R10281 += 1, R10282 += 1 };
  s2 -> s7 [66, 66] { R10464 += 1, R10388 += 1, R10344 += 1, R10282 += 1, R10283 += 1 };
  s2 -> s8 [66, 66] { R10464 += 1, R10388 += 1, R10344 += 1, R10282 += 1, R10283 += 1 };
  s2 -> s1 [67, 65535] { R10464 += 1, R10388 += 1, R10344 += 1, R10282 += 1, R10283 += 1 };
  s2 -> s2 [67, 65535] { R10464 += 1, R10388 += 1, R10344 += 1, R10281 += 1, R10282 += 1 };
  s3 -> s1 [0, 65] { R10464 += 1, R10388 += 1, R10344 += 1, R10282 += 1, R10283 += 1 };
  s3 -> s2 [0, 65] { R10464 += 1, R10388 += 1, R10344 += 1, R10281 += 1, R10282 += 1 };
  s3 -> s3 [0, 65535] { R10464 += 1, R10388 += 1, R10343 += 1, R10344 += 1 };
  s3 -> s5 [66, 66] { R10464 += 1, R10388 += 1, R10344 += 1, R10281 += 1, R10282 += 1 };
  s3 -> s6 [66, 66] { R10464 += 1, R10388 += 1, R10344 += 1, R10281 += 1, R10282 += 1 };
  s3 -> s7 [66, 66] { R10464 += 1, R10388 += 1, R10344 += 1, R10282 += 1, R10283 += 1 };
  s3 -> s8 [66, 66] { R10464 += 1, R10388 += 1, R10344 += 1, R10282 += 1, R10283 += 1 };
  s3 -> s1 [67, 65535] { R10464 += 1, R10388 += 1, R10344 += 1, R10282 += 1, R10283 += 1 };
  s3 -> s2 [67, 65535] { R10464 += 1, R10388 += 1, R10344 += 1, R10281 += 1, R10282 += 1 };
  s4 -> s1 [0, 65] { R10464 += 1, R10388 += 1, R10344 += 1, R10282 += 1, R10283 += 1 };
  s4 -> s2 [0, 65] { R10464 += 1, R10388 += 1, R10344 += 1, R10281 += 1, R10282 += 1 };
  s4 -> s3 [0, 65535] { R10464 += 1, R10388 += 1, R10343 += 1, R10344 += 1 };
  s4 -> s4 [0, 65535] { R10464 += 1, R10387 += 1, R10388 += 1 };
  s4 -> s5 [66, 66] { R10464 += 1, R10388 += 1, R10344 += 1, R10281 += 1, R10282 += 1 };
  s4 -> s6 [66, 66] { R10464 += 1, R10388 += 1, R10344 += 1, R10281 += 1, R10282 += 1 };
  s4 -> s7 [66, 66] { R10464 += 1, R10388 += 1, R10344 += 1, R10282 += 1, R10283 += 1 };
  s4 -> s8 [66, 66] { R10464 += 1, R10388 += 1, R10344 += 1, R10282 += 1, R10283 += 1 };
  s4 -> s1 [67, 65535] { R10464 += 1, R10388 += 1, R10344 += 1, R10282 += 1, R10283 += 1 };
  s4 -> s2 [67, 65535] { R10464 += 1, R10388 += 1, R10344 += 1, R10281 += 1, R10282 += 1 };
  s6 -> s6 [0, 65535] { R10464 += 1, R10388 += 1, R10344 += 1, R10281 += 1, R10282 += 1 };
  s6 -> s8 [0, 65535] { R10464 += 1, R10388 += 1, R10344 += 1, R10282 += 1, R10283 += 1 };
  s8 -> s9 [0, 65535] { R10464 += 1, R10388 += 1, R10344 += 1 };
  s8 -> s8 [0, 65535] { R10464 += 1, R10388 += 1, R10344 += 1, R10282 += 1, R10283 += 1 };
  s9 -> s9 [0, 65535] { R10464 += 1, R10388 += 1, R10344 += 1 };
  s9 -> s10 [0, 65535] { R10464 += 1, R10388 += 1 };
  s9 -> s11 [0, 65535] { R10464 += 1 };
  s9 -> s12 [0, 65535];
  s10 -> s10 [0, 65535] { R10464 += 1, R10388 += 1 };
  s10 -> s11 [0, 65535] { R10464 += 1 };
  s10 -> s12 [0, 65535];
  s11 -> s11 [0, 65535] { R10464 += 1 };
  s11 -> s12 [0, 65535];
  s12 -> s12 [0, 65535];
  s13 -> s13 [0, 65] { R10464 += 1, R10388 += 1, R10344 += 1 };
  s13 -> s11 [0, 65535] { R10464 += 1 };
  s13 -> s12 [0, 65535];
  s13 -> s13 [0, 65535] { R10464 += 1, R10388 += 1 };
  s13 -> s9 [66, 66] { R10464 += 1, R10388 += 1, R10344 += 1 };
  s13 -> s14 [66, 66] { R10464 += 1, R10388 += 1, R10344 += 1 };
  s13 -> s13 [67, 65535] { R10464 += 1, R10388 += 1, R10344 += 1 };
  s14 -> s14 [0, 65535] { R10464 += 1, R10388 += 1 };
  s14 -> s11 [0, 65535] { R10464 += 1 };
  s14 -> s12 [0, 65535];
  accepting s12, s13, s9, s14, s10, s11;
};
automaton value2_44 {
  init s0;
  s0 -> s1 [0, 65] { R10466 += 1, R10390 += 1, R10346 += 1, R10287 += 1, R10288 += 1 };
  s0 -> s2 [0, 65535] { R10466 += 1, R10390 += 1, R10345 += 1, R10346 += 1 };
  s0 -> s0 [0, 65535] { R10465 += 1, R10466 += 1 };
  s0 -> s3 [0, 65535] { R10466 += 1, R10389 += 1, R10390 += 1 };
  s0 -> s4 [66, 66] { R10466 += 1, R10390 += 1, R10346 += 1, R10287 += 1, R10288 += 1 };
  s0 -> s5 [66, 66] { R10466 += 1, R10390 += 1, R10346 += 1, R10287 += 1, R10288 += 1 };
  s0 -> s1 [67, 65535] { R10466 += 1, R10390 += 1, R10346 += 1, R10287 += 1, R10288 += 1 };
  s1 -> s1 [0, 65] { R10466 += 1, R10390 += 1, R10346 += 1, R10287 += 1, R10288 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R10466 += 1, R10390 += 1 };
  s1 -> s7 [0, 65535] { R10466 += 1 };
  s1 -> s4 [66, 66] { R10466 += 1, R10390 += 1, R10346 += 1, R10287 += 1, R10288 += 1 };
  s1 -> s5 [66, 66] { R10466 += 1, R10390 += 1, R10346 += 1, R10287 += 1, R10288 += 1 };
  s1 -> s1 [67, 65535] { R10466 += 1, R10390 += 1, R10346 += 1, R10287 += 1, R10288 += 1 };
  s2 -> s1 [0, 65] { R10466 += 1, R10390 += 1, R10346 += 1, R10287 += 1, R10288 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R10466 += 1, R10390 += 1, R10345 += 1, R10346 += 1 };
  s2 -> s7 [0, 65535] { R10466 += 1 };
  s2 -> s4 [66, 66] { R10466 += 1, R10390 += 1, R10346 += 1, R10287 += 1, R10288 += 1 };
  s2 -> s5 [66, 66] { R10466 += 1, R10390 += 1, R10346 += 1, R10287 += 1, R10288 += 1 };
  s2 -> s1 [67, 65535] { R10466 += 1, R10390 += 1, R10346 += 1, R10287 += 1, R10288 += 1 };
  s3 -> s1 [0, 65] { R10466 += 1, R10390 += 1, R10346 += 1, R10287 += 1, R10288 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s2 [0, 65535] { R10466 += 1, R10390 += 1, R10345 += 1, R10346 += 1 };
  s3 -> s3 [0, 65535] { R10466 += 1, R10389 += 1, R10390 += 1 };
  s3 -> s4 [66, 66] { R10466 += 1, R10390 += 1, R10346 += 1, R10287 += 1, R10288 += 1 };
  s3 -> s5 [66, 66] { R10466 += 1, R10390 += 1, R10346 += 1, R10287 += 1, R10288 += 1 };
  s3 -> s1 [67, 65535] { R10466 += 1, R10390 += 1, R10346 += 1, R10287 += 1, R10288 += 1 };
  s4 -> s4 [0, 65535] { R10466 += 1, R10390 += 1, R10346 += 1, R10287 += 1, R10288 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s8 [0, 65535] { R10466 += 1, R10390 += 1 };
  s4 -> s7 [0, 65535] { R10466 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R10466 += 1, R10390 += 1 };
  s5 -> s7 [0, 65535] { R10466 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R10466 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R10466 += 1, R10390 += 1 };
  s8 -> s7 [0, 65535] { R10466 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
};
synchronised {  // Automata constraining P37
automaton P37_0 {
  init s0;
  s0 -> s1 [9, 9];
  accepting s1;
};
};
synchronised {  // Automata constraining P38
automaton P38_0 {
  init s0;
  s0 -> s1 [10, 10];
  accepting s1;
};
};
synchronised {  // Automata constraining P36
automaton P36_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
constraint R1 = R10306 && R2 = R10390 && R3 - R10466 = 1 && R23 - R10390 = -1 && R24 = R10390 && R25 - R10390 = -1 && R26 = R10390 && R27 = 0 && R28 = 1 && R29 = 0 && R30 = 1 && R31 = R10466 && R32 - R10466 = 1 && R33 = R10466 && R34 - R10466 = 1 && R35 = 0 && R36 = 1 && R37 = 0 && R38 = 1 && R49 + R78 + R77 + -1*R8828 + -1*R8826 - R64 = 0 && R63 + R8827 + R8825 = 0 && R10305 = 0 && R10331 = 0 && R10332 = 0 && R10339 = 0 && R10340 = 0 && R10343 = 0 && R10344 = 0 && R10347 = 0 && R10348 = R10390 && R10349 = 0 && R10350 = R10390 && R10351 = 0 && R10352 = R10390 && R10353 = 0 && R10354 = R10390 && R10355 = 0 && R10356 = R10390 && R10357 = 0 && R10358 = R10390 && R10359 = 0 && R10360 = R10390 && R10361 = 0 && R10362 = R10390 && R10363 = 0 && R10364 = R10390 && R10365 = 0 && R10366 = R10390 && R10367 = 0 && R10368 = R10390 && R10369 = 0 && R10370 = R10390 && R10371 = 0 && R10372 = R10390 && R10373 = 0 && R10374 = R10390 && R10375 = 0 && R10376 = R10390 && R10377 = 0 && R10378 = R10390 && R10379 = 0 && R10380 = R10390 && R10381 = 0 && R10382 = R10390 && R10383 = 0 && R10384 = R10390 && R10385 = 0 && R10386 = R10390 && R10387 = 0 && R10388 = R10390 && R10389 = 0 && R10391 = 0 && R10392 = R10466 && R10393 = 0 && R10394 = R10466 && R10395 = 0 && R10396 = R10466 && R10397 = 0 && R10398 = R10466 && R10399 = 0 && R10400 = R10466 && R10401 = 0 && R10402 = R10466 && R10403 = 0 && R10404 = R10466 && R10405 = 0 && R10406 = R10466 && R10407 = 0 && R10408 = R10466 && R10409 = 0 && R10410 = R10466 && R10411 = 0 && R10412 = R10466 && R10413 = 0 && R10414 = R10466 && R10415 = 0 && R10416 = R10466 && R10417 = 0 && R10418 = R10466 && R10419 = 0 && R10420 = R10466 && R10421 = 0 && R10422 = R10466 && R10423 = 0 && R10424 = R10466 && R10425 = 0 && R10426 = R10466 && R10427 = 0 && R10428 = R10466 && R10429 = 0 && R10430 = R10466 && R10431 = 0 && R10432 = R10466 && R10433 = 0 && R10434 = R10466 && R10435 = 0 && R10436 = R10466 && R10437 = 0 && R10438 = R10466 && R10439 = 0 && R10440 = R10466 && R10441 = 0 && R10442 = R10466 && R10443 = 0 && R10444 = R10466 && R10445 = 0 && R10446 = R10466 && R10447 = 0 && R10448 = R10466 && R10449 = 0 && R10450 = R10466 && R10451 = 0 && R10452 = R10466 && R10453 = 0 && R10454 = R10466 && R10455 = 0 && R10456 = R10466 && R10457 = 0 && R10458 = R10466 && R10459 = 0 && R10460 = R10466 && R10461 = 0 && R10462 = R10466 && R10463 = 0 && R10464 = R10466 && R10465 = 0 && R11 < 1 && R14 < 1 && R17 < 1 && R51 + R80 + R79 < 1 && -1*R8828 + -1*R8826 - R64 < 1 && -1 < R10306 && 0 < R10390 && -1 < R10466 && (R59 + R6642 + R6639 != 0 || ((R53 + R83 + R81 != 0 || R54 + R84 + R82 + -1*R8828 + -1*R8826 - R64 = 0 || R64 + R8828 + R8826 < 1) && (R53 + R83 + R81 = 0 || R64 + R8828 + R8826 < 1))) && (R59 + R6642 + R6639 != 0 || ((R57 + R6640 + R6637 != 0 || R58 + R6641 + R6638 + -1*R8828 + -1*R8826 - R64 = 0 || R64 + R8828 + R8826 < 1) && (R57 + R6640 + R6637 = 0 || R64 + R8828 + R8826 < 1))) && (R10291 != 0 || R10292 = R10306 || (R20 = 0 && R10306 = 0)) && (R10293 != 0 || R10294 = R10306 || (R20 = 0 && R10306 = 0)) && (R10295 != 0 || R10296 = R10306 || (R20 = 0 && R10306 = 0)) && (R10297 != 0 || R10298 = R10306 || (R20 = 0 && R10306 = 0)) && (R10299 != 0 || R10300 = R10306 || (R20 = 0 && R10306 = 0)) && (R10301 != 0 || R10302 = R10306 || (R20 = 0 && R10306 = 0)) && (R10303 != 0 || R10304 = R10306 || (R20 = 0 && R10306 = 0)) && (R10307 != 0 || R10306 = R10308 || (R20 = 0 && R10306 = 0)) && (R10309 != 0 || R10306 = R10310 || (R20 = 0 && R10306 = 0)) && (R21 = 0 || (R10329 = 0 && R10330 = 0)) && (R21 = 0 || (R10333 = 0 && R10334 = 0)) && (R21 = 0 || (R10335 = 0 && R10336 = 0)) && (R21 = 0 || (R10337 = 0 && R10338 = 0)) && (R21 = 0 || (R10341 = 0 && R10342 = 0)) && (R21 = 0 || (R10345 = 0 && R10346 = 0)) && (R22 = 0 || (R10311 = 0 && R10312 = 0)) && (R22 = 0 || (R10313 = 0 && R10314 = 0)) && (R22 = 0 || (R10315 = 0 && R10316 = 0)) && (R22 = 0 || (R10317 = 0 && R10318 = 0)) && (R22 = 0 || (R10319 = 0 && R10320 = 0)) && (R22 = 0 || (R10321 = 0 && R10322 = 0)) && (R22 = 0 || (R10323 = 0 && R10324 = 0)) && (R22 = 0 || (R10325 = 0 && R10326 = 0)) && (R22 = 0 || (R10327 = 0 && R10328 = 0)) && (R59 + R6642 + R6639 = 0 || (R53 + R83 + R81 = 0 && R54 + R84 + R82 + -1*R8828 + -1*R8826 - R64 = 0)) && (R59 + R6642 + R6639 = 0 || (R57 + R6640 + R6637 = 0 && R58 + R6641 + R6638 + -1*R8828 + -1*R8826 - R64 = 0)) && (R69 + R10286 + R10283 = 0 || (R67 + R10284 + R10281 = 0 && R68 + R10285 + R10282 = 0)) && (R69 + R10286 + R10283 = 0 || (R73 + R10289 + R10287 = 0 && R74 + R10290 + R10288 = 0)) && (R10291 = 0 || (R20 = 0 && R10306 = 0)) && (R10293 = 0 || (R20 = 0 && R10306 = 0)) && (R10295 = 0 || (R20 = 0 && R10306 = 0)) && (R10297 = 0 || (R20 = 0 && R10306 = 0)) && (R10299 = 0 || (R20 = 0 && R10306 = 0)) && (R10301 = 0 || (R20 = 0 && R10306 = 0)) && (R10303 = 0 || (R20 = 0 && R10306 = 0)) && (R10307 = 0 || (R20 = 0 && R10306 = 0)) && (R10309 = 0 || (R20 = 0 && R10306 = 0));
// End of Parikh automata intersection problem
