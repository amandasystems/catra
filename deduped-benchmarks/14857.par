// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R12, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R70, R71, R72, R73, R7706, R7707, R7708, R7709, R7710, R7711, R7712, R7713, R7714, R7715, R8, R8560, R8561, R8562, R8563, R8564, R8565, R8774, R8775, R8776, R8777, R8778, R8779, R8780, R8781, R8782, R8783, R8784, R8785, R8786, R8787, R8788, R8789, R8790, R8791, R8792, R8793, R8794, R8795, R8796, R8797, R8798, R8799, R8800, R8801, R8802, R8803, R8804, R8805, R8806, R8807, R8808, R8809, R8810, R8811, R8812, R8813, R8814, R8815, R8816, R8817, R8818, R8819, R8820, R8821, R8822, R8823, R8824, R8825, R8826, R8827, R8828, R8829, R8830, R8831, R8832, R8833, R8834, R8835, R8836, R8837, R8838, R8839, R8840, R8841, R8842, R8843, R8844, R8845, R8846, R8847, R8848, R8849, R8850, R8851, R8852, R8853, R8854, R8855, R8856, R8857, R8858, R8859, R8860, R8861, R8862, R8863, R8864, R8865, R8866, R8867, R8868, R8869, R8870, R8871, R8872, R8873, R8874, R8875, R8876, R8877;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 72];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [73, 73];
  s0 -> s1 [74, 65535];
  s1 -> s1 [0, 72];
  s1 -> s2 [73, 73];
  s1 -> s1 [74, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s1 [0, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R25 += 1 };
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R8799 += 1, R19 += 1 };
  s0 -> s0 [0, 65535] { R8798 += 1, R8799 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R8799 += 1, R19 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 72] { R8801 += 1 };
  s0 -> s0 [0, 65535] { R8800 += 1, R8801 += 1 };
  s0 -> s2 [73, 73] { R8801 += 1 };
  s0 -> s3 [73, 73] { R8801 += 1 };
  s0 -> s1 [82, 65535] { R8801 += 1 };
  s1 -> s1 [0, 72] { R8801 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R8801 += 1 };
  s1 -> s3 [73, 73] { R8801 += 1 };
  s1 -> s1 [82, 65535] { R8801 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 73] { R8801 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [82, 65535] { R8801 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 72] { R8803 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R8802 += 1, R8803 += 1 };
  s0 -> s2 [73, 73] { R8803 += 1, R38 += 1 };
  s0 -> s3 [73, 73] { R8803 += 1, R38 += 1 };
  s0 -> s1 [74, 65535] { R8803 += 1, R38 += 1 };
  s1 -> s1 [0, 72] { R8803 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R8803 += 1, R38 += 1 };
  s1 -> s3 [73, 73] { R8803 += 1, R38 += 1 };
  s1 -> s1 [74, 65535] { R8803 += 1, R38 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8803 += 1, R38 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 72] { R8805 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R8804 += 1, R8805 += 1 };
  s0 -> s2 [73, 73] { R8805 += 1, R40 += 1 };
  s0 -> s3 [73, 73] { R8805 += 1, R40 += 1 };
  s0 -> s1 [74, 65535] { R8805 += 1, R40 += 1 };
  s1 -> s1 [0, 72] { R8805 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R8805 += 1, R40 += 1 };
  s1 -> s3 [73, 73] { R8805 += 1, R40 += 1 };
  s1 -> s1 [74, 65535] { R8805 += 1, R40 += 1 };
  s2 -> s2 [0, 65535] { R8805 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 72] { R8807 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R8806 += 1, R8807 += 1 };
  s0 -> s2 [73, 73] { R8807 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [73, 73] { R8807 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [74, 65535] { R8807 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 72] { R8807 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R8807 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [73, 73] { R8807 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [74, 65535] { R8807 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8807 += 1, R42 += 1, R43 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 72] { R8809 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R8808 += 1, R8809 += 1 };
  s0 -> s2 [73, 73] { R8809 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [73, 73] { R8809 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [74, 65535] { R8809 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 72] { R8809 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R8809 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [73, 73] { R8809 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [74, 65535] { R8809 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8809 += 1, R46 += 1, R47 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 72] { R8811 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R8810 += 1, R8811 += 1 };
  s0 -> s2 [73, 73] { R8811 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [73, 73] { R8811 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [74, 65535] { R8811 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 72] { R8811 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R8811 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [73, 73] { R8811 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [74, 65535] { R8811 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8811 += 1, R52 += 1, R53 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 72] { R8813 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R8812 += 1, R8813 += 1 };
  s0 -> s2 [73, 73] { R8813 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [73, 73] { R8813 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [74, 65535] { R8813 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 72] { R8813 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R8813 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [73, 73] { R8813 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [74, 65535] { R8813 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535] { R8813 += 1, R56 += 1, R57 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 72] { R8815 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R8814 += 1, R8815 += 1 };
  s0 -> s2 [73, 73] { R8815 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [73, 73] { R8815 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [74, 65535] { R8815 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 72] { R8815 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R8815 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [73, 73] { R8815 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [74, 65535] { R8815 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535] { R8815 += 1, R62 += 1, R63 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 72] { R8835 += 1 };
  s0 -> s0 [0, 65535] { R8834 += 1, R8835 += 1 };
  s0 -> s2 [73, 73] { R8835 += 1 };
  s0 -> s1 [74, 65535] { R8835 += 1 };
  s1 -> s1 [0, 72] { R8835 += 1 };
  s1 -> s2 [73, 73] { R8835 += 1 };
  s1 -> s1 [74, 65535] { R8835 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R8835 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R8836 += 1, R8837 += 1 };
  s0 -> s1 [0, 65535] { R8837 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R8837 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 72] { R8839 += 1 };
  s0 -> s2 [0, 65535] { R8839 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R8838 += 1, R8839 += 1 };
  s0 -> s3 [73, 73] { R8839 += 1 };
  s0 -> s1 [74, 65535] { R8839 += 1 };
  s1 -> s1 [0, 72] { R8839 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [73, 73] { R8839 += 1 };
  s1 -> s1 [74, 65535] { R8839 += 1 };
  s2 -> s1 [0, 72] { R8839 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8839 += 1, R8 += 1 };
  s2 -> s3 [73, 73] { R8839 += 1 };
  s2 -> s1 [74, 65535] { R8839 += 1 };
  s3 -> s3 [0, 65535] { R8839 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 72] { R8841 += 1, R8779 += 1 };
  s0 -> s2 [0, 65535] { R8841 += 1, R8778 += 1, R8779 += 1 };
  s0 -> s0 [0, 65535] { R8840 += 1, R8841 += 1 };
  s0 -> s1 [74, 65535] { R8841 += 1, R8779 += 1 };
  s1 -> s1 [0, 72] { R8841 += 1, R8779 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R8841 += 1 };
  s1 -> s1 [74, 65535] { R8841 += 1, R8779 += 1 };
  s2 -> s1 [0, 72] { R8841 += 1, R8779 += 1 };
  s2 -> s2 [0, 65535] { R8841 += 1, R8778 += 1, R8779 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [74, 65535] { R8841 += 1, R8779 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s0 [0, 65535] { R8842 += 1, R8843 += 1 };
  s0 -> s1 [0, 65535] { R8843 += 1, R8781 += 1, R17 += 1 };
  s0 -> s2 [0, 65535] { R8843 += 1, R8780 += 1, R8781 += 1 };
  s1 -> s1 [0, 65535] { R8843 += 1, R8781 += 1, R17 += 1 };
  s1 -> s4 [0, 65535] { R8843 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R8843 += 1, R8781 += 1, R17 += 1 };
  s2 -> s2 [0, 65535] { R8843 += 1, R8780 += 1, R8781 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8843 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 73] { R8845 += 1, R8783 += 1 };
  s0 -> s2 [0, 65535] { R8845 += 1, R8782 += 1, R8783 += 1 };
  s0 -> s0 [0, 65535] { R8844 += 1, R8845 += 1 };
  s0 -> s1 [81, 65535] { R8845 += 1, R8783 += 1 };
  s1 -> s1 [0, 73] { R8845 += 1, R8783 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R8845 += 1 };
  s1 -> s1 [81, 65535] { R8845 += 1, R8783 += 1 };
  s2 -> s1 [0, 73] { R8845 += 1, R8783 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R8845 += 1, R8782 += 1, R8783 += 1 };
  s2 -> s1 [81, 65535] { R8845 += 1, R8783 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s0 [0, 65535] { R8846 += 1, R8847 += 1 };
  s0 -> s1 [0, 65535] { R8847 += 1, R8784 += 1, R8785 += 1 };
  s0 -> s2 [0, 65535] { R8847 += 1, R8785 += 1, R67 += 1 };
  s1 -> s1 [0, 65535] { R8847 += 1, R8784 += 1, R8785 += 1 };
  s1 -> s2 [0, 65535] { R8847 += 1, R8785 += 1, R67 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R8847 += 1 };
  s2 -> s2 [0, 65535] { R8847 += 1, R8785 += 1, R67 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8847 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 80] { R8849 += 1, R8787 += 1 };
  s0 -> s2 [0, 65535] { R8849 += 1, R8786 += 1, R8787 += 1 };
  s0 -> s0 [0, 65535] { R8848 += 1, R8849 += 1 };
  s0 -> s3 [0, 65535] { R8849 += 1, R8787 += 1, R69 += 1 };
  s0 -> s1 [82, 65535] { R8849 += 1, R8787 += 1 };
  s1 -> s1 [0, 80] { R8849 += 1, R8787 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R8849 += 1 };
  s1 -> s1 [82, 65535] { R8849 += 1, R8787 += 1 };
  s2 -> s1 [0, 80] { R8849 += 1, R8787 += 1 };
  s2 -> s2 [0, 65535] { R8849 += 1, R8786 += 1, R8787 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R8849 += 1, R8787 += 1, R69 += 1 };
  s2 -> s1 [82, 65535] { R8849 += 1, R8787 += 1 };
  s3 -> s1 [0, 80] { R8849 += 1, R8787 += 1 };
  s3 -> s4 [0, 65535] { R8849 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R8849 += 1, R8787 += 1, R69 += 1 };
  s3 -> s1 [82, 65535] { R8849 += 1, R8787 += 1 };
  s4 -> s4 [0, 65535] { R8849 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 80] { R8851 += 1, R8789 += 1, R73 += 1 };
  s0 -> s2 [0, 65535] { R8851 += 1, R8789 += 1, R72 += 1, R73 += 1 };
  s0 -> s3 [0, 65535] { R8851 += 1, R8788 += 1, R8789 += 1 };
  s0 -> s0 [0, 65535] { R8850 += 1, R8851 += 1 };
  s0 -> s1 [82, 65535] { R8851 += 1, R8789 += 1, R73 += 1 };
  s1 -> s1 [0, 80] { R8851 += 1, R8789 += 1, R73 += 1 };
  s1 -> s5 [0, 65535] { R8851 += 1 };
  s1 -> s1 [0, 65535] { R8851 += 1, R8789 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [82, 65535] { R8851 += 1, R8789 += 1, R73 += 1 };
  s2 -> s1 [0, 80] { R8851 += 1, R8789 += 1, R73 += 1 };
  s2 -> s5 [0, 65535] { R8851 += 1 };
  s2 -> s2 [0, 65535] { R8851 += 1, R8789 += 1, R72 += 1, R73 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [82, 65535] { R8851 += 1, R8789 += 1, R73 += 1 };
  s3 -> s1 [0, 80] { R8851 += 1, R8789 += 1, R73 += 1 };
  s3 -> s2 [0, 65535] { R8851 += 1, R8789 += 1, R72 += 1, R73 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8851 += 1, R8788 += 1, R8789 += 1 };
  s3 -> s1 [82, 65535] { R8851 += 1, R8789 += 1, R73 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8851 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R8853 += 1, R8790 += 1, R8791 += 1 };
  s0 -> s0 [0, 65535] { R8852 += 1, R8853 += 1 };
  s0 -> s2 [0, 65535] { R8853 += 1, R8791 += 1 };
  s1 -> s1 [0, 65535] { R8853 += 1, R8790 += 1, R8791 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R8853 += 1, R8791 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R8853 += 1 };
  s2 -> s2 [0, 65535] { R8853 += 1, R8791 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8853 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 81] { R8855 += 1, R8793 += 1, R7715 += 1 };
  s0 -> s1 [0, 65535] { R8855 += 1, R8793 += 1 };
  s0 -> s0 [0, 65535] { R8854 += 1, R8855 += 1 };
  s0 -> s2 [0, 65535] { R8855 += 1, R8792 += 1, R8793 += 1 };
  s0 -> s1 [84, 65535] { R8855 += 1, R8793 += 1, R7715 += 1 };
  s1 -> s1 [0, 81] { R8855 += 1, R8793 += 1, R7715 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R8855 += 1 };
  s1 -> s1 [0, 65535] { R8855 += 1, R8793 += 1 };
  s1 -> s1 [84, 65535] { R8855 += 1, R8793 += 1, R7715 += 1 };
  s2 -> s1 [0, 81] { R8855 += 1, R8793 += 1, R7715 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R8855 += 1, R8793 += 1 };
  s2 -> s2 [0, 65535] { R8855 += 1, R8792 += 1, R8793 += 1 };
  s2 -> s1 [84, 65535] { R8855 += 1, R8793 += 1, R7715 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8855 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R8857 += 1, R8794 += 1, R8795 += 1 };
  s0 -> s0 [0, 65535] { R8856 += 1, R8857 += 1 };
  s0 -> s2 [0, 65535] { R8857 += 1, R8795 += 1 };
  s1 -> s1 [0, 65535] { R8857 += 1, R8794 += 1, R8795 += 1 };
  s1 -> s2 [0, 65535] { R8857 += 1, R8795 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8857 += 1, R8795 += 1 };
  s2 -> s3 [0, 65535] { R8857 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8857 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 81] { R8859 += 1, R8797 += 1, R8777 += 1 };
  s0 -> s1 [0, 65535] { R8859 += 1, R8797 += 1 };
  s0 -> s0 [0, 65535] { R8858 += 1, R8859 += 1 };
  s0 -> s2 [0, 65535] { R8859 += 1, R8796 += 1, R8797 += 1 };
  s0 -> s1 [85, 65535] { R8859 += 1, R8797 += 1, R8777 += 1 };
  s1 -> s1 [0, 81] { R8859 += 1, R8797 += 1, R8777 += 1 };
  s1 -> s1 [0, 65535] { R8859 += 1, R8797 += 1 };
  s1 -> s4 [0, 65535] { R8859 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [85, 65535] { R8859 += 1, R8797 += 1, R8777 += 1 };
  s2 -> s1 [0, 81] { R8859 += 1, R8797 += 1, R8777 += 1 };
  s2 -> s1 [0, 65535] { R8859 += 1, R8797 += 1 };
  s2 -> s2 [0, 65535] { R8859 += 1, R8796 += 1, R8797 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [85, 65535] { R8859 += 1, R8797 += 1, R8777 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8859 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R8861 += 1, R8817 += 1, R18 += 1 };
  s0 -> s2 [0, 65535] { R8861 += 1, R8816 += 1, R8817 += 1 };
  s0 -> s0 [0, 65535] { R8860 += 1, R8861 += 1 };
  s1 -> s1 [0, 65535] { R8861 += 1, R8817 += 1, R18 += 1 };
  s1 -> s4 [0, 65535] { R8861 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R8861 += 1, R8817 += 1, R18 += 1 };
  s2 -> s2 [0, 65535] { R8861 += 1, R8816 += 1, R8817 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8861 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 72] { R8863 += 1, R8819 += 1 };
  s0 -> s0 [0, 65535] { R8862 += 1, R8863 += 1 };
  s0 -> s2 [0, 65535] { R8863 += 1, R8818 += 1, R8819 += 1 };
  s0 -> s3 [73, 73] { R8863 += 1, R8819 += 1 };
  s0 -> s4 [73, 73] { R8863 += 1, R8819 += 1 };
  s0 -> s5 [81, 81] { R8863 += 1, R8819 += 1 };
  s0 -> s1 [82, 65535] { R8863 += 1, R8819 += 1 };
  s1 -> s1 [0, 72] { R8863 += 1, R8819 += 1 };
  s1 -> s3 [73, 73] { R8863 += 1, R8819 += 1 };
  s1 -> s4 [73, 73] { R8863 += 1, R8819 += 1 };
  s1 -> s5 [81, 81] { R8863 += 1, R8819 += 1 };
  s1 -> s1 [82, 65535] { R8863 += 1, R8819 += 1 };
  s2 -> s1 [0, 72] { R8863 += 1, R8819 += 1 };
  s2 -> s2 [0, 65535] { R8863 += 1, R8818 += 1, R8819 += 1 };
  s2 -> s3 [73, 73] { R8863 += 1, R8819 += 1 };
  s2 -> s4 [73, 73] { R8863 += 1, R8819 += 1 };
  s2 -> s5 [81, 81] { R8863 += 1, R8819 += 1 };
  s2 -> s1 [82, 65535] { R8863 += 1, R8819 += 1 };
  s3 -> s3 [0, 73] { R8863 += 1, R8819 += 1 };
  s3 -> s8 [81, 81] { R8863 += 1, R8819 += 1 };
  s3 -> s3 [82, 65535] { R8863 += 1, R8819 += 1 };
  s5 -> s5 [0, 72] { R8863 += 1, R8819 += 1 };
  s5 -> s5 [0, 65535] { R8863 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [73, 73] { R8863 += 1, R8819 += 1 };
  s5 -> s8 [73, 73] { R8863 += 1, R8819 += 1 };
  s5 -> s5 [81, 65535] { R8863 += 1, R8819 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R8863 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 73] { R8863 += 1, R8819 += 1 };
  s8 -> s8 [0, 65535] { R8863 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [81, 65535] { R8863 += 1, R8819 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 72] { R8865 += 1, R8821 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R8864 += 1, R8865 += 1 };
  s0 -> s2 [0, 65535] { R8865 += 1, R8820 += 1, R8821 += 1 };
  s0 -> s3 [73, 73] { R8865 += 1, R8821 += 1, R66 += 1 };
  s0 -> s4 [73, 73] { R8865 += 1, R8821 += 1, R66 += 1 };
  s0 -> s1 [74, 65535] { R8865 += 1, R8821 += 1, R66 += 1 };
  s1 -> s1 [0, 72] { R8865 += 1, R8821 += 1, R66 += 1 };
  s1 -> s1 [0, 65535] { R8865 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R8865 += 1, R8821 += 1, R66 += 1 };
  s1 -> s4 [73, 73] { R8865 += 1, R8821 += 1, R66 += 1 };
  s1 -> s1 [74, 65535] { R8865 += 1, R8821 += 1, R66 += 1 };
  s2 -> s1 [0, 72] { R8865 += 1, R8821 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R8865 += 1, R8820 += 1, R8821 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R8865 += 1, R8821 += 1, R66 += 1 };
  s2 -> s4 [73, 73] { R8865 += 1, R8821 += 1, R66 += 1 };
  s2 -> s1 [74, 65535] { R8865 += 1, R8821 += 1, R66 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R8865 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R8865 += 1 };
  s4 -> s4 [0, 65535] { R8865 += 1, R8821 += 1, R66 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8865 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 72] { R8867 += 1, R8823 += 1, R68 += 1 };
  s0 -> s2 [0, 65535] { R8867 += 1, R8822 += 1, R8823 += 1 };
  s0 -> s0 [0, 65535] { R8866 += 1, R8867 += 1 };
  s0 -> s3 [73, 73] { R8867 += 1, R8823 += 1, R68 += 1 };
  s0 -> s4 [73, 73] { R8867 += 1, R8823 += 1, R68 += 1 };
  s0 -> s1 [74, 65535] { R8867 += 1, R8823 += 1, R68 += 1 };
  s1 -> s1 [0, 72] { R8867 += 1, R8823 += 1, R68 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R8867 += 1 };
  s1 -> s3 [73, 73] { R8867 += 1, R8823 += 1, R68 += 1 };
  s1 -> s4 [73, 73] { R8867 += 1, R8823 += 1, R68 += 1 };
  s1 -> s1 [74, 65535] { R8867 += 1, R8823 += 1, R68 += 1 };
  s2 -> s1 [0, 72] { R8867 += 1, R8823 += 1, R68 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R8867 += 1, R8822 += 1, R8823 += 1 };
  s2 -> s3 [73, 73] { R8867 += 1, R8823 += 1, R68 += 1 };
  s2 -> s4 [73, 73] { R8867 += 1, R8823 += 1, R68 += 1 };
  s2 -> s1 [74, 65535] { R8867 += 1, R8823 += 1, R68 += 1 };
  s3 -> s3 [0, 65535] { R8867 += 1, R8823 += 1, R68 += 1 };
  s3 -> s6 [0, 65535] { R8867 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8867 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8867 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 72] { R8869 += 1, R8825 += 1, R70 += 1, R71 += 1 };
  s0 -> s2 [0, 65535] { R8869 += 1, R8824 += 1, R8825 += 1 };
  s0 -> s0 [0, 65535] { R8868 += 1, R8869 += 1 };
  s0 -> s3 [73, 73] { R8869 += 1, R8825 += 1, R70 += 1, R71 += 1 };
  s0 -> s4 [73, 73] { R8869 += 1, R8825 += 1, R70 += 1, R71 += 1 };
  s0 -> s1 [74, 65535] { R8869 += 1, R8825 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 72] { R8869 += 1, R8825 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 65535] { R8869 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R8869 += 1, R8825 += 1, R70 += 1, R71 += 1 };
  s1 -> s4 [73, 73] { R8869 += 1, R8825 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [74, 65535] { R8869 += 1, R8825 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [0, 72] { R8869 += 1, R8825 += 1, R70 += 1, R71 += 1 };
  s2 -> s2 [0, 65535] { R8869 += 1, R8824 += 1, R8825 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R8869 += 1, R8825 += 1, R70 += 1, R71 += 1 };
  s2 -> s4 [73, 73] { R8869 += 1, R8825 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [74, 65535] { R8869 += 1, R8825 += 1, R70 += 1, R71 += 1 };
  s3 -> s6 [0, 65535] { R8869 += 1 };
  s3 -> s3 [0, 65535] { R8869 += 1, R8825 += 1, R70 += 1, R71 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8869 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8869 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 72] { R8871 += 1, R8827 += 1, R7707 += 1, R7708 += 1 };
  s0 -> s2 [0, 72] { R8871 += 1, R8827 += 1, R7706 += 1, R7707 += 1 };
  s0 -> s0 [0, 65535] { R8870 += 1, R8871 += 1 };
  s0 -> s3 [0, 65535] { R8871 += 1, R8826 += 1, R8827 += 1 };
  s0 -> s4 [73, 73] { R8871 += 1, R8827 += 1, R7706 += 1, R7707 += 1 };
  s0 -> s5 [73, 73] { R8871 += 1, R8827 += 1, R7706 += 1, R7707 += 1 };
  s0 -> s6 [73, 73] { R8871 += 1, R8827 += 1, R7707 += 1, R7708 += 1 };
  s0 -> s7 [73, 73] { R8871 += 1, R8827 += 1, R7707 += 1, R7708 += 1 };
  s0 -> s1 [74, 65535] { R8871 += 1, R8827 += 1, R7707 += 1, R7708 += 1 };
  s0 -> s2 [74, 65535] { R8871 += 1, R8827 += 1, R7706 += 1, R7707 += 1 };
  s1 -> s11 [0, 72] { R8871 += 1, R8827 += 1 };
  s1 -> s1 [0, 72] { R8871 += 1, R8827 += 1, R7707 += 1, R7708 += 1 };
  s1 -> s12 [73, 73] { R8871 += 1, R8827 += 1 };
  s1 -> s8 [73, 73] { R8871 += 1, R8827 += 1 };
  s1 -> s6 [73, 73] { R8871 += 1, R8827 += 1, R7707 += 1, R7708 += 1 };
  s1 -> s7 [73, 73] { R8871 += 1, R8827 += 1, R7707 += 1, R7708 += 1 };
  s1 -> s11 [74, 65535] { R8871 += 1, R8827 += 1 };
  s1 -> s1 [74, 65535] { R8871 += 1, R8827 += 1, R7707 += 1, R7708 += 1 };
  s2 -> s1 [0, 72] { R8871 += 1, R8827 += 1, R7707 += 1, R7708 += 1 };
  s2 -> s2 [0, 72] { R8871 += 1, R8827 += 1, R7706 += 1, R7707 += 1 };
  s2 -> s4 [73, 73] { R8871 += 1, R8827 += 1, R7706 += 1, R7707 += 1 };
  s2 -> s5 [73, 73] { R8871 += 1, R8827 += 1, R7706 += 1, R7707 += 1 };
  s2 -> s6 [73, 73] { R8871 += 1, R8827 += 1, R7707 += 1, R7708 += 1 };
  s2 -> s7 [73, 73] { R8871 += 1, R8827 += 1, R7707 += 1, R7708 += 1 };
  s2 -> s1 [74, 65535] { R8871 += 1, R8827 += 1, R7707 += 1, R7708 += 1 };
  s2 -> s2 [74, 65535] { R8871 += 1, R8827 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s1 [0, 72] { R8871 += 1, R8827 += 1, R7707 += 1, R7708 += 1 };
  s3 -> s2 [0, 72] { R8871 += 1, R8827 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s3 [0, 65535] { R8871 += 1, R8826 += 1, R8827 += 1 };
  s3 -> s4 [73, 73] { R8871 += 1, R8827 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s5 [73, 73] { R8871 += 1, R8827 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s6 [73, 73] { R8871 += 1, R8827 += 1, R7707 += 1, R7708 += 1 };
  s3 -> s7 [73, 73] { R8871 += 1, R8827 += 1, R7707 += 1, R7708 += 1 };
  s3 -> s1 [74, 65535] { R8871 += 1, R8827 += 1, R7707 += 1, R7708 += 1 };
  s3 -> s2 [74, 65535] { R8871 += 1, R8827 += 1, R7706 += 1, R7707 += 1 };
  s5 -> s5 [0, 65535] { R8871 += 1, R8827 += 1, R7706 += 1, R7707 += 1 };
  s5 -> s6 [0, 65535] { R8871 += 1, R8827 += 1, R7707 += 1, R7708 += 1 };
  s6 -> s8 [0, 65535] { R8871 += 1, R8827 += 1 };
  s6 -> s6 [0, 65535] { R8871 += 1, R8827 += 1, R7707 += 1, R7708 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [0, 65535] { R8871 += 1 };
  s8 -> s8 [0, 65535] { R8871 += 1, R8827 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R8871 += 1 };
  s11 -> s11 [0, 72] { R8871 += 1, R8827 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R8871 += 1 };
  s11 -> s12 [73, 73] { R8871 += 1, R8827 += 1 };
  s11 -> s8 [73, 73] { R8871 += 1, R8827 += 1 };
  s11 -> s11 [74, 65535] { R8871 += 1, R8827 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R8871 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 72] { R8873 += 1, R8829 += 1, R7712 += 1, R7713 += 1 };
  s0 -> s2 [0, 72] { R8873 += 1, R8829 += 1, R7713 += 1 };
  s0 -> s0 [0, 65535] { R8872 += 1, R8873 += 1 };
  s0 -> s3 [0, 65535] { R8873 += 1, R8828 += 1, R8829 += 1 };
  s0 -> s4 [73, 73] { R8873 += 1, R8829 += 1, R7712 += 1, R7713 += 1 };
  s0 -> s5 [73, 73] { R8873 += 1, R8829 += 1, R7712 += 1, R7713 += 1 };
  s0 -> s6 [73, 73] { R8873 += 1, R8829 += 1, R7713 += 1 };
  s0 -> s7 [73, 73] { R8873 += 1, R8829 += 1, R7713 += 1 };
  s0 -> s2 [74, 81] { R8873 += 1, R8829 += 1, R7713 += 1 };
  s0 -> s1 [74, 65535] { R8873 += 1, R8829 += 1, R7712 += 1, R7713 += 1 };
  s0 -> s8 [84, 84] { R8873 += 1, R8829 += 1, R7713 += 1 };
  s0 -> s2 [85, 65535] { R8873 += 1, R8829 += 1, R7713 += 1 };
  s1 -> s1 [0, 72] { R8873 += 1, R8829 += 1, R7712 += 1, R7713 += 1 };
  s1 -> s2 [0, 72] { R8873 += 1, R8829 += 1, R7713 += 1 };
  s1 -> s4 [73, 73] { R8873 += 1, R8829 += 1, R7712 += 1, R7713 += 1 };
  s1 -> s5 [73, 73] { R8873 += 1, R8829 += 1, R7712 += 1, R7713 += 1 };
  s1 -> s6 [73, 73] { R8873 += 1, R8829 += 1, R7713 += 1 };
  s1 -> s7 [73, 73] { R8873 += 1, R8829 += 1, R7713 += 1 };
  s1 -> s2 [74, 81] { R8873 += 1, R8829 += 1, R7713 += 1 };
  s1 -> s1 [74, 65535] { R8873 += 1, R8829 += 1, R7712 += 1, R7713 += 1 };
  s1 -> s8 [84, 84] { R8873 += 1, R8829 += 1, R7713 += 1 };
  s1 -> s2 [85, 65535] { R8873 += 1, R8829 += 1, R7713 += 1 };
  s2 -> s2 [0, 72] { R8873 += 1, R8829 += 1, R7713 += 1 };
  s2 -> s6 [73, 73] { R8873 += 1, R8829 += 1, R7713 += 1 };
  s2 -> s7 [73, 73] { R8873 += 1, R8829 += 1, R7713 += 1 };
  s2 -> s2 [74, 81] { R8873 += 1, R8829 += 1, R7713 += 1 };
  s2 -> s8 [84, 84] { R8873 += 1, R8829 += 1, R7713 += 1 };
  s2 -> s2 [85, 65535] { R8873 += 1, R8829 += 1, R7713 += 1 };
  s3 -> s1 [0, 72] { R8873 += 1, R8829 += 1, R7712 += 1, R7713 += 1 };
  s3 -> s2 [0, 72] { R8873 += 1, R8829 += 1, R7713 += 1 };
  s3 -> s3 [0, 65535] { R8873 += 1, R8828 += 1, R8829 += 1 };
  s3 -> s4 [73, 73] { R8873 += 1, R8829 += 1, R7712 += 1, R7713 += 1 };
  s3 -> s5 [73, 73] { R8873 += 1, R8829 += 1, R7712 += 1, R7713 += 1 };
  s3 -> s6 [73, 73] { R8873 += 1, R8829 += 1, R7713 += 1 };
  s3 -> s7 [73, 73] { R8873 += 1, R8829 += 1, R7713 += 1 };
  s3 -> s2 [74, 81] { R8873 += 1, R8829 += 1, R7713 += 1 };
  s3 -> s1 [74, 65535] { R8873 += 1, R8829 += 1, R7712 += 1, R7713 += 1 };
  s3 -> s8 [84, 84] { R8873 += 1, R8829 += 1, R7713 += 1 };
  s3 -> s2 [85, 65535] { R8873 += 1, R8829 += 1, R7713 += 1 };
  s5 -> s7 [0, 81] { R8873 += 1, R8829 += 1, R7713 += 1 };
  s5 -> s5 [0, 65535] { R8873 += 1, R8829 += 1, R7712 += 1, R7713 += 1 };
  s5 -> s10 [84, 84] { R8873 += 1, R8829 += 1, R7713 += 1 };
  s5 -> s7 [85, 65535] { R8873 += 1, R8829 += 1, R7713 += 1 };
  s7 -> s7 [0, 81] { R8873 += 1, R8829 += 1, R7713 += 1 };
  s7 -> s10 [84, 84] { R8873 += 1, R8829 += 1, R7713 += 1 };
  s7 -> s7 [85, 65535] { R8873 += 1, R8829 += 1, R7713 += 1 };
  s8 -> s8 [0, 72] { R8873 += 1, R8829 += 1, R7713 += 1 };
  s8 -> s8 [0, 65535] { R8873 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [73, 73] { R8873 += 1, R8829 += 1 };
  s8 -> s11 [73, 73] { R8873 += 1, R8829 += 1 };
  s8 -> s8 [74, 81] { R8873 += 1, R8829 += 1, R7713 += 1 };
  s8 -> s8 [74, 65535] { R8873 += 1, R8829 += 1 };
  s8 -> s8 [84, 65535] { R8873 += 1, R8829 += 1, R7713 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 81] { R8873 += 1, R8829 += 1, R7713 += 1 };
  s10 -> s10 [0, 65535] { R8873 += 1, R8829 += 1 };
  s10 -> s9 [0, 65535];
  s10 -> s12 [0, 65535] { R8873 += 1 };
  s10 -> s10 [84, 65535] { R8873 += 1, R8829 += 1, R7713 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R8873 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R8873 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 72] { R8875 += 1, R8831 += 1, R8560 += 1, R8561 += 1 };
  s0 -> s2 [0, 72] { R8875 += 1, R8831 += 1, R8561 += 1, R8562 += 1 };
  s0 -> s0 [0, 65535] { R8874 += 1, R8875 += 1 };
  s0 -> s3 [0, 65535] { R8875 += 1, R8830 += 1, R8831 += 1 };
  s0 -> s4 [73, 73] { R8875 += 1, R8831 += 1, R8560 += 1, R8561 += 1 };
  s0 -> s5 [73, 73] { R8875 += 1, R8831 += 1, R8561 += 1, R8562 += 1 };
  s0 -> s6 [73, 73] { R8875 += 1, R8831 += 1, R8561 += 1, R8562 += 1 };
  s0 -> s7 [73, 73] { R8875 += 1, R8831 += 1, R8560 += 1, R8561 += 1 };
  s0 -> s1 [74, 65535] { R8875 += 1, R8831 += 1, R8560 += 1, R8561 += 1 };
  s0 -> s2 [74, 65535] { R8875 += 1, R8831 += 1, R8561 += 1, R8562 += 1 };
  s1 -> s1 [0, 72] { R8875 += 1, R8831 += 1, R8560 += 1, R8561 += 1 };
  s1 -> s2 [0, 72] { R8875 += 1, R8831 += 1, R8561 += 1, R8562 += 1 };
  s1 -> s4 [73, 73] { R8875 += 1, R8831 += 1, R8560 += 1, R8561 += 1 };
  s1 -> s5 [73, 73] { R8875 += 1, R8831 += 1, R8561 += 1, R8562 += 1 };
  s1 -> s6 [73, 73] { R8875 += 1, R8831 += 1, R8561 += 1, R8562 += 1 };
  s1 -> s7 [73, 73] { R8875 += 1, R8831 += 1, R8560 += 1, R8561 += 1 };
  s1 -> s1 [74, 65535] { R8875 += 1, R8831 += 1, R8560 += 1, R8561 += 1 };
  s1 -> s2 [74, 65535] { R8875 += 1, R8831 += 1, R8561 += 1, R8562 += 1 };
  s2 -> s2 [0, 72] { R8875 += 1, R8831 += 1, R8561 += 1, R8562 += 1 };
  s2 -> s11 [0, 72] { R8875 += 1, R8831 += 1 };
  s2 -> s8 [73, 73] { R8875 += 1, R8831 += 1 };
  s2 -> s5 [73, 73] { R8875 += 1, R8831 += 1, R8561 += 1, R8562 += 1 };
  s2 -> s6 [73, 73] { R8875 += 1, R8831 += 1, R8561 += 1, R8562 += 1 };
  s2 -> s12 [73, 73] { R8875 += 1, R8831 += 1 };
  s2 -> s2 [74, 65535] { R8875 += 1, R8831 += 1, R8561 += 1, R8562 += 1 };
  s2 -> s11 [74, 65535] { R8875 += 1, R8831 += 1 };
  s3 -> s1 [0, 72] { R8875 += 1, R8831 += 1, R8560 += 1, R8561 += 1 };
  s3 -> s2 [0, 72] { R8875 += 1, R8831 += 1, R8561 += 1, R8562 += 1 };
  s3 -> s3 [0, 65535] { R8875 += 1, R8830 += 1, R8831 += 1 };
  s3 -> s4 [73, 73] { R8875 += 1, R8831 += 1, R8560 += 1, R8561 += 1 };
  s3 -> s5 [73, 73] { R8875 += 1, R8831 += 1, R8561 += 1, R8562 += 1 };
  s3 -> s6 [73, 73] { R8875 += 1, R8831 += 1, R8561 += 1, R8562 += 1 };
  s3 -> s7 [73, 73] { R8875 += 1, R8831 += 1, R8560 += 1, R8561 += 1 };
  s3 -> s1 [74, 65535] { R8875 += 1, R8831 += 1, R8560 += 1, R8561 += 1 };
  s3 -> s2 [74, 65535] { R8875 += 1, R8831 += 1, R8561 += 1, R8562 += 1 };
  s5 -> s8 [0, 65535] { R8875 += 1, R8831 += 1 };
  s5 -> s5 [0, 65535] { R8875 += 1, R8831 += 1, R8561 += 1, R8562 += 1 };
  s7 -> s5 [0, 65535] { R8875 += 1, R8831 += 1, R8561 += 1, R8562 += 1 };
  s7 -> s7 [0, 65535] { R8875 += 1, R8831 += 1, R8560 += 1, R8561 += 1 };
  s8 -> s8 [0, 65535] { R8875 += 1, R8831 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [0, 65535] { R8875 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R8875 += 1 };
  s11 -> s11 [0, 72] { R8875 += 1, R8831 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R8875 += 1 };
  s11 -> s8 [73, 73] { R8875 += 1, R8831 += 1 };
  s11 -> s12 [73, 73] { R8875 += 1, R8831 += 1 };
  s11 -> s11 [74, 65535] { R8875 += 1, R8831 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R8875 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 72] { R8877 += 1, R8833 += 1, R8774 += 1, R8775 += 1 };
  s0 -> s2 [0, 72] { R8877 += 1, R8833 += 1, R8775 += 1 };
  s0 -> s0 [0, 65535] { R8876 += 1, R8877 += 1 };
  s0 -> s3 [0, 65535] { R8877 += 1, R8832 += 1, R8833 += 1 };
  s0 -> s4 [73, 73] { R8877 += 1, R8833 += 1, R8774 += 1, R8775 += 1 };
  s0 -> s5 [73, 73] { R8877 += 1, R8833 += 1, R8775 += 1 };
  s0 -> s6 [73, 73] { R8877 += 1, R8833 += 1, R8775 += 1 };
  s0 -> s7 [73, 73] { R8877 += 1, R8833 += 1, R8774 += 1, R8775 += 1 };
  s0 -> s2 [74, 80] { R8877 += 1, R8833 += 1, R8775 += 1 };
  s0 -> s1 [74, 65535] { R8877 += 1, R8833 += 1, R8774 += 1, R8775 += 1 };
  s0 -> s8 [81, 81] { R8877 += 1, R8833 += 1, R8775 += 1 };
  s0 -> s2 [85, 65535] { R8877 += 1, R8833 += 1, R8775 += 1 };
  s1 -> s1 [0, 72] { R8877 += 1, R8833 += 1, R8774 += 1, R8775 += 1 };
  s1 -> s2 [0, 72] { R8877 += 1, R8833 += 1, R8775 += 1 };
  s1 -> s4 [73, 73] { R8877 += 1, R8833 += 1, R8774 += 1, R8775 += 1 };
  s1 -> s5 [73, 73] { R8877 += 1, R8833 += 1, R8775 += 1 };
  s1 -> s6 [73, 73] { R8877 += 1, R8833 += 1, R8775 += 1 };
  s1 -> s7 [73, 73] { R8877 += 1, R8833 += 1, R8774 += 1, R8775 += 1 };
  s1 -> s2 [74, 80] { R8877 += 1, R8833 += 1, R8775 += 1 };
  s1 -> s1 [74, 65535] { R8877 += 1, R8833 += 1, R8774 += 1, R8775 += 1 };
  s1 -> s8 [81, 81] { R8877 += 1, R8833 += 1, R8775 += 1 };
  s1 -> s2 [85, 65535] { R8877 += 1, R8833 += 1, R8775 += 1 };
  s2 -> s2 [0, 72] { R8877 += 1, R8833 += 1, R8775 += 1 };
  s2 -> s5 [73, 73] { R8877 += 1, R8833 += 1 };
  s2 -> s6 [73, 73] { R8877 += 1, R8833 += 1 };
  s2 -> s2 [74, 80] { R8877 += 1, R8833 += 1, R8775 += 1 };
  s2 -> s2 [74, 65535] { R8877 += 1, R8833 += 1 };
  s2 -> s8 [81, 81] { R8877 += 1, R8833 += 1, R8775 += 1 };
  s2 -> s2 [85, 65535] { R8877 += 1, R8833 += 1, R8775 += 1 };
  s3 -> s1 [0, 72] { R8877 += 1, R8833 += 1, R8774 += 1, R8775 += 1 };
  s3 -> s2 [0, 72] { R8877 += 1, R8833 += 1, R8775 += 1 };
  s3 -> s3 [0, 65535] { R8877 += 1, R8832 += 1, R8833 += 1 };
  s3 -> s4 [73, 73] { R8877 += 1, R8833 += 1, R8774 += 1, R8775 += 1 };
  s3 -> s5 [73, 73] { R8877 += 1, R8833 += 1, R8775 += 1 };
  s3 -> s6 [73, 73] { R8877 += 1, R8833 += 1, R8775 += 1 };
  s3 -> s7 [73, 73] { R8877 += 1, R8833 += 1, R8774 += 1, R8775 += 1 };
  s3 -> s2 [74, 80] { R8877 += 1, R8833 += 1, R8775 += 1 };
  s3 -> s1 [74, 65535] { R8877 += 1, R8833 += 1, R8774 += 1, R8775 += 1 };
  s3 -> s8 [81, 81] { R8877 += 1, R8833 += 1, R8775 += 1 };
  s3 -> s2 [85, 65535] { R8877 += 1, R8833 += 1, R8775 += 1 };
  s4 -> s6 [0, 80] { R8877 += 1, R8833 += 1, R8775 += 1 };
  s4 -> s4 [0, 65535] { R8877 += 1, R8833 += 1, R8774 += 1, R8775 += 1 };
  s4 -> s10 [81, 81] { R8877 += 1, R8833 += 1, R8775 += 1 };
  s4 -> s6 [85, 65535] { R8877 += 1, R8833 += 1, R8775 += 1 };
  s6 -> s6 [0, 80] { R8877 += 1, R8833 += 1, R8775 += 1 };
  s6 -> s6 [0, 65535] { R8877 += 1, R8833 += 1 };
  s6 -> s10 [81, 81] { R8877 += 1, R8833 += 1, R8775 += 1 };
  s6 -> s6 [85, 65535] { R8877 += 1, R8833 += 1, R8775 += 1 };
  s8 -> s8 [0, 72] { R8877 += 1, R8833 += 1, R8775 += 1 };
  s8 -> s8 [0, 65535] { R8877 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [73, 73] { R8877 += 1, R8833 += 1 };
  s8 -> s11 [73, 73] { R8877 += 1, R8833 += 1 };
  s8 -> s8 [74, 81] { R8877 += 1, R8833 += 1, R8775 += 1 };
  s8 -> s8 [74, 65535] { R8877 += 1, R8833 += 1 };
  s8 -> s8 [85, 65535] { R8877 += 1, R8833 += 1, R8775 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 81] { R8877 += 1, R8833 += 1, R8775 += 1 };
  s10 -> s10 [0, 65535] { R8877 += 1, R8833 += 1 };
  s10 -> s12 [0, 65535] { R8877 += 1 };
  s10 -> s9 [0, 65535];
  s10 -> s10 [85, 65535] { R8877 += 1, R8833 += 1, R8775 += 1 };
  s11 -> s11 [0, 65535] { R8877 += 1 };
  s11 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R8877 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [113, 113];
  accepting s1;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
constraint R2 = R8877 && R20 - R8877 = -1 && R21 = R8877 && R22 - R8877 = -1 && R23 = R8877 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R7715 + -1*R7713 - R53 = 0 && R52 + R7714 + R7712 = 0 && R8818 = 0 && R8819 = 0 && R8826 = 0 && R8827 = 0 && R8828 = 0 && R8829 = 0 && R8830 = 0 && R8831 = 0 && R8832 = 0 && R8833 = 0 && R8834 = 0 && R8835 = R8877 && R8836 = 0 && R8837 = R8877 && R8838 = 0 && R8839 = R8877 && R8840 = 0 && R8841 = R8877 && R8842 = 0 && R8843 = R8877 && R8844 = 0 && R8845 = R8877 && R8846 = 0 && R8847 = R8877 && R8848 = 0 && R8849 = R8877 && R8850 = 0 && R8851 = R8877 && R8852 = 0 && R8853 = R8877 && R8854 = 0 && R8855 = R8877 && R8856 = 0 && R8857 = R8877 && R8858 = 0 && R8859 = R8877 && R8860 = 0 && R8861 = R8877 && R8862 = 0 && R8863 = R8877 && R8864 = 0 && R8865 = R8877 && R8866 = 0 && R8867 = R8877 && R8868 = 0 && R8869 = R8877 && R8870 = 0 && R8871 = R8877 && R8872 = 0 && R8873 = R8877 && R8874 = 0 && R8875 = R8877 && R8876 = 0 && -1 < R1 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R7715 + -1*R7713 - R53 < 1 && 0 < R8877 && (R1 != 0 || R17 = 0 || (R8778 = 0 && R8779 = 0)) && (R1 != 0 || R17 = 0 || (R8780 = 0 && R8781 = 0)) && (R1 != 0 || R17 = 0 || (R8782 = 0 && R8783 = 0)) && (R1 != 0 || R17 = 0 || (R8784 = 0 && R8785 = 0)) && (R1 != 0 || R17 = 0 || (R8786 = 0 && R8787 = 0)) && (R1 != 0 || R17 = 0 || (R8788 = 0 && R8789 = 0)) && (R1 != 0 || R17 = 0 || (R8790 = 0 && R8791 = 0)) && (R1 != 0 || R17 = 0 || (R8792 = 0 && R8793 = 0)) && (R1 != 0 || R17 = 0 || (R8794 = 0 && R8795 = 0)) && (R1 != 0 || R17 = 0 || (R8796 = 0 && R8797 = 0)) && (R48 + R7711 + R7708 != 0 || ((R42 + R72 + R70 != 0 || R43 + R73 + R71 + -1*R7715 + -1*R7713 - R53 = 0 || R53 + R7715 + R7713 < 1) && (R42 + R72 + R70 = 0 || R53 + R7715 + R7713 < 1))) && (R48 + R7711 + R7708 != 0 || ((R46 + R7709 + R7706 != 0 || R47 + R7710 + R7707 + -1*R7715 + -1*R7713 - R53 = 0 || R53 + R7715 + R7713 < 1) && (R46 + R7709 + R7706 = 0 || R53 + R7715 + R7713 < 1))) && (R8778 != 0 || R1 = R8779 || R1 < 1) && (R8780 != 0 || R1 = R8781 || R1 < 1) && (R8782 != 0 || R1 = R8783 || R1 < 1) && (R8784 != 0 || R1 = R8785 || R1 < 1) && (R8786 != 0 || R1 = R8787 || R1 < 1) && (R8788 != 0 || R1 = R8789 || R1 < 1) && (R8790 != 0 || R1 = R8791 || R1 < 1) && (R8792 != 0 || R1 = R8793 || R1 < 1) && (R8794 != 0 || R1 = R8795 || R1 < 1) && (R8796 != 0 || R1 = R8797 || R1 < 1) && (R18 = 0 || (R8816 = 0 && R8817 = 0)) && (R18 = 0 || (R8820 = 0 && R8821 = 0)) && (R18 = 0 || (R8822 = 0 && R8823 = 0)) && (R18 = 0 || (R8824 = 0 && R8825 = 0)) && (R19 = 0 || (R8798 = 0 && R8799 = 0)) && (R19 = 0 || (R8800 = 0 && R8801 = 0)) && (R19 = 0 || (R8802 = 0 && R8803 = 0)) && (R19 = 0 || (R8804 = 0 && R8805 = 0)) && (R19 = 0 || (R8806 = 0 && R8807 = 0)) && (R19 = 0 || (R8808 = 0 && R8809 = 0)) && (R19 = 0 || (R8810 = 0 && R8811 = 0)) && (R19 = 0 || (R8812 = 0 && R8813 = 0)) && (R19 = 0 || (R8814 = 0 && R8815 = 0)) && (R48 + R7711 + R7708 = 0 || (R42 + R72 + R70 = 0 && R43 + R73 + R71 + -1*R7715 + -1*R7713 - R53 = 0)) && (R48 + R7711 + R7708 = 0 || (R46 + R7709 + R7706 = 0 && R47 + R7710 + R7707 + -1*R7715 + -1*R7713 - R53 = 0)) && (R58 + R8565 + R8562 = 0 || (R56 + R8563 + R8560 = 0 && R57 + R8564 + R8561 = 0)) && (R58 + R8565 + R8562 = 0 || (R62 + R8776 + R8774 = 0 && R63 + R8777 + R8775 = 0)) && (R8778 = 0 || R1 < 1) && (R8780 = 0 || R1 < 1) && (R8782 = 0 || R1 < 1) && (R8784 = 0 || R1 < 1) && (R8786 = 0 || R1 < 1) && (R8788 = 0 || R1 < 1) && (R8790 = 0 || R1 < 1) && (R8792 = 0 || R1 < 1) && (R8794 = 0 || R1 < 1) && (R8796 = 0 || R1 < 1);
// End of Parikh automata intersection problem
