// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R2, R3, R4, R48, R49, R5, R50, R51, R52, R53, R54, R55, R56, R57, R58, R59, R60, R61, R62, R63, R64, R65, R66, R67, R68, R69, R7, R70, R71, R72, R73, R74, R75, R76, R77, R78, R79, R8, R80, R81, R82, R83, R84, R85, R86;
synchronised {  // Automata constraining P3
automaton P3_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
synchronised {  // Automata constraining value
automaton value_0 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value_1 {
  init s0;
  s0 -> s0 [0, 65535] { R57 += 1, R58 += 1 };
  s0 -> s1 [9, 9] { R58 += 1 };
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value_2 {
  init s0;
  s0 -> s0 [0, 65535] { R59 += 1, R60 += 1 };
  s0 -> s1 [0, 65535] { R60 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R60 += 1, R5 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value_3 {
  init s0;
  s0 -> s1 [0, 31] { R68 += 1 };
  s0 -> s0 [0, 65535] { R67 += 1, R68 += 1 };
  s0 -> s2 [32, 32] { R68 += 1 };
  s0 -> s1 [33, 65535] { R68 += 1 };
  s1 -> s1 [0, 31] { R68 += 1 };
  s1 -> s2 [32, 32] { R68 += 1 };
  s1 -> s1 [33, 65535] { R68 += 1 };
  s2 -> s2 [0, 65535] { R68 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value_4 {
  init s0;
  s0 -> s0 [0, 65535] { R69 += 1, R70 += 1 };
  s0 -> s1 [0, 65535] { R70 += 1, R1 += 1 };
  s1 -> s1 [0, 65535] { R70 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value_5 {
  init s0;
  s0 -> s1 [0, 31] { R72 += 1, R8 += 1 };
  s0 -> s2 [0, 65535] { R72 += 1, R7 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R71 += 1, R72 += 1 };
  s0 -> s3 [32, 32] { R72 += 1 };
  s0 -> s1 [33, 65535] { R72 += 1, R8 += 1 };
  s1 -> s1 [0, 31] { R72 += 1, R8 += 1 };
  s1 -> s3 [32, 32] { R72 += 1 };
  s1 -> s1 [33, 65535] { R72 += 1, R8 += 1 };
  s2 -> s1 [0, 31] { R72 += 1, R8 += 1 };
  s2 -> s2 [0, 65535] { R72 += 1, R7 += 1, R8 += 1 };
  s2 -> s3 [32, 32] { R72 += 1 };
  s2 -> s1 [33, 65535] { R72 += 1, R8 += 1 };
  s3 -> s3 [0, 65535] { R72 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton value_6 {
  init s0;
  s0 -> s1 [0, 8] { R74 += 1, R50 += 1 };
  s0 -> s0 [0, 65535] { R73 += 1, R74 += 1 };
  s0 -> s2 [0, 65535] { R74 += 1, R49 += 1, R50 += 1 };
  s0 -> s3 [9, 13] { R74 += 1, R50 += 1 };
  s0 -> s1 [14, 31] { R74 += 1, R50 += 1 };
  s0 -> s3 [32, 32] { R74 += 1, R50 += 1 };
  s0 -> s1 [33, 65535] { R74 += 1, R50 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R74 += 1, R50 += 1 };
  s1 -> s5 [0, 65535] { R74 += 1 };
  s2 -> s1 [0, 8] { R74 += 1, R50 += 1 };
  s2 -> s2 [0, 65535] { R74 += 1, R49 += 1, R50 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R74 += 1, R50 += 1 };
  s2 -> s1 [14, 31] { R74 += 1, R50 += 1 };
  s2 -> s3 [32, 32] { R74 += 1, R50 += 1 };
  s2 -> s1 [33, 65535] { R74 += 1, R50 += 1 };
  s3 -> s1 [0, 65535] { R74 += 1, R50 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R74 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value_7 {
  init s0;
  s0 -> s0 [0, 65535] { R75 += 1, R76 += 1 };
  s0 -> s1 [0, 65535] { R76 += 1, R51 += 1, R52 += 1 };
  s0 -> s2 [0, 65535] { R76 += 1, R52 += 1, R3 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R76 += 1, R51 += 1, R52 += 1 };
  s1 -> s2 [0, 65535] { R76 += 1, R52 += 1, R3 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R76 += 1 };
  s2 -> s2 [0, 65535] { R76 += 1, R52 += 1, R3 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R76 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value_8 {
  init s0;
  s0 -> s1 [0, 8] { R78 += 1, R54 += 1 };
  s0 -> s0 [0, 65535] { R77 += 1, R78 += 1 };
  s0 -> s2 [0, 65535] { R78 += 1, R53 += 1, R54 += 1 };
  s0 -> s3 [9, 13] { R78 += 1, R54 += 1 };
  s0 -> s1 [14, 31] { R78 += 1, R54 += 1 };
  s0 -> s3 [32, 32] { R78 += 1, R54 += 1 };
  s0 -> s1 [33, 65535] { R78 += 1, R54 += 1 };
  s1 -> s5 [0, 65535] { R78 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R78 += 1, R54 += 1 };
  s2 -> s1 [0, 8] { R78 += 1, R54 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R78 += 1, R53 += 1, R54 += 1 };
  s2 -> s3 [9, 13] { R78 += 1, R54 += 1 };
  s2 -> s1 [14, 31] { R78 += 1, R54 += 1 };
  s2 -> s3 [32, 32] { R78 += 1, R54 += 1 };
  s2 -> s1 [33, 65535] { R78 += 1, R54 += 1 };
  s3 -> s1 [0, 65535] { R78 += 1, R54 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R78 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value_9 {
  init s0;
  s0 -> s1 [0, 65535] { R80 += 1, R55 += 1, R56 += 1 };
  s0 -> s2 [0, 65535] { R80 += 1, R56 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R79 += 1, R80 += 1 };
  s1 -> s1 [0, 65535] { R80 += 1, R55 += 1, R56 += 1 };
  s1 -> s2 [0, 65535] { R80 += 1, R56 += 1, R4 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R80 += 1, R56 += 1, R4 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R80 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R80 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value_10 {
  init s0;
  s0 -> s1 [0, 65535] { R82 += 1, R62 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R81 += 1, R82 += 1 };
  s0 -> s2 [0, 65535] { R82 += 1, R61 += 1, R62 += 1 };
  s1 -> s1 [0, 65535] { R82 += 1, R62 += 1, R0 += 1 };
  s1 -> s4 [0, 65535] { R82 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R82 += 1, R62 += 1, R0 += 1 };
  s2 -> s2 [0, 65535] { R82 += 1, R61 += 1, R62 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R82 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value_11 {
  init s0;
  s0 -> s1 [0, 64] { R84 += 1, R64 += 1 };
  s0 -> s0 [0, 65535] { R83 += 1, R84 += 1 };
  s0 -> s2 [0, 65535] { R84 += 1, R63 += 1, R64 += 1 };
  s0 -> s3 [88, 88] { R84 += 1, R64 += 1 };
  s0 -> s1 [89, 65535] { R84 += 1, R64 += 1 };
  s1 -> s1 [0, 64] { R84 += 1, R64 += 1 };
  s1 -> s3 [88, 88] { R84 += 1, R64 += 1 };
  s1 -> s1 [89, 65535] { R84 += 1, R64 += 1 };
  s2 -> s1 [0, 64] { R84 += 1, R64 += 1 };
  s2 -> s2 [0, 65535] { R84 += 1, R63 += 1, R64 += 1 };
  s2 -> s3 [88, 88] { R84 += 1, R64 += 1 };
  s2 -> s1 [89, 65535] { R84 += 1, R64 += 1 };
  s3 -> s3 [0, 64] { R84 += 1, R64 += 1 };
  s3 -> s3 [0, 65535] { R84 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [88, 65535] { R84 += 1, R64 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton value_12 {
  init s0;
  s0 -> s0 [0, 65535] { R85 += 1, R86 += 1 };
  s0 -> s1 [0, 65535] { R86 += 1, R65 += 1, R66 += 1 };
  s0 -> s2 [0, 65535] { R86 += 1, R66 += 1, R48 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R86 += 1, R65 += 1, R66 += 1 };
  s1 -> s2 [0, 65535] { R86 += 1, R66 += 1, R48 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R86 += 1 };
  s2 -> s2 [0, 65535] { R86 += 1, R66 += 1, R48 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R86 += 1 };
  accepting s3, s4, s2, s1, s0;
};
};
constraint R1 = R62 && R2 = R86 && R7 = 0 && R8 = R64 && R49 - R62 = -1 && R50 = R62 && R51 - R62 = -1 && R52 = R62 && R53 = 0 && R54 = 1 && R55 = 0 && R56 = 1 && R57 = 0 && R58 = 1 && R59 = 0 && R60 = 1 && R61 - R64 = 1 && R63 = 0 && R67 = 1 && R68 = R86 && R69 = 1 && R70 = R86 && R71 = 1 && R72 = R86 && R73 = 1 && R74 = R86 && R75 = 1 && R76 = R86 && R77 = 1 && R78 = R86 && R79 = 1 && R80 = R86 && R81 = 1 && R82 = R86 && R83 = 1 && R84 = R86 && R85 = 1 && R0 != 0 && R64 < R62 && -1 < R64 && 0 < R86 && (R65 != 0 || R64 = R66 || (R48 = 0 && R64 = 0)) && (R65 = 0 || (R48 = 0 && R64 = 0));
// End of Parikh automata intersection problem
