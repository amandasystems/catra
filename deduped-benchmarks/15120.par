// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R2, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R31, R32, R33, R4, R5, R6, R8, R9;
synchronised {  // Automata constraining value1
automaton value1_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s1 [44, 44];
  s0 -> s0 [45, 65535];
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value1_2 {
  init s0;
  s0 -> s1 [0, 43] { R9 += 1 };
  s0 -> s0 [0, 65535] { R8 += 1, R9 += 1 };
  s0 -> s2 [44, 44];
  s0 -> s1 [45, 65535] { R9 += 1 };
  s1 -> s1 [0, 43] { R9 += 1 };
  s1 -> s2 [44, 44];
  s1 -> s1 [45, 65535] { R9 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value1_3 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
automaton value1_4 {
  init s0;
  s0 -> s0 [0, 65535] { R30 += 1, R31 += 1 };
  s0 -> s1 [0, 65535] { R31 += 1, R0 += 1 };
  s1 -> s1 [0, 65535] { R31 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_5 {
  init s0;
  s0 -> s1 [0, 60] { R33 += 1 };
  s0 -> s0 [0, 65535] { R32 += 1, R33 += 1 };
  s0 -> s2 [0, 65535] { R33 += 1, R5 += 1 };
  s0 -> s3 [61, 61] { R33 += 1 };
  s0 -> s1 [62, 65535] { R33 += 1 };
  s1 -> s1 [0, 60] { R33 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [61, 61] { R33 += 1 };
  s1 -> s1 [62, 65535] { R33 += 1 };
  s2 -> s1 [0, 60] { R33 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R33 += 1, R5 += 1 };
  s2 -> s3 [61, 61] { R33 += 1 };
  s2 -> s1 [62, 65535] { R33 += 1 };
  s3 -> s3 [0, 65535] { R33 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s0 [91, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R6 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 8] { R23 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s0 -> s2 [9, 13] { R23 += 1 };
  s0 -> s1 [14, 31] { R23 += 1 };
  s0 -> s2 [32, 32] { R23 += 1 };
  s0 -> s1 [33, 65535] { R23 += 1 };
  s1 -> s1 [0, 65535] { R23 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R23 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 65535] { R25 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R25 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 8] { R27 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s0 -> s2 [9, 13] { R27 += 1 };
  s0 -> s1 [14, 31] { R27 += 1 };
  s0 -> s2 [32, 32] { R27 += 1 };
  s0 -> s1 [33, 65535] { R27 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R27 += 1 };
  s2 -> s1 [0, 65535] { R27 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_6 {
  init s0;
  s0 -> s0 [0, 65535] { R28 += 1, R29 += 1 };
  s0 -> s1 [0, 65535] { R29 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R29 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
};
constraint R2 - R33 = 1 && R8 = 0 && R9 = R33 && R30 = 0 && R31 = R33 && R32 = 0 && R0 != 0 && R1 != 0 && R5 < 1 && R6 < 1 && -1 < R33 && (R3 != 0 || ((R1 != R23 || R22 - R23 = -1 || R23 < 0) && (R1 = R23 || R1 < 1))) && (R3 != 0 || ((R1 != R25 || R24 - R25 = -1 || R25 < 0) && (R1 = R25 || R1 < 1))) && (R26 != 0 || ((R4 != 0 || ((R1 != R27 || R27 = 1 || R27 < 0) && (R1 = R27 || R27 = 1 || R1 < 1))) && (R4 = 0 || ((R1 != R27 || R27 = 1 || R27 < 0) && (R27 != 1 || -1 < R1) && (R1 = R27 || R27 = 1))))) && (R28 != 0 || ((R4 != 0 || ((R1 != R29 || R29 = 1 || R29 < 0) && (R1 = R29 || R29 = 1 || R1 < 1))) && (R4 = 0 || ((R1 != R29 || R29 = 1 || R29 < 0) && (R29 != 1 || -1 < R1) && (R1 = R29 || R29 = 1))))) && (R3 = 0 || (R1 = R23 && R22 - R23 = -1)) && (R3 = 0 || (R1 = R25 && R24 - R25 = -1)) && (R26 = 0 || (R4 = 0 && R1 < 0)) && (R28 = 0 || (R4 = 0 && R1 < 0));
// End of Parikh automata intersection problem
