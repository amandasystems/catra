// Parikh automata intersection problem, generated by OSTRICH+
counter int R11, R12, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R4, R486, R487, R488, R489, R490, R491, R492, R493, R494, R495, R496, R497, R498, R499, R500, R501, R502, R503, R504, R505, R506, R507, R508, R509, R510, R511, R512, R513, R514, R515, R516, R517, R518, R519, R520, R521, R522, R523, R524, R525, R526, R527, R528, R529, R530, R531, R532, R533, R534, R535, R536, R537, R538, R539, R540, R541, R542, R543, R544, R545, R546, R547, R548, R549, R550, R551, R552, R553, R554, R555, R556, R557, R558, R559, R560, R561, R562, R563, R564, R565, R566, R567, R568, R569, R570, R571, R572, R573, R574, R575, R576, R577, R578, R579, R580, R581, R582, R583, R584, R585, R586, R587, R588, R589, R590, R591, R592, R593, R594, R595, R596, R597, R598, R599, R600, R601, R602, R603, R604, R605, R606, R607, R608, R609, R610, R611, R612, R613, R614, R615, R616, R617;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [78, 78];
  s0 -> s0 [79, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [78, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 77];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [78, 78];
  s0 -> s1 [79, 65535];
  s1 -> s1 [0, 77];
  s1 -> s2 [78, 78];
  s1 -> s1 [79, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R21 += 1 };
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R25 += 1 };
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 77] { R561 += 1 };
  s0 -> s0 [0, 65535] { R560 += 1, R561 += 1 };
  s0 -> s1 [79, 65535] { R561 += 1 };
  s1 -> s1 [0, 77] { R561 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [79, 65535] { R561 += 1 };
  accepting s0, s1;
};
automaton value2_9 {
  init s0;
  s0 -> s0 [0, 65535] { R562 += 1, R563 += 1 };
  s0 -> s1 [0, 65535] { R563 += 1, R18 += 1 };
  s1 -> s1 [0, 65535] { R563 += 1, R18 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 78] { R565 += 1 };
  s0 -> s0 [0, 65535] { R564 += 1, R565 += 1 };
  s0 -> s1 [85, 65535] { R565 += 1 };
  s1 -> s1 [0, 78] { R565 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [85, 65535] { R565 += 1 };
  accepting s0, s1;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 65535] { R567 += 1, R487 += 1 };
  s0 -> s0 [0, 65535] { R566 += 1, R567 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R567 += 1, R487 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 84] { R569 += 1 };
  s0 -> s0 [0, 65535] { R568 += 1, R569 += 1 };
  s0 -> s2 [0, 65535] { R569 += 1, R489 += 1 };
  s0 -> s1 [86, 65535] { R569 += 1 };
  s1 -> s1 [0, 84] { R569 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [86, 65535] { R569 += 1 };
  s2 -> s1 [0, 84] { R569 += 1 };
  s2 -> s2 [0, 65535] { R569 += 1, R489 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [86, 65535] { R569 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_13 {
  init s0;
  s0 -> s0 [0, 65535] { R570 += 1, R571 += 1 };
  s0 -> s1 [0, 65535] { R571 += 1, R493 += 1, R494 += 1 };
  s0 -> s2 [0, 65535] { R571 += 1, R494 += 1, R495 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R571 += 1, R493 += 1, R494 += 1 };
  s1 -> s2 [0, 65535] { R571 += 1, R494 += 1, R495 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R571 += 1 };
  s2 -> s2 [0, 65535] { R571 += 1, R494 += 1, R495 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R571 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 84] { R573 += 1, R499 += 1 };
  s0 -> s2 [0, 65535] { R573 += 1, R498 += 1, R499 += 1 };
  s0 -> s0 [0, 65535] { R572 += 1, R573 += 1 };
  s0 -> s3 [85, 85] { R573 += 1, R499 += 1 };
  s0 -> s4 [85, 85] { R573 += 1, R499 += 1 };
  s0 -> s1 [90, 65535] { R573 += 1, R499 += 1 };
  s1 -> s1 [0, 84] { R573 += 1, R499 += 1 };
  s1 -> s1 [0, 65535] { R573 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [85, 85] { R573 += 1, R499 += 1 };
  s1 -> s4 [85, 85] { R573 += 1, R499 += 1 };
  s1 -> s1 [90, 65535] { R573 += 1, R499 += 1 };
  s2 -> s1 [0, 84] { R573 += 1, R499 += 1 };
  s2 -> s2 [0, 65535] { R573 += 1, R498 += 1, R499 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [85, 85] { R573 += 1, R499 += 1 };
  s2 -> s4 [85, 85] { R573 += 1, R499 += 1 };
  s2 -> s1 [90, 65535] { R573 += 1, R499 += 1 };
  s3 -> s3 [0, 65535] { R573 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 85] { R573 += 1, R499 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R573 += 1 };
  s4 -> s4 [90, 65535] { R573 += 1, R499 += 1 };
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 84] { R575 += 1, R503 += 1 };
  s0 -> s2 [0, 65535] { R575 += 1, R502 += 1, R503 += 1 };
  s0 -> s0 [0, 65535] { R574 += 1, R575 += 1 };
  s0 -> s3 [85, 85] { R575 += 1, R503 += 1 };
  s0 -> s1 [86, 65535] { R575 += 1, R503 += 1 };
  s1 -> s1 [0, 84] { R575 += 1, R503 += 1 };
  s1 -> s3 [85, 85] { R575 += 1, R503 += 1 };
  s1 -> s1 [86, 65535] { R575 += 1, R503 += 1 };
  s2 -> s1 [0, 84] { R575 += 1, R503 += 1 };
  s2 -> s2 [0, 65535] { R575 += 1, R502 += 1, R503 += 1 };
  s2 -> s3 [85, 85] { R575 += 1, R503 += 1 };
  s2 -> s1 [86, 65535] { R575 += 1, R503 += 1 };
  s3 -> s4 [0, 65535] { R575 += 1 };
  s3 -> s3 [0, 65535] { R575 += 1, R503 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R575 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 65535] { R577 += 1, R508 += 1, R509 += 1 };
  s0 -> s0 [0, 65535] { R576 += 1, R577 += 1 };
  s0 -> s2 [0, 65535] { R577 += 1, R507 += 1, R508 += 1 };
  s1 -> s4 [0, 65535] { R577 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R577 += 1, R508 += 1, R509 += 1 };
  s2 -> s1 [0, 65535] { R577 += 1, R508 += 1, R509 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R577 += 1, R507 += 1, R508 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R577 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 84] { R579 += 1, R514 += 1 };
  s0 -> s2 [0, 65535] { R579 += 1, R514 += 1, R515 += 1 };
  s0 -> s0 [0, 65535] { R578 += 1, R579 += 1 };
  s0 -> s3 [0, 65535] { R579 += 1, R513 += 1, R514 += 1 };
  s0 -> s1 [86, 65535] { R579 += 1, R514 += 1 };
  s1 -> s1 [0, 84] { R579 += 1, R514 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R579 += 1 };
  s1 -> s1 [86, 65535] { R579 += 1, R514 += 1 };
  s2 -> s1 [0, 84] { R579 += 1, R514 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R579 += 1, R514 += 1, R515 += 1 };
  s2 -> s5 [0, 65535] { R579 += 1 };
  s2 -> s1 [86, 65535] { R579 += 1, R514 += 1 };
  s3 -> s1 [0, 84] { R579 += 1, R514 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R579 += 1, R514 += 1, R515 += 1 };
  s3 -> s3 [0, 65535] { R579 += 1, R513 += 1, R514 += 1 };
  s3 -> s1 [86, 65535] { R579 += 1, R514 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R579 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 84] { R581 += 1, R521 += 1, R523 += 1 };
  s0 -> s0 [0, 65535] { R580 += 1, R581 += 1 };
  s0 -> s2 [0, 65535] { R581 += 1, R520 += 1, R521 += 1 };
  s0 -> s3 [0, 65535] { R581 += 1, R521 += 1, R522 += 1, R523 += 1 };
  s0 -> s1 [86, 65535] { R581 += 1, R521 += 1, R523 += 1 };
  s1 -> s1 [0, 84] { R581 += 1, R521 += 1, R523 += 1 };
  s1 -> s1 [0, 65535] { R581 += 1, R521 += 1 };
  s1 -> s4 [0, 65535] { R581 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [86, 65535] { R581 += 1, R521 += 1, R523 += 1 };
  s2 -> s1 [0, 84] { R581 += 1, R521 += 1, R523 += 1 };
  s2 -> s2 [0, 65535] { R581 += 1, R520 += 1, R521 += 1 };
  s2 -> s3 [0, 65535] { R581 += 1, R521 += 1, R522 += 1, R523 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [86, 65535] { R581 += 1, R521 += 1, R523 += 1 };
  s3 -> s1 [0, 84] { R581 += 1, R521 += 1, R523 += 1 };
  s3 -> s4 [0, 65535] { R581 += 1 };
  s3 -> s3 [0, 65535] { R581 += 1, R521 += 1, R522 += 1, R523 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [86, 65535] { R581 += 1, R521 += 1, R523 += 1 };
  s4 -> s4 [0, 65535] { R581 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_19 {
  init s0;
  s0 -> s0 [0, 65535] { R582 += 1, R583 += 1 };
  s0 -> s1 [0, 65535] { R583 += 1, R530 += 1, R532 += 1, R533 += 1 };
  s0 -> s2 [0, 65535] { R583 += 1, R530 += 1, R531 += 1, R532 += 1 };
  s0 -> s3 [0, 65535] { R583 += 1, R529 += 1, R530 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R583 += 1, R530 += 1 };
  s1 -> s1 [0, 65535] { R583 += 1, R530 += 1, R532 += 1, R533 += 1 };
  s1 -> s5 [0, 65535] { R583 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R583 += 1, R530 += 1, R532 += 1, R533 += 1 };
  s2 -> s2 [0, 65535] { R583 += 1, R530 += 1, R531 += 1, R532 += 1 };
  s2 -> s5 [0, 65535] { R583 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R583 += 1, R530 += 1, R532 += 1, R533 += 1 };
  s3 -> s2 [0, 65535] { R583 += 1, R530 += 1, R531 += 1, R532 += 1 };
  s3 -> s3 [0, 65535] { R583 += 1, R529 += 1, R530 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R583 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R583 += 1, R530 += 1 };
  s6 -> s5 [0, 65535] { R583 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 85] { R585 += 1, R539 += 1, R541 += 1 };
  s0 -> s2 [0, 65535] { R585 += 1, R539 += 1, R540 += 1, R541 += 1 };
  s0 -> s0 [0, 65535] { R584 += 1, R585 += 1 };
  s0 -> s3 [0, 65535] { R585 += 1, R538 += 1, R539 += 1 };
  s0 -> s1 [89, 65535] { R585 += 1, R539 += 1, R541 += 1 };
  s1 -> s1 [0, 85] { R585 += 1, R539 += 1, R541 += 1 };
  s1 -> s5 [0, 65535] { R585 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R585 += 1, R539 += 1 };
  s1 -> s1 [89, 65535] { R585 += 1, R539 += 1, R541 += 1 };
  s2 -> s1 [0, 85] { R585 += 1, R539 += 1, R541 += 1 };
  s2 -> s5 [0, 65535] { R585 += 1 };
  s2 -> s2 [0, 65535] { R585 += 1, R539 += 1, R540 += 1, R541 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [89, 65535] { R585 += 1, R539 += 1, R541 += 1 };
  s3 -> s1 [0, 85] { R585 += 1, R539 += 1, R541 += 1 };
  s3 -> s2 [0, 65535] { R585 += 1, R539 += 1, R540 += 1, R541 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R585 += 1, R538 += 1, R539 += 1 };
  s3 -> s1 [89, 65535] { R585 += 1, R539 += 1, R541 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R585 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R587 += 1, R547 += 1, R548 += 1 };
  s0 -> s2 [0, 65535] { R587 += 1, R548 += 1, R549 += 1, R550 += 1 };
  s0 -> s3 [0, 65535] { R587 += 1, R548 += 1, R550 += 1, R551 += 1 };
  s0 -> s0 [0, 65535] { R586 += 1, R587 += 1 };
  s1 -> s1 [0, 65535] { R587 += 1, R547 += 1, R548 += 1 };
  s1 -> s2 [0, 65535] { R587 += 1, R548 += 1, R549 += 1, R550 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [0, 65535] { R587 += 1, R548 += 1, R550 += 1, R551 += 1 };
  s2 -> s4 [0, 65535] { R587 += 1 };
  s2 -> s2 [0, 65535] { R587 += 1, R548 += 1, R549 += 1, R550 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R587 += 1, R548 += 1, R550 += 1, R551 += 1 };
  s3 -> s4 [0, 65535] { R587 += 1 };
  s3 -> s5 [0, 65535] { R587 += 1, R548 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R587 += 1, R548 += 1, R550 += 1, R551 += 1 };
  s4 -> s4 [0, 65535] { R587 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s4 [0, 65535] { R587 += 1 };
  s5 -> s5 [0, 65535] { R587 += 1, R548 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 84] { R589 += 1, R557 += 1, R559 += 1 };
  s0 -> s2 [0, 65535] { R589 += 1, R557 += 1, R558 += 1, R559 += 1 };
  s0 -> s3 [0, 65535] { R589 += 1, R556 += 1, R557 += 1 };
  s0 -> s0 [0, 65535] { R588 += 1, R589 += 1 };
  s0 -> s4 [85, 85] { R589 += 1, R557 += 1, R559 += 1 };
  s0 -> s5 [89, 89] { R589 += 1, R557 += 1, R559 += 1 };
  s0 -> s1 [90, 65535] { R589 += 1, R557 += 1, R559 += 1 };
  s1 -> s1 [0, 84] { R589 += 1, R557 += 1, R559 += 1 };
  s1 -> s4 [85, 85] { R589 += 1, R557 += 1, R559 += 1 };
  s1 -> s5 [89, 89] { R589 += 1, R557 += 1, R559 += 1 };
  s1 -> s1 [90, 65535] { R589 += 1, R557 += 1, R559 += 1 };
  s2 -> s1 [0, 84] { R589 += 1, R557 += 1, R559 += 1 };
  s2 -> s2 [0, 65535] { R589 += 1, R557 += 1, R558 += 1, R559 += 1 };
  s2 -> s4 [85, 85] { R589 += 1, R557 += 1, R559 += 1 };
  s2 -> s5 [89, 89] { R589 += 1, R557 += 1, R559 += 1 };
  s2 -> s1 [90, 65535] { R589 += 1, R557 += 1, R559 += 1 };
  s3 -> s1 [0, 84] { R589 += 1, R557 += 1, R559 += 1 };
  s3 -> s2 [0, 65535] { R589 += 1, R557 += 1, R558 += 1, R559 += 1 };
  s3 -> s3 [0, 65535] { R589 += 1, R556 += 1, R557 += 1 };
  s3 -> s4 [85, 85] { R589 += 1, R557 += 1, R559 += 1 };
  s3 -> s5 [89, 89] { R589 += 1, R557 += 1, R559 += 1 };
  s3 -> s1 [90, 65535] { R589 += 1, R557 += 1, R559 += 1 };
  s4 -> s4 [0, 85] { R589 += 1, R557 += 1, R559 += 1 };
  s4 -> s8 [89, 89] { R589 += 1, R557 += 1, R559 += 1 };
  s4 -> s4 [90, 65535] { R589 += 1, R557 += 1, R559 += 1 };
  s5 -> s5 [0, 84] { R589 += 1, R557 += 1, R559 += 1 };
  s5 -> s5 [0, 65535] { R589 += 1, R557 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R589 += 1 };
  s5 -> s8 [85, 85] { R589 += 1, R557 += 1, R559 += 1 };
  s5 -> s9 [85, 85] { R589 += 1, R557 += 1, R559 += 1 };
  s5 -> s5 [89, 65535] { R589 += 1, R557 += 1, R559 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R589 += 1 };
  s8 -> s8 [0, 85] { R589 += 1, R557 += 1, R559 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R589 += 1, R557 += 1 };
  s8 -> s7 [0, 65535] { R589 += 1 };
  s8 -> s8 [89, 65535] { R589 += 1, R557 += 1, R559 += 1 };
  s9 -> s6 [0, 65535];
  s9 -> s9 [0, 65535] { R589 += 1, R557 += 1 };
  s9 -> s7 [0, 65535] { R589 += 1 };
  accepting s8, s5, s9, s6, s7;
};
automaton value2_23 {
  init s0;
  s0 -> s0 [0, 65535] { R590 += 1, R591 += 1 };
  s0 -> s1 [0, 65535] { R591 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R591 += 1, R19 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 77] { R593 += 1 };
  s0 -> s0 [0, 65535] { R592 += 1, R593 += 1 };
  s0 -> s2 [78, 78] { R593 += 1 };
  s0 -> s3 [78, 78] { R593 += 1 };
  s0 -> s4 [85, 85] { R593 += 1 };
  s0 -> s1 [86, 65535] { R593 += 1 };
  s1 -> s1 [0, 77] { R593 += 1 };
  s1 -> s2 [78, 78] { R593 += 1 };
  s1 -> s3 [78, 78] { R593 += 1 };
  s1 -> s4 [85, 85] { R593 += 1 };
  s1 -> s1 [86, 65535] { R593 += 1 };
  s3 -> s3 [0, 78] { R593 += 1 };
  s3 -> s6 [85, 85] { R593 += 1 };
  s3 -> s3 [86, 65535] { R593 += 1 };
  s4 -> s4 [0, 77] { R593 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s5 [78, 78] { R593 += 1 };
  s4 -> s6 [78, 78] { R593 += 1 };
  s4 -> s4 [85, 65535] { R593 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 78] { R593 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s6 [85, 65535] { R593 += 1 };
  accepting s4, s5, s6;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 77] { R595 += 1, R486 += 1 };
  s0 -> s0 [0, 65535] { R594 += 1, R595 += 1 };
  s0 -> s2 [78, 78] { R595 += 1, R486 += 1 };
  s0 -> s3 [78, 78] { R595 += 1, R486 += 1 };
  s0 -> s1 [79, 65535] { R595 += 1, R486 += 1 };
  s1 -> s1 [0, 77] { R595 += 1, R486 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [78, 78] { R595 += 1, R486 += 1 };
  s1 -> s3 [78, 78] { R595 += 1, R486 += 1 };
  s1 -> s1 [79, 65535] { R595 += 1, R486 += 1 };
  s2 -> s2 [0, 65535] { R595 += 1, R486 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 77] { R597 += 1, R488 += 1 };
  s0 -> s0 [0, 65535] { R596 += 1, R597 += 1 };
  s0 -> s2 [78, 78] { R597 += 1, R488 += 1 };
  s0 -> s3 [78, 78] { R597 += 1, R488 += 1 };
  s0 -> s1 [79, 65535] { R597 += 1, R488 += 1 };
  s1 -> s1 [0, 77] { R597 += 1, R488 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [78, 78] { R597 += 1, R488 += 1 };
  s1 -> s3 [78, 78] { R597 += 1, R488 += 1 };
  s1 -> s1 [79, 65535] { R597 += 1, R488 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R597 += 1, R488 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 77] { R599 += 1, R490 += 1, R491 += 1 };
  s0 -> s0 [0, 65535] { R598 += 1, R599 += 1 };
  s0 -> s2 [78, 78] { R599 += 1, R490 += 1, R491 += 1 };
  s0 -> s3 [78, 78] { R599 += 1, R490 += 1, R491 += 1 };
  s0 -> s1 [79, 65535] { R599 += 1, R490 += 1, R491 += 1 };
  s1 -> s1 [0, 77] { R599 += 1, R490 += 1, R491 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [78, 78] { R599 += 1, R490 += 1, R491 += 1 };
  s1 -> s3 [78, 78] { R599 += 1, R490 += 1, R491 += 1 };
  s1 -> s1 [79, 65535] { R599 += 1, R490 += 1, R491 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R599 += 1, R490 += 1, R491 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 77] { R601 += 1, R496 += 1, R497 += 1 };
  s0 -> s0 [0, 65535] { R600 += 1, R601 += 1 };
  s0 -> s2 [78, 78] { R601 += 1, R496 += 1, R497 += 1 };
  s0 -> s3 [78, 78] { R601 += 1, R496 += 1, R497 += 1 };
  s0 -> s1 [79, 65535] { R601 += 1, R496 += 1, R497 += 1 };
  s1 -> s1 [0, 77] { R601 += 1, R496 += 1, R497 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [78, 78] { R601 += 1, R496 += 1, R497 += 1 };
  s1 -> s3 [78, 78] { R601 += 1, R496 += 1, R497 += 1 };
  s1 -> s1 [79, 65535] { R601 += 1, R496 += 1, R497 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R601 += 1, R496 += 1, R497 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 77] { R603 += 1, R500 += 1, R501 += 1 };
  s0 -> s0 [0, 65535] { R602 += 1, R603 += 1 };
  s0 -> s2 [78, 78] { R603 += 1, R500 += 1, R501 += 1 };
  s0 -> s3 [78, 78] { R603 += 1, R500 += 1, R501 += 1 };
  s0 -> s1 [79, 65535] { R603 += 1, R500 += 1, R501 += 1 };
  s1 -> s1 [0, 77] { R603 += 1, R500 += 1, R501 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [78, 78] { R603 += 1, R500 += 1, R501 += 1 };
  s1 -> s3 [78, 78] { R603 += 1, R500 += 1, R501 += 1 };
  s1 -> s1 [79, 65535] { R603 += 1, R500 += 1, R501 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R603 += 1, R500 += 1, R501 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 77] { R605 += 1, R504 += 1, R505 += 1 };
  s0 -> s0 [0, 65535] { R604 += 1, R605 += 1 };
  s0 -> s2 [78, 78] { R605 += 1, R504 += 1, R505 += 1 };
  s0 -> s3 [78, 78] { R605 += 1, R504 += 1, R505 += 1 };
  s0 -> s1 [79, 65535] { R605 += 1, R504 += 1, R505 += 1 };
  s1 -> s1 [0, 77] { R605 += 1, R504 += 1, R505 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [78, 78] { R605 += 1, R504 += 1, R505 += 1 };
  s1 -> s3 [78, 78] { R605 += 1, R504 += 1, R505 += 1 };
  s1 -> s1 [79, 65535] { R605 += 1, R504 += 1, R505 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R605 += 1, R504 += 1, R505 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 77] { R607 += 1, R510 += 1, R511 += 1 };
  s0 -> s0 [0, 65535] { R606 += 1, R607 += 1 };
  s0 -> s2 [78, 78] { R607 += 1, R510 += 1, R511 += 1 };
  s0 -> s3 [78, 78] { R607 += 1, R510 += 1, R511 += 1 };
  s0 -> s1 [79, 65535] { R607 += 1, R510 += 1, R511 += 1 };
  s1 -> s1 [0, 77] { R607 += 1, R510 += 1, R511 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [78, 78] { R607 += 1, R510 += 1, R511 += 1 };
  s1 -> s3 [78, 78] { R607 += 1, R510 += 1, R511 += 1 };
  s1 -> s1 [79, 65535] { R607 += 1, R510 += 1, R511 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R607 += 1, R510 += 1, R511 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 77] { R609 += 1, R516 += 1, R517 += 1 };
  s0 -> s0 [0, 65535] { R608 += 1, R609 += 1 };
  s0 -> s2 [78, 78] { R609 += 1, R516 += 1, R517 += 1 };
  s0 -> s3 [78, 78] { R609 += 1, R516 += 1, R517 += 1 };
  s0 -> s1 [79, 65535] { R609 += 1, R516 += 1, R517 += 1 };
  s1 -> s1 [0, 77] { R609 += 1, R516 += 1, R517 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [78, 78] { R609 += 1, R516 += 1, R517 += 1 };
  s1 -> s3 [78, 78] { R609 += 1, R516 += 1, R517 += 1 };
  s1 -> s1 [79, 65535] { R609 += 1, R516 += 1, R517 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R609 += 1, R516 += 1, R517 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 77] { R611 += 1, R524 += 1, R525 += 1 };
  s0 -> s0 [0, 65535] { R610 += 1, R611 += 1 };
  s0 -> s2 [78, 78] { R611 += 1, R524 += 1, R525 += 1 };
  s0 -> s3 [78, 78] { R611 += 1, R524 += 1, R525 += 1 };
  s0 -> s1 [79, 65535] { R611 += 1, R524 += 1, R525 += 1 };
  s1 -> s1 [0, 77] { R611 += 1, R524 += 1, R525 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [78, 78] { R611 += 1, R524 += 1, R525 += 1 };
  s1 -> s3 [78, 78] { R611 += 1, R524 += 1, R525 += 1 };
  s1 -> s1 [79, 65535] { R611 += 1, R524 += 1, R525 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R611 += 1, R524 += 1, R525 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 77] { R613 += 1, R534 += 1, R535 += 1 };
  s0 -> s0 [0, 65535] { R612 += 1, R613 += 1 };
  s0 -> s2 [78, 78] { R613 += 1, R534 += 1, R535 += 1 };
  s0 -> s3 [78, 78] { R613 += 1, R534 += 1, R535 += 1 };
  s0 -> s1 [79, 65535] { R613 += 1, R534 += 1, R535 += 1 };
  s1 -> s1 [0, 77] { R613 += 1, R534 += 1, R535 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [78, 78] { R613 += 1, R534 += 1, R535 += 1 };
  s1 -> s3 [78, 78] { R613 += 1, R534 += 1, R535 += 1 };
  s1 -> s1 [79, 65535] { R613 += 1, R534 += 1, R535 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R613 += 1, R534 += 1, R535 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 77] { R615 += 1, R542 += 1, R543 += 1 };
  s0 -> s0 [0, 65535] { R614 += 1, R615 += 1 };
  s0 -> s2 [78, 78] { R615 += 1, R542 += 1, R543 += 1 };
  s0 -> s3 [78, 78] { R615 += 1, R542 += 1, R543 += 1 };
  s0 -> s1 [79, 65535] { R615 += 1, R542 += 1, R543 += 1 };
  s1 -> s1 [0, 77] { R615 += 1, R542 += 1, R543 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [78, 78] { R615 += 1, R542 += 1, R543 += 1 };
  s1 -> s3 [78, 78] { R615 += 1, R542 += 1, R543 += 1 };
  s1 -> s1 [79, 65535] { R615 += 1, R542 += 1, R543 += 1 };
  s2 -> s2 [0, 65535] { R615 += 1, R542 += 1, R543 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 77] { R617 += 1, R552 += 1, R553 += 1 };
  s0 -> s0 [0, 65535] { R616 += 1, R617 += 1 };
  s0 -> s2 [78, 78] { R617 += 1, R552 += 1, R553 += 1 };
  s0 -> s3 [78, 78] { R617 += 1, R552 += 1, R553 += 1 };
  s0 -> s1 [79, 65535] { R617 += 1, R552 += 1, R553 += 1 };
  s1 -> s1 [0, 77] { R617 += 1, R552 += 1, R553 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [78, 78] { R617 += 1, R552 += 1, R553 += 1 };
  s1 -> s3 [78, 78] { R617 += 1, R552 += 1, R553 += 1 };
  s1 -> s1 [79, 65535] { R617 += 1, R552 += 1, R553 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R617 += 1, R552 += 1, R553 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
};
synchronised {  // Automata constraining P4
automaton P4_0 {
  init s0;
  s0 -> s1 [110, 110];
  accepting s1;
};
};
synchronised {  // Automata constraining P59
automaton P59_0 {
  init s0;
  s0 -> s1 [117, 117];
  accepting s1;
};
};
constraint R2 = R589 && R20 - R589 = -1 && R21 = R589 && R22 - R589 = -1 && R23 = R589 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R487 + R486 + -1*R557 + -1*R553 = 0 && R502 + R500 = 0 && R503 + R501 + -1*R557 + -1*R553 = 0 && R556 + R552 = 0 && R558 + R554 = 0 && R559 + R555 = 0 && R560 = 0 && R561 = R589 && R562 = 0 && R563 = R589 && R564 = 0 && R565 = R589 && R566 = 0 && R567 = R589 && R568 = 0 && R569 = R589 && R570 = 0 && R571 = R589 && R572 = 0 && R573 = R589 && R574 = 0 && R575 = R589 && R576 = 0 && R577 = R589 && R578 = 0 && R579 = R589 && R580 = 0 && R581 = R589 && R582 = 0 && R583 = R589 && R584 = 0 && R585 = R589 && R586 = 0 && R587 = R589 && R588 = 0 && R592 = 0 && R593 = 0 && R11 < 1 && R12 < 1 && R489 + R488 < 1 && -1*R509 + -1*R506 < 1 && R515 + R512 < 1 && -1*R557 + -1*R553 < 1 && 0 < R589 && (R507 + R504 != 0 || R508 + R505 + -1*R557 + -1*R553 = 0 || R509 + R506 < 1) && (R509 + R506 != 0 || R533 + R528 = 0 || (R522 + R518 = 0 && R523 + R519 = 0)) && (R509 + R506 != 0 || R533 + R528 = 0 || (R531 + R526 = 0 && R532 + R527 = 0)) && (R509 + R506 != 0 || R533 + R528 = 0 || (R540 + R536 = 0 && R541 + R537 = 0)) && (R509 + R506 != 0 || ((R507 + R504 != 0 || R508 + R505 + -1*R557 + -1*R553 = 0 || R557 + R553 < 1) && (R507 + R504 = 0 || R557 + R553 < 1))) && (R513 + R510 != 0 || R514 + R511 + -1*R557 + -1*R553 = 0 || (R509 + R506 = 0 && R557 + R553 = 0)) && (R520 + R516 != 0 || R521 + R517 + -1*R557 + -1*R553 = 0 || (R509 + R506 = 0 && R557 + R553 = 0)) && (R522 + R518 != 0 || R509 + R506 + -1*R523 + -1*R519 = 0 || R509 + R506 < 1) && (R529 + R524 != 0 || R530 + R525 + -1*R557 + -1*R553 = 0 || (R509 + R506 = 0 && R557 + R553 = 0)) && (R531 + R526 != 0 || R509 + R506 + -1*R532 + -1*R527 = 0 || R509 + R506 < 1) && (R538 + R534 != 0 || R539 + R535 + -1*R557 + -1*R553 = 0 || (R509 + R506 = 0 && R557 + R553 = 0)) && (R540 + R536 != 0 || R509 + R506 + -1*R541 + -1*R537 = 0 || R509 + R506 < 1) && (R547 + R542 != 0 || R548 + R543 + -1*R557 + -1*R553 = 0 || (R509 + R506 = 0 && R557 + R553 = 0)) && (R19 = 0 || (R590 = 0 && R591 = 0)) && (R19 = 0 || (R594 = 0 && R595 = 0 && R596 = 0 && R597 = 0 && R598 = 0 && R599 = 0 && R600 = 0 && R601 = 0 && R602 = 0 && R603 = 0 && R604 = 0 && R605 = 0 && R606 = 0 && R607 = 0 && R608 = 0 && R609 = 0 && R610 = 0 && R611 = 0 && R612 = 0 && R613 = 0 && R614 = 0 && R615 = 0 && R616 = 0 && R617 = 0)) && (R495 + R492 = 0 || (R493 + R490 = 0 && R494 + R491 = 0)) && (R495 + R492 = 0 || (R498 + R496 = 0 && R499 + R497 = 0)) && (R507 + R504 = 0 || R509 + R506 < 1) && (R513 + R510 = 0 || (R509 + R506 = 0 && R557 + R553 = 0)) && (R520 + R516 = 0 || (R509 + R506 = 0 && R557 + R553 = 0)) && (R522 + R518 = 0 || R509 + R506 < 1) && (R529 + R524 = 0 || (R509 + R506 = 0 && R557 + R553 = 0)) && (R531 + R526 = 0 || R509 + R506 < 1) && (R538 + R534 = 0 || (R509 + R506 = 0 && R557 + R553 = 0)) && (R540 + R536 = 0 || R509 + R506 < 1) && (R547 + R542 = 0 || (R509 + R506 = 0 && R557 + R553 = 0)) && (R551 + R546 = 0 || (R549 + R544 = 0 && R550 + R545 = 0));
// End of Parikh automata intersection problem
