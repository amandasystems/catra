// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R12, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R3890, R3891, R3892, R3893, R3894, R3895, R4, R40, R42, R43, R46, R47, R48, R5166, R5167, R5168, R5169, R52, R53, R5592, R5593, R5594, R5595, R5596, R5597, R5598, R5599, R56, R5600, R5601, R5602, R5603, R5604, R5605, R5606, R5607, R5608, R5609, R5610, R5611, R5612, R5613, R5614, R5615, R5616, R5617, R5618, R5619, R5620, R5621, R5622, R5623, R5624, R5625, R5626, R5627, R5628, R5629, R5630, R5631, R5632, R5633, R5634, R5635, R5636, R5637, R5638, R5639, R5640, R5641, R5642, R5643, R5644, R5645, R5646, R5647, R5648, R5649, R5650, R5651, R5652, R5653, R5654, R5655, R5656, R5657, R5658, R5659, R5660, R5661, R5662, R5663, R5664, R5665, R5666, R5667, R5668, R5669, R5670, R5671, R5672, R5673, R5674, R5675, R5676, R5677, R5678, R5679, R5680, R5681, R5682, R5683, R5684, R5685, R5686, R5687, R5688, R5689, R5690, R5691, R5692, R5693, R5694, R5695, R5696, R5697, R5698, R5699, R57, R5700, R5701, R58, R62, R63, R66, R67, R68, R69, R70, R71, R72, R73, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [81, 81];
  s0 -> s0 [82, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [81, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 80];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [81, 81];
  s0 -> s1 [82, 65535];
  s1 -> s1 [0, 80];
  s1 -> s2 [81, 81];
  s1 -> s1 [82, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R21 += 1 };
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R25 += 1 };
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R5622 += 1, R5623 += 1 };
  s0 -> s1 [0, 65535] { R5623 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R5623 += 1, R19 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 80] { R5625 += 1 };
  s0 -> s0 [0, 65535] { R5624 += 1, R5625 += 1 };
  s0 -> s2 [81, 81] { R5625 += 1 };
  s0 -> s3 [81, 81] { R5625 += 1 };
  s0 -> s1 [83, 65535] { R5625 += 1 };
  s1 -> s1 [0, 80] { R5625 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R5625 += 1 };
  s1 -> s3 [81, 81] { R5625 += 1 };
  s1 -> s1 [83, 65535] { R5625 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 81] { R5625 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [83, 65535] { R5625 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 80] { R5627 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R5626 += 1, R5627 += 1 };
  s0 -> s2 [81, 81] { R5627 += 1, R38 += 1 };
  s0 -> s3 [81, 81] { R5627 += 1, R38 += 1 };
  s0 -> s1 [82, 65535] { R5627 += 1, R38 += 1 };
  s1 -> s1 [0, 80] { R5627 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R5627 += 1, R38 += 1 };
  s1 -> s3 [81, 81] { R5627 += 1, R38 += 1 };
  s1 -> s1 [82, 65535] { R5627 += 1, R38 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R5627 += 1, R38 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 80] { R5629 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R5628 += 1, R5629 += 1 };
  s0 -> s2 [81, 81] { R5629 += 1, R40 += 1 };
  s0 -> s3 [81, 81] { R5629 += 1, R40 += 1 };
  s0 -> s1 [82, 65535] { R5629 += 1, R40 += 1 };
  s1 -> s1 [0, 80] { R5629 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R5629 += 1, R40 += 1 };
  s1 -> s3 [81, 81] { R5629 += 1, R40 += 1 };
  s1 -> s1 [82, 65535] { R5629 += 1, R40 += 1 };
  s2 -> s2 [0, 65535] { R5629 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 80] { R5631 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R5630 += 1, R5631 += 1 };
  s0 -> s2 [81, 81] { R5631 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [81, 81] { R5631 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [82, 65535] { R5631 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 80] { R5631 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R5631 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [81, 81] { R5631 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [82, 65535] { R5631 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R5631 += 1, R42 += 1, R43 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 80] { R5633 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R5632 += 1, R5633 += 1 };
  s0 -> s2 [81, 81] { R5633 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [81, 81] { R5633 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [82, 65535] { R5633 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 80] { R5633 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R5633 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [81, 81] { R5633 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [82, 65535] { R5633 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R5633 += 1, R46 += 1, R47 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 80] { R5635 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R5634 += 1, R5635 += 1 };
  s0 -> s2 [81, 81] { R5635 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [81, 81] { R5635 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [82, 65535] { R5635 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 80] { R5635 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R5635 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [81, 81] { R5635 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [82, 65535] { R5635 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R5635 += 1, R52 += 1, R53 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 80] { R5637 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R5636 += 1, R5637 += 1 };
  s0 -> s2 [81, 81] { R5637 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [81, 81] { R5637 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [82, 65535] { R5637 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 80] { R5637 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R5637 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [81, 81] { R5637 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [82, 65535] { R5637 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R5637 += 1, R56 += 1, R57 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 80] { R5639 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R5638 += 1, R5639 += 1 };
  s0 -> s2 [81, 81] { R5639 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [81, 81] { R5639 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [82, 65535] { R5639 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 80] { R5639 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R5639 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [81, 81] { R5639 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [82, 65535] { R5639 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535] { R5639 += 1, R62 += 1, R63 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 80] { R5659 += 1 };
  s0 -> s0 [0, 65535] { R5658 += 1, R5659 += 1 };
  s0 -> s2 [81, 81] { R5659 += 1 };
  s0 -> s1 [82, 65535] { R5659 += 1 };
  s1 -> s1 [0, 80] { R5659 += 1 };
  s1 -> s2 [81, 81] { R5659 += 1 };
  s1 -> s1 [82, 65535] { R5659 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R5659 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R5660 += 1, R5661 += 1 };
  s0 -> s1 [0, 65535] { R5661 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R5661 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 80] { R5663 += 1 };
  s0 -> s0 [0, 65535] { R5662 += 1, R5663 += 1 };
  s0 -> s2 [0, 65535] { R5663 += 1, R8 += 1 };
  s0 -> s3 [81, 81] { R5663 += 1 };
  s0 -> s1 [82, 65535] { R5663 += 1 };
  s1 -> s1 [0, 80] { R5663 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [81, 81] { R5663 += 1 };
  s1 -> s1 [82, 65535] { R5663 += 1 };
  s2 -> s1 [0, 80] { R5663 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R5663 += 1, R8 += 1 };
  s2 -> s3 [81, 81] { R5663 += 1 };
  s2 -> s1 [82, 65535] { R5663 += 1 };
  s3 -> s3 [0, 65535] { R5663 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 80] { R5665 += 1, R5603 += 1 };
  s0 -> s0 [0, 65535] { R5664 += 1, R5665 += 1 };
  s0 -> s2 [0, 65535] { R5665 += 1, R5602 += 1, R5603 += 1 };
  s0 -> s1 [82, 65535] { R5665 += 1, R5603 += 1 };
  s1 -> s1 [0, 80] { R5665 += 1, R5603 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R5665 += 1 };
  s1 -> s1 [82, 65535] { R5665 += 1, R5603 += 1 };
  s2 -> s1 [0, 80] { R5665 += 1, R5603 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R5665 += 1, R5602 += 1, R5603 += 1 };
  s2 -> s1 [82, 65535] { R5665 += 1, R5603 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R5667 += 1, R5605 += 1, R17 += 1 };
  s0 -> s2 [0, 65535] { R5667 += 1, R5604 += 1, R5605 += 1 };
  s0 -> s0 [0, 65535] { R5666 += 1, R5667 += 1 };
  s1 -> s1 [0, 65535] { R5667 += 1, R5605 += 1, R17 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R5667 += 1 };
  s2 -> s1 [0, 65535] { R5667 += 1, R5605 += 1, R17 += 1 };
  s2 -> s2 [0, 65535] { R5667 += 1, R5604 += 1, R5605 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R5667 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 65535] { R5669 += 1, R5607 += 1 };
  s0 -> s2 [0, 65535] { R5669 += 1, R5606 += 1, R5607 += 1 };
  s0 -> s0 [0, 65535] { R5668 += 1, R5669 += 1 };
  s1 -> s1 [0, 65535] { R5669 += 1, R5607 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R5669 += 1 };
  s2 -> s1 [0, 65535] { R5669 += 1, R5607 += 1 };
  s2 -> s2 [0, 65535] { R5669 += 1, R5606 += 1, R5607 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R5669 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R5671 += 1, R5609 += 1, R67 += 1 };
  s0 -> s0 [0, 65535] { R5670 += 1, R5671 += 1 };
  s0 -> s2 [0, 65535] { R5671 += 1, R5608 += 1, R5609 += 1 };
  s1 -> s1 [0, 65535] { R5671 += 1, R5609 += 1, R67 += 1 };
  s1 -> s4 [0, 65535] { R5671 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R5671 += 1, R5609 += 1, R67 += 1 };
  s2 -> s2 [0, 65535] { R5671 += 1, R5608 += 1, R5609 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R5671 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 81] { R5673 += 1, R5611 += 1 };
  s0 -> s2 [0, 65535] { R5673 += 1, R5611 += 1, R69 += 1 };
  s0 -> s0 [0, 65535] { R5672 += 1, R5673 += 1 };
  s0 -> s3 [0, 65535] { R5673 += 1, R5610 += 1, R5611 += 1 };
  s0 -> s1 [83, 65535] { R5673 += 1, R5611 += 1 };
  s1 -> s1 [0, 81] { R5673 += 1, R5611 += 1 };
  s1 -> s1 [0, 65535] { R5673 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [83, 65535] { R5673 += 1, R5611 += 1 };
  s2 -> s1 [0, 81] { R5673 += 1, R5611 += 1 };
  s2 -> s2 [0, 65535] { R5673 += 1, R5611 += 1, R69 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R5673 += 1 };
  s2 -> s1 [83, 65535] { R5673 += 1, R5611 += 1 };
  s3 -> s1 [0, 81] { R5673 += 1, R5611 += 1 };
  s3 -> s2 [0, 65535] { R5673 += 1, R5611 += 1, R69 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R5673 += 1, R5610 += 1, R5611 += 1 };
  s3 -> s1 [83, 65535] { R5673 += 1, R5611 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R5673 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 81] { R5675 += 1, R5613 += 1, R73 += 1 };
  s0 -> s2 [0, 65535] { R5675 += 1, R5612 += 1, R5613 += 1 };
  s0 -> s0 [0, 65535] { R5674 += 1, R5675 += 1 };
  s0 -> s3 [0, 65535] { R5675 += 1, R5613 += 1, R72 += 1, R73 += 1 };
  s0 -> s1 [83, 65535] { R5675 += 1, R5613 += 1, R73 += 1 };
  s1 -> s1 [0, 81] { R5675 += 1, R5613 += 1, R73 += 1 };
  s1 -> s1 [0, 65535] { R5675 += 1, R5613 += 1 };
  s1 -> s4 [0, 65535] { R5675 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [83, 65535] { R5675 += 1, R5613 += 1, R73 += 1 };
  s2 -> s1 [0, 81] { R5675 += 1, R5613 += 1, R73 += 1 };
  s2 -> s2 [0, 65535] { R5675 += 1, R5612 += 1, R5613 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R5675 += 1, R5613 += 1, R72 += 1, R73 += 1 };
  s2 -> s1 [83, 65535] { R5675 += 1, R5613 += 1, R73 += 1 };
  s3 -> s1 [0, 81] { R5675 += 1, R5613 += 1, R73 += 1 };
  s3 -> s4 [0, 65535] { R5675 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R5675 += 1, R5613 += 1, R72 += 1, R73 += 1 };
  s3 -> s1 [83, 65535] { R5675 += 1, R5613 += 1, R73 += 1 };
  s4 -> s4 [0, 65535] { R5675 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R5677 += 1, R5615 += 1, R3894 += 1, R3895 += 1 };
  s0 -> s2 [0, 65535] { R5677 += 1, R5614 += 1, R5615 += 1 };
  s0 -> s3 [0, 65535] { R5677 += 1, R5615 += 1 };
  s0 -> s0 [0, 65535] { R5676 += 1, R5677 += 1 };
  s1 -> s1 [0, 65535] { R5677 += 1, R5615 += 1, R3894 += 1, R3895 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s3 [0, 65535] { R5677 += 1, R5615 += 1 };
  s1 -> s5 [0, 65535] { R5677 += 1 };
  s2 -> s1 [0, 65535] { R5677 += 1, R5615 += 1, R3894 += 1, R3895 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R5677 += 1, R5614 += 1, R5615 += 1 };
  s2 -> s3 [0, 65535] { R5677 += 1, R5615 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R5677 += 1, R5615 += 1 };
  s3 -> s5 [0, 65535] { R5677 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R5677 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 82] { R5679 += 1, R5617 += 1, R5169 += 1 };
  s0 -> s2 [0, 65535] { R5679 += 1, R5616 += 1, R5617 += 1 };
  s0 -> s3 [0, 65535] { R5679 += 1, R5617 += 1, R5168 += 1, R5169 += 1 };
  s0 -> s0 [0, 65535] { R5678 += 1, R5679 += 1 };
  s0 -> s4 [84, 84] { R5679 += 1, R5617 += 1, R5169 += 1 };
  s0 -> s1 [85, 65535] { R5679 += 1, R5617 += 1, R5169 += 1 };
  s1 -> s1 [0, 82] { R5679 += 1, R5617 += 1, R5169 += 1 };
  s1 -> s4 [84, 84] { R5679 += 1, R5617 += 1, R5169 += 1 };
  s1 -> s1 [85, 65535] { R5679 += 1, R5617 += 1, R5169 += 1 };
  s2 -> s1 [0, 82] { R5679 += 1, R5617 += 1, R5169 += 1 };
  s2 -> s2 [0, 65535] { R5679 += 1, R5616 += 1, R5617 += 1 };
  s2 -> s3 [0, 65535] { R5679 += 1, R5617 += 1, R5168 += 1, R5169 += 1 };
  s2 -> s4 [84, 84] { R5679 += 1, R5617 += 1, R5169 += 1 };
  s2 -> s1 [85, 65535] { R5679 += 1, R5617 += 1, R5169 += 1 };
  s3 -> s1 [0, 82] { R5679 += 1, R5617 += 1, R5169 += 1 };
  s3 -> s3 [0, 65535] { R5679 += 1, R5617 += 1, R5168 += 1, R5169 += 1 };
  s3 -> s4 [84, 84] { R5679 += 1, R5617 += 1, R5169 += 1 };
  s3 -> s1 [85, 65535] { R5679 += 1, R5617 += 1, R5169 += 1 };
  s4 -> s4 [0, 82] { R5679 += 1, R5617 += 1, R5169 += 1 };
  s4 -> s4 [0, 65535] { R5679 += 1, R5617 += 1 };
  s4 -> s5 [0, 65535] { R5679 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [84, 65535] { R5679 += 1, R5617 += 1, R5169 += 1 };
  s5 -> s5 [0, 65535] { R5679 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s4, s5, s6;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R5681 += 1, R5619 += 1 };
  s0 -> s2 [0, 65535] { R5681 += 1, R5618 += 1, R5619 += 1 };
  s0 -> s3 [0, 65535] { R5681 += 1, R5619 += 1, R5596 += 1, R5597 += 1 };
  s0 -> s0 [0, 65535] { R5680 += 1, R5681 += 1 };
  s1 -> s1 [0, 65535] { R5681 += 1, R5619 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R5681 += 1 };
  s2 -> s1 [0, 65535] { R5681 += 1, R5619 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R5681 += 1, R5618 += 1, R5619 += 1 };
  s2 -> s3 [0, 65535] { R5681 += 1, R5619 += 1, R5596 += 1, R5597 += 1 };
  s3 -> s1 [0, 65535] { R5681 += 1, R5619 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R5681 += 1, R5619 += 1, R5596 += 1, R5597 += 1 };
  s3 -> s5 [0, 65535] { R5681 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R5681 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 81] { R5683 += 1, R5621 += 1, R5601 += 1 };
  s0 -> s0 [0, 65535] { R5682 += 1, R5683 += 1 };
  s0 -> s2 [0, 65535] { R5683 += 1, R5620 += 1, R5621 += 1 };
  s0 -> s3 [0, 65535] { R5683 += 1, R5621 += 1, R5600 += 1, R5601 += 1 };
  s0 -> s4 [82, 82] { R5683 += 1, R5621 += 1, R5601 += 1 };
  s0 -> s5 [82, 82] { R5683 += 1, R5621 += 1, R5601 += 1 };
  s0 -> s1 [85, 65535] { R5683 += 1, R5621 += 1, R5601 += 1 };
  s1 -> s1 [0, 81] { R5683 += 1, R5621 += 1, R5601 += 1 };
  s1 -> s1 [0, 65535] { R5683 += 1, R5621 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R5683 += 1 };
  s1 -> s4 [82, 82] { R5683 += 1, R5621 += 1, R5601 += 1 };
  s1 -> s5 [82, 82] { R5683 += 1, R5621 += 1, R5601 += 1 };
  s1 -> s1 [85, 65535] { R5683 += 1, R5621 += 1, R5601 += 1 };
  s2 -> s1 [0, 81] { R5683 += 1, R5621 += 1, R5601 += 1 };
  s2 -> s2 [0, 65535] { R5683 += 1, R5620 += 1, R5621 += 1 };
  s2 -> s3 [0, 65535] { R5683 += 1, R5621 += 1, R5600 += 1, R5601 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s4 [82, 82] { R5683 += 1, R5621 += 1, R5601 += 1 };
  s2 -> s5 [82, 82] { R5683 += 1, R5621 += 1, R5601 += 1 };
  s2 -> s1 [85, 65535] { R5683 += 1, R5621 += 1, R5601 += 1 };
  s3 -> s1 [0, 81] { R5683 += 1, R5621 += 1, R5601 += 1 };
  s3 -> s3 [0, 65535] { R5683 += 1, R5621 += 1, R5600 += 1, R5601 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s7 [0, 65535] { R5683 += 1 };
  s3 -> s4 [82, 82] { R5683 += 1, R5621 += 1, R5601 += 1 };
  s3 -> s5 [82, 82] { R5683 += 1, R5621 += 1, R5601 += 1 };
  s3 -> s1 [85, 65535] { R5683 += 1, R5621 += 1, R5601 += 1 };
  s4 -> s4 [0, 65535] { R5683 += 1, R5621 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R5683 += 1 };
  s5 -> s5 [0, 82] { R5683 += 1, R5621 += 1, R5601 += 1 };
  s5 -> s5 [0, 65535] { R5683 += 1, R5621 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R5683 += 1 };
  s5 -> s5 [85, 65535] { R5683 += 1, R5621 += 1, R5601 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R5683 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R5685 += 1, R5640 += 1, R5641 += 1 };
  s0 -> s0 [0, 65535] { R5684 += 1, R5685 += 1 };
  s0 -> s2 [0, 65535] { R5685 += 1, R5641 += 1, R18 += 1 };
  s1 -> s1 [0, 65535] { R5685 += 1, R5640 += 1, R5641 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R5685 += 1, R5641 += 1, R18 += 1 };
  s2 -> s3 [0, 65535] { R5685 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R5685 += 1, R5641 += 1, R18 += 1 };
  s3 -> s3 [0, 65535] { R5685 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 80] { R5687 += 1, R5643 += 1 };
  s0 -> s2 [0, 65535] { R5687 += 1, R5642 += 1, R5643 += 1 };
  s0 -> s0 [0, 65535] { R5686 += 1, R5687 += 1 };
  s0 -> s3 [81, 81] { R5687 += 1, R5643 += 1 };
  s0 -> s4 [81, 81] { R5687 += 1, R5643 += 1 };
  s0 -> s5 [82, 82] { R5687 += 1, R5643 += 1 };
  s0 -> s1 [83, 65535] { R5687 += 1, R5643 += 1 };
  s1 -> s1 [0, 80] { R5687 += 1, R5643 += 1 };
  s1 -> s3 [81, 81] { R5687 += 1, R5643 += 1 };
  s1 -> s4 [81, 81] { R5687 += 1, R5643 += 1 };
  s1 -> s5 [82, 82] { R5687 += 1, R5643 += 1 };
  s1 -> s1 [83, 65535] { R5687 += 1, R5643 += 1 };
  s2 -> s1 [0, 80] { R5687 += 1, R5643 += 1 };
  s2 -> s2 [0, 65535] { R5687 += 1, R5642 += 1, R5643 += 1 };
  s2 -> s3 [81, 81] { R5687 += 1, R5643 += 1 };
  s2 -> s4 [81, 81] { R5687 += 1, R5643 += 1 };
  s2 -> s5 [82, 82] { R5687 += 1, R5643 += 1 };
  s2 -> s1 [83, 65535] { R5687 += 1, R5643 += 1 };
  s4 -> s4 [0, 81] { R5687 += 1, R5643 += 1 };
  s4 -> s7 [82, 82] { R5687 += 1, R5643 += 1 };
  s4 -> s4 [83, 65535] { R5687 += 1, R5643 += 1 };
  s5 -> s5 [0, 80] { R5687 += 1, R5643 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R5687 += 1 };
  s5 -> s7 [81, 81] { R5687 += 1, R5643 += 1 };
  s5 -> s8 [81, 81] { R5687 += 1, R5643 += 1 };
  s5 -> s5 [82, 65535] { R5687 += 1, R5643 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R5687 += 1, R5643 += 1 };
  s7 -> s9 [0, 65535] { R5687 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R5687 += 1 };
  s9 -> s6 [0, 65535];
  s9 -> s9 [0, 65535] { R5687 += 1 };
  accepting s8, s5, s9, s6, s7;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 80] { R5689 += 1, R5645 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R5688 += 1, R5689 += 1 };
  s0 -> s2 [0, 65535] { R5689 += 1, R5644 += 1, R5645 += 1 };
  s0 -> s3 [81, 81] { R5689 += 1, R5645 += 1, R66 += 1 };
  s0 -> s4 [81, 81] { R5689 += 1, R5645 += 1, R66 += 1 };
  s0 -> s1 [82, 65535] { R5689 += 1, R5645 += 1, R66 += 1 };
  s1 -> s1 [0, 80] { R5689 += 1, R5645 += 1, R66 += 1 };
  s1 -> s1 [0, 65535] { R5689 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [81, 81] { R5689 += 1, R5645 += 1, R66 += 1 };
  s1 -> s4 [81, 81] { R5689 += 1, R5645 += 1, R66 += 1 };
  s1 -> s1 [82, 65535] { R5689 += 1, R5645 += 1, R66 += 1 };
  s2 -> s1 [0, 80] { R5689 += 1, R5645 += 1, R66 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R5689 += 1, R5644 += 1, R5645 += 1 };
  s2 -> s3 [81, 81] { R5689 += 1, R5645 += 1, R66 += 1 };
  s2 -> s4 [81, 81] { R5689 += 1, R5645 += 1, R66 += 1 };
  s2 -> s1 [82, 65535] { R5689 += 1, R5645 += 1, R66 += 1 };
  s3 -> s3 [0, 65535] { R5689 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R5689 += 1, R5645 += 1, R66 += 1 };
  s4 -> s5 [0, 65535] { R5689 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R5689 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 80] { R5691 += 1, R5647 += 1, R68 += 1 };
  s0 -> s0 [0, 65535] { R5690 += 1, R5691 += 1 };
  s0 -> s2 [0, 65535] { R5691 += 1, R5646 += 1, R5647 += 1 };
  s0 -> s3 [81, 81] { R5691 += 1, R5647 += 1, R68 += 1 };
  s0 -> s4 [81, 81] { R5691 += 1, R5647 += 1, R68 += 1 };
  s0 -> s1 [82, 65535] { R5691 += 1, R5647 += 1, R68 += 1 };
  s1 -> s1 [0, 80] { R5691 += 1, R5647 += 1, R68 += 1 };
  s1 -> s1 [0, 65535] { R5691 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [81, 81] { R5691 += 1, R5647 += 1, R68 += 1 };
  s1 -> s4 [81, 81] { R5691 += 1, R5647 += 1, R68 += 1 };
  s1 -> s1 [82, 65535] { R5691 += 1, R5647 += 1, R68 += 1 };
  s2 -> s1 [0, 80] { R5691 += 1, R5647 += 1, R68 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R5691 += 1, R5646 += 1, R5647 += 1 };
  s2 -> s3 [81, 81] { R5691 += 1, R5647 += 1, R68 += 1 };
  s2 -> s4 [81, 81] { R5691 += 1, R5647 += 1, R68 += 1 };
  s2 -> s1 [82, 65535] { R5691 += 1, R5647 += 1, R68 += 1 };
  s3 -> s3 [0, 65535] { R5691 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R5691 += 1, R5647 += 1, R68 += 1 };
  s4 -> s6 [0, 65535] { R5691 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R5691 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 80] { R5693 += 1, R5649 += 1, R70 += 1, R71 += 1 };
  s0 -> s0 [0, 65535] { R5692 += 1, R5693 += 1 };
  s0 -> s2 [0, 65535] { R5693 += 1, R5648 += 1, R5649 += 1 };
  s0 -> s3 [81, 81] { R5693 += 1, R5649 += 1, R70 += 1, R71 += 1 };
  s0 -> s4 [81, 81] { R5693 += 1, R5649 += 1, R70 += 1, R71 += 1 };
  s0 -> s1 [82, 65535] { R5693 += 1, R5649 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 80] { R5693 += 1, R5649 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 65535] { R5693 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [81, 81] { R5693 += 1, R5649 += 1, R70 += 1, R71 += 1 };
  s1 -> s4 [81, 81] { R5693 += 1, R5649 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [82, 65535] { R5693 += 1, R5649 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [0, 80] { R5693 += 1, R5649 += 1, R70 += 1, R71 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R5693 += 1, R5648 += 1, R5649 += 1 };
  s2 -> s3 [81, 81] { R5693 += 1, R5649 += 1, R70 += 1, R71 += 1 };
  s2 -> s4 [81, 81] { R5693 += 1, R5649 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [82, 65535] { R5693 += 1, R5649 += 1, R70 += 1, R71 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R5693 += 1, R5649 += 1, R70 += 1, R71 += 1 };
  s3 -> s6 [0, 65535] { R5693 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R5693 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R5693 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 80] { R5695 += 1, R5651 += 1, R3891 += 1, R3892 += 1 };
  s0 -> s2 [0, 80] { R5695 += 1, R5651 += 1, R3890 += 1, R3891 += 1 };
  s0 -> s0 [0, 65535] { R5694 += 1, R5695 += 1 };
  s0 -> s3 [0, 65535] { R5695 += 1, R5650 += 1, R5651 += 1 };
  s0 -> s4 [81, 81] { R5695 += 1, R5651 += 1, R3891 += 1, R3892 += 1 };
  s0 -> s5 [81, 81] { R5695 += 1, R5651 += 1, R3890 += 1, R3891 += 1 };
  s0 -> s6 [81, 81] { R5695 += 1, R5651 += 1, R3891 += 1, R3892 += 1 };
  s0 -> s7 [81, 81] { R5695 += 1, R5651 += 1, R3890 += 1, R3891 += 1 };
  s0 -> s1 [82, 65535] { R5695 += 1, R5651 += 1, R3891 += 1, R3892 += 1 };
  s0 -> s2 [82, 65535] { R5695 += 1, R5651 += 1, R3890 += 1, R3891 += 1 };
  s1 -> s1 [0, 80] { R5695 += 1, R5651 += 1, R3891 += 1, R3892 += 1 };
  s1 -> s1 [0, 65535] { R5695 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s4 [81, 81] { R5695 += 1, R5651 += 1, R3891 += 1, R3892 += 1 };
  s1 -> s6 [81, 81] { R5695 += 1, R5651 += 1, R3891 += 1, R3892 += 1 };
  s1 -> s1 [82, 65535] { R5695 += 1, R5651 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s1 [0, 80] { R5695 += 1, R5651 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s2 [0, 80] { R5695 += 1, R5651 += 1, R3890 += 1, R3891 += 1 };
  s2 -> s4 [81, 81] { R5695 += 1, R5651 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s5 [81, 81] { R5695 += 1, R5651 += 1, R3890 += 1, R3891 += 1 };
  s2 -> s6 [81, 81] { R5695 += 1, R5651 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s7 [81, 81] { R5695 += 1, R5651 += 1, R3890 += 1, R3891 += 1 };
  s2 -> s1 [82, 65535] { R5695 += 1, R5651 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s2 [82, 65535] { R5695 += 1, R5651 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s1 [0, 80] { R5695 += 1, R5651 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s2 [0, 80] { R5695 += 1, R5651 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s3 [0, 65535] { R5695 += 1, R5650 += 1, R5651 += 1 };
  s3 -> s4 [81, 81] { R5695 += 1, R5651 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s5 [81, 81] { R5695 += 1, R5651 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s6 [81, 81] { R5695 += 1, R5651 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s7 [81, 81] { R5695 += 1, R5651 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s1 [82, 65535] { R5695 += 1, R5651 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s2 [82, 65535] { R5695 += 1, R5651 += 1, R3890 += 1, R3891 += 1 };
  s4 -> s4 [0, 65535] { R5695 += 1, R5651 += 1, R3891 += 1, R3892 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s9 [0, 65535] { R5695 += 1 };
  s5 -> s4 [0, 65535] { R5695 += 1, R5651 += 1, R3891 += 1, R3892 += 1 };
  s5 -> s5 [0, 65535] { R5695 += 1, R5651 += 1, R3890 += 1, R3891 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R5695 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R5695 += 1 };
  accepting s4, s8, s9, s6, s1;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 80] { R5697 += 1, R5653 += 1, R5166 += 1, R5167 += 1 };
  s0 -> s0 [0, 65535] { R5696 += 1, R5697 += 1 };
  s0 -> s2 [0, 65535] { R5697 += 1, R5652 += 1, R5653 += 1 };
  s0 -> s3 [81, 81] { R5697 += 1, R5653 += 1, R5166 += 1, R5167 += 1 };
  s0 -> s4 [81, 81] { R5697 += 1, R5653 += 1, R5166 += 1, R5167 += 1 };
  s0 -> s1 [82, 65535] { R5697 += 1, R5653 += 1, R5166 += 1, R5167 += 1 };
  s1 -> s1 [0, 80] { R5697 += 1, R5653 += 1, R5166 += 1, R5167 += 1 };
  s1 -> s1 [0, 65535] { R5697 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [81, 81] { R5697 += 1, R5653 += 1, R5166 += 1, R5167 += 1 };
  s1 -> s4 [81, 81] { R5697 += 1, R5653 += 1, R5166 += 1, R5167 += 1 };
  s1 -> s1 [82, 65535] { R5697 += 1, R5653 += 1, R5166 += 1, R5167 += 1 };
  s2 -> s1 [0, 80] { R5697 += 1, R5653 += 1, R5166 += 1, R5167 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R5697 += 1, R5652 += 1, R5653 += 1 };
  s2 -> s3 [81, 81] { R5697 += 1, R5653 += 1, R5166 += 1, R5167 += 1 };
  s2 -> s4 [81, 81] { R5697 += 1, R5653 += 1, R5166 += 1, R5167 += 1 };
  s2 -> s1 [82, 65535] { R5697 += 1, R5653 += 1, R5166 += 1, R5167 += 1 };
  s3 -> s6 [0, 65535] { R5697 += 1 };
  s3 -> s3 [0, 65535] { R5697 += 1, R5653 += 1, R5166 += 1, R5167 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R5697 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R5697 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 80] { R5699 += 1, R5655 += 1, R5592 += 1, R5593 += 1 };
  s0 -> s2 [0, 80] { R5699 += 1, R5655 += 1, R5593 += 1, R5594 += 1 };
  s0 -> s3 [0, 65535] { R5699 += 1, R5654 += 1, R5655 += 1 };
  s0 -> s0 [0, 65535] { R5698 += 1, R5699 += 1 };
  s0 -> s4 [81, 81] { R5699 += 1, R5655 += 1, R5592 += 1, R5593 += 1 };
  s0 -> s5 [81, 81] { R5699 += 1, R5655 += 1, R5593 += 1, R5594 += 1 };
  s0 -> s6 [81, 81] { R5699 += 1, R5655 += 1, R5593 += 1, R5594 += 1 };
  s0 -> s7 [81, 81] { R5699 += 1, R5655 += 1, R5592 += 1, R5593 += 1 };
  s0 -> s1 [82, 65535] { R5699 += 1, R5655 += 1, R5592 += 1, R5593 += 1 };
  s0 -> s2 [82, 65535] { R5699 += 1, R5655 += 1, R5593 += 1, R5594 += 1 };
  s1 -> s1 [0, 80] { R5699 += 1, R5655 += 1, R5592 += 1, R5593 += 1 };
  s1 -> s2 [0, 80] { R5699 += 1, R5655 += 1, R5593 += 1, R5594 += 1 };
  s1 -> s4 [81, 81] { R5699 += 1, R5655 += 1, R5592 += 1, R5593 += 1 };
  s1 -> s5 [81, 81] { R5699 += 1, R5655 += 1, R5593 += 1, R5594 += 1 };
  s1 -> s6 [81, 81] { R5699 += 1, R5655 += 1, R5593 += 1, R5594 += 1 };
  s1 -> s7 [81, 81] { R5699 += 1, R5655 += 1, R5592 += 1, R5593 += 1 };
  s1 -> s1 [82, 65535] { R5699 += 1, R5655 += 1, R5592 += 1, R5593 += 1 };
  s1 -> s2 [82, 65535] { R5699 += 1, R5655 += 1, R5593 += 1, R5594 += 1 };
  s2 -> s2 [0, 80] { R5699 += 1, R5655 += 1, R5593 += 1, R5594 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R5699 += 1 };
  s2 -> s5 [81, 81] { R5699 += 1, R5655 += 1, R5593 += 1, R5594 += 1 };
  s2 -> s6 [81, 81] { R5699 += 1, R5655 += 1, R5593 += 1, R5594 += 1 };
  s2 -> s2 [82, 65535] { R5699 += 1, R5655 += 1, R5593 += 1, R5594 += 1 };
  s3 -> s1 [0, 80] { R5699 += 1, R5655 += 1, R5592 += 1, R5593 += 1 };
  s3 -> s2 [0, 80] { R5699 += 1, R5655 += 1, R5593 += 1, R5594 += 1 };
  s3 -> s3 [0, 65535] { R5699 += 1, R5654 += 1, R5655 += 1 };
  s3 -> s4 [81, 81] { R5699 += 1, R5655 += 1, R5592 += 1, R5593 += 1 };
  s3 -> s5 [81, 81] { R5699 += 1, R5655 += 1, R5593 += 1, R5594 += 1 };
  s3 -> s6 [81, 81] { R5699 += 1, R5655 += 1, R5593 += 1, R5594 += 1 };
  s3 -> s7 [81, 81] { R5699 += 1, R5655 += 1, R5592 += 1, R5593 += 1 };
  s3 -> s1 [82, 65535] { R5699 += 1, R5655 += 1, R5592 += 1, R5593 += 1 };
  s3 -> s2 [82, 65535] { R5699 += 1, R5655 += 1, R5593 += 1, R5594 += 1 };
  s5 -> s5 [0, 65535] { R5699 += 1 };
  s5 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R5699 += 1, R5655 += 1, R5593 += 1, R5594 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s9 [0, 65535] { R5699 += 1 };
  s7 -> s6 [0, 65535] { R5699 += 1, R5655 += 1, R5593 += 1, R5594 += 1 };
  s7 -> s7 [0, 65535] { R5699 += 1, R5655 += 1, R5592 += 1, R5593 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R5699 += 1 };
  accepting s8, s5, s2, s9, s6;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 80] { R5701 += 1, R5657 += 1, R5598 += 1, R5599 += 1 };
  s0 -> s2 [0, 65535] { R5701 += 1, R5656 += 1, R5657 += 1 };
  s0 -> s0 [0, 65535] { R5700 += 1, R5701 += 1 };
  s0 -> s3 [81, 81] { R5701 += 1, R5657 += 1, R5598 += 1, R5599 += 1 };
  s0 -> s4 [81, 81] { R5701 += 1, R5657 += 1, R5598 += 1, R5599 += 1 };
  s0 -> s1 [82, 65535] { R5701 += 1, R5657 += 1, R5598 += 1, R5599 += 1 };
  s1 -> s1 [0, 80] { R5701 += 1, R5657 += 1, R5598 += 1, R5599 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R5701 += 1 };
  s1 -> s3 [81, 81] { R5701 += 1, R5657 += 1, R5598 += 1, R5599 += 1 };
  s1 -> s4 [81, 81] { R5701 += 1, R5657 += 1, R5598 += 1, R5599 += 1 };
  s1 -> s1 [82, 65535] { R5701 += 1, R5657 += 1, R5598 += 1, R5599 += 1 };
  s2 -> s1 [0, 80] { R5701 += 1, R5657 += 1, R5598 += 1, R5599 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R5701 += 1, R5656 += 1, R5657 += 1 };
  s2 -> s3 [81, 81] { R5701 += 1, R5657 += 1, R5598 += 1, R5599 += 1 };
  s2 -> s4 [81, 81] { R5701 += 1, R5657 += 1, R5598 += 1, R5599 += 1 };
  s2 -> s1 [82, 65535] { R5701 += 1, R5657 += 1, R5598 += 1, R5599 += 1 };
  s3 -> s3 [0, 65535] { R5701 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R5701 += 1, R5657 += 1, R5598 += 1, R5599 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R5701 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R5701 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [113, 113];
  accepting s1;
};
};
synchronised {  // Automata constraining c1
automaton c1_0 {
  init s0;
  s0 -> s1 [114, 114];
  accepting s1;
};
};
constraint R1 = R5617 && R2 = R5701 && R20 - R5701 = -1 && R21 = R5701 && R22 - R5701 = -1 && R23 = R5701 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R5169 + -1*R5167 - R53 = 0 && R52 + R5168 + R5166 = 0 && R5616 = 0 && R5642 = 0 && R5643 = 0 && R5650 = 0 && R5651 = 0 && R5654 = 0 && R5655 = 0 && R5658 = 0 && R5659 = R5701 && R5660 = 0 && R5661 = R5701 && R5662 = 0 && R5663 = R5701 && R5664 = 0 && R5665 = R5701 && R5666 = 0 && R5667 = R5701 && R5668 = 0 && R5669 = R5701 && R5670 = 0 && R5671 = R5701 && R5672 = 0 && R5673 = R5701 && R5674 = 0 && R5675 = R5701 && R5676 = 0 && R5677 = R5701 && R5678 = 0 && R5679 = R5701 && R5680 = 0 && R5681 = R5701 && R5682 = 0 && R5683 = R5701 && R5684 = 0 && R5685 = R5701 && R5686 = 0 && R5687 = R5701 && R5688 = 0 && R5689 = R5701 && R5690 = 0 && R5691 = R5701 && R5692 = 0 && R5693 = R5701 && R5694 = 0 && R5695 = R5701 && R5696 = 0 && R5697 = R5701 && R5698 = 0 && R5699 = R5701 && R5700 = 0 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R5169 + -1*R5167 - R53 < 1 && -1 < R5617 && 0 < R5701 && (R48 + R3895 + R3892 != 0 || ((R42 + R72 + R70 != 0 || R43 + R73 + R71 + -1*R5169 + -1*R5167 - R53 = 0 || R53 + R5169 + R5167 < 1) && (R42 + R72 + R70 = 0 || R53 + R5169 + R5167 < 1))) && (R48 + R3895 + R3892 != 0 || ((R46 + R3893 + R3890 != 0 || R47 + R3894 + R3891 + -1*R5169 + -1*R5167 - R53 = 0 || R53 + R5169 + R5167 < 1) && (R46 + R3893 + R3890 = 0 || R53 + R5169 + R5167 < 1))) && (R5602 != 0 || R5603 = R5617 || (R17 = 0 && R5617 = 0)) && (R5604 != 0 || R5605 = R5617 || (R17 = 0 && R5617 = 0)) && (R5606 != 0 || R5607 = R5617 || (R17 = 0 && R5617 = 0)) && (R5608 != 0 || R5609 = R5617 || (R17 = 0 && R5617 = 0)) && (R5610 != 0 || R5611 = R5617 || (R17 = 0 && R5617 = 0)) && (R5612 != 0 || R5613 = R5617 || (R17 = 0 && R5617 = 0)) && (R5614 != 0 || R5615 = R5617 || (R17 = 0 && R5617 = 0)) && (R5618 != 0 || R5617 = R5619 || (R17 = 0 && R5617 = 0)) && (R5620 != 0 || R5617 = R5621 || (R17 = 0 && R5617 = 0)) && (R18 = 0 || (R5640 = 0 && R5641 = 0)) && (R18 = 0 || (R5644 = 0 && R5645 = 0)) && (R18 = 0 || (R5646 = 0 && R5647 = 0)) && (R18 = 0 || (R5648 = 0 && R5649 = 0)) && (R18 = 0 || (R5652 = 0 && R5653 = 0)) && (R18 = 0 || (R5656 = 0 && R5657 = 0)) && (R19 = 0 || (R5622 = 0 && R5623 = 0)) && (R19 = 0 || (R5624 = 0 && R5625 = 0)) && (R19 = 0 || (R5626 = 0 && R5627 = 0)) && (R19 = 0 || (R5628 = 0 && R5629 = 0)) && (R19 = 0 || (R5630 = 0 && R5631 = 0)) && (R19 = 0 || (R5632 = 0 && R5633 = 0)) && (R19 = 0 || (R5634 = 0 && R5635 = 0)) && (R19 = 0 || (R5636 = 0 && R5637 = 0)) && (R19 = 0 || (R5638 = 0 && R5639 = 0)) && (R48 + R3895 + R3892 = 0 || (R42 + R72 + R70 = 0 && R43 + R73 + R71 + -1*R5169 + -1*R5167 - R53 = 0)) && (R48 + R3895 + R3892 = 0 || (R46 + R3893 + R3890 = 0 && R47 + R3894 + R3891 + -1*R5169 + -1*R5167 - R53 = 0)) && (R58 + R5597 + R5594 = 0 || (R56 + R5595 + R5592 = 0 && R57 + R5596 + R5593 = 0)) && (R58 + R5597 + R5594 = 0 || (R62 + R5600 + R5598 = 0 && R63 + R5601 + R5599 = 0)) && (R5602 = 0 || (R17 = 0 && R5617 = 0)) && (R5604 = 0 || (R17 = 0 && R5617 = 0)) && (R5606 = 0 || (R17 = 0 && R5617 = 0)) && (R5608 = 0 || (R17 = 0 && R5617 = 0)) && (R5610 = 0 || (R17 = 0 && R5617 = 0)) && (R5612 = 0 || (R17 = 0 && R5617 = 0)) && (R5614 = 0 || (R17 = 0 && R5617 = 0)) && (R5618 = 0 || (R17 = 0 && R5617 = 0)) && (R5620 = 0 || (R17 = 0 && R5617 = 0));
// End of Parikh automata intersection problem
