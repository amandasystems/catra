// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R12, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R70, R71, R72, R73, R7706, R7707, R7708, R7709, R7710, R7711, R7712, R7713, R7714, R7715, R8, R8138, R8139, R8140, R8141, R8142, R8143, R8352, R8353, R8354, R8355, R8356, R8357, R8358, R8359, R8360, R8361, R8362, R8363, R8364, R8365, R8366, R8367, R8368, R8369, R8370, R8371, R8372, R8373, R8374, R8375, R8376, R8377, R8378, R8379, R8380, R8381, R8382, R8383, R8384, R8385, R8386, R8387, R8388, R8389, R8390, R8391, R8392, R8393, R8394, R8395, R8396, R8397, R8398, R8399, R8400, R8401, R8402, R8403, R8404, R8405, R8406, R8407, R8408, R8409, R8410, R8411, R8412, R8413, R8414, R8415, R8416, R8417, R8418, R8419, R8420, R8421, R8422, R8423, R8424, R8425, R8426, R8427, R8428, R8429, R8430, R8431, R8432, R8433, R8434, R8435, R8436, R8437, R8438, R8439, R8440, R8441, R8442, R8443, R8444, R8445, R8446, R8447, R8448, R8449, R8450, R8451, R8452, R8453, R8454, R8455;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [81, 81];
  s0 -> s0 [82, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [81, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 80];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [81, 81];
  s0 -> s1 [82, 65535];
  s1 -> s1 [0, 80];
  s1 -> s2 [81, 81];
  s1 -> s1 [82, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R21 += 1 };
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R25 += 1 };
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R8377 += 1, R19 += 1 };
  s0 -> s0 [0, 65535] { R8376 += 1, R8377 += 1 };
  s1 -> s1 [0, 65535] { R8377 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 80] { R8379 += 1 };
  s0 -> s0 [0, 65535] { R8378 += 1, R8379 += 1 };
  s0 -> s2 [81, 81] { R8379 += 1 };
  s0 -> s3 [81, 81] { R8379 += 1 };
  s0 -> s1 [83, 65535] { R8379 += 1 };
  s1 -> s1 [0, 80] { R8379 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R8379 += 1 };
  s1 -> s3 [81, 81] { R8379 += 1 };
  s1 -> s1 [83, 65535] { R8379 += 1 };
  s2 -> s2 [0, 81] { R8379 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [83, 65535] { R8379 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 80] { R8381 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R8380 += 1, R8381 += 1 };
  s0 -> s2 [81, 81] { R8381 += 1, R38 += 1 };
  s0 -> s3 [81, 81] { R8381 += 1, R38 += 1 };
  s0 -> s1 [82, 65535] { R8381 += 1, R38 += 1 };
  s1 -> s1 [0, 80] { R8381 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R8381 += 1, R38 += 1 };
  s1 -> s3 [81, 81] { R8381 += 1, R38 += 1 };
  s1 -> s1 [82, 65535] { R8381 += 1, R38 += 1 };
  s2 -> s2 [0, 65535] { R8381 += 1, R38 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 80] { R8383 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R8382 += 1, R8383 += 1 };
  s0 -> s2 [81, 81] { R8383 += 1, R40 += 1 };
  s0 -> s3 [81, 81] { R8383 += 1, R40 += 1 };
  s0 -> s1 [82, 65535] { R8383 += 1, R40 += 1 };
  s1 -> s1 [0, 80] { R8383 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R8383 += 1, R40 += 1 };
  s1 -> s3 [81, 81] { R8383 += 1, R40 += 1 };
  s1 -> s1 [82, 65535] { R8383 += 1, R40 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8383 += 1, R40 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 80] { R8385 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R8384 += 1, R8385 += 1 };
  s0 -> s2 [81, 81] { R8385 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [81, 81] { R8385 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [82, 65535] { R8385 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 80] { R8385 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R8385 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [81, 81] { R8385 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [82, 65535] { R8385 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535] { R8385 += 1, R42 += 1, R43 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 80] { R8387 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R8386 += 1, R8387 += 1 };
  s0 -> s2 [81, 81] { R8387 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [81, 81] { R8387 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [82, 65535] { R8387 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 80] { R8387 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R8387 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [81, 81] { R8387 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [82, 65535] { R8387 += 1, R46 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8387 += 1, R46 += 1, R47 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 80] { R8389 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R8388 += 1, R8389 += 1 };
  s0 -> s2 [81, 81] { R8389 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [81, 81] { R8389 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [82, 65535] { R8389 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 80] { R8389 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R8389 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [81, 81] { R8389 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [82, 65535] { R8389 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535] { R8389 += 1, R52 += 1, R53 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 80] { R8391 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R8390 += 1, R8391 += 1 };
  s0 -> s2 [81, 81] { R8391 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [81, 81] { R8391 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [82, 65535] { R8391 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 80] { R8391 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R8391 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [81, 81] { R8391 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [82, 65535] { R8391 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R8391 += 1, R56 += 1, R57 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 80] { R8393 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R8392 += 1, R8393 += 1 };
  s0 -> s2 [81, 81] { R8393 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [81, 81] { R8393 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [82, 65535] { R8393 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 80] { R8393 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R8393 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [81, 81] { R8393 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [82, 65535] { R8393 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8393 += 1, R62 += 1, R63 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 80] { R8413 += 1 };
  s0 -> s0 [0, 65535] { R8412 += 1, R8413 += 1 };
  s0 -> s2 [81, 81] { R8413 += 1 };
  s0 -> s1 [82, 65535] { R8413 += 1 };
  s1 -> s1 [0, 80] { R8413 += 1 };
  s1 -> s2 [81, 81] { R8413 += 1 };
  s1 -> s1 [82, 65535] { R8413 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R8413 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R8414 += 1, R8415 += 1 };
  s0 -> s1 [0, 65535] { R8415 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R8415 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 80] { R8417 += 1 };
  s0 -> s0 [0, 65535] { R8416 += 1, R8417 += 1 };
  s0 -> s2 [0, 65535] { R8417 += 1, R8 += 1 };
  s0 -> s3 [81, 81] { R8417 += 1 };
  s0 -> s1 [82, 65535] { R8417 += 1 };
  s1 -> s1 [0, 80] { R8417 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [81, 81] { R8417 += 1 };
  s1 -> s1 [82, 65535] { R8417 += 1 };
  s2 -> s1 [0, 80] { R8417 += 1 };
  s2 -> s2 [0, 65535] { R8417 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [81, 81] { R8417 += 1 };
  s2 -> s1 [82, 65535] { R8417 += 1 };
  s3 -> s3 [0, 65535] { R8417 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 80] { R8419 += 1, R8357 += 1 };
  s0 -> s2 [0, 65535] { R8419 += 1, R8356 += 1, R8357 += 1 };
  s0 -> s0 [0, 65535] { R8418 += 1, R8419 += 1 };
  s0 -> s1 [82, 65535] { R8419 += 1, R8357 += 1 };
  s1 -> s1 [0, 80] { R8419 += 1, R8357 += 1 };
  s1 -> s1 [0, 65535] { R8419 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [82, 65535] { R8419 += 1, R8357 += 1 };
  s2 -> s1 [0, 80] { R8419 += 1, R8357 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R8419 += 1, R8356 += 1, R8357 += 1 };
  s2 -> s1 [82, 65535] { R8419 += 1, R8357 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R8421 += 1, R8358 += 1, R8359 += 1 };
  s0 -> s2 [0, 65535] { R8421 += 1, R8359 += 1, R17 += 1 };
  s0 -> s0 [0, 65535] { R8420 += 1, R8421 += 1 };
  s1 -> s1 [0, 65535] { R8421 += 1, R8358 += 1, R8359 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R8421 += 1, R8359 += 1, R17 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R8421 += 1 };
  s2 -> s2 [0, 65535] { R8421 += 1, R8359 += 1, R17 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8421 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 65535] { R8423 += 1, R8360 += 1, R8361 += 1 };
  s0 -> s2 [0, 65535] { R8423 += 1, R8361 += 1 };
  s0 -> s0 [0, 65535] { R8422 += 1, R8423 += 1 };
  s1 -> s1 [0, 65535] { R8423 += 1, R8360 += 1, R8361 += 1 };
  s1 -> s2 [0, 65535] { R8423 += 1, R8361 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R8423 += 1, R8361 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R8423 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8423 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_23 {
  init s0;
  s0 -> s0 [0, 65535] { R8424 += 1, R8425 += 1 };
  s0 -> s1 [0, 65535] { R8425 += 1, R8362 += 1, R8363 += 1 };
  s0 -> s2 [0, 65535] { R8425 += 1, R8363 += 1, R67 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R8425 += 1, R8362 += 1, R8363 += 1 };
  s1 -> s2 [0, 65535] { R8425 += 1, R8363 += 1, R67 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R8425 += 1 };
  s2 -> s2 [0, 65535] { R8425 += 1, R8363 += 1, R67 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8425 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 81] { R8427 += 1, R8365 += 1 };
  s0 -> s2 [0, 65535] { R8427 += 1, R8365 += 1, R69 += 1 };
  s0 -> s3 [0, 65535] { R8427 += 1, R8364 += 1, R8365 += 1 };
  s0 -> s0 [0, 65535] { R8426 += 1, R8427 += 1 };
  s0 -> s1 [83, 65535] { R8427 += 1, R8365 += 1 };
  s1 -> s1 [0, 81] { R8427 += 1, R8365 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R8427 += 1 };
  s1 -> s1 [83, 65535] { R8427 += 1, R8365 += 1 };
  s2 -> s1 [0, 81] { R8427 += 1, R8365 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8427 += 1, R8365 += 1, R69 += 1 };
  s2 -> s5 [0, 65535] { R8427 += 1 };
  s2 -> s1 [83, 65535] { R8427 += 1, R8365 += 1 };
  s3 -> s1 [0, 81] { R8427 += 1, R8365 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R8427 += 1, R8365 += 1, R69 += 1 };
  s3 -> s3 [0, 65535] { R8427 += 1, R8364 += 1, R8365 += 1 };
  s3 -> s1 [83, 65535] { R8427 += 1, R8365 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8427 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 81] { R8429 += 1, R8367 += 1, R73 += 1 };
  s0 -> s2 [0, 65535] { R8429 += 1, R8367 += 1, R72 += 1, R73 += 1 };
  s0 -> s0 [0, 65535] { R8428 += 1, R8429 += 1 };
  s0 -> s3 [0, 65535] { R8429 += 1, R8366 += 1, R8367 += 1 };
  s0 -> s1 [83, 65535] { R8429 += 1, R8367 += 1, R73 += 1 };
  s1 -> s1 [0, 81] { R8429 += 1, R8367 += 1, R73 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R8429 += 1 };
  s1 -> s1 [0, 65535] { R8429 += 1, R8367 += 1 };
  s1 -> s1 [83, 65535] { R8429 += 1, R8367 += 1, R73 += 1 };
  s2 -> s1 [0, 81] { R8429 += 1, R8367 += 1, R73 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8429 += 1, R8367 += 1, R72 += 1, R73 += 1 };
  s2 -> s5 [0, 65535] { R8429 += 1 };
  s2 -> s1 [83, 65535] { R8429 += 1, R8367 += 1, R73 += 1 };
  s3 -> s1 [0, 81] { R8429 += 1, R8367 += 1, R73 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R8429 += 1, R8367 += 1, R72 += 1, R73 += 1 };
  s3 -> s3 [0, 65535] { R8429 += 1, R8366 += 1, R8367 += 1 };
  s3 -> s1 [83, 65535] { R8429 += 1, R8367 += 1, R73 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8429 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R8431 += 1, R8369 += 1 };
  s0 -> s0 [0, 65535] { R8430 += 1, R8431 += 1 };
  s0 -> s2 [0, 65535] { R8431 += 1, R8368 += 1, R8369 += 1 };
  s1 -> s1 [0, 65535] { R8431 += 1, R8369 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R8431 += 1 };
  s2 -> s1 [0, 65535] { R8431 += 1, R8369 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R8431 += 1, R8368 += 1, R8369 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8431 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 82] { R8433 += 1, R8371 += 1, R7715 += 1 };
  s0 -> s2 [0, 65535] { R8433 += 1, R8370 += 1, R8371 += 1 };
  s0 -> s1 [0, 65535] { R8433 += 1, R8371 += 1 };
  s0 -> s0 [0, 65535] { R8432 += 1, R8433 += 1 };
  s0 -> s1 [84, 65535] { R8433 += 1, R8371 += 1, R7715 += 1 };
  s1 -> s1 [0, 82] { R8433 += 1, R8371 += 1, R7715 += 1 };
  s1 -> s1 [0, 65535] { R8433 += 1, R8371 += 1 };
  s1 -> s4 [0, 65535] { R8433 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [84, 65535] { R8433 += 1, R8371 += 1, R7715 += 1 };
  s2 -> s1 [0, 82] { R8433 += 1, R8371 += 1, R7715 += 1 };
  s2 -> s2 [0, 65535] { R8433 += 1, R8370 += 1, R8371 += 1 };
  s2 -> s1 [0, 65535] { R8433 += 1, R8371 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [84, 65535] { R8433 += 1, R8371 += 1, R7715 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8433 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R8435 += 1, R8372 += 1, R8373 += 1 };
  s0 -> s2 [0, 65535] { R8435 += 1, R8373 += 1 };
  s0 -> s0 [0, 65535] { R8434 += 1, R8435 += 1 };
  s0 -> s3 [0, 65535] { R8435 += 1, R8373 += 1, R8142 += 1, R8143 += 1 };
  s1 -> s1 [0, 65535] { R8435 += 1, R8372 += 1, R8373 += 1 };
  s1 -> s2 [0, 65535] { R8435 += 1, R8373 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s3 [0, 65535] { R8435 += 1, R8373 += 1, R8142 += 1, R8143 += 1 };
  s2 -> s2 [0, 65535] { R8435 += 1, R8373 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R8435 += 1 };
  s3 -> s2 [0, 65535] { R8435 += 1, R8373 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R8435 += 1 };
  s3 -> s3 [0, 65535] { R8435 += 1, R8373 += 1, R8142 += 1, R8143 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8435 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 82] { R8437 += 1, R8375 += 1, R8355 += 1 };
  s0 -> s2 [0, 65535] { R8437 += 1, R8374 += 1, R8375 += 1 };
  s0 -> s0 [0, 65535] { R8436 += 1, R8437 += 1 };
  s0 -> s1 [0, 65535] { R8437 += 1, R8375 += 1 };
  s0 -> s1 [85, 65535] { R8437 += 1, R8375 += 1, R8355 += 1 };
  s1 -> s1 [0, 82] { R8437 += 1, R8375 += 1, R8355 += 1 };
  s1 -> s4 [0, 65535] { R8437 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R8437 += 1, R8375 += 1 };
  s1 -> s1 [85, 65535] { R8437 += 1, R8375 += 1, R8355 += 1 };
  s2 -> s1 [0, 82] { R8437 += 1, R8375 += 1, R8355 += 1 };
  s2 -> s2 [0, 65535] { R8437 += 1, R8374 += 1, R8375 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R8437 += 1, R8375 += 1 };
  s2 -> s1 [85, 65535] { R8437 += 1, R8375 += 1, R8355 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8437 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s0 [0, 65535] { R8438 += 1, R8439 += 1 };
  s0 -> s1 [0, 65535] { R8439 += 1, R8394 += 1, R8395 += 1 };
  s0 -> s2 [0, 65535] { R8439 += 1, R8395 += 1, R18 += 1 };
  s1 -> s1 [0, 65535] { R8439 += 1, R8394 += 1, R8395 += 1 };
  s1 -> s2 [0, 65535] { R8439 += 1, R8395 += 1, R18 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R8439 += 1 };
  s2 -> s2 [0, 65535] { R8439 += 1, R8395 += 1, R18 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8439 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 80] { R8441 += 1, R8397 += 1 };
  s0 -> s0 [0, 65535] { R8440 += 1, R8441 += 1 };
  s0 -> s2 [0, 65535] { R8441 += 1, R8396 += 1, R8397 += 1 };
  s0 -> s3 [81, 81] { R8441 += 1, R8397 += 1 };
  s0 -> s4 [81, 81] { R8441 += 1, R8397 += 1 };
  s0 -> s5 [82, 82] { R8441 += 1, R8397 += 1 };
  s0 -> s1 [83, 65535] { R8441 += 1, R8397 += 1 };
  s1 -> s1 [0, 80] { R8441 += 1, R8397 += 1 };
  s1 -> s3 [81, 81] { R8441 += 1, R8397 += 1 };
  s1 -> s4 [81, 81] { R8441 += 1, R8397 += 1 };
  s1 -> s5 [82, 82] { R8441 += 1, R8397 += 1 };
  s1 -> s1 [83, 65535] { R8441 += 1, R8397 += 1 };
  s2 -> s1 [0, 80] { R8441 += 1, R8397 += 1 };
  s2 -> s2 [0, 65535] { R8441 += 1, R8396 += 1, R8397 += 1 };
  s2 -> s3 [81, 81] { R8441 += 1, R8397 += 1 };
  s2 -> s4 [81, 81] { R8441 += 1, R8397 += 1 };
  s2 -> s5 [82, 82] { R8441 += 1, R8397 += 1 };
  s2 -> s1 [83, 65535] { R8441 += 1, R8397 += 1 };
  s3 -> s3 [0, 81] { R8441 += 1, R8397 += 1 };
  s3 -> s8 [82, 82] { R8441 += 1, R8397 += 1 };
  s3 -> s3 [83, 65535] { R8441 += 1, R8397 += 1 };
  s5 -> s5 [0, 80] { R8441 += 1, R8397 += 1 };
  s5 -> s5 [0, 65535] { R8441 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [81, 81] { R8441 += 1, R8397 += 1 };
  s5 -> s8 [81, 81] { R8441 += 1, R8397 += 1 };
  s5 -> s5 [82, 65535] { R8441 += 1, R8397 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R8441 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s6 [0, 65535];
  s8 -> s9 [0, 65535] { R8441 += 1 };
  s8 -> s8 [0, 65535] { R8441 += 1, R8397 += 1 };
  s9 -> s6 [0, 65535];
  s9 -> s9 [0, 65535] { R8441 += 1 };
  accepting s8, s5, s9, s6, s7;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 80] { R8443 += 1, R8399 += 1, R66 += 1 };
  s0 -> s2 [0, 65535] { R8443 += 1, R8398 += 1, R8399 += 1 };
  s0 -> s0 [0, 65535] { R8442 += 1, R8443 += 1 };
  s0 -> s3 [81, 81] { R8443 += 1, R8399 += 1, R66 += 1 };
  s0 -> s4 [81, 81] { R8443 += 1, R8399 += 1, R66 += 1 };
  s0 -> s1 [82, 65535] { R8443 += 1, R8399 += 1, R66 += 1 };
  s1 -> s1 [0, 80] { R8443 += 1, R8399 += 1, R66 += 1 };
  s1 -> s1 [0, 65535] { R8443 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [81, 81] { R8443 += 1, R8399 += 1, R66 += 1 };
  s1 -> s4 [81, 81] { R8443 += 1, R8399 += 1, R66 += 1 };
  s1 -> s1 [82, 65535] { R8443 += 1, R8399 += 1, R66 += 1 };
  s2 -> s1 [0, 80] { R8443 += 1, R8399 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R8443 += 1, R8398 += 1, R8399 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [81, 81] { R8443 += 1, R8399 += 1, R66 += 1 };
  s2 -> s4 [81, 81] { R8443 += 1, R8399 += 1, R66 += 1 };
  s2 -> s1 [82, 65535] { R8443 += 1, R8399 += 1, R66 += 1 };
  s3 -> s3 [0, 65535] { R8443 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R8443 += 1 };
  s4 -> s4 [0, 65535] { R8443 += 1, R8399 += 1, R66 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R8443 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 80] { R8445 += 1, R8401 += 1, R68 += 1 };
  s0 -> s2 [0, 65535] { R8445 += 1, R8400 += 1, R8401 += 1 };
  s0 -> s0 [0, 65535] { R8444 += 1, R8445 += 1 };
  s0 -> s3 [81, 81] { R8445 += 1, R8401 += 1, R68 += 1 };
  s0 -> s4 [81, 81] { R8445 += 1, R8401 += 1, R68 += 1 };
  s0 -> s1 [82, 65535] { R8445 += 1, R8401 += 1, R68 += 1 };
  s1 -> s1 [0, 80] { R8445 += 1, R8401 += 1, R68 += 1 };
  s1 -> s1 [0, 65535] { R8445 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [81, 81] { R8445 += 1, R8401 += 1, R68 += 1 };
  s1 -> s4 [81, 81] { R8445 += 1, R8401 += 1, R68 += 1 };
  s1 -> s1 [82, 65535] { R8445 += 1, R8401 += 1, R68 += 1 };
  s2 -> s1 [0, 80] { R8445 += 1, R8401 += 1, R68 += 1 };
  s2 -> s2 [0, 65535] { R8445 += 1, R8400 += 1, R8401 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [81, 81] { R8445 += 1, R8401 += 1, R68 += 1 };
  s2 -> s4 [81, 81] { R8445 += 1, R8401 += 1, R68 += 1 };
  s2 -> s1 [82, 65535] { R8445 += 1, R8401 += 1, R68 += 1 };
  s3 -> s6 [0, 65535] { R8445 += 1 };
  s3 -> s3 [0, 65535] { R8445 += 1, R8401 += 1, R68 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8445 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8445 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 80] { R8447 += 1, R8403 += 1, R70 += 1, R71 += 1 };
  s0 -> s0 [0, 65535] { R8446 += 1, R8447 += 1 };
  s0 -> s2 [0, 65535] { R8447 += 1, R8402 += 1, R8403 += 1 };
  s0 -> s3 [81, 81] { R8447 += 1, R8403 += 1, R70 += 1, R71 += 1 };
  s0 -> s4 [81, 81] { R8447 += 1, R8403 += 1, R70 += 1, R71 += 1 };
  s0 -> s1 [82, 65535] { R8447 += 1, R8403 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 80] { R8447 += 1, R8403 += 1, R70 += 1, R71 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R8447 += 1 };
  s1 -> s3 [81, 81] { R8447 += 1, R8403 += 1, R70 += 1, R71 += 1 };
  s1 -> s4 [81, 81] { R8447 += 1, R8403 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [82, 65535] { R8447 += 1, R8403 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [0, 80] { R8447 += 1, R8403 += 1, R70 += 1, R71 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R8447 += 1, R8402 += 1, R8403 += 1 };
  s2 -> s3 [81, 81] { R8447 += 1, R8403 += 1, R70 += 1, R71 += 1 };
  s2 -> s4 [81, 81] { R8447 += 1, R8403 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [82, 65535] { R8447 += 1, R8403 += 1, R70 += 1, R71 += 1 };
  s3 -> s3 [0, 65535] { R8447 += 1, R8403 += 1, R70 += 1, R71 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R8447 += 1 };
  s4 -> s4 [0, 65535] { R8447 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8447 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 80] { R8449 += 1, R8405 += 1, R7706 += 1, R7707 += 1 };
  s0 -> s2 [0, 80] { R8449 += 1, R8405 += 1, R7707 += 1, R7708 += 1 };
  s0 -> s3 [0, 65535] { R8449 += 1, R8404 += 1, R8405 += 1 };
  s0 -> s0 [0, 65535] { R8448 += 1, R8449 += 1 };
  s0 -> s4 [81, 81] { R8449 += 1, R8405 += 1, R7707 += 1, R7708 += 1 };
  s0 -> s5 [81, 81] { R8449 += 1, R8405 += 1, R7706 += 1, R7707 += 1 };
  s0 -> s6 [81, 81] { R8449 += 1, R8405 += 1, R7707 += 1, R7708 += 1 };
  s0 -> s7 [81, 81] { R8449 += 1, R8405 += 1, R7706 += 1, R7707 += 1 };
  s0 -> s1 [82, 65535] { R8449 += 1, R8405 += 1, R7706 += 1, R7707 += 1 };
  s0 -> s2 [82, 65535] { R8449 += 1, R8405 += 1, R7707 += 1, R7708 += 1 };
  s1 -> s1 [0, 80] { R8449 += 1, R8405 += 1, R7706 += 1, R7707 += 1 };
  s1 -> s2 [0, 80] { R8449 += 1, R8405 += 1, R7707 += 1, R7708 += 1 };
  s1 -> s4 [81, 81] { R8449 += 1, R8405 += 1, R7707 += 1, R7708 += 1 };
  s1 -> s5 [81, 81] { R8449 += 1, R8405 += 1, R7706 += 1, R7707 += 1 };
  s1 -> s6 [81, 81] { R8449 += 1, R8405 += 1, R7707 += 1, R7708 += 1 };
  s1 -> s7 [81, 81] { R8449 += 1, R8405 += 1, R7706 += 1, R7707 += 1 };
  s1 -> s1 [82, 65535] { R8449 += 1, R8405 += 1, R7706 += 1, R7707 += 1 };
  s1 -> s2 [82, 65535] { R8449 += 1, R8405 += 1, R7707 += 1, R7708 += 1 };
  s2 -> s11 [0, 80] { R8449 += 1, R8405 += 1 };
  s2 -> s2 [0, 80] { R8449 += 1, R8405 += 1, R7707 += 1, R7708 += 1 };
  s2 -> s8 [81, 81] { R8449 += 1, R8405 += 1 };
  s2 -> s6 [81, 81] { R8449 += 1, R8405 += 1, R7707 += 1, R7708 += 1 };
  s2 -> s12 [81, 81] { R8449 += 1, R8405 += 1 };
  s2 -> s4 [81, 81] { R8449 += 1, R8405 += 1, R7707 += 1, R7708 += 1 };
  s2 -> s11 [82, 65535] { R8449 += 1, R8405 += 1 };
  s2 -> s2 [82, 65535] { R8449 += 1, R8405 += 1, R7707 += 1, R7708 += 1 };
  s3 -> s1 [0, 80] { R8449 += 1, R8405 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s2 [0, 80] { R8449 += 1, R8405 += 1, R7707 += 1, R7708 += 1 };
  s3 -> s3 [0, 65535] { R8449 += 1, R8404 += 1, R8405 += 1 };
  s3 -> s4 [81, 81] { R8449 += 1, R8405 += 1, R7707 += 1, R7708 += 1 };
  s3 -> s5 [81, 81] { R8449 += 1, R8405 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s6 [81, 81] { R8449 += 1, R8405 += 1, R7707 += 1, R7708 += 1 };
  s3 -> s7 [81, 81] { R8449 += 1, R8405 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s1 [82, 65535] { R8449 += 1, R8405 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s2 [82, 65535] { R8449 += 1, R8405 += 1, R7707 += 1, R7708 += 1 };
  s4 -> s8 [0, 65535] { R8449 += 1, R8405 += 1 };
  s4 -> s4 [0, 65535] { R8449 += 1, R8405 += 1, R7707 += 1, R7708 += 1 };
  s7 -> s4 [0, 65535] { R8449 += 1, R8405 += 1, R7707 += 1, R7708 += 1 };
  s7 -> s7 [0, 65535] { R8449 += 1, R8405 += 1, R7706 += 1, R7707 += 1 };
  s8 -> s8 [0, 65535] { R8449 += 1, R8405 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [0, 65535] { R8449 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R8449 += 1 };
  s11 -> s11 [0, 80] { R8449 += 1, R8405 += 1 };
  s11 -> s11 [0, 65535] { R8449 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s8 [81, 81] { R8449 += 1, R8405 += 1 };
  s11 -> s12 [81, 81] { R8449 += 1, R8405 += 1 };
  s11 -> s11 [82, 65535] { R8449 += 1, R8405 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R8449 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 80] { R8451 += 1, R8407 += 1, R7712 += 1, R7713 += 1 };
  s0 -> s2 [0, 80] { R8451 += 1, R8407 += 1, R7713 += 1 };
  s0 -> s0 [0, 65535] { R8450 += 1, R8451 += 1 };
  s0 -> s3 [0, 65535] { R8451 += 1, R8406 += 1, R8407 += 1 };
  s0 -> s4 [81, 81] { R8451 += 1, R8407 += 1, R7713 += 1 };
  s0 -> s5 [81, 81] { R8451 += 1, R8407 += 1, R7712 += 1, R7713 += 1 };
  s0 -> s6 [81, 81] { R8451 += 1, R8407 += 1, R7713 += 1 };
  s0 -> s7 [81, 81] { R8451 += 1, R8407 += 1, R7712 += 1, R7713 += 1 };
  s0 -> s2 [82, 82] { R8451 += 1, R8407 += 1, R7713 += 1 };
  s0 -> s1 [82, 65535] { R8451 += 1, R8407 += 1, R7712 += 1, R7713 += 1 };
  s0 -> s8 [84, 84] { R8451 += 1, R8407 += 1, R7713 += 1 };
  s0 -> s2 [85, 65535] { R8451 += 1, R8407 += 1, R7713 += 1 };
  s1 -> s1 [0, 80] { R8451 += 1, R8407 += 1, R7712 += 1, R7713 += 1 };
  s1 -> s2 [0, 80] { R8451 += 1, R8407 += 1, R7713 += 1 };
  s1 -> s4 [81, 81] { R8451 += 1, R8407 += 1, R7713 += 1 };
  s1 -> s5 [81, 81] { R8451 += 1, R8407 += 1, R7712 += 1, R7713 += 1 };
  s1 -> s6 [81, 81] { R8451 += 1, R8407 += 1, R7713 += 1 };
  s1 -> s7 [81, 81] { R8451 += 1, R8407 += 1, R7712 += 1, R7713 += 1 };
  s1 -> s2 [82, 82] { R8451 += 1, R8407 += 1, R7713 += 1 };
  s1 -> s1 [82, 65535] { R8451 += 1, R8407 += 1, R7712 += 1, R7713 += 1 };
  s1 -> s8 [84, 84] { R8451 += 1, R8407 += 1, R7713 += 1 };
  s1 -> s2 [85, 65535] { R8451 += 1, R8407 += 1, R7713 += 1 };
  s2 -> s2 [0, 80] { R8451 += 1, R8407 += 1, R7713 += 1 };
  s2 -> s4 [81, 81] { R8451 += 1, R8407 += 1, R7713 += 1 };
  s2 -> s6 [81, 81] { R8451 += 1, R8407 += 1, R7713 += 1 };
  s2 -> s2 [82, 82] { R8451 += 1, R8407 += 1, R7713 += 1 };
  s2 -> s8 [84, 84] { R8451 += 1, R8407 += 1, R7713 += 1 };
  s2 -> s2 [85, 65535] { R8451 += 1, R8407 += 1, R7713 += 1 };
  s3 -> s1 [0, 80] { R8451 += 1, R8407 += 1, R7712 += 1, R7713 += 1 };
  s3 -> s2 [0, 80] { R8451 += 1, R8407 += 1, R7713 += 1 };
  s3 -> s3 [0, 65535] { R8451 += 1, R8406 += 1, R8407 += 1 };
  s3 -> s4 [81, 81] { R8451 += 1, R8407 += 1, R7713 += 1 };
  s3 -> s5 [81, 81] { R8451 += 1, R8407 += 1, R7712 += 1, R7713 += 1 };
  s3 -> s6 [81, 81] { R8451 += 1, R8407 += 1, R7713 += 1 };
  s3 -> s7 [81, 81] { R8451 += 1, R8407 += 1, R7712 += 1, R7713 += 1 };
  s3 -> s2 [82, 82] { R8451 += 1, R8407 += 1, R7713 += 1 };
  s3 -> s1 [82, 65535] { R8451 += 1, R8407 += 1, R7712 += 1, R7713 += 1 };
  s3 -> s8 [84, 84] { R8451 += 1, R8407 += 1, R7713 += 1 };
  s3 -> s2 [85, 65535] { R8451 += 1, R8407 += 1, R7713 += 1 };
  s5 -> s6 [0, 82] { R8451 += 1, R8407 += 1, R7713 += 1 };
  s5 -> s5 [0, 65535] { R8451 += 1, R8407 += 1, R7712 += 1, R7713 += 1 };
  s5 -> s10 [84, 84] { R8451 += 1, R8407 += 1, R7713 += 1 };
  s5 -> s6 [85, 65535] { R8451 += 1, R8407 += 1, R7713 += 1 };
  s6 -> s6 [0, 82] { R8451 += 1, R8407 += 1, R7713 += 1 };
  s6 -> s10 [84, 84] { R8451 += 1, R8407 += 1, R7713 += 1 };
  s6 -> s6 [85, 65535] { R8451 += 1, R8407 += 1, R7713 += 1 };
  s8 -> s8 [0, 80] { R8451 += 1, R8407 += 1, R7713 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R8451 += 1 };
  s8 -> s10 [81, 81] { R8451 += 1, R8407 += 1 };
  s8 -> s11 [81, 81] { R8451 += 1, R8407 += 1 };
  s8 -> s8 [82, 82] { R8451 += 1, R8407 += 1, R7713 += 1 };
  s8 -> s8 [82, 65535] { R8451 += 1, R8407 += 1 };
  s8 -> s8 [84, 65535] { R8451 += 1, R8407 += 1, R7713 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 82] { R8451 += 1, R8407 += 1, R7713 += 1 };
  s10 -> s12 [0, 65535] { R8451 += 1 };
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R8451 += 1, R8407 += 1 };
  s10 -> s10 [84, 65535] { R8451 += 1, R8407 += 1, R7713 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R8451 += 1 };
  s12 -> s12 [0, 65535] { R8451 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 80] { R8453 += 1, R8409 += 1, R8138 += 1, R8139 += 1 };
  s0 -> s2 [0, 80] { R8453 += 1, R8409 += 1, R8139 += 1, R8140 += 1 };
  s0 -> s3 [0, 65535] { R8453 += 1, R8408 += 1, R8409 += 1 };
  s0 -> s0 [0, 65535] { R8452 += 1, R8453 += 1 };
  s0 -> s4 [81, 81] { R8453 += 1, R8409 += 1, R8138 += 1, R8139 += 1 };
  s0 -> s5 [81, 81] { R8453 += 1, R8409 += 1, R8139 += 1, R8140 += 1 };
  s0 -> s6 [81, 81] { R8453 += 1, R8409 += 1, R8138 += 1, R8139 += 1 };
  s0 -> s7 [81, 81] { R8453 += 1, R8409 += 1, R8139 += 1, R8140 += 1 };
  s0 -> s1 [82, 65535] { R8453 += 1, R8409 += 1, R8138 += 1, R8139 += 1 };
  s0 -> s2 [82, 65535] { R8453 += 1, R8409 += 1, R8139 += 1, R8140 += 1 };
  s1 -> s1 [0, 80] { R8453 += 1, R8409 += 1, R8138 += 1, R8139 += 1 };
  s1 -> s2 [0, 80] { R8453 += 1, R8409 += 1, R8139 += 1, R8140 += 1 };
  s1 -> s4 [81, 81] { R8453 += 1, R8409 += 1, R8138 += 1, R8139 += 1 };
  s1 -> s5 [81, 81] { R8453 += 1, R8409 += 1, R8139 += 1, R8140 += 1 };
  s1 -> s6 [81, 81] { R8453 += 1, R8409 += 1, R8138 += 1, R8139 += 1 };
  s1 -> s7 [81, 81] { R8453 += 1, R8409 += 1, R8139 += 1, R8140 += 1 };
  s1 -> s1 [82, 65535] { R8453 += 1, R8409 += 1, R8138 += 1, R8139 += 1 };
  s1 -> s2 [82, 65535] { R8453 += 1, R8409 += 1, R8139 += 1, R8140 += 1 };
  s2 -> s2 [0, 80] { R8453 += 1, R8409 += 1, R8139 += 1, R8140 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R8453 += 1 };
  s2 -> s5 [81, 81] { R8453 += 1, R8409 += 1, R8139 += 1, R8140 += 1 };
  s2 -> s7 [81, 81] { R8453 += 1, R8409 += 1, R8139 += 1, R8140 += 1 };
  s2 -> s2 [82, 65535] { R8453 += 1, R8409 += 1, R8139 += 1, R8140 += 1 };
  s3 -> s1 [0, 80] { R8453 += 1, R8409 += 1, R8138 += 1, R8139 += 1 };
  s3 -> s2 [0, 80] { R8453 += 1, R8409 += 1, R8139 += 1, R8140 += 1 };
  s3 -> s3 [0, 65535] { R8453 += 1, R8408 += 1, R8409 += 1 };
  s3 -> s4 [81, 81] { R8453 += 1, R8409 += 1, R8138 += 1, R8139 += 1 };
  s3 -> s5 [81, 81] { R8453 += 1, R8409 += 1, R8139 += 1, R8140 += 1 };
  s3 -> s6 [81, 81] { R8453 += 1, R8409 += 1, R8138 += 1, R8139 += 1 };
  s3 -> s7 [81, 81] { R8453 += 1, R8409 += 1, R8139 += 1, R8140 += 1 };
  s3 -> s1 [82, 65535] { R8453 += 1, R8409 += 1, R8138 += 1, R8139 += 1 };
  s3 -> s2 [82, 65535] { R8453 += 1, R8409 += 1, R8139 += 1, R8140 += 1 };
  s5 -> s5 [0, 65535] { R8453 += 1, R8409 += 1, R8139 += 1, R8140 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s9 [0, 65535] { R8453 += 1 };
  s6 -> s5 [0, 65535] { R8453 += 1, R8409 += 1, R8139 += 1, R8140 += 1 };
  s6 -> s6 [0, 65535] { R8453 += 1, R8409 += 1, R8138 += 1, R8139 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R8453 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R8453 += 1 };
  accepting s8, s5, s2, s9, s7;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 80] { R8455 += 1, R8411 += 1, R8353 += 1 };
  s0 -> s2 [0, 80] { R8455 += 1, R8411 += 1, R8352 += 1, R8353 += 1 };
  s0 -> s3 [0, 65535] { R8455 += 1, R8410 += 1, R8411 += 1 };
  s0 -> s0 [0, 65535] { R8454 += 1, R8455 += 1 };
  s0 -> s4 [81, 81] { R8455 += 1, R8411 += 1, R8352 += 1, R8353 += 1 };
  s0 -> s5 [81, 81] { R8455 += 1, R8411 += 1, R8353 += 1 };
  s0 -> s6 [81, 81] { R8455 += 1, R8411 += 1, R8352 += 1, R8353 += 1 };
  s0 -> s7 [81, 81] { R8455 += 1, R8411 += 1, R8353 += 1 };
  s0 -> s8 [82, 82] { R8455 += 1, R8411 += 1, R8353 += 1 };
  s0 -> s2 [82, 65535] { R8455 += 1, R8411 += 1, R8352 += 1, R8353 += 1 };
  s0 -> s1 [85, 65535] { R8455 += 1, R8411 += 1, R8353 += 1 };
  s1 -> s1 [0, 80] { R8455 += 1, R8411 += 1, R8353 += 1 };
  s1 -> s5 [81, 81] { R8455 += 1, R8411 += 1 };
  s1 -> s7 [81, 81] { R8455 += 1, R8411 += 1 };
  s1 -> s8 [82, 82] { R8455 += 1, R8411 += 1, R8353 += 1 };
  s1 -> s1 [82, 65535] { R8455 += 1, R8411 += 1 };
  s1 -> s1 [85, 65535] { R8455 += 1, R8411 += 1, R8353 += 1 };
  s2 -> s1 [0, 80] { R8455 += 1, R8411 += 1, R8353 += 1 };
  s2 -> s2 [0, 80] { R8455 += 1, R8411 += 1, R8352 += 1, R8353 += 1 };
  s2 -> s4 [81, 81] { R8455 += 1, R8411 += 1, R8352 += 1, R8353 += 1 };
  s2 -> s5 [81, 81] { R8455 += 1, R8411 += 1, R8353 += 1 };
  s2 -> s6 [81, 81] { R8455 += 1, R8411 += 1, R8352 += 1, R8353 += 1 };
  s2 -> s7 [81, 81] { R8455 += 1, R8411 += 1, R8353 += 1 };
  s2 -> s8 [82, 82] { R8455 += 1, R8411 += 1, R8353 += 1 };
  s2 -> s2 [82, 65535] { R8455 += 1, R8411 += 1, R8352 += 1, R8353 += 1 };
  s2 -> s1 [85, 65535] { R8455 += 1, R8411 += 1, R8353 += 1 };
  s3 -> s1 [0, 80] { R8455 += 1, R8411 += 1, R8353 += 1 };
  s3 -> s2 [0, 80] { R8455 += 1, R8411 += 1, R8352 += 1, R8353 += 1 };
  s3 -> s3 [0, 65535] { R8455 += 1, R8410 += 1, R8411 += 1 };
  s3 -> s4 [81, 81] { R8455 += 1, R8411 += 1, R8352 += 1, R8353 += 1 };
  s3 -> s5 [81, 81] { R8455 += 1, R8411 += 1, R8353 += 1 };
  s3 -> s6 [81, 81] { R8455 += 1, R8411 += 1, R8352 += 1, R8353 += 1 };
  s3 -> s7 [81, 81] { R8455 += 1, R8411 += 1, R8353 += 1 };
  s3 -> s8 [82, 82] { R8455 += 1, R8411 += 1, R8353 += 1 };
  s3 -> s2 [82, 65535] { R8455 += 1, R8411 += 1, R8352 += 1, R8353 += 1 };
  s3 -> s1 [85, 65535] { R8455 += 1, R8411 += 1, R8353 += 1 };
  s4 -> s5 [0, 81] { R8455 += 1, R8411 += 1, R8353 += 1 };
  s4 -> s4 [0, 65535] { R8455 += 1, R8411 += 1, R8352 += 1, R8353 += 1 };
  s4 -> s10 [82, 82] { R8455 += 1, R8411 += 1, R8353 += 1 };
  s4 -> s5 [85, 65535] { R8455 += 1, R8411 += 1, R8353 += 1 };
  s5 -> s5 [0, 81] { R8455 += 1, R8411 += 1, R8353 += 1 };
  s5 -> s5 [0, 65535] { R8455 += 1, R8411 += 1 };
  s5 -> s10 [82, 82] { R8455 += 1, R8411 += 1, R8353 += 1 };
  s5 -> s5 [85, 65535] { R8455 += 1, R8411 += 1, R8353 += 1 };
  s8 -> s8 [0, 80] { R8455 += 1, R8411 += 1, R8353 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R8455 += 1 };
  s8 -> s10 [81, 81] { R8455 += 1, R8411 += 1 };
  s8 -> s11 [81, 81] { R8455 += 1, R8411 += 1 };
  s8 -> s8 [82, 82] { R8455 += 1, R8411 += 1, R8353 += 1 };
  s8 -> s8 [82, 65535] { R8455 += 1, R8411 += 1 };
  s8 -> s8 [85, 65535] { R8455 += 1, R8411 += 1, R8353 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 82] { R8455 += 1, R8411 += 1, R8353 += 1 };
  s10 -> s10 [0, 65535] { R8455 += 1, R8411 += 1 };
  s10 -> s9 [0, 65535];
  s10 -> s12 [0, 65535] { R8455 += 1 };
  s10 -> s10 [85, 65535] { R8455 += 1, R8411 += 1, R8353 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R8455 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R8455 += 1 };
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [113, 113];
  accepting s1;
};
};
synchronised {  // Automata constraining c1
automaton c1_0 {
  init s0;
  s0 -> s1 [114, 114];
  accepting s1;
};
};
constraint R2 = R8455 && R20 - R8455 = -1 && R21 = R8455 && R22 - R8455 = -1 && R23 = R8455 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R7715 + -1*R7713 - R53 = 0 && R52 + R7714 + R7712 = 0 && R8396 = 0 && R8397 = 0 && R8404 = 0 && R8405 = 0 && R8406 = 0 && R8407 = 0 && R8408 = 0 && R8409 = 0 && R8410 = 0 && R8411 = 0 && R8412 = 0 && R8413 = R8455 && R8414 = 0 && R8415 = R8455 && R8416 = 0 && R8417 = R8455 && R8418 = 0 && R8419 = R8455 && R8420 = 0 && R8421 = R8455 && R8422 = 0 && R8423 = R8455 && R8424 = 0 && R8425 = R8455 && R8426 = 0 && R8427 = R8455 && R8428 = 0 && R8429 = R8455 && R8430 = 0 && R8431 = R8455 && R8432 = 0 && R8433 = R8455 && R8434 = 0 && R8435 = R8455 && R8436 = 0 && R8437 = R8455 && R8438 = 0 && R8439 = R8455 && R8440 = 0 && R8441 = R8455 && R8442 = 0 && R8443 = R8455 && R8444 = 0 && R8445 = R8455 && R8446 = 0 && R8447 = R8455 && R8448 = 0 && R8449 = R8455 && R8450 = 0 && R8451 = R8455 && R8452 = 0 && R8453 = R8455 && R8454 = 0 && -1 < R1 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R7715 + -1*R7713 - R53 < 1 && 0 < R8455 && (R1 != 0 || R17 = 0 || (R8356 = 0 && R8357 = 0)) && (R1 != 0 || R17 = 0 || (R8358 = 0 && R8359 = 0)) && (R1 != 0 || R17 = 0 || (R8360 = 0 && R8361 = 0)) && (R1 != 0 || R17 = 0 || (R8362 = 0 && R8363 = 0)) && (R1 != 0 || R17 = 0 || (R8364 = 0 && R8365 = 0)) && (R1 != 0 || R17 = 0 || (R8366 = 0 && R8367 = 0)) && (R1 != 0 || R17 = 0 || (R8368 = 0 && R8369 = 0)) && (R1 != 0 || R17 = 0 || (R8370 = 0 && R8371 = 0)) && (R1 != 0 || R17 = 0 || (R8372 = 0 && R8373 = 0)) && (R1 != 0 || R17 = 0 || (R8374 = 0 && R8375 = 0)) && (R48 + R7711 + R7708 != 0 || ((R42 + R72 + R70 != 0 || R43 + R73 + R71 + -1*R7715 + -1*R7713 - R53 = 0 || R53 + R7715 + R7713 < 1) && (R42 + R72 + R70 = 0 || R53 + R7715 + R7713 < 1))) && (R48 + R7711 + R7708 != 0 || ((R46 + R7709 + R7706 != 0 || R47 + R7710 + R7707 + -1*R7715 + -1*R7713 - R53 = 0 || R53 + R7715 + R7713 < 1) && (R46 + R7709 + R7706 = 0 || R53 + R7715 + R7713 < 1))) && (R8356 != 0 || R1 = R8357 || R1 < 1) && (R8358 != 0 || R1 = R8359 || R1 < 1) && (R8360 != 0 || R1 = R8361 || R1 < 1) && (R8362 != 0 || R1 = R8363 || R1 < 1) && (R8364 != 0 || R1 = R8365 || R1 < 1) && (R8366 != 0 || R1 = R8367 || R1 < 1) && (R8368 != 0 || R1 = R8369 || R1 < 1) && (R8370 != 0 || R1 = R8371 || R1 < 1) && (R8372 != 0 || R1 = R8373 || R1 < 1) && (R8374 != 0 || R1 = R8375 || R1 < 1) && (R18 = 0 || (R8394 = 0 && R8395 = 0)) && (R18 = 0 || (R8398 = 0 && R8399 = 0)) && (R18 = 0 || (R8400 = 0 && R8401 = 0)) && (R18 = 0 || (R8402 = 0 && R8403 = 0)) && (R19 = 0 || (R8376 = 0 && R8377 = 0)) && (R19 = 0 || (R8378 = 0 && R8379 = 0)) && (R19 = 0 || (R8380 = 0 && R8381 = 0)) && (R19 = 0 || (R8382 = 0 && R8383 = 0)) && (R19 = 0 || (R8384 = 0 && R8385 = 0)) && (R19 = 0 || (R8386 = 0 && R8387 = 0)) && (R19 = 0 || (R8388 = 0 && R8389 = 0)) && (R19 = 0 || (R8390 = 0 && R8391 = 0)) && (R19 = 0 || (R8392 = 0 && R8393 = 0)) && (R48 + R7711 + R7708 = 0 || (R42 + R72 + R70 = 0 && R43 + R73 + R71 + -1*R7715 + -1*R7713 - R53 = 0)) && (R48 + R7711 + R7708 = 0 || (R46 + R7709 + R7706 = 0 && R47 + R7710 + R7707 + -1*R7715 + -1*R7713 - R53 = 0)) && (R58 + R8143 + R8140 = 0 || (R56 + R8141 + R8138 = 0 && R57 + R8142 + R8139 = 0)) && (R58 + R8143 + R8140 = 0 || (R62 + R8354 + R8352 = 0 && R63 + R8355 + R8353 = 0)) && (R8356 = 0 || R1 < 1) && (R8358 = 0 || R1 < 1) && (R8360 = 0 || R1 < 1) && (R8362 = 0 || R1 < 1) && (R8364 = 0 || R1 < 1) && (R8366 = 0 || R1 < 1) && (R8368 = 0 || R1 < 1) && (R8370 = 0 || R1 < 1) && (R8372 = 0 || R1 < 1) && (R8374 = 0 || R1 < 1);
// End of Parikh automata intersection problem
