// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R10281, R10282, R10283, R10284, R10285, R10286, R10827, R10828, R10829, R10830, R10831, R10832, R10833, R10834, R10835, R10836, R10837, R10838, R10839, R10840, R10841, R10842, R10843, R10844, R10845, R10846, R10847, R10848, R10849, R10850, R10851, R10852, R10853, R10854, R10855, R10856, R10857, R10858, R10859, R10860, R10861, R10862, R10863, R10864, R10865, R10866, R10867, R10868, R10869, R10870, R10871, R10872, R10873, R10874, R10875, R10876, R10877, R10878, R10879, R10880, R10881, R10882, R10883, R10884, R10885, R10886, R10887, R10888, R10889, R10890, R10891, R10892, R10893, R10894, R10895, R10896, R10897, R10898, R10899, R10900, R10901, R10902, R10903, R10904, R10905, R10906, R10907, R10908, R10909, R10910, R10911, R10912, R10913, R10914, R10915, R10916, R10917, R10918, R10919, R10920, R10921, R10922, R10923, R10924, R10925, R10926, R10927, R10928, R10929, R10930, R10931, R10932, R10933, R10934, R10935, R10936, R10937, R10938, R10939, R10940, R10941, R10942, R10943, R10944, R10945, R10946, R10947, R10948, R10949, R10950, R10951, R10952, R10953, R10954, R10955, R10956, R10957, R10958, R10959, R10960, R10961, R10962, R10963, R10964, R10965, R10966, R10967, R10968, R10969, R10970, R10971, R10972, R10973, R10974, R10975, R10976, R10977, R10978, R10979, R10980, R10981, R10982, R10983, R10984, R10985, R10986, R10987, R10988, R10989, R10990, R10991, R10992, R10993, R10994, R10995, R10996, R10997, R10998, R10999, R11, R11000, R11001, R11002, R11003, R11004, R11005, R11006, R14, R17, R2, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R31, R32, R33, R34, R35, R36, R37, R38, R4, R49, R5, R51, R53, R54, R57, R58, R59, R6, R63, R64, R6637, R6638, R6639, R6640, R6641, R6642, R67, R68, R69, R7, R73, R74, R77, R78, R79, R80, R81, R82, R83, R84, R8825, R8826, R8827, R8828;
synchronised {  // Automata constraining P9
automaton P9_0 {
  init s0;
  s0 -> s1 [98, 98];
  accepting s1;
};
};
synchronised {  // Automata constraining P51
automaton P51_0 {
  init s0;
  s0 -> s1 [102, 102];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R17 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s0 [0, 65535] { R31 += 1, R32 += 1 };
  s0 -> s1 [13, 13] { R32 += 1 };
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value2_4 {
  init s0;
  s0 -> s0 [0, 65535] { R33 += 1, R34 += 1 };
  s0 -> s1 [0, 65535] { R34 += 1, R6 += 1 };
  s1 -> s1 [0, 65535] { R34 += 1, R6 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 8] { R36 += 1 };
  s0 -> s0 [0, 65535] { R35 += 1, R36 += 1 };
  s0 -> s2 [9, 13] { R36 += 1 };
  s0 -> s1 [14, 31] { R36 += 1 };
  s0 -> s2 [32, 32] { R36 += 1 };
  s0 -> s1 [33, 65535] { R36 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R36 += 1 };
  s2 -> s1 [0, 65535] { R36 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 65535] { R38 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R37 += 1, R38 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R38 += 1, R7 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 64] { R10932 += 1 };
  s0 -> s0 [0, 65535] { R10931 += 1, R10932 += 1 };
  s0 -> s2 [66, 66] { R10932 += 1 };
  s0 -> s1 [67, 65535] { R10932 += 1 };
  s1 -> s1 [0, 64] { R10932 += 1 };
  s1 -> s2 [66, 66] { R10932 += 1 };
  s1 -> s1 [67, 65535] { R10932 += 1 };
  s2 -> s2 [0, 64] { R10932 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [66, 65535] { R10932 += 1 };
  accepting s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R10933 += 1, R10934 += 1 };
  s0 -> s1 [0, 65535] { R10934 += 1, R2 += 1 };
  s1 -> s1 [0, 65535] { R10934 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 65] { R10936 += 1 };
  s0 -> s2 [0, 65535] { R10936 += 1, R14 += 1 };
  s0 -> s0 [0, 65535] { R10935 += 1, R10936 += 1 };
  s0 -> s3 [66, 66] { R10936 += 1 };
  s0 -> s1 [67, 65535] { R10936 += 1 };
  s1 -> s1 [0, 65] { R10936 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [66, 66] { R10936 += 1 };
  s1 -> s1 [67, 65535] { R10936 += 1 };
  s2 -> s1 [0, 65] { R10936 += 1 };
  s2 -> s2 [0, 65535] { R10936 += 1, R14 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [66, 66] { R10936 += 1 };
  s2 -> s1 [67, 65535] { R10936 += 1 };
  s3 -> s3 [0, 65535] { R10936 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 8] { R10938 += 1, R24 += 1 };
  s0 -> s0 [0, 65535] { R10937 += 1, R10938 += 1 };
  s0 -> s2 [0, 65535] { R10938 += 1, R23 += 1, R24 += 1 };
  s0 -> s3 [9, 13] { R10938 += 1, R24 += 1 };
  s0 -> s1 [14, 31] { R10938 += 1, R24 += 1 };
  s0 -> s3 [32, 32] { R10938 += 1, R24 += 1 };
  s0 -> s1 [33, 65535] { R10938 += 1, R24 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R10938 += 1, R24 += 1 };
  s1 -> s5 [0, 65535] { R10938 += 1 };
  s2 -> s1 [0, 8] { R10938 += 1, R24 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10938 += 1, R23 += 1, R24 += 1 };
  s2 -> s3 [9, 13] { R10938 += 1, R24 += 1 };
  s2 -> s1 [14, 31] { R10938 += 1, R24 += 1 };
  s2 -> s3 [32, 32] { R10938 += 1, R24 += 1 };
  s2 -> s1 [33, 65535] { R10938 += 1, R24 += 1 };
  s3 -> s1 [0, 65535] { R10938 += 1, R24 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10938 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 65535] { R10940 += 1, R26 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R10939 += 1, R10940 += 1 };
  s0 -> s2 [0, 65535] { R10940 += 1, R25 += 1, R26 += 1 };
  s1 -> s4 [0, 65535] { R10940 += 1 };
  s1 -> s1 [0, 65535] { R10940 += 1, R26 += 1, R4 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10940 += 1, R26 += 1, R4 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10940 += 1, R25 += 1, R26 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10940 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 8] { R10942 += 1, R28 += 1 };
  s0 -> s2 [0, 65535] { R10942 += 1, R27 += 1, R28 += 1 };
  s0 -> s0 [0, 65535] { R10941 += 1, R10942 += 1 };
  s0 -> s3 [9, 13] { R10942 += 1, R28 += 1 };
  s0 -> s1 [14, 31] { R10942 += 1, R28 += 1 };
  s0 -> s3 [32, 32] { R10942 += 1, R28 += 1 };
  s0 -> s1 [33, 65535] { R10942 += 1, R28 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R10942 += 1, R28 += 1 };
  s1 -> s5 [0, 65535] { R10942 += 1 };
  s2 -> s1 [0, 8] { R10942 += 1, R28 += 1 };
  s2 -> s2 [0, 65535] { R10942 += 1, R27 += 1, R28 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R10942 += 1, R28 += 1 };
  s2 -> s1 [14, 31] { R10942 += 1, R28 += 1 };
  s2 -> s3 [32, 32] { R10942 += 1, R28 += 1 };
  s2 -> s1 [33, 65535] { R10942 += 1, R28 += 1 };
  s3 -> s1 [0, 65535] { R10942 += 1, R28 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10942 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s0 [0, 65535] { R10943 += 1, R10944 += 1 };
  s0 -> s1 [0, 65535] { R10944 += 1, R30 += 1, R5 += 1 };
  s0 -> s2 [0, 65535] { R10944 += 1, R29 += 1, R30 += 1 };
  s1 -> s4 [0, 65535] { R10944 += 1 };
  s1 -> s1 [0, 65535] { R10944 += 1, R30 += 1, R5 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10944 += 1, R30 += 1, R5 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10944 += 1, R29 += 1, R30 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10944 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s0 [0, 65535] { R10945 += 1, R10946 += 1 };
  s0 -> s1 [0, 65535] { R10946 += 1, R10852 += 1, R22 += 1 };
  s0 -> s2 [0, 65535] { R10946 += 1, R10851 += 1, R10852 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R10946 += 1 };
  s1 -> s1 [0, 65535] { R10946 += 1, R10852 += 1, R22 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10946 += 1, R10852 += 1, R22 += 1 };
  s2 -> s2 [0, 65535] { R10946 += 1, R10851 += 1, R10852 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10946 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 65] { R10948 += 1, R10854 += 1 };
  s0 -> s0 [0, 65535] { R10947 += 1, R10948 += 1 };
  s0 -> s2 [0, 65535] { R10948 += 1, R10853 += 1, R10854 += 1 };
  s0 -> s3 [66, 66] { R10948 += 1, R10854 += 1 };
  s0 -> s4 [66, 66] { R10948 += 1, R10854 += 1 };
  s0 -> s1 [71, 65535] { R10948 += 1, R10854 += 1 };
  s1 -> s1 [0, 65] { R10948 += 1, R10854 += 1 };
  s1 -> s1 [0, 65535] { R10948 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [66, 66] { R10948 += 1, R10854 += 1 };
  s1 -> s4 [66, 66] { R10948 += 1, R10854 += 1 };
  s1 -> s1 [71, 65535] { R10948 += 1, R10854 += 1 };
  s2 -> s1 [0, 65] { R10948 += 1, R10854 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10948 += 1, R10853 += 1, R10854 += 1 };
  s2 -> s3 [66, 66] { R10948 += 1, R10854 += 1 };
  s2 -> s4 [66, 66] { R10948 += 1, R10854 += 1 };
  s2 -> s1 [71, 65535] { R10948 += 1, R10854 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10948 += 1 };
  s4 -> s4 [0, 66] { R10948 += 1, R10854 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10948 += 1 };
  s4 -> s4 [71, 65535] { R10948 += 1, R10854 += 1 };
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 65] { R10950 += 1, R10856 += 1, R49 += 1 };
  s0 -> s0 [0, 65535] { R10949 += 1, R10950 += 1 };
  s0 -> s2 [0, 65535] { R10950 += 1, R10855 += 1, R10856 += 1 };
  s0 -> s3 [66, 66] { R10950 += 1, R10856 += 1, R49 += 1 };
  s0 -> s4 [66, 66] { R10950 += 1, R10856 += 1, R49 += 1 };
  s0 -> s1 [67, 65535] { R10950 += 1, R10856 += 1, R49 += 1 };
  s1 -> s1 [0, 65] { R10950 += 1, R10856 += 1, R49 += 1 };
  s1 -> s1 [0, 65535] { R10950 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [66, 66] { R10950 += 1, R10856 += 1, R49 += 1 };
  s1 -> s4 [66, 66] { R10950 += 1, R10856 += 1, R49 += 1 };
  s1 -> s1 [67, 65535] { R10950 += 1, R10856 += 1, R49 += 1 };
  s2 -> s1 [0, 65] { R10950 += 1, R10856 += 1, R49 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10950 += 1, R10855 += 1, R10856 += 1 };
  s2 -> s3 [66, 66] { R10950 += 1, R10856 += 1, R49 += 1 };
  s2 -> s4 [66, 66] { R10950 += 1, R10856 += 1, R49 += 1 };
  s2 -> s1 [67, 65535] { R10950 += 1, R10856 += 1, R49 += 1 };
  s3 -> s6 [0, 65535] { R10950 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10950 += 1, R10856 += 1, R49 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10950 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10950 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 65] { R10952 += 1, R10858 += 1, R51 += 1 };
  s0 -> s2 [0, 65535] { R10952 += 1, R10857 += 1, R10858 += 1 };
  s0 -> s0 [0, 65535] { R10951 += 1, R10952 += 1 };
  s0 -> s3 [66, 66] { R10952 += 1, R10858 += 1, R51 += 1 };
  s0 -> s4 [66, 66] { R10952 += 1, R10858 += 1, R51 += 1 };
  s0 -> s1 [67, 65535] { R10952 += 1, R10858 += 1, R51 += 1 };
  s1 -> s1 [0, 65] { R10952 += 1, R10858 += 1, R51 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10952 += 1 };
  s1 -> s3 [66, 66] { R10952 += 1, R10858 += 1, R51 += 1 };
  s1 -> s4 [66, 66] { R10952 += 1, R10858 += 1, R51 += 1 };
  s1 -> s1 [67, 65535] { R10952 += 1, R10858 += 1, R51 += 1 };
  s2 -> s1 [0, 65] { R10952 += 1, R10858 += 1, R51 += 1 };
  s2 -> s2 [0, 65535] { R10952 += 1, R10857 += 1, R10858 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [66, 66] { R10952 += 1, R10858 += 1, R51 += 1 };
  s2 -> s4 [66, 66] { R10952 += 1, R10858 += 1, R51 += 1 };
  s2 -> s1 [67, 65535] { R10952 += 1, R10858 += 1, R51 += 1 };
  s3 -> s3 [0, 65535] { R10952 += 1, R10858 += 1, R51 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R10952 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10952 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10952 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65] { R10954 += 1, R10860 += 1, R53 += 1, R54 += 1 };
  s0 -> s2 [0, 65535] { R10954 += 1, R10859 += 1, R10860 += 1 };
  s0 -> s0 [0, 65535] { R10953 += 1, R10954 += 1 };
  s0 -> s3 [66, 66] { R10954 += 1, R10860 += 1, R53 += 1, R54 += 1 };
  s0 -> s4 [66, 66] { R10954 += 1, R10860 += 1, R53 += 1, R54 += 1 };
  s0 -> s1 [67, 65535] { R10954 += 1, R10860 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 65] { R10954 += 1, R10860 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 65535] { R10954 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [66, 66] { R10954 += 1, R10860 += 1, R53 += 1, R54 += 1 };
  s1 -> s4 [66, 66] { R10954 += 1, R10860 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [67, 65535] { R10954 += 1, R10860 += 1, R53 += 1, R54 += 1 };
  s2 -> s1 [0, 65] { R10954 += 1, R10860 += 1, R53 += 1, R54 += 1 };
  s2 -> s2 [0, 65535] { R10954 += 1, R10859 += 1, R10860 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [66, 66] { R10954 += 1, R10860 += 1, R53 += 1, R54 += 1 };
  s2 -> s4 [66, 66] { R10954 += 1, R10860 += 1, R53 += 1, R54 += 1 };
  s2 -> s1 [67, 65535] { R10954 += 1, R10860 += 1, R53 += 1, R54 += 1 };
  s3 -> s3 [0, 65535] { R10954 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R10954 += 1, R10860 += 1, R53 += 1, R54 += 1 };
  s4 -> s5 [0, 65535] { R10954 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R10954 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 65] { R10956 += 1, R10862 += 1, R57 += 1, R58 += 1 };
  s0 -> s2 [0, 65535] { R10956 += 1, R10861 += 1, R10862 += 1 };
  s0 -> s0 [0, 65535] { R10955 += 1, R10956 += 1 };
  s0 -> s3 [66, 66] { R10956 += 1, R10862 += 1, R57 += 1, R58 += 1 };
  s0 -> s4 [66, 66] { R10956 += 1, R10862 += 1, R57 += 1, R58 += 1 };
  s0 -> s1 [67, 65535] { R10956 += 1, R10862 += 1, R57 += 1, R58 += 1 };
  s1 -> s1 [0, 65] { R10956 += 1, R10862 += 1, R57 += 1, R58 += 1 };
  s1 -> s1 [0, 65535] { R10956 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [66, 66] { R10956 += 1, R10862 += 1, R57 += 1, R58 += 1 };
  s1 -> s4 [66, 66] { R10956 += 1, R10862 += 1, R57 += 1, R58 += 1 };
  s1 -> s1 [67, 65535] { R10956 += 1, R10862 += 1, R57 += 1, R58 += 1 };
  s2 -> s1 [0, 65] { R10956 += 1, R10862 += 1, R57 += 1, R58 += 1 };
  s2 -> s2 [0, 65535] { R10956 += 1, R10861 += 1, R10862 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [66, 66] { R10956 += 1, R10862 += 1, R57 += 1, R58 += 1 };
  s2 -> s4 [66, 66] { R10956 += 1, R10862 += 1, R57 += 1, R58 += 1 };
  s2 -> s1 [67, 65535] { R10956 += 1, R10862 += 1, R57 += 1, R58 += 1 };
  s3 -> s6 [0, 65535] { R10956 += 1 };
  s3 -> s3 [0, 65535] { R10956 += 1, R10862 += 1, R57 += 1, R58 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10956 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10956 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 65] { R10958 += 1, R10864 += 1, R63 += 1, R64 += 1 };
  s0 -> s0 [0, 65535] { R10957 += 1, R10958 += 1 };
  s0 -> s2 [0, 65535] { R10958 += 1, R10863 += 1, R10864 += 1 };
  s0 -> s3 [66, 66] { R10958 += 1, R10864 += 1, R63 += 1, R64 += 1 };
  s0 -> s4 [66, 66] { R10958 += 1, R10864 += 1, R63 += 1, R64 += 1 };
  s0 -> s1 [67, 65535] { R10958 += 1, R10864 += 1, R63 += 1, R64 += 1 };
  s1 -> s1 [0, 65] { R10958 += 1, R10864 += 1, R63 += 1, R64 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10958 += 1 };
  s1 -> s3 [66, 66] { R10958 += 1, R10864 += 1, R63 += 1, R64 += 1 };
  s1 -> s4 [66, 66] { R10958 += 1, R10864 += 1, R63 += 1, R64 += 1 };
  s1 -> s1 [67, 65535] { R10958 += 1, R10864 += 1, R63 += 1, R64 += 1 };
  s2 -> s1 [0, 65] { R10958 += 1, R10864 += 1, R63 += 1, R64 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10958 += 1, R10863 += 1, R10864 += 1 };
  s2 -> s3 [66, 66] { R10958 += 1, R10864 += 1, R63 += 1, R64 += 1 };
  s2 -> s4 [66, 66] { R10958 += 1, R10864 += 1, R63 += 1, R64 += 1 };
  s2 -> s1 [67, 65535] { R10958 += 1, R10864 += 1, R63 += 1, R64 += 1 };
  s3 -> s6 [0, 65535] { R10958 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10958 += 1, R10864 += 1, R63 += 1, R64 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10958 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10958 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65] { R10960 += 1, R10866 += 1, R67 += 1, R68 += 1 };
  s0 -> s0 [0, 65535] { R10959 += 1, R10960 += 1 };
  s0 -> s2 [0, 65535] { R10960 += 1, R10865 += 1, R10866 += 1 };
  s0 -> s3 [66, 66] { R10960 += 1, R10866 += 1, R67 += 1, R68 += 1 };
  s0 -> s4 [66, 66] { R10960 += 1, R10866 += 1, R67 += 1, R68 += 1 };
  s0 -> s1 [67, 65535] { R10960 += 1, R10866 += 1, R67 += 1, R68 += 1 };
  s1 -> s1 [0, 65] { R10960 += 1, R10866 += 1, R67 += 1, R68 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10960 += 1 };
  s1 -> s3 [66, 66] { R10960 += 1, R10866 += 1, R67 += 1, R68 += 1 };
  s1 -> s4 [66, 66] { R10960 += 1, R10866 += 1, R67 += 1, R68 += 1 };
  s1 -> s1 [67, 65535] { R10960 += 1, R10866 += 1, R67 += 1, R68 += 1 };
  s2 -> s1 [0, 65] { R10960 += 1, R10866 += 1, R67 += 1, R68 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10960 += 1, R10865 += 1, R10866 += 1 };
  s2 -> s3 [66, 66] { R10960 += 1, R10866 += 1, R67 += 1, R68 += 1 };
  s2 -> s4 [66, 66] { R10960 += 1, R10866 += 1, R67 += 1, R68 += 1 };
  s2 -> s1 [67, 65535] { R10960 += 1, R10866 += 1, R67 += 1, R68 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R10960 += 1 };
  s3 -> s3 [0, 65535] { R10960 += 1, R10866 += 1, R67 += 1, R68 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10960 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10960 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 65] { R10962 += 1, R10868 += 1, R73 += 1, R74 += 1 };
  s0 -> s2 [0, 65535] { R10962 += 1, R10867 += 1, R10868 += 1 };
  s0 -> s0 [0, 65535] { R10961 += 1, R10962 += 1 };
  s0 -> s3 [66, 66] { R10962 += 1, R10868 += 1, R73 += 1, R74 += 1 };
  s0 -> s4 [66, 66] { R10962 += 1, R10868 += 1, R73 += 1, R74 += 1 };
  s0 -> s1 [67, 65535] { R10962 += 1, R10868 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 65] { R10962 += 1, R10868 += 1, R73 += 1, R74 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R10962 += 1 };
  s1 -> s3 [66, 66] { R10962 += 1, R10868 += 1, R73 += 1, R74 += 1 };
  s1 -> s4 [66, 66] { R10962 += 1, R10868 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [67, 65535] { R10962 += 1, R10868 += 1, R73 += 1, R74 += 1 };
  s2 -> s1 [0, 65] { R10962 += 1, R10868 += 1, R73 += 1, R74 += 1 };
  s2 -> s2 [0, 65535] { R10962 += 1, R10867 += 1, R10868 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [66, 66] { R10962 += 1, R10868 += 1, R73 += 1, R74 += 1 };
  s2 -> s4 [66, 66] { R10962 += 1, R10868 += 1, R73 += 1, R74 += 1 };
  s2 -> s1 [67, 65535] { R10962 += 1, R10868 += 1, R73 += 1, R74 += 1 };
  s3 -> s3 [0, 65535] { R10962 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R10962 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R10962 += 1, R10868 += 1, R73 += 1, R74 += 1 };
  s5 -> s5 [0, 65535] { R10962 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65] { R10964 += 1, R10888 += 1 };
  s0 -> s0 [0, 65535] { R10963 += 1, R10964 += 1 };
  s0 -> s2 [0, 65535] { R10964 += 1, R10887 += 1, R10888 += 1 };
  s0 -> s3 [66, 66] { R10964 += 1, R10888 += 1 };
  s0 -> s1 [67, 65535] { R10964 += 1, R10888 += 1 };
  s1 -> s1 [0, 65] { R10964 += 1, R10888 += 1 };
  s1 -> s3 [66, 66] { R10964 += 1, R10888 += 1 };
  s1 -> s1 [67, 65535] { R10964 += 1, R10888 += 1 };
  s2 -> s1 [0, 65] { R10964 += 1, R10888 += 1 };
  s2 -> s2 [0, 65535] { R10964 += 1, R10887 += 1, R10888 += 1 };
  s2 -> s3 [66, 66] { R10964 += 1, R10888 += 1 };
  s2 -> s1 [67, 65535] { R10964 += 1, R10888 += 1 };
  s3 -> s4 [0, 65535] { R10964 += 1 };
  s3 -> s3 [0, 65535] { R10964 += 1, R10888 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10964 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
automaton value2_24 {
  init s0;
  s0 -> s0 [0, 65535] { R10965 += 1, R10966 += 1 };
  s0 -> s1 [0, 65535] { R10966 += 1, R10889 += 1, R10890 += 1 };
  s0 -> s2 [0, 65535] { R10966 += 1, R10890 += 1, R1 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R10966 += 1, R10889 += 1, R10890 += 1 };
  s1 -> s2 [0, 65535] { R10966 += 1, R10890 += 1, R1 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R10966 += 1 };
  s2 -> s2 [0, 65535] { R10966 += 1, R10890 += 1, R1 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10966 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 65] { R10968 += 1, R10892 += 1 };
  s0 -> s0 [0, 65535] { R10967 += 1, R10968 += 1 };
  s0 -> s2 [0, 65535] { R10968 += 1, R10891 += 1, R10892 += 1 };
  s0 -> s3 [0, 65535] { R10968 += 1, R10892 += 1, R11 += 1 };
  s0 -> s4 [66, 66] { R10968 += 1, R10892 += 1 };
  s0 -> s1 [67, 65535] { R10968 += 1, R10892 += 1 };
  s1 -> s1 [0, 65] { R10968 += 1, R10892 += 1 };
  s1 -> s1 [0, 65535] { R10968 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s4 [66, 66] { R10968 += 1, R10892 += 1 };
  s1 -> s1 [67, 65535] { R10968 += 1, R10892 += 1 };
  s2 -> s1 [0, 65] { R10968 += 1, R10892 += 1 };
  s2 -> s2 [0, 65535] { R10968 += 1, R10891 += 1, R10892 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R10968 += 1, R10892 += 1, R11 += 1 };
  s2 -> s4 [66, 66] { R10968 += 1, R10892 += 1 };
  s2 -> s1 [67, 65535] { R10968 += 1, R10892 += 1 };
  s3 -> s1 [0, 65] { R10968 += 1, R10892 += 1 };
  s3 -> s5 [0, 65535] { R10968 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R10968 += 1, R10892 += 1, R11 += 1 };
  s3 -> s4 [66, 66] { R10968 += 1, R10892 += 1 };
  s3 -> s1 [67, 65535] { R10968 += 1, R10892 += 1 };
  s4 -> s4 [0, 65535] { R10968 += 1, R10892 += 1 };
  s5 -> s5 [0, 65535] { R10968 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65] { R10970 += 1, R10894 += 1, R10832 += 1 };
  s0 -> s2 [0, 65535] { R10970 += 1, R10894 += 1, R10831 += 1, R10832 += 1 };
  s0 -> s3 [0, 65535] { R10970 += 1, R10893 += 1, R10894 += 1 };
  s0 -> s0 [0, 65535] { R10969 += 1, R10970 += 1 };
  s0 -> s1 [67, 65535] { R10970 += 1, R10894 += 1, R10832 += 1 };
  s1 -> s1 [0, 65] { R10970 += 1, R10894 += 1, R10832 += 1 };
  s1 -> s1 [0, 65535] { R10970 += 1, R10894 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R10970 += 1 };
  s1 -> s1 [67, 65535] { R10970 += 1, R10894 += 1, R10832 += 1 };
  s2 -> s1 [0, 65] { R10970 += 1, R10894 += 1, R10832 += 1 };
  s2 -> s2 [0, 65535] { R10970 += 1, R10894 += 1, R10831 += 1, R10832 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R10970 += 1 };
  s2 -> s1 [67, 65535] { R10970 += 1, R10894 += 1, R10832 += 1 };
  s3 -> s1 [0, 65] { R10970 += 1, R10894 += 1, R10832 += 1 };
  s3 -> s2 [0, 65535] { R10970 += 1, R10894 += 1, R10831 += 1, R10832 += 1 };
  s3 -> s3 [0, 65535] { R10970 += 1, R10893 += 1, R10894 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [67, 65535] { R10970 += 1, R10894 += 1, R10832 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10970 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 65535] { R10972 += 1, R10896 += 1, R10833 += 1, R10834 += 1 };
  s0 -> s2 [0, 65535] { R10972 += 1, R10896 += 1, R10834 += 1, R20 += 1 };
  s0 -> s3 [0, 65535] { R10972 += 1, R10895 += 1, R10896 += 1 };
  s0 -> s0 [0, 65535] { R10971 += 1, R10972 += 1 };
  s1 -> s1 [0, 65535] { R10972 += 1, R10896 += 1, R10833 += 1, R10834 += 1 };
  s1 -> s2 [0, 65535] { R10972 += 1, R10896 += 1, R10834 += 1, R20 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R10972 += 1 };
  s2 -> s2 [0, 65535] { R10972 += 1, R10896 += 1, R10834 += 1, R20 += 1 };
  s2 -> s5 [0, 65535] { R10972 += 1, R10896 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s6 [0, 65535] { R10972 += 1 };
  s3 -> s1 [0, 65535] { R10972 += 1, R10896 += 1, R10833 += 1, R10834 += 1 };
  s3 -> s2 [0, 65535] { R10972 += 1, R10896 += 1, R10834 += 1, R20 += 1 };
  s3 -> s3 [0, 65535] { R10972 += 1, R10895 += 1, R10896 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10972 += 1, R10896 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s6 [0, 65535] { R10972 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R10972 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 66] { R10974 += 1, R10898 += 1, R10836 += 1 };
  s0 -> s2 [0, 65535] { R10974 += 1, R10897 += 1, R10898 += 1 };
  s0 -> s0 [0, 65535] { R10973 += 1, R10974 += 1 };
  s0 -> s3 [0, 65535] { R10974 += 1, R10898 += 1, R10835 += 1, R10836 += 1 };
  s0 -> s1 [70, 65535] { R10974 += 1, R10898 += 1, R10836 += 1 };
  s1 -> s1 [0, 66] { R10974 += 1, R10898 += 1, R10836 += 1 };
  s1 -> s4 [0, 65535] { R10974 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10974 += 1, R10898 += 1 };
  s1 -> s1 [70, 65535] { R10974 += 1, R10898 += 1, R10836 += 1 };
  s2 -> s1 [0, 66] { R10974 += 1, R10898 += 1, R10836 += 1 };
  s2 -> s2 [0, 65535] { R10974 += 1, R10897 += 1, R10898 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R10974 += 1, R10898 += 1, R10835 += 1, R10836 += 1 };
  s2 -> s1 [70, 65535] { R10974 += 1, R10898 += 1, R10836 += 1 };
  s3 -> s1 [0, 66] { R10974 += 1, R10898 += 1, R10836 += 1 };
  s3 -> s4 [0, 65535] { R10974 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10974 += 1, R10898 += 1, R10835 += 1, R10836 += 1 };
  s3 -> s1 [70, 65535] { R10974 += 1, R10898 += 1, R10836 += 1 };
  s4 -> s4 [0, 65535] { R10974 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 65535] { R10976 += 1, R10900 += 1, R10837 += 1, R10838 += 1 };
  s0 -> s2 [0, 65535] { R10976 += 1, R10899 += 1, R10900 += 1 };
  s0 -> s0 [0, 65535] { R10975 += 1, R10976 += 1 };
  s0 -> s3 [0, 65535] { R10976 += 1, R10900 += 1, R10838 += 1, R78 += 1 };
  s1 -> s5 [0, 65535] { R10976 += 1 };
  s1 -> s1 [0, 65535] { R10976 += 1, R10900 += 1, R10837 += 1, R10838 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [0, 65535] { R10976 += 1, R10900 += 1, R10838 += 1, R78 += 1 };
  s2 -> s1 [0, 65535] { R10976 += 1, R10900 += 1, R10837 += 1, R10838 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R10976 += 1, R10899 += 1, R10900 += 1 };
  s2 -> s3 [0, 65535] { R10976 += 1, R10900 += 1, R10838 += 1, R78 += 1 };
  s3 -> s4 [0, 65535] { R10976 += 1, R10900 += 1 };
  s3 -> s5 [0, 65535] { R10976 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R10976 += 1, R10900 += 1, R10838 += 1, R78 += 1 };
  s4 -> s4 [0, 65535] { R10976 += 1, R10900 += 1 };
  s4 -> s5 [0, 65535] { R10976 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R10976 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 69] { R10978 += 1, R10902 += 1, R10840 += 1 };
  s0 -> s2 [0, 65535] { R10978 += 1, R10901 += 1, R10902 += 1 };
  s0 -> s3 [0, 65535] { R10978 += 1, R10902 += 1, R10839 += 1, R10840 += 1 };
  s0 -> s0 [0, 65535] { R10977 += 1, R10978 += 1 };
  s0 -> s4 [0, 65535] { R10978 += 1, R10902 += 1, R10840 += 1, R80 += 1 };
  s0 -> s1 [71, 65535] { R10978 += 1, R10902 += 1, R10840 += 1 };
  s1 -> s1 [0, 69] { R10978 += 1, R10902 += 1, R10840 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s7 [0, 65535] { R10978 += 1 };
  s1 -> s1 [0, 65535] { R10978 += 1, R10902 += 1 };
  s1 -> s1 [71, 65535] { R10978 += 1, R10902 += 1, R10840 += 1 };
  s2 -> s1 [0, 69] { R10978 += 1, R10902 += 1, R10840 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10978 += 1, R10901 += 1, R10902 += 1 };
  s2 -> s3 [0, 65535] { R10978 += 1, R10902 += 1, R10839 += 1, R10840 += 1 };
  s2 -> s4 [0, 65535] { R10978 += 1, R10902 += 1, R10840 += 1, R80 += 1 };
  s2 -> s1 [71, 65535] { R10978 += 1, R10902 += 1, R10840 += 1 };
  s3 -> s1 [0, 69] { R10978 += 1, R10902 += 1, R10840 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s7 [0, 65535] { R10978 += 1 };
  s3 -> s3 [0, 65535] { R10978 += 1, R10902 += 1, R10839 += 1, R10840 += 1 };
  s3 -> s4 [0, 65535] { R10978 += 1, R10902 += 1, R10840 += 1, R80 += 1 };
  s3 -> s1 [71, 65535] { R10978 += 1, R10902 += 1, R10840 += 1 };
  s4 -> s1 [0, 69] { R10978 += 1, R10902 += 1, R10840 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R10978 += 1, R10902 += 1 };
  s4 -> s7 [0, 65535] { R10978 += 1 };
  s4 -> s4 [0, 65535] { R10978 += 1, R10902 += 1, R10840 += 1, R80 += 1 };
  s4 -> s1 [71, 65535] { R10978 += 1, R10902 += 1, R10840 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10978 += 1, R10902 += 1 };
  s6 -> s7 [0, 65535] { R10978 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R10978 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 69] { R10980 += 1, R10904 += 1, R10842 += 1, R84 += 1 };
  s0 -> s2 [0, 65535] { R10980 += 1, R10904 += 1, R10841 += 1, R10842 += 1 };
  s0 -> s3 [0, 65535] { R10980 += 1, R10904 += 1, R10842 += 1, R83 += 1, R84 += 1 };
  s0 -> s4 [0, 65535] { R10980 += 1, R10903 += 1, R10904 += 1 };
  s0 -> s0 [0, 65535] { R10979 += 1, R10980 += 1 };
  s0 -> s1 [71, 65535] { R10980 += 1, R10904 += 1, R10842 += 1, R84 += 1 };
  s1 -> s1 [0, 69] { R10980 += 1, R10904 += 1, R10842 += 1, R84 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R10980 += 1 };
  s1 -> s1 [0, 65535] { R10980 += 1, R10904 += 1, R10842 += 1 };
  s1 -> s7 [0, 65535] { R10980 += 1, R10904 += 1 };
  s1 -> s1 [71, 65535] { R10980 += 1, R10904 += 1, R10842 += 1, R84 += 1 };
  s2 -> s1 [0, 69] { R10980 += 1, R10904 += 1, R10842 += 1, R84 += 1 };
  s2 -> s2 [0, 65535] { R10980 += 1, R10904 += 1, R10841 += 1, R10842 += 1 };
  s2 -> s3 [0, 65535] { R10980 += 1, R10904 += 1, R10842 += 1, R83 += 1, R84 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R10980 += 1 };
  s2 -> s1 [71, 65535] { R10980 += 1, R10904 += 1, R10842 += 1, R84 += 1 };
  s3 -> s1 [0, 69] { R10980 += 1, R10904 += 1, R10842 += 1, R84 += 1 };
  s3 -> s3 [0, 65535] { R10980 += 1, R10904 += 1, R10842 += 1, R83 += 1, R84 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R10980 += 1 };
  s3 -> s7 [0, 65535] { R10980 += 1, R10904 += 1 };
  s3 -> s1 [71, 65535] { R10980 += 1, R10904 += 1, R10842 += 1, R84 += 1 };
  s4 -> s1 [0, 69] { R10980 += 1, R10904 += 1, R10842 += 1, R84 += 1 };
  s4 -> s2 [0, 65535] { R10980 += 1, R10904 += 1, R10841 += 1, R10842 += 1 };
  s4 -> s3 [0, 65535] { R10980 += 1, R10904 += 1, R10842 += 1, R83 += 1, R84 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10980 += 1, R10903 += 1, R10904 += 1 };
  s4 -> s1 [71, 65535] { R10980 += 1, R10904 += 1, R10842 += 1, R84 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10980 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R10980 += 1 };
  s7 -> s7 [0, 65535] { R10980 += 1, R10904 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 65535] { R10982 += 1, R10906 += 1, R10844 += 1, R6641 += 1, R6642 += 1 };
  s0 -> s2 [0, 65535] { R10982 += 1, R10905 += 1, R10906 += 1 };
  s0 -> s3 [0, 65535] { R10982 += 1, R10906 += 1, R10843 += 1, R10844 += 1 };
  s0 -> s0 [0, 65535] { R10981 += 1, R10982 += 1 };
  s0 -> s4 [0, 65535] { R10982 += 1, R10906 += 1, R10844 += 1 };
  s1 -> s1 [0, 65535] { R10982 += 1, R10906 += 1, R10844 += 1, R6641 += 1, R6642 += 1 };
  s1 -> s5 [0, 65535] { R10982 += 1 };
  s1 -> s6 [0, 65535] { R10982 += 1, R10906 += 1 };
  s1 -> s4 [0, 65535] { R10982 += 1, R10906 += 1, R10844 += 1 };
  s1 -> s7 [0, 65535];
  s2 -> s1 [0, 65535] { R10982 += 1, R10906 += 1, R10844 += 1, R6641 += 1, R6642 += 1 };
  s2 -> s2 [0, 65535] { R10982 += 1, R10905 += 1, R10906 += 1 };
  s2 -> s3 [0, 65535] { R10982 += 1, R10906 += 1, R10843 += 1, R10844 += 1 };
  s2 -> s4 [0, 65535] { R10982 += 1, R10906 += 1, R10844 += 1 };
  s2 -> s7 [0, 65535];
  s3 -> s1 [0, 65535] { R10982 += 1, R10906 += 1, R10844 += 1, R6641 += 1, R6642 += 1 };
  s3 -> s5 [0, 65535] { R10982 += 1 };
  s3 -> s3 [0, 65535] { R10982 += 1, R10906 += 1, R10843 += 1, R10844 += 1 };
  s3 -> s4 [0, 65535] { R10982 += 1, R10906 += 1, R10844 += 1 };
  s3 -> s7 [0, 65535];
  s4 -> s5 [0, 65535] { R10982 += 1 };
  s4 -> s6 [0, 65535] { R10982 += 1, R10906 += 1 };
  s4 -> s4 [0, 65535] { R10982 += 1, R10906 += 1, R10844 += 1 };
  s4 -> s7 [0, 65535];
  s5 -> s5 [0, 65535] { R10982 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s5 [0, 65535] { R10982 += 1 };
  s6 -> s6 [0, 65535] { R10982 += 1, R10906 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 70] { R10984 += 1, R10908 += 1, R10846 += 1, R8828 += 1 };
  s0 -> s2 [0, 65535] { R10984 += 1, R10907 += 1, R10908 += 1 };
  s0 -> s0 [0, 65535] { R10983 += 1, R10984 += 1 };
  s0 -> s3 [0, 65535] { R10984 += 1, R10908 += 1, R10846 += 1, R8827 += 1, R8828 += 1 };
  s0 -> s4 [0, 65535] { R10984 += 1, R10908 += 1, R10845 += 1, R10846 += 1 };
  s0 -> s5 [83, 83] { R10984 += 1, R10908 += 1, R10846 += 1, R8828 += 1 };
  s0 -> s1 [84, 65535] { R10984 += 1, R10908 += 1, R10846 += 1, R8828 += 1 };
  s1 -> s1 [0, 70] { R10984 += 1, R10908 += 1, R10846 += 1, R8828 += 1 };
  s1 -> s5 [83, 83] { R10984 += 1, R10908 += 1, R10846 += 1, R8828 += 1 };
  s1 -> s1 [84, 65535] { R10984 += 1, R10908 += 1, R10846 += 1, R8828 += 1 };
  s2 -> s1 [0, 70] { R10984 += 1, R10908 += 1, R10846 += 1, R8828 += 1 };
  s2 -> s2 [0, 65535] { R10984 += 1, R10907 += 1, R10908 += 1 };
  s2 -> s3 [0, 65535] { R10984 += 1, R10908 += 1, R10846 += 1, R8827 += 1, R8828 += 1 };
  s2 -> s4 [0, 65535] { R10984 += 1, R10908 += 1, R10845 += 1, R10846 += 1 };
  s2 -> s5 [83, 83] { R10984 += 1, R10908 += 1, R10846 += 1, R8828 += 1 };
  s2 -> s1 [84, 65535] { R10984 += 1, R10908 += 1, R10846 += 1, R8828 += 1 };
  s3 -> s1 [0, 70] { R10984 += 1, R10908 += 1, R10846 += 1, R8828 += 1 };
  s3 -> s3 [0, 65535] { R10984 += 1, R10908 += 1, R10846 += 1, R8827 += 1, R8828 += 1 };
  s3 -> s5 [83, 83] { R10984 += 1, R10908 += 1, R10846 += 1, R8828 += 1 };
  s3 -> s1 [84, 65535] { R10984 += 1, R10908 += 1, R10846 += 1, R8828 += 1 };
  s4 -> s1 [0, 70] { R10984 += 1, R10908 += 1, R10846 += 1, R8828 += 1 };
  s4 -> s3 [0, 65535] { R10984 += 1, R10908 += 1, R10846 += 1, R8827 += 1, R8828 += 1 };
  s4 -> s4 [0, 65535] { R10984 += 1, R10908 += 1, R10845 += 1, R10846 += 1 };
  s4 -> s5 [83, 83] { R10984 += 1, R10908 += 1, R10846 += 1, R8828 += 1 };
  s4 -> s1 [84, 65535] { R10984 += 1, R10908 += 1, R10846 += 1, R8828 += 1 };
  s5 -> s5 [0, 70] { R10984 += 1, R10908 += 1, R10846 += 1, R8828 += 1 };
  s5 -> s6 [0, 65535] { R10984 += 1, R10908 += 1 };
  s5 -> s7 [0, 65535];
  s5 -> s8 [0, 65535] { R10984 += 1 };
  s5 -> s5 [0, 65535] { R10984 += 1, R10908 += 1, R10846 += 1 };
  s5 -> s5 [83, 65535] { R10984 += 1, R10908 += 1, R10846 += 1, R8828 += 1 };
  s6 -> s6 [0, 65535] { R10984 += 1, R10908 += 1 };
  s6 -> s7 [0, 65535];
  s6 -> s8 [0, 65535] { R10984 += 1 };
  s7 -> s7 [0, 65535];
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R10984 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_34 {
  init s0;
  s0 -> s0 [0, 65535] { R10985 += 1, R10986 += 1 };
  s0 -> s1 [0, 65535] { R10986 += 1, R10910 += 1, R10848 += 1 };
  s0 -> s2 [0, 65535] { R10986 += 1, R10909 += 1, R10910 += 1 };
  s0 -> s3 [0, 65535] { R10986 += 1, R10910 += 1, R10847 += 1, R10848 += 1 };
  s1 -> s1 [0, 65535] { R10986 += 1, R10910 += 1, R10848 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R10986 += 1, R10910 += 1 };
  s1 -> s5 [0, 65535] { R10986 += 1 };
  s2 -> s1 [0, 65535] { R10986 += 1, R10910 += 1, R10848 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10986 += 1, R10909 += 1, R10910 += 1 };
  s2 -> s3 [0, 65535] { R10986 += 1, R10910 += 1, R10847 += 1, R10848 += 1 };
  s3 -> s1 [0, 65535] { R10986 += 1, R10910 += 1, R10848 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10986 += 1, R10910 += 1, R10847 += 1, R10848 += 1 };
  s3 -> s5 [0, 65535] { R10986 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10986 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R10986 += 1, R10910 += 1 };
  s6 -> s5 [0, 65535] { R10986 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 65535] { R10988 += 1, R10912 += 1, R10850 += 1 };
  s0 -> s0 [0, 65535] { R10987 += 1, R10988 += 1 };
  s0 -> s2 [0, 65535] { R10988 += 1, R10912 += 1, R10849 += 1, R10850 += 1 };
  s0 -> s3 [0, 65535] { R10988 += 1, R10911 += 1, R10912 += 1 };
  s1 -> s1 [0, 65535] { R10988 += 1, R10912 += 1, R10850 += 1 };
  s1 -> s5 [0, 65535] { R10988 += 1 };
  s1 -> s6 [0, 65535] { R10988 += 1, R10912 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R10988 += 1, R10912 += 1, R10850 += 1 };
  s2 -> s5 [0, 65535] { R10988 += 1 };
  s2 -> s2 [0, 65535] { R10988 += 1, R10912 += 1, R10849 += 1, R10850 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R10988 += 1, R10912 += 1, R10850 += 1 };
  s3 -> s2 [0, 65535] { R10988 += 1, R10912 += 1, R10849 += 1, R10850 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10988 += 1, R10911 += 1, R10912 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10988 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R10988 += 1 };
  s6 -> s6 [0, 65535] { R10988 += 1, R10912 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 65535] { R10990 += 1, R10914 += 1, R10870 += 1, R21 += 1 };
  s0 -> s2 [0, 65535] { R10990 += 1, R10914 += 1, R10869 += 1, R10870 += 1 };
  s0 -> s0 [0, 65535] { R10989 += 1, R10990 += 1 };
  s0 -> s3 [0, 65535] { R10990 += 1, R10913 += 1, R10914 += 1 };
  s1 -> s5 [0, 65535] { R10990 += 1 };
  s1 -> s1 [0, 65535] { R10990 += 1, R10914 += 1, R10870 += 1, R21 += 1 };
  s1 -> s6 [0, 65535] { R10990 += 1, R10914 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R10990 += 1 };
  s2 -> s1 [0, 65535] { R10990 += 1, R10914 += 1, R10870 += 1, R21 += 1 };
  s2 -> s2 [0, 65535] { R10990 += 1, R10914 += 1, R10869 += 1, R10870 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R10990 += 1, R10914 += 1, R10870 += 1, R21 += 1 };
  s3 -> s2 [0, 65535] { R10990 += 1, R10914 += 1, R10869 += 1, R10870 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10990 += 1, R10913 += 1, R10914 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10990 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R10990 += 1 };
  s6 -> s6 [0, 65535] { R10990 += 1, R10914 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 65] { R10992 += 1, R10916 += 1, R10872 += 1 };
  s0 -> s0 [0, 65535] { R10991 += 1, R10992 += 1 };
  s0 -> s2 [0, 65535] { R10992 += 1, R10916 += 1, R10871 += 1, R10872 += 1 };
  s0 -> s3 [0, 65535] { R10992 += 1, R10915 += 1, R10916 += 1 };
  s0 -> s4 [66, 66] { R10992 += 1, R10916 += 1, R10872 += 1 };
  s0 -> s5 [66, 66] { R10992 += 1, R10916 += 1, R10872 += 1 };
  s0 -> s6 [70, 70] { R10992 += 1, R10916 += 1, R10872 += 1 };
  s0 -> s1 [71, 65535] { R10992 += 1, R10916 += 1, R10872 += 1 };
  s1 -> s1 [0, 65] { R10992 += 1, R10916 += 1, R10872 += 1 };
  s1 -> s4 [66, 66] { R10992 += 1, R10916 += 1, R10872 += 1 };
  s1 -> s5 [66, 66] { R10992 += 1, R10916 += 1, R10872 += 1 };
  s1 -> s6 [70, 70] { R10992 += 1, R10916 += 1, R10872 += 1 };
  s1 -> s1 [71, 65535] { R10992 += 1, R10916 += 1, R10872 += 1 };
  s2 -> s1 [0, 65] { R10992 += 1, R10916 += 1, R10872 += 1 };
  s2 -> s2 [0, 65535] { R10992 += 1, R10916 += 1, R10871 += 1, R10872 += 1 };
  s2 -> s4 [66, 66] { R10992 += 1, R10916 += 1, R10872 += 1 };
  s2 -> s5 [66, 66] { R10992 += 1, R10916 += 1, R10872 += 1 };
  s2 -> s6 [70, 70] { R10992 += 1, R10916 += 1, R10872 += 1 };
  s2 -> s1 [71, 65535] { R10992 += 1, R10916 += 1, R10872 += 1 };
  s3 -> s1 [0, 65] { R10992 += 1, R10916 += 1, R10872 += 1 };
  s3 -> s2 [0, 65535] { R10992 += 1, R10916 += 1, R10871 += 1, R10872 += 1 };
  s3 -> s3 [0, 65535] { R10992 += 1, R10915 += 1, R10916 += 1 };
  s3 -> s4 [66, 66] { R10992 += 1, R10916 += 1, R10872 += 1 };
  s3 -> s5 [66, 66] { R10992 += 1, R10916 += 1, R10872 += 1 };
  s3 -> s6 [70, 70] { R10992 += 1, R10916 += 1, R10872 += 1 };
  s3 -> s1 [71, 65535] { R10992 += 1, R10916 += 1, R10872 += 1 };
  s4 -> s4 [0, 66] { R10992 += 1, R10916 += 1, R10872 += 1 };
  s4 -> s9 [70, 70] { R10992 += 1, R10916 += 1, R10872 += 1 };
  s4 -> s4 [71, 65535] { R10992 += 1, R10916 += 1, R10872 += 1 };
  s6 -> s6 [0, 65] { R10992 += 1, R10916 += 1, R10872 += 1 };
  s6 -> s7 [0, 65535] { R10992 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R10992 += 1, R10916 += 1 };
  s6 -> s9 [66, 66] { R10992 += 1, R10916 += 1, R10872 += 1 };
  s6 -> s10 [66, 66] { R10992 += 1, R10916 += 1, R10872 += 1 };
  s6 -> s6 [70, 65535] { R10992 += 1, R10916 += 1, R10872 += 1 };
  s7 -> s7 [0, 65535] { R10992 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  s9 -> s9 [0, 66] { R10992 += 1, R10916 += 1, R10872 += 1 };
  s9 -> s9 [0, 65535] { R10992 += 1, R10916 += 1 };
  s9 -> s7 [0, 65535] { R10992 += 1 };
  s9 -> s8 [0, 65535];
  s9 -> s9 [70, 65535] { R10992 += 1, R10916 += 1, R10872 += 1 };
  s10 -> s10 [0, 65535] { R10992 += 1, R10916 += 1 };
  s10 -> s7 [0, 65535] { R10992 += 1 };
  s10 -> s8 [0, 65535];
  accepting s8, s9, s6, s7, s10;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 65] { R10994 += 1, R10918 += 1, R10874 += 1, R77 += 1 };
  s0 -> s2 [0, 65535] { R10994 += 1, R10917 += 1, R10918 += 1 };
  s0 -> s3 [0, 65535] { R10994 += 1, R10918 += 1, R10873 += 1, R10874 += 1 };
  s0 -> s0 [0, 65535] { R10993 += 1, R10994 += 1 };
  s0 -> s4 [66, 66] { R10994 += 1, R10918 += 1, R10874 += 1, R77 += 1 };
  s0 -> s5 [66, 66] { R10994 += 1, R10918 += 1, R10874 += 1, R77 += 1 };
  s0 -> s1 [67, 65535] { R10994 += 1, R10918 += 1, R10874 += 1, R77 += 1 };
  s1 -> s1 [0, 65] { R10994 += 1, R10918 += 1, R10874 += 1, R77 += 1 };
  s1 -> s1 [0, 65535] { R10994 += 1, R10918 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R10994 += 1 };
  s1 -> s4 [66, 66] { R10994 += 1, R10918 += 1, R10874 += 1, R77 += 1 };
  s1 -> s5 [66, 66] { R10994 += 1, R10918 += 1, R10874 += 1, R77 += 1 };
  s1 -> s1 [67, 65535] { R10994 += 1, R10918 += 1, R10874 += 1, R77 += 1 };
  s2 -> s1 [0, 65] { R10994 += 1, R10918 += 1, R10874 += 1, R77 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R10994 += 1, R10917 += 1, R10918 += 1 };
  s2 -> s3 [0, 65535] { R10994 += 1, R10918 += 1, R10873 += 1, R10874 += 1 };
  s2 -> s4 [66, 66] { R10994 += 1, R10918 += 1, R10874 += 1, R77 += 1 };
  s2 -> s5 [66, 66] { R10994 += 1, R10918 += 1, R10874 += 1, R77 += 1 };
  s2 -> s1 [67, 65535] { R10994 += 1, R10918 += 1, R10874 += 1, R77 += 1 };
  s3 -> s1 [0, 65] { R10994 += 1, R10918 += 1, R10874 += 1, R77 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s7 [0, 65535] { R10994 += 1 };
  s3 -> s3 [0, 65535] { R10994 += 1, R10918 += 1, R10873 += 1, R10874 += 1 };
  s3 -> s4 [66, 66] { R10994 += 1, R10918 += 1, R10874 += 1, R77 += 1 };
  s3 -> s5 [66, 66] { R10994 += 1, R10918 += 1, R10874 += 1, R77 += 1 };
  s3 -> s1 [67, 65535] { R10994 += 1, R10918 += 1, R10874 += 1, R77 += 1 };
  s4 -> s4 [0, 65535] { R10994 += 1, R10918 += 1, R10874 += 1, R77 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s8 [0, 65535] { R10994 += 1, R10918 += 1 };
  s4 -> s7 [0, 65535] { R10994 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R10994 += 1 };
  s5 -> s5 [0, 65535] { R10994 += 1, R10918 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R10994 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R10994 += 1, R10918 += 1 };
  s8 -> s7 [0, 65535] { R10994 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton value2_39 {
  init s0;
  s0 -> s1 [0, 65] { R10996 += 1, R10920 += 1, R10876 += 1, R79 += 1 };
  s0 -> s2 [0, 65535] { R10996 += 1, R10920 += 1, R10875 += 1, R10876 += 1 };
  s0 -> s0 [0, 65535] { R10995 += 1, R10996 += 1 };
  s0 -> s3 [0, 65535] { R10996 += 1, R10919 += 1, R10920 += 1 };
  s0 -> s4 [66, 66] { R10996 += 1, R10920 += 1, R10876 += 1, R79 += 1 };
  s0 -> s5 [66, 66] { R10996 += 1, R10920 += 1, R10876 += 1, R79 += 1 };
  s0 -> s1 [67, 65535] { R10996 += 1, R10920 += 1, R10876 += 1, R79 += 1 };
  s1 -> s1 [0, 65] { R10996 += 1, R10920 += 1, R10876 += 1, R79 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R10996 += 1 };
  s1 -> s1 [0, 65535] { R10996 += 1, R10920 += 1 };
  s1 -> s4 [66, 66] { R10996 += 1, R10920 += 1, R10876 += 1, R79 += 1 };
  s1 -> s5 [66, 66] { R10996 += 1, R10920 += 1, R10876 += 1, R79 += 1 };
  s1 -> s1 [67, 65535] { R10996 += 1, R10920 += 1, R10876 += 1, R79 += 1 };
  s2 -> s1 [0, 65] { R10996 += 1, R10920 += 1, R10876 += 1, R79 += 1 };
  s2 -> s2 [0, 65535] { R10996 += 1, R10920 += 1, R10875 += 1, R10876 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s7 [0, 65535] { R10996 += 1 };
  s2 -> s4 [66, 66] { R10996 += 1, R10920 += 1, R10876 += 1, R79 += 1 };
  s2 -> s5 [66, 66] { R10996 += 1, R10920 += 1, R10876 += 1, R79 += 1 };
  s2 -> s1 [67, 65535] { R10996 += 1, R10920 += 1, R10876 += 1, R79 += 1 };
  s3 -> s1 [0, 65] { R10996 += 1, R10920 += 1, R10876 += 1, R79 += 1 };
  s3 -> s2 [0, 65535] { R10996 += 1, R10920 += 1, R10875 += 1, R10876 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R10996 += 1, R10919 += 1, R10920 += 1 };
  s3 -> s4 [66, 66] { R10996 += 1, R10920 += 1, R10876 += 1, R79 += 1 };
  s3 -> s5 [66, 66] { R10996 += 1, R10920 += 1, R10876 += 1, R79 += 1 };
  s3 -> s1 [67, 65535] { R10996 += 1, R10920 += 1, R10876 += 1, R79 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R10996 += 1, R10920 += 1, R10876 += 1, R79 += 1 };
  s4 -> s7 [0, 65535] { R10996 += 1 };
  s4 -> s8 [0, 65535] { R10996 += 1, R10920 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R10996 += 1 };
  s5 -> s5 [0, 65535] { R10996 += 1, R10920 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R10996 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R10996 += 1 };
  s8 -> s8 [0, 65535] { R10996 += 1, R10920 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton value2_40 {
  init s0;
  s0 -> s1 [0, 65] { R10998 += 1, R10922 += 1, R10878 += 1, R81 += 1, R82 += 1 };
  s0 -> s2 [0, 65535] { R10998 += 1, R10922 += 1, R10877 += 1, R10878 += 1 };
  s0 -> s0 [0, 65535] { R10997 += 1, R10998 += 1 };
  s0 -> s3 [0, 65535] { R10998 += 1, R10921 += 1, R10922 += 1 };
  s0 -> s4 [66, 66] { R10998 += 1, R10922 += 1, R10878 += 1, R81 += 1, R82 += 1 };
  s0 -> s5 [66, 66] { R10998 += 1, R10922 += 1, R10878 += 1, R81 += 1, R82 += 1 };
  s0 -> s1 [67, 65535] { R10998 += 1, R10922 += 1, R10878 += 1, R81 += 1, R82 += 1 };
  s1 -> s1 [0, 65] { R10998 += 1, R10922 += 1, R10878 += 1, R81 += 1, R82 += 1 };
  s1 -> s6 [0, 65535] { R10998 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s1 [0, 65535] { R10998 += 1, R10922 += 1 };
  s1 -> s4 [66, 66] { R10998 += 1, R10922 += 1, R10878 += 1, R81 += 1, R82 += 1 };
  s1 -> s5 [66, 66] { R10998 += 1, R10922 += 1, R10878 += 1, R81 += 1, R82 += 1 };
  s1 -> s1 [67, 65535] { R10998 += 1, R10922 += 1, R10878 += 1, R81 += 1, R82 += 1 };
  s2 -> s1 [0, 65] { R10998 += 1, R10922 += 1, R10878 += 1, R81 += 1, R82 += 1 };
  s2 -> s6 [0, 65535] { R10998 += 1 };
  s2 -> s2 [0, 65535] { R10998 += 1, R10922 += 1, R10877 += 1, R10878 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s4 [66, 66] { R10998 += 1, R10922 += 1, R10878 += 1, R81 += 1, R82 += 1 };
  s2 -> s5 [66, 66] { R10998 += 1, R10922 += 1, R10878 += 1, R81 += 1, R82 += 1 };
  s2 -> s1 [67, 65535] { R10998 += 1, R10922 += 1, R10878 += 1, R81 += 1, R82 += 1 };
  s3 -> s1 [0, 65] { R10998 += 1, R10922 += 1, R10878 += 1, R81 += 1, R82 += 1 };
  s3 -> s2 [0, 65535] { R10998 += 1, R10922 += 1, R10877 += 1, R10878 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s3 [0, 65535] { R10998 += 1, R10921 += 1, R10922 += 1 };
  s3 -> s4 [66, 66] { R10998 += 1, R10922 += 1, R10878 += 1, R81 += 1, R82 += 1 };
  s3 -> s5 [66, 66] { R10998 += 1, R10922 += 1, R10878 += 1, R81 += 1, R82 += 1 };
  s3 -> s1 [67, 65535] { R10998 += 1, R10922 += 1, R10878 += 1, R81 += 1, R82 += 1 };
  s4 -> s6 [0, 65535] { R10998 += 1 };
  s4 -> s8 [0, 65535] { R10998 += 1, R10922 += 1 };
  s4 -> s4 [0, 65535] { R10998 += 1, R10922 += 1, R10878 += 1, R81 += 1, R82 += 1 };
  s4 -> s7 [0, 65535];
  s5 -> s6 [0, 65535] { R10998 += 1 };
  s5 -> s5 [0, 65535] { R10998 += 1, R10922 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s6 [0, 65535] { R10998 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  s8 -> s6 [0, 65535] { R10998 += 1 };
  s8 -> s8 [0, 65535] { R10998 += 1, R10922 += 1 };
  s8 -> s7 [0, 65535];
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton value2_41 {
  init s0;
  s0 -> s1 [0, 65] { R11000 += 1, R10924 += 1, R10880 += 1, R6638 += 1, R6639 += 1 };
  s0 -> s2 [0, 65] { R11000 += 1, R10924 += 1, R10880 += 1, R6637 += 1, R6638 += 1 };
  s0 -> s3 [0, 65535] { R11000 += 1, R10924 += 1, R10879 += 1, R10880 += 1 };
  s0 -> s4 [0, 65535] { R11000 += 1, R10923 += 1, R10924 += 1 };
  s0 -> s0 [0, 65535] { R10999 += 1, R11000 += 1 };
  s0 -> s5 [66, 66] { R11000 += 1, R10924 += 1, R10880 += 1, R6637 += 1, R6638 += 1 };
  s0 -> s6 [66, 66] { R11000 += 1, R10924 += 1, R10880 += 1, R6638 += 1, R6639 += 1 };
  s0 -> s7 [66, 66] { R11000 += 1, R10924 += 1, R10880 += 1, R6637 += 1, R6638 += 1 };
  s0 -> s8 [66, 66] { R11000 += 1, R10924 += 1, R10880 += 1, R6638 += 1, R6639 += 1 };
  s0 -> s1 [67, 65535] { R11000 += 1, R10924 += 1, R10880 += 1, R6638 += 1, R6639 += 1 };
  s0 -> s2 [67, 65535] { R11000 += 1, R10924 += 1, R10880 += 1, R6637 += 1, R6638 += 1 };
  s1 -> s1 [0, 65] { R11000 += 1, R10924 += 1, R10880 += 1, R6638 += 1, R6639 += 1 };
  s1 -> s1 [0, 65535] { R11000 += 1, R10924 += 1 };
  s1 -> s9 [0, 65535];
  s1 -> s10 [0, 65535] { R11000 += 1 };
  s1 -> s6 [66, 66] { R11000 += 1, R10924 += 1, R10880 += 1, R6638 += 1, R6639 += 1 };
  s1 -> s8 [66, 66] { R11000 += 1, R10924 += 1, R10880 += 1, R6638 += 1, R6639 += 1 };
  s1 -> s1 [67, 65535] { R11000 += 1, R10924 += 1, R10880 += 1, R6638 += 1, R6639 += 1 };
  s2 -> s1 [0, 65] { R11000 += 1, R10924 += 1, R10880 += 1, R6638 += 1, R6639 += 1 };
  s2 -> s2 [0, 65] { R11000 += 1, R10924 += 1, R10880 += 1, R6637 += 1, R6638 += 1 };
  s2 -> s5 [66, 66] { R11000 += 1, R10924 += 1, R10880 += 1, R6637 += 1, R6638 += 1 };
  s2 -> s6 [66, 66] { R11000 += 1, R10924 += 1, R10880 += 1, R6638 += 1, R6639 += 1 };
  s2 -> s7 [66, 66] { R11000 += 1, R10924 += 1, R10880 += 1, R6637 += 1, R6638 += 1 };
  s2 -> s8 [66, 66] { R11000 += 1, R10924 += 1, R10880 += 1, R6638 += 1, R6639 += 1 };
  s2 -> s1 [67, 65535] { R11000 += 1, R10924 += 1, R10880 += 1, R6638 += 1, R6639 += 1 };
  s2 -> s2 [67, 65535] { R11000 += 1, R10924 += 1, R10880 += 1, R6637 += 1, R6638 += 1 };
  s3 -> s1 [0, 65] { R11000 += 1, R10924 += 1, R10880 += 1, R6638 += 1, R6639 += 1 };
  s3 -> s2 [0, 65] { R11000 += 1, R10924 += 1, R10880 += 1, R6637 += 1, R6638 += 1 };
  s3 -> s3 [0, 65535] { R11000 += 1, R10924 += 1, R10879 += 1, R10880 += 1 };
  s3 -> s5 [66, 66] { R11000 += 1, R10924 += 1, R10880 += 1, R6637 += 1, R6638 += 1 };
  s3 -> s6 [66, 66] { R11000 += 1, R10924 += 1, R10880 += 1, R6638 += 1, R6639 += 1 };
  s3 -> s7 [66, 66] { R11000 += 1, R10924 += 1, R10880 += 1, R6637 += 1, R6638 += 1 };
  s3 -> s8 [66, 66] { R11000 += 1, R10924 += 1, R10880 += 1, R6638 += 1, R6639 += 1 };
  s3 -> s1 [67, 65535] { R11000 += 1, R10924 += 1, R10880 += 1, R6638 += 1, R6639 += 1 };
  s3 -> s2 [67, 65535] { R11000 += 1, R10924 += 1, R10880 += 1, R6637 += 1, R6638 += 1 };
  s4 -> s1 [0, 65] { R11000 += 1, R10924 += 1, R10880 += 1, R6638 += 1, R6639 += 1 };
  s4 -> s2 [0, 65] { R11000 += 1, R10924 += 1, R10880 += 1, R6637 += 1, R6638 += 1 };
  s4 -> s3 [0, 65535] { R11000 += 1, R10924 += 1, R10879 += 1, R10880 += 1 };
  s4 -> s4 [0, 65535] { R11000 += 1, R10923 += 1, R10924 += 1 };
  s4 -> s5 [66, 66] { R11000 += 1, R10924 += 1, R10880 += 1, R6637 += 1, R6638 += 1 };
  s4 -> s6 [66, 66] { R11000 += 1, R10924 += 1, R10880 += 1, R6638 += 1, R6639 += 1 };
  s4 -> s7 [66, 66] { R11000 += 1, R10924 += 1, R10880 += 1, R6637 += 1, R6638 += 1 };
  s4 -> s8 [66, 66] { R11000 += 1, R10924 += 1, R10880 += 1, R6638 += 1, R6639 += 1 };
  s4 -> s1 [67, 65535] { R11000 += 1, R10924 += 1, R10880 += 1, R6638 += 1, R6639 += 1 };
  s4 -> s2 [67, 65535] { R11000 += 1, R10924 += 1, R10880 += 1, R6637 += 1, R6638 += 1 };
  s5 -> s5 [0, 65535] { R11000 += 1, R10924 += 1, R10880 += 1, R6637 += 1, R6638 += 1 };
  s5 -> s6 [0, 65535] { R11000 += 1, R10924 += 1, R10880 += 1, R6638 += 1, R6639 += 1 };
  s6 -> s9 [0, 65535];
  s6 -> s6 [0, 65535] { R11000 += 1, R10924 += 1, R10880 += 1, R6638 += 1, R6639 += 1 };
  s6 -> s10 [0, 65535] { R11000 += 1 };
  s6 -> s11 [0, 65535] { R11000 += 1, R10924 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [0, 65535] { R11000 += 1 };
  s8 -> s8 [0, 65535] { R11000 += 1, R10924 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R11000 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s10 [0, 65535] { R11000 += 1 };
  s11 -> s11 [0, 65535] { R11000 += 1, R10924 += 1 };
  accepting s8, s9, s6, s1, s10, s11;
};
automaton value2_42 {
  init s0;
  s0 -> s1 [0, 65] { R11002 += 1, R10926 += 1, R10882 += 1, R8825 += 1, R8826 += 1 };
  s0 -> s2 [0, 65535] { R11002 += 1, R10926 += 1, R10881 += 1, R10882 += 1 };
  s0 -> s3 [0, 65535] { R11002 += 1, R10925 += 1, R10926 += 1 };
  s0 -> s0 [0, 65535] { R11001 += 1, R11002 += 1 };
  s0 -> s4 [66, 66] { R11002 += 1, R10926 += 1, R10882 += 1, R8825 += 1, R8826 += 1 };
  s0 -> s5 [66, 66] { R11002 += 1, R10926 += 1, R10882 += 1, R8825 += 1, R8826 += 1 };
  s0 -> s1 [67, 65535] { R11002 += 1, R10926 += 1, R10882 += 1, R8825 += 1, R8826 += 1 };
  s1 -> s1 [0, 65] { R11002 += 1, R10926 += 1, R10882 += 1, R8825 += 1, R8826 += 1 };
  s1 -> s7 [0, 65535] { R11002 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s1 [0, 65535] { R11002 += 1, R10926 += 1 };
  s1 -> s4 [66, 66] { R11002 += 1, R10926 += 1, R10882 += 1, R8825 += 1, R8826 += 1 };
  s1 -> s5 [66, 66] { R11002 += 1, R10926 += 1, R10882 += 1, R8825 += 1, R8826 += 1 };
  s1 -> s1 [67, 65535] { R11002 += 1, R10926 += 1, R10882 += 1, R8825 += 1, R8826 += 1 };
  s2 -> s1 [0, 65] { R11002 += 1, R10926 += 1, R10882 += 1, R8825 += 1, R8826 += 1 };
  s2 -> s2 [0, 65535] { R11002 += 1, R10926 += 1, R10881 += 1, R10882 += 1 };
  s2 -> s7 [0, 65535] { R11002 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s4 [66, 66] { R11002 += 1, R10926 += 1, R10882 += 1, R8825 += 1, R8826 += 1 };
  s2 -> s5 [66, 66] { R11002 += 1, R10926 += 1, R10882 += 1, R8825 += 1, R8826 += 1 };
  s2 -> s1 [67, 65535] { R11002 += 1, R10926 += 1, R10882 += 1, R8825 += 1, R8826 += 1 };
  s3 -> s1 [0, 65] { R11002 += 1, R10926 += 1, R10882 += 1, R8825 += 1, R8826 += 1 };
  s3 -> s2 [0, 65535] { R11002 += 1, R10926 += 1, R10881 += 1, R10882 += 1 };
  s3 -> s3 [0, 65535] { R11002 += 1, R10925 += 1, R10926 += 1 };
  s3 -> s8 [0, 65535];
  s3 -> s4 [66, 66] { R11002 += 1, R10926 += 1, R10882 += 1, R8825 += 1, R8826 += 1 };
  s3 -> s5 [66, 66] { R11002 += 1, R10926 += 1, R10882 += 1, R8825 += 1, R8826 += 1 };
  s3 -> s1 [67, 65535] { R11002 += 1, R10926 += 1, R10882 += 1, R8825 += 1, R8826 += 1 };
  s4 -> s7 [0, 65535] { R11002 += 1 };
  s4 -> s4 [0, 65535] { R11002 += 1, R10926 += 1 };
  s4 -> s8 [0, 65535];
  s5 -> s6 [0, 65535] { R11002 += 1, R10926 += 1 };
  s5 -> s7 [0, 65535] { R11002 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s5 [0, 65535] { R11002 += 1, R10926 += 1, R10882 += 1, R8825 += 1, R8826 += 1 };
  s6 -> s6 [0, 65535] { R11002 += 1, R10926 += 1 };
  s6 -> s7 [0, 65535] { R11002 += 1 };
  s6 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R11002 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton value2_43 {
  init s0;
  s0 -> s1 [0, 65] { R11004 += 1, R10928 += 1, R10884 += 1, R10282 += 1, R10283 += 1 };
  s0 -> s2 [0, 65] { R11004 += 1, R10928 += 1, R10884 += 1, R10281 += 1, R10282 += 1 };
  s0 -> s3 [0, 65535] { R11004 += 1, R10927 += 1, R10928 += 1 };
  s0 -> s0 [0, 65535] { R11003 += 1, R11004 += 1 };
  s0 -> s4 [0, 65535] { R11004 += 1, R10928 += 1, R10883 += 1, R10884 += 1 };
  s0 -> s5 [66, 66] { R11004 += 1, R10928 += 1, R10884 += 1, R10282 += 1, R10283 += 1 };
  s0 -> s6 [66, 66] { R11004 += 1, R10928 += 1, R10884 += 1, R10281 += 1, R10282 += 1 };
  s0 -> s7 [66, 66] { R11004 += 1, R10928 += 1, R10884 += 1, R10282 += 1, R10283 += 1 };
  s0 -> s8 [66, 66] { R11004 += 1, R10928 += 1, R10884 += 1, R10281 += 1, R10282 += 1 };
  s0 -> s1 [67, 65535] { R11004 += 1, R10928 += 1, R10884 += 1, R10282 += 1, R10283 += 1 };
  s0 -> s2 [67, 65535] { R11004 += 1, R10928 += 1, R10884 += 1, R10281 += 1, R10282 += 1 };
  s1 -> s1 [0, 65] { R11004 += 1, R10928 += 1, R10884 += 1, R10282 += 1, R10283 += 1 };
  s1 -> s13 [0, 65] { R11004 += 1, R10928 += 1, R10884 += 1 };
  s1 -> s5 [66, 66] { R11004 += 1, R10928 += 1, R10884 += 1, R10282 += 1, R10283 += 1 };
  s1 -> s14 [66, 66] { R11004 += 1, R10928 += 1, R10884 += 1 };
  s1 -> s7 [66, 66] { R11004 += 1, R10928 += 1, R10884 += 1, R10282 += 1, R10283 += 1 };
  s1 -> s9 [66, 66] { R11004 += 1, R10928 += 1, R10884 += 1 };
  s1 -> s1 [67, 65535] { R11004 += 1, R10928 += 1, R10884 += 1, R10282 += 1, R10283 += 1 };
  s1 -> s13 [67, 65535] { R11004 += 1, R10928 += 1, R10884 += 1 };
  s2 -> s1 [0, 65] { R11004 += 1, R10928 += 1, R10884 += 1, R10282 += 1, R10283 += 1 };
  s2 -> s2 [0, 65] { R11004 += 1, R10928 += 1, R10884 += 1, R10281 += 1, R10282 += 1 };
  s2 -> s5 [66, 66] { R11004 += 1, R10928 += 1, R10884 += 1, R10282 += 1, R10283 += 1 };
  s2 -> s6 [66, 66] { R11004 += 1, R10928 += 1, R10884 += 1, R10281 += 1, R10282 += 1 };
  s2 -> s7 [66, 66] { R11004 += 1, R10928 += 1, R10884 += 1, R10282 += 1, R10283 += 1 };
  s2 -> s8 [66, 66] { R11004 += 1, R10928 += 1, R10884 += 1, R10281 += 1, R10282 += 1 };
  s2 -> s1 [67, 65535] { R11004 += 1, R10928 += 1, R10884 += 1, R10282 += 1, R10283 += 1 };
  s2 -> s2 [67, 65535] { R11004 += 1, R10928 += 1, R10884 += 1, R10281 += 1, R10282 += 1 };
  s3 -> s1 [0, 65] { R11004 += 1, R10928 += 1, R10884 += 1, R10282 += 1, R10283 += 1 };
  s3 -> s2 [0, 65] { R11004 += 1, R10928 += 1, R10884 += 1, R10281 += 1, R10282 += 1 };
  s3 -> s3 [0, 65535] { R11004 += 1, R10927 += 1, R10928 += 1 };
  s3 -> s4 [0, 65535] { R11004 += 1, R10928 += 1, R10883 += 1, R10884 += 1 };
  s3 -> s5 [66, 66] { R11004 += 1, R10928 += 1, R10884 += 1, R10282 += 1, R10283 += 1 };
  s3 -> s6 [66, 66] { R11004 += 1, R10928 += 1, R10884 += 1, R10281 += 1, R10282 += 1 };
  s3 -> s7 [66, 66] { R11004 += 1, R10928 += 1, R10884 += 1, R10282 += 1, R10283 += 1 };
  s3 -> s8 [66, 66] { R11004 += 1, R10928 += 1, R10884 += 1, R10281 += 1, R10282 += 1 };
  s3 -> s1 [67, 65535] { R11004 += 1, R10928 += 1, R10884 += 1, R10282 += 1, R10283 += 1 };
  s3 -> s2 [67, 65535] { R11004 += 1, R10928 += 1, R10884 += 1, R10281 += 1, R10282 += 1 };
  s4 -> s1 [0, 65] { R11004 += 1, R10928 += 1, R10884 += 1, R10282 += 1, R10283 += 1 };
  s4 -> s2 [0, 65] { R11004 += 1, R10928 += 1, R10884 += 1, R10281 += 1, R10282 += 1 };
  s4 -> s4 [0, 65535] { R11004 += 1, R10928 += 1, R10883 += 1, R10884 += 1 };
  s4 -> s5 [66, 66] { R11004 += 1, R10928 += 1, R10884 += 1, R10282 += 1, R10283 += 1 };
  s4 -> s6 [66, 66] { R11004 += 1, R10928 += 1, R10884 += 1, R10281 += 1, R10282 += 1 };
  s4 -> s7 [66, 66] { R11004 += 1, R10928 += 1, R10884 += 1, R10282 += 1, R10283 += 1 };
  s4 -> s8 [66, 66] { R11004 += 1, R10928 += 1, R10884 += 1, R10281 += 1, R10282 += 1 };
  s4 -> s1 [67, 65535] { R11004 += 1, R10928 += 1, R10884 += 1, R10282 += 1, R10283 += 1 };
  s4 -> s2 [67, 65535] { R11004 += 1, R10928 += 1, R10884 += 1, R10281 += 1, R10282 += 1 };
  s7 -> s7 [0, 65535] { R11004 += 1, R10928 += 1, R10884 += 1, R10282 += 1, R10283 += 1 };
  s7 -> s9 [0, 65535] { R11004 += 1, R10928 += 1, R10884 += 1 };
  s8 -> s7 [0, 65535] { R11004 += 1, R10928 += 1, R10884 += 1, R10282 += 1, R10283 += 1 };
  s8 -> s8 [0, 65535] { R11004 += 1, R10928 += 1, R10884 += 1, R10281 += 1, R10282 += 1 };
  s9 -> s10 [0, 65535] { R11004 += 1, R10928 += 1 };
  s9 -> s11 [0, 65535];
  s9 -> s9 [0, 65535] { R11004 += 1, R10928 += 1, R10884 += 1 };
  s9 -> s12 [0, 65535] { R11004 += 1 };
  s10 -> s10 [0, 65535] { R11004 += 1, R10928 += 1 };
  s10 -> s11 [0, 65535];
  s10 -> s12 [0, 65535] { R11004 += 1 };
  s11 -> s11 [0, 65535];
  s12 -> s11 [0, 65535];
  s12 -> s12 [0, 65535] { R11004 += 1 };
  s13 -> s13 [0, 65] { R11004 += 1, R10928 += 1, R10884 += 1 };
  s13 -> s11 [0, 65535];
  s13 -> s13 [0, 65535] { R11004 += 1, R10928 += 1 };
  s13 -> s12 [0, 65535] { R11004 += 1 };
  s13 -> s14 [66, 66] { R11004 += 1, R10928 += 1, R10884 += 1 };
  s13 -> s9 [66, 66] { R11004 += 1, R10928 += 1, R10884 += 1 };
  s13 -> s13 [67, 65535] { R11004 += 1, R10928 += 1, R10884 += 1 };
  s14 -> s14 [0, 65535] { R11004 += 1, R10928 += 1 };
  s14 -> s11 [0, 65535];
  s14 -> s12 [0, 65535] { R11004 += 1 };
  accepting s12, s13, s9, s14, s10, s11;
};
automaton value2_44 {
  init s0;
  s0 -> s1 [0, 65] { R11006 += 1, R10930 += 1, R10886 += 1, R10827 += 1, R10828 += 1 };
  s0 -> s2 [0, 65] { R11006 += 1, R10930 += 1, R10886 += 1, R10828 += 1 };
  s0 -> s0 [0, 65535] { R11005 += 1, R11006 += 1 };
  s0 -> s3 [0, 65535] { R11006 += 1, R10929 += 1, R10930 += 1 };
  s0 -> s4 [0, 65535] { R11006 += 1, R10930 += 1, R10885 += 1, R10886 += 1 };
  s0 -> s5 [66, 66] { R11006 += 1, R10930 += 1, R10886 += 1, R10828 += 1 };
  s0 -> s6 [66, 66] { R11006 += 1, R10930 += 1, R10886 += 1, R10828 += 1 };
  s0 -> s7 [66, 66] { R11006 += 1, R10930 += 1, R10886 += 1, R10827 += 1, R10828 += 1 };
  s0 -> s8 [66, 66] { R11006 += 1, R10930 += 1, R10886 += 1, R10827 += 1, R10828 += 1 };
  s0 -> s2 [67, 69] { R11006 += 1, R10930 += 1, R10886 += 1, R10828 += 1 };
  s0 -> s1 [67, 65535] { R11006 += 1, R10930 += 1, R10886 += 1, R10827 += 1, R10828 += 1 };
  s0 -> s9 [70, 70] { R11006 += 1, R10930 += 1, R10886 += 1, R10828 += 1 };
  s0 -> s2 [84, 65535] { R11006 += 1, R10930 += 1, R10886 += 1, R10828 += 1 };
  s1 -> s1 [0, 65] { R11006 += 1, R10930 += 1, R10886 += 1, R10827 += 1, R10828 += 1 };
  s1 -> s2 [0, 65] { R11006 += 1, R10930 += 1, R10886 += 1, R10828 += 1 };
  s1 -> s5 [66, 66] { R11006 += 1, R10930 += 1, R10886 += 1, R10828 += 1 };
  s1 -> s6 [66, 66] { R11006 += 1, R10930 += 1, R10886 += 1, R10828 += 1 };
  s1 -> s7 [66, 66] { R11006 += 1, R10930 += 1, R10886 += 1, R10827 += 1, R10828 += 1 };
  s1 -> s8 [66, 66] { R11006 += 1, R10930 += 1, R10886 += 1, R10827 += 1, R10828 += 1 };
  s1 -> s2 [67, 69] { R11006 += 1, R10930 += 1, R10886 += 1, R10828 += 1 };
  s1 -> s1 [67, 65535] { R11006 += 1, R10930 += 1, R10886 += 1, R10827 += 1, R10828 += 1 };
  s1 -> s9 [70, 70] { R11006 += 1, R10930 += 1, R10886 += 1, R10828 += 1 };
  s1 -> s2 [84, 65535] { R11006 += 1, R10930 += 1, R10886 += 1, R10828 += 1 };
  s2 -> s2 [0, 65] { R11006 += 1, R10930 += 1, R10886 += 1, R10828 += 1 };
  s2 -> s5 [66, 66] { R11006 += 1, R10930 += 1, R10886 += 1 };
  s2 -> s6 [66, 66] { R11006 += 1, R10930 += 1, R10886 += 1 };
  s2 -> s2 [67, 69] { R11006 += 1, R10930 += 1, R10886 += 1, R10828 += 1 };
  s2 -> s2 [67, 65535] { R11006 += 1, R10930 += 1, R10886 += 1 };
  s2 -> s9 [70, 70] { R11006 += 1, R10930 += 1, R10886 += 1, R10828 += 1 };
  s2 -> s2 [84, 65535] { R11006 += 1, R10930 += 1, R10886 += 1, R10828 += 1 };
  s3 -> s1 [0, 65] { R11006 += 1, R10930 += 1, R10886 += 1, R10827 += 1, R10828 += 1 };
  s3 -> s2 [0, 65] { R11006 += 1, R10930 += 1, R10886 += 1, R10828 += 1 };
  s3 -> s3 [0, 65535] { R11006 += 1, R10929 += 1, R10930 += 1 };
  s3 -> s4 [0, 65535] { R11006 += 1, R10930 += 1, R10885 += 1, R10886 += 1 };
  s3 -> s5 [66, 66] { R11006 += 1, R10930 += 1, R10886 += 1, R10828 += 1 };
  s3 -> s6 [66, 66] { R11006 += 1, R10930 += 1, R10886 += 1, R10828 += 1 };
  s3 -> s7 [66, 66] { R11006 += 1, R10930 += 1, R10886 += 1, R10827 += 1, R10828 += 1 };
  s3 -> s8 [66, 66] { R11006 += 1, R10930 += 1, R10886 += 1, R10827 += 1, R10828 += 1 };
  s3 -> s2 [67, 69] { R11006 += 1, R10930 += 1, R10886 += 1, R10828 += 1 };
  s3 -> s1 [67, 65535] { R11006 += 1, R10930 += 1, R10886 += 1, R10827 += 1, R10828 += 1 };
  s3 -> s9 [70, 70] { R11006 += 1, R10930 += 1, R10886 += 1, R10828 += 1 };
  s3 -> s2 [84, 65535] { R11006 += 1, R10930 += 1, R10886 += 1, R10828 += 1 };
  s4 -> s1 [0, 65] { R11006 += 1, R10930 += 1, R10886 += 1, R10827 += 1, R10828 += 1 };
  s4 -> s2 [0, 65] { R11006 += 1, R10930 += 1, R10886 += 1, R10828 += 1 };
  s4 -> s4 [0, 65535] { R11006 += 1, R10930 += 1, R10885 += 1, R10886 += 1 };
  s4 -> s5 [66, 66] { R11006 += 1, R10930 += 1, R10886 += 1, R10828 += 1 };
  s4 -> s6 [66, 66] { R11006 += 1, R10930 += 1, R10886 += 1, R10828 += 1 };
  s4 -> s7 [66, 66] { R11006 += 1, R10930 += 1, R10886 += 1, R10827 += 1, R10828 += 1 };
  s4 -> s8 [66, 66] { R11006 += 1, R10930 += 1, R10886 += 1, R10827 += 1, R10828 += 1 };
  s4 -> s2 [67, 69] { R11006 += 1, R10930 += 1, R10886 += 1, R10828 += 1 };
  s4 -> s1 [67, 65535] { R11006 += 1, R10930 += 1, R10886 += 1, R10827 += 1, R10828 += 1 };
  s4 -> s9 [70, 70] { R11006 += 1, R10930 += 1, R10886 += 1, R10828 += 1 };
  s4 -> s2 [84, 65535] { R11006 += 1, R10930 += 1, R10886 += 1, R10828 += 1 };
  s6 -> s6 [0, 69] { R11006 += 1, R10930 += 1, R10886 += 1, R10828 += 1 };
  s6 -> s6 [0, 65535] { R11006 += 1, R10930 += 1, R10886 += 1 };
  s6 -> s12 [70, 70] { R11006 += 1, R10930 += 1, R10886 += 1, R10828 += 1 };
  s6 -> s6 [84, 65535] { R11006 += 1, R10930 += 1, R10886 += 1, R10828 += 1 };
  s8 -> s6 [0, 69] { R11006 += 1, R10930 += 1, R10886 += 1, R10828 += 1 };
  s8 -> s8 [0, 65535] { R11006 += 1, R10930 += 1, R10886 += 1, R10827 += 1, R10828 += 1 };
  s8 -> s12 [70, 70] { R11006 += 1, R10930 += 1, R10886 += 1, R10828 += 1 };
  s8 -> s6 [84, 65535] { R11006 += 1, R10930 += 1, R10886 += 1, R10828 += 1 };
  s9 -> s9 [0, 65] { R11006 += 1, R10930 += 1, R10886 += 1 };
  s9 -> s10 [0, 65535] { R11006 += 1 };
  s9 -> s11 [0, 65535];
  s9 -> s9 [0, 65535] { R11006 += 1, R10930 += 1 };
  s9 -> s12 [66, 66] { R11006 += 1, R10930 += 1, R10886 += 1 };
  s9 -> s13 [66, 66] { R11006 += 1, R10930 += 1, R10886 += 1 };
  s9 -> s9 [67, 65535] { R11006 += 1, R10930 += 1, R10886 += 1 };
  s10 -> s10 [0, 65535] { R11006 += 1 };
  s10 -> s11 [0, 65535];
  s11 -> s11 [0, 65535];
  s12 -> s10 [0, 65535] { R11006 += 1 };
  s12 -> s12 [0, 65535] { R11006 += 1, R10930 += 1, R10886 += 1 };
  s12 -> s14 [0, 65535] { R11006 += 1, R10930 += 1 };
  s12 -> s11 [0, 65535];
  s13 -> s10 [0, 65535] { R11006 += 1 };
  s13 -> s11 [0, 65535];
  s13 -> s13 [0, 65535] { R11006 += 1, R10930 += 1 };
  s14 -> s10 [0, 65535] { R11006 += 1 };
  s14 -> s14 [0, 65535] { R11006 += 1, R10930 += 1 };
  s14 -> s11 [0, 65535];
  accepting s12, s13, s9, s14, s10, s11;
};
};
synchronised {  // Automata constraining P37
automaton P37_0 {
  init s0;
  s0 -> s1 [9, 9];
  accepting s1;
};
};
synchronised {  // Automata constraining P38
automaton P38_0 {
  init s0;
  s0 -> s1 [10, 10];
  accepting s1;
};
};
synchronised {  // Automata constraining P36
automaton P36_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
constraint R1 = R10846 && R2 = R10930 && R3 - R11006 = 1 && R23 - R10930 = -1 && R24 = R10930 && R25 - R10930 = -1 && R26 = R10930 && R27 = 0 && R28 = 1 && R29 = 0 && R30 = 1 && R31 = R11006 && R32 - R11006 = 1 && R33 = R11006 && R34 - R11006 = 1 && R35 = 0 && R36 = 1 && R37 = 0 && R38 = 1 && R49 + R78 + R77 + -1*R8828 + -1*R8826 - R64 = 0 && R63 + R8827 + R8825 = 0 && R10845 = 0 && R10871 = 0 && R10872 = 0 && R10879 = 0 && R10880 = 0 && R10883 = 0 && R10884 = 0 && R10885 = 0 && R10886 = 0 && R10887 = 0 && R10888 = R10930 && R10889 = 0 && R10890 = R10930 && R10891 = 0 && R10892 = R10930 && R10893 = 0 && R10894 = R10930 && R10895 = 0 && R10896 = R10930 && R10897 = 0 && R10898 = R10930 && R10899 = 0 && R10900 = R10930 && R10901 = 0 && R10902 = R10930 && R10903 = 0 && R10904 = R10930 && R10905 = 0 && R10906 = R10930 && R10907 = 0 && R10908 = R10930 && R10909 = 0 && R10910 = R10930 && R10911 = 0 && R10912 = R10930 && R10913 = 0 && R10914 = R10930 && R10915 = 0 && R10916 = R10930 && R10917 = 0 && R10918 = R10930 && R10919 = 0 && R10920 = R10930 && R10921 = 0 && R10922 = R10930 && R10923 = 0 && R10924 = R10930 && R10925 = 0 && R10926 = R10930 && R10927 = 0 && R10928 = R10930 && R10929 = 0 && R10931 = 0 && R10932 = R11006 && R10933 = 0 && R10934 = R11006 && R10935 = 0 && R10936 = R11006 && R10937 = 0 && R10938 = R11006 && R10939 = 0 && R10940 = R11006 && R10941 = 0 && R10942 = R11006 && R10943 = 0 && R10944 = R11006 && R10945 = 0 && R10946 = R11006 && R10947 = 0 && R10948 = R11006 && R10949 = 0 && R10950 = R11006 && R10951 = 0 && R10952 = R11006 && R10953 = 0 && R10954 = R11006 && R10955 = 0 && R10956 = R11006 && R10957 = 0 && R10958 = R11006 && R10959 = 0 && R10960 = R11006 && R10961 = 0 && R10962 = R11006 && R10963 = 0 && R10964 = R11006 && R10965 = 0 && R10966 = R11006 && R10967 = 0 && R10968 = R11006 && R10969 = 0 && R10970 = R11006 && R10971 = 0 && R10972 = R11006 && R10973 = 0 && R10974 = R11006 && R10975 = 0 && R10976 = R11006 && R10977 = 0 && R10978 = R11006 && R10979 = 0 && R10980 = R11006 && R10981 = 0 && R10982 = R11006 && R10983 = 0 && R10984 = R11006 && R10985 = 0 && R10986 = R11006 && R10987 = 0 && R10988 = R11006 && R10989 = 0 && R10990 = R11006 && R10991 = 0 && R10992 = R11006 && R10993 = 0 && R10994 = R11006 && R10995 = 0 && R10996 = R11006 && R10997 = 0 && R10998 = R11006 && R10999 = 0 && R11000 = R11006 && R11001 = 0 && R11002 = R11006 && R11003 = 0 && R11004 = R11006 && R11005 = 0 && R11 < 1 && R14 < 1 && R17 < 1 && R51 + R80 + R79 < 1 && -1*R8828 + -1*R8826 - R64 < 1 && -1 < R10846 && 0 < R10930 && -1 < R11006 && (R59 + R6642 + R6639 != 0 || ((R53 + R83 + R81 != 0 || R54 + R84 + R82 + -1*R8828 + -1*R8826 - R64 = 0 || R64 + R8828 + R8826 < 1) && (R53 + R83 + R81 = 0 || R64 + R8828 + R8826 < 1))) && (R59 + R6642 + R6639 != 0 || ((R57 + R6640 + R6637 != 0 || R58 + R6641 + R6638 + -1*R8828 + -1*R8826 - R64 = 0 || R64 + R8828 + R8826 < 1) && (R57 + R6640 + R6637 = 0 || R64 + R8828 + R8826 < 1))) && (R10831 != 0 || R10832 = R10846 || (R20 = 0 && R10846 = 0)) && (R10833 != 0 || R10834 = R10846 || (R20 = 0 && R10846 = 0)) && (R10835 != 0 || R10836 = R10846 || (R20 = 0 && R10846 = 0)) && (R10837 != 0 || R10838 = R10846 || (R20 = 0 && R10846 = 0)) && (R10839 != 0 || R10840 = R10846 || (R20 = 0 && R10846 = 0)) && (R10841 != 0 || R10842 = R10846 || (R20 = 0 && R10846 = 0)) && (R10843 != 0 || R10844 = R10846 || (R20 = 0 && R10846 = 0)) && (R10847 != 0 || R10846 = R10848 || (R20 = 0 && R10846 = 0)) && (R10849 != 0 || R10846 = R10850 || (R20 = 0 && R10846 = 0)) && (R21 = 0 || (R10869 = 0 && R10870 = 0)) && (R21 = 0 || (R10873 = 0 && R10874 = 0)) && (R21 = 0 || (R10875 = 0 && R10876 = 0)) && (R21 = 0 || (R10877 = 0 && R10878 = 0)) && (R21 = 0 || (R10881 = 0 && R10882 = 0)) && (R22 = 0 || (R10851 = 0 && R10852 = 0)) && (R22 = 0 || (R10853 = 0 && R10854 = 0)) && (R22 = 0 || (R10855 = 0 && R10856 = 0)) && (R22 = 0 || (R10857 = 0 && R10858 = 0)) && (R22 = 0 || (R10859 = 0 && R10860 = 0)) && (R22 = 0 || (R10861 = 0 && R10862 = 0)) && (R22 = 0 || (R10863 = 0 && R10864 = 0)) && (R22 = 0 || (R10865 = 0 && R10866 = 0)) && (R22 = 0 || (R10867 = 0 && R10868 = 0)) && (R59 + R6642 + R6639 = 0 || (R53 + R83 + R81 = 0 && R54 + R84 + R82 + -1*R8828 + -1*R8826 - R64 = 0)) && (R59 + R6642 + R6639 = 0 || (R57 + R6640 + R6637 = 0 && R58 + R6641 + R6638 + -1*R8828 + -1*R8826 - R64 = 0)) && (R69 + R10286 + R10283 = 0 || (R67 + R10284 + R10281 = 0 && R68 + R10285 + R10282 = 0)) && (R69 + R10286 + R10283 = 0 || (R73 + R10829 + R10827 = 0 && R74 + R10830 + R10828 = 0)) && (R10831 = 0 || (R20 = 0 && R10846 = 0)) && (R10833 = 0 || (R20 = 0 && R10846 = 0)) && (R10835 = 0 || (R20 = 0 && R10846 = 0)) && (R10837 = 0 || (R20 = 0 && R10846 = 0)) && (R10839 = 0 || (R20 = 0 && R10846 = 0)) && (R10841 = 0 || (R20 = 0 && R10846 = 0)) && (R10843 = 0 || (R20 = 0 && R10846 = 0)) && (R10847 = 0 || (R20 = 0 && R10846 = 0)) && (R10849 = 0 || (R20 = 0 && R10846 = 0));
// End of Parikh automata intersection problem
