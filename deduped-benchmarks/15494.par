// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R12, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R70, R71, R72, R73, R7706, R7707, R7708, R7709, R7710, R7711, R8, R8982, R8983, R8984, R8985, R9408, R9409, R9410, R9411, R9412, R9413, R9518, R9519, R9520, R9521, R9522, R9523, R9524, R9525, R9526, R9527, R9528, R9529, R9530, R9531, R9532, R9533, R9534, R9535, R9536, R9537, R9538, R9539, R9540, R9541, R9542, R9543, R9544, R9545, R9546, R9547, R9548, R9549, R9550, R9551, R9552, R9553, R9554, R9555, R9556, R9557, R9558, R9559, R9560, R9561, R9562, R9563, R9564, R9565, R9566, R9567, R9568, R9569, R9570, R9571, R9572, R9573, R9574, R9575, R9576, R9577, R9578, R9579, R9580, R9581, R9582, R9583, R9584, R9585, R9586, R9587, R9588, R9589, R9590, R9591, R9592, R9593, R9594, R9595, R9596, R9597, R9598, R9599, R9600, R9601, R9602, R9603, R9604, R9605, R9606, R9607, R9608, R9609, R9610, R9611, R9612, R9613, R9614, R9615, R9616, R9617, R9618, R9619, R9620, R9621;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [81, 81];
  s0 -> s0 [82, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [81, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 80];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [81, 81];
  s0 -> s1 [82, 65535];
  s1 -> s1 [0, 80];
  s1 -> s2 [81, 81];
  s1 -> s1 [82, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R21 += 1 };
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R25 += 1 };
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R9542 += 1, R9543 += 1 };
  s0 -> s1 [0, 65535] { R9543 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R9543 += 1, R19 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 80] { R9545 += 1 };
  s0 -> s0 [0, 65535] { R9544 += 1, R9545 += 1 };
  s0 -> s2 [81, 81] { R9545 += 1 };
  s0 -> s3 [81, 81] { R9545 += 1 };
  s0 -> s1 [83, 65535] { R9545 += 1 };
  s1 -> s1 [0, 80] { R9545 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R9545 += 1 };
  s1 -> s3 [81, 81] { R9545 += 1 };
  s1 -> s1 [83, 65535] { R9545 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 81] { R9545 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [83, 65535] { R9545 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 80] { R9547 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R9546 += 1, R9547 += 1 };
  s0 -> s2 [81, 81] { R9547 += 1, R38 += 1 };
  s0 -> s3 [81, 81] { R9547 += 1, R38 += 1 };
  s0 -> s1 [82, 65535] { R9547 += 1, R38 += 1 };
  s1 -> s1 [0, 80] { R9547 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R9547 += 1, R38 += 1 };
  s1 -> s3 [81, 81] { R9547 += 1, R38 += 1 };
  s1 -> s1 [82, 65535] { R9547 += 1, R38 += 1 };
  s2 -> s2 [0, 65535] { R9547 += 1, R38 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 80] { R9549 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R9548 += 1, R9549 += 1 };
  s0 -> s2 [81, 81] { R9549 += 1, R40 += 1 };
  s0 -> s3 [81, 81] { R9549 += 1, R40 += 1 };
  s0 -> s1 [82, 65535] { R9549 += 1, R40 += 1 };
  s1 -> s1 [0, 80] { R9549 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R9549 += 1, R40 += 1 };
  s1 -> s3 [81, 81] { R9549 += 1, R40 += 1 };
  s1 -> s1 [82, 65535] { R9549 += 1, R40 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R9549 += 1, R40 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 80] { R9551 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R9550 += 1, R9551 += 1 };
  s0 -> s2 [81, 81] { R9551 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [81, 81] { R9551 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [82, 65535] { R9551 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 80] { R9551 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R9551 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [81, 81] { R9551 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [82, 65535] { R9551 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R9551 += 1, R42 += 1, R43 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 80] { R9553 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R9552 += 1, R9553 += 1 };
  s0 -> s2 [81, 81] { R9553 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [81, 81] { R9553 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [82, 65535] { R9553 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 80] { R9553 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R9553 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [81, 81] { R9553 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [82, 65535] { R9553 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R9553 += 1, R46 += 1, R47 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 80] { R9555 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R9554 += 1, R9555 += 1 };
  s0 -> s2 [81, 81] { R9555 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [81, 81] { R9555 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [82, 65535] { R9555 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 80] { R9555 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R9555 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [81, 81] { R9555 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [82, 65535] { R9555 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R9555 += 1, R52 += 1, R53 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 80] { R9557 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R9556 += 1, R9557 += 1 };
  s0 -> s2 [81, 81] { R9557 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [81, 81] { R9557 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [82, 65535] { R9557 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 80] { R9557 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R9557 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [81, 81] { R9557 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [82, 65535] { R9557 += 1, R56 += 1, R57 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R9557 += 1, R56 += 1, R57 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 80] { R9559 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R9558 += 1, R9559 += 1 };
  s0 -> s2 [81, 81] { R9559 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [81, 81] { R9559 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [82, 65535] { R9559 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 80] { R9559 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R9559 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [81, 81] { R9559 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [82, 65535] { R9559 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R9559 += 1, R62 += 1, R63 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 80] { R9579 += 1 };
  s0 -> s0 [0, 65535] { R9578 += 1, R9579 += 1 };
  s0 -> s2 [81, 81] { R9579 += 1 };
  s0 -> s1 [82, 65535] { R9579 += 1 };
  s1 -> s1 [0, 80] { R9579 += 1 };
  s1 -> s2 [81, 81] { R9579 += 1 };
  s1 -> s1 [82, 65535] { R9579 += 1 };
  s2 -> s2 [0, 65535] { R9579 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R9581 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R9580 += 1, R9581 += 1 };
  s1 -> s1 [0, 65535] { R9581 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 80] { R9583 += 1 };
  s0 -> s2 [0, 65535] { R9583 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R9582 += 1, R9583 += 1 };
  s0 -> s3 [81, 81] { R9583 += 1 };
  s0 -> s1 [82, 65535] { R9583 += 1 };
  s1 -> s1 [0, 80] { R9583 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [81, 81] { R9583 += 1 };
  s1 -> s1 [82, 65535] { R9583 += 1 };
  s2 -> s1 [0, 80] { R9583 += 1 };
  s2 -> s2 [0, 65535] { R9583 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [81, 81] { R9583 += 1 };
  s2 -> s1 [82, 65535] { R9583 += 1 };
  s3 -> s3 [0, 65535] { R9583 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 80] { R9585 += 1, R9523 += 1 };
  s0 -> s2 [0, 65535] { R9585 += 1, R9522 += 1, R9523 += 1 };
  s0 -> s0 [0, 65535] { R9584 += 1, R9585 += 1 };
  s0 -> s1 [82, 65535] { R9585 += 1, R9523 += 1 };
  s1 -> s1 [0, 80] { R9585 += 1, R9523 += 1 };
  s1 -> s1 [0, 65535] { R9585 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [82, 65535] { R9585 += 1, R9523 += 1 };
  s2 -> s1 [0, 80] { R9585 += 1, R9523 += 1 };
  s2 -> s2 [0, 65535] { R9585 += 1, R9522 += 1, R9523 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [82, 65535] { R9585 += 1, R9523 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R9587 += 1, R9525 += 1, R17 += 1 };
  s0 -> s0 [0, 65535] { R9586 += 1, R9587 += 1 };
  s0 -> s2 [0, 65535] { R9587 += 1, R9524 += 1, R9525 += 1 };
  s1 -> s1 [0, 65535] { R9587 += 1, R9525 += 1, R17 += 1 };
  s1 -> s4 [0, 65535] { R9587 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R9587 += 1, R9525 += 1, R17 += 1 };
  s2 -> s2 [0, 65535] { R9587 += 1, R9524 += 1, R9525 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R9587 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 65535] { R9589 += 1, R9527 += 1 };
  s0 -> s2 [0, 65535] { R9589 += 1, R9526 += 1, R9527 += 1 };
  s0 -> s0 [0, 65535] { R9588 += 1, R9589 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R9589 += 1, R9527 += 1 };
  s1 -> s4 [0, 65535] { R9589 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R9589 += 1, R9527 += 1 };
  s2 -> s2 [0, 65535] { R9589 += 1, R9526 += 1, R9527 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R9589 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R9591 += 1, R9528 += 1, R9529 += 1 };
  s0 -> s0 [0, 65535] { R9590 += 1, R9591 += 1 };
  s0 -> s2 [0, 65535] { R9591 += 1, R9529 += 1, R67 += 1 };
  s1 -> s1 [0, 65535] { R9591 += 1, R9528 += 1, R9529 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R9591 += 1, R9529 += 1, R67 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R9591 += 1, R9529 += 1, R67 += 1 };
  s2 -> s4 [0, 65535] { R9591 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R9591 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 81] { R9593 += 1, R9531 += 1 };
  s0 -> s2 [0, 65535] { R9593 += 1, R9530 += 1, R9531 += 1 };
  s0 -> s0 [0, 65535] { R9592 += 1, R9593 += 1 };
  s0 -> s3 [0, 65535] { R9593 += 1, R9531 += 1, R69 += 1 };
  s0 -> s1 [83, 65535] { R9593 += 1, R9531 += 1 };
  s1 -> s1 [0, 81] { R9593 += 1, R9531 += 1 };
  s1 -> s1 [0, 65535] { R9593 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [83, 65535] { R9593 += 1, R9531 += 1 };
  s2 -> s1 [0, 81] { R9593 += 1, R9531 += 1 };
  s2 -> s2 [0, 65535] { R9593 += 1, R9530 += 1, R9531 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R9593 += 1, R9531 += 1, R69 += 1 };
  s2 -> s1 [83, 65535] { R9593 += 1, R9531 += 1 };
  s3 -> s1 [0, 81] { R9593 += 1, R9531 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R9593 += 1, R9531 += 1, R69 += 1 };
  s3 -> s5 [0, 65535] { R9593 += 1 };
  s3 -> s1 [83, 65535] { R9593 += 1, R9531 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R9593 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 81] { R9595 += 1, R9533 += 1, R73 += 1 };
  s0 -> s2 [0, 65535] { R9595 += 1, R9532 += 1, R9533 += 1 };
  s0 -> s0 [0, 65535] { R9594 += 1, R9595 += 1 };
  s0 -> s3 [0, 65535] { R9595 += 1, R9533 += 1, R72 += 1, R73 += 1 };
  s0 -> s1 [83, 65535] { R9595 += 1, R9533 += 1, R73 += 1 };
  s1 -> s1 [0, 81] { R9595 += 1, R9533 += 1, R73 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R9595 += 1, R9533 += 1 };
  s1 -> s5 [0, 65535] { R9595 += 1 };
  s1 -> s1 [83, 65535] { R9595 += 1, R9533 += 1, R73 += 1 };
  s2 -> s1 [0, 81] { R9595 += 1, R9533 += 1, R73 += 1 };
  s2 -> s2 [0, 65535] { R9595 += 1, R9532 += 1, R9533 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R9595 += 1, R9533 += 1, R72 += 1, R73 += 1 };
  s2 -> s1 [83, 65535] { R9595 += 1, R9533 += 1, R73 += 1 };
  s3 -> s1 [0, 81] { R9595 += 1, R9533 += 1, R73 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R9595 += 1 };
  s3 -> s3 [0, 65535] { R9595 += 1, R9533 += 1, R72 += 1, R73 += 1 };
  s3 -> s1 [83, 65535] { R9595 += 1, R9533 += 1, R73 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R9595 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R9597 += 1, R9535 += 1 };
  s0 -> s0 [0, 65535] { R9596 += 1, R9597 += 1 };
  s0 -> s2 [0, 65535] { R9597 += 1, R9534 += 1, R9535 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R9597 += 1, R9535 += 1 };
  s1 -> s4 [0, 65535] { R9597 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R9597 += 1, R9535 += 1 };
  s2 -> s2 [0, 65535] { R9597 += 1, R9534 += 1, R9535 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R9597 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 82] { R9599 += 1, R9537 += 1, R8985 += 1 };
  s0 -> s0 [0, 65535] { R9598 += 1, R9599 += 1 };
  s0 -> s2 [0, 65535] { R9599 += 1, R9536 += 1, R9537 += 1 };
  s0 -> s3 [0, 65535] { R9599 += 1, R9537 += 1, R8984 += 1, R8985 += 1 };
  s0 -> s4 [84, 84] { R9599 += 1, R9537 += 1, R8985 += 1 };
  s0 -> s1 [85, 65535] { R9599 += 1, R9537 += 1, R8985 += 1 };
  s1 -> s1 [0, 82] { R9599 += 1, R9537 += 1, R8985 += 1 };
  s1 -> s4 [84, 84] { R9599 += 1, R9537 += 1, R8985 += 1 };
  s1 -> s1 [85, 65535] { R9599 += 1, R9537 += 1, R8985 += 1 };
  s2 -> s1 [0, 82] { R9599 += 1, R9537 += 1, R8985 += 1 };
  s2 -> s2 [0, 65535] { R9599 += 1, R9536 += 1, R9537 += 1 };
  s2 -> s3 [0, 65535] { R9599 += 1, R9537 += 1, R8984 += 1, R8985 += 1 };
  s2 -> s4 [84, 84] { R9599 += 1, R9537 += 1, R8985 += 1 };
  s2 -> s1 [85, 65535] { R9599 += 1, R9537 += 1, R8985 += 1 };
  s3 -> s1 [0, 82] { R9599 += 1, R9537 += 1, R8985 += 1 };
  s3 -> s3 [0, 65535] { R9599 += 1, R9537 += 1, R8984 += 1, R8985 += 1 };
  s3 -> s4 [84, 84] { R9599 += 1, R9537 += 1, R8985 += 1 };
  s3 -> s1 [85, 65535] { R9599 += 1, R9537 += 1, R8985 += 1 };
  s4 -> s4 [0, 82] { R9599 += 1, R9537 += 1, R8985 += 1 };
  s4 -> s5 [0, 65535] { R9599 += 1 };
  s4 -> s4 [0, 65535] { R9599 += 1, R9537 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [84, 65535] { R9599 += 1, R9537 += 1, R8985 += 1 };
  s5 -> s5 [0, 65535] { R9599 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s4, s5, s6;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R9601 += 1, R9539 += 1 };
  s0 -> s2 [0, 65535] { R9601 += 1, R9539 += 1, R9412 += 1, R9413 += 1 };
  s0 -> s0 [0, 65535] { R9600 += 1, R9601 += 1 };
  s0 -> s3 [0, 65535] { R9601 += 1, R9538 += 1, R9539 += 1 };
  s1 -> s1 [0, 65535] { R9601 += 1, R9539 += 1 };
  s1 -> s5 [0, 65535] { R9601 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R9601 += 1, R9539 += 1 };
  s2 -> s2 [0, 65535] { R9601 += 1, R9539 += 1, R9412 += 1, R9413 += 1 };
  s2 -> s5 [0, 65535] { R9601 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R9601 += 1, R9539 += 1 };
  s3 -> s2 [0, 65535] { R9601 += 1, R9539 += 1, R9412 += 1, R9413 += 1 };
  s3 -> s3 [0, 65535] { R9601 += 1, R9538 += 1, R9539 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R9601 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 81] { R9603 += 1, R9541 += 1, R9521 += 1 };
  s0 -> s2 [0, 65535] { R9603 += 1, R9540 += 1, R9541 += 1 };
  s0 -> s0 [0, 65535] { R9602 += 1, R9603 += 1 };
  s0 -> s1 [0, 65535] { R9603 += 1, R9541 += 1 };
  s0 -> s3 [82, 82] { R9603 += 1, R9541 += 1, R9521 += 1 };
  s0 -> s4 [82, 82] { R9603 += 1, R9541 += 1, R9521 += 1 };
  s0 -> s1 [85, 65535] { R9603 += 1, R9541 += 1, R9521 += 1 };
  s1 -> s1 [0, 81] { R9603 += 1, R9541 += 1, R9521 += 1 };
  s1 -> s1 [0, 65535] { R9603 += 1, R9541 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R9603 += 1 };
  s1 -> s3 [82, 82] { R9603 += 1, R9541 += 1, R9521 += 1 };
  s1 -> s4 [82, 82] { R9603 += 1, R9541 += 1, R9521 += 1 };
  s1 -> s1 [85, 65535] { R9603 += 1, R9541 += 1, R9521 += 1 };
  s2 -> s1 [0, 81] { R9603 += 1, R9541 += 1, R9521 += 1 };
  s2 -> s2 [0, 65535] { R9603 += 1, R9540 += 1, R9541 += 1 };
  s2 -> s1 [0, 65535] { R9603 += 1, R9541 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [82, 82] { R9603 += 1, R9541 += 1, R9521 += 1 };
  s2 -> s4 [82, 82] { R9603 += 1, R9541 += 1, R9521 += 1 };
  s2 -> s1 [85, 65535] { R9603 += 1, R9541 += 1, R9521 += 1 };
  s3 -> s3 [0, 65535] { R9603 += 1, R9541 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R9603 += 1 };
  s4 -> s4 [0, 82] { R9603 += 1, R9541 += 1, R9521 += 1 };
  s4 -> s4 [0, 65535] { R9603 += 1, R9541 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R9603 += 1 };
  s4 -> s4 [85, 65535] { R9603 += 1, R9541 += 1, R9521 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9603 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s0 [0, 65535] { R9604 += 1, R9605 += 1 };
  s0 -> s1 [0, 65535] { R9605 += 1, R9560 += 1, R9561 += 1 };
  s0 -> s2 [0, 65535] { R9605 += 1, R9561 += 1, R18 += 1 };
  s1 -> s1 [0, 65535] { R9605 += 1, R9560 += 1, R9561 += 1 };
  s1 -> s2 [0, 65535] { R9605 += 1, R9561 += 1, R18 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R9605 += 1 };
  s2 -> s2 [0, 65535] { R9605 += 1, R9561 += 1, R18 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R9605 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 80] { R9607 += 1, R9563 += 1 };
  s0 -> s2 [0, 65535] { R9607 += 1, R9562 += 1, R9563 += 1 };
  s0 -> s0 [0, 65535] { R9606 += 1, R9607 += 1 };
  s0 -> s3 [81, 81] { R9607 += 1, R9563 += 1 };
  s0 -> s4 [81, 81] { R9607 += 1, R9563 += 1 };
  s0 -> s5 [82, 82] { R9607 += 1, R9563 += 1 };
  s0 -> s1 [83, 65535] { R9607 += 1, R9563 += 1 };
  s1 -> s1 [0, 80] { R9607 += 1, R9563 += 1 };
  s1 -> s3 [81, 81] { R9607 += 1, R9563 += 1 };
  s1 -> s4 [81, 81] { R9607 += 1, R9563 += 1 };
  s1 -> s5 [82, 82] { R9607 += 1, R9563 += 1 };
  s1 -> s1 [83, 65535] { R9607 += 1, R9563 += 1 };
  s2 -> s1 [0, 80] { R9607 += 1, R9563 += 1 };
  s2 -> s2 [0, 65535] { R9607 += 1, R9562 += 1, R9563 += 1 };
  s2 -> s3 [81, 81] { R9607 += 1, R9563 += 1 };
  s2 -> s4 [81, 81] { R9607 += 1, R9563 += 1 };
  s2 -> s5 [82, 82] { R9607 += 1, R9563 += 1 };
  s2 -> s1 [83, 65535] { R9607 += 1, R9563 += 1 };
  s4 -> s4 [0, 81] { R9607 += 1, R9563 += 1 };
  s4 -> s7 [82, 82] { R9607 += 1, R9563 += 1 };
  s4 -> s4 [83, 65535] { R9607 += 1, R9563 += 1 };
  s5 -> s5 [0, 80] { R9607 += 1, R9563 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R9607 += 1 };
  s5 -> s7 [81, 81] { R9607 += 1, R9563 += 1 };
  s5 -> s8 [81, 81] { R9607 += 1, R9563 += 1 };
  s5 -> s5 [82, 65535] { R9607 += 1, R9563 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s9 [0, 65535] { R9607 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R9607 += 1, R9563 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R9607 += 1 };
  s9 -> s9 [0, 65535] { R9607 += 1 };
  s9 -> s6 [0, 65535];
  accepting s8, s5, s9, s6, s7;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 80] { R9609 += 1, R9565 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R9608 += 1, R9609 += 1 };
  s0 -> s2 [0, 65535] { R9609 += 1, R9564 += 1, R9565 += 1 };
  s0 -> s3 [81, 81] { R9609 += 1, R9565 += 1, R66 += 1 };
  s0 -> s4 [81, 81] { R9609 += 1, R9565 += 1, R66 += 1 };
  s0 -> s1 [82, 65535] { R9609 += 1, R9565 += 1, R66 += 1 };
  s1 -> s1 [0, 80] { R9609 += 1, R9565 += 1, R66 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R9609 += 1 };
  s1 -> s3 [81, 81] { R9609 += 1, R9565 += 1, R66 += 1 };
  s1 -> s4 [81, 81] { R9609 += 1, R9565 += 1, R66 += 1 };
  s1 -> s1 [82, 65535] { R9609 += 1, R9565 += 1, R66 += 1 };
  s2 -> s1 [0, 80] { R9609 += 1, R9565 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R9609 += 1, R9564 += 1, R9565 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [81, 81] { R9609 += 1, R9565 += 1, R66 += 1 };
  s2 -> s4 [81, 81] { R9609 += 1, R9565 += 1, R66 += 1 };
  s2 -> s1 [82, 65535] { R9609 += 1, R9565 += 1, R66 += 1 };
  s3 -> s6 [0, 65535] { R9609 += 1 };
  s3 -> s3 [0, 65535] { R9609 += 1, R9565 += 1, R66 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R9609 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9609 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 80] { R9611 += 1, R9567 += 1, R68 += 1 };
  s0 -> s0 [0, 65535] { R9610 += 1, R9611 += 1 };
  s0 -> s2 [0, 65535] { R9611 += 1, R9566 += 1, R9567 += 1 };
  s0 -> s3 [81, 81] { R9611 += 1, R9567 += 1, R68 += 1 };
  s0 -> s4 [81, 81] { R9611 += 1, R9567 += 1, R68 += 1 };
  s0 -> s1 [82, 65535] { R9611 += 1, R9567 += 1, R68 += 1 };
  s1 -> s1 [0, 80] { R9611 += 1, R9567 += 1, R68 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R9611 += 1 };
  s1 -> s3 [81, 81] { R9611 += 1, R9567 += 1, R68 += 1 };
  s1 -> s4 [81, 81] { R9611 += 1, R9567 += 1, R68 += 1 };
  s1 -> s1 [82, 65535] { R9611 += 1, R9567 += 1, R68 += 1 };
  s2 -> s1 [0, 80] { R9611 += 1, R9567 += 1, R68 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R9611 += 1, R9566 += 1, R9567 += 1 };
  s2 -> s3 [81, 81] { R9611 += 1, R9567 += 1, R68 += 1 };
  s2 -> s4 [81, 81] { R9611 += 1, R9567 += 1, R68 += 1 };
  s2 -> s1 [82, 65535] { R9611 += 1, R9567 += 1, R68 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R9611 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R9611 += 1 };
  s4 -> s4 [0, 65535] { R9611 += 1, R9567 += 1, R68 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9611 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 80] { R9613 += 1, R9569 += 1, R70 += 1, R71 += 1 };
  s0 -> s2 [0, 65535] { R9613 += 1, R9568 += 1, R9569 += 1 };
  s0 -> s0 [0, 65535] { R9612 += 1, R9613 += 1 };
  s0 -> s3 [81, 81] { R9613 += 1, R9569 += 1, R70 += 1, R71 += 1 };
  s0 -> s4 [81, 81] { R9613 += 1, R9569 += 1, R70 += 1, R71 += 1 };
  s0 -> s1 [82, 65535] { R9613 += 1, R9569 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 80] { R9613 += 1, R9569 += 1, R70 += 1, R71 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R9613 += 1 };
  s1 -> s3 [81, 81] { R9613 += 1, R9569 += 1, R70 += 1, R71 += 1 };
  s1 -> s4 [81, 81] { R9613 += 1, R9569 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [82, 65535] { R9613 += 1, R9569 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [0, 80] { R9613 += 1, R9569 += 1, R70 += 1, R71 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R9613 += 1, R9568 += 1, R9569 += 1 };
  s2 -> s3 [81, 81] { R9613 += 1, R9569 += 1, R70 += 1, R71 += 1 };
  s2 -> s4 [81, 81] { R9613 += 1, R9569 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [82, 65535] { R9613 += 1, R9569 += 1, R70 += 1, R71 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R9613 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R9613 += 1 };
  s4 -> s4 [0, 65535] { R9613 += 1, R9569 += 1, R70 += 1, R71 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9613 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 80] { R9615 += 1, R9571 += 1, R7707 += 1, R7708 += 1 };
  s0 -> s2 [0, 80] { R9615 += 1, R9571 += 1, R7706 += 1, R7707 += 1 };
  s0 -> s0 [0, 65535] { R9614 += 1, R9615 += 1 };
  s0 -> s3 [0, 65535] { R9615 += 1, R9570 += 1, R9571 += 1 };
  s0 -> s4 [81, 81] { R9615 += 1, R9571 += 1, R7706 += 1, R7707 += 1 };
  s0 -> s5 [81, 81] { R9615 += 1, R9571 += 1, R7707 += 1, R7708 += 1 };
  s0 -> s6 [81, 81] { R9615 += 1, R9571 += 1, R7706 += 1, R7707 += 1 };
  s0 -> s7 [81, 81] { R9615 += 1, R9571 += 1, R7707 += 1, R7708 += 1 };
  s0 -> s1 [82, 65535] { R9615 += 1, R9571 += 1, R7707 += 1, R7708 += 1 };
  s0 -> s2 [82, 65535] { R9615 += 1, R9571 += 1, R7706 += 1, R7707 += 1 };
  s1 -> s1 [0, 80] { R9615 += 1, R9571 += 1, R7707 += 1, R7708 += 1 };
  s1 -> s11 [0, 80] { R9615 += 1, R9571 += 1 };
  s1 -> s5 [81, 81] { R9615 += 1, R9571 += 1, R7707 += 1, R7708 += 1 };
  s1 -> s8 [81, 81] { R9615 += 1, R9571 += 1 };
  s1 -> s12 [81, 81] { R9615 += 1, R9571 += 1 };
  s1 -> s7 [81, 81] { R9615 += 1, R9571 += 1, R7707 += 1, R7708 += 1 };
  s1 -> s1 [82, 65535] { R9615 += 1, R9571 += 1, R7707 += 1, R7708 += 1 };
  s1 -> s11 [82, 65535] { R9615 += 1, R9571 += 1 };
  s2 -> s1 [0, 80] { R9615 += 1, R9571 += 1, R7707 += 1, R7708 += 1 };
  s2 -> s2 [0, 80] { R9615 += 1, R9571 += 1, R7706 += 1, R7707 += 1 };
  s2 -> s4 [81, 81] { R9615 += 1, R9571 += 1, R7706 += 1, R7707 += 1 };
  s2 -> s5 [81, 81] { R9615 += 1, R9571 += 1, R7707 += 1, R7708 += 1 };
  s2 -> s6 [81, 81] { R9615 += 1, R9571 += 1, R7706 += 1, R7707 += 1 };
  s2 -> s7 [81, 81] { R9615 += 1, R9571 += 1, R7707 += 1, R7708 += 1 };
  s2 -> s1 [82, 65535] { R9615 += 1, R9571 += 1, R7707 += 1, R7708 += 1 };
  s2 -> s2 [82, 65535] { R9615 += 1, R9571 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s1 [0, 80] { R9615 += 1, R9571 += 1, R7707 += 1, R7708 += 1 };
  s3 -> s2 [0, 80] { R9615 += 1, R9571 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s3 [0, 65535] { R9615 += 1, R9570 += 1, R9571 += 1 };
  s3 -> s4 [81, 81] { R9615 += 1, R9571 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s5 [81, 81] { R9615 += 1, R9571 += 1, R7707 += 1, R7708 += 1 };
  s3 -> s6 [81, 81] { R9615 += 1, R9571 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s7 [81, 81] { R9615 += 1, R9571 += 1, R7707 += 1, R7708 += 1 };
  s3 -> s1 [82, 65535] { R9615 += 1, R9571 += 1, R7707 += 1, R7708 += 1 };
  s3 -> s2 [82, 65535] { R9615 += 1, R9571 += 1, R7706 += 1, R7707 += 1 };
  s4 -> s4 [0, 65535] { R9615 += 1, R9571 += 1, R7706 += 1, R7707 += 1 };
  s4 -> s5 [0, 65535] { R9615 += 1, R9571 += 1, R7707 += 1, R7708 += 1 };
  s5 -> s5 [0, 65535] { R9615 += 1, R9571 += 1, R7707 += 1, R7708 += 1 };
  s5 -> s8 [0, 65535] { R9615 += 1, R9571 += 1 };
  s8 -> s9 [0, 65535] { R9615 += 1 };
  s8 -> s8 [0, 65535] { R9615 += 1, R9571 += 1 };
  s8 -> s10 [0, 65535];
  s9 -> s9 [0, 65535] { R9615 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s11 [0, 80] { R9615 += 1, R9571 += 1 };
  s11 -> s11 [0, 65535] { R9615 += 1 };
  s11 -> s10 [0, 65535];
  s11 -> s8 [81, 81] { R9615 += 1, R9571 += 1 };
  s11 -> s12 [81, 81] { R9615 += 1, R9571 += 1 };
  s11 -> s11 [82, 65535] { R9615 += 1, R9571 += 1 };
  s12 -> s10 [0, 65535];
  s12 -> s12 [0, 65535] { R9615 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 80] { R9617 += 1, R9573 += 1, R8982 += 1, R8983 += 1 };
  s0 -> s0 [0, 65535] { R9616 += 1, R9617 += 1 };
  s0 -> s2 [0, 65535] { R9617 += 1, R9572 += 1, R9573 += 1 };
  s0 -> s3 [81, 81] { R9617 += 1, R9573 += 1, R8982 += 1, R8983 += 1 };
  s0 -> s4 [81, 81] { R9617 += 1, R9573 += 1, R8982 += 1, R8983 += 1 };
  s0 -> s1 [82, 65535] { R9617 += 1, R9573 += 1, R8982 += 1, R8983 += 1 };
  s1 -> s1 [0, 80] { R9617 += 1, R9573 += 1, R8982 += 1, R8983 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R9617 += 1 };
  s1 -> s3 [81, 81] { R9617 += 1, R9573 += 1, R8982 += 1, R8983 += 1 };
  s1 -> s4 [81, 81] { R9617 += 1, R9573 += 1, R8982 += 1, R8983 += 1 };
  s1 -> s1 [82, 65535] { R9617 += 1, R9573 += 1, R8982 += 1, R8983 += 1 };
  s2 -> s1 [0, 80] { R9617 += 1, R9573 += 1, R8982 += 1, R8983 += 1 };
  s2 -> s2 [0, 65535] { R9617 += 1, R9572 += 1, R9573 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [81, 81] { R9617 += 1, R9573 += 1, R8982 += 1, R8983 += 1 };
  s2 -> s4 [81, 81] { R9617 += 1, R9573 += 1, R8982 += 1, R8983 += 1 };
  s2 -> s1 [82, 65535] { R9617 += 1, R9573 += 1, R8982 += 1, R8983 += 1 };
  s3 -> s3 [0, 65535] { R9617 += 1, R9573 += 1, R8982 += 1, R8983 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R9617 += 1 };
  s4 -> s4 [0, 65535] { R9617 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9617 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 80] { R9619 += 1, R9575 += 1, R9409 += 1, R9410 += 1 };
  s0 -> s2 [0, 80] { R9619 += 1, R9575 += 1, R9408 += 1, R9409 += 1 };
  s0 -> s3 [0, 65535] { R9619 += 1, R9574 += 1, R9575 += 1 };
  s0 -> s0 [0, 65535] { R9618 += 1, R9619 += 1 };
  s0 -> s4 [81, 81] { R9619 += 1, R9575 += 1, R9409 += 1, R9410 += 1 };
  s0 -> s5 [81, 81] { R9619 += 1, R9575 += 1, R9408 += 1, R9409 += 1 };
  s0 -> s6 [81, 81] { R9619 += 1, R9575 += 1, R9409 += 1, R9410 += 1 };
  s0 -> s7 [81, 81] { R9619 += 1, R9575 += 1, R9408 += 1, R9409 += 1 };
  s0 -> s1 [82, 65535] { R9619 += 1, R9575 += 1, R9409 += 1, R9410 += 1 };
  s0 -> s2 [82, 65535] { R9619 += 1, R9575 += 1, R9408 += 1, R9409 += 1 };
  s1 -> s1 [0, 80] { R9619 += 1, R9575 += 1, R9409 += 1, R9410 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s1 [0, 65535] { R9619 += 1 };
  s1 -> s4 [81, 81] { R9619 += 1, R9575 += 1, R9409 += 1, R9410 += 1 };
  s1 -> s6 [81, 81] { R9619 += 1, R9575 += 1, R9409 += 1, R9410 += 1 };
  s1 -> s1 [82, 65535] { R9619 += 1, R9575 += 1, R9409 += 1, R9410 += 1 };
  s2 -> s1 [0, 80] { R9619 += 1, R9575 += 1, R9409 += 1, R9410 += 1 };
  s2 -> s2 [0, 80] { R9619 += 1, R9575 += 1, R9408 += 1, R9409 += 1 };
  s2 -> s4 [81, 81] { R9619 += 1, R9575 += 1, R9409 += 1, R9410 += 1 };
  s2 -> s5 [81, 81] { R9619 += 1, R9575 += 1, R9408 += 1, R9409 += 1 };
  s2 -> s6 [81, 81] { R9619 += 1, R9575 += 1, R9409 += 1, R9410 += 1 };
  s2 -> s7 [81, 81] { R9619 += 1, R9575 += 1, R9408 += 1, R9409 += 1 };
  s2 -> s1 [82, 65535] { R9619 += 1, R9575 += 1, R9409 += 1, R9410 += 1 };
  s2 -> s2 [82, 65535] { R9619 += 1, R9575 += 1, R9408 += 1, R9409 += 1 };
  s3 -> s1 [0, 80] { R9619 += 1, R9575 += 1, R9409 += 1, R9410 += 1 };
  s3 -> s2 [0, 80] { R9619 += 1, R9575 += 1, R9408 += 1, R9409 += 1 };
  s3 -> s3 [0, 65535] { R9619 += 1, R9574 += 1, R9575 += 1 };
  s3 -> s4 [81, 81] { R9619 += 1, R9575 += 1, R9409 += 1, R9410 += 1 };
  s3 -> s5 [81, 81] { R9619 += 1, R9575 += 1, R9408 += 1, R9409 += 1 };
  s3 -> s6 [81, 81] { R9619 += 1, R9575 += 1, R9409 += 1, R9410 += 1 };
  s3 -> s7 [81, 81] { R9619 += 1, R9575 += 1, R9408 += 1, R9409 += 1 };
  s3 -> s1 [82, 65535] { R9619 += 1, R9575 += 1, R9409 += 1, R9410 += 1 };
  s3 -> s2 [82, 65535] { R9619 += 1, R9575 += 1, R9408 += 1, R9409 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s4 [0, 65535] { R9619 += 1, R9575 += 1, R9409 += 1, R9410 += 1 };
  s4 -> s9 [0, 65535] { R9619 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R9619 += 1 };
  s7 -> s4 [0, 65535] { R9619 += 1, R9575 += 1, R9409 += 1, R9410 += 1 };
  s7 -> s7 [0, 65535] { R9619 += 1, R9575 += 1, R9408 += 1, R9409 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R9619 += 1 };
  accepting s4, s8, s9, s6, s1;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 80] { R9621 += 1, R9577 += 1, R9519 += 1 };
  s0 -> s2 [0, 80] { R9621 += 1, R9577 += 1, R9518 += 1, R9519 += 1 };
  s0 -> s0 [0, 65535] { R9620 += 1, R9621 += 1 };
  s0 -> s3 [0, 65535] { R9621 += 1, R9576 += 1, R9577 += 1 };
  s0 -> s4 [81, 81] { R9621 += 1, R9577 += 1, R9518 += 1, R9519 += 1 };
  s0 -> s5 [81, 81] { R9621 += 1, R9577 += 1, R9518 += 1, R9519 += 1 };
  s0 -> s6 [81, 81] { R9621 += 1, R9577 += 1, R9519 += 1 };
  s0 -> s7 [81, 81] { R9621 += 1, R9577 += 1, R9519 += 1 };
  s0 -> s2 [82, 65535] { R9621 += 1, R9577 += 1, R9518 += 1, R9519 += 1 };
  s0 -> s1 [85, 65535] { R9621 += 1, R9577 += 1, R9519 += 1 };
  s1 -> s1 [0, 80] { R9621 += 1, R9577 += 1, R9519 += 1 };
  s1 -> s1 [0, 65535] { R9621 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s6 [81, 81] { R9621 += 1, R9577 += 1 };
  s1 -> s7 [81, 81] { R9621 += 1, R9577 += 1 };
  s1 -> s1 [82, 65535] { R9621 += 1, R9577 += 1 };
  s1 -> s1 [85, 65535] { R9621 += 1, R9577 += 1, R9519 += 1 };
  s2 -> s1 [0, 80] { R9621 += 1, R9577 += 1, R9519 += 1 };
  s2 -> s2 [0, 80] { R9621 += 1, R9577 += 1, R9518 += 1, R9519 += 1 };
  s2 -> s4 [81, 81] { R9621 += 1, R9577 += 1, R9518 += 1, R9519 += 1 };
  s2 -> s5 [81, 81] { R9621 += 1, R9577 += 1, R9518 += 1, R9519 += 1 };
  s2 -> s6 [81, 81] { R9621 += 1, R9577 += 1, R9519 += 1 };
  s2 -> s7 [81, 81] { R9621 += 1, R9577 += 1, R9519 += 1 };
  s2 -> s2 [82, 65535] { R9621 += 1, R9577 += 1, R9518 += 1, R9519 += 1 };
  s2 -> s1 [85, 65535] { R9621 += 1, R9577 += 1, R9519 += 1 };
  s3 -> s1 [0, 80] { R9621 += 1, R9577 += 1, R9519 += 1 };
  s3 -> s2 [0, 80] { R9621 += 1, R9577 += 1, R9518 += 1, R9519 += 1 };
  s3 -> s3 [0, 65535] { R9621 += 1, R9576 += 1, R9577 += 1 };
  s3 -> s4 [81, 81] { R9621 += 1, R9577 += 1, R9518 += 1, R9519 += 1 };
  s3 -> s5 [81, 81] { R9621 += 1, R9577 += 1, R9518 += 1, R9519 += 1 };
  s3 -> s6 [81, 81] { R9621 += 1, R9577 += 1, R9519 += 1 };
  s3 -> s7 [81, 81] { R9621 += 1, R9577 += 1, R9519 += 1 };
  s3 -> s2 [82, 65535] { R9621 += 1, R9577 += 1, R9518 += 1, R9519 += 1 };
  s3 -> s1 [85, 65535] { R9621 += 1, R9577 += 1, R9519 += 1 };
  s4 -> s6 [0, 81] { R9621 += 1, R9577 += 1, R9519 += 1 };
  s4 -> s4 [0, 65535] { R9621 += 1, R9577 += 1, R9518 += 1, R9519 += 1 };
  s4 -> s6 [85, 65535] { R9621 += 1, R9577 += 1, R9519 += 1 };
  s6 -> s6 [0, 81] { R9621 += 1, R9577 += 1, R9519 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R9621 += 1, R9577 += 1 };
  s6 -> s9 [0, 65535] { R9621 += 1 };
  s6 -> s6 [85, 65535] { R9621 += 1, R9577 += 1, R9519 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R9621 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R9621 += 1 };
  accepting s8, s9, s6, s1, s7;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [113, 113];
  accepting s1;
};
};
synchronised {  // Automata constraining c1
automaton c1_0 {
  init s0;
  s0 -> s1 [114, 114];
  accepting s1;
};
};
constraint R1 = R9537 && R2 = R9621 && R20 - R9621 = -1 && R21 = R9621 && R22 - R9621 = -1 && R23 = R9621 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R8985 + -1*R8983 - R53 = 0 && R52 + R8984 + R8982 = 0 && R9536 = 0 && R9562 = 0 && R9563 = 0 && R9570 = 0 && R9571 = 0 && R9574 = 0 && R9575 = 0 && R9576 = 0 && R9577 = 0 && R9578 = 0 && R9579 = R9621 && R9580 = 0 && R9581 = R9621 && R9582 = 0 && R9583 = R9621 && R9584 = 0 && R9585 = R9621 && R9586 = 0 && R9587 = R9621 && R9588 = 0 && R9589 = R9621 && R9590 = 0 && R9591 = R9621 && R9592 = 0 && R9593 = R9621 && R9594 = 0 && R9595 = R9621 && R9596 = 0 && R9597 = R9621 && R9598 = 0 && R9599 = R9621 && R9600 = 0 && R9601 = R9621 && R9602 = 0 && R9603 = R9621 && R9604 = 0 && R9605 = R9621 && R9606 = 0 && R9607 = R9621 && R9608 = 0 && R9609 = R9621 && R9610 = 0 && R9611 = R9621 && R9612 = 0 && R9613 = R9621 && R9614 = 0 && R9615 = R9621 && R9616 = 0 && R9617 = R9621 && R9618 = 0 && R9619 = R9621 && R9620 = 0 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R8985 + -1*R8983 - R53 < 1 && -1 < R9537 && 0 < R9621 && (R48 + R7711 + R7708 != 0 || ((R42 + R72 + R70 != 0 || R43 + R73 + R71 + -1*R8985 + -1*R8983 - R53 = 0 || R53 + R8985 + R8983 < 1) && (R42 + R72 + R70 = 0 || R53 + R8985 + R8983 < 1))) && (R48 + R7711 + R7708 != 0 || ((R46 + R7709 + R7706 != 0 || R47 + R7710 + R7707 + -1*R8985 + -1*R8983 - R53 = 0 || R53 + R8985 + R8983 < 1) && (R46 + R7709 + R7706 = 0 || R53 + R8985 + R8983 < 1))) && (R9522 != 0 || R9523 = R9537 || (R17 = 0 && R9537 = 0)) && (R9524 != 0 || R9525 = R9537 || (R17 = 0 && R9537 = 0)) && (R9526 != 0 || R9527 = R9537 || (R17 = 0 && R9537 = 0)) && (R9528 != 0 || R9529 = R9537 || (R17 = 0 && R9537 = 0)) && (R9530 != 0 || R9531 = R9537 || (R17 = 0 && R9537 = 0)) && (R9532 != 0 || R9533 = R9537 || (R17 = 0 && R9537 = 0)) && (R9534 != 0 || R9535 = R9537 || (R17 = 0 && R9537 = 0)) && (R9538 != 0 || R9537 = R9539 || (R17 = 0 && R9537 = 0)) && (R9540 != 0 || R9537 = R9541 || (R17 = 0 && R9537 = 0)) && (R18 = 0 || (R9560 = 0 && R9561 = 0)) && (R18 = 0 || (R9564 = 0 && R9565 = 0)) && (R18 = 0 || (R9566 = 0 && R9567 = 0)) && (R18 = 0 || (R9568 = 0 && R9569 = 0)) && (R18 = 0 || (R9572 = 0 && R9573 = 0)) && (R19 = 0 || (R9542 = 0 && R9543 = 0)) && (R19 = 0 || (R9544 = 0 && R9545 = 0)) && (R19 = 0 || (R9546 = 0 && R9547 = 0)) && (R19 = 0 || (R9548 = 0 && R9549 = 0)) && (R19 = 0 || (R9550 = 0 && R9551 = 0)) && (R19 = 0 || (R9552 = 0 && R9553 = 0)) && (R19 = 0 || (R9554 = 0 && R9555 = 0)) && (R19 = 0 || (R9556 = 0 && R9557 = 0)) && (R19 = 0 || (R9558 = 0 && R9559 = 0)) && (R48 + R7711 + R7708 = 0 || (R42 + R72 + R70 = 0 && R43 + R73 + R71 + -1*R8985 + -1*R8983 - R53 = 0)) && (R48 + R7711 + R7708 = 0 || (R46 + R7709 + R7706 = 0 && R47 + R7710 + R7707 + -1*R8985 + -1*R8983 - R53 = 0)) && (R58 + R9413 + R9410 = 0 || (R56 + R9411 + R9408 = 0 && R57 + R9412 + R9409 = 0)) && (R58 + R9413 + R9410 = 0 || (R62 + R9520 + R9518 = 0 && R63 + R9521 + R9519 = 0)) && (R9522 = 0 || (R17 = 0 && R9537 = 0)) && (R9524 = 0 || (R17 = 0 && R9537 = 0)) && (R9526 = 0 || (R17 = 0 && R9537 = 0)) && (R9528 = 0 || (R17 = 0 && R9537 = 0)) && (R9530 = 0 || (R17 = 0 && R9537 = 0)) && (R9532 = 0 || (R17 = 0 && R9537 = 0)) && (R9534 = 0 || (R17 = 0 && R9537 = 0)) && (R9538 = 0 || (R17 = 0 && R9537 = 0)) && (R9540 = 0 || (R17 = 0 && R9537 = 0));
// End of Parikh automata intersection problem
