// Parikh automata intersection problem, generated by OSTRICH+
counter int R11, R12, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R4, R486, R487, R488, R489, R490, R491, R492, R493, R494, R495, R496, R497, R498, R499, R500, R501, R502, R503, R504, R505, R506, R507, R508, R509, R510, R511, R512, R513, R514, R515, R516, R517, R518, R519, R520, R521, R522, R523, R524, R525, R526, R527, R528, R529, R530, R531, R532, R533, R534, R535, R536, R537, R538, R539, R540, R541, R542, R543, R544, R545, R546, R547, R548, R549, R550, R551, R890, R891, R892, R893, R894, R895, R896, R897, R898, R899, R900, R901, R902, R903, R904, R905, R906, R907, R908, R909, R910, R911, R912, R913, R914, R915, R916, R917, R918, R919, R920, R921, R922, R923, R924, R925, R926, R927, R928, R929, R930, R931, R932, R933, R934, R935, R936, R937, R938, R939, R940, R941, R942, R943, R944, R945, R946, R947, R948, R949, R950, R951, R952, R953, R954, R955;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 72];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [73, 73];
  s0 -> s1 [74, 65535];
  s1 -> s1 [0, 72];
  s1 -> s2 [73, 73];
  s1 -> s1 [74, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R21 += 1 };
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R25 += 1 };
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 72] { R899 += 1 };
  s0 -> s0 [0, 65535] { R898 += 1, R899 += 1 };
  s0 -> s1 [74, 65535] { R899 += 1 };
  s1 -> s1 [0, 72] { R899 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [74, 65535] { R899 += 1 };
  accepting s0, s1;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 65535] { R901 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R900 += 1, R901 += 1 };
  s1 -> s1 [0, 65535] { R901 += 1, R18 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 65535] { R903 += 1 };
  s0 -> s0 [0, 65535] { R902 += 1, R903 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R903 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_11 {
  init s0;
  s0 -> s0 [0, 65535] { R904 += 1, R905 += 1 };
  s0 -> s1 [0, 65535] { R905 += 1, R487 += 1 };
  s1 -> s1 [0, 65535] { R905 += 1, R487 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 73] { R907 += 1 };
  s0 -> s0 [0, 65535] { R906 += 1, R907 += 1 };
  s0 -> s2 [0, 65535] { R907 += 1, R489 += 1 };
  s0 -> s1 [75, 65535] { R907 += 1 };
  s1 -> s1 [0, 73] { R907 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [75, 65535] { R907 += 1 };
  s2 -> s1 [0, 73] { R907 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R907 += 1, R489 += 1 };
  s2 -> s1 [75, 65535] { R907 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_13 {
  init s0;
  s0 -> s0 [0, 65535] { R908 += 1, R909 += 1 };
  s0 -> s1 [0, 65535] { R909 += 1, R493 += 1, R494 += 1 };
  s0 -> s2 [0, 65535] { R909 += 1, R494 += 1, R495 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R909 += 1, R493 += 1, R494 += 1 };
  s1 -> s2 [0, 65535] { R909 += 1, R494 += 1, R495 += 1 };
  s2 -> s3 [0, 65535] { R909 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R909 += 1, R494 += 1, R495 += 1 };
  s3 -> s3 [0, 65535] { R909 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 73] { R911 += 1, R499 += 1 };
  s0 -> s2 [0, 65535] { R911 += 1, R498 += 1, R499 += 1 };
  s0 -> s0 [0, 65535] { R910 += 1, R911 += 1 };
  s0 -> s3 [74, 74] { R911 += 1, R499 += 1 };
  s0 -> s4 [74, 74] { R911 += 1, R499 += 1 };
  s0 -> s1 [89, 65535] { R911 += 1, R499 += 1 };
  s1 -> s1 [0, 73] { R911 += 1, R499 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R911 += 1 };
  s1 -> s3 [74, 74] { R911 += 1, R499 += 1 };
  s1 -> s4 [74, 74] { R911 += 1, R499 += 1 };
  s1 -> s1 [89, 65535] { R911 += 1, R499 += 1 };
  s2 -> s1 [0, 73] { R911 += 1, R499 += 1 };
  s2 -> s2 [0, 65535] { R911 += 1, R498 += 1, R499 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [74, 74] { R911 += 1, R499 += 1 };
  s2 -> s4 [74, 74] { R911 += 1, R499 += 1 };
  s2 -> s1 [89, 65535] { R911 += 1, R499 += 1 };
  s3 -> s3 [0, 74] { R911 += 1, R499 += 1 };
  s3 -> s3 [0, 65535] { R911 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [89, 65535] { R911 += 1, R499 += 1 };
  s4 -> s4 [0, 65535] { R911 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 73] { R913 += 1, R503 += 1 };
  s0 -> s0 [0, 65535] { R912 += 1, R913 += 1 };
  s0 -> s2 [0, 65535] { R913 += 1, R502 += 1, R503 += 1 };
  s0 -> s3 [74, 74] { R913 += 1, R503 += 1 };
  s0 -> s1 [75, 65535] { R913 += 1, R503 += 1 };
  s1 -> s1 [0, 73] { R913 += 1, R503 += 1 };
  s1 -> s3 [74, 74] { R913 += 1, R503 += 1 };
  s1 -> s1 [75, 65535] { R913 += 1, R503 += 1 };
  s2 -> s1 [0, 73] { R913 += 1, R503 += 1 };
  s2 -> s2 [0, 65535] { R913 += 1, R502 += 1, R503 += 1 };
  s2 -> s3 [74, 74] { R913 += 1, R503 += 1 };
  s2 -> s1 [75, 65535] { R913 += 1, R503 += 1 };
  s3 -> s4 [0, 65535] { R913 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R913 += 1, R503 += 1 };
  s4 -> s4 [0, 65535] { R913 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 65535] { R915 += 1, R508 += 1, R509 += 1 };
  s0 -> s0 [0, 65535] { R914 += 1, R915 += 1 };
  s0 -> s2 [0, 65535] { R915 += 1, R507 += 1, R508 += 1 };
  s1 -> s1 [0, 65535] { R915 += 1, R508 += 1, R509 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R915 += 1 };
  s2 -> s1 [0, 65535] { R915 += 1, R508 += 1, R509 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R915 += 1, R507 += 1, R508 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R915 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 73] { R917 += 1, R514 += 1 };
  s0 -> s2 [0, 65535] { R917 += 1, R513 += 1, R514 += 1 };
  s0 -> s3 [0, 65535] { R917 += 1, R514 += 1, R515 += 1 };
  s0 -> s0 [0, 65535] { R916 += 1, R917 += 1 };
  s0 -> s1 [75, 65535] { R917 += 1, R514 += 1 };
  s1 -> s1 [0, 73] { R917 += 1, R514 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R917 += 1 };
  s1 -> s1 [75, 65535] { R917 += 1, R514 += 1 };
  s2 -> s1 [0, 73] { R917 += 1, R514 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R917 += 1, R513 += 1, R514 += 1 };
  s2 -> s3 [0, 65535] { R917 += 1, R514 += 1, R515 += 1 };
  s2 -> s1 [75, 65535] { R917 += 1, R514 += 1 };
  s3 -> s1 [0, 73] { R917 += 1, R514 += 1 };
  s3 -> s4 [0, 65535] { R917 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R917 += 1, R514 += 1, R515 += 1 };
  s3 -> s1 [75, 65535] { R917 += 1, R514 += 1 };
  s4 -> s4 [0, 65535] { R917 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 73] { R919 += 1, R521 += 1, R523 += 1 };
  s0 -> s2 [0, 65535] { R919 += 1, R521 += 1, R522 += 1, R523 += 1 };
  s0 -> s0 [0, 65535] { R918 += 1, R919 += 1 };
  s0 -> s3 [0, 65535] { R919 += 1, R520 += 1, R521 += 1 };
  s0 -> s1 [75, 65535] { R919 += 1, R521 += 1, R523 += 1 };
  s1 -> s1 [0, 73] { R919 += 1, R521 += 1, R523 += 1 };
  s1 -> s5 [0, 65535] { R919 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R919 += 1, R521 += 1 };
  s1 -> s1 [75, 65535] { R919 += 1, R521 += 1, R523 += 1 };
  s2 -> s1 [0, 73] { R919 += 1, R521 += 1, R523 += 1 };
  s2 -> s2 [0, 65535] { R919 += 1, R521 += 1, R522 += 1, R523 += 1 };
  s2 -> s5 [0, 65535] { R919 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [75, 65535] { R919 += 1, R521 += 1, R523 += 1 };
  s3 -> s1 [0, 73] { R919 += 1, R521 += 1, R523 += 1 };
  s3 -> s2 [0, 65535] { R919 += 1, R521 += 1, R522 += 1, R523 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R919 += 1, R520 += 1, R521 += 1 };
  s3 -> s1 [75, 65535] { R919 += 1, R521 += 1, R523 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R919 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 65535] { R921 += 1, R530 += 1, R531 += 1, R532 += 1 };
  s0 -> s2 [0, 65535] { R921 += 1, R529 += 1, R530 += 1 };
  s0 -> s0 [0, 65535] { R920 += 1, R921 += 1 };
  s0 -> s3 [0, 65535] { R921 += 1, R530 += 1, R532 += 1, R533 += 1 };
  s1 -> s1 [0, 65535] { R921 += 1, R530 += 1, R531 += 1, R532 += 1 };
  s1 -> s5 [0, 65535] { R921 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [0, 65535] { R921 += 1, R530 += 1, R532 += 1, R533 += 1 };
  s2 -> s1 [0, 65535] { R921 += 1, R530 += 1, R531 += 1, R532 += 1 };
  s2 -> s2 [0, 65535] { R921 += 1, R529 += 1, R530 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R921 += 1, R530 += 1, R532 += 1, R533 += 1 };
  s3 -> s4 [0, 65535] { R921 += 1, R530 += 1 };
  s3 -> s5 [0, 65535] { R921 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R921 += 1, R530 += 1, R532 += 1, R533 += 1 };
  s4 -> s4 [0, 65535] { R921 += 1, R530 += 1 };
  s4 -> s5 [0, 65535] { R921 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R921 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 74] { R923 += 1, R539 += 1, R541 += 1 };
  s0 -> s2 [0, 65535] { R923 += 1, R538 += 1, R539 += 1 };
  s0 -> s0 [0, 65535] { R922 += 1, R923 += 1 };
  s0 -> s3 [0, 65535] { R923 += 1, R539 += 1, R540 += 1, R541 += 1 };
  s0 -> s1 [88, 65535] { R923 += 1, R539 += 1, R541 += 1 };
  s1 -> s1 [0, 74] { R923 += 1, R539 += 1, R541 += 1 };
  s1 -> s4 [0, 65535] { R923 += 1 };
  s1 -> s1 [0, 65535] { R923 += 1, R539 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [88, 65535] { R923 += 1, R539 += 1, R541 += 1 };
  s2 -> s1 [0, 74] { R923 += 1, R539 += 1, R541 += 1 };
  s2 -> s2 [0, 65535] { R923 += 1, R538 += 1, R539 += 1 };
  s2 -> s3 [0, 65535] { R923 += 1, R539 += 1, R540 += 1, R541 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [88, 65535] { R923 += 1, R539 += 1, R541 += 1 };
  s3 -> s1 [0, 74] { R923 += 1, R539 += 1, R541 += 1 };
  s3 -> s4 [0, 65535] { R923 += 1 };
  s3 -> s3 [0, 65535] { R923 += 1, R539 += 1, R540 += 1, R541 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [88, 65535] { R923 += 1, R539 += 1, R541 += 1 };
  s4 -> s4 [0, 65535] { R923 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R925 += 1, R548 += 1, R550 += 1, R551 += 1 };
  s0 -> s2 [0, 65535] { R925 += 1, R548 += 1, R549 += 1, R550 += 1 };
  s0 -> s3 [0, 65535] { R925 += 1, R547 += 1, R548 += 1 };
  s0 -> s0 [0, 65535] { R924 += 1, R925 += 1 };
  s1 -> s5 [0, 65535] { R925 += 1 };
  s1 -> s6 [0, 65535] { R925 += 1, R548 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R925 += 1, R548 += 1, R550 += 1, R551 += 1 };
  s2 -> s5 [0, 65535] { R925 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R925 += 1, R548 += 1, R550 += 1, R551 += 1 };
  s2 -> s2 [0, 65535] { R925 += 1, R548 += 1, R549 += 1, R550 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R925 += 1, R548 += 1, R550 += 1, R551 += 1 };
  s3 -> s2 [0, 65535] { R925 += 1, R548 += 1, R549 += 1, R550 += 1 };
  s3 -> s3 [0, 65535] { R925 += 1, R547 += 1, R548 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R925 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R925 += 1 };
  s6 -> s6 [0, 65535] { R925 += 1, R548 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s0 [0, 65535] { R926 += 1, R927 += 1 };
  s0 -> s1 [0, 65535] { R927 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R927 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R929 += 1, R19 += 1 };
  s0 -> s0 [0, 65535] { R928 += 1, R929 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R929 += 1, R19 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 72] { R931 += 1 };
  s0 -> s0 [0, 65535] { R930 += 1, R931 += 1 };
  s0 -> s2 [73, 73] { R931 += 1 };
  s0 -> s3 [73, 73] { R931 += 1 };
  s0 -> s4 [74, 74] { R931 += 1 };
  s0 -> s1 [75, 65535] { R931 += 1 };
  s1 -> s1 [0, 72] { R931 += 1 };
  s1 -> s2 [73, 73] { R931 += 1 };
  s1 -> s3 [73, 73] { R931 += 1 };
  s1 -> s4 [74, 74] { R931 += 1 };
  s1 -> s1 [75, 65535] { R931 += 1 };
  s3 -> s3 [0, 73] { R931 += 1 };
  s3 -> s6 [74, 74] { R931 += 1 };
  s3 -> s3 [75, 65535] { R931 += 1 };
  s4 -> s4 [0, 72] { R931 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s5 [73, 73] { R931 += 1 };
  s4 -> s6 [73, 73] { R931 += 1 };
  s4 -> s4 [74, 65535] { R931 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s7 [0, 65535];
  s6 -> s6 [0, 65535] { R931 += 1 };
  s7 -> s7 [0, 65535];
  accepting s4, s5, s6, s7;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 72] { R933 += 1, R486 += 1 };
  s0 -> s0 [0, 65535] { R932 += 1, R933 += 1 };
  s0 -> s2 [73, 73] { R933 += 1, R486 += 1 };
  s0 -> s3 [73, 73] { R933 += 1, R486 += 1 };
  s0 -> s1 [74, 65535] { R933 += 1, R486 += 1 };
  s1 -> s1 [0, 72] { R933 += 1, R486 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R933 += 1, R486 += 1 };
  s1 -> s3 [73, 73] { R933 += 1, R486 += 1 };
  s1 -> s1 [74, 65535] { R933 += 1, R486 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R933 += 1, R486 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 72] { R935 += 1, R488 += 1 };
  s0 -> s0 [0, 65535] { R934 += 1, R935 += 1 };
  s0 -> s2 [73, 73] { R935 += 1, R488 += 1 };
  s0 -> s3 [73, 73] { R935 += 1, R488 += 1 };
  s0 -> s1 [74, 65535] { R935 += 1, R488 += 1 };
  s1 -> s1 [0, 72] { R935 += 1, R488 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R935 += 1, R488 += 1 };
  s1 -> s3 [73, 73] { R935 += 1, R488 += 1 };
  s1 -> s1 [74, 65535] { R935 += 1, R488 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R935 += 1, R488 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 72] { R937 += 1, R490 += 1, R491 += 1 };
  s0 -> s0 [0, 65535] { R936 += 1, R937 += 1 };
  s0 -> s2 [73, 73] { R937 += 1, R490 += 1, R491 += 1 };
  s0 -> s3 [73, 73] { R937 += 1, R490 += 1, R491 += 1 };
  s0 -> s1 [74, 65535] { R937 += 1, R490 += 1, R491 += 1 };
  s1 -> s1 [0, 72] { R937 += 1, R490 += 1, R491 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R937 += 1, R490 += 1, R491 += 1 };
  s1 -> s3 [73, 73] { R937 += 1, R490 += 1, R491 += 1 };
  s1 -> s1 [74, 65535] { R937 += 1, R490 += 1, R491 += 1 };
  s2 -> s2 [0, 65535] { R937 += 1, R490 += 1, R491 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 72] { R939 += 1, R496 += 1, R497 += 1 };
  s0 -> s0 [0, 65535] { R938 += 1, R939 += 1 };
  s0 -> s2 [73, 73] { R939 += 1, R496 += 1, R497 += 1 };
  s0 -> s3 [73, 73] { R939 += 1, R496 += 1, R497 += 1 };
  s0 -> s1 [74, 65535] { R939 += 1, R496 += 1, R497 += 1 };
  s1 -> s1 [0, 72] { R939 += 1, R496 += 1, R497 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R939 += 1, R496 += 1, R497 += 1 };
  s1 -> s3 [73, 73] { R939 += 1, R496 += 1, R497 += 1 };
  s1 -> s1 [74, 65535] { R939 += 1, R496 += 1, R497 += 1 };
  s2 -> s2 [0, 65535] { R939 += 1, R496 += 1, R497 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 72] { R941 += 1, R500 += 1, R501 += 1 };
  s0 -> s0 [0, 65535] { R940 += 1, R941 += 1 };
  s0 -> s2 [73, 73] { R941 += 1, R500 += 1, R501 += 1 };
  s0 -> s3 [73, 73] { R941 += 1, R500 += 1, R501 += 1 };
  s0 -> s1 [74, 65535] { R941 += 1, R500 += 1, R501 += 1 };
  s1 -> s1 [0, 72] { R941 += 1, R500 += 1, R501 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R941 += 1, R500 += 1, R501 += 1 };
  s1 -> s3 [73, 73] { R941 += 1, R500 += 1, R501 += 1 };
  s1 -> s1 [74, 65535] { R941 += 1, R500 += 1, R501 += 1 };
  s2 -> s2 [0, 65535] { R941 += 1, R500 += 1, R501 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 72] { R943 += 1, R504 += 1, R505 += 1 };
  s0 -> s0 [0, 65535] { R942 += 1, R943 += 1 };
  s0 -> s2 [73, 73] { R943 += 1, R504 += 1, R505 += 1 };
  s0 -> s3 [73, 73] { R943 += 1, R504 += 1, R505 += 1 };
  s0 -> s1 [74, 65535] { R943 += 1, R504 += 1, R505 += 1 };
  s1 -> s1 [0, 72] { R943 += 1, R504 += 1, R505 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R943 += 1, R504 += 1, R505 += 1 };
  s1 -> s3 [73, 73] { R943 += 1, R504 += 1, R505 += 1 };
  s1 -> s1 [74, 65535] { R943 += 1, R504 += 1, R505 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R943 += 1, R504 += 1, R505 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 72] { R945 += 1, R510 += 1, R511 += 1 };
  s0 -> s0 [0, 65535] { R944 += 1, R945 += 1 };
  s0 -> s2 [73, 73] { R945 += 1, R510 += 1, R511 += 1 };
  s0 -> s3 [73, 73] { R945 += 1, R510 += 1, R511 += 1 };
  s0 -> s1 [74, 65535] { R945 += 1, R510 += 1, R511 += 1 };
  s1 -> s1 [0, 72] { R945 += 1, R510 += 1, R511 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R945 += 1, R510 += 1, R511 += 1 };
  s1 -> s3 [73, 73] { R945 += 1, R510 += 1, R511 += 1 };
  s1 -> s1 [74, 65535] { R945 += 1, R510 += 1, R511 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R945 += 1, R510 += 1, R511 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 72] { R947 += 1, R516 += 1, R517 += 1 };
  s0 -> s0 [0, 65535] { R946 += 1, R947 += 1 };
  s0 -> s2 [73, 73] { R947 += 1, R516 += 1, R517 += 1 };
  s0 -> s3 [73, 73] { R947 += 1, R516 += 1, R517 += 1 };
  s0 -> s1 [74, 65535] { R947 += 1, R516 += 1, R517 += 1 };
  s1 -> s1 [0, 72] { R947 += 1, R516 += 1, R517 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R947 += 1, R516 += 1, R517 += 1 };
  s1 -> s3 [73, 73] { R947 += 1, R516 += 1, R517 += 1 };
  s1 -> s1 [74, 65535] { R947 += 1, R516 += 1, R517 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R947 += 1, R516 += 1, R517 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 72] { R949 += 1, R524 += 1, R525 += 1 };
  s0 -> s0 [0, 65535] { R948 += 1, R949 += 1 };
  s0 -> s2 [73, 73] { R949 += 1, R524 += 1, R525 += 1 };
  s0 -> s3 [73, 73] { R949 += 1, R524 += 1, R525 += 1 };
  s0 -> s1 [74, 65535] { R949 += 1, R524 += 1, R525 += 1 };
  s1 -> s1 [0, 72] { R949 += 1, R524 += 1, R525 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R949 += 1, R524 += 1, R525 += 1 };
  s1 -> s3 [73, 73] { R949 += 1, R524 += 1, R525 += 1 };
  s1 -> s1 [74, 65535] { R949 += 1, R524 += 1, R525 += 1 };
  s2 -> s2 [0, 65535] { R949 += 1, R524 += 1, R525 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 72] { R951 += 1, R534 += 1, R535 += 1 };
  s0 -> s0 [0, 65535] { R950 += 1, R951 += 1 };
  s0 -> s2 [73, 73] { R951 += 1, R534 += 1, R535 += 1 };
  s0 -> s3 [73, 73] { R951 += 1, R534 += 1, R535 += 1 };
  s0 -> s1 [74, 65535] { R951 += 1, R534 += 1, R535 += 1 };
  s1 -> s1 [0, 72] { R951 += 1, R534 += 1, R535 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R951 += 1, R534 += 1, R535 += 1 };
  s1 -> s3 [73, 73] { R951 += 1, R534 += 1, R535 += 1 };
  s1 -> s1 [74, 65535] { R951 += 1, R534 += 1, R535 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R951 += 1, R534 += 1, R535 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 72] { R953 += 1, R542 += 1, R543 += 1 };
  s0 -> s0 [0, 65535] { R952 += 1, R953 += 1 };
  s0 -> s2 [73, 73] { R953 += 1, R542 += 1, R543 += 1 };
  s0 -> s3 [73, 73] { R953 += 1, R542 += 1, R543 += 1 };
  s0 -> s1 [74, 65535] { R953 += 1, R542 += 1, R543 += 1 };
  s1 -> s1 [0, 72] { R953 += 1, R542 += 1, R543 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R953 += 1, R542 += 1, R543 += 1 };
  s1 -> s3 [73, 73] { R953 += 1, R542 += 1, R543 += 1 };
  s1 -> s1 [74, 65535] { R953 += 1, R542 += 1, R543 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R953 += 1, R542 += 1, R543 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 72] { R955 += 1, R891 += 1, R893 += 1 };
  s0 -> s2 [0, 72] { R955 += 1, R890 += 1, R891 += 1 };
  s0 -> s3 [0, 72] { R955 += 1, R891 += 1, R892 += 1, R893 += 1 };
  s0 -> s0 [0, 65535] { R954 += 1, R955 += 1 };
  s0 -> s4 [73, 73] { R955 += 1, R890 += 1, R891 += 1 };
  s0 -> s5 [73, 73] { R955 += 1, R891 += 1, R893 += 1 };
  s0 -> s6 [73, 73] { R955 += 1, R891 += 1, R892 += 1, R893 += 1 };
  s0 -> s7 [73, 73] { R955 += 1, R891 += 1, R892 += 1, R893 += 1 };
  s0 -> s8 [73, 73] { R955 += 1, R891 += 1, R893 += 1 };
  s0 -> s9 [73, 73] { R955 += 1, R890 += 1, R891 += 1 };
  s0 -> s10 [74, 74] { R955 += 1, R891 += 1, R893 += 1 };
  s0 -> s2 [74, 65535] { R955 += 1, R890 += 1, R891 += 1 };
  s0 -> s3 [74, 65535] { R955 += 1, R891 += 1, R892 += 1, R893 += 1 };
  s0 -> s11 [88, 88] { R955 += 1, R891 += 1, R893 += 1 };
  s0 -> s1 [89, 65535] { R955 += 1, R891 += 1, R893 += 1 };
  s1 -> s1 [0, 72] { R955 += 1, R891 += 1, R893 += 1 };
  s1 -> s5 [73, 73] { R955 += 1, R891 += 1, R893 += 1 };
  s1 -> s8 [73, 73] { R955 += 1, R891 += 1, R893 += 1 };
  s1 -> s10 [74, 74] { R955 += 1, R891 += 1, R893 += 1 };
  s1 -> s11 [88, 88] { R955 += 1, R891 += 1, R893 += 1 };
  s1 -> s1 [89, 65535] { R955 += 1, R891 += 1, R893 += 1 };
  s2 -> s1 [0, 72] { R955 += 1, R891 += 1, R893 += 1 };
  s2 -> s2 [0, 72] { R955 += 1, R890 += 1, R891 += 1 };
  s2 -> s3 [0, 72] { R955 += 1, R891 += 1, R892 += 1, R893 += 1 };
  s2 -> s4 [73, 73] { R955 += 1, R890 += 1, R891 += 1 };
  s2 -> s5 [73, 73] { R955 += 1, R891 += 1, R893 += 1 };
  s2 -> s6 [73, 73] { R955 += 1, R891 += 1, R892 += 1, R893 += 1 };
  s2 -> s7 [73, 73] { R955 += 1, R891 += 1, R892 += 1, R893 += 1 };
  s2 -> s8 [73, 73] { R955 += 1, R891 += 1, R893 += 1 };
  s2 -> s9 [73, 73] { R955 += 1, R890 += 1, R891 += 1 };
  s2 -> s10 [74, 74] { R955 += 1, R891 += 1, R893 += 1 };
  s2 -> s2 [74, 65535] { R955 += 1, R890 += 1, R891 += 1 };
  s2 -> s3 [74, 65535] { R955 += 1, R891 += 1, R892 += 1, R893 += 1 };
  s2 -> s11 [88, 88] { R955 += 1, R891 += 1, R893 += 1 };
  s2 -> s1 [89, 65535] { R955 += 1, R891 += 1, R893 += 1 };
  s3 -> s1 [0, 72] { R955 += 1, R891 += 1, R893 += 1 };
  s3 -> s3 [0, 72] { R955 += 1, R891 += 1, R892 += 1, R893 += 1 };
  s3 -> s5 [73, 73] { R955 += 1, R891 += 1, R893 += 1 };
  s3 -> s6 [73, 73] { R955 += 1, R891 += 1, R892 += 1, R893 += 1 };
  s3 -> s7 [73, 73] { R955 += 1, R891 += 1, R892 += 1, R893 += 1 };
  s3 -> s8 [73, 73] { R955 += 1, R891 += 1, R893 += 1 };
  s3 -> s10 [74, 74] { R955 += 1, R891 += 1, R893 += 1 };
  s3 -> s3 [74, 65535] { R955 += 1, R891 += 1, R892 += 1, R893 += 1 };
  s3 -> s11 [88, 88] { R955 += 1, R891 += 1, R893 += 1 };
  s3 -> s1 [89, 65535] { R955 += 1, R891 += 1, R893 += 1 };
  s7 -> s8 [0, 73] { R955 += 1, R891 += 1, R893 += 1 };
  s7 -> s7 [0, 65535] { R955 += 1, R891 += 1, R892 += 1, R893 += 1 };
  s7 -> s24 [74, 74] { R955 += 1, R891 += 1, R893 += 1 };
  s7 -> s13 [88, 88] { R955 += 1, R891 += 1, R893 += 1 };
  s7 -> s8 [89, 65535] { R955 += 1, R891 += 1, R893 += 1 };
  s8 -> s8 [0, 73] { R955 += 1, R891 += 1, R893 += 1 };
  s8 -> s24 [74, 74] { R955 += 1, R891 += 1, R893 += 1 };
  s8 -> s13 [88, 88] { R955 += 1, R891 += 1, R893 += 1 };
  s8 -> s8 [89, 65535] { R955 += 1, R891 += 1, R893 += 1 };
  s9 -> s8 [0, 73] { R955 += 1, R891 += 1, R893 += 1 };
  s9 -> s7 [0, 65535] { R955 += 1, R891 += 1, R892 += 1, R893 += 1 };
  s9 -> s9 [0, 65535] { R955 += 1, R890 += 1, R891 += 1 };
  s9 -> s24 [74, 74] { R955 += 1, R891 += 1, R893 += 1 };
  s9 -> s13 [88, 88] { R955 += 1, R891 += 1, R893 += 1 };
  s9 -> s8 [89, 65535] { R955 += 1, R891 += 1, R893 += 1 };
  s10 -> s10 [0, 72] { R955 += 1, R891 += 1, R893 += 1 };
  s10 -> s24 [73, 73] { R955 += 1, R891 += 1, R893 += 1 };
  s10 -> s25 [73, 73] { R955 += 1, R891 += 1, R893 += 1 };
  s10 -> s10 [74, 74] { R955 += 1, R891 += 1, R893 += 1 };
  s10 -> s17 [88, 88] { R955 += 1, R891 += 1, R893 += 1 };
  s10 -> s10 [89, 65535] { R955 += 1, R891 += 1, R893 += 1 };
  s11 -> s12 [0, 72] { R955 += 1 };
  s11 -> s11 [0, 72] { R955 += 1, R891 += 1, R893 += 1 };
  s11 -> s13 [73, 73] { R955 += 1, R891 += 1 };
  s11 -> s14 [73, 73] { R955 += 1, R891 += 1 };
  s11 -> s15 [73, 73] { R955 += 1 };
  s11 -> s16 [73, 73] { R955 += 1 };
  s11 -> s17 [74, 74] { R955 += 1, R891 += 1, R893 += 1 };
  s11 -> s18 [74, 74] { R955 += 1, R891 += 1, R893 += 1 };
  s11 -> s12 [74, 65535] { R955 += 1 };
  s11 -> s11 [74, 65535] { R955 += 1, R891 += 1 };
  s11 -> s11 [88, 65535] { R955 += 1, R891 += 1, R893 += 1 };
  s12 -> s12 [0, 72] { R955 += 1 };
  s12 -> s12 [0, 65535];
  s12 -> s15 [73, 73] { R955 += 1 };
  s12 -> s16 [73, 73] { R955 += 1 };
  s12 -> s12 [74, 65535] { R955 += 1 };
  s13 -> s13 [0, 73] { R955 += 1, R891 += 1, R893 += 1 };
  s13 -> s13 [0, 65535] { R955 += 1, R891 += 1 };
  s13 -> s16 [0, 65535] { R955 += 1 };
  s13 -> s19 [74, 74] { R955 += 1, R891 += 1, R893 += 1 };
  s13 -> s22 [74, 74] { R955 += 1, R891 += 1, R893 += 1 };
  s13 -> s13 [88, 65535] { R955 += 1, R891 += 1, R893 += 1 };
  s15 -> s15 [0, 65535];
  s16 -> s23 [0, 65535];
  s16 -> s16 [0, 65535] { R955 += 1 };
  s17 -> s12 [0, 72] { R955 += 1 };
  s17 -> s17 [0, 72] { R955 += 1, R891 += 1, R893 += 1 };
  s17 -> s21 [73, 73] { R955 += 1, R891 += 1 };
  s17 -> s15 [73, 73] { R955 += 1 };
  s17 -> s16 [73, 73] { R955 += 1 };
  s17 -> s22 [73, 73] { R955 += 1, R891 += 1 };
  s17 -> s17 [74, 74] { R955 += 1, R891 += 1, R893 += 1 };
  s17 -> s12 [74, 65535] { R955 += 1 };
  s17 -> s17 [74, 65535] { R955 += 1, R891 += 1 };
  s17 -> s17 [88, 65535] { R955 += 1, R891 += 1, R893 += 1 };
  s18 -> s12 [0, 72] { R955 += 1 };
  s18 -> s18 [0, 72] { R955 += 1, R891 += 1 };
  s18 -> s19 [73, 73] { R955 += 1, R891 += 1 };
  s18 -> s15 [73, 73] { R955 += 1 };
  s18 -> s20 [73, 73] { R955 += 1, R891 += 1 };
  s18 -> s16 [73, 73] { R955 += 1 };
  s18 -> s12 [74, 65535] { R955 += 1 };
  s18 -> s18 [74, 65535] { R955 += 1, R891 += 1 };
  s19 -> s19 [0, 65535] { R955 += 1, R891 += 1 };
  s19 -> s16 [0, 65535] { R955 += 1 };
  s22 -> s22 [0, 74] { R955 += 1, R891 += 1, R893 += 1 };
  s22 -> s16 [0, 65535] { R955 += 1 };
  s22 -> s22 [0, 65535] { R955 += 1, R891 += 1 };
  s22 -> s22 [88, 65535] { R955 += 1, R891 += 1, R893 += 1 };
  s23 -> s23 [0, 65535];
  s24 -> s24 [0, 74] { R955 += 1, R891 += 1, R893 += 1 };
  s24 -> s22 [88, 88] { R955 += 1, R891 += 1, R893 += 1 };
  s24 -> s24 [89, 65535] { R955 += 1, R891 += 1, R893 += 1 };
  accepting s12, s15, s16, s23;
};
};
synchronised {  // Automata constraining P4
automaton P4_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
synchronised {  // Automata constraining P48
automaton P48_0 {
  init s0;
  s0 -> s1 [106, 106];
  accepting s1;
};
};
constraint R2 = R927 && R20 - R927 = -1 && R21 = R927 && R22 - R927 = -1 && R23 = R927 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R487 + R486 + -1*R895 + -1*R891 = 0 && R502 + R500 = 0 && R503 + R501 + -1*R895 + -1*R891 = 0 && R894 + R890 = 0 && R896 + R892 = 0 && R897 + R893 = 0 && R898 = 0 && R899 = R927 && R900 = 0 && R901 = R927 && R902 = 0 && R903 = R927 && R904 = 0 && R905 = R927 && R906 = 0 && R907 = R927 && R908 = 0 && R909 = R927 && R910 = 0 && R911 = R927 && R912 = 0 && R913 = R927 && R914 = 0 && R915 = R927 && R916 = 0 && R917 = R927 && R918 = 0 && R919 = R927 && R920 = 0 && R921 = R927 && R922 = 0 && R923 = R927 && R924 = 0 && R925 = R927 && R926 = 0 && R930 = 0 && R931 = 0 && R954 = 0 && R955 = 0 && R11 < 1 && R12 < 1 && R489 + R488 < 1 && -1*R509 + -1*R506 < 1 && R515 + R512 < 1 && -1*R895 + -1*R891 < 1 && 0 < R927 && (R507 + R504 != 0 || R508 + R505 + -1*R895 + -1*R891 = 0 || R509 + R506 < 1) && (R509 + R506 != 0 || R533 + R528 = 0 || (R522 + R518 = 0 && R523 + R519 = 0)) && (R509 + R506 != 0 || R533 + R528 = 0 || (R531 + R526 = 0 && R532 + R527 = 0)) && (R509 + R506 != 0 || R533 + R528 = 0 || (R540 + R536 = 0 && R541 + R537 = 0)) && (R509 + R506 != 0 || ((R507 + R504 != 0 || R508 + R505 + -1*R895 + -1*R891 = 0 || R895 + R891 < 1) && (R507 + R504 = 0 || R895 + R891 < 1))) && (R513 + R510 != 0 || R514 + R511 + -1*R895 + -1*R891 = 0 || (R509 + R506 = 0 && R895 + R891 = 0)) && (R520 + R516 != 0 || R521 + R517 + -1*R895 + -1*R891 = 0 || (R509 + R506 = 0 && R895 + R891 = 0)) && (R522 + R518 != 0 || R509 + R506 + -1*R523 + -1*R519 = 0 || R509 + R506 < 1) && (R529 + R524 != 0 || R530 + R525 + -1*R895 + -1*R891 = 0 || (R509 + R506 = 0 && R895 + R891 = 0)) && (R531 + R526 != 0 || R509 + R506 + -1*R532 + -1*R527 = 0 || R509 + R506 < 1) && (R538 + R534 != 0 || R539 + R535 + -1*R895 + -1*R891 = 0 || (R509 + R506 = 0 && R895 + R891 = 0)) && (R540 + R536 != 0 || R509 + R506 + -1*R541 + -1*R537 = 0 || R509 + R506 < 1) && (R547 + R542 != 0 || R548 + R543 + -1*R895 + -1*R891 = 0 || (R509 + R506 = 0 && R895 + R891 = 0)) && (R19 = 0 || (R928 = 0 && R929 = 0)) && (R19 = 0 || (R932 = 0 && R933 = 0)) && (R19 = 0 || (R934 = 0 && R935 = 0)) && (R19 = 0 || (R936 = 0 && R937 = 0)) && (R19 = 0 || (R938 = 0 && R939 = 0)) && (R19 = 0 || (R940 = 0 && R941 = 0)) && (R19 = 0 || (R942 = 0 && R943 = 0)) && (R19 = 0 || (R944 = 0 && R945 = 0)) && (R19 = 0 || (R946 = 0 && R947 = 0)) && (R19 = 0 || (R948 = 0 && R949 = 0)) && (R19 = 0 || (R950 = 0 && R951 = 0)) && (R19 = 0 || (R952 = 0 && R953 = 0)) && (R495 + R492 = 0 || (R493 + R490 = 0 && R494 + R491 = 0)) && (R495 + R492 = 0 || (R498 + R496 = 0 && R499 + R497 = 0)) && (R507 + R504 = 0 || R509 + R506 < 1) && (R513 + R510 = 0 || (R509 + R506 = 0 && R895 + R891 = 0)) && (R520 + R516 = 0 || (R509 + R506 = 0 && R895 + R891 = 0)) && (R522 + R518 = 0 || R509 + R506 < 1) && (R529 + R524 = 0 || (R509 + R506 = 0 && R895 + R891 = 0)) && (R531 + R526 = 0 || R509 + R506 < 1) && (R538 + R534 = 0 || (R509 + R506 = 0 && R895 + R891 = 0)) && (R540 + R536 = 0 || R509 + R506 < 1) && (R547 + R542 = 0 || (R509 + R506 = 0 && R895 + R891 = 0)) && (R551 + R546 = 0 || (R549 + R544 = 0 && R550 + R545 = 0));
// End of Parikh automata intersection problem
