// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R2, R263, R264, R3, R389, R390, R393, R394, R395, R396, R397, R398, R399, R4, R400, R401, R402, R403, R404, R405, R406, R407, R408, R409, R410, R411, R412, R413, R414, R415, R416, R417, R418, R419, R420, R421, R422, R423, R424, R425, R426, R427, R428, R429, R430, R431, R432, R433, R434, R435, R436, R437, R438, R439, R440, R441, R442, R443, R444, R445, R446, R447, R448, R449, R450, R451, R452, R5, R6, R7, R9;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [85, 85];
  s0 -> s0 [86, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [85, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R389 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 84];
  s0 -> s0 [0, 65535] { R390 += 1 };
  s0 -> s2 [85, 85];
  s0 -> s1 [86, 65535];
  s1 -> s1 [0, 84];
  s1 -> s2 [85, 85];
  s1 -> s1 [86, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R404 += 1 };
  s0 -> s0 [0, 65535] { R403 += 1, R404 += 1 };
  s0 -> s2 [9, 13] { R404 += 1 };
  s0 -> s1 [14, 31] { R404 += 1 };
  s0 -> s2 [32, 32] { R404 += 1 };
  s0 -> s1 [33, 65535] { R404 += 1 };
  s1 -> s1 [0, 65535] { R404 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R404 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R406 += 1, R6 += 1 };
  s0 -> s0 [0, 65535] { R405 += 1, R406 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R406 += 1, R6 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R408 += 1 };
  s0 -> s0 [0, 65535] { R407 += 1, R408 += 1 };
  s0 -> s2 [9, 13] { R408 += 1 };
  s0 -> s1 [14, 31] { R408 += 1 };
  s0 -> s2 [32, 32] { R408 += 1 };
  s0 -> s1 [33, 65535] { R408 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R408 += 1 };
  s2 -> s1 [0, 65535] { R408 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R410 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R409 += 1, R410 += 1 };
  s1 -> s1 [0, 65535] { R410 += 1, R7 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 84] { R424 += 1 };
  s0 -> s0 [0, 65535] { R423 += 1, R424 += 1 };
  s0 -> s1 [86, 65535] { R424 += 1 };
  s1 -> s1 [0, 84] { R424 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [86, 65535] { R424 += 1 };
  accepting s0, s1;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 65535] { R426 += 1, R393 += 1 };
  s0 -> s0 [0, 65535] { R425 += 1, R426 += 1 };
  s1 -> s1 [0, 65535] { R426 += 1, R393 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 85] { R428 += 1 };
  s0 -> s0 [0, 65535] { R427 += 1, R428 += 1 };
  s0 -> s1 [91, 65535] { R428 += 1 };
  s1 -> s1 [0, 85] { R428 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [91, 65535] { R428 += 1 };
  accepting s0, s1;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 65535] { R450 += 1, R394 += 1 };
  s0 -> s0 [0, 65535] { R449 += 1, R450 += 1 };
  s1 -> s1 [0, 65535] { R450 += 1, R394 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 84] { R452 += 1 };
  s0 -> s0 [0, 65535] { R451 += 1, R452 += 1 };
  s0 -> s2 [85, 85] { R452 += 1 };
  s0 -> s3 [85, 85] { R452 += 1 };
  s0 -> s1 [91, 65535] { R452 += 1 };
  s1 -> s1 [0, 84] { R452 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [85, 85] { R452 += 1 };
  s1 -> s3 [85, 85] { R452 += 1 };
  s1 -> s1 [91, 65535] { R452 += 1 };
  s2 -> s2 [0, 85] { R452 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [91, 65535] { R452 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
};
synchronised {  // Automata constraining P54
automaton P54_0 {
  init s0;
  s0 -> s1 [117, 117];
  accepting s1;
};
};
synchronised {  // Automata constraining value1
automaton value1_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s1 [44, 44];
  s0 -> s0 [45, 65535];
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value1_2 {
  init s0;
  s0 -> s1 [0, 43] { R264 += 1 };
  s0 -> s0 [0, 65535] { R263 += 1, R264 += 1 };
  s0 -> s2 [44, 44];
  s0 -> s1 [45, 65535] { R264 += 1 };
  s1 -> s1 [0, 43] { R264 += 1 };
  s1 -> s2 [44, 44];
  s1 -> s1 [45, 65535] { R264 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value1_3 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
automaton value1_4 {
  init s0;
  s0 -> s1 [0, 60] { R430 += 1 };
  s0 -> s0 [0, 65535] { R429 += 1, R430 += 1 };
  s0 -> s2 [61, 61] { R430 += 1 };
  s0 -> s1 [62, 65535] { R430 += 1 };
  s1 -> s1 [0, 60] { R430 += 1 };
  s1 -> s2 [61, 61] { R430 += 1 };
  s1 -> s1 [62, 65535] { R430 += 1 };
  s2 -> s2 [0, 65535] { R430 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value1_5 {
  init s0;
  s0 -> s0 [0, 65535] { R431 += 1, R432 += 1 };
  s0 -> s1 [0, 65535] { R432 += 1, R1 += 1 };
  s1 -> s1 [0, 65535] { R432 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_6 {
  init s0;
  s0 -> s1 [0, 60] { R434 += 1, R10 += 1 };
  s0 -> s0 [0, 65535] { R433 += 1, R434 += 1 };
  s0 -> s2 [0, 65535] { R434 += 1, R9 += 1, R10 += 1 };
  s0 -> s3 [61, 61] { R434 += 1 };
  s0 -> s1 [62, 65535] { R434 += 1, R10 += 1 };
  s1 -> s1 [0, 60] { R434 += 1, R10 += 1 };
  s1 -> s3 [61, 61] { R434 += 1 };
  s1 -> s1 [62, 65535] { R434 += 1, R10 += 1 };
  s2 -> s1 [0, 60] { R434 += 1, R10 += 1 };
  s2 -> s2 [0, 65535] { R434 += 1, R9 += 1, R10 += 1 };
  s2 -> s3 [61, 61] { R434 += 1 };
  s2 -> s1 [62, 65535] { R434 += 1, R10 += 1 };
  s3 -> s3 [0, 65535] { R434 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton value1_7 {
  init s0;
  s0 -> s1 [0, 65535] { R436 += 1 };
  s0 -> s0 [0, 65535] { R435 += 1, R436 += 1 };
  s1 -> s1 [0, 65535] { R436 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_8 {
  init s0;
  s0 -> s1 [0, 64] { R438 += 1, R412 += 1 };
  s0 -> s2 [0, 65535] { R438 += 1, R411 += 1, R412 += 1 };
  s0 -> s0 [0, 65535] { R437 += 1, R438 += 1 };
  s0 -> s3 [81, 81] { R438 += 1, R412 += 1 };
  s0 -> s1 [82, 65535] { R438 += 1, R412 += 1 };
  s1 -> s1 [0, 64] { R438 += 1, R412 += 1 };
  s1 -> s3 [81, 81] { R438 += 1, R412 += 1 };
  s1 -> s1 [82, 65535] { R438 += 1, R412 += 1 };
  s2 -> s1 [0, 64] { R438 += 1, R412 += 1 };
  s2 -> s2 [0, 65535] { R438 += 1, R411 += 1, R412 += 1 };
  s2 -> s3 [81, 81] { R438 += 1, R412 += 1 };
  s2 -> s1 [82, 65535] { R438 += 1, R412 += 1 };
  s3 -> s3 [0, 64] { R438 += 1, R412 += 1 };
  s3 -> s3 [0, 65535] { R438 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [81, 65535] { R438 += 1, R412 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton value1_9 {
  init s0;
  s0 -> s1 [0, 65535] { R440 += 1, R413 += 1, R414 += 1 };
  s0 -> s2 [0, 65535] { R440 += 1, R414 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R439 += 1, R440 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R440 += 1, R413 += 1, R414 += 1 };
  s1 -> s2 [0, 65535] { R440 += 1, R414 += 1, R0 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R440 += 1, R414 += 1, R0 += 1 };
  s2 -> s4 [0, 65535] { R440 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R440 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_10 {
  init s0;
  s0 -> s1 [0, 8] { R442 += 1, R416 += 1, R396 += 1 };
  s0 -> s2 [0, 65535] { R442 += 1, R416 += 1, R395 += 1, R396 += 1 };
  s0 -> s0 [0, 65535] { R441 += 1, R442 += 1 };
  s0 -> s3 [0, 65535] { R442 += 1, R415 += 1, R416 += 1 };
  s0 -> s4 [9, 13] { R442 += 1, R416 += 1, R396 += 1 };
  s0 -> s1 [14, 31] { R442 += 1, R416 += 1, R396 += 1 };
  s0 -> s4 [32, 32] { R442 += 1, R416 += 1, R396 += 1 };
  s0 -> s1 [33, 65535] { R442 += 1, R416 += 1, R396 += 1 };
  s1 -> s1 [0, 65535] { R442 += 1, R416 += 1, R396 += 1 };
  s1 -> s7 [0, 65535] { R442 += 1, R416 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R442 += 1 };
  s2 -> s1 [0, 8] { R442 += 1, R416 += 1, R396 += 1 };
  s2 -> s2 [0, 65535] { R442 += 1, R416 += 1, R395 += 1, R396 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R442 += 1 };
  s2 -> s4 [9, 13] { R442 += 1, R416 += 1, R396 += 1 };
  s2 -> s1 [14, 31] { R442 += 1, R416 += 1, R396 += 1 };
  s2 -> s4 [32, 32] { R442 += 1, R416 += 1, R396 += 1 };
  s2 -> s1 [33, 65535] { R442 += 1, R416 += 1, R396 += 1 };
  s3 -> s1 [0, 8] { R442 += 1, R416 += 1, R396 += 1 };
  s3 -> s2 [0, 65535] { R442 += 1, R416 += 1, R395 += 1, R396 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R442 += 1, R415 += 1, R416 += 1 };
  s3 -> s4 [9, 13] { R442 += 1, R416 += 1, R396 += 1 };
  s3 -> s1 [14, 31] { R442 += 1, R416 += 1, R396 += 1 };
  s3 -> s4 [32, 32] { R442 += 1, R416 += 1, R396 += 1 };
  s3 -> s1 [33, 65535] { R442 += 1, R416 += 1, R396 += 1 };
  s4 -> s1 [0, 65535] { R442 += 1, R416 += 1, R396 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R442 += 1 };
  s7 -> s7 [0, 65535] { R442 += 1, R416 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R442 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton value1_11 {
  init s0;
  s0 -> s0 [0, 65535] { R443 += 1, R444 += 1 };
  s0 -> s1 [0, 65535] { R444 += 1, R418 += 1, R397 += 1, R398 += 1 };
  s0 -> s2 [0, 65535] { R444 += 1, R418 += 1, R398 += 1, R4 += 1 };
  s0 -> s3 [0, 65535] { R444 += 1, R417 += 1, R418 += 1 };
  s1 -> s5 [0, 65535] { R444 += 1 };
  s1 -> s1 [0, 65535] { R444 += 1, R418 += 1, R397 += 1, R398 += 1 };
  s1 -> s2 [0, 65535] { R444 += 1, R418 += 1, R398 += 1, R4 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R444 += 1 };
  s2 -> s2 [0, 65535] { R444 += 1, R418 += 1, R398 += 1, R4 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s6 [0, 65535] { R444 += 1, R418 += 1 };
  s3 -> s1 [0, 65535] { R444 += 1, R418 += 1, R397 += 1, R398 += 1 };
  s3 -> s2 [0, 65535] { R444 += 1, R418 += 1, R398 += 1, R4 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R444 += 1, R417 += 1, R418 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R444 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R444 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R444 += 1, R418 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value1_12 {
  init s0;
  s0 -> s1 [0, 8] { R446 += 1, R420 += 1, R400 += 1 };
  s0 -> s2 [0, 65535] { R446 += 1, R420 += 1, R399 += 1, R400 += 1 };
  s0 -> s0 [0, 65535] { R445 += 1, R446 += 1 };
  s0 -> s3 [0, 65535] { R446 += 1, R419 += 1, R420 += 1 };
  s0 -> s4 [9, 13] { R446 += 1, R420 += 1, R400 += 1 };
  s0 -> s1 [14, 31] { R446 += 1, R420 += 1, R400 += 1 };
  s0 -> s4 [32, 32] { R446 += 1, R420 += 1, R400 += 1 };
  s0 -> s1 [33, 65535] { R446 += 1, R420 += 1, R400 += 1 };
  s1 -> s1 [0, 65535] { R446 += 1, R420 += 1, R400 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R446 += 1 };
  s1 -> s7 [0, 65535] { R446 += 1, R420 += 1 };
  s2 -> s1 [0, 8] { R446 += 1, R420 += 1, R400 += 1 };
  s2 -> s2 [0, 65535] { R446 += 1, R420 += 1, R399 += 1, R400 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R446 += 1 };
  s2 -> s4 [9, 13] { R446 += 1, R420 += 1, R400 += 1 };
  s2 -> s1 [14, 31] { R446 += 1, R420 += 1, R400 += 1 };
  s2 -> s4 [32, 32] { R446 += 1, R420 += 1, R400 += 1 };
  s2 -> s1 [33, 65535] { R446 += 1, R420 += 1, R400 += 1 };
  s3 -> s1 [0, 8] { R446 += 1, R420 += 1, R400 += 1 };
  s3 -> s2 [0, 65535] { R446 += 1, R420 += 1, R399 += 1, R400 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R446 += 1, R419 += 1, R420 += 1 };
  s3 -> s4 [9, 13] { R446 += 1, R420 += 1, R400 += 1 };
  s3 -> s1 [14, 31] { R446 += 1, R420 += 1, R400 += 1 };
  s3 -> s4 [32, 32] { R446 += 1, R420 += 1, R400 += 1 };
  s3 -> s1 [33, 65535] { R446 += 1, R420 += 1, R400 += 1 };
  s4 -> s1 [0, 65535] { R446 += 1, R420 += 1, R400 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R446 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R446 += 1 };
  s7 -> s7 [0, 65535] { R446 += 1, R420 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton value1_13 {
  init s0;
  s0 -> s1 [0, 65535] { R448 += 1, R422 += 1, R402 += 1, R5 += 1 };
  s0 -> s2 [0, 65535] { R448 += 1, R422 += 1, R401 += 1, R402 += 1 };
  s0 -> s0 [0, 65535] { R447 += 1, R448 += 1 };
  s0 -> s3 [0, 65535] { R448 += 1, R421 += 1, R422 += 1 };
  s1 -> s1 [0, 65535] { R448 += 1, R422 += 1, R402 += 1, R5 += 1 };
  s1 -> s5 [0, 65535] { R448 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R448 += 1, R422 += 1 };
  s2 -> s1 [0, 65535] { R448 += 1, R422 += 1, R402 += 1, R5 += 1 };
  s2 -> s2 [0, 65535] { R448 += 1, R422 += 1, R401 += 1, R402 += 1 };
  s2 -> s5 [0, 65535] { R448 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R448 += 1, R422 += 1, R402 += 1, R5 += 1 };
  s3 -> s2 [0, 65535] { R448 += 1, R422 += 1, R401 += 1, R402 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R448 += 1, R421 += 1, R422 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R448 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R448 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R448 += 1, R422 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R1 - R422 = 1 && R2 - R448 = 1 && R3 = R428 && R9 = 0 && R10 = R422 && R263 = 0 && R264 = R448 && R403 - R428 = -1 && R404 = R428 && R405 - R428 = -1 && R406 = R428 && R407 = 0 && R408 = 1 && R409 = 0 && R410 = 1 && R411 = 0 && R412 = R422 && R413 = 0 && R414 = R422 && R415 = 0 && R416 = R422 && R417 = 0 && R418 = R422 && R419 = 0 && R420 = R422 && R421 = 0 && R423 = 0 && R424 = R428 && R425 = 0 && R426 = R428 && R427 = 0 && R429 = 0 && R430 = R448 && R431 = 0 && R432 = R448 && R433 = 0 && R434 = R448 && R435 = 0 && R436 = R448 && R437 = 0 && R438 = R448 && R439 = 0 && R440 = R448 && R441 = 0 && R442 = R448 && R443 = 0 && R444 = R448 && R445 = 0 && R446 = R448 && R447 = 0 && R0 != 0 && R389 < 1 && R390 < 1 && -1 < R422 && 0 < R428 && -1 < R448 && (R4 != 0 || ((R0 != R396 || R395 - R396 = -1 || R396 < 0) && (R0 = R396 || R0 < 1))) && (R4 != 0 || ((R0 != R398 || R397 - R398 = -1 || R398 < 0) && (R0 = R398 || R0 < 1))) && (R399 != 0 || ((R5 != 0 || ((R0 != R400 || R400 = 1 || R400 < 0) && (R0 = R400 || R400 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R400 || R400 = 1 || R400 < 0) && (R400 != 1 || -1 < R0) && (R0 = R400 || R400 = 1))))) && (R401 != 0 || ((R5 != 0 || ((R0 != R402 || R402 = 1 || R402 < 0) && (R0 = R402 || R402 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R402 || R402 = 1 || R402 < 0) && (R402 != 1 || -1 < R0) && (R0 = R402 || R402 = 1))))) && (R4 = 0 || (R0 = R396 && R395 - R396 = -1)) && (R4 = 0 || (R0 = R398 && R397 - R398 = -1)) && (R394 = 0 || (R449 = 0 && R450 = 0 && R451 = 0 && R452 = 0)) && (R399 = 0 || (R5 = 0 && R0 < 0)) && (R401 = 0 || (R5 = 0 && R0 < 0));
// End of Parikh automata intersection problem
