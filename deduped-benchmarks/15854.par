// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R12, R13, R2, R4, R5;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s1 [44, 44];
  s0 -> s0 [45, 65535];
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 43] { R5 += 1 };
  s0 -> s0 [0, 65535] { R4 += 1, R5 += 1 };
  s0 -> s2 [44, 44];
  s0 -> s1 [45, 65535] { R5 += 1 };
  s1 -> s1 [0, 43] { R5 += 1 };
  s1 -> s2 [44, 44];
  s1 -> s1 [45, 65535] { R5 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value2_3 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 65535] { R11 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R10 += 1, R11 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R11 += 1, R0 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 60] { R13 += 1 };
  s0 -> s2 [0, 65535] { R13 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R12 += 1, R13 += 1 };
  s0 -> s3 [61, 61] { R13 += 1 };
  s0 -> s1 [62, 65535] { R13 += 1 };
  s1 -> s1 [0, 60] { R13 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [61, 61] { R13 += 1 };
  s1 -> s1 [62, 65535] { R13 += 1 };
  s2 -> s1 [0, 60] { R13 += 1 };
  s2 -> s2 [0, 65535] { R13 += 1, R2 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [61, 61] { R13 += 1 };
  s2 -> s1 [62, 65535] { R13 += 1 };
  s3 -> s3 [0, 65535] { R13 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
};
constraint R1 - R13 = 1 && R4 = 0 && R5 = R13 && R10 = 0 && R11 = R13 && R12 = 0 && R0 != 0 && R2 < 1 && -1 < R13;
// End of Parikh automata intersection problem
