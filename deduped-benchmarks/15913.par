// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R11522, R11523, R11524, R11525, R11526, R11527, R11528, R11529, R11530, R11531, R12, R12802, R12803, R12804, R12805, R13228, R13229, R13230, R13231, R13232, R13233, R13546, R13547, R13548, R13549, R13550, R13551, R13552, R13553, R13554, R13555, R13556, R13557, R13558, R13559, R13560, R13561, R13562, R13563, R13564, R13565, R13566, R13567, R13568, R13569, R13570, R13571, R13572, R13573, R13574, R13575, R13576, R13577, R13578, R13579, R13580, R13581, R13582, R13583, R13584, R13585, R13586, R13587, R13588, R13589, R13590, R13591, R13592, R13593, R13594, R13595, R13596, R13597, R13598, R13599, R13600, R13601, R13602, R13603, R13604, R13605, R13606, R13607, R13608, R13609, R13610, R13611, R13612, R13613, R13614, R13615, R13616, R13617, R13618, R13619, R13620, R13621, R13622, R13623, R13624, R13625, R13626, R13627, R13628, R13629, R13630, R13631, R13632, R13633, R13634, R13635, R13636, R13637, R13638, R13639, R13640, R13641, R13642, R13643, R13644, R13645, R13646, R13647, R13648, R13649, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [84, 84];
  s0 -> s0 [85, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [84, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 83];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [84, 84];
  s0 -> s1 [85, 65535];
  s1 -> s1 [0, 83];
  s1 -> s2 [84, 84];
  s1 -> s1 [85, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R21 += 1 };
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R25 += 1 };
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R13571 += 1, R19 += 1 };
  s0 -> s0 [0, 65535] { R13570 += 1, R13571 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R13571 += 1, R19 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 83] { R13573 += 1 };
  s0 -> s0 [0, 65535] { R13572 += 1, R13573 += 1 };
  s0 -> s2 [84, 84] { R13573 += 1 };
  s0 -> s3 [84, 84] { R13573 += 1 };
  s0 -> s1 [86, 65535] { R13573 += 1 };
  s1 -> s1 [0, 83] { R13573 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R13573 += 1 };
  s1 -> s3 [84, 84] { R13573 += 1 };
  s1 -> s1 [86, 65535] { R13573 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 84] { R13573 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [86, 65535] { R13573 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 83] { R13575 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R13574 += 1, R13575 += 1 };
  s0 -> s2 [84, 84] { R13575 += 1, R38 += 1 };
  s0 -> s3 [84, 84] { R13575 += 1, R38 += 1 };
  s0 -> s1 [85, 65535] { R13575 += 1, R38 += 1 };
  s1 -> s1 [0, 83] { R13575 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R13575 += 1, R38 += 1 };
  s1 -> s3 [84, 84] { R13575 += 1, R38 += 1 };
  s1 -> s1 [85, 65535] { R13575 += 1, R38 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R13575 += 1, R38 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 83] { R13577 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R13576 += 1, R13577 += 1 };
  s0 -> s2 [84, 84] { R13577 += 1, R40 += 1 };
  s0 -> s3 [84, 84] { R13577 += 1, R40 += 1 };
  s0 -> s1 [85, 65535] { R13577 += 1, R40 += 1 };
  s1 -> s1 [0, 83] { R13577 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R13577 += 1, R40 += 1 };
  s1 -> s3 [84, 84] { R13577 += 1, R40 += 1 };
  s1 -> s1 [85, 65535] { R13577 += 1, R40 += 1 };
  s2 -> s2 [0, 65535] { R13577 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 83] { R13579 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R13578 += 1, R13579 += 1 };
  s0 -> s2 [84, 84] { R13579 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [84, 84] { R13579 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [85, 65535] { R13579 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 83] { R13579 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R13579 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [84, 84] { R13579 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [85, 65535] { R13579 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535] { R13579 += 1, R42 += 1, R43 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 83] { R13581 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R13580 += 1, R13581 += 1 };
  s0 -> s2 [84, 84] { R13581 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [84, 84] { R13581 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [85, 65535] { R13581 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 83] { R13581 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R13581 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [84, 84] { R13581 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [85, 65535] { R13581 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R13581 += 1, R46 += 1, R47 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 83] { R13583 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R13582 += 1, R13583 += 1 };
  s0 -> s2 [84, 84] { R13583 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [84, 84] { R13583 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [85, 65535] { R13583 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 83] { R13583 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R13583 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [84, 84] { R13583 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [85, 65535] { R13583 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R13583 += 1, R52 += 1, R53 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 83] { R13585 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R13584 += 1, R13585 += 1 };
  s0 -> s2 [84, 84] { R13585 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [84, 84] { R13585 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [85, 65535] { R13585 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 83] { R13585 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R13585 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [84, 84] { R13585 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [85, 65535] { R13585 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535] { R13585 += 1, R56 += 1, R57 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 83] { R13587 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R13586 += 1, R13587 += 1 };
  s0 -> s2 [84, 84] { R13587 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [84, 84] { R13587 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [85, 65535] { R13587 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 83] { R13587 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R13587 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [84, 84] { R13587 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [85, 65535] { R13587 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R13587 += 1, R62 += 1, R63 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 83] { R13607 += 1 };
  s0 -> s0 [0, 65535] { R13606 += 1, R13607 += 1 };
  s0 -> s2 [84, 84] { R13607 += 1 };
  s0 -> s1 [85, 65535] { R13607 += 1 };
  s1 -> s1 [0, 83] { R13607 += 1 };
  s1 -> s2 [84, 84] { R13607 += 1 };
  s1 -> s1 [85, 65535] { R13607 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R13607 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R13608 += 1, R13609 += 1 };
  s0 -> s1 [0, 65535] { R13609 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R13609 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 83] { R13611 += 1 };
  s0 -> s0 [0, 65535] { R13610 += 1, R13611 += 1 };
  s0 -> s2 [0, 65535] { R13611 += 1, R8 += 1 };
  s0 -> s3 [84, 84] { R13611 += 1 };
  s0 -> s1 [85, 65535] { R13611 += 1 };
  s1 -> s1 [0, 83] { R13611 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [84, 84] { R13611 += 1 };
  s1 -> s1 [85, 65535] { R13611 += 1 };
  s2 -> s1 [0, 83] { R13611 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R13611 += 1, R8 += 1 };
  s2 -> s3 [84, 84] { R13611 += 1 };
  s2 -> s1 [85, 65535] { R13611 += 1 };
  s3 -> s3 [0, 65535] { R13611 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 83] { R13613 += 1, R13551 += 1 };
  s0 -> s2 [0, 65535] { R13613 += 1, R13550 += 1, R13551 += 1 };
  s0 -> s0 [0, 65535] { R13612 += 1, R13613 += 1 };
  s0 -> s1 [85, 65535] { R13613 += 1, R13551 += 1 };
  s1 -> s1 [0, 83] { R13613 += 1, R13551 += 1 };
  s1 -> s1 [0, 65535] { R13613 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [85, 65535] { R13613 += 1, R13551 += 1 };
  s2 -> s1 [0, 83] { R13613 += 1, R13551 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R13613 += 1, R13550 += 1, R13551 += 1 };
  s2 -> s1 [85, 65535] { R13613 += 1, R13551 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R13615 += 1, R13552 += 1, R13553 += 1 };
  s0 -> s0 [0, 65535] { R13614 += 1, R13615 += 1 };
  s0 -> s2 [0, 65535] { R13615 += 1, R13553 += 1, R17 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R13615 += 1, R13552 += 1, R13553 += 1 };
  s1 -> s2 [0, 65535] { R13615 += 1, R13553 += 1, R17 += 1 };
  s2 -> s3 [0, 65535] { R13615 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R13615 += 1, R13553 += 1, R17 += 1 };
  s3 -> s3 [0, 65535] { R13615 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 65535] { R13617 += 1, R13554 += 1, R13555 += 1 };
  s0 -> s2 [0, 65535] { R13617 += 1, R13555 += 1 };
  s0 -> s0 [0, 65535] { R13616 += 1, R13617 += 1 };
  s1 -> s1 [0, 65535] { R13617 += 1, R13554 += 1, R13555 += 1 };
  s1 -> s2 [0, 65535] { R13617 += 1, R13555 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R13617 += 1, R13555 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R13617 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R13617 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R13619 += 1, R13556 += 1, R13557 += 1 };
  s0 -> s2 [0, 65535] { R13619 += 1, R13557 += 1, R67 += 1 };
  s0 -> s0 [0, 65535] { R13618 += 1, R13619 += 1 };
  s1 -> s1 [0, 65535] { R13619 += 1, R13556 += 1, R13557 += 1 };
  s1 -> s2 [0, 65535] { R13619 += 1, R13557 += 1, R67 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R13619 += 1, R13557 += 1, R67 += 1 };
  s2 -> s3 [0, 65535] { R13619 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R13619 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 84] { R13621 += 1, R13559 += 1 };
  s0 -> s0 [0, 65535] { R13620 += 1, R13621 += 1 };
  s0 -> s2 [0, 65535] { R13621 += 1, R13558 += 1, R13559 += 1 };
  s0 -> s3 [0, 65535] { R13621 += 1, R13559 += 1, R69 += 1 };
  s0 -> s1 [86, 65535] { R13621 += 1, R13559 += 1 };
  s1 -> s1 [0, 84] { R13621 += 1, R13559 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R13621 += 1 };
  s1 -> s1 [86, 65535] { R13621 += 1, R13559 += 1 };
  s2 -> s1 [0, 84] { R13621 += 1, R13559 += 1 };
  s2 -> s2 [0, 65535] { R13621 += 1, R13558 += 1, R13559 += 1 };
  s2 -> s3 [0, 65535] { R13621 += 1, R13559 += 1, R69 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [86, 65535] { R13621 += 1, R13559 += 1 };
  s3 -> s1 [0, 84] { R13621 += 1, R13559 += 1 };
  s3 -> s3 [0, 65535] { R13621 += 1, R13559 += 1, R69 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R13621 += 1 };
  s3 -> s1 [86, 65535] { R13621 += 1, R13559 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R13621 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 84] { R13623 += 1, R13561 += 1, R11525 += 1 };
  s0 -> s0 [0, 65535] { R13622 += 1, R13623 += 1 };
  s0 -> s1 [0, 65535] { R13623 += 1, R13561 += 1 };
  s0 -> s2 [0, 65535] { R13623 += 1, R13560 += 1, R13561 += 1 };
  s0 -> s1 [86, 65535] { R13623 += 1, R13561 += 1, R11525 += 1 };
  s1 -> s1 [0, 84] { R13623 += 1, R13561 += 1, R11525 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R13623 += 1 };
  s1 -> s1 [0, 65535] { R13623 += 1, R13561 += 1 };
  s1 -> s1 [86, 65535] { R13623 += 1, R13561 += 1, R11525 += 1 };
  s2 -> s1 [0, 84] { R13623 += 1, R13561 += 1, R11525 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R13623 += 1, R13561 += 1 };
  s2 -> s2 [0, 65535] { R13623 += 1, R13560 += 1, R13561 += 1 };
  s2 -> s1 [86, 65535] { R13623 += 1, R13561 += 1, R11525 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R13623 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R13625 += 1, R13563 += 1, R11529 += 1, R11530 += 1 };
  s0 -> s2 [0, 65535] { R13625 += 1, R13563 += 1, R11530 += 1, R11531 += 1 };
  s0 -> s3 [0, 65535] { R13625 += 1, R13562 += 1, R13563 += 1 };
  s0 -> s0 [0, 65535] { R13624 += 1, R13625 += 1 };
  s1 -> s5 [0, 65535] { R13625 += 1 };
  s1 -> s1 [0, 65535] { R13625 += 1, R13563 += 1, R11529 += 1, R11530 += 1 };
  s1 -> s2 [0, 65535] { R13625 += 1, R13563 += 1, R11530 += 1, R11531 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R13625 += 1 };
  s2 -> s6 [0, 65535] { R13625 += 1, R13563 += 1 };
  s2 -> s2 [0, 65535] { R13625 += 1, R13563 += 1, R11530 += 1, R11531 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R13625 += 1, R13563 += 1, R11529 += 1, R11530 += 1 };
  s3 -> s2 [0, 65535] { R13625 += 1, R13563 += 1, R11530 += 1, R11531 += 1 };
  s3 -> s3 [0, 65535] { R13625 += 1, R13562 += 1, R13563 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R13625 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R13625 += 1 };
  s6 -> s6 [0, 65535] { R13625 += 1, R13563 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 85] { R13627 += 1, R13565 += 1, R12805 += 1 };
  s0 -> s0 [0, 65535] { R13626 += 1, R13627 += 1 };
  s0 -> s2 [0, 65535] { R13627 += 1, R13564 += 1, R13565 += 1 };
  s0 -> s3 [88, 88] { R13627 += 1, R13565 += 1, R12805 += 1 };
  s0 -> s1 [89, 65535] { R13627 += 1, R13565 += 1, R12805 += 1 };
  s1 -> s1 [0, 85] { R13627 += 1, R13565 += 1, R12805 += 1 };
  s1 -> s3 [88, 88] { R13627 += 1, R13565 += 1, R12805 += 1 };
  s1 -> s1 [89, 65535] { R13627 += 1, R13565 += 1, R12805 += 1 };
  s2 -> s1 [0, 85] { R13627 += 1, R13565 += 1, R12805 += 1 };
  s2 -> s2 [0, 65535] { R13627 += 1, R13564 += 1, R13565 += 1 };
  s2 -> s3 [88, 88] { R13627 += 1, R13565 += 1, R12805 += 1 };
  s2 -> s1 [89, 65535] { R13627 += 1, R13565 += 1, R12805 += 1 };
  s3 -> s3 [0, 85] { R13627 += 1, R13565 += 1, R12805 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R13627 += 1 };
  s3 -> s3 [0, 65535] { R13627 += 1, R13565 += 1 };
  s3 -> s3 [88, 65535] { R13627 += 1, R13565 += 1, R12805 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R13627 += 1 };
  accepting s3, s4, s5;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R13629 += 1, R13566 += 1, R13567 += 1 };
  s0 -> s2 [0, 65535] { R13629 += 1, R13567 += 1, R13232 += 1, R13233 += 1 };
  s0 -> s3 [0, 65535] { R13629 += 1, R13567 += 1 };
  s0 -> s0 [0, 65535] { R13628 += 1, R13629 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R13629 += 1, R13566 += 1, R13567 += 1 };
  s1 -> s2 [0, 65535] { R13629 += 1, R13567 += 1, R13232 += 1, R13233 += 1 };
  s1 -> s3 [0, 65535] { R13629 += 1, R13567 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R13629 += 1, R13567 += 1, R13232 += 1, R13233 += 1 };
  s2 -> s3 [0, 65535] { R13629 += 1, R13567 += 1 };
  s2 -> s5 [0, 65535] { R13629 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R13629 += 1, R13567 += 1 };
  s3 -> s5 [0, 65535] { R13629 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R13629 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 85] { R13631 += 1, R13569 += 1, R13549 += 1 };
  s0 -> s2 [0, 65535] { R13631 += 1, R13568 += 1, R13569 += 1 };
  s0 -> s1 [0, 65535] { R13631 += 1, R13569 += 1 };
  s0 -> s0 [0, 65535] { R13630 += 1, R13631 += 1 };
  s0 -> s1 [89, 65535] { R13631 += 1, R13569 += 1, R13549 += 1 };
  s1 -> s1 [0, 85] { R13631 += 1, R13569 += 1, R13549 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R13631 += 1, R13569 += 1 };
  s1 -> s4 [0, 65535] { R13631 += 1 };
  s1 -> s1 [89, 65535] { R13631 += 1, R13569 += 1, R13549 += 1 };
  s2 -> s1 [0, 85] { R13631 += 1, R13569 += 1, R13549 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R13631 += 1, R13568 += 1, R13569 += 1 };
  s2 -> s1 [0, 65535] { R13631 += 1, R13569 += 1 };
  s2 -> s1 [89, 65535] { R13631 += 1, R13569 += 1, R13549 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R13631 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R13633 += 1, R13588 += 1, R13589 += 1 };
  s0 -> s0 [0, 65535] { R13632 += 1, R13633 += 1 };
  s0 -> s2 [0, 65535] { R13633 += 1, R13589 += 1, R18 += 1 };
  s1 -> s1 [0, 65535] { R13633 += 1, R13588 += 1, R13589 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R13633 += 1, R13589 += 1, R18 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R13633 += 1, R13589 += 1, R18 += 1 };
  s2 -> s4 [0, 65535] { R13633 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R13633 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 83] { R13635 += 1, R13591 += 1 };
  s0 -> s0 [0, 65535] { R13634 += 1, R13635 += 1 };
  s0 -> s2 [0, 65535] { R13635 += 1, R13590 += 1, R13591 += 1 };
  s0 -> s3 [84, 84] { R13635 += 1, R13591 += 1 };
  s0 -> s4 [84, 84] { R13635 += 1, R13591 += 1 };
  s0 -> s5 [85, 85] { R13635 += 1, R13591 += 1 };
  s0 -> s1 [86, 65535] { R13635 += 1, R13591 += 1 };
  s1 -> s1 [0, 83] { R13635 += 1, R13591 += 1 };
  s1 -> s3 [84, 84] { R13635 += 1, R13591 += 1 };
  s1 -> s4 [84, 84] { R13635 += 1, R13591 += 1 };
  s1 -> s5 [85, 85] { R13635 += 1, R13591 += 1 };
  s1 -> s1 [86, 65535] { R13635 += 1, R13591 += 1 };
  s2 -> s1 [0, 83] { R13635 += 1, R13591 += 1 };
  s2 -> s2 [0, 65535] { R13635 += 1, R13590 += 1, R13591 += 1 };
  s2 -> s3 [84, 84] { R13635 += 1, R13591 += 1 };
  s2 -> s4 [84, 84] { R13635 += 1, R13591 += 1 };
  s2 -> s5 [85, 85] { R13635 += 1, R13591 += 1 };
  s2 -> s1 [86, 65535] { R13635 += 1, R13591 += 1 };
  s3 -> s3 [0, 84] { R13635 += 1, R13591 += 1 };
  s3 -> s7 [85, 85] { R13635 += 1, R13591 += 1 };
  s3 -> s3 [86, 65535] { R13635 += 1, R13591 += 1 };
  s5 -> s5 [0, 83] { R13635 += 1, R13591 += 1 };
  s5 -> s5 [0, 65535] { R13635 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [84, 84] { R13635 += 1, R13591 += 1 };
  s5 -> s8 [84, 84] { R13635 += 1, R13591 += 1 };
  s5 -> s5 [85, 65535] { R13635 += 1, R13591 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R13635 += 1, R13591 += 1 };
  s7 -> s9 [0, 65535] { R13635 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R13635 += 1 };
  s8 -> s6 [0, 65535];
  s9 -> s9 [0, 65535] { R13635 += 1 };
  s9 -> s6 [0, 65535];
  accepting s8, s5, s9, s6, s7;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 83] { R13637 += 1, R13593 += 1, R66 += 1 };
  s0 -> s2 [0, 65535] { R13637 += 1, R13592 += 1, R13593 += 1 };
  s0 -> s0 [0, 65535] { R13636 += 1, R13637 += 1 };
  s0 -> s3 [84, 84] { R13637 += 1, R13593 += 1, R66 += 1 };
  s0 -> s4 [84, 84] { R13637 += 1, R13593 += 1, R66 += 1 };
  s0 -> s1 [85, 65535] { R13637 += 1, R13593 += 1, R66 += 1 };
  s1 -> s1 [0, 83] { R13637 += 1, R13593 += 1, R66 += 1 };
  s1 -> s1 [0, 65535] { R13637 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [84, 84] { R13637 += 1, R13593 += 1, R66 += 1 };
  s1 -> s4 [84, 84] { R13637 += 1, R13593 += 1, R66 += 1 };
  s1 -> s1 [85, 65535] { R13637 += 1, R13593 += 1, R66 += 1 };
  s2 -> s1 [0, 83] { R13637 += 1, R13593 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R13637 += 1, R13592 += 1, R13593 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [84, 84] { R13637 += 1, R13593 += 1, R66 += 1 };
  s2 -> s4 [84, 84] { R13637 += 1, R13593 += 1, R66 += 1 };
  s2 -> s1 [85, 65535] { R13637 += 1, R13593 += 1, R66 += 1 };
  s3 -> s3 [0, 65535] { R13637 += 1, R13593 += 1, R66 += 1 };
  s3 -> s6 [0, 65535] { R13637 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R13637 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R13637 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 83] { R13639 += 1, R13595 += 1, R68 += 1 };
  s0 -> s2 [0, 65535] { R13639 += 1, R13594 += 1, R13595 += 1 };
  s0 -> s0 [0, 65535] { R13638 += 1, R13639 += 1 };
  s0 -> s3 [84, 84] { R13639 += 1, R13595 += 1, R68 += 1 };
  s0 -> s4 [84, 84] { R13639 += 1, R13595 += 1, R68 += 1 };
  s0 -> s1 [85, 65535] { R13639 += 1, R13595 += 1, R68 += 1 };
  s1 -> s1 [0, 83] { R13639 += 1, R13595 += 1, R68 += 1 };
  s1 -> s1 [0, 65535] { R13639 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [84, 84] { R13639 += 1, R13595 += 1, R68 += 1 };
  s1 -> s4 [84, 84] { R13639 += 1, R13595 += 1, R68 += 1 };
  s1 -> s1 [85, 65535] { R13639 += 1, R13595 += 1, R68 += 1 };
  s2 -> s1 [0, 83] { R13639 += 1, R13595 += 1, R68 += 1 };
  s2 -> s2 [0, 65535] { R13639 += 1, R13594 += 1, R13595 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [84, 84] { R13639 += 1, R13595 += 1, R68 += 1 };
  s2 -> s4 [84, 84] { R13639 += 1, R13595 += 1, R68 += 1 };
  s2 -> s1 [85, 65535] { R13639 += 1, R13595 += 1, R68 += 1 };
  s3 -> s3 [0, 65535] { R13639 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R13639 += 1, R13595 += 1, R68 += 1 };
  s4 -> s5 [0, 65535] { R13639 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R13639 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 83] { R13641 += 1, R13597 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s2 [0, 83] { R13641 += 1, R13597 += 1, R11523 += 1 };
  s0 -> s3 [0, 65535] { R13641 += 1, R13596 += 1, R13597 += 1 };
  s0 -> s0 [0, 65535] { R13640 += 1, R13641 += 1 };
  s0 -> s4 [84, 84] { R13641 += 1, R13597 += 1, R11523 += 1 };
  s0 -> s5 [84, 84] { R13641 += 1, R13597 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s6 [84, 84] { R13641 += 1, R13597 += 1, R11523 += 1 };
  s0 -> s7 [84, 84] { R13641 += 1, R13597 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s1 [85, 65535] { R13641 += 1, R13597 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s2 [86, 65535] { R13641 += 1, R13597 += 1, R11523 += 1 };
  s1 -> s1 [0, 83] { R13641 += 1, R13597 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s2 [0, 83] { R13641 += 1, R13597 += 1, R11523 += 1 };
  s1 -> s4 [84, 84] { R13641 += 1, R13597 += 1, R11523 += 1 };
  s1 -> s5 [84, 84] { R13641 += 1, R13597 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s6 [84, 84] { R13641 += 1, R13597 += 1, R11523 += 1 };
  s1 -> s7 [84, 84] { R13641 += 1, R13597 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s1 [85, 65535] { R13641 += 1, R13597 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s2 [86, 65535] { R13641 += 1, R13597 += 1, R11523 += 1 };
  s2 -> s2 [0, 83] { R13641 += 1, R13597 += 1, R11523 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R13641 += 1 };
  s2 -> s4 [84, 84] { R13641 += 1, R13597 += 1 };
  s2 -> s6 [84, 84] { R13641 += 1, R13597 += 1 };
  s2 -> s2 [85, 65535] { R13641 += 1, R13597 += 1 };
  s2 -> s2 [86, 65535] { R13641 += 1, R13597 += 1, R11523 += 1 };
  s3 -> s1 [0, 83] { R13641 += 1, R13597 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s2 [0, 83] { R13641 += 1, R13597 += 1, R11523 += 1 };
  s3 -> s3 [0, 65535] { R13641 += 1, R13596 += 1, R13597 += 1 };
  s3 -> s4 [84, 84] { R13641 += 1, R13597 += 1, R11523 += 1 };
  s3 -> s5 [84, 84] { R13641 += 1, R13597 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s6 [84, 84] { R13641 += 1, R13597 += 1, R11523 += 1 };
  s3 -> s7 [84, 84] { R13641 += 1, R13597 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s1 [85, 65535] { R13641 += 1, R13597 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s2 [86, 65535] { R13641 += 1, R13597 += 1, R11523 += 1 };
  s4 -> s4 [0, 84] { R13641 += 1, R13597 += 1, R11523 += 1 };
  s4 -> s4 [0, 65535] { R13641 += 1, R13597 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s9 [0, 65535] { R13641 += 1 };
  s4 -> s4 [86, 65535] { R13641 += 1, R13597 += 1, R11523 += 1 };
  s6 -> s6 [0, 65535] { R13641 += 1 };
  s6 -> s8 [0, 65535];
  s7 -> s4 [0, 84] { R13641 += 1, R13597 += 1, R11523 += 1 };
  s7 -> s7 [0, 65535] { R13641 += 1, R13597 += 1, R11522 += 1, R11523 += 1 };
  s7 -> s4 [86, 65535] { R13641 += 1, R13597 += 1, R11523 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R13641 += 1 };
  accepting s4, s8, s2, s9, s6;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 83] { R13643 += 1, R13599 += 1, R11526 += 1, R11527 += 1 };
  s0 -> s0 [0, 65535] { R13642 += 1, R13643 += 1 };
  s0 -> s2 [0, 65535] { R13643 += 1, R13598 += 1, R13599 += 1 };
  s0 -> s3 [84, 84] { R13643 += 1, R13599 += 1, R11526 += 1, R11527 += 1 };
  s0 -> s4 [84, 84] { R13643 += 1, R13599 += 1, R11526 += 1, R11527 += 1 };
  s0 -> s1 [85, 65535] { R13643 += 1, R13599 += 1, R11526 += 1, R11527 += 1 };
  s1 -> s1 [0, 83] { R13643 += 1, R13599 += 1, R11526 += 1, R11527 += 1 };
  s1 -> s1 [0, 65535] { R13643 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [84, 84] { R13643 += 1, R13599 += 1, R11526 += 1, R11527 += 1 };
  s1 -> s4 [84, 84] { R13643 += 1, R13599 += 1, R11526 += 1, R11527 += 1 };
  s1 -> s1 [85, 65535] { R13643 += 1, R13599 += 1, R11526 += 1, R11527 += 1 };
  s2 -> s1 [0, 83] { R13643 += 1, R13599 += 1, R11526 += 1, R11527 += 1 };
  s2 -> s2 [0, 65535] { R13643 += 1, R13598 += 1, R13599 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [84, 84] { R13643 += 1, R13599 += 1, R11526 += 1, R11527 += 1 };
  s2 -> s4 [84, 84] { R13643 += 1, R13599 += 1, R11526 += 1, R11527 += 1 };
  s2 -> s1 [85, 65535] { R13643 += 1, R13599 += 1, R11526 += 1, R11527 += 1 };
  s3 -> s3 [0, 65535] { R13643 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R13643 += 1, R13599 += 1, R11526 += 1, R11527 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R13643 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R13643 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 83] { R13645 += 1, R13601 += 1, R12802 += 1, R12803 += 1 };
  s0 -> s2 [0, 83] { R13645 += 1, R13601 += 1, R12803 += 1 };
  s0 -> s0 [0, 65535] { R13644 += 1, R13645 += 1 };
  s0 -> s3 [0, 65535] { R13645 += 1, R13600 += 1, R13601 += 1 };
  s0 -> s4 [84, 84] { R13645 += 1, R13601 += 1, R12802 += 1, R12803 += 1 };
  s0 -> s5 [84, 84] { R13645 += 1, R13601 += 1, R12803 += 1 };
  s0 -> s6 [84, 84] { R13645 += 1, R13601 += 1, R12802 += 1, R12803 += 1 };
  s0 -> s7 [84, 84] { R13645 += 1, R13601 += 1, R12803 += 1 };
  s0 -> s2 [85, 85] { R13645 += 1, R13601 += 1, R12803 += 1 };
  s0 -> s1 [85, 65535] { R13645 += 1, R13601 += 1, R12802 += 1, R12803 += 1 };
  s0 -> s2 [89, 65535] { R13645 += 1, R13601 += 1, R12803 += 1 };
  s1 -> s1 [0, 83] { R13645 += 1, R13601 += 1, R12802 += 1, R12803 += 1 };
  s1 -> s2 [0, 83] { R13645 += 1, R13601 += 1, R12803 += 1 };
  s1 -> s4 [84, 84] { R13645 += 1, R13601 += 1, R12802 += 1, R12803 += 1 };
  s1 -> s5 [84, 84] { R13645 += 1, R13601 += 1, R12803 += 1 };
  s1 -> s6 [84, 84] { R13645 += 1, R13601 += 1, R12802 += 1, R12803 += 1 };
  s1 -> s7 [84, 84] { R13645 += 1, R13601 += 1, R12803 += 1 };
  s1 -> s2 [85, 85] { R13645 += 1, R13601 += 1, R12803 += 1 };
  s1 -> s1 [85, 65535] { R13645 += 1, R13601 += 1, R12802 += 1, R12803 += 1 };
  s1 -> s2 [89, 65535] { R13645 += 1, R13601 += 1, R12803 += 1 };
  s2 -> s2 [0, 83] { R13645 += 1, R13601 += 1, R12803 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R13645 += 1 };
  s2 -> s5 [84, 84] { R13645 += 1, R13601 += 1, R12803 += 1 };
  s2 -> s7 [84, 84] { R13645 += 1, R13601 += 1, R12803 += 1 };
  s2 -> s2 [85, 85] { R13645 += 1, R13601 += 1, R12803 += 1 };
  s2 -> s2 [89, 65535] { R13645 += 1, R13601 += 1, R12803 += 1 };
  s3 -> s1 [0, 83] { R13645 += 1, R13601 += 1, R12802 += 1, R12803 += 1 };
  s3 -> s2 [0, 83] { R13645 += 1, R13601 += 1, R12803 += 1 };
  s3 -> s3 [0, 65535] { R13645 += 1, R13600 += 1, R13601 += 1 };
  s3 -> s4 [84, 84] { R13645 += 1, R13601 += 1, R12802 += 1, R12803 += 1 };
  s3 -> s5 [84, 84] { R13645 += 1, R13601 += 1, R12803 += 1 };
  s3 -> s6 [84, 84] { R13645 += 1, R13601 += 1, R12802 += 1, R12803 += 1 };
  s3 -> s7 [84, 84] { R13645 += 1, R13601 += 1, R12803 += 1 };
  s3 -> s2 [85, 85] { R13645 += 1, R13601 += 1, R12803 += 1 };
  s3 -> s1 [85, 65535] { R13645 += 1, R13601 += 1, R12802 += 1, R12803 += 1 };
  s3 -> s2 [89, 65535] { R13645 += 1, R13601 += 1, R12803 += 1 };
  s5 -> s5 [0, 65535] { R13645 += 1 };
  s5 -> s8 [0, 65535];
  s6 -> s7 [0, 85] { R13645 += 1, R13601 += 1, R12803 += 1 };
  s6 -> s6 [0, 65535] { R13645 += 1, R13601 += 1, R12802 += 1, R12803 += 1 };
  s6 -> s7 [89, 65535] { R13645 += 1, R13601 += 1, R12803 += 1 };
  s7 -> s7 [0, 85] { R13645 += 1, R13601 += 1, R12803 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R13645 += 1 };
  s7 -> s7 [89, 65535] { R13645 += 1, R13601 += 1, R12803 += 1 };
  s8 -> s8 [0, 65535];
  accepting s2, s5, s7, s8;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 83] { R13647 += 1, R13603 += 1, R13229 += 1, R13230 += 1 };
  s0 -> s2 [0, 83] { R13647 += 1, R13603 += 1, R13228 += 1, R13229 += 1 };
  s0 -> s0 [0, 65535] { R13646 += 1, R13647 += 1 };
  s0 -> s3 [0, 65535] { R13647 += 1, R13602 += 1, R13603 += 1 };
  s0 -> s4 [84, 84] { R13647 += 1, R13603 += 1, R13228 += 1, R13229 += 1 };
  s0 -> s5 [84, 84] { R13647 += 1, R13603 += 1, R13229 += 1, R13230 += 1 };
  s0 -> s6 [84, 84] { R13647 += 1, R13603 += 1, R13228 += 1, R13229 += 1 };
  s0 -> s7 [84, 84] { R13647 += 1, R13603 += 1, R13229 += 1, R13230 += 1 };
  s0 -> s1 [85, 65535] { R13647 += 1, R13603 += 1, R13229 += 1, R13230 += 1 };
  s0 -> s2 [85, 65535] { R13647 += 1, R13603 += 1, R13228 += 1, R13229 += 1 };
  s1 -> s1 [0, 83] { R13647 += 1, R13603 += 1, R13229 += 1, R13230 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s1 [0, 65535] { R13647 += 1 };
  s1 -> s5 [84, 84] { R13647 += 1, R13603 += 1, R13229 += 1, R13230 += 1 };
  s1 -> s7 [84, 84] { R13647 += 1, R13603 += 1, R13229 += 1, R13230 += 1 };
  s1 -> s1 [85, 65535] { R13647 += 1, R13603 += 1, R13229 += 1, R13230 += 1 };
  s2 -> s1 [0, 83] { R13647 += 1, R13603 += 1, R13229 += 1, R13230 += 1 };
  s2 -> s2 [0, 83] { R13647 += 1, R13603 += 1, R13228 += 1, R13229 += 1 };
  s2 -> s4 [84, 84] { R13647 += 1, R13603 += 1, R13228 += 1, R13229 += 1 };
  s2 -> s5 [84, 84] { R13647 += 1, R13603 += 1, R13229 += 1, R13230 += 1 };
  s2 -> s6 [84, 84] { R13647 += 1, R13603 += 1, R13228 += 1, R13229 += 1 };
  s2 -> s7 [84, 84] { R13647 += 1, R13603 += 1, R13229 += 1, R13230 += 1 };
  s2 -> s1 [85, 65535] { R13647 += 1, R13603 += 1, R13229 += 1, R13230 += 1 };
  s2 -> s2 [85, 65535] { R13647 += 1, R13603 += 1, R13228 += 1, R13229 += 1 };
  s3 -> s1 [0, 83] { R13647 += 1, R13603 += 1, R13229 += 1, R13230 += 1 };
  s3 -> s2 [0, 83] { R13647 += 1, R13603 += 1, R13228 += 1, R13229 += 1 };
  s3 -> s3 [0, 65535] { R13647 += 1, R13602 += 1, R13603 += 1 };
  s3 -> s4 [84, 84] { R13647 += 1, R13603 += 1, R13228 += 1, R13229 += 1 };
  s3 -> s5 [84, 84] { R13647 += 1, R13603 += 1, R13229 += 1, R13230 += 1 };
  s3 -> s6 [84, 84] { R13647 += 1, R13603 += 1, R13228 += 1, R13229 += 1 };
  s3 -> s7 [84, 84] { R13647 += 1, R13603 += 1, R13229 += 1, R13230 += 1 };
  s3 -> s1 [85, 65535] { R13647 += 1, R13603 += 1, R13229 += 1, R13230 += 1 };
  s3 -> s2 [85, 65535] { R13647 += 1, R13603 += 1, R13228 += 1, R13229 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s5 [0, 65535] { R13647 += 1 };
  s6 -> s6 [0, 65535] { R13647 += 1, R13603 += 1, R13228 += 1, R13229 += 1 };
  s6 -> s7 [0, 65535] { R13647 += 1, R13603 += 1, R13229 += 1, R13230 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s9 [0, 65535] { R13647 += 1 };
  s7 -> s7 [0, 65535] { R13647 += 1, R13603 += 1, R13229 += 1, R13230 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R13647 += 1 };
  accepting s8, s5, s9, s1, s7;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 83] { R13649 += 1, R13605 += 1, R13547 += 1 };
  s0 -> s2 [0, 83] { R13649 += 1, R13605 += 1, R13546 += 1, R13547 += 1 };
  s0 -> s3 [0, 65535] { R13649 += 1, R13604 += 1, R13605 += 1 };
  s0 -> s0 [0, 65535] { R13648 += 1, R13649 += 1 };
  s0 -> s4 [84, 84] { R13649 += 1, R13605 += 1, R13546 += 1, R13547 += 1 };
  s0 -> s5 [84, 84] { R13649 += 1, R13605 += 1, R13546 += 1, R13547 += 1 };
  s0 -> s6 [84, 84] { R13649 += 1, R13605 += 1, R13547 += 1 };
  s0 -> s7 [84, 84] { R13649 += 1, R13605 += 1, R13547 += 1 };
  s0 -> s8 [85, 85] { R13649 += 1, R13605 += 1, R13547 += 1 };
  s0 -> s2 [85, 65535] { R13649 += 1, R13605 += 1, R13546 += 1, R13547 += 1 };
  s0 -> s1 [89, 65535] { R13649 += 1, R13605 += 1, R13547 += 1 };
  s1 -> s1 [0, 83] { R13649 += 1, R13605 += 1, R13547 += 1 };
  s1 -> s6 [84, 84] { R13649 += 1, R13605 += 1 };
  s1 -> s7 [84, 84] { R13649 += 1, R13605 += 1 };
  s1 -> s8 [85, 85] { R13649 += 1, R13605 += 1, R13547 += 1 };
  s1 -> s1 [85, 65535] { R13649 += 1, R13605 += 1 };
  s1 -> s1 [89, 65535] { R13649 += 1, R13605 += 1, R13547 += 1 };
  s2 -> s1 [0, 83] { R13649 += 1, R13605 += 1, R13547 += 1 };
  s2 -> s2 [0, 83] { R13649 += 1, R13605 += 1, R13546 += 1, R13547 += 1 };
  s2 -> s4 [84, 84] { R13649 += 1, R13605 += 1, R13546 += 1, R13547 += 1 };
  s2 -> s5 [84, 84] { R13649 += 1, R13605 += 1, R13546 += 1, R13547 += 1 };
  s2 -> s6 [84, 84] { R13649 += 1, R13605 += 1, R13547 += 1 };
  s2 -> s7 [84, 84] { R13649 += 1, R13605 += 1, R13547 += 1 };
  s2 -> s8 [85, 85] { R13649 += 1, R13605 += 1, R13547 += 1 };
  s2 -> s2 [85, 65535] { R13649 += 1, R13605 += 1, R13546 += 1, R13547 += 1 };
  s2 -> s1 [89, 65535] { R13649 += 1, R13605 += 1, R13547 += 1 };
  s3 -> s1 [0, 83] { R13649 += 1, R13605 += 1, R13547 += 1 };
  s3 -> s2 [0, 83] { R13649 += 1, R13605 += 1, R13546 += 1, R13547 += 1 };
  s3 -> s3 [0, 65535] { R13649 += 1, R13604 += 1, R13605 += 1 };
  s3 -> s4 [84, 84] { R13649 += 1, R13605 += 1, R13546 += 1, R13547 += 1 };
  s3 -> s5 [84, 84] { R13649 += 1, R13605 += 1, R13546 += 1, R13547 += 1 };
  s3 -> s6 [84, 84] { R13649 += 1, R13605 += 1, R13547 += 1 };
  s3 -> s7 [84, 84] { R13649 += 1, R13605 += 1, R13547 += 1 };
  s3 -> s8 [85, 85] { R13649 += 1, R13605 += 1, R13547 += 1 };
  s3 -> s2 [85, 65535] { R13649 += 1, R13605 += 1, R13546 += 1, R13547 += 1 };
  s3 -> s1 [89, 65535] { R13649 += 1, R13605 += 1, R13547 += 1 };
  s5 -> s6 [0, 84] { R13649 += 1, R13605 += 1, R13547 += 1 };
  s5 -> s5 [0, 65535] { R13649 += 1, R13605 += 1, R13546 += 1, R13547 += 1 };
  s5 -> s10 [85, 85] { R13649 += 1, R13605 += 1, R13547 += 1 };
  s5 -> s6 [89, 65535] { R13649 += 1, R13605 += 1, R13547 += 1 };
  s6 -> s6 [0, 84] { R13649 += 1, R13605 += 1, R13547 += 1 };
  s6 -> s6 [0, 65535] { R13649 += 1, R13605 += 1 };
  s6 -> s10 [85, 85] { R13649 += 1, R13605 += 1, R13547 += 1 };
  s6 -> s6 [89, 65535] { R13649 += 1, R13605 += 1, R13547 += 1 };
  s8 -> s8 [0, 83] { R13649 += 1, R13605 += 1, R13547 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R13649 += 1 };
  s8 -> s10 [84, 84] { R13649 += 1, R13605 += 1 };
  s8 -> s11 [84, 84] { R13649 += 1, R13605 += 1 };
  s8 -> s8 [85, 85] { R13649 += 1, R13605 += 1, R13547 += 1 };
  s8 -> s8 [85, 65535] { R13649 += 1, R13605 += 1 };
  s8 -> s8 [89, 65535] { R13649 += 1, R13605 += 1, R13547 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 85] { R13649 += 1, R13605 += 1, R13547 += 1 };
  s10 -> s12 [0, 65535] { R13649 += 1 };
  s10 -> s10 [0, 65535] { R13649 += 1, R13605 += 1 };
  s10 -> s9 [0, 65535];
  s10 -> s10 [89, 65535] { R13649 += 1, R13605 += 1, R13547 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R13649 += 1 };
  s12 -> s12 [0, 65535] { R13649 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [116, 116];
  accepting s1;
};
};
synchronised {  // Automata constraining P62
automaton P62_0 {
  init s0;
  s0 -> s1 [117, 117];
  accepting s1;
};
};
constraint R1 = R13565 && R2 = R13649 && R20 - R13649 = -1 && R21 = R13649 && R22 - R13649 = -1 && R23 = R13649 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R12805 + -1*R12803 - R53 = 0 && R52 + R12804 + R12802 = 0 && R13564 = 0 && R13590 = 0 && R13591 = 0 && R13596 = 0 && R13597 = 0 && R13600 = 0 && R13601 = 0 && R13602 = 0 && R13603 = 0 && R13604 = 0 && R13605 = 0 && R13606 = 0 && R13607 = R13649 && R13608 = 0 && R13609 = R13649 && R13610 = 0 && R13611 = R13649 && R13612 = 0 && R13613 = R13649 && R13614 = 0 && R13615 = R13649 && R13616 = 0 && R13617 = R13649 && R13618 = 0 && R13619 = R13649 && R13620 = 0 && R13621 = R13649 && R13622 = 0 && R13623 = R13649 && R13624 = 0 && R13625 = R13649 && R13626 = 0 && R13627 = R13649 && R13628 = 0 && R13629 = R13649 && R13630 = 0 && R13631 = R13649 && R13632 = 0 && R13633 = R13649 && R13634 = 0 && R13635 = R13649 && R13636 = 0 && R13637 = R13649 && R13638 = 0 && R13639 = R13649 && R13640 = 0 && R13641 = R13649 && R13642 = 0 && R13643 = R13649 && R13644 = 0 && R13645 = R13649 && R13646 = 0 && R13647 = R13649 && R13648 = 0 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R12805 + -1*R12803 - R53 < 1 && -1 < R13565 && 0 < R13649 && (R48 + R11531 + R11528 != 0 || ((R42 + R11524 + R11522 != 0 || R43 + R11525 + R11523 + -1*R12805 + -1*R12803 - R53 = 0 || R53 + R12805 + R12803 < 1) && (R42 + R11524 + R11522 = 0 || R53 + R12805 + R12803 < 1))) && (R48 + R11531 + R11528 != 0 || ((R46 + R11529 + R11526 != 0 || R47 + R11530 + R11527 + -1*R12805 + -1*R12803 - R53 = 0 || R53 + R12805 + R12803 < 1) && (R46 + R11529 + R11526 = 0 || R53 + R12805 + R12803 < 1))) && (R13550 != 0 || R13551 = R13565 || (R17 = 0 && R13565 = 0)) && (R13552 != 0 || R13553 = R13565 || (R17 = 0 && R13565 = 0)) && (R13554 != 0 || R13555 = R13565 || (R17 = 0 && R13565 = 0)) && (R13556 != 0 || R13557 = R13565 || (R17 = 0 && R13565 = 0)) && (R13558 != 0 || R13559 = R13565 || (R17 = 0 && R13565 = 0)) && (R13560 != 0 || R13561 = R13565 || (R17 = 0 && R13565 = 0)) && (R13562 != 0 || R13563 = R13565 || (R17 = 0 && R13565 = 0)) && (R13566 != 0 || R13565 = R13567 || (R17 = 0 && R13565 = 0)) && (R13568 != 0 || R13565 = R13569 || (R17 = 0 && R13565 = 0)) && (R18 = 0 || (R13588 = 0 && R13589 = 0)) && (R18 = 0 || (R13592 = 0 && R13593 = 0)) && (R18 = 0 || (R13594 = 0 && R13595 = 0)) && (R18 = 0 || (R13598 = 0 && R13599 = 0)) && (R19 = 0 || (R13570 = 0 && R13571 = 0)) && (R19 = 0 || (R13572 = 0 && R13573 = 0)) && (R19 = 0 || (R13574 = 0 && R13575 = 0)) && (R19 = 0 || (R13576 = 0 && R13577 = 0)) && (R19 = 0 || (R13578 = 0 && R13579 = 0)) && (R19 = 0 || (R13580 = 0 && R13581 = 0)) && (R19 = 0 || (R13582 = 0 && R13583 = 0)) && (R19 = 0 || (R13584 = 0 && R13585 = 0)) && (R19 = 0 || (R13586 = 0 && R13587 = 0)) && (R48 + R11531 + R11528 = 0 || (R42 + R11524 + R11522 = 0 && R43 + R11525 + R11523 + -1*R12805 + -1*R12803 - R53 = 0)) && (R48 + R11531 + R11528 = 0 || (R46 + R11529 + R11526 = 0 && R47 + R11530 + R11527 + -1*R12805 + -1*R12803 - R53 = 0)) && (R58 + R13233 + R13230 = 0 || (R56 + R13231 + R13228 = 0 && R57 + R13232 + R13229 = 0)) && (R58 + R13233 + R13230 = 0 || (R62 + R13548 + R13546 = 0 && R63 + R13549 + R13547 = 0)) && (R13550 = 0 || (R17 = 0 && R13565 = 0)) && (R13552 = 0 || (R17 = 0 && R13565 = 0)) && (R13554 = 0 || (R17 = 0 && R13565 = 0)) && (R13556 = 0 || (R17 = 0 && R13565 = 0)) && (R13558 = 0 || (R17 = 0 && R13565 = 0)) && (R13560 = 0 || (R17 = 0 && R13565 = 0)) && (R13562 = 0 || (R17 = 0 && R13565 = 0)) && (R13566 = 0 || (R17 = 0 && R13565 = 0)) && (R13568 = 0 || (R17 = 0 && R13565 = 0));
// End of Parikh automata intersection problem
