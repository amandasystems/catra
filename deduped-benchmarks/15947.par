// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R12, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R2620, R2621, R2622, R2623, R2624, R2625, R2626, R2627, R2628, R2629, R27, R2838, R2839, R2840, R2841, R2842, R2843, R2844, R2845, R2846, R2847, R2848, R2849, R2850, R2851, R2852, R2853, R2854, R2855, R2856, R2857, R2858, R2859, R2860, R2861, R2862, R2863, R2864, R2865, R2866, R2867, R2868, R2869, R2870, R2871, R2872, R2873, R2874, R2875, R2876, R2877, R2878, R2879, R2880, R2881, R2882, R2883, R2884, R2885, R2886, R2887, R2888, R2889, R2890, R2891, R2892, R2893, R2894, R2895, R2896, R2897, R2898, R2899, R2900, R2901, R2902, R2903, R2904, R2905, R2906, R2907, R2908, R2909, R2910, R2911, R2912, R2913, R2914, R2915, R2916, R2917, R2918, R2919, R2920, R2921, R2922, R2923, R2924, R2925, R2926, R2927, R2928, R2929, R2930, R2931, R2932, R2933, R2934, R2935, R2936, R2937, R2938, R2939, R2940, R2941, R3, R38, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R70, R71, R72, R73, R74, R75, R76, R77, R78, R79, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [84, 84];
  s0 -> s0 [85, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [84, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 83];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [84, 84];
  s0 -> s1 [85, 65535];
  s1 -> s1 [0, 83];
  s1 -> s2 [84, 84];
  s1 -> s1 [85, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R21 += 1 };
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R25 += 1 };
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R2863 += 1, R19 += 1 };
  s0 -> s0 [0, 65535] { R2862 += 1, R2863 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R2863 += 1, R19 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 83] { R2865 += 1 };
  s0 -> s0 [0, 65535] { R2864 += 1, R2865 += 1 };
  s0 -> s2 [84, 84] { R2865 += 1 };
  s0 -> s3 [84, 84] { R2865 += 1 };
  s0 -> s1 [86, 65535] { R2865 += 1 };
  s1 -> s1 [0, 83] { R2865 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R2865 += 1 };
  s1 -> s3 [84, 84] { R2865 += 1 };
  s1 -> s1 [86, 65535] { R2865 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 84] { R2865 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [86, 65535] { R2865 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 83] { R2867 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R2866 += 1, R2867 += 1 };
  s0 -> s2 [84, 84] { R2867 += 1, R38 += 1 };
  s0 -> s3 [84, 84] { R2867 += 1, R38 += 1 };
  s0 -> s1 [85, 65535] { R2867 += 1, R38 += 1 };
  s1 -> s1 [0, 83] { R2867 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R2867 += 1, R38 += 1 };
  s1 -> s3 [84, 84] { R2867 += 1, R38 += 1 };
  s1 -> s1 [85, 65535] { R2867 += 1, R38 += 1 };
  s2 -> s2 [0, 65535] { R2867 += 1, R38 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 83] { R2869 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R2868 += 1, R2869 += 1 };
  s0 -> s2 [84, 84] { R2869 += 1, R40 += 1 };
  s0 -> s3 [84, 84] { R2869 += 1, R40 += 1 };
  s0 -> s1 [85, 65535] { R2869 += 1, R40 += 1 };
  s1 -> s1 [0, 83] { R2869 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R2869 += 1, R40 += 1 };
  s1 -> s3 [84, 84] { R2869 += 1, R40 += 1 };
  s1 -> s1 [85, 65535] { R2869 += 1, R40 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R2869 += 1, R40 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 83] { R2871 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R2870 += 1, R2871 += 1 };
  s0 -> s2 [84, 84] { R2871 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [84, 84] { R2871 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [85, 65535] { R2871 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 83] { R2871 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R2871 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [84, 84] { R2871 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [85, 65535] { R2871 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2871 += 1, R42 += 1, R43 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 83] { R2873 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R2872 += 1, R2873 += 1 };
  s0 -> s2 [84, 84] { R2873 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [84, 84] { R2873 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [85, 65535] { R2873 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 83] { R2873 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R2873 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [84, 84] { R2873 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [85, 65535] { R2873 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2873 += 1, R46 += 1, R47 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 83] { R2875 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R2874 += 1, R2875 += 1 };
  s0 -> s2 [84, 84] { R2875 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [84, 84] { R2875 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [85, 65535] { R2875 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 83] { R2875 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R2875 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [84, 84] { R2875 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [85, 65535] { R2875 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R2875 += 1, R52 += 1, R53 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 83] { R2877 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R2876 += 1, R2877 += 1 };
  s0 -> s2 [84, 84] { R2877 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [84, 84] { R2877 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [85, 65535] { R2877 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 83] { R2877 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R2877 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [84, 84] { R2877 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [85, 65535] { R2877 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2877 += 1, R56 += 1, R57 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 83] { R2879 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R2878 += 1, R2879 += 1 };
  s0 -> s2 [84, 84] { R2879 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [84, 84] { R2879 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [85, 65535] { R2879 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 83] { R2879 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R2879 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [84, 84] { R2879 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [85, 65535] { R2879 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535] { R2879 += 1, R62 += 1, R63 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 83] { R2899 += 1 };
  s0 -> s0 [0, 65535] { R2898 += 1, R2899 += 1 };
  s0 -> s2 [84, 84] { R2899 += 1 };
  s0 -> s1 [85, 65535] { R2899 += 1 };
  s1 -> s1 [0, 83] { R2899 += 1 };
  s1 -> s2 [84, 84] { R2899 += 1 };
  s1 -> s1 [85, 65535] { R2899 += 1 };
  s2 -> s2 [0, 65535] { R2899 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R2901 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R2900 += 1, R2901 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R2901 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 83] { R2903 += 1 };
  s0 -> s2 [0, 65535] { R2903 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R2902 += 1, R2903 += 1 };
  s0 -> s3 [84, 84] { R2903 += 1 };
  s0 -> s1 [85, 65535] { R2903 += 1 };
  s1 -> s1 [0, 83] { R2903 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [84, 84] { R2903 += 1 };
  s1 -> s1 [85, 65535] { R2903 += 1 };
  s2 -> s1 [0, 83] { R2903 += 1 };
  s2 -> s2 [0, 65535] { R2903 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [84, 84] { R2903 += 1 };
  s2 -> s1 [85, 65535] { R2903 += 1 };
  s3 -> s3 [0, 65535] { R2903 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 83] { R2905 += 1, R2843 += 1 };
  s0 -> s0 [0, 65535] { R2904 += 1, R2905 += 1 };
  s0 -> s2 [0, 65535] { R2905 += 1, R2842 += 1, R2843 += 1 };
  s0 -> s1 [85, 65535] { R2905 += 1, R2843 += 1 };
  s1 -> s1 [0, 83] { R2905 += 1, R2843 += 1 };
  s1 -> s1 [0, 65535] { R2905 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [85, 65535] { R2905 += 1, R2843 += 1 };
  s2 -> s1 [0, 83] { R2905 += 1, R2843 += 1 };
  s2 -> s2 [0, 65535] { R2905 += 1, R2842 += 1, R2843 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [85, 65535] { R2905 += 1, R2843 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R2907 += 1, R2844 += 1, R2845 += 1 };
  s0 -> s0 [0, 65535] { R2906 += 1, R2907 += 1 };
  s0 -> s2 [0, 65535] { R2907 += 1, R2845 += 1, R17 += 1 };
  s1 -> s1 [0, 65535] { R2907 += 1, R2844 += 1, R2845 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R2907 += 1, R2845 += 1, R17 += 1 };
  s2 -> s3 [0, 65535] { R2907 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2907 += 1, R2845 += 1, R17 += 1 };
  s3 -> s3 [0, 65535] { R2907 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 65535] { R2909 += 1, R2846 += 1, R2847 += 1 };
  s0 -> s2 [0, 65535] { R2909 += 1, R2847 += 1 };
  s0 -> s0 [0, 65535] { R2908 += 1, R2909 += 1 };
  s1 -> s1 [0, 65535] { R2909 += 1, R2846 += 1, R2847 += 1 };
  s1 -> s2 [0, 65535] { R2909 += 1, R2847 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R2909 += 1 };
  s2 -> s2 [0, 65535] { R2909 += 1, R2847 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2909 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R2911 += 1, R2848 += 1, R2849 += 1 };
  s0 -> s2 [0, 65535] { R2911 += 1, R2849 += 1, R67 += 1 };
  s0 -> s0 [0, 65535] { R2910 += 1, R2911 += 1 };
  s1 -> s1 [0, 65535] { R2911 += 1, R2848 += 1, R2849 += 1 };
  s1 -> s2 [0, 65535] { R2911 += 1, R2849 += 1, R67 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2911 += 1, R2849 += 1, R67 += 1 };
  s2 -> s3 [0, 65535] { R2911 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2911 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 84] { R2913 += 1, R2851 += 1 };
  s0 -> s0 [0, 65535] { R2912 += 1, R2913 += 1 };
  s0 -> s2 [0, 65535] { R2913 += 1, R2850 += 1, R2851 += 1 };
  s0 -> s3 [0, 65535] { R2913 += 1, R2851 += 1, R69 += 1 };
  s0 -> s1 [86, 65535] { R2913 += 1, R2851 += 1 };
  s1 -> s1 [0, 84] { R2913 += 1, R2851 += 1 };
  s1 -> s1 [0, 65535] { R2913 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [86, 65535] { R2913 += 1, R2851 += 1 };
  s2 -> s1 [0, 84] { R2913 += 1, R2851 += 1 };
  s2 -> s2 [0, 65535] { R2913 += 1, R2850 += 1, R2851 += 1 };
  s2 -> s3 [0, 65535] { R2913 += 1, R2851 += 1, R69 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [86, 65535] { R2913 += 1, R2851 += 1 };
  s3 -> s1 [0, 84] { R2913 += 1, R2851 += 1 };
  s3 -> s4 [0, 65535] { R2913 += 1 };
  s3 -> s3 [0, 65535] { R2913 += 1, R2851 += 1, R69 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [86, 65535] { R2913 += 1, R2851 += 1 };
  s4 -> s4 [0, 65535] { R2913 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 84] { R2915 += 1, R2853 += 1, R73 += 1 };
  s0 -> s2 [0, 65535] { R2915 += 1, R2853 += 1, R72 += 1, R73 += 1 };
  s0 -> s3 [0, 65535] { R2915 += 1, R2852 += 1, R2853 += 1 };
  s0 -> s0 [0, 65535] { R2914 += 1, R2915 += 1 };
  s0 -> s1 [86, 65535] { R2915 += 1, R2853 += 1, R73 += 1 };
  s1 -> s1 [0, 84] { R2915 += 1, R2853 += 1, R73 += 1 };
  s1 -> s1 [0, 65535] { R2915 += 1, R2853 += 1 };
  s1 -> s5 [0, 65535] { R2915 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [86, 65535] { R2915 += 1, R2853 += 1, R73 += 1 };
  s2 -> s1 [0, 84] { R2915 += 1, R2853 += 1, R73 += 1 };
  s2 -> s2 [0, 65535] { R2915 += 1, R2853 += 1, R72 += 1, R73 += 1 };
  s2 -> s5 [0, 65535] { R2915 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [86, 65535] { R2915 += 1, R2853 += 1, R73 += 1 };
  s3 -> s1 [0, 84] { R2915 += 1, R2853 += 1, R73 += 1 };
  s3 -> s2 [0, 65535] { R2915 += 1, R2853 += 1, R72 += 1, R73 += 1 };
  s3 -> s3 [0, 65535] { R2915 += 1, R2852 += 1, R2853 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [86, 65535] { R2915 += 1, R2853 += 1, R73 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2915 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s0 [0, 65535] { R2916 += 1, R2917 += 1 };
  s0 -> s1 [0, 65535] { R2917 += 1, R2854 += 1, R2855 += 1 };
  s0 -> s2 [0, 65535] { R2917 += 1, R2855 += 1, R77 += 1, R78 += 1 };
  s0 -> s3 [0, 65535] { R2917 += 1, R2855 += 1, R78 += 1, R79 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R2917 += 1, R2854 += 1, R2855 += 1 };
  s1 -> s2 [0, 65535] { R2917 += 1, R2855 += 1, R77 += 1, R78 += 1 };
  s1 -> s3 [0, 65535] { R2917 += 1, R2855 += 1, R78 += 1, R79 += 1 };
  s2 -> s4 [0, 65535] { R2917 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R2917 += 1, R2855 += 1, R77 += 1, R78 += 1 };
  s2 -> s3 [0, 65535] { R2917 += 1, R2855 += 1, R78 += 1, R79 += 1 };
  s3 -> s4 [0, 65535] { R2917 += 1 };
  s3 -> s5 [0, 65535] { R2917 += 1, R2855 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R2917 += 1, R2855 += 1, R78 += 1, R79 += 1 };
  s4 -> s4 [0, 65535] { R2917 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s4 [0, 65535] { R2917 += 1 };
  s5 -> s5 [0, 65535] { R2917 += 1, R2855 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 85] { R2919 += 1, R2857 += 1, R2623 += 1 };
  s0 -> s2 [0, 65535] { R2919 += 1, R2856 += 1, R2857 += 1 };
  s0 -> s3 [0, 65535] { R2919 += 1, R2857 += 1, R2622 += 1, R2623 += 1 };
  s0 -> s0 [0, 65535] { R2918 += 1, R2919 += 1 };
  s0 -> s4 [88, 88] { R2919 += 1, R2857 += 1, R2623 += 1 };
  s0 -> s1 [89, 65535] { R2919 += 1, R2857 += 1, R2623 += 1 };
  s1 -> s1 [0, 85] { R2919 += 1, R2857 += 1, R2623 += 1 };
  s1 -> s4 [88, 88] { R2919 += 1, R2857 += 1, R2623 += 1 };
  s1 -> s1 [89, 65535] { R2919 += 1, R2857 += 1, R2623 += 1 };
  s2 -> s1 [0, 85] { R2919 += 1, R2857 += 1, R2623 += 1 };
  s2 -> s2 [0, 65535] { R2919 += 1, R2856 += 1, R2857 += 1 };
  s2 -> s3 [0, 65535] { R2919 += 1, R2857 += 1, R2622 += 1, R2623 += 1 };
  s2 -> s4 [88, 88] { R2919 += 1, R2857 += 1, R2623 += 1 };
  s2 -> s1 [89, 65535] { R2919 += 1, R2857 += 1, R2623 += 1 };
  s3 -> s1 [0, 85] { R2919 += 1, R2857 += 1, R2623 += 1 };
  s3 -> s3 [0, 65535] { R2919 += 1, R2857 += 1, R2622 += 1, R2623 += 1 };
  s3 -> s4 [88, 88] { R2919 += 1, R2857 += 1, R2623 += 1 };
  s3 -> s1 [89, 65535] { R2919 += 1, R2857 += 1, R2623 += 1 };
  s4 -> s4 [0, 85] { R2919 += 1, R2857 += 1, R2623 += 1 };
  s4 -> s5 [0, 65535] { R2919 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R2919 += 1, R2857 += 1 };
  s4 -> s4 [88, 65535] { R2919 += 1, R2857 += 1, R2623 += 1 };
  s5 -> s5 [0, 65535] { R2919 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s4, s5, s6;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R2921 += 1, R2858 += 1, R2859 += 1 };
  s0 -> s0 [0, 65535] { R2920 += 1, R2921 += 1 };
  s0 -> s2 [0, 65535] { R2921 += 1, R2859 += 1, R2627 += 1, R2628 += 1 };
  s0 -> s3 [0, 65535] { R2921 += 1, R2859 += 1, R2628 += 1, R2629 += 1 };
  s1 -> s1 [0, 65535] { R2921 += 1, R2858 += 1, R2859 += 1 };
  s1 -> s2 [0, 65535] { R2921 += 1, R2859 += 1, R2627 += 1, R2628 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R2921 += 1, R2859 += 1, R2628 += 1, R2629 += 1 };
  s2 -> s4 [0, 65535] { R2921 += 1 };
  s2 -> s2 [0, 65535] { R2921 += 1, R2859 += 1, R2627 += 1, R2628 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R2921 += 1, R2859 += 1, R2628 += 1, R2629 += 1 };
  s3 -> s4 [0, 65535] { R2921 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R2921 += 1, R2859 += 1, R2628 += 1, R2629 += 1 };
  s3 -> s6 [0, 65535] { R2921 += 1, R2859 += 1 };
  s4 -> s4 [0, 65535] { R2921 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R2921 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2921 += 1, R2859 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 65535] { R2923 += 1, R2860 += 1, R2861 += 1 };
  s0 -> s0 [0, 65535] { R2922 += 1, R2923 += 1 };
  s0 -> s2 [0, 65535] { R2923 += 1, R2861 += 1 };
  s1 -> s1 [0, 65535] { R2923 += 1, R2860 += 1, R2861 += 1 };
  s1 -> s2 [0, 65535] { R2923 += 1, R2861 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R2923 += 1 };
  s2 -> s2 [0, 65535] { R2923 += 1, R2861 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2923 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s0 [0, 65535] { R2924 += 1, R2925 += 1 };
  s0 -> s1 [0, 65535] { R2925 += 1, R2880 += 1, R2881 += 1 };
  s0 -> s2 [0, 65535] { R2925 += 1, R2881 += 1, R18 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R2925 += 1, R2880 += 1, R2881 += 1 };
  s1 -> s2 [0, 65535] { R2925 += 1, R2881 += 1, R18 += 1 };
  s2 -> s3 [0, 65535] { R2925 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2925 += 1, R2881 += 1, R18 += 1 };
  s3 -> s3 [0, 65535] { R2925 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 83] { R2927 += 1, R2883 += 1 };
  s0 -> s2 [0, 65535] { R2927 += 1, R2882 += 1, R2883 += 1 };
  s0 -> s0 [0, 65535] { R2926 += 1, R2927 += 1 };
  s0 -> s3 [84, 84] { R2927 += 1, R2883 += 1 };
  s0 -> s4 [84, 84] { R2927 += 1, R2883 += 1 };
  s0 -> s5 [85, 85] { R2927 += 1, R2883 += 1 };
  s0 -> s1 [86, 65535] { R2927 += 1, R2883 += 1 };
  s1 -> s1 [0, 83] { R2927 += 1, R2883 += 1 };
  s1 -> s3 [84, 84] { R2927 += 1, R2883 += 1 };
  s1 -> s4 [84, 84] { R2927 += 1, R2883 += 1 };
  s1 -> s5 [85, 85] { R2927 += 1, R2883 += 1 };
  s1 -> s1 [86, 65535] { R2927 += 1, R2883 += 1 };
  s2 -> s1 [0, 83] { R2927 += 1, R2883 += 1 };
  s2 -> s2 [0, 65535] { R2927 += 1, R2882 += 1, R2883 += 1 };
  s2 -> s3 [84, 84] { R2927 += 1, R2883 += 1 };
  s2 -> s4 [84, 84] { R2927 += 1, R2883 += 1 };
  s2 -> s5 [85, 85] { R2927 += 1, R2883 += 1 };
  s2 -> s1 [86, 65535] { R2927 += 1, R2883 += 1 };
  s4 -> s4 [0, 84] { R2927 += 1, R2883 += 1 };
  s4 -> s8 [85, 85] { R2927 += 1, R2883 += 1 };
  s4 -> s4 [86, 65535] { R2927 += 1, R2883 += 1 };
  s5 -> s5 [0, 83] { R2927 += 1, R2883 += 1 };
  s5 -> s5 [0, 65535] { R2927 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [84, 84] { R2927 += 1, R2883 += 1 };
  s5 -> s8 [84, 84] { R2927 += 1, R2883 += 1 };
  s5 -> s5 [85, 65535] { R2927 += 1, R2883 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R2927 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s9 [0, 65535] { R2927 += 1 };
  s8 -> s8 [0, 65535] { R2927 += 1, R2883 += 1 };
  s8 -> s6 [0, 65535];
  s9 -> s9 [0, 65535] { R2927 += 1 };
  s9 -> s6 [0, 65535];
  accepting s8, s5, s9, s6, s7;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 83] { R2929 += 1, R2885 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R2928 += 1, R2929 += 1 };
  s0 -> s2 [0, 65535] { R2929 += 1, R2884 += 1, R2885 += 1 };
  s0 -> s3 [84, 84] { R2929 += 1, R2885 += 1, R66 += 1 };
  s0 -> s4 [84, 84] { R2929 += 1, R2885 += 1, R66 += 1 };
  s0 -> s1 [85, 65535] { R2929 += 1, R2885 += 1, R66 += 1 };
  s1 -> s1 [0, 83] { R2929 += 1, R2885 += 1, R66 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R2929 += 1 };
  s1 -> s3 [84, 84] { R2929 += 1, R2885 += 1, R66 += 1 };
  s1 -> s4 [84, 84] { R2929 += 1, R2885 += 1, R66 += 1 };
  s1 -> s1 [85, 65535] { R2929 += 1, R2885 += 1, R66 += 1 };
  s2 -> s1 [0, 83] { R2929 += 1, R2885 += 1, R66 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2929 += 1, R2884 += 1, R2885 += 1 };
  s2 -> s3 [84, 84] { R2929 += 1, R2885 += 1, R66 += 1 };
  s2 -> s4 [84, 84] { R2929 += 1, R2885 += 1, R66 += 1 };
  s2 -> s1 [85, 65535] { R2929 += 1, R2885 += 1, R66 += 1 };
  s3 -> s3 [0, 65535] { R2929 += 1, R2885 += 1, R66 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R2929 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2929 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2929 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 83] { R2931 += 1, R2887 += 1, R68 += 1 };
  s0 -> s0 [0, 65535] { R2930 += 1, R2931 += 1 };
  s0 -> s2 [0, 65535] { R2931 += 1, R2886 += 1, R2887 += 1 };
  s0 -> s3 [84, 84] { R2931 += 1, R2887 += 1, R68 += 1 };
  s0 -> s4 [84, 84] { R2931 += 1, R2887 += 1, R68 += 1 };
  s0 -> s1 [85, 65535] { R2931 += 1, R2887 += 1, R68 += 1 };
  s1 -> s1 [0, 83] { R2931 += 1, R2887 += 1, R68 += 1 };
  s1 -> s1 [0, 65535] { R2931 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [84, 84] { R2931 += 1, R2887 += 1, R68 += 1 };
  s1 -> s4 [84, 84] { R2931 += 1, R2887 += 1, R68 += 1 };
  s1 -> s1 [85, 65535] { R2931 += 1, R2887 += 1, R68 += 1 };
  s2 -> s1 [0, 83] { R2931 += 1, R2887 += 1, R68 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2931 += 1, R2886 += 1, R2887 += 1 };
  s2 -> s3 [84, 84] { R2931 += 1, R2887 += 1, R68 += 1 };
  s2 -> s4 [84, 84] { R2931 += 1, R2887 += 1, R68 += 1 };
  s2 -> s1 [85, 65535] { R2931 += 1, R2887 += 1, R68 += 1 };
  s3 -> s6 [0, 65535] { R2931 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R2931 += 1, R2887 += 1, R68 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2931 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2931 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 83] { R2933 += 1, R2889 += 1, R70 += 1, R71 += 1 };
  s0 -> s2 [0, 65535] { R2933 += 1, R2888 += 1, R2889 += 1 };
  s0 -> s0 [0, 65535] { R2932 += 1, R2933 += 1 };
  s0 -> s3 [84, 84] { R2933 += 1, R2889 += 1, R70 += 1, R71 += 1 };
  s0 -> s4 [84, 84] { R2933 += 1, R2889 += 1, R70 += 1, R71 += 1 };
  s0 -> s1 [85, 65535] { R2933 += 1, R2889 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 83] { R2933 += 1, R2889 += 1, R70 += 1, R71 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R2933 += 1 };
  s1 -> s3 [84, 84] { R2933 += 1, R2889 += 1, R70 += 1, R71 += 1 };
  s1 -> s4 [84, 84] { R2933 += 1, R2889 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [85, 65535] { R2933 += 1, R2889 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [0, 83] { R2933 += 1, R2889 += 1, R70 += 1, R71 += 1 };
  s2 -> s2 [0, 65535] { R2933 += 1, R2888 += 1, R2889 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [84, 84] { R2933 += 1, R2889 += 1, R70 += 1, R71 += 1 };
  s2 -> s4 [84, 84] { R2933 += 1, R2889 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [85, 65535] { R2933 += 1, R2889 += 1, R70 += 1, R71 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R2933 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2933 += 1, R2889 += 1, R70 += 1, R71 += 1 };
  s4 -> s6 [0, 65535] { R2933 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2933 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 83] { R2935 += 1, R2891 += 1, R74 += 1, R75 += 1 };
  s0 -> s0 [0, 65535] { R2934 += 1, R2935 += 1 };
  s0 -> s2 [0, 65535] { R2935 += 1, R2890 += 1, R2891 += 1 };
  s0 -> s3 [84, 84] { R2935 += 1, R2891 += 1, R74 += 1, R75 += 1 };
  s0 -> s4 [84, 84] { R2935 += 1, R2891 += 1, R74 += 1, R75 += 1 };
  s0 -> s1 [85, 65535] { R2935 += 1, R2891 += 1, R74 += 1, R75 += 1 };
  s1 -> s1 [0, 83] { R2935 += 1, R2891 += 1, R74 += 1, R75 += 1 };
  s1 -> s1 [0, 65535] { R2935 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [84, 84] { R2935 += 1, R2891 += 1, R74 += 1, R75 += 1 };
  s1 -> s4 [84, 84] { R2935 += 1, R2891 += 1, R74 += 1, R75 += 1 };
  s1 -> s1 [85, 65535] { R2935 += 1, R2891 += 1, R74 += 1, R75 += 1 };
  s2 -> s1 [0, 83] { R2935 += 1, R2891 += 1, R74 += 1, R75 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2935 += 1, R2890 += 1, R2891 += 1 };
  s2 -> s3 [84, 84] { R2935 += 1, R2891 += 1, R74 += 1, R75 += 1 };
  s2 -> s4 [84, 84] { R2935 += 1, R2891 += 1, R74 += 1, R75 += 1 };
  s2 -> s1 [85, 65535] { R2935 += 1, R2891 += 1, R74 += 1, R75 += 1 };
  s3 -> s6 [0, 65535] { R2935 += 1 };
  s3 -> s3 [0, 65535] { R2935 += 1, R2891 += 1, R74 += 1, R75 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2935 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2935 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 83] { R2937 += 1, R2893 += 1, R2620 += 1, R2621 += 1 };
  s0 -> s2 [0, 65535] { R2937 += 1, R2892 += 1, R2893 += 1 };
  s0 -> s0 [0, 65535] { R2936 += 1, R2937 += 1 };
  s0 -> s3 [84, 84] { R2937 += 1, R2893 += 1, R2620 += 1, R2621 += 1 };
  s0 -> s4 [84, 84] { R2937 += 1, R2893 += 1, R2620 += 1, R2621 += 1 };
  s0 -> s1 [85, 65535] { R2937 += 1, R2893 += 1, R2620 += 1, R2621 += 1 };
  s1 -> s1 [0, 83] { R2937 += 1, R2893 += 1, R2620 += 1, R2621 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R2937 += 1 };
  s1 -> s3 [84, 84] { R2937 += 1, R2893 += 1, R2620 += 1, R2621 += 1 };
  s1 -> s4 [84, 84] { R2937 += 1, R2893 += 1, R2620 += 1, R2621 += 1 };
  s1 -> s1 [85, 65535] { R2937 += 1, R2893 += 1, R2620 += 1, R2621 += 1 };
  s2 -> s1 [0, 83] { R2937 += 1, R2893 += 1, R2620 += 1, R2621 += 1 };
  s2 -> s2 [0, 65535] { R2937 += 1, R2892 += 1, R2893 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [84, 84] { R2937 += 1, R2893 += 1, R2620 += 1, R2621 += 1 };
  s2 -> s4 [84, 84] { R2937 += 1, R2893 += 1, R2620 += 1, R2621 += 1 };
  s2 -> s1 [85, 65535] { R2937 += 1, R2893 += 1, R2620 += 1, R2621 += 1 };
  s3 -> s3 [0, 65535] { R2937 += 1, R2893 += 1, R2620 += 1, R2621 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R2937 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2937 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2937 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 83] { R2939 += 1, R2895 += 1, R2624 += 1, R2625 += 1 };
  s0 -> s0 [0, 65535] { R2938 += 1, R2939 += 1 };
  s0 -> s2 [0, 65535] { R2939 += 1, R2894 += 1, R2895 += 1 };
  s0 -> s3 [84, 84] { R2939 += 1, R2895 += 1, R2624 += 1, R2625 += 1 };
  s0 -> s4 [84, 84] { R2939 += 1, R2895 += 1, R2624 += 1, R2625 += 1 };
  s0 -> s1 [85, 65535] { R2939 += 1, R2895 += 1, R2624 += 1, R2625 += 1 };
  s1 -> s1 [0, 83] { R2939 += 1, R2895 += 1, R2624 += 1, R2625 += 1 };
  s1 -> s1 [0, 65535] { R2939 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [84, 84] { R2939 += 1, R2895 += 1, R2624 += 1, R2625 += 1 };
  s1 -> s4 [84, 84] { R2939 += 1, R2895 += 1, R2624 += 1, R2625 += 1 };
  s1 -> s1 [85, 65535] { R2939 += 1, R2895 += 1, R2624 += 1, R2625 += 1 };
  s2 -> s1 [0, 83] { R2939 += 1, R2895 += 1, R2624 += 1, R2625 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2939 += 1, R2894 += 1, R2895 += 1 };
  s2 -> s3 [84, 84] { R2939 += 1, R2895 += 1, R2624 += 1, R2625 += 1 };
  s2 -> s4 [84, 84] { R2939 += 1, R2895 += 1, R2624 += 1, R2625 += 1 };
  s2 -> s1 [85, 65535] { R2939 += 1, R2895 += 1, R2624 += 1, R2625 += 1 };
  s3 -> s3 [0, 65535] { R2939 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2939 += 1, R2895 += 1, R2624 += 1, R2625 += 1 };
  s4 -> s6 [0, 65535] { R2939 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2939 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 83] { R2941 += 1, R2897 += 1, R2839 += 1 };
  s0 -> s2 [0, 83] { R2941 += 1, R2897 += 1, R2838 += 1, R2839 += 1 };
  s0 -> s3 [0, 65535] { R2941 += 1, R2896 += 1, R2897 += 1 };
  s0 -> s0 [0, 65535] { R2940 += 1, R2941 += 1 };
  s0 -> s4 [84, 84] { R2941 += 1, R2897 += 1, R2839 += 1 };
  s0 -> s5 [84, 84] { R2941 += 1, R2897 += 1, R2839 += 1 };
  s0 -> s6 [84, 84] { R2941 += 1, R2897 += 1, R2838 += 1, R2839 += 1 };
  s0 -> s7 [84, 84] { R2941 += 1, R2897 += 1, R2838 += 1, R2839 += 1 };
  s0 -> s8 [85, 85] { R2941 += 1, R2897 += 1, R2839 += 1 };
  s0 -> s2 [85, 65535] { R2941 += 1, R2897 += 1, R2838 += 1, R2839 += 1 };
  s0 -> s1 [89, 65535] { R2941 += 1, R2897 += 1, R2839 += 1 };
  s1 -> s1 [0, 83] { R2941 += 1, R2897 += 1, R2839 += 1 };
  s1 -> s4 [84, 84] { R2941 += 1, R2897 += 1 };
  s1 -> s5 [84, 84] { R2941 += 1, R2897 += 1 };
  s1 -> s8 [85, 85] { R2941 += 1, R2897 += 1, R2839 += 1 };
  s1 -> s1 [85, 65535] { R2941 += 1, R2897 += 1 };
  s1 -> s1 [89, 65535] { R2941 += 1, R2897 += 1, R2839 += 1 };
  s2 -> s1 [0, 83] { R2941 += 1, R2897 += 1, R2839 += 1 };
  s2 -> s2 [0, 83] { R2941 += 1, R2897 += 1, R2838 += 1, R2839 += 1 };
  s2 -> s4 [84, 84] { R2941 += 1, R2897 += 1, R2839 += 1 };
  s2 -> s5 [84, 84] { R2941 += 1, R2897 += 1, R2839 += 1 };
  s2 -> s6 [84, 84] { R2941 += 1, R2897 += 1, R2838 += 1, R2839 += 1 };
  s2 -> s7 [84, 84] { R2941 += 1, R2897 += 1, R2838 += 1, R2839 += 1 };
  s2 -> s8 [85, 85] { R2941 += 1, R2897 += 1, R2839 += 1 };
  s2 -> s2 [85, 65535] { R2941 += 1, R2897 += 1, R2838 += 1, R2839 += 1 };
  s2 -> s1 [89, 65535] { R2941 += 1, R2897 += 1, R2839 += 1 };
  s3 -> s1 [0, 83] { R2941 += 1, R2897 += 1, R2839 += 1 };
  s3 -> s2 [0, 83] { R2941 += 1, R2897 += 1, R2838 += 1, R2839 += 1 };
  s3 -> s3 [0, 65535] { R2941 += 1, R2896 += 1, R2897 += 1 };
  s3 -> s4 [84, 84] { R2941 += 1, R2897 += 1, R2839 += 1 };
  s3 -> s5 [84, 84] { R2941 += 1, R2897 += 1, R2839 += 1 };
  s3 -> s6 [84, 84] { R2941 += 1, R2897 += 1, R2838 += 1, R2839 += 1 };
  s3 -> s7 [84, 84] { R2941 += 1, R2897 += 1, R2838 += 1, R2839 += 1 };
  s3 -> s8 [85, 85] { R2941 += 1, R2897 += 1, R2839 += 1 };
  s3 -> s2 [85, 65535] { R2941 += 1, R2897 += 1, R2838 += 1, R2839 += 1 };
  s3 -> s1 [89, 65535] { R2941 += 1, R2897 += 1, R2839 += 1 };
  s4 -> s4 [0, 84] { R2941 += 1, R2897 += 1, R2839 += 1 };
  s4 -> s4 [0, 65535] { R2941 += 1, R2897 += 1 };
  s4 -> s11 [85, 85] { R2941 += 1, R2897 += 1, R2839 += 1 };
  s4 -> s4 [89, 65535] { R2941 += 1, R2897 += 1, R2839 += 1 };
  s7 -> s4 [0, 84] { R2941 += 1, R2897 += 1, R2839 += 1 };
  s7 -> s7 [0, 65535] { R2941 += 1, R2897 += 1, R2838 += 1, R2839 += 1 };
  s7 -> s11 [85, 85] { R2941 += 1, R2897 += 1, R2839 += 1 };
  s7 -> s4 [89, 65535] { R2941 += 1, R2897 += 1, R2839 += 1 };
  s8 -> s8 [0, 83] { R2941 += 1, R2897 += 1 };
  s8 -> s8 [0, 65535] { R2941 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [84, 84] { R2941 += 1, R2897 += 1 };
  s8 -> s11 [84, 84] { R2941 += 1, R2897 += 1 };
  s8 -> s8 [85, 65535] { R2941 += 1, R2897 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R2941 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s12 [0, 65535] { R2941 += 1 };
  s11 -> s11 [0, 65535] { R2941 += 1, R2897 += 1 };
  s11 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R2941 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [116, 116];
  accepting s1;
};
};
synchronised {  // Automata constraining P62
automaton P62_0 {
  init s0;
  s0 -> s1 [117, 117];
  accepting s1;
};
};
constraint R1 = R2857 && R2 = R2941 && R20 - R2941 = -1 && R21 = R2941 && R22 - R2941 = -1 && R23 = R2941 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R2623 + -1*R2621 - R53 = 0 && R52 + R2622 + R2620 = 0 && R2856 = 0 && R2882 = 0 && R2883 = 0 && R2896 = 0 && R2897 = 0 && R2898 = 0 && R2899 = R2941 && R2900 = 0 && R2901 = R2941 && R2902 = 0 && R2903 = R2941 && R2904 = 0 && R2905 = R2941 && R2906 = 0 && R2907 = R2941 && R2908 = 0 && R2909 = R2941 && R2910 = 0 && R2911 = R2941 && R2912 = 0 && R2913 = R2941 && R2914 = 0 && R2915 = R2941 && R2916 = 0 && R2917 = R2941 && R2918 = 0 && R2919 = R2941 && R2920 = 0 && R2921 = R2941 && R2922 = 0 && R2923 = R2941 && R2924 = 0 && R2925 = R2941 && R2926 = 0 && R2927 = R2941 && R2928 = 0 && R2929 = R2941 && R2930 = 0 && R2931 = R2941 && R2932 = 0 && R2933 = R2941 && R2934 = 0 && R2935 = R2941 && R2936 = 0 && R2937 = R2941 && R2938 = 0 && R2939 = R2941 && R2940 = 0 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R2623 + -1*R2621 - R53 < 1 && -1 < R2857 && 0 < R2941 && (R48 + R79 + R76 != 0 || ((R42 + R72 + R70 != 0 || R43 + R73 + R71 + -1*R2623 + -1*R2621 - R53 = 0 || R53 + R2623 + R2621 < 1) && (R42 + R72 + R70 = 0 || R53 + R2623 + R2621 < 1))) && (R48 + R79 + R76 != 0 || ((R46 + R77 + R74 != 0 || R47 + R78 + R75 + -1*R2623 + -1*R2621 - R53 = 0 || R53 + R2623 + R2621 < 1) && (R46 + R77 + R74 = 0 || R53 + R2623 + R2621 < 1))) && (R2842 != 0 || R2843 = R2857 || (R17 = 0 && R2857 = 0)) && (R2844 != 0 || R2845 = R2857 || (R17 = 0 && R2857 = 0)) && (R2846 != 0 || R2847 = R2857 || (R17 = 0 && R2857 = 0)) && (R2848 != 0 || R2849 = R2857 || (R17 = 0 && R2857 = 0)) && (R2850 != 0 || R2851 = R2857 || (R17 = 0 && R2857 = 0)) && (R2852 != 0 || R2853 = R2857 || (R17 = 0 && R2857 = 0)) && (R2854 != 0 || R2855 = R2857 || (R17 = 0 && R2857 = 0)) && (R2858 != 0 || R2857 = R2859 || (R17 = 0 && R2857 = 0)) && (R2860 != 0 || R2857 = R2861 || (R17 = 0 && R2857 = 0)) && (R18 = 0 || (R2880 = 0 && R2881 = 0)) && (R18 = 0 || (R2884 = 0 && R2885 = 0)) && (R18 = 0 || (R2886 = 0 && R2887 = 0)) && (R18 = 0 || (R2888 = 0 && R2889 = 0)) && (R18 = 0 || (R2890 = 0 && R2891 = 0)) && (R18 = 0 || (R2892 = 0 && R2893 = 0)) && (R18 = 0 || (R2894 = 0 && R2895 = 0)) && (R19 = 0 || (R2862 = 0 && R2863 = 0)) && (R19 = 0 || (R2864 = 0 && R2865 = 0)) && (R19 = 0 || (R2866 = 0 && R2867 = 0)) && (R19 = 0 || (R2868 = 0 && R2869 = 0)) && (R19 = 0 || (R2870 = 0 && R2871 = 0)) && (R19 = 0 || (R2872 = 0 && R2873 = 0)) && (R19 = 0 || (R2874 = 0 && R2875 = 0)) && (R19 = 0 || (R2876 = 0 && R2877 = 0)) && (R19 = 0 || (R2878 = 0 && R2879 = 0)) && (R48 + R79 + R76 = 0 || (R42 + R72 + R70 = 0 && R43 + R73 + R71 + -1*R2623 + -1*R2621 - R53 = 0)) && (R48 + R79 + R76 = 0 || (R46 + R77 + R74 = 0 && R47 + R78 + R75 + -1*R2623 + -1*R2621 - R53 = 0)) && (R58 + R2629 + R2626 = 0 || (R56 + R2627 + R2624 = 0 && R57 + R2628 + R2625 = 0)) && (R58 + R2629 + R2626 = 0 || (R62 + R2840 + R2838 = 0 && R63 + R2841 + R2839 = 0)) && (R2842 = 0 || (R17 = 0 && R2857 = 0)) && (R2844 = 0 || (R17 = 0 && R2857 = 0)) && (R2846 = 0 || (R17 = 0 && R2857 = 0)) && (R2848 = 0 || (R17 = 0 && R2857 = 0)) && (R2850 = 0 || (R17 = 0 && R2857 = 0)) && (R2852 = 0 || (R17 = 0 && R2857 = 0)) && (R2854 = 0 || (R17 = 0 && R2857 = 0)) && (R2858 = 0 || (R17 = 0 && R2857 = 0)) && (R2860 = 0 || (R17 = 0 && R2857 = 0));
// End of Parikh automata intersection problem
