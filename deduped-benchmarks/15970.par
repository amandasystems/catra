// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R12, R1246, R1247, R1248, R1249, R1250, R1251, R1252, R1253, R1254, R1255, R1256, R1257, R1258, R1259, R1260, R1261, R1262, R1263, R1264, R1265, R1266, R1267, R1268, R1269, R1270, R1271, R1272, R1273, R1274, R1275, R1276, R1277, R1278, R1279, R1280, R1281, R1282, R1283, R1284, R1285, R1286, R1287, R1288, R1289, R1290, R1291, R1292, R1293, R1294, R1295, R1296, R1297, R1298, R1299, R1300, R1301, R1302, R1303, R1304, R1305, R1306, R1307, R1308, R1309, R1310, R1311, R1312, R1313, R1314, R1315, R1316, R1317, R1318, R1319, R1320, R1321, R1322, R1323, R1324, R1325, R1326, R1327, R1328, R1329, R1330, R1331, R1332, R1333, R1334, R1335, R1336, R1337, R1338, R1339, R1340, R1341, R1342, R1343, R1344, R1345, R1346, R1347, R1348, R1349, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R70, R71, R72, R73, R74, R75, R76, R77, R78, R79, R8, R80, R81, R82, R83, R928, R929, R930, R931, R932, R933;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [84, 84];
  s0 -> s0 [85, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [84, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 83];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [84, 84];
  s0 -> s1 [85, 65535];
  s1 -> s1 [0, 83];
  s1 -> s2 [84, 84];
  s1 -> s1 [85, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R21 += 1 };
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R25 += 1 };
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R1270 += 1, R1271 += 1 };
  s0 -> s1 [0, 65535] { R1271 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R1271 += 1, R19 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 83] { R1273 += 1 };
  s0 -> s0 [0, 65535] { R1272 += 1, R1273 += 1 };
  s0 -> s2 [84, 84] { R1273 += 1 };
  s0 -> s3 [84, 84] { R1273 += 1 };
  s0 -> s1 [86, 65535] { R1273 += 1 };
  s1 -> s1 [0, 83] { R1273 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R1273 += 1 };
  s1 -> s3 [84, 84] { R1273 += 1 };
  s1 -> s1 [86, 65535] { R1273 += 1 };
  s2 -> s2 [0, 84] { R1273 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [86, 65535] { R1273 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 83] { R1275 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R1274 += 1, R1275 += 1 };
  s0 -> s2 [84, 84] { R1275 += 1, R38 += 1 };
  s0 -> s3 [84, 84] { R1275 += 1, R38 += 1 };
  s0 -> s1 [85, 65535] { R1275 += 1, R38 += 1 };
  s1 -> s1 [0, 83] { R1275 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R1275 += 1, R38 += 1 };
  s1 -> s3 [84, 84] { R1275 += 1, R38 += 1 };
  s1 -> s1 [85, 65535] { R1275 += 1, R38 += 1 };
  s2 -> s2 [0, 65535] { R1275 += 1, R38 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 83] { R1277 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R1276 += 1, R1277 += 1 };
  s0 -> s2 [84, 84] { R1277 += 1, R40 += 1 };
  s0 -> s3 [84, 84] { R1277 += 1, R40 += 1 };
  s0 -> s1 [85, 65535] { R1277 += 1, R40 += 1 };
  s1 -> s1 [0, 83] { R1277 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R1277 += 1, R40 += 1 };
  s1 -> s3 [84, 84] { R1277 += 1, R40 += 1 };
  s1 -> s1 [85, 65535] { R1277 += 1, R40 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1277 += 1, R40 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 83] { R1279 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R1278 += 1, R1279 += 1 };
  s0 -> s2 [84, 84] { R1279 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [84, 84] { R1279 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [85, 65535] { R1279 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 83] { R1279 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R1279 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [84, 84] { R1279 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [85, 65535] { R1279 += 1, R42 += 1, R43 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1279 += 1, R42 += 1, R43 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 83] { R1281 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R1280 += 1, R1281 += 1 };
  s0 -> s2 [84, 84] { R1281 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [84, 84] { R1281 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [85, 65535] { R1281 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 83] { R1281 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R1281 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [84, 84] { R1281 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [85, 65535] { R1281 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535] { R1281 += 1, R46 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 83] { R1283 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R1282 += 1, R1283 += 1 };
  s0 -> s2 [84, 84] { R1283 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [84, 84] { R1283 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [85, 65535] { R1283 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 83] { R1283 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R1283 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [84, 84] { R1283 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [85, 65535] { R1283 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535] { R1283 += 1, R52 += 1, R53 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 83] { R1285 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R1284 += 1, R1285 += 1 };
  s0 -> s2 [84, 84] { R1285 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [84, 84] { R1285 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [85, 65535] { R1285 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 83] { R1285 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R1285 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [84, 84] { R1285 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [85, 65535] { R1285 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1285 += 1, R56 += 1, R57 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 83] { R1287 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R1286 += 1, R1287 += 1 };
  s0 -> s2 [84, 84] { R1287 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [84, 84] { R1287 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [85, 65535] { R1287 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 83] { R1287 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R1287 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [84, 84] { R1287 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [85, 65535] { R1287 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R1287 += 1, R62 += 1, R63 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 83] { R1307 += 1 };
  s0 -> s0 [0, 65535] { R1306 += 1, R1307 += 1 };
  s0 -> s2 [84, 84] { R1307 += 1 };
  s0 -> s1 [85, 65535] { R1307 += 1 };
  s1 -> s1 [0, 83] { R1307 += 1 };
  s1 -> s2 [84, 84] { R1307 += 1 };
  s1 -> s1 [85, 65535] { R1307 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1307 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R1308 += 1, R1309 += 1 };
  s0 -> s1 [0, 65535] { R1309 += 1, R1 += 1 };
  s1 -> s1 [0, 65535] { R1309 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 83] { R1311 += 1 };
  s0 -> s2 [0, 65535] { R1311 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R1310 += 1, R1311 += 1 };
  s0 -> s3 [84, 84] { R1311 += 1 };
  s0 -> s1 [85, 65535] { R1311 += 1 };
  s1 -> s1 [0, 83] { R1311 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [84, 84] { R1311 += 1 };
  s1 -> s1 [85, 65535] { R1311 += 1 };
  s2 -> s1 [0, 83] { R1311 += 1 };
  s2 -> s2 [0, 65535] { R1311 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [84, 84] { R1311 += 1 };
  s2 -> s1 [85, 65535] { R1311 += 1 };
  s3 -> s3 [0, 65535] { R1311 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 83] { R1313 += 1, R1251 += 1 };
  s0 -> s0 [0, 65535] { R1312 += 1, R1313 += 1 };
  s0 -> s2 [0, 65535] { R1313 += 1, R1250 += 1, R1251 += 1 };
  s0 -> s1 [85, 65535] { R1313 += 1, R1251 += 1 };
  s1 -> s1 [0, 83] { R1313 += 1, R1251 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1313 += 1 };
  s1 -> s1 [85, 65535] { R1313 += 1, R1251 += 1 };
  s2 -> s1 [0, 83] { R1313 += 1, R1251 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1313 += 1, R1250 += 1, R1251 += 1 };
  s2 -> s1 [85, 65535] { R1313 += 1, R1251 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R1315 += 1, R1253 += 1, R17 += 1 };
  s0 -> s0 [0, 65535] { R1314 += 1, R1315 += 1 };
  s0 -> s2 [0, 65535] { R1315 += 1, R1252 += 1, R1253 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R1315 += 1 };
  s1 -> s1 [0, 65535] { R1315 += 1, R1253 += 1, R17 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R1315 += 1, R1253 += 1, R17 += 1 };
  s2 -> s2 [0, 65535] { R1315 += 1, R1252 += 1, R1253 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1315 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 65535] { R1317 += 1, R1255 += 1 };
  s0 -> s0 [0, 65535] { R1316 += 1, R1317 += 1 };
  s0 -> s2 [0, 65535] { R1317 += 1, R1254 += 1, R1255 += 1 };
  s1 -> s1 [0, 65535] { R1317 += 1, R1255 += 1 };
  s1 -> s4 [0, 65535] { R1317 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R1317 += 1, R1255 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1317 += 1, R1254 += 1, R1255 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1317 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_23 {
  init s0;
  s0 -> s0 [0, 65535] { R1318 += 1, R1319 += 1 };
  s0 -> s1 [0, 65535] { R1319 += 1, R1257 += 1, R67 += 1 };
  s0 -> s2 [0, 65535] { R1319 += 1, R1256 += 1, R1257 += 1 };
  s1 -> s4 [0, 65535] { R1319 += 1 };
  s1 -> s1 [0, 65535] { R1319 += 1, R1257 += 1, R67 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R1319 += 1, R1257 += 1, R67 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1319 += 1, R1256 += 1, R1257 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1319 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 84] { R1321 += 1, R1259 += 1 };
  s0 -> s0 [0, 65535] { R1320 += 1, R1321 += 1 };
  s0 -> s2 [0, 65535] { R1321 += 1, R1258 += 1, R1259 += 1 };
  s0 -> s3 [0, 65535] { R1321 += 1, R1259 += 1, R69 += 1 };
  s0 -> s1 [86, 65535] { R1321 += 1, R1259 += 1 };
  s1 -> s1 [0, 84] { R1321 += 1, R1259 += 1 };
  s1 -> s1 [0, 65535] { R1321 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [86, 65535] { R1321 += 1, R1259 += 1 };
  s2 -> s1 [0, 84] { R1321 += 1, R1259 += 1 };
  s2 -> s2 [0, 65535] { R1321 += 1, R1258 += 1, R1259 += 1 };
  s2 -> s3 [0, 65535] { R1321 += 1, R1259 += 1, R69 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [86, 65535] { R1321 += 1, R1259 += 1 };
  s3 -> s1 [0, 84] { R1321 += 1, R1259 += 1 };
  s3 -> s4 [0, 65535] { R1321 += 1 };
  s3 -> s3 [0, 65535] { R1321 += 1, R1259 += 1, R69 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [86, 65535] { R1321 += 1, R1259 += 1 };
  s4 -> s4 [0, 65535] { R1321 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 84] { R1323 += 1, R1261 += 1, R73 += 1 };
  s0 -> s2 [0, 65535] { R1323 += 1, R1261 += 1, R72 += 1, R73 += 1 };
  s0 -> s3 [0, 65535] { R1323 += 1, R1260 += 1, R1261 += 1 };
  s0 -> s0 [0, 65535] { R1322 += 1, R1323 += 1 };
  s0 -> s1 [86, 65535] { R1323 += 1, R1261 += 1, R73 += 1 };
  s1 -> s1 [0, 84] { R1323 += 1, R1261 += 1, R73 += 1 };
  s1 -> s1 [0, 65535] { R1323 += 1, R1261 += 1 };
  s1 -> s5 [0, 65535] { R1323 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [86, 65535] { R1323 += 1, R1261 += 1, R73 += 1 };
  s2 -> s1 [0, 84] { R1323 += 1, R1261 += 1, R73 += 1 };
  s2 -> s2 [0, 65535] { R1323 += 1, R1261 += 1, R72 += 1, R73 += 1 };
  s2 -> s5 [0, 65535] { R1323 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [86, 65535] { R1323 += 1, R1261 += 1, R73 += 1 };
  s3 -> s1 [0, 84] { R1323 += 1, R1261 += 1, R73 += 1 };
  s3 -> s2 [0, 65535] { R1323 += 1, R1261 += 1, R72 += 1, R73 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1323 += 1, R1260 += 1, R1261 += 1 };
  s3 -> s1 [86, 65535] { R1323 += 1, R1261 += 1, R73 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1323 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R1325 += 1, R1263 += 1, R78 += 1, R79 += 1 };
  s0 -> s0 [0, 65535] { R1324 += 1, R1325 += 1 };
  s0 -> s2 [0, 65535] { R1325 += 1, R1263 += 1, R77 += 1, R78 += 1 };
  s0 -> s3 [0, 65535] { R1325 += 1, R1262 += 1, R1263 += 1 };
  s1 -> s1 [0, 65535] { R1325 += 1, R1263 += 1, R78 += 1, R79 += 1 };
  s1 -> s6 [0, 65535] { R1325 += 1, R1263 += 1 };
  s1 -> s5 [0, 65535] { R1325 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R1325 += 1, R1263 += 1, R78 += 1, R79 += 1 };
  s2 -> s2 [0, 65535] { R1325 += 1, R1263 += 1, R77 += 1, R78 += 1 };
  s2 -> s5 [0, 65535] { R1325 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R1325 += 1, R1263 += 1, R78 += 1, R79 += 1 };
  s3 -> s2 [0, 65535] { R1325 += 1, R1263 += 1, R77 += 1, R78 += 1 };
  s3 -> s3 [0, 65535] { R1325 += 1, R1262 += 1, R1263 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1325 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R1325 += 1, R1263 += 1 };
  s6 -> s5 [0, 65535] { R1325 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 85] { R1327 += 1, R1265 += 1, R83 += 1 };
  s0 -> s2 [0, 65535] { R1327 += 1, R1264 += 1, R1265 += 1 };
  s0 -> s0 [0, 65535] { R1326 += 1, R1327 += 1 };
  s0 -> s1 [0, 65535] { R1327 += 1, R1265 += 1 };
  s0 -> s1 [88, 65535] { R1327 += 1, R1265 += 1, R83 += 1 };
  s1 -> s1 [0, 85] { R1327 += 1, R1265 += 1, R83 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R1327 += 1 };
  s1 -> s1 [0, 65535] { R1327 += 1, R1265 += 1 };
  s1 -> s1 [88, 65535] { R1327 += 1, R1265 += 1, R83 += 1 };
  s2 -> s1 [0, 85] { R1327 += 1, R1265 += 1, R83 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1327 += 1, R1264 += 1, R1265 += 1 };
  s2 -> s1 [0, 65535] { R1327 += 1, R1265 += 1 };
  s2 -> s1 [88, 65535] { R1327 += 1, R1265 += 1, R83 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1327 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R1329 += 1, R1266 += 1, R1267 += 1 };
  s0 -> s2 [0, 65535] { R1329 += 1, R1267 += 1 };
  s0 -> s0 [0, 65535] { R1328 += 1, R1329 += 1 };
  s1 -> s1 [0, 65535] { R1329 += 1, R1266 += 1, R1267 += 1 };
  s1 -> s2 [0, 65535] { R1329 += 1, R1267 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R1329 += 1 };
  s2 -> s2 [0, 65535] { R1329 += 1, R1267 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1329 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 85] { R1331 += 1, R1269 += 1, R1249 += 1 };
  s0 -> s2 [0, 65535] { R1331 += 1, R1268 += 1, R1269 += 1 };
  s0 -> s0 [0, 65535] { R1330 += 1, R1331 += 1 };
  s0 -> s1 [0, 65535] { R1331 += 1, R1269 += 1 };
  s0 -> s1 [89, 65535] { R1331 += 1, R1269 += 1, R1249 += 1 };
  s1 -> s1 [0, 85] { R1331 += 1, R1269 += 1, R1249 += 1 };
  s1 -> s4 [0, 65535] { R1331 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1331 += 1, R1269 += 1 };
  s1 -> s1 [89, 65535] { R1331 += 1, R1269 += 1, R1249 += 1 };
  s2 -> s1 [0, 85] { R1331 += 1, R1269 += 1, R1249 += 1 };
  s2 -> s2 [0, 65535] { R1331 += 1, R1268 += 1, R1269 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R1331 += 1, R1269 += 1 };
  s2 -> s1 [89, 65535] { R1331 += 1, R1269 += 1, R1249 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1331 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R1333 += 1, R1289 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R1332 += 1, R1333 += 1 };
  s0 -> s2 [0, 65535] { R1333 += 1, R1288 += 1, R1289 += 1 };
  s1 -> s1 [0, 65535] { R1333 += 1, R1289 += 1, R18 += 1 };
  s1 -> s4 [0, 65535] { R1333 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R1333 += 1, R1289 += 1, R18 += 1 };
  s2 -> s2 [0, 65535] { R1333 += 1, R1288 += 1, R1289 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1333 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 83] { R1335 += 1, R1291 += 1 };
  s0 -> s0 [0, 65535] { R1334 += 1, R1335 += 1 };
  s0 -> s2 [0, 65535] { R1335 += 1, R1290 += 1, R1291 += 1 };
  s0 -> s3 [84, 84] { R1335 += 1, R1291 += 1 };
  s0 -> s4 [84, 84] { R1335 += 1, R1291 += 1 };
  s0 -> s5 [85, 85] { R1335 += 1, R1291 += 1 };
  s0 -> s1 [86, 65535] { R1335 += 1, R1291 += 1 };
  s1 -> s1 [0, 83] { R1335 += 1, R1291 += 1 };
  s1 -> s3 [84, 84] { R1335 += 1, R1291 += 1 };
  s1 -> s4 [84, 84] { R1335 += 1, R1291 += 1 };
  s1 -> s5 [85, 85] { R1335 += 1, R1291 += 1 };
  s1 -> s1 [86, 65535] { R1335 += 1, R1291 += 1 };
  s2 -> s1 [0, 83] { R1335 += 1, R1291 += 1 };
  s2 -> s2 [0, 65535] { R1335 += 1, R1290 += 1, R1291 += 1 };
  s2 -> s3 [84, 84] { R1335 += 1, R1291 += 1 };
  s2 -> s4 [84, 84] { R1335 += 1, R1291 += 1 };
  s2 -> s5 [85, 85] { R1335 += 1, R1291 += 1 };
  s2 -> s1 [86, 65535] { R1335 += 1, R1291 += 1 };
  s3 -> s3 [0, 84] { R1335 += 1, R1291 += 1 };
  s3 -> s7 [85, 85] { R1335 += 1, R1291 += 1 };
  s3 -> s3 [86, 65535] { R1335 += 1, R1291 += 1 };
  s5 -> s5 [0, 83] { R1335 += 1, R1291 += 1 };
  s5 -> s5 [0, 65535] { R1335 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [84, 84] { R1335 += 1, R1291 += 1 };
  s5 -> s8 [84, 84] { R1335 += 1, R1291 += 1 };
  s5 -> s5 [85, 65535] { R1335 += 1, R1291 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R1335 += 1, R1291 += 1 };
  s7 -> s9 [0, 65535] { R1335 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R1335 += 1 };
  s8 -> s6 [0, 65535];
  s9 -> s9 [0, 65535] { R1335 += 1 };
  s9 -> s6 [0, 65535];
  accepting s8, s5, s9, s6, s7;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 83] { R1337 += 1, R1293 += 1, R66 += 1 };
  s0 -> s2 [0, 65535] { R1337 += 1, R1292 += 1, R1293 += 1 };
  s0 -> s0 [0, 65535] { R1336 += 1, R1337 += 1 };
  s0 -> s3 [84, 84] { R1337 += 1, R1293 += 1, R66 += 1 };
  s0 -> s4 [84, 84] { R1337 += 1, R1293 += 1, R66 += 1 };
  s0 -> s1 [85, 65535] { R1337 += 1, R1293 += 1, R66 += 1 };
  s1 -> s1 [0, 83] { R1337 += 1, R1293 += 1, R66 += 1 };
  s1 -> s1 [0, 65535] { R1337 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [84, 84] { R1337 += 1, R1293 += 1, R66 += 1 };
  s1 -> s4 [84, 84] { R1337 += 1, R1293 += 1, R66 += 1 };
  s1 -> s1 [85, 65535] { R1337 += 1, R1293 += 1, R66 += 1 };
  s2 -> s1 [0, 83] { R1337 += 1, R1293 += 1, R66 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R1337 += 1, R1292 += 1, R1293 += 1 };
  s2 -> s3 [84, 84] { R1337 += 1, R1293 += 1, R66 += 1 };
  s2 -> s4 [84, 84] { R1337 += 1, R1293 += 1, R66 += 1 };
  s2 -> s1 [85, 65535] { R1337 += 1, R1293 += 1, R66 += 1 };
  s3 -> s3 [0, 65535] { R1337 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R1337 += 1, R1293 += 1, R66 += 1 };
  s4 -> s5 [0, 65535] { R1337 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R1337 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 83] { R1339 += 1, R1295 += 1, R68 += 1 };
  s0 -> s0 [0, 65535] { R1338 += 1, R1339 += 1 };
  s0 -> s2 [0, 65535] { R1339 += 1, R1294 += 1, R1295 += 1 };
  s0 -> s3 [84, 84] { R1339 += 1, R1295 += 1, R68 += 1 };
  s0 -> s4 [84, 84] { R1339 += 1, R1295 += 1, R68 += 1 };
  s0 -> s1 [85, 65535] { R1339 += 1, R1295 += 1, R68 += 1 };
  s1 -> s1 [0, 83] { R1339 += 1, R1295 += 1, R68 += 1 };
  s1 -> s1 [0, 65535] { R1339 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [84, 84] { R1339 += 1, R1295 += 1, R68 += 1 };
  s1 -> s4 [84, 84] { R1339 += 1, R1295 += 1, R68 += 1 };
  s1 -> s1 [85, 65535] { R1339 += 1, R1295 += 1, R68 += 1 };
  s2 -> s1 [0, 83] { R1339 += 1, R1295 += 1, R68 += 1 };
  s2 -> s2 [0, 65535] { R1339 += 1, R1294 += 1, R1295 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [84, 84] { R1339 += 1, R1295 += 1, R68 += 1 };
  s2 -> s4 [84, 84] { R1339 += 1, R1295 += 1, R68 += 1 };
  s2 -> s1 [85, 65535] { R1339 += 1, R1295 += 1, R68 += 1 };
  s3 -> s3 [0, 65535] { R1339 += 1, R1295 += 1, R68 += 1 };
  s3 -> s6 [0, 65535] { R1339 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1339 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1339 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 83] { R1341 += 1, R1297 += 1, R70 += 1, R71 += 1 };
  s0 -> s2 [0, 65535] { R1341 += 1, R1296 += 1, R1297 += 1 };
  s0 -> s0 [0, 65535] { R1340 += 1, R1341 += 1 };
  s0 -> s3 [84, 84] { R1341 += 1, R1297 += 1, R70 += 1, R71 += 1 };
  s0 -> s4 [84, 84] { R1341 += 1, R1297 += 1, R70 += 1, R71 += 1 };
  s0 -> s1 [85, 65535] { R1341 += 1, R1297 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 83] { R1341 += 1, R1297 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 65535] { R1341 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [84, 84] { R1341 += 1, R1297 += 1, R70 += 1, R71 += 1 };
  s1 -> s4 [84, 84] { R1341 += 1, R1297 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [85, 65535] { R1341 += 1, R1297 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [0, 83] { R1341 += 1, R1297 += 1, R70 += 1, R71 += 1 };
  s2 -> s2 [0, 65535] { R1341 += 1, R1296 += 1, R1297 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [84, 84] { R1341 += 1, R1297 += 1, R70 += 1, R71 += 1 };
  s2 -> s4 [84, 84] { R1341 += 1, R1297 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [85, 65535] { R1341 += 1, R1297 += 1, R70 += 1, R71 += 1 };
  s3 -> s3 [0, 65535] { R1341 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1341 += 1, R1297 += 1, R70 += 1, R71 += 1 };
  s4 -> s6 [0, 65535] { R1341 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1341 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 83] { R1343 += 1, R1299 += 1, R74 += 1, R75 += 1 };
  s0 -> s2 [0, 65535] { R1343 += 1, R1298 += 1, R1299 += 1 };
  s0 -> s0 [0, 65535] { R1342 += 1, R1343 += 1 };
  s0 -> s3 [84, 84] { R1343 += 1, R1299 += 1, R74 += 1, R75 += 1 };
  s0 -> s4 [84, 84] { R1343 += 1, R1299 += 1, R74 += 1, R75 += 1 };
  s0 -> s1 [85, 65535] { R1343 += 1, R1299 += 1, R74 += 1, R75 += 1 };
  s1 -> s1 [0, 83] { R1343 += 1, R1299 += 1, R74 += 1, R75 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1343 += 1 };
  s1 -> s3 [84, 84] { R1343 += 1, R1299 += 1, R74 += 1, R75 += 1 };
  s1 -> s4 [84, 84] { R1343 += 1, R1299 += 1, R74 += 1, R75 += 1 };
  s1 -> s1 [85, 65535] { R1343 += 1, R1299 += 1, R74 += 1, R75 += 1 };
  s2 -> s1 [0, 83] { R1343 += 1, R1299 += 1, R74 += 1, R75 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1343 += 1, R1298 += 1, R1299 += 1 };
  s2 -> s3 [84, 84] { R1343 += 1, R1299 += 1, R74 += 1, R75 += 1 };
  s2 -> s4 [84, 84] { R1343 += 1, R1299 += 1, R74 += 1, R75 += 1 };
  s2 -> s1 [85, 65535] { R1343 += 1, R1299 += 1, R74 += 1, R75 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R1343 += 1, R1299 += 1, R74 += 1, R75 += 1 };
  s3 -> s6 [0, 65535] { R1343 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1343 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1343 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 83] { R1345 += 1, R1301 += 1, R81 += 1 };
  s0 -> s2 [0, 83] { R1345 += 1, R1301 += 1, R80 += 1, R81 += 1 };
  s0 -> s0 [0, 65535] { R1344 += 1, R1345 += 1 };
  s0 -> s3 [0, 65535] { R1345 += 1, R1300 += 1, R1301 += 1 };
  s0 -> s4 [84, 84] { R1345 += 1, R1301 += 1, R81 += 1 };
  s0 -> s5 [84, 84] { R1345 += 1, R1301 += 1, R80 += 1, R81 += 1 };
  s0 -> s6 [84, 84] { R1345 += 1, R1301 += 1, R80 += 1, R81 += 1 };
  s0 -> s7 [84, 84] { R1345 += 1, R1301 += 1, R81 += 1 };
  s0 -> s1 [85, 85] { R1345 += 1, R1301 += 1, R81 += 1 };
  s0 -> s2 [85, 65535] { R1345 += 1, R1301 += 1, R80 += 1, R81 += 1 };
  s0 -> s8 [88, 88] { R1345 += 1, R1301 += 1, R81 += 1 };
  s0 -> s1 [89, 65535] { R1345 += 1, R1301 += 1, R81 += 1 };
  s1 -> s1 [0, 83] { R1345 += 1, R1301 += 1, R81 += 1 };
  s1 -> s4 [84, 84] { R1345 += 1, R1301 += 1, R81 += 1 };
  s1 -> s7 [84, 84] { R1345 += 1, R1301 += 1, R81 += 1 };
  s1 -> s1 [85, 85] { R1345 += 1, R1301 += 1, R81 += 1 };
  s1 -> s8 [88, 88] { R1345 += 1, R1301 += 1, R81 += 1 };
  s1 -> s1 [89, 65535] { R1345 += 1, R1301 += 1, R81 += 1 };
  s2 -> s1 [0, 83] { R1345 += 1, R1301 += 1, R81 += 1 };
  s2 -> s2 [0, 83] { R1345 += 1, R1301 += 1, R80 += 1, R81 += 1 };
  s2 -> s4 [84, 84] { R1345 += 1, R1301 += 1, R81 += 1 };
  s2 -> s5 [84, 84] { R1345 += 1, R1301 += 1, R80 += 1, R81 += 1 };
  s2 -> s6 [84, 84] { R1345 += 1, R1301 += 1, R80 += 1, R81 += 1 };
  s2 -> s7 [84, 84] { R1345 += 1, R1301 += 1, R81 += 1 };
  s2 -> s1 [85, 85] { R1345 += 1, R1301 += 1, R81 += 1 };
  s2 -> s2 [85, 65535] { R1345 += 1, R1301 += 1, R80 += 1, R81 += 1 };
  s2 -> s8 [88, 88] { R1345 += 1, R1301 += 1, R81 += 1 };
  s2 -> s1 [89, 65535] { R1345 += 1, R1301 += 1, R81 += 1 };
  s3 -> s1 [0, 83] { R1345 += 1, R1301 += 1, R81 += 1 };
  s3 -> s2 [0, 83] { R1345 += 1, R1301 += 1, R80 += 1, R81 += 1 };
  s3 -> s3 [0, 65535] { R1345 += 1, R1300 += 1, R1301 += 1 };
  s3 -> s4 [84, 84] { R1345 += 1, R1301 += 1, R81 += 1 };
  s3 -> s5 [84, 84] { R1345 += 1, R1301 += 1, R80 += 1, R81 += 1 };
  s3 -> s6 [84, 84] { R1345 += 1, R1301 += 1, R80 += 1, R81 += 1 };
  s3 -> s7 [84, 84] { R1345 += 1, R1301 += 1, R81 += 1 };
  s3 -> s1 [85, 85] { R1345 += 1, R1301 += 1, R81 += 1 };
  s3 -> s2 [85, 65535] { R1345 += 1, R1301 += 1, R80 += 1, R81 += 1 };
  s3 -> s8 [88, 88] { R1345 += 1, R1301 += 1, R81 += 1 };
  s3 -> s1 [89, 65535] { R1345 += 1, R1301 += 1, R81 += 1 };
  s5 -> s7 [0, 85] { R1345 += 1, R1301 += 1, R81 += 1 };
  s5 -> s5 [0, 65535] { R1345 += 1, R1301 += 1, R80 += 1, R81 += 1 };
  s5 -> s11 [88, 88] { R1345 += 1, R1301 += 1, R81 += 1 };
  s5 -> s7 [89, 65535] { R1345 += 1, R1301 += 1, R81 += 1 };
  s7 -> s7 [0, 85] { R1345 += 1, R1301 += 1, R81 += 1 };
  s7 -> s11 [88, 88] { R1345 += 1, R1301 += 1, R81 += 1 };
  s7 -> s7 [89, 65535] { R1345 += 1, R1301 += 1, R81 += 1 };
  s8 -> s8 [0, 83] { R1345 += 1, R1301 += 1, R81 += 1 };
  s8 -> s8 [0, 65535] { R1345 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [84, 84] { R1345 += 1, R1301 += 1 };
  s8 -> s11 [84, 84] { R1345 += 1, R1301 += 1 };
  s8 -> s8 [85, 85] { R1345 += 1, R1301 += 1, R81 += 1 };
  s8 -> s8 [85, 65535] { R1345 += 1, R1301 += 1 };
  s8 -> s8 [88, 65535] { R1345 += 1, R1301 += 1, R81 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R1345 += 1 };
  s11 -> s11 [0, 85] { R1345 += 1, R1301 += 1, R81 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R1345 += 1, R1301 += 1 };
  s11 -> s12 [0, 65535] { R1345 += 1 };
  s11 -> s11 [88, 65535] { R1345 += 1, R1301 += 1, R81 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R1345 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 83] { R1347 += 1, R1303 += 1, R929 += 1, R930 += 1 };
  s0 -> s2 [0, 83] { R1347 += 1, R1303 += 1, R928 += 1, R929 += 1 };
  s0 -> s3 [0, 65535] { R1347 += 1, R1302 += 1, R1303 += 1 };
  s0 -> s0 [0, 65535] { R1346 += 1, R1347 += 1 };
  s0 -> s4 [84, 84] { R1347 += 1, R1303 += 1, R928 += 1, R929 += 1 };
  s0 -> s5 [84, 84] { R1347 += 1, R1303 += 1, R929 += 1, R930 += 1 };
  s0 -> s6 [84, 84] { R1347 += 1, R1303 += 1, R928 += 1, R929 += 1 };
  s0 -> s7 [84, 84] { R1347 += 1, R1303 += 1, R929 += 1, R930 += 1 };
  s0 -> s1 [85, 65535] { R1347 += 1, R1303 += 1, R929 += 1, R930 += 1 };
  s0 -> s2 [85, 65535] { R1347 += 1, R1303 += 1, R928 += 1, R929 += 1 };
  s1 -> s1 [0, 83] { R1347 += 1, R1303 += 1, R929 += 1, R930 += 1 };
  s1 -> s11 [0, 83] { R1347 += 1, R1303 += 1 };
  s1 -> s5 [84, 84] { R1347 += 1, R1303 += 1, R929 += 1, R930 += 1 };
  s1 -> s8 [84, 84] { R1347 += 1, R1303 += 1 };
  s1 -> s7 [84, 84] { R1347 += 1, R1303 += 1, R929 += 1, R930 += 1 };
  s1 -> s12 [84, 84] { R1347 += 1, R1303 += 1 };
  s1 -> s1 [85, 65535] { R1347 += 1, R1303 += 1, R929 += 1, R930 += 1 };
  s1 -> s11 [85, 65535] { R1347 += 1, R1303 += 1 };
  s2 -> s1 [0, 83] { R1347 += 1, R1303 += 1, R929 += 1, R930 += 1 };
  s2 -> s2 [0, 83] { R1347 += 1, R1303 += 1, R928 += 1, R929 += 1 };
  s2 -> s4 [84, 84] { R1347 += 1, R1303 += 1, R928 += 1, R929 += 1 };
  s2 -> s5 [84, 84] { R1347 += 1, R1303 += 1, R929 += 1, R930 += 1 };
  s2 -> s6 [84, 84] { R1347 += 1, R1303 += 1, R928 += 1, R929 += 1 };
  s2 -> s7 [84, 84] { R1347 += 1, R1303 += 1, R929 += 1, R930 += 1 };
  s2 -> s1 [85, 65535] { R1347 += 1, R1303 += 1, R929 += 1, R930 += 1 };
  s2 -> s2 [85, 65535] { R1347 += 1, R1303 += 1, R928 += 1, R929 += 1 };
  s3 -> s1 [0, 83] { R1347 += 1, R1303 += 1, R929 += 1, R930 += 1 };
  s3 -> s2 [0, 83] { R1347 += 1, R1303 += 1, R928 += 1, R929 += 1 };
  s3 -> s3 [0, 65535] { R1347 += 1, R1302 += 1, R1303 += 1 };
  s3 -> s4 [84, 84] { R1347 += 1, R1303 += 1, R928 += 1, R929 += 1 };
  s3 -> s5 [84, 84] { R1347 += 1, R1303 += 1, R929 += 1, R930 += 1 };
  s3 -> s6 [84, 84] { R1347 += 1, R1303 += 1, R928 += 1, R929 += 1 };
  s3 -> s7 [84, 84] { R1347 += 1, R1303 += 1, R929 += 1, R930 += 1 };
  s3 -> s1 [85, 65535] { R1347 += 1, R1303 += 1, R929 += 1, R930 += 1 };
  s3 -> s2 [85, 65535] { R1347 += 1, R1303 += 1, R928 += 1, R929 += 1 };
  s4 -> s4 [0, 65535] { R1347 += 1, R1303 += 1, R928 += 1, R929 += 1 };
  s4 -> s7 [0, 65535] { R1347 += 1, R1303 += 1, R929 += 1, R930 += 1 };
  s7 -> s8 [0, 65535] { R1347 += 1, R1303 += 1 };
  s7 -> s7 [0, 65535] { R1347 += 1, R1303 += 1, R929 += 1, R930 += 1 };
  s8 -> s8 [0, 65535] { R1347 += 1, R1303 += 1 };
  s8 -> s9 [0, 65535] { R1347 += 1 };
  s8 -> s10 [0, 65535];
  s9 -> s9 [0, 65535] { R1347 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s11 [0, 83] { R1347 += 1, R1303 += 1 };
  s11 -> s11 [0, 65535] { R1347 += 1 };
  s11 -> s10 [0, 65535];
  s11 -> s8 [84, 84] { R1347 += 1, R1303 += 1 };
  s11 -> s12 [84, 84] { R1347 += 1, R1303 += 1 };
  s11 -> s11 [85, 65535] { R1347 += 1, R1303 += 1 };
  s12 -> s12 [0, 65535] { R1347 += 1 };
  s12 -> s10 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 83] { R1349 += 1, R1305 += 1, R1247 += 1 };
  s0 -> s2 [0, 83] { R1349 += 1, R1305 += 1, R1246 += 1, R1247 += 1 };
  s0 -> s3 [0, 65535] { R1349 += 1, R1304 += 1, R1305 += 1 };
  s0 -> s0 [0, 65535] { R1348 += 1, R1349 += 1 };
  s0 -> s4 [84, 84] { R1349 += 1, R1305 += 1, R1247 += 1 };
  s0 -> s5 [84, 84] { R1349 += 1, R1305 += 1, R1246 += 1, R1247 += 1 };
  s0 -> s6 [84, 84] { R1349 += 1, R1305 += 1, R1246 += 1, R1247 += 1 };
  s0 -> s7 [84, 84] { R1349 += 1, R1305 += 1, R1247 += 1 };
  s0 -> s8 [85, 85] { R1349 += 1, R1305 += 1, R1247 += 1 };
  s0 -> s2 [85, 65535] { R1349 += 1, R1305 += 1, R1246 += 1, R1247 += 1 };
  s0 -> s1 [89, 65535] { R1349 += 1, R1305 += 1, R1247 += 1 };
  s1 -> s1 [0, 83] { R1349 += 1, R1305 += 1, R1247 += 1 };
  s1 -> s4 [84, 84] { R1349 += 1, R1305 += 1 };
  s1 -> s7 [84, 84] { R1349 += 1, R1305 += 1 };
  s1 -> s8 [85, 85] { R1349 += 1, R1305 += 1, R1247 += 1 };
  s1 -> s1 [85, 65535] { R1349 += 1, R1305 += 1 };
  s1 -> s1 [89, 65535] { R1349 += 1, R1305 += 1, R1247 += 1 };
  s2 -> s1 [0, 83] { R1349 += 1, R1305 += 1, R1247 += 1 };
  s2 -> s2 [0, 83] { R1349 += 1, R1305 += 1, R1246 += 1, R1247 += 1 };
  s2 -> s4 [84, 84] { R1349 += 1, R1305 += 1, R1247 += 1 };
  s2 -> s5 [84, 84] { R1349 += 1, R1305 += 1, R1246 += 1, R1247 += 1 };
  s2 -> s6 [84, 84] { R1349 += 1, R1305 += 1, R1246 += 1, R1247 += 1 };
  s2 -> s7 [84, 84] { R1349 += 1, R1305 += 1, R1247 += 1 };
  s2 -> s8 [85, 85] { R1349 += 1, R1305 += 1, R1247 += 1 };
  s2 -> s2 [85, 65535] { R1349 += 1, R1305 += 1, R1246 += 1, R1247 += 1 };
  s2 -> s1 [89, 65535] { R1349 += 1, R1305 += 1, R1247 += 1 };
  s3 -> s1 [0, 83] { R1349 += 1, R1305 += 1, R1247 += 1 };
  s3 -> s2 [0, 83] { R1349 += 1, R1305 += 1, R1246 += 1, R1247 += 1 };
  s3 -> s3 [0, 65535] { R1349 += 1, R1304 += 1, R1305 += 1 };
  s3 -> s4 [84, 84] { R1349 += 1, R1305 += 1, R1247 += 1 };
  s3 -> s5 [84, 84] { R1349 += 1, R1305 += 1, R1246 += 1, R1247 += 1 };
  s3 -> s6 [84, 84] { R1349 += 1, R1305 += 1, R1246 += 1, R1247 += 1 };
  s3 -> s7 [84, 84] { R1349 += 1, R1305 += 1, R1247 += 1 };
  s3 -> s8 [85, 85] { R1349 += 1, R1305 += 1, R1247 += 1 };
  s3 -> s2 [85, 65535] { R1349 += 1, R1305 += 1, R1246 += 1, R1247 += 1 };
  s3 -> s1 [89, 65535] { R1349 += 1, R1305 += 1, R1247 += 1 };
  s4 -> s4 [0, 84] { R1349 += 1, R1305 += 1, R1247 += 1 };
  s4 -> s4 [0, 65535] { R1349 += 1, R1305 += 1 };
  s4 -> s10 [85, 85] { R1349 += 1, R1305 += 1, R1247 += 1 };
  s4 -> s4 [89, 65535] { R1349 += 1, R1305 += 1, R1247 += 1 };
  s5 -> s4 [0, 84] { R1349 += 1, R1305 += 1, R1247 += 1 };
  s5 -> s5 [0, 65535] { R1349 += 1, R1305 += 1, R1246 += 1, R1247 += 1 };
  s5 -> s10 [85, 85] { R1349 += 1, R1305 += 1, R1247 += 1 };
  s5 -> s4 [89, 65535] { R1349 += 1, R1305 += 1, R1247 += 1 };
  s8 -> s8 [0, 83] { R1349 += 1, R1305 += 1, R1247 += 1 };
  s8 -> s8 [0, 65535] { R1349 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [84, 84] { R1349 += 1, R1305 += 1 };
  s8 -> s11 [84, 84] { R1349 += 1, R1305 += 1 };
  s8 -> s8 [85, 85] { R1349 += 1, R1305 += 1, R1247 += 1 };
  s8 -> s8 [85, 65535] { R1349 += 1, R1305 += 1 };
  s8 -> s8 [89, 65535] { R1349 += 1, R1305 += 1, R1247 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 85] { R1349 += 1, R1305 += 1, R1247 += 1 };
  s10 -> s12 [0, 65535] { R1349 += 1 };
  s10 -> s10 [0, 65535] { R1349 += 1, R1305 += 1 };
  s10 -> s9 [0, 65535];
  s10 -> s10 [89, 65535] { R1349 += 1, R1305 += 1, R1247 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R1349 += 1 };
  s12 -> s12 [0, 65535] { R1349 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [116, 116];
  accepting s1;
};
};
synchronised {  // Automata constraining P62
automaton P62_0 {
  init s0;
  s0 -> s1 [117, 117];
  accepting s1;
};
};
constraint R2 = R1349 && R20 - R1349 = -1 && R21 = R1349 && R22 - R1349 = -1 && R23 = R1349 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R83 + -1*R81 - R53 = 0 && R52 + R82 + R80 = 0 && R1290 = 0 && R1291 = 0 && R1300 = 0 && R1301 = 0 && R1302 = 0 && R1303 = 0 && R1304 = 0 && R1305 = 0 && R1306 = 0 && R1307 = R1349 && R1308 = 0 && R1309 = R1349 && R1310 = 0 && R1311 = R1349 && R1312 = 0 && R1313 = R1349 && R1314 = 0 && R1315 = R1349 && R1316 = 0 && R1317 = R1349 && R1318 = 0 && R1319 = R1349 && R1320 = 0 && R1321 = R1349 && R1322 = 0 && R1323 = R1349 && R1324 = 0 && R1325 = R1349 && R1326 = 0 && R1327 = R1349 && R1328 = 0 && R1329 = R1349 && R1330 = 0 && R1331 = R1349 && R1332 = 0 && R1333 = R1349 && R1334 = 0 && R1335 = R1349 && R1336 = 0 && R1337 = R1349 && R1338 = 0 && R1339 = R1349 && R1340 = 0 && R1341 = R1349 && R1342 = 0 && R1343 = R1349 && R1344 = 0 && R1345 = R1349 && R1346 = 0 && R1347 = R1349 && R1348 = 0 && -1 < R1 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R83 + -1*R81 - R53 < 1 && 0 < R1349 && (R1 != 0 || R17 = 0 || (R1250 = 0 && R1251 = 0)) && (R1 != 0 || R17 = 0 || (R1252 = 0 && R1253 = 0)) && (R1 != 0 || R17 = 0 || (R1254 = 0 && R1255 = 0)) && (R1 != 0 || R17 = 0 || (R1256 = 0 && R1257 = 0)) && (R1 != 0 || R17 = 0 || (R1258 = 0 && R1259 = 0)) && (R1 != 0 || R17 = 0 || (R1260 = 0 && R1261 = 0)) && (R1 != 0 || R17 = 0 || (R1262 = 0 && R1263 = 0)) && (R1 != 0 || R17 = 0 || (R1264 = 0 && R1265 = 0)) && (R1 != 0 || R17 = 0 || (R1266 = 0 && R1267 = 0)) && (R1 != 0 || R17 = 0 || (R1268 = 0 && R1269 = 0)) && (R48 + R79 + R76 != 0 || ((R42 + R72 + R70 != 0 || R43 + R73 + R71 + -1*R83 + -1*R81 - R53 = 0 || R53 + R83 + R81 < 1) && (R42 + R72 + R70 = 0 || R53 + R83 + R81 < 1))) && (R48 + R79 + R76 != 0 || ((R46 + R77 + R74 != 0 || R47 + R78 + R75 + -1*R83 + -1*R81 - R53 = 0 || R53 + R83 + R81 < 1) && (R46 + R77 + R74 = 0 || R53 + R83 + R81 < 1))) && (R1250 != 0 || R1 = R1251 || R1 < 1) && (R1252 != 0 || R1 = R1253 || R1 < 1) && (R1254 != 0 || R1 = R1255 || R1 < 1) && (R1256 != 0 || R1 = R1257 || R1 < 1) && (R1258 != 0 || R1 = R1259 || R1 < 1) && (R1260 != 0 || R1 = R1261 || R1 < 1) && (R1262 != 0 || R1 = R1263 || R1 < 1) && (R1264 != 0 || R1 = R1265 || R1 < 1) && (R1266 != 0 || R1 = R1267 || R1 < 1) && (R1268 != 0 || R1 = R1269 || R1 < 1) && (R18 = 0 || (R1288 = 0 && R1289 = 0)) && (R18 = 0 || (R1292 = 0 && R1293 = 0)) && (R18 = 0 || (R1294 = 0 && R1295 = 0)) && (R18 = 0 || (R1296 = 0 && R1297 = 0)) && (R18 = 0 || (R1298 = 0 && R1299 = 0)) && (R19 = 0 || (R1270 = 0 && R1271 = 0)) && (R19 = 0 || (R1272 = 0 && R1273 = 0)) && (R19 = 0 || (R1274 = 0 && R1275 = 0)) && (R19 = 0 || (R1276 = 0 && R1277 = 0)) && (R19 = 0 || (R1278 = 0 && R1279 = 0)) && (R19 = 0 || (R1280 = 0 && R1281 = 0)) && (R19 = 0 || (R1282 = 0 && R1283 = 0)) && (R19 = 0 || (R1284 = 0 && R1285 = 0)) && (R19 = 0 || (R1286 = 0 && R1287 = 0)) && (R48 + R79 + R76 = 0 || (R42 + R72 + R70 = 0 && R43 + R73 + R71 + -1*R83 + -1*R81 - R53 = 0)) && (R48 + R79 + R76 = 0 || (R46 + R77 + R74 = 0 && R47 + R78 + R75 + -1*R83 + -1*R81 - R53 = 0)) && (R58 + R933 + R930 = 0 || (R56 + R931 + R928 = 0 && R57 + R932 + R929 = 0)) && (R58 + R933 + R930 = 0 || (R62 + R1248 + R1246 = 0 && R63 + R1249 + R1247 = 0)) && (R1250 = 0 || R1 < 1) && (R1252 = 0 || R1 < 1) && (R1254 = 0 || R1 < 1) && (R1256 = 0 || R1 < 1) && (R1258 = 0 || R1 < 1) && (R1260 = 0 || R1 < 1) && (R1262 = 0 || R1 < 1) && (R1264 = 0 || R1 < 1) && (R1266 = 0 || R1 < 1) && (R1268 = 0 || R1 < 1);
// End of Parikh automata intersection problem
