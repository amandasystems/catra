// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R12, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R3890, R3891, R3892, R3893, R3894, R3895, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R6436, R6437, R6438, R6439, R66, R67, R68, R69, R70, R71, R72, R7284, R7285, R7286, R7287, R7288, R7289, R73, R7602, R7603, R7604, R7605, R7606, R7607, R7608, R7609, R7610, R7611, R7612, R7613, R7614, R7615, R7616, R7617, R7618, R7619, R7620, R7621, R7622, R7623, R7624, R7625, R7626, R7627, R7628, R7629, R7630, R7631, R7632, R7633, R7634, R7635, R7636, R7637, R7638, R7639, R7640, R7641, R7642, R7643, R7644, R7645, R7646, R7647, R7648, R7649, R7650, R7651, R7652, R7653, R7654, R7655, R7656, R7657, R7658, R7659, R7660, R7661, R7662, R7663, R7664, R7665, R7666, R7667, R7668, R7669, R7670, R7671, R7672, R7673, R7674, R7675, R7676, R7677, R7678, R7679, R7680, R7681, R7682, R7683, R7684, R7685, R7686, R7687, R7688, R7689, R7690, R7691, R7692, R7693, R7694, R7695, R7696, R7697, R7698, R7699, R7700, R7701, R7702, R7703, R7704, R7705, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [84, 84];
  s0 -> s0 [85, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [84, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 83];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [84, 84];
  s0 -> s1 [85, 65535];
  s1 -> s1 [0, 83];
  s1 -> s2 [84, 84];
  s1 -> s1 [85, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R21 += 1 };
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R25 += 1 };
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R7627 += 1, R19 += 1 };
  s0 -> s0 [0, 65535] { R7626 += 1, R7627 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R7627 += 1, R19 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 83] { R7629 += 1 };
  s0 -> s0 [0, 65535] { R7628 += 1, R7629 += 1 };
  s0 -> s2 [84, 84] { R7629 += 1 };
  s0 -> s3 [84, 84] { R7629 += 1 };
  s0 -> s1 [86, 65535] { R7629 += 1 };
  s1 -> s1 [0, 83] { R7629 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R7629 += 1 };
  s1 -> s3 [84, 84] { R7629 += 1 };
  s1 -> s1 [86, 65535] { R7629 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 84] { R7629 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [86, 65535] { R7629 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 83] { R7631 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R7630 += 1, R7631 += 1 };
  s0 -> s2 [84, 84] { R7631 += 1, R38 += 1 };
  s0 -> s3 [84, 84] { R7631 += 1, R38 += 1 };
  s0 -> s1 [85, 65535] { R7631 += 1, R38 += 1 };
  s1 -> s1 [0, 83] { R7631 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R7631 += 1, R38 += 1 };
  s1 -> s3 [84, 84] { R7631 += 1, R38 += 1 };
  s1 -> s1 [85, 65535] { R7631 += 1, R38 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R7631 += 1, R38 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 83] { R7633 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R7632 += 1, R7633 += 1 };
  s0 -> s2 [84, 84] { R7633 += 1, R40 += 1 };
  s0 -> s3 [84, 84] { R7633 += 1, R40 += 1 };
  s0 -> s1 [85, 65535] { R7633 += 1, R40 += 1 };
  s1 -> s1 [0, 83] { R7633 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R7633 += 1, R40 += 1 };
  s1 -> s3 [84, 84] { R7633 += 1, R40 += 1 };
  s1 -> s1 [85, 65535] { R7633 += 1, R40 += 1 };
  s2 -> s2 [0, 65535] { R7633 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 83] { R7635 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R7634 += 1, R7635 += 1 };
  s0 -> s2 [84, 84] { R7635 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [84, 84] { R7635 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [85, 65535] { R7635 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 83] { R7635 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R7635 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [84, 84] { R7635 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [85, 65535] { R7635 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7635 += 1, R42 += 1, R43 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 83] { R7637 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R7636 += 1, R7637 += 1 };
  s0 -> s2 [84, 84] { R7637 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [84, 84] { R7637 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [85, 65535] { R7637 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 83] { R7637 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R7637 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [84, 84] { R7637 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [85, 65535] { R7637 += 1, R46 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R7637 += 1, R46 += 1, R47 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 83] { R7639 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R7638 += 1, R7639 += 1 };
  s0 -> s2 [84, 84] { R7639 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [84, 84] { R7639 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [85, 65535] { R7639 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 83] { R7639 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R7639 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [84, 84] { R7639 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [85, 65535] { R7639 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7639 += 1, R52 += 1, R53 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 83] { R7641 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R7640 += 1, R7641 += 1 };
  s0 -> s2 [84, 84] { R7641 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [84, 84] { R7641 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [85, 65535] { R7641 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 83] { R7641 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R7641 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [84, 84] { R7641 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [85, 65535] { R7641 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R7641 += 1, R56 += 1, R57 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 83] { R7643 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R7642 += 1, R7643 += 1 };
  s0 -> s2 [84, 84] { R7643 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [84, 84] { R7643 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [85, 65535] { R7643 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 83] { R7643 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R7643 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [84, 84] { R7643 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [85, 65535] { R7643 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535] { R7643 += 1, R62 += 1, R63 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 83] { R7663 += 1 };
  s0 -> s0 [0, 65535] { R7662 += 1, R7663 += 1 };
  s0 -> s2 [84, 84] { R7663 += 1 };
  s0 -> s1 [85, 65535] { R7663 += 1 };
  s1 -> s1 [0, 83] { R7663 += 1 };
  s1 -> s2 [84, 84] { R7663 += 1 };
  s1 -> s1 [85, 65535] { R7663 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R7663 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R7664 += 1, R7665 += 1 };
  s0 -> s1 [0, 65535] { R7665 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R7665 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 83] { R7667 += 1 };
  s0 -> s0 [0, 65535] { R7666 += 1, R7667 += 1 };
  s0 -> s2 [0, 65535] { R7667 += 1, R8 += 1 };
  s0 -> s3 [84, 84] { R7667 += 1 };
  s0 -> s1 [85, 65535] { R7667 += 1 };
  s1 -> s1 [0, 83] { R7667 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [84, 84] { R7667 += 1 };
  s1 -> s1 [85, 65535] { R7667 += 1 };
  s2 -> s1 [0, 83] { R7667 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R7667 += 1, R8 += 1 };
  s2 -> s3 [84, 84] { R7667 += 1 };
  s2 -> s1 [85, 65535] { R7667 += 1 };
  s3 -> s3 [0, 65535] { R7667 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 83] { R7669 += 1, R7607 += 1 };
  s0 -> s2 [0, 65535] { R7669 += 1, R7606 += 1, R7607 += 1 };
  s0 -> s0 [0, 65535] { R7668 += 1, R7669 += 1 };
  s0 -> s1 [85, 65535] { R7669 += 1, R7607 += 1 };
  s1 -> s1 [0, 83] { R7669 += 1, R7607 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R7669 += 1 };
  s1 -> s1 [85, 65535] { R7669 += 1, R7607 += 1 };
  s2 -> s1 [0, 83] { R7669 += 1, R7607 += 1 };
  s2 -> s2 [0, 65535] { R7669 += 1, R7606 += 1, R7607 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [85, 65535] { R7669 += 1, R7607 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s0 [0, 65535] { R7670 += 1, R7671 += 1 };
  s0 -> s1 [0, 65535] { R7671 += 1, R7608 += 1, R7609 += 1 };
  s0 -> s2 [0, 65535] { R7671 += 1, R7609 += 1, R17 += 1 };
  s1 -> s1 [0, 65535] { R7671 += 1, R7608 += 1, R7609 += 1 };
  s1 -> s2 [0, 65535] { R7671 += 1, R7609 += 1, R17 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R7671 += 1, R7609 += 1, R17 += 1 };
  s2 -> s3 [0, 65535] { R7671 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7671 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 65535] { R7673 += 1, R7611 += 1 };
  s0 -> s0 [0, 65535] { R7672 += 1, R7673 += 1 };
  s0 -> s2 [0, 65535] { R7673 += 1, R7610 += 1, R7611 += 1 };
  s1 -> s1 [0, 65535] { R7673 += 1, R7611 += 1 };
  s1 -> s4 [0, 65535] { R7673 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R7673 += 1, R7611 += 1 };
  s2 -> s2 [0, 65535] { R7673 += 1, R7610 += 1, R7611 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7673 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R7675 += 1, R7612 += 1, R7613 += 1 };
  s0 -> s2 [0, 65535] { R7675 += 1, R7613 += 1, R67 += 1 };
  s0 -> s0 [0, 65535] { R7674 += 1, R7675 += 1 };
  s1 -> s1 [0, 65535] { R7675 += 1, R7612 += 1, R7613 += 1 };
  s1 -> s2 [0, 65535] { R7675 += 1, R7613 += 1, R67 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R7675 += 1, R7613 += 1, R67 += 1 };
  s2 -> s3 [0, 65535] { R7675 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7675 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 84] { R7677 += 1, R7615 += 1 };
  s0 -> s2 [0, 65535] { R7677 += 1, R7614 += 1, R7615 += 1 };
  s0 -> s3 [0, 65535] { R7677 += 1, R7615 += 1, R69 += 1 };
  s0 -> s0 [0, 65535] { R7676 += 1, R7677 += 1 };
  s0 -> s1 [86, 65535] { R7677 += 1, R7615 += 1 };
  s1 -> s1 [0, 84] { R7677 += 1, R7615 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R7677 += 1 };
  s1 -> s1 [86, 65535] { R7677 += 1, R7615 += 1 };
  s2 -> s1 [0, 84] { R7677 += 1, R7615 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R7677 += 1, R7614 += 1, R7615 += 1 };
  s2 -> s3 [0, 65535] { R7677 += 1, R7615 += 1, R69 += 1 };
  s2 -> s1 [86, 65535] { R7677 += 1, R7615 += 1 };
  s3 -> s1 [0, 84] { R7677 += 1, R7615 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7677 += 1, R7615 += 1, R69 += 1 };
  s3 -> s5 [0, 65535] { R7677 += 1 };
  s3 -> s1 [86, 65535] { R7677 += 1, R7615 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R7677 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 84] { R7679 += 1, R7617 += 1, R73 += 1 };
  s0 -> s0 [0, 65535] { R7678 += 1, R7679 += 1 };
  s0 -> s2 [0, 65535] { R7679 += 1, R7616 += 1, R7617 += 1 };
  s0 -> s3 [0, 65535] { R7679 += 1, R7617 += 1, R72 += 1, R73 += 1 };
  s0 -> s1 [86, 65535] { R7679 += 1, R7617 += 1, R73 += 1 };
  s1 -> s1 [0, 84] { R7679 += 1, R7617 += 1, R73 += 1 };
  s1 -> s1 [0, 65535] { R7679 += 1, R7617 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R7679 += 1 };
  s1 -> s1 [86, 65535] { R7679 += 1, R7617 += 1, R73 += 1 };
  s2 -> s1 [0, 84] { R7679 += 1, R7617 += 1, R73 += 1 };
  s2 -> s2 [0, 65535] { R7679 += 1, R7616 += 1, R7617 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R7679 += 1, R7617 += 1, R72 += 1, R73 += 1 };
  s2 -> s1 [86, 65535] { R7679 += 1, R7617 += 1, R73 += 1 };
  s3 -> s1 [0, 84] { R7679 += 1, R7617 += 1, R73 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R7679 += 1 };
  s3 -> s3 [0, 65535] { R7679 += 1, R7617 += 1, R72 += 1, R73 += 1 };
  s3 -> s1 [86, 65535] { R7679 += 1, R7617 += 1, R73 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R7679 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R7681 += 1, R7618 += 1, R7619 += 1 };
  s0 -> s2 [0, 65535] { R7681 += 1, R7619 += 1 };
  s0 -> s3 [0, 65535] { R7681 += 1, R7619 += 1, R3894 += 1, R3895 += 1 };
  s0 -> s0 [0, 65535] { R7680 += 1, R7681 += 1 };
  s1 -> s1 [0, 65535] { R7681 += 1, R7618 += 1, R7619 += 1 };
  s1 -> s2 [0, 65535] { R7681 += 1, R7619 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s3 [0, 65535] { R7681 += 1, R7619 += 1, R3894 += 1, R3895 += 1 };
  s2 -> s2 [0, 65535] { R7681 += 1, R7619 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R7681 += 1 };
  s3 -> s2 [0, 65535] { R7681 += 1, R7619 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R7681 += 1 };
  s3 -> s3 [0, 65535] { R7681 += 1, R7619 += 1, R3894 += 1, R3895 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R7681 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 85] { R7683 += 1, R7621 += 1, R6439 += 1 };
  s0 -> s0 [0, 65535] { R7682 += 1, R7683 += 1 };
  s0 -> s2 [0, 65535] { R7683 += 1, R7620 += 1, R7621 += 1 };
  s0 -> s3 [0, 65535] { R7683 += 1, R7621 += 1, R6438 += 1, R6439 += 1 };
  s0 -> s4 [88, 88] { R7683 += 1, R7621 += 1, R6439 += 1 };
  s0 -> s1 [89, 65535] { R7683 += 1, R7621 += 1, R6439 += 1 };
  s1 -> s1 [0, 85] { R7683 += 1, R7621 += 1, R6439 += 1 };
  s1 -> s4 [88, 88] { R7683 += 1, R7621 += 1, R6439 += 1 };
  s1 -> s1 [89, 65535] { R7683 += 1, R7621 += 1, R6439 += 1 };
  s2 -> s1 [0, 85] { R7683 += 1, R7621 += 1, R6439 += 1 };
  s2 -> s2 [0, 65535] { R7683 += 1, R7620 += 1, R7621 += 1 };
  s2 -> s3 [0, 65535] { R7683 += 1, R7621 += 1, R6438 += 1, R6439 += 1 };
  s2 -> s4 [88, 88] { R7683 += 1, R7621 += 1, R6439 += 1 };
  s2 -> s1 [89, 65535] { R7683 += 1, R7621 += 1, R6439 += 1 };
  s3 -> s1 [0, 85] { R7683 += 1, R7621 += 1, R6439 += 1 };
  s3 -> s3 [0, 65535] { R7683 += 1, R7621 += 1, R6438 += 1, R6439 += 1 };
  s3 -> s4 [88, 88] { R7683 += 1, R7621 += 1, R6439 += 1 };
  s3 -> s1 [89, 65535] { R7683 += 1, R7621 += 1, R6439 += 1 };
  s4 -> s4 [0, 85] { R7683 += 1, R7621 += 1, R6439 += 1 };
  s4 -> s5 [0, 65535] { R7683 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R7683 += 1, R7621 += 1 };
  s4 -> s4 [88, 65535] { R7683 += 1, R7621 += 1, R6439 += 1 };
  s5 -> s5 [0, 65535] { R7683 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s4, s5, s6;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R7685 += 1, R7623 += 1 };
  s0 -> s2 [0, 65535] { R7685 += 1, R7622 += 1, R7623 += 1 };
  s0 -> s0 [0, 65535] { R7684 += 1, R7685 += 1 };
  s1 -> s4 [0, 65535] { R7685 += 1 };
  s1 -> s1 [0, 65535] { R7685 += 1, R7623 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R7685 += 1, R7623 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R7685 += 1, R7622 += 1, R7623 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7685 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 85] { R7687 += 1, R7625 += 1, R7605 += 1 };
  s0 -> s2 [0, 65535] { R7687 += 1, R7624 += 1, R7625 += 1 };
  s0 -> s0 [0, 65535] { R7686 += 1, R7687 += 1 };
  s0 -> s1 [0, 65535] { R7687 += 1, R7625 += 1 };
  s0 -> s1 [89, 65535] { R7687 += 1, R7625 += 1, R7605 += 1 };
  s1 -> s1 [0, 85] { R7687 += 1, R7625 += 1, R7605 += 1 };
  s1 -> s4 [0, 65535] { R7687 += 1 };
  s1 -> s1 [0, 65535] { R7687 += 1, R7625 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [89, 65535] { R7687 += 1, R7625 += 1, R7605 += 1 };
  s2 -> s1 [0, 85] { R7687 += 1, R7625 += 1, R7605 += 1 };
  s2 -> s2 [0, 65535] { R7687 += 1, R7624 += 1, R7625 += 1 };
  s2 -> s1 [0, 65535] { R7687 += 1, R7625 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [89, 65535] { R7687 += 1, R7625 += 1, R7605 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7687 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R7689 += 1, R7644 += 1, R7645 += 1 };
  s0 -> s0 [0, 65535] { R7688 += 1, R7689 += 1 };
  s0 -> s2 [0, 65535] { R7689 += 1, R7645 += 1, R18 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R7689 += 1, R7644 += 1, R7645 += 1 };
  s1 -> s2 [0, 65535] { R7689 += 1, R7645 += 1, R18 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R7689 += 1 };
  s2 -> s2 [0, 65535] { R7689 += 1, R7645 += 1, R18 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7689 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 83] { R7691 += 1, R7647 += 1 };
  s0 -> s0 [0, 65535] { R7690 += 1, R7691 += 1 };
  s0 -> s2 [0, 65535] { R7691 += 1, R7646 += 1, R7647 += 1 };
  s0 -> s3 [84, 84] { R7691 += 1, R7647 += 1 };
  s0 -> s4 [84, 84] { R7691 += 1, R7647 += 1 };
  s0 -> s5 [85, 85] { R7691 += 1, R7647 += 1 };
  s0 -> s1 [86, 65535] { R7691 += 1, R7647 += 1 };
  s1 -> s1 [0, 83] { R7691 += 1, R7647 += 1 };
  s1 -> s3 [84, 84] { R7691 += 1, R7647 += 1 };
  s1 -> s4 [84, 84] { R7691 += 1, R7647 += 1 };
  s1 -> s5 [85, 85] { R7691 += 1, R7647 += 1 };
  s1 -> s1 [86, 65535] { R7691 += 1, R7647 += 1 };
  s2 -> s1 [0, 83] { R7691 += 1, R7647 += 1 };
  s2 -> s2 [0, 65535] { R7691 += 1, R7646 += 1, R7647 += 1 };
  s2 -> s3 [84, 84] { R7691 += 1, R7647 += 1 };
  s2 -> s4 [84, 84] { R7691 += 1, R7647 += 1 };
  s2 -> s5 [85, 85] { R7691 += 1, R7647 += 1 };
  s2 -> s1 [86, 65535] { R7691 += 1, R7647 += 1 };
  s3 -> s3 [0, 84] { R7691 += 1, R7647 += 1 };
  s3 -> s8 [85, 85] { R7691 += 1, R7647 += 1 };
  s3 -> s3 [86, 65535] { R7691 += 1, R7647 += 1 };
  s5 -> s5 [0, 83] { R7691 += 1, R7647 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R7691 += 1 };
  s5 -> s7 [84, 84] { R7691 += 1, R7647 += 1 };
  s5 -> s8 [84, 84] { R7691 += 1, R7647 += 1 };
  s5 -> s5 [85, 65535] { R7691 += 1, R7647 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R7691 += 1 };
  s8 -> s9 [0, 65535] { R7691 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R7691 += 1, R7647 += 1 };
  s9 -> s9 [0, 65535] { R7691 += 1 };
  s9 -> s6 [0, 65535];
  accepting s8, s5, s9, s6, s7;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 83] { R7693 += 1, R7649 += 1, R66 += 1 };
  s0 -> s2 [0, 65535] { R7693 += 1, R7648 += 1, R7649 += 1 };
  s0 -> s0 [0, 65535] { R7692 += 1, R7693 += 1 };
  s0 -> s3 [84, 84] { R7693 += 1, R7649 += 1, R66 += 1 };
  s0 -> s4 [84, 84] { R7693 += 1, R7649 += 1, R66 += 1 };
  s0 -> s1 [85, 65535] { R7693 += 1, R7649 += 1, R66 += 1 };
  s1 -> s1 [0, 83] { R7693 += 1, R7649 += 1, R66 += 1 };
  s1 -> s1 [0, 65535] { R7693 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [84, 84] { R7693 += 1, R7649 += 1, R66 += 1 };
  s1 -> s4 [84, 84] { R7693 += 1, R7649 += 1, R66 += 1 };
  s1 -> s1 [85, 65535] { R7693 += 1, R7649 += 1, R66 += 1 };
  s2 -> s1 [0, 83] { R7693 += 1, R7649 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R7693 += 1, R7648 += 1, R7649 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [84, 84] { R7693 += 1, R7649 += 1, R66 += 1 };
  s2 -> s4 [84, 84] { R7693 += 1, R7649 += 1, R66 += 1 };
  s2 -> s1 [85, 65535] { R7693 += 1, R7649 += 1, R66 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R7693 += 1 };
  s4 -> s5 [0, 65535] { R7693 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R7693 += 1, R7649 += 1, R66 += 1 };
  s5 -> s5 [0, 65535] { R7693 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 83] { R7695 += 1, R7651 += 1, R68 += 1 };
  s0 -> s0 [0, 65535] { R7694 += 1, R7695 += 1 };
  s0 -> s2 [0, 65535] { R7695 += 1, R7650 += 1, R7651 += 1 };
  s0 -> s3 [84, 84] { R7695 += 1, R7651 += 1, R68 += 1 };
  s0 -> s4 [84, 84] { R7695 += 1, R7651 += 1, R68 += 1 };
  s0 -> s1 [85, 65535] { R7695 += 1, R7651 += 1, R68 += 1 };
  s1 -> s1 [0, 83] { R7695 += 1, R7651 += 1, R68 += 1 };
  s1 -> s1 [0, 65535] { R7695 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [84, 84] { R7695 += 1, R7651 += 1, R68 += 1 };
  s1 -> s4 [84, 84] { R7695 += 1, R7651 += 1, R68 += 1 };
  s1 -> s1 [85, 65535] { R7695 += 1, R7651 += 1, R68 += 1 };
  s2 -> s1 [0, 83] { R7695 += 1, R7651 += 1, R68 += 1 };
  s2 -> s2 [0, 65535] { R7695 += 1, R7650 += 1, R7651 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [84, 84] { R7695 += 1, R7651 += 1, R68 += 1 };
  s2 -> s4 [84, 84] { R7695 += 1, R7651 += 1, R68 += 1 };
  s2 -> s1 [85, 65535] { R7695 += 1, R7651 += 1, R68 += 1 };
  s3 -> s3 [0, 65535] { R7695 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R7695 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R7695 += 1, R7651 += 1, R68 += 1 };
  s5 -> s5 [0, 65535] { R7695 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 83] { R7697 += 1, R7653 += 1, R70 += 1, R71 += 1 };
  s0 -> s2 [0, 65535] { R7697 += 1, R7652 += 1, R7653 += 1 };
  s0 -> s0 [0, 65535] { R7696 += 1, R7697 += 1 };
  s0 -> s3 [84, 84] { R7697 += 1, R7653 += 1, R70 += 1, R71 += 1 };
  s0 -> s4 [84, 84] { R7697 += 1, R7653 += 1, R70 += 1, R71 += 1 };
  s0 -> s1 [85, 65535] { R7697 += 1, R7653 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 83] { R7697 += 1, R7653 += 1, R70 += 1, R71 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R7697 += 1 };
  s1 -> s3 [84, 84] { R7697 += 1, R7653 += 1, R70 += 1, R71 += 1 };
  s1 -> s4 [84, 84] { R7697 += 1, R7653 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [85, 65535] { R7697 += 1, R7653 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [0, 83] { R7697 += 1, R7653 += 1, R70 += 1, R71 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R7697 += 1, R7652 += 1, R7653 += 1 };
  s2 -> s3 [84, 84] { R7697 += 1, R7653 += 1, R70 += 1, R71 += 1 };
  s2 -> s4 [84, 84] { R7697 += 1, R7653 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [85, 65535] { R7697 += 1, R7653 += 1, R70 += 1, R71 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R7697 += 1, R7653 += 1, R70 += 1, R71 += 1 };
  s3 -> s6 [0, 65535] { R7697 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R7697 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7697 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 83] { R7699 += 1, R7655 += 1, R3890 += 1, R3891 += 1 };
  s0 -> s2 [0, 83] { R7699 += 1, R7655 += 1, R3891 += 1, R3892 += 1 };
  s0 -> s0 [0, 65535] { R7698 += 1, R7699 += 1 };
  s0 -> s3 [0, 65535] { R7699 += 1, R7654 += 1, R7655 += 1 };
  s0 -> s4 [84, 84] { R7699 += 1, R7655 += 1, R3890 += 1, R3891 += 1 };
  s0 -> s5 [84, 84] { R7699 += 1, R7655 += 1, R3891 += 1, R3892 += 1 };
  s0 -> s6 [84, 84] { R7699 += 1, R7655 += 1, R3891 += 1, R3892 += 1 };
  s0 -> s7 [84, 84] { R7699 += 1, R7655 += 1, R3890 += 1, R3891 += 1 };
  s0 -> s1 [85, 65535] { R7699 += 1, R7655 += 1, R3890 += 1, R3891 += 1 };
  s0 -> s2 [85, 65535] { R7699 += 1, R7655 += 1, R3891 += 1, R3892 += 1 };
  s1 -> s1 [0, 83] { R7699 += 1, R7655 += 1, R3890 += 1, R3891 += 1 };
  s1 -> s2 [0, 83] { R7699 += 1, R7655 += 1, R3891 += 1, R3892 += 1 };
  s1 -> s4 [84, 84] { R7699 += 1, R7655 += 1, R3890 += 1, R3891 += 1 };
  s1 -> s5 [84, 84] { R7699 += 1, R7655 += 1, R3891 += 1, R3892 += 1 };
  s1 -> s6 [84, 84] { R7699 += 1, R7655 += 1, R3891 += 1, R3892 += 1 };
  s1 -> s7 [84, 84] { R7699 += 1, R7655 += 1, R3890 += 1, R3891 += 1 };
  s1 -> s1 [85, 65535] { R7699 += 1, R7655 += 1, R3890 += 1, R3891 += 1 };
  s1 -> s2 [85, 65535] { R7699 += 1, R7655 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s2 [0, 83] { R7699 += 1, R7655 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R7699 += 1 };
  s2 -> s5 [84, 84] { R7699 += 1, R7655 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s6 [84, 84] { R7699 += 1, R7655 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s2 [85, 65535] { R7699 += 1, R7655 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s1 [0, 83] { R7699 += 1, R7655 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s2 [0, 83] { R7699 += 1, R7655 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s3 [0, 65535] { R7699 += 1, R7654 += 1, R7655 += 1 };
  s3 -> s4 [84, 84] { R7699 += 1, R7655 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s5 [84, 84] { R7699 += 1, R7655 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s6 [84, 84] { R7699 += 1, R7655 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s7 [84, 84] { R7699 += 1, R7655 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s1 [85, 65535] { R7699 += 1, R7655 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s2 [85, 65535] { R7699 += 1, R7655 += 1, R3891 += 1, R3892 += 1 };
  s5 -> s5 [0, 65535] { R7699 += 1 };
  s5 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R7699 += 1, R7655 += 1, R3891 += 1, R3892 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s9 [0, 65535] { R7699 += 1 };
  s7 -> s6 [0, 65535] { R7699 += 1, R7655 += 1, R3891 += 1, R3892 += 1 };
  s7 -> s7 [0, 65535] { R7699 += 1, R7655 += 1, R3890 += 1, R3891 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R7699 += 1 };
  accepting s8, s5, s2, s9, s6;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 83] { R7701 += 1, R7657 += 1, R6436 += 1, R6437 += 1 };
  s0 -> s0 [0, 65535] { R7700 += 1, R7701 += 1 };
  s0 -> s2 [0, 65535] { R7701 += 1, R7656 += 1, R7657 += 1 };
  s0 -> s3 [84, 84] { R7701 += 1, R7657 += 1, R6436 += 1, R6437 += 1 };
  s0 -> s4 [84, 84] { R7701 += 1, R7657 += 1, R6436 += 1, R6437 += 1 };
  s0 -> s1 [85, 65535] { R7701 += 1, R7657 += 1, R6436 += 1, R6437 += 1 };
  s1 -> s1 [0, 83] { R7701 += 1, R7657 += 1, R6436 += 1, R6437 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R7701 += 1 };
  s1 -> s3 [84, 84] { R7701 += 1, R7657 += 1, R6436 += 1, R6437 += 1 };
  s1 -> s4 [84, 84] { R7701 += 1, R7657 += 1, R6436 += 1, R6437 += 1 };
  s1 -> s1 [85, 65535] { R7701 += 1, R7657 += 1, R6436 += 1, R6437 += 1 };
  s2 -> s1 [0, 83] { R7701 += 1, R7657 += 1, R6436 += 1, R6437 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R7701 += 1, R7656 += 1, R7657 += 1 };
  s2 -> s3 [84, 84] { R7701 += 1, R7657 += 1, R6436 += 1, R6437 += 1 };
  s2 -> s4 [84, 84] { R7701 += 1, R7657 += 1, R6436 += 1, R6437 += 1 };
  s2 -> s1 [85, 65535] { R7701 += 1, R7657 += 1, R6436 += 1, R6437 += 1 };
  s3 -> s3 [0, 65535] { R7701 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R7701 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R7701 += 1, R7657 += 1, R6436 += 1, R6437 += 1 };
  s5 -> s5 [0, 65535] { R7701 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 83] { R7703 += 1, R7659 += 1, R7284 += 1, R7285 += 1 };
  s0 -> s2 [0, 83] { R7703 += 1, R7659 += 1, R7285 += 1, R7286 += 1 };
  s0 -> s0 [0, 65535] { R7702 += 1, R7703 += 1 };
  s0 -> s3 [0, 65535] { R7703 += 1, R7658 += 1, R7659 += 1 };
  s0 -> s4 [84, 84] { R7703 += 1, R7659 += 1, R7285 += 1, R7286 += 1 };
  s0 -> s5 [84, 84] { R7703 += 1, R7659 += 1, R7284 += 1, R7285 += 1 };
  s0 -> s6 [84, 84] { R7703 += 1, R7659 += 1, R7285 += 1, R7286 += 1 };
  s0 -> s7 [84, 84] { R7703 += 1, R7659 += 1, R7284 += 1, R7285 += 1 };
  s0 -> s1 [85, 65535] { R7703 += 1, R7659 += 1, R7284 += 1, R7285 += 1 };
  s0 -> s2 [85, 65535] { R7703 += 1, R7659 += 1, R7285 += 1, R7286 += 1 };
  s1 -> s1 [0, 83] { R7703 += 1, R7659 += 1, R7284 += 1, R7285 += 1 };
  s1 -> s2 [0, 83] { R7703 += 1, R7659 += 1, R7285 += 1, R7286 += 1 };
  s1 -> s4 [84, 84] { R7703 += 1, R7659 += 1, R7285 += 1, R7286 += 1 };
  s1 -> s5 [84, 84] { R7703 += 1, R7659 += 1, R7284 += 1, R7285 += 1 };
  s1 -> s6 [84, 84] { R7703 += 1, R7659 += 1, R7285 += 1, R7286 += 1 };
  s1 -> s7 [84, 84] { R7703 += 1, R7659 += 1, R7284 += 1, R7285 += 1 };
  s1 -> s1 [85, 65535] { R7703 += 1, R7659 += 1, R7284 += 1, R7285 += 1 };
  s1 -> s2 [85, 65535] { R7703 += 1, R7659 += 1, R7285 += 1, R7286 += 1 };
  s2 -> s11 [0, 83] { R7703 += 1, R7659 += 1 };
  s2 -> s2 [0, 83] { R7703 += 1, R7659 += 1, R7285 += 1, R7286 += 1 };
  s2 -> s12 [84, 84] { R7703 += 1, R7659 += 1 };
  s2 -> s8 [84, 84] { R7703 += 1, R7659 += 1 };
  s2 -> s4 [84, 84] { R7703 += 1, R7659 += 1, R7285 += 1, R7286 += 1 };
  s2 -> s6 [84, 84] { R7703 += 1, R7659 += 1, R7285 += 1, R7286 += 1 };
  s2 -> s11 [85, 65535] { R7703 += 1, R7659 += 1 };
  s2 -> s2 [85, 65535] { R7703 += 1, R7659 += 1, R7285 += 1, R7286 += 1 };
  s3 -> s1 [0, 83] { R7703 += 1, R7659 += 1, R7284 += 1, R7285 += 1 };
  s3 -> s2 [0, 83] { R7703 += 1, R7659 += 1, R7285 += 1, R7286 += 1 };
  s3 -> s3 [0, 65535] { R7703 += 1, R7658 += 1, R7659 += 1 };
  s3 -> s4 [84, 84] { R7703 += 1, R7659 += 1, R7285 += 1, R7286 += 1 };
  s3 -> s5 [84, 84] { R7703 += 1, R7659 += 1, R7284 += 1, R7285 += 1 };
  s3 -> s6 [84, 84] { R7703 += 1, R7659 += 1, R7285 += 1, R7286 += 1 };
  s3 -> s7 [84, 84] { R7703 += 1, R7659 += 1, R7284 += 1, R7285 += 1 };
  s3 -> s1 [85, 65535] { R7703 += 1, R7659 += 1, R7284 += 1, R7285 += 1 };
  s3 -> s2 [85, 65535] { R7703 += 1, R7659 += 1, R7285 += 1, R7286 += 1 };
  s5 -> s5 [0, 65535] { R7703 += 1, R7659 += 1, R7284 += 1, R7285 += 1 };
  s5 -> s6 [0, 65535] { R7703 += 1, R7659 += 1, R7285 += 1, R7286 += 1 };
  s6 -> s8 [0, 65535] { R7703 += 1, R7659 += 1 };
  s6 -> s6 [0, 65535] { R7703 += 1, R7659 += 1, R7285 += 1, R7286 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R7703 += 1, R7659 += 1 };
  s8 -> s10 [0, 65535] { R7703 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R7703 += 1 };
  s11 -> s11 [0, 83] { R7703 += 1, R7659 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R7703 += 1 };
  s11 -> s12 [84, 84] { R7703 += 1, R7659 += 1 };
  s11 -> s8 [84, 84] { R7703 += 1, R7659 += 1 };
  s11 -> s11 [85, 65535] { R7703 += 1, R7659 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R7703 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 83] { R7705 += 1, R7661 += 1, R7602 += 1, R7603 += 1 };
  s0 -> s2 [0, 83] { R7705 += 1, R7661 += 1, R7603 += 1 };
  s0 -> s0 [0, 65535] { R7704 += 1, R7705 += 1 };
  s0 -> s3 [0, 65535] { R7705 += 1, R7660 += 1, R7661 += 1 };
  s0 -> s4 [84, 84] { R7705 += 1, R7661 += 1, R7602 += 1, R7603 += 1 };
  s0 -> s5 [84, 84] { R7705 += 1, R7661 += 1, R7603 += 1 };
  s0 -> s6 [84, 84] { R7705 += 1, R7661 += 1, R7602 += 1, R7603 += 1 };
  s0 -> s7 [84, 84] { R7705 += 1, R7661 += 1, R7603 += 1 };
  s0 -> s8 [85, 85] { R7705 += 1, R7661 += 1, R7603 += 1 };
  s0 -> s1 [85, 65535] { R7705 += 1, R7661 += 1, R7602 += 1, R7603 += 1 };
  s0 -> s2 [89, 65535] { R7705 += 1, R7661 += 1, R7603 += 1 };
  s1 -> s1 [0, 83] { R7705 += 1, R7661 += 1, R7602 += 1, R7603 += 1 };
  s1 -> s2 [0, 83] { R7705 += 1, R7661 += 1, R7603 += 1 };
  s1 -> s4 [84, 84] { R7705 += 1, R7661 += 1, R7602 += 1, R7603 += 1 };
  s1 -> s5 [84, 84] { R7705 += 1, R7661 += 1, R7603 += 1 };
  s1 -> s6 [84, 84] { R7705 += 1, R7661 += 1, R7602 += 1, R7603 += 1 };
  s1 -> s7 [84, 84] { R7705 += 1, R7661 += 1, R7603 += 1 };
  s1 -> s8 [85, 85] { R7705 += 1, R7661 += 1, R7603 += 1 };
  s1 -> s1 [85, 65535] { R7705 += 1, R7661 += 1, R7602 += 1, R7603 += 1 };
  s1 -> s2 [89, 65535] { R7705 += 1, R7661 += 1, R7603 += 1 };
  s2 -> s2 [0, 83] { R7705 += 1, R7661 += 1, R7603 += 1 };
  s2 -> s5 [84, 84] { R7705 += 1, R7661 += 1 };
  s2 -> s7 [84, 84] { R7705 += 1, R7661 += 1 };
  s2 -> s8 [85, 85] { R7705 += 1, R7661 += 1, R7603 += 1 };
  s2 -> s2 [85, 65535] { R7705 += 1, R7661 += 1 };
  s2 -> s2 [89, 65535] { R7705 += 1, R7661 += 1, R7603 += 1 };
  s3 -> s1 [0, 83] { R7705 += 1, R7661 += 1, R7602 += 1, R7603 += 1 };
  s3 -> s2 [0, 83] { R7705 += 1, R7661 += 1, R7603 += 1 };
  s3 -> s3 [0, 65535] { R7705 += 1, R7660 += 1, R7661 += 1 };
  s3 -> s4 [84, 84] { R7705 += 1, R7661 += 1, R7602 += 1, R7603 += 1 };
  s3 -> s5 [84, 84] { R7705 += 1, R7661 += 1, R7603 += 1 };
  s3 -> s6 [84, 84] { R7705 += 1, R7661 += 1, R7602 += 1, R7603 += 1 };
  s3 -> s7 [84, 84] { R7705 += 1, R7661 += 1, R7603 += 1 };
  s3 -> s8 [85, 85] { R7705 += 1, R7661 += 1, R7603 += 1 };
  s3 -> s1 [85, 65535] { R7705 += 1, R7661 += 1, R7602 += 1, R7603 += 1 };
  s3 -> s2 [89, 65535] { R7705 += 1, R7661 += 1, R7603 += 1 };
  s4 -> s7 [0, 84] { R7705 += 1, R7661 += 1, R7603 += 1 };
  s4 -> s4 [0, 65535] { R7705 += 1, R7661 += 1, R7602 += 1, R7603 += 1 };
  s4 -> s10 [85, 85] { R7705 += 1, R7661 += 1, R7603 += 1 };
  s4 -> s7 [89, 65535] { R7705 += 1, R7661 += 1, R7603 += 1 };
  s7 -> s7 [0, 84] { R7705 += 1, R7661 += 1, R7603 += 1 };
  s7 -> s7 [0, 65535] { R7705 += 1, R7661 += 1 };
  s7 -> s10 [85, 85] { R7705 += 1, R7661 += 1, R7603 += 1 };
  s7 -> s7 [89, 65535] { R7705 += 1, R7661 += 1, R7603 += 1 };
  s8 -> s8 [0, 83] { R7705 += 1, R7661 += 1, R7603 += 1 };
  s8 -> s8 [0, 65535] { R7705 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [84, 84] { R7705 += 1, R7661 += 1 };
  s8 -> s11 [84, 84] { R7705 += 1, R7661 += 1 };
  s8 -> s8 [85, 85] { R7705 += 1, R7661 += 1, R7603 += 1 };
  s8 -> s8 [85, 65535] { R7705 += 1, R7661 += 1 };
  s8 -> s8 [89, 65535] { R7705 += 1, R7661 += 1, R7603 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 85] { R7705 += 1, R7661 += 1, R7603 += 1 };
  s10 -> s10 [0, 65535] { R7705 += 1, R7661 += 1 };
  s10 -> s9 [0, 65535];
  s10 -> s12 [0, 65535] { R7705 += 1 };
  s10 -> s10 [89, 65535] { R7705 += 1, R7661 += 1, R7603 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R7705 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R7705 += 1 };
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [116, 116];
  accepting s1;
};
};
synchronised {  // Automata constraining P62
automaton P62_0 {
  init s0;
  s0 -> s1 [117, 117];
  accepting s1;
};
};
constraint R1 = R7621 && R2 = R7705 && R20 - R7705 = -1 && R21 = R7705 && R22 - R7705 = -1 && R23 = R7705 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R6439 + -1*R6437 - R53 = 0 && R52 + R6438 + R6436 = 0 && R7620 = 0 && R7646 = 0 && R7647 = 0 && R7654 = 0 && R7655 = 0 && R7658 = 0 && R7659 = 0 && R7660 = 0 && R7661 = 0 && R7662 = 0 && R7663 = R7705 && R7664 = 0 && R7665 = R7705 && R7666 = 0 && R7667 = R7705 && R7668 = 0 && R7669 = R7705 && R7670 = 0 && R7671 = R7705 && R7672 = 0 && R7673 = R7705 && R7674 = 0 && R7675 = R7705 && R7676 = 0 && R7677 = R7705 && R7678 = 0 && R7679 = R7705 && R7680 = 0 && R7681 = R7705 && R7682 = 0 && R7683 = R7705 && R7684 = 0 && R7685 = R7705 && R7686 = 0 && R7687 = R7705 && R7688 = 0 && R7689 = R7705 && R7690 = 0 && R7691 = R7705 && R7692 = 0 && R7693 = R7705 && R7694 = 0 && R7695 = R7705 && R7696 = 0 && R7697 = R7705 && R7698 = 0 && R7699 = R7705 && R7700 = 0 && R7701 = R7705 && R7702 = 0 && R7703 = R7705 && R7704 = 0 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R6439 + -1*R6437 - R53 < 1 && -1 < R7621 && 0 < R7705 && (R48 + R3895 + R3892 != 0 || ((R42 + R72 + R70 != 0 || R43 + R73 + R71 + -1*R6439 + -1*R6437 - R53 = 0 || R53 + R6439 + R6437 < 1) && (R42 + R72 + R70 = 0 || R53 + R6439 + R6437 < 1))) && (R48 + R3895 + R3892 != 0 || ((R46 + R3893 + R3890 != 0 || R47 + R3894 + R3891 + -1*R6439 + -1*R6437 - R53 = 0 || R53 + R6439 + R6437 < 1) && (R46 + R3893 + R3890 = 0 || R53 + R6439 + R6437 < 1))) && (R7606 != 0 || R7607 = R7621 || (R17 = 0 && R7621 = 0)) && (R7608 != 0 || R7609 = R7621 || (R17 = 0 && R7621 = 0)) && (R7610 != 0 || R7611 = R7621 || (R17 = 0 && R7621 = 0)) && (R7612 != 0 || R7613 = R7621 || (R17 = 0 && R7621 = 0)) && (R7614 != 0 || R7615 = R7621 || (R17 = 0 && R7621 = 0)) && (R7616 != 0 || R7617 = R7621 || (R17 = 0 && R7621 = 0)) && (R7618 != 0 || R7619 = R7621 || (R17 = 0 && R7621 = 0)) && (R7622 != 0 || R7621 = R7623 || (R17 = 0 && R7621 = 0)) && (R7624 != 0 || R7621 = R7625 || (R17 = 0 && R7621 = 0)) && (R18 = 0 || (R7644 = 0 && R7645 = 0)) && (R18 = 0 || (R7648 = 0 && R7649 = 0)) && (R18 = 0 || (R7650 = 0 && R7651 = 0)) && (R18 = 0 || (R7652 = 0 && R7653 = 0)) && (R18 = 0 || (R7656 = 0 && R7657 = 0)) && (R19 = 0 || (R7626 = 0 && R7627 = 0)) && (R19 = 0 || (R7628 = 0 && R7629 = 0)) && (R19 = 0 || (R7630 = 0 && R7631 = 0)) && (R19 = 0 || (R7632 = 0 && R7633 = 0)) && (R19 = 0 || (R7634 = 0 && R7635 = 0)) && (R19 = 0 || (R7636 = 0 && R7637 = 0)) && (R19 = 0 || (R7638 = 0 && R7639 = 0)) && (R19 = 0 || (R7640 = 0 && R7641 = 0)) && (R19 = 0 || (R7642 = 0 && R7643 = 0)) && (R48 + R3895 + R3892 = 0 || (R42 + R72 + R70 = 0 && R43 + R73 + R71 + -1*R6439 + -1*R6437 - R53 = 0)) && (R48 + R3895 + R3892 = 0 || (R46 + R3893 + R3890 = 0 && R47 + R3894 + R3891 + -1*R6439 + -1*R6437 - R53 = 0)) && (R58 + R7289 + R7286 = 0 || (R56 + R7287 + R7284 = 0 && R57 + R7288 + R7285 = 0)) && (R58 + R7289 + R7286 = 0 || (R62 + R7604 + R7602 = 0 && R63 + R7605 + R7603 = 0)) && (R7606 = 0 || (R17 = 0 && R7621 = 0)) && (R7608 = 0 || (R17 = 0 && R7621 = 0)) && (R7610 = 0 || (R17 = 0 && R7621 = 0)) && (R7612 = 0 || (R17 = 0 && R7621 = 0)) && (R7614 = 0 || (R17 = 0 && R7621 = 0)) && (R7616 = 0 || (R17 = 0 && R7621 = 0)) && (R7618 = 0 || (R17 = 0 && R7621 = 0)) && (R7622 = 0 || (R17 = 0 && R7621 = 0)) && (R7624 = 0 || (R17 = 0 && R7621 = 0));
// End of Parikh automata intersection problem
