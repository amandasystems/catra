// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R11522, R11523, R11524, R11525, R11526, R11527, R11528, R11529, R11530, R11531, R12, R12802, R12803, R12804, R12805, R12806, R12807, R12808, R12809, R12810, R12811, R13020, R13021, R13022, R13023, R13024, R13025, R13026, R13027, R13028, R13029, R13030, R13031, R13032, R13033, R13034, R13035, R13036, R13037, R13038, R13039, R13040, R13041, R13042, R13043, R13044, R13045, R13046, R13047, R13048, R13049, R13050, R13051, R13052, R13053, R13054, R13055, R13056, R13057, R13058, R13059, R13060, R13061, R13062, R13063, R13064, R13065, R13066, R13067, R13068, R13069, R13070, R13071, R13072, R13073, R13074, R13075, R13076, R13077, R13078, R13079, R13080, R13081, R13082, R13083, R13084, R13085, R13086, R13087, R13088, R13089, R13090, R13091, R13092, R13093, R13094, R13095, R13096, R13097, R13098, R13099, R13100, R13101, R13102, R13103, R13104, R13105, R13106, R13107, R13108, R13109, R13110, R13111, R13112, R13113, R13114, R13115, R13116, R13117, R13118, R13119, R13120, R13121, R13122, R13123, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [81, 81];
  s0 -> s0 [82, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [81, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 80];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [81, 81];
  s0 -> s1 [82, 65535];
  s1 -> s1 [0, 80];
  s1 -> s2 [81, 81];
  s1 -> s1 [82, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s1 [0, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s1 [0, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R13044 += 1, R13045 += 1 };
  s0 -> s1 [0, 65535] { R13045 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R13045 += 1, R19 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 80] { R13047 += 1 };
  s0 -> s0 [0, 65535] { R13046 += 1, R13047 += 1 };
  s0 -> s2 [81, 81] { R13047 += 1 };
  s0 -> s3 [81, 81] { R13047 += 1 };
  s0 -> s1 [83, 65535] { R13047 += 1 };
  s1 -> s1 [0, 80] { R13047 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R13047 += 1 };
  s1 -> s3 [81, 81] { R13047 += 1 };
  s1 -> s1 [83, 65535] { R13047 += 1 };
  s2 -> s2 [0, 81] { R13047 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [83, 65535] { R13047 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 80] { R13049 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R13048 += 1, R13049 += 1 };
  s0 -> s2 [81, 81] { R13049 += 1, R38 += 1 };
  s0 -> s3 [81, 81] { R13049 += 1, R38 += 1 };
  s0 -> s1 [82, 65535] { R13049 += 1, R38 += 1 };
  s1 -> s1 [0, 80] { R13049 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R13049 += 1, R38 += 1 };
  s1 -> s3 [81, 81] { R13049 += 1, R38 += 1 };
  s1 -> s1 [82, 65535] { R13049 += 1, R38 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R13049 += 1, R38 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 80] { R13051 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R13050 += 1, R13051 += 1 };
  s0 -> s2 [81, 81] { R13051 += 1, R40 += 1 };
  s0 -> s3 [81, 81] { R13051 += 1, R40 += 1 };
  s0 -> s1 [82, 65535] { R13051 += 1, R40 += 1 };
  s1 -> s1 [0, 80] { R13051 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R13051 += 1, R40 += 1 };
  s1 -> s3 [81, 81] { R13051 += 1, R40 += 1 };
  s1 -> s1 [82, 65535] { R13051 += 1, R40 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R13051 += 1, R40 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 80] { R13053 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R13052 += 1, R13053 += 1 };
  s0 -> s2 [81, 81] { R13053 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [81, 81] { R13053 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [82, 65535] { R13053 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 80] { R13053 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R13053 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [81, 81] { R13053 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [82, 65535] { R13053 += 1, R42 += 1, R43 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R13053 += 1, R42 += 1, R43 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 80] { R13055 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R13054 += 1, R13055 += 1 };
  s0 -> s2 [81, 81] { R13055 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [81, 81] { R13055 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [82, 65535] { R13055 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 80] { R13055 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R13055 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [81, 81] { R13055 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [82, 65535] { R13055 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535] { R13055 += 1, R46 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 80] { R13057 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R13056 += 1, R13057 += 1 };
  s0 -> s2 [81, 81] { R13057 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [81, 81] { R13057 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [82, 65535] { R13057 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 80] { R13057 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R13057 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [81, 81] { R13057 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [82, 65535] { R13057 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535] { R13057 += 1, R52 += 1, R53 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 80] { R13059 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R13058 += 1, R13059 += 1 };
  s0 -> s2 [81, 81] { R13059 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [81, 81] { R13059 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [82, 65535] { R13059 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 80] { R13059 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R13059 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [81, 81] { R13059 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [82, 65535] { R13059 += 1, R56 += 1, R57 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R13059 += 1, R56 += 1, R57 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 80] { R13061 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R13060 += 1, R13061 += 1 };
  s0 -> s2 [81, 81] { R13061 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [81, 81] { R13061 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [82, 65535] { R13061 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 80] { R13061 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R13061 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [81, 81] { R13061 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [82, 65535] { R13061 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535] { R13061 += 1, R62 += 1, R63 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 80] { R13081 += 1 };
  s0 -> s0 [0, 65535] { R13080 += 1, R13081 += 1 };
  s0 -> s2 [81, 81] { R13081 += 1 };
  s0 -> s1 [82, 65535] { R13081 += 1 };
  s1 -> s1 [0, 80] { R13081 += 1 };
  s1 -> s2 [81, 81] { R13081 += 1 };
  s1 -> s1 [82, 65535] { R13081 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R13081 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R13082 += 1, R13083 += 1 };
  s0 -> s1 [0, 65535] { R13083 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R13083 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 80] { R13085 += 1 };
  s0 -> s2 [0, 65535] { R13085 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R13084 += 1, R13085 += 1 };
  s0 -> s3 [81, 81] { R13085 += 1 };
  s0 -> s1 [82, 65535] { R13085 += 1 };
  s1 -> s1 [0, 80] { R13085 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [81, 81] { R13085 += 1 };
  s1 -> s1 [82, 65535] { R13085 += 1 };
  s2 -> s1 [0, 80] { R13085 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R13085 += 1, R8 += 1 };
  s2 -> s3 [81, 81] { R13085 += 1 };
  s2 -> s1 [82, 65535] { R13085 += 1 };
  s3 -> s3 [0, 65535] { R13085 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 80] { R13087 += 1, R13025 += 1 };
  s0 -> s0 [0, 65535] { R13086 += 1, R13087 += 1 };
  s0 -> s2 [0, 65535] { R13087 += 1, R13024 += 1, R13025 += 1 };
  s0 -> s1 [82, 65535] { R13087 += 1, R13025 += 1 };
  s1 -> s1 [0, 80] { R13087 += 1, R13025 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R13087 += 1 };
  s1 -> s1 [82, 65535] { R13087 += 1, R13025 += 1 };
  s2 -> s1 [0, 80] { R13087 += 1, R13025 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R13087 += 1, R13024 += 1, R13025 += 1 };
  s2 -> s1 [82, 65535] { R13087 += 1, R13025 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R13089 += 1, R13026 += 1, R13027 += 1 };
  s0 -> s0 [0, 65535] { R13088 += 1, R13089 += 1 };
  s0 -> s2 [0, 65535] { R13089 += 1, R13027 += 1, R17 += 1 };
  s1 -> s1 [0, 65535] { R13089 += 1, R13026 += 1, R13027 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R13089 += 1, R13027 += 1, R17 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R13089 += 1, R13027 += 1, R17 += 1 };
  s2 -> s4 [0, 65535] { R13089 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R13089 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s0 [0, 65535] { R13090 += 1, R13091 += 1 };
  s0 -> s1 [0, 65535] { R13091 += 1, R13028 += 1, R13029 += 1 };
  s0 -> s2 [0, 65535] { R13091 += 1, R13029 += 1 };
  s1 -> s1 [0, 65535] { R13091 += 1, R13028 += 1, R13029 += 1 };
  s1 -> s2 [0, 65535] { R13091 += 1, R13029 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R13091 += 1 };
  s2 -> s2 [0, 65535] { R13091 += 1, R13029 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R13091 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R13093 += 1, R13031 += 1, R67 += 1 };
  s0 -> s0 [0, 65535] { R13092 += 1, R13093 += 1 };
  s0 -> s2 [0, 65535] { R13093 += 1, R13030 += 1, R13031 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R13093 += 1, R13031 += 1, R67 += 1 };
  s1 -> s4 [0, 65535] { R13093 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R13093 += 1, R13031 += 1, R67 += 1 };
  s2 -> s2 [0, 65535] { R13093 += 1, R13030 += 1, R13031 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R13093 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 81] { R13095 += 1, R13033 += 1 };
  s0 -> s2 [0, 65535] { R13095 += 1, R13033 += 1, R69 += 1 };
  s0 -> s3 [0, 65535] { R13095 += 1, R13032 += 1, R13033 += 1 };
  s0 -> s0 [0, 65535] { R13094 += 1, R13095 += 1 };
  s0 -> s1 [83, 65535] { R13095 += 1, R13033 += 1 };
  s1 -> s1 [0, 81] { R13095 += 1, R13033 += 1 };
  s1 -> s1 [0, 65535] { R13095 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [83, 65535] { R13095 += 1, R13033 += 1 };
  s2 -> s1 [0, 81] { R13095 += 1, R13033 += 1 };
  s2 -> s2 [0, 65535] { R13095 += 1, R13033 += 1, R69 += 1 };
  s2 -> s5 [0, 65535] { R13095 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [83, 65535] { R13095 += 1, R13033 += 1 };
  s3 -> s1 [0, 81] { R13095 += 1, R13033 += 1 };
  s3 -> s2 [0, 65535] { R13095 += 1, R13033 += 1, R69 += 1 };
  s3 -> s3 [0, 65535] { R13095 += 1, R13032 += 1, R13033 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [83, 65535] { R13095 += 1, R13033 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R13095 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 81] { R13097 += 1, R13035 += 1, R11525 += 1 };
  s0 -> s2 [0, 65535] { R13097 += 1, R13034 += 1, R13035 += 1 };
  s0 -> s0 [0, 65535] { R13096 += 1, R13097 += 1 };
  s0 -> s1 [0, 65535] { R13097 += 1, R13035 += 1 };
  s0 -> s1 [83, 65535] { R13097 += 1, R13035 += 1, R11525 += 1 };
  s1 -> s1 [0, 81] { R13097 += 1, R13035 += 1, R11525 += 1 };
  s1 -> s4 [0, 65535] { R13097 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R13097 += 1, R13035 += 1 };
  s1 -> s1 [83, 65535] { R13097 += 1, R13035 += 1, R11525 += 1 };
  s2 -> s1 [0, 81] { R13097 += 1, R13035 += 1, R11525 += 1 };
  s2 -> s2 [0, 65535] { R13097 += 1, R13034 += 1, R13035 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R13097 += 1, R13035 += 1 };
  s2 -> s1 [83, 65535] { R13097 += 1, R13035 += 1, R11525 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R13097 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R13099 += 1, R13037 += 1, R11530 += 1, R11531 += 1 };
  s0 -> s0 [0, 65535] { R13098 += 1, R13099 += 1 };
  s0 -> s2 [0, 65535] { R13099 += 1, R13037 += 1, R11529 += 1, R11530 += 1 };
  s0 -> s3 [0, 65535] { R13099 += 1, R13036 += 1, R13037 += 1 };
  s1 -> s1 [0, 65535] { R13099 += 1, R13037 += 1, R11530 += 1, R11531 += 1 };
  s1 -> s6 [0, 65535] { R13099 += 1, R13037 += 1 };
  s1 -> s5 [0, 65535] { R13099 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R13099 += 1, R13037 += 1, R11530 += 1, R11531 += 1 };
  s2 -> s5 [0, 65535] { R13099 += 1 };
  s2 -> s2 [0, 65535] { R13099 += 1, R13037 += 1, R11529 += 1, R11530 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R13099 += 1, R13037 += 1, R11530 += 1, R11531 += 1 };
  s3 -> s2 [0, 65535] { R13099 += 1, R13037 += 1, R11529 += 1, R11530 += 1 };
  s3 -> s3 [0, 65535] { R13099 += 1, R13036 += 1, R13037 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R13099 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R13099 += 1, R13037 += 1 };
  s6 -> s5 [0, 65535] { R13099 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 82] { R13101 += 1, R13039 += 1, R12805 += 1 };
  s0 -> s2 [0, 65535] { R13101 += 1, R13039 += 1, R12804 += 1, R12805 += 1 };
  s0 -> s0 [0, 65535] { R13100 += 1, R13101 += 1 };
  s0 -> s3 [0, 65535] { R13101 += 1, R13038 += 1, R13039 += 1 };
  s0 -> s4 [86, 86] { R13101 += 1, R13039 += 1, R12805 += 1 };
  s0 -> s1 [87, 65535] { R13101 += 1, R13039 += 1, R12805 += 1 };
  s1 -> s1 [0, 82] { R13101 += 1, R13039 += 1, R12805 += 1 };
  s1 -> s4 [86, 86] { R13101 += 1, R13039 += 1, R12805 += 1 };
  s1 -> s1 [87, 65535] { R13101 += 1, R13039 += 1, R12805 += 1 };
  s2 -> s1 [0, 82] { R13101 += 1, R13039 += 1, R12805 += 1 };
  s2 -> s2 [0, 65535] { R13101 += 1, R13039 += 1, R12804 += 1, R12805 += 1 };
  s2 -> s4 [86, 86] { R13101 += 1, R13039 += 1, R12805 += 1 };
  s2 -> s1 [87, 65535] { R13101 += 1, R13039 += 1, R12805 += 1 };
  s3 -> s1 [0, 82] { R13101 += 1, R13039 += 1, R12805 += 1 };
  s3 -> s2 [0, 65535] { R13101 += 1, R13039 += 1, R12804 += 1, R12805 += 1 };
  s3 -> s3 [0, 65535] { R13101 += 1, R13038 += 1, R13039 += 1 };
  s3 -> s4 [86, 86] { R13101 += 1, R13039 += 1, R12805 += 1 };
  s3 -> s1 [87, 65535] { R13101 += 1, R13039 += 1, R12805 += 1 };
  s4 -> s4 [0, 82] { R13101 += 1, R13039 += 1, R12805 += 1 };
  s4 -> s5 [0, 65535] { R13101 += 1 };
  s4 -> s4 [0, 65535] { R13101 += 1, R13039 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [86, 65535] { R13101 += 1, R13039 += 1, R12805 += 1 };
  s5 -> s5 [0, 65535] { R13101 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s4, s5, s6;
};
automaton value2_28 {
  init s0;
  s0 -> s0 [0, 65535] { R13102 += 1, R13103 += 1 };
  s0 -> s1 [0, 65535] { R13103 += 1, R13040 += 1, R13041 += 1 };
  s0 -> s2 [0, 65535] { R13103 += 1, R13041 += 1, R12810 += 1, R12811 += 1 };
  s0 -> s3 [0, 65535] { R13103 += 1, R13041 += 1, R12809 += 1, R12810 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R13103 += 1, R13040 += 1, R13041 += 1 };
  s1 -> s2 [0, 65535] { R13103 += 1, R13041 += 1, R12810 += 1, R12811 += 1 };
  s1 -> s3 [0, 65535] { R13103 += 1, R13041 += 1, R12809 += 1, R12810 += 1 };
  s2 -> s6 [0, 65535] { R13103 += 1, R13041 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R13103 += 1 };
  s2 -> s2 [0, 65535] { R13103 += 1, R13041 += 1, R12810 += 1, R12811 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R13103 += 1 };
  s3 -> s2 [0, 65535] { R13103 += 1, R13041 += 1, R12810 += 1, R12811 += 1 };
  s3 -> s3 [0, 65535] { R13103 += 1, R13041 += 1, R12809 += 1, R12810 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R13103 += 1 };
  s6 -> s6 [0, 65535] { R13103 += 1, R13041 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R13103 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 82] { R13105 += 1, R13043 += 1, R13023 += 1 };
  s0 -> s1 [0, 65535] { R13105 += 1, R13043 += 1 };
  s0 -> s0 [0, 65535] { R13104 += 1, R13105 += 1 };
  s0 -> s2 [0, 65535] { R13105 += 1, R13042 += 1, R13043 += 1 };
  s0 -> s1 [87, 65535] { R13105 += 1, R13043 += 1, R13023 += 1 };
  s1 -> s1 [0, 82] { R13105 += 1, R13043 += 1, R13023 += 1 };
  s1 -> s4 [0, 65535] { R13105 += 1 };
  s1 -> s1 [0, 65535] { R13105 += 1, R13043 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [87, 65535] { R13105 += 1, R13043 += 1, R13023 += 1 };
  s2 -> s1 [0, 82] { R13105 += 1, R13043 += 1, R13023 += 1 };
  s2 -> s1 [0, 65535] { R13105 += 1, R13043 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R13105 += 1, R13042 += 1, R13043 += 1 };
  s2 -> s1 [87, 65535] { R13105 += 1, R13043 += 1, R13023 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R13105 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s0 [0, 65535] { R13106 += 1, R13107 += 1 };
  s0 -> s1 [0, 65535] { R13107 += 1, R13063 += 1, R18 += 1 };
  s0 -> s2 [0, 65535] { R13107 += 1, R13062 += 1, R13063 += 1 };
  s1 -> s1 [0, 65535] { R13107 += 1, R13063 += 1, R18 += 1 };
  s1 -> s4 [0, 65535] { R13107 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R13107 += 1, R13063 += 1, R18 += 1 };
  s2 -> s2 [0, 65535] { R13107 += 1, R13062 += 1, R13063 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R13107 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 80] { R13109 += 1, R13065 += 1 };
  s0 -> s0 [0, 65535] { R13108 += 1, R13109 += 1 };
  s0 -> s2 [0, 65535] { R13109 += 1, R13064 += 1, R13065 += 1 };
  s0 -> s3 [81, 81] { R13109 += 1, R13065 += 1 };
  s0 -> s4 [81, 81] { R13109 += 1, R13065 += 1 };
  s0 -> s5 [82, 82] { R13109 += 1, R13065 += 1 };
  s0 -> s1 [83, 65535] { R13109 += 1, R13065 += 1 };
  s1 -> s1 [0, 80] { R13109 += 1, R13065 += 1 };
  s1 -> s3 [81, 81] { R13109 += 1, R13065 += 1 };
  s1 -> s4 [81, 81] { R13109 += 1, R13065 += 1 };
  s1 -> s5 [82, 82] { R13109 += 1, R13065 += 1 };
  s1 -> s1 [83, 65535] { R13109 += 1, R13065 += 1 };
  s2 -> s1 [0, 80] { R13109 += 1, R13065 += 1 };
  s2 -> s2 [0, 65535] { R13109 += 1, R13064 += 1, R13065 += 1 };
  s2 -> s3 [81, 81] { R13109 += 1, R13065 += 1 };
  s2 -> s4 [81, 81] { R13109 += 1, R13065 += 1 };
  s2 -> s5 [82, 82] { R13109 += 1, R13065 += 1 };
  s2 -> s1 [83, 65535] { R13109 += 1, R13065 += 1 };
  s4 -> s4 [0, 81] { R13109 += 1, R13065 += 1 };
  s4 -> s7 [82, 82] { R13109 += 1, R13065 += 1 };
  s4 -> s4 [83, 65535] { R13109 += 1, R13065 += 1 };
  s5 -> s5 [0, 80] { R13109 += 1, R13065 += 1 };
  s5 -> s5 [0, 65535] { R13109 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [81, 81] { R13109 += 1, R13065 += 1 };
  s5 -> s8 [81, 81] { R13109 += 1, R13065 += 1 };
  s5 -> s5 [82, 65535] { R13109 += 1, R13065 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s9 [0, 65535] { R13109 += 1 };
  s7 -> s7 [0, 65535] { R13109 += 1, R13065 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R13109 += 1 };
  s9 -> s9 [0, 65535] { R13109 += 1 };
  s9 -> s6 [0, 65535];
  accepting s8, s5, s9, s6, s7;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 80] { R13111 += 1, R13067 += 1, R66 += 1 };
  s0 -> s2 [0, 65535] { R13111 += 1, R13066 += 1, R13067 += 1 };
  s0 -> s0 [0, 65535] { R13110 += 1, R13111 += 1 };
  s0 -> s3 [81, 81] { R13111 += 1, R13067 += 1, R66 += 1 };
  s0 -> s4 [81, 81] { R13111 += 1, R13067 += 1, R66 += 1 };
  s0 -> s1 [82, 65535] { R13111 += 1, R13067 += 1, R66 += 1 };
  s1 -> s1 [0, 80] { R13111 += 1, R13067 += 1, R66 += 1 };
  s1 -> s1 [0, 65535] { R13111 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [81, 81] { R13111 += 1, R13067 += 1, R66 += 1 };
  s1 -> s4 [81, 81] { R13111 += 1, R13067 += 1, R66 += 1 };
  s1 -> s1 [82, 65535] { R13111 += 1, R13067 += 1, R66 += 1 };
  s2 -> s1 [0, 80] { R13111 += 1, R13067 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R13111 += 1, R13066 += 1, R13067 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [81, 81] { R13111 += 1, R13067 += 1, R66 += 1 };
  s2 -> s4 [81, 81] { R13111 += 1, R13067 += 1, R66 += 1 };
  s2 -> s1 [82, 65535] { R13111 += 1, R13067 += 1, R66 += 1 };
  s3 -> s3 [0, 65535] { R13111 += 1, R13067 += 1, R66 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R13111 += 1 };
  s4 -> s4 [0, 65535] { R13111 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R13111 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 80] { R13113 += 1, R13069 += 1, R68 += 1 };
  s0 -> s0 [0, 65535] { R13112 += 1, R13113 += 1 };
  s0 -> s2 [0, 65535] { R13113 += 1, R13068 += 1, R13069 += 1 };
  s0 -> s3 [81, 81] { R13113 += 1, R13069 += 1, R68 += 1 };
  s0 -> s4 [81, 81] { R13113 += 1, R13069 += 1, R68 += 1 };
  s0 -> s1 [82, 65535] { R13113 += 1, R13069 += 1, R68 += 1 };
  s1 -> s1 [0, 80] { R13113 += 1, R13069 += 1, R68 += 1 };
  s1 -> s1 [0, 65535] { R13113 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [81, 81] { R13113 += 1, R13069 += 1, R68 += 1 };
  s1 -> s4 [81, 81] { R13113 += 1, R13069 += 1, R68 += 1 };
  s1 -> s1 [82, 65535] { R13113 += 1, R13069 += 1, R68 += 1 };
  s2 -> s1 [0, 80] { R13113 += 1, R13069 += 1, R68 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R13113 += 1, R13068 += 1, R13069 += 1 };
  s2 -> s3 [81, 81] { R13113 += 1, R13069 += 1, R68 += 1 };
  s2 -> s4 [81, 81] { R13113 += 1, R13069 += 1, R68 += 1 };
  s2 -> s1 [82, 65535] { R13113 += 1, R13069 += 1, R68 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R13113 += 1 };
  s4 -> s5 [0, 65535] { R13113 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R13113 += 1, R13069 += 1, R68 += 1 };
  s5 -> s5 [0, 65535] { R13113 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 80] { R13115 += 1, R13071 += 1, R11523 += 1 };
  s0 -> s2 [0, 80] { R13115 += 1, R13071 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s0 [0, 65535] { R13114 += 1, R13115 += 1 };
  s0 -> s3 [0, 65535] { R13115 += 1, R13070 += 1, R13071 += 1 };
  s0 -> s4 [81, 81] { R13115 += 1, R13071 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s5 [81, 81] { R13115 += 1, R13071 += 1, R11523 += 1 };
  s0 -> s6 [81, 81] { R13115 += 1, R13071 += 1, R11523 += 1 };
  s0 -> s7 [81, 81] { R13115 += 1, R13071 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s2 [82, 65535] { R13115 += 1, R13071 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s1 [83, 65535] { R13115 += 1, R13071 += 1, R11523 += 1 };
  s1 -> s1 [0, 80] { R13115 += 1, R13071 += 1, R11523 += 1 };
  s1 -> s1 [0, 65535] { R13115 += 1 };
  s1 -> s9 [0, 65535];
  s1 -> s6 [81, 81] { R13115 += 1, R13071 += 1 };
  s1 -> s5 [81, 81] { R13115 += 1, R13071 += 1 };
  s1 -> s1 [82, 65535] { R13115 += 1, R13071 += 1 };
  s1 -> s1 [83, 65535] { R13115 += 1, R13071 += 1, R11523 += 1 };
  s2 -> s1 [0, 80] { R13115 += 1, R13071 += 1, R11523 += 1 };
  s2 -> s2 [0, 80] { R13115 += 1, R13071 += 1, R11522 += 1, R11523 += 1 };
  s2 -> s4 [81, 81] { R13115 += 1, R13071 += 1, R11522 += 1, R11523 += 1 };
  s2 -> s5 [81, 81] { R13115 += 1, R13071 += 1, R11523 += 1 };
  s2 -> s6 [81, 81] { R13115 += 1, R13071 += 1, R11523 += 1 };
  s2 -> s7 [81, 81] { R13115 += 1, R13071 += 1, R11522 += 1, R11523 += 1 };
  s2 -> s2 [82, 65535] { R13115 += 1, R13071 += 1, R11522 += 1, R11523 += 1 };
  s2 -> s1 [83, 65535] { R13115 += 1, R13071 += 1, R11523 += 1 };
  s3 -> s1 [0, 80] { R13115 += 1, R13071 += 1, R11523 += 1 };
  s3 -> s2 [0, 80] { R13115 += 1, R13071 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s3 [0, 65535] { R13115 += 1, R13070 += 1, R13071 += 1 };
  s3 -> s4 [81, 81] { R13115 += 1, R13071 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s5 [81, 81] { R13115 += 1, R13071 += 1, R11523 += 1 };
  s3 -> s6 [81, 81] { R13115 += 1, R13071 += 1, R11523 += 1 };
  s3 -> s7 [81, 81] { R13115 += 1, R13071 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s2 [82, 65535] { R13115 += 1, R13071 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s1 [83, 65535] { R13115 += 1, R13071 += 1, R11523 += 1 };
  s4 -> s6 [0, 81] { R13115 += 1, R13071 += 1, R11523 += 1 };
  s4 -> s4 [0, 65535] { R13115 += 1, R13071 += 1, R11522 += 1, R11523 += 1 };
  s4 -> s6 [83, 65535] { R13115 += 1, R13071 += 1, R11523 += 1 };
  s5 -> s5 [0, 65535] { R13115 += 1 };
  s5 -> s9 [0, 65535];
  s6 -> s6 [0, 81] { R13115 += 1, R13071 += 1, R11523 += 1 };
  s6 -> s6 [0, 65535] { R13115 += 1, R13071 += 1 };
  s6 -> s8 [0, 65535] { R13115 += 1 };
  s6 -> s9 [0, 65535];
  s6 -> s6 [83, 65535] { R13115 += 1, R13071 += 1, R11523 += 1 };
  s8 -> s8 [0, 65535] { R13115 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s8, s5, s9, s6, s1;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 80] { R13117 += 1, R13073 += 1, R11526 += 1, R11527 += 1 };
  s0 -> s0 [0, 65535] { R13116 += 1, R13117 += 1 };
  s0 -> s2 [0, 65535] { R13117 += 1, R13072 += 1, R13073 += 1 };
  s0 -> s3 [81, 81] { R13117 += 1, R13073 += 1, R11526 += 1, R11527 += 1 };
  s0 -> s4 [81, 81] { R13117 += 1, R13073 += 1, R11526 += 1, R11527 += 1 };
  s0 -> s1 [82, 65535] { R13117 += 1, R13073 += 1, R11526 += 1, R11527 += 1 };
  s1 -> s1 [0, 80] { R13117 += 1, R13073 += 1, R11526 += 1, R11527 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R13117 += 1 };
  s1 -> s3 [81, 81] { R13117 += 1, R13073 += 1, R11526 += 1, R11527 += 1 };
  s1 -> s4 [81, 81] { R13117 += 1, R13073 += 1, R11526 += 1, R11527 += 1 };
  s1 -> s1 [82, 65535] { R13117 += 1, R13073 += 1, R11526 += 1, R11527 += 1 };
  s2 -> s1 [0, 80] { R13117 += 1, R13073 += 1, R11526 += 1, R11527 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R13117 += 1, R13072 += 1, R13073 += 1 };
  s2 -> s3 [81, 81] { R13117 += 1, R13073 += 1, R11526 += 1, R11527 += 1 };
  s2 -> s4 [81, 81] { R13117 += 1, R13073 += 1, R11526 += 1, R11527 += 1 };
  s2 -> s1 [82, 65535] { R13117 += 1, R13073 += 1, R11526 += 1, R11527 += 1 };
  s3 -> s3 [0, 65535] { R13117 += 1, R13073 += 1, R11526 += 1, R11527 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R13117 += 1 };
  s4 -> s4 [0, 65535] { R13117 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R13117 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 80] { R13119 += 1, R13075 += 1, R12802 += 1, R12803 += 1 };
  s0 -> s2 [0, 65535] { R13119 += 1, R13074 += 1, R13075 += 1 };
  s0 -> s0 [0, 65535] { R13118 += 1, R13119 += 1 };
  s0 -> s3 [81, 81] { R13119 += 1, R13075 += 1, R12802 += 1, R12803 += 1 };
  s0 -> s4 [81, 81] { R13119 += 1, R13075 += 1, R12802 += 1, R12803 += 1 };
  s0 -> s1 [82, 65535] { R13119 += 1, R13075 += 1, R12802 += 1, R12803 += 1 };
  s1 -> s1 [0, 80] { R13119 += 1, R13075 += 1, R12802 += 1, R12803 += 1 };
  s1 -> s1 [0, 65535] { R13119 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [81, 81] { R13119 += 1, R13075 += 1, R12802 += 1, R12803 += 1 };
  s1 -> s4 [81, 81] { R13119 += 1, R13075 += 1, R12802 += 1, R12803 += 1 };
  s1 -> s1 [82, 65535] { R13119 += 1, R13075 += 1, R12802 += 1, R12803 += 1 };
  s2 -> s1 [0, 80] { R13119 += 1, R13075 += 1, R12802 += 1, R12803 += 1 };
  s2 -> s2 [0, 65535] { R13119 += 1, R13074 += 1, R13075 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [81, 81] { R13119 += 1, R13075 += 1, R12802 += 1, R12803 += 1 };
  s2 -> s4 [81, 81] { R13119 += 1, R13075 += 1, R12802 += 1, R12803 += 1 };
  s2 -> s1 [82, 65535] { R13119 += 1, R13075 += 1, R12802 += 1, R12803 += 1 };
  s3 -> s3 [0, 65535] { R13119 += 1, R13075 += 1, R12802 += 1, R12803 += 1 };
  s3 -> s6 [0, 65535] { R13119 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R13119 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R13119 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 80] { R13121 += 1, R13077 += 1, R12806 += 1, R12807 += 1 };
  s0 -> s0 [0, 65535] { R13120 += 1, R13121 += 1 };
  s0 -> s2 [0, 65535] { R13121 += 1, R13076 += 1, R13077 += 1 };
  s0 -> s3 [81, 81] { R13121 += 1, R13077 += 1, R12806 += 1, R12807 += 1 };
  s0 -> s4 [81, 81] { R13121 += 1, R13077 += 1, R12806 += 1, R12807 += 1 };
  s0 -> s1 [82, 65535] { R13121 += 1, R13077 += 1, R12806 += 1, R12807 += 1 };
  s1 -> s1 [0, 80] { R13121 += 1, R13077 += 1, R12806 += 1, R12807 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R13121 += 1 };
  s1 -> s3 [81, 81] { R13121 += 1, R13077 += 1, R12806 += 1, R12807 += 1 };
  s1 -> s4 [81, 81] { R13121 += 1, R13077 += 1, R12806 += 1, R12807 += 1 };
  s1 -> s1 [82, 65535] { R13121 += 1, R13077 += 1, R12806 += 1, R12807 += 1 };
  s2 -> s1 [0, 80] { R13121 += 1, R13077 += 1, R12806 += 1, R12807 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R13121 += 1, R13076 += 1, R13077 += 1 };
  s2 -> s3 [81, 81] { R13121 += 1, R13077 += 1, R12806 += 1, R12807 += 1 };
  s2 -> s4 [81, 81] { R13121 += 1, R13077 += 1, R12806 += 1, R12807 += 1 };
  s2 -> s1 [82, 65535] { R13121 += 1, R13077 += 1, R12806 += 1, R12807 += 1 };
  s3 -> s3 [0, 65535] { R13121 += 1, R13077 += 1, R12806 += 1, R12807 += 1 };
  s3 -> s6 [0, 65535] { R13121 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R13121 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R13121 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 80] { R13123 += 1, R13079 += 1, R13020 += 1, R13021 += 1 };
  s0 -> s2 [0, 80] { R13123 += 1, R13079 += 1, R13021 += 1 };
  s0 -> s0 [0, 65535] { R13122 += 1, R13123 += 1 };
  s0 -> s3 [0, 65535] { R13123 += 1, R13078 += 1, R13079 += 1 };
  s0 -> s4 [81, 81] { R13123 += 1, R13079 += 1, R13020 += 1, R13021 += 1 };
  s0 -> s5 [81, 81] { R13123 += 1, R13079 += 1, R13021 += 1 };
  s0 -> s6 [81, 81] { R13123 += 1, R13079 += 1, R13021 += 1 };
  s0 -> s7 [81, 81] { R13123 += 1, R13079 += 1, R13020 += 1, R13021 += 1 };
  s0 -> s8 [82, 82] { R13123 += 1, R13079 += 1, R13021 += 1 };
  s0 -> s1 [82, 65535] { R13123 += 1, R13079 += 1, R13020 += 1, R13021 += 1 };
  s0 -> s2 [87, 65535] { R13123 += 1, R13079 += 1, R13021 += 1 };
  s1 -> s1 [0, 80] { R13123 += 1, R13079 += 1, R13020 += 1, R13021 += 1 };
  s1 -> s2 [0, 80] { R13123 += 1, R13079 += 1, R13021 += 1 };
  s1 -> s4 [81, 81] { R13123 += 1, R13079 += 1, R13020 += 1, R13021 += 1 };
  s1 -> s5 [81, 81] { R13123 += 1, R13079 += 1, R13021 += 1 };
  s1 -> s6 [81, 81] { R13123 += 1, R13079 += 1, R13021 += 1 };
  s1 -> s7 [81, 81] { R13123 += 1, R13079 += 1, R13020 += 1, R13021 += 1 };
  s1 -> s8 [82, 82] { R13123 += 1, R13079 += 1, R13021 += 1 };
  s1 -> s1 [82, 65535] { R13123 += 1, R13079 += 1, R13020 += 1, R13021 += 1 };
  s1 -> s2 [87, 65535] { R13123 += 1, R13079 += 1, R13021 += 1 };
  s2 -> s2 [0, 80] { R13123 += 1, R13079 += 1, R13021 += 1 };
  s2 -> s5 [81, 81] { R13123 += 1, R13079 += 1 };
  s2 -> s6 [81, 81] { R13123 += 1, R13079 += 1 };
  s2 -> s8 [82, 82] { R13123 += 1, R13079 += 1, R13021 += 1 };
  s2 -> s2 [82, 65535] { R13123 += 1, R13079 += 1 };
  s2 -> s2 [87, 65535] { R13123 += 1, R13079 += 1, R13021 += 1 };
  s3 -> s1 [0, 80] { R13123 += 1, R13079 += 1, R13020 += 1, R13021 += 1 };
  s3 -> s2 [0, 80] { R13123 += 1, R13079 += 1, R13021 += 1 };
  s3 -> s3 [0, 65535] { R13123 += 1, R13078 += 1, R13079 += 1 };
  s3 -> s4 [81, 81] { R13123 += 1, R13079 += 1, R13020 += 1, R13021 += 1 };
  s3 -> s5 [81, 81] { R13123 += 1, R13079 += 1, R13021 += 1 };
  s3 -> s6 [81, 81] { R13123 += 1, R13079 += 1, R13021 += 1 };
  s3 -> s7 [81, 81] { R13123 += 1, R13079 += 1, R13020 += 1, R13021 += 1 };
  s3 -> s8 [82, 82] { R13123 += 1, R13079 += 1, R13021 += 1 };
  s3 -> s1 [82, 65535] { R13123 += 1, R13079 += 1, R13020 += 1, R13021 += 1 };
  s3 -> s2 [87, 65535] { R13123 += 1, R13079 += 1, R13021 += 1 };
  s6 -> s6 [0, 81] { R13123 += 1, R13079 += 1, R13021 += 1 };
  s6 -> s6 [0, 65535] { R13123 += 1, R13079 += 1 };
  s6 -> s10 [82, 82] { R13123 += 1, R13079 += 1, R13021 += 1 };
  s6 -> s6 [87, 65535] { R13123 += 1, R13079 += 1, R13021 += 1 };
  s7 -> s6 [0, 81] { R13123 += 1, R13079 += 1, R13021 += 1 };
  s7 -> s7 [0, 65535] { R13123 += 1, R13079 += 1, R13020 += 1, R13021 += 1 };
  s7 -> s10 [82, 82] { R13123 += 1, R13079 += 1, R13021 += 1 };
  s7 -> s6 [87, 65535] { R13123 += 1, R13079 += 1, R13021 += 1 };
  s8 -> s8 [0, 80] { R13123 += 1, R13079 += 1, R13021 += 1 };
  s8 -> s8 [0, 65535] { R13123 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [81, 81] { R13123 += 1, R13079 += 1 };
  s8 -> s11 [81, 81] { R13123 += 1, R13079 += 1 };
  s8 -> s8 [82, 82] { R13123 += 1, R13079 += 1, R13021 += 1 };
  s8 -> s8 [82, 65535] { R13123 += 1, R13079 += 1 };
  s8 -> s8 [87, 65535] { R13123 += 1, R13079 += 1, R13021 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 82] { R13123 += 1, R13079 += 1, R13021 += 1 };
  s10 -> s12 [0, 65535] { R13123 += 1 };
  s10 -> s10 [0, 65535] { R13123 += 1, R13079 += 1 };
  s10 -> s9 [0, 65535];
  s10 -> s10 [87, 65535] { R13123 += 1, R13079 += 1, R13021 += 1 };
  s11 -> s11 [0, 65535] { R13123 += 1 };
  s11 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R13123 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining c1
automaton c1_0 {
  init s0;
  s0 -> s1 [114, 114];
  accepting s1;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [113, 113];
  accepting s1;
};
};
constraint R1 = R13039 && R2 = R13123 && R20 - R13123 = -1 && R21 = R13123 && R22 - R13123 = -1 && R23 = R13123 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R12805 + -1*R12803 - R53 = 0 && R52 + R12804 + R12802 = 0 && R13038 = 0 && R13064 = 0 && R13065 = 0 && R13070 = 0 && R13071 = 0 && R13078 = 0 && R13079 = 0 && R13080 = 0 && R13081 = R13123 && R13082 = 0 && R13083 = R13123 && R13084 = 0 && R13085 = R13123 && R13086 = 0 && R13087 = R13123 && R13088 = 0 && R13089 = R13123 && R13090 = 0 && R13091 = R13123 && R13092 = 0 && R13093 = R13123 && R13094 = 0 && R13095 = R13123 && R13096 = 0 && R13097 = R13123 && R13098 = 0 && R13099 = R13123 && R13100 = 0 && R13101 = R13123 && R13102 = 0 && R13103 = R13123 && R13104 = 0 && R13105 = R13123 && R13106 = 0 && R13107 = R13123 && R13108 = 0 && R13109 = R13123 && R13110 = 0 && R13111 = R13123 && R13112 = 0 && R13113 = R13123 && R13114 = 0 && R13115 = R13123 && R13116 = 0 && R13117 = R13123 && R13118 = 0 && R13119 = R13123 && R13120 = 0 && R13121 = R13123 && R13122 = 0 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R12805 + -1*R12803 - R53 < 1 && -1 < R13039 && 0 < R13123 && (R48 + R11531 + R11528 != 0 || ((R42 + R11524 + R11522 != 0 || R43 + R11525 + R11523 + -1*R12805 + -1*R12803 - R53 = 0 || R53 + R12805 + R12803 < 1) && (R42 + R11524 + R11522 = 0 || R53 + R12805 + R12803 < 1))) && (R48 + R11531 + R11528 != 0 || ((R46 + R11529 + R11526 != 0 || R47 + R11530 + R11527 + -1*R12805 + -1*R12803 - R53 = 0 || R53 + R12805 + R12803 < 1) && (R46 + R11529 + R11526 = 0 || R53 + R12805 + R12803 < 1))) && (R13024 != 0 || R13025 = R13039 || (R17 = 0 && R13039 = 0)) && (R13026 != 0 || R13027 = R13039 || (R17 = 0 && R13039 = 0)) && (R13028 != 0 || R13029 = R13039 || (R17 = 0 && R13039 = 0)) && (R13030 != 0 || R13031 = R13039 || (R17 = 0 && R13039 = 0)) && (R13032 != 0 || R13033 = R13039 || (R17 = 0 && R13039 = 0)) && (R13034 != 0 || R13035 = R13039 || (R17 = 0 && R13039 = 0)) && (R13036 != 0 || R13037 = R13039 || (R17 = 0 && R13039 = 0)) && (R13040 != 0 || R13039 = R13041 || (R17 = 0 && R13039 = 0)) && (R13042 != 0 || R13039 = R13043 || (R17 = 0 && R13039 = 0)) && (R18 = 0 || (R13062 = 0 && R13063 = 0)) && (R18 = 0 || (R13066 = 0 && R13067 = 0)) && (R18 = 0 || (R13068 = 0 && R13069 = 0)) && (R18 = 0 || (R13072 = 0 && R13073 = 0)) && (R18 = 0 || (R13074 = 0 && R13075 = 0)) && (R18 = 0 || (R13076 = 0 && R13077 = 0)) && (R19 = 0 || (R13044 = 0 && R13045 = 0)) && (R19 = 0 || (R13046 = 0 && R13047 = 0)) && (R19 = 0 || (R13048 = 0 && R13049 = 0)) && (R19 = 0 || (R13050 = 0 && R13051 = 0)) && (R19 = 0 || (R13052 = 0 && R13053 = 0)) && (R19 = 0 || (R13054 = 0 && R13055 = 0)) && (R19 = 0 || (R13056 = 0 && R13057 = 0)) && (R19 = 0 || (R13058 = 0 && R13059 = 0)) && (R19 = 0 || (R13060 = 0 && R13061 = 0)) && (R48 + R11531 + R11528 = 0 || (R42 + R11524 + R11522 = 0 && R43 + R11525 + R11523 + -1*R12805 + -1*R12803 - R53 = 0)) && (R48 + R11531 + R11528 = 0 || (R46 + R11529 + R11526 = 0 && R47 + R11530 + R11527 + -1*R12805 + -1*R12803 - R53 = 0)) && (R58 + R12811 + R12808 = 0 || (R56 + R12809 + R12806 = 0 && R57 + R12810 + R12807 = 0)) && (R58 + R12811 + R12808 = 0 || (R62 + R13022 + R13020 = 0 && R63 + R13023 + R13021 = 0)) && (R13024 = 0 || (R17 = 0 && R13039 = 0)) && (R13026 = 0 || (R17 = 0 && R13039 = 0)) && (R13028 = 0 || (R17 = 0 && R13039 = 0)) && (R13030 = 0 || (R17 = 0 && R13039 = 0)) && (R13032 = 0 || (R17 = 0 && R13039 = 0)) && (R13034 = 0 || (R17 = 0 && R13039 = 0)) && (R13036 = 0 || (R17 = 0 && R13039 = 0)) && (R13040 = 0 || (R17 = 0 && R13039 = 0)) && (R13042 = 0 || (R17 = 0 && R13039 = 0));
// End of Parikh automata intersection problem
