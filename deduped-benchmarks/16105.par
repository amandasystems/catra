// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R11522, R11523, R11524, R11525, R12, R15342, R15343, R15344, R15345, R15346, R15347, R15348, R15349, R15350, R15351, R16196, R16197, R16198, R16199, R16200, R16201, R16514, R16515, R16516, R16517, R16518, R16519, R16520, R16521, R16522, R16523, R16524, R16525, R16526, R16527, R16528, R16529, R16530, R16531, R16532, R16533, R16534, R16535, R16536, R16537, R16538, R16539, R16540, R16541, R16542, R16543, R16544, R16545, R16546, R16547, R16548, R16549, R16550, R16551, R16552, R16553, R16554, R16555, R16556, R16557, R16558, R16559, R16560, R16561, R16562, R16563, R16564, R16565, R16566, R16567, R16568, R16569, R16570, R16571, R16572, R16573, R16574, R16575, R16576, R16577, R16578, R16579, R16580, R16581, R16582, R16583, R16584, R16585, R16586, R16587, R16588, R16589, R16590, R16591, R16592, R16593, R16594, R16595, R16596, R16597, R16598, R16599, R16600, R16601, R16602, R16603, R16604, R16605, R16606, R16607, R16608, R16609, R16610, R16611, R16612, R16613, R16614, R16615, R16616, R16617, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [81, 81];
  s0 -> s0 [82, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [81, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 80];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [81, 81];
  s0 -> s1 [82, 65535];
  s1 -> s1 [0, 80];
  s1 -> s2 [81, 81];
  s1 -> s1 [82, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s1 [0, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s1 [0, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R16539 += 1, R19 += 1 };
  s0 -> s0 [0, 65535] { R16538 += 1, R16539 += 1 };
  s1 -> s1 [0, 65535] { R16539 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 80] { R16541 += 1 };
  s0 -> s0 [0, 65535] { R16540 += 1, R16541 += 1 };
  s0 -> s2 [81, 81] { R16541 += 1 };
  s0 -> s3 [81, 81] { R16541 += 1 };
  s0 -> s1 [83, 65535] { R16541 += 1 };
  s1 -> s1 [0, 80] { R16541 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R16541 += 1 };
  s1 -> s3 [81, 81] { R16541 += 1 };
  s1 -> s1 [83, 65535] { R16541 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 81] { R16541 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [83, 65535] { R16541 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 80] { R16543 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R16542 += 1, R16543 += 1 };
  s0 -> s2 [81, 81] { R16543 += 1, R38 += 1 };
  s0 -> s3 [81, 81] { R16543 += 1, R38 += 1 };
  s0 -> s1 [82, 65535] { R16543 += 1, R38 += 1 };
  s1 -> s1 [0, 80] { R16543 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R16543 += 1, R38 += 1 };
  s1 -> s3 [81, 81] { R16543 += 1, R38 += 1 };
  s1 -> s1 [82, 65535] { R16543 += 1, R38 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R16543 += 1, R38 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 80] { R16545 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R16544 += 1, R16545 += 1 };
  s0 -> s2 [81, 81] { R16545 += 1, R40 += 1 };
  s0 -> s3 [81, 81] { R16545 += 1, R40 += 1 };
  s0 -> s1 [82, 65535] { R16545 += 1, R40 += 1 };
  s1 -> s1 [0, 80] { R16545 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R16545 += 1, R40 += 1 };
  s1 -> s3 [81, 81] { R16545 += 1, R40 += 1 };
  s1 -> s1 [82, 65535] { R16545 += 1, R40 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R16545 += 1, R40 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 80] { R16547 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R16546 += 1, R16547 += 1 };
  s0 -> s2 [81, 81] { R16547 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [81, 81] { R16547 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [82, 65535] { R16547 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 80] { R16547 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R16547 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [81, 81] { R16547 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [82, 65535] { R16547 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535] { R16547 += 1, R42 += 1, R43 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 80] { R16549 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R16548 += 1, R16549 += 1 };
  s0 -> s2 [81, 81] { R16549 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [81, 81] { R16549 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [82, 65535] { R16549 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 80] { R16549 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R16549 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [81, 81] { R16549 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [82, 65535] { R16549 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R16549 += 1, R46 += 1, R47 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 80] { R16551 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R16550 += 1, R16551 += 1 };
  s0 -> s2 [81, 81] { R16551 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [81, 81] { R16551 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [82, 65535] { R16551 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 80] { R16551 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R16551 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [81, 81] { R16551 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [82, 65535] { R16551 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R16551 += 1, R52 += 1, R53 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 80] { R16553 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R16552 += 1, R16553 += 1 };
  s0 -> s2 [81, 81] { R16553 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [81, 81] { R16553 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [82, 65535] { R16553 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 80] { R16553 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R16553 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [81, 81] { R16553 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [82, 65535] { R16553 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R16553 += 1, R56 += 1, R57 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 80] { R16555 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R16554 += 1, R16555 += 1 };
  s0 -> s2 [81, 81] { R16555 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [81, 81] { R16555 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [82, 65535] { R16555 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 80] { R16555 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R16555 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [81, 81] { R16555 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [82, 65535] { R16555 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535] { R16555 += 1, R62 += 1, R63 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 80] { R16575 += 1 };
  s0 -> s0 [0, 65535] { R16574 += 1, R16575 += 1 };
  s0 -> s2 [81, 81] { R16575 += 1 };
  s0 -> s1 [82, 65535] { R16575 += 1 };
  s1 -> s1 [0, 80] { R16575 += 1 };
  s1 -> s2 [81, 81] { R16575 += 1 };
  s1 -> s1 [82, 65535] { R16575 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R16575 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R16577 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R16576 += 1, R16577 += 1 };
  s1 -> s1 [0, 65535] { R16577 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 80] { R16579 += 1 };
  s0 -> s2 [0, 65535] { R16579 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R16578 += 1, R16579 += 1 };
  s0 -> s3 [81, 81] { R16579 += 1 };
  s0 -> s1 [82, 65535] { R16579 += 1 };
  s1 -> s1 [0, 80] { R16579 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [81, 81] { R16579 += 1 };
  s1 -> s1 [82, 65535] { R16579 += 1 };
  s2 -> s1 [0, 80] { R16579 += 1 };
  s2 -> s2 [0, 65535] { R16579 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [81, 81] { R16579 += 1 };
  s2 -> s1 [82, 65535] { R16579 += 1 };
  s3 -> s3 [0, 65535] { R16579 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 80] { R16581 += 1, R16519 += 1 };
  s0 -> s0 [0, 65535] { R16580 += 1, R16581 += 1 };
  s0 -> s2 [0, 65535] { R16581 += 1, R16518 += 1, R16519 += 1 };
  s0 -> s1 [82, 65535] { R16581 += 1, R16519 += 1 };
  s1 -> s1 [0, 80] { R16581 += 1, R16519 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R16581 += 1 };
  s1 -> s1 [82, 65535] { R16581 += 1, R16519 += 1 };
  s2 -> s1 [0, 80] { R16581 += 1, R16519 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R16581 += 1, R16518 += 1, R16519 += 1 };
  s2 -> s1 [82, 65535] { R16581 += 1, R16519 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s0 [0, 65535] { R16582 += 1, R16583 += 1 };
  s0 -> s1 [0, 65535] { R16583 += 1, R16521 += 1, R17 += 1 };
  s0 -> s2 [0, 65535] { R16583 += 1, R16520 += 1, R16521 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R16583 += 1, R16521 += 1, R17 += 1 };
  s1 -> s4 [0, 65535] { R16583 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R16583 += 1, R16521 += 1, R17 += 1 };
  s2 -> s2 [0, 65535] { R16583 += 1, R16520 += 1, R16521 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R16583 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s0 [0, 65535] { R16584 += 1, R16585 += 1 };
  s0 -> s1 [0, 65535] { R16585 += 1, R16522 += 1, R16523 += 1 };
  s0 -> s2 [0, 65535] { R16585 += 1, R16523 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R16585 += 1, R16522 += 1, R16523 += 1 };
  s1 -> s2 [0, 65535] { R16585 += 1, R16523 += 1 };
  s2 -> s3 [0, 65535] { R16585 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R16585 += 1, R16523 += 1 };
  s3 -> s3 [0, 65535] { R16585 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R16587 += 1, R16525 += 1, R67 += 1 };
  s0 -> s2 [0, 65535] { R16587 += 1, R16524 += 1, R16525 += 1 };
  s0 -> s0 [0, 65535] { R16586 += 1, R16587 += 1 };
  s1 -> s1 [0, 65535] { R16587 += 1, R16525 += 1, R67 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R16587 += 1 };
  s2 -> s1 [0, 65535] { R16587 += 1, R16525 += 1, R67 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R16587 += 1, R16524 += 1, R16525 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R16587 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 81] { R16589 += 1, R16527 += 1 };
  s0 -> s2 [0, 65535] { R16589 += 1, R16527 += 1, R69 += 1 };
  s0 -> s0 [0, 65535] { R16588 += 1, R16589 += 1 };
  s0 -> s3 [0, 65535] { R16589 += 1, R16526 += 1, R16527 += 1 };
  s0 -> s1 [83, 65535] { R16589 += 1, R16527 += 1 };
  s1 -> s1 [0, 81] { R16589 += 1, R16527 += 1 };
  s1 -> s1 [0, 65535] { R16589 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [83, 65535] { R16589 += 1, R16527 += 1 };
  s2 -> s1 [0, 81] { R16589 += 1, R16527 += 1 };
  s2 -> s5 [0, 65535] { R16589 += 1 };
  s2 -> s2 [0, 65535] { R16589 += 1, R16527 += 1, R69 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [83, 65535] { R16589 += 1, R16527 += 1 };
  s3 -> s1 [0, 81] { R16589 += 1, R16527 += 1 };
  s3 -> s2 [0, 65535] { R16589 += 1, R16527 += 1, R69 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R16589 += 1, R16526 += 1, R16527 += 1 };
  s3 -> s1 [83, 65535] { R16589 += 1, R16527 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R16589 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 81] { R16591 += 1, R16529 += 1, R11525 += 1 };
  s0 -> s1 [0, 65535] { R16591 += 1, R16529 += 1 };
  s0 -> s0 [0, 65535] { R16590 += 1, R16591 += 1 };
  s0 -> s2 [0, 65535] { R16591 += 1, R16528 += 1, R16529 += 1 };
  s0 -> s1 [83, 65535] { R16591 += 1, R16529 += 1, R11525 += 1 };
  s1 -> s1 [0, 81] { R16591 += 1, R16529 += 1, R11525 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R16591 += 1, R16529 += 1 };
  s1 -> s4 [0, 65535] { R16591 += 1 };
  s1 -> s1 [83, 65535] { R16591 += 1, R16529 += 1, R11525 += 1 };
  s2 -> s1 [0, 81] { R16591 += 1, R16529 += 1, R11525 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R16591 += 1, R16529 += 1 };
  s2 -> s2 [0, 65535] { R16591 += 1, R16528 += 1, R16529 += 1 };
  s2 -> s1 [83, 65535] { R16591 += 1, R16529 += 1, R11525 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R16591 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R16593 += 1, R16531 += 1 };
  s0 -> s2 [0, 65535] { R16593 += 1, R16531 += 1, R15346 += 1, R15347 += 1 };
  s0 -> s3 [0, 65535] { R16593 += 1, R16530 += 1, R16531 += 1 };
  s0 -> s0 [0, 65535] { R16592 += 1, R16593 += 1 };
  s1 -> s1 [0, 65535] { R16593 += 1, R16531 += 1 };
  s1 -> s5 [0, 65535] { R16593 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R16593 += 1, R16531 += 1 };
  s2 -> s5 [0, 65535] { R16593 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R16593 += 1, R16531 += 1, R15346 += 1, R15347 += 1 };
  s3 -> s1 [0, 65535] { R16593 += 1, R16531 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R16593 += 1, R16531 += 1, R15346 += 1, R15347 += 1 };
  s3 -> s3 [0, 65535] { R16593 += 1, R16530 += 1, R16531 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R16593 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 82] { R16595 += 1, R16533 += 1, R15351 += 1 };
  s0 -> s0 [0, 65535] { R16594 += 1, R16595 += 1 };
  s0 -> s1 [0, 65535] { R16595 += 1, R16533 += 1 };
  s0 -> s2 [0, 65535] { R16595 += 1, R16532 += 1, R16533 += 1 };
  s0 -> s1 [86, 65535] { R16595 += 1, R16533 += 1, R15351 += 1 };
  s1 -> s1 [0, 82] { R16595 += 1, R16533 += 1, R15351 += 1 };
  s1 -> s1 [0, 65535] { R16595 += 1, R16533 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R16595 += 1 };
  s1 -> s1 [86, 65535] { R16595 += 1, R16533 += 1, R15351 += 1 };
  s2 -> s1 [0, 82] { R16595 += 1, R16533 += 1, R15351 += 1 };
  s2 -> s1 [0, 65535] { R16595 += 1, R16533 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R16595 += 1, R16532 += 1, R16533 += 1 };
  s2 -> s1 [86, 65535] { R16595 += 1, R16533 += 1, R15351 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R16595 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s0 [0, 65535] { R16596 += 1, R16597 += 1 };
  s0 -> s1 [0, 65535] { R16597 += 1, R16535 += 1 };
  s0 -> s2 [0, 65535] { R16597 += 1, R16534 += 1, R16535 += 1 };
  s1 -> s4 [0, 65535] { R16597 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R16597 += 1, R16535 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R16597 += 1, R16535 += 1 };
  s2 -> s2 [0, 65535] { R16597 += 1, R16534 += 1, R16535 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R16597 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 65535] { R16599 += 1, R16537 += 1 };
  s0 -> s2 [0, 65535] { R16599 += 1, R16536 += 1, R16537 += 1 };
  s0 -> s0 [0, 65535] { R16598 += 1, R16599 += 1 };
  s1 -> s1 [0, 65535] { R16599 += 1, R16537 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R16599 += 1 };
  s2 -> s1 [0, 65535] { R16599 += 1, R16537 += 1 };
  s2 -> s2 [0, 65535] { R16599 += 1, R16536 += 1, R16537 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R16599 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R16601 += 1, R16556 += 1, R16557 += 1 };
  s0 -> s0 [0, 65535] { R16600 += 1, R16601 += 1 };
  s0 -> s2 [0, 65535] { R16601 += 1, R16557 += 1, R18 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R16601 += 1, R16556 += 1, R16557 += 1 };
  s1 -> s2 [0, 65535] { R16601 += 1, R16557 += 1, R18 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R16601 += 1 };
  s2 -> s2 [0, 65535] { R16601 += 1, R16557 += 1, R18 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R16601 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 80] { R16603 += 1, R16559 += 1 };
  s0 -> s0 [0, 65535] { R16602 += 1, R16603 += 1 };
  s0 -> s2 [0, 65535] { R16603 += 1, R16558 += 1, R16559 += 1 };
  s0 -> s3 [81, 81] { R16603 += 1, R16559 += 1 };
  s0 -> s4 [81, 81] { R16603 += 1, R16559 += 1 };
  s0 -> s5 [82, 82] { R16603 += 1, R16559 += 1 };
  s0 -> s1 [83, 65535] { R16603 += 1, R16559 += 1 };
  s1 -> s1 [0, 80] { R16603 += 1, R16559 += 1 };
  s1 -> s3 [81, 81] { R16603 += 1, R16559 += 1 };
  s1 -> s4 [81, 81] { R16603 += 1, R16559 += 1 };
  s1 -> s5 [82, 82] { R16603 += 1, R16559 += 1 };
  s1 -> s1 [83, 65535] { R16603 += 1, R16559 += 1 };
  s2 -> s1 [0, 80] { R16603 += 1, R16559 += 1 };
  s2 -> s2 [0, 65535] { R16603 += 1, R16558 += 1, R16559 += 1 };
  s2 -> s3 [81, 81] { R16603 += 1, R16559 += 1 };
  s2 -> s4 [81, 81] { R16603 += 1, R16559 += 1 };
  s2 -> s5 [82, 82] { R16603 += 1, R16559 += 1 };
  s2 -> s1 [83, 65535] { R16603 += 1, R16559 += 1 };
  s4 -> s4 [0, 81] { R16603 += 1, R16559 += 1 };
  s4 -> s8 [82, 82] { R16603 += 1, R16559 += 1 };
  s4 -> s4 [83, 65535] { R16603 += 1, R16559 += 1 };
  s5 -> s5 [0, 80] { R16603 += 1, R16559 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R16603 += 1 };
  s5 -> s7 [81, 81] { R16603 += 1, R16559 += 1 };
  s5 -> s8 [81, 81] { R16603 += 1, R16559 += 1 };
  s5 -> s5 [82, 65535] { R16603 += 1, R16559 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R16603 += 1 };
  s8 -> s9 [0, 65535] { R16603 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R16603 += 1, R16559 += 1 };
  s9 -> s9 [0, 65535] { R16603 += 1 };
  s9 -> s6 [0, 65535];
  accepting s8, s5, s9, s6, s7;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 80] { R16605 += 1, R16561 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R16604 += 1, R16605 += 1 };
  s0 -> s2 [0, 65535] { R16605 += 1, R16560 += 1, R16561 += 1 };
  s0 -> s3 [81, 81] { R16605 += 1, R16561 += 1, R66 += 1 };
  s0 -> s4 [81, 81] { R16605 += 1, R16561 += 1, R66 += 1 };
  s0 -> s1 [82, 65535] { R16605 += 1, R16561 += 1, R66 += 1 };
  s1 -> s1 [0, 80] { R16605 += 1, R16561 += 1, R66 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R16605 += 1 };
  s1 -> s3 [81, 81] { R16605 += 1, R16561 += 1, R66 += 1 };
  s1 -> s4 [81, 81] { R16605 += 1, R16561 += 1, R66 += 1 };
  s1 -> s1 [82, 65535] { R16605 += 1, R16561 += 1, R66 += 1 };
  s2 -> s1 [0, 80] { R16605 += 1, R16561 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R16605 += 1, R16560 += 1, R16561 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [81, 81] { R16605 += 1, R16561 += 1, R66 += 1 };
  s2 -> s4 [81, 81] { R16605 += 1, R16561 += 1, R66 += 1 };
  s2 -> s1 [82, 65535] { R16605 += 1, R16561 += 1, R66 += 1 };
  s3 -> s3 [0, 65535] { R16605 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R16605 += 1 };
  s4 -> s4 [0, 65535] { R16605 += 1, R16561 += 1, R66 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R16605 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 80] { R16607 += 1, R16563 += 1, R68 += 1 };
  s0 -> s2 [0, 65535] { R16607 += 1, R16562 += 1, R16563 += 1 };
  s0 -> s0 [0, 65535] { R16606 += 1, R16607 += 1 };
  s0 -> s3 [81, 81] { R16607 += 1, R16563 += 1, R68 += 1 };
  s0 -> s4 [81, 81] { R16607 += 1, R16563 += 1, R68 += 1 };
  s0 -> s1 [82, 65535] { R16607 += 1, R16563 += 1, R68 += 1 };
  s1 -> s1 [0, 80] { R16607 += 1, R16563 += 1, R68 += 1 };
  s1 -> s1 [0, 65535] { R16607 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [81, 81] { R16607 += 1, R16563 += 1, R68 += 1 };
  s1 -> s4 [81, 81] { R16607 += 1, R16563 += 1, R68 += 1 };
  s1 -> s1 [82, 65535] { R16607 += 1, R16563 += 1, R68 += 1 };
  s2 -> s1 [0, 80] { R16607 += 1, R16563 += 1, R68 += 1 };
  s2 -> s2 [0, 65535] { R16607 += 1, R16562 += 1, R16563 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [81, 81] { R16607 += 1, R16563 += 1, R68 += 1 };
  s2 -> s4 [81, 81] { R16607 += 1, R16563 += 1, R68 += 1 };
  s2 -> s1 [82, 65535] { R16607 += 1, R16563 += 1, R68 += 1 };
  s3 -> s3 [0, 65535] { R16607 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R16607 += 1 };
  s4 -> s4 [0, 65535] { R16607 += 1, R16563 += 1, R68 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R16607 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 80] { R16609 += 1, R16565 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s2 [0, 80] { R16609 += 1, R16565 += 1, R11523 += 1 };
  s0 -> s3 [0, 65535] { R16609 += 1, R16564 += 1, R16565 += 1 };
  s0 -> s0 [0, 65535] { R16608 += 1, R16609 += 1 };
  s0 -> s4 [81, 81] { R16609 += 1, R16565 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s5 [81, 81] { R16609 += 1, R16565 += 1, R11523 += 1 };
  s0 -> s6 [81, 81] { R16609 += 1, R16565 += 1, R11523 += 1 };
  s0 -> s7 [81, 81] { R16609 += 1, R16565 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s1 [82, 65535] { R16609 += 1, R16565 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s2 [83, 65535] { R16609 += 1, R16565 += 1, R11523 += 1 };
  s1 -> s1 [0, 80] { R16609 += 1, R16565 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s2 [0, 80] { R16609 += 1, R16565 += 1, R11523 += 1 };
  s1 -> s4 [81, 81] { R16609 += 1, R16565 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s5 [81, 81] { R16609 += 1, R16565 += 1, R11523 += 1 };
  s1 -> s6 [81, 81] { R16609 += 1, R16565 += 1, R11523 += 1 };
  s1 -> s7 [81, 81] { R16609 += 1, R16565 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s1 [82, 65535] { R16609 += 1, R16565 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s2 [83, 65535] { R16609 += 1, R16565 += 1, R11523 += 1 };
  s2 -> s2 [0, 80] { R16609 += 1, R16565 += 1, R11523 += 1 };
  s2 -> s2 [0, 65535] { R16609 += 1 };
  s2 -> s9 [0, 65535];
  s2 -> s5 [81, 81] { R16609 += 1, R16565 += 1 };
  s2 -> s6 [81, 81] { R16609 += 1, R16565 += 1 };
  s2 -> s2 [82, 65535] { R16609 += 1, R16565 += 1 };
  s2 -> s2 [83, 65535] { R16609 += 1, R16565 += 1, R11523 += 1 };
  s3 -> s1 [0, 80] { R16609 += 1, R16565 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s2 [0, 80] { R16609 += 1, R16565 += 1, R11523 += 1 };
  s3 -> s3 [0, 65535] { R16609 += 1, R16564 += 1, R16565 += 1 };
  s3 -> s4 [81, 81] { R16609 += 1, R16565 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s5 [81, 81] { R16609 += 1, R16565 += 1, R11523 += 1 };
  s3 -> s6 [81, 81] { R16609 += 1, R16565 += 1, R11523 += 1 };
  s3 -> s7 [81, 81] { R16609 += 1, R16565 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s1 [82, 65535] { R16609 += 1, R16565 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s2 [83, 65535] { R16609 += 1, R16565 += 1, R11523 += 1 };
  s5 -> s5 [0, 65535] { R16609 += 1 };
  s5 -> s9 [0, 65535];
  s6 -> s6 [0, 81] { R16609 += 1, R16565 += 1, R11523 += 1 };
  s6 -> s8 [0, 65535] { R16609 += 1 };
  s6 -> s6 [0, 65535] { R16609 += 1, R16565 += 1 };
  s6 -> s9 [0, 65535];
  s6 -> s6 [83, 65535] { R16609 += 1, R16565 += 1, R11523 += 1 };
  s7 -> s6 [0, 81] { R16609 += 1, R16565 += 1, R11523 += 1 };
  s7 -> s7 [0, 65535] { R16609 += 1, R16565 += 1, R11522 += 1, R11523 += 1 };
  s7 -> s6 [83, 65535] { R16609 += 1, R16565 += 1, R11523 += 1 };
  s8 -> s8 [0, 65535] { R16609 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s8, s5, s2, s9, s6;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 80] { R16611 += 1, R16567 += 1, R15343 += 1, R15344 += 1 };
  s0 -> s2 [0, 80] { R16611 += 1, R16567 += 1, R15342 += 1, R15343 += 1 };
  s0 -> s0 [0, 65535] { R16610 += 1, R16611 += 1 };
  s0 -> s3 [0, 65535] { R16611 += 1, R16566 += 1, R16567 += 1 };
  s0 -> s4 [81, 81] { R16611 += 1, R16567 += 1, R15342 += 1, R15343 += 1 };
  s0 -> s5 [81, 81] { R16611 += 1, R16567 += 1, R15343 += 1, R15344 += 1 };
  s0 -> s6 [81, 81] { R16611 += 1, R16567 += 1, R15343 += 1, R15344 += 1 };
  s0 -> s7 [81, 81] { R16611 += 1, R16567 += 1, R15342 += 1, R15343 += 1 };
  s0 -> s1 [82, 65535] { R16611 += 1, R16567 += 1, R15343 += 1, R15344 += 1 };
  s0 -> s2 [82, 65535] { R16611 += 1, R16567 += 1, R15342 += 1, R15343 += 1 };
  s1 -> s1 [0, 80] { R16611 += 1, R16567 += 1, R15343 += 1, R15344 += 1 };
  s1 -> s1 [0, 65535] { R16611 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s5 [81, 81] { R16611 += 1, R16567 += 1, R15343 += 1, R15344 += 1 };
  s1 -> s6 [81, 81] { R16611 += 1, R16567 += 1, R15343 += 1, R15344 += 1 };
  s1 -> s1 [82, 65535] { R16611 += 1, R16567 += 1, R15343 += 1, R15344 += 1 };
  s2 -> s1 [0, 80] { R16611 += 1, R16567 += 1, R15343 += 1, R15344 += 1 };
  s2 -> s2 [0, 80] { R16611 += 1, R16567 += 1, R15342 += 1, R15343 += 1 };
  s2 -> s4 [81, 81] { R16611 += 1, R16567 += 1, R15342 += 1, R15343 += 1 };
  s2 -> s5 [81, 81] { R16611 += 1, R16567 += 1, R15343 += 1, R15344 += 1 };
  s2 -> s6 [81, 81] { R16611 += 1, R16567 += 1, R15343 += 1, R15344 += 1 };
  s2 -> s7 [81, 81] { R16611 += 1, R16567 += 1, R15342 += 1, R15343 += 1 };
  s2 -> s1 [82, 65535] { R16611 += 1, R16567 += 1, R15343 += 1, R15344 += 1 };
  s2 -> s2 [82, 65535] { R16611 += 1, R16567 += 1, R15342 += 1, R15343 += 1 };
  s3 -> s1 [0, 80] { R16611 += 1, R16567 += 1, R15343 += 1, R15344 += 1 };
  s3 -> s2 [0, 80] { R16611 += 1, R16567 += 1, R15342 += 1, R15343 += 1 };
  s3 -> s3 [0, 65535] { R16611 += 1, R16566 += 1, R16567 += 1 };
  s3 -> s4 [81, 81] { R16611 += 1, R16567 += 1, R15342 += 1, R15343 += 1 };
  s3 -> s5 [81, 81] { R16611 += 1, R16567 += 1, R15343 += 1, R15344 += 1 };
  s3 -> s6 [81, 81] { R16611 += 1, R16567 += 1, R15343 += 1, R15344 += 1 };
  s3 -> s7 [81, 81] { R16611 += 1, R16567 += 1, R15342 += 1, R15343 += 1 };
  s3 -> s1 [82, 65535] { R16611 += 1, R16567 += 1, R15343 += 1, R15344 += 1 };
  s3 -> s2 [82, 65535] { R16611 += 1, R16567 += 1, R15342 += 1, R15343 += 1 };
  s5 -> s5 [0, 65535] { R16611 += 1 };
  s5 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R16611 += 1, R16567 += 1, R15343 += 1, R15344 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s9 [0, 65535] { R16611 += 1 };
  s7 -> s6 [0, 65535] { R16611 += 1, R16567 += 1, R15343 += 1, R15344 += 1 };
  s7 -> s7 [0, 65535] { R16611 += 1, R16567 += 1, R15342 += 1, R15343 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R16611 += 1 };
  accepting s8, s5, s9, s6, s1;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 80] { R16613 += 1, R16569 += 1, R15349 += 1 };
  s0 -> s2 [0, 80] { R16613 += 1, R16569 += 1, R15348 += 1, R15349 += 1 };
  s0 -> s3 [0, 65535] { R16613 += 1, R16568 += 1, R16569 += 1 };
  s0 -> s0 [0, 65535] { R16612 += 1, R16613 += 1 };
  s0 -> s4 [81, 81] { R16613 += 1, R16569 += 1, R15349 += 1 };
  s0 -> s5 [81, 81] { R16613 += 1, R16569 += 1, R15348 += 1, R15349 += 1 };
  s0 -> s6 [81, 81] { R16613 += 1, R16569 += 1, R15348 += 1, R15349 += 1 };
  s0 -> s7 [81, 81] { R16613 += 1, R16569 += 1, R15349 += 1 };
  s0 -> s1 [82, 82] { R16613 += 1, R16569 += 1, R15349 += 1 };
  s0 -> s2 [82, 65535] { R16613 += 1, R16569 += 1, R15348 += 1, R15349 += 1 };
  s0 -> s8 [86, 86] { R16613 += 1, R16569 += 1, R15349 += 1 };
  s0 -> s1 [87, 65535] { R16613 += 1, R16569 += 1, R15349 += 1 };
  s1 -> s1 [0, 80] { R16613 += 1, R16569 += 1, R15349 += 1 };
  s1 -> s4 [81, 81] { R16613 += 1, R16569 += 1, R15349 += 1 };
  s1 -> s7 [81, 81] { R16613 += 1, R16569 += 1, R15349 += 1 };
  s1 -> s1 [82, 82] { R16613 += 1, R16569 += 1, R15349 += 1 };
  s1 -> s8 [86, 86] { R16613 += 1, R16569 += 1, R15349 += 1 };
  s1 -> s1 [87, 65535] { R16613 += 1, R16569 += 1, R15349 += 1 };
  s2 -> s1 [0, 80] { R16613 += 1, R16569 += 1, R15349 += 1 };
  s2 -> s2 [0, 80] { R16613 += 1, R16569 += 1, R15348 += 1, R15349 += 1 };
  s2 -> s4 [81, 81] { R16613 += 1, R16569 += 1, R15349 += 1 };
  s2 -> s5 [81, 81] { R16613 += 1, R16569 += 1, R15348 += 1, R15349 += 1 };
  s2 -> s6 [81, 81] { R16613 += 1, R16569 += 1, R15348 += 1, R15349 += 1 };
  s2 -> s7 [81, 81] { R16613 += 1, R16569 += 1, R15349 += 1 };
  s2 -> s1 [82, 82] { R16613 += 1, R16569 += 1, R15349 += 1 };
  s2 -> s2 [82, 65535] { R16613 += 1, R16569 += 1, R15348 += 1, R15349 += 1 };
  s2 -> s8 [86, 86] { R16613 += 1, R16569 += 1, R15349 += 1 };
  s2 -> s1 [87, 65535] { R16613 += 1, R16569 += 1, R15349 += 1 };
  s3 -> s1 [0, 80] { R16613 += 1, R16569 += 1, R15349 += 1 };
  s3 -> s2 [0, 80] { R16613 += 1, R16569 += 1, R15348 += 1, R15349 += 1 };
  s3 -> s3 [0, 65535] { R16613 += 1, R16568 += 1, R16569 += 1 };
  s3 -> s4 [81, 81] { R16613 += 1, R16569 += 1, R15349 += 1 };
  s3 -> s5 [81, 81] { R16613 += 1, R16569 += 1, R15348 += 1, R15349 += 1 };
  s3 -> s6 [81, 81] { R16613 += 1, R16569 += 1, R15348 += 1, R15349 += 1 };
  s3 -> s7 [81, 81] { R16613 += 1, R16569 += 1, R15349 += 1 };
  s3 -> s1 [82, 82] { R16613 += 1, R16569 += 1, R15349 += 1 };
  s3 -> s2 [82, 65535] { R16613 += 1, R16569 += 1, R15348 += 1, R15349 += 1 };
  s3 -> s8 [86, 86] { R16613 += 1, R16569 += 1, R15349 += 1 };
  s3 -> s1 [87, 65535] { R16613 += 1, R16569 += 1, R15349 += 1 };
  s6 -> s7 [0, 82] { R16613 += 1, R16569 += 1, R15349 += 1 };
  s6 -> s6 [0, 65535] { R16613 += 1, R16569 += 1, R15348 += 1, R15349 += 1 };
  s6 -> s11 [86, 86] { R16613 += 1, R16569 += 1, R15349 += 1 };
  s6 -> s7 [87, 65535] { R16613 += 1, R16569 += 1, R15349 += 1 };
  s7 -> s7 [0, 82] { R16613 += 1, R16569 += 1, R15349 += 1 };
  s7 -> s11 [86, 86] { R16613 += 1, R16569 += 1, R15349 += 1 };
  s7 -> s7 [87, 65535] { R16613 += 1, R16569 += 1, R15349 += 1 };
  s8 -> s8 [0, 80] { R16613 += 1, R16569 += 1, R15349 += 1 };
  s8 -> s8 [0, 65535] { R16613 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [81, 81] { R16613 += 1, R16569 += 1 };
  s8 -> s11 [81, 81] { R16613 += 1, R16569 += 1 };
  s8 -> s8 [82, 82] { R16613 += 1, R16569 += 1, R15349 += 1 };
  s8 -> s8 [82, 65535] { R16613 += 1, R16569 += 1 };
  s8 -> s8 [86, 65535] { R16613 += 1, R16569 += 1, R15349 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R16613 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s11 [0, 82] { R16613 += 1, R16569 += 1, R15349 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R16613 += 1, R16569 += 1 };
  s11 -> s12 [0, 65535] { R16613 += 1 };
  s11 -> s11 [86, 65535] { R16613 += 1, R16569 += 1, R15349 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R16613 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 80] { R16615 += 1, R16571 += 1, R16197 += 1, R16198 += 1 };
  s0 -> s2 [0, 80] { R16615 += 1, R16571 += 1, R16196 += 1, R16197 += 1 };
  s0 -> s0 [0, 65535] { R16614 += 1, R16615 += 1 };
  s0 -> s3 [0, 65535] { R16615 += 1, R16570 += 1, R16571 += 1 };
  s0 -> s4 [81, 81] { R16615 += 1, R16571 += 1, R16197 += 1, R16198 += 1 };
  s0 -> s5 [81, 81] { R16615 += 1, R16571 += 1, R16197 += 1, R16198 += 1 };
  s0 -> s6 [81, 81] { R16615 += 1, R16571 += 1, R16196 += 1, R16197 += 1 };
  s0 -> s7 [81, 81] { R16615 += 1, R16571 += 1, R16196 += 1, R16197 += 1 };
  s0 -> s1 [82, 65535] { R16615 += 1, R16571 += 1, R16197 += 1, R16198 += 1 };
  s0 -> s2 [82, 65535] { R16615 += 1, R16571 += 1, R16196 += 1, R16197 += 1 };
  s1 -> s11 [0, 80] { R16615 += 1, R16571 += 1 };
  s1 -> s1 [0, 80] { R16615 += 1, R16571 += 1, R16197 += 1, R16198 += 1 };
  s1 -> s12 [81, 81] { R16615 += 1, R16571 += 1 };
  s1 -> s4 [81, 81] { R16615 += 1, R16571 += 1, R16197 += 1, R16198 += 1 };
  s1 -> s5 [81, 81] { R16615 += 1, R16571 += 1, R16197 += 1, R16198 += 1 };
  s1 -> s8 [81, 81] { R16615 += 1, R16571 += 1 };
  s1 -> s11 [82, 65535] { R16615 += 1, R16571 += 1 };
  s1 -> s1 [82, 65535] { R16615 += 1, R16571 += 1, R16197 += 1, R16198 += 1 };
  s2 -> s1 [0, 80] { R16615 += 1, R16571 += 1, R16197 += 1, R16198 += 1 };
  s2 -> s2 [0, 80] { R16615 += 1, R16571 += 1, R16196 += 1, R16197 += 1 };
  s2 -> s4 [81, 81] { R16615 += 1, R16571 += 1, R16197 += 1, R16198 += 1 };
  s2 -> s5 [81, 81] { R16615 += 1, R16571 += 1, R16197 += 1, R16198 += 1 };
  s2 -> s6 [81, 81] { R16615 += 1, R16571 += 1, R16196 += 1, R16197 += 1 };
  s2 -> s7 [81, 81] { R16615 += 1, R16571 += 1, R16196 += 1, R16197 += 1 };
  s2 -> s1 [82, 65535] { R16615 += 1, R16571 += 1, R16197 += 1, R16198 += 1 };
  s2 -> s2 [82, 65535] { R16615 += 1, R16571 += 1, R16196 += 1, R16197 += 1 };
  s3 -> s1 [0, 80] { R16615 += 1, R16571 += 1, R16197 += 1, R16198 += 1 };
  s3 -> s2 [0, 80] { R16615 += 1, R16571 += 1, R16196 += 1, R16197 += 1 };
  s3 -> s3 [0, 65535] { R16615 += 1, R16570 += 1, R16571 += 1 };
  s3 -> s4 [81, 81] { R16615 += 1, R16571 += 1, R16197 += 1, R16198 += 1 };
  s3 -> s5 [81, 81] { R16615 += 1, R16571 += 1, R16197 += 1, R16198 += 1 };
  s3 -> s6 [81, 81] { R16615 += 1, R16571 += 1, R16196 += 1, R16197 += 1 };
  s3 -> s7 [81, 81] { R16615 += 1, R16571 += 1, R16196 += 1, R16197 += 1 };
  s3 -> s1 [82, 65535] { R16615 += 1, R16571 += 1, R16197 += 1, R16198 += 1 };
  s3 -> s2 [82, 65535] { R16615 += 1, R16571 += 1, R16196 += 1, R16197 += 1 };
  s4 -> s4 [0, 65535] { R16615 += 1, R16571 += 1, R16197 += 1, R16198 += 1 };
  s4 -> s8 [0, 65535] { R16615 += 1, R16571 += 1 };
  s6 -> s4 [0, 65535] { R16615 += 1, R16571 += 1, R16197 += 1, R16198 += 1 };
  s6 -> s6 [0, 65535] { R16615 += 1, R16571 += 1, R16196 += 1, R16197 += 1 };
  s8 -> s9 [0, 65535] { R16615 += 1 };
  s8 -> s8 [0, 65535] { R16615 += 1, R16571 += 1 };
  s8 -> s10 [0, 65535];
  s9 -> s9 [0, 65535] { R16615 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s11 [0, 80] { R16615 += 1, R16571 += 1 };
  s11 -> s11 [0, 65535] { R16615 += 1 };
  s11 -> s10 [0, 65535];
  s11 -> s12 [81, 81] { R16615 += 1, R16571 += 1 };
  s11 -> s8 [81, 81] { R16615 += 1, R16571 += 1 };
  s11 -> s11 [82, 65535] { R16615 += 1, R16571 += 1 };
  s12 -> s12 [0, 65535] { R16615 += 1 };
  s12 -> s10 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 80] { R16617 += 1, R16573 += 1, R16515 += 1 };
  s0 -> s2 [0, 80] { R16617 += 1, R16573 += 1, R16514 += 1, R16515 += 1 };
  s0 -> s3 [0, 65535] { R16617 += 1, R16572 += 1, R16573 += 1 };
  s0 -> s0 [0, 65535] { R16616 += 1, R16617 += 1 };
  s0 -> s4 [81, 81] { R16617 += 1, R16573 += 1, R16515 += 1 };
  s0 -> s5 [81, 81] { R16617 += 1, R16573 += 1, R16515 += 1 };
  s0 -> s6 [81, 81] { R16617 += 1, R16573 += 1, R16514 += 1, R16515 += 1 };
  s0 -> s7 [81, 81] { R16617 += 1, R16573 += 1, R16514 += 1, R16515 += 1 };
  s0 -> s8 [82, 82] { R16617 += 1, R16573 += 1, R16515 += 1 };
  s0 -> s2 [82, 65535] { R16617 += 1, R16573 += 1, R16514 += 1, R16515 += 1 };
  s0 -> s1 [87, 65535] { R16617 += 1, R16573 += 1, R16515 += 1 };
  s1 -> s1 [0, 80] { R16617 += 1, R16573 += 1, R16515 += 1 };
  s1 -> s4 [81, 81] { R16617 += 1, R16573 += 1 };
  s1 -> s5 [81, 81] { R16617 += 1, R16573 += 1 };
  s1 -> s8 [82, 82] { R16617 += 1, R16573 += 1, R16515 += 1 };
  s1 -> s1 [82, 65535] { R16617 += 1, R16573 += 1 };
  s1 -> s1 [87, 65535] { R16617 += 1, R16573 += 1, R16515 += 1 };
  s2 -> s1 [0, 80] { R16617 += 1, R16573 += 1, R16515 += 1 };
  s2 -> s2 [0, 80] { R16617 += 1, R16573 += 1, R16514 += 1, R16515 += 1 };
  s2 -> s4 [81, 81] { R16617 += 1, R16573 += 1, R16515 += 1 };
  s2 -> s5 [81, 81] { R16617 += 1, R16573 += 1, R16515 += 1 };
  s2 -> s6 [81, 81] { R16617 += 1, R16573 += 1, R16514 += 1, R16515 += 1 };
  s2 -> s7 [81, 81] { R16617 += 1, R16573 += 1, R16514 += 1, R16515 += 1 };
  s2 -> s8 [82, 82] { R16617 += 1, R16573 += 1, R16515 += 1 };
  s2 -> s2 [82, 65535] { R16617 += 1, R16573 += 1, R16514 += 1, R16515 += 1 };
  s2 -> s1 [87, 65535] { R16617 += 1, R16573 += 1, R16515 += 1 };
  s3 -> s1 [0, 80] { R16617 += 1, R16573 += 1, R16515 += 1 };
  s3 -> s2 [0, 80] { R16617 += 1, R16573 += 1, R16514 += 1, R16515 += 1 };
  s3 -> s3 [0, 65535] { R16617 += 1, R16572 += 1, R16573 += 1 };
  s3 -> s4 [81, 81] { R16617 += 1, R16573 += 1, R16515 += 1 };
  s3 -> s5 [81, 81] { R16617 += 1, R16573 += 1, R16515 += 1 };
  s3 -> s6 [81, 81] { R16617 += 1, R16573 += 1, R16514 += 1, R16515 += 1 };
  s3 -> s7 [81, 81] { R16617 += 1, R16573 += 1, R16514 += 1, R16515 += 1 };
  s3 -> s8 [82, 82] { R16617 += 1, R16573 += 1, R16515 += 1 };
  s3 -> s2 [82, 65535] { R16617 += 1, R16573 += 1, R16514 += 1, R16515 += 1 };
  s3 -> s1 [87, 65535] { R16617 += 1, R16573 += 1, R16515 += 1 };
  s5 -> s5 [0, 81] { R16617 += 1, R16573 += 1, R16515 += 1 };
  s5 -> s5 [0, 65535] { R16617 += 1, R16573 += 1 };
  s5 -> s10 [82, 82] { R16617 += 1, R16573 += 1, R16515 += 1 };
  s5 -> s5 [87, 65535] { R16617 += 1, R16573 += 1, R16515 += 1 };
  s6 -> s5 [0, 81] { R16617 += 1, R16573 += 1, R16515 += 1 };
  s6 -> s6 [0, 65535] { R16617 += 1, R16573 += 1, R16514 += 1, R16515 += 1 };
  s6 -> s10 [82, 82] { R16617 += 1, R16573 += 1, R16515 += 1 };
  s6 -> s5 [87, 65535] { R16617 += 1, R16573 += 1, R16515 += 1 };
  s8 -> s8 [0, 80] { R16617 += 1, R16573 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R16617 += 1 };
  s8 -> s10 [81, 81] { R16617 += 1, R16573 += 1 };
  s8 -> s11 [81, 81] { R16617 += 1, R16573 += 1 };
  s8 -> s8 [82, 65535] { R16617 += 1, R16573 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R16617 += 1, R16573 += 1 };
  s10 -> s12 [0, 65535] { R16617 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R16617 += 1 };
  s11 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R16617 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining c1
automaton c1_0 {
  init s0;
  s0 -> s1 [114, 114];
  accepting s1;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [113, 113];
  accepting s1;
};
};
constraint R2 = R16617 && R20 - R16617 = -1 && R21 = R16617 && R22 - R16617 = -1 && R23 = R16617 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R15351 + -1*R15349 - R53 = 0 && R52 + R15350 + R15348 = 0 && R16558 = 0 && R16559 = 0 && R16564 = 0 && R16565 = 0 && R16566 = 0 && R16567 = 0 && R16568 = 0 && R16569 = 0 && R16570 = 0 && R16571 = 0 && R16572 = 0 && R16573 = 0 && R16574 = 0 && R16575 = R16617 && R16576 = 0 && R16577 = R16617 && R16578 = 0 && R16579 = R16617 && R16580 = 0 && R16581 = R16617 && R16582 = 0 && R16583 = R16617 && R16584 = 0 && R16585 = R16617 && R16586 = 0 && R16587 = R16617 && R16588 = 0 && R16589 = R16617 && R16590 = 0 && R16591 = R16617 && R16592 = 0 && R16593 = R16617 && R16594 = 0 && R16595 = R16617 && R16596 = 0 && R16597 = R16617 && R16598 = 0 && R16599 = R16617 && R16600 = 0 && R16601 = R16617 && R16602 = 0 && R16603 = R16617 && R16604 = 0 && R16605 = R16617 && R16606 = 0 && R16607 = R16617 && R16608 = 0 && R16609 = R16617 && R16610 = 0 && R16611 = R16617 && R16612 = 0 && R16613 = R16617 && R16614 = 0 && R16615 = R16617 && R16616 = 0 && -1 < R1 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R15351 + -1*R15349 - R53 < 1 && 0 < R16617 && (R1 != 0 || R17 = 0 || (R16518 = 0 && R16519 = 0)) && (R1 != 0 || R17 = 0 || (R16520 = 0 && R16521 = 0)) && (R1 != 0 || R17 = 0 || (R16522 = 0 && R16523 = 0)) && (R1 != 0 || R17 = 0 || (R16524 = 0 && R16525 = 0)) && (R1 != 0 || R17 = 0 || (R16526 = 0 && R16527 = 0)) && (R1 != 0 || R17 = 0 || (R16528 = 0 && R16529 = 0)) && (R1 != 0 || R17 = 0 || (R16530 = 0 && R16531 = 0)) && (R1 != 0 || R17 = 0 || (R16532 = 0 && R16533 = 0)) && (R1 != 0 || R17 = 0 || (R16534 = 0 && R16535 = 0)) && (R1 != 0 || R17 = 0 || (R16536 = 0 && R16537 = 0)) && (R48 + R15347 + R15344 != 0 || ((R42 + R11524 + R11522 != 0 || R43 + R11525 + R11523 + -1*R15351 + -1*R15349 - R53 = 0 || R53 + R15351 + R15349 < 1) && (R42 + R11524 + R11522 = 0 || R53 + R15351 + R15349 < 1))) && (R48 + R15347 + R15344 != 0 || ((R46 + R15345 + R15342 != 0 || R47 + R15346 + R15343 + -1*R15351 + -1*R15349 - R53 = 0 || R53 + R15351 + R15349 < 1) && (R46 + R15345 + R15342 = 0 || R53 + R15351 + R15349 < 1))) && (R16518 != 0 || R1 = R16519 || R1 < 1) && (R16520 != 0 || R1 = R16521 || R1 < 1) && (R16522 != 0 || R1 = R16523 || R1 < 1) && (R16524 != 0 || R1 = R16525 || R1 < 1) && (R16526 != 0 || R1 = R16527 || R1 < 1) && (R16528 != 0 || R1 = R16529 || R1 < 1) && (R16530 != 0 || R1 = R16531 || R1 < 1) && (R16532 != 0 || R1 = R16533 || R1 < 1) && (R16534 != 0 || R1 = R16535 || R1 < 1) && (R16536 != 0 || R1 = R16537 || R1 < 1) && (R18 = 0 || (R16556 = 0 && R16557 = 0)) && (R18 = 0 || (R16560 = 0 && R16561 = 0)) && (R18 = 0 || (R16562 = 0 && R16563 = 0)) && (R19 = 0 || (R16538 = 0 && R16539 = 0)) && (R19 = 0 || (R16540 = 0 && R16541 = 0)) && (R19 = 0 || (R16542 = 0 && R16543 = 0)) && (R19 = 0 || (R16544 = 0 && R16545 = 0)) && (R19 = 0 || (R16546 = 0 && R16547 = 0)) && (R19 = 0 || (R16548 = 0 && R16549 = 0)) && (R19 = 0 || (R16550 = 0 && R16551 = 0)) && (R19 = 0 || (R16552 = 0 && R16553 = 0)) && (R19 = 0 || (R16554 = 0 && R16555 = 0)) && (R48 + R15347 + R15344 = 0 || (R42 + R11524 + R11522 = 0 && R43 + R11525 + R11523 + -1*R15351 + -1*R15349 - R53 = 0)) && (R48 + R15347 + R15344 = 0 || (R46 + R15345 + R15342 = 0 && R47 + R15346 + R15343 + -1*R15351 + -1*R15349 - R53 = 0)) && (R58 + R16201 + R16198 = 0 || (R56 + R16199 + R16196 = 0 && R57 + R16200 + R16197 = 0)) && (R58 + R16201 + R16198 = 0 || (R62 + R16516 + R16514 = 0 && R63 + R16517 + R16515 = 0)) && (R16518 = 0 || R1 < 1) && (R16520 = 0 || R1 < 1) && (R16522 = 0 || R1 < 1) && (R16524 = 0 || R1 < 1) && (R16526 = 0 || R1 < 1) && (R16528 = 0 || R1 < 1) && (R16530 = 0 || R1 < 1) && (R16532 = 0 || R1 < 1) && (R16534 = 0 || R1 < 1) && (R16536 = 0 || R1 < 1);
// End of Parikh automata intersection problem
