// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R12, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R3890, R3891, R3892, R3893, R3894, R3895, R4, R40, R42, R43, R46, R47, R48, R5166, R5167, R5168, R5169, R5170, R5171, R5172, R5173, R5174, R5175, R52, R5280, R5281, R5282, R5283, R5284, R5285, R5286, R5287, R5288, R5289, R5290, R5291, R5292, R5293, R5294, R5295, R5296, R5297, R5298, R5299, R53, R5300, R5301, R5302, R5303, R5304, R5305, R5306, R5307, R5308, R5309, R5310, R5311, R5312, R5313, R5314, R5315, R5316, R5317, R5318, R5319, R5320, R5321, R5322, R5323, R5324, R5325, R5326, R5327, R5328, R5329, R5330, R5331, R5332, R5333, R5334, R5335, R5336, R5337, R5338, R5339, R5340, R5341, R5342, R5343, R5344, R5345, R5346, R5347, R5348, R5349, R5350, R5351, R5352, R5353, R5354, R5355, R5356, R5357, R5358, R5359, R5360, R5361, R5362, R5363, R5364, R5365, R5366, R5367, R5368, R5369, R5370, R5371, R5372, R5373, R5374, R5375, R5376, R5377, R5378, R5379, R5380, R5381, R5382, R5383, R56, R57, R58, R62, R63, R66, R67, R68, R69, R70, R71, R72, R73, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [81, 81];
  s0 -> s0 [82, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [81, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 80];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [81, 81];
  s0 -> s1 [82, 65535];
  s1 -> s1 [0, 80];
  s1 -> s2 [81, 81];
  s1 -> s1 [82, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s1 [0, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s1 [0, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R5305 += 1, R19 += 1 };
  s0 -> s0 [0, 65535] { R5304 += 1, R5305 += 1 };
  s1 -> s1 [0, 65535] { R5305 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 80] { R5307 += 1 };
  s0 -> s0 [0, 65535] { R5306 += 1, R5307 += 1 };
  s0 -> s2 [81, 81] { R5307 += 1 };
  s0 -> s3 [81, 81] { R5307 += 1 };
  s0 -> s1 [83, 65535] { R5307 += 1 };
  s1 -> s1 [0, 80] { R5307 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R5307 += 1 };
  s1 -> s3 [81, 81] { R5307 += 1 };
  s1 -> s1 [83, 65535] { R5307 += 1 };
  s2 -> s2 [0, 81] { R5307 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [83, 65535] { R5307 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 80] { R5309 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R5308 += 1, R5309 += 1 };
  s0 -> s2 [81, 81] { R5309 += 1, R38 += 1 };
  s0 -> s3 [81, 81] { R5309 += 1, R38 += 1 };
  s0 -> s1 [82, 65535] { R5309 += 1, R38 += 1 };
  s1 -> s1 [0, 80] { R5309 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R5309 += 1, R38 += 1 };
  s1 -> s3 [81, 81] { R5309 += 1, R38 += 1 };
  s1 -> s1 [82, 65535] { R5309 += 1, R38 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R5309 += 1, R38 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 80] { R5311 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R5310 += 1, R5311 += 1 };
  s0 -> s2 [81, 81] { R5311 += 1, R40 += 1 };
  s0 -> s3 [81, 81] { R5311 += 1, R40 += 1 };
  s0 -> s1 [82, 65535] { R5311 += 1, R40 += 1 };
  s1 -> s1 [0, 80] { R5311 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R5311 += 1, R40 += 1 };
  s1 -> s3 [81, 81] { R5311 += 1, R40 += 1 };
  s1 -> s1 [82, 65535] { R5311 += 1, R40 += 1 };
  s2 -> s2 [0, 65535] { R5311 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 80] { R5313 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R5312 += 1, R5313 += 1 };
  s0 -> s2 [81, 81] { R5313 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [81, 81] { R5313 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [82, 65535] { R5313 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 80] { R5313 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R5313 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [81, 81] { R5313 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [82, 65535] { R5313 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535] { R5313 += 1, R42 += 1, R43 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 80] { R5315 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R5314 += 1, R5315 += 1 };
  s0 -> s2 [81, 81] { R5315 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [81, 81] { R5315 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [82, 65535] { R5315 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 80] { R5315 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R5315 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [81, 81] { R5315 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [82, 65535] { R5315 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535] { R5315 += 1, R46 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 80] { R5317 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R5316 += 1, R5317 += 1 };
  s0 -> s2 [81, 81] { R5317 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [81, 81] { R5317 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [82, 65535] { R5317 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 80] { R5317 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R5317 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [81, 81] { R5317 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [82, 65535] { R5317 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R5317 += 1, R52 += 1, R53 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 80] { R5319 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R5318 += 1, R5319 += 1 };
  s0 -> s2 [81, 81] { R5319 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [81, 81] { R5319 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [82, 65535] { R5319 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 80] { R5319 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R5319 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [81, 81] { R5319 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [82, 65535] { R5319 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R5319 += 1, R56 += 1, R57 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 80] { R5321 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R5320 += 1, R5321 += 1 };
  s0 -> s2 [81, 81] { R5321 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [81, 81] { R5321 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [82, 65535] { R5321 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 80] { R5321 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R5321 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [81, 81] { R5321 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [82, 65535] { R5321 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R5321 += 1, R62 += 1, R63 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 80] { R5341 += 1 };
  s0 -> s0 [0, 65535] { R5340 += 1, R5341 += 1 };
  s0 -> s2 [81, 81] { R5341 += 1 };
  s0 -> s1 [82, 65535] { R5341 += 1 };
  s1 -> s1 [0, 80] { R5341 += 1 };
  s1 -> s2 [81, 81] { R5341 += 1 };
  s1 -> s1 [82, 65535] { R5341 += 1 };
  s2 -> s2 [0, 65535] { R5341 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R5342 += 1, R5343 += 1 };
  s0 -> s1 [0, 65535] { R5343 += 1, R1 += 1 };
  s1 -> s1 [0, 65535] { R5343 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 80] { R5345 += 1 };
  s0 -> s2 [0, 65535] { R5345 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R5344 += 1, R5345 += 1 };
  s0 -> s3 [81, 81] { R5345 += 1 };
  s0 -> s1 [82, 65535] { R5345 += 1 };
  s1 -> s1 [0, 80] { R5345 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [81, 81] { R5345 += 1 };
  s1 -> s1 [82, 65535] { R5345 += 1 };
  s2 -> s1 [0, 80] { R5345 += 1 };
  s2 -> s2 [0, 65535] { R5345 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [81, 81] { R5345 += 1 };
  s2 -> s1 [82, 65535] { R5345 += 1 };
  s3 -> s3 [0, 65535] { R5345 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 80] { R5347 += 1, R5285 += 1 };
  s0 -> s0 [0, 65535] { R5346 += 1, R5347 += 1 };
  s0 -> s2 [0, 65535] { R5347 += 1, R5284 += 1, R5285 += 1 };
  s0 -> s1 [82, 65535] { R5347 += 1, R5285 += 1 };
  s1 -> s1 [0, 80] { R5347 += 1, R5285 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R5347 += 1 };
  s1 -> s1 [82, 65535] { R5347 += 1, R5285 += 1 };
  s2 -> s1 [0, 80] { R5347 += 1, R5285 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R5347 += 1, R5284 += 1, R5285 += 1 };
  s2 -> s1 [82, 65535] { R5347 += 1, R5285 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s0 [0, 65535] { R5348 += 1, R5349 += 1 };
  s0 -> s1 [0, 65535] { R5349 += 1, R5286 += 1, R5287 += 1 };
  s0 -> s2 [0, 65535] { R5349 += 1, R5287 += 1, R17 += 1 };
  s1 -> s1 [0, 65535] { R5349 += 1, R5286 += 1, R5287 += 1 };
  s1 -> s2 [0, 65535] { R5349 += 1, R5287 += 1, R17 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R5349 += 1, R5287 += 1, R17 += 1 };
  s2 -> s3 [0, 65535] { R5349 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R5349 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s0 [0, 65535] { R5350 += 1, R5351 += 1 };
  s0 -> s1 [0, 65535] { R5351 += 1, R5289 += 1 };
  s0 -> s2 [0, 65535] { R5351 += 1, R5288 += 1, R5289 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R5351 += 1, R5289 += 1 };
  s1 -> s4 [0, 65535] { R5351 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R5351 += 1, R5289 += 1 };
  s2 -> s2 [0, 65535] { R5351 += 1, R5288 += 1, R5289 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R5351 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R5353 += 1, R5291 += 1, R67 += 1 };
  s0 -> s2 [0, 65535] { R5353 += 1, R5290 += 1, R5291 += 1 };
  s0 -> s0 [0, 65535] { R5352 += 1, R5353 += 1 };
  s1 -> s4 [0, 65535] { R5353 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R5353 += 1, R5291 += 1, R67 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R5353 += 1, R5291 += 1, R67 += 1 };
  s2 -> s2 [0, 65535] { R5353 += 1, R5290 += 1, R5291 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R5353 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 81] { R5355 += 1, R5293 += 1 };
  s0 -> s2 [0, 65535] { R5355 += 1, R5292 += 1, R5293 += 1 };
  s0 -> s3 [0, 65535] { R5355 += 1, R5293 += 1, R69 += 1 };
  s0 -> s0 [0, 65535] { R5354 += 1, R5355 += 1 };
  s0 -> s1 [83, 65535] { R5355 += 1, R5293 += 1 };
  s1 -> s1 [0, 81] { R5355 += 1, R5293 += 1 };
  s1 -> s1 [0, 65535] { R5355 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [83, 65535] { R5355 += 1, R5293 += 1 };
  s2 -> s1 [0, 81] { R5355 += 1, R5293 += 1 };
  s2 -> s2 [0, 65535] { R5355 += 1, R5292 += 1, R5293 += 1 };
  s2 -> s3 [0, 65535] { R5355 += 1, R5293 += 1, R69 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [83, 65535] { R5355 += 1, R5293 += 1 };
  s3 -> s1 [0, 81] { R5355 += 1, R5293 += 1 };
  s3 -> s4 [0, 65535] { R5355 += 1 };
  s3 -> s3 [0, 65535] { R5355 += 1, R5293 += 1, R69 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [83, 65535] { R5355 += 1, R5293 += 1 };
  s4 -> s4 [0, 65535] { R5355 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 81] { R5357 += 1, R5295 += 1, R73 += 1 };
  s0 -> s0 [0, 65535] { R5356 += 1, R5357 += 1 };
  s0 -> s2 [0, 65535] { R5357 += 1, R5294 += 1, R5295 += 1 };
  s0 -> s3 [0, 65535] { R5357 += 1, R5295 += 1, R72 += 1, R73 += 1 };
  s0 -> s1 [83, 65535] { R5357 += 1, R5295 += 1, R73 += 1 };
  s1 -> s1 [0, 81] { R5357 += 1, R5295 += 1, R73 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R5357 += 1 };
  s1 -> s1 [0, 65535] { R5357 += 1, R5295 += 1 };
  s1 -> s1 [83, 65535] { R5357 += 1, R5295 += 1, R73 += 1 };
  s2 -> s1 [0, 81] { R5357 += 1, R5295 += 1, R73 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R5357 += 1, R5294 += 1, R5295 += 1 };
  s2 -> s3 [0, 65535] { R5357 += 1, R5295 += 1, R72 += 1, R73 += 1 };
  s2 -> s1 [83, 65535] { R5357 += 1, R5295 += 1, R73 += 1 };
  s3 -> s1 [0, 81] { R5357 += 1, R5295 += 1, R73 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R5357 += 1 };
  s3 -> s3 [0, 65535] { R5357 += 1, R5295 += 1, R72 += 1, R73 += 1 };
  s3 -> s1 [83, 65535] { R5357 += 1, R5295 += 1, R73 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R5357 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R5359 += 1, R5297 += 1 };
  s0 -> s2 [0, 65535] { R5359 += 1, R5296 += 1, R5297 += 1 };
  s0 -> s0 [0, 65535] { R5358 += 1, R5359 += 1 };
  s0 -> s3 [0, 65535] { R5359 += 1, R5297 += 1, R3894 += 1, R3895 += 1 };
  s1 -> s1 [0, 65535] { R5359 += 1, R5297 += 1 };
  s1 -> s4 [0, 65535] { R5359 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R5359 += 1, R5297 += 1 };
  s2 -> s2 [0, 65535] { R5359 += 1, R5296 += 1, R5297 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R5359 += 1, R5297 += 1, R3894 += 1, R3895 += 1 };
  s3 -> s1 [0, 65535] { R5359 += 1, R5297 += 1 };
  s3 -> s4 [0, 65535] { R5359 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R5359 += 1, R5297 += 1, R3894 += 1, R3895 += 1 };
  s4 -> s4 [0, 65535] { R5359 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 82] { R5361 += 1, R5299 += 1, R5169 += 1 };
  s0 -> s2 [0, 65535] { R5361 += 1, R5298 += 1, R5299 += 1 };
  s0 -> s3 [0, 65535] { R5361 += 1, R5299 += 1, R5168 += 1, R5169 += 1 };
  s0 -> s0 [0, 65535] { R5360 += 1, R5361 += 1 };
  s0 -> s4 [86, 86] { R5361 += 1, R5299 += 1, R5169 += 1 };
  s0 -> s1 [87, 65535] { R5361 += 1, R5299 += 1, R5169 += 1 };
  s1 -> s1 [0, 82] { R5361 += 1, R5299 += 1, R5169 += 1 };
  s1 -> s4 [86, 86] { R5361 += 1, R5299 += 1, R5169 += 1 };
  s1 -> s1 [87, 65535] { R5361 += 1, R5299 += 1, R5169 += 1 };
  s2 -> s1 [0, 82] { R5361 += 1, R5299 += 1, R5169 += 1 };
  s2 -> s2 [0, 65535] { R5361 += 1, R5298 += 1, R5299 += 1 };
  s2 -> s3 [0, 65535] { R5361 += 1, R5299 += 1, R5168 += 1, R5169 += 1 };
  s2 -> s4 [86, 86] { R5361 += 1, R5299 += 1, R5169 += 1 };
  s2 -> s1 [87, 65535] { R5361 += 1, R5299 += 1, R5169 += 1 };
  s3 -> s1 [0, 82] { R5361 += 1, R5299 += 1, R5169 += 1 };
  s3 -> s3 [0, 65535] { R5361 += 1, R5299 += 1, R5168 += 1, R5169 += 1 };
  s3 -> s4 [86, 86] { R5361 += 1, R5299 += 1, R5169 += 1 };
  s3 -> s1 [87, 65535] { R5361 += 1, R5299 += 1, R5169 += 1 };
  s4 -> s4 [0, 82] { R5361 += 1, R5299 += 1, R5169 += 1 };
  s4 -> s4 [0, 65535] { R5361 += 1, R5299 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R5361 += 1 };
  s4 -> s4 [86, 65535] { R5361 += 1, R5299 += 1, R5169 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R5361 += 1 };
  accepting s4, s5, s6;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R5363 += 1, R5301 += 1, R5174 += 1, R5175 += 1 };
  s0 -> s2 [0, 65535] { R5363 += 1, R5300 += 1, R5301 += 1 };
  s0 -> s0 [0, 65535] { R5362 += 1, R5363 += 1 };
  s0 -> s3 [0, 65535] { R5363 += 1, R5301 += 1, R5173 += 1, R5174 += 1 };
  s1 -> s6 [0, 65535] { R5363 += 1, R5301 += 1 };
  s1 -> s1 [0, 65535] { R5363 += 1, R5301 += 1, R5174 += 1, R5175 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R5363 += 1 };
  s2 -> s1 [0, 65535] { R5363 += 1, R5301 += 1, R5174 += 1, R5175 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R5363 += 1, R5300 += 1, R5301 += 1 };
  s2 -> s3 [0, 65535] { R5363 += 1, R5301 += 1, R5173 += 1, R5174 += 1 };
  s3 -> s1 [0, 65535] { R5363 += 1, R5301 += 1, R5174 += 1, R5175 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R5363 += 1, R5301 += 1, R5173 += 1, R5174 += 1 };
  s3 -> s5 [0, 65535] { R5363 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R5363 += 1 };
  s6 -> s6 [0, 65535] { R5363 += 1, R5301 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R5363 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 81] { R5365 += 1, R5303 += 1, R5283 += 1 };
  s0 -> s1 [0, 65535] { R5365 += 1, R5303 += 1 };
  s0 -> s2 [0, 65535] { R5365 += 1, R5302 += 1, R5303 += 1 };
  s0 -> s0 [0, 65535] { R5364 += 1, R5365 += 1 };
  s0 -> s3 [82, 82] { R5365 += 1, R5303 += 1, R5283 += 1 };
  s0 -> s4 [82, 82] { R5365 += 1, R5303 += 1, R5283 += 1 };
  s0 -> s1 [87, 65535] { R5365 += 1, R5303 += 1, R5283 += 1 };
  s1 -> s1 [0, 81] { R5365 += 1, R5303 += 1, R5283 += 1 };
  s1 -> s5 [0, 65535] { R5365 += 1 };
  s1 -> s1 [0, 65535] { R5365 += 1, R5303 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [82, 82] { R5365 += 1, R5303 += 1, R5283 += 1 };
  s1 -> s4 [82, 82] { R5365 += 1, R5303 += 1, R5283 += 1 };
  s1 -> s1 [87, 65535] { R5365 += 1, R5303 += 1, R5283 += 1 };
  s2 -> s1 [0, 81] { R5365 += 1, R5303 += 1, R5283 += 1 };
  s2 -> s1 [0, 65535] { R5365 += 1, R5303 += 1 };
  s2 -> s2 [0, 65535] { R5365 += 1, R5302 += 1, R5303 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [82, 82] { R5365 += 1, R5303 += 1, R5283 += 1 };
  s2 -> s4 [82, 82] { R5365 += 1, R5303 += 1, R5283 += 1 };
  s2 -> s1 [87, 65535] { R5365 += 1, R5303 += 1, R5283 += 1 };
  s3 -> s5 [0, 65535] { R5365 += 1 };
  s3 -> s3 [0, 65535] { R5365 += 1, R5303 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 82] { R5365 += 1, R5303 += 1, R5283 += 1 };
  s4 -> s5 [0, 65535] { R5365 += 1 };
  s4 -> s4 [0, 65535] { R5365 += 1, R5303 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [87, 65535] { R5365 += 1, R5303 += 1, R5283 += 1 };
  s5 -> s5 [0, 65535] { R5365 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s0 [0, 65535] { R5366 += 1, R5367 += 1 };
  s0 -> s1 [0, 65535] { R5367 += 1, R5322 += 1, R5323 += 1 };
  s0 -> s2 [0, 65535] { R5367 += 1, R5323 += 1, R18 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R5367 += 1, R5322 += 1, R5323 += 1 };
  s1 -> s2 [0, 65535] { R5367 += 1, R5323 += 1, R18 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R5367 += 1 };
  s2 -> s2 [0, 65535] { R5367 += 1, R5323 += 1, R18 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R5367 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 80] { R5369 += 1, R5325 += 1 };
  s0 -> s0 [0, 65535] { R5368 += 1, R5369 += 1 };
  s0 -> s2 [0, 65535] { R5369 += 1, R5324 += 1, R5325 += 1 };
  s0 -> s3 [81, 81] { R5369 += 1, R5325 += 1 };
  s0 -> s4 [81, 81] { R5369 += 1, R5325 += 1 };
  s0 -> s5 [82, 82] { R5369 += 1, R5325 += 1 };
  s0 -> s1 [83, 65535] { R5369 += 1, R5325 += 1 };
  s1 -> s1 [0, 80] { R5369 += 1, R5325 += 1 };
  s1 -> s3 [81, 81] { R5369 += 1, R5325 += 1 };
  s1 -> s4 [81, 81] { R5369 += 1, R5325 += 1 };
  s1 -> s5 [82, 82] { R5369 += 1, R5325 += 1 };
  s1 -> s1 [83, 65535] { R5369 += 1, R5325 += 1 };
  s2 -> s1 [0, 80] { R5369 += 1, R5325 += 1 };
  s2 -> s2 [0, 65535] { R5369 += 1, R5324 += 1, R5325 += 1 };
  s2 -> s3 [81, 81] { R5369 += 1, R5325 += 1 };
  s2 -> s4 [81, 81] { R5369 += 1, R5325 += 1 };
  s2 -> s5 [82, 82] { R5369 += 1, R5325 += 1 };
  s2 -> s1 [83, 65535] { R5369 += 1, R5325 += 1 };
  s4 -> s4 [0, 81] { R5369 += 1, R5325 += 1 };
  s4 -> s8 [82, 82] { R5369 += 1, R5325 += 1 };
  s4 -> s4 [83, 65535] { R5369 += 1, R5325 += 1 };
  s5 -> s5 [0, 80] { R5369 += 1, R5325 += 1 };
  s5 -> s5 [0, 65535] { R5369 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [81, 81] { R5369 += 1, R5325 += 1 };
  s5 -> s8 [81, 81] { R5369 += 1, R5325 += 1 };
  s5 -> s5 [82, 65535] { R5369 += 1, R5325 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R5369 += 1 };
  s8 -> s9 [0, 65535] { R5369 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R5369 += 1, R5325 += 1 };
  s9 -> s9 [0, 65535] { R5369 += 1 };
  s9 -> s6 [0, 65535];
  accepting s8, s5, s9, s6, s7;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 80] { R5371 += 1, R5327 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R5370 += 1, R5371 += 1 };
  s0 -> s2 [0, 65535] { R5371 += 1, R5326 += 1, R5327 += 1 };
  s0 -> s3 [81, 81] { R5371 += 1, R5327 += 1, R66 += 1 };
  s0 -> s4 [81, 81] { R5371 += 1, R5327 += 1, R66 += 1 };
  s0 -> s1 [82, 65535] { R5371 += 1, R5327 += 1, R66 += 1 };
  s1 -> s1 [0, 80] { R5371 += 1, R5327 += 1, R66 += 1 };
  s1 -> s1 [0, 65535] { R5371 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [81, 81] { R5371 += 1, R5327 += 1, R66 += 1 };
  s1 -> s4 [81, 81] { R5371 += 1, R5327 += 1, R66 += 1 };
  s1 -> s1 [82, 65535] { R5371 += 1, R5327 += 1, R66 += 1 };
  s2 -> s1 [0, 80] { R5371 += 1, R5327 += 1, R66 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R5371 += 1, R5326 += 1, R5327 += 1 };
  s2 -> s3 [81, 81] { R5371 += 1, R5327 += 1, R66 += 1 };
  s2 -> s4 [81, 81] { R5371 += 1, R5327 += 1, R66 += 1 };
  s2 -> s1 [82, 65535] { R5371 += 1, R5327 += 1, R66 += 1 };
  s3 -> s3 [0, 65535] { R5371 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R5371 += 1, R5327 += 1, R66 += 1 };
  s4 -> s6 [0, 65535] { R5371 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R5371 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 80] { R5373 += 1, R5329 += 1, R68 += 1 };
  s0 -> s2 [0, 65535] { R5373 += 1, R5328 += 1, R5329 += 1 };
  s0 -> s0 [0, 65535] { R5372 += 1, R5373 += 1 };
  s0 -> s3 [81, 81] { R5373 += 1, R5329 += 1, R68 += 1 };
  s0 -> s4 [81, 81] { R5373 += 1, R5329 += 1, R68 += 1 };
  s0 -> s1 [82, 65535] { R5373 += 1, R5329 += 1, R68 += 1 };
  s1 -> s1 [0, 80] { R5373 += 1, R5329 += 1, R68 += 1 };
  s1 -> s1 [0, 65535] { R5373 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [81, 81] { R5373 += 1, R5329 += 1, R68 += 1 };
  s1 -> s4 [81, 81] { R5373 += 1, R5329 += 1, R68 += 1 };
  s1 -> s1 [82, 65535] { R5373 += 1, R5329 += 1, R68 += 1 };
  s2 -> s1 [0, 80] { R5373 += 1, R5329 += 1, R68 += 1 };
  s2 -> s2 [0, 65535] { R5373 += 1, R5328 += 1, R5329 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [81, 81] { R5373 += 1, R5329 += 1, R68 += 1 };
  s2 -> s4 [81, 81] { R5373 += 1, R5329 += 1, R68 += 1 };
  s2 -> s1 [82, 65535] { R5373 += 1, R5329 += 1, R68 += 1 };
  s3 -> s3 [0, 65535] { R5373 += 1, R5329 += 1, R68 += 1 };
  s3 -> s6 [0, 65535] { R5373 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R5373 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R5373 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 80] { R5375 += 1, R5331 += 1, R70 += 1, R71 += 1 };
  s0 -> s2 [0, 65535] { R5375 += 1, R5330 += 1, R5331 += 1 };
  s0 -> s0 [0, 65535] { R5374 += 1, R5375 += 1 };
  s0 -> s3 [81, 81] { R5375 += 1, R5331 += 1, R70 += 1, R71 += 1 };
  s0 -> s4 [81, 81] { R5375 += 1, R5331 += 1, R70 += 1, R71 += 1 };
  s0 -> s1 [82, 65535] { R5375 += 1, R5331 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 80] { R5375 += 1, R5331 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 65535] { R5375 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [81, 81] { R5375 += 1, R5331 += 1, R70 += 1, R71 += 1 };
  s1 -> s4 [81, 81] { R5375 += 1, R5331 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [82, 65535] { R5375 += 1, R5331 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [0, 80] { R5375 += 1, R5331 += 1, R70 += 1, R71 += 1 };
  s2 -> s2 [0, 65535] { R5375 += 1, R5330 += 1, R5331 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [81, 81] { R5375 += 1, R5331 += 1, R70 += 1, R71 += 1 };
  s2 -> s4 [81, 81] { R5375 += 1, R5331 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [82, 65535] { R5375 += 1, R5331 += 1, R70 += 1, R71 += 1 };
  s3 -> s3 [0, 65535] { R5375 += 1, R5331 += 1, R70 += 1, R71 += 1 };
  s3 -> s6 [0, 65535] { R5375 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R5375 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R5375 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 80] { R5377 += 1, R5333 += 1, R3890 += 1, R3891 += 1 };
  s0 -> s2 [0, 80] { R5377 += 1, R5333 += 1, R3891 += 1, R3892 += 1 };
  s0 -> s3 [0, 65535] { R5377 += 1, R5332 += 1, R5333 += 1 };
  s0 -> s0 [0, 65535] { R5376 += 1, R5377 += 1 };
  s0 -> s4 [81, 81] { R5377 += 1, R5333 += 1, R3890 += 1, R3891 += 1 };
  s0 -> s5 [81, 81] { R5377 += 1, R5333 += 1, R3890 += 1, R3891 += 1 };
  s0 -> s6 [81, 81] { R5377 += 1, R5333 += 1, R3891 += 1, R3892 += 1 };
  s0 -> s7 [81, 81] { R5377 += 1, R5333 += 1, R3891 += 1, R3892 += 1 };
  s0 -> s1 [82, 65535] { R5377 += 1, R5333 += 1, R3890 += 1, R3891 += 1 };
  s0 -> s2 [82, 65535] { R5377 += 1, R5333 += 1, R3891 += 1, R3892 += 1 };
  s1 -> s1 [0, 80] { R5377 += 1, R5333 += 1, R3890 += 1, R3891 += 1 };
  s1 -> s2 [0, 80] { R5377 += 1, R5333 += 1, R3891 += 1, R3892 += 1 };
  s1 -> s4 [81, 81] { R5377 += 1, R5333 += 1, R3890 += 1, R3891 += 1 };
  s1 -> s5 [81, 81] { R5377 += 1, R5333 += 1, R3890 += 1, R3891 += 1 };
  s1 -> s6 [81, 81] { R5377 += 1, R5333 += 1, R3891 += 1, R3892 += 1 };
  s1 -> s7 [81, 81] { R5377 += 1, R5333 += 1, R3891 += 1, R3892 += 1 };
  s1 -> s1 [82, 65535] { R5377 += 1, R5333 += 1, R3890 += 1, R3891 += 1 };
  s1 -> s2 [82, 65535] { R5377 += 1, R5333 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s2 [0, 80] { R5377 += 1, R5333 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R5377 += 1 };
  s2 -> s6 [81, 81] { R5377 += 1, R5333 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s7 [81, 81] { R5377 += 1, R5333 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s2 [82, 65535] { R5377 += 1, R5333 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s1 [0, 80] { R5377 += 1, R5333 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s2 [0, 80] { R5377 += 1, R5333 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s3 [0, 65535] { R5377 += 1, R5332 += 1, R5333 += 1 };
  s3 -> s4 [81, 81] { R5377 += 1, R5333 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s5 [81, 81] { R5377 += 1, R5333 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s6 [81, 81] { R5377 += 1, R5333 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s7 [81, 81] { R5377 += 1, R5333 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s1 [82, 65535] { R5377 += 1, R5333 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s2 [82, 65535] { R5377 += 1, R5333 += 1, R3891 += 1, R3892 += 1 };
  s5 -> s5 [0, 65535] { R5377 += 1, R5333 += 1, R3890 += 1, R3891 += 1 };
  s5 -> s7 [0, 65535] { R5377 += 1, R5333 += 1, R3891 += 1, R3892 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R5377 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s9 [0, 65535] { R5377 += 1 };
  s7 -> s7 [0, 65535] { R5377 += 1, R5333 += 1, R3891 += 1, R3892 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R5377 += 1 };
  accepting s8, s2, s9, s6, s7;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 80] { R5379 += 1, R5335 += 1, R5166 += 1, R5167 += 1 };
  s0 -> s0 [0, 65535] { R5378 += 1, R5379 += 1 };
  s0 -> s2 [0, 65535] { R5379 += 1, R5334 += 1, R5335 += 1 };
  s0 -> s3 [81, 81] { R5379 += 1, R5335 += 1, R5166 += 1, R5167 += 1 };
  s0 -> s4 [81, 81] { R5379 += 1, R5335 += 1, R5166 += 1, R5167 += 1 };
  s0 -> s1 [82, 65535] { R5379 += 1, R5335 += 1, R5166 += 1, R5167 += 1 };
  s1 -> s1 [0, 80] { R5379 += 1, R5335 += 1, R5166 += 1, R5167 += 1 };
  s1 -> s1 [0, 65535] { R5379 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [81, 81] { R5379 += 1, R5335 += 1, R5166 += 1, R5167 += 1 };
  s1 -> s4 [81, 81] { R5379 += 1, R5335 += 1, R5166 += 1, R5167 += 1 };
  s1 -> s1 [82, 65535] { R5379 += 1, R5335 += 1, R5166 += 1, R5167 += 1 };
  s2 -> s1 [0, 80] { R5379 += 1, R5335 += 1, R5166 += 1, R5167 += 1 };
  s2 -> s2 [0, 65535] { R5379 += 1, R5334 += 1, R5335 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [81, 81] { R5379 += 1, R5335 += 1, R5166 += 1, R5167 += 1 };
  s2 -> s4 [81, 81] { R5379 += 1, R5335 += 1, R5166 += 1, R5167 += 1 };
  s2 -> s1 [82, 65535] { R5379 += 1, R5335 += 1, R5166 += 1, R5167 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R5379 += 1, R5335 += 1, R5166 += 1, R5167 += 1 };
  s3 -> s6 [0, 65535] { R5379 += 1 };
  s4 -> s4 [0, 65535] { R5379 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R5379 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 80] { R5381 += 1, R5337 += 1, R5170 += 1, R5171 += 1 };
  s0 -> s0 [0, 65535] { R5380 += 1, R5381 += 1 };
  s0 -> s2 [0, 65535] { R5381 += 1, R5336 += 1, R5337 += 1 };
  s0 -> s3 [81, 81] { R5381 += 1, R5337 += 1, R5170 += 1, R5171 += 1 };
  s0 -> s4 [81, 81] { R5381 += 1, R5337 += 1, R5170 += 1, R5171 += 1 };
  s0 -> s1 [82, 65535] { R5381 += 1, R5337 += 1, R5170 += 1, R5171 += 1 };
  s1 -> s1 [0, 80] { R5381 += 1, R5337 += 1, R5170 += 1, R5171 += 1 };
  s1 -> s1 [0, 65535] { R5381 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [81, 81] { R5381 += 1, R5337 += 1, R5170 += 1, R5171 += 1 };
  s1 -> s4 [81, 81] { R5381 += 1, R5337 += 1, R5170 += 1, R5171 += 1 };
  s1 -> s1 [82, 65535] { R5381 += 1, R5337 += 1, R5170 += 1, R5171 += 1 };
  s2 -> s1 [0, 80] { R5381 += 1, R5337 += 1, R5170 += 1, R5171 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R5381 += 1, R5336 += 1, R5337 += 1 };
  s2 -> s3 [81, 81] { R5381 += 1, R5337 += 1, R5170 += 1, R5171 += 1 };
  s2 -> s4 [81, 81] { R5381 += 1, R5337 += 1, R5170 += 1, R5171 += 1 };
  s2 -> s1 [82, 65535] { R5381 += 1, R5337 += 1, R5170 += 1, R5171 += 1 };
  s3 -> s3 [0, 65535] { R5381 += 1, R5337 += 1, R5170 += 1, R5171 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R5381 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R5381 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R5381 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 80] { R5383 += 1, R5339 += 1, R5281 += 1 };
  s0 -> s2 [0, 80] { R5383 += 1, R5339 += 1, R5280 += 1, R5281 += 1 };
  s0 -> s3 [0, 65535] { R5383 += 1, R5338 += 1, R5339 += 1 };
  s0 -> s0 [0, 65535] { R5382 += 1, R5383 += 1 };
  s0 -> s4 [81, 81] { R5383 += 1, R5339 += 1, R5281 += 1 };
  s0 -> s5 [81, 81] { R5383 += 1, R5339 += 1, R5280 += 1, R5281 += 1 };
  s0 -> s6 [81, 81] { R5383 += 1, R5339 += 1, R5281 += 1 };
  s0 -> s7 [81, 81] { R5383 += 1, R5339 += 1, R5280 += 1, R5281 += 1 };
  s0 -> s2 [82, 65535] { R5383 += 1, R5339 += 1, R5280 += 1, R5281 += 1 };
  s0 -> s1 [87, 65535] { R5383 += 1, R5339 += 1, R5281 += 1 };
  s1 -> s1 [0, 80] { R5383 += 1, R5339 += 1, R5281 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s1 [0, 65535] { R5383 += 1 };
  s1 -> s4 [81, 81] { R5383 += 1, R5339 += 1 };
  s1 -> s6 [81, 81] { R5383 += 1, R5339 += 1 };
  s1 -> s1 [82, 65535] { R5383 += 1, R5339 += 1 };
  s1 -> s1 [87, 65535] { R5383 += 1, R5339 += 1, R5281 += 1 };
  s2 -> s1 [0, 80] { R5383 += 1, R5339 += 1, R5281 += 1 };
  s2 -> s2 [0, 80] { R5383 += 1, R5339 += 1, R5280 += 1, R5281 += 1 };
  s2 -> s4 [81, 81] { R5383 += 1, R5339 += 1, R5281 += 1 };
  s2 -> s5 [81, 81] { R5383 += 1, R5339 += 1, R5280 += 1, R5281 += 1 };
  s2 -> s6 [81, 81] { R5383 += 1, R5339 += 1, R5281 += 1 };
  s2 -> s7 [81, 81] { R5383 += 1, R5339 += 1, R5280 += 1, R5281 += 1 };
  s2 -> s2 [82, 65535] { R5383 += 1, R5339 += 1, R5280 += 1, R5281 += 1 };
  s2 -> s1 [87, 65535] { R5383 += 1, R5339 += 1, R5281 += 1 };
  s3 -> s1 [0, 80] { R5383 += 1, R5339 += 1, R5281 += 1 };
  s3 -> s2 [0, 80] { R5383 += 1, R5339 += 1, R5280 += 1, R5281 += 1 };
  s3 -> s3 [0, 65535] { R5383 += 1, R5338 += 1, R5339 += 1 };
  s3 -> s4 [81, 81] { R5383 += 1, R5339 += 1, R5281 += 1 };
  s3 -> s5 [81, 81] { R5383 += 1, R5339 += 1, R5280 += 1, R5281 += 1 };
  s3 -> s6 [81, 81] { R5383 += 1, R5339 += 1, R5281 += 1 };
  s3 -> s7 [81, 81] { R5383 += 1, R5339 += 1, R5280 += 1, R5281 += 1 };
  s3 -> s2 [82, 65535] { R5383 += 1, R5339 += 1, R5280 += 1, R5281 += 1 };
  s3 -> s1 [87, 65535] { R5383 += 1, R5339 += 1, R5281 += 1 };
  s4 -> s4 [0, 81] { R5383 += 1, R5339 += 1, R5281 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s4 [0, 65535] { R5383 += 1, R5339 += 1 };
  s4 -> s9 [0, 65535] { R5383 += 1 };
  s4 -> s4 [87, 65535] { R5383 += 1, R5339 += 1, R5281 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R5383 += 1 };
  s7 -> s4 [0, 81] { R5383 += 1, R5339 += 1, R5281 += 1 };
  s7 -> s7 [0, 65535] { R5383 += 1, R5339 += 1, R5280 += 1, R5281 += 1 };
  s7 -> s4 [87, 65535] { R5383 += 1, R5339 += 1, R5281 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R5383 += 1 };
  accepting s4, s8, s9, s6, s1;
};
};
synchronised {  // Automata constraining c1
automaton c1_0 {
  init s0;
  s0 -> s1 [114, 114];
  accepting s1;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [113, 113];
  accepting s1;
};
};
constraint R1 = R5299 && R2 = R5383 && R20 - R5383 = -1 && R21 = R5383 && R22 - R5383 = -1 && R23 = R5383 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R5169 + -1*R5167 - R53 = 0 && R52 + R5168 + R5166 = 0 && R5298 = 0 && R5324 = 0 && R5325 = 0 && R5332 = 0 && R5333 = 0 && R5338 = 0 && R5339 = 0 && R5340 = 0 && R5341 = R5383 && R5342 = 0 && R5343 = R5383 && R5344 = 0 && R5345 = R5383 && R5346 = 0 && R5347 = R5383 && R5348 = 0 && R5349 = R5383 && R5350 = 0 && R5351 = R5383 && R5352 = 0 && R5353 = R5383 && R5354 = 0 && R5355 = R5383 && R5356 = 0 && R5357 = R5383 && R5358 = 0 && R5359 = R5383 && R5360 = 0 && R5361 = R5383 && R5362 = 0 && R5363 = R5383 && R5364 = 0 && R5365 = R5383 && R5366 = 0 && R5367 = R5383 && R5368 = 0 && R5369 = R5383 && R5370 = 0 && R5371 = R5383 && R5372 = 0 && R5373 = R5383 && R5374 = 0 && R5375 = R5383 && R5376 = 0 && R5377 = R5383 && R5378 = 0 && R5379 = R5383 && R5380 = 0 && R5381 = R5383 && R5382 = 0 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R5169 + -1*R5167 - R53 < 1 && -1 < R5299 && 0 < R5383 && (R48 + R3895 + R3892 != 0 || ((R42 + R72 + R70 != 0 || R43 + R73 + R71 + -1*R5169 + -1*R5167 - R53 = 0 || R53 + R5169 + R5167 < 1) && (R42 + R72 + R70 = 0 || R53 + R5169 + R5167 < 1))) && (R48 + R3895 + R3892 != 0 || ((R46 + R3893 + R3890 != 0 || R47 + R3894 + R3891 + -1*R5169 + -1*R5167 - R53 = 0 || R53 + R5169 + R5167 < 1) && (R46 + R3893 + R3890 = 0 || R53 + R5169 + R5167 < 1))) && (R5284 != 0 || R5285 = R5299 || (R17 = 0 && R5299 = 0)) && (R5286 != 0 || R5287 = R5299 || (R17 = 0 && R5299 = 0)) && (R5288 != 0 || R5289 = R5299 || (R17 = 0 && R5299 = 0)) && (R5290 != 0 || R5291 = R5299 || (R17 = 0 && R5299 = 0)) && (R5292 != 0 || R5293 = R5299 || (R17 = 0 && R5299 = 0)) && (R5294 != 0 || R5295 = R5299 || (R17 = 0 && R5299 = 0)) && (R5296 != 0 || R5297 = R5299 || (R17 = 0 && R5299 = 0)) && (R5300 != 0 || R5299 = R5301 || (R17 = 0 && R5299 = 0)) && (R5302 != 0 || R5299 = R5303 || (R17 = 0 && R5299 = 0)) && (R18 = 0 || (R5322 = 0 && R5323 = 0)) && (R18 = 0 || (R5326 = 0 && R5327 = 0)) && (R18 = 0 || (R5328 = 0 && R5329 = 0)) && (R18 = 0 || (R5330 = 0 && R5331 = 0)) && (R18 = 0 || (R5334 = 0 && R5335 = 0)) && (R18 = 0 || (R5336 = 0 && R5337 = 0)) && (R19 = 0 || (R5304 = 0 && R5305 = 0)) && (R19 = 0 || (R5306 = 0 && R5307 = 0)) && (R19 = 0 || (R5308 = 0 && R5309 = 0)) && (R19 = 0 || (R5310 = 0 && R5311 = 0)) && (R19 = 0 || (R5312 = 0 && R5313 = 0)) && (R19 = 0 || (R5314 = 0 && R5315 = 0)) && (R19 = 0 || (R5316 = 0 && R5317 = 0)) && (R19 = 0 || (R5318 = 0 && R5319 = 0)) && (R19 = 0 || (R5320 = 0 && R5321 = 0)) && (R48 + R3895 + R3892 = 0 || (R42 + R72 + R70 = 0 && R43 + R73 + R71 + -1*R5169 + -1*R5167 - R53 = 0)) && (R48 + R3895 + R3892 = 0 || (R46 + R3893 + R3890 = 0 && R47 + R3894 + R3891 + -1*R5169 + -1*R5167 - R53 = 0)) && (R58 + R5175 + R5172 = 0 || (R56 + R5173 + R5170 = 0 && R57 + R5174 + R5171 = 0)) && (R58 + R5175 + R5172 = 0 || (R62 + R5282 + R5280 = 0 && R63 + R5283 + R5281 = 0)) && (R5284 = 0 || (R17 = 0 && R5299 = 0)) && (R5286 = 0 || (R17 = 0 && R5299 = 0)) && (R5288 = 0 || (R17 = 0 && R5299 = 0)) && (R5290 = 0 || (R17 = 0 && R5299 = 0)) && (R5292 = 0 || (R17 = 0 && R5299 = 0)) && (R5294 = 0 || (R17 = 0 && R5299 = 0)) && (R5296 = 0 || (R17 = 0 && R5299 = 0)) && (R5300 = 0 || (R17 = 0 && R5299 = 0)) && (R5302 = 0 || (R17 = 0 && R5299 = 0));
// End of Parikh automata intersection problem
