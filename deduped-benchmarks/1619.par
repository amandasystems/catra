// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R12, R14, R15, R182, R183, R2, R265, R266, R267, R268, R269, R270, R271, R272, R273, R274, R275, R276, R277, R278, R279, R280, R281, R282, R283, R284, R285, R286, R287, R288, R289, R290, R291, R292, R293, R294, R295, R296, R297, R298, R299, R3, R300, R301, R302, R303, R304, R305, R306, R307, R308, R309, R310, R311, R312, R313, R314, R315, R316, R317, R318, R319, R320, R321, R322, R323, R324, R325, R326, R327, R328, R329, R330, R331, R332, R333, R334, R335, R336, R337, R338, R339, R340, R341, R342, R343, R344, R345, R4, R5, R6, R7, R8, R9;
synchronised {  // Automata constraining value1
automaton value1_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 60];
  s0 -> s1 [61, 61];
  s0 -> s0 [62, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 65535];
  accepting s1;
};
automaton value1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton value1_2 {
  init s0;
  s0 -> s1 [0, 60] { R183 += 1 };
  s0 -> s0 [0, 65535] { R182 += 1, R183 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535] { R183 += 1 };
  s1 -> s1 [0, 60] { R183 += 1 };
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535] { R183 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value1_3 {
  init s0;
  s0 -> s1 [0, 64] { R311 += 1 };
  s0 -> s0 [0, 65535] { R310 += 1, R311 += 1 };
  s0 -> s2 [67, 67] { R311 += 1 };
  s0 -> s1 [68, 65535] { R311 += 1 };
  s1 -> s1 [0, 64] { R311 += 1 };
  s1 -> s2 [67, 67] { R311 += 1 };
  s1 -> s1 [68, 65535] { R311 += 1 };
  s2 -> s2 [0, 64] { R311 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [67, 65535] { R311 += 1 };
  accepting s2;
};
automaton value1_4 {
  init s0;
  s0 -> s0 [0, 65535] { R312 += 1, R313 += 1 };
  s0 -> s1 [0, 65535] { R313 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R313 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_5 {
  init s0;
  s0 -> s1 [0, 66] { R315 += 1, R15 += 1 };
  s0 -> s0 [0, 65535] { R314 += 1, R315 += 1 };
  s0 -> s2 [0, 65535] { R315 += 1, R14 += 1, R15 += 1 };
  s0 -> s3 [67, 67] { R315 += 1 };
  s0 -> s1 [68, 65535] { R315 += 1, R15 += 1 };
  s1 -> s1 [0, 66] { R315 += 1, R15 += 1 };
  s1 -> s3 [67, 67] { R315 += 1 };
  s1 -> s1 [68, 65535] { R315 += 1, R15 += 1 };
  s2 -> s1 [0, 66] { R315 += 1, R15 += 1 };
  s2 -> s2 [0, 65535] { R315 += 1, R14 += 1, R15 += 1 };
  s2 -> s3 [67, 67] { R315 += 1 };
  s2 -> s1 [68, 65535] { R315 += 1, R15 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R315 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton value1_6 {
  init s0;
  s0 -> s1 [0, 8] { R317 += 1, R283 += 1 };
  s0 -> s2 [0, 65535] { R317 += 1, R282 += 1, R283 += 1 };
  s0 -> s0 [0, 65535] { R316 += 1, R317 += 1 };
  s0 -> s3 [9, 13] { R317 += 1, R283 += 1 };
  s0 -> s1 [14, 31] { R317 += 1, R283 += 1 };
  s0 -> s3 [32, 32] { R317 += 1, R283 += 1 };
  s0 -> s1 [33, 65535] { R317 += 1, R283 += 1 };
  s1 -> s5 [0, 65535] { R317 += 1 };
  s1 -> s1 [0, 65535] { R317 += 1, R283 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R317 += 1, R283 += 1 };
  s2 -> s2 [0, 65535] { R317 += 1, R282 += 1, R283 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R317 += 1, R283 += 1 };
  s2 -> s1 [14, 31] { R317 += 1, R283 += 1 };
  s2 -> s3 [32, 32] { R317 += 1, R283 += 1 };
  s2 -> s1 [33, 65535] { R317 += 1, R283 += 1 };
  s3 -> s1 [0, 65535] { R317 += 1, R283 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R317 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value1_7 {
  init s0;
  s0 -> s1 [0, 65535] { R319 += 1, R285 += 1, R9 += 1 };
  s0 -> s2 [0, 65535] { R319 += 1, R284 += 1, R285 += 1 };
  s0 -> s0 [0, 65535] { R318 += 1, R319 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R319 += 1, R285 += 1, R9 += 1 };
  s1 -> s4 [0, 65535] { R319 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R319 += 1, R285 += 1, R9 += 1 };
  s2 -> s2 [0, 65535] { R319 += 1, R284 += 1, R285 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R319 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_8 {
  init s0;
  s0 -> s1 [0, 8] { R321 += 1, R287 += 1 };
  s0 -> s0 [0, 65535] { R320 += 1, R321 += 1 };
  s0 -> s2 [0, 65535] { R321 += 1, R286 += 1, R287 += 1 };
  s0 -> s3 [9, 13] { R321 += 1, R287 += 1 };
  s0 -> s1 [14, 31] { R321 += 1, R287 += 1 };
  s0 -> s3 [32, 32] { R321 += 1, R287 += 1 };
  s0 -> s1 [33, 65535] { R321 += 1, R287 += 1 };
  s1 -> s1 [0, 65535] { R321 += 1, R287 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R321 += 1 };
  s2 -> s1 [0, 8] { R321 += 1, R287 += 1 };
  s2 -> s2 [0, 65535] { R321 += 1, R286 += 1, R287 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R321 += 1, R287 += 1 };
  s2 -> s1 [14, 31] { R321 += 1, R287 += 1 };
  s2 -> s3 [32, 32] { R321 += 1, R287 += 1 };
  s2 -> s1 [33, 65535] { R321 += 1, R287 += 1 };
  s3 -> s1 [0, 65535] { R321 += 1, R287 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R321 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value1_9 {
  init s0;
  s0 -> s0 [0, 65535] { R322 += 1, R323 += 1 };
  s0 -> s1 [0, 65535] { R323 += 1, R288 += 1, R289 += 1 };
  s0 -> s2 [0, 65535] { R323 += 1, R289 += 1, R10 += 1 };
  s1 -> s1 [0, 65535] { R323 += 1, R288 += 1, R289 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R323 += 1, R289 += 1, R10 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R323 += 1, R289 += 1, R10 += 1 };
  s2 -> s4 [0, 65535] { R323 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R323 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_10 {
  init s0;
  s0 -> s1 [0, 66] { R325 += 1, R295 += 1 };
  s0 -> s0 [0, 65535] { R324 += 1, R325 += 1 };
  s0 -> s2 [0, 65535] { R325 += 1, R294 += 1, R295 += 1 };
  s0 -> s3 [67, 67] { R325 += 1, R295 += 1 };
  s0 -> s1 [68, 65535] { R325 += 1, R295 += 1 };
  s1 -> s1 [0, 66] { R325 += 1, R295 += 1 };
  s1 -> s3 [67, 67] { R325 += 1, R295 += 1 };
  s1 -> s1 [68, 65535] { R325 += 1, R295 += 1 };
  s2 -> s1 [0, 66] { R325 += 1, R295 += 1 };
  s2 -> s2 [0, 65535] { R325 += 1, R294 += 1, R295 += 1 };
  s2 -> s3 [67, 67] { R325 += 1, R295 += 1 };
  s2 -> s1 [68, 65535] { R325 += 1, R295 += 1 };
  s3 -> s3 [0, 65535] { R325 += 1, R295 += 1 };
  s3 -> s4 [0, 65535] { R325 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R325 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
automaton value1_11 {
  init s0;
  s0 -> s1 [0, 65535] { R327 += 1, R296 += 1, R297 += 1 };
  s0 -> s2 [0, 65535] { R327 += 1, R297 += 1, R265 += 1 };
  s0 -> s0 [0, 65535] { R326 += 1, R327 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R327 += 1, R296 += 1, R297 += 1 };
  s1 -> s2 [0, 65535] { R327 += 1, R297 += 1, R265 += 1 };
  s2 -> s3 [0, 65535] { R327 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R327 += 1, R297 += 1, R265 += 1 };
  s3 -> s3 [0, 65535] { R327 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_12 {
  init s0;
  s0 -> s1 [0, 65535] { R329 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R328 += 1, R329 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R329 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_13 {
  init s0;
  s0 -> s1 [0, 65535] { R331 += 1, R290 += 1, R291 += 1 };
  s0 -> s0 [0, 65535] { R330 += 1, R331 += 1 };
  s0 -> s2 [9, 9] { R331 += 1, R291 += 1 };
  s1 -> s1 [0, 65535] { R331 += 1, R290 += 1, R291 += 1 };
  s1 -> s2 [9, 9] { R331 += 1, R291 += 1 };
  s2 -> s2 [0, 65535] { R331 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value1_14 {
  init s0;
  s0 -> s1 [0, 65535] { R333 += 1, R292 += 1, R293 += 1 };
  s0 -> s2 [0, 65535] { R333 += 1, R293 += 1, R11 += 1 };
  s0 -> s0 [0, 65535] { R332 += 1, R333 += 1 };
  s1 -> s1 [0, 65535] { R333 += 1, R292 += 1, R293 += 1 };
  s1 -> s2 [0, 65535] { R333 += 1, R293 += 1, R11 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R333 += 1, R293 += 1, R11 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R333 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R333 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_15 {
  init s0;
  s0 -> s1 [0, 64] { R335 += 1, R299 += 1 };
  s0 -> s0 [0, 65535] { R334 += 1, R335 += 1 };
  s0 -> s2 [0, 65535] { R335 += 1, R298 += 1, R299 += 1 };
  s0 -> s1 [91, 65535] { R335 += 1, R299 += 1 };
  s1 -> s1 [0, 64] { R335 += 1, R299 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R335 += 1 };
  s1 -> s1 [91, 65535] { R335 += 1, R299 += 1 };
  s2 -> s1 [0, 64] { R335 += 1, R299 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R335 += 1, R298 += 1, R299 += 1 };
  s2 -> s1 [91, 65535] { R335 += 1, R299 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value1_16 {
  init s0;
  s0 -> s1 [0, 65535] { R337 += 1, R300 += 1, R301 += 1 };
  s0 -> s0 [0, 65535] { R336 += 1, R337 += 1 };
  s0 -> s2 [0, 65535] { R337 += 1, R301 += 1, R0 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R337 += 1, R300 += 1, R301 += 1 };
  s1 -> s2 [0, 65535] { R337 += 1, R301 += 1, R0 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R337 += 1 };
  s2 -> s2 [0, 65535] { R337 += 1, R301 += 1, R0 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R337 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_17 {
  init s0;
  s0 -> s1 [0, 8] { R339 += 1, R303 += 1, R267 += 1 };
  s0 -> s2 [0, 65535] { R339 += 1, R303 += 1, R266 += 1, R267 += 1 };
  s0 -> s0 [0, 65535] { R338 += 1, R339 += 1 };
  s0 -> s3 [0, 65535] { R339 += 1, R302 += 1, R303 += 1 };
  s0 -> s4 [9, 13] { R339 += 1, R303 += 1, R267 += 1 };
  s0 -> s1 [14, 31] { R339 += 1, R303 += 1, R267 += 1 };
  s0 -> s4 [32, 32] { R339 += 1, R303 += 1, R267 += 1 };
  s0 -> s1 [33, 65535] { R339 += 1, R303 += 1, R267 += 1 };
  s1 -> s7 [0, 65535] { R339 += 1, R303 += 1 };
  s1 -> s6 [0, 65535] { R339 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R339 += 1, R303 += 1, R267 += 1 };
  s2 -> s1 [0, 8] { R339 += 1, R303 += 1, R267 += 1 };
  s2 -> s2 [0, 65535] { R339 += 1, R303 += 1, R266 += 1, R267 += 1 };
  s2 -> s6 [0, 65535] { R339 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [9, 13] { R339 += 1, R303 += 1, R267 += 1 };
  s2 -> s1 [14, 31] { R339 += 1, R303 += 1, R267 += 1 };
  s2 -> s4 [32, 32] { R339 += 1, R303 += 1, R267 += 1 };
  s2 -> s1 [33, 65535] { R339 += 1, R303 += 1, R267 += 1 };
  s3 -> s1 [0, 8] { R339 += 1, R303 += 1, R267 += 1 };
  s3 -> s2 [0, 65535] { R339 += 1, R303 += 1, R266 += 1, R267 += 1 };
  s3 -> s3 [0, 65535] { R339 += 1, R302 += 1, R303 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s4 [9, 13] { R339 += 1, R303 += 1, R267 += 1 };
  s3 -> s1 [14, 31] { R339 += 1, R303 += 1, R267 += 1 };
  s3 -> s4 [32, 32] { R339 += 1, R303 += 1, R267 += 1 };
  s3 -> s1 [33, 65535] { R339 += 1, R303 += 1, R267 += 1 };
  s4 -> s1 [0, 65535] { R339 += 1, R303 += 1, R267 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R339 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R339 += 1, R303 += 1 };
  s7 -> s6 [0, 65535] { R339 += 1 };
  s7 -> s5 [0, 65535];
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton value1_18 {
  init s0;
  s0 -> s1 [0, 65535] { R341 += 1, R305 += 1, R268 += 1, R269 += 1 };
  s0 -> s2 [0, 65535] { R341 += 1, R304 += 1, R305 += 1 };
  s0 -> s3 [0, 65535] { R341 += 1, R305 += 1, R269 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R340 += 1, R341 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R341 += 1 };
  s1 -> s1 [0, 65535] { R341 += 1, R305 += 1, R268 += 1, R269 += 1 };
  s1 -> s3 [0, 65535] { R341 += 1, R305 += 1, R269 += 1, R5 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R341 += 1, R305 += 1, R268 += 1, R269 += 1 };
  s2 -> s2 [0, 65535] { R341 += 1, R304 += 1, R305 += 1 };
  s2 -> s3 [0, 65535] { R341 += 1, R305 += 1, R269 += 1, R5 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R341 += 1 };
  s3 -> s6 [0, 65535] { R341 += 1, R305 += 1 };
  s3 -> s3 [0, 65535] { R341 += 1, R305 += 1, R269 += 1, R5 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R341 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R341 += 1 };
  s6 -> s6 [0, 65535] { R341 += 1, R305 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value1_19 {
  init s0;
  s0 -> s1 [0, 8] { R343 += 1, R307 += 1, R271 += 1 };
  s0 -> s2 [0, 65535] { R343 += 1, R307 += 1, R270 += 1, R271 += 1 };
  s0 -> s0 [0, 65535] { R342 += 1, R343 += 1 };
  s0 -> s3 [0, 65535] { R343 += 1, R306 += 1, R307 += 1 };
  s0 -> s4 [9, 13] { R343 += 1, R307 += 1, R271 += 1 };
  s0 -> s1 [14, 31] { R343 += 1, R307 += 1, R271 += 1 };
  s0 -> s4 [32, 32] { R343 += 1, R307 += 1, R271 += 1 };
  s0 -> s1 [33, 65535] { R343 += 1, R307 += 1, R271 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R343 += 1, R307 += 1, R271 += 1 };
  s1 -> s7 [0, 65535] { R343 += 1, R307 += 1 };
  s1 -> s6 [0, 65535] { R343 += 1 };
  s2 -> s1 [0, 8] { R343 += 1, R307 += 1, R271 += 1 };
  s2 -> s2 [0, 65535] { R343 += 1, R307 += 1, R270 += 1, R271 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R343 += 1 };
  s2 -> s4 [9, 13] { R343 += 1, R307 += 1, R271 += 1 };
  s2 -> s1 [14, 31] { R343 += 1, R307 += 1, R271 += 1 };
  s2 -> s4 [32, 32] { R343 += 1, R307 += 1, R271 += 1 };
  s2 -> s1 [33, 65535] { R343 += 1, R307 += 1, R271 += 1 };
  s3 -> s1 [0, 8] { R343 += 1, R307 += 1, R271 += 1 };
  s3 -> s2 [0, 65535] { R343 += 1, R307 += 1, R270 += 1, R271 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R343 += 1, R306 += 1, R307 += 1 };
  s3 -> s4 [9, 13] { R343 += 1, R307 += 1, R271 += 1 };
  s3 -> s1 [14, 31] { R343 += 1, R307 += 1, R271 += 1 };
  s3 -> s4 [32, 32] { R343 += 1, R307 += 1, R271 += 1 };
  s3 -> s1 [33, 65535] { R343 += 1, R307 += 1, R271 += 1 };
  s4 -> s1 [0, 65535] { R343 += 1, R307 += 1, R271 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R343 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R343 += 1, R307 += 1 };
  s7 -> s6 [0, 65535] { R343 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton value1_20 {
  init s0;
  s0 -> s1 [0, 65535] { R345 += 1, R309 += 1, R272 += 1, R273 += 1 };
  s0 -> s2 [0, 65535] { R345 += 1, R308 += 1, R309 += 1 };
  s0 -> s3 [0, 65535] { R345 += 1, R309 += 1, R273 += 1, R6 += 1 };
  s0 -> s0 [0, 65535] { R344 += 1, R345 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R345 += 1 };
  s1 -> s1 [0, 65535] { R345 += 1, R309 += 1, R272 += 1, R273 += 1 };
  s1 -> s3 [0, 65535] { R345 += 1, R309 += 1, R273 += 1, R6 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R345 += 1, R309 += 1, R272 += 1, R273 += 1 };
  s2 -> s2 [0, 65535] { R345 += 1, R308 += 1, R309 += 1 };
  s2 -> s3 [0, 65535] { R345 += 1, R309 += 1, R273 += 1, R6 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R345 += 1, R309 += 1 };
  s3 -> s6 [0, 65535] { R345 += 1 };
  s3 -> s3 [0, 65535] { R345 += 1, R309 += 1, R273 += 1, R6 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R345 += 1, R309 += 1 };
  s5 -> s6 [0, 65535] { R345 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R345 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s0 [91, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 8] { R275 += 1 };
  s0 -> s0 [0, 65535] { R274 += 1, R275 += 1 };
  s0 -> s2 [9, 13] { R275 += 1 };
  s0 -> s1 [14, 31] { R275 += 1 };
  s0 -> s2 [32, 32] { R275 += 1 };
  s0 -> s1 [33, 65535] { R275 += 1 };
  s1 -> s1 [0, 65535] { R275 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R275 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 65535] { R277 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R276 += 1, R277 += 1 };
  s1 -> s1 [0, 65535] { R277 += 1, R7 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 8] { R279 += 1 };
  s0 -> s0 [0, 65535] { R278 += 1, R279 += 1 };
  s0 -> s2 [9, 13] { R279 += 1 };
  s0 -> s1 [14, 31] { R279 += 1 };
  s0 -> s2 [32, 32] { R279 += 1 };
  s0 -> s1 [33, 65535] { R279 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R279 += 1 };
  s2 -> s1 [0, 65535] { R279 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 65535] { R281 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R280 += 1, R281 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R281 += 1, R8 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
};
synchronised {  // Automata constraining P26
automaton P26_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
constraint R2 = R295 && R3 = R309 && R4 = R327 && R14 = 0 && R15 - R294 = -1 && R182 = 0 && R183 = R345 && R282 - R295 = -1 && R283 = R295 && R284 - R295 = -1 && R285 = R295 && R286 = 0 && R287 = 1 && R288 = 0 && R289 = 1 && R290 = 0 && R291 = 1 && R292 = 0 && R293 = 1 && R298 = 1 && R299 = R309 && R300 = 1 && R301 = R309 && R302 = 1 && R303 = R309 && R304 = 1 && R305 = R309 && R306 = 1 && R307 = R309 && R308 = 1 && R310 - R345 = 1 && R311 = R327 && R312 - R345 = 1 && R313 = R327 && R314 - R345 = 1 && R315 = R327 && R316 - R345 = 1 && R317 = R327 && R318 - R345 = 1 && R319 = R327 && R320 - R345 = 1 && R321 = R327 && R322 - R345 = 1 && R323 = R327 && R324 - R345 = 1 && R325 = R327 && R326 - R345 = 1 && R328 = 0 && R329 = R345 && R330 = 0 && R331 = R345 && R332 = 0 && R333 = R345 && R334 = 0 && R335 = R345 && R336 = 0 && R337 = R345 && R338 = 0 && R339 = R345 && R340 = 0 && R341 = R345 && R342 = 0 && R343 = R345 && R344 = 0 && R0 != 0 && R1 != 0 && R12 < 1 && R294 - R295 < 1 && -1 < R294 && 0 < R295 && 0 < R309 && R345 < R327 && -1 < R345 && (R5 != 0 || ((R0 != R267 || R266 - R267 = -1 || R267 < 0) && (R0 = R267 || R0 < 1))) && (R5 != 0 || ((R0 != R269 || R268 - R269 = -1 || R269 < 0) && (R0 = R269 || R0 < 1))) && (R7 != 0 || ((R1 != R275 || R274 - R275 = -1 || R275 < 0) && (R1 = R275 || R1 < 1))) && (R7 != 0 || ((R1 != R277 || R276 - R277 = -1 || R277 < 0) && (R1 = R277 || R1 < 1))) && (R270 != 0 || ((R6 != 0 || ((R0 != R271 || R271 = 1 || R271 < 0) && (R0 = R271 || R271 = 1 || R0 < 1))) && (R6 = 0 || ((R0 != R271 || R271 = 1 || R271 < 0) && (R271 != 1 || -1 < R0) && (R0 = R271 || R271 = 1))))) && (R272 != 0 || ((R6 != 0 || ((R0 != R273 || R273 = 1 || R273 < 0) && (R0 = R273 || R273 = 1 || R0 < 1))) && (R6 = 0 || ((R0 != R273 || R273 = 1 || R273 < 0) && (R273 != 1 || -1 < R0) && (R0 = R273 || R273 = 1))))) && (R278 != 0 || ((R8 != 0 || ((R1 != R279 || R279 = 1 || R279 < 0) && (R1 = R279 || R279 = 1 || R1 < 1))) && (R8 = 0 || ((R1 != R279 || R279 = 1 || R279 < 0) && (R279 != 1 || -1 < R1) && (R1 = R279 || R279 = 1))))) && (R280 != 0 || ((R8 != 0 || ((R1 != R281 || R281 = 1 || R281 < 0) && (R1 = R281 || R281 = 1 || R1 < 1))) && (R8 = 0 || ((R1 != R281 || R281 = 1 || R281 < 0) && (R281 != 1 || -1 < R1) && (R1 = R281 || R281 = 1))))) && (R294 != R296 || R295 = R297 || ((R265 != 0 || R295 - R296 < 1 || R296 < 0) && (R265 = 0 || R295 < R296 || R296 < 0))) && (R5 = 0 || (R0 = R267 && R266 - R267 = -1)) && (R5 = 0 || (R0 = R269 && R268 - R269 = -1)) && (R7 = 0 || (R1 = R275 && R274 - R275 = -1)) && (R7 = 0 || (R1 = R277 && R276 - R277 = -1)) && (R270 = 0 || (R6 = 0 && R0 < 0)) && (R272 = 0 || (R6 = 0 && R0 < 0)) && (R278 = 0 || (R8 = 0 && R1 < 0)) && (R280 = 0 || (R8 = 0 && R1 < 0)) && (R294 = R296 || (R265 = 0 && R294 = R295));
// End of Parikh automata intersection problem
