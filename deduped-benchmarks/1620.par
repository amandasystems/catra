// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R100, R101, R102, R103, R104, R105, R106, R107, R108, R109, R11, R110, R111, R112, R113, R114, R115, R116, R117, R118, R119, R12, R120, R121, R122, R123, R124, R125, R126, R127, R128, R129, R13, R130, R131, R132, R133, R134, R135, R136, R137, R138, R139, R140, R141, R142, R143, R144, R145, R146, R147, R148, R149, R150, R151, R152, R153, R154, R155, R156, R157, R158, R159, R160, R161, R162, R163, R164, R165, R166, R167, R168, R169, R17, R170, R171, R172, R173, R174, R175, R176, R177, R178, R179, R18, R180, R2, R3, R4, R5, R6, R7, R8, R9;
synchronised {  // Automata constraining value1
automaton value1_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 60];
  s0 -> s1 [61, 61];
  s0 -> s0 [62, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 65535];
  accepting s1;
};
automaton value1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton value1_2 {
  init s0;
  s0 -> s1 [0, 60] { R18 += 1 };
  s0 -> s0 [0, 65535] { R17 += 1, R18 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535] { R18 += 1 };
  s1 -> s1 [0, 60] { R18 += 1 };
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535] { R18 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value1_3 {
  init s0;
  s0 -> s1 [0, 64] { R146 += 1 };
  s0 -> s0 [0, 65535] { R145 += 1, R146 += 1 };
  s0 -> s2 [67, 67] { R146 += 1 };
  s0 -> s1 [68, 65535] { R146 += 1 };
  s1 -> s1 [0, 64] { R146 += 1 };
  s1 -> s2 [67, 67] { R146 += 1 };
  s1 -> s1 [68, 65535] { R146 += 1 };
  s2 -> s2 [0, 64] { R146 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [67, 65535] { R146 += 1 };
  accepting s2;
};
automaton value1_4 {
  init s0;
  s0 -> s0 [0, 65535] { R147 += 1, R148 += 1 };
  s0 -> s1 [0, 65535] { R148 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R148 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_5 {
  init s0;
  s0 -> s1 [0, 66] { R150 += 1 };
  s0 -> s2 [0, 65535] { R150 += 1, R13 += 1 };
  s0 -> s0 [0, 65535] { R149 += 1, R150 += 1 };
  s0 -> s3 [67, 67] { R150 += 1 };
  s0 -> s1 [68, 65535] { R150 += 1 };
  s1 -> s1 [0, 66] { R150 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [67, 67] { R150 += 1 };
  s1 -> s1 [68, 65535] { R150 += 1 };
  s2 -> s1 [0, 66] { R150 += 1 };
  s2 -> s2 [0, 65535] { R150 += 1, R13 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [67, 67] { R150 += 1 };
  s2 -> s1 [68, 65535] { R150 += 1 };
  s3 -> s3 [0, 65535] { R150 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value1_6 {
  init s0;
  s0 -> s1 [0, 8] { R152 += 1, R118 += 1 };
  s0 -> s0 [0, 65535] { R151 += 1, R152 += 1 };
  s0 -> s2 [0, 65535] { R152 += 1, R117 += 1, R118 += 1 };
  s0 -> s3 [9, 13] { R152 += 1, R118 += 1 };
  s0 -> s1 [14, 31] { R152 += 1, R118 += 1 };
  s0 -> s3 [32, 32] { R152 += 1, R118 += 1 };
  s0 -> s1 [33, 65535] { R152 += 1, R118 += 1 };
  s1 -> s5 [0, 65535] { R152 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R152 += 1, R118 += 1 };
  s2 -> s1 [0, 8] { R152 += 1, R118 += 1 };
  s2 -> s2 [0, 65535] { R152 += 1, R117 += 1, R118 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R152 += 1, R118 += 1 };
  s2 -> s1 [14, 31] { R152 += 1, R118 += 1 };
  s2 -> s3 [32, 32] { R152 += 1, R118 += 1 };
  s2 -> s1 [33, 65535] { R152 += 1, R118 += 1 };
  s3 -> s1 [0, 65535] { R152 += 1, R118 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R152 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value1_7 {
  init s0;
  s0 -> s1 [0, 65535] { R154 += 1, R119 += 1, R120 += 1 };
  s0 -> s0 [0, 65535] { R153 += 1, R154 += 1 };
  s0 -> s2 [0, 65535] { R154 += 1, R120 += 1, R9 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R154 += 1, R119 += 1, R120 += 1 };
  s1 -> s2 [0, 65535] { R154 += 1, R120 += 1, R9 += 1 };
  s2 -> s3 [0, 65535] { R154 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R154 += 1, R120 += 1, R9 += 1 };
  s3 -> s3 [0, 65535] { R154 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_8 {
  init s0;
  s0 -> s1 [0, 8] { R156 += 1, R122 += 1 };
  s0 -> s2 [0, 65535] { R156 += 1, R121 += 1, R122 += 1 };
  s0 -> s0 [0, 65535] { R155 += 1, R156 += 1 };
  s0 -> s3 [9, 13] { R156 += 1, R122 += 1 };
  s0 -> s1 [14, 31] { R156 += 1, R122 += 1 };
  s0 -> s3 [32, 32] { R156 += 1, R122 += 1 };
  s0 -> s1 [33, 65535] { R156 += 1, R122 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R156 += 1, R122 += 1 };
  s1 -> s5 [0, 65535] { R156 += 1 };
  s2 -> s1 [0, 8] { R156 += 1, R122 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R156 += 1, R121 += 1, R122 += 1 };
  s2 -> s3 [9, 13] { R156 += 1, R122 += 1 };
  s2 -> s1 [14, 31] { R156 += 1, R122 += 1 };
  s2 -> s3 [32, 32] { R156 += 1, R122 += 1 };
  s2 -> s1 [33, 65535] { R156 += 1, R122 += 1 };
  s3 -> s1 [0, 65535] { R156 += 1, R122 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R156 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value1_9 {
  init s0;
  s0 -> s0 [0, 65535] { R157 += 1, R158 += 1 };
  s0 -> s1 [0, 65535] { R158 += 1, R123 += 1, R124 += 1 };
  s0 -> s2 [0, 65535] { R158 += 1, R124 += 1, R10 += 1 };
  s1 -> s1 [0, 65535] { R158 += 1, R123 += 1, R124 += 1 };
  s1 -> s2 [0, 65535] { R158 += 1, R124 += 1, R10 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R158 += 1 };
  s2 -> s2 [0, 65535] { R158 += 1, R124 += 1, R10 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R158 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_10 {
  init s0;
  s0 -> s1 [0, 66] { R160 += 1, R130 += 1 };
  s0 -> s2 [0, 65535] { R160 += 1, R129 += 1, R130 += 1 };
  s0 -> s0 [0, 65535] { R159 += 1, R160 += 1 };
  s0 -> s3 [67, 67] { R160 += 1, R130 += 1 };
  s0 -> s1 [68, 65535] { R160 += 1, R130 += 1 };
  s1 -> s1 [0, 66] { R160 += 1, R130 += 1 };
  s1 -> s3 [67, 67] { R160 += 1, R130 += 1 };
  s1 -> s1 [68, 65535] { R160 += 1, R130 += 1 };
  s2 -> s1 [0, 66] { R160 += 1, R130 += 1 };
  s2 -> s2 [0, 65535] { R160 += 1, R129 += 1, R130 += 1 };
  s2 -> s3 [67, 67] { R160 += 1, R130 += 1 };
  s2 -> s1 [68, 65535] { R160 += 1, R130 += 1 };
  s3 -> s4 [0, 65535] { R160 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R160 += 1, R130 += 1 };
  s4 -> s4 [0, 65535] { R160 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
automaton value1_11 {
  init s0;
  s0 -> s0 [0, 65535] { R161 += 1, R162 += 1 };
  s0 -> s1 [0, 65535] { R162 += 1, R132 += 1, R100 += 1 };
  s0 -> s2 [0, 65535] { R162 += 1, R131 += 1, R132 += 1 };
  s1 -> s4 [0, 65535] { R162 += 1 };
  s1 -> s1 [0, 65535] { R162 += 1, R132 += 1, R100 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R162 += 1, R132 += 1, R100 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R162 += 1, R131 += 1, R132 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R162 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_12 {
  init s0;
  s0 -> s1 [0, 65535] { R164 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R163 += 1, R164 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R164 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_13 {
  init s0;
  s0 -> s0 [0, 65535] { R165 += 1, R166 += 1 };
  s0 -> s1 [0, 65535] { R166 += 1, R125 += 1, R126 += 1 };
  s0 -> s2 [9, 9] { R166 += 1, R126 += 1 };
  s1 -> s1 [0, 65535] { R166 += 1, R125 += 1, R126 += 1 };
  s1 -> s2 [9, 9] { R166 += 1, R126 += 1 };
  s2 -> s2 [0, 65535] { R166 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value1_14 {
  init s0;
  s0 -> s1 [0, 65535] { R168 += 1, R128 += 1, R11 += 1 };
  s0 -> s2 [0, 65535] { R168 += 1, R127 += 1, R128 += 1 };
  s0 -> s0 [0, 65535] { R167 += 1, R168 += 1 };
  s1 -> s1 [0, 65535] { R168 += 1, R128 += 1, R11 += 1 };
  s1 -> s4 [0, 65535] { R168 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R168 += 1, R128 += 1, R11 += 1 };
  s2 -> s2 [0, 65535] { R168 += 1, R127 += 1, R128 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R168 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_15 {
  init s0;
  s0 -> s1 [0, 64] { R170 += 1, R134 += 1 };
  s0 -> s0 [0, 65535] { R169 += 1, R170 += 1 };
  s0 -> s2 [0, 65535] { R170 += 1, R133 += 1, R134 += 1 };
  s0 -> s1 [91, 65535] { R170 += 1, R134 += 1 };
  s1 -> s1 [0, 64] { R170 += 1, R134 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R170 += 1 };
  s1 -> s1 [91, 65535] { R170 += 1, R134 += 1 };
  s2 -> s1 [0, 64] { R170 += 1, R134 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R170 += 1, R133 += 1, R134 += 1 };
  s2 -> s1 [91, 65535] { R170 += 1, R134 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value1_16 {
  init s0;
  s0 -> s1 [0, 65535] { R172 += 1, R136 += 1, R0 += 1 };
  s0 -> s2 [0, 65535] { R172 += 1, R135 += 1, R136 += 1 };
  s0 -> s0 [0, 65535] { R171 += 1, R172 += 1 };
  s1 -> s1 [0, 65535] { R172 += 1, R136 += 1, R0 += 1 };
  s1 -> s4 [0, 65535] { R172 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R172 += 1, R136 += 1, R0 += 1 };
  s2 -> s2 [0, 65535] { R172 += 1, R135 += 1, R136 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R172 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_17 {
  init s0;
  s0 -> s1 [0, 8] { R174 += 1, R138 += 1, R102 += 1 };
  s0 -> s0 [0, 65535] { R173 += 1, R174 += 1 };
  s0 -> s2 [0, 65535] { R174 += 1, R137 += 1, R138 += 1 };
  s0 -> s3 [0, 65535] { R174 += 1, R138 += 1, R101 += 1, R102 += 1 };
  s0 -> s4 [9, 13] { R174 += 1, R138 += 1, R102 += 1 };
  s0 -> s1 [14, 31] { R174 += 1, R138 += 1, R102 += 1 };
  s0 -> s4 [32, 32] { R174 += 1, R138 += 1, R102 += 1 };
  s0 -> s1 [33, 65535] { R174 += 1, R138 += 1, R102 += 1 };
  s1 -> s5 [0, 65535] { R174 += 1 };
  s1 -> s7 [0, 65535] { R174 += 1, R138 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R174 += 1, R138 += 1, R102 += 1 };
  s2 -> s1 [0, 8] { R174 += 1, R138 += 1, R102 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R174 += 1, R137 += 1, R138 += 1 };
  s2 -> s3 [0, 65535] { R174 += 1, R138 += 1, R101 += 1, R102 += 1 };
  s2 -> s4 [9, 13] { R174 += 1, R138 += 1, R102 += 1 };
  s2 -> s1 [14, 31] { R174 += 1, R138 += 1, R102 += 1 };
  s2 -> s4 [32, 32] { R174 += 1, R138 += 1, R102 += 1 };
  s2 -> s1 [33, 65535] { R174 += 1, R138 += 1, R102 += 1 };
  s3 -> s1 [0, 8] { R174 += 1, R138 += 1, R102 += 1 };
  s3 -> s5 [0, 65535] { R174 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R174 += 1, R138 += 1, R101 += 1, R102 += 1 };
  s3 -> s4 [9, 13] { R174 += 1, R138 += 1, R102 += 1 };
  s3 -> s1 [14, 31] { R174 += 1, R138 += 1, R102 += 1 };
  s3 -> s4 [32, 32] { R174 += 1, R138 += 1, R102 += 1 };
  s3 -> s1 [33, 65535] { R174 += 1, R138 += 1, R102 += 1 };
  s4 -> s1 [0, 65535] { R174 += 1, R138 += 1, R102 += 1 };
  s5 -> s5 [0, 65535] { R174 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R174 += 1 };
  s7 -> s7 [0, 65535] { R174 += 1, R138 += 1 };
  s7 -> s6 [0, 65535];
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton value1_18 {
  init s0;
  s0 -> s1 [0, 65535] { R176 += 1, R140 += 1, R104 += 1, R5 += 1 };
  s0 -> s2 [0, 65535] { R176 += 1, R140 += 1, R103 += 1, R104 += 1 };
  s0 -> s0 [0, 65535] { R175 += 1, R176 += 1 };
  s0 -> s3 [0, 65535] { R176 += 1, R139 += 1, R140 += 1 };
  s1 -> s6 [0, 65535] { R176 += 1, R140 += 1 };
  s1 -> s1 [0, 65535] { R176 += 1, R140 += 1, R104 += 1, R5 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R176 += 1 };
  s2 -> s1 [0, 65535] { R176 += 1, R140 += 1, R104 += 1, R5 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R176 += 1, R140 += 1, R103 += 1, R104 += 1 };
  s2 -> s5 [0, 65535] { R176 += 1 };
  s3 -> s1 [0, 65535] { R176 += 1, R140 += 1, R104 += 1, R5 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R176 += 1, R140 += 1, R103 += 1, R104 += 1 };
  s3 -> s3 [0, 65535] { R176 += 1, R139 += 1, R140 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R176 += 1 };
  s6 -> s6 [0, 65535] { R176 += 1, R140 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R176 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value1_19 {
  init s0;
  s0 -> s1 [0, 8] { R178 += 1, R142 += 1, R106 += 1 };
  s0 -> s2 [0, 65535] { R178 += 1, R142 += 1, R105 += 1, R106 += 1 };
  s0 -> s0 [0, 65535] { R177 += 1, R178 += 1 };
  s0 -> s3 [0, 65535] { R178 += 1, R141 += 1, R142 += 1 };
  s0 -> s4 [9, 13] { R178 += 1, R142 += 1, R106 += 1 };
  s0 -> s1 [14, 31] { R178 += 1, R142 += 1, R106 += 1 };
  s0 -> s4 [32, 32] { R178 += 1, R142 += 1, R106 += 1 };
  s0 -> s1 [33, 65535] { R178 += 1, R142 += 1, R106 += 1 };
  s1 -> s7 [0, 65535] { R178 += 1, R142 += 1 };
  s1 -> s6 [0, 65535] { R178 += 1 };
  s1 -> s1 [0, 65535] { R178 += 1, R142 += 1, R106 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 8] { R178 += 1, R142 += 1, R106 += 1 };
  s2 -> s2 [0, 65535] { R178 += 1, R142 += 1, R105 += 1, R106 += 1 };
  s2 -> s6 [0, 65535] { R178 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [9, 13] { R178 += 1, R142 += 1, R106 += 1 };
  s2 -> s1 [14, 31] { R178 += 1, R142 += 1, R106 += 1 };
  s2 -> s4 [32, 32] { R178 += 1, R142 += 1, R106 += 1 };
  s2 -> s1 [33, 65535] { R178 += 1, R142 += 1, R106 += 1 };
  s3 -> s1 [0, 8] { R178 += 1, R142 += 1, R106 += 1 };
  s3 -> s2 [0, 65535] { R178 += 1, R142 += 1, R105 += 1, R106 += 1 };
  s3 -> s3 [0, 65535] { R178 += 1, R141 += 1, R142 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s4 [9, 13] { R178 += 1, R142 += 1, R106 += 1 };
  s3 -> s1 [14, 31] { R178 += 1, R142 += 1, R106 += 1 };
  s3 -> s4 [32, 32] { R178 += 1, R142 += 1, R106 += 1 };
  s3 -> s1 [33, 65535] { R178 += 1, R142 += 1, R106 += 1 };
  s4 -> s1 [0, 65535] { R178 += 1, R142 += 1, R106 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R178 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R178 += 1, R142 += 1 };
  s7 -> s6 [0, 65535] { R178 += 1 };
  s7 -> s5 [0, 65535];
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton value1_20 {
  init s0;
  s0 -> s1 [0, 65535] { R180 += 1, R144 += 1, R107 += 1, R108 += 1 };
  s0 -> s0 [0, 65535] { R179 += 1, R180 += 1 };
  s0 -> s2 [0, 65535] { R180 += 1, R144 += 1, R108 += 1, R6 += 1 };
  s0 -> s3 [0, 65535] { R180 += 1, R143 += 1, R144 += 1 };
  s1 -> s1 [0, 65535] { R180 += 1, R144 += 1, R107 += 1, R108 += 1 };
  s1 -> s2 [0, 65535] { R180 += 1, R144 += 1, R108 += 1, R6 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R180 += 1 };
  s2 -> s2 [0, 65535] { R180 += 1, R144 += 1, R108 += 1, R6 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R180 += 1 };
  s2 -> s6 [0, 65535] { R180 += 1, R144 += 1 };
  s3 -> s1 [0, 65535] { R180 += 1, R144 += 1, R107 += 1, R108 += 1 };
  s3 -> s2 [0, 65535] { R180 += 1, R144 += 1, R108 += 1, R6 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R180 += 1, R143 += 1, R144 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R180 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R180 += 1 };
  s6 -> s6 [0, 65535] { R180 += 1, R144 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s0 [91, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 8] { R110 += 1 };
  s0 -> s0 [0, 65535] { R109 += 1, R110 += 1 };
  s0 -> s2 [9, 13] { R110 += 1 };
  s0 -> s1 [14, 31] { R110 += 1 };
  s0 -> s2 [32, 32] { R110 += 1 };
  s0 -> s1 [33, 65535] { R110 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R110 += 1 };
  s2 -> s1 [0, 65535] { R110 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 65535] { R112 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R111 += 1, R112 += 1 };
  s1 -> s1 [0, 65535] { R112 += 1, R7 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 8] { R114 += 1 };
  s0 -> s0 [0, 65535] { R113 += 1, R114 += 1 };
  s0 -> s2 [9, 13] { R114 += 1 };
  s0 -> s1 [14, 31] { R114 += 1 };
  s0 -> s2 [32, 32] { R114 += 1 };
  s0 -> s1 [33, 65535] { R114 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R114 += 1 };
  s2 -> s1 [0, 65535] { R114 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_6 {
  init s0;
  s0 -> s0 [0, 65535] { R115 += 1, R116 += 1 };
  s0 -> s1 [0, 65535] { R116 += 1, R8 += 1 };
  s1 -> s1 [0, 65535] { R116 += 1, R8 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
};
synchronised {  // Automata constraining P26
automaton P26_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
constraint R2 = R132 && R3 = R144 && R4 = R162 && R17 = 0 && R18 = R180 && R117 - R132 = -1 && R118 = R132 && R119 - R132 = -1 && R120 = R132 && R121 = 0 && R122 = 1 && R123 = 0 && R124 = 1 && R125 = 0 && R126 = 1 && R127 = 0 && R128 = 1 && R129 = 0 && R130 = R132 && R131 = 0 && R133 = 1 && R134 = R144 && R135 = 1 && R136 = R144 && R137 = 1 && R138 = R144 && R139 = 1 && R140 = R144 && R141 = 1 && R142 = R144 && R143 = 1 && R145 - R180 = 1 && R146 = R162 && R147 - R180 = 1 && R148 = R162 && R149 - R180 = 1 && R150 = R162 && R151 - R180 = 1 && R152 = R162 && R153 - R180 = 1 && R154 = R162 && R155 - R180 = 1 && R156 = R162 && R157 - R180 = 1 && R158 = R162 && R159 - R180 = 1 && R160 = R162 && R161 - R180 = 1 && R163 = 0 && R164 = R180 && R165 = 0 && R166 = R180 && R167 = 0 && R168 = R180 && R169 = 0 && R170 = R180 && R171 = 0 && R172 = R180 && R173 = 0 && R174 = R180 && R175 = 0 && R176 = R180 && R177 = 0 && R178 = R180 && R179 = 0 && R0 != 0 && R1 != 0 && R12 < 1 && R13 < 1 && 0 < R132 && 0 < R144 && R180 < R162 && -1 < R180 && (R5 != 0 || ((R0 != R102 || R101 - R102 = -1 || R102 < 0) && (R0 = R102 || R0 < 1))) && (R5 != 0 || ((R0 != R104 || R103 - R104 = -1 || R104 < 0) && (R0 = R104 || R0 < 1))) && (R7 != 0 || ((R1 != R110 || R109 - R110 = -1 || R110 < 0) && (R1 = R110 || R1 < 1))) && (R7 != 0 || ((R1 != R112 || R111 - R112 = -1 || R112 < 0) && (R1 = R112 || R1 < 1))) && (R105 != 0 || ((R6 != 0 || ((R0 != R106 || R106 = 1 || R106 < 0) && (R0 = R106 || R106 = 1 || R0 < 1))) && (R6 = 0 || ((R0 != R106 || R106 = 1 || R106 < 0) && (R106 != 1 || -1 < R0) && (R0 = R106 || R106 = 1))))) && (R107 != 0 || ((R6 != 0 || ((R0 != R108 || R108 = 1 || R108 < 0) && (R0 = R108 || R108 = 1 || R0 < 1))) && (R6 = 0 || ((R0 != R108 || R108 = 1 || R108 < 0) && (R108 != 1 || -1 < R0) && (R0 = R108 || R108 = 1))))) && (R113 != 0 || ((R8 != 0 || ((R1 != R114 || R114 = 1 || R114 < 0) && (R1 = R114 || R114 = 1 || R1 < 1))) && (R8 = 0 || ((R1 != R114 || R114 = 1 || R114 < 0) && (R114 != 1 || -1 < R1) && (R1 = R114 || R114 = 1))))) && (R115 != 0 || ((R8 != 0 || ((R1 != R116 || R116 = 1 || R116 < 0) && (R1 = R116 || R116 = 1 || R1 < 1))) && (R8 = 0 || ((R1 != R116 || R116 = 1 || R116 < 0) && (R116 != 1 || -1 < R1) && (R1 = R116 || R116 = 1))))) && (R5 = 0 || (R0 = R102 && R101 - R102 = -1)) && (R5 = 0 || (R0 = R104 && R103 - R104 = -1)) && (R7 = 0 || (R1 = R110 && R109 - R110 = -1)) && (R7 = 0 || (R1 = R112 && R111 - R112 = -1)) && (R105 = 0 || (R6 = 0 && R0 < 0)) && (R107 = 0 || (R6 = 0 && R0 < 0)) && (R113 = 0 || (R8 = 0 && R1 < 0)) && (R115 = 0 || (R8 = 0 && R1 < 0));
// End of Parikh automata intersection problem
