// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R2, R3, R37, R38, R39, R40, R41, R42, R43, R44, R45, R46, R5, R57, R58, R59, R6, R60, R61, R62, R63, R64, R65, R66;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [68, 68];
  s0 -> s0 [69, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [68, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R0 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R3 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 67] { R6 += 1 };
  s0 -> s0 [0, 65535] { R5 += 1, R6 += 1 };
  s0 -> s2 [68, 68];
  s0 -> s1 [69, 65535] { R6 += 1 };
  s1 -> s1 [0, 67] { R6 += 1 };
  s1 -> s2 [68, 68];
  s1 -> s1 [69, 65535] { R6 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R40 += 1 };
  s0 -> s0 [0, 65535] { R39 += 1, R40 += 1 };
  s0 -> s2 [9, 13] { R40 += 1 };
  s0 -> s1 [14, 31] { R40 += 1 };
  s0 -> s2 [32, 32] { R40 += 1 };
  s0 -> s1 [33, 65535] { R40 += 1 };
  s1 -> s1 [0, 65535] { R40 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R40 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s0 [0, 65535] { R41 += 1, R42 += 1 };
  s0 -> s1 [0, 65535] { R42 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R42 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R44 += 1 };
  s0 -> s0 [0, 65535] { R43 += 1, R44 += 1 };
  s0 -> s2 [9, 13] { R44 += 1 };
  s0 -> s1 [14, 31] { R44 += 1 };
  s0 -> s2 [32, 32] { R44 += 1 };
  s0 -> s1 [33, 65535] { R44 += 1 };
  s1 -> s1 [0, 65535] { R44 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R44 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s0 [0, 65535] { R45 += 1, R46 += 1 };
  s0 -> s1 [0, 65535] { R46 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R46 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 67] { R58 += 1 };
  s0 -> s0 [0, 65535] { R57 += 1, R58 += 1 };
  s0 -> s1 [69, 65535] { R58 += 1 };
  s1 -> s1 [0, 67] { R58 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [69, 65535] { R58 += 1 };
  accepting s0, s1;
};
automaton value2_9 {
  init s0;
  s0 -> s0 [0, 65535] { R59 += 1, R60 += 1 };
  s0 -> s1 [0, 65535] { R60 += 1, R37 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R60 += 1, R37 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 68] { R62 += 1 };
  s0 -> s0 [0, 65535] { R61 += 1, R62 += 1 };
  s0 -> s1 [78, 65535] { R62 += 1 };
  s1 -> s1 [0, 68] { R62 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [78, 65535] { R62 += 1 };
  accepting s0, s1;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 65535] { R64 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R63 += 1, R64 += 1 };
  s1 -> s1 [0, 65535] { R64 += 1, R38 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 67] { R66 += 1 };
  s0 -> s0 [0, 65535] { R65 += 1, R66 += 1 };
  s0 -> s2 [68, 68] { R66 += 1 };
  s0 -> s3 [68, 68] { R66 += 1 };
  s0 -> s4 [78, 78] { R66 += 1 };
  s0 -> s1 [79, 65535] { R66 += 1 };
  s1 -> s1 [0, 67] { R66 += 1 };
  s1 -> s2 [68, 68] { R66 += 1 };
  s1 -> s3 [68, 68] { R66 += 1 };
  s1 -> s4 [78, 78] { R66 += 1 };
  s1 -> s1 [79, 65535] { R66 += 1 };
  s2 -> s2 [0, 68] { R66 += 1 };
  s2 -> s5 [78, 78] { R66 += 1 };
  s2 -> s2 [79, 65535] { R66 += 1 };
  s4 -> s4 [0, 67] { R66 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s5 [68, 68] { R66 += 1 };
  s4 -> s6 [68, 68] { R66 += 1 };
  s4 -> s4 [78, 65535] { R66 += 1 };
  s5 -> s5 [0, 68] { R66 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s5 [78, 65535] { R66 += 1 };
  s6 -> s6 [0, 65535];
  accepting s4, s5, s6;
};
};
synchronised {  // Automata constraining P32
automaton P32_0 {
  init s0;
  s0 -> s1 [100, 100];
  accepting s1;
};
};
constraint R0 = R42 && R5 = 0 && R6 - R66 = -1 && R39 - R42 = -1 && R40 = R42 && R41 - R42 = -1 && R43 = 0 && R44 = 1 && R45 = 0 && R46 = 1 && R65 = 0 && R3 < 1 && R66 - R42 < 1 && 0 < R42 && -1 < R66 && (R42 != R58 || R57 = R66 || ((R37 != 0 || R58 - R66 < 1 || R58 < 1) && (R37 = 0 || R58 < R66 || R58 < 1))) && (R42 != R60 || R59 = R66 || ((R37 != 0 || R60 - R66 < 1 || R60 < 1) && (R37 = 0 || R60 < R66 || R60 < 1))) && (R42 != R62 || R61 = R66 || ((R37 != 0 || R62 - R66 < 1 || R62 < 1) && (R37 = 0 || R62 < R66 || R62 < 1))) && (R63 != 0 || R64 = R66 || (R38 = 0 && R66 = 0)) && (R42 = R58 || (R37 = 0 && R42 = R66)) && (R42 = R60 || (R37 = 0 && R42 = R66)) && (R42 = R62 || (R37 = 0 && R42 = R66)) && (R63 = 0 || (R38 = 0 && R66 = 0));
// End of Parikh automata intersection problem
