// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R12, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R3890, R3891, R3892, R3893, R3894, R3895, R4, R40, R42, R43, R46, R47, R48, R5166, R5167, R5168, R5169, R52, R53, R5592, R5593, R5594, R5595, R5596, R5597, R56, R57, R5702, R5703, R5704, R5705, R5706, R5707, R5708, R5709, R5710, R5711, R5712, R5713, R5714, R5715, R5716, R5717, R5718, R5719, R5720, R5721, R5722, R5723, R5724, R5725, R5726, R5727, R5728, R5729, R5730, R5731, R5732, R5733, R5734, R5735, R5736, R5737, R5738, R5739, R5740, R5741, R5742, R5743, R5744, R5745, R5746, R5747, R5748, R5749, R5750, R5751, R5752, R5753, R5754, R5755, R5756, R5757, R5758, R5759, R5760, R5761, R5762, R5763, R5764, R5765, R5766, R5767, R5768, R5769, R5770, R5771, R5772, R5773, R5774, R5775, R5776, R5777, R5778, R5779, R5780, R5781, R5782, R5783, R5784, R5785, R5786, R5787, R5788, R5789, R5790, R5791, R5792, R5793, R5794, R5795, R5796, R5797, R5798, R5799, R58, R5800, R5801, R5802, R5803, R5804, R5805, R62, R63, R66, R67, R68, R69, R70, R71, R72, R73, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 72];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [73, 73];
  s0 -> s1 [74, 65535];
  s1 -> s1 [0, 72];
  s1 -> s2 [73, 73];
  s1 -> s1 [74, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R21 += 1 };
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s1 [0, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R5727 += 1, R19 += 1 };
  s0 -> s0 [0, 65535] { R5726 += 1, R5727 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R5727 += 1, R19 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 72] { R5729 += 1 };
  s0 -> s0 [0, 65535] { R5728 += 1, R5729 += 1 };
  s0 -> s2 [73, 73] { R5729 += 1 };
  s0 -> s3 [73, 73] { R5729 += 1 };
  s0 -> s1 [78, 65535] { R5729 += 1 };
  s1 -> s1 [0, 72] { R5729 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R5729 += 1 };
  s1 -> s3 [73, 73] { R5729 += 1 };
  s1 -> s1 [78, 65535] { R5729 += 1 };
  s2 -> s2 [0, 73] { R5729 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [78, 65535] { R5729 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 72] { R5731 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R5730 += 1, R5731 += 1 };
  s0 -> s2 [73, 73] { R5731 += 1, R38 += 1 };
  s0 -> s3 [73, 73] { R5731 += 1, R38 += 1 };
  s0 -> s1 [74, 65535] { R5731 += 1, R38 += 1 };
  s1 -> s1 [0, 72] { R5731 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R5731 += 1, R38 += 1 };
  s1 -> s3 [73, 73] { R5731 += 1, R38 += 1 };
  s1 -> s1 [74, 65535] { R5731 += 1, R38 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R5731 += 1, R38 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 72] { R5733 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R5732 += 1, R5733 += 1 };
  s0 -> s2 [73, 73] { R5733 += 1, R40 += 1 };
  s0 -> s3 [73, 73] { R5733 += 1, R40 += 1 };
  s0 -> s1 [74, 65535] { R5733 += 1, R40 += 1 };
  s1 -> s1 [0, 72] { R5733 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R5733 += 1, R40 += 1 };
  s1 -> s3 [73, 73] { R5733 += 1, R40 += 1 };
  s1 -> s1 [74, 65535] { R5733 += 1, R40 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R5733 += 1, R40 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 72] { R5735 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R5734 += 1, R5735 += 1 };
  s0 -> s2 [73, 73] { R5735 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [73, 73] { R5735 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [74, 65535] { R5735 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 72] { R5735 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R5735 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [73, 73] { R5735 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [74, 65535] { R5735 += 1, R42 += 1, R43 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R5735 += 1, R42 += 1, R43 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 72] { R5737 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R5736 += 1, R5737 += 1 };
  s0 -> s2 [73, 73] { R5737 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [73, 73] { R5737 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [74, 65535] { R5737 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 72] { R5737 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R5737 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [73, 73] { R5737 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [74, 65535] { R5737 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R5737 += 1, R46 += 1, R47 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 72] { R5739 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R5738 += 1, R5739 += 1 };
  s0 -> s2 [73, 73] { R5739 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [73, 73] { R5739 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [74, 65535] { R5739 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 72] { R5739 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R5739 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [73, 73] { R5739 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [74, 65535] { R5739 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535] { R5739 += 1, R52 += 1, R53 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 72] { R5741 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R5740 += 1, R5741 += 1 };
  s0 -> s2 [73, 73] { R5741 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [73, 73] { R5741 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [74, 65535] { R5741 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 72] { R5741 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R5741 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [73, 73] { R5741 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [74, 65535] { R5741 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R5741 += 1, R56 += 1, R57 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 72] { R5743 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R5742 += 1, R5743 += 1 };
  s0 -> s2 [73, 73] { R5743 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [73, 73] { R5743 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [74, 65535] { R5743 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 72] { R5743 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R5743 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [73, 73] { R5743 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [74, 65535] { R5743 += 1, R62 += 1, R63 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R5743 += 1, R62 += 1, R63 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 72] { R5763 += 1 };
  s0 -> s0 [0, 65535] { R5762 += 1, R5763 += 1 };
  s0 -> s2 [73, 73] { R5763 += 1 };
  s0 -> s1 [74, 65535] { R5763 += 1 };
  s1 -> s1 [0, 72] { R5763 += 1 };
  s1 -> s2 [73, 73] { R5763 += 1 };
  s1 -> s1 [74, 65535] { R5763 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R5763 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R5765 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R5764 += 1, R5765 += 1 };
  s1 -> s1 [0, 65535] { R5765 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 72] { R5767 += 1 };
  s0 -> s0 [0, 65535] { R5766 += 1, R5767 += 1 };
  s0 -> s2 [0, 65535] { R5767 += 1, R8 += 1 };
  s0 -> s3 [73, 73] { R5767 += 1 };
  s0 -> s1 [74, 65535] { R5767 += 1 };
  s1 -> s1 [0, 72] { R5767 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [73, 73] { R5767 += 1 };
  s1 -> s1 [74, 65535] { R5767 += 1 };
  s2 -> s1 [0, 72] { R5767 += 1 };
  s2 -> s2 [0, 65535] { R5767 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [73, 73] { R5767 += 1 };
  s2 -> s1 [74, 65535] { R5767 += 1 };
  s3 -> s3 [0, 65535] { R5767 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 72] { R5769 += 1, R5707 += 1 };
  s0 -> s0 [0, 65535] { R5768 += 1, R5769 += 1 };
  s0 -> s2 [0, 65535] { R5769 += 1, R5706 += 1, R5707 += 1 };
  s0 -> s1 [74, 65535] { R5769 += 1, R5707 += 1 };
  s1 -> s1 [0, 72] { R5769 += 1, R5707 += 1 };
  s1 -> s1 [0, 65535] { R5769 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [74, 65535] { R5769 += 1, R5707 += 1 };
  s2 -> s1 [0, 72] { R5769 += 1, R5707 += 1 };
  s2 -> s2 [0, 65535] { R5769 += 1, R5706 += 1, R5707 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [74, 65535] { R5769 += 1, R5707 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R5771 += 1, R5708 += 1, R5709 += 1 };
  s0 -> s0 [0, 65535] { R5770 += 1, R5771 += 1 };
  s0 -> s2 [0, 65535] { R5771 += 1, R5709 += 1, R17 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R5771 += 1, R5708 += 1, R5709 += 1 };
  s1 -> s2 [0, 65535] { R5771 += 1, R5709 += 1, R17 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R5771 += 1 };
  s2 -> s2 [0, 65535] { R5771 += 1, R5709 += 1, R17 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R5771 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 73] { R5773 += 1, R5711 += 1 };
  s0 -> s0 [0, 65535] { R5772 += 1, R5773 += 1 };
  s0 -> s2 [0, 65535] { R5773 += 1, R5710 += 1, R5711 += 1 };
  s0 -> s1 [77, 65535] { R5773 += 1, R5711 += 1 };
  s1 -> s1 [0, 73] { R5773 += 1, R5711 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R5773 += 1 };
  s1 -> s1 [77, 65535] { R5773 += 1, R5711 += 1 };
  s2 -> s1 [0, 73] { R5773 += 1, R5711 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R5773 += 1, R5710 += 1, R5711 += 1 };
  s2 -> s1 [77, 65535] { R5773 += 1, R5711 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s0 [0, 65535] { R5774 += 1, R5775 += 1 };
  s0 -> s1 [0, 65535] { R5775 += 1, R5713 += 1, R67 += 1 };
  s0 -> s2 [0, 65535] { R5775 += 1, R5712 += 1, R5713 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R5775 += 1 };
  s1 -> s1 [0, 65535] { R5775 += 1, R5713 += 1, R67 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R5775 += 1, R5713 += 1, R67 += 1 };
  s2 -> s2 [0, 65535] { R5775 += 1, R5712 += 1, R5713 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R5775 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 76] { R5777 += 1, R5715 += 1 };
  s0 -> s2 [0, 65535] { R5777 += 1, R5715 += 1, R69 += 1 };
  s0 -> s0 [0, 65535] { R5776 += 1, R5777 += 1 };
  s0 -> s3 [0, 65535] { R5777 += 1, R5714 += 1, R5715 += 1 };
  s0 -> s1 [78, 65535] { R5777 += 1, R5715 += 1 };
  s1 -> s1 [0, 76] { R5777 += 1, R5715 += 1 };
  s1 -> s1 [0, 65535] { R5777 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [78, 65535] { R5777 += 1, R5715 += 1 };
  s2 -> s1 [0, 76] { R5777 += 1, R5715 += 1 };
  s2 -> s5 [0, 65535] { R5777 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R5777 += 1, R5715 += 1, R69 += 1 };
  s2 -> s1 [78, 65535] { R5777 += 1, R5715 += 1 };
  s3 -> s1 [0, 76] { R5777 += 1, R5715 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R5777 += 1, R5715 += 1, R69 += 1 };
  s3 -> s3 [0, 65535] { R5777 += 1, R5714 += 1, R5715 += 1 };
  s3 -> s1 [78, 65535] { R5777 += 1, R5715 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R5777 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 76] { R5779 += 1, R5717 += 1, R73 += 1 };
  s0 -> s0 [0, 65535] { R5778 += 1, R5779 += 1 };
  s0 -> s2 [0, 65535] { R5779 += 1, R5717 += 1, R72 += 1, R73 += 1 };
  s0 -> s3 [0, 65535] { R5779 += 1, R5716 += 1, R5717 += 1 };
  s0 -> s1 [78, 65535] { R5779 += 1, R5717 += 1, R73 += 1 };
  s1 -> s1 [0, 76] { R5779 += 1, R5717 += 1, R73 += 1 };
  s1 -> s5 [0, 65535] { R5779 += 1 };
  s1 -> s1 [0, 65535] { R5779 += 1, R5717 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [78, 65535] { R5779 += 1, R5717 += 1, R73 += 1 };
  s2 -> s1 [0, 76] { R5779 += 1, R5717 += 1, R73 += 1 };
  s2 -> s5 [0, 65535] { R5779 += 1 };
  s2 -> s2 [0, 65535] { R5779 += 1, R5717 += 1, R72 += 1, R73 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [78, 65535] { R5779 += 1, R5717 += 1, R73 += 1 };
  s3 -> s1 [0, 76] { R5779 += 1, R5717 += 1, R73 += 1 };
  s3 -> s2 [0, 65535] { R5779 += 1, R5717 += 1, R72 += 1, R73 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R5779 += 1, R5716 += 1, R5717 += 1 };
  s3 -> s1 [78, 65535] { R5779 += 1, R5717 += 1, R73 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R5779 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s0 [0, 65535] { R5780 += 1, R5781 += 1 };
  s0 -> s1 [0, 65535] { R5781 += 1, R5719 += 1, R3894 += 1, R3895 += 1 };
  s0 -> s2 [0, 65535] { R5781 += 1, R5719 += 1 };
  s0 -> s3 [0, 65535] { R5781 += 1, R5718 += 1, R5719 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R5781 += 1 };
  s1 -> s1 [0, 65535] { R5781 += 1, R5719 += 1, R3894 += 1, R3895 += 1 };
  s1 -> s2 [0, 65535] { R5781 += 1, R5719 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R5781 += 1 };
  s2 -> s2 [0, 65535] { R5781 += 1, R5719 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R5781 += 1, R5719 += 1, R3894 += 1, R3895 += 1 };
  s3 -> s2 [0, 65535] { R5781 += 1, R5719 += 1 };
  s3 -> s3 [0, 65535] { R5781 += 1, R5718 += 1, R5719 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R5781 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 77] { R5783 += 1, R5721 += 1, R5169 += 1 };
  s0 -> s2 [0, 65535] { R5783 += 1, R5720 += 1, R5721 += 1 };
  s0 -> s0 [0, 65535] { R5782 += 1, R5783 += 1 };
  s0 -> s3 [84, 84] { R5783 += 1, R5721 += 1, R5169 += 1 };
  s0 -> s1 [85, 65535] { R5783 += 1, R5721 += 1, R5169 += 1 };
  s1 -> s1 [0, 77] { R5783 += 1, R5721 += 1, R5169 += 1 };
  s1 -> s3 [84, 84] { R5783 += 1, R5721 += 1, R5169 += 1 };
  s1 -> s1 [85, 65535] { R5783 += 1, R5721 += 1, R5169 += 1 };
  s2 -> s1 [0, 77] { R5783 += 1, R5721 += 1, R5169 += 1 };
  s2 -> s2 [0, 65535] { R5783 += 1, R5720 += 1, R5721 += 1 };
  s2 -> s3 [84, 84] { R5783 += 1, R5721 += 1, R5169 += 1 };
  s2 -> s1 [85, 65535] { R5783 += 1, R5721 += 1, R5169 += 1 };
  s3 -> s3 [0, 77] { R5783 += 1, R5721 += 1, R5169 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R5783 += 1 };
  s3 -> s3 [0, 65535] { R5783 += 1, R5721 += 1 };
  s3 -> s3 [84, 65535] { R5783 += 1, R5721 += 1, R5169 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R5783 += 1 };
  accepting s3, s4, s5;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R5785 += 1, R5723 += 1, R5596 += 1, R5597 += 1 };
  s0 -> s2 [0, 65535] { R5785 += 1, R5722 += 1, R5723 += 1 };
  s0 -> s0 [0, 65535] { R5784 += 1, R5785 += 1 };
  s0 -> s3 [0, 65535] { R5785 += 1, R5723 += 1 };
  s1 -> s1 [0, 65535] { R5785 += 1, R5723 += 1, R5596 += 1, R5597 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R5785 += 1 };
  s1 -> s3 [0, 65535] { R5785 += 1, R5723 += 1 };
  s2 -> s1 [0, 65535] { R5785 += 1, R5723 += 1, R5596 += 1, R5597 += 1 };
  s2 -> s2 [0, 65535] { R5785 += 1, R5722 += 1, R5723 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R5785 += 1, R5723 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R5785 += 1 };
  s3 -> s3 [0, 65535] { R5785 += 1, R5723 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R5785 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 76] { R5787 += 1, R5725 += 1, R5705 += 1 };
  s0 -> s1 [0, 65535] { R5787 += 1, R5725 += 1 };
  s0 -> s0 [0, 65535] { R5786 += 1, R5787 += 1 };
  s0 -> s2 [0, 65535] { R5787 += 1, R5724 += 1, R5725 += 1 };
  s0 -> s3 [77, 77] { R5787 += 1, R5725 += 1, R5705 += 1 };
  s0 -> s4 [77, 77] { R5787 += 1, R5725 += 1, R5705 += 1 };
  s0 -> s1 [85, 65535] { R5787 += 1, R5725 += 1, R5705 += 1 };
  s1 -> s1 [0, 76] { R5787 += 1, R5725 += 1, R5705 += 1 };
  s1 -> s5 [0, 65535] { R5787 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R5787 += 1, R5725 += 1 };
  s1 -> s3 [77, 77] { R5787 += 1, R5725 += 1, R5705 += 1 };
  s1 -> s4 [77, 77] { R5787 += 1, R5725 += 1, R5705 += 1 };
  s1 -> s1 [85, 65535] { R5787 += 1, R5725 += 1, R5705 += 1 };
  s2 -> s1 [0, 76] { R5787 += 1, R5725 += 1, R5705 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s1 [0, 65535] { R5787 += 1, R5725 += 1 };
  s2 -> s2 [0, 65535] { R5787 += 1, R5724 += 1, R5725 += 1 };
  s2 -> s3 [77, 77] { R5787 += 1, R5725 += 1, R5705 += 1 };
  s2 -> s4 [77, 77] { R5787 += 1, R5725 += 1, R5705 += 1 };
  s2 -> s1 [85, 65535] { R5787 += 1, R5725 += 1, R5705 += 1 };
  s3 -> s5 [0, 65535] { R5787 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R5787 += 1, R5725 += 1 };
  s4 -> s4 [0, 77] { R5787 += 1, R5725 += 1, R5705 += 1 };
  s4 -> s5 [0, 65535] { R5787 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R5787 += 1, R5725 += 1 };
  s4 -> s4 [85, 65535] { R5787 += 1, R5725 += 1, R5705 += 1 };
  s5 -> s5 [0, 65535] { R5787 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R5789 += 1, R5745 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R5788 += 1, R5789 += 1 };
  s0 -> s2 [0, 65535] { R5789 += 1, R5744 += 1, R5745 += 1 };
  s1 -> s4 [0, 65535] { R5789 += 1 };
  s1 -> s1 [0, 65535] { R5789 += 1, R5745 += 1, R18 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R5789 += 1, R5745 += 1, R18 += 1 };
  s2 -> s2 [0, 65535] { R5789 += 1, R5744 += 1, R5745 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R5789 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 72] { R5791 += 1, R5747 += 1 };
  s0 -> s0 [0, 65535] { R5790 += 1, R5791 += 1 };
  s0 -> s2 [0, 65535] { R5791 += 1, R5746 += 1, R5747 += 1 };
  s0 -> s3 [73, 73] { R5791 += 1, R5747 += 1 };
  s0 -> s4 [73, 73] { R5791 += 1, R5747 += 1 };
  s0 -> s5 [77, 77] { R5791 += 1, R5747 += 1 };
  s0 -> s1 [78, 65535] { R5791 += 1, R5747 += 1 };
  s1 -> s1 [0, 72] { R5791 += 1, R5747 += 1 };
  s1 -> s3 [73, 73] { R5791 += 1, R5747 += 1 };
  s1 -> s4 [73, 73] { R5791 += 1, R5747 += 1 };
  s1 -> s5 [77, 77] { R5791 += 1, R5747 += 1 };
  s1 -> s1 [78, 65535] { R5791 += 1, R5747 += 1 };
  s2 -> s1 [0, 72] { R5791 += 1, R5747 += 1 };
  s2 -> s2 [0, 65535] { R5791 += 1, R5746 += 1, R5747 += 1 };
  s2 -> s3 [73, 73] { R5791 += 1, R5747 += 1 };
  s2 -> s4 [73, 73] { R5791 += 1, R5747 += 1 };
  s2 -> s5 [77, 77] { R5791 += 1, R5747 += 1 };
  s2 -> s1 [78, 65535] { R5791 += 1, R5747 += 1 };
  s3 -> s3 [0, 73] { R5791 += 1, R5747 += 1 };
  s3 -> s7 [77, 77] { R5791 += 1, R5747 += 1 };
  s3 -> s3 [78, 65535] { R5791 += 1, R5747 += 1 };
  s5 -> s5 [0, 72] { R5791 += 1, R5747 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R5791 += 1 };
  s5 -> s7 [73, 73] { R5791 += 1, R5747 += 1 };
  s5 -> s8 [73, 73] { R5791 += 1, R5747 += 1 };
  s5 -> s5 [77, 65535] { R5791 += 1, R5747 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 73] { R5791 += 1, R5747 += 1 };
  s7 -> s7 [0, 65535] { R5791 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [77, 65535] { R5791 += 1, R5747 += 1 };
  s8 -> s8 [0, 65535] { R5791 += 1 };
  s8 -> s6 [0, 65535];
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 72] { R5793 += 1, R5749 += 1, R66 += 1 };
  s0 -> s2 [0, 65535] { R5793 += 1, R5748 += 1, R5749 += 1 };
  s0 -> s0 [0, 65535] { R5792 += 1, R5793 += 1 };
  s0 -> s3 [73, 73] { R5793 += 1, R5749 += 1, R66 += 1 };
  s0 -> s4 [73, 73] { R5793 += 1, R5749 += 1, R66 += 1 };
  s0 -> s1 [74, 65535] { R5793 += 1, R5749 += 1, R66 += 1 };
  s1 -> s1 [0, 72] { R5793 += 1, R5749 += 1, R66 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R5793 += 1 };
  s1 -> s3 [73, 73] { R5793 += 1, R5749 += 1, R66 += 1 };
  s1 -> s4 [73, 73] { R5793 += 1, R5749 += 1, R66 += 1 };
  s1 -> s1 [74, 65535] { R5793 += 1, R5749 += 1, R66 += 1 };
  s2 -> s1 [0, 72] { R5793 += 1, R5749 += 1, R66 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R5793 += 1, R5748 += 1, R5749 += 1 };
  s2 -> s3 [73, 73] { R5793 += 1, R5749 += 1, R66 += 1 };
  s2 -> s4 [73, 73] { R5793 += 1, R5749 += 1, R66 += 1 };
  s2 -> s1 [74, 65535] { R5793 += 1, R5749 += 1, R66 += 1 };
  s3 -> s3 [0, 65535] { R5793 += 1, R5749 += 1, R66 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R5793 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R5793 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R5793 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 72] { R5795 += 1, R5751 += 1, R68 += 1 };
  s0 -> s2 [0, 65535] { R5795 += 1, R5750 += 1, R5751 += 1 };
  s0 -> s0 [0, 65535] { R5794 += 1, R5795 += 1 };
  s0 -> s3 [73, 73] { R5795 += 1, R5751 += 1, R68 += 1 };
  s0 -> s4 [73, 73] { R5795 += 1, R5751 += 1, R68 += 1 };
  s0 -> s1 [74, 65535] { R5795 += 1, R5751 += 1, R68 += 1 };
  s1 -> s1 [0, 72] { R5795 += 1, R5751 += 1, R68 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R5795 += 1 };
  s1 -> s3 [73, 73] { R5795 += 1, R5751 += 1, R68 += 1 };
  s1 -> s4 [73, 73] { R5795 += 1, R5751 += 1, R68 += 1 };
  s1 -> s1 [74, 65535] { R5795 += 1, R5751 += 1, R68 += 1 };
  s2 -> s1 [0, 72] { R5795 += 1, R5751 += 1, R68 += 1 };
  s2 -> s2 [0, 65535] { R5795 += 1, R5750 += 1, R5751 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R5795 += 1, R5751 += 1, R68 += 1 };
  s2 -> s4 [73, 73] { R5795 += 1, R5751 += 1, R68 += 1 };
  s2 -> s1 [74, 65535] { R5795 += 1, R5751 += 1, R68 += 1 };
  s3 -> s3 [0, 65535] { R5795 += 1, R5751 += 1, R68 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R5795 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R5795 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R5795 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 72] { R5797 += 1, R5753 += 1, R70 += 1, R71 += 1 };
  s0 -> s2 [0, 65535] { R5797 += 1, R5752 += 1, R5753 += 1 };
  s0 -> s0 [0, 65535] { R5796 += 1, R5797 += 1 };
  s0 -> s3 [73, 73] { R5797 += 1, R5753 += 1, R70 += 1, R71 += 1 };
  s0 -> s4 [73, 73] { R5797 += 1, R5753 += 1, R70 += 1, R71 += 1 };
  s0 -> s1 [74, 65535] { R5797 += 1, R5753 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 72] { R5797 += 1, R5753 += 1, R70 += 1, R71 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R5797 += 1 };
  s1 -> s3 [73, 73] { R5797 += 1, R5753 += 1, R70 += 1, R71 += 1 };
  s1 -> s4 [73, 73] { R5797 += 1, R5753 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [74, 65535] { R5797 += 1, R5753 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [0, 72] { R5797 += 1, R5753 += 1, R70 += 1, R71 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R5797 += 1, R5752 += 1, R5753 += 1 };
  s2 -> s3 [73, 73] { R5797 += 1, R5753 += 1, R70 += 1, R71 += 1 };
  s2 -> s4 [73, 73] { R5797 += 1, R5753 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [74, 65535] { R5797 += 1, R5753 += 1, R70 += 1, R71 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R5797 += 1 };
  s3 -> s3 [0, 65535] { R5797 += 1, R5753 += 1, R70 += 1, R71 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R5797 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R5797 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 72] { R5799 += 1, R5755 += 1, R3890 += 1, R3891 += 1 };
  s0 -> s2 [0, 72] { R5799 += 1, R5755 += 1, R3891 += 1, R3892 += 1 };
  s0 -> s0 [0, 65535] { R5798 += 1, R5799 += 1 };
  s0 -> s3 [0, 65535] { R5799 += 1, R5754 += 1, R5755 += 1 };
  s0 -> s4 [73, 73] { R5799 += 1, R5755 += 1, R3890 += 1, R3891 += 1 };
  s0 -> s5 [73, 73] { R5799 += 1, R5755 += 1, R3891 += 1, R3892 += 1 };
  s0 -> s6 [73, 73] { R5799 += 1, R5755 += 1, R3891 += 1, R3892 += 1 };
  s0 -> s7 [73, 73] { R5799 += 1, R5755 += 1, R3890 += 1, R3891 += 1 };
  s0 -> s1 [74, 65535] { R5799 += 1, R5755 += 1, R3890 += 1, R3891 += 1 };
  s0 -> s2 [74, 65535] { R5799 += 1, R5755 += 1, R3891 += 1, R3892 += 1 };
  s1 -> s1 [0, 72] { R5799 += 1, R5755 += 1, R3890 += 1, R3891 += 1 };
  s1 -> s2 [0, 72] { R5799 += 1, R5755 += 1, R3891 += 1, R3892 += 1 };
  s1 -> s4 [73, 73] { R5799 += 1, R5755 += 1, R3890 += 1, R3891 += 1 };
  s1 -> s5 [73, 73] { R5799 += 1, R5755 += 1, R3891 += 1, R3892 += 1 };
  s1 -> s6 [73, 73] { R5799 += 1, R5755 += 1, R3891 += 1, R3892 += 1 };
  s1 -> s7 [73, 73] { R5799 += 1, R5755 += 1, R3890 += 1, R3891 += 1 };
  s1 -> s1 [74, 65535] { R5799 += 1, R5755 += 1, R3890 += 1, R3891 += 1 };
  s1 -> s2 [74, 65535] { R5799 += 1, R5755 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s2 [0, 72] { R5799 += 1, R5755 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s9 [0, 65535];
  s2 -> s2 [0, 65535] { R5799 += 1 };
  s2 -> s5 [73, 73] { R5799 += 1, R5755 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s6 [73, 73] { R5799 += 1, R5755 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s2 [74, 65535] { R5799 += 1, R5755 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s1 [0, 72] { R5799 += 1, R5755 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s2 [0, 72] { R5799 += 1, R5755 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s3 [0, 65535] { R5799 += 1, R5754 += 1, R5755 += 1 };
  s3 -> s4 [73, 73] { R5799 += 1, R5755 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s5 [73, 73] { R5799 += 1, R5755 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s6 [73, 73] { R5799 += 1, R5755 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s7 [73, 73] { R5799 += 1, R5755 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s1 [74, 65535] { R5799 += 1, R5755 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s2 [74, 65535] { R5799 += 1, R5755 += 1, R3891 += 1, R3892 += 1 };
  s4 -> s4 [0, 65535] { R5799 += 1, R5755 += 1, R3890 += 1, R3891 += 1 };
  s4 -> s6 [0, 65535] { R5799 += 1, R5755 += 1, R3891 += 1, R3892 += 1 };
  s5 -> s9 [0, 65535];
  s5 -> s5 [0, 65535] { R5799 += 1 };
  s6 -> s8 [0, 65535] { R5799 += 1 };
  s6 -> s9 [0, 65535];
  s6 -> s6 [0, 65535] { R5799 += 1, R5755 += 1, R3891 += 1, R3892 += 1 };
  s8 -> s8 [0, 65535] { R5799 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s8, s5, s2, s9, s6;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 72] { R5801 += 1, R5757 += 1, R5166 += 1, R5167 += 1 };
  s0 -> s2 [0, 72] { R5801 += 1, R5757 += 1, R5167 += 1 };
  s0 -> s0 [0, 65535] { R5800 += 1, R5801 += 1 };
  s0 -> s3 [0, 65535] { R5801 += 1, R5756 += 1, R5757 += 1 };
  s0 -> s4 [73, 73] { R5801 += 1, R5757 += 1, R5167 += 1 };
  s0 -> s5 [73, 73] { R5801 += 1, R5757 += 1, R5167 += 1 };
  s0 -> s6 [73, 73] { R5801 += 1, R5757 += 1, R5166 += 1, R5167 += 1 };
  s0 -> s7 [73, 73] { R5801 += 1, R5757 += 1, R5166 += 1, R5167 += 1 };
  s0 -> s2 [74, 77] { R5801 += 1, R5757 += 1, R5167 += 1 };
  s0 -> s1 [74, 65535] { R5801 += 1, R5757 += 1, R5166 += 1, R5167 += 1 };
  s0 -> s2 [85, 65535] { R5801 += 1, R5757 += 1, R5167 += 1 };
  s1 -> s1 [0, 72] { R5801 += 1, R5757 += 1, R5166 += 1, R5167 += 1 };
  s1 -> s2 [0, 72] { R5801 += 1, R5757 += 1, R5167 += 1 };
  s1 -> s4 [73, 73] { R5801 += 1, R5757 += 1, R5167 += 1 };
  s1 -> s5 [73, 73] { R5801 += 1, R5757 += 1, R5167 += 1 };
  s1 -> s6 [73, 73] { R5801 += 1, R5757 += 1, R5166 += 1, R5167 += 1 };
  s1 -> s7 [73, 73] { R5801 += 1, R5757 += 1, R5166 += 1, R5167 += 1 };
  s1 -> s2 [74, 77] { R5801 += 1, R5757 += 1, R5167 += 1 };
  s1 -> s1 [74, 65535] { R5801 += 1, R5757 += 1, R5166 += 1, R5167 += 1 };
  s1 -> s2 [85, 65535] { R5801 += 1, R5757 += 1, R5167 += 1 };
  s2 -> s2 [0, 72] { R5801 += 1, R5757 += 1, R5167 += 1 };
  s2 -> s2 [0, 65535] { R5801 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s4 [73, 73] { R5801 += 1, R5757 += 1, R5167 += 1 };
  s2 -> s5 [73, 73] { R5801 += 1, R5757 += 1, R5167 += 1 };
  s2 -> s2 [74, 77] { R5801 += 1, R5757 += 1, R5167 += 1 };
  s2 -> s2 [85, 65535] { R5801 += 1, R5757 += 1, R5167 += 1 };
  s3 -> s1 [0, 72] { R5801 += 1, R5757 += 1, R5166 += 1, R5167 += 1 };
  s3 -> s2 [0, 72] { R5801 += 1, R5757 += 1, R5167 += 1 };
  s3 -> s3 [0, 65535] { R5801 += 1, R5756 += 1, R5757 += 1 };
  s3 -> s4 [73, 73] { R5801 += 1, R5757 += 1, R5167 += 1 };
  s3 -> s5 [73, 73] { R5801 += 1, R5757 += 1, R5167 += 1 };
  s3 -> s6 [73, 73] { R5801 += 1, R5757 += 1, R5166 += 1, R5167 += 1 };
  s3 -> s7 [73, 73] { R5801 += 1, R5757 += 1, R5166 += 1, R5167 += 1 };
  s3 -> s2 [74, 77] { R5801 += 1, R5757 += 1, R5167 += 1 };
  s3 -> s1 [74, 65535] { R5801 += 1, R5757 += 1, R5166 += 1, R5167 += 1 };
  s3 -> s2 [85, 65535] { R5801 += 1, R5757 += 1, R5167 += 1 };
  s4 -> s4 [0, 65535] { R5801 += 1 };
  s4 -> s8 [0, 65535];
  s5 -> s5 [0, 77] { R5801 += 1, R5757 += 1, R5167 += 1 };
  s5 -> s5 [0, 65535] { R5801 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s5 [85, 65535] { R5801 += 1, R5757 += 1, R5167 += 1 };
  s7 -> s5 [0, 77] { R5801 += 1, R5757 += 1, R5167 += 1 };
  s7 -> s7 [0, 65535] { R5801 += 1, R5757 += 1, R5166 += 1, R5167 += 1 };
  s7 -> s5 [85, 65535] { R5801 += 1, R5757 += 1, R5167 += 1 };
  s8 -> s8 [0, 65535];
  accepting s2, s4, s5, s8;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 72] { R5803 += 1, R5759 += 1, R5592 += 1, R5593 += 1 };
  s0 -> s2 [0, 72] { R5803 += 1, R5759 += 1, R5593 += 1, R5594 += 1 };
  s0 -> s3 [0, 65535] { R5803 += 1, R5758 += 1, R5759 += 1 };
  s0 -> s0 [0, 65535] { R5802 += 1, R5803 += 1 };
  s0 -> s4 [73, 73] { R5803 += 1, R5759 += 1, R5593 += 1, R5594 += 1 };
  s0 -> s5 [73, 73] { R5803 += 1, R5759 += 1, R5592 += 1, R5593 += 1 };
  s0 -> s6 [73, 73] { R5803 += 1, R5759 += 1, R5592 += 1, R5593 += 1 };
  s0 -> s7 [73, 73] { R5803 += 1, R5759 += 1, R5593 += 1, R5594 += 1 };
  s0 -> s1 [74, 65535] { R5803 += 1, R5759 += 1, R5592 += 1, R5593 += 1 };
  s0 -> s2 [74, 65535] { R5803 += 1, R5759 += 1, R5593 += 1, R5594 += 1 };
  s1 -> s1 [0, 72] { R5803 += 1, R5759 += 1, R5592 += 1, R5593 += 1 };
  s1 -> s2 [0, 72] { R5803 += 1, R5759 += 1, R5593 += 1, R5594 += 1 };
  s1 -> s4 [73, 73] { R5803 += 1, R5759 += 1, R5593 += 1, R5594 += 1 };
  s1 -> s5 [73, 73] { R5803 += 1, R5759 += 1, R5592 += 1, R5593 += 1 };
  s1 -> s6 [73, 73] { R5803 += 1, R5759 += 1, R5592 += 1, R5593 += 1 };
  s1 -> s7 [73, 73] { R5803 += 1, R5759 += 1, R5593 += 1, R5594 += 1 };
  s1 -> s1 [74, 65535] { R5803 += 1, R5759 += 1, R5592 += 1, R5593 += 1 };
  s1 -> s2 [74, 65535] { R5803 += 1, R5759 += 1, R5593 += 1, R5594 += 1 };
  s2 -> s2 [0, 72] { R5803 += 1, R5759 += 1, R5593 += 1, R5594 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R5803 += 1 };
  s2 -> s4 [73, 73] { R5803 += 1, R5759 += 1, R5593 += 1, R5594 += 1 };
  s2 -> s7 [73, 73] { R5803 += 1, R5759 += 1, R5593 += 1, R5594 += 1 };
  s2 -> s2 [74, 65535] { R5803 += 1, R5759 += 1, R5593 += 1, R5594 += 1 };
  s3 -> s1 [0, 72] { R5803 += 1, R5759 += 1, R5592 += 1, R5593 += 1 };
  s3 -> s2 [0, 72] { R5803 += 1, R5759 += 1, R5593 += 1, R5594 += 1 };
  s3 -> s3 [0, 65535] { R5803 += 1, R5758 += 1, R5759 += 1 };
  s3 -> s4 [73, 73] { R5803 += 1, R5759 += 1, R5593 += 1, R5594 += 1 };
  s3 -> s5 [73, 73] { R5803 += 1, R5759 += 1, R5592 += 1, R5593 += 1 };
  s3 -> s6 [73, 73] { R5803 += 1, R5759 += 1, R5592 += 1, R5593 += 1 };
  s3 -> s7 [73, 73] { R5803 += 1, R5759 += 1, R5593 += 1, R5594 += 1 };
  s3 -> s1 [74, 65535] { R5803 += 1, R5759 += 1, R5592 += 1, R5593 += 1 };
  s3 -> s2 [74, 65535] { R5803 += 1, R5759 += 1, R5593 += 1, R5594 += 1 };
  s4 -> s4 [0, 65535] { R5803 += 1 };
  s4 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R5803 += 1, R5759 += 1, R5592 += 1, R5593 += 1 };
  s6 -> s7 [0, 65535] { R5803 += 1, R5759 += 1, R5593 += 1, R5594 += 1 };
  s7 -> s7 [0, 65535] { R5803 += 1, R5759 += 1, R5593 += 1, R5594 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s9 [0, 65535] { R5803 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R5803 += 1 };
  accepting s4, s8, s2, s9, s7;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 72] { R5805 += 1, R5761 += 1, R5702 += 1, R5703 += 1 };
  s0 -> s2 [0, 72] { R5805 += 1, R5761 += 1, R5703 += 1 };
  s0 -> s3 [0, 65535] { R5805 += 1, R5760 += 1, R5761 += 1 };
  s0 -> s0 [0, 65535] { R5804 += 1, R5805 += 1 };
  s0 -> s4 [73, 73] { R5805 += 1, R5761 += 1, R5703 += 1 };
  s0 -> s5 [73, 73] { R5805 += 1, R5761 += 1, R5703 += 1 };
  s0 -> s6 [73, 73] { R5805 += 1, R5761 += 1, R5702 += 1, R5703 += 1 };
  s0 -> s7 [73, 73] { R5805 += 1, R5761 += 1, R5702 += 1, R5703 += 1 };
  s0 -> s2 [74, 76] { R5805 += 1, R5761 += 1, R5703 += 1 };
  s0 -> s1 [74, 65535] { R5805 += 1, R5761 += 1, R5702 += 1, R5703 += 1 };
  s0 -> s2 [85, 65535] { R5805 += 1, R5761 += 1, R5703 += 1 };
  s1 -> s1 [0, 72] { R5805 += 1, R5761 += 1, R5702 += 1, R5703 += 1 };
  s1 -> s2 [0, 72] { R5805 += 1, R5761 += 1, R5703 += 1 };
  s1 -> s4 [73, 73] { R5805 += 1, R5761 += 1, R5703 += 1 };
  s1 -> s5 [73, 73] { R5805 += 1, R5761 += 1, R5703 += 1 };
  s1 -> s6 [73, 73] { R5805 += 1, R5761 += 1, R5702 += 1, R5703 += 1 };
  s1 -> s7 [73, 73] { R5805 += 1, R5761 += 1, R5702 += 1, R5703 += 1 };
  s1 -> s2 [74, 76] { R5805 += 1, R5761 += 1, R5703 += 1 };
  s1 -> s1 [74, 65535] { R5805 += 1, R5761 += 1, R5702 += 1, R5703 += 1 };
  s1 -> s2 [85, 65535] { R5805 += 1, R5761 += 1, R5703 += 1 };
  s2 -> s2 [0, 72] { R5805 += 1, R5761 += 1, R5703 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R5805 += 1 };
  s2 -> s5 [73, 73] { R5805 += 1, R5761 += 1 };
  s2 -> s4 [73, 73] { R5805 += 1, R5761 += 1 };
  s2 -> s2 [74, 76] { R5805 += 1, R5761 += 1, R5703 += 1 };
  s2 -> s2 [74, 65535] { R5805 += 1, R5761 += 1 };
  s2 -> s2 [85, 65535] { R5805 += 1, R5761 += 1, R5703 += 1 };
  s3 -> s1 [0, 72] { R5805 += 1, R5761 += 1, R5702 += 1, R5703 += 1 };
  s3 -> s2 [0, 72] { R5805 += 1, R5761 += 1, R5703 += 1 };
  s3 -> s3 [0, 65535] { R5805 += 1, R5760 += 1, R5761 += 1 };
  s3 -> s4 [73, 73] { R5805 += 1, R5761 += 1, R5703 += 1 };
  s3 -> s5 [73, 73] { R5805 += 1, R5761 += 1, R5703 += 1 };
  s3 -> s6 [73, 73] { R5805 += 1, R5761 += 1, R5702 += 1, R5703 += 1 };
  s3 -> s7 [73, 73] { R5805 += 1, R5761 += 1, R5702 += 1, R5703 += 1 };
  s3 -> s2 [74, 76] { R5805 += 1, R5761 += 1, R5703 += 1 };
  s3 -> s1 [74, 65535] { R5805 += 1, R5761 += 1, R5702 += 1, R5703 += 1 };
  s3 -> s2 [85, 65535] { R5805 += 1, R5761 += 1, R5703 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s4 [0, 65535] { R5805 += 1 };
  s5 -> s5 [0, 76] { R5805 += 1, R5761 += 1, R5703 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s5 [0, 65535] { R5805 += 1, R5761 += 1 };
  s5 -> s9 [0, 65535] { R5805 += 1 };
  s5 -> s5 [85, 65535] { R5805 += 1, R5761 += 1, R5703 += 1 };
  s6 -> s5 [0, 76] { R5805 += 1, R5761 += 1, R5703 += 1 };
  s6 -> s6 [0, 65535] { R5805 += 1, R5761 += 1, R5702 += 1, R5703 += 1 };
  s6 -> s5 [85, 65535] { R5805 += 1, R5761 += 1, R5703 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R5805 += 1 };
  accepting s4, s8, s5, s2, s9;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
synchronised {  // Automata constraining P54
automaton P54_0 {
  init s0;
  s0 -> s1 [109, 109];
  accepting s1;
};
};
constraint R1 = R5721 && R2 = R5805 && R20 - R5805 = -1 && R21 = R5805 && R22 - R5805 = -1 && R23 = R5805 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R5169 + -1*R5167 - R53 = 0 && R52 + R5168 + R5166 = 0 && R5720 = 0 && R5746 = 0 && R5747 = 0 && R5754 = 0 && R5755 = 0 && R5756 = 0 && R5757 = 0 && R5758 = 0 && R5759 = 0 && R5760 = 0 && R5761 = 0 && R5762 = 0 && R5763 = R5805 && R5764 = 0 && R5765 = R5805 && R5766 = 0 && R5767 = R5805 && R5768 = 0 && R5769 = R5805 && R5770 = 0 && R5771 = R5805 && R5772 = 0 && R5773 = R5805 && R5774 = 0 && R5775 = R5805 && R5776 = 0 && R5777 = R5805 && R5778 = 0 && R5779 = R5805 && R5780 = 0 && R5781 = R5805 && R5782 = 0 && R5783 = R5805 && R5784 = 0 && R5785 = R5805 && R5786 = 0 && R5787 = R5805 && R5788 = 0 && R5789 = R5805 && R5790 = 0 && R5791 = R5805 && R5792 = 0 && R5793 = R5805 && R5794 = 0 && R5795 = R5805 && R5796 = 0 && R5797 = R5805 && R5798 = 0 && R5799 = R5805 && R5800 = 0 && R5801 = R5805 && R5802 = 0 && R5803 = R5805 && R5804 = 0 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R5169 + -1*R5167 - R53 < 1 && -1 < R5721 && 0 < R5805 && (R48 + R3895 + R3892 != 0 || ((R42 + R72 + R70 != 0 || R43 + R73 + R71 + -1*R5169 + -1*R5167 - R53 = 0 || R53 + R5169 + R5167 < 1) && (R42 + R72 + R70 = 0 || R53 + R5169 + R5167 < 1))) && (R48 + R3895 + R3892 != 0 || ((R46 + R3893 + R3890 != 0 || R47 + R3894 + R3891 + -1*R5169 + -1*R5167 - R53 = 0 || R53 + R5169 + R5167 < 1) && (R46 + R3893 + R3890 = 0 || R53 + R5169 + R5167 < 1))) && (R5706 != 0 || R5707 = R5721 || (R17 = 0 && R5721 = 0)) && (R5708 != 0 || R5709 = R5721 || (R17 = 0 && R5721 = 0)) && (R5710 != 0 || R5711 = R5721 || (R17 = 0 && R5721 = 0)) && (R5712 != 0 || R5713 = R5721 || (R17 = 0 && R5721 = 0)) && (R5714 != 0 || R5715 = R5721 || (R17 = 0 && R5721 = 0)) && (R5716 != 0 || R5717 = R5721 || (R17 = 0 && R5721 = 0)) && (R5718 != 0 || R5719 = R5721 || (R17 = 0 && R5721 = 0)) && (R5722 != 0 || R5721 = R5723 || (R17 = 0 && R5721 = 0)) && (R5724 != 0 || R5721 = R5725 || (R17 = 0 && R5721 = 0)) && (R18 = 0 || (R5744 = 0 && R5745 = 0)) && (R18 = 0 || (R5748 = 0 && R5749 = 0)) && (R18 = 0 || (R5750 = 0 && R5751 = 0)) && (R18 = 0 || (R5752 = 0 && R5753 = 0)) && (R19 = 0 || (R5726 = 0 && R5727 = 0)) && (R19 = 0 || (R5728 = 0 && R5729 = 0)) && (R19 = 0 || (R5730 = 0 && R5731 = 0)) && (R19 = 0 || (R5732 = 0 && R5733 = 0)) && (R19 = 0 || (R5734 = 0 && R5735 = 0)) && (R19 = 0 || (R5736 = 0 && R5737 = 0)) && (R19 = 0 || (R5738 = 0 && R5739 = 0)) && (R19 = 0 || (R5740 = 0 && R5741 = 0)) && (R19 = 0 || (R5742 = 0 && R5743 = 0)) && (R48 + R3895 + R3892 = 0 || (R42 + R72 + R70 = 0 && R43 + R73 + R71 + -1*R5169 + -1*R5167 - R53 = 0)) && (R48 + R3895 + R3892 = 0 || (R46 + R3893 + R3890 = 0 && R47 + R3894 + R3891 + -1*R5169 + -1*R5167 - R53 = 0)) && (R58 + R5597 + R5594 = 0 || (R56 + R5595 + R5592 = 0 && R57 + R5596 + R5593 = 0)) && (R58 + R5597 + R5594 = 0 || (R62 + R5704 + R5702 = 0 && R63 + R5705 + R5703 = 0)) && (R5706 = 0 || (R17 = 0 && R5721 = 0)) && (R5708 = 0 || (R17 = 0 && R5721 = 0)) && (R5710 = 0 || (R17 = 0 && R5721 = 0)) && (R5712 = 0 || (R17 = 0 && R5721 = 0)) && (R5714 = 0 || (R17 = 0 && R5721 = 0)) && (R5716 = 0 || (R17 = 0 && R5721 = 0)) && (R5718 = 0 || (R17 = 0 && R5721 = 0)) && (R5722 = 0 || (R17 = 0 && R5721 = 0)) && (R5724 = 0 || (R17 = 0 && R5721 = 0));
// End of Parikh automata intersection problem
