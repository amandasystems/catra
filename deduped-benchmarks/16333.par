// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R1000, R1001, R1002, R1003, R1004, R1005, R1006, R1007, R1008, R1009, R1010, R1011, R1012, R1013, R1014, R1015, R1016, R1017, R1018, R1019, R1020, R1021, R1022, R1023, R1024, R1025, R1026, R1027, R1028, R1029, R1030, R1031, R1032, R1033, R1034, R1035, R1036, R1037, R11, R12, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R70, R71, R72, R73, R74, R75, R76, R77, R78, R79, R8, R80, R81, R82, R83, R928, R929, R930, R931, R932, R933, R934, R935, R936, R937, R938, R939, R940, R941, R942, R943, R944, R945, R946, R947, R948, R949, R950, R951, R952, R953, R954, R955, R956, R957, R958, R959, R960, R961, R962, R963, R964, R965, R966, R967, R968, R969, R970, R971, R972, R973, R974, R975, R976, R977, R978, R979, R980, R981, R982, R983, R984, R985, R986, R987, R988, R989, R990, R991, R992, R993, R994, R995, R996, R997, R998, R999;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 72];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [73, 73];
  s0 -> s1 [74, 65535];
  s1 -> s1 [0, 72];
  s1 -> s2 [73, 73];
  s1 -> s1 [74, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R21 += 1 };
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s1 [0, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R958 += 1, R959 += 1 };
  s0 -> s1 [0, 65535] { R959 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R959 += 1, R19 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 72] { R961 += 1 };
  s0 -> s0 [0, 65535] { R960 += 1, R961 += 1 };
  s0 -> s2 [73, 73] { R961 += 1 };
  s0 -> s3 [73, 73] { R961 += 1 };
  s0 -> s1 [78, 65535] { R961 += 1 };
  s1 -> s1 [0, 72] { R961 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R961 += 1 };
  s1 -> s3 [73, 73] { R961 += 1 };
  s1 -> s1 [78, 65535] { R961 += 1 };
  s2 -> s2 [0, 73] { R961 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [78, 65535] { R961 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 72] { R963 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R962 += 1, R963 += 1 };
  s0 -> s2 [73, 73] { R963 += 1, R38 += 1 };
  s0 -> s3 [73, 73] { R963 += 1, R38 += 1 };
  s0 -> s1 [74, 65535] { R963 += 1, R38 += 1 };
  s1 -> s1 [0, 72] { R963 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R963 += 1, R38 += 1 };
  s1 -> s3 [73, 73] { R963 += 1, R38 += 1 };
  s1 -> s1 [74, 65535] { R963 += 1, R38 += 1 };
  s2 -> s2 [0, 65535] { R963 += 1, R38 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 72] { R965 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R964 += 1, R965 += 1 };
  s0 -> s2 [73, 73] { R965 += 1, R40 += 1 };
  s0 -> s3 [73, 73] { R965 += 1, R40 += 1 };
  s0 -> s1 [74, 65535] { R965 += 1, R40 += 1 };
  s1 -> s1 [0, 72] { R965 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R965 += 1, R40 += 1 };
  s1 -> s3 [73, 73] { R965 += 1, R40 += 1 };
  s1 -> s1 [74, 65535] { R965 += 1, R40 += 1 };
  s2 -> s2 [0, 65535] { R965 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 72] { R967 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R966 += 1, R967 += 1 };
  s0 -> s2 [73, 73] { R967 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [73, 73] { R967 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [74, 65535] { R967 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 72] { R967 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R967 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [73, 73] { R967 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [74, 65535] { R967 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535] { R967 += 1, R42 += 1, R43 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 72] { R969 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R968 += 1, R969 += 1 };
  s0 -> s2 [73, 73] { R969 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [73, 73] { R969 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [74, 65535] { R969 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 72] { R969 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R969 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [73, 73] { R969 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [74, 65535] { R969 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R969 += 1, R46 += 1, R47 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 72] { R971 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R970 += 1, R971 += 1 };
  s0 -> s2 [73, 73] { R971 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [73, 73] { R971 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [74, 65535] { R971 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 72] { R971 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R971 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [73, 73] { R971 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [74, 65535] { R971 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R971 += 1, R52 += 1, R53 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 72] { R973 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R972 += 1, R973 += 1 };
  s0 -> s2 [73, 73] { R973 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [73, 73] { R973 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [74, 65535] { R973 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 72] { R973 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R973 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [73, 73] { R973 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [74, 65535] { R973 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R973 += 1, R56 += 1, R57 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 72] { R975 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R974 += 1, R975 += 1 };
  s0 -> s2 [73, 73] { R975 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [73, 73] { R975 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [74, 65535] { R975 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 72] { R975 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R975 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [73, 73] { R975 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [74, 65535] { R975 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R975 += 1, R62 += 1, R63 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 72] { R995 += 1 };
  s0 -> s0 [0, 65535] { R994 += 1, R995 += 1 };
  s0 -> s2 [73, 73] { R995 += 1 };
  s0 -> s1 [74, 65535] { R995 += 1 };
  s1 -> s1 [0, 72] { R995 += 1 };
  s1 -> s2 [73, 73] { R995 += 1 };
  s1 -> s1 [74, 65535] { R995 += 1 };
  s2 -> s2 [0, 65535] { R995 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R996 += 1, R997 += 1 };
  s0 -> s1 [0, 65535] { R997 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R997 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 72] { R999 += 1 };
  s0 -> s0 [0, 65535] { R998 += 1, R999 += 1 };
  s0 -> s2 [0, 65535] { R999 += 1, R8 += 1 };
  s0 -> s3 [73, 73] { R999 += 1 };
  s0 -> s1 [74, 65535] { R999 += 1 };
  s1 -> s1 [0, 72] { R999 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [73, 73] { R999 += 1 };
  s1 -> s1 [74, 65535] { R999 += 1 };
  s2 -> s1 [0, 72] { R999 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R999 += 1, R8 += 1 };
  s2 -> s3 [73, 73] { R999 += 1 };
  s2 -> s1 [74, 65535] { R999 += 1 };
  s3 -> s3 [0, 65535] { R999 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 72] { R1001 += 1, R939 += 1 };
  s0 -> s0 [0, 65535] { R1000 += 1, R1001 += 1 };
  s0 -> s2 [0, 65535] { R1001 += 1, R938 += 1, R939 += 1 };
  s0 -> s1 [74, 65535] { R1001 += 1, R939 += 1 };
  s1 -> s1 [0, 72] { R1001 += 1, R939 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1001 += 1 };
  s1 -> s1 [74, 65535] { R1001 += 1, R939 += 1 };
  s2 -> s1 [0, 72] { R1001 += 1, R939 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1001 += 1, R938 += 1, R939 += 1 };
  s2 -> s1 [74, 65535] { R1001 += 1, R939 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R1003 += 1, R941 += 1, R17 += 1 };
  s0 -> s0 [0, 65535] { R1002 += 1, R1003 += 1 };
  s0 -> s2 [0, 65535] { R1003 += 1, R940 += 1, R941 += 1 };
  s1 -> s1 [0, 65535] { R1003 += 1, R941 += 1, R17 += 1 };
  s1 -> s4 [0, 65535] { R1003 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R1003 += 1, R941 += 1, R17 += 1 };
  s2 -> s2 [0, 65535] { R1003 += 1, R940 += 1, R941 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1003 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 73] { R1005 += 1, R943 += 1 };
  s0 -> s0 [0, 65535] { R1004 += 1, R1005 += 1 };
  s0 -> s2 [0, 65535] { R1005 += 1, R942 += 1, R943 += 1 };
  s0 -> s1 [77, 65535] { R1005 += 1, R943 += 1 };
  s1 -> s1 [0, 73] { R1005 += 1, R943 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1005 += 1 };
  s1 -> s1 [77, 65535] { R1005 += 1, R943 += 1 };
  s2 -> s1 [0, 73] { R1005 += 1, R943 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1005 += 1, R942 += 1, R943 += 1 };
  s2 -> s1 [77, 65535] { R1005 += 1, R943 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R1007 += 1, R944 += 1, R945 += 1 };
  s0 -> s0 [0, 65535] { R1006 += 1, R1007 += 1 };
  s0 -> s2 [0, 65535] { R1007 += 1, R945 += 1, R67 += 1 };
  s1 -> s1 [0, 65535] { R1007 += 1, R944 += 1, R945 += 1 };
  s1 -> s2 [0, 65535] { R1007 += 1, R945 += 1, R67 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R1007 += 1 };
  s2 -> s2 [0, 65535] { R1007 += 1, R945 += 1, R67 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1007 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 76] { R1009 += 1, R947 += 1 };
  s0 -> s2 [0, 65535] { R1009 += 1, R946 += 1, R947 += 1 };
  s0 -> s3 [0, 65535] { R1009 += 1, R947 += 1, R69 += 1 };
  s0 -> s0 [0, 65535] { R1008 += 1, R1009 += 1 };
  s0 -> s1 [78, 65535] { R1009 += 1, R947 += 1 };
  s1 -> s1 [0, 76] { R1009 += 1, R947 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R1009 += 1 };
  s1 -> s1 [78, 65535] { R1009 += 1, R947 += 1 };
  s2 -> s1 [0, 76] { R1009 += 1, R947 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1009 += 1, R946 += 1, R947 += 1 };
  s2 -> s3 [0, 65535] { R1009 += 1, R947 += 1, R69 += 1 };
  s2 -> s1 [78, 65535] { R1009 += 1, R947 += 1 };
  s3 -> s1 [0, 76] { R1009 += 1, R947 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1009 += 1, R947 += 1, R69 += 1 };
  s3 -> s5 [0, 65535] { R1009 += 1 };
  s3 -> s1 [78, 65535] { R1009 += 1, R947 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1009 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 76] { R1011 += 1, R949 += 1, R73 += 1 };
  s0 -> s2 [0, 65535] { R1011 += 1, R948 += 1, R949 += 1 };
  s0 -> s0 [0, 65535] { R1010 += 1, R1011 += 1 };
  s0 -> s3 [0, 65535] { R1011 += 1, R949 += 1, R72 += 1, R73 += 1 };
  s0 -> s1 [78, 65535] { R1011 += 1, R949 += 1, R73 += 1 };
  s1 -> s1 [0, 76] { R1011 += 1, R949 += 1, R73 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R1011 += 1 };
  s1 -> s1 [0, 65535] { R1011 += 1, R949 += 1 };
  s1 -> s1 [78, 65535] { R1011 += 1, R949 += 1, R73 += 1 };
  s2 -> s1 [0, 76] { R1011 += 1, R949 += 1, R73 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1011 += 1, R948 += 1, R949 += 1 };
  s2 -> s3 [0, 65535] { R1011 += 1, R949 += 1, R72 += 1, R73 += 1 };
  s2 -> s1 [78, 65535] { R1011 += 1, R949 += 1, R73 += 1 };
  s3 -> s1 [0, 76] { R1011 += 1, R949 += 1, R73 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R1011 += 1 };
  s3 -> s3 [0, 65535] { R1011 += 1, R949 += 1, R72 += 1, R73 += 1 };
  s3 -> s1 [78, 65535] { R1011 += 1, R949 += 1, R73 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1011 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R1013 += 1, R950 += 1, R951 += 1 };
  s0 -> s0 [0, 65535] { R1012 += 1, R1013 += 1 };
  s0 -> s2 [0, 65535] { R1013 += 1, R951 += 1, R77 += 1, R78 += 1 };
  s0 -> s3 [0, 65535] { R1013 += 1, R951 += 1, R78 += 1, R79 += 1 };
  s1 -> s1 [0, 65535] { R1013 += 1, R950 += 1, R951 += 1 };
  s1 -> s2 [0, 65535] { R1013 += 1, R951 += 1, R77 += 1, R78 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [0, 65535] { R1013 += 1, R951 += 1, R78 += 1, R79 += 1 };
  s2 -> s2 [0, 65535] { R1013 += 1, R951 += 1, R77 += 1, R78 += 1 };
  s2 -> s4 [0, 65535] { R1013 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R1013 += 1, R951 += 1, R78 += 1, R79 += 1 };
  s3 -> s4 [0, 65535] { R1013 += 1 };
  s3 -> s5 [0, 65535] { R1013 += 1, R951 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R1013 += 1, R951 += 1, R78 += 1, R79 += 1 };
  s4 -> s4 [0, 65535] { R1013 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s4 [0, 65535] { R1013 += 1 };
  s5 -> s5 [0, 65535] { R1013 += 1, R951 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 77] { R1015 += 1, R953 += 1, R83 += 1 };
  s0 -> s2 [0, 65535] { R1015 += 1, R952 += 1, R953 += 1 };
  s0 -> s0 [0, 65535] { R1014 += 1, R1015 += 1 };
  s0 -> s1 [0, 65535] { R1015 += 1, R953 += 1 };
  s0 -> s1 [84, 65535] { R1015 += 1, R953 += 1, R83 += 1 };
  s1 -> s1 [0, 77] { R1015 += 1, R953 += 1, R83 += 1 };
  s1 -> s4 [0, 65535] { R1015 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1015 += 1, R953 += 1 };
  s1 -> s1 [84, 65535] { R1015 += 1, R953 += 1, R83 += 1 };
  s2 -> s1 [0, 77] { R1015 += 1, R953 += 1, R83 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1015 += 1, R952 += 1, R953 += 1 };
  s2 -> s1 [0, 65535] { R1015 += 1, R953 += 1 };
  s2 -> s1 [84, 65535] { R1015 += 1, R953 += 1, R83 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1015 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s0 [0, 65535] { R1016 += 1, R1017 += 1 };
  s0 -> s1 [0, 65535] { R1017 += 1, R954 += 1, R955 += 1 };
  s0 -> s2 [0, 65535] { R1017 += 1, R955 += 1 };
  s1 -> s1 [0, 65535] { R1017 += 1, R954 += 1, R955 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R1017 += 1, R955 += 1 };
  s2 -> s3 [0, 65535] { R1017 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1017 += 1, R955 += 1 };
  s3 -> s3 [0, 65535] { R1017 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 76] { R1019 += 1, R957 += 1, R937 += 1 };
  s0 -> s2 [0, 65535] { R1019 += 1, R957 += 1, R936 += 1, R937 += 1 };
  s0 -> s0 [0, 65535] { R1018 += 1, R1019 += 1 };
  s0 -> s3 [0, 65535] { R1019 += 1, R956 += 1, R957 += 1 };
  s0 -> s4 [77, 77] { R1019 += 1, R957 += 1, R937 += 1 };
  s0 -> s5 [77, 77] { R1019 += 1, R957 += 1, R937 += 1 };
  s0 -> s1 [85, 65535] { R1019 += 1, R957 += 1, R937 += 1 };
  s1 -> s1 [0, 76] { R1019 += 1, R957 += 1, R937 += 1 };
  s1 -> s1 [0, 65535] { R1019 += 1, R957 += 1 };
  s1 -> s6 [0, 65535] { R1019 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s4 [77, 77] { R1019 += 1, R957 += 1, R937 += 1 };
  s1 -> s5 [77, 77] { R1019 += 1, R957 += 1, R937 += 1 };
  s1 -> s1 [85, 65535] { R1019 += 1, R957 += 1, R937 += 1 };
  s2 -> s1 [0, 76] { R1019 += 1, R957 += 1, R937 += 1 };
  s2 -> s2 [0, 65535] { R1019 += 1, R957 += 1, R936 += 1, R937 += 1 };
  s2 -> s6 [0, 65535] { R1019 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s4 [77, 77] { R1019 += 1, R957 += 1, R937 += 1 };
  s2 -> s5 [77, 77] { R1019 += 1, R957 += 1, R937 += 1 };
  s2 -> s1 [85, 65535] { R1019 += 1, R957 += 1, R937 += 1 };
  s3 -> s1 [0, 76] { R1019 += 1, R957 += 1, R937 += 1 };
  s3 -> s2 [0, 65535] { R1019 += 1, R957 += 1, R936 += 1, R937 += 1 };
  s3 -> s3 [0, 65535] { R1019 += 1, R956 += 1, R957 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s4 [77, 77] { R1019 += 1, R957 += 1, R937 += 1 };
  s3 -> s5 [77, 77] { R1019 += 1, R957 += 1, R937 += 1 };
  s3 -> s1 [85, 65535] { R1019 += 1, R957 += 1, R937 += 1 };
  s4 -> s4 [0, 77] { R1019 += 1, R957 += 1, R937 += 1 };
  s4 -> s4 [0, 65535] { R1019 += 1, R957 += 1 };
  s4 -> s6 [0, 65535] { R1019 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s4 [85, 65535] { R1019 += 1, R957 += 1, R937 += 1 };
  s5 -> s6 [0, 65535] { R1019 += 1 };
  s5 -> s5 [0, 65535] { R1019 += 1, R957 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s6 [0, 65535] { R1019 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R1021 += 1, R976 += 1, R977 += 1 };
  s0 -> s0 [0, 65535] { R1020 += 1, R1021 += 1 };
  s0 -> s2 [0, 65535] { R1021 += 1, R977 += 1, R18 += 1 };
  s1 -> s1 [0, 65535] { R1021 += 1, R976 += 1, R977 += 1 };
  s1 -> s2 [0, 65535] { R1021 += 1, R977 += 1, R18 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R1021 += 1 };
  s2 -> s2 [0, 65535] { R1021 += 1, R977 += 1, R18 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1021 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 72] { R1023 += 1, R979 += 1 };
  s0 -> s2 [0, 65535] { R1023 += 1, R978 += 1, R979 += 1 };
  s0 -> s0 [0, 65535] { R1022 += 1, R1023 += 1 };
  s0 -> s3 [73, 73] { R1023 += 1, R979 += 1 };
  s0 -> s4 [73, 73] { R1023 += 1, R979 += 1 };
  s0 -> s5 [77, 77] { R1023 += 1, R979 += 1 };
  s0 -> s1 [78, 65535] { R1023 += 1, R979 += 1 };
  s1 -> s1 [0, 72] { R1023 += 1, R979 += 1 };
  s1 -> s3 [73, 73] { R1023 += 1, R979 += 1 };
  s1 -> s4 [73, 73] { R1023 += 1, R979 += 1 };
  s1 -> s5 [77, 77] { R1023 += 1, R979 += 1 };
  s1 -> s1 [78, 65535] { R1023 += 1, R979 += 1 };
  s2 -> s1 [0, 72] { R1023 += 1, R979 += 1 };
  s2 -> s2 [0, 65535] { R1023 += 1, R978 += 1, R979 += 1 };
  s2 -> s3 [73, 73] { R1023 += 1, R979 += 1 };
  s2 -> s4 [73, 73] { R1023 += 1, R979 += 1 };
  s2 -> s5 [77, 77] { R1023 += 1, R979 += 1 };
  s2 -> s1 [78, 65535] { R1023 += 1, R979 += 1 };
  s4 -> s4 [0, 73] { R1023 += 1, R979 += 1 };
  s4 -> s8 [77, 77] { R1023 += 1, R979 += 1 };
  s4 -> s4 [78, 65535] { R1023 += 1, R979 += 1 };
  s5 -> s5 [0, 72] { R1023 += 1, R979 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R1023 += 1 };
  s5 -> s7 [73, 73] { R1023 += 1, R979 += 1 };
  s5 -> s8 [73, 73] { R1023 += 1, R979 += 1 };
  s5 -> s5 [77, 65535] { R1023 += 1, R979 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R1023 += 1 };
  s8 -> s8 [0, 73] { R1023 += 1, R979 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R1023 += 1 };
  s8 -> s8 [77, 65535] { R1023 += 1, R979 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 72] { R1025 += 1, R981 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R1024 += 1, R1025 += 1 };
  s0 -> s2 [0, 65535] { R1025 += 1, R980 += 1, R981 += 1 };
  s0 -> s3 [73, 73] { R1025 += 1, R981 += 1, R66 += 1 };
  s0 -> s4 [73, 73] { R1025 += 1, R981 += 1, R66 += 1 };
  s0 -> s1 [74, 65535] { R1025 += 1, R981 += 1, R66 += 1 };
  s1 -> s1 [0, 72] { R1025 += 1, R981 += 1, R66 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1025 += 1 };
  s1 -> s3 [73, 73] { R1025 += 1, R981 += 1, R66 += 1 };
  s1 -> s4 [73, 73] { R1025 += 1, R981 += 1, R66 += 1 };
  s1 -> s1 [74, 65535] { R1025 += 1, R981 += 1, R66 += 1 };
  s2 -> s1 [0, 72] { R1025 += 1, R981 += 1, R66 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1025 += 1, R980 += 1, R981 += 1 };
  s2 -> s3 [73, 73] { R1025 += 1, R981 += 1, R66 += 1 };
  s2 -> s4 [73, 73] { R1025 += 1, R981 += 1, R66 += 1 };
  s2 -> s1 [74, 65535] { R1025 += 1, R981 += 1, R66 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R1025 += 1, R981 += 1, R66 += 1 };
  s3 -> s6 [0, 65535] { R1025 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1025 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1025 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 72] { R1027 += 1, R983 += 1, R68 += 1 };
  s0 -> s0 [0, 65535] { R1026 += 1, R1027 += 1 };
  s0 -> s2 [0, 65535] { R1027 += 1, R982 += 1, R983 += 1 };
  s0 -> s3 [73, 73] { R1027 += 1, R983 += 1, R68 += 1 };
  s0 -> s4 [73, 73] { R1027 += 1, R983 += 1, R68 += 1 };
  s0 -> s1 [74, 65535] { R1027 += 1, R983 += 1, R68 += 1 };
  s1 -> s1 [0, 72] { R1027 += 1, R983 += 1, R68 += 1 };
  s1 -> s1 [0, 65535] { R1027 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [73, 73] { R1027 += 1, R983 += 1, R68 += 1 };
  s1 -> s4 [73, 73] { R1027 += 1, R983 += 1, R68 += 1 };
  s1 -> s1 [74, 65535] { R1027 += 1, R983 += 1, R68 += 1 };
  s2 -> s1 [0, 72] { R1027 += 1, R983 += 1, R68 += 1 };
  s2 -> s2 [0, 65535] { R1027 += 1, R982 += 1, R983 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [73, 73] { R1027 += 1, R983 += 1, R68 += 1 };
  s2 -> s4 [73, 73] { R1027 += 1, R983 += 1, R68 += 1 };
  s2 -> s1 [74, 65535] { R1027 += 1, R983 += 1, R68 += 1 };
  s3 -> s3 [0, 65535] { R1027 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R1027 += 1 };
  s4 -> s4 [0, 65535] { R1027 += 1, R983 += 1, R68 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R1027 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 72] { R1029 += 1, R985 += 1, R70 += 1, R71 += 1 };
  s0 -> s0 [0, 65535] { R1028 += 1, R1029 += 1 };
  s0 -> s2 [0, 65535] { R1029 += 1, R984 += 1, R985 += 1 };
  s0 -> s3 [73, 73] { R1029 += 1, R985 += 1, R70 += 1, R71 += 1 };
  s0 -> s4 [73, 73] { R1029 += 1, R985 += 1, R70 += 1, R71 += 1 };
  s0 -> s1 [74, 65535] { R1029 += 1, R985 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 72] { R1029 += 1, R985 += 1, R70 += 1, R71 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1029 += 1 };
  s1 -> s3 [73, 73] { R1029 += 1, R985 += 1, R70 += 1, R71 += 1 };
  s1 -> s4 [73, 73] { R1029 += 1, R985 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [74, 65535] { R1029 += 1, R985 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [0, 72] { R1029 += 1, R985 += 1, R70 += 1, R71 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1029 += 1, R984 += 1, R985 += 1 };
  s2 -> s3 [73, 73] { R1029 += 1, R985 += 1, R70 += 1, R71 += 1 };
  s2 -> s4 [73, 73] { R1029 += 1, R985 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [74, 65535] { R1029 += 1, R985 += 1, R70 += 1, R71 += 1 };
  s3 -> s6 [0, 65535] { R1029 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R1029 += 1, R985 += 1, R70 += 1, R71 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1029 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1029 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 72] { R1031 += 1, R987 += 1, R74 += 1, R75 += 1 };
  s0 -> s0 [0, 65535] { R1030 += 1, R1031 += 1 };
  s0 -> s2 [0, 65535] { R1031 += 1, R986 += 1, R987 += 1 };
  s0 -> s3 [73, 73] { R1031 += 1, R987 += 1, R74 += 1, R75 += 1 };
  s0 -> s4 [73, 73] { R1031 += 1, R987 += 1, R74 += 1, R75 += 1 };
  s0 -> s1 [74, 65535] { R1031 += 1, R987 += 1, R74 += 1, R75 += 1 };
  s1 -> s1 [0, 72] { R1031 += 1, R987 += 1, R74 += 1, R75 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1031 += 1 };
  s1 -> s3 [73, 73] { R1031 += 1, R987 += 1, R74 += 1, R75 += 1 };
  s1 -> s4 [73, 73] { R1031 += 1, R987 += 1, R74 += 1, R75 += 1 };
  s1 -> s1 [74, 65535] { R1031 += 1, R987 += 1, R74 += 1, R75 += 1 };
  s2 -> s1 [0, 72] { R1031 += 1, R987 += 1, R74 += 1, R75 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1031 += 1, R986 += 1, R987 += 1 };
  s2 -> s3 [73, 73] { R1031 += 1, R987 += 1, R74 += 1, R75 += 1 };
  s2 -> s4 [73, 73] { R1031 += 1, R987 += 1, R74 += 1, R75 += 1 };
  s2 -> s1 [74, 65535] { R1031 += 1, R987 += 1, R74 += 1, R75 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R1031 += 1 };
  s3 -> s3 [0, 65535] { R1031 += 1, R987 += 1, R74 += 1, R75 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1031 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1031 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 72] { R1033 += 1, R989 += 1, R81 += 1 };
  s0 -> s2 [0, 72] { R1033 += 1, R989 += 1, R80 += 1, R81 += 1 };
  s0 -> s3 [0, 65535] { R1033 += 1, R988 += 1, R989 += 1 };
  s0 -> s0 [0, 65535] { R1032 += 1, R1033 += 1 };
  s0 -> s4 [73, 73] { R1033 += 1, R989 += 1, R80 += 1, R81 += 1 };
  s0 -> s5 [73, 73] { R1033 += 1, R989 += 1, R80 += 1, R81 += 1 };
  s0 -> s6 [73, 73] { R1033 += 1, R989 += 1, R81 += 1 };
  s0 -> s7 [73, 73] { R1033 += 1, R989 += 1, R81 += 1 };
  s0 -> s1 [74, 77] { R1033 += 1, R989 += 1, R81 += 1 };
  s0 -> s2 [74, 65535] { R1033 += 1, R989 += 1, R80 += 1, R81 += 1 };
  s0 -> s8 [84, 84] { R1033 += 1, R989 += 1, R81 += 1 };
  s0 -> s1 [85, 65535] { R1033 += 1, R989 += 1, R81 += 1 };
  s1 -> s1 [0, 72] { R1033 += 1, R989 += 1, R81 += 1 };
  s1 -> s6 [73, 73] { R1033 += 1, R989 += 1, R81 += 1 };
  s1 -> s7 [73, 73] { R1033 += 1, R989 += 1, R81 += 1 };
  s1 -> s1 [74, 77] { R1033 += 1, R989 += 1, R81 += 1 };
  s1 -> s8 [84, 84] { R1033 += 1, R989 += 1, R81 += 1 };
  s1 -> s1 [85, 65535] { R1033 += 1, R989 += 1, R81 += 1 };
  s2 -> s1 [0, 72] { R1033 += 1, R989 += 1, R81 += 1 };
  s2 -> s2 [0, 72] { R1033 += 1, R989 += 1, R80 += 1, R81 += 1 };
  s2 -> s4 [73, 73] { R1033 += 1, R989 += 1, R80 += 1, R81 += 1 };
  s2 -> s5 [73, 73] { R1033 += 1, R989 += 1, R80 += 1, R81 += 1 };
  s2 -> s6 [73, 73] { R1033 += 1, R989 += 1, R81 += 1 };
  s2 -> s7 [73, 73] { R1033 += 1, R989 += 1, R81 += 1 };
  s2 -> s1 [74, 77] { R1033 += 1, R989 += 1, R81 += 1 };
  s2 -> s2 [74, 65535] { R1033 += 1, R989 += 1, R80 += 1, R81 += 1 };
  s2 -> s8 [84, 84] { R1033 += 1, R989 += 1, R81 += 1 };
  s2 -> s1 [85, 65535] { R1033 += 1, R989 += 1, R81 += 1 };
  s3 -> s1 [0, 72] { R1033 += 1, R989 += 1, R81 += 1 };
  s3 -> s2 [0, 72] { R1033 += 1, R989 += 1, R80 += 1, R81 += 1 };
  s3 -> s3 [0, 65535] { R1033 += 1, R988 += 1, R989 += 1 };
  s3 -> s4 [73, 73] { R1033 += 1, R989 += 1, R80 += 1, R81 += 1 };
  s3 -> s5 [73, 73] { R1033 += 1, R989 += 1, R80 += 1, R81 += 1 };
  s3 -> s6 [73, 73] { R1033 += 1, R989 += 1, R81 += 1 };
  s3 -> s7 [73, 73] { R1033 += 1, R989 += 1, R81 += 1 };
  s3 -> s1 [74, 77] { R1033 += 1, R989 += 1, R81 += 1 };
  s3 -> s2 [74, 65535] { R1033 += 1, R989 += 1, R80 += 1, R81 += 1 };
  s3 -> s8 [84, 84] { R1033 += 1, R989 += 1, R81 += 1 };
  s3 -> s1 [85, 65535] { R1033 += 1, R989 += 1, R81 += 1 };
  s5 -> s7 [0, 77] { R1033 += 1, R989 += 1, R81 += 1 };
  s5 -> s5 [0, 65535] { R1033 += 1, R989 += 1, R80 += 1, R81 += 1 };
  s5 -> s10 [84, 84] { R1033 += 1, R989 += 1, R81 += 1 };
  s5 -> s7 [85, 65535] { R1033 += 1, R989 += 1, R81 += 1 };
  s7 -> s7 [0, 77] { R1033 += 1, R989 += 1, R81 += 1 };
  s7 -> s10 [84, 84] { R1033 += 1, R989 += 1, R81 += 1 };
  s7 -> s7 [85, 65535] { R1033 += 1, R989 += 1, R81 += 1 };
  s8 -> s8 [0, 72] { R1033 += 1, R989 += 1, R81 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R1033 += 1 };
  s8 -> s10 [73, 73] { R1033 += 1, R989 += 1 };
  s8 -> s11 [73, 73] { R1033 += 1, R989 += 1 };
  s8 -> s8 [74, 77] { R1033 += 1, R989 += 1, R81 += 1 };
  s8 -> s8 [74, 65535] { R1033 += 1, R989 += 1 };
  s8 -> s8 [84, 65535] { R1033 += 1, R989 += 1, R81 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 77] { R1033 += 1, R989 += 1, R81 += 1 };
  s10 -> s10 [0, 65535] { R1033 += 1, R989 += 1 };
  s10 -> s12 [0, 65535] { R1033 += 1 };
  s10 -> s9 [0, 65535];
  s10 -> s10 [84, 65535] { R1033 += 1, R989 += 1, R81 += 1 };
  s11 -> s11 [0, 65535] { R1033 += 1 };
  s11 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R1033 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 72] { R1035 += 1, R991 += 1, R929 += 1, R930 += 1 };
  s0 -> s2 [0, 72] { R1035 += 1, R991 += 1, R928 += 1, R929 += 1 };
  s0 -> s3 [0, 65535] { R1035 += 1, R990 += 1, R991 += 1 };
  s0 -> s0 [0, 65535] { R1034 += 1, R1035 += 1 };
  s0 -> s4 [73, 73] { R1035 += 1, R991 += 1, R928 += 1, R929 += 1 };
  s0 -> s5 [73, 73] { R1035 += 1, R991 += 1, R929 += 1, R930 += 1 };
  s0 -> s6 [73, 73] { R1035 += 1, R991 += 1, R928 += 1, R929 += 1 };
  s0 -> s7 [73, 73] { R1035 += 1, R991 += 1, R929 += 1, R930 += 1 };
  s0 -> s1 [74, 65535] { R1035 += 1, R991 += 1, R929 += 1, R930 += 1 };
  s0 -> s2 [74, 65535] { R1035 += 1, R991 += 1, R928 += 1, R929 += 1 };
  s1 -> s1 [0, 72] { R1035 += 1, R991 += 1, R929 += 1, R930 += 1 };
  s1 -> s11 [0, 72] { R1035 += 1, R991 += 1 };
  s1 -> s5 [73, 73] { R1035 += 1, R991 += 1, R929 += 1, R930 += 1 };
  s1 -> s12 [73, 73] { R1035 += 1, R991 += 1 };
  s1 -> s8 [73, 73] { R1035 += 1, R991 += 1 };
  s1 -> s7 [73, 73] { R1035 += 1, R991 += 1, R929 += 1, R930 += 1 };
  s1 -> s1 [74, 65535] { R1035 += 1, R991 += 1, R929 += 1, R930 += 1 };
  s1 -> s11 [74, 65535] { R1035 += 1, R991 += 1 };
  s2 -> s1 [0, 72] { R1035 += 1, R991 += 1, R929 += 1, R930 += 1 };
  s2 -> s2 [0, 72] { R1035 += 1, R991 += 1, R928 += 1, R929 += 1 };
  s2 -> s4 [73, 73] { R1035 += 1, R991 += 1, R928 += 1, R929 += 1 };
  s2 -> s5 [73, 73] { R1035 += 1, R991 += 1, R929 += 1, R930 += 1 };
  s2 -> s6 [73, 73] { R1035 += 1, R991 += 1, R928 += 1, R929 += 1 };
  s2 -> s7 [73, 73] { R1035 += 1, R991 += 1, R929 += 1, R930 += 1 };
  s2 -> s1 [74, 65535] { R1035 += 1, R991 += 1, R929 += 1, R930 += 1 };
  s2 -> s2 [74, 65535] { R1035 += 1, R991 += 1, R928 += 1, R929 += 1 };
  s3 -> s1 [0, 72] { R1035 += 1, R991 += 1, R929 += 1, R930 += 1 };
  s3 -> s2 [0, 72] { R1035 += 1, R991 += 1, R928 += 1, R929 += 1 };
  s3 -> s3 [0, 65535] { R1035 += 1, R990 += 1, R991 += 1 };
  s3 -> s4 [73, 73] { R1035 += 1, R991 += 1, R928 += 1, R929 += 1 };
  s3 -> s5 [73, 73] { R1035 += 1, R991 += 1, R929 += 1, R930 += 1 };
  s3 -> s6 [73, 73] { R1035 += 1, R991 += 1, R928 += 1, R929 += 1 };
  s3 -> s7 [73, 73] { R1035 += 1, R991 += 1, R929 += 1, R930 += 1 };
  s3 -> s1 [74, 65535] { R1035 += 1, R991 += 1, R929 += 1, R930 += 1 };
  s3 -> s2 [74, 65535] { R1035 += 1, R991 += 1, R928 += 1, R929 += 1 };
  s5 -> s5 [0, 65535] { R1035 += 1, R991 += 1, R929 += 1, R930 += 1 };
  s5 -> s8 [0, 65535] { R1035 += 1, R991 += 1 };
  s6 -> s5 [0, 65535] { R1035 += 1, R991 += 1, R929 += 1, R930 += 1 };
  s6 -> s6 [0, 65535] { R1035 += 1, R991 += 1, R928 += 1, R929 += 1 };
  s8 -> s9 [0, 65535] { R1035 += 1 };
  s8 -> s10 [0, 65535];
  s8 -> s8 [0, 65535] { R1035 += 1, R991 += 1 };
  s9 -> s9 [0, 65535] { R1035 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s11 [0, 72] { R1035 += 1, R991 += 1 };
  s11 -> s11 [0, 65535] { R1035 += 1 };
  s11 -> s10 [0, 65535];
  s11 -> s12 [73, 73] { R1035 += 1, R991 += 1 };
  s11 -> s8 [73, 73] { R1035 += 1, R991 += 1 };
  s11 -> s11 [74, 65535] { R1035 += 1, R991 += 1 };
  s12 -> s12 [0, 65535] { R1035 += 1 };
  s12 -> s10 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 72] { R1037 += 1, R993 += 1, R934 += 1, R935 += 1 };
  s0 -> s2 [0, 65535] { R1037 += 1, R992 += 1, R993 += 1 };
  s0 -> s0 [0, 65535] { R1036 += 1, R1037 += 1 };
  s0 -> s3 [73, 73] { R1037 += 1, R993 += 1, R934 += 1, R935 += 1 };
  s0 -> s4 [73, 73] { R1037 += 1, R993 += 1, R934 += 1, R935 += 1 };
  s0 -> s1 [74, 65535] { R1037 += 1, R993 += 1, R934 += 1, R935 += 1 };
  s1 -> s1 [0, 72] { R1037 += 1, R993 += 1, R934 += 1, R935 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R1037 += 1 };
  s1 -> s3 [73, 73] { R1037 += 1, R993 += 1, R934 += 1, R935 += 1 };
  s1 -> s4 [73, 73] { R1037 += 1, R993 += 1, R934 += 1, R935 += 1 };
  s1 -> s1 [74, 65535] { R1037 += 1, R993 += 1, R934 += 1, R935 += 1 };
  s2 -> s1 [0, 72] { R1037 += 1, R993 += 1, R934 += 1, R935 += 1 };
  s2 -> s2 [0, 65535] { R1037 += 1, R992 += 1, R993 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [73, 73] { R1037 += 1, R993 += 1, R934 += 1, R935 += 1 };
  s2 -> s4 [73, 73] { R1037 += 1, R993 += 1, R934 += 1, R935 += 1 };
  s2 -> s1 [74, 65535] { R1037 += 1, R993 += 1, R934 += 1, R935 += 1 };
  s3 -> s3 [0, 65535] { R1037 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R1037 += 1 };
  s4 -> s4 [0, 65535] { R1037 += 1, R993 += 1, R934 += 1, R935 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R1037 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
synchronised {  // Automata constraining P54
automaton P54_0 {
  init s0;
  s0 -> s1 [109, 109];
  accepting s1;
};
};
constraint R2 = R1037 && R20 - R1037 = -1 && R21 = R1037 && R22 - R1037 = -1 && R23 = R1037 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R83 + -1*R81 - R53 = 0 && R52 + R82 + R80 = 0 && R978 = 0 && R979 = 0 && R988 = 0 && R989 = 0 && R990 = 0 && R991 = 0 && R994 = 0 && R995 = R1037 && R996 = 0 && R997 = R1037 && R998 = 0 && R999 = R1037 && R1000 = 0 && R1001 = R1037 && R1002 = 0 && R1003 = R1037 && R1004 = 0 && R1005 = R1037 && R1006 = 0 && R1007 = R1037 && R1008 = 0 && R1009 = R1037 && R1010 = 0 && R1011 = R1037 && R1012 = 0 && R1013 = R1037 && R1014 = 0 && R1015 = R1037 && R1016 = 0 && R1017 = R1037 && R1018 = 0 && R1019 = R1037 && R1020 = 0 && R1021 = R1037 && R1022 = 0 && R1023 = R1037 && R1024 = 0 && R1025 = R1037 && R1026 = 0 && R1027 = R1037 && R1028 = 0 && R1029 = R1037 && R1030 = 0 && R1031 = R1037 && R1032 = 0 && R1033 = R1037 && R1034 = 0 && R1035 = R1037 && R1036 = 0 && -1 < R1 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R83 + -1*R81 - R53 < 1 && 0 < R1037 && (R1 != 0 || R17 = 0 || (R938 = 0 && R939 = 0)) && (R1 != 0 || R17 = 0 || (R940 = 0 && R941 = 0)) && (R1 != 0 || R17 = 0 || (R942 = 0 && R943 = 0)) && (R1 != 0 || R17 = 0 || (R944 = 0 && R945 = 0)) && (R1 != 0 || R17 = 0 || (R946 = 0 && R947 = 0)) && (R1 != 0 || R17 = 0 || (R948 = 0 && R949 = 0)) && (R1 != 0 || R17 = 0 || (R950 = 0 && R951 = 0)) && (R1 != 0 || R17 = 0 || (R952 = 0 && R953 = 0)) && (R1 != 0 || R17 = 0 || (R954 = 0 && R955 = 0)) && (R1 != 0 || R17 = 0 || (R956 = 0 && R957 = 0)) && (R48 + R79 + R76 != 0 || ((R42 + R72 + R70 != 0 || R43 + R73 + R71 + -1*R83 + -1*R81 - R53 = 0 || R53 + R83 + R81 < 1) && (R42 + R72 + R70 = 0 || R53 + R83 + R81 < 1))) && (R48 + R79 + R76 != 0 || ((R46 + R77 + R74 != 0 || R47 + R78 + R75 + -1*R83 + -1*R81 - R53 = 0 || R53 + R83 + R81 < 1) && (R46 + R77 + R74 = 0 || R53 + R83 + R81 < 1))) && (R938 != 0 || R1 = R939 || R1 < 1) && (R940 != 0 || R1 = R941 || R1 < 1) && (R942 != 0 || R1 = R943 || R1 < 1) && (R944 != 0 || R1 = R945 || R1 < 1) && (R946 != 0 || R1 = R947 || R1 < 1) && (R948 != 0 || R1 = R949 || R1 < 1) && (R950 != 0 || R1 = R951 || R1 < 1) && (R952 != 0 || R1 = R953 || R1 < 1) && (R954 != 0 || R1 = R955 || R1 < 1) && (R956 != 0 || R1 = R957 || R1 < 1) && (R18 = 0 || (R976 = 0 && R977 = 0)) && (R18 = 0 || (R980 = 0 && R981 = 0)) && (R18 = 0 || (R982 = 0 && R983 = 0)) && (R18 = 0 || (R984 = 0 && R985 = 0)) && (R18 = 0 || (R986 = 0 && R987 = 0)) && (R18 = 0 || (R992 = 0 && R993 = 0)) && (R19 = 0 || (R958 = 0 && R959 = 0)) && (R19 = 0 || (R960 = 0 && R961 = 0)) && (R19 = 0 || (R962 = 0 && R963 = 0)) && (R19 = 0 || (R964 = 0 && R965 = 0)) && (R19 = 0 || (R966 = 0 && R967 = 0)) && (R19 = 0 || (R968 = 0 && R969 = 0)) && (R19 = 0 || (R970 = 0 && R971 = 0)) && (R19 = 0 || (R972 = 0 && R973 = 0)) && (R19 = 0 || (R974 = 0 && R975 = 0)) && (R48 + R79 + R76 = 0 || (R42 + R72 + R70 = 0 && R43 + R73 + R71 + -1*R83 + -1*R81 - R53 = 0)) && (R48 + R79 + R76 = 0 || (R46 + R77 + R74 = 0 && R47 + R78 + R75 + -1*R83 + -1*R81 - R53 = 0)) && (R58 + R933 + R930 = 0 || (R56 + R931 + R928 = 0 && R57 + R932 + R929 = 0)) && (R58 + R933 + R930 = 0 || (R62 + R936 + R934 = 0 && R63 + R937 + R935 = 0)) && (R938 = 0 || R1 < 1) && (R940 = 0 || R1 < 1) && (R942 = 0 || R1 < 1) && (R944 = 0 || R1 < 1) && (R946 = 0 || R1 < 1) && (R948 = 0 || R1 < 1) && (R950 = 0 || R1 < 1) && (R952 = 0 || R1 < 1) && (R954 = 0 || R1 < 1) && (R956 = 0 || R1 < 1);
// End of Parikh automata intersection problem
