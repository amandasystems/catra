// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R10252, R10253, R10254, R10255, R10678, R10679, R10680, R10681, R10682, R10683, R10996, R10997, R10998, R10999, R11, R11000, R11001, R11002, R11003, R11004, R11005, R11006, R11007, R11008, R11009, R11010, R11011, R11012, R11013, R11014, R11015, R11016, R11017, R11018, R11019, R11020, R11021, R11022, R11023, R11024, R11025, R11026, R11027, R11028, R11029, R11030, R11031, R11032, R11033, R11034, R11035, R11036, R11037, R11038, R11039, R11040, R11041, R11042, R11043, R11044, R11045, R11046, R11047, R11048, R11049, R11050, R11051, R11052, R11053, R11054, R11055, R11056, R11057, R11058, R11059, R11060, R11061, R11062, R11063, R11064, R11065, R11066, R11067, R11068, R11069, R11070, R11071, R11072, R11073, R11074, R11075, R11076, R11077, R11078, R11079, R11080, R11081, R11082, R11083, R11084, R11085, R11086, R11087, R11088, R11089, R11090, R11091, R11092, R11093, R11094, R11095, R11096, R11097, R11098, R11099, R12, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R70, R71, R72, R73, R7706, R7707, R7708, R7709, R7710, R7711, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 72];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [73, 73];
  s0 -> s1 [74, 65535];
  s1 -> s1 [0, 72];
  s1 -> s2 [73, 73];
  s1 -> s1 [74, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R21 += 1 };
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s1 [0, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R11020 += 1, R11021 += 1 };
  s0 -> s1 [0, 65535] { R11021 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R11021 += 1, R19 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 72] { R11023 += 1 };
  s0 -> s0 [0, 65535] { R11022 += 1, R11023 += 1 };
  s0 -> s2 [73, 73] { R11023 += 1 };
  s0 -> s3 [73, 73] { R11023 += 1 };
  s0 -> s1 [78, 65535] { R11023 += 1 };
  s1 -> s1 [0, 72] { R11023 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R11023 += 1 };
  s1 -> s3 [73, 73] { R11023 += 1 };
  s1 -> s1 [78, 65535] { R11023 += 1 };
  s2 -> s2 [0, 73] { R11023 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [78, 65535] { R11023 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 72] { R11025 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R11024 += 1, R11025 += 1 };
  s0 -> s2 [73, 73] { R11025 += 1, R38 += 1 };
  s0 -> s3 [73, 73] { R11025 += 1, R38 += 1 };
  s0 -> s1 [74, 65535] { R11025 += 1, R38 += 1 };
  s1 -> s1 [0, 72] { R11025 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R11025 += 1, R38 += 1 };
  s1 -> s3 [73, 73] { R11025 += 1, R38 += 1 };
  s1 -> s1 [74, 65535] { R11025 += 1, R38 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R11025 += 1, R38 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 72] { R11027 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R11026 += 1, R11027 += 1 };
  s0 -> s2 [73, 73] { R11027 += 1, R40 += 1 };
  s0 -> s3 [73, 73] { R11027 += 1, R40 += 1 };
  s0 -> s1 [74, 65535] { R11027 += 1, R40 += 1 };
  s1 -> s1 [0, 72] { R11027 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R11027 += 1, R40 += 1 };
  s1 -> s3 [73, 73] { R11027 += 1, R40 += 1 };
  s1 -> s1 [74, 65535] { R11027 += 1, R40 += 1 };
  s2 -> s2 [0, 65535] { R11027 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 72] { R11029 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R11028 += 1, R11029 += 1 };
  s0 -> s2 [73, 73] { R11029 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [73, 73] { R11029 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [74, 65535] { R11029 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 72] { R11029 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R11029 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [73, 73] { R11029 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [74, 65535] { R11029 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R11029 += 1, R42 += 1, R43 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 72] { R11031 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R11030 += 1, R11031 += 1 };
  s0 -> s2 [73, 73] { R11031 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [73, 73] { R11031 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [74, 65535] { R11031 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 72] { R11031 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R11031 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [73, 73] { R11031 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [74, 65535] { R11031 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535] { R11031 += 1, R46 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 72] { R11033 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R11032 += 1, R11033 += 1 };
  s0 -> s2 [73, 73] { R11033 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [73, 73] { R11033 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [74, 65535] { R11033 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 72] { R11033 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R11033 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [73, 73] { R11033 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [74, 65535] { R11033 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R11033 += 1, R52 += 1, R53 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 72] { R11035 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R11034 += 1, R11035 += 1 };
  s0 -> s2 [73, 73] { R11035 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [73, 73] { R11035 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [74, 65535] { R11035 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 72] { R11035 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R11035 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [73, 73] { R11035 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [74, 65535] { R11035 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R11035 += 1, R56 += 1, R57 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 72] { R11037 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R11036 += 1, R11037 += 1 };
  s0 -> s2 [73, 73] { R11037 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [73, 73] { R11037 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [74, 65535] { R11037 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 72] { R11037 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R11037 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [73, 73] { R11037 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [74, 65535] { R11037 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R11037 += 1, R62 += 1, R63 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 72] { R11057 += 1 };
  s0 -> s0 [0, 65535] { R11056 += 1, R11057 += 1 };
  s0 -> s2 [73, 73] { R11057 += 1 };
  s0 -> s1 [74, 65535] { R11057 += 1 };
  s1 -> s1 [0, 72] { R11057 += 1 };
  s1 -> s2 [73, 73] { R11057 += 1 };
  s1 -> s1 [74, 65535] { R11057 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R11057 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R11059 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R11058 += 1, R11059 += 1 };
  s1 -> s1 [0, 65535] { R11059 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 72] { R11061 += 1 };
  s0 -> s0 [0, 65535] { R11060 += 1, R11061 += 1 };
  s0 -> s2 [0, 65535] { R11061 += 1, R8 += 1 };
  s0 -> s3 [73, 73] { R11061 += 1 };
  s0 -> s1 [74, 65535] { R11061 += 1 };
  s1 -> s1 [0, 72] { R11061 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [73, 73] { R11061 += 1 };
  s1 -> s1 [74, 65535] { R11061 += 1 };
  s2 -> s1 [0, 72] { R11061 += 1 };
  s2 -> s2 [0, 65535] { R11061 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [73, 73] { R11061 += 1 };
  s2 -> s1 [74, 65535] { R11061 += 1 };
  s3 -> s3 [0, 65535] { R11061 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 72] { R11063 += 1, R11001 += 1 };
  s0 -> s2 [0, 65535] { R11063 += 1, R11000 += 1, R11001 += 1 };
  s0 -> s0 [0, 65535] { R11062 += 1, R11063 += 1 };
  s0 -> s1 [74, 65535] { R11063 += 1, R11001 += 1 };
  s1 -> s1 [0, 72] { R11063 += 1, R11001 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R11063 += 1 };
  s1 -> s1 [74, 65535] { R11063 += 1, R11001 += 1 };
  s2 -> s1 [0, 72] { R11063 += 1, R11001 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R11063 += 1, R11000 += 1, R11001 += 1 };
  s2 -> s1 [74, 65535] { R11063 += 1, R11001 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s0 [0, 65535] { R11064 += 1, R11065 += 1 };
  s0 -> s1 [0, 65535] { R11065 += 1, R11003 += 1, R17 += 1 };
  s0 -> s2 [0, 65535] { R11065 += 1, R11002 += 1, R11003 += 1 };
  s1 -> s4 [0, 65535] { R11065 += 1 };
  s1 -> s1 [0, 65535] { R11065 += 1, R11003 += 1, R17 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R11065 += 1, R11003 += 1, R17 += 1 };
  s2 -> s2 [0, 65535] { R11065 += 1, R11002 += 1, R11003 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R11065 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 73] { R11067 += 1, R11005 += 1 };
  s0 -> s2 [0, 65535] { R11067 += 1, R11004 += 1, R11005 += 1 };
  s0 -> s0 [0, 65535] { R11066 += 1, R11067 += 1 };
  s0 -> s1 [77, 65535] { R11067 += 1, R11005 += 1 };
  s1 -> s1 [0, 73] { R11067 += 1, R11005 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R11067 += 1 };
  s1 -> s1 [77, 65535] { R11067 += 1, R11005 += 1 };
  s2 -> s1 [0, 73] { R11067 += 1, R11005 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R11067 += 1, R11004 += 1, R11005 += 1 };
  s2 -> s1 [77, 65535] { R11067 += 1, R11005 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R11069 += 1, R11007 += 1, R67 += 1 };
  s0 -> s2 [0, 65535] { R11069 += 1, R11006 += 1, R11007 += 1 };
  s0 -> s0 [0, 65535] { R11068 += 1, R11069 += 1 };
  s1 -> s1 [0, 65535] { R11069 += 1, R11007 += 1, R67 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R11069 += 1 };
  s2 -> s1 [0, 65535] { R11069 += 1, R11007 += 1, R67 += 1 };
  s2 -> s2 [0, 65535] { R11069 += 1, R11006 += 1, R11007 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R11069 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 76] { R11071 += 1, R11009 += 1 };
  s0 -> s0 [0, 65535] { R11070 += 1, R11071 += 1 };
  s0 -> s2 [0, 65535] { R11071 += 1, R11009 += 1, R69 += 1 };
  s0 -> s3 [0, 65535] { R11071 += 1, R11008 += 1, R11009 += 1 };
  s0 -> s1 [78, 65535] { R11071 += 1, R11009 += 1 };
  s1 -> s1 [0, 76] { R11071 += 1, R11009 += 1 };
  s1 -> s1 [0, 65535] { R11071 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [78, 65535] { R11071 += 1, R11009 += 1 };
  s2 -> s1 [0, 76] { R11071 += 1, R11009 += 1 };
  s2 -> s5 [0, 65535] { R11071 += 1 };
  s2 -> s2 [0, 65535] { R11071 += 1, R11009 += 1, R69 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [78, 65535] { R11071 += 1, R11009 += 1 };
  s3 -> s1 [0, 76] { R11071 += 1, R11009 += 1 };
  s3 -> s2 [0, 65535] { R11071 += 1, R11009 += 1, R69 += 1 };
  s3 -> s3 [0, 65535] { R11071 += 1, R11008 += 1, R11009 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [78, 65535] { R11071 += 1, R11009 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R11071 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 76] { R11073 += 1, R11011 += 1, R73 += 1 };
  s0 -> s2 [0, 65535] { R11073 += 1, R11011 += 1, R72 += 1, R73 += 1 };
  s0 -> s0 [0, 65535] { R11072 += 1, R11073 += 1 };
  s0 -> s3 [0, 65535] { R11073 += 1, R11010 += 1, R11011 += 1 };
  s0 -> s1 [78, 65535] { R11073 += 1, R11011 += 1, R73 += 1 };
  s1 -> s1 [0, 76] { R11073 += 1, R11011 += 1, R73 += 1 };
  s1 -> s1 [0, 65535] { R11073 += 1, R11011 += 1 };
  s1 -> s5 [0, 65535] { R11073 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [78, 65535] { R11073 += 1, R11011 += 1, R73 += 1 };
  s2 -> s1 [0, 76] { R11073 += 1, R11011 += 1, R73 += 1 };
  s2 -> s2 [0, 65535] { R11073 += 1, R11011 += 1, R72 += 1, R73 += 1 };
  s2 -> s5 [0, 65535] { R11073 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [78, 65535] { R11073 += 1, R11011 += 1, R73 += 1 };
  s3 -> s1 [0, 76] { R11073 += 1, R11011 += 1, R73 += 1 };
  s3 -> s2 [0, 65535] { R11073 += 1, R11011 += 1, R72 += 1, R73 += 1 };
  s3 -> s3 [0, 65535] { R11073 += 1, R11010 += 1, R11011 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [78, 65535] { R11073 += 1, R11011 += 1, R73 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R11073 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R11075 += 1, R11012 += 1, R11013 += 1 };
  s0 -> s0 [0, 65535] { R11074 += 1, R11075 += 1 };
  s0 -> s2 [0, 65535] { R11075 += 1, R11013 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R11075 += 1, R11012 += 1, R11013 += 1 };
  s1 -> s2 [0, 65535] { R11075 += 1, R11013 += 1 };
  s2 -> s3 [0, 65535] { R11075 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R11075 += 1, R11013 += 1 };
  s3 -> s3 [0, 65535] { R11075 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 77] { R11077 += 1, R11015 += 1, R10255 += 1 };
  s0 -> s0 [0, 65535] { R11076 += 1, R11077 += 1 };
  s0 -> s2 [0, 65535] { R11077 += 1, R11015 += 1, R10254 += 1, R10255 += 1 };
  s0 -> s3 [0, 65535] { R11077 += 1, R11014 += 1, R11015 += 1 };
  s0 -> s4 [84, 84] { R11077 += 1, R11015 += 1, R10255 += 1 };
  s0 -> s1 [85, 65535] { R11077 += 1, R11015 += 1, R10255 += 1 };
  s1 -> s1 [0, 77] { R11077 += 1, R11015 += 1, R10255 += 1 };
  s1 -> s4 [84, 84] { R11077 += 1, R11015 += 1, R10255 += 1 };
  s1 -> s1 [85, 65535] { R11077 += 1, R11015 += 1, R10255 += 1 };
  s2 -> s1 [0, 77] { R11077 += 1, R11015 += 1, R10255 += 1 };
  s2 -> s2 [0, 65535] { R11077 += 1, R11015 += 1, R10254 += 1, R10255 += 1 };
  s2 -> s4 [84, 84] { R11077 += 1, R11015 += 1, R10255 += 1 };
  s2 -> s1 [85, 65535] { R11077 += 1, R11015 += 1, R10255 += 1 };
  s3 -> s1 [0, 77] { R11077 += 1, R11015 += 1, R10255 += 1 };
  s3 -> s2 [0, 65535] { R11077 += 1, R11015 += 1, R10254 += 1, R10255 += 1 };
  s3 -> s3 [0, 65535] { R11077 += 1, R11014 += 1, R11015 += 1 };
  s3 -> s4 [84, 84] { R11077 += 1, R11015 += 1, R10255 += 1 };
  s3 -> s1 [85, 65535] { R11077 += 1, R11015 += 1, R10255 += 1 };
  s4 -> s4 [0, 77] { R11077 += 1, R11015 += 1, R10255 += 1 };
  s4 -> s4 [0, 65535] { R11077 += 1, R11015 += 1 };
  s4 -> s5 [0, 65535] { R11077 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [84, 65535] { R11077 += 1, R11015 += 1, R10255 += 1 };
  s5 -> s5 [0, 65535] { R11077 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s4, s5, s6;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R11079 += 1, R11016 += 1, R11017 += 1 };
  s0 -> s2 [0, 65535] { R11079 += 1, R11017 += 1, R10682 += 1, R10683 += 1 };
  s0 -> s0 [0, 65535] { R11078 += 1, R11079 += 1 };
  s0 -> s3 [0, 65535] { R11079 += 1, R11017 += 1 };
  s1 -> s1 [0, 65535] { R11079 += 1, R11016 += 1, R11017 += 1 };
  s1 -> s2 [0, 65535] { R11079 += 1, R11017 += 1, R10682 += 1, R10683 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R11079 += 1, R11017 += 1 };
  s2 -> s4 [0, 65535] { R11079 += 1 };
  s2 -> s2 [0, 65535] { R11079 += 1, R11017 += 1, R10682 += 1, R10683 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R11079 += 1, R11017 += 1 };
  s3 -> s4 [0, 65535] { R11079 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R11079 += 1, R11017 += 1 };
  s4 -> s4 [0, 65535] { R11079 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 65535] { R11081 += 1, R11018 += 1, R11019 += 1 };
  s0 -> s0 [0, 65535] { R11080 += 1, R11081 += 1 };
  s0 -> s2 [0, 65535] { R11081 += 1, R11019 += 1 };
  s1 -> s1 [0, 65535] { R11081 += 1, R11018 += 1, R11019 += 1 };
  s1 -> s2 [0, 65535] { R11081 += 1, R11019 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R11081 += 1, R11019 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R11081 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R11081 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R11083 += 1, R11039 += 1, R18 += 1 };
  s0 -> s2 [0, 65535] { R11083 += 1, R11038 += 1, R11039 += 1 };
  s0 -> s0 [0, 65535] { R11082 += 1, R11083 += 1 };
  s1 -> s4 [0, 65535] { R11083 += 1 };
  s1 -> s1 [0, 65535] { R11083 += 1, R11039 += 1, R18 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R11083 += 1, R11039 += 1, R18 += 1 };
  s2 -> s2 [0, 65535] { R11083 += 1, R11038 += 1, R11039 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R11083 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 72] { R11085 += 1, R11041 += 1 };
  s0 -> s2 [0, 65535] { R11085 += 1, R11040 += 1, R11041 += 1 };
  s0 -> s0 [0, 65535] { R11084 += 1, R11085 += 1 };
  s0 -> s3 [73, 73] { R11085 += 1, R11041 += 1 };
  s0 -> s4 [73, 73] { R11085 += 1, R11041 += 1 };
  s0 -> s5 [77, 77] { R11085 += 1, R11041 += 1 };
  s0 -> s1 [78, 65535] { R11085 += 1, R11041 += 1 };
  s1 -> s1 [0, 72] { R11085 += 1, R11041 += 1 };
  s1 -> s3 [73, 73] { R11085 += 1, R11041 += 1 };
  s1 -> s4 [73, 73] { R11085 += 1, R11041 += 1 };
  s1 -> s5 [77, 77] { R11085 += 1, R11041 += 1 };
  s1 -> s1 [78, 65535] { R11085 += 1, R11041 += 1 };
  s2 -> s1 [0, 72] { R11085 += 1, R11041 += 1 };
  s2 -> s2 [0, 65535] { R11085 += 1, R11040 += 1, R11041 += 1 };
  s2 -> s3 [73, 73] { R11085 += 1, R11041 += 1 };
  s2 -> s4 [73, 73] { R11085 += 1, R11041 += 1 };
  s2 -> s5 [77, 77] { R11085 += 1, R11041 += 1 };
  s2 -> s1 [78, 65535] { R11085 += 1, R11041 += 1 };
  s4 -> s4 [0, 73] { R11085 += 1, R11041 += 1 };
  s4 -> s7 [77, 77] { R11085 += 1, R11041 += 1 };
  s4 -> s4 [78, 65535] { R11085 += 1, R11041 += 1 };
  s5 -> s5 [0, 72] { R11085 += 1, R11041 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R11085 += 1 };
  s5 -> s7 [73, 73] { R11085 += 1, R11041 += 1 };
  s5 -> s8 [73, 73] { R11085 += 1, R11041 += 1 };
  s5 -> s5 [77, 65535] { R11085 += 1, R11041 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 73] { R11085 += 1, R11041 += 1 };
  s7 -> s7 [0, 65535] { R11085 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [77, 65535] { R11085 += 1, R11041 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R11085 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 72] { R11087 += 1, R11043 += 1, R66 += 1 };
  s0 -> s2 [0, 65535] { R11087 += 1, R11042 += 1, R11043 += 1 };
  s0 -> s0 [0, 65535] { R11086 += 1, R11087 += 1 };
  s0 -> s3 [73, 73] { R11087 += 1, R11043 += 1, R66 += 1 };
  s0 -> s4 [73, 73] { R11087 += 1, R11043 += 1, R66 += 1 };
  s0 -> s1 [74, 65535] { R11087 += 1, R11043 += 1, R66 += 1 };
  s1 -> s1 [0, 72] { R11087 += 1, R11043 += 1, R66 += 1 };
  s1 -> s1 [0, 65535] { R11087 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R11087 += 1, R11043 += 1, R66 += 1 };
  s1 -> s4 [73, 73] { R11087 += 1, R11043 += 1, R66 += 1 };
  s1 -> s1 [74, 65535] { R11087 += 1, R11043 += 1, R66 += 1 };
  s2 -> s1 [0, 72] { R11087 += 1, R11043 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R11087 += 1, R11042 += 1, R11043 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R11087 += 1, R11043 += 1, R66 += 1 };
  s2 -> s4 [73, 73] { R11087 += 1, R11043 += 1, R66 += 1 };
  s2 -> s1 [74, 65535] { R11087 += 1, R11043 += 1, R66 += 1 };
  s3 -> s3 [0, 65535] { R11087 += 1, R11043 += 1, R66 += 1 };
  s3 -> s6 [0, 65535] { R11087 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R11087 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R11087 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 72] { R11089 += 1, R11045 += 1, R68 += 1 };
  s0 -> s2 [0, 65535] { R11089 += 1, R11044 += 1, R11045 += 1 };
  s0 -> s0 [0, 65535] { R11088 += 1, R11089 += 1 };
  s0 -> s3 [73, 73] { R11089 += 1, R11045 += 1, R68 += 1 };
  s0 -> s4 [73, 73] { R11089 += 1, R11045 += 1, R68 += 1 };
  s0 -> s1 [74, 65535] { R11089 += 1, R11045 += 1, R68 += 1 };
  s1 -> s1 [0, 72] { R11089 += 1, R11045 += 1, R68 += 1 };
  s1 -> s1 [0, 65535] { R11089 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R11089 += 1, R11045 += 1, R68 += 1 };
  s1 -> s4 [73, 73] { R11089 += 1, R11045 += 1, R68 += 1 };
  s1 -> s1 [74, 65535] { R11089 += 1, R11045 += 1, R68 += 1 };
  s2 -> s1 [0, 72] { R11089 += 1, R11045 += 1, R68 += 1 };
  s2 -> s2 [0, 65535] { R11089 += 1, R11044 += 1, R11045 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R11089 += 1, R11045 += 1, R68 += 1 };
  s2 -> s4 [73, 73] { R11089 += 1, R11045 += 1, R68 += 1 };
  s2 -> s1 [74, 65535] { R11089 += 1, R11045 += 1, R68 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R11089 += 1, R11045 += 1, R68 += 1 };
  s3 -> s6 [0, 65535] { R11089 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R11089 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R11089 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 72] { R11091 += 1, R11047 += 1, R70 += 1, R71 += 1 };
  s0 -> s2 [0, 65535] { R11091 += 1, R11046 += 1, R11047 += 1 };
  s0 -> s0 [0, 65535] { R11090 += 1, R11091 += 1 };
  s0 -> s3 [73, 73] { R11091 += 1, R11047 += 1, R70 += 1, R71 += 1 };
  s0 -> s4 [73, 73] { R11091 += 1, R11047 += 1, R70 += 1, R71 += 1 };
  s0 -> s1 [74, 65535] { R11091 += 1, R11047 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 72] { R11091 += 1, R11047 += 1, R70 += 1, R71 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R11091 += 1 };
  s1 -> s3 [73, 73] { R11091 += 1, R11047 += 1, R70 += 1, R71 += 1 };
  s1 -> s4 [73, 73] { R11091 += 1, R11047 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [74, 65535] { R11091 += 1, R11047 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [0, 72] { R11091 += 1, R11047 += 1, R70 += 1, R71 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R11091 += 1, R11046 += 1, R11047 += 1 };
  s2 -> s3 [73, 73] { R11091 += 1, R11047 += 1, R70 += 1, R71 += 1 };
  s2 -> s4 [73, 73] { R11091 += 1, R11047 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [74, 65535] { R11091 += 1, R11047 += 1, R70 += 1, R71 += 1 };
  s3 -> s6 [0, 65535] { R11091 += 1 };
  s3 -> s3 [0, 65535] { R11091 += 1, R11047 += 1, R70 += 1, R71 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R11091 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R11091 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 72] { R11093 += 1, R11049 += 1, R7707 += 1, R7708 += 1 };
  s0 -> s2 [0, 72] { R11093 += 1, R11049 += 1, R7706 += 1, R7707 += 1 };
  s0 -> s0 [0, 65535] { R11092 += 1, R11093 += 1 };
  s0 -> s3 [0, 65535] { R11093 += 1, R11048 += 1, R11049 += 1 };
  s0 -> s4 [73, 73] { R11093 += 1, R11049 += 1, R7706 += 1, R7707 += 1 };
  s0 -> s5 [73, 73] { R11093 += 1, R11049 += 1, R7707 += 1, R7708 += 1 };
  s0 -> s6 [73, 73] { R11093 += 1, R11049 += 1, R7706 += 1, R7707 += 1 };
  s0 -> s7 [73, 73] { R11093 += 1, R11049 += 1, R7707 += 1, R7708 += 1 };
  s0 -> s1 [74, 65535] { R11093 += 1, R11049 += 1, R7707 += 1, R7708 += 1 };
  s0 -> s2 [74, 65535] { R11093 += 1, R11049 += 1, R7706 += 1, R7707 += 1 };
  s1 -> s1 [0, 72] { R11093 += 1, R11049 += 1, R7707 += 1, R7708 += 1 };
  s1 -> s11 [0, 72] { R11093 += 1, R11049 += 1 };
  s1 -> s5 [73, 73] { R11093 += 1, R11049 += 1, R7707 += 1, R7708 += 1 };
  s1 -> s8 [73, 73] { R11093 += 1, R11049 += 1 };
  s1 -> s12 [73, 73] { R11093 += 1, R11049 += 1 };
  s1 -> s7 [73, 73] { R11093 += 1, R11049 += 1, R7707 += 1, R7708 += 1 };
  s1 -> s1 [74, 65535] { R11093 += 1, R11049 += 1, R7707 += 1, R7708 += 1 };
  s1 -> s11 [74, 65535] { R11093 += 1, R11049 += 1 };
  s2 -> s1 [0, 72] { R11093 += 1, R11049 += 1, R7707 += 1, R7708 += 1 };
  s2 -> s2 [0, 72] { R11093 += 1, R11049 += 1, R7706 += 1, R7707 += 1 };
  s2 -> s4 [73, 73] { R11093 += 1, R11049 += 1, R7706 += 1, R7707 += 1 };
  s2 -> s5 [73, 73] { R11093 += 1, R11049 += 1, R7707 += 1, R7708 += 1 };
  s2 -> s6 [73, 73] { R11093 += 1, R11049 += 1, R7706 += 1, R7707 += 1 };
  s2 -> s7 [73, 73] { R11093 += 1, R11049 += 1, R7707 += 1, R7708 += 1 };
  s2 -> s1 [74, 65535] { R11093 += 1, R11049 += 1, R7707 += 1, R7708 += 1 };
  s2 -> s2 [74, 65535] { R11093 += 1, R11049 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s1 [0, 72] { R11093 += 1, R11049 += 1, R7707 += 1, R7708 += 1 };
  s3 -> s2 [0, 72] { R11093 += 1, R11049 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s3 [0, 65535] { R11093 += 1, R11048 += 1, R11049 += 1 };
  s3 -> s4 [73, 73] { R11093 += 1, R11049 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s5 [73, 73] { R11093 += 1, R11049 += 1, R7707 += 1, R7708 += 1 };
  s3 -> s6 [73, 73] { R11093 += 1, R11049 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s7 [73, 73] { R11093 += 1, R11049 += 1, R7707 += 1, R7708 += 1 };
  s3 -> s1 [74, 65535] { R11093 += 1, R11049 += 1, R7707 += 1, R7708 += 1 };
  s3 -> s2 [74, 65535] { R11093 += 1, R11049 += 1, R7706 += 1, R7707 += 1 };
  s4 -> s4 [0, 65535] { R11093 += 1, R11049 += 1, R7706 += 1, R7707 += 1 };
  s4 -> s5 [0, 65535] { R11093 += 1, R11049 += 1, R7707 += 1, R7708 += 1 };
  s5 -> s5 [0, 65535] { R11093 += 1, R11049 += 1, R7707 += 1, R7708 += 1 };
  s5 -> s8 [0, 65535] { R11093 += 1, R11049 += 1 };
  s8 -> s9 [0, 65535] { R11093 += 1 };
  s8 -> s8 [0, 65535] { R11093 += 1, R11049 += 1 };
  s8 -> s10 [0, 65535];
  s9 -> s9 [0, 65535] { R11093 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s11 [0, 72] { R11093 += 1, R11049 += 1 };
  s11 -> s11 [0, 65535] { R11093 += 1 };
  s11 -> s10 [0, 65535];
  s11 -> s8 [73, 73] { R11093 += 1, R11049 += 1 };
  s11 -> s12 [73, 73] { R11093 += 1, R11049 += 1 };
  s11 -> s11 [74, 65535] { R11093 += 1, R11049 += 1 };
  s12 -> s12 [0, 65535] { R11093 += 1 };
  s12 -> s10 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 72] { R11095 += 1, R11051 += 1, R10252 += 1, R10253 += 1 };
  s0 -> s0 [0, 65535] { R11094 += 1, R11095 += 1 };
  s0 -> s2 [0, 65535] { R11095 += 1, R11050 += 1, R11051 += 1 };
  s0 -> s3 [73, 73] { R11095 += 1, R11051 += 1, R10252 += 1, R10253 += 1 };
  s0 -> s4 [73, 73] { R11095 += 1, R11051 += 1, R10252 += 1, R10253 += 1 };
  s0 -> s1 [74, 65535] { R11095 += 1, R11051 += 1, R10252 += 1, R10253 += 1 };
  s1 -> s1 [0, 72] { R11095 += 1, R11051 += 1, R10252 += 1, R10253 += 1 };
  s1 -> s1 [0, 65535] { R11095 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R11095 += 1, R11051 += 1, R10252 += 1, R10253 += 1 };
  s1 -> s4 [73, 73] { R11095 += 1, R11051 += 1, R10252 += 1, R10253 += 1 };
  s1 -> s1 [74, 65535] { R11095 += 1, R11051 += 1, R10252 += 1, R10253 += 1 };
  s2 -> s1 [0, 72] { R11095 += 1, R11051 += 1, R10252 += 1, R10253 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R11095 += 1, R11050 += 1, R11051 += 1 };
  s2 -> s3 [73, 73] { R11095 += 1, R11051 += 1, R10252 += 1, R10253 += 1 };
  s2 -> s4 [73, 73] { R11095 += 1, R11051 += 1, R10252 += 1, R10253 += 1 };
  s2 -> s1 [74, 65535] { R11095 += 1, R11051 += 1, R10252 += 1, R10253 += 1 };
  s3 -> s6 [0, 65535] { R11095 += 1 };
  s3 -> s3 [0, 65535] { R11095 += 1, R11051 += 1, R10252 += 1, R10253 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R11095 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R11095 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 72] { R11097 += 1, R11053 += 1, R10678 += 1, R10679 += 1 };
  s0 -> s2 [0, 72] { R11097 += 1, R11053 += 1, R10679 += 1, R10680 += 1 };
  s0 -> s3 [0, 65535] { R11097 += 1, R11052 += 1, R11053 += 1 };
  s0 -> s0 [0, 65535] { R11096 += 1, R11097 += 1 };
  s0 -> s4 [73, 73] { R11097 += 1, R11053 += 1, R10679 += 1, R10680 += 1 };
  s0 -> s5 [73, 73] { R11097 += 1, R11053 += 1, R10678 += 1, R10679 += 1 };
  s0 -> s6 [73, 73] { R11097 += 1, R11053 += 1, R10678 += 1, R10679 += 1 };
  s0 -> s7 [73, 73] { R11097 += 1, R11053 += 1, R10679 += 1, R10680 += 1 };
  s0 -> s1 [74, 65535] { R11097 += 1, R11053 += 1, R10678 += 1, R10679 += 1 };
  s0 -> s2 [74, 65535] { R11097 += 1, R11053 += 1, R10679 += 1, R10680 += 1 };
  s1 -> s1 [0, 72] { R11097 += 1, R11053 += 1, R10678 += 1, R10679 += 1 };
  s1 -> s2 [0, 72] { R11097 += 1, R11053 += 1, R10679 += 1, R10680 += 1 };
  s1 -> s4 [73, 73] { R11097 += 1, R11053 += 1, R10679 += 1, R10680 += 1 };
  s1 -> s5 [73, 73] { R11097 += 1, R11053 += 1, R10678 += 1, R10679 += 1 };
  s1 -> s6 [73, 73] { R11097 += 1, R11053 += 1, R10678 += 1, R10679 += 1 };
  s1 -> s7 [73, 73] { R11097 += 1, R11053 += 1, R10679 += 1, R10680 += 1 };
  s1 -> s1 [74, 65535] { R11097 += 1, R11053 += 1, R10678 += 1, R10679 += 1 };
  s1 -> s2 [74, 65535] { R11097 += 1, R11053 += 1, R10679 += 1, R10680 += 1 };
  s2 -> s2 [0, 72] { R11097 += 1, R11053 += 1, R10679 += 1, R10680 += 1 };
  s2 -> s2 [0, 65535] { R11097 += 1 };
  s2 -> s9 [0, 65535];
  s2 -> s4 [73, 73] { R11097 += 1, R11053 += 1, R10679 += 1, R10680 += 1 };
  s2 -> s7 [73, 73] { R11097 += 1, R11053 += 1, R10679 += 1, R10680 += 1 };
  s2 -> s2 [74, 65535] { R11097 += 1, R11053 += 1, R10679 += 1, R10680 += 1 };
  s3 -> s1 [0, 72] { R11097 += 1, R11053 += 1, R10678 += 1, R10679 += 1 };
  s3 -> s2 [0, 72] { R11097 += 1, R11053 += 1, R10679 += 1, R10680 += 1 };
  s3 -> s3 [0, 65535] { R11097 += 1, R11052 += 1, R11053 += 1 };
  s3 -> s4 [73, 73] { R11097 += 1, R11053 += 1, R10679 += 1, R10680 += 1 };
  s3 -> s5 [73, 73] { R11097 += 1, R11053 += 1, R10678 += 1, R10679 += 1 };
  s3 -> s6 [73, 73] { R11097 += 1, R11053 += 1, R10678 += 1, R10679 += 1 };
  s3 -> s7 [73, 73] { R11097 += 1, R11053 += 1, R10679 += 1, R10680 += 1 };
  s3 -> s1 [74, 65535] { R11097 += 1, R11053 += 1, R10678 += 1, R10679 += 1 };
  s3 -> s2 [74, 65535] { R11097 += 1, R11053 += 1, R10679 += 1, R10680 += 1 };
  s4 -> s4 [0, 65535] { R11097 += 1 };
  s4 -> s9 [0, 65535];
  s6 -> s6 [0, 65535] { R11097 += 1, R11053 += 1, R10678 += 1, R10679 += 1 };
  s6 -> s7 [0, 65535] { R11097 += 1, R11053 += 1, R10679 += 1, R10680 += 1 };
  s7 -> s8 [0, 65535] { R11097 += 1 };
  s7 -> s9 [0, 65535];
  s7 -> s7 [0, 65535] { R11097 += 1, R11053 += 1, R10679 += 1, R10680 += 1 };
  s8 -> s8 [0, 65535] { R11097 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s4, s8, s2, s9, s7;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 72] { R11099 += 1, R11055 += 1, R10996 += 1, R10997 += 1 };
  s0 -> s2 [0, 72] { R11099 += 1, R11055 += 1, R10997 += 1 };
  s0 -> s3 [0, 65535] { R11099 += 1, R11054 += 1, R11055 += 1 };
  s0 -> s0 [0, 65535] { R11098 += 1, R11099 += 1 };
  s0 -> s4 [73, 73] { R11099 += 1, R11055 += 1, R10997 += 1 };
  s0 -> s5 [73, 73] { R11099 += 1, R11055 += 1, R10996 += 1, R10997 += 1 };
  s0 -> s6 [73, 73] { R11099 += 1, R11055 += 1, R10997 += 1 };
  s0 -> s7 [73, 73] { R11099 += 1, R11055 += 1, R10996 += 1, R10997 += 1 };
  s0 -> s2 [74, 76] { R11099 += 1, R11055 += 1, R10997 += 1 };
  s0 -> s1 [74, 65535] { R11099 += 1, R11055 += 1, R10996 += 1, R10997 += 1 };
  s0 -> s8 [77, 77] { R11099 += 1, R11055 += 1, R10997 += 1 };
  s0 -> s2 [85, 65535] { R11099 += 1, R11055 += 1, R10997 += 1 };
  s1 -> s1 [0, 72] { R11099 += 1, R11055 += 1, R10996 += 1, R10997 += 1 };
  s1 -> s2 [0, 72] { R11099 += 1, R11055 += 1, R10997 += 1 };
  s1 -> s4 [73, 73] { R11099 += 1, R11055 += 1, R10997 += 1 };
  s1 -> s5 [73, 73] { R11099 += 1, R11055 += 1, R10996 += 1, R10997 += 1 };
  s1 -> s6 [73, 73] { R11099 += 1, R11055 += 1, R10997 += 1 };
  s1 -> s7 [73, 73] { R11099 += 1, R11055 += 1, R10996 += 1, R10997 += 1 };
  s1 -> s2 [74, 76] { R11099 += 1, R11055 += 1, R10997 += 1 };
  s1 -> s1 [74, 65535] { R11099 += 1, R11055 += 1, R10996 += 1, R10997 += 1 };
  s1 -> s8 [77, 77] { R11099 += 1, R11055 += 1, R10997 += 1 };
  s1 -> s2 [85, 65535] { R11099 += 1, R11055 += 1, R10997 += 1 };
  s2 -> s2 [0, 72] { R11099 += 1, R11055 += 1, R10997 += 1 };
  s2 -> s4 [73, 73] { R11099 += 1, R11055 += 1 };
  s2 -> s6 [73, 73] { R11099 += 1, R11055 += 1 };
  s2 -> s2 [74, 76] { R11099 += 1, R11055 += 1, R10997 += 1 };
  s2 -> s2 [74, 65535] { R11099 += 1, R11055 += 1 };
  s2 -> s8 [77, 77] { R11099 += 1, R11055 += 1, R10997 += 1 };
  s2 -> s2 [85, 65535] { R11099 += 1, R11055 += 1, R10997 += 1 };
  s3 -> s1 [0, 72] { R11099 += 1, R11055 += 1, R10996 += 1, R10997 += 1 };
  s3 -> s2 [0, 72] { R11099 += 1, R11055 += 1, R10997 += 1 };
  s3 -> s3 [0, 65535] { R11099 += 1, R11054 += 1, R11055 += 1 };
  s3 -> s4 [73, 73] { R11099 += 1, R11055 += 1, R10997 += 1 };
  s3 -> s5 [73, 73] { R11099 += 1, R11055 += 1, R10996 += 1, R10997 += 1 };
  s3 -> s6 [73, 73] { R11099 += 1, R11055 += 1, R10997 += 1 };
  s3 -> s7 [73, 73] { R11099 += 1, R11055 += 1, R10996 += 1, R10997 += 1 };
  s3 -> s2 [74, 76] { R11099 += 1, R11055 += 1, R10997 += 1 };
  s3 -> s1 [74, 65535] { R11099 += 1, R11055 += 1, R10996 += 1, R10997 += 1 };
  s3 -> s8 [77, 77] { R11099 += 1, R11055 += 1, R10997 += 1 };
  s3 -> s2 [85, 65535] { R11099 += 1, R11055 += 1, R10997 += 1 };
  s6 -> s6 [0, 76] { R11099 += 1, R11055 += 1, R10997 += 1 };
  s6 -> s6 [0, 65535] { R11099 += 1, R11055 += 1 };
  s6 -> s11 [77, 77] { R11099 += 1, R11055 += 1, R10997 += 1 };
  s6 -> s6 [85, 65535] { R11099 += 1, R11055 += 1, R10997 += 1 };
  s7 -> s6 [0, 76] { R11099 += 1, R11055 += 1, R10997 += 1 };
  s7 -> s7 [0, 65535] { R11099 += 1, R11055 += 1, R10996 += 1, R10997 += 1 };
  s7 -> s11 [77, 77] { R11099 += 1, R11055 += 1, R10997 += 1 };
  s7 -> s6 [85, 65535] { R11099 += 1, R11055 += 1, R10997 += 1 };
  s8 -> s8 [0, 72] { R11099 += 1, R11055 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R11099 += 1 };
  s8 -> s10 [73, 73] { R11099 += 1, R11055 += 1 };
  s8 -> s11 [73, 73] { R11099 += 1, R11055 += 1 };
  s8 -> s8 [74, 65535] { R11099 += 1, R11055 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R11099 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R11099 += 1, R11055 += 1 };
  s11 -> s12 [0, 65535] { R11099 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R11099 += 1 };
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
synchronised {  // Automata constraining P54
automaton P54_0 {
  init s0;
  s0 -> s1 [109, 109];
  accepting s1;
};
};
constraint R1 = R11015 && R2 = R11099 && R20 - R11099 = -1 && R21 = R11099 && R22 - R11099 = -1 && R23 = R11099 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R10255 + -1*R10253 - R53 = 0 && R52 + R10254 + R10252 = 0 && R11014 = 0 && R11040 = 0 && R11041 = 0 && R11048 = 0 && R11049 = 0 && R11052 = 0 && R11053 = 0 && R11054 = 0 && R11055 = 0 && R11056 = 0 && R11057 = R11099 && R11058 = 0 && R11059 = R11099 && R11060 = 0 && R11061 = R11099 && R11062 = 0 && R11063 = R11099 && R11064 = 0 && R11065 = R11099 && R11066 = 0 && R11067 = R11099 && R11068 = 0 && R11069 = R11099 && R11070 = 0 && R11071 = R11099 && R11072 = 0 && R11073 = R11099 && R11074 = 0 && R11075 = R11099 && R11076 = 0 && R11077 = R11099 && R11078 = 0 && R11079 = R11099 && R11080 = 0 && R11081 = R11099 && R11082 = 0 && R11083 = R11099 && R11084 = 0 && R11085 = R11099 && R11086 = 0 && R11087 = R11099 && R11088 = 0 && R11089 = R11099 && R11090 = 0 && R11091 = R11099 && R11092 = 0 && R11093 = R11099 && R11094 = 0 && R11095 = R11099 && R11096 = 0 && R11097 = R11099 && R11098 = 0 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R10255 + -1*R10253 - R53 < 1 && -1 < R11015 && 0 < R11099 && (R48 + R7711 + R7708 != 0 || ((R42 + R72 + R70 != 0 || R43 + R73 + R71 + -1*R10255 + -1*R10253 - R53 = 0 || R53 + R10255 + R10253 < 1) && (R42 + R72 + R70 = 0 || R53 + R10255 + R10253 < 1))) && (R48 + R7711 + R7708 != 0 || ((R46 + R7709 + R7706 != 0 || R47 + R7710 + R7707 + -1*R10255 + -1*R10253 - R53 = 0 || R53 + R10255 + R10253 < 1) && (R46 + R7709 + R7706 = 0 || R53 + R10255 + R10253 < 1))) && (R11000 != 0 || R11001 = R11015 || (R17 = 0 && R11015 = 0)) && (R11002 != 0 || R11003 = R11015 || (R17 = 0 && R11015 = 0)) && (R11004 != 0 || R11005 = R11015 || (R17 = 0 && R11015 = 0)) && (R11006 != 0 || R11007 = R11015 || (R17 = 0 && R11015 = 0)) && (R11008 != 0 || R11009 = R11015 || (R17 = 0 && R11015 = 0)) && (R11010 != 0 || R11011 = R11015 || (R17 = 0 && R11015 = 0)) && (R11012 != 0 || R11013 = R11015 || (R17 = 0 && R11015 = 0)) && (R11016 != 0 || R11015 = R11017 || (R17 = 0 && R11015 = 0)) && (R11018 != 0 || R11015 = R11019 || (R17 = 0 && R11015 = 0)) && (R18 = 0 || (R11038 = 0 && R11039 = 0)) && (R18 = 0 || (R11042 = 0 && R11043 = 0)) && (R18 = 0 || (R11044 = 0 && R11045 = 0)) && (R18 = 0 || (R11046 = 0 && R11047 = 0)) && (R18 = 0 || (R11050 = 0 && R11051 = 0)) && (R19 = 0 || (R11020 = 0 && R11021 = 0)) && (R19 = 0 || (R11022 = 0 && R11023 = 0)) && (R19 = 0 || (R11024 = 0 && R11025 = 0)) && (R19 = 0 || (R11026 = 0 && R11027 = 0)) && (R19 = 0 || (R11028 = 0 && R11029 = 0)) && (R19 = 0 || (R11030 = 0 && R11031 = 0)) && (R19 = 0 || (R11032 = 0 && R11033 = 0)) && (R19 = 0 || (R11034 = 0 && R11035 = 0)) && (R19 = 0 || (R11036 = 0 && R11037 = 0)) && (R48 + R7711 + R7708 = 0 || (R42 + R72 + R70 = 0 && R43 + R73 + R71 + -1*R10255 + -1*R10253 - R53 = 0)) && (R48 + R7711 + R7708 = 0 || (R46 + R7709 + R7706 = 0 && R47 + R7710 + R7707 + -1*R10255 + -1*R10253 - R53 = 0)) && (R58 + R10683 + R10680 = 0 || (R56 + R10681 + R10678 = 0 && R57 + R10682 + R10679 = 0)) && (R58 + R10683 + R10680 = 0 || (R62 + R10998 + R10996 = 0 && R63 + R10999 + R10997 = 0)) && (R11000 = 0 || (R17 = 0 && R11015 = 0)) && (R11002 = 0 || (R17 = 0 && R11015 = 0)) && (R11004 = 0 || (R17 = 0 && R11015 = 0)) && (R11006 = 0 || (R17 = 0 && R11015 = 0)) && (R11008 = 0 || (R17 = 0 && R11015 = 0)) && (R11010 = 0 || (R17 = 0 && R11015 = 0)) && (R11012 = 0 || (R17 = 0 && R11015 = 0)) && (R11016 = 0 || (R17 = 0 && R11015 = 0)) && (R11018 = 0 || (R17 = 0 && R11015 = 0));
// End of Parikh automata intersection problem
