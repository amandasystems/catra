// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R11522, R11523, R11524, R11525, R11526, R11527, R11528, R11529, R11530, R11531, R12, R14072, R14073, R14074, R14075, R14498, R14499, R14500, R14501, R14502, R14503, R14504, R14505, R14506, R14507, R14508, R14509, R14510, R14511, R14512, R14513, R14514, R14515, R14516, R14517, R14518, R14519, R14520, R14521, R14522, R14523, R14524, R14525, R14526, R14527, R14528, R14529, R14530, R14531, R14532, R14533, R14534, R14535, R14536, R14537, R14538, R14539, R14540, R14541, R14542, R14543, R14544, R14545, R14546, R14547, R14548, R14549, R14550, R14551, R14552, R14553, R14554, R14555, R14556, R14557, R14558, R14559, R14560, R14561, R14562, R14563, R14564, R14565, R14566, R14567, R14568, R14569, R14570, R14571, R14572, R14573, R14574, R14575, R14576, R14577, R14578, R14579, R14580, R14581, R14582, R14583, R14584, R14585, R14586, R14587, R14588, R14589, R14590, R14591, R14592, R14593, R14594, R14595, R14596, R14597, R14598, R14599, R14600, R14601, R14602, R14603, R14604, R14605, R14606, R14607, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 72];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [73, 73];
  s0 -> s1 [74, 65535];
  s1 -> s1 [0, 72];
  s1 -> s2 [73, 73];
  s1 -> s1 [74, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R21 += 1 };
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s1 [0, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R14529 += 1, R19 += 1 };
  s0 -> s0 [0, 65535] { R14528 += 1, R14529 += 1 };
  s1 -> s1 [0, 65535] { R14529 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 72] { R14531 += 1 };
  s0 -> s0 [0, 65535] { R14530 += 1, R14531 += 1 };
  s0 -> s2 [73, 73] { R14531 += 1 };
  s0 -> s3 [73, 73] { R14531 += 1 };
  s0 -> s1 [78, 65535] { R14531 += 1 };
  s1 -> s1 [0, 72] { R14531 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R14531 += 1 };
  s1 -> s3 [73, 73] { R14531 += 1 };
  s1 -> s1 [78, 65535] { R14531 += 1 };
  s2 -> s2 [0, 73] { R14531 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [78, 65535] { R14531 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 72] { R14533 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R14532 += 1, R14533 += 1 };
  s0 -> s2 [73, 73] { R14533 += 1, R38 += 1 };
  s0 -> s3 [73, 73] { R14533 += 1, R38 += 1 };
  s0 -> s1 [74, 65535] { R14533 += 1, R38 += 1 };
  s1 -> s1 [0, 72] { R14533 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R14533 += 1, R38 += 1 };
  s1 -> s3 [73, 73] { R14533 += 1, R38 += 1 };
  s1 -> s1 [74, 65535] { R14533 += 1, R38 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R14533 += 1, R38 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 72] { R14535 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R14534 += 1, R14535 += 1 };
  s0 -> s2 [73, 73] { R14535 += 1, R40 += 1 };
  s0 -> s3 [73, 73] { R14535 += 1, R40 += 1 };
  s0 -> s1 [74, 65535] { R14535 += 1, R40 += 1 };
  s1 -> s1 [0, 72] { R14535 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R14535 += 1, R40 += 1 };
  s1 -> s3 [73, 73] { R14535 += 1, R40 += 1 };
  s1 -> s1 [74, 65535] { R14535 += 1, R40 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R14535 += 1, R40 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 72] { R14537 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R14536 += 1, R14537 += 1 };
  s0 -> s2 [73, 73] { R14537 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [73, 73] { R14537 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [74, 65535] { R14537 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 72] { R14537 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R14537 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [73, 73] { R14537 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [74, 65535] { R14537 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R14537 += 1, R42 += 1, R43 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 72] { R14539 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R14538 += 1, R14539 += 1 };
  s0 -> s2 [73, 73] { R14539 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [73, 73] { R14539 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [74, 65535] { R14539 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 72] { R14539 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R14539 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [73, 73] { R14539 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [74, 65535] { R14539 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R14539 += 1, R46 += 1, R47 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 72] { R14541 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R14540 += 1, R14541 += 1 };
  s0 -> s2 [73, 73] { R14541 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [73, 73] { R14541 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [74, 65535] { R14541 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 72] { R14541 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R14541 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [73, 73] { R14541 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [74, 65535] { R14541 += 1, R52 += 1, R53 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R14541 += 1, R52 += 1, R53 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 72] { R14543 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R14542 += 1, R14543 += 1 };
  s0 -> s2 [73, 73] { R14543 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [73, 73] { R14543 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [74, 65535] { R14543 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 72] { R14543 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R14543 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [73, 73] { R14543 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [74, 65535] { R14543 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R14543 += 1, R56 += 1, R57 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 72] { R14545 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R14544 += 1, R14545 += 1 };
  s0 -> s2 [73, 73] { R14545 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [73, 73] { R14545 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [74, 65535] { R14545 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 72] { R14545 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R14545 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [73, 73] { R14545 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [74, 65535] { R14545 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R14545 += 1, R62 += 1, R63 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 72] { R14565 += 1 };
  s0 -> s0 [0, 65535] { R14564 += 1, R14565 += 1 };
  s0 -> s2 [73, 73] { R14565 += 1 };
  s0 -> s1 [74, 65535] { R14565 += 1 };
  s1 -> s1 [0, 72] { R14565 += 1 };
  s1 -> s2 [73, 73] { R14565 += 1 };
  s1 -> s1 [74, 65535] { R14565 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R14565 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R14567 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R14566 += 1, R14567 += 1 };
  s1 -> s1 [0, 65535] { R14567 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 72] { R14569 += 1 };
  s0 -> s2 [0, 65535] { R14569 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R14568 += 1, R14569 += 1 };
  s0 -> s3 [73, 73] { R14569 += 1 };
  s0 -> s1 [74, 65535] { R14569 += 1 };
  s1 -> s1 [0, 72] { R14569 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [73, 73] { R14569 += 1 };
  s1 -> s1 [74, 65535] { R14569 += 1 };
  s2 -> s1 [0, 72] { R14569 += 1 };
  s2 -> s2 [0, 65535] { R14569 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [73, 73] { R14569 += 1 };
  s2 -> s1 [74, 65535] { R14569 += 1 };
  s3 -> s3 [0, 65535] { R14569 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 72] { R14571 += 1, R14509 += 1 };
  s0 -> s0 [0, 65535] { R14570 += 1, R14571 += 1 };
  s0 -> s2 [0, 65535] { R14571 += 1, R14508 += 1, R14509 += 1 };
  s0 -> s1 [74, 65535] { R14571 += 1, R14509 += 1 };
  s1 -> s1 [0, 72] { R14571 += 1, R14509 += 1 };
  s1 -> s1 [0, 65535] { R14571 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [74, 65535] { R14571 += 1, R14509 += 1 };
  s2 -> s1 [0, 72] { R14571 += 1, R14509 += 1 };
  s2 -> s2 [0, 65535] { R14571 += 1, R14508 += 1, R14509 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [74, 65535] { R14571 += 1, R14509 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s0 [0, 65535] { R14572 += 1, R14573 += 1 };
  s0 -> s1 [0, 65535] { R14573 += 1, R14511 += 1, R17 += 1 };
  s0 -> s2 [0, 65535] { R14573 += 1, R14510 += 1, R14511 += 1 };
  s1 -> s1 [0, 65535] { R14573 += 1, R14511 += 1, R17 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R14573 += 1 };
  s2 -> s1 [0, 65535] { R14573 += 1, R14511 += 1, R17 += 1 };
  s2 -> s2 [0, 65535] { R14573 += 1, R14510 += 1, R14511 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R14573 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 73] { R14575 += 1, R14513 += 1 };
  s0 -> s0 [0, 65535] { R14574 += 1, R14575 += 1 };
  s0 -> s2 [0, 65535] { R14575 += 1, R14512 += 1, R14513 += 1 };
  s0 -> s1 [77, 65535] { R14575 += 1, R14513 += 1 };
  s1 -> s1 [0, 73] { R14575 += 1, R14513 += 1 };
  s1 -> s1 [0, 65535] { R14575 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [77, 65535] { R14575 += 1, R14513 += 1 };
  s2 -> s1 [0, 73] { R14575 += 1, R14513 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R14575 += 1, R14512 += 1, R14513 += 1 };
  s2 -> s1 [77, 65535] { R14575 += 1, R14513 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R14577 += 1, R14515 += 1, R67 += 1 };
  s0 -> s0 [0, 65535] { R14576 += 1, R14577 += 1 };
  s0 -> s2 [0, 65535] { R14577 += 1, R14514 += 1, R14515 += 1 };
  s1 -> s4 [0, 65535] { R14577 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R14577 += 1, R14515 += 1, R67 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R14577 += 1, R14515 += 1, R67 += 1 };
  s2 -> s2 [0, 65535] { R14577 += 1, R14514 += 1, R14515 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R14577 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 76] { R14579 += 1, R14517 += 1 };
  s0 -> s2 [0, 65535] { R14579 += 1, R14516 += 1, R14517 += 1 };
  s0 -> s3 [0, 65535] { R14579 += 1, R14517 += 1, R69 += 1 };
  s0 -> s0 [0, 65535] { R14578 += 1, R14579 += 1 };
  s0 -> s1 [78, 65535] { R14579 += 1, R14517 += 1 };
  s1 -> s1 [0, 76] { R14579 += 1, R14517 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R14579 += 1 };
  s1 -> s1 [78, 65535] { R14579 += 1, R14517 += 1 };
  s2 -> s1 [0, 76] { R14579 += 1, R14517 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R14579 += 1, R14516 += 1, R14517 += 1 };
  s2 -> s3 [0, 65535] { R14579 += 1, R14517 += 1, R69 += 1 };
  s2 -> s1 [78, 65535] { R14579 += 1, R14517 += 1 };
  s3 -> s1 [0, 76] { R14579 += 1, R14517 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R14579 += 1, R14517 += 1, R69 += 1 };
  s3 -> s5 [0, 65535] { R14579 += 1 };
  s3 -> s1 [78, 65535] { R14579 += 1, R14517 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R14579 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 76] { R14581 += 1, R14519 += 1, R11525 += 1 };
  s0 -> s0 [0, 65535] { R14580 += 1, R14581 += 1 };
  s0 -> s1 [0, 65535] { R14581 += 1, R14519 += 1 };
  s0 -> s2 [0, 65535] { R14581 += 1, R14518 += 1, R14519 += 1 };
  s0 -> s1 [78, 65535] { R14581 += 1, R14519 += 1, R11525 += 1 };
  s1 -> s1 [0, 76] { R14581 += 1, R14519 += 1, R11525 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R14581 += 1, R14519 += 1 };
  s1 -> s4 [0, 65535] { R14581 += 1 };
  s1 -> s1 [78, 65535] { R14581 += 1, R14519 += 1, R11525 += 1 };
  s2 -> s1 [0, 76] { R14581 += 1, R14519 += 1, R11525 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R14581 += 1, R14519 += 1 };
  s2 -> s2 [0, 65535] { R14581 += 1, R14518 += 1, R14519 += 1 };
  s2 -> s1 [78, 65535] { R14581 += 1, R14519 += 1, R11525 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R14581 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s0 [0, 65535] { R14582 += 1, R14583 += 1 };
  s0 -> s1 [0, 65535] { R14583 += 1, R14521 += 1, R11530 += 1, R11531 += 1 };
  s0 -> s2 [0, 65535] { R14583 += 1, R14521 += 1, R11529 += 1, R11530 += 1 };
  s0 -> s3 [0, 65535] { R14583 += 1, R14520 += 1, R14521 += 1 };
  s1 -> s1 [0, 65535] { R14583 += 1, R14521 += 1, R11530 += 1, R11531 += 1 };
  s1 -> s6 [0, 65535] { R14583 += 1, R14521 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R14583 += 1 };
  s2 -> s1 [0, 65535] { R14583 += 1, R14521 += 1, R11530 += 1, R11531 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R14583 += 1 };
  s2 -> s2 [0, 65535] { R14583 += 1, R14521 += 1, R11529 += 1, R11530 += 1 };
  s3 -> s1 [0, 65535] { R14583 += 1, R14521 += 1, R11530 += 1, R11531 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R14583 += 1, R14521 += 1, R11529 += 1, R11530 += 1 };
  s3 -> s3 [0, 65535] { R14583 += 1, R14520 += 1, R14521 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R14583 += 1 };
  s6 -> s6 [0, 65535] { R14583 += 1, R14521 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R14583 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 77] { R14585 += 1, R14523 += 1, R14075 += 1 };
  s0 -> s0 [0, 65535] { R14584 += 1, R14585 += 1 };
  s0 -> s2 [0, 65535] { R14585 += 1, R14522 += 1, R14523 += 1 };
  s0 -> s3 [85, 85] { R14585 += 1, R14523 += 1, R14075 += 1 };
  s0 -> s1 [86, 65535] { R14585 += 1, R14523 += 1, R14075 += 1 };
  s1 -> s1 [0, 77] { R14585 += 1, R14523 += 1, R14075 += 1 };
  s1 -> s3 [85, 85] { R14585 += 1, R14523 += 1, R14075 += 1 };
  s1 -> s1 [86, 65535] { R14585 += 1, R14523 += 1, R14075 += 1 };
  s2 -> s1 [0, 77] { R14585 += 1, R14523 += 1, R14075 += 1 };
  s2 -> s2 [0, 65535] { R14585 += 1, R14522 += 1, R14523 += 1 };
  s2 -> s3 [85, 85] { R14585 += 1, R14523 += 1, R14075 += 1 };
  s2 -> s1 [86, 65535] { R14585 += 1, R14523 += 1, R14075 += 1 };
  s3 -> s3 [0, 77] { R14585 += 1, R14523 += 1, R14075 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R14585 += 1, R14523 += 1 };
  s3 -> s5 [0, 65535] { R14585 += 1 };
  s3 -> s3 [85, 65535] { R14585 += 1, R14523 += 1, R14075 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R14585 += 1 };
  accepting s3, s4, s5;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R14587 += 1, R14524 += 1, R14525 += 1 };
  s0 -> s0 [0, 65535] { R14586 += 1, R14587 += 1 };
  s0 -> s2 [0, 65535] { R14587 += 1, R14525 += 1, R14502 += 1, R14503 += 1 };
  s0 -> s3 [0, 65535] { R14587 += 1, R14525 += 1 };
  s1 -> s1 [0, 65535] { R14587 += 1, R14524 += 1, R14525 += 1 };
  s1 -> s2 [0, 65535] { R14587 += 1, R14525 += 1, R14502 += 1, R14503 += 1 };
  s1 -> s3 [0, 65535] { R14587 += 1, R14525 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R14587 += 1, R14525 += 1, R14502 += 1, R14503 += 1 };
  s2 -> s3 [0, 65535] { R14587 += 1, R14525 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R14587 += 1 };
  s3 -> s3 [0, 65535] { R14587 += 1, R14525 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R14587 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R14587 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 76] { R14589 += 1, R14527 += 1, R14507 += 1 };
  s0 -> s0 [0, 65535] { R14588 += 1, R14589 += 1 };
  s0 -> s2 [0, 65535] { R14589 += 1, R14526 += 1, R14527 += 1 };
  s0 -> s3 [0, 65535] { R14589 += 1, R14527 += 1, R14506 += 1, R14507 += 1 };
  s0 -> s4 [77, 77] { R14589 += 1, R14527 += 1, R14507 += 1 };
  s0 -> s5 [77, 77] { R14589 += 1, R14527 += 1, R14507 += 1 };
  s0 -> s1 [86, 65535] { R14589 += 1, R14527 += 1, R14507 += 1 };
  s1 -> s1 [0, 76] { R14589 += 1, R14527 += 1, R14507 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R14589 += 1 };
  s1 -> s1 [0, 65535] { R14589 += 1, R14527 += 1 };
  s1 -> s4 [77, 77] { R14589 += 1, R14527 += 1, R14507 += 1 };
  s1 -> s5 [77, 77] { R14589 += 1, R14527 += 1, R14507 += 1 };
  s1 -> s1 [86, 65535] { R14589 += 1, R14527 += 1, R14507 += 1 };
  s2 -> s1 [0, 76] { R14589 += 1, R14527 += 1, R14507 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R14589 += 1, R14526 += 1, R14527 += 1 };
  s2 -> s3 [0, 65535] { R14589 += 1, R14527 += 1, R14506 += 1, R14507 += 1 };
  s2 -> s4 [77, 77] { R14589 += 1, R14527 += 1, R14507 += 1 };
  s2 -> s5 [77, 77] { R14589 += 1, R14527 += 1, R14507 += 1 };
  s2 -> s1 [86, 65535] { R14589 += 1, R14527 += 1, R14507 += 1 };
  s3 -> s1 [0, 76] { R14589 += 1, R14527 += 1, R14507 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s7 [0, 65535] { R14589 += 1 };
  s3 -> s3 [0, 65535] { R14589 += 1, R14527 += 1, R14506 += 1, R14507 += 1 };
  s3 -> s4 [77, 77] { R14589 += 1, R14527 += 1, R14507 += 1 };
  s3 -> s5 [77, 77] { R14589 += 1, R14527 += 1, R14507 += 1 };
  s3 -> s1 [86, 65535] { R14589 += 1, R14527 += 1, R14507 += 1 };
  s4 -> s4 [0, 77] { R14589 += 1, R14527 += 1, R14507 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R14589 += 1 };
  s4 -> s4 [0, 65535] { R14589 += 1, R14527 += 1 };
  s4 -> s4 [86, 65535] { R14589 += 1, R14527 += 1, R14507 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R14589 += 1 };
  s5 -> s5 [0, 65535] { R14589 += 1, R14527 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R14589 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R14591 += 1, R14547 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R14590 += 1, R14591 += 1 };
  s0 -> s2 [0, 65535] { R14591 += 1, R14546 += 1, R14547 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R14591 += 1 };
  s1 -> s1 [0, 65535] { R14591 += 1, R14547 += 1, R18 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R14591 += 1, R14547 += 1, R18 += 1 };
  s2 -> s2 [0, 65535] { R14591 += 1, R14546 += 1, R14547 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R14591 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 72] { R14593 += 1, R14549 += 1 };
  s0 -> s0 [0, 65535] { R14592 += 1, R14593 += 1 };
  s0 -> s2 [0, 65535] { R14593 += 1, R14548 += 1, R14549 += 1 };
  s0 -> s3 [73, 73] { R14593 += 1, R14549 += 1 };
  s0 -> s4 [73, 73] { R14593 += 1, R14549 += 1 };
  s0 -> s5 [77, 77] { R14593 += 1, R14549 += 1 };
  s0 -> s1 [78, 65535] { R14593 += 1, R14549 += 1 };
  s1 -> s1 [0, 72] { R14593 += 1, R14549 += 1 };
  s1 -> s3 [73, 73] { R14593 += 1, R14549 += 1 };
  s1 -> s4 [73, 73] { R14593 += 1, R14549 += 1 };
  s1 -> s5 [77, 77] { R14593 += 1, R14549 += 1 };
  s1 -> s1 [78, 65535] { R14593 += 1, R14549 += 1 };
  s2 -> s1 [0, 72] { R14593 += 1, R14549 += 1 };
  s2 -> s2 [0, 65535] { R14593 += 1, R14548 += 1, R14549 += 1 };
  s2 -> s3 [73, 73] { R14593 += 1, R14549 += 1 };
  s2 -> s4 [73, 73] { R14593 += 1, R14549 += 1 };
  s2 -> s5 [77, 77] { R14593 += 1, R14549 += 1 };
  s2 -> s1 [78, 65535] { R14593 += 1, R14549 += 1 };
  s3 -> s3 [0, 73] { R14593 += 1, R14549 += 1 };
  s3 -> s8 [77, 77] { R14593 += 1, R14549 += 1 };
  s3 -> s3 [78, 65535] { R14593 += 1, R14549 += 1 };
  s5 -> s5 [0, 72] { R14593 += 1, R14549 += 1 };
  s5 -> s5 [0, 65535] { R14593 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [73, 73] { R14593 += 1, R14549 += 1 };
  s5 -> s8 [73, 73] { R14593 += 1, R14549 += 1 };
  s5 -> s5 [77, 65535] { R14593 += 1, R14549 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R14593 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 73] { R14593 += 1, R14549 += 1 };
  s8 -> s8 [0, 65535] { R14593 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [77, 65535] { R14593 += 1, R14549 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 72] { R14595 += 1, R14551 += 1, R66 += 1 };
  s0 -> s2 [0, 65535] { R14595 += 1, R14550 += 1, R14551 += 1 };
  s0 -> s0 [0, 65535] { R14594 += 1, R14595 += 1 };
  s0 -> s3 [73, 73] { R14595 += 1, R14551 += 1, R66 += 1 };
  s0 -> s4 [73, 73] { R14595 += 1, R14551 += 1, R66 += 1 };
  s0 -> s1 [74, 65535] { R14595 += 1, R14551 += 1, R66 += 1 };
  s1 -> s1 [0, 72] { R14595 += 1, R14551 += 1, R66 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R14595 += 1 };
  s1 -> s3 [73, 73] { R14595 += 1, R14551 += 1, R66 += 1 };
  s1 -> s4 [73, 73] { R14595 += 1, R14551 += 1, R66 += 1 };
  s1 -> s1 [74, 65535] { R14595 += 1, R14551 += 1, R66 += 1 };
  s2 -> s1 [0, 72] { R14595 += 1, R14551 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R14595 += 1, R14550 += 1, R14551 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R14595 += 1, R14551 += 1, R66 += 1 };
  s2 -> s4 [73, 73] { R14595 += 1, R14551 += 1, R66 += 1 };
  s2 -> s1 [74, 65535] { R14595 += 1, R14551 += 1, R66 += 1 };
  s3 -> s6 [0, 65535] { R14595 += 1 };
  s3 -> s3 [0, 65535] { R14595 += 1, R14551 += 1, R66 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R14595 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R14595 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 72] { R14597 += 1, R14553 += 1, R68 += 1 };
  s0 -> s0 [0, 65535] { R14596 += 1, R14597 += 1 };
  s0 -> s2 [0, 65535] { R14597 += 1, R14552 += 1, R14553 += 1 };
  s0 -> s3 [73, 73] { R14597 += 1, R14553 += 1, R68 += 1 };
  s0 -> s4 [73, 73] { R14597 += 1, R14553 += 1, R68 += 1 };
  s0 -> s1 [74, 65535] { R14597 += 1, R14553 += 1, R68 += 1 };
  s1 -> s1 [0, 72] { R14597 += 1, R14553 += 1, R68 += 1 };
  s1 -> s1 [0, 65535] { R14597 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R14597 += 1, R14553 += 1, R68 += 1 };
  s1 -> s4 [73, 73] { R14597 += 1, R14553 += 1, R68 += 1 };
  s1 -> s1 [74, 65535] { R14597 += 1, R14553 += 1, R68 += 1 };
  s2 -> s1 [0, 72] { R14597 += 1, R14553 += 1, R68 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R14597 += 1, R14552 += 1, R14553 += 1 };
  s2 -> s3 [73, 73] { R14597 += 1, R14553 += 1, R68 += 1 };
  s2 -> s4 [73, 73] { R14597 += 1, R14553 += 1, R68 += 1 };
  s2 -> s1 [74, 65535] { R14597 += 1, R14553 += 1, R68 += 1 };
  s3 -> s3 [0, 65535] { R14597 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R14597 += 1, R14553 += 1, R68 += 1 };
  s4 -> s6 [0, 65535] { R14597 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R14597 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 72] { R14599 += 1, R14555 += 1, R11523 += 1 };
  s0 -> s2 [0, 72] { R14599 += 1, R14555 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s3 [0, 65535] { R14599 += 1, R14554 += 1, R14555 += 1 };
  s0 -> s0 [0, 65535] { R14598 += 1, R14599 += 1 };
  s0 -> s4 [73, 73] { R14599 += 1, R14555 += 1, R11523 += 1 };
  s0 -> s5 [73, 73] { R14599 += 1, R14555 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s6 [73, 73] { R14599 += 1, R14555 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s7 [73, 73] { R14599 += 1, R14555 += 1, R11523 += 1 };
  s0 -> s1 [74, 76] { R14599 += 1, R14555 += 1, R11523 += 1 };
  s0 -> s2 [74, 65535] { R14599 += 1, R14555 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s1 [78, 65535] { R14599 += 1, R14555 += 1, R11523 += 1 };
  s1 -> s1 [0, 72] { R14599 += 1, R14555 += 1, R11523 += 1 };
  s1 -> s1 [0, 65535] { R14599 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s4 [73, 73] { R14599 += 1, R14555 += 1 };
  s1 -> s7 [73, 73] { R14599 += 1, R14555 += 1 };
  s1 -> s1 [74, 76] { R14599 += 1, R14555 += 1, R11523 += 1 };
  s1 -> s1 [74, 65535] { R14599 += 1, R14555 += 1 };
  s1 -> s1 [78, 65535] { R14599 += 1, R14555 += 1, R11523 += 1 };
  s2 -> s1 [0, 72] { R14599 += 1, R14555 += 1, R11523 += 1 };
  s2 -> s2 [0, 72] { R14599 += 1, R14555 += 1, R11522 += 1, R11523 += 1 };
  s2 -> s4 [73, 73] { R14599 += 1, R14555 += 1, R11523 += 1 };
  s2 -> s5 [73, 73] { R14599 += 1, R14555 += 1, R11522 += 1, R11523 += 1 };
  s2 -> s6 [73, 73] { R14599 += 1, R14555 += 1, R11522 += 1, R11523 += 1 };
  s2 -> s7 [73, 73] { R14599 += 1, R14555 += 1, R11523 += 1 };
  s2 -> s1 [74, 76] { R14599 += 1, R14555 += 1, R11523 += 1 };
  s2 -> s2 [74, 65535] { R14599 += 1, R14555 += 1, R11522 += 1, R11523 += 1 };
  s2 -> s1 [78, 65535] { R14599 += 1, R14555 += 1, R11523 += 1 };
  s3 -> s1 [0, 72] { R14599 += 1, R14555 += 1, R11523 += 1 };
  s3 -> s2 [0, 72] { R14599 += 1, R14555 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s3 [0, 65535] { R14599 += 1, R14554 += 1, R14555 += 1 };
  s3 -> s4 [73, 73] { R14599 += 1, R14555 += 1, R11523 += 1 };
  s3 -> s5 [73, 73] { R14599 += 1, R14555 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s6 [73, 73] { R14599 += 1, R14555 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s7 [73, 73] { R14599 += 1, R14555 += 1, R11523 += 1 };
  s3 -> s1 [74, 76] { R14599 += 1, R14555 += 1, R11523 += 1 };
  s3 -> s2 [74, 65535] { R14599 += 1, R14555 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s1 [78, 65535] { R14599 += 1, R14555 += 1, R11523 += 1 };
  s4 -> s4 [0, 76] { R14599 += 1, R14555 += 1, R11523 += 1 };
  s4 -> s9 [0, 65535] { R14599 += 1 };
  s4 -> s4 [0, 65535] { R14599 += 1, R14555 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s4 [78, 65535] { R14599 += 1, R14555 += 1, R11523 += 1 };
  s5 -> s4 [0, 76] { R14599 += 1, R14555 += 1, R11523 += 1 };
  s5 -> s5 [0, 65535] { R14599 += 1, R14555 += 1, R11522 += 1, R11523 += 1 };
  s5 -> s4 [78, 65535] { R14599 += 1, R14555 += 1, R11523 += 1 };
  s7 -> s7 [0, 65535] { R14599 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R14599 += 1 };
  s9 -> s8 [0, 65535];
  accepting s4, s8, s9, s1, s7;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 72] { R14601 += 1, R14557 += 1, R11526 += 1, R11527 += 1 };
  s0 -> s0 [0, 65535] { R14600 += 1, R14601 += 1 };
  s0 -> s2 [0, 65535] { R14601 += 1, R14556 += 1, R14557 += 1 };
  s0 -> s3 [73, 73] { R14601 += 1, R14557 += 1, R11526 += 1, R11527 += 1 };
  s0 -> s4 [73, 73] { R14601 += 1, R14557 += 1, R11526 += 1, R11527 += 1 };
  s0 -> s1 [74, 65535] { R14601 += 1, R14557 += 1, R11526 += 1, R11527 += 1 };
  s1 -> s1 [0, 72] { R14601 += 1, R14557 += 1, R11526 += 1, R11527 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R14601 += 1 };
  s1 -> s3 [73, 73] { R14601 += 1, R14557 += 1, R11526 += 1, R11527 += 1 };
  s1 -> s4 [73, 73] { R14601 += 1, R14557 += 1, R11526 += 1, R11527 += 1 };
  s1 -> s1 [74, 65535] { R14601 += 1, R14557 += 1, R11526 += 1, R11527 += 1 };
  s2 -> s1 [0, 72] { R14601 += 1, R14557 += 1, R11526 += 1, R11527 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R14601 += 1, R14556 += 1, R14557 += 1 };
  s2 -> s3 [73, 73] { R14601 += 1, R14557 += 1, R11526 += 1, R11527 += 1 };
  s2 -> s4 [73, 73] { R14601 += 1, R14557 += 1, R11526 += 1, R11527 += 1 };
  s2 -> s1 [74, 65535] { R14601 += 1, R14557 += 1, R11526 += 1, R11527 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R14601 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R14601 += 1 };
  s4 -> s4 [0, 65535] { R14601 += 1, R14557 += 1, R11526 += 1, R11527 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R14601 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 72] { R14603 += 1, R14559 += 1, R14072 += 1, R14073 += 1 };
  s0 -> s2 [0, 72] { R14603 += 1, R14559 += 1, R14073 += 1 };
  s0 -> s3 [0, 65535] { R14603 += 1, R14558 += 1, R14559 += 1 };
  s0 -> s0 [0, 65535] { R14602 += 1, R14603 += 1 };
  s0 -> s4 [73, 73] { R14603 += 1, R14559 += 1, R14073 += 1 };
  s0 -> s5 [73, 73] { R14603 += 1, R14559 += 1, R14073 += 1 };
  s0 -> s6 [73, 73] { R14603 += 1, R14559 += 1, R14072 += 1, R14073 += 1 };
  s0 -> s7 [73, 73] { R14603 += 1, R14559 += 1, R14072 += 1, R14073 += 1 };
  s0 -> s2 [74, 77] { R14603 += 1, R14559 += 1, R14073 += 1 };
  s0 -> s1 [74, 65535] { R14603 += 1, R14559 += 1, R14072 += 1, R14073 += 1 };
  s0 -> s2 [86, 65535] { R14603 += 1, R14559 += 1, R14073 += 1 };
  s1 -> s1 [0, 72] { R14603 += 1, R14559 += 1, R14072 += 1, R14073 += 1 };
  s1 -> s2 [0, 72] { R14603 += 1, R14559 += 1, R14073 += 1 };
  s1 -> s4 [73, 73] { R14603 += 1, R14559 += 1, R14073 += 1 };
  s1 -> s5 [73, 73] { R14603 += 1, R14559 += 1, R14073 += 1 };
  s1 -> s6 [73, 73] { R14603 += 1, R14559 += 1, R14072 += 1, R14073 += 1 };
  s1 -> s7 [73, 73] { R14603 += 1, R14559 += 1, R14072 += 1, R14073 += 1 };
  s1 -> s2 [74, 77] { R14603 += 1, R14559 += 1, R14073 += 1 };
  s1 -> s1 [74, 65535] { R14603 += 1, R14559 += 1, R14072 += 1, R14073 += 1 };
  s1 -> s2 [86, 65535] { R14603 += 1, R14559 += 1, R14073 += 1 };
  s2 -> s2 [0, 72] { R14603 += 1, R14559 += 1, R14073 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R14603 += 1 };
  s2 -> s4 [73, 73] { R14603 += 1, R14559 += 1, R14073 += 1 };
  s2 -> s5 [73, 73] { R14603 += 1, R14559 += 1, R14073 += 1 };
  s2 -> s2 [74, 77] { R14603 += 1, R14559 += 1, R14073 += 1 };
  s2 -> s2 [86, 65535] { R14603 += 1, R14559 += 1, R14073 += 1 };
  s3 -> s1 [0, 72] { R14603 += 1, R14559 += 1, R14072 += 1, R14073 += 1 };
  s3 -> s2 [0, 72] { R14603 += 1, R14559 += 1, R14073 += 1 };
  s3 -> s3 [0, 65535] { R14603 += 1, R14558 += 1, R14559 += 1 };
  s3 -> s4 [73, 73] { R14603 += 1, R14559 += 1, R14073 += 1 };
  s3 -> s5 [73, 73] { R14603 += 1, R14559 += 1, R14073 += 1 };
  s3 -> s6 [73, 73] { R14603 += 1, R14559 += 1, R14072 += 1, R14073 += 1 };
  s3 -> s7 [73, 73] { R14603 += 1, R14559 += 1, R14072 += 1, R14073 += 1 };
  s3 -> s2 [74, 77] { R14603 += 1, R14559 += 1, R14073 += 1 };
  s3 -> s1 [74, 65535] { R14603 += 1, R14559 += 1, R14072 += 1, R14073 += 1 };
  s3 -> s2 [86, 65535] { R14603 += 1, R14559 += 1, R14073 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s4 [0, 65535] { R14603 += 1 };
  s5 -> s5 [0, 77] { R14603 += 1, R14559 += 1, R14073 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s5 [0, 65535] { R14603 += 1 };
  s5 -> s5 [86, 65535] { R14603 += 1, R14559 += 1, R14073 += 1 };
  s7 -> s5 [0, 77] { R14603 += 1, R14559 += 1, R14073 += 1 };
  s7 -> s7 [0, 65535] { R14603 += 1, R14559 += 1, R14072 += 1, R14073 += 1 };
  s7 -> s5 [86, 65535] { R14603 += 1, R14559 += 1, R14073 += 1 };
  s8 -> s8 [0, 65535];
  accepting s2, s4, s5, s8;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 72] { R14605 += 1, R14561 += 1, R14498 += 1, R14499 += 1 };
  s0 -> s2 [0, 72] { R14605 += 1, R14561 += 1, R14499 += 1, R14500 += 1 };
  s0 -> s0 [0, 65535] { R14604 += 1, R14605 += 1 };
  s0 -> s3 [0, 65535] { R14605 += 1, R14560 += 1, R14561 += 1 };
  s0 -> s4 [73, 73] { R14605 += 1, R14561 += 1, R14499 += 1, R14500 += 1 };
  s0 -> s5 [73, 73] { R14605 += 1, R14561 += 1, R14498 += 1, R14499 += 1 };
  s0 -> s6 [73, 73] { R14605 += 1, R14561 += 1, R14498 += 1, R14499 += 1 };
  s0 -> s7 [73, 73] { R14605 += 1, R14561 += 1, R14499 += 1, R14500 += 1 };
  s0 -> s1 [74, 65535] { R14605 += 1, R14561 += 1, R14498 += 1, R14499 += 1 };
  s0 -> s2 [74, 65535] { R14605 += 1, R14561 += 1, R14499 += 1, R14500 += 1 };
  s1 -> s1 [0, 72] { R14605 += 1, R14561 += 1, R14498 += 1, R14499 += 1 };
  s1 -> s2 [0, 72] { R14605 += 1, R14561 += 1, R14499 += 1, R14500 += 1 };
  s1 -> s4 [73, 73] { R14605 += 1, R14561 += 1, R14499 += 1, R14500 += 1 };
  s1 -> s5 [73, 73] { R14605 += 1, R14561 += 1, R14498 += 1, R14499 += 1 };
  s1 -> s6 [73, 73] { R14605 += 1, R14561 += 1, R14498 += 1, R14499 += 1 };
  s1 -> s7 [73, 73] { R14605 += 1, R14561 += 1, R14499 += 1, R14500 += 1 };
  s1 -> s1 [74, 65535] { R14605 += 1, R14561 += 1, R14498 += 1, R14499 += 1 };
  s1 -> s2 [74, 65535] { R14605 += 1, R14561 += 1, R14499 += 1, R14500 += 1 };
  s2 -> s2 [0, 72] { R14605 += 1, R14561 += 1, R14499 += 1, R14500 += 1 };
  s2 -> s9 [0, 65535];
  s2 -> s2 [0, 65535] { R14605 += 1 };
  s2 -> s4 [73, 73] { R14605 += 1, R14561 += 1, R14499 += 1, R14500 += 1 };
  s2 -> s7 [73, 73] { R14605 += 1, R14561 += 1, R14499 += 1, R14500 += 1 };
  s2 -> s2 [74, 65535] { R14605 += 1, R14561 += 1, R14499 += 1, R14500 += 1 };
  s3 -> s1 [0, 72] { R14605 += 1, R14561 += 1, R14498 += 1, R14499 += 1 };
  s3 -> s2 [0, 72] { R14605 += 1, R14561 += 1, R14499 += 1, R14500 += 1 };
  s3 -> s3 [0, 65535] { R14605 += 1, R14560 += 1, R14561 += 1 };
  s3 -> s4 [73, 73] { R14605 += 1, R14561 += 1, R14499 += 1, R14500 += 1 };
  s3 -> s5 [73, 73] { R14605 += 1, R14561 += 1, R14498 += 1, R14499 += 1 };
  s3 -> s6 [73, 73] { R14605 += 1, R14561 += 1, R14498 += 1, R14499 += 1 };
  s3 -> s7 [73, 73] { R14605 += 1, R14561 += 1, R14499 += 1, R14500 += 1 };
  s3 -> s1 [74, 65535] { R14605 += 1, R14561 += 1, R14498 += 1, R14499 += 1 };
  s3 -> s2 [74, 65535] { R14605 += 1, R14561 += 1, R14499 += 1, R14500 += 1 };
  s4 -> s4 [0, 65535] { R14605 += 1 };
  s4 -> s9 [0, 65535];
  s6 -> s6 [0, 65535] { R14605 += 1, R14561 += 1, R14498 += 1, R14499 += 1 };
  s6 -> s7 [0, 65535] { R14605 += 1, R14561 += 1, R14499 += 1, R14500 += 1 };
  s7 -> s8 [0, 65535] { R14605 += 1 };
  s7 -> s9 [0, 65535];
  s7 -> s7 [0, 65535] { R14605 += 1, R14561 += 1, R14499 += 1, R14500 += 1 };
  s8 -> s8 [0, 65535] { R14605 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s4, s8, s2, s9, s7;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 72] { R14607 += 1, R14563 += 1, R14504 += 1, R14505 += 1 };
  s0 -> s0 [0, 65535] { R14606 += 1, R14607 += 1 };
  s0 -> s2 [0, 65535] { R14607 += 1, R14562 += 1, R14563 += 1 };
  s0 -> s3 [73, 73] { R14607 += 1, R14563 += 1, R14504 += 1, R14505 += 1 };
  s0 -> s4 [73, 73] { R14607 += 1, R14563 += 1, R14504 += 1, R14505 += 1 };
  s0 -> s1 [74, 65535] { R14607 += 1, R14563 += 1, R14504 += 1, R14505 += 1 };
  s1 -> s1 [0, 72] { R14607 += 1, R14563 += 1, R14504 += 1, R14505 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R14607 += 1 };
  s1 -> s3 [73, 73] { R14607 += 1, R14563 += 1, R14504 += 1, R14505 += 1 };
  s1 -> s4 [73, 73] { R14607 += 1, R14563 += 1, R14504 += 1, R14505 += 1 };
  s1 -> s1 [74, 65535] { R14607 += 1, R14563 += 1, R14504 += 1, R14505 += 1 };
  s2 -> s1 [0, 72] { R14607 += 1, R14563 += 1, R14504 += 1, R14505 += 1 };
  s2 -> s2 [0, 65535] { R14607 += 1, R14562 += 1, R14563 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [73, 73] { R14607 += 1, R14563 += 1, R14504 += 1, R14505 += 1 };
  s2 -> s4 [73, 73] { R14607 += 1, R14563 += 1, R14504 += 1, R14505 += 1 };
  s2 -> s1 [74, 65535] { R14607 += 1, R14563 += 1, R14504 += 1, R14505 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R14607 += 1 };
  s4 -> s5 [0, 65535] { R14607 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R14607 += 1, R14563 += 1, R14504 += 1, R14505 += 1 };
  s5 -> s5 [0, 65535] { R14607 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
synchronised {  // Automata constraining P54
automaton P54_0 {
  init s0;
  s0 -> s1 [109, 109];
  accepting s1;
};
};
constraint R1 = R14523 && R2 = R14607 && R20 - R14607 = -1 && R21 = R14607 && R22 - R14607 = -1 && R23 = R14607 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R14075 + -1*R14073 - R53 = 0 && R52 + R14074 + R14072 = 0 && R14522 = 0 && R14548 = 0 && R14549 = 0 && R14554 = 0 && R14555 = 0 && R14558 = 0 && R14559 = 0 && R14560 = 0 && R14561 = 0 && R14564 = 0 && R14565 = R14607 && R14566 = 0 && R14567 = R14607 && R14568 = 0 && R14569 = R14607 && R14570 = 0 && R14571 = R14607 && R14572 = 0 && R14573 = R14607 && R14574 = 0 && R14575 = R14607 && R14576 = 0 && R14577 = R14607 && R14578 = 0 && R14579 = R14607 && R14580 = 0 && R14581 = R14607 && R14582 = 0 && R14583 = R14607 && R14584 = 0 && R14585 = R14607 && R14586 = 0 && R14587 = R14607 && R14588 = 0 && R14589 = R14607 && R14590 = 0 && R14591 = R14607 && R14592 = 0 && R14593 = R14607 && R14594 = 0 && R14595 = R14607 && R14596 = 0 && R14597 = R14607 && R14598 = 0 && R14599 = R14607 && R14600 = 0 && R14601 = R14607 && R14602 = 0 && R14603 = R14607 && R14604 = 0 && R14605 = R14607 && R14606 = 0 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R14075 + -1*R14073 - R53 < 1 && -1 < R14523 && 0 < R14607 && (R48 + R11531 + R11528 != 0 || ((R42 + R11524 + R11522 != 0 || R43 + R11525 + R11523 + -1*R14075 + -1*R14073 - R53 = 0 || R53 + R14075 + R14073 < 1) && (R42 + R11524 + R11522 = 0 || R53 + R14075 + R14073 < 1))) && (R48 + R11531 + R11528 != 0 || ((R46 + R11529 + R11526 != 0 || R47 + R11530 + R11527 + -1*R14075 + -1*R14073 - R53 = 0 || R53 + R14075 + R14073 < 1) && (R46 + R11529 + R11526 = 0 || R53 + R14075 + R14073 < 1))) && (R14508 != 0 || R14509 = R14523 || (R17 = 0 && R14523 = 0)) && (R14510 != 0 || R14511 = R14523 || (R17 = 0 && R14523 = 0)) && (R14512 != 0 || R14513 = R14523 || (R17 = 0 && R14523 = 0)) && (R14514 != 0 || R14515 = R14523 || (R17 = 0 && R14523 = 0)) && (R14516 != 0 || R14517 = R14523 || (R17 = 0 && R14523 = 0)) && (R14518 != 0 || R14519 = R14523 || (R17 = 0 && R14523 = 0)) && (R14520 != 0 || R14521 = R14523 || (R17 = 0 && R14523 = 0)) && (R14524 != 0 || R14523 = R14525 || (R17 = 0 && R14523 = 0)) && (R14526 != 0 || R14523 = R14527 || (R17 = 0 && R14523 = 0)) && (R18 = 0 || (R14546 = 0 && R14547 = 0)) && (R18 = 0 || (R14550 = 0 && R14551 = 0)) && (R18 = 0 || (R14552 = 0 && R14553 = 0)) && (R18 = 0 || (R14556 = 0 && R14557 = 0)) && (R18 = 0 || (R14562 = 0 && R14563 = 0)) && (R19 = 0 || (R14528 = 0 && R14529 = 0)) && (R19 = 0 || (R14530 = 0 && R14531 = 0)) && (R19 = 0 || (R14532 = 0 && R14533 = 0)) && (R19 = 0 || (R14534 = 0 && R14535 = 0)) && (R19 = 0 || (R14536 = 0 && R14537 = 0)) && (R19 = 0 || (R14538 = 0 && R14539 = 0)) && (R19 = 0 || (R14540 = 0 && R14541 = 0)) && (R19 = 0 || (R14542 = 0 && R14543 = 0)) && (R19 = 0 || (R14544 = 0 && R14545 = 0)) && (R48 + R11531 + R11528 = 0 || (R42 + R11524 + R11522 = 0 && R43 + R11525 + R11523 + -1*R14075 + -1*R14073 - R53 = 0)) && (R48 + R11531 + R11528 = 0 || (R46 + R11529 + R11526 = 0 && R47 + R11530 + R11527 + -1*R14075 + -1*R14073 - R53 = 0)) && (R58 + R14503 + R14500 = 0 || (R56 + R14501 + R14498 = 0 && R57 + R14502 + R14499 = 0)) && (R58 + R14503 + R14500 = 0 || (R62 + R14506 + R14504 = 0 && R63 + R14507 + R14505 = 0)) && (R14508 = 0 || (R17 = 0 && R14523 = 0)) && (R14510 = 0 || (R17 = 0 && R14523 = 0)) && (R14512 = 0 || (R17 = 0 && R14523 = 0)) && (R14514 = 0 || (R17 = 0 && R14523 = 0)) && (R14516 = 0 || (R17 = 0 && R14523 = 0)) && (R14518 = 0 || (R17 = 0 && R14523 = 0)) && (R14520 = 0 || (R17 = 0 && R14523 = 0)) && (R14524 = 0 || (R17 = 0 && R14523 = 0)) && (R14526 = 0 || (R17 = 0 && R14523 = 0));
// End of Parikh automata intersection problem
