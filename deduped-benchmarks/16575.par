// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R11522, R11523, R11524, R11525, R11526, R11527, R11528, R11529, R11530, R11531, R11532, R11533, R11534, R11535, R11536, R11537, R11538, R11539, R11540, R11541, R11542, R11543, R11544, R11545, R11546, R11547, R11548, R11549, R11550, R11551, R11552, R11553, R11554, R11555, R11556, R11557, R11558, R11559, R11560, R11561, R11562, R11563, R11564, R11565, R11566, R11567, R11568, R11569, R11570, R11571, R11572, R11573, R11574, R11575, R11576, R11577, R11578, R11579, R11580, R11581, R11582, R11583, R11584, R11585, R11586, R11587, R11588, R11589, R11590, R11591, R11592, R11593, R11594, R11595, R11596, R11597, R11598, R11599, R11600, R11601, R11602, R11603, R11604, R11605, R11606, R11607, R11608, R11609, R11610, R11611, R11612, R11613, R11614, R11615, R11616, R11617, R11618, R11619, R11620, R11621, R11622, R11623, R11624, R11625, R11626, R11627, R11628, R11629, R11630, R11631, R11632, R11633, R11634, R11635, R11636, R11637, R11638, R11639, R11640, R11641, R11642, R11643, R11644, R11645, R12, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 72];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [73, 73];
  s0 -> s1 [74, 65535];
  s1 -> s1 [0, 72];
  s1 -> s2 [73, 73];
  s1 -> s1 [74, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R21 += 1 };
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s1 [0, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R11567 += 1, R19 += 1 };
  s0 -> s0 [0, 65535] { R11566 += 1, R11567 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R11567 += 1, R19 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 72] { R11569 += 1 };
  s0 -> s0 [0, 65535] { R11568 += 1, R11569 += 1 };
  s0 -> s2 [73, 73] { R11569 += 1 };
  s0 -> s3 [73, 73] { R11569 += 1 };
  s0 -> s1 [78, 65535] { R11569 += 1 };
  s1 -> s1 [0, 72] { R11569 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R11569 += 1 };
  s1 -> s3 [73, 73] { R11569 += 1 };
  s1 -> s1 [78, 65535] { R11569 += 1 };
  s2 -> s2 [0, 73] { R11569 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [78, 65535] { R11569 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 72] { R11571 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R11570 += 1, R11571 += 1 };
  s0 -> s2 [73, 73] { R11571 += 1, R38 += 1 };
  s0 -> s3 [73, 73] { R11571 += 1, R38 += 1 };
  s0 -> s1 [74, 65535] { R11571 += 1, R38 += 1 };
  s1 -> s1 [0, 72] { R11571 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R11571 += 1, R38 += 1 };
  s1 -> s3 [73, 73] { R11571 += 1, R38 += 1 };
  s1 -> s1 [74, 65535] { R11571 += 1, R38 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R11571 += 1, R38 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 72] { R11573 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R11572 += 1, R11573 += 1 };
  s0 -> s2 [73, 73] { R11573 += 1, R40 += 1 };
  s0 -> s3 [73, 73] { R11573 += 1, R40 += 1 };
  s0 -> s1 [74, 65535] { R11573 += 1, R40 += 1 };
  s1 -> s1 [0, 72] { R11573 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R11573 += 1, R40 += 1 };
  s1 -> s3 [73, 73] { R11573 += 1, R40 += 1 };
  s1 -> s1 [74, 65535] { R11573 += 1, R40 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R11573 += 1, R40 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 72] { R11575 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R11574 += 1, R11575 += 1 };
  s0 -> s2 [73, 73] { R11575 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [73, 73] { R11575 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [74, 65535] { R11575 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 72] { R11575 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R11575 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [73, 73] { R11575 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [74, 65535] { R11575 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R11575 += 1, R42 += 1, R43 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 72] { R11577 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R11576 += 1, R11577 += 1 };
  s0 -> s2 [73, 73] { R11577 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [73, 73] { R11577 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [74, 65535] { R11577 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 72] { R11577 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R11577 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [73, 73] { R11577 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [74, 65535] { R11577 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R11577 += 1, R46 += 1, R47 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 72] { R11579 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R11578 += 1, R11579 += 1 };
  s0 -> s2 [73, 73] { R11579 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [73, 73] { R11579 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [74, 65535] { R11579 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 72] { R11579 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R11579 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [73, 73] { R11579 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [74, 65535] { R11579 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R11579 += 1, R52 += 1, R53 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 72] { R11581 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R11580 += 1, R11581 += 1 };
  s0 -> s2 [73, 73] { R11581 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [73, 73] { R11581 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [74, 65535] { R11581 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 72] { R11581 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R11581 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [73, 73] { R11581 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [74, 65535] { R11581 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535] { R11581 += 1, R56 += 1, R57 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 72] { R11583 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R11582 += 1, R11583 += 1 };
  s0 -> s2 [73, 73] { R11583 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [73, 73] { R11583 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [74, 65535] { R11583 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 72] { R11583 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R11583 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [73, 73] { R11583 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [74, 65535] { R11583 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R11583 += 1, R62 += 1, R63 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 72] { R11603 += 1 };
  s0 -> s0 [0, 65535] { R11602 += 1, R11603 += 1 };
  s0 -> s2 [73, 73] { R11603 += 1 };
  s0 -> s1 [74, 65535] { R11603 += 1 };
  s1 -> s1 [0, 72] { R11603 += 1 };
  s1 -> s2 [73, 73] { R11603 += 1 };
  s1 -> s1 [74, 65535] { R11603 += 1 };
  s2 -> s2 [0, 65535] { R11603 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R11604 += 1, R11605 += 1 };
  s0 -> s1 [0, 65535] { R11605 += 1, R1 += 1 };
  s1 -> s1 [0, 65535] { R11605 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 72] { R11607 += 1 };
  s0 -> s0 [0, 65535] { R11606 += 1, R11607 += 1 };
  s0 -> s2 [0, 65535] { R11607 += 1, R8 += 1 };
  s0 -> s3 [73, 73] { R11607 += 1 };
  s0 -> s1 [74, 65535] { R11607 += 1 };
  s1 -> s1 [0, 72] { R11607 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [73, 73] { R11607 += 1 };
  s1 -> s1 [74, 65535] { R11607 += 1 };
  s2 -> s1 [0, 72] { R11607 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R11607 += 1, R8 += 1 };
  s2 -> s3 [73, 73] { R11607 += 1 };
  s2 -> s1 [74, 65535] { R11607 += 1 };
  s3 -> s3 [0, 65535] { R11607 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 72] { R11609 += 1, R11547 += 1 };
  s0 -> s0 [0, 65535] { R11608 += 1, R11609 += 1 };
  s0 -> s2 [0, 65535] { R11609 += 1, R11546 += 1, R11547 += 1 };
  s0 -> s1 [74, 65535] { R11609 += 1, R11547 += 1 };
  s1 -> s1 [0, 72] { R11609 += 1, R11547 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R11609 += 1 };
  s1 -> s1 [74, 65535] { R11609 += 1, R11547 += 1 };
  s2 -> s1 [0, 72] { R11609 += 1, R11547 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R11609 += 1, R11546 += 1, R11547 += 1 };
  s2 -> s1 [74, 65535] { R11609 += 1, R11547 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R11611 += 1, R11549 += 1, R17 += 1 };
  s0 -> s0 [0, 65535] { R11610 += 1, R11611 += 1 };
  s0 -> s2 [0, 65535] { R11611 += 1, R11548 += 1, R11549 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R11611 += 1, R11549 += 1, R17 += 1 };
  s1 -> s4 [0, 65535] { R11611 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R11611 += 1, R11549 += 1, R17 += 1 };
  s2 -> s2 [0, 65535] { R11611 += 1, R11548 += 1, R11549 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R11611 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 73] { R11613 += 1, R11551 += 1 };
  s0 -> s2 [0, 65535] { R11613 += 1, R11550 += 1, R11551 += 1 };
  s0 -> s0 [0, 65535] { R11612 += 1, R11613 += 1 };
  s0 -> s1 [77, 65535] { R11613 += 1, R11551 += 1 };
  s1 -> s1 [0, 73] { R11613 += 1, R11551 += 1 };
  s1 -> s1 [0, 65535] { R11613 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [77, 65535] { R11613 += 1, R11551 += 1 };
  s2 -> s1 [0, 73] { R11613 += 1, R11551 += 1 };
  s2 -> s2 [0, 65535] { R11613 += 1, R11550 += 1, R11551 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [77, 65535] { R11613 += 1, R11551 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R11615 += 1, R11552 += 1, R11553 += 1 };
  s0 -> s2 [0, 65535] { R11615 += 1, R11553 += 1, R67 += 1 };
  s0 -> s0 [0, 65535] { R11614 += 1, R11615 += 1 };
  s1 -> s1 [0, 65535] { R11615 += 1, R11552 += 1, R11553 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R11615 += 1, R11553 += 1, R67 += 1 };
  s2 -> s3 [0, 65535] { R11615 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R11615 += 1, R11553 += 1, R67 += 1 };
  s3 -> s3 [0, 65535] { R11615 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 76] { R11617 += 1, R11555 += 1 };
  s0 -> s2 [0, 65535] { R11617 += 1, R11555 += 1, R69 += 1 };
  s0 -> s0 [0, 65535] { R11616 += 1, R11617 += 1 };
  s0 -> s3 [0, 65535] { R11617 += 1, R11554 += 1, R11555 += 1 };
  s0 -> s1 [78, 65535] { R11617 += 1, R11555 += 1 };
  s1 -> s1 [0, 76] { R11617 += 1, R11555 += 1 };
  s1 -> s1 [0, 65535] { R11617 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [78, 65535] { R11617 += 1, R11555 += 1 };
  s2 -> s1 [0, 76] { R11617 += 1, R11555 += 1 };
  s2 -> s2 [0, 65535] { R11617 += 1, R11555 += 1, R69 += 1 };
  s2 -> s5 [0, 65535] { R11617 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [78, 65535] { R11617 += 1, R11555 += 1 };
  s3 -> s1 [0, 76] { R11617 += 1, R11555 += 1 };
  s3 -> s2 [0, 65535] { R11617 += 1, R11555 += 1, R69 += 1 };
  s3 -> s3 [0, 65535] { R11617 += 1, R11554 += 1, R11555 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [78, 65535] { R11617 += 1, R11555 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R11617 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 76] { R11619 += 1, R11557 += 1, R11525 += 1 };
  s0 -> s2 [0, 65535] { R11619 += 1, R11556 += 1, R11557 += 1 };
  s0 -> s0 [0, 65535] { R11618 += 1, R11619 += 1 };
  s0 -> s1 [0, 65535] { R11619 += 1, R11557 += 1 };
  s0 -> s1 [78, 65535] { R11619 += 1, R11557 += 1, R11525 += 1 };
  s1 -> s1 [0, 76] { R11619 += 1, R11557 += 1, R11525 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R11619 += 1 };
  s1 -> s1 [0, 65535] { R11619 += 1, R11557 += 1 };
  s1 -> s1 [78, 65535] { R11619 += 1, R11557 += 1, R11525 += 1 };
  s2 -> s1 [0, 76] { R11619 += 1, R11557 += 1, R11525 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R11619 += 1, R11556 += 1, R11557 += 1 };
  s2 -> s1 [0, 65535] { R11619 += 1, R11557 += 1 };
  s2 -> s1 [78, 65535] { R11619 += 1, R11557 += 1, R11525 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R11619 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R11621 += 1, R11559 += 1, R11529 += 1, R11530 += 1 };
  s0 -> s2 [0, 65535] { R11621 += 1, R11558 += 1, R11559 += 1 };
  s0 -> s0 [0, 65535] { R11620 += 1, R11621 += 1 };
  s0 -> s3 [0, 65535] { R11621 += 1, R11559 += 1, R11530 += 1, R11531 += 1 };
  s1 -> s4 [0, 65535] { R11621 += 1 };
  s1 -> s1 [0, 65535] { R11621 += 1, R11559 += 1, R11529 += 1, R11530 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R11621 += 1, R11559 += 1, R11530 += 1, R11531 += 1 };
  s2 -> s1 [0, 65535] { R11621 += 1, R11559 += 1, R11529 += 1, R11530 += 1 };
  s2 -> s2 [0, 65535] { R11621 += 1, R11558 += 1, R11559 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R11621 += 1, R11559 += 1, R11530 += 1, R11531 += 1 };
  s3 -> s4 [0, 65535] { R11621 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R11621 += 1, R11559 += 1, R11530 += 1, R11531 += 1 };
  s3 -> s6 [0, 65535] { R11621 += 1, R11559 += 1 };
  s4 -> s4 [0, 65535] { R11621 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R11621 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R11621 += 1, R11559 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 77] { R11623 += 1, R11561 += 1, R11535 += 1 };
  s0 -> s2 [0, 65535] { R11623 += 1, R11560 += 1, R11561 += 1 };
  s0 -> s1 [0, 65535] { R11623 += 1, R11561 += 1 };
  s0 -> s0 [0, 65535] { R11622 += 1, R11623 += 1 };
  s0 -> s1 [85, 65535] { R11623 += 1, R11561 += 1, R11535 += 1 };
  s1 -> s1 [0, 77] { R11623 += 1, R11561 += 1, R11535 += 1 };
  s1 -> s1 [0, 65535] { R11623 += 1, R11561 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R11623 += 1 };
  s1 -> s1 [85, 65535] { R11623 += 1, R11561 += 1, R11535 += 1 };
  s2 -> s1 [0, 77] { R11623 += 1, R11561 += 1, R11535 += 1 };
  s2 -> s2 [0, 65535] { R11623 += 1, R11560 += 1, R11561 += 1 };
  s2 -> s1 [0, 65535] { R11623 += 1, R11561 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [85, 65535] { R11623 += 1, R11561 += 1, R11535 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R11623 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R11625 += 1, R11562 += 1, R11563 += 1 };
  s0 -> s2 [0, 65535] { R11625 += 1, R11563 += 1, R11539 += 1, R11540 += 1 };
  s0 -> s3 [0, 65535] { R11625 += 1, R11563 += 1, R11540 += 1, R11541 += 1 };
  s0 -> s0 [0, 65535] { R11624 += 1, R11625 += 1 };
  s1 -> s1 [0, 65535] { R11625 += 1, R11562 += 1, R11563 += 1 };
  s1 -> s2 [0, 65535] { R11625 += 1, R11563 += 1, R11539 += 1, R11540 += 1 };
  s1 -> s3 [0, 65535] { R11625 += 1, R11563 += 1, R11540 += 1, R11541 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R11625 += 1, R11563 += 1, R11539 += 1, R11540 += 1 };
  s2 -> s3 [0, 65535] { R11625 += 1, R11563 += 1, R11540 += 1, R11541 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R11625 += 1 };
  s3 -> s3 [0, 65535] { R11625 += 1, R11563 += 1, R11540 += 1, R11541 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R11625 += 1 };
  s3 -> s6 [0, 65535] { R11625 += 1, R11563 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R11625 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R11625 += 1 };
  s6 -> s6 [0, 65535] { R11625 += 1, R11563 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 76] { R11627 += 1, R11565 += 1, R11545 += 1 };
  s0 -> s2 [0, 65535] { R11627 += 1, R11565 += 1, R11544 += 1, R11545 += 1 };
  s0 -> s0 [0, 65535] { R11626 += 1, R11627 += 1 };
  s0 -> s3 [0, 65535] { R11627 += 1, R11564 += 1, R11565 += 1 };
  s0 -> s4 [77, 77] { R11627 += 1, R11565 += 1, R11545 += 1 };
  s0 -> s5 [77, 77] { R11627 += 1, R11565 += 1, R11545 += 1 };
  s0 -> s1 [86, 65535] { R11627 += 1, R11565 += 1, R11545 += 1 };
  s1 -> s1 [0, 76] { R11627 += 1, R11565 += 1, R11545 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R11627 += 1, R11565 += 1 };
  s1 -> s7 [0, 65535] { R11627 += 1 };
  s1 -> s4 [77, 77] { R11627 += 1, R11565 += 1, R11545 += 1 };
  s1 -> s5 [77, 77] { R11627 += 1, R11565 += 1, R11545 += 1 };
  s1 -> s1 [86, 65535] { R11627 += 1, R11565 += 1, R11545 += 1 };
  s2 -> s1 [0, 76] { R11627 += 1, R11565 += 1, R11545 += 1 };
  s2 -> s2 [0, 65535] { R11627 += 1, R11565 += 1, R11544 += 1, R11545 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s7 [0, 65535] { R11627 += 1 };
  s2 -> s4 [77, 77] { R11627 += 1, R11565 += 1, R11545 += 1 };
  s2 -> s5 [77, 77] { R11627 += 1, R11565 += 1, R11545 += 1 };
  s2 -> s1 [86, 65535] { R11627 += 1, R11565 += 1, R11545 += 1 };
  s3 -> s1 [0, 76] { R11627 += 1, R11565 += 1, R11545 += 1 };
  s3 -> s2 [0, 65535] { R11627 += 1, R11565 += 1, R11544 += 1, R11545 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R11627 += 1, R11564 += 1, R11565 += 1 };
  s3 -> s4 [77, 77] { R11627 += 1, R11565 += 1, R11545 += 1 };
  s3 -> s5 [77, 77] { R11627 += 1, R11565 += 1, R11545 += 1 };
  s3 -> s1 [86, 65535] { R11627 += 1, R11565 += 1, R11545 += 1 };
  s4 -> s4 [0, 77] { R11627 += 1, R11565 += 1, R11545 += 1 };
  s4 -> s4 [0, 65535] { R11627 += 1, R11565 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R11627 += 1 };
  s4 -> s4 [86, 65535] { R11627 += 1, R11565 += 1, R11545 += 1 };
  s5 -> s5 [0, 65535] { R11627 += 1, R11565 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R11627 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R11627 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R11629 += 1, R11584 += 1, R11585 += 1 };
  s0 -> s2 [0, 65535] { R11629 += 1, R11585 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R11628 += 1, R11629 += 1 };
  s1 -> s1 [0, 65535] { R11629 += 1, R11584 += 1, R11585 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R11629 += 1, R11585 += 1, R18 += 1 };
  s2 -> s3 [0, 65535] { R11629 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R11629 += 1, R11585 += 1, R18 += 1 };
  s3 -> s3 [0, 65535] { R11629 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 72] { R11631 += 1, R11587 += 1 };
  s0 -> s0 [0, 65535] { R11630 += 1, R11631 += 1 };
  s0 -> s2 [0, 65535] { R11631 += 1, R11586 += 1, R11587 += 1 };
  s0 -> s3 [73, 73] { R11631 += 1, R11587 += 1 };
  s0 -> s4 [73, 73] { R11631 += 1, R11587 += 1 };
  s0 -> s5 [77, 77] { R11631 += 1, R11587 += 1 };
  s0 -> s1 [78, 65535] { R11631 += 1, R11587 += 1 };
  s1 -> s1 [0, 72] { R11631 += 1, R11587 += 1 };
  s1 -> s3 [73, 73] { R11631 += 1, R11587 += 1 };
  s1 -> s4 [73, 73] { R11631 += 1, R11587 += 1 };
  s1 -> s5 [77, 77] { R11631 += 1, R11587 += 1 };
  s1 -> s1 [78, 65535] { R11631 += 1, R11587 += 1 };
  s2 -> s1 [0, 72] { R11631 += 1, R11587 += 1 };
  s2 -> s2 [0, 65535] { R11631 += 1, R11586 += 1, R11587 += 1 };
  s2 -> s3 [73, 73] { R11631 += 1, R11587 += 1 };
  s2 -> s4 [73, 73] { R11631 += 1, R11587 += 1 };
  s2 -> s5 [77, 77] { R11631 += 1, R11587 += 1 };
  s2 -> s1 [78, 65535] { R11631 += 1, R11587 += 1 };
  s3 -> s3 [0, 73] { R11631 += 1, R11587 += 1 };
  s3 -> s7 [77, 77] { R11631 += 1, R11587 += 1 };
  s3 -> s3 [78, 65535] { R11631 += 1, R11587 += 1 };
  s5 -> s5 [0, 72] { R11631 += 1, R11587 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R11631 += 1 };
  s5 -> s7 [73, 73] { R11631 += 1, R11587 += 1 };
  s5 -> s8 [73, 73] { R11631 += 1, R11587 += 1 };
  s5 -> s5 [77, 65535] { R11631 += 1, R11587 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 73] { R11631 += 1, R11587 += 1 };
  s7 -> s7 [0, 65535] { R11631 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [77, 65535] { R11631 += 1, R11587 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R11631 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 72] { R11633 += 1, R11589 += 1, R66 += 1 };
  s0 -> s2 [0, 65535] { R11633 += 1, R11588 += 1, R11589 += 1 };
  s0 -> s0 [0, 65535] { R11632 += 1, R11633 += 1 };
  s0 -> s3 [73, 73] { R11633 += 1, R11589 += 1, R66 += 1 };
  s0 -> s4 [73, 73] { R11633 += 1, R11589 += 1, R66 += 1 };
  s0 -> s1 [74, 65535] { R11633 += 1, R11589 += 1, R66 += 1 };
  s1 -> s1 [0, 72] { R11633 += 1, R11589 += 1, R66 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R11633 += 1 };
  s1 -> s3 [73, 73] { R11633 += 1, R11589 += 1, R66 += 1 };
  s1 -> s4 [73, 73] { R11633 += 1, R11589 += 1, R66 += 1 };
  s1 -> s1 [74, 65535] { R11633 += 1, R11589 += 1, R66 += 1 };
  s2 -> s1 [0, 72] { R11633 += 1, R11589 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R11633 += 1, R11588 += 1, R11589 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R11633 += 1, R11589 += 1, R66 += 1 };
  s2 -> s4 [73, 73] { R11633 += 1, R11589 += 1, R66 += 1 };
  s2 -> s1 [74, 65535] { R11633 += 1, R11589 += 1, R66 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R11633 += 1 };
  s3 -> s3 [0, 65535] { R11633 += 1, R11589 += 1, R66 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R11633 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R11633 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 72] { R11635 += 1, R11591 += 1, R68 += 1 };
  s0 -> s0 [0, 65535] { R11634 += 1, R11635 += 1 };
  s0 -> s2 [0, 65535] { R11635 += 1, R11590 += 1, R11591 += 1 };
  s0 -> s3 [73, 73] { R11635 += 1, R11591 += 1, R68 += 1 };
  s0 -> s4 [73, 73] { R11635 += 1, R11591 += 1, R68 += 1 };
  s0 -> s1 [74, 65535] { R11635 += 1, R11591 += 1, R68 += 1 };
  s1 -> s1 [0, 72] { R11635 += 1, R11591 += 1, R68 += 1 };
  s1 -> s1 [0, 65535] { R11635 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [73, 73] { R11635 += 1, R11591 += 1, R68 += 1 };
  s1 -> s4 [73, 73] { R11635 += 1, R11591 += 1, R68 += 1 };
  s1 -> s1 [74, 65535] { R11635 += 1, R11591 += 1, R68 += 1 };
  s2 -> s1 [0, 72] { R11635 += 1, R11591 += 1, R68 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R11635 += 1, R11590 += 1, R11591 += 1 };
  s2 -> s3 [73, 73] { R11635 += 1, R11591 += 1, R68 += 1 };
  s2 -> s4 [73, 73] { R11635 += 1, R11591 += 1, R68 += 1 };
  s2 -> s1 [74, 65535] { R11635 += 1, R11591 += 1, R68 += 1 };
  s3 -> s3 [0, 65535] { R11635 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R11635 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R11635 += 1, R11591 += 1, R68 += 1 };
  s5 -> s5 [0, 65535] { R11635 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 72] { R11637 += 1, R11593 += 1, R11523 += 1 };
  s0 -> s2 [0, 72] { R11637 += 1, R11593 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s3 [0, 65535] { R11637 += 1, R11592 += 1, R11593 += 1 };
  s0 -> s0 [0, 65535] { R11636 += 1, R11637 += 1 };
  s0 -> s4 [73, 73] { R11637 += 1, R11593 += 1, R11523 += 1 };
  s0 -> s5 [73, 73] { R11637 += 1, R11593 += 1, R11523 += 1 };
  s0 -> s6 [73, 73] { R11637 += 1, R11593 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s7 [73, 73] { R11637 += 1, R11593 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s1 [74, 76] { R11637 += 1, R11593 += 1, R11523 += 1 };
  s0 -> s2 [74, 65535] { R11637 += 1, R11593 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s1 [78, 65535] { R11637 += 1, R11593 += 1, R11523 += 1 };
  s1 -> s1 [0, 72] { R11637 += 1, R11593 += 1, R11523 += 1 };
  s1 -> s1 [0, 65535] { R11637 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s4 [73, 73] { R11637 += 1, R11593 += 1 };
  s1 -> s5 [73, 73] { R11637 += 1, R11593 += 1 };
  s1 -> s1 [74, 76] { R11637 += 1, R11593 += 1, R11523 += 1 };
  s1 -> s1 [74, 65535] { R11637 += 1, R11593 += 1 };
  s1 -> s1 [78, 65535] { R11637 += 1, R11593 += 1, R11523 += 1 };
  s2 -> s1 [0, 72] { R11637 += 1, R11593 += 1, R11523 += 1 };
  s2 -> s2 [0, 72] { R11637 += 1, R11593 += 1, R11522 += 1, R11523 += 1 };
  s2 -> s4 [73, 73] { R11637 += 1, R11593 += 1, R11523 += 1 };
  s2 -> s5 [73, 73] { R11637 += 1, R11593 += 1, R11523 += 1 };
  s2 -> s6 [73, 73] { R11637 += 1, R11593 += 1, R11522 += 1, R11523 += 1 };
  s2 -> s7 [73, 73] { R11637 += 1, R11593 += 1, R11522 += 1, R11523 += 1 };
  s2 -> s1 [74, 76] { R11637 += 1, R11593 += 1, R11523 += 1 };
  s2 -> s2 [74, 65535] { R11637 += 1, R11593 += 1, R11522 += 1, R11523 += 1 };
  s2 -> s1 [78, 65535] { R11637 += 1, R11593 += 1, R11523 += 1 };
  s3 -> s1 [0, 72] { R11637 += 1, R11593 += 1, R11523 += 1 };
  s3 -> s2 [0, 72] { R11637 += 1, R11593 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s3 [0, 65535] { R11637 += 1, R11592 += 1, R11593 += 1 };
  s3 -> s4 [73, 73] { R11637 += 1, R11593 += 1, R11523 += 1 };
  s3 -> s5 [73, 73] { R11637 += 1, R11593 += 1, R11523 += 1 };
  s3 -> s6 [73, 73] { R11637 += 1, R11593 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s7 [73, 73] { R11637 += 1, R11593 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s1 [74, 76] { R11637 += 1, R11593 += 1, R11523 += 1 };
  s3 -> s2 [74, 65535] { R11637 += 1, R11593 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s1 [78, 65535] { R11637 += 1, R11593 += 1, R11523 += 1 };
  s4 -> s4 [0, 76] { R11637 += 1, R11593 += 1, R11523 += 1 };
  s4 -> s4 [0, 65535] { R11637 += 1, R11593 += 1 };
  s4 -> s9 [0, 65535] { R11637 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s4 [78, 65535] { R11637 += 1, R11593 += 1, R11523 += 1 };
  s5 -> s5 [0, 65535] { R11637 += 1 };
  s5 -> s8 [0, 65535];
  s6 -> s4 [0, 76] { R11637 += 1, R11593 += 1, R11523 += 1 };
  s6 -> s6 [0, 65535] { R11637 += 1, R11593 += 1, R11522 += 1, R11523 += 1 };
  s6 -> s4 [78, 65535] { R11637 += 1, R11593 += 1, R11523 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R11637 += 1 };
  s9 -> s8 [0, 65535];
  accepting s4, s8, s5, s9, s1;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 72] { R11639 += 1, R11595 += 1, R11526 += 1, R11527 += 1 };
  s0 -> s2 [0, 65535] { R11639 += 1, R11594 += 1, R11595 += 1 };
  s0 -> s0 [0, 65535] { R11638 += 1, R11639 += 1 };
  s0 -> s3 [73, 73] { R11639 += 1, R11595 += 1, R11526 += 1, R11527 += 1 };
  s0 -> s4 [73, 73] { R11639 += 1, R11595 += 1, R11526 += 1, R11527 += 1 };
  s0 -> s1 [74, 65535] { R11639 += 1, R11595 += 1, R11526 += 1, R11527 += 1 };
  s1 -> s1 [0, 72] { R11639 += 1, R11595 += 1, R11526 += 1, R11527 += 1 };
  s1 -> s1 [0, 65535] { R11639 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R11639 += 1, R11595 += 1, R11526 += 1, R11527 += 1 };
  s1 -> s4 [73, 73] { R11639 += 1, R11595 += 1, R11526 += 1, R11527 += 1 };
  s1 -> s1 [74, 65535] { R11639 += 1, R11595 += 1, R11526 += 1, R11527 += 1 };
  s2 -> s1 [0, 72] { R11639 += 1, R11595 += 1, R11526 += 1, R11527 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R11639 += 1, R11594 += 1, R11595 += 1 };
  s2 -> s3 [73, 73] { R11639 += 1, R11595 += 1, R11526 += 1, R11527 += 1 };
  s2 -> s4 [73, 73] { R11639 += 1, R11595 += 1, R11526 += 1, R11527 += 1 };
  s2 -> s1 [74, 65535] { R11639 += 1, R11595 += 1, R11526 += 1, R11527 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R11639 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R11639 += 1, R11595 += 1, R11526 += 1, R11527 += 1 };
  s4 -> s6 [0, 65535] { R11639 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R11639 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 72] { R11641 += 1, R11597 += 1, R11532 += 1, R11533 += 1 };
  s0 -> s2 [0, 72] { R11641 += 1, R11597 += 1, R11533 += 1 };
  s0 -> s0 [0, 65535] { R11640 += 1, R11641 += 1 };
  s0 -> s3 [0, 65535] { R11641 += 1, R11596 += 1, R11597 += 1 };
  s0 -> s4 [73, 73] { R11641 += 1, R11597 += 1, R11532 += 1, R11533 += 1 };
  s0 -> s5 [73, 73] { R11641 += 1, R11597 += 1, R11533 += 1 };
  s0 -> s6 [73, 73] { R11641 += 1, R11597 += 1, R11532 += 1, R11533 += 1 };
  s0 -> s7 [73, 73] { R11641 += 1, R11597 += 1, R11533 += 1 };
  s0 -> s2 [74, 77] { R11641 += 1, R11597 += 1, R11533 += 1 };
  s0 -> s1 [74, 65535] { R11641 += 1, R11597 += 1, R11532 += 1, R11533 += 1 };
  s0 -> s8 [85, 85] { R11641 += 1, R11597 += 1, R11533 += 1 };
  s0 -> s2 [86, 65535] { R11641 += 1, R11597 += 1, R11533 += 1 };
  s1 -> s1 [0, 72] { R11641 += 1, R11597 += 1, R11532 += 1, R11533 += 1 };
  s1 -> s2 [0, 72] { R11641 += 1, R11597 += 1, R11533 += 1 };
  s1 -> s4 [73, 73] { R11641 += 1, R11597 += 1, R11532 += 1, R11533 += 1 };
  s1 -> s5 [73, 73] { R11641 += 1, R11597 += 1, R11533 += 1 };
  s1 -> s6 [73, 73] { R11641 += 1, R11597 += 1, R11532 += 1, R11533 += 1 };
  s1 -> s7 [73, 73] { R11641 += 1, R11597 += 1, R11533 += 1 };
  s1 -> s2 [74, 77] { R11641 += 1, R11597 += 1, R11533 += 1 };
  s1 -> s1 [74, 65535] { R11641 += 1, R11597 += 1, R11532 += 1, R11533 += 1 };
  s1 -> s8 [85, 85] { R11641 += 1, R11597 += 1, R11533 += 1 };
  s1 -> s2 [86, 65535] { R11641 += 1, R11597 += 1, R11533 += 1 };
  s2 -> s2 [0, 72] { R11641 += 1, R11597 += 1, R11533 += 1 };
  s2 -> s5 [73, 73] { R11641 += 1, R11597 += 1, R11533 += 1 };
  s2 -> s7 [73, 73] { R11641 += 1, R11597 += 1, R11533 += 1 };
  s2 -> s2 [74, 77] { R11641 += 1, R11597 += 1, R11533 += 1 };
  s2 -> s8 [85, 85] { R11641 += 1, R11597 += 1, R11533 += 1 };
  s2 -> s2 [86, 65535] { R11641 += 1, R11597 += 1, R11533 += 1 };
  s3 -> s1 [0, 72] { R11641 += 1, R11597 += 1, R11532 += 1, R11533 += 1 };
  s3 -> s2 [0, 72] { R11641 += 1, R11597 += 1, R11533 += 1 };
  s3 -> s3 [0, 65535] { R11641 += 1, R11596 += 1, R11597 += 1 };
  s3 -> s4 [73, 73] { R11641 += 1, R11597 += 1, R11532 += 1, R11533 += 1 };
  s3 -> s5 [73, 73] { R11641 += 1, R11597 += 1, R11533 += 1 };
  s3 -> s6 [73, 73] { R11641 += 1, R11597 += 1, R11532 += 1, R11533 += 1 };
  s3 -> s7 [73, 73] { R11641 += 1, R11597 += 1, R11533 += 1 };
  s3 -> s2 [74, 77] { R11641 += 1, R11597 += 1, R11533 += 1 };
  s3 -> s1 [74, 65535] { R11641 += 1, R11597 += 1, R11532 += 1, R11533 += 1 };
  s3 -> s8 [85, 85] { R11641 += 1, R11597 += 1, R11533 += 1 };
  s3 -> s2 [86, 65535] { R11641 += 1, R11597 += 1, R11533 += 1 };
  s5 -> s5 [0, 77] { R11641 += 1, R11597 += 1, R11533 += 1 };
  s5 -> s11 [85, 85] { R11641 += 1, R11597 += 1, R11533 += 1 };
  s5 -> s5 [86, 65535] { R11641 += 1, R11597 += 1, R11533 += 1 };
  s6 -> s5 [0, 77] { R11641 += 1, R11597 += 1, R11533 += 1 };
  s6 -> s6 [0, 65535] { R11641 += 1, R11597 += 1, R11532 += 1, R11533 += 1 };
  s6 -> s11 [85, 85] { R11641 += 1, R11597 += 1, R11533 += 1 };
  s6 -> s5 [86, 65535] { R11641 += 1, R11597 += 1, R11533 += 1 };
  s8 -> s8 [0, 72] { R11641 += 1, R11597 += 1, R11533 += 1 };
  s8 -> s8 [0, 65535] { R11641 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [73, 73] { R11641 += 1, R11597 += 1 };
  s8 -> s11 [73, 73] { R11641 += 1, R11597 += 1 };
  s8 -> s8 [74, 77] { R11641 += 1, R11597 += 1, R11533 += 1 };
  s8 -> s8 [74, 65535] { R11641 += 1, R11597 += 1 };
  s8 -> s8 [85, 65535] { R11641 += 1, R11597 += 1, R11533 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R11641 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s11 [0, 77] { R11641 += 1, R11597 += 1, R11533 += 1 };
  s11 -> s12 [0, 65535] { R11641 += 1 };
  s11 -> s11 [0, 65535] { R11641 += 1, R11597 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [85, 65535] { R11641 += 1, R11597 += 1, R11533 += 1 };
  s12 -> s12 [0, 65535] { R11641 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 72] { R11643 += 1, R11599 += 1, R11536 += 1, R11537 += 1 };
  s0 -> s0 [0, 65535] { R11642 += 1, R11643 += 1 };
  s0 -> s2 [0, 65535] { R11643 += 1, R11598 += 1, R11599 += 1 };
  s0 -> s3 [73, 73] { R11643 += 1, R11599 += 1, R11536 += 1, R11537 += 1 };
  s0 -> s4 [73, 73] { R11643 += 1, R11599 += 1, R11536 += 1, R11537 += 1 };
  s0 -> s1 [74, 65535] { R11643 += 1, R11599 += 1, R11536 += 1, R11537 += 1 };
  s1 -> s1 [0, 72] { R11643 += 1, R11599 += 1, R11536 += 1, R11537 += 1 };
  s1 -> s1 [0, 65535] { R11643 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R11643 += 1, R11599 += 1, R11536 += 1, R11537 += 1 };
  s1 -> s4 [73, 73] { R11643 += 1, R11599 += 1, R11536 += 1, R11537 += 1 };
  s1 -> s1 [74, 65535] { R11643 += 1, R11599 += 1, R11536 += 1, R11537 += 1 };
  s2 -> s1 [0, 72] { R11643 += 1, R11599 += 1, R11536 += 1, R11537 += 1 };
  s2 -> s2 [0, 65535] { R11643 += 1, R11598 += 1, R11599 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R11643 += 1, R11599 += 1, R11536 += 1, R11537 += 1 };
  s2 -> s4 [73, 73] { R11643 += 1, R11599 += 1, R11536 += 1, R11537 += 1 };
  s2 -> s1 [74, 65535] { R11643 += 1, R11599 += 1, R11536 += 1, R11537 += 1 };
  s3 -> s3 [0, 65535] { R11643 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R11643 += 1 };
  s4 -> s4 [0, 65535] { R11643 += 1, R11599 += 1, R11536 += 1, R11537 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R11643 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 72] { R11645 += 1, R11601 += 1, R11542 += 1, R11543 += 1 };
  s0 -> s0 [0, 65535] { R11644 += 1, R11645 += 1 };
  s0 -> s2 [0, 65535] { R11645 += 1, R11600 += 1, R11601 += 1 };
  s0 -> s3 [73, 73] { R11645 += 1, R11601 += 1, R11542 += 1, R11543 += 1 };
  s0 -> s4 [73, 73] { R11645 += 1, R11601 += 1, R11542 += 1, R11543 += 1 };
  s0 -> s1 [74, 65535] { R11645 += 1, R11601 += 1, R11542 += 1, R11543 += 1 };
  s1 -> s1 [0, 72] { R11645 += 1, R11601 += 1, R11542 += 1, R11543 += 1 };
  s1 -> s1 [0, 65535] { R11645 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R11645 += 1, R11601 += 1, R11542 += 1, R11543 += 1 };
  s1 -> s4 [73, 73] { R11645 += 1, R11601 += 1, R11542 += 1, R11543 += 1 };
  s1 -> s1 [74, 65535] { R11645 += 1, R11601 += 1, R11542 += 1, R11543 += 1 };
  s2 -> s1 [0, 72] { R11645 += 1, R11601 += 1, R11542 += 1, R11543 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R11645 += 1, R11600 += 1, R11601 += 1 };
  s2 -> s3 [73, 73] { R11645 += 1, R11601 += 1, R11542 += 1, R11543 += 1 };
  s2 -> s4 [73, 73] { R11645 += 1, R11601 += 1, R11542 += 1, R11543 += 1 };
  s2 -> s1 [74, 65535] { R11645 += 1, R11601 += 1, R11542 += 1, R11543 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R11645 += 1, R11601 += 1, R11542 += 1, R11543 += 1 };
  s3 -> s6 [0, 65535] { R11645 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R11645 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R11645 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
synchronised {  // Automata constraining P54
automaton P54_0 {
  init s0;
  s0 -> s1 [109, 109];
  accepting s1;
};
};
constraint R2 = R11645 && R20 - R11645 = -1 && R21 = R11645 && R22 - R11645 = -1 && R23 = R11645 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R11535 + -1*R11533 - R53 = 0 && R52 + R11534 + R11532 = 0 && R11586 = 0 && R11587 = 0 && R11592 = 0 && R11593 = 0 && R11596 = 0 && R11597 = 0 && R11602 = 0 && R11603 = R11645 && R11604 = 0 && R11605 = R11645 && R11606 = 0 && R11607 = R11645 && R11608 = 0 && R11609 = R11645 && R11610 = 0 && R11611 = R11645 && R11612 = 0 && R11613 = R11645 && R11614 = 0 && R11615 = R11645 && R11616 = 0 && R11617 = R11645 && R11618 = 0 && R11619 = R11645 && R11620 = 0 && R11621 = R11645 && R11622 = 0 && R11623 = R11645 && R11624 = 0 && R11625 = R11645 && R11626 = 0 && R11627 = R11645 && R11628 = 0 && R11629 = R11645 && R11630 = 0 && R11631 = R11645 && R11632 = 0 && R11633 = R11645 && R11634 = 0 && R11635 = R11645 && R11636 = 0 && R11637 = R11645 && R11638 = 0 && R11639 = R11645 && R11640 = 0 && R11641 = R11645 && R11642 = 0 && R11643 = R11645 && R11644 = 0 && -1 < R1 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R11535 + -1*R11533 - R53 < 1 && 0 < R11645 && (R1 != 0 || R17 = 0 || (R11546 = 0 && R11547 = 0)) && (R1 != 0 || R17 = 0 || (R11548 = 0 && R11549 = 0)) && (R1 != 0 || R17 = 0 || (R11550 = 0 && R11551 = 0)) && (R1 != 0 || R17 = 0 || (R11552 = 0 && R11553 = 0)) && (R1 != 0 || R17 = 0 || (R11554 = 0 && R11555 = 0)) && (R1 != 0 || R17 = 0 || (R11556 = 0 && R11557 = 0)) && (R1 != 0 || R17 = 0 || (R11558 = 0 && R11559 = 0)) && (R1 != 0 || R17 = 0 || (R11560 = 0 && R11561 = 0)) && (R1 != 0 || R17 = 0 || (R11562 = 0 && R11563 = 0)) && (R1 != 0 || R17 = 0 || (R11564 = 0 && R11565 = 0)) && (R48 + R11531 + R11528 != 0 || ((R42 + R11524 + R11522 != 0 || R43 + R11525 + R11523 + -1*R11535 + -1*R11533 - R53 = 0 || R53 + R11535 + R11533 < 1) && (R42 + R11524 + R11522 = 0 || R53 + R11535 + R11533 < 1))) && (R48 + R11531 + R11528 != 0 || ((R46 + R11529 + R11526 != 0 || R47 + R11530 + R11527 + -1*R11535 + -1*R11533 - R53 = 0 || R53 + R11535 + R11533 < 1) && (R46 + R11529 + R11526 = 0 || R53 + R11535 + R11533 < 1))) && (R11546 != 0 || R1 = R11547 || R1 < 1) && (R11548 != 0 || R1 = R11549 || R1 < 1) && (R11550 != 0 || R1 = R11551 || R1 < 1) && (R11552 != 0 || R1 = R11553 || R1 < 1) && (R11554 != 0 || R1 = R11555 || R1 < 1) && (R11556 != 0 || R1 = R11557 || R1 < 1) && (R11558 != 0 || R1 = R11559 || R1 < 1) && (R11560 != 0 || R1 = R11561 || R1 < 1) && (R11562 != 0 || R1 = R11563 || R1 < 1) && (R11564 != 0 || R1 = R11565 || R1 < 1) && (R18 = 0 || (R11584 = 0 && R11585 = 0)) && (R18 = 0 || (R11588 = 0 && R11589 = 0)) && (R18 = 0 || (R11590 = 0 && R11591 = 0)) && (R18 = 0 || (R11594 = 0 && R11595 = 0)) && (R18 = 0 || (R11598 = 0 && R11599 = 0)) && (R18 = 0 || (R11600 = 0 && R11601 = 0)) && (R19 = 0 || (R11566 = 0 && R11567 = 0)) && (R19 = 0 || (R11568 = 0 && R11569 = 0)) && (R19 = 0 || (R11570 = 0 && R11571 = 0)) && (R19 = 0 || (R11572 = 0 && R11573 = 0)) && (R19 = 0 || (R11574 = 0 && R11575 = 0)) && (R19 = 0 || (R11576 = 0 && R11577 = 0)) && (R19 = 0 || (R11578 = 0 && R11579 = 0)) && (R19 = 0 || (R11580 = 0 && R11581 = 0)) && (R19 = 0 || (R11582 = 0 && R11583 = 0)) && (R48 + R11531 + R11528 = 0 || (R42 + R11524 + R11522 = 0 && R43 + R11525 + R11523 + -1*R11535 + -1*R11533 - R53 = 0)) && (R48 + R11531 + R11528 = 0 || (R46 + R11529 + R11526 = 0 && R47 + R11530 + R11527 + -1*R11535 + -1*R11533 - R53 = 0)) && (R58 + R11541 + R11538 = 0 || (R56 + R11539 + R11536 = 0 && R57 + R11540 + R11537 = 0)) && (R58 + R11541 + R11538 = 0 || (R62 + R11544 + R11542 = 0 && R63 + R11545 + R11543 = 0)) && (R11546 = 0 || R1 < 1) && (R11548 = 0 || R1 < 1) && (R11550 = 0 || R1 < 1) && (R11552 = 0 || R1 < 1) && (R11554 = 0 || R1 < 1) && (R11556 = 0 || R1 < 1) && (R11558 = 0 || R1 < 1) && (R11560 = 0 || R1 < 1) && (R11562 = 0 || R1 < 1) && (R11564 = 0 || R1 < 1);
// End of Parikh automata intersection problem
