// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R12, R1350, R1351, R1352, R1353, R17, R18, R19, R2, R20, R21, R2198, R2199, R22, R2200, R2201, R2202, R2203, R23, R24, R2412, R2413, R2414, R2415, R2416, R2417, R2418, R2419, R2420, R2421, R2422, R2423, R2424, R2425, R2426, R2427, R2428, R2429, R2430, R2431, R2432, R2433, R2434, R2435, R2436, R2437, R2438, R2439, R2440, R2441, R2442, R2443, R2444, R2445, R2446, R2447, R2448, R2449, R2450, R2451, R2452, R2453, R2454, R2455, R2456, R2457, R2458, R2459, R2460, R2461, R2462, R2463, R2464, R2465, R2466, R2467, R2468, R2469, R2470, R2471, R2472, R2473, R2474, R2475, R2476, R2477, R2478, R2479, R2480, R2481, R2482, R2483, R2484, R2485, R2486, R2487, R2488, R2489, R2490, R2491, R2492, R2493, R2494, R2495, R2496, R2497, R2498, R2499, R25, R2500, R2501, R2502, R2503, R2504, R2505, R2506, R2507, R2508, R2509, R2510, R2511, R2512, R2513, R2514, R2515, R26, R27, R3, R38, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R70, R71, R72, R73, R74, R75, R76, R77, R78, R79, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 72];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [73, 73];
  s0 -> s1 [74, 65535];
  s1 -> s1 [0, 72];
  s1 -> s2 [73, 73];
  s1 -> s1 [74, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R21 += 1 };
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s1 [0, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R2437 += 1, R19 += 1 };
  s0 -> s0 [0, 65535] { R2436 += 1, R2437 += 1 };
  s1 -> s1 [0, 65535] { R2437 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 72] { R2439 += 1 };
  s0 -> s0 [0, 65535] { R2438 += 1, R2439 += 1 };
  s0 -> s2 [73, 73] { R2439 += 1 };
  s0 -> s3 [73, 73] { R2439 += 1 };
  s0 -> s1 [78, 65535] { R2439 += 1 };
  s1 -> s1 [0, 72] { R2439 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R2439 += 1 };
  s1 -> s3 [73, 73] { R2439 += 1 };
  s1 -> s1 [78, 65535] { R2439 += 1 };
  s2 -> s2 [0, 73] { R2439 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [78, 65535] { R2439 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 72] { R2441 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R2440 += 1, R2441 += 1 };
  s0 -> s2 [73, 73] { R2441 += 1, R38 += 1 };
  s0 -> s3 [73, 73] { R2441 += 1, R38 += 1 };
  s0 -> s1 [74, 65535] { R2441 += 1, R38 += 1 };
  s1 -> s1 [0, 72] { R2441 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R2441 += 1, R38 += 1 };
  s1 -> s3 [73, 73] { R2441 += 1, R38 += 1 };
  s1 -> s1 [74, 65535] { R2441 += 1, R38 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2441 += 1, R38 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 72] { R2443 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R2442 += 1, R2443 += 1 };
  s0 -> s2 [73, 73] { R2443 += 1, R40 += 1 };
  s0 -> s3 [73, 73] { R2443 += 1, R40 += 1 };
  s0 -> s1 [74, 65535] { R2443 += 1, R40 += 1 };
  s1 -> s1 [0, 72] { R2443 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R2443 += 1, R40 += 1 };
  s1 -> s3 [73, 73] { R2443 += 1, R40 += 1 };
  s1 -> s1 [74, 65535] { R2443 += 1, R40 += 1 };
  s2 -> s2 [0, 65535] { R2443 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 72] { R2445 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R2444 += 1, R2445 += 1 };
  s0 -> s2 [73, 73] { R2445 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [73, 73] { R2445 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [74, 65535] { R2445 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 72] { R2445 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R2445 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [73, 73] { R2445 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [74, 65535] { R2445 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R2445 += 1, R42 += 1, R43 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 72] { R2447 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R2446 += 1, R2447 += 1 };
  s0 -> s2 [73, 73] { R2447 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [73, 73] { R2447 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [74, 65535] { R2447 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 72] { R2447 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R2447 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [73, 73] { R2447 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [74, 65535] { R2447 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2447 += 1, R46 += 1, R47 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 72] { R2449 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R2448 += 1, R2449 += 1 };
  s0 -> s2 [73, 73] { R2449 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [73, 73] { R2449 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [74, 65535] { R2449 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 72] { R2449 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R2449 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [73, 73] { R2449 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [74, 65535] { R2449 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535] { R2449 += 1, R52 += 1, R53 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 72] { R2451 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R2450 += 1, R2451 += 1 };
  s0 -> s2 [73, 73] { R2451 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [73, 73] { R2451 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [74, 65535] { R2451 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 72] { R2451 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R2451 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [73, 73] { R2451 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [74, 65535] { R2451 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535] { R2451 += 1, R56 += 1, R57 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 72] { R2453 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R2452 += 1, R2453 += 1 };
  s0 -> s2 [73, 73] { R2453 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [73, 73] { R2453 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [74, 65535] { R2453 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 72] { R2453 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R2453 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [73, 73] { R2453 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [74, 65535] { R2453 += 1, R62 += 1, R63 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2453 += 1, R62 += 1, R63 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 72] { R2473 += 1 };
  s0 -> s0 [0, 65535] { R2472 += 1, R2473 += 1 };
  s0 -> s2 [73, 73] { R2473 += 1 };
  s0 -> s1 [74, 65535] { R2473 += 1 };
  s1 -> s1 [0, 72] { R2473 += 1 };
  s1 -> s2 [73, 73] { R2473 += 1 };
  s1 -> s1 [74, 65535] { R2473 += 1 };
  s2 -> s2 [0, 65535] { R2473 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R2474 += 1, R2475 += 1 };
  s0 -> s1 [0, 65535] { R2475 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R2475 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 72] { R2477 += 1 };
  s0 -> s2 [0, 65535] { R2477 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R2476 += 1, R2477 += 1 };
  s0 -> s3 [73, 73] { R2477 += 1 };
  s0 -> s1 [74, 65535] { R2477 += 1 };
  s1 -> s1 [0, 72] { R2477 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [73, 73] { R2477 += 1 };
  s1 -> s1 [74, 65535] { R2477 += 1 };
  s2 -> s1 [0, 72] { R2477 += 1 };
  s2 -> s2 [0, 65535] { R2477 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [73, 73] { R2477 += 1 };
  s2 -> s1 [74, 65535] { R2477 += 1 };
  s3 -> s3 [0, 65535] { R2477 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 72] { R2479 += 1, R2417 += 1 };
  s0 -> s0 [0, 65535] { R2478 += 1, R2479 += 1 };
  s0 -> s2 [0, 65535] { R2479 += 1, R2416 += 1, R2417 += 1 };
  s0 -> s1 [74, 65535] { R2479 += 1, R2417 += 1 };
  s1 -> s1 [0, 72] { R2479 += 1, R2417 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R2479 += 1 };
  s1 -> s1 [74, 65535] { R2479 += 1, R2417 += 1 };
  s2 -> s1 [0, 72] { R2479 += 1, R2417 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R2479 += 1, R2416 += 1, R2417 += 1 };
  s2 -> s1 [74, 65535] { R2479 += 1, R2417 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s0 [0, 65535] { R2480 += 1, R2481 += 1 };
  s0 -> s1 [0, 65535] { R2481 += 1, R2419 += 1, R17 += 1 };
  s0 -> s2 [0, 65535] { R2481 += 1, R2418 += 1, R2419 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R2481 += 1 };
  s1 -> s1 [0, 65535] { R2481 += 1, R2419 += 1, R17 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R2481 += 1, R2419 += 1, R17 += 1 };
  s2 -> s2 [0, 65535] { R2481 += 1, R2418 += 1, R2419 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2481 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 73] { R2483 += 1, R2421 += 1 };
  s0 -> s0 [0, 65535] { R2482 += 1, R2483 += 1 };
  s0 -> s2 [0, 65535] { R2483 += 1, R2420 += 1, R2421 += 1 };
  s0 -> s1 [77, 65535] { R2483 += 1, R2421 += 1 };
  s1 -> s1 [0, 73] { R2483 += 1, R2421 += 1 };
  s1 -> s1 [0, 65535] { R2483 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [77, 65535] { R2483 += 1, R2421 += 1 };
  s2 -> s1 [0, 73] { R2483 += 1, R2421 += 1 };
  s2 -> s2 [0, 65535] { R2483 += 1, R2420 += 1, R2421 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [77, 65535] { R2483 += 1, R2421 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R2485 += 1, R2423 += 1, R67 += 1 };
  s0 -> s0 [0, 65535] { R2484 += 1, R2485 += 1 };
  s0 -> s2 [0, 65535] { R2485 += 1, R2422 += 1, R2423 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R2485 += 1, R2423 += 1, R67 += 1 };
  s1 -> s4 [0, 65535] { R2485 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R2485 += 1, R2423 += 1, R67 += 1 };
  s2 -> s2 [0, 65535] { R2485 += 1, R2422 += 1, R2423 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2485 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 76] { R2487 += 1, R2425 += 1 };
  s0 -> s2 [0, 65535] { R2487 += 1, R2425 += 1, R69 += 1 };
  s0 -> s3 [0, 65535] { R2487 += 1, R2424 += 1, R2425 += 1 };
  s0 -> s0 [0, 65535] { R2486 += 1, R2487 += 1 };
  s0 -> s1 [78, 65535] { R2487 += 1, R2425 += 1 };
  s1 -> s1 [0, 76] { R2487 += 1, R2425 += 1 };
  s1 -> s1 [0, 65535] { R2487 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [78, 65535] { R2487 += 1, R2425 += 1 };
  s2 -> s1 [0, 76] { R2487 += 1, R2425 += 1 };
  s2 -> s2 [0, 65535] { R2487 += 1, R2425 += 1, R69 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R2487 += 1 };
  s2 -> s1 [78, 65535] { R2487 += 1, R2425 += 1 };
  s3 -> s1 [0, 76] { R2487 += 1, R2425 += 1 };
  s3 -> s2 [0, 65535] { R2487 += 1, R2425 += 1, R69 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2487 += 1, R2424 += 1, R2425 += 1 };
  s3 -> s1 [78, 65535] { R2487 += 1, R2425 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2487 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 76] { R2489 += 1, R2427 += 1, R73 += 1 };
  s0 -> s2 [0, 65535] { R2489 += 1, R2427 += 1, R72 += 1, R73 += 1 };
  s0 -> s3 [0, 65535] { R2489 += 1, R2426 += 1, R2427 += 1 };
  s0 -> s0 [0, 65535] { R2488 += 1, R2489 += 1 };
  s0 -> s1 [78, 65535] { R2489 += 1, R2427 += 1, R73 += 1 };
  s1 -> s1 [0, 76] { R2489 += 1, R2427 += 1, R73 += 1 };
  s1 -> s1 [0, 65535] { R2489 += 1, R2427 += 1 };
  s1 -> s5 [0, 65535] { R2489 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [78, 65535] { R2489 += 1, R2427 += 1, R73 += 1 };
  s2 -> s1 [0, 76] { R2489 += 1, R2427 += 1, R73 += 1 };
  s2 -> s2 [0, 65535] { R2489 += 1, R2427 += 1, R72 += 1, R73 += 1 };
  s2 -> s5 [0, 65535] { R2489 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [78, 65535] { R2489 += 1, R2427 += 1, R73 += 1 };
  s3 -> s1 [0, 76] { R2489 += 1, R2427 += 1, R73 += 1 };
  s3 -> s2 [0, 65535] { R2489 += 1, R2427 += 1, R72 += 1, R73 += 1 };
  s3 -> s3 [0, 65535] { R2489 += 1, R2426 += 1, R2427 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [78, 65535] { R2489 += 1, R2427 += 1, R73 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2489 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R2491 += 1, R2429 += 1, R78 += 1, R79 += 1 };
  s0 -> s2 [0, 65535] { R2491 += 1, R2429 += 1, R77 += 1, R78 += 1 };
  s0 -> s0 [0, 65535] { R2490 += 1, R2491 += 1 };
  s0 -> s3 [0, 65535] { R2491 += 1, R2428 += 1, R2429 += 1 };
  s1 -> s6 [0, 65535] { R2491 += 1, R2429 += 1 };
  s1 -> s1 [0, 65535] { R2491 += 1, R2429 += 1, R78 += 1, R79 += 1 };
  s1 -> s5 [0, 65535] { R2491 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R2491 += 1, R2429 += 1, R78 += 1, R79 += 1 };
  s2 -> s2 [0, 65535] { R2491 += 1, R2429 += 1, R77 += 1, R78 += 1 };
  s2 -> s5 [0, 65535] { R2491 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R2491 += 1, R2429 += 1, R78 += 1, R79 += 1 };
  s3 -> s2 [0, 65535] { R2491 += 1, R2429 += 1, R77 += 1, R78 += 1 };
  s3 -> s3 [0, 65535] { R2491 += 1, R2428 += 1, R2429 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2491 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R2491 += 1, R2429 += 1 };
  s6 -> s5 [0, 65535] { R2491 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 77] { R2493 += 1, R2431 += 1, R1353 += 1 };
  s0 -> s2 [0, 65535] { R2493 += 1, R2430 += 1, R2431 += 1 };
  s0 -> s3 [0, 65535] { R2493 += 1, R2431 += 1, R1352 += 1, R1353 += 1 };
  s0 -> s0 [0, 65535] { R2492 += 1, R2493 += 1 };
  s0 -> s4 [85, 85] { R2493 += 1, R2431 += 1, R1353 += 1 };
  s0 -> s1 [86, 65535] { R2493 += 1, R2431 += 1, R1353 += 1 };
  s1 -> s1 [0, 77] { R2493 += 1, R2431 += 1, R1353 += 1 };
  s1 -> s4 [85, 85] { R2493 += 1, R2431 += 1, R1353 += 1 };
  s1 -> s1 [86, 65535] { R2493 += 1, R2431 += 1, R1353 += 1 };
  s2 -> s1 [0, 77] { R2493 += 1, R2431 += 1, R1353 += 1 };
  s2 -> s2 [0, 65535] { R2493 += 1, R2430 += 1, R2431 += 1 };
  s2 -> s3 [0, 65535] { R2493 += 1, R2431 += 1, R1352 += 1, R1353 += 1 };
  s2 -> s4 [85, 85] { R2493 += 1, R2431 += 1, R1353 += 1 };
  s2 -> s1 [86, 65535] { R2493 += 1, R2431 += 1, R1353 += 1 };
  s3 -> s1 [0, 77] { R2493 += 1, R2431 += 1, R1353 += 1 };
  s3 -> s3 [0, 65535] { R2493 += 1, R2431 += 1, R1352 += 1, R1353 += 1 };
  s3 -> s4 [85, 85] { R2493 += 1, R2431 += 1, R1353 += 1 };
  s3 -> s1 [86, 65535] { R2493 += 1, R2431 += 1, R1353 += 1 };
  s4 -> s4 [0, 77] { R2493 += 1, R2431 += 1, R1353 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R2493 += 1 };
  s4 -> s4 [0, 65535] { R2493 += 1, R2431 += 1 };
  s4 -> s4 [85, 65535] { R2493 += 1, R2431 += 1, R1353 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2493 += 1 };
  accepting s4, s5, s6;
};
automaton value2_28 {
  init s0;
  s0 -> s0 [0, 65535] { R2494 += 1, R2495 += 1 };
  s0 -> s1 [0, 65535] { R2495 += 1, R2432 += 1, R2433 += 1 };
  s0 -> s2 [0, 65535] { R2495 += 1, R2433 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R2495 += 1, R2432 += 1, R2433 += 1 };
  s1 -> s2 [0, 65535] { R2495 += 1, R2433 += 1 };
  s2 -> s3 [0, 65535] { R2495 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2495 += 1, R2433 += 1 };
  s3 -> s3 [0, 65535] { R2495 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 65535] { R2497 += 1, R2434 += 1, R2435 += 1 };
  s0 -> s2 [0, 65535] { R2497 += 1, R2435 += 1 };
  s0 -> s0 [0, 65535] { R2496 += 1, R2497 += 1 };
  s1 -> s1 [0, 65535] { R2497 += 1, R2434 += 1, R2435 += 1 };
  s1 -> s2 [0, 65535] { R2497 += 1, R2435 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R2497 += 1 };
  s2 -> s2 [0, 65535] { R2497 += 1, R2435 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2497 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s0 [0, 65535] { R2498 += 1, R2499 += 1 };
  s0 -> s1 [0, 65535] { R2499 += 1, R2454 += 1, R2455 += 1 };
  s0 -> s2 [0, 65535] { R2499 += 1, R2455 += 1, R18 += 1 };
  s1 -> s1 [0, 65535] { R2499 += 1, R2454 += 1, R2455 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R2499 += 1, R2455 += 1, R18 += 1 };
  s2 -> s3 [0, 65535] { R2499 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2499 += 1, R2455 += 1, R18 += 1 };
  s3 -> s3 [0, 65535] { R2499 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 72] { R2501 += 1, R2457 += 1 };
  s0 -> s2 [0, 65535] { R2501 += 1, R2456 += 1, R2457 += 1 };
  s0 -> s0 [0, 65535] { R2500 += 1, R2501 += 1 };
  s0 -> s3 [73, 73] { R2501 += 1, R2457 += 1 };
  s0 -> s4 [73, 73] { R2501 += 1, R2457 += 1 };
  s0 -> s5 [77, 77] { R2501 += 1, R2457 += 1 };
  s0 -> s1 [78, 65535] { R2501 += 1, R2457 += 1 };
  s1 -> s1 [0, 72] { R2501 += 1, R2457 += 1 };
  s1 -> s3 [73, 73] { R2501 += 1, R2457 += 1 };
  s1 -> s4 [73, 73] { R2501 += 1, R2457 += 1 };
  s1 -> s5 [77, 77] { R2501 += 1, R2457 += 1 };
  s1 -> s1 [78, 65535] { R2501 += 1, R2457 += 1 };
  s2 -> s1 [0, 72] { R2501 += 1, R2457 += 1 };
  s2 -> s2 [0, 65535] { R2501 += 1, R2456 += 1, R2457 += 1 };
  s2 -> s3 [73, 73] { R2501 += 1, R2457 += 1 };
  s2 -> s4 [73, 73] { R2501 += 1, R2457 += 1 };
  s2 -> s5 [77, 77] { R2501 += 1, R2457 += 1 };
  s2 -> s1 [78, 65535] { R2501 += 1, R2457 += 1 };
  s4 -> s4 [0, 73] { R2501 += 1, R2457 += 1 };
  s4 -> s8 [77, 77] { R2501 += 1, R2457 += 1 };
  s4 -> s4 [78, 65535] { R2501 += 1, R2457 += 1 };
  s5 -> s5 [0, 72] { R2501 += 1, R2457 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R2501 += 1 };
  s5 -> s7 [73, 73] { R2501 += 1, R2457 += 1 };
  s5 -> s8 [73, 73] { R2501 += 1, R2457 += 1 };
  s5 -> s5 [77, 65535] { R2501 += 1, R2457 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R2501 += 1 };
  s8 -> s8 [0, 73] { R2501 += 1, R2457 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R2501 += 1 };
  s8 -> s8 [77, 65535] { R2501 += 1, R2457 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 72] { R2503 += 1, R2459 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R2502 += 1, R2503 += 1 };
  s0 -> s2 [0, 65535] { R2503 += 1, R2458 += 1, R2459 += 1 };
  s0 -> s3 [73, 73] { R2503 += 1, R2459 += 1, R66 += 1 };
  s0 -> s4 [73, 73] { R2503 += 1, R2459 += 1, R66 += 1 };
  s0 -> s1 [74, 65535] { R2503 += 1, R2459 += 1, R66 += 1 };
  s1 -> s1 [0, 72] { R2503 += 1, R2459 += 1, R66 += 1 };
  s1 -> s1 [0, 65535] { R2503 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R2503 += 1, R2459 += 1, R66 += 1 };
  s1 -> s4 [73, 73] { R2503 += 1, R2459 += 1, R66 += 1 };
  s1 -> s1 [74, 65535] { R2503 += 1, R2459 += 1, R66 += 1 };
  s2 -> s1 [0, 72] { R2503 += 1, R2459 += 1, R66 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2503 += 1, R2458 += 1, R2459 += 1 };
  s2 -> s3 [73, 73] { R2503 += 1, R2459 += 1, R66 += 1 };
  s2 -> s4 [73, 73] { R2503 += 1, R2459 += 1, R66 += 1 };
  s2 -> s1 [74, 65535] { R2503 += 1, R2459 += 1, R66 += 1 };
  s3 -> s3 [0, 65535] { R2503 += 1, R2459 += 1, R66 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R2503 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2503 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2503 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 72] { R2505 += 1, R2461 += 1, R68 += 1 };
  s0 -> s2 [0, 65535] { R2505 += 1, R2460 += 1, R2461 += 1 };
  s0 -> s0 [0, 65535] { R2504 += 1, R2505 += 1 };
  s0 -> s3 [73, 73] { R2505 += 1, R2461 += 1, R68 += 1 };
  s0 -> s4 [73, 73] { R2505 += 1, R2461 += 1, R68 += 1 };
  s0 -> s1 [74, 65535] { R2505 += 1, R2461 += 1, R68 += 1 };
  s1 -> s1 [0, 72] { R2505 += 1, R2461 += 1, R68 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R2505 += 1 };
  s1 -> s3 [73, 73] { R2505 += 1, R2461 += 1, R68 += 1 };
  s1 -> s4 [73, 73] { R2505 += 1, R2461 += 1, R68 += 1 };
  s1 -> s1 [74, 65535] { R2505 += 1, R2461 += 1, R68 += 1 };
  s2 -> s1 [0, 72] { R2505 += 1, R2461 += 1, R68 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2505 += 1, R2460 += 1, R2461 += 1 };
  s2 -> s3 [73, 73] { R2505 += 1, R2461 += 1, R68 += 1 };
  s2 -> s4 [73, 73] { R2505 += 1, R2461 += 1, R68 += 1 };
  s2 -> s1 [74, 65535] { R2505 += 1, R2461 += 1, R68 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R2505 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R2505 += 1 };
  s4 -> s4 [0, 65535] { R2505 += 1, R2461 += 1, R68 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2505 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 72] { R2507 += 1, R2463 += 1, R70 += 1, R71 += 1 };
  s0 -> s2 [0, 65535] { R2507 += 1, R2462 += 1, R2463 += 1 };
  s0 -> s0 [0, 65535] { R2506 += 1, R2507 += 1 };
  s0 -> s3 [73, 73] { R2507 += 1, R2463 += 1, R70 += 1, R71 += 1 };
  s0 -> s4 [73, 73] { R2507 += 1, R2463 += 1, R70 += 1, R71 += 1 };
  s0 -> s1 [74, 65535] { R2507 += 1, R2463 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 72] { R2507 += 1, R2463 += 1, R70 += 1, R71 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R2507 += 1 };
  s1 -> s3 [73, 73] { R2507 += 1, R2463 += 1, R70 += 1, R71 += 1 };
  s1 -> s4 [73, 73] { R2507 += 1, R2463 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [74, 65535] { R2507 += 1, R2463 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [0, 72] { R2507 += 1, R2463 += 1, R70 += 1, R71 += 1 };
  s2 -> s2 [0, 65535] { R2507 += 1, R2462 += 1, R2463 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R2507 += 1, R2463 += 1, R70 += 1, R71 += 1 };
  s2 -> s4 [73, 73] { R2507 += 1, R2463 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [74, 65535] { R2507 += 1, R2463 += 1, R70 += 1, R71 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R2507 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R2507 += 1 };
  s4 -> s4 [0, 65535] { R2507 += 1, R2463 += 1, R70 += 1, R71 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2507 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 72] { R2509 += 1, R2465 += 1, R74 += 1, R75 += 1 };
  s0 -> s2 [0, 65535] { R2509 += 1, R2464 += 1, R2465 += 1 };
  s0 -> s0 [0, 65535] { R2508 += 1, R2509 += 1 };
  s0 -> s3 [73, 73] { R2509 += 1, R2465 += 1, R74 += 1, R75 += 1 };
  s0 -> s4 [73, 73] { R2509 += 1, R2465 += 1, R74 += 1, R75 += 1 };
  s0 -> s1 [74, 65535] { R2509 += 1, R2465 += 1, R74 += 1, R75 += 1 };
  s1 -> s1 [0, 72] { R2509 += 1, R2465 += 1, R74 += 1, R75 += 1 };
  s1 -> s1 [0, 65535] { R2509 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [73, 73] { R2509 += 1, R2465 += 1, R74 += 1, R75 += 1 };
  s1 -> s4 [73, 73] { R2509 += 1, R2465 += 1, R74 += 1, R75 += 1 };
  s1 -> s1 [74, 65535] { R2509 += 1, R2465 += 1, R74 += 1, R75 += 1 };
  s2 -> s1 [0, 72] { R2509 += 1, R2465 += 1, R74 += 1, R75 += 1 };
  s2 -> s2 [0, 65535] { R2509 += 1, R2464 += 1, R2465 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [73, 73] { R2509 += 1, R2465 += 1, R74 += 1, R75 += 1 };
  s2 -> s4 [73, 73] { R2509 += 1, R2465 += 1, R74 += 1, R75 += 1 };
  s2 -> s1 [74, 65535] { R2509 += 1, R2465 += 1, R74 += 1, R75 += 1 };
  s3 -> s3 [0, 65535] { R2509 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R2509 += 1 };
  s4 -> s4 [0, 65535] { R2509 += 1, R2465 += 1, R74 += 1, R75 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R2509 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 72] { R2511 += 1, R2467 += 1, R1350 += 1, R1351 += 1 };
  s0 -> s2 [0, 65535] { R2511 += 1, R2466 += 1, R2467 += 1 };
  s0 -> s0 [0, 65535] { R2510 += 1, R2511 += 1 };
  s0 -> s3 [73, 73] { R2511 += 1, R2467 += 1, R1350 += 1, R1351 += 1 };
  s0 -> s4 [73, 73] { R2511 += 1, R2467 += 1, R1350 += 1, R1351 += 1 };
  s0 -> s1 [74, 65535] { R2511 += 1, R2467 += 1, R1350 += 1, R1351 += 1 };
  s1 -> s1 [0, 72] { R2511 += 1, R2467 += 1, R1350 += 1, R1351 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R2511 += 1 };
  s1 -> s3 [73, 73] { R2511 += 1, R2467 += 1, R1350 += 1, R1351 += 1 };
  s1 -> s4 [73, 73] { R2511 += 1, R2467 += 1, R1350 += 1, R1351 += 1 };
  s1 -> s1 [74, 65535] { R2511 += 1, R2467 += 1, R1350 += 1, R1351 += 1 };
  s2 -> s1 [0, 72] { R2511 += 1, R2467 += 1, R1350 += 1, R1351 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R2511 += 1, R2466 += 1, R2467 += 1 };
  s2 -> s3 [73, 73] { R2511 += 1, R2467 += 1, R1350 += 1, R1351 += 1 };
  s2 -> s4 [73, 73] { R2511 += 1, R2467 += 1, R1350 += 1, R1351 += 1 };
  s2 -> s1 [74, 65535] { R2511 += 1, R2467 += 1, R1350 += 1, R1351 += 1 };
  s3 -> s3 [0, 65535] { R2511 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R2511 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R2511 += 1, R2467 += 1, R1350 += 1, R1351 += 1 };
  s5 -> s5 [0, 65535] { R2511 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 72] { R2513 += 1, R2469 += 1, R2199 += 1, R2200 += 1 };
  s0 -> s2 [0, 72] { R2513 += 1, R2469 += 1, R2198 += 1, R2199 += 1 };
  s0 -> s3 [0, 65535] { R2513 += 1, R2468 += 1, R2469 += 1 };
  s0 -> s0 [0, 65535] { R2512 += 1, R2513 += 1 };
  s0 -> s4 [73, 73] { R2513 += 1, R2469 += 1, R2198 += 1, R2199 += 1 };
  s0 -> s5 [73, 73] { R2513 += 1, R2469 += 1, R2199 += 1, R2200 += 1 };
  s0 -> s6 [73, 73] { R2513 += 1, R2469 += 1, R2198 += 1, R2199 += 1 };
  s0 -> s7 [73, 73] { R2513 += 1, R2469 += 1, R2199 += 1, R2200 += 1 };
  s0 -> s1 [74, 65535] { R2513 += 1, R2469 += 1, R2199 += 1, R2200 += 1 };
  s0 -> s2 [74, 65535] { R2513 += 1, R2469 += 1, R2198 += 1, R2199 += 1 };
  s1 -> s1 [0, 72] { R2513 += 1, R2469 += 1, R2199 += 1, R2200 += 1 };
  s1 -> s11 [0, 72] { R2513 += 1, R2469 += 1 };
  s1 -> s12 [73, 73] { R2513 += 1, R2469 += 1 };
  s1 -> s5 [73, 73] { R2513 += 1, R2469 += 1, R2199 += 1, R2200 += 1 };
  s1 -> s8 [73, 73] { R2513 += 1, R2469 += 1 };
  s1 -> s7 [73, 73] { R2513 += 1, R2469 += 1, R2199 += 1, R2200 += 1 };
  s1 -> s1 [74, 65535] { R2513 += 1, R2469 += 1, R2199 += 1, R2200 += 1 };
  s1 -> s11 [74, 65535] { R2513 += 1, R2469 += 1 };
  s2 -> s1 [0, 72] { R2513 += 1, R2469 += 1, R2199 += 1, R2200 += 1 };
  s2 -> s2 [0, 72] { R2513 += 1, R2469 += 1, R2198 += 1, R2199 += 1 };
  s2 -> s4 [73, 73] { R2513 += 1, R2469 += 1, R2198 += 1, R2199 += 1 };
  s2 -> s5 [73, 73] { R2513 += 1, R2469 += 1, R2199 += 1, R2200 += 1 };
  s2 -> s6 [73, 73] { R2513 += 1, R2469 += 1, R2198 += 1, R2199 += 1 };
  s2 -> s7 [73, 73] { R2513 += 1, R2469 += 1, R2199 += 1, R2200 += 1 };
  s2 -> s1 [74, 65535] { R2513 += 1, R2469 += 1, R2199 += 1, R2200 += 1 };
  s2 -> s2 [74, 65535] { R2513 += 1, R2469 += 1, R2198 += 1, R2199 += 1 };
  s3 -> s1 [0, 72] { R2513 += 1, R2469 += 1, R2199 += 1, R2200 += 1 };
  s3 -> s2 [0, 72] { R2513 += 1, R2469 += 1, R2198 += 1, R2199 += 1 };
  s3 -> s3 [0, 65535] { R2513 += 1, R2468 += 1, R2469 += 1 };
  s3 -> s4 [73, 73] { R2513 += 1, R2469 += 1, R2198 += 1, R2199 += 1 };
  s3 -> s5 [73, 73] { R2513 += 1, R2469 += 1, R2199 += 1, R2200 += 1 };
  s3 -> s6 [73, 73] { R2513 += 1, R2469 += 1, R2198 += 1, R2199 += 1 };
  s3 -> s7 [73, 73] { R2513 += 1, R2469 += 1, R2199 += 1, R2200 += 1 };
  s3 -> s1 [74, 65535] { R2513 += 1, R2469 += 1, R2199 += 1, R2200 += 1 };
  s3 -> s2 [74, 65535] { R2513 += 1, R2469 += 1, R2198 += 1, R2199 += 1 };
  s5 -> s5 [0, 65535] { R2513 += 1, R2469 += 1, R2199 += 1, R2200 += 1 };
  s5 -> s8 [0, 65535] { R2513 += 1, R2469 += 1 };
  s6 -> s5 [0, 65535] { R2513 += 1, R2469 += 1, R2199 += 1, R2200 += 1 };
  s6 -> s6 [0, 65535] { R2513 += 1, R2469 += 1, R2198 += 1, R2199 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [0, 65535] { R2513 += 1 };
  s8 -> s8 [0, 65535] { R2513 += 1, R2469 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R2513 += 1 };
  s11 -> s11 [0, 72] { R2513 += 1, R2469 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R2513 += 1 };
  s11 -> s12 [73, 73] { R2513 += 1, R2469 += 1 };
  s11 -> s8 [73, 73] { R2513 += 1, R2469 += 1 };
  s11 -> s11 [74, 65535] { R2513 += 1, R2469 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R2513 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 72] { R2515 += 1, R2471 += 1, R2413 += 1 };
  s0 -> s2 [0, 72] { R2515 += 1, R2471 += 1, R2412 += 1, R2413 += 1 };
  s0 -> s0 [0, 65535] { R2514 += 1, R2515 += 1 };
  s0 -> s3 [0, 65535] { R2515 += 1, R2470 += 1, R2471 += 1 };
  s0 -> s4 [73, 73] { R2515 += 1, R2471 += 1, R2412 += 1, R2413 += 1 };
  s0 -> s5 [73, 73] { R2515 += 1, R2471 += 1, R2413 += 1 };
  s0 -> s6 [73, 73] { R2515 += 1, R2471 += 1, R2413 += 1 };
  s0 -> s7 [73, 73] { R2515 += 1, R2471 += 1, R2412 += 1, R2413 += 1 };
  s0 -> s1 [74, 76] { R2515 += 1, R2471 += 1, R2413 += 1 };
  s0 -> s2 [74, 65535] { R2515 += 1, R2471 += 1, R2412 += 1, R2413 += 1 };
  s0 -> s8 [77, 77] { R2515 += 1, R2471 += 1, R2413 += 1 };
  s0 -> s1 [86, 65535] { R2515 += 1, R2471 += 1, R2413 += 1 };
  s1 -> s1 [0, 72] { R2515 += 1, R2471 += 1, R2413 += 1 };
  s1 -> s5 [73, 73] { R2515 += 1, R2471 += 1 };
  s1 -> s6 [73, 73] { R2515 += 1, R2471 += 1 };
  s1 -> s1 [74, 76] { R2515 += 1, R2471 += 1, R2413 += 1 };
  s1 -> s1 [74, 65535] { R2515 += 1, R2471 += 1 };
  s1 -> s8 [77, 77] { R2515 += 1, R2471 += 1, R2413 += 1 };
  s1 -> s1 [86, 65535] { R2515 += 1, R2471 += 1, R2413 += 1 };
  s2 -> s1 [0, 72] { R2515 += 1, R2471 += 1, R2413 += 1 };
  s2 -> s2 [0, 72] { R2515 += 1, R2471 += 1, R2412 += 1, R2413 += 1 };
  s2 -> s4 [73, 73] { R2515 += 1, R2471 += 1, R2412 += 1, R2413 += 1 };
  s2 -> s5 [73, 73] { R2515 += 1, R2471 += 1, R2413 += 1 };
  s2 -> s6 [73, 73] { R2515 += 1, R2471 += 1, R2413 += 1 };
  s2 -> s7 [73, 73] { R2515 += 1, R2471 += 1, R2412 += 1, R2413 += 1 };
  s2 -> s1 [74, 76] { R2515 += 1, R2471 += 1, R2413 += 1 };
  s2 -> s2 [74, 65535] { R2515 += 1, R2471 += 1, R2412 += 1, R2413 += 1 };
  s2 -> s8 [77, 77] { R2515 += 1, R2471 += 1, R2413 += 1 };
  s2 -> s1 [86, 65535] { R2515 += 1, R2471 += 1, R2413 += 1 };
  s3 -> s1 [0, 72] { R2515 += 1, R2471 += 1, R2413 += 1 };
  s3 -> s2 [0, 72] { R2515 += 1, R2471 += 1, R2412 += 1, R2413 += 1 };
  s3 -> s3 [0, 65535] { R2515 += 1, R2470 += 1, R2471 += 1 };
  s3 -> s4 [73, 73] { R2515 += 1, R2471 += 1, R2412 += 1, R2413 += 1 };
  s3 -> s5 [73, 73] { R2515 += 1, R2471 += 1, R2413 += 1 };
  s3 -> s6 [73, 73] { R2515 += 1, R2471 += 1, R2413 += 1 };
  s3 -> s7 [73, 73] { R2515 += 1, R2471 += 1, R2412 += 1, R2413 += 1 };
  s3 -> s1 [74, 76] { R2515 += 1, R2471 += 1, R2413 += 1 };
  s3 -> s2 [74, 65535] { R2515 += 1, R2471 += 1, R2412 += 1, R2413 += 1 };
  s3 -> s8 [77, 77] { R2515 += 1, R2471 += 1, R2413 += 1 };
  s3 -> s1 [86, 65535] { R2515 += 1, R2471 += 1, R2413 += 1 };
  s6 -> s6 [0, 76] { R2515 += 1, R2471 += 1, R2413 += 1 };
  s6 -> s6 [0, 65535] { R2515 += 1, R2471 += 1 };
  s6 -> s11 [77, 77] { R2515 += 1, R2471 += 1, R2413 += 1 };
  s6 -> s6 [86, 65535] { R2515 += 1, R2471 += 1, R2413 += 1 };
  s7 -> s6 [0, 76] { R2515 += 1, R2471 += 1, R2413 += 1 };
  s7 -> s7 [0, 65535] { R2515 += 1, R2471 += 1, R2412 += 1, R2413 += 1 };
  s7 -> s11 [77, 77] { R2515 += 1, R2471 += 1, R2413 += 1 };
  s7 -> s6 [86, 65535] { R2515 += 1, R2471 += 1, R2413 += 1 };
  s8 -> s8 [0, 72] { R2515 += 1, R2471 += 1 };
  s8 -> s8 [0, 65535] { R2515 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [73, 73] { R2515 += 1, R2471 += 1 };
  s8 -> s11 [73, 73] { R2515 += 1, R2471 += 1 };
  s8 -> s8 [74, 65535] { R2515 += 1, R2471 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R2515 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s12 [0, 65535] { R2515 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R2515 += 1, R2471 += 1 };
  s12 -> s12 [0, 65535] { R2515 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
synchronised {  // Automata constraining P54
automaton P54_0 {
  init s0;
  s0 -> s1 [109, 109];
  accepting s1;
};
};
constraint R1 = R2431 && R2 = R2515 && R20 - R2515 = -1 && R21 = R2515 && R22 - R2515 = -1 && R23 = R2515 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R1353 + -1*R1351 - R53 = 0 && R52 + R1352 + R1350 = 0 && R2430 = 0 && R2456 = 0 && R2457 = 0 && R2468 = 0 && R2469 = 0 && R2470 = 0 && R2471 = 0 && R2472 = 0 && R2473 = R2515 && R2474 = 0 && R2475 = R2515 && R2476 = 0 && R2477 = R2515 && R2478 = 0 && R2479 = R2515 && R2480 = 0 && R2481 = R2515 && R2482 = 0 && R2483 = R2515 && R2484 = 0 && R2485 = R2515 && R2486 = 0 && R2487 = R2515 && R2488 = 0 && R2489 = R2515 && R2490 = 0 && R2491 = R2515 && R2492 = 0 && R2493 = R2515 && R2494 = 0 && R2495 = R2515 && R2496 = 0 && R2497 = R2515 && R2498 = 0 && R2499 = R2515 && R2500 = 0 && R2501 = R2515 && R2502 = 0 && R2503 = R2515 && R2504 = 0 && R2505 = R2515 && R2506 = 0 && R2507 = R2515 && R2508 = 0 && R2509 = R2515 && R2510 = 0 && R2511 = R2515 && R2512 = 0 && R2513 = R2515 && R2514 = 0 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R1353 + -1*R1351 - R53 < 1 && -1 < R2431 && 0 < R2515 && (R48 + R79 + R76 != 0 || ((R42 + R72 + R70 != 0 || R43 + R73 + R71 + -1*R1353 + -1*R1351 - R53 = 0 || R53 + R1353 + R1351 < 1) && (R42 + R72 + R70 = 0 || R53 + R1353 + R1351 < 1))) && (R48 + R79 + R76 != 0 || ((R46 + R77 + R74 != 0 || R47 + R78 + R75 + -1*R1353 + -1*R1351 - R53 = 0 || R53 + R1353 + R1351 < 1) && (R46 + R77 + R74 = 0 || R53 + R1353 + R1351 < 1))) && (R2416 != 0 || R2417 = R2431 || (R17 = 0 && R2431 = 0)) && (R2418 != 0 || R2419 = R2431 || (R17 = 0 && R2431 = 0)) && (R2420 != 0 || R2421 = R2431 || (R17 = 0 && R2431 = 0)) && (R2422 != 0 || R2423 = R2431 || (R17 = 0 && R2431 = 0)) && (R2424 != 0 || R2425 = R2431 || (R17 = 0 && R2431 = 0)) && (R2426 != 0 || R2427 = R2431 || (R17 = 0 && R2431 = 0)) && (R2428 != 0 || R2429 = R2431 || (R17 = 0 && R2431 = 0)) && (R2432 != 0 || R2431 = R2433 || (R17 = 0 && R2431 = 0)) && (R2434 != 0 || R2431 = R2435 || (R17 = 0 && R2431 = 0)) && (R18 = 0 || (R2454 = 0 && R2455 = 0)) && (R18 = 0 || (R2458 = 0 && R2459 = 0)) && (R18 = 0 || (R2460 = 0 && R2461 = 0)) && (R18 = 0 || (R2462 = 0 && R2463 = 0)) && (R18 = 0 || (R2464 = 0 && R2465 = 0)) && (R18 = 0 || (R2466 = 0 && R2467 = 0)) && (R19 = 0 || (R2436 = 0 && R2437 = 0)) && (R19 = 0 || (R2438 = 0 && R2439 = 0)) && (R19 = 0 || (R2440 = 0 && R2441 = 0)) && (R19 = 0 || (R2442 = 0 && R2443 = 0)) && (R19 = 0 || (R2444 = 0 && R2445 = 0)) && (R19 = 0 || (R2446 = 0 && R2447 = 0)) && (R19 = 0 || (R2448 = 0 && R2449 = 0)) && (R19 = 0 || (R2450 = 0 && R2451 = 0)) && (R19 = 0 || (R2452 = 0 && R2453 = 0)) && (R48 + R79 + R76 = 0 || (R42 + R72 + R70 = 0 && R43 + R73 + R71 + -1*R1353 + -1*R1351 - R53 = 0)) && (R48 + R79 + R76 = 0 || (R46 + R77 + R74 = 0 && R47 + R78 + R75 + -1*R1353 + -1*R1351 - R53 = 0)) && (R58 + R2203 + R2200 = 0 || (R56 + R2201 + R2198 = 0 && R57 + R2202 + R2199 = 0)) && (R58 + R2203 + R2200 = 0 || (R62 + R2414 + R2412 = 0 && R63 + R2415 + R2413 = 0)) && (R2416 = 0 || (R17 = 0 && R2431 = 0)) && (R2418 = 0 || (R17 = 0 && R2431 = 0)) && (R2420 = 0 || (R17 = 0 && R2431 = 0)) && (R2422 = 0 || (R17 = 0 && R2431 = 0)) && (R2424 = 0 || (R17 = 0 && R2431 = 0)) && (R2426 = 0 || (R17 = 0 && R2431 = 0)) && (R2428 = 0 || (R17 = 0 && R2431 = 0)) && (R2432 = 0 || (R17 = 0 && R2431 = 0)) && (R2434 = 0 || (R17 = 0 && R2431 = 0));
// End of Parikh automata intersection problem
