// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R12, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R2620, R2621, R2622, R2623, R27, R3, R3046, R3047, R3048, R3049, R3050, R3051, R3260, R3261, R3262, R3263, R3264, R3265, R3266, R3267, R3268, R3269, R3270, R3271, R3272, R3273, R3274, R3275, R3276, R3277, R3278, R3279, R3280, R3281, R3282, R3283, R3284, R3285, R3286, R3287, R3288, R3289, R3290, R3291, R3292, R3293, R3294, R3295, R3296, R3297, R3298, R3299, R3300, R3301, R3302, R3303, R3304, R3305, R3306, R3307, R3308, R3309, R3310, R3311, R3312, R3313, R3314, R3315, R3316, R3317, R3318, R3319, R3320, R3321, R3322, R3323, R3324, R3325, R3326, R3327, R3328, R3329, R3330, R3331, R3332, R3333, R3334, R3335, R3336, R3337, R3338, R3339, R3340, R3341, R3342, R3343, R3344, R3345, R3346, R3347, R3348, R3349, R3350, R3351, R3352, R3353, R3354, R3355, R3356, R3357, R3358, R3359, R3360, R3361, R3362, R3363, R38, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R70, R71, R72, R73, R74, R75, R76, R77, R78, R79, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 72];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [73, 73];
  s0 -> s1 [74, 65535];
  s1 -> s1 [0, 72];
  s1 -> s2 [73, 73];
  s1 -> s1 [74, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R21 += 1 };
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s1 [0, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R3285 += 1, R19 += 1 };
  s0 -> s0 [0, 65535] { R3284 += 1, R3285 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R3285 += 1, R19 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 72] { R3287 += 1 };
  s0 -> s0 [0, 65535] { R3286 += 1, R3287 += 1 };
  s0 -> s2 [73, 73] { R3287 += 1 };
  s0 -> s3 [73, 73] { R3287 += 1 };
  s0 -> s1 [78, 65535] { R3287 += 1 };
  s1 -> s1 [0, 72] { R3287 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R3287 += 1 };
  s1 -> s3 [73, 73] { R3287 += 1 };
  s1 -> s1 [78, 65535] { R3287 += 1 };
  s2 -> s2 [0, 73] { R3287 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [78, 65535] { R3287 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 72] { R3289 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R3288 += 1, R3289 += 1 };
  s0 -> s2 [73, 73] { R3289 += 1, R38 += 1 };
  s0 -> s3 [73, 73] { R3289 += 1, R38 += 1 };
  s0 -> s1 [74, 65535] { R3289 += 1, R38 += 1 };
  s1 -> s1 [0, 72] { R3289 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R3289 += 1, R38 += 1 };
  s1 -> s3 [73, 73] { R3289 += 1, R38 += 1 };
  s1 -> s1 [74, 65535] { R3289 += 1, R38 += 1 };
  s2 -> s2 [0, 65535] { R3289 += 1, R38 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 72] { R3291 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R3290 += 1, R3291 += 1 };
  s0 -> s2 [73, 73] { R3291 += 1, R40 += 1 };
  s0 -> s3 [73, 73] { R3291 += 1, R40 += 1 };
  s0 -> s1 [74, 65535] { R3291 += 1, R40 += 1 };
  s1 -> s1 [0, 72] { R3291 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R3291 += 1, R40 += 1 };
  s1 -> s3 [73, 73] { R3291 += 1, R40 += 1 };
  s1 -> s1 [74, 65535] { R3291 += 1, R40 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3291 += 1, R40 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 72] { R3293 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R3292 += 1, R3293 += 1 };
  s0 -> s2 [73, 73] { R3293 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [73, 73] { R3293 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [74, 65535] { R3293 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 72] { R3293 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R3293 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [73, 73] { R3293 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [74, 65535] { R3293 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535] { R3293 += 1, R42 += 1, R43 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 72] { R3295 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R3294 += 1, R3295 += 1 };
  s0 -> s2 [73, 73] { R3295 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [73, 73] { R3295 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [74, 65535] { R3295 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 72] { R3295 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R3295 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [73, 73] { R3295 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [74, 65535] { R3295 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3295 += 1, R46 += 1, R47 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 72] { R3297 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R3296 += 1, R3297 += 1 };
  s0 -> s2 [73, 73] { R3297 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [73, 73] { R3297 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [74, 65535] { R3297 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 72] { R3297 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R3297 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [73, 73] { R3297 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [74, 65535] { R3297 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3297 += 1, R52 += 1, R53 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 72] { R3299 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R3298 += 1, R3299 += 1 };
  s0 -> s2 [73, 73] { R3299 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [73, 73] { R3299 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [74, 65535] { R3299 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 72] { R3299 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R3299 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [73, 73] { R3299 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [74, 65535] { R3299 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R3299 += 1, R56 += 1, R57 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 72] { R3301 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R3300 += 1, R3301 += 1 };
  s0 -> s2 [73, 73] { R3301 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [73, 73] { R3301 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [74, 65535] { R3301 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 72] { R3301 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R3301 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [73, 73] { R3301 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [74, 65535] { R3301 += 1, R62 += 1, R63 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3301 += 1, R62 += 1, R63 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 72] { R3321 += 1 };
  s0 -> s0 [0, 65535] { R3320 += 1, R3321 += 1 };
  s0 -> s2 [73, 73] { R3321 += 1 };
  s0 -> s1 [74, 65535] { R3321 += 1 };
  s1 -> s1 [0, 72] { R3321 += 1 };
  s1 -> s2 [73, 73] { R3321 += 1 };
  s1 -> s1 [74, 65535] { R3321 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3321 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R3323 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R3322 += 1, R3323 += 1 };
  s1 -> s1 [0, 65535] { R3323 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 72] { R3325 += 1 };
  s0 -> s0 [0, 65535] { R3324 += 1, R3325 += 1 };
  s0 -> s2 [0, 65535] { R3325 += 1, R8 += 1 };
  s0 -> s3 [73, 73] { R3325 += 1 };
  s0 -> s1 [74, 65535] { R3325 += 1 };
  s1 -> s1 [0, 72] { R3325 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [73, 73] { R3325 += 1 };
  s1 -> s1 [74, 65535] { R3325 += 1 };
  s2 -> s1 [0, 72] { R3325 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3325 += 1, R8 += 1 };
  s2 -> s3 [73, 73] { R3325 += 1 };
  s2 -> s1 [74, 65535] { R3325 += 1 };
  s3 -> s3 [0, 65535] { R3325 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 72] { R3327 += 1, R3265 += 1 };
  s0 -> s0 [0, 65535] { R3326 += 1, R3327 += 1 };
  s0 -> s2 [0, 65535] { R3327 += 1, R3264 += 1, R3265 += 1 };
  s0 -> s1 [74, 65535] { R3327 += 1, R3265 += 1 };
  s1 -> s1 [0, 72] { R3327 += 1, R3265 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3327 += 1 };
  s1 -> s1 [74, 65535] { R3327 += 1, R3265 += 1 };
  s2 -> s1 [0, 72] { R3327 += 1, R3265 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3327 += 1, R3264 += 1, R3265 += 1 };
  s2 -> s1 [74, 65535] { R3327 += 1, R3265 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R3329 += 1, R3267 += 1, R17 += 1 };
  s0 -> s0 [0, 65535] { R3328 += 1, R3329 += 1 };
  s0 -> s2 [0, 65535] { R3329 += 1, R3266 += 1, R3267 += 1 };
  s1 -> s1 [0, 65535] { R3329 += 1, R3267 += 1, R17 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R3329 += 1 };
  s2 -> s1 [0, 65535] { R3329 += 1, R3267 += 1, R17 += 1 };
  s2 -> s2 [0, 65535] { R3329 += 1, R3266 += 1, R3267 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3329 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 73] { R3331 += 1, R3269 += 1 };
  s0 -> s0 [0, 65535] { R3330 += 1, R3331 += 1 };
  s0 -> s2 [0, 65535] { R3331 += 1, R3268 += 1, R3269 += 1 };
  s0 -> s1 [77, 65535] { R3331 += 1, R3269 += 1 };
  s1 -> s1 [0, 73] { R3331 += 1, R3269 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3331 += 1 };
  s1 -> s1 [77, 65535] { R3331 += 1, R3269 += 1 };
  s2 -> s1 [0, 73] { R3331 += 1, R3269 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3331 += 1, R3268 += 1, R3269 += 1 };
  s2 -> s1 [77, 65535] { R3331 += 1, R3269 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R3333 += 1, R3270 += 1, R3271 += 1 };
  s0 -> s0 [0, 65535] { R3332 += 1, R3333 += 1 };
  s0 -> s2 [0, 65535] { R3333 += 1, R3271 += 1, R67 += 1 };
  s1 -> s1 [0, 65535] { R3333 += 1, R3270 += 1, R3271 += 1 };
  s1 -> s2 [0, 65535] { R3333 += 1, R3271 += 1, R67 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R3333 += 1 };
  s2 -> s2 [0, 65535] { R3333 += 1, R3271 += 1, R67 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3333 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 76] { R3335 += 1, R3273 += 1 };
  s0 -> s2 [0, 65535] { R3335 += 1, R3272 += 1, R3273 += 1 };
  s0 -> s0 [0, 65535] { R3334 += 1, R3335 += 1 };
  s0 -> s3 [0, 65535] { R3335 += 1, R3273 += 1, R69 += 1 };
  s0 -> s1 [78, 65535] { R3335 += 1, R3273 += 1 };
  s1 -> s1 [0, 76] { R3335 += 1, R3273 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R3335 += 1 };
  s1 -> s1 [78, 65535] { R3335 += 1, R3273 += 1 };
  s2 -> s1 [0, 76] { R3335 += 1, R3273 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3335 += 1, R3272 += 1, R3273 += 1 };
  s2 -> s3 [0, 65535] { R3335 += 1, R3273 += 1, R69 += 1 };
  s2 -> s1 [78, 65535] { R3335 += 1, R3273 += 1 };
  s3 -> s1 [0, 76] { R3335 += 1, R3273 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3335 += 1, R3273 += 1, R69 += 1 };
  s3 -> s5 [0, 65535] { R3335 += 1 };
  s3 -> s1 [78, 65535] { R3335 += 1, R3273 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3335 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 76] { R3337 += 1, R3275 += 1, R73 += 1 };
  s0 -> s0 [0, 65535] { R3336 += 1, R3337 += 1 };
  s0 -> s2 [0, 65535] { R3337 += 1, R3274 += 1, R3275 += 1 };
  s0 -> s3 [0, 65535] { R3337 += 1, R3275 += 1, R72 += 1, R73 += 1 };
  s0 -> s1 [78, 65535] { R3337 += 1, R3275 += 1, R73 += 1 };
  s1 -> s1 [0, 76] { R3337 += 1, R3275 += 1, R73 += 1 };
  s1 -> s4 [0, 65535] { R3337 += 1 };
  s1 -> s1 [0, 65535] { R3337 += 1, R3275 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [78, 65535] { R3337 += 1, R3275 += 1, R73 += 1 };
  s2 -> s1 [0, 76] { R3337 += 1, R3275 += 1, R73 += 1 };
  s2 -> s2 [0, 65535] { R3337 += 1, R3274 += 1, R3275 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R3337 += 1, R3275 += 1, R72 += 1, R73 += 1 };
  s2 -> s1 [78, 65535] { R3337 += 1, R3275 += 1, R73 += 1 };
  s3 -> s1 [0, 76] { R3337 += 1, R3275 += 1, R73 += 1 };
  s3 -> s4 [0, 65535] { R3337 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R3337 += 1, R3275 += 1, R72 += 1, R73 += 1 };
  s3 -> s1 [78, 65535] { R3337 += 1, R3275 += 1, R73 += 1 };
  s4 -> s4 [0, 65535] { R3337 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R3339 += 1, R3277 += 1, R77 += 1, R78 += 1 };
  s0 -> s2 [0, 65535] { R3339 += 1, R3276 += 1, R3277 += 1 };
  s0 -> s0 [0, 65535] { R3338 += 1, R3339 += 1 };
  s0 -> s3 [0, 65535] { R3339 += 1, R3277 += 1, R78 += 1, R79 += 1 };
  s1 -> s4 [0, 65535] { R3339 += 1 };
  s1 -> s1 [0, 65535] { R3339 += 1, R3277 += 1, R77 += 1, R78 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R3339 += 1, R3277 += 1, R78 += 1, R79 += 1 };
  s2 -> s1 [0, 65535] { R3339 += 1, R3277 += 1, R77 += 1, R78 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3339 += 1, R3276 += 1, R3277 += 1 };
  s2 -> s3 [0, 65535] { R3339 += 1, R3277 += 1, R78 += 1, R79 += 1 };
  s3 -> s4 [0, 65535] { R3339 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R3339 += 1, R3277 += 1 };
  s3 -> s3 [0, 65535] { R3339 += 1, R3277 += 1, R78 += 1, R79 += 1 };
  s4 -> s4 [0, 65535] { R3339 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R3339 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3339 += 1, R3277 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 77] { R3341 += 1, R3279 += 1, R2623 += 1 };
  s0 -> s2 [0, 65535] { R3341 += 1, R3278 += 1, R3279 += 1 };
  s0 -> s0 [0, 65535] { R3340 += 1, R3341 += 1 };
  s0 -> s3 [85, 85] { R3341 += 1, R3279 += 1, R2623 += 1 };
  s0 -> s1 [86, 65535] { R3341 += 1, R3279 += 1, R2623 += 1 };
  s1 -> s1 [0, 77] { R3341 += 1, R3279 += 1, R2623 += 1 };
  s1 -> s3 [85, 85] { R3341 += 1, R3279 += 1, R2623 += 1 };
  s1 -> s1 [86, 65535] { R3341 += 1, R3279 += 1, R2623 += 1 };
  s2 -> s1 [0, 77] { R3341 += 1, R3279 += 1, R2623 += 1 };
  s2 -> s2 [0, 65535] { R3341 += 1, R3278 += 1, R3279 += 1 };
  s2 -> s3 [85, 85] { R3341 += 1, R3279 += 1, R2623 += 1 };
  s2 -> s1 [86, 65535] { R3341 += 1, R3279 += 1, R2623 += 1 };
  s3 -> s3 [0, 77] { R3341 += 1, R3279 += 1, R2623 += 1 };
  s3 -> s4 [0, 65535] { R3341 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R3341 += 1, R3279 += 1 };
  s3 -> s3 [85, 65535] { R3341 += 1, R3279 += 1, R2623 += 1 };
  s4 -> s4 [0, 65535] { R3341 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R3343 += 1, R3281 += 1, R3050 += 1, R3051 += 1 };
  s0 -> s2 [0, 65535] { R3343 += 1, R3281 += 1 };
  s0 -> s0 [0, 65535] { R3342 += 1, R3343 += 1 };
  s0 -> s3 [0, 65535] { R3343 += 1, R3280 += 1, R3281 += 1 };
  s1 -> s1 [0, 65535] { R3343 += 1, R3281 += 1, R3050 += 1, R3051 += 1 };
  s1 -> s2 [0, 65535] { R3343 += 1, R3281 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R3343 += 1 };
  s2 -> s2 [0, 65535] { R3343 += 1, R3281 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R3343 += 1 };
  s3 -> s1 [0, 65535] { R3343 += 1, R3281 += 1, R3050 += 1, R3051 += 1 };
  s3 -> s2 [0, 65535] { R3343 += 1, R3281 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3343 += 1, R3280 += 1, R3281 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3343 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s0 [0, 65535] { R3344 += 1, R3345 += 1 };
  s0 -> s1 [0, 65535] { R3345 += 1, R3282 += 1, R3283 += 1 };
  s0 -> s2 [0, 65535] { R3345 += 1, R3283 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R3345 += 1, R3282 += 1, R3283 += 1 };
  s1 -> s2 [0, 65535] { R3345 += 1, R3283 += 1 };
  s2 -> s3 [0, 65535] { R3345 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3345 += 1, R3283 += 1 };
  s3 -> s3 [0, 65535] { R3345 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s0 [0, 65535] { R3346 += 1, R3347 += 1 };
  s0 -> s1 [0, 65535] { R3347 += 1, R3302 += 1, R3303 += 1 };
  s0 -> s2 [0, 65535] { R3347 += 1, R3303 += 1, R18 += 1 };
  s1 -> s1 [0, 65535] { R3347 += 1, R3302 += 1, R3303 += 1 };
  s1 -> s2 [0, 65535] { R3347 += 1, R3303 += 1, R18 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R3347 += 1 };
  s2 -> s2 [0, 65535] { R3347 += 1, R3303 += 1, R18 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3347 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 72] { R3349 += 1, R3305 += 1 };
  s0 -> s2 [0, 65535] { R3349 += 1, R3304 += 1, R3305 += 1 };
  s0 -> s0 [0, 65535] { R3348 += 1, R3349 += 1 };
  s0 -> s3 [73, 73] { R3349 += 1, R3305 += 1 };
  s0 -> s4 [73, 73] { R3349 += 1, R3305 += 1 };
  s0 -> s5 [77, 77] { R3349 += 1, R3305 += 1 };
  s0 -> s1 [78, 65535] { R3349 += 1, R3305 += 1 };
  s1 -> s1 [0, 72] { R3349 += 1, R3305 += 1 };
  s1 -> s3 [73, 73] { R3349 += 1, R3305 += 1 };
  s1 -> s4 [73, 73] { R3349 += 1, R3305 += 1 };
  s1 -> s5 [77, 77] { R3349 += 1, R3305 += 1 };
  s1 -> s1 [78, 65535] { R3349 += 1, R3305 += 1 };
  s2 -> s1 [0, 72] { R3349 += 1, R3305 += 1 };
  s2 -> s2 [0, 65535] { R3349 += 1, R3304 += 1, R3305 += 1 };
  s2 -> s3 [73, 73] { R3349 += 1, R3305 += 1 };
  s2 -> s4 [73, 73] { R3349 += 1, R3305 += 1 };
  s2 -> s5 [77, 77] { R3349 += 1, R3305 += 1 };
  s2 -> s1 [78, 65535] { R3349 += 1, R3305 += 1 };
  s3 -> s3 [0, 73] { R3349 += 1, R3305 += 1 };
  s3 -> s7 [77, 77] { R3349 += 1, R3305 += 1 };
  s3 -> s3 [78, 65535] { R3349 += 1, R3305 += 1 };
  s5 -> s5 [0, 72] { R3349 += 1, R3305 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R3349 += 1 };
  s5 -> s7 [73, 73] { R3349 += 1, R3305 += 1 };
  s5 -> s8 [73, 73] { R3349 += 1, R3305 += 1 };
  s5 -> s5 [77, 65535] { R3349 += 1, R3305 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 73] { R3349 += 1, R3305 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R3349 += 1 };
  s7 -> s7 [77, 65535] { R3349 += 1, R3305 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R3349 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 72] { R3351 += 1, R3307 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R3350 += 1, R3351 += 1 };
  s0 -> s2 [0, 65535] { R3351 += 1, R3306 += 1, R3307 += 1 };
  s0 -> s3 [73, 73] { R3351 += 1, R3307 += 1, R66 += 1 };
  s0 -> s4 [73, 73] { R3351 += 1, R3307 += 1, R66 += 1 };
  s0 -> s1 [74, 65535] { R3351 += 1, R3307 += 1, R66 += 1 };
  s1 -> s1 [0, 72] { R3351 += 1, R3307 += 1, R66 += 1 };
  s1 -> s1 [0, 65535] { R3351 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [73, 73] { R3351 += 1, R3307 += 1, R66 += 1 };
  s1 -> s4 [73, 73] { R3351 += 1, R3307 += 1, R66 += 1 };
  s1 -> s1 [74, 65535] { R3351 += 1, R3307 += 1, R66 += 1 };
  s2 -> s1 [0, 72] { R3351 += 1, R3307 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R3351 += 1, R3306 += 1, R3307 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [73, 73] { R3351 += 1, R3307 += 1, R66 += 1 };
  s2 -> s4 [73, 73] { R3351 += 1, R3307 += 1, R66 += 1 };
  s2 -> s1 [74, 65535] { R3351 += 1, R3307 += 1, R66 += 1 };
  s3 -> s3 [0, 65535] { R3351 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R3351 += 1 };
  s4 -> s4 [0, 65535] { R3351 += 1, R3307 += 1, R66 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R3351 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 72] { R3353 += 1, R3309 += 1, R68 += 1 };
  s0 -> s2 [0, 65535] { R3353 += 1, R3308 += 1, R3309 += 1 };
  s0 -> s0 [0, 65535] { R3352 += 1, R3353 += 1 };
  s0 -> s3 [73, 73] { R3353 += 1, R3309 += 1, R68 += 1 };
  s0 -> s4 [73, 73] { R3353 += 1, R3309 += 1, R68 += 1 };
  s0 -> s1 [74, 65535] { R3353 += 1, R3309 += 1, R68 += 1 };
  s1 -> s1 [0, 72] { R3353 += 1, R3309 += 1, R68 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3353 += 1 };
  s1 -> s3 [73, 73] { R3353 += 1, R3309 += 1, R68 += 1 };
  s1 -> s4 [73, 73] { R3353 += 1, R3309 += 1, R68 += 1 };
  s1 -> s1 [74, 65535] { R3353 += 1, R3309 += 1, R68 += 1 };
  s2 -> s1 [0, 72] { R3353 += 1, R3309 += 1, R68 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3353 += 1, R3308 += 1, R3309 += 1 };
  s2 -> s3 [73, 73] { R3353 += 1, R3309 += 1, R68 += 1 };
  s2 -> s4 [73, 73] { R3353 += 1, R3309 += 1, R68 += 1 };
  s2 -> s1 [74, 65535] { R3353 += 1, R3309 += 1, R68 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R3353 += 1 };
  s3 -> s3 [0, 65535] { R3353 += 1, R3309 += 1, R68 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3353 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3353 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 72] { R3355 += 1, R3311 += 1, R70 += 1, R71 += 1 };
  s0 -> s2 [0, 65535] { R3355 += 1, R3310 += 1, R3311 += 1 };
  s0 -> s0 [0, 65535] { R3354 += 1, R3355 += 1 };
  s0 -> s3 [73, 73] { R3355 += 1, R3311 += 1, R70 += 1, R71 += 1 };
  s0 -> s4 [73, 73] { R3355 += 1, R3311 += 1, R70 += 1, R71 += 1 };
  s0 -> s1 [74, 65535] { R3355 += 1, R3311 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 72] { R3355 += 1, R3311 += 1, R70 += 1, R71 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3355 += 1 };
  s1 -> s3 [73, 73] { R3355 += 1, R3311 += 1, R70 += 1, R71 += 1 };
  s1 -> s4 [73, 73] { R3355 += 1, R3311 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [74, 65535] { R3355 += 1, R3311 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [0, 72] { R3355 += 1, R3311 += 1, R70 += 1, R71 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3355 += 1, R3310 += 1, R3311 += 1 };
  s2 -> s3 [73, 73] { R3355 += 1, R3311 += 1, R70 += 1, R71 += 1 };
  s2 -> s4 [73, 73] { R3355 += 1, R3311 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [74, 65535] { R3355 += 1, R3311 += 1, R70 += 1, R71 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R3355 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R3355 += 1 };
  s4 -> s4 [0, 65535] { R3355 += 1, R3311 += 1, R70 += 1, R71 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3355 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 72] { R3357 += 1, R3313 += 1, R74 += 1, R75 += 1 };
  s0 -> s2 [0, 65535] { R3357 += 1, R3312 += 1, R3313 += 1 };
  s0 -> s0 [0, 65535] { R3356 += 1, R3357 += 1 };
  s0 -> s3 [73, 73] { R3357 += 1, R3313 += 1, R74 += 1, R75 += 1 };
  s0 -> s4 [73, 73] { R3357 += 1, R3313 += 1, R74 += 1, R75 += 1 };
  s0 -> s1 [74, 65535] { R3357 += 1, R3313 += 1, R74 += 1, R75 += 1 };
  s1 -> s1 [0, 72] { R3357 += 1, R3313 += 1, R74 += 1, R75 += 1 };
  s1 -> s1 [0, 65535] { R3357 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R3357 += 1, R3313 += 1, R74 += 1, R75 += 1 };
  s1 -> s4 [73, 73] { R3357 += 1, R3313 += 1, R74 += 1, R75 += 1 };
  s1 -> s1 [74, 65535] { R3357 += 1, R3313 += 1, R74 += 1, R75 += 1 };
  s2 -> s1 [0, 72] { R3357 += 1, R3313 += 1, R74 += 1, R75 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3357 += 1, R3312 += 1, R3313 += 1 };
  s2 -> s3 [73, 73] { R3357 += 1, R3313 += 1, R74 += 1, R75 += 1 };
  s2 -> s4 [73, 73] { R3357 += 1, R3313 += 1, R74 += 1, R75 += 1 };
  s2 -> s1 [74, 65535] { R3357 += 1, R3313 += 1, R74 += 1, R75 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R3357 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R3357 += 1 };
  s4 -> s4 [0, 65535] { R3357 += 1, R3313 += 1, R74 += 1, R75 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3357 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 72] { R3359 += 1, R3315 += 1, R2620 += 1, R2621 += 1 };
  s0 -> s2 [0, 72] { R3359 += 1, R3315 += 1, R2621 += 1 };
  s0 -> s3 [0, 65535] { R3359 += 1, R3314 += 1, R3315 += 1 };
  s0 -> s0 [0, 65535] { R3358 += 1, R3359 += 1 };
  s0 -> s4 [73, 73] { R3359 += 1, R3315 += 1, R2620 += 1, R2621 += 1 };
  s0 -> s5 [73, 73] { R3359 += 1, R3315 += 1, R2621 += 1 };
  s0 -> s6 [73, 73] { R3359 += 1, R3315 += 1, R2621 += 1 };
  s0 -> s7 [73, 73] { R3359 += 1, R3315 += 1, R2620 += 1, R2621 += 1 };
  s0 -> s2 [74, 77] { R3359 += 1, R3315 += 1, R2621 += 1 };
  s0 -> s1 [74, 65535] { R3359 += 1, R3315 += 1, R2620 += 1, R2621 += 1 };
  s0 -> s2 [86, 65535] { R3359 += 1, R3315 += 1, R2621 += 1 };
  s1 -> s1 [0, 72] { R3359 += 1, R3315 += 1, R2620 += 1, R2621 += 1 };
  s1 -> s2 [0, 72] { R3359 += 1, R3315 += 1, R2621 += 1 };
  s1 -> s4 [73, 73] { R3359 += 1, R3315 += 1, R2620 += 1, R2621 += 1 };
  s1 -> s5 [73, 73] { R3359 += 1, R3315 += 1, R2621 += 1 };
  s1 -> s6 [73, 73] { R3359 += 1, R3315 += 1, R2621 += 1 };
  s1 -> s7 [73, 73] { R3359 += 1, R3315 += 1, R2620 += 1, R2621 += 1 };
  s1 -> s2 [74, 77] { R3359 += 1, R3315 += 1, R2621 += 1 };
  s1 -> s1 [74, 65535] { R3359 += 1, R3315 += 1, R2620 += 1, R2621 += 1 };
  s1 -> s2 [86, 65535] { R3359 += 1, R3315 += 1, R2621 += 1 };
  s2 -> s2 [0, 72] { R3359 += 1, R3315 += 1, R2621 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R3359 += 1 };
  s2 -> s5 [73, 73] { R3359 += 1, R3315 += 1, R2621 += 1 };
  s2 -> s6 [73, 73] { R3359 += 1, R3315 += 1, R2621 += 1 };
  s2 -> s2 [74, 77] { R3359 += 1, R3315 += 1, R2621 += 1 };
  s2 -> s2 [86, 65535] { R3359 += 1, R3315 += 1, R2621 += 1 };
  s3 -> s1 [0, 72] { R3359 += 1, R3315 += 1, R2620 += 1, R2621 += 1 };
  s3 -> s2 [0, 72] { R3359 += 1, R3315 += 1, R2621 += 1 };
  s3 -> s3 [0, 65535] { R3359 += 1, R3314 += 1, R3315 += 1 };
  s3 -> s4 [73, 73] { R3359 += 1, R3315 += 1, R2620 += 1, R2621 += 1 };
  s3 -> s5 [73, 73] { R3359 += 1, R3315 += 1, R2621 += 1 };
  s3 -> s6 [73, 73] { R3359 += 1, R3315 += 1, R2621 += 1 };
  s3 -> s7 [73, 73] { R3359 += 1, R3315 += 1, R2620 += 1, R2621 += 1 };
  s3 -> s2 [74, 77] { R3359 += 1, R3315 += 1, R2621 += 1 };
  s3 -> s1 [74, 65535] { R3359 += 1, R3315 += 1, R2620 += 1, R2621 += 1 };
  s3 -> s2 [86, 65535] { R3359 += 1, R3315 += 1, R2621 += 1 };
  s5 -> s5 [0, 77] { R3359 += 1, R3315 += 1, R2621 += 1 };
  s5 -> s5 [0, 65535] { R3359 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s5 [86, 65535] { R3359 += 1, R3315 += 1, R2621 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R3359 += 1 };
  s7 -> s5 [0, 77] { R3359 += 1, R3315 += 1, R2621 += 1 };
  s7 -> s7 [0, 65535] { R3359 += 1, R3315 += 1, R2620 += 1, R2621 += 1 };
  s7 -> s5 [86, 65535] { R3359 += 1, R3315 += 1, R2621 += 1 };
  s8 -> s8 [0, 65535];
  accepting s2, s5, s6, s8;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 72] { R3361 += 1, R3317 += 1, R3046 += 1, R3047 += 1 };
  s0 -> s2 [0, 72] { R3361 += 1, R3317 += 1, R3047 += 1, R3048 += 1 };
  s0 -> s0 [0, 65535] { R3360 += 1, R3361 += 1 };
  s0 -> s3 [0, 65535] { R3361 += 1, R3316 += 1, R3317 += 1 };
  s0 -> s4 [73, 73] { R3361 += 1, R3317 += 1, R3047 += 1, R3048 += 1 };
  s0 -> s5 [73, 73] { R3361 += 1, R3317 += 1, R3046 += 1, R3047 += 1 };
  s0 -> s6 [73, 73] { R3361 += 1, R3317 += 1, R3046 += 1, R3047 += 1 };
  s0 -> s7 [73, 73] { R3361 += 1, R3317 += 1, R3047 += 1, R3048 += 1 };
  s0 -> s1 [74, 65535] { R3361 += 1, R3317 += 1, R3046 += 1, R3047 += 1 };
  s0 -> s2 [74, 65535] { R3361 += 1, R3317 += 1, R3047 += 1, R3048 += 1 };
  s1 -> s1 [0, 72] { R3361 += 1, R3317 += 1, R3046 += 1, R3047 += 1 };
  s1 -> s2 [0, 72] { R3361 += 1, R3317 += 1, R3047 += 1, R3048 += 1 };
  s1 -> s4 [73, 73] { R3361 += 1, R3317 += 1, R3047 += 1, R3048 += 1 };
  s1 -> s5 [73, 73] { R3361 += 1, R3317 += 1, R3046 += 1, R3047 += 1 };
  s1 -> s6 [73, 73] { R3361 += 1, R3317 += 1, R3046 += 1, R3047 += 1 };
  s1 -> s7 [73, 73] { R3361 += 1, R3317 += 1, R3047 += 1, R3048 += 1 };
  s1 -> s1 [74, 65535] { R3361 += 1, R3317 += 1, R3046 += 1, R3047 += 1 };
  s1 -> s2 [74, 65535] { R3361 += 1, R3317 += 1, R3047 += 1, R3048 += 1 };
  s2 -> s2 [0, 72] { R3361 += 1, R3317 += 1, R3047 += 1, R3048 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R3361 += 1 };
  s2 -> s4 [73, 73] { R3361 += 1, R3317 += 1, R3047 += 1, R3048 += 1 };
  s2 -> s7 [73, 73] { R3361 += 1, R3317 += 1, R3047 += 1, R3048 += 1 };
  s2 -> s2 [74, 65535] { R3361 += 1, R3317 += 1, R3047 += 1, R3048 += 1 };
  s3 -> s1 [0, 72] { R3361 += 1, R3317 += 1, R3046 += 1, R3047 += 1 };
  s3 -> s2 [0, 72] { R3361 += 1, R3317 += 1, R3047 += 1, R3048 += 1 };
  s3 -> s3 [0, 65535] { R3361 += 1, R3316 += 1, R3317 += 1 };
  s3 -> s4 [73, 73] { R3361 += 1, R3317 += 1, R3047 += 1, R3048 += 1 };
  s3 -> s5 [73, 73] { R3361 += 1, R3317 += 1, R3046 += 1, R3047 += 1 };
  s3 -> s6 [73, 73] { R3361 += 1, R3317 += 1, R3046 += 1, R3047 += 1 };
  s3 -> s7 [73, 73] { R3361 += 1, R3317 += 1, R3047 += 1, R3048 += 1 };
  s3 -> s1 [74, 65535] { R3361 += 1, R3317 += 1, R3046 += 1, R3047 += 1 };
  s3 -> s2 [74, 65535] { R3361 += 1, R3317 += 1, R3047 += 1, R3048 += 1 };
  s4 -> s4 [0, 65535] { R3361 += 1, R3317 += 1, R3047 += 1, R3048 += 1 };
  s4 -> s9 [0, 65535] { R3361 += 1 };
  s4 -> s8 [0, 65535];
  s6 -> s4 [0, 65535] { R3361 += 1, R3317 += 1, R3047 += 1, R3048 += 1 };
  s6 -> s6 [0, 65535] { R3361 += 1, R3317 += 1, R3046 += 1, R3047 += 1 };
  s7 -> s7 [0, 65535] { R3361 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R3361 += 1 };
  s9 -> s8 [0, 65535];
  accepting s4, s8, s2, s9, s7;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 72] { R3363 += 1, R3319 += 1, R3260 += 1, R3261 += 1 };
  s0 -> s2 [0, 72] { R3363 += 1, R3319 += 1, R3261 += 1 };
  s0 -> s0 [0, 65535] { R3362 += 1, R3363 += 1 };
  s0 -> s3 [0, 65535] { R3363 += 1, R3318 += 1, R3319 += 1 };
  s0 -> s4 [73, 73] { R3363 += 1, R3319 += 1, R3261 += 1 };
  s0 -> s5 [73, 73] { R3363 += 1, R3319 += 1, R3260 += 1, R3261 += 1 };
  s0 -> s6 [73, 73] { R3363 += 1, R3319 += 1, R3260 += 1, R3261 += 1 };
  s0 -> s7 [73, 73] { R3363 += 1, R3319 += 1, R3261 += 1 };
  s0 -> s2 [74, 76] { R3363 += 1, R3319 += 1, R3261 += 1 };
  s0 -> s1 [74, 65535] { R3363 += 1, R3319 += 1, R3260 += 1, R3261 += 1 };
  s0 -> s8 [77, 77] { R3363 += 1, R3319 += 1, R3261 += 1 };
  s0 -> s2 [86, 65535] { R3363 += 1, R3319 += 1, R3261 += 1 };
  s1 -> s1 [0, 72] { R3363 += 1, R3319 += 1, R3260 += 1, R3261 += 1 };
  s1 -> s2 [0, 72] { R3363 += 1, R3319 += 1, R3261 += 1 };
  s1 -> s4 [73, 73] { R3363 += 1, R3319 += 1, R3261 += 1 };
  s1 -> s5 [73, 73] { R3363 += 1, R3319 += 1, R3260 += 1, R3261 += 1 };
  s1 -> s6 [73, 73] { R3363 += 1, R3319 += 1, R3260 += 1, R3261 += 1 };
  s1 -> s7 [73, 73] { R3363 += 1, R3319 += 1, R3261 += 1 };
  s1 -> s2 [74, 76] { R3363 += 1, R3319 += 1, R3261 += 1 };
  s1 -> s1 [74, 65535] { R3363 += 1, R3319 += 1, R3260 += 1, R3261 += 1 };
  s1 -> s8 [77, 77] { R3363 += 1, R3319 += 1, R3261 += 1 };
  s1 -> s2 [86, 65535] { R3363 += 1, R3319 += 1, R3261 += 1 };
  s2 -> s2 [0, 72] { R3363 += 1, R3319 += 1, R3261 += 1 };
  s2 -> s4 [73, 73] { R3363 += 1, R3319 += 1 };
  s2 -> s7 [73, 73] { R3363 += 1, R3319 += 1 };
  s2 -> s2 [74, 76] { R3363 += 1, R3319 += 1, R3261 += 1 };
  s2 -> s2 [74, 65535] { R3363 += 1, R3319 += 1 };
  s2 -> s8 [77, 77] { R3363 += 1, R3319 += 1, R3261 += 1 };
  s2 -> s2 [86, 65535] { R3363 += 1, R3319 += 1, R3261 += 1 };
  s3 -> s1 [0, 72] { R3363 += 1, R3319 += 1, R3260 += 1, R3261 += 1 };
  s3 -> s2 [0, 72] { R3363 += 1, R3319 += 1, R3261 += 1 };
  s3 -> s3 [0, 65535] { R3363 += 1, R3318 += 1, R3319 += 1 };
  s3 -> s4 [73, 73] { R3363 += 1, R3319 += 1, R3261 += 1 };
  s3 -> s5 [73, 73] { R3363 += 1, R3319 += 1, R3260 += 1, R3261 += 1 };
  s3 -> s6 [73, 73] { R3363 += 1, R3319 += 1, R3260 += 1, R3261 += 1 };
  s3 -> s7 [73, 73] { R3363 += 1, R3319 += 1, R3261 += 1 };
  s3 -> s2 [74, 76] { R3363 += 1, R3319 += 1, R3261 += 1 };
  s3 -> s1 [74, 65535] { R3363 += 1, R3319 += 1, R3260 += 1, R3261 += 1 };
  s3 -> s8 [77, 77] { R3363 += 1, R3319 += 1, R3261 += 1 };
  s3 -> s2 [86, 65535] { R3363 += 1, R3319 += 1, R3261 += 1 };
  s5 -> s7 [0, 76] { R3363 += 1, R3319 += 1, R3261 += 1 };
  s5 -> s5 [0, 65535] { R3363 += 1, R3319 += 1, R3260 += 1, R3261 += 1 };
  s5 -> s11 [77, 77] { R3363 += 1, R3319 += 1, R3261 += 1 };
  s5 -> s7 [86, 65535] { R3363 += 1, R3319 += 1, R3261 += 1 };
  s7 -> s7 [0, 76] { R3363 += 1, R3319 += 1, R3261 += 1 };
  s7 -> s7 [0, 65535] { R3363 += 1, R3319 += 1 };
  s7 -> s11 [77, 77] { R3363 += 1, R3319 += 1, R3261 += 1 };
  s7 -> s7 [86, 65535] { R3363 += 1, R3319 += 1, R3261 += 1 };
  s8 -> s8 [0, 72] { R3363 += 1, R3319 += 1 };
  s8 -> s8 [0, 65535] { R3363 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [73, 73] { R3363 += 1, R3319 += 1 };
  s8 -> s11 [73, 73] { R3363 += 1, R3319 += 1 };
  s8 -> s8 [74, 65535] { R3363 += 1, R3319 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R3363 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s12 [0, 65535] { R3363 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R3363 += 1, R3319 += 1 };
  s12 -> s12 [0, 65535] { R3363 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
synchronised {  // Automata constraining P54
automaton P54_0 {
  init s0;
  s0 -> s1 [109, 109];
  accepting s1;
};
};
constraint R1 = R3279 && R2 = R3363 && R20 - R3363 = -1 && R21 = R3363 && R22 - R3363 = -1 && R23 = R3363 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R2623 + -1*R2621 - R53 = 0 && R52 + R2622 + R2620 = 0 && R3278 = 0 && R3304 = 0 && R3305 = 0 && R3314 = 0 && R3315 = 0 && R3316 = 0 && R3317 = 0 && R3318 = 0 && R3319 = 0 && R3320 = 0 && R3321 = R3363 && R3322 = 0 && R3323 = R3363 && R3324 = 0 && R3325 = R3363 && R3326 = 0 && R3327 = R3363 && R3328 = 0 && R3329 = R3363 && R3330 = 0 && R3331 = R3363 && R3332 = 0 && R3333 = R3363 && R3334 = 0 && R3335 = R3363 && R3336 = 0 && R3337 = R3363 && R3338 = 0 && R3339 = R3363 && R3340 = 0 && R3341 = R3363 && R3342 = 0 && R3343 = R3363 && R3344 = 0 && R3345 = R3363 && R3346 = 0 && R3347 = R3363 && R3348 = 0 && R3349 = R3363 && R3350 = 0 && R3351 = R3363 && R3352 = 0 && R3353 = R3363 && R3354 = 0 && R3355 = R3363 && R3356 = 0 && R3357 = R3363 && R3358 = 0 && R3359 = R3363 && R3360 = 0 && R3361 = R3363 && R3362 = 0 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R2623 + -1*R2621 - R53 < 1 && -1 < R3279 && 0 < R3363 && (R48 + R79 + R76 != 0 || ((R42 + R72 + R70 != 0 || R43 + R73 + R71 + -1*R2623 + -1*R2621 - R53 = 0 || R53 + R2623 + R2621 < 1) && (R42 + R72 + R70 = 0 || R53 + R2623 + R2621 < 1))) && (R48 + R79 + R76 != 0 || ((R46 + R77 + R74 != 0 || R47 + R78 + R75 + -1*R2623 + -1*R2621 - R53 = 0 || R53 + R2623 + R2621 < 1) && (R46 + R77 + R74 = 0 || R53 + R2623 + R2621 < 1))) && (R3264 != 0 || R3265 = R3279 || (R17 = 0 && R3279 = 0)) && (R3266 != 0 || R3267 = R3279 || (R17 = 0 && R3279 = 0)) && (R3268 != 0 || R3269 = R3279 || (R17 = 0 && R3279 = 0)) && (R3270 != 0 || R3271 = R3279 || (R17 = 0 && R3279 = 0)) && (R3272 != 0 || R3273 = R3279 || (R17 = 0 && R3279 = 0)) && (R3274 != 0 || R3275 = R3279 || (R17 = 0 && R3279 = 0)) && (R3276 != 0 || R3277 = R3279 || (R17 = 0 && R3279 = 0)) && (R3280 != 0 || R3279 = R3281 || (R17 = 0 && R3279 = 0)) && (R3282 != 0 || R3279 = R3283 || (R17 = 0 && R3279 = 0)) && (R18 = 0 || (R3302 = 0 && R3303 = 0)) && (R18 = 0 || (R3306 = 0 && R3307 = 0)) && (R18 = 0 || (R3308 = 0 && R3309 = 0)) && (R18 = 0 || (R3310 = 0 && R3311 = 0)) && (R18 = 0 || (R3312 = 0 && R3313 = 0)) && (R19 = 0 || (R3284 = 0 && R3285 = 0)) && (R19 = 0 || (R3286 = 0 && R3287 = 0)) && (R19 = 0 || (R3288 = 0 && R3289 = 0)) && (R19 = 0 || (R3290 = 0 && R3291 = 0)) && (R19 = 0 || (R3292 = 0 && R3293 = 0)) && (R19 = 0 || (R3294 = 0 && R3295 = 0)) && (R19 = 0 || (R3296 = 0 && R3297 = 0)) && (R19 = 0 || (R3298 = 0 && R3299 = 0)) && (R19 = 0 || (R3300 = 0 && R3301 = 0)) && (R48 + R79 + R76 = 0 || (R42 + R72 + R70 = 0 && R43 + R73 + R71 + -1*R2623 + -1*R2621 - R53 = 0)) && (R48 + R79 + R76 = 0 || (R46 + R77 + R74 = 0 && R47 + R78 + R75 + -1*R2623 + -1*R2621 - R53 = 0)) && (R58 + R3051 + R3048 = 0 || (R56 + R3049 + R3046 = 0 && R57 + R3050 + R3047 = 0)) && (R58 + R3051 + R3048 = 0 || (R62 + R3262 + R3260 = 0 && R63 + R3263 + R3261 = 0)) && (R3264 = 0 || (R17 = 0 && R3279 = 0)) && (R3266 = 0 || (R17 = 0 && R3279 = 0)) && (R3268 = 0 || (R17 = 0 && R3279 = 0)) && (R3270 = 0 || (R17 = 0 && R3279 = 0)) && (R3272 = 0 || (R17 = 0 && R3279 = 0)) && (R3274 = 0 || (R17 = 0 && R3279 = 0)) && (R3276 = 0 || (R17 = 0 && R3279 = 0)) && (R3280 = 0 || (R17 = 0 && R3279 = 0)) && (R3282 = 0 || (R17 = 0 && R3279 = 0));
// End of Parikh automata intersection problem
