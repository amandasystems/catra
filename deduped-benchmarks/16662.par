// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R12, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R2620, R2621, R2622, R2623, R27, R3, R3046, R3047, R3048, R3049, R3050, R3051, R3156, R3157, R3158, R3159, R3160, R3161, R3162, R3163, R3164, R3165, R3166, R3167, R3168, R3169, R3170, R3171, R3172, R3173, R3174, R3175, R3176, R3177, R3178, R3179, R3180, R3181, R3182, R3183, R3184, R3185, R3186, R3187, R3188, R3189, R3190, R3191, R3192, R3193, R3194, R3195, R3196, R3197, R3198, R3199, R3200, R3201, R3202, R3203, R3204, R3205, R3206, R3207, R3208, R3209, R3210, R3211, R3212, R3213, R3214, R3215, R3216, R3217, R3218, R3219, R3220, R3221, R3222, R3223, R3224, R3225, R3226, R3227, R3228, R3229, R3230, R3231, R3232, R3233, R3234, R3235, R3236, R3237, R3238, R3239, R3240, R3241, R3242, R3243, R3244, R3245, R3246, R3247, R3248, R3249, R3250, R3251, R3252, R3253, R3254, R3255, R3256, R3257, R3258, R3259, R38, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R70, R71, R72, R73, R74, R75, R76, R77, R78, R79, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 72];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [73, 73];
  s0 -> s1 [74, 65535];
  s1 -> s1 [0, 72];
  s1 -> s2 [73, 73];
  s1 -> s1 [74, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R21 += 1 };
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s1 [0, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R3181 += 1, R19 += 1 };
  s0 -> s0 [0, 65535] { R3180 += 1, R3181 += 1 };
  s1 -> s1 [0, 65535] { R3181 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 72] { R3183 += 1 };
  s0 -> s0 [0, 65535] { R3182 += 1, R3183 += 1 };
  s0 -> s2 [73, 73] { R3183 += 1 };
  s0 -> s3 [73, 73] { R3183 += 1 };
  s0 -> s1 [78, 65535] { R3183 += 1 };
  s1 -> s1 [0, 72] { R3183 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R3183 += 1 };
  s1 -> s3 [73, 73] { R3183 += 1 };
  s1 -> s1 [78, 65535] { R3183 += 1 };
  s2 -> s2 [0, 73] { R3183 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [78, 65535] { R3183 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 72] { R3185 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R3184 += 1, R3185 += 1 };
  s0 -> s2 [73, 73] { R3185 += 1, R38 += 1 };
  s0 -> s3 [73, 73] { R3185 += 1, R38 += 1 };
  s0 -> s1 [74, 65535] { R3185 += 1, R38 += 1 };
  s1 -> s1 [0, 72] { R3185 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R3185 += 1, R38 += 1 };
  s1 -> s3 [73, 73] { R3185 += 1, R38 += 1 };
  s1 -> s1 [74, 65535] { R3185 += 1, R38 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R3185 += 1, R38 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 72] { R3187 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R3186 += 1, R3187 += 1 };
  s0 -> s2 [73, 73] { R3187 += 1, R40 += 1 };
  s0 -> s3 [73, 73] { R3187 += 1, R40 += 1 };
  s0 -> s1 [74, 65535] { R3187 += 1, R40 += 1 };
  s1 -> s1 [0, 72] { R3187 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R3187 += 1, R40 += 1 };
  s1 -> s3 [73, 73] { R3187 += 1, R40 += 1 };
  s1 -> s1 [74, 65535] { R3187 += 1, R40 += 1 };
  s2 -> s2 [0, 65535] { R3187 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 72] { R3189 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R3188 += 1, R3189 += 1 };
  s0 -> s2 [73, 73] { R3189 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [73, 73] { R3189 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [74, 65535] { R3189 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 72] { R3189 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R3189 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [73, 73] { R3189 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [74, 65535] { R3189 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3189 += 1, R42 += 1, R43 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 72] { R3191 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R3190 += 1, R3191 += 1 };
  s0 -> s2 [73, 73] { R3191 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [73, 73] { R3191 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [74, 65535] { R3191 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 72] { R3191 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R3191 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [73, 73] { R3191 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [74, 65535] { R3191 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R3191 += 1, R46 += 1, R47 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 72] { R3193 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R3192 += 1, R3193 += 1 };
  s0 -> s2 [73, 73] { R3193 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [73, 73] { R3193 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [74, 65535] { R3193 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 72] { R3193 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R3193 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [73, 73] { R3193 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [74, 65535] { R3193 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3193 += 1, R52 += 1, R53 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 72] { R3195 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R3194 += 1, R3195 += 1 };
  s0 -> s2 [73, 73] { R3195 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [73, 73] { R3195 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [74, 65535] { R3195 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 72] { R3195 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R3195 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [73, 73] { R3195 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [74, 65535] { R3195 += 1, R56 += 1, R57 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3195 += 1, R56 += 1, R57 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 72] { R3197 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R3196 += 1, R3197 += 1 };
  s0 -> s2 [73, 73] { R3197 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [73, 73] { R3197 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [74, 65535] { R3197 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 72] { R3197 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R3197 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [73, 73] { R3197 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [74, 65535] { R3197 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3197 += 1, R62 += 1, R63 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 72] { R3217 += 1 };
  s0 -> s0 [0, 65535] { R3216 += 1, R3217 += 1 };
  s0 -> s2 [73, 73] { R3217 += 1 };
  s0 -> s1 [74, 65535] { R3217 += 1 };
  s1 -> s1 [0, 72] { R3217 += 1 };
  s1 -> s2 [73, 73] { R3217 += 1 };
  s1 -> s1 [74, 65535] { R3217 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3217 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R3218 += 1, R3219 += 1 };
  s0 -> s1 [0, 65535] { R3219 += 1, R1 += 1 };
  s1 -> s1 [0, 65535] { R3219 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 72] { R3221 += 1 };
  s0 -> s2 [0, 65535] { R3221 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R3220 += 1, R3221 += 1 };
  s0 -> s3 [73, 73] { R3221 += 1 };
  s0 -> s1 [74, 65535] { R3221 += 1 };
  s1 -> s1 [0, 72] { R3221 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [73, 73] { R3221 += 1 };
  s1 -> s1 [74, 65535] { R3221 += 1 };
  s2 -> s1 [0, 72] { R3221 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3221 += 1, R8 += 1 };
  s2 -> s3 [73, 73] { R3221 += 1 };
  s2 -> s1 [74, 65535] { R3221 += 1 };
  s3 -> s3 [0, 65535] { R3221 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 72] { R3223 += 1, R3161 += 1 };
  s0 -> s2 [0, 65535] { R3223 += 1, R3160 += 1, R3161 += 1 };
  s0 -> s0 [0, 65535] { R3222 += 1, R3223 += 1 };
  s0 -> s1 [74, 65535] { R3223 += 1, R3161 += 1 };
  s1 -> s1 [0, 72] { R3223 += 1, R3161 += 1 };
  s1 -> s1 [0, 65535] { R3223 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [74, 65535] { R3223 += 1, R3161 += 1 };
  s2 -> s1 [0, 72] { R3223 += 1, R3161 += 1 };
  s2 -> s2 [0, 65535] { R3223 += 1, R3160 += 1, R3161 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [74, 65535] { R3223 += 1, R3161 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s0 [0, 65535] { R3224 += 1, R3225 += 1 };
  s0 -> s1 [0, 65535] { R3225 += 1, R3162 += 1, R3163 += 1 };
  s0 -> s2 [0, 65535] { R3225 += 1, R3163 += 1, R17 += 1 };
  s1 -> s1 [0, 65535] { R3225 += 1, R3162 += 1, R3163 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R3225 += 1, R3163 += 1, R17 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3225 += 1, R3163 += 1, R17 += 1 };
  s2 -> s4 [0, 65535] { R3225 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3225 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 73] { R3227 += 1, R3165 += 1 };
  s0 -> s0 [0, 65535] { R3226 += 1, R3227 += 1 };
  s0 -> s2 [0, 65535] { R3227 += 1, R3164 += 1, R3165 += 1 };
  s0 -> s1 [77, 65535] { R3227 += 1, R3165 += 1 };
  s1 -> s1 [0, 73] { R3227 += 1, R3165 += 1 };
  s1 -> s1 [0, 65535] { R3227 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [77, 65535] { R3227 += 1, R3165 += 1 };
  s2 -> s1 [0, 73] { R3227 += 1, R3165 += 1 };
  s2 -> s2 [0, 65535] { R3227 += 1, R3164 += 1, R3165 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [77, 65535] { R3227 += 1, R3165 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R3229 += 1, R3166 += 1, R3167 += 1 };
  s0 -> s2 [0, 65535] { R3229 += 1, R3167 += 1, R67 += 1 };
  s0 -> s0 [0, 65535] { R3228 += 1, R3229 += 1 };
  s1 -> s1 [0, 65535] { R3229 += 1, R3166 += 1, R3167 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R3229 += 1, R3167 += 1, R67 += 1 };
  s2 -> s3 [0, 65535] { R3229 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3229 += 1, R3167 += 1, R67 += 1 };
  s3 -> s3 [0, 65535] { R3229 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 76] { R3231 += 1, R3169 += 1 };
  s0 -> s2 [0, 65535] { R3231 += 1, R3169 += 1, R69 += 1 };
  s0 -> s3 [0, 65535] { R3231 += 1, R3168 += 1, R3169 += 1 };
  s0 -> s0 [0, 65535] { R3230 += 1, R3231 += 1 };
  s0 -> s1 [78, 65535] { R3231 += 1, R3169 += 1 };
  s1 -> s1 [0, 76] { R3231 += 1, R3169 += 1 };
  s1 -> s1 [0, 65535] { R3231 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [78, 65535] { R3231 += 1, R3169 += 1 };
  s2 -> s1 [0, 76] { R3231 += 1, R3169 += 1 };
  s2 -> s2 [0, 65535] { R3231 += 1, R3169 += 1, R69 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R3231 += 1 };
  s2 -> s1 [78, 65535] { R3231 += 1, R3169 += 1 };
  s3 -> s1 [0, 76] { R3231 += 1, R3169 += 1 };
  s3 -> s2 [0, 65535] { R3231 += 1, R3169 += 1, R69 += 1 };
  s3 -> s3 [0, 65535] { R3231 += 1, R3168 += 1, R3169 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [78, 65535] { R3231 += 1, R3169 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3231 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 76] { R3233 += 1, R3171 += 1, R73 += 1 };
  s0 -> s2 [0, 65535] { R3233 += 1, R3170 += 1, R3171 += 1 };
  s0 -> s3 [0, 65535] { R3233 += 1, R3171 += 1, R72 += 1, R73 += 1 };
  s0 -> s0 [0, 65535] { R3232 += 1, R3233 += 1 };
  s0 -> s1 [78, 65535] { R3233 += 1, R3171 += 1, R73 += 1 };
  s1 -> s1 [0, 76] { R3233 += 1, R3171 += 1, R73 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R3233 += 1, R3171 += 1 };
  s1 -> s5 [0, 65535] { R3233 += 1 };
  s1 -> s1 [78, 65535] { R3233 += 1, R3171 += 1, R73 += 1 };
  s2 -> s1 [0, 76] { R3233 += 1, R3171 += 1, R73 += 1 };
  s2 -> s2 [0, 65535] { R3233 += 1, R3170 += 1, R3171 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R3233 += 1, R3171 += 1, R72 += 1, R73 += 1 };
  s2 -> s1 [78, 65535] { R3233 += 1, R3171 += 1, R73 += 1 };
  s3 -> s1 [0, 76] { R3233 += 1, R3171 += 1, R73 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3233 += 1, R3171 += 1, R72 += 1, R73 += 1 };
  s3 -> s5 [0, 65535] { R3233 += 1 };
  s3 -> s1 [78, 65535] { R3233 += 1, R3171 += 1, R73 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3233 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R3235 += 1, R3172 += 1, R3173 += 1 };
  s0 -> s2 [0, 65535] { R3235 += 1, R3173 += 1, R78 += 1, R79 += 1 };
  s0 -> s3 [0, 65535] { R3235 += 1, R3173 += 1, R77 += 1, R78 += 1 };
  s0 -> s0 [0, 65535] { R3234 += 1, R3235 += 1 };
  s1 -> s1 [0, 65535] { R3235 += 1, R3172 += 1, R3173 += 1 };
  s1 -> s2 [0, 65535] { R3235 += 1, R3173 += 1, R78 += 1, R79 += 1 };
  s1 -> s3 [0, 65535] { R3235 += 1, R3173 += 1, R77 += 1, R78 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R3235 += 1, R3173 += 1 };
  s2 -> s2 [0, 65535] { R3235 += 1, R3173 += 1, R78 += 1, R79 += 1 };
  s2 -> s4 [0, 65535] { R3235 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R3235 += 1, R3173 += 1, R78 += 1, R79 += 1 };
  s3 -> s4 [0, 65535] { R3235 += 1 };
  s3 -> s3 [0, 65535] { R3235 += 1, R3173 += 1, R77 += 1, R78 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3235 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3235 += 1, R3173 += 1 };
  s6 -> s4 [0, 65535] { R3235 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 77] { R3237 += 1, R3175 += 1, R2623 += 1 };
  s0 -> s2 [0, 65535] { R3237 += 1, R3174 += 1, R3175 += 1 };
  s0 -> s0 [0, 65535] { R3236 += 1, R3237 += 1 };
  s0 -> s3 [85, 85] { R3237 += 1, R3175 += 1, R2623 += 1 };
  s0 -> s1 [86, 65535] { R3237 += 1, R3175 += 1, R2623 += 1 };
  s1 -> s1 [0, 77] { R3237 += 1, R3175 += 1, R2623 += 1 };
  s1 -> s3 [85, 85] { R3237 += 1, R3175 += 1, R2623 += 1 };
  s1 -> s1 [86, 65535] { R3237 += 1, R3175 += 1, R2623 += 1 };
  s2 -> s1 [0, 77] { R3237 += 1, R3175 += 1, R2623 += 1 };
  s2 -> s2 [0, 65535] { R3237 += 1, R3174 += 1, R3175 += 1 };
  s2 -> s3 [85, 85] { R3237 += 1, R3175 += 1, R2623 += 1 };
  s2 -> s1 [86, 65535] { R3237 += 1, R3175 += 1, R2623 += 1 };
  s3 -> s3 [0, 77] { R3237 += 1, R3175 += 1, R2623 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3237 += 1, R3175 += 1 };
  s3 -> s5 [0, 65535] { R3237 += 1 };
  s3 -> s3 [85, 65535] { R3237 += 1, R3175 += 1, R2623 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3237 += 1 };
  accepting s3, s4, s5;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R3239 += 1, R3176 += 1, R3177 += 1 };
  s0 -> s2 [0, 65535] { R3239 += 1, R3177 += 1, R3050 += 1, R3051 += 1 };
  s0 -> s3 [0, 65535] { R3239 += 1, R3177 += 1 };
  s0 -> s0 [0, 65535] { R3238 += 1, R3239 += 1 };
  s1 -> s1 [0, 65535] { R3239 += 1, R3176 += 1, R3177 += 1 };
  s1 -> s2 [0, 65535] { R3239 += 1, R3177 += 1, R3050 += 1, R3051 += 1 };
  s1 -> s3 [0, 65535] { R3239 += 1, R3177 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3239 += 1, R3177 += 1, R3050 += 1, R3051 += 1 };
  s2 -> s4 [0, 65535] { R3239 += 1 };
  s2 -> s3 [0, 65535] { R3239 += 1, R3177 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s4 [0, 65535] { R3239 += 1 };
  s3 -> s3 [0, 65535] { R3239 += 1, R3177 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3239 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 76] { R3241 += 1, R3179 += 1, R3159 += 1 };
  s0 -> s1 [0, 65535] { R3241 += 1, R3179 += 1 };
  s0 -> s0 [0, 65535] { R3240 += 1, R3241 += 1 };
  s0 -> s2 [0, 65535] { R3241 += 1, R3178 += 1, R3179 += 1 };
  s0 -> s3 [77, 77] { R3241 += 1, R3179 += 1, R3159 += 1 };
  s0 -> s4 [77, 77] { R3241 += 1, R3179 += 1, R3159 += 1 };
  s0 -> s1 [86, 65535] { R3241 += 1, R3179 += 1, R3159 += 1 };
  s1 -> s1 [0, 76] { R3241 += 1, R3179 += 1, R3159 += 1 };
  s1 -> s1 [0, 65535] { R3241 += 1, R3179 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R3241 += 1 };
  s1 -> s3 [77, 77] { R3241 += 1, R3179 += 1, R3159 += 1 };
  s1 -> s4 [77, 77] { R3241 += 1, R3179 += 1, R3159 += 1 };
  s1 -> s1 [86, 65535] { R3241 += 1, R3179 += 1, R3159 += 1 };
  s2 -> s1 [0, 76] { R3241 += 1, R3179 += 1, R3159 += 1 };
  s2 -> s1 [0, 65535] { R3241 += 1, R3179 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3241 += 1, R3178 += 1, R3179 += 1 };
  s2 -> s3 [77, 77] { R3241 += 1, R3179 += 1, R3159 += 1 };
  s2 -> s4 [77, 77] { R3241 += 1, R3179 += 1, R3159 += 1 };
  s2 -> s1 [86, 65535] { R3241 += 1, R3179 += 1, R3159 += 1 };
  s3 -> s3 [0, 77] { R3241 += 1, R3179 += 1, R3159 += 1 };
  s3 -> s3 [0, 65535] { R3241 += 1, R3179 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R3241 += 1 };
  s3 -> s3 [86, 65535] { R3241 += 1, R3179 += 1, R3159 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3241 += 1, R3179 += 1 };
  s4 -> s6 [0, 65535] { R3241 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3241 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R3243 += 1, R3198 += 1, R3199 += 1 };
  s0 -> s0 [0, 65535] { R3242 += 1, R3243 += 1 };
  s0 -> s2 [0, 65535] { R3243 += 1, R3199 += 1, R18 += 1 };
  s1 -> s1 [0, 65535] { R3243 += 1, R3198 += 1, R3199 += 1 };
  s1 -> s2 [0, 65535] { R3243 += 1, R3199 += 1, R18 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3243 += 1, R3199 += 1, R18 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R3243 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3243 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 72] { R3245 += 1, R3201 += 1 };
  s0 -> s0 [0, 65535] { R3244 += 1, R3245 += 1 };
  s0 -> s2 [0, 65535] { R3245 += 1, R3200 += 1, R3201 += 1 };
  s0 -> s3 [73, 73] { R3245 += 1, R3201 += 1 };
  s0 -> s4 [73, 73] { R3245 += 1, R3201 += 1 };
  s0 -> s5 [77, 77] { R3245 += 1, R3201 += 1 };
  s0 -> s1 [78, 65535] { R3245 += 1, R3201 += 1 };
  s1 -> s1 [0, 72] { R3245 += 1, R3201 += 1 };
  s1 -> s3 [73, 73] { R3245 += 1, R3201 += 1 };
  s1 -> s4 [73, 73] { R3245 += 1, R3201 += 1 };
  s1 -> s5 [77, 77] { R3245 += 1, R3201 += 1 };
  s1 -> s1 [78, 65535] { R3245 += 1, R3201 += 1 };
  s2 -> s1 [0, 72] { R3245 += 1, R3201 += 1 };
  s2 -> s2 [0, 65535] { R3245 += 1, R3200 += 1, R3201 += 1 };
  s2 -> s3 [73, 73] { R3245 += 1, R3201 += 1 };
  s2 -> s4 [73, 73] { R3245 += 1, R3201 += 1 };
  s2 -> s5 [77, 77] { R3245 += 1, R3201 += 1 };
  s2 -> s1 [78, 65535] { R3245 += 1, R3201 += 1 };
  s4 -> s4 [0, 73] { R3245 += 1, R3201 += 1 };
  s4 -> s7 [77, 77] { R3245 += 1, R3201 += 1 };
  s4 -> s4 [78, 65535] { R3245 += 1, R3201 += 1 };
  s5 -> s5 [0, 72] { R3245 += 1, R3201 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R3245 += 1 };
  s5 -> s7 [73, 73] { R3245 += 1, R3201 += 1 };
  s5 -> s8 [73, 73] { R3245 += 1, R3201 += 1 };
  s5 -> s5 [77, 65535] { R3245 += 1, R3201 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 73] { R3245 += 1, R3201 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R3245 += 1 };
  s7 -> s7 [77, 65535] { R3245 += 1, R3201 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R3245 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 72] { R3247 += 1, R3203 += 1, R66 += 1 };
  s0 -> s2 [0, 65535] { R3247 += 1, R3202 += 1, R3203 += 1 };
  s0 -> s0 [0, 65535] { R3246 += 1, R3247 += 1 };
  s0 -> s3 [73, 73] { R3247 += 1, R3203 += 1, R66 += 1 };
  s0 -> s4 [73, 73] { R3247 += 1, R3203 += 1, R66 += 1 };
  s0 -> s1 [74, 65535] { R3247 += 1, R3203 += 1, R66 += 1 };
  s1 -> s1 [0, 72] { R3247 += 1, R3203 += 1, R66 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R3247 += 1 };
  s1 -> s3 [73, 73] { R3247 += 1, R3203 += 1, R66 += 1 };
  s1 -> s4 [73, 73] { R3247 += 1, R3203 += 1, R66 += 1 };
  s1 -> s1 [74, 65535] { R3247 += 1, R3203 += 1, R66 += 1 };
  s2 -> s1 [0, 72] { R3247 += 1, R3203 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R3247 += 1, R3202 += 1, R3203 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [73, 73] { R3247 += 1, R3203 += 1, R66 += 1 };
  s2 -> s4 [73, 73] { R3247 += 1, R3203 += 1, R66 += 1 };
  s2 -> s1 [74, 65535] { R3247 += 1, R3203 += 1, R66 += 1 };
  s3 -> s3 [0, 65535] { R3247 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R3247 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R3247 += 1, R3203 += 1, R66 += 1 };
  s5 -> s5 [0, 65535] { R3247 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 72] { R3249 += 1, R3205 += 1, R68 += 1 };
  s0 -> s0 [0, 65535] { R3248 += 1, R3249 += 1 };
  s0 -> s2 [0, 65535] { R3249 += 1, R3204 += 1, R3205 += 1 };
  s0 -> s3 [73, 73] { R3249 += 1, R3205 += 1, R68 += 1 };
  s0 -> s4 [73, 73] { R3249 += 1, R3205 += 1, R68 += 1 };
  s0 -> s1 [74, 65535] { R3249 += 1, R3205 += 1, R68 += 1 };
  s1 -> s1 [0, 72] { R3249 += 1, R3205 += 1, R68 += 1 };
  s1 -> s1 [0, 65535] { R3249 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R3249 += 1, R3205 += 1, R68 += 1 };
  s1 -> s4 [73, 73] { R3249 += 1, R3205 += 1, R68 += 1 };
  s1 -> s1 [74, 65535] { R3249 += 1, R3205 += 1, R68 += 1 };
  s2 -> s1 [0, 72] { R3249 += 1, R3205 += 1, R68 += 1 };
  s2 -> s2 [0, 65535] { R3249 += 1, R3204 += 1, R3205 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R3249 += 1, R3205 += 1, R68 += 1 };
  s2 -> s4 [73, 73] { R3249 += 1, R3205 += 1, R68 += 1 };
  s2 -> s1 [74, 65535] { R3249 += 1, R3205 += 1, R68 += 1 };
  s3 -> s6 [0, 65535] { R3249 += 1 };
  s3 -> s3 [0, 65535] { R3249 += 1, R3205 += 1, R68 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3249 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3249 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 72] { R3251 += 1, R3207 += 1, R70 += 1, R71 += 1 };
  s0 -> s2 [0, 65535] { R3251 += 1, R3206 += 1, R3207 += 1 };
  s0 -> s0 [0, 65535] { R3250 += 1, R3251 += 1 };
  s0 -> s3 [73, 73] { R3251 += 1, R3207 += 1, R70 += 1, R71 += 1 };
  s0 -> s4 [73, 73] { R3251 += 1, R3207 += 1, R70 += 1, R71 += 1 };
  s0 -> s1 [74, 65535] { R3251 += 1, R3207 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 72] { R3251 += 1, R3207 += 1, R70 += 1, R71 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3251 += 1 };
  s1 -> s3 [73, 73] { R3251 += 1, R3207 += 1, R70 += 1, R71 += 1 };
  s1 -> s4 [73, 73] { R3251 += 1, R3207 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [74, 65535] { R3251 += 1, R3207 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [0, 72] { R3251 += 1, R3207 += 1, R70 += 1, R71 += 1 };
  s2 -> s2 [0, 65535] { R3251 += 1, R3206 += 1, R3207 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R3251 += 1, R3207 += 1, R70 += 1, R71 += 1 };
  s2 -> s4 [73, 73] { R3251 += 1, R3207 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [74, 65535] { R3251 += 1, R3207 += 1, R70 += 1, R71 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R3251 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3251 += 1, R3207 += 1, R70 += 1, R71 += 1 };
  s4 -> s6 [0, 65535] { R3251 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3251 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 72] { R3253 += 1, R3209 += 1, R74 += 1, R75 += 1 };
  s0 -> s2 [0, 65535] { R3253 += 1, R3208 += 1, R3209 += 1 };
  s0 -> s0 [0, 65535] { R3252 += 1, R3253 += 1 };
  s0 -> s3 [73, 73] { R3253 += 1, R3209 += 1, R74 += 1, R75 += 1 };
  s0 -> s4 [73, 73] { R3253 += 1, R3209 += 1, R74 += 1, R75 += 1 };
  s0 -> s1 [74, 65535] { R3253 += 1, R3209 += 1, R74 += 1, R75 += 1 };
  s1 -> s1 [0, 72] { R3253 += 1, R3209 += 1, R74 += 1, R75 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3253 += 1 };
  s1 -> s3 [73, 73] { R3253 += 1, R3209 += 1, R74 += 1, R75 += 1 };
  s1 -> s4 [73, 73] { R3253 += 1, R3209 += 1, R74 += 1, R75 += 1 };
  s1 -> s1 [74, 65535] { R3253 += 1, R3209 += 1, R74 += 1, R75 += 1 };
  s2 -> s1 [0, 72] { R3253 += 1, R3209 += 1, R74 += 1, R75 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3253 += 1, R3208 += 1, R3209 += 1 };
  s2 -> s3 [73, 73] { R3253 += 1, R3209 += 1, R74 += 1, R75 += 1 };
  s2 -> s4 [73, 73] { R3253 += 1, R3209 += 1, R74 += 1, R75 += 1 };
  s2 -> s1 [74, 65535] { R3253 += 1, R3209 += 1, R74 += 1, R75 += 1 };
  s3 -> s3 [0, 65535] { R3253 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R3253 += 1 };
  s4 -> s4 [0, 65535] { R3253 += 1, R3209 += 1, R74 += 1, R75 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3253 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 72] { R3255 += 1, R3211 += 1, R2620 += 1, R2621 += 1 };
  s0 -> s2 [0, 72] { R3255 += 1, R3211 += 1, R2621 += 1 };
  s0 -> s3 [0, 65535] { R3255 += 1, R3210 += 1, R3211 += 1 };
  s0 -> s0 [0, 65535] { R3254 += 1, R3255 += 1 };
  s0 -> s4 [73, 73] { R3255 += 1, R3211 += 1, R2620 += 1, R2621 += 1 };
  s0 -> s5 [73, 73] { R3255 += 1, R3211 += 1, R2621 += 1 };
  s0 -> s6 [73, 73] { R3255 += 1, R3211 += 1, R2620 += 1, R2621 += 1 };
  s0 -> s7 [73, 73] { R3255 += 1, R3211 += 1, R2621 += 1 };
  s0 -> s2 [74, 77] { R3255 += 1, R3211 += 1, R2621 += 1 };
  s0 -> s1 [74, 65535] { R3255 += 1, R3211 += 1, R2620 += 1, R2621 += 1 };
  s0 -> s2 [86, 65535] { R3255 += 1, R3211 += 1, R2621 += 1 };
  s1 -> s1 [0, 72] { R3255 += 1, R3211 += 1, R2620 += 1, R2621 += 1 };
  s1 -> s2 [0, 72] { R3255 += 1, R3211 += 1, R2621 += 1 };
  s1 -> s4 [73, 73] { R3255 += 1, R3211 += 1, R2620 += 1, R2621 += 1 };
  s1 -> s5 [73, 73] { R3255 += 1, R3211 += 1, R2621 += 1 };
  s1 -> s6 [73, 73] { R3255 += 1, R3211 += 1, R2620 += 1, R2621 += 1 };
  s1 -> s7 [73, 73] { R3255 += 1, R3211 += 1, R2621 += 1 };
  s1 -> s2 [74, 77] { R3255 += 1, R3211 += 1, R2621 += 1 };
  s1 -> s1 [74, 65535] { R3255 += 1, R3211 += 1, R2620 += 1, R2621 += 1 };
  s1 -> s2 [86, 65535] { R3255 += 1, R3211 += 1, R2621 += 1 };
  s2 -> s2 [0, 72] { R3255 += 1, R3211 += 1, R2621 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R3255 += 1 };
  s2 -> s5 [73, 73] { R3255 += 1, R3211 += 1, R2621 += 1 };
  s2 -> s7 [73, 73] { R3255 += 1, R3211 += 1, R2621 += 1 };
  s2 -> s2 [74, 77] { R3255 += 1, R3211 += 1, R2621 += 1 };
  s2 -> s2 [86, 65535] { R3255 += 1, R3211 += 1, R2621 += 1 };
  s3 -> s1 [0, 72] { R3255 += 1, R3211 += 1, R2620 += 1, R2621 += 1 };
  s3 -> s2 [0, 72] { R3255 += 1, R3211 += 1, R2621 += 1 };
  s3 -> s3 [0, 65535] { R3255 += 1, R3210 += 1, R3211 += 1 };
  s3 -> s4 [73, 73] { R3255 += 1, R3211 += 1, R2620 += 1, R2621 += 1 };
  s3 -> s5 [73, 73] { R3255 += 1, R3211 += 1, R2621 += 1 };
  s3 -> s6 [73, 73] { R3255 += 1, R3211 += 1, R2620 += 1, R2621 += 1 };
  s3 -> s7 [73, 73] { R3255 += 1, R3211 += 1, R2621 += 1 };
  s3 -> s2 [74, 77] { R3255 += 1, R3211 += 1, R2621 += 1 };
  s3 -> s1 [74, 65535] { R3255 += 1, R3211 += 1, R2620 += 1, R2621 += 1 };
  s3 -> s2 [86, 65535] { R3255 += 1, R3211 += 1, R2621 += 1 };
  s4 -> s7 [0, 77] { R3255 += 1, R3211 += 1, R2621 += 1 };
  s4 -> s4 [0, 65535] { R3255 += 1, R3211 += 1, R2620 += 1, R2621 += 1 };
  s4 -> s7 [86, 65535] { R3255 += 1, R3211 += 1, R2621 += 1 };
  s5 -> s5 [0, 65535] { R3255 += 1 };
  s5 -> s8 [0, 65535];
  s7 -> s7 [0, 77] { R3255 += 1, R3211 += 1, R2621 += 1 };
  s7 -> s7 [0, 65535] { R3255 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [86, 65535] { R3255 += 1, R3211 += 1, R2621 += 1 };
  s8 -> s8 [0, 65535];
  accepting s2, s5, s7, s8;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 72] { R3257 += 1, R3213 += 1, R3047 += 1, R3048 += 1 };
  s0 -> s2 [0, 72] { R3257 += 1, R3213 += 1, R3046 += 1, R3047 += 1 };
  s0 -> s3 [0, 65535] { R3257 += 1, R3212 += 1, R3213 += 1 };
  s0 -> s0 [0, 65535] { R3256 += 1, R3257 += 1 };
  s0 -> s4 [73, 73] { R3257 += 1, R3213 += 1, R3046 += 1, R3047 += 1 };
  s0 -> s5 [73, 73] { R3257 += 1, R3213 += 1, R3047 += 1, R3048 += 1 };
  s0 -> s6 [73, 73] { R3257 += 1, R3213 += 1, R3047 += 1, R3048 += 1 };
  s0 -> s7 [73, 73] { R3257 += 1, R3213 += 1, R3046 += 1, R3047 += 1 };
  s0 -> s1 [74, 65535] { R3257 += 1, R3213 += 1, R3047 += 1, R3048 += 1 };
  s0 -> s2 [74, 65535] { R3257 += 1, R3213 += 1, R3046 += 1, R3047 += 1 };
  s1 -> s1 [0, 72] { R3257 += 1, R3213 += 1, R3047 += 1, R3048 += 1 };
  s1 -> s1 [0, 65535] { R3257 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s5 [73, 73] { R3257 += 1, R3213 += 1, R3047 += 1, R3048 += 1 };
  s1 -> s6 [73, 73] { R3257 += 1, R3213 += 1, R3047 += 1, R3048 += 1 };
  s1 -> s1 [74, 65535] { R3257 += 1, R3213 += 1, R3047 += 1, R3048 += 1 };
  s2 -> s1 [0, 72] { R3257 += 1, R3213 += 1, R3047 += 1, R3048 += 1 };
  s2 -> s2 [0, 72] { R3257 += 1, R3213 += 1, R3046 += 1, R3047 += 1 };
  s2 -> s4 [73, 73] { R3257 += 1, R3213 += 1, R3046 += 1, R3047 += 1 };
  s2 -> s5 [73, 73] { R3257 += 1, R3213 += 1, R3047 += 1, R3048 += 1 };
  s2 -> s6 [73, 73] { R3257 += 1, R3213 += 1, R3047 += 1, R3048 += 1 };
  s2 -> s7 [73, 73] { R3257 += 1, R3213 += 1, R3046 += 1, R3047 += 1 };
  s2 -> s1 [74, 65535] { R3257 += 1, R3213 += 1, R3047 += 1, R3048 += 1 };
  s2 -> s2 [74, 65535] { R3257 += 1, R3213 += 1, R3046 += 1, R3047 += 1 };
  s3 -> s1 [0, 72] { R3257 += 1, R3213 += 1, R3047 += 1, R3048 += 1 };
  s3 -> s2 [0, 72] { R3257 += 1, R3213 += 1, R3046 += 1, R3047 += 1 };
  s3 -> s3 [0, 65535] { R3257 += 1, R3212 += 1, R3213 += 1 };
  s3 -> s4 [73, 73] { R3257 += 1, R3213 += 1, R3046 += 1, R3047 += 1 };
  s3 -> s5 [73, 73] { R3257 += 1, R3213 += 1, R3047 += 1, R3048 += 1 };
  s3 -> s6 [73, 73] { R3257 += 1, R3213 += 1, R3047 += 1, R3048 += 1 };
  s3 -> s7 [73, 73] { R3257 += 1, R3213 += 1, R3046 += 1, R3047 += 1 };
  s3 -> s1 [74, 65535] { R3257 += 1, R3213 += 1, R3047 += 1, R3048 += 1 };
  s3 -> s2 [74, 65535] { R3257 += 1, R3213 += 1, R3046 += 1, R3047 += 1 };
  s5 -> s5 [0, 65535] { R3257 += 1 };
  s5 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R3257 += 1, R3213 += 1, R3047 += 1, R3048 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s9 [0, 65535] { R3257 += 1 };
  s7 -> s6 [0, 65535] { R3257 += 1, R3213 += 1, R3047 += 1, R3048 += 1 };
  s7 -> s7 [0, 65535] { R3257 += 1, R3213 += 1, R3046 += 1, R3047 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R3257 += 1 };
  accepting s8, s5, s9, s6, s1;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 72] { R3259 += 1, R3215 += 1, R3157 += 1 };
  s0 -> s2 [0, 72] { R3259 += 1, R3215 += 1, R3156 += 1, R3157 += 1 };
  s0 -> s3 [0, 65535] { R3259 += 1, R3214 += 1, R3215 += 1 };
  s0 -> s0 [0, 65535] { R3258 += 1, R3259 += 1 };
  s0 -> s4 [73, 73] { R3259 += 1, R3215 += 1, R3157 += 1 };
  s0 -> s5 [73, 73] { R3259 += 1, R3215 += 1, R3156 += 1, R3157 += 1 };
  s0 -> s6 [73, 73] { R3259 += 1, R3215 += 1, R3157 += 1 };
  s0 -> s7 [73, 73] { R3259 += 1, R3215 += 1, R3156 += 1, R3157 += 1 };
  s0 -> s1 [74, 76] { R3259 += 1, R3215 += 1, R3157 += 1 };
  s0 -> s2 [74, 65535] { R3259 += 1, R3215 += 1, R3156 += 1, R3157 += 1 };
  s0 -> s1 [86, 65535] { R3259 += 1, R3215 += 1, R3157 += 1 };
  s1 -> s1 [0, 72] { R3259 += 1, R3215 += 1, R3157 += 1 };
  s1 -> s1 [0, 65535] { R3259 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s4 [73, 73] { R3259 += 1, R3215 += 1 };
  s1 -> s6 [73, 73] { R3259 += 1, R3215 += 1 };
  s1 -> s1 [74, 76] { R3259 += 1, R3215 += 1, R3157 += 1 };
  s1 -> s1 [74, 65535] { R3259 += 1, R3215 += 1 };
  s1 -> s1 [86, 65535] { R3259 += 1, R3215 += 1, R3157 += 1 };
  s2 -> s1 [0, 72] { R3259 += 1, R3215 += 1, R3157 += 1 };
  s2 -> s2 [0, 72] { R3259 += 1, R3215 += 1, R3156 += 1, R3157 += 1 };
  s2 -> s4 [73, 73] { R3259 += 1, R3215 += 1, R3157 += 1 };
  s2 -> s5 [73, 73] { R3259 += 1, R3215 += 1, R3156 += 1, R3157 += 1 };
  s2 -> s6 [73, 73] { R3259 += 1, R3215 += 1, R3157 += 1 };
  s2 -> s7 [73, 73] { R3259 += 1, R3215 += 1, R3156 += 1, R3157 += 1 };
  s2 -> s1 [74, 76] { R3259 += 1, R3215 += 1, R3157 += 1 };
  s2 -> s2 [74, 65535] { R3259 += 1, R3215 += 1, R3156 += 1, R3157 += 1 };
  s2 -> s1 [86, 65535] { R3259 += 1, R3215 += 1, R3157 += 1 };
  s3 -> s1 [0, 72] { R3259 += 1, R3215 += 1, R3157 += 1 };
  s3 -> s2 [0, 72] { R3259 += 1, R3215 += 1, R3156 += 1, R3157 += 1 };
  s3 -> s3 [0, 65535] { R3259 += 1, R3214 += 1, R3215 += 1 };
  s3 -> s4 [73, 73] { R3259 += 1, R3215 += 1, R3157 += 1 };
  s3 -> s5 [73, 73] { R3259 += 1, R3215 += 1, R3156 += 1, R3157 += 1 };
  s3 -> s6 [73, 73] { R3259 += 1, R3215 += 1, R3157 += 1 };
  s3 -> s7 [73, 73] { R3259 += 1, R3215 += 1, R3156 += 1, R3157 += 1 };
  s3 -> s1 [74, 76] { R3259 += 1, R3215 += 1, R3157 += 1 };
  s3 -> s2 [74, 65535] { R3259 += 1, R3215 += 1, R3156 += 1, R3157 += 1 };
  s3 -> s1 [86, 65535] { R3259 += 1, R3215 += 1, R3157 += 1 };
  s4 -> s4 [0, 76] { R3259 += 1, R3215 += 1, R3157 += 1 };
  s4 -> s9 [0, 65535] { R3259 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s4 [0, 65535] { R3259 += 1, R3215 += 1 };
  s4 -> s4 [86, 65535] { R3259 += 1, R3215 += 1, R3157 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R3259 += 1 };
  s7 -> s4 [0, 76] { R3259 += 1, R3215 += 1, R3157 += 1 };
  s7 -> s7 [0, 65535] { R3259 += 1, R3215 += 1, R3156 += 1, R3157 += 1 };
  s7 -> s4 [86, 65535] { R3259 += 1, R3215 += 1, R3157 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R3259 += 1 };
  s9 -> s8 [0, 65535];
  accepting s4, s8, s9, s6, s1;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
synchronised {  // Automata constraining P54
automaton P54_0 {
  init s0;
  s0 -> s1 [109, 109];
  accepting s1;
};
};
constraint R1 = R3175 && R2 = R3259 && R20 - R3259 = -1 && R21 = R3259 && R22 - R3259 = -1 && R23 = R3259 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R2623 + -1*R2621 - R53 = 0 && R52 + R2622 + R2620 = 0 && R3174 = 0 && R3200 = 0 && R3201 = 0 && R3210 = 0 && R3211 = 0 && R3212 = 0 && R3213 = 0 && R3214 = 0 && R3215 = 0 && R3216 = 0 && R3217 = R3259 && R3218 = 0 && R3219 = R3259 && R3220 = 0 && R3221 = R3259 && R3222 = 0 && R3223 = R3259 && R3224 = 0 && R3225 = R3259 && R3226 = 0 && R3227 = R3259 && R3228 = 0 && R3229 = R3259 && R3230 = 0 && R3231 = R3259 && R3232 = 0 && R3233 = R3259 && R3234 = 0 && R3235 = R3259 && R3236 = 0 && R3237 = R3259 && R3238 = 0 && R3239 = R3259 && R3240 = 0 && R3241 = R3259 && R3242 = 0 && R3243 = R3259 && R3244 = 0 && R3245 = R3259 && R3246 = 0 && R3247 = R3259 && R3248 = 0 && R3249 = R3259 && R3250 = 0 && R3251 = R3259 && R3252 = 0 && R3253 = R3259 && R3254 = 0 && R3255 = R3259 && R3256 = 0 && R3257 = R3259 && R3258 = 0 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R2623 + -1*R2621 - R53 < 1 && -1 < R3175 && 0 < R3259 && (R48 + R79 + R76 != 0 || ((R42 + R72 + R70 != 0 || R43 + R73 + R71 + -1*R2623 + -1*R2621 - R53 = 0 || R53 + R2623 + R2621 < 1) && (R42 + R72 + R70 = 0 || R53 + R2623 + R2621 < 1))) && (R48 + R79 + R76 != 0 || ((R46 + R77 + R74 != 0 || R47 + R78 + R75 + -1*R2623 + -1*R2621 - R53 = 0 || R53 + R2623 + R2621 < 1) && (R46 + R77 + R74 = 0 || R53 + R2623 + R2621 < 1))) && (R3160 != 0 || R3161 = R3175 || (R17 = 0 && R3175 = 0)) && (R3162 != 0 || R3163 = R3175 || (R17 = 0 && R3175 = 0)) && (R3164 != 0 || R3165 = R3175 || (R17 = 0 && R3175 = 0)) && (R3166 != 0 || R3167 = R3175 || (R17 = 0 && R3175 = 0)) && (R3168 != 0 || R3169 = R3175 || (R17 = 0 && R3175 = 0)) && (R3170 != 0 || R3171 = R3175 || (R17 = 0 && R3175 = 0)) && (R3172 != 0 || R3173 = R3175 || (R17 = 0 && R3175 = 0)) && (R3176 != 0 || R3175 = R3177 || (R17 = 0 && R3175 = 0)) && (R3178 != 0 || R3175 = R3179 || (R17 = 0 && R3175 = 0)) && (R18 = 0 || (R3198 = 0 && R3199 = 0)) && (R18 = 0 || (R3202 = 0 && R3203 = 0)) && (R18 = 0 || (R3204 = 0 && R3205 = 0)) && (R18 = 0 || (R3206 = 0 && R3207 = 0)) && (R18 = 0 || (R3208 = 0 && R3209 = 0)) && (R19 = 0 || (R3180 = 0 && R3181 = 0)) && (R19 = 0 || (R3182 = 0 && R3183 = 0)) && (R19 = 0 || (R3184 = 0 && R3185 = 0)) && (R19 = 0 || (R3186 = 0 && R3187 = 0)) && (R19 = 0 || (R3188 = 0 && R3189 = 0)) && (R19 = 0 || (R3190 = 0 && R3191 = 0)) && (R19 = 0 || (R3192 = 0 && R3193 = 0)) && (R19 = 0 || (R3194 = 0 && R3195 = 0)) && (R19 = 0 || (R3196 = 0 && R3197 = 0)) && (R48 + R79 + R76 = 0 || (R42 + R72 + R70 = 0 && R43 + R73 + R71 + -1*R2623 + -1*R2621 - R53 = 0)) && (R48 + R79 + R76 = 0 || (R46 + R77 + R74 = 0 && R47 + R78 + R75 + -1*R2623 + -1*R2621 - R53 = 0)) && (R58 + R3051 + R3048 = 0 || (R56 + R3049 + R3046 = 0 && R57 + R3050 + R3047 = 0)) && (R58 + R3051 + R3048 = 0 || (R62 + R3158 + R3156 = 0 && R63 + R3159 + R3157 = 0)) && (R3160 = 0 || (R17 = 0 && R3175 = 0)) && (R3162 = 0 || (R17 = 0 && R3175 = 0)) && (R3164 = 0 || (R17 = 0 && R3175 = 0)) && (R3166 = 0 || (R17 = 0 && R3175 = 0)) && (R3168 = 0 || (R17 = 0 && R3175 = 0)) && (R3170 = 0 || (R17 = 0 && R3175 = 0)) && (R3172 = 0 || (R17 = 0 && R3175 = 0)) && (R3176 = 0 || (R17 = 0 && R3175 = 0)) && (R3178 = 0 || (R17 = 0 && R3175 = 0));
// End of Parikh automata intersection problem
