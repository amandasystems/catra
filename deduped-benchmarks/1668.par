// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R13, R14, R147, R148, R2, R213, R214, R215, R216, R217, R218, R219, R220, R221, R222, R223, R224, R225, R226, R227, R228, R229, R230, R231, R232, R233, R234, R235, R236, R237, R238, R239, R240, R241, R242, R243, R244, R245, R246, R247, R248, R249, R250, R251, R252, R253, R254, R255, R256, R257, R258, R259, R260, R261, R262, R263, R264, R265, R266, R267, R268, R269, R270, R271, R272, R273, R274, R275, R276, R3, R4, R5, R6, R7, R8, R9;
synchronised {  // Automata constraining value1
automaton value1_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s1 [44, 44];
  s0 -> s0 [45, 65535];
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value1_2 {
  init s0;
  s0 -> s1 [0, 43] { R148 += 1 };
  s0 -> s0 [0, 65535] { R147 += 1, R148 += 1 };
  s0 -> s2 [44, 44];
  s0 -> s1 [45, 65535] { R148 += 1 };
  s1 -> s1 [0, 43] { R148 += 1 };
  s1 -> s2 [44, 44];
  s1 -> s1 [45, 65535] { R148 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value1_3 {
  init s0;
  s0 -> s1 [0, 43] { R240 += 1 };
  s0 -> s0 [0, 65535] { R239 += 1, R240 += 1 };
  s0 -> s1 [45, 65535] { R240 += 1 };
  s1 -> s1 [0, 43] { R240 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [45, 65535] { R240 += 1 };
  accepting s0, s1;
};
automaton value1_4 {
  init s0;
  s0 -> s1 [0, 65535] { R242 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R241 += 1, R242 += 1 };
  s1 -> s1 [0, 65535] { R242 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_5 {
  init s0;
  s0 -> s1 [0, 60] { R244 += 1 };
  s0 -> s0 [0, 65535] { R243 += 1, R244 += 1 };
  s0 -> s2 [0, 65535] { R244 += 1, R10 += 1 };
  s0 -> s3 [61, 61] { R244 += 1 };
  s0 -> s1 [62, 65535] { R244 += 1 };
  s1 -> s1 [0, 60] { R244 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [61, 61] { R244 += 1 };
  s1 -> s1 [62, 65535] { R244 += 1 };
  s2 -> s1 [0, 60] { R244 += 1 };
  s2 -> s2 [0, 65535] { R244 += 1, R10 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [61, 61] { R244 += 1 };
  s2 -> s1 [62, 65535] { R244 += 1 };
  s3 -> s3 [0, 65535] { R244 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value1_6 {
  init s0;
  s0 -> s1 [0, 64] { R246 += 1 };
  s0 -> s0 [0, 65535] { R245 += 1, R246 += 1 };
  s0 -> s2 [89, 89] { R246 += 1 };
  s0 -> s1 [90, 65535] { R246 += 1 };
  s1 -> s1 [0, 64] { R246 += 1 };
  s1 -> s2 [89, 89] { R246 += 1 };
  s1 -> s1 [90, 65535] { R246 += 1 };
  s2 -> s2 [0, 64] { R246 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [89, 65535] { R246 += 1 };
  accepting s2;
};
automaton value1_7 {
  init s0;
  s0 -> s1 [0, 65535] { R248 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R247 += 1, R248 += 1 };
  s1 -> s1 [0, 65535] { R248 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_8 {
  init s0;
  s0 -> s1 [0, 60] { R250 += 1 };
  s0 -> s0 [0, 65535] { R249 += 1, R250 += 1 };
  s0 -> s2 [0, 65535] { R250 += 1, R11 += 1 };
  s0 -> s3 [61, 61] { R250 += 1 };
  s0 -> s1 [62, 65535] { R250 += 1 };
  s1 -> s1 [0, 60] { R250 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [61, 61] { R250 += 1 };
  s1 -> s1 [62, 65535] { R250 += 1 };
  s2 -> s1 [0, 60] { R250 += 1 };
  s2 -> s2 [0, 65535] { R250 += 1, R11 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [61, 61] { R250 += 1 };
  s2 -> s1 [62, 65535] { R250 += 1 };
  s3 -> s3 [0, 65535] { R250 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value1_9 {
  init s0;
  s0 -> s1 [0, 88] { R252 += 1, R14 += 1 };
  s0 -> s2 [0, 65535] { R252 += 1, R13 += 1, R14 += 1 };
  s0 -> s0 [0, 65535] { R251 += 1, R252 += 1 };
  s0 -> s3 [89, 89] { R252 += 1 };
  s0 -> s1 [90, 65535] { R252 += 1, R14 += 1 };
  s1 -> s1 [0, 88] { R252 += 1, R14 += 1 };
  s1 -> s3 [89, 89] { R252 += 1 };
  s1 -> s1 [90, 65535] { R252 += 1, R14 += 1 };
  s2 -> s1 [0, 88] { R252 += 1, R14 += 1 };
  s2 -> s2 [0, 65535] { R252 += 1, R13 += 1, R14 += 1 };
  s2 -> s3 [89, 89] { R252 += 1 };
  s2 -> s1 [90, 65535] { R252 += 1, R14 += 1 };
  s3 -> s3 [0, 65535] { R252 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton value1_10 {
  init s0;
  s0 -> s1 [0, 8] { R254 += 1, R224 += 1 };
  s0 -> s2 [0, 65535] { R254 += 1, R223 += 1, R224 += 1 };
  s0 -> s0 [0, 65535] { R253 += 1, R254 += 1 };
  s0 -> s3 [9, 13] { R254 += 1, R224 += 1 };
  s0 -> s1 [14, 31] { R254 += 1, R224 += 1 };
  s0 -> s3 [32, 32] { R254 += 1, R224 += 1 };
  s0 -> s1 [33, 65535] { R254 += 1, R224 += 1 };
  s1 -> s1 [0, 65535] { R254 += 1, R224 += 1 };
  s1 -> s5 [0, 65535] { R254 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R254 += 1, R224 += 1 };
  s2 -> s2 [0, 65535] { R254 += 1, R223 += 1, R224 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R254 += 1, R224 += 1 };
  s2 -> s1 [14, 31] { R254 += 1, R224 += 1 };
  s2 -> s3 [32, 32] { R254 += 1, R224 += 1 };
  s2 -> s1 [33, 65535] { R254 += 1, R224 += 1 };
  s3 -> s1 [0, 65535] { R254 += 1, R224 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R254 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value1_11 {
  init s0;
  s0 -> s1 [0, 65535] { R256 += 1, R225 += 1, R226 += 1 };
  s0 -> s0 [0, 65535] { R255 += 1, R256 += 1 };
  s0 -> s2 [0, 65535] { R256 += 1, R226 += 1, R7 += 1 };
  s1 -> s1 [0, 65535] { R256 += 1, R225 += 1, R226 += 1 };
  s1 -> s2 [0, 65535] { R256 += 1, R226 += 1, R7 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R256 += 1, R226 += 1, R7 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R256 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R256 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_12 {
  init s0;
  s0 -> s1 [0, 8] { R258 += 1, R228 += 1 };
  s0 -> s2 [0, 65535] { R258 += 1, R227 += 1, R228 += 1 };
  s0 -> s0 [0, 65535] { R257 += 1, R258 += 1 };
  s0 -> s3 [9, 13] { R258 += 1, R228 += 1 };
  s0 -> s1 [14, 31] { R258 += 1, R228 += 1 };
  s0 -> s3 [32, 32] { R258 += 1, R228 += 1 };
  s0 -> s1 [33, 65535] { R258 += 1, R228 += 1 };
  s1 -> s5 [0, 65535] { R258 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R258 += 1, R228 += 1 };
  s2 -> s1 [0, 8] { R258 += 1, R228 += 1 };
  s2 -> s2 [0, 65535] { R258 += 1, R227 += 1, R228 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R258 += 1, R228 += 1 };
  s2 -> s1 [14, 31] { R258 += 1, R228 += 1 };
  s2 -> s3 [32, 32] { R258 += 1, R228 += 1 };
  s2 -> s1 [33, 65535] { R258 += 1, R228 += 1 };
  s3 -> s1 [0, 65535] { R258 += 1, R228 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R258 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value1_13 {
  init s0;
  s0 -> s1 [0, 65535] { R260 += 1, R229 += 1, R230 += 1 };
  s0 -> s0 [0, 65535] { R259 += 1, R260 += 1 };
  s0 -> s2 [0, 65535] { R260 += 1, R230 += 1, R8 += 1 };
  s1 -> s1 [0, 65535] { R260 += 1, R229 += 1, R230 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R260 += 1, R230 += 1, R8 += 1 };
  s2 -> s3 [0, 65535] { R260 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R260 += 1, R230 += 1, R8 += 1 };
  s3 -> s3 [0, 65535] { R260 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_14 {
  init s0;
  s0 -> s1 [0, 88] { R262 += 1, R236 += 1 };
  s0 -> s0 [0, 65535] { R261 += 1, R262 += 1 };
  s0 -> s2 [0, 65535] { R262 += 1, R235 += 1, R236 += 1 };
  s0 -> s3 [89, 89] { R262 += 1, R236 += 1 };
  s0 -> s1 [90, 65535] { R262 += 1, R236 += 1 };
  s1 -> s1 [0, 88] { R262 += 1, R236 += 1 };
  s1 -> s3 [89, 89] { R262 += 1, R236 += 1 };
  s1 -> s1 [90, 65535] { R262 += 1, R236 += 1 };
  s2 -> s1 [0, 88] { R262 += 1, R236 += 1 };
  s2 -> s2 [0, 65535] { R262 += 1, R235 += 1, R236 += 1 };
  s2 -> s3 [89, 89] { R262 += 1, R236 += 1 };
  s2 -> s1 [90, 65535] { R262 += 1, R236 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R262 += 1 };
  s3 -> s3 [0, 65535] { R262 += 1, R236 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R262 += 1 };
  accepting s3, s4, s5;
};
automaton value1_15 {
  init s0;
  s0 -> s0 [0, 65535] { R263 += 1, R264 += 1 };
  s0 -> s1 [0, 65535] { R264 += 1, R238 += 1, R214 += 1 };
  s0 -> s2 [0, 65535] { R264 += 1, R237 += 1, R238 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R264 += 1, R238 += 1, R214 += 1 };
  s1 -> s4 [0, 65535] { R264 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R264 += 1, R238 += 1, R214 += 1 };
  s2 -> s2 [0, 65535] { R264 += 1, R237 += 1, R238 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R264 += 1 };
  accepting s3, s4, s2, s1, s0;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R213 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s0 [0, 65535] { R231 += 1, R232 += 1 };
  s0 -> s1 [9, 9] { R232 += 1 };
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 65535] { R234 += 1, R9 += 1 };
  s0 -> s0 [0, 65535] { R233 += 1, R234 += 1 };
  s1 -> s1 [0, 65535] { R234 += 1, R9 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 64] { R266 += 1 };
  s0 -> s0 [0, 65535] { R265 += 1, R266 += 1 };
  s0 -> s1 [91, 65535] { R266 += 1 };
  s1 -> s1 [0, 64] { R266 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [91, 65535] { R266 += 1 };
  accepting s0, s1;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 65535] { R268 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R267 += 1, R268 += 1 };
  s1 -> s1 [0, 65535] { R268 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 8] { R270 += 1, R216 += 1 };
  s0 -> s2 [0, 65535] { R270 += 1, R215 += 1, R216 += 1 };
  s0 -> s0 [0, 65535] { R269 += 1, R270 += 1 };
  s0 -> s3 [9, 13] { R270 += 1, R216 += 1 };
  s0 -> s1 [14, 31] { R270 += 1, R216 += 1 };
  s0 -> s3 [32, 32] { R270 += 1, R216 += 1 };
  s0 -> s1 [33, 65535] { R270 += 1, R216 += 1 };
  s1 -> s1 [0, 65535] { R270 += 1, R216 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R270 += 1 };
  s2 -> s1 [0, 8] { R270 += 1, R216 += 1 };
  s2 -> s2 [0, 65535] { R270 += 1, R215 += 1, R216 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R270 += 1, R216 += 1 };
  s2 -> s1 [14, 31] { R270 += 1, R216 += 1 };
  s2 -> s3 [32, 32] { R270 += 1, R216 += 1 };
  s2 -> s1 [33, 65535] { R270 += 1, R216 += 1 };
  s3 -> s1 [0, 65535] { R270 += 1, R216 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R270 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R271 += 1, R272 += 1 };
  s0 -> s1 [0, 65535] { R272 += 1, R218 += 1, R5 += 1 };
  s0 -> s2 [0, 65535] { R272 += 1, R217 += 1, R218 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R272 += 1 };
  s1 -> s1 [0, 65535] { R272 += 1, R218 += 1, R5 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R272 += 1, R218 += 1, R5 += 1 };
  s2 -> s2 [0, 65535] { R272 += 1, R217 += 1, R218 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R272 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 8] { R274 += 1, R220 += 1 };
  s0 -> s0 [0, 65535] { R273 += 1, R274 += 1 };
  s0 -> s2 [0, 65535] { R274 += 1, R219 += 1, R220 += 1 };
  s0 -> s3 [9, 13] { R274 += 1, R220 += 1 };
  s0 -> s1 [14, 31] { R274 += 1, R220 += 1 };
  s0 -> s3 [32, 32] { R274 += 1, R220 += 1 };
  s0 -> s1 [33, 65535] { R274 += 1, R220 += 1 };
  s1 -> s5 [0, 65535] { R274 += 1 };
  s1 -> s1 [0, 65535] { R274 += 1, R220 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R274 += 1, R220 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R274 += 1, R219 += 1, R220 += 1 };
  s2 -> s3 [9, 13] { R274 += 1, R220 += 1 };
  s2 -> s1 [14, 31] { R274 += 1, R220 += 1 };
  s2 -> s3 [32, 32] { R274 += 1, R220 += 1 };
  s2 -> s1 [33, 65535] { R274 += 1, R220 += 1 };
  s3 -> s1 [0, 65535] { R274 += 1, R220 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R274 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 65535] { R276 += 1, R221 += 1, R222 += 1 };
  s0 -> s2 [0, 65535] { R276 += 1, R222 += 1, R6 += 1 };
  s0 -> s0 [0, 65535] { R275 += 1, R276 += 1 };
  s1 -> s1 [0, 65535] { R276 += 1, R221 += 1, R222 += 1 };
  s1 -> s2 [0, 65535] { R276 += 1, R222 += 1, R6 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R276 += 1, R222 += 1, R6 += 1 };
  s2 -> s3 [0, 65535] { R276 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R276 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
};
constraint R2 = R236 && R3 = R244 && R4 = R276 && R13 = 0 && R14 - R235 = -1 && R147 = 0 && R148 = R264 && R223 - R236 = -1 && R224 = R236 && R225 - R236 = -1 && R226 = R236 && R227 = 0 && R228 = 1 && R229 = 0 && R230 = 1 && R231 = 0 && R232 = 1 && R233 = 0 && R234 = 1 && R239 - R264 = 1 && R240 = R244 && R241 - R264 = 1 && R242 = R244 && R243 - R264 = 1 && R245 = 0 && R246 = R264 && R247 = 0 && R248 = R264 && R249 = 0 && R250 = R264 && R251 = 0 && R252 = R264 && R253 = 0 && R254 = R264 && R255 = 0 && R256 = R264 && R257 = 0 && R258 = R264 && R259 = 0 && R260 = R264 && R261 = 0 && R262 = R264 && R263 = 0 && R265 = 1 && R266 = R276 && R267 = 1 && R268 = R276 && R269 = 1 && R270 = R276 && R271 = 1 && R272 = R276 && R273 = 1 && R274 = R276 && R275 = 1 && R0 != 0 && R1 != 0 && R10 < 1 && R11 < 1 && R213 < 1 && R235 - R236 < 1 && -1 < R235 && 0 < R236 && R264 < R244 && -1 < R264 && 0 < R276 && (R5 != 0 || ((R1 != R216 || R215 - R216 = -1 || R216 < 0) && (R1 = R216 || R1 < 1))) && (R5 != 0 || ((R1 != R218 || R217 - R218 = -1 || R218 < 0) && (R1 = R218 || R1 < 1))) && (R219 != 0 || ((R6 != 0 || ((R1 != R220 || R220 = 1 || R220 < 0) && (R1 = R220 || R220 = 1 || R1 < 1))) && (R6 = 0 || ((R1 != R220 || R220 = 1 || R220 < 0) && (R220 != 1 || -1 < R1) && (R1 = R220 || R220 = 1))))) && (R221 != 0 || ((R6 != 0 || ((R1 != R222 || R222 = 1 || R222 < 0) && (R1 = R222 || R222 = 1 || R1 < 1))) && (R6 = 0 || ((R1 != R222 || R222 = 1 || R222 < 0) && (R222 != 1 || -1 < R1) && (R1 = R222 || R222 = 1))))) && (R235 != R237 || R236 = R238 || ((R214 != 0 || R236 - R237 < 1 || R237 < 0) && (R214 = 0 || R236 < R237 || R237 < 0))) && (R5 = 0 || (R1 = R216 && R215 - R216 = -1)) && (R5 = 0 || (R1 = R218 && R217 - R218 = -1)) && (R219 = 0 || (R6 = 0 && R1 < 0)) && (R221 = 0 || (R6 = 0 && R1 < 0)) && (R235 = R237 || (R214 = 0 && R235 = R236));
// End of Parikh automata intersection problem
