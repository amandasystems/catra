// Parikh automata intersection problem, generated by OSTRICH+
counter int R100, R101, R102, R103, R104, R105, R106, R107, R108, R109, R11, R110, R111, R112, R113, R114, R115, R116, R117, R118, R119, R12, R120, R121, R122, R123, R124, R125, R126, R127, R128, R129, R130, R131, R132, R133, R134, R135, R136, R137, R138, R139, R140, R141, R142, R143, R144, R145, R146, R147, R148, R149, R150, R151, R152, R153, R154, R155, R156, R157, R158, R159, R160, R161, R162, R163, R164, R165, R166, R167, R168, R169, R170, R171, R172, R173, R174, R175, R176, R177, R178, R179, R18, R180, R181, R182, R183, R184, R185, R186, R187, R188, R189, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R4, R58, R59, R60, R61, R62, R63, R64, R65, R66, R67, R68, R69, R70, R71, R72, R73, R74, R75, R76, R77, R78, R79, R80, R81, R82, R83, R84, R85, R86, R87, R88, R89, R90, R91, R92, R93, R94, R95, R96, R97, R98, R99;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 72];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [73, 73];
  s0 -> s1 [74, 65535];
  s1 -> s1 [0, 72];
  s1 -> s2 [73, 73];
  s1 -> s1 [74, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R21 += 1 };
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s1 [0, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 72] { R133 += 1 };
  s0 -> s0 [0, 65535] { R132 += 1, R133 += 1 };
  s0 -> s1 [74, 65535] { R133 += 1 };
  s1 -> s1 [0, 72] { R133 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [74, 65535] { R133 += 1 };
  accepting s0, s1;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 65535] { R135 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R134 += 1, R135 += 1 };
  s1 -> s1 [0, 65535] { R135 += 1, R18 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 73] { R137 += 1 };
  s0 -> s0 [0, 65535] { R136 += 1, R137 += 1 };
  s0 -> s2 [74, 74] { R137 += 1 };
  s0 -> s1 [75, 65535] { R137 += 1 };
  s1 -> s1 [0, 73] { R137 += 1 };
  s1 -> s2 [74, 74] { R137 += 1 };
  s1 -> s1 [75, 65535] { R137 += 1 };
  s2 -> s2 [0, 65535] { R137 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_11 {
  init s0;
  s0 -> s0 [0, 65535] { R138 += 1, R139 += 1 };
  s0 -> s1 [0, 65535] { R139 += 1, R59 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R139 += 1, R59 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 73] { R141 += 1 };
  s0 -> s2 [0, 65535] { R141 += 1, R61 += 1 };
  s0 -> s0 [0, 65535] { R140 += 1, R141 += 1 };
  s0 -> s1 [75, 65535] { R141 += 1 };
  s1 -> s1 [0, 73] { R141 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [75, 65535] { R141 += 1 };
  s2 -> s1 [0, 73] { R141 += 1 };
  s2 -> s2 [0, 65535] { R141 += 1, R61 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [75, 65535] { R141 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 65535] { R143 += 1, R65 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R142 += 1, R143 += 1 };
  s0 -> s2 [0, 65535] { R143 += 1, R66 += 1, R67 += 1 };
  s1 -> s1 [0, 65535] { R143 += 1, R65 += 1, R66 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R143 += 1, R66 += 1, R67 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R143 += 1, R66 += 1, R67 += 1 };
  s2 -> s4 [0, 65535] { R143 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R143 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 73] { R145 += 1, R71 += 1 };
  s0 -> s0 [0, 65535] { R144 += 1, R145 += 1 };
  s0 -> s2 [0, 65535] { R145 += 1, R70 += 1, R71 += 1 };
  s0 -> s3 [74, 74] { R145 += 1, R71 += 1 };
  s0 -> s4 [74, 74] { R145 += 1, R71 += 1 };
  s0 -> s1 [91, 65535] { R145 += 1, R71 += 1 };
  s1 -> s1 [0, 73] { R145 += 1, R71 += 1 };
  s1 -> s1 [0, 65535] { R145 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [74, 74] { R145 += 1, R71 += 1 };
  s1 -> s4 [74, 74] { R145 += 1, R71 += 1 };
  s1 -> s1 [91, 65535] { R145 += 1, R71 += 1 };
  s2 -> s1 [0, 73] { R145 += 1, R71 += 1 };
  s2 -> s2 [0, 65535] { R145 += 1, R70 += 1, R71 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [74, 74] { R145 += 1, R71 += 1 };
  s2 -> s4 [74, 74] { R145 += 1, R71 += 1 };
  s2 -> s1 [91, 65535] { R145 += 1, R71 += 1 };
  s3 -> s3 [0, 65535] { R145 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 74] { R145 += 1, R71 += 1 };
  s4 -> s4 [0, 65535] { R145 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [91, 65535] { R145 += 1, R71 += 1 };
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 73] { R147 += 1, R75 += 1 };
  s0 -> s2 [0, 65535] { R147 += 1, R74 += 1, R75 += 1 };
  s0 -> s0 [0, 65535] { R146 += 1, R147 += 1 };
  s0 -> s3 [74, 74] { R147 += 1, R75 += 1 };
  s0 -> s1 [75, 65535] { R147 += 1, R75 += 1 };
  s1 -> s1 [0, 73] { R147 += 1, R75 += 1 };
  s1 -> s3 [74, 74] { R147 += 1, R75 += 1 };
  s1 -> s1 [75, 65535] { R147 += 1, R75 += 1 };
  s2 -> s1 [0, 73] { R147 += 1, R75 += 1 };
  s2 -> s2 [0, 65535] { R147 += 1, R74 += 1, R75 += 1 };
  s2 -> s3 [74, 74] { R147 += 1, R75 += 1 };
  s2 -> s1 [75, 65535] { R147 += 1, R75 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R147 += 1 };
  s3 -> s3 [0, 65535] { R147 += 1, R75 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R147 += 1 };
  accepting s3, s4, s5;
};
automaton value2_16 {
  init s0;
  s0 -> s0 [0, 65535] { R148 += 1, R149 += 1 };
  s0 -> s1 [0, 65535] { R149 += 1, R80 += 1, R81 += 1 };
  s0 -> s2 [0, 65535] { R149 += 1, R79 += 1, R80 += 1 };
  s1 -> s1 [0, 65535] { R149 += 1, R80 += 1, R81 += 1 };
  s1 -> s4 [0, 65535] { R149 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R149 += 1, R80 += 1, R81 += 1 };
  s2 -> s2 [0, 65535] { R149 += 1, R79 += 1, R80 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R149 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 73] { R151 += 1, R86 += 1 };
  s0 -> s0 [0, 65535] { R150 += 1, R151 += 1 };
  s0 -> s2 [0, 65535] { R151 += 1, R86 += 1, R87 += 1 };
  s0 -> s3 [0, 65535] { R151 += 1, R85 += 1, R86 += 1 };
  s0 -> s1 [75, 65535] { R151 += 1, R86 += 1 };
  s1 -> s1 [0, 73] { R151 += 1, R86 += 1 };
  s1 -> s1 [0, 65535] { R151 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [75, 65535] { R151 += 1, R86 += 1 };
  s2 -> s1 [0, 73] { R151 += 1, R86 += 1 };
  s2 -> s5 [0, 65535] { R151 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R151 += 1, R86 += 1, R87 += 1 };
  s2 -> s1 [75, 65535] { R151 += 1, R86 += 1 };
  s3 -> s1 [0, 73] { R151 += 1, R86 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R151 += 1, R86 += 1, R87 += 1 };
  s3 -> s3 [0, 65535] { R151 += 1, R85 += 1, R86 += 1 };
  s3 -> s1 [75, 65535] { R151 += 1, R86 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R151 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 73] { R153 += 1, R93 += 1, R95 += 1 };
  s0 -> s2 [0, 65535] { R153 += 1, R93 += 1, R94 += 1, R95 += 1 };
  s0 -> s0 [0, 65535] { R152 += 1, R153 += 1 };
  s0 -> s3 [0, 65535] { R153 += 1, R92 += 1, R93 += 1 };
  s0 -> s1 [75, 65535] { R153 += 1, R93 += 1, R95 += 1 };
  s1 -> s1 [0, 73] { R153 += 1, R93 += 1, R95 += 1 };
  s1 -> s1 [0, 65535] { R153 += 1, R93 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R153 += 1 };
  s1 -> s1 [75, 65535] { R153 += 1, R93 += 1, R95 += 1 };
  s2 -> s1 [0, 73] { R153 += 1, R93 += 1, R95 += 1 };
  s2 -> s2 [0, 65535] { R153 += 1, R93 += 1, R94 += 1, R95 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R153 += 1 };
  s2 -> s1 [75, 65535] { R153 += 1, R93 += 1, R95 += 1 };
  s3 -> s1 [0, 73] { R153 += 1, R93 += 1, R95 += 1 };
  s3 -> s2 [0, 65535] { R153 += 1, R93 += 1, R94 += 1, R95 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R153 += 1, R92 += 1, R93 += 1 };
  s3 -> s1 [75, 65535] { R153 += 1, R93 += 1, R95 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R153 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 65535] { R155 += 1, R101 += 1, R102 += 1 };
  s0 -> s2 [0, 65535] { R155 += 1, R102 += 1, R103 += 1, R104 += 1 };
  s0 -> s0 [0, 65535] { R154 += 1, R155 += 1 };
  s0 -> s3 [0, 65535] { R155 += 1, R102 += 1, R104 += 1, R105 += 1 };
  s1 -> s1 [0, 65535] { R155 += 1, R101 += 1, R102 += 1 };
  s1 -> s2 [0, 65535] { R155 += 1, R102 += 1, R103 += 1, R104 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [0, 65535] { R155 += 1, R102 += 1, R104 += 1, R105 += 1 };
  s2 -> s2 [0, 65535] { R155 += 1, R102 += 1, R103 += 1, R104 += 1 };
  s2 -> s5 [0, 65535] { R155 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R155 += 1, R102 += 1, R104 += 1, R105 += 1 };
  s3 -> s4 [0, 65535] { R155 += 1, R102 += 1 };
  s3 -> s5 [0, 65535] { R155 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R155 += 1, R102 += 1, R104 += 1, R105 += 1 };
  s4 -> s4 [0, 65535] { R155 += 1, R102 += 1 };
  s4 -> s5 [0, 65535] { R155 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R155 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 74] { R157 += 1, R111 += 1, R113 += 1 };
  s0 -> s0 [0, 65535] { R156 += 1, R157 += 1 };
  s0 -> s2 [0, 65535] { R157 += 1, R111 += 1, R112 += 1, R113 += 1 };
  s0 -> s3 [0, 65535] { R157 += 1, R110 += 1, R111 += 1 };
  s0 -> s1 [90, 65535] { R157 += 1, R111 += 1, R113 += 1 };
  s1 -> s1 [0, 74] { R157 += 1, R111 += 1, R113 += 1 };
  s1 -> s5 [0, 65535] { R157 += 1 };
  s1 -> s1 [0, 65535] { R157 += 1, R111 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [90, 65535] { R157 += 1, R111 += 1, R113 += 1 };
  s2 -> s1 [0, 74] { R157 += 1, R111 += 1, R113 += 1 };
  s2 -> s5 [0, 65535] { R157 += 1 };
  s2 -> s2 [0, 65535] { R157 += 1, R111 += 1, R112 += 1, R113 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [90, 65535] { R157 += 1, R111 += 1, R113 += 1 };
  s3 -> s1 [0, 74] { R157 += 1, R111 += 1, R113 += 1 };
  s3 -> s2 [0, 65535] { R157 += 1, R111 += 1, R112 += 1, R113 += 1 };
  s3 -> s3 [0, 65535] { R157 += 1, R110 += 1, R111 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [90, 65535] { R157 += 1, R111 += 1, R113 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R157 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_21 {
  init s0;
  s0 -> s0 [0, 65535] { R158 += 1, R159 += 1 };
  s0 -> s1 [0, 65535] { R159 += 1, R120 += 1, R121 += 1, R122 += 1 };
  s0 -> s2 [0, 65535] { R159 += 1, R120 += 1, R122 += 1, R123 += 1 };
  s0 -> s3 [0, 65535] { R159 += 1, R119 += 1, R120 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R159 += 1 };
  s1 -> s1 [0, 65535] { R159 += 1, R120 += 1, R121 += 1, R122 += 1 };
  s1 -> s2 [0, 65535] { R159 += 1, R120 += 1, R122 += 1, R123 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R159 += 1 };
  s2 -> s6 [0, 65535] { R159 += 1, R120 += 1 };
  s2 -> s2 [0, 65535] { R159 += 1, R120 += 1, R122 += 1, R123 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R159 += 1, R120 += 1, R121 += 1, R122 += 1 };
  s3 -> s2 [0, 65535] { R159 += 1, R120 += 1, R122 += 1, R123 += 1 };
  s3 -> s3 [0, 65535] { R159 += 1, R119 += 1, R120 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R159 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R159 += 1 };
  s6 -> s6 [0, 65535] { R159 += 1, R120 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 73] { R161 += 1, R129 += 1, R131 += 1 };
  s0 -> s0 [0, 65535] { R160 += 1, R161 += 1 };
  s0 -> s2 [0, 65535] { R161 += 1, R128 += 1, R129 += 1 };
  s0 -> s3 [0, 65535] { R161 += 1, R129 += 1, R130 += 1, R131 += 1 };
  s0 -> s4 [74, 74] { R161 += 1, R129 += 1, R131 += 1 };
  s0 -> s5 [90, 90] { R161 += 1, R129 += 1, R131 += 1 };
  s0 -> s1 [91, 65535] { R161 += 1, R129 += 1, R131 += 1 };
  s1 -> s1 [0, 73] { R161 += 1, R129 += 1, R131 += 1 };
  s1 -> s4 [74, 74] { R161 += 1, R129 += 1, R131 += 1 };
  s1 -> s5 [90, 90] { R161 += 1, R129 += 1, R131 += 1 };
  s1 -> s1 [91, 65535] { R161 += 1, R129 += 1, R131 += 1 };
  s2 -> s1 [0, 73] { R161 += 1, R129 += 1, R131 += 1 };
  s2 -> s2 [0, 65535] { R161 += 1, R128 += 1, R129 += 1 };
  s2 -> s3 [0, 65535] { R161 += 1, R129 += 1, R130 += 1, R131 += 1 };
  s2 -> s4 [74, 74] { R161 += 1, R129 += 1, R131 += 1 };
  s2 -> s5 [90, 90] { R161 += 1, R129 += 1, R131 += 1 };
  s2 -> s1 [91, 65535] { R161 += 1, R129 += 1, R131 += 1 };
  s3 -> s1 [0, 73] { R161 += 1, R129 += 1, R131 += 1 };
  s3 -> s3 [0, 65535] { R161 += 1, R129 += 1, R130 += 1, R131 += 1 };
  s3 -> s4 [74, 74] { R161 += 1, R129 += 1, R131 += 1 };
  s3 -> s5 [90, 90] { R161 += 1, R129 += 1, R131 += 1 };
  s3 -> s1 [91, 65535] { R161 += 1, R129 += 1, R131 += 1 };
  s4 -> s4 [0, 74] { R161 += 1, R129 += 1, R131 += 1 };
  s4 -> s8 [90, 90] { R161 += 1, R129 += 1, R131 += 1 };
  s4 -> s4 [91, 65535] { R161 += 1, R129 += 1, R131 += 1 };
  s5 -> s5 [0, 73] { R161 += 1, R129 += 1, R131 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R161 += 1, R129 += 1 };
  s5 -> s7 [0, 65535] { R161 += 1 };
  s5 -> s8 [74, 74] { R161 += 1, R129 += 1, R131 += 1 };
  s5 -> s9 [74, 74] { R161 += 1, R129 += 1, R131 += 1 };
  s5 -> s5 [90, 65535] { R161 += 1, R129 += 1, R131 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R161 += 1 };
  s8 -> s8 [0, 74] { R161 += 1, R129 += 1, R131 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R161 += 1, R129 += 1 };
  s8 -> s7 [0, 65535] { R161 += 1 };
  s8 -> s8 [90, 65535] { R161 += 1, R129 += 1, R131 += 1 };
  s9 -> s6 [0, 65535];
  s9 -> s9 [0, 65535] { R161 += 1, R129 += 1 };
  s9 -> s7 [0, 65535] { R161 += 1 };
  accepting s8, s5, s9, s6, s7;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R163 += 1, R19 += 1 };
  s0 -> s0 [0, 65535] { R162 += 1, R163 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R163 += 1, R19 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 72] { R165 += 1 };
  s0 -> s0 [0, 65535] { R164 += 1, R165 += 1 };
  s0 -> s2 [73, 73] { R165 += 1 };
  s0 -> s3 [73, 73] { R165 += 1 };
  s0 -> s1 [75, 65535] { R165 += 1 };
  s1 -> s1 [0, 72] { R165 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R165 += 1 };
  s1 -> s3 [73, 73] { R165 += 1 };
  s1 -> s1 [75, 65535] { R165 += 1 };
  s2 -> s2 [0, 73] { R165 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [75, 65535] { R165 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 72] { R167 += 1, R58 += 1 };
  s0 -> s0 [0, 65535] { R166 += 1, R167 += 1 };
  s0 -> s2 [73, 73] { R167 += 1, R58 += 1 };
  s0 -> s3 [73, 73] { R167 += 1, R58 += 1 };
  s0 -> s1 [74, 65535] { R167 += 1, R58 += 1 };
  s1 -> s1 [0, 72] { R167 += 1, R58 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R167 += 1, R58 += 1 };
  s1 -> s3 [73, 73] { R167 += 1, R58 += 1 };
  s1 -> s1 [74, 65535] { R167 += 1, R58 += 1 };
  s2 -> s2 [0, 65535] { R167 += 1, R58 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 72] { R169 += 1, R60 += 1 };
  s0 -> s0 [0, 65535] { R168 += 1, R169 += 1 };
  s0 -> s2 [73, 73] { R169 += 1, R60 += 1 };
  s0 -> s3 [73, 73] { R169 += 1, R60 += 1 };
  s0 -> s1 [74, 65535] { R169 += 1, R60 += 1 };
  s1 -> s1 [0, 72] { R169 += 1, R60 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R169 += 1, R60 += 1 };
  s1 -> s3 [73, 73] { R169 += 1, R60 += 1 };
  s1 -> s1 [74, 65535] { R169 += 1, R60 += 1 };
  s2 -> s2 [0, 65535] { R169 += 1, R60 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 72] { R171 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R170 += 1, R171 += 1 };
  s0 -> s2 [73, 73] { R171 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [73, 73] { R171 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [74, 65535] { R171 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 72] { R171 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R171 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [73, 73] { R171 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [74, 65535] { R171 += 1, R62 += 1, R63 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R171 += 1, R62 += 1, R63 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 72] { R173 += 1, R68 += 1, R69 += 1 };
  s0 -> s0 [0, 65535] { R172 += 1, R173 += 1 };
  s0 -> s2 [73, 73] { R173 += 1, R68 += 1, R69 += 1 };
  s0 -> s3 [73, 73] { R173 += 1, R68 += 1, R69 += 1 };
  s0 -> s1 [74, 65535] { R173 += 1, R68 += 1, R69 += 1 };
  s1 -> s1 [0, 72] { R173 += 1, R68 += 1, R69 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R173 += 1, R68 += 1, R69 += 1 };
  s1 -> s3 [73, 73] { R173 += 1, R68 += 1, R69 += 1 };
  s1 -> s1 [74, 65535] { R173 += 1, R68 += 1, R69 += 1 };
  s2 -> s2 [0, 65535] { R173 += 1, R68 += 1, R69 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 72] { R175 += 1, R72 += 1, R73 += 1 };
  s0 -> s0 [0, 65535] { R174 += 1, R175 += 1 };
  s0 -> s2 [73, 73] { R175 += 1, R72 += 1, R73 += 1 };
  s0 -> s3 [73, 73] { R175 += 1, R72 += 1, R73 += 1 };
  s0 -> s1 [74, 65535] { R175 += 1, R72 += 1, R73 += 1 };
  s1 -> s1 [0, 72] { R175 += 1, R72 += 1, R73 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R175 += 1, R72 += 1, R73 += 1 };
  s1 -> s3 [73, 73] { R175 += 1, R72 += 1, R73 += 1 };
  s1 -> s1 [74, 65535] { R175 += 1, R72 += 1, R73 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R175 += 1, R72 += 1, R73 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 72] { R177 += 1, R76 += 1, R77 += 1 };
  s0 -> s0 [0, 65535] { R176 += 1, R177 += 1 };
  s0 -> s2 [73, 73] { R177 += 1, R76 += 1, R77 += 1 };
  s0 -> s3 [73, 73] { R177 += 1, R76 += 1, R77 += 1 };
  s0 -> s1 [74, 65535] { R177 += 1, R76 += 1, R77 += 1 };
  s1 -> s1 [0, 72] { R177 += 1, R76 += 1, R77 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R177 += 1, R76 += 1, R77 += 1 };
  s1 -> s3 [73, 73] { R177 += 1, R76 += 1, R77 += 1 };
  s1 -> s1 [74, 65535] { R177 += 1, R76 += 1, R77 += 1 };
  s2 -> s2 [0, 65535] { R177 += 1, R76 += 1, R77 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 72] { R179 += 1, R82 += 1, R83 += 1 };
  s0 -> s0 [0, 65535] { R178 += 1, R179 += 1 };
  s0 -> s2 [73, 73] { R179 += 1, R82 += 1, R83 += 1 };
  s0 -> s3 [73, 73] { R179 += 1, R82 += 1, R83 += 1 };
  s0 -> s1 [74, 65535] { R179 += 1, R82 += 1, R83 += 1 };
  s1 -> s1 [0, 72] { R179 += 1, R82 += 1, R83 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R179 += 1, R82 += 1, R83 += 1 };
  s1 -> s3 [73, 73] { R179 += 1, R82 += 1, R83 += 1 };
  s1 -> s1 [74, 65535] { R179 += 1, R82 += 1, R83 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R179 += 1, R82 += 1, R83 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 72] { R181 += 1, R88 += 1, R89 += 1 };
  s0 -> s0 [0, 65535] { R180 += 1, R181 += 1 };
  s0 -> s2 [73, 73] { R181 += 1, R88 += 1, R89 += 1 };
  s0 -> s3 [73, 73] { R181 += 1, R88 += 1, R89 += 1 };
  s0 -> s1 [74, 65535] { R181 += 1, R88 += 1, R89 += 1 };
  s1 -> s1 [0, 72] { R181 += 1, R88 += 1, R89 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R181 += 1, R88 += 1, R89 += 1 };
  s1 -> s3 [73, 73] { R181 += 1, R88 += 1, R89 += 1 };
  s1 -> s1 [74, 65535] { R181 += 1, R88 += 1, R89 += 1 };
  s2 -> s2 [0, 65535] { R181 += 1, R88 += 1, R89 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 72] { R183 += 1, R96 += 1, R97 += 1 };
  s0 -> s0 [0, 65535] { R182 += 1, R183 += 1 };
  s0 -> s2 [73, 73] { R183 += 1, R96 += 1, R97 += 1 };
  s0 -> s3 [73, 73] { R183 += 1, R96 += 1, R97 += 1 };
  s0 -> s1 [74, 65535] { R183 += 1, R96 += 1, R97 += 1 };
  s1 -> s1 [0, 72] { R183 += 1, R96 += 1, R97 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R183 += 1, R96 += 1, R97 += 1 };
  s1 -> s3 [73, 73] { R183 += 1, R96 += 1, R97 += 1 };
  s1 -> s1 [74, 65535] { R183 += 1, R96 += 1, R97 += 1 };
  s2 -> s2 [0, 65535] { R183 += 1, R96 += 1, R97 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 72] { R185 += 1, R106 += 1, R107 += 1 };
  s0 -> s0 [0, 65535] { R184 += 1, R185 += 1 };
  s0 -> s2 [73, 73] { R185 += 1, R106 += 1, R107 += 1 };
  s0 -> s3 [73, 73] { R185 += 1, R106 += 1, R107 += 1 };
  s0 -> s1 [74, 65535] { R185 += 1, R106 += 1, R107 += 1 };
  s1 -> s1 [0, 72] { R185 += 1, R106 += 1, R107 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R185 += 1, R106 += 1, R107 += 1 };
  s1 -> s3 [73, 73] { R185 += 1, R106 += 1, R107 += 1 };
  s1 -> s1 [74, 65535] { R185 += 1, R106 += 1, R107 += 1 };
  s2 -> s2 [0, 65535] { R185 += 1, R106 += 1, R107 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 72] { R187 += 1, R114 += 1, R115 += 1 };
  s0 -> s0 [0, 65535] { R186 += 1, R187 += 1 };
  s0 -> s2 [73, 73] { R187 += 1, R114 += 1, R115 += 1 };
  s0 -> s3 [73, 73] { R187 += 1, R114 += 1, R115 += 1 };
  s0 -> s1 [74, 65535] { R187 += 1, R114 += 1, R115 += 1 };
  s1 -> s1 [0, 72] { R187 += 1, R114 += 1, R115 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R187 += 1, R114 += 1, R115 += 1 };
  s1 -> s3 [73, 73] { R187 += 1, R114 += 1, R115 += 1 };
  s1 -> s1 [74, 65535] { R187 += 1, R114 += 1, R115 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R187 += 1, R114 += 1, R115 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 72] { R189 += 1, R124 += 1, R125 += 1 };
  s0 -> s0 [0, 65535] { R188 += 1, R189 += 1 };
  s0 -> s2 [73, 73] { R189 += 1, R124 += 1, R125 += 1 };
  s0 -> s3 [73, 73] { R189 += 1, R124 += 1, R125 += 1 };
  s0 -> s1 [74, 65535] { R189 += 1, R124 += 1, R125 += 1 };
  s1 -> s1 [0, 72] { R189 += 1, R124 += 1, R125 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R189 += 1, R124 += 1, R125 += 1 };
  s1 -> s3 [73, 73] { R189 += 1, R124 += 1, R125 += 1 };
  s1 -> s1 [74, 65535] { R189 += 1, R124 += 1, R125 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R189 += 1, R124 += 1, R125 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
};
synchronised {  // Automata constraining P4
automaton P4_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
synchronised {  // Automata constraining P48
automaton P48_0 {
  init s0;
  s0 -> s1 [106, 106];
  accepting s1;
};
};
constraint R2 = R161 && R20 - R161 = -1 && R21 = R161 && R22 - R161 = -1 && R23 = R161 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R59 + R58 + -1*R129 + -1*R125 = 0 && R74 + R72 = 0 && R75 + R73 + -1*R129 + -1*R125 = 0 && R128 + R124 = 0 && R130 + R126 = 0 && R131 + R127 = 0 && R132 = 0 && R133 = R161 && R134 = 0 && R135 = R161 && R136 = 0 && R137 = R161 && R138 = 0 && R139 = R161 && R140 = 0 && R141 = R161 && R142 = 0 && R143 = R161 && R144 = 0 && R145 = R161 && R146 = 0 && R147 = R161 && R148 = 0 && R149 = R161 && R150 = 0 && R151 = R161 && R152 = 0 && R153 = R161 && R154 = 0 && R155 = R161 && R156 = 0 && R157 = R161 && R158 = 0 && R159 = R161 && R160 = 0 && R11 < 1 && R12 < 1 && R61 + R60 < 1 && -1*R81 + -1*R78 < 1 && R87 + R84 < 1 && -1*R129 + -1*R125 < 1 && 0 < R161 && (R79 + R76 != 0 || R80 + R77 + -1*R129 + -1*R125 = 0 || R81 + R78 < 1) && (R81 + R78 != 0 || R105 + R100 = 0 || (R94 + R90 = 0 && R95 + R91 = 0)) && (R81 + R78 != 0 || R105 + R100 = 0 || (R103 + R98 = 0 && R104 + R99 = 0)) && (R81 + R78 != 0 || R105 + R100 = 0 || (R112 + R108 = 0 && R113 + R109 = 0)) && (R81 + R78 != 0 || ((R79 + R76 != 0 || R80 + R77 + -1*R129 + -1*R125 = 0 || R129 + R125 < 1) && (R79 + R76 = 0 || R129 + R125 < 1))) && (R85 + R82 != 0 || R86 + R83 + -1*R129 + -1*R125 = 0 || (R81 + R78 = 0 && R129 + R125 = 0)) && (R92 + R88 != 0 || R93 + R89 + -1*R129 + -1*R125 = 0 || (R81 + R78 = 0 && R129 + R125 = 0)) && (R94 + R90 != 0 || R81 + R78 + -1*R95 + -1*R91 = 0 || R81 + R78 < 1) && (R101 + R96 != 0 || R102 + R97 + -1*R129 + -1*R125 = 0 || (R81 + R78 = 0 && R129 + R125 = 0)) && (R103 + R98 != 0 || R81 + R78 + -1*R104 + -1*R99 = 0 || R81 + R78 < 1) && (R110 + R106 != 0 || R111 + R107 + -1*R129 + -1*R125 = 0 || (R81 + R78 = 0 && R129 + R125 = 0)) && (R112 + R108 != 0 || R81 + R78 + -1*R113 + -1*R109 = 0 || R81 + R78 < 1) && (R119 + R114 != 0 || R120 + R115 + -1*R129 + -1*R125 = 0 || (R81 + R78 = 0 && R129 + R125 = 0)) && (R19 = 0 || (R162 = 0 && R163 = 0 && R164 = 0 && R165 = 0 && R166 = 0 && R167 = 0 && R168 = 0 && R169 = 0 && R170 = 0 && R171 = 0 && R172 = 0 && R173 = 0 && R174 = 0 && R175 = 0 && R176 = 0 && R177 = 0 && R178 = 0 && R179 = 0 && R180 = 0 && R181 = 0 && R182 = 0 && R183 = 0 && R184 = 0 && R185 = 0 && R186 = 0 && R187 = 0 && R188 = 0 && R189 = 0)) && (R67 + R64 = 0 || (R65 + R62 = 0 && R66 + R63 = 0)) && (R67 + R64 = 0 || (R70 + R68 = 0 && R71 + R69 = 0)) && (R79 + R76 = 0 || R81 + R78 < 1) && (R85 + R82 = 0 || (R81 + R78 = 0 && R129 + R125 = 0)) && (R92 + R88 = 0 || (R81 + R78 = 0 && R129 + R125 = 0)) && (R94 + R90 = 0 || R81 + R78 < 1) && (R101 + R96 = 0 || (R81 + R78 = 0 && R129 + R125 = 0)) && (R103 + R98 = 0 || R81 + R78 < 1) && (R110 + R106 = 0 || (R81 + R78 = 0 && R129 + R125 = 0)) && (R112 + R108 = 0 || R81 + R78 < 1) && (R119 + R114 = 0 || (R81 + R78 = 0 && R129 + R125 = 0)) && (R123 + R118 = 0 || (R121 + R116 = 0 && R122 + R117 = 0));
// End of Parikh automata intersection problem
