// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R1000, R1001, R1002, R1003, R1004, R1005, R1006, R1007, R1008, R1009, R1010, R1011, R1012, R1013, R1014, R1015, R1016, R1017, R1018, R1019, R1020, R1021, R1022, R1023, R1024, R1025, R1026, R1027, R1028, R1029, R1030, R1031, R1032, R1033, R1034, R1035, R1036, R1037, R1038, R1039, R1040, R1041, R1042, R1043, R1044, R1045, R1046, R1047, R1048, R1049, R1050, R1051, R1052, R1053, R1054, R1055, R1056, R1057, R1058, R1059, R1060, R1061, R1062, R11, R12, R16, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R3, R31, R33, R35, R36, R39, R4, R40, R41, R8, R979, R980, R981, R982, R983, R984, R985, R986, R987, R988, R989, R990, R991, R992, R993, R994, R995, R996, R997, R998, R999;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [70, 70];
  s0 -> s0 [71, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [70, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 69];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [70, 70];
  s0 -> s1 [71, 65535];
  s1 -> s1 [0, 69];
  s1 -> s2 [70, 70];
  s1 -> s1 [71, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R20 += 1 };
  s0 -> s0 [0, 65535] { R19 += 1, R20 += 1 };
  s0 -> s2 [9, 13] { R20 += 1 };
  s0 -> s1 [14, 31] { R20 += 1 };
  s0 -> s2 [32, 32] { R20 += 1 };
  s0 -> s1 [33, 65535] { R20 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R20 += 1 };
  s2 -> s1 [0, 65535] { R20 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R22 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R21 += 1, R22 += 1 };
  s1 -> s1 [0, 65535] { R22 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R24 += 1 };
  s0 -> s0 [0, 65535] { R23 += 1, R24 += 1 };
  s0 -> s2 [9, 13] { R24 += 1 };
  s0 -> s1 [14, 31] { R24 += 1 };
  s0 -> s2 [32, 32] { R24 += 1 };
  s0 -> s1 [33, 65535] { R24 += 1 };
  s1 -> s1 [0, 65535] { R24 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R24 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R25 += 1, R26 += 1 };
  s1 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R1008 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R1007 += 1, R1008 += 1 };
  s1 -> s1 [0, 65535] { R1008 += 1, R18 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 69] { R1010 += 1 };
  s0 -> s0 [0, 65535] { R1009 += 1, R1010 += 1 };
  s0 -> s2 [70, 70] { R1010 += 1 };
  s0 -> s3 [70, 70] { R1010 += 1 };
  s0 -> s1 [76, 65535] { R1010 += 1 };
  s1 -> s1 [0, 69] { R1010 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R1010 += 1 };
  s1 -> s3 [70, 70] { R1010 += 1 };
  s1 -> s1 [76, 65535] { R1010 += 1 };
  s2 -> s2 [0, 70] { R1010 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [76, 65535] { R1010 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 69] { R1012 += 1, R31 += 1 };
  s0 -> s0 [0, 65535] { R1011 += 1, R1012 += 1 };
  s0 -> s2 [70, 70] { R1012 += 1, R31 += 1 };
  s0 -> s3 [70, 70] { R1012 += 1, R31 += 1 };
  s0 -> s1 [71, 65535] { R1012 += 1, R31 += 1 };
  s1 -> s1 [0, 69] { R1012 += 1, R31 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R1012 += 1, R31 += 1 };
  s1 -> s3 [70, 70] { R1012 += 1, R31 += 1 };
  s1 -> s1 [71, 65535] { R1012 += 1, R31 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R1012 += 1, R31 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 69] { R1014 += 1, R33 += 1 };
  s0 -> s0 [0, 65535] { R1013 += 1, R1014 += 1 };
  s0 -> s2 [70, 70] { R1014 += 1, R33 += 1 };
  s0 -> s3 [70, 70] { R1014 += 1, R33 += 1 };
  s0 -> s1 [71, 65535] { R1014 += 1, R33 += 1 };
  s1 -> s1 [0, 69] { R1014 += 1, R33 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R1014 += 1, R33 += 1 };
  s1 -> s3 [70, 70] { R1014 += 1, R33 += 1 };
  s1 -> s1 [71, 65535] { R1014 += 1, R33 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1014 += 1, R33 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 69] { R1016 += 1, R35 += 1, R36 += 1 };
  s0 -> s0 [0, 65535] { R1015 += 1, R1016 += 1 };
  s0 -> s2 [70, 70] { R1016 += 1, R35 += 1, R36 += 1 };
  s0 -> s3 [70, 70] { R1016 += 1, R35 += 1, R36 += 1 };
  s0 -> s1 [71, 65535] { R1016 += 1, R35 += 1, R36 += 1 };
  s1 -> s1 [0, 69] { R1016 += 1, R35 += 1, R36 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R1016 += 1, R35 += 1, R36 += 1 };
  s1 -> s3 [70, 70] { R1016 += 1, R35 += 1, R36 += 1 };
  s1 -> s1 [71, 65535] { R1016 += 1, R35 += 1, R36 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1016 += 1, R35 += 1, R36 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 69] { R1018 += 1, R39 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R1017 += 1, R1018 += 1 };
  s0 -> s2 [70, 70] { R1018 += 1, R39 += 1, R40 += 1 };
  s0 -> s3 [70, 70] { R1018 += 1, R39 += 1, R40 += 1 };
  s0 -> s1 [71, 65535] { R1018 += 1, R39 += 1, R40 += 1 };
  s1 -> s1 [0, 69] { R1018 += 1, R39 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R1018 += 1, R39 += 1, R40 += 1 };
  s1 -> s3 [70, 70] { R1018 += 1, R39 += 1, R40 += 1 };
  s1 -> s1 [71, 65535] { R1018 += 1, R39 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1018 += 1, R39 += 1, R40 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 69] { R1032 += 1 };
  s0 -> s0 [0, 65535] { R1031 += 1, R1032 += 1 };
  s0 -> s2 [70, 70] { R1032 += 1 };
  s0 -> s1 [71, 65535] { R1032 += 1 };
  s1 -> s1 [0, 69] { R1032 += 1 };
  s1 -> s2 [70, 70] { R1032 += 1 };
  s1 -> s1 [71, 65535] { R1032 += 1 };
  s2 -> s2 [0, 65535] { R1032 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_15 {
  init s0;
  s0 -> s0 [0, 65535] { R1033 += 1, R1034 += 1 };
  s0 -> s1 [0, 65535] { R1034 += 1, R1 += 1 };
  s1 -> s1 [0, 65535] { R1034 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 69] { R1036 += 1 };
  s0 -> s2 [0, 65535] { R1036 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R1035 += 1, R1036 += 1 };
  s0 -> s3 [70, 70] { R1036 += 1 };
  s0 -> s1 [71, 65535] { R1036 += 1 };
  s1 -> s1 [0, 69] { R1036 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [70, 70] { R1036 += 1 };
  s1 -> s1 [71, 65535] { R1036 += 1 };
  s2 -> s1 [0, 69] { R1036 += 1 };
  s2 -> s2 [0, 65535] { R1036 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [70, 70] { R1036 += 1 };
  s2 -> s1 [71, 65535] { R1036 += 1 };
  s3 -> s3 [0, 65535] { R1036 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 69] { R1038 += 1, R994 += 1 };
  s0 -> s2 [0, 65535] { R1038 += 1, R993 += 1, R994 += 1 };
  s0 -> s0 [0, 65535] { R1037 += 1, R1038 += 1 };
  s0 -> s1 [71, 65535] { R1038 += 1, R994 += 1 };
  s1 -> s1 [0, 69] { R1038 += 1, R994 += 1 };
  s1 -> s1 [0, 65535] { R1038 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [71, 65535] { R1038 += 1, R994 += 1 };
  s2 -> s1 [0, 69] { R1038 += 1, R994 += 1 };
  s2 -> s2 [0, 65535] { R1038 += 1, R993 += 1, R994 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [71, 65535] { R1038 += 1, R994 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R1040 += 1, R996 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R1039 += 1, R1040 += 1 };
  s0 -> s2 [0, 65535] { R1040 += 1, R995 += 1, R996 += 1 };
  s1 -> s1 [0, 65535] { R1040 += 1, R996 += 1, R16 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R1040 += 1 };
  s2 -> s1 [0, 65535] { R1040 += 1, R996 += 1, R16 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1040 += 1, R995 += 1, R996 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1040 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 70] { R1042 += 1, R998 += 1 };
  s0 -> s0 [0, 65535] { R1041 += 1, R1042 += 1 };
  s0 -> s2 [0, 65535] { R1042 += 1, R997 += 1, R998 += 1 };
  s0 -> s3 [75, 75] { R1042 += 1, R998 += 1 };
  s0 -> s1 [76, 65535] { R1042 += 1, R998 += 1 };
  s1 -> s1 [0, 70] { R1042 += 1, R998 += 1 };
  s1 -> s3 [75, 75] { R1042 += 1, R998 += 1 };
  s1 -> s1 [76, 65535] { R1042 += 1, R998 += 1 };
  s2 -> s1 [0, 70] { R1042 += 1, R998 += 1 };
  s2 -> s2 [0, 65535] { R1042 += 1, R997 += 1, R998 += 1 };
  s2 -> s3 [75, 75] { R1042 += 1, R998 += 1 };
  s2 -> s1 [76, 65535] { R1042 += 1, R998 += 1 };
  s3 -> s3 [0, 70] { R1042 += 1, R998 += 1 };
  s3 -> s3 [0, 65535] { R1042 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [75, 65535] { R1042 += 1, R998 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s0 [0, 65535] { R1043 += 1, R1044 += 1 };
  s0 -> s1 [0, 65535] { R1044 += 1, R999 += 1, R1000 += 1 };
  s0 -> s2 [0, 65535] { R1044 += 1, R1000 += 1, R980 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1044 += 1, R999 += 1, R1000 += 1 };
  s1 -> s2 [0, 65535] { R1044 += 1, R1000 += 1, R980 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R1044 += 1 };
  s2 -> s2 [0, 65535] { R1044 += 1, R1000 += 1, R980 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1044 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 74] { R1046 += 1, R1002 += 1 };
  s0 -> s2 [0, 65535] { R1046 += 1, R1001 += 1, R1002 += 1 };
  s0 -> s0 [0, 65535] { R1045 += 1, R1046 += 1 };
  s0 -> s3 [0, 65535] { R1046 += 1, R1002 += 1, R982 += 1 };
  s0 -> s1 [76, 65535] { R1046 += 1, R1002 += 1 };
  s1 -> s1 [0, 74] { R1046 += 1, R1002 += 1 };
  s1 -> s1 [0, 65535] { R1046 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [76, 65535] { R1046 += 1, R1002 += 1 };
  s2 -> s1 [0, 74] { R1046 += 1, R1002 += 1 };
  s2 -> s2 [0, 65535] { R1046 += 1, R1001 += 1, R1002 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R1046 += 1, R1002 += 1, R982 += 1 };
  s2 -> s1 [76, 65535] { R1046 += 1, R1002 += 1 };
  s3 -> s1 [0, 74] { R1046 += 1, R1002 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R1046 += 1 };
  s3 -> s3 [0, 65535] { R1046 += 1, R1002 += 1, R982 += 1 };
  s3 -> s1 [76, 65535] { R1046 += 1, R1002 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1046 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 74] { R1048 += 1, R1004 += 1, R986 += 1 };
  s0 -> s2 [0, 65535] { R1048 += 1, R1004 += 1, R985 += 1, R986 += 1 };
  s0 -> s3 [0, 65535] { R1048 += 1, R1003 += 1, R1004 += 1 };
  s0 -> s0 [0, 65535] { R1047 += 1, R1048 += 1 };
  s0 -> s1 [76, 65535] { R1048 += 1, R1004 += 1, R986 += 1 };
  s1 -> s1 [0, 74] { R1048 += 1, R1004 += 1, R986 += 1 };
  s1 -> s5 [0, 65535] { R1048 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R1048 += 1, R1004 += 1 };
  s1 -> s1 [76, 65535] { R1048 += 1, R1004 += 1, R986 += 1 };
  s2 -> s1 [0, 74] { R1048 += 1, R1004 += 1, R986 += 1 };
  s2 -> s5 [0, 65535] { R1048 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1048 += 1, R1004 += 1, R985 += 1, R986 += 1 };
  s2 -> s1 [76, 65535] { R1048 += 1, R1004 += 1, R986 += 1 };
  s3 -> s1 [0, 74] { R1048 += 1, R1004 += 1, R986 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R1048 += 1, R1004 += 1, R985 += 1, R986 += 1 };
  s3 -> s3 [0, 65535] { R1048 += 1, R1003 += 1, R1004 += 1 };
  s3 -> s1 [76, 65535] { R1048 += 1, R1004 += 1, R986 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1048 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R1050 += 1, R1005 += 1, R1006 += 1 };
  s0 -> s0 [0, 65535] { R1049 += 1, R1050 += 1 };
  s0 -> s2 [0, 65535] { R1050 += 1, R1006 += 1, R991 += 1, R992 += 1 };
  s0 -> s3 [0, 65535] { R1050 += 1, R1006 += 1, R990 += 1, R991 += 1 };
  s1 -> s1 [0, 65535] { R1050 += 1, R1005 += 1, R1006 += 1 };
  s1 -> s2 [0, 65535] { R1050 += 1, R1006 += 1, R991 += 1, R992 += 1 };
  s1 -> s3 [0, 65535] { R1050 += 1, R1006 += 1, R990 += 1, R991 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s4 [0, 65535] { R1050 += 1 };
  s2 -> s2 [0, 65535] { R1050 += 1, R1006 += 1, R991 += 1, R992 += 1 };
  s2 -> s6 [0, 65535] { R1050 += 1, R1006 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s4 [0, 65535] { R1050 += 1 };
  s3 -> s2 [0, 65535] { R1050 += 1, R1006 += 1, R991 += 1, R992 += 1 };
  s3 -> s3 [0, 65535] { R1050 += 1, R1006 += 1, R990 += 1, R991 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1050 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R1050 += 1 };
  s6 -> s6 [0, 65535] { R1050 += 1, R1006 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s0 [0, 65535] { R1051 += 1, R1052 += 1 };
  s0 -> s1 [0, 65535] { R1052 += 1, R1020 += 1, R17 += 1 };
  s0 -> s2 [0, 65535] { R1052 += 1, R1019 += 1, R1020 += 1 };
  s1 -> s1 [0, 65535] { R1052 += 1, R1020 += 1, R17 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R1052 += 1 };
  s2 -> s1 [0, 65535] { R1052 += 1, R1020 += 1, R17 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1052 += 1, R1019 += 1, R1020 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1052 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 69] { R1054 += 1, R1022 += 1 };
  s0 -> s2 [0, 65535] { R1054 += 1, R1021 += 1, R1022 += 1 };
  s0 -> s0 [0, 65535] { R1053 += 1, R1054 += 1 };
  s0 -> s3 [70, 70] { R1054 += 1, R1022 += 1 };
  s0 -> s4 [70, 70] { R1054 += 1, R1022 += 1 };
  s0 -> s1 [76, 65535] { R1054 += 1, R1022 += 1 };
  s1 -> s1 [0, 69] { R1054 += 1, R1022 += 1 };
  s1 -> s1 [0, 65535] { R1054 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [70, 70] { R1054 += 1, R1022 += 1 };
  s1 -> s4 [70, 70] { R1054 += 1, R1022 += 1 };
  s1 -> s1 [76, 65535] { R1054 += 1, R1022 += 1 };
  s2 -> s1 [0, 69] { R1054 += 1, R1022 += 1 };
  s2 -> s2 [0, 65535] { R1054 += 1, R1021 += 1, R1022 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [70, 70] { R1054 += 1, R1022 += 1 };
  s2 -> s4 [70, 70] { R1054 += 1, R1022 += 1 };
  s2 -> s1 [76, 65535] { R1054 += 1, R1022 += 1 };
  s3 -> s3 [0, 70] { R1054 += 1, R1022 += 1 };
  s3 -> s3 [0, 65535] { R1054 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [76, 65535] { R1054 += 1, R1022 += 1 };
  s4 -> s4 [0, 65535] { R1054 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 69] { R1056 += 1, R1024 += 1, R979 += 1 };
  s0 -> s0 [0, 65535] { R1055 += 1, R1056 += 1 };
  s0 -> s2 [0, 65535] { R1056 += 1, R1023 += 1, R1024 += 1 };
  s0 -> s3 [70, 70] { R1056 += 1, R1024 += 1, R979 += 1 };
  s0 -> s4 [70, 70] { R1056 += 1, R1024 += 1, R979 += 1 };
  s0 -> s1 [71, 65535] { R1056 += 1, R1024 += 1, R979 += 1 };
  s1 -> s1 [0, 69] { R1056 += 1, R1024 += 1, R979 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1056 += 1 };
  s1 -> s3 [70, 70] { R1056 += 1, R1024 += 1, R979 += 1 };
  s1 -> s4 [70, 70] { R1056 += 1, R1024 += 1, R979 += 1 };
  s1 -> s1 [71, 65535] { R1056 += 1, R1024 += 1, R979 += 1 };
  s2 -> s1 [0, 69] { R1056 += 1, R1024 += 1, R979 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1056 += 1, R1023 += 1, R1024 += 1 };
  s2 -> s3 [70, 70] { R1056 += 1, R1024 += 1, R979 += 1 };
  s2 -> s4 [70, 70] { R1056 += 1, R1024 += 1, R979 += 1 };
  s2 -> s1 [71, 65535] { R1056 += 1, R1024 += 1, R979 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R1056 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R1056 += 1 };
  s4 -> s4 [0, 65535] { R1056 += 1, R1024 += 1, R979 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1056 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 69] { R1058 += 1, R1026 += 1, R981 += 1 };
  s0 -> s2 [0, 65535] { R1058 += 1, R1025 += 1, R1026 += 1 };
  s0 -> s0 [0, 65535] { R1057 += 1, R1058 += 1 };
  s0 -> s3 [70, 70] { R1058 += 1, R1026 += 1, R981 += 1 };
  s0 -> s4 [70, 70] { R1058 += 1, R1026 += 1, R981 += 1 };
  s0 -> s1 [71, 65535] { R1058 += 1, R1026 += 1, R981 += 1 };
  s1 -> s1 [0, 69] { R1058 += 1, R1026 += 1, R981 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1058 += 1 };
  s1 -> s3 [70, 70] { R1058 += 1, R1026 += 1, R981 += 1 };
  s1 -> s4 [70, 70] { R1058 += 1, R1026 += 1, R981 += 1 };
  s1 -> s1 [71, 65535] { R1058 += 1, R1026 += 1, R981 += 1 };
  s2 -> s1 [0, 69] { R1058 += 1, R1026 += 1, R981 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1058 += 1, R1025 += 1, R1026 += 1 };
  s2 -> s3 [70, 70] { R1058 += 1, R1026 += 1, R981 += 1 };
  s2 -> s4 [70, 70] { R1058 += 1, R1026 += 1, R981 += 1 };
  s2 -> s1 [71, 65535] { R1058 += 1, R1026 += 1, R981 += 1 };
  s3 -> s3 [0, 65535] { R1058 += 1, R1026 += 1, R981 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R1058 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1058 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1058 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 69] { R1060 += 1, R1028 += 1, R983 += 1, R984 += 1 };
  s0 -> s0 [0, 65535] { R1059 += 1, R1060 += 1 };
  s0 -> s2 [0, 65535] { R1060 += 1, R1027 += 1, R1028 += 1 };
  s0 -> s3 [70, 70] { R1060 += 1, R1028 += 1, R983 += 1, R984 += 1 };
  s0 -> s4 [70, 70] { R1060 += 1, R1028 += 1, R983 += 1, R984 += 1 };
  s0 -> s1 [71, 65535] { R1060 += 1, R1028 += 1, R983 += 1, R984 += 1 };
  s1 -> s1 [0, 69] { R1060 += 1, R1028 += 1, R983 += 1, R984 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R1060 += 1 };
  s1 -> s3 [70, 70] { R1060 += 1, R1028 += 1, R983 += 1, R984 += 1 };
  s1 -> s4 [70, 70] { R1060 += 1, R1028 += 1, R983 += 1, R984 += 1 };
  s1 -> s1 [71, 65535] { R1060 += 1, R1028 += 1, R983 += 1, R984 += 1 };
  s2 -> s1 [0, 69] { R1060 += 1, R1028 += 1, R983 += 1, R984 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R1060 += 1, R1027 += 1, R1028 += 1 };
  s2 -> s3 [70, 70] { R1060 += 1, R1028 += 1, R983 += 1, R984 += 1 };
  s2 -> s4 [70, 70] { R1060 += 1, R1028 += 1, R983 += 1, R984 += 1 };
  s2 -> s1 [71, 65535] { R1060 += 1, R1028 += 1, R983 += 1, R984 += 1 };
  s3 -> s3 [0, 65535] { R1060 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R1060 += 1, R1028 += 1, R983 += 1, R984 += 1 };
  s4 -> s5 [0, 65535] { R1060 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R1060 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 69] { R1062 += 1, R1030 += 1, R987 += 1, R988 += 1 };
  s0 -> s2 [0, 65535] { R1062 += 1, R1029 += 1, R1030 += 1 };
  s0 -> s0 [0, 65535] { R1061 += 1, R1062 += 1 };
  s0 -> s3 [70, 70] { R1062 += 1, R1030 += 1, R987 += 1, R988 += 1 };
  s0 -> s4 [70, 70] { R1062 += 1, R1030 += 1, R987 += 1, R988 += 1 };
  s0 -> s1 [71, 65535] { R1062 += 1, R1030 += 1, R987 += 1, R988 += 1 };
  s1 -> s1 [0, 69] { R1062 += 1, R1030 += 1, R987 += 1, R988 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1062 += 1 };
  s1 -> s3 [70, 70] { R1062 += 1, R1030 += 1, R987 += 1, R988 += 1 };
  s1 -> s4 [70, 70] { R1062 += 1, R1030 += 1, R987 += 1, R988 += 1 };
  s1 -> s1 [71, 65535] { R1062 += 1, R1030 += 1, R987 += 1, R988 += 1 };
  s2 -> s1 [0, 69] { R1062 += 1, R1030 += 1, R987 += 1, R988 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1062 += 1, R1029 += 1, R1030 += 1 };
  s2 -> s3 [70, 70] { R1062 += 1, R1030 += 1, R987 += 1, R988 += 1 };
  s2 -> s4 [70, 70] { R1062 += 1, R1030 += 1, R987 += 1, R988 += 1 };
  s2 -> s1 [71, 65535] { R1062 += 1, R1030 += 1, R987 += 1, R988 += 1 };
  s3 -> s3 [0, 65535] { R1062 += 1, R1030 += 1, R987 += 1, R988 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R1062 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1062 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1062 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [102, 102];
  accepting s1;
};
};
constraint R1 = R998 && R2 = R1062 && R19 - R1062 = -1 && R20 = R1062 && R21 - R1062 = -1 && R22 = R1062 && R23 = 0 && R24 = 1 && R25 = 0 && R26 = 1 && R997 = 0 && R1031 = 0 && R1032 = R1062 && R1033 = 0 && R1034 = R1062 && R1035 = 0 && R1036 = R1062 && R1037 = 0 && R1038 = R1062 && R1039 = 0 && R1040 = R1062 && R1041 = 0 && R1042 = R1062 && R1043 = 0 && R1044 = R1062 && R1045 = 0 && R1046 = R1062 && R1047 = 0 && R1048 = R1062 && R1049 = 0 && R1050 = R1062 && R1051 = 0 && R1052 = R1062 && R1053 = 0 && R1054 = R1062 && R1055 = 0 && R1056 = R1062 && R1057 = 0 && R1058 = R1062 && R1059 = 0 && R1060 = R1062 && R1061 = 0 && R8 < 1 && R11 < 1 && R12 < 1 && -1*R980 + -1*R979 - R31 < 1 && R33 + R982 + R981 < 1 && -1 < R998 && 0 < R1062 && (R31 + R980 + R979 != 0 || R41 + R992 + R989 = 0 || (R35 + R985 + R983 = 0 && R36 + R986 + R984 = 0)) && (R31 + R980 + R979 != 0 || R41 + R992 + R989 = 0 || (R39 + R990 + R987 = 0 && R40 + R991 + R988 = 0)) && (R35 + R985 + R983 != 0 || R31 + R980 + R979 + -1*R986 + -1*R984 - R36 = 0 || R31 + R980 + R979 < 1) && (R39 + R990 + R987 != 0 || R31 + R980 + R979 + -1*R991 + -1*R988 - R40 = 0 || R31 + R980 + R979 < 1) && (R993 != 0 || R994 = R998 || (R16 = 0 && R998 = 0)) && (R995 != 0 || R996 = R998 || (R16 = 0 && R998 = 0)) && (R999 != 0 || R998 = R1000 || (R16 = 0 && R998 = 0)) && (R1001 != 0 || R998 = R1002 || (R16 = 0 && R998 = 0)) && (R1003 != 0 || R998 = R1004 || (R16 = 0 && R998 = 0)) && (R1005 != 0 || R998 = R1006 || (R16 = 0 && R998 = 0)) && (R17 = 0 || (R1019 = 0 && R1020 = 0)) && (R17 = 0 || (R1021 = 0 && R1022 = 0)) && (R17 = 0 || (R1023 = 0 && R1024 = 0)) && (R17 = 0 || (R1025 = 0 && R1026 = 0)) && (R17 = 0 || (R1027 = 0 && R1028 = 0)) && (R17 = 0 || (R1029 = 0 && R1030 = 0)) && (R18 = 0 || (R1007 = 0 && R1008 = 0)) && (R18 = 0 || (R1009 = 0 && R1010 = 0)) && (R18 = 0 || (R1011 = 0 && R1012 = 0)) && (R18 = 0 || (R1013 = 0 && R1014 = 0)) && (R18 = 0 || (R1015 = 0 && R1016 = 0)) && (R18 = 0 || (R1017 = 0 && R1018 = 0)) && (R35 + R985 + R983 = 0 || R31 + R980 + R979 < 1) && (R39 + R990 + R987 = 0 || R31 + R980 + R979 < 1) && (R993 = 0 || (R16 = 0 && R998 = 0)) && (R995 = 0 || (R16 = 0 && R998 = 0)) && (R999 = 0 || (R16 = 0 && R998 = 0)) && (R1001 = 0 || (R16 = 0 && R998 = 0)) && (R1003 = 0 || (R16 = 0 && R998 = 0)) && (R1005 = 0 || (R16 = 0 && R998 = 0));
// End of Parikh automata intersection problem
