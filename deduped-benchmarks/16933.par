// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R12, R16, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R281, R282, R283, R284, R285, R286, R287, R288, R289, R290, R291, R292, R293, R294, R295, R296, R297, R298, R299, R3, R300, R301, R302, R303, R304, R305, R306, R307, R308, R309, R31, R310, R311, R312, R313, R314, R315, R316, R317, R318, R319, R320, R321, R322, R323, R324, R325, R326, R327, R328, R329, R33, R330, R331, R332, R333, R334, R335, R336, R337, R338, R339, R340, R341, R342, R343, R344, R345, R346, R347, R348, R349, R35, R350, R351, R352, R353, R354, R355, R356, R357, R358, R359, R36, R360, R39, R4, R40, R41, R45, R46, R47, R48, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [70, 70];
  s0 -> s0 [71, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [70, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 69];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [70, 70];
  s0 -> s1 [71, 65535];
  s1 -> s1 [0, 69];
  s1 -> s2 [70, 70];
  s1 -> s1 [71, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R20 += 1 };
  s0 -> s0 [0, 65535] { R19 += 1, R20 += 1 };
  s0 -> s2 [9, 13] { R20 += 1 };
  s0 -> s1 [14, 31] { R20 += 1 };
  s0 -> s2 [32, 32] { R20 += 1 };
  s0 -> s1 [33, 65535] { R20 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R20 += 1 };
  s2 -> s1 [0, 65535] { R20 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R22 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R21 += 1, R22 += 1 };
  s1 -> s1 [0, 65535] { R22 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R24 += 1 };
  s0 -> s0 [0, 65535] { R23 += 1, R24 += 1 };
  s0 -> s2 [9, 13] { R24 += 1 };
  s0 -> s1 [14, 31] { R24 += 1 };
  s0 -> s2 [32, 32] { R24 += 1 };
  s0 -> s1 [33, 65535] { R24 += 1 };
  s1 -> s1 [0, 65535] { R24 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R24 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R25 += 1, R26 += 1 };
  s1 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R305 += 1, R306 += 1 };
  s0 -> s1 [0, 65535] { R306 += 1, R18 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R306 += 1, R18 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 69] { R308 += 1 };
  s0 -> s0 [0, 65535] { R307 += 1, R308 += 1 };
  s0 -> s2 [70, 70] { R308 += 1 };
  s0 -> s3 [70, 70] { R308 += 1 };
  s0 -> s1 [76, 65535] { R308 += 1 };
  s1 -> s1 [0, 69] { R308 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R308 += 1 };
  s1 -> s3 [70, 70] { R308 += 1 };
  s1 -> s1 [76, 65535] { R308 += 1 };
  s2 -> s2 [0, 70] { R308 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [76, 65535] { R308 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 69] { R310 += 1, R31 += 1 };
  s0 -> s0 [0, 65535] { R309 += 1, R310 += 1 };
  s0 -> s2 [70, 70] { R310 += 1, R31 += 1 };
  s0 -> s3 [70, 70] { R310 += 1, R31 += 1 };
  s0 -> s1 [71, 65535] { R310 += 1, R31 += 1 };
  s1 -> s1 [0, 69] { R310 += 1, R31 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R310 += 1, R31 += 1 };
  s1 -> s3 [70, 70] { R310 += 1, R31 += 1 };
  s1 -> s1 [71, 65535] { R310 += 1, R31 += 1 };
  s2 -> s2 [0, 65535] { R310 += 1, R31 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 69] { R312 += 1, R33 += 1 };
  s0 -> s0 [0, 65535] { R311 += 1, R312 += 1 };
  s0 -> s2 [70, 70] { R312 += 1, R33 += 1 };
  s0 -> s3 [70, 70] { R312 += 1, R33 += 1 };
  s0 -> s1 [71, 65535] { R312 += 1, R33 += 1 };
  s1 -> s1 [0, 69] { R312 += 1, R33 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R312 += 1, R33 += 1 };
  s1 -> s3 [70, 70] { R312 += 1, R33 += 1 };
  s1 -> s1 [71, 65535] { R312 += 1, R33 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R312 += 1, R33 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 69] { R314 += 1, R35 += 1, R36 += 1 };
  s0 -> s0 [0, 65535] { R313 += 1, R314 += 1 };
  s0 -> s2 [70, 70] { R314 += 1, R35 += 1, R36 += 1 };
  s0 -> s3 [70, 70] { R314 += 1, R35 += 1, R36 += 1 };
  s0 -> s1 [71, 65535] { R314 += 1, R35 += 1, R36 += 1 };
  s1 -> s1 [0, 69] { R314 += 1, R35 += 1, R36 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R314 += 1, R35 += 1, R36 += 1 };
  s1 -> s3 [70, 70] { R314 += 1, R35 += 1, R36 += 1 };
  s1 -> s1 [71, 65535] { R314 += 1, R35 += 1, R36 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R314 += 1, R35 += 1, R36 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 69] { R316 += 1, R39 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R315 += 1, R316 += 1 };
  s0 -> s2 [70, 70] { R316 += 1, R39 += 1, R40 += 1 };
  s0 -> s3 [70, 70] { R316 += 1, R39 += 1, R40 += 1 };
  s0 -> s1 [71, 65535] { R316 += 1, R39 += 1, R40 += 1 };
  s1 -> s1 [0, 69] { R316 += 1, R39 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R316 += 1, R39 += 1, R40 += 1 };
  s1 -> s3 [70, 70] { R316 += 1, R39 += 1, R40 += 1 };
  s1 -> s1 [71, 65535] { R316 += 1, R39 += 1, R40 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R316 += 1, R39 += 1, R40 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 69] { R330 += 1 };
  s0 -> s0 [0, 65535] { R329 += 1, R330 += 1 };
  s0 -> s2 [70, 70] { R330 += 1 };
  s0 -> s1 [71, 65535] { R330 += 1 };
  s1 -> s1 [0, 69] { R330 += 1 };
  s1 -> s2 [70, 70] { R330 += 1 };
  s1 -> s1 [71, 65535] { R330 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R330 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_15 {
  init s0;
  s0 -> s0 [0, 65535] { R331 += 1, R332 += 1 };
  s0 -> s1 [0, 65535] { R332 += 1, R1 += 1 };
  s1 -> s1 [0, 65535] { R332 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 69] { R334 += 1 };
  s0 -> s2 [0, 65535] { R334 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R333 += 1, R334 += 1 };
  s0 -> s3 [70, 70] { R334 += 1 };
  s0 -> s1 [71, 65535] { R334 += 1 };
  s1 -> s1 [0, 69] { R334 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [70, 70] { R334 += 1 };
  s1 -> s1 [71, 65535] { R334 += 1 };
  s2 -> s1 [0, 69] { R334 += 1 };
  s2 -> s2 [0, 65535] { R334 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [70, 70] { R334 += 1 };
  s2 -> s1 [71, 65535] { R334 += 1 };
  s3 -> s3 [0, 65535] { R334 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 69] { R336 += 1, R292 += 1 };
  s0 -> s2 [0, 65535] { R336 += 1, R291 += 1, R292 += 1 };
  s0 -> s0 [0, 65535] { R335 += 1, R336 += 1 };
  s0 -> s1 [71, 65535] { R336 += 1, R292 += 1 };
  s1 -> s1 [0, 69] { R336 += 1, R292 += 1 };
  s1 -> s1 [0, 65535] { R336 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [71, 65535] { R336 += 1, R292 += 1 };
  s2 -> s1 [0, 69] { R336 += 1, R292 += 1 };
  s2 -> s2 [0, 65535] { R336 += 1, R291 += 1, R292 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [71, 65535] { R336 += 1, R292 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R338 += 1, R294 += 1, R16 += 1 };
  s0 -> s2 [0, 65535] { R338 += 1, R293 += 1, R294 += 1 };
  s0 -> s0 [0, 65535] { R337 += 1, R338 += 1 };
  s1 -> s1 [0, 65535] { R338 += 1, R294 += 1, R16 += 1 };
  s1 -> s4 [0, 65535] { R338 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R338 += 1, R294 += 1, R16 += 1 };
  s2 -> s2 [0, 65535] { R338 += 1, R293 += 1, R294 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R338 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 70] { R340 += 1, R296 += 1 };
  s0 -> s0 [0, 65535] { R339 += 1, R340 += 1 };
  s0 -> s2 [0, 65535] { R340 += 1, R295 += 1, R296 += 1 };
  s0 -> s1 [75, 65535] { R340 += 1, R296 += 1 };
  s1 -> s1 [0, 70] { R340 += 1, R296 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R340 += 1 };
  s1 -> s1 [75, 65535] { R340 += 1, R296 += 1 };
  s2 -> s1 [0, 70] { R340 += 1, R296 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R340 += 1, R295 += 1, R296 += 1 };
  s2 -> s1 [75, 65535] { R340 += 1, R296 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 65535] { R342 += 1, R298 += 1, R46 += 1 };
  s0 -> s2 [0, 65535] { R342 += 1, R297 += 1, R298 += 1 };
  s0 -> s0 [0, 65535] { R341 += 1, R342 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R342 += 1, R298 += 1, R46 += 1 };
  s1 -> s4 [0, 65535] { R342 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R342 += 1, R298 += 1, R46 += 1 };
  s2 -> s2 [0, 65535] { R342 += 1, R297 += 1, R298 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R342 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 74] { R344 += 1, R300 += 1 };
  s0 -> s2 [0, 65535] { R344 += 1, R300 += 1, R48 += 1 };
  s0 -> s3 [0, 65535] { R344 += 1, R299 += 1, R300 += 1 };
  s0 -> s0 [0, 65535] { R343 += 1, R344 += 1 };
  s0 -> s1 [76, 65535] { R344 += 1, R300 += 1 };
  s1 -> s1 [0, 74] { R344 += 1, R300 += 1 };
  s1 -> s1 [0, 65535] { R344 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [76, 65535] { R344 += 1, R300 += 1 };
  s2 -> s1 [0, 74] { R344 += 1, R300 += 1 };
  s2 -> s2 [0, 65535] { R344 += 1, R300 += 1, R48 += 1 };
  s2 -> s5 [0, 65535] { R344 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [76, 65535] { R344 += 1, R300 += 1 };
  s3 -> s1 [0, 74] { R344 += 1, R300 += 1 };
  s3 -> s2 [0, 65535] { R344 += 1, R300 += 1, R48 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R344 += 1, R299 += 1, R300 += 1 };
  s3 -> s1 [76, 65535] { R344 += 1, R300 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R344 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 74] { R346 += 1, R302 += 1, R284 += 1 };
  s0 -> s2 [0, 65535] { R346 += 1, R301 += 1, R302 += 1 };
  s0 -> s0 [0, 65535] { R345 += 1, R346 += 1 };
  s0 -> s1 [0, 65535] { R346 += 1, R302 += 1 };
  s0 -> s1 [76, 65535] { R346 += 1, R302 += 1, R284 += 1 };
  s1 -> s1 [0, 74] { R346 += 1, R302 += 1, R284 += 1 };
  s1 -> s1 [0, 65535] { R346 += 1, R302 += 1 };
  s1 -> s4 [0, 65535] { R346 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [76, 65535] { R346 += 1, R302 += 1, R284 += 1 };
  s2 -> s1 [0, 74] { R346 += 1, R302 += 1, R284 += 1 };
  s2 -> s2 [0, 65535] { R346 += 1, R301 += 1, R302 += 1 };
  s2 -> s1 [0, 65535] { R346 += 1, R302 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [76, 65535] { R346 += 1, R302 += 1, R284 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R346 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R348 += 1, R303 += 1, R304 += 1 };
  s0 -> s2 [0, 65535] { R348 += 1, R304 += 1, R288 += 1, R289 += 1 };
  s0 -> s3 [0, 65535] { R348 += 1, R304 += 1, R289 += 1, R290 += 1 };
  s0 -> s0 [0, 65535] { R347 += 1, R348 += 1 };
  s1 -> s1 [0, 65535] { R348 += 1, R303 += 1, R304 += 1 };
  s1 -> s2 [0, 65535] { R348 += 1, R304 += 1, R288 += 1, R289 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [0, 65535] { R348 += 1, R304 += 1, R289 += 1, R290 += 1 };
  s2 -> s5 [0, 65535] { R348 += 1 };
  s2 -> s2 [0, 65535] { R348 += 1, R304 += 1, R288 += 1, R289 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R348 += 1, R304 += 1, R289 += 1, R290 += 1 };
  s3 -> s4 [0, 65535] { R348 += 1, R304 += 1 };
  s3 -> s5 [0, 65535] { R348 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R348 += 1, R304 += 1, R289 += 1, R290 += 1 };
  s4 -> s4 [0, 65535] { R348 += 1, R304 += 1 };
  s4 -> s5 [0, 65535] { R348 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R348 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 65535] { R350 += 1, R317 += 1, R318 += 1 };
  s0 -> s0 [0, 65535] { R349 += 1, R350 += 1 };
  s0 -> s2 [0, 65535] { R350 += 1, R318 += 1, R17 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R350 += 1, R317 += 1, R318 += 1 };
  s1 -> s2 [0, 65535] { R350 += 1, R318 += 1, R17 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R350 += 1 };
  s2 -> s2 [0, 65535] { R350 += 1, R318 += 1, R17 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R350 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 69] { R352 += 1, R320 += 1 };
  s0 -> s2 [0, 65535] { R352 += 1, R319 += 1, R320 += 1 };
  s0 -> s0 [0, 65535] { R351 += 1, R352 += 1 };
  s0 -> s3 [70, 70] { R352 += 1, R320 += 1 };
  s0 -> s4 [70, 70] { R352 += 1, R320 += 1 };
  s0 -> s5 [75, 75] { R352 += 1, R320 += 1 };
  s0 -> s1 [76, 65535] { R352 += 1, R320 += 1 };
  s1 -> s1 [0, 69] { R352 += 1, R320 += 1 };
  s1 -> s3 [70, 70] { R352 += 1, R320 += 1 };
  s1 -> s4 [70, 70] { R352 += 1, R320 += 1 };
  s1 -> s5 [75, 75] { R352 += 1, R320 += 1 };
  s1 -> s1 [76, 65535] { R352 += 1, R320 += 1 };
  s2 -> s1 [0, 69] { R352 += 1, R320 += 1 };
  s2 -> s2 [0, 65535] { R352 += 1, R319 += 1, R320 += 1 };
  s2 -> s3 [70, 70] { R352 += 1, R320 += 1 };
  s2 -> s4 [70, 70] { R352 += 1, R320 += 1 };
  s2 -> s5 [75, 75] { R352 += 1, R320 += 1 };
  s2 -> s1 [76, 65535] { R352 += 1, R320 += 1 };
  s4 -> s4 [0, 70] { R352 += 1, R320 += 1 };
  s4 -> s7 [75, 75] { R352 += 1, R320 += 1 };
  s4 -> s4 [76, 65535] { R352 += 1, R320 += 1 };
  s5 -> s5 [0, 69] { R352 += 1, R320 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R352 += 1 };
  s5 -> s7 [70, 70] { R352 += 1, R320 += 1 };
  s5 -> s8 [70, 70] { R352 += 1, R320 += 1 };
  s5 -> s5 [75, 65535] { R352 += 1, R320 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 70] { R352 += 1, R320 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R352 += 1 };
  s7 -> s7 [75, 65535] { R352 += 1, R320 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R352 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 69] { R354 += 1, R322 += 1, R45 += 1 };
  s0 -> s0 [0, 65535] { R353 += 1, R354 += 1 };
  s0 -> s2 [0, 65535] { R354 += 1, R321 += 1, R322 += 1 };
  s0 -> s3 [70, 70] { R354 += 1, R322 += 1, R45 += 1 };
  s0 -> s4 [70, 70] { R354 += 1, R322 += 1, R45 += 1 };
  s0 -> s1 [71, 65535] { R354 += 1, R322 += 1, R45 += 1 };
  s1 -> s1 [0, 69] { R354 += 1, R322 += 1, R45 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R354 += 1 };
  s1 -> s3 [70, 70] { R354 += 1, R322 += 1, R45 += 1 };
  s1 -> s4 [70, 70] { R354 += 1, R322 += 1, R45 += 1 };
  s1 -> s1 [71, 65535] { R354 += 1, R322 += 1, R45 += 1 };
  s2 -> s1 [0, 69] { R354 += 1, R322 += 1, R45 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R354 += 1, R321 += 1, R322 += 1 };
  s2 -> s3 [70, 70] { R354 += 1, R322 += 1, R45 += 1 };
  s2 -> s4 [70, 70] { R354 += 1, R322 += 1, R45 += 1 };
  s2 -> s1 [71, 65535] { R354 += 1, R322 += 1, R45 += 1 };
  s3 -> s3 [0, 65535] { R354 += 1, R322 += 1, R45 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R354 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R354 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R354 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 69] { R356 += 1, R324 += 1, R47 += 1 };
  s0 -> s2 [0, 65535] { R356 += 1, R323 += 1, R324 += 1 };
  s0 -> s0 [0, 65535] { R355 += 1, R356 += 1 };
  s0 -> s3 [70, 70] { R356 += 1, R324 += 1, R47 += 1 };
  s0 -> s4 [70, 70] { R356 += 1, R324 += 1, R47 += 1 };
  s0 -> s1 [71, 65535] { R356 += 1, R324 += 1, R47 += 1 };
  s1 -> s1 [0, 69] { R356 += 1, R324 += 1, R47 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R356 += 1 };
  s1 -> s3 [70, 70] { R356 += 1, R324 += 1, R47 += 1 };
  s1 -> s4 [70, 70] { R356 += 1, R324 += 1, R47 += 1 };
  s1 -> s1 [71, 65535] { R356 += 1, R324 += 1, R47 += 1 };
  s2 -> s1 [0, 69] { R356 += 1, R324 += 1, R47 += 1 };
  s2 -> s2 [0, 65535] { R356 += 1, R323 += 1, R324 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [70, 70] { R356 += 1, R324 += 1, R47 += 1 };
  s2 -> s4 [70, 70] { R356 += 1, R324 += 1, R47 += 1 };
  s2 -> s1 [71, 65535] { R356 += 1, R324 += 1, R47 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R356 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R356 += 1 };
  s4 -> s4 [0, 65535] { R356 += 1, R324 += 1, R47 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R356 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 69] { R358 += 1, R326 += 1, R282 += 1 };
  s0 -> s2 [0, 69] { R358 += 1, R326 += 1, R281 += 1, R282 += 1 };
  s0 -> s3 [0, 65535] { R358 += 1, R325 += 1, R326 += 1 };
  s0 -> s0 [0, 65535] { R357 += 1, R358 += 1 };
  s0 -> s4 [70, 70] { R358 += 1, R326 += 1, R281 += 1, R282 += 1 };
  s0 -> s5 [70, 70] { R358 += 1, R326 += 1, R282 += 1 };
  s0 -> s6 [70, 70] { R358 += 1, R326 += 1, R281 += 1, R282 += 1 };
  s0 -> s7 [70, 70] { R358 += 1, R326 += 1, R282 += 1 };
  s0 -> s1 [71, 74] { R358 += 1, R326 += 1, R282 += 1 };
  s0 -> s2 [71, 65535] { R358 += 1, R326 += 1, R281 += 1, R282 += 1 };
  s0 -> s1 [76, 65535] { R358 += 1, R326 += 1, R282 += 1 };
  s1 -> s1 [0, 69] { R358 += 1, R326 += 1, R282 += 1 };
  s1 -> s1 [0, 65535] { R358 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s5 [70, 70] { R358 += 1, R326 += 1 };
  s1 -> s7 [70, 70] { R358 += 1, R326 += 1 };
  s1 -> s1 [71, 74] { R358 += 1, R326 += 1, R282 += 1 };
  s1 -> s1 [71, 65535] { R358 += 1, R326 += 1 };
  s1 -> s1 [76, 65535] { R358 += 1, R326 += 1, R282 += 1 };
  s2 -> s1 [0, 69] { R358 += 1, R326 += 1, R282 += 1 };
  s2 -> s2 [0, 69] { R358 += 1, R326 += 1, R281 += 1, R282 += 1 };
  s2 -> s4 [70, 70] { R358 += 1, R326 += 1, R281 += 1, R282 += 1 };
  s2 -> s5 [70, 70] { R358 += 1, R326 += 1, R282 += 1 };
  s2 -> s6 [70, 70] { R358 += 1, R326 += 1, R281 += 1, R282 += 1 };
  s2 -> s7 [70, 70] { R358 += 1, R326 += 1, R282 += 1 };
  s2 -> s1 [71, 74] { R358 += 1, R326 += 1, R282 += 1 };
  s2 -> s2 [71, 65535] { R358 += 1, R326 += 1, R281 += 1, R282 += 1 };
  s2 -> s1 [76, 65535] { R358 += 1, R326 += 1, R282 += 1 };
  s3 -> s1 [0, 69] { R358 += 1, R326 += 1, R282 += 1 };
  s3 -> s2 [0, 69] { R358 += 1, R326 += 1, R281 += 1, R282 += 1 };
  s3 -> s3 [0, 65535] { R358 += 1, R325 += 1, R326 += 1 };
  s3 -> s4 [70, 70] { R358 += 1, R326 += 1, R281 += 1, R282 += 1 };
  s3 -> s5 [70, 70] { R358 += 1, R326 += 1, R282 += 1 };
  s3 -> s6 [70, 70] { R358 += 1, R326 += 1, R281 += 1, R282 += 1 };
  s3 -> s7 [70, 70] { R358 += 1, R326 += 1, R282 += 1 };
  s3 -> s1 [71, 74] { R358 += 1, R326 += 1, R282 += 1 };
  s3 -> s2 [71, 65535] { R358 += 1, R326 += 1, R281 += 1, R282 += 1 };
  s3 -> s1 [76, 65535] { R358 += 1, R326 += 1, R282 += 1 };
  s4 -> s5 [0, 74] { R358 += 1, R326 += 1, R282 += 1 };
  s4 -> s4 [0, 65535] { R358 += 1, R326 += 1, R281 += 1, R282 += 1 };
  s4 -> s5 [76, 65535] { R358 += 1, R326 += 1, R282 += 1 };
  s5 -> s5 [0, 74] { R358 += 1, R326 += 1, R282 += 1 };
  s5 -> s9 [0, 65535] { R358 += 1 };
  s5 -> s5 [0, 65535] { R358 += 1, R326 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s5 [76, 65535] { R358 += 1, R326 += 1, R282 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R358 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R358 += 1 };
  s9 -> s8 [0, 65535];
  accepting s8, s5, s9, s1, s7;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 69] { R360 += 1, R328 += 1, R285 += 1, R286 += 1 };
  s0 -> s0 [0, 65535] { R359 += 1, R360 += 1 };
  s0 -> s2 [0, 65535] { R360 += 1, R327 += 1, R328 += 1 };
  s0 -> s3 [70, 70] { R360 += 1, R328 += 1, R285 += 1, R286 += 1 };
  s0 -> s4 [70, 70] { R360 += 1, R328 += 1, R285 += 1, R286 += 1 };
  s0 -> s1 [71, 65535] { R360 += 1, R328 += 1, R285 += 1, R286 += 1 };
  s1 -> s1 [0, 69] { R360 += 1, R328 += 1, R285 += 1, R286 += 1 };
  s1 -> s1 [0, 65535] { R360 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [70, 70] { R360 += 1, R328 += 1, R285 += 1, R286 += 1 };
  s1 -> s4 [70, 70] { R360 += 1, R328 += 1, R285 += 1, R286 += 1 };
  s1 -> s1 [71, 65535] { R360 += 1, R328 += 1, R285 += 1, R286 += 1 };
  s2 -> s1 [0, 69] { R360 += 1, R328 += 1, R285 += 1, R286 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R360 += 1, R327 += 1, R328 += 1 };
  s2 -> s3 [70, 70] { R360 += 1, R328 += 1, R285 += 1, R286 += 1 };
  s2 -> s4 [70, 70] { R360 += 1, R328 += 1, R285 += 1, R286 += 1 };
  s2 -> s1 [71, 65535] { R360 += 1, R328 += 1, R285 += 1, R286 += 1 };
  s3 -> s3 [0, 65535] { R360 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R360 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R360 += 1, R328 += 1, R285 += 1, R286 += 1 };
  s5 -> s5 [0, 65535] { R360 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [102, 102];
  accepting s1;
};
};
constraint R2 = R360 && R19 - R360 = -1 && R20 = R360 && R21 - R360 = -1 && R22 = R360 && R23 = 0 && R24 = 1 && R25 = 0 && R26 = 1 && R319 = 0 && R320 = 0 && R325 = 0 && R326 = 0 && R329 = 0 && R330 = R360 && R331 = 0 && R332 = R360 && R333 = 0 && R334 = R360 && R335 = 0 && R336 = R360 && R337 = 0 && R338 = R360 && R339 = 0 && R340 = R360 && R341 = 0 && R342 = R360 && R343 = 0 && R344 = R360 && R345 = 0 && R346 = R360 && R347 = 0 && R348 = R360 && R349 = 0 && R350 = R360 && R351 = 0 && R352 = R360 && R353 = 0 && R354 = R360 && R355 = 0 && R356 = R360 && R357 = 0 && R358 = R360 && R359 = 0 && -1 < R1 && R8 < 1 && R11 < 1 && R12 < 1 && -1*R46 + -1*R45 - R31 < 1 && R33 + R48 + R47 < 1 && 0 < R360 && (R1 != 0 || R16 = 0 || (R291 = 0 && R292 = 0)) && (R1 != 0 || R16 = 0 || (R293 = 0 && R294 = 0)) && (R1 != 0 || R16 = 0 || (R295 = 0 && R296 = 0)) && (R1 != 0 || R16 = 0 || (R297 = 0 && R298 = 0)) && (R1 != 0 || R16 = 0 || (R299 = 0 && R300 = 0)) && (R1 != 0 || R16 = 0 || (R301 = 0 && R302 = 0)) && (R1 != 0 || R16 = 0 || (R303 = 0 && R304 = 0)) && (R31 + R46 + R45 != 0 || R41 + R290 + R287 = 0 || (R35 + R283 + R281 = 0 && R36 + R284 + R282 = 0)) && (R31 + R46 + R45 != 0 || R41 + R290 + R287 = 0 || (R39 + R288 + R285 = 0 && R40 + R289 + R286 = 0)) && (R35 + R283 + R281 != 0 || R31 + R46 + R45 + -1*R284 + -1*R282 - R36 = 0 || R31 + R46 + R45 < 1) && (R39 + R288 + R285 != 0 || R31 + R46 + R45 + -1*R289 + -1*R286 - R40 = 0 || R31 + R46 + R45 < 1) && (R291 != 0 || R1 = R292 || R1 < 1) && (R293 != 0 || R1 = R294 || R1 < 1) && (R295 != 0 || R1 = R296 || R1 < 1) && (R297 != 0 || R1 = R298 || R1 < 1) && (R299 != 0 || R1 = R300 || R1 < 1) && (R301 != 0 || R1 = R302 || R1 < 1) && (R303 != 0 || R1 = R304 || R1 < 1) && (R17 = 0 || (R317 = 0 && R318 = 0)) && (R17 = 0 || (R321 = 0 && R322 = 0)) && (R17 = 0 || (R323 = 0 && R324 = 0)) && (R17 = 0 || (R327 = 0 && R328 = 0)) && (R18 = 0 || (R305 = 0 && R306 = 0)) && (R18 = 0 || (R307 = 0 && R308 = 0)) && (R18 = 0 || (R309 = 0 && R310 = 0)) && (R18 = 0 || (R311 = 0 && R312 = 0)) && (R18 = 0 || (R313 = 0 && R314 = 0)) && (R18 = 0 || (R315 = 0 && R316 = 0)) && (R35 + R283 + R281 = 0 || R31 + R46 + R45 < 1) && (R39 + R288 + R285 = 0 || R31 + R46 + R45 < 1) && (R291 = 0 || R1 < 1) && (R293 = 0 || R1 < 1) && (R295 = 0 || R1 < 1) && (R297 = 0 || R1 < 1) && (R299 = 0 || R1 < 1) && (R301 = 0 || R1 < 1) && (R303 = 0 || R1 < 1);
// End of Parikh automata intersection problem
