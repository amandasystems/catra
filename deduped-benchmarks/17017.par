// Parikh automata intersection problem, generated by OSTRICH+
counter int R12, R15, R16, R2, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R4, R45, R47, R49, R5, R50, R53, R54, R55, R59, R60, R61, R65, R66, R67, R68, R6805, R6806, R6807, R6808, R6809, R6810, R73, R74, R75, R76, R77, R83, R84, R85, R86, R87, R88, R89, R90, R9043, R9044, R9045, R9046, R9047, R9048, R9049, R9050, R91, R92, R9271, R9272, R9273, R9274, R9275, R9276, R9277, R9278, R9279, R9280, R9281, R9282, R9283, R9284, R9285, R9286, R9287, R9288, R9289, R9290, R9291, R9292, R9293, R9294, R9295, R9296, R9297, R9298, R9299, R93, R9300, R9301, R9302, R9303, R9304, R9305, R9306, R9307, R9308, R9309, R9310, R9311, R9312, R9313, R9314, R9315, R9316, R9317, R9318, R9319, R9320, R9321, R9322, R9323, R9324, R9325, R9326, R9327, R9328, R9329, R9330, R9331, R9332, R9333, R9334, R9335, R9336, R9337, R9338, R9339, R9340, R9341, R9342, R9343, R9344, R9345, R9346, R9347, R9348, R9349, R9350, R9351, R9352, R9353, R9354, R9355, R9356, R9357, R9358, R9359, R9360, R9361, R9362, R9363, R9364, R9365, R9366, R9367, R9368, R9369, R9370, R9371, R9372, R9373, R9374, R9375, R9376, R9377, R9378, R9379, R9380, R94, R95, R96;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [70, 70];
  s0 -> s0 [71, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [70, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R15 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 69];
  s0 -> s0 [0, 65535] { R16 += 1 };
  s0 -> s2 [70, 70];
  s0 -> s1 [71, 65535];
  s1 -> s1 [0, 69];
  s1 -> s2 [70, 70];
  s1 -> s1 [71, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R24 += 1 };
  s0 -> s0 [0, 65535] { R23 += 1, R24 += 1 };
  s0 -> s2 [9, 13] { R24 += 1 };
  s0 -> s1 [14, 31] { R24 += 1 };
  s0 -> s2 [32, 32] { R24 += 1 };
  s0 -> s1 [33, 65535] { R24 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R24 += 1 };
  s2 -> s1 [0, 65535] { R24 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R25 += 1, R26 += 1 };
  s1 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R28 += 1 };
  s0 -> s0 [0, 65535] { R27 += 1, R28 += 1 };
  s0 -> s2 [9, 13] { R28 += 1 };
  s0 -> s1 [14, 31] { R28 += 1 };
  s0 -> s2 [32, 32] { R28 += 1 };
  s0 -> s1 [33, 65535] { R28 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R28 += 1 };
  s2 -> s1 [0, 65535] { R28 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R29 += 1, R30 += 1 };
  s1 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R9301 += 1, R9302 += 1 };
  s0 -> s1 [0, 65535] { R9302 += 1, R22 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R9302 += 1, R22 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 69] { R9304 += 1 };
  s0 -> s0 [0, 65535] { R9303 += 1, R9304 += 1 };
  s0 -> s2 [70, 70] { R9304 += 1 };
  s0 -> s3 [70, 70] { R9304 += 1 };
  s0 -> s1 [76, 65535] { R9304 += 1 };
  s1 -> s1 [0, 69] { R9304 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R9304 += 1 };
  s1 -> s3 [70, 70] { R9304 += 1 };
  s1 -> s1 [76, 65535] { R9304 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 70] { R9304 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [76, 65535] { R9304 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 69] { R9306 += 1, R45 += 1 };
  s0 -> s0 [0, 65535] { R9305 += 1, R9306 += 1 };
  s0 -> s2 [70, 70] { R9306 += 1, R45 += 1 };
  s0 -> s3 [70, 70] { R9306 += 1, R45 += 1 };
  s0 -> s1 [71, 65535] { R9306 += 1, R45 += 1 };
  s1 -> s1 [0, 69] { R9306 += 1, R45 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R9306 += 1, R45 += 1 };
  s1 -> s3 [70, 70] { R9306 += 1, R45 += 1 };
  s1 -> s1 [71, 65535] { R9306 += 1, R45 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R9306 += 1, R45 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 69] { R9308 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R9307 += 1, R9308 += 1 };
  s0 -> s2 [70, 70] { R9308 += 1, R47 += 1 };
  s0 -> s3 [70, 70] { R9308 += 1, R47 += 1 };
  s0 -> s1 [71, 65535] { R9308 += 1, R47 += 1 };
  s1 -> s1 [0, 69] { R9308 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R9308 += 1, R47 += 1 };
  s1 -> s3 [70, 70] { R9308 += 1, R47 += 1 };
  s1 -> s1 [71, 65535] { R9308 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R9308 += 1, R47 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 69] { R9310 += 1, R49 += 1, R50 += 1 };
  s0 -> s0 [0, 65535] { R9309 += 1, R9310 += 1 };
  s0 -> s2 [70, 70] { R9310 += 1, R49 += 1, R50 += 1 };
  s0 -> s3 [70, 70] { R9310 += 1, R49 += 1, R50 += 1 };
  s0 -> s1 [71, 65535] { R9310 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 69] { R9310 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R9310 += 1, R49 += 1, R50 += 1 };
  s1 -> s3 [70, 70] { R9310 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [71, 65535] { R9310 += 1, R49 += 1, R50 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R9310 += 1, R49 += 1, R50 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 69] { R9312 += 1, R53 += 1, R54 += 1 };
  s0 -> s0 [0, 65535] { R9311 += 1, R9312 += 1 };
  s0 -> s2 [70, 70] { R9312 += 1, R53 += 1, R54 += 1 };
  s0 -> s3 [70, 70] { R9312 += 1, R53 += 1, R54 += 1 };
  s0 -> s1 [71, 65535] { R9312 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 69] { R9312 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R9312 += 1, R53 += 1, R54 += 1 };
  s1 -> s3 [70, 70] { R9312 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [71, 65535] { R9312 += 1, R53 += 1, R54 += 1 };
  s2 -> s2 [0, 65535] { R9312 += 1, R53 += 1, R54 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 69] { R9314 += 1, R59 += 1, R60 += 1 };
  s0 -> s0 [0, 65535] { R9313 += 1, R9314 += 1 };
  s0 -> s2 [70, 70] { R9314 += 1, R59 += 1, R60 += 1 };
  s0 -> s3 [70, 70] { R9314 += 1, R59 += 1, R60 += 1 };
  s0 -> s1 [71, 65535] { R9314 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 69] { R9314 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R9314 += 1, R59 += 1, R60 += 1 };
  s1 -> s3 [70, 70] { R9314 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [71, 65535] { R9314 += 1, R59 += 1, R60 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R9314 += 1, R59 += 1, R60 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 69] { R9316 += 1, R65 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R9315 += 1, R9316 += 1 };
  s0 -> s2 [70, 70] { R9316 += 1, R65 += 1, R66 += 1 };
  s0 -> s3 [70, 70] { R9316 += 1, R65 += 1, R66 += 1 };
  s0 -> s1 [71, 65535] { R9316 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 69] { R9316 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R9316 += 1, R65 += 1, R66 += 1 };
  s1 -> s3 [70, 70] { R9316 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [71, 65535] { R9316 += 1, R65 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R9316 += 1, R65 += 1, R66 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 69] { R9318 += 1, R73 += 1, R74 += 1 };
  s0 -> s0 [0, 65535] { R9317 += 1, R9318 += 1 };
  s0 -> s2 [70, 70] { R9318 += 1, R73 += 1, R74 += 1 };
  s0 -> s3 [70, 70] { R9318 += 1, R73 += 1, R74 += 1 };
  s0 -> s1 [71, 65535] { R9318 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 69] { R9318 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R9318 += 1, R73 += 1, R74 += 1 };
  s1 -> s3 [70, 70] { R9318 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [71, 65535] { R9318 += 1, R73 += 1, R74 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R9318 += 1, R73 += 1, R74 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 69] { R9338 += 1 };
  s0 -> s0 [0, 65535] { R9337 += 1, R9338 += 1 };
  s0 -> s2 [70, 70] { R9338 += 1 };
  s0 -> s1 [71, 65535] { R9338 += 1 };
  s1 -> s1 [0, 69] { R9338 += 1 };
  s1 -> s2 [70, 70] { R9338 += 1 };
  s1 -> s1 [71, 65535] { R9338 += 1 };
  s2 -> s2 [0, 65535] { R9338 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R9339 += 1, R9340 += 1 };
  s0 -> s1 [0, 65535] { R9340 += 1, R2 += 1 };
  s1 -> s1 [0, 65535] { R9340 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 69] { R9342 += 1 };
  s0 -> s0 [0, 65535] { R9341 += 1, R9342 += 1 };
  s0 -> s2 [0, 65535] { R9342 += 1, R12 += 1 };
  s0 -> s3 [70, 70] { R9342 += 1 };
  s0 -> s1 [71, 65535] { R9342 += 1 };
  s1 -> s1 [0, 69] { R9342 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [70, 70] { R9342 += 1 };
  s1 -> s1 [71, 65535] { R9342 += 1 };
  s2 -> s1 [0, 69] { R9342 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R9342 += 1, R12 += 1 };
  s2 -> s3 [70, 70] { R9342 += 1 };
  s2 -> s1 [71, 65535] { R9342 += 1 };
  s3 -> s3 [0, 65535] { R9342 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 69] { R9344 += 1, R9282 += 1 };
  s0 -> s2 [0, 65535] { R9344 += 1, R9281 += 1, R9282 += 1 };
  s0 -> s0 [0, 65535] { R9343 += 1, R9344 += 1 };
  s0 -> s1 [71, 65535] { R9344 += 1, R9282 += 1 };
  s1 -> s1 [0, 69] { R9344 += 1, R9282 += 1 };
  s1 -> s1 [0, 65535] { R9344 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [71, 65535] { R9344 += 1, R9282 += 1 };
  s2 -> s1 [0, 69] { R9344 += 1, R9282 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R9344 += 1, R9281 += 1, R9282 += 1 };
  s2 -> s1 [71, 65535] { R9344 += 1, R9282 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R9346 += 1, R9283 += 1, R9284 += 1 };
  s0 -> s2 [0, 65535] { R9346 += 1, R9284 += 1, R20 += 1 };
  s0 -> s0 [0, 65535] { R9345 += 1, R9346 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R9346 += 1, R9283 += 1, R9284 += 1 };
  s1 -> s2 [0, 65535] { R9346 += 1, R9284 += 1, R20 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R9346 += 1 };
  s2 -> s2 [0, 65535] { R9346 += 1, R9284 += 1, R20 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R9346 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 70] { R9348 += 1, R9286 += 1 };
  s0 -> s0 [0, 65535] { R9347 += 1, R9348 += 1 };
  s0 -> s2 [0, 65535] { R9348 += 1, R9285 += 1, R9286 += 1 };
  s0 -> s1 [75, 65535] { R9348 += 1, R9286 += 1 };
  s1 -> s1 [0, 70] { R9348 += 1, R9286 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R9348 += 1 };
  s1 -> s1 [75, 65535] { R9348 += 1, R9286 += 1 };
  s2 -> s1 [0, 70] { R9348 += 1, R9286 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R9348 += 1, R9285 += 1, R9286 += 1 };
  s2 -> s1 [75, 65535] { R9348 += 1, R9286 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R9350 += 1, R9287 += 1, R9288 += 1 };
  s0 -> s0 [0, 65535] { R9349 += 1, R9350 += 1 };
  s0 -> s2 [0, 65535] { R9350 += 1, R9288 += 1, R84 += 1 };
  s1 -> s1 [0, 65535] { R9350 += 1, R9287 += 1, R9288 += 1 };
  s1 -> s2 [0, 65535] { R9350 += 1, R9288 += 1, R84 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R9350 += 1, R9288 += 1, R84 += 1 };
  s2 -> s3 [0, 65535] { R9350 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R9350 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 74] { R9352 += 1, R9290 += 1 };
  s0 -> s2 [0, 65535] { R9352 += 1, R9290 += 1, R86 += 1 };
  s0 -> s0 [0, 65535] { R9351 += 1, R9352 += 1 };
  s0 -> s3 [0, 65535] { R9352 += 1, R9289 += 1, R9290 += 1 };
  s0 -> s1 [76, 65535] { R9352 += 1, R9290 += 1 };
  s1 -> s1 [0, 74] { R9352 += 1, R9290 += 1 };
  s1 -> s1 [0, 65535] { R9352 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [76, 65535] { R9352 += 1, R9290 += 1 };
  s2 -> s1 [0, 74] { R9352 += 1, R9290 += 1 };
  s2 -> s2 [0, 65535] { R9352 += 1, R9290 += 1, R86 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R9352 += 1 };
  s2 -> s1 [76, 65535] { R9352 += 1, R9290 += 1 };
  s3 -> s1 [0, 74] { R9352 += 1, R9290 += 1 };
  s3 -> s2 [0, 65535] { R9352 += 1, R9290 += 1, R86 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R9352 += 1, R9289 += 1, R9290 += 1 };
  s3 -> s1 [76, 65535] { R9352 += 1, R9290 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R9352 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 65535] { R9354 += 1, R9292 += 1 };
  s0 -> s2 [0, 65535] { R9354 += 1, R9291 += 1, R9292 += 1 };
  s0 -> s3 [0, 65535] { R9354 += 1, R9292 += 1, R90 += 1 };
  s0 -> s0 [0, 65535] { R9353 += 1, R9354 += 1 };
  s1 -> s1 [0, 65535] { R9354 += 1, R9292 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R9354 += 1 };
  s2 -> s1 [0, 65535] { R9354 += 1, R9292 += 1 };
  s2 -> s2 [0, 65535] { R9354 += 1, R9291 += 1, R9292 += 1 };
  s2 -> s3 [0, 65535] { R9354 += 1, R9292 += 1, R90 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R9354 += 1, R9292 += 1 };
  s3 -> s3 [0, 65535] { R9354 += 1, R9292 += 1, R90 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R9354 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R9354 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R9356 += 1, R9293 += 1, R9294 += 1 };
  s0 -> s2 [0, 65535] { R9356 += 1, R9294 += 1, R95 += 1, R96 += 1 };
  s0 -> s3 [0, 65535] { R9356 += 1, R9294 += 1, R94 += 1, R95 += 1 };
  s0 -> s0 [0, 65535] { R9355 += 1, R9356 += 1 };
  s1 -> s1 [0, 65535] { R9356 += 1, R9293 += 1, R9294 += 1 };
  s1 -> s2 [0, 65535] { R9356 += 1, R9294 += 1, R95 += 1, R96 += 1 };
  s1 -> s3 [0, 65535] { R9356 += 1, R9294 += 1, R94 += 1, R95 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R9356 += 1, R9294 += 1 };
  s2 -> s4 [0, 65535] { R9356 += 1 };
  s2 -> s2 [0, 65535] { R9356 += 1, R9294 += 1, R95 += 1, R96 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s4 [0, 65535] { R9356 += 1 };
  s3 -> s2 [0, 65535] { R9356 += 1, R9294 += 1, R95 += 1, R96 += 1 };
  s3 -> s3 [0, 65535] { R9356 += 1, R9294 += 1, R94 += 1, R95 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R9356 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9356 += 1, R9294 += 1 };
  s6 -> s4 [0, 65535] { R9356 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 74] { R9358 += 1, R9296 += 1, R6809 += 1 };
  s0 -> s2 [0, 65535] { R9358 += 1, R9296 += 1, R6809 += 1, R6810 += 1 };
  s0 -> s3 [0, 65535] { R9358 += 1, R9295 += 1, R9296 += 1 };
  s0 -> s4 [0, 65535] { R9358 += 1, R9296 += 1 };
  s0 -> s0 [0, 65535] { R9357 += 1, R9358 += 1 };
  s0 -> s1 [76, 65535] { R9358 += 1, R9296 += 1, R6809 += 1 };
  s1 -> s1 [0, 74] { R9358 += 1, R9296 += 1, R6809 += 1 };
  s1 -> s1 [0, 65535] { R9358 += 1, R9296 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R9358 += 1 };
  s1 -> s1 [76, 65535] { R9358 += 1, R9296 += 1, R6809 += 1 };
  s2 -> s1 [0, 74] { R9358 += 1, R9296 += 1, R6809 += 1 };
  s2 -> s2 [0, 65535] { R9358 += 1, R9296 += 1, R6809 += 1, R6810 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R9358 += 1 };
  s2 -> s4 [0, 65535] { R9358 += 1, R9296 += 1 };
  s2 -> s1 [76, 65535] { R9358 += 1, R9296 += 1, R6809 += 1 };
  s3 -> s1 [0, 74] { R9358 += 1, R9296 += 1, R6809 += 1 };
  s3 -> s2 [0, 65535] { R9358 += 1, R9296 += 1, R6809 += 1, R6810 += 1 };
  s3 -> s3 [0, 65535] { R9358 += 1, R9295 += 1, R9296 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s4 [0, 65535] { R9358 += 1, R9296 += 1 };
  s3 -> s1 [76, 65535] { R9358 += 1, R9296 += 1, R6809 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R9358 += 1 };
  s4 -> s4 [0, 65535] { R9358 += 1, R9296 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9358 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 74] { R9360 += 1, R9298 += 1, R9048 += 1, R9050 += 1 };
  s0 -> s2 [0, 65535] { R9360 += 1, R9297 += 1, R9298 += 1 };
  s0 -> s0 [0, 65535] { R9359 += 1, R9360 += 1 };
  s0 -> s3 [75, 75] { R9360 += 1, R9298 += 1, R9048 += 1, R9050 += 1 };
  s0 -> s1 [76, 65535] { R9360 += 1, R9298 += 1, R9048 += 1, R9050 += 1 };
  s1 -> s1 [0, 74] { R9360 += 1, R9298 += 1, R9048 += 1, R9050 += 1 };
  s1 -> s3 [75, 75] { R9360 += 1, R9298 += 1, R9048 += 1, R9050 += 1 };
  s1 -> s1 [76, 65535] { R9360 += 1, R9298 += 1, R9048 += 1, R9050 += 1 };
  s2 -> s1 [0, 74] { R9360 += 1, R9298 += 1, R9048 += 1, R9050 += 1 };
  s2 -> s2 [0, 65535] { R9360 += 1, R9297 += 1, R9298 += 1 };
  s2 -> s3 [75, 75] { R9360 += 1, R9298 += 1, R9048 += 1, R9050 += 1 };
  s2 -> s1 [76, 65535] { R9360 += 1, R9298 += 1, R9048 += 1, R9050 += 1 };
  s3 -> s4 [0, 65535] { R9360 += 1, R9298 += 1 };
  s3 -> s3 [0, 65535] { R9360 += 1, R9298 += 1, R9048 += 1, R9050 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R9360 += 1, R9298 += 1, R9048 += 1 };
  s3 -> s7 [0, 65535] { R9360 += 1 };
  s4 -> s4 [0, 65535] { R9360 += 1, R9298 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s7 [0, 65535] { R9360 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R9360 += 1, R9298 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9360 += 1, R9298 += 1, R9048 += 1 };
  s6 -> s7 [0, 65535] { R9360 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R9360 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 65535] { R9362 += 1, R9299 += 1, R9300 += 1 };
  s0 -> s2 [0, 65535] { R9362 += 1, R9300 += 1, R9276 += 1, R9277 += 1 };
  s0 -> s3 [0, 65535] { R9362 += 1, R9300 += 1, R9277 += 1, R9279 += 1, R9280 += 1 };
  s0 -> s0 [0, 65535] { R9361 += 1, R9362 += 1 };
  s0 -> s4 [0, 65535] { R9362 += 1, R9300 += 1, R9277 += 1, R9278 += 1, R9279 += 1 };
  s1 -> s1 [0, 65535] { R9362 += 1, R9299 += 1, R9300 += 1 };
  s1 -> s2 [0, 65535] { R9362 += 1, R9300 += 1, R9276 += 1, R9277 += 1 };
  s1 -> s3 [0, 65535] { R9362 += 1, R9300 += 1, R9277 += 1, R9279 += 1, R9280 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s4 [0, 65535] { R9362 += 1, R9300 += 1, R9277 += 1, R9278 += 1, R9279 += 1 };
  s2 -> s2 [0, 65535] { R9362 += 1, R9300 += 1, R9276 += 1, R9277 += 1 };
  s2 -> s3 [0, 65535] { R9362 += 1, R9300 += 1, R9277 += 1, R9279 += 1, R9280 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s7 [0, 65535] { R9362 += 1 };
  s2 -> s4 [0, 65535] { R9362 += 1, R9300 += 1, R9277 += 1, R9278 += 1, R9279 += 1 };
  s3 -> s3 [0, 65535] { R9362 += 1, R9300 += 1, R9277 += 1, R9279 += 1, R9280 += 1 };
  s3 -> s5 [0, 65535] { R9362 += 1, R9300 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s8 [0, 65535] { R9362 += 1, R9300 += 1, R9277 += 1 };
  s3 -> s7 [0, 65535] { R9362 += 1 };
  s4 -> s3 [0, 65535] { R9362 += 1, R9300 += 1, R9277 += 1, R9279 += 1, R9280 += 1 };
  s4 -> s5 [0, 65535] { R9362 += 1, R9300 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R9362 += 1 };
  s4 -> s4 [0, 65535] { R9362 += 1, R9300 += 1, R9277 += 1, R9278 += 1, R9279 += 1 };
  s5 -> s5 [0, 65535] { R9362 += 1, R9300 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R9362 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R9362 += 1 };
  s8 -> s5 [0, 65535] { R9362 += 1, R9300 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R9362 += 1, R9300 += 1, R9277 += 1 };
  s8 -> s7 [0, 65535] { R9362 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R9364 += 1, R9319 += 1, R9320 += 1 };
  s0 -> s2 [0, 65535] { R9364 += 1, R9320 += 1, R21 += 1 };
  s0 -> s0 [0, 65535] { R9363 += 1, R9364 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R9364 += 1, R9319 += 1, R9320 += 1 };
  s1 -> s2 [0, 65535] { R9364 += 1, R9320 += 1, R21 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R9364 += 1, R9320 += 1, R21 += 1 };
  s2 -> s4 [0, 65535] { R9364 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R9364 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 69] { R9366 += 1, R9322 += 1 };
  s0 -> s0 [0, 65535] { R9365 += 1, R9366 += 1 };
  s0 -> s2 [0, 65535] { R9366 += 1, R9321 += 1, R9322 += 1 };
  s0 -> s3 [70, 70] { R9366 += 1, R9322 += 1 };
  s0 -> s4 [70, 70] { R9366 += 1, R9322 += 1 };
  s0 -> s5 [75, 75] { R9366 += 1, R9322 += 1 };
  s0 -> s1 [76, 65535] { R9366 += 1, R9322 += 1 };
  s1 -> s1 [0, 69] { R9366 += 1, R9322 += 1 };
  s1 -> s3 [70, 70] { R9366 += 1, R9322 += 1 };
  s1 -> s4 [70, 70] { R9366 += 1, R9322 += 1 };
  s1 -> s5 [75, 75] { R9366 += 1, R9322 += 1 };
  s1 -> s1 [76, 65535] { R9366 += 1, R9322 += 1 };
  s2 -> s1 [0, 69] { R9366 += 1, R9322 += 1 };
  s2 -> s2 [0, 65535] { R9366 += 1, R9321 += 1, R9322 += 1 };
  s2 -> s3 [70, 70] { R9366 += 1, R9322 += 1 };
  s2 -> s4 [70, 70] { R9366 += 1, R9322 += 1 };
  s2 -> s5 [75, 75] { R9366 += 1, R9322 += 1 };
  s2 -> s1 [76, 65535] { R9366 += 1, R9322 += 1 };
  s3 -> s3 [0, 70] { R9366 += 1, R9322 += 1 };
  s3 -> s7 [75, 75] { R9366 += 1, R9322 += 1 };
  s3 -> s3 [76, 65535] { R9366 += 1, R9322 += 1 };
  s5 -> s5 [0, 69] { R9366 += 1, R9322 += 1 };
  s5 -> s5 [0, 65535] { R9366 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [70, 70] { R9366 += 1, R9322 += 1 };
  s5 -> s8 [70, 70] { R9366 += 1, R9322 += 1 };
  s5 -> s5 [75, 65535] { R9366 += 1, R9322 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 70] { R9366 += 1, R9322 += 1 };
  s7 -> s7 [0, 65535] { R9366 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [75, 65535] { R9366 += 1, R9322 += 1 };
  s8 -> s8 [0, 65535] { R9366 += 1 };
  s8 -> s6 [0, 65535];
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 69] { R9368 += 1, R9324 += 1, R83 += 1 };
  s0 -> s2 [0, 65535] { R9368 += 1, R9323 += 1, R9324 += 1 };
  s0 -> s0 [0, 65535] { R9367 += 1, R9368 += 1 };
  s0 -> s3 [70, 70] { R9368 += 1, R9324 += 1, R83 += 1 };
  s0 -> s4 [70, 70] { R9368 += 1, R9324 += 1, R83 += 1 };
  s0 -> s1 [71, 65535] { R9368 += 1, R9324 += 1, R83 += 1 };
  s1 -> s1 [0, 69] { R9368 += 1, R9324 += 1, R83 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R9368 += 1 };
  s1 -> s3 [70, 70] { R9368 += 1, R9324 += 1, R83 += 1 };
  s1 -> s4 [70, 70] { R9368 += 1, R9324 += 1, R83 += 1 };
  s1 -> s1 [71, 65535] { R9368 += 1, R9324 += 1, R83 += 1 };
  s2 -> s1 [0, 69] { R9368 += 1, R9324 += 1, R83 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R9368 += 1, R9323 += 1, R9324 += 1 };
  s2 -> s3 [70, 70] { R9368 += 1, R9324 += 1, R83 += 1 };
  s2 -> s4 [70, 70] { R9368 += 1, R9324 += 1, R83 += 1 };
  s2 -> s1 [71, 65535] { R9368 += 1, R9324 += 1, R83 += 1 };
  s3 -> s6 [0, 65535] { R9368 += 1 };
  s3 -> s3 [0, 65535] { R9368 += 1, R9324 += 1, R83 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R9368 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9368 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 69] { R9370 += 1, R9326 += 1, R85 += 1 };
  s0 -> s2 [0, 65535] { R9370 += 1, R9325 += 1, R9326 += 1 };
  s0 -> s0 [0, 65535] { R9369 += 1, R9370 += 1 };
  s0 -> s3 [70, 70] { R9370 += 1, R9326 += 1, R85 += 1 };
  s0 -> s4 [70, 70] { R9370 += 1, R9326 += 1, R85 += 1 };
  s0 -> s1 [71, 65535] { R9370 += 1, R9326 += 1, R85 += 1 };
  s1 -> s1 [0, 69] { R9370 += 1, R9326 += 1, R85 += 1 };
  s1 -> s1 [0, 65535] { R9370 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [70, 70] { R9370 += 1, R9326 += 1, R85 += 1 };
  s1 -> s4 [70, 70] { R9370 += 1, R9326 += 1, R85 += 1 };
  s1 -> s1 [71, 65535] { R9370 += 1, R9326 += 1, R85 += 1 };
  s2 -> s1 [0, 69] { R9370 += 1, R9326 += 1, R85 += 1 };
  s2 -> s2 [0, 65535] { R9370 += 1, R9325 += 1, R9326 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [70, 70] { R9370 += 1, R9326 += 1, R85 += 1 };
  s2 -> s4 [70, 70] { R9370 += 1, R9326 += 1, R85 += 1 };
  s2 -> s1 [71, 65535] { R9370 += 1, R9326 += 1, R85 += 1 };
  s3 -> s3 [0, 65535] { R9370 += 1, R9326 += 1, R85 += 1 };
  s3 -> s6 [0, 65535] { R9370 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R9370 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9370 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 69] { R9372 += 1, R9328 += 1, R88 += 1 };
  s0 -> s2 [0, 69] { R9372 += 1, R9328 += 1, R87 += 1, R88 += 1 };
  s0 -> s3 [0, 65535] { R9372 += 1, R9327 += 1, R9328 += 1 };
  s0 -> s0 [0, 65535] { R9371 += 1, R9372 += 1 };
  s0 -> s4 [70, 70] { R9372 += 1, R9328 += 1, R87 += 1, R88 += 1 };
  s0 -> s5 [70, 70] { R9372 += 1, R9328 += 1, R88 += 1 };
  s0 -> s6 [70, 70] { R9372 += 1, R9328 += 1, R88 += 1 };
  s0 -> s7 [70, 70] { R9372 += 1, R9328 += 1, R87 += 1, R88 += 1 };
  s0 -> s1 [71, 74] { R9372 += 1, R9328 += 1, R88 += 1 };
  s0 -> s2 [71, 65535] { R9372 += 1, R9328 += 1, R87 += 1, R88 += 1 };
  s0 -> s8 [75, 75] { R9372 += 1, R9328 += 1, R88 += 1 };
  s0 -> s1 [76, 65535] { R9372 += 1, R9328 += 1, R88 += 1 };
  s1 -> s1 [0, 69] { R9372 += 1, R9328 += 1, R88 += 1 };
  s1 -> s5 [70, 70] { R9372 += 1, R9328 += 1, R88 += 1 };
  s1 -> s6 [70, 70] { R9372 += 1, R9328 += 1, R88 += 1 };
  s1 -> s1 [71, 74] { R9372 += 1, R9328 += 1, R88 += 1 };
  s1 -> s8 [75, 75] { R9372 += 1, R9328 += 1, R88 += 1 };
  s1 -> s1 [76, 65535] { R9372 += 1, R9328 += 1, R88 += 1 };
  s2 -> s1 [0, 69] { R9372 += 1, R9328 += 1, R88 += 1 };
  s2 -> s2 [0, 69] { R9372 += 1, R9328 += 1, R87 += 1, R88 += 1 };
  s2 -> s4 [70, 70] { R9372 += 1, R9328 += 1, R87 += 1, R88 += 1 };
  s2 -> s5 [70, 70] { R9372 += 1, R9328 += 1, R88 += 1 };
  s2 -> s6 [70, 70] { R9372 += 1, R9328 += 1, R88 += 1 };
  s2 -> s7 [70, 70] { R9372 += 1, R9328 += 1, R87 += 1, R88 += 1 };
  s2 -> s1 [71, 74] { R9372 += 1, R9328 += 1, R88 += 1 };
  s2 -> s2 [71, 65535] { R9372 += 1, R9328 += 1, R87 += 1, R88 += 1 };
  s2 -> s8 [75, 75] { R9372 += 1, R9328 += 1, R88 += 1 };
  s2 -> s1 [76, 65535] { R9372 += 1, R9328 += 1, R88 += 1 };
  s3 -> s1 [0, 69] { R9372 += 1, R9328 += 1, R88 += 1 };
  s3 -> s2 [0, 69] { R9372 += 1, R9328 += 1, R87 += 1, R88 += 1 };
  s3 -> s3 [0, 65535] { R9372 += 1, R9327 += 1, R9328 += 1 };
  s3 -> s4 [70, 70] { R9372 += 1, R9328 += 1, R87 += 1, R88 += 1 };
  s3 -> s5 [70, 70] { R9372 += 1, R9328 += 1, R88 += 1 };
  s3 -> s6 [70, 70] { R9372 += 1, R9328 += 1, R88 += 1 };
  s3 -> s7 [70, 70] { R9372 += 1, R9328 += 1, R87 += 1, R88 += 1 };
  s3 -> s1 [71, 74] { R9372 += 1, R9328 += 1, R88 += 1 };
  s3 -> s2 [71, 65535] { R9372 += 1, R9328 += 1, R87 += 1, R88 += 1 };
  s3 -> s8 [75, 75] { R9372 += 1, R9328 += 1, R88 += 1 };
  s3 -> s1 [76, 65535] { R9372 += 1, R9328 += 1, R88 += 1 };
  s6 -> s6 [0, 74] { R9372 += 1, R9328 += 1, R88 += 1 };
  s6 -> s11 [75, 75] { R9372 += 1, R9328 += 1, R88 += 1 };
  s6 -> s6 [76, 65535] { R9372 += 1, R9328 += 1, R88 += 1 };
  s7 -> s6 [0, 74] { R9372 += 1, R9328 += 1, R88 += 1 };
  s7 -> s7 [0, 65535] { R9372 += 1, R9328 += 1, R87 += 1, R88 += 1 };
  s7 -> s11 [75, 75] { R9372 += 1, R9328 += 1, R88 += 1 };
  s7 -> s6 [76, 65535] { R9372 += 1, R9328 += 1, R88 += 1 };
  s8 -> s8 [0, 69] { R9372 += 1, R9328 += 1, R88 += 1 };
  s8 -> s8 [0, 65535] { R9372 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [70, 70] { R9372 += 1, R9328 += 1, R88 += 1 };
  s8 -> s11 [70, 70] { R9372 += 1, R9328 += 1, R88 += 1 };
  s8 -> s8 [71, 65535] { R9372 += 1, R9328 += 1, R88 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R9372 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R9372 += 1, R9328 += 1, R88 += 1 };
  s11 -> s12 [0, 65535] { R9372 += 1 };
  s11 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R9372 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 69] { R9374 += 1, R9330 += 1, R91 += 1, R92 += 1 };
  s0 -> s0 [0, 65535] { R9373 += 1, R9374 += 1 };
  s0 -> s2 [0, 65535] { R9374 += 1, R9329 += 1, R9330 += 1 };
  s0 -> s3 [70, 70] { R9374 += 1, R9330 += 1, R91 += 1, R92 += 1 };
  s0 -> s4 [70, 70] { R9374 += 1, R9330 += 1, R91 += 1, R92 += 1 };
  s0 -> s1 [71, 65535] { R9374 += 1, R9330 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 69] { R9374 += 1, R9330 += 1, R91 += 1, R92 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R9374 += 1 };
  s1 -> s3 [70, 70] { R9374 += 1, R9330 += 1, R91 += 1, R92 += 1 };
  s1 -> s4 [70, 70] { R9374 += 1, R9330 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [71, 65535] { R9374 += 1, R9330 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [0, 69] { R9374 += 1, R9330 += 1, R91 += 1, R92 += 1 };
  s2 -> s2 [0, 65535] { R9374 += 1, R9329 += 1, R9330 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [70, 70] { R9374 += 1, R9330 += 1, R91 += 1, R92 += 1 };
  s2 -> s4 [70, 70] { R9374 += 1, R9330 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [71, 65535] { R9374 += 1, R9330 += 1, R91 += 1, R92 += 1 };
  s3 -> s3 [0, 65535] { R9374 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R9374 += 1, R9330 += 1, R91 += 1, R92 += 1 };
  s4 -> s5 [0, 65535] { R9374 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R9374 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 69] { R9376 += 1, R9332 += 1, R6806 += 1, R6807 += 1 };
  s0 -> s2 [0, 69] { R9376 += 1, R9332 += 1, R6805 += 1, R6806 += 1 };
  s0 -> s0 [0, 65535] { R9375 += 1, R9376 += 1 };
  s0 -> s3 [0, 65535] { R9376 += 1, R9331 += 1, R9332 += 1 };
  s0 -> s4 [70, 70] { R9376 += 1, R9332 += 1, R6805 += 1, R6806 += 1 };
  s0 -> s5 [70, 70] { R9376 += 1, R9332 += 1, R6806 += 1, R6807 += 1 };
  s0 -> s6 [70, 70] { R9376 += 1, R9332 += 1, R6805 += 1, R6806 += 1 };
  s0 -> s7 [70, 70] { R9376 += 1, R9332 += 1, R6806 += 1, R6807 += 1 };
  s0 -> s1 [71, 65535] { R9376 += 1, R9332 += 1, R6806 += 1, R6807 += 1 };
  s0 -> s2 [71, 65535] { R9376 += 1, R9332 += 1, R6805 += 1, R6806 += 1 };
  s1 -> s1 [0, 69] { R9376 += 1, R9332 += 1, R6806 += 1, R6807 += 1 };
  s1 -> s1 [0, 65535] { R9376 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s5 [70, 70] { R9376 += 1, R9332 += 1, R6806 += 1, R6807 += 1 };
  s1 -> s7 [70, 70] { R9376 += 1, R9332 += 1, R6806 += 1, R6807 += 1 };
  s1 -> s1 [71, 65535] { R9376 += 1, R9332 += 1, R6806 += 1, R6807 += 1 };
  s2 -> s1 [0, 69] { R9376 += 1, R9332 += 1, R6806 += 1, R6807 += 1 };
  s2 -> s2 [0, 69] { R9376 += 1, R9332 += 1, R6805 += 1, R6806 += 1 };
  s2 -> s4 [70, 70] { R9376 += 1, R9332 += 1, R6805 += 1, R6806 += 1 };
  s2 -> s5 [70, 70] { R9376 += 1, R9332 += 1, R6806 += 1, R6807 += 1 };
  s2 -> s6 [70, 70] { R9376 += 1, R9332 += 1, R6805 += 1, R6806 += 1 };
  s2 -> s7 [70, 70] { R9376 += 1, R9332 += 1, R6806 += 1, R6807 += 1 };
  s2 -> s1 [71, 65535] { R9376 += 1, R9332 += 1, R6806 += 1, R6807 += 1 };
  s2 -> s2 [71, 65535] { R9376 += 1, R9332 += 1, R6805 += 1, R6806 += 1 };
  s3 -> s1 [0, 69] { R9376 += 1, R9332 += 1, R6806 += 1, R6807 += 1 };
  s3 -> s2 [0, 69] { R9376 += 1, R9332 += 1, R6805 += 1, R6806 += 1 };
  s3 -> s3 [0, 65535] { R9376 += 1, R9331 += 1, R9332 += 1 };
  s3 -> s4 [70, 70] { R9376 += 1, R9332 += 1, R6805 += 1, R6806 += 1 };
  s3 -> s5 [70, 70] { R9376 += 1, R9332 += 1, R6806 += 1, R6807 += 1 };
  s3 -> s6 [70, 70] { R9376 += 1, R9332 += 1, R6805 += 1, R6806 += 1 };
  s3 -> s7 [70, 70] { R9376 += 1, R9332 += 1, R6806 += 1, R6807 += 1 };
  s3 -> s1 [71, 65535] { R9376 += 1, R9332 += 1, R6806 += 1, R6807 += 1 };
  s3 -> s2 [71, 65535] { R9376 += 1, R9332 += 1, R6805 += 1, R6806 += 1 };
  s4 -> s4 [0, 65535] { R9376 += 1, R9332 += 1, R6805 += 1, R6806 += 1 };
  s4 -> s5 [0, 65535] { R9376 += 1, R9332 += 1, R6806 += 1, R6807 += 1 };
  s5 -> s9 [0, 65535] { R9376 += 1 };
  s5 -> s5 [0, 65535] { R9376 += 1, R9332 += 1, R6806 += 1, R6807 += 1 };
  s5 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R9376 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R9376 += 1 };
  s9 -> s8 [0, 65535];
  accepting s8, s5, s9, s1, s7;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 69] { R9378 += 1, R9334 += 1, R9044 += 1, R9045 += 1, R9046 += 1 };
  s0 -> s2 [0, 69] { R9378 += 1, R9334 += 1, R9043 += 1, R9044 += 1 };
  s0 -> s3 [0, 69] { R9378 += 1, R9334 += 1, R9044 += 1, R9046 += 1 };
  s0 -> s0 [0, 65535] { R9377 += 1, R9378 += 1 };
  s0 -> s4 [0, 65535] { R9378 += 1, R9333 += 1, R9334 += 1 };
  s0 -> s5 [70, 70] { R9378 += 1, R9334 += 1, R9043 += 1, R9044 += 1 };
  s0 -> s6 [70, 70] { R9378 += 1, R9334 += 1, R9044 += 1, R9045 += 1, R9046 += 1 };
  s0 -> s7 [70, 70] { R9378 += 1, R9334 += 1, R9044 += 1, R9046 += 1 };
  s0 -> s8 [70, 70] { R9378 += 1, R9334 += 1, R9043 += 1, R9044 += 1 };
  s0 -> s9 [70, 70] { R9378 += 1, R9334 += 1, R9044 += 1, R9046 += 1 };
  s0 -> s10 [70, 70] { R9378 += 1, R9334 += 1, R9044 += 1, R9045 += 1, R9046 += 1 };
  s0 -> s3 [71, 74] { R9378 += 1, R9334 += 1, R9044 += 1, R9046 += 1 };
  s0 -> s1 [71, 65535] { R9378 += 1, R9334 += 1, R9044 += 1, R9045 += 1, R9046 += 1 };
  s0 -> s2 [71, 65535] { R9378 += 1, R9334 += 1, R9043 += 1, R9044 += 1 };
  s0 -> s3 [76, 65535] { R9378 += 1, R9334 += 1, R9044 += 1, R9046 += 1 };
  s1 -> s1 [0, 69] { R9378 += 1, R9334 += 1, R9044 += 1, R9045 += 1, R9046 += 1 };
  s1 -> s3 [0, 69] { R9378 += 1, R9334 += 1, R9044 += 1, R9046 += 1 };
  s1 -> s6 [70, 70] { R9378 += 1, R9334 += 1, R9044 += 1, R9045 += 1, R9046 += 1 };
  s1 -> s7 [70, 70] { R9378 += 1, R9334 += 1, R9044 += 1, R9046 += 1 };
  s1 -> s9 [70, 70] { R9378 += 1, R9334 += 1, R9044 += 1, R9046 += 1 };
  s1 -> s10 [70, 70] { R9378 += 1, R9334 += 1, R9044 += 1, R9045 += 1, R9046 += 1 };
  s1 -> s3 [71, 74] { R9378 += 1, R9334 += 1, R9044 += 1, R9046 += 1 };
  s1 -> s1 [71, 65535] { R9378 += 1, R9334 += 1, R9044 += 1, R9045 += 1, R9046 += 1 };
  s1 -> s3 [76, 65535] { R9378 += 1, R9334 += 1, R9044 += 1, R9046 += 1 };
  s2 -> s1 [0, 69] { R9378 += 1, R9334 += 1, R9044 += 1, R9045 += 1, R9046 += 1 };
  s2 -> s2 [0, 69] { R9378 += 1, R9334 += 1, R9043 += 1, R9044 += 1 };
  s2 -> s3 [0, 69] { R9378 += 1, R9334 += 1, R9044 += 1, R9046 += 1 };
  s2 -> s5 [70, 70] { R9378 += 1, R9334 += 1, R9043 += 1, R9044 += 1 };
  s2 -> s6 [70, 70] { R9378 += 1, R9334 += 1, R9044 += 1, R9045 += 1, R9046 += 1 };
  s2 -> s7 [70, 70] { R9378 += 1, R9334 += 1, R9044 += 1, R9046 += 1 };
  s2 -> s8 [70, 70] { R9378 += 1, R9334 += 1, R9043 += 1, R9044 += 1 };
  s2 -> s9 [70, 70] { R9378 += 1, R9334 += 1, R9044 += 1, R9046 += 1 };
  s2 -> s10 [70, 70] { R9378 += 1, R9334 += 1, R9044 += 1, R9045 += 1, R9046 += 1 };
  s2 -> s3 [71, 74] { R9378 += 1, R9334 += 1, R9044 += 1, R9046 += 1 };
  s2 -> s1 [71, 65535] { R9378 += 1, R9334 += 1, R9044 += 1, R9045 += 1, R9046 += 1 };
  s2 -> s2 [71, 65535] { R9378 += 1, R9334 += 1, R9043 += 1, R9044 += 1 };
  s2 -> s3 [76, 65535] { R9378 += 1, R9334 += 1, R9044 += 1, R9046 += 1 };
  s3 -> s3 [0, 69] { R9378 += 1, R9334 += 1, R9044 += 1, R9046 += 1 };
  s3 -> s3 [0, 65535] { R9378 += 1 };
  s3 -> s11 [0, 65535];
  s3 -> s7 [70, 70] { R9378 += 1, R9334 += 1, R9044 += 1, R9046 += 1 };
  s3 -> s9 [70, 70] { R9378 += 1, R9334 += 1, R9044 += 1, R9046 += 1 };
  s3 -> s3 [71, 74] { R9378 += 1, R9334 += 1, R9044 += 1, R9046 += 1 };
  s3 -> s3 [76, 65535] { R9378 += 1, R9334 += 1, R9044 += 1, R9046 += 1 };
  s4 -> s1 [0, 69] { R9378 += 1, R9334 += 1, R9044 += 1, R9045 += 1, R9046 += 1 };
  s4 -> s2 [0, 69] { R9378 += 1, R9334 += 1, R9043 += 1, R9044 += 1 };
  s4 -> s3 [0, 69] { R9378 += 1, R9334 += 1, R9044 += 1, R9046 += 1 };
  s4 -> s4 [0, 65535] { R9378 += 1, R9333 += 1, R9334 += 1 };
  s4 -> s5 [70, 70] { R9378 += 1, R9334 += 1, R9043 += 1, R9044 += 1 };
  s4 -> s6 [70, 70] { R9378 += 1, R9334 += 1, R9044 += 1, R9045 += 1, R9046 += 1 };
  s4 -> s7 [70, 70] { R9378 += 1, R9334 += 1, R9044 += 1, R9046 += 1 };
  s4 -> s8 [70, 70] { R9378 += 1, R9334 += 1, R9043 += 1, R9044 += 1 };
  s4 -> s9 [70, 70] { R9378 += 1, R9334 += 1, R9044 += 1, R9046 += 1 };
  s4 -> s10 [70, 70] { R9378 += 1, R9334 += 1, R9044 += 1, R9045 += 1, R9046 += 1 };
  s4 -> s3 [71, 74] { R9378 += 1, R9334 += 1, R9044 += 1, R9046 += 1 };
  s4 -> s1 [71, 65535] { R9378 += 1, R9334 += 1, R9044 += 1, R9045 += 1, R9046 += 1 };
  s4 -> s2 [71, 65535] { R9378 += 1, R9334 += 1, R9043 += 1, R9044 += 1 };
  s4 -> s3 [76, 65535] { R9378 += 1, R9334 += 1, R9044 += 1, R9046 += 1 };
  s7 -> s7 [0, 65535] { R9378 += 1 };
  s7 -> s11 [0, 65535];
  s8 -> s9 [0, 74] { R9378 += 1, R9334 += 1, R9044 += 1, R9046 += 1 };
  s8 -> s8 [0, 65535] { R9378 += 1, R9334 += 1, R9043 += 1, R9044 += 1 };
  s8 -> s10 [0, 65535] { R9378 += 1, R9334 += 1, R9044 += 1, R9045 += 1, R9046 += 1 };
  s8 -> s9 [76, 65535] { R9378 += 1, R9334 += 1, R9044 += 1, R9046 += 1 };
  s9 -> s9 [0, 74] { R9378 += 1, R9334 += 1, R9044 += 1, R9046 += 1 };
  s9 -> s9 [0, 65535] { R9378 += 1 };
  s9 -> s11 [0, 65535];
  s9 -> s9 [76, 65535] { R9378 += 1, R9334 += 1, R9044 += 1, R9046 += 1 };
  s10 -> s9 [0, 74] { R9378 += 1, R9334 += 1, R9044 += 1, R9046 += 1 };
  s10 -> s10 [0, 65535] { R9378 += 1, R9334 += 1, R9044 += 1, R9045 += 1, R9046 += 1 };
  s10 -> s9 [76, 65535] { R9378 += 1, R9334 += 1, R9044 += 1, R9046 += 1 };
  s11 -> s11 [0, 65535];
  accepting s3, s7, s9, s11;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 69] { R9380 += 1, R9336 += 1, R9271 += 1, R9272 += 1 };
  s0 -> s2 [0, 65535] { R9380 += 1, R9335 += 1, R9336 += 1 };
  s0 -> s0 [0, 65535] { R9379 += 1, R9380 += 1 };
  s0 -> s3 [70, 70] { R9380 += 1, R9336 += 1, R9271 += 1, R9272 += 1 };
  s0 -> s4 [70, 70] { R9380 += 1, R9336 += 1, R9271 += 1, R9272 += 1 };
  s0 -> s1 [71, 65535] { R9380 += 1, R9336 += 1, R9271 += 1, R9272 += 1 };
  s1 -> s1 [0, 69] { R9380 += 1, R9336 += 1, R9271 += 1, R9272 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R9380 += 1 };
  s1 -> s3 [70, 70] { R9380 += 1, R9336 += 1, R9271 += 1, R9272 += 1 };
  s1 -> s4 [70, 70] { R9380 += 1, R9336 += 1, R9271 += 1, R9272 += 1 };
  s1 -> s1 [71, 65535] { R9380 += 1, R9336 += 1, R9271 += 1, R9272 += 1 };
  s2 -> s1 [0, 69] { R9380 += 1, R9336 += 1, R9271 += 1, R9272 += 1 };
  s2 -> s2 [0, 65535] { R9380 += 1, R9335 += 1, R9336 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [70, 70] { R9380 += 1, R9336 += 1, R9271 += 1, R9272 += 1 };
  s2 -> s4 [70, 70] { R9380 += 1, R9336 += 1, R9271 += 1, R9272 += 1 };
  s2 -> s1 [71, 65535] { R9380 += 1, R9336 += 1, R9271 += 1, R9272 += 1 };
  s3 -> s3 [0, 65535] { R9380 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R9380 += 1, R9336 += 1, R9271 += 1, R9272 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R9380 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9380 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [102, 102];
  accepting s1;
};
};
constraint R2 = R9298 && R3 = R9380 && R23 - R9380 = -1 && R24 = R9380 && R25 - R9380 = -1 && R26 = R9380 && R27 = 0 && R28 = 1 && R29 = 0 && R30 = 1 && R45 + R84 + R83 + -1*R9048 + -1*R9044 - R66 = 0 && R49 + R89 + R87 = 0 && R50 + R90 + R88 + -1*R9048 + -1*R9044 - R66 = 0 && R55 + R96 + R93 + -1*R9050 + -1*R9046 - R68 = 0 && R65 + R9047 + R9043 = 0 && R67 + R9049 + R9045 = 0 && R9297 = 0 && R9321 = 0 && R9322 = 0 && R9327 = 0 && R9328 = 0 && R9331 = 0 && R9332 = 0 && R9333 = 0 && R9334 = 0 && R9337 = 0 && R9338 = R9380 && R9339 = 0 && R9340 = R9380 && R9341 = 0 && R9342 = R9380 && R9343 = 0 && R9344 = R9380 && R9345 = 0 && R9346 = R9380 && R9347 = 0 && R9348 = R9380 && R9349 = 0 && R9350 = R9380 && R9351 = 0 && R9352 = R9380 && R9353 = 0 && R9354 = R9380 && R9355 = 0 && R9356 = R9380 && R9357 = 0 && R9358 = R9380 && R9359 = 0 && R9360 = R9380 && R9361 = 0 && R9362 = R9380 && R9363 = 0 && R9364 = R9380 && R9365 = 0 && R9366 = R9380 && R9367 = 0 && R9368 = R9380 && R9369 = 0 && R9370 = R9380 && R9371 = 0 && R9372 = R9380 && R9373 = 0 && R9374 = R9380 && R9375 = 0 && R9376 = R9380 && R9377 = 0 && R9378 = R9380 && R9379 = 0 && R12 < 1 && R15 < 1 && R16 < 1 && R47 + R86 + R85 < 1 && R61 + R6810 + R6807 < 1 && -1*R9048 + -1*R9044 - R66 < 1 && -1*R9050 + -1*R9046 - R68 < 1 && -1 < R9298 && 0 < R9380 && (R53 + R94 + R91 != 0 || R54 + R95 + R92 + -1*R9048 + -1*R9044 - R66 = 0 || R66 + R9048 + R9044 < 1) && (R59 + R6808 + R6805 != 0 || R60 + R6809 + R6806 + -1*R9048 + -1*R9044 - R66 = 0 || R66 + R9048 + R9044 < 1) && (R66 + R9048 + R9044 != 0 || ((R53 + R94 + R91 != 0 || R54 + R95 + R92 = 0 || R68 + R9050 + R9046 < 1) && (R53 + R94 + R91 = 0 || R68 + R9050 + R9046 < 1))) && (R66 + R9048 + R9044 != 0 || ((R59 + R6808 + R6805 != 0 || R60 + R6809 + R6806 = 0 || R68 + R9050 + R9046 < 1) && (R59 + R6808 + R6805 = 0 || R68 + R9050 + R9046 < 1))) && (R66 + R9048 + R9044 != 0 || ((R73 + R9276 + R9271 != 0 || R74 + R9277 + R9272 = 0 || R68 + R9050 + R9046 < 1) && (R73 + R9276 + R9271 = 0 || R68 + R9050 + R9046 < 1))) && (R68 + R9050 + R9046 != 0 || R77 + R9280 + R9275 = 0 || (R75 + R9278 + R9273 = 0 && R76 + R9279 + R9274 = 0)) && (R73 + R9276 + R9271 != 0 || R66 + R9048 + R9044 + -1*R9277 + -1*R9272 - R74 = 0 || R66 + R9048 + R9044 < 1) && (R75 + R9278 + R9273 != 0 || R68 + R9050 + R9046 + -1*R9279 + -1*R9274 - R76 = 0 || R68 + R9050 + R9046 < 1) && (R9281 != 0 || R9282 = R9298 || (R20 = 0 && R9298 = 0)) && (R9283 != 0 || R9284 = R9298 || (R20 = 0 && R9298 = 0)) && (R9285 != 0 || R9286 = R9298 || (R20 = 0 && R9298 = 0)) && (R9287 != 0 || R9288 = R9298 || (R20 = 0 && R9298 = 0)) && (R9289 != 0 || R9290 = R9298 || (R20 = 0 && R9298 = 0)) && (R9291 != 0 || R9292 = R9298 || (R20 = 0 && R9298 = 0)) && (R9293 != 0 || R9294 = R9298 || (R20 = 0 && R9298 = 0)) && (R9295 != 0 || R9296 = R9298 || (R20 = 0 && R9298 = 0)) && (R9299 != 0 || R9298 = R9300 || (R20 = 0 && R9298 = 0)) && (R21 = 0 || (R9319 = 0 && R9320 = 0)) && (R21 = 0 || (R9323 = 0 && R9324 = 0)) && (R21 = 0 || (R9325 = 0 && R9326 = 0)) && (R21 = 0 || (R9329 = 0 && R9330 = 0)) && (R21 = 0 || (R9335 = 0 && R9336 = 0)) && (R22 = 0 || (R9301 = 0 && R9302 = 0)) && (R22 = 0 || (R9303 = 0 && R9304 = 0)) && (R22 = 0 || (R9305 = 0 && R9306 = 0)) && (R22 = 0 || (R9307 = 0 && R9308 = 0)) && (R22 = 0 || (R9309 = 0 && R9310 = 0)) && (R22 = 0 || (R9311 = 0 && R9312 = 0)) && (R22 = 0 || (R9313 = 0 && R9314 = 0)) && (R22 = 0 || (R9315 = 0 && R9316 = 0)) && (R22 = 0 || (R9317 = 0 && R9318 = 0)) && (R53 + R94 + R91 = 0 || R66 + R9048 + R9044 < 1) && (R59 + R6808 + R6805 = 0 || R66 + R9048 + R9044 < 1) && (R73 + R9276 + R9271 = 0 || R66 + R9048 + R9044 < 1) && (R75 + R9278 + R9273 = 0 || R68 + R9050 + R9046 < 1) && (R9281 = 0 || (R20 = 0 && R9298 = 0)) && (R9283 = 0 || (R20 = 0 && R9298 = 0)) && (R9285 = 0 || (R20 = 0 && R9298 = 0)) && (R9287 = 0 || (R20 = 0 && R9298 = 0)) && (R9289 = 0 || (R20 = 0 && R9298 = 0)) && (R9291 = 0 || (R20 = 0 && R9298 = 0)) && (R9293 = 0 || (R20 = 0 && R9298 = 0)) && (R9295 = 0 || (R20 = 0 && R9298 = 0)) && (R9299 = 0 || (R20 = 0 && R9298 = 0));
// End of Parikh automata intersection problem
