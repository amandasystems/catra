// Parikh automata intersection problem, generated by OSTRICH+
counter int R10159, R10160, R10161, R10162, R10163, R10164, R10723, R10724, R10725, R10726, R10727, R10728, R10729, R10730, R10841, R10842, R10843, R10844, R10845, R10846, R10847, R10848, R10849, R10850, R10851, R10852, R10853, R10854, R10855, R10856, R10857, R10858, R10859, R10860, R10861, R10862, R10863, R10864, R10865, R10866, R10867, R10868, R10869, R10870, R10871, R10872, R10873, R10874, R10875, R10876, R10877, R10878, R10879, R10880, R10881, R10882, R10883, R10884, R10885, R10886, R10887, R10888, R10889, R10890, R10891, R10892, R10893, R10894, R10895, R10896, R10897, R10898, R10899, R10900, R10901, R10902, R10903, R10904, R10905, R10906, R10907, R10908, R10909, R10910, R10911, R10912, R10913, R10914, R10915, R10916, R10917, R10918, R10919, R10920, R10921, R10922, R10923, R10924, R10925, R10926, R10927, R10928, R10929, R10930, R10931, R10932, R10933, R10934, R10935, R10936, R10937, R10938, R10939, R10940, R10941, R10942, R10943, R10944, R10945, R10946, R10947, R10948, R10949, R10950, R12, R15, R16, R2, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R4, R45, R47, R49, R5, R50, R53, R54, R55, R59, R60, R61, R65, R66, R67, R68, R73, R74, R75, R76, R77, R83, R84, R85, R86, R87, R88, R89, R90, R91, R92, R93, R94, R95, R96;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [70, 70];
  s0 -> s0 [71, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [70, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R15 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 69];
  s0 -> s0 [0, 65535] { R16 += 1 };
  s0 -> s2 [70, 70];
  s0 -> s1 [71, 65535];
  s1 -> s1 [0, 69];
  s1 -> s2 [70, 70];
  s1 -> s1 [71, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R24 += 1 };
  s0 -> s0 [0, 65535] { R23 += 1, R24 += 1 };
  s0 -> s2 [9, 13] { R24 += 1 };
  s0 -> s1 [14, 31] { R24 += 1 };
  s0 -> s2 [32, 32] { R24 += 1 };
  s0 -> s1 [33, 65535] { R24 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R24 += 1 };
  s2 -> s1 [0, 65535] { R24 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R25 += 1, R26 += 1 };
  s1 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R28 += 1 };
  s0 -> s0 [0, 65535] { R27 += 1, R28 += 1 };
  s0 -> s2 [9, 13] { R28 += 1 };
  s0 -> s1 [14, 31] { R28 += 1 };
  s0 -> s2 [32, 32] { R28 += 1 };
  s0 -> s1 [33, 65535] { R28 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R28 += 1 };
  s2 -> s1 [0, 65535] { R28 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R29 += 1, R30 += 1 };
  s1 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R10872 += 1, R22 += 1 };
  s0 -> s0 [0, 65535] { R10871 += 1, R10872 += 1 };
  s1 -> s1 [0, 65535] { R10872 += 1, R22 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 69] { R10874 += 1 };
  s0 -> s0 [0, 65535] { R10873 += 1, R10874 += 1 };
  s0 -> s2 [70, 70] { R10874 += 1 };
  s0 -> s3 [70, 70] { R10874 += 1 };
  s0 -> s1 [76, 65535] { R10874 += 1 };
  s1 -> s1 [0, 69] { R10874 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R10874 += 1 };
  s1 -> s3 [70, 70] { R10874 += 1 };
  s1 -> s1 [76, 65535] { R10874 += 1 };
  s2 -> s2 [0, 70] { R10874 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [76, 65535] { R10874 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 69] { R10876 += 1, R45 += 1 };
  s0 -> s0 [0, 65535] { R10875 += 1, R10876 += 1 };
  s0 -> s2 [70, 70] { R10876 += 1, R45 += 1 };
  s0 -> s3 [70, 70] { R10876 += 1, R45 += 1 };
  s0 -> s1 [71, 65535] { R10876 += 1, R45 += 1 };
  s1 -> s1 [0, 69] { R10876 += 1, R45 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R10876 += 1, R45 += 1 };
  s1 -> s3 [70, 70] { R10876 += 1, R45 += 1 };
  s1 -> s1 [71, 65535] { R10876 += 1, R45 += 1 };
  s2 -> s2 [0, 65535] { R10876 += 1, R45 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 69] { R10878 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R10877 += 1, R10878 += 1 };
  s0 -> s2 [70, 70] { R10878 += 1, R47 += 1 };
  s0 -> s3 [70, 70] { R10878 += 1, R47 += 1 };
  s0 -> s1 [71, 65535] { R10878 += 1, R47 += 1 };
  s1 -> s1 [0, 69] { R10878 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R10878 += 1, R47 += 1 };
  s1 -> s3 [70, 70] { R10878 += 1, R47 += 1 };
  s1 -> s1 [71, 65535] { R10878 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10878 += 1, R47 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 69] { R10880 += 1, R49 += 1, R50 += 1 };
  s0 -> s0 [0, 65535] { R10879 += 1, R10880 += 1 };
  s0 -> s2 [70, 70] { R10880 += 1, R49 += 1, R50 += 1 };
  s0 -> s3 [70, 70] { R10880 += 1, R49 += 1, R50 += 1 };
  s0 -> s1 [71, 65535] { R10880 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 69] { R10880 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R10880 += 1, R49 += 1, R50 += 1 };
  s1 -> s3 [70, 70] { R10880 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [71, 65535] { R10880 += 1, R49 += 1, R50 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10880 += 1, R49 += 1, R50 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 69] { R10882 += 1, R53 += 1, R54 += 1 };
  s0 -> s0 [0, 65535] { R10881 += 1, R10882 += 1 };
  s0 -> s2 [70, 70] { R10882 += 1, R53 += 1, R54 += 1 };
  s0 -> s3 [70, 70] { R10882 += 1, R53 += 1, R54 += 1 };
  s0 -> s1 [71, 65535] { R10882 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 69] { R10882 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R10882 += 1, R53 += 1, R54 += 1 };
  s1 -> s3 [70, 70] { R10882 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [71, 65535] { R10882 += 1, R53 += 1, R54 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10882 += 1, R53 += 1, R54 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 69] { R10884 += 1, R59 += 1, R60 += 1 };
  s0 -> s0 [0, 65535] { R10883 += 1, R10884 += 1 };
  s0 -> s2 [70, 70] { R10884 += 1, R59 += 1, R60 += 1 };
  s0 -> s3 [70, 70] { R10884 += 1, R59 += 1, R60 += 1 };
  s0 -> s1 [71, 65535] { R10884 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 69] { R10884 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R10884 += 1, R59 += 1, R60 += 1 };
  s1 -> s3 [70, 70] { R10884 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [71, 65535] { R10884 += 1, R59 += 1, R60 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R10884 += 1, R59 += 1, R60 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 69] { R10886 += 1, R65 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R10885 += 1, R10886 += 1 };
  s0 -> s2 [70, 70] { R10886 += 1, R65 += 1, R66 += 1 };
  s0 -> s3 [70, 70] { R10886 += 1, R65 += 1, R66 += 1 };
  s0 -> s1 [71, 65535] { R10886 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 69] { R10886 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R10886 += 1, R65 += 1, R66 += 1 };
  s1 -> s3 [70, 70] { R10886 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [71, 65535] { R10886 += 1, R65 += 1, R66 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10886 += 1, R65 += 1, R66 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 69] { R10888 += 1, R73 += 1, R74 += 1 };
  s0 -> s0 [0, 65535] { R10887 += 1, R10888 += 1 };
  s0 -> s2 [70, 70] { R10888 += 1, R73 += 1, R74 += 1 };
  s0 -> s3 [70, 70] { R10888 += 1, R73 += 1, R74 += 1 };
  s0 -> s1 [71, 65535] { R10888 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 69] { R10888 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R10888 += 1, R73 += 1, R74 += 1 };
  s1 -> s3 [70, 70] { R10888 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [71, 65535] { R10888 += 1, R73 += 1, R74 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10888 += 1, R73 += 1, R74 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 69] { R10908 += 1 };
  s0 -> s0 [0, 65535] { R10907 += 1, R10908 += 1 };
  s0 -> s2 [70, 70] { R10908 += 1 };
  s0 -> s1 [71, 65535] { R10908 += 1 };
  s1 -> s1 [0, 69] { R10908 += 1 };
  s1 -> s2 [70, 70] { R10908 += 1 };
  s1 -> s1 [71, 65535] { R10908 += 1 };
  s2 -> s2 [0, 65535] { R10908 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R10910 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R10909 += 1, R10910 += 1 };
  s1 -> s1 [0, 65535] { R10910 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 69] { R10912 += 1 };
  s0 -> s0 [0, 65535] { R10911 += 1, R10912 += 1 };
  s0 -> s2 [0, 65535] { R10912 += 1, R12 += 1 };
  s0 -> s3 [70, 70] { R10912 += 1 };
  s0 -> s1 [71, 65535] { R10912 += 1 };
  s1 -> s1 [0, 69] { R10912 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [70, 70] { R10912 += 1 };
  s1 -> s1 [71, 65535] { R10912 += 1 };
  s2 -> s1 [0, 69] { R10912 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10912 += 1, R12 += 1 };
  s2 -> s3 [70, 70] { R10912 += 1 };
  s2 -> s1 [71, 65535] { R10912 += 1 };
  s3 -> s3 [0, 65535] { R10912 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 69] { R10914 += 1, R10852 += 1 };
  s0 -> s0 [0, 65535] { R10913 += 1, R10914 += 1 };
  s0 -> s2 [0, 65535] { R10914 += 1, R10851 += 1, R10852 += 1 };
  s0 -> s1 [71, 65535] { R10914 += 1, R10852 += 1 };
  s1 -> s1 [0, 69] { R10914 += 1, R10852 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R10914 += 1 };
  s1 -> s1 [71, 65535] { R10914 += 1, R10852 += 1 };
  s2 -> s1 [0, 69] { R10914 += 1, R10852 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10914 += 1, R10851 += 1, R10852 += 1 };
  s2 -> s1 [71, 65535] { R10914 += 1, R10852 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R10916 += 1, R10854 += 1, R20 += 1 };
  s0 -> s2 [0, 65535] { R10916 += 1, R10853 += 1, R10854 += 1 };
  s0 -> s0 [0, 65535] { R10915 += 1, R10916 += 1 };
  s1 -> s4 [0, 65535] { R10916 += 1 };
  s1 -> s1 [0, 65535] { R10916 += 1, R10854 += 1, R20 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10916 += 1, R10854 += 1, R20 += 1 };
  s2 -> s2 [0, 65535] { R10916 += 1, R10853 += 1, R10854 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10916 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 70] { R10918 += 1, R10856 += 1 };
  s0 -> s2 [0, 65535] { R10918 += 1, R10855 += 1, R10856 += 1 };
  s0 -> s0 [0, 65535] { R10917 += 1, R10918 += 1 };
  s0 -> s1 [75, 65535] { R10918 += 1, R10856 += 1 };
  s1 -> s1 [0, 70] { R10918 += 1, R10856 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R10918 += 1 };
  s1 -> s1 [75, 65535] { R10918 += 1, R10856 += 1 };
  s2 -> s1 [0, 70] { R10918 += 1, R10856 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10918 += 1, R10855 += 1, R10856 += 1 };
  s2 -> s1 [75, 65535] { R10918 += 1, R10856 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R10920 += 1, R10858 += 1, R84 += 1 };
  s0 -> s0 [0, 65535] { R10919 += 1, R10920 += 1 };
  s0 -> s2 [0, 65535] { R10920 += 1, R10857 += 1, R10858 += 1 };
  s1 -> s1 [0, 65535] { R10920 += 1, R10858 += 1, R84 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R10920 += 1 };
  s2 -> s1 [0, 65535] { R10920 += 1, R10858 += 1, R84 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10920 += 1, R10857 += 1, R10858 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10920 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 74] { R10922 += 1, R10860 += 1 };
  s0 -> s2 [0, 65535] { R10922 += 1, R10860 += 1, R86 += 1 };
  s0 -> s0 [0, 65535] { R10921 += 1, R10922 += 1 };
  s0 -> s3 [0, 65535] { R10922 += 1, R10859 += 1, R10860 += 1 };
  s0 -> s1 [76, 65535] { R10922 += 1, R10860 += 1 };
  s1 -> s1 [0, 74] { R10922 += 1, R10860 += 1 };
  s1 -> s1 [0, 65535] { R10922 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [76, 65535] { R10922 += 1, R10860 += 1 };
  s2 -> s1 [0, 74] { R10922 += 1, R10860 += 1 };
  s2 -> s5 [0, 65535] { R10922 += 1 };
  s2 -> s2 [0, 65535] { R10922 += 1, R10860 += 1, R86 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [76, 65535] { R10922 += 1, R10860 += 1 };
  s3 -> s1 [0, 74] { R10922 += 1, R10860 += 1 };
  s3 -> s2 [0, 65535] { R10922 += 1, R10860 += 1, R86 += 1 };
  s3 -> s3 [0, 65535] { R10922 += 1, R10859 += 1, R10860 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [76, 65535] { R10922 += 1, R10860 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10922 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 65535] { R10924 += 1, R10862 += 1, R90 += 1 };
  s0 -> s0 [0, 65535] { R10923 += 1, R10924 += 1 };
  s0 -> s2 [0, 65535] { R10924 += 1, R10862 += 1 };
  s0 -> s3 [0, 65535] { R10924 += 1, R10861 += 1, R10862 += 1 };
  s1 -> s1 [0, 65535] { R10924 += 1, R10862 += 1, R90 += 1 };
  s1 -> s5 [0, 65535] { R10924 += 1 };
  s1 -> s2 [0, 65535] { R10924 += 1, R10862 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R10924 += 1 };
  s2 -> s2 [0, 65535] { R10924 += 1, R10862 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R10924 += 1, R10862 += 1, R90 += 1 };
  s3 -> s2 [0, 65535] { R10924 += 1, R10862 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10924 += 1, R10861 += 1, R10862 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10924 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R10926 += 1, R10864 += 1, R95 += 1, R96 += 1 };
  s0 -> s2 [0, 65535] { R10926 += 1, R10863 += 1, R10864 += 1 };
  s0 -> s3 [0, 65535] { R10926 += 1, R10864 += 1, R94 += 1, R95 += 1 };
  s0 -> s0 [0, 65535] { R10925 += 1, R10926 += 1 };
  s1 -> s6 [0, 65535] { R10926 += 1, R10864 += 1 };
  s1 -> s4 [0, 65535] { R10926 += 1 };
  s1 -> s1 [0, 65535] { R10926 += 1, R10864 += 1, R95 += 1, R96 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R10926 += 1, R10864 += 1, R95 += 1, R96 += 1 };
  s2 -> s2 [0, 65535] { R10926 += 1, R10863 += 1, R10864 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R10926 += 1, R10864 += 1, R94 += 1, R95 += 1 };
  s3 -> s4 [0, 65535] { R10926 += 1 };
  s3 -> s1 [0, 65535] { R10926 += 1, R10864 += 1, R95 += 1, R96 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10926 += 1, R10864 += 1, R94 += 1, R95 += 1 };
  s4 -> s4 [0, 65535] { R10926 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10926 += 1, R10864 += 1 };
  s6 -> s4 [0, 65535] { R10926 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 65535] { R10928 += 1, R10866 += 1 };
  s0 -> s0 [0, 65535] { R10927 += 1, R10928 += 1 };
  s0 -> s2 [0, 65535] { R10928 += 1, R10865 += 1, R10866 += 1 };
  s1 -> s4 [0, 65535] { R10928 += 1 };
  s1 -> s1 [0, 65535] { R10928 += 1, R10866 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10928 += 1, R10866 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10928 += 1, R10865 += 1, R10866 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10928 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R10930 += 1, R10867 += 1, R10868 += 1 };
  s0 -> s2 [0, 65535] { R10930 += 1, R10868 += 1 };
  s0 -> s0 [0, 65535] { R10929 += 1, R10930 += 1 };
  s0 -> s3 [0, 65535] { R10930 += 1, R10868 += 1, R10728 += 1 };
  s1 -> s1 [0, 65535] { R10930 += 1, R10867 += 1, R10868 += 1 };
  s1 -> s2 [0, 65535] { R10930 += 1, R10868 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s3 [0, 65535] { R10930 += 1, R10868 += 1, R10728 += 1 };
  s2 -> s2 [0, 65535] { R10930 += 1, R10868 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R10930 += 1 };
  s3 -> s2 [0, 65535] { R10930 += 1, R10868 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R10930 += 1 };
  s3 -> s3 [0, 65535] { R10930 += 1, R10868 += 1, R10728 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10930 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s0 [0, 65535] { R10931 += 1, R10932 += 1 };
  s0 -> s1 [0, 65535] { R10932 += 1, R10870 += 1 };
  s0 -> s2 [0, 65535] { R10932 += 1, R10869 += 1, R10870 += 1 };
  s1 -> s1 [0, 65535] { R10932 += 1, R10870 += 1 };
  s1 -> s4 [0, 65535] { R10932 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10932 += 1, R10870 += 1 };
  s2 -> s2 [0, 65535] { R10932 += 1, R10869 += 1, R10870 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10932 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R10934 += 1, R10889 += 1, R10890 += 1 };
  s0 -> s2 [0, 65535] { R10934 += 1, R10890 += 1, R21 += 1 };
  s0 -> s0 [0, 65535] { R10933 += 1, R10934 += 1 };
  s1 -> s1 [0, 65535] { R10934 += 1, R10889 += 1, R10890 += 1 };
  s1 -> s2 [0, 65535] { R10934 += 1, R10890 += 1, R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10934 += 1, R10890 += 1, R21 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R10934 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10934 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 69] { R10936 += 1, R10892 += 1 };
  s0 -> s2 [0, 65535] { R10936 += 1, R10891 += 1, R10892 += 1 };
  s0 -> s0 [0, 65535] { R10935 += 1, R10936 += 1 };
  s0 -> s3 [70, 70] { R10936 += 1, R10892 += 1 };
  s0 -> s4 [70, 70] { R10936 += 1, R10892 += 1 };
  s0 -> s5 [75, 75] { R10936 += 1, R10892 += 1 };
  s0 -> s1 [76, 65535] { R10936 += 1, R10892 += 1 };
  s1 -> s1 [0, 69] { R10936 += 1, R10892 += 1 };
  s1 -> s3 [70, 70] { R10936 += 1, R10892 += 1 };
  s1 -> s4 [70, 70] { R10936 += 1, R10892 += 1 };
  s1 -> s5 [75, 75] { R10936 += 1, R10892 += 1 };
  s1 -> s1 [76, 65535] { R10936 += 1, R10892 += 1 };
  s2 -> s1 [0, 69] { R10936 += 1, R10892 += 1 };
  s2 -> s2 [0, 65535] { R10936 += 1, R10891 += 1, R10892 += 1 };
  s2 -> s3 [70, 70] { R10936 += 1, R10892 += 1 };
  s2 -> s4 [70, 70] { R10936 += 1, R10892 += 1 };
  s2 -> s5 [75, 75] { R10936 += 1, R10892 += 1 };
  s2 -> s1 [76, 65535] { R10936 += 1, R10892 += 1 };
  s3 -> s3 [0, 70] { R10936 += 1, R10892 += 1 };
  s3 -> s8 [75, 75] { R10936 += 1, R10892 += 1 };
  s3 -> s3 [76, 65535] { R10936 += 1, R10892 += 1 };
  s5 -> s5 [0, 69] { R10936 += 1, R10892 += 1 };
  s5 -> s5 [0, 65535] { R10936 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [70, 70] { R10936 += 1, R10892 += 1 };
  s5 -> s8 [70, 70] { R10936 += 1, R10892 += 1 };
  s5 -> s5 [75, 65535] { R10936 += 1, R10892 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R10936 += 1 };
  s8 -> s8 [0, 70] { R10936 += 1, R10892 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R10936 += 1 };
  s8 -> s8 [75, 65535] { R10936 += 1, R10892 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 69] { R10938 += 1, R10894 += 1, R83 += 1 };
  s0 -> s2 [0, 65535] { R10938 += 1, R10893 += 1, R10894 += 1 };
  s0 -> s0 [0, 65535] { R10937 += 1, R10938 += 1 };
  s0 -> s3 [70, 70] { R10938 += 1, R10894 += 1, R83 += 1 };
  s0 -> s4 [70, 70] { R10938 += 1, R10894 += 1, R83 += 1 };
  s0 -> s1 [71, 65535] { R10938 += 1, R10894 += 1, R83 += 1 };
  s1 -> s1 [0, 69] { R10938 += 1, R10894 += 1, R83 += 1 };
  s1 -> s1 [0, 65535] { R10938 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [70, 70] { R10938 += 1, R10894 += 1, R83 += 1 };
  s1 -> s4 [70, 70] { R10938 += 1, R10894 += 1, R83 += 1 };
  s1 -> s1 [71, 65535] { R10938 += 1, R10894 += 1, R83 += 1 };
  s2 -> s1 [0, 69] { R10938 += 1, R10894 += 1, R83 += 1 };
  s2 -> s2 [0, 65535] { R10938 += 1, R10893 += 1, R10894 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [70, 70] { R10938 += 1, R10894 += 1, R83 += 1 };
  s2 -> s4 [70, 70] { R10938 += 1, R10894 += 1, R83 += 1 };
  s2 -> s1 [71, 65535] { R10938 += 1, R10894 += 1, R83 += 1 };
  s3 -> s3 [0, 65535] { R10938 += 1, R10894 += 1, R83 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R10938 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10938 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10938 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 69] { R10940 += 1, R10896 += 1, R85 += 1 };
  s0 -> s2 [0, 65535] { R10940 += 1, R10895 += 1, R10896 += 1 };
  s0 -> s0 [0, 65535] { R10939 += 1, R10940 += 1 };
  s0 -> s3 [70, 70] { R10940 += 1, R10896 += 1, R85 += 1 };
  s0 -> s4 [70, 70] { R10940 += 1, R10896 += 1, R85 += 1 };
  s0 -> s1 [71, 65535] { R10940 += 1, R10896 += 1, R85 += 1 };
  s1 -> s1 [0, 69] { R10940 += 1, R10896 += 1, R85 += 1 };
  s1 -> s1 [0, 65535] { R10940 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [70, 70] { R10940 += 1, R10896 += 1, R85 += 1 };
  s1 -> s4 [70, 70] { R10940 += 1, R10896 += 1, R85 += 1 };
  s1 -> s1 [71, 65535] { R10940 += 1, R10896 += 1, R85 += 1 };
  s2 -> s1 [0, 69] { R10940 += 1, R10896 += 1, R85 += 1 };
  s2 -> s2 [0, 65535] { R10940 += 1, R10895 += 1, R10896 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [70, 70] { R10940 += 1, R10896 += 1, R85 += 1 };
  s2 -> s4 [70, 70] { R10940 += 1, R10896 += 1, R85 += 1 };
  s2 -> s1 [71, 65535] { R10940 += 1, R10896 += 1, R85 += 1 };
  s3 -> s3 [0, 65535] { R10940 += 1, R10896 += 1, R85 += 1 };
  s3 -> s6 [0, 65535] { R10940 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10940 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10940 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 69] { R10942 += 1, R10898 += 1, R87 += 1, R88 += 1 };
  s0 -> s2 [0, 69] { R10942 += 1, R10898 += 1, R88 += 1 };
  s0 -> s3 [0, 65535] { R10942 += 1, R10897 += 1, R10898 += 1 };
  s0 -> s0 [0, 65535] { R10941 += 1, R10942 += 1 };
  s0 -> s4 [70, 70] { R10942 += 1, R10898 += 1, R87 += 1, R88 += 1 };
  s0 -> s5 [70, 70] { R10942 += 1, R10898 += 1, R87 += 1, R88 += 1 };
  s0 -> s6 [70, 70] { R10942 += 1, R10898 += 1, R88 += 1 };
  s0 -> s7 [70, 70] { R10942 += 1, R10898 += 1, R88 += 1 };
  s0 -> s2 [71, 74] { R10942 += 1, R10898 += 1, R88 += 1 };
  s0 -> s1 [71, 65535] { R10942 += 1, R10898 += 1, R87 += 1, R88 += 1 };
  s0 -> s8 [75, 75] { R10942 += 1, R10898 += 1, R88 += 1 };
  s0 -> s2 [76, 65535] { R10942 += 1, R10898 += 1, R88 += 1 };
  s1 -> s1 [0, 69] { R10942 += 1, R10898 += 1, R87 += 1, R88 += 1 };
  s1 -> s2 [0, 69] { R10942 += 1, R10898 += 1, R88 += 1 };
  s1 -> s4 [70, 70] { R10942 += 1, R10898 += 1, R87 += 1, R88 += 1 };
  s1 -> s5 [70, 70] { R10942 += 1, R10898 += 1, R87 += 1, R88 += 1 };
  s1 -> s6 [70, 70] { R10942 += 1, R10898 += 1, R88 += 1 };
  s1 -> s7 [70, 70] { R10942 += 1, R10898 += 1, R88 += 1 };
  s1 -> s2 [71, 74] { R10942 += 1, R10898 += 1, R88 += 1 };
  s1 -> s1 [71, 65535] { R10942 += 1, R10898 += 1, R87 += 1, R88 += 1 };
  s1 -> s8 [75, 75] { R10942 += 1, R10898 += 1, R88 += 1 };
  s1 -> s2 [76, 65535] { R10942 += 1, R10898 += 1, R88 += 1 };
  s2 -> s2 [0, 69] { R10942 += 1, R10898 += 1, R88 += 1 };
  s2 -> s6 [70, 70] { R10942 += 1, R10898 += 1, R88 += 1 };
  s2 -> s7 [70, 70] { R10942 += 1, R10898 += 1, R88 += 1 };
  s2 -> s2 [71, 74] { R10942 += 1, R10898 += 1, R88 += 1 };
  s2 -> s8 [75, 75] { R10942 += 1, R10898 += 1, R88 += 1 };
  s2 -> s2 [76, 65535] { R10942 += 1, R10898 += 1, R88 += 1 };
  s3 -> s1 [0, 69] { R10942 += 1, R10898 += 1, R87 += 1, R88 += 1 };
  s3 -> s2 [0, 69] { R10942 += 1, R10898 += 1, R88 += 1 };
  s3 -> s3 [0, 65535] { R10942 += 1, R10897 += 1, R10898 += 1 };
  s3 -> s4 [70, 70] { R10942 += 1, R10898 += 1, R87 += 1, R88 += 1 };
  s3 -> s5 [70, 70] { R10942 += 1, R10898 += 1, R87 += 1, R88 += 1 };
  s3 -> s6 [70, 70] { R10942 += 1, R10898 += 1, R88 += 1 };
  s3 -> s7 [70, 70] { R10942 += 1, R10898 += 1, R88 += 1 };
  s3 -> s2 [71, 74] { R10942 += 1, R10898 += 1, R88 += 1 };
  s3 -> s1 [71, 65535] { R10942 += 1, R10898 += 1, R87 += 1, R88 += 1 };
  s3 -> s8 [75, 75] { R10942 += 1, R10898 += 1, R88 += 1 };
  s3 -> s2 [76, 65535] { R10942 += 1, R10898 += 1, R88 += 1 };
  s4 -> s6 [0, 74] { R10942 += 1, R10898 += 1, R88 += 1 };
  s4 -> s4 [0, 65535] { R10942 += 1, R10898 += 1, R87 += 1, R88 += 1 };
  s4 -> s11 [75, 75] { R10942 += 1, R10898 += 1, R88 += 1 };
  s4 -> s6 [76, 65535] { R10942 += 1, R10898 += 1, R88 += 1 };
  s6 -> s6 [0, 74] { R10942 += 1, R10898 += 1, R88 += 1 };
  s6 -> s11 [75, 75] { R10942 += 1, R10898 += 1, R88 += 1 };
  s6 -> s6 [76, 65535] { R10942 += 1, R10898 += 1, R88 += 1 };
  s8 -> s8 [0, 69] { R10942 += 1, R10898 += 1, R88 += 1 };
  s8 -> s8 [0, 65535] { R10942 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [70, 70] { R10942 += 1, R10898 += 1, R88 += 1 };
  s8 -> s11 [70, 70] { R10942 += 1, R10898 += 1, R88 += 1 };
  s8 -> s8 [71, 65535] { R10942 += 1, R10898 += 1, R88 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R10942 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s12 [0, 65535] { R10942 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R10942 += 1, R10898 += 1, R88 += 1 };
  s12 -> s12 [0, 65535] { R10942 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 69] { R10944 += 1, R10900 += 1, R91 += 1, R92 += 1 };
  s0 -> s0 [0, 65535] { R10943 += 1, R10944 += 1 };
  s0 -> s2 [0, 65535] { R10944 += 1, R10899 += 1, R10900 += 1 };
  s0 -> s3 [70, 70] { R10944 += 1, R10900 += 1, R91 += 1, R92 += 1 };
  s0 -> s4 [70, 70] { R10944 += 1, R10900 += 1, R91 += 1, R92 += 1 };
  s0 -> s1 [71, 65535] { R10944 += 1, R10900 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 69] { R10944 += 1, R10900 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 65535] { R10944 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [70, 70] { R10944 += 1, R10900 += 1, R91 += 1, R92 += 1 };
  s1 -> s4 [70, 70] { R10944 += 1, R10900 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [71, 65535] { R10944 += 1, R10900 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [0, 69] { R10944 += 1, R10900 += 1, R91 += 1, R92 += 1 };
  s2 -> s2 [0, 65535] { R10944 += 1, R10899 += 1, R10900 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [70, 70] { R10944 += 1, R10900 += 1, R91 += 1, R92 += 1 };
  s2 -> s4 [70, 70] { R10944 += 1, R10900 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [71, 65535] { R10944 += 1, R10900 += 1, R91 += 1, R92 += 1 };
  s3 -> s3 [0, 65535] { R10944 += 1, R10900 += 1, R91 += 1, R92 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R10944 += 1 };
  s4 -> s4 [0, 65535] { R10944 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10944 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 69] { R10946 += 1, R10902 += 1, R10160 += 1, R10161 += 1 };
  s0 -> s2 [0, 69] { R10946 += 1, R10902 += 1, R10159 += 1, R10160 += 1 };
  s0 -> s3 [0, 65535] { R10946 += 1, R10901 += 1, R10902 += 1 };
  s0 -> s0 [0, 65535] { R10945 += 1, R10946 += 1 };
  s0 -> s4 [70, 70] { R10946 += 1, R10902 += 1, R10159 += 1, R10160 += 1 };
  s0 -> s5 [70, 70] { R10946 += 1, R10902 += 1, R10160 += 1, R10161 += 1 };
  s0 -> s6 [70, 70] { R10946 += 1, R10902 += 1, R10159 += 1, R10160 += 1 };
  s0 -> s7 [70, 70] { R10946 += 1, R10902 += 1, R10160 += 1, R10161 += 1 };
  s0 -> s1 [71, 65535] { R10946 += 1, R10902 += 1, R10160 += 1, R10161 += 1 };
  s0 -> s2 [71, 65535] { R10946 += 1, R10902 += 1, R10159 += 1, R10160 += 1 };
  s1 -> s1 [0, 69] { R10946 += 1, R10902 += 1, R10160 += 1, R10161 += 1 };
  s1 -> s11 [0, 69] { R10946 += 1, R10902 += 1 };
  s1 -> s8 [70, 70] { R10946 += 1, R10902 += 1 };
  s1 -> s12 [70, 70] { R10946 += 1, R10902 += 1 };
  s1 -> s5 [70, 70] { R10946 += 1, R10902 += 1, R10160 += 1, R10161 += 1 };
  s1 -> s7 [70, 70] { R10946 += 1, R10902 += 1, R10160 += 1, R10161 += 1 };
  s1 -> s1 [71, 65535] { R10946 += 1, R10902 += 1, R10160 += 1, R10161 += 1 };
  s1 -> s11 [71, 65535] { R10946 += 1, R10902 += 1 };
  s2 -> s1 [0, 69] { R10946 += 1, R10902 += 1, R10160 += 1, R10161 += 1 };
  s2 -> s2 [0, 69] { R10946 += 1, R10902 += 1, R10159 += 1, R10160 += 1 };
  s2 -> s4 [70, 70] { R10946 += 1, R10902 += 1, R10159 += 1, R10160 += 1 };
  s2 -> s5 [70, 70] { R10946 += 1, R10902 += 1, R10160 += 1, R10161 += 1 };
  s2 -> s6 [70, 70] { R10946 += 1, R10902 += 1, R10159 += 1, R10160 += 1 };
  s2 -> s7 [70, 70] { R10946 += 1, R10902 += 1, R10160 += 1, R10161 += 1 };
  s2 -> s1 [71, 65535] { R10946 += 1, R10902 += 1, R10160 += 1, R10161 += 1 };
  s2 -> s2 [71, 65535] { R10946 += 1, R10902 += 1, R10159 += 1, R10160 += 1 };
  s3 -> s1 [0, 69] { R10946 += 1, R10902 += 1, R10160 += 1, R10161 += 1 };
  s3 -> s2 [0, 69] { R10946 += 1, R10902 += 1, R10159 += 1, R10160 += 1 };
  s3 -> s3 [0, 65535] { R10946 += 1, R10901 += 1, R10902 += 1 };
  s3 -> s4 [70, 70] { R10946 += 1, R10902 += 1, R10159 += 1, R10160 += 1 };
  s3 -> s5 [70, 70] { R10946 += 1, R10902 += 1, R10160 += 1, R10161 += 1 };
  s3 -> s6 [70, 70] { R10946 += 1, R10902 += 1, R10159 += 1, R10160 += 1 };
  s3 -> s7 [70, 70] { R10946 += 1, R10902 += 1, R10160 += 1, R10161 += 1 };
  s3 -> s1 [71, 65535] { R10946 += 1, R10902 += 1, R10160 += 1, R10161 += 1 };
  s3 -> s2 [71, 65535] { R10946 += 1, R10902 += 1, R10159 += 1, R10160 += 1 };
  s5 -> s8 [0, 65535] { R10946 += 1, R10902 += 1 };
  s5 -> s5 [0, 65535] { R10946 += 1, R10902 += 1, R10160 += 1, R10161 += 1 };
  s6 -> s5 [0, 65535] { R10946 += 1, R10902 += 1, R10160 += 1, R10161 += 1 };
  s6 -> s6 [0, 65535] { R10946 += 1, R10902 += 1, R10159 += 1, R10160 += 1 };
  s8 -> s8 [0, 65535] { R10946 += 1, R10902 += 1 };
  s8 -> s9 [0, 65535] { R10946 += 1 };
  s8 -> s10 [0, 65535];
  s9 -> s9 [0, 65535] { R10946 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s11 [0, 69] { R10946 += 1, R10902 += 1 };
  s11 -> s11 [0, 65535] { R10946 += 1 };
  s11 -> s10 [0, 65535];
  s11 -> s8 [70, 70] { R10946 += 1, R10902 += 1 };
  s11 -> s12 [70, 70] { R10946 += 1, R10902 += 1 };
  s11 -> s11 [71, 65535] { R10946 += 1, R10902 += 1 };
  s12 -> s12 [0, 65535] { R10946 += 1 };
  s12 -> s10 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 69] { R10948 += 1, R10904 += 1, R10724 += 1, R10725 += 1, R10726 += 1 };
  s0 -> s2 [0, 69] { R10948 += 1, R10904 += 1, R10724 += 1, R10726 += 1 };
  s0 -> s3 [0, 69] { R10948 += 1, R10904 += 1, R10723 += 1, R10724 += 1 };
  s0 -> s4 [0, 65535] { R10948 += 1, R10903 += 1, R10904 += 1 };
  s0 -> s0 [0, 65535] { R10947 += 1, R10948 += 1 };
  s0 -> s5 [70, 70] { R10948 += 1, R10904 += 1, R10724 += 1, R10726 += 1 };
  s0 -> s6 [70, 70] { R10948 += 1, R10904 += 1, R10724 += 1, R10726 += 1 };
  s0 -> s7 [70, 70] { R10948 += 1, R10904 += 1, R10723 += 1, R10724 += 1 };
  s0 -> s8 [70, 70] { R10948 += 1, R10904 += 1, R10724 += 1, R10725 += 1, R10726 += 1 };
  s0 -> s9 [70, 70] { R10948 += 1, R10904 += 1, R10723 += 1, R10724 += 1 };
  s0 -> s10 [70, 70] { R10948 += 1, R10904 += 1, R10724 += 1, R10725 += 1, R10726 += 1 };
  s0 -> s2 [71, 74] { R10948 += 1, R10904 += 1, R10724 += 1, R10726 += 1 };
  s0 -> s1 [71, 65535] { R10948 += 1, R10904 += 1, R10724 += 1, R10725 += 1, R10726 += 1 };
  s0 -> s3 [71, 65535] { R10948 += 1, R10904 += 1, R10723 += 1, R10724 += 1 };
  s0 -> s11 [75, 75] { R10948 += 1, R10904 += 1, R10724 += 1, R10726 += 1 };
  s0 -> s2 [76, 65535] { R10948 += 1, R10904 += 1, R10724 += 1, R10726 += 1 };
  s1 -> s1 [0, 69] { R10948 += 1, R10904 += 1, R10724 += 1, R10725 += 1, R10726 += 1 };
  s1 -> s2 [0, 69] { R10948 += 1, R10904 += 1, R10724 += 1, R10726 += 1 };
  s1 -> s5 [70, 70] { R10948 += 1, R10904 += 1, R10724 += 1, R10726 += 1 };
  s1 -> s6 [70, 70] { R10948 += 1, R10904 += 1, R10724 += 1, R10726 += 1 };
  s1 -> s8 [70, 70] { R10948 += 1, R10904 += 1, R10724 += 1, R10725 += 1, R10726 += 1 };
  s1 -> s10 [70, 70] { R10948 += 1, R10904 += 1, R10724 += 1, R10725 += 1, R10726 += 1 };
  s1 -> s2 [71, 74] { R10948 += 1, R10904 += 1, R10724 += 1, R10726 += 1 };
  s1 -> s1 [71, 65535] { R10948 += 1, R10904 += 1, R10724 += 1, R10725 += 1, R10726 += 1 };
  s1 -> s11 [75, 75] { R10948 += 1, R10904 += 1, R10724 += 1, R10726 += 1 };
  s1 -> s2 [76, 65535] { R10948 += 1, R10904 += 1, R10724 += 1, R10726 += 1 };
  s2 -> s2 [0, 69] { R10948 += 1, R10904 += 1, R10724 += 1, R10726 += 1 };
  s2 -> s5 [70, 70] { R10948 += 1, R10904 += 1, R10724 += 1, R10726 += 1 };
  s2 -> s6 [70, 70] { R10948 += 1, R10904 += 1, R10724 += 1, R10726 += 1 };
  s2 -> s2 [71, 74] { R10948 += 1, R10904 += 1, R10724 += 1, R10726 += 1 };
  s2 -> s11 [75, 75] { R10948 += 1, R10904 += 1, R10724 += 1, R10726 += 1 };
  s2 -> s2 [76, 65535] { R10948 += 1, R10904 += 1, R10724 += 1, R10726 += 1 };
  s3 -> s1 [0, 69] { R10948 += 1, R10904 += 1, R10724 += 1, R10725 += 1, R10726 += 1 };
  s3 -> s2 [0, 69] { R10948 += 1, R10904 += 1, R10724 += 1, R10726 += 1 };
  s3 -> s3 [0, 69] { R10948 += 1, R10904 += 1, R10723 += 1, R10724 += 1 };
  s3 -> s5 [70, 70] { R10948 += 1, R10904 += 1, R10724 += 1, R10726 += 1 };
  s3 -> s6 [70, 70] { R10948 += 1, R10904 += 1, R10724 += 1, R10726 += 1 };
  s3 -> s7 [70, 70] { R10948 += 1, R10904 += 1, R10723 += 1, R10724 += 1 };
  s3 -> s8 [70, 70] { R10948 += 1, R10904 += 1, R10724 += 1, R10725 += 1, R10726 += 1 };
  s3 -> s9 [70, 70] { R10948 += 1, R10904 += 1, R10723 += 1, R10724 += 1 };
  s3 -> s10 [70, 70] { R10948 += 1, R10904 += 1, R10724 += 1, R10725 += 1, R10726 += 1 };
  s3 -> s2 [71, 74] { R10948 += 1, R10904 += 1, R10724 += 1, R10726 += 1 };
  s3 -> s1 [71, 65535] { R10948 += 1, R10904 += 1, R10724 += 1, R10725 += 1, R10726 += 1 };
  s3 -> s3 [71, 65535] { R10948 += 1, R10904 += 1, R10723 += 1, R10724 += 1 };
  s3 -> s11 [75, 75] { R10948 += 1, R10904 += 1, R10724 += 1, R10726 += 1 };
  s3 -> s2 [76, 65535] { R10948 += 1, R10904 += 1, R10724 += 1, R10726 += 1 };
  s4 -> s1 [0, 69] { R10948 += 1, R10904 += 1, R10724 += 1, R10725 += 1, R10726 += 1 };
  s4 -> s2 [0, 69] { R10948 += 1, R10904 += 1, R10724 += 1, R10726 += 1 };
  s4 -> s3 [0, 69] { R10948 += 1, R10904 += 1, R10723 += 1, R10724 += 1 };
  s4 -> s4 [0, 65535] { R10948 += 1, R10903 += 1, R10904 += 1 };
  s4 -> s5 [70, 70] { R10948 += 1, R10904 += 1, R10724 += 1, R10726 += 1 };
  s4 -> s6 [70, 70] { R10948 += 1, R10904 += 1, R10724 += 1, R10726 += 1 };
  s4 -> s7 [70, 70] { R10948 += 1, R10904 += 1, R10723 += 1, R10724 += 1 };
  s4 -> s8 [70, 70] { R10948 += 1, R10904 += 1, R10724 += 1, R10725 += 1, R10726 += 1 };
  s4 -> s9 [70, 70] { R10948 += 1, R10904 += 1, R10723 += 1, R10724 += 1 };
  s4 -> s10 [70, 70] { R10948 += 1, R10904 += 1, R10724 += 1, R10725 += 1, R10726 += 1 };
  s4 -> s2 [71, 74] { R10948 += 1, R10904 += 1, R10724 += 1, R10726 += 1 };
  s4 -> s1 [71, 65535] { R10948 += 1, R10904 += 1, R10724 += 1, R10725 += 1, R10726 += 1 };
  s4 -> s3 [71, 65535] { R10948 += 1, R10904 += 1, R10723 += 1, R10724 += 1 };
  s4 -> s11 [75, 75] { R10948 += 1, R10904 += 1, R10724 += 1, R10726 += 1 };
  s4 -> s2 [76, 65535] { R10948 += 1, R10904 += 1, R10724 += 1, R10726 += 1 };
  s6 -> s6 [0, 74] { R10948 += 1, R10904 += 1, R10724 += 1, R10726 += 1 };
  s6 -> s13 [75, 75] { R10948 += 1, R10904 += 1, R10724 += 1, R10726 += 1 };
  s6 -> s6 [76, 65535] { R10948 += 1, R10904 += 1, R10724 += 1, R10726 += 1 };
  s7 -> s6 [0, 74] { R10948 += 1, R10904 += 1, R10724 += 1, R10726 += 1 };
  s7 -> s7 [0, 65535] { R10948 += 1, R10904 += 1, R10723 += 1, R10724 += 1 };
  s7 -> s10 [0, 65535] { R10948 += 1, R10904 += 1, R10724 += 1, R10725 += 1, R10726 += 1 };
  s7 -> s13 [75, 75] { R10948 += 1, R10904 += 1, R10724 += 1, R10726 += 1 };
  s7 -> s6 [76, 65535] { R10948 += 1, R10904 += 1, R10724 += 1, R10726 += 1 };
  s10 -> s6 [0, 74] { R10948 += 1, R10904 += 1, R10724 += 1, R10726 += 1 };
  s10 -> s10 [0, 65535] { R10948 += 1, R10904 += 1, R10724 += 1, R10725 += 1, R10726 += 1 };
  s10 -> s13 [75, 75] { R10948 += 1, R10904 += 1, R10724 += 1, R10726 += 1 };
  s10 -> s6 [76, 65535] { R10948 += 1, R10904 += 1, R10724 += 1, R10726 += 1 };
  s11 -> s12 [0, 69] { R10948 += 1, R10904 += 1, R10724 += 1 };
  s11 -> s11 [0, 69] { R10948 += 1, R10904 += 1, R10724 += 1, R10726 += 1 };
  s11 -> s13 [70, 70] { R10948 += 1, R10904 += 1, R10724 += 1, R10726 += 1 };
  s11 -> s14 [70, 70] { R10948 += 1, R10904 += 1, R10724 += 1, R10726 += 1 };
  s11 -> s15 [70, 70] { R10948 += 1, R10904 += 1, R10724 += 1 };
  s11 -> s16 [70, 70] { R10948 += 1, R10904 += 1, R10724 += 1 };
  s11 -> s12 [71, 65535] { R10948 += 1, R10904 += 1, R10724 += 1 };
  s11 -> s11 [71, 65535] { R10948 += 1, R10904 += 1, R10724 += 1, R10726 += 1 };
  s12 -> s12 [0, 69] { R10948 += 1, R10904 += 1, R10724 += 1 };
  s12 -> s12 [0, 65535] { R10948 += 1 };
  s12 -> s17 [0, 65535];
  s12 -> s15 [70, 70] { R10948 += 1, R10904 += 1, R10724 += 1 };
  s12 -> s16 [70, 70] { R10948 += 1, R10904 += 1, R10724 += 1 };
  s12 -> s12 [71, 65535] { R10948 += 1, R10904 += 1, R10724 += 1 };
  s13 -> s13 [0, 65535] { R10948 += 1, R10904 += 1, R10724 += 1, R10726 += 1 };
  s13 -> s15 [0, 65535] { R10948 += 1, R10904 += 1, R10724 += 1 };
  s15 -> s18 [0, 65535] { R10948 += 1 };
  s15 -> s15 [0, 65535] { R10948 += 1, R10904 += 1, R10724 += 1 };
  s15 -> s17 [0, 65535];
  s16 -> s16 [0, 65535] { R10948 += 1 };
  s16 -> s17 [0, 65535];
  s17 -> s17 [0, 65535];
  s18 -> s18 [0, 65535] { R10948 += 1 };
  s18 -> s17 [0, 65535];
  accepting s17, s16, s12, s18, s15;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 69] { R10950 += 1, R10906 += 1, R10842 += 1, R10843 += 1, R10844 += 1 };
  s0 -> s2 [0, 69] { R10950 += 1, R10906 += 1, R10841 += 1, R10842 += 1 };
  s0 -> s3 [0, 69] { R10950 += 1, R10906 += 1, R10842 += 1, R10844 += 1, R10845 += 1 };
  s0 -> s0 [0, 65535] { R10949 += 1, R10950 += 1 };
  s0 -> s4 [0, 65535] { R10950 += 1, R10905 += 1, R10906 += 1 };
  s0 -> s5 [70, 70] { R10950 += 1, R10906 += 1, R10842 += 1, R10843 += 1, R10844 += 1 };
  s0 -> s6 [70, 70] { R10950 += 1, R10906 += 1, R10842 += 1, R10844 += 1, R10845 += 1 };
  s0 -> s7 [70, 70] { R10950 += 1, R10906 += 1, R10842 += 1, R10844 += 1, R10845 += 1 };
  s0 -> s8 [70, 70] { R10950 += 1, R10906 += 1, R10841 += 1, R10842 += 1 };
  s0 -> s9 [70, 70] { R10950 += 1, R10906 += 1, R10841 += 1, R10842 += 1 };
  s0 -> s10 [70, 70] { R10950 += 1, R10906 += 1, R10842 += 1, R10843 += 1, R10844 += 1 };
  s0 -> s1 [71, 65535] { R10950 += 1, R10906 += 1, R10842 += 1, R10843 += 1, R10844 += 1 };
  s0 -> s2 [71, 65535] { R10950 += 1, R10906 += 1, R10841 += 1, R10842 += 1 };
  s0 -> s3 [71, 65535] { R10950 += 1, R10906 += 1, R10842 += 1, R10844 += 1, R10845 += 1 };
  s1 -> s1 [0, 69] { R10950 += 1, R10906 += 1, R10842 += 1, R10843 += 1, R10844 += 1 };
  s1 -> s15 [0, 69] { R10950 += 1, R10906 += 1 };
  s1 -> s3 [0, 69] { R10950 += 1, R10906 += 1, R10842 += 1, R10844 += 1, R10845 += 1 };
  s1 -> s5 [70, 70] { R10950 += 1, R10906 += 1, R10842 += 1, R10843 += 1, R10844 += 1 };
  s1 -> s11 [70, 70] { R10950 += 1, R10906 += 1 };
  s1 -> s6 [70, 70] { R10950 += 1, R10906 += 1, R10842 += 1, R10844 += 1, R10845 += 1 };
  s1 -> s7 [70, 70] { R10950 += 1, R10906 += 1, R10842 += 1, R10844 += 1, R10845 += 1 };
  s1 -> s18 [70, 70] { R10950 += 1, R10906 += 1 };
  s1 -> s10 [70, 70] { R10950 += 1, R10906 += 1, R10842 += 1, R10843 += 1, R10844 += 1 };
  s1 -> s1 [71, 65535] { R10950 += 1, R10906 += 1, R10842 += 1, R10843 += 1, R10844 += 1 };
  s1 -> s15 [71, 65535] { R10950 += 1, R10906 += 1 };
  s1 -> s3 [71, 65535] { R10950 += 1, R10906 += 1, R10842 += 1, R10844 += 1, R10845 += 1 };
  s2 -> s1 [0, 69] { R10950 += 1, R10906 += 1, R10842 += 1, R10843 += 1, R10844 += 1 };
  s2 -> s2 [0, 69] { R10950 += 1, R10906 += 1, R10841 += 1, R10842 += 1 };
  s2 -> s3 [0, 69] { R10950 += 1, R10906 += 1, R10842 += 1, R10844 += 1, R10845 += 1 };
  s2 -> s5 [70, 70] { R10950 += 1, R10906 += 1, R10842 += 1, R10843 += 1, R10844 += 1 };
  s2 -> s6 [70, 70] { R10950 += 1, R10906 += 1, R10842 += 1, R10844 += 1, R10845 += 1 };
  s2 -> s7 [70, 70] { R10950 += 1, R10906 += 1, R10842 += 1, R10844 += 1, R10845 += 1 };
  s2 -> s8 [70, 70] { R10950 += 1, R10906 += 1, R10841 += 1, R10842 += 1 };
  s2 -> s9 [70, 70] { R10950 += 1, R10906 += 1, R10841 += 1, R10842 += 1 };
  s2 -> s10 [70, 70] { R10950 += 1, R10906 += 1, R10842 += 1, R10843 += 1, R10844 += 1 };
  s2 -> s1 [71, 65535] { R10950 += 1, R10906 += 1, R10842 += 1, R10843 += 1, R10844 += 1 };
  s2 -> s2 [71, 65535] { R10950 += 1, R10906 += 1, R10841 += 1, R10842 += 1 };
  s2 -> s3 [71, 65535] { R10950 += 1, R10906 += 1, R10842 += 1, R10844 += 1, R10845 += 1 };
  s3 -> s15 [0, 69] { R10950 += 1, R10906 += 1 };
  s3 -> s16 [0, 69] { R10950 += 1, R10906 += 1, R10842 += 1 };
  s3 -> s3 [0, 69] { R10950 += 1, R10906 += 1, R10842 += 1, R10844 += 1, R10845 += 1 };
  s3 -> s17 [70, 70] { R10950 += 1, R10906 += 1, R10842 += 1 };
  s3 -> s11 [70, 70] { R10950 += 1, R10906 += 1 };
  s3 -> s6 [70, 70] { R10950 += 1, R10906 += 1, R10842 += 1, R10844 += 1, R10845 += 1 };
  s3 -> s7 [70, 70] { R10950 += 1, R10906 += 1, R10842 += 1, R10844 += 1, R10845 += 1 };
  s3 -> s14 [70, 70] { R10950 += 1, R10906 += 1, R10842 += 1 };
  s3 -> s18 [70, 70] { R10950 += 1, R10906 += 1 };
  s3 -> s15 [71, 65535] { R10950 += 1, R10906 += 1 };
  s3 -> s16 [71, 65535] { R10950 += 1, R10906 += 1, R10842 += 1 };
  s3 -> s3 [71, 65535] { R10950 += 1, R10906 += 1, R10842 += 1, R10844 += 1, R10845 += 1 };
  s4 -> s1 [0, 69] { R10950 += 1, R10906 += 1, R10842 += 1, R10843 += 1, R10844 += 1 };
  s4 -> s2 [0, 69] { R10950 += 1, R10906 += 1, R10841 += 1, R10842 += 1 };
  s4 -> s3 [0, 69] { R10950 += 1, R10906 += 1, R10842 += 1, R10844 += 1, R10845 += 1 };
  s4 -> s4 [0, 65535] { R10950 += 1, R10905 += 1, R10906 += 1 };
  s4 -> s5 [70, 70] { R10950 += 1, R10906 += 1, R10842 += 1, R10843 += 1, R10844 += 1 };
  s4 -> s6 [70, 70] { R10950 += 1, R10906 += 1, R10842 += 1, R10844 += 1, R10845 += 1 };
  s4 -> s7 [70, 70] { R10950 += 1, R10906 += 1, R10842 += 1, R10844 += 1, R10845 += 1 };
  s4 -> s8 [70, 70] { R10950 += 1, R10906 += 1, R10841 += 1, R10842 += 1 };
  s4 -> s9 [70, 70] { R10950 += 1, R10906 += 1, R10841 += 1, R10842 += 1 };
  s4 -> s10 [70, 70] { R10950 += 1, R10906 += 1, R10842 += 1, R10843 += 1, R10844 += 1 };
  s4 -> s1 [71, 65535] { R10950 += 1, R10906 += 1, R10842 += 1, R10843 += 1, R10844 += 1 };
  s4 -> s2 [71, 65535] { R10950 += 1, R10906 += 1, R10841 += 1, R10842 += 1 };
  s4 -> s3 [71, 65535] { R10950 += 1, R10906 += 1, R10842 += 1, R10844 += 1, R10845 += 1 };
  s6 -> s11 [0, 65535] { R10950 += 1, R10906 += 1 };
  s6 -> s6 [0, 65535] { R10950 += 1, R10906 += 1, R10842 += 1, R10844 += 1, R10845 += 1 };
  s6 -> s14 [0, 65535] { R10950 += 1, R10906 += 1, R10842 += 1 };
  s8 -> s6 [0, 65535] { R10950 += 1, R10906 += 1, R10842 += 1, R10844 += 1, R10845 += 1 };
  s8 -> s8 [0, 65535] { R10950 += 1, R10906 += 1, R10841 += 1, R10842 += 1 };
  s8 -> s10 [0, 65535] { R10950 += 1, R10906 += 1, R10842 += 1, R10843 += 1, R10844 += 1 };
  s10 -> s11 [0, 65535] { R10950 += 1, R10906 += 1 };
  s10 -> s6 [0, 65535] { R10950 += 1, R10906 += 1, R10842 += 1, R10844 += 1, R10845 += 1 };
  s10 -> s10 [0, 65535] { R10950 += 1, R10906 += 1, R10842 += 1, R10843 += 1, R10844 += 1 };
  s11 -> s11 [0, 65535] { R10950 += 1, R10906 += 1 };
  s11 -> s12 [0, 65535];
  s11 -> s13 [0, 65535] { R10950 += 1 };
  s12 -> s12 [0, 65535];
  s13 -> s12 [0, 65535];
  s13 -> s13 [0, 65535] { R10950 += 1 };
  s14 -> s11 [0, 65535] { R10950 += 1, R10906 += 1 };
  s14 -> s14 [0, 65535] { R10950 += 1, R10906 += 1, R10842 += 1 };
  s15 -> s15 [0, 69] { R10950 += 1, R10906 += 1 };
  s15 -> s15 [0, 65535] { R10950 += 1 };
  s15 -> s12 [0, 65535];
  s15 -> s11 [70, 70] { R10950 += 1, R10906 += 1 };
  s15 -> s18 [70, 70] { R10950 += 1, R10906 += 1 };
  s15 -> s15 [71, 65535] { R10950 += 1, R10906 += 1 };
  s16 -> s15 [0, 69] { R10950 += 1, R10906 += 1 };
  s16 -> s16 [0, 69] { R10950 += 1, R10906 += 1, R10842 += 1 };
  s16 -> s17 [70, 70] { R10950 += 1, R10906 += 1, R10842 += 1 };
  s16 -> s11 [70, 70] { R10950 += 1, R10906 += 1 };
  s16 -> s14 [70, 70] { R10950 += 1, R10906 += 1, R10842 += 1 };
  s16 -> s18 [70, 70] { R10950 += 1, R10906 += 1 };
  s16 -> s15 [71, 65535] { R10950 += 1, R10906 += 1 };
  s16 -> s16 [71, 65535] { R10950 += 1, R10906 += 1, R10842 += 1 };
  s18 -> s18 [0, 65535] { R10950 += 1 };
  s18 -> s12 [0, 65535];
  accepting s12, s13, s18, s15, s11;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [102, 102];
  accepting s1;
};
};
constraint R3 = R10950 && R23 - R10950 = -1 && R24 = R10950 && R25 - R10950 = -1 && R26 = R10950 && R27 = 0 && R28 = 1 && R29 = 0 && R30 = 1 && R45 + R84 + R83 + -1*R10728 + -1*R10724 - R66 = 0 && R49 + R89 + R87 = 0 && R50 + R90 + R88 + -1*R10728 + -1*R10724 - R66 = 0 && R55 + R96 + R93 + -1*R10730 + -1*R10726 - R68 = 0 && R65 + R10727 + R10723 = 0 && R67 + R10729 + R10725 = 0 && R10891 = 0 && R10892 = 0 && R10897 = 0 && R10898 = 0 && R10901 = 0 && R10902 = 0 && R10903 = 0 && R10904 = 0 && R10905 = 0 && R10906 = 0 && R10907 = 0 && R10908 = R10950 && R10909 = 0 && R10910 = R10950 && R10911 = 0 && R10912 = R10950 && R10913 = 0 && R10914 = R10950 && R10915 = 0 && R10916 = R10950 && R10917 = 0 && R10918 = R10950 && R10919 = 0 && R10920 = R10950 && R10921 = 0 && R10922 = R10950 && R10923 = 0 && R10924 = R10950 && R10925 = 0 && R10926 = R10950 && R10927 = 0 && R10928 = R10950 && R10929 = 0 && R10930 = R10950 && R10931 = 0 && R10932 = R10950 && R10933 = 0 && R10934 = R10950 && R10935 = 0 && R10936 = R10950 && R10937 = 0 && R10938 = R10950 && R10939 = 0 && R10940 = R10950 && R10941 = 0 && R10942 = R10950 && R10943 = 0 && R10944 = R10950 && R10945 = 0 && R10946 = R10950 && R10947 = 0 && R10948 = R10950 && R10949 = 0 && -1 < R2 && R12 < 1 && R15 < 1 && R16 < 1 && R47 + R86 + R85 < 1 && R61 + R10164 + R10161 < 1 && -1*R10728 + -1*R10724 - R66 < 1 && -1*R10730 + -1*R10726 - R68 < 1 && 0 < R10950 && (R2 != 0 || R20 = 0 || (R10851 = 0 && R10852 = 0)) && (R2 != 0 || R20 = 0 || (R10853 = 0 && R10854 = 0)) && (R2 != 0 || R20 = 0 || (R10855 = 0 && R10856 = 0)) && (R2 != 0 || R20 = 0 || (R10857 = 0 && R10858 = 0)) && (R2 != 0 || R20 = 0 || (R10859 = 0 && R10860 = 0)) && (R2 != 0 || R20 = 0 || (R10861 = 0 && R10862 = 0)) && (R2 != 0 || R20 = 0 || (R10863 = 0 && R10864 = 0)) && (R2 != 0 || R20 = 0 || (R10865 = 0 && R10866 = 0)) && (R2 != 0 || R20 = 0 || (R10867 = 0 && R10868 = 0)) && (R2 != 0 || R20 = 0 || (R10869 = 0 && R10870 = 0)) && (R53 + R94 + R91 != 0 || R54 + R95 + R92 + -1*R10728 + -1*R10724 - R66 = 0 || R66 + R10728 + R10724 < 1) && (R59 + R10162 + R10159 != 0 || R60 + R10163 + R10160 + -1*R10728 + -1*R10724 - R66 = 0 || R66 + R10728 + R10724 < 1) && (R66 + R10728 + R10724 != 0 || ((R53 + R94 + R91 != 0 || R54 + R95 + R92 = 0 || R68 + R10730 + R10726 < 1) && (R53 + R94 + R91 = 0 || R68 + R10730 + R10726 < 1))) && (R66 + R10728 + R10724 != 0 || ((R59 + R10162 + R10159 != 0 || R60 + R10163 + R10160 = 0 || R68 + R10730 + R10726 < 1) && (R59 + R10162 + R10159 = 0 || R68 + R10730 + R10726 < 1))) && (R66 + R10728 + R10724 != 0 || ((R73 + R10846 + R10841 != 0 || R74 + R10847 + R10842 = 0 || R68 + R10730 + R10726 < 1) && (R73 + R10846 + R10841 = 0 || R68 + R10730 + R10726 < 1))) && (R68 + R10730 + R10726 != 0 || R77 + R10850 + R10845 = 0 || (R75 + R10848 + R10843 = 0 && R76 + R10849 + R10844 = 0)) && (R73 + R10846 + R10841 != 0 || R66 + R10728 + R10724 + -1*R10847 + -1*R10842 - R74 = 0 || R66 + R10728 + R10724 < 1) && (R75 + R10848 + R10843 != 0 || R68 + R10730 + R10726 + -1*R10849 + -1*R10844 - R76 = 0 || R68 + R10730 + R10726 < 1) && (R10851 != 0 || R2 = R10852 || R2 < 1) && (R10853 != 0 || R2 = R10854 || R2 < 1) && (R10855 != 0 || R2 = R10856 || R2 < 1) && (R10857 != 0 || R2 = R10858 || R2 < 1) && (R10859 != 0 || R2 = R10860 || R2 < 1) && (R10861 != 0 || R2 = R10862 || R2 < 1) && (R10863 != 0 || R2 = R10864 || R2 < 1) && (R10865 != 0 || R2 = R10866 || R2 < 1) && (R10867 != 0 || R2 = R10868 || R2 < 1) && (R10869 != 0 || R2 = R10870 || R2 < 1) && (R21 = 0 || (R10889 = 0 && R10890 = 0)) && (R21 = 0 || (R10893 = 0 && R10894 = 0)) && (R21 = 0 || (R10895 = 0 && R10896 = 0)) && (R21 = 0 || (R10899 = 0 && R10900 = 0)) && (R22 = 0 || (R10871 = 0 && R10872 = 0)) && (R22 = 0 || (R10873 = 0 && R10874 = 0)) && (R22 = 0 || (R10875 = 0 && R10876 = 0)) && (R22 = 0 || (R10877 = 0 && R10878 = 0)) && (R22 = 0 || (R10879 = 0 && R10880 = 0)) && (R22 = 0 || (R10881 = 0 && R10882 = 0)) && (R22 = 0 || (R10883 = 0 && R10884 = 0)) && (R22 = 0 || (R10885 = 0 && R10886 = 0)) && (R22 = 0 || (R10887 = 0 && R10888 = 0)) && (R53 + R94 + R91 = 0 || R66 + R10728 + R10724 < 1) && (R59 + R10162 + R10159 = 0 || R66 + R10728 + R10724 < 1) && (R73 + R10846 + R10841 = 0 || R66 + R10728 + R10724 < 1) && (R75 + R10848 + R10843 = 0 || R68 + R10730 + R10726 < 1) && (R10851 = 0 || R2 < 1) && (R10853 = 0 || R2 < 1) && (R10855 = 0 || R2 < 1) && (R10857 = 0 || R2 < 1) && (R10859 = 0 || R2 < 1) && (R10861 = 0 || R2 < 1) && (R10863 = 0 || R2 < 1) && (R10865 = 0 || R2 < 1) && (R10867 = 0 || R2 < 1) && (R10869 = 0 || R2 < 1);
// End of Parikh automata intersection problem
