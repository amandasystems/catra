// Parikh automata intersection problem, generated by OSTRICH+
counter int R12, R15, R16, R2, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R3451, R3452, R3453, R3454, R3455, R3456, R4, R45, R47, R49, R5, R50, R53, R54, R55, R5689, R5690, R5691, R5692, R5693, R5694, R5695, R5696, R59, R60, R61, R6137, R6138, R6139, R6140, R6141, R6142, R6143, R6144, R6145, R6146, R6147, R6148, R6149, R6150, R6151, R6152, R6153, R6154, R6155, R6156, R6157, R6158, R6159, R6160, R6161, R6162, R6163, R6164, R6165, R6166, R6167, R6168, R6169, R6170, R6171, R6172, R6173, R6174, R6175, R6176, R6177, R6178, R6179, R6180, R6181, R6182, R6183, R6184, R6185, R6186, R6187, R6188, R6189, R6190, R6191, R6192, R6193, R6194, R6195, R6196, R6197, R6198, R6199, R6200, R6201, R6202, R6203, R6204, R6205, R6206, R6207, R6208, R6209, R6210, R6211, R6212, R6213, R6214, R6215, R6216, R6217, R6218, R6219, R6220, R6221, R6222, R6223, R6224, R6225, R6226, R6227, R6228, R6229, R6230, R6231, R6232, R6233, R6234, R6235, R6236, R6237, R6238, R6239, R6240, R6241, R6242, R6243, R6244, R6245, R6246, R65, R66, R67, R68, R73, R74, R75, R76, R77, R83, R84, R85, R86, R87, R88, R89, R90, R91, R92, R93, R94, R95, R96;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [70, 70];
  s0 -> s0 [71, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [70, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R15 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 69];
  s0 -> s0 [0, 65535] { R16 += 1 };
  s0 -> s2 [70, 70];
  s0 -> s1 [71, 65535];
  s1 -> s1 [0, 69];
  s1 -> s2 [70, 70];
  s1 -> s1 [71, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R24 += 1 };
  s0 -> s0 [0, 65535] { R23 += 1, R24 += 1 };
  s0 -> s2 [9, 13] { R24 += 1 };
  s0 -> s1 [14, 31] { R24 += 1 };
  s0 -> s2 [32, 32] { R24 += 1 };
  s0 -> s1 [33, 65535] { R24 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R24 += 1 };
  s2 -> s1 [0, 65535] { R24 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R25 += 1, R26 += 1 };
  s1 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R28 += 1 };
  s0 -> s0 [0, 65535] { R27 += 1, R28 += 1 };
  s0 -> s2 [9, 13] { R28 += 1 };
  s0 -> s1 [14, 31] { R28 += 1 };
  s0 -> s2 [32, 32] { R28 += 1 };
  s0 -> s1 [33, 65535] { R28 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R28 += 1 };
  s2 -> s1 [0, 65535] { R28 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R29 += 1, R30 += 1 };
  s1 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R6167 += 1, R6168 += 1 };
  s0 -> s1 [0, 65535] { R6168 += 1, R22 += 1 };
  s1 -> s1 [0, 65535] { R6168 += 1, R22 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 69] { R6170 += 1 };
  s0 -> s0 [0, 65535] { R6169 += 1, R6170 += 1 };
  s0 -> s2 [70, 70] { R6170 += 1 };
  s0 -> s3 [70, 70] { R6170 += 1 };
  s0 -> s1 [76, 65535] { R6170 += 1 };
  s1 -> s1 [0, 69] { R6170 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R6170 += 1 };
  s1 -> s3 [70, 70] { R6170 += 1 };
  s1 -> s1 [76, 65535] { R6170 += 1 };
  s2 -> s2 [0, 70] { R6170 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [76, 65535] { R6170 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 69] { R6172 += 1, R45 += 1 };
  s0 -> s0 [0, 65535] { R6171 += 1, R6172 += 1 };
  s0 -> s2 [70, 70] { R6172 += 1, R45 += 1 };
  s0 -> s3 [70, 70] { R6172 += 1, R45 += 1 };
  s0 -> s1 [71, 65535] { R6172 += 1, R45 += 1 };
  s1 -> s1 [0, 69] { R6172 += 1, R45 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R6172 += 1, R45 += 1 };
  s1 -> s3 [70, 70] { R6172 += 1, R45 += 1 };
  s1 -> s1 [71, 65535] { R6172 += 1, R45 += 1 };
  s2 -> s2 [0, 65535] { R6172 += 1, R45 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 69] { R6174 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R6173 += 1, R6174 += 1 };
  s0 -> s2 [70, 70] { R6174 += 1, R47 += 1 };
  s0 -> s3 [70, 70] { R6174 += 1, R47 += 1 };
  s0 -> s1 [71, 65535] { R6174 += 1, R47 += 1 };
  s1 -> s1 [0, 69] { R6174 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R6174 += 1, R47 += 1 };
  s1 -> s3 [70, 70] { R6174 += 1, R47 += 1 };
  s1 -> s1 [71, 65535] { R6174 += 1, R47 += 1 };
  s2 -> s2 [0, 65535] { R6174 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 69] { R6176 += 1, R49 += 1, R50 += 1 };
  s0 -> s0 [0, 65535] { R6175 += 1, R6176 += 1 };
  s0 -> s2 [70, 70] { R6176 += 1, R49 += 1, R50 += 1 };
  s0 -> s3 [70, 70] { R6176 += 1, R49 += 1, R50 += 1 };
  s0 -> s1 [71, 65535] { R6176 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 69] { R6176 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R6176 += 1, R49 += 1, R50 += 1 };
  s1 -> s3 [70, 70] { R6176 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [71, 65535] { R6176 += 1, R49 += 1, R50 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R6176 += 1, R49 += 1, R50 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 69] { R6178 += 1, R53 += 1, R54 += 1 };
  s0 -> s0 [0, 65535] { R6177 += 1, R6178 += 1 };
  s0 -> s2 [70, 70] { R6178 += 1, R53 += 1, R54 += 1 };
  s0 -> s3 [70, 70] { R6178 += 1, R53 += 1, R54 += 1 };
  s0 -> s1 [71, 65535] { R6178 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 69] { R6178 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R6178 += 1, R53 += 1, R54 += 1 };
  s1 -> s3 [70, 70] { R6178 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [71, 65535] { R6178 += 1, R53 += 1, R54 += 1 };
  s2 -> s2 [0, 65535] { R6178 += 1, R53 += 1, R54 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 69] { R6180 += 1, R59 += 1, R60 += 1 };
  s0 -> s0 [0, 65535] { R6179 += 1, R6180 += 1 };
  s0 -> s2 [70, 70] { R6180 += 1, R59 += 1, R60 += 1 };
  s0 -> s3 [70, 70] { R6180 += 1, R59 += 1, R60 += 1 };
  s0 -> s1 [71, 65535] { R6180 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 69] { R6180 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R6180 += 1, R59 += 1, R60 += 1 };
  s1 -> s3 [70, 70] { R6180 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [71, 65535] { R6180 += 1, R59 += 1, R60 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R6180 += 1, R59 += 1, R60 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 69] { R6182 += 1, R65 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R6181 += 1, R6182 += 1 };
  s0 -> s2 [70, 70] { R6182 += 1, R65 += 1, R66 += 1 };
  s0 -> s3 [70, 70] { R6182 += 1, R65 += 1, R66 += 1 };
  s0 -> s1 [71, 65535] { R6182 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 69] { R6182 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R6182 += 1, R65 += 1, R66 += 1 };
  s1 -> s3 [70, 70] { R6182 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [71, 65535] { R6182 += 1, R65 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R6182 += 1, R65 += 1, R66 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 69] { R6184 += 1, R73 += 1, R74 += 1 };
  s0 -> s0 [0, 65535] { R6183 += 1, R6184 += 1 };
  s0 -> s2 [70, 70] { R6184 += 1, R73 += 1, R74 += 1 };
  s0 -> s3 [70, 70] { R6184 += 1, R73 += 1, R74 += 1 };
  s0 -> s1 [71, 65535] { R6184 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 69] { R6184 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R6184 += 1, R73 += 1, R74 += 1 };
  s1 -> s3 [70, 70] { R6184 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [71, 65535] { R6184 += 1, R73 += 1, R74 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R6184 += 1, R73 += 1, R74 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 69] { R6204 += 1 };
  s0 -> s0 [0, 65535] { R6203 += 1, R6204 += 1 };
  s0 -> s2 [70, 70] { R6204 += 1 };
  s0 -> s1 [71, 65535] { R6204 += 1 };
  s1 -> s1 [0, 69] { R6204 += 1 };
  s1 -> s2 [70, 70] { R6204 += 1 };
  s1 -> s1 [71, 65535] { R6204 += 1 };
  s2 -> s2 [0, 65535] { R6204 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R6206 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R6205 += 1, R6206 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R6206 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 69] { R6208 += 1 };
  s0 -> s0 [0, 65535] { R6207 += 1, R6208 += 1 };
  s0 -> s2 [0, 65535] { R6208 += 1, R12 += 1 };
  s0 -> s3 [70, 70] { R6208 += 1 };
  s0 -> s1 [71, 65535] { R6208 += 1 };
  s1 -> s1 [0, 69] { R6208 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [70, 70] { R6208 += 1 };
  s1 -> s1 [71, 65535] { R6208 += 1 };
  s2 -> s1 [0, 69] { R6208 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R6208 += 1, R12 += 1 };
  s2 -> s3 [70, 70] { R6208 += 1 };
  s2 -> s1 [71, 65535] { R6208 += 1 };
  s3 -> s3 [0, 65535] { R6208 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 69] { R6210 += 1, R6148 += 1 };
  s0 -> s2 [0, 65535] { R6210 += 1, R6147 += 1, R6148 += 1 };
  s0 -> s0 [0, 65535] { R6209 += 1, R6210 += 1 };
  s0 -> s1 [71, 65535] { R6210 += 1, R6148 += 1 };
  s1 -> s1 [0, 69] { R6210 += 1, R6148 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R6210 += 1 };
  s1 -> s1 [71, 65535] { R6210 += 1, R6148 += 1 };
  s2 -> s1 [0, 69] { R6210 += 1, R6148 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R6210 += 1, R6147 += 1, R6148 += 1 };
  s2 -> s1 [71, 65535] { R6210 += 1, R6148 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R6212 += 1, R6150 += 1, R20 += 1 };
  s0 -> s2 [0, 65535] { R6212 += 1, R6149 += 1, R6150 += 1 };
  s0 -> s0 [0, 65535] { R6211 += 1, R6212 += 1 };
  s1 -> s1 [0, 65535] { R6212 += 1, R6150 += 1, R20 += 1 };
  s1 -> s4 [0, 65535] { R6212 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R6212 += 1, R6150 += 1, R20 += 1 };
  s2 -> s2 [0, 65535] { R6212 += 1, R6149 += 1, R6150 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R6212 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 70] { R6214 += 1, R6152 += 1 };
  s0 -> s2 [0, 65535] { R6214 += 1, R6151 += 1, R6152 += 1 };
  s0 -> s0 [0, 65535] { R6213 += 1, R6214 += 1 };
  s0 -> s1 [75, 65535] { R6214 += 1, R6152 += 1 };
  s1 -> s1 [0, 70] { R6214 += 1, R6152 += 1 };
  s1 -> s1 [0, 65535] { R6214 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [75, 65535] { R6214 += 1, R6152 += 1 };
  s2 -> s1 [0, 70] { R6214 += 1, R6152 += 1 };
  s2 -> s2 [0, 65535] { R6214 += 1, R6151 += 1, R6152 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [75, 65535] { R6214 += 1, R6152 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s0 [0, 65535] { R6215 += 1, R6216 += 1 };
  s0 -> s1 [0, 65535] { R6216 += 1, R6154 += 1, R84 += 1 };
  s0 -> s2 [0, 65535] { R6216 += 1, R6153 += 1, R6154 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R6216 += 1, R6154 += 1, R84 += 1 };
  s1 -> s4 [0, 65535] { R6216 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R6216 += 1, R6154 += 1, R84 += 1 };
  s2 -> s2 [0, 65535] { R6216 += 1, R6153 += 1, R6154 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R6216 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 74] { R6218 += 1, R6156 += 1 };
  s0 -> s2 [0, 65535] { R6218 += 1, R6155 += 1, R6156 += 1 };
  s0 -> s3 [0, 65535] { R6218 += 1, R6156 += 1, R86 += 1 };
  s0 -> s0 [0, 65535] { R6217 += 1, R6218 += 1 };
  s0 -> s1 [76, 65535] { R6218 += 1, R6156 += 1 };
  s1 -> s1 [0, 74] { R6218 += 1, R6156 += 1 };
  s1 -> s1 [0, 65535] { R6218 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [76, 65535] { R6218 += 1, R6156 += 1 };
  s2 -> s1 [0, 74] { R6218 += 1, R6156 += 1 };
  s2 -> s2 [0, 65535] { R6218 += 1, R6155 += 1, R6156 += 1 };
  s2 -> s3 [0, 65535] { R6218 += 1, R6156 += 1, R86 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [76, 65535] { R6218 += 1, R6156 += 1 };
  s3 -> s1 [0, 74] { R6218 += 1, R6156 += 1 };
  s3 -> s4 [0, 65535] { R6218 += 1 };
  s3 -> s3 [0, 65535] { R6218 += 1, R6156 += 1, R86 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [76, 65535] { R6218 += 1, R6156 += 1 };
  s4 -> s4 [0, 65535] { R6218 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 65535] { R6220 += 1, R6157 += 1, R6158 += 1 };
  s0 -> s2 [0, 65535] { R6220 += 1, R6158 += 1, R90 += 1 };
  s0 -> s3 [0, 65535] { R6220 += 1, R6158 += 1 };
  s0 -> s0 [0, 65535] { R6219 += 1, R6220 += 1 };
  s1 -> s1 [0, 65535] { R6220 += 1, R6157 += 1, R6158 += 1 };
  s1 -> s2 [0, 65535] { R6220 += 1, R6158 += 1, R90 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s3 [0, 65535] { R6220 += 1, R6158 += 1 };
  s2 -> s2 [0, 65535] { R6220 += 1, R6158 += 1, R90 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R6220 += 1 };
  s2 -> s3 [0, 65535] { R6220 += 1, R6158 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R6220 += 1 };
  s3 -> s3 [0, 65535] { R6220 += 1, R6158 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R6220 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R6222 += 1, R6159 += 1, R6160 += 1 };
  s0 -> s2 [0, 65535] { R6222 += 1, R6160 += 1, R94 += 1, R95 += 1 };
  s0 -> s0 [0, 65535] { R6221 += 1, R6222 += 1 };
  s0 -> s3 [0, 65535] { R6222 += 1, R6160 += 1, R95 += 1, R96 += 1 };
  s1 -> s1 [0, 65535] { R6222 += 1, R6159 += 1, R6160 += 1 };
  s1 -> s2 [0, 65535] { R6222 += 1, R6160 += 1, R94 += 1, R95 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R6222 += 1, R6160 += 1, R95 += 1, R96 += 1 };
  s2 -> s4 [0, 65535] { R6222 += 1 };
  s2 -> s2 [0, 65535] { R6222 += 1, R6160 += 1, R94 += 1, R95 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R6222 += 1, R6160 += 1, R95 += 1, R96 += 1 };
  s3 -> s4 [0, 65535] { R6222 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R6222 += 1, R6160 += 1, R95 += 1, R96 += 1 };
  s3 -> s6 [0, 65535] { R6222 += 1, R6160 += 1 };
  s4 -> s4 [0, 65535] { R6222 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R6222 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6222 += 1, R6160 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 74] { R6224 += 1, R6162 += 1, R3455 += 1 };
  s0 -> s2 [0, 65535] { R6224 += 1, R6161 += 1, R6162 += 1 };
  s0 -> s0 [0, 65535] { R6223 += 1, R6224 += 1 };
  s0 -> s1 [0, 65535] { R6224 += 1, R6162 += 1 };
  s0 -> s1 [76, 65535] { R6224 += 1, R6162 += 1, R3455 += 1 };
  s1 -> s1 [0, 74] { R6224 += 1, R6162 += 1, R3455 += 1 };
  s1 -> s4 [0, 65535] { R6224 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R6224 += 1, R6162 += 1 };
  s1 -> s1 [76, 65535] { R6224 += 1, R6162 += 1, R3455 += 1 };
  s2 -> s1 [0, 74] { R6224 += 1, R6162 += 1, R3455 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R6224 += 1, R6161 += 1, R6162 += 1 };
  s2 -> s1 [0, 65535] { R6224 += 1, R6162 += 1 };
  s2 -> s1 [76, 65535] { R6224 += 1, R6162 += 1, R3455 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R6224 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 74] { R6226 += 1, R6164 += 1, R5694 += 1, R5696 += 1 };
  s0 -> s2 [0, 65535] { R6226 += 1, R6163 += 1, R6164 += 1 };
  s0 -> s0 [0, 65535] { R6225 += 1, R6226 += 1 };
  s0 -> s3 [75, 75] { R6226 += 1, R6164 += 1, R5694 += 1, R5696 += 1 };
  s0 -> s1 [76, 65535] { R6226 += 1, R6164 += 1, R5694 += 1, R5696 += 1 };
  s1 -> s1 [0, 74] { R6226 += 1, R6164 += 1, R5694 += 1, R5696 += 1 };
  s1 -> s3 [75, 75] { R6226 += 1, R6164 += 1, R5694 += 1, R5696 += 1 };
  s1 -> s1 [76, 65535] { R6226 += 1, R6164 += 1, R5694 += 1, R5696 += 1 };
  s2 -> s1 [0, 74] { R6226 += 1, R6164 += 1, R5694 += 1, R5696 += 1 };
  s2 -> s2 [0, 65535] { R6226 += 1, R6163 += 1, R6164 += 1 };
  s2 -> s3 [75, 75] { R6226 += 1, R6164 += 1, R5694 += 1, R5696 += 1 };
  s2 -> s1 [76, 65535] { R6226 += 1, R6164 += 1, R5694 += 1, R5696 += 1 };
  s3 -> s3 [0, 65535] { R6226 += 1, R6164 += 1, R5694 += 1, R5696 += 1 };
  s3 -> s4 [0, 65535] { R6226 += 1, R6164 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R6226 += 1, R6164 += 1, R5694 += 1 };
  s3 -> s7 [0, 65535] { R6226 += 1 };
  s4 -> s4 [0, 65535] { R6226 += 1, R6164 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s7 [0, 65535] { R6226 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R6226 += 1, R6164 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6226 += 1, R6164 += 1, R5694 += 1 };
  s6 -> s7 [0, 65535] { R6226 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R6226 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 65535] { R6228 += 1, R6166 += 1, R6143 += 1, R6145 += 1, R6146 += 1 };
  s0 -> s0 [0, 65535] { R6227 += 1, R6228 += 1 };
  s0 -> s2 [0, 65535] { R6228 += 1, R6166 += 1 };
  s0 -> s3 [0, 65535] { R6228 += 1, R6165 += 1, R6166 += 1 };
  s0 -> s4 [0, 65535] { R6228 += 1, R6166 += 1, R6143 += 1, R6144 += 1, R6145 += 1 };
  s1 -> s1 [0, 65535] { R6228 += 1, R6166 += 1, R6143 += 1, R6145 += 1, R6146 += 1 };
  s1 -> s7 [0, 65535] { R6228 += 1, R6166 += 1, R6143 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s2 [0, 65535] { R6228 += 1, R6166 += 1 };
  s1 -> s6 [0, 65535] { R6228 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R6228 += 1, R6166 += 1 };
  s2 -> s6 [0, 65535] { R6228 += 1 };
  s3 -> s1 [0, 65535] { R6228 += 1, R6166 += 1, R6143 += 1, R6145 += 1, R6146 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R6228 += 1, R6166 += 1 };
  s3 -> s3 [0, 65535] { R6228 += 1, R6165 += 1, R6166 += 1 };
  s3 -> s4 [0, 65535] { R6228 += 1, R6166 += 1, R6143 += 1, R6144 += 1, R6145 += 1 };
  s4 -> s1 [0, 65535] { R6228 += 1, R6166 += 1, R6143 += 1, R6145 += 1, R6146 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s2 [0, 65535] { R6228 += 1, R6166 += 1 };
  s4 -> s6 [0, 65535] { R6228 += 1 };
  s4 -> s4 [0, 65535] { R6228 += 1, R6166 += 1, R6143 += 1, R6144 += 1, R6145 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6228 += 1 };
  s7 -> s7 [0, 65535] { R6228 += 1, R6166 += 1, R6143 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s2 [0, 65535] { R6228 += 1, R6166 += 1 };
  s7 -> s6 [0, 65535] { R6228 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R6230 += 1, R6186 += 1, R21 += 1 };
  s0 -> s2 [0, 65535] { R6230 += 1, R6185 += 1, R6186 += 1 };
  s0 -> s0 [0, 65535] { R6229 += 1, R6230 += 1 };
  s1 -> s1 [0, 65535] { R6230 += 1, R6186 += 1, R21 += 1 };
  s1 -> s4 [0, 65535] { R6230 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R6230 += 1, R6186 += 1, R21 += 1 };
  s2 -> s2 [0, 65535] { R6230 += 1, R6185 += 1, R6186 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R6230 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 69] { R6232 += 1, R6188 += 1 };
  s0 -> s2 [0, 65535] { R6232 += 1, R6187 += 1, R6188 += 1 };
  s0 -> s0 [0, 65535] { R6231 += 1, R6232 += 1 };
  s0 -> s3 [70, 70] { R6232 += 1, R6188 += 1 };
  s0 -> s4 [70, 70] { R6232 += 1, R6188 += 1 };
  s0 -> s5 [75, 75] { R6232 += 1, R6188 += 1 };
  s0 -> s1 [76, 65535] { R6232 += 1, R6188 += 1 };
  s1 -> s1 [0, 69] { R6232 += 1, R6188 += 1 };
  s1 -> s3 [70, 70] { R6232 += 1, R6188 += 1 };
  s1 -> s4 [70, 70] { R6232 += 1, R6188 += 1 };
  s1 -> s5 [75, 75] { R6232 += 1, R6188 += 1 };
  s1 -> s1 [76, 65535] { R6232 += 1, R6188 += 1 };
  s2 -> s1 [0, 69] { R6232 += 1, R6188 += 1 };
  s2 -> s2 [0, 65535] { R6232 += 1, R6187 += 1, R6188 += 1 };
  s2 -> s3 [70, 70] { R6232 += 1, R6188 += 1 };
  s2 -> s4 [70, 70] { R6232 += 1, R6188 += 1 };
  s2 -> s5 [75, 75] { R6232 += 1, R6188 += 1 };
  s2 -> s1 [76, 65535] { R6232 += 1, R6188 += 1 };
  s4 -> s4 [0, 70] { R6232 += 1, R6188 += 1 };
  s4 -> s8 [75, 75] { R6232 += 1, R6188 += 1 };
  s4 -> s4 [76, 65535] { R6232 += 1, R6188 += 1 };
  s5 -> s5 [0, 69] { R6232 += 1, R6188 += 1 };
  s5 -> s5 [0, 65535] { R6232 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [70, 70] { R6232 += 1, R6188 += 1 };
  s5 -> s8 [70, 70] { R6232 += 1, R6188 += 1 };
  s5 -> s5 [75, 65535] { R6232 += 1, R6188 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R6232 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 70] { R6232 += 1, R6188 += 1 };
  s8 -> s8 [0, 65535] { R6232 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [75, 65535] { R6232 += 1, R6188 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 69] { R6234 += 1, R6190 += 1, R83 += 1 };
  s0 -> s0 [0, 65535] { R6233 += 1, R6234 += 1 };
  s0 -> s2 [0, 65535] { R6234 += 1, R6189 += 1, R6190 += 1 };
  s0 -> s3 [70, 70] { R6234 += 1, R6190 += 1, R83 += 1 };
  s0 -> s4 [70, 70] { R6234 += 1, R6190 += 1, R83 += 1 };
  s0 -> s1 [71, 65535] { R6234 += 1, R6190 += 1, R83 += 1 };
  s1 -> s1 [0, 69] { R6234 += 1, R6190 += 1, R83 += 1 };
  s1 -> s1 [0, 65535] { R6234 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [70, 70] { R6234 += 1, R6190 += 1, R83 += 1 };
  s1 -> s4 [70, 70] { R6234 += 1, R6190 += 1, R83 += 1 };
  s1 -> s1 [71, 65535] { R6234 += 1, R6190 += 1, R83 += 1 };
  s2 -> s1 [0, 69] { R6234 += 1, R6190 += 1, R83 += 1 };
  s2 -> s2 [0, 65535] { R6234 += 1, R6189 += 1, R6190 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [70, 70] { R6234 += 1, R6190 += 1, R83 += 1 };
  s2 -> s4 [70, 70] { R6234 += 1, R6190 += 1, R83 += 1 };
  s2 -> s1 [71, 65535] { R6234 += 1, R6190 += 1, R83 += 1 };
  s3 -> s3 [0, 65535] { R6234 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R6234 += 1, R6190 += 1, R83 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R6234 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6234 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 69] { R6236 += 1, R6192 += 1, R85 += 1 };
  s0 -> s0 [0, 65535] { R6235 += 1, R6236 += 1 };
  s0 -> s2 [0, 65535] { R6236 += 1, R6191 += 1, R6192 += 1 };
  s0 -> s3 [70, 70] { R6236 += 1, R6192 += 1, R85 += 1 };
  s0 -> s4 [70, 70] { R6236 += 1, R6192 += 1, R85 += 1 };
  s0 -> s1 [71, 65535] { R6236 += 1, R6192 += 1, R85 += 1 };
  s1 -> s1 [0, 69] { R6236 += 1, R6192 += 1, R85 += 1 };
  s1 -> s1 [0, 65535] { R6236 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [70, 70] { R6236 += 1, R6192 += 1, R85 += 1 };
  s1 -> s4 [70, 70] { R6236 += 1, R6192 += 1, R85 += 1 };
  s1 -> s1 [71, 65535] { R6236 += 1, R6192 += 1, R85 += 1 };
  s2 -> s1 [0, 69] { R6236 += 1, R6192 += 1, R85 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R6236 += 1, R6191 += 1, R6192 += 1 };
  s2 -> s3 [70, 70] { R6236 += 1, R6192 += 1, R85 += 1 };
  s2 -> s4 [70, 70] { R6236 += 1, R6192 += 1, R85 += 1 };
  s2 -> s1 [71, 65535] { R6236 += 1, R6192 += 1, R85 += 1 };
  s3 -> s3 [0, 65535] { R6236 += 1, R6192 += 1, R85 += 1 };
  s3 -> s6 [0, 65535] { R6236 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R6236 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6236 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 69] { R6238 += 1, R6194 += 1, R88 += 1 };
  s0 -> s2 [0, 69] { R6238 += 1, R6194 += 1, R87 += 1, R88 += 1 };
  s0 -> s0 [0, 65535] { R6237 += 1, R6238 += 1 };
  s0 -> s3 [0, 65535] { R6238 += 1, R6193 += 1, R6194 += 1 };
  s0 -> s4 [70, 70] { R6238 += 1, R6194 += 1, R88 += 1 };
  s0 -> s5 [70, 70] { R6238 += 1, R6194 += 1, R87 += 1, R88 += 1 };
  s0 -> s6 [70, 70] { R6238 += 1, R6194 += 1, R88 += 1 };
  s0 -> s7 [70, 70] { R6238 += 1, R6194 += 1, R87 += 1, R88 += 1 };
  s0 -> s1 [71, 74] { R6238 += 1, R6194 += 1, R88 += 1 };
  s0 -> s2 [71, 65535] { R6238 += 1, R6194 += 1, R87 += 1, R88 += 1 };
  s0 -> s8 [75, 75] { R6238 += 1, R6194 += 1, R88 += 1 };
  s0 -> s1 [76, 65535] { R6238 += 1, R6194 += 1, R88 += 1 };
  s1 -> s1 [0, 69] { R6238 += 1, R6194 += 1, R88 += 1 };
  s1 -> s4 [70, 70] { R6238 += 1, R6194 += 1, R88 += 1 };
  s1 -> s6 [70, 70] { R6238 += 1, R6194 += 1, R88 += 1 };
  s1 -> s1 [71, 74] { R6238 += 1, R6194 += 1, R88 += 1 };
  s1 -> s8 [75, 75] { R6238 += 1, R6194 += 1, R88 += 1 };
  s1 -> s1 [76, 65535] { R6238 += 1, R6194 += 1, R88 += 1 };
  s2 -> s1 [0, 69] { R6238 += 1, R6194 += 1, R88 += 1 };
  s2 -> s2 [0, 69] { R6238 += 1, R6194 += 1, R87 += 1, R88 += 1 };
  s2 -> s4 [70, 70] { R6238 += 1, R6194 += 1, R88 += 1 };
  s2 -> s5 [70, 70] { R6238 += 1, R6194 += 1, R87 += 1, R88 += 1 };
  s2 -> s6 [70, 70] { R6238 += 1, R6194 += 1, R88 += 1 };
  s2 -> s7 [70, 70] { R6238 += 1, R6194 += 1, R87 += 1, R88 += 1 };
  s2 -> s1 [71, 74] { R6238 += 1, R6194 += 1, R88 += 1 };
  s2 -> s2 [71, 65535] { R6238 += 1, R6194 += 1, R87 += 1, R88 += 1 };
  s2 -> s8 [75, 75] { R6238 += 1, R6194 += 1, R88 += 1 };
  s2 -> s1 [76, 65535] { R6238 += 1, R6194 += 1, R88 += 1 };
  s3 -> s1 [0, 69] { R6238 += 1, R6194 += 1, R88 += 1 };
  s3 -> s2 [0, 69] { R6238 += 1, R6194 += 1, R87 += 1, R88 += 1 };
  s3 -> s3 [0, 65535] { R6238 += 1, R6193 += 1, R6194 += 1 };
  s3 -> s4 [70, 70] { R6238 += 1, R6194 += 1, R88 += 1 };
  s3 -> s5 [70, 70] { R6238 += 1, R6194 += 1, R87 += 1, R88 += 1 };
  s3 -> s6 [70, 70] { R6238 += 1, R6194 += 1, R88 += 1 };
  s3 -> s7 [70, 70] { R6238 += 1, R6194 += 1, R87 += 1, R88 += 1 };
  s3 -> s1 [71, 74] { R6238 += 1, R6194 += 1, R88 += 1 };
  s3 -> s2 [71, 65535] { R6238 += 1, R6194 += 1, R87 += 1, R88 += 1 };
  s3 -> s8 [75, 75] { R6238 += 1, R6194 += 1, R88 += 1 };
  s3 -> s1 [76, 65535] { R6238 += 1, R6194 += 1, R88 += 1 };
  s6 -> s6 [0, 74] { R6238 += 1, R6194 += 1, R88 += 1 };
  s6 -> s10 [75, 75] { R6238 += 1, R6194 += 1, R88 += 1 };
  s6 -> s6 [76, 65535] { R6238 += 1, R6194 += 1, R88 += 1 };
  s7 -> s6 [0, 74] { R6238 += 1, R6194 += 1, R88 += 1 };
  s7 -> s7 [0, 65535] { R6238 += 1, R6194 += 1, R87 += 1, R88 += 1 };
  s7 -> s10 [75, 75] { R6238 += 1, R6194 += 1, R88 += 1 };
  s7 -> s6 [76, 65535] { R6238 += 1, R6194 += 1, R88 += 1 };
  s8 -> s8 [0, 69] { R6238 += 1, R6194 += 1, R88 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R6238 += 1 };
  s8 -> s10 [70, 70] { R6238 += 1, R6194 += 1, R88 += 1 };
  s8 -> s11 [70, 70] { R6238 += 1, R6194 += 1, R88 += 1 };
  s8 -> s8 [71, 65535] { R6238 += 1, R6194 += 1, R88 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R6238 += 1, R6194 += 1, R88 += 1 };
  s10 -> s12 [0, 65535] { R6238 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R6238 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R6238 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 69] { R6240 += 1, R6196 += 1, R91 += 1, R92 += 1 };
  s0 -> s0 [0, 65535] { R6239 += 1, R6240 += 1 };
  s0 -> s2 [0, 65535] { R6240 += 1, R6195 += 1, R6196 += 1 };
  s0 -> s3 [70, 70] { R6240 += 1, R6196 += 1, R91 += 1, R92 += 1 };
  s0 -> s4 [70, 70] { R6240 += 1, R6196 += 1, R91 += 1, R92 += 1 };
  s0 -> s1 [71, 65535] { R6240 += 1, R6196 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 69] { R6240 += 1, R6196 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 65535] { R6240 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [70, 70] { R6240 += 1, R6196 += 1, R91 += 1, R92 += 1 };
  s1 -> s4 [70, 70] { R6240 += 1, R6196 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [71, 65535] { R6240 += 1, R6196 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [0, 69] { R6240 += 1, R6196 += 1, R91 += 1, R92 += 1 };
  s2 -> s2 [0, 65535] { R6240 += 1, R6195 += 1, R6196 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [70, 70] { R6240 += 1, R6196 += 1, R91 += 1, R92 += 1 };
  s2 -> s4 [70, 70] { R6240 += 1, R6196 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [71, 65535] { R6240 += 1, R6196 += 1, R91 += 1, R92 += 1 };
  s3 -> s3 [0, 65535] { R6240 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R6240 += 1, R6196 += 1, R91 += 1, R92 += 1 };
  s4 -> s5 [0, 65535] { R6240 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R6240 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 69] { R6242 += 1, R6198 += 1, R3452 += 1 };
  s0 -> s2 [0, 69] { R6242 += 1, R6198 += 1, R3451 += 1, R3452 += 1 };
  s0 -> s3 [0, 69] { R6242 += 1, R6198 += 1, R3452 += 1, R3453 += 1 };
  s0 -> s4 [0, 65535] { R6242 += 1, R6197 += 1, R6198 += 1 };
  s0 -> s0 [0, 65535] { R6241 += 1, R6242 += 1 };
  s0 -> s5 [70, 70] { R6242 += 1, R6198 += 1, R3452 += 1 };
  s0 -> s6 [70, 70] { R6242 += 1, R6198 += 1, R3452 += 1, R3453 += 1 };
  s0 -> s7 [70, 70] { R6242 += 1, R6198 += 1, R3452 += 1, R3453 += 1 };
  s0 -> s8 [70, 70] { R6242 += 1, R6198 += 1, R3451 += 1, R3452 += 1 };
  s0 -> s9 [70, 70] { R6242 += 1, R6198 += 1, R3451 += 1, R3452 += 1 };
  s0 -> s10 [70, 70] { R6242 += 1, R6198 += 1, R3452 += 1 };
  s0 -> s1 [71, 74] { R6242 += 1, R6198 += 1, R3452 += 1 };
  s0 -> s2 [71, 65535] { R6242 += 1, R6198 += 1, R3451 += 1, R3452 += 1 };
  s0 -> s3 [71, 65535] { R6242 += 1, R6198 += 1, R3452 += 1, R3453 += 1 };
  s0 -> s1 [76, 65535] { R6242 += 1, R6198 += 1, R3452 += 1 };
  s1 -> s1 [0, 69] { R6242 += 1, R6198 += 1, R3452 += 1 };
  s1 -> s11 [0, 65535];
  s1 -> s1 [0, 65535] { R6242 += 1 };
  s1 -> s5 [70, 70] { R6242 += 1, R6198 += 1 };
  s1 -> s10 [70, 70] { R6242 += 1, R6198 += 1 };
  s1 -> s1 [71, 74] { R6242 += 1, R6198 += 1, R3452 += 1 };
  s1 -> s1 [71, 65535] { R6242 += 1, R6198 += 1 };
  s1 -> s1 [76, 65535] { R6242 += 1, R6198 += 1, R3452 += 1 };
  s2 -> s1 [0, 69] { R6242 += 1, R6198 += 1, R3452 += 1 };
  s2 -> s2 [0, 69] { R6242 += 1, R6198 += 1, R3451 += 1, R3452 += 1 };
  s2 -> s3 [0, 69] { R6242 += 1, R6198 += 1, R3452 += 1, R3453 += 1 };
  s2 -> s5 [70, 70] { R6242 += 1, R6198 += 1, R3452 += 1 };
  s2 -> s6 [70, 70] { R6242 += 1, R6198 += 1, R3452 += 1, R3453 += 1 };
  s2 -> s7 [70, 70] { R6242 += 1, R6198 += 1, R3452 += 1, R3453 += 1 };
  s2 -> s8 [70, 70] { R6242 += 1, R6198 += 1, R3451 += 1, R3452 += 1 };
  s2 -> s9 [70, 70] { R6242 += 1, R6198 += 1, R3451 += 1, R3452 += 1 };
  s2 -> s10 [70, 70] { R6242 += 1, R6198 += 1, R3452 += 1 };
  s2 -> s1 [71, 74] { R6242 += 1, R6198 += 1, R3452 += 1 };
  s2 -> s2 [71, 65535] { R6242 += 1, R6198 += 1, R3451 += 1, R3452 += 1 };
  s2 -> s3 [71, 65535] { R6242 += 1, R6198 += 1, R3452 += 1, R3453 += 1 };
  s2 -> s1 [76, 65535] { R6242 += 1, R6198 += 1, R3452 += 1 };
  s3 -> s1 [0, 69] { R6242 += 1, R6198 += 1, R3452 += 1 };
  s3 -> s3 [0, 69] { R6242 += 1, R6198 += 1, R3452 += 1, R3453 += 1 };
  s3 -> s5 [70, 70] { R6242 += 1, R6198 += 1, R3452 += 1 };
  s3 -> s6 [70, 70] { R6242 += 1, R6198 += 1, R3452 += 1, R3453 += 1 };
  s3 -> s7 [70, 70] { R6242 += 1, R6198 += 1, R3452 += 1, R3453 += 1 };
  s3 -> s10 [70, 70] { R6242 += 1, R6198 += 1, R3452 += 1 };
  s3 -> s1 [71, 74] { R6242 += 1, R6198 += 1, R3452 += 1 };
  s3 -> s3 [71, 65535] { R6242 += 1, R6198 += 1, R3452 += 1, R3453 += 1 };
  s3 -> s1 [76, 65535] { R6242 += 1, R6198 += 1, R3452 += 1 };
  s4 -> s1 [0, 69] { R6242 += 1, R6198 += 1, R3452 += 1 };
  s4 -> s2 [0, 69] { R6242 += 1, R6198 += 1, R3451 += 1, R3452 += 1 };
  s4 -> s3 [0, 69] { R6242 += 1, R6198 += 1, R3452 += 1, R3453 += 1 };
  s4 -> s4 [0, 65535] { R6242 += 1, R6197 += 1, R6198 += 1 };
  s4 -> s5 [70, 70] { R6242 += 1, R6198 += 1, R3452 += 1 };
  s4 -> s6 [70, 70] { R6242 += 1, R6198 += 1, R3452 += 1, R3453 += 1 };
  s4 -> s7 [70, 70] { R6242 += 1, R6198 += 1, R3452 += 1, R3453 += 1 };
  s4 -> s8 [70, 70] { R6242 += 1, R6198 += 1, R3451 += 1, R3452 += 1 };
  s4 -> s9 [70, 70] { R6242 += 1, R6198 += 1, R3451 += 1, R3452 += 1 };
  s4 -> s10 [70, 70] { R6242 += 1, R6198 += 1, R3452 += 1 };
  s4 -> s1 [71, 74] { R6242 += 1, R6198 += 1, R3452 += 1 };
  s4 -> s2 [71, 65535] { R6242 += 1, R6198 += 1, R3451 += 1, R3452 += 1 };
  s4 -> s3 [71, 65535] { R6242 += 1, R6198 += 1, R3452 += 1, R3453 += 1 };
  s4 -> s1 [76, 65535] { R6242 += 1, R6198 += 1, R3452 += 1 };
  s5 -> s5 [0, 74] { R6242 += 1, R6198 += 1, R3452 += 1 };
  s5 -> s5 [0, 65535] { R6242 += 1, R6198 += 1 };
  s5 -> s12 [0, 65535] { R6242 += 1 };
  s5 -> s11 [0, 65535];
  s5 -> s5 [76, 65535] { R6242 += 1, R6198 += 1, R3452 += 1 };
  s7 -> s5 [0, 74] { R6242 += 1, R6198 += 1, R3452 += 1 };
  s7 -> s7 [0, 65535] { R6242 += 1, R6198 += 1, R3452 += 1, R3453 += 1 };
  s7 -> s5 [76, 65535] { R6242 += 1, R6198 += 1, R3452 += 1 };
  s8 -> s5 [0, 74] { R6242 += 1, R6198 += 1, R3452 += 1 };
  s8 -> s7 [0, 65535] { R6242 += 1, R6198 += 1, R3452 += 1, R3453 += 1 };
  s8 -> s8 [0, 65535] { R6242 += 1, R6198 += 1, R3451 += 1, R3452 += 1 };
  s8 -> s5 [76, 65535] { R6242 += 1, R6198 += 1, R3452 += 1 };
  s10 -> s10 [0, 65535] { R6242 += 1 };
  s10 -> s11 [0, 65535];
  s11 -> s11 [0, 65535];
  s12 -> s12 [0, 65535] { R6242 += 1 };
  s12 -> s11 [0, 65535];
  accepting s12, s5, s1, s10, s11;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 69] { R6244 += 1, R6200 += 1, R5690 += 1, R5692 += 1 };
  s0 -> s2 [0, 69] { R6244 += 1, R6200 += 1, R5689 += 1, R5690 += 1 };
  s0 -> s3 [0, 69] { R6244 += 1, R6200 += 1, R5690 += 1, R5691 += 1, R5692 += 1 };
  s0 -> s4 [0, 65535] { R6244 += 1, R6199 += 1, R6200 += 1 };
  s0 -> s0 [0, 65535] { R6243 += 1, R6244 += 1 };
  s0 -> s5 [70, 70] { R6244 += 1, R6200 += 1, R5690 += 1, R5691 += 1, R5692 += 1 };
  s0 -> s6 [70, 70] { R6244 += 1, R6200 += 1, R5690 += 1, R5692 += 1 };
  s0 -> s7 [70, 70] { R6244 += 1, R6200 += 1, R5690 += 1, R5691 += 1, R5692 += 1 };
  s0 -> s8 [70, 70] { R6244 += 1, R6200 += 1, R5689 += 1, R5690 += 1 };
  s0 -> s9 [70, 70] { R6244 += 1, R6200 += 1, R5690 += 1, R5692 += 1 };
  s0 -> s10 [70, 70] { R6244 += 1, R6200 += 1, R5689 += 1, R5690 += 1 };
  s0 -> s1 [71, 74] { R6244 += 1, R6200 += 1, R5690 += 1, R5692 += 1 };
  s0 -> s2 [71, 65535] { R6244 += 1, R6200 += 1, R5689 += 1, R5690 += 1 };
  s0 -> s3 [71, 65535] { R6244 += 1, R6200 += 1, R5690 += 1, R5691 += 1, R5692 += 1 };
  s0 -> s1 [76, 65535] { R6244 += 1, R6200 += 1, R5690 += 1, R5692 += 1 };
  s1 -> s1 [0, 69] { R6244 += 1, R6200 += 1, R5690 += 1, R5692 += 1 };
  s1 -> s1 [0, 65535] { R6244 += 1 };
  s1 -> s11 [0, 65535];
  s1 -> s6 [70, 70] { R6244 += 1, R6200 += 1, R5690 += 1, R5692 += 1 };
  s1 -> s9 [70, 70] { R6244 += 1, R6200 += 1, R5690 += 1, R5692 += 1 };
  s1 -> s1 [71, 74] { R6244 += 1, R6200 += 1, R5690 += 1, R5692 += 1 };
  s1 -> s1 [76, 65535] { R6244 += 1, R6200 += 1, R5690 += 1, R5692 += 1 };
  s2 -> s1 [0, 69] { R6244 += 1, R6200 += 1, R5690 += 1, R5692 += 1 };
  s2 -> s2 [0, 69] { R6244 += 1, R6200 += 1, R5689 += 1, R5690 += 1 };
  s2 -> s3 [0, 69] { R6244 += 1, R6200 += 1, R5690 += 1, R5691 += 1, R5692 += 1 };
  s2 -> s5 [70, 70] { R6244 += 1, R6200 += 1, R5690 += 1, R5691 += 1, R5692 += 1 };
  s2 -> s6 [70, 70] { R6244 += 1, R6200 += 1, R5690 += 1, R5692 += 1 };
  s2 -> s7 [70, 70] { R6244 += 1, R6200 += 1, R5690 += 1, R5691 += 1, R5692 += 1 };
  s2 -> s8 [70, 70] { R6244 += 1, R6200 += 1, R5689 += 1, R5690 += 1 };
  s2 -> s9 [70, 70] { R6244 += 1, R6200 += 1, R5690 += 1, R5692 += 1 };
  s2 -> s10 [70, 70] { R6244 += 1, R6200 += 1, R5689 += 1, R5690 += 1 };
  s2 -> s1 [71, 74] { R6244 += 1, R6200 += 1, R5690 += 1, R5692 += 1 };
  s2 -> s2 [71, 65535] { R6244 += 1, R6200 += 1, R5689 += 1, R5690 += 1 };
  s2 -> s3 [71, 65535] { R6244 += 1, R6200 += 1, R5690 += 1, R5691 += 1, R5692 += 1 };
  s2 -> s1 [76, 65535] { R6244 += 1, R6200 += 1, R5690 += 1, R5692 += 1 };
  s3 -> s1 [0, 69] { R6244 += 1, R6200 += 1, R5690 += 1, R5692 += 1 };
  s3 -> s3 [0, 69] { R6244 += 1, R6200 += 1, R5690 += 1, R5691 += 1, R5692 += 1 };
  s3 -> s5 [70, 70] { R6244 += 1, R6200 += 1, R5690 += 1, R5691 += 1, R5692 += 1 };
  s3 -> s6 [70, 70] { R6244 += 1, R6200 += 1, R5690 += 1, R5692 += 1 };
  s3 -> s7 [70, 70] { R6244 += 1, R6200 += 1, R5690 += 1, R5691 += 1, R5692 += 1 };
  s3 -> s9 [70, 70] { R6244 += 1, R6200 += 1, R5690 += 1, R5692 += 1 };
  s3 -> s1 [71, 74] { R6244 += 1, R6200 += 1, R5690 += 1, R5692 += 1 };
  s3 -> s3 [71, 65535] { R6244 += 1, R6200 += 1, R5690 += 1, R5691 += 1, R5692 += 1 };
  s3 -> s1 [76, 65535] { R6244 += 1, R6200 += 1, R5690 += 1, R5692 += 1 };
  s4 -> s1 [0, 69] { R6244 += 1, R6200 += 1, R5690 += 1, R5692 += 1 };
  s4 -> s2 [0, 69] { R6244 += 1, R6200 += 1, R5689 += 1, R5690 += 1 };
  s4 -> s3 [0, 69] { R6244 += 1, R6200 += 1, R5690 += 1, R5691 += 1, R5692 += 1 };
  s4 -> s4 [0, 65535] { R6244 += 1, R6199 += 1, R6200 += 1 };
  s4 -> s5 [70, 70] { R6244 += 1, R6200 += 1, R5690 += 1, R5691 += 1, R5692 += 1 };
  s4 -> s6 [70, 70] { R6244 += 1, R6200 += 1, R5690 += 1, R5692 += 1 };
  s4 -> s7 [70, 70] { R6244 += 1, R6200 += 1, R5690 += 1, R5691 += 1, R5692 += 1 };
  s4 -> s8 [70, 70] { R6244 += 1, R6200 += 1, R5689 += 1, R5690 += 1 };
  s4 -> s9 [70, 70] { R6244 += 1, R6200 += 1, R5690 += 1, R5692 += 1 };
  s4 -> s10 [70, 70] { R6244 += 1, R6200 += 1, R5689 += 1, R5690 += 1 };
  s4 -> s1 [71, 74] { R6244 += 1, R6200 += 1, R5690 += 1, R5692 += 1 };
  s4 -> s2 [71, 65535] { R6244 += 1, R6200 += 1, R5689 += 1, R5690 += 1 };
  s4 -> s3 [71, 65535] { R6244 += 1, R6200 += 1, R5690 += 1, R5691 += 1, R5692 += 1 };
  s4 -> s1 [76, 65535] { R6244 += 1, R6200 += 1, R5690 += 1, R5692 += 1 };
  s6 -> s6 [0, 65535] { R6244 += 1 };
  s6 -> s11 [0, 65535];
  s7 -> s9 [0, 74] { R6244 += 1, R6200 += 1, R5690 += 1, R5692 += 1 };
  s7 -> s7 [0, 65535] { R6244 += 1, R6200 += 1, R5690 += 1, R5691 += 1, R5692 += 1 };
  s7 -> s9 [76, 65535] { R6244 += 1, R6200 += 1, R5690 += 1, R5692 += 1 };
  s8 -> s9 [0, 74] { R6244 += 1, R6200 += 1, R5690 += 1, R5692 += 1 };
  s8 -> s7 [0, 65535] { R6244 += 1, R6200 += 1, R5690 += 1, R5691 += 1, R5692 += 1 };
  s8 -> s8 [0, 65535] { R6244 += 1, R6200 += 1, R5689 += 1, R5690 += 1 };
  s8 -> s9 [76, 65535] { R6244 += 1, R6200 += 1, R5690 += 1, R5692 += 1 };
  s9 -> s9 [0, 74] { R6244 += 1, R6200 += 1, R5690 += 1, R5692 += 1 };
  s9 -> s9 [0, 65535] { R6244 += 1 };
  s9 -> s11 [0, 65535];
  s9 -> s9 [76, 65535] { R6244 += 1, R6200 += 1, R5690 += 1, R5692 += 1 };
  s11 -> s11 [0, 65535];
  accepting s1, s6, s9, s11;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 69] { R6246 += 1, R6202 += 1, R6137 += 1, R6138 += 1 };
  s0 -> s2 [0, 69] { R6246 += 1, R6202 += 1, R6138 += 1, R6139 += 1, R6140 += 1 };
  s0 -> s3 [0, 65535] { R6246 += 1, R6201 += 1, R6202 += 1 };
  s0 -> s0 [0, 65535] { R6245 += 1, R6246 += 1 };
  s0 -> s4 [70, 70] { R6246 += 1, R6202 += 1, R6137 += 1, R6138 += 1 };
  s0 -> s5 [70, 70] { R6246 += 1, R6202 += 1, R6138 += 1, R6139 += 1, R6140 += 1 };
  s0 -> s6 [70, 70] { R6246 += 1, R6202 += 1, R6137 += 1, R6138 += 1 };
  s0 -> s7 [70, 70] { R6246 += 1, R6202 += 1, R6138 += 1, R6139 += 1, R6140 += 1 };
  s0 -> s1 [71, 65535] { R6246 += 1, R6202 += 1, R6137 += 1, R6138 += 1 };
  s0 -> s2 [71, 65535] { R6246 += 1, R6202 += 1, R6138 += 1, R6139 += 1, R6140 += 1 };
  s1 -> s1 [0, 69] { R6246 += 1, R6202 += 1, R6137 += 1, R6138 += 1 };
  s1 -> s2 [0, 69] { R6246 += 1, R6202 += 1, R6138 += 1, R6139 += 1, R6140 += 1 };
  s1 -> s4 [70, 70] { R6246 += 1, R6202 += 1, R6137 += 1, R6138 += 1 };
  s1 -> s5 [70, 70] { R6246 += 1, R6202 += 1, R6138 += 1, R6139 += 1, R6140 += 1 };
  s1 -> s6 [70, 70] { R6246 += 1, R6202 += 1, R6137 += 1, R6138 += 1 };
  s1 -> s7 [70, 70] { R6246 += 1, R6202 += 1, R6138 += 1, R6139 += 1, R6140 += 1 };
  s1 -> s1 [71, 65535] { R6246 += 1, R6202 += 1, R6137 += 1, R6138 += 1 };
  s1 -> s2 [71, 65535] { R6246 += 1, R6202 += 1, R6138 += 1, R6139 += 1, R6140 += 1 };
  s2 -> s2 [0, 69] { R6246 += 1, R6202 += 1, R6138 += 1, R6139 += 1, R6140 += 1 };
  s2 -> s2 [0, 65535] { R6246 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s5 [70, 70] { R6246 += 1, R6202 += 1, R6138 += 1, R6139 += 1, R6140 += 1 };
  s2 -> s7 [70, 70] { R6246 += 1, R6202 += 1, R6138 += 1, R6139 += 1, R6140 += 1 };
  s2 -> s2 [71, 65535] { R6246 += 1, R6202 += 1, R6138 += 1, R6139 += 1, R6140 += 1 };
  s3 -> s1 [0, 69] { R6246 += 1, R6202 += 1, R6137 += 1, R6138 += 1 };
  s3 -> s2 [0, 69] { R6246 += 1, R6202 += 1, R6138 += 1, R6139 += 1, R6140 += 1 };
  s3 -> s3 [0, 65535] { R6246 += 1, R6201 += 1, R6202 += 1 };
  s3 -> s4 [70, 70] { R6246 += 1, R6202 += 1, R6137 += 1, R6138 += 1 };
  s3 -> s5 [70, 70] { R6246 += 1, R6202 += 1, R6138 += 1, R6139 += 1, R6140 += 1 };
  s3 -> s6 [70, 70] { R6246 += 1, R6202 += 1, R6137 += 1, R6138 += 1 };
  s3 -> s7 [70, 70] { R6246 += 1, R6202 += 1, R6138 += 1, R6139 += 1, R6140 += 1 };
  s3 -> s1 [71, 65535] { R6246 += 1, R6202 += 1, R6137 += 1, R6138 += 1 };
  s3 -> s2 [71, 65535] { R6246 += 1, R6202 += 1, R6138 += 1, R6139 += 1, R6140 += 1 };
  s5 -> s5 [0, 65535] { R6246 += 1, R6202 += 1, R6138 += 1, R6139 += 1, R6140 += 1 };
  s5 -> s9 [0, 65535] { R6246 += 1 };
  s5 -> s8 [0, 65535];
  s6 -> s5 [0, 65535] { R6246 += 1, R6202 += 1, R6138 += 1, R6139 += 1, R6140 += 1 };
  s6 -> s6 [0, 65535] { R6246 += 1, R6202 += 1, R6137 += 1, R6138 += 1 };
  s7 -> s7 [0, 65535] { R6246 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R6246 += 1 };
  s9 -> s8 [0, 65535];
  accepting s8, s5, s2, s9, s7;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [102, 102];
  accepting s1;
};
};
constraint R2 = R6164 && R3 = R6246 && R23 - R6246 = -1 && R24 = R6246 && R25 - R6246 = -1 && R26 = R6246 && R27 = 0 && R28 = 1 && R29 = 0 && R30 = 1 && R45 + R84 + R83 + -1*R5694 + -1*R5690 - R66 = 0 && R49 + R89 + R87 = 0 && R50 + R90 + R88 + -1*R5694 + -1*R5690 - R66 = 0 && R55 + R96 + R93 + -1*R5696 + -1*R5692 - R68 = 0 && R65 + R5693 + R5689 = 0 && R67 + R5695 + R5691 = 0 && R6163 = 0 && R6187 = 0 && R6188 = 0 && R6193 = 0 && R6194 = 0 && R6197 = 0 && R6198 = 0 && R6199 = 0 && R6200 = 0 && R6201 = 0 && R6202 = 0 && R6203 = 0 && R6204 = R6246 && R6205 = 0 && R6206 = R6246 && R6207 = 0 && R6208 = R6246 && R6209 = 0 && R6210 = R6246 && R6211 = 0 && R6212 = R6246 && R6213 = 0 && R6214 = R6246 && R6215 = 0 && R6216 = R6246 && R6217 = 0 && R6218 = R6246 && R6219 = 0 && R6220 = R6246 && R6221 = 0 && R6222 = R6246 && R6223 = 0 && R6224 = R6246 && R6225 = 0 && R6226 = R6246 && R6227 = 0 && R6228 = R6246 && R6229 = 0 && R6230 = R6246 && R6231 = 0 && R6232 = R6246 && R6233 = 0 && R6234 = R6246 && R6235 = 0 && R6236 = R6246 && R6237 = 0 && R6238 = R6246 && R6239 = 0 && R6240 = R6246 && R6241 = 0 && R6242 = R6246 && R6243 = 0 && R6244 = R6246 && R6245 = 0 && R12 < 1 && R15 < 1 && R16 < 1 && R47 + R86 + R85 < 1 && R61 + R3456 + R3453 < 1 && -1*R5694 + -1*R5690 - R66 < 1 && -1*R5696 + -1*R5692 - R68 < 1 && -1 < R6164 && 0 < R6246 && (R53 + R94 + R91 != 0 || R54 + R95 + R92 + -1*R5694 + -1*R5690 - R66 = 0 || R66 + R5694 + R5690 < 1) && (R59 + R3454 + R3451 != 0 || R60 + R3455 + R3452 + -1*R5694 + -1*R5690 - R66 = 0 || R66 + R5694 + R5690 < 1) && (R66 + R5694 + R5690 != 0 || ((R53 + R94 + R91 != 0 || R54 + R95 + R92 = 0 || R68 + R5696 + R5692 < 1) && (R53 + R94 + R91 = 0 || R68 + R5696 + R5692 < 1))) && (R66 + R5694 + R5690 != 0 || ((R59 + R3454 + R3451 != 0 || R60 + R3455 + R3452 = 0 || R68 + R5696 + R5692 < 1) && (R59 + R3454 + R3451 = 0 || R68 + R5696 + R5692 < 1))) && (R66 + R5694 + R5690 != 0 || ((R73 + R6142 + R6137 != 0 || R74 + R6143 + R6138 = 0 || R68 + R5696 + R5692 < 1) && (R73 + R6142 + R6137 = 0 || R68 + R5696 + R5692 < 1))) && (R68 + R5696 + R5692 != 0 || R77 + R6146 + R6141 = 0 || (R75 + R6144 + R6139 = 0 && R76 + R6145 + R6140 = 0)) && (R73 + R6142 + R6137 != 0 || R66 + R5694 + R5690 + -1*R6143 + -1*R6138 - R74 = 0 || R66 + R5694 + R5690 < 1) && (R75 + R6144 + R6139 != 0 || R68 + R5696 + R5692 + -1*R6145 + -1*R6140 - R76 = 0 || R68 + R5696 + R5692 < 1) && (R6147 != 0 || R6148 = R6164 || (R20 = 0 && R6164 = 0)) && (R6149 != 0 || R6150 = R6164 || (R20 = 0 && R6164 = 0)) && (R6151 != 0 || R6152 = R6164 || (R20 = 0 && R6164 = 0)) && (R6153 != 0 || R6154 = R6164 || (R20 = 0 && R6164 = 0)) && (R6155 != 0 || R6156 = R6164 || (R20 = 0 && R6164 = 0)) && (R6157 != 0 || R6158 = R6164 || (R20 = 0 && R6164 = 0)) && (R6159 != 0 || R6160 = R6164 || (R20 = 0 && R6164 = 0)) && (R6161 != 0 || R6162 = R6164 || (R20 = 0 && R6164 = 0)) && (R6165 != 0 || R6164 = R6166 || (R20 = 0 && R6164 = 0)) && (R21 = 0 || (R6185 = 0 && R6186 = 0)) && (R21 = 0 || (R6189 = 0 && R6190 = 0)) && (R21 = 0 || (R6191 = 0 && R6192 = 0)) && (R21 = 0 || (R6195 = 0 && R6196 = 0)) && (R22 = 0 || (R6167 = 0 && R6168 = 0)) && (R22 = 0 || (R6169 = 0 && R6170 = 0)) && (R22 = 0 || (R6171 = 0 && R6172 = 0)) && (R22 = 0 || (R6173 = 0 && R6174 = 0)) && (R22 = 0 || (R6175 = 0 && R6176 = 0)) && (R22 = 0 || (R6177 = 0 && R6178 = 0)) && (R22 = 0 || (R6179 = 0 && R6180 = 0)) && (R22 = 0 || (R6181 = 0 && R6182 = 0)) && (R22 = 0 || (R6183 = 0 && R6184 = 0)) && (R53 + R94 + R91 = 0 || R66 + R5694 + R5690 < 1) && (R59 + R3454 + R3451 = 0 || R66 + R5694 + R5690 < 1) && (R73 + R6142 + R6137 = 0 || R66 + R5694 + R5690 < 1) && (R75 + R6144 + R6139 = 0 || R68 + R5696 + R5692 < 1) && (R6147 = 0 || (R20 = 0 && R6164 = 0)) && (R6149 = 0 || (R20 = 0 && R6164 = 0)) && (R6151 = 0 || (R20 = 0 && R6164 = 0)) && (R6153 = 0 || (R20 = 0 && R6164 = 0)) && (R6155 = 0 || (R20 = 0 && R6164 = 0)) && (R6157 = 0 || (R20 = 0 && R6164 = 0)) && (R6159 = 0 || (R20 = 0 && R6164 = 0)) && (R6161 = 0 || (R20 = 0 && R6164 = 0)) && (R6165 = 0 || (R20 = 0 && R6164 = 0));
// End of Parikh automata intersection problem
