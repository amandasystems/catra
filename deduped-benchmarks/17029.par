// Parikh automata intersection problem, generated by OSTRICH+
counter int R10159, R10160, R10161, R10162, R10163, R10164, R11839, R11840, R11841, R11842, R11843, R11844, R11845, R11846, R12, R12177, R12178, R12179, R12180, R12181, R12182, R12183, R12184, R12185, R12186, R12187, R12188, R12189, R12190, R12191, R12192, R12193, R12194, R12195, R12196, R12197, R12198, R12199, R12200, R12201, R12202, R12203, R12204, R12205, R12206, R12207, R12208, R12209, R12210, R12211, R12212, R12213, R12214, R12215, R12216, R12217, R12218, R12219, R12220, R12221, R12222, R12223, R12224, R12225, R12226, R12227, R12228, R12229, R12230, R12231, R12232, R12233, R12234, R12235, R12236, R12237, R12238, R12239, R12240, R12241, R12242, R12243, R12244, R12245, R12246, R12247, R12248, R12249, R12250, R12251, R12252, R12253, R12254, R12255, R12256, R12257, R12258, R12259, R12260, R12261, R12262, R12263, R12264, R12265, R12266, R12267, R12268, R12269, R12270, R12271, R12272, R12273, R12274, R12275, R12276, R12277, R12278, R12279, R12280, R12281, R12282, R12283, R12284, R12285, R12286, R15, R16, R2, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R4, R45, R47, R49, R5, R50, R53, R54, R55, R59, R60, R61, R65, R66, R67, R68, R73, R74, R75, R76, R77, R83, R84, R85, R86, R87, R88, R89, R90, R91, R92, R93, R94, R95, R96;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [70, 70];
  s0 -> s0 [71, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [70, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R15 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 69];
  s0 -> s0 [0, 65535] { R16 += 1 };
  s0 -> s2 [70, 70];
  s0 -> s1 [71, 65535];
  s1 -> s1 [0, 69];
  s1 -> s2 [70, 70];
  s1 -> s1 [71, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R24 += 1 };
  s0 -> s0 [0, 65535] { R23 += 1, R24 += 1 };
  s0 -> s2 [9, 13] { R24 += 1 };
  s0 -> s1 [14, 31] { R24 += 1 };
  s0 -> s2 [32, 32] { R24 += 1 };
  s0 -> s1 [33, 65535] { R24 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R24 += 1 };
  s2 -> s1 [0, 65535] { R24 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R25 += 1, R26 += 1 };
  s1 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R28 += 1 };
  s0 -> s0 [0, 65535] { R27 += 1, R28 += 1 };
  s0 -> s2 [9, 13] { R28 += 1 };
  s0 -> s1 [14, 31] { R28 += 1 };
  s0 -> s2 [32, 32] { R28 += 1 };
  s0 -> s1 [33, 65535] { R28 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R28 += 1 };
  s2 -> s1 [0, 65535] { R28 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R29 += 1, R30 += 1 };
  s1 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R12207 += 1, R12208 += 1 };
  s0 -> s1 [0, 65535] { R12208 += 1, R22 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R12208 += 1, R22 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 69] { R12210 += 1 };
  s0 -> s0 [0, 65535] { R12209 += 1, R12210 += 1 };
  s0 -> s2 [70, 70] { R12210 += 1 };
  s0 -> s3 [70, 70] { R12210 += 1 };
  s0 -> s1 [76, 65535] { R12210 += 1 };
  s1 -> s1 [0, 69] { R12210 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R12210 += 1 };
  s1 -> s3 [70, 70] { R12210 += 1 };
  s1 -> s1 [76, 65535] { R12210 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 70] { R12210 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [76, 65535] { R12210 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 69] { R12212 += 1, R45 += 1 };
  s0 -> s0 [0, 65535] { R12211 += 1, R12212 += 1 };
  s0 -> s2 [70, 70] { R12212 += 1, R45 += 1 };
  s0 -> s3 [70, 70] { R12212 += 1, R45 += 1 };
  s0 -> s1 [71, 65535] { R12212 += 1, R45 += 1 };
  s1 -> s1 [0, 69] { R12212 += 1, R45 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R12212 += 1, R45 += 1 };
  s1 -> s3 [70, 70] { R12212 += 1, R45 += 1 };
  s1 -> s1 [71, 65535] { R12212 += 1, R45 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R12212 += 1, R45 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 69] { R12214 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R12213 += 1, R12214 += 1 };
  s0 -> s2 [70, 70] { R12214 += 1, R47 += 1 };
  s0 -> s3 [70, 70] { R12214 += 1, R47 += 1 };
  s0 -> s1 [71, 65535] { R12214 += 1, R47 += 1 };
  s1 -> s1 [0, 69] { R12214 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R12214 += 1, R47 += 1 };
  s1 -> s3 [70, 70] { R12214 += 1, R47 += 1 };
  s1 -> s1 [71, 65535] { R12214 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R12214 += 1, R47 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 69] { R12216 += 1, R49 += 1, R50 += 1 };
  s0 -> s0 [0, 65535] { R12215 += 1, R12216 += 1 };
  s0 -> s2 [70, 70] { R12216 += 1, R49 += 1, R50 += 1 };
  s0 -> s3 [70, 70] { R12216 += 1, R49 += 1, R50 += 1 };
  s0 -> s1 [71, 65535] { R12216 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 69] { R12216 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R12216 += 1, R49 += 1, R50 += 1 };
  s1 -> s3 [70, 70] { R12216 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [71, 65535] { R12216 += 1, R49 += 1, R50 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R12216 += 1, R49 += 1, R50 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 69] { R12218 += 1, R53 += 1, R54 += 1 };
  s0 -> s0 [0, 65535] { R12217 += 1, R12218 += 1 };
  s0 -> s2 [70, 70] { R12218 += 1, R53 += 1, R54 += 1 };
  s0 -> s3 [70, 70] { R12218 += 1, R53 += 1, R54 += 1 };
  s0 -> s1 [71, 65535] { R12218 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 69] { R12218 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R12218 += 1, R53 += 1, R54 += 1 };
  s1 -> s3 [70, 70] { R12218 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [71, 65535] { R12218 += 1, R53 += 1, R54 += 1 };
  s2 -> s2 [0, 65535] { R12218 += 1, R53 += 1, R54 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 69] { R12220 += 1, R59 += 1, R60 += 1 };
  s0 -> s0 [0, 65535] { R12219 += 1, R12220 += 1 };
  s0 -> s2 [70, 70] { R12220 += 1, R59 += 1, R60 += 1 };
  s0 -> s3 [70, 70] { R12220 += 1, R59 += 1, R60 += 1 };
  s0 -> s1 [71, 65535] { R12220 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 69] { R12220 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R12220 += 1, R59 += 1, R60 += 1 };
  s1 -> s3 [70, 70] { R12220 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [71, 65535] { R12220 += 1, R59 += 1, R60 += 1 };
  s2 -> s2 [0, 65535] { R12220 += 1, R59 += 1, R60 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 69] { R12222 += 1, R65 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R12221 += 1, R12222 += 1 };
  s0 -> s2 [70, 70] { R12222 += 1, R65 += 1, R66 += 1 };
  s0 -> s3 [70, 70] { R12222 += 1, R65 += 1, R66 += 1 };
  s0 -> s1 [71, 65535] { R12222 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 69] { R12222 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R12222 += 1, R65 += 1, R66 += 1 };
  s1 -> s3 [70, 70] { R12222 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [71, 65535] { R12222 += 1, R65 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R12222 += 1, R65 += 1, R66 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 69] { R12224 += 1, R73 += 1, R74 += 1 };
  s0 -> s0 [0, 65535] { R12223 += 1, R12224 += 1 };
  s0 -> s2 [70, 70] { R12224 += 1, R73 += 1, R74 += 1 };
  s0 -> s3 [70, 70] { R12224 += 1, R73 += 1, R74 += 1 };
  s0 -> s1 [71, 65535] { R12224 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 69] { R12224 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R12224 += 1, R73 += 1, R74 += 1 };
  s1 -> s3 [70, 70] { R12224 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [71, 65535] { R12224 += 1, R73 += 1, R74 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R12224 += 1, R73 += 1, R74 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 69] { R12244 += 1 };
  s0 -> s0 [0, 65535] { R12243 += 1, R12244 += 1 };
  s0 -> s2 [70, 70] { R12244 += 1 };
  s0 -> s1 [71, 65535] { R12244 += 1 };
  s1 -> s1 [0, 69] { R12244 += 1 };
  s1 -> s2 [70, 70] { R12244 += 1 };
  s1 -> s1 [71, 65535] { R12244 += 1 };
  s2 -> s2 [0, 65535] { R12244 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R12245 += 1, R12246 += 1 };
  s0 -> s1 [0, 65535] { R12246 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R12246 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 69] { R12248 += 1 };
  s0 -> s0 [0, 65535] { R12247 += 1, R12248 += 1 };
  s0 -> s2 [0, 65535] { R12248 += 1, R12 += 1 };
  s0 -> s3 [70, 70] { R12248 += 1 };
  s0 -> s1 [71, 65535] { R12248 += 1 };
  s1 -> s1 [0, 69] { R12248 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [70, 70] { R12248 += 1 };
  s1 -> s1 [71, 65535] { R12248 += 1 };
  s2 -> s1 [0, 69] { R12248 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R12248 += 1, R12 += 1 };
  s2 -> s3 [70, 70] { R12248 += 1 };
  s2 -> s1 [71, 65535] { R12248 += 1 };
  s3 -> s3 [0, 65535] { R12248 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 69] { R12250 += 1, R12188 += 1 };
  s0 -> s2 [0, 65535] { R12250 += 1, R12187 += 1, R12188 += 1 };
  s0 -> s0 [0, 65535] { R12249 += 1, R12250 += 1 };
  s0 -> s1 [71, 65535] { R12250 += 1, R12188 += 1 };
  s1 -> s1 [0, 69] { R12250 += 1, R12188 += 1 };
  s1 -> s1 [0, 65535] { R12250 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [71, 65535] { R12250 += 1, R12188 += 1 };
  s2 -> s1 [0, 69] { R12250 += 1, R12188 += 1 };
  s2 -> s2 [0, 65535] { R12250 += 1, R12187 += 1, R12188 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [71, 65535] { R12250 += 1, R12188 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R12252 += 1, R12190 += 1, R20 += 1 };
  s0 -> s2 [0, 65535] { R12252 += 1, R12189 += 1, R12190 += 1 };
  s0 -> s0 [0, 65535] { R12251 += 1, R12252 += 1 };
  s1 -> s1 [0, 65535] { R12252 += 1, R12190 += 1, R20 += 1 };
  s1 -> s4 [0, 65535] { R12252 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R12252 += 1, R12190 += 1, R20 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R12252 += 1, R12189 += 1, R12190 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R12252 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 70] { R12254 += 1, R12192 += 1 };
  s0 -> s2 [0, 65535] { R12254 += 1, R12191 += 1, R12192 += 1 };
  s0 -> s0 [0, 65535] { R12253 += 1, R12254 += 1 };
  s0 -> s1 [75, 65535] { R12254 += 1, R12192 += 1 };
  s1 -> s1 [0, 70] { R12254 += 1, R12192 += 1 };
  s1 -> s1 [0, 65535] { R12254 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [75, 65535] { R12254 += 1, R12192 += 1 };
  s2 -> s1 [0, 70] { R12254 += 1, R12192 += 1 };
  s2 -> s2 [0, 65535] { R12254 += 1, R12191 += 1, R12192 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [75, 65535] { R12254 += 1, R12192 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R12256 += 1, R12193 += 1, R12194 += 1 };
  s0 -> s2 [0, 65535] { R12256 += 1, R12194 += 1, R84 += 1 };
  s0 -> s0 [0, 65535] { R12255 += 1, R12256 += 1 };
  s1 -> s1 [0, 65535] { R12256 += 1, R12193 += 1, R12194 += 1 };
  s1 -> s2 [0, 65535] { R12256 += 1, R12194 += 1, R84 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R12256 += 1, R12194 += 1, R84 += 1 };
  s2 -> s3 [0, 65535] { R12256 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R12256 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 74] { R12258 += 1, R12196 += 1 };
  s0 -> s2 [0, 65535] { R12258 += 1, R12195 += 1, R12196 += 1 };
  s0 -> s3 [0, 65535] { R12258 += 1, R12196 += 1, R86 += 1 };
  s0 -> s0 [0, 65535] { R12257 += 1, R12258 += 1 };
  s0 -> s1 [76, 65535] { R12258 += 1, R12196 += 1 };
  s1 -> s1 [0, 74] { R12258 += 1, R12196 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R12258 += 1 };
  s1 -> s1 [76, 65535] { R12258 += 1, R12196 += 1 };
  s2 -> s1 [0, 74] { R12258 += 1, R12196 += 1 };
  s2 -> s2 [0, 65535] { R12258 += 1, R12195 += 1, R12196 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R12258 += 1, R12196 += 1, R86 += 1 };
  s2 -> s1 [76, 65535] { R12258 += 1, R12196 += 1 };
  s3 -> s1 [0, 74] { R12258 += 1, R12196 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R12258 += 1, R12196 += 1, R86 += 1 };
  s3 -> s5 [0, 65535] { R12258 += 1 };
  s3 -> s1 [76, 65535] { R12258 += 1, R12196 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R12258 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s0 [0, 65535] { R12259 += 1, R12260 += 1 };
  s0 -> s1 [0, 65535] { R12260 += 1, R12197 += 1, R12198 += 1 };
  s0 -> s2 [0, 65535] { R12260 += 1, R12198 += 1 };
  s0 -> s3 [0, 65535] { R12260 += 1, R12198 += 1, R90 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R12260 += 1, R12197 += 1, R12198 += 1 };
  s1 -> s2 [0, 65535] { R12260 += 1, R12198 += 1 };
  s1 -> s3 [0, 65535] { R12260 += 1, R12198 += 1, R90 += 1 };
  s2 -> s4 [0, 65535] { R12260 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R12260 += 1, R12198 += 1 };
  s3 -> s4 [0, 65535] { R12260 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R12260 += 1, R12198 += 1 };
  s3 -> s3 [0, 65535] { R12260 += 1, R12198 += 1, R90 += 1 };
  s4 -> s4 [0, 65535] { R12260 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R12262 += 1, R12200 += 1, R95 += 1, R96 += 1 };
  s0 -> s0 [0, 65535] { R12261 += 1, R12262 += 1 };
  s0 -> s2 [0, 65535] { R12262 += 1, R12199 += 1, R12200 += 1 };
  s0 -> s3 [0, 65535] { R12262 += 1, R12200 += 1, R94 += 1, R95 += 1 };
  s1 -> s1 [0, 65535] { R12262 += 1, R12200 += 1, R95 += 1, R96 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R12262 += 1 };
  s1 -> s6 [0, 65535] { R12262 += 1, R12200 += 1 };
  s2 -> s1 [0, 65535] { R12262 += 1, R12200 += 1, R95 += 1, R96 += 1 };
  s2 -> s2 [0, 65535] { R12262 += 1, R12199 += 1, R12200 += 1 };
  s2 -> s3 [0, 65535] { R12262 += 1, R12200 += 1, R94 += 1, R95 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R12262 += 1, R12200 += 1, R95 += 1, R96 += 1 };
  s3 -> s3 [0, 65535] { R12262 += 1, R12200 += 1, R94 += 1, R95 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R12262 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R12262 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R12262 += 1 };
  s6 -> s6 [0, 65535] { R12262 += 1, R12200 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 65535] { R12264 += 1, R12201 += 1, R12202 += 1 };
  s0 -> s0 [0, 65535] { R12263 += 1, R12264 += 1 };
  s0 -> s2 [0, 65535] { R12264 += 1, R12202 += 1 };
  s1 -> s1 [0, 65535] { R12264 += 1, R12201 += 1, R12202 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R12264 += 1, R12202 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R12264 += 1, R12202 += 1 };
  s2 -> s4 [0, 65535] { R12264 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R12264 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 74] { R12266 += 1, R12204 += 1, R11844 += 1, R11846 += 1 };
  s0 -> s2 [0, 65535] { R12266 += 1, R12204 += 1, R11843 += 1, R11844 += 1 };
  s0 -> s3 [0, 65535] { R12266 += 1, R12204 += 1, R11844 += 1, R11845 += 1, R11846 += 1 };
  s0 -> s4 [0, 65535] { R12266 += 1, R12203 += 1, R12204 += 1 };
  s0 -> s0 [0, 65535] { R12265 += 1, R12266 += 1 };
  s0 -> s5 [75, 75] { R12266 += 1, R12204 += 1, R11844 += 1, R11846 += 1 };
  s0 -> s1 [76, 65535] { R12266 += 1, R12204 += 1, R11844 += 1, R11846 += 1 };
  s1 -> s1 [0, 74] { R12266 += 1, R12204 += 1, R11844 += 1, R11846 += 1 };
  s1 -> s5 [75, 75] { R12266 += 1, R12204 += 1, R11844 += 1, R11846 += 1 };
  s1 -> s1 [76, 65535] { R12266 += 1, R12204 += 1, R11844 += 1, R11846 += 1 };
  s2 -> s1 [0, 74] { R12266 += 1, R12204 += 1, R11844 += 1, R11846 += 1 };
  s2 -> s2 [0, 65535] { R12266 += 1, R12204 += 1, R11843 += 1, R11844 += 1 };
  s2 -> s3 [0, 65535] { R12266 += 1, R12204 += 1, R11844 += 1, R11845 += 1, R11846 += 1 };
  s2 -> s5 [75, 75] { R12266 += 1, R12204 += 1, R11844 += 1, R11846 += 1 };
  s2 -> s1 [76, 65535] { R12266 += 1, R12204 += 1, R11844 += 1, R11846 += 1 };
  s3 -> s1 [0, 74] { R12266 += 1, R12204 += 1, R11844 += 1, R11846 += 1 };
  s3 -> s3 [0, 65535] { R12266 += 1, R12204 += 1, R11844 += 1, R11845 += 1, R11846 += 1 };
  s3 -> s5 [75, 75] { R12266 += 1, R12204 += 1, R11844 += 1, R11846 += 1 };
  s3 -> s1 [76, 65535] { R12266 += 1, R12204 += 1, R11844 += 1, R11846 += 1 };
  s4 -> s1 [0, 74] { R12266 += 1, R12204 += 1, R11844 += 1, R11846 += 1 };
  s4 -> s2 [0, 65535] { R12266 += 1, R12204 += 1, R11843 += 1, R11844 += 1 };
  s4 -> s3 [0, 65535] { R12266 += 1, R12204 += 1, R11844 += 1, R11845 += 1, R11846 += 1 };
  s4 -> s4 [0, 65535] { R12266 += 1, R12203 += 1, R12204 += 1 };
  s4 -> s5 [75, 75] { R12266 += 1, R12204 += 1, R11844 += 1, R11846 += 1 };
  s4 -> s1 [76, 65535] { R12266 += 1, R12204 += 1, R11844 += 1, R11846 += 1 };
  s5 -> s5 [0, 65535] { R12266 += 1, R12204 += 1, R11844 += 1, R11846 += 1 };
  s5 -> s6 [0, 65535] { R12266 += 1, R12204 += 1, R11844 += 1 };
  s5 -> s7 [0, 65535] { R12266 += 1, R12204 += 1 };
  s5 -> s8 [0, 65535] { R12266 += 1 };
  s5 -> s9 [0, 65535];
  s6 -> s6 [0, 65535] { R12266 += 1, R12204 += 1, R11844 += 1 };
  s6 -> s7 [0, 65535] { R12266 += 1, R12204 += 1 };
  s6 -> s8 [0, 65535] { R12266 += 1 };
  s6 -> s9 [0, 65535];
  s7 -> s7 [0, 65535] { R12266 += 1, R12204 += 1 };
  s7 -> s8 [0, 65535] { R12266 += 1 };
  s7 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R12266 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s8, s5, s9, s6, s7;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 65535] { R12268 += 1, R12206 += 1, R12183 += 1 };
  s0 -> s0 [0, 65535] { R12267 += 1, R12268 += 1 };
  s0 -> s2 [0, 65535] { R12268 += 1, R12206 += 1, R12183 += 1, R12185 += 1, R12186 += 1 };
  s0 -> s3 [0, 65535] { R12268 += 1, R12206 += 1 };
  s0 -> s4 [0, 65535] { R12268 += 1, R12205 += 1, R12206 += 1 };
  s1 -> s1 [0, 65535] { R12268 += 1, R12206 += 1, R12183 += 1 };
  s1 -> s3 [0, 65535] { R12268 += 1, R12206 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R12268 += 1 };
  s2 -> s1 [0, 65535] { R12268 += 1, R12206 += 1, R12183 += 1 };
  s2 -> s2 [0, 65535] { R12268 += 1, R12206 += 1, R12183 += 1, R12185 += 1, R12186 += 1 };
  s2 -> s3 [0, 65535] { R12268 += 1, R12206 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R12268 += 1 };
  s3 -> s3 [0, 65535] { R12268 += 1, R12206 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R12268 += 1 };
  s4 -> s1 [0, 65535] { R12268 += 1, R12206 += 1, R12183 += 1 };
  s4 -> s2 [0, 65535] { R12268 += 1, R12206 += 1, R12183 += 1, R12185 += 1, R12186 += 1 };
  s4 -> s3 [0, 65535] { R12268 += 1, R12206 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R12268 += 1, R12205 += 1, R12206 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R12268 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R12270 += 1, R12225 += 1, R12226 += 1 };
  s0 -> s0 [0, 65535] { R12269 += 1, R12270 += 1 };
  s0 -> s2 [0, 65535] { R12270 += 1, R12226 += 1, R21 += 1 };
  s1 -> s1 [0, 65535] { R12270 += 1, R12225 += 1, R12226 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R12270 += 1, R12226 += 1, R21 += 1 };
  s2 -> s3 [0, 65535] { R12270 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R12270 += 1, R12226 += 1, R21 += 1 };
  s3 -> s3 [0, 65535] { R12270 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 69] { R12272 += 1, R12228 += 1 };
  s0 -> s2 [0, 65535] { R12272 += 1, R12227 += 1, R12228 += 1 };
  s0 -> s0 [0, 65535] { R12271 += 1, R12272 += 1 };
  s0 -> s3 [70, 70] { R12272 += 1, R12228 += 1 };
  s0 -> s4 [70, 70] { R12272 += 1, R12228 += 1 };
  s0 -> s5 [75, 75] { R12272 += 1, R12228 += 1 };
  s0 -> s1 [76, 65535] { R12272 += 1, R12228 += 1 };
  s1 -> s1 [0, 69] { R12272 += 1, R12228 += 1 };
  s1 -> s3 [70, 70] { R12272 += 1, R12228 += 1 };
  s1 -> s4 [70, 70] { R12272 += 1, R12228 += 1 };
  s1 -> s5 [75, 75] { R12272 += 1, R12228 += 1 };
  s1 -> s1 [76, 65535] { R12272 += 1, R12228 += 1 };
  s2 -> s1 [0, 69] { R12272 += 1, R12228 += 1 };
  s2 -> s2 [0, 65535] { R12272 += 1, R12227 += 1, R12228 += 1 };
  s2 -> s3 [70, 70] { R12272 += 1, R12228 += 1 };
  s2 -> s4 [70, 70] { R12272 += 1, R12228 += 1 };
  s2 -> s5 [75, 75] { R12272 += 1, R12228 += 1 };
  s2 -> s1 [76, 65535] { R12272 += 1, R12228 += 1 };
  s4 -> s4 [0, 70] { R12272 += 1, R12228 += 1 };
  s4 -> s7 [75, 75] { R12272 += 1, R12228 += 1 };
  s4 -> s4 [76, 65535] { R12272 += 1, R12228 += 1 };
  s5 -> s5 [0, 69] { R12272 += 1, R12228 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R12272 += 1 };
  s5 -> s7 [70, 70] { R12272 += 1, R12228 += 1 };
  s5 -> s8 [70, 70] { R12272 += 1, R12228 += 1 };
  s5 -> s5 [75, 65535] { R12272 += 1, R12228 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 70] { R12272 += 1, R12228 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R12272 += 1 };
  s7 -> s7 [75, 65535] { R12272 += 1, R12228 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R12272 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 69] { R12274 += 1, R12230 += 1, R83 += 1 };
  s0 -> s2 [0, 65535] { R12274 += 1, R12229 += 1, R12230 += 1 };
  s0 -> s0 [0, 65535] { R12273 += 1, R12274 += 1 };
  s0 -> s3 [70, 70] { R12274 += 1, R12230 += 1, R83 += 1 };
  s0 -> s4 [70, 70] { R12274 += 1, R12230 += 1, R83 += 1 };
  s0 -> s1 [71, 65535] { R12274 += 1, R12230 += 1, R83 += 1 };
  s1 -> s1 [0, 69] { R12274 += 1, R12230 += 1, R83 += 1 };
  s1 -> s1 [0, 65535] { R12274 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [70, 70] { R12274 += 1, R12230 += 1, R83 += 1 };
  s1 -> s4 [70, 70] { R12274 += 1, R12230 += 1, R83 += 1 };
  s1 -> s1 [71, 65535] { R12274 += 1, R12230 += 1, R83 += 1 };
  s2 -> s1 [0, 69] { R12274 += 1, R12230 += 1, R83 += 1 };
  s2 -> s2 [0, 65535] { R12274 += 1, R12229 += 1, R12230 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [70, 70] { R12274 += 1, R12230 += 1, R83 += 1 };
  s2 -> s4 [70, 70] { R12274 += 1, R12230 += 1, R83 += 1 };
  s2 -> s1 [71, 65535] { R12274 += 1, R12230 += 1, R83 += 1 };
  s3 -> s3 [0, 65535] { R12274 += 1, R12230 += 1, R83 += 1 };
  s3 -> s6 [0, 65535] { R12274 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R12274 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R12274 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 69] { R12276 += 1, R12232 += 1, R85 += 1 };
  s0 -> s0 [0, 65535] { R12275 += 1, R12276 += 1 };
  s0 -> s2 [0, 65535] { R12276 += 1, R12231 += 1, R12232 += 1 };
  s0 -> s3 [70, 70] { R12276 += 1, R12232 += 1, R85 += 1 };
  s0 -> s4 [70, 70] { R12276 += 1, R12232 += 1, R85 += 1 };
  s0 -> s1 [71, 65535] { R12276 += 1, R12232 += 1, R85 += 1 };
  s1 -> s1 [0, 69] { R12276 += 1, R12232 += 1, R85 += 1 };
  s1 -> s1 [0, 65535] { R12276 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [70, 70] { R12276 += 1, R12232 += 1, R85 += 1 };
  s1 -> s4 [70, 70] { R12276 += 1, R12232 += 1, R85 += 1 };
  s1 -> s1 [71, 65535] { R12276 += 1, R12232 += 1, R85 += 1 };
  s2 -> s1 [0, 69] { R12276 += 1, R12232 += 1, R85 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R12276 += 1, R12231 += 1, R12232 += 1 };
  s2 -> s3 [70, 70] { R12276 += 1, R12232 += 1, R85 += 1 };
  s2 -> s4 [70, 70] { R12276 += 1, R12232 += 1, R85 += 1 };
  s2 -> s1 [71, 65535] { R12276 += 1, R12232 += 1, R85 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R12276 += 1, R12232 += 1, R85 += 1 };
  s3 -> s6 [0, 65535] { R12276 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R12276 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R12276 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 69] { R12278 += 1, R12234 += 1, R87 += 1, R88 += 1 };
  s0 -> s2 [0, 69] { R12278 += 1, R12234 += 1, R88 += 1 };
  s0 -> s3 [0, 65535] { R12278 += 1, R12233 += 1, R12234 += 1 };
  s0 -> s0 [0, 65535] { R12277 += 1, R12278 += 1 };
  s0 -> s4 [70, 70] { R12278 += 1, R12234 += 1, R88 += 1 };
  s0 -> s5 [70, 70] { R12278 += 1, R12234 += 1, R88 += 1 };
  s0 -> s6 [70, 70] { R12278 += 1, R12234 += 1, R87 += 1, R88 += 1 };
  s0 -> s7 [70, 70] { R12278 += 1, R12234 += 1, R87 += 1, R88 += 1 };
  s0 -> s2 [71, 74] { R12278 += 1, R12234 += 1, R88 += 1 };
  s0 -> s1 [71, 65535] { R12278 += 1, R12234 += 1, R87 += 1, R88 += 1 };
  s0 -> s8 [75, 75] { R12278 += 1, R12234 += 1, R88 += 1 };
  s0 -> s2 [76, 65535] { R12278 += 1, R12234 += 1, R88 += 1 };
  s1 -> s1 [0, 69] { R12278 += 1, R12234 += 1, R87 += 1, R88 += 1 };
  s1 -> s2 [0, 69] { R12278 += 1, R12234 += 1, R88 += 1 };
  s1 -> s4 [70, 70] { R12278 += 1, R12234 += 1, R88 += 1 };
  s1 -> s5 [70, 70] { R12278 += 1, R12234 += 1, R88 += 1 };
  s1 -> s6 [70, 70] { R12278 += 1, R12234 += 1, R87 += 1, R88 += 1 };
  s1 -> s7 [70, 70] { R12278 += 1, R12234 += 1, R87 += 1, R88 += 1 };
  s1 -> s2 [71, 74] { R12278 += 1, R12234 += 1, R88 += 1 };
  s1 -> s1 [71, 65535] { R12278 += 1, R12234 += 1, R87 += 1, R88 += 1 };
  s1 -> s8 [75, 75] { R12278 += 1, R12234 += 1, R88 += 1 };
  s1 -> s2 [76, 65535] { R12278 += 1, R12234 += 1, R88 += 1 };
  s2 -> s2 [0, 69] { R12278 += 1, R12234 += 1, R88 += 1 };
  s2 -> s4 [70, 70] { R12278 += 1, R12234 += 1, R88 += 1 };
  s2 -> s5 [70, 70] { R12278 += 1, R12234 += 1, R88 += 1 };
  s2 -> s2 [71, 74] { R12278 += 1, R12234 += 1, R88 += 1 };
  s2 -> s8 [75, 75] { R12278 += 1, R12234 += 1, R88 += 1 };
  s2 -> s2 [76, 65535] { R12278 += 1, R12234 += 1, R88 += 1 };
  s3 -> s1 [0, 69] { R12278 += 1, R12234 += 1, R87 += 1, R88 += 1 };
  s3 -> s2 [0, 69] { R12278 += 1, R12234 += 1, R88 += 1 };
  s3 -> s3 [0, 65535] { R12278 += 1, R12233 += 1, R12234 += 1 };
  s3 -> s4 [70, 70] { R12278 += 1, R12234 += 1, R88 += 1 };
  s3 -> s5 [70, 70] { R12278 += 1, R12234 += 1, R88 += 1 };
  s3 -> s6 [70, 70] { R12278 += 1, R12234 += 1, R87 += 1, R88 += 1 };
  s3 -> s7 [70, 70] { R12278 += 1, R12234 += 1, R87 += 1, R88 += 1 };
  s3 -> s2 [71, 74] { R12278 += 1, R12234 += 1, R88 += 1 };
  s3 -> s1 [71, 65535] { R12278 += 1, R12234 += 1, R87 += 1, R88 += 1 };
  s3 -> s8 [75, 75] { R12278 += 1, R12234 += 1, R88 += 1 };
  s3 -> s2 [76, 65535] { R12278 += 1, R12234 += 1, R88 += 1 };
  s5 -> s5 [0, 74] { R12278 += 1, R12234 += 1, R88 += 1 };
  s5 -> s11 [75, 75] { R12278 += 1, R12234 += 1, R88 += 1 };
  s5 -> s5 [76, 65535] { R12278 += 1, R12234 += 1, R88 += 1 };
  s6 -> s5 [0, 74] { R12278 += 1, R12234 += 1, R88 += 1 };
  s6 -> s6 [0, 65535] { R12278 += 1, R12234 += 1, R87 += 1, R88 += 1 };
  s6 -> s11 [75, 75] { R12278 += 1, R12234 += 1, R88 += 1 };
  s6 -> s5 [76, 65535] { R12278 += 1, R12234 += 1, R88 += 1 };
  s8 -> s8 [0, 69] { R12278 += 1, R12234 += 1, R88 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R12278 += 1 };
  s8 -> s10 [70, 70] { R12278 += 1, R12234 += 1, R88 += 1 };
  s8 -> s11 [70, 70] { R12278 += 1, R12234 += 1, R88 += 1 };
  s8 -> s8 [71, 65535] { R12278 += 1, R12234 += 1, R88 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R12278 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R12278 += 1, R12234 += 1, R88 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s12 [0, 65535] { R12278 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R12278 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 69] { R12280 += 1, R12236 += 1, R91 += 1, R92 += 1 };
  s0 -> s0 [0, 65535] { R12279 += 1, R12280 += 1 };
  s0 -> s2 [0, 65535] { R12280 += 1, R12235 += 1, R12236 += 1 };
  s0 -> s3 [70, 70] { R12280 += 1, R12236 += 1, R91 += 1, R92 += 1 };
  s0 -> s4 [70, 70] { R12280 += 1, R12236 += 1, R91 += 1, R92 += 1 };
  s0 -> s1 [71, 65535] { R12280 += 1, R12236 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 69] { R12280 += 1, R12236 += 1, R91 += 1, R92 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R12280 += 1 };
  s1 -> s3 [70, 70] { R12280 += 1, R12236 += 1, R91 += 1, R92 += 1 };
  s1 -> s4 [70, 70] { R12280 += 1, R12236 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [71, 65535] { R12280 += 1, R12236 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [0, 69] { R12280 += 1, R12236 += 1, R91 += 1, R92 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R12280 += 1, R12235 += 1, R12236 += 1 };
  s2 -> s3 [70, 70] { R12280 += 1, R12236 += 1, R91 += 1, R92 += 1 };
  s2 -> s4 [70, 70] { R12280 += 1, R12236 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [71, 65535] { R12280 += 1, R12236 += 1, R91 += 1, R92 += 1 };
  s3 -> s3 [0, 65535] { R12280 += 1, R12236 += 1, R91 += 1, R92 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R12280 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R12280 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R12280 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 69] { R12282 += 1, R12238 += 1, R10160 += 1, R10161 += 1 };
  s0 -> s2 [0, 69] { R12282 += 1, R12238 += 1, R10159 += 1, R10160 += 1 };
  s0 -> s0 [0, 65535] { R12281 += 1, R12282 += 1 };
  s0 -> s3 [0, 65535] { R12282 += 1, R12237 += 1, R12238 += 1 };
  s0 -> s4 [70, 70] { R12282 += 1, R12238 += 1, R10160 += 1, R10161 += 1 };
  s0 -> s5 [70, 70] { R12282 += 1, R12238 += 1, R10160 += 1, R10161 += 1 };
  s0 -> s6 [70, 70] { R12282 += 1, R12238 += 1, R10159 += 1, R10160 += 1 };
  s0 -> s7 [70, 70] { R12282 += 1, R12238 += 1, R10159 += 1, R10160 += 1 };
  s0 -> s1 [71, 65535] { R12282 += 1, R12238 += 1, R10160 += 1, R10161 += 1 };
  s0 -> s2 [71, 65535] { R12282 += 1, R12238 += 1, R10159 += 1, R10160 += 1 };
  s1 -> s11 [0, 69] { R12282 += 1, R12238 += 1 };
  s1 -> s1 [0, 69] { R12282 += 1, R12238 += 1, R10160 += 1, R10161 += 1 };
  s1 -> s4 [70, 70] { R12282 += 1, R12238 += 1, R10160 += 1, R10161 += 1 };
  s1 -> s5 [70, 70] { R12282 += 1, R12238 += 1, R10160 += 1, R10161 += 1 };
  s1 -> s12 [70, 70] { R12282 += 1, R12238 += 1 };
  s1 -> s8 [70, 70] { R12282 += 1, R12238 += 1 };
  s1 -> s11 [71, 65535] { R12282 += 1, R12238 += 1 };
  s1 -> s1 [71, 65535] { R12282 += 1, R12238 += 1, R10160 += 1, R10161 += 1 };
  s2 -> s1 [0, 69] { R12282 += 1, R12238 += 1, R10160 += 1, R10161 += 1 };
  s2 -> s2 [0, 69] { R12282 += 1, R12238 += 1, R10159 += 1, R10160 += 1 };
  s2 -> s4 [70, 70] { R12282 += 1, R12238 += 1, R10160 += 1, R10161 += 1 };
  s2 -> s5 [70, 70] { R12282 += 1, R12238 += 1, R10160 += 1, R10161 += 1 };
  s2 -> s6 [70, 70] { R12282 += 1, R12238 += 1, R10159 += 1, R10160 += 1 };
  s2 -> s7 [70, 70] { R12282 += 1, R12238 += 1, R10159 += 1, R10160 += 1 };
  s2 -> s1 [71, 65535] { R12282 += 1, R12238 += 1, R10160 += 1, R10161 += 1 };
  s2 -> s2 [71, 65535] { R12282 += 1, R12238 += 1, R10159 += 1, R10160 += 1 };
  s3 -> s1 [0, 69] { R12282 += 1, R12238 += 1, R10160 += 1, R10161 += 1 };
  s3 -> s2 [0, 69] { R12282 += 1, R12238 += 1, R10159 += 1, R10160 += 1 };
  s3 -> s3 [0, 65535] { R12282 += 1, R12237 += 1, R12238 += 1 };
  s3 -> s4 [70, 70] { R12282 += 1, R12238 += 1, R10160 += 1, R10161 += 1 };
  s3 -> s5 [70, 70] { R12282 += 1, R12238 += 1, R10160 += 1, R10161 += 1 };
  s3 -> s6 [70, 70] { R12282 += 1, R12238 += 1, R10159 += 1, R10160 += 1 };
  s3 -> s7 [70, 70] { R12282 += 1, R12238 += 1, R10159 += 1, R10160 += 1 };
  s3 -> s1 [71, 65535] { R12282 += 1, R12238 += 1, R10160 += 1, R10161 += 1 };
  s3 -> s2 [71, 65535] { R12282 += 1, R12238 += 1, R10159 += 1, R10160 += 1 };
  s5 -> s5 [0, 65535] { R12282 += 1, R12238 += 1, R10160 += 1, R10161 += 1 };
  s5 -> s8 [0, 65535] { R12282 += 1, R12238 += 1 };
  s6 -> s5 [0, 65535] { R12282 += 1, R12238 += 1, R10160 += 1, R10161 += 1 };
  s6 -> s6 [0, 65535] { R12282 += 1, R12238 += 1, R10159 += 1, R10160 += 1 };
  s8 -> s9 [0, 65535] { R12282 += 1 };
  s8 -> s10 [0, 65535];
  s8 -> s8 [0, 65535] { R12282 += 1, R12238 += 1 };
  s9 -> s9 [0, 65535] { R12282 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s11 [0, 69] { R12282 += 1, R12238 += 1 };
  s11 -> s11 [0, 65535] { R12282 += 1 };
  s11 -> s10 [0, 65535];
  s11 -> s12 [70, 70] { R12282 += 1, R12238 += 1 };
  s11 -> s8 [70, 70] { R12282 += 1, R12238 += 1 };
  s11 -> s11 [71, 65535] { R12282 += 1, R12238 += 1 };
  s12 -> s12 [0, 65535] { R12282 += 1 };
  s12 -> s10 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 69] { R12284 += 1, R12240 += 1, R11839 += 1, R11840 += 1 };
  s0 -> s0 [0, 65535] { R12283 += 1, R12284 += 1 };
  s0 -> s2 [0, 65535] { R12284 += 1, R12239 += 1, R12240 += 1 };
  s0 -> s3 [70, 70] { R12284 += 1, R12240 += 1, R11839 += 1, R11840 += 1 };
  s0 -> s4 [70, 70] { R12284 += 1, R12240 += 1, R11839 += 1, R11840 += 1 };
  s0 -> s1 [71, 65535] { R12284 += 1, R12240 += 1, R11839 += 1, R11840 += 1 };
  s1 -> s1 [0, 69] { R12284 += 1, R12240 += 1, R11839 += 1, R11840 += 1 };
  s1 -> s1 [0, 65535] { R12284 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [70, 70] { R12284 += 1, R12240 += 1, R11839 += 1, R11840 += 1 };
  s1 -> s4 [70, 70] { R12284 += 1, R12240 += 1, R11839 += 1, R11840 += 1 };
  s1 -> s1 [71, 65535] { R12284 += 1, R12240 += 1, R11839 += 1, R11840 += 1 };
  s2 -> s1 [0, 69] { R12284 += 1, R12240 += 1, R11839 += 1, R11840 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R12284 += 1, R12239 += 1, R12240 += 1 };
  s2 -> s3 [70, 70] { R12284 += 1, R12240 += 1, R11839 += 1, R11840 += 1 };
  s2 -> s4 [70, 70] { R12284 += 1, R12240 += 1, R11839 += 1, R11840 += 1 };
  s2 -> s1 [71, 65535] { R12284 += 1, R12240 += 1, R11839 += 1, R11840 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R12284 += 1 };
  s4 -> s4 [0, 65535] { R12284 += 1, R12240 += 1, R11839 += 1, R11840 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R12284 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R12284 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 69] { R12286 += 1, R12242 += 1, R12177 += 1, R12178 += 1 };
  s0 -> s2 [0, 69] { R12286 += 1, R12242 += 1, R12178 += 1, R12180 += 1, R12181 += 1 };
  s0 -> s3 [0, 69] { R12286 += 1, R12242 += 1, R12178 += 1, R12179 += 1, R12180 += 1 };
  s0 -> s4 [0, 65535] { R12286 += 1, R12241 += 1, R12242 += 1 };
  s0 -> s0 [0, 65535] { R12285 += 1, R12286 += 1 };
  s0 -> s5 [70, 70] { R12286 += 1, R12242 += 1, R12178 += 1, R12179 += 1, R12180 += 1 };
  s0 -> s6 [70, 70] { R12286 += 1, R12242 += 1, R12177 += 1, R12178 += 1 };
  s0 -> s7 [70, 70] { R12286 += 1, R12242 += 1, R12178 += 1, R12180 += 1, R12181 += 1 };
  s0 -> s8 [70, 70] { R12286 += 1, R12242 += 1, R12178 += 1, R12179 += 1, R12180 += 1 };
  s0 -> s9 [70, 70] { R12286 += 1, R12242 += 1, R12177 += 1, R12178 += 1 };
  s0 -> s10 [70, 70] { R12286 += 1, R12242 += 1, R12178 += 1, R12180 += 1, R12181 += 1 };
  s0 -> s1 [71, 65535] { R12286 += 1, R12242 += 1, R12177 += 1, R12178 += 1 };
  s0 -> s2 [71, 65535] { R12286 += 1, R12242 += 1, R12178 += 1, R12180 += 1, R12181 += 1 };
  s0 -> s3 [71, 65535] { R12286 += 1, R12242 += 1, R12178 += 1, R12179 += 1, R12180 += 1 };
  s1 -> s1 [0, 69] { R12286 += 1, R12242 += 1, R12177 += 1, R12178 += 1 };
  s1 -> s2 [0, 69] { R12286 += 1, R12242 += 1, R12178 += 1, R12180 += 1, R12181 += 1 };
  s1 -> s3 [0, 69] { R12286 += 1, R12242 += 1, R12178 += 1, R12179 += 1, R12180 += 1 };
  s1 -> s5 [70, 70] { R12286 += 1, R12242 += 1, R12178 += 1, R12179 += 1, R12180 += 1 };
  s1 -> s6 [70, 70] { R12286 += 1, R12242 += 1, R12177 += 1, R12178 += 1 };
  s1 -> s7 [70, 70] { R12286 += 1, R12242 += 1, R12178 += 1, R12180 += 1, R12181 += 1 };
  s1 -> s8 [70, 70] { R12286 += 1, R12242 += 1, R12178 += 1, R12179 += 1, R12180 += 1 };
  s1 -> s9 [70, 70] { R12286 += 1, R12242 += 1, R12177 += 1, R12178 += 1 };
  s1 -> s10 [70, 70] { R12286 += 1, R12242 += 1, R12178 += 1, R12180 += 1, R12181 += 1 };
  s1 -> s1 [71, 65535] { R12286 += 1, R12242 += 1, R12177 += 1, R12178 += 1 };
  s1 -> s2 [71, 65535] { R12286 += 1, R12242 += 1, R12178 += 1, R12180 += 1, R12181 += 1 };
  s1 -> s3 [71, 65535] { R12286 += 1, R12242 += 1, R12178 += 1, R12179 += 1, R12180 += 1 };
  s2 -> s2 [0, 69] { R12286 += 1, R12242 += 1, R12178 += 1, R12180 += 1, R12181 += 1 };
  s2 -> s11 [0, 65535];
  s2 -> s2 [0, 65535] { R12286 += 1 };
  s2 -> s7 [70, 70] { R12286 += 1, R12242 += 1, R12178 += 1, R12180 += 1, R12181 += 1 };
  s2 -> s10 [70, 70] { R12286 += 1, R12242 += 1, R12178 += 1, R12180 += 1, R12181 += 1 };
  s2 -> s2 [71, 65535] { R12286 += 1, R12242 += 1, R12178 += 1, R12180 += 1, R12181 += 1 };
  s3 -> s2 [0, 69] { R12286 += 1, R12242 += 1, R12178 += 1, R12180 += 1, R12181 += 1 };
  s3 -> s3 [0, 69] { R12286 += 1, R12242 += 1, R12178 += 1, R12179 += 1, R12180 += 1 };
  s3 -> s5 [70, 70] { R12286 += 1, R12242 += 1, R12178 += 1, R12179 += 1, R12180 += 1 };
  s3 -> s7 [70, 70] { R12286 += 1, R12242 += 1, R12178 += 1, R12180 += 1, R12181 += 1 };
  s3 -> s8 [70, 70] { R12286 += 1, R12242 += 1, R12178 += 1, R12179 += 1, R12180 += 1 };
  s3 -> s10 [70, 70] { R12286 += 1, R12242 += 1, R12178 += 1, R12180 += 1, R12181 += 1 };
  s3 -> s2 [71, 65535] { R12286 += 1, R12242 += 1, R12178 += 1, R12180 += 1, R12181 += 1 };
  s3 -> s3 [71, 65535] { R12286 += 1, R12242 += 1, R12178 += 1, R12179 += 1, R12180 += 1 };
  s4 -> s1 [0, 69] { R12286 += 1, R12242 += 1, R12177 += 1, R12178 += 1 };
  s4 -> s2 [0, 69] { R12286 += 1, R12242 += 1, R12178 += 1, R12180 += 1, R12181 += 1 };
  s4 -> s3 [0, 69] { R12286 += 1, R12242 += 1, R12178 += 1, R12179 += 1, R12180 += 1 };
  s4 -> s4 [0, 65535] { R12286 += 1, R12241 += 1, R12242 += 1 };
  s4 -> s5 [70, 70] { R12286 += 1, R12242 += 1, R12178 += 1, R12179 += 1, R12180 += 1 };
  s4 -> s6 [70, 70] { R12286 += 1, R12242 += 1, R12177 += 1, R12178 += 1 };
  s4 -> s7 [70, 70] { R12286 += 1, R12242 += 1, R12178 += 1, R12180 += 1, R12181 += 1 };
  s4 -> s8 [70, 70] { R12286 += 1, R12242 += 1, R12178 += 1, R12179 += 1, R12180 += 1 };
  s4 -> s9 [70, 70] { R12286 += 1, R12242 += 1, R12177 += 1, R12178 += 1 };
  s4 -> s10 [70, 70] { R12286 += 1, R12242 += 1, R12178 += 1, R12180 += 1, R12181 += 1 };
  s4 -> s1 [71, 65535] { R12286 += 1, R12242 += 1, R12177 += 1, R12178 += 1 };
  s4 -> s2 [71, 65535] { R12286 += 1, R12242 += 1, R12178 += 1, R12180 += 1, R12181 += 1 };
  s4 -> s3 [71, 65535] { R12286 += 1, R12242 += 1, R12178 += 1, R12179 += 1, R12180 += 1 };
  s5 -> s5 [0, 65535] { R12286 += 1, R12242 += 1, R12178 += 1, R12179 += 1, R12180 += 1 };
  s5 -> s7 [0, 65535] { R12286 += 1, R12242 += 1, R12178 += 1, R12180 += 1, R12181 += 1 };
  s7 -> s12 [0, 65535] { R12286 += 1 };
  s7 -> s11 [0, 65535];
  s7 -> s7 [0, 65535] { R12286 += 1, R12242 += 1, R12178 += 1, R12180 += 1, R12181 += 1 };
  s9 -> s5 [0, 65535] { R12286 += 1, R12242 += 1, R12178 += 1, R12179 += 1, R12180 += 1 };
  s9 -> s7 [0, 65535] { R12286 += 1, R12242 += 1, R12178 += 1, R12180 += 1, R12181 += 1 };
  s9 -> s9 [0, 65535] { R12286 += 1, R12242 += 1, R12177 += 1, R12178 += 1 };
  s10 -> s11 [0, 65535];
  s10 -> s10 [0, 65535] { R12286 += 1 };
  s11 -> s11 [0, 65535];
  s12 -> s12 [0, 65535] { R12286 += 1 };
  s12 -> s11 [0, 65535];
  accepting s12, s2, s7, s10, s11;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [102, 102];
  accepting s1;
};
};
constraint R2 = R12204 && R3 = R12286 && R23 - R12286 = -1 && R24 = R12286 && R25 - R12286 = -1 && R26 = R12286 && R27 = 0 && R28 = 1 && R29 = 0 && R30 = 1 && R45 + R84 + R83 + -1*R11844 + -1*R11840 - R66 = 0 && R49 + R89 + R87 = 0 && R50 + R90 + R88 + -1*R11844 + -1*R11840 - R66 = 0 && R55 + R96 + R93 + -1*R11846 + -1*R11842 - R68 = 0 && R65 + R11843 + R11839 = 0 && R67 + R11845 + R11841 = 0 && R12203 = 0 && R12227 = 0 && R12228 = 0 && R12233 = 0 && R12234 = 0 && R12237 = 0 && R12238 = 0 && R12241 = 0 && R12242 = 0 && R12243 = 0 && R12244 = R12286 && R12245 = 0 && R12246 = R12286 && R12247 = 0 && R12248 = R12286 && R12249 = 0 && R12250 = R12286 && R12251 = 0 && R12252 = R12286 && R12253 = 0 && R12254 = R12286 && R12255 = 0 && R12256 = R12286 && R12257 = 0 && R12258 = R12286 && R12259 = 0 && R12260 = R12286 && R12261 = 0 && R12262 = R12286 && R12263 = 0 && R12264 = R12286 && R12265 = 0 && R12266 = R12286 && R12267 = 0 && R12268 = R12286 && R12269 = 0 && R12270 = R12286 && R12271 = 0 && R12272 = R12286 && R12273 = 0 && R12274 = R12286 && R12275 = 0 && R12276 = R12286 && R12277 = 0 && R12278 = R12286 && R12279 = 0 && R12280 = R12286 && R12281 = 0 && R12282 = R12286 && R12283 = 0 && R12284 = R12286 && R12285 = 0 && R12 < 1 && R15 < 1 && R16 < 1 && R47 + R86 + R85 < 1 && R61 + R10164 + R10161 < 1 && -1*R11844 + -1*R11840 - R66 < 1 && -1*R11846 + -1*R11842 - R68 < 1 && -1 < R12204 && 0 < R12286 && (R53 + R94 + R91 != 0 || R54 + R95 + R92 + -1*R11844 + -1*R11840 - R66 = 0 || R66 + R11844 + R11840 < 1) && (R59 + R10162 + R10159 != 0 || R60 + R10163 + R10160 + -1*R11844 + -1*R11840 - R66 = 0 || R66 + R11844 + R11840 < 1) && (R66 + R11844 + R11840 != 0 || ((R53 + R94 + R91 != 0 || R54 + R95 + R92 = 0 || R68 + R11846 + R11842 < 1) && (R53 + R94 + R91 = 0 || R68 + R11846 + R11842 < 1))) && (R66 + R11844 + R11840 != 0 || ((R59 + R10162 + R10159 != 0 || R60 + R10163 + R10160 = 0 || R68 + R11846 + R11842 < 1) && (R59 + R10162 + R10159 = 0 || R68 + R11846 + R11842 < 1))) && (R66 + R11844 + R11840 != 0 || ((R73 + R12182 + R12177 != 0 || R74 + R12183 + R12178 = 0 || R68 + R11846 + R11842 < 1) && (R73 + R12182 + R12177 = 0 || R68 + R11846 + R11842 < 1))) && (R68 + R11846 + R11842 != 0 || R77 + R12186 + R12181 = 0 || (R75 + R12184 + R12179 = 0 && R76 + R12185 + R12180 = 0)) && (R73 + R12182 + R12177 != 0 || R66 + R11844 + R11840 + -1*R12183 + -1*R12178 - R74 = 0 || R66 + R11844 + R11840 < 1) && (R75 + R12184 + R12179 != 0 || R68 + R11846 + R11842 + -1*R12185 + -1*R12180 - R76 = 0 || R68 + R11846 + R11842 < 1) && (R12187 != 0 || R12188 = R12204 || (R20 = 0 && R12204 = 0)) && (R12189 != 0 || R12190 = R12204 || (R20 = 0 && R12204 = 0)) && (R12191 != 0 || R12192 = R12204 || (R20 = 0 && R12204 = 0)) && (R12193 != 0 || R12194 = R12204 || (R20 = 0 && R12204 = 0)) && (R12195 != 0 || R12196 = R12204 || (R20 = 0 && R12204 = 0)) && (R12197 != 0 || R12198 = R12204 || (R20 = 0 && R12204 = 0)) && (R12199 != 0 || R12200 = R12204 || (R20 = 0 && R12204 = 0)) && (R12201 != 0 || R12202 = R12204 || (R20 = 0 && R12204 = 0)) && (R12205 != 0 || R12204 = R12206 || (R20 = 0 && R12204 = 0)) && (R21 = 0 || (R12225 = 0 && R12226 = 0)) && (R21 = 0 || (R12229 = 0 && R12230 = 0)) && (R21 = 0 || (R12231 = 0 && R12232 = 0)) && (R21 = 0 || (R12235 = 0 && R12236 = 0)) && (R21 = 0 || (R12239 = 0 && R12240 = 0)) && (R22 = 0 || (R12207 = 0 && R12208 = 0)) && (R22 = 0 || (R12209 = 0 && R12210 = 0)) && (R22 = 0 || (R12211 = 0 && R12212 = 0)) && (R22 = 0 || (R12213 = 0 && R12214 = 0)) && (R22 = 0 || (R12215 = 0 && R12216 = 0)) && (R22 = 0 || (R12217 = 0 && R12218 = 0)) && (R22 = 0 || (R12219 = 0 && R12220 = 0)) && (R22 = 0 || (R12221 = 0 && R12222 = 0)) && (R22 = 0 || (R12223 = 0 && R12224 = 0)) && (R53 + R94 + R91 = 0 || R66 + R11844 + R11840 < 1) && (R59 + R10162 + R10159 = 0 || R66 + R11844 + R11840 < 1) && (R73 + R12182 + R12177 = 0 || R66 + R11844 + R11840 < 1) && (R75 + R12184 + R12179 = 0 || R68 + R11846 + R11842 < 1) && (R12187 = 0 || (R20 = 0 && R12204 = 0)) && (R12189 = 0 || (R20 = 0 && R12204 = 0)) && (R12191 = 0 || (R20 = 0 && R12204 = 0)) && (R12193 = 0 || (R20 = 0 && R12204 = 0)) && (R12195 = 0 || (R20 = 0 && R12204 = 0)) && (R12197 = 0 || (R20 = 0 && R12204 = 0)) && (R12199 = 0 || (R20 = 0 && R12204 = 0)) && (R12201 = 0 || (R20 = 0 && R12204 = 0)) && (R12205 = 0 || (R20 = 0 && R12204 = 0));
// End of Parikh automata intersection problem
