// Parikh automata intersection problem, generated by OSTRICH+
counter int R10159, R10160, R10161, R10162, R10163, R10164, R10723, R10724, R10725, R10726, R10727, R10728, R10729, R10730, R10731, R10732, R10733, R10734, R10735, R10736, R10737, R10738, R10739, R10740, R10741, R10742, R10743, R10744, R10745, R10746, R10747, R10748, R10749, R10750, R10751, R10752, R10753, R10754, R10755, R10756, R10757, R10758, R10759, R10760, R10761, R10762, R10763, R10764, R10765, R10766, R10767, R10768, R10769, R10770, R10771, R10772, R10773, R10774, R10775, R10776, R10777, R10778, R10779, R10780, R10781, R10782, R10783, R10784, R10785, R10786, R10787, R10788, R10789, R10790, R10791, R10792, R10793, R10794, R10795, R10796, R10797, R10798, R10799, R10800, R10801, R10802, R10803, R10804, R10805, R10806, R10807, R10808, R10809, R10810, R10811, R10812, R10813, R10814, R10815, R10816, R10817, R10818, R10819, R10820, R10821, R10822, R10823, R10824, R10825, R10826, R10827, R10828, R10829, R10830, R10831, R10832, R10833, R10834, R10835, R10836, R10837, R10838, R10839, R10840, R12, R15, R16, R2, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R4, R45, R47, R49, R5, R50, R53, R54, R55, R59, R60, R61, R65, R66, R67, R68, R73, R74, R75, R76, R77, R83, R84, R85, R86, R87, R88, R89, R90, R91, R92, R93, R94, R95, R96;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [70, 70];
  s0 -> s0 [71, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [70, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R15 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 69];
  s0 -> s0 [0, 65535] { R16 += 1 };
  s0 -> s2 [70, 70];
  s0 -> s1 [71, 65535];
  s1 -> s1 [0, 69];
  s1 -> s2 [70, 70];
  s1 -> s1 [71, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R24 += 1 };
  s0 -> s0 [0, 65535] { R23 += 1, R24 += 1 };
  s0 -> s2 [9, 13] { R24 += 1 };
  s0 -> s1 [14, 31] { R24 += 1 };
  s0 -> s2 [32, 32] { R24 += 1 };
  s0 -> s1 [33, 65535] { R24 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R24 += 1 };
  s2 -> s1 [0, 65535] { R24 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R25 += 1, R26 += 1 };
  s1 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R28 += 1 };
  s0 -> s0 [0, 65535] { R27 += 1, R28 += 1 };
  s0 -> s2 [9, 13] { R28 += 1 };
  s0 -> s1 [14, 31] { R28 += 1 };
  s0 -> s2 [32, 32] { R28 += 1 };
  s0 -> s1 [33, 65535] { R28 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R28 += 1 };
  s2 -> s1 [0, 65535] { R28 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R29 += 1, R30 += 1 };
  s1 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R10762 += 1, R22 += 1 };
  s0 -> s0 [0, 65535] { R10761 += 1, R10762 += 1 };
  s1 -> s1 [0, 65535] { R10762 += 1, R22 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 69] { R10764 += 1 };
  s0 -> s0 [0, 65535] { R10763 += 1, R10764 += 1 };
  s0 -> s2 [70, 70] { R10764 += 1 };
  s0 -> s3 [70, 70] { R10764 += 1 };
  s0 -> s1 [76, 65535] { R10764 += 1 };
  s1 -> s1 [0, 69] { R10764 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R10764 += 1 };
  s1 -> s3 [70, 70] { R10764 += 1 };
  s1 -> s1 [76, 65535] { R10764 += 1 };
  s2 -> s2 [0, 70] { R10764 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [76, 65535] { R10764 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 69] { R10766 += 1, R45 += 1 };
  s0 -> s0 [0, 65535] { R10765 += 1, R10766 += 1 };
  s0 -> s2 [70, 70] { R10766 += 1, R45 += 1 };
  s0 -> s3 [70, 70] { R10766 += 1, R45 += 1 };
  s0 -> s1 [71, 65535] { R10766 += 1, R45 += 1 };
  s1 -> s1 [0, 69] { R10766 += 1, R45 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R10766 += 1, R45 += 1 };
  s1 -> s3 [70, 70] { R10766 += 1, R45 += 1 };
  s1 -> s1 [71, 65535] { R10766 += 1, R45 += 1 };
  s2 -> s2 [0, 65535] { R10766 += 1, R45 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 69] { R10768 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R10767 += 1, R10768 += 1 };
  s0 -> s2 [70, 70] { R10768 += 1, R47 += 1 };
  s0 -> s3 [70, 70] { R10768 += 1, R47 += 1 };
  s0 -> s1 [71, 65535] { R10768 += 1, R47 += 1 };
  s1 -> s1 [0, 69] { R10768 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R10768 += 1, R47 += 1 };
  s1 -> s3 [70, 70] { R10768 += 1, R47 += 1 };
  s1 -> s1 [71, 65535] { R10768 += 1, R47 += 1 };
  s2 -> s2 [0, 65535] { R10768 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 69] { R10770 += 1, R49 += 1, R50 += 1 };
  s0 -> s0 [0, 65535] { R10769 += 1, R10770 += 1 };
  s0 -> s2 [70, 70] { R10770 += 1, R49 += 1, R50 += 1 };
  s0 -> s3 [70, 70] { R10770 += 1, R49 += 1, R50 += 1 };
  s0 -> s1 [71, 65535] { R10770 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 69] { R10770 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R10770 += 1, R49 += 1, R50 += 1 };
  s1 -> s3 [70, 70] { R10770 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [71, 65535] { R10770 += 1, R49 += 1, R50 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10770 += 1, R49 += 1, R50 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 69] { R10772 += 1, R53 += 1, R54 += 1 };
  s0 -> s0 [0, 65535] { R10771 += 1, R10772 += 1 };
  s0 -> s2 [70, 70] { R10772 += 1, R53 += 1, R54 += 1 };
  s0 -> s3 [70, 70] { R10772 += 1, R53 += 1, R54 += 1 };
  s0 -> s1 [71, 65535] { R10772 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 69] { R10772 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R10772 += 1, R53 += 1, R54 += 1 };
  s1 -> s3 [70, 70] { R10772 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [71, 65535] { R10772 += 1, R53 += 1, R54 += 1 };
  s2 -> s2 [0, 65535] { R10772 += 1, R53 += 1, R54 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 69] { R10774 += 1, R59 += 1, R60 += 1 };
  s0 -> s0 [0, 65535] { R10773 += 1, R10774 += 1 };
  s0 -> s2 [70, 70] { R10774 += 1, R59 += 1, R60 += 1 };
  s0 -> s3 [70, 70] { R10774 += 1, R59 += 1, R60 += 1 };
  s0 -> s1 [71, 65535] { R10774 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 69] { R10774 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R10774 += 1, R59 += 1, R60 += 1 };
  s1 -> s3 [70, 70] { R10774 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [71, 65535] { R10774 += 1, R59 += 1, R60 += 1 };
  s2 -> s2 [0, 65535] { R10774 += 1, R59 += 1, R60 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 69] { R10776 += 1, R65 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R10775 += 1, R10776 += 1 };
  s0 -> s2 [70, 70] { R10776 += 1, R65 += 1, R66 += 1 };
  s0 -> s3 [70, 70] { R10776 += 1, R65 += 1, R66 += 1 };
  s0 -> s1 [71, 65535] { R10776 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 69] { R10776 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R10776 += 1, R65 += 1, R66 += 1 };
  s1 -> s3 [70, 70] { R10776 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [71, 65535] { R10776 += 1, R65 += 1, R66 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R10776 += 1, R65 += 1, R66 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 69] { R10778 += 1, R73 += 1, R74 += 1 };
  s0 -> s0 [0, 65535] { R10777 += 1, R10778 += 1 };
  s0 -> s2 [70, 70] { R10778 += 1, R73 += 1, R74 += 1 };
  s0 -> s3 [70, 70] { R10778 += 1, R73 += 1, R74 += 1 };
  s0 -> s1 [71, 65535] { R10778 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 69] { R10778 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R10778 += 1, R73 += 1, R74 += 1 };
  s1 -> s3 [70, 70] { R10778 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [71, 65535] { R10778 += 1, R73 += 1, R74 += 1 };
  s2 -> s2 [0, 65535] { R10778 += 1, R73 += 1, R74 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 69] { R10798 += 1 };
  s0 -> s0 [0, 65535] { R10797 += 1, R10798 += 1 };
  s0 -> s2 [70, 70] { R10798 += 1 };
  s0 -> s1 [71, 65535] { R10798 += 1 };
  s1 -> s1 [0, 69] { R10798 += 1 };
  s1 -> s2 [70, 70] { R10798 += 1 };
  s1 -> s1 [71, 65535] { R10798 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10798 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R10800 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R10799 += 1, R10800 += 1 };
  s1 -> s1 [0, 65535] { R10800 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 69] { R10802 += 1 };
  s0 -> s2 [0, 65535] { R10802 += 1, R12 += 1 };
  s0 -> s0 [0, 65535] { R10801 += 1, R10802 += 1 };
  s0 -> s3 [70, 70] { R10802 += 1 };
  s0 -> s1 [71, 65535] { R10802 += 1 };
  s1 -> s1 [0, 69] { R10802 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [70, 70] { R10802 += 1 };
  s1 -> s1 [71, 65535] { R10802 += 1 };
  s2 -> s1 [0, 69] { R10802 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10802 += 1, R12 += 1 };
  s2 -> s3 [70, 70] { R10802 += 1 };
  s2 -> s1 [71, 65535] { R10802 += 1 };
  s3 -> s3 [0, 65535] { R10802 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 69] { R10804 += 1, R10742 += 1 };
  s0 -> s0 [0, 65535] { R10803 += 1, R10804 += 1 };
  s0 -> s2 [0, 65535] { R10804 += 1, R10741 += 1, R10742 += 1 };
  s0 -> s1 [71, 65535] { R10804 += 1, R10742 += 1 };
  s1 -> s1 [0, 69] { R10804 += 1, R10742 += 1 };
  s1 -> s1 [0, 65535] { R10804 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [71, 65535] { R10804 += 1, R10742 += 1 };
  s2 -> s1 [0, 69] { R10804 += 1, R10742 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10804 += 1, R10741 += 1, R10742 += 1 };
  s2 -> s1 [71, 65535] { R10804 += 1, R10742 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R10806 += 1, R10744 += 1, R20 += 1 };
  s0 -> s2 [0, 65535] { R10806 += 1, R10743 += 1, R10744 += 1 };
  s0 -> s0 [0, 65535] { R10805 += 1, R10806 += 1 };
  s1 -> s1 [0, 65535] { R10806 += 1, R10744 += 1, R20 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R10806 += 1 };
  s2 -> s1 [0, 65535] { R10806 += 1, R10744 += 1, R20 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10806 += 1, R10743 += 1, R10744 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10806 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 70] { R10808 += 1, R10746 += 1 };
  s0 -> s0 [0, 65535] { R10807 += 1, R10808 += 1 };
  s0 -> s2 [0, 65535] { R10808 += 1, R10745 += 1, R10746 += 1 };
  s0 -> s1 [75, 65535] { R10808 += 1, R10746 += 1 };
  s1 -> s1 [0, 70] { R10808 += 1, R10746 += 1 };
  s1 -> s1 [0, 65535] { R10808 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [75, 65535] { R10808 += 1, R10746 += 1 };
  s2 -> s1 [0, 70] { R10808 += 1, R10746 += 1 };
  s2 -> s2 [0, 65535] { R10808 += 1, R10745 += 1, R10746 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [75, 65535] { R10808 += 1, R10746 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R10810 += 1, R10748 += 1, R84 += 1 };
  s0 -> s0 [0, 65535] { R10809 += 1, R10810 += 1 };
  s0 -> s2 [0, 65535] { R10810 += 1, R10747 += 1, R10748 += 1 };
  s1 -> s4 [0, 65535] { R10810 += 1 };
  s1 -> s1 [0, 65535] { R10810 += 1, R10748 += 1, R84 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10810 += 1, R10748 += 1, R84 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10810 += 1, R10747 += 1, R10748 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10810 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 74] { R10812 += 1, R10750 += 1 };
  s0 -> s2 [0, 65535] { R10812 += 1, R10750 += 1, R86 += 1 };
  s0 -> s0 [0, 65535] { R10811 += 1, R10812 += 1 };
  s0 -> s3 [0, 65535] { R10812 += 1, R10749 += 1, R10750 += 1 };
  s0 -> s1 [76, 65535] { R10812 += 1, R10750 += 1 };
  s1 -> s1 [0, 74] { R10812 += 1, R10750 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R10812 += 1 };
  s1 -> s1 [76, 65535] { R10812 += 1, R10750 += 1 };
  s2 -> s1 [0, 74] { R10812 += 1, R10750 += 1 };
  s2 -> s5 [0, 65535] { R10812 += 1 };
  s2 -> s2 [0, 65535] { R10812 += 1, R10750 += 1, R86 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [76, 65535] { R10812 += 1, R10750 += 1 };
  s3 -> s1 [0, 74] { R10812 += 1, R10750 += 1 };
  s3 -> s2 [0, 65535] { R10812 += 1, R10750 += 1, R86 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10812 += 1, R10749 += 1, R10750 += 1 };
  s3 -> s1 [76, 65535] { R10812 += 1, R10750 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10812 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s0 [0, 65535] { R10813 += 1, R10814 += 1 };
  s0 -> s1 [0, 65535] { R10814 += 1, R10751 += 1, R10752 += 1 };
  s0 -> s2 [0, 65535] { R10814 += 1, R10752 += 1 };
  s0 -> s3 [0, 65535] { R10814 += 1, R10752 += 1, R90 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R10814 += 1, R10751 += 1, R10752 += 1 };
  s1 -> s2 [0, 65535] { R10814 += 1, R10752 += 1 };
  s1 -> s3 [0, 65535] { R10814 += 1, R10752 += 1, R90 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R10814 += 1 };
  s2 -> s2 [0, 65535] { R10814 += 1, R10752 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R10814 += 1 };
  s3 -> s2 [0, 65535] { R10814 += 1, R10752 += 1 };
  s3 -> s3 [0, 65535] { R10814 += 1, R10752 += 1, R90 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10814 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s0 [0, 65535] { R10815 += 1, R10816 += 1 };
  s0 -> s1 [0, 65535] { R10816 += 1, R10754 += 1, R94 += 1, R95 += 1 };
  s0 -> s2 [0, 65535] { R10816 += 1, R10753 += 1, R10754 += 1 };
  s0 -> s3 [0, 65535] { R10816 += 1, R10754 += 1, R95 += 1, R96 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10816 += 1, R10754 += 1, R94 += 1, R95 += 1 };
  s1 -> s6 [0, 65535] { R10816 += 1 };
  s1 -> s3 [0, 65535] { R10816 += 1, R10754 += 1, R95 += 1, R96 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R10816 += 1, R10754 += 1, R94 += 1, R95 += 1 };
  s2 -> s2 [0, 65535] { R10816 += 1, R10753 += 1, R10754 += 1 };
  s2 -> s3 [0, 65535] { R10816 += 1, R10754 += 1, R95 += 1, R96 += 1 };
  s3 -> s4 [0, 65535] { R10816 += 1, R10754 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R10816 += 1 };
  s3 -> s3 [0, 65535] { R10816 += 1, R10754 += 1, R95 += 1, R96 += 1 };
  s4 -> s4 [0, 65535] { R10816 += 1, R10754 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R10816 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10816 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 65535] { R10818 += 1, R10755 += 1, R10756 += 1 };
  s0 -> s2 [0, 65535] { R10818 += 1, R10756 += 1 };
  s0 -> s0 [0, 65535] { R10817 += 1, R10818 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R10818 += 1, R10755 += 1, R10756 += 1 };
  s1 -> s2 [0, 65535] { R10818 += 1, R10756 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10818 += 1, R10756 += 1 };
  s2 -> s4 [0, 65535] { R10818 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10818 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R10820 += 1, R10757 += 1, R10758 += 1 };
  s0 -> s2 [0, 65535] { R10820 += 1, R10758 += 1, R10728 += 1 };
  s0 -> s0 [0, 65535] { R10819 += 1, R10820 += 1 };
  s0 -> s3 [0, 65535] { R10820 += 1, R10758 += 1 };
  s1 -> s1 [0, 65535] { R10820 += 1, R10757 += 1, R10758 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R10820 += 1, R10758 += 1, R10728 += 1 };
  s1 -> s3 [0, 65535] { R10820 += 1, R10758 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R10820 += 1 };
  s2 -> s2 [0, 65535] { R10820 += 1, R10758 += 1, R10728 += 1 };
  s2 -> s3 [0, 65535] { R10820 += 1, R10758 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R10820 += 1 };
  s3 -> s3 [0, 65535] { R10820 += 1, R10758 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10820 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s0 [0, 65535] { R10821 += 1, R10822 += 1 };
  s0 -> s1 [0, 65535] { R10822 += 1, R10760 += 1, R10737 += 1 };
  s0 -> s2 [0, 65535] { R10822 += 1, R10760 += 1 };
  s0 -> s3 [0, 65535] { R10822 += 1, R10759 += 1, R10760 += 1 };
  s1 -> s5 [0, 65535] { R10822 += 1 };
  s1 -> s1 [0, 65535] { R10822 += 1, R10760 += 1, R10737 += 1 };
  s1 -> s2 [0, 65535] { R10822 += 1, R10760 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R10822 += 1 };
  s2 -> s2 [0, 65535] { R10822 += 1, R10760 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R10822 += 1, R10760 += 1, R10737 += 1 };
  s3 -> s2 [0, 65535] { R10822 += 1, R10760 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10822 += 1, R10759 += 1, R10760 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10822 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s0 [0, 65535] { R10823 += 1, R10824 += 1 };
  s0 -> s1 [0, 65535] { R10824 += 1, R10780 += 1, R21 += 1 };
  s0 -> s2 [0, 65535] { R10824 += 1, R10779 += 1, R10780 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R10824 += 1 };
  s1 -> s1 [0, 65535] { R10824 += 1, R10780 += 1, R21 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10824 += 1, R10780 += 1, R21 += 1 };
  s2 -> s2 [0, 65535] { R10824 += 1, R10779 += 1, R10780 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10824 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 69] { R10826 += 1, R10782 += 1 };
  s0 -> s0 [0, 65535] { R10825 += 1, R10826 += 1 };
  s0 -> s2 [0, 65535] { R10826 += 1, R10781 += 1, R10782 += 1 };
  s0 -> s3 [70, 70] { R10826 += 1, R10782 += 1 };
  s0 -> s4 [70, 70] { R10826 += 1, R10782 += 1 };
  s0 -> s5 [75, 75] { R10826 += 1, R10782 += 1 };
  s0 -> s1 [76, 65535] { R10826 += 1, R10782 += 1 };
  s1 -> s1 [0, 69] { R10826 += 1, R10782 += 1 };
  s1 -> s3 [70, 70] { R10826 += 1, R10782 += 1 };
  s1 -> s4 [70, 70] { R10826 += 1, R10782 += 1 };
  s1 -> s5 [75, 75] { R10826 += 1, R10782 += 1 };
  s1 -> s1 [76, 65535] { R10826 += 1, R10782 += 1 };
  s2 -> s1 [0, 69] { R10826 += 1, R10782 += 1 };
  s2 -> s2 [0, 65535] { R10826 += 1, R10781 += 1, R10782 += 1 };
  s2 -> s3 [70, 70] { R10826 += 1, R10782 += 1 };
  s2 -> s4 [70, 70] { R10826 += 1, R10782 += 1 };
  s2 -> s5 [75, 75] { R10826 += 1, R10782 += 1 };
  s2 -> s1 [76, 65535] { R10826 += 1, R10782 += 1 };
  s4 -> s4 [0, 70] { R10826 += 1, R10782 += 1 };
  s4 -> s8 [75, 75] { R10826 += 1, R10782 += 1 };
  s4 -> s4 [76, 65535] { R10826 += 1, R10782 += 1 };
  s5 -> s5 [0, 69] { R10826 += 1, R10782 += 1 };
  s5 -> s5 [0, 65535] { R10826 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [70, 70] { R10826 += 1, R10782 += 1 };
  s5 -> s8 [70, 70] { R10826 += 1, R10782 += 1 };
  s5 -> s5 [75, 65535] { R10826 += 1, R10782 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R10826 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 70] { R10826 += 1, R10782 += 1 };
  s8 -> s8 [0, 65535] { R10826 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [75, 65535] { R10826 += 1, R10782 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 69] { R10828 += 1, R10784 += 1, R83 += 1 };
  s0 -> s2 [0, 65535] { R10828 += 1, R10783 += 1, R10784 += 1 };
  s0 -> s0 [0, 65535] { R10827 += 1, R10828 += 1 };
  s0 -> s3 [70, 70] { R10828 += 1, R10784 += 1, R83 += 1 };
  s0 -> s4 [70, 70] { R10828 += 1, R10784 += 1, R83 += 1 };
  s0 -> s1 [71, 65535] { R10828 += 1, R10784 += 1, R83 += 1 };
  s1 -> s1 [0, 69] { R10828 += 1, R10784 += 1, R83 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R10828 += 1 };
  s1 -> s3 [70, 70] { R10828 += 1, R10784 += 1, R83 += 1 };
  s1 -> s4 [70, 70] { R10828 += 1, R10784 += 1, R83 += 1 };
  s1 -> s1 [71, 65535] { R10828 += 1, R10784 += 1, R83 += 1 };
  s2 -> s1 [0, 69] { R10828 += 1, R10784 += 1, R83 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R10828 += 1, R10783 += 1, R10784 += 1 };
  s2 -> s3 [70, 70] { R10828 += 1, R10784 += 1, R83 += 1 };
  s2 -> s4 [70, 70] { R10828 += 1, R10784 += 1, R83 += 1 };
  s2 -> s1 [71, 65535] { R10828 += 1, R10784 += 1, R83 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R10828 += 1 };
  s4 -> s5 [0, 65535] { R10828 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R10828 += 1, R10784 += 1, R83 += 1 };
  s5 -> s5 [0, 65535] { R10828 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 69] { R10830 += 1, R10786 += 1, R85 += 1 };
  s0 -> s0 [0, 65535] { R10829 += 1, R10830 += 1 };
  s0 -> s2 [0, 65535] { R10830 += 1, R10785 += 1, R10786 += 1 };
  s0 -> s3 [70, 70] { R10830 += 1, R10786 += 1, R85 += 1 };
  s0 -> s4 [70, 70] { R10830 += 1, R10786 += 1, R85 += 1 };
  s0 -> s1 [71, 65535] { R10830 += 1, R10786 += 1, R85 += 1 };
  s1 -> s1 [0, 69] { R10830 += 1, R10786 += 1, R85 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10830 += 1 };
  s1 -> s3 [70, 70] { R10830 += 1, R10786 += 1, R85 += 1 };
  s1 -> s4 [70, 70] { R10830 += 1, R10786 += 1, R85 += 1 };
  s1 -> s1 [71, 65535] { R10830 += 1, R10786 += 1, R85 += 1 };
  s2 -> s1 [0, 69] { R10830 += 1, R10786 += 1, R85 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10830 += 1, R10785 += 1, R10786 += 1 };
  s2 -> s3 [70, 70] { R10830 += 1, R10786 += 1, R85 += 1 };
  s2 -> s4 [70, 70] { R10830 += 1, R10786 += 1, R85 += 1 };
  s2 -> s1 [71, 65535] { R10830 += 1, R10786 += 1, R85 += 1 };
  s3 -> s3 [0, 65535] { R10830 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R10830 += 1 };
  s4 -> s4 [0, 65535] { R10830 += 1, R10786 += 1, R85 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10830 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 69] { R10832 += 1, R10788 += 1, R88 += 1 };
  s0 -> s2 [0, 69] { R10832 += 1, R10788 += 1, R87 += 1, R88 += 1 };
  s0 -> s3 [0, 65535] { R10832 += 1, R10787 += 1, R10788 += 1 };
  s0 -> s0 [0, 65535] { R10831 += 1, R10832 += 1 };
  s0 -> s4 [70, 70] { R10832 += 1, R10788 += 1, R88 += 1 };
  s0 -> s5 [70, 70] { R10832 += 1, R10788 += 1, R87 += 1, R88 += 1 };
  s0 -> s6 [70, 70] { R10832 += 1, R10788 += 1, R87 += 1, R88 += 1 };
  s0 -> s7 [70, 70] { R10832 += 1, R10788 += 1, R88 += 1 };
  s0 -> s1 [71, 74] { R10832 += 1, R10788 += 1, R88 += 1 };
  s0 -> s2 [71, 65535] { R10832 += 1, R10788 += 1, R87 += 1, R88 += 1 };
  s0 -> s8 [75, 75] { R10832 += 1, R10788 += 1, R88 += 1 };
  s0 -> s1 [76, 65535] { R10832 += 1, R10788 += 1, R88 += 1 };
  s1 -> s1 [0, 69] { R10832 += 1, R10788 += 1, R88 += 1 };
  s1 -> s4 [70, 70] { R10832 += 1, R10788 += 1, R88 += 1 };
  s1 -> s7 [70, 70] { R10832 += 1, R10788 += 1, R88 += 1 };
  s1 -> s1 [71, 74] { R10832 += 1, R10788 += 1, R88 += 1 };
  s1 -> s8 [75, 75] { R10832 += 1, R10788 += 1, R88 += 1 };
  s1 -> s1 [76, 65535] { R10832 += 1, R10788 += 1, R88 += 1 };
  s2 -> s1 [0, 69] { R10832 += 1, R10788 += 1, R88 += 1 };
  s2 -> s2 [0, 69] { R10832 += 1, R10788 += 1, R87 += 1, R88 += 1 };
  s2 -> s4 [70, 70] { R10832 += 1, R10788 += 1, R88 += 1 };
  s2 -> s5 [70, 70] { R10832 += 1, R10788 += 1, R87 += 1, R88 += 1 };
  s2 -> s6 [70, 70] { R10832 += 1, R10788 += 1, R87 += 1, R88 += 1 };
  s2 -> s7 [70, 70] { R10832 += 1, R10788 += 1, R88 += 1 };
  s2 -> s1 [71, 74] { R10832 += 1, R10788 += 1, R88 += 1 };
  s2 -> s2 [71, 65535] { R10832 += 1, R10788 += 1, R87 += 1, R88 += 1 };
  s2 -> s8 [75, 75] { R10832 += 1, R10788 += 1, R88 += 1 };
  s2 -> s1 [76, 65535] { R10832 += 1, R10788 += 1, R88 += 1 };
  s3 -> s1 [0, 69] { R10832 += 1, R10788 += 1, R88 += 1 };
  s3 -> s2 [0, 69] { R10832 += 1, R10788 += 1, R87 += 1, R88 += 1 };
  s3 -> s3 [0, 65535] { R10832 += 1, R10787 += 1, R10788 += 1 };
  s3 -> s4 [70, 70] { R10832 += 1, R10788 += 1, R88 += 1 };
  s3 -> s5 [70, 70] { R10832 += 1, R10788 += 1, R87 += 1, R88 += 1 };
  s3 -> s6 [70, 70] { R10832 += 1, R10788 += 1, R87 += 1, R88 += 1 };
  s3 -> s7 [70, 70] { R10832 += 1, R10788 += 1, R88 += 1 };
  s3 -> s1 [71, 74] { R10832 += 1, R10788 += 1, R88 += 1 };
  s3 -> s2 [71, 65535] { R10832 += 1, R10788 += 1, R87 += 1, R88 += 1 };
  s3 -> s8 [75, 75] { R10832 += 1, R10788 += 1, R88 += 1 };
  s3 -> s1 [76, 65535] { R10832 += 1, R10788 += 1, R88 += 1 };
  s4 -> s4 [0, 74] { R10832 += 1, R10788 += 1, R88 += 1 };
  s4 -> s11 [75, 75] { R10832 += 1, R10788 += 1, R88 += 1 };
  s4 -> s4 [76, 65535] { R10832 += 1, R10788 += 1, R88 += 1 };
  s5 -> s4 [0, 74] { R10832 += 1, R10788 += 1, R88 += 1 };
  s5 -> s5 [0, 65535] { R10832 += 1, R10788 += 1, R87 += 1, R88 += 1 };
  s5 -> s11 [75, 75] { R10832 += 1, R10788 += 1, R88 += 1 };
  s5 -> s4 [76, 65535] { R10832 += 1, R10788 += 1, R88 += 1 };
  s8 -> s8 [0, 69] { R10832 += 1, R10788 += 1, R88 += 1 };
  s8 -> s8 [0, 65535] { R10832 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [70, 70] { R10832 += 1, R10788 += 1, R88 += 1 };
  s8 -> s11 [70, 70] { R10832 += 1, R10788 += 1, R88 += 1 };
  s8 -> s8 [71, 65535] { R10832 += 1, R10788 += 1, R88 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R10832 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R10832 += 1, R10788 += 1, R88 += 1 };
  s11 -> s12 [0, 65535] { R10832 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R10832 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 69] { R10834 += 1, R10790 += 1, R91 += 1, R92 += 1 };
  s0 -> s2 [0, 65535] { R10834 += 1, R10789 += 1, R10790 += 1 };
  s0 -> s0 [0, 65535] { R10833 += 1, R10834 += 1 };
  s0 -> s3 [70, 70] { R10834 += 1, R10790 += 1, R91 += 1, R92 += 1 };
  s0 -> s4 [70, 70] { R10834 += 1, R10790 += 1, R91 += 1, R92 += 1 };
  s0 -> s1 [71, 65535] { R10834 += 1, R10790 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 69] { R10834 += 1, R10790 += 1, R91 += 1, R92 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R10834 += 1 };
  s1 -> s3 [70, 70] { R10834 += 1, R10790 += 1, R91 += 1, R92 += 1 };
  s1 -> s4 [70, 70] { R10834 += 1, R10790 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [71, 65535] { R10834 += 1, R10790 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [0, 69] { R10834 += 1, R10790 += 1, R91 += 1, R92 += 1 };
  s2 -> s2 [0, 65535] { R10834 += 1, R10789 += 1, R10790 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [70, 70] { R10834 += 1, R10790 += 1, R91 += 1, R92 += 1 };
  s2 -> s4 [70, 70] { R10834 += 1, R10790 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [71, 65535] { R10834 += 1, R10790 += 1, R91 += 1, R92 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R10834 += 1 };
  s4 -> s5 [0, 65535] { R10834 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R10834 += 1, R10790 += 1, R91 += 1, R92 += 1 };
  s5 -> s5 [0, 65535] { R10834 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 69] { R10836 += 1, R10792 += 1, R10160 += 1, R10161 += 1 };
  s0 -> s2 [0, 69] { R10836 += 1, R10792 += 1, R10159 += 1, R10160 += 1 };
  s0 -> s0 [0, 65535] { R10835 += 1, R10836 += 1 };
  s0 -> s3 [0, 65535] { R10836 += 1, R10791 += 1, R10792 += 1 };
  s0 -> s4 [70, 70] { R10836 += 1, R10792 += 1, R10160 += 1, R10161 += 1 };
  s0 -> s5 [70, 70] { R10836 += 1, R10792 += 1, R10159 += 1, R10160 += 1 };
  s0 -> s6 [70, 70] { R10836 += 1, R10792 += 1, R10160 += 1, R10161 += 1 };
  s0 -> s7 [70, 70] { R10836 += 1, R10792 += 1, R10159 += 1, R10160 += 1 };
  s0 -> s1 [71, 65535] { R10836 += 1, R10792 += 1, R10160 += 1, R10161 += 1 };
  s0 -> s2 [71, 65535] { R10836 += 1, R10792 += 1, R10159 += 1, R10160 += 1 };
  s1 -> s1 [0, 69] { R10836 += 1, R10792 += 1, R10160 += 1, R10161 += 1 };
  s1 -> s11 [0, 69] { R10836 += 1, R10792 += 1 };
  s1 -> s4 [70, 70] { R10836 += 1, R10792 += 1, R10160 += 1, R10161 += 1 };
  s1 -> s6 [70, 70] { R10836 += 1, R10792 += 1, R10160 += 1, R10161 += 1 };
  s1 -> s8 [70, 70] { R10836 += 1, R10792 += 1 };
  s1 -> s12 [70, 70] { R10836 += 1, R10792 += 1 };
  s1 -> s1 [71, 65535] { R10836 += 1, R10792 += 1, R10160 += 1, R10161 += 1 };
  s1 -> s11 [71, 65535] { R10836 += 1, R10792 += 1 };
  s2 -> s1 [0, 69] { R10836 += 1, R10792 += 1, R10160 += 1, R10161 += 1 };
  s2 -> s2 [0, 69] { R10836 += 1, R10792 += 1, R10159 += 1, R10160 += 1 };
  s2 -> s4 [70, 70] { R10836 += 1, R10792 += 1, R10160 += 1, R10161 += 1 };
  s2 -> s5 [70, 70] { R10836 += 1, R10792 += 1, R10159 += 1, R10160 += 1 };
  s2 -> s6 [70, 70] { R10836 += 1, R10792 += 1, R10160 += 1, R10161 += 1 };
  s2 -> s7 [70, 70] { R10836 += 1, R10792 += 1, R10159 += 1, R10160 += 1 };
  s2 -> s1 [71, 65535] { R10836 += 1, R10792 += 1, R10160 += 1, R10161 += 1 };
  s2 -> s2 [71, 65535] { R10836 += 1, R10792 += 1, R10159 += 1, R10160 += 1 };
  s3 -> s1 [0, 69] { R10836 += 1, R10792 += 1, R10160 += 1, R10161 += 1 };
  s3 -> s2 [0, 69] { R10836 += 1, R10792 += 1, R10159 += 1, R10160 += 1 };
  s3 -> s3 [0, 65535] { R10836 += 1, R10791 += 1, R10792 += 1 };
  s3 -> s4 [70, 70] { R10836 += 1, R10792 += 1, R10160 += 1, R10161 += 1 };
  s3 -> s5 [70, 70] { R10836 += 1, R10792 += 1, R10159 += 1, R10160 += 1 };
  s3 -> s6 [70, 70] { R10836 += 1, R10792 += 1, R10160 += 1, R10161 += 1 };
  s3 -> s7 [70, 70] { R10836 += 1, R10792 += 1, R10159 += 1, R10160 += 1 };
  s3 -> s1 [71, 65535] { R10836 += 1, R10792 += 1, R10160 += 1, R10161 += 1 };
  s3 -> s2 [71, 65535] { R10836 += 1, R10792 += 1, R10159 += 1, R10160 += 1 };
  s5 -> s5 [0, 65535] { R10836 += 1, R10792 += 1, R10159 += 1, R10160 += 1 };
  s5 -> s6 [0, 65535] { R10836 += 1, R10792 += 1, R10160 += 1, R10161 += 1 };
  s6 -> s6 [0, 65535] { R10836 += 1, R10792 += 1, R10160 += 1, R10161 += 1 };
  s6 -> s8 [0, 65535] { R10836 += 1, R10792 += 1 };
  s8 -> s8 [0, 65535] { R10836 += 1, R10792 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [0, 65535] { R10836 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R10836 += 1 };
  s11 -> s11 [0, 69] { R10836 += 1, R10792 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R10836 += 1 };
  s11 -> s8 [70, 70] { R10836 += 1, R10792 += 1 };
  s11 -> s12 [70, 70] { R10836 += 1, R10792 += 1 };
  s11 -> s11 [71, 65535] { R10836 += 1, R10792 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R10836 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 69] { R10838 += 1, R10794 += 1, R10723 += 1, R10724 += 1 };
  s0 -> s2 [0, 69] { R10838 += 1, R10794 += 1, R10724 += 1, R10725 += 1, R10726 += 1 };
  s0 -> s3 [0, 69] { R10838 += 1, R10794 += 1, R10724 += 1, R10726 += 1 };
  s0 -> s0 [0, 65535] { R10837 += 1, R10838 += 1 };
  s0 -> s4 [0, 65535] { R10838 += 1, R10793 += 1, R10794 += 1 };
  s0 -> s5 [70, 70] { R10838 += 1, R10794 += 1, R10724 += 1, R10725 += 1, R10726 += 1 };
  s0 -> s6 [70, 70] { R10838 += 1, R10794 += 1, R10723 += 1, R10724 += 1 };
  s0 -> s7 [70, 70] { R10838 += 1, R10794 += 1, R10724 += 1, R10725 += 1, R10726 += 1 };
  s0 -> s8 [70, 70] { R10838 += 1, R10794 += 1, R10724 += 1, R10726 += 1 };
  s0 -> s9 [70, 70] { R10838 += 1, R10794 += 1, R10724 += 1, R10726 += 1 };
  s0 -> s10 [70, 70] { R10838 += 1, R10794 += 1, R10723 += 1, R10724 += 1 };
  s0 -> s3 [71, 74] { R10838 += 1, R10794 += 1, R10724 += 1, R10726 += 1 };
  s0 -> s1 [71, 65535] { R10838 += 1, R10794 += 1, R10723 += 1, R10724 += 1 };
  s0 -> s2 [71, 65535] { R10838 += 1, R10794 += 1, R10724 += 1, R10725 += 1, R10726 += 1 };
  s0 -> s11 [75, 75] { R10838 += 1, R10794 += 1, R10724 += 1, R10726 += 1 };
  s0 -> s3 [76, 65535] { R10838 += 1, R10794 += 1, R10724 += 1, R10726 += 1 };
  s1 -> s1 [0, 69] { R10838 += 1, R10794 += 1, R10723 += 1, R10724 += 1 };
  s1 -> s2 [0, 69] { R10838 += 1, R10794 += 1, R10724 += 1, R10725 += 1, R10726 += 1 };
  s1 -> s3 [0, 69] { R10838 += 1, R10794 += 1, R10724 += 1, R10726 += 1 };
  s1 -> s5 [70, 70] { R10838 += 1, R10794 += 1, R10724 += 1, R10725 += 1, R10726 += 1 };
  s1 -> s6 [70, 70] { R10838 += 1, R10794 += 1, R10723 += 1, R10724 += 1 };
  s1 -> s7 [70, 70] { R10838 += 1, R10794 += 1, R10724 += 1, R10725 += 1, R10726 += 1 };
  s1 -> s8 [70, 70] { R10838 += 1, R10794 += 1, R10724 += 1, R10726 += 1 };
  s1 -> s9 [70, 70] { R10838 += 1, R10794 += 1, R10724 += 1, R10726 += 1 };
  s1 -> s10 [70, 70] { R10838 += 1, R10794 += 1, R10723 += 1, R10724 += 1 };
  s1 -> s3 [71, 74] { R10838 += 1, R10794 += 1, R10724 += 1, R10726 += 1 };
  s1 -> s1 [71, 65535] { R10838 += 1, R10794 += 1, R10723 += 1, R10724 += 1 };
  s1 -> s2 [71, 65535] { R10838 += 1, R10794 += 1, R10724 += 1, R10725 += 1, R10726 += 1 };
  s1 -> s11 [75, 75] { R10838 += 1, R10794 += 1, R10724 += 1, R10726 += 1 };
  s1 -> s3 [76, 65535] { R10838 += 1, R10794 += 1, R10724 += 1, R10726 += 1 };
  s2 -> s2 [0, 69] { R10838 += 1, R10794 += 1, R10724 += 1, R10725 += 1, R10726 += 1 };
  s2 -> s3 [0, 69] { R10838 += 1, R10794 += 1, R10724 += 1, R10726 += 1 };
  s2 -> s5 [70, 70] { R10838 += 1, R10794 += 1, R10724 += 1, R10725 += 1, R10726 += 1 };
  s2 -> s7 [70, 70] { R10838 += 1, R10794 += 1, R10724 += 1, R10725 += 1, R10726 += 1 };
  s2 -> s8 [70, 70] { R10838 += 1, R10794 += 1, R10724 += 1, R10726 += 1 };
  s2 -> s9 [70, 70] { R10838 += 1, R10794 += 1, R10724 += 1, R10726 += 1 };
  s2 -> s3 [71, 74] { R10838 += 1, R10794 += 1, R10724 += 1, R10726 += 1 };
  s2 -> s2 [71, 65535] { R10838 += 1, R10794 += 1, R10724 += 1, R10725 += 1, R10726 += 1 };
  s2 -> s11 [75, 75] { R10838 += 1, R10794 += 1, R10724 += 1, R10726 += 1 };
  s2 -> s3 [76, 65535] { R10838 += 1, R10794 += 1, R10724 += 1, R10726 += 1 };
  s3 -> s3 [0, 69] { R10838 += 1, R10794 += 1, R10724 += 1, R10726 += 1 };
  s3 -> s8 [70, 70] { R10838 += 1, R10794 += 1, R10724 += 1, R10726 += 1 };
  s3 -> s9 [70, 70] { R10838 += 1, R10794 += 1, R10724 += 1, R10726 += 1 };
  s3 -> s3 [71, 74] { R10838 += 1, R10794 += 1, R10724 += 1, R10726 += 1 };
  s3 -> s11 [75, 75] { R10838 += 1, R10794 += 1, R10724 += 1, R10726 += 1 };
  s3 -> s3 [76, 65535] { R10838 += 1, R10794 += 1, R10724 += 1, R10726 += 1 };
  s4 -> s1 [0, 69] { R10838 += 1, R10794 += 1, R10723 += 1, R10724 += 1 };
  s4 -> s2 [0, 69] { R10838 += 1, R10794 += 1, R10724 += 1, R10725 += 1, R10726 += 1 };
  s4 -> s3 [0, 69] { R10838 += 1, R10794 += 1, R10724 += 1, R10726 += 1 };
  s4 -> s4 [0, 65535] { R10838 += 1, R10793 += 1, R10794 += 1 };
  s4 -> s5 [70, 70] { R10838 += 1, R10794 += 1, R10724 += 1, R10725 += 1, R10726 += 1 };
  s4 -> s6 [70, 70] { R10838 += 1, R10794 += 1, R10723 += 1, R10724 += 1 };
  s4 -> s7 [70, 70] { R10838 += 1, R10794 += 1, R10724 += 1, R10725 += 1, R10726 += 1 };
  s4 -> s8 [70, 70] { R10838 += 1, R10794 += 1, R10724 += 1, R10726 += 1 };
  s4 -> s9 [70, 70] { R10838 += 1, R10794 += 1, R10724 += 1, R10726 += 1 };
  s4 -> s10 [70, 70] { R10838 += 1, R10794 += 1, R10723 += 1, R10724 += 1 };
  s4 -> s3 [71, 74] { R10838 += 1, R10794 += 1, R10724 += 1, R10726 += 1 };
  s4 -> s1 [71, 65535] { R10838 += 1, R10794 += 1, R10723 += 1, R10724 += 1 };
  s4 -> s2 [71, 65535] { R10838 += 1, R10794 += 1, R10724 += 1, R10725 += 1, R10726 += 1 };
  s4 -> s11 [75, 75] { R10838 += 1, R10794 += 1, R10724 += 1, R10726 += 1 };
  s4 -> s3 [76, 65535] { R10838 += 1, R10794 += 1, R10724 += 1, R10726 += 1 };
  s6 -> s9 [0, 74] { R10838 += 1, R10794 += 1, R10724 += 1, R10726 += 1 };
  s6 -> s6 [0, 65535] { R10838 += 1, R10794 += 1, R10723 += 1, R10724 += 1 };
  s6 -> s7 [0, 65535] { R10838 += 1, R10794 += 1, R10724 += 1, R10725 += 1, R10726 += 1 };
  s6 -> s15 [75, 75] { R10838 += 1, R10794 += 1, R10724 += 1, R10726 += 1 };
  s6 -> s9 [76, 65535] { R10838 += 1, R10794 += 1, R10724 += 1, R10726 += 1 };
  s7 -> s9 [0, 74] { R10838 += 1, R10794 += 1, R10724 += 1, R10726 += 1 };
  s7 -> s7 [0, 65535] { R10838 += 1, R10794 += 1, R10724 += 1, R10725 += 1, R10726 += 1 };
  s7 -> s15 [75, 75] { R10838 += 1, R10794 += 1, R10724 += 1, R10726 += 1 };
  s7 -> s9 [76, 65535] { R10838 += 1, R10794 += 1, R10724 += 1, R10726 += 1 };
  s9 -> s9 [0, 74] { R10838 += 1, R10794 += 1, R10724 += 1, R10726 += 1 };
  s9 -> s15 [75, 75] { R10838 += 1, R10794 += 1, R10724 += 1, R10726 += 1 };
  s9 -> s9 [76, 65535] { R10838 += 1, R10794 += 1, R10724 += 1, R10726 += 1 };
  s11 -> s12 [0, 69] { R10838 += 1, R10794 += 1, R10724 += 1 };
  s11 -> s11 [0, 69] { R10838 += 1, R10794 += 1, R10724 += 1, R10726 += 1 };
  s11 -> s13 [70, 70] { R10838 += 1, R10794 += 1, R10724 += 1, R10726 += 1 };
  s11 -> s14 [70, 70] { R10838 += 1, R10794 += 1, R10724 += 1 };
  s11 -> s15 [70, 70] { R10838 += 1, R10794 += 1, R10724 += 1, R10726 += 1 };
  s11 -> s16 [70, 70] { R10838 += 1, R10794 += 1, R10724 += 1 };
  s11 -> s12 [71, 65535] { R10838 += 1, R10794 += 1, R10724 += 1 };
  s11 -> s11 [71, 65535] { R10838 += 1, R10794 += 1, R10724 += 1, R10726 += 1 };
  s12 -> s12 [0, 69] { R10838 += 1, R10794 += 1, R10724 += 1 };
  s12 -> s18 [0, 65535];
  s12 -> s12 [0, 65535] { R10838 += 1 };
  s12 -> s14 [70, 70] { R10838 += 1, R10794 += 1, R10724 += 1 };
  s12 -> s16 [70, 70] { R10838 += 1, R10794 += 1, R10724 += 1 };
  s12 -> s12 [71, 65535] { R10838 += 1, R10794 += 1, R10724 += 1 };
  s14 -> s18 [0, 65535];
  s14 -> s14 [0, 65535] { R10838 += 1 };
  s15 -> s15 [0, 65535] { R10838 += 1, R10794 += 1, R10724 += 1, R10726 += 1 };
  s15 -> s16 [0, 65535] { R10838 += 1, R10794 += 1, R10724 += 1 };
  s16 -> s17 [0, 65535] { R10838 += 1 };
  s16 -> s18 [0, 65535];
  s16 -> s16 [0, 65535] { R10838 += 1, R10794 += 1, R10724 += 1 };
  s17 -> s17 [0, 65535] { R10838 += 1 };
  s17 -> s18 [0, 65535];
  s18 -> s18 [0, 65535];
  accepting s17, s16, s12, s14, s18;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 69] { R10840 += 1, R10796 += 1, R10732 += 1, R10733 += 1, R10734 += 1 };
  s0 -> s2 [0, 69] { R10840 += 1, R10796 += 1, R10731 += 1, R10732 += 1 };
  s0 -> s3 [0, 69] { R10840 += 1, R10796 += 1, R10732 += 1, R10734 += 1, R10735 += 1 };
  s0 -> s0 [0, 65535] { R10839 += 1, R10840 += 1 };
  s0 -> s4 [0, 65535] { R10840 += 1, R10795 += 1, R10796 += 1 };
  s0 -> s5 [70, 70] { R10840 += 1, R10796 += 1, R10732 += 1, R10734 += 1, R10735 += 1 };
  s0 -> s6 [70, 70] { R10840 += 1, R10796 += 1, R10732 += 1, R10734 += 1, R10735 += 1 };
  s0 -> s7 [70, 70] { R10840 += 1, R10796 += 1, R10731 += 1, R10732 += 1 };
  s0 -> s8 [70, 70] { R10840 += 1, R10796 += 1, R10731 += 1, R10732 += 1 };
  s0 -> s9 [70, 70] { R10840 += 1, R10796 += 1, R10732 += 1, R10733 += 1, R10734 += 1 };
  s0 -> s10 [70, 70] { R10840 += 1, R10796 += 1, R10732 += 1, R10733 += 1, R10734 += 1 };
  s0 -> s1 [71, 65535] { R10840 += 1, R10796 += 1, R10732 += 1, R10733 += 1, R10734 += 1 };
  s0 -> s2 [71, 65535] { R10840 += 1, R10796 += 1, R10731 += 1, R10732 += 1 };
  s0 -> s3 [71, 65535] { R10840 += 1, R10796 += 1, R10732 += 1, R10734 += 1, R10735 += 1 };
  s1 -> s1 [0, 69] { R10840 += 1, R10796 += 1, R10732 += 1, R10733 += 1, R10734 += 1 };
  s1 -> s3 [0, 69] { R10840 += 1, R10796 += 1, R10732 += 1, R10734 += 1, R10735 += 1 };
  s1 -> s5 [70, 70] { R10840 += 1, R10796 += 1, R10732 += 1, R10734 += 1, R10735 += 1 };
  s1 -> s6 [70, 70] { R10840 += 1, R10796 += 1, R10732 += 1, R10734 += 1, R10735 += 1 };
  s1 -> s9 [70, 70] { R10840 += 1, R10796 += 1, R10732 += 1, R10733 += 1, R10734 += 1 };
  s1 -> s10 [70, 70] { R10840 += 1, R10796 += 1, R10732 += 1, R10733 += 1, R10734 += 1 };
  s1 -> s1 [71, 65535] { R10840 += 1, R10796 += 1, R10732 += 1, R10733 += 1, R10734 += 1 };
  s1 -> s3 [71, 65535] { R10840 += 1, R10796 += 1, R10732 += 1, R10734 += 1, R10735 += 1 };
  s2 -> s1 [0, 69] { R10840 += 1, R10796 += 1, R10732 += 1, R10733 += 1, R10734 += 1 };
  s2 -> s2 [0, 69] { R10840 += 1, R10796 += 1, R10731 += 1, R10732 += 1 };
  s2 -> s3 [0, 69] { R10840 += 1, R10796 += 1, R10732 += 1, R10734 += 1, R10735 += 1 };
  s2 -> s5 [70, 70] { R10840 += 1, R10796 += 1, R10732 += 1, R10734 += 1, R10735 += 1 };
  s2 -> s6 [70, 70] { R10840 += 1, R10796 += 1, R10732 += 1, R10734 += 1, R10735 += 1 };
  s2 -> s7 [70, 70] { R10840 += 1, R10796 += 1, R10731 += 1, R10732 += 1 };
  s2 -> s8 [70, 70] { R10840 += 1, R10796 += 1, R10731 += 1, R10732 += 1 };
  s2 -> s9 [70, 70] { R10840 += 1, R10796 += 1, R10732 += 1, R10733 += 1, R10734 += 1 };
  s2 -> s10 [70, 70] { R10840 += 1, R10796 += 1, R10732 += 1, R10733 += 1, R10734 += 1 };
  s2 -> s1 [71, 65535] { R10840 += 1, R10796 += 1, R10732 += 1, R10733 += 1, R10734 += 1 };
  s2 -> s2 [71, 65535] { R10840 += 1, R10796 += 1, R10731 += 1, R10732 += 1 };
  s2 -> s3 [71, 65535] { R10840 += 1, R10796 += 1, R10732 += 1, R10734 += 1, R10735 += 1 };
  s3 -> s3 [0, 69] { R10840 += 1, R10796 += 1, R10732 += 1, R10734 += 1, R10735 += 1 };
  s3 -> s14 [0, 69] { R10840 += 1, R10796 += 1, R10732 += 1 };
  s3 -> s15 [70, 70] { R10840 += 1, R10796 += 1, R10732 += 1 };
  s3 -> s5 [70, 70] { R10840 += 1, R10796 += 1, R10732 += 1, R10734 += 1, R10735 += 1 };
  s3 -> s6 [70, 70] { R10840 += 1, R10796 += 1, R10732 += 1, R10734 += 1, R10735 += 1 };
  s3 -> s11 [70, 70] { R10840 += 1, R10796 += 1, R10732 += 1 };
  s3 -> s3 [71, 65535] { R10840 += 1, R10796 += 1, R10732 += 1, R10734 += 1, R10735 += 1 };
  s3 -> s14 [71, 65535] { R10840 += 1, R10796 += 1, R10732 += 1 };
  s4 -> s1 [0, 69] { R10840 += 1, R10796 += 1, R10732 += 1, R10733 += 1, R10734 += 1 };
  s4 -> s2 [0, 69] { R10840 += 1, R10796 += 1, R10731 += 1, R10732 += 1 };
  s4 -> s3 [0, 69] { R10840 += 1, R10796 += 1, R10732 += 1, R10734 += 1, R10735 += 1 };
  s4 -> s4 [0, 65535] { R10840 += 1, R10795 += 1, R10796 += 1 };
  s4 -> s5 [70, 70] { R10840 += 1, R10796 += 1, R10732 += 1, R10734 += 1, R10735 += 1 };
  s4 -> s6 [70, 70] { R10840 += 1, R10796 += 1, R10732 += 1, R10734 += 1, R10735 += 1 };
  s4 -> s7 [70, 70] { R10840 += 1, R10796 += 1, R10731 += 1, R10732 += 1 };
  s4 -> s8 [70, 70] { R10840 += 1, R10796 += 1, R10731 += 1, R10732 += 1 };
  s4 -> s9 [70, 70] { R10840 += 1, R10796 += 1, R10732 += 1, R10733 += 1, R10734 += 1 };
  s4 -> s10 [70, 70] { R10840 += 1, R10796 += 1, R10732 += 1, R10733 += 1, R10734 += 1 };
  s4 -> s1 [71, 65535] { R10840 += 1, R10796 += 1, R10732 += 1, R10733 += 1, R10734 += 1 };
  s4 -> s2 [71, 65535] { R10840 += 1, R10796 += 1, R10731 += 1, R10732 += 1 };
  s4 -> s3 [71, 65535] { R10840 += 1, R10796 += 1, R10732 += 1, R10734 += 1, R10735 += 1 };
  s6 -> s6 [0, 65535] { R10840 += 1, R10796 += 1, R10732 += 1, R10734 += 1, R10735 += 1 };
  s6 -> s11 [0, 65535] { R10840 += 1, R10796 += 1, R10732 += 1 };
  s8 -> s6 [0, 65535] { R10840 += 1, R10796 += 1, R10732 += 1, R10734 += 1, R10735 += 1 };
  s8 -> s8 [0, 65535] { R10840 += 1, R10796 += 1, R10731 += 1, R10732 += 1 };
  s8 -> s9 [0, 65535] { R10840 += 1, R10796 += 1, R10732 += 1, R10733 += 1, R10734 += 1 };
  s9 -> s6 [0, 65535] { R10840 += 1, R10796 += 1, R10732 += 1, R10734 += 1, R10735 += 1 };
  s9 -> s9 [0, 65535] { R10840 += 1, R10796 += 1, R10732 += 1, R10733 += 1, R10734 += 1 };
  s11 -> s12 [0, 65535] { R10840 += 1 };
  s11 -> s11 [0, 65535] { R10840 += 1, R10796 += 1, R10732 += 1 };
  s11 -> s13 [0, 65535];
  s12 -> s12 [0, 65535] { R10840 += 1 };
  s12 -> s13 [0, 65535];
  s13 -> s13 [0, 65535];
  s14 -> s14 [0, 69] { R10840 += 1, R10796 += 1, R10732 += 1 };
  s14 -> s13 [0, 65535];
  s14 -> s14 [0, 65535] { R10840 += 1 };
  s14 -> s15 [70, 70] { R10840 += 1, R10796 += 1, R10732 += 1 };
  s14 -> s11 [70, 70] { R10840 += 1, R10796 += 1, R10732 += 1 };
  s14 -> s14 [71, 65535] { R10840 += 1, R10796 += 1, R10732 += 1 };
  s15 -> s15 [0, 65535] { R10840 += 1 };
  s15 -> s13 [0, 65535];
  accepting s12, s13, s14, s15, s11;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [102, 102];
  accepting s1;
};
};
constraint R3 = R10840 && R23 - R10840 = -1 && R24 = R10840 && R25 - R10840 = -1 && R26 = R10840 && R27 = 0 && R28 = 1 && R29 = 0 && R30 = 1 && R45 + R84 + R83 + -1*R10728 + -1*R10724 - R66 = 0 && R49 + R89 + R87 = 0 && R50 + R90 + R88 + -1*R10728 + -1*R10724 - R66 = 0 && R55 + R96 + R93 + -1*R10730 + -1*R10726 - R68 = 0 && R65 + R10727 + R10723 = 0 && R67 + R10729 + R10725 = 0 && R10781 = 0 && R10782 = 0 && R10787 = 0 && R10788 = 0 && R10791 = 0 && R10792 = 0 && R10793 = 0 && R10794 = 0 && R10795 = 0 && R10796 = 0 && R10797 = 0 && R10798 = R10840 && R10799 = 0 && R10800 = R10840 && R10801 = 0 && R10802 = R10840 && R10803 = 0 && R10804 = R10840 && R10805 = 0 && R10806 = R10840 && R10807 = 0 && R10808 = R10840 && R10809 = 0 && R10810 = R10840 && R10811 = 0 && R10812 = R10840 && R10813 = 0 && R10814 = R10840 && R10815 = 0 && R10816 = R10840 && R10817 = 0 && R10818 = R10840 && R10819 = 0 && R10820 = R10840 && R10821 = 0 && R10822 = R10840 && R10823 = 0 && R10824 = R10840 && R10825 = 0 && R10826 = R10840 && R10827 = 0 && R10828 = R10840 && R10829 = 0 && R10830 = R10840 && R10831 = 0 && R10832 = R10840 && R10833 = 0 && R10834 = R10840 && R10835 = 0 && R10836 = R10840 && R10837 = 0 && R10838 = R10840 && R10839 = 0 && -1 < R2 && R12 < 1 && R15 < 1 && R16 < 1 && R47 + R86 + R85 < 1 && R61 + R10164 + R10161 < 1 && -1*R10728 + -1*R10724 - R66 < 1 && -1*R10730 + -1*R10726 - R68 < 1 && 0 < R10840 && (R2 != 0 || R20 = 0 || (R10741 = 0 && R10742 = 0)) && (R2 != 0 || R20 = 0 || (R10743 = 0 && R10744 = 0)) && (R2 != 0 || R20 = 0 || (R10745 = 0 && R10746 = 0)) && (R2 != 0 || R20 = 0 || (R10747 = 0 && R10748 = 0)) && (R2 != 0 || R20 = 0 || (R10749 = 0 && R10750 = 0)) && (R2 != 0 || R20 = 0 || (R10751 = 0 && R10752 = 0)) && (R2 != 0 || R20 = 0 || (R10753 = 0 && R10754 = 0)) && (R2 != 0 || R20 = 0 || (R10755 = 0 && R10756 = 0)) && (R2 != 0 || R20 = 0 || (R10757 = 0 && R10758 = 0)) && (R2 != 0 || R20 = 0 || (R10759 = 0 && R10760 = 0)) && (R53 + R94 + R91 != 0 || R54 + R95 + R92 + -1*R10728 + -1*R10724 - R66 = 0 || R66 + R10728 + R10724 < 1) && (R59 + R10162 + R10159 != 0 || R60 + R10163 + R10160 + -1*R10728 + -1*R10724 - R66 = 0 || R66 + R10728 + R10724 < 1) && (R66 + R10728 + R10724 != 0 || ((R53 + R94 + R91 != 0 || R54 + R95 + R92 = 0 || R68 + R10730 + R10726 < 1) && (R53 + R94 + R91 = 0 || R68 + R10730 + R10726 < 1))) && (R66 + R10728 + R10724 != 0 || ((R59 + R10162 + R10159 != 0 || R60 + R10163 + R10160 = 0 || R68 + R10730 + R10726 < 1) && (R59 + R10162 + R10159 = 0 || R68 + R10730 + R10726 < 1))) && (R66 + R10728 + R10724 != 0 || ((R73 + R10736 + R10731 != 0 || R74 + R10737 + R10732 = 0 || R68 + R10730 + R10726 < 1) && (R73 + R10736 + R10731 = 0 || R68 + R10730 + R10726 < 1))) && (R68 + R10730 + R10726 != 0 || R77 + R10740 + R10735 = 0 || (R75 + R10738 + R10733 = 0 && R76 + R10739 + R10734 = 0)) && (R73 + R10736 + R10731 != 0 || R66 + R10728 + R10724 + -1*R10737 + -1*R10732 - R74 = 0 || R66 + R10728 + R10724 < 1) && (R75 + R10738 + R10733 != 0 || R68 + R10730 + R10726 + -1*R10739 + -1*R10734 - R76 = 0 || R68 + R10730 + R10726 < 1) && (R10741 != 0 || R2 = R10742 || R2 < 1) && (R10743 != 0 || R2 = R10744 || R2 < 1) && (R10745 != 0 || R2 = R10746 || R2 < 1) && (R10747 != 0 || R2 = R10748 || R2 < 1) && (R10749 != 0 || R2 = R10750 || R2 < 1) && (R10751 != 0 || R2 = R10752 || R2 < 1) && (R10753 != 0 || R2 = R10754 || R2 < 1) && (R10755 != 0 || R2 = R10756 || R2 < 1) && (R10757 != 0 || R2 = R10758 || R2 < 1) && (R10759 != 0 || R2 = R10760 || R2 < 1) && (R21 = 0 || (R10779 = 0 && R10780 = 0)) && (R21 = 0 || (R10783 = 0 && R10784 = 0)) && (R21 = 0 || (R10785 = 0 && R10786 = 0)) && (R21 = 0 || (R10789 = 0 && R10790 = 0)) && (R22 = 0 || (R10761 = 0 && R10762 = 0)) && (R22 = 0 || (R10763 = 0 && R10764 = 0)) && (R22 = 0 || (R10765 = 0 && R10766 = 0)) && (R22 = 0 || (R10767 = 0 && R10768 = 0)) && (R22 = 0 || (R10769 = 0 && R10770 = 0)) && (R22 = 0 || (R10771 = 0 && R10772 = 0)) && (R22 = 0 || (R10773 = 0 && R10774 = 0)) && (R22 = 0 || (R10775 = 0 && R10776 = 0)) && (R22 = 0 || (R10777 = 0 && R10778 = 0)) && (R53 + R94 + R91 = 0 || R66 + R10728 + R10724 < 1) && (R59 + R10162 + R10159 = 0 || R66 + R10728 + R10724 < 1) && (R73 + R10736 + R10731 = 0 || R66 + R10728 + R10724 < 1) && (R75 + R10738 + R10733 = 0 || R68 + R10730 + R10726 < 1) && (R10741 = 0 || R2 < 1) && (R10743 = 0 || R2 < 1) && (R10745 = 0 || R2 < 1) && (R10747 = 0 || R2 < 1) && (R10749 = 0 || R2 < 1) && (R10751 = 0 || R2 < 1) && (R10753 = 0 || R2 < 1) && (R10755 = 0 || R2 < 1) && (R10757 = 0 || R2 < 1) && (R10759 = 0 || R2 < 1);
// End of Parikh automata intersection problem
