// Parikh automata intersection problem, generated by OSTRICH+
counter int R12, R15, R16, R2, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R4, R45, R47, R49, R5, R50, R53, R54, R55, R59, R60, R61, R65, R66, R67, R68, R6805, R6806, R6807, R6808, R6809, R6810, R73, R74, R75, R76, R77, R83, R84, R85, R86, R87, R88, R89, R90, R9043, R9044, R9045, R9046, R9047, R9048, R9049, R9050, R91, R9161, R9162, R9163, R9164, R9165, R9166, R9167, R9168, R9169, R9170, R9171, R9172, R9173, R9174, R9175, R9176, R9177, R9178, R9179, R9180, R9181, R9182, R9183, R9184, R9185, R9186, R9187, R9188, R9189, R9190, R9191, R9192, R9193, R9194, R9195, R9196, R9197, R9198, R9199, R92, R9200, R9201, R9202, R9203, R9204, R9205, R9206, R9207, R9208, R9209, R9210, R9211, R9212, R9213, R9214, R9215, R9216, R9217, R9218, R9219, R9220, R9221, R9222, R9223, R9224, R9225, R9226, R9227, R9228, R9229, R9230, R9231, R9232, R9233, R9234, R9235, R9236, R9237, R9238, R9239, R9240, R9241, R9242, R9243, R9244, R9245, R9246, R9247, R9248, R9249, R9250, R9251, R9252, R9253, R9254, R9255, R9256, R9257, R9258, R9259, R9260, R9261, R9262, R9263, R9264, R9265, R9266, R9267, R9268, R9269, R9270, R93, R94, R95, R96;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [70, 70];
  s0 -> s0 [71, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [70, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R15 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 69];
  s0 -> s0 [0, 65535] { R16 += 1 };
  s0 -> s2 [70, 70];
  s0 -> s1 [71, 65535];
  s1 -> s1 [0, 69];
  s1 -> s2 [70, 70];
  s1 -> s1 [71, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R24 += 1 };
  s0 -> s0 [0, 65535] { R23 += 1, R24 += 1 };
  s0 -> s2 [9, 13] { R24 += 1 };
  s0 -> s1 [14, 31] { R24 += 1 };
  s0 -> s2 [32, 32] { R24 += 1 };
  s0 -> s1 [33, 65535] { R24 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R24 += 1 };
  s2 -> s1 [0, 65535] { R24 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R25 += 1, R26 += 1 };
  s1 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R28 += 1 };
  s0 -> s0 [0, 65535] { R27 += 1, R28 += 1 };
  s0 -> s2 [9, 13] { R28 += 1 };
  s0 -> s1 [14, 31] { R28 += 1 };
  s0 -> s2 [32, 32] { R28 += 1 };
  s0 -> s1 [33, 65535] { R28 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R28 += 1 };
  s2 -> s1 [0, 65535] { R28 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R29 += 1, R30 += 1 };
  s1 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R9191 += 1, R9192 += 1 };
  s0 -> s1 [0, 65535] { R9192 += 1, R22 += 1 };
  s1 -> s1 [0, 65535] { R9192 += 1, R22 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 69] { R9194 += 1 };
  s0 -> s0 [0, 65535] { R9193 += 1, R9194 += 1 };
  s0 -> s2 [70, 70] { R9194 += 1 };
  s0 -> s3 [70, 70] { R9194 += 1 };
  s0 -> s1 [76, 65535] { R9194 += 1 };
  s1 -> s1 [0, 69] { R9194 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R9194 += 1 };
  s1 -> s3 [70, 70] { R9194 += 1 };
  s1 -> s1 [76, 65535] { R9194 += 1 };
  s2 -> s2 [0, 70] { R9194 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [76, 65535] { R9194 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 69] { R9196 += 1, R45 += 1 };
  s0 -> s0 [0, 65535] { R9195 += 1, R9196 += 1 };
  s0 -> s2 [70, 70] { R9196 += 1, R45 += 1 };
  s0 -> s3 [70, 70] { R9196 += 1, R45 += 1 };
  s0 -> s1 [71, 65535] { R9196 += 1, R45 += 1 };
  s1 -> s1 [0, 69] { R9196 += 1, R45 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R9196 += 1, R45 += 1 };
  s1 -> s3 [70, 70] { R9196 += 1, R45 += 1 };
  s1 -> s1 [71, 65535] { R9196 += 1, R45 += 1 };
  s2 -> s2 [0, 65535] { R9196 += 1, R45 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 69] { R9198 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R9197 += 1, R9198 += 1 };
  s0 -> s2 [70, 70] { R9198 += 1, R47 += 1 };
  s0 -> s3 [70, 70] { R9198 += 1, R47 += 1 };
  s0 -> s1 [71, 65535] { R9198 += 1, R47 += 1 };
  s1 -> s1 [0, 69] { R9198 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R9198 += 1, R47 += 1 };
  s1 -> s3 [70, 70] { R9198 += 1, R47 += 1 };
  s1 -> s1 [71, 65535] { R9198 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R9198 += 1, R47 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 69] { R9200 += 1, R49 += 1, R50 += 1 };
  s0 -> s0 [0, 65535] { R9199 += 1, R9200 += 1 };
  s0 -> s2 [70, 70] { R9200 += 1, R49 += 1, R50 += 1 };
  s0 -> s3 [70, 70] { R9200 += 1, R49 += 1, R50 += 1 };
  s0 -> s1 [71, 65535] { R9200 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 69] { R9200 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R9200 += 1, R49 += 1, R50 += 1 };
  s1 -> s3 [70, 70] { R9200 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [71, 65535] { R9200 += 1, R49 += 1, R50 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R9200 += 1, R49 += 1, R50 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 69] { R9202 += 1, R53 += 1, R54 += 1 };
  s0 -> s0 [0, 65535] { R9201 += 1, R9202 += 1 };
  s0 -> s2 [70, 70] { R9202 += 1, R53 += 1, R54 += 1 };
  s0 -> s3 [70, 70] { R9202 += 1, R53 += 1, R54 += 1 };
  s0 -> s1 [71, 65535] { R9202 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 69] { R9202 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R9202 += 1, R53 += 1, R54 += 1 };
  s1 -> s3 [70, 70] { R9202 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [71, 65535] { R9202 += 1, R53 += 1, R54 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R9202 += 1, R53 += 1, R54 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 69] { R9204 += 1, R59 += 1, R60 += 1 };
  s0 -> s0 [0, 65535] { R9203 += 1, R9204 += 1 };
  s0 -> s2 [70, 70] { R9204 += 1, R59 += 1, R60 += 1 };
  s0 -> s3 [70, 70] { R9204 += 1, R59 += 1, R60 += 1 };
  s0 -> s1 [71, 65535] { R9204 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 69] { R9204 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R9204 += 1, R59 += 1, R60 += 1 };
  s1 -> s3 [70, 70] { R9204 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [71, 65535] { R9204 += 1, R59 += 1, R60 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R9204 += 1, R59 += 1, R60 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 69] { R9206 += 1, R65 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R9205 += 1, R9206 += 1 };
  s0 -> s2 [70, 70] { R9206 += 1, R65 += 1, R66 += 1 };
  s0 -> s3 [70, 70] { R9206 += 1, R65 += 1, R66 += 1 };
  s0 -> s1 [71, 65535] { R9206 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 69] { R9206 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R9206 += 1, R65 += 1, R66 += 1 };
  s1 -> s3 [70, 70] { R9206 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [71, 65535] { R9206 += 1, R65 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R9206 += 1, R65 += 1, R66 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 69] { R9208 += 1, R73 += 1, R74 += 1 };
  s0 -> s0 [0, 65535] { R9207 += 1, R9208 += 1 };
  s0 -> s2 [70, 70] { R9208 += 1, R73 += 1, R74 += 1 };
  s0 -> s3 [70, 70] { R9208 += 1, R73 += 1, R74 += 1 };
  s0 -> s1 [71, 65535] { R9208 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 69] { R9208 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R9208 += 1, R73 += 1, R74 += 1 };
  s1 -> s3 [70, 70] { R9208 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [71, 65535] { R9208 += 1, R73 += 1, R74 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R9208 += 1, R73 += 1, R74 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 69] { R9228 += 1 };
  s0 -> s0 [0, 65535] { R9227 += 1, R9228 += 1 };
  s0 -> s2 [70, 70] { R9228 += 1 };
  s0 -> s1 [71, 65535] { R9228 += 1 };
  s1 -> s1 [0, 69] { R9228 += 1 };
  s1 -> s2 [70, 70] { R9228 += 1 };
  s1 -> s1 [71, 65535] { R9228 += 1 };
  s2 -> s2 [0, 65535] { R9228 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R9229 += 1, R9230 += 1 };
  s0 -> s1 [0, 65535] { R9230 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R9230 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 69] { R9232 += 1 };
  s0 -> s2 [0, 65535] { R9232 += 1, R12 += 1 };
  s0 -> s0 [0, 65535] { R9231 += 1, R9232 += 1 };
  s0 -> s3 [70, 70] { R9232 += 1 };
  s0 -> s1 [71, 65535] { R9232 += 1 };
  s1 -> s1 [0, 69] { R9232 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [70, 70] { R9232 += 1 };
  s1 -> s1 [71, 65535] { R9232 += 1 };
  s2 -> s1 [0, 69] { R9232 += 1 };
  s2 -> s2 [0, 65535] { R9232 += 1, R12 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [70, 70] { R9232 += 1 };
  s2 -> s1 [71, 65535] { R9232 += 1 };
  s3 -> s3 [0, 65535] { R9232 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 69] { R9234 += 1, R9172 += 1 };
  s0 -> s2 [0, 65535] { R9234 += 1, R9171 += 1, R9172 += 1 };
  s0 -> s0 [0, 65535] { R9233 += 1, R9234 += 1 };
  s0 -> s1 [71, 65535] { R9234 += 1, R9172 += 1 };
  s1 -> s1 [0, 69] { R9234 += 1, R9172 += 1 };
  s1 -> s1 [0, 65535] { R9234 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [71, 65535] { R9234 += 1, R9172 += 1 };
  s2 -> s1 [0, 69] { R9234 += 1, R9172 += 1 };
  s2 -> s2 [0, 65535] { R9234 += 1, R9171 += 1, R9172 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [71, 65535] { R9234 += 1, R9172 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s0 [0, 65535] { R9235 += 1, R9236 += 1 };
  s0 -> s1 [0, 65535] { R9236 += 1, R9174 += 1, R20 += 1 };
  s0 -> s2 [0, 65535] { R9236 += 1, R9173 += 1, R9174 += 1 };
  s1 -> s1 [0, 65535] { R9236 += 1, R9174 += 1, R20 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R9236 += 1 };
  s2 -> s1 [0, 65535] { R9236 += 1, R9174 += 1, R20 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R9236 += 1, R9173 += 1, R9174 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R9236 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 70] { R9238 += 1, R9176 += 1 };
  s0 -> s2 [0, 65535] { R9238 += 1, R9175 += 1, R9176 += 1 };
  s0 -> s0 [0, 65535] { R9237 += 1, R9238 += 1 };
  s0 -> s1 [75, 65535] { R9238 += 1, R9176 += 1 };
  s1 -> s1 [0, 70] { R9238 += 1, R9176 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R9238 += 1 };
  s1 -> s1 [75, 65535] { R9238 += 1, R9176 += 1 };
  s2 -> s1 [0, 70] { R9238 += 1, R9176 += 1 };
  s2 -> s2 [0, 65535] { R9238 += 1, R9175 += 1, R9176 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [75, 65535] { R9238 += 1, R9176 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s0 [0, 65535] { R9239 += 1, R9240 += 1 };
  s0 -> s1 [0, 65535] { R9240 += 1, R9178 += 1, R84 += 1 };
  s0 -> s2 [0, 65535] { R9240 += 1, R9177 += 1, R9178 += 1 };
  s1 -> s4 [0, 65535] { R9240 += 1 };
  s1 -> s1 [0, 65535] { R9240 += 1, R9178 += 1, R84 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R9240 += 1, R9178 += 1, R84 += 1 };
  s2 -> s2 [0, 65535] { R9240 += 1, R9177 += 1, R9178 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R9240 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 74] { R9242 += 1, R9180 += 1 };
  s0 -> s2 [0, 65535] { R9242 += 1, R9179 += 1, R9180 += 1 };
  s0 -> s3 [0, 65535] { R9242 += 1, R9180 += 1, R86 += 1 };
  s0 -> s0 [0, 65535] { R9241 += 1, R9242 += 1 };
  s0 -> s1 [76, 65535] { R9242 += 1, R9180 += 1 };
  s1 -> s1 [0, 74] { R9242 += 1, R9180 += 1 };
  s1 -> s1 [0, 65535] { R9242 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [76, 65535] { R9242 += 1, R9180 += 1 };
  s2 -> s1 [0, 74] { R9242 += 1, R9180 += 1 };
  s2 -> s2 [0, 65535] { R9242 += 1, R9179 += 1, R9180 += 1 };
  s2 -> s3 [0, 65535] { R9242 += 1, R9180 += 1, R86 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [76, 65535] { R9242 += 1, R9180 += 1 };
  s3 -> s1 [0, 74] { R9242 += 1, R9180 += 1 };
  s3 -> s3 [0, 65535] { R9242 += 1, R9180 += 1, R86 += 1 };
  s3 -> s4 [0, 65535] { R9242 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [76, 65535] { R9242 += 1, R9180 += 1 };
  s4 -> s4 [0, 65535] { R9242 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 65535] { R9244 += 1, R9182 += 1 };
  s0 -> s2 [0, 65535] { R9244 += 1, R9181 += 1, R9182 += 1 };
  s0 -> s3 [0, 65535] { R9244 += 1, R9182 += 1, R90 += 1 };
  s0 -> s0 [0, 65535] { R9243 += 1, R9244 += 1 };
  s1 -> s1 [0, 65535] { R9244 += 1, R9182 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R9244 += 1 };
  s2 -> s1 [0, 65535] { R9244 += 1, R9182 += 1 };
  s2 -> s2 [0, 65535] { R9244 += 1, R9181 += 1, R9182 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R9244 += 1, R9182 += 1, R90 += 1 };
  s3 -> s1 [0, 65535] { R9244 += 1, R9182 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R9244 += 1, R9182 += 1, R90 += 1 };
  s3 -> s5 [0, 65535] { R9244 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R9244 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s0 [0, 65535] { R9245 += 1, R9246 += 1 };
  s0 -> s1 [0, 65535] { R9246 += 1, R9183 += 1, R9184 += 1 };
  s0 -> s2 [0, 65535] { R9246 += 1, R9184 += 1, R95 += 1, R96 += 1 };
  s0 -> s3 [0, 65535] { R9246 += 1, R9184 += 1, R94 += 1, R95 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R9246 += 1, R9183 += 1, R9184 += 1 };
  s1 -> s2 [0, 65535] { R9246 += 1, R9184 += 1, R95 += 1, R96 += 1 };
  s1 -> s3 [0, 65535] { R9246 += 1, R9184 += 1, R94 += 1, R95 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R9246 += 1, R9184 += 1, R95 += 1, R96 += 1 };
  s2 -> s6 [0, 65535] { R9246 += 1, R9184 += 1 };
  s2 -> s5 [0, 65535] { R9246 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R9246 += 1, R9184 += 1, R95 += 1, R96 += 1 };
  s3 -> s3 [0, 65535] { R9246 += 1, R9184 += 1, R94 += 1, R95 += 1 };
  s3 -> s5 [0, 65535] { R9246 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R9246 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R9246 += 1, R9184 += 1 };
  s6 -> s5 [0, 65535] { R9246 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 74] { R9248 += 1, R9186 += 1, R6809 += 1 };
  s0 -> s2 [0, 65535] { R9248 += 1, R9185 += 1, R9186 += 1 };
  s0 -> s3 [0, 65535] { R9248 += 1, R9186 += 1, R6809 += 1, R6810 += 1 };
  s0 -> s4 [0, 65535] { R9248 += 1, R9186 += 1 };
  s0 -> s0 [0, 65535] { R9247 += 1, R9248 += 1 };
  s0 -> s1 [76, 65535] { R9248 += 1, R9186 += 1, R6809 += 1 };
  s1 -> s1 [0, 74] { R9248 += 1, R9186 += 1, R6809 += 1 };
  s1 -> s5 [0, 65535] { R9248 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R9248 += 1, R9186 += 1 };
  s1 -> s1 [76, 65535] { R9248 += 1, R9186 += 1, R6809 += 1 };
  s2 -> s1 [0, 74] { R9248 += 1, R9186 += 1, R6809 += 1 };
  s2 -> s2 [0, 65535] { R9248 += 1, R9185 += 1, R9186 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R9248 += 1, R9186 += 1, R6809 += 1, R6810 += 1 };
  s2 -> s4 [0, 65535] { R9248 += 1, R9186 += 1 };
  s2 -> s1 [76, 65535] { R9248 += 1, R9186 += 1, R6809 += 1 };
  s3 -> s1 [0, 74] { R9248 += 1, R9186 += 1, R6809 += 1 };
  s3 -> s5 [0, 65535] { R9248 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R9248 += 1, R9186 += 1, R6809 += 1, R6810 += 1 };
  s3 -> s4 [0, 65535] { R9248 += 1, R9186 += 1 };
  s3 -> s1 [76, 65535] { R9248 += 1, R9186 += 1, R6809 += 1 };
  s4 -> s5 [0, 65535] { R9248 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R9248 += 1, R9186 += 1 };
  s5 -> s5 [0, 65535] { R9248 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 74] { R9250 += 1, R9188 += 1, R9048 += 1, R9050 += 1 };
  s0 -> s2 [0, 65535] { R9250 += 1, R9187 += 1, R9188 += 1 };
  s0 -> s0 [0, 65535] { R9249 += 1, R9250 += 1 };
  s0 -> s3 [75, 75] { R9250 += 1, R9188 += 1, R9048 += 1, R9050 += 1 };
  s0 -> s1 [76, 65535] { R9250 += 1, R9188 += 1, R9048 += 1, R9050 += 1 };
  s1 -> s1 [0, 74] { R9250 += 1, R9188 += 1, R9048 += 1, R9050 += 1 };
  s1 -> s3 [75, 75] { R9250 += 1, R9188 += 1, R9048 += 1, R9050 += 1 };
  s1 -> s1 [76, 65535] { R9250 += 1, R9188 += 1, R9048 += 1, R9050 += 1 };
  s2 -> s1 [0, 74] { R9250 += 1, R9188 += 1, R9048 += 1, R9050 += 1 };
  s2 -> s2 [0, 65535] { R9250 += 1, R9187 += 1, R9188 += 1 };
  s2 -> s3 [75, 75] { R9250 += 1, R9188 += 1, R9048 += 1, R9050 += 1 };
  s2 -> s1 [76, 65535] { R9250 += 1, R9188 += 1, R9048 += 1, R9050 += 1 };
  s3 -> s4 [0, 65535] { R9250 += 1 };
  s3 -> s3 [0, 65535] { R9250 += 1, R9188 += 1, R9048 += 1, R9050 += 1 };
  s3 -> s5 [0, 65535] { R9250 += 1, R9188 += 1 };
  s3 -> s6 [0, 65535] { R9250 += 1, R9188 += 1, R9048 += 1 };
  s3 -> s7 [0, 65535];
  s4 -> s4 [0, 65535] { R9250 += 1 };
  s4 -> s7 [0, 65535];
  s5 -> s4 [0, 65535] { R9250 += 1 };
  s5 -> s5 [0, 65535] { R9250 += 1, R9188 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s4 [0, 65535] { R9250 += 1 };
  s6 -> s5 [0, 65535] { R9250 += 1, R9188 += 1 };
  s6 -> s6 [0, 65535] { R9250 += 1, R9188 += 1, R9048 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s3, s4, s5, s6, s7;
};
automaton value2_29 {
  init s0;
  s0 -> s0 [0, 65535] { R9251 += 1, R9252 += 1 };
  s0 -> s1 [0, 65535] { R9252 += 1, R9189 += 1, R9190 += 1 };
  s0 -> s2 [0, 65535] { R9252 += 1, R9190 += 1 };
  s1 -> s1 [0, 65535] { R9252 += 1, R9189 += 1, R9190 += 1 };
  s1 -> s2 [0, 65535] { R9252 += 1, R9190 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R9252 += 1 };
  s2 -> s2 [0, 65535] { R9252 += 1, R9190 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R9252 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R9254 += 1, R9209 += 1, R9210 += 1 };
  s0 -> s0 [0, 65535] { R9253 += 1, R9254 += 1 };
  s0 -> s2 [0, 65535] { R9254 += 1, R9210 += 1, R21 += 1 };
  s1 -> s1 [0, 65535] { R9254 += 1, R9209 += 1, R9210 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R9254 += 1, R9210 += 1, R21 += 1 };
  s2 -> s3 [0, 65535] { R9254 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R9254 += 1, R9210 += 1, R21 += 1 };
  s3 -> s3 [0, 65535] { R9254 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 69] { R9256 += 1, R9212 += 1 };
  s0 -> s0 [0, 65535] { R9255 += 1, R9256 += 1 };
  s0 -> s2 [0, 65535] { R9256 += 1, R9211 += 1, R9212 += 1 };
  s0 -> s3 [70, 70] { R9256 += 1, R9212 += 1 };
  s0 -> s4 [70, 70] { R9256 += 1, R9212 += 1 };
  s0 -> s5 [75, 75] { R9256 += 1, R9212 += 1 };
  s0 -> s1 [76, 65535] { R9256 += 1, R9212 += 1 };
  s1 -> s1 [0, 69] { R9256 += 1, R9212 += 1 };
  s1 -> s3 [70, 70] { R9256 += 1, R9212 += 1 };
  s1 -> s4 [70, 70] { R9256 += 1, R9212 += 1 };
  s1 -> s5 [75, 75] { R9256 += 1, R9212 += 1 };
  s1 -> s1 [76, 65535] { R9256 += 1, R9212 += 1 };
  s2 -> s1 [0, 69] { R9256 += 1, R9212 += 1 };
  s2 -> s2 [0, 65535] { R9256 += 1, R9211 += 1, R9212 += 1 };
  s2 -> s3 [70, 70] { R9256 += 1, R9212 += 1 };
  s2 -> s4 [70, 70] { R9256 += 1, R9212 += 1 };
  s2 -> s5 [75, 75] { R9256 += 1, R9212 += 1 };
  s2 -> s1 [76, 65535] { R9256 += 1, R9212 += 1 };
  s3 -> s3 [0, 70] { R9256 += 1, R9212 += 1 };
  s3 -> s7 [75, 75] { R9256 += 1, R9212 += 1 };
  s3 -> s3 [76, 65535] { R9256 += 1, R9212 += 1 };
  s5 -> s5 [0, 69] { R9256 += 1, R9212 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R9256 += 1 };
  s5 -> s7 [70, 70] { R9256 += 1, R9212 += 1 };
  s5 -> s8 [70, 70] { R9256 += 1, R9212 += 1 };
  s5 -> s5 [75, 65535] { R9256 += 1, R9212 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 70] { R9256 += 1, R9212 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R9256 += 1 };
  s7 -> s7 [75, 65535] { R9256 += 1, R9212 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R9256 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 69] { R9258 += 1, R9214 += 1, R83 += 1 };
  s0 -> s0 [0, 65535] { R9257 += 1, R9258 += 1 };
  s0 -> s2 [0, 65535] { R9258 += 1, R9213 += 1, R9214 += 1 };
  s0 -> s3 [70, 70] { R9258 += 1, R9214 += 1, R83 += 1 };
  s0 -> s4 [70, 70] { R9258 += 1, R9214 += 1, R83 += 1 };
  s0 -> s1 [71, 65535] { R9258 += 1, R9214 += 1, R83 += 1 };
  s1 -> s1 [0, 69] { R9258 += 1, R9214 += 1, R83 += 1 };
  s1 -> s1 [0, 65535] { R9258 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [70, 70] { R9258 += 1, R9214 += 1, R83 += 1 };
  s1 -> s4 [70, 70] { R9258 += 1, R9214 += 1, R83 += 1 };
  s1 -> s1 [71, 65535] { R9258 += 1, R9214 += 1, R83 += 1 };
  s2 -> s1 [0, 69] { R9258 += 1, R9214 += 1, R83 += 1 };
  s2 -> s2 [0, 65535] { R9258 += 1, R9213 += 1, R9214 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [70, 70] { R9258 += 1, R9214 += 1, R83 += 1 };
  s2 -> s4 [70, 70] { R9258 += 1, R9214 += 1, R83 += 1 };
  s2 -> s1 [71, 65535] { R9258 += 1, R9214 += 1, R83 += 1 };
  s3 -> s3 [0, 65535] { R9258 += 1, R9214 += 1, R83 += 1 };
  s3 -> s6 [0, 65535] { R9258 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R9258 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9258 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 69] { R9260 += 1, R9216 += 1, R85 += 1 };
  s0 -> s2 [0, 65535] { R9260 += 1, R9215 += 1, R9216 += 1 };
  s0 -> s0 [0, 65535] { R9259 += 1, R9260 += 1 };
  s0 -> s3 [70, 70] { R9260 += 1, R9216 += 1, R85 += 1 };
  s0 -> s4 [70, 70] { R9260 += 1, R9216 += 1, R85 += 1 };
  s0 -> s1 [71, 65535] { R9260 += 1, R9216 += 1, R85 += 1 };
  s1 -> s1 [0, 69] { R9260 += 1, R9216 += 1, R85 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R9260 += 1 };
  s1 -> s3 [70, 70] { R9260 += 1, R9216 += 1, R85 += 1 };
  s1 -> s4 [70, 70] { R9260 += 1, R9216 += 1, R85 += 1 };
  s1 -> s1 [71, 65535] { R9260 += 1, R9216 += 1, R85 += 1 };
  s2 -> s1 [0, 69] { R9260 += 1, R9216 += 1, R85 += 1 };
  s2 -> s2 [0, 65535] { R9260 += 1, R9215 += 1, R9216 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [70, 70] { R9260 += 1, R9216 += 1, R85 += 1 };
  s2 -> s4 [70, 70] { R9260 += 1, R9216 += 1, R85 += 1 };
  s2 -> s1 [71, 65535] { R9260 += 1, R9216 += 1, R85 += 1 };
  s3 -> s3 [0, 65535] { R9260 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R9260 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R9260 += 1, R9216 += 1, R85 += 1 };
  s5 -> s5 [0, 65535] { R9260 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 69] { R9262 += 1, R9218 += 1, R88 += 1 };
  s0 -> s2 [0, 69] { R9262 += 1, R9218 += 1, R87 += 1, R88 += 1 };
  s0 -> s0 [0, 65535] { R9261 += 1, R9262 += 1 };
  s0 -> s3 [0, 65535] { R9262 += 1, R9217 += 1, R9218 += 1 };
  s0 -> s4 [70, 70] { R9262 += 1, R9218 += 1, R87 += 1, R88 += 1 };
  s0 -> s5 [70, 70] { R9262 += 1, R9218 += 1, R88 += 1 };
  s0 -> s6 [70, 70] { R9262 += 1, R9218 += 1, R87 += 1, R88 += 1 };
  s0 -> s7 [70, 70] { R9262 += 1, R9218 += 1, R88 += 1 };
  s0 -> s1 [71, 74] { R9262 += 1, R9218 += 1, R88 += 1 };
  s0 -> s2 [71, 65535] { R9262 += 1, R9218 += 1, R87 += 1, R88 += 1 };
  s0 -> s8 [75, 75] { R9262 += 1, R9218 += 1, R88 += 1 };
  s0 -> s1 [76, 65535] { R9262 += 1, R9218 += 1, R88 += 1 };
  s1 -> s1 [0, 69] { R9262 += 1, R9218 += 1, R88 += 1 };
  s1 -> s5 [70, 70] { R9262 += 1, R9218 += 1, R88 += 1 };
  s1 -> s7 [70, 70] { R9262 += 1, R9218 += 1, R88 += 1 };
  s1 -> s1 [71, 74] { R9262 += 1, R9218 += 1, R88 += 1 };
  s1 -> s8 [75, 75] { R9262 += 1, R9218 += 1, R88 += 1 };
  s1 -> s1 [76, 65535] { R9262 += 1, R9218 += 1, R88 += 1 };
  s2 -> s1 [0, 69] { R9262 += 1, R9218 += 1, R88 += 1 };
  s2 -> s2 [0, 69] { R9262 += 1, R9218 += 1, R87 += 1, R88 += 1 };
  s2 -> s4 [70, 70] { R9262 += 1, R9218 += 1, R87 += 1, R88 += 1 };
  s2 -> s5 [70, 70] { R9262 += 1, R9218 += 1, R88 += 1 };
  s2 -> s6 [70, 70] { R9262 += 1, R9218 += 1, R87 += 1, R88 += 1 };
  s2 -> s7 [70, 70] { R9262 += 1, R9218 += 1, R88 += 1 };
  s2 -> s1 [71, 74] { R9262 += 1, R9218 += 1, R88 += 1 };
  s2 -> s2 [71, 65535] { R9262 += 1, R9218 += 1, R87 += 1, R88 += 1 };
  s2 -> s8 [75, 75] { R9262 += 1, R9218 += 1, R88 += 1 };
  s2 -> s1 [76, 65535] { R9262 += 1, R9218 += 1, R88 += 1 };
  s3 -> s1 [0, 69] { R9262 += 1, R9218 += 1, R88 += 1 };
  s3 -> s2 [0, 69] { R9262 += 1, R9218 += 1, R87 += 1, R88 += 1 };
  s3 -> s3 [0, 65535] { R9262 += 1, R9217 += 1, R9218 += 1 };
  s3 -> s4 [70, 70] { R9262 += 1, R9218 += 1, R87 += 1, R88 += 1 };
  s3 -> s5 [70, 70] { R9262 += 1, R9218 += 1, R88 += 1 };
  s3 -> s6 [70, 70] { R9262 += 1, R9218 += 1, R87 += 1, R88 += 1 };
  s3 -> s7 [70, 70] { R9262 += 1, R9218 += 1, R88 += 1 };
  s3 -> s1 [71, 74] { R9262 += 1, R9218 += 1, R88 += 1 };
  s3 -> s2 [71, 65535] { R9262 += 1, R9218 += 1, R87 += 1, R88 += 1 };
  s3 -> s8 [75, 75] { R9262 += 1, R9218 += 1, R88 += 1 };
  s3 -> s1 [76, 65535] { R9262 += 1, R9218 += 1, R88 += 1 };
  s4 -> s7 [0, 74] { R9262 += 1, R9218 += 1, R88 += 1 };
  s4 -> s4 [0, 65535] { R9262 += 1, R9218 += 1, R87 += 1, R88 += 1 };
  s4 -> s10 [75, 75] { R9262 += 1, R9218 += 1, R88 += 1 };
  s4 -> s7 [76, 65535] { R9262 += 1, R9218 += 1, R88 += 1 };
  s7 -> s7 [0, 74] { R9262 += 1, R9218 += 1, R88 += 1 };
  s7 -> s10 [75, 75] { R9262 += 1, R9218 += 1, R88 += 1 };
  s7 -> s7 [76, 65535] { R9262 += 1, R9218 += 1, R88 += 1 };
  s8 -> s8 [0, 69] { R9262 += 1, R9218 += 1, R88 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R9262 += 1 };
  s8 -> s10 [70, 70] { R9262 += 1, R9218 += 1, R88 += 1 };
  s8 -> s11 [70, 70] { R9262 += 1, R9218 += 1, R88 += 1 };
  s8 -> s8 [71, 65535] { R9262 += 1, R9218 += 1, R88 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R9262 += 1, R9218 += 1, R88 += 1 };
  s10 -> s12 [0, 65535] { R9262 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R9262 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R9262 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 69] { R9264 += 1, R9220 += 1, R91 += 1, R92 += 1 };
  s0 -> s2 [0, 65535] { R9264 += 1, R9219 += 1, R9220 += 1 };
  s0 -> s0 [0, 65535] { R9263 += 1, R9264 += 1 };
  s0 -> s3 [70, 70] { R9264 += 1, R9220 += 1, R91 += 1, R92 += 1 };
  s0 -> s4 [70, 70] { R9264 += 1, R9220 += 1, R91 += 1, R92 += 1 };
  s0 -> s1 [71, 65535] { R9264 += 1, R9220 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 69] { R9264 += 1, R9220 += 1, R91 += 1, R92 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R9264 += 1 };
  s1 -> s3 [70, 70] { R9264 += 1, R9220 += 1, R91 += 1, R92 += 1 };
  s1 -> s4 [70, 70] { R9264 += 1, R9220 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [71, 65535] { R9264 += 1, R9220 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [0, 69] { R9264 += 1, R9220 += 1, R91 += 1, R92 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R9264 += 1, R9219 += 1, R9220 += 1 };
  s2 -> s3 [70, 70] { R9264 += 1, R9220 += 1, R91 += 1, R92 += 1 };
  s2 -> s4 [70, 70] { R9264 += 1, R9220 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [71, 65535] { R9264 += 1, R9220 += 1, R91 += 1, R92 += 1 };
  s3 -> s6 [0, 65535] { R9264 += 1 };
  s3 -> s3 [0, 65535] { R9264 += 1, R9220 += 1, R91 += 1, R92 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R9264 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9264 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 69] { R9266 += 1, R9222 += 1, R6806 += 1, R6807 += 1 };
  s0 -> s2 [0, 69] { R9266 += 1, R9222 += 1, R6805 += 1, R6806 += 1 };
  s0 -> s0 [0, 65535] { R9265 += 1, R9266 += 1 };
  s0 -> s3 [0, 65535] { R9266 += 1, R9221 += 1, R9222 += 1 };
  s0 -> s4 [70, 70] { R9266 += 1, R9222 += 1, R6806 += 1, R6807 += 1 };
  s0 -> s5 [70, 70] { R9266 += 1, R9222 += 1, R6806 += 1, R6807 += 1 };
  s0 -> s6 [70, 70] { R9266 += 1, R9222 += 1, R6805 += 1, R6806 += 1 };
  s0 -> s7 [70, 70] { R9266 += 1, R9222 += 1, R6805 += 1, R6806 += 1 };
  s0 -> s1 [71, 65535] { R9266 += 1, R9222 += 1, R6806 += 1, R6807 += 1 };
  s0 -> s2 [71, 65535] { R9266 += 1, R9222 += 1, R6805 += 1, R6806 += 1 };
  s1 -> s1 [0, 69] { R9266 += 1, R9222 += 1, R6806 += 1, R6807 += 1 };
  s1 -> s1 [0, 65535] { R9266 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s4 [70, 70] { R9266 += 1, R9222 += 1, R6806 += 1, R6807 += 1 };
  s1 -> s5 [70, 70] { R9266 += 1, R9222 += 1, R6806 += 1, R6807 += 1 };
  s1 -> s1 [71, 65535] { R9266 += 1, R9222 += 1, R6806 += 1, R6807 += 1 };
  s2 -> s1 [0, 69] { R9266 += 1, R9222 += 1, R6806 += 1, R6807 += 1 };
  s2 -> s2 [0, 69] { R9266 += 1, R9222 += 1, R6805 += 1, R6806 += 1 };
  s2 -> s4 [70, 70] { R9266 += 1, R9222 += 1, R6806 += 1, R6807 += 1 };
  s2 -> s5 [70, 70] { R9266 += 1, R9222 += 1, R6806 += 1, R6807 += 1 };
  s2 -> s6 [70, 70] { R9266 += 1, R9222 += 1, R6805 += 1, R6806 += 1 };
  s2 -> s7 [70, 70] { R9266 += 1, R9222 += 1, R6805 += 1, R6806 += 1 };
  s2 -> s1 [71, 65535] { R9266 += 1, R9222 += 1, R6806 += 1, R6807 += 1 };
  s2 -> s2 [71, 65535] { R9266 += 1, R9222 += 1, R6805 += 1, R6806 += 1 };
  s3 -> s1 [0, 69] { R9266 += 1, R9222 += 1, R6806 += 1, R6807 += 1 };
  s3 -> s2 [0, 69] { R9266 += 1, R9222 += 1, R6805 += 1, R6806 += 1 };
  s3 -> s3 [0, 65535] { R9266 += 1, R9221 += 1, R9222 += 1 };
  s3 -> s4 [70, 70] { R9266 += 1, R9222 += 1, R6806 += 1, R6807 += 1 };
  s3 -> s5 [70, 70] { R9266 += 1, R9222 += 1, R6806 += 1, R6807 += 1 };
  s3 -> s6 [70, 70] { R9266 += 1, R9222 += 1, R6805 += 1, R6806 += 1 };
  s3 -> s7 [70, 70] { R9266 += 1, R9222 += 1, R6805 += 1, R6806 += 1 };
  s3 -> s1 [71, 65535] { R9266 += 1, R9222 += 1, R6806 += 1, R6807 += 1 };
  s3 -> s2 [71, 65535] { R9266 += 1, R9222 += 1, R6805 += 1, R6806 += 1 };
  s4 -> s4 [0, 65535] { R9266 += 1, R9222 += 1, R6806 += 1, R6807 += 1 };
  s4 -> s9 [0, 65535] { R9266 += 1 };
  s4 -> s8 [0, 65535];
  s5 -> s5 [0, 65535] { R9266 += 1 };
  s5 -> s8 [0, 65535];
  s7 -> s4 [0, 65535] { R9266 += 1, R9222 += 1, R6806 += 1, R6807 += 1 };
  s7 -> s7 [0, 65535] { R9266 += 1, R9222 += 1, R6805 += 1, R6806 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R9266 += 1 };
  s9 -> s8 [0, 65535];
  accepting s4, s8, s5, s9, s1;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 69] { R9268 += 1, R9224 += 1, R9044 += 1, R9046 += 1 };
  s0 -> s2 [0, 69] { R9268 += 1, R9224 += 1, R9043 += 1, R9044 += 1 };
  s0 -> s3 [0, 69] { R9268 += 1, R9224 += 1, R9044 += 1, R9045 += 1, R9046 += 1 };
  s0 -> s0 [0, 65535] { R9267 += 1, R9268 += 1 };
  s0 -> s4 [0, 65535] { R9268 += 1, R9223 += 1, R9224 += 1 };
  s0 -> s5 [70, 70] { R9268 += 1, R9224 += 1, R9044 += 1, R9045 += 1, R9046 += 1 };
  s0 -> s6 [70, 70] { R9268 += 1, R9224 += 1, R9044 += 1, R9046 += 1 };
  s0 -> s7 [70, 70] { R9268 += 1, R9224 += 1, R9043 += 1, R9044 += 1 };
  s0 -> s8 [70, 70] { R9268 += 1, R9224 += 1, R9043 += 1, R9044 += 1 };
  s0 -> s9 [70, 70] { R9268 += 1, R9224 += 1, R9044 += 1, R9046 += 1 };
  s0 -> s10 [70, 70] { R9268 += 1, R9224 += 1, R9044 += 1, R9045 += 1, R9046 += 1 };
  s0 -> s1 [71, 74] { R9268 += 1, R9224 += 1, R9044 += 1, R9046 += 1 };
  s0 -> s2 [71, 65535] { R9268 += 1, R9224 += 1, R9043 += 1, R9044 += 1 };
  s0 -> s3 [71, 65535] { R9268 += 1, R9224 += 1, R9044 += 1, R9045 += 1, R9046 += 1 };
  s0 -> s1 [76, 65535] { R9268 += 1, R9224 += 1, R9044 += 1, R9046 += 1 };
  s1 -> s1 [0, 69] { R9268 += 1, R9224 += 1, R9044 += 1, R9046 += 1 };
  s1 -> s1 [0, 65535] { R9268 += 1 };
  s1 -> s11 [0, 65535];
  s1 -> s6 [70, 70] { R9268 += 1, R9224 += 1, R9044 += 1, R9046 += 1 };
  s1 -> s9 [70, 70] { R9268 += 1, R9224 += 1, R9044 += 1, R9046 += 1 };
  s1 -> s1 [71, 74] { R9268 += 1, R9224 += 1, R9044 += 1, R9046 += 1 };
  s1 -> s1 [76, 65535] { R9268 += 1, R9224 += 1, R9044 += 1, R9046 += 1 };
  s2 -> s1 [0, 69] { R9268 += 1, R9224 += 1, R9044 += 1, R9046 += 1 };
  s2 -> s2 [0, 69] { R9268 += 1, R9224 += 1, R9043 += 1, R9044 += 1 };
  s2 -> s3 [0, 69] { R9268 += 1, R9224 += 1, R9044 += 1, R9045 += 1, R9046 += 1 };
  s2 -> s5 [70, 70] { R9268 += 1, R9224 += 1, R9044 += 1, R9045 += 1, R9046 += 1 };
  s2 -> s6 [70, 70] { R9268 += 1, R9224 += 1, R9044 += 1, R9046 += 1 };
  s2 -> s7 [70, 70] { R9268 += 1, R9224 += 1, R9043 += 1, R9044 += 1 };
  s2 -> s8 [70, 70] { R9268 += 1, R9224 += 1, R9043 += 1, R9044 += 1 };
  s2 -> s9 [70, 70] { R9268 += 1, R9224 += 1, R9044 += 1, R9046 += 1 };
  s2 -> s10 [70, 70] { R9268 += 1, R9224 += 1, R9044 += 1, R9045 += 1, R9046 += 1 };
  s2 -> s1 [71, 74] { R9268 += 1, R9224 += 1, R9044 += 1, R9046 += 1 };
  s2 -> s2 [71, 65535] { R9268 += 1, R9224 += 1, R9043 += 1, R9044 += 1 };
  s2 -> s3 [71, 65535] { R9268 += 1, R9224 += 1, R9044 += 1, R9045 += 1, R9046 += 1 };
  s2 -> s1 [76, 65535] { R9268 += 1, R9224 += 1, R9044 += 1, R9046 += 1 };
  s3 -> s1 [0, 69] { R9268 += 1, R9224 += 1, R9044 += 1, R9046 += 1 };
  s3 -> s3 [0, 69] { R9268 += 1, R9224 += 1, R9044 += 1, R9045 += 1, R9046 += 1 };
  s3 -> s5 [70, 70] { R9268 += 1, R9224 += 1, R9044 += 1, R9045 += 1, R9046 += 1 };
  s3 -> s6 [70, 70] { R9268 += 1, R9224 += 1, R9044 += 1, R9046 += 1 };
  s3 -> s9 [70, 70] { R9268 += 1, R9224 += 1, R9044 += 1, R9046 += 1 };
  s3 -> s10 [70, 70] { R9268 += 1, R9224 += 1, R9044 += 1, R9045 += 1, R9046 += 1 };
  s3 -> s1 [71, 74] { R9268 += 1, R9224 += 1, R9044 += 1, R9046 += 1 };
  s3 -> s3 [71, 65535] { R9268 += 1, R9224 += 1, R9044 += 1, R9045 += 1, R9046 += 1 };
  s3 -> s1 [76, 65535] { R9268 += 1, R9224 += 1, R9044 += 1, R9046 += 1 };
  s4 -> s1 [0, 69] { R9268 += 1, R9224 += 1, R9044 += 1, R9046 += 1 };
  s4 -> s2 [0, 69] { R9268 += 1, R9224 += 1, R9043 += 1, R9044 += 1 };
  s4 -> s3 [0, 69] { R9268 += 1, R9224 += 1, R9044 += 1, R9045 += 1, R9046 += 1 };
  s4 -> s4 [0, 65535] { R9268 += 1, R9223 += 1, R9224 += 1 };
  s4 -> s5 [70, 70] { R9268 += 1, R9224 += 1, R9044 += 1, R9045 += 1, R9046 += 1 };
  s4 -> s6 [70, 70] { R9268 += 1, R9224 += 1, R9044 += 1, R9046 += 1 };
  s4 -> s7 [70, 70] { R9268 += 1, R9224 += 1, R9043 += 1, R9044 += 1 };
  s4 -> s8 [70, 70] { R9268 += 1, R9224 += 1, R9043 += 1, R9044 += 1 };
  s4 -> s9 [70, 70] { R9268 += 1, R9224 += 1, R9044 += 1, R9046 += 1 };
  s4 -> s10 [70, 70] { R9268 += 1, R9224 += 1, R9044 += 1, R9045 += 1, R9046 += 1 };
  s4 -> s1 [71, 74] { R9268 += 1, R9224 += 1, R9044 += 1, R9046 += 1 };
  s4 -> s2 [71, 65535] { R9268 += 1, R9224 += 1, R9043 += 1, R9044 += 1 };
  s4 -> s3 [71, 65535] { R9268 += 1, R9224 += 1, R9044 += 1, R9045 += 1, R9046 += 1 };
  s4 -> s1 [76, 65535] { R9268 += 1, R9224 += 1, R9044 += 1, R9046 += 1 };
  s6 -> s6 [0, 65535] { R9268 += 1 };
  s6 -> s11 [0, 65535];
  s7 -> s9 [0, 74] { R9268 += 1, R9224 += 1, R9044 += 1, R9046 += 1 };
  s7 -> s7 [0, 65535] { R9268 += 1, R9224 += 1, R9043 += 1, R9044 += 1 };
  s7 -> s10 [0, 65535] { R9268 += 1, R9224 += 1, R9044 += 1, R9045 += 1, R9046 += 1 };
  s7 -> s9 [76, 65535] { R9268 += 1, R9224 += 1, R9044 += 1, R9046 += 1 };
  s9 -> s9 [0, 74] { R9268 += 1, R9224 += 1, R9044 += 1, R9046 += 1 };
  s9 -> s11 [0, 65535];
  s9 -> s9 [0, 65535] { R9268 += 1 };
  s9 -> s9 [76, 65535] { R9268 += 1, R9224 += 1, R9044 += 1, R9046 += 1 };
  s10 -> s9 [0, 74] { R9268 += 1, R9224 += 1, R9044 += 1, R9046 += 1 };
  s10 -> s10 [0, 65535] { R9268 += 1, R9224 += 1, R9044 += 1, R9045 += 1, R9046 += 1 };
  s10 -> s9 [76, 65535] { R9268 += 1, R9224 += 1, R9044 += 1, R9046 += 1 };
  s11 -> s11 [0, 65535];
  accepting s1, s6, s9, s11;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 69] { R9270 += 1, R9226 += 1, R9161 += 1, R9162 += 1 };
  s0 -> s2 [0, 69] { R9270 += 1, R9226 += 1, R9162 += 1, R9164 += 1, R9165 += 1 };
  s0 -> s3 [0, 69] { R9270 += 1, R9226 += 1, R9162 += 1, R9163 += 1, R9164 += 1 };
  s0 -> s0 [0, 65535] { R9269 += 1, R9270 += 1 };
  s0 -> s4 [0, 65535] { R9270 += 1, R9225 += 1, R9226 += 1 };
  s0 -> s5 [70, 70] { R9270 += 1, R9226 += 1, R9162 += 1, R9163 += 1, R9164 += 1 };
  s0 -> s6 [70, 70] { R9270 += 1, R9226 += 1, R9162 += 1, R9164 += 1, R9165 += 1 };
  s0 -> s7 [70, 70] { R9270 += 1, R9226 += 1, R9162 += 1, R9163 += 1, R9164 += 1 };
  s0 -> s8 [70, 70] { R9270 += 1, R9226 += 1, R9161 += 1, R9162 += 1 };
  s0 -> s9 [70, 70] { R9270 += 1, R9226 += 1, R9161 += 1, R9162 += 1 };
  s0 -> s10 [70, 70] { R9270 += 1, R9226 += 1, R9162 += 1, R9164 += 1, R9165 += 1 };
  s0 -> s1 [71, 65535] { R9270 += 1, R9226 += 1, R9161 += 1, R9162 += 1 };
  s0 -> s2 [71, 65535] { R9270 += 1, R9226 += 1, R9162 += 1, R9164 += 1, R9165 += 1 };
  s0 -> s3 [71, 65535] { R9270 += 1, R9226 += 1, R9162 += 1, R9163 += 1, R9164 += 1 };
  s1 -> s1 [0, 69] { R9270 += 1, R9226 += 1, R9161 += 1, R9162 += 1 };
  s1 -> s2 [0, 69] { R9270 += 1, R9226 += 1, R9162 += 1, R9164 += 1, R9165 += 1 };
  s1 -> s3 [0, 69] { R9270 += 1, R9226 += 1, R9162 += 1, R9163 += 1, R9164 += 1 };
  s1 -> s5 [70, 70] { R9270 += 1, R9226 += 1, R9162 += 1, R9163 += 1, R9164 += 1 };
  s1 -> s6 [70, 70] { R9270 += 1, R9226 += 1, R9162 += 1, R9164 += 1, R9165 += 1 };
  s1 -> s7 [70, 70] { R9270 += 1, R9226 += 1, R9162 += 1, R9163 += 1, R9164 += 1 };
  s1 -> s8 [70, 70] { R9270 += 1, R9226 += 1, R9161 += 1, R9162 += 1 };
  s1 -> s9 [70, 70] { R9270 += 1, R9226 += 1, R9161 += 1, R9162 += 1 };
  s1 -> s10 [70, 70] { R9270 += 1, R9226 += 1, R9162 += 1, R9164 += 1, R9165 += 1 };
  s1 -> s1 [71, 65535] { R9270 += 1, R9226 += 1, R9161 += 1, R9162 += 1 };
  s1 -> s2 [71, 65535] { R9270 += 1, R9226 += 1, R9162 += 1, R9164 += 1, R9165 += 1 };
  s1 -> s3 [71, 65535] { R9270 += 1, R9226 += 1, R9162 += 1, R9163 += 1, R9164 += 1 };
  s2 -> s2 [0, 69] { R9270 += 1, R9226 += 1, R9162 += 1, R9164 += 1, R9165 += 1 };
  s2 -> s15 [0, 69] { R9270 += 1, R9226 += 1 };
  s2 -> s17 [0, 69] { R9270 += 1, R9226 += 1, R9162 += 1 };
  s2 -> s6 [70, 70] { R9270 += 1, R9226 += 1, R9162 += 1, R9164 += 1, R9165 += 1 };
  s2 -> s16 [70, 70] { R9270 += 1, R9226 += 1 };
  s2 -> s14 [70, 70] { R9270 += 1, R9226 += 1, R9162 += 1 };
  s2 -> s10 [70, 70] { R9270 += 1, R9226 += 1, R9162 += 1, R9164 += 1, R9165 += 1 };
  s2 -> s18 [70, 70] { R9270 += 1, R9226 += 1, R9162 += 1 };
  s2 -> s11 [70, 70] { R9270 += 1, R9226 += 1 };
  s2 -> s2 [71, 65535] { R9270 += 1, R9226 += 1, R9162 += 1, R9164 += 1, R9165 += 1 };
  s2 -> s15 [71, 65535] { R9270 += 1, R9226 += 1 };
  s2 -> s17 [71, 65535] { R9270 += 1, R9226 += 1, R9162 += 1 };
  s3 -> s2 [0, 69] { R9270 += 1, R9226 += 1, R9162 += 1, R9164 += 1, R9165 += 1 };
  s3 -> s3 [0, 69] { R9270 += 1, R9226 += 1, R9162 += 1, R9163 += 1, R9164 += 1 };
  s3 -> s15 [0, 69] { R9270 += 1, R9226 += 1 };
  s3 -> s5 [70, 70] { R9270 += 1, R9226 += 1, R9162 += 1, R9163 += 1, R9164 += 1 };
  s3 -> s6 [70, 70] { R9270 += 1, R9226 += 1, R9162 += 1, R9164 += 1, R9165 += 1 };
  s3 -> s7 [70, 70] { R9270 += 1, R9226 += 1, R9162 += 1, R9163 += 1, R9164 += 1 };
  s3 -> s16 [70, 70] { R9270 += 1, R9226 += 1 };
  s3 -> s10 [70, 70] { R9270 += 1, R9226 += 1, R9162 += 1, R9164 += 1, R9165 += 1 };
  s3 -> s11 [70, 70] { R9270 += 1, R9226 += 1 };
  s3 -> s2 [71, 65535] { R9270 += 1, R9226 += 1, R9162 += 1, R9164 += 1, R9165 += 1 };
  s3 -> s3 [71, 65535] { R9270 += 1, R9226 += 1, R9162 += 1, R9163 += 1, R9164 += 1 };
  s3 -> s15 [71, 65535] { R9270 += 1, R9226 += 1 };
  s4 -> s1 [0, 69] { R9270 += 1, R9226 += 1, R9161 += 1, R9162 += 1 };
  s4 -> s2 [0, 69] { R9270 += 1, R9226 += 1, R9162 += 1, R9164 += 1, R9165 += 1 };
  s4 -> s3 [0, 69] { R9270 += 1, R9226 += 1, R9162 += 1, R9163 += 1, R9164 += 1 };
  s4 -> s4 [0, 65535] { R9270 += 1, R9225 += 1, R9226 += 1 };
  s4 -> s5 [70, 70] { R9270 += 1, R9226 += 1, R9162 += 1, R9163 += 1, R9164 += 1 };
  s4 -> s6 [70, 70] { R9270 += 1, R9226 += 1, R9162 += 1, R9164 += 1, R9165 += 1 };
  s4 -> s7 [70, 70] { R9270 += 1, R9226 += 1, R9162 += 1, R9163 += 1, R9164 += 1 };
  s4 -> s8 [70, 70] { R9270 += 1, R9226 += 1, R9161 += 1, R9162 += 1 };
  s4 -> s9 [70, 70] { R9270 += 1, R9226 += 1, R9161 += 1, R9162 += 1 };
  s4 -> s10 [70, 70] { R9270 += 1, R9226 += 1, R9162 += 1, R9164 += 1, R9165 += 1 };
  s4 -> s1 [71, 65535] { R9270 += 1, R9226 += 1, R9161 += 1, R9162 += 1 };
  s4 -> s2 [71, 65535] { R9270 += 1, R9226 += 1, R9162 += 1, R9164 += 1, R9165 += 1 };
  s4 -> s3 [71, 65535] { R9270 += 1, R9226 += 1, R9162 += 1, R9163 += 1, R9164 += 1 };
  s6 -> s6 [0, 65535] { R9270 += 1, R9226 += 1, R9162 += 1, R9164 += 1, R9165 += 1 };
  s6 -> s14 [0, 65535] { R9270 += 1, R9226 += 1, R9162 += 1 };
  s6 -> s11 [0, 65535] { R9270 += 1, R9226 += 1 };
  s7 -> s6 [0, 65535] { R9270 += 1, R9226 += 1, R9162 += 1, R9164 += 1, R9165 += 1 };
  s7 -> s7 [0, 65535] { R9270 += 1, R9226 += 1, R9162 += 1, R9163 += 1, R9164 += 1 };
  s7 -> s11 [0, 65535] { R9270 += 1, R9226 += 1 };
  s8 -> s6 [0, 65535] { R9270 += 1, R9226 += 1, R9162 += 1, R9164 += 1, R9165 += 1 };
  s8 -> s7 [0, 65535] { R9270 += 1, R9226 += 1, R9162 += 1, R9163 += 1, R9164 += 1 };
  s8 -> s8 [0, 65535] { R9270 += 1, R9226 += 1, R9161 += 1, R9162 += 1 };
  s11 -> s12 [0, 65535] { R9270 += 1 };
  s11 -> s13 [0, 65535];
  s11 -> s11 [0, 65535] { R9270 += 1, R9226 += 1 };
  s12 -> s12 [0, 65535] { R9270 += 1 };
  s12 -> s13 [0, 65535];
  s13 -> s13 [0, 65535];
  s14 -> s14 [0, 65535] { R9270 += 1, R9226 += 1, R9162 += 1 };
  s14 -> s11 [0, 65535] { R9270 += 1, R9226 += 1 };
  s15 -> s15 [0, 69] { R9270 += 1, R9226 += 1 };
  s15 -> s15 [0, 65535] { R9270 += 1 };
  s15 -> s13 [0, 65535];
  s15 -> s16 [70, 70] { R9270 += 1, R9226 += 1 };
  s15 -> s11 [70, 70] { R9270 += 1, R9226 += 1 };
  s15 -> s15 [71, 65535] { R9270 += 1, R9226 += 1 };
  s16 -> s16 [0, 65535] { R9270 += 1 };
  s16 -> s13 [0, 65535];
  s17 -> s15 [0, 69] { R9270 += 1, R9226 += 1 };
  s17 -> s17 [0, 69] { R9270 += 1, R9226 += 1, R9162 += 1 };
  s17 -> s16 [70, 70] { R9270 += 1, R9226 += 1 };
  s17 -> s14 [70, 70] { R9270 += 1, R9226 += 1, R9162 += 1 };
  s17 -> s18 [70, 70] { R9270 += 1, R9226 += 1, R9162 += 1 };
  s17 -> s11 [70, 70] { R9270 += 1, R9226 += 1 };
  s17 -> s15 [71, 65535] { R9270 += 1, R9226 += 1 };
  s17 -> s17 [71, 65535] { R9270 += 1, R9226 += 1, R9162 += 1 };
  accepting s16, s12, s13, s15, s11;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [102, 102];
  accepting s1;
};
};
constraint R2 = R9188 && R3 = R9270 && R23 - R9270 = -1 && R24 = R9270 && R25 - R9270 = -1 && R26 = R9270 && R27 = 0 && R28 = 1 && R29 = 0 && R30 = 1 && R45 + R84 + R83 + -1*R9048 + -1*R9044 - R66 = 0 && R49 + R89 + R87 = 0 && R50 + R90 + R88 + -1*R9048 + -1*R9044 - R66 = 0 && R55 + R96 + R93 + -1*R9050 + -1*R9046 - R68 = 0 && R65 + R9047 + R9043 = 0 && R67 + R9049 + R9045 = 0 && R9187 = 0 && R9211 = 0 && R9212 = 0 && R9217 = 0 && R9218 = 0 && R9221 = 0 && R9222 = 0 && R9223 = 0 && R9224 = 0 && R9225 = 0 && R9226 = 0 && R9227 = 0 && R9228 = R9270 && R9229 = 0 && R9230 = R9270 && R9231 = 0 && R9232 = R9270 && R9233 = 0 && R9234 = R9270 && R9235 = 0 && R9236 = R9270 && R9237 = 0 && R9238 = R9270 && R9239 = 0 && R9240 = R9270 && R9241 = 0 && R9242 = R9270 && R9243 = 0 && R9244 = R9270 && R9245 = 0 && R9246 = R9270 && R9247 = 0 && R9248 = R9270 && R9249 = 0 && R9250 = R9270 && R9251 = 0 && R9252 = R9270 && R9253 = 0 && R9254 = R9270 && R9255 = 0 && R9256 = R9270 && R9257 = 0 && R9258 = R9270 && R9259 = 0 && R9260 = R9270 && R9261 = 0 && R9262 = R9270 && R9263 = 0 && R9264 = R9270 && R9265 = 0 && R9266 = R9270 && R9267 = 0 && R9268 = R9270 && R9269 = 0 && R12 < 1 && R15 < 1 && R16 < 1 && R47 + R86 + R85 < 1 && R61 + R6810 + R6807 < 1 && -1*R9048 + -1*R9044 - R66 < 1 && -1*R9050 + -1*R9046 - R68 < 1 && -1 < R9188 && 0 < R9270 && (R53 + R94 + R91 != 0 || R54 + R95 + R92 + -1*R9048 + -1*R9044 - R66 = 0 || R66 + R9048 + R9044 < 1) && (R59 + R6808 + R6805 != 0 || R60 + R6809 + R6806 + -1*R9048 + -1*R9044 - R66 = 0 || R66 + R9048 + R9044 < 1) && (R66 + R9048 + R9044 != 0 || ((R53 + R94 + R91 != 0 || R54 + R95 + R92 = 0 || R68 + R9050 + R9046 < 1) && (R53 + R94 + R91 = 0 || R68 + R9050 + R9046 < 1))) && (R66 + R9048 + R9044 != 0 || ((R59 + R6808 + R6805 != 0 || R60 + R6809 + R6806 = 0 || R68 + R9050 + R9046 < 1) && (R59 + R6808 + R6805 = 0 || R68 + R9050 + R9046 < 1))) && (R66 + R9048 + R9044 != 0 || ((R73 + R9166 + R9161 != 0 || R74 + R9167 + R9162 = 0 || R68 + R9050 + R9046 < 1) && (R73 + R9166 + R9161 = 0 || R68 + R9050 + R9046 < 1))) && (R68 + R9050 + R9046 != 0 || R77 + R9170 + R9165 = 0 || (R75 + R9168 + R9163 = 0 && R76 + R9169 + R9164 = 0)) && (R73 + R9166 + R9161 != 0 || R66 + R9048 + R9044 + -1*R9167 + -1*R9162 - R74 = 0 || R66 + R9048 + R9044 < 1) && (R75 + R9168 + R9163 != 0 || R68 + R9050 + R9046 + -1*R9169 + -1*R9164 - R76 = 0 || R68 + R9050 + R9046 < 1) && (R9171 != 0 || R9172 = R9188 || (R20 = 0 && R9188 = 0)) && (R9173 != 0 || R9174 = R9188 || (R20 = 0 && R9188 = 0)) && (R9175 != 0 || R9176 = R9188 || (R20 = 0 && R9188 = 0)) && (R9177 != 0 || R9178 = R9188 || (R20 = 0 && R9188 = 0)) && (R9179 != 0 || R9180 = R9188 || (R20 = 0 && R9188 = 0)) && (R9181 != 0 || R9182 = R9188 || (R20 = 0 && R9188 = 0)) && (R9183 != 0 || R9184 = R9188 || (R20 = 0 && R9188 = 0)) && (R9185 != 0 || R9186 = R9188 || (R20 = 0 && R9188 = 0)) && (R9189 != 0 || R9188 = R9190 || (R20 = 0 && R9188 = 0)) && (R21 = 0 || (R9209 = 0 && R9210 = 0)) && (R21 = 0 || (R9213 = 0 && R9214 = 0)) && (R21 = 0 || (R9215 = 0 && R9216 = 0)) && (R21 = 0 || (R9219 = 0 && R9220 = 0)) && (R22 = 0 || (R9191 = 0 && R9192 = 0)) && (R22 = 0 || (R9193 = 0 && R9194 = 0)) && (R22 = 0 || (R9195 = 0 && R9196 = 0)) && (R22 = 0 || (R9197 = 0 && R9198 = 0)) && (R22 = 0 || (R9199 = 0 && R9200 = 0)) && (R22 = 0 || (R9201 = 0 && R9202 = 0)) && (R22 = 0 || (R9203 = 0 && R9204 = 0)) && (R22 = 0 || (R9205 = 0 && R9206 = 0)) && (R22 = 0 || (R9207 = 0 && R9208 = 0)) && (R53 + R94 + R91 = 0 || R66 + R9048 + R9044 < 1) && (R59 + R6808 + R6805 = 0 || R66 + R9048 + R9044 < 1) && (R73 + R9166 + R9161 = 0 || R66 + R9048 + R9044 < 1) && (R75 + R9168 + R9163 = 0 || R68 + R9050 + R9046 < 1) && (R9171 = 0 || (R20 = 0 && R9188 = 0)) && (R9173 = 0 || (R20 = 0 && R9188 = 0)) && (R9175 = 0 || (R20 = 0 && R9188 = 0)) && (R9177 = 0 || (R20 = 0 && R9188 = 0)) && (R9179 = 0 || (R20 = 0 && R9188 = 0)) && (R9181 = 0 || (R20 = 0 && R9188 = 0)) && (R9183 = 0 || (R20 = 0 && R9188 = 0)) && (R9185 = 0 || (R20 = 0 && R9188 = 0)) && (R9189 = 0 || (R20 = 0 && R9188 = 0));
// End of Parikh automata intersection problem
