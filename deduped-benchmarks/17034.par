// Parikh automata intersection problem, generated by OSTRICH+
counter int R12, R15, R16, R2, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R3451, R3452, R3453, R3454, R3455, R3456, R4, R45, R47, R49, R5, R50, R53, R54, R55, R59, R60, R61, R6247, R6248, R6249, R6250, R6251, R6252, R6253, R6254, R6365, R6366, R6367, R6368, R6369, R6370, R6371, R6372, R6373, R6374, R6375, R6376, R6377, R6378, R6379, R6380, R6381, R6382, R6383, R6384, R6385, R6386, R6387, R6388, R6389, R6390, R6391, R6392, R6393, R6394, R6395, R6396, R6397, R6398, R6399, R6400, R6401, R6402, R6403, R6404, R6405, R6406, R6407, R6408, R6409, R6410, R6411, R6412, R6413, R6414, R6415, R6416, R6417, R6418, R6419, R6420, R6421, R6422, R6423, R6424, R6425, R6426, R6427, R6428, R6429, R6430, R6431, R6432, R6433, R6434, R6435, R6436, R6437, R6438, R6439, R6440, R6441, R6442, R6443, R6444, R6445, R6446, R6447, R6448, R6449, R6450, R6451, R6452, R6453, R6454, R6455, R6456, R6457, R6458, R6459, R6460, R6461, R6462, R6463, R6464, R6465, R6466, R6467, R6468, R6469, R6470, R6471, R6472, R6473, R6474, R65, R66, R67, R68, R73, R74, R75, R76, R77, R83, R84, R85, R86, R87, R88, R89, R90, R91, R92, R93, R94, R95, R96;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [70, 70];
  s0 -> s0 [71, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [70, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R15 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 69];
  s0 -> s0 [0, 65535] { R16 += 1 };
  s0 -> s2 [70, 70];
  s0 -> s1 [71, 65535];
  s1 -> s1 [0, 69];
  s1 -> s2 [70, 70];
  s1 -> s1 [71, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R24 += 1 };
  s0 -> s0 [0, 65535] { R23 += 1, R24 += 1 };
  s0 -> s2 [9, 13] { R24 += 1 };
  s0 -> s1 [14, 31] { R24 += 1 };
  s0 -> s2 [32, 32] { R24 += 1 };
  s0 -> s1 [33, 65535] { R24 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R24 += 1 };
  s2 -> s1 [0, 65535] { R24 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R25 += 1, R26 += 1 };
  s1 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R28 += 1 };
  s0 -> s0 [0, 65535] { R27 += 1, R28 += 1 };
  s0 -> s2 [9, 13] { R28 += 1 };
  s0 -> s1 [14, 31] { R28 += 1 };
  s0 -> s2 [32, 32] { R28 += 1 };
  s0 -> s1 [33, 65535] { R28 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R28 += 1 };
  s2 -> s1 [0, 65535] { R28 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R29 += 1, R30 += 1 };
  s1 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R6396 += 1, R22 += 1 };
  s0 -> s0 [0, 65535] { R6395 += 1, R6396 += 1 };
  s1 -> s1 [0, 65535] { R6396 += 1, R22 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 69] { R6398 += 1 };
  s0 -> s0 [0, 65535] { R6397 += 1, R6398 += 1 };
  s0 -> s2 [70, 70] { R6398 += 1 };
  s0 -> s3 [70, 70] { R6398 += 1 };
  s0 -> s1 [76, 65535] { R6398 += 1 };
  s1 -> s1 [0, 69] { R6398 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R6398 += 1 };
  s1 -> s3 [70, 70] { R6398 += 1 };
  s1 -> s1 [76, 65535] { R6398 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 70] { R6398 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [76, 65535] { R6398 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 69] { R6400 += 1, R45 += 1 };
  s0 -> s0 [0, 65535] { R6399 += 1, R6400 += 1 };
  s0 -> s2 [70, 70] { R6400 += 1, R45 += 1 };
  s0 -> s3 [70, 70] { R6400 += 1, R45 += 1 };
  s0 -> s1 [71, 65535] { R6400 += 1, R45 += 1 };
  s1 -> s1 [0, 69] { R6400 += 1, R45 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R6400 += 1, R45 += 1 };
  s1 -> s3 [70, 70] { R6400 += 1, R45 += 1 };
  s1 -> s1 [71, 65535] { R6400 += 1, R45 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R6400 += 1, R45 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 69] { R6402 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R6401 += 1, R6402 += 1 };
  s0 -> s2 [70, 70] { R6402 += 1, R47 += 1 };
  s0 -> s3 [70, 70] { R6402 += 1, R47 += 1 };
  s0 -> s1 [71, 65535] { R6402 += 1, R47 += 1 };
  s1 -> s1 [0, 69] { R6402 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R6402 += 1, R47 += 1 };
  s1 -> s3 [70, 70] { R6402 += 1, R47 += 1 };
  s1 -> s1 [71, 65535] { R6402 += 1, R47 += 1 };
  s2 -> s2 [0, 65535] { R6402 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 69] { R6404 += 1, R49 += 1, R50 += 1 };
  s0 -> s0 [0, 65535] { R6403 += 1, R6404 += 1 };
  s0 -> s2 [70, 70] { R6404 += 1, R49 += 1, R50 += 1 };
  s0 -> s3 [70, 70] { R6404 += 1, R49 += 1, R50 += 1 };
  s0 -> s1 [71, 65535] { R6404 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 69] { R6404 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R6404 += 1, R49 += 1, R50 += 1 };
  s1 -> s3 [70, 70] { R6404 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [71, 65535] { R6404 += 1, R49 += 1, R50 += 1 };
  s2 -> s2 [0, 65535] { R6404 += 1, R49 += 1, R50 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 69] { R6406 += 1, R53 += 1, R54 += 1 };
  s0 -> s0 [0, 65535] { R6405 += 1, R6406 += 1 };
  s0 -> s2 [70, 70] { R6406 += 1, R53 += 1, R54 += 1 };
  s0 -> s3 [70, 70] { R6406 += 1, R53 += 1, R54 += 1 };
  s0 -> s1 [71, 65535] { R6406 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 69] { R6406 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R6406 += 1, R53 += 1, R54 += 1 };
  s1 -> s3 [70, 70] { R6406 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [71, 65535] { R6406 += 1, R53 += 1, R54 += 1 };
  s2 -> s2 [0, 65535] { R6406 += 1, R53 += 1, R54 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 69] { R6408 += 1, R59 += 1, R60 += 1 };
  s0 -> s0 [0, 65535] { R6407 += 1, R6408 += 1 };
  s0 -> s2 [70, 70] { R6408 += 1, R59 += 1, R60 += 1 };
  s0 -> s3 [70, 70] { R6408 += 1, R59 += 1, R60 += 1 };
  s0 -> s1 [71, 65535] { R6408 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 69] { R6408 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R6408 += 1, R59 += 1, R60 += 1 };
  s1 -> s3 [70, 70] { R6408 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [71, 65535] { R6408 += 1, R59 += 1, R60 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R6408 += 1, R59 += 1, R60 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 69] { R6410 += 1, R65 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R6409 += 1, R6410 += 1 };
  s0 -> s2 [70, 70] { R6410 += 1, R65 += 1, R66 += 1 };
  s0 -> s3 [70, 70] { R6410 += 1, R65 += 1, R66 += 1 };
  s0 -> s1 [71, 65535] { R6410 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 69] { R6410 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R6410 += 1, R65 += 1, R66 += 1 };
  s1 -> s3 [70, 70] { R6410 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [71, 65535] { R6410 += 1, R65 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R6410 += 1, R65 += 1, R66 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 69] { R6412 += 1, R73 += 1, R74 += 1 };
  s0 -> s0 [0, 65535] { R6411 += 1, R6412 += 1 };
  s0 -> s2 [70, 70] { R6412 += 1, R73 += 1, R74 += 1 };
  s0 -> s3 [70, 70] { R6412 += 1, R73 += 1, R74 += 1 };
  s0 -> s1 [71, 65535] { R6412 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 69] { R6412 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R6412 += 1, R73 += 1, R74 += 1 };
  s1 -> s3 [70, 70] { R6412 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [71, 65535] { R6412 += 1, R73 += 1, R74 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R6412 += 1, R73 += 1, R74 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 69] { R6432 += 1 };
  s0 -> s0 [0, 65535] { R6431 += 1, R6432 += 1 };
  s0 -> s2 [70, 70] { R6432 += 1 };
  s0 -> s1 [71, 65535] { R6432 += 1 };
  s1 -> s1 [0, 69] { R6432 += 1 };
  s1 -> s2 [70, 70] { R6432 += 1 };
  s1 -> s1 [71, 65535] { R6432 += 1 };
  s2 -> s2 [0, 65535] { R6432 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R6433 += 1, R6434 += 1 };
  s0 -> s1 [0, 65535] { R6434 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R6434 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 69] { R6436 += 1 };
  s0 -> s0 [0, 65535] { R6435 += 1, R6436 += 1 };
  s0 -> s2 [0, 65535] { R6436 += 1, R12 += 1 };
  s0 -> s3 [70, 70] { R6436 += 1 };
  s0 -> s1 [71, 65535] { R6436 += 1 };
  s1 -> s1 [0, 69] { R6436 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [70, 70] { R6436 += 1 };
  s1 -> s1 [71, 65535] { R6436 += 1 };
  s2 -> s1 [0, 69] { R6436 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R6436 += 1, R12 += 1 };
  s2 -> s3 [70, 70] { R6436 += 1 };
  s2 -> s1 [71, 65535] { R6436 += 1 };
  s3 -> s3 [0, 65535] { R6436 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 69] { R6438 += 1, R6376 += 1 };
  s0 -> s0 [0, 65535] { R6437 += 1, R6438 += 1 };
  s0 -> s2 [0, 65535] { R6438 += 1, R6375 += 1, R6376 += 1 };
  s0 -> s1 [71, 65535] { R6438 += 1, R6376 += 1 };
  s1 -> s1 [0, 69] { R6438 += 1, R6376 += 1 };
  s1 -> s1 [0, 65535] { R6438 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [71, 65535] { R6438 += 1, R6376 += 1 };
  s2 -> s1 [0, 69] { R6438 += 1, R6376 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R6438 += 1, R6375 += 1, R6376 += 1 };
  s2 -> s1 [71, 65535] { R6438 += 1, R6376 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s0 [0, 65535] { R6439 += 1, R6440 += 1 };
  s0 -> s1 [0, 65535] { R6440 += 1, R6378 += 1, R20 += 1 };
  s0 -> s2 [0, 65535] { R6440 += 1, R6377 += 1, R6378 += 1 };
  s1 -> s1 [0, 65535] { R6440 += 1, R6378 += 1, R20 += 1 };
  s1 -> s4 [0, 65535] { R6440 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R6440 += 1, R6378 += 1, R20 += 1 };
  s2 -> s2 [0, 65535] { R6440 += 1, R6377 += 1, R6378 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R6440 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 70] { R6442 += 1, R6380 += 1 };
  s0 -> s2 [0, 65535] { R6442 += 1, R6379 += 1, R6380 += 1 };
  s0 -> s0 [0, 65535] { R6441 += 1, R6442 += 1 };
  s0 -> s1 [75, 65535] { R6442 += 1, R6380 += 1 };
  s1 -> s1 [0, 70] { R6442 += 1, R6380 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R6442 += 1 };
  s1 -> s1 [75, 65535] { R6442 += 1, R6380 += 1 };
  s2 -> s1 [0, 70] { R6442 += 1, R6380 += 1 };
  s2 -> s2 [0, 65535] { R6442 += 1, R6379 += 1, R6380 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [75, 65535] { R6442 += 1, R6380 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s0 [0, 65535] { R6443 += 1, R6444 += 1 };
  s0 -> s1 [0, 65535] { R6444 += 1, R6381 += 1, R6382 += 1 };
  s0 -> s2 [0, 65535] { R6444 += 1, R6382 += 1, R84 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R6444 += 1, R6381 += 1, R6382 += 1 };
  s1 -> s2 [0, 65535] { R6444 += 1, R6382 += 1, R84 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R6444 += 1 };
  s2 -> s2 [0, 65535] { R6444 += 1, R6382 += 1, R84 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R6444 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 74] { R6446 += 1, R6384 += 1 };
  s0 -> s2 [0, 65535] { R6446 += 1, R6383 += 1, R6384 += 1 };
  s0 -> s3 [0, 65535] { R6446 += 1, R6384 += 1, R86 += 1 };
  s0 -> s0 [0, 65535] { R6445 += 1, R6446 += 1 };
  s0 -> s1 [76, 65535] { R6446 += 1, R6384 += 1 };
  s1 -> s1 [0, 74] { R6446 += 1, R6384 += 1 };
  s1 -> s1 [0, 65535] { R6446 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [76, 65535] { R6446 += 1, R6384 += 1 };
  s2 -> s1 [0, 74] { R6446 += 1, R6384 += 1 };
  s2 -> s2 [0, 65535] { R6446 += 1, R6383 += 1, R6384 += 1 };
  s2 -> s3 [0, 65535] { R6446 += 1, R6384 += 1, R86 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [76, 65535] { R6446 += 1, R6384 += 1 };
  s3 -> s1 [0, 74] { R6446 += 1, R6384 += 1 };
  s3 -> s3 [0, 65535] { R6446 += 1, R6384 += 1, R86 += 1 };
  s3 -> s4 [0, 65535] { R6446 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [76, 65535] { R6446 += 1, R6384 += 1 };
  s4 -> s4 [0, 65535] { R6446 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 65535] { R6448 += 1, R6386 += 1 };
  s0 -> s0 [0, 65535] { R6447 += 1, R6448 += 1 };
  s0 -> s2 [0, 65535] { R6448 += 1, R6386 += 1, R90 += 1 };
  s0 -> s3 [0, 65535] { R6448 += 1, R6385 += 1, R6386 += 1 };
  s1 -> s1 [0, 65535] { R6448 += 1, R6386 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R6448 += 1 };
  s2 -> s1 [0, 65535] { R6448 += 1, R6386 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R6448 += 1, R6386 += 1, R90 += 1 };
  s2 -> s5 [0, 65535] { R6448 += 1 };
  s3 -> s1 [0, 65535] { R6448 += 1, R6386 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R6448 += 1, R6386 += 1, R90 += 1 };
  s3 -> s3 [0, 65535] { R6448 += 1, R6385 += 1, R6386 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R6448 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s0 [0, 65535] { R6449 += 1, R6450 += 1 };
  s0 -> s1 [0, 65535] { R6450 += 1, R6388 += 1, R95 += 1, R96 += 1 };
  s0 -> s2 [0, 65535] { R6450 += 1, R6387 += 1, R6388 += 1 };
  s0 -> s3 [0, 65535] { R6450 += 1, R6388 += 1, R94 += 1, R95 += 1 };
  s1 -> s6 [0, 65535] { R6450 += 1, R6388 += 1 };
  s1 -> s4 [0, 65535] { R6450 += 1 };
  s1 -> s1 [0, 65535] { R6450 += 1, R6388 += 1, R95 += 1, R96 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R6450 += 1, R6388 += 1, R95 += 1, R96 += 1 };
  s2 -> s2 [0, 65535] { R6450 += 1, R6387 += 1, R6388 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R6450 += 1, R6388 += 1, R94 += 1, R95 += 1 };
  s3 -> s4 [0, 65535] { R6450 += 1 };
  s3 -> s1 [0, 65535] { R6450 += 1, R6388 += 1, R95 += 1, R96 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R6450 += 1, R6388 += 1, R94 += 1, R95 += 1 };
  s4 -> s4 [0, 65535] { R6450 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6450 += 1, R6388 += 1 };
  s6 -> s4 [0, 65535] { R6450 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 74] { R6452 += 1, R6390 += 1, R3455 += 1 };
  s0 -> s2 [0, 65535] { R6452 += 1, R6389 += 1, R6390 += 1 };
  s0 -> s0 [0, 65535] { R6451 += 1, R6452 += 1 };
  s0 -> s1 [0, 65535] { R6452 += 1, R6390 += 1 };
  s0 -> s1 [76, 65535] { R6452 += 1, R6390 += 1, R3455 += 1 };
  s1 -> s1 [0, 74] { R6452 += 1, R6390 += 1, R3455 += 1 };
  s1 -> s4 [0, 65535] { R6452 += 1 };
  s1 -> s1 [0, 65535] { R6452 += 1, R6390 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [76, 65535] { R6452 += 1, R6390 += 1, R3455 += 1 };
  s2 -> s1 [0, 74] { R6452 += 1, R6390 += 1, R3455 += 1 };
  s2 -> s2 [0, 65535] { R6452 += 1, R6389 += 1, R6390 += 1 };
  s2 -> s1 [0, 65535] { R6452 += 1, R6390 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [76, 65535] { R6452 += 1, R6390 += 1, R3455 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R6452 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 74] { R6454 += 1, R6392 += 1, R6252 += 1, R6254 += 1 };
  s0 -> s2 [0, 65535] { R6454 += 1, R6392 += 1, R6252 += 1, R6253 += 1, R6254 += 1 };
  s0 -> s0 [0, 65535] { R6453 += 1, R6454 += 1 };
  s0 -> s3 [0, 65535] { R6454 += 1, R6391 += 1, R6392 += 1 };
  s0 -> s4 [75, 75] { R6454 += 1, R6392 += 1, R6252 += 1, R6254 += 1 };
  s0 -> s1 [76, 65535] { R6454 += 1, R6392 += 1, R6252 += 1, R6254 += 1 };
  s1 -> s1 [0, 74] { R6454 += 1, R6392 += 1, R6252 += 1, R6254 += 1 };
  s1 -> s4 [75, 75] { R6454 += 1, R6392 += 1, R6252 += 1, R6254 += 1 };
  s1 -> s1 [76, 65535] { R6454 += 1, R6392 += 1, R6252 += 1, R6254 += 1 };
  s2 -> s1 [0, 74] { R6454 += 1, R6392 += 1, R6252 += 1, R6254 += 1 };
  s2 -> s2 [0, 65535] { R6454 += 1, R6392 += 1, R6252 += 1, R6253 += 1, R6254 += 1 };
  s2 -> s4 [75, 75] { R6454 += 1, R6392 += 1, R6252 += 1, R6254 += 1 };
  s2 -> s1 [76, 65535] { R6454 += 1, R6392 += 1, R6252 += 1, R6254 += 1 };
  s3 -> s1 [0, 74] { R6454 += 1, R6392 += 1, R6252 += 1, R6254 += 1 };
  s3 -> s2 [0, 65535] { R6454 += 1, R6392 += 1, R6252 += 1, R6253 += 1, R6254 += 1 };
  s3 -> s3 [0, 65535] { R6454 += 1, R6391 += 1, R6392 += 1 };
  s3 -> s4 [75, 75] { R6454 += 1, R6392 += 1, R6252 += 1, R6254 += 1 };
  s3 -> s1 [76, 65535] { R6454 += 1, R6392 += 1, R6252 += 1, R6254 += 1 };
  s4 -> s4 [0, 65535] { R6454 += 1, R6392 += 1, R6252 += 1, R6254 += 1 };
  s4 -> s5 [0, 65535] { R6454 += 1 };
  s4 -> s6 [0, 65535] { R6454 += 1, R6392 += 1, R6252 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s8 [0, 65535] { R6454 += 1, R6392 += 1 };
  s5 -> s5 [0, 65535] { R6454 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s5 [0, 65535] { R6454 += 1 };
  s6 -> s6 [0, 65535] { R6454 += 1, R6392 += 1, R6252 += 1 };
  s6 -> s7 [0, 65535];
  s6 -> s8 [0, 65535] { R6454 += 1, R6392 += 1 };
  s7 -> s7 [0, 65535];
  s8 -> s5 [0, 65535] { R6454 += 1 };
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R6454 += 1, R6392 += 1 };
  accepting s4, s8, s5, s6, s7;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 65535] { R6456 += 1, R6393 += 1, R6394 += 1 };
  s0 -> s2 [0, 65535] { R6456 += 1, R6394 += 1 };
  s0 -> s0 [0, 65535] { R6455 += 1, R6456 += 1 };
  s1 -> s1 [0, 65535] { R6456 += 1, R6393 += 1, R6394 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R6456 += 1, R6394 += 1 };
  s2 -> s3 [0, 65535] { R6456 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R6456 += 1, R6394 += 1 };
  s3 -> s3 [0, 65535] { R6456 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R6458 += 1, R6413 += 1, R6414 += 1 };
  s0 -> s2 [0, 65535] { R6458 += 1, R6414 += 1, R21 += 1 };
  s0 -> s0 [0, 65535] { R6457 += 1, R6458 += 1 };
  s1 -> s1 [0, 65535] { R6458 += 1, R6413 += 1, R6414 += 1 };
  s1 -> s2 [0, 65535] { R6458 += 1, R6414 += 1, R21 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R6458 += 1 };
  s2 -> s2 [0, 65535] { R6458 += 1, R6414 += 1, R21 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R6458 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 69] { R6460 += 1, R6416 += 1 };
  s0 -> s0 [0, 65535] { R6459 += 1, R6460 += 1 };
  s0 -> s2 [0, 65535] { R6460 += 1, R6415 += 1, R6416 += 1 };
  s0 -> s3 [70, 70] { R6460 += 1, R6416 += 1 };
  s0 -> s4 [70, 70] { R6460 += 1, R6416 += 1 };
  s0 -> s5 [75, 75] { R6460 += 1, R6416 += 1 };
  s0 -> s1 [76, 65535] { R6460 += 1, R6416 += 1 };
  s1 -> s1 [0, 69] { R6460 += 1, R6416 += 1 };
  s1 -> s3 [70, 70] { R6460 += 1, R6416 += 1 };
  s1 -> s4 [70, 70] { R6460 += 1, R6416 += 1 };
  s1 -> s5 [75, 75] { R6460 += 1, R6416 += 1 };
  s1 -> s1 [76, 65535] { R6460 += 1, R6416 += 1 };
  s2 -> s1 [0, 69] { R6460 += 1, R6416 += 1 };
  s2 -> s2 [0, 65535] { R6460 += 1, R6415 += 1, R6416 += 1 };
  s2 -> s3 [70, 70] { R6460 += 1, R6416 += 1 };
  s2 -> s4 [70, 70] { R6460 += 1, R6416 += 1 };
  s2 -> s5 [75, 75] { R6460 += 1, R6416 += 1 };
  s2 -> s1 [76, 65535] { R6460 += 1, R6416 += 1 };
  s3 -> s3 [0, 70] { R6460 += 1, R6416 += 1 };
  s3 -> s8 [75, 75] { R6460 += 1, R6416 += 1 };
  s3 -> s3 [76, 65535] { R6460 += 1, R6416 += 1 };
  s5 -> s5 [0, 69] { R6460 += 1, R6416 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R6460 += 1 };
  s5 -> s7 [70, 70] { R6460 += 1, R6416 += 1 };
  s5 -> s8 [70, 70] { R6460 += 1, R6416 += 1 };
  s5 -> s5 [75, 65535] { R6460 += 1, R6416 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R6460 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 70] { R6460 += 1, R6416 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R6460 += 1 };
  s8 -> s8 [75, 65535] { R6460 += 1, R6416 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 69] { R6462 += 1, R6418 += 1, R83 += 1 };
  s0 -> s2 [0, 65535] { R6462 += 1, R6417 += 1, R6418 += 1 };
  s0 -> s0 [0, 65535] { R6461 += 1, R6462 += 1 };
  s0 -> s3 [70, 70] { R6462 += 1, R6418 += 1, R83 += 1 };
  s0 -> s4 [70, 70] { R6462 += 1, R6418 += 1, R83 += 1 };
  s0 -> s1 [71, 65535] { R6462 += 1, R6418 += 1, R83 += 1 };
  s1 -> s1 [0, 69] { R6462 += 1, R6418 += 1, R83 += 1 };
  s1 -> s1 [0, 65535] { R6462 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [70, 70] { R6462 += 1, R6418 += 1, R83 += 1 };
  s1 -> s4 [70, 70] { R6462 += 1, R6418 += 1, R83 += 1 };
  s1 -> s1 [71, 65535] { R6462 += 1, R6418 += 1, R83 += 1 };
  s2 -> s1 [0, 69] { R6462 += 1, R6418 += 1, R83 += 1 };
  s2 -> s2 [0, 65535] { R6462 += 1, R6417 += 1, R6418 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [70, 70] { R6462 += 1, R6418 += 1, R83 += 1 };
  s2 -> s4 [70, 70] { R6462 += 1, R6418 += 1, R83 += 1 };
  s2 -> s1 [71, 65535] { R6462 += 1, R6418 += 1, R83 += 1 };
  s3 -> s3 [0, 65535] { R6462 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R6462 += 1, R6418 += 1, R83 += 1 };
  s4 -> s5 [0, 65535] { R6462 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R6462 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 69] { R6464 += 1, R6420 += 1, R85 += 1 };
  s0 -> s0 [0, 65535] { R6463 += 1, R6464 += 1 };
  s0 -> s2 [0, 65535] { R6464 += 1, R6419 += 1, R6420 += 1 };
  s0 -> s3 [70, 70] { R6464 += 1, R6420 += 1, R85 += 1 };
  s0 -> s4 [70, 70] { R6464 += 1, R6420 += 1, R85 += 1 };
  s0 -> s1 [71, 65535] { R6464 += 1, R6420 += 1, R85 += 1 };
  s1 -> s1 [0, 69] { R6464 += 1, R6420 += 1, R85 += 1 };
  s1 -> s1 [0, 65535] { R6464 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [70, 70] { R6464 += 1, R6420 += 1, R85 += 1 };
  s1 -> s4 [70, 70] { R6464 += 1, R6420 += 1, R85 += 1 };
  s1 -> s1 [71, 65535] { R6464 += 1, R6420 += 1, R85 += 1 };
  s2 -> s1 [0, 69] { R6464 += 1, R6420 += 1, R85 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R6464 += 1, R6419 += 1, R6420 += 1 };
  s2 -> s3 [70, 70] { R6464 += 1, R6420 += 1, R85 += 1 };
  s2 -> s4 [70, 70] { R6464 += 1, R6420 += 1, R85 += 1 };
  s2 -> s1 [71, 65535] { R6464 += 1, R6420 += 1, R85 += 1 };
  s3 -> s3 [0, 65535] { R6464 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R6464 += 1, R6420 += 1, R85 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R6464 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6464 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 69] { R6466 += 1, R6422 += 1, R88 += 1 };
  s0 -> s2 [0, 69] { R6466 += 1, R6422 += 1, R87 += 1, R88 += 1 };
  s0 -> s3 [0, 65535] { R6466 += 1, R6421 += 1, R6422 += 1 };
  s0 -> s0 [0, 65535] { R6465 += 1, R6466 += 1 };
  s0 -> s4 [70, 70] { R6466 += 1, R6422 += 1, R88 += 1 };
  s0 -> s5 [70, 70] { R6466 += 1, R6422 += 1, R88 += 1 };
  s0 -> s6 [70, 70] { R6466 += 1, R6422 += 1, R87 += 1, R88 += 1 };
  s0 -> s7 [70, 70] { R6466 += 1, R6422 += 1, R87 += 1, R88 += 1 };
  s0 -> s1 [71, 74] { R6466 += 1, R6422 += 1, R88 += 1 };
  s0 -> s2 [71, 65535] { R6466 += 1, R6422 += 1, R87 += 1, R88 += 1 };
  s0 -> s8 [75, 75] { R6466 += 1, R6422 += 1, R88 += 1 };
  s0 -> s1 [76, 65535] { R6466 += 1, R6422 += 1, R88 += 1 };
  s1 -> s1 [0, 69] { R6466 += 1, R6422 += 1, R88 += 1 };
  s1 -> s4 [70, 70] { R6466 += 1, R6422 += 1, R88 += 1 };
  s1 -> s5 [70, 70] { R6466 += 1, R6422 += 1, R88 += 1 };
  s1 -> s1 [71, 74] { R6466 += 1, R6422 += 1, R88 += 1 };
  s1 -> s8 [75, 75] { R6466 += 1, R6422 += 1, R88 += 1 };
  s1 -> s1 [76, 65535] { R6466 += 1, R6422 += 1, R88 += 1 };
  s2 -> s1 [0, 69] { R6466 += 1, R6422 += 1, R88 += 1 };
  s2 -> s2 [0, 69] { R6466 += 1, R6422 += 1, R87 += 1, R88 += 1 };
  s2 -> s4 [70, 70] { R6466 += 1, R6422 += 1, R88 += 1 };
  s2 -> s5 [70, 70] { R6466 += 1, R6422 += 1, R88 += 1 };
  s2 -> s6 [70, 70] { R6466 += 1, R6422 += 1, R87 += 1, R88 += 1 };
  s2 -> s7 [70, 70] { R6466 += 1, R6422 += 1, R87 += 1, R88 += 1 };
  s2 -> s1 [71, 74] { R6466 += 1, R6422 += 1, R88 += 1 };
  s2 -> s2 [71, 65535] { R6466 += 1, R6422 += 1, R87 += 1, R88 += 1 };
  s2 -> s8 [75, 75] { R6466 += 1, R6422 += 1, R88 += 1 };
  s2 -> s1 [76, 65535] { R6466 += 1, R6422 += 1, R88 += 1 };
  s3 -> s1 [0, 69] { R6466 += 1, R6422 += 1, R88 += 1 };
  s3 -> s2 [0, 69] { R6466 += 1, R6422 += 1, R87 += 1, R88 += 1 };
  s3 -> s3 [0, 65535] { R6466 += 1, R6421 += 1, R6422 += 1 };
  s3 -> s4 [70, 70] { R6466 += 1, R6422 += 1, R88 += 1 };
  s3 -> s5 [70, 70] { R6466 += 1, R6422 += 1, R88 += 1 };
  s3 -> s6 [70, 70] { R6466 += 1, R6422 += 1, R87 += 1, R88 += 1 };
  s3 -> s7 [70, 70] { R6466 += 1, R6422 += 1, R87 += 1, R88 += 1 };
  s3 -> s1 [71, 74] { R6466 += 1, R6422 += 1, R88 += 1 };
  s3 -> s2 [71, 65535] { R6466 += 1, R6422 += 1, R87 += 1, R88 += 1 };
  s3 -> s8 [75, 75] { R6466 += 1, R6422 += 1, R88 += 1 };
  s3 -> s1 [76, 65535] { R6466 += 1, R6422 += 1, R88 += 1 };
  s4 -> s4 [0, 74] { R6466 += 1, R6422 += 1, R88 += 1 };
  s4 -> s10 [75, 75] { R6466 += 1, R6422 += 1, R88 += 1 };
  s4 -> s4 [76, 65535] { R6466 += 1, R6422 += 1, R88 += 1 };
  s7 -> s4 [0, 74] { R6466 += 1, R6422 += 1, R88 += 1 };
  s7 -> s7 [0, 65535] { R6466 += 1, R6422 += 1, R87 += 1, R88 += 1 };
  s7 -> s10 [75, 75] { R6466 += 1, R6422 += 1, R88 += 1 };
  s7 -> s4 [76, 65535] { R6466 += 1, R6422 += 1, R88 += 1 };
  s8 -> s8 [0, 69] { R6466 += 1, R6422 += 1, R88 += 1 };
  s8 -> s8 [0, 65535] { R6466 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [70, 70] { R6466 += 1, R6422 += 1, R88 += 1 };
  s8 -> s11 [70, 70] { R6466 += 1, R6422 += 1, R88 += 1 };
  s8 -> s8 [71, 65535] { R6466 += 1, R6422 += 1, R88 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s12 [0, 65535] { R6466 += 1 };
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R6466 += 1, R6422 += 1, R88 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R6466 += 1 };
  s12 -> s12 [0, 65535] { R6466 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 69] { R6468 += 1, R6424 += 1, R91 += 1, R92 += 1 };
  s0 -> s2 [0, 65535] { R6468 += 1, R6423 += 1, R6424 += 1 };
  s0 -> s0 [0, 65535] { R6467 += 1, R6468 += 1 };
  s0 -> s3 [70, 70] { R6468 += 1, R6424 += 1, R91 += 1, R92 += 1 };
  s0 -> s4 [70, 70] { R6468 += 1, R6424 += 1, R91 += 1, R92 += 1 };
  s0 -> s1 [71, 65535] { R6468 += 1, R6424 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 69] { R6468 += 1, R6424 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 65535] { R6468 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [70, 70] { R6468 += 1, R6424 += 1, R91 += 1, R92 += 1 };
  s1 -> s4 [70, 70] { R6468 += 1, R6424 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [71, 65535] { R6468 += 1, R6424 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [0, 69] { R6468 += 1, R6424 += 1, R91 += 1, R92 += 1 };
  s2 -> s2 [0, 65535] { R6468 += 1, R6423 += 1, R6424 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [70, 70] { R6468 += 1, R6424 += 1, R91 += 1, R92 += 1 };
  s2 -> s4 [70, 70] { R6468 += 1, R6424 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [71, 65535] { R6468 += 1, R6424 += 1, R91 += 1, R92 += 1 };
  s3 -> s3 [0, 65535] { R6468 += 1, R6424 += 1, R91 += 1, R92 += 1 };
  s3 -> s6 [0, 65535] { R6468 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R6468 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6468 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 69] { R6470 += 1, R6426 += 1, R3452 += 1 };
  s0 -> s2 [0, 69] { R6470 += 1, R6426 += 1, R3452 += 1, R3453 += 1 };
  s0 -> s3 [0, 69] { R6470 += 1, R6426 += 1, R3451 += 1, R3452 += 1 };
  s0 -> s0 [0, 65535] { R6469 += 1, R6470 += 1 };
  s0 -> s4 [0, 65535] { R6470 += 1, R6425 += 1, R6426 += 1 };
  s0 -> s5 [70, 70] { R6470 += 1, R6426 += 1, R3451 += 1, R3452 += 1 };
  s0 -> s6 [70, 70] { R6470 += 1, R6426 += 1, R3452 += 1, R3453 += 1 };
  s0 -> s7 [70, 70] { R6470 += 1, R6426 += 1, R3451 += 1, R3452 += 1 };
  s0 -> s8 [70, 70] { R6470 += 1, R6426 += 1, R3452 += 1 };
  s0 -> s9 [70, 70] { R6470 += 1, R6426 += 1, R3452 += 1, R3453 += 1 };
  s0 -> s10 [70, 70] { R6470 += 1, R6426 += 1, R3452 += 1 };
  s0 -> s1 [71, 74] { R6470 += 1, R6426 += 1, R3452 += 1 };
  s0 -> s2 [71, 65535] { R6470 += 1, R6426 += 1, R3452 += 1, R3453 += 1 };
  s0 -> s3 [71, 65535] { R6470 += 1, R6426 += 1, R3451 += 1, R3452 += 1 };
  s0 -> s1 [76, 65535] { R6470 += 1, R6426 += 1, R3452 += 1 };
  s1 -> s1 [0, 69] { R6470 += 1, R6426 += 1, R3452 += 1 };
  s1 -> s1 [0, 65535] { R6470 += 1 };
  s1 -> s11 [0, 65535];
  s1 -> s8 [70, 70] { R6470 += 1, R6426 += 1 };
  s1 -> s10 [70, 70] { R6470 += 1, R6426 += 1 };
  s1 -> s1 [71, 74] { R6470 += 1, R6426 += 1, R3452 += 1 };
  s1 -> s1 [71, 65535] { R6470 += 1, R6426 += 1 };
  s1 -> s1 [76, 65535] { R6470 += 1, R6426 += 1, R3452 += 1 };
  s2 -> s1 [0, 69] { R6470 += 1, R6426 += 1, R3452 += 1 };
  s2 -> s2 [0, 69] { R6470 += 1, R6426 += 1, R3452 += 1, R3453 += 1 };
  s2 -> s6 [70, 70] { R6470 += 1, R6426 += 1, R3452 += 1, R3453 += 1 };
  s2 -> s8 [70, 70] { R6470 += 1, R6426 += 1, R3452 += 1 };
  s2 -> s9 [70, 70] { R6470 += 1, R6426 += 1, R3452 += 1, R3453 += 1 };
  s2 -> s10 [70, 70] { R6470 += 1, R6426 += 1, R3452 += 1 };
  s2 -> s1 [71, 74] { R6470 += 1, R6426 += 1, R3452 += 1 };
  s2 -> s2 [71, 65535] { R6470 += 1, R6426 += 1, R3452 += 1, R3453 += 1 };
  s2 -> s1 [76, 65535] { R6470 += 1, R6426 += 1, R3452 += 1 };
  s3 -> s1 [0, 69] { R6470 += 1, R6426 += 1, R3452 += 1 };
  s3 -> s2 [0, 69] { R6470 += 1, R6426 += 1, R3452 += 1, R3453 += 1 };
  s3 -> s3 [0, 69] { R6470 += 1, R6426 += 1, R3451 += 1, R3452 += 1 };
  s3 -> s5 [70, 70] { R6470 += 1, R6426 += 1, R3451 += 1, R3452 += 1 };
  s3 -> s6 [70, 70] { R6470 += 1, R6426 += 1, R3452 += 1, R3453 += 1 };
  s3 -> s7 [70, 70] { R6470 += 1, R6426 += 1, R3451 += 1, R3452 += 1 };
  s3 -> s8 [70, 70] { R6470 += 1, R6426 += 1, R3452 += 1 };
  s3 -> s9 [70, 70] { R6470 += 1, R6426 += 1, R3452 += 1, R3453 += 1 };
  s3 -> s10 [70, 70] { R6470 += 1, R6426 += 1, R3452 += 1 };
  s3 -> s1 [71, 74] { R6470 += 1, R6426 += 1, R3452 += 1 };
  s3 -> s2 [71, 65535] { R6470 += 1, R6426 += 1, R3452 += 1, R3453 += 1 };
  s3 -> s3 [71, 65535] { R6470 += 1, R6426 += 1, R3451 += 1, R3452 += 1 };
  s3 -> s1 [76, 65535] { R6470 += 1, R6426 += 1, R3452 += 1 };
  s4 -> s1 [0, 69] { R6470 += 1, R6426 += 1, R3452 += 1 };
  s4 -> s2 [0, 69] { R6470 += 1, R6426 += 1, R3452 += 1, R3453 += 1 };
  s4 -> s3 [0, 69] { R6470 += 1, R6426 += 1, R3451 += 1, R3452 += 1 };
  s4 -> s4 [0, 65535] { R6470 += 1, R6425 += 1, R6426 += 1 };
  s4 -> s5 [70, 70] { R6470 += 1, R6426 += 1, R3451 += 1, R3452 += 1 };
  s4 -> s6 [70, 70] { R6470 += 1, R6426 += 1, R3452 += 1, R3453 += 1 };
  s4 -> s7 [70, 70] { R6470 += 1, R6426 += 1, R3451 += 1, R3452 += 1 };
  s4 -> s8 [70, 70] { R6470 += 1, R6426 += 1, R3452 += 1 };
  s4 -> s9 [70, 70] { R6470 += 1, R6426 += 1, R3452 += 1, R3453 += 1 };
  s4 -> s10 [70, 70] { R6470 += 1, R6426 += 1, R3452 += 1 };
  s4 -> s1 [71, 74] { R6470 += 1, R6426 += 1, R3452 += 1 };
  s4 -> s2 [71, 65535] { R6470 += 1, R6426 += 1, R3452 += 1, R3453 += 1 };
  s4 -> s3 [71, 65535] { R6470 += 1, R6426 += 1, R3451 += 1, R3452 += 1 };
  s4 -> s1 [76, 65535] { R6470 += 1, R6426 += 1, R3452 += 1 };
  s5 -> s10 [0, 74] { R6470 += 1, R6426 += 1, R3452 += 1 };
  s5 -> s5 [0, 65535] { R6470 += 1, R6426 += 1, R3451 += 1, R3452 += 1 };
  s5 -> s6 [0, 65535] { R6470 += 1, R6426 += 1, R3452 += 1, R3453 += 1 };
  s5 -> s10 [76, 65535] { R6470 += 1, R6426 += 1, R3452 += 1 };
  s6 -> s10 [0, 74] { R6470 += 1, R6426 += 1, R3452 += 1 };
  s6 -> s6 [0, 65535] { R6470 += 1, R6426 += 1, R3452 += 1, R3453 += 1 };
  s6 -> s10 [76, 65535] { R6470 += 1, R6426 += 1, R3452 += 1 };
  s8 -> s8 [0, 65535] { R6470 += 1 };
  s8 -> s11 [0, 65535];
  s10 -> s10 [0, 74] { R6470 += 1, R6426 += 1, R3452 += 1 };
  s10 -> s11 [0, 65535];
  s10 -> s10 [0, 65535] { R6470 += 1, R6426 += 1 };
  s10 -> s12 [0, 65535] { R6470 += 1 };
  s10 -> s10 [76, 65535] { R6470 += 1, R6426 += 1, R3452 += 1 };
  s11 -> s11 [0, 65535];
  s12 -> s11 [0, 65535];
  s12 -> s12 [0, 65535] { R6470 += 1 };
  accepting s12, s8, s1, s10, s11;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 69] { R6472 += 1, R6428 += 1, R6248 += 1, R6249 += 1, R6250 += 1 };
  s0 -> s2 [0, 69] { R6472 += 1, R6428 += 1, R6247 += 1, R6248 += 1 };
  s0 -> s0 [0, 65535] { R6471 += 1, R6472 += 1 };
  s0 -> s3 [0, 65535] { R6472 += 1, R6427 += 1, R6428 += 1 };
  s0 -> s4 [70, 70] { R6472 += 1, R6428 += 1, R6248 += 1, R6249 += 1, R6250 += 1 };
  s0 -> s5 [70, 70] { R6472 += 1, R6428 += 1, R6247 += 1, R6248 += 1 };
  s0 -> s6 [70, 70] { R6472 += 1, R6428 += 1, R6247 += 1, R6248 += 1 };
  s0 -> s7 [70, 70] { R6472 += 1, R6428 += 1, R6248 += 1, R6249 += 1, R6250 += 1 };
  s0 -> s1 [71, 65535] { R6472 += 1, R6428 += 1, R6248 += 1, R6249 += 1, R6250 += 1 };
  s0 -> s2 [71, 65535] { R6472 += 1, R6428 += 1, R6247 += 1, R6248 += 1 };
  s1 -> s1 [0, 69] { R6472 += 1, R6428 += 1, R6248 += 1, R6249 += 1, R6250 += 1 };
  s1 -> s1 [0, 65535] { R6472 += 1 };
  s1 -> s9 [0, 65535];
  s1 -> s4 [70, 70] { R6472 += 1, R6428 += 1, R6248 += 1, R6249 += 1, R6250 += 1 };
  s1 -> s7 [70, 70] { R6472 += 1, R6428 += 1, R6248 += 1, R6249 += 1, R6250 += 1 };
  s1 -> s1 [71, 65535] { R6472 += 1, R6428 += 1, R6248 += 1, R6249 += 1, R6250 += 1 };
  s2 -> s1 [0, 69] { R6472 += 1, R6428 += 1, R6248 += 1, R6249 += 1, R6250 += 1 };
  s2 -> s2 [0, 69] { R6472 += 1, R6428 += 1, R6247 += 1, R6248 += 1 };
  s2 -> s4 [70, 70] { R6472 += 1, R6428 += 1, R6248 += 1, R6249 += 1, R6250 += 1 };
  s2 -> s5 [70, 70] { R6472 += 1, R6428 += 1, R6247 += 1, R6248 += 1 };
  s2 -> s6 [70, 70] { R6472 += 1, R6428 += 1, R6247 += 1, R6248 += 1 };
  s2 -> s7 [70, 70] { R6472 += 1, R6428 += 1, R6248 += 1, R6249 += 1, R6250 += 1 };
  s2 -> s1 [71, 65535] { R6472 += 1, R6428 += 1, R6248 += 1, R6249 += 1, R6250 += 1 };
  s2 -> s2 [71, 65535] { R6472 += 1, R6428 += 1, R6247 += 1, R6248 += 1 };
  s3 -> s1 [0, 69] { R6472 += 1, R6428 += 1, R6248 += 1, R6249 += 1, R6250 += 1 };
  s3 -> s2 [0, 69] { R6472 += 1, R6428 += 1, R6247 += 1, R6248 += 1 };
  s3 -> s3 [0, 65535] { R6472 += 1, R6427 += 1, R6428 += 1 };
  s3 -> s4 [70, 70] { R6472 += 1, R6428 += 1, R6248 += 1, R6249 += 1, R6250 += 1 };
  s3 -> s5 [70, 70] { R6472 += 1, R6428 += 1, R6247 += 1, R6248 += 1 };
  s3 -> s6 [70, 70] { R6472 += 1, R6428 += 1, R6247 += 1, R6248 += 1 };
  s3 -> s7 [70, 70] { R6472 += 1, R6428 += 1, R6248 += 1, R6249 += 1, R6250 += 1 };
  s3 -> s1 [71, 65535] { R6472 += 1, R6428 += 1, R6248 += 1, R6249 += 1, R6250 += 1 };
  s3 -> s2 [71, 65535] { R6472 += 1, R6428 += 1, R6247 += 1, R6248 += 1 };
  s4 -> s4 [0, 65535] { R6472 += 1 };
  s4 -> s9 [0, 65535];
  s5 -> s5 [0, 65535] { R6472 += 1, R6428 += 1, R6247 += 1, R6248 += 1 };
  s5 -> s7 [0, 65535] { R6472 += 1, R6428 += 1, R6248 += 1, R6249 += 1, R6250 += 1 };
  s7 -> s7 [0, 65535] { R6472 += 1, R6428 += 1, R6248 += 1, R6249 += 1, R6250 += 1 };
  s7 -> s8 [0, 65535] { R6472 += 1 };
  s7 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R6472 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s4, s8, s9, s1, s7;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 69] { R6474 += 1, R6430 += 1, R6365 += 1, R6366 += 1 };
  s0 -> s2 [0, 69] { R6474 += 1, R6430 += 1, R6366 += 1, R6367 += 1, R6368 += 1 };
  s0 -> s3 [0, 69] { R6474 += 1, R6430 += 1, R6366 += 1, R6368 += 1, R6369 += 1 };
  s0 -> s0 [0, 65535] { R6473 += 1, R6474 += 1 };
  s0 -> s4 [0, 65535] { R6474 += 1, R6429 += 1, R6430 += 1 };
  s0 -> s5 [70, 70] { R6474 += 1, R6430 += 1, R6366 += 1, R6368 += 1, R6369 += 1 };
  s0 -> s6 [70, 70] { R6474 += 1, R6430 += 1, R6366 += 1, R6367 += 1, R6368 += 1 };
  s0 -> s7 [70, 70] { R6474 += 1, R6430 += 1, R6366 += 1, R6368 += 1, R6369 += 1 };
  s0 -> s8 [70, 70] { R6474 += 1, R6430 += 1, R6365 += 1, R6366 += 1 };
  s0 -> s9 [70, 70] { R6474 += 1, R6430 += 1, R6366 += 1, R6367 += 1, R6368 += 1 };
  s0 -> s10 [70, 70] { R6474 += 1, R6430 += 1, R6365 += 1, R6366 += 1 };
  s0 -> s1 [71, 65535] { R6474 += 1, R6430 += 1, R6365 += 1, R6366 += 1 };
  s0 -> s2 [71, 65535] { R6474 += 1, R6430 += 1, R6366 += 1, R6367 += 1, R6368 += 1 };
  s0 -> s3 [71, 65535] { R6474 += 1, R6430 += 1, R6366 += 1, R6368 += 1, R6369 += 1 };
  s1 -> s1 [0, 69] { R6474 += 1, R6430 += 1, R6365 += 1, R6366 += 1 };
  s1 -> s2 [0, 69] { R6474 += 1, R6430 += 1, R6366 += 1, R6367 += 1, R6368 += 1 };
  s1 -> s3 [0, 69] { R6474 += 1, R6430 += 1, R6366 += 1, R6368 += 1, R6369 += 1 };
  s1 -> s5 [70, 70] { R6474 += 1, R6430 += 1, R6366 += 1, R6368 += 1, R6369 += 1 };
  s1 -> s6 [70, 70] { R6474 += 1, R6430 += 1, R6366 += 1, R6367 += 1, R6368 += 1 };
  s1 -> s7 [70, 70] { R6474 += 1, R6430 += 1, R6366 += 1, R6368 += 1, R6369 += 1 };
  s1 -> s8 [70, 70] { R6474 += 1, R6430 += 1, R6365 += 1, R6366 += 1 };
  s1 -> s9 [70, 70] { R6474 += 1, R6430 += 1, R6366 += 1, R6367 += 1, R6368 += 1 };
  s1 -> s10 [70, 70] { R6474 += 1, R6430 += 1, R6365 += 1, R6366 += 1 };
  s1 -> s1 [71, 65535] { R6474 += 1, R6430 += 1, R6365 += 1, R6366 += 1 };
  s1 -> s2 [71, 65535] { R6474 += 1, R6430 += 1, R6366 += 1, R6367 += 1, R6368 += 1 };
  s1 -> s3 [71, 65535] { R6474 += 1, R6430 += 1, R6366 += 1, R6368 += 1, R6369 += 1 };
  s2 -> s15 [0, 69] { R6474 += 1, R6430 += 1 };
  s2 -> s2 [0, 69] { R6474 += 1, R6430 += 1, R6366 += 1, R6367 += 1, R6368 += 1 };
  s2 -> s3 [0, 69] { R6474 += 1, R6430 += 1, R6366 += 1, R6368 += 1, R6369 += 1 };
  s2 -> s5 [70, 70] { R6474 += 1, R6430 += 1, R6366 += 1, R6368 += 1, R6369 += 1 };
  s2 -> s11 [70, 70] { R6474 += 1, R6430 += 1 };
  s2 -> s6 [70, 70] { R6474 += 1, R6430 += 1, R6366 += 1, R6367 += 1, R6368 += 1 };
  s2 -> s17 [70, 70] { R6474 += 1, R6430 += 1 };
  s2 -> s7 [70, 70] { R6474 += 1, R6430 += 1, R6366 += 1, R6368 += 1, R6369 += 1 };
  s2 -> s9 [70, 70] { R6474 += 1, R6430 += 1, R6366 += 1, R6367 += 1, R6368 += 1 };
  s2 -> s15 [71, 65535] { R6474 += 1, R6430 += 1 };
  s2 -> s2 [71, 65535] { R6474 += 1, R6430 += 1, R6366 += 1, R6367 += 1, R6368 += 1 };
  s2 -> s3 [71, 65535] { R6474 += 1, R6430 += 1, R6366 += 1, R6368 += 1, R6369 += 1 };
  s3 -> s15 [0, 69] { R6474 += 1, R6430 += 1 };
  s3 -> s16 [0, 69] { R6474 += 1, R6430 += 1, R6366 += 1 };
  s3 -> s3 [0, 69] { R6474 += 1, R6430 += 1, R6366 += 1, R6368 += 1, R6369 += 1 };
  s3 -> s5 [70, 70] { R6474 += 1, R6430 += 1, R6366 += 1, R6368 += 1, R6369 += 1 };
  s3 -> s11 [70, 70] { R6474 += 1, R6430 += 1 };
  s3 -> s17 [70, 70] { R6474 += 1, R6430 += 1 };
  s3 -> s7 [70, 70] { R6474 += 1, R6430 += 1, R6366 += 1, R6368 += 1, R6369 += 1 };
  s3 -> s18 [70, 70] { R6474 += 1, R6430 += 1, R6366 += 1 };
  s3 -> s14 [70, 70] { R6474 += 1, R6430 += 1, R6366 += 1 };
  s3 -> s15 [71, 65535] { R6474 += 1, R6430 += 1 };
  s3 -> s16 [71, 65535] { R6474 += 1, R6430 += 1, R6366 += 1 };
  s3 -> s3 [71, 65535] { R6474 += 1, R6430 += 1, R6366 += 1, R6368 += 1, R6369 += 1 };
  s4 -> s1 [0, 69] { R6474 += 1, R6430 += 1, R6365 += 1, R6366 += 1 };
  s4 -> s2 [0, 69] { R6474 += 1, R6430 += 1, R6366 += 1, R6367 += 1, R6368 += 1 };
  s4 -> s3 [0, 69] { R6474 += 1, R6430 += 1, R6366 += 1, R6368 += 1, R6369 += 1 };
  s4 -> s4 [0, 65535] { R6474 += 1, R6429 += 1, R6430 += 1 };
  s4 -> s5 [70, 70] { R6474 += 1, R6430 += 1, R6366 += 1, R6368 += 1, R6369 += 1 };
  s4 -> s6 [70, 70] { R6474 += 1, R6430 += 1, R6366 += 1, R6367 += 1, R6368 += 1 };
  s4 -> s7 [70, 70] { R6474 += 1, R6430 += 1, R6366 += 1, R6368 += 1, R6369 += 1 };
  s4 -> s8 [70, 70] { R6474 += 1, R6430 += 1, R6365 += 1, R6366 += 1 };
  s4 -> s9 [70, 70] { R6474 += 1, R6430 += 1, R6366 += 1, R6367 += 1, R6368 += 1 };
  s4 -> s10 [70, 70] { R6474 += 1, R6430 += 1, R6365 += 1, R6366 += 1 };
  s4 -> s1 [71, 65535] { R6474 += 1, R6430 += 1, R6365 += 1, R6366 += 1 };
  s4 -> s2 [71, 65535] { R6474 += 1, R6430 += 1, R6366 += 1, R6367 += 1, R6368 += 1 };
  s4 -> s3 [71, 65535] { R6474 += 1, R6430 += 1, R6366 += 1, R6368 += 1, R6369 += 1 };
  s5 -> s5 [0, 65535] { R6474 += 1, R6430 += 1, R6366 += 1, R6368 += 1, R6369 += 1 };
  s5 -> s11 [0, 65535] { R6474 += 1, R6430 += 1 };
  s5 -> s14 [0, 65535] { R6474 += 1, R6430 += 1, R6366 += 1 };
  s9 -> s5 [0, 65535] { R6474 += 1, R6430 += 1, R6366 += 1, R6368 += 1, R6369 += 1 };
  s9 -> s11 [0, 65535] { R6474 += 1, R6430 += 1 };
  s9 -> s9 [0, 65535] { R6474 += 1, R6430 += 1, R6366 += 1, R6367 += 1, R6368 += 1 };
  s10 -> s5 [0, 65535] { R6474 += 1, R6430 += 1, R6366 += 1, R6368 += 1, R6369 += 1 };
  s10 -> s9 [0, 65535] { R6474 += 1, R6430 += 1, R6366 += 1, R6367 += 1, R6368 += 1 };
  s10 -> s10 [0, 65535] { R6474 += 1, R6430 += 1, R6365 += 1, R6366 += 1 };
  s11 -> s12 [0, 65535] { R6474 += 1 };
  s11 -> s11 [0, 65535] { R6474 += 1, R6430 += 1 };
  s11 -> s13 [0, 65535];
  s12 -> s12 [0, 65535] { R6474 += 1 };
  s12 -> s13 [0, 65535];
  s13 -> s13 [0, 65535];
  s14 -> s11 [0, 65535] { R6474 += 1, R6430 += 1 };
  s14 -> s14 [0, 65535] { R6474 += 1, R6430 += 1, R6366 += 1 };
  s15 -> s15 [0, 69] { R6474 += 1, R6430 += 1 };
  s15 -> s15 [0, 65535] { R6474 += 1 };
  s15 -> s13 [0, 65535];
  s15 -> s11 [70, 70] { R6474 += 1, R6430 += 1 };
  s15 -> s17 [70, 70] { R6474 += 1, R6430 += 1 };
  s15 -> s15 [71, 65535] { R6474 += 1, R6430 += 1 };
  s16 -> s15 [0, 69] { R6474 += 1, R6430 += 1 };
  s16 -> s16 [0, 69] { R6474 += 1, R6430 += 1, R6366 += 1 };
  s16 -> s11 [70, 70] { R6474 += 1, R6430 += 1 };
  s16 -> s17 [70, 70] { R6474 += 1, R6430 += 1 };
  s16 -> s18 [70, 70] { R6474 += 1, R6430 += 1, R6366 += 1 };
  s16 -> s14 [70, 70] { R6474 += 1, R6430 += 1, R6366 += 1 };
  s16 -> s15 [71, 65535] { R6474 += 1, R6430 += 1 };
  s16 -> s16 [71, 65535] { R6474 += 1, R6430 += 1, R6366 += 1 };
  s17 -> s17 [0, 65535] { R6474 += 1 };
  s17 -> s13 [0, 65535];
  accepting s17, s12, s13, s15, s11;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [102, 102];
  accepting s1;
};
};
constraint R2 = R6392 && R3 = R6474 && R23 - R6474 = -1 && R24 = R6474 && R25 - R6474 = -1 && R26 = R6474 && R27 = 0 && R28 = 1 && R29 = 0 && R30 = 1 && R45 + R84 + R83 + -1*R6252 + -1*R6248 - R66 = 0 && R49 + R89 + R87 = 0 && R50 + R90 + R88 + -1*R6252 + -1*R6248 - R66 = 0 && R55 + R96 + R93 + -1*R6254 + -1*R6250 - R68 = 0 && R65 + R6251 + R6247 = 0 && R67 + R6253 + R6249 = 0 && R6391 = 0 && R6415 = 0 && R6416 = 0 && R6421 = 0 && R6422 = 0 && R6425 = 0 && R6426 = 0 && R6427 = 0 && R6428 = 0 && R6429 = 0 && R6430 = 0 && R6431 = 0 && R6432 = R6474 && R6433 = 0 && R6434 = R6474 && R6435 = 0 && R6436 = R6474 && R6437 = 0 && R6438 = R6474 && R6439 = 0 && R6440 = R6474 && R6441 = 0 && R6442 = R6474 && R6443 = 0 && R6444 = R6474 && R6445 = 0 && R6446 = R6474 && R6447 = 0 && R6448 = R6474 && R6449 = 0 && R6450 = R6474 && R6451 = 0 && R6452 = R6474 && R6453 = 0 && R6454 = R6474 && R6455 = 0 && R6456 = R6474 && R6457 = 0 && R6458 = R6474 && R6459 = 0 && R6460 = R6474 && R6461 = 0 && R6462 = R6474 && R6463 = 0 && R6464 = R6474 && R6465 = 0 && R6466 = R6474 && R6467 = 0 && R6468 = R6474 && R6469 = 0 && R6470 = R6474 && R6471 = 0 && R6472 = R6474 && R6473 = 0 && R12 < 1 && R15 < 1 && R16 < 1 && R47 + R86 + R85 < 1 && R61 + R3456 + R3453 < 1 && -1*R6252 + -1*R6248 - R66 < 1 && -1*R6254 + -1*R6250 - R68 < 1 && -1 < R6392 && 0 < R6474 && (R53 + R94 + R91 != 0 || R54 + R95 + R92 + -1*R6252 + -1*R6248 - R66 = 0 || R66 + R6252 + R6248 < 1) && (R59 + R3454 + R3451 != 0 || R60 + R3455 + R3452 + -1*R6252 + -1*R6248 - R66 = 0 || R66 + R6252 + R6248 < 1) && (R66 + R6252 + R6248 != 0 || ((R53 + R94 + R91 != 0 || R54 + R95 + R92 = 0 || R68 + R6254 + R6250 < 1) && (R53 + R94 + R91 = 0 || R68 + R6254 + R6250 < 1))) && (R66 + R6252 + R6248 != 0 || ((R59 + R3454 + R3451 != 0 || R60 + R3455 + R3452 = 0 || R68 + R6254 + R6250 < 1) && (R59 + R3454 + R3451 = 0 || R68 + R6254 + R6250 < 1))) && (R66 + R6252 + R6248 != 0 || ((R73 + R6370 + R6365 != 0 || R74 + R6371 + R6366 = 0 || R68 + R6254 + R6250 < 1) && (R73 + R6370 + R6365 = 0 || R68 + R6254 + R6250 < 1))) && (R68 + R6254 + R6250 != 0 || R77 + R6374 + R6369 = 0 || (R75 + R6372 + R6367 = 0 && R76 + R6373 + R6368 = 0)) && (R73 + R6370 + R6365 != 0 || R66 + R6252 + R6248 + -1*R6371 + -1*R6366 - R74 = 0 || R66 + R6252 + R6248 < 1) && (R75 + R6372 + R6367 != 0 || R68 + R6254 + R6250 + -1*R6373 + -1*R6368 - R76 = 0 || R68 + R6254 + R6250 < 1) && (R6375 != 0 || R6376 = R6392 || (R20 = 0 && R6392 = 0)) && (R6377 != 0 || R6378 = R6392 || (R20 = 0 && R6392 = 0)) && (R6379 != 0 || R6380 = R6392 || (R20 = 0 && R6392 = 0)) && (R6381 != 0 || R6382 = R6392 || (R20 = 0 && R6392 = 0)) && (R6383 != 0 || R6384 = R6392 || (R20 = 0 && R6392 = 0)) && (R6385 != 0 || R6386 = R6392 || (R20 = 0 && R6392 = 0)) && (R6387 != 0 || R6388 = R6392 || (R20 = 0 && R6392 = 0)) && (R6389 != 0 || R6390 = R6392 || (R20 = 0 && R6392 = 0)) && (R6393 != 0 || R6392 = R6394 || (R20 = 0 && R6392 = 0)) && (R21 = 0 || (R6413 = 0 && R6414 = 0)) && (R21 = 0 || (R6417 = 0 && R6418 = 0)) && (R21 = 0 || (R6419 = 0 && R6420 = 0)) && (R21 = 0 || (R6423 = 0 && R6424 = 0)) && (R22 = 0 || (R6395 = 0 && R6396 = 0)) && (R22 = 0 || (R6397 = 0 && R6398 = 0)) && (R22 = 0 || (R6399 = 0 && R6400 = 0)) && (R22 = 0 || (R6401 = 0 && R6402 = 0)) && (R22 = 0 || (R6403 = 0 && R6404 = 0)) && (R22 = 0 || (R6405 = 0 && R6406 = 0)) && (R22 = 0 || (R6407 = 0 && R6408 = 0)) && (R22 = 0 || (R6409 = 0 && R6410 = 0)) && (R22 = 0 || (R6411 = 0 && R6412 = 0)) && (R53 + R94 + R91 = 0 || R66 + R6252 + R6248 < 1) && (R59 + R3454 + R3451 = 0 || R66 + R6252 + R6248 < 1) && (R73 + R6370 + R6365 = 0 || R66 + R6252 + R6248 < 1) && (R75 + R6372 + R6367 = 0 || R68 + R6254 + R6250 < 1) && (R6375 = 0 || (R20 = 0 && R6392 = 0)) && (R6377 = 0 || (R20 = 0 && R6392 = 0)) && (R6379 = 0 || (R20 = 0 && R6392 = 0)) && (R6381 = 0 || (R20 = 0 && R6392 = 0)) && (R6383 = 0 || (R20 = 0 && R6392 = 0)) && (R6385 = 0 || (R20 = 0 && R6392 = 0)) && (R6387 = 0 || (R20 = 0 && R6392 = 0)) && (R6389 = 0 || (R20 = 0 && R6392 = 0)) && (R6393 = 0 || (R20 = 0 && R6392 = 0));
// End of Parikh automata intersection problem
