// Parikh automata intersection problem, generated by OSTRICH+
counter int R12, R15, R16, R2, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R3451, R3452, R3453, R3454, R3455, R3456, R4, R45, R47, R49, R5, R50, R53, R54, R55, R59, R60, R61, R6247, R6248, R6249, R6250, R6251, R6252, R6253, R6254, R6475, R6476, R6477, R6478, R6479, R6480, R6481, R6482, R6483, R6484, R6485, R6486, R6487, R6488, R6489, R6490, R6491, R6492, R6493, R6494, R6495, R6496, R6497, R6498, R6499, R65, R6500, R6501, R6502, R6503, R6504, R6505, R6506, R6507, R6508, R6509, R6510, R6511, R6512, R6513, R6514, R6515, R6516, R6517, R6518, R6519, R6520, R6521, R6522, R6523, R6524, R6525, R6526, R6527, R6528, R6529, R6530, R6531, R6532, R6533, R6534, R6535, R6536, R6537, R6538, R6539, R6540, R6541, R6542, R6543, R6544, R6545, R6546, R6547, R6548, R6549, R6550, R6551, R6552, R6553, R6554, R6555, R6556, R6557, R6558, R6559, R6560, R6561, R6562, R6563, R6564, R6565, R6566, R6567, R6568, R6569, R6570, R6571, R6572, R6573, R6574, R6575, R6576, R6577, R6578, R6579, R6580, R6581, R6582, R6583, R6584, R66, R67, R68, R73, R74, R75, R76, R77, R83, R84, R85, R86, R87, R88, R89, R90, R91, R92, R93, R94, R95, R96;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [70, 70];
  s0 -> s0 [71, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [70, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R15 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 69];
  s0 -> s0 [0, 65535] { R16 += 1 };
  s0 -> s2 [70, 70];
  s0 -> s1 [71, 65535];
  s1 -> s1 [0, 69];
  s1 -> s2 [70, 70];
  s1 -> s1 [71, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R24 += 1 };
  s0 -> s0 [0, 65535] { R23 += 1, R24 += 1 };
  s0 -> s2 [9, 13] { R24 += 1 };
  s0 -> s1 [14, 31] { R24 += 1 };
  s0 -> s2 [32, 32] { R24 += 1 };
  s0 -> s1 [33, 65535] { R24 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R24 += 1 };
  s2 -> s1 [0, 65535] { R24 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R25 += 1, R26 += 1 };
  s1 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R28 += 1 };
  s0 -> s0 [0, 65535] { R27 += 1, R28 += 1 };
  s0 -> s2 [9, 13] { R28 += 1 };
  s0 -> s1 [14, 31] { R28 += 1 };
  s0 -> s2 [32, 32] { R28 += 1 };
  s0 -> s1 [33, 65535] { R28 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R28 += 1 };
  s2 -> s1 [0, 65535] { R28 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R29 += 1, R30 += 1 };
  s1 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R6505 += 1, R6506 += 1 };
  s0 -> s1 [0, 65535] { R6506 += 1, R22 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R6506 += 1, R22 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 69] { R6508 += 1 };
  s0 -> s0 [0, 65535] { R6507 += 1, R6508 += 1 };
  s0 -> s2 [70, 70] { R6508 += 1 };
  s0 -> s3 [70, 70] { R6508 += 1 };
  s0 -> s1 [76, 65535] { R6508 += 1 };
  s1 -> s1 [0, 69] { R6508 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R6508 += 1 };
  s1 -> s3 [70, 70] { R6508 += 1 };
  s1 -> s1 [76, 65535] { R6508 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 70] { R6508 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [76, 65535] { R6508 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 69] { R6510 += 1, R45 += 1 };
  s0 -> s0 [0, 65535] { R6509 += 1, R6510 += 1 };
  s0 -> s2 [70, 70] { R6510 += 1, R45 += 1 };
  s0 -> s3 [70, 70] { R6510 += 1, R45 += 1 };
  s0 -> s1 [71, 65535] { R6510 += 1, R45 += 1 };
  s1 -> s1 [0, 69] { R6510 += 1, R45 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R6510 += 1, R45 += 1 };
  s1 -> s3 [70, 70] { R6510 += 1, R45 += 1 };
  s1 -> s1 [71, 65535] { R6510 += 1, R45 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R6510 += 1, R45 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 69] { R6512 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R6511 += 1, R6512 += 1 };
  s0 -> s2 [70, 70] { R6512 += 1, R47 += 1 };
  s0 -> s3 [70, 70] { R6512 += 1, R47 += 1 };
  s0 -> s1 [71, 65535] { R6512 += 1, R47 += 1 };
  s1 -> s1 [0, 69] { R6512 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R6512 += 1, R47 += 1 };
  s1 -> s3 [70, 70] { R6512 += 1, R47 += 1 };
  s1 -> s1 [71, 65535] { R6512 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R6512 += 1, R47 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 69] { R6514 += 1, R49 += 1, R50 += 1 };
  s0 -> s0 [0, 65535] { R6513 += 1, R6514 += 1 };
  s0 -> s2 [70, 70] { R6514 += 1, R49 += 1, R50 += 1 };
  s0 -> s3 [70, 70] { R6514 += 1, R49 += 1, R50 += 1 };
  s0 -> s1 [71, 65535] { R6514 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 69] { R6514 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R6514 += 1, R49 += 1, R50 += 1 };
  s1 -> s3 [70, 70] { R6514 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [71, 65535] { R6514 += 1, R49 += 1, R50 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R6514 += 1, R49 += 1, R50 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 69] { R6516 += 1, R53 += 1, R54 += 1 };
  s0 -> s0 [0, 65535] { R6515 += 1, R6516 += 1 };
  s0 -> s2 [70, 70] { R6516 += 1, R53 += 1, R54 += 1 };
  s0 -> s3 [70, 70] { R6516 += 1, R53 += 1, R54 += 1 };
  s0 -> s1 [71, 65535] { R6516 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 69] { R6516 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R6516 += 1, R53 += 1, R54 += 1 };
  s1 -> s3 [70, 70] { R6516 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [71, 65535] { R6516 += 1, R53 += 1, R54 += 1 };
  s2 -> s2 [0, 65535] { R6516 += 1, R53 += 1, R54 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 69] { R6518 += 1, R59 += 1, R60 += 1 };
  s0 -> s0 [0, 65535] { R6517 += 1, R6518 += 1 };
  s0 -> s2 [70, 70] { R6518 += 1, R59 += 1, R60 += 1 };
  s0 -> s3 [70, 70] { R6518 += 1, R59 += 1, R60 += 1 };
  s0 -> s1 [71, 65535] { R6518 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 69] { R6518 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R6518 += 1, R59 += 1, R60 += 1 };
  s1 -> s3 [70, 70] { R6518 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [71, 65535] { R6518 += 1, R59 += 1, R60 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R6518 += 1, R59 += 1, R60 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 69] { R6520 += 1, R65 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R6519 += 1, R6520 += 1 };
  s0 -> s2 [70, 70] { R6520 += 1, R65 += 1, R66 += 1 };
  s0 -> s3 [70, 70] { R6520 += 1, R65 += 1, R66 += 1 };
  s0 -> s1 [71, 65535] { R6520 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 69] { R6520 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R6520 += 1, R65 += 1, R66 += 1 };
  s1 -> s3 [70, 70] { R6520 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [71, 65535] { R6520 += 1, R65 += 1, R66 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R6520 += 1, R65 += 1, R66 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 69] { R6522 += 1, R73 += 1, R74 += 1 };
  s0 -> s0 [0, 65535] { R6521 += 1, R6522 += 1 };
  s0 -> s2 [70, 70] { R6522 += 1, R73 += 1, R74 += 1 };
  s0 -> s3 [70, 70] { R6522 += 1, R73 += 1, R74 += 1 };
  s0 -> s1 [71, 65535] { R6522 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 69] { R6522 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R6522 += 1, R73 += 1, R74 += 1 };
  s1 -> s3 [70, 70] { R6522 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [71, 65535] { R6522 += 1, R73 += 1, R74 += 1 };
  s2 -> s2 [0, 65535] { R6522 += 1, R73 += 1, R74 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 69] { R6542 += 1 };
  s0 -> s0 [0, 65535] { R6541 += 1, R6542 += 1 };
  s0 -> s2 [70, 70] { R6542 += 1 };
  s0 -> s1 [71, 65535] { R6542 += 1 };
  s1 -> s1 [0, 69] { R6542 += 1 };
  s1 -> s2 [70, 70] { R6542 += 1 };
  s1 -> s1 [71, 65535] { R6542 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R6542 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R6543 += 1, R6544 += 1 };
  s0 -> s1 [0, 65535] { R6544 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R6544 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 69] { R6546 += 1 };
  s0 -> s2 [0, 65535] { R6546 += 1, R12 += 1 };
  s0 -> s0 [0, 65535] { R6545 += 1, R6546 += 1 };
  s0 -> s3 [70, 70] { R6546 += 1 };
  s0 -> s1 [71, 65535] { R6546 += 1 };
  s1 -> s1 [0, 69] { R6546 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [70, 70] { R6546 += 1 };
  s1 -> s1 [71, 65535] { R6546 += 1 };
  s2 -> s1 [0, 69] { R6546 += 1 };
  s2 -> s2 [0, 65535] { R6546 += 1, R12 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [70, 70] { R6546 += 1 };
  s2 -> s1 [71, 65535] { R6546 += 1 };
  s3 -> s3 [0, 65535] { R6546 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 69] { R6548 += 1, R6486 += 1 };
  s0 -> s2 [0, 65535] { R6548 += 1, R6485 += 1, R6486 += 1 };
  s0 -> s0 [0, 65535] { R6547 += 1, R6548 += 1 };
  s0 -> s1 [71, 65535] { R6548 += 1, R6486 += 1 };
  s1 -> s1 [0, 69] { R6548 += 1, R6486 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R6548 += 1 };
  s1 -> s1 [71, 65535] { R6548 += 1, R6486 += 1 };
  s2 -> s1 [0, 69] { R6548 += 1, R6486 += 1 };
  s2 -> s2 [0, 65535] { R6548 += 1, R6485 += 1, R6486 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [71, 65535] { R6548 += 1, R6486 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R6550 += 1, R6487 += 1, R6488 += 1 };
  s0 -> s0 [0, 65535] { R6549 += 1, R6550 += 1 };
  s0 -> s2 [0, 65535] { R6550 += 1, R6488 += 1, R20 += 1 };
  s1 -> s1 [0, 65535] { R6550 += 1, R6487 += 1, R6488 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R6550 += 1, R6488 += 1, R20 += 1 };
  s2 -> s3 [0, 65535] { R6550 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R6550 += 1, R6488 += 1, R20 += 1 };
  s3 -> s3 [0, 65535] { R6550 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 70] { R6552 += 1, R6490 += 1 };
  s0 -> s0 [0, 65535] { R6551 += 1, R6552 += 1 };
  s0 -> s2 [0, 65535] { R6552 += 1, R6489 += 1, R6490 += 1 };
  s0 -> s1 [75, 65535] { R6552 += 1, R6490 += 1 };
  s1 -> s1 [0, 70] { R6552 += 1, R6490 += 1 };
  s1 -> s1 [0, 65535] { R6552 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [75, 65535] { R6552 += 1, R6490 += 1 };
  s2 -> s1 [0, 70] { R6552 += 1, R6490 += 1 };
  s2 -> s2 [0, 65535] { R6552 += 1, R6489 += 1, R6490 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [75, 65535] { R6552 += 1, R6490 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s0 [0, 65535] { R6553 += 1, R6554 += 1 };
  s0 -> s1 [0, 65535] { R6554 += 1, R6491 += 1, R6492 += 1 };
  s0 -> s2 [0, 65535] { R6554 += 1, R6492 += 1, R84 += 1 };
  s1 -> s1 [0, 65535] { R6554 += 1, R6491 += 1, R6492 += 1 };
  s1 -> s2 [0, 65535] { R6554 += 1, R6492 += 1, R84 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R6554 += 1, R6492 += 1, R84 += 1 };
  s2 -> s3 [0, 65535] { R6554 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R6554 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 74] { R6556 += 1, R6494 += 1 };
  s0 -> s2 [0, 65535] { R6556 += 1, R6494 += 1, R86 += 1 };
  s0 -> s0 [0, 65535] { R6555 += 1, R6556 += 1 };
  s0 -> s3 [0, 65535] { R6556 += 1, R6493 += 1, R6494 += 1 };
  s0 -> s1 [76, 65535] { R6556 += 1, R6494 += 1 };
  s1 -> s1 [0, 74] { R6556 += 1, R6494 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R6556 += 1 };
  s1 -> s1 [76, 65535] { R6556 += 1, R6494 += 1 };
  s2 -> s1 [0, 74] { R6556 += 1, R6494 += 1 };
  s2 -> s2 [0, 65535] { R6556 += 1, R6494 += 1, R86 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R6556 += 1 };
  s2 -> s1 [76, 65535] { R6556 += 1, R6494 += 1 };
  s3 -> s1 [0, 74] { R6556 += 1, R6494 += 1 };
  s3 -> s2 [0, 65535] { R6556 += 1, R6494 += 1, R86 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R6556 += 1, R6493 += 1, R6494 += 1 };
  s3 -> s1 [76, 65535] { R6556 += 1, R6494 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R6556 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s0 [0, 65535] { R6557 += 1, R6558 += 1 };
  s0 -> s1 [0, 65535] { R6558 += 1, R6496 += 1 };
  s0 -> s2 [0, 65535] { R6558 += 1, R6496 += 1, R90 += 1 };
  s0 -> s3 [0, 65535] { R6558 += 1, R6495 += 1, R6496 += 1 };
  s1 -> s1 [0, 65535] { R6558 += 1, R6496 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R6558 += 1 };
  s2 -> s1 [0, 65535] { R6558 += 1, R6496 += 1 };
  s2 -> s2 [0, 65535] { R6558 += 1, R6496 += 1, R90 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R6558 += 1 };
  s3 -> s1 [0, 65535] { R6558 += 1, R6496 += 1 };
  s3 -> s2 [0, 65535] { R6558 += 1, R6496 += 1, R90 += 1 };
  s3 -> s3 [0, 65535] { R6558 += 1, R6495 += 1, R6496 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R6558 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R6560 += 1, R6498 += 1, R94 += 1, R95 += 1 };
  s0 -> s0 [0, 65535] { R6559 += 1, R6560 += 1 };
  s0 -> s2 [0, 65535] { R6560 += 1, R6497 += 1, R6498 += 1 };
  s0 -> s3 [0, 65535] { R6560 += 1, R6498 += 1, R95 += 1, R96 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R6560 += 1, R6498 += 1, R94 += 1, R95 += 1 };
  s1 -> s5 [0, 65535] { R6560 += 1 };
  s1 -> s3 [0, 65535] { R6560 += 1, R6498 += 1, R95 += 1, R96 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R6560 += 1, R6498 += 1, R94 += 1, R95 += 1 };
  s2 -> s2 [0, 65535] { R6560 += 1, R6497 += 1, R6498 += 1 };
  s2 -> s3 [0, 65535] { R6560 += 1, R6498 += 1, R95 += 1, R96 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R6560 += 1 };
  s3 -> s3 [0, 65535] { R6560 += 1, R6498 += 1, R95 += 1, R96 += 1 };
  s3 -> s6 [0, 65535] { R6560 += 1, R6498 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R6560 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R6560 += 1 };
  s6 -> s6 [0, 65535] { R6560 += 1, R6498 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 74] { R6562 += 1, R6500 += 1, R3455 += 1 };
  s0 -> s0 [0, 65535] { R6561 += 1, R6562 += 1 };
  s0 -> s1 [0, 65535] { R6562 += 1, R6500 += 1 };
  s0 -> s2 [0, 65535] { R6562 += 1, R6499 += 1, R6500 += 1 };
  s0 -> s1 [76, 65535] { R6562 += 1, R6500 += 1, R3455 += 1 };
  s1 -> s1 [0, 74] { R6562 += 1, R6500 += 1, R3455 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R6562 += 1, R6500 += 1 };
  s1 -> s4 [0, 65535] { R6562 += 1 };
  s1 -> s1 [76, 65535] { R6562 += 1, R6500 += 1, R3455 += 1 };
  s2 -> s1 [0, 74] { R6562 += 1, R6500 += 1, R3455 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R6562 += 1, R6500 += 1 };
  s2 -> s2 [0, 65535] { R6562 += 1, R6499 += 1, R6500 += 1 };
  s2 -> s1 [76, 65535] { R6562 += 1, R6500 += 1, R3455 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R6562 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 74] { R6564 += 1, R6502 += 1, R6252 += 1, R6254 += 1 };
  s0 -> s2 [0, 65535] { R6564 += 1, R6502 += 1, R6252 += 1, R6253 += 1, R6254 += 1 };
  s0 -> s3 [0, 65535] { R6564 += 1, R6501 += 1, R6502 += 1 };
  s0 -> s0 [0, 65535] { R6563 += 1, R6564 += 1 };
  s0 -> s4 [75, 75] { R6564 += 1, R6502 += 1, R6252 += 1, R6254 += 1 };
  s0 -> s1 [76, 65535] { R6564 += 1, R6502 += 1, R6252 += 1, R6254 += 1 };
  s1 -> s1 [0, 74] { R6564 += 1, R6502 += 1, R6252 += 1, R6254 += 1 };
  s1 -> s4 [75, 75] { R6564 += 1, R6502 += 1, R6252 += 1, R6254 += 1 };
  s1 -> s1 [76, 65535] { R6564 += 1, R6502 += 1, R6252 += 1, R6254 += 1 };
  s2 -> s1 [0, 74] { R6564 += 1, R6502 += 1, R6252 += 1, R6254 += 1 };
  s2 -> s2 [0, 65535] { R6564 += 1, R6502 += 1, R6252 += 1, R6253 += 1, R6254 += 1 };
  s2 -> s4 [75, 75] { R6564 += 1, R6502 += 1, R6252 += 1, R6254 += 1 };
  s2 -> s1 [76, 65535] { R6564 += 1, R6502 += 1, R6252 += 1, R6254 += 1 };
  s3 -> s1 [0, 74] { R6564 += 1, R6502 += 1, R6252 += 1, R6254 += 1 };
  s3 -> s2 [0, 65535] { R6564 += 1, R6502 += 1, R6252 += 1, R6253 += 1, R6254 += 1 };
  s3 -> s3 [0, 65535] { R6564 += 1, R6501 += 1, R6502 += 1 };
  s3 -> s4 [75, 75] { R6564 += 1, R6502 += 1, R6252 += 1, R6254 += 1 };
  s3 -> s1 [76, 65535] { R6564 += 1, R6502 += 1, R6252 += 1, R6254 += 1 };
  s4 -> s4 [0, 65535] { R6564 += 1, R6502 += 1, R6252 += 1, R6254 += 1 };
  s4 -> s5 [0, 65535] { R6564 += 1, R6502 += 1, R6252 += 1 };
  s4 -> s6 [0, 65535] { R6564 += 1 };
  s4 -> s7 [0, 65535] { R6564 += 1, R6502 += 1 };
  s4 -> s8 [0, 65535];
  s5 -> s5 [0, 65535] { R6564 += 1, R6502 += 1, R6252 += 1 };
  s5 -> s6 [0, 65535] { R6564 += 1 };
  s5 -> s7 [0, 65535] { R6564 += 1, R6502 += 1 };
  s5 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R6564 += 1 };
  s6 -> s8 [0, 65535];
  s7 -> s6 [0, 65535] { R6564 += 1 };
  s7 -> s7 [0, 65535] { R6564 += 1, R6502 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  accepting s4, s8, s5, s6, s7;
};
automaton value2_29 {
  init s0;
  s0 -> s0 [0, 65535] { R6565 += 1, R6566 += 1 };
  s0 -> s1 [0, 65535] { R6566 += 1, R6504 += 1, R6481 += 1, R6482 += 1, R6483 += 1 };
  s0 -> s2 [0, 65535] { R6566 += 1, R6504 += 1, R6481 += 1, R6483 += 1, R6484 += 1 };
  s0 -> s3 [0, 65535] { R6566 += 1, R6504 += 1, R6480 += 1, R6481 += 1 };
  s0 -> s4 [0, 65535] { R6566 += 1, R6503 += 1, R6504 += 1 };
  s1 -> s1 [0, 65535] { R6566 += 1, R6504 += 1, R6481 += 1, R6482 += 1, R6483 += 1 };
  s1 -> s7 [0, 65535] { R6566 += 1, R6504 += 1 };
  s1 -> s2 [0, 65535] { R6566 += 1, R6504 += 1, R6481 += 1, R6483 += 1, R6484 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R6566 += 1 };
  s2 -> s7 [0, 65535] { R6566 += 1, R6504 += 1 };
  s2 -> s2 [0, 65535] { R6566 += 1, R6504 += 1, R6481 += 1, R6483 += 1, R6484 += 1 };
  s2 -> s8 [0, 65535] { R6566 += 1, R6504 += 1, R6481 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R6566 += 1 };
  s3 -> s1 [0, 65535] { R6566 += 1, R6504 += 1, R6481 += 1, R6482 += 1, R6483 += 1 };
  s3 -> s2 [0, 65535] { R6566 += 1, R6504 += 1, R6481 += 1, R6483 += 1, R6484 += 1 };
  s3 -> s3 [0, 65535] { R6566 += 1, R6504 += 1, R6480 += 1, R6481 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R6566 += 1 };
  s4 -> s1 [0, 65535] { R6566 += 1, R6504 += 1, R6481 += 1, R6482 += 1, R6483 += 1 };
  s4 -> s2 [0, 65535] { R6566 += 1, R6504 += 1, R6481 += 1, R6483 += 1, R6484 += 1 };
  s4 -> s3 [0, 65535] { R6566 += 1, R6504 += 1, R6480 += 1, R6481 += 1 };
  s4 -> s4 [0, 65535] { R6566 += 1, R6503 += 1, R6504 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6566 += 1 };
  s7 -> s7 [0, 65535] { R6566 += 1, R6504 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R6566 += 1 };
  s8 -> s7 [0, 65535] { R6566 += 1, R6504 += 1 };
  s8 -> s8 [0, 65535] { R6566 += 1, R6504 += 1, R6481 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s6 [0, 65535] { R6566 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R6568 += 1, R6523 += 1, R6524 += 1 };
  s0 -> s0 [0, 65535] { R6567 += 1, R6568 += 1 };
  s0 -> s2 [0, 65535] { R6568 += 1, R6524 += 1, R21 += 1 };
  s1 -> s1 [0, 65535] { R6568 += 1, R6523 += 1, R6524 += 1 };
  s1 -> s2 [0, 65535] { R6568 += 1, R6524 += 1, R21 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R6568 += 1 };
  s2 -> s2 [0, 65535] { R6568 += 1, R6524 += 1, R21 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R6568 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 69] { R6570 += 1, R6526 += 1 };
  s0 -> s2 [0, 65535] { R6570 += 1, R6525 += 1, R6526 += 1 };
  s0 -> s0 [0, 65535] { R6569 += 1, R6570 += 1 };
  s0 -> s3 [70, 70] { R6570 += 1, R6526 += 1 };
  s0 -> s4 [70, 70] { R6570 += 1, R6526 += 1 };
  s0 -> s5 [75, 75] { R6570 += 1, R6526 += 1 };
  s0 -> s1 [76, 65535] { R6570 += 1, R6526 += 1 };
  s1 -> s1 [0, 69] { R6570 += 1, R6526 += 1 };
  s1 -> s3 [70, 70] { R6570 += 1, R6526 += 1 };
  s1 -> s4 [70, 70] { R6570 += 1, R6526 += 1 };
  s1 -> s5 [75, 75] { R6570 += 1, R6526 += 1 };
  s1 -> s1 [76, 65535] { R6570 += 1, R6526 += 1 };
  s2 -> s1 [0, 69] { R6570 += 1, R6526 += 1 };
  s2 -> s2 [0, 65535] { R6570 += 1, R6525 += 1, R6526 += 1 };
  s2 -> s3 [70, 70] { R6570 += 1, R6526 += 1 };
  s2 -> s4 [70, 70] { R6570 += 1, R6526 += 1 };
  s2 -> s5 [75, 75] { R6570 += 1, R6526 += 1 };
  s2 -> s1 [76, 65535] { R6570 += 1, R6526 += 1 };
  s3 -> s3 [0, 70] { R6570 += 1, R6526 += 1 };
  s3 -> s8 [75, 75] { R6570 += 1, R6526 += 1 };
  s3 -> s3 [76, 65535] { R6570 += 1, R6526 += 1 };
  s5 -> s5 [0, 69] { R6570 += 1, R6526 += 1 };
  s5 -> s5 [0, 65535] { R6570 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [70, 70] { R6570 += 1, R6526 += 1 };
  s5 -> s8 [70, 70] { R6570 += 1, R6526 += 1 };
  s5 -> s5 [75, 65535] { R6570 += 1, R6526 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R6570 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 70] { R6570 += 1, R6526 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R6570 += 1 };
  s8 -> s8 [75, 65535] { R6570 += 1, R6526 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 69] { R6572 += 1, R6528 += 1, R83 += 1 };
  s0 -> s2 [0, 65535] { R6572 += 1, R6527 += 1, R6528 += 1 };
  s0 -> s0 [0, 65535] { R6571 += 1, R6572 += 1 };
  s0 -> s3 [70, 70] { R6572 += 1, R6528 += 1, R83 += 1 };
  s0 -> s4 [70, 70] { R6572 += 1, R6528 += 1, R83 += 1 };
  s0 -> s1 [71, 65535] { R6572 += 1, R6528 += 1, R83 += 1 };
  s1 -> s1 [0, 69] { R6572 += 1, R6528 += 1, R83 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R6572 += 1 };
  s1 -> s3 [70, 70] { R6572 += 1, R6528 += 1, R83 += 1 };
  s1 -> s4 [70, 70] { R6572 += 1, R6528 += 1, R83 += 1 };
  s1 -> s1 [71, 65535] { R6572 += 1, R6528 += 1, R83 += 1 };
  s2 -> s1 [0, 69] { R6572 += 1, R6528 += 1, R83 += 1 };
  s2 -> s2 [0, 65535] { R6572 += 1, R6527 += 1, R6528 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [70, 70] { R6572 += 1, R6528 += 1, R83 += 1 };
  s2 -> s4 [70, 70] { R6572 += 1, R6528 += 1, R83 += 1 };
  s2 -> s1 [71, 65535] { R6572 += 1, R6528 += 1, R83 += 1 };
  s3 -> s3 [0, 65535] { R6572 += 1, R6528 += 1, R83 += 1 };
  s3 -> s6 [0, 65535] { R6572 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R6572 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6572 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 69] { R6574 += 1, R6530 += 1, R85 += 1 };
  s0 -> s2 [0, 65535] { R6574 += 1, R6529 += 1, R6530 += 1 };
  s0 -> s0 [0, 65535] { R6573 += 1, R6574 += 1 };
  s0 -> s3 [70, 70] { R6574 += 1, R6530 += 1, R85 += 1 };
  s0 -> s4 [70, 70] { R6574 += 1, R6530 += 1, R85 += 1 };
  s0 -> s1 [71, 65535] { R6574 += 1, R6530 += 1, R85 += 1 };
  s1 -> s1 [0, 69] { R6574 += 1, R6530 += 1, R85 += 1 };
  s1 -> s1 [0, 65535] { R6574 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [70, 70] { R6574 += 1, R6530 += 1, R85 += 1 };
  s1 -> s4 [70, 70] { R6574 += 1, R6530 += 1, R85 += 1 };
  s1 -> s1 [71, 65535] { R6574 += 1, R6530 += 1, R85 += 1 };
  s2 -> s1 [0, 69] { R6574 += 1, R6530 += 1, R85 += 1 };
  s2 -> s2 [0, 65535] { R6574 += 1, R6529 += 1, R6530 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [70, 70] { R6574 += 1, R6530 += 1, R85 += 1 };
  s2 -> s4 [70, 70] { R6574 += 1, R6530 += 1, R85 += 1 };
  s2 -> s1 [71, 65535] { R6574 += 1, R6530 += 1, R85 += 1 };
  s3 -> s3 [0, 65535] { R6574 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R6574 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R6574 += 1, R6530 += 1, R85 += 1 };
  s5 -> s5 [0, 65535] { R6574 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 69] { R6576 += 1, R6532 += 1, R88 += 1 };
  s0 -> s2 [0, 69] { R6576 += 1, R6532 += 1, R87 += 1, R88 += 1 };
  s0 -> s3 [0, 65535] { R6576 += 1, R6531 += 1, R6532 += 1 };
  s0 -> s0 [0, 65535] { R6575 += 1, R6576 += 1 };
  s0 -> s4 [70, 70] { R6576 += 1, R6532 += 1, R88 += 1 };
  s0 -> s5 [70, 70] { R6576 += 1, R6532 += 1, R88 += 1 };
  s0 -> s6 [70, 70] { R6576 += 1, R6532 += 1, R87 += 1, R88 += 1 };
  s0 -> s7 [70, 70] { R6576 += 1, R6532 += 1, R87 += 1, R88 += 1 };
  s0 -> s1 [71, 74] { R6576 += 1, R6532 += 1, R88 += 1 };
  s0 -> s2 [71, 65535] { R6576 += 1, R6532 += 1, R87 += 1, R88 += 1 };
  s0 -> s8 [75, 75] { R6576 += 1, R6532 += 1, R88 += 1 };
  s0 -> s1 [76, 65535] { R6576 += 1, R6532 += 1, R88 += 1 };
  s1 -> s1 [0, 69] { R6576 += 1, R6532 += 1, R88 += 1 };
  s1 -> s4 [70, 70] { R6576 += 1, R6532 += 1, R88 += 1 };
  s1 -> s5 [70, 70] { R6576 += 1, R6532 += 1, R88 += 1 };
  s1 -> s1 [71, 74] { R6576 += 1, R6532 += 1, R88 += 1 };
  s1 -> s8 [75, 75] { R6576 += 1, R6532 += 1, R88 += 1 };
  s1 -> s1 [76, 65535] { R6576 += 1, R6532 += 1, R88 += 1 };
  s2 -> s1 [0, 69] { R6576 += 1, R6532 += 1, R88 += 1 };
  s2 -> s2 [0, 69] { R6576 += 1, R6532 += 1, R87 += 1, R88 += 1 };
  s2 -> s4 [70, 70] { R6576 += 1, R6532 += 1, R88 += 1 };
  s2 -> s5 [70, 70] { R6576 += 1, R6532 += 1, R88 += 1 };
  s2 -> s6 [70, 70] { R6576 += 1, R6532 += 1, R87 += 1, R88 += 1 };
  s2 -> s7 [70, 70] { R6576 += 1, R6532 += 1, R87 += 1, R88 += 1 };
  s2 -> s1 [71, 74] { R6576 += 1, R6532 += 1, R88 += 1 };
  s2 -> s2 [71, 65535] { R6576 += 1, R6532 += 1, R87 += 1, R88 += 1 };
  s2 -> s8 [75, 75] { R6576 += 1, R6532 += 1, R88 += 1 };
  s2 -> s1 [76, 65535] { R6576 += 1, R6532 += 1, R88 += 1 };
  s3 -> s1 [0, 69] { R6576 += 1, R6532 += 1, R88 += 1 };
  s3 -> s2 [0, 69] { R6576 += 1, R6532 += 1, R87 += 1, R88 += 1 };
  s3 -> s3 [0, 65535] { R6576 += 1, R6531 += 1, R6532 += 1 };
  s3 -> s4 [70, 70] { R6576 += 1, R6532 += 1, R88 += 1 };
  s3 -> s5 [70, 70] { R6576 += 1, R6532 += 1, R88 += 1 };
  s3 -> s6 [70, 70] { R6576 += 1, R6532 += 1, R87 += 1, R88 += 1 };
  s3 -> s7 [70, 70] { R6576 += 1, R6532 += 1, R87 += 1, R88 += 1 };
  s3 -> s1 [71, 74] { R6576 += 1, R6532 += 1, R88 += 1 };
  s3 -> s2 [71, 65535] { R6576 += 1, R6532 += 1, R87 += 1, R88 += 1 };
  s3 -> s8 [75, 75] { R6576 += 1, R6532 += 1, R88 += 1 };
  s3 -> s1 [76, 65535] { R6576 += 1, R6532 += 1, R88 += 1 };
  s4 -> s4 [0, 74] { R6576 += 1, R6532 += 1, R88 += 1 };
  s4 -> s10 [75, 75] { R6576 += 1, R6532 += 1, R88 += 1 };
  s4 -> s4 [76, 65535] { R6576 += 1, R6532 += 1, R88 += 1 };
  s7 -> s4 [0, 74] { R6576 += 1, R6532 += 1, R88 += 1 };
  s7 -> s7 [0, 65535] { R6576 += 1, R6532 += 1, R87 += 1, R88 += 1 };
  s7 -> s10 [75, 75] { R6576 += 1, R6532 += 1, R88 += 1 };
  s7 -> s4 [76, 65535] { R6576 += 1, R6532 += 1, R88 += 1 };
  s8 -> s8 [0, 69] { R6576 += 1, R6532 += 1, R88 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R6576 += 1 };
  s8 -> s10 [70, 70] { R6576 += 1, R6532 += 1, R88 += 1 };
  s8 -> s11 [70, 70] { R6576 += 1, R6532 += 1, R88 += 1 };
  s8 -> s8 [71, 65535] { R6576 += 1, R6532 += 1, R88 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R6576 += 1, R6532 += 1, R88 += 1 };
  s10 -> s12 [0, 65535] { R6576 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R6576 += 1 };
  s12 -> s12 [0, 65535] { R6576 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 69] { R6578 += 1, R6534 += 1, R91 += 1, R92 += 1 };
  s0 -> s2 [0, 65535] { R6578 += 1, R6533 += 1, R6534 += 1 };
  s0 -> s0 [0, 65535] { R6577 += 1, R6578 += 1 };
  s0 -> s3 [70, 70] { R6578 += 1, R6534 += 1, R91 += 1, R92 += 1 };
  s0 -> s4 [70, 70] { R6578 += 1, R6534 += 1, R91 += 1, R92 += 1 };
  s0 -> s1 [71, 65535] { R6578 += 1, R6534 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 69] { R6578 += 1, R6534 += 1, R91 += 1, R92 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R6578 += 1 };
  s1 -> s3 [70, 70] { R6578 += 1, R6534 += 1, R91 += 1, R92 += 1 };
  s1 -> s4 [70, 70] { R6578 += 1, R6534 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [71, 65535] { R6578 += 1, R6534 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [0, 69] { R6578 += 1, R6534 += 1, R91 += 1, R92 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R6578 += 1, R6533 += 1, R6534 += 1 };
  s2 -> s3 [70, 70] { R6578 += 1, R6534 += 1, R91 += 1, R92 += 1 };
  s2 -> s4 [70, 70] { R6578 += 1, R6534 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [71, 65535] { R6578 += 1, R6534 += 1, R91 += 1, R92 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R6578 += 1 };
  s3 -> s3 [0, 65535] { R6578 += 1, R6534 += 1, R91 += 1, R92 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R6578 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6578 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 69] { R6580 += 1, R6536 += 1, R3451 += 1, R3452 += 1 };
  s0 -> s2 [0, 69] { R6580 += 1, R6536 += 1, R3452 += 1, R3453 += 1 };
  s0 -> s3 [0, 69] { R6580 += 1, R6536 += 1, R3452 += 1 };
  s0 -> s0 [0, 65535] { R6579 += 1, R6580 += 1 };
  s0 -> s4 [0, 65535] { R6580 += 1, R6535 += 1, R6536 += 1 };
  s0 -> s5 [70, 70] { R6580 += 1, R6536 += 1, R3452 += 1, R3453 += 1 };
  s0 -> s6 [70, 70] { R6580 += 1, R6536 += 1, R3451 += 1, R3452 += 1 };
  s0 -> s7 [70, 70] { R6580 += 1, R6536 += 1, R3452 += 1, R3453 += 1 };
  s0 -> s8 [70, 70] { R6580 += 1, R6536 += 1, R3451 += 1, R3452 += 1 };
  s0 -> s9 [70, 70] { R6580 += 1, R6536 += 1, R3452 += 1 };
  s0 -> s10 [70, 70] { R6580 += 1, R6536 += 1, R3452 += 1 };
  s0 -> s3 [71, 74] { R6580 += 1, R6536 += 1, R3452 += 1 };
  s0 -> s1 [71, 65535] { R6580 += 1, R6536 += 1, R3451 += 1, R3452 += 1 };
  s0 -> s2 [71, 65535] { R6580 += 1, R6536 += 1, R3452 += 1, R3453 += 1 };
  s0 -> s3 [76, 65535] { R6580 += 1, R6536 += 1, R3452 += 1 };
  s1 -> s1 [0, 69] { R6580 += 1, R6536 += 1, R3451 += 1, R3452 += 1 };
  s1 -> s2 [0, 69] { R6580 += 1, R6536 += 1, R3452 += 1, R3453 += 1 };
  s1 -> s3 [0, 69] { R6580 += 1, R6536 += 1, R3452 += 1 };
  s1 -> s5 [70, 70] { R6580 += 1, R6536 += 1, R3452 += 1, R3453 += 1 };
  s1 -> s6 [70, 70] { R6580 += 1, R6536 += 1, R3451 += 1, R3452 += 1 };
  s1 -> s7 [70, 70] { R6580 += 1, R6536 += 1, R3452 += 1, R3453 += 1 };
  s1 -> s8 [70, 70] { R6580 += 1, R6536 += 1, R3451 += 1, R3452 += 1 };
  s1 -> s9 [70, 70] { R6580 += 1, R6536 += 1, R3452 += 1 };
  s1 -> s10 [70, 70] { R6580 += 1, R6536 += 1, R3452 += 1 };
  s1 -> s3 [71, 74] { R6580 += 1, R6536 += 1, R3452 += 1 };
  s1 -> s1 [71, 65535] { R6580 += 1, R6536 += 1, R3451 += 1, R3452 += 1 };
  s1 -> s2 [71, 65535] { R6580 += 1, R6536 += 1, R3452 += 1, R3453 += 1 };
  s1 -> s3 [76, 65535] { R6580 += 1, R6536 += 1, R3452 += 1 };
  s2 -> s2 [0, 69] { R6580 += 1, R6536 += 1, R3452 += 1, R3453 += 1 };
  s2 -> s3 [0, 69] { R6580 += 1, R6536 += 1, R3452 += 1 };
  s2 -> s5 [70, 70] { R6580 += 1, R6536 += 1, R3452 += 1, R3453 += 1 };
  s2 -> s7 [70, 70] { R6580 += 1, R6536 += 1, R3452 += 1, R3453 += 1 };
  s2 -> s9 [70, 70] { R6580 += 1, R6536 += 1, R3452 += 1 };
  s2 -> s10 [70, 70] { R6580 += 1, R6536 += 1, R3452 += 1 };
  s2 -> s3 [71, 74] { R6580 += 1, R6536 += 1, R3452 += 1 };
  s2 -> s2 [71, 65535] { R6580 += 1, R6536 += 1, R3452 += 1, R3453 += 1 };
  s2 -> s3 [76, 65535] { R6580 += 1, R6536 += 1, R3452 += 1 };
  s3 -> s3 [0, 69] { R6580 += 1, R6536 += 1, R3452 += 1 };
  s3 -> s11 [0, 65535];
  s3 -> s3 [0, 65535] { R6580 += 1 };
  s3 -> s9 [70, 70] { R6580 += 1, R6536 += 1 };
  s3 -> s10 [70, 70] { R6580 += 1, R6536 += 1 };
  s3 -> s3 [71, 74] { R6580 += 1, R6536 += 1, R3452 += 1 };
  s3 -> s3 [71, 65535] { R6580 += 1, R6536 += 1 };
  s3 -> s3 [76, 65535] { R6580 += 1, R6536 += 1, R3452 += 1 };
  s4 -> s1 [0, 69] { R6580 += 1, R6536 += 1, R3451 += 1, R3452 += 1 };
  s4 -> s2 [0, 69] { R6580 += 1, R6536 += 1, R3452 += 1, R3453 += 1 };
  s4 -> s3 [0, 69] { R6580 += 1, R6536 += 1, R3452 += 1 };
  s4 -> s4 [0, 65535] { R6580 += 1, R6535 += 1, R6536 += 1 };
  s4 -> s5 [70, 70] { R6580 += 1, R6536 += 1, R3452 += 1, R3453 += 1 };
  s4 -> s6 [70, 70] { R6580 += 1, R6536 += 1, R3451 += 1, R3452 += 1 };
  s4 -> s7 [70, 70] { R6580 += 1, R6536 += 1, R3452 += 1, R3453 += 1 };
  s4 -> s8 [70, 70] { R6580 += 1, R6536 += 1, R3451 += 1, R3452 += 1 };
  s4 -> s9 [70, 70] { R6580 += 1, R6536 += 1, R3452 += 1 };
  s4 -> s10 [70, 70] { R6580 += 1, R6536 += 1, R3452 += 1 };
  s4 -> s3 [71, 74] { R6580 += 1, R6536 += 1, R3452 += 1 };
  s4 -> s1 [71, 65535] { R6580 += 1, R6536 += 1, R3451 += 1, R3452 += 1 };
  s4 -> s2 [71, 65535] { R6580 += 1, R6536 += 1, R3452 += 1, R3453 += 1 };
  s4 -> s3 [76, 65535] { R6580 += 1, R6536 += 1, R3452 += 1 };
  s5 -> s9 [0, 74] { R6580 += 1, R6536 += 1, R3452 += 1 };
  s5 -> s5 [0, 65535] { R6580 += 1, R6536 += 1, R3452 += 1, R3453 += 1 };
  s5 -> s9 [76, 65535] { R6580 += 1, R6536 += 1, R3452 += 1 };
  s6 -> s9 [0, 74] { R6580 += 1, R6536 += 1, R3452 += 1 };
  s6 -> s5 [0, 65535] { R6580 += 1, R6536 += 1, R3452 += 1, R3453 += 1 };
  s6 -> s6 [0, 65535] { R6580 += 1, R6536 += 1, R3451 += 1, R3452 += 1 };
  s6 -> s9 [76, 65535] { R6580 += 1, R6536 += 1, R3452 += 1 };
  s9 -> s9 [0, 74] { R6580 += 1, R6536 += 1, R3452 += 1 };
  s9 -> s12 [0, 65535] { R6580 += 1 };
  s9 -> s9 [0, 65535] { R6580 += 1, R6536 += 1 };
  s9 -> s11 [0, 65535];
  s9 -> s9 [76, 65535] { R6580 += 1, R6536 += 1, R3452 += 1 };
  s10 -> s11 [0, 65535];
  s10 -> s10 [0, 65535] { R6580 += 1 };
  s11 -> s11 [0, 65535];
  s12 -> s12 [0, 65535] { R6580 += 1 };
  s12 -> s11 [0, 65535];
  accepting s3, s12, s9, s10, s11;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 69] { R6582 += 1, R6538 += 1, R6248 += 1, R6249 += 1, R6250 += 1 };
  s0 -> s2 [0, 69] { R6582 += 1, R6538 += 1, R6247 += 1, R6248 += 1 };
  s0 -> s3 [0, 65535] { R6582 += 1, R6537 += 1, R6538 += 1 };
  s0 -> s0 [0, 65535] { R6581 += 1, R6582 += 1 };
  s0 -> s4 [70, 70] { R6582 += 1, R6538 += 1, R6247 += 1, R6248 += 1 };
  s0 -> s5 [70, 70] { R6582 += 1, R6538 += 1, R6248 += 1, R6249 += 1, R6250 += 1 };
  s0 -> s6 [70, 70] { R6582 += 1, R6538 += 1, R6247 += 1, R6248 += 1 };
  s0 -> s7 [70, 70] { R6582 += 1, R6538 += 1, R6248 += 1, R6249 += 1, R6250 += 1 };
  s0 -> s1 [71, 65535] { R6582 += 1, R6538 += 1, R6248 += 1, R6249 += 1, R6250 += 1 };
  s0 -> s2 [71, 65535] { R6582 += 1, R6538 += 1, R6247 += 1, R6248 += 1 };
  s1 -> s1 [0, 69] { R6582 += 1, R6538 += 1, R6248 += 1, R6249 += 1, R6250 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s1 [0, 65535] { R6582 += 1 };
  s1 -> s5 [70, 70] { R6582 += 1, R6538 += 1, R6248 += 1, R6249 += 1, R6250 += 1 };
  s1 -> s7 [70, 70] { R6582 += 1, R6538 += 1, R6248 += 1, R6249 += 1, R6250 += 1 };
  s1 -> s1 [71, 65535] { R6582 += 1, R6538 += 1, R6248 += 1, R6249 += 1, R6250 += 1 };
  s2 -> s1 [0, 69] { R6582 += 1, R6538 += 1, R6248 += 1, R6249 += 1, R6250 += 1 };
  s2 -> s2 [0, 69] { R6582 += 1, R6538 += 1, R6247 += 1, R6248 += 1 };
  s2 -> s4 [70, 70] { R6582 += 1, R6538 += 1, R6247 += 1, R6248 += 1 };
  s2 -> s5 [70, 70] { R6582 += 1, R6538 += 1, R6248 += 1, R6249 += 1, R6250 += 1 };
  s2 -> s6 [70, 70] { R6582 += 1, R6538 += 1, R6247 += 1, R6248 += 1 };
  s2 -> s7 [70, 70] { R6582 += 1, R6538 += 1, R6248 += 1, R6249 += 1, R6250 += 1 };
  s2 -> s1 [71, 65535] { R6582 += 1, R6538 += 1, R6248 += 1, R6249 += 1, R6250 += 1 };
  s2 -> s2 [71, 65535] { R6582 += 1, R6538 += 1, R6247 += 1, R6248 += 1 };
  s3 -> s1 [0, 69] { R6582 += 1, R6538 += 1, R6248 += 1, R6249 += 1, R6250 += 1 };
  s3 -> s2 [0, 69] { R6582 += 1, R6538 += 1, R6247 += 1, R6248 += 1 };
  s3 -> s3 [0, 65535] { R6582 += 1, R6537 += 1, R6538 += 1 };
  s3 -> s4 [70, 70] { R6582 += 1, R6538 += 1, R6247 += 1, R6248 += 1 };
  s3 -> s5 [70, 70] { R6582 += 1, R6538 += 1, R6248 += 1, R6249 += 1, R6250 += 1 };
  s3 -> s6 [70, 70] { R6582 += 1, R6538 += 1, R6247 += 1, R6248 += 1 };
  s3 -> s7 [70, 70] { R6582 += 1, R6538 += 1, R6248 += 1, R6249 += 1, R6250 += 1 };
  s3 -> s1 [71, 65535] { R6582 += 1, R6538 += 1, R6248 += 1, R6249 += 1, R6250 += 1 };
  s3 -> s2 [71, 65535] { R6582 += 1, R6538 += 1, R6247 += 1, R6248 += 1 };
  s4 -> s4 [0, 65535] { R6582 += 1, R6538 += 1, R6247 += 1, R6248 += 1 };
  s4 -> s7 [0, 65535] { R6582 += 1, R6538 += 1, R6248 += 1, R6249 += 1, R6250 += 1 };
  s5 -> s5 [0, 65535] { R6582 += 1 };
  s5 -> s8 [0, 65535];
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R6582 += 1, R6538 += 1, R6248 += 1, R6249 += 1, R6250 += 1 };
  s7 -> s9 [0, 65535] { R6582 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R6582 += 1 };
  accepting s8, s5, s9, s1, s7;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 69] { R6584 += 1, R6540 += 1, R6475 += 1, R6476 += 1 };
  s0 -> s0 [0, 65535] { R6583 += 1, R6584 += 1 };
  s0 -> s2 [0, 65535] { R6584 += 1, R6539 += 1, R6540 += 1 };
  s0 -> s3 [70, 70] { R6584 += 1, R6540 += 1, R6475 += 1, R6476 += 1 };
  s0 -> s4 [70, 70] { R6584 += 1, R6540 += 1, R6475 += 1, R6476 += 1 };
  s0 -> s1 [71, 65535] { R6584 += 1, R6540 += 1, R6475 += 1, R6476 += 1 };
  s1 -> s1 [0, 69] { R6584 += 1, R6540 += 1, R6475 += 1, R6476 += 1 };
  s1 -> s1 [0, 65535] { R6584 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [70, 70] { R6584 += 1, R6540 += 1, R6475 += 1, R6476 += 1 };
  s1 -> s4 [70, 70] { R6584 += 1, R6540 += 1, R6475 += 1, R6476 += 1 };
  s1 -> s1 [71, 65535] { R6584 += 1, R6540 += 1, R6475 += 1, R6476 += 1 };
  s2 -> s1 [0, 69] { R6584 += 1, R6540 += 1, R6475 += 1, R6476 += 1 };
  s2 -> s2 [0, 65535] { R6584 += 1, R6539 += 1, R6540 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [70, 70] { R6584 += 1, R6540 += 1, R6475 += 1, R6476 += 1 };
  s2 -> s4 [70, 70] { R6584 += 1, R6540 += 1, R6475 += 1, R6476 += 1 };
  s2 -> s1 [71, 65535] { R6584 += 1, R6540 += 1, R6475 += 1, R6476 += 1 };
  s3 -> s6 [0, 65535] { R6584 += 1 };
  s3 -> s3 [0, 65535] { R6584 += 1, R6540 += 1, R6475 += 1, R6476 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R6584 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6584 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [102, 102];
  accepting s1;
};
};
constraint R2 = R6502 && R3 = R6584 && R23 - R6584 = -1 && R24 = R6584 && R25 - R6584 = -1 && R26 = R6584 && R27 = 0 && R28 = 1 && R29 = 0 && R30 = 1 && R45 + R84 + R83 + -1*R6252 + -1*R6248 - R66 = 0 && R49 + R89 + R87 = 0 && R50 + R90 + R88 + -1*R6252 + -1*R6248 - R66 = 0 && R55 + R96 + R93 + -1*R6254 + -1*R6250 - R68 = 0 && R65 + R6251 + R6247 = 0 && R67 + R6253 + R6249 = 0 && R6501 = 0 && R6525 = 0 && R6526 = 0 && R6531 = 0 && R6532 = 0 && R6535 = 0 && R6536 = 0 && R6537 = 0 && R6538 = 0 && R6541 = 0 && R6542 = R6584 && R6543 = 0 && R6544 = R6584 && R6545 = 0 && R6546 = R6584 && R6547 = 0 && R6548 = R6584 && R6549 = 0 && R6550 = R6584 && R6551 = 0 && R6552 = R6584 && R6553 = 0 && R6554 = R6584 && R6555 = 0 && R6556 = R6584 && R6557 = 0 && R6558 = R6584 && R6559 = 0 && R6560 = R6584 && R6561 = 0 && R6562 = R6584 && R6563 = 0 && R6564 = R6584 && R6565 = 0 && R6566 = R6584 && R6567 = 0 && R6568 = R6584 && R6569 = 0 && R6570 = R6584 && R6571 = 0 && R6572 = R6584 && R6573 = 0 && R6574 = R6584 && R6575 = 0 && R6576 = R6584 && R6577 = 0 && R6578 = R6584 && R6579 = 0 && R6580 = R6584 && R6581 = 0 && R6582 = R6584 && R6583 = 0 && R12 < 1 && R15 < 1 && R16 < 1 && R47 + R86 + R85 < 1 && R61 + R3456 + R3453 < 1 && -1*R6252 + -1*R6248 - R66 < 1 && -1*R6254 + -1*R6250 - R68 < 1 && -1 < R6502 && 0 < R6584 && (R53 + R94 + R91 != 0 || R54 + R95 + R92 + -1*R6252 + -1*R6248 - R66 = 0 || R66 + R6252 + R6248 < 1) && (R59 + R3454 + R3451 != 0 || R60 + R3455 + R3452 + -1*R6252 + -1*R6248 - R66 = 0 || R66 + R6252 + R6248 < 1) && (R66 + R6252 + R6248 != 0 || ((R53 + R94 + R91 != 0 || R54 + R95 + R92 = 0 || R68 + R6254 + R6250 < 1) && (R53 + R94 + R91 = 0 || R68 + R6254 + R6250 < 1))) && (R66 + R6252 + R6248 != 0 || ((R59 + R3454 + R3451 != 0 || R60 + R3455 + R3452 = 0 || R68 + R6254 + R6250 < 1) && (R59 + R3454 + R3451 = 0 || R68 + R6254 + R6250 < 1))) && (R66 + R6252 + R6248 != 0 || ((R73 + R6480 + R6475 != 0 || R74 + R6481 + R6476 = 0 || R68 + R6254 + R6250 < 1) && (R73 + R6480 + R6475 = 0 || R68 + R6254 + R6250 < 1))) && (R68 + R6254 + R6250 != 0 || R77 + R6484 + R6479 = 0 || (R75 + R6482 + R6477 = 0 && R76 + R6483 + R6478 = 0)) && (R73 + R6480 + R6475 != 0 || R66 + R6252 + R6248 + -1*R6481 + -1*R6476 - R74 = 0 || R66 + R6252 + R6248 < 1) && (R75 + R6482 + R6477 != 0 || R68 + R6254 + R6250 + -1*R6483 + -1*R6478 - R76 = 0 || R68 + R6254 + R6250 < 1) && (R6485 != 0 || R6486 = R6502 || (R20 = 0 && R6502 = 0)) && (R6487 != 0 || R6488 = R6502 || (R20 = 0 && R6502 = 0)) && (R6489 != 0 || R6490 = R6502 || (R20 = 0 && R6502 = 0)) && (R6491 != 0 || R6492 = R6502 || (R20 = 0 && R6502 = 0)) && (R6493 != 0 || R6494 = R6502 || (R20 = 0 && R6502 = 0)) && (R6495 != 0 || R6496 = R6502 || (R20 = 0 && R6502 = 0)) && (R6497 != 0 || R6498 = R6502 || (R20 = 0 && R6502 = 0)) && (R6499 != 0 || R6500 = R6502 || (R20 = 0 && R6502 = 0)) && (R6503 != 0 || R6502 = R6504 || (R20 = 0 && R6502 = 0)) && (R21 = 0 || (R6523 = 0 && R6524 = 0)) && (R21 = 0 || (R6527 = 0 && R6528 = 0)) && (R21 = 0 || (R6529 = 0 && R6530 = 0)) && (R21 = 0 || (R6533 = 0 && R6534 = 0)) && (R21 = 0 || (R6539 = 0 && R6540 = 0)) && (R22 = 0 || (R6505 = 0 && R6506 = 0)) && (R22 = 0 || (R6507 = 0 && R6508 = 0)) && (R22 = 0 || (R6509 = 0 && R6510 = 0)) && (R22 = 0 || (R6511 = 0 && R6512 = 0)) && (R22 = 0 || (R6513 = 0 && R6514 = 0)) && (R22 = 0 || (R6515 = 0 && R6516 = 0)) && (R22 = 0 || (R6517 = 0 && R6518 = 0)) && (R22 = 0 || (R6519 = 0 && R6520 = 0)) && (R22 = 0 || (R6521 = 0 && R6522 = 0)) && (R53 + R94 + R91 = 0 || R66 + R6252 + R6248 < 1) && (R59 + R3454 + R3451 = 0 || R66 + R6252 + R6248 < 1) && (R73 + R6480 + R6475 = 0 || R66 + R6252 + R6248 < 1) && (R75 + R6482 + R6477 = 0 || R68 + R6254 + R6250 < 1) && (R6485 = 0 || (R20 = 0 && R6502 = 0)) && (R6487 = 0 || (R20 = 0 && R6502 = 0)) && (R6489 = 0 || (R20 = 0 && R6502 = 0)) && (R6491 = 0 || (R20 = 0 && R6502 = 0)) && (R6493 = 0 || (R20 = 0 && R6502 = 0)) && (R6495 = 0 || (R20 = 0 && R6502 = 0)) && (R6497 = 0 || (R20 = 0 && R6502 = 0)) && (R6499 = 0 || (R20 = 0 && R6502 = 0)) && (R6503 = 0 || (R20 = 0 && R6502 = 0));
// End of Parikh automata intersection problem
