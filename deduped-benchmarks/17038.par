// Parikh automata intersection problem, generated by OSTRICH+
counter int R12, R15, R16, R2, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R4, R45, R47, R49, R5, R50, R53, R54, R55, R59, R60, R61, R65, R66, R67, R68, R6805, R6806, R6807, R6808, R6809, R6810, R73, R74, R75, R76, R77, R83, R84, R85, R86, R87, R88, R89, R90, R9043, R9044, R9045, R9046, R9047, R9048, R9049, R9050, R9051, R9052, R9053, R9054, R9055, R9056, R9057, R9058, R9059, R9060, R9061, R9062, R9063, R9064, R9065, R9066, R9067, R9068, R9069, R9070, R9071, R9072, R9073, R9074, R9075, R9076, R9077, R9078, R9079, R9080, R9081, R9082, R9083, R9084, R9085, R9086, R9087, R9088, R9089, R9090, R9091, R9092, R9093, R9094, R9095, R9096, R9097, R9098, R9099, R91, R9100, R9101, R9102, R9103, R9104, R9105, R9106, R9107, R9108, R9109, R9110, R9111, R9112, R9113, R9114, R9115, R9116, R9117, R9118, R9119, R9120, R9121, R9122, R9123, R9124, R9125, R9126, R9127, R9128, R9129, R9130, R9131, R9132, R9133, R9134, R9135, R9136, R9137, R9138, R9139, R9140, R9141, R9142, R9143, R9144, R9145, R9146, R9147, R9148, R9149, R9150, R9151, R9152, R9153, R9154, R9155, R9156, R9157, R9158, R9159, R9160, R92, R93, R94, R95, R96;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [70, 70];
  s0 -> s0 [71, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [70, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R15 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 69];
  s0 -> s0 [0, 65535] { R16 += 1 };
  s0 -> s2 [70, 70];
  s0 -> s1 [71, 65535];
  s1 -> s1 [0, 69];
  s1 -> s2 [70, 70];
  s1 -> s1 [71, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R24 += 1 };
  s0 -> s0 [0, 65535] { R23 += 1, R24 += 1 };
  s0 -> s2 [9, 13] { R24 += 1 };
  s0 -> s1 [14, 31] { R24 += 1 };
  s0 -> s2 [32, 32] { R24 += 1 };
  s0 -> s1 [33, 65535] { R24 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R24 += 1 };
  s2 -> s1 [0, 65535] { R24 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R25 += 1, R26 += 1 };
  s1 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R28 += 1 };
  s0 -> s0 [0, 65535] { R27 += 1, R28 += 1 };
  s0 -> s2 [9, 13] { R28 += 1 };
  s0 -> s1 [14, 31] { R28 += 1 };
  s0 -> s2 [32, 32] { R28 += 1 };
  s0 -> s1 [33, 65535] { R28 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R28 += 1 };
  s2 -> s1 [0, 65535] { R28 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R29 += 1, R30 += 1 };
  s1 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R9082 += 1, R22 += 1 };
  s0 -> s0 [0, 65535] { R9081 += 1, R9082 += 1 };
  s1 -> s1 [0, 65535] { R9082 += 1, R22 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 69] { R9084 += 1 };
  s0 -> s0 [0, 65535] { R9083 += 1, R9084 += 1 };
  s0 -> s2 [70, 70] { R9084 += 1 };
  s0 -> s3 [70, 70] { R9084 += 1 };
  s0 -> s1 [76, 65535] { R9084 += 1 };
  s1 -> s1 [0, 69] { R9084 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R9084 += 1 };
  s1 -> s3 [70, 70] { R9084 += 1 };
  s1 -> s1 [76, 65535] { R9084 += 1 };
  s2 -> s2 [0, 70] { R9084 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [76, 65535] { R9084 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 69] { R9086 += 1, R45 += 1 };
  s0 -> s0 [0, 65535] { R9085 += 1, R9086 += 1 };
  s0 -> s2 [70, 70] { R9086 += 1, R45 += 1 };
  s0 -> s3 [70, 70] { R9086 += 1, R45 += 1 };
  s0 -> s1 [71, 65535] { R9086 += 1, R45 += 1 };
  s1 -> s1 [0, 69] { R9086 += 1, R45 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R9086 += 1, R45 += 1 };
  s1 -> s3 [70, 70] { R9086 += 1, R45 += 1 };
  s1 -> s1 [71, 65535] { R9086 += 1, R45 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R9086 += 1, R45 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 69] { R9088 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R9087 += 1, R9088 += 1 };
  s0 -> s2 [70, 70] { R9088 += 1, R47 += 1 };
  s0 -> s3 [70, 70] { R9088 += 1, R47 += 1 };
  s0 -> s1 [71, 65535] { R9088 += 1, R47 += 1 };
  s1 -> s1 [0, 69] { R9088 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R9088 += 1, R47 += 1 };
  s1 -> s3 [70, 70] { R9088 += 1, R47 += 1 };
  s1 -> s1 [71, 65535] { R9088 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R9088 += 1, R47 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 69] { R9090 += 1, R49 += 1, R50 += 1 };
  s0 -> s0 [0, 65535] { R9089 += 1, R9090 += 1 };
  s0 -> s2 [70, 70] { R9090 += 1, R49 += 1, R50 += 1 };
  s0 -> s3 [70, 70] { R9090 += 1, R49 += 1, R50 += 1 };
  s0 -> s1 [71, 65535] { R9090 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 69] { R9090 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R9090 += 1, R49 += 1, R50 += 1 };
  s1 -> s3 [70, 70] { R9090 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [71, 65535] { R9090 += 1, R49 += 1, R50 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R9090 += 1, R49 += 1, R50 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 69] { R9092 += 1, R53 += 1, R54 += 1 };
  s0 -> s0 [0, 65535] { R9091 += 1, R9092 += 1 };
  s0 -> s2 [70, 70] { R9092 += 1, R53 += 1, R54 += 1 };
  s0 -> s3 [70, 70] { R9092 += 1, R53 += 1, R54 += 1 };
  s0 -> s1 [71, 65535] { R9092 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 69] { R9092 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R9092 += 1, R53 += 1, R54 += 1 };
  s1 -> s3 [70, 70] { R9092 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [71, 65535] { R9092 += 1, R53 += 1, R54 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R9092 += 1, R53 += 1, R54 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 69] { R9094 += 1, R59 += 1, R60 += 1 };
  s0 -> s0 [0, 65535] { R9093 += 1, R9094 += 1 };
  s0 -> s2 [70, 70] { R9094 += 1, R59 += 1, R60 += 1 };
  s0 -> s3 [70, 70] { R9094 += 1, R59 += 1, R60 += 1 };
  s0 -> s1 [71, 65535] { R9094 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 69] { R9094 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R9094 += 1, R59 += 1, R60 += 1 };
  s1 -> s3 [70, 70] { R9094 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [71, 65535] { R9094 += 1, R59 += 1, R60 += 1 };
  s2 -> s2 [0, 65535] { R9094 += 1, R59 += 1, R60 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 69] { R9096 += 1, R65 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R9095 += 1, R9096 += 1 };
  s0 -> s2 [70, 70] { R9096 += 1, R65 += 1, R66 += 1 };
  s0 -> s3 [70, 70] { R9096 += 1, R65 += 1, R66 += 1 };
  s0 -> s1 [71, 65535] { R9096 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 69] { R9096 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R9096 += 1, R65 += 1, R66 += 1 };
  s1 -> s3 [70, 70] { R9096 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [71, 65535] { R9096 += 1, R65 += 1, R66 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R9096 += 1, R65 += 1, R66 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 69] { R9098 += 1, R73 += 1, R74 += 1 };
  s0 -> s0 [0, 65535] { R9097 += 1, R9098 += 1 };
  s0 -> s2 [70, 70] { R9098 += 1, R73 += 1, R74 += 1 };
  s0 -> s3 [70, 70] { R9098 += 1, R73 += 1, R74 += 1 };
  s0 -> s1 [71, 65535] { R9098 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 69] { R9098 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R9098 += 1, R73 += 1, R74 += 1 };
  s1 -> s3 [70, 70] { R9098 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [71, 65535] { R9098 += 1, R73 += 1, R74 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R9098 += 1, R73 += 1, R74 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 69] { R9118 += 1 };
  s0 -> s0 [0, 65535] { R9117 += 1, R9118 += 1 };
  s0 -> s2 [70, 70] { R9118 += 1 };
  s0 -> s1 [71, 65535] { R9118 += 1 };
  s1 -> s1 [0, 69] { R9118 += 1 };
  s1 -> s2 [70, 70] { R9118 += 1 };
  s1 -> s1 [71, 65535] { R9118 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R9118 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R9120 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R9119 += 1, R9120 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R9120 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 69] { R9122 += 1 };
  s0 -> s2 [0, 65535] { R9122 += 1, R12 += 1 };
  s0 -> s0 [0, 65535] { R9121 += 1, R9122 += 1 };
  s0 -> s3 [70, 70] { R9122 += 1 };
  s0 -> s1 [71, 65535] { R9122 += 1 };
  s1 -> s1 [0, 69] { R9122 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [70, 70] { R9122 += 1 };
  s1 -> s1 [71, 65535] { R9122 += 1 };
  s2 -> s1 [0, 69] { R9122 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R9122 += 1, R12 += 1 };
  s2 -> s3 [70, 70] { R9122 += 1 };
  s2 -> s1 [71, 65535] { R9122 += 1 };
  s3 -> s3 [0, 65535] { R9122 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 69] { R9124 += 1, R9062 += 1 };
  s0 -> s2 [0, 65535] { R9124 += 1, R9061 += 1, R9062 += 1 };
  s0 -> s0 [0, 65535] { R9123 += 1, R9124 += 1 };
  s0 -> s1 [71, 65535] { R9124 += 1, R9062 += 1 };
  s1 -> s1 [0, 69] { R9124 += 1, R9062 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R9124 += 1 };
  s1 -> s1 [71, 65535] { R9124 += 1, R9062 += 1 };
  s2 -> s1 [0, 69] { R9124 += 1, R9062 += 1 };
  s2 -> s2 [0, 65535] { R9124 += 1, R9061 += 1, R9062 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [71, 65535] { R9124 += 1, R9062 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R9126 += 1, R9063 += 1, R9064 += 1 };
  s0 -> s0 [0, 65535] { R9125 += 1, R9126 += 1 };
  s0 -> s2 [0, 65535] { R9126 += 1, R9064 += 1, R20 += 1 };
  s1 -> s1 [0, 65535] { R9126 += 1, R9063 += 1, R9064 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R9126 += 1, R9064 += 1, R20 += 1 };
  s2 -> s3 [0, 65535] { R9126 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R9126 += 1, R9064 += 1, R20 += 1 };
  s3 -> s3 [0, 65535] { R9126 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 70] { R9128 += 1, R9066 += 1 };
  s0 -> s2 [0, 65535] { R9128 += 1, R9065 += 1, R9066 += 1 };
  s0 -> s0 [0, 65535] { R9127 += 1, R9128 += 1 };
  s0 -> s1 [75, 65535] { R9128 += 1, R9066 += 1 };
  s1 -> s1 [0, 70] { R9128 += 1, R9066 += 1 };
  s1 -> s1 [0, 65535] { R9128 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [75, 65535] { R9128 += 1, R9066 += 1 };
  s2 -> s1 [0, 70] { R9128 += 1, R9066 += 1 };
  s2 -> s2 [0, 65535] { R9128 += 1, R9065 += 1, R9066 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [75, 65535] { R9128 += 1, R9066 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R9130 += 1, R9067 += 1, R9068 += 1 };
  s0 -> s0 [0, 65535] { R9129 += 1, R9130 += 1 };
  s0 -> s2 [0, 65535] { R9130 += 1, R9068 += 1, R84 += 1 };
  s1 -> s1 [0, 65535] { R9130 += 1, R9067 += 1, R9068 += 1 };
  s1 -> s2 [0, 65535] { R9130 += 1, R9068 += 1, R84 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R9130 += 1 };
  s2 -> s2 [0, 65535] { R9130 += 1, R9068 += 1, R84 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R9130 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 74] { R9132 += 1, R9070 += 1 };
  s0 -> s0 [0, 65535] { R9131 += 1, R9132 += 1 };
  s0 -> s2 [0, 65535] { R9132 += 1, R9069 += 1, R9070 += 1 };
  s0 -> s3 [0, 65535] { R9132 += 1, R9070 += 1, R86 += 1 };
  s0 -> s1 [76, 65535] { R9132 += 1, R9070 += 1 };
  s1 -> s1 [0, 74] { R9132 += 1, R9070 += 1 };
  s1 -> s1 [0, 65535] { R9132 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [76, 65535] { R9132 += 1, R9070 += 1 };
  s2 -> s1 [0, 74] { R9132 += 1, R9070 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R9132 += 1, R9069 += 1, R9070 += 1 };
  s2 -> s3 [0, 65535] { R9132 += 1, R9070 += 1, R86 += 1 };
  s2 -> s1 [76, 65535] { R9132 += 1, R9070 += 1 };
  s3 -> s1 [0, 74] { R9132 += 1, R9070 += 1 };
  s3 -> s4 [0, 65535] { R9132 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R9132 += 1, R9070 += 1, R86 += 1 };
  s3 -> s1 [76, 65535] { R9132 += 1, R9070 += 1 };
  s4 -> s4 [0, 65535] { R9132 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s0 [0, 65535] { R9133 += 1, R9134 += 1 };
  s0 -> s1 [0, 65535] { R9134 += 1, R9071 += 1, R9072 += 1 };
  s0 -> s2 [0, 65535] { R9134 += 1, R9072 += 1, R90 += 1 };
  s0 -> s3 [0, 65535] { R9134 += 1, R9072 += 1 };
  s1 -> s1 [0, 65535] { R9134 += 1, R9071 += 1, R9072 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R9134 += 1, R9072 += 1, R90 += 1 };
  s1 -> s3 [0, 65535] { R9134 += 1, R9072 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R9134 += 1 };
  s2 -> s2 [0, 65535] { R9134 += 1, R9072 += 1, R90 += 1 };
  s2 -> s3 [0, 65535] { R9134 += 1, R9072 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R9134 += 1 };
  s3 -> s3 [0, 65535] { R9134 += 1, R9072 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R9134 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R9136 += 1, R9073 += 1, R9074 += 1 };
  s0 -> s0 [0, 65535] { R9135 += 1, R9136 += 1 };
  s0 -> s2 [0, 65535] { R9136 += 1, R9074 += 1, R95 += 1, R96 += 1 };
  s0 -> s3 [0, 65535] { R9136 += 1, R9074 += 1, R94 += 1, R95 += 1 };
  s1 -> s1 [0, 65535] { R9136 += 1, R9073 += 1, R9074 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R9136 += 1, R9074 += 1, R95 += 1, R96 += 1 };
  s1 -> s3 [0, 65535] { R9136 += 1, R9074 += 1, R94 += 1, R95 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R9136 += 1, R9074 += 1, R95 += 1, R96 += 1 };
  s2 -> s5 [0, 65535] { R9136 += 1 };
  s2 -> s6 [0, 65535] { R9136 += 1, R9074 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R9136 += 1, R9074 += 1, R95 += 1, R96 += 1 };
  s3 -> s3 [0, 65535] { R9136 += 1, R9074 += 1, R94 += 1, R95 += 1 };
  s3 -> s5 [0, 65535] { R9136 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R9136 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R9136 += 1 };
  s6 -> s6 [0, 65535] { R9136 += 1, R9074 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 74] { R9138 += 1, R9076 += 1, R6809 += 1 };
  s0 -> s2 [0, 65535] { R9138 += 1, R9075 += 1, R9076 += 1 };
  s0 -> s3 [0, 65535] { R9138 += 1, R9076 += 1 };
  s0 -> s4 [0, 65535] { R9138 += 1, R9076 += 1, R6809 += 1, R6810 += 1 };
  s0 -> s0 [0, 65535] { R9137 += 1, R9138 += 1 };
  s0 -> s1 [76, 65535] { R9138 += 1, R9076 += 1, R6809 += 1 };
  s1 -> s1 [0, 74] { R9138 += 1, R9076 += 1, R6809 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R9138 += 1, R9076 += 1 };
  s1 -> s6 [0, 65535] { R9138 += 1 };
  s1 -> s1 [76, 65535] { R9138 += 1, R9076 += 1, R6809 += 1 };
  s2 -> s1 [0, 74] { R9138 += 1, R9076 += 1, R6809 += 1 };
  s2 -> s2 [0, 65535] { R9138 += 1, R9075 += 1, R9076 += 1 };
  s2 -> s3 [0, 65535] { R9138 += 1, R9076 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [0, 65535] { R9138 += 1, R9076 += 1, R6809 += 1, R6810 += 1 };
  s2 -> s1 [76, 65535] { R9138 += 1, R9076 += 1, R6809 += 1 };
  s3 -> s3 [0, 65535] { R9138 += 1, R9076 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R9138 += 1 };
  s4 -> s1 [0, 74] { R9138 += 1, R9076 += 1, R6809 += 1 };
  s4 -> s3 [0, 65535] { R9138 += 1, R9076 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R9138 += 1, R9076 += 1, R6809 += 1, R6810 += 1 };
  s4 -> s6 [0, 65535] { R9138 += 1 };
  s4 -> s1 [76, 65535] { R9138 += 1, R9076 += 1, R6809 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9138 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 74] { R9140 += 1, R9078 += 1, R9048 += 1, R9050 += 1 };
  s0 -> s0 [0, 65535] { R9139 += 1, R9140 += 1 };
  s0 -> s2 [0, 65535] { R9140 += 1, R9077 += 1, R9078 += 1 };
  s0 -> s3 [75, 75] { R9140 += 1, R9078 += 1, R9048 += 1, R9050 += 1 };
  s0 -> s1 [76, 65535] { R9140 += 1, R9078 += 1, R9048 += 1, R9050 += 1 };
  s1 -> s1 [0, 74] { R9140 += 1, R9078 += 1, R9048 += 1, R9050 += 1 };
  s1 -> s3 [75, 75] { R9140 += 1, R9078 += 1, R9048 += 1, R9050 += 1 };
  s1 -> s1 [76, 65535] { R9140 += 1, R9078 += 1, R9048 += 1, R9050 += 1 };
  s2 -> s1 [0, 74] { R9140 += 1, R9078 += 1, R9048 += 1, R9050 += 1 };
  s2 -> s2 [0, 65535] { R9140 += 1, R9077 += 1, R9078 += 1 };
  s2 -> s3 [75, 75] { R9140 += 1, R9078 += 1, R9048 += 1, R9050 += 1 };
  s2 -> s1 [76, 65535] { R9140 += 1, R9078 += 1, R9048 += 1, R9050 += 1 };
  s3 -> s4 [0, 65535] { R9140 += 1, R9078 += 1 };
  s3 -> s5 [0, 65535] { R9140 += 1, R9078 += 1, R9048 += 1 };
  s3 -> s3 [0, 65535] { R9140 += 1, R9078 += 1, R9048 += 1, R9050 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s7 [0, 65535] { R9140 += 1 };
  s4 -> s4 [0, 65535] { R9140 += 1, R9078 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R9140 += 1 };
  s5 -> s4 [0, 65535] { R9140 += 1, R9078 += 1 };
  s5 -> s5 [0, 65535] { R9140 += 1, R9078 += 1, R9048 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R9140 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R9140 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 65535] { R9142 += 1, R9079 += 1, R9080 += 1 };
  s0 -> s0 [0, 65535] { R9141 += 1, R9142 += 1 };
  s0 -> s2 [0, 65535] { R9142 += 1, R9080 += 1, R9057 += 1 };
  s0 -> s3 [0, 65535] { R9142 += 1, R9080 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R9142 += 1, R9079 += 1, R9080 += 1 };
  s1 -> s2 [0, 65535] { R9142 += 1, R9080 += 1, R9057 += 1 };
  s1 -> s3 [0, 65535] { R9142 += 1, R9080 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R9142 += 1 };
  s2 -> s2 [0, 65535] { R9142 += 1, R9080 += 1, R9057 += 1 };
  s2 -> s3 [0, 65535] { R9142 += 1, R9080 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R9142 += 1 };
  s3 -> s3 [0, 65535] { R9142 += 1, R9080 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R9142 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s0 [0, 65535] { R9143 += 1, R9144 += 1 };
  s0 -> s1 [0, 65535] { R9144 += 1, R9100 += 1, R21 += 1 };
  s0 -> s2 [0, 65535] { R9144 += 1, R9099 += 1, R9100 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R9144 += 1, R9100 += 1, R21 += 1 };
  s1 -> s4 [0, 65535] { R9144 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R9144 += 1, R9100 += 1, R21 += 1 };
  s2 -> s2 [0, 65535] { R9144 += 1, R9099 += 1, R9100 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R9144 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 69] { R9146 += 1, R9102 += 1 };
  s0 -> s2 [0, 65535] { R9146 += 1, R9101 += 1, R9102 += 1 };
  s0 -> s0 [0, 65535] { R9145 += 1, R9146 += 1 };
  s0 -> s3 [70, 70] { R9146 += 1, R9102 += 1 };
  s0 -> s4 [70, 70] { R9146 += 1, R9102 += 1 };
  s0 -> s5 [75, 75] { R9146 += 1, R9102 += 1 };
  s0 -> s1 [76, 65535] { R9146 += 1, R9102 += 1 };
  s1 -> s1 [0, 69] { R9146 += 1, R9102 += 1 };
  s1 -> s3 [70, 70] { R9146 += 1, R9102 += 1 };
  s1 -> s4 [70, 70] { R9146 += 1, R9102 += 1 };
  s1 -> s5 [75, 75] { R9146 += 1, R9102 += 1 };
  s1 -> s1 [76, 65535] { R9146 += 1, R9102 += 1 };
  s2 -> s1 [0, 69] { R9146 += 1, R9102 += 1 };
  s2 -> s2 [0, 65535] { R9146 += 1, R9101 += 1, R9102 += 1 };
  s2 -> s3 [70, 70] { R9146 += 1, R9102 += 1 };
  s2 -> s4 [70, 70] { R9146 += 1, R9102 += 1 };
  s2 -> s5 [75, 75] { R9146 += 1, R9102 += 1 };
  s2 -> s1 [76, 65535] { R9146 += 1, R9102 += 1 };
  s4 -> s4 [0, 70] { R9146 += 1, R9102 += 1 };
  s4 -> s8 [75, 75] { R9146 += 1, R9102 += 1 };
  s4 -> s4 [76, 65535] { R9146 += 1, R9102 += 1 };
  s5 -> s5 [0, 69] { R9146 += 1, R9102 += 1 };
  s5 -> s5 [0, 65535] { R9146 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [70, 70] { R9146 += 1, R9102 += 1 };
  s5 -> s8 [70, 70] { R9146 += 1, R9102 += 1 };
  s5 -> s5 [75, 65535] { R9146 += 1, R9102 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R9146 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 70] { R9146 += 1, R9102 += 1 };
  s8 -> s8 [0, 65535] { R9146 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [75, 65535] { R9146 += 1, R9102 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 69] { R9148 += 1, R9104 += 1, R83 += 1 };
  s0 -> s2 [0, 65535] { R9148 += 1, R9103 += 1, R9104 += 1 };
  s0 -> s0 [0, 65535] { R9147 += 1, R9148 += 1 };
  s0 -> s3 [70, 70] { R9148 += 1, R9104 += 1, R83 += 1 };
  s0 -> s4 [70, 70] { R9148 += 1, R9104 += 1, R83 += 1 };
  s0 -> s1 [71, 65535] { R9148 += 1, R9104 += 1, R83 += 1 };
  s1 -> s1 [0, 69] { R9148 += 1, R9104 += 1, R83 += 1 };
  s1 -> s1 [0, 65535] { R9148 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [70, 70] { R9148 += 1, R9104 += 1, R83 += 1 };
  s1 -> s4 [70, 70] { R9148 += 1, R9104 += 1, R83 += 1 };
  s1 -> s1 [71, 65535] { R9148 += 1, R9104 += 1, R83 += 1 };
  s2 -> s1 [0, 69] { R9148 += 1, R9104 += 1, R83 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R9148 += 1, R9103 += 1, R9104 += 1 };
  s2 -> s3 [70, 70] { R9148 += 1, R9104 += 1, R83 += 1 };
  s2 -> s4 [70, 70] { R9148 += 1, R9104 += 1, R83 += 1 };
  s2 -> s1 [71, 65535] { R9148 += 1, R9104 += 1, R83 += 1 };
  s3 -> s3 [0, 65535] { R9148 += 1, R9104 += 1, R83 += 1 };
  s3 -> s6 [0, 65535] { R9148 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R9148 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9148 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 69] { R9150 += 1, R9106 += 1, R85 += 1 };
  s0 -> s2 [0, 65535] { R9150 += 1, R9105 += 1, R9106 += 1 };
  s0 -> s0 [0, 65535] { R9149 += 1, R9150 += 1 };
  s0 -> s3 [70, 70] { R9150 += 1, R9106 += 1, R85 += 1 };
  s0 -> s4 [70, 70] { R9150 += 1, R9106 += 1, R85 += 1 };
  s0 -> s1 [71, 65535] { R9150 += 1, R9106 += 1, R85 += 1 };
  s1 -> s1 [0, 69] { R9150 += 1, R9106 += 1, R85 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R9150 += 1 };
  s1 -> s3 [70, 70] { R9150 += 1, R9106 += 1, R85 += 1 };
  s1 -> s4 [70, 70] { R9150 += 1, R9106 += 1, R85 += 1 };
  s1 -> s1 [71, 65535] { R9150 += 1, R9106 += 1, R85 += 1 };
  s2 -> s1 [0, 69] { R9150 += 1, R9106 += 1, R85 += 1 };
  s2 -> s2 [0, 65535] { R9150 += 1, R9105 += 1, R9106 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [70, 70] { R9150 += 1, R9106 += 1, R85 += 1 };
  s2 -> s4 [70, 70] { R9150 += 1, R9106 += 1, R85 += 1 };
  s2 -> s1 [71, 65535] { R9150 += 1, R9106 += 1, R85 += 1 };
  s3 -> s3 [0, 65535] { R9150 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R9150 += 1 };
  s4 -> s4 [0, 65535] { R9150 += 1, R9106 += 1, R85 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9150 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 69] { R9152 += 1, R9108 += 1, R88 += 1 };
  s0 -> s2 [0, 69] { R9152 += 1, R9108 += 1, R87 += 1, R88 += 1 };
  s0 -> s0 [0, 65535] { R9151 += 1, R9152 += 1 };
  s0 -> s3 [0, 65535] { R9152 += 1, R9107 += 1, R9108 += 1 };
  s0 -> s4 [70, 70] { R9152 += 1, R9108 += 1, R88 += 1 };
  s0 -> s5 [70, 70] { R9152 += 1, R9108 += 1, R87 += 1, R88 += 1 };
  s0 -> s6 [70, 70] { R9152 += 1, R9108 += 1, R87 += 1, R88 += 1 };
  s0 -> s7 [70, 70] { R9152 += 1, R9108 += 1, R88 += 1 };
  s0 -> s1 [71, 74] { R9152 += 1, R9108 += 1, R88 += 1 };
  s0 -> s2 [71, 65535] { R9152 += 1, R9108 += 1, R87 += 1, R88 += 1 };
  s0 -> s8 [75, 75] { R9152 += 1, R9108 += 1, R88 += 1 };
  s0 -> s1 [76, 65535] { R9152 += 1, R9108 += 1, R88 += 1 };
  s1 -> s1 [0, 69] { R9152 += 1, R9108 += 1, R88 += 1 };
  s1 -> s4 [70, 70] { R9152 += 1, R9108 += 1, R88 += 1 };
  s1 -> s7 [70, 70] { R9152 += 1, R9108 += 1, R88 += 1 };
  s1 -> s1 [71, 74] { R9152 += 1, R9108 += 1, R88 += 1 };
  s1 -> s8 [75, 75] { R9152 += 1, R9108 += 1, R88 += 1 };
  s1 -> s1 [76, 65535] { R9152 += 1, R9108 += 1, R88 += 1 };
  s2 -> s1 [0, 69] { R9152 += 1, R9108 += 1, R88 += 1 };
  s2 -> s2 [0, 69] { R9152 += 1, R9108 += 1, R87 += 1, R88 += 1 };
  s2 -> s4 [70, 70] { R9152 += 1, R9108 += 1, R88 += 1 };
  s2 -> s5 [70, 70] { R9152 += 1, R9108 += 1, R87 += 1, R88 += 1 };
  s2 -> s6 [70, 70] { R9152 += 1, R9108 += 1, R87 += 1, R88 += 1 };
  s2 -> s7 [70, 70] { R9152 += 1, R9108 += 1, R88 += 1 };
  s2 -> s1 [71, 74] { R9152 += 1, R9108 += 1, R88 += 1 };
  s2 -> s2 [71, 65535] { R9152 += 1, R9108 += 1, R87 += 1, R88 += 1 };
  s2 -> s8 [75, 75] { R9152 += 1, R9108 += 1, R88 += 1 };
  s2 -> s1 [76, 65535] { R9152 += 1, R9108 += 1, R88 += 1 };
  s3 -> s1 [0, 69] { R9152 += 1, R9108 += 1, R88 += 1 };
  s3 -> s2 [0, 69] { R9152 += 1, R9108 += 1, R87 += 1, R88 += 1 };
  s3 -> s3 [0, 65535] { R9152 += 1, R9107 += 1, R9108 += 1 };
  s3 -> s4 [70, 70] { R9152 += 1, R9108 += 1, R88 += 1 };
  s3 -> s5 [70, 70] { R9152 += 1, R9108 += 1, R87 += 1, R88 += 1 };
  s3 -> s6 [70, 70] { R9152 += 1, R9108 += 1, R87 += 1, R88 += 1 };
  s3 -> s7 [70, 70] { R9152 += 1, R9108 += 1, R88 += 1 };
  s3 -> s1 [71, 74] { R9152 += 1, R9108 += 1, R88 += 1 };
  s3 -> s2 [71, 65535] { R9152 += 1, R9108 += 1, R87 += 1, R88 += 1 };
  s3 -> s8 [75, 75] { R9152 += 1, R9108 += 1, R88 += 1 };
  s3 -> s1 [76, 65535] { R9152 += 1, R9108 += 1, R88 += 1 };
  s6 -> s7 [0, 74] { R9152 += 1, R9108 += 1, R88 += 1 };
  s6 -> s6 [0, 65535] { R9152 += 1, R9108 += 1, R87 += 1, R88 += 1 };
  s6 -> s11 [75, 75] { R9152 += 1, R9108 += 1, R88 += 1 };
  s6 -> s7 [76, 65535] { R9152 += 1, R9108 += 1, R88 += 1 };
  s7 -> s7 [0, 74] { R9152 += 1, R9108 += 1, R88 += 1 };
  s7 -> s11 [75, 75] { R9152 += 1, R9108 += 1, R88 += 1 };
  s7 -> s7 [76, 65535] { R9152 += 1, R9108 += 1, R88 += 1 };
  s8 -> s8 [0, 69] { R9152 += 1, R9108 += 1, R88 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R9152 += 1 };
  s8 -> s10 [70, 70] { R9152 += 1, R9108 += 1, R88 += 1 };
  s8 -> s11 [70, 70] { R9152 += 1, R9108 += 1, R88 += 1 };
  s8 -> s8 [71, 65535] { R9152 += 1, R9108 += 1, R88 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R9152 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s12 [0, 65535] { R9152 += 1 };
  s11 -> s11 [0, 65535] { R9152 += 1, R9108 += 1, R88 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R9152 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 69] { R9154 += 1, R9110 += 1, R91 += 1, R92 += 1 };
  s0 -> s2 [0, 65535] { R9154 += 1, R9109 += 1, R9110 += 1 };
  s0 -> s0 [0, 65535] { R9153 += 1, R9154 += 1 };
  s0 -> s3 [70, 70] { R9154 += 1, R9110 += 1, R91 += 1, R92 += 1 };
  s0 -> s4 [70, 70] { R9154 += 1, R9110 += 1, R91 += 1, R92 += 1 };
  s0 -> s1 [71, 65535] { R9154 += 1, R9110 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 69] { R9154 += 1, R9110 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 65535] { R9154 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [70, 70] { R9154 += 1, R9110 += 1, R91 += 1, R92 += 1 };
  s1 -> s4 [70, 70] { R9154 += 1, R9110 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [71, 65535] { R9154 += 1, R9110 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [0, 69] { R9154 += 1, R9110 += 1, R91 += 1, R92 += 1 };
  s2 -> s2 [0, 65535] { R9154 += 1, R9109 += 1, R9110 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [70, 70] { R9154 += 1, R9110 += 1, R91 += 1, R92 += 1 };
  s2 -> s4 [70, 70] { R9154 += 1, R9110 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [71, 65535] { R9154 += 1, R9110 += 1, R91 += 1, R92 += 1 };
  s3 -> s3 [0, 65535] { R9154 += 1, R9110 += 1, R91 += 1, R92 += 1 };
  s3 -> s6 [0, 65535] { R9154 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R9154 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9154 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 69] { R9156 += 1, R9112 += 1, R6806 += 1, R6807 += 1 };
  s0 -> s2 [0, 69] { R9156 += 1, R9112 += 1, R6805 += 1, R6806 += 1 };
  s0 -> s0 [0, 65535] { R9155 += 1, R9156 += 1 };
  s0 -> s3 [0, 65535] { R9156 += 1, R9111 += 1, R9112 += 1 };
  s0 -> s4 [70, 70] { R9156 += 1, R9112 += 1, R6805 += 1, R6806 += 1 };
  s0 -> s5 [70, 70] { R9156 += 1, R9112 += 1, R6806 += 1, R6807 += 1 };
  s0 -> s6 [70, 70] { R9156 += 1, R9112 += 1, R6805 += 1, R6806 += 1 };
  s0 -> s7 [70, 70] { R9156 += 1, R9112 += 1, R6806 += 1, R6807 += 1 };
  s0 -> s1 [71, 65535] { R9156 += 1, R9112 += 1, R6806 += 1, R6807 += 1 };
  s0 -> s2 [71, 65535] { R9156 += 1, R9112 += 1, R6805 += 1, R6806 += 1 };
  s1 -> s1 [0, 69] { R9156 += 1, R9112 += 1, R6806 += 1, R6807 += 1 };
  s1 -> s1 [0, 65535] { R9156 += 1 };
  s1 -> s9 [0, 65535];
  s1 -> s5 [70, 70] { R9156 += 1, R9112 += 1, R6806 += 1, R6807 += 1 };
  s1 -> s7 [70, 70] { R9156 += 1, R9112 += 1, R6806 += 1, R6807 += 1 };
  s1 -> s1 [71, 65535] { R9156 += 1, R9112 += 1, R6806 += 1, R6807 += 1 };
  s2 -> s1 [0, 69] { R9156 += 1, R9112 += 1, R6806 += 1, R6807 += 1 };
  s2 -> s2 [0, 69] { R9156 += 1, R9112 += 1, R6805 += 1, R6806 += 1 };
  s2 -> s4 [70, 70] { R9156 += 1, R9112 += 1, R6805 += 1, R6806 += 1 };
  s2 -> s5 [70, 70] { R9156 += 1, R9112 += 1, R6806 += 1, R6807 += 1 };
  s2 -> s6 [70, 70] { R9156 += 1, R9112 += 1, R6805 += 1, R6806 += 1 };
  s2 -> s7 [70, 70] { R9156 += 1, R9112 += 1, R6806 += 1, R6807 += 1 };
  s2 -> s1 [71, 65535] { R9156 += 1, R9112 += 1, R6806 += 1, R6807 += 1 };
  s2 -> s2 [71, 65535] { R9156 += 1, R9112 += 1, R6805 += 1, R6806 += 1 };
  s3 -> s1 [0, 69] { R9156 += 1, R9112 += 1, R6806 += 1, R6807 += 1 };
  s3 -> s2 [0, 69] { R9156 += 1, R9112 += 1, R6805 += 1, R6806 += 1 };
  s3 -> s3 [0, 65535] { R9156 += 1, R9111 += 1, R9112 += 1 };
  s3 -> s4 [70, 70] { R9156 += 1, R9112 += 1, R6805 += 1, R6806 += 1 };
  s3 -> s5 [70, 70] { R9156 += 1, R9112 += 1, R6806 += 1, R6807 += 1 };
  s3 -> s6 [70, 70] { R9156 += 1, R9112 += 1, R6805 += 1, R6806 += 1 };
  s3 -> s7 [70, 70] { R9156 += 1, R9112 += 1, R6806 += 1, R6807 += 1 };
  s3 -> s1 [71, 65535] { R9156 += 1, R9112 += 1, R6806 += 1, R6807 += 1 };
  s3 -> s2 [71, 65535] { R9156 += 1, R9112 += 1, R6805 += 1, R6806 += 1 };
  s5 -> s5 [0, 65535] { R9156 += 1 };
  s5 -> s9 [0, 65535];
  s6 -> s6 [0, 65535] { R9156 += 1, R9112 += 1, R6805 += 1, R6806 += 1 };
  s6 -> s7 [0, 65535] { R9156 += 1, R9112 += 1, R6806 += 1, R6807 += 1 };
  s7 -> s7 [0, 65535] { R9156 += 1, R9112 += 1, R6806 += 1, R6807 += 1 };
  s7 -> s8 [0, 65535] { R9156 += 1 };
  s7 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R9156 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s8, s5, s9, s1, s7;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 69] { R9158 += 1, R9114 += 1, R9044 += 1, R9045 += 1, R9046 += 1 };
  s0 -> s2 [0, 69] { R9158 += 1, R9114 += 1, R9044 += 1, R9046 += 1 };
  s0 -> s3 [0, 69] { R9158 += 1, R9114 += 1, R9043 += 1, R9044 += 1 };
  s0 -> s0 [0, 65535] { R9157 += 1, R9158 += 1 };
  s0 -> s4 [0, 65535] { R9158 += 1, R9113 += 1, R9114 += 1 };
  s0 -> s5 [70, 70] { R9158 += 1, R9114 += 1, R9043 += 1, R9044 += 1 };
  s0 -> s6 [70, 70] { R9158 += 1, R9114 += 1, R9044 += 1, R9046 += 1 };
  s0 -> s7 [70, 70] { R9158 += 1, R9114 += 1, R9044 += 1, R9045 += 1, R9046 += 1 };
  s0 -> s8 [70, 70] { R9158 += 1, R9114 += 1, R9044 += 1, R9045 += 1, R9046 += 1 };
  s0 -> s9 [70, 70] { R9158 += 1, R9114 += 1, R9043 += 1, R9044 += 1 };
  s0 -> s10 [70, 70] { R9158 += 1, R9114 += 1, R9044 += 1, R9046 += 1 };
  s0 -> s2 [71, 74] { R9158 += 1, R9114 += 1, R9044 += 1, R9046 += 1 };
  s0 -> s1 [71, 65535] { R9158 += 1, R9114 += 1, R9044 += 1, R9045 += 1, R9046 += 1 };
  s0 -> s3 [71, 65535] { R9158 += 1, R9114 += 1, R9043 += 1, R9044 += 1 };
  s0 -> s2 [76, 65535] { R9158 += 1, R9114 += 1, R9044 += 1, R9046 += 1 };
  s1 -> s1 [0, 69] { R9158 += 1, R9114 += 1, R9044 += 1, R9045 += 1, R9046 += 1 };
  s1 -> s2 [0, 69] { R9158 += 1, R9114 += 1, R9044 += 1, R9046 += 1 };
  s1 -> s6 [70, 70] { R9158 += 1, R9114 += 1, R9044 += 1, R9046 += 1 };
  s1 -> s7 [70, 70] { R9158 += 1, R9114 += 1, R9044 += 1, R9045 += 1, R9046 += 1 };
  s1 -> s8 [70, 70] { R9158 += 1, R9114 += 1, R9044 += 1, R9045 += 1, R9046 += 1 };
  s1 -> s10 [70, 70] { R9158 += 1, R9114 += 1, R9044 += 1, R9046 += 1 };
  s1 -> s2 [71, 74] { R9158 += 1, R9114 += 1, R9044 += 1, R9046 += 1 };
  s1 -> s1 [71, 65535] { R9158 += 1, R9114 += 1, R9044 += 1, R9045 += 1, R9046 += 1 };
  s1 -> s2 [76, 65535] { R9158 += 1, R9114 += 1, R9044 += 1, R9046 += 1 };
  s2 -> s2 [0, 69] { R9158 += 1, R9114 += 1, R9044 += 1, R9046 += 1 };
  s2 -> s11 [0, 65535];
  s2 -> s2 [0, 65535] { R9158 += 1 };
  s2 -> s6 [70, 70] { R9158 += 1, R9114 += 1, R9044 += 1, R9046 += 1 };
  s2 -> s10 [70, 70] { R9158 += 1, R9114 += 1, R9044 += 1, R9046 += 1 };
  s2 -> s2 [71, 74] { R9158 += 1, R9114 += 1, R9044 += 1, R9046 += 1 };
  s2 -> s2 [76, 65535] { R9158 += 1, R9114 += 1, R9044 += 1, R9046 += 1 };
  s3 -> s1 [0, 69] { R9158 += 1, R9114 += 1, R9044 += 1, R9045 += 1, R9046 += 1 };
  s3 -> s2 [0, 69] { R9158 += 1, R9114 += 1, R9044 += 1, R9046 += 1 };
  s3 -> s3 [0, 69] { R9158 += 1, R9114 += 1, R9043 += 1, R9044 += 1 };
  s3 -> s5 [70, 70] { R9158 += 1, R9114 += 1, R9043 += 1, R9044 += 1 };
  s3 -> s6 [70, 70] { R9158 += 1, R9114 += 1, R9044 += 1, R9046 += 1 };
  s3 -> s7 [70, 70] { R9158 += 1, R9114 += 1, R9044 += 1, R9045 += 1, R9046 += 1 };
  s3 -> s8 [70, 70] { R9158 += 1, R9114 += 1, R9044 += 1, R9045 += 1, R9046 += 1 };
  s3 -> s9 [70, 70] { R9158 += 1, R9114 += 1, R9043 += 1, R9044 += 1 };
  s3 -> s10 [70, 70] { R9158 += 1, R9114 += 1, R9044 += 1, R9046 += 1 };
  s3 -> s2 [71, 74] { R9158 += 1, R9114 += 1, R9044 += 1, R9046 += 1 };
  s3 -> s1 [71, 65535] { R9158 += 1, R9114 += 1, R9044 += 1, R9045 += 1, R9046 += 1 };
  s3 -> s3 [71, 65535] { R9158 += 1, R9114 += 1, R9043 += 1, R9044 += 1 };
  s3 -> s2 [76, 65535] { R9158 += 1, R9114 += 1, R9044 += 1, R9046 += 1 };
  s4 -> s1 [0, 69] { R9158 += 1, R9114 += 1, R9044 += 1, R9045 += 1, R9046 += 1 };
  s4 -> s2 [0, 69] { R9158 += 1, R9114 += 1, R9044 += 1, R9046 += 1 };
  s4 -> s3 [0, 69] { R9158 += 1, R9114 += 1, R9043 += 1, R9044 += 1 };
  s4 -> s4 [0, 65535] { R9158 += 1, R9113 += 1, R9114 += 1 };
  s4 -> s5 [70, 70] { R9158 += 1, R9114 += 1, R9043 += 1, R9044 += 1 };
  s4 -> s6 [70, 70] { R9158 += 1, R9114 += 1, R9044 += 1, R9046 += 1 };
  s4 -> s7 [70, 70] { R9158 += 1, R9114 += 1, R9044 += 1, R9045 += 1, R9046 += 1 };
  s4 -> s8 [70, 70] { R9158 += 1, R9114 += 1, R9044 += 1, R9045 += 1, R9046 += 1 };
  s4 -> s9 [70, 70] { R9158 += 1, R9114 += 1, R9043 += 1, R9044 += 1 };
  s4 -> s10 [70, 70] { R9158 += 1, R9114 += 1, R9044 += 1, R9046 += 1 };
  s4 -> s2 [71, 74] { R9158 += 1, R9114 += 1, R9044 += 1, R9046 += 1 };
  s4 -> s1 [71, 65535] { R9158 += 1, R9114 += 1, R9044 += 1, R9045 += 1, R9046 += 1 };
  s4 -> s3 [71, 65535] { R9158 += 1, R9114 += 1, R9043 += 1, R9044 += 1 };
  s4 -> s2 [76, 65535] { R9158 += 1, R9114 += 1, R9044 += 1, R9046 += 1 };
  s5 -> s6 [0, 74] { R9158 += 1, R9114 += 1, R9044 += 1, R9046 += 1 };
  s5 -> s5 [0, 65535] { R9158 += 1, R9114 += 1, R9043 += 1, R9044 += 1 };
  s5 -> s8 [0, 65535] { R9158 += 1, R9114 += 1, R9044 += 1, R9045 += 1, R9046 += 1 };
  s5 -> s6 [76, 65535] { R9158 += 1, R9114 += 1, R9044 += 1, R9046 += 1 };
  s6 -> s6 [0, 74] { R9158 += 1, R9114 += 1, R9044 += 1, R9046 += 1 };
  s6 -> s11 [0, 65535];
  s6 -> s6 [0, 65535] { R9158 += 1 };
  s6 -> s6 [76, 65535] { R9158 += 1, R9114 += 1, R9044 += 1, R9046 += 1 };
  s8 -> s6 [0, 74] { R9158 += 1, R9114 += 1, R9044 += 1, R9046 += 1 };
  s8 -> s8 [0, 65535] { R9158 += 1, R9114 += 1, R9044 += 1, R9045 += 1, R9046 += 1 };
  s8 -> s6 [76, 65535] { R9158 += 1, R9114 += 1, R9044 += 1, R9046 += 1 };
  s10 -> s11 [0, 65535];
  s10 -> s10 [0, 65535] { R9158 += 1 };
  s11 -> s11 [0, 65535];
  accepting s2, s6, s10, s11;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 69] { R9160 += 1, R9116 += 1, R9051 += 1, R9052 += 1 };
  s0 -> s2 [0, 69] { R9160 += 1, R9116 += 1, R9052 += 1, R9054 += 1, R9055 += 1 };
  s0 -> s3 [0, 69] { R9160 += 1, R9116 += 1, R9052 += 1, R9053 += 1, R9054 += 1 };
  s0 -> s0 [0, 65535] { R9159 += 1, R9160 += 1 };
  s0 -> s4 [0, 65535] { R9160 += 1, R9115 += 1, R9116 += 1 };
  s0 -> s5 [70, 70] { R9160 += 1, R9116 += 1, R9052 += 1, R9054 += 1, R9055 += 1 };
  s0 -> s6 [70, 70] { R9160 += 1, R9116 += 1, R9052 += 1, R9053 += 1, R9054 += 1 };
  s0 -> s7 [70, 70] { R9160 += 1, R9116 += 1, R9051 += 1, R9052 += 1 };
  s0 -> s8 [70, 70] { R9160 += 1, R9116 += 1, R9052 += 1, R9054 += 1, R9055 += 1 };
  s0 -> s9 [70, 70] { R9160 += 1, R9116 += 1, R9051 += 1, R9052 += 1 };
  s0 -> s10 [70, 70] { R9160 += 1, R9116 += 1, R9052 += 1, R9053 += 1, R9054 += 1 };
  s0 -> s1 [71, 65535] { R9160 += 1, R9116 += 1, R9051 += 1, R9052 += 1 };
  s0 -> s2 [71, 65535] { R9160 += 1, R9116 += 1, R9052 += 1, R9054 += 1, R9055 += 1 };
  s0 -> s3 [71, 65535] { R9160 += 1, R9116 += 1, R9052 += 1, R9053 += 1, R9054 += 1 };
  s1 -> s1 [0, 69] { R9160 += 1, R9116 += 1, R9051 += 1, R9052 += 1 };
  s1 -> s2 [0, 69] { R9160 += 1, R9116 += 1, R9052 += 1, R9054 += 1, R9055 += 1 };
  s1 -> s3 [0, 69] { R9160 += 1, R9116 += 1, R9052 += 1, R9053 += 1, R9054 += 1 };
  s1 -> s5 [70, 70] { R9160 += 1, R9116 += 1, R9052 += 1, R9054 += 1, R9055 += 1 };
  s1 -> s6 [70, 70] { R9160 += 1, R9116 += 1, R9052 += 1, R9053 += 1, R9054 += 1 };
  s1 -> s7 [70, 70] { R9160 += 1, R9116 += 1, R9051 += 1, R9052 += 1 };
  s1 -> s8 [70, 70] { R9160 += 1, R9116 += 1, R9052 += 1, R9054 += 1, R9055 += 1 };
  s1 -> s9 [70, 70] { R9160 += 1, R9116 += 1, R9051 += 1, R9052 += 1 };
  s1 -> s10 [70, 70] { R9160 += 1, R9116 += 1, R9052 += 1, R9053 += 1, R9054 += 1 };
  s1 -> s1 [71, 65535] { R9160 += 1, R9116 += 1, R9051 += 1, R9052 += 1 };
  s1 -> s2 [71, 65535] { R9160 += 1, R9116 += 1, R9052 += 1, R9054 += 1, R9055 += 1 };
  s1 -> s3 [71, 65535] { R9160 += 1, R9116 += 1, R9052 += 1, R9053 += 1, R9054 += 1 };
  s2 -> s2 [0, 69] { R9160 += 1, R9116 += 1, R9052 += 1, R9054 += 1, R9055 += 1 };
  s2 -> s14 [0, 69] { R9160 += 1, R9116 += 1, R9052 += 1 };
  s2 -> s15 [70, 70] { R9160 += 1, R9116 += 1, R9052 += 1 };
  s2 -> s11 [70, 70] { R9160 += 1, R9116 += 1, R9052 += 1 };
  s2 -> s5 [70, 70] { R9160 += 1, R9116 += 1, R9052 += 1, R9054 += 1, R9055 += 1 };
  s2 -> s8 [70, 70] { R9160 += 1, R9116 += 1, R9052 += 1, R9054 += 1, R9055 += 1 };
  s2 -> s2 [71, 65535] { R9160 += 1, R9116 += 1, R9052 += 1, R9054 += 1, R9055 += 1 };
  s2 -> s14 [71, 65535] { R9160 += 1, R9116 += 1, R9052 += 1 };
  s3 -> s2 [0, 69] { R9160 += 1, R9116 += 1, R9052 += 1, R9054 += 1, R9055 += 1 };
  s3 -> s3 [0, 69] { R9160 += 1, R9116 += 1, R9052 += 1, R9053 += 1, R9054 += 1 };
  s3 -> s6 [70, 70] { R9160 += 1, R9116 += 1, R9052 += 1, R9053 += 1, R9054 += 1 };
  s3 -> s5 [70, 70] { R9160 += 1, R9116 += 1, R9052 += 1, R9054 += 1, R9055 += 1 };
  s3 -> s8 [70, 70] { R9160 += 1, R9116 += 1, R9052 += 1, R9054 += 1, R9055 += 1 };
  s3 -> s10 [70, 70] { R9160 += 1, R9116 += 1, R9052 += 1, R9053 += 1, R9054 += 1 };
  s3 -> s2 [71, 65535] { R9160 += 1, R9116 += 1, R9052 += 1, R9054 += 1, R9055 += 1 };
  s3 -> s3 [71, 65535] { R9160 += 1, R9116 += 1, R9052 += 1, R9053 += 1, R9054 += 1 };
  s4 -> s1 [0, 69] { R9160 += 1, R9116 += 1, R9051 += 1, R9052 += 1 };
  s4 -> s2 [0, 69] { R9160 += 1, R9116 += 1, R9052 += 1, R9054 += 1, R9055 += 1 };
  s4 -> s3 [0, 69] { R9160 += 1, R9116 += 1, R9052 += 1, R9053 += 1, R9054 += 1 };
  s4 -> s4 [0, 65535] { R9160 += 1, R9115 += 1, R9116 += 1 };
  s4 -> s5 [70, 70] { R9160 += 1, R9116 += 1, R9052 += 1, R9054 += 1, R9055 += 1 };
  s4 -> s6 [70, 70] { R9160 += 1, R9116 += 1, R9052 += 1, R9053 += 1, R9054 += 1 };
  s4 -> s7 [70, 70] { R9160 += 1, R9116 += 1, R9051 += 1, R9052 += 1 };
  s4 -> s8 [70, 70] { R9160 += 1, R9116 += 1, R9052 += 1, R9054 += 1, R9055 += 1 };
  s4 -> s9 [70, 70] { R9160 += 1, R9116 += 1, R9051 += 1, R9052 += 1 };
  s4 -> s10 [70, 70] { R9160 += 1, R9116 += 1, R9052 += 1, R9053 += 1, R9054 += 1 };
  s4 -> s1 [71, 65535] { R9160 += 1, R9116 += 1, R9051 += 1, R9052 += 1 };
  s4 -> s2 [71, 65535] { R9160 += 1, R9116 += 1, R9052 += 1, R9054 += 1, R9055 += 1 };
  s4 -> s3 [71, 65535] { R9160 += 1, R9116 += 1, R9052 += 1, R9053 += 1, R9054 += 1 };
  s6 -> s6 [0, 65535] { R9160 += 1, R9116 += 1, R9052 += 1, R9053 += 1, R9054 += 1 };
  s6 -> s8 [0, 65535] { R9160 += 1, R9116 += 1, R9052 += 1, R9054 += 1, R9055 += 1 };
  s8 -> s11 [0, 65535] { R9160 += 1, R9116 += 1, R9052 += 1 };
  s8 -> s8 [0, 65535] { R9160 += 1, R9116 += 1, R9052 += 1, R9054 += 1, R9055 += 1 };
  s9 -> s6 [0, 65535] { R9160 += 1, R9116 += 1, R9052 += 1, R9053 += 1, R9054 += 1 };
  s9 -> s8 [0, 65535] { R9160 += 1, R9116 += 1, R9052 += 1, R9054 += 1, R9055 += 1 };
  s9 -> s9 [0, 65535] { R9160 += 1, R9116 += 1, R9051 += 1, R9052 += 1 };
  s11 -> s12 [0, 65535];
  s11 -> s13 [0, 65535] { R9160 += 1 };
  s11 -> s11 [0, 65535] { R9160 += 1, R9116 += 1, R9052 += 1 };
  s12 -> s12 [0, 65535];
  s13 -> s12 [0, 65535];
  s13 -> s13 [0, 65535] { R9160 += 1 };
  s14 -> s14 [0, 69] { R9160 += 1, R9116 += 1, R9052 += 1 };
  s14 -> s12 [0, 65535];
  s14 -> s14 [0, 65535] { R9160 += 1 };
  s14 -> s15 [70, 70] { R9160 += 1, R9116 += 1, R9052 += 1 };
  s14 -> s11 [70, 70] { R9160 += 1, R9116 += 1, R9052 += 1 };
  s14 -> s14 [71, 65535] { R9160 += 1, R9116 += 1, R9052 += 1 };
  s15 -> s12 [0, 65535];
  s15 -> s15 [0, 65535] { R9160 += 1 };
  accepting s12, s13, s14, s15, s11;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [102, 102];
  accepting s1;
};
};
constraint R2 = R9078 && R3 = R9160 && R23 - R9160 = -1 && R24 = R9160 && R25 - R9160 = -1 && R26 = R9160 && R27 = 0 && R28 = 1 && R29 = 0 && R30 = 1 && R45 + R84 + R83 + -1*R9048 + -1*R9044 - R66 = 0 && R49 + R89 + R87 = 0 && R50 + R90 + R88 + -1*R9048 + -1*R9044 - R66 = 0 && R55 + R96 + R93 + -1*R9050 + -1*R9046 - R68 = 0 && R65 + R9047 + R9043 = 0 && R67 + R9049 + R9045 = 0 && R9077 = 0 && R9101 = 0 && R9102 = 0 && R9107 = 0 && R9108 = 0 && R9111 = 0 && R9112 = 0 && R9113 = 0 && R9114 = 0 && R9115 = 0 && R9116 = 0 && R9117 = 0 && R9118 = R9160 && R9119 = 0 && R9120 = R9160 && R9121 = 0 && R9122 = R9160 && R9123 = 0 && R9124 = R9160 && R9125 = 0 && R9126 = R9160 && R9127 = 0 && R9128 = R9160 && R9129 = 0 && R9130 = R9160 && R9131 = 0 && R9132 = R9160 && R9133 = 0 && R9134 = R9160 && R9135 = 0 && R9136 = R9160 && R9137 = 0 && R9138 = R9160 && R9139 = 0 && R9140 = R9160 && R9141 = 0 && R9142 = R9160 && R9143 = 0 && R9144 = R9160 && R9145 = 0 && R9146 = R9160 && R9147 = 0 && R9148 = R9160 && R9149 = 0 && R9150 = R9160 && R9151 = 0 && R9152 = R9160 && R9153 = 0 && R9154 = R9160 && R9155 = 0 && R9156 = R9160 && R9157 = 0 && R9158 = R9160 && R9159 = 0 && R12 < 1 && R15 < 1 && R16 < 1 && R47 + R86 + R85 < 1 && R61 + R6810 + R6807 < 1 && -1*R9048 + -1*R9044 - R66 < 1 && -1*R9050 + -1*R9046 - R68 < 1 && -1 < R9078 && 0 < R9160 && (R53 + R94 + R91 != 0 || R54 + R95 + R92 + -1*R9048 + -1*R9044 - R66 = 0 || R66 + R9048 + R9044 < 1) && (R59 + R6808 + R6805 != 0 || R60 + R6809 + R6806 + -1*R9048 + -1*R9044 - R66 = 0 || R66 + R9048 + R9044 < 1) && (R66 + R9048 + R9044 != 0 || ((R53 + R94 + R91 != 0 || R54 + R95 + R92 = 0 || R68 + R9050 + R9046 < 1) && (R53 + R94 + R91 = 0 || R68 + R9050 + R9046 < 1))) && (R66 + R9048 + R9044 != 0 || ((R59 + R6808 + R6805 != 0 || R60 + R6809 + R6806 = 0 || R68 + R9050 + R9046 < 1) && (R59 + R6808 + R6805 = 0 || R68 + R9050 + R9046 < 1))) && (R66 + R9048 + R9044 != 0 || ((R73 + R9056 + R9051 != 0 || R74 + R9057 + R9052 = 0 || R68 + R9050 + R9046 < 1) && (R73 + R9056 + R9051 = 0 || R68 + R9050 + R9046 < 1))) && (R68 + R9050 + R9046 != 0 || R77 + R9060 + R9055 = 0 || (R75 + R9058 + R9053 = 0 && R76 + R9059 + R9054 = 0)) && (R73 + R9056 + R9051 != 0 || R66 + R9048 + R9044 + -1*R9057 + -1*R9052 - R74 = 0 || R66 + R9048 + R9044 < 1) && (R75 + R9058 + R9053 != 0 || R68 + R9050 + R9046 + -1*R9059 + -1*R9054 - R76 = 0 || R68 + R9050 + R9046 < 1) && (R9061 != 0 || R9062 = R9078 || (R20 = 0 && R9078 = 0)) && (R9063 != 0 || R9064 = R9078 || (R20 = 0 && R9078 = 0)) && (R9065 != 0 || R9066 = R9078 || (R20 = 0 && R9078 = 0)) && (R9067 != 0 || R9068 = R9078 || (R20 = 0 && R9078 = 0)) && (R9069 != 0 || R9070 = R9078 || (R20 = 0 && R9078 = 0)) && (R9071 != 0 || R9072 = R9078 || (R20 = 0 && R9078 = 0)) && (R9073 != 0 || R9074 = R9078 || (R20 = 0 && R9078 = 0)) && (R9075 != 0 || R9076 = R9078 || (R20 = 0 && R9078 = 0)) && (R9079 != 0 || R9078 = R9080 || (R20 = 0 && R9078 = 0)) && (R21 = 0 || (R9099 = 0 && R9100 = 0)) && (R21 = 0 || (R9103 = 0 && R9104 = 0)) && (R21 = 0 || (R9105 = 0 && R9106 = 0)) && (R21 = 0 || (R9109 = 0 && R9110 = 0)) && (R22 = 0 || (R9081 = 0 && R9082 = 0)) && (R22 = 0 || (R9083 = 0 && R9084 = 0)) && (R22 = 0 || (R9085 = 0 && R9086 = 0)) && (R22 = 0 || (R9087 = 0 && R9088 = 0)) && (R22 = 0 || (R9089 = 0 && R9090 = 0)) && (R22 = 0 || (R9091 = 0 && R9092 = 0)) && (R22 = 0 || (R9093 = 0 && R9094 = 0)) && (R22 = 0 || (R9095 = 0 && R9096 = 0)) && (R22 = 0 || (R9097 = 0 && R9098 = 0)) && (R53 + R94 + R91 = 0 || R66 + R9048 + R9044 < 1) && (R59 + R6808 + R6805 = 0 || R66 + R9048 + R9044 < 1) && (R73 + R9056 + R9051 = 0 || R66 + R9048 + R9044 < 1) && (R75 + R9058 + R9053 = 0 || R68 + R9050 + R9046 < 1) && (R9061 = 0 || (R20 = 0 && R9078 = 0)) && (R9063 = 0 || (R20 = 0 && R9078 = 0)) && (R9065 = 0 || (R20 = 0 && R9078 = 0)) && (R9067 = 0 || (R20 = 0 && R9078 = 0)) && (R9069 = 0 || (R20 = 0 && R9078 = 0)) && (R9071 = 0 || (R20 = 0 && R9078 = 0)) && (R9073 = 0 || (R20 = 0 && R9078 = 0)) && (R9075 = 0 || (R20 = 0 && R9078 = 0)) && (R9079 = 0 || (R20 = 0 && R9078 = 0));
// End of Parikh automata intersection problem
