// Parikh automata intersection problem, generated by OSTRICH+
counter int R10159, R10160, R10161, R10162, R10163, R10164, R10165, R10166, R10167, R10168, R10169, R10170, R10171, R10172, R10613, R10614, R10615, R10616, R10617, R10618, R10619, R10620, R10621, R10622, R10623, R10624, R10625, R10626, R10627, R10628, R10629, R10630, R10631, R10632, R10633, R10634, R10635, R10636, R10637, R10638, R10639, R10640, R10641, R10642, R10643, R10644, R10645, R10646, R10647, R10648, R10649, R10650, R10651, R10652, R10653, R10654, R10655, R10656, R10657, R10658, R10659, R10660, R10661, R10662, R10663, R10664, R10665, R10666, R10667, R10668, R10669, R10670, R10671, R10672, R10673, R10674, R10675, R10676, R10677, R10678, R10679, R10680, R10681, R10682, R10683, R10684, R10685, R10686, R10687, R10688, R10689, R10690, R10691, R10692, R10693, R10694, R10695, R10696, R10697, R10698, R10699, R10700, R10701, R10702, R10703, R10704, R10705, R10706, R10707, R10708, R10709, R10710, R10711, R10712, R10713, R10714, R10715, R10716, R10717, R10718, R10719, R10720, R10721, R10722, R12, R15, R16, R2, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R4, R45, R47, R49, R5, R50, R53, R54, R55, R59, R60, R61, R65, R66, R67, R68, R73, R74, R75, R76, R77, R83, R84, R85, R86, R87, R88, R89, R90, R91, R92, R93, R94, R95, R96;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [70, 70];
  s0 -> s0 [71, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [70, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R15 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 69];
  s0 -> s0 [0, 65535] { R16 += 1 };
  s0 -> s2 [70, 70];
  s0 -> s1 [71, 65535];
  s1 -> s1 [0, 69];
  s1 -> s2 [70, 70];
  s1 -> s1 [71, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R24 += 1 };
  s0 -> s0 [0, 65535] { R23 += 1, R24 += 1 };
  s0 -> s2 [9, 13] { R24 += 1 };
  s0 -> s1 [14, 31] { R24 += 1 };
  s0 -> s2 [32, 32] { R24 += 1 };
  s0 -> s1 [33, 65535] { R24 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R24 += 1 };
  s2 -> s1 [0, 65535] { R24 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R25 += 1, R26 += 1 };
  s1 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R28 += 1 };
  s0 -> s0 [0, 65535] { R27 += 1, R28 += 1 };
  s0 -> s2 [9, 13] { R28 += 1 };
  s0 -> s1 [14, 31] { R28 += 1 };
  s0 -> s2 [32, 32] { R28 += 1 };
  s0 -> s1 [33, 65535] { R28 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R28 += 1 };
  s2 -> s1 [0, 65535] { R28 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R29 += 1, R30 += 1 };
  s1 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R10644 += 1, R22 += 1 };
  s0 -> s0 [0, 65535] { R10643 += 1, R10644 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R10644 += 1, R22 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 69] { R10646 += 1 };
  s0 -> s0 [0, 65535] { R10645 += 1, R10646 += 1 };
  s0 -> s2 [70, 70] { R10646 += 1 };
  s0 -> s3 [70, 70] { R10646 += 1 };
  s0 -> s1 [76, 65535] { R10646 += 1 };
  s1 -> s1 [0, 69] { R10646 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R10646 += 1 };
  s1 -> s3 [70, 70] { R10646 += 1 };
  s1 -> s1 [76, 65535] { R10646 += 1 };
  s2 -> s2 [0, 70] { R10646 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [76, 65535] { R10646 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 69] { R10648 += 1, R45 += 1 };
  s0 -> s0 [0, 65535] { R10647 += 1, R10648 += 1 };
  s0 -> s2 [70, 70] { R10648 += 1, R45 += 1 };
  s0 -> s3 [70, 70] { R10648 += 1, R45 += 1 };
  s0 -> s1 [71, 65535] { R10648 += 1, R45 += 1 };
  s1 -> s1 [0, 69] { R10648 += 1, R45 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R10648 += 1, R45 += 1 };
  s1 -> s3 [70, 70] { R10648 += 1, R45 += 1 };
  s1 -> s1 [71, 65535] { R10648 += 1, R45 += 1 };
  s2 -> s2 [0, 65535] { R10648 += 1, R45 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 69] { R10650 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R10649 += 1, R10650 += 1 };
  s0 -> s2 [70, 70] { R10650 += 1, R47 += 1 };
  s0 -> s3 [70, 70] { R10650 += 1, R47 += 1 };
  s0 -> s1 [71, 65535] { R10650 += 1, R47 += 1 };
  s1 -> s1 [0, 69] { R10650 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R10650 += 1, R47 += 1 };
  s1 -> s3 [70, 70] { R10650 += 1, R47 += 1 };
  s1 -> s1 [71, 65535] { R10650 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10650 += 1, R47 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 69] { R10652 += 1, R49 += 1, R50 += 1 };
  s0 -> s0 [0, 65535] { R10651 += 1, R10652 += 1 };
  s0 -> s2 [70, 70] { R10652 += 1, R49 += 1, R50 += 1 };
  s0 -> s3 [70, 70] { R10652 += 1, R49 += 1, R50 += 1 };
  s0 -> s1 [71, 65535] { R10652 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 69] { R10652 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R10652 += 1, R49 += 1, R50 += 1 };
  s1 -> s3 [70, 70] { R10652 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [71, 65535] { R10652 += 1, R49 += 1, R50 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10652 += 1, R49 += 1, R50 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 69] { R10654 += 1, R53 += 1, R54 += 1 };
  s0 -> s0 [0, 65535] { R10653 += 1, R10654 += 1 };
  s0 -> s2 [70, 70] { R10654 += 1, R53 += 1, R54 += 1 };
  s0 -> s3 [70, 70] { R10654 += 1, R53 += 1, R54 += 1 };
  s0 -> s1 [71, 65535] { R10654 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 69] { R10654 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R10654 += 1, R53 += 1, R54 += 1 };
  s1 -> s3 [70, 70] { R10654 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [71, 65535] { R10654 += 1, R53 += 1, R54 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10654 += 1, R53 += 1, R54 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 69] { R10656 += 1, R59 += 1, R60 += 1 };
  s0 -> s0 [0, 65535] { R10655 += 1, R10656 += 1 };
  s0 -> s2 [70, 70] { R10656 += 1, R59 += 1, R60 += 1 };
  s0 -> s3 [70, 70] { R10656 += 1, R59 += 1, R60 += 1 };
  s0 -> s1 [71, 65535] { R10656 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 69] { R10656 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R10656 += 1, R59 += 1, R60 += 1 };
  s1 -> s3 [70, 70] { R10656 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [71, 65535] { R10656 += 1, R59 += 1, R60 += 1 };
  s2 -> s2 [0, 65535] { R10656 += 1, R59 += 1, R60 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 69] { R10658 += 1, R65 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R10657 += 1, R10658 += 1 };
  s0 -> s2 [70, 70] { R10658 += 1, R65 += 1, R66 += 1 };
  s0 -> s3 [70, 70] { R10658 += 1, R65 += 1, R66 += 1 };
  s0 -> s1 [71, 65535] { R10658 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 69] { R10658 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R10658 += 1, R65 += 1, R66 += 1 };
  s1 -> s3 [70, 70] { R10658 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [71, 65535] { R10658 += 1, R65 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R10658 += 1, R65 += 1, R66 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 69] { R10660 += 1, R73 += 1, R74 += 1 };
  s0 -> s0 [0, 65535] { R10659 += 1, R10660 += 1 };
  s0 -> s2 [70, 70] { R10660 += 1, R73 += 1, R74 += 1 };
  s0 -> s3 [70, 70] { R10660 += 1, R73 += 1, R74 += 1 };
  s0 -> s1 [71, 65535] { R10660 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 69] { R10660 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R10660 += 1, R73 += 1, R74 += 1 };
  s1 -> s3 [70, 70] { R10660 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [71, 65535] { R10660 += 1, R73 += 1, R74 += 1 };
  s2 -> s2 [0, 65535] { R10660 += 1, R73 += 1, R74 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 69] { R10680 += 1 };
  s0 -> s0 [0, 65535] { R10679 += 1, R10680 += 1 };
  s0 -> s2 [70, 70] { R10680 += 1 };
  s0 -> s1 [71, 65535] { R10680 += 1 };
  s1 -> s1 [0, 69] { R10680 += 1 };
  s1 -> s2 [70, 70] { R10680 += 1 };
  s1 -> s1 [71, 65535] { R10680 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10680 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R10682 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R10681 += 1, R10682 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R10682 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 69] { R10684 += 1 };
  s0 -> s0 [0, 65535] { R10683 += 1, R10684 += 1 };
  s0 -> s2 [0, 65535] { R10684 += 1, R12 += 1 };
  s0 -> s3 [70, 70] { R10684 += 1 };
  s0 -> s1 [71, 65535] { R10684 += 1 };
  s1 -> s1 [0, 69] { R10684 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [70, 70] { R10684 += 1 };
  s1 -> s1 [71, 65535] { R10684 += 1 };
  s2 -> s1 [0, 69] { R10684 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10684 += 1, R12 += 1 };
  s2 -> s3 [70, 70] { R10684 += 1 };
  s2 -> s1 [71, 65535] { R10684 += 1 };
  s3 -> s3 [0, 65535] { R10684 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 69] { R10686 += 1, R10624 += 1 };
  s0 -> s2 [0, 65535] { R10686 += 1, R10623 += 1, R10624 += 1 };
  s0 -> s0 [0, 65535] { R10685 += 1, R10686 += 1 };
  s0 -> s1 [71, 65535] { R10686 += 1, R10624 += 1 };
  s1 -> s1 [0, 69] { R10686 += 1, R10624 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R10686 += 1 };
  s1 -> s1 [71, 65535] { R10686 += 1, R10624 += 1 };
  s2 -> s1 [0, 69] { R10686 += 1, R10624 += 1 };
  s2 -> s2 [0, 65535] { R10686 += 1, R10623 += 1, R10624 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [71, 65535] { R10686 += 1, R10624 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R10688 += 1, R10625 += 1, R10626 += 1 };
  s0 -> s0 [0, 65535] { R10687 += 1, R10688 += 1 };
  s0 -> s2 [0, 65535] { R10688 += 1, R10626 += 1, R20 += 1 };
  s1 -> s1 [0, 65535] { R10688 += 1, R10625 += 1, R10626 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R10688 += 1, R10626 += 1, R20 += 1 };
  s2 -> s3 [0, 65535] { R10688 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10688 += 1, R10626 += 1, R20 += 1 };
  s3 -> s3 [0, 65535] { R10688 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 70] { R10690 += 1, R10628 += 1 };
  s0 -> s0 [0, 65535] { R10689 += 1, R10690 += 1 };
  s0 -> s2 [0, 65535] { R10690 += 1, R10627 += 1, R10628 += 1 };
  s0 -> s1 [75, 65535] { R10690 += 1, R10628 += 1 };
  s1 -> s1 [0, 70] { R10690 += 1, R10628 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R10690 += 1 };
  s1 -> s1 [75, 65535] { R10690 += 1, R10628 += 1 };
  s2 -> s1 [0, 70] { R10690 += 1, R10628 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10690 += 1, R10627 += 1, R10628 += 1 };
  s2 -> s1 [75, 65535] { R10690 += 1, R10628 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s0 [0, 65535] { R10691 += 1, R10692 += 1 };
  s0 -> s1 [0, 65535] { R10692 += 1, R10629 += 1, R10630 += 1 };
  s0 -> s2 [0, 65535] { R10692 += 1, R10630 += 1, R84 += 1 };
  s1 -> s1 [0, 65535] { R10692 += 1, R10629 += 1, R10630 += 1 };
  s1 -> s2 [0, 65535] { R10692 += 1, R10630 += 1, R84 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10692 += 1, R10630 += 1, R84 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R10692 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10692 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 74] { R10694 += 1, R10632 += 1 };
  s0 -> s2 [0, 65535] { R10694 += 1, R10631 += 1, R10632 += 1 };
  s0 -> s0 [0, 65535] { R10693 += 1, R10694 += 1 };
  s0 -> s3 [0, 65535] { R10694 += 1, R10632 += 1, R86 += 1 };
  s0 -> s1 [76, 65535] { R10694 += 1, R10632 += 1 };
  s1 -> s1 [0, 74] { R10694 += 1, R10632 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10694 += 1 };
  s1 -> s1 [76, 65535] { R10694 += 1, R10632 += 1 };
  s2 -> s1 [0, 74] { R10694 += 1, R10632 += 1 };
  s2 -> s2 [0, 65535] { R10694 += 1, R10631 += 1, R10632 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R10694 += 1, R10632 += 1, R86 += 1 };
  s2 -> s1 [76, 65535] { R10694 += 1, R10632 += 1 };
  s3 -> s1 [0, 74] { R10694 += 1, R10632 += 1 };
  s3 -> s4 [0, 65535] { R10694 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10694 += 1, R10632 += 1, R86 += 1 };
  s3 -> s1 [76, 65535] { R10694 += 1, R10632 += 1 };
  s4 -> s4 [0, 65535] { R10694 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 65535] { R10696 += 1, R10634 += 1 };
  s0 -> s2 [0, 65535] { R10696 += 1, R10633 += 1, R10634 += 1 };
  s0 -> s0 [0, 65535] { R10695 += 1, R10696 += 1 };
  s0 -> s3 [0, 65535] { R10696 += 1, R10634 += 1, R90 += 1 };
  s1 -> s1 [0, 65535] { R10696 += 1, R10634 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R10696 += 1 };
  s2 -> s1 [0, 65535] { R10696 += 1, R10634 += 1 };
  s2 -> s2 [0, 65535] { R10696 += 1, R10633 += 1, R10634 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R10696 += 1, R10634 += 1, R90 += 1 };
  s3 -> s1 [0, 65535] { R10696 += 1, R10634 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10696 += 1, R10634 += 1, R90 += 1 };
  s3 -> s5 [0, 65535] { R10696 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10696 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R10698 += 1, R10635 += 1, R10636 += 1 };
  s0 -> s0 [0, 65535] { R10697 += 1, R10698 += 1 };
  s0 -> s2 [0, 65535] { R10698 += 1, R10636 += 1, R95 += 1, R96 += 1 };
  s0 -> s3 [0, 65535] { R10698 += 1, R10636 += 1, R94 += 1, R95 += 1 };
  s1 -> s1 [0, 65535] { R10698 += 1, R10635 += 1, R10636 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s2 [0, 65535] { R10698 += 1, R10636 += 1, R95 += 1, R96 += 1 };
  s1 -> s3 [0, 65535] { R10698 += 1, R10636 += 1, R94 += 1, R95 += 1 };
  s2 -> s4 [0, 65535] { R10698 += 1 };
  s2 -> s6 [0, 65535] { R10698 += 1, R10636 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10698 += 1, R10636 += 1, R95 += 1, R96 += 1 };
  s3 -> s4 [0, 65535] { R10698 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R10698 += 1, R10636 += 1, R95 += 1, R96 += 1 };
  s3 -> s3 [0, 65535] { R10698 += 1, R10636 += 1, R94 += 1, R95 += 1 };
  s4 -> s4 [0, 65535] { R10698 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R10698 += 1 };
  s6 -> s6 [0, 65535] { R10698 += 1, R10636 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 65535] { R10700 += 1, R10638 += 1 };
  s0 -> s2 [0, 65535] { R10700 += 1, R10637 += 1, R10638 += 1 };
  s0 -> s0 [0, 65535] { R10699 += 1, R10700 += 1 };
  s1 -> s1 [0, 65535] { R10700 += 1, R10638 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R10700 += 1 };
  s2 -> s1 [0, 65535] { R10700 += 1, R10638 += 1 };
  s2 -> s2 [0, 65535] { R10700 += 1, R10637 += 1, R10638 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10700 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s0 [0, 65535] { R10701 += 1, R10702 += 1 };
  s0 -> s1 [0, 65535] { R10702 += 1, R10640 += 1 };
  s0 -> s2 [0, 65535] { R10702 += 1, R10640 += 1, R10170 += 1, R10172 += 1 };
  s0 -> s3 [0, 65535] { R10702 += 1, R10639 += 1, R10640 += 1 };
  s0 -> s4 [0, 65535] { R10702 += 1, R10640 += 1, R10170 += 1 };
  s1 -> s5 [0, 65535] { R10702 += 1 };
  s1 -> s1 [0, 65535] { R10702 += 1, R10640 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s5 [0, 65535] { R10702 += 1 };
  s2 -> s1 [0, 65535] { R10702 += 1, R10640 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R10702 += 1, R10640 += 1, R10170 += 1, R10172 += 1 };
  s2 -> s4 [0, 65535] { R10702 += 1, R10640 += 1, R10170 += 1 };
  s3 -> s1 [0, 65535] { R10702 += 1, R10640 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s2 [0, 65535] { R10702 += 1, R10640 += 1, R10170 += 1, R10172 += 1 };
  s3 -> s3 [0, 65535] { R10702 += 1, R10639 += 1, R10640 += 1 };
  s3 -> s4 [0, 65535] { R10702 += 1, R10640 += 1, R10170 += 1 };
  s4 -> s5 [0, 65535] { R10702 += 1 };
  s4 -> s1 [0, 65535] { R10702 += 1, R10640 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R10702 += 1, R10640 += 1, R10170 += 1 };
  s5 -> s5 [0, 65535] { R10702 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 65535] { R10704 += 1, R10642 += 1, R10619 += 1, R10620 += 1, R10621 += 1 };
  s0 -> s0 [0, 65535] { R10703 += 1, R10704 += 1 };
  s0 -> s2 [0, 65535] { R10704 += 1, R10642 += 1 };
  s0 -> s3 [0, 65535] { R10704 += 1, R10642 += 1, R10619 += 1, R10621 += 1, R10622 += 1 };
  s0 -> s4 [0, 65535] { R10704 += 1, R10641 += 1, R10642 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10704 += 1, R10642 += 1, R10619 += 1, R10620 += 1, R10621 += 1 };
  s1 -> s6 [0, 65535] { R10704 += 1 };
  s1 -> s2 [0, 65535] { R10704 += 1, R10642 += 1 };
  s1 -> s3 [0, 65535] { R10704 += 1, R10642 += 1, R10619 += 1, R10621 += 1, R10622 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R10704 += 1 };
  s2 -> s2 [0, 65535] { R10704 += 1, R10642 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R10704 += 1 };
  s3 -> s2 [0, 65535] { R10704 += 1, R10642 += 1 };
  s3 -> s3 [0, 65535] { R10704 += 1, R10642 += 1, R10619 += 1, R10621 += 1, R10622 += 1 };
  s3 -> s7 [0, 65535] { R10704 += 1, R10642 += 1, R10619 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s1 [0, 65535] { R10704 += 1, R10642 += 1, R10619 += 1, R10620 += 1, R10621 += 1 };
  s4 -> s2 [0, 65535] { R10704 += 1, R10642 += 1 };
  s4 -> s3 [0, 65535] { R10704 += 1, R10642 += 1, R10619 += 1, R10621 += 1, R10622 += 1 };
  s4 -> s4 [0, 65535] { R10704 += 1, R10641 += 1, R10642 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10704 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R10704 += 1 };
  s7 -> s2 [0, 65535] { R10704 += 1, R10642 += 1 };
  s7 -> s7 [0, 65535] { R10704 += 1, R10642 += 1, R10619 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s0 [0, 65535] { R10705 += 1, R10706 += 1 };
  s0 -> s1 [0, 65535] { R10706 += 1, R10661 += 1, R10662 += 1 };
  s0 -> s2 [0, 65535] { R10706 += 1, R10662 += 1, R21 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R10706 += 1, R10661 += 1, R10662 += 1 };
  s1 -> s2 [0, 65535] { R10706 += 1, R10662 += 1, R21 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R10706 += 1 };
  s2 -> s2 [0, 65535] { R10706 += 1, R10662 += 1, R21 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10706 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 69] { R10708 += 1, R10664 += 1 };
  s0 -> s2 [0, 65535] { R10708 += 1, R10663 += 1, R10664 += 1 };
  s0 -> s0 [0, 65535] { R10707 += 1, R10708 += 1 };
  s0 -> s3 [70, 70] { R10708 += 1, R10664 += 1 };
  s0 -> s4 [70, 70] { R10708 += 1, R10664 += 1 };
  s0 -> s5 [75, 75] { R10708 += 1, R10664 += 1 };
  s0 -> s1 [76, 65535] { R10708 += 1, R10664 += 1 };
  s1 -> s1 [0, 69] { R10708 += 1, R10664 += 1 };
  s1 -> s3 [70, 70] { R10708 += 1, R10664 += 1 };
  s1 -> s4 [70, 70] { R10708 += 1, R10664 += 1 };
  s1 -> s5 [75, 75] { R10708 += 1, R10664 += 1 };
  s1 -> s1 [76, 65535] { R10708 += 1, R10664 += 1 };
  s2 -> s1 [0, 69] { R10708 += 1, R10664 += 1 };
  s2 -> s2 [0, 65535] { R10708 += 1, R10663 += 1, R10664 += 1 };
  s2 -> s3 [70, 70] { R10708 += 1, R10664 += 1 };
  s2 -> s4 [70, 70] { R10708 += 1, R10664 += 1 };
  s2 -> s5 [75, 75] { R10708 += 1, R10664 += 1 };
  s2 -> s1 [76, 65535] { R10708 += 1, R10664 += 1 };
  s3 -> s3 [0, 70] { R10708 += 1, R10664 += 1 };
  s3 -> s7 [75, 75] { R10708 += 1, R10664 += 1 };
  s3 -> s3 [76, 65535] { R10708 += 1, R10664 += 1 };
  s5 -> s5 [0, 69] { R10708 += 1, R10664 += 1 };
  s5 -> s5 [0, 65535] { R10708 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [70, 70] { R10708 += 1, R10664 += 1 };
  s5 -> s8 [70, 70] { R10708 += 1, R10664 += 1 };
  s5 -> s5 [75, 65535] { R10708 += 1, R10664 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 70] { R10708 += 1, R10664 += 1 };
  s7 -> s7 [0, 65535] { R10708 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [75, 65535] { R10708 += 1, R10664 += 1 };
  s8 -> s8 [0, 65535] { R10708 += 1 };
  s8 -> s6 [0, 65535];
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 69] { R10710 += 1, R10666 += 1, R83 += 1 };
  s0 -> s0 [0, 65535] { R10709 += 1, R10710 += 1 };
  s0 -> s2 [0, 65535] { R10710 += 1, R10665 += 1, R10666 += 1 };
  s0 -> s3 [70, 70] { R10710 += 1, R10666 += 1, R83 += 1 };
  s0 -> s4 [70, 70] { R10710 += 1, R10666 += 1, R83 += 1 };
  s0 -> s1 [71, 65535] { R10710 += 1, R10666 += 1, R83 += 1 };
  s1 -> s1 [0, 69] { R10710 += 1, R10666 += 1, R83 += 1 };
  s1 -> s1 [0, 65535] { R10710 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [70, 70] { R10710 += 1, R10666 += 1, R83 += 1 };
  s1 -> s4 [70, 70] { R10710 += 1, R10666 += 1, R83 += 1 };
  s1 -> s1 [71, 65535] { R10710 += 1, R10666 += 1, R83 += 1 };
  s2 -> s1 [0, 69] { R10710 += 1, R10666 += 1, R83 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10710 += 1, R10665 += 1, R10666 += 1 };
  s2 -> s3 [70, 70] { R10710 += 1, R10666 += 1, R83 += 1 };
  s2 -> s4 [70, 70] { R10710 += 1, R10666 += 1, R83 += 1 };
  s2 -> s1 [71, 65535] { R10710 += 1, R10666 += 1, R83 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10710 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R10710 += 1 };
  s4 -> s4 [0, 65535] { R10710 += 1, R10666 += 1, R83 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10710 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 69] { R10712 += 1, R10668 += 1, R85 += 1 };
  s0 -> s0 [0, 65535] { R10711 += 1, R10712 += 1 };
  s0 -> s2 [0, 65535] { R10712 += 1, R10667 += 1, R10668 += 1 };
  s0 -> s3 [70, 70] { R10712 += 1, R10668 += 1, R85 += 1 };
  s0 -> s4 [70, 70] { R10712 += 1, R10668 += 1, R85 += 1 };
  s0 -> s1 [71, 65535] { R10712 += 1, R10668 += 1, R85 += 1 };
  s1 -> s1 [0, 69] { R10712 += 1, R10668 += 1, R85 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R10712 += 1 };
  s1 -> s3 [70, 70] { R10712 += 1, R10668 += 1, R85 += 1 };
  s1 -> s4 [70, 70] { R10712 += 1, R10668 += 1, R85 += 1 };
  s1 -> s1 [71, 65535] { R10712 += 1, R10668 += 1, R85 += 1 };
  s2 -> s1 [0, 69] { R10712 += 1, R10668 += 1, R85 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R10712 += 1, R10667 += 1, R10668 += 1 };
  s2 -> s3 [70, 70] { R10712 += 1, R10668 += 1, R85 += 1 };
  s2 -> s4 [70, 70] { R10712 += 1, R10668 += 1, R85 += 1 };
  s2 -> s1 [71, 65535] { R10712 += 1, R10668 += 1, R85 += 1 };
  s3 -> s3 [0, 65535] { R10712 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R10712 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R10712 += 1, R10668 += 1, R85 += 1 };
  s5 -> s5 [0, 65535] { R10712 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 69] { R10714 += 1, R10670 += 1, R87 += 1, R88 += 1 };
  s0 -> s2 [0, 69] { R10714 += 1, R10670 += 1, R88 += 1 };
  s0 -> s0 [0, 65535] { R10713 += 1, R10714 += 1 };
  s0 -> s3 [0, 65535] { R10714 += 1, R10669 += 1, R10670 += 1 };
  s0 -> s4 [70, 70] { R10714 += 1, R10670 += 1, R87 += 1, R88 += 1 };
  s0 -> s5 [70, 70] { R10714 += 1, R10670 += 1, R88 += 1 };
  s0 -> s6 [70, 70] { R10714 += 1, R10670 += 1, R87 += 1, R88 += 1 };
  s0 -> s7 [70, 70] { R10714 += 1, R10670 += 1, R88 += 1 };
  s0 -> s2 [71, 74] { R10714 += 1, R10670 += 1, R88 += 1 };
  s0 -> s1 [71, 65535] { R10714 += 1, R10670 += 1, R87 += 1, R88 += 1 };
  s0 -> s8 [75, 75] { R10714 += 1, R10670 += 1, R88 += 1 };
  s0 -> s2 [76, 65535] { R10714 += 1, R10670 += 1, R88 += 1 };
  s1 -> s1 [0, 69] { R10714 += 1, R10670 += 1, R87 += 1, R88 += 1 };
  s1 -> s2 [0, 69] { R10714 += 1, R10670 += 1, R88 += 1 };
  s1 -> s4 [70, 70] { R10714 += 1, R10670 += 1, R87 += 1, R88 += 1 };
  s1 -> s5 [70, 70] { R10714 += 1, R10670 += 1, R88 += 1 };
  s1 -> s6 [70, 70] { R10714 += 1, R10670 += 1, R87 += 1, R88 += 1 };
  s1 -> s7 [70, 70] { R10714 += 1, R10670 += 1, R88 += 1 };
  s1 -> s2 [71, 74] { R10714 += 1, R10670 += 1, R88 += 1 };
  s1 -> s1 [71, 65535] { R10714 += 1, R10670 += 1, R87 += 1, R88 += 1 };
  s1 -> s8 [75, 75] { R10714 += 1, R10670 += 1, R88 += 1 };
  s1 -> s2 [76, 65535] { R10714 += 1, R10670 += 1, R88 += 1 };
  s2 -> s2 [0, 69] { R10714 += 1, R10670 += 1, R88 += 1 };
  s2 -> s5 [70, 70] { R10714 += 1, R10670 += 1, R88 += 1 };
  s2 -> s7 [70, 70] { R10714 += 1, R10670 += 1, R88 += 1 };
  s2 -> s2 [71, 74] { R10714 += 1, R10670 += 1, R88 += 1 };
  s2 -> s8 [75, 75] { R10714 += 1, R10670 += 1, R88 += 1 };
  s2 -> s2 [76, 65535] { R10714 += 1, R10670 += 1, R88 += 1 };
  s3 -> s1 [0, 69] { R10714 += 1, R10670 += 1, R87 += 1, R88 += 1 };
  s3 -> s2 [0, 69] { R10714 += 1, R10670 += 1, R88 += 1 };
  s3 -> s3 [0, 65535] { R10714 += 1, R10669 += 1, R10670 += 1 };
  s3 -> s4 [70, 70] { R10714 += 1, R10670 += 1, R87 += 1, R88 += 1 };
  s3 -> s5 [70, 70] { R10714 += 1, R10670 += 1, R88 += 1 };
  s3 -> s6 [70, 70] { R10714 += 1, R10670 += 1, R87 += 1, R88 += 1 };
  s3 -> s7 [70, 70] { R10714 += 1, R10670 += 1, R88 += 1 };
  s3 -> s2 [71, 74] { R10714 += 1, R10670 += 1, R88 += 1 };
  s3 -> s1 [71, 65535] { R10714 += 1, R10670 += 1, R87 += 1, R88 += 1 };
  s3 -> s8 [75, 75] { R10714 += 1, R10670 += 1, R88 += 1 };
  s3 -> s2 [76, 65535] { R10714 += 1, R10670 += 1, R88 += 1 };
  s5 -> s5 [0, 74] { R10714 += 1, R10670 += 1, R88 += 1 };
  s5 -> s11 [75, 75] { R10714 += 1, R10670 += 1, R88 += 1 };
  s5 -> s5 [76, 65535] { R10714 += 1, R10670 += 1, R88 += 1 };
  s6 -> s5 [0, 74] { R10714 += 1, R10670 += 1, R88 += 1 };
  s6 -> s6 [0, 65535] { R10714 += 1, R10670 += 1, R87 += 1, R88 += 1 };
  s6 -> s11 [75, 75] { R10714 += 1, R10670 += 1, R88 += 1 };
  s6 -> s5 [76, 65535] { R10714 += 1, R10670 += 1, R88 += 1 };
  s8 -> s8 [0, 69] { R10714 += 1, R10670 += 1, R88 += 1 };
  s8 -> s8 [0, 65535] { R10714 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [70, 70] { R10714 += 1, R10670 += 1, R88 += 1 };
  s8 -> s11 [70, 70] { R10714 += 1, R10670 += 1, R88 += 1 };
  s8 -> s8 [71, 65535] { R10714 += 1, R10670 += 1, R88 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R10714 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s12 [0, 65535] { R10714 += 1 };
  s11 -> s11 [0, 65535] { R10714 += 1, R10670 += 1, R88 += 1 };
  s11 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R10714 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 69] { R10716 += 1, R10672 += 1, R91 += 1, R92 += 1 };
  s0 -> s2 [0, 65535] { R10716 += 1, R10671 += 1, R10672 += 1 };
  s0 -> s0 [0, 65535] { R10715 += 1, R10716 += 1 };
  s0 -> s3 [70, 70] { R10716 += 1, R10672 += 1, R91 += 1, R92 += 1 };
  s0 -> s4 [70, 70] { R10716 += 1, R10672 += 1, R91 += 1, R92 += 1 };
  s0 -> s1 [71, 65535] { R10716 += 1, R10672 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 69] { R10716 += 1, R10672 += 1, R91 += 1, R92 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10716 += 1 };
  s1 -> s3 [70, 70] { R10716 += 1, R10672 += 1, R91 += 1, R92 += 1 };
  s1 -> s4 [70, 70] { R10716 += 1, R10672 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [71, 65535] { R10716 += 1, R10672 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [0, 69] { R10716 += 1, R10672 += 1, R91 += 1, R92 += 1 };
  s2 -> s2 [0, 65535] { R10716 += 1, R10671 += 1, R10672 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [70, 70] { R10716 += 1, R10672 += 1, R91 += 1, R92 += 1 };
  s2 -> s4 [70, 70] { R10716 += 1, R10672 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [71, 65535] { R10716 += 1, R10672 += 1, R91 += 1, R92 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10716 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R10716 += 1 };
  s4 -> s4 [0, 65535] { R10716 += 1, R10672 += 1, R91 += 1, R92 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10716 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 69] { R10718 += 1, R10674 += 1, R10159 += 1, R10160 += 1 };
  s0 -> s2 [0, 69] { R10718 += 1, R10674 += 1, R10160 += 1, R10161 += 1 };
  s0 -> s0 [0, 65535] { R10717 += 1, R10718 += 1 };
  s0 -> s3 [0, 65535] { R10718 += 1, R10673 += 1, R10674 += 1 };
  s0 -> s4 [70, 70] { R10718 += 1, R10674 += 1, R10160 += 1, R10161 += 1 };
  s0 -> s5 [70, 70] { R10718 += 1, R10674 += 1, R10160 += 1, R10161 += 1 };
  s0 -> s6 [70, 70] { R10718 += 1, R10674 += 1, R10159 += 1, R10160 += 1 };
  s0 -> s7 [70, 70] { R10718 += 1, R10674 += 1, R10159 += 1, R10160 += 1 };
  s0 -> s1 [71, 65535] { R10718 += 1, R10674 += 1, R10159 += 1, R10160 += 1 };
  s0 -> s2 [71, 65535] { R10718 += 1, R10674 += 1, R10160 += 1, R10161 += 1 };
  s1 -> s1 [0, 69] { R10718 += 1, R10674 += 1, R10159 += 1, R10160 += 1 };
  s1 -> s2 [0, 69] { R10718 += 1, R10674 += 1, R10160 += 1, R10161 += 1 };
  s1 -> s4 [70, 70] { R10718 += 1, R10674 += 1, R10160 += 1, R10161 += 1 };
  s1 -> s5 [70, 70] { R10718 += 1, R10674 += 1, R10160 += 1, R10161 += 1 };
  s1 -> s6 [70, 70] { R10718 += 1, R10674 += 1, R10159 += 1, R10160 += 1 };
  s1 -> s7 [70, 70] { R10718 += 1, R10674 += 1, R10159 += 1, R10160 += 1 };
  s1 -> s1 [71, 65535] { R10718 += 1, R10674 += 1, R10159 += 1, R10160 += 1 };
  s1 -> s2 [71, 65535] { R10718 += 1, R10674 += 1, R10160 += 1, R10161 += 1 };
  s2 -> s2 [0, 69] { R10718 += 1, R10674 += 1, R10160 += 1, R10161 += 1 };
  s2 -> s11 [0, 69] { R10718 += 1, R10674 += 1 };
  s2 -> s8 [70, 70] { R10718 += 1, R10674 += 1 };
  s2 -> s4 [70, 70] { R10718 += 1, R10674 += 1, R10160 += 1, R10161 += 1 };
  s2 -> s5 [70, 70] { R10718 += 1, R10674 += 1, R10160 += 1, R10161 += 1 };
  s2 -> s12 [70, 70] { R10718 += 1, R10674 += 1 };
  s2 -> s2 [71, 65535] { R10718 += 1, R10674 += 1, R10160 += 1, R10161 += 1 };
  s2 -> s11 [71, 65535] { R10718 += 1, R10674 += 1 };
  s3 -> s1 [0, 69] { R10718 += 1, R10674 += 1, R10159 += 1, R10160 += 1 };
  s3 -> s2 [0, 69] { R10718 += 1, R10674 += 1, R10160 += 1, R10161 += 1 };
  s3 -> s3 [0, 65535] { R10718 += 1, R10673 += 1, R10674 += 1 };
  s3 -> s4 [70, 70] { R10718 += 1, R10674 += 1, R10160 += 1, R10161 += 1 };
  s3 -> s5 [70, 70] { R10718 += 1, R10674 += 1, R10160 += 1, R10161 += 1 };
  s3 -> s6 [70, 70] { R10718 += 1, R10674 += 1, R10159 += 1, R10160 += 1 };
  s3 -> s7 [70, 70] { R10718 += 1, R10674 += 1, R10159 += 1, R10160 += 1 };
  s3 -> s1 [71, 65535] { R10718 += 1, R10674 += 1, R10159 += 1, R10160 += 1 };
  s3 -> s2 [71, 65535] { R10718 += 1, R10674 += 1, R10160 += 1, R10161 += 1 };
  s4 -> s8 [0, 65535] { R10718 += 1, R10674 += 1 };
  s4 -> s4 [0, 65535] { R10718 += 1, R10674 += 1, R10160 += 1, R10161 += 1 };
  s7 -> s4 [0, 65535] { R10718 += 1, R10674 += 1, R10160 += 1, R10161 += 1 };
  s7 -> s7 [0, 65535] { R10718 += 1, R10674 += 1, R10159 += 1, R10160 += 1 };
  s8 -> s8 [0, 65535] { R10718 += 1, R10674 += 1 };
  s8 -> s9 [0, 65535] { R10718 += 1 };
  s8 -> s10 [0, 65535];
  s9 -> s9 [0, 65535] { R10718 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s11 [0, 69] { R10718 += 1, R10674 += 1 };
  s11 -> s10 [0, 65535];
  s11 -> s11 [0, 65535] { R10718 += 1 };
  s11 -> s8 [70, 70] { R10718 += 1, R10674 += 1 };
  s11 -> s12 [70, 70] { R10718 += 1, R10674 += 1 };
  s11 -> s11 [71, 65535] { R10718 += 1, R10674 += 1 };
  s12 -> s10 [0, 65535];
  s12 -> s12 [0, 65535] { R10718 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 69] { R10720 += 1, R10676 += 1, R10166 += 1, R10167 += 1, R10168 += 1 };
  s0 -> s2 [0, 69] { R10720 += 1, R10676 += 1, R10166 += 1, R10168 += 1 };
  s0 -> s3 [0, 69] { R10720 += 1, R10676 += 1, R10165 += 1, R10166 += 1 };
  s0 -> s0 [0, 65535] { R10719 += 1, R10720 += 1 };
  s0 -> s4 [0, 65535] { R10720 += 1, R10675 += 1, R10676 += 1 };
  s0 -> s5 [70, 70] { R10720 += 1, R10676 += 1, R10166 += 1, R10167 += 1, R10168 += 1 };
  s0 -> s6 [70, 70] { R10720 += 1, R10676 += 1, R10166 += 1, R10168 += 1 };
  s0 -> s7 [70, 70] { R10720 += 1, R10676 += 1, R10165 += 1, R10166 += 1 };
  s0 -> s8 [70, 70] { R10720 += 1, R10676 += 1, R10165 += 1, R10166 += 1 };
  s0 -> s9 [70, 70] { R10720 += 1, R10676 += 1, R10166 += 1, R10167 += 1, R10168 += 1 };
  s0 -> s10 [70, 70] { R10720 += 1, R10676 += 1, R10166 += 1, R10168 += 1 };
  s0 -> s2 [71, 74] { R10720 += 1, R10676 += 1, R10166 += 1, R10168 += 1 };
  s0 -> s1 [71, 65535] { R10720 += 1, R10676 += 1, R10166 += 1, R10167 += 1, R10168 += 1 };
  s0 -> s3 [71, 65535] { R10720 += 1, R10676 += 1, R10165 += 1, R10166 += 1 };
  s0 -> s11 [75, 75] { R10720 += 1, R10676 += 1, R10166 += 1, R10168 += 1 };
  s0 -> s2 [76, 65535] { R10720 += 1, R10676 += 1, R10166 += 1, R10168 += 1 };
  s1 -> s1 [0, 69] { R10720 += 1, R10676 += 1, R10166 += 1, R10167 += 1, R10168 += 1 };
  s1 -> s2 [0, 69] { R10720 += 1, R10676 += 1, R10166 += 1, R10168 += 1 };
  s1 -> s5 [70, 70] { R10720 += 1, R10676 += 1, R10166 += 1, R10167 += 1, R10168 += 1 };
  s1 -> s6 [70, 70] { R10720 += 1, R10676 += 1, R10166 += 1, R10168 += 1 };
  s1 -> s9 [70, 70] { R10720 += 1, R10676 += 1, R10166 += 1, R10167 += 1, R10168 += 1 };
  s1 -> s10 [70, 70] { R10720 += 1, R10676 += 1, R10166 += 1, R10168 += 1 };
  s1 -> s2 [71, 74] { R10720 += 1, R10676 += 1, R10166 += 1, R10168 += 1 };
  s1 -> s1 [71, 65535] { R10720 += 1, R10676 += 1, R10166 += 1, R10167 += 1, R10168 += 1 };
  s1 -> s11 [75, 75] { R10720 += 1, R10676 += 1, R10166 += 1, R10168 += 1 };
  s1 -> s2 [76, 65535] { R10720 += 1, R10676 += 1, R10166 += 1, R10168 += 1 };
  s2 -> s2 [0, 69] { R10720 += 1, R10676 += 1, R10166 += 1, R10168 += 1 };
  s2 -> s6 [70, 70] { R10720 += 1, R10676 += 1, R10166 += 1, R10168 += 1 };
  s2 -> s10 [70, 70] { R10720 += 1, R10676 += 1, R10166 += 1, R10168 += 1 };
  s2 -> s2 [71, 74] { R10720 += 1, R10676 += 1, R10166 += 1, R10168 += 1 };
  s2 -> s11 [75, 75] { R10720 += 1, R10676 += 1, R10166 += 1, R10168 += 1 };
  s2 -> s2 [76, 65535] { R10720 += 1, R10676 += 1, R10166 += 1, R10168 += 1 };
  s3 -> s1 [0, 69] { R10720 += 1, R10676 += 1, R10166 += 1, R10167 += 1, R10168 += 1 };
  s3 -> s2 [0, 69] { R10720 += 1, R10676 += 1, R10166 += 1, R10168 += 1 };
  s3 -> s3 [0, 69] { R10720 += 1, R10676 += 1, R10165 += 1, R10166 += 1 };
  s3 -> s5 [70, 70] { R10720 += 1, R10676 += 1, R10166 += 1, R10167 += 1, R10168 += 1 };
  s3 -> s6 [70, 70] { R10720 += 1, R10676 += 1, R10166 += 1, R10168 += 1 };
  s3 -> s7 [70, 70] { R10720 += 1, R10676 += 1, R10165 += 1, R10166 += 1 };
  s3 -> s8 [70, 70] { R10720 += 1, R10676 += 1, R10165 += 1, R10166 += 1 };
  s3 -> s9 [70, 70] { R10720 += 1, R10676 += 1, R10166 += 1, R10167 += 1, R10168 += 1 };
  s3 -> s10 [70, 70] { R10720 += 1, R10676 += 1, R10166 += 1, R10168 += 1 };
  s3 -> s2 [71, 74] { R10720 += 1, R10676 += 1, R10166 += 1, R10168 += 1 };
  s3 -> s1 [71, 65535] { R10720 += 1, R10676 += 1, R10166 += 1, R10167 += 1, R10168 += 1 };
  s3 -> s3 [71, 65535] { R10720 += 1, R10676 += 1, R10165 += 1, R10166 += 1 };
  s3 -> s11 [75, 75] { R10720 += 1, R10676 += 1, R10166 += 1, R10168 += 1 };
  s3 -> s2 [76, 65535] { R10720 += 1, R10676 += 1, R10166 += 1, R10168 += 1 };
  s4 -> s1 [0, 69] { R10720 += 1, R10676 += 1, R10166 += 1, R10167 += 1, R10168 += 1 };
  s4 -> s2 [0, 69] { R10720 += 1, R10676 += 1, R10166 += 1, R10168 += 1 };
  s4 -> s3 [0, 69] { R10720 += 1, R10676 += 1, R10165 += 1, R10166 += 1 };
  s4 -> s4 [0, 65535] { R10720 += 1, R10675 += 1, R10676 += 1 };
  s4 -> s5 [70, 70] { R10720 += 1, R10676 += 1, R10166 += 1, R10167 += 1, R10168 += 1 };
  s4 -> s6 [70, 70] { R10720 += 1, R10676 += 1, R10166 += 1, R10168 += 1 };
  s4 -> s7 [70, 70] { R10720 += 1, R10676 += 1, R10165 += 1, R10166 += 1 };
  s4 -> s8 [70, 70] { R10720 += 1, R10676 += 1, R10165 += 1, R10166 += 1 };
  s4 -> s9 [70, 70] { R10720 += 1, R10676 += 1, R10166 += 1, R10167 += 1, R10168 += 1 };
  s4 -> s10 [70, 70] { R10720 += 1, R10676 += 1, R10166 += 1, R10168 += 1 };
  s4 -> s2 [71, 74] { R10720 += 1, R10676 += 1, R10166 += 1, R10168 += 1 };
  s4 -> s1 [71, 65535] { R10720 += 1, R10676 += 1, R10166 += 1, R10167 += 1, R10168 += 1 };
  s4 -> s3 [71, 65535] { R10720 += 1, R10676 += 1, R10165 += 1, R10166 += 1 };
  s4 -> s11 [75, 75] { R10720 += 1, R10676 += 1, R10166 += 1, R10168 += 1 };
  s4 -> s2 [76, 65535] { R10720 += 1, R10676 += 1, R10166 += 1, R10168 += 1 };
  s7 -> s10 [0, 74] { R10720 += 1, R10676 += 1, R10166 += 1, R10168 += 1 };
  s7 -> s7 [0, 65535] { R10720 += 1, R10676 += 1, R10165 += 1, R10166 += 1 };
  s7 -> s9 [0, 65535] { R10720 += 1, R10676 += 1, R10166 += 1, R10167 += 1, R10168 += 1 };
  s7 -> s14 [75, 75] { R10720 += 1, R10676 += 1, R10166 += 1, R10168 += 1 };
  s7 -> s10 [76, 65535] { R10720 += 1, R10676 += 1, R10166 += 1, R10168 += 1 };
  s9 -> s10 [0, 74] { R10720 += 1, R10676 += 1, R10166 += 1, R10168 += 1 };
  s9 -> s9 [0, 65535] { R10720 += 1, R10676 += 1, R10166 += 1, R10167 += 1, R10168 += 1 };
  s9 -> s14 [75, 75] { R10720 += 1, R10676 += 1, R10166 += 1, R10168 += 1 };
  s9 -> s10 [76, 65535] { R10720 += 1, R10676 += 1, R10166 += 1, R10168 += 1 };
  s10 -> s10 [0, 74] { R10720 += 1, R10676 += 1, R10166 += 1, R10168 += 1 };
  s10 -> s14 [75, 75] { R10720 += 1, R10676 += 1, R10166 += 1, R10168 += 1 };
  s10 -> s10 [76, 65535] { R10720 += 1, R10676 += 1, R10166 += 1, R10168 += 1 };
  s11 -> s11 [0, 69] { R10720 += 1, R10676 += 1, R10166 += 1, R10168 += 1 };
  s11 -> s11 [0, 65535] { R10720 += 1 };
  s11 -> s12 [0, 65535];
  s11 -> s13 [70, 70] { R10720 += 1, R10676 += 1, R10166 += 1, R10168 += 1 };
  s11 -> s14 [70, 70] { R10720 += 1, R10676 += 1, R10166 += 1, R10168 += 1 };
  s11 -> s11 [71, 65535] { R10720 += 1, R10676 += 1, R10166 += 1, R10168 += 1 };
  s12 -> s12 [0, 65535];
  s13 -> s12 [0, 65535];
  s13 -> s13 [0, 65535] { R10720 += 1 };
  s14 -> s12 [0, 65535];
  s14 -> s15 [0, 65535] { R10720 += 1 };
  s14 -> s14 [0, 65535] { R10720 += 1, R10676 += 1, R10166 += 1, R10168 += 1 };
  s15 -> s12 [0, 65535];
  s15 -> s15 [0, 65535] { R10720 += 1 };
  accepting s12, s13, s14, s15, s11;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 69] { R10722 += 1, R10678 += 1, R10614 += 1, R10615 += 1, R10616 += 1 };
  s0 -> s2 [0, 69] { R10722 += 1, R10678 += 1, R10613 += 1, R10614 += 1 };
  s0 -> s3 [0, 65535] { R10722 += 1, R10677 += 1, R10678 += 1 };
  s0 -> s0 [0, 65535] { R10721 += 1, R10722 += 1 };
  s0 -> s4 [70, 70] { R10722 += 1, R10678 += 1, R10613 += 1, R10614 += 1 };
  s0 -> s5 [70, 70] { R10722 += 1, R10678 += 1, R10614 += 1, R10615 += 1, R10616 += 1 };
  s0 -> s6 [70, 70] { R10722 += 1, R10678 += 1, R10613 += 1, R10614 += 1 };
  s0 -> s7 [70, 70] { R10722 += 1, R10678 += 1, R10614 += 1, R10615 += 1, R10616 += 1 };
  s0 -> s1 [71, 65535] { R10722 += 1, R10678 += 1, R10614 += 1, R10615 += 1, R10616 += 1 };
  s0 -> s2 [71, 65535] { R10722 += 1, R10678 += 1, R10613 += 1, R10614 += 1 };
  s1 -> s1 [0, 69] { R10722 += 1, R10678 += 1, R10614 += 1, R10615 += 1, R10616 += 1 };
  s1 -> s1 [0, 65535] { R10722 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s5 [70, 70] { R10722 += 1, R10678 += 1, R10614 += 1, R10615 += 1, R10616 += 1 };
  s1 -> s7 [70, 70] { R10722 += 1, R10678 += 1, R10614 += 1, R10615 += 1, R10616 += 1 };
  s1 -> s1 [71, 65535] { R10722 += 1, R10678 += 1, R10614 += 1, R10615 += 1, R10616 += 1 };
  s2 -> s1 [0, 69] { R10722 += 1, R10678 += 1, R10614 += 1, R10615 += 1, R10616 += 1 };
  s2 -> s2 [0, 69] { R10722 += 1, R10678 += 1, R10613 += 1, R10614 += 1 };
  s2 -> s4 [70, 70] { R10722 += 1, R10678 += 1, R10613 += 1, R10614 += 1 };
  s2 -> s5 [70, 70] { R10722 += 1, R10678 += 1, R10614 += 1, R10615 += 1, R10616 += 1 };
  s2 -> s6 [70, 70] { R10722 += 1, R10678 += 1, R10613 += 1, R10614 += 1 };
  s2 -> s7 [70, 70] { R10722 += 1, R10678 += 1, R10614 += 1, R10615 += 1, R10616 += 1 };
  s2 -> s1 [71, 65535] { R10722 += 1, R10678 += 1, R10614 += 1, R10615 += 1, R10616 += 1 };
  s2 -> s2 [71, 65535] { R10722 += 1, R10678 += 1, R10613 += 1, R10614 += 1 };
  s3 -> s1 [0, 69] { R10722 += 1, R10678 += 1, R10614 += 1, R10615 += 1, R10616 += 1 };
  s3 -> s2 [0, 69] { R10722 += 1, R10678 += 1, R10613 += 1, R10614 += 1 };
  s3 -> s3 [0, 65535] { R10722 += 1, R10677 += 1, R10678 += 1 };
  s3 -> s4 [70, 70] { R10722 += 1, R10678 += 1, R10613 += 1, R10614 += 1 };
  s3 -> s5 [70, 70] { R10722 += 1, R10678 += 1, R10614 += 1, R10615 += 1, R10616 += 1 };
  s3 -> s6 [70, 70] { R10722 += 1, R10678 += 1, R10613 += 1, R10614 += 1 };
  s3 -> s7 [70, 70] { R10722 += 1, R10678 += 1, R10614 += 1, R10615 += 1, R10616 += 1 };
  s3 -> s1 [71, 65535] { R10722 += 1, R10678 += 1, R10614 += 1, R10615 += 1, R10616 += 1 };
  s3 -> s2 [71, 65535] { R10722 += 1, R10678 += 1, R10613 += 1, R10614 += 1 };
  s4 -> s4 [0, 65535] { R10722 += 1, R10678 += 1, R10613 += 1, R10614 += 1 };
  s4 -> s5 [0, 65535] { R10722 += 1, R10678 += 1, R10614 += 1, R10615 += 1, R10616 += 1 };
  s5 -> s5 [0, 65535] { R10722 += 1, R10678 += 1, R10614 += 1, R10615 += 1, R10616 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s9 [0, 65535] { R10722 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R10722 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R10722 += 1 };
  accepting s8, s5, s9, s1, s7;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [102, 102];
  accepting s1;
};
};
constraint R3 = R10722 && R23 - R10722 = -1 && R24 = R10722 && R25 - R10722 = -1 && R26 = R10722 && R27 = 0 && R28 = 1 && R29 = 0 && R30 = 1 && R45 + R84 + R83 + -1*R10170 + -1*R10166 - R66 = 0 && R49 + R89 + R87 = 0 && R50 + R90 + R88 + -1*R10170 + -1*R10166 - R66 = 0 && R55 + R96 + R93 + -1*R10172 + -1*R10168 - R68 = 0 && R65 + R10169 + R10165 = 0 && R67 + R10171 + R10167 = 0 && R10663 = 0 && R10664 = 0 && R10669 = 0 && R10670 = 0 && R10673 = 0 && R10674 = 0 && R10675 = 0 && R10676 = 0 && R10677 = 0 && R10678 = 0 && R10679 = 0 && R10680 = R10722 && R10681 = 0 && R10682 = R10722 && R10683 = 0 && R10684 = R10722 && R10685 = 0 && R10686 = R10722 && R10687 = 0 && R10688 = R10722 && R10689 = 0 && R10690 = R10722 && R10691 = 0 && R10692 = R10722 && R10693 = 0 && R10694 = R10722 && R10695 = 0 && R10696 = R10722 && R10697 = 0 && R10698 = R10722 && R10699 = 0 && R10700 = R10722 && R10701 = 0 && R10702 = R10722 && R10703 = 0 && R10704 = R10722 && R10705 = 0 && R10706 = R10722 && R10707 = 0 && R10708 = R10722 && R10709 = 0 && R10710 = R10722 && R10711 = 0 && R10712 = R10722 && R10713 = 0 && R10714 = R10722 && R10715 = 0 && R10716 = R10722 && R10717 = 0 && R10718 = R10722 && R10719 = 0 && R10720 = R10722 && R10721 = 0 && -1 < R2 && R12 < 1 && R15 < 1 && R16 < 1 && R47 + R86 + R85 < 1 && R61 + R10164 + R10161 < 1 && -1*R10170 + -1*R10166 - R66 < 1 && -1*R10172 + -1*R10168 - R68 < 1 && 0 < R10722 && (R2 != 0 || R20 = 0 || (R10623 = 0 && R10624 = 0)) && (R2 != 0 || R20 = 0 || (R10625 = 0 && R10626 = 0)) && (R2 != 0 || R20 = 0 || (R10627 = 0 && R10628 = 0)) && (R2 != 0 || R20 = 0 || (R10629 = 0 && R10630 = 0)) && (R2 != 0 || R20 = 0 || (R10631 = 0 && R10632 = 0)) && (R2 != 0 || R20 = 0 || (R10633 = 0 && R10634 = 0)) && (R2 != 0 || R20 = 0 || (R10635 = 0 && R10636 = 0)) && (R2 != 0 || R20 = 0 || (R10637 = 0 && R10638 = 0)) && (R2 != 0 || R20 = 0 || (R10639 = 0 && R10640 = 0)) && (R2 != 0 || R20 = 0 || (R10641 = 0 && R10642 = 0)) && (R53 + R94 + R91 != 0 || R54 + R95 + R92 + -1*R10170 + -1*R10166 - R66 = 0 || R66 + R10170 + R10166 < 1) && (R59 + R10162 + R10159 != 0 || R60 + R10163 + R10160 + -1*R10170 + -1*R10166 - R66 = 0 || R66 + R10170 + R10166 < 1) && (R66 + R10170 + R10166 != 0 || ((R53 + R94 + R91 != 0 || R54 + R95 + R92 = 0 || R68 + R10172 + R10168 < 1) && (R53 + R94 + R91 = 0 || R68 + R10172 + R10168 < 1))) && (R66 + R10170 + R10166 != 0 || ((R59 + R10162 + R10159 != 0 || R60 + R10163 + R10160 = 0 || R68 + R10172 + R10168 < 1) && (R59 + R10162 + R10159 = 0 || R68 + R10172 + R10168 < 1))) && (R66 + R10170 + R10166 != 0 || ((R73 + R10618 + R10613 != 0 || R74 + R10619 + R10614 = 0 || R68 + R10172 + R10168 < 1) && (R73 + R10618 + R10613 = 0 || R68 + R10172 + R10168 < 1))) && (R68 + R10172 + R10168 != 0 || R77 + R10622 + R10617 = 0 || (R75 + R10620 + R10615 = 0 && R76 + R10621 + R10616 = 0)) && (R73 + R10618 + R10613 != 0 || R66 + R10170 + R10166 + -1*R10619 + -1*R10614 - R74 = 0 || R66 + R10170 + R10166 < 1) && (R75 + R10620 + R10615 != 0 || R68 + R10172 + R10168 + -1*R10621 + -1*R10616 - R76 = 0 || R68 + R10172 + R10168 < 1) && (R10623 != 0 || R2 = R10624 || R2 < 1) && (R10625 != 0 || R2 = R10626 || R2 < 1) && (R10627 != 0 || R2 = R10628 || R2 < 1) && (R10629 != 0 || R2 = R10630 || R2 < 1) && (R10631 != 0 || R2 = R10632 || R2 < 1) && (R10633 != 0 || R2 = R10634 || R2 < 1) && (R10635 != 0 || R2 = R10636 || R2 < 1) && (R10637 != 0 || R2 = R10638 || R2 < 1) && (R10639 != 0 || R2 = R10640 || R2 < 1) && (R10641 != 0 || R2 = R10642 || R2 < 1) && (R21 = 0 || (R10661 = 0 && R10662 = 0)) && (R21 = 0 || (R10665 = 0 && R10666 = 0)) && (R21 = 0 || (R10667 = 0 && R10668 = 0)) && (R21 = 0 || (R10671 = 0 && R10672 = 0)) && (R22 = 0 || (R10643 = 0 && R10644 = 0)) && (R22 = 0 || (R10645 = 0 && R10646 = 0)) && (R22 = 0 || (R10647 = 0 && R10648 = 0)) && (R22 = 0 || (R10649 = 0 && R10650 = 0)) && (R22 = 0 || (R10651 = 0 && R10652 = 0)) && (R22 = 0 || (R10653 = 0 && R10654 = 0)) && (R22 = 0 || (R10655 = 0 && R10656 = 0)) && (R22 = 0 || (R10657 = 0 && R10658 = 0)) && (R22 = 0 || (R10659 = 0 && R10660 = 0)) && (R53 + R94 + R91 = 0 || R66 + R10170 + R10166 < 1) && (R59 + R10162 + R10159 = 0 || R66 + R10170 + R10166 < 1) && (R73 + R10618 + R10613 = 0 || R66 + R10170 + R10166 < 1) && (R75 + R10620 + R10615 = 0 || R68 + R10172 + R10168 < 1) && (R10623 = 0 || R2 < 1) && (R10625 = 0 || R2 < 1) && (R10627 = 0 || R2 < 1) && (R10629 = 0 || R2 < 1) && (R10631 = 0 || R2 < 1) && (R10633 = 0 || R2 < 1) && (R10635 = 0 || R2 < 1) && (R10637 = 0 || R2 < 1) && (R10639 = 0 || R2 < 1) && (R10641 = 0 || R2 < 1);
// End of Parikh automata intersection problem
