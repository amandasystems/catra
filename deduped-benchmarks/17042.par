// Parikh automata intersection problem, generated by OSTRICH+
counter int R10159, R10160, R10161, R10162, R10163, R10164, R11839, R11840, R11841, R11842, R11843, R11844, R11845, R11846, R12, R12287, R12288, R12289, R12290, R12291, R12292, R12293, R12294, R12295, R12296, R12297, R12298, R12299, R12300, R12301, R12302, R12303, R12304, R12305, R12306, R12307, R12308, R12309, R12310, R12311, R12312, R12313, R12314, R12315, R12316, R12317, R12318, R12319, R12320, R12321, R12322, R12323, R12324, R12325, R12326, R12327, R12328, R12329, R12330, R12331, R12332, R12333, R12334, R12335, R12336, R12337, R12338, R12339, R12340, R12341, R12342, R12343, R12344, R12345, R12346, R12347, R12348, R12349, R12350, R12351, R12352, R12353, R12354, R12355, R12356, R12357, R12358, R12359, R12360, R12361, R12362, R12363, R12364, R12365, R12366, R12367, R12368, R12369, R12370, R12371, R12372, R12373, R12374, R12375, R12376, R12377, R12378, R12379, R12380, R12381, R12382, R12383, R12384, R12385, R12386, R12387, R12388, R12389, R12390, R12391, R12392, R12393, R12394, R12395, R12396, R15, R16, R2, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R4, R45, R47, R49, R5, R50, R53, R54, R55, R59, R60, R61, R65, R66, R67, R68, R73, R74, R75, R76, R77, R83, R84, R85, R86, R87, R88, R89, R90, R91, R92, R93, R94, R95, R96;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [70, 70];
  s0 -> s0 [71, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [70, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R15 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 69];
  s0 -> s0 [0, 65535] { R16 += 1 };
  s0 -> s2 [70, 70];
  s0 -> s1 [71, 65535];
  s1 -> s1 [0, 69];
  s1 -> s2 [70, 70];
  s1 -> s1 [71, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R24 += 1 };
  s0 -> s0 [0, 65535] { R23 += 1, R24 += 1 };
  s0 -> s2 [9, 13] { R24 += 1 };
  s0 -> s1 [14, 31] { R24 += 1 };
  s0 -> s2 [32, 32] { R24 += 1 };
  s0 -> s1 [33, 65535] { R24 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R24 += 1 };
  s2 -> s1 [0, 65535] { R24 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R25 += 1, R26 += 1 };
  s1 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R28 += 1 };
  s0 -> s0 [0, 65535] { R27 += 1, R28 += 1 };
  s0 -> s2 [9, 13] { R28 += 1 };
  s0 -> s1 [14, 31] { R28 += 1 };
  s0 -> s2 [32, 32] { R28 += 1 };
  s0 -> s1 [33, 65535] { R28 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R28 += 1 };
  s2 -> s1 [0, 65535] { R28 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R29 += 1, R30 += 1 };
  s1 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R12317 += 1, R12318 += 1 };
  s0 -> s1 [0, 65535] { R12318 += 1, R22 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R12318 += 1, R22 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 69] { R12320 += 1 };
  s0 -> s0 [0, 65535] { R12319 += 1, R12320 += 1 };
  s0 -> s2 [70, 70] { R12320 += 1 };
  s0 -> s3 [70, 70] { R12320 += 1 };
  s0 -> s1 [76, 65535] { R12320 += 1 };
  s1 -> s1 [0, 69] { R12320 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R12320 += 1 };
  s1 -> s3 [70, 70] { R12320 += 1 };
  s1 -> s1 [76, 65535] { R12320 += 1 };
  s2 -> s2 [0, 70] { R12320 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [76, 65535] { R12320 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 69] { R12322 += 1, R45 += 1 };
  s0 -> s0 [0, 65535] { R12321 += 1, R12322 += 1 };
  s0 -> s2 [70, 70] { R12322 += 1, R45 += 1 };
  s0 -> s3 [70, 70] { R12322 += 1, R45 += 1 };
  s0 -> s1 [71, 65535] { R12322 += 1, R45 += 1 };
  s1 -> s1 [0, 69] { R12322 += 1, R45 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R12322 += 1, R45 += 1 };
  s1 -> s3 [70, 70] { R12322 += 1, R45 += 1 };
  s1 -> s1 [71, 65535] { R12322 += 1, R45 += 1 };
  s2 -> s2 [0, 65535] { R12322 += 1, R45 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 69] { R12324 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R12323 += 1, R12324 += 1 };
  s0 -> s2 [70, 70] { R12324 += 1, R47 += 1 };
  s0 -> s3 [70, 70] { R12324 += 1, R47 += 1 };
  s0 -> s1 [71, 65535] { R12324 += 1, R47 += 1 };
  s1 -> s1 [0, 69] { R12324 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R12324 += 1, R47 += 1 };
  s1 -> s3 [70, 70] { R12324 += 1, R47 += 1 };
  s1 -> s1 [71, 65535] { R12324 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R12324 += 1, R47 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 69] { R12326 += 1, R49 += 1, R50 += 1 };
  s0 -> s0 [0, 65535] { R12325 += 1, R12326 += 1 };
  s0 -> s2 [70, 70] { R12326 += 1, R49 += 1, R50 += 1 };
  s0 -> s3 [70, 70] { R12326 += 1, R49 += 1, R50 += 1 };
  s0 -> s1 [71, 65535] { R12326 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 69] { R12326 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R12326 += 1, R49 += 1, R50 += 1 };
  s1 -> s3 [70, 70] { R12326 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [71, 65535] { R12326 += 1, R49 += 1, R50 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R12326 += 1, R49 += 1, R50 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 69] { R12328 += 1, R53 += 1, R54 += 1 };
  s0 -> s0 [0, 65535] { R12327 += 1, R12328 += 1 };
  s0 -> s2 [70, 70] { R12328 += 1, R53 += 1, R54 += 1 };
  s0 -> s3 [70, 70] { R12328 += 1, R53 += 1, R54 += 1 };
  s0 -> s1 [71, 65535] { R12328 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 69] { R12328 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R12328 += 1, R53 += 1, R54 += 1 };
  s1 -> s3 [70, 70] { R12328 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [71, 65535] { R12328 += 1, R53 += 1, R54 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R12328 += 1, R53 += 1, R54 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 69] { R12330 += 1, R59 += 1, R60 += 1 };
  s0 -> s0 [0, 65535] { R12329 += 1, R12330 += 1 };
  s0 -> s2 [70, 70] { R12330 += 1, R59 += 1, R60 += 1 };
  s0 -> s3 [70, 70] { R12330 += 1, R59 += 1, R60 += 1 };
  s0 -> s1 [71, 65535] { R12330 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 69] { R12330 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R12330 += 1, R59 += 1, R60 += 1 };
  s1 -> s3 [70, 70] { R12330 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [71, 65535] { R12330 += 1, R59 += 1, R60 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R12330 += 1, R59 += 1, R60 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 69] { R12332 += 1, R65 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R12331 += 1, R12332 += 1 };
  s0 -> s2 [70, 70] { R12332 += 1, R65 += 1, R66 += 1 };
  s0 -> s3 [70, 70] { R12332 += 1, R65 += 1, R66 += 1 };
  s0 -> s1 [71, 65535] { R12332 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 69] { R12332 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R12332 += 1, R65 += 1, R66 += 1 };
  s1 -> s3 [70, 70] { R12332 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [71, 65535] { R12332 += 1, R65 += 1, R66 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R12332 += 1, R65 += 1, R66 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 69] { R12334 += 1, R73 += 1, R74 += 1 };
  s0 -> s0 [0, 65535] { R12333 += 1, R12334 += 1 };
  s0 -> s2 [70, 70] { R12334 += 1, R73 += 1, R74 += 1 };
  s0 -> s3 [70, 70] { R12334 += 1, R73 += 1, R74 += 1 };
  s0 -> s1 [71, 65535] { R12334 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 69] { R12334 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R12334 += 1, R73 += 1, R74 += 1 };
  s1 -> s3 [70, 70] { R12334 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [71, 65535] { R12334 += 1, R73 += 1, R74 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R12334 += 1, R73 += 1, R74 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 69] { R12354 += 1 };
  s0 -> s0 [0, 65535] { R12353 += 1, R12354 += 1 };
  s0 -> s2 [70, 70] { R12354 += 1 };
  s0 -> s1 [71, 65535] { R12354 += 1 };
  s1 -> s1 [0, 69] { R12354 += 1 };
  s1 -> s2 [70, 70] { R12354 += 1 };
  s1 -> s1 [71, 65535] { R12354 += 1 };
  s2 -> s2 [0, 65535] { R12354 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R12355 += 1, R12356 += 1 };
  s0 -> s1 [0, 65535] { R12356 += 1, R2 += 1 };
  s1 -> s1 [0, 65535] { R12356 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 69] { R12358 += 1 };
  s0 -> s2 [0, 65535] { R12358 += 1, R12 += 1 };
  s0 -> s0 [0, 65535] { R12357 += 1, R12358 += 1 };
  s0 -> s3 [70, 70] { R12358 += 1 };
  s0 -> s1 [71, 65535] { R12358 += 1 };
  s1 -> s1 [0, 69] { R12358 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [70, 70] { R12358 += 1 };
  s1 -> s1 [71, 65535] { R12358 += 1 };
  s2 -> s1 [0, 69] { R12358 += 1 };
  s2 -> s2 [0, 65535] { R12358 += 1, R12 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [70, 70] { R12358 += 1 };
  s2 -> s1 [71, 65535] { R12358 += 1 };
  s3 -> s3 [0, 65535] { R12358 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 69] { R12360 += 1, R12298 += 1 };
  s0 -> s2 [0, 65535] { R12360 += 1, R12297 += 1, R12298 += 1 };
  s0 -> s0 [0, 65535] { R12359 += 1, R12360 += 1 };
  s0 -> s1 [71, 65535] { R12360 += 1, R12298 += 1 };
  s1 -> s1 [0, 69] { R12360 += 1, R12298 += 1 };
  s1 -> s1 [0, 65535] { R12360 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [71, 65535] { R12360 += 1, R12298 += 1 };
  s2 -> s1 [0, 69] { R12360 += 1, R12298 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R12360 += 1, R12297 += 1, R12298 += 1 };
  s2 -> s1 [71, 65535] { R12360 += 1, R12298 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s0 [0, 65535] { R12361 += 1, R12362 += 1 };
  s0 -> s1 [0, 65535] { R12362 += 1, R12300 += 1, R20 += 1 };
  s0 -> s2 [0, 65535] { R12362 += 1, R12299 += 1, R12300 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R12362 += 1, R12300 += 1, R20 += 1 };
  s1 -> s4 [0, 65535] { R12362 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R12362 += 1, R12300 += 1, R20 += 1 };
  s2 -> s2 [0, 65535] { R12362 += 1, R12299 += 1, R12300 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R12362 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 70] { R12364 += 1, R12302 += 1 };
  s0 -> s2 [0, 65535] { R12364 += 1, R12301 += 1, R12302 += 1 };
  s0 -> s0 [0, 65535] { R12363 += 1, R12364 += 1 };
  s0 -> s1 [75, 65535] { R12364 += 1, R12302 += 1 };
  s1 -> s1 [0, 70] { R12364 += 1, R12302 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R12364 += 1 };
  s1 -> s1 [75, 65535] { R12364 += 1, R12302 += 1 };
  s2 -> s1 [0, 70] { R12364 += 1, R12302 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R12364 += 1, R12301 += 1, R12302 += 1 };
  s2 -> s1 [75, 65535] { R12364 += 1, R12302 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s0 [0, 65535] { R12365 += 1, R12366 += 1 };
  s0 -> s1 [0, 65535] { R12366 += 1, R12304 += 1, R84 += 1 };
  s0 -> s2 [0, 65535] { R12366 += 1, R12303 += 1, R12304 += 1 };
  s1 -> s1 [0, 65535] { R12366 += 1, R12304 += 1, R84 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R12366 += 1 };
  s2 -> s1 [0, 65535] { R12366 += 1, R12304 += 1, R84 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R12366 += 1, R12303 += 1, R12304 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R12366 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 74] { R12368 += 1, R12306 += 1 };
  s0 -> s2 [0, 65535] { R12368 += 1, R12305 += 1, R12306 += 1 };
  s0 -> s0 [0, 65535] { R12367 += 1, R12368 += 1 };
  s0 -> s3 [0, 65535] { R12368 += 1, R12306 += 1, R86 += 1 };
  s0 -> s1 [76, 65535] { R12368 += 1, R12306 += 1 };
  s1 -> s1 [0, 74] { R12368 += 1, R12306 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R12368 += 1 };
  s1 -> s1 [76, 65535] { R12368 += 1, R12306 += 1 };
  s2 -> s1 [0, 74] { R12368 += 1, R12306 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R12368 += 1, R12305 += 1, R12306 += 1 };
  s2 -> s3 [0, 65535] { R12368 += 1, R12306 += 1, R86 += 1 };
  s2 -> s1 [76, 65535] { R12368 += 1, R12306 += 1 };
  s3 -> s1 [0, 74] { R12368 += 1, R12306 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R12368 += 1 };
  s3 -> s3 [0, 65535] { R12368 += 1, R12306 += 1, R86 += 1 };
  s3 -> s1 [76, 65535] { R12368 += 1, R12306 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R12368 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s0 [0, 65535] { R12369 += 1, R12370 += 1 };
  s0 -> s1 [0, 65535] { R12370 += 1, R12307 += 1, R12308 += 1 };
  s0 -> s2 [0, 65535] { R12370 += 1, R12308 += 1, R90 += 1 };
  s0 -> s3 [0, 65535] { R12370 += 1, R12308 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R12370 += 1, R12307 += 1, R12308 += 1 };
  s1 -> s2 [0, 65535] { R12370 += 1, R12308 += 1, R90 += 1 };
  s1 -> s3 [0, 65535] { R12370 += 1, R12308 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R12370 += 1 };
  s2 -> s2 [0, 65535] { R12370 += 1, R12308 += 1, R90 += 1 };
  s2 -> s3 [0, 65535] { R12370 += 1, R12308 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R12370 += 1 };
  s3 -> s3 [0, 65535] { R12370 += 1, R12308 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R12370 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s0 [0, 65535] { R12371 += 1, R12372 += 1 };
  s0 -> s1 [0, 65535] { R12372 += 1, R12310 += 1, R95 += 1, R96 += 1 };
  s0 -> s2 [0, 65535] { R12372 += 1, R12310 += 1, R94 += 1, R95 += 1 };
  s0 -> s3 [0, 65535] { R12372 += 1, R12309 += 1, R12310 += 1 };
  s1 -> s6 [0, 65535] { R12372 += 1, R12310 += 1 };
  s1 -> s1 [0, 65535] { R12372 += 1, R12310 += 1, R95 += 1, R96 += 1 };
  s1 -> s5 [0, 65535] { R12372 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R12372 += 1, R12310 += 1, R95 += 1, R96 += 1 };
  s2 -> s5 [0, 65535] { R12372 += 1 };
  s2 -> s2 [0, 65535] { R12372 += 1, R12310 += 1, R94 += 1, R95 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R12372 += 1, R12310 += 1, R95 += 1, R96 += 1 };
  s3 -> s2 [0, 65535] { R12372 += 1, R12310 += 1, R94 += 1, R95 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R12372 += 1, R12309 += 1, R12310 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R12372 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R12372 += 1, R12310 += 1 };
  s6 -> s5 [0, 65535] { R12372 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s0 [0, 65535] { R12373 += 1, R12374 += 1 };
  s0 -> s1 [0, 65535] { R12374 += 1, R12311 += 1, R12312 += 1 };
  s0 -> s2 [0, 65535] { R12374 += 1, R12312 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R12374 += 1, R12311 += 1, R12312 += 1 };
  s1 -> s2 [0, 65535] { R12374 += 1, R12312 += 1 };
  s2 -> s3 [0, 65535] { R12374 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R12374 += 1, R12312 += 1 };
  s3 -> s3 [0, 65535] { R12374 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 74] { R12376 += 1, R12314 += 1, R11844 += 1, R11846 += 1 };
  s0 -> s2 [0, 65535] { R12376 += 1, R12313 += 1, R12314 += 1 };
  s0 -> s0 [0, 65535] { R12375 += 1, R12376 += 1 };
  s0 -> s3 [0, 65535] { R12376 += 1, R12314 += 1, R11843 += 1, R11844 += 1 };
  s0 -> s4 [0, 65535] { R12376 += 1, R12314 += 1, R11844 += 1, R11845 += 1, R11846 += 1 };
  s0 -> s5 [75, 75] { R12376 += 1, R12314 += 1, R11844 += 1, R11846 += 1 };
  s0 -> s1 [76, 65535] { R12376 += 1, R12314 += 1, R11844 += 1, R11846 += 1 };
  s1 -> s1 [0, 74] { R12376 += 1, R12314 += 1, R11844 += 1, R11846 += 1 };
  s1 -> s5 [75, 75] { R12376 += 1, R12314 += 1, R11844 += 1, R11846 += 1 };
  s1 -> s1 [76, 65535] { R12376 += 1, R12314 += 1, R11844 += 1, R11846 += 1 };
  s2 -> s1 [0, 74] { R12376 += 1, R12314 += 1, R11844 += 1, R11846 += 1 };
  s2 -> s2 [0, 65535] { R12376 += 1, R12313 += 1, R12314 += 1 };
  s2 -> s3 [0, 65535] { R12376 += 1, R12314 += 1, R11843 += 1, R11844 += 1 };
  s2 -> s4 [0, 65535] { R12376 += 1, R12314 += 1, R11844 += 1, R11845 += 1, R11846 += 1 };
  s2 -> s5 [75, 75] { R12376 += 1, R12314 += 1, R11844 += 1, R11846 += 1 };
  s2 -> s1 [76, 65535] { R12376 += 1, R12314 += 1, R11844 += 1, R11846 += 1 };
  s3 -> s1 [0, 74] { R12376 += 1, R12314 += 1, R11844 += 1, R11846 += 1 };
  s3 -> s3 [0, 65535] { R12376 += 1, R12314 += 1, R11843 += 1, R11844 += 1 };
  s3 -> s4 [0, 65535] { R12376 += 1, R12314 += 1, R11844 += 1, R11845 += 1, R11846 += 1 };
  s3 -> s5 [75, 75] { R12376 += 1, R12314 += 1, R11844 += 1, R11846 += 1 };
  s3 -> s1 [76, 65535] { R12376 += 1, R12314 += 1, R11844 += 1, R11846 += 1 };
  s4 -> s1 [0, 74] { R12376 += 1, R12314 += 1, R11844 += 1, R11846 += 1 };
  s4 -> s4 [0, 65535] { R12376 += 1, R12314 += 1, R11844 += 1, R11845 += 1, R11846 += 1 };
  s4 -> s5 [75, 75] { R12376 += 1, R12314 += 1, R11844 += 1, R11846 += 1 };
  s4 -> s1 [76, 65535] { R12376 += 1, R12314 += 1, R11844 += 1, R11846 += 1 };
  s5 -> s6 [0, 65535] { R12376 += 1, R12314 += 1 };
  s5 -> s7 [0, 65535] { R12376 += 1, R12314 += 1, R11844 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s5 [0, 65535] { R12376 += 1, R12314 += 1, R11844 += 1, R11846 += 1 };
  s5 -> s9 [0, 65535] { R12376 += 1 };
  s6 -> s6 [0, 65535] { R12376 += 1, R12314 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s9 [0, 65535] { R12376 += 1 };
  s7 -> s6 [0, 65535] { R12376 += 1, R12314 += 1 };
  s7 -> s7 [0, 65535] { R12376 += 1, R12314 += 1, R11844 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s9 [0, 65535] { R12376 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R12376 += 1 };
  accepting s8, s5, s9, s6, s7;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 65535] { R12378 += 1, R12316 += 1, R12293 += 1, R12294 += 1, R12295 += 1 };
  s0 -> s0 [0, 65535] { R12377 += 1, R12378 += 1 };
  s0 -> s2 [0, 65535] { R12378 += 1, R12316 += 1 };
  s0 -> s3 [0, 65535] { R12378 += 1, R12315 += 1, R12316 += 1 };
  s0 -> s4 [0, 65535] { R12378 += 1, R12316 += 1, R12293 += 1, R12295 += 1, R12296 += 1 };
  s1 -> s1 [0, 65535] { R12378 += 1, R12316 += 1, R12293 += 1, R12294 += 1, R12295 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s2 [0, 65535] { R12378 += 1, R12316 += 1 };
  s1 -> s7 [0, 65535] { R12378 += 1 };
  s1 -> s4 [0, 65535] { R12378 += 1, R12316 += 1, R12293 += 1, R12295 += 1, R12296 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R12378 += 1, R12316 += 1 };
  s2 -> s7 [0, 65535] { R12378 += 1 };
  s3 -> s1 [0, 65535] { R12378 += 1, R12316 += 1, R12293 += 1, R12294 += 1, R12295 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R12378 += 1, R12316 += 1 };
  s3 -> s3 [0, 65535] { R12378 += 1, R12315 += 1, R12316 += 1 };
  s3 -> s4 [0, 65535] { R12378 += 1, R12316 += 1, R12293 += 1, R12295 += 1, R12296 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R12378 += 1, R12316 += 1, R12293 += 1 };
  s4 -> s2 [0, 65535] { R12378 += 1, R12316 += 1 };
  s4 -> s7 [0, 65535] { R12378 += 1 };
  s4 -> s4 [0, 65535] { R12378 += 1, R12316 += 1, R12293 += 1, R12295 += 1, R12296 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R12378 += 1, R12316 += 1, R12293 += 1 };
  s6 -> s2 [0, 65535] { R12378 += 1, R12316 += 1 };
  s6 -> s7 [0, 65535] { R12378 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R12378 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R12380 += 1, R12335 += 1, R12336 += 1 };
  s0 -> s2 [0, 65535] { R12380 += 1, R12336 += 1, R21 += 1 };
  s0 -> s0 [0, 65535] { R12379 += 1, R12380 += 1 };
  s1 -> s1 [0, 65535] { R12380 += 1, R12335 += 1, R12336 += 1 };
  s1 -> s2 [0, 65535] { R12380 += 1, R12336 += 1, R21 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R12380 += 1 };
  s2 -> s2 [0, 65535] { R12380 += 1, R12336 += 1, R21 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R12380 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 69] { R12382 += 1, R12338 += 1 };
  s0 -> s2 [0, 65535] { R12382 += 1, R12337 += 1, R12338 += 1 };
  s0 -> s0 [0, 65535] { R12381 += 1, R12382 += 1 };
  s0 -> s3 [70, 70] { R12382 += 1, R12338 += 1 };
  s0 -> s4 [70, 70] { R12382 += 1, R12338 += 1 };
  s0 -> s5 [75, 75] { R12382 += 1, R12338 += 1 };
  s0 -> s1 [76, 65535] { R12382 += 1, R12338 += 1 };
  s1 -> s1 [0, 69] { R12382 += 1, R12338 += 1 };
  s1 -> s3 [70, 70] { R12382 += 1, R12338 += 1 };
  s1 -> s4 [70, 70] { R12382 += 1, R12338 += 1 };
  s1 -> s5 [75, 75] { R12382 += 1, R12338 += 1 };
  s1 -> s1 [76, 65535] { R12382 += 1, R12338 += 1 };
  s2 -> s1 [0, 69] { R12382 += 1, R12338 += 1 };
  s2 -> s2 [0, 65535] { R12382 += 1, R12337 += 1, R12338 += 1 };
  s2 -> s3 [70, 70] { R12382 += 1, R12338 += 1 };
  s2 -> s4 [70, 70] { R12382 += 1, R12338 += 1 };
  s2 -> s5 [75, 75] { R12382 += 1, R12338 += 1 };
  s2 -> s1 [76, 65535] { R12382 += 1, R12338 += 1 };
  s3 -> s3 [0, 70] { R12382 += 1, R12338 += 1 };
  s3 -> s7 [75, 75] { R12382 += 1, R12338 += 1 };
  s3 -> s3 [76, 65535] { R12382 += 1, R12338 += 1 };
  s5 -> s5 [0, 69] { R12382 += 1, R12338 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R12382 += 1 };
  s5 -> s7 [70, 70] { R12382 += 1, R12338 += 1 };
  s5 -> s8 [70, 70] { R12382 += 1, R12338 += 1 };
  s5 -> s5 [75, 65535] { R12382 += 1, R12338 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 70] { R12382 += 1, R12338 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R12382 += 1 };
  s7 -> s7 [75, 65535] { R12382 += 1, R12338 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R12382 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 69] { R12384 += 1, R12340 += 1, R83 += 1 };
  s0 -> s2 [0, 65535] { R12384 += 1, R12339 += 1, R12340 += 1 };
  s0 -> s0 [0, 65535] { R12383 += 1, R12384 += 1 };
  s0 -> s3 [70, 70] { R12384 += 1, R12340 += 1, R83 += 1 };
  s0 -> s4 [70, 70] { R12384 += 1, R12340 += 1, R83 += 1 };
  s0 -> s1 [71, 65535] { R12384 += 1, R12340 += 1, R83 += 1 };
  s1 -> s1 [0, 69] { R12384 += 1, R12340 += 1, R83 += 1 };
  s1 -> s1 [0, 65535] { R12384 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [70, 70] { R12384 += 1, R12340 += 1, R83 += 1 };
  s1 -> s4 [70, 70] { R12384 += 1, R12340 += 1, R83 += 1 };
  s1 -> s1 [71, 65535] { R12384 += 1, R12340 += 1, R83 += 1 };
  s2 -> s1 [0, 69] { R12384 += 1, R12340 += 1, R83 += 1 };
  s2 -> s2 [0, 65535] { R12384 += 1, R12339 += 1, R12340 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [70, 70] { R12384 += 1, R12340 += 1, R83 += 1 };
  s2 -> s4 [70, 70] { R12384 += 1, R12340 += 1, R83 += 1 };
  s2 -> s1 [71, 65535] { R12384 += 1, R12340 += 1, R83 += 1 };
  s3 -> s3 [0, 65535] { R12384 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R12384 += 1 };
  s4 -> s4 [0, 65535] { R12384 += 1, R12340 += 1, R83 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R12384 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 69] { R12386 += 1, R12342 += 1, R85 += 1 };
  s0 -> s0 [0, 65535] { R12385 += 1, R12386 += 1 };
  s0 -> s2 [0, 65535] { R12386 += 1, R12341 += 1, R12342 += 1 };
  s0 -> s3 [70, 70] { R12386 += 1, R12342 += 1, R85 += 1 };
  s0 -> s4 [70, 70] { R12386 += 1, R12342 += 1, R85 += 1 };
  s0 -> s1 [71, 65535] { R12386 += 1, R12342 += 1, R85 += 1 };
  s1 -> s1 [0, 69] { R12386 += 1, R12342 += 1, R85 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R12386 += 1 };
  s1 -> s3 [70, 70] { R12386 += 1, R12342 += 1, R85 += 1 };
  s1 -> s4 [70, 70] { R12386 += 1, R12342 += 1, R85 += 1 };
  s1 -> s1 [71, 65535] { R12386 += 1, R12342 += 1, R85 += 1 };
  s2 -> s1 [0, 69] { R12386 += 1, R12342 += 1, R85 += 1 };
  s2 -> s2 [0, 65535] { R12386 += 1, R12341 += 1, R12342 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [70, 70] { R12386 += 1, R12342 += 1, R85 += 1 };
  s2 -> s4 [70, 70] { R12386 += 1, R12342 += 1, R85 += 1 };
  s2 -> s1 [71, 65535] { R12386 += 1, R12342 += 1, R85 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R12386 += 1 };
  s3 -> s3 [0, 65535] { R12386 += 1, R12342 += 1, R85 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R12386 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R12386 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 69] { R12388 += 1, R12344 += 1, R88 += 1 };
  s0 -> s2 [0, 69] { R12388 += 1, R12344 += 1, R87 += 1, R88 += 1 };
  s0 -> s0 [0, 65535] { R12387 += 1, R12388 += 1 };
  s0 -> s3 [0, 65535] { R12388 += 1, R12343 += 1, R12344 += 1 };
  s0 -> s4 [70, 70] { R12388 += 1, R12344 += 1, R88 += 1 };
  s0 -> s5 [70, 70] { R12388 += 1, R12344 += 1, R88 += 1 };
  s0 -> s6 [70, 70] { R12388 += 1, R12344 += 1, R87 += 1, R88 += 1 };
  s0 -> s7 [70, 70] { R12388 += 1, R12344 += 1, R87 += 1, R88 += 1 };
  s0 -> s1 [71, 74] { R12388 += 1, R12344 += 1, R88 += 1 };
  s0 -> s2 [71, 65535] { R12388 += 1, R12344 += 1, R87 += 1, R88 += 1 };
  s0 -> s8 [75, 75] { R12388 += 1, R12344 += 1, R88 += 1 };
  s0 -> s1 [76, 65535] { R12388 += 1, R12344 += 1, R88 += 1 };
  s1 -> s1 [0, 69] { R12388 += 1, R12344 += 1, R88 += 1 };
  s1 -> s4 [70, 70] { R12388 += 1, R12344 += 1, R88 += 1 };
  s1 -> s5 [70, 70] { R12388 += 1, R12344 += 1, R88 += 1 };
  s1 -> s1 [71, 74] { R12388 += 1, R12344 += 1, R88 += 1 };
  s1 -> s8 [75, 75] { R12388 += 1, R12344 += 1, R88 += 1 };
  s1 -> s1 [76, 65535] { R12388 += 1, R12344 += 1, R88 += 1 };
  s2 -> s1 [0, 69] { R12388 += 1, R12344 += 1, R88 += 1 };
  s2 -> s2 [0, 69] { R12388 += 1, R12344 += 1, R87 += 1, R88 += 1 };
  s2 -> s4 [70, 70] { R12388 += 1, R12344 += 1, R88 += 1 };
  s2 -> s5 [70, 70] { R12388 += 1, R12344 += 1, R88 += 1 };
  s2 -> s6 [70, 70] { R12388 += 1, R12344 += 1, R87 += 1, R88 += 1 };
  s2 -> s7 [70, 70] { R12388 += 1, R12344 += 1, R87 += 1, R88 += 1 };
  s2 -> s1 [71, 74] { R12388 += 1, R12344 += 1, R88 += 1 };
  s2 -> s2 [71, 65535] { R12388 += 1, R12344 += 1, R87 += 1, R88 += 1 };
  s2 -> s8 [75, 75] { R12388 += 1, R12344 += 1, R88 += 1 };
  s2 -> s1 [76, 65535] { R12388 += 1, R12344 += 1, R88 += 1 };
  s3 -> s1 [0, 69] { R12388 += 1, R12344 += 1, R88 += 1 };
  s3 -> s2 [0, 69] { R12388 += 1, R12344 += 1, R87 += 1, R88 += 1 };
  s3 -> s3 [0, 65535] { R12388 += 1, R12343 += 1, R12344 += 1 };
  s3 -> s4 [70, 70] { R12388 += 1, R12344 += 1, R88 += 1 };
  s3 -> s5 [70, 70] { R12388 += 1, R12344 += 1, R88 += 1 };
  s3 -> s6 [70, 70] { R12388 += 1, R12344 += 1, R87 += 1, R88 += 1 };
  s3 -> s7 [70, 70] { R12388 += 1, R12344 += 1, R87 += 1, R88 += 1 };
  s3 -> s1 [71, 74] { R12388 += 1, R12344 += 1, R88 += 1 };
  s3 -> s2 [71, 65535] { R12388 += 1, R12344 += 1, R87 += 1, R88 += 1 };
  s3 -> s8 [75, 75] { R12388 += 1, R12344 += 1, R88 += 1 };
  s3 -> s1 [76, 65535] { R12388 += 1, R12344 += 1, R88 += 1 };
  s5 -> s5 [0, 74] { R12388 += 1, R12344 += 1, R88 += 1 };
  s5 -> s10 [75, 75] { R12388 += 1, R12344 += 1, R88 += 1 };
  s5 -> s5 [76, 65535] { R12388 += 1, R12344 += 1, R88 += 1 };
  s6 -> s5 [0, 74] { R12388 += 1, R12344 += 1, R88 += 1 };
  s6 -> s6 [0, 65535] { R12388 += 1, R12344 += 1, R87 += 1, R88 += 1 };
  s6 -> s10 [75, 75] { R12388 += 1, R12344 += 1, R88 += 1 };
  s6 -> s5 [76, 65535] { R12388 += 1, R12344 += 1, R88 += 1 };
  s8 -> s8 [0, 69] { R12388 += 1, R12344 += 1, R88 += 1 };
  s8 -> s8 [0, 65535] { R12388 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [70, 70] { R12388 += 1, R12344 += 1, R88 += 1 };
  s8 -> s11 [70, 70] { R12388 += 1, R12344 += 1, R88 += 1 };
  s8 -> s8 [71, 65535] { R12388 += 1, R12344 += 1, R88 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R12388 += 1, R12344 += 1, R88 += 1 };
  s10 -> s9 [0, 65535];
  s10 -> s12 [0, 65535] { R12388 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R12388 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R12388 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 69] { R12390 += 1, R12346 += 1, R91 += 1, R92 += 1 };
  s0 -> s0 [0, 65535] { R12389 += 1, R12390 += 1 };
  s0 -> s2 [0, 65535] { R12390 += 1, R12345 += 1, R12346 += 1 };
  s0 -> s3 [70, 70] { R12390 += 1, R12346 += 1, R91 += 1, R92 += 1 };
  s0 -> s4 [70, 70] { R12390 += 1, R12346 += 1, R91 += 1, R92 += 1 };
  s0 -> s1 [71, 65535] { R12390 += 1, R12346 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 69] { R12390 += 1, R12346 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 65535] { R12390 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [70, 70] { R12390 += 1, R12346 += 1, R91 += 1, R92 += 1 };
  s1 -> s4 [70, 70] { R12390 += 1, R12346 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [71, 65535] { R12390 += 1, R12346 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [0, 69] { R12390 += 1, R12346 += 1, R91 += 1, R92 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R12390 += 1, R12345 += 1, R12346 += 1 };
  s2 -> s3 [70, 70] { R12390 += 1, R12346 += 1, R91 += 1, R92 += 1 };
  s2 -> s4 [70, 70] { R12390 += 1, R12346 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [71, 65535] { R12390 += 1, R12346 += 1, R91 += 1, R92 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R12390 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R12390 += 1, R12346 += 1, R91 += 1, R92 += 1 };
  s4 -> s6 [0, 65535] { R12390 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R12390 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 69] { R12392 += 1, R12348 += 1, R10159 += 1, R10160 += 1 };
  s0 -> s2 [0, 69] { R12392 += 1, R12348 += 1, R10160 += 1, R10161 += 1 };
  s0 -> s0 [0, 65535] { R12391 += 1, R12392 += 1 };
  s0 -> s3 [0, 65535] { R12392 += 1, R12347 += 1, R12348 += 1 };
  s0 -> s4 [70, 70] { R12392 += 1, R12348 += 1, R10159 += 1, R10160 += 1 };
  s0 -> s5 [70, 70] { R12392 += 1, R12348 += 1, R10159 += 1, R10160 += 1 };
  s0 -> s6 [70, 70] { R12392 += 1, R12348 += 1, R10160 += 1, R10161 += 1 };
  s0 -> s7 [70, 70] { R12392 += 1, R12348 += 1, R10160 += 1, R10161 += 1 };
  s0 -> s1 [71, 65535] { R12392 += 1, R12348 += 1, R10159 += 1, R10160 += 1 };
  s0 -> s2 [71, 65535] { R12392 += 1, R12348 += 1, R10160 += 1, R10161 += 1 };
  s1 -> s1 [0, 69] { R12392 += 1, R12348 += 1, R10159 += 1, R10160 += 1 };
  s1 -> s2 [0, 69] { R12392 += 1, R12348 += 1, R10160 += 1, R10161 += 1 };
  s1 -> s4 [70, 70] { R12392 += 1, R12348 += 1, R10159 += 1, R10160 += 1 };
  s1 -> s5 [70, 70] { R12392 += 1, R12348 += 1, R10159 += 1, R10160 += 1 };
  s1 -> s6 [70, 70] { R12392 += 1, R12348 += 1, R10160 += 1, R10161 += 1 };
  s1 -> s7 [70, 70] { R12392 += 1, R12348 += 1, R10160 += 1, R10161 += 1 };
  s1 -> s1 [71, 65535] { R12392 += 1, R12348 += 1, R10159 += 1, R10160 += 1 };
  s1 -> s2 [71, 65535] { R12392 += 1, R12348 += 1, R10160 += 1, R10161 += 1 };
  s2 -> s11 [0, 69] { R12392 += 1, R12348 += 1 };
  s2 -> s2 [0, 69] { R12392 += 1, R12348 += 1, R10160 += 1, R10161 += 1 };
  s2 -> s8 [70, 70] { R12392 += 1, R12348 += 1 };
  s2 -> s6 [70, 70] { R12392 += 1, R12348 += 1, R10160 += 1, R10161 += 1 };
  s2 -> s7 [70, 70] { R12392 += 1, R12348 += 1, R10160 += 1, R10161 += 1 };
  s2 -> s12 [70, 70] { R12392 += 1, R12348 += 1 };
  s2 -> s11 [71, 65535] { R12392 += 1, R12348 += 1 };
  s2 -> s2 [71, 65535] { R12392 += 1, R12348 += 1, R10160 += 1, R10161 += 1 };
  s3 -> s1 [0, 69] { R12392 += 1, R12348 += 1, R10159 += 1, R10160 += 1 };
  s3 -> s2 [0, 69] { R12392 += 1, R12348 += 1, R10160 += 1, R10161 += 1 };
  s3 -> s3 [0, 65535] { R12392 += 1, R12347 += 1, R12348 += 1 };
  s3 -> s4 [70, 70] { R12392 += 1, R12348 += 1, R10159 += 1, R10160 += 1 };
  s3 -> s5 [70, 70] { R12392 += 1, R12348 += 1, R10159 += 1, R10160 += 1 };
  s3 -> s6 [70, 70] { R12392 += 1, R12348 += 1, R10160 += 1, R10161 += 1 };
  s3 -> s7 [70, 70] { R12392 += 1, R12348 += 1, R10160 += 1, R10161 += 1 };
  s3 -> s1 [71, 65535] { R12392 += 1, R12348 += 1, R10159 += 1, R10160 += 1 };
  s3 -> s2 [71, 65535] { R12392 += 1, R12348 += 1, R10160 += 1, R10161 += 1 };
  s5 -> s5 [0, 65535] { R12392 += 1, R12348 += 1, R10159 += 1, R10160 += 1 };
  s5 -> s6 [0, 65535] { R12392 += 1, R12348 += 1, R10160 += 1, R10161 += 1 };
  s6 -> s8 [0, 65535] { R12392 += 1, R12348 += 1 };
  s6 -> s6 [0, 65535] { R12392 += 1, R12348 += 1, R10160 += 1, R10161 += 1 };
  s8 -> s8 [0, 65535] { R12392 += 1, R12348 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [0, 65535] { R12392 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R12392 += 1 };
  s11 -> s11 [0, 69] { R12392 += 1, R12348 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R12392 += 1 };
  s11 -> s8 [70, 70] { R12392 += 1, R12348 += 1 };
  s11 -> s12 [70, 70] { R12392 += 1, R12348 += 1 };
  s11 -> s11 [71, 65535] { R12392 += 1, R12348 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R12392 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 69] { R12394 += 1, R12350 += 1, R11839 += 1, R11840 += 1 };
  s0 -> s2 [0, 65535] { R12394 += 1, R12349 += 1, R12350 += 1 };
  s0 -> s0 [0, 65535] { R12393 += 1, R12394 += 1 };
  s0 -> s3 [70, 70] { R12394 += 1, R12350 += 1, R11839 += 1, R11840 += 1 };
  s0 -> s4 [70, 70] { R12394 += 1, R12350 += 1, R11839 += 1, R11840 += 1 };
  s0 -> s1 [71, 65535] { R12394 += 1, R12350 += 1, R11839 += 1, R11840 += 1 };
  s1 -> s1 [0, 69] { R12394 += 1, R12350 += 1, R11839 += 1, R11840 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R12394 += 1 };
  s1 -> s3 [70, 70] { R12394 += 1, R12350 += 1, R11839 += 1, R11840 += 1 };
  s1 -> s4 [70, 70] { R12394 += 1, R12350 += 1, R11839 += 1, R11840 += 1 };
  s1 -> s1 [71, 65535] { R12394 += 1, R12350 += 1, R11839 += 1, R11840 += 1 };
  s2 -> s1 [0, 69] { R12394 += 1, R12350 += 1, R11839 += 1, R11840 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R12394 += 1, R12349 += 1, R12350 += 1 };
  s2 -> s3 [70, 70] { R12394 += 1, R12350 += 1, R11839 += 1, R11840 += 1 };
  s2 -> s4 [70, 70] { R12394 += 1, R12350 += 1, R11839 += 1, R11840 += 1 };
  s2 -> s1 [71, 65535] { R12394 += 1, R12350 += 1, R11839 += 1, R11840 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R12394 += 1 };
  s3 -> s3 [0, 65535] { R12394 += 1, R12350 += 1, R11839 += 1, R11840 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R12394 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R12394 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 69] { R12396 += 1, R12352 += 1, R12287 += 1, R12288 += 1 };
  s0 -> s2 [0, 69] { R12396 += 1, R12352 += 1, R12288 += 1, R12289 += 1, R12290 += 1 };
  s0 -> s3 [0, 65535] { R12396 += 1, R12351 += 1, R12352 += 1 };
  s0 -> s0 [0, 65535] { R12395 += 1, R12396 += 1 };
  s0 -> s4 [70, 70] { R12396 += 1, R12352 += 1, R12287 += 1, R12288 += 1 };
  s0 -> s5 [70, 70] { R12396 += 1, R12352 += 1, R12288 += 1, R12289 += 1, R12290 += 1 };
  s0 -> s6 [70, 70] { R12396 += 1, R12352 += 1, R12287 += 1, R12288 += 1 };
  s0 -> s7 [70, 70] { R12396 += 1, R12352 += 1, R12288 += 1, R12289 += 1, R12290 += 1 };
  s0 -> s1 [71, 65535] { R12396 += 1, R12352 += 1, R12287 += 1, R12288 += 1 };
  s0 -> s2 [71, 65535] { R12396 += 1, R12352 += 1, R12288 += 1, R12289 += 1, R12290 += 1 };
  s1 -> s1 [0, 69] { R12396 += 1, R12352 += 1, R12287 += 1, R12288 += 1 };
  s1 -> s2 [0, 69] { R12396 += 1, R12352 += 1, R12288 += 1, R12289 += 1, R12290 += 1 };
  s1 -> s4 [70, 70] { R12396 += 1, R12352 += 1, R12287 += 1, R12288 += 1 };
  s1 -> s5 [70, 70] { R12396 += 1, R12352 += 1, R12288 += 1, R12289 += 1, R12290 += 1 };
  s1 -> s6 [70, 70] { R12396 += 1, R12352 += 1, R12287 += 1, R12288 += 1 };
  s1 -> s7 [70, 70] { R12396 += 1, R12352 += 1, R12288 += 1, R12289 += 1, R12290 += 1 };
  s1 -> s1 [71, 65535] { R12396 += 1, R12352 += 1, R12287 += 1, R12288 += 1 };
  s1 -> s2 [71, 65535] { R12396 += 1, R12352 += 1, R12288 += 1, R12289 += 1, R12290 += 1 };
  s2 -> s2 [0, 69] { R12396 += 1, R12352 += 1, R12288 += 1, R12289 += 1, R12290 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R12396 += 1 };
  s2 -> s5 [70, 70] { R12396 += 1, R12352 += 1, R12288 += 1, R12289 += 1, R12290 += 1 };
  s2 -> s7 [70, 70] { R12396 += 1, R12352 += 1, R12288 += 1, R12289 += 1, R12290 += 1 };
  s2 -> s2 [71, 65535] { R12396 += 1, R12352 += 1, R12288 += 1, R12289 += 1, R12290 += 1 };
  s3 -> s1 [0, 69] { R12396 += 1, R12352 += 1, R12287 += 1, R12288 += 1 };
  s3 -> s2 [0, 69] { R12396 += 1, R12352 += 1, R12288 += 1, R12289 += 1, R12290 += 1 };
  s3 -> s3 [0, 65535] { R12396 += 1, R12351 += 1, R12352 += 1 };
  s3 -> s4 [70, 70] { R12396 += 1, R12352 += 1, R12287 += 1, R12288 += 1 };
  s3 -> s5 [70, 70] { R12396 += 1, R12352 += 1, R12288 += 1, R12289 += 1, R12290 += 1 };
  s3 -> s6 [70, 70] { R12396 += 1, R12352 += 1, R12287 += 1, R12288 += 1 };
  s3 -> s7 [70, 70] { R12396 += 1, R12352 += 1, R12288 += 1, R12289 += 1, R12290 += 1 };
  s3 -> s1 [71, 65535] { R12396 += 1, R12352 += 1, R12287 += 1, R12288 += 1 };
  s3 -> s2 [71, 65535] { R12396 += 1, R12352 += 1, R12288 += 1, R12289 += 1, R12290 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s5 [0, 65535] { R12396 += 1, R12352 += 1, R12288 += 1, R12289 += 1, R12290 += 1 };
  s5 -> s9 [0, 65535] { R12396 += 1 };
  s6 -> s5 [0, 65535] { R12396 += 1, R12352 += 1, R12288 += 1, R12289 += 1, R12290 += 1 };
  s6 -> s6 [0, 65535] { R12396 += 1, R12352 += 1, R12287 += 1, R12288 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R12396 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R12396 += 1 };
  accepting s8, s5, s2, s9, s7;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [102, 102];
  accepting s1;
};
};
constraint R2 = R12314 && R3 = R12396 && R23 - R12396 = -1 && R24 = R12396 && R25 - R12396 = -1 && R26 = R12396 && R27 = 0 && R28 = 1 && R29 = 0 && R30 = 1 && R45 + R84 + R83 + -1*R11844 + -1*R11840 - R66 = 0 && R49 + R89 + R87 = 0 && R50 + R90 + R88 + -1*R11844 + -1*R11840 - R66 = 0 && R55 + R96 + R93 + -1*R11846 + -1*R11842 - R68 = 0 && R65 + R11843 + R11839 = 0 && R67 + R11845 + R11841 = 0 && R12313 = 0 && R12337 = 0 && R12338 = 0 && R12343 = 0 && R12344 = 0 && R12347 = 0 && R12348 = 0 && R12351 = 0 && R12352 = 0 && R12353 = 0 && R12354 = R12396 && R12355 = 0 && R12356 = R12396 && R12357 = 0 && R12358 = R12396 && R12359 = 0 && R12360 = R12396 && R12361 = 0 && R12362 = R12396 && R12363 = 0 && R12364 = R12396 && R12365 = 0 && R12366 = R12396 && R12367 = 0 && R12368 = R12396 && R12369 = 0 && R12370 = R12396 && R12371 = 0 && R12372 = R12396 && R12373 = 0 && R12374 = R12396 && R12375 = 0 && R12376 = R12396 && R12377 = 0 && R12378 = R12396 && R12379 = 0 && R12380 = R12396 && R12381 = 0 && R12382 = R12396 && R12383 = 0 && R12384 = R12396 && R12385 = 0 && R12386 = R12396 && R12387 = 0 && R12388 = R12396 && R12389 = 0 && R12390 = R12396 && R12391 = 0 && R12392 = R12396 && R12393 = 0 && R12394 = R12396 && R12395 = 0 && R12 < 1 && R15 < 1 && R16 < 1 && R47 + R86 + R85 < 1 && R61 + R10164 + R10161 < 1 && -1*R11844 + -1*R11840 - R66 < 1 && -1*R11846 + -1*R11842 - R68 < 1 && -1 < R12314 && 0 < R12396 && (R53 + R94 + R91 != 0 || R54 + R95 + R92 + -1*R11844 + -1*R11840 - R66 = 0 || R66 + R11844 + R11840 < 1) && (R59 + R10162 + R10159 != 0 || R60 + R10163 + R10160 + -1*R11844 + -1*R11840 - R66 = 0 || R66 + R11844 + R11840 < 1) && (R66 + R11844 + R11840 != 0 || ((R53 + R94 + R91 != 0 || R54 + R95 + R92 = 0 || R68 + R11846 + R11842 < 1) && (R53 + R94 + R91 = 0 || R68 + R11846 + R11842 < 1))) && (R66 + R11844 + R11840 != 0 || ((R59 + R10162 + R10159 != 0 || R60 + R10163 + R10160 = 0 || R68 + R11846 + R11842 < 1) && (R59 + R10162 + R10159 = 0 || R68 + R11846 + R11842 < 1))) && (R66 + R11844 + R11840 != 0 || ((R73 + R12292 + R12287 != 0 || R74 + R12293 + R12288 = 0 || R68 + R11846 + R11842 < 1) && (R73 + R12292 + R12287 = 0 || R68 + R11846 + R11842 < 1))) && (R68 + R11846 + R11842 != 0 || R77 + R12296 + R12291 = 0 || (R75 + R12294 + R12289 = 0 && R76 + R12295 + R12290 = 0)) && (R73 + R12292 + R12287 != 0 || R66 + R11844 + R11840 + -1*R12293 + -1*R12288 - R74 = 0 || R66 + R11844 + R11840 < 1) && (R75 + R12294 + R12289 != 0 || R68 + R11846 + R11842 + -1*R12295 + -1*R12290 - R76 = 0 || R68 + R11846 + R11842 < 1) && (R12297 != 0 || R12298 = R12314 || (R20 = 0 && R12314 = 0)) && (R12299 != 0 || R12300 = R12314 || (R20 = 0 && R12314 = 0)) && (R12301 != 0 || R12302 = R12314 || (R20 = 0 && R12314 = 0)) && (R12303 != 0 || R12304 = R12314 || (R20 = 0 && R12314 = 0)) && (R12305 != 0 || R12306 = R12314 || (R20 = 0 && R12314 = 0)) && (R12307 != 0 || R12308 = R12314 || (R20 = 0 && R12314 = 0)) && (R12309 != 0 || R12310 = R12314 || (R20 = 0 && R12314 = 0)) && (R12311 != 0 || R12312 = R12314 || (R20 = 0 && R12314 = 0)) && (R12315 != 0 || R12314 = R12316 || (R20 = 0 && R12314 = 0)) && (R21 = 0 || (R12335 = 0 && R12336 = 0)) && (R21 = 0 || (R12339 = 0 && R12340 = 0)) && (R21 = 0 || (R12341 = 0 && R12342 = 0)) && (R21 = 0 || (R12345 = 0 && R12346 = 0)) && (R21 = 0 || (R12349 = 0 && R12350 = 0)) && (R22 = 0 || (R12317 = 0 && R12318 = 0)) && (R22 = 0 || (R12319 = 0 && R12320 = 0)) && (R22 = 0 || (R12321 = 0 && R12322 = 0)) && (R22 = 0 || (R12323 = 0 && R12324 = 0)) && (R22 = 0 || (R12325 = 0 && R12326 = 0)) && (R22 = 0 || (R12327 = 0 && R12328 = 0)) && (R22 = 0 || (R12329 = 0 && R12330 = 0)) && (R22 = 0 || (R12331 = 0 && R12332 = 0)) && (R22 = 0 || (R12333 = 0 && R12334 = 0)) && (R53 + R94 + R91 = 0 || R66 + R11844 + R11840 < 1) && (R59 + R10162 + R10159 = 0 || R66 + R11844 + R11840 < 1) && (R73 + R12292 + R12287 = 0 || R66 + R11844 + R11840 < 1) && (R75 + R12294 + R12289 = 0 || R68 + R11846 + R11842 < 1) && (R12297 = 0 || (R20 = 0 && R12314 = 0)) && (R12299 = 0 || (R20 = 0 && R12314 = 0)) && (R12301 = 0 || (R20 = 0 && R12314 = 0)) && (R12303 = 0 || (R20 = 0 && R12314 = 0)) && (R12305 = 0 || (R20 = 0 && R12314 = 0)) && (R12307 = 0 || (R20 = 0 && R12314 = 0)) && (R12309 = 0 || (R20 = 0 && R12314 = 0)) && (R12311 = 0 || (R20 = 0 && R12314 = 0)) && (R12315 = 0 || (R20 = 0 && R12314 = 0));
// End of Parikh automata intersection problem
