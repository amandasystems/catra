// Parikh automata intersection problem, generated by OSTRICH+
counter int R10159, R10160, R10161, R10162, R10163, R10164, R10165, R10166, R10167, R10168, R10169, R10170, R10171, R10172, R10173, R10174, R10175, R10176, R10177, R10178, R10179, R10180, R10181, R10182, R10183, R10184, R10185, R10186, R10187, R10188, R10189, R10190, R10191, R10192, R10193, R10194, R10195, R10196, R10197, R10198, R10199, R10200, R10201, R10202, R10203, R10204, R10205, R10206, R10207, R10208, R10209, R10210, R10211, R10212, R10213, R10214, R10215, R10216, R10217, R10218, R10219, R10220, R10221, R10222, R10223, R10224, R10225, R10226, R10227, R10228, R10229, R10230, R10231, R10232, R10233, R10234, R10235, R10236, R10237, R10238, R10239, R10240, R10241, R10242, R10243, R10244, R10245, R10246, R10247, R10248, R10249, R10250, R10251, R10252, R10253, R10254, R10255, R10256, R10257, R10258, R10259, R10260, R10261, R10262, R10263, R10264, R10265, R10266, R10267, R10268, R10269, R10270, R10271, R10272, R10273, R10274, R10275, R10276, R10277, R10278, R10279, R10280, R10281, R10282, R12, R15, R16, R2, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R4, R45, R47, R49, R5, R50, R53, R54, R55, R59, R60, R61, R65, R66, R67, R68, R73, R74, R75, R76, R77, R83, R84, R85, R86, R87, R88, R89, R90, R91, R92, R93, R94, R95, R96;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [70, 70];
  s0 -> s0 [71, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [70, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R15 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 69];
  s0 -> s0 [0, 65535] { R16 += 1 };
  s0 -> s2 [70, 70];
  s0 -> s1 [71, 65535];
  s1 -> s1 [0, 69];
  s1 -> s2 [70, 70];
  s1 -> s1 [71, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R24 += 1 };
  s0 -> s0 [0, 65535] { R23 += 1, R24 += 1 };
  s0 -> s2 [9, 13] { R24 += 1 };
  s0 -> s1 [14, 31] { R24 += 1 };
  s0 -> s2 [32, 32] { R24 += 1 };
  s0 -> s1 [33, 65535] { R24 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R24 += 1 };
  s2 -> s1 [0, 65535] { R24 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R25 += 1, R26 += 1 };
  s1 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R28 += 1 };
  s0 -> s0 [0, 65535] { R27 += 1, R28 += 1 };
  s0 -> s2 [9, 13] { R28 += 1 };
  s0 -> s1 [14, 31] { R28 += 1 };
  s0 -> s2 [32, 32] { R28 += 1 };
  s0 -> s1 [33, 65535] { R28 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R28 += 1 };
  s2 -> s1 [0, 65535] { R28 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R29 += 1, R30 += 1 };
  s1 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R10203 += 1, R10204 += 1 };
  s0 -> s1 [0, 65535] { R10204 += 1, R22 += 1 };
  s1 -> s1 [0, 65535] { R10204 += 1, R22 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 69] { R10206 += 1 };
  s0 -> s0 [0, 65535] { R10205 += 1, R10206 += 1 };
  s0 -> s2 [70, 70] { R10206 += 1 };
  s0 -> s3 [70, 70] { R10206 += 1 };
  s0 -> s1 [76, 65535] { R10206 += 1 };
  s1 -> s1 [0, 69] { R10206 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R10206 += 1 };
  s1 -> s3 [70, 70] { R10206 += 1 };
  s1 -> s1 [76, 65535] { R10206 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 70] { R10206 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [76, 65535] { R10206 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 69] { R10208 += 1, R45 += 1 };
  s0 -> s0 [0, 65535] { R10207 += 1, R10208 += 1 };
  s0 -> s2 [70, 70] { R10208 += 1, R45 += 1 };
  s0 -> s3 [70, 70] { R10208 += 1, R45 += 1 };
  s0 -> s1 [71, 65535] { R10208 += 1, R45 += 1 };
  s1 -> s1 [0, 69] { R10208 += 1, R45 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R10208 += 1, R45 += 1 };
  s1 -> s3 [70, 70] { R10208 += 1, R45 += 1 };
  s1 -> s1 [71, 65535] { R10208 += 1, R45 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10208 += 1, R45 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 69] { R10210 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R10209 += 1, R10210 += 1 };
  s0 -> s2 [70, 70] { R10210 += 1, R47 += 1 };
  s0 -> s3 [70, 70] { R10210 += 1, R47 += 1 };
  s0 -> s1 [71, 65535] { R10210 += 1, R47 += 1 };
  s1 -> s1 [0, 69] { R10210 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R10210 += 1, R47 += 1 };
  s1 -> s3 [70, 70] { R10210 += 1, R47 += 1 };
  s1 -> s1 [71, 65535] { R10210 += 1, R47 += 1 };
  s2 -> s2 [0, 65535] { R10210 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 69] { R10212 += 1, R49 += 1, R50 += 1 };
  s0 -> s0 [0, 65535] { R10211 += 1, R10212 += 1 };
  s0 -> s2 [70, 70] { R10212 += 1, R49 += 1, R50 += 1 };
  s0 -> s3 [70, 70] { R10212 += 1, R49 += 1, R50 += 1 };
  s0 -> s1 [71, 65535] { R10212 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 69] { R10212 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R10212 += 1, R49 += 1, R50 += 1 };
  s1 -> s3 [70, 70] { R10212 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [71, 65535] { R10212 += 1, R49 += 1, R50 += 1 };
  s2 -> s2 [0, 65535] { R10212 += 1, R49 += 1, R50 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 69] { R10214 += 1, R53 += 1, R54 += 1 };
  s0 -> s0 [0, 65535] { R10213 += 1, R10214 += 1 };
  s0 -> s2 [70, 70] { R10214 += 1, R53 += 1, R54 += 1 };
  s0 -> s3 [70, 70] { R10214 += 1, R53 += 1, R54 += 1 };
  s0 -> s1 [71, 65535] { R10214 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 69] { R10214 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R10214 += 1, R53 += 1, R54 += 1 };
  s1 -> s3 [70, 70] { R10214 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [71, 65535] { R10214 += 1, R53 += 1, R54 += 1 };
  s2 -> s2 [0, 65535] { R10214 += 1, R53 += 1, R54 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 69] { R10216 += 1, R59 += 1, R60 += 1 };
  s0 -> s0 [0, 65535] { R10215 += 1, R10216 += 1 };
  s0 -> s2 [70, 70] { R10216 += 1, R59 += 1, R60 += 1 };
  s0 -> s3 [70, 70] { R10216 += 1, R59 += 1, R60 += 1 };
  s0 -> s1 [71, 65535] { R10216 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 69] { R10216 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R10216 += 1, R59 += 1, R60 += 1 };
  s1 -> s3 [70, 70] { R10216 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [71, 65535] { R10216 += 1, R59 += 1, R60 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10216 += 1, R59 += 1, R60 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 69] { R10218 += 1, R65 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R10217 += 1, R10218 += 1 };
  s0 -> s2 [70, 70] { R10218 += 1, R65 += 1, R66 += 1 };
  s0 -> s3 [70, 70] { R10218 += 1, R65 += 1, R66 += 1 };
  s0 -> s1 [71, 65535] { R10218 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 69] { R10218 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R10218 += 1, R65 += 1, R66 += 1 };
  s1 -> s3 [70, 70] { R10218 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [71, 65535] { R10218 += 1, R65 += 1, R66 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10218 += 1, R65 += 1, R66 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 69] { R10220 += 1, R73 += 1, R74 += 1 };
  s0 -> s0 [0, 65535] { R10219 += 1, R10220 += 1 };
  s0 -> s2 [70, 70] { R10220 += 1, R73 += 1, R74 += 1 };
  s0 -> s3 [70, 70] { R10220 += 1, R73 += 1, R74 += 1 };
  s0 -> s1 [71, 65535] { R10220 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 69] { R10220 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R10220 += 1, R73 += 1, R74 += 1 };
  s1 -> s3 [70, 70] { R10220 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [71, 65535] { R10220 += 1, R73 += 1, R74 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10220 += 1, R73 += 1, R74 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 69] { R10240 += 1 };
  s0 -> s0 [0, 65535] { R10239 += 1, R10240 += 1 };
  s0 -> s2 [70, 70] { R10240 += 1 };
  s0 -> s1 [71, 65535] { R10240 += 1 };
  s1 -> s1 [0, 69] { R10240 += 1 };
  s1 -> s2 [70, 70] { R10240 += 1 };
  s1 -> s1 [71, 65535] { R10240 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10240 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R10241 += 1, R10242 += 1 };
  s0 -> s1 [0, 65535] { R10242 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R10242 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 69] { R10244 += 1 };
  s0 -> s2 [0, 65535] { R10244 += 1, R12 += 1 };
  s0 -> s0 [0, 65535] { R10243 += 1, R10244 += 1 };
  s0 -> s3 [70, 70] { R10244 += 1 };
  s0 -> s1 [71, 65535] { R10244 += 1 };
  s1 -> s1 [0, 69] { R10244 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [70, 70] { R10244 += 1 };
  s1 -> s1 [71, 65535] { R10244 += 1 };
  s2 -> s1 [0, 69] { R10244 += 1 };
  s2 -> s2 [0, 65535] { R10244 += 1, R12 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [70, 70] { R10244 += 1 };
  s2 -> s1 [71, 65535] { R10244 += 1 };
  s3 -> s3 [0, 65535] { R10244 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 69] { R10246 += 1, R10184 += 1 };
  s0 -> s2 [0, 65535] { R10246 += 1, R10183 += 1, R10184 += 1 };
  s0 -> s0 [0, 65535] { R10245 += 1, R10246 += 1 };
  s0 -> s1 [71, 65535] { R10246 += 1, R10184 += 1 };
  s1 -> s1 [0, 69] { R10246 += 1, R10184 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R10246 += 1 };
  s1 -> s1 [71, 65535] { R10246 += 1, R10184 += 1 };
  s2 -> s1 [0, 69] { R10246 += 1, R10184 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10246 += 1, R10183 += 1, R10184 += 1 };
  s2 -> s1 [71, 65535] { R10246 += 1, R10184 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R10248 += 1, R10185 += 1, R10186 += 1 };
  s0 -> s2 [0, 65535] { R10248 += 1, R10186 += 1, R20 += 1 };
  s0 -> s0 [0, 65535] { R10247 += 1, R10248 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R10248 += 1, R10185 += 1, R10186 += 1 };
  s1 -> s2 [0, 65535] { R10248 += 1, R10186 += 1, R20 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R10248 += 1 };
  s2 -> s2 [0, 65535] { R10248 += 1, R10186 += 1, R20 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10248 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 70] { R10250 += 1, R10188 += 1 };
  s0 -> s2 [0, 65535] { R10250 += 1, R10187 += 1, R10188 += 1 };
  s0 -> s0 [0, 65535] { R10249 += 1, R10250 += 1 };
  s0 -> s1 [75, 65535] { R10250 += 1, R10188 += 1 };
  s1 -> s1 [0, 70] { R10250 += 1, R10188 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R10250 += 1 };
  s1 -> s1 [75, 65535] { R10250 += 1, R10188 += 1 };
  s2 -> s1 [0, 70] { R10250 += 1, R10188 += 1 };
  s2 -> s2 [0, 65535] { R10250 += 1, R10187 += 1, R10188 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [75, 65535] { R10250 += 1, R10188 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R10252 += 1, R10189 += 1, R10190 += 1 };
  s0 -> s0 [0, 65535] { R10251 += 1, R10252 += 1 };
  s0 -> s2 [0, 65535] { R10252 += 1, R10190 += 1, R84 += 1 };
  s1 -> s1 [0, 65535] { R10252 += 1, R10189 += 1, R10190 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R10252 += 1, R10190 += 1, R84 += 1 };
  s2 -> s3 [0, 65535] { R10252 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10252 += 1, R10190 += 1, R84 += 1 };
  s3 -> s3 [0, 65535] { R10252 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 74] { R10254 += 1, R10192 += 1 };
  s0 -> s0 [0, 65535] { R10253 += 1, R10254 += 1 };
  s0 -> s2 [0, 65535] { R10254 += 1, R10191 += 1, R10192 += 1 };
  s0 -> s3 [0, 65535] { R10254 += 1, R10192 += 1, R86 += 1 };
  s0 -> s1 [76, 65535] { R10254 += 1, R10192 += 1 };
  s1 -> s1 [0, 74] { R10254 += 1, R10192 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10254 += 1 };
  s1 -> s1 [76, 65535] { R10254 += 1, R10192 += 1 };
  s2 -> s1 [0, 74] { R10254 += 1, R10192 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10254 += 1, R10191 += 1, R10192 += 1 };
  s2 -> s3 [0, 65535] { R10254 += 1, R10192 += 1, R86 += 1 };
  s2 -> s1 [76, 65535] { R10254 += 1, R10192 += 1 };
  s3 -> s1 [0, 74] { R10254 += 1, R10192 += 1 };
  s3 -> s4 [0, 65535] { R10254 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10254 += 1, R10192 += 1, R86 += 1 };
  s3 -> s1 [76, 65535] { R10254 += 1, R10192 += 1 };
  s4 -> s4 [0, 65535] { R10254 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s0 [0, 65535] { R10255 += 1, R10256 += 1 };
  s0 -> s1 [0, 65535] { R10256 += 1, R10194 += 1 };
  s0 -> s2 [0, 65535] { R10256 += 1, R10194 += 1, R90 += 1 };
  s0 -> s3 [0, 65535] { R10256 += 1, R10193 += 1, R10194 += 1 };
  s1 -> s1 [0, 65535] { R10256 += 1, R10194 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R10256 += 1 };
  s2 -> s1 [0, 65535] { R10256 += 1, R10194 += 1 };
  s2 -> s2 [0, 65535] { R10256 += 1, R10194 += 1, R90 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R10256 += 1 };
  s3 -> s1 [0, 65535] { R10256 += 1, R10194 += 1 };
  s3 -> s2 [0, 65535] { R10256 += 1, R10194 += 1, R90 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10256 += 1, R10193 += 1, R10194 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10256 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R10258 += 1, R10195 += 1, R10196 += 1 };
  s0 -> s2 [0, 65535] { R10258 += 1, R10196 += 1, R95 += 1, R96 += 1 };
  s0 -> s0 [0, 65535] { R10257 += 1, R10258 += 1 };
  s0 -> s3 [0, 65535] { R10258 += 1, R10196 += 1, R94 += 1, R95 += 1 };
  s1 -> s1 [0, 65535] { R10258 += 1, R10195 += 1, R10196 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R10258 += 1, R10196 += 1, R95 += 1, R96 += 1 };
  s1 -> s3 [0, 65535] { R10258 += 1, R10196 += 1, R94 += 1, R95 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10258 += 1, R10196 += 1, R95 += 1, R96 += 1 };
  s2 -> s6 [0, 65535] { R10258 += 1, R10196 += 1 };
  s2 -> s5 [0, 65535] { R10258 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R10258 += 1, R10196 += 1, R95 += 1, R96 += 1 };
  s3 -> s3 [0, 65535] { R10258 += 1, R10196 += 1, R94 += 1, R95 += 1 };
  s3 -> s5 [0, 65535] { R10258 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10258 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R10258 += 1, R10196 += 1 };
  s6 -> s5 [0, 65535] { R10258 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 65535] { R10260 += 1, R10198 += 1 };
  s0 -> s2 [0, 65535] { R10260 += 1, R10197 += 1, R10198 += 1 };
  s0 -> s0 [0, 65535] { R10259 += 1, R10260 += 1 };
  s1 -> s1 [0, 65535] { R10260 += 1, R10198 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R10260 += 1 };
  s2 -> s1 [0, 65535] { R10260 += 1, R10198 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10260 += 1, R10197 += 1, R10198 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10260 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R10262 += 1, R10200 += 1, R10170 += 1, R10172 += 1 };
  s0 -> s2 [0, 65535] { R10262 += 1, R10199 += 1, R10200 += 1 };
  s0 -> s3 [0, 65535] { R10262 += 1, R10200 += 1 };
  s0 -> s0 [0, 65535] { R10261 += 1, R10262 += 1 };
  s0 -> s4 [0, 65535] { R10262 += 1, R10200 += 1, R10170 += 1 };
  s1 -> s1 [0, 65535] { R10262 += 1, R10200 += 1, R10170 += 1, R10172 += 1 };
  s1 -> s3 [0, 65535] { R10262 += 1, R10200 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R10262 += 1 };
  s1 -> s4 [0, 65535] { R10262 += 1, R10200 += 1, R10170 += 1 };
  s2 -> s1 [0, 65535] { R10262 += 1, R10200 += 1, R10170 += 1, R10172 += 1 };
  s2 -> s2 [0, 65535] { R10262 += 1, R10199 += 1, R10200 += 1 };
  s2 -> s3 [0, 65535] { R10262 += 1, R10200 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [0, 65535] { R10262 += 1, R10200 += 1, R10170 += 1 };
  s3 -> s3 [0, 65535] { R10262 += 1, R10200 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R10262 += 1 };
  s4 -> s3 [0, 65535] { R10262 += 1, R10200 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R10262 += 1 };
  s4 -> s4 [0, 65535] { R10262 += 1, R10200 += 1, R10170 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10262 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s0 [0, 65535] { R10263 += 1, R10264 += 1 };
  s0 -> s1 [0, 65535] { R10264 += 1, R10202 += 1 };
  s0 -> s2 [0, 65535] { R10264 += 1, R10202 += 1, R10179 += 1 };
  s0 -> s3 [0, 65535] { R10264 += 1, R10201 += 1, R10202 += 1 };
  s1 -> s5 [0, 65535] { R10264 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R10264 += 1, R10202 += 1 };
  s2 -> s5 [0, 65535] { R10264 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R10264 += 1, R10202 += 1 };
  s2 -> s2 [0, 65535] { R10264 += 1, R10202 += 1, R10179 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R10264 += 1, R10202 += 1 };
  s3 -> s2 [0, 65535] { R10264 += 1, R10202 += 1, R10179 += 1 };
  s3 -> s3 [0, 65535] { R10264 += 1, R10201 += 1, R10202 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10264 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R10266 += 1, R10222 += 1, R21 += 1 };
  s0 -> s0 [0, 65535] { R10265 += 1, R10266 += 1 };
  s0 -> s2 [0, 65535] { R10266 += 1, R10221 += 1, R10222 += 1 };
  s1 -> s1 [0, 65535] { R10266 += 1, R10222 += 1, R21 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R10266 += 1 };
  s2 -> s1 [0, 65535] { R10266 += 1, R10222 += 1, R21 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10266 += 1, R10221 += 1, R10222 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10266 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 69] { R10268 += 1, R10224 += 1 };
  s0 -> s0 [0, 65535] { R10267 += 1, R10268 += 1 };
  s0 -> s2 [0, 65535] { R10268 += 1, R10223 += 1, R10224 += 1 };
  s0 -> s3 [70, 70] { R10268 += 1, R10224 += 1 };
  s0 -> s4 [70, 70] { R10268 += 1, R10224 += 1 };
  s0 -> s5 [75, 75] { R10268 += 1, R10224 += 1 };
  s0 -> s1 [76, 65535] { R10268 += 1, R10224 += 1 };
  s1 -> s1 [0, 69] { R10268 += 1, R10224 += 1 };
  s1 -> s3 [70, 70] { R10268 += 1, R10224 += 1 };
  s1 -> s4 [70, 70] { R10268 += 1, R10224 += 1 };
  s1 -> s5 [75, 75] { R10268 += 1, R10224 += 1 };
  s1 -> s1 [76, 65535] { R10268 += 1, R10224 += 1 };
  s2 -> s1 [0, 69] { R10268 += 1, R10224 += 1 };
  s2 -> s2 [0, 65535] { R10268 += 1, R10223 += 1, R10224 += 1 };
  s2 -> s3 [70, 70] { R10268 += 1, R10224 += 1 };
  s2 -> s4 [70, 70] { R10268 += 1, R10224 += 1 };
  s2 -> s5 [75, 75] { R10268 += 1, R10224 += 1 };
  s2 -> s1 [76, 65535] { R10268 += 1, R10224 += 1 };
  s4 -> s4 [0, 70] { R10268 += 1, R10224 += 1 };
  s4 -> s7 [75, 75] { R10268 += 1, R10224 += 1 };
  s4 -> s4 [76, 65535] { R10268 += 1, R10224 += 1 };
  s5 -> s5 [0, 69] { R10268 += 1, R10224 += 1 };
  s5 -> s5 [0, 65535] { R10268 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [70, 70] { R10268 += 1, R10224 += 1 };
  s5 -> s8 [70, 70] { R10268 += 1, R10224 += 1 };
  s5 -> s5 [75, 65535] { R10268 += 1, R10224 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 70] { R10268 += 1, R10224 += 1 };
  s7 -> s7 [0, 65535] { R10268 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [75, 65535] { R10268 += 1, R10224 += 1 };
  s8 -> s8 [0, 65535] { R10268 += 1 };
  s8 -> s6 [0, 65535];
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 69] { R10270 += 1, R10226 += 1, R83 += 1 };
  s0 -> s2 [0, 65535] { R10270 += 1, R10225 += 1, R10226 += 1 };
  s0 -> s0 [0, 65535] { R10269 += 1, R10270 += 1 };
  s0 -> s3 [70, 70] { R10270 += 1, R10226 += 1, R83 += 1 };
  s0 -> s4 [70, 70] { R10270 += 1, R10226 += 1, R83 += 1 };
  s0 -> s1 [71, 65535] { R10270 += 1, R10226 += 1, R83 += 1 };
  s1 -> s1 [0, 69] { R10270 += 1, R10226 += 1, R83 += 1 };
  s1 -> s1 [0, 65535] { R10270 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [70, 70] { R10270 += 1, R10226 += 1, R83 += 1 };
  s1 -> s4 [70, 70] { R10270 += 1, R10226 += 1, R83 += 1 };
  s1 -> s1 [71, 65535] { R10270 += 1, R10226 += 1, R83 += 1 };
  s2 -> s1 [0, 69] { R10270 += 1, R10226 += 1, R83 += 1 };
  s2 -> s2 [0, 65535] { R10270 += 1, R10225 += 1, R10226 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [70, 70] { R10270 += 1, R10226 += 1, R83 += 1 };
  s2 -> s4 [70, 70] { R10270 += 1, R10226 += 1, R83 += 1 };
  s2 -> s1 [71, 65535] { R10270 += 1, R10226 += 1, R83 += 1 };
  s3 -> s3 [0, 65535] { R10270 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R10270 += 1, R10226 += 1, R83 += 1 };
  s4 -> s5 [0, 65535] { R10270 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R10270 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 69] { R10272 += 1, R10228 += 1, R85 += 1 };
  s0 -> s2 [0, 65535] { R10272 += 1, R10227 += 1, R10228 += 1 };
  s0 -> s0 [0, 65535] { R10271 += 1, R10272 += 1 };
  s0 -> s3 [70, 70] { R10272 += 1, R10228 += 1, R85 += 1 };
  s0 -> s4 [70, 70] { R10272 += 1, R10228 += 1, R85 += 1 };
  s0 -> s1 [71, 65535] { R10272 += 1, R10228 += 1, R85 += 1 };
  s1 -> s1 [0, 69] { R10272 += 1, R10228 += 1, R85 += 1 };
  s1 -> s1 [0, 65535] { R10272 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [70, 70] { R10272 += 1, R10228 += 1, R85 += 1 };
  s1 -> s4 [70, 70] { R10272 += 1, R10228 += 1, R85 += 1 };
  s1 -> s1 [71, 65535] { R10272 += 1, R10228 += 1, R85 += 1 };
  s2 -> s1 [0, 69] { R10272 += 1, R10228 += 1, R85 += 1 };
  s2 -> s2 [0, 65535] { R10272 += 1, R10227 += 1, R10228 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [70, 70] { R10272 += 1, R10228 += 1, R85 += 1 };
  s2 -> s4 [70, 70] { R10272 += 1, R10228 += 1, R85 += 1 };
  s2 -> s1 [71, 65535] { R10272 += 1, R10228 += 1, R85 += 1 };
  s3 -> s3 [0, 65535] { R10272 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R10272 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R10272 += 1, R10228 += 1, R85 += 1 };
  s5 -> s5 [0, 65535] { R10272 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 69] { R10274 += 1, R10230 += 1, R88 += 1 };
  s0 -> s2 [0, 69] { R10274 += 1, R10230 += 1, R87 += 1, R88 += 1 };
  s0 -> s0 [0, 65535] { R10273 += 1, R10274 += 1 };
  s0 -> s3 [0, 65535] { R10274 += 1, R10229 += 1, R10230 += 1 };
  s0 -> s4 [70, 70] { R10274 += 1, R10230 += 1, R87 += 1, R88 += 1 };
  s0 -> s5 [70, 70] { R10274 += 1, R10230 += 1, R88 += 1 };
  s0 -> s6 [70, 70] { R10274 += 1, R10230 += 1, R88 += 1 };
  s0 -> s7 [70, 70] { R10274 += 1, R10230 += 1, R87 += 1, R88 += 1 };
  s0 -> s1 [71, 74] { R10274 += 1, R10230 += 1, R88 += 1 };
  s0 -> s2 [71, 65535] { R10274 += 1, R10230 += 1, R87 += 1, R88 += 1 };
  s0 -> s8 [75, 75] { R10274 += 1, R10230 += 1, R88 += 1 };
  s0 -> s1 [76, 65535] { R10274 += 1, R10230 += 1, R88 += 1 };
  s1 -> s1 [0, 69] { R10274 += 1, R10230 += 1, R88 += 1 };
  s1 -> s5 [70, 70] { R10274 += 1, R10230 += 1, R88 += 1 };
  s1 -> s6 [70, 70] { R10274 += 1, R10230 += 1, R88 += 1 };
  s1 -> s1 [71, 74] { R10274 += 1, R10230 += 1, R88 += 1 };
  s1 -> s8 [75, 75] { R10274 += 1, R10230 += 1, R88 += 1 };
  s1 -> s1 [76, 65535] { R10274 += 1, R10230 += 1, R88 += 1 };
  s2 -> s1 [0, 69] { R10274 += 1, R10230 += 1, R88 += 1 };
  s2 -> s2 [0, 69] { R10274 += 1, R10230 += 1, R87 += 1, R88 += 1 };
  s2 -> s4 [70, 70] { R10274 += 1, R10230 += 1, R87 += 1, R88 += 1 };
  s2 -> s5 [70, 70] { R10274 += 1, R10230 += 1, R88 += 1 };
  s2 -> s6 [70, 70] { R10274 += 1, R10230 += 1, R88 += 1 };
  s2 -> s7 [70, 70] { R10274 += 1, R10230 += 1, R87 += 1, R88 += 1 };
  s2 -> s1 [71, 74] { R10274 += 1, R10230 += 1, R88 += 1 };
  s2 -> s2 [71, 65535] { R10274 += 1, R10230 += 1, R87 += 1, R88 += 1 };
  s2 -> s8 [75, 75] { R10274 += 1, R10230 += 1, R88 += 1 };
  s2 -> s1 [76, 65535] { R10274 += 1, R10230 += 1, R88 += 1 };
  s3 -> s1 [0, 69] { R10274 += 1, R10230 += 1, R88 += 1 };
  s3 -> s2 [0, 69] { R10274 += 1, R10230 += 1, R87 += 1, R88 += 1 };
  s3 -> s3 [0, 65535] { R10274 += 1, R10229 += 1, R10230 += 1 };
  s3 -> s4 [70, 70] { R10274 += 1, R10230 += 1, R87 += 1, R88 += 1 };
  s3 -> s5 [70, 70] { R10274 += 1, R10230 += 1, R88 += 1 };
  s3 -> s6 [70, 70] { R10274 += 1, R10230 += 1, R88 += 1 };
  s3 -> s7 [70, 70] { R10274 += 1, R10230 += 1, R87 += 1, R88 += 1 };
  s3 -> s1 [71, 74] { R10274 += 1, R10230 += 1, R88 += 1 };
  s3 -> s2 [71, 65535] { R10274 += 1, R10230 += 1, R87 += 1, R88 += 1 };
  s3 -> s8 [75, 75] { R10274 += 1, R10230 += 1, R88 += 1 };
  s3 -> s1 [76, 65535] { R10274 += 1, R10230 += 1, R88 += 1 };
  s6 -> s6 [0, 74] { R10274 += 1, R10230 += 1, R88 += 1 };
  s6 -> s11 [75, 75] { R10274 += 1, R10230 += 1, R88 += 1 };
  s6 -> s6 [76, 65535] { R10274 += 1, R10230 += 1, R88 += 1 };
  s7 -> s6 [0, 74] { R10274 += 1, R10230 += 1, R88 += 1 };
  s7 -> s7 [0, 65535] { R10274 += 1, R10230 += 1, R87 += 1, R88 += 1 };
  s7 -> s11 [75, 75] { R10274 += 1, R10230 += 1, R88 += 1 };
  s7 -> s6 [76, 65535] { R10274 += 1, R10230 += 1, R88 += 1 };
  s8 -> s8 [0, 69] { R10274 += 1, R10230 += 1, R88 += 1 };
  s8 -> s8 [0, 65535] { R10274 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [70, 70] { R10274 += 1, R10230 += 1, R88 += 1 };
  s8 -> s11 [70, 70] { R10274 += 1, R10230 += 1, R88 += 1 };
  s8 -> s8 [71, 65535] { R10274 += 1, R10230 += 1, R88 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R10274 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s12 [0, 65535] { R10274 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R10274 += 1, R10230 += 1, R88 += 1 };
  s12 -> s12 [0, 65535] { R10274 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 69] { R10276 += 1, R10232 += 1, R91 += 1, R92 += 1 };
  s0 -> s2 [0, 65535] { R10276 += 1, R10231 += 1, R10232 += 1 };
  s0 -> s0 [0, 65535] { R10275 += 1, R10276 += 1 };
  s0 -> s3 [70, 70] { R10276 += 1, R10232 += 1, R91 += 1, R92 += 1 };
  s0 -> s4 [70, 70] { R10276 += 1, R10232 += 1, R91 += 1, R92 += 1 };
  s0 -> s1 [71, 65535] { R10276 += 1, R10232 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 69] { R10276 += 1, R10232 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 65535] { R10276 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [70, 70] { R10276 += 1, R10232 += 1, R91 += 1, R92 += 1 };
  s1 -> s4 [70, 70] { R10276 += 1, R10232 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [71, 65535] { R10276 += 1, R10232 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [0, 69] { R10276 += 1, R10232 += 1, R91 += 1, R92 += 1 };
  s2 -> s2 [0, 65535] { R10276 += 1, R10231 += 1, R10232 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [70, 70] { R10276 += 1, R10232 += 1, R91 += 1, R92 += 1 };
  s2 -> s4 [70, 70] { R10276 += 1, R10232 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [71, 65535] { R10276 += 1, R10232 += 1, R91 += 1, R92 += 1 };
  s3 -> s6 [0, 65535] { R10276 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10276 += 1, R10232 += 1, R91 += 1, R92 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10276 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10276 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 69] { R10278 += 1, R10234 += 1, R10160 += 1, R10161 += 1 };
  s0 -> s2 [0, 69] { R10278 += 1, R10234 += 1, R10159 += 1, R10160 += 1 };
  s0 -> s3 [0, 65535] { R10278 += 1, R10233 += 1, R10234 += 1 };
  s0 -> s0 [0, 65535] { R10277 += 1, R10278 += 1 };
  s0 -> s4 [70, 70] { R10278 += 1, R10234 += 1, R10160 += 1, R10161 += 1 };
  s0 -> s5 [70, 70] { R10278 += 1, R10234 += 1, R10159 += 1, R10160 += 1 };
  s0 -> s6 [70, 70] { R10278 += 1, R10234 += 1, R10159 += 1, R10160 += 1 };
  s0 -> s7 [70, 70] { R10278 += 1, R10234 += 1, R10160 += 1, R10161 += 1 };
  s0 -> s1 [71, 65535] { R10278 += 1, R10234 += 1, R10160 += 1, R10161 += 1 };
  s0 -> s2 [71, 65535] { R10278 += 1, R10234 += 1, R10159 += 1, R10160 += 1 };
  s1 -> s11 [0, 69] { R10278 += 1, R10234 += 1 };
  s1 -> s1 [0, 69] { R10278 += 1, R10234 += 1, R10160 += 1, R10161 += 1 };
  s1 -> s8 [70, 70] { R10278 += 1, R10234 += 1 };
  s1 -> s4 [70, 70] { R10278 += 1, R10234 += 1, R10160 += 1, R10161 += 1 };
  s1 -> s12 [70, 70] { R10278 += 1, R10234 += 1 };
  s1 -> s7 [70, 70] { R10278 += 1, R10234 += 1, R10160 += 1, R10161 += 1 };
  s1 -> s11 [71, 65535] { R10278 += 1, R10234 += 1 };
  s1 -> s1 [71, 65535] { R10278 += 1, R10234 += 1, R10160 += 1, R10161 += 1 };
  s2 -> s1 [0, 69] { R10278 += 1, R10234 += 1, R10160 += 1, R10161 += 1 };
  s2 -> s2 [0, 69] { R10278 += 1, R10234 += 1, R10159 += 1, R10160 += 1 };
  s2 -> s4 [70, 70] { R10278 += 1, R10234 += 1, R10160 += 1, R10161 += 1 };
  s2 -> s5 [70, 70] { R10278 += 1, R10234 += 1, R10159 += 1, R10160 += 1 };
  s2 -> s6 [70, 70] { R10278 += 1, R10234 += 1, R10159 += 1, R10160 += 1 };
  s2 -> s7 [70, 70] { R10278 += 1, R10234 += 1, R10160 += 1, R10161 += 1 };
  s2 -> s1 [71, 65535] { R10278 += 1, R10234 += 1, R10160 += 1, R10161 += 1 };
  s2 -> s2 [71, 65535] { R10278 += 1, R10234 += 1, R10159 += 1, R10160 += 1 };
  s3 -> s1 [0, 69] { R10278 += 1, R10234 += 1, R10160 += 1, R10161 += 1 };
  s3 -> s2 [0, 69] { R10278 += 1, R10234 += 1, R10159 += 1, R10160 += 1 };
  s3 -> s3 [0, 65535] { R10278 += 1, R10233 += 1, R10234 += 1 };
  s3 -> s4 [70, 70] { R10278 += 1, R10234 += 1, R10160 += 1, R10161 += 1 };
  s3 -> s5 [70, 70] { R10278 += 1, R10234 += 1, R10159 += 1, R10160 += 1 };
  s3 -> s6 [70, 70] { R10278 += 1, R10234 += 1, R10159 += 1, R10160 += 1 };
  s3 -> s7 [70, 70] { R10278 += 1, R10234 += 1, R10160 += 1, R10161 += 1 };
  s3 -> s1 [71, 65535] { R10278 += 1, R10234 += 1, R10160 += 1, R10161 += 1 };
  s3 -> s2 [71, 65535] { R10278 += 1, R10234 += 1, R10159 += 1, R10160 += 1 };
  s6 -> s6 [0, 65535] { R10278 += 1, R10234 += 1, R10159 += 1, R10160 += 1 };
  s6 -> s7 [0, 65535] { R10278 += 1, R10234 += 1, R10160 += 1, R10161 += 1 };
  s7 -> s8 [0, 65535] { R10278 += 1, R10234 += 1 };
  s7 -> s7 [0, 65535] { R10278 += 1, R10234 += 1, R10160 += 1, R10161 += 1 };
  s8 -> s8 [0, 65535] { R10278 += 1, R10234 += 1 };
  s8 -> s9 [0, 65535] { R10278 += 1 };
  s8 -> s10 [0, 65535];
  s9 -> s9 [0, 65535] { R10278 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s11 [0, 69] { R10278 += 1, R10234 += 1 };
  s11 -> s11 [0, 65535] { R10278 += 1 };
  s11 -> s10 [0, 65535];
  s11 -> s8 [70, 70] { R10278 += 1, R10234 += 1 };
  s11 -> s12 [70, 70] { R10278 += 1, R10234 += 1 };
  s11 -> s11 [71, 65535] { R10278 += 1, R10234 += 1 };
  s12 -> s12 [0, 65535] { R10278 += 1 };
  s12 -> s10 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 69] { R10280 += 1, R10236 += 1, R10166 += 1, R10167 += 1, R10168 += 1 };
  s0 -> s2 [0, 69] { R10280 += 1, R10236 += 1, R10165 += 1, R10166 += 1 };
  s0 -> s3 [0, 69] { R10280 += 1, R10236 += 1, R10166 += 1, R10168 += 1 };
  s0 -> s4 [0, 65535] { R10280 += 1, R10235 += 1, R10236 += 1 };
  s0 -> s0 [0, 65535] { R10279 += 1, R10280 += 1 };
  s0 -> s5 [70, 70] { R10280 += 1, R10236 += 1, R10165 += 1, R10166 += 1 };
  s0 -> s6 [70, 70] { R10280 += 1, R10236 += 1, R10166 += 1, R10168 += 1 };
  s0 -> s7 [70, 70] { R10280 += 1, R10236 += 1, R10166 += 1, R10167 += 1, R10168 += 1 };
  s0 -> s8 [70, 70] { R10280 += 1, R10236 += 1, R10166 += 1, R10167 += 1, R10168 += 1 };
  s0 -> s9 [70, 70] { R10280 += 1, R10236 += 1, R10165 += 1, R10166 += 1 };
  s0 -> s10 [70, 70] { R10280 += 1, R10236 += 1, R10166 += 1, R10168 += 1 };
  s0 -> s3 [71, 74] { R10280 += 1, R10236 += 1, R10166 += 1, R10168 += 1 };
  s0 -> s1 [71, 65535] { R10280 += 1, R10236 += 1, R10166 += 1, R10167 += 1, R10168 += 1 };
  s0 -> s2 [71, 65535] { R10280 += 1, R10236 += 1, R10165 += 1, R10166 += 1 };
  s0 -> s11 [75, 75] { R10280 += 1, R10236 += 1, R10166 += 1, R10168 += 1 };
  s0 -> s3 [76, 65535] { R10280 += 1, R10236 += 1, R10166 += 1, R10168 += 1 };
  s1 -> s1 [0, 69] { R10280 += 1, R10236 += 1, R10166 += 1, R10167 += 1, R10168 += 1 };
  s1 -> s3 [0, 69] { R10280 += 1, R10236 += 1, R10166 += 1, R10168 += 1 };
  s1 -> s6 [70, 70] { R10280 += 1, R10236 += 1, R10166 += 1, R10168 += 1 };
  s1 -> s7 [70, 70] { R10280 += 1, R10236 += 1, R10166 += 1, R10167 += 1, R10168 += 1 };
  s1 -> s8 [70, 70] { R10280 += 1, R10236 += 1, R10166 += 1, R10167 += 1, R10168 += 1 };
  s1 -> s10 [70, 70] { R10280 += 1, R10236 += 1, R10166 += 1, R10168 += 1 };
  s1 -> s3 [71, 74] { R10280 += 1, R10236 += 1, R10166 += 1, R10168 += 1 };
  s1 -> s1 [71, 65535] { R10280 += 1, R10236 += 1, R10166 += 1, R10167 += 1, R10168 += 1 };
  s1 -> s11 [75, 75] { R10280 += 1, R10236 += 1, R10166 += 1, R10168 += 1 };
  s1 -> s3 [76, 65535] { R10280 += 1, R10236 += 1, R10166 += 1, R10168 += 1 };
  s2 -> s1 [0, 69] { R10280 += 1, R10236 += 1, R10166 += 1, R10167 += 1, R10168 += 1 };
  s2 -> s2 [0, 69] { R10280 += 1, R10236 += 1, R10165 += 1, R10166 += 1 };
  s2 -> s3 [0, 69] { R10280 += 1, R10236 += 1, R10166 += 1, R10168 += 1 };
  s2 -> s5 [70, 70] { R10280 += 1, R10236 += 1, R10165 += 1, R10166 += 1 };
  s2 -> s6 [70, 70] { R10280 += 1, R10236 += 1, R10166 += 1, R10168 += 1 };
  s2 -> s7 [70, 70] { R10280 += 1, R10236 += 1, R10166 += 1, R10167 += 1, R10168 += 1 };
  s2 -> s8 [70, 70] { R10280 += 1, R10236 += 1, R10166 += 1, R10167 += 1, R10168 += 1 };
  s2 -> s9 [70, 70] { R10280 += 1, R10236 += 1, R10165 += 1, R10166 += 1 };
  s2 -> s10 [70, 70] { R10280 += 1, R10236 += 1, R10166 += 1, R10168 += 1 };
  s2 -> s3 [71, 74] { R10280 += 1, R10236 += 1, R10166 += 1, R10168 += 1 };
  s2 -> s1 [71, 65535] { R10280 += 1, R10236 += 1, R10166 += 1, R10167 += 1, R10168 += 1 };
  s2 -> s2 [71, 65535] { R10280 += 1, R10236 += 1, R10165 += 1, R10166 += 1 };
  s2 -> s11 [75, 75] { R10280 += 1, R10236 += 1, R10166 += 1, R10168 += 1 };
  s2 -> s3 [76, 65535] { R10280 += 1, R10236 += 1, R10166 += 1, R10168 += 1 };
  s3 -> s3 [0, 69] { R10280 += 1, R10236 += 1, R10166 += 1, R10168 += 1 };
  s3 -> s6 [70, 70] { R10280 += 1, R10236 += 1, R10166 += 1, R10168 += 1 };
  s3 -> s10 [70, 70] { R10280 += 1, R10236 += 1, R10166 += 1, R10168 += 1 };
  s3 -> s3 [71, 74] { R10280 += 1, R10236 += 1, R10166 += 1, R10168 += 1 };
  s3 -> s11 [75, 75] { R10280 += 1, R10236 += 1, R10166 += 1, R10168 += 1 };
  s3 -> s3 [76, 65535] { R10280 += 1, R10236 += 1, R10166 += 1, R10168 += 1 };
  s4 -> s1 [0, 69] { R10280 += 1, R10236 += 1, R10166 += 1, R10167 += 1, R10168 += 1 };
  s4 -> s2 [0, 69] { R10280 += 1, R10236 += 1, R10165 += 1, R10166 += 1 };
  s4 -> s3 [0, 69] { R10280 += 1, R10236 += 1, R10166 += 1, R10168 += 1 };
  s4 -> s4 [0, 65535] { R10280 += 1, R10235 += 1, R10236 += 1 };
  s4 -> s5 [70, 70] { R10280 += 1, R10236 += 1, R10165 += 1, R10166 += 1 };
  s4 -> s6 [70, 70] { R10280 += 1, R10236 += 1, R10166 += 1, R10168 += 1 };
  s4 -> s7 [70, 70] { R10280 += 1, R10236 += 1, R10166 += 1, R10167 += 1, R10168 += 1 };
  s4 -> s8 [70, 70] { R10280 += 1, R10236 += 1, R10166 += 1, R10167 += 1, R10168 += 1 };
  s4 -> s9 [70, 70] { R10280 += 1, R10236 += 1, R10165 += 1, R10166 += 1 };
  s4 -> s10 [70, 70] { R10280 += 1, R10236 += 1, R10166 += 1, R10168 += 1 };
  s4 -> s3 [71, 74] { R10280 += 1, R10236 += 1, R10166 += 1, R10168 += 1 };
  s4 -> s1 [71, 65535] { R10280 += 1, R10236 += 1, R10166 += 1, R10167 += 1, R10168 += 1 };
  s4 -> s2 [71, 65535] { R10280 += 1, R10236 += 1, R10165 += 1, R10166 += 1 };
  s4 -> s11 [75, 75] { R10280 += 1, R10236 += 1, R10166 += 1, R10168 += 1 };
  s4 -> s3 [76, 65535] { R10280 += 1, R10236 += 1, R10166 += 1, R10168 += 1 };
  s5 -> s10 [0, 74] { R10280 += 1, R10236 += 1, R10166 += 1, R10168 += 1 };
  s5 -> s5 [0, 65535] { R10280 += 1, R10236 += 1, R10165 += 1, R10166 += 1 };
  s5 -> s7 [0, 65535] { R10280 += 1, R10236 += 1, R10166 += 1, R10167 += 1, R10168 += 1 };
  s5 -> s14 [75, 75] { R10280 += 1, R10236 += 1, R10166 += 1, R10168 += 1 };
  s5 -> s10 [76, 65535] { R10280 += 1, R10236 += 1, R10166 += 1, R10168 += 1 };
  s7 -> s10 [0, 74] { R10280 += 1, R10236 += 1, R10166 += 1, R10168 += 1 };
  s7 -> s7 [0, 65535] { R10280 += 1, R10236 += 1, R10166 += 1, R10167 += 1, R10168 += 1 };
  s7 -> s14 [75, 75] { R10280 += 1, R10236 += 1, R10166 += 1, R10168 += 1 };
  s7 -> s10 [76, 65535] { R10280 += 1, R10236 += 1, R10166 += 1, R10168 += 1 };
  s10 -> s10 [0, 74] { R10280 += 1, R10236 += 1, R10166 += 1, R10168 += 1 };
  s10 -> s14 [75, 75] { R10280 += 1, R10236 += 1, R10166 += 1, R10168 += 1 };
  s10 -> s10 [76, 65535] { R10280 += 1, R10236 += 1, R10166 += 1, R10168 += 1 };
  s11 -> s11 [0, 69] { R10280 += 1, R10236 += 1, R10166 += 1, R10168 += 1 };
  s11 -> s12 [0, 65535];
  s11 -> s11 [0, 65535] { R10280 += 1 };
  s11 -> s13 [70, 70] { R10280 += 1, R10236 += 1, R10166 += 1, R10168 += 1 };
  s11 -> s14 [70, 70] { R10280 += 1, R10236 += 1, R10166 += 1, R10168 += 1 };
  s11 -> s11 [71, 65535] { R10280 += 1, R10236 += 1, R10166 += 1, R10168 += 1 };
  s12 -> s12 [0, 65535];
  s13 -> s12 [0, 65535];
  s13 -> s13 [0, 65535] { R10280 += 1 };
  s14 -> s12 [0, 65535];
  s14 -> s15 [0, 65535] { R10280 += 1 };
  s14 -> s14 [0, 65535] { R10280 += 1, R10236 += 1, R10166 += 1, R10168 += 1 };
  s15 -> s12 [0, 65535];
  s15 -> s15 [0, 65535] { R10280 += 1 };
  accepting s12, s13, s14, s15, s11;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 69] { R10282 += 1, R10238 += 1, R10174 += 1, R10176 += 1, R10177 += 1 };
  s0 -> s2 [0, 69] { R10282 += 1, R10238 += 1, R10174 += 1, R10175 += 1, R10176 += 1 };
  s0 -> s3 [0, 69] { R10282 += 1, R10238 += 1, R10173 += 1, R10174 += 1 };
  s0 -> s0 [0, 65535] { R10281 += 1, R10282 += 1 };
  s0 -> s4 [0, 65535] { R10282 += 1, R10237 += 1, R10238 += 1 };
  s0 -> s5 [70, 70] { R10282 += 1, R10238 += 1, R10173 += 1, R10174 += 1 };
  s0 -> s6 [70, 70] { R10282 += 1, R10238 += 1, R10173 += 1, R10174 += 1 };
  s0 -> s7 [70, 70] { R10282 += 1, R10238 += 1, R10174 += 1, R10176 += 1, R10177 += 1 };
  s0 -> s8 [70, 70] { R10282 += 1, R10238 += 1, R10174 += 1, R10175 += 1, R10176 += 1 };
  s0 -> s9 [70, 70] { R10282 += 1, R10238 += 1, R10174 += 1, R10176 += 1, R10177 += 1 };
  s0 -> s10 [70, 70] { R10282 += 1, R10238 += 1, R10174 += 1, R10175 += 1, R10176 += 1 };
  s0 -> s1 [71, 65535] { R10282 += 1, R10238 += 1, R10174 += 1, R10176 += 1, R10177 += 1 };
  s0 -> s2 [71, 65535] { R10282 += 1, R10238 += 1, R10174 += 1, R10175 += 1, R10176 += 1 };
  s0 -> s3 [71, 65535] { R10282 += 1, R10238 += 1, R10173 += 1, R10174 += 1 };
  s1 -> s1 [0, 69] { R10282 += 1, R10238 += 1, R10174 += 1, R10176 += 1, R10177 += 1 };
  s1 -> s14 [0, 69] { R10282 += 1, R10238 += 1, R10174 += 1 };
  s1 -> s11 [70, 70] { R10282 += 1, R10238 += 1, R10174 += 1 };
  s1 -> s15 [70, 70] { R10282 += 1, R10238 += 1, R10174 += 1 };
  s1 -> s7 [70, 70] { R10282 += 1, R10238 += 1, R10174 += 1, R10176 += 1, R10177 += 1 };
  s1 -> s9 [70, 70] { R10282 += 1, R10238 += 1, R10174 += 1, R10176 += 1, R10177 += 1 };
  s1 -> s1 [71, 65535] { R10282 += 1, R10238 += 1, R10174 += 1, R10176 += 1, R10177 += 1 };
  s1 -> s14 [71, 65535] { R10282 += 1, R10238 += 1, R10174 += 1 };
  s2 -> s1 [0, 69] { R10282 += 1, R10238 += 1, R10174 += 1, R10176 += 1, R10177 += 1 };
  s2 -> s2 [0, 69] { R10282 += 1, R10238 += 1, R10174 += 1, R10175 += 1, R10176 += 1 };
  s2 -> s7 [70, 70] { R10282 += 1, R10238 += 1, R10174 += 1, R10176 += 1, R10177 += 1 };
  s2 -> s8 [70, 70] { R10282 += 1, R10238 += 1, R10174 += 1, R10175 += 1, R10176 += 1 };
  s2 -> s9 [70, 70] { R10282 += 1, R10238 += 1, R10174 += 1, R10176 += 1, R10177 += 1 };
  s2 -> s10 [70, 70] { R10282 += 1, R10238 += 1, R10174 += 1, R10175 += 1, R10176 += 1 };
  s2 -> s1 [71, 65535] { R10282 += 1, R10238 += 1, R10174 += 1, R10176 += 1, R10177 += 1 };
  s2 -> s2 [71, 65535] { R10282 += 1, R10238 += 1, R10174 += 1, R10175 += 1, R10176 += 1 };
  s3 -> s1 [0, 69] { R10282 += 1, R10238 += 1, R10174 += 1, R10176 += 1, R10177 += 1 };
  s3 -> s2 [0, 69] { R10282 += 1, R10238 += 1, R10174 += 1, R10175 += 1, R10176 += 1 };
  s3 -> s3 [0, 69] { R10282 += 1, R10238 += 1, R10173 += 1, R10174 += 1 };
  s3 -> s5 [70, 70] { R10282 += 1, R10238 += 1, R10173 += 1, R10174 += 1 };
  s3 -> s6 [70, 70] { R10282 += 1, R10238 += 1, R10173 += 1, R10174 += 1 };
  s3 -> s7 [70, 70] { R10282 += 1, R10238 += 1, R10174 += 1, R10176 += 1, R10177 += 1 };
  s3 -> s8 [70, 70] { R10282 += 1, R10238 += 1, R10174 += 1, R10175 += 1, R10176 += 1 };
  s3 -> s9 [70, 70] { R10282 += 1, R10238 += 1, R10174 += 1, R10176 += 1, R10177 += 1 };
  s3 -> s10 [70, 70] { R10282 += 1, R10238 += 1, R10174 += 1, R10175 += 1, R10176 += 1 };
  s3 -> s1 [71, 65535] { R10282 += 1, R10238 += 1, R10174 += 1, R10176 += 1, R10177 += 1 };
  s3 -> s2 [71, 65535] { R10282 += 1, R10238 += 1, R10174 += 1, R10175 += 1, R10176 += 1 };
  s3 -> s3 [71, 65535] { R10282 += 1, R10238 += 1, R10173 += 1, R10174 += 1 };
  s4 -> s1 [0, 69] { R10282 += 1, R10238 += 1, R10174 += 1, R10176 += 1, R10177 += 1 };
  s4 -> s2 [0, 69] { R10282 += 1, R10238 += 1, R10174 += 1, R10175 += 1, R10176 += 1 };
  s4 -> s3 [0, 69] { R10282 += 1, R10238 += 1, R10173 += 1, R10174 += 1 };
  s4 -> s4 [0, 65535] { R10282 += 1, R10237 += 1, R10238 += 1 };
  s4 -> s5 [70, 70] { R10282 += 1, R10238 += 1, R10173 += 1, R10174 += 1 };
  s4 -> s6 [70, 70] { R10282 += 1, R10238 += 1, R10173 += 1, R10174 += 1 };
  s4 -> s7 [70, 70] { R10282 += 1, R10238 += 1, R10174 += 1, R10176 += 1, R10177 += 1 };
  s4 -> s8 [70, 70] { R10282 += 1, R10238 += 1, R10174 += 1, R10175 += 1, R10176 += 1 };
  s4 -> s9 [70, 70] { R10282 += 1, R10238 += 1, R10174 += 1, R10176 += 1, R10177 += 1 };
  s4 -> s10 [70, 70] { R10282 += 1, R10238 += 1, R10174 += 1, R10175 += 1, R10176 += 1 };
  s4 -> s1 [71, 65535] { R10282 += 1, R10238 += 1, R10174 += 1, R10176 += 1, R10177 += 1 };
  s4 -> s2 [71, 65535] { R10282 += 1, R10238 += 1, R10174 += 1, R10175 += 1, R10176 += 1 };
  s4 -> s3 [71, 65535] { R10282 += 1, R10238 += 1, R10173 += 1, R10174 += 1 };
  s5 -> s5 [0, 65535] { R10282 += 1, R10238 += 1, R10173 += 1, R10174 += 1 };
  s5 -> s9 [0, 65535] { R10282 += 1, R10238 += 1, R10174 += 1, R10176 += 1, R10177 += 1 };
  s5 -> s10 [0, 65535] { R10282 += 1, R10238 += 1, R10174 += 1, R10175 += 1, R10176 += 1 };
  s9 -> s11 [0, 65535] { R10282 += 1, R10238 += 1, R10174 += 1 };
  s9 -> s9 [0, 65535] { R10282 += 1, R10238 += 1, R10174 += 1, R10176 += 1, R10177 += 1 };
  s10 -> s9 [0, 65535] { R10282 += 1, R10238 += 1, R10174 += 1, R10176 += 1, R10177 += 1 };
  s10 -> s10 [0, 65535] { R10282 += 1, R10238 += 1, R10174 += 1, R10175 += 1, R10176 += 1 };
  s11 -> s11 [0, 65535] { R10282 += 1, R10238 += 1, R10174 += 1 };
  s11 -> s12 [0, 65535];
  s11 -> s13 [0, 65535] { R10282 += 1 };
  s12 -> s12 [0, 65535];
  s13 -> s12 [0, 65535];
  s13 -> s13 [0, 65535] { R10282 += 1 };
  s14 -> s14 [0, 69] { R10282 += 1, R10238 += 1, R10174 += 1 };
  s14 -> s12 [0, 65535];
  s14 -> s14 [0, 65535] { R10282 += 1 };
  s14 -> s11 [70, 70] { R10282 += 1, R10238 += 1, R10174 += 1 };
  s14 -> s15 [70, 70] { R10282 += 1, R10238 += 1, R10174 += 1 };
  s14 -> s14 [71, 65535] { R10282 += 1, R10238 += 1, R10174 += 1 };
  s15 -> s12 [0, 65535];
  s15 -> s15 [0, 65535] { R10282 += 1 };
  accepting s12, s13, s14, s15, s11;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [102, 102];
  accepting s1;
};
};
constraint R3 = R10282 && R23 - R10282 = -1 && R24 = R10282 && R25 - R10282 = -1 && R26 = R10282 && R27 = 0 && R28 = 1 && R29 = 0 && R30 = 1 && R45 + R84 + R83 + -1*R10170 + -1*R10166 - R66 = 0 && R49 + R89 + R87 = 0 && R50 + R90 + R88 + -1*R10170 + -1*R10166 - R66 = 0 && R55 + R96 + R93 + -1*R10172 + -1*R10168 - R68 = 0 && R65 + R10169 + R10165 = 0 && R67 + R10171 + R10167 = 0 && R10223 = 0 && R10224 = 0 && R10229 = 0 && R10230 = 0 && R10233 = 0 && R10234 = 0 && R10235 = 0 && R10236 = 0 && R10237 = 0 && R10238 = 0 && R10239 = 0 && R10240 = R10282 && R10241 = 0 && R10242 = R10282 && R10243 = 0 && R10244 = R10282 && R10245 = 0 && R10246 = R10282 && R10247 = 0 && R10248 = R10282 && R10249 = 0 && R10250 = R10282 && R10251 = 0 && R10252 = R10282 && R10253 = 0 && R10254 = R10282 && R10255 = 0 && R10256 = R10282 && R10257 = 0 && R10258 = R10282 && R10259 = 0 && R10260 = R10282 && R10261 = 0 && R10262 = R10282 && R10263 = 0 && R10264 = R10282 && R10265 = 0 && R10266 = R10282 && R10267 = 0 && R10268 = R10282 && R10269 = 0 && R10270 = R10282 && R10271 = 0 && R10272 = R10282 && R10273 = 0 && R10274 = R10282 && R10275 = 0 && R10276 = R10282 && R10277 = 0 && R10278 = R10282 && R10279 = 0 && R10280 = R10282 && R10281 = 0 && -1 < R2 && R12 < 1 && R15 < 1 && R16 < 1 && R47 + R86 + R85 < 1 && R61 + R10164 + R10161 < 1 && -1*R10170 + -1*R10166 - R66 < 1 && -1*R10172 + -1*R10168 - R68 < 1 && 0 < R10282 && (R2 != 0 || R20 = 0 || (R10183 = 0 && R10184 = 0)) && (R2 != 0 || R20 = 0 || (R10185 = 0 && R10186 = 0)) && (R2 != 0 || R20 = 0 || (R10187 = 0 && R10188 = 0)) && (R2 != 0 || R20 = 0 || (R10189 = 0 && R10190 = 0)) && (R2 != 0 || R20 = 0 || (R10191 = 0 && R10192 = 0)) && (R2 != 0 || R20 = 0 || (R10193 = 0 && R10194 = 0)) && (R2 != 0 || R20 = 0 || (R10195 = 0 && R10196 = 0)) && (R2 != 0 || R20 = 0 || (R10197 = 0 && R10198 = 0)) && (R2 != 0 || R20 = 0 || (R10199 = 0 && R10200 = 0)) && (R2 != 0 || R20 = 0 || (R10201 = 0 && R10202 = 0)) && (R53 + R94 + R91 != 0 || R54 + R95 + R92 + -1*R10170 + -1*R10166 - R66 = 0 || R66 + R10170 + R10166 < 1) && (R59 + R10162 + R10159 != 0 || R60 + R10163 + R10160 + -1*R10170 + -1*R10166 - R66 = 0 || R66 + R10170 + R10166 < 1) && (R66 + R10170 + R10166 != 0 || ((R53 + R94 + R91 != 0 || R54 + R95 + R92 = 0 || R68 + R10172 + R10168 < 1) && (R53 + R94 + R91 = 0 || R68 + R10172 + R10168 < 1))) && (R66 + R10170 + R10166 != 0 || ((R59 + R10162 + R10159 != 0 || R60 + R10163 + R10160 = 0 || R68 + R10172 + R10168 < 1) && (R59 + R10162 + R10159 = 0 || R68 + R10172 + R10168 < 1))) && (R66 + R10170 + R10166 != 0 || ((R73 + R10178 + R10173 != 0 || R74 + R10179 + R10174 = 0 || R68 + R10172 + R10168 < 1) && (R73 + R10178 + R10173 = 0 || R68 + R10172 + R10168 < 1))) && (R68 + R10172 + R10168 != 0 || R77 + R10182 + R10177 = 0 || (R75 + R10180 + R10175 = 0 && R76 + R10181 + R10176 = 0)) && (R73 + R10178 + R10173 != 0 || R66 + R10170 + R10166 + -1*R10179 + -1*R10174 - R74 = 0 || R66 + R10170 + R10166 < 1) && (R75 + R10180 + R10175 != 0 || R68 + R10172 + R10168 + -1*R10181 + -1*R10176 - R76 = 0 || R68 + R10172 + R10168 < 1) && (R10183 != 0 || R2 = R10184 || R2 < 1) && (R10185 != 0 || R2 = R10186 || R2 < 1) && (R10187 != 0 || R2 = R10188 || R2 < 1) && (R10189 != 0 || R2 = R10190 || R2 < 1) && (R10191 != 0 || R2 = R10192 || R2 < 1) && (R10193 != 0 || R2 = R10194 || R2 < 1) && (R10195 != 0 || R2 = R10196 || R2 < 1) && (R10197 != 0 || R2 = R10198 || R2 < 1) && (R10199 != 0 || R2 = R10200 || R2 < 1) && (R10201 != 0 || R2 = R10202 || R2 < 1) && (R21 = 0 || (R10221 = 0 && R10222 = 0)) && (R21 = 0 || (R10225 = 0 && R10226 = 0)) && (R21 = 0 || (R10227 = 0 && R10228 = 0)) && (R21 = 0 || (R10231 = 0 && R10232 = 0)) && (R22 = 0 || (R10203 = 0 && R10204 = 0)) && (R22 = 0 || (R10205 = 0 && R10206 = 0)) && (R22 = 0 || (R10207 = 0 && R10208 = 0)) && (R22 = 0 || (R10209 = 0 && R10210 = 0)) && (R22 = 0 || (R10211 = 0 && R10212 = 0)) && (R22 = 0 || (R10213 = 0 && R10214 = 0)) && (R22 = 0 || (R10215 = 0 && R10216 = 0)) && (R22 = 0 || (R10217 = 0 && R10218 = 0)) && (R22 = 0 || (R10219 = 0 && R10220 = 0)) && (R53 + R94 + R91 = 0 || R66 + R10170 + R10166 < 1) && (R59 + R10162 + R10159 = 0 || R66 + R10170 + R10166 < 1) && (R73 + R10178 + R10173 = 0 || R66 + R10170 + R10166 < 1) && (R75 + R10180 + R10175 = 0 || R68 + R10172 + R10168 < 1) && (R10183 = 0 || R2 < 1) && (R10185 = 0 || R2 < 1) && (R10187 = 0 || R2 < 1) && (R10189 = 0 || R2 < 1) && (R10191 = 0 || R2 < 1) && (R10193 = 0 || R2 < 1) && (R10195 = 0 || R2 < 1) && (R10197 = 0 || R2 < 1) && (R10199 = 0 || R2 < 1) && (R10201 = 0 || R2 < 1);
// End of Parikh automata intersection problem
