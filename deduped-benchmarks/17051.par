// Parikh automata intersection problem, generated by OSTRICH+
counter int R12, R15, R16, R2, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R3451, R3452, R3453, R3454, R3455, R3456, R4, R45, R47, R49, R5, R50, R53, R54, R55, R5689, R5690, R5691, R5692, R5693, R5694, R5695, R5696, R59, R5917, R5918, R5919, R5920, R5921, R5922, R5923, R5924, R5925, R5926, R5927, R5928, R5929, R5930, R5931, R5932, R5933, R5934, R5935, R5936, R5937, R5938, R5939, R5940, R5941, R5942, R5943, R5944, R5945, R5946, R5947, R5948, R5949, R5950, R5951, R5952, R5953, R5954, R5955, R5956, R5957, R5958, R5959, R5960, R5961, R5962, R5963, R5964, R5965, R5966, R5967, R5968, R5969, R5970, R5971, R5972, R5973, R5974, R5975, R5976, R5977, R5978, R5979, R5980, R5981, R5982, R5983, R5984, R5985, R5986, R5987, R5988, R5989, R5990, R5991, R5992, R5993, R5994, R5995, R5996, R5997, R5998, R5999, R60, R6000, R6001, R6002, R6003, R6004, R6005, R6006, R6007, R6008, R6009, R6010, R6011, R6012, R6013, R6014, R6015, R6016, R6017, R6018, R6019, R6020, R6021, R6022, R6023, R6024, R6025, R6026, R61, R65, R66, R67, R68, R73, R74, R75, R76, R77, R83, R84, R85, R86, R87, R88, R89, R90, R91, R92, R93, R94, R95, R96;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [70, 70];
  s0 -> s0 [71, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [70, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R15 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 69];
  s0 -> s0 [0, 65535] { R16 += 1 };
  s0 -> s2 [70, 70];
  s0 -> s1 [71, 65535];
  s1 -> s1 [0, 69];
  s1 -> s2 [70, 70];
  s1 -> s1 [71, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R24 += 1 };
  s0 -> s0 [0, 65535] { R23 += 1, R24 += 1 };
  s0 -> s2 [9, 13] { R24 += 1 };
  s0 -> s1 [14, 31] { R24 += 1 };
  s0 -> s2 [32, 32] { R24 += 1 };
  s0 -> s1 [33, 65535] { R24 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R24 += 1 };
  s2 -> s1 [0, 65535] { R24 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R25 += 1, R26 += 1 };
  s1 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R28 += 1 };
  s0 -> s0 [0, 65535] { R27 += 1, R28 += 1 };
  s0 -> s2 [9, 13] { R28 += 1 };
  s0 -> s1 [14, 31] { R28 += 1 };
  s0 -> s2 [32, 32] { R28 += 1 };
  s0 -> s1 [33, 65535] { R28 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R28 += 1 };
  s2 -> s1 [0, 65535] { R28 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R29 += 1, R30 += 1 };
  s1 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R5947 += 1, R5948 += 1 };
  s0 -> s1 [0, 65535] { R5948 += 1, R22 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R5948 += 1, R22 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 69] { R5950 += 1 };
  s0 -> s0 [0, 65535] { R5949 += 1, R5950 += 1 };
  s0 -> s2 [70, 70] { R5950 += 1 };
  s0 -> s3 [70, 70] { R5950 += 1 };
  s0 -> s1 [76, 65535] { R5950 += 1 };
  s1 -> s1 [0, 69] { R5950 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R5950 += 1 };
  s1 -> s3 [70, 70] { R5950 += 1 };
  s1 -> s1 [76, 65535] { R5950 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 70] { R5950 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [76, 65535] { R5950 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 69] { R5952 += 1, R45 += 1 };
  s0 -> s0 [0, 65535] { R5951 += 1, R5952 += 1 };
  s0 -> s2 [70, 70] { R5952 += 1, R45 += 1 };
  s0 -> s3 [70, 70] { R5952 += 1, R45 += 1 };
  s0 -> s1 [71, 65535] { R5952 += 1, R45 += 1 };
  s1 -> s1 [0, 69] { R5952 += 1, R45 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R5952 += 1, R45 += 1 };
  s1 -> s3 [70, 70] { R5952 += 1, R45 += 1 };
  s1 -> s1 [71, 65535] { R5952 += 1, R45 += 1 };
  s2 -> s2 [0, 65535] { R5952 += 1, R45 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 69] { R5954 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R5953 += 1, R5954 += 1 };
  s0 -> s2 [70, 70] { R5954 += 1, R47 += 1 };
  s0 -> s3 [70, 70] { R5954 += 1, R47 += 1 };
  s0 -> s1 [71, 65535] { R5954 += 1, R47 += 1 };
  s1 -> s1 [0, 69] { R5954 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R5954 += 1, R47 += 1 };
  s1 -> s3 [70, 70] { R5954 += 1, R47 += 1 };
  s1 -> s1 [71, 65535] { R5954 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R5954 += 1, R47 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 69] { R5956 += 1, R49 += 1, R50 += 1 };
  s0 -> s0 [0, 65535] { R5955 += 1, R5956 += 1 };
  s0 -> s2 [70, 70] { R5956 += 1, R49 += 1, R50 += 1 };
  s0 -> s3 [70, 70] { R5956 += 1, R49 += 1, R50 += 1 };
  s0 -> s1 [71, 65535] { R5956 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 69] { R5956 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R5956 += 1, R49 += 1, R50 += 1 };
  s1 -> s3 [70, 70] { R5956 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [71, 65535] { R5956 += 1, R49 += 1, R50 += 1 };
  s2 -> s2 [0, 65535] { R5956 += 1, R49 += 1, R50 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 69] { R5958 += 1, R53 += 1, R54 += 1 };
  s0 -> s0 [0, 65535] { R5957 += 1, R5958 += 1 };
  s0 -> s2 [70, 70] { R5958 += 1, R53 += 1, R54 += 1 };
  s0 -> s3 [70, 70] { R5958 += 1, R53 += 1, R54 += 1 };
  s0 -> s1 [71, 65535] { R5958 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 69] { R5958 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R5958 += 1, R53 += 1, R54 += 1 };
  s1 -> s3 [70, 70] { R5958 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [71, 65535] { R5958 += 1, R53 += 1, R54 += 1 };
  s2 -> s2 [0, 65535] { R5958 += 1, R53 += 1, R54 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 69] { R5960 += 1, R59 += 1, R60 += 1 };
  s0 -> s0 [0, 65535] { R5959 += 1, R5960 += 1 };
  s0 -> s2 [70, 70] { R5960 += 1, R59 += 1, R60 += 1 };
  s0 -> s3 [70, 70] { R5960 += 1, R59 += 1, R60 += 1 };
  s0 -> s1 [71, 65535] { R5960 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 69] { R5960 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R5960 += 1, R59 += 1, R60 += 1 };
  s1 -> s3 [70, 70] { R5960 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [71, 65535] { R5960 += 1, R59 += 1, R60 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R5960 += 1, R59 += 1, R60 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 69] { R5962 += 1, R65 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R5961 += 1, R5962 += 1 };
  s0 -> s2 [70, 70] { R5962 += 1, R65 += 1, R66 += 1 };
  s0 -> s3 [70, 70] { R5962 += 1, R65 += 1, R66 += 1 };
  s0 -> s1 [71, 65535] { R5962 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 69] { R5962 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R5962 += 1, R65 += 1, R66 += 1 };
  s1 -> s3 [70, 70] { R5962 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [71, 65535] { R5962 += 1, R65 += 1, R66 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R5962 += 1, R65 += 1, R66 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 69] { R5964 += 1, R73 += 1, R74 += 1 };
  s0 -> s0 [0, 65535] { R5963 += 1, R5964 += 1 };
  s0 -> s2 [70, 70] { R5964 += 1, R73 += 1, R74 += 1 };
  s0 -> s3 [70, 70] { R5964 += 1, R73 += 1, R74 += 1 };
  s0 -> s1 [71, 65535] { R5964 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 69] { R5964 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R5964 += 1, R73 += 1, R74 += 1 };
  s1 -> s3 [70, 70] { R5964 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [71, 65535] { R5964 += 1, R73 += 1, R74 += 1 };
  s2 -> s2 [0, 65535] { R5964 += 1, R73 += 1, R74 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 69] { R5984 += 1 };
  s0 -> s0 [0, 65535] { R5983 += 1, R5984 += 1 };
  s0 -> s2 [70, 70] { R5984 += 1 };
  s0 -> s1 [71, 65535] { R5984 += 1 };
  s1 -> s1 [0, 69] { R5984 += 1 };
  s1 -> s2 [70, 70] { R5984 += 1 };
  s1 -> s1 [71, 65535] { R5984 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R5984 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R5985 += 1, R5986 += 1 };
  s0 -> s1 [0, 65535] { R5986 += 1, R2 += 1 };
  s1 -> s1 [0, 65535] { R5986 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 69] { R5988 += 1 };
  s0 -> s2 [0, 65535] { R5988 += 1, R12 += 1 };
  s0 -> s0 [0, 65535] { R5987 += 1, R5988 += 1 };
  s0 -> s3 [70, 70] { R5988 += 1 };
  s0 -> s1 [71, 65535] { R5988 += 1 };
  s1 -> s1 [0, 69] { R5988 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [70, 70] { R5988 += 1 };
  s1 -> s1 [71, 65535] { R5988 += 1 };
  s2 -> s1 [0, 69] { R5988 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R5988 += 1, R12 += 1 };
  s2 -> s3 [70, 70] { R5988 += 1 };
  s2 -> s1 [71, 65535] { R5988 += 1 };
  s3 -> s3 [0, 65535] { R5988 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 69] { R5990 += 1, R5928 += 1 };
  s0 -> s2 [0, 65535] { R5990 += 1, R5927 += 1, R5928 += 1 };
  s0 -> s0 [0, 65535] { R5989 += 1, R5990 += 1 };
  s0 -> s1 [71, 65535] { R5990 += 1, R5928 += 1 };
  s1 -> s1 [0, 69] { R5990 += 1, R5928 += 1 };
  s1 -> s1 [0, 65535] { R5990 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [71, 65535] { R5990 += 1, R5928 += 1 };
  s2 -> s1 [0, 69] { R5990 += 1, R5928 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R5990 += 1, R5927 += 1, R5928 += 1 };
  s2 -> s1 [71, 65535] { R5990 += 1, R5928 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s0 [0, 65535] { R5991 += 1, R5992 += 1 };
  s0 -> s1 [0, 65535] { R5992 += 1, R5929 += 1, R5930 += 1 };
  s0 -> s2 [0, 65535] { R5992 += 1, R5930 += 1, R20 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R5992 += 1, R5929 += 1, R5930 += 1 };
  s1 -> s2 [0, 65535] { R5992 += 1, R5930 += 1, R20 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R5992 += 1 };
  s2 -> s2 [0, 65535] { R5992 += 1, R5930 += 1, R20 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R5992 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 70] { R5994 += 1, R5932 += 1 };
  s0 -> s2 [0, 65535] { R5994 += 1, R5931 += 1, R5932 += 1 };
  s0 -> s0 [0, 65535] { R5993 += 1, R5994 += 1 };
  s0 -> s1 [75, 65535] { R5994 += 1, R5932 += 1 };
  s1 -> s1 [0, 70] { R5994 += 1, R5932 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R5994 += 1 };
  s1 -> s1 [75, 65535] { R5994 += 1, R5932 += 1 };
  s2 -> s1 [0, 70] { R5994 += 1, R5932 += 1 };
  s2 -> s2 [0, 65535] { R5994 += 1, R5931 += 1, R5932 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [75, 65535] { R5994 += 1, R5932 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R5996 += 1, R5934 += 1, R84 += 1 };
  s0 -> s2 [0, 65535] { R5996 += 1, R5933 += 1, R5934 += 1 };
  s0 -> s0 [0, 65535] { R5995 += 1, R5996 += 1 };
  s1 -> s1 [0, 65535] { R5996 += 1, R5934 += 1, R84 += 1 };
  s1 -> s4 [0, 65535] { R5996 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R5996 += 1, R5934 += 1, R84 += 1 };
  s2 -> s2 [0, 65535] { R5996 += 1, R5933 += 1, R5934 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R5996 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 74] { R5998 += 1, R5936 += 1 };
  s0 -> s2 [0, 65535] { R5998 += 1, R5935 += 1, R5936 += 1 };
  s0 -> s0 [0, 65535] { R5997 += 1, R5998 += 1 };
  s0 -> s3 [0, 65535] { R5998 += 1, R5936 += 1, R86 += 1 };
  s0 -> s1 [76, 65535] { R5998 += 1, R5936 += 1 };
  s1 -> s1 [0, 74] { R5998 += 1, R5936 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R5998 += 1 };
  s1 -> s1 [76, 65535] { R5998 += 1, R5936 += 1 };
  s2 -> s1 [0, 74] { R5998 += 1, R5936 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R5998 += 1, R5935 += 1, R5936 += 1 };
  s2 -> s3 [0, 65535] { R5998 += 1, R5936 += 1, R86 += 1 };
  s2 -> s1 [76, 65535] { R5998 += 1, R5936 += 1 };
  s3 -> s1 [0, 74] { R5998 += 1, R5936 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R5998 += 1, R5936 += 1, R86 += 1 };
  s3 -> s5 [0, 65535] { R5998 += 1 };
  s3 -> s1 [76, 65535] { R5998 += 1, R5936 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R5998 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 65535] { R6000 += 1, R5937 += 1, R5938 += 1 };
  s0 -> s2 [0, 65535] { R6000 += 1, R5938 += 1 };
  s0 -> s0 [0, 65535] { R5999 += 1, R6000 += 1 };
  s0 -> s3 [0, 65535] { R6000 += 1, R5938 += 1, R90 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R6000 += 1, R5937 += 1, R5938 += 1 };
  s1 -> s2 [0, 65535] { R6000 += 1, R5938 += 1 };
  s1 -> s3 [0, 65535] { R6000 += 1, R5938 += 1, R90 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R6000 += 1, R5938 += 1 };
  s2 -> s5 [0, 65535] { R6000 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R6000 += 1, R5938 += 1 };
  s3 -> s3 [0, 65535] { R6000 += 1, R5938 += 1, R90 += 1 };
  s3 -> s5 [0, 65535] { R6000 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R6000 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R6002 += 1, R5939 += 1, R5940 += 1 };
  s0 -> s2 [0, 65535] { R6002 += 1, R5940 += 1, R95 += 1, R96 += 1 };
  s0 -> s3 [0, 65535] { R6002 += 1, R5940 += 1, R94 += 1, R95 += 1 };
  s0 -> s0 [0, 65535] { R6001 += 1, R6002 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R6002 += 1, R5939 += 1, R5940 += 1 };
  s1 -> s2 [0, 65535] { R6002 += 1, R5940 += 1, R95 += 1, R96 += 1 };
  s1 -> s3 [0, 65535] { R6002 += 1, R5940 += 1, R94 += 1, R95 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R6002 += 1 };
  s2 -> s2 [0, 65535] { R6002 += 1, R5940 += 1, R95 += 1, R96 += 1 };
  s2 -> s6 [0, 65535] { R6002 += 1, R5940 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R6002 += 1 };
  s3 -> s2 [0, 65535] { R6002 += 1, R5940 += 1, R95 += 1, R96 += 1 };
  s3 -> s3 [0, 65535] { R6002 += 1, R5940 += 1, R94 += 1, R95 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R6002 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R6002 += 1 };
  s6 -> s6 [0, 65535] { R6002 += 1, R5940 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 74] { R6004 += 1, R5942 += 1, R3455 += 1 };
  s0 -> s0 [0, 65535] { R6003 += 1, R6004 += 1 };
  s0 -> s1 [0, 65535] { R6004 += 1, R5942 += 1 };
  s0 -> s2 [0, 65535] { R6004 += 1, R5941 += 1, R5942 += 1 };
  s0 -> s1 [76, 65535] { R6004 += 1, R5942 += 1, R3455 += 1 };
  s1 -> s1 [0, 74] { R6004 += 1, R5942 += 1, R3455 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R6004 += 1, R5942 += 1 };
  s1 -> s4 [0, 65535] { R6004 += 1 };
  s1 -> s1 [76, 65535] { R6004 += 1, R5942 += 1, R3455 += 1 };
  s2 -> s1 [0, 74] { R6004 += 1, R5942 += 1, R3455 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R6004 += 1, R5942 += 1 };
  s2 -> s2 [0, 65535] { R6004 += 1, R5941 += 1, R5942 += 1 };
  s2 -> s1 [76, 65535] { R6004 += 1, R5942 += 1, R3455 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R6004 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 74] { R6006 += 1, R5944 += 1, R5694 += 1, R5696 += 1 };
  s0 -> s0 [0, 65535] { R6005 += 1, R6006 += 1 };
  s0 -> s2 [0, 65535] { R6006 += 1, R5943 += 1, R5944 += 1 };
  s0 -> s3 [75, 75] { R6006 += 1, R5944 += 1, R5694 += 1, R5696 += 1 };
  s0 -> s1 [76, 65535] { R6006 += 1, R5944 += 1, R5694 += 1, R5696 += 1 };
  s1 -> s1 [0, 74] { R6006 += 1, R5944 += 1, R5694 += 1, R5696 += 1 };
  s1 -> s3 [75, 75] { R6006 += 1, R5944 += 1, R5694 += 1, R5696 += 1 };
  s1 -> s1 [76, 65535] { R6006 += 1, R5944 += 1, R5694 += 1, R5696 += 1 };
  s2 -> s1 [0, 74] { R6006 += 1, R5944 += 1, R5694 += 1, R5696 += 1 };
  s2 -> s2 [0, 65535] { R6006 += 1, R5943 += 1, R5944 += 1 };
  s2 -> s3 [75, 75] { R6006 += 1, R5944 += 1, R5694 += 1, R5696 += 1 };
  s2 -> s1 [76, 65535] { R6006 += 1, R5944 += 1, R5694 += 1, R5696 += 1 };
  s3 -> s4 [0, 65535] { R6006 += 1, R5944 += 1 };
  s3 -> s5 [0, 65535] { R6006 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s7 [0, 65535] { R6006 += 1, R5944 += 1, R5694 += 1 };
  s3 -> s3 [0, 65535] { R6006 += 1, R5944 += 1, R5694 += 1, R5696 += 1 };
  s4 -> s4 [0, 65535] { R6006 += 1, R5944 += 1 };
  s4 -> s5 [0, 65535] { R6006 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R6006 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s4 [0, 65535] { R6006 += 1, R5944 += 1 };
  s7 -> s5 [0, 65535] { R6006 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R6006 += 1, R5944 += 1, R5694 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 65535] { R6008 += 1, R5946 += 1, R5922 += 1, R5923 += 1 };
  s0 -> s2 [0, 65535] { R6008 += 1, R5945 += 1, R5946 += 1 };
  s0 -> s3 [0, 65535] { R6008 += 1, R5946 += 1, R5923 += 1, R5925 += 1, R5926 += 1 };
  s0 -> s0 [0, 65535] { R6007 += 1, R6008 += 1 };
  s0 -> s4 [0, 65535] { R6008 += 1, R5946 += 1, R5923 += 1, R5924 += 1, R5925 += 1 };
  s1 -> s1 [0, 65535] { R6008 += 1, R5946 += 1, R5922 += 1, R5923 += 1 };
  s1 -> s3 [0, 65535] { R6008 += 1, R5946 += 1, R5923 += 1, R5925 += 1, R5926 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R6008 += 1 };
  s1 -> s4 [0, 65535] { R6008 += 1, R5946 += 1, R5923 += 1, R5924 += 1, R5925 += 1 };
  s2 -> s1 [0, 65535] { R6008 += 1, R5946 += 1, R5922 += 1, R5923 += 1 };
  s2 -> s2 [0, 65535] { R6008 += 1, R5945 += 1, R5946 += 1 };
  s2 -> s3 [0, 65535] { R6008 += 1, R5946 += 1, R5923 += 1, R5925 += 1, R5926 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s4 [0, 65535] { R6008 += 1, R5946 += 1, R5923 += 1, R5924 += 1, R5925 += 1 };
  s3 -> s8 [0, 65535] { R6008 += 1, R5946 += 1, R5923 += 1 };
  s3 -> s3 [0, 65535] { R6008 += 1, R5946 += 1, R5923 += 1, R5925 += 1, R5926 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s7 [0, 65535] { R6008 += 1 };
  s3 -> s5 [0, 65535] { R6008 += 1, R5946 += 1 };
  s4 -> s5 [0, 65535] { R6008 += 1, R5946 += 1 };
  s4 -> s3 [0, 65535] { R6008 += 1, R5946 += 1, R5923 += 1, R5925 += 1, R5926 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R6008 += 1 };
  s4 -> s4 [0, 65535] { R6008 += 1, R5946 += 1, R5923 += 1, R5924 += 1, R5925 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R6008 += 1 };
  s5 -> s5 [0, 65535] { R6008 += 1, R5946 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R6008 += 1 };
  s8 -> s8 [0, 65535] { R6008 += 1, R5946 += 1, R5923 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R6008 += 1 };
  s8 -> s5 [0, 65535] { R6008 += 1, R5946 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s0 [0, 65535] { R6009 += 1, R6010 += 1 };
  s0 -> s1 [0, 65535] { R6010 += 1, R5965 += 1, R5966 += 1 };
  s0 -> s2 [0, 65535] { R6010 += 1, R5966 += 1, R21 += 1 };
  s1 -> s1 [0, 65535] { R6010 += 1, R5965 += 1, R5966 += 1 };
  s1 -> s2 [0, 65535] { R6010 += 1, R5966 += 1, R21 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R6010 += 1 };
  s2 -> s2 [0, 65535] { R6010 += 1, R5966 += 1, R21 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R6010 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 69] { R6012 += 1, R5968 += 1 };
  s0 -> s0 [0, 65535] { R6011 += 1, R6012 += 1 };
  s0 -> s2 [0, 65535] { R6012 += 1, R5967 += 1, R5968 += 1 };
  s0 -> s3 [70, 70] { R6012 += 1, R5968 += 1 };
  s0 -> s4 [70, 70] { R6012 += 1, R5968 += 1 };
  s0 -> s5 [75, 75] { R6012 += 1, R5968 += 1 };
  s0 -> s1 [76, 65535] { R6012 += 1, R5968 += 1 };
  s1 -> s1 [0, 69] { R6012 += 1, R5968 += 1 };
  s1 -> s3 [70, 70] { R6012 += 1, R5968 += 1 };
  s1 -> s4 [70, 70] { R6012 += 1, R5968 += 1 };
  s1 -> s5 [75, 75] { R6012 += 1, R5968 += 1 };
  s1 -> s1 [76, 65535] { R6012 += 1, R5968 += 1 };
  s2 -> s1 [0, 69] { R6012 += 1, R5968 += 1 };
  s2 -> s2 [0, 65535] { R6012 += 1, R5967 += 1, R5968 += 1 };
  s2 -> s3 [70, 70] { R6012 += 1, R5968 += 1 };
  s2 -> s4 [70, 70] { R6012 += 1, R5968 += 1 };
  s2 -> s5 [75, 75] { R6012 += 1, R5968 += 1 };
  s2 -> s1 [76, 65535] { R6012 += 1, R5968 += 1 };
  s4 -> s4 [0, 70] { R6012 += 1, R5968 += 1 };
  s4 -> s7 [75, 75] { R6012 += 1, R5968 += 1 };
  s4 -> s4 [76, 65535] { R6012 += 1, R5968 += 1 };
  s5 -> s5 [0, 69] { R6012 += 1, R5968 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R6012 += 1 };
  s5 -> s7 [70, 70] { R6012 += 1, R5968 += 1 };
  s5 -> s8 [70, 70] { R6012 += 1, R5968 += 1 };
  s5 -> s5 [75, 65535] { R6012 += 1, R5968 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 70] { R6012 += 1, R5968 += 1 };
  s7 -> s7 [0, 65535] { R6012 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [75, 65535] { R6012 += 1, R5968 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R6012 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 69] { R6014 += 1, R5970 += 1, R83 += 1 };
  s0 -> s2 [0, 65535] { R6014 += 1, R5969 += 1, R5970 += 1 };
  s0 -> s0 [0, 65535] { R6013 += 1, R6014 += 1 };
  s0 -> s3 [70, 70] { R6014 += 1, R5970 += 1, R83 += 1 };
  s0 -> s4 [70, 70] { R6014 += 1, R5970 += 1, R83 += 1 };
  s0 -> s1 [71, 65535] { R6014 += 1, R5970 += 1, R83 += 1 };
  s1 -> s1 [0, 69] { R6014 += 1, R5970 += 1, R83 += 1 };
  s1 -> s1 [0, 65535] { R6014 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [70, 70] { R6014 += 1, R5970 += 1, R83 += 1 };
  s1 -> s4 [70, 70] { R6014 += 1, R5970 += 1, R83 += 1 };
  s1 -> s1 [71, 65535] { R6014 += 1, R5970 += 1, R83 += 1 };
  s2 -> s1 [0, 69] { R6014 += 1, R5970 += 1, R83 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R6014 += 1, R5969 += 1, R5970 += 1 };
  s2 -> s3 [70, 70] { R6014 += 1, R5970 += 1, R83 += 1 };
  s2 -> s4 [70, 70] { R6014 += 1, R5970 += 1, R83 += 1 };
  s2 -> s1 [71, 65535] { R6014 += 1, R5970 += 1, R83 += 1 };
  s3 -> s3 [0, 65535] { R6014 += 1, R5970 += 1, R83 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R6014 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R6014 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6014 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 69] { R6016 += 1, R5972 += 1, R85 += 1 };
  s0 -> s0 [0, 65535] { R6015 += 1, R6016 += 1 };
  s0 -> s2 [0, 65535] { R6016 += 1, R5971 += 1, R5972 += 1 };
  s0 -> s3 [70, 70] { R6016 += 1, R5972 += 1, R85 += 1 };
  s0 -> s4 [70, 70] { R6016 += 1, R5972 += 1, R85 += 1 };
  s0 -> s1 [71, 65535] { R6016 += 1, R5972 += 1, R85 += 1 };
  s1 -> s1 [0, 69] { R6016 += 1, R5972 += 1, R85 += 1 };
  s1 -> s1 [0, 65535] { R6016 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [70, 70] { R6016 += 1, R5972 += 1, R85 += 1 };
  s1 -> s4 [70, 70] { R6016 += 1, R5972 += 1, R85 += 1 };
  s1 -> s1 [71, 65535] { R6016 += 1, R5972 += 1, R85 += 1 };
  s2 -> s1 [0, 69] { R6016 += 1, R5972 += 1, R85 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R6016 += 1, R5971 += 1, R5972 += 1 };
  s2 -> s3 [70, 70] { R6016 += 1, R5972 += 1, R85 += 1 };
  s2 -> s4 [70, 70] { R6016 += 1, R5972 += 1, R85 += 1 };
  s2 -> s1 [71, 65535] { R6016 += 1, R5972 += 1, R85 += 1 };
  s3 -> s3 [0, 65535] { R6016 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R6016 += 1, R5972 += 1, R85 += 1 };
  s4 -> s5 [0, 65535] { R6016 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R6016 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 69] { R6018 += 1, R5974 += 1, R88 += 1 };
  s0 -> s2 [0, 69] { R6018 += 1, R5974 += 1, R87 += 1, R88 += 1 };
  s0 -> s0 [0, 65535] { R6017 += 1, R6018 += 1 };
  s0 -> s3 [0, 65535] { R6018 += 1, R5973 += 1, R5974 += 1 };
  s0 -> s4 [70, 70] { R6018 += 1, R5974 += 1, R88 += 1 };
  s0 -> s5 [70, 70] { R6018 += 1, R5974 += 1, R87 += 1, R88 += 1 };
  s0 -> s6 [70, 70] { R6018 += 1, R5974 += 1, R87 += 1, R88 += 1 };
  s0 -> s7 [70, 70] { R6018 += 1, R5974 += 1, R88 += 1 };
  s0 -> s1 [71, 74] { R6018 += 1, R5974 += 1, R88 += 1 };
  s0 -> s2 [71, 65535] { R6018 += 1, R5974 += 1, R87 += 1, R88 += 1 };
  s0 -> s8 [75, 75] { R6018 += 1, R5974 += 1, R88 += 1 };
  s0 -> s1 [76, 65535] { R6018 += 1, R5974 += 1, R88 += 1 };
  s1 -> s1 [0, 69] { R6018 += 1, R5974 += 1, R88 += 1 };
  s1 -> s4 [70, 70] { R6018 += 1, R5974 += 1, R88 += 1 };
  s1 -> s7 [70, 70] { R6018 += 1, R5974 += 1, R88 += 1 };
  s1 -> s1 [71, 74] { R6018 += 1, R5974 += 1, R88 += 1 };
  s1 -> s8 [75, 75] { R6018 += 1, R5974 += 1, R88 += 1 };
  s1 -> s1 [76, 65535] { R6018 += 1, R5974 += 1, R88 += 1 };
  s2 -> s1 [0, 69] { R6018 += 1, R5974 += 1, R88 += 1 };
  s2 -> s2 [0, 69] { R6018 += 1, R5974 += 1, R87 += 1, R88 += 1 };
  s2 -> s4 [70, 70] { R6018 += 1, R5974 += 1, R88 += 1 };
  s2 -> s5 [70, 70] { R6018 += 1, R5974 += 1, R87 += 1, R88 += 1 };
  s2 -> s6 [70, 70] { R6018 += 1, R5974 += 1, R87 += 1, R88 += 1 };
  s2 -> s7 [70, 70] { R6018 += 1, R5974 += 1, R88 += 1 };
  s2 -> s1 [71, 74] { R6018 += 1, R5974 += 1, R88 += 1 };
  s2 -> s2 [71, 65535] { R6018 += 1, R5974 += 1, R87 += 1, R88 += 1 };
  s2 -> s8 [75, 75] { R6018 += 1, R5974 += 1, R88 += 1 };
  s2 -> s1 [76, 65535] { R6018 += 1, R5974 += 1, R88 += 1 };
  s3 -> s1 [0, 69] { R6018 += 1, R5974 += 1, R88 += 1 };
  s3 -> s2 [0, 69] { R6018 += 1, R5974 += 1, R87 += 1, R88 += 1 };
  s3 -> s3 [0, 65535] { R6018 += 1, R5973 += 1, R5974 += 1 };
  s3 -> s4 [70, 70] { R6018 += 1, R5974 += 1, R88 += 1 };
  s3 -> s5 [70, 70] { R6018 += 1, R5974 += 1, R87 += 1, R88 += 1 };
  s3 -> s6 [70, 70] { R6018 += 1, R5974 += 1, R87 += 1, R88 += 1 };
  s3 -> s7 [70, 70] { R6018 += 1, R5974 += 1, R88 += 1 };
  s3 -> s1 [71, 74] { R6018 += 1, R5974 += 1, R88 += 1 };
  s3 -> s2 [71, 65535] { R6018 += 1, R5974 += 1, R87 += 1, R88 += 1 };
  s3 -> s8 [75, 75] { R6018 += 1, R5974 += 1, R88 += 1 };
  s3 -> s1 [76, 65535] { R6018 += 1, R5974 += 1, R88 += 1 };
  s4 -> s4 [0, 74] { R6018 += 1, R5974 += 1, R88 += 1 };
  s4 -> s10 [75, 75] { R6018 += 1, R5974 += 1, R88 += 1 };
  s4 -> s4 [76, 65535] { R6018 += 1, R5974 += 1, R88 += 1 };
  s5 -> s4 [0, 74] { R6018 += 1, R5974 += 1, R88 += 1 };
  s5 -> s5 [0, 65535] { R6018 += 1, R5974 += 1, R87 += 1, R88 += 1 };
  s5 -> s10 [75, 75] { R6018 += 1, R5974 += 1, R88 += 1 };
  s5 -> s4 [76, 65535] { R6018 += 1, R5974 += 1, R88 += 1 };
  s8 -> s8 [0, 69] { R6018 += 1, R5974 += 1, R88 += 1 };
  s8 -> s8 [0, 65535] { R6018 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [70, 70] { R6018 += 1, R5974 += 1, R88 += 1 };
  s8 -> s11 [70, 70] { R6018 += 1, R5974 += 1, R88 += 1 };
  s8 -> s8 [71, 65535] { R6018 += 1, R5974 += 1, R88 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R6018 += 1, R5974 += 1, R88 += 1 };
  s10 -> s9 [0, 65535];
  s10 -> s12 [0, 65535] { R6018 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R6018 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R6018 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 69] { R6020 += 1, R5976 += 1, R91 += 1, R92 += 1 };
  s0 -> s2 [0, 65535] { R6020 += 1, R5975 += 1, R5976 += 1 };
  s0 -> s0 [0, 65535] { R6019 += 1, R6020 += 1 };
  s0 -> s3 [70, 70] { R6020 += 1, R5976 += 1, R91 += 1, R92 += 1 };
  s0 -> s4 [70, 70] { R6020 += 1, R5976 += 1, R91 += 1, R92 += 1 };
  s0 -> s1 [71, 65535] { R6020 += 1, R5976 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 69] { R6020 += 1, R5976 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 65535] { R6020 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [70, 70] { R6020 += 1, R5976 += 1, R91 += 1, R92 += 1 };
  s1 -> s4 [70, 70] { R6020 += 1, R5976 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [71, 65535] { R6020 += 1, R5976 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [0, 69] { R6020 += 1, R5976 += 1, R91 += 1, R92 += 1 };
  s2 -> s2 [0, 65535] { R6020 += 1, R5975 += 1, R5976 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [70, 70] { R6020 += 1, R5976 += 1, R91 += 1, R92 += 1 };
  s2 -> s4 [70, 70] { R6020 += 1, R5976 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [71, 65535] { R6020 += 1, R5976 += 1, R91 += 1, R92 += 1 };
  s3 -> s3 [0, 65535] { R6020 += 1, R5976 += 1, R91 += 1, R92 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R6020 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R6020 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6020 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 69] { R6022 += 1, R5978 += 1, R3452 += 1, R3453 += 1 };
  s0 -> s2 [0, 69] { R6022 += 1, R5978 += 1, R3451 += 1, R3452 += 1 };
  s0 -> s3 [0, 69] { R6022 += 1, R5978 += 1, R3452 += 1 };
  s0 -> s4 [0, 65535] { R6022 += 1, R5977 += 1, R5978 += 1 };
  s0 -> s0 [0, 65535] { R6021 += 1, R6022 += 1 };
  s0 -> s5 [70, 70] { R6022 += 1, R5978 += 1, R3452 += 1, R3453 += 1 };
  s0 -> s6 [70, 70] { R6022 += 1, R5978 += 1, R3451 += 1, R3452 += 1 };
  s0 -> s7 [70, 70] { R6022 += 1, R5978 += 1, R3452 += 1, R3453 += 1 };
  s0 -> s8 [70, 70] { R6022 += 1, R5978 += 1, R3451 += 1, R3452 += 1 };
  s0 -> s9 [70, 70] { R6022 += 1, R5978 += 1, R3452 += 1 };
  s0 -> s10 [70, 70] { R6022 += 1, R5978 += 1, R3452 += 1 };
  s0 -> s3 [71, 74] { R6022 += 1, R5978 += 1, R3452 += 1 };
  s0 -> s1 [71, 65535] { R6022 += 1, R5978 += 1, R3452 += 1, R3453 += 1 };
  s0 -> s2 [71, 65535] { R6022 += 1, R5978 += 1, R3451 += 1, R3452 += 1 };
  s0 -> s3 [76, 65535] { R6022 += 1, R5978 += 1, R3452 += 1 };
  s1 -> s1 [0, 69] { R6022 += 1, R5978 += 1, R3452 += 1, R3453 += 1 };
  s1 -> s3 [0, 69] { R6022 += 1, R5978 += 1, R3452 += 1 };
  s1 -> s5 [70, 70] { R6022 += 1, R5978 += 1, R3452 += 1, R3453 += 1 };
  s1 -> s7 [70, 70] { R6022 += 1, R5978 += 1, R3452 += 1, R3453 += 1 };
  s1 -> s9 [70, 70] { R6022 += 1, R5978 += 1, R3452 += 1 };
  s1 -> s10 [70, 70] { R6022 += 1, R5978 += 1, R3452 += 1 };
  s1 -> s3 [71, 74] { R6022 += 1, R5978 += 1, R3452 += 1 };
  s1 -> s1 [71, 65535] { R6022 += 1, R5978 += 1, R3452 += 1, R3453 += 1 };
  s1 -> s3 [76, 65535] { R6022 += 1, R5978 += 1, R3452 += 1 };
  s2 -> s1 [0, 69] { R6022 += 1, R5978 += 1, R3452 += 1, R3453 += 1 };
  s2 -> s2 [0, 69] { R6022 += 1, R5978 += 1, R3451 += 1, R3452 += 1 };
  s2 -> s3 [0, 69] { R6022 += 1, R5978 += 1, R3452 += 1 };
  s2 -> s5 [70, 70] { R6022 += 1, R5978 += 1, R3452 += 1, R3453 += 1 };
  s2 -> s6 [70, 70] { R6022 += 1, R5978 += 1, R3451 += 1, R3452 += 1 };
  s2 -> s7 [70, 70] { R6022 += 1, R5978 += 1, R3452 += 1, R3453 += 1 };
  s2 -> s8 [70, 70] { R6022 += 1, R5978 += 1, R3451 += 1, R3452 += 1 };
  s2 -> s9 [70, 70] { R6022 += 1, R5978 += 1, R3452 += 1 };
  s2 -> s10 [70, 70] { R6022 += 1, R5978 += 1, R3452 += 1 };
  s2 -> s3 [71, 74] { R6022 += 1, R5978 += 1, R3452 += 1 };
  s2 -> s1 [71, 65535] { R6022 += 1, R5978 += 1, R3452 += 1, R3453 += 1 };
  s2 -> s2 [71, 65535] { R6022 += 1, R5978 += 1, R3451 += 1, R3452 += 1 };
  s2 -> s3 [76, 65535] { R6022 += 1, R5978 += 1, R3452 += 1 };
  s3 -> s3 [0, 69] { R6022 += 1, R5978 += 1, R3452 += 1 };
  s3 -> s3 [0, 65535] { R6022 += 1 };
  s3 -> s12 [0, 65535];
  s3 -> s9 [70, 70] { R6022 += 1, R5978 += 1 };
  s3 -> s10 [70, 70] { R6022 += 1, R5978 += 1 };
  s3 -> s3 [71, 74] { R6022 += 1, R5978 += 1, R3452 += 1 };
  s3 -> s3 [71, 65535] { R6022 += 1, R5978 += 1 };
  s3 -> s3 [76, 65535] { R6022 += 1, R5978 += 1, R3452 += 1 };
  s4 -> s1 [0, 69] { R6022 += 1, R5978 += 1, R3452 += 1, R3453 += 1 };
  s4 -> s2 [0, 69] { R6022 += 1, R5978 += 1, R3451 += 1, R3452 += 1 };
  s4 -> s3 [0, 69] { R6022 += 1, R5978 += 1, R3452 += 1 };
  s4 -> s4 [0, 65535] { R6022 += 1, R5977 += 1, R5978 += 1 };
  s4 -> s5 [70, 70] { R6022 += 1, R5978 += 1, R3452 += 1, R3453 += 1 };
  s4 -> s6 [70, 70] { R6022 += 1, R5978 += 1, R3451 += 1, R3452 += 1 };
  s4 -> s7 [70, 70] { R6022 += 1, R5978 += 1, R3452 += 1, R3453 += 1 };
  s4 -> s8 [70, 70] { R6022 += 1, R5978 += 1, R3451 += 1, R3452 += 1 };
  s4 -> s9 [70, 70] { R6022 += 1, R5978 += 1, R3452 += 1 };
  s4 -> s10 [70, 70] { R6022 += 1, R5978 += 1, R3452 += 1 };
  s4 -> s3 [71, 74] { R6022 += 1, R5978 += 1, R3452 += 1 };
  s4 -> s1 [71, 65535] { R6022 += 1, R5978 += 1, R3452 += 1, R3453 += 1 };
  s4 -> s2 [71, 65535] { R6022 += 1, R5978 += 1, R3451 += 1, R3452 += 1 };
  s4 -> s3 [76, 65535] { R6022 += 1, R5978 += 1, R3452 += 1 };
  s7 -> s10 [0, 74] { R6022 += 1, R5978 += 1, R3452 += 1 };
  s7 -> s7 [0, 65535] { R6022 += 1, R5978 += 1, R3452 += 1, R3453 += 1 };
  s7 -> s10 [76, 65535] { R6022 += 1, R5978 += 1, R3452 += 1 };
  s8 -> s10 [0, 74] { R6022 += 1, R5978 += 1, R3452 += 1 };
  s8 -> s7 [0, 65535] { R6022 += 1, R5978 += 1, R3452 += 1, R3453 += 1 };
  s8 -> s8 [0, 65535] { R6022 += 1, R5978 += 1, R3451 += 1, R3452 += 1 };
  s8 -> s10 [76, 65535] { R6022 += 1, R5978 += 1, R3452 += 1 };
  s9 -> s9 [0, 65535] { R6022 += 1 };
  s9 -> s12 [0, 65535];
  s10 -> s10 [0, 74] { R6022 += 1, R5978 += 1, R3452 += 1 };
  s10 -> s11 [0, 65535] { R6022 += 1 };
  s10 -> s10 [0, 65535] { R6022 += 1, R5978 += 1 };
  s10 -> s12 [0, 65535];
  s10 -> s10 [76, 65535] { R6022 += 1, R5978 += 1, R3452 += 1 };
  s11 -> s11 [0, 65535] { R6022 += 1 };
  s11 -> s12 [0, 65535];
  s12 -> s12 [0, 65535];
  accepting s3, s12, s9, s10, s11;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 69] { R6024 += 1, R5980 += 1, R5690 += 1, R5692 += 1 };
  s0 -> s2 [0, 69] { R6024 += 1, R5980 += 1, R5689 += 1, R5690 += 1 };
  s0 -> s3 [0, 69] { R6024 += 1, R5980 += 1, R5690 += 1, R5691 += 1, R5692 += 1 };
  s0 -> s4 [0, 65535] { R6024 += 1, R5979 += 1, R5980 += 1 };
  s0 -> s0 [0, 65535] { R6023 += 1, R6024 += 1 };
  s0 -> s5 [70, 70] { R6024 += 1, R5980 += 1, R5689 += 1, R5690 += 1 };
  s0 -> s6 [70, 70] { R6024 += 1, R5980 += 1, R5690 += 1, R5692 += 1 };
  s0 -> s7 [70, 70] { R6024 += 1, R5980 += 1, R5690 += 1, R5691 += 1, R5692 += 1 };
  s0 -> s8 [70, 70] { R6024 += 1, R5980 += 1, R5689 += 1, R5690 += 1 };
  s0 -> s9 [70, 70] { R6024 += 1, R5980 += 1, R5690 += 1, R5691 += 1, R5692 += 1 };
  s0 -> s10 [70, 70] { R6024 += 1, R5980 += 1, R5690 += 1, R5692 += 1 };
  s0 -> s1 [71, 74] { R6024 += 1, R5980 += 1, R5690 += 1, R5692 += 1 };
  s0 -> s2 [71, 65535] { R6024 += 1, R5980 += 1, R5689 += 1, R5690 += 1 };
  s0 -> s3 [71, 65535] { R6024 += 1, R5980 += 1, R5690 += 1, R5691 += 1, R5692 += 1 };
  s0 -> s1 [76, 65535] { R6024 += 1, R5980 += 1, R5690 += 1, R5692 += 1 };
  s1 -> s1 [0, 69] { R6024 += 1, R5980 += 1, R5690 += 1, R5692 += 1 };
  s1 -> s1 [0, 65535] { R6024 += 1 };
  s1 -> s11 [0, 65535];
  s1 -> s6 [70, 70] { R6024 += 1, R5980 += 1, R5690 += 1, R5692 += 1 };
  s1 -> s10 [70, 70] { R6024 += 1, R5980 += 1, R5690 += 1, R5692 += 1 };
  s1 -> s1 [71, 74] { R6024 += 1, R5980 += 1, R5690 += 1, R5692 += 1 };
  s1 -> s1 [76, 65535] { R6024 += 1, R5980 += 1, R5690 += 1, R5692 += 1 };
  s2 -> s1 [0, 69] { R6024 += 1, R5980 += 1, R5690 += 1, R5692 += 1 };
  s2 -> s2 [0, 69] { R6024 += 1, R5980 += 1, R5689 += 1, R5690 += 1 };
  s2 -> s3 [0, 69] { R6024 += 1, R5980 += 1, R5690 += 1, R5691 += 1, R5692 += 1 };
  s2 -> s5 [70, 70] { R6024 += 1, R5980 += 1, R5689 += 1, R5690 += 1 };
  s2 -> s6 [70, 70] { R6024 += 1, R5980 += 1, R5690 += 1, R5692 += 1 };
  s2 -> s7 [70, 70] { R6024 += 1, R5980 += 1, R5690 += 1, R5691 += 1, R5692 += 1 };
  s2 -> s8 [70, 70] { R6024 += 1, R5980 += 1, R5689 += 1, R5690 += 1 };
  s2 -> s9 [70, 70] { R6024 += 1, R5980 += 1, R5690 += 1, R5691 += 1, R5692 += 1 };
  s2 -> s10 [70, 70] { R6024 += 1, R5980 += 1, R5690 += 1, R5692 += 1 };
  s2 -> s1 [71, 74] { R6024 += 1, R5980 += 1, R5690 += 1, R5692 += 1 };
  s2 -> s2 [71, 65535] { R6024 += 1, R5980 += 1, R5689 += 1, R5690 += 1 };
  s2 -> s3 [71, 65535] { R6024 += 1, R5980 += 1, R5690 += 1, R5691 += 1, R5692 += 1 };
  s2 -> s1 [76, 65535] { R6024 += 1, R5980 += 1, R5690 += 1, R5692 += 1 };
  s3 -> s1 [0, 69] { R6024 += 1, R5980 += 1, R5690 += 1, R5692 += 1 };
  s3 -> s3 [0, 69] { R6024 += 1, R5980 += 1, R5690 += 1, R5691 += 1, R5692 += 1 };
  s3 -> s6 [70, 70] { R6024 += 1, R5980 += 1, R5690 += 1, R5692 += 1 };
  s3 -> s7 [70, 70] { R6024 += 1, R5980 += 1, R5690 += 1, R5691 += 1, R5692 += 1 };
  s3 -> s9 [70, 70] { R6024 += 1, R5980 += 1, R5690 += 1, R5691 += 1, R5692 += 1 };
  s3 -> s10 [70, 70] { R6024 += 1, R5980 += 1, R5690 += 1, R5692 += 1 };
  s3 -> s1 [71, 74] { R6024 += 1, R5980 += 1, R5690 += 1, R5692 += 1 };
  s3 -> s3 [71, 65535] { R6024 += 1, R5980 += 1, R5690 += 1, R5691 += 1, R5692 += 1 };
  s3 -> s1 [76, 65535] { R6024 += 1, R5980 += 1, R5690 += 1, R5692 += 1 };
  s4 -> s1 [0, 69] { R6024 += 1, R5980 += 1, R5690 += 1, R5692 += 1 };
  s4 -> s2 [0, 69] { R6024 += 1, R5980 += 1, R5689 += 1, R5690 += 1 };
  s4 -> s3 [0, 69] { R6024 += 1, R5980 += 1, R5690 += 1, R5691 += 1, R5692 += 1 };
  s4 -> s4 [0, 65535] { R6024 += 1, R5979 += 1, R5980 += 1 };
  s4 -> s5 [70, 70] { R6024 += 1, R5980 += 1, R5689 += 1, R5690 += 1 };
  s4 -> s6 [70, 70] { R6024 += 1, R5980 += 1, R5690 += 1, R5692 += 1 };
  s4 -> s7 [70, 70] { R6024 += 1, R5980 += 1, R5690 += 1, R5691 += 1, R5692 += 1 };
  s4 -> s8 [70, 70] { R6024 += 1, R5980 += 1, R5689 += 1, R5690 += 1 };
  s4 -> s9 [70, 70] { R6024 += 1, R5980 += 1, R5690 += 1, R5691 += 1, R5692 += 1 };
  s4 -> s10 [70, 70] { R6024 += 1, R5980 += 1, R5690 += 1, R5692 += 1 };
  s4 -> s1 [71, 74] { R6024 += 1, R5980 += 1, R5690 += 1, R5692 += 1 };
  s4 -> s2 [71, 65535] { R6024 += 1, R5980 += 1, R5689 += 1, R5690 += 1 };
  s4 -> s3 [71, 65535] { R6024 += 1, R5980 += 1, R5690 += 1, R5691 += 1, R5692 += 1 };
  s4 -> s1 [76, 65535] { R6024 += 1, R5980 += 1, R5690 += 1, R5692 += 1 };
  s5 -> s6 [0, 74] { R6024 += 1, R5980 += 1, R5690 += 1, R5692 += 1 };
  s5 -> s5 [0, 65535] { R6024 += 1, R5980 += 1, R5689 += 1, R5690 += 1 };
  s5 -> s7 [0, 65535] { R6024 += 1, R5980 += 1, R5690 += 1, R5691 += 1, R5692 += 1 };
  s5 -> s6 [76, 65535] { R6024 += 1, R5980 += 1, R5690 += 1, R5692 += 1 };
  s6 -> s6 [0, 74] { R6024 += 1, R5980 += 1, R5690 += 1, R5692 += 1 };
  s6 -> s6 [0, 65535] { R6024 += 1 };
  s6 -> s11 [0, 65535];
  s6 -> s6 [76, 65535] { R6024 += 1, R5980 += 1, R5690 += 1, R5692 += 1 };
  s7 -> s6 [0, 74] { R6024 += 1, R5980 += 1, R5690 += 1, R5692 += 1 };
  s7 -> s7 [0, 65535] { R6024 += 1, R5980 += 1, R5690 += 1, R5691 += 1, R5692 += 1 };
  s7 -> s6 [76, 65535] { R6024 += 1, R5980 += 1, R5690 += 1, R5692 += 1 };
  s10 -> s10 [0, 65535] { R6024 += 1 };
  s10 -> s11 [0, 65535];
  s11 -> s11 [0, 65535];
  accepting s1, s6, s10, s11;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 69] { R6026 += 1, R5982 += 1, R5917 += 1, R5918 += 1 };
  s0 -> s2 [0, 65535] { R6026 += 1, R5981 += 1, R5982 += 1 };
  s0 -> s0 [0, 65535] { R6025 += 1, R6026 += 1 };
  s0 -> s3 [70, 70] { R6026 += 1, R5982 += 1, R5917 += 1, R5918 += 1 };
  s0 -> s4 [70, 70] { R6026 += 1, R5982 += 1, R5917 += 1, R5918 += 1 };
  s0 -> s1 [71, 65535] { R6026 += 1, R5982 += 1, R5917 += 1, R5918 += 1 };
  s1 -> s1 [0, 69] { R6026 += 1, R5982 += 1, R5917 += 1, R5918 += 1 };
  s1 -> s1 [0, 65535] { R6026 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [70, 70] { R6026 += 1, R5982 += 1, R5917 += 1, R5918 += 1 };
  s1 -> s4 [70, 70] { R6026 += 1, R5982 += 1, R5917 += 1, R5918 += 1 };
  s1 -> s1 [71, 65535] { R6026 += 1, R5982 += 1, R5917 += 1, R5918 += 1 };
  s2 -> s1 [0, 69] { R6026 += 1, R5982 += 1, R5917 += 1, R5918 += 1 };
  s2 -> s2 [0, 65535] { R6026 += 1, R5981 += 1, R5982 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [70, 70] { R6026 += 1, R5982 += 1, R5917 += 1, R5918 += 1 };
  s2 -> s4 [70, 70] { R6026 += 1, R5982 += 1, R5917 += 1, R5918 += 1 };
  s2 -> s1 [71, 65535] { R6026 += 1, R5982 += 1, R5917 += 1, R5918 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R6026 += 1 };
  s4 -> s5 [0, 65535] { R6026 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R6026 += 1, R5982 += 1, R5917 += 1, R5918 += 1 };
  s5 -> s5 [0, 65535] { R6026 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [102, 102];
  accepting s1;
};
};
constraint R2 = R5944 && R3 = R6026 && R23 - R6026 = -1 && R24 = R6026 && R25 - R6026 = -1 && R26 = R6026 && R27 = 0 && R28 = 1 && R29 = 0 && R30 = 1 && R45 + R84 + R83 + -1*R5694 + -1*R5690 - R66 = 0 && R49 + R89 + R87 = 0 && R50 + R90 + R88 + -1*R5694 + -1*R5690 - R66 = 0 && R55 + R96 + R93 + -1*R5696 + -1*R5692 - R68 = 0 && R65 + R5693 + R5689 = 0 && R67 + R5695 + R5691 = 0 && R5943 = 0 && R5967 = 0 && R5968 = 0 && R5973 = 0 && R5974 = 0 && R5977 = 0 && R5978 = 0 && R5979 = 0 && R5980 = 0 && R5983 = 0 && R5984 = R6026 && R5985 = 0 && R5986 = R6026 && R5987 = 0 && R5988 = R6026 && R5989 = 0 && R5990 = R6026 && R5991 = 0 && R5992 = R6026 && R5993 = 0 && R5994 = R6026 && R5995 = 0 && R5996 = R6026 && R5997 = 0 && R5998 = R6026 && R5999 = 0 && R6000 = R6026 && R6001 = 0 && R6002 = R6026 && R6003 = 0 && R6004 = R6026 && R6005 = 0 && R6006 = R6026 && R6007 = 0 && R6008 = R6026 && R6009 = 0 && R6010 = R6026 && R6011 = 0 && R6012 = R6026 && R6013 = 0 && R6014 = R6026 && R6015 = 0 && R6016 = R6026 && R6017 = 0 && R6018 = R6026 && R6019 = 0 && R6020 = R6026 && R6021 = 0 && R6022 = R6026 && R6023 = 0 && R6024 = R6026 && R6025 = 0 && R12 < 1 && R15 < 1 && R16 < 1 && R47 + R86 + R85 < 1 && R61 + R3456 + R3453 < 1 && -1*R5694 + -1*R5690 - R66 < 1 && -1*R5696 + -1*R5692 - R68 < 1 && -1 < R5944 && 0 < R6026 && (R53 + R94 + R91 != 0 || R54 + R95 + R92 + -1*R5694 + -1*R5690 - R66 = 0 || R66 + R5694 + R5690 < 1) && (R59 + R3454 + R3451 != 0 || R60 + R3455 + R3452 + -1*R5694 + -1*R5690 - R66 = 0 || R66 + R5694 + R5690 < 1) && (R66 + R5694 + R5690 != 0 || ((R53 + R94 + R91 != 0 || R54 + R95 + R92 = 0 || R68 + R5696 + R5692 < 1) && (R53 + R94 + R91 = 0 || R68 + R5696 + R5692 < 1))) && (R66 + R5694 + R5690 != 0 || ((R59 + R3454 + R3451 != 0 || R60 + R3455 + R3452 = 0 || R68 + R5696 + R5692 < 1) && (R59 + R3454 + R3451 = 0 || R68 + R5696 + R5692 < 1))) && (R66 + R5694 + R5690 != 0 || ((R73 + R5922 + R5917 != 0 || R74 + R5923 + R5918 = 0 || R68 + R5696 + R5692 < 1) && (R73 + R5922 + R5917 = 0 || R68 + R5696 + R5692 < 1))) && (R68 + R5696 + R5692 != 0 || R77 + R5926 + R5921 = 0 || (R75 + R5924 + R5919 = 0 && R76 + R5925 + R5920 = 0)) && (R73 + R5922 + R5917 != 0 || R66 + R5694 + R5690 + -1*R5923 + -1*R5918 - R74 = 0 || R66 + R5694 + R5690 < 1) && (R75 + R5924 + R5919 != 0 || R68 + R5696 + R5692 + -1*R5925 + -1*R5920 - R76 = 0 || R68 + R5696 + R5692 < 1) && (R5927 != 0 || R5928 = R5944 || (R20 = 0 && R5944 = 0)) && (R5929 != 0 || R5930 = R5944 || (R20 = 0 && R5944 = 0)) && (R5931 != 0 || R5932 = R5944 || (R20 = 0 && R5944 = 0)) && (R5933 != 0 || R5934 = R5944 || (R20 = 0 && R5944 = 0)) && (R5935 != 0 || R5936 = R5944 || (R20 = 0 && R5944 = 0)) && (R5937 != 0 || R5938 = R5944 || (R20 = 0 && R5944 = 0)) && (R5939 != 0 || R5940 = R5944 || (R20 = 0 && R5944 = 0)) && (R5941 != 0 || R5942 = R5944 || (R20 = 0 && R5944 = 0)) && (R5945 != 0 || R5944 = R5946 || (R20 = 0 && R5944 = 0)) && (R21 = 0 || (R5965 = 0 && R5966 = 0)) && (R21 = 0 || (R5969 = 0 && R5970 = 0)) && (R21 = 0 || (R5971 = 0 && R5972 = 0)) && (R21 = 0 || (R5975 = 0 && R5976 = 0)) && (R21 = 0 || (R5981 = 0 && R5982 = 0)) && (R22 = 0 || (R5947 = 0 && R5948 = 0)) && (R22 = 0 || (R5949 = 0 && R5950 = 0)) && (R22 = 0 || (R5951 = 0 && R5952 = 0)) && (R22 = 0 || (R5953 = 0 && R5954 = 0)) && (R22 = 0 || (R5955 = 0 && R5956 = 0)) && (R22 = 0 || (R5957 = 0 && R5958 = 0)) && (R22 = 0 || (R5959 = 0 && R5960 = 0)) && (R22 = 0 || (R5961 = 0 && R5962 = 0)) && (R22 = 0 || (R5963 = 0 && R5964 = 0)) && (R53 + R94 + R91 = 0 || R66 + R5694 + R5690 < 1) && (R59 + R3454 + R3451 = 0 || R66 + R5694 + R5690 < 1) && (R73 + R5922 + R5917 = 0 || R66 + R5694 + R5690 < 1) && (R75 + R5924 + R5919 = 0 || R68 + R5696 + R5692 < 1) && (R5927 = 0 || (R20 = 0 && R5944 = 0)) && (R5929 = 0 || (R20 = 0 && R5944 = 0)) && (R5931 = 0 || (R20 = 0 && R5944 = 0)) && (R5933 = 0 || (R20 = 0 && R5944 = 0)) && (R5935 = 0 || (R20 = 0 && R5944 = 0)) && (R5937 = 0 || (R20 = 0 && R5944 = 0)) && (R5939 = 0 || (R20 = 0 && R5944 = 0)) && (R5941 = 0 || (R20 = 0 && R5944 = 0)) && (R5945 = 0 || (R20 = 0 && R5944 = 0));
// End of Parikh automata intersection problem
