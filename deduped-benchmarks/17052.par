// Parikh automata intersection problem, generated by OSTRICH+
counter int R12, R15, R16, R2, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R4, R45, R47, R49, R5, R50, R53, R54, R55, R59, R60, R61, R65, R66, R67, R68, R6805, R6806, R6807, R6808, R6809, R6810, R73, R74, R75, R76, R77, R83, R84, R85, R86, R87, R88, R89, R90, R91, R92, R93, R94, R95, R96, R9601, R9602, R9603, R9604, R9605, R9606, R9607, R9608, R9609, R9610, R9611, R9612, R9613, R9614, R9615, R9616, R9617, R9618, R9619, R9620, R9621, R9622, R9623, R9624, R9625, R9626, R9627, R9628, R9629, R9630, R9631, R9632, R9633, R9634, R9635, R9636, R9637, R9638, R9639, R9640, R9641, R9642, R9643, R9644, R9645, R9646, R9647, R9648, R9649, R9650, R9651, R9652, R9653, R9654, R9655, R9656, R9657, R9658, R9659, R9660, R9661, R9662, R9663, R9664, R9665, R9666, R9667, R9668, R9669, R9670, R9671, R9672, R9673, R9674, R9675, R9676, R9677, R9678, R9679, R9680, R9681, R9682, R9683, R9684, R9685, R9686, R9687, R9688, R9689, R9690, R9691, R9692, R9693, R9694, R9695, R9696, R9697, R9698, R9699, R9700, R9701, R9702, R9703, R9704, R9705, R9706, R9707, R9708, R9709, R9710, R9711, R9712, R9713, R9714, R9715, R9716, R9717, R9718;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [70, 70];
  s0 -> s0 [71, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [70, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R15 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 69];
  s0 -> s0 [0, 65535] { R16 += 1 };
  s0 -> s2 [70, 70];
  s0 -> s1 [71, 65535];
  s1 -> s1 [0, 69];
  s1 -> s2 [70, 70];
  s1 -> s1 [71, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R24 += 1 };
  s0 -> s0 [0, 65535] { R23 += 1, R24 += 1 };
  s0 -> s2 [9, 13] { R24 += 1 };
  s0 -> s1 [14, 31] { R24 += 1 };
  s0 -> s2 [32, 32] { R24 += 1 };
  s0 -> s1 [33, 65535] { R24 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R24 += 1 };
  s2 -> s1 [0, 65535] { R24 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R25 += 1, R26 += 1 };
  s1 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R28 += 1 };
  s0 -> s0 [0, 65535] { R27 += 1, R28 += 1 };
  s0 -> s2 [9, 13] { R28 += 1 };
  s0 -> s1 [14, 31] { R28 += 1 };
  s0 -> s2 [32, 32] { R28 += 1 };
  s0 -> s1 [33, 65535] { R28 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R28 += 1 };
  s2 -> s1 [0, 65535] { R28 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R29 += 1, R30 += 1 };
  s1 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R9639 += 1, R9640 += 1 };
  s0 -> s1 [0, 65535] { R9640 += 1, R22 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R9640 += 1, R22 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 69] { R9642 += 1 };
  s0 -> s0 [0, 65535] { R9641 += 1, R9642 += 1 };
  s0 -> s2 [70, 70] { R9642 += 1 };
  s0 -> s3 [70, 70] { R9642 += 1 };
  s0 -> s1 [76, 65535] { R9642 += 1 };
  s1 -> s1 [0, 69] { R9642 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R9642 += 1 };
  s1 -> s3 [70, 70] { R9642 += 1 };
  s1 -> s1 [76, 65535] { R9642 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 70] { R9642 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [76, 65535] { R9642 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 69] { R9644 += 1, R45 += 1 };
  s0 -> s0 [0, 65535] { R9643 += 1, R9644 += 1 };
  s0 -> s2 [70, 70] { R9644 += 1, R45 += 1 };
  s0 -> s3 [70, 70] { R9644 += 1, R45 += 1 };
  s0 -> s1 [71, 65535] { R9644 += 1, R45 += 1 };
  s1 -> s1 [0, 69] { R9644 += 1, R45 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R9644 += 1, R45 += 1 };
  s1 -> s3 [70, 70] { R9644 += 1, R45 += 1 };
  s1 -> s1 [71, 65535] { R9644 += 1, R45 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R9644 += 1, R45 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 69] { R9646 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R9645 += 1, R9646 += 1 };
  s0 -> s2 [70, 70] { R9646 += 1, R47 += 1 };
  s0 -> s3 [70, 70] { R9646 += 1, R47 += 1 };
  s0 -> s1 [71, 65535] { R9646 += 1, R47 += 1 };
  s1 -> s1 [0, 69] { R9646 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R9646 += 1, R47 += 1 };
  s1 -> s3 [70, 70] { R9646 += 1, R47 += 1 };
  s1 -> s1 [71, 65535] { R9646 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R9646 += 1, R47 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 69] { R9648 += 1, R49 += 1, R50 += 1 };
  s0 -> s0 [0, 65535] { R9647 += 1, R9648 += 1 };
  s0 -> s2 [70, 70] { R9648 += 1, R49 += 1, R50 += 1 };
  s0 -> s3 [70, 70] { R9648 += 1, R49 += 1, R50 += 1 };
  s0 -> s1 [71, 65535] { R9648 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 69] { R9648 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R9648 += 1, R49 += 1, R50 += 1 };
  s1 -> s3 [70, 70] { R9648 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [71, 65535] { R9648 += 1, R49 += 1, R50 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R9648 += 1, R49 += 1, R50 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 69] { R9650 += 1, R53 += 1, R54 += 1 };
  s0 -> s0 [0, 65535] { R9649 += 1, R9650 += 1 };
  s0 -> s2 [70, 70] { R9650 += 1, R53 += 1, R54 += 1 };
  s0 -> s3 [70, 70] { R9650 += 1, R53 += 1, R54 += 1 };
  s0 -> s1 [71, 65535] { R9650 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 69] { R9650 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R9650 += 1, R53 += 1, R54 += 1 };
  s1 -> s3 [70, 70] { R9650 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [71, 65535] { R9650 += 1, R53 += 1, R54 += 1 };
  s2 -> s2 [0, 65535] { R9650 += 1, R53 += 1, R54 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 69] { R9652 += 1, R59 += 1, R60 += 1 };
  s0 -> s0 [0, 65535] { R9651 += 1, R9652 += 1 };
  s0 -> s2 [70, 70] { R9652 += 1, R59 += 1, R60 += 1 };
  s0 -> s3 [70, 70] { R9652 += 1, R59 += 1, R60 += 1 };
  s0 -> s1 [71, 65535] { R9652 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 69] { R9652 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R9652 += 1, R59 += 1, R60 += 1 };
  s1 -> s3 [70, 70] { R9652 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [71, 65535] { R9652 += 1, R59 += 1, R60 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R9652 += 1, R59 += 1, R60 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 69] { R9654 += 1, R65 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R9653 += 1, R9654 += 1 };
  s0 -> s2 [70, 70] { R9654 += 1, R65 += 1, R66 += 1 };
  s0 -> s3 [70, 70] { R9654 += 1, R65 += 1, R66 += 1 };
  s0 -> s1 [71, 65535] { R9654 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 69] { R9654 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R9654 += 1, R65 += 1, R66 += 1 };
  s1 -> s3 [70, 70] { R9654 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [71, 65535] { R9654 += 1, R65 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R9654 += 1, R65 += 1, R66 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 69] { R9656 += 1, R73 += 1, R74 += 1 };
  s0 -> s0 [0, 65535] { R9655 += 1, R9656 += 1 };
  s0 -> s2 [70, 70] { R9656 += 1, R73 += 1, R74 += 1 };
  s0 -> s3 [70, 70] { R9656 += 1, R73 += 1, R74 += 1 };
  s0 -> s1 [71, 65535] { R9656 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 69] { R9656 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R9656 += 1, R73 += 1, R74 += 1 };
  s1 -> s3 [70, 70] { R9656 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [71, 65535] { R9656 += 1, R73 += 1, R74 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R9656 += 1, R73 += 1, R74 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 69] { R9676 += 1 };
  s0 -> s0 [0, 65535] { R9675 += 1, R9676 += 1 };
  s0 -> s2 [70, 70] { R9676 += 1 };
  s0 -> s1 [71, 65535] { R9676 += 1 };
  s1 -> s1 [0, 69] { R9676 += 1 };
  s1 -> s2 [70, 70] { R9676 += 1 };
  s1 -> s1 [71, 65535] { R9676 += 1 };
  s2 -> s2 [0, 65535] { R9676 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R9678 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R9677 += 1, R9678 += 1 };
  s1 -> s1 [0, 65535] { R9678 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 69] { R9680 += 1 };
  s0 -> s2 [0, 65535] { R9680 += 1, R12 += 1 };
  s0 -> s0 [0, 65535] { R9679 += 1, R9680 += 1 };
  s0 -> s3 [70, 70] { R9680 += 1 };
  s0 -> s1 [71, 65535] { R9680 += 1 };
  s1 -> s1 [0, 69] { R9680 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [70, 70] { R9680 += 1 };
  s1 -> s1 [71, 65535] { R9680 += 1 };
  s2 -> s1 [0, 69] { R9680 += 1 };
  s2 -> s2 [0, 65535] { R9680 += 1, R12 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [70, 70] { R9680 += 1 };
  s2 -> s1 [71, 65535] { R9680 += 1 };
  s3 -> s3 [0, 65535] { R9680 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 69] { R9682 += 1, R9620 += 1 };
  s0 -> s0 [0, 65535] { R9681 += 1, R9682 += 1 };
  s0 -> s2 [0, 65535] { R9682 += 1, R9619 += 1, R9620 += 1 };
  s0 -> s1 [71, 65535] { R9682 += 1, R9620 += 1 };
  s1 -> s1 [0, 69] { R9682 += 1, R9620 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R9682 += 1 };
  s1 -> s1 [71, 65535] { R9682 += 1, R9620 += 1 };
  s2 -> s1 [0, 69] { R9682 += 1, R9620 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R9682 += 1, R9619 += 1, R9620 += 1 };
  s2 -> s1 [71, 65535] { R9682 += 1, R9620 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s0 [0, 65535] { R9683 += 1, R9684 += 1 };
  s0 -> s1 [0, 65535] { R9684 += 1, R9621 += 1, R9622 += 1 };
  s0 -> s2 [0, 65535] { R9684 += 1, R9622 += 1, R20 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R9684 += 1, R9621 += 1, R9622 += 1 };
  s1 -> s2 [0, 65535] { R9684 += 1, R9622 += 1, R20 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R9684 += 1, R9622 += 1, R20 += 1 };
  s2 -> s4 [0, 65535] { R9684 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R9684 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 70] { R9686 += 1, R9624 += 1 };
  s0 -> s2 [0, 65535] { R9686 += 1, R9623 += 1, R9624 += 1 };
  s0 -> s0 [0, 65535] { R9685 += 1, R9686 += 1 };
  s0 -> s1 [75, 65535] { R9686 += 1, R9624 += 1 };
  s1 -> s1 [0, 70] { R9686 += 1, R9624 += 1 };
  s1 -> s1 [0, 65535] { R9686 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [75, 65535] { R9686 += 1, R9624 += 1 };
  s2 -> s1 [0, 70] { R9686 += 1, R9624 += 1 };
  s2 -> s2 [0, 65535] { R9686 += 1, R9623 += 1, R9624 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [75, 65535] { R9686 += 1, R9624 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s0 [0, 65535] { R9687 += 1, R9688 += 1 };
  s0 -> s1 [0, 65535] { R9688 += 1, R9625 += 1, R9626 += 1 };
  s0 -> s2 [0, 65535] { R9688 += 1, R9626 += 1, R84 += 1 };
  s1 -> s1 [0, 65535] { R9688 += 1, R9625 += 1, R9626 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R9688 += 1, R9626 += 1, R84 += 1 };
  s2 -> s3 [0, 65535] { R9688 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R9688 += 1, R9626 += 1, R84 += 1 };
  s3 -> s3 [0, 65535] { R9688 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 74] { R9690 += 1, R9628 += 1 };
  s0 -> s2 [0, 65535] { R9690 += 1, R9627 += 1, R9628 += 1 };
  s0 -> s0 [0, 65535] { R9689 += 1, R9690 += 1 };
  s0 -> s3 [0, 65535] { R9690 += 1, R9628 += 1, R86 += 1 };
  s0 -> s1 [76, 65535] { R9690 += 1, R9628 += 1 };
  s1 -> s1 [0, 74] { R9690 += 1, R9628 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R9690 += 1 };
  s1 -> s1 [76, 65535] { R9690 += 1, R9628 += 1 };
  s2 -> s1 [0, 74] { R9690 += 1, R9628 += 1 };
  s2 -> s2 [0, 65535] { R9690 += 1, R9627 += 1, R9628 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R9690 += 1, R9628 += 1, R86 += 1 };
  s2 -> s1 [76, 65535] { R9690 += 1, R9628 += 1 };
  s3 -> s1 [0, 74] { R9690 += 1, R9628 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R9690 += 1, R9628 += 1, R86 += 1 };
  s3 -> s5 [0, 65535] { R9690 += 1 };
  s3 -> s1 [76, 65535] { R9690 += 1, R9628 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R9690 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 65535] { R9692 += 1, R9629 += 1, R9630 += 1 };
  s0 -> s2 [0, 65535] { R9692 += 1, R9630 += 1, R90 += 1 };
  s0 -> s0 [0, 65535] { R9691 += 1, R9692 += 1 };
  s0 -> s3 [0, 65535] { R9692 += 1, R9630 += 1 };
  s1 -> s1 [0, 65535] { R9692 += 1, R9629 += 1, R9630 += 1 };
  s1 -> s2 [0, 65535] { R9692 += 1, R9630 += 1, R90 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s3 [0, 65535] { R9692 += 1, R9630 += 1 };
  s2 -> s2 [0, 65535] { R9692 += 1, R9630 += 1, R90 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R9692 += 1, R9630 += 1 };
  s2 -> s5 [0, 65535] { R9692 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R9692 += 1, R9630 += 1 };
  s3 -> s5 [0, 65535] { R9692 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R9692 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R9694 += 1, R9632 += 1, R95 += 1, R96 += 1 };
  s0 -> s0 [0, 65535] { R9693 += 1, R9694 += 1 };
  s0 -> s2 [0, 65535] { R9694 += 1, R9632 += 1, R94 += 1, R95 += 1 };
  s0 -> s3 [0, 65535] { R9694 += 1, R9631 += 1, R9632 += 1 };
  s1 -> s1 [0, 65535] { R9694 += 1, R9632 += 1, R95 += 1, R96 += 1 };
  s1 -> s5 [0, 65535] { R9694 += 1 };
  s1 -> s6 [0, 65535] { R9694 += 1, R9632 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R9694 += 1, R9632 += 1, R95 += 1, R96 += 1 };
  s2 -> s2 [0, 65535] { R9694 += 1, R9632 += 1, R94 += 1, R95 += 1 };
  s2 -> s5 [0, 65535] { R9694 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R9694 += 1, R9632 += 1, R95 += 1, R96 += 1 };
  s3 -> s2 [0, 65535] { R9694 += 1, R9632 += 1, R94 += 1, R95 += 1 };
  s3 -> s3 [0, 65535] { R9694 += 1, R9631 += 1, R9632 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R9694 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R9694 += 1 };
  s6 -> s6 [0, 65535] { R9694 += 1, R9632 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 74] { R9696 += 1, R9634 += 1, R6809 += 1 };
  s0 -> s0 [0, 65535] { R9695 += 1, R9696 += 1 };
  s0 -> s2 [0, 65535] { R9696 += 1, R9633 += 1, R9634 += 1 };
  s0 -> s3 [0, 65535] { R9696 += 1, R9634 += 1, R6809 += 1, R6810 += 1 };
  s0 -> s4 [0, 65535] { R9696 += 1, R9634 += 1 };
  s0 -> s1 [76, 65535] { R9696 += 1, R9634 += 1, R6809 += 1 };
  s1 -> s1 [0, 74] { R9696 += 1, R9634 += 1, R6809 += 1 };
  s1 -> s1 [0, 65535] { R9696 += 1, R9634 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R9696 += 1 };
  s1 -> s1 [76, 65535] { R9696 += 1, R9634 += 1, R6809 += 1 };
  s2 -> s1 [0, 74] { R9696 += 1, R9634 += 1, R6809 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R9696 += 1, R9633 += 1, R9634 += 1 };
  s2 -> s3 [0, 65535] { R9696 += 1, R9634 += 1, R6809 += 1, R6810 += 1 };
  s2 -> s4 [0, 65535] { R9696 += 1, R9634 += 1 };
  s2 -> s1 [76, 65535] { R9696 += 1, R9634 += 1, R6809 += 1 };
  s3 -> s1 [0, 74] { R9696 += 1, R9634 += 1, R6809 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R9696 += 1, R9634 += 1, R6809 += 1, R6810 += 1 };
  s3 -> s6 [0, 65535] { R9696 += 1 };
  s3 -> s4 [0, 65535] { R9696 += 1, R9634 += 1 };
  s3 -> s1 [76, 65535] { R9696 += 1, R9634 += 1, R6809 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R9696 += 1 };
  s4 -> s4 [0, 65535] { R9696 += 1, R9634 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9696 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 74] { R9698 += 1, R9636 += 1, R9606 += 1, R9608 += 1 };
  s0 -> s2 [0, 65535] { R9698 += 1, R9635 += 1, R9636 += 1 };
  s0 -> s3 [0, 65535] { R9698 += 1, R9636 += 1, R9606 += 1, R9607 += 1, R9608 += 1 };
  s0 -> s0 [0, 65535] { R9697 += 1, R9698 += 1 };
  s0 -> s4 [75, 75] { R9698 += 1, R9636 += 1, R9606 += 1, R9608 += 1 };
  s0 -> s1 [76, 65535] { R9698 += 1, R9636 += 1, R9606 += 1, R9608 += 1 };
  s1 -> s1 [0, 74] { R9698 += 1, R9636 += 1, R9606 += 1, R9608 += 1 };
  s1 -> s4 [75, 75] { R9698 += 1, R9636 += 1, R9606 += 1, R9608 += 1 };
  s1 -> s1 [76, 65535] { R9698 += 1, R9636 += 1, R9606 += 1, R9608 += 1 };
  s2 -> s1 [0, 74] { R9698 += 1, R9636 += 1, R9606 += 1, R9608 += 1 };
  s2 -> s2 [0, 65535] { R9698 += 1, R9635 += 1, R9636 += 1 };
  s2 -> s3 [0, 65535] { R9698 += 1, R9636 += 1, R9606 += 1, R9607 += 1, R9608 += 1 };
  s2 -> s4 [75, 75] { R9698 += 1, R9636 += 1, R9606 += 1, R9608 += 1 };
  s2 -> s1 [76, 65535] { R9698 += 1, R9636 += 1, R9606 += 1, R9608 += 1 };
  s3 -> s1 [0, 74] { R9698 += 1, R9636 += 1, R9606 += 1, R9608 += 1 };
  s3 -> s3 [0, 65535] { R9698 += 1, R9636 += 1, R9606 += 1, R9607 += 1, R9608 += 1 };
  s3 -> s4 [75, 75] { R9698 += 1, R9636 += 1, R9606 += 1, R9608 += 1 };
  s3 -> s1 [76, 65535] { R9698 += 1, R9636 += 1, R9606 += 1, R9608 += 1 };
  s4 -> s5 [0, 65535] { R9698 += 1, R9636 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R9698 += 1 };
  s4 -> s8 [0, 65535] { R9698 += 1, R9636 += 1, R9606 += 1 };
  s4 -> s4 [0, 65535] { R9698 += 1, R9636 += 1, R9606 += 1, R9608 += 1 };
  s5 -> s5 [0, 65535] { R9698 += 1, R9636 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R9698 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R9698 += 1 };
  s8 -> s5 [0, 65535] { R9698 += 1, R9636 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R9698 += 1 };
  s8 -> s8 [0, 65535] { R9698 += 1, R9636 += 1, R9606 += 1 };
  accepting s4, s8, s5, s6, s7;
};
automaton value2_29 {
  init s0;
  s0 -> s0 [0, 65535] { R9699 += 1, R9700 += 1 };
  s0 -> s1 [0, 65535] { R9700 += 1, R9637 += 1, R9638 += 1 };
  s0 -> s2 [0, 65535] { R9700 += 1, R9638 += 1 };
  s0 -> s3 [0, 65535] { R9700 += 1, R9638 += 1, R9615 += 1 };
  s1 -> s1 [0, 65535] { R9700 += 1, R9637 += 1, R9638 += 1 };
  s1 -> s2 [0, 65535] { R9700 += 1, R9638 += 1 };
  s1 -> s3 [0, 65535] { R9700 += 1, R9638 += 1, R9615 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R9700 += 1, R9638 += 1 };
  s2 -> s4 [0, 65535] { R9700 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R9700 += 1, R9638 += 1 };
  s3 -> s3 [0, 65535] { R9700 += 1, R9638 += 1, R9615 += 1 };
  s3 -> s4 [0, 65535] { R9700 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R9700 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R9702 += 1, R9657 += 1, R9658 += 1 };
  s0 -> s2 [0, 65535] { R9702 += 1, R9658 += 1, R21 += 1 };
  s0 -> s0 [0, 65535] { R9701 += 1, R9702 += 1 };
  s1 -> s1 [0, 65535] { R9702 += 1, R9657 += 1, R9658 += 1 };
  s1 -> s2 [0, 65535] { R9702 += 1, R9658 += 1, R21 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R9702 += 1, R9658 += 1, R21 += 1 };
  s2 -> s3 [0, 65535] { R9702 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R9702 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 69] { R9704 += 1, R9660 += 1 };
  s0 -> s0 [0, 65535] { R9703 += 1, R9704 += 1 };
  s0 -> s2 [0, 65535] { R9704 += 1, R9659 += 1, R9660 += 1 };
  s0 -> s3 [70, 70] { R9704 += 1, R9660 += 1 };
  s0 -> s4 [70, 70] { R9704 += 1, R9660 += 1 };
  s0 -> s5 [75, 75] { R9704 += 1, R9660 += 1 };
  s0 -> s1 [76, 65535] { R9704 += 1, R9660 += 1 };
  s1 -> s1 [0, 69] { R9704 += 1, R9660 += 1 };
  s1 -> s3 [70, 70] { R9704 += 1, R9660 += 1 };
  s1 -> s4 [70, 70] { R9704 += 1, R9660 += 1 };
  s1 -> s5 [75, 75] { R9704 += 1, R9660 += 1 };
  s1 -> s1 [76, 65535] { R9704 += 1, R9660 += 1 };
  s2 -> s1 [0, 69] { R9704 += 1, R9660 += 1 };
  s2 -> s2 [0, 65535] { R9704 += 1, R9659 += 1, R9660 += 1 };
  s2 -> s3 [70, 70] { R9704 += 1, R9660 += 1 };
  s2 -> s4 [70, 70] { R9704 += 1, R9660 += 1 };
  s2 -> s5 [75, 75] { R9704 += 1, R9660 += 1 };
  s2 -> s1 [76, 65535] { R9704 += 1, R9660 += 1 };
  s4 -> s4 [0, 70] { R9704 += 1, R9660 += 1 };
  s4 -> s8 [75, 75] { R9704 += 1, R9660 += 1 };
  s4 -> s4 [76, 65535] { R9704 += 1, R9660 += 1 };
  s5 -> s5 [0, 69] { R9704 += 1, R9660 += 1 };
  s5 -> s5 [0, 65535] { R9704 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [70, 70] { R9704 += 1, R9660 += 1 };
  s5 -> s8 [70, 70] { R9704 += 1, R9660 += 1 };
  s5 -> s5 [75, 65535] { R9704 += 1, R9660 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R9704 += 1 };
  s8 -> s8 [0, 70] { R9704 += 1, R9660 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R9704 += 1 };
  s8 -> s8 [75, 65535] { R9704 += 1, R9660 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 69] { R9706 += 1, R9662 += 1, R83 += 1 };
  s0 -> s0 [0, 65535] { R9705 += 1, R9706 += 1 };
  s0 -> s2 [0, 65535] { R9706 += 1, R9661 += 1, R9662 += 1 };
  s0 -> s3 [70, 70] { R9706 += 1, R9662 += 1, R83 += 1 };
  s0 -> s4 [70, 70] { R9706 += 1, R9662 += 1, R83 += 1 };
  s0 -> s1 [71, 65535] { R9706 += 1, R9662 += 1, R83 += 1 };
  s1 -> s1 [0, 69] { R9706 += 1, R9662 += 1, R83 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R9706 += 1 };
  s1 -> s3 [70, 70] { R9706 += 1, R9662 += 1, R83 += 1 };
  s1 -> s4 [70, 70] { R9706 += 1, R9662 += 1, R83 += 1 };
  s1 -> s1 [71, 65535] { R9706 += 1, R9662 += 1, R83 += 1 };
  s2 -> s1 [0, 69] { R9706 += 1, R9662 += 1, R83 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R9706 += 1, R9661 += 1, R9662 += 1 };
  s2 -> s3 [70, 70] { R9706 += 1, R9662 += 1, R83 += 1 };
  s2 -> s4 [70, 70] { R9706 += 1, R9662 += 1, R83 += 1 };
  s2 -> s1 [71, 65535] { R9706 += 1, R9662 += 1, R83 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R9706 += 1 };
  s4 -> s5 [0, 65535] { R9706 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R9706 += 1, R9662 += 1, R83 += 1 };
  s5 -> s5 [0, 65535] { R9706 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 69] { R9708 += 1, R9664 += 1, R85 += 1 };
  s0 -> s2 [0, 65535] { R9708 += 1, R9663 += 1, R9664 += 1 };
  s0 -> s0 [0, 65535] { R9707 += 1, R9708 += 1 };
  s0 -> s3 [70, 70] { R9708 += 1, R9664 += 1, R85 += 1 };
  s0 -> s4 [70, 70] { R9708 += 1, R9664 += 1, R85 += 1 };
  s0 -> s1 [71, 65535] { R9708 += 1, R9664 += 1, R85 += 1 };
  s1 -> s1 [0, 69] { R9708 += 1, R9664 += 1, R85 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R9708 += 1 };
  s1 -> s3 [70, 70] { R9708 += 1, R9664 += 1, R85 += 1 };
  s1 -> s4 [70, 70] { R9708 += 1, R9664 += 1, R85 += 1 };
  s1 -> s1 [71, 65535] { R9708 += 1, R9664 += 1, R85 += 1 };
  s2 -> s1 [0, 69] { R9708 += 1, R9664 += 1, R85 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R9708 += 1, R9663 += 1, R9664 += 1 };
  s2 -> s3 [70, 70] { R9708 += 1, R9664 += 1, R85 += 1 };
  s2 -> s4 [70, 70] { R9708 += 1, R9664 += 1, R85 += 1 };
  s2 -> s1 [71, 65535] { R9708 += 1, R9664 += 1, R85 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R9708 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R9708 += 1, R9664 += 1, R85 += 1 };
  s4 -> s6 [0, 65535] { R9708 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9708 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 69] { R9710 += 1, R9666 += 1, R87 += 1, R88 += 1 };
  s0 -> s2 [0, 69] { R9710 += 1, R9666 += 1, R88 += 1 };
  s0 -> s3 [0, 65535] { R9710 += 1, R9665 += 1, R9666 += 1 };
  s0 -> s0 [0, 65535] { R9709 += 1, R9710 += 1 };
  s0 -> s4 [70, 70] { R9710 += 1, R9666 += 1, R88 += 1 };
  s0 -> s5 [70, 70] { R9710 += 1, R9666 += 1, R87 += 1, R88 += 1 };
  s0 -> s6 [70, 70] { R9710 += 1, R9666 += 1, R88 += 1 };
  s0 -> s7 [70, 70] { R9710 += 1, R9666 += 1, R87 += 1, R88 += 1 };
  s0 -> s2 [71, 74] { R9710 += 1, R9666 += 1, R88 += 1 };
  s0 -> s1 [71, 65535] { R9710 += 1, R9666 += 1, R87 += 1, R88 += 1 };
  s0 -> s8 [75, 75] { R9710 += 1, R9666 += 1, R88 += 1 };
  s0 -> s2 [76, 65535] { R9710 += 1, R9666 += 1, R88 += 1 };
  s1 -> s1 [0, 69] { R9710 += 1, R9666 += 1, R87 += 1, R88 += 1 };
  s1 -> s2 [0, 69] { R9710 += 1, R9666 += 1, R88 += 1 };
  s1 -> s4 [70, 70] { R9710 += 1, R9666 += 1, R88 += 1 };
  s1 -> s5 [70, 70] { R9710 += 1, R9666 += 1, R87 += 1, R88 += 1 };
  s1 -> s6 [70, 70] { R9710 += 1, R9666 += 1, R88 += 1 };
  s1 -> s7 [70, 70] { R9710 += 1, R9666 += 1, R87 += 1, R88 += 1 };
  s1 -> s2 [71, 74] { R9710 += 1, R9666 += 1, R88 += 1 };
  s1 -> s1 [71, 65535] { R9710 += 1, R9666 += 1, R87 += 1, R88 += 1 };
  s1 -> s8 [75, 75] { R9710 += 1, R9666 += 1, R88 += 1 };
  s1 -> s2 [76, 65535] { R9710 += 1, R9666 += 1, R88 += 1 };
  s2 -> s2 [0, 69] { R9710 += 1, R9666 += 1, R88 += 1 };
  s2 -> s6 [70, 70] { R9710 += 1, R9666 += 1, R88 += 1 };
  s2 -> s4 [70, 70] { R9710 += 1, R9666 += 1, R88 += 1 };
  s2 -> s2 [71, 74] { R9710 += 1, R9666 += 1, R88 += 1 };
  s2 -> s8 [75, 75] { R9710 += 1, R9666 += 1, R88 += 1 };
  s2 -> s2 [76, 65535] { R9710 += 1, R9666 += 1, R88 += 1 };
  s3 -> s1 [0, 69] { R9710 += 1, R9666 += 1, R87 += 1, R88 += 1 };
  s3 -> s2 [0, 69] { R9710 += 1, R9666 += 1, R88 += 1 };
  s3 -> s3 [0, 65535] { R9710 += 1, R9665 += 1, R9666 += 1 };
  s3 -> s4 [70, 70] { R9710 += 1, R9666 += 1, R88 += 1 };
  s3 -> s5 [70, 70] { R9710 += 1, R9666 += 1, R87 += 1, R88 += 1 };
  s3 -> s6 [70, 70] { R9710 += 1, R9666 += 1, R88 += 1 };
  s3 -> s7 [70, 70] { R9710 += 1, R9666 += 1, R87 += 1, R88 += 1 };
  s3 -> s2 [71, 74] { R9710 += 1, R9666 += 1, R88 += 1 };
  s3 -> s1 [71, 65535] { R9710 += 1, R9666 += 1, R87 += 1, R88 += 1 };
  s3 -> s8 [75, 75] { R9710 += 1, R9666 += 1, R88 += 1 };
  s3 -> s2 [76, 65535] { R9710 += 1, R9666 += 1, R88 += 1 };
  s4 -> s4 [0, 74] { R9710 += 1, R9666 += 1, R88 += 1 };
  s4 -> s10 [75, 75] { R9710 += 1, R9666 += 1, R88 += 1 };
  s4 -> s4 [76, 65535] { R9710 += 1, R9666 += 1, R88 += 1 };
  s5 -> s4 [0, 74] { R9710 += 1, R9666 += 1, R88 += 1 };
  s5 -> s5 [0, 65535] { R9710 += 1, R9666 += 1, R87 += 1, R88 += 1 };
  s5 -> s10 [75, 75] { R9710 += 1, R9666 += 1, R88 += 1 };
  s5 -> s4 [76, 65535] { R9710 += 1, R9666 += 1, R88 += 1 };
  s8 -> s8 [0, 69] { R9710 += 1, R9666 += 1, R88 += 1 };
  s8 -> s8 [0, 65535] { R9710 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [70, 70] { R9710 += 1, R9666 += 1, R88 += 1 };
  s8 -> s11 [70, 70] { R9710 += 1, R9666 += 1, R88 += 1 };
  s8 -> s8 [71, 65535] { R9710 += 1, R9666 += 1, R88 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R9710 += 1, R9666 += 1, R88 += 1 };
  s10 -> s12 [0, 65535] { R9710 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R9710 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R9710 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 69] { R9712 += 1, R9668 += 1, R91 += 1, R92 += 1 };
  s0 -> s0 [0, 65535] { R9711 += 1, R9712 += 1 };
  s0 -> s2 [0, 65535] { R9712 += 1, R9667 += 1, R9668 += 1 };
  s0 -> s3 [70, 70] { R9712 += 1, R9668 += 1, R91 += 1, R92 += 1 };
  s0 -> s4 [70, 70] { R9712 += 1, R9668 += 1, R91 += 1, R92 += 1 };
  s0 -> s1 [71, 65535] { R9712 += 1, R9668 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 69] { R9712 += 1, R9668 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 65535] { R9712 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [70, 70] { R9712 += 1, R9668 += 1, R91 += 1, R92 += 1 };
  s1 -> s4 [70, 70] { R9712 += 1, R9668 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [71, 65535] { R9712 += 1, R9668 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [0, 69] { R9712 += 1, R9668 += 1, R91 += 1, R92 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R9712 += 1, R9667 += 1, R9668 += 1 };
  s2 -> s3 [70, 70] { R9712 += 1, R9668 += 1, R91 += 1, R92 += 1 };
  s2 -> s4 [70, 70] { R9712 += 1, R9668 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [71, 65535] { R9712 += 1, R9668 += 1, R91 += 1, R92 += 1 };
  s3 -> s3 [0, 65535] { R9712 += 1, R9668 += 1, R91 += 1, R92 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R9712 += 1 };
  s4 -> s4 [0, 65535] { R9712 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9712 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 69] { R9714 += 1, R9670 += 1, R6806 += 1, R6807 += 1 };
  s0 -> s2 [0, 69] { R9714 += 1, R9670 += 1, R6805 += 1, R6806 += 1 };
  s0 -> s3 [0, 65535] { R9714 += 1, R9669 += 1, R9670 += 1 };
  s0 -> s0 [0, 65535] { R9713 += 1, R9714 += 1 };
  s0 -> s4 [70, 70] { R9714 += 1, R9670 += 1, R6805 += 1, R6806 += 1 };
  s0 -> s5 [70, 70] { R9714 += 1, R9670 += 1, R6805 += 1, R6806 += 1 };
  s0 -> s6 [70, 70] { R9714 += 1, R9670 += 1, R6806 += 1, R6807 += 1 };
  s0 -> s7 [70, 70] { R9714 += 1, R9670 += 1, R6806 += 1, R6807 += 1 };
  s0 -> s1 [71, 65535] { R9714 += 1, R9670 += 1, R6806 += 1, R6807 += 1 };
  s0 -> s2 [71, 65535] { R9714 += 1, R9670 += 1, R6805 += 1, R6806 += 1 };
  s1 -> s1 [0, 69] { R9714 += 1, R9670 += 1, R6806 += 1, R6807 += 1 };
  s1 -> s1 [0, 65535] { R9714 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s6 [70, 70] { R9714 += 1, R9670 += 1, R6806 += 1, R6807 += 1 };
  s1 -> s7 [70, 70] { R9714 += 1, R9670 += 1, R6806 += 1, R6807 += 1 };
  s1 -> s1 [71, 65535] { R9714 += 1, R9670 += 1, R6806 += 1, R6807 += 1 };
  s2 -> s1 [0, 69] { R9714 += 1, R9670 += 1, R6806 += 1, R6807 += 1 };
  s2 -> s2 [0, 69] { R9714 += 1, R9670 += 1, R6805 += 1, R6806 += 1 };
  s2 -> s4 [70, 70] { R9714 += 1, R9670 += 1, R6805 += 1, R6806 += 1 };
  s2 -> s5 [70, 70] { R9714 += 1, R9670 += 1, R6805 += 1, R6806 += 1 };
  s2 -> s6 [70, 70] { R9714 += 1, R9670 += 1, R6806 += 1, R6807 += 1 };
  s2 -> s7 [70, 70] { R9714 += 1, R9670 += 1, R6806 += 1, R6807 += 1 };
  s2 -> s1 [71, 65535] { R9714 += 1, R9670 += 1, R6806 += 1, R6807 += 1 };
  s2 -> s2 [71, 65535] { R9714 += 1, R9670 += 1, R6805 += 1, R6806 += 1 };
  s3 -> s1 [0, 69] { R9714 += 1, R9670 += 1, R6806 += 1, R6807 += 1 };
  s3 -> s2 [0, 69] { R9714 += 1, R9670 += 1, R6805 += 1, R6806 += 1 };
  s3 -> s3 [0, 65535] { R9714 += 1, R9669 += 1, R9670 += 1 };
  s3 -> s4 [70, 70] { R9714 += 1, R9670 += 1, R6805 += 1, R6806 += 1 };
  s3 -> s5 [70, 70] { R9714 += 1, R9670 += 1, R6805 += 1, R6806 += 1 };
  s3 -> s6 [70, 70] { R9714 += 1, R9670 += 1, R6806 += 1, R6807 += 1 };
  s3 -> s7 [70, 70] { R9714 += 1, R9670 += 1, R6806 += 1, R6807 += 1 };
  s3 -> s1 [71, 65535] { R9714 += 1, R9670 += 1, R6806 += 1, R6807 += 1 };
  s3 -> s2 [71, 65535] { R9714 += 1, R9670 += 1, R6805 += 1, R6806 += 1 };
  s5 -> s5 [0, 65535] { R9714 += 1, R9670 += 1, R6805 += 1, R6806 += 1 };
  s5 -> s7 [0, 65535] { R9714 += 1, R9670 += 1, R6806 += 1, R6807 += 1 };
  s6 -> s6 [0, 65535] { R9714 += 1 };
  s6 -> s8 [0, 65535];
  s7 -> s8 [0, 65535];
  s7 -> s9 [0, 65535] { R9714 += 1 };
  s7 -> s7 [0, 65535] { R9714 += 1, R9670 += 1, R6806 += 1, R6807 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R9714 += 1 };
  accepting s8, s9, s6, s1, s7;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 69] { R9716 += 1, R9672 += 1, R9602 += 1, R9603 += 1, R9604 += 1 };
  s0 -> s2 [0, 69] { R9716 += 1, R9672 += 1, R9601 += 1, R9602 += 1 };
  s0 -> s0 [0, 65535] { R9715 += 1, R9716 += 1 };
  s0 -> s3 [0, 65535] { R9716 += 1, R9671 += 1, R9672 += 1 };
  s0 -> s4 [70, 70] { R9716 += 1, R9672 += 1, R9601 += 1, R9602 += 1 };
  s0 -> s5 [70, 70] { R9716 += 1, R9672 += 1, R9602 += 1, R9603 += 1, R9604 += 1 };
  s0 -> s6 [70, 70] { R9716 += 1, R9672 += 1, R9602 += 1, R9603 += 1, R9604 += 1 };
  s0 -> s7 [70, 70] { R9716 += 1, R9672 += 1, R9601 += 1, R9602 += 1 };
  s0 -> s1 [71, 65535] { R9716 += 1, R9672 += 1, R9602 += 1, R9603 += 1, R9604 += 1 };
  s0 -> s2 [71, 65535] { R9716 += 1, R9672 += 1, R9601 += 1, R9602 += 1 };
  s1 -> s1 [0, 69] { R9716 += 1, R9672 += 1, R9602 += 1, R9603 += 1, R9604 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s1 [0, 65535] { R9716 += 1 };
  s1 -> s5 [70, 70] { R9716 += 1, R9672 += 1, R9602 += 1, R9603 += 1, R9604 += 1 };
  s1 -> s6 [70, 70] { R9716 += 1, R9672 += 1, R9602 += 1, R9603 += 1, R9604 += 1 };
  s1 -> s1 [71, 65535] { R9716 += 1, R9672 += 1, R9602 += 1, R9603 += 1, R9604 += 1 };
  s2 -> s1 [0, 69] { R9716 += 1, R9672 += 1, R9602 += 1, R9603 += 1, R9604 += 1 };
  s2 -> s2 [0, 69] { R9716 += 1, R9672 += 1, R9601 += 1, R9602 += 1 };
  s2 -> s4 [70, 70] { R9716 += 1, R9672 += 1, R9601 += 1, R9602 += 1 };
  s2 -> s5 [70, 70] { R9716 += 1, R9672 += 1, R9602 += 1, R9603 += 1, R9604 += 1 };
  s2 -> s6 [70, 70] { R9716 += 1, R9672 += 1, R9602 += 1, R9603 += 1, R9604 += 1 };
  s2 -> s7 [70, 70] { R9716 += 1, R9672 += 1, R9601 += 1, R9602 += 1 };
  s2 -> s1 [71, 65535] { R9716 += 1, R9672 += 1, R9602 += 1, R9603 += 1, R9604 += 1 };
  s2 -> s2 [71, 65535] { R9716 += 1, R9672 += 1, R9601 += 1, R9602 += 1 };
  s3 -> s1 [0, 69] { R9716 += 1, R9672 += 1, R9602 += 1, R9603 += 1, R9604 += 1 };
  s3 -> s2 [0, 69] { R9716 += 1, R9672 += 1, R9601 += 1, R9602 += 1 };
  s3 -> s3 [0, 65535] { R9716 += 1, R9671 += 1, R9672 += 1 };
  s3 -> s4 [70, 70] { R9716 += 1, R9672 += 1, R9601 += 1, R9602 += 1 };
  s3 -> s5 [70, 70] { R9716 += 1, R9672 += 1, R9602 += 1, R9603 += 1, R9604 += 1 };
  s3 -> s6 [70, 70] { R9716 += 1, R9672 += 1, R9602 += 1, R9603 += 1, R9604 += 1 };
  s3 -> s7 [70, 70] { R9716 += 1, R9672 += 1, R9601 += 1, R9602 += 1 };
  s3 -> s1 [71, 65535] { R9716 += 1, R9672 += 1, R9602 += 1, R9603 += 1, R9604 += 1 };
  s3 -> s2 [71, 65535] { R9716 += 1, R9672 += 1, R9601 += 1, R9602 += 1 };
  s5 -> s9 [0, 65535] { R9716 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s5 [0, 65535] { R9716 += 1, R9672 += 1, R9602 += 1, R9603 += 1, R9604 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R9716 += 1 };
  s7 -> s5 [0, 65535] { R9716 += 1, R9672 += 1, R9602 += 1, R9603 += 1, R9604 += 1 };
  s7 -> s7 [0, 65535] { R9716 += 1, R9672 += 1, R9601 += 1, R9602 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R9716 += 1 };
  s9 -> s8 [0, 65535];
  accepting s8, s5, s9, s6, s1;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 69] { R9718 += 1, R9674 += 1, R9610 += 1, R9612 += 1, R9613 += 1 };
  s0 -> s2 [0, 69] { R9718 += 1, R9674 += 1, R9609 += 1, R9610 += 1 };
  s0 -> s3 [0, 69] { R9718 += 1, R9674 += 1, R9610 += 1, R9611 += 1, R9612 += 1 };
  s0 -> s0 [0, 65535] { R9717 += 1, R9718 += 1 };
  s0 -> s4 [0, 65535] { R9718 += 1, R9673 += 1, R9674 += 1 };
  s0 -> s5 [70, 70] { R9718 += 1, R9674 += 1, R9609 += 1, R9610 += 1 };
  s0 -> s6 [70, 70] { R9718 += 1, R9674 += 1, R9610 += 1, R9612 += 1, R9613 += 1 };
  s0 -> s7 [70, 70] { R9718 += 1, R9674 += 1, R9610 += 1, R9611 += 1, R9612 += 1 };
  s0 -> s8 [70, 70] { R9718 += 1, R9674 += 1, R9610 += 1, R9612 += 1, R9613 += 1 };
  s0 -> s9 [70, 70] { R9718 += 1, R9674 += 1, R9610 += 1, R9611 += 1, R9612 += 1 };
  s0 -> s10 [70, 70] { R9718 += 1, R9674 += 1, R9609 += 1, R9610 += 1 };
  s0 -> s1 [71, 65535] { R9718 += 1, R9674 += 1, R9610 += 1, R9612 += 1, R9613 += 1 };
  s0 -> s2 [71, 65535] { R9718 += 1, R9674 += 1, R9609 += 1, R9610 += 1 };
  s0 -> s3 [71, 65535] { R9718 += 1, R9674 += 1, R9610 += 1, R9611 += 1, R9612 += 1 };
  s1 -> s1 [0, 69] { R9718 += 1, R9674 += 1, R9610 += 1, R9612 += 1, R9613 += 1 };
  s1 -> s14 [0, 69] { R9718 += 1, R9674 += 1, R9610 += 1 };
  s1 -> s6 [70, 70] { R9718 += 1, R9674 += 1, R9610 += 1, R9612 += 1, R9613 += 1 };
  s1 -> s8 [70, 70] { R9718 += 1, R9674 += 1, R9610 += 1, R9612 += 1, R9613 += 1 };
  s1 -> s15 [70, 70] { R9718 += 1, R9674 += 1, R9610 += 1 };
  s1 -> s11 [70, 70] { R9718 += 1, R9674 += 1, R9610 += 1 };
  s1 -> s1 [71, 65535] { R9718 += 1, R9674 += 1, R9610 += 1, R9612 += 1, R9613 += 1 };
  s1 -> s14 [71, 65535] { R9718 += 1, R9674 += 1, R9610 += 1 };
  s2 -> s1 [0, 69] { R9718 += 1, R9674 += 1, R9610 += 1, R9612 += 1, R9613 += 1 };
  s2 -> s2 [0, 69] { R9718 += 1, R9674 += 1, R9609 += 1, R9610 += 1 };
  s2 -> s3 [0, 69] { R9718 += 1, R9674 += 1, R9610 += 1, R9611 += 1, R9612 += 1 };
  s2 -> s5 [70, 70] { R9718 += 1, R9674 += 1, R9609 += 1, R9610 += 1 };
  s2 -> s6 [70, 70] { R9718 += 1, R9674 += 1, R9610 += 1, R9612 += 1, R9613 += 1 };
  s2 -> s7 [70, 70] { R9718 += 1, R9674 += 1, R9610 += 1, R9611 += 1, R9612 += 1 };
  s2 -> s8 [70, 70] { R9718 += 1, R9674 += 1, R9610 += 1, R9612 += 1, R9613 += 1 };
  s2 -> s9 [70, 70] { R9718 += 1, R9674 += 1, R9610 += 1, R9611 += 1, R9612 += 1 };
  s2 -> s10 [70, 70] { R9718 += 1, R9674 += 1, R9609 += 1, R9610 += 1 };
  s2 -> s1 [71, 65535] { R9718 += 1, R9674 += 1, R9610 += 1, R9612 += 1, R9613 += 1 };
  s2 -> s2 [71, 65535] { R9718 += 1, R9674 += 1, R9609 += 1, R9610 += 1 };
  s2 -> s3 [71, 65535] { R9718 += 1, R9674 += 1, R9610 += 1, R9611 += 1, R9612 += 1 };
  s3 -> s1 [0, 69] { R9718 += 1, R9674 += 1, R9610 += 1, R9612 += 1, R9613 += 1 };
  s3 -> s3 [0, 69] { R9718 += 1, R9674 += 1, R9610 += 1, R9611 += 1, R9612 += 1 };
  s3 -> s6 [70, 70] { R9718 += 1, R9674 += 1, R9610 += 1, R9612 += 1, R9613 += 1 };
  s3 -> s7 [70, 70] { R9718 += 1, R9674 += 1, R9610 += 1, R9611 += 1, R9612 += 1 };
  s3 -> s8 [70, 70] { R9718 += 1, R9674 += 1, R9610 += 1, R9612 += 1, R9613 += 1 };
  s3 -> s9 [70, 70] { R9718 += 1, R9674 += 1, R9610 += 1, R9611 += 1, R9612 += 1 };
  s3 -> s1 [71, 65535] { R9718 += 1, R9674 += 1, R9610 += 1, R9612 += 1, R9613 += 1 };
  s3 -> s3 [71, 65535] { R9718 += 1, R9674 += 1, R9610 += 1, R9611 += 1, R9612 += 1 };
  s4 -> s1 [0, 69] { R9718 += 1, R9674 += 1, R9610 += 1, R9612 += 1, R9613 += 1 };
  s4 -> s2 [0, 69] { R9718 += 1, R9674 += 1, R9609 += 1, R9610 += 1 };
  s4 -> s3 [0, 69] { R9718 += 1, R9674 += 1, R9610 += 1, R9611 += 1, R9612 += 1 };
  s4 -> s4 [0, 65535] { R9718 += 1, R9673 += 1, R9674 += 1 };
  s4 -> s5 [70, 70] { R9718 += 1, R9674 += 1, R9609 += 1, R9610 += 1 };
  s4 -> s6 [70, 70] { R9718 += 1, R9674 += 1, R9610 += 1, R9612 += 1, R9613 += 1 };
  s4 -> s7 [70, 70] { R9718 += 1, R9674 += 1, R9610 += 1, R9611 += 1, R9612 += 1 };
  s4 -> s8 [70, 70] { R9718 += 1, R9674 += 1, R9610 += 1, R9612 += 1, R9613 += 1 };
  s4 -> s9 [70, 70] { R9718 += 1, R9674 += 1, R9610 += 1, R9611 += 1, R9612 += 1 };
  s4 -> s10 [70, 70] { R9718 += 1, R9674 += 1, R9609 += 1, R9610 += 1 };
  s4 -> s1 [71, 65535] { R9718 += 1, R9674 += 1, R9610 += 1, R9612 += 1, R9613 += 1 };
  s4 -> s2 [71, 65535] { R9718 += 1, R9674 += 1, R9609 += 1, R9610 += 1 };
  s4 -> s3 [71, 65535] { R9718 += 1, R9674 += 1, R9610 += 1, R9611 += 1, R9612 += 1 };
  s5 -> s5 [0, 65535] { R9718 += 1, R9674 += 1, R9609 += 1, R9610 += 1 };
  s5 -> s6 [0, 65535] { R9718 += 1, R9674 += 1, R9610 += 1, R9612 += 1, R9613 += 1 };
  s5 -> s7 [0, 65535] { R9718 += 1, R9674 += 1, R9610 += 1, R9611 += 1, R9612 += 1 };
  s6 -> s6 [0, 65535] { R9718 += 1, R9674 += 1, R9610 += 1, R9612 += 1, R9613 += 1 };
  s6 -> s11 [0, 65535] { R9718 += 1, R9674 += 1, R9610 += 1 };
  s7 -> s6 [0, 65535] { R9718 += 1, R9674 += 1, R9610 += 1, R9612 += 1, R9613 += 1 };
  s7 -> s7 [0, 65535] { R9718 += 1, R9674 += 1, R9610 += 1, R9611 += 1, R9612 += 1 };
  s11 -> s12 [0, 65535] { R9718 += 1 };
  s11 -> s13 [0, 65535];
  s11 -> s11 [0, 65535] { R9718 += 1, R9674 += 1, R9610 += 1 };
  s12 -> s12 [0, 65535] { R9718 += 1 };
  s12 -> s13 [0, 65535];
  s13 -> s13 [0, 65535];
  s14 -> s14 [0, 69] { R9718 += 1, R9674 += 1, R9610 += 1 };
  s14 -> s14 [0, 65535] { R9718 += 1 };
  s14 -> s13 [0, 65535];
  s14 -> s15 [70, 70] { R9718 += 1, R9674 += 1, R9610 += 1 };
  s14 -> s11 [70, 70] { R9718 += 1, R9674 += 1, R9610 += 1 };
  s14 -> s14 [71, 65535] { R9718 += 1, R9674 += 1, R9610 += 1 };
  s15 -> s13 [0, 65535];
  s15 -> s15 [0, 65535] { R9718 += 1 };
  accepting s12, s13, s14, s15, s11;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [102, 102];
  accepting s1;
};
};
constraint R2 = R9636 && R3 = R9718 && R23 - R9718 = -1 && R24 = R9718 && R25 - R9718 = -1 && R26 = R9718 && R27 = 0 && R28 = 1 && R29 = 0 && R30 = 1 && R45 + R84 + R83 + -1*R9606 + -1*R9602 - R66 = 0 && R49 + R89 + R87 = 0 && R50 + R90 + R88 + -1*R9606 + -1*R9602 - R66 = 0 && R55 + R96 + R93 + -1*R9608 + -1*R9604 - R68 = 0 && R65 + R9605 + R9601 = 0 && R67 + R9607 + R9603 = 0 && R9635 = 0 && R9659 = 0 && R9660 = 0 && R9665 = 0 && R9666 = 0 && R9669 = 0 && R9670 = 0 && R9671 = 0 && R9672 = 0 && R9673 = 0 && R9674 = 0 && R9675 = 0 && R9676 = R9718 && R9677 = 0 && R9678 = R9718 && R9679 = 0 && R9680 = R9718 && R9681 = 0 && R9682 = R9718 && R9683 = 0 && R9684 = R9718 && R9685 = 0 && R9686 = R9718 && R9687 = 0 && R9688 = R9718 && R9689 = 0 && R9690 = R9718 && R9691 = 0 && R9692 = R9718 && R9693 = 0 && R9694 = R9718 && R9695 = 0 && R9696 = R9718 && R9697 = 0 && R9698 = R9718 && R9699 = 0 && R9700 = R9718 && R9701 = 0 && R9702 = R9718 && R9703 = 0 && R9704 = R9718 && R9705 = 0 && R9706 = R9718 && R9707 = 0 && R9708 = R9718 && R9709 = 0 && R9710 = R9718 && R9711 = 0 && R9712 = R9718 && R9713 = 0 && R9714 = R9718 && R9715 = 0 && R9716 = R9718 && R9717 = 0 && R12 < 1 && R15 < 1 && R16 < 1 && R47 + R86 + R85 < 1 && R61 + R6810 + R6807 < 1 && -1*R9606 + -1*R9602 - R66 < 1 && -1*R9608 + -1*R9604 - R68 < 1 && -1 < R9636 && 0 < R9718 && (R53 + R94 + R91 != 0 || R54 + R95 + R92 + -1*R9606 + -1*R9602 - R66 = 0 || R66 + R9606 + R9602 < 1) && (R59 + R6808 + R6805 != 0 || R60 + R6809 + R6806 + -1*R9606 + -1*R9602 - R66 = 0 || R66 + R9606 + R9602 < 1) && (R66 + R9606 + R9602 != 0 || ((R53 + R94 + R91 != 0 || R54 + R95 + R92 = 0 || R68 + R9608 + R9604 < 1) && (R53 + R94 + R91 = 0 || R68 + R9608 + R9604 < 1))) && (R66 + R9606 + R9602 != 0 || ((R59 + R6808 + R6805 != 0 || R60 + R6809 + R6806 = 0 || R68 + R9608 + R9604 < 1) && (R59 + R6808 + R6805 = 0 || R68 + R9608 + R9604 < 1))) && (R66 + R9606 + R9602 != 0 || ((R73 + R9614 + R9609 != 0 || R74 + R9615 + R9610 = 0 || R68 + R9608 + R9604 < 1) && (R73 + R9614 + R9609 = 0 || R68 + R9608 + R9604 < 1))) && (R68 + R9608 + R9604 != 0 || R77 + R9618 + R9613 = 0 || (R75 + R9616 + R9611 = 0 && R76 + R9617 + R9612 = 0)) && (R73 + R9614 + R9609 != 0 || R66 + R9606 + R9602 + -1*R9615 + -1*R9610 - R74 = 0 || R66 + R9606 + R9602 < 1) && (R75 + R9616 + R9611 != 0 || R68 + R9608 + R9604 + -1*R9617 + -1*R9612 - R76 = 0 || R68 + R9608 + R9604 < 1) && (R9619 != 0 || R9620 = R9636 || (R20 = 0 && R9636 = 0)) && (R9621 != 0 || R9622 = R9636 || (R20 = 0 && R9636 = 0)) && (R9623 != 0 || R9624 = R9636 || (R20 = 0 && R9636 = 0)) && (R9625 != 0 || R9626 = R9636 || (R20 = 0 && R9636 = 0)) && (R9627 != 0 || R9628 = R9636 || (R20 = 0 && R9636 = 0)) && (R9629 != 0 || R9630 = R9636 || (R20 = 0 && R9636 = 0)) && (R9631 != 0 || R9632 = R9636 || (R20 = 0 && R9636 = 0)) && (R9633 != 0 || R9634 = R9636 || (R20 = 0 && R9636 = 0)) && (R9637 != 0 || R9636 = R9638 || (R20 = 0 && R9636 = 0)) && (R21 = 0 || (R9657 = 0 && R9658 = 0)) && (R21 = 0 || (R9661 = 0 && R9662 = 0)) && (R21 = 0 || (R9663 = 0 && R9664 = 0)) && (R21 = 0 || (R9667 = 0 && R9668 = 0)) && (R22 = 0 || (R9639 = 0 && R9640 = 0)) && (R22 = 0 || (R9641 = 0 && R9642 = 0)) && (R22 = 0 || (R9643 = 0 && R9644 = 0)) && (R22 = 0 || (R9645 = 0 && R9646 = 0)) && (R22 = 0 || (R9647 = 0 && R9648 = 0)) && (R22 = 0 || (R9649 = 0 && R9650 = 0)) && (R22 = 0 || (R9651 = 0 && R9652 = 0)) && (R22 = 0 || (R9653 = 0 && R9654 = 0)) && (R22 = 0 || (R9655 = 0 && R9656 = 0)) && (R53 + R94 + R91 = 0 || R66 + R9606 + R9602 < 1) && (R59 + R6808 + R6805 = 0 || R66 + R9606 + R9602 < 1) && (R73 + R9614 + R9609 = 0 || R66 + R9606 + R9602 < 1) && (R75 + R9616 + R9611 = 0 || R68 + R9608 + R9604 < 1) && (R9619 = 0 || (R20 = 0 && R9636 = 0)) && (R9621 = 0 || (R20 = 0 && R9636 = 0)) && (R9623 = 0 || (R20 = 0 && R9636 = 0)) && (R9625 = 0 || (R20 = 0 && R9636 = 0)) && (R9627 = 0 || (R20 = 0 && R9636 = 0)) && (R9629 = 0 || (R20 = 0 && R9636 = 0)) && (R9631 = 0 || (R20 = 0 && R9636 = 0)) && (R9633 = 0 || (R20 = 0 && R9636 = 0)) && (R9637 = 0 || (R20 = 0 && R9636 = 0));
// End of Parikh automata intersection problem
