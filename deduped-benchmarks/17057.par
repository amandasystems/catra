// Parikh automata intersection problem, generated by OSTRICH+
counter int R100, R1000, R1001, R1002, R1003, R1004, R1005, R1006, R1007, R1008, R1009, R101, R1010, R1011, R1012, R1013, R1014, R1015, R1016, R1017, R1018, R1019, R102, R1020, R1021, R1022, R1023, R1024, R1025, R1026, R1027, R1028, R1029, R1030, R1031, R1032, R1033, R1034, R1035, R1036, R1037, R1038, R1039, R1040, R1041, R1042, R1043, R1044, R1045, R1046, R1047, R1048, R1049, R1050, R1051, R1052, R1053, R1054, R1055, R1056, R1057, R1058, R1059, R1060, R1061, R1062, R1063, R1064, R1065, R1066, R1067, R1068, R1069, R1070, R1071, R1072, R1073, R1074, R1075, R1076, R1077, R1078, R1079, R1080, R1081, R1082, R1083, R1084, R1085, R1086, R1087, R1088, R1089, R1090, R1091, R1092, R1093, R1094, R1095, R1096, R1097, R1098, R1099, R1100, R1101, R1102, R1103, R1104, R1105, R1106, R1107, R1108, R12, R15, R16, R2, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R4, R45, R47, R49, R5, R50, R53, R54, R55, R59, R60, R61, R65, R66, R661, R662, R663, R664, R665, R666, R667, R668, R67, R68, R73, R74, R75, R76, R77, R83, R84, R85, R86, R87, R88, R89, R90, R91, R92, R93, R94, R95, R96, R97, R98, R99, R999;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [70, 70];
  s0 -> s0 [71, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [70, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R15 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 69];
  s0 -> s0 [0, 65535] { R16 += 1 };
  s0 -> s2 [70, 70];
  s0 -> s1 [71, 65535];
  s1 -> s1 [0, 69];
  s1 -> s2 [70, 70];
  s1 -> s1 [71, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R24 += 1 };
  s0 -> s0 [0, 65535] { R23 += 1, R24 += 1 };
  s0 -> s2 [9, 13] { R24 += 1 };
  s0 -> s1 [14, 31] { R24 += 1 };
  s0 -> s2 [32, 32] { R24 += 1 };
  s0 -> s1 [33, 65535] { R24 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R24 += 1 };
  s2 -> s1 [0, 65535] { R24 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R25 += 1, R26 += 1 };
  s1 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R28 += 1 };
  s0 -> s0 [0, 65535] { R27 += 1, R28 += 1 };
  s0 -> s2 [9, 13] { R28 += 1 };
  s0 -> s1 [14, 31] { R28 += 1 };
  s0 -> s2 [32, 32] { R28 += 1 };
  s0 -> s1 [33, 65535] { R28 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R28 += 1 };
  s2 -> s1 [0, 65535] { R28 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R29 += 1, R30 += 1 };
  s1 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R1029 += 1, R1030 += 1 };
  s0 -> s1 [0, 65535] { R1030 += 1, R22 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R1030 += 1, R22 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 69] { R1032 += 1 };
  s0 -> s0 [0, 65535] { R1031 += 1, R1032 += 1 };
  s0 -> s2 [70, 70] { R1032 += 1 };
  s0 -> s3 [70, 70] { R1032 += 1 };
  s0 -> s1 [76, 65535] { R1032 += 1 };
  s1 -> s1 [0, 69] { R1032 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R1032 += 1 };
  s1 -> s3 [70, 70] { R1032 += 1 };
  s1 -> s1 [76, 65535] { R1032 += 1 };
  s2 -> s2 [0, 70] { R1032 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [76, 65535] { R1032 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 69] { R1034 += 1, R45 += 1 };
  s0 -> s0 [0, 65535] { R1033 += 1, R1034 += 1 };
  s0 -> s2 [70, 70] { R1034 += 1, R45 += 1 };
  s0 -> s3 [70, 70] { R1034 += 1, R45 += 1 };
  s0 -> s1 [71, 65535] { R1034 += 1, R45 += 1 };
  s1 -> s1 [0, 69] { R1034 += 1, R45 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R1034 += 1, R45 += 1 };
  s1 -> s3 [70, 70] { R1034 += 1, R45 += 1 };
  s1 -> s1 [71, 65535] { R1034 += 1, R45 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1034 += 1, R45 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 69] { R1036 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R1035 += 1, R1036 += 1 };
  s0 -> s2 [70, 70] { R1036 += 1, R47 += 1 };
  s0 -> s3 [70, 70] { R1036 += 1, R47 += 1 };
  s0 -> s1 [71, 65535] { R1036 += 1, R47 += 1 };
  s1 -> s1 [0, 69] { R1036 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R1036 += 1, R47 += 1 };
  s1 -> s3 [70, 70] { R1036 += 1, R47 += 1 };
  s1 -> s1 [71, 65535] { R1036 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1036 += 1, R47 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 69] { R1038 += 1, R49 += 1, R50 += 1 };
  s0 -> s0 [0, 65535] { R1037 += 1, R1038 += 1 };
  s0 -> s2 [70, 70] { R1038 += 1, R49 += 1, R50 += 1 };
  s0 -> s3 [70, 70] { R1038 += 1, R49 += 1, R50 += 1 };
  s0 -> s1 [71, 65535] { R1038 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 69] { R1038 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R1038 += 1, R49 += 1, R50 += 1 };
  s1 -> s3 [70, 70] { R1038 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [71, 65535] { R1038 += 1, R49 += 1, R50 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1038 += 1, R49 += 1, R50 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 69] { R1040 += 1, R53 += 1, R54 += 1 };
  s0 -> s0 [0, 65535] { R1039 += 1, R1040 += 1 };
  s0 -> s2 [70, 70] { R1040 += 1, R53 += 1, R54 += 1 };
  s0 -> s3 [70, 70] { R1040 += 1, R53 += 1, R54 += 1 };
  s0 -> s1 [71, 65535] { R1040 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 69] { R1040 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R1040 += 1, R53 += 1, R54 += 1 };
  s1 -> s3 [70, 70] { R1040 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [71, 65535] { R1040 += 1, R53 += 1, R54 += 1 };
  s2 -> s2 [0, 65535] { R1040 += 1, R53 += 1, R54 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 69] { R1042 += 1, R59 += 1, R60 += 1 };
  s0 -> s0 [0, 65535] { R1041 += 1, R1042 += 1 };
  s0 -> s2 [70, 70] { R1042 += 1, R59 += 1, R60 += 1 };
  s0 -> s3 [70, 70] { R1042 += 1, R59 += 1, R60 += 1 };
  s0 -> s1 [71, 65535] { R1042 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 69] { R1042 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R1042 += 1, R59 += 1, R60 += 1 };
  s1 -> s3 [70, 70] { R1042 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [71, 65535] { R1042 += 1, R59 += 1, R60 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1042 += 1, R59 += 1, R60 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 69] { R1044 += 1, R65 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R1043 += 1, R1044 += 1 };
  s0 -> s2 [70, 70] { R1044 += 1, R65 += 1, R66 += 1 };
  s0 -> s3 [70, 70] { R1044 += 1, R65 += 1, R66 += 1 };
  s0 -> s1 [71, 65535] { R1044 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 69] { R1044 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R1044 += 1, R65 += 1, R66 += 1 };
  s1 -> s3 [70, 70] { R1044 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [71, 65535] { R1044 += 1, R65 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R1044 += 1, R65 += 1, R66 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 69] { R1046 += 1, R73 += 1, R74 += 1 };
  s0 -> s0 [0, 65535] { R1045 += 1, R1046 += 1 };
  s0 -> s2 [70, 70] { R1046 += 1, R73 += 1, R74 += 1 };
  s0 -> s3 [70, 70] { R1046 += 1, R73 += 1, R74 += 1 };
  s0 -> s1 [71, 65535] { R1046 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 69] { R1046 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R1046 += 1, R73 += 1, R74 += 1 };
  s1 -> s3 [70, 70] { R1046 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [71, 65535] { R1046 += 1, R73 += 1, R74 += 1 };
  s2 -> s2 [0, 65535] { R1046 += 1, R73 += 1, R74 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 69] { R1066 += 1 };
  s0 -> s0 [0, 65535] { R1065 += 1, R1066 += 1 };
  s0 -> s2 [70, 70] { R1066 += 1 };
  s0 -> s1 [71, 65535] { R1066 += 1 };
  s1 -> s1 [0, 69] { R1066 += 1 };
  s1 -> s2 [70, 70] { R1066 += 1 };
  s1 -> s1 [71, 65535] { R1066 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1066 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R1067 += 1, R1068 += 1 };
  s0 -> s1 [0, 65535] { R1068 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R1068 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 69] { R1070 += 1 };
  s0 -> s0 [0, 65535] { R1069 += 1, R1070 += 1 };
  s0 -> s2 [0, 65535] { R1070 += 1, R12 += 1 };
  s0 -> s3 [70, 70] { R1070 += 1 };
  s0 -> s1 [71, 65535] { R1070 += 1 };
  s1 -> s1 [0, 69] { R1070 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [70, 70] { R1070 += 1 };
  s1 -> s1 [71, 65535] { R1070 += 1 };
  s2 -> s1 [0, 69] { R1070 += 1 };
  s2 -> s2 [0, 65535] { R1070 += 1, R12 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [70, 70] { R1070 += 1 };
  s2 -> s1 [71, 65535] { R1070 += 1 };
  s3 -> s3 [0, 65535] { R1070 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 69] { R1072 += 1, R1010 += 1 };
  s0 -> s0 [0, 65535] { R1071 += 1, R1072 += 1 };
  s0 -> s2 [0, 65535] { R1072 += 1, R1009 += 1, R1010 += 1 };
  s0 -> s1 [71, 65535] { R1072 += 1, R1010 += 1 };
  s1 -> s1 [0, 69] { R1072 += 1, R1010 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1072 += 1 };
  s1 -> s1 [71, 65535] { R1072 += 1, R1010 += 1 };
  s2 -> s1 [0, 69] { R1072 += 1, R1010 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1072 += 1, R1009 += 1, R1010 += 1 };
  s2 -> s1 [71, 65535] { R1072 += 1, R1010 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s0 [0, 65535] { R1073 += 1, R1074 += 1 };
  s0 -> s1 [0, 65535] { R1074 += 1, R1011 += 1, R1012 += 1 };
  s0 -> s2 [0, 65535] { R1074 += 1, R1012 += 1, R20 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R1074 += 1, R1011 += 1, R1012 += 1 };
  s1 -> s2 [0, 65535] { R1074 += 1, R1012 += 1, R20 += 1 };
  s2 -> s3 [0, 65535] { R1074 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1074 += 1, R1012 += 1, R20 += 1 };
  s3 -> s3 [0, 65535] { R1074 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 70] { R1076 += 1, R1014 += 1 };
  s0 -> s2 [0, 65535] { R1076 += 1, R1013 += 1, R1014 += 1 };
  s0 -> s0 [0, 65535] { R1075 += 1, R1076 += 1 };
  s0 -> s1 [75, 65535] { R1076 += 1, R1014 += 1 };
  s1 -> s1 [0, 70] { R1076 += 1, R1014 += 1 };
  s1 -> s1 [0, 65535] { R1076 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [75, 65535] { R1076 += 1, R1014 += 1 };
  s2 -> s1 [0, 70] { R1076 += 1, R1014 += 1 };
  s2 -> s2 [0, 65535] { R1076 += 1, R1013 += 1, R1014 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [75, 65535] { R1076 += 1, R1014 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s0 [0, 65535] { R1077 += 1, R1078 += 1 };
  s0 -> s1 [0, 65535] { R1078 += 1, R1016 += 1, R84 += 1 };
  s0 -> s2 [0, 65535] { R1078 += 1, R1015 += 1, R1016 += 1 };
  s1 -> s4 [0, 65535] { R1078 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1078 += 1, R1016 += 1, R84 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R1078 += 1, R1016 += 1, R84 += 1 };
  s2 -> s2 [0, 65535] { R1078 += 1, R1015 += 1, R1016 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1078 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 74] { R1080 += 1, R1018 += 1 };
  s0 -> s2 [0, 65535] { R1080 += 1, R1018 += 1, R86 += 1 };
  s0 -> s3 [0, 65535] { R1080 += 1, R1017 += 1, R1018 += 1 };
  s0 -> s0 [0, 65535] { R1079 += 1, R1080 += 1 };
  s0 -> s1 [76, 65535] { R1080 += 1, R1018 += 1 };
  s1 -> s1 [0, 74] { R1080 += 1, R1018 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R1080 += 1 };
  s1 -> s1 [76, 65535] { R1080 += 1, R1018 += 1 };
  s2 -> s1 [0, 74] { R1080 += 1, R1018 += 1 };
  s2 -> s5 [0, 65535] { R1080 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1080 += 1, R1018 += 1, R86 += 1 };
  s2 -> s1 [76, 65535] { R1080 += 1, R1018 += 1 };
  s3 -> s1 [0, 74] { R1080 += 1, R1018 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R1080 += 1, R1018 += 1, R86 += 1 };
  s3 -> s3 [0, 65535] { R1080 += 1, R1017 += 1, R1018 += 1 };
  s3 -> s1 [76, 65535] { R1080 += 1, R1018 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1080 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 65535] { R1082 += 1, R1019 += 1, R1020 += 1 };
  s0 -> s2 [0, 65535] { R1082 += 1, R1020 += 1 };
  s0 -> s3 [0, 65535] { R1082 += 1, R1020 += 1, R90 += 1 };
  s0 -> s0 [0, 65535] { R1081 += 1, R1082 += 1 };
  s1 -> s1 [0, 65535] { R1082 += 1, R1019 += 1, R1020 += 1 };
  s1 -> s2 [0, 65535] { R1082 += 1, R1020 += 1 };
  s1 -> s3 [0, 65535] { R1082 += 1, R1020 += 1, R90 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s4 [0, 65535] { R1082 += 1 };
  s2 -> s2 [0, 65535] { R1082 += 1, R1020 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s4 [0, 65535] { R1082 += 1 };
  s3 -> s2 [0, 65535] { R1082 += 1, R1020 += 1 };
  s3 -> s3 [0, 65535] { R1082 += 1, R1020 += 1, R90 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1082 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s0 [0, 65535] { R1083 += 1, R1084 += 1 };
  s0 -> s1 [0, 65535] { R1084 += 1, R1022 += 1, R95 += 1, R96 += 1 };
  s0 -> s2 [0, 65535] { R1084 += 1, R1022 += 1, R94 += 1, R95 += 1 };
  s0 -> s3 [0, 65535] { R1084 += 1, R1021 += 1, R1022 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R1084 += 1 };
  s1 -> s1 [0, 65535] { R1084 += 1, R1022 += 1, R95 += 1, R96 += 1 };
  s1 -> s6 [0, 65535] { R1084 += 1, R1022 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R1084 += 1 };
  s2 -> s1 [0, 65535] { R1084 += 1, R1022 += 1, R95 += 1, R96 += 1 };
  s2 -> s2 [0, 65535] { R1084 += 1, R1022 += 1, R94 += 1, R95 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R1084 += 1, R1022 += 1, R95 += 1, R96 += 1 };
  s3 -> s2 [0, 65535] { R1084 += 1, R1022 += 1, R94 += 1, R95 += 1 };
  s3 -> s3 [0, 65535] { R1084 += 1, R1021 += 1, R1022 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1084 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R1084 += 1 };
  s6 -> s6 [0, 65535] { R1084 += 1, R1022 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 74] { R1086 += 1, R1024 += 1, R101 += 1 };
  s0 -> s2 [0, 65535] { R1086 += 1, R1024 += 1, R100 += 1, R101 += 1 };
  s0 -> s3 [0, 65535] { R1086 += 1, R1023 += 1, R1024 += 1 };
  s0 -> s4 [0, 65535] { R1086 += 1, R1024 += 1, R101 += 1, R102 += 1 };
  s0 -> s0 [0, 65535] { R1085 += 1, R1086 += 1 };
  s0 -> s1 [76, 65535] { R1086 += 1, R1024 += 1, R101 += 1 };
  s1 -> s1 [0, 74] { R1086 += 1, R1024 += 1, R101 += 1 };
  s1 -> s5 [0, 65535] { R1086 += 1 };
  s1 -> s1 [0, 65535] { R1086 += 1, R1024 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s1 [76, 65535] { R1086 += 1, R1024 += 1, R101 += 1 };
  s2 -> s1 [0, 74] { R1086 += 1, R1024 += 1, R101 += 1 };
  s2 -> s5 [0, 65535] { R1086 += 1 };
  s2 -> s2 [0, 65535] { R1086 += 1, R1024 += 1, R100 += 1, R101 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s4 [0, 65535] { R1086 += 1, R1024 += 1, R101 += 1, R102 += 1 };
  s2 -> s1 [76, 65535] { R1086 += 1, R1024 += 1, R101 += 1 };
  s3 -> s1 [0, 74] { R1086 += 1, R1024 += 1, R101 += 1 };
  s3 -> s2 [0, 65535] { R1086 += 1, R1024 += 1, R100 += 1, R101 += 1 };
  s3 -> s3 [0, 65535] { R1086 += 1, R1023 += 1, R1024 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s4 [0, 65535] { R1086 += 1, R1024 += 1, R101 += 1, R102 += 1 };
  s3 -> s1 [76, 65535] { R1086 += 1, R1024 += 1, R101 += 1 };
  s4 -> s1 [0, 74] { R1086 += 1, R1024 += 1, R101 += 1 };
  s4 -> s5 [0, 65535] { R1086 += 1 };
  s4 -> s6 [0, 65535] { R1086 += 1, R1024 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s4 [0, 65535] { R1086 += 1, R1024 += 1, R101 += 1, R102 += 1 };
  s4 -> s1 [76, 65535] { R1086 += 1, R1024 += 1, R101 += 1 };
  s5 -> s5 [0, 65535] { R1086 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s5 [0, 65535] { R1086 += 1 };
  s6 -> s6 [0, 65535] { R1086 += 1, R1024 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R1088 += 1, R1025 += 1, R1026 += 1 };
  s0 -> s2 [0, 65535] { R1088 += 1, R1026 += 1 };
  s0 -> s3 [0, 65535] { R1088 += 1, R1026 += 1, R666 += 1 };
  s0 -> s0 [0, 65535] { R1087 += 1, R1088 += 1 };
  s1 -> s1 [0, 65535] { R1088 += 1, R1025 += 1, R1026 += 1 };
  s1 -> s2 [0, 65535] { R1088 += 1, R1026 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R1088 += 1, R1026 += 1, R666 += 1 };
  s2 -> s4 [0, 65535] { R1088 += 1 };
  s2 -> s2 [0, 65535] { R1088 += 1, R1026 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s4 [0, 65535] { R1088 += 1 };
  s3 -> s2 [0, 65535] { R1088 += 1, R1026 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R1088 += 1, R1026 += 1, R666 += 1 };
  s4 -> s4 [0, 65535] { R1088 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 65535] { R1090 += 1, R1028 += 1 };
  s0 -> s2 [0, 65535] { R1090 += 1, R1028 += 1, R1005 += 1, R1007 += 1, R1008 += 1 };
  s0 -> s0 [0, 65535] { R1089 += 1, R1090 += 1 };
  s0 -> s3 [0, 65535] { R1090 += 1, R1028 += 1, R1005 += 1 };
  s0 -> s4 [0, 65535] { R1090 += 1, R1027 += 1, R1028 += 1 };
  s1 -> s6 [0, 65535] { R1090 += 1 };
  s1 -> s1 [0, 65535] { R1090 += 1, R1028 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R1090 += 1 };
  s2 -> s1 [0, 65535] { R1090 += 1, R1028 += 1 };
  s2 -> s2 [0, 65535] { R1090 += 1, R1028 += 1, R1005 += 1, R1007 += 1, R1008 += 1 };
  s2 -> s3 [0, 65535] { R1090 += 1, R1028 += 1, R1005 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R1090 += 1 };
  s3 -> s1 [0, 65535] { R1090 += 1, R1028 += 1 };
  s3 -> s3 [0, 65535] { R1090 += 1, R1028 += 1, R1005 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s1 [0, 65535] { R1090 += 1, R1028 += 1 };
  s4 -> s2 [0, 65535] { R1090 += 1, R1028 += 1, R1005 += 1, R1007 += 1, R1008 += 1 };
  s4 -> s3 [0, 65535] { R1090 += 1, R1028 += 1, R1005 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1090 += 1, R1027 += 1, R1028 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1090 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R1092 += 1, R1047 += 1, R1048 += 1 };
  s0 -> s2 [0, 65535] { R1092 += 1, R1048 += 1, R21 += 1 };
  s0 -> s0 [0, 65535] { R1091 += 1, R1092 += 1 };
  s1 -> s1 [0, 65535] { R1092 += 1, R1047 += 1, R1048 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R1092 += 1, R1048 += 1, R21 += 1 };
  s2 -> s3 [0, 65535] { R1092 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1092 += 1, R1048 += 1, R21 += 1 };
  s3 -> s3 [0, 65535] { R1092 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 69] { R1094 += 1, R1050 += 1 };
  s0 -> s0 [0, 65535] { R1093 += 1, R1094 += 1 };
  s0 -> s2 [0, 65535] { R1094 += 1, R1049 += 1, R1050 += 1 };
  s0 -> s3 [70, 70] { R1094 += 1, R1050 += 1 };
  s0 -> s4 [70, 70] { R1094 += 1, R1050 += 1 };
  s0 -> s5 [75, 75] { R1094 += 1, R1050 += 1 };
  s0 -> s1 [76, 65535] { R1094 += 1, R1050 += 1 };
  s1 -> s1 [0, 69] { R1094 += 1, R1050 += 1 };
  s1 -> s3 [70, 70] { R1094 += 1, R1050 += 1 };
  s1 -> s4 [70, 70] { R1094 += 1, R1050 += 1 };
  s1 -> s5 [75, 75] { R1094 += 1, R1050 += 1 };
  s1 -> s1 [76, 65535] { R1094 += 1, R1050 += 1 };
  s2 -> s1 [0, 69] { R1094 += 1, R1050 += 1 };
  s2 -> s2 [0, 65535] { R1094 += 1, R1049 += 1, R1050 += 1 };
  s2 -> s3 [70, 70] { R1094 += 1, R1050 += 1 };
  s2 -> s4 [70, 70] { R1094 += 1, R1050 += 1 };
  s2 -> s5 [75, 75] { R1094 += 1, R1050 += 1 };
  s2 -> s1 [76, 65535] { R1094 += 1, R1050 += 1 };
  s3 -> s3 [0, 70] { R1094 += 1, R1050 += 1 };
  s3 -> s8 [75, 75] { R1094 += 1, R1050 += 1 };
  s3 -> s3 [76, 65535] { R1094 += 1, R1050 += 1 };
  s5 -> s5 [0, 69] { R1094 += 1, R1050 += 1 };
  s5 -> s5 [0, 65535] { R1094 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [70, 70] { R1094 += 1, R1050 += 1 };
  s5 -> s8 [70, 70] { R1094 += 1, R1050 += 1 };
  s5 -> s5 [75, 65535] { R1094 += 1, R1050 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R1094 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 70] { R1094 += 1, R1050 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R1094 += 1 };
  s8 -> s8 [75, 65535] { R1094 += 1, R1050 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 69] { R1096 += 1, R1052 += 1, R83 += 1 };
  s0 -> s2 [0, 65535] { R1096 += 1, R1051 += 1, R1052 += 1 };
  s0 -> s0 [0, 65535] { R1095 += 1, R1096 += 1 };
  s0 -> s3 [70, 70] { R1096 += 1, R1052 += 1, R83 += 1 };
  s0 -> s4 [70, 70] { R1096 += 1, R1052 += 1, R83 += 1 };
  s0 -> s1 [71, 65535] { R1096 += 1, R1052 += 1, R83 += 1 };
  s1 -> s1 [0, 69] { R1096 += 1, R1052 += 1, R83 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1096 += 1 };
  s1 -> s3 [70, 70] { R1096 += 1, R1052 += 1, R83 += 1 };
  s1 -> s4 [70, 70] { R1096 += 1, R1052 += 1, R83 += 1 };
  s1 -> s1 [71, 65535] { R1096 += 1, R1052 += 1, R83 += 1 };
  s2 -> s1 [0, 69] { R1096 += 1, R1052 += 1, R83 += 1 };
  s2 -> s2 [0, 65535] { R1096 += 1, R1051 += 1, R1052 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [70, 70] { R1096 += 1, R1052 += 1, R83 += 1 };
  s2 -> s4 [70, 70] { R1096 += 1, R1052 += 1, R83 += 1 };
  s2 -> s1 [71, 65535] { R1096 += 1, R1052 += 1, R83 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R1096 += 1, R1052 += 1, R83 += 1 };
  s3 -> s6 [0, 65535] { R1096 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1096 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1096 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 69] { R1098 += 1, R1054 += 1, R85 += 1 };
  s0 -> s2 [0, 65535] { R1098 += 1, R1053 += 1, R1054 += 1 };
  s0 -> s0 [0, 65535] { R1097 += 1, R1098 += 1 };
  s0 -> s3 [70, 70] { R1098 += 1, R1054 += 1, R85 += 1 };
  s0 -> s4 [70, 70] { R1098 += 1, R1054 += 1, R85 += 1 };
  s0 -> s1 [71, 65535] { R1098 += 1, R1054 += 1, R85 += 1 };
  s1 -> s1 [0, 69] { R1098 += 1, R1054 += 1, R85 += 1 };
  s1 -> s1 [0, 65535] { R1098 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [70, 70] { R1098 += 1, R1054 += 1, R85 += 1 };
  s1 -> s4 [70, 70] { R1098 += 1, R1054 += 1, R85 += 1 };
  s1 -> s1 [71, 65535] { R1098 += 1, R1054 += 1, R85 += 1 };
  s2 -> s1 [0, 69] { R1098 += 1, R1054 += 1, R85 += 1 };
  s2 -> s2 [0, 65535] { R1098 += 1, R1053 += 1, R1054 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [70, 70] { R1098 += 1, R1054 += 1, R85 += 1 };
  s2 -> s4 [70, 70] { R1098 += 1, R1054 += 1, R85 += 1 };
  s2 -> s1 [71, 65535] { R1098 += 1, R1054 += 1, R85 += 1 };
  s3 -> s3 [0, 65535] { R1098 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R1098 += 1, R1054 += 1, R85 += 1 };
  s4 -> s5 [0, 65535] { R1098 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R1098 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 69] { R1100 += 1, R1056 += 1, R87 += 1, R88 += 1 };
  s0 -> s2 [0, 69] { R1100 += 1, R1056 += 1, R88 += 1 };
  s0 -> s0 [0, 65535] { R1099 += 1, R1100 += 1 };
  s0 -> s3 [0, 65535] { R1100 += 1, R1055 += 1, R1056 += 1 };
  s0 -> s4 [70, 70] { R1100 += 1, R1056 += 1, R88 += 1 };
  s0 -> s5 [70, 70] { R1100 += 1, R1056 += 1, R87 += 1, R88 += 1 };
  s0 -> s6 [70, 70] { R1100 += 1, R1056 += 1, R87 += 1, R88 += 1 };
  s0 -> s7 [70, 70] { R1100 += 1, R1056 += 1, R88 += 1 };
  s0 -> s2 [71, 74] { R1100 += 1, R1056 += 1, R88 += 1 };
  s0 -> s1 [71, 65535] { R1100 += 1, R1056 += 1, R87 += 1, R88 += 1 };
  s0 -> s8 [75, 75] { R1100 += 1, R1056 += 1, R88 += 1 };
  s0 -> s2 [76, 65535] { R1100 += 1, R1056 += 1, R88 += 1 };
  s1 -> s1 [0, 69] { R1100 += 1, R1056 += 1, R87 += 1, R88 += 1 };
  s1 -> s2 [0, 69] { R1100 += 1, R1056 += 1, R88 += 1 };
  s1 -> s4 [70, 70] { R1100 += 1, R1056 += 1, R88 += 1 };
  s1 -> s5 [70, 70] { R1100 += 1, R1056 += 1, R87 += 1, R88 += 1 };
  s1 -> s6 [70, 70] { R1100 += 1, R1056 += 1, R87 += 1, R88 += 1 };
  s1 -> s7 [70, 70] { R1100 += 1, R1056 += 1, R88 += 1 };
  s1 -> s2 [71, 74] { R1100 += 1, R1056 += 1, R88 += 1 };
  s1 -> s1 [71, 65535] { R1100 += 1, R1056 += 1, R87 += 1, R88 += 1 };
  s1 -> s8 [75, 75] { R1100 += 1, R1056 += 1, R88 += 1 };
  s1 -> s2 [76, 65535] { R1100 += 1, R1056 += 1, R88 += 1 };
  s2 -> s2 [0, 69] { R1100 += 1, R1056 += 1, R88 += 1 };
  s2 -> s4 [70, 70] { R1100 += 1, R1056 += 1, R88 += 1 };
  s2 -> s7 [70, 70] { R1100 += 1, R1056 += 1, R88 += 1 };
  s2 -> s2 [71, 74] { R1100 += 1, R1056 += 1, R88 += 1 };
  s2 -> s8 [75, 75] { R1100 += 1, R1056 += 1, R88 += 1 };
  s2 -> s2 [76, 65535] { R1100 += 1, R1056 += 1, R88 += 1 };
  s3 -> s1 [0, 69] { R1100 += 1, R1056 += 1, R87 += 1, R88 += 1 };
  s3 -> s2 [0, 69] { R1100 += 1, R1056 += 1, R88 += 1 };
  s3 -> s3 [0, 65535] { R1100 += 1, R1055 += 1, R1056 += 1 };
  s3 -> s4 [70, 70] { R1100 += 1, R1056 += 1, R88 += 1 };
  s3 -> s5 [70, 70] { R1100 += 1, R1056 += 1, R87 += 1, R88 += 1 };
  s3 -> s6 [70, 70] { R1100 += 1, R1056 += 1, R87 += 1, R88 += 1 };
  s3 -> s7 [70, 70] { R1100 += 1, R1056 += 1, R88 += 1 };
  s3 -> s2 [71, 74] { R1100 += 1, R1056 += 1, R88 += 1 };
  s3 -> s1 [71, 65535] { R1100 += 1, R1056 += 1, R87 += 1, R88 += 1 };
  s3 -> s8 [75, 75] { R1100 += 1, R1056 += 1, R88 += 1 };
  s3 -> s2 [76, 65535] { R1100 += 1, R1056 += 1, R88 += 1 };
  s6 -> s7 [0, 74] { R1100 += 1, R1056 += 1, R88 += 1 };
  s6 -> s6 [0, 65535] { R1100 += 1, R1056 += 1, R87 += 1, R88 += 1 };
  s6 -> s11 [75, 75] { R1100 += 1, R1056 += 1, R88 += 1 };
  s6 -> s7 [76, 65535] { R1100 += 1, R1056 += 1, R88 += 1 };
  s7 -> s7 [0, 74] { R1100 += 1, R1056 += 1, R88 += 1 };
  s7 -> s11 [75, 75] { R1100 += 1, R1056 += 1, R88 += 1 };
  s7 -> s7 [76, 65535] { R1100 += 1, R1056 += 1, R88 += 1 };
  s8 -> s8 [0, 69] { R1100 += 1, R1056 += 1, R88 += 1 };
  s8 -> s8 [0, 65535] { R1100 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [70, 70] { R1100 += 1, R1056 += 1, R88 += 1 };
  s8 -> s11 [70, 70] { R1100 += 1, R1056 += 1, R88 += 1 };
  s8 -> s8 [71, 65535] { R1100 += 1, R1056 += 1, R88 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R1100 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s12 [0, 65535] { R1100 += 1 };
  s11 -> s11 [0, 65535] { R1100 += 1, R1056 += 1, R88 += 1 };
  s11 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R1100 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 69] { R1102 += 1, R1058 += 1, R91 += 1, R92 += 1 };
  s0 -> s2 [0, 65535] { R1102 += 1, R1057 += 1, R1058 += 1 };
  s0 -> s0 [0, 65535] { R1101 += 1, R1102 += 1 };
  s0 -> s3 [70, 70] { R1102 += 1, R1058 += 1, R91 += 1, R92 += 1 };
  s0 -> s4 [70, 70] { R1102 += 1, R1058 += 1, R91 += 1, R92 += 1 };
  s0 -> s1 [71, 65535] { R1102 += 1, R1058 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 69] { R1102 += 1, R1058 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 65535] { R1102 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [70, 70] { R1102 += 1, R1058 += 1, R91 += 1, R92 += 1 };
  s1 -> s4 [70, 70] { R1102 += 1, R1058 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [71, 65535] { R1102 += 1, R1058 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [0, 69] { R1102 += 1, R1058 += 1, R91 += 1, R92 += 1 };
  s2 -> s2 [0, 65535] { R1102 += 1, R1057 += 1, R1058 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [70, 70] { R1102 += 1, R1058 += 1, R91 += 1, R92 += 1 };
  s2 -> s4 [70, 70] { R1102 += 1, R1058 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [71, 65535] { R1102 += 1, R1058 += 1, R91 += 1, R92 += 1 };
  s3 -> s3 [0, 65535] { R1102 += 1, R1058 += 1, R91 += 1, R92 += 1 };
  s3 -> s6 [0, 65535] { R1102 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1102 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1102 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 69] { R1104 += 1, R1060 += 1, R97 += 1, R98 += 1 };
  s0 -> s0 [0, 65535] { R1103 += 1, R1104 += 1 };
  s0 -> s2 [0, 65535] { R1104 += 1, R1059 += 1, R1060 += 1 };
  s0 -> s3 [70, 70] { R1104 += 1, R1060 += 1, R97 += 1, R98 += 1 };
  s0 -> s4 [70, 70] { R1104 += 1, R1060 += 1, R97 += 1, R98 += 1 };
  s0 -> s1 [71, 65535] { R1104 += 1, R1060 += 1, R97 += 1, R98 += 1 };
  s1 -> s1 [0, 69] { R1104 += 1, R1060 += 1, R97 += 1, R98 += 1 };
  s1 -> s1 [0, 65535] { R1104 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [70, 70] { R1104 += 1, R1060 += 1, R97 += 1, R98 += 1 };
  s1 -> s4 [70, 70] { R1104 += 1, R1060 += 1, R97 += 1, R98 += 1 };
  s1 -> s1 [71, 65535] { R1104 += 1, R1060 += 1, R97 += 1, R98 += 1 };
  s2 -> s1 [0, 69] { R1104 += 1, R1060 += 1, R97 += 1, R98 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1104 += 1, R1059 += 1, R1060 += 1 };
  s2 -> s3 [70, 70] { R1104 += 1, R1060 += 1, R97 += 1, R98 += 1 };
  s2 -> s4 [70, 70] { R1104 += 1, R1060 += 1, R97 += 1, R98 += 1 };
  s2 -> s1 [71, 65535] { R1104 += 1, R1060 += 1, R97 += 1, R98 += 1 };
  s3 -> s3 [0, 65535] { R1104 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1104 += 1, R1060 += 1, R97 += 1, R98 += 1 };
  s4 -> s6 [0, 65535] { R1104 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1104 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 69] { R1106 += 1, R1062 += 1, R662 += 1, R663 += 1, R664 += 1 };
  s0 -> s2 [0, 69] { R1106 += 1, R1062 += 1, R661 += 1, R662 += 1 };
  s0 -> s3 [0, 69] { R1106 += 1, R1062 += 1, R662 += 1, R664 += 1 };
  s0 -> s0 [0, 65535] { R1105 += 1, R1106 += 1 };
  s0 -> s4 [0, 65535] { R1106 += 1, R1061 += 1, R1062 += 1 };
  s0 -> s5 [70, 70] { R1106 += 1, R1062 += 1, R662 += 1, R664 += 1 };
  s0 -> s6 [70, 70] { R1106 += 1, R1062 += 1, R662 += 1, R664 += 1 };
  s0 -> s7 [70, 70] { R1106 += 1, R1062 += 1, R661 += 1, R662 += 1 };
  s0 -> s8 [70, 70] { R1106 += 1, R1062 += 1, R661 += 1, R662 += 1 };
  s0 -> s9 [70, 70] { R1106 += 1, R1062 += 1, R662 += 1, R663 += 1, R664 += 1 };
  s0 -> s10 [70, 70] { R1106 += 1, R1062 += 1, R662 += 1, R663 += 1, R664 += 1 };
  s0 -> s3 [71, 74] { R1106 += 1, R1062 += 1, R662 += 1, R664 += 1 };
  s0 -> s1 [71, 65535] { R1106 += 1, R1062 += 1, R662 += 1, R663 += 1, R664 += 1 };
  s0 -> s2 [71, 65535] { R1106 += 1, R1062 += 1, R661 += 1, R662 += 1 };
  s0 -> s11 [75, 75] { R1106 += 1, R1062 += 1, R662 += 1, R664 += 1 };
  s0 -> s3 [76, 65535] { R1106 += 1, R1062 += 1, R662 += 1, R664 += 1 };
  s1 -> s1 [0, 69] { R1106 += 1, R1062 += 1, R662 += 1, R663 += 1, R664 += 1 };
  s1 -> s3 [0, 69] { R1106 += 1, R1062 += 1, R662 += 1, R664 += 1 };
  s1 -> s5 [70, 70] { R1106 += 1, R1062 += 1, R662 += 1, R664 += 1 };
  s1 -> s6 [70, 70] { R1106 += 1, R1062 += 1, R662 += 1, R664 += 1 };
  s1 -> s9 [70, 70] { R1106 += 1, R1062 += 1, R662 += 1, R663 += 1, R664 += 1 };
  s1 -> s10 [70, 70] { R1106 += 1, R1062 += 1, R662 += 1, R663 += 1, R664 += 1 };
  s1 -> s3 [71, 74] { R1106 += 1, R1062 += 1, R662 += 1, R664 += 1 };
  s1 -> s1 [71, 65535] { R1106 += 1, R1062 += 1, R662 += 1, R663 += 1, R664 += 1 };
  s1 -> s11 [75, 75] { R1106 += 1, R1062 += 1, R662 += 1, R664 += 1 };
  s1 -> s3 [76, 65535] { R1106 += 1, R1062 += 1, R662 += 1, R664 += 1 };
  s2 -> s1 [0, 69] { R1106 += 1, R1062 += 1, R662 += 1, R663 += 1, R664 += 1 };
  s2 -> s2 [0, 69] { R1106 += 1, R1062 += 1, R661 += 1, R662 += 1 };
  s2 -> s3 [0, 69] { R1106 += 1, R1062 += 1, R662 += 1, R664 += 1 };
  s2 -> s5 [70, 70] { R1106 += 1, R1062 += 1, R662 += 1, R664 += 1 };
  s2 -> s6 [70, 70] { R1106 += 1, R1062 += 1, R662 += 1, R664 += 1 };
  s2 -> s7 [70, 70] { R1106 += 1, R1062 += 1, R661 += 1, R662 += 1 };
  s2 -> s8 [70, 70] { R1106 += 1, R1062 += 1, R661 += 1, R662 += 1 };
  s2 -> s9 [70, 70] { R1106 += 1, R1062 += 1, R662 += 1, R663 += 1, R664 += 1 };
  s2 -> s10 [70, 70] { R1106 += 1, R1062 += 1, R662 += 1, R663 += 1, R664 += 1 };
  s2 -> s3 [71, 74] { R1106 += 1, R1062 += 1, R662 += 1, R664 += 1 };
  s2 -> s1 [71, 65535] { R1106 += 1, R1062 += 1, R662 += 1, R663 += 1, R664 += 1 };
  s2 -> s2 [71, 65535] { R1106 += 1, R1062 += 1, R661 += 1, R662 += 1 };
  s2 -> s11 [75, 75] { R1106 += 1, R1062 += 1, R662 += 1, R664 += 1 };
  s2 -> s3 [76, 65535] { R1106 += 1, R1062 += 1, R662 += 1, R664 += 1 };
  s3 -> s3 [0, 69] { R1106 += 1, R1062 += 1, R662 += 1, R664 += 1 };
  s3 -> s5 [70, 70] { R1106 += 1, R1062 += 1, R662 += 1, R664 += 1 };
  s3 -> s6 [70, 70] { R1106 += 1, R1062 += 1, R662 += 1, R664 += 1 };
  s3 -> s3 [71, 74] { R1106 += 1, R1062 += 1, R662 += 1, R664 += 1 };
  s3 -> s11 [75, 75] { R1106 += 1, R1062 += 1, R662 += 1, R664 += 1 };
  s3 -> s3 [76, 65535] { R1106 += 1, R1062 += 1, R662 += 1, R664 += 1 };
  s4 -> s1 [0, 69] { R1106 += 1, R1062 += 1, R662 += 1, R663 += 1, R664 += 1 };
  s4 -> s2 [0, 69] { R1106 += 1, R1062 += 1, R661 += 1, R662 += 1 };
  s4 -> s3 [0, 69] { R1106 += 1, R1062 += 1, R662 += 1, R664 += 1 };
  s4 -> s4 [0, 65535] { R1106 += 1, R1061 += 1, R1062 += 1 };
  s4 -> s5 [70, 70] { R1106 += 1, R1062 += 1, R662 += 1, R664 += 1 };
  s4 -> s6 [70, 70] { R1106 += 1, R1062 += 1, R662 += 1, R664 += 1 };
  s4 -> s7 [70, 70] { R1106 += 1, R1062 += 1, R661 += 1, R662 += 1 };
  s4 -> s8 [70, 70] { R1106 += 1, R1062 += 1, R661 += 1, R662 += 1 };
  s4 -> s9 [70, 70] { R1106 += 1, R1062 += 1, R662 += 1, R663 += 1, R664 += 1 };
  s4 -> s10 [70, 70] { R1106 += 1, R1062 += 1, R662 += 1, R663 += 1, R664 += 1 };
  s4 -> s3 [71, 74] { R1106 += 1, R1062 += 1, R662 += 1, R664 += 1 };
  s4 -> s1 [71, 65535] { R1106 += 1, R1062 += 1, R662 += 1, R663 += 1, R664 += 1 };
  s4 -> s2 [71, 65535] { R1106 += 1, R1062 += 1, R661 += 1, R662 += 1 };
  s4 -> s11 [75, 75] { R1106 += 1, R1062 += 1, R662 += 1, R664 += 1 };
  s4 -> s3 [76, 65535] { R1106 += 1, R1062 += 1, R662 += 1, R664 += 1 };
  s5 -> s5 [0, 74] { R1106 += 1, R1062 += 1, R662 += 1, R664 += 1 };
  s5 -> s15 [75, 75] { R1106 += 1, R1062 += 1, R662 += 1, R664 += 1 };
  s5 -> s5 [76, 65535] { R1106 += 1, R1062 += 1, R662 += 1, R664 += 1 };
  s8 -> s5 [0, 74] { R1106 += 1, R1062 += 1, R662 += 1, R664 += 1 };
  s8 -> s8 [0, 65535] { R1106 += 1, R1062 += 1, R661 += 1, R662 += 1 };
  s8 -> s9 [0, 65535] { R1106 += 1, R1062 += 1, R662 += 1, R663 += 1, R664 += 1 };
  s8 -> s15 [75, 75] { R1106 += 1, R1062 += 1, R662 += 1, R664 += 1 };
  s8 -> s5 [76, 65535] { R1106 += 1, R1062 += 1, R662 += 1, R664 += 1 };
  s9 -> s5 [0, 74] { R1106 += 1, R1062 += 1, R662 += 1, R664 += 1 };
  s9 -> s9 [0, 65535] { R1106 += 1, R1062 += 1, R662 += 1, R663 += 1, R664 += 1 };
  s9 -> s15 [75, 75] { R1106 += 1, R1062 += 1, R662 += 1, R664 += 1 };
  s9 -> s5 [76, 65535] { R1106 += 1, R1062 += 1, R662 += 1, R664 += 1 };
  s11 -> s11 [0, 69] { R1106 += 1, R1062 += 1, R662 += 1, R664 += 1 };
  s11 -> s12 [0, 69] { R1106 += 1, R1062 += 1, R662 += 1 };
  s11 -> s13 [70, 70] { R1106 += 1, R1062 += 1, R662 += 1, R664 += 1 };
  s11 -> s14 [70, 70] { R1106 += 1, R1062 += 1, R662 += 1 };
  s11 -> s15 [70, 70] { R1106 += 1, R1062 += 1, R662 += 1, R664 += 1 };
  s11 -> s16 [70, 70] { R1106 += 1, R1062 += 1, R662 += 1 };
  s11 -> s11 [71, 65535] { R1106 += 1, R1062 += 1, R662 += 1, R664 += 1 };
  s11 -> s12 [71, 65535] { R1106 += 1, R1062 += 1, R662 += 1 };
  s12 -> s12 [0, 69] { R1106 += 1, R1062 += 1, R662 += 1 };
  s12 -> s12 [0, 65535] { R1106 += 1 };
  s12 -> s17 [0, 65535];
  s12 -> s14 [70, 70] { R1106 += 1, R1062 += 1, R662 += 1 };
  s12 -> s16 [70, 70] { R1106 += 1, R1062 += 1, R662 += 1 };
  s12 -> s12 [71, 65535] { R1106 += 1, R1062 += 1, R662 += 1 };
  s14 -> s14 [0, 65535] { R1106 += 1, R1062 += 1, R662 += 1 };
  s14 -> s18 [0, 65535] { R1106 += 1 };
  s14 -> s17 [0, 65535];
  s15 -> s14 [0, 65535] { R1106 += 1, R1062 += 1, R662 += 1 };
  s15 -> s15 [0, 65535] { R1106 += 1, R1062 += 1, R662 += 1, R664 += 1 };
  s16 -> s16 [0, 65535] { R1106 += 1 };
  s16 -> s17 [0, 65535];
  s17 -> s17 [0, 65535];
  s18 -> s18 [0, 65535] { R1106 += 1 };
  s18 -> s17 [0, 65535];
  accepting s17, s16, s12, s14, s18;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 69] { R1108 += 1, R1064 += 1, R1000 += 1, R1002 += 1, R1003 += 1 };
  s0 -> s2 [0, 69] { R1108 += 1, R1064 += 1, R999 += 1, R1000 += 1 };
  s0 -> s3 [0, 69] { R1108 += 1, R1064 += 1, R1000 += 1, R1001 += 1, R1002 += 1 };
  s0 -> s4 [0, 65535] { R1108 += 1, R1063 += 1, R1064 += 1 };
  s0 -> s0 [0, 65535] { R1107 += 1, R1108 += 1 };
  s0 -> s5 [70, 70] { R1108 += 1, R1064 += 1, R1000 += 1, R1001 += 1, R1002 += 1 };
  s0 -> s6 [70, 70] { R1108 += 1, R1064 += 1, R1000 += 1, R1002 += 1, R1003 += 1 };
  s0 -> s7 [70, 70] { R1108 += 1, R1064 += 1, R1000 += 1, R1001 += 1, R1002 += 1 };
  s0 -> s8 [70, 70] { R1108 += 1, R1064 += 1, R1000 += 1, R1002 += 1, R1003 += 1 };
  s0 -> s9 [70, 70] { R1108 += 1, R1064 += 1, R999 += 1, R1000 += 1 };
  s0 -> s10 [70, 70] { R1108 += 1, R1064 += 1, R999 += 1, R1000 += 1 };
  s0 -> s1 [71, 65535] { R1108 += 1, R1064 += 1, R1000 += 1, R1002 += 1, R1003 += 1 };
  s0 -> s2 [71, 65535] { R1108 += 1, R1064 += 1, R999 += 1, R1000 += 1 };
  s0 -> s3 [71, 65535] { R1108 += 1, R1064 += 1, R1000 += 1, R1001 += 1, R1002 += 1 };
  s1 -> s1 [0, 69] { R1108 += 1, R1064 += 1, R1000 += 1, R1002 += 1, R1003 += 1 };
  s1 -> s1 [0, 65535] { R1108 += 1 };
  s1 -> s11 [0, 65535];
  s1 -> s6 [70, 70] { R1108 += 1, R1064 += 1, R1000 += 1, R1002 += 1, R1003 += 1 };
  s1 -> s8 [70, 70] { R1108 += 1, R1064 += 1, R1000 += 1, R1002 += 1, R1003 += 1 };
  s1 -> s1 [71, 65535] { R1108 += 1, R1064 += 1, R1000 += 1, R1002 += 1, R1003 += 1 };
  s2 -> s1 [0, 69] { R1108 += 1, R1064 += 1, R1000 += 1, R1002 += 1, R1003 += 1 };
  s2 -> s2 [0, 69] { R1108 += 1, R1064 += 1, R999 += 1, R1000 += 1 };
  s2 -> s3 [0, 69] { R1108 += 1, R1064 += 1, R1000 += 1, R1001 += 1, R1002 += 1 };
  s2 -> s5 [70, 70] { R1108 += 1, R1064 += 1, R1000 += 1, R1001 += 1, R1002 += 1 };
  s2 -> s6 [70, 70] { R1108 += 1, R1064 += 1, R1000 += 1, R1002 += 1, R1003 += 1 };
  s2 -> s7 [70, 70] { R1108 += 1, R1064 += 1, R1000 += 1, R1001 += 1, R1002 += 1 };
  s2 -> s8 [70, 70] { R1108 += 1, R1064 += 1, R1000 += 1, R1002 += 1, R1003 += 1 };
  s2 -> s9 [70, 70] { R1108 += 1, R1064 += 1, R999 += 1, R1000 += 1 };
  s2 -> s10 [70, 70] { R1108 += 1, R1064 += 1, R999 += 1, R1000 += 1 };
  s2 -> s1 [71, 65535] { R1108 += 1, R1064 += 1, R1000 += 1, R1002 += 1, R1003 += 1 };
  s2 -> s2 [71, 65535] { R1108 += 1, R1064 += 1, R999 += 1, R1000 += 1 };
  s2 -> s3 [71, 65535] { R1108 += 1, R1064 += 1, R1000 += 1, R1001 += 1, R1002 += 1 };
  s3 -> s1 [0, 69] { R1108 += 1, R1064 += 1, R1000 += 1, R1002 += 1, R1003 += 1 };
  s3 -> s3 [0, 69] { R1108 += 1, R1064 += 1, R1000 += 1, R1001 += 1, R1002 += 1 };
  s3 -> s5 [70, 70] { R1108 += 1, R1064 += 1, R1000 += 1, R1001 += 1, R1002 += 1 };
  s3 -> s6 [70, 70] { R1108 += 1, R1064 += 1, R1000 += 1, R1002 += 1, R1003 += 1 };
  s3 -> s7 [70, 70] { R1108 += 1, R1064 += 1, R1000 += 1, R1001 += 1, R1002 += 1 };
  s3 -> s8 [70, 70] { R1108 += 1, R1064 += 1, R1000 += 1, R1002 += 1, R1003 += 1 };
  s3 -> s1 [71, 65535] { R1108 += 1, R1064 += 1, R1000 += 1, R1002 += 1, R1003 += 1 };
  s3 -> s3 [71, 65535] { R1108 += 1, R1064 += 1, R1000 += 1, R1001 += 1, R1002 += 1 };
  s4 -> s1 [0, 69] { R1108 += 1, R1064 += 1, R1000 += 1, R1002 += 1, R1003 += 1 };
  s4 -> s2 [0, 69] { R1108 += 1, R1064 += 1, R999 += 1, R1000 += 1 };
  s4 -> s3 [0, 69] { R1108 += 1, R1064 += 1, R1000 += 1, R1001 += 1, R1002 += 1 };
  s4 -> s4 [0, 65535] { R1108 += 1, R1063 += 1, R1064 += 1 };
  s4 -> s5 [70, 70] { R1108 += 1, R1064 += 1, R1000 += 1, R1001 += 1, R1002 += 1 };
  s4 -> s6 [70, 70] { R1108 += 1, R1064 += 1, R1000 += 1, R1002 += 1, R1003 += 1 };
  s4 -> s7 [70, 70] { R1108 += 1, R1064 += 1, R1000 += 1, R1001 += 1, R1002 += 1 };
  s4 -> s8 [70, 70] { R1108 += 1, R1064 += 1, R1000 += 1, R1002 += 1, R1003 += 1 };
  s4 -> s9 [70, 70] { R1108 += 1, R1064 += 1, R999 += 1, R1000 += 1 };
  s4 -> s10 [70, 70] { R1108 += 1, R1064 += 1, R999 += 1, R1000 += 1 };
  s4 -> s1 [71, 65535] { R1108 += 1, R1064 += 1, R1000 += 1, R1002 += 1, R1003 += 1 };
  s4 -> s2 [71, 65535] { R1108 += 1, R1064 += 1, R999 += 1, R1000 += 1 };
  s4 -> s3 [71, 65535] { R1108 += 1, R1064 += 1, R1000 += 1, R1001 += 1, R1002 += 1 };
  s6 -> s6 [0, 65535] { R1108 += 1 };
  s6 -> s11 [0, 65535];
  s7 -> s7 [0, 65535] { R1108 += 1, R1064 += 1, R1000 += 1, R1001 += 1, R1002 += 1 };
  s7 -> s8 [0, 65535] { R1108 += 1, R1064 += 1, R1000 += 1, R1002 += 1, R1003 += 1 };
  s8 -> s8 [0, 65535] { R1108 += 1, R1064 += 1, R1000 += 1, R1002 += 1, R1003 += 1 };
  s8 -> s11 [0, 65535];
  s8 -> s12 [0, 65535] { R1108 += 1 };
  s9 -> s7 [0, 65535] { R1108 += 1, R1064 += 1, R1000 += 1, R1001 += 1, R1002 += 1 };
  s9 -> s8 [0, 65535] { R1108 += 1, R1064 += 1, R1000 += 1, R1002 += 1, R1003 += 1 };
  s9 -> s9 [0, 65535] { R1108 += 1, R1064 += 1, R999 += 1, R1000 += 1 };
  s11 -> s11 [0, 65535];
  s12 -> s11 [0, 65535];
  s12 -> s12 [0, 65535] { R1108 += 1 };
  accepting s12, s8, s6, s1, s11;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [102, 102];
  accepting s1;
};
};
constraint R3 = R1108 && R23 - R1108 = -1 && R24 = R1108 && R25 - R1108 = -1 && R26 = R1108 && R27 = 0 && R28 = 1 && R29 = 0 && R30 = 1 && R45 + R84 + R83 + -1*R666 + -1*R662 - R66 = 0 && R49 + R89 + R87 = 0 && R50 + R90 + R88 + -1*R666 + -1*R662 - R66 = 0 && R55 + R96 + R93 + -1*R668 + -1*R664 - R68 = 0 && R65 + R665 + R661 = 0 && R67 + R667 + R663 = 0 && R1049 = 0 && R1050 = 0 && R1055 = 0 && R1056 = 0 && R1061 = 0 && R1062 = 0 && R1063 = 0 && R1064 = 0 && R1065 = 0 && R1066 = R1108 && R1067 = 0 && R1068 = R1108 && R1069 = 0 && R1070 = R1108 && R1071 = 0 && R1072 = R1108 && R1073 = 0 && R1074 = R1108 && R1075 = 0 && R1076 = R1108 && R1077 = 0 && R1078 = R1108 && R1079 = 0 && R1080 = R1108 && R1081 = 0 && R1082 = R1108 && R1083 = 0 && R1084 = R1108 && R1085 = 0 && R1086 = R1108 && R1087 = 0 && R1088 = R1108 && R1089 = 0 && R1090 = R1108 && R1091 = 0 && R1092 = R1108 && R1093 = 0 && R1094 = R1108 && R1095 = 0 && R1096 = R1108 && R1097 = 0 && R1098 = R1108 && R1099 = 0 && R1100 = R1108 && R1101 = 0 && R1102 = R1108 && R1103 = 0 && R1104 = R1108 && R1105 = 0 && R1106 = R1108 && R1107 = 0 && -1 < R2 && R12 < 1 && R15 < 1 && R16 < 1 && R47 + R86 + R85 < 1 && R61 + R102 + R99 < 1 && -1*R666 + -1*R662 - R66 < 1 && -1*R668 + -1*R664 - R68 < 1 && 0 < R1108 && (R2 != 0 || R20 = 0 || (R1009 = 0 && R1010 = 0)) && (R2 != 0 || R20 = 0 || (R1011 = 0 && R1012 = 0)) && (R2 != 0 || R20 = 0 || (R1013 = 0 && R1014 = 0)) && (R2 != 0 || R20 = 0 || (R1015 = 0 && R1016 = 0)) && (R2 != 0 || R20 = 0 || (R1017 = 0 && R1018 = 0)) && (R2 != 0 || R20 = 0 || (R1019 = 0 && R1020 = 0)) && (R2 != 0 || R20 = 0 || (R1021 = 0 && R1022 = 0)) && (R2 != 0 || R20 = 0 || (R1023 = 0 && R1024 = 0)) && (R2 != 0 || R20 = 0 || (R1025 = 0 && R1026 = 0)) && (R2 != 0 || R20 = 0 || (R1027 = 0 && R1028 = 0)) && (R53 + R94 + R91 != 0 || R54 + R95 + R92 + -1*R666 + -1*R662 - R66 = 0 || R66 + R666 + R662 < 1) && (R59 + R100 + R97 != 0 || R60 + R101 + R98 + -1*R666 + -1*R662 - R66 = 0 || R66 + R666 + R662 < 1) && (R66 + R666 + R662 != 0 || ((R53 + R94 + R91 != 0 || R54 + R95 + R92 = 0 || R68 + R668 + R664 < 1) && (R53 + R94 + R91 = 0 || R68 + R668 + R664 < 1))) && (R66 + R666 + R662 != 0 || ((R59 + R100 + R97 != 0 || R60 + R101 + R98 = 0 || R68 + R668 + R664 < 1) && (R59 + R100 + R97 = 0 || R68 + R668 + R664 < 1))) && (R66 + R666 + R662 != 0 || ((R73 + R1004 + R999 != 0 || R74 + R1005 + R1000 = 0 || R68 + R668 + R664 < 1) && (R73 + R1004 + R999 = 0 || R68 + R668 + R664 < 1))) && (R68 + R668 + R664 != 0 || R77 + R1008 + R1003 = 0 || (R75 + R1006 + R1001 = 0 && R76 + R1007 + R1002 = 0)) && (R73 + R1004 + R999 != 0 || R66 + R666 + R662 + -1*R1005 + -1*R1000 - R74 = 0 || R66 + R666 + R662 < 1) && (R75 + R1006 + R1001 != 0 || R68 + R668 + R664 + -1*R1007 + -1*R1002 - R76 = 0 || R68 + R668 + R664 < 1) && (R1009 != 0 || R2 = R1010 || R2 < 1) && (R1011 != 0 || R2 = R1012 || R2 < 1) && (R1013 != 0 || R2 = R1014 || R2 < 1) && (R1015 != 0 || R2 = R1016 || R2 < 1) && (R1017 != 0 || R2 = R1018 || R2 < 1) && (R1019 != 0 || R2 = R1020 || R2 < 1) && (R1021 != 0 || R2 = R1022 || R2 < 1) && (R1023 != 0 || R2 = R1024 || R2 < 1) && (R1025 != 0 || R2 = R1026 || R2 < 1) && (R1027 != 0 || R2 = R1028 || R2 < 1) && (R21 = 0 || (R1047 = 0 && R1048 = 0)) && (R21 = 0 || (R1051 = 0 && R1052 = 0)) && (R21 = 0 || (R1053 = 0 && R1054 = 0)) && (R21 = 0 || (R1057 = 0 && R1058 = 0)) && (R21 = 0 || (R1059 = 0 && R1060 = 0)) && (R22 = 0 || (R1029 = 0 && R1030 = 0)) && (R22 = 0 || (R1031 = 0 && R1032 = 0)) && (R22 = 0 || (R1033 = 0 && R1034 = 0)) && (R22 = 0 || (R1035 = 0 && R1036 = 0)) && (R22 = 0 || (R1037 = 0 && R1038 = 0)) && (R22 = 0 || (R1039 = 0 && R1040 = 0)) && (R22 = 0 || (R1041 = 0 && R1042 = 0)) && (R22 = 0 || (R1043 = 0 && R1044 = 0)) && (R22 = 0 || (R1045 = 0 && R1046 = 0)) && (R53 + R94 + R91 = 0 || R66 + R666 + R662 < 1) && (R59 + R100 + R97 = 0 || R66 + R666 + R662 < 1) && (R73 + R1004 + R999 = 0 || R66 + R666 + R662 < 1) && (R75 + R1006 + R1001 = 0 || R68 + R668 + R664 < 1) && (R1009 = 0 || R2 < 1) && (R1011 = 0 || R2 < 1) && (R1013 = 0 || R2 < 1) && (R1015 = 0 || R2 < 1) && (R1017 = 0 || R2 < 1) && (R1019 = 0 || R2 < 1) && (R1021 = 0 || R2 < 1) && (R1023 = 0 || R2 < 1) && (R1025 = 0 || R2 < 1) && (R1027 = 0 || R2 < 1);
// End of Parikh automata intersection problem
