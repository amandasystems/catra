// Parikh automata intersection problem, generated by OSTRICH+
counter int R12, R13513, R13514, R13515, R13516, R13517, R13518, R13519, R13520, R13521, R13522, R13523, R13524, R14083, R14084, R14085, R14086, R14087, R14088, R14089, R14090, R14201, R14202, R14203, R14204, R14205, R14206, R14207, R14208, R14209, R14210, R14211, R14212, R14213, R14214, R14215, R14216, R14217, R14218, R14219, R14220, R14221, R14222, R14223, R14224, R14225, R14226, R14227, R14228, R14229, R14230, R14231, R14232, R14233, R14234, R14235, R14236, R14237, R14238, R14239, R14240, R14241, R14242, R14243, R14244, R14245, R14246, R14247, R14248, R14249, R14250, R14251, R14252, R14253, R14254, R14255, R14256, R14257, R14258, R14259, R14260, R14261, R14262, R14263, R14264, R14265, R14266, R14267, R14268, R14269, R14270, R14271, R14272, R14273, R14274, R14275, R14276, R14277, R14278, R14279, R14280, R14281, R14282, R14283, R14284, R14285, R14286, R14287, R14288, R14289, R14290, R14291, R14292, R14293, R14294, R14295, R14296, R14297, R14298, R14299, R14300, R14301, R14302, R14303, R14304, R14305, R14306, R14307, R14308, R14309, R14310, R15, R16, R2, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R4, R45, R47, R49, R5, R50, R53, R54, R55, R59, R60, R61, R65, R66, R67, R68, R73, R74, R75, R76, R77, R83, R84, R85, R86, R87, R88, R89, R90;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [70, 70];
  s0 -> s0 [71, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [70, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R15 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 69];
  s0 -> s0 [0, 65535] { R16 += 1 };
  s0 -> s2 [70, 70];
  s0 -> s1 [71, 65535];
  s1 -> s1 [0, 69];
  s1 -> s2 [70, 70];
  s1 -> s1 [71, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R24 += 1 };
  s0 -> s0 [0, 65535] { R23 += 1, R24 += 1 };
  s0 -> s2 [9, 13] { R24 += 1 };
  s0 -> s1 [14, 31] { R24 += 1 };
  s0 -> s2 [32, 32] { R24 += 1 };
  s0 -> s1 [33, 65535] { R24 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R24 += 1 };
  s2 -> s1 [0, 65535] { R24 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R25 += 1, R26 += 1 };
  s1 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R28 += 1 };
  s0 -> s0 [0, 65535] { R27 += 1, R28 += 1 };
  s0 -> s2 [9, 13] { R28 += 1 };
  s0 -> s1 [14, 31] { R28 += 1 };
  s0 -> s2 [32, 32] { R28 += 1 };
  s0 -> s1 [33, 65535] { R28 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R28 += 1 };
  s2 -> s1 [0, 65535] { R28 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R29 += 1, R30 += 1 };
  s1 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R14232 += 1, R22 += 1 };
  s0 -> s0 [0, 65535] { R14231 += 1, R14232 += 1 };
  s1 -> s1 [0, 65535] { R14232 += 1, R22 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 69] { R14234 += 1 };
  s0 -> s0 [0, 65535] { R14233 += 1, R14234 += 1 };
  s0 -> s2 [70, 70] { R14234 += 1 };
  s0 -> s3 [70, 70] { R14234 += 1 };
  s0 -> s1 [76, 65535] { R14234 += 1 };
  s1 -> s1 [0, 69] { R14234 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R14234 += 1 };
  s1 -> s3 [70, 70] { R14234 += 1 };
  s1 -> s1 [76, 65535] { R14234 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 70] { R14234 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [76, 65535] { R14234 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 69] { R14236 += 1, R45 += 1 };
  s0 -> s0 [0, 65535] { R14235 += 1, R14236 += 1 };
  s0 -> s2 [70, 70] { R14236 += 1, R45 += 1 };
  s0 -> s3 [70, 70] { R14236 += 1, R45 += 1 };
  s0 -> s1 [71, 65535] { R14236 += 1, R45 += 1 };
  s1 -> s1 [0, 69] { R14236 += 1, R45 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R14236 += 1, R45 += 1 };
  s1 -> s3 [70, 70] { R14236 += 1, R45 += 1 };
  s1 -> s1 [71, 65535] { R14236 += 1, R45 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R14236 += 1, R45 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 69] { R14238 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R14237 += 1, R14238 += 1 };
  s0 -> s2 [70, 70] { R14238 += 1, R47 += 1 };
  s0 -> s3 [70, 70] { R14238 += 1, R47 += 1 };
  s0 -> s1 [71, 65535] { R14238 += 1, R47 += 1 };
  s1 -> s1 [0, 69] { R14238 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R14238 += 1, R47 += 1 };
  s1 -> s3 [70, 70] { R14238 += 1, R47 += 1 };
  s1 -> s1 [71, 65535] { R14238 += 1, R47 += 1 };
  s2 -> s2 [0, 65535] { R14238 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 69] { R14240 += 1, R49 += 1, R50 += 1 };
  s0 -> s0 [0, 65535] { R14239 += 1, R14240 += 1 };
  s0 -> s2 [70, 70] { R14240 += 1, R49 += 1, R50 += 1 };
  s0 -> s3 [70, 70] { R14240 += 1, R49 += 1, R50 += 1 };
  s0 -> s1 [71, 65535] { R14240 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 69] { R14240 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R14240 += 1, R49 += 1, R50 += 1 };
  s1 -> s3 [70, 70] { R14240 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [71, 65535] { R14240 += 1, R49 += 1, R50 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R14240 += 1, R49 += 1, R50 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 69] { R14242 += 1, R53 += 1, R54 += 1 };
  s0 -> s0 [0, 65535] { R14241 += 1, R14242 += 1 };
  s0 -> s2 [70, 70] { R14242 += 1, R53 += 1, R54 += 1 };
  s0 -> s3 [70, 70] { R14242 += 1, R53 += 1, R54 += 1 };
  s0 -> s1 [71, 65535] { R14242 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 69] { R14242 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R14242 += 1, R53 += 1, R54 += 1 };
  s1 -> s3 [70, 70] { R14242 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [71, 65535] { R14242 += 1, R53 += 1, R54 += 1 };
  s2 -> s2 [0, 65535] { R14242 += 1, R53 += 1, R54 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 69] { R14244 += 1, R59 += 1, R60 += 1 };
  s0 -> s0 [0, 65535] { R14243 += 1, R14244 += 1 };
  s0 -> s2 [70, 70] { R14244 += 1, R59 += 1, R60 += 1 };
  s0 -> s3 [70, 70] { R14244 += 1, R59 += 1, R60 += 1 };
  s0 -> s1 [71, 65535] { R14244 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 69] { R14244 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R14244 += 1, R59 += 1, R60 += 1 };
  s1 -> s3 [70, 70] { R14244 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [71, 65535] { R14244 += 1, R59 += 1, R60 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R14244 += 1, R59 += 1, R60 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 69] { R14246 += 1, R65 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R14245 += 1, R14246 += 1 };
  s0 -> s2 [70, 70] { R14246 += 1, R65 += 1, R66 += 1 };
  s0 -> s3 [70, 70] { R14246 += 1, R65 += 1, R66 += 1 };
  s0 -> s1 [71, 65535] { R14246 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 69] { R14246 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R14246 += 1, R65 += 1, R66 += 1 };
  s1 -> s3 [70, 70] { R14246 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [71, 65535] { R14246 += 1, R65 += 1, R66 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R14246 += 1, R65 += 1, R66 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 69] { R14248 += 1, R73 += 1, R74 += 1 };
  s0 -> s0 [0, 65535] { R14247 += 1, R14248 += 1 };
  s0 -> s2 [70, 70] { R14248 += 1, R73 += 1, R74 += 1 };
  s0 -> s3 [70, 70] { R14248 += 1, R73 += 1, R74 += 1 };
  s0 -> s1 [71, 65535] { R14248 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 69] { R14248 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R14248 += 1, R73 += 1, R74 += 1 };
  s1 -> s3 [70, 70] { R14248 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [71, 65535] { R14248 += 1, R73 += 1, R74 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R14248 += 1, R73 += 1, R74 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 69] { R14268 += 1 };
  s0 -> s0 [0, 65535] { R14267 += 1, R14268 += 1 };
  s0 -> s2 [70, 70] { R14268 += 1 };
  s0 -> s1 [71, 65535] { R14268 += 1 };
  s1 -> s1 [0, 69] { R14268 += 1 };
  s1 -> s2 [70, 70] { R14268 += 1 };
  s1 -> s1 [71, 65535] { R14268 += 1 };
  s2 -> s2 [0, 65535] { R14268 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R14269 += 1, R14270 += 1 };
  s0 -> s1 [0, 65535] { R14270 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R14270 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 69] { R14272 += 1 };
  s0 -> s0 [0, 65535] { R14271 += 1, R14272 += 1 };
  s0 -> s2 [0, 65535] { R14272 += 1, R12 += 1 };
  s0 -> s3 [70, 70] { R14272 += 1 };
  s0 -> s1 [71, 65535] { R14272 += 1 };
  s1 -> s1 [0, 69] { R14272 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [70, 70] { R14272 += 1 };
  s1 -> s1 [71, 65535] { R14272 += 1 };
  s2 -> s1 [0, 69] { R14272 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R14272 += 1, R12 += 1 };
  s2 -> s3 [70, 70] { R14272 += 1 };
  s2 -> s1 [71, 65535] { R14272 += 1 };
  s3 -> s3 [0, 65535] { R14272 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 69] { R14274 += 1, R14212 += 1 };
  s0 -> s2 [0, 65535] { R14274 += 1, R14211 += 1, R14212 += 1 };
  s0 -> s0 [0, 65535] { R14273 += 1, R14274 += 1 };
  s0 -> s1 [71, 65535] { R14274 += 1, R14212 += 1 };
  s1 -> s1 [0, 69] { R14274 += 1, R14212 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R14274 += 1 };
  s1 -> s1 [71, 65535] { R14274 += 1, R14212 += 1 };
  s2 -> s1 [0, 69] { R14274 += 1, R14212 += 1 };
  s2 -> s2 [0, 65535] { R14274 += 1, R14211 += 1, R14212 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [71, 65535] { R14274 += 1, R14212 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R14276 += 1, R14214 += 1, R20 += 1 };
  s0 -> s2 [0, 65535] { R14276 += 1, R14213 += 1, R14214 += 1 };
  s0 -> s0 [0, 65535] { R14275 += 1, R14276 += 1 };
  s1 -> s1 [0, 65535] { R14276 += 1, R14214 += 1, R20 += 1 };
  s1 -> s4 [0, 65535] { R14276 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R14276 += 1, R14214 += 1, R20 += 1 };
  s2 -> s2 [0, 65535] { R14276 += 1, R14213 += 1, R14214 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R14276 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 70] { R14278 += 1, R14216 += 1 };
  s0 -> s2 [0, 65535] { R14278 += 1, R14215 += 1, R14216 += 1 };
  s0 -> s0 [0, 65535] { R14277 += 1, R14278 += 1 };
  s0 -> s1 [75, 65535] { R14278 += 1, R14216 += 1 };
  s1 -> s1 [0, 70] { R14278 += 1, R14216 += 1 };
  s1 -> s1 [0, 65535] { R14278 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [75, 65535] { R14278 += 1, R14216 += 1 };
  s2 -> s1 [0, 70] { R14278 += 1, R14216 += 1 };
  s2 -> s2 [0, 65535] { R14278 += 1, R14215 += 1, R14216 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [75, 65535] { R14278 += 1, R14216 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R14280 += 1, R14217 += 1, R14218 += 1 };
  s0 -> s0 [0, 65535] { R14279 += 1, R14280 += 1 };
  s0 -> s2 [0, 65535] { R14280 += 1, R14218 += 1, R84 += 1 };
  s1 -> s1 [0, 65535] { R14280 += 1, R14217 += 1, R14218 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R14280 += 1, R14218 += 1, R84 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R14280 += 1, R14218 += 1, R84 += 1 };
  s2 -> s4 [0, 65535] { R14280 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R14280 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 74] { R14282 += 1, R14220 += 1 };
  s0 -> s0 [0, 65535] { R14281 += 1, R14282 += 1 };
  s0 -> s2 [0, 65535] { R14282 += 1, R14219 += 1, R14220 += 1 };
  s0 -> s3 [0, 65535] { R14282 += 1, R14220 += 1, R86 += 1 };
  s0 -> s1 [76, 65535] { R14282 += 1, R14220 += 1 };
  s1 -> s1 [0, 74] { R14282 += 1, R14220 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R14282 += 1 };
  s1 -> s1 [76, 65535] { R14282 += 1, R14220 += 1 };
  s2 -> s1 [0, 74] { R14282 += 1, R14220 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R14282 += 1, R14219 += 1, R14220 += 1 };
  s2 -> s3 [0, 65535] { R14282 += 1, R14220 += 1, R86 += 1 };
  s2 -> s1 [76, 65535] { R14282 += 1, R14220 += 1 };
  s3 -> s1 [0, 74] { R14282 += 1, R14220 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R14282 += 1 };
  s3 -> s3 [0, 65535] { R14282 += 1, R14220 += 1, R86 += 1 };
  s3 -> s1 [76, 65535] { R14282 += 1, R14220 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R14282 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 65535] { R14284 += 1, R14222 += 1 };
  s0 -> s0 [0, 65535] { R14283 += 1, R14284 += 1 };
  s0 -> s2 [0, 65535] { R14284 += 1, R14222 += 1, R90 += 1 };
  s0 -> s3 [0, 65535] { R14284 += 1, R14221 += 1, R14222 += 1 };
  s1 -> s1 [0, 65535] { R14284 += 1, R14222 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R14284 += 1 };
  s2 -> s1 [0, 65535] { R14284 += 1, R14222 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R14284 += 1, R14222 += 1, R90 += 1 };
  s2 -> s5 [0, 65535] { R14284 += 1 };
  s3 -> s1 [0, 65535] { R14284 += 1, R14222 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R14284 += 1, R14222 += 1, R90 += 1 };
  s3 -> s3 [0, 65535] { R14284 += 1, R14221 += 1, R14222 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R14284 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R14286 += 1, R14223 += 1, R14224 += 1 };
  s0 -> s2 [0, 65535] { R14286 += 1, R14224 += 1 };
  s0 -> s0 [0, 65535] { R14285 += 1, R14286 += 1 };
  s0 -> s3 [0, 65535] { R14286 += 1, R14224 += 1, R13517 += 1, R13518 += 1 };
  s1 -> s1 [0, 65535] { R14286 += 1, R14223 += 1, R14224 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s2 [0, 65535] { R14286 += 1, R14224 += 1 };
  s1 -> s3 [0, 65535] { R14286 += 1, R14224 += 1, R13517 += 1, R13518 += 1 };
  s2 -> s4 [0, 65535] { R14286 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R14286 += 1, R14224 += 1 };
  s3 -> s4 [0, 65535] { R14286 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R14286 += 1, R14224 += 1 };
  s3 -> s3 [0, 65535] { R14286 += 1, R14224 += 1, R13517 += 1, R13518 += 1 };
  s4 -> s4 [0, 65535] { R14286 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 74] { R14288 += 1, R14226 += 1, R13523 += 1 };
  s0 -> s2 [0, 65535] { R14288 += 1, R14225 += 1, R14226 += 1 };
  s0 -> s0 [0, 65535] { R14287 += 1, R14288 += 1 };
  s0 -> s3 [0, 65535] { R14288 += 1, R14226 += 1, R13523 += 1, R13524 += 1 };
  s0 -> s4 [0, 65535] { R14288 += 1, R14226 += 1, R13522 += 1, R13523 += 1 };
  s0 -> s1 [76, 65535] { R14288 += 1, R14226 += 1, R13523 += 1 };
  s1 -> s1 [0, 74] { R14288 += 1, R14226 += 1, R13523 += 1 };
  s1 -> s5 [0, 65535] { R14288 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R14288 += 1, R14226 += 1 };
  s1 -> s1 [76, 65535] { R14288 += 1, R14226 += 1, R13523 += 1 };
  s2 -> s1 [0, 74] { R14288 += 1, R14226 += 1, R13523 += 1 };
  s2 -> s2 [0, 65535] { R14288 += 1, R14225 += 1, R14226 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R14288 += 1, R14226 += 1, R13523 += 1, R13524 += 1 };
  s2 -> s4 [0, 65535] { R14288 += 1, R14226 += 1, R13522 += 1, R13523 += 1 };
  s2 -> s1 [76, 65535] { R14288 += 1, R14226 += 1, R13523 += 1 };
  s3 -> s1 [0, 74] { R14288 += 1, R14226 += 1, R13523 += 1 };
  s3 -> s5 [0, 65535] { R14288 += 1 };
  s3 -> s7 [0, 65535] { R14288 += 1, R14226 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R14288 += 1, R14226 += 1, R13523 += 1, R13524 += 1 };
  s3 -> s1 [76, 65535] { R14288 += 1, R14226 += 1, R13523 += 1 };
  s4 -> s1 [0, 74] { R14288 += 1, R14226 += 1, R13523 += 1 };
  s4 -> s5 [0, 65535] { R14288 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s3 [0, 65535] { R14288 += 1, R14226 += 1, R13523 += 1, R13524 += 1 };
  s4 -> s4 [0, 65535] { R14288 += 1, R14226 += 1, R13522 += 1, R13523 += 1 };
  s4 -> s1 [76, 65535] { R14288 += 1, R14226 += 1, R13523 += 1 };
  s5 -> s5 [0, 65535] { R14288 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R14288 += 1 };
  s7 -> s7 [0, 65535] { R14288 += 1, R14226 += 1 };
  s7 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R14290 += 1, R14228 += 1 };
  s0 -> s2 [0, 65535] { R14290 += 1, R14227 += 1, R14228 += 1 };
  s0 -> s3 [0, 65535] { R14290 += 1, R14228 += 1, R14088 += 1 };
  s0 -> s0 [0, 65535] { R14289 += 1, R14290 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R14290 += 1, R14228 += 1 };
  s1 -> s5 [0, 65535] { R14290 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R14290 += 1, R14228 += 1 };
  s2 -> s2 [0, 65535] { R14290 += 1, R14227 += 1, R14228 += 1 };
  s2 -> s3 [0, 65535] { R14290 += 1, R14228 += 1, R14088 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R14290 += 1, R14228 += 1 };
  s3 -> s3 [0, 65535] { R14290 += 1, R14228 += 1, R14088 += 1 };
  s3 -> s5 [0, 65535] { R14290 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R14290 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 65535] { R14292 += 1, R14230 += 1 };
  s0 -> s0 [0, 65535] { R14291 += 1, R14292 += 1 };
  s0 -> s2 [0, 65535] { R14292 += 1, R14229 += 1, R14230 += 1 };
  s1 -> s1 [0, 65535] { R14292 += 1, R14230 += 1 };
  s1 -> s4 [0, 65535] { R14292 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R14292 += 1, R14230 += 1 };
  s2 -> s2 [0, 65535] { R14292 += 1, R14229 += 1, R14230 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R14292 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R14294 += 1, R14250 += 1, R21 += 1 };
  s0 -> s2 [0, 65535] { R14294 += 1, R14249 += 1, R14250 += 1 };
  s0 -> s0 [0, 65535] { R14293 += 1, R14294 += 1 };
  s1 -> s4 [0, 65535] { R14294 += 1 };
  s1 -> s1 [0, 65535] { R14294 += 1, R14250 += 1, R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R14294 += 1, R14250 += 1, R21 += 1 };
  s2 -> s2 [0, 65535] { R14294 += 1, R14249 += 1, R14250 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R14294 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 69] { R14296 += 1, R14252 += 1 };
  s0 -> s2 [0, 65535] { R14296 += 1, R14251 += 1, R14252 += 1 };
  s0 -> s0 [0, 65535] { R14295 += 1, R14296 += 1 };
  s0 -> s3 [70, 70] { R14296 += 1, R14252 += 1 };
  s0 -> s4 [70, 70] { R14296 += 1, R14252 += 1 };
  s0 -> s5 [75, 75] { R14296 += 1, R14252 += 1 };
  s0 -> s1 [76, 65535] { R14296 += 1, R14252 += 1 };
  s1 -> s1 [0, 69] { R14296 += 1, R14252 += 1 };
  s1 -> s3 [70, 70] { R14296 += 1, R14252 += 1 };
  s1 -> s4 [70, 70] { R14296 += 1, R14252 += 1 };
  s1 -> s5 [75, 75] { R14296 += 1, R14252 += 1 };
  s1 -> s1 [76, 65535] { R14296 += 1, R14252 += 1 };
  s2 -> s1 [0, 69] { R14296 += 1, R14252 += 1 };
  s2 -> s2 [0, 65535] { R14296 += 1, R14251 += 1, R14252 += 1 };
  s2 -> s3 [70, 70] { R14296 += 1, R14252 += 1 };
  s2 -> s4 [70, 70] { R14296 += 1, R14252 += 1 };
  s2 -> s5 [75, 75] { R14296 += 1, R14252 += 1 };
  s2 -> s1 [76, 65535] { R14296 += 1, R14252 += 1 };
  s3 -> s3 [0, 70] { R14296 += 1, R14252 += 1 };
  s3 -> s8 [75, 75] { R14296 += 1, R14252 += 1 };
  s3 -> s3 [76, 65535] { R14296 += 1, R14252 += 1 };
  s5 -> s5 [0, 69] { R14296 += 1, R14252 += 1 };
  s5 -> s5 [0, 65535] { R14296 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [70, 70] { R14296 += 1, R14252 += 1 };
  s5 -> s8 [70, 70] { R14296 += 1, R14252 += 1 };
  s5 -> s5 [75, 65535] { R14296 += 1, R14252 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R14296 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 70] { R14296 += 1, R14252 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R14296 += 1 };
  s8 -> s8 [75, 65535] { R14296 += 1, R14252 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 69] { R14298 += 1, R14254 += 1, R83 += 1 };
  s0 -> s0 [0, 65535] { R14297 += 1, R14298 += 1 };
  s0 -> s2 [0, 65535] { R14298 += 1, R14253 += 1, R14254 += 1 };
  s0 -> s3 [70, 70] { R14298 += 1, R14254 += 1, R83 += 1 };
  s0 -> s4 [70, 70] { R14298 += 1, R14254 += 1, R83 += 1 };
  s0 -> s1 [71, 65535] { R14298 += 1, R14254 += 1, R83 += 1 };
  s1 -> s1 [0, 69] { R14298 += 1, R14254 += 1, R83 += 1 };
  s1 -> s1 [0, 65535] { R14298 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [70, 70] { R14298 += 1, R14254 += 1, R83 += 1 };
  s1 -> s4 [70, 70] { R14298 += 1, R14254 += 1, R83 += 1 };
  s1 -> s1 [71, 65535] { R14298 += 1, R14254 += 1, R83 += 1 };
  s2 -> s1 [0, 69] { R14298 += 1, R14254 += 1, R83 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R14298 += 1, R14253 += 1, R14254 += 1 };
  s2 -> s3 [70, 70] { R14298 += 1, R14254 += 1, R83 += 1 };
  s2 -> s4 [70, 70] { R14298 += 1, R14254 += 1, R83 += 1 };
  s2 -> s1 [71, 65535] { R14298 += 1, R14254 += 1, R83 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R14298 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R14298 += 1 };
  s4 -> s4 [0, 65535] { R14298 += 1, R14254 += 1, R83 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R14298 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 69] { R14300 += 1, R14256 += 1, R85 += 1 };
  s0 -> s2 [0, 65535] { R14300 += 1, R14255 += 1, R14256 += 1 };
  s0 -> s0 [0, 65535] { R14299 += 1, R14300 += 1 };
  s0 -> s3 [70, 70] { R14300 += 1, R14256 += 1, R85 += 1 };
  s0 -> s4 [70, 70] { R14300 += 1, R14256 += 1, R85 += 1 };
  s0 -> s1 [71, 65535] { R14300 += 1, R14256 += 1, R85 += 1 };
  s1 -> s1 [0, 69] { R14300 += 1, R14256 += 1, R85 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R14300 += 1 };
  s1 -> s3 [70, 70] { R14300 += 1, R14256 += 1, R85 += 1 };
  s1 -> s4 [70, 70] { R14300 += 1, R14256 += 1, R85 += 1 };
  s1 -> s1 [71, 65535] { R14300 += 1, R14256 += 1, R85 += 1 };
  s2 -> s1 [0, 69] { R14300 += 1, R14256 += 1, R85 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R14300 += 1, R14255 += 1, R14256 += 1 };
  s2 -> s3 [70, 70] { R14300 += 1, R14256 += 1, R85 += 1 };
  s2 -> s4 [70, 70] { R14300 += 1, R14256 += 1, R85 += 1 };
  s2 -> s1 [71, 65535] { R14300 += 1, R14256 += 1, R85 += 1 };
  s3 -> s3 [0, 65535] { R14300 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R14300 += 1 };
  s4 -> s4 [0, 65535] { R14300 += 1, R14256 += 1, R85 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R14300 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 69] { R14302 += 1, R14258 += 1, R87 += 1, R88 += 1 };
  s0 -> s2 [0, 69] { R14302 += 1, R14258 += 1, R88 += 1 };
  s0 -> s3 [0, 65535] { R14302 += 1, R14257 += 1, R14258 += 1 };
  s0 -> s0 [0, 65535] { R14301 += 1, R14302 += 1 };
  s0 -> s4 [70, 70] { R14302 += 1, R14258 += 1, R87 += 1, R88 += 1 };
  s0 -> s5 [70, 70] { R14302 += 1, R14258 += 1, R88 += 1 };
  s0 -> s6 [70, 70] { R14302 += 1, R14258 += 1, R87 += 1, R88 += 1 };
  s0 -> s7 [70, 70] { R14302 += 1, R14258 += 1, R88 += 1 };
  s0 -> s2 [71, 74] { R14302 += 1, R14258 += 1, R88 += 1 };
  s0 -> s1 [71, 65535] { R14302 += 1, R14258 += 1, R87 += 1, R88 += 1 };
  s0 -> s8 [75, 75] { R14302 += 1, R14258 += 1, R88 += 1 };
  s0 -> s2 [76, 65535] { R14302 += 1, R14258 += 1, R88 += 1 };
  s1 -> s1 [0, 69] { R14302 += 1, R14258 += 1, R87 += 1, R88 += 1 };
  s1 -> s2 [0, 69] { R14302 += 1, R14258 += 1, R88 += 1 };
  s1 -> s4 [70, 70] { R14302 += 1, R14258 += 1, R87 += 1, R88 += 1 };
  s1 -> s5 [70, 70] { R14302 += 1, R14258 += 1, R88 += 1 };
  s1 -> s6 [70, 70] { R14302 += 1, R14258 += 1, R87 += 1, R88 += 1 };
  s1 -> s7 [70, 70] { R14302 += 1, R14258 += 1, R88 += 1 };
  s1 -> s2 [71, 74] { R14302 += 1, R14258 += 1, R88 += 1 };
  s1 -> s1 [71, 65535] { R14302 += 1, R14258 += 1, R87 += 1, R88 += 1 };
  s1 -> s8 [75, 75] { R14302 += 1, R14258 += 1, R88 += 1 };
  s1 -> s2 [76, 65535] { R14302 += 1, R14258 += 1, R88 += 1 };
  s2 -> s2 [0, 69] { R14302 += 1, R14258 += 1, R88 += 1 };
  s2 -> s5 [70, 70] { R14302 += 1, R14258 += 1, R88 += 1 };
  s2 -> s7 [70, 70] { R14302 += 1, R14258 += 1, R88 += 1 };
  s2 -> s2 [71, 74] { R14302 += 1, R14258 += 1, R88 += 1 };
  s2 -> s8 [75, 75] { R14302 += 1, R14258 += 1, R88 += 1 };
  s2 -> s2 [76, 65535] { R14302 += 1, R14258 += 1, R88 += 1 };
  s3 -> s1 [0, 69] { R14302 += 1, R14258 += 1, R87 += 1, R88 += 1 };
  s3 -> s2 [0, 69] { R14302 += 1, R14258 += 1, R88 += 1 };
  s3 -> s3 [0, 65535] { R14302 += 1, R14257 += 1, R14258 += 1 };
  s3 -> s4 [70, 70] { R14302 += 1, R14258 += 1, R87 += 1, R88 += 1 };
  s3 -> s5 [70, 70] { R14302 += 1, R14258 += 1, R88 += 1 };
  s3 -> s6 [70, 70] { R14302 += 1, R14258 += 1, R87 += 1, R88 += 1 };
  s3 -> s7 [70, 70] { R14302 += 1, R14258 += 1, R88 += 1 };
  s3 -> s2 [71, 74] { R14302 += 1, R14258 += 1, R88 += 1 };
  s3 -> s1 [71, 65535] { R14302 += 1, R14258 += 1, R87 += 1, R88 += 1 };
  s3 -> s8 [75, 75] { R14302 += 1, R14258 += 1, R88 += 1 };
  s3 -> s2 [76, 65535] { R14302 += 1, R14258 += 1, R88 += 1 };
  s6 -> s7 [0, 74] { R14302 += 1, R14258 += 1, R88 += 1 };
  s6 -> s6 [0, 65535] { R14302 += 1, R14258 += 1, R87 += 1, R88 += 1 };
  s6 -> s10 [75, 75] { R14302 += 1, R14258 += 1, R88 += 1 };
  s6 -> s7 [76, 65535] { R14302 += 1, R14258 += 1, R88 += 1 };
  s7 -> s7 [0, 74] { R14302 += 1, R14258 += 1, R88 += 1 };
  s7 -> s10 [75, 75] { R14302 += 1, R14258 += 1, R88 += 1 };
  s7 -> s7 [76, 65535] { R14302 += 1, R14258 += 1, R88 += 1 };
  s8 -> s8 [0, 69] { R14302 += 1, R14258 += 1, R88 += 1 };
  s8 -> s8 [0, 65535] { R14302 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [70, 70] { R14302 += 1, R14258 += 1, R88 += 1 };
  s8 -> s11 [70, 70] { R14302 += 1, R14258 += 1, R88 += 1 };
  s8 -> s8 [71, 65535] { R14302 += 1, R14258 += 1, R88 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s12 [0, 65535] { R14302 += 1 };
  s10 -> s10 [0, 65535] { R14302 += 1, R14258 += 1, R88 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R14302 += 1 };
  s11 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R14302 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 69] { R14304 += 1, R14260 += 1, R13513 += 1, R13514 += 1 };
  s0 -> s2 [0, 69] { R14304 += 1, R14260 += 1, R13514 += 1, R13515 += 1 };
  s0 -> s0 [0, 65535] { R14303 += 1, R14304 += 1 };
  s0 -> s3 [0, 65535] { R14304 += 1, R14259 += 1, R14260 += 1 };
  s0 -> s4 [70, 70] { R14304 += 1, R14260 += 1, R13513 += 1, R13514 += 1 };
  s0 -> s5 [70, 70] { R14304 += 1, R14260 += 1, R13514 += 1, R13515 += 1 };
  s0 -> s6 [70, 70] { R14304 += 1, R14260 += 1, R13513 += 1, R13514 += 1 };
  s0 -> s7 [70, 70] { R14304 += 1, R14260 += 1, R13514 += 1, R13515 += 1 };
  s0 -> s1 [71, 65535] { R14304 += 1, R14260 += 1, R13513 += 1, R13514 += 1 };
  s0 -> s2 [71, 65535] { R14304 += 1, R14260 += 1, R13514 += 1, R13515 += 1 };
  s1 -> s1 [0, 69] { R14304 += 1, R14260 += 1, R13513 += 1, R13514 += 1 };
  s1 -> s2 [0, 69] { R14304 += 1, R14260 += 1, R13514 += 1, R13515 += 1 };
  s1 -> s4 [70, 70] { R14304 += 1, R14260 += 1, R13513 += 1, R13514 += 1 };
  s1 -> s5 [70, 70] { R14304 += 1, R14260 += 1, R13514 += 1, R13515 += 1 };
  s1 -> s6 [70, 70] { R14304 += 1, R14260 += 1, R13513 += 1, R13514 += 1 };
  s1 -> s7 [70, 70] { R14304 += 1, R14260 += 1, R13514 += 1, R13515 += 1 };
  s1 -> s1 [71, 65535] { R14304 += 1, R14260 += 1, R13513 += 1, R13514 += 1 };
  s1 -> s2 [71, 65535] { R14304 += 1, R14260 += 1, R13514 += 1, R13515 += 1 };
  s2 -> s2 [0, 69] { R14304 += 1, R14260 += 1, R13514 += 1, R13515 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R14304 += 1 };
  s2 -> s5 [70, 70] { R14304 += 1, R14260 += 1, R13514 += 1, R13515 += 1 };
  s2 -> s7 [70, 70] { R14304 += 1, R14260 += 1, R13514 += 1, R13515 += 1 };
  s2 -> s2 [71, 65535] { R14304 += 1, R14260 += 1, R13514 += 1, R13515 += 1 };
  s3 -> s1 [0, 69] { R14304 += 1, R14260 += 1, R13513 += 1, R13514 += 1 };
  s3 -> s2 [0, 69] { R14304 += 1, R14260 += 1, R13514 += 1, R13515 += 1 };
  s3 -> s3 [0, 65535] { R14304 += 1, R14259 += 1, R14260 += 1 };
  s3 -> s4 [70, 70] { R14304 += 1, R14260 += 1, R13513 += 1, R13514 += 1 };
  s3 -> s5 [70, 70] { R14304 += 1, R14260 += 1, R13514 += 1, R13515 += 1 };
  s3 -> s6 [70, 70] { R14304 += 1, R14260 += 1, R13513 += 1, R13514 += 1 };
  s3 -> s7 [70, 70] { R14304 += 1, R14260 += 1, R13514 += 1, R13515 += 1 };
  s3 -> s1 [71, 65535] { R14304 += 1, R14260 += 1, R13513 += 1, R13514 += 1 };
  s3 -> s2 [71, 65535] { R14304 += 1, R14260 += 1, R13514 += 1, R13515 += 1 };
  s4 -> s4 [0, 65535] { R14304 += 1, R14260 += 1, R13513 += 1, R13514 += 1 };
  s4 -> s7 [0, 65535] { R14304 += 1, R14260 += 1, R13514 += 1, R13515 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s5 [0, 65535] { R14304 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s9 [0, 65535] { R14304 += 1 };
  s7 -> s7 [0, 65535] { R14304 += 1, R14260 += 1, R13514 += 1, R13515 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R14304 += 1 };
  accepting s8, s5, s2, s9, s7;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 69] { R14306 += 1, R14262 += 1, R13519 += 1, R13520 += 1 };
  s0 -> s0 [0, 65535] { R14305 += 1, R14306 += 1 };
  s0 -> s2 [0, 65535] { R14306 += 1, R14261 += 1, R14262 += 1 };
  s0 -> s3 [70, 70] { R14306 += 1, R14262 += 1, R13519 += 1, R13520 += 1 };
  s0 -> s4 [70, 70] { R14306 += 1, R14262 += 1, R13519 += 1, R13520 += 1 };
  s0 -> s1 [71, 65535] { R14306 += 1, R14262 += 1, R13519 += 1, R13520 += 1 };
  s1 -> s1 [0, 69] { R14306 += 1, R14262 += 1, R13519 += 1, R13520 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R14306 += 1 };
  s1 -> s3 [70, 70] { R14306 += 1, R14262 += 1, R13519 += 1, R13520 += 1 };
  s1 -> s4 [70, 70] { R14306 += 1, R14262 += 1, R13519 += 1, R13520 += 1 };
  s1 -> s1 [71, 65535] { R14306 += 1, R14262 += 1, R13519 += 1, R13520 += 1 };
  s2 -> s1 [0, 69] { R14306 += 1, R14262 += 1, R13519 += 1, R13520 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R14306 += 1, R14261 += 1, R14262 += 1 };
  s2 -> s3 [70, 70] { R14306 += 1, R14262 += 1, R13519 += 1, R13520 += 1 };
  s2 -> s4 [70, 70] { R14306 += 1, R14262 += 1, R13519 += 1, R13520 += 1 };
  s2 -> s1 [71, 65535] { R14306 += 1, R14262 += 1, R13519 += 1, R13520 += 1 };
  s3 -> s6 [0, 65535] { R14306 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R14306 += 1, R14262 += 1, R13519 += 1, R13520 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R14306 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R14306 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 69] { R14308 += 1, R14264 += 1, R14084 += 1, R14085 += 1, R14086 += 1 };
  s0 -> s2 [0, 69] { R14308 += 1, R14264 += 1, R14083 += 1, R14084 += 1 };
  s0 -> s3 [0, 69] { R14308 += 1, R14264 += 1, R14084 += 1, R14086 += 1 };
  s0 -> s0 [0, 65535] { R14307 += 1, R14308 += 1 };
  s0 -> s4 [0, 65535] { R14308 += 1, R14263 += 1, R14264 += 1 };
  s0 -> s5 [70, 70] { R14308 += 1, R14264 += 1, R14083 += 1, R14084 += 1 };
  s0 -> s6 [70, 70] { R14308 += 1, R14264 += 1, R14084 += 1, R14086 += 1 };
  s0 -> s7 [70, 70] { R14308 += 1, R14264 += 1, R14084 += 1, R14085 += 1, R14086 += 1 };
  s0 -> s8 [70, 70] { R14308 += 1, R14264 += 1, R14083 += 1, R14084 += 1 };
  s0 -> s9 [70, 70] { R14308 += 1, R14264 += 1, R14084 += 1, R14086 += 1 };
  s0 -> s10 [70, 70] { R14308 += 1, R14264 += 1, R14084 += 1, R14085 += 1, R14086 += 1 };
  s0 -> s3 [71, 74] { R14308 += 1, R14264 += 1, R14084 += 1, R14086 += 1 };
  s0 -> s1 [71, 65535] { R14308 += 1, R14264 += 1, R14084 += 1, R14085 += 1, R14086 += 1 };
  s0 -> s2 [71, 65535] { R14308 += 1, R14264 += 1, R14083 += 1, R14084 += 1 };
  s0 -> s11 [75, 75] { R14308 += 1, R14264 += 1, R14084 += 1, R14086 += 1 };
  s0 -> s3 [76, 65535] { R14308 += 1, R14264 += 1, R14084 += 1, R14086 += 1 };
  s1 -> s1 [0, 69] { R14308 += 1, R14264 += 1, R14084 += 1, R14085 += 1, R14086 += 1 };
  s1 -> s3 [0, 69] { R14308 += 1, R14264 += 1, R14084 += 1, R14086 += 1 };
  s1 -> s6 [70, 70] { R14308 += 1, R14264 += 1, R14084 += 1, R14086 += 1 };
  s1 -> s7 [70, 70] { R14308 += 1, R14264 += 1, R14084 += 1, R14085 += 1, R14086 += 1 };
  s1 -> s9 [70, 70] { R14308 += 1, R14264 += 1, R14084 += 1, R14086 += 1 };
  s1 -> s10 [70, 70] { R14308 += 1, R14264 += 1, R14084 += 1, R14085 += 1, R14086 += 1 };
  s1 -> s3 [71, 74] { R14308 += 1, R14264 += 1, R14084 += 1, R14086 += 1 };
  s1 -> s1 [71, 65535] { R14308 += 1, R14264 += 1, R14084 += 1, R14085 += 1, R14086 += 1 };
  s1 -> s11 [75, 75] { R14308 += 1, R14264 += 1, R14084 += 1, R14086 += 1 };
  s1 -> s3 [76, 65535] { R14308 += 1, R14264 += 1, R14084 += 1, R14086 += 1 };
  s2 -> s1 [0, 69] { R14308 += 1, R14264 += 1, R14084 += 1, R14085 += 1, R14086 += 1 };
  s2 -> s2 [0, 69] { R14308 += 1, R14264 += 1, R14083 += 1, R14084 += 1 };
  s2 -> s3 [0, 69] { R14308 += 1, R14264 += 1, R14084 += 1, R14086 += 1 };
  s2 -> s5 [70, 70] { R14308 += 1, R14264 += 1, R14083 += 1, R14084 += 1 };
  s2 -> s6 [70, 70] { R14308 += 1, R14264 += 1, R14084 += 1, R14086 += 1 };
  s2 -> s7 [70, 70] { R14308 += 1, R14264 += 1, R14084 += 1, R14085 += 1, R14086 += 1 };
  s2 -> s8 [70, 70] { R14308 += 1, R14264 += 1, R14083 += 1, R14084 += 1 };
  s2 -> s9 [70, 70] { R14308 += 1, R14264 += 1, R14084 += 1, R14086 += 1 };
  s2 -> s10 [70, 70] { R14308 += 1, R14264 += 1, R14084 += 1, R14085 += 1, R14086 += 1 };
  s2 -> s3 [71, 74] { R14308 += 1, R14264 += 1, R14084 += 1, R14086 += 1 };
  s2 -> s1 [71, 65535] { R14308 += 1, R14264 += 1, R14084 += 1, R14085 += 1, R14086 += 1 };
  s2 -> s2 [71, 65535] { R14308 += 1, R14264 += 1, R14083 += 1, R14084 += 1 };
  s2 -> s11 [75, 75] { R14308 += 1, R14264 += 1, R14084 += 1, R14086 += 1 };
  s2 -> s3 [76, 65535] { R14308 += 1, R14264 += 1, R14084 += 1, R14086 += 1 };
  s3 -> s3 [0, 69] { R14308 += 1, R14264 += 1, R14084 += 1, R14086 += 1 };
  s3 -> s6 [70, 70] { R14308 += 1, R14264 += 1, R14084 += 1, R14086 += 1 };
  s3 -> s9 [70, 70] { R14308 += 1, R14264 += 1, R14084 += 1, R14086 += 1 };
  s3 -> s3 [71, 74] { R14308 += 1, R14264 += 1, R14084 += 1, R14086 += 1 };
  s3 -> s11 [75, 75] { R14308 += 1, R14264 += 1, R14084 += 1, R14086 += 1 };
  s3 -> s3 [76, 65535] { R14308 += 1, R14264 += 1, R14084 += 1, R14086 += 1 };
  s4 -> s1 [0, 69] { R14308 += 1, R14264 += 1, R14084 += 1, R14085 += 1, R14086 += 1 };
  s4 -> s2 [0, 69] { R14308 += 1, R14264 += 1, R14083 += 1, R14084 += 1 };
  s4 -> s3 [0, 69] { R14308 += 1, R14264 += 1, R14084 += 1, R14086 += 1 };
  s4 -> s4 [0, 65535] { R14308 += 1, R14263 += 1, R14264 += 1 };
  s4 -> s5 [70, 70] { R14308 += 1, R14264 += 1, R14083 += 1, R14084 += 1 };
  s4 -> s6 [70, 70] { R14308 += 1, R14264 += 1, R14084 += 1, R14086 += 1 };
  s4 -> s7 [70, 70] { R14308 += 1, R14264 += 1, R14084 += 1, R14085 += 1, R14086 += 1 };
  s4 -> s8 [70, 70] { R14308 += 1, R14264 += 1, R14083 += 1, R14084 += 1 };
  s4 -> s9 [70, 70] { R14308 += 1, R14264 += 1, R14084 += 1, R14086 += 1 };
  s4 -> s10 [70, 70] { R14308 += 1, R14264 += 1, R14084 += 1, R14085 += 1, R14086 += 1 };
  s4 -> s3 [71, 74] { R14308 += 1, R14264 += 1, R14084 += 1, R14086 += 1 };
  s4 -> s1 [71, 65535] { R14308 += 1, R14264 += 1, R14084 += 1, R14085 += 1, R14086 += 1 };
  s4 -> s2 [71, 65535] { R14308 += 1, R14264 += 1, R14083 += 1, R14084 += 1 };
  s4 -> s11 [75, 75] { R14308 += 1, R14264 += 1, R14084 += 1, R14086 += 1 };
  s4 -> s3 [76, 65535] { R14308 += 1, R14264 += 1, R14084 += 1, R14086 += 1 };
  s8 -> s9 [0, 74] { R14308 += 1, R14264 += 1, R14084 += 1, R14086 += 1 };
  s8 -> s8 [0, 65535] { R14308 += 1, R14264 += 1, R14083 += 1, R14084 += 1 };
  s8 -> s10 [0, 65535] { R14308 += 1, R14264 += 1, R14084 += 1, R14085 += 1, R14086 += 1 };
  s8 -> s16 [75, 75] { R14308 += 1, R14264 += 1, R14084 += 1, R14086 += 1 };
  s8 -> s9 [76, 65535] { R14308 += 1, R14264 += 1, R14084 += 1, R14086 += 1 };
  s9 -> s9 [0, 74] { R14308 += 1, R14264 += 1, R14084 += 1, R14086 += 1 };
  s9 -> s16 [75, 75] { R14308 += 1, R14264 += 1, R14084 += 1, R14086 += 1 };
  s9 -> s9 [76, 65535] { R14308 += 1, R14264 += 1, R14084 += 1, R14086 += 1 };
  s10 -> s9 [0, 74] { R14308 += 1, R14264 += 1, R14084 += 1, R14086 += 1 };
  s10 -> s10 [0, 65535] { R14308 += 1, R14264 += 1, R14084 += 1, R14085 += 1, R14086 += 1 };
  s10 -> s16 [75, 75] { R14308 += 1, R14264 += 1, R14084 += 1, R14086 += 1 };
  s10 -> s9 [76, 65535] { R14308 += 1, R14264 += 1, R14084 += 1, R14086 += 1 };
  s11 -> s11 [0, 69] { R14308 += 1, R14264 += 1, R14084 += 1, R14086 += 1 };
  s11 -> s12 [0, 69] { R14308 += 1, R14264 += 1, R14084 += 1 };
  s11 -> s13 [70, 70] { R14308 += 1, R14264 += 1, R14084 += 1, R14086 += 1 };
  s11 -> s14 [70, 70] { R14308 += 1, R14264 += 1, R14084 += 1 };
  s11 -> s15 [70, 70] { R14308 += 1, R14264 += 1, R14084 += 1 };
  s11 -> s16 [70, 70] { R14308 += 1, R14264 += 1, R14084 += 1, R14086 += 1 };
  s11 -> s11 [71, 65535] { R14308 += 1, R14264 += 1, R14084 += 1, R14086 += 1 };
  s11 -> s12 [71, 65535] { R14308 += 1, R14264 += 1, R14084 += 1 };
  s12 -> s12 [0, 69] { R14308 += 1, R14264 += 1, R14084 += 1 };
  s12 -> s12 [0, 65535] { R14308 += 1 };
  s12 -> s18 [0, 65535];
  s12 -> s14 [70, 70] { R14308 += 1, R14264 += 1, R14084 += 1 };
  s12 -> s15 [70, 70] { R14308 += 1, R14264 += 1, R14084 += 1 };
  s12 -> s12 [71, 65535] { R14308 += 1, R14264 += 1, R14084 += 1 };
  s14 -> s14 [0, 65535] { R14308 += 1 };
  s14 -> s18 [0, 65535];
  s15 -> s17 [0, 65535] { R14308 += 1 };
  s15 -> s15 [0, 65535] { R14308 += 1, R14264 += 1, R14084 += 1 };
  s15 -> s18 [0, 65535];
  s16 -> s15 [0, 65535] { R14308 += 1, R14264 += 1, R14084 += 1 };
  s16 -> s16 [0, 65535] { R14308 += 1, R14264 += 1, R14084 += 1, R14086 += 1 };
  s17 -> s17 [0, 65535] { R14308 += 1 };
  s17 -> s18 [0, 65535];
  s18 -> s18 [0, 65535];
  accepting s17, s12, s14, s18, s15;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 69] { R14310 += 1, R14266 += 1, R14202 += 1, R14204 += 1, R14205 += 1 };
  s0 -> s2 [0, 69] { R14310 += 1, R14266 += 1, R14201 += 1, R14202 += 1 };
  s0 -> s3 [0, 69] { R14310 += 1, R14266 += 1, R14202 += 1, R14203 += 1, R14204 += 1 };
  s0 -> s0 [0, 65535] { R14309 += 1, R14310 += 1 };
  s0 -> s4 [0, 65535] { R14310 += 1, R14265 += 1, R14266 += 1 };
  s0 -> s5 [70, 70] { R14310 += 1, R14266 += 1, R14202 += 1, R14204 += 1, R14205 += 1 };
  s0 -> s6 [70, 70] { R14310 += 1, R14266 += 1, R14202 += 1, R14203 += 1, R14204 += 1 };
  s0 -> s7 [70, 70] { R14310 += 1, R14266 += 1, R14202 += 1, R14203 += 1, R14204 += 1 };
  s0 -> s8 [70, 70] { R14310 += 1, R14266 += 1, R14202 += 1, R14204 += 1, R14205 += 1 };
  s0 -> s9 [70, 70] { R14310 += 1, R14266 += 1, R14201 += 1, R14202 += 1 };
  s0 -> s10 [70, 70] { R14310 += 1, R14266 += 1, R14201 += 1, R14202 += 1 };
  s0 -> s1 [71, 65535] { R14310 += 1, R14266 += 1, R14202 += 1, R14204 += 1, R14205 += 1 };
  s0 -> s2 [71, 65535] { R14310 += 1, R14266 += 1, R14201 += 1, R14202 += 1 };
  s0 -> s3 [71, 65535] { R14310 += 1, R14266 += 1, R14202 += 1, R14203 += 1, R14204 += 1 };
  s1 -> s17 [0, 69] { R14310 += 1, R14266 += 1, R14202 += 1 };
  s1 -> s1 [0, 69] { R14310 += 1, R14266 += 1, R14202 += 1, R14204 += 1, R14205 += 1 };
  s1 -> s15 [0, 69] { R14310 += 1, R14266 += 1 };
  s1 -> s5 [70, 70] { R14310 += 1, R14266 += 1, R14202 += 1, R14204 += 1, R14205 += 1 };
  s1 -> s11 [70, 70] { R14310 += 1, R14266 += 1 };
  s1 -> s8 [70, 70] { R14310 += 1, R14266 += 1, R14202 += 1, R14204 += 1, R14205 += 1 };
  s1 -> s16 [70, 70] { R14310 += 1, R14266 += 1 };
  s1 -> s18 [70, 70] { R14310 += 1, R14266 += 1, R14202 += 1 };
  s1 -> s14 [70, 70] { R14310 += 1, R14266 += 1, R14202 += 1 };
  s1 -> s17 [71, 65535] { R14310 += 1, R14266 += 1, R14202 += 1 };
  s1 -> s1 [71, 65535] { R14310 += 1, R14266 += 1, R14202 += 1, R14204 += 1, R14205 += 1 };
  s1 -> s15 [71, 65535] { R14310 += 1, R14266 += 1 };
  s2 -> s1 [0, 69] { R14310 += 1, R14266 += 1, R14202 += 1, R14204 += 1, R14205 += 1 };
  s2 -> s2 [0, 69] { R14310 += 1, R14266 += 1, R14201 += 1, R14202 += 1 };
  s2 -> s3 [0, 69] { R14310 += 1, R14266 += 1, R14202 += 1, R14203 += 1, R14204 += 1 };
  s2 -> s5 [70, 70] { R14310 += 1, R14266 += 1, R14202 += 1, R14204 += 1, R14205 += 1 };
  s2 -> s6 [70, 70] { R14310 += 1, R14266 += 1, R14202 += 1, R14203 += 1, R14204 += 1 };
  s2 -> s7 [70, 70] { R14310 += 1, R14266 += 1, R14202 += 1, R14203 += 1, R14204 += 1 };
  s2 -> s8 [70, 70] { R14310 += 1, R14266 += 1, R14202 += 1, R14204 += 1, R14205 += 1 };
  s2 -> s9 [70, 70] { R14310 += 1, R14266 += 1, R14201 += 1, R14202 += 1 };
  s2 -> s10 [70, 70] { R14310 += 1, R14266 += 1, R14201 += 1, R14202 += 1 };
  s2 -> s1 [71, 65535] { R14310 += 1, R14266 += 1, R14202 += 1, R14204 += 1, R14205 += 1 };
  s2 -> s2 [71, 65535] { R14310 += 1, R14266 += 1, R14201 += 1, R14202 += 1 };
  s2 -> s3 [71, 65535] { R14310 += 1, R14266 += 1, R14202 += 1, R14203 += 1, R14204 += 1 };
  s3 -> s1 [0, 69] { R14310 += 1, R14266 += 1, R14202 += 1, R14204 += 1, R14205 += 1 };
  s3 -> s15 [0, 69] { R14310 += 1, R14266 += 1 };
  s3 -> s3 [0, 69] { R14310 += 1, R14266 += 1, R14202 += 1, R14203 += 1, R14204 += 1 };
  s3 -> s5 [70, 70] { R14310 += 1, R14266 += 1, R14202 += 1, R14204 += 1, R14205 += 1 };
  s3 -> s6 [70, 70] { R14310 += 1, R14266 += 1, R14202 += 1, R14203 += 1, R14204 += 1 };
  s3 -> s11 [70, 70] { R14310 += 1, R14266 += 1 };
  s3 -> s7 [70, 70] { R14310 += 1, R14266 += 1, R14202 += 1, R14203 += 1, R14204 += 1 };
  s3 -> s8 [70, 70] { R14310 += 1, R14266 += 1, R14202 += 1, R14204 += 1, R14205 += 1 };
  s3 -> s16 [70, 70] { R14310 += 1, R14266 += 1 };
  s3 -> s1 [71, 65535] { R14310 += 1, R14266 += 1, R14202 += 1, R14204 += 1, R14205 += 1 };
  s3 -> s15 [71, 65535] { R14310 += 1, R14266 += 1 };
  s3 -> s3 [71, 65535] { R14310 += 1, R14266 += 1, R14202 += 1, R14203 += 1, R14204 += 1 };
  s4 -> s1 [0, 69] { R14310 += 1, R14266 += 1, R14202 += 1, R14204 += 1, R14205 += 1 };
  s4 -> s2 [0, 69] { R14310 += 1, R14266 += 1, R14201 += 1, R14202 += 1 };
  s4 -> s3 [0, 69] { R14310 += 1, R14266 += 1, R14202 += 1, R14203 += 1, R14204 += 1 };
  s4 -> s4 [0, 65535] { R14310 += 1, R14265 += 1, R14266 += 1 };
  s4 -> s5 [70, 70] { R14310 += 1, R14266 += 1, R14202 += 1, R14204 += 1, R14205 += 1 };
  s4 -> s6 [70, 70] { R14310 += 1, R14266 += 1, R14202 += 1, R14203 += 1, R14204 += 1 };
  s4 -> s7 [70, 70] { R14310 += 1, R14266 += 1, R14202 += 1, R14203 += 1, R14204 += 1 };
  s4 -> s8 [70, 70] { R14310 += 1, R14266 += 1, R14202 += 1, R14204 += 1, R14205 += 1 };
  s4 -> s9 [70, 70] { R14310 += 1, R14266 += 1, R14201 += 1, R14202 += 1 };
  s4 -> s10 [70, 70] { R14310 += 1, R14266 += 1, R14201 += 1, R14202 += 1 };
  s4 -> s1 [71, 65535] { R14310 += 1, R14266 += 1, R14202 += 1, R14204 += 1, R14205 += 1 };
  s4 -> s2 [71, 65535] { R14310 += 1, R14266 += 1, R14201 += 1, R14202 += 1 };
  s4 -> s3 [71, 65535] { R14310 += 1, R14266 += 1, R14202 += 1, R14203 += 1, R14204 += 1 };
  s5 -> s5 [0, 65535] { R14310 += 1, R14266 += 1, R14202 += 1, R14204 += 1, R14205 += 1 };
  s5 -> s11 [0, 65535] { R14310 += 1, R14266 += 1 };
  s5 -> s14 [0, 65535] { R14310 += 1, R14266 += 1, R14202 += 1 };
  s6 -> s5 [0, 65535] { R14310 += 1, R14266 += 1, R14202 += 1, R14204 += 1, R14205 += 1 };
  s6 -> s6 [0, 65535] { R14310 += 1, R14266 += 1, R14202 += 1, R14203 += 1, R14204 += 1 };
  s6 -> s11 [0, 65535] { R14310 += 1, R14266 += 1 };
  s10 -> s5 [0, 65535] { R14310 += 1, R14266 += 1, R14202 += 1, R14204 += 1, R14205 += 1 };
  s10 -> s6 [0, 65535] { R14310 += 1, R14266 += 1, R14202 += 1, R14203 += 1, R14204 += 1 };
  s10 -> s10 [0, 65535] { R14310 += 1, R14266 += 1, R14201 += 1, R14202 += 1 };
  s11 -> s11 [0, 65535] { R14310 += 1, R14266 += 1 };
  s11 -> s12 [0, 65535] { R14310 += 1 };
  s11 -> s13 [0, 65535];
  s12 -> s12 [0, 65535] { R14310 += 1 };
  s12 -> s13 [0, 65535];
  s13 -> s13 [0, 65535];
  s14 -> s11 [0, 65535] { R14310 += 1, R14266 += 1 };
  s14 -> s14 [0, 65535] { R14310 += 1, R14266 += 1, R14202 += 1 };
  s15 -> s15 [0, 69] { R14310 += 1, R14266 += 1 };
  s15 -> s15 [0, 65535] { R14310 += 1 };
  s15 -> s13 [0, 65535];
  s15 -> s11 [70, 70] { R14310 += 1, R14266 += 1 };
  s15 -> s16 [70, 70] { R14310 += 1, R14266 += 1 };
  s15 -> s15 [71, 65535] { R14310 += 1, R14266 += 1 };
  s16 -> s16 [0, 65535] { R14310 += 1 };
  s16 -> s13 [0, 65535];
  s17 -> s17 [0, 69] { R14310 += 1, R14266 += 1, R14202 += 1 };
  s17 -> s15 [0, 69] { R14310 += 1, R14266 += 1 };
  s17 -> s11 [70, 70] { R14310 += 1, R14266 += 1 };
  s17 -> s16 [70, 70] { R14310 += 1, R14266 += 1 };
  s17 -> s18 [70, 70] { R14310 += 1, R14266 += 1, R14202 += 1 };
  s17 -> s14 [70, 70] { R14310 += 1, R14266 += 1, R14202 += 1 };
  s17 -> s17 [71, 65535] { R14310 += 1, R14266 += 1, R14202 += 1 };
  s17 -> s15 [71, 65535] { R14310 += 1, R14266 += 1 };
  accepting s16, s12, s13, s15, s11;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [102, 102];
  accepting s1;
};
};
constraint R3 = R14310 && R23 - R14310 = -1 && R24 = R14310 && R25 - R14310 = -1 && R26 = R14310 && R27 = 0 && R28 = 1 && R29 = 0 && R30 = 1 && R45 + R84 + R83 + -1*R14088 + -1*R14084 - R66 = 0 && R49 + R89 + R87 = 0 && R50 + R90 + R88 + -1*R14088 + -1*R14084 - R66 = 0 && R55 + R13518 + R13515 + -1*R14090 + -1*R14086 - R68 = 0 && R65 + R14087 + R14083 = 0 && R67 + R14089 + R14085 = 0 && R14251 = 0 && R14252 = 0 && R14257 = 0 && R14258 = 0 && R14259 = 0 && R14260 = 0 && R14263 = 0 && R14264 = 0 && R14265 = 0 && R14266 = 0 && R14267 = 0 && R14268 = R14310 && R14269 = 0 && R14270 = R14310 && R14271 = 0 && R14272 = R14310 && R14273 = 0 && R14274 = R14310 && R14275 = 0 && R14276 = R14310 && R14277 = 0 && R14278 = R14310 && R14279 = 0 && R14280 = R14310 && R14281 = 0 && R14282 = R14310 && R14283 = 0 && R14284 = R14310 && R14285 = 0 && R14286 = R14310 && R14287 = 0 && R14288 = R14310 && R14289 = 0 && R14290 = R14310 && R14291 = 0 && R14292 = R14310 && R14293 = 0 && R14294 = R14310 && R14295 = 0 && R14296 = R14310 && R14297 = 0 && R14298 = R14310 && R14299 = 0 && R14300 = R14310 && R14301 = 0 && R14302 = R14310 && R14303 = 0 && R14304 = R14310 && R14305 = 0 && R14306 = R14310 && R14307 = 0 && R14308 = R14310 && R14309 = 0 && -1 < R2 && R12 < 1 && R15 < 1 && R16 < 1 && R47 + R86 + R85 < 1 && R61 + R13524 + R13521 < 1 && -1*R14088 + -1*R14084 - R66 < 1 && -1*R14090 + -1*R14086 - R68 < 1 && 0 < R14310 && (R2 != 0 || R20 = 0 || (R14211 = 0 && R14212 = 0)) && (R2 != 0 || R20 = 0 || (R14213 = 0 && R14214 = 0)) && (R2 != 0 || R20 = 0 || (R14215 = 0 && R14216 = 0)) && (R2 != 0 || R20 = 0 || (R14217 = 0 && R14218 = 0)) && (R2 != 0 || R20 = 0 || (R14219 = 0 && R14220 = 0)) && (R2 != 0 || R20 = 0 || (R14221 = 0 && R14222 = 0)) && (R2 != 0 || R20 = 0 || (R14223 = 0 && R14224 = 0)) && (R2 != 0 || R20 = 0 || (R14225 = 0 && R14226 = 0)) && (R2 != 0 || R20 = 0 || (R14227 = 0 && R14228 = 0)) && (R2 != 0 || R20 = 0 || (R14229 = 0 && R14230 = 0)) && (R53 + R13516 + R13513 != 0 || R54 + R13517 + R13514 + -1*R14088 + -1*R14084 - R66 = 0 || R66 + R14088 + R14084 < 1) && (R59 + R13522 + R13519 != 0 || R60 + R13523 + R13520 + -1*R14088 + -1*R14084 - R66 = 0 || R66 + R14088 + R14084 < 1) && (R66 + R14088 + R14084 != 0 || ((R53 + R13516 + R13513 != 0 || R54 + R13517 + R13514 = 0 || R68 + R14090 + R14086 < 1) && (R53 + R13516 + R13513 = 0 || R68 + R14090 + R14086 < 1))) && (R66 + R14088 + R14084 != 0 || ((R59 + R13522 + R13519 != 0 || R60 + R13523 + R13520 = 0 || R68 + R14090 + R14086 < 1) && (R59 + R13522 + R13519 = 0 || R68 + R14090 + R14086 < 1))) && (R66 + R14088 + R14084 != 0 || ((R73 + R14206 + R14201 != 0 || R74 + R14207 + R14202 = 0 || R68 + R14090 + R14086 < 1) && (R73 + R14206 + R14201 = 0 || R68 + R14090 + R14086 < 1))) && (R68 + R14090 + R14086 != 0 || R77 + R14210 + R14205 = 0 || (R75 + R14208 + R14203 = 0 && R76 + R14209 + R14204 = 0)) && (R73 + R14206 + R14201 != 0 || R66 + R14088 + R14084 + -1*R14207 + -1*R14202 - R74 = 0 || R66 + R14088 + R14084 < 1) && (R75 + R14208 + R14203 != 0 || R68 + R14090 + R14086 + -1*R14209 + -1*R14204 - R76 = 0 || R68 + R14090 + R14086 < 1) && (R14211 != 0 || R2 = R14212 || R2 < 1) && (R14213 != 0 || R2 = R14214 || R2 < 1) && (R14215 != 0 || R2 = R14216 || R2 < 1) && (R14217 != 0 || R2 = R14218 || R2 < 1) && (R14219 != 0 || R2 = R14220 || R2 < 1) && (R14221 != 0 || R2 = R14222 || R2 < 1) && (R14223 != 0 || R2 = R14224 || R2 < 1) && (R14225 != 0 || R2 = R14226 || R2 < 1) && (R14227 != 0 || R2 = R14228 || R2 < 1) && (R14229 != 0 || R2 = R14230 || R2 < 1) && (R21 = 0 || (R14249 = 0 && R14250 = 0)) && (R21 = 0 || (R14253 = 0 && R14254 = 0)) && (R21 = 0 || (R14255 = 0 && R14256 = 0)) && (R21 = 0 || (R14261 = 0 && R14262 = 0)) && (R22 = 0 || (R14231 = 0 && R14232 = 0)) && (R22 = 0 || (R14233 = 0 && R14234 = 0)) && (R22 = 0 || (R14235 = 0 && R14236 = 0)) && (R22 = 0 || (R14237 = 0 && R14238 = 0)) && (R22 = 0 || (R14239 = 0 && R14240 = 0)) && (R22 = 0 || (R14241 = 0 && R14242 = 0)) && (R22 = 0 || (R14243 = 0 && R14244 = 0)) && (R22 = 0 || (R14245 = 0 && R14246 = 0)) && (R22 = 0 || (R14247 = 0 && R14248 = 0)) && (R53 + R13516 + R13513 = 0 || R66 + R14088 + R14084 < 1) && (R59 + R13522 + R13519 = 0 || R66 + R14088 + R14084 < 1) && (R73 + R14206 + R14201 = 0 || R66 + R14088 + R14084 < 1) && (R75 + R14208 + R14203 = 0 || R68 + R14090 + R14086 < 1) && (R14211 = 0 || R2 < 1) && (R14213 = 0 || R2 < 1) && (R14215 = 0 || R2 < 1) && (R14217 = 0 || R2 < 1) && (R14219 = 0 || R2 < 1) && (R14221 = 0 || R2 < 1) && (R14223 = 0 || R2 < 1) && (R14225 = 0 || R2 < 1) && (R14227 = 0 || R2 < 1) && (R14229 = 0 || R2 < 1);
// End of Parikh automata intersection problem
