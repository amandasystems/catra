// Parikh automata intersection problem, generated by OSTRICH+
counter int R10159, R10160, R10161, R10162, R10163, R10164, R10165, R10166, R10167, R10168, R10169, R10170, R10171, R10172, R10503, R10504, R10505, R10506, R10507, R10508, R10509, R10510, R10511, R10512, R10513, R10514, R10515, R10516, R10517, R10518, R10519, R10520, R10521, R10522, R10523, R10524, R10525, R10526, R10527, R10528, R10529, R10530, R10531, R10532, R10533, R10534, R10535, R10536, R10537, R10538, R10539, R10540, R10541, R10542, R10543, R10544, R10545, R10546, R10547, R10548, R10549, R10550, R10551, R10552, R10553, R10554, R10555, R10556, R10557, R10558, R10559, R10560, R10561, R10562, R10563, R10564, R10565, R10566, R10567, R10568, R10569, R10570, R10571, R10572, R10573, R10574, R10575, R10576, R10577, R10578, R10579, R10580, R10581, R10582, R10583, R10584, R10585, R10586, R10587, R10588, R10589, R10590, R10591, R10592, R10593, R10594, R10595, R10596, R10597, R10598, R10599, R10600, R10601, R10602, R10603, R10604, R10605, R10606, R10607, R10608, R10609, R10610, R10611, R10612, R12, R15, R16, R2, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R4, R45, R47, R49, R5, R50, R53, R54, R55, R59, R60, R61, R65, R66, R67, R68, R73, R74, R75, R76, R77, R83, R84, R85, R86, R87, R88, R89, R90, R91, R92, R93, R94, R95, R96;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [70, 70];
  s0 -> s0 [71, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [70, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R15 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 69];
  s0 -> s0 [0, 65535] { R16 += 1 };
  s0 -> s2 [70, 70];
  s0 -> s1 [71, 65535];
  s1 -> s1 [0, 69];
  s1 -> s2 [70, 70];
  s1 -> s1 [71, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R24 += 1 };
  s0 -> s0 [0, 65535] { R23 += 1, R24 += 1 };
  s0 -> s2 [9, 13] { R24 += 1 };
  s0 -> s1 [14, 31] { R24 += 1 };
  s0 -> s2 [32, 32] { R24 += 1 };
  s0 -> s1 [33, 65535] { R24 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R24 += 1 };
  s2 -> s1 [0, 65535] { R24 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R25 += 1, R26 += 1 };
  s1 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R28 += 1 };
  s0 -> s0 [0, 65535] { R27 += 1, R28 += 1 };
  s0 -> s2 [9, 13] { R28 += 1 };
  s0 -> s1 [14, 31] { R28 += 1 };
  s0 -> s2 [32, 32] { R28 += 1 };
  s0 -> s1 [33, 65535] { R28 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R28 += 1 };
  s2 -> s1 [0, 65535] { R28 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R29 += 1, R30 += 1 };
  s1 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R10534 += 1, R22 += 1 };
  s0 -> s0 [0, 65535] { R10533 += 1, R10534 += 1 };
  s1 -> s1 [0, 65535] { R10534 += 1, R22 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 69] { R10536 += 1 };
  s0 -> s0 [0, 65535] { R10535 += 1, R10536 += 1 };
  s0 -> s2 [70, 70] { R10536 += 1 };
  s0 -> s3 [70, 70] { R10536 += 1 };
  s0 -> s1 [76, 65535] { R10536 += 1 };
  s1 -> s1 [0, 69] { R10536 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R10536 += 1 };
  s1 -> s3 [70, 70] { R10536 += 1 };
  s1 -> s1 [76, 65535] { R10536 += 1 };
  s2 -> s2 [0, 70] { R10536 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [76, 65535] { R10536 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 69] { R10538 += 1, R45 += 1 };
  s0 -> s0 [0, 65535] { R10537 += 1, R10538 += 1 };
  s0 -> s2 [70, 70] { R10538 += 1, R45 += 1 };
  s0 -> s3 [70, 70] { R10538 += 1, R45 += 1 };
  s0 -> s1 [71, 65535] { R10538 += 1, R45 += 1 };
  s1 -> s1 [0, 69] { R10538 += 1, R45 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R10538 += 1, R45 += 1 };
  s1 -> s3 [70, 70] { R10538 += 1, R45 += 1 };
  s1 -> s1 [71, 65535] { R10538 += 1, R45 += 1 };
  s2 -> s2 [0, 65535] { R10538 += 1, R45 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 69] { R10540 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R10539 += 1, R10540 += 1 };
  s0 -> s2 [70, 70] { R10540 += 1, R47 += 1 };
  s0 -> s3 [70, 70] { R10540 += 1, R47 += 1 };
  s0 -> s1 [71, 65535] { R10540 += 1, R47 += 1 };
  s1 -> s1 [0, 69] { R10540 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R10540 += 1, R47 += 1 };
  s1 -> s3 [70, 70] { R10540 += 1, R47 += 1 };
  s1 -> s1 [71, 65535] { R10540 += 1, R47 += 1 };
  s2 -> s2 [0, 65535] { R10540 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 69] { R10542 += 1, R49 += 1, R50 += 1 };
  s0 -> s0 [0, 65535] { R10541 += 1, R10542 += 1 };
  s0 -> s2 [70, 70] { R10542 += 1, R49 += 1, R50 += 1 };
  s0 -> s3 [70, 70] { R10542 += 1, R49 += 1, R50 += 1 };
  s0 -> s1 [71, 65535] { R10542 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 69] { R10542 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R10542 += 1, R49 += 1, R50 += 1 };
  s1 -> s3 [70, 70] { R10542 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [71, 65535] { R10542 += 1, R49 += 1, R50 += 1 };
  s2 -> s2 [0, 65535] { R10542 += 1, R49 += 1, R50 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 69] { R10544 += 1, R53 += 1, R54 += 1 };
  s0 -> s0 [0, 65535] { R10543 += 1, R10544 += 1 };
  s0 -> s2 [70, 70] { R10544 += 1, R53 += 1, R54 += 1 };
  s0 -> s3 [70, 70] { R10544 += 1, R53 += 1, R54 += 1 };
  s0 -> s1 [71, 65535] { R10544 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 69] { R10544 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R10544 += 1, R53 += 1, R54 += 1 };
  s1 -> s3 [70, 70] { R10544 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [71, 65535] { R10544 += 1, R53 += 1, R54 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10544 += 1, R53 += 1, R54 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 69] { R10546 += 1, R59 += 1, R60 += 1 };
  s0 -> s0 [0, 65535] { R10545 += 1, R10546 += 1 };
  s0 -> s2 [70, 70] { R10546 += 1, R59 += 1, R60 += 1 };
  s0 -> s3 [70, 70] { R10546 += 1, R59 += 1, R60 += 1 };
  s0 -> s1 [71, 65535] { R10546 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 69] { R10546 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R10546 += 1, R59 += 1, R60 += 1 };
  s1 -> s3 [70, 70] { R10546 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [71, 65535] { R10546 += 1, R59 += 1, R60 += 1 };
  s2 -> s2 [0, 65535] { R10546 += 1, R59 += 1, R60 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 69] { R10548 += 1, R65 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R10547 += 1, R10548 += 1 };
  s0 -> s2 [70, 70] { R10548 += 1, R65 += 1, R66 += 1 };
  s0 -> s3 [70, 70] { R10548 += 1, R65 += 1, R66 += 1 };
  s0 -> s1 [71, 65535] { R10548 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 69] { R10548 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R10548 += 1, R65 += 1, R66 += 1 };
  s1 -> s3 [70, 70] { R10548 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [71, 65535] { R10548 += 1, R65 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R10548 += 1, R65 += 1, R66 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 69] { R10550 += 1, R73 += 1, R74 += 1 };
  s0 -> s0 [0, 65535] { R10549 += 1, R10550 += 1 };
  s0 -> s2 [70, 70] { R10550 += 1, R73 += 1, R74 += 1 };
  s0 -> s3 [70, 70] { R10550 += 1, R73 += 1, R74 += 1 };
  s0 -> s1 [71, 65535] { R10550 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 69] { R10550 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R10550 += 1, R73 += 1, R74 += 1 };
  s1 -> s3 [70, 70] { R10550 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [71, 65535] { R10550 += 1, R73 += 1, R74 += 1 };
  s2 -> s2 [0, 65535] { R10550 += 1, R73 += 1, R74 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 69] { R10570 += 1 };
  s0 -> s0 [0, 65535] { R10569 += 1, R10570 += 1 };
  s0 -> s2 [70, 70] { R10570 += 1 };
  s0 -> s1 [71, 65535] { R10570 += 1 };
  s1 -> s1 [0, 69] { R10570 += 1 };
  s1 -> s2 [70, 70] { R10570 += 1 };
  s1 -> s1 [71, 65535] { R10570 += 1 };
  s2 -> s2 [0, 65535] { R10570 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R10571 += 1, R10572 += 1 };
  s0 -> s1 [0, 65535] { R10572 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R10572 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 69] { R10574 += 1 };
  s0 -> s0 [0, 65535] { R10573 += 1, R10574 += 1 };
  s0 -> s2 [0, 65535] { R10574 += 1, R12 += 1 };
  s0 -> s3 [70, 70] { R10574 += 1 };
  s0 -> s1 [71, 65535] { R10574 += 1 };
  s1 -> s1 [0, 69] { R10574 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [70, 70] { R10574 += 1 };
  s1 -> s1 [71, 65535] { R10574 += 1 };
  s2 -> s1 [0, 69] { R10574 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10574 += 1, R12 += 1 };
  s2 -> s3 [70, 70] { R10574 += 1 };
  s2 -> s1 [71, 65535] { R10574 += 1 };
  s3 -> s3 [0, 65535] { R10574 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 69] { R10576 += 1, R10514 += 1 };
  s0 -> s2 [0, 65535] { R10576 += 1, R10513 += 1, R10514 += 1 };
  s0 -> s0 [0, 65535] { R10575 += 1, R10576 += 1 };
  s0 -> s1 [71, 65535] { R10576 += 1, R10514 += 1 };
  s1 -> s1 [0, 69] { R10576 += 1, R10514 += 1 };
  s1 -> s1 [0, 65535] { R10576 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [71, 65535] { R10576 += 1, R10514 += 1 };
  s2 -> s1 [0, 69] { R10576 += 1, R10514 += 1 };
  s2 -> s2 [0, 65535] { R10576 += 1, R10513 += 1, R10514 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [71, 65535] { R10576 += 1, R10514 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R10578 += 1, R10516 += 1, R20 += 1 };
  s0 -> s2 [0, 65535] { R10578 += 1, R10515 += 1, R10516 += 1 };
  s0 -> s0 [0, 65535] { R10577 += 1, R10578 += 1 };
  s1 -> s1 [0, 65535] { R10578 += 1, R10516 += 1, R20 += 1 };
  s1 -> s4 [0, 65535] { R10578 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10578 += 1, R10516 += 1, R20 += 1 };
  s2 -> s2 [0, 65535] { R10578 += 1, R10515 += 1, R10516 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10578 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 70] { R10580 += 1, R10518 += 1 };
  s0 -> s0 [0, 65535] { R10579 += 1, R10580 += 1 };
  s0 -> s2 [0, 65535] { R10580 += 1, R10517 += 1, R10518 += 1 };
  s0 -> s1 [75, 65535] { R10580 += 1, R10518 += 1 };
  s1 -> s1 [0, 70] { R10580 += 1, R10518 += 1 };
  s1 -> s1 [0, 65535] { R10580 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [75, 65535] { R10580 += 1, R10518 += 1 };
  s2 -> s1 [0, 70] { R10580 += 1, R10518 += 1 };
  s2 -> s2 [0, 65535] { R10580 += 1, R10517 += 1, R10518 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [75, 65535] { R10580 += 1, R10518 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s0 [0, 65535] { R10581 += 1, R10582 += 1 };
  s0 -> s1 [0, 65535] { R10582 += 1, R10520 += 1, R84 += 1 };
  s0 -> s2 [0, 65535] { R10582 += 1, R10519 += 1, R10520 += 1 };
  s1 -> s4 [0, 65535] { R10582 += 1 };
  s1 -> s1 [0, 65535] { R10582 += 1, R10520 += 1, R84 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10582 += 1, R10520 += 1, R84 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10582 += 1, R10519 += 1, R10520 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10582 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 74] { R10584 += 1, R10522 += 1 };
  s0 -> s2 [0, 65535] { R10584 += 1, R10521 += 1, R10522 += 1 };
  s0 -> s0 [0, 65535] { R10583 += 1, R10584 += 1 };
  s0 -> s3 [0, 65535] { R10584 += 1, R10522 += 1, R86 += 1 };
  s0 -> s1 [76, 65535] { R10584 += 1, R10522 += 1 };
  s1 -> s1 [0, 74] { R10584 += 1, R10522 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R10584 += 1 };
  s1 -> s1 [76, 65535] { R10584 += 1, R10522 += 1 };
  s2 -> s1 [0, 74] { R10584 += 1, R10522 += 1 };
  s2 -> s2 [0, 65535] { R10584 += 1, R10521 += 1, R10522 += 1 };
  s2 -> s3 [0, 65535] { R10584 += 1, R10522 += 1, R86 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [76, 65535] { R10584 += 1, R10522 += 1 };
  s3 -> s1 [0, 74] { R10584 += 1, R10522 += 1 };
  s3 -> s3 [0, 65535] { R10584 += 1, R10522 += 1, R86 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R10584 += 1 };
  s3 -> s1 [76, 65535] { R10584 += 1, R10522 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10584 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 65535] { R10586 += 1, R10523 += 1, R10524 += 1 };
  s0 -> s2 [0, 65535] { R10586 += 1, R10524 += 1 };
  s0 -> s3 [0, 65535] { R10586 += 1, R10524 += 1, R90 += 1 };
  s0 -> s0 [0, 65535] { R10585 += 1, R10586 += 1 };
  s1 -> s1 [0, 65535] { R10586 += 1, R10523 += 1, R10524 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R10586 += 1, R10524 += 1 };
  s1 -> s3 [0, 65535] { R10586 += 1, R10524 += 1, R90 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10586 += 1, R10524 += 1 };
  s2 -> s5 [0, 65535] { R10586 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R10586 += 1, R10524 += 1 };
  s3 -> s3 [0, 65535] { R10586 += 1, R10524 += 1, R90 += 1 };
  s3 -> s5 [0, 65535] { R10586 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10586 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R10588 += 1, R10526 += 1, R95 += 1, R96 += 1 };
  s0 -> s0 [0, 65535] { R10587 += 1, R10588 += 1 };
  s0 -> s2 [0, 65535] { R10588 += 1, R10525 += 1, R10526 += 1 };
  s0 -> s3 [0, 65535] { R10588 += 1, R10526 += 1, R94 += 1, R95 += 1 };
  s1 -> s1 [0, 65535] { R10588 += 1, R10526 += 1, R95 += 1, R96 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R10588 += 1 };
  s1 -> s6 [0, 65535] { R10588 += 1, R10526 += 1 };
  s2 -> s1 [0, 65535] { R10588 += 1, R10526 += 1, R95 += 1, R96 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10588 += 1, R10525 += 1, R10526 += 1 };
  s2 -> s3 [0, 65535] { R10588 += 1, R10526 += 1, R94 += 1, R95 += 1 };
  s3 -> s1 [0, 65535] { R10588 += 1, R10526 += 1, R95 += 1, R96 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R10588 += 1 };
  s3 -> s3 [0, 65535] { R10588 += 1, R10526 += 1, R94 += 1, R95 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10588 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R10588 += 1 };
  s6 -> s6 [0, 65535] { R10588 += 1, R10526 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s0 [0, 65535] { R10589 += 1, R10590 += 1 };
  s0 -> s1 [0, 65535] { R10590 += 1, R10528 += 1 };
  s0 -> s2 [0, 65535] { R10590 += 1, R10527 += 1, R10528 += 1 };
  s1 -> s1 [0, 65535] { R10590 += 1, R10528 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R10590 += 1 };
  s2 -> s1 [0, 65535] { R10590 += 1, R10528 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10590 += 1, R10527 += 1, R10528 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10590 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R10592 += 1, R10529 += 1, R10530 += 1 };
  s0 -> s0 [0, 65535] { R10591 += 1, R10592 += 1 };
  s0 -> s2 [0, 65535] { R10592 += 1, R10530 += 1 };
  s0 -> s3 [0, 65535] { R10592 += 1, R10530 += 1, R10170 += 1, R10172 += 1 };
  s0 -> s4 [0, 65535] { R10592 += 1, R10530 += 1, R10170 += 1 };
  s1 -> s1 [0, 65535] { R10592 += 1, R10529 += 1, R10530 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s2 [0, 65535] { R10592 += 1, R10530 += 1 };
  s1 -> s3 [0, 65535] { R10592 += 1, R10530 += 1, R10170 += 1, R10172 += 1 };
  s1 -> s4 [0, 65535] { R10592 += 1, R10530 += 1, R10170 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10592 += 1, R10530 += 1 };
  s2 -> s6 [0, 65535] { R10592 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R10592 += 1, R10530 += 1 };
  s3 -> s3 [0, 65535] { R10592 += 1, R10530 += 1, R10170 += 1, R10172 += 1 };
  s3 -> s4 [0, 65535] { R10592 += 1, R10530 += 1, R10170 += 1 };
  s3 -> s6 [0, 65535] { R10592 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s2 [0, 65535] { R10592 += 1, R10530 += 1 };
  s4 -> s4 [0, 65535] { R10592 += 1, R10530 += 1, R10170 += 1 };
  s4 -> s6 [0, 65535] { R10592 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10592 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 65535] { R10594 += 1, R10532 += 1, R10509 += 1 };
  s0 -> s2 [0, 65535] { R10594 += 1, R10532 += 1 };
  s0 -> s3 [0, 65535] { R10594 += 1, R10532 += 1, R10509 += 1, R10511 += 1, R10512 += 1 };
  s0 -> s0 [0, 65535] { R10593 += 1, R10594 += 1 };
  s0 -> s4 [0, 65535] { R10594 += 1, R10531 += 1, R10532 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10594 += 1, R10532 += 1, R10509 += 1 };
  s1 -> s2 [0, 65535] { R10594 += 1, R10532 += 1 };
  s1 -> s6 [0, 65535] { R10594 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10594 += 1, R10532 += 1 };
  s2 -> s6 [0, 65535] { R10594 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [0, 65535] { R10594 += 1, R10532 += 1, R10509 += 1 };
  s3 -> s2 [0, 65535] { R10594 += 1, R10532 += 1 };
  s3 -> s3 [0, 65535] { R10594 += 1, R10532 += 1, R10509 += 1, R10511 += 1, R10512 += 1 };
  s3 -> s6 [0, 65535] { R10594 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s1 [0, 65535] { R10594 += 1, R10532 += 1, R10509 += 1 };
  s4 -> s2 [0, 65535] { R10594 += 1, R10532 += 1 };
  s4 -> s3 [0, 65535] { R10594 += 1, R10532 += 1, R10509 += 1, R10511 += 1, R10512 += 1 };
  s4 -> s4 [0, 65535] { R10594 += 1, R10531 += 1, R10532 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10594 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R10596 += 1, R10552 += 1, R21 += 1 };
  s0 -> s0 [0, 65535] { R10595 += 1, R10596 += 1 };
  s0 -> s2 [0, 65535] { R10596 += 1, R10551 += 1, R10552 += 1 };
  s1 -> s1 [0, 65535] { R10596 += 1, R10552 += 1, R21 += 1 };
  s1 -> s4 [0, 65535] { R10596 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10596 += 1, R10552 += 1, R21 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10596 += 1, R10551 += 1, R10552 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10596 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 69] { R10598 += 1, R10554 += 1 };
  s0 -> s2 [0, 65535] { R10598 += 1, R10553 += 1, R10554 += 1 };
  s0 -> s0 [0, 65535] { R10597 += 1, R10598 += 1 };
  s0 -> s3 [70, 70] { R10598 += 1, R10554 += 1 };
  s0 -> s4 [70, 70] { R10598 += 1, R10554 += 1 };
  s0 -> s5 [75, 75] { R10598 += 1, R10554 += 1 };
  s0 -> s1 [76, 65535] { R10598 += 1, R10554 += 1 };
  s1 -> s1 [0, 69] { R10598 += 1, R10554 += 1 };
  s1 -> s3 [70, 70] { R10598 += 1, R10554 += 1 };
  s1 -> s4 [70, 70] { R10598 += 1, R10554 += 1 };
  s1 -> s5 [75, 75] { R10598 += 1, R10554 += 1 };
  s1 -> s1 [76, 65535] { R10598 += 1, R10554 += 1 };
  s2 -> s1 [0, 69] { R10598 += 1, R10554 += 1 };
  s2 -> s2 [0, 65535] { R10598 += 1, R10553 += 1, R10554 += 1 };
  s2 -> s3 [70, 70] { R10598 += 1, R10554 += 1 };
  s2 -> s4 [70, 70] { R10598 += 1, R10554 += 1 };
  s2 -> s5 [75, 75] { R10598 += 1, R10554 += 1 };
  s2 -> s1 [76, 65535] { R10598 += 1, R10554 += 1 };
  s3 -> s3 [0, 70] { R10598 += 1, R10554 += 1 };
  s3 -> s8 [75, 75] { R10598 += 1, R10554 += 1 };
  s3 -> s3 [76, 65535] { R10598 += 1, R10554 += 1 };
  s5 -> s5 [0, 69] { R10598 += 1, R10554 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R10598 += 1 };
  s5 -> s7 [70, 70] { R10598 += 1, R10554 += 1 };
  s5 -> s8 [70, 70] { R10598 += 1, R10554 += 1 };
  s5 -> s5 [75, 65535] { R10598 += 1, R10554 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R10598 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 70] { R10598 += 1, R10554 += 1 };
  s8 -> s8 [0, 65535] { R10598 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [75, 65535] { R10598 += 1, R10554 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 69] { R10600 += 1, R10556 += 1, R83 += 1 };
  s0 -> s0 [0, 65535] { R10599 += 1, R10600 += 1 };
  s0 -> s2 [0, 65535] { R10600 += 1, R10555 += 1, R10556 += 1 };
  s0 -> s3 [70, 70] { R10600 += 1, R10556 += 1, R83 += 1 };
  s0 -> s4 [70, 70] { R10600 += 1, R10556 += 1, R83 += 1 };
  s0 -> s1 [71, 65535] { R10600 += 1, R10556 += 1, R83 += 1 };
  s1 -> s1 [0, 69] { R10600 += 1, R10556 += 1, R83 += 1 };
  s1 -> s1 [0, 65535] { R10600 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [70, 70] { R10600 += 1, R10556 += 1, R83 += 1 };
  s1 -> s4 [70, 70] { R10600 += 1, R10556 += 1, R83 += 1 };
  s1 -> s1 [71, 65535] { R10600 += 1, R10556 += 1, R83 += 1 };
  s2 -> s1 [0, 69] { R10600 += 1, R10556 += 1, R83 += 1 };
  s2 -> s2 [0, 65535] { R10600 += 1, R10555 += 1, R10556 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [70, 70] { R10600 += 1, R10556 += 1, R83 += 1 };
  s2 -> s4 [70, 70] { R10600 += 1, R10556 += 1, R83 += 1 };
  s2 -> s1 [71, 65535] { R10600 += 1, R10556 += 1, R83 += 1 };
  s3 -> s3 [0, 65535] { R10600 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R10600 += 1 };
  s4 -> s4 [0, 65535] { R10600 += 1, R10556 += 1, R83 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R10600 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 69] { R10602 += 1, R10558 += 1, R85 += 1 };
  s0 -> s0 [0, 65535] { R10601 += 1, R10602 += 1 };
  s0 -> s2 [0, 65535] { R10602 += 1, R10557 += 1, R10558 += 1 };
  s0 -> s3 [70, 70] { R10602 += 1, R10558 += 1, R85 += 1 };
  s0 -> s4 [70, 70] { R10602 += 1, R10558 += 1, R85 += 1 };
  s0 -> s1 [71, 65535] { R10602 += 1, R10558 += 1, R85 += 1 };
  s1 -> s1 [0, 69] { R10602 += 1, R10558 += 1, R85 += 1 };
  s1 -> s1 [0, 65535] { R10602 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [70, 70] { R10602 += 1, R10558 += 1, R85 += 1 };
  s1 -> s4 [70, 70] { R10602 += 1, R10558 += 1, R85 += 1 };
  s1 -> s1 [71, 65535] { R10602 += 1, R10558 += 1, R85 += 1 };
  s2 -> s1 [0, 69] { R10602 += 1, R10558 += 1, R85 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10602 += 1, R10557 += 1, R10558 += 1 };
  s2 -> s3 [70, 70] { R10602 += 1, R10558 += 1, R85 += 1 };
  s2 -> s4 [70, 70] { R10602 += 1, R10558 += 1, R85 += 1 };
  s2 -> s1 [71, 65535] { R10602 += 1, R10558 += 1, R85 += 1 };
  s3 -> s3 [0, 65535] { R10602 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R10602 += 1 };
  s4 -> s4 [0, 65535] { R10602 += 1, R10558 += 1, R85 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10602 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 69] { R10604 += 1, R10560 += 1, R87 += 1, R88 += 1 };
  s0 -> s2 [0, 69] { R10604 += 1, R10560 += 1, R88 += 1 };
  s0 -> s3 [0, 65535] { R10604 += 1, R10559 += 1, R10560 += 1 };
  s0 -> s0 [0, 65535] { R10603 += 1, R10604 += 1 };
  s0 -> s4 [70, 70] { R10604 += 1, R10560 += 1, R88 += 1 };
  s0 -> s5 [70, 70] { R10604 += 1, R10560 += 1, R88 += 1 };
  s0 -> s6 [70, 70] { R10604 += 1, R10560 += 1, R87 += 1, R88 += 1 };
  s0 -> s7 [70, 70] { R10604 += 1, R10560 += 1, R87 += 1, R88 += 1 };
  s0 -> s2 [71, 74] { R10604 += 1, R10560 += 1, R88 += 1 };
  s0 -> s1 [71, 65535] { R10604 += 1, R10560 += 1, R87 += 1, R88 += 1 };
  s0 -> s8 [75, 75] { R10604 += 1, R10560 += 1, R88 += 1 };
  s0 -> s2 [76, 65535] { R10604 += 1, R10560 += 1, R88 += 1 };
  s1 -> s1 [0, 69] { R10604 += 1, R10560 += 1, R87 += 1, R88 += 1 };
  s1 -> s2 [0, 69] { R10604 += 1, R10560 += 1, R88 += 1 };
  s1 -> s4 [70, 70] { R10604 += 1, R10560 += 1, R88 += 1 };
  s1 -> s5 [70, 70] { R10604 += 1, R10560 += 1, R88 += 1 };
  s1 -> s6 [70, 70] { R10604 += 1, R10560 += 1, R87 += 1, R88 += 1 };
  s1 -> s7 [70, 70] { R10604 += 1, R10560 += 1, R87 += 1, R88 += 1 };
  s1 -> s2 [71, 74] { R10604 += 1, R10560 += 1, R88 += 1 };
  s1 -> s1 [71, 65535] { R10604 += 1, R10560 += 1, R87 += 1, R88 += 1 };
  s1 -> s8 [75, 75] { R10604 += 1, R10560 += 1, R88 += 1 };
  s1 -> s2 [76, 65535] { R10604 += 1, R10560 += 1, R88 += 1 };
  s2 -> s2 [0, 69] { R10604 += 1, R10560 += 1, R88 += 1 };
  s2 -> s4 [70, 70] { R10604 += 1, R10560 += 1, R88 += 1 };
  s2 -> s5 [70, 70] { R10604 += 1, R10560 += 1, R88 += 1 };
  s2 -> s2 [71, 74] { R10604 += 1, R10560 += 1, R88 += 1 };
  s2 -> s8 [75, 75] { R10604 += 1, R10560 += 1, R88 += 1 };
  s2 -> s2 [76, 65535] { R10604 += 1, R10560 += 1, R88 += 1 };
  s3 -> s1 [0, 69] { R10604 += 1, R10560 += 1, R87 += 1, R88 += 1 };
  s3 -> s2 [0, 69] { R10604 += 1, R10560 += 1, R88 += 1 };
  s3 -> s3 [0, 65535] { R10604 += 1, R10559 += 1, R10560 += 1 };
  s3 -> s4 [70, 70] { R10604 += 1, R10560 += 1, R88 += 1 };
  s3 -> s5 [70, 70] { R10604 += 1, R10560 += 1, R88 += 1 };
  s3 -> s6 [70, 70] { R10604 += 1, R10560 += 1, R87 += 1, R88 += 1 };
  s3 -> s7 [70, 70] { R10604 += 1, R10560 += 1, R87 += 1, R88 += 1 };
  s3 -> s2 [71, 74] { R10604 += 1, R10560 += 1, R88 += 1 };
  s3 -> s1 [71, 65535] { R10604 += 1, R10560 += 1, R87 += 1, R88 += 1 };
  s3 -> s8 [75, 75] { R10604 += 1, R10560 += 1, R88 += 1 };
  s3 -> s2 [76, 65535] { R10604 += 1, R10560 += 1, R88 += 1 };
  s5 -> s5 [0, 74] { R10604 += 1, R10560 += 1, R88 += 1 };
  s5 -> s11 [75, 75] { R10604 += 1, R10560 += 1, R88 += 1 };
  s5 -> s5 [76, 65535] { R10604 += 1, R10560 += 1, R88 += 1 };
  s7 -> s5 [0, 74] { R10604 += 1, R10560 += 1, R88 += 1 };
  s7 -> s7 [0, 65535] { R10604 += 1, R10560 += 1, R87 += 1, R88 += 1 };
  s7 -> s11 [75, 75] { R10604 += 1, R10560 += 1, R88 += 1 };
  s7 -> s5 [76, 65535] { R10604 += 1, R10560 += 1, R88 += 1 };
  s8 -> s8 [0, 69] { R10604 += 1, R10560 += 1, R88 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R10604 += 1 };
  s8 -> s10 [70, 70] { R10604 += 1, R10560 += 1, R88 += 1 };
  s8 -> s11 [70, 70] { R10604 += 1, R10560 += 1, R88 += 1 };
  s8 -> s8 [71, 65535] { R10604 += 1, R10560 += 1, R88 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R10604 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s9 [0, 65535];
  s11 -> s12 [0, 65535] { R10604 += 1 };
  s11 -> s11 [0, 65535] { R10604 += 1, R10560 += 1, R88 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R10604 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 69] { R10606 += 1, R10562 += 1, R91 += 1, R92 += 1 };
  s0 -> s2 [0, 65535] { R10606 += 1, R10561 += 1, R10562 += 1 };
  s0 -> s0 [0, 65535] { R10605 += 1, R10606 += 1 };
  s0 -> s3 [70, 70] { R10606 += 1, R10562 += 1, R91 += 1, R92 += 1 };
  s0 -> s4 [70, 70] { R10606 += 1, R10562 += 1, R91 += 1, R92 += 1 };
  s0 -> s1 [71, 65535] { R10606 += 1, R10562 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 69] { R10606 += 1, R10562 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 65535] { R10606 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [70, 70] { R10606 += 1, R10562 += 1, R91 += 1, R92 += 1 };
  s1 -> s4 [70, 70] { R10606 += 1, R10562 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [71, 65535] { R10606 += 1, R10562 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [0, 69] { R10606 += 1, R10562 += 1, R91 += 1, R92 += 1 };
  s2 -> s2 [0, 65535] { R10606 += 1, R10561 += 1, R10562 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [70, 70] { R10606 += 1, R10562 += 1, R91 += 1, R92 += 1 };
  s2 -> s4 [70, 70] { R10606 += 1, R10562 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [71, 65535] { R10606 += 1, R10562 += 1, R91 += 1, R92 += 1 };
  s3 -> s3 [0, 65535] { R10606 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R10606 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R10606 += 1, R10562 += 1, R91 += 1, R92 += 1 };
  s5 -> s5 [0, 65535] { R10606 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 69] { R10608 += 1, R10564 += 1, R10160 += 1, R10161 += 1 };
  s0 -> s2 [0, 69] { R10608 += 1, R10564 += 1, R10159 += 1, R10160 += 1 };
  s0 -> s3 [0, 65535] { R10608 += 1, R10563 += 1, R10564 += 1 };
  s0 -> s0 [0, 65535] { R10607 += 1, R10608 += 1 };
  s0 -> s4 [70, 70] { R10608 += 1, R10564 += 1, R10160 += 1, R10161 += 1 };
  s0 -> s5 [70, 70] { R10608 += 1, R10564 += 1, R10160 += 1, R10161 += 1 };
  s0 -> s6 [70, 70] { R10608 += 1, R10564 += 1, R10159 += 1, R10160 += 1 };
  s0 -> s7 [70, 70] { R10608 += 1, R10564 += 1, R10159 += 1, R10160 += 1 };
  s0 -> s1 [71, 65535] { R10608 += 1, R10564 += 1, R10160 += 1, R10161 += 1 };
  s0 -> s2 [71, 65535] { R10608 += 1, R10564 += 1, R10159 += 1, R10160 += 1 };
  s1 -> s1 [0, 69] { R10608 += 1, R10564 += 1, R10160 += 1, R10161 += 1 };
  s1 -> s11 [0, 69] { R10608 += 1, R10564 += 1 };
  s1 -> s4 [70, 70] { R10608 += 1, R10564 += 1, R10160 += 1, R10161 += 1 };
  s1 -> s5 [70, 70] { R10608 += 1, R10564 += 1, R10160 += 1, R10161 += 1 };
  s1 -> s12 [70, 70] { R10608 += 1, R10564 += 1 };
  s1 -> s8 [70, 70] { R10608 += 1, R10564 += 1 };
  s1 -> s1 [71, 65535] { R10608 += 1, R10564 += 1, R10160 += 1, R10161 += 1 };
  s1 -> s11 [71, 65535] { R10608 += 1, R10564 += 1 };
  s2 -> s1 [0, 69] { R10608 += 1, R10564 += 1, R10160 += 1, R10161 += 1 };
  s2 -> s2 [0, 69] { R10608 += 1, R10564 += 1, R10159 += 1, R10160 += 1 };
  s2 -> s4 [70, 70] { R10608 += 1, R10564 += 1, R10160 += 1, R10161 += 1 };
  s2 -> s5 [70, 70] { R10608 += 1, R10564 += 1, R10160 += 1, R10161 += 1 };
  s2 -> s6 [70, 70] { R10608 += 1, R10564 += 1, R10159 += 1, R10160 += 1 };
  s2 -> s7 [70, 70] { R10608 += 1, R10564 += 1, R10159 += 1, R10160 += 1 };
  s2 -> s1 [71, 65535] { R10608 += 1, R10564 += 1, R10160 += 1, R10161 += 1 };
  s2 -> s2 [71, 65535] { R10608 += 1, R10564 += 1, R10159 += 1, R10160 += 1 };
  s3 -> s1 [0, 69] { R10608 += 1, R10564 += 1, R10160 += 1, R10161 += 1 };
  s3 -> s2 [0, 69] { R10608 += 1, R10564 += 1, R10159 += 1, R10160 += 1 };
  s3 -> s3 [0, 65535] { R10608 += 1, R10563 += 1, R10564 += 1 };
  s3 -> s4 [70, 70] { R10608 += 1, R10564 += 1, R10160 += 1, R10161 += 1 };
  s3 -> s5 [70, 70] { R10608 += 1, R10564 += 1, R10160 += 1, R10161 += 1 };
  s3 -> s6 [70, 70] { R10608 += 1, R10564 += 1, R10159 += 1, R10160 += 1 };
  s3 -> s7 [70, 70] { R10608 += 1, R10564 += 1, R10159 += 1, R10160 += 1 };
  s3 -> s1 [71, 65535] { R10608 += 1, R10564 += 1, R10160 += 1, R10161 += 1 };
  s3 -> s2 [71, 65535] { R10608 += 1, R10564 += 1, R10159 += 1, R10160 += 1 };
  s4 -> s4 [0, 65535] { R10608 += 1, R10564 += 1, R10160 += 1, R10161 += 1 };
  s4 -> s8 [0, 65535] { R10608 += 1, R10564 += 1 };
  s6 -> s4 [0, 65535] { R10608 += 1, R10564 += 1, R10160 += 1, R10161 += 1 };
  s6 -> s6 [0, 65535] { R10608 += 1, R10564 += 1, R10159 += 1, R10160 += 1 };
  s8 -> s9 [0, 65535] { R10608 += 1 };
  s8 -> s10 [0, 65535];
  s8 -> s8 [0, 65535] { R10608 += 1, R10564 += 1 };
  s9 -> s9 [0, 65535] { R10608 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s11 [0, 69] { R10608 += 1, R10564 += 1 };
  s11 -> s10 [0, 65535];
  s11 -> s11 [0, 65535] { R10608 += 1 };
  s11 -> s12 [70, 70] { R10608 += 1, R10564 += 1 };
  s11 -> s8 [70, 70] { R10608 += 1, R10564 += 1 };
  s11 -> s11 [71, 65535] { R10608 += 1, R10564 += 1 };
  s12 -> s10 [0, 65535];
  s12 -> s12 [0, 65535] { R10608 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 69] { R10610 += 1, R10566 += 1, R10166 += 1, R10167 += 1, R10168 += 1 };
  s0 -> s2 [0, 69] { R10610 += 1, R10566 += 1, R10165 += 1, R10166 += 1 };
  s0 -> s3 [0, 69] { R10610 += 1, R10566 += 1, R10166 += 1, R10168 += 1 };
  s0 -> s4 [0, 65535] { R10610 += 1, R10565 += 1, R10566 += 1 };
  s0 -> s0 [0, 65535] { R10609 += 1, R10610 += 1 };
  s0 -> s5 [70, 70] { R10610 += 1, R10566 += 1, R10166 += 1, R10167 += 1, R10168 += 1 };
  s0 -> s6 [70, 70] { R10610 += 1, R10566 += 1, R10166 += 1, R10167 += 1, R10168 += 1 };
  s0 -> s7 [70, 70] { R10610 += 1, R10566 += 1, R10166 += 1, R10168 += 1 };
  s0 -> s8 [70, 70] { R10610 += 1, R10566 += 1, R10165 += 1, R10166 += 1 };
  s0 -> s9 [70, 70] { R10610 += 1, R10566 += 1, R10165 += 1, R10166 += 1 };
  s0 -> s10 [70, 70] { R10610 += 1, R10566 += 1, R10166 += 1, R10168 += 1 };
  s0 -> s3 [71, 74] { R10610 += 1, R10566 += 1, R10166 += 1, R10168 += 1 };
  s0 -> s1 [71, 65535] { R10610 += 1, R10566 += 1, R10166 += 1, R10167 += 1, R10168 += 1 };
  s0 -> s2 [71, 65535] { R10610 += 1, R10566 += 1, R10165 += 1, R10166 += 1 };
  s0 -> s11 [75, 75] { R10610 += 1, R10566 += 1, R10166 += 1, R10168 += 1 };
  s0 -> s3 [76, 65535] { R10610 += 1, R10566 += 1, R10166 += 1, R10168 += 1 };
  s1 -> s1 [0, 69] { R10610 += 1, R10566 += 1, R10166 += 1, R10167 += 1, R10168 += 1 };
  s1 -> s3 [0, 69] { R10610 += 1, R10566 += 1, R10166 += 1, R10168 += 1 };
  s1 -> s5 [70, 70] { R10610 += 1, R10566 += 1, R10166 += 1, R10167 += 1, R10168 += 1 };
  s1 -> s6 [70, 70] { R10610 += 1, R10566 += 1, R10166 += 1, R10167 += 1, R10168 += 1 };
  s1 -> s7 [70, 70] { R10610 += 1, R10566 += 1, R10166 += 1, R10168 += 1 };
  s1 -> s10 [70, 70] { R10610 += 1, R10566 += 1, R10166 += 1, R10168 += 1 };
  s1 -> s3 [71, 74] { R10610 += 1, R10566 += 1, R10166 += 1, R10168 += 1 };
  s1 -> s1 [71, 65535] { R10610 += 1, R10566 += 1, R10166 += 1, R10167 += 1, R10168 += 1 };
  s1 -> s11 [75, 75] { R10610 += 1, R10566 += 1, R10166 += 1, R10168 += 1 };
  s1 -> s3 [76, 65535] { R10610 += 1, R10566 += 1, R10166 += 1, R10168 += 1 };
  s2 -> s1 [0, 69] { R10610 += 1, R10566 += 1, R10166 += 1, R10167 += 1, R10168 += 1 };
  s2 -> s2 [0, 69] { R10610 += 1, R10566 += 1, R10165 += 1, R10166 += 1 };
  s2 -> s3 [0, 69] { R10610 += 1, R10566 += 1, R10166 += 1, R10168 += 1 };
  s2 -> s5 [70, 70] { R10610 += 1, R10566 += 1, R10166 += 1, R10167 += 1, R10168 += 1 };
  s2 -> s6 [70, 70] { R10610 += 1, R10566 += 1, R10166 += 1, R10167 += 1, R10168 += 1 };
  s2 -> s7 [70, 70] { R10610 += 1, R10566 += 1, R10166 += 1, R10168 += 1 };
  s2 -> s8 [70, 70] { R10610 += 1, R10566 += 1, R10165 += 1, R10166 += 1 };
  s2 -> s9 [70, 70] { R10610 += 1, R10566 += 1, R10165 += 1, R10166 += 1 };
  s2 -> s10 [70, 70] { R10610 += 1, R10566 += 1, R10166 += 1, R10168 += 1 };
  s2 -> s3 [71, 74] { R10610 += 1, R10566 += 1, R10166 += 1, R10168 += 1 };
  s2 -> s1 [71, 65535] { R10610 += 1, R10566 += 1, R10166 += 1, R10167 += 1, R10168 += 1 };
  s2 -> s2 [71, 65535] { R10610 += 1, R10566 += 1, R10165 += 1, R10166 += 1 };
  s2 -> s11 [75, 75] { R10610 += 1, R10566 += 1, R10166 += 1, R10168 += 1 };
  s2 -> s3 [76, 65535] { R10610 += 1, R10566 += 1, R10166 += 1, R10168 += 1 };
  s3 -> s3 [0, 69] { R10610 += 1, R10566 += 1, R10166 += 1, R10168 += 1 };
  s3 -> s7 [70, 70] { R10610 += 1, R10566 += 1, R10166 += 1, R10168 += 1 };
  s3 -> s10 [70, 70] { R10610 += 1, R10566 += 1, R10166 += 1, R10168 += 1 };
  s3 -> s3 [71, 74] { R10610 += 1, R10566 += 1, R10166 += 1, R10168 += 1 };
  s3 -> s11 [75, 75] { R10610 += 1, R10566 += 1, R10166 += 1, R10168 += 1 };
  s3 -> s3 [76, 65535] { R10610 += 1, R10566 += 1, R10166 += 1, R10168 += 1 };
  s4 -> s1 [0, 69] { R10610 += 1, R10566 += 1, R10166 += 1, R10167 += 1, R10168 += 1 };
  s4 -> s2 [0, 69] { R10610 += 1, R10566 += 1, R10165 += 1, R10166 += 1 };
  s4 -> s3 [0, 69] { R10610 += 1, R10566 += 1, R10166 += 1, R10168 += 1 };
  s4 -> s4 [0, 65535] { R10610 += 1, R10565 += 1, R10566 += 1 };
  s4 -> s5 [70, 70] { R10610 += 1, R10566 += 1, R10166 += 1, R10167 += 1, R10168 += 1 };
  s4 -> s6 [70, 70] { R10610 += 1, R10566 += 1, R10166 += 1, R10167 += 1, R10168 += 1 };
  s4 -> s7 [70, 70] { R10610 += 1, R10566 += 1, R10166 += 1, R10168 += 1 };
  s4 -> s8 [70, 70] { R10610 += 1, R10566 += 1, R10165 += 1, R10166 += 1 };
  s4 -> s9 [70, 70] { R10610 += 1, R10566 += 1, R10165 += 1, R10166 += 1 };
  s4 -> s10 [70, 70] { R10610 += 1, R10566 += 1, R10166 += 1, R10168 += 1 };
  s4 -> s3 [71, 74] { R10610 += 1, R10566 += 1, R10166 += 1, R10168 += 1 };
  s4 -> s1 [71, 65535] { R10610 += 1, R10566 += 1, R10166 += 1, R10167 += 1, R10168 += 1 };
  s4 -> s2 [71, 65535] { R10610 += 1, R10566 += 1, R10165 += 1, R10166 += 1 };
  s4 -> s11 [75, 75] { R10610 += 1, R10566 += 1, R10166 += 1, R10168 += 1 };
  s4 -> s3 [76, 65535] { R10610 += 1, R10566 += 1, R10166 += 1, R10168 += 1 };
  s5 -> s7 [0, 74] { R10610 += 1, R10566 += 1, R10166 += 1, R10168 += 1 };
  s5 -> s5 [0, 65535] { R10610 += 1, R10566 += 1, R10166 += 1, R10167 += 1, R10168 += 1 };
  s5 -> s13 [75, 75] { R10610 += 1, R10566 += 1, R10166 += 1, R10168 += 1 };
  s5 -> s7 [76, 65535] { R10610 += 1, R10566 += 1, R10166 += 1, R10168 += 1 };
  s7 -> s7 [0, 74] { R10610 += 1, R10566 += 1, R10166 += 1, R10168 += 1 };
  s7 -> s13 [75, 75] { R10610 += 1, R10566 += 1, R10166 += 1, R10168 += 1 };
  s7 -> s7 [76, 65535] { R10610 += 1, R10566 += 1, R10166 += 1, R10168 += 1 };
  s8 -> s7 [0, 74] { R10610 += 1, R10566 += 1, R10166 += 1, R10168 += 1 };
  s8 -> s5 [0, 65535] { R10610 += 1, R10566 += 1, R10166 += 1, R10167 += 1, R10168 += 1 };
  s8 -> s8 [0, 65535] { R10610 += 1, R10566 += 1, R10165 += 1, R10166 += 1 };
  s8 -> s13 [75, 75] { R10610 += 1, R10566 += 1, R10166 += 1, R10168 += 1 };
  s8 -> s7 [76, 65535] { R10610 += 1, R10566 += 1, R10166 += 1, R10168 += 1 };
  s11 -> s11 [0, 69] { R10610 += 1, R10566 += 1, R10166 += 1, R10168 += 1 };
  s11 -> s12 [0, 65535];
  s11 -> s11 [0, 65535] { R10610 += 1 };
  s11 -> s13 [70, 70] { R10610 += 1, R10566 += 1, R10166 += 1, R10168 += 1 };
  s11 -> s14 [70, 70] { R10610 += 1, R10566 += 1, R10166 += 1, R10168 += 1 };
  s11 -> s11 [71, 65535] { R10610 += 1, R10566 += 1, R10166 += 1, R10168 += 1 };
  s12 -> s12 [0, 65535];
  s13 -> s12 [0, 65535];
  s13 -> s13 [0, 65535] { R10610 += 1, R10566 += 1, R10166 += 1, R10168 += 1 };
  s13 -> s15 [0, 65535] { R10610 += 1 };
  s14 -> s12 [0, 65535];
  s14 -> s14 [0, 65535] { R10610 += 1 };
  s15 -> s12 [0, 65535];
  s15 -> s15 [0, 65535] { R10610 += 1 };
  accepting s12, s13, s14, s15, s11;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 69] { R10612 += 1, R10568 += 1, R10504 += 1, R10506 += 1, R10507 += 1 };
  s0 -> s2 [0, 69] { R10612 += 1, R10568 += 1, R10504 += 1, R10505 += 1, R10506 += 1 };
  s0 -> s3 [0, 69] { R10612 += 1, R10568 += 1, R10503 += 1, R10504 += 1 };
  s0 -> s4 [0, 65535] { R10612 += 1, R10567 += 1, R10568 += 1 };
  s0 -> s0 [0, 65535] { R10611 += 1, R10612 += 1 };
  s0 -> s5 [70, 70] { R10612 += 1, R10568 += 1, R10504 += 1, R10506 += 1, R10507 += 1 };
  s0 -> s6 [70, 70] { R10612 += 1, R10568 += 1, R10503 += 1, R10504 += 1 };
  s0 -> s7 [70, 70] { R10612 += 1, R10568 += 1, R10504 += 1, R10505 += 1, R10506 += 1 };
  s0 -> s8 [70, 70] { R10612 += 1, R10568 += 1, R10504 += 1, R10505 += 1, R10506 += 1 };
  s0 -> s9 [70, 70] { R10612 += 1, R10568 += 1, R10503 += 1, R10504 += 1 };
  s0 -> s10 [70, 70] { R10612 += 1, R10568 += 1, R10504 += 1, R10506 += 1, R10507 += 1 };
  s0 -> s1 [71, 65535] { R10612 += 1, R10568 += 1, R10504 += 1, R10506 += 1, R10507 += 1 };
  s0 -> s2 [71, 65535] { R10612 += 1, R10568 += 1, R10504 += 1, R10505 += 1, R10506 += 1 };
  s0 -> s3 [71, 65535] { R10612 += 1, R10568 += 1, R10503 += 1, R10504 += 1 };
  s1 -> s1 [0, 69] { R10612 += 1, R10568 += 1, R10504 += 1, R10506 += 1, R10507 += 1 };
  s1 -> s1 [0, 65535] { R10612 += 1 };
  s1 -> s11 [0, 65535];
  s1 -> s5 [70, 70] { R10612 += 1, R10568 += 1, R10504 += 1, R10506 += 1, R10507 += 1 };
  s1 -> s10 [70, 70] { R10612 += 1, R10568 += 1, R10504 += 1, R10506 += 1, R10507 += 1 };
  s1 -> s1 [71, 65535] { R10612 += 1, R10568 += 1, R10504 += 1, R10506 += 1, R10507 += 1 };
  s2 -> s1 [0, 69] { R10612 += 1, R10568 += 1, R10504 += 1, R10506 += 1, R10507 += 1 };
  s2 -> s2 [0, 69] { R10612 += 1, R10568 += 1, R10504 += 1, R10505 += 1, R10506 += 1 };
  s2 -> s5 [70, 70] { R10612 += 1, R10568 += 1, R10504 += 1, R10506 += 1, R10507 += 1 };
  s2 -> s7 [70, 70] { R10612 += 1, R10568 += 1, R10504 += 1, R10505 += 1, R10506 += 1 };
  s2 -> s8 [70, 70] { R10612 += 1, R10568 += 1, R10504 += 1, R10505 += 1, R10506 += 1 };
  s2 -> s10 [70, 70] { R10612 += 1, R10568 += 1, R10504 += 1, R10506 += 1, R10507 += 1 };
  s2 -> s1 [71, 65535] { R10612 += 1, R10568 += 1, R10504 += 1, R10506 += 1, R10507 += 1 };
  s2 -> s2 [71, 65535] { R10612 += 1, R10568 += 1, R10504 += 1, R10505 += 1, R10506 += 1 };
  s3 -> s1 [0, 69] { R10612 += 1, R10568 += 1, R10504 += 1, R10506 += 1, R10507 += 1 };
  s3 -> s2 [0, 69] { R10612 += 1, R10568 += 1, R10504 += 1, R10505 += 1, R10506 += 1 };
  s3 -> s3 [0, 69] { R10612 += 1, R10568 += 1, R10503 += 1, R10504 += 1 };
  s3 -> s5 [70, 70] { R10612 += 1, R10568 += 1, R10504 += 1, R10506 += 1, R10507 += 1 };
  s3 -> s6 [70, 70] { R10612 += 1, R10568 += 1, R10503 += 1, R10504 += 1 };
  s3 -> s7 [70, 70] { R10612 += 1, R10568 += 1, R10504 += 1, R10505 += 1, R10506 += 1 };
  s3 -> s8 [70, 70] { R10612 += 1, R10568 += 1, R10504 += 1, R10505 += 1, R10506 += 1 };
  s3 -> s9 [70, 70] { R10612 += 1, R10568 += 1, R10503 += 1, R10504 += 1 };
  s3 -> s10 [70, 70] { R10612 += 1, R10568 += 1, R10504 += 1, R10506 += 1, R10507 += 1 };
  s3 -> s1 [71, 65535] { R10612 += 1, R10568 += 1, R10504 += 1, R10506 += 1, R10507 += 1 };
  s3 -> s2 [71, 65535] { R10612 += 1, R10568 += 1, R10504 += 1, R10505 += 1, R10506 += 1 };
  s3 -> s3 [71, 65535] { R10612 += 1, R10568 += 1, R10503 += 1, R10504 += 1 };
  s4 -> s1 [0, 69] { R10612 += 1, R10568 += 1, R10504 += 1, R10506 += 1, R10507 += 1 };
  s4 -> s2 [0, 69] { R10612 += 1, R10568 += 1, R10504 += 1, R10505 += 1, R10506 += 1 };
  s4 -> s3 [0, 69] { R10612 += 1, R10568 += 1, R10503 += 1, R10504 += 1 };
  s4 -> s4 [0, 65535] { R10612 += 1, R10567 += 1, R10568 += 1 };
  s4 -> s5 [70, 70] { R10612 += 1, R10568 += 1, R10504 += 1, R10506 += 1, R10507 += 1 };
  s4 -> s6 [70, 70] { R10612 += 1, R10568 += 1, R10503 += 1, R10504 += 1 };
  s4 -> s7 [70, 70] { R10612 += 1, R10568 += 1, R10504 += 1, R10505 += 1, R10506 += 1 };
  s4 -> s8 [70, 70] { R10612 += 1, R10568 += 1, R10504 += 1, R10505 += 1, R10506 += 1 };
  s4 -> s9 [70, 70] { R10612 += 1, R10568 += 1, R10503 += 1, R10504 += 1 };
  s4 -> s10 [70, 70] { R10612 += 1, R10568 += 1, R10504 += 1, R10506 += 1, R10507 += 1 };
  s4 -> s1 [71, 65535] { R10612 += 1, R10568 += 1, R10504 += 1, R10506 += 1, R10507 += 1 };
  s4 -> s2 [71, 65535] { R10612 += 1, R10568 += 1, R10504 += 1, R10505 += 1, R10506 += 1 };
  s4 -> s3 [71, 65535] { R10612 += 1, R10568 += 1, R10503 += 1, R10504 += 1 };
  s5 -> s5 [0, 65535] { R10612 += 1, R10568 += 1, R10504 += 1, R10506 += 1, R10507 += 1 };
  s5 -> s11 [0, 65535];
  s5 -> s12 [0, 65535] { R10612 += 1 };
  s7 -> s5 [0, 65535] { R10612 += 1, R10568 += 1, R10504 += 1, R10506 += 1, R10507 += 1 };
  s7 -> s7 [0, 65535] { R10612 += 1, R10568 += 1, R10504 += 1, R10505 += 1, R10506 += 1 };
  s9 -> s5 [0, 65535] { R10612 += 1, R10568 += 1, R10504 += 1, R10506 += 1, R10507 += 1 };
  s9 -> s7 [0, 65535] { R10612 += 1, R10568 += 1, R10504 += 1, R10505 += 1, R10506 += 1 };
  s9 -> s9 [0, 65535] { R10612 += 1, R10568 += 1, R10503 += 1, R10504 += 1 };
  s10 -> s11 [0, 65535];
  s10 -> s10 [0, 65535] { R10612 += 1 };
  s11 -> s11 [0, 65535];
  s12 -> s11 [0, 65535];
  s12 -> s12 [0, 65535] { R10612 += 1 };
  accepting s12, s5, s1, s10, s11;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [102, 102];
  accepting s1;
};
};
constraint R3 = R10612 && R23 - R10612 = -1 && R24 = R10612 && R25 - R10612 = -1 && R26 = R10612 && R27 = 0 && R28 = 1 && R29 = 0 && R30 = 1 && R45 + R84 + R83 + -1*R10170 + -1*R10166 - R66 = 0 && R49 + R89 + R87 = 0 && R50 + R90 + R88 + -1*R10170 + -1*R10166 - R66 = 0 && R55 + R96 + R93 + -1*R10172 + -1*R10168 - R68 = 0 && R65 + R10169 + R10165 = 0 && R67 + R10171 + R10167 = 0 && R10553 = 0 && R10554 = 0 && R10559 = 0 && R10560 = 0 && R10563 = 0 && R10564 = 0 && R10565 = 0 && R10566 = 0 && R10567 = 0 && R10568 = 0 && R10569 = 0 && R10570 = R10612 && R10571 = 0 && R10572 = R10612 && R10573 = 0 && R10574 = R10612 && R10575 = 0 && R10576 = R10612 && R10577 = 0 && R10578 = R10612 && R10579 = 0 && R10580 = R10612 && R10581 = 0 && R10582 = R10612 && R10583 = 0 && R10584 = R10612 && R10585 = 0 && R10586 = R10612 && R10587 = 0 && R10588 = R10612 && R10589 = 0 && R10590 = R10612 && R10591 = 0 && R10592 = R10612 && R10593 = 0 && R10594 = R10612 && R10595 = 0 && R10596 = R10612 && R10597 = 0 && R10598 = R10612 && R10599 = 0 && R10600 = R10612 && R10601 = 0 && R10602 = R10612 && R10603 = 0 && R10604 = R10612 && R10605 = 0 && R10606 = R10612 && R10607 = 0 && R10608 = R10612 && R10609 = 0 && R10610 = R10612 && R10611 = 0 && -1 < R2 && R12 < 1 && R15 < 1 && R16 < 1 && R47 + R86 + R85 < 1 && R61 + R10164 + R10161 < 1 && -1*R10170 + -1*R10166 - R66 < 1 && -1*R10172 + -1*R10168 - R68 < 1 && 0 < R10612 && (R2 != 0 || R20 = 0 || (R10513 = 0 && R10514 = 0)) && (R2 != 0 || R20 = 0 || (R10515 = 0 && R10516 = 0)) && (R2 != 0 || R20 = 0 || (R10517 = 0 && R10518 = 0)) && (R2 != 0 || R20 = 0 || (R10519 = 0 && R10520 = 0)) && (R2 != 0 || R20 = 0 || (R10521 = 0 && R10522 = 0)) && (R2 != 0 || R20 = 0 || (R10523 = 0 && R10524 = 0)) && (R2 != 0 || R20 = 0 || (R10525 = 0 && R10526 = 0)) && (R2 != 0 || R20 = 0 || (R10527 = 0 && R10528 = 0)) && (R2 != 0 || R20 = 0 || (R10529 = 0 && R10530 = 0)) && (R2 != 0 || R20 = 0 || (R10531 = 0 && R10532 = 0)) && (R53 + R94 + R91 != 0 || R54 + R95 + R92 + -1*R10170 + -1*R10166 - R66 = 0 || R66 + R10170 + R10166 < 1) && (R59 + R10162 + R10159 != 0 || R60 + R10163 + R10160 + -1*R10170 + -1*R10166 - R66 = 0 || R66 + R10170 + R10166 < 1) && (R66 + R10170 + R10166 != 0 || ((R53 + R94 + R91 != 0 || R54 + R95 + R92 = 0 || R68 + R10172 + R10168 < 1) && (R53 + R94 + R91 = 0 || R68 + R10172 + R10168 < 1))) && (R66 + R10170 + R10166 != 0 || ((R59 + R10162 + R10159 != 0 || R60 + R10163 + R10160 = 0 || R68 + R10172 + R10168 < 1) && (R59 + R10162 + R10159 = 0 || R68 + R10172 + R10168 < 1))) && (R66 + R10170 + R10166 != 0 || ((R73 + R10508 + R10503 != 0 || R74 + R10509 + R10504 = 0 || R68 + R10172 + R10168 < 1) && (R73 + R10508 + R10503 = 0 || R68 + R10172 + R10168 < 1))) && (R68 + R10172 + R10168 != 0 || R77 + R10512 + R10507 = 0 || (R75 + R10510 + R10505 = 0 && R76 + R10511 + R10506 = 0)) && (R73 + R10508 + R10503 != 0 || R66 + R10170 + R10166 + -1*R10509 + -1*R10504 - R74 = 0 || R66 + R10170 + R10166 < 1) && (R75 + R10510 + R10505 != 0 || R68 + R10172 + R10168 + -1*R10511 + -1*R10506 - R76 = 0 || R68 + R10172 + R10168 < 1) && (R10513 != 0 || R2 = R10514 || R2 < 1) && (R10515 != 0 || R2 = R10516 || R2 < 1) && (R10517 != 0 || R2 = R10518 || R2 < 1) && (R10519 != 0 || R2 = R10520 || R2 < 1) && (R10521 != 0 || R2 = R10522 || R2 < 1) && (R10523 != 0 || R2 = R10524 || R2 < 1) && (R10525 != 0 || R2 = R10526 || R2 < 1) && (R10527 != 0 || R2 = R10528 || R2 < 1) && (R10529 != 0 || R2 = R10530 || R2 < 1) && (R10531 != 0 || R2 = R10532 || R2 < 1) && (R21 = 0 || (R10551 = 0 && R10552 = 0)) && (R21 = 0 || (R10555 = 0 && R10556 = 0)) && (R21 = 0 || (R10557 = 0 && R10558 = 0)) && (R21 = 0 || (R10561 = 0 && R10562 = 0)) && (R22 = 0 || (R10533 = 0 && R10534 = 0)) && (R22 = 0 || (R10535 = 0 && R10536 = 0)) && (R22 = 0 || (R10537 = 0 && R10538 = 0)) && (R22 = 0 || (R10539 = 0 && R10540 = 0)) && (R22 = 0 || (R10541 = 0 && R10542 = 0)) && (R22 = 0 || (R10543 = 0 && R10544 = 0)) && (R22 = 0 || (R10545 = 0 && R10546 = 0)) && (R22 = 0 || (R10547 = 0 && R10548 = 0)) && (R22 = 0 || (R10549 = 0 && R10550 = 0)) && (R53 + R94 + R91 = 0 || R66 + R10170 + R10166 < 1) && (R59 + R10162 + R10159 = 0 || R66 + R10170 + R10166 < 1) && (R73 + R10508 + R10503 = 0 || R66 + R10170 + R10166 < 1) && (R75 + R10510 + R10505 = 0 || R68 + R10172 + R10168 < 1) && (R10513 = 0 || R2 < 1) && (R10515 = 0 || R2 < 1) && (R10517 = 0 || R2 < 1) && (R10519 = 0 || R2 < 1) && (R10521 = 0 || R2 < 1) && (R10523 = 0 || R2 < 1) && (R10525 = 0 || R2 < 1) && (R10527 = 0 || R2 < 1) && (R10529 = 0 || R2 < 1) && (R10531 = 0 || R2 < 1);
// End of Parikh automata intersection problem
