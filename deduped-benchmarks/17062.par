// Parikh automata intersection problem, generated by OSTRICH+
counter int R12, R15, R16, R2, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R4, R45, R47, R49, R5, R50, R53, R54, R55, R59, R60, R61, R65, R66, R67, R68, R6805, R6806, R6807, R6808, R6809, R6810, R73, R74, R75, R76, R77, R83, R84, R8485, R8486, R8487, R8488, R8489, R8490, R8491, R8492, R85, R86, R87, R88, R8823, R8824, R8825, R8826, R8827, R8828, R8829, R8830, R8831, R8832, R8833, R8834, R8835, R8836, R8837, R8838, R8839, R8840, R8841, R8842, R8843, R8844, R8845, R8846, R8847, R8848, R8849, R8850, R8851, R8852, R8853, R8854, R8855, R8856, R8857, R8858, R8859, R8860, R8861, R8862, R8863, R8864, R8865, R8866, R8867, R8868, R8869, R8870, R8871, R8872, R8873, R8874, R8875, R8876, R8877, R8878, R8879, R8880, R8881, R8882, R8883, R8884, R8885, R8886, R8887, R8888, R8889, R8890, R8891, R8892, R8893, R8894, R8895, R8896, R8897, R8898, R8899, R89, R8900, R8901, R8902, R8903, R8904, R8905, R8906, R8907, R8908, R8909, R8910, R8911, R8912, R8913, R8914, R8915, R8916, R8917, R8918, R8919, R8920, R8921, R8922, R8923, R8924, R8925, R8926, R8927, R8928, R8929, R8930, R8931, R8932, R90, R91, R92, R93, R94, R95, R96;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [70, 70];
  s0 -> s0 [71, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [70, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R15 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 69];
  s0 -> s0 [0, 65535] { R16 += 1 };
  s0 -> s2 [70, 70];
  s0 -> s1 [71, 65535];
  s1 -> s1 [0, 69];
  s1 -> s2 [70, 70];
  s1 -> s1 [71, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R24 += 1 };
  s0 -> s0 [0, 65535] { R23 += 1, R24 += 1 };
  s0 -> s2 [9, 13] { R24 += 1 };
  s0 -> s1 [14, 31] { R24 += 1 };
  s0 -> s2 [32, 32] { R24 += 1 };
  s0 -> s1 [33, 65535] { R24 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R24 += 1 };
  s2 -> s1 [0, 65535] { R24 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R25 += 1, R26 += 1 };
  s1 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R28 += 1 };
  s0 -> s0 [0, 65535] { R27 += 1, R28 += 1 };
  s0 -> s2 [9, 13] { R28 += 1 };
  s0 -> s1 [14, 31] { R28 += 1 };
  s0 -> s2 [32, 32] { R28 += 1 };
  s0 -> s1 [33, 65535] { R28 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R28 += 1 };
  s2 -> s1 [0, 65535] { R28 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R29 += 1, R30 += 1 };
  s1 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R8854 += 1, R22 += 1 };
  s0 -> s0 [0, 65535] { R8853 += 1, R8854 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R8854 += 1, R22 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 69] { R8856 += 1 };
  s0 -> s0 [0, 65535] { R8855 += 1, R8856 += 1 };
  s0 -> s2 [70, 70] { R8856 += 1 };
  s0 -> s3 [70, 70] { R8856 += 1 };
  s0 -> s1 [76, 65535] { R8856 += 1 };
  s1 -> s1 [0, 69] { R8856 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R8856 += 1 };
  s1 -> s3 [70, 70] { R8856 += 1 };
  s1 -> s1 [76, 65535] { R8856 += 1 };
  s2 -> s2 [0, 70] { R8856 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [76, 65535] { R8856 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 69] { R8858 += 1, R45 += 1 };
  s0 -> s0 [0, 65535] { R8857 += 1, R8858 += 1 };
  s0 -> s2 [70, 70] { R8858 += 1, R45 += 1 };
  s0 -> s3 [70, 70] { R8858 += 1, R45 += 1 };
  s0 -> s1 [71, 65535] { R8858 += 1, R45 += 1 };
  s1 -> s1 [0, 69] { R8858 += 1, R45 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R8858 += 1, R45 += 1 };
  s1 -> s3 [70, 70] { R8858 += 1, R45 += 1 };
  s1 -> s1 [71, 65535] { R8858 += 1, R45 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8858 += 1, R45 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 69] { R8860 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R8859 += 1, R8860 += 1 };
  s0 -> s2 [70, 70] { R8860 += 1, R47 += 1 };
  s0 -> s3 [70, 70] { R8860 += 1, R47 += 1 };
  s0 -> s1 [71, 65535] { R8860 += 1, R47 += 1 };
  s1 -> s1 [0, 69] { R8860 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R8860 += 1, R47 += 1 };
  s1 -> s3 [70, 70] { R8860 += 1, R47 += 1 };
  s1 -> s1 [71, 65535] { R8860 += 1, R47 += 1 };
  s2 -> s2 [0, 65535] { R8860 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 69] { R8862 += 1, R49 += 1, R50 += 1 };
  s0 -> s0 [0, 65535] { R8861 += 1, R8862 += 1 };
  s0 -> s2 [70, 70] { R8862 += 1, R49 += 1, R50 += 1 };
  s0 -> s3 [70, 70] { R8862 += 1, R49 += 1, R50 += 1 };
  s0 -> s1 [71, 65535] { R8862 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 69] { R8862 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R8862 += 1, R49 += 1, R50 += 1 };
  s1 -> s3 [70, 70] { R8862 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [71, 65535] { R8862 += 1, R49 += 1, R50 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R8862 += 1, R49 += 1, R50 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 69] { R8864 += 1, R53 += 1, R54 += 1 };
  s0 -> s0 [0, 65535] { R8863 += 1, R8864 += 1 };
  s0 -> s2 [70, 70] { R8864 += 1, R53 += 1, R54 += 1 };
  s0 -> s3 [70, 70] { R8864 += 1, R53 += 1, R54 += 1 };
  s0 -> s1 [71, 65535] { R8864 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 69] { R8864 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R8864 += 1, R53 += 1, R54 += 1 };
  s1 -> s3 [70, 70] { R8864 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [71, 65535] { R8864 += 1, R53 += 1, R54 += 1 };
  s2 -> s2 [0, 65535] { R8864 += 1, R53 += 1, R54 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 69] { R8866 += 1, R59 += 1, R60 += 1 };
  s0 -> s0 [0, 65535] { R8865 += 1, R8866 += 1 };
  s0 -> s2 [70, 70] { R8866 += 1, R59 += 1, R60 += 1 };
  s0 -> s3 [70, 70] { R8866 += 1, R59 += 1, R60 += 1 };
  s0 -> s1 [71, 65535] { R8866 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 69] { R8866 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R8866 += 1, R59 += 1, R60 += 1 };
  s1 -> s3 [70, 70] { R8866 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [71, 65535] { R8866 += 1, R59 += 1, R60 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R8866 += 1, R59 += 1, R60 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 69] { R8868 += 1, R65 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R8867 += 1, R8868 += 1 };
  s0 -> s2 [70, 70] { R8868 += 1, R65 += 1, R66 += 1 };
  s0 -> s3 [70, 70] { R8868 += 1, R65 += 1, R66 += 1 };
  s0 -> s1 [71, 65535] { R8868 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 69] { R8868 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R8868 += 1, R65 += 1, R66 += 1 };
  s1 -> s3 [70, 70] { R8868 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [71, 65535] { R8868 += 1, R65 += 1, R66 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8868 += 1, R65 += 1, R66 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 69] { R8870 += 1, R73 += 1, R74 += 1 };
  s0 -> s0 [0, 65535] { R8869 += 1, R8870 += 1 };
  s0 -> s2 [70, 70] { R8870 += 1, R73 += 1, R74 += 1 };
  s0 -> s3 [70, 70] { R8870 += 1, R73 += 1, R74 += 1 };
  s0 -> s1 [71, 65535] { R8870 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 69] { R8870 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R8870 += 1, R73 += 1, R74 += 1 };
  s1 -> s3 [70, 70] { R8870 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [71, 65535] { R8870 += 1, R73 += 1, R74 += 1 };
  s2 -> s2 [0, 65535] { R8870 += 1, R73 += 1, R74 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 69] { R8890 += 1 };
  s0 -> s0 [0, 65535] { R8889 += 1, R8890 += 1 };
  s0 -> s2 [70, 70] { R8890 += 1 };
  s0 -> s1 [71, 65535] { R8890 += 1 };
  s1 -> s1 [0, 69] { R8890 += 1 };
  s1 -> s2 [70, 70] { R8890 += 1 };
  s1 -> s1 [71, 65535] { R8890 += 1 };
  s2 -> s2 [0, 65535] { R8890 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R8892 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R8891 += 1, R8892 += 1 };
  s1 -> s1 [0, 65535] { R8892 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 69] { R8894 += 1 };
  s0 -> s0 [0, 65535] { R8893 += 1, R8894 += 1 };
  s0 -> s2 [0, 65535] { R8894 += 1, R12 += 1 };
  s0 -> s3 [70, 70] { R8894 += 1 };
  s0 -> s1 [71, 65535] { R8894 += 1 };
  s1 -> s1 [0, 69] { R8894 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [70, 70] { R8894 += 1 };
  s1 -> s1 [71, 65535] { R8894 += 1 };
  s2 -> s1 [0, 69] { R8894 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8894 += 1, R12 += 1 };
  s2 -> s3 [70, 70] { R8894 += 1 };
  s2 -> s1 [71, 65535] { R8894 += 1 };
  s3 -> s3 [0, 65535] { R8894 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 69] { R8896 += 1, R8834 += 1 };
  s0 -> s0 [0, 65535] { R8895 += 1, R8896 += 1 };
  s0 -> s2 [0, 65535] { R8896 += 1, R8833 += 1, R8834 += 1 };
  s0 -> s1 [71, 65535] { R8896 += 1, R8834 += 1 };
  s1 -> s1 [0, 69] { R8896 += 1, R8834 += 1 };
  s1 -> s1 [0, 65535] { R8896 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [71, 65535] { R8896 += 1, R8834 += 1 };
  s2 -> s1 [0, 69] { R8896 += 1, R8834 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R8896 += 1, R8833 += 1, R8834 += 1 };
  s2 -> s1 [71, 65535] { R8896 += 1, R8834 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s0 [0, 65535] { R8897 += 1, R8898 += 1 };
  s0 -> s1 [0, 65535] { R8898 += 1, R8836 += 1, R20 += 1 };
  s0 -> s2 [0, 65535] { R8898 += 1, R8835 += 1, R8836 += 1 };
  s1 -> s4 [0, 65535] { R8898 += 1 };
  s1 -> s1 [0, 65535] { R8898 += 1, R8836 += 1, R20 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R8898 += 1, R8836 += 1, R20 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R8898 += 1, R8835 += 1, R8836 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8898 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 70] { R8900 += 1, R8838 += 1 };
  s0 -> s0 [0, 65535] { R8899 += 1, R8900 += 1 };
  s0 -> s2 [0, 65535] { R8900 += 1, R8837 += 1, R8838 += 1 };
  s0 -> s1 [75, 65535] { R8900 += 1, R8838 += 1 };
  s1 -> s1 [0, 70] { R8900 += 1, R8838 += 1 };
  s1 -> s1 [0, 65535] { R8900 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [75, 65535] { R8900 += 1, R8838 += 1 };
  s2 -> s1 [0, 70] { R8900 += 1, R8838 += 1 };
  s2 -> s2 [0, 65535] { R8900 += 1, R8837 += 1, R8838 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [75, 65535] { R8900 += 1, R8838 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R8902 += 1, R8840 += 1, R84 += 1 };
  s0 -> s0 [0, 65535] { R8901 += 1, R8902 += 1 };
  s0 -> s2 [0, 65535] { R8902 += 1, R8839 += 1, R8840 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R8902 += 1, R8840 += 1, R84 += 1 };
  s1 -> s4 [0, 65535] { R8902 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R8902 += 1, R8840 += 1, R84 += 1 };
  s2 -> s2 [0, 65535] { R8902 += 1, R8839 += 1, R8840 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8902 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 74] { R8904 += 1, R8842 += 1 };
  s0 -> s0 [0, 65535] { R8903 += 1, R8904 += 1 };
  s0 -> s2 [0, 65535] { R8904 += 1, R8842 += 1, R86 += 1 };
  s0 -> s3 [0, 65535] { R8904 += 1, R8841 += 1, R8842 += 1 };
  s0 -> s1 [76, 65535] { R8904 += 1, R8842 += 1 };
  s1 -> s1 [0, 74] { R8904 += 1, R8842 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R8904 += 1 };
  s1 -> s1 [76, 65535] { R8904 += 1, R8842 += 1 };
  s2 -> s1 [0, 74] { R8904 += 1, R8842 += 1 };
  s2 -> s5 [0, 65535] { R8904 += 1 };
  s2 -> s2 [0, 65535] { R8904 += 1, R8842 += 1, R86 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [76, 65535] { R8904 += 1, R8842 += 1 };
  s3 -> s1 [0, 74] { R8904 += 1, R8842 += 1 };
  s3 -> s2 [0, 65535] { R8904 += 1, R8842 += 1, R86 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8904 += 1, R8841 += 1, R8842 += 1 };
  s3 -> s1 [76, 65535] { R8904 += 1, R8842 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8904 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s0 [0, 65535] { R8905 += 1, R8906 += 1 };
  s0 -> s1 [0, 65535] { R8906 += 1, R8844 += 1, R90 += 1 };
  s0 -> s2 [0, 65535] { R8906 += 1, R8843 += 1, R8844 += 1 };
  s0 -> s3 [0, 65535] { R8906 += 1, R8844 += 1 };
  s1 -> s1 [0, 65535] { R8906 += 1, R8844 += 1, R90 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s3 [0, 65535] { R8906 += 1, R8844 += 1 };
  s1 -> s5 [0, 65535] { R8906 += 1 };
  s2 -> s1 [0, 65535] { R8906 += 1, R8844 += 1, R90 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8906 += 1, R8843 += 1, R8844 += 1 };
  s2 -> s3 [0, 65535] { R8906 += 1, R8844 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8906 += 1, R8844 += 1 };
  s3 -> s5 [0, 65535] { R8906 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8906 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R8908 += 1, R8845 += 1, R8846 += 1 };
  s0 -> s0 [0, 65535] { R8907 += 1, R8908 += 1 };
  s0 -> s2 [0, 65535] { R8908 += 1, R8846 += 1, R95 += 1, R96 += 1 };
  s0 -> s3 [0, 65535] { R8908 += 1, R8846 += 1, R94 += 1, R95 += 1 };
  s1 -> s1 [0, 65535] { R8908 += 1, R8845 += 1, R8846 += 1 };
  s1 -> s2 [0, 65535] { R8908 += 1, R8846 += 1, R95 += 1, R96 += 1 };
  s1 -> s3 [0, 65535] { R8908 += 1, R8846 += 1, R94 += 1, R95 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s4 [0, 65535] { R8908 += 1 };
  s2 -> s6 [0, 65535] { R8908 += 1, R8846 += 1 };
  s2 -> s2 [0, 65535] { R8908 += 1, R8846 += 1, R95 += 1, R96 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s4 [0, 65535] { R8908 += 1 };
  s3 -> s2 [0, 65535] { R8908 += 1, R8846 += 1, R95 += 1, R96 += 1 };
  s3 -> s3 [0, 65535] { R8908 += 1, R8846 += 1, R94 += 1, R95 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8908 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R8908 += 1 };
  s6 -> s6 [0, 65535] { R8908 += 1, R8846 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 74] { R8910 += 1, R8848 += 1, R6809 += 1 };
  s0 -> s2 [0, 65535] { R8910 += 1, R8848 += 1 };
  s0 -> s0 [0, 65535] { R8909 += 1, R8910 += 1 };
  s0 -> s3 [0, 65535] { R8910 += 1, R8848 += 1, R6809 += 1, R6810 += 1 };
  s0 -> s4 [0, 65535] { R8910 += 1, R8847 += 1, R8848 += 1 };
  s0 -> s1 [76, 65535] { R8910 += 1, R8848 += 1, R6809 += 1 };
  s1 -> s1 [0, 74] { R8910 += 1, R8848 += 1, R6809 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R8910 += 1, R8848 += 1 };
  s1 -> s6 [0, 65535] { R8910 += 1 };
  s1 -> s1 [76, 65535] { R8910 += 1, R8848 += 1, R6809 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R8910 += 1, R8848 += 1 };
  s2 -> s6 [0, 65535] { R8910 += 1 };
  s3 -> s1 [0, 74] { R8910 += 1, R8848 += 1, R6809 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R8910 += 1, R8848 += 1 };
  s3 -> s6 [0, 65535] { R8910 += 1 };
  s3 -> s3 [0, 65535] { R8910 += 1, R8848 += 1, R6809 += 1, R6810 += 1 };
  s3 -> s1 [76, 65535] { R8910 += 1, R8848 += 1, R6809 += 1 };
  s4 -> s1 [0, 74] { R8910 += 1, R8848 += 1, R6809 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s2 [0, 65535] { R8910 += 1, R8848 += 1 };
  s4 -> s3 [0, 65535] { R8910 += 1, R8848 += 1, R6809 += 1, R6810 += 1 };
  s4 -> s4 [0, 65535] { R8910 += 1, R8847 += 1, R8848 += 1 };
  s4 -> s1 [76, 65535] { R8910 += 1, R8848 += 1, R6809 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8910 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 74] { R8912 += 1, R8850 += 1, R8490 += 1, R8492 += 1 };
  s0 -> s2 [0, 65535] { R8912 += 1, R8849 += 1, R8850 += 1 };
  s0 -> s3 [0, 65535] { R8912 += 1, R8850 += 1, R8489 += 1, R8490 += 1 };
  s0 -> s4 [0, 65535] { R8912 += 1, R8850 += 1, R8490 += 1, R8491 += 1, R8492 += 1 };
  s0 -> s0 [0, 65535] { R8911 += 1, R8912 += 1 };
  s0 -> s5 [75, 75] { R8912 += 1, R8850 += 1, R8490 += 1, R8492 += 1 };
  s0 -> s1 [76, 65535] { R8912 += 1, R8850 += 1, R8490 += 1, R8492 += 1 };
  s1 -> s1 [0, 74] { R8912 += 1, R8850 += 1, R8490 += 1, R8492 += 1 };
  s1 -> s5 [75, 75] { R8912 += 1, R8850 += 1, R8490 += 1, R8492 += 1 };
  s1 -> s1 [76, 65535] { R8912 += 1, R8850 += 1, R8490 += 1, R8492 += 1 };
  s2 -> s1 [0, 74] { R8912 += 1, R8850 += 1, R8490 += 1, R8492 += 1 };
  s2 -> s2 [0, 65535] { R8912 += 1, R8849 += 1, R8850 += 1 };
  s2 -> s3 [0, 65535] { R8912 += 1, R8850 += 1, R8489 += 1, R8490 += 1 };
  s2 -> s4 [0, 65535] { R8912 += 1, R8850 += 1, R8490 += 1, R8491 += 1, R8492 += 1 };
  s2 -> s5 [75, 75] { R8912 += 1, R8850 += 1, R8490 += 1, R8492 += 1 };
  s2 -> s1 [76, 65535] { R8912 += 1, R8850 += 1, R8490 += 1, R8492 += 1 };
  s3 -> s1 [0, 74] { R8912 += 1, R8850 += 1, R8490 += 1, R8492 += 1 };
  s3 -> s3 [0, 65535] { R8912 += 1, R8850 += 1, R8489 += 1, R8490 += 1 };
  s3 -> s4 [0, 65535] { R8912 += 1, R8850 += 1, R8490 += 1, R8491 += 1, R8492 += 1 };
  s3 -> s5 [75, 75] { R8912 += 1, R8850 += 1, R8490 += 1, R8492 += 1 };
  s3 -> s1 [76, 65535] { R8912 += 1, R8850 += 1, R8490 += 1, R8492 += 1 };
  s4 -> s1 [0, 74] { R8912 += 1, R8850 += 1, R8490 += 1, R8492 += 1 };
  s4 -> s4 [0, 65535] { R8912 += 1, R8850 += 1, R8490 += 1, R8491 += 1, R8492 += 1 };
  s4 -> s5 [75, 75] { R8912 += 1, R8850 += 1, R8490 += 1, R8492 += 1 };
  s4 -> s1 [76, 65535] { R8912 += 1, R8850 += 1, R8490 += 1, R8492 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R8912 += 1, R8850 += 1, R8490 += 1, R8492 += 1 };
  s5 -> s7 [0, 65535] { R8912 += 1, R8850 += 1 };
  s5 -> s8 [0, 65535] { R8912 += 1, R8850 += 1, R8490 += 1 };
  s5 -> s9 [0, 65535] { R8912 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R8912 += 1, R8850 += 1 };
  s7 -> s9 [0, 65535] { R8912 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R8912 += 1, R8850 += 1 };
  s8 -> s8 [0, 65535] { R8912 += 1, R8850 += 1, R8490 += 1 };
  s8 -> s9 [0, 65535] { R8912 += 1 };
  s9 -> s6 [0, 65535];
  s9 -> s9 [0, 65535] { R8912 += 1 };
  accepting s8, s5, s9, s6, s7;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 65535] { R8914 += 1, R8852 += 1, R8829 += 1 };
  s0 -> s0 [0, 65535] { R8913 += 1, R8914 += 1 };
  s0 -> s2 [0, 65535] { R8914 += 1, R8852 += 1, R8829 += 1, R8831 += 1, R8832 += 1 };
  s0 -> s3 [0, 65535] { R8914 += 1, R8852 += 1 };
  s0 -> s4 [0, 65535] { R8914 += 1, R8851 += 1, R8852 += 1 };
  s1 -> s1 [0, 65535] { R8914 += 1, R8852 += 1, R8829 += 1 };
  s1 -> s6 [0, 65535] { R8914 += 1 };
  s1 -> s3 [0, 65535] { R8914 += 1, R8852 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R8914 += 1, R8852 += 1, R8829 += 1 };
  s2 -> s2 [0, 65535] { R8914 += 1, R8852 += 1, R8829 += 1, R8831 += 1, R8832 += 1 };
  s2 -> s6 [0, 65535] { R8914 += 1 };
  s2 -> s3 [0, 65535] { R8914 += 1, R8852 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R8914 += 1 };
  s3 -> s3 [0, 65535] { R8914 += 1, R8852 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s1 [0, 65535] { R8914 += 1, R8852 += 1, R8829 += 1 };
  s4 -> s2 [0, 65535] { R8914 += 1, R8852 += 1, R8829 += 1, R8831 += 1, R8832 += 1 };
  s4 -> s3 [0, 65535] { R8914 += 1, R8852 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8914 += 1, R8851 += 1, R8852 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8914 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R8916 += 1, R8872 += 1, R21 += 1 };
  s0 -> s2 [0, 65535] { R8916 += 1, R8871 += 1, R8872 += 1 };
  s0 -> s0 [0, 65535] { R8915 += 1, R8916 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R8916 += 1 };
  s1 -> s1 [0, 65535] { R8916 += 1, R8872 += 1, R21 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R8916 += 1, R8872 += 1, R21 += 1 };
  s2 -> s2 [0, 65535] { R8916 += 1, R8871 += 1, R8872 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8916 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 69] { R8918 += 1, R8874 += 1 };
  s0 -> s0 [0, 65535] { R8917 += 1, R8918 += 1 };
  s0 -> s2 [0, 65535] { R8918 += 1, R8873 += 1, R8874 += 1 };
  s0 -> s3 [70, 70] { R8918 += 1, R8874 += 1 };
  s0 -> s4 [70, 70] { R8918 += 1, R8874 += 1 };
  s0 -> s5 [75, 75] { R8918 += 1, R8874 += 1 };
  s0 -> s1 [76, 65535] { R8918 += 1, R8874 += 1 };
  s1 -> s1 [0, 69] { R8918 += 1, R8874 += 1 };
  s1 -> s3 [70, 70] { R8918 += 1, R8874 += 1 };
  s1 -> s4 [70, 70] { R8918 += 1, R8874 += 1 };
  s1 -> s5 [75, 75] { R8918 += 1, R8874 += 1 };
  s1 -> s1 [76, 65535] { R8918 += 1, R8874 += 1 };
  s2 -> s1 [0, 69] { R8918 += 1, R8874 += 1 };
  s2 -> s2 [0, 65535] { R8918 += 1, R8873 += 1, R8874 += 1 };
  s2 -> s3 [70, 70] { R8918 += 1, R8874 += 1 };
  s2 -> s4 [70, 70] { R8918 += 1, R8874 += 1 };
  s2 -> s5 [75, 75] { R8918 += 1, R8874 += 1 };
  s2 -> s1 [76, 65535] { R8918 += 1, R8874 += 1 };
  s3 -> s3 [0, 70] { R8918 += 1, R8874 += 1 };
  s3 -> s7 [75, 75] { R8918 += 1, R8874 += 1 };
  s3 -> s3 [76, 65535] { R8918 += 1, R8874 += 1 };
  s5 -> s5 [0, 69] { R8918 += 1, R8874 += 1 };
  s5 -> s5 [0, 65535] { R8918 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [70, 70] { R8918 += 1, R8874 += 1 };
  s5 -> s8 [70, 70] { R8918 += 1, R8874 += 1 };
  s5 -> s5 [75, 65535] { R8918 += 1, R8874 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 70] { R8918 += 1, R8874 += 1 };
  s7 -> s7 [0, 65535] { R8918 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [75, 65535] { R8918 += 1, R8874 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R8918 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 69] { R8920 += 1, R8876 += 1, R83 += 1 };
  s0 -> s2 [0, 65535] { R8920 += 1, R8875 += 1, R8876 += 1 };
  s0 -> s0 [0, 65535] { R8919 += 1, R8920 += 1 };
  s0 -> s3 [70, 70] { R8920 += 1, R8876 += 1, R83 += 1 };
  s0 -> s4 [70, 70] { R8920 += 1, R8876 += 1, R83 += 1 };
  s0 -> s1 [71, 65535] { R8920 += 1, R8876 += 1, R83 += 1 };
  s1 -> s1 [0, 69] { R8920 += 1, R8876 += 1, R83 += 1 };
  s1 -> s1 [0, 65535] { R8920 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [70, 70] { R8920 += 1, R8876 += 1, R83 += 1 };
  s1 -> s4 [70, 70] { R8920 += 1, R8876 += 1, R83 += 1 };
  s1 -> s1 [71, 65535] { R8920 += 1, R8876 += 1, R83 += 1 };
  s2 -> s1 [0, 69] { R8920 += 1, R8876 += 1, R83 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R8920 += 1, R8875 += 1, R8876 += 1 };
  s2 -> s3 [70, 70] { R8920 += 1, R8876 += 1, R83 += 1 };
  s2 -> s4 [70, 70] { R8920 += 1, R8876 += 1, R83 += 1 };
  s2 -> s1 [71, 65535] { R8920 += 1, R8876 += 1, R83 += 1 };
  s3 -> s3 [0, 65535] { R8920 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R8920 += 1, R8876 += 1, R83 += 1 };
  s4 -> s5 [0, 65535] { R8920 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R8920 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 69] { R8922 += 1, R8878 += 1, R85 += 1 };
  s0 -> s0 [0, 65535] { R8921 += 1, R8922 += 1 };
  s0 -> s2 [0, 65535] { R8922 += 1, R8877 += 1, R8878 += 1 };
  s0 -> s3 [70, 70] { R8922 += 1, R8878 += 1, R85 += 1 };
  s0 -> s4 [70, 70] { R8922 += 1, R8878 += 1, R85 += 1 };
  s0 -> s1 [71, 65535] { R8922 += 1, R8878 += 1, R85 += 1 };
  s1 -> s1 [0, 69] { R8922 += 1, R8878 += 1, R85 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R8922 += 1 };
  s1 -> s3 [70, 70] { R8922 += 1, R8878 += 1, R85 += 1 };
  s1 -> s4 [70, 70] { R8922 += 1, R8878 += 1, R85 += 1 };
  s1 -> s1 [71, 65535] { R8922 += 1, R8878 += 1, R85 += 1 };
  s2 -> s1 [0, 69] { R8922 += 1, R8878 += 1, R85 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R8922 += 1, R8877 += 1, R8878 += 1 };
  s2 -> s3 [70, 70] { R8922 += 1, R8878 += 1, R85 += 1 };
  s2 -> s4 [70, 70] { R8922 += 1, R8878 += 1, R85 += 1 };
  s2 -> s1 [71, 65535] { R8922 += 1, R8878 += 1, R85 += 1 };
  s3 -> s3 [0, 65535] { R8922 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R8922 += 1 };
  s4 -> s4 [0, 65535] { R8922 += 1, R8878 += 1, R85 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8922 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 69] { R8924 += 1, R8880 += 1, R88 += 1 };
  s0 -> s2 [0, 69] { R8924 += 1, R8880 += 1, R87 += 1, R88 += 1 };
  s0 -> s3 [0, 65535] { R8924 += 1, R8879 += 1, R8880 += 1 };
  s0 -> s0 [0, 65535] { R8923 += 1, R8924 += 1 };
  s0 -> s4 [70, 70] { R8924 += 1, R8880 += 1, R87 += 1, R88 += 1 };
  s0 -> s5 [70, 70] { R8924 += 1, R8880 += 1, R88 += 1 };
  s0 -> s6 [70, 70] { R8924 += 1, R8880 += 1, R87 += 1, R88 += 1 };
  s0 -> s7 [70, 70] { R8924 += 1, R8880 += 1, R88 += 1 };
  s0 -> s1 [71, 74] { R8924 += 1, R8880 += 1, R88 += 1 };
  s0 -> s2 [71, 65535] { R8924 += 1, R8880 += 1, R87 += 1, R88 += 1 };
  s0 -> s8 [75, 75] { R8924 += 1, R8880 += 1, R88 += 1 };
  s0 -> s1 [76, 65535] { R8924 += 1, R8880 += 1, R88 += 1 };
  s1 -> s1 [0, 69] { R8924 += 1, R8880 += 1, R88 += 1 };
  s1 -> s5 [70, 70] { R8924 += 1, R8880 += 1, R88 += 1 };
  s1 -> s7 [70, 70] { R8924 += 1, R8880 += 1, R88 += 1 };
  s1 -> s1 [71, 74] { R8924 += 1, R8880 += 1, R88 += 1 };
  s1 -> s8 [75, 75] { R8924 += 1, R8880 += 1, R88 += 1 };
  s1 -> s1 [76, 65535] { R8924 += 1, R8880 += 1, R88 += 1 };
  s2 -> s1 [0, 69] { R8924 += 1, R8880 += 1, R88 += 1 };
  s2 -> s2 [0, 69] { R8924 += 1, R8880 += 1, R87 += 1, R88 += 1 };
  s2 -> s4 [70, 70] { R8924 += 1, R8880 += 1, R87 += 1, R88 += 1 };
  s2 -> s5 [70, 70] { R8924 += 1, R8880 += 1, R88 += 1 };
  s2 -> s6 [70, 70] { R8924 += 1, R8880 += 1, R87 += 1, R88 += 1 };
  s2 -> s7 [70, 70] { R8924 += 1, R8880 += 1, R88 += 1 };
  s2 -> s1 [71, 74] { R8924 += 1, R8880 += 1, R88 += 1 };
  s2 -> s2 [71, 65535] { R8924 += 1, R8880 += 1, R87 += 1, R88 += 1 };
  s2 -> s8 [75, 75] { R8924 += 1, R8880 += 1, R88 += 1 };
  s2 -> s1 [76, 65535] { R8924 += 1, R8880 += 1, R88 += 1 };
  s3 -> s1 [0, 69] { R8924 += 1, R8880 += 1, R88 += 1 };
  s3 -> s2 [0, 69] { R8924 += 1, R8880 += 1, R87 += 1, R88 += 1 };
  s3 -> s3 [0, 65535] { R8924 += 1, R8879 += 1, R8880 += 1 };
  s3 -> s4 [70, 70] { R8924 += 1, R8880 += 1, R87 += 1, R88 += 1 };
  s3 -> s5 [70, 70] { R8924 += 1, R8880 += 1, R88 += 1 };
  s3 -> s6 [70, 70] { R8924 += 1, R8880 += 1, R87 += 1, R88 += 1 };
  s3 -> s7 [70, 70] { R8924 += 1, R8880 += 1, R88 += 1 };
  s3 -> s1 [71, 74] { R8924 += 1, R8880 += 1, R88 += 1 };
  s3 -> s2 [71, 65535] { R8924 += 1, R8880 += 1, R87 += 1, R88 += 1 };
  s3 -> s8 [75, 75] { R8924 += 1, R8880 += 1, R88 += 1 };
  s3 -> s1 [76, 65535] { R8924 += 1, R8880 += 1, R88 += 1 };
  s6 -> s7 [0, 74] { R8924 += 1, R8880 += 1, R88 += 1 };
  s6 -> s6 [0, 65535] { R8924 += 1, R8880 += 1, R87 += 1, R88 += 1 };
  s6 -> s10 [75, 75] { R8924 += 1, R8880 += 1, R88 += 1 };
  s6 -> s7 [76, 65535] { R8924 += 1, R8880 += 1, R88 += 1 };
  s7 -> s7 [0, 74] { R8924 += 1, R8880 += 1, R88 += 1 };
  s7 -> s10 [75, 75] { R8924 += 1, R8880 += 1, R88 += 1 };
  s7 -> s7 [76, 65535] { R8924 += 1, R8880 += 1, R88 += 1 };
  s8 -> s8 [0, 69] { R8924 += 1, R8880 += 1, R88 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R8924 += 1 };
  s8 -> s10 [70, 70] { R8924 += 1, R8880 += 1, R88 += 1 };
  s8 -> s11 [70, 70] { R8924 += 1, R8880 += 1, R88 += 1 };
  s8 -> s8 [71, 65535] { R8924 += 1, R8880 += 1, R88 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R8924 += 1, R8880 += 1, R88 += 1 };
  s10 -> s9 [0, 65535];
  s10 -> s12 [0, 65535] { R8924 += 1 };
  s11 -> s11 [0, 65535] { R8924 += 1 };
  s11 -> s9 [0, 65535];
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R8924 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 69] { R8926 += 1, R8882 += 1, R91 += 1, R92 += 1 };
  s0 -> s0 [0, 65535] { R8925 += 1, R8926 += 1 };
  s0 -> s2 [0, 65535] { R8926 += 1, R8881 += 1, R8882 += 1 };
  s0 -> s3 [70, 70] { R8926 += 1, R8882 += 1, R91 += 1, R92 += 1 };
  s0 -> s4 [70, 70] { R8926 += 1, R8882 += 1, R91 += 1, R92 += 1 };
  s0 -> s1 [71, 65535] { R8926 += 1, R8882 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 69] { R8926 += 1, R8882 += 1, R91 += 1, R92 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R8926 += 1 };
  s1 -> s3 [70, 70] { R8926 += 1, R8882 += 1, R91 += 1, R92 += 1 };
  s1 -> s4 [70, 70] { R8926 += 1, R8882 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [71, 65535] { R8926 += 1, R8882 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [0, 69] { R8926 += 1, R8882 += 1, R91 += 1, R92 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R8926 += 1, R8881 += 1, R8882 += 1 };
  s2 -> s3 [70, 70] { R8926 += 1, R8882 += 1, R91 += 1, R92 += 1 };
  s2 -> s4 [70, 70] { R8926 += 1, R8882 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [71, 65535] { R8926 += 1, R8882 += 1, R91 += 1, R92 += 1 };
  s3 -> s3 [0, 65535] { R8926 += 1, R8882 += 1, R91 += 1, R92 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R8926 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8926 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8926 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 69] { R8928 += 1, R8884 += 1, R6806 += 1, R6807 += 1 };
  s0 -> s2 [0, 69] { R8928 += 1, R8884 += 1, R6805 += 1, R6806 += 1 };
  s0 -> s0 [0, 65535] { R8927 += 1, R8928 += 1 };
  s0 -> s3 [0, 65535] { R8928 += 1, R8883 += 1, R8884 += 1 };
  s0 -> s4 [70, 70] { R8928 += 1, R8884 += 1, R6806 += 1, R6807 += 1 };
  s0 -> s5 [70, 70] { R8928 += 1, R8884 += 1, R6806 += 1, R6807 += 1 };
  s0 -> s6 [70, 70] { R8928 += 1, R8884 += 1, R6805 += 1, R6806 += 1 };
  s0 -> s7 [70, 70] { R8928 += 1, R8884 += 1, R6805 += 1, R6806 += 1 };
  s0 -> s1 [71, 65535] { R8928 += 1, R8884 += 1, R6806 += 1, R6807 += 1 };
  s0 -> s2 [71, 65535] { R8928 += 1, R8884 += 1, R6805 += 1, R6806 += 1 };
  s1 -> s1 [0, 69] { R8928 += 1, R8884 += 1, R6806 += 1, R6807 += 1 };
  s1 -> s1 [0, 65535] { R8928 += 1 };
  s1 -> s9 [0, 65535];
  s1 -> s4 [70, 70] { R8928 += 1, R8884 += 1, R6806 += 1, R6807 += 1 };
  s1 -> s5 [70, 70] { R8928 += 1, R8884 += 1, R6806 += 1, R6807 += 1 };
  s1 -> s1 [71, 65535] { R8928 += 1, R8884 += 1, R6806 += 1, R6807 += 1 };
  s2 -> s1 [0, 69] { R8928 += 1, R8884 += 1, R6806 += 1, R6807 += 1 };
  s2 -> s2 [0, 69] { R8928 += 1, R8884 += 1, R6805 += 1, R6806 += 1 };
  s2 -> s4 [70, 70] { R8928 += 1, R8884 += 1, R6806 += 1, R6807 += 1 };
  s2 -> s5 [70, 70] { R8928 += 1, R8884 += 1, R6806 += 1, R6807 += 1 };
  s2 -> s6 [70, 70] { R8928 += 1, R8884 += 1, R6805 += 1, R6806 += 1 };
  s2 -> s7 [70, 70] { R8928 += 1, R8884 += 1, R6805 += 1, R6806 += 1 };
  s2 -> s1 [71, 65535] { R8928 += 1, R8884 += 1, R6806 += 1, R6807 += 1 };
  s2 -> s2 [71, 65535] { R8928 += 1, R8884 += 1, R6805 += 1, R6806 += 1 };
  s3 -> s1 [0, 69] { R8928 += 1, R8884 += 1, R6806 += 1, R6807 += 1 };
  s3 -> s2 [0, 69] { R8928 += 1, R8884 += 1, R6805 += 1, R6806 += 1 };
  s3 -> s3 [0, 65535] { R8928 += 1, R8883 += 1, R8884 += 1 };
  s3 -> s4 [70, 70] { R8928 += 1, R8884 += 1, R6806 += 1, R6807 += 1 };
  s3 -> s5 [70, 70] { R8928 += 1, R8884 += 1, R6806 += 1, R6807 += 1 };
  s3 -> s6 [70, 70] { R8928 += 1, R8884 += 1, R6805 += 1, R6806 += 1 };
  s3 -> s7 [70, 70] { R8928 += 1, R8884 += 1, R6805 += 1, R6806 += 1 };
  s3 -> s1 [71, 65535] { R8928 += 1, R8884 += 1, R6806 += 1, R6807 += 1 };
  s3 -> s2 [71, 65535] { R8928 += 1, R8884 += 1, R6805 += 1, R6806 += 1 };
  s4 -> s4 [0, 65535] { R8928 += 1 };
  s4 -> s9 [0, 65535];
  s5 -> s8 [0, 65535] { R8928 += 1 };
  s5 -> s5 [0, 65535] { R8928 += 1, R8884 += 1, R6806 += 1, R6807 += 1 };
  s5 -> s9 [0, 65535];
  s7 -> s5 [0, 65535] { R8928 += 1, R8884 += 1, R6806 += 1, R6807 += 1 };
  s7 -> s7 [0, 65535] { R8928 += 1, R8884 += 1, R6805 += 1, R6806 += 1 };
  s8 -> s8 [0, 65535] { R8928 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s4, s8, s5, s9, s1;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 69] { R8930 += 1, R8886 += 1, R8485 += 1, R8486 += 1 };
  s0 -> s0 [0, 65535] { R8929 += 1, R8930 += 1 };
  s0 -> s2 [0, 65535] { R8930 += 1, R8885 += 1, R8886 += 1 };
  s0 -> s3 [70, 70] { R8930 += 1, R8886 += 1, R8485 += 1, R8486 += 1 };
  s0 -> s4 [70, 70] { R8930 += 1, R8886 += 1, R8485 += 1, R8486 += 1 };
  s0 -> s1 [71, 65535] { R8930 += 1, R8886 += 1, R8485 += 1, R8486 += 1 };
  s1 -> s1 [0, 69] { R8930 += 1, R8886 += 1, R8485 += 1, R8486 += 1 };
  s1 -> s1 [0, 65535] { R8930 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [70, 70] { R8930 += 1, R8886 += 1, R8485 += 1, R8486 += 1 };
  s1 -> s4 [70, 70] { R8930 += 1, R8886 += 1, R8485 += 1, R8486 += 1 };
  s1 -> s1 [71, 65535] { R8930 += 1, R8886 += 1, R8485 += 1, R8486 += 1 };
  s2 -> s1 [0, 69] { R8930 += 1, R8886 += 1, R8485 += 1, R8486 += 1 };
  s2 -> s2 [0, 65535] { R8930 += 1, R8885 += 1, R8886 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [70, 70] { R8930 += 1, R8886 += 1, R8485 += 1, R8486 += 1 };
  s2 -> s4 [70, 70] { R8930 += 1, R8886 += 1, R8485 += 1, R8486 += 1 };
  s2 -> s1 [71, 65535] { R8930 += 1, R8886 += 1, R8485 += 1, R8486 += 1 };
  s3 -> s3 [0, 65535] { R8930 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R8930 += 1 };
  s4 -> s4 [0, 65535] { R8930 += 1, R8886 += 1, R8485 += 1, R8486 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R8930 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 69] { R8932 += 1, R8888 += 1, R8824 += 1, R8825 += 1, R8826 += 1 };
  s0 -> s2 [0, 69] { R8932 += 1, R8888 += 1, R8823 += 1, R8824 += 1 };
  s0 -> s3 [0, 69] { R8932 += 1, R8888 += 1, R8824 += 1, R8826 += 1, R8827 += 1 };
  s0 -> s0 [0, 65535] { R8931 += 1, R8932 += 1 };
  s0 -> s4 [0, 65535] { R8932 += 1, R8887 += 1, R8888 += 1 };
  s0 -> s5 [70, 70] { R8932 += 1, R8888 += 1, R8824 += 1, R8825 += 1, R8826 += 1 };
  s0 -> s6 [70, 70] { R8932 += 1, R8888 += 1, R8824 += 1, R8825 += 1, R8826 += 1 };
  s0 -> s7 [70, 70] { R8932 += 1, R8888 += 1, R8823 += 1, R8824 += 1 };
  s0 -> s8 [70, 70] { R8932 += 1, R8888 += 1, R8824 += 1, R8826 += 1, R8827 += 1 };
  s0 -> s9 [70, 70] { R8932 += 1, R8888 += 1, R8823 += 1, R8824 += 1 };
  s0 -> s10 [70, 70] { R8932 += 1, R8888 += 1, R8824 += 1, R8826 += 1, R8827 += 1 };
  s0 -> s1 [71, 65535] { R8932 += 1, R8888 += 1, R8824 += 1, R8825 += 1, R8826 += 1 };
  s0 -> s2 [71, 65535] { R8932 += 1, R8888 += 1, R8823 += 1, R8824 += 1 };
  s0 -> s3 [71, 65535] { R8932 += 1, R8888 += 1, R8824 += 1, R8826 += 1, R8827 += 1 };
  s1 -> s1 [0, 69] { R8932 += 1, R8888 += 1, R8824 += 1, R8825 += 1, R8826 += 1 };
  s1 -> s3 [0, 69] { R8932 += 1, R8888 += 1, R8824 += 1, R8826 += 1, R8827 += 1 };
  s1 -> s5 [70, 70] { R8932 += 1, R8888 += 1, R8824 += 1, R8825 += 1, R8826 += 1 };
  s1 -> s6 [70, 70] { R8932 += 1, R8888 += 1, R8824 += 1, R8825 += 1, R8826 += 1 };
  s1 -> s8 [70, 70] { R8932 += 1, R8888 += 1, R8824 += 1, R8826 += 1, R8827 += 1 };
  s1 -> s10 [70, 70] { R8932 += 1, R8888 += 1, R8824 += 1, R8826 += 1, R8827 += 1 };
  s1 -> s1 [71, 65535] { R8932 += 1, R8888 += 1, R8824 += 1, R8825 += 1, R8826 += 1 };
  s1 -> s3 [71, 65535] { R8932 += 1, R8888 += 1, R8824 += 1, R8826 += 1, R8827 += 1 };
  s2 -> s1 [0, 69] { R8932 += 1, R8888 += 1, R8824 += 1, R8825 += 1, R8826 += 1 };
  s2 -> s2 [0, 69] { R8932 += 1, R8888 += 1, R8823 += 1, R8824 += 1 };
  s2 -> s3 [0, 69] { R8932 += 1, R8888 += 1, R8824 += 1, R8826 += 1, R8827 += 1 };
  s2 -> s5 [70, 70] { R8932 += 1, R8888 += 1, R8824 += 1, R8825 += 1, R8826 += 1 };
  s2 -> s6 [70, 70] { R8932 += 1, R8888 += 1, R8824 += 1, R8825 += 1, R8826 += 1 };
  s2 -> s7 [70, 70] { R8932 += 1, R8888 += 1, R8823 += 1, R8824 += 1 };
  s2 -> s8 [70, 70] { R8932 += 1, R8888 += 1, R8824 += 1, R8826 += 1, R8827 += 1 };
  s2 -> s9 [70, 70] { R8932 += 1, R8888 += 1, R8823 += 1, R8824 += 1 };
  s2 -> s10 [70, 70] { R8932 += 1, R8888 += 1, R8824 += 1, R8826 += 1, R8827 += 1 };
  s2 -> s1 [71, 65535] { R8932 += 1, R8888 += 1, R8824 += 1, R8825 += 1, R8826 += 1 };
  s2 -> s2 [71, 65535] { R8932 += 1, R8888 += 1, R8823 += 1, R8824 += 1 };
  s2 -> s3 [71, 65535] { R8932 += 1, R8888 += 1, R8824 += 1, R8826 += 1, R8827 += 1 };
  s3 -> s3 [0, 69] { R8932 += 1, R8888 += 1, R8824 += 1, R8826 += 1, R8827 += 1 };
  s3 -> s12 [0, 65535];
  s3 -> s3 [0, 65535] { R8932 += 1 };
  s3 -> s8 [70, 70] { R8932 += 1, R8888 += 1, R8824 += 1, R8826 += 1, R8827 += 1 };
  s3 -> s10 [70, 70] { R8932 += 1, R8888 += 1, R8824 += 1, R8826 += 1, R8827 += 1 };
  s3 -> s3 [71, 65535] { R8932 += 1, R8888 += 1, R8824 += 1, R8826 += 1, R8827 += 1 };
  s4 -> s1 [0, 69] { R8932 += 1, R8888 += 1, R8824 += 1, R8825 += 1, R8826 += 1 };
  s4 -> s2 [0, 69] { R8932 += 1, R8888 += 1, R8823 += 1, R8824 += 1 };
  s4 -> s3 [0, 69] { R8932 += 1, R8888 += 1, R8824 += 1, R8826 += 1, R8827 += 1 };
  s4 -> s4 [0, 65535] { R8932 += 1, R8887 += 1, R8888 += 1 };
  s4 -> s5 [70, 70] { R8932 += 1, R8888 += 1, R8824 += 1, R8825 += 1, R8826 += 1 };
  s4 -> s6 [70, 70] { R8932 += 1, R8888 += 1, R8824 += 1, R8825 += 1, R8826 += 1 };
  s4 -> s7 [70, 70] { R8932 += 1, R8888 += 1, R8823 += 1, R8824 += 1 };
  s4 -> s8 [70, 70] { R8932 += 1, R8888 += 1, R8824 += 1, R8826 += 1, R8827 += 1 };
  s4 -> s9 [70, 70] { R8932 += 1, R8888 += 1, R8823 += 1, R8824 += 1 };
  s4 -> s10 [70, 70] { R8932 += 1, R8888 += 1, R8824 += 1, R8826 += 1, R8827 += 1 };
  s4 -> s1 [71, 65535] { R8932 += 1, R8888 += 1, R8824 += 1, R8825 += 1, R8826 += 1 };
  s4 -> s2 [71, 65535] { R8932 += 1, R8888 += 1, R8823 += 1, R8824 += 1 };
  s4 -> s3 [71, 65535] { R8932 += 1, R8888 += 1, R8824 += 1, R8826 += 1, R8827 += 1 };
  s6 -> s6 [0, 65535] { R8932 += 1, R8888 += 1, R8824 += 1, R8825 += 1, R8826 += 1 };
  s6 -> s10 [0, 65535] { R8932 += 1, R8888 += 1, R8824 += 1, R8826 += 1, R8827 += 1 };
  s8 -> s12 [0, 65535];
  s8 -> s8 [0, 65535] { R8932 += 1 };
  s9 -> s6 [0, 65535] { R8932 += 1, R8888 += 1, R8824 += 1, R8825 += 1, R8826 += 1 };
  s9 -> s9 [0, 65535] { R8932 += 1, R8888 += 1, R8823 += 1, R8824 += 1 };
  s9 -> s10 [0, 65535] { R8932 += 1, R8888 += 1, R8824 += 1, R8826 += 1, R8827 += 1 };
  s10 -> s11 [0, 65535] { R8932 += 1 };
  s10 -> s12 [0, 65535];
  s10 -> s10 [0, 65535] { R8932 += 1, R8888 += 1, R8824 += 1, R8826 += 1, R8827 += 1 };
  s11 -> s11 [0, 65535] { R8932 += 1 };
  s11 -> s12 [0, 65535];
  s12 -> s12 [0, 65535];
  accepting s3, s12, s8, s10, s11;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [102, 102];
  accepting s1;
};
};
constraint R2 = R8850 && R3 = R8932 && R23 - R8932 = -1 && R24 = R8932 && R25 - R8932 = -1 && R26 = R8932 && R27 = 0 && R28 = 1 && R29 = 0 && R30 = 1 && R45 + R84 + R83 + -1*R8490 + -1*R8486 - R66 = 0 && R49 + R89 + R87 = 0 && R50 + R90 + R88 + -1*R8490 + -1*R8486 - R66 = 0 && R55 + R96 + R93 + -1*R8492 + -1*R8488 - R68 = 0 && R65 + R8489 + R8485 = 0 && R67 + R8491 + R8487 = 0 && R8849 = 0 && R8873 = 0 && R8874 = 0 && R8879 = 0 && R8880 = 0 && R8883 = 0 && R8884 = 0 && R8887 = 0 && R8888 = 0 && R8889 = 0 && R8890 = R8932 && R8891 = 0 && R8892 = R8932 && R8893 = 0 && R8894 = R8932 && R8895 = 0 && R8896 = R8932 && R8897 = 0 && R8898 = R8932 && R8899 = 0 && R8900 = R8932 && R8901 = 0 && R8902 = R8932 && R8903 = 0 && R8904 = R8932 && R8905 = 0 && R8906 = R8932 && R8907 = 0 && R8908 = R8932 && R8909 = 0 && R8910 = R8932 && R8911 = 0 && R8912 = R8932 && R8913 = 0 && R8914 = R8932 && R8915 = 0 && R8916 = R8932 && R8917 = 0 && R8918 = R8932 && R8919 = 0 && R8920 = R8932 && R8921 = 0 && R8922 = R8932 && R8923 = 0 && R8924 = R8932 && R8925 = 0 && R8926 = R8932 && R8927 = 0 && R8928 = R8932 && R8929 = 0 && R8930 = R8932 && R8931 = 0 && R12 < 1 && R15 < 1 && R16 < 1 && R47 + R86 + R85 < 1 && R61 + R6810 + R6807 < 1 && -1*R8490 + -1*R8486 - R66 < 1 && -1*R8492 + -1*R8488 - R68 < 1 && -1 < R8850 && 0 < R8932 && (R53 + R94 + R91 != 0 || R54 + R95 + R92 + -1*R8490 + -1*R8486 - R66 = 0 || R66 + R8490 + R8486 < 1) && (R59 + R6808 + R6805 != 0 || R60 + R6809 + R6806 + -1*R8490 + -1*R8486 - R66 = 0 || R66 + R8490 + R8486 < 1) && (R66 + R8490 + R8486 != 0 || ((R53 + R94 + R91 != 0 || R54 + R95 + R92 = 0 || R68 + R8492 + R8488 < 1) && (R53 + R94 + R91 = 0 || R68 + R8492 + R8488 < 1))) && (R66 + R8490 + R8486 != 0 || ((R59 + R6808 + R6805 != 0 || R60 + R6809 + R6806 = 0 || R68 + R8492 + R8488 < 1) && (R59 + R6808 + R6805 = 0 || R68 + R8492 + R8488 < 1))) && (R66 + R8490 + R8486 != 0 || ((R73 + R8828 + R8823 != 0 || R74 + R8829 + R8824 = 0 || R68 + R8492 + R8488 < 1) && (R73 + R8828 + R8823 = 0 || R68 + R8492 + R8488 < 1))) && (R68 + R8492 + R8488 != 0 || R77 + R8832 + R8827 = 0 || (R75 + R8830 + R8825 = 0 && R76 + R8831 + R8826 = 0)) && (R73 + R8828 + R8823 != 0 || R66 + R8490 + R8486 + -1*R8829 + -1*R8824 - R74 = 0 || R66 + R8490 + R8486 < 1) && (R75 + R8830 + R8825 != 0 || R68 + R8492 + R8488 + -1*R8831 + -1*R8826 - R76 = 0 || R68 + R8492 + R8488 < 1) && (R8833 != 0 || R8834 = R8850 || (R20 = 0 && R8850 = 0)) && (R8835 != 0 || R8836 = R8850 || (R20 = 0 && R8850 = 0)) && (R8837 != 0 || R8838 = R8850 || (R20 = 0 && R8850 = 0)) && (R8839 != 0 || R8840 = R8850 || (R20 = 0 && R8850 = 0)) && (R8841 != 0 || R8842 = R8850 || (R20 = 0 && R8850 = 0)) && (R8843 != 0 || R8844 = R8850 || (R20 = 0 && R8850 = 0)) && (R8845 != 0 || R8846 = R8850 || (R20 = 0 && R8850 = 0)) && (R8847 != 0 || R8848 = R8850 || (R20 = 0 && R8850 = 0)) && (R8851 != 0 || R8850 = R8852 || (R20 = 0 && R8850 = 0)) && (R21 = 0 || (R8871 = 0 && R8872 = 0)) && (R21 = 0 || (R8875 = 0 && R8876 = 0)) && (R21 = 0 || (R8877 = 0 && R8878 = 0)) && (R21 = 0 || (R8881 = 0 && R8882 = 0)) && (R21 = 0 || (R8885 = 0 && R8886 = 0)) && (R22 = 0 || (R8853 = 0 && R8854 = 0)) && (R22 = 0 || (R8855 = 0 && R8856 = 0)) && (R22 = 0 || (R8857 = 0 && R8858 = 0)) && (R22 = 0 || (R8859 = 0 && R8860 = 0)) && (R22 = 0 || (R8861 = 0 && R8862 = 0)) && (R22 = 0 || (R8863 = 0 && R8864 = 0)) && (R22 = 0 || (R8865 = 0 && R8866 = 0)) && (R22 = 0 || (R8867 = 0 && R8868 = 0)) && (R22 = 0 || (R8869 = 0 && R8870 = 0)) && (R53 + R94 + R91 = 0 || R66 + R8490 + R8486 < 1) && (R59 + R6808 + R6805 = 0 || R66 + R8490 + R8486 < 1) && (R73 + R8828 + R8823 = 0 || R66 + R8490 + R8486 < 1) && (R75 + R8830 + R8825 = 0 || R68 + R8492 + R8488 < 1) && (R8833 = 0 || (R20 = 0 && R8850 = 0)) && (R8835 = 0 || (R20 = 0 && R8850 = 0)) && (R8837 = 0 || (R20 = 0 && R8850 = 0)) && (R8839 = 0 || (R20 = 0 && R8850 = 0)) && (R8841 = 0 || (R20 = 0 && R8850 = 0)) && (R8843 = 0 || (R20 = 0 && R8850 = 0)) && (R8845 = 0 || (R20 = 0 && R8850 = 0)) && (R8847 = 0 || (R20 = 0 && R8850 = 0)) && (R8851 = 0 || (R20 = 0 && R8850 = 0));
// End of Parikh automata intersection problem
