// Parikh automata intersection problem, generated by OSTRICH+
counter int R12, R15, R16, R2, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R3451, R3452, R3453, R3454, R3455, R3456, R4, R45, R47, R49, R5, R50, R53, R54, R55, R5689, R5690, R5691, R5692, R5693, R5694, R5695, R5696, R5697, R5698, R5699, R5700, R5701, R5702, R5703, R5704, R5705, R5706, R5707, R5708, R5709, R5710, R5711, R5712, R5713, R5714, R5715, R5716, R5717, R5718, R5719, R5720, R5721, R5722, R5723, R5724, R5725, R5726, R5727, R5728, R5729, R5730, R5731, R5732, R5733, R5734, R5735, R5736, R5737, R5738, R5739, R5740, R5741, R5742, R5743, R5744, R5745, R5746, R5747, R5748, R5749, R5750, R5751, R5752, R5753, R5754, R5755, R5756, R5757, R5758, R5759, R5760, R5761, R5762, R5763, R5764, R5765, R5766, R5767, R5768, R5769, R5770, R5771, R5772, R5773, R5774, R5775, R5776, R5777, R5778, R5779, R5780, R5781, R5782, R5783, R5784, R5785, R5786, R5787, R5788, R5789, R5790, R5791, R5792, R5793, R5794, R5795, R5796, R5797, R5798, R5799, R5800, R5801, R5802, R5803, R5804, R5805, R5806, R59, R60, R61, R65, R66, R67, R68, R73, R74, R75, R76, R77, R83, R84, R85, R86, R87, R88, R89, R90, R91, R92, R93, R94, R95, R96;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [70, 70];
  s0 -> s0 [71, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [70, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R15 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 69];
  s0 -> s0 [0, 65535] { R16 += 1 };
  s0 -> s2 [70, 70];
  s0 -> s1 [71, 65535];
  s1 -> s1 [0, 69];
  s1 -> s2 [70, 70];
  s1 -> s1 [71, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R24 += 1 };
  s0 -> s0 [0, 65535] { R23 += 1, R24 += 1 };
  s0 -> s2 [9, 13] { R24 += 1 };
  s0 -> s1 [14, 31] { R24 += 1 };
  s0 -> s2 [32, 32] { R24 += 1 };
  s0 -> s1 [33, 65535] { R24 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R24 += 1 };
  s2 -> s1 [0, 65535] { R24 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R25 += 1, R26 += 1 };
  s1 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R28 += 1 };
  s0 -> s0 [0, 65535] { R27 += 1, R28 += 1 };
  s0 -> s2 [9, 13] { R28 += 1 };
  s0 -> s1 [14, 31] { R28 += 1 };
  s0 -> s2 [32, 32] { R28 += 1 };
  s0 -> s1 [33, 65535] { R28 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R28 += 1 };
  s2 -> s1 [0, 65535] { R28 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R29 += 1, R30 += 1 };
  s1 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R5727 += 1, R5728 += 1 };
  s0 -> s1 [0, 65535] { R5728 += 1, R22 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R5728 += 1, R22 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 69] { R5730 += 1 };
  s0 -> s0 [0, 65535] { R5729 += 1, R5730 += 1 };
  s0 -> s2 [70, 70] { R5730 += 1 };
  s0 -> s3 [70, 70] { R5730 += 1 };
  s0 -> s1 [76, 65535] { R5730 += 1 };
  s1 -> s1 [0, 69] { R5730 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R5730 += 1 };
  s1 -> s3 [70, 70] { R5730 += 1 };
  s1 -> s1 [76, 65535] { R5730 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 70] { R5730 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [76, 65535] { R5730 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 69] { R5732 += 1, R45 += 1 };
  s0 -> s0 [0, 65535] { R5731 += 1, R5732 += 1 };
  s0 -> s2 [70, 70] { R5732 += 1, R45 += 1 };
  s0 -> s3 [70, 70] { R5732 += 1, R45 += 1 };
  s0 -> s1 [71, 65535] { R5732 += 1, R45 += 1 };
  s1 -> s1 [0, 69] { R5732 += 1, R45 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R5732 += 1, R45 += 1 };
  s1 -> s3 [70, 70] { R5732 += 1, R45 += 1 };
  s1 -> s1 [71, 65535] { R5732 += 1, R45 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R5732 += 1, R45 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 69] { R5734 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R5733 += 1, R5734 += 1 };
  s0 -> s2 [70, 70] { R5734 += 1, R47 += 1 };
  s0 -> s3 [70, 70] { R5734 += 1, R47 += 1 };
  s0 -> s1 [71, 65535] { R5734 += 1, R47 += 1 };
  s1 -> s1 [0, 69] { R5734 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R5734 += 1, R47 += 1 };
  s1 -> s3 [70, 70] { R5734 += 1, R47 += 1 };
  s1 -> s1 [71, 65535] { R5734 += 1, R47 += 1 };
  s2 -> s2 [0, 65535] { R5734 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 69] { R5736 += 1, R49 += 1, R50 += 1 };
  s0 -> s0 [0, 65535] { R5735 += 1, R5736 += 1 };
  s0 -> s2 [70, 70] { R5736 += 1, R49 += 1, R50 += 1 };
  s0 -> s3 [70, 70] { R5736 += 1, R49 += 1, R50 += 1 };
  s0 -> s1 [71, 65535] { R5736 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 69] { R5736 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R5736 += 1, R49 += 1, R50 += 1 };
  s1 -> s3 [70, 70] { R5736 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [71, 65535] { R5736 += 1, R49 += 1, R50 += 1 };
  s2 -> s2 [0, 65535] { R5736 += 1, R49 += 1, R50 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 69] { R5738 += 1, R53 += 1, R54 += 1 };
  s0 -> s0 [0, 65535] { R5737 += 1, R5738 += 1 };
  s0 -> s2 [70, 70] { R5738 += 1, R53 += 1, R54 += 1 };
  s0 -> s3 [70, 70] { R5738 += 1, R53 += 1, R54 += 1 };
  s0 -> s1 [71, 65535] { R5738 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 69] { R5738 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R5738 += 1, R53 += 1, R54 += 1 };
  s1 -> s3 [70, 70] { R5738 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [71, 65535] { R5738 += 1, R53 += 1, R54 += 1 };
  s2 -> s2 [0, 65535] { R5738 += 1, R53 += 1, R54 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 69] { R5740 += 1, R59 += 1, R60 += 1 };
  s0 -> s0 [0, 65535] { R5739 += 1, R5740 += 1 };
  s0 -> s2 [70, 70] { R5740 += 1, R59 += 1, R60 += 1 };
  s0 -> s3 [70, 70] { R5740 += 1, R59 += 1, R60 += 1 };
  s0 -> s1 [71, 65535] { R5740 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 69] { R5740 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R5740 += 1, R59 += 1, R60 += 1 };
  s1 -> s3 [70, 70] { R5740 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [71, 65535] { R5740 += 1, R59 += 1, R60 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R5740 += 1, R59 += 1, R60 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 69] { R5742 += 1, R65 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R5741 += 1, R5742 += 1 };
  s0 -> s2 [70, 70] { R5742 += 1, R65 += 1, R66 += 1 };
  s0 -> s3 [70, 70] { R5742 += 1, R65 += 1, R66 += 1 };
  s0 -> s1 [71, 65535] { R5742 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 69] { R5742 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R5742 += 1, R65 += 1, R66 += 1 };
  s1 -> s3 [70, 70] { R5742 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [71, 65535] { R5742 += 1, R65 += 1, R66 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R5742 += 1, R65 += 1, R66 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 69] { R5744 += 1, R73 += 1, R74 += 1 };
  s0 -> s0 [0, 65535] { R5743 += 1, R5744 += 1 };
  s0 -> s2 [70, 70] { R5744 += 1, R73 += 1, R74 += 1 };
  s0 -> s3 [70, 70] { R5744 += 1, R73 += 1, R74 += 1 };
  s0 -> s1 [71, 65535] { R5744 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 69] { R5744 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R5744 += 1, R73 += 1, R74 += 1 };
  s1 -> s3 [70, 70] { R5744 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [71, 65535] { R5744 += 1, R73 += 1, R74 += 1 };
  s2 -> s2 [0, 65535] { R5744 += 1, R73 += 1, R74 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 69] { R5764 += 1 };
  s0 -> s0 [0, 65535] { R5763 += 1, R5764 += 1 };
  s0 -> s2 [70, 70] { R5764 += 1 };
  s0 -> s1 [71, 65535] { R5764 += 1 };
  s1 -> s1 [0, 69] { R5764 += 1 };
  s1 -> s2 [70, 70] { R5764 += 1 };
  s1 -> s1 [71, 65535] { R5764 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R5764 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R5766 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R5765 += 1, R5766 += 1 };
  s1 -> s1 [0, 65535] { R5766 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 69] { R5768 += 1 };
  s0 -> s2 [0, 65535] { R5768 += 1, R12 += 1 };
  s0 -> s0 [0, 65535] { R5767 += 1, R5768 += 1 };
  s0 -> s3 [70, 70] { R5768 += 1 };
  s0 -> s1 [71, 65535] { R5768 += 1 };
  s1 -> s1 [0, 69] { R5768 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [70, 70] { R5768 += 1 };
  s1 -> s1 [71, 65535] { R5768 += 1 };
  s2 -> s1 [0, 69] { R5768 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R5768 += 1, R12 += 1 };
  s2 -> s3 [70, 70] { R5768 += 1 };
  s2 -> s1 [71, 65535] { R5768 += 1 };
  s3 -> s3 [0, 65535] { R5768 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 69] { R5770 += 1, R5708 += 1 };
  s0 -> s2 [0, 65535] { R5770 += 1, R5707 += 1, R5708 += 1 };
  s0 -> s0 [0, 65535] { R5769 += 1, R5770 += 1 };
  s0 -> s1 [71, 65535] { R5770 += 1, R5708 += 1 };
  s1 -> s1 [0, 69] { R5770 += 1, R5708 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R5770 += 1 };
  s1 -> s1 [71, 65535] { R5770 += 1, R5708 += 1 };
  s2 -> s1 [0, 69] { R5770 += 1, R5708 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R5770 += 1, R5707 += 1, R5708 += 1 };
  s2 -> s1 [71, 65535] { R5770 += 1, R5708 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s0 [0, 65535] { R5771 += 1, R5772 += 1 };
  s0 -> s1 [0, 65535] { R5772 += 1, R5710 += 1, R20 += 1 };
  s0 -> s2 [0, 65535] { R5772 += 1, R5709 += 1, R5710 += 1 };
  s1 -> s4 [0, 65535] { R5772 += 1 };
  s1 -> s1 [0, 65535] { R5772 += 1, R5710 += 1, R20 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R5772 += 1, R5710 += 1, R20 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R5772 += 1, R5709 += 1, R5710 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R5772 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 70] { R5774 += 1, R5712 += 1 };
  s0 -> s2 [0, 65535] { R5774 += 1, R5711 += 1, R5712 += 1 };
  s0 -> s0 [0, 65535] { R5773 += 1, R5774 += 1 };
  s0 -> s1 [75, 65535] { R5774 += 1, R5712 += 1 };
  s1 -> s1 [0, 70] { R5774 += 1, R5712 += 1 };
  s1 -> s1 [0, 65535] { R5774 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [75, 65535] { R5774 += 1, R5712 += 1 };
  s2 -> s1 [0, 70] { R5774 += 1, R5712 += 1 };
  s2 -> s2 [0, 65535] { R5774 += 1, R5711 += 1, R5712 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [75, 65535] { R5774 += 1, R5712 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s0 [0, 65535] { R5775 += 1, R5776 += 1 };
  s0 -> s1 [0, 65535] { R5776 += 1, R5714 += 1, R84 += 1 };
  s0 -> s2 [0, 65535] { R5776 += 1, R5713 += 1, R5714 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R5776 += 1, R5714 += 1, R84 += 1 };
  s1 -> s4 [0, 65535] { R5776 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R5776 += 1, R5714 += 1, R84 += 1 };
  s2 -> s2 [0, 65535] { R5776 += 1, R5713 += 1, R5714 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R5776 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 74] { R5778 += 1, R5716 += 1 };
  s0 -> s2 [0, 65535] { R5778 += 1, R5716 += 1, R86 += 1 };
  s0 -> s0 [0, 65535] { R5777 += 1, R5778 += 1 };
  s0 -> s3 [0, 65535] { R5778 += 1, R5715 += 1, R5716 += 1 };
  s0 -> s1 [76, 65535] { R5778 += 1, R5716 += 1 };
  s1 -> s1 [0, 74] { R5778 += 1, R5716 += 1 };
  s1 -> s1 [0, 65535] { R5778 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [76, 65535] { R5778 += 1, R5716 += 1 };
  s2 -> s1 [0, 74] { R5778 += 1, R5716 += 1 };
  s2 -> s2 [0, 65535] { R5778 += 1, R5716 += 1, R86 += 1 };
  s2 -> s5 [0, 65535] { R5778 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [76, 65535] { R5778 += 1, R5716 += 1 };
  s3 -> s1 [0, 74] { R5778 += 1, R5716 += 1 };
  s3 -> s2 [0, 65535] { R5778 += 1, R5716 += 1, R86 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R5778 += 1, R5715 += 1, R5716 += 1 };
  s3 -> s1 [76, 65535] { R5778 += 1, R5716 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R5778 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 65535] { R5780 += 1, R5718 += 1 };
  s0 -> s0 [0, 65535] { R5779 += 1, R5780 += 1 };
  s0 -> s2 [0, 65535] { R5780 += 1, R5717 += 1, R5718 += 1 };
  s0 -> s3 [0, 65535] { R5780 += 1, R5718 += 1, R90 += 1 };
  s1 -> s1 [0, 65535] { R5780 += 1, R5718 += 1 };
  s1 -> s4 [0, 65535] { R5780 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R5780 += 1, R5718 += 1 };
  s2 -> s2 [0, 65535] { R5780 += 1, R5717 += 1, R5718 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R5780 += 1, R5718 += 1, R90 += 1 };
  s3 -> s1 [0, 65535] { R5780 += 1, R5718 += 1 };
  s3 -> s4 [0, 65535] { R5780 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R5780 += 1, R5718 += 1, R90 += 1 };
  s4 -> s4 [0, 65535] { R5780 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R5782 += 1, R5719 += 1, R5720 += 1 };
  s0 -> s2 [0, 65535] { R5782 += 1, R5720 += 1, R95 += 1, R96 += 1 };
  s0 -> s0 [0, 65535] { R5781 += 1, R5782 += 1 };
  s0 -> s3 [0, 65535] { R5782 += 1, R5720 += 1, R94 += 1, R95 += 1 };
  s1 -> s1 [0, 65535] { R5782 += 1, R5719 += 1, R5720 += 1 };
  s1 -> s2 [0, 65535] { R5782 += 1, R5720 += 1, R95 += 1, R96 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s3 [0, 65535] { R5782 += 1, R5720 += 1, R94 += 1, R95 += 1 };
  s2 -> s2 [0, 65535] { R5782 += 1, R5720 += 1, R95 += 1, R96 += 1 };
  s2 -> s6 [0, 65535] { R5782 += 1, R5720 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R5782 += 1 };
  s3 -> s2 [0, 65535] { R5782 += 1, R5720 += 1, R95 += 1, R96 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R5782 += 1, R5720 += 1, R94 += 1, R95 += 1 };
  s3 -> s5 [0, 65535] { R5782 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R5782 += 1 };
  s6 -> s6 [0, 65535] { R5782 += 1, R5720 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R5782 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 74] { R5784 += 1, R5722 += 1, R3455 += 1 };
  s0 -> s0 [0, 65535] { R5783 += 1, R5784 += 1 };
  s0 -> s1 [0, 65535] { R5784 += 1, R5722 += 1 };
  s0 -> s2 [0, 65535] { R5784 += 1, R5721 += 1, R5722 += 1 };
  s0 -> s1 [76, 65535] { R5784 += 1, R5722 += 1, R3455 += 1 };
  s1 -> s1 [0, 74] { R5784 += 1, R5722 += 1, R3455 += 1 };
  s1 -> s4 [0, 65535] { R5784 += 1 };
  s1 -> s1 [0, 65535] { R5784 += 1, R5722 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [76, 65535] { R5784 += 1, R5722 += 1, R3455 += 1 };
  s2 -> s1 [0, 74] { R5784 += 1, R5722 += 1, R3455 += 1 };
  s2 -> s1 [0, 65535] { R5784 += 1, R5722 += 1 };
  s2 -> s2 [0, 65535] { R5784 += 1, R5721 += 1, R5722 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [76, 65535] { R5784 += 1, R5722 += 1, R3455 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R5784 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 74] { R5786 += 1, R5724 += 1, R5694 += 1, R5696 += 1 };
  s0 -> s2 [0, 65535] { R5786 += 1, R5723 += 1, R5724 += 1 };
  s0 -> s0 [0, 65535] { R5785 += 1, R5786 += 1 };
  s0 -> s3 [75, 75] { R5786 += 1, R5724 += 1, R5694 += 1, R5696 += 1 };
  s0 -> s1 [76, 65535] { R5786 += 1, R5724 += 1, R5694 += 1, R5696 += 1 };
  s1 -> s1 [0, 74] { R5786 += 1, R5724 += 1, R5694 += 1, R5696 += 1 };
  s1 -> s3 [75, 75] { R5786 += 1, R5724 += 1, R5694 += 1, R5696 += 1 };
  s1 -> s1 [76, 65535] { R5786 += 1, R5724 += 1, R5694 += 1, R5696 += 1 };
  s2 -> s1 [0, 74] { R5786 += 1, R5724 += 1, R5694 += 1, R5696 += 1 };
  s2 -> s2 [0, 65535] { R5786 += 1, R5723 += 1, R5724 += 1 };
  s2 -> s3 [75, 75] { R5786 += 1, R5724 += 1, R5694 += 1, R5696 += 1 };
  s2 -> s1 [76, 65535] { R5786 += 1, R5724 += 1, R5694 += 1, R5696 += 1 };
  s3 -> s4 [0, 65535] { R5786 += 1, R5724 += 1 };
  s3 -> s5 [0, 65535] { R5786 += 1 };
  s3 -> s3 [0, 65535] { R5786 += 1, R5724 += 1, R5694 += 1, R5696 += 1 };
  s3 -> s6 [0, 65535] { R5786 += 1, R5724 += 1, R5694 += 1 };
  s3 -> s7 [0, 65535];
  s4 -> s4 [0, 65535] { R5786 += 1, R5724 += 1 };
  s4 -> s5 [0, 65535] { R5786 += 1 };
  s4 -> s7 [0, 65535];
  s5 -> s5 [0, 65535] { R5786 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s4 [0, 65535] { R5786 += 1, R5724 += 1 };
  s6 -> s5 [0, 65535] { R5786 += 1 };
  s6 -> s6 [0, 65535] { R5786 += 1, R5724 += 1, R5694 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s3, s4, s5, s6, s7;
};
automaton value2_29 {
  init s0;
  s0 -> s0 [0, 65535] { R5787 += 1, R5788 += 1 };
  s0 -> s1 [0, 65535] { R5788 += 1, R5726 += 1 };
  s0 -> s2 [0, 65535] { R5788 += 1, R5725 += 1, R5726 += 1 };
  s0 -> s3 [0, 65535] { R5788 += 1, R5726 += 1, R5703 += 1 };
  s1 -> s1 [0, 65535] { R5788 += 1, R5726 += 1 };
  s1 -> s4 [0, 65535] { R5788 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R5788 += 1, R5726 += 1 };
  s2 -> s2 [0, 65535] { R5788 += 1, R5725 += 1, R5726 += 1 };
  s2 -> s3 [0, 65535] { R5788 += 1, R5726 += 1, R5703 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s1 [0, 65535] { R5788 += 1, R5726 += 1 };
  s3 -> s4 [0, 65535] { R5788 += 1 };
  s3 -> s3 [0, 65535] { R5788 += 1, R5726 += 1, R5703 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R5788 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R5790 += 1, R5745 += 1, R5746 += 1 };
  s0 -> s2 [0, 65535] { R5790 += 1, R5746 += 1, R21 += 1 };
  s0 -> s0 [0, 65535] { R5789 += 1, R5790 += 1 };
  s1 -> s1 [0, 65535] { R5790 += 1, R5745 += 1, R5746 += 1 };
  s1 -> s2 [0, 65535] { R5790 += 1, R5746 += 1, R21 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R5790 += 1, R5746 += 1, R21 += 1 };
  s2 -> s3 [0, 65535] { R5790 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R5790 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 69] { R5792 += 1, R5748 += 1 };
  s0 -> s2 [0, 65535] { R5792 += 1, R5747 += 1, R5748 += 1 };
  s0 -> s0 [0, 65535] { R5791 += 1, R5792 += 1 };
  s0 -> s3 [70, 70] { R5792 += 1, R5748 += 1 };
  s0 -> s4 [70, 70] { R5792 += 1, R5748 += 1 };
  s0 -> s5 [75, 75] { R5792 += 1, R5748 += 1 };
  s0 -> s1 [76, 65535] { R5792 += 1, R5748 += 1 };
  s1 -> s1 [0, 69] { R5792 += 1, R5748 += 1 };
  s1 -> s3 [70, 70] { R5792 += 1, R5748 += 1 };
  s1 -> s4 [70, 70] { R5792 += 1, R5748 += 1 };
  s1 -> s5 [75, 75] { R5792 += 1, R5748 += 1 };
  s1 -> s1 [76, 65535] { R5792 += 1, R5748 += 1 };
  s2 -> s1 [0, 69] { R5792 += 1, R5748 += 1 };
  s2 -> s2 [0, 65535] { R5792 += 1, R5747 += 1, R5748 += 1 };
  s2 -> s3 [70, 70] { R5792 += 1, R5748 += 1 };
  s2 -> s4 [70, 70] { R5792 += 1, R5748 += 1 };
  s2 -> s5 [75, 75] { R5792 += 1, R5748 += 1 };
  s2 -> s1 [76, 65535] { R5792 += 1, R5748 += 1 };
  s3 -> s3 [0, 70] { R5792 += 1, R5748 += 1 };
  s3 -> s7 [75, 75] { R5792 += 1, R5748 += 1 };
  s3 -> s3 [76, 65535] { R5792 += 1, R5748 += 1 };
  s5 -> s5 [0, 69] { R5792 += 1, R5748 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R5792 += 1 };
  s5 -> s7 [70, 70] { R5792 += 1, R5748 += 1 };
  s5 -> s8 [70, 70] { R5792 += 1, R5748 += 1 };
  s5 -> s5 [75, 65535] { R5792 += 1, R5748 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 70] { R5792 += 1, R5748 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R5792 += 1 };
  s7 -> s7 [75, 65535] { R5792 += 1, R5748 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R5792 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 69] { R5794 += 1, R5750 += 1, R83 += 1 };
  s0 -> s2 [0, 65535] { R5794 += 1, R5749 += 1, R5750 += 1 };
  s0 -> s0 [0, 65535] { R5793 += 1, R5794 += 1 };
  s0 -> s3 [70, 70] { R5794 += 1, R5750 += 1, R83 += 1 };
  s0 -> s4 [70, 70] { R5794 += 1, R5750 += 1, R83 += 1 };
  s0 -> s1 [71, 65535] { R5794 += 1, R5750 += 1, R83 += 1 };
  s1 -> s1 [0, 69] { R5794 += 1, R5750 += 1, R83 += 1 };
  s1 -> s1 [0, 65535] { R5794 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [70, 70] { R5794 += 1, R5750 += 1, R83 += 1 };
  s1 -> s4 [70, 70] { R5794 += 1, R5750 += 1, R83 += 1 };
  s1 -> s1 [71, 65535] { R5794 += 1, R5750 += 1, R83 += 1 };
  s2 -> s1 [0, 69] { R5794 += 1, R5750 += 1, R83 += 1 };
  s2 -> s2 [0, 65535] { R5794 += 1, R5749 += 1, R5750 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [70, 70] { R5794 += 1, R5750 += 1, R83 += 1 };
  s2 -> s4 [70, 70] { R5794 += 1, R5750 += 1, R83 += 1 };
  s2 -> s1 [71, 65535] { R5794 += 1, R5750 += 1, R83 += 1 };
  s3 -> s3 [0, 65535] { R5794 += 1, R5750 += 1, R83 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R5794 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R5794 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R5794 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 69] { R5796 += 1, R5752 += 1, R85 += 1 };
  s0 -> s2 [0, 65535] { R5796 += 1, R5751 += 1, R5752 += 1 };
  s0 -> s0 [0, 65535] { R5795 += 1, R5796 += 1 };
  s0 -> s3 [70, 70] { R5796 += 1, R5752 += 1, R85 += 1 };
  s0 -> s4 [70, 70] { R5796 += 1, R5752 += 1, R85 += 1 };
  s0 -> s1 [71, 65535] { R5796 += 1, R5752 += 1, R85 += 1 };
  s1 -> s1 [0, 69] { R5796 += 1, R5752 += 1, R85 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R5796 += 1 };
  s1 -> s3 [70, 70] { R5796 += 1, R5752 += 1, R85 += 1 };
  s1 -> s4 [70, 70] { R5796 += 1, R5752 += 1, R85 += 1 };
  s1 -> s1 [71, 65535] { R5796 += 1, R5752 += 1, R85 += 1 };
  s2 -> s1 [0, 69] { R5796 += 1, R5752 += 1, R85 += 1 };
  s2 -> s2 [0, 65535] { R5796 += 1, R5751 += 1, R5752 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [70, 70] { R5796 += 1, R5752 += 1, R85 += 1 };
  s2 -> s4 [70, 70] { R5796 += 1, R5752 += 1, R85 += 1 };
  s2 -> s1 [71, 65535] { R5796 += 1, R5752 += 1, R85 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R5796 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R5796 += 1 };
  s4 -> s4 [0, 65535] { R5796 += 1, R5752 += 1, R85 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R5796 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 69] { R5798 += 1, R5754 += 1, R87 += 1, R88 += 1 };
  s0 -> s2 [0, 69] { R5798 += 1, R5754 += 1, R88 += 1 };
  s0 -> s0 [0, 65535] { R5797 += 1, R5798 += 1 };
  s0 -> s3 [0, 65535] { R5798 += 1, R5753 += 1, R5754 += 1 };
  s0 -> s4 [70, 70] { R5798 += 1, R5754 += 1, R88 += 1 };
  s0 -> s5 [70, 70] { R5798 += 1, R5754 += 1, R88 += 1 };
  s0 -> s6 [70, 70] { R5798 += 1, R5754 += 1, R87 += 1, R88 += 1 };
  s0 -> s7 [70, 70] { R5798 += 1, R5754 += 1, R87 += 1, R88 += 1 };
  s0 -> s2 [71, 74] { R5798 += 1, R5754 += 1, R88 += 1 };
  s0 -> s1 [71, 65535] { R5798 += 1, R5754 += 1, R87 += 1, R88 += 1 };
  s0 -> s8 [75, 75] { R5798 += 1, R5754 += 1, R88 += 1 };
  s0 -> s2 [76, 65535] { R5798 += 1, R5754 += 1, R88 += 1 };
  s1 -> s1 [0, 69] { R5798 += 1, R5754 += 1, R87 += 1, R88 += 1 };
  s1 -> s2 [0, 69] { R5798 += 1, R5754 += 1, R88 += 1 };
  s1 -> s4 [70, 70] { R5798 += 1, R5754 += 1, R88 += 1 };
  s1 -> s5 [70, 70] { R5798 += 1, R5754 += 1, R88 += 1 };
  s1 -> s6 [70, 70] { R5798 += 1, R5754 += 1, R87 += 1, R88 += 1 };
  s1 -> s7 [70, 70] { R5798 += 1, R5754 += 1, R87 += 1, R88 += 1 };
  s1 -> s2 [71, 74] { R5798 += 1, R5754 += 1, R88 += 1 };
  s1 -> s1 [71, 65535] { R5798 += 1, R5754 += 1, R87 += 1, R88 += 1 };
  s1 -> s8 [75, 75] { R5798 += 1, R5754 += 1, R88 += 1 };
  s1 -> s2 [76, 65535] { R5798 += 1, R5754 += 1, R88 += 1 };
  s2 -> s2 [0, 69] { R5798 += 1, R5754 += 1, R88 += 1 };
  s2 -> s4 [70, 70] { R5798 += 1, R5754 += 1, R88 += 1 };
  s2 -> s5 [70, 70] { R5798 += 1, R5754 += 1, R88 += 1 };
  s2 -> s2 [71, 74] { R5798 += 1, R5754 += 1, R88 += 1 };
  s2 -> s8 [75, 75] { R5798 += 1, R5754 += 1, R88 += 1 };
  s2 -> s2 [76, 65535] { R5798 += 1, R5754 += 1, R88 += 1 };
  s3 -> s1 [0, 69] { R5798 += 1, R5754 += 1, R87 += 1, R88 += 1 };
  s3 -> s2 [0, 69] { R5798 += 1, R5754 += 1, R88 += 1 };
  s3 -> s3 [0, 65535] { R5798 += 1, R5753 += 1, R5754 += 1 };
  s3 -> s4 [70, 70] { R5798 += 1, R5754 += 1, R88 += 1 };
  s3 -> s5 [70, 70] { R5798 += 1, R5754 += 1, R88 += 1 };
  s3 -> s6 [70, 70] { R5798 += 1, R5754 += 1, R87 += 1, R88 += 1 };
  s3 -> s7 [70, 70] { R5798 += 1, R5754 += 1, R87 += 1, R88 += 1 };
  s3 -> s2 [71, 74] { R5798 += 1, R5754 += 1, R88 += 1 };
  s3 -> s1 [71, 65535] { R5798 += 1, R5754 += 1, R87 += 1, R88 += 1 };
  s3 -> s8 [75, 75] { R5798 += 1, R5754 += 1, R88 += 1 };
  s3 -> s2 [76, 65535] { R5798 += 1, R5754 += 1, R88 += 1 };
  s4 -> s4 [0, 74] { R5798 += 1, R5754 += 1, R88 += 1 };
  s4 -> s11 [75, 75] { R5798 += 1, R5754 += 1, R88 += 1 };
  s4 -> s4 [76, 65535] { R5798 += 1, R5754 += 1, R88 += 1 };
  s6 -> s4 [0, 74] { R5798 += 1, R5754 += 1, R88 += 1 };
  s6 -> s6 [0, 65535] { R5798 += 1, R5754 += 1, R87 += 1, R88 += 1 };
  s6 -> s11 [75, 75] { R5798 += 1, R5754 += 1, R88 += 1 };
  s6 -> s4 [76, 65535] { R5798 += 1, R5754 += 1, R88 += 1 };
  s8 -> s8 [0, 69] { R5798 += 1, R5754 += 1, R88 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R5798 += 1 };
  s8 -> s10 [70, 70] { R5798 += 1, R5754 += 1, R88 += 1 };
  s8 -> s11 [70, 70] { R5798 += 1, R5754 += 1, R88 += 1 };
  s8 -> s8 [71, 65535] { R5798 += 1, R5754 += 1, R88 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R5798 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R5798 += 1, R5754 += 1, R88 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s12 [0, 65535] { R5798 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R5798 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 69] { R5800 += 1, R5756 += 1, R91 += 1, R92 += 1 };
  s0 -> s2 [0, 65535] { R5800 += 1, R5755 += 1, R5756 += 1 };
  s0 -> s0 [0, 65535] { R5799 += 1, R5800 += 1 };
  s0 -> s3 [70, 70] { R5800 += 1, R5756 += 1, R91 += 1, R92 += 1 };
  s0 -> s4 [70, 70] { R5800 += 1, R5756 += 1, R91 += 1, R92 += 1 };
  s0 -> s1 [71, 65535] { R5800 += 1, R5756 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 69] { R5800 += 1, R5756 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 65535] { R5800 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [70, 70] { R5800 += 1, R5756 += 1, R91 += 1, R92 += 1 };
  s1 -> s4 [70, 70] { R5800 += 1, R5756 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [71, 65535] { R5800 += 1, R5756 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [0, 69] { R5800 += 1, R5756 += 1, R91 += 1, R92 += 1 };
  s2 -> s2 [0, 65535] { R5800 += 1, R5755 += 1, R5756 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [70, 70] { R5800 += 1, R5756 += 1, R91 += 1, R92 += 1 };
  s2 -> s4 [70, 70] { R5800 += 1, R5756 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [71, 65535] { R5800 += 1, R5756 += 1, R91 += 1, R92 += 1 };
  s3 -> s6 [0, 65535] { R5800 += 1 };
  s3 -> s3 [0, 65535] { R5800 += 1, R5756 += 1, R91 += 1, R92 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R5800 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R5800 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 69] { R5802 += 1, R5758 += 1, R3451 += 1, R3452 += 1 };
  s0 -> s2 [0, 69] { R5802 += 1, R5758 += 1, R3452 += 1, R3453 += 1 };
  s0 -> s3 [0, 69] { R5802 += 1, R5758 += 1, R3452 += 1 };
  s0 -> s4 [0, 65535] { R5802 += 1, R5757 += 1, R5758 += 1 };
  s0 -> s0 [0, 65535] { R5801 += 1, R5802 += 1 };
  s0 -> s5 [70, 70] { R5802 += 1, R5758 += 1, R3452 += 1, R3453 += 1 };
  s0 -> s6 [70, 70] { R5802 += 1, R5758 += 1, R3452 += 1 };
  s0 -> s7 [70, 70] { R5802 += 1, R5758 += 1, R3451 += 1, R3452 += 1 };
  s0 -> s8 [70, 70] { R5802 += 1, R5758 += 1, R3451 += 1, R3452 += 1 };
  s0 -> s9 [70, 70] { R5802 += 1, R5758 += 1, R3452 += 1 };
  s0 -> s10 [70, 70] { R5802 += 1, R5758 += 1, R3452 += 1, R3453 += 1 };
  s0 -> s3 [71, 74] { R5802 += 1, R5758 += 1, R3452 += 1 };
  s0 -> s1 [71, 65535] { R5802 += 1, R5758 += 1, R3451 += 1, R3452 += 1 };
  s0 -> s2 [71, 65535] { R5802 += 1, R5758 += 1, R3452 += 1, R3453 += 1 };
  s0 -> s3 [76, 65535] { R5802 += 1, R5758 += 1, R3452 += 1 };
  s1 -> s1 [0, 69] { R5802 += 1, R5758 += 1, R3451 += 1, R3452 += 1 };
  s1 -> s2 [0, 69] { R5802 += 1, R5758 += 1, R3452 += 1, R3453 += 1 };
  s1 -> s3 [0, 69] { R5802 += 1, R5758 += 1, R3452 += 1 };
  s1 -> s5 [70, 70] { R5802 += 1, R5758 += 1, R3452 += 1, R3453 += 1 };
  s1 -> s6 [70, 70] { R5802 += 1, R5758 += 1, R3452 += 1 };
  s1 -> s7 [70, 70] { R5802 += 1, R5758 += 1, R3451 += 1, R3452 += 1 };
  s1 -> s8 [70, 70] { R5802 += 1, R5758 += 1, R3451 += 1, R3452 += 1 };
  s1 -> s9 [70, 70] { R5802 += 1, R5758 += 1, R3452 += 1 };
  s1 -> s10 [70, 70] { R5802 += 1, R5758 += 1, R3452 += 1, R3453 += 1 };
  s1 -> s3 [71, 74] { R5802 += 1, R5758 += 1, R3452 += 1 };
  s1 -> s1 [71, 65535] { R5802 += 1, R5758 += 1, R3451 += 1, R3452 += 1 };
  s1 -> s2 [71, 65535] { R5802 += 1, R5758 += 1, R3452 += 1, R3453 += 1 };
  s1 -> s3 [76, 65535] { R5802 += 1, R5758 += 1, R3452 += 1 };
  s2 -> s2 [0, 69] { R5802 += 1, R5758 += 1, R3452 += 1, R3453 += 1 };
  s2 -> s3 [0, 69] { R5802 += 1, R5758 += 1, R3452 += 1 };
  s2 -> s5 [70, 70] { R5802 += 1, R5758 += 1, R3452 += 1, R3453 += 1 };
  s2 -> s6 [70, 70] { R5802 += 1, R5758 += 1, R3452 += 1 };
  s2 -> s9 [70, 70] { R5802 += 1, R5758 += 1, R3452 += 1 };
  s2 -> s10 [70, 70] { R5802 += 1, R5758 += 1, R3452 += 1, R3453 += 1 };
  s2 -> s3 [71, 74] { R5802 += 1, R5758 += 1, R3452 += 1 };
  s2 -> s2 [71, 65535] { R5802 += 1, R5758 += 1, R3452 += 1, R3453 += 1 };
  s2 -> s3 [76, 65535] { R5802 += 1, R5758 += 1, R3452 += 1 };
  s3 -> s3 [0, 69] { R5802 += 1, R5758 += 1, R3452 += 1 };
  s3 -> s11 [0, 65535];
  s3 -> s3 [0, 65535] { R5802 += 1 };
  s3 -> s6 [70, 70] { R5802 += 1, R5758 += 1 };
  s3 -> s9 [70, 70] { R5802 += 1, R5758 += 1 };
  s3 -> s3 [71, 74] { R5802 += 1, R5758 += 1, R3452 += 1 };
  s3 -> s3 [71, 65535] { R5802 += 1, R5758 += 1 };
  s3 -> s3 [76, 65535] { R5802 += 1, R5758 += 1, R3452 += 1 };
  s4 -> s1 [0, 69] { R5802 += 1, R5758 += 1, R3451 += 1, R3452 += 1 };
  s4 -> s2 [0, 69] { R5802 += 1, R5758 += 1, R3452 += 1, R3453 += 1 };
  s4 -> s3 [0, 69] { R5802 += 1, R5758 += 1, R3452 += 1 };
  s4 -> s4 [0, 65535] { R5802 += 1, R5757 += 1, R5758 += 1 };
  s4 -> s5 [70, 70] { R5802 += 1, R5758 += 1, R3452 += 1, R3453 += 1 };
  s4 -> s6 [70, 70] { R5802 += 1, R5758 += 1, R3452 += 1 };
  s4 -> s7 [70, 70] { R5802 += 1, R5758 += 1, R3451 += 1, R3452 += 1 };
  s4 -> s8 [70, 70] { R5802 += 1, R5758 += 1, R3451 += 1, R3452 += 1 };
  s4 -> s9 [70, 70] { R5802 += 1, R5758 += 1, R3452 += 1 };
  s4 -> s10 [70, 70] { R5802 += 1, R5758 += 1, R3452 += 1, R3453 += 1 };
  s4 -> s3 [71, 74] { R5802 += 1, R5758 += 1, R3452 += 1 };
  s4 -> s1 [71, 65535] { R5802 += 1, R5758 += 1, R3451 += 1, R3452 += 1 };
  s4 -> s2 [71, 65535] { R5802 += 1, R5758 += 1, R3452 += 1, R3453 += 1 };
  s4 -> s3 [76, 65535] { R5802 += 1, R5758 += 1, R3452 += 1 };
  s5 -> s6 [0, 74] { R5802 += 1, R5758 += 1, R3452 += 1 };
  s5 -> s5 [0, 65535] { R5802 += 1, R5758 += 1, R3452 += 1, R3453 += 1 };
  s5 -> s6 [76, 65535] { R5802 += 1, R5758 += 1, R3452 += 1 };
  s6 -> s6 [0, 74] { R5802 += 1, R5758 += 1, R3452 += 1 };
  s6 -> s12 [0, 65535] { R5802 += 1 };
  s6 -> s6 [0, 65535] { R5802 += 1, R5758 += 1 };
  s6 -> s11 [0, 65535];
  s6 -> s6 [76, 65535] { R5802 += 1, R5758 += 1, R3452 += 1 };
  s8 -> s6 [0, 74] { R5802 += 1, R5758 += 1, R3452 += 1 };
  s8 -> s5 [0, 65535] { R5802 += 1, R5758 += 1, R3452 += 1, R3453 += 1 };
  s8 -> s8 [0, 65535] { R5802 += 1, R5758 += 1, R3451 += 1, R3452 += 1 };
  s8 -> s6 [76, 65535] { R5802 += 1, R5758 += 1, R3452 += 1 };
  s9 -> s11 [0, 65535];
  s9 -> s9 [0, 65535] { R5802 += 1 };
  s11 -> s11 [0, 65535];
  s12 -> s12 [0, 65535] { R5802 += 1 };
  s12 -> s11 [0, 65535];
  accepting s3, s12, s9, s6, s11;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 69] { R5804 += 1, R5760 += 1, R5690 += 1, R5691 += 1, R5692 += 1 };
  s0 -> s2 [0, 69] { R5804 += 1, R5760 += 1, R5690 += 1, R5692 += 1 };
  s0 -> s3 [0, 69] { R5804 += 1, R5760 += 1, R5689 += 1, R5690 += 1 };
  s0 -> s4 [0, 65535] { R5804 += 1, R5759 += 1, R5760 += 1 };
  s0 -> s0 [0, 65535] { R5803 += 1, R5804 += 1 };
  s0 -> s5 [70, 70] { R5804 += 1, R5760 += 1, R5690 += 1, R5691 += 1, R5692 += 1 };
  s0 -> s6 [70, 70] { R5804 += 1, R5760 += 1, R5690 += 1, R5692 += 1 };
  s0 -> s7 [70, 70] { R5804 += 1, R5760 += 1, R5690 += 1, R5692 += 1 };
  s0 -> s8 [70, 70] { R5804 += 1, R5760 += 1, R5690 += 1, R5691 += 1, R5692 += 1 };
  s0 -> s9 [70, 70] { R5804 += 1, R5760 += 1, R5689 += 1, R5690 += 1 };
  s0 -> s10 [70, 70] { R5804 += 1, R5760 += 1, R5689 += 1, R5690 += 1 };
  s0 -> s2 [71, 74] { R5804 += 1, R5760 += 1, R5690 += 1, R5692 += 1 };
  s0 -> s1 [71, 65535] { R5804 += 1, R5760 += 1, R5690 += 1, R5691 += 1, R5692 += 1 };
  s0 -> s3 [71, 65535] { R5804 += 1, R5760 += 1, R5689 += 1, R5690 += 1 };
  s0 -> s2 [76, 65535] { R5804 += 1, R5760 += 1, R5690 += 1, R5692 += 1 };
  s1 -> s1 [0, 69] { R5804 += 1, R5760 += 1, R5690 += 1, R5691 += 1, R5692 += 1 };
  s1 -> s2 [0, 69] { R5804 += 1, R5760 += 1, R5690 += 1, R5692 += 1 };
  s1 -> s5 [70, 70] { R5804 += 1, R5760 += 1, R5690 += 1, R5691 += 1, R5692 += 1 };
  s1 -> s6 [70, 70] { R5804 += 1, R5760 += 1, R5690 += 1, R5692 += 1 };
  s1 -> s7 [70, 70] { R5804 += 1, R5760 += 1, R5690 += 1, R5692 += 1 };
  s1 -> s8 [70, 70] { R5804 += 1, R5760 += 1, R5690 += 1, R5691 += 1, R5692 += 1 };
  s1 -> s2 [71, 74] { R5804 += 1, R5760 += 1, R5690 += 1, R5692 += 1 };
  s1 -> s1 [71, 65535] { R5804 += 1, R5760 += 1, R5690 += 1, R5691 += 1, R5692 += 1 };
  s1 -> s2 [76, 65535] { R5804 += 1, R5760 += 1, R5690 += 1, R5692 += 1 };
  s2 -> s2 [0, 69] { R5804 += 1, R5760 += 1, R5690 += 1, R5692 += 1 };
  s2 -> s11 [0, 65535];
  s2 -> s2 [0, 65535] { R5804 += 1 };
  s2 -> s6 [70, 70] { R5804 += 1, R5760 += 1, R5690 += 1, R5692 += 1 };
  s2 -> s7 [70, 70] { R5804 += 1, R5760 += 1, R5690 += 1, R5692 += 1 };
  s2 -> s2 [71, 74] { R5804 += 1, R5760 += 1, R5690 += 1, R5692 += 1 };
  s2 -> s2 [76, 65535] { R5804 += 1, R5760 += 1, R5690 += 1, R5692 += 1 };
  s3 -> s1 [0, 69] { R5804 += 1, R5760 += 1, R5690 += 1, R5691 += 1, R5692 += 1 };
  s3 -> s2 [0, 69] { R5804 += 1, R5760 += 1, R5690 += 1, R5692 += 1 };
  s3 -> s3 [0, 69] { R5804 += 1, R5760 += 1, R5689 += 1, R5690 += 1 };
  s3 -> s5 [70, 70] { R5804 += 1, R5760 += 1, R5690 += 1, R5691 += 1, R5692 += 1 };
  s3 -> s6 [70, 70] { R5804 += 1, R5760 += 1, R5690 += 1, R5692 += 1 };
  s3 -> s7 [70, 70] { R5804 += 1, R5760 += 1, R5690 += 1, R5692 += 1 };
  s3 -> s8 [70, 70] { R5804 += 1, R5760 += 1, R5690 += 1, R5691 += 1, R5692 += 1 };
  s3 -> s9 [70, 70] { R5804 += 1, R5760 += 1, R5689 += 1, R5690 += 1 };
  s3 -> s10 [70, 70] { R5804 += 1, R5760 += 1, R5689 += 1, R5690 += 1 };
  s3 -> s2 [71, 74] { R5804 += 1, R5760 += 1, R5690 += 1, R5692 += 1 };
  s3 -> s1 [71, 65535] { R5804 += 1, R5760 += 1, R5690 += 1, R5691 += 1, R5692 += 1 };
  s3 -> s3 [71, 65535] { R5804 += 1, R5760 += 1, R5689 += 1, R5690 += 1 };
  s3 -> s2 [76, 65535] { R5804 += 1, R5760 += 1, R5690 += 1, R5692 += 1 };
  s4 -> s1 [0, 69] { R5804 += 1, R5760 += 1, R5690 += 1, R5691 += 1, R5692 += 1 };
  s4 -> s2 [0, 69] { R5804 += 1, R5760 += 1, R5690 += 1, R5692 += 1 };
  s4 -> s3 [0, 69] { R5804 += 1, R5760 += 1, R5689 += 1, R5690 += 1 };
  s4 -> s4 [0, 65535] { R5804 += 1, R5759 += 1, R5760 += 1 };
  s4 -> s5 [70, 70] { R5804 += 1, R5760 += 1, R5690 += 1, R5691 += 1, R5692 += 1 };
  s4 -> s6 [70, 70] { R5804 += 1, R5760 += 1, R5690 += 1, R5692 += 1 };
  s4 -> s7 [70, 70] { R5804 += 1, R5760 += 1, R5690 += 1, R5692 += 1 };
  s4 -> s8 [70, 70] { R5804 += 1, R5760 += 1, R5690 += 1, R5691 += 1, R5692 += 1 };
  s4 -> s9 [70, 70] { R5804 += 1, R5760 += 1, R5689 += 1, R5690 += 1 };
  s4 -> s10 [70, 70] { R5804 += 1, R5760 += 1, R5689 += 1, R5690 += 1 };
  s4 -> s2 [71, 74] { R5804 += 1, R5760 += 1, R5690 += 1, R5692 += 1 };
  s4 -> s1 [71, 65535] { R5804 += 1, R5760 += 1, R5690 += 1, R5691 += 1, R5692 += 1 };
  s4 -> s3 [71, 65535] { R5804 += 1, R5760 += 1, R5689 += 1, R5690 += 1 };
  s4 -> s2 [76, 65535] { R5804 += 1, R5760 += 1, R5690 += 1, R5692 += 1 };
  s5 -> s6 [0, 74] { R5804 += 1, R5760 += 1, R5690 += 1, R5692 += 1 };
  s5 -> s5 [0, 65535] { R5804 += 1, R5760 += 1, R5690 += 1, R5691 += 1, R5692 += 1 };
  s5 -> s6 [76, 65535] { R5804 += 1, R5760 += 1, R5690 += 1, R5692 += 1 };
  s6 -> s6 [0, 74] { R5804 += 1, R5760 += 1, R5690 += 1, R5692 += 1 };
  s6 -> s11 [0, 65535];
  s6 -> s6 [0, 65535] { R5804 += 1 };
  s6 -> s6 [76, 65535] { R5804 += 1, R5760 += 1, R5690 += 1, R5692 += 1 };
  s7 -> s11 [0, 65535];
  s7 -> s7 [0, 65535] { R5804 += 1 };
  s10 -> s6 [0, 74] { R5804 += 1, R5760 += 1, R5690 += 1, R5692 += 1 };
  s10 -> s5 [0, 65535] { R5804 += 1, R5760 += 1, R5690 += 1, R5691 += 1, R5692 += 1 };
  s10 -> s10 [0, 65535] { R5804 += 1, R5760 += 1, R5689 += 1, R5690 += 1 };
  s10 -> s6 [76, 65535] { R5804 += 1, R5760 += 1, R5690 += 1, R5692 += 1 };
  s11 -> s11 [0, 65535];
  accepting s2, s6, s7, s11;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 69] { R5806 += 1, R5762 += 1, R5698 += 1, R5699 += 1, R5700 += 1 };
  s0 -> s2 [0, 69] { R5806 += 1, R5762 += 1, R5698 += 1, R5700 += 1, R5701 += 1 };
  s0 -> s3 [0, 69] { R5806 += 1, R5762 += 1, R5697 += 1, R5698 += 1 };
  s0 -> s4 [0, 65535] { R5806 += 1, R5761 += 1, R5762 += 1 };
  s0 -> s0 [0, 65535] { R5805 += 1, R5806 += 1 };
  s0 -> s5 [70, 70] { R5806 += 1, R5762 += 1, R5698 += 1, R5700 += 1, R5701 += 1 };
  s0 -> s6 [70, 70] { R5806 += 1, R5762 += 1, R5698 += 1, R5700 += 1, R5701 += 1 };
  s0 -> s7 [70, 70] { R5806 += 1, R5762 += 1, R5698 += 1, R5699 += 1, R5700 += 1 };
  s0 -> s8 [70, 70] { R5806 += 1, R5762 += 1, R5698 += 1, R5699 += 1, R5700 += 1 };
  s0 -> s9 [70, 70] { R5806 += 1, R5762 += 1, R5697 += 1, R5698 += 1 };
  s0 -> s10 [70, 70] { R5806 += 1, R5762 += 1, R5697 += 1, R5698 += 1 };
  s0 -> s1 [71, 65535] { R5806 += 1, R5762 += 1, R5698 += 1, R5699 += 1, R5700 += 1 };
  s0 -> s2 [71, 65535] { R5806 += 1, R5762 += 1, R5698 += 1, R5700 += 1, R5701 += 1 };
  s0 -> s3 [71, 65535] { R5806 += 1, R5762 += 1, R5697 += 1, R5698 += 1 };
  s1 -> s1 [0, 69] { R5806 += 1, R5762 += 1, R5698 += 1, R5699 += 1, R5700 += 1 };
  s1 -> s2 [0, 69] { R5806 += 1, R5762 += 1, R5698 += 1, R5700 += 1, R5701 += 1 };
  s1 -> s5 [70, 70] { R5806 += 1, R5762 += 1, R5698 += 1, R5700 += 1, R5701 += 1 };
  s1 -> s6 [70, 70] { R5806 += 1, R5762 += 1, R5698 += 1, R5700 += 1, R5701 += 1 };
  s1 -> s7 [70, 70] { R5806 += 1, R5762 += 1, R5698 += 1, R5699 += 1, R5700 += 1 };
  s1 -> s8 [70, 70] { R5806 += 1, R5762 += 1, R5698 += 1, R5699 += 1, R5700 += 1 };
  s1 -> s1 [71, 65535] { R5806 += 1, R5762 += 1, R5698 += 1, R5699 += 1, R5700 += 1 };
  s1 -> s2 [71, 65535] { R5806 += 1, R5762 += 1, R5698 += 1, R5700 += 1, R5701 += 1 };
  s2 -> s2 [0, 69] { R5806 += 1, R5762 += 1, R5698 += 1, R5700 += 1, R5701 += 1 };
  s2 -> s14 [0, 69] { R5806 += 1, R5762 += 1, R5698 += 1 };
  s2 -> s5 [70, 70] { R5806 += 1, R5762 += 1, R5698 += 1, R5700 += 1, R5701 += 1 };
  s2 -> s6 [70, 70] { R5806 += 1, R5762 += 1, R5698 += 1, R5700 += 1, R5701 += 1 };
  s2 -> s15 [70, 70] { R5806 += 1, R5762 += 1, R5698 += 1 };
  s2 -> s11 [70, 70] { R5806 += 1, R5762 += 1, R5698 += 1 };
  s2 -> s2 [71, 65535] { R5806 += 1, R5762 += 1, R5698 += 1, R5700 += 1, R5701 += 1 };
  s2 -> s14 [71, 65535] { R5806 += 1, R5762 += 1, R5698 += 1 };
  s3 -> s1 [0, 69] { R5806 += 1, R5762 += 1, R5698 += 1, R5699 += 1, R5700 += 1 };
  s3 -> s2 [0, 69] { R5806 += 1, R5762 += 1, R5698 += 1, R5700 += 1, R5701 += 1 };
  s3 -> s3 [0, 69] { R5806 += 1, R5762 += 1, R5697 += 1, R5698 += 1 };
  s3 -> s5 [70, 70] { R5806 += 1, R5762 += 1, R5698 += 1, R5700 += 1, R5701 += 1 };
  s3 -> s6 [70, 70] { R5806 += 1, R5762 += 1, R5698 += 1, R5700 += 1, R5701 += 1 };
  s3 -> s7 [70, 70] { R5806 += 1, R5762 += 1, R5698 += 1, R5699 += 1, R5700 += 1 };
  s3 -> s8 [70, 70] { R5806 += 1, R5762 += 1, R5698 += 1, R5699 += 1, R5700 += 1 };
  s3 -> s9 [70, 70] { R5806 += 1, R5762 += 1, R5697 += 1, R5698 += 1 };
  s3 -> s10 [70, 70] { R5806 += 1, R5762 += 1, R5697 += 1, R5698 += 1 };
  s3 -> s1 [71, 65535] { R5806 += 1, R5762 += 1, R5698 += 1, R5699 += 1, R5700 += 1 };
  s3 -> s2 [71, 65535] { R5806 += 1, R5762 += 1, R5698 += 1, R5700 += 1, R5701 += 1 };
  s3 -> s3 [71, 65535] { R5806 += 1, R5762 += 1, R5697 += 1, R5698 += 1 };
  s4 -> s1 [0, 69] { R5806 += 1, R5762 += 1, R5698 += 1, R5699 += 1, R5700 += 1 };
  s4 -> s2 [0, 69] { R5806 += 1, R5762 += 1, R5698 += 1, R5700 += 1, R5701 += 1 };
  s4 -> s3 [0, 69] { R5806 += 1, R5762 += 1, R5697 += 1, R5698 += 1 };
  s4 -> s4 [0, 65535] { R5806 += 1, R5761 += 1, R5762 += 1 };
  s4 -> s5 [70, 70] { R5806 += 1, R5762 += 1, R5698 += 1, R5700 += 1, R5701 += 1 };
  s4 -> s6 [70, 70] { R5806 += 1, R5762 += 1, R5698 += 1, R5700 += 1, R5701 += 1 };
  s4 -> s7 [70, 70] { R5806 += 1, R5762 += 1, R5698 += 1, R5699 += 1, R5700 += 1 };
  s4 -> s8 [70, 70] { R5806 += 1, R5762 += 1, R5698 += 1, R5699 += 1, R5700 += 1 };
  s4 -> s9 [70, 70] { R5806 += 1, R5762 += 1, R5697 += 1, R5698 += 1 };
  s4 -> s10 [70, 70] { R5806 += 1, R5762 += 1, R5697 += 1, R5698 += 1 };
  s4 -> s1 [71, 65535] { R5806 += 1, R5762 += 1, R5698 += 1, R5699 += 1, R5700 += 1 };
  s4 -> s2 [71, 65535] { R5806 += 1, R5762 += 1, R5698 += 1, R5700 += 1, R5701 += 1 };
  s4 -> s3 [71, 65535] { R5806 += 1, R5762 += 1, R5697 += 1, R5698 += 1 };
  s6 -> s6 [0, 65535] { R5806 += 1, R5762 += 1, R5698 += 1, R5700 += 1, R5701 += 1 };
  s6 -> s11 [0, 65535] { R5806 += 1, R5762 += 1, R5698 += 1 };
  s8 -> s6 [0, 65535] { R5806 += 1, R5762 += 1, R5698 += 1, R5700 += 1, R5701 += 1 };
  s8 -> s8 [0, 65535] { R5806 += 1, R5762 += 1, R5698 += 1, R5699 += 1, R5700 += 1 };
  s9 -> s6 [0, 65535] { R5806 += 1, R5762 += 1, R5698 += 1, R5700 += 1, R5701 += 1 };
  s9 -> s8 [0, 65535] { R5806 += 1, R5762 += 1, R5698 += 1, R5699 += 1, R5700 += 1 };
  s9 -> s9 [0, 65535] { R5806 += 1, R5762 += 1, R5697 += 1, R5698 += 1 };
  s11 -> s12 [0, 65535] { R5806 += 1 };
  s11 -> s13 [0, 65535];
  s11 -> s11 [0, 65535] { R5806 += 1, R5762 += 1, R5698 += 1 };
  s12 -> s12 [0, 65535] { R5806 += 1 };
  s12 -> s13 [0, 65535];
  s13 -> s13 [0, 65535];
  s14 -> s14 [0, 69] { R5806 += 1, R5762 += 1, R5698 += 1 };
  s14 -> s13 [0, 65535];
  s14 -> s14 [0, 65535] { R5806 += 1 };
  s14 -> s15 [70, 70] { R5806 += 1, R5762 += 1, R5698 += 1 };
  s14 -> s11 [70, 70] { R5806 += 1, R5762 += 1, R5698 += 1 };
  s14 -> s14 [71, 65535] { R5806 += 1, R5762 += 1, R5698 += 1 };
  s15 -> s13 [0, 65535];
  s15 -> s15 [0, 65535] { R5806 += 1 };
  accepting s12, s13, s14, s15, s11;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [102, 102];
  accepting s1;
};
};
constraint R2 = R5724 && R3 = R5806 && R23 - R5806 = -1 && R24 = R5806 && R25 - R5806 = -1 && R26 = R5806 && R27 = 0 && R28 = 1 && R29 = 0 && R30 = 1 && R45 + R84 + R83 + -1*R5694 + -1*R5690 - R66 = 0 && R49 + R89 + R87 = 0 && R50 + R90 + R88 + -1*R5694 + -1*R5690 - R66 = 0 && R55 + R96 + R93 + -1*R5696 + -1*R5692 - R68 = 0 && R65 + R5693 + R5689 = 0 && R67 + R5695 + R5691 = 0 && R5723 = 0 && R5747 = 0 && R5748 = 0 && R5753 = 0 && R5754 = 0 && R5757 = 0 && R5758 = 0 && R5759 = 0 && R5760 = 0 && R5761 = 0 && R5762 = 0 && R5763 = 0 && R5764 = R5806 && R5765 = 0 && R5766 = R5806 && R5767 = 0 && R5768 = R5806 && R5769 = 0 && R5770 = R5806 && R5771 = 0 && R5772 = R5806 && R5773 = 0 && R5774 = R5806 && R5775 = 0 && R5776 = R5806 && R5777 = 0 && R5778 = R5806 && R5779 = 0 && R5780 = R5806 && R5781 = 0 && R5782 = R5806 && R5783 = 0 && R5784 = R5806 && R5785 = 0 && R5786 = R5806 && R5787 = 0 && R5788 = R5806 && R5789 = 0 && R5790 = R5806 && R5791 = 0 && R5792 = R5806 && R5793 = 0 && R5794 = R5806 && R5795 = 0 && R5796 = R5806 && R5797 = 0 && R5798 = R5806 && R5799 = 0 && R5800 = R5806 && R5801 = 0 && R5802 = R5806 && R5803 = 0 && R5804 = R5806 && R5805 = 0 && R12 < 1 && R15 < 1 && R16 < 1 && R47 + R86 + R85 < 1 && R61 + R3456 + R3453 < 1 && -1*R5694 + -1*R5690 - R66 < 1 && -1*R5696 + -1*R5692 - R68 < 1 && -1 < R5724 && 0 < R5806 && (R53 + R94 + R91 != 0 || R54 + R95 + R92 + -1*R5694 + -1*R5690 - R66 = 0 || R66 + R5694 + R5690 < 1) && (R59 + R3454 + R3451 != 0 || R60 + R3455 + R3452 + -1*R5694 + -1*R5690 - R66 = 0 || R66 + R5694 + R5690 < 1) && (R66 + R5694 + R5690 != 0 || ((R53 + R94 + R91 != 0 || R54 + R95 + R92 = 0 || R68 + R5696 + R5692 < 1) && (R53 + R94 + R91 = 0 || R68 + R5696 + R5692 < 1))) && (R66 + R5694 + R5690 != 0 || ((R59 + R3454 + R3451 != 0 || R60 + R3455 + R3452 = 0 || R68 + R5696 + R5692 < 1) && (R59 + R3454 + R3451 = 0 || R68 + R5696 + R5692 < 1))) && (R66 + R5694 + R5690 != 0 || ((R73 + R5702 + R5697 != 0 || R74 + R5703 + R5698 = 0 || R68 + R5696 + R5692 < 1) && (R73 + R5702 + R5697 = 0 || R68 + R5696 + R5692 < 1))) && (R68 + R5696 + R5692 != 0 || R77 + R5706 + R5701 = 0 || (R75 + R5704 + R5699 = 0 && R76 + R5705 + R5700 = 0)) && (R73 + R5702 + R5697 != 0 || R66 + R5694 + R5690 + -1*R5703 + -1*R5698 - R74 = 0 || R66 + R5694 + R5690 < 1) && (R75 + R5704 + R5699 != 0 || R68 + R5696 + R5692 + -1*R5705 + -1*R5700 - R76 = 0 || R68 + R5696 + R5692 < 1) && (R5707 != 0 || R5708 = R5724 || (R20 = 0 && R5724 = 0)) && (R5709 != 0 || R5710 = R5724 || (R20 = 0 && R5724 = 0)) && (R5711 != 0 || R5712 = R5724 || (R20 = 0 && R5724 = 0)) && (R5713 != 0 || R5714 = R5724 || (R20 = 0 && R5724 = 0)) && (R5715 != 0 || R5716 = R5724 || (R20 = 0 && R5724 = 0)) && (R5717 != 0 || R5718 = R5724 || (R20 = 0 && R5724 = 0)) && (R5719 != 0 || R5720 = R5724 || (R20 = 0 && R5724 = 0)) && (R5721 != 0 || R5722 = R5724 || (R20 = 0 && R5724 = 0)) && (R5725 != 0 || R5724 = R5726 || (R20 = 0 && R5724 = 0)) && (R21 = 0 || (R5745 = 0 && R5746 = 0)) && (R21 = 0 || (R5749 = 0 && R5750 = 0)) && (R21 = 0 || (R5751 = 0 && R5752 = 0)) && (R21 = 0 || (R5755 = 0 && R5756 = 0)) && (R22 = 0 || (R5727 = 0 && R5728 = 0)) && (R22 = 0 || (R5729 = 0 && R5730 = 0)) && (R22 = 0 || (R5731 = 0 && R5732 = 0)) && (R22 = 0 || (R5733 = 0 && R5734 = 0)) && (R22 = 0 || (R5735 = 0 && R5736 = 0)) && (R22 = 0 || (R5737 = 0 && R5738 = 0)) && (R22 = 0 || (R5739 = 0 && R5740 = 0)) && (R22 = 0 || (R5741 = 0 && R5742 = 0)) && (R22 = 0 || (R5743 = 0 && R5744 = 0)) && (R53 + R94 + R91 = 0 || R66 + R5694 + R5690 < 1) && (R59 + R3454 + R3451 = 0 || R66 + R5694 + R5690 < 1) && (R73 + R5702 + R5697 = 0 || R66 + R5694 + R5690 < 1) && (R75 + R5704 + R5699 = 0 || R68 + R5696 + R5692 < 1) && (R5707 = 0 || (R20 = 0 && R5724 = 0)) && (R5709 = 0 || (R20 = 0 && R5724 = 0)) && (R5711 = 0 || (R20 = 0 && R5724 = 0)) && (R5713 = 0 || (R20 = 0 && R5724 = 0)) && (R5715 = 0 || (R20 = 0 && R5724 = 0)) && (R5717 = 0 || (R20 = 0 && R5724 = 0)) && (R5719 = 0 || (R20 = 0 && R5724 = 0)) && (R5721 = 0 || (R20 = 0 && R5724 = 0)) && (R5725 = 0 || (R20 = 0 && R5724 = 0));
// End of Parikh automata intersection problem
