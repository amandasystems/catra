// Parikh automata intersection problem, generated by OSTRICH+
counter int R12, R15, R16, R2, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R4, R45, R47, R49, R5, R50, R53, R54, R55, R59, R60, R61, R65, R66, R67, R68, R6805, R6806, R6807, R6808, R6809, R6810, R73, R74, R75, R76, R77, R83, R84, R8485, R8486, R8487, R8488, R8489, R8490, R8491, R8492, R85, R86, R87, R88, R89, R8933, R8934, R8935, R8936, R8937, R8938, R8939, R8940, R8941, R8942, R8943, R8944, R8945, R8946, R8947, R8948, R8949, R8950, R8951, R8952, R8953, R8954, R8955, R8956, R8957, R8958, R8959, R8960, R8961, R8962, R8963, R8964, R8965, R8966, R8967, R8968, R8969, R8970, R8971, R8972, R8973, R8974, R8975, R8976, R8977, R8978, R8979, R8980, R8981, R8982, R8983, R8984, R8985, R8986, R8987, R8988, R8989, R8990, R8991, R8992, R8993, R8994, R8995, R8996, R8997, R8998, R8999, R90, R9000, R9001, R9002, R9003, R9004, R9005, R9006, R9007, R9008, R9009, R9010, R9011, R9012, R9013, R9014, R9015, R9016, R9017, R9018, R9019, R9020, R9021, R9022, R9023, R9024, R9025, R9026, R9027, R9028, R9029, R9030, R9031, R9032, R9033, R9034, R9035, R9036, R9037, R9038, R9039, R9040, R9041, R9042, R91, R92, R93, R94, R95, R96;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [70, 70];
  s0 -> s0 [71, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [70, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R15 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 69];
  s0 -> s0 [0, 65535] { R16 += 1 };
  s0 -> s2 [70, 70];
  s0 -> s1 [71, 65535];
  s1 -> s1 [0, 69];
  s1 -> s2 [70, 70];
  s1 -> s1 [71, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R24 += 1 };
  s0 -> s0 [0, 65535] { R23 += 1, R24 += 1 };
  s0 -> s2 [9, 13] { R24 += 1 };
  s0 -> s1 [14, 31] { R24 += 1 };
  s0 -> s2 [32, 32] { R24 += 1 };
  s0 -> s1 [33, 65535] { R24 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R24 += 1 };
  s2 -> s1 [0, 65535] { R24 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R25 += 1, R26 += 1 };
  s1 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R28 += 1 };
  s0 -> s0 [0, 65535] { R27 += 1, R28 += 1 };
  s0 -> s2 [9, 13] { R28 += 1 };
  s0 -> s1 [14, 31] { R28 += 1 };
  s0 -> s2 [32, 32] { R28 += 1 };
  s0 -> s1 [33, 65535] { R28 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R28 += 1 };
  s2 -> s1 [0, 65535] { R28 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R29 += 1, R30 += 1 };
  s1 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R8964 += 1, R22 += 1 };
  s0 -> s0 [0, 65535] { R8963 += 1, R8964 += 1 };
  s1 -> s1 [0, 65535] { R8964 += 1, R22 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 69] { R8966 += 1 };
  s0 -> s0 [0, 65535] { R8965 += 1, R8966 += 1 };
  s0 -> s2 [70, 70] { R8966 += 1 };
  s0 -> s3 [70, 70] { R8966 += 1 };
  s0 -> s1 [76, 65535] { R8966 += 1 };
  s1 -> s1 [0, 69] { R8966 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R8966 += 1 };
  s1 -> s3 [70, 70] { R8966 += 1 };
  s1 -> s1 [76, 65535] { R8966 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 70] { R8966 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [76, 65535] { R8966 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 69] { R8968 += 1, R45 += 1 };
  s0 -> s0 [0, 65535] { R8967 += 1, R8968 += 1 };
  s0 -> s2 [70, 70] { R8968 += 1, R45 += 1 };
  s0 -> s3 [70, 70] { R8968 += 1, R45 += 1 };
  s0 -> s1 [71, 65535] { R8968 += 1, R45 += 1 };
  s1 -> s1 [0, 69] { R8968 += 1, R45 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R8968 += 1, R45 += 1 };
  s1 -> s3 [70, 70] { R8968 += 1, R45 += 1 };
  s1 -> s1 [71, 65535] { R8968 += 1, R45 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8968 += 1, R45 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 69] { R8970 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R8969 += 1, R8970 += 1 };
  s0 -> s2 [70, 70] { R8970 += 1, R47 += 1 };
  s0 -> s3 [70, 70] { R8970 += 1, R47 += 1 };
  s0 -> s1 [71, 65535] { R8970 += 1, R47 += 1 };
  s1 -> s1 [0, 69] { R8970 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R8970 += 1, R47 += 1 };
  s1 -> s3 [70, 70] { R8970 += 1, R47 += 1 };
  s1 -> s1 [71, 65535] { R8970 += 1, R47 += 1 };
  s2 -> s2 [0, 65535] { R8970 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 69] { R8972 += 1, R49 += 1, R50 += 1 };
  s0 -> s0 [0, 65535] { R8971 += 1, R8972 += 1 };
  s0 -> s2 [70, 70] { R8972 += 1, R49 += 1, R50 += 1 };
  s0 -> s3 [70, 70] { R8972 += 1, R49 += 1, R50 += 1 };
  s0 -> s1 [71, 65535] { R8972 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 69] { R8972 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R8972 += 1, R49 += 1, R50 += 1 };
  s1 -> s3 [70, 70] { R8972 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [71, 65535] { R8972 += 1, R49 += 1, R50 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R8972 += 1, R49 += 1, R50 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 69] { R8974 += 1, R53 += 1, R54 += 1 };
  s0 -> s0 [0, 65535] { R8973 += 1, R8974 += 1 };
  s0 -> s2 [70, 70] { R8974 += 1, R53 += 1, R54 += 1 };
  s0 -> s3 [70, 70] { R8974 += 1, R53 += 1, R54 += 1 };
  s0 -> s1 [71, 65535] { R8974 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 69] { R8974 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R8974 += 1, R53 += 1, R54 += 1 };
  s1 -> s3 [70, 70] { R8974 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [71, 65535] { R8974 += 1, R53 += 1, R54 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8974 += 1, R53 += 1, R54 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 69] { R8976 += 1, R59 += 1, R60 += 1 };
  s0 -> s0 [0, 65535] { R8975 += 1, R8976 += 1 };
  s0 -> s2 [70, 70] { R8976 += 1, R59 += 1, R60 += 1 };
  s0 -> s3 [70, 70] { R8976 += 1, R59 += 1, R60 += 1 };
  s0 -> s1 [71, 65535] { R8976 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 69] { R8976 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R8976 += 1, R59 += 1, R60 += 1 };
  s1 -> s3 [70, 70] { R8976 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [71, 65535] { R8976 += 1, R59 += 1, R60 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8976 += 1, R59 += 1, R60 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 69] { R8978 += 1, R65 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R8977 += 1, R8978 += 1 };
  s0 -> s2 [70, 70] { R8978 += 1, R65 += 1, R66 += 1 };
  s0 -> s3 [70, 70] { R8978 += 1, R65 += 1, R66 += 1 };
  s0 -> s1 [71, 65535] { R8978 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 69] { R8978 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R8978 += 1, R65 += 1, R66 += 1 };
  s1 -> s3 [70, 70] { R8978 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [71, 65535] { R8978 += 1, R65 += 1, R66 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8978 += 1, R65 += 1, R66 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 69] { R8980 += 1, R73 += 1, R74 += 1 };
  s0 -> s0 [0, 65535] { R8979 += 1, R8980 += 1 };
  s0 -> s2 [70, 70] { R8980 += 1, R73 += 1, R74 += 1 };
  s0 -> s3 [70, 70] { R8980 += 1, R73 += 1, R74 += 1 };
  s0 -> s1 [71, 65535] { R8980 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 69] { R8980 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R8980 += 1, R73 += 1, R74 += 1 };
  s1 -> s3 [70, 70] { R8980 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [71, 65535] { R8980 += 1, R73 += 1, R74 += 1 };
  s2 -> s2 [0, 65535] { R8980 += 1, R73 += 1, R74 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 69] { R9000 += 1 };
  s0 -> s0 [0, 65535] { R8999 += 1, R9000 += 1 };
  s0 -> s2 [70, 70] { R9000 += 1 };
  s0 -> s1 [71, 65535] { R9000 += 1 };
  s1 -> s1 [0, 69] { R9000 += 1 };
  s1 -> s2 [70, 70] { R9000 += 1 };
  s1 -> s1 [71, 65535] { R9000 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R9000 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R9002 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R9001 += 1, R9002 += 1 };
  s1 -> s1 [0, 65535] { R9002 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 69] { R9004 += 1 };
  s0 -> s2 [0, 65535] { R9004 += 1, R12 += 1 };
  s0 -> s0 [0, 65535] { R9003 += 1, R9004 += 1 };
  s0 -> s3 [70, 70] { R9004 += 1 };
  s0 -> s1 [71, 65535] { R9004 += 1 };
  s1 -> s1 [0, 69] { R9004 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [70, 70] { R9004 += 1 };
  s1 -> s1 [71, 65535] { R9004 += 1 };
  s2 -> s1 [0, 69] { R9004 += 1 };
  s2 -> s2 [0, 65535] { R9004 += 1, R12 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [70, 70] { R9004 += 1 };
  s2 -> s1 [71, 65535] { R9004 += 1 };
  s3 -> s3 [0, 65535] { R9004 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 69] { R9006 += 1, R8944 += 1 };
  s0 -> s2 [0, 65535] { R9006 += 1, R8943 += 1, R8944 += 1 };
  s0 -> s0 [0, 65535] { R9005 += 1, R9006 += 1 };
  s0 -> s1 [71, 65535] { R9006 += 1, R8944 += 1 };
  s1 -> s1 [0, 69] { R9006 += 1, R8944 += 1 };
  s1 -> s1 [0, 65535] { R9006 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [71, 65535] { R9006 += 1, R8944 += 1 };
  s2 -> s1 [0, 69] { R9006 += 1, R8944 += 1 };
  s2 -> s2 [0, 65535] { R9006 += 1, R8943 += 1, R8944 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [71, 65535] { R9006 += 1, R8944 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s0 [0, 65535] { R9007 += 1, R9008 += 1 };
  s0 -> s1 [0, 65535] { R9008 += 1, R8946 += 1, R20 += 1 };
  s0 -> s2 [0, 65535] { R9008 += 1, R8945 += 1, R8946 += 1 };
  s1 -> s4 [0, 65535] { R9008 += 1 };
  s1 -> s1 [0, 65535] { R9008 += 1, R8946 += 1, R20 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R9008 += 1, R8946 += 1, R20 += 1 };
  s2 -> s2 [0, 65535] { R9008 += 1, R8945 += 1, R8946 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R9008 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 70] { R9010 += 1, R8948 += 1 };
  s0 -> s2 [0, 65535] { R9010 += 1, R8947 += 1, R8948 += 1 };
  s0 -> s0 [0, 65535] { R9009 += 1, R9010 += 1 };
  s0 -> s1 [75, 65535] { R9010 += 1, R8948 += 1 };
  s1 -> s1 [0, 70] { R9010 += 1, R8948 += 1 };
  s1 -> s1 [0, 65535] { R9010 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [75, 65535] { R9010 += 1, R8948 += 1 };
  s2 -> s1 [0, 70] { R9010 += 1, R8948 += 1 };
  s2 -> s2 [0, 65535] { R9010 += 1, R8947 += 1, R8948 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [75, 65535] { R9010 += 1, R8948 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R9012 += 1, R8950 += 1, R84 += 1 };
  s0 -> s2 [0, 65535] { R9012 += 1, R8949 += 1, R8950 += 1 };
  s0 -> s0 [0, 65535] { R9011 += 1, R9012 += 1 };
  s1 -> s1 [0, 65535] { R9012 += 1, R8950 += 1, R84 += 1 };
  s1 -> s4 [0, 65535] { R9012 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R9012 += 1, R8950 += 1, R84 += 1 };
  s2 -> s2 [0, 65535] { R9012 += 1, R8949 += 1, R8950 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R9012 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 74] { R9014 += 1, R8952 += 1 };
  s0 -> s0 [0, 65535] { R9013 += 1, R9014 += 1 };
  s0 -> s2 [0, 65535] { R9014 += 1, R8952 += 1, R86 += 1 };
  s0 -> s3 [0, 65535] { R9014 += 1, R8951 += 1, R8952 += 1 };
  s0 -> s1 [76, 65535] { R9014 += 1, R8952 += 1 };
  s1 -> s1 [0, 74] { R9014 += 1, R8952 += 1 };
  s1 -> s1 [0, 65535] { R9014 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [76, 65535] { R9014 += 1, R8952 += 1 };
  s2 -> s1 [0, 74] { R9014 += 1, R8952 += 1 };
  s2 -> s2 [0, 65535] { R9014 += 1, R8952 += 1, R86 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R9014 += 1 };
  s2 -> s1 [76, 65535] { R9014 += 1, R8952 += 1 };
  s3 -> s1 [0, 74] { R9014 += 1, R8952 += 1 };
  s3 -> s2 [0, 65535] { R9014 += 1, R8952 += 1, R86 += 1 };
  s3 -> s3 [0, 65535] { R9014 += 1, R8951 += 1, R8952 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [76, 65535] { R9014 += 1, R8952 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R9014 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 65535] { R9016 += 1, R8954 += 1 };
  s0 -> s2 [0, 65535] { R9016 += 1, R8954 += 1, R90 += 1 };
  s0 -> s3 [0, 65535] { R9016 += 1, R8953 += 1, R8954 += 1 };
  s0 -> s0 [0, 65535] { R9015 += 1, R9016 += 1 };
  s1 -> s5 [0, 65535] { R9016 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R9016 += 1, R8954 += 1 };
  s2 -> s5 [0, 65535] { R9016 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R9016 += 1, R8954 += 1 };
  s2 -> s2 [0, 65535] { R9016 += 1, R8954 += 1, R90 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R9016 += 1, R8954 += 1 };
  s3 -> s2 [0, 65535] { R9016 += 1, R8954 += 1, R90 += 1 };
  s3 -> s3 [0, 65535] { R9016 += 1, R8953 += 1, R8954 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R9016 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R9018 += 1, R8956 += 1, R95 += 1, R96 += 1 };
  s0 -> s0 [0, 65535] { R9017 += 1, R9018 += 1 };
  s0 -> s2 [0, 65535] { R9018 += 1, R8955 += 1, R8956 += 1 };
  s0 -> s3 [0, 65535] { R9018 += 1, R8956 += 1, R94 += 1, R95 += 1 };
  s1 -> s1 [0, 65535] { R9018 += 1, R8956 += 1, R95 += 1, R96 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R9018 += 1 };
  s1 -> s6 [0, 65535] { R9018 += 1, R8956 += 1 };
  s2 -> s1 [0, 65535] { R9018 += 1, R8956 += 1, R95 += 1, R96 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R9018 += 1, R8955 += 1, R8956 += 1 };
  s2 -> s3 [0, 65535] { R9018 += 1, R8956 += 1, R94 += 1, R95 += 1 };
  s3 -> s1 [0, 65535] { R9018 += 1, R8956 += 1, R95 += 1, R96 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R9018 += 1 };
  s3 -> s3 [0, 65535] { R9018 += 1, R8956 += 1, R94 += 1, R95 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R9018 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R9018 += 1 };
  s6 -> s6 [0, 65535] { R9018 += 1, R8956 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 74] { R9020 += 1, R8958 += 1, R6809 += 1 };
  s0 -> s2 [0, 65535] { R9020 += 1, R8958 += 1 };
  s0 -> s3 [0, 65535] { R9020 += 1, R8957 += 1, R8958 += 1 };
  s0 -> s4 [0, 65535] { R9020 += 1, R8958 += 1, R6809 += 1, R6810 += 1 };
  s0 -> s0 [0, 65535] { R9019 += 1, R9020 += 1 };
  s0 -> s1 [76, 65535] { R9020 += 1, R8958 += 1, R6809 += 1 };
  s1 -> s1 [0, 74] { R9020 += 1, R8958 += 1, R6809 += 1 };
  s1 -> s1 [0, 65535] { R9020 += 1, R8958 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R9020 += 1 };
  s1 -> s1 [76, 65535] { R9020 += 1, R8958 += 1, R6809 += 1 };
  s2 -> s2 [0, 65535] { R9020 += 1, R8958 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R9020 += 1 };
  s3 -> s1 [0, 74] { R9020 += 1, R8958 += 1, R6809 += 1 };
  s3 -> s2 [0, 65535] { R9020 += 1, R8958 += 1 };
  s3 -> s3 [0, 65535] { R9020 += 1, R8957 += 1, R8958 += 1 };
  s3 -> s4 [0, 65535] { R9020 += 1, R8958 += 1, R6809 += 1, R6810 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [76, 65535] { R9020 += 1, R8958 += 1, R6809 += 1 };
  s4 -> s1 [0, 74] { R9020 += 1, R8958 += 1, R6809 += 1 };
  s4 -> s2 [0, 65535] { R9020 += 1, R8958 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R9020 += 1, R8958 += 1, R6809 += 1, R6810 += 1 };
  s4 -> s6 [0, 65535] { R9020 += 1 };
  s4 -> s1 [76, 65535] { R9020 += 1, R8958 += 1, R6809 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9020 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 74] { R9022 += 1, R8960 += 1, R8490 += 1, R8492 += 1 };
  s0 -> s2 [0, 65535] { R9022 += 1, R8959 += 1, R8960 += 1 };
  s0 -> s3 [0, 65535] { R9022 += 1, R8960 += 1, R8489 += 1, R8490 += 1 };
  s0 -> s0 [0, 65535] { R9021 += 1, R9022 += 1 };
  s0 -> s4 [0, 65535] { R9022 += 1, R8960 += 1, R8490 += 1, R8491 += 1, R8492 += 1 };
  s0 -> s5 [75, 75] { R9022 += 1, R8960 += 1, R8490 += 1, R8492 += 1 };
  s0 -> s1 [76, 65535] { R9022 += 1, R8960 += 1, R8490 += 1, R8492 += 1 };
  s1 -> s1 [0, 74] { R9022 += 1, R8960 += 1, R8490 += 1, R8492 += 1 };
  s1 -> s5 [75, 75] { R9022 += 1, R8960 += 1, R8490 += 1, R8492 += 1 };
  s1 -> s1 [76, 65535] { R9022 += 1, R8960 += 1, R8490 += 1, R8492 += 1 };
  s2 -> s1 [0, 74] { R9022 += 1, R8960 += 1, R8490 += 1, R8492 += 1 };
  s2 -> s2 [0, 65535] { R9022 += 1, R8959 += 1, R8960 += 1 };
  s2 -> s3 [0, 65535] { R9022 += 1, R8960 += 1, R8489 += 1, R8490 += 1 };
  s2 -> s4 [0, 65535] { R9022 += 1, R8960 += 1, R8490 += 1, R8491 += 1, R8492 += 1 };
  s2 -> s5 [75, 75] { R9022 += 1, R8960 += 1, R8490 += 1, R8492 += 1 };
  s2 -> s1 [76, 65535] { R9022 += 1, R8960 += 1, R8490 += 1, R8492 += 1 };
  s3 -> s1 [0, 74] { R9022 += 1, R8960 += 1, R8490 += 1, R8492 += 1 };
  s3 -> s3 [0, 65535] { R9022 += 1, R8960 += 1, R8489 += 1, R8490 += 1 };
  s3 -> s4 [0, 65535] { R9022 += 1, R8960 += 1, R8490 += 1, R8491 += 1, R8492 += 1 };
  s3 -> s5 [75, 75] { R9022 += 1, R8960 += 1, R8490 += 1, R8492 += 1 };
  s3 -> s1 [76, 65535] { R9022 += 1, R8960 += 1, R8490 += 1, R8492 += 1 };
  s4 -> s1 [0, 74] { R9022 += 1, R8960 += 1, R8490 += 1, R8492 += 1 };
  s4 -> s4 [0, 65535] { R9022 += 1, R8960 += 1, R8490 += 1, R8491 += 1, R8492 += 1 };
  s4 -> s5 [75, 75] { R9022 += 1, R8960 += 1, R8490 += 1, R8492 += 1 };
  s4 -> s1 [76, 65535] { R9022 += 1, R8960 += 1, R8490 += 1, R8492 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R9022 += 1, R8960 += 1 };
  s5 -> s8 [0, 65535] { R9022 += 1, R8960 += 1, R8490 += 1 };
  s5 -> s5 [0, 65535] { R9022 += 1, R8960 += 1, R8490 += 1, R8492 += 1 };
  s5 -> s9 [0, 65535] { R9022 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R9022 += 1, R8960 += 1 };
  s7 -> s9 [0, 65535] { R9022 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R9022 += 1, R8960 += 1 };
  s8 -> s8 [0, 65535] { R9022 += 1, R8960 += 1, R8490 += 1 };
  s8 -> s9 [0, 65535] { R9022 += 1 };
  s9 -> s6 [0, 65535];
  s9 -> s9 [0, 65535] { R9022 += 1 };
  accepting s8, s5, s9, s6, s7;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 65535] { R9024 += 1, R8962 += 1, R8939 += 1, R8941 += 1, R8942 += 1 };
  s0 -> s0 [0, 65535] { R9023 += 1, R9024 += 1 };
  s0 -> s2 [0, 65535] { R9024 += 1, R8961 += 1, R8962 += 1 };
  s0 -> s3 [0, 65535] { R9024 += 1, R8962 += 1, R8939 += 1, R8940 += 1, R8941 += 1 };
  s0 -> s4 [0, 65535] { R9024 += 1, R8962 += 1 };
  s1 -> s5 [0, 65535] { R9024 += 1 };
  s1 -> s1 [0, 65535] { R9024 += 1, R8962 += 1, R8939 += 1, R8941 += 1, R8942 += 1 };
  s1 -> s7 [0, 65535] { R9024 += 1, R8962 += 1, R8939 += 1 };
  s1 -> s4 [0, 65535] { R9024 += 1, R8962 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s1 [0, 65535] { R9024 += 1, R8962 += 1, R8939 += 1, R8941 += 1, R8942 += 1 };
  s2 -> s2 [0, 65535] { R9024 += 1, R8961 += 1, R8962 += 1 };
  s2 -> s3 [0, 65535] { R9024 += 1, R8962 += 1, R8939 += 1, R8940 += 1, R8941 += 1 };
  s2 -> s4 [0, 65535] { R9024 += 1, R8962 += 1 };
  s2 -> s6 [0, 65535];
  s3 -> s5 [0, 65535] { R9024 += 1 };
  s3 -> s1 [0, 65535] { R9024 += 1, R8962 += 1, R8939 += 1, R8941 += 1, R8942 += 1 };
  s3 -> s3 [0, 65535] { R9024 += 1, R8962 += 1, R8939 += 1, R8940 += 1, R8941 += 1 };
  s3 -> s4 [0, 65535] { R9024 += 1, R8962 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R9024 += 1 };
  s4 -> s4 [0, 65535] { R9024 += 1, R8962 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R9024 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R9024 += 1 };
  s7 -> s7 [0, 65535] { R9024 += 1, R8962 += 1, R8939 += 1 };
  s7 -> s4 [0, 65535] { R9024 += 1, R8962 += 1 };
  s7 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R9026 += 1, R8981 += 1, R8982 += 1 };
  s0 -> s0 [0, 65535] { R9025 += 1, R9026 += 1 };
  s0 -> s2 [0, 65535] { R9026 += 1, R8982 += 1, R21 += 1 };
  s1 -> s1 [0, 65535] { R9026 += 1, R8981 += 1, R8982 += 1 };
  s1 -> s2 [0, 65535] { R9026 += 1, R8982 += 1, R21 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R9026 += 1 };
  s2 -> s2 [0, 65535] { R9026 += 1, R8982 += 1, R21 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R9026 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 69] { R9028 += 1, R8984 += 1 };
  s0 -> s2 [0, 65535] { R9028 += 1, R8983 += 1, R8984 += 1 };
  s0 -> s0 [0, 65535] { R9027 += 1, R9028 += 1 };
  s0 -> s3 [70, 70] { R9028 += 1, R8984 += 1 };
  s0 -> s4 [70, 70] { R9028 += 1, R8984 += 1 };
  s0 -> s5 [75, 75] { R9028 += 1, R8984 += 1 };
  s0 -> s1 [76, 65535] { R9028 += 1, R8984 += 1 };
  s1 -> s1 [0, 69] { R9028 += 1, R8984 += 1 };
  s1 -> s3 [70, 70] { R9028 += 1, R8984 += 1 };
  s1 -> s4 [70, 70] { R9028 += 1, R8984 += 1 };
  s1 -> s5 [75, 75] { R9028 += 1, R8984 += 1 };
  s1 -> s1 [76, 65535] { R9028 += 1, R8984 += 1 };
  s2 -> s1 [0, 69] { R9028 += 1, R8984 += 1 };
  s2 -> s2 [0, 65535] { R9028 += 1, R8983 += 1, R8984 += 1 };
  s2 -> s3 [70, 70] { R9028 += 1, R8984 += 1 };
  s2 -> s4 [70, 70] { R9028 += 1, R8984 += 1 };
  s2 -> s5 [75, 75] { R9028 += 1, R8984 += 1 };
  s2 -> s1 [76, 65535] { R9028 += 1, R8984 += 1 };
  s4 -> s4 [0, 70] { R9028 += 1, R8984 += 1 };
  s4 -> s7 [75, 75] { R9028 += 1, R8984 += 1 };
  s4 -> s4 [76, 65535] { R9028 += 1, R8984 += 1 };
  s5 -> s5 [0, 69] { R9028 += 1, R8984 += 1 };
  s5 -> s5 [0, 65535] { R9028 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [70, 70] { R9028 += 1, R8984 += 1 };
  s5 -> s8 [70, 70] { R9028 += 1, R8984 += 1 };
  s5 -> s5 [75, 65535] { R9028 += 1, R8984 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 70] { R9028 += 1, R8984 += 1 };
  s7 -> s7 [0, 65535] { R9028 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [75, 65535] { R9028 += 1, R8984 += 1 };
  s8 -> s8 [0, 65535] { R9028 += 1 };
  s8 -> s6 [0, 65535];
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 69] { R9030 += 1, R8986 += 1, R83 += 1 };
  s0 -> s0 [0, 65535] { R9029 += 1, R9030 += 1 };
  s0 -> s2 [0, 65535] { R9030 += 1, R8985 += 1, R8986 += 1 };
  s0 -> s3 [70, 70] { R9030 += 1, R8986 += 1, R83 += 1 };
  s0 -> s4 [70, 70] { R9030 += 1, R8986 += 1, R83 += 1 };
  s0 -> s1 [71, 65535] { R9030 += 1, R8986 += 1, R83 += 1 };
  s1 -> s1 [0, 69] { R9030 += 1, R8986 += 1, R83 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R9030 += 1 };
  s1 -> s3 [70, 70] { R9030 += 1, R8986 += 1, R83 += 1 };
  s1 -> s4 [70, 70] { R9030 += 1, R8986 += 1, R83 += 1 };
  s1 -> s1 [71, 65535] { R9030 += 1, R8986 += 1, R83 += 1 };
  s2 -> s1 [0, 69] { R9030 += 1, R8986 += 1, R83 += 1 };
  s2 -> s2 [0, 65535] { R9030 += 1, R8985 += 1, R8986 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [70, 70] { R9030 += 1, R8986 += 1, R83 += 1 };
  s2 -> s4 [70, 70] { R9030 += 1, R8986 += 1, R83 += 1 };
  s2 -> s1 [71, 65535] { R9030 += 1, R8986 += 1, R83 += 1 };
  s3 -> s3 [0, 65535] { R9030 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R9030 += 1, R8986 += 1, R83 += 1 };
  s4 -> s6 [0, 65535] { R9030 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9030 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 69] { R9032 += 1, R8988 += 1, R85 += 1 };
  s0 -> s0 [0, 65535] { R9031 += 1, R9032 += 1 };
  s0 -> s2 [0, 65535] { R9032 += 1, R8987 += 1, R8988 += 1 };
  s0 -> s3 [70, 70] { R9032 += 1, R8988 += 1, R85 += 1 };
  s0 -> s4 [70, 70] { R9032 += 1, R8988 += 1, R85 += 1 };
  s0 -> s1 [71, 65535] { R9032 += 1, R8988 += 1, R85 += 1 };
  s1 -> s1 [0, 69] { R9032 += 1, R8988 += 1, R85 += 1 };
  s1 -> s1 [0, 65535] { R9032 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [70, 70] { R9032 += 1, R8988 += 1, R85 += 1 };
  s1 -> s4 [70, 70] { R9032 += 1, R8988 += 1, R85 += 1 };
  s1 -> s1 [71, 65535] { R9032 += 1, R8988 += 1, R85 += 1 };
  s2 -> s1 [0, 69] { R9032 += 1, R8988 += 1, R85 += 1 };
  s2 -> s2 [0, 65535] { R9032 += 1, R8987 += 1, R8988 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [70, 70] { R9032 += 1, R8988 += 1, R85 += 1 };
  s2 -> s4 [70, 70] { R9032 += 1, R8988 += 1, R85 += 1 };
  s2 -> s1 [71, 65535] { R9032 += 1, R8988 += 1, R85 += 1 };
  s3 -> s3 [0, 65535] { R9032 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R9032 += 1, R8988 += 1, R85 += 1 };
  s4 -> s5 [0, 65535] { R9032 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R9032 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 69] { R9034 += 1, R8990 += 1, R88 += 1 };
  s0 -> s2 [0, 69] { R9034 += 1, R8990 += 1, R87 += 1, R88 += 1 };
  s0 -> s0 [0, 65535] { R9033 += 1, R9034 += 1 };
  s0 -> s3 [0, 65535] { R9034 += 1, R8989 += 1, R8990 += 1 };
  s0 -> s4 [70, 70] { R9034 += 1, R8990 += 1, R87 += 1, R88 += 1 };
  s0 -> s5 [70, 70] { R9034 += 1, R8990 += 1, R87 += 1, R88 += 1 };
  s0 -> s6 [70, 70] { R9034 += 1, R8990 += 1, R88 += 1 };
  s0 -> s7 [70, 70] { R9034 += 1, R8990 += 1, R88 += 1 };
  s0 -> s1 [71, 74] { R9034 += 1, R8990 += 1, R88 += 1 };
  s0 -> s2 [71, 65535] { R9034 += 1, R8990 += 1, R87 += 1, R88 += 1 };
  s0 -> s8 [75, 75] { R9034 += 1, R8990 += 1, R88 += 1 };
  s0 -> s1 [76, 65535] { R9034 += 1, R8990 += 1, R88 += 1 };
  s1 -> s1 [0, 69] { R9034 += 1, R8990 += 1, R88 += 1 };
  s1 -> s6 [70, 70] { R9034 += 1, R8990 += 1, R88 += 1 };
  s1 -> s7 [70, 70] { R9034 += 1, R8990 += 1, R88 += 1 };
  s1 -> s1 [71, 74] { R9034 += 1, R8990 += 1, R88 += 1 };
  s1 -> s8 [75, 75] { R9034 += 1, R8990 += 1, R88 += 1 };
  s1 -> s1 [76, 65535] { R9034 += 1, R8990 += 1, R88 += 1 };
  s2 -> s1 [0, 69] { R9034 += 1, R8990 += 1, R88 += 1 };
  s2 -> s2 [0, 69] { R9034 += 1, R8990 += 1, R87 += 1, R88 += 1 };
  s2 -> s4 [70, 70] { R9034 += 1, R8990 += 1, R87 += 1, R88 += 1 };
  s2 -> s5 [70, 70] { R9034 += 1, R8990 += 1, R87 += 1, R88 += 1 };
  s2 -> s6 [70, 70] { R9034 += 1, R8990 += 1, R88 += 1 };
  s2 -> s7 [70, 70] { R9034 += 1, R8990 += 1, R88 += 1 };
  s2 -> s1 [71, 74] { R9034 += 1, R8990 += 1, R88 += 1 };
  s2 -> s2 [71, 65535] { R9034 += 1, R8990 += 1, R87 += 1, R88 += 1 };
  s2 -> s8 [75, 75] { R9034 += 1, R8990 += 1, R88 += 1 };
  s2 -> s1 [76, 65535] { R9034 += 1, R8990 += 1, R88 += 1 };
  s3 -> s1 [0, 69] { R9034 += 1, R8990 += 1, R88 += 1 };
  s3 -> s2 [0, 69] { R9034 += 1, R8990 += 1, R87 += 1, R88 += 1 };
  s3 -> s3 [0, 65535] { R9034 += 1, R8989 += 1, R8990 += 1 };
  s3 -> s4 [70, 70] { R9034 += 1, R8990 += 1, R87 += 1, R88 += 1 };
  s3 -> s5 [70, 70] { R9034 += 1, R8990 += 1, R87 += 1, R88 += 1 };
  s3 -> s6 [70, 70] { R9034 += 1, R8990 += 1, R88 += 1 };
  s3 -> s7 [70, 70] { R9034 += 1, R8990 += 1, R88 += 1 };
  s3 -> s1 [71, 74] { R9034 += 1, R8990 += 1, R88 += 1 };
  s3 -> s2 [71, 65535] { R9034 += 1, R8990 += 1, R87 += 1, R88 += 1 };
  s3 -> s8 [75, 75] { R9034 += 1, R8990 += 1, R88 += 1 };
  s3 -> s1 [76, 65535] { R9034 += 1, R8990 += 1, R88 += 1 };
  s5 -> s7 [0, 74] { R9034 += 1, R8990 += 1, R88 += 1 };
  s5 -> s5 [0, 65535] { R9034 += 1, R8990 += 1, R87 += 1, R88 += 1 };
  s5 -> s11 [75, 75] { R9034 += 1, R8990 += 1, R88 += 1 };
  s5 -> s7 [76, 65535] { R9034 += 1, R8990 += 1, R88 += 1 };
  s7 -> s7 [0, 74] { R9034 += 1, R8990 += 1, R88 += 1 };
  s7 -> s11 [75, 75] { R9034 += 1, R8990 += 1, R88 += 1 };
  s7 -> s7 [76, 65535] { R9034 += 1, R8990 += 1, R88 += 1 };
  s8 -> s8 [0, 69] { R9034 += 1, R8990 += 1, R88 += 1 };
  s8 -> s8 [0, 65535] { R9034 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [70, 70] { R9034 += 1, R8990 += 1, R88 += 1 };
  s8 -> s11 [70, 70] { R9034 += 1, R8990 += 1, R88 += 1 };
  s8 -> s8 [71, 65535] { R9034 += 1, R8990 += 1, R88 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R9034 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R9034 += 1, R8990 += 1, R88 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s12 [0, 65535] { R9034 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R9034 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 69] { R9036 += 1, R8992 += 1, R91 += 1, R92 += 1 };
  s0 -> s0 [0, 65535] { R9035 += 1, R9036 += 1 };
  s0 -> s2 [0, 65535] { R9036 += 1, R8991 += 1, R8992 += 1 };
  s0 -> s3 [70, 70] { R9036 += 1, R8992 += 1, R91 += 1, R92 += 1 };
  s0 -> s4 [70, 70] { R9036 += 1, R8992 += 1, R91 += 1, R92 += 1 };
  s0 -> s1 [71, 65535] { R9036 += 1, R8992 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 69] { R9036 += 1, R8992 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 65535] { R9036 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [70, 70] { R9036 += 1, R8992 += 1, R91 += 1, R92 += 1 };
  s1 -> s4 [70, 70] { R9036 += 1, R8992 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [71, 65535] { R9036 += 1, R8992 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [0, 69] { R9036 += 1, R8992 += 1, R91 += 1, R92 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R9036 += 1, R8991 += 1, R8992 += 1 };
  s2 -> s3 [70, 70] { R9036 += 1, R8992 += 1, R91 += 1, R92 += 1 };
  s2 -> s4 [70, 70] { R9036 += 1, R8992 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [71, 65535] { R9036 += 1, R8992 += 1, R91 += 1, R92 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R9036 += 1, R8992 += 1, R91 += 1, R92 += 1 };
  s3 -> s6 [0, 65535] { R9036 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R9036 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9036 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 69] { R9038 += 1, R8994 += 1, R6806 += 1, R6807 += 1 };
  s0 -> s2 [0, 69] { R9038 += 1, R8994 += 1, R6805 += 1, R6806 += 1 };
  s0 -> s3 [0, 65535] { R9038 += 1, R8993 += 1, R8994 += 1 };
  s0 -> s0 [0, 65535] { R9037 += 1, R9038 += 1 };
  s0 -> s4 [70, 70] { R9038 += 1, R8994 += 1, R6805 += 1, R6806 += 1 };
  s0 -> s5 [70, 70] { R9038 += 1, R8994 += 1, R6806 += 1, R6807 += 1 };
  s0 -> s6 [70, 70] { R9038 += 1, R8994 += 1, R6806 += 1, R6807 += 1 };
  s0 -> s7 [70, 70] { R9038 += 1, R8994 += 1, R6805 += 1, R6806 += 1 };
  s0 -> s1 [71, 65535] { R9038 += 1, R8994 += 1, R6806 += 1, R6807 += 1 };
  s0 -> s2 [71, 65535] { R9038 += 1, R8994 += 1, R6805 += 1, R6806 += 1 };
  s1 -> s1 [0, 69] { R9038 += 1, R8994 += 1, R6806 += 1, R6807 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s1 [0, 65535] { R9038 += 1 };
  s1 -> s5 [70, 70] { R9038 += 1, R8994 += 1, R6806 += 1, R6807 += 1 };
  s1 -> s6 [70, 70] { R9038 += 1, R8994 += 1, R6806 += 1, R6807 += 1 };
  s1 -> s1 [71, 65535] { R9038 += 1, R8994 += 1, R6806 += 1, R6807 += 1 };
  s2 -> s1 [0, 69] { R9038 += 1, R8994 += 1, R6806 += 1, R6807 += 1 };
  s2 -> s2 [0, 69] { R9038 += 1, R8994 += 1, R6805 += 1, R6806 += 1 };
  s2 -> s4 [70, 70] { R9038 += 1, R8994 += 1, R6805 += 1, R6806 += 1 };
  s2 -> s5 [70, 70] { R9038 += 1, R8994 += 1, R6806 += 1, R6807 += 1 };
  s2 -> s6 [70, 70] { R9038 += 1, R8994 += 1, R6806 += 1, R6807 += 1 };
  s2 -> s7 [70, 70] { R9038 += 1, R8994 += 1, R6805 += 1, R6806 += 1 };
  s2 -> s1 [71, 65535] { R9038 += 1, R8994 += 1, R6806 += 1, R6807 += 1 };
  s2 -> s2 [71, 65535] { R9038 += 1, R8994 += 1, R6805 += 1, R6806 += 1 };
  s3 -> s1 [0, 69] { R9038 += 1, R8994 += 1, R6806 += 1, R6807 += 1 };
  s3 -> s2 [0, 69] { R9038 += 1, R8994 += 1, R6805 += 1, R6806 += 1 };
  s3 -> s3 [0, 65535] { R9038 += 1, R8993 += 1, R8994 += 1 };
  s3 -> s4 [70, 70] { R9038 += 1, R8994 += 1, R6805 += 1, R6806 += 1 };
  s3 -> s5 [70, 70] { R9038 += 1, R8994 += 1, R6806 += 1, R6807 += 1 };
  s3 -> s6 [70, 70] { R9038 += 1, R8994 += 1, R6806 += 1, R6807 += 1 };
  s3 -> s7 [70, 70] { R9038 += 1, R8994 += 1, R6805 += 1, R6806 += 1 };
  s3 -> s1 [71, 65535] { R9038 += 1, R8994 += 1, R6806 += 1, R6807 += 1 };
  s3 -> s2 [71, 65535] { R9038 += 1, R8994 += 1, R6805 += 1, R6806 += 1 };
  s5 -> s9 [0, 65535] { R9038 += 1 };
  s5 -> s5 [0, 65535] { R9038 += 1, R8994 += 1, R6806 += 1, R6807 += 1 };
  s5 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R9038 += 1 };
  s6 -> s8 [0, 65535];
  s7 -> s5 [0, 65535] { R9038 += 1, R8994 += 1, R6806 += 1, R6807 += 1 };
  s7 -> s7 [0, 65535] { R9038 += 1, R8994 += 1, R6805 += 1, R6806 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R9038 += 1 };
  s9 -> s8 [0, 65535];
  accepting s8, s5, s9, s6, s1;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 69] { R9040 += 1, R8996 += 1, R8485 += 1, R8486 += 1 };
  s0 -> s0 [0, 65535] { R9039 += 1, R9040 += 1 };
  s0 -> s2 [0, 65535] { R9040 += 1, R8995 += 1, R8996 += 1 };
  s0 -> s3 [70, 70] { R9040 += 1, R8996 += 1, R8485 += 1, R8486 += 1 };
  s0 -> s4 [70, 70] { R9040 += 1, R8996 += 1, R8485 += 1, R8486 += 1 };
  s0 -> s1 [71, 65535] { R9040 += 1, R8996 += 1, R8485 += 1, R8486 += 1 };
  s1 -> s1 [0, 69] { R9040 += 1, R8996 += 1, R8485 += 1, R8486 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R9040 += 1 };
  s1 -> s3 [70, 70] { R9040 += 1, R8996 += 1, R8485 += 1, R8486 += 1 };
  s1 -> s4 [70, 70] { R9040 += 1, R8996 += 1, R8485 += 1, R8486 += 1 };
  s1 -> s1 [71, 65535] { R9040 += 1, R8996 += 1, R8485 += 1, R8486 += 1 };
  s2 -> s1 [0, 69] { R9040 += 1, R8996 += 1, R8485 += 1, R8486 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R9040 += 1, R8995 += 1, R8996 += 1 };
  s2 -> s3 [70, 70] { R9040 += 1, R8996 += 1, R8485 += 1, R8486 += 1 };
  s2 -> s4 [70, 70] { R9040 += 1, R8996 += 1, R8485 += 1, R8486 += 1 };
  s2 -> s1 [71, 65535] { R9040 += 1, R8996 += 1, R8485 += 1, R8486 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R9040 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R9040 += 1 };
  s4 -> s4 [0, 65535] { R9040 += 1, R8996 += 1, R8485 += 1, R8486 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9040 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 69] { R9042 += 1, R8998 += 1, R8933 += 1, R8934 += 1 };
  s0 -> s2 [0, 69] { R9042 += 1, R8998 += 1, R8934 += 1, R8935 += 1, R8936 += 1 };
  s0 -> s3 [0, 65535] { R9042 += 1, R8997 += 1, R8998 += 1 };
  s0 -> s0 [0, 65535] { R9041 += 1, R9042 += 1 };
  s0 -> s4 [70, 70] { R9042 += 1, R8998 += 1, R8933 += 1, R8934 += 1 };
  s0 -> s5 [70, 70] { R9042 += 1, R8998 += 1, R8934 += 1, R8935 += 1, R8936 += 1 };
  s0 -> s6 [70, 70] { R9042 += 1, R8998 += 1, R8933 += 1, R8934 += 1 };
  s0 -> s7 [70, 70] { R9042 += 1, R8998 += 1, R8934 += 1, R8935 += 1, R8936 += 1 };
  s0 -> s1 [71, 65535] { R9042 += 1, R8998 += 1, R8933 += 1, R8934 += 1 };
  s0 -> s2 [71, 65535] { R9042 += 1, R8998 += 1, R8934 += 1, R8935 += 1, R8936 += 1 };
  s1 -> s1 [0, 69] { R9042 += 1, R8998 += 1, R8933 += 1, R8934 += 1 };
  s1 -> s2 [0, 69] { R9042 += 1, R8998 += 1, R8934 += 1, R8935 += 1, R8936 += 1 };
  s1 -> s4 [70, 70] { R9042 += 1, R8998 += 1, R8933 += 1, R8934 += 1 };
  s1 -> s5 [70, 70] { R9042 += 1, R8998 += 1, R8934 += 1, R8935 += 1, R8936 += 1 };
  s1 -> s6 [70, 70] { R9042 += 1, R8998 += 1, R8933 += 1, R8934 += 1 };
  s1 -> s7 [70, 70] { R9042 += 1, R8998 += 1, R8934 += 1, R8935 += 1, R8936 += 1 };
  s1 -> s1 [71, 65535] { R9042 += 1, R8998 += 1, R8933 += 1, R8934 += 1 };
  s1 -> s2 [71, 65535] { R9042 += 1, R8998 += 1, R8934 += 1, R8935 += 1, R8936 += 1 };
  s2 -> s2 [0, 69] { R9042 += 1, R8998 += 1, R8934 += 1, R8935 += 1, R8936 += 1 };
  s2 -> s2 [0, 65535] { R9042 += 1 };
  s2 -> s9 [0, 65535];
  s2 -> s5 [70, 70] { R9042 += 1, R8998 += 1, R8934 += 1, R8935 += 1, R8936 += 1 };
  s2 -> s7 [70, 70] { R9042 += 1, R8998 += 1, R8934 += 1, R8935 += 1, R8936 += 1 };
  s2 -> s2 [71, 65535] { R9042 += 1, R8998 += 1, R8934 += 1, R8935 += 1, R8936 += 1 };
  s3 -> s1 [0, 69] { R9042 += 1, R8998 += 1, R8933 += 1, R8934 += 1 };
  s3 -> s2 [0, 69] { R9042 += 1, R8998 += 1, R8934 += 1, R8935 += 1, R8936 += 1 };
  s3 -> s3 [0, 65535] { R9042 += 1, R8997 += 1, R8998 += 1 };
  s3 -> s4 [70, 70] { R9042 += 1, R8998 += 1, R8933 += 1, R8934 += 1 };
  s3 -> s5 [70, 70] { R9042 += 1, R8998 += 1, R8934 += 1, R8935 += 1, R8936 += 1 };
  s3 -> s6 [70, 70] { R9042 += 1, R8998 += 1, R8933 += 1, R8934 += 1 };
  s3 -> s7 [70, 70] { R9042 += 1, R8998 += 1, R8934 += 1, R8935 += 1, R8936 += 1 };
  s3 -> s1 [71, 65535] { R9042 += 1, R8998 += 1, R8933 += 1, R8934 += 1 };
  s3 -> s2 [71, 65535] { R9042 += 1, R8998 += 1, R8934 += 1, R8935 += 1, R8936 += 1 };
  s5 -> s5 [0, 65535] { R9042 += 1 };
  s5 -> s9 [0, 65535];
  s6 -> s6 [0, 65535] { R9042 += 1, R8998 += 1, R8933 += 1, R8934 += 1 };
  s6 -> s7 [0, 65535] { R9042 += 1, R8998 += 1, R8934 += 1, R8935 += 1, R8936 += 1 };
  s7 -> s8 [0, 65535] { R9042 += 1 };
  s7 -> s9 [0, 65535];
  s7 -> s7 [0, 65535] { R9042 += 1, R8998 += 1, R8934 += 1, R8935 += 1, R8936 += 1 };
  s8 -> s8 [0, 65535] { R9042 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s8, s5, s2, s9, s7;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [102, 102];
  accepting s1;
};
};
constraint R2 = R8960 && R3 = R9042 && R23 - R9042 = -1 && R24 = R9042 && R25 - R9042 = -1 && R26 = R9042 && R27 = 0 && R28 = 1 && R29 = 0 && R30 = 1 && R45 + R84 + R83 + -1*R8490 + -1*R8486 - R66 = 0 && R49 + R89 + R87 = 0 && R50 + R90 + R88 + -1*R8490 + -1*R8486 - R66 = 0 && R55 + R96 + R93 + -1*R8492 + -1*R8488 - R68 = 0 && R65 + R8489 + R8485 = 0 && R67 + R8491 + R8487 = 0 && R8959 = 0 && R8983 = 0 && R8984 = 0 && R8989 = 0 && R8990 = 0 && R8993 = 0 && R8994 = 0 && R8997 = 0 && R8998 = 0 && R8999 = 0 && R9000 = R9042 && R9001 = 0 && R9002 = R9042 && R9003 = 0 && R9004 = R9042 && R9005 = 0 && R9006 = R9042 && R9007 = 0 && R9008 = R9042 && R9009 = 0 && R9010 = R9042 && R9011 = 0 && R9012 = R9042 && R9013 = 0 && R9014 = R9042 && R9015 = 0 && R9016 = R9042 && R9017 = 0 && R9018 = R9042 && R9019 = 0 && R9020 = R9042 && R9021 = 0 && R9022 = R9042 && R9023 = 0 && R9024 = R9042 && R9025 = 0 && R9026 = R9042 && R9027 = 0 && R9028 = R9042 && R9029 = 0 && R9030 = R9042 && R9031 = 0 && R9032 = R9042 && R9033 = 0 && R9034 = R9042 && R9035 = 0 && R9036 = R9042 && R9037 = 0 && R9038 = R9042 && R9039 = 0 && R9040 = R9042 && R9041 = 0 && R12 < 1 && R15 < 1 && R16 < 1 && R47 + R86 + R85 < 1 && R61 + R6810 + R6807 < 1 && -1*R8490 + -1*R8486 - R66 < 1 && -1*R8492 + -1*R8488 - R68 < 1 && -1 < R8960 && 0 < R9042 && (R53 + R94 + R91 != 0 || R54 + R95 + R92 + -1*R8490 + -1*R8486 - R66 = 0 || R66 + R8490 + R8486 < 1) && (R59 + R6808 + R6805 != 0 || R60 + R6809 + R6806 + -1*R8490 + -1*R8486 - R66 = 0 || R66 + R8490 + R8486 < 1) && (R66 + R8490 + R8486 != 0 || ((R53 + R94 + R91 != 0 || R54 + R95 + R92 = 0 || R68 + R8492 + R8488 < 1) && (R53 + R94 + R91 = 0 || R68 + R8492 + R8488 < 1))) && (R66 + R8490 + R8486 != 0 || ((R59 + R6808 + R6805 != 0 || R60 + R6809 + R6806 = 0 || R68 + R8492 + R8488 < 1) && (R59 + R6808 + R6805 = 0 || R68 + R8492 + R8488 < 1))) && (R66 + R8490 + R8486 != 0 || ((R73 + R8938 + R8933 != 0 || R74 + R8939 + R8934 = 0 || R68 + R8492 + R8488 < 1) && (R73 + R8938 + R8933 = 0 || R68 + R8492 + R8488 < 1))) && (R68 + R8492 + R8488 != 0 || R77 + R8942 + R8937 = 0 || (R75 + R8940 + R8935 = 0 && R76 + R8941 + R8936 = 0)) && (R73 + R8938 + R8933 != 0 || R66 + R8490 + R8486 + -1*R8939 + -1*R8934 - R74 = 0 || R66 + R8490 + R8486 < 1) && (R75 + R8940 + R8935 != 0 || R68 + R8492 + R8488 + -1*R8941 + -1*R8936 - R76 = 0 || R68 + R8492 + R8488 < 1) && (R8943 != 0 || R8944 = R8960 || (R20 = 0 && R8960 = 0)) && (R8945 != 0 || R8946 = R8960 || (R20 = 0 && R8960 = 0)) && (R8947 != 0 || R8948 = R8960 || (R20 = 0 && R8960 = 0)) && (R8949 != 0 || R8950 = R8960 || (R20 = 0 && R8960 = 0)) && (R8951 != 0 || R8952 = R8960 || (R20 = 0 && R8960 = 0)) && (R8953 != 0 || R8954 = R8960 || (R20 = 0 && R8960 = 0)) && (R8955 != 0 || R8956 = R8960 || (R20 = 0 && R8960 = 0)) && (R8957 != 0 || R8958 = R8960 || (R20 = 0 && R8960 = 0)) && (R8961 != 0 || R8960 = R8962 || (R20 = 0 && R8960 = 0)) && (R21 = 0 || (R8981 = 0 && R8982 = 0)) && (R21 = 0 || (R8985 = 0 && R8986 = 0)) && (R21 = 0 || (R8987 = 0 && R8988 = 0)) && (R21 = 0 || (R8991 = 0 && R8992 = 0)) && (R21 = 0 || (R8995 = 0 && R8996 = 0)) && (R22 = 0 || (R8963 = 0 && R8964 = 0)) && (R22 = 0 || (R8965 = 0 && R8966 = 0)) && (R22 = 0 || (R8967 = 0 && R8968 = 0)) && (R22 = 0 || (R8969 = 0 && R8970 = 0)) && (R22 = 0 || (R8971 = 0 && R8972 = 0)) && (R22 = 0 || (R8973 = 0 && R8974 = 0)) && (R22 = 0 || (R8975 = 0 && R8976 = 0)) && (R22 = 0 || (R8977 = 0 && R8978 = 0)) && (R22 = 0 || (R8979 = 0 && R8980 = 0)) && (R53 + R94 + R91 = 0 || R66 + R8490 + R8486 < 1) && (R59 + R6808 + R6805 = 0 || R66 + R8490 + R8486 < 1) && (R73 + R8938 + R8933 = 0 || R66 + R8490 + R8486 < 1) && (R75 + R8940 + R8935 = 0 || R68 + R8492 + R8488 < 1) && (R8943 = 0 || (R20 = 0 && R8960 = 0)) && (R8945 = 0 || (R20 = 0 && R8960 = 0)) && (R8947 = 0 || (R20 = 0 && R8960 = 0)) && (R8949 = 0 || (R20 = 0 && R8960 = 0)) && (R8951 = 0 || (R20 = 0 && R8960 = 0)) && (R8953 = 0 || (R20 = 0 && R8960 = 0)) && (R8955 = 0 || (R20 = 0 && R8960 = 0)) && (R8957 = 0 || (R20 = 0 && R8960 = 0)) && (R8961 = 0 || (R20 = 0 && R8960 = 0));
// End of Parikh automata intersection problem
