// Parikh automata intersection problem, generated by OSTRICH+
counter int R10159, R10160, R10161, R10162, R10163, R10164, R10165, R10166, R10167, R10168, R10169, R10170, R10171, R10172, R10393, R10394, R10395, R10396, R10397, R10398, R10399, R10400, R10401, R10402, R10403, R10404, R10405, R10406, R10407, R10408, R10409, R10410, R10411, R10412, R10413, R10414, R10415, R10416, R10417, R10418, R10419, R10420, R10421, R10422, R10423, R10424, R10425, R10426, R10427, R10428, R10429, R10430, R10431, R10432, R10433, R10434, R10435, R10436, R10437, R10438, R10439, R10440, R10441, R10442, R10443, R10444, R10445, R10446, R10447, R10448, R10449, R10450, R10451, R10452, R10453, R10454, R10455, R10456, R10457, R10458, R10459, R10460, R10461, R10462, R10463, R10464, R10465, R10466, R10467, R10468, R10469, R10470, R10471, R10472, R10473, R10474, R10475, R10476, R10477, R10478, R10479, R10480, R10481, R10482, R10483, R10484, R10485, R10486, R10487, R10488, R10489, R10490, R10491, R10492, R10493, R10494, R10495, R10496, R10497, R10498, R10499, R10500, R10501, R10502, R12, R15, R16, R2, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R4, R45, R47, R49, R5, R50, R53, R54, R55, R59, R60, R61, R65, R66, R67, R68, R73, R74, R75, R76, R77, R83, R84, R85, R86, R87, R88, R89, R90, R91, R92, R93, R94, R95, R96;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [70, 70];
  s0 -> s0 [71, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [70, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R15 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 69];
  s0 -> s0 [0, 65535] { R16 += 1 };
  s0 -> s2 [70, 70];
  s0 -> s1 [71, 65535];
  s1 -> s1 [0, 69];
  s1 -> s2 [70, 70];
  s1 -> s1 [71, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R24 += 1 };
  s0 -> s0 [0, 65535] { R23 += 1, R24 += 1 };
  s0 -> s2 [9, 13] { R24 += 1 };
  s0 -> s1 [14, 31] { R24 += 1 };
  s0 -> s2 [32, 32] { R24 += 1 };
  s0 -> s1 [33, 65535] { R24 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R24 += 1 };
  s2 -> s1 [0, 65535] { R24 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R25 += 1, R26 += 1 };
  s1 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R28 += 1 };
  s0 -> s0 [0, 65535] { R27 += 1, R28 += 1 };
  s0 -> s2 [9, 13] { R28 += 1 };
  s0 -> s1 [14, 31] { R28 += 1 };
  s0 -> s2 [32, 32] { R28 += 1 };
  s0 -> s1 [33, 65535] { R28 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R28 += 1 };
  s2 -> s1 [0, 65535] { R28 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R29 += 1, R30 += 1 };
  s1 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R10424 += 1, R22 += 1 };
  s0 -> s0 [0, 65535] { R10423 += 1, R10424 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R10424 += 1, R22 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 69] { R10426 += 1 };
  s0 -> s0 [0, 65535] { R10425 += 1, R10426 += 1 };
  s0 -> s2 [70, 70] { R10426 += 1 };
  s0 -> s3 [70, 70] { R10426 += 1 };
  s0 -> s1 [76, 65535] { R10426 += 1 };
  s1 -> s1 [0, 69] { R10426 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R10426 += 1 };
  s1 -> s3 [70, 70] { R10426 += 1 };
  s1 -> s1 [76, 65535] { R10426 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 70] { R10426 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [76, 65535] { R10426 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 69] { R10428 += 1, R45 += 1 };
  s0 -> s0 [0, 65535] { R10427 += 1, R10428 += 1 };
  s0 -> s2 [70, 70] { R10428 += 1, R45 += 1 };
  s0 -> s3 [70, 70] { R10428 += 1, R45 += 1 };
  s0 -> s1 [71, 65535] { R10428 += 1, R45 += 1 };
  s1 -> s1 [0, 69] { R10428 += 1, R45 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R10428 += 1, R45 += 1 };
  s1 -> s3 [70, 70] { R10428 += 1, R45 += 1 };
  s1 -> s1 [71, 65535] { R10428 += 1, R45 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10428 += 1, R45 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 69] { R10430 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R10429 += 1, R10430 += 1 };
  s0 -> s2 [70, 70] { R10430 += 1, R47 += 1 };
  s0 -> s3 [70, 70] { R10430 += 1, R47 += 1 };
  s0 -> s1 [71, 65535] { R10430 += 1, R47 += 1 };
  s1 -> s1 [0, 69] { R10430 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R10430 += 1, R47 += 1 };
  s1 -> s3 [70, 70] { R10430 += 1, R47 += 1 };
  s1 -> s1 [71, 65535] { R10430 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R10430 += 1, R47 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 69] { R10432 += 1, R49 += 1, R50 += 1 };
  s0 -> s0 [0, 65535] { R10431 += 1, R10432 += 1 };
  s0 -> s2 [70, 70] { R10432 += 1, R49 += 1, R50 += 1 };
  s0 -> s3 [70, 70] { R10432 += 1, R49 += 1, R50 += 1 };
  s0 -> s1 [71, 65535] { R10432 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 69] { R10432 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R10432 += 1, R49 += 1, R50 += 1 };
  s1 -> s3 [70, 70] { R10432 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [71, 65535] { R10432 += 1, R49 += 1, R50 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R10432 += 1, R49 += 1, R50 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 69] { R10434 += 1, R53 += 1, R54 += 1 };
  s0 -> s0 [0, 65535] { R10433 += 1, R10434 += 1 };
  s0 -> s2 [70, 70] { R10434 += 1, R53 += 1, R54 += 1 };
  s0 -> s3 [70, 70] { R10434 += 1, R53 += 1, R54 += 1 };
  s0 -> s1 [71, 65535] { R10434 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 69] { R10434 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R10434 += 1, R53 += 1, R54 += 1 };
  s1 -> s3 [70, 70] { R10434 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [71, 65535] { R10434 += 1, R53 += 1, R54 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10434 += 1, R53 += 1, R54 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 69] { R10436 += 1, R59 += 1, R60 += 1 };
  s0 -> s0 [0, 65535] { R10435 += 1, R10436 += 1 };
  s0 -> s2 [70, 70] { R10436 += 1, R59 += 1, R60 += 1 };
  s0 -> s3 [70, 70] { R10436 += 1, R59 += 1, R60 += 1 };
  s0 -> s1 [71, 65535] { R10436 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 69] { R10436 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R10436 += 1, R59 += 1, R60 += 1 };
  s1 -> s3 [70, 70] { R10436 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [71, 65535] { R10436 += 1, R59 += 1, R60 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10436 += 1, R59 += 1, R60 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 69] { R10438 += 1, R65 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R10437 += 1, R10438 += 1 };
  s0 -> s2 [70, 70] { R10438 += 1, R65 += 1, R66 += 1 };
  s0 -> s3 [70, 70] { R10438 += 1, R65 += 1, R66 += 1 };
  s0 -> s1 [71, 65535] { R10438 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 69] { R10438 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R10438 += 1, R65 += 1, R66 += 1 };
  s1 -> s3 [70, 70] { R10438 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [71, 65535] { R10438 += 1, R65 += 1, R66 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R10438 += 1, R65 += 1, R66 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 69] { R10440 += 1, R73 += 1, R74 += 1 };
  s0 -> s0 [0, 65535] { R10439 += 1, R10440 += 1 };
  s0 -> s2 [70, 70] { R10440 += 1, R73 += 1, R74 += 1 };
  s0 -> s3 [70, 70] { R10440 += 1, R73 += 1, R74 += 1 };
  s0 -> s1 [71, 65535] { R10440 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 69] { R10440 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R10440 += 1, R73 += 1, R74 += 1 };
  s1 -> s3 [70, 70] { R10440 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [71, 65535] { R10440 += 1, R73 += 1, R74 += 1 };
  s2 -> s2 [0, 65535] { R10440 += 1, R73 += 1, R74 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 69] { R10460 += 1 };
  s0 -> s0 [0, 65535] { R10459 += 1, R10460 += 1 };
  s0 -> s2 [70, 70] { R10460 += 1 };
  s0 -> s1 [71, 65535] { R10460 += 1 };
  s1 -> s1 [0, 69] { R10460 += 1 };
  s1 -> s2 [70, 70] { R10460 += 1 };
  s1 -> s1 [71, 65535] { R10460 += 1 };
  s2 -> s2 [0, 65535] { R10460 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R10462 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R10461 += 1, R10462 += 1 };
  s1 -> s1 [0, 65535] { R10462 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 69] { R10464 += 1 };
  s0 -> s0 [0, 65535] { R10463 += 1, R10464 += 1 };
  s0 -> s2 [0, 65535] { R10464 += 1, R12 += 1 };
  s0 -> s3 [70, 70] { R10464 += 1 };
  s0 -> s1 [71, 65535] { R10464 += 1 };
  s1 -> s1 [0, 69] { R10464 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [70, 70] { R10464 += 1 };
  s1 -> s1 [71, 65535] { R10464 += 1 };
  s2 -> s1 [0, 69] { R10464 += 1 };
  s2 -> s2 [0, 65535] { R10464 += 1, R12 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [70, 70] { R10464 += 1 };
  s2 -> s1 [71, 65535] { R10464 += 1 };
  s3 -> s3 [0, 65535] { R10464 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 69] { R10466 += 1, R10404 += 1 };
  s0 -> s2 [0, 65535] { R10466 += 1, R10403 += 1, R10404 += 1 };
  s0 -> s0 [0, 65535] { R10465 += 1, R10466 += 1 };
  s0 -> s1 [71, 65535] { R10466 += 1, R10404 += 1 };
  s1 -> s1 [0, 69] { R10466 += 1, R10404 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R10466 += 1 };
  s1 -> s1 [71, 65535] { R10466 += 1, R10404 += 1 };
  s2 -> s1 [0, 69] { R10466 += 1, R10404 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10466 += 1, R10403 += 1, R10404 += 1 };
  s2 -> s1 [71, 65535] { R10466 += 1, R10404 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R10468 += 1, R10405 += 1, R10406 += 1 };
  s0 -> s0 [0, 65535] { R10467 += 1, R10468 += 1 };
  s0 -> s2 [0, 65535] { R10468 += 1, R10406 += 1, R20 += 1 };
  s1 -> s1 [0, 65535] { R10468 += 1, R10405 += 1, R10406 += 1 };
  s1 -> s2 [0, 65535] { R10468 += 1, R10406 += 1, R20 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R10468 += 1 };
  s2 -> s2 [0, 65535] { R10468 += 1, R10406 += 1, R20 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10468 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 70] { R10470 += 1, R10408 += 1 };
  s0 -> s0 [0, 65535] { R10469 += 1, R10470 += 1 };
  s0 -> s2 [0, 65535] { R10470 += 1, R10407 += 1, R10408 += 1 };
  s0 -> s1 [75, 65535] { R10470 += 1, R10408 += 1 };
  s1 -> s1 [0, 70] { R10470 += 1, R10408 += 1 };
  s1 -> s1 [0, 65535] { R10470 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [75, 65535] { R10470 += 1, R10408 += 1 };
  s2 -> s1 [0, 70] { R10470 += 1, R10408 += 1 };
  s2 -> s2 [0, 65535] { R10470 += 1, R10407 += 1, R10408 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [75, 65535] { R10470 += 1, R10408 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R10472 += 1, R10410 += 1, R84 += 1 };
  s0 -> s2 [0, 65535] { R10472 += 1, R10409 += 1, R10410 += 1 };
  s0 -> s0 [0, 65535] { R10471 += 1, R10472 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R10472 += 1, R10410 += 1, R84 += 1 };
  s1 -> s4 [0, 65535] { R10472 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10472 += 1, R10410 += 1, R84 += 1 };
  s2 -> s2 [0, 65535] { R10472 += 1, R10409 += 1, R10410 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10472 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 74] { R10474 += 1, R10412 += 1 };
  s0 -> s2 [0, 65535] { R10474 += 1, R10411 += 1, R10412 += 1 };
  s0 -> s3 [0, 65535] { R10474 += 1, R10412 += 1, R86 += 1 };
  s0 -> s0 [0, 65535] { R10473 += 1, R10474 += 1 };
  s0 -> s1 [76, 65535] { R10474 += 1, R10412 += 1 };
  s1 -> s1 [0, 74] { R10474 += 1, R10412 += 1 };
  s1 -> s1 [0, 65535] { R10474 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [76, 65535] { R10474 += 1, R10412 += 1 };
  s2 -> s1 [0, 74] { R10474 += 1, R10412 += 1 };
  s2 -> s2 [0, 65535] { R10474 += 1, R10411 += 1, R10412 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R10474 += 1, R10412 += 1, R86 += 1 };
  s2 -> s1 [76, 65535] { R10474 += 1, R10412 += 1 };
  s3 -> s1 [0, 74] { R10474 += 1, R10412 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10474 += 1, R10412 += 1, R86 += 1 };
  s3 -> s5 [0, 65535] { R10474 += 1 };
  s3 -> s1 [76, 65535] { R10474 += 1, R10412 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10474 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s0 [0, 65535] { R10475 += 1, R10476 += 1 };
  s0 -> s1 [0, 65535] { R10476 += 1, R10413 += 1, R10414 += 1 };
  s0 -> s2 [0, 65535] { R10476 += 1, R10414 += 1 };
  s0 -> s3 [0, 65535] { R10476 += 1, R10414 += 1, R90 += 1 };
  s1 -> s1 [0, 65535] { R10476 += 1, R10413 += 1, R10414 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R10476 += 1, R10414 += 1 };
  s1 -> s3 [0, 65535] { R10476 += 1, R10414 += 1, R90 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R10476 += 1 };
  s2 -> s2 [0, 65535] { R10476 += 1, R10414 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R10476 += 1 };
  s3 -> s2 [0, 65535] { R10476 += 1, R10414 += 1 };
  s3 -> s3 [0, 65535] { R10476 += 1, R10414 += 1, R90 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10476 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s0 [0, 65535] { R10477 += 1, R10478 += 1 };
  s0 -> s1 [0, 65535] { R10478 += 1, R10416 += 1, R94 += 1, R95 += 1 };
  s0 -> s2 [0, 65535] { R10478 += 1, R10416 += 1, R95 += 1, R96 += 1 };
  s0 -> s3 [0, 65535] { R10478 += 1, R10415 += 1, R10416 += 1 };
  s1 -> s5 [0, 65535] { R10478 += 1 };
  s1 -> s1 [0, 65535] { R10478 += 1, R10416 += 1, R94 += 1, R95 += 1 };
  s1 -> s2 [0, 65535] { R10478 += 1, R10416 += 1, R95 += 1, R96 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R10478 += 1 };
  s2 -> s2 [0, 65535] { R10478 += 1, R10416 += 1, R95 += 1, R96 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s6 [0, 65535] { R10478 += 1, R10416 += 1 };
  s3 -> s1 [0, 65535] { R10478 += 1, R10416 += 1, R94 += 1, R95 += 1 };
  s3 -> s2 [0, 65535] { R10478 += 1, R10416 += 1, R95 += 1, R96 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10478 += 1, R10415 += 1, R10416 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10478 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R10478 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R10478 += 1, R10416 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 65535] { R10480 += 1, R10418 += 1 };
  s0 -> s2 [0, 65535] { R10480 += 1, R10417 += 1, R10418 += 1 };
  s0 -> s0 [0, 65535] { R10479 += 1, R10480 += 1 };
  s1 -> s1 [0, 65535] { R10480 += 1, R10418 += 1 };
  s1 -> s4 [0, 65535] { R10480 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10480 += 1, R10418 += 1 };
  s2 -> s2 [0, 65535] { R10480 += 1, R10417 += 1, R10418 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10480 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R10482 += 1, R10420 += 1, R10170 += 1 };
  s0 -> s0 [0, 65535] { R10481 += 1, R10482 += 1 };
  s0 -> s2 [0, 65535] { R10482 += 1, R10420 += 1 };
  s0 -> s3 [0, 65535] { R10482 += 1, R10419 += 1, R10420 += 1 };
  s0 -> s4 [0, 65535] { R10482 += 1, R10420 += 1, R10170 += 1, R10172 += 1 };
  s1 -> s1 [0, 65535] { R10482 += 1, R10420 += 1, R10170 += 1 };
  s1 -> s5 [0, 65535] { R10482 += 1 };
  s1 -> s2 [0, 65535] { R10482 += 1, R10420 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s5 [0, 65535] { R10482 += 1 };
  s2 -> s2 [0, 65535] { R10482 += 1, R10420 += 1 };
  s2 -> s6 [0, 65535];
  s3 -> s1 [0, 65535] { R10482 += 1, R10420 += 1, R10170 += 1 };
  s3 -> s2 [0, 65535] { R10482 += 1, R10420 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R10482 += 1, R10419 += 1, R10420 += 1 };
  s3 -> s4 [0, 65535] { R10482 += 1, R10420 += 1, R10170 += 1, R10172 += 1 };
  s4 -> s1 [0, 65535] { R10482 += 1, R10420 += 1, R10170 += 1 };
  s4 -> s5 [0, 65535] { R10482 += 1 };
  s4 -> s2 [0, 65535] { R10482 += 1, R10420 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R10482 += 1, R10420 += 1, R10170 += 1, R10172 += 1 };
  s5 -> s5 [0, 65535] { R10482 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 65535] { R10484 += 1, R10421 += 1, R10422 += 1 };
  s0 -> s0 [0, 65535] { R10483 += 1, R10484 += 1 };
  s0 -> s2 [0, 65535] { R10484 += 1, R10422 += 1, R10398 += 1, R10399 += 1 };
  s0 -> s3 [0, 65535] { R10484 += 1, R10422 += 1, R10399 += 1, R10400 += 1, R10401 += 1 };
  s0 -> s4 [0, 65535] { R10484 += 1, R10422 += 1, R10399 += 1, R10401 += 1, R10402 += 1 };
  s1 -> s1 [0, 65535] { R10484 += 1, R10421 += 1, R10422 += 1 };
  s1 -> s2 [0, 65535] { R10484 += 1, R10422 += 1, R10398 += 1, R10399 += 1 };
  s1 -> s3 [0, 65535] { R10484 += 1, R10422 += 1, R10399 += 1, R10400 += 1, R10401 += 1 };
  s1 -> s4 [0, 65535] { R10484 += 1, R10422 += 1, R10399 += 1, R10401 += 1, R10402 += 1 };
  s1 -> s7 [0, 65535];
  s2 -> s6 [0, 65535] { R10484 += 1 };
  s2 -> s2 [0, 65535] { R10484 += 1, R10422 += 1, R10398 += 1, R10399 += 1 };
  s2 -> s3 [0, 65535] { R10484 += 1, R10422 += 1, R10399 += 1, R10400 += 1, R10401 += 1 };
  s2 -> s4 [0, 65535] { R10484 += 1, R10422 += 1, R10399 += 1, R10401 += 1, R10402 += 1 };
  s2 -> s7 [0, 65535];
  s3 -> s6 [0, 65535] { R10484 += 1 };
  s3 -> s3 [0, 65535] { R10484 += 1, R10422 += 1, R10399 += 1, R10400 += 1, R10401 += 1 };
  s3 -> s4 [0, 65535] { R10484 += 1, R10422 += 1, R10399 += 1, R10401 += 1, R10402 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s8 [0, 65535] { R10484 += 1, R10422 += 1 };
  s4 -> s5 [0, 65535] { R10484 += 1, R10422 += 1, R10399 += 1 };
  s4 -> s6 [0, 65535] { R10484 += 1 };
  s4 -> s4 [0, 65535] { R10484 += 1, R10422 += 1, R10399 += 1, R10401 += 1, R10402 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s8 [0, 65535] { R10484 += 1, R10422 += 1 };
  s5 -> s5 [0, 65535] { R10484 += 1, R10422 += 1, R10399 += 1 };
  s5 -> s6 [0, 65535] { R10484 += 1 };
  s5 -> s7 [0, 65535];
  s5 -> s8 [0, 65535] { R10484 += 1, R10422 += 1 };
  s6 -> s6 [0, 65535] { R10484 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  s8 -> s6 [0, 65535] { R10484 += 1 };
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R10484 += 1, R10422 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s0 [0, 65535] { R10485 += 1, R10486 += 1 };
  s0 -> s1 [0, 65535] { R10486 += 1, R10441 += 1, R10442 += 1 };
  s0 -> s2 [0, 65535] { R10486 += 1, R10442 += 1, R21 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R10486 += 1, R10441 += 1, R10442 += 1 };
  s1 -> s2 [0, 65535] { R10486 += 1, R10442 += 1, R21 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R10486 += 1 };
  s2 -> s2 [0, 65535] { R10486 += 1, R10442 += 1, R21 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10486 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 69] { R10488 += 1, R10444 += 1 };
  s0 -> s2 [0, 65535] { R10488 += 1, R10443 += 1, R10444 += 1 };
  s0 -> s0 [0, 65535] { R10487 += 1, R10488 += 1 };
  s0 -> s3 [70, 70] { R10488 += 1, R10444 += 1 };
  s0 -> s4 [70, 70] { R10488 += 1, R10444 += 1 };
  s0 -> s5 [75, 75] { R10488 += 1, R10444 += 1 };
  s0 -> s1 [76, 65535] { R10488 += 1, R10444 += 1 };
  s1 -> s1 [0, 69] { R10488 += 1, R10444 += 1 };
  s1 -> s3 [70, 70] { R10488 += 1, R10444 += 1 };
  s1 -> s4 [70, 70] { R10488 += 1, R10444 += 1 };
  s1 -> s5 [75, 75] { R10488 += 1, R10444 += 1 };
  s1 -> s1 [76, 65535] { R10488 += 1, R10444 += 1 };
  s2 -> s1 [0, 69] { R10488 += 1, R10444 += 1 };
  s2 -> s2 [0, 65535] { R10488 += 1, R10443 += 1, R10444 += 1 };
  s2 -> s3 [70, 70] { R10488 += 1, R10444 += 1 };
  s2 -> s4 [70, 70] { R10488 += 1, R10444 += 1 };
  s2 -> s5 [75, 75] { R10488 += 1, R10444 += 1 };
  s2 -> s1 [76, 65535] { R10488 += 1, R10444 += 1 };
  s3 -> s3 [0, 70] { R10488 += 1, R10444 += 1 };
  s3 -> s8 [75, 75] { R10488 += 1, R10444 += 1 };
  s3 -> s3 [76, 65535] { R10488 += 1, R10444 += 1 };
  s5 -> s5 [0, 69] { R10488 += 1, R10444 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R10488 += 1 };
  s5 -> s7 [70, 70] { R10488 += 1, R10444 += 1 };
  s5 -> s8 [70, 70] { R10488 += 1, R10444 += 1 };
  s5 -> s5 [75, 65535] { R10488 += 1, R10444 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R10488 += 1 };
  s8 -> s8 [0, 70] { R10488 += 1, R10444 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R10488 += 1 };
  s8 -> s8 [75, 65535] { R10488 += 1, R10444 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 69] { R10490 += 1, R10446 += 1, R83 += 1 };
  s0 -> s0 [0, 65535] { R10489 += 1, R10490 += 1 };
  s0 -> s2 [0, 65535] { R10490 += 1, R10445 += 1, R10446 += 1 };
  s0 -> s3 [70, 70] { R10490 += 1, R10446 += 1, R83 += 1 };
  s0 -> s4 [70, 70] { R10490 += 1, R10446 += 1, R83 += 1 };
  s0 -> s1 [71, 65535] { R10490 += 1, R10446 += 1, R83 += 1 };
  s1 -> s1 [0, 69] { R10490 += 1, R10446 += 1, R83 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R10490 += 1 };
  s1 -> s3 [70, 70] { R10490 += 1, R10446 += 1, R83 += 1 };
  s1 -> s4 [70, 70] { R10490 += 1, R10446 += 1, R83 += 1 };
  s1 -> s1 [71, 65535] { R10490 += 1, R10446 += 1, R83 += 1 };
  s2 -> s1 [0, 69] { R10490 += 1, R10446 += 1, R83 += 1 };
  s2 -> s2 [0, 65535] { R10490 += 1, R10445 += 1, R10446 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [70, 70] { R10490 += 1, R10446 += 1, R83 += 1 };
  s2 -> s4 [70, 70] { R10490 += 1, R10446 += 1, R83 += 1 };
  s2 -> s1 [71, 65535] { R10490 += 1, R10446 += 1, R83 += 1 };
  s3 -> s3 [0, 65535] { R10490 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R10490 += 1 };
  s4 -> s4 [0, 65535] { R10490 += 1, R10446 += 1, R83 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R10490 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 69] { R10492 += 1, R10448 += 1, R85 += 1 };
  s0 -> s0 [0, 65535] { R10491 += 1, R10492 += 1 };
  s0 -> s2 [0, 65535] { R10492 += 1, R10447 += 1, R10448 += 1 };
  s0 -> s3 [70, 70] { R10492 += 1, R10448 += 1, R85 += 1 };
  s0 -> s4 [70, 70] { R10492 += 1, R10448 += 1, R85 += 1 };
  s0 -> s1 [71, 65535] { R10492 += 1, R10448 += 1, R85 += 1 };
  s1 -> s1 [0, 69] { R10492 += 1, R10448 += 1, R85 += 1 };
  s1 -> s1 [0, 65535] { R10492 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [70, 70] { R10492 += 1, R10448 += 1, R85 += 1 };
  s1 -> s4 [70, 70] { R10492 += 1, R10448 += 1, R85 += 1 };
  s1 -> s1 [71, 65535] { R10492 += 1, R10448 += 1, R85 += 1 };
  s2 -> s1 [0, 69] { R10492 += 1, R10448 += 1, R85 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10492 += 1, R10447 += 1, R10448 += 1 };
  s2 -> s3 [70, 70] { R10492 += 1, R10448 += 1, R85 += 1 };
  s2 -> s4 [70, 70] { R10492 += 1, R10448 += 1, R85 += 1 };
  s2 -> s1 [71, 65535] { R10492 += 1, R10448 += 1, R85 += 1 };
  s3 -> s6 [0, 65535] { R10492 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10492 += 1, R10448 += 1, R85 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10492 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10492 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 69] { R10494 += 1, R10450 += 1, R87 += 1, R88 += 1 };
  s0 -> s2 [0, 69] { R10494 += 1, R10450 += 1, R88 += 1 };
  s0 -> s3 [0, 65535] { R10494 += 1, R10449 += 1, R10450 += 1 };
  s0 -> s0 [0, 65535] { R10493 += 1, R10494 += 1 };
  s0 -> s4 [70, 70] { R10494 += 1, R10450 += 1, R87 += 1, R88 += 1 };
  s0 -> s5 [70, 70] { R10494 += 1, R10450 += 1, R88 += 1 };
  s0 -> s6 [70, 70] { R10494 += 1, R10450 += 1, R88 += 1 };
  s0 -> s7 [70, 70] { R10494 += 1, R10450 += 1, R87 += 1, R88 += 1 };
  s0 -> s2 [71, 74] { R10494 += 1, R10450 += 1, R88 += 1 };
  s0 -> s1 [71, 65535] { R10494 += 1, R10450 += 1, R87 += 1, R88 += 1 };
  s0 -> s8 [75, 75] { R10494 += 1, R10450 += 1, R88 += 1 };
  s0 -> s2 [76, 65535] { R10494 += 1, R10450 += 1, R88 += 1 };
  s1 -> s1 [0, 69] { R10494 += 1, R10450 += 1, R87 += 1, R88 += 1 };
  s1 -> s2 [0, 69] { R10494 += 1, R10450 += 1, R88 += 1 };
  s1 -> s4 [70, 70] { R10494 += 1, R10450 += 1, R87 += 1, R88 += 1 };
  s1 -> s5 [70, 70] { R10494 += 1, R10450 += 1, R88 += 1 };
  s1 -> s6 [70, 70] { R10494 += 1, R10450 += 1, R88 += 1 };
  s1 -> s7 [70, 70] { R10494 += 1, R10450 += 1, R87 += 1, R88 += 1 };
  s1 -> s2 [71, 74] { R10494 += 1, R10450 += 1, R88 += 1 };
  s1 -> s1 [71, 65535] { R10494 += 1, R10450 += 1, R87 += 1, R88 += 1 };
  s1 -> s8 [75, 75] { R10494 += 1, R10450 += 1, R88 += 1 };
  s1 -> s2 [76, 65535] { R10494 += 1, R10450 += 1, R88 += 1 };
  s2 -> s2 [0, 69] { R10494 += 1, R10450 += 1, R88 += 1 };
  s2 -> s5 [70, 70] { R10494 += 1, R10450 += 1, R88 += 1 };
  s2 -> s6 [70, 70] { R10494 += 1, R10450 += 1, R88 += 1 };
  s2 -> s2 [71, 74] { R10494 += 1, R10450 += 1, R88 += 1 };
  s2 -> s8 [75, 75] { R10494 += 1, R10450 += 1, R88 += 1 };
  s2 -> s2 [76, 65535] { R10494 += 1, R10450 += 1, R88 += 1 };
  s3 -> s1 [0, 69] { R10494 += 1, R10450 += 1, R87 += 1, R88 += 1 };
  s3 -> s2 [0, 69] { R10494 += 1, R10450 += 1, R88 += 1 };
  s3 -> s3 [0, 65535] { R10494 += 1, R10449 += 1, R10450 += 1 };
  s3 -> s4 [70, 70] { R10494 += 1, R10450 += 1, R87 += 1, R88 += 1 };
  s3 -> s5 [70, 70] { R10494 += 1, R10450 += 1, R88 += 1 };
  s3 -> s6 [70, 70] { R10494 += 1, R10450 += 1, R88 += 1 };
  s3 -> s7 [70, 70] { R10494 += 1, R10450 += 1, R87 += 1, R88 += 1 };
  s3 -> s2 [71, 74] { R10494 += 1, R10450 += 1, R88 += 1 };
  s3 -> s1 [71, 65535] { R10494 += 1, R10450 += 1, R87 += 1, R88 += 1 };
  s3 -> s8 [75, 75] { R10494 += 1, R10450 += 1, R88 += 1 };
  s3 -> s2 [76, 65535] { R10494 += 1, R10450 += 1, R88 += 1 };
  s4 -> s5 [0, 74] { R10494 += 1, R10450 += 1, R88 += 1 };
  s4 -> s4 [0, 65535] { R10494 += 1, R10450 += 1, R87 += 1, R88 += 1 };
  s4 -> s10 [75, 75] { R10494 += 1, R10450 += 1, R88 += 1 };
  s4 -> s5 [76, 65535] { R10494 += 1, R10450 += 1, R88 += 1 };
  s5 -> s5 [0, 74] { R10494 += 1, R10450 += 1, R88 += 1 };
  s5 -> s10 [75, 75] { R10494 += 1, R10450 += 1, R88 += 1 };
  s5 -> s5 [76, 65535] { R10494 += 1, R10450 += 1, R88 += 1 };
  s8 -> s8 [0, 69] { R10494 += 1, R10450 += 1, R88 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R10494 += 1 };
  s8 -> s10 [70, 70] { R10494 += 1, R10450 += 1, R88 += 1 };
  s8 -> s11 [70, 70] { R10494 += 1, R10450 += 1, R88 += 1 };
  s8 -> s8 [71, 65535] { R10494 += 1, R10450 += 1, R88 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R10494 += 1, R10450 += 1, R88 += 1 };
  s10 -> s9 [0, 65535];
  s10 -> s12 [0, 65535] { R10494 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R10494 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R10494 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 69] { R10496 += 1, R10452 += 1, R91 += 1, R92 += 1 };
  s0 -> s2 [0, 65535] { R10496 += 1, R10451 += 1, R10452 += 1 };
  s0 -> s0 [0, 65535] { R10495 += 1, R10496 += 1 };
  s0 -> s3 [70, 70] { R10496 += 1, R10452 += 1, R91 += 1, R92 += 1 };
  s0 -> s4 [70, 70] { R10496 += 1, R10452 += 1, R91 += 1, R92 += 1 };
  s0 -> s1 [71, 65535] { R10496 += 1, R10452 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 69] { R10496 += 1, R10452 += 1, R91 += 1, R92 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10496 += 1 };
  s1 -> s3 [70, 70] { R10496 += 1, R10452 += 1, R91 += 1, R92 += 1 };
  s1 -> s4 [70, 70] { R10496 += 1, R10452 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [71, 65535] { R10496 += 1, R10452 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [0, 69] { R10496 += 1, R10452 += 1, R91 += 1, R92 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10496 += 1, R10451 += 1, R10452 += 1 };
  s2 -> s3 [70, 70] { R10496 += 1, R10452 += 1, R91 += 1, R92 += 1 };
  s2 -> s4 [70, 70] { R10496 += 1, R10452 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [71, 65535] { R10496 += 1, R10452 += 1, R91 += 1, R92 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10496 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10496 += 1, R10452 += 1, R91 += 1, R92 += 1 };
  s4 -> s6 [0, 65535] { R10496 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10496 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 69] { R10498 += 1, R10454 += 1, R10160 += 1, R10161 += 1 };
  s0 -> s2 [0, 69] { R10498 += 1, R10454 += 1, R10159 += 1, R10160 += 1 };
  s0 -> s3 [0, 65535] { R10498 += 1, R10453 += 1, R10454 += 1 };
  s0 -> s0 [0, 65535] { R10497 += 1, R10498 += 1 };
  s0 -> s4 [70, 70] { R10498 += 1, R10454 += 1, R10160 += 1, R10161 += 1 };
  s0 -> s5 [70, 70] { R10498 += 1, R10454 += 1, R10159 += 1, R10160 += 1 };
  s0 -> s6 [70, 70] { R10498 += 1, R10454 += 1, R10160 += 1, R10161 += 1 };
  s0 -> s7 [70, 70] { R10498 += 1, R10454 += 1, R10159 += 1, R10160 += 1 };
  s0 -> s1 [71, 65535] { R10498 += 1, R10454 += 1, R10160 += 1, R10161 += 1 };
  s0 -> s2 [71, 65535] { R10498 += 1, R10454 += 1, R10159 += 1, R10160 += 1 };
  s1 -> s1 [0, 69] { R10498 += 1, R10454 += 1, R10160 += 1, R10161 += 1 };
  s1 -> s11 [0, 69] { R10498 += 1, R10454 += 1 };
  s1 -> s8 [70, 70] { R10498 += 1, R10454 += 1 };
  s1 -> s12 [70, 70] { R10498 += 1, R10454 += 1 };
  s1 -> s4 [70, 70] { R10498 += 1, R10454 += 1, R10160 += 1, R10161 += 1 };
  s1 -> s6 [70, 70] { R10498 += 1, R10454 += 1, R10160 += 1, R10161 += 1 };
  s1 -> s1 [71, 65535] { R10498 += 1, R10454 += 1, R10160 += 1, R10161 += 1 };
  s1 -> s11 [71, 65535] { R10498 += 1, R10454 += 1 };
  s2 -> s1 [0, 69] { R10498 += 1, R10454 += 1, R10160 += 1, R10161 += 1 };
  s2 -> s2 [0, 69] { R10498 += 1, R10454 += 1, R10159 += 1, R10160 += 1 };
  s2 -> s4 [70, 70] { R10498 += 1, R10454 += 1, R10160 += 1, R10161 += 1 };
  s2 -> s5 [70, 70] { R10498 += 1, R10454 += 1, R10159 += 1, R10160 += 1 };
  s2 -> s6 [70, 70] { R10498 += 1, R10454 += 1, R10160 += 1, R10161 += 1 };
  s2 -> s7 [70, 70] { R10498 += 1, R10454 += 1, R10159 += 1, R10160 += 1 };
  s2 -> s1 [71, 65535] { R10498 += 1, R10454 += 1, R10160 += 1, R10161 += 1 };
  s2 -> s2 [71, 65535] { R10498 += 1, R10454 += 1, R10159 += 1, R10160 += 1 };
  s3 -> s1 [0, 69] { R10498 += 1, R10454 += 1, R10160 += 1, R10161 += 1 };
  s3 -> s2 [0, 69] { R10498 += 1, R10454 += 1, R10159 += 1, R10160 += 1 };
  s3 -> s3 [0, 65535] { R10498 += 1, R10453 += 1, R10454 += 1 };
  s3 -> s4 [70, 70] { R10498 += 1, R10454 += 1, R10160 += 1, R10161 += 1 };
  s3 -> s5 [70, 70] { R10498 += 1, R10454 += 1, R10159 += 1, R10160 += 1 };
  s3 -> s6 [70, 70] { R10498 += 1, R10454 += 1, R10160 += 1, R10161 += 1 };
  s3 -> s7 [70, 70] { R10498 += 1, R10454 += 1, R10159 += 1, R10160 += 1 };
  s3 -> s1 [71, 65535] { R10498 += 1, R10454 += 1, R10160 += 1, R10161 += 1 };
  s3 -> s2 [71, 65535] { R10498 += 1, R10454 += 1, R10159 += 1, R10160 += 1 };
  s6 -> s8 [0, 65535] { R10498 += 1, R10454 += 1 };
  s6 -> s6 [0, 65535] { R10498 += 1, R10454 += 1, R10160 += 1, R10161 += 1 };
  s7 -> s6 [0, 65535] { R10498 += 1, R10454 += 1, R10160 += 1, R10161 += 1 };
  s7 -> s7 [0, 65535] { R10498 += 1, R10454 += 1, R10159 += 1, R10160 += 1 };
  s8 -> s8 [0, 65535] { R10498 += 1, R10454 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [0, 65535] { R10498 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R10498 += 1 };
  s11 -> s11 [0, 69] { R10498 += 1, R10454 += 1 };
  s11 -> s11 [0, 65535] { R10498 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s8 [70, 70] { R10498 += 1, R10454 += 1 };
  s11 -> s12 [70, 70] { R10498 += 1, R10454 += 1 };
  s11 -> s11 [71, 65535] { R10498 += 1, R10454 += 1 };
  s12 -> s12 [0, 65535] { R10498 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 69] { R10500 += 1, R10456 += 1, R10165 += 1, R10166 += 1 };
  s0 -> s2 [0, 69] { R10500 += 1, R10456 += 1, R10166 += 1, R10167 += 1, R10168 += 1 };
  s0 -> s3 [0, 69] { R10500 += 1, R10456 += 1, R10166 += 1, R10168 += 1 };
  s0 -> s4 [0, 65535] { R10500 += 1, R10455 += 1, R10456 += 1 };
  s0 -> s0 [0, 65535] { R10499 += 1, R10500 += 1 };
  s0 -> s5 [70, 70] { R10500 += 1, R10456 += 1, R10166 += 1, R10167 += 1, R10168 += 1 };
  s0 -> s6 [70, 70] { R10500 += 1, R10456 += 1, R10166 += 1, R10167 += 1, R10168 += 1 };
  s0 -> s7 [70, 70] { R10500 += 1, R10456 += 1, R10166 += 1, R10168 += 1 };
  s0 -> s8 [70, 70] { R10500 += 1, R10456 += 1, R10165 += 1, R10166 += 1 };
  s0 -> s9 [70, 70] { R10500 += 1, R10456 += 1, R10166 += 1, R10168 += 1 };
  s0 -> s10 [70, 70] { R10500 += 1, R10456 += 1, R10165 += 1, R10166 += 1 };
  s0 -> s3 [71, 74] { R10500 += 1, R10456 += 1, R10166 += 1, R10168 += 1 };
  s0 -> s1 [71, 65535] { R10500 += 1, R10456 += 1, R10165 += 1, R10166 += 1 };
  s0 -> s2 [71, 65535] { R10500 += 1, R10456 += 1, R10166 += 1, R10167 += 1, R10168 += 1 };
  s0 -> s11 [75, 75] { R10500 += 1, R10456 += 1, R10166 += 1, R10168 += 1 };
  s0 -> s3 [76, 65535] { R10500 += 1, R10456 += 1, R10166 += 1, R10168 += 1 };
  s1 -> s1 [0, 69] { R10500 += 1, R10456 += 1, R10165 += 1, R10166 += 1 };
  s1 -> s2 [0, 69] { R10500 += 1, R10456 += 1, R10166 += 1, R10167 += 1, R10168 += 1 };
  s1 -> s3 [0, 69] { R10500 += 1, R10456 += 1, R10166 += 1, R10168 += 1 };
  s1 -> s5 [70, 70] { R10500 += 1, R10456 += 1, R10166 += 1, R10167 += 1, R10168 += 1 };
  s1 -> s6 [70, 70] { R10500 += 1, R10456 += 1, R10166 += 1, R10167 += 1, R10168 += 1 };
  s1 -> s7 [70, 70] { R10500 += 1, R10456 += 1, R10166 += 1, R10168 += 1 };
  s1 -> s8 [70, 70] { R10500 += 1, R10456 += 1, R10165 += 1, R10166 += 1 };
  s1 -> s9 [70, 70] { R10500 += 1, R10456 += 1, R10166 += 1, R10168 += 1 };
  s1 -> s10 [70, 70] { R10500 += 1, R10456 += 1, R10165 += 1, R10166 += 1 };
  s1 -> s3 [71, 74] { R10500 += 1, R10456 += 1, R10166 += 1, R10168 += 1 };
  s1 -> s1 [71, 65535] { R10500 += 1, R10456 += 1, R10165 += 1, R10166 += 1 };
  s1 -> s2 [71, 65535] { R10500 += 1, R10456 += 1, R10166 += 1, R10167 += 1, R10168 += 1 };
  s1 -> s11 [75, 75] { R10500 += 1, R10456 += 1, R10166 += 1, R10168 += 1 };
  s1 -> s3 [76, 65535] { R10500 += 1, R10456 += 1, R10166 += 1, R10168 += 1 };
  s2 -> s2 [0, 69] { R10500 += 1, R10456 += 1, R10166 += 1, R10167 += 1, R10168 += 1 };
  s2 -> s3 [0, 69] { R10500 += 1, R10456 += 1, R10166 += 1, R10168 += 1 };
  s2 -> s5 [70, 70] { R10500 += 1, R10456 += 1, R10166 += 1, R10167 += 1, R10168 += 1 };
  s2 -> s6 [70, 70] { R10500 += 1, R10456 += 1, R10166 += 1, R10167 += 1, R10168 += 1 };
  s2 -> s7 [70, 70] { R10500 += 1, R10456 += 1, R10166 += 1, R10168 += 1 };
  s2 -> s9 [70, 70] { R10500 += 1, R10456 += 1, R10166 += 1, R10168 += 1 };
  s2 -> s3 [71, 74] { R10500 += 1, R10456 += 1, R10166 += 1, R10168 += 1 };
  s2 -> s2 [71, 65535] { R10500 += 1, R10456 += 1, R10166 += 1, R10167 += 1, R10168 += 1 };
  s2 -> s11 [75, 75] { R10500 += 1, R10456 += 1, R10166 += 1, R10168 += 1 };
  s2 -> s3 [76, 65535] { R10500 += 1, R10456 += 1, R10166 += 1, R10168 += 1 };
  s3 -> s3 [0, 69] { R10500 += 1, R10456 += 1, R10166 += 1, R10168 += 1 };
  s3 -> s7 [70, 70] { R10500 += 1, R10456 += 1, R10166 += 1, R10168 += 1 };
  s3 -> s9 [70, 70] { R10500 += 1, R10456 += 1, R10166 += 1, R10168 += 1 };
  s3 -> s3 [71, 74] { R10500 += 1, R10456 += 1, R10166 += 1, R10168 += 1 };
  s3 -> s11 [75, 75] { R10500 += 1, R10456 += 1, R10166 += 1, R10168 += 1 };
  s3 -> s3 [76, 65535] { R10500 += 1, R10456 += 1, R10166 += 1, R10168 += 1 };
  s4 -> s1 [0, 69] { R10500 += 1, R10456 += 1, R10165 += 1, R10166 += 1 };
  s4 -> s2 [0, 69] { R10500 += 1, R10456 += 1, R10166 += 1, R10167 += 1, R10168 += 1 };
  s4 -> s3 [0, 69] { R10500 += 1, R10456 += 1, R10166 += 1, R10168 += 1 };
  s4 -> s4 [0, 65535] { R10500 += 1, R10455 += 1, R10456 += 1 };
  s4 -> s5 [70, 70] { R10500 += 1, R10456 += 1, R10166 += 1, R10167 += 1, R10168 += 1 };
  s4 -> s6 [70, 70] { R10500 += 1, R10456 += 1, R10166 += 1, R10167 += 1, R10168 += 1 };
  s4 -> s7 [70, 70] { R10500 += 1, R10456 += 1, R10166 += 1, R10168 += 1 };
  s4 -> s8 [70, 70] { R10500 += 1, R10456 += 1, R10165 += 1, R10166 += 1 };
  s4 -> s9 [70, 70] { R10500 += 1, R10456 += 1, R10166 += 1, R10168 += 1 };
  s4 -> s10 [70, 70] { R10500 += 1, R10456 += 1, R10165 += 1, R10166 += 1 };
  s4 -> s3 [71, 74] { R10500 += 1, R10456 += 1, R10166 += 1, R10168 += 1 };
  s4 -> s1 [71, 65535] { R10500 += 1, R10456 += 1, R10165 += 1, R10166 += 1 };
  s4 -> s2 [71, 65535] { R10500 += 1, R10456 += 1, R10166 += 1, R10167 += 1, R10168 += 1 };
  s4 -> s11 [75, 75] { R10500 += 1, R10456 += 1, R10166 += 1, R10168 += 1 };
  s4 -> s3 [76, 65535] { R10500 += 1, R10456 += 1, R10166 += 1, R10168 += 1 };
  s6 -> s7 [0, 74] { R10500 += 1, R10456 += 1, R10166 += 1, R10168 += 1 };
  s6 -> s6 [0, 65535] { R10500 += 1, R10456 += 1, R10166 += 1, R10167 += 1, R10168 += 1 };
  s6 -> s13 [75, 75] { R10500 += 1, R10456 += 1, R10166 += 1, R10168 += 1 };
  s6 -> s7 [76, 65535] { R10500 += 1, R10456 += 1, R10166 += 1, R10168 += 1 };
  s7 -> s7 [0, 74] { R10500 += 1, R10456 += 1, R10166 += 1, R10168 += 1 };
  s7 -> s13 [75, 75] { R10500 += 1, R10456 += 1, R10166 += 1, R10168 += 1 };
  s7 -> s7 [76, 65535] { R10500 += 1, R10456 += 1, R10166 += 1, R10168 += 1 };
  s8 -> s7 [0, 74] { R10500 += 1, R10456 += 1, R10166 += 1, R10168 += 1 };
  s8 -> s6 [0, 65535] { R10500 += 1, R10456 += 1, R10166 += 1, R10167 += 1, R10168 += 1 };
  s8 -> s8 [0, 65535] { R10500 += 1, R10456 += 1, R10165 += 1, R10166 += 1 };
  s8 -> s13 [75, 75] { R10500 += 1, R10456 += 1, R10166 += 1, R10168 += 1 };
  s8 -> s7 [76, 65535] { R10500 += 1, R10456 += 1, R10166 += 1, R10168 += 1 };
  s11 -> s11 [0, 69] { R10500 += 1, R10456 += 1, R10166 += 1, R10168 += 1 };
  s11 -> s11 [0, 65535] { R10500 += 1 };
  s11 -> s12 [0, 65535];
  s11 -> s13 [70, 70] { R10500 += 1, R10456 += 1, R10166 += 1, R10168 += 1 };
  s11 -> s14 [70, 70] { R10500 += 1, R10456 += 1, R10166 += 1, R10168 += 1 };
  s11 -> s11 [71, 65535] { R10500 += 1, R10456 += 1, R10166 += 1, R10168 += 1 };
  s12 -> s12 [0, 65535];
  s13 -> s13 [0, 65535] { R10500 += 1, R10456 += 1, R10166 += 1, R10168 += 1 };
  s13 -> s15 [0, 65535] { R10500 += 1 };
  s13 -> s12 [0, 65535];
  s14 -> s14 [0, 65535] { R10500 += 1 };
  s14 -> s12 [0, 65535];
  s15 -> s15 [0, 65535] { R10500 += 1 };
  s15 -> s12 [0, 65535];
  accepting s12, s13, s14, s15, s11;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 69] { R10502 += 1, R10458 += 1, R10393 += 1, R10394 += 1 };
  s0 -> s2 [0, 65535] { R10502 += 1, R10457 += 1, R10458 += 1 };
  s0 -> s0 [0, 65535] { R10501 += 1, R10502 += 1 };
  s0 -> s3 [70, 70] { R10502 += 1, R10458 += 1, R10393 += 1, R10394 += 1 };
  s0 -> s4 [70, 70] { R10502 += 1, R10458 += 1, R10393 += 1, R10394 += 1 };
  s0 -> s1 [71, 65535] { R10502 += 1, R10458 += 1, R10393 += 1, R10394 += 1 };
  s1 -> s1 [0, 69] { R10502 += 1, R10458 += 1, R10393 += 1, R10394 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10502 += 1 };
  s1 -> s3 [70, 70] { R10502 += 1, R10458 += 1, R10393 += 1, R10394 += 1 };
  s1 -> s4 [70, 70] { R10502 += 1, R10458 += 1, R10393 += 1, R10394 += 1 };
  s1 -> s1 [71, 65535] { R10502 += 1, R10458 += 1, R10393 += 1, R10394 += 1 };
  s2 -> s1 [0, 69] { R10502 += 1, R10458 += 1, R10393 += 1, R10394 += 1 };
  s2 -> s2 [0, 65535] { R10502 += 1, R10457 += 1, R10458 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [70, 70] { R10502 += 1, R10458 += 1, R10393 += 1, R10394 += 1 };
  s2 -> s4 [70, 70] { R10502 += 1, R10458 += 1, R10393 += 1, R10394 += 1 };
  s2 -> s1 [71, 65535] { R10502 += 1, R10458 += 1, R10393 += 1, R10394 += 1 };
  s3 -> s3 [0, 65535] { R10502 += 1, R10458 += 1, R10393 += 1, R10394 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R10502 += 1 };
  s4 -> s4 [0, 65535] { R10502 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10502 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [102, 102];
  accepting s1;
};
};
constraint R3 = R10502 && R23 - R10502 = -1 && R24 = R10502 && R25 - R10502 = -1 && R26 = R10502 && R27 = 0 && R28 = 1 && R29 = 0 && R30 = 1 && R45 + R84 + R83 + -1*R10170 + -1*R10166 - R66 = 0 && R49 + R89 + R87 = 0 && R50 + R90 + R88 + -1*R10170 + -1*R10166 - R66 = 0 && R55 + R96 + R93 + -1*R10172 + -1*R10168 - R68 = 0 && R65 + R10169 + R10165 = 0 && R67 + R10171 + R10167 = 0 && R10443 = 0 && R10444 = 0 && R10449 = 0 && R10450 = 0 && R10453 = 0 && R10454 = 0 && R10455 = 0 && R10456 = 0 && R10459 = 0 && R10460 = R10502 && R10461 = 0 && R10462 = R10502 && R10463 = 0 && R10464 = R10502 && R10465 = 0 && R10466 = R10502 && R10467 = 0 && R10468 = R10502 && R10469 = 0 && R10470 = R10502 && R10471 = 0 && R10472 = R10502 && R10473 = 0 && R10474 = R10502 && R10475 = 0 && R10476 = R10502 && R10477 = 0 && R10478 = R10502 && R10479 = 0 && R10480 = R10502 && R10481 = 0 && R10482 = R10502 && R10483 = 0 && R10484 = R10502 && R10485 = 0 && R10486 = R10502 && R10487 = 0 && R10488 = R10502 && R10489 = 0 && R10490 = R10502 && R10491 = 0 && R10492 = R10502 && R10493 = 0 && R10494 = R10502 && R10495 = 0 && R10496 = R10502 && R10497 = 0 && R10498 = R10502 && R10499 = 0 && R10500 = R10502 && R10501 = 0 && -1 < R2 && R12 < 1 && R15 < 1 && R16 < 1 && R47 + R86 + R85 < 1 && R61 + R10164 + R10161 < 1 && -1*R10170 + -1*R10166 - R66 < 1 && -1*R10172 + -1*R10168 - R68 < 1 && 0 < R10502 && (R2 != 0 || R20 = 0 || (R10403 = 0 && R10404 = 0)) && (R2 != 0 || R20 = 0 || (R10405 = 0 && R10406 = 0)) && (R2 != 0 || R20 = 0 || (R10407 = 0 && R10408 = 0)) && (R2 != 0 || R20 = 0 || (R10409 = 0 && R10410 = 0)) && (R2 != 0 || R20 = 0 || (R10411 = 0 && R10412 = 0)) && (R2 != 0 || R20 = 0 || (R10413 = 0 && R10414 = 0)) && (R2 != 0 || R20 = 0 || (R10415 = 0 && R10416 = 0)) && (R2 != 0 || R20 = 0 || (R10417 = 0 && R10418 = 0)) && (R2 != 0 || R20 = 0 || (R10419 = 0 && R10420 = 0)) && (R2 != 0 || R20 = 0 || (R10421 = 0 && R10422 = 0)) && (R53 + R94 + R91 != 0 || R54 + R95 + R92 + -1*R10170 + -1*R10166 - R66 = 0 || R66 + R10170 + R10166 < 1) && (R59 + R10162 + R10159 != 0 || R60 + R10163 + R10160 + -1*R10170 + -1*R10166 - R66 = 0 || R66 + R10170 + R10166 < 1) && (R66 + R10170 + R10166 != 0 || ((R53 + R94 + R91 != 0 || R54 + R95 + R92 = 0 || R68 + R10172 + R10168 < 1) && (R53 + R94 + R91 = 0 || R68 + R10172 + R10168 < 1))) && (R66 + R10170 + R10166 != 0 || ((R59 + R10162 + R10159 != 0 || R60 + R10163 + R10160 = 0 || R68 + R10172 + R10168 < 1) && (R59 + R10162 + R10159 = 0 || R68 + R10172 + R10168 < 1))) && (R66 + R10170 + R10166 != 0 || ((R73 + R10398 + R10393 != 0 || R74 + R10399 + R10394 = 0 || R68 + R10172 + R10168 < 1) && (R73 + R10398 + R10393 = 0 || R68 + R10172 + R10168 < 1))) && (R68 + R10172 + R10168 != 0 || R77 + R10402 + R10397 = 0 || (R75 + R10400 + R10395 = 0 && R76 + R10401 + R10396 = 0)) && (R73 + R10398 + R10393 != 0 || R66 + R10170 + R10166 + -1*R10399 + -1*R10394 - R74 = 0 || R66 + R10170 + R10166 < 1) && (R75 + R10400 + R10395 != 0 || R68 + R10172 + R10168 + -1*R10401 + -1*R10396 - R76 = 0 || R68 + R10172 + R10168 < 1) && (R10403 != 0 || R2 = R10404 || R2 < 1) && (R10405 != 0 || R2 = R10406 || R2 < 1) && (R10407 != 0 || R2 = R10408 || R2 < 1) && (R10409 != 0 || R2 = R10410 || R2 < 1) && (R10411 != 0 || R2 = R10412 || R2 < 1) && (R10413 != 0 || R2 = R10414 || R2 < 1) && (R10415 != 0 || R2 = R10416 || R2 < 1) && (R10417 != 0 || R2 = R10418 || R2 < 1) && (R10419 != 0 || R2 = R10420 || R2 < 1) && (R10421 != 0 || R2 = R10422 || R2 < 1) && (R21 = 0 || (R10441 = 0 && R10442 = 0)) && (R21 = 0 || (R10445 = 0 && R10446 = 0)) && (R21 = 0 || (R10447 = 0 && R10448 = 0)) && (R21 = 0 || (R10451 = 0 && R10452 = 0)) && (R21 = 0 || (R10457 = 0 && R10458 = 0)) && (R22 = 0 || (R10423 = 0 && R10424 = 0)) && (R22 = 0 || (R10425 = 0 && R10426 = 0)) && (R22 = 0 || (R10427 = 0 && R10428 = 0)) && (R22 = 0 || (R10429 = 0 && R10430 = 0)) && (R22 = 0 || (R10431 = 0 && R10432 = 0)) && (R22 = 0 || (R10433 = 0 && R10434 = 0)) && (R22 = 0 || (R10435 = 0 && R10436 = 0)) && (R22 = 0 || (R10437 = 0 && R10438 = 0)) && (R22 = 0 || (R10439 = 0 && R10440 = 0)) && (R53 + R94 + R91 = 0 || R66 + R10170 + R10166 < 1) && (R59 + R10162 + R10159 = 0 || R66 + R10170 + R10166 < 1) && (R73 + R10398 + R10393 = 0 || R66 + R10170 + R10166 < 1) && (R75 + R10400 + R10395 = 0 || R68 + R10172 + R10168 < 1) && (R10403 = 0 || R2 < 1) && (R10405 = 0 || R2 < 1) && (R10407 = 0 || R2 < 1) && (R10409 = 0 || R2 < 1) && (R10411 = 0 || R2 < 1) && (R10413 = 0 || R2 < 1) && (R10415 = 0 || R2 < 1) && (R10417 = 0 || R2 < 1) && (R10419 = 0 || R2 < 1) && (R10421 = 0 || R2 < 1);
// End of Parikh automata intersection problem
