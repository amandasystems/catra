// Parikh automata intersection problem, generated by OSTRICH+
counter int R12, R15, R16, R2, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R4, R45, R47, R49, R5, R50, R53, R54, R55, R59, R60, R61, R65, R66, R67, R68, R6805, R6806, R6807, R6808, R6809, R6810, R73, R74, R75, R76, R77, R83, R84, R85, R86, R87, R88, R89, R90, R91, R92, R93, R94, R95, R96, R9601, R9602, R9603, R9604, R9605, R9606, R9607, R9608, R9719, R9720, R9721, R9722, R9723, R9724, R9725, R9726, R9727, R9728, R9729, R9730, R9731, R9732, R9733, R9734, R9735, R9736, R9737, R9738, R9739, R9740, R9741, R9742, R9743, R9744, R9745, R9746, R9747, R9748, R9749, R9750, R9751, R9752, R9753, R9754, R9755, R9756, R9757, R9758, R9759, R9760, R9761, R9762, R9763, R9764, R9765, R9766, R9767, R9768, R9769, R9770, R9771, R9772, R9773, R9774, R9775, R9776, R9777, R9778, R9779, R9780, R9781, R9782, R9783, R9784, R9785, R9786, R9787, R9788, R9789, R9790, R9791, R9792, R9793, R9794, R9795, R9796, R9797, R9798, R9799, R9800, R9801, R9802, R9803, R9804, R9805, R9806, R9807, R9808, R9809, R9810, R9811, R9812, R9813, R9814, R9815, R9816, R9817, R9818, R9819, R9820, R9821, R9822, R9823, R9824, R9825, R9826, R9827, R9828;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [70, 70];
  s0 -> s0 [71, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [70, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R15 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 69];
  s0 -> s0 [0, 65535] { R16 += 1 };
  s0 -> s2 [70, 70];
  s0 -> s1 [71, 65535];
  s1 -> s1 [0, 69];
  s1 -> s2 [70, 70];
  s1 -> s1 [71, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R24 += 1 };
  s0 -> s0 [0, 65535] { R23 += 1, R24 += 1 };
  s0 -> s2 [9, 13] { R24 += 1 };
  s0 -> s1 [14, 31] { R24 += 1 };
  s0 -> s2 [32, 32] { R24 += 1 };
  s0 -> s1 [33, 65535] { R24 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R24 += 1 };
  s2 -> s1 [0, 65535] { R24 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R25 += 1, R26 += 1 };
  s1 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R28 += 1 };
  s0 -> s0 [0, 65535] { R27 += 1, R28 += 1 };
  s0 -> s2 [9, 13] { R28 += 1 };
  s0 -> s1 [14, 31] { R28 += 1 };
  s0 -> s2 [32, 32] { R28 += 1 };
  s0 -> s1 [33, 65535] { R28 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R28 += 1 };
  s2 -> s1 [0, 65535] { R28 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R29 += 1, R30 += 1 };
  s1 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R9749 += 1, R9750 += 1 };
  s0 -> s1 [0, 65535] { R9750 += 1, R22 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R9750 += 1, R22 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 69] { R9752 += 1 };
  s0 -> s0 [0, 65535] { R9751 += 1, R9752 += 1 };
  s0 -> s2 [70, 70] { R9752 += 1 };
  s0 -> s3 [70, 70] { R9752 += 1 };
  s0 -> s1 [76, 65535] { R9752 += 1 };
  s1 -> s1 [0, 69] { R9752 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R9752 += 1 };
  s1 -> s3 [70, 70] { R9752 += 1 };
  s1 -> s1 [76, 65535] { R9752 += 1 };
  s2 -> s2 [0, 70] { R9752 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [76, 65535] { R9752 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 69] { R9754 += 1, R45 += 1 };
  s0 -> s0 [0, 65535] { R9753 += 1, R9754 += 1 };
  s0 -> s2 [70, 70] { R9754 += 1, R45 += 1 };
  s0 -> s3 [70, 70] { R9754 += 1, R45 += 1 };
  s0 -> s1 [71, 65535] { R9754 += 1, R45 += 1 };
  s1 -> s1 [0, 69] { R9754 += 1, R45 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R9754 += 1, R45 += 1 };
  s1 -> s3 [70, 70] { R9754 += 1, R45 += 1 };
  s1 -> s1 [71, 65535] { R9754 += 1, R45 += 1 };
  s2 -> s2 [0, 65535] { R9754 += 1, R45 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 69] { R9756 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R9755 += 1, R9756 += 1 };
  s0 -> s2 [70, 70] { R9756 += 1, R47 += 1 };
  s0 -> s3 [70, 70] { R9756 += 1, R47 += 1 };
  s0 -> s1 [71, 65535] { R9756 += 1, R47 += 1 };
  s1 -> s1 [0, 69] { R9756 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R9756 += 1, R47 += 1 };
  s1 -> s3 [70, 70] { R9756 += 1, R47 += 1 };
  s1 -> s1 [71, 65535] { R9756 += 1, R47 += 1 };
  s2 -> s2 [0, 65535] { R9756 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 69] { R9758 += 1, R49 += 1, R50 += 1 };
  s0 -> s0 [0, 65535] { R9757 += 1, R9758 += 1 };
  s0 -> s2 [70, 70] { R9758 += 1, R49 += 1, R50 += 1 };
  s0 -> s3 [70, 70] { R9758 += 1, R49 += 1, R50 += 1 };
  s0 -> s1 [71, 65535] { R9758 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 69] { R9758 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R9758 += 1, R49 += 1, R50 += 1 };
  s1 -> s3 [70, 70] { R9758 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [71, 65535] { R9758 += 1, R49 += 1, R50 += 1 };
  s2 -> s2 [0, 65535] { R9758 += 1, R49 += 1, R50 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 69] { R9760 += 1, R53 += 1, R54 += 1 };
  s0 -> s0 [0, 65535] { R9759 += 1, R9760 += 1 };
  s0 -> s2 [70, 70] { R9760 += 1, R53 += 1, R54 += 1 };
  s0 -> s3 [70, 70] { R9760 += 1, R53 += 1, R54 += 1 };
  s0 -> s1 [71, 65535] { R9760 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 69] { R9760 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R9760 += 1, R53 += 1, R54 += 1 };
  s1 -> s3 [70, 70] { R9760 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [71, 65535] { R9760 += 1, R53 += 1, R54 += 1 };
  s2 -> s2 [0, 65535] { R9760 += 1, R53 += 1, R54 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 69] { R9762 += 1, R59 += 1, R60 += 1 };
  s0 -> s0 [0, 65535] { R9761 += 1, R9762 += 1 };
  s0 -> s2 [70, 70] { R9762 += 1, R59 += 1, R60 += 1 };
  s0 -> s3 [70, 70] { R9762 += 1, R59 += 1, R60 += 1 };
  s0 -> s1 [71, 65535] { R9762 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 69] { R9762 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R9762 += 1, R59 += 1, R60 += 1 };
  s1 -> s3 [70, 70] { R9762 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [71, 65535] { R9762 += 1, R59 += 1, R60 += 1 };
  s2 -> s2 [0, 65535] { R9762 += 1, R59 += 1, R60 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 69] { R9764 += 1, R65 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R9763 += 1, R9764 += 1 };
  s0 -> s2 [70, 70] { R9764 += 1, R65 += 1, R66 += 1 };
  s0 -> s3 [70, 70] { R9764 += 1, R65 += 1, R66 += 1 };
  s0 -> s1 [71, 65535] { R9764 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 69] { R9764 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R9764 += 1, R65 += 1, R66 += 1 };
  s1 -> s3 [70, 70] { R9764 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [71, 65535] { R9764 += 1, R65 += 1, R66 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R9764 += 1, R65 += 1, R66 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 69] { R9766 += 1, R73 += 1, R74 += 1 };
  s0 -> s0 [0, 65535] { R9765 += 1, R9766 += 1 };
  s0 -> s2 [70, 70] { R9766 += 1, R73 += 1, R74 += 1 };
  s0 -> s3 [70, 70] { R9766 += 1, R73 += 1, R74 += 1 };
  s0 -> s1 [71, 65535] { R9766 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 69] { R9766 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R9766 += 1, R73 += 1, R74 += 1 };
  s1 -> s3 [70, 70] { R9766 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [71, 65535] { R9766 += 1, R73 += 1, R74 += 1 };
  s2 -> s2 [0, 65535] { R9766 += 1, R73 += 1, R74 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 69] { R9786 += 1 };
  s0 -> s0 [0, 65535] { R9785 += 1, R9786 += 1 };
  s0 -> s2 [70, 70] { R9786 += 1 };
  s0 -> s1 [71, 65535] { R9786 += 1 };
  s1 -> s1 [0, 69] { R9786 += 1 };
  s1 -> s2 [70, 70] { R9786 += 1 };
  s1 -> s1 [71, 65535] { R9786 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R9786 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R9787 += 1, R9788 += 1 };
  s0 -> s1 [0, 65535] { R9788 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R9788 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 69] { R9790 += 1 };
  s0 -> s0 [0, 65535] { R9789 += 1, R9790 += 1 };
  s0 -> s2 [0, 65535] { R9790 += 1, R12 += 1 };
  s0 -> s3 [70, 70] { R9790 += 1 };
  s0 -> s1 [71, 65535] { R9790 += 1 };
  s1 -> s1 [0, 69] { R9790 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [70, 70] { R9790 += 1 };
  s1 -> s1 [71, 65535] { R9790 += 1 };
  s2 -> s1 [0, 69] { R9790 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R9790 += 1, R12 += 1 };
  s2 -> s3 [70, 70] { R9790 += 1 };
  s2 -> s1 [71, 65535] { R9790 += 1 };
  s3 -> s3 [0, 65535] { R9790 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 69] { R9792 += 1, R9730 += 1 };
  s0 -> s2 [0, 65535] { R9792 += 1, R9729 += 1, R9730 += 1 };
  s0 -> s0 [0, 65535] { R9791 += 1, R9792 += 1 };
  s0 -> s1 [71, 65535] { R9792 += 1, R9730 += 1 };
  s1 -> s1 [0, 69] { R9792 += 1, R9730 += 1 };
  s1 -> s1 [0, 65535] { R9792 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [71, 65535] { R9792 += 1, R9730 += 1 };
  s2 -> s1 [0, 69] { R9792 += 1, R9730 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R9792 += 1, R9729 += 1, R9730 += 1 };
  s2 -> s1 [71, 65535] { R9792 += 1, R9730 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R9794 += 1, R9732 += 1, R20 += 1 };
  s0 -> s0 [0, 65535] { R9793 += 1, R9794 += 1 };
  s0 -> s2 [0, 65535] { R9794 += 1, R9731 += 1, R9732 += 1 };
  s1 -> s4 [0, 65535] { R9794 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R9794 += 1, R9732 += 1, R20 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R9794 += 1, R9732 += 1, R20 += 1 };
  s2 -> s2 [0, 65535] { R9794 += 1, R9731 += 1, R9732 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R9794 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 70] { R9796 += 1, R9734 += 1 };
  s0 -> s2 [0, 65535] { R9796 += 1, R9733 += 1, R9734 += 1 };
  s0 -> s0 [0, 65535] { R9795 += 1, R9796 += 1 };
  s0 -> s1 [75, 65535] { R9796 += 1, R9734 += 1 };
  s1 -> s1 [0, 70] { R9796 += 1, R9734 += 1 };
  s1 -> s1 [0, 65535] { R9796 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [75, 65535] { R9796 += 1, R9734 += 1 };
  s2 -> s1 [0, 70] { R9796 += 1, R9734 += 1 };
  s2 -> s2 [0, 65535] { R9796 += 1, R9733 += 1, R9734 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [75, 65535] { R9796 += 1, R9734 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R9798 += 1, R9735 += 1, R9736 += 1 };
  s0 -> s2 [0, 65535] { R9798 += 1, R9736 += 1, R84 += 1 };
  s0 -> s0 [0, 65535] { R9797 += 1, R9798 += 1 };
  s1 -> s1 [0, 65535] { R9798 += 1, R9735 += 1, R9736 += 1 };
  s1 -> s2 [0, 65535] { R9798 += 1, R9736 += 1, R84 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R9798 += 1 };
  s2 -> s2 [0, 65535] { R9798 += 1, R9736 += 1, R84 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R9798 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 74] { R9800 += 1, R9738 += 1 };
  s0 -> s0 [0, 65535] { R9799 += 1, R9800 += 1 };
  s0 -> s2 [0, 65535] { R9800 += 1, R9737 += 1, R9738 += 1 };
  s0 -> s3 [0, 65535] { R9800 += 1, R9738 += 1, R86 += 1 };
  s0 -> s1 [76, 65535] { R9800 += 1, R9738 += 1 };
  s1 -> s1 [0, 74] { R9800 += 1, R9738 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R9800 += 1 };
  s1 -> s1 [76, 65535] { R9800 += 1, R9738 += 1 };
  s2 -> s1 [0, 74] { R9800 += 1, R9738 += 1 };
  s2 -> s2 [0, 65535] { R9800 += 1, R9737 += 1, R9738 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R9800 += 1, R9738 += 1, R86 += 1 };
  s2 -> s1 [76, 65535] { R9800 += 1, R9738 += 1 };
  s3 -> s1 [0, 74] { R9800 += 1, R9738 += 1 };
  s3 -> s4 [0, 65535] { R9800 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R9800 += 1, R9738 += 1, R86 += 1 };
  s3 -> s1 [76, 65535] { R9800 += 1, R9738 += 1 };
  s4 -> s4 [0, 65535] { R9800 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 65535] { R9802 += 1, R9740 += 1 };
  s0 -> s2 [0, 65535] { R9802 += 1, R9739 += 1, R9740 += 1 };
  s0 -> s0 [0, 65535] { R9801 += 1, R9802 += 1 };
  s0 -> s3 [0, 65535] { R9802 += 1, R9740 += 1, R90 += 1 };
  s1 -> s1 [0, 65535] { R9802 += 1, R9740 += 1 };
  s1 -> s4 [0, 65535] { R9802 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R9802 += 1, R9740 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R9802 += 1, R9739 += 1, R9740 += 1 };
  s2 -> s3 [0, 65535] { R9802 += 1, R9740 += 1, R90 += 1 };
  s3 -> s1 [0, 65535] { R9802 += 1, R9740 += 1 };
  s3 -> s4 [0, 65535] { R9802 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R9802 += 1, R9740 += 1, R90 += 1 };
  s4 -> s4 [0, 65535] { R9802 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s0 [0, 65535] { R9803 += 1, R9804 += 1 };
  s0 -> s1 [0, 65535] { R9804 += 1, R9741 += 1, R9742 += 1 };
  s0 -> s2 [0, 65535] { R9804 += 1, R9742 += 1, R94 += 1, R95 += 1 };
  s0 -> s3 [0, 65535] { R9804 += 1, R9742 += 1, R95 += 1, R96 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R9804 += 1, R9741 += 1, R9742 += 1 };
  s1 -> s2 [0, 65535] { R9804 += 1, R9742 += 1, R94 += 1, R95 += 1 };
  s1 -> s3 [0, 65535] { R9804 += 1, R9742 += 1, R95 += 1, R96 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R9804 += 1, R9742 += 1, R94 += 1, R95 += 1 };
  s2 -> s6 [0, 65535] { R9804 += 1 };
  s2 -> s3 [0, 65535] { R9804 += 1, R9742 += 1, R95 += 1, R96 += 1 };
  s3 -> s4 [0, 65535] { R9804 += 1, R9742 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R9804 += 1 };
  s3 -> s3 [0, 65535] { R9804 += 1, R9742 += 1, R95 += 1, R96 += 1 };
  s4 -> s4 [0, 65535] { R9804 += 1, R9742 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R9804 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9804 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 74] { R9806 += 1, R9744 += 1, R6809 += 1 };
  s0 -> s2 [0, 65535] { R9806 += 1, R9744 += 1 };
  s0 -> s3 [0, 65535] { R9806 += 1, R9744 += 1, R6809 += 1, R6810 += 1 };
  s0 -> s4 [0, 65535] { R9806 += 1, R9743 += 1, R9744 += 1 };
  s0 -> s0 [0, 65535] { R9805 += 1, R9806 += 1 };
  s0 -> s1 [76, 65535] { R9806 += 1, R9744 += 1, R6809 += 1 };
  s1 -> s1 [0, 74] { R9806 += 1, R9744 += 1, R6809 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R9806 += 1, R9744 += 1 };
  s1 -> s6 [0, 65535] { R9806 += 1 };
  s1 -> s1 [76, 65535] { R9806 += 1, R9744 += 1, R6809 += 1 };
  s2 -> s2 [0, 65535] { R9806 += 1, R9744 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R9806 += 1 };
  s3 -> s1 [0, 74] { R9806 += 1, R9744 += 1, R6809 += 1 };
  s3 -> s2 [0, 65535] { R9806 += 1, R9744 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R9806 += 1, R9744 += 1, R6809 += 1, R6810 += 1 };
  s3 -> s6 [0, 65535] { R9806 += 1 };
  s3 -> s1 [76, 65535] { R9806 += 1, R9744 += 1, R6809 += 1 };
  s4 -> s1 [0, 74] { R9806 += 1, R9744 += 1, R6809 += 1 };
  s4 -> s2 [0, 65535] { R9806 += 1, R9744 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s3 [0, 65535] { R9806 += 1, R9744 += 1, R6809 += 1, R6810 += 1 };
  s4 -> s4 [0, 65535] { R9806 += 1, R9743 += 1, R9744 += 1 };
  s4 -> s1 [76, 65535] { R9806 += 1, R9744 += 1, R6809 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9806 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 74] { R9808 += 1, R9746 += 1, R9606 += 1, R9608 += 1 };
  s0 -> s2 [0, 65535] { R9808 += 1, R9746 += 1, R9606 += 1, R9607 += 1, R9608 += 1 };
  s0 -> s0 [0, 65535] { R9807 += 1, R9808 += 1 };
  s0 -> s3 [0, 65535] { R9808 += 1, R9745 += 1, R9746 += 1 };
  s0 -> s4 [75, 75] { R9808 += 1, R9746 += 1, R9606 += 1, R9608 += 1 };
  s0 -> s1 [76, 65535] { R9808 += 1, R9746 += 1, R9606 += 1, R9608 += 1 };
  s1 -> s1 [0, 74] { R9808 += 1, R9746 += 1, R9606 += 1, R9608 += 1 };
  s1 -> s4 [75, 75] { R9808 += 1, R9746 += 1, R9606 += 1, R9608 += 1 };
  s1 -> s1 [76, 65535] { R9808 += 1, R9746 += 1, R9606 += 1, R9608 += 1 };
  s2 -> s1 [0, 74] { R9808 += 1, R9746 += 1, R9606 += 1, R9608 += 1 };
  s2 -> s2 [0, 65535] { R9808 += 1, R9746 += 1, R9606 += 1, R9607 += 1, R9608 += 1 };
  s2 -> s4 [75, 75] { R9808 += 1, R9746 += 1, R9606 += 1, R9608 += 1 };
  s2 -> s1 [76, 65535] { R9808 += 1, R9746 += 1, R9606 += 1, R9608 += 1 };
  s3 -> s1 [0, 74] { R9808 += 1, R9746 += 1, R9606 += 1, R9608 += 1 };
  s3 -> s2 [0, 65535] { R9808 += 1, R9746 += 1, R9606 += 1, R9607 += 1, R9608 += 1 };
  s3 -> s3 [0, 65535] { R9808 += 1, R9745 += 1, R9746 += 1 };
  s3 -> s4 [75, 75] { R9808 += 1, R9746 += 1, R9606 += 1, R9608 += 1 };
  s3 -> s1 [76, 65535] { R9808 += 1, R9746 += 1, R9606 += 1, R9608 += 1 };
  s4 -> s4 [0, 65535] { R9808 += 1, R9746 += 1, R9606 += 1, R9608 += 1 };
  s4 -> s5 [0, 65535] { R9808 += 1, R9746 += 1, R9606 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R9808 += 1 };
  s4 -> s8 [0, 65535] { R9808 += 1, R9746 += 1 };
  s5 -> s5 [0, 65535] { R9808 += 1, R9746 += 1, R9606 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R9808 += 1 };
  s5 -> s8 [0, 65535] { R9808 += 1, R9746 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R9808 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R9808 += 1 };
  s8 -> s8 [0, 65535] { R9808 += 1, R9746 += 1 };
  accepting s4, s8, s5, s6, s7;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 65535] { R9810 += 1, R9748 += 1 };
  s0 -> s0 [0, 65535] { R9809 += 1, R9810 += 1 };
  s0 -> s2 [0, 65535] { R9810 += 1, R9747 += 1, R9748 += 1 };
  s1 -> s1 [0, 65535] { R9810 += 1, R9748 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R9810 += 1 };
  s2 -> s1 [0, 65535] { R9810 += 1, R9748 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R9810 += 1, R9747 += 1, R9748 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R9810 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R9812 += 1, R9768 += 1, R21 += 1 };
  s0 -> s0 [0, 65535] { R9811 += 1, R9812 += 1 };
  s0 -> s2 [0, 65535] { R9812 += 1, R9767 += 1, R9768 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R9812 += 1, R9768 += 1, R21 += 1 };
  s1 -> s4 [0, 65535] { R9812 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R9812 += 1, R9768 += 1, R21 += 1 };
  s2 -> s2 [0, 65535] { R9812 += 1, R9767 += 1, R9768 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R9812 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 69] { R9814 += 1, R9770 += 1 };
  s0 -> s2 [0, 65535] { R9814 += 1, R9769 += 1, R9770 += 1 };
  s0 -> s0 [0, 65535] { R9813 += 1, R9814 += 1 };
  s0 -> s3 [70, 70] { R9814 += 1, R9770 += 1 };
  s0 -> s4 [70, 70] { R9814 += 1, R9770 += 1 };
  s0 -> s5 [75, 75] { R9814 += 1, R9770 += 1 };
  s0 -> s1 [76, 65535] { R9814 += 1, R9770 += 1 };
  s1 -> s1 [0, 69] { R9814 += 1, R9770 += 1 };
  s1 -> s3 [70, 70] { R9814 += 1, R9770 += 1 };
  s1 -> s4 [70, 70] { R9814 += 1, R9770 += 1 };
  s1 -> s5 [75, 75] { R9814 += 1, R9770 += 1 };
  s1 -> s1 [76, 65535] { R9814 += 1, R9770 += 1 };
  s2 -> s1 [0, 69] { R9814 += 1, R9770 += 1 };
  s2 -> s2 [0, 65535] { R9814 += 1, R9769 += 1, R9770 += 1 };
  s2 -> s3 [70, 70] { R9814 += 1, R9770 += 1 };
  s2 -> s4 [70, 70] { R9814 += 1, R9770 += 1 };
  s2 -> s5 [75, 75] { R9814 += 1, R9770 += 1 };
  s2 -> s1 [76, 65535] { R9814 += 1, R9770 += 1 };
  s4 -> s4 [0, 70] { R9814 += 1, R9770 += 1 };
  s4 -> s8 [75, 75] { R9814 += 1, R9770 += 1 };
  s4 -> s4 [76, 65535] { R9814 += 1, R9770 += 1 };
  s5 -> s5 [0, 69] { R9814 += 1, R9770 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R9814 += 1 };
  s5 -> s7 [70, 70] { R9814 += 1, R9770 += 1 };
  s5 -> s8 [70, 70] { R9814 += 1, R9770 += 1 };
  s5 -> s5 [75, 65535] { R9814 += 1, R9770 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R9814 += 1 };
  s8 -> s8 [0, 70] { R9814 += 1, R9770 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R9814 += 1 };
  s8 -> s8 [75, 65535] { R9814 += 1, R9770 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 69] { R9816 += 1, R9772 += 1, R83 += 1 };
  s0 -> s2 [0, 65535] { R9816 += 1, R9771 += 1, R9772 += 1 };
  s0 -> s0 [0, 65535] { R9815 += 1, R9816 += 1 };
  s0 -> s3 [70, 70] { R9816 += 1, R9772 += 1, R83 += 1 };
  s0 -> s4 [70, 70] { R9816 += 1, R9772 += 1, R83 += 1 };
  s0 -> s1 [71, 65535] { R9816 += 1, R9772 += 1, R83 += 1 };
  s1 -> s1 [0, 69] { R9816 += 1, R9772 += 1, R83 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R9816 += 1 };
  s1 -> s3 [70, 70] { R9816 += 1, R9772 += 1, R83 += 1 };
  s1 -> s4 [70, 70] { R9816 += 1, R9772 += 1, R83 += 1 };
  s1 -> s1 [71, 65535] { R9816 += 1, R9772 += 1, R83 += 1 };
  s2 -> s1 [0, 69] { R9816 += 1, R9772 += 1, R83 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R9816 += 1, R9771 += 1, R9772 += 1 };
  s2 -> s3 [70, 70] { R9816 += 1, R9772 += 1, R83 += 1 };
  s2 -> s4 [70, 70] { R9816 += 1, R9772 += 1, R83 += 1 };
  s2 -> s1 [71, 65535] { R9816 += 1, R9772 += 1, R83 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R9816 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R9816 += 1 };
  s4 -> s4 [0, 65535] { R9816 += 1, R9772 += 1, R83 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9816 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 69] { R9818 += 1, R9774 += 1, R85 += 1 };
  s0 -> s0 [0, 65535] { R9817 += 1, R9818 += 1 };
  s0 -> s2 [0, 65535] { R9818 += 1, R9773 += 1, R9774 += 1 };
  s0 -> s3 [70, 70] { R9818 += 1, R9774 += 1, R85 += 1 };
  s0 -> s4 [70, 70] { R9818 += 1, R9774 += 1, R85 += 1 };
  s0 -> s1 [71, 65535] { R9818 += 1, R9774 += 1, R85 += 1 };
  s1 -> s1 [0, 69] { R9818 += 1, R9774 += 1, R85 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R9818 += 1 };
  s1 -> s3 [70, 70] { R9818 += 1, R9774 += 1, R85 += 1 };
  s1 -> s4 [70, 70] { R9818 += 1, R9774 += 1, R85 += 1 };
  s1 -> s1 [71, 65535] { R9818 += 1, R9774 += 1, R85 += 1 };
  s2 -> s1 [0, 69] { R9818 += 1, R9774 += 1, R85 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R9818 += 1, R9773 += 1, R9774 += 1 };
  s2 -> s3 [70, 70] { R9818 += 1, R9774 += 1, R85 += 1 };
  s2 -> s4 [70, 70] { R9818 += 1, R9774 += 1, R85 += 1 };
  s2 -> s1 [71, 65535] { R9818 += 1, R9774 += 1, R85 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R9818 += 1 };
  s4 -> s5 [0, 65535] { R9818 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R9818 += 1, R9774 += 1, R85 += 1 };
  s5 -> s5 [0, 65535] { R9818 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 69] { R9820 += 1, R9776 += 1, R87 += 1, R88 += 1 };
  s0 -> s2 [0, 69] { R9820 += 1, R9776 += 1, R88 += 1 };
  s0 -> s0 [0, 65535] { R9819 += 1, R9820 += 1 };
  s0 -> s3 [0, 65535] { R9820 += 1, R9775 += 1, R9776 += 1 };
  s0 -> s4 [70, 70] { R9820 += 1, R9776 += 1, R88 += 1 };
  s0 -> s5 [70, 70] { R9820 += 1, R9776 += 1, R87 += 1, R88 += 1 };
  s0 -> s6 [70, 70] { R9820 += 1, R9776 += 1, R87 += 1, R88 += 1 };
  s0 -> s7 [70, 70] { R9820 += 1, R9776 += 1, R88 += 1 };
  s0 -> s2 [71, 74] { R9820 += 1, R9776 += 1, R88 += 1 };
  s0 -> s1 [71, 65535] { R9820 += 1, R9776 += 1, R87 += 1, R88 += 1 };
  s0 -> s8 [75, 75] { R9820 += 1, R9776 += 1, R88 += 1 };
  s0 -> s2 [76, 65535] { R9820 += 1, R9776 += 1, R88 += 1 };
  s1 -> s1 [0, 69] { R9820 += 1, R9776 += 1, R87 += 1, R88 += 1 };
  s1 -> s2 [0, 69] { R9820 += 1, R9776 += 1, R88 += 1 };
  s1 -> s4 [70, 70] { R9820 += 1, R9776 += 1, R88 += 1 };
  s1 -> s5 [70, 70] { R9820 += 1, R9776 += 1, R87 += 1, R88 += 1 };
  s1 -> s6 [70, 70] { R9820 += 1, R9776 += 1, R87 += 1, R88 += 1 };
  s1 -> s7 [70, 70] { R9820 += 1, R9776 += 1, R88 += 1 };
  s1 -> s2 [71, 74] { R9820 += 1, R9776 += 1, R88 += 1 };
  s1 -> s1 [71, 65535] { R9820 += 1, R9776 += 1, R87 += 1, R88 += 1 };
  s1 -> s8 [75, 75] { R9820 += 1, R9776 += 1, R88 += 1 };
  s1 -> s2 [76, 65535] { R9820 += 1, R9776 += 1, R88 += 1 };
  s2 -> s2 [0, 69] { R9820 += 1, R9776 += 1, R88 += 1 };
  s2 -> s4 [70, 70] { R9820 += 1, R9776 += 1, R88 += 1 };
  s2 -> s7 [70, 70] { R9820 += 1, R9776 += 1, R88 += 1 };
  s2 -> s2 [71, 74] { R9820 += 1, R9776 += 1, R88 += 1 };
  s2 -> s8 [75, 75] { R9820 += 1, R9776 += 1, R88 += 1 };
  s2 -> s2 [76, 65535] { R9820 += 1, R9776 += 1, R88 += 1 };
  s3 -> s1 [0, 69] { R9820 += 1, R9776 += 1, R87 += 1, R88 += 1 };
  s3 -> s2 [0, 69] { R9820 += 1, R9776 += 1, R88 += 1 };
  s3 -> s3 [0, 65535] { R9820 += 1, R9775 += 1, R9776 += 1 };
  s3 -> s4 [70, 70] { R9820 += 1, R9776 += 1, R88 += 1 };
  s3 -> s5 [70, 70] { R9820 += 1, R9776 += 1, R87 += 1, R88 += 1 };
  s3 -> s6 [70, 70] { R9820 += 1, R9776 += 1, R87 += 1, R88 += 1 };
  s3 -> s7 [70, 70] { R9820 += 1, R9776 += 1, R88 += 1 };
  s3 -> s2 [71, 74] { R9820 += 1, R9776 += 1, R88 += 1 };
  s3 -> s1 [71, 65535] { R9820 += 1, R9776 += 1, R87 += 1, R88 += 1 };
  s3 -> s8 [75, 75] { R9820 += 1, R9776 += 1, R88 += 1 };
  s3 -> s2 [76, 65535] { R9820 += 1, R9776 += 1, R88 += 1 };
  s4 -> s4 [0, 74] { R9820 += 1, R9776 += 1, R88 += 1 };
  s4 -> s10 [75, 75] { R9820 += 1, R9776 += 1, R88 += 1 };
  s4 -> s4 [76, 65535] { R9820 += 1, R9776 += 1, R88 += 1 };
  s6 -> s4 [0, 74] { R9820 += 1, R9776 += 1, R88 += 1 };
  s6 -> s6 [0, 65535] { R9820 += 1, R9776 += 1, R87 += 1, R88 += 1 };
  s6 -> s10 [75, 75] { R9820 += 1, R9776 += 1, R88 += 1 };
  s6 -> s4 [76, 65535] { R9820 += 1, R9776 += 1, R88 += 1 };
  s8 -> s8 [0, 69] { R9820 += 1, R9776 += 1, R88 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R9820 += 1 };
  s8 -> s10 [70, 70] { R9820 += 1, R9776 += 1, R88 += 1 };
  s8 -> s11 [70, 70] { R9820 += 1, R9776 += 1, R88 += 1 };
  s8 -> s8 [71, 65535] { R9820 += 1, R9776 += 1, R88 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R9820 += 1, R9776 += 1, R88 += 1 };
  s10 -> s12 [0, 65535] { R9820 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R9820 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R9820 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 69] { R9822 += 1, R9778 += 1, R91 += 1, R92 += 1 };
  s0 -> s0 [0, 65535] { R9821 += 1, R9822 += 1 };
  s0 -> s2 [0, 65535] { R9822 += 1, R9777 += 1, R9778 += 1 };
  s0 -> s3 [70, 70] { R9822 += 1, R9778 += 1, R91 += 1, R92 += 1 };
  s0 -> s4 [70, 70] { R9822 += 1, R9778 += 1, R91 += 1, R92 += 1 };
  s0 -> s1 [71, 65535] { R9822 += 1, R9778 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 69] { R9822 += 1, R9778 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 65535] { R9822 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [70, 70] { R9822 += 1, R9778 += 1, R91 += 1, R92 += 1 };
  s1 -> s4 [70, 70] { R9822 += 1, R9778 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [71, 65535] { R9822 += 1, R9778 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [0, 69] { R9822 += 1, R9778 += 1, R91 += 1, R92 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R9822 += 1, R9777 += 1, R9778 += 1 };
  s2 -> s3 [70, 70] { R9822 += 1, R9778 += 1, R91 += 1, R92 += 1 };
  s2 -> s4 [70, 70] { R9822 += 1, R9778 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [71, 65535] { R9822 += 1, R9778 += 1, R91 += 1, R92 += 1 };
  s3 -> s3 [0, 65535] { R9822 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R9822 += 1, R9778 += 1, R91 += 1, R92 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R9822 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9822 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 69] { R9824 += 1, R9780 += 1, R6805 += 1, R6806 += 1 };
  s0 -> s2 [0, 69] { R9824 += 1, R9780 += 1, R6806 += 1, R6807 += 1 };
  s0 -> s0 [0, 65535] { R9823 += 1, R9824 += 1 };
  s0 -> s3 [0, 65535] { R9824 += 1, R9779 += 1, R9780 += 1 };
  s0 -> s4 [70, 70] { R9824 += 1, R9780 += 1, R6805 += 1, R6806 += 1 };
  s0 -> s5 [70, 70] { R9824 += 1, R9780 += 1, R6806 += 1, R6807 += 1 };
  s0 -> s6 [70, 70] { R9824 += 1, R9780 += 1, R6805 += 1, R6806 += 1 };
  s0 -> s7 [70, 70] { R9824 += 1, R9780 += 1, R6806 += 1, R6807 += 1 };
  s0 -> s1 [71, 65535] { R9824 += 1, R9780 += 1, R6805 += 1, R6806 += 1 };
  s0 -> s2 [71, 65535] { R9824 += 1, R9780 += 1, R6806 += 1, R6807 += 1 };
  s1 -> s1 [0, 69] { R9824 += 1, R9780 += 1, R6805 += 1, R6806 += 1 };
  s1 -> s2 [0, 69] { R9824 += 1, R9780 += 1, R6806 += 1, R6807 += 1 };
  s1 -> s4 [70, 70] { R9824 += 1, R9780 += 1, R6805 += 1, R6806 += 1 };
  s1 -> s5 [70, 70] { R9824 += 1, R9780 += 1, R6806 += 1, R6807 += 1 };
  s1 -> s6 [70, 70] { R9824 += 1, R9780 += 1, R6805 += 1, R6806 += 1 };
  s1 -> s7 [70, 70] { R9824 += 1, R9780 += 1, R6806 += 1, R6807 += 1 };
  s1 -> s1 [71, 65535] { R9824 += 1, R9780 += 1, R6805 += 1, R6806 += 1 };
  s1 -> s2 [71, 65535] { R9824 += 1, R9780 += 1, R6806 += 1, R6807 += 1 };
  s2 -> s2 [0, 69] { R9824 += 1, R9780 += 1, R6806 += 1, R6807 += 1 };
  s2 -> s2 [0, 65535] { R9824 += 1 };
  s2 -> s9 [0, 65535];
  s2 -> s5 [70, 70] { R9824 += 1, R9780 += 1, R6806 += 1, R6807 += 1 };
  s2 -> s7 [70, 70] { R9824 += 1, R9780 += 1, R6806 += 1, R6807 += 1 };
  s2 -> s2 [71, 65535] { R9824 += 1, R9780 += 1, R6806 += 1, R6807 += 1 };
  s3 -> s1 [0, 69] { R9824 += 1, R9780 += 1, R6805 += 1, R6806 += 1 };
  s3 -> s2 [0, 69] { R9824 += 1, R9780 += 1, R6806 += 1, R6807 += 1 };
  s3 -> s3 [0, 65535] { R9824 += 1, R9779 += 1, R9780 += 1 };
  s3 -> s4 [70, 70] { R9824 += 1, R9780 += 1, R6805 += 1, R6806 += 1 };
  s3 -> s5 [70, 70] { R9824 += 1, R9780 += 1, R6806 += 1, R6807 += 1 };
  s3 -> s6 [70, 70] { R9824 += 1, R9780 += 1, R6805 += 1, R6806 += 1 };
  s3 -> s7 [70, 70] { R9824 += 1, R9780 += 1, R6806 += 1, R6807 += 1 };
  s3 -> s1 [71, 65535] { R9824 += 1, R9780 += 1, R6805 += 1, R6806 += 1 };
  s3 -> s2 [71, 65535] { R9824 += 1, R9780 += 1, R6806 += 1, R6807 += 1 };
  s4 -> s4 [0, 65535] { R9824 += 1, R9780 += 1, R6805 += 1, R6806 += 1 };
  s4 -> s7 [0, 65535] { R9824 += 1, R9780 += 1, R6806 += 1, R6807 += 1 };
  s5 -> s5 [0, 65535] { R9824 += 1 };
  s5 -> s9 [0, 65535];
  s7 -> s8 [0, 65535] { R9824 += 1 };
  s7 -> s9 [0, 65535];
  s7 -> s7 [0, 65535] { R9824 += 1, R9780 += 1, R6806 += 1, R6807 += 1 };
  s8 -> s8 [0, 65535] { R9824 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s8, s5, s2, s9, s7;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 69] { R9826 += 1, R9782 += 1, R9602 += 1, R9603 += 1, R9604 += 1 };
  s0 -> s2 [0, 69] { R9826 += 1, R9782 += 1, R9601 += 1, R9602 += 1 };
  s0 -> s3 [0, 65535] { R9826 += 1, R9781 += 1, R9782 += 1 };
  s0 -> s0 [0, 65535] { R9825 += 1, R9826 += 1 };
  s0 -> s4 [70, 70] { R9826 += 1, R9782 += 1, R9601 += 1, R9602 += 1 };
  s0 -> s5 [70, 70] { R9826 += 1, R9782 += 1, R9602 += 1, R9603 += 1, R9604 += 1 };
  s0 -> s6 [70, 70] { R9826 += 1, R9782 += 1, R9602 += 1, R9603 += 1, R9604 += 1 };
  s0 -> s7 [70, 70] { R9826 += 1, R9782 += 1, R9601 += 1, R9602 += 1 };
  s0 -> s1 [71, 65535] { R9826 += 1, R9782 += 1, R9602 += 1, R9603 += 1, R9604 += 1 };
  s0 -> s2 [71, 65535] { R9826 += 1, R9782 += 1, R9601 += 1, R9602 += 1 };
  s1 -> s1 [0, 69] { R9826 += 1, R9782 += 1, R9602 += 1, R9603 += 1, R9604 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s1 [0, 65535] { R9826 += 1 };
  s1 -> s5 [70, 70] { R9826 += 1, R9782 += 1, R9602 += 1, R9603 += 1, R9604 += 1 };
  s1 -> s6 [70, 70] { R9826 += 1, R9782 += 1, R9602 += 1, R9603 += 1, R9604 += 1 };
  s1 -> s1 [71, 65535] { R9826 += 1, R9782 += 1, R9602 += 1, R9603 += 1, R9604 += 1 };
  s2 -> s1 [0, 69] { R9826 += 1, R9782 += 1, R9602 += 1, R9603 += 1, R9604 += 1 };
  s2 -> s2 [0, 69] { R9826 += 1, R9782 += 1, R9601 += 1, R9602 += 1 };
  s2 -> s4 [70, 70] { R9826 += 1, R9782 += 1, R9601 += 1, R9602 += 1 };
  s2 -> s5 [70, 70] { R9826 += 1, R9782 += 1, R9602 += 1, R9603 += 1, R9604 += 1 };
  s2 -> s6 [70, 70] { R9826 += 1, R9782 += 1, R9602 += 1, R9603 += 1, R9604 += 1 };
  s2 -> s7 [70, 70] { R9826 += 1, R9782 += 1, R9601 += 1, R9602 += 1 };
  s2 -> s1 [71, 65535] { R9826 += 1, R9782 += 1, R9602 += 1, R9603 += 1, R9604 += 1 };
  s2 -> s2 [71, 65535] { R9826 += 1, R9782 += 1, R9601 += 1, R9602 += 1 };
  s3 -> s1 [0, 69] { R9826 += 1, R9782 += 1, R9602 += 1, R9603 += 1, R9604 += 1 };
  s3 -> s2 [0, 69] { R9826 += 1, R9782 += 1, R9601 += 1, R9602 += 1 };
  s3 -> s3 [0, 65535] { R9826 += 1, R9781 += 1, R9782 += 1 };
  s3 -> s4 [70, 70] { R9826 += 1, R9782 += 1, R9601 += 1, R9602 += 1 };
  s3 -> s5 [70, 70] { R9826 += 1, R9782 += 1, R9602 += 1, R9603 += 1, R9604 += 1 };
  s3 -> s6 [70, 70] { R9826 += 1, R9782 += 1, R9602 += 1, R9603 += 1, R9604 += 1 };
  s3 -> s7 [70, 70] { R9826 += 1, R9782 += 1, R9601 += 1, R9602 += 1 };
  s3 -> s1 [71, 65535] { R9826 += 1, R9782 += 1, R9602 += 1, R9603 += 1, R9604 += 1 };
  s3 -> s2 [71, 65535] { R9826 += 1, R9782 += 1, R9601 += 1, R9602 += 1 };
  s5 -> s5 [0, 65535] { R9826 += 1, R9782 += 1, R9602 += 1, R9603 += 1, R9604 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s9 [0, 65535] { R9826 += 1 };
  s6 -> s6 [0, 65535] { R9826 += 1 };
  s6 -> s8 [0, 65535];
  s7 -> s5 [0, 65535] { R9826 += 1, R9782 += 1, R9602 += 1, R9603 += 1, R9604 += 1 };
  s7 -> s7 [0, 65535] { R9826 += 1, R9782 += 1, R9601 += 1, R9602 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R9826 += 1 };
  accepting s8, s5, s9, s6, s1;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 69] { R9828 += 1, R9784 += 1, R9720 += 1, R9721 += 1, R9722 += 1 };
  s0 -> s2 [0, 69] { R9828 += 1, R9784 += 1, R9719 += 1, R9720 += 1 };
  s0 -> s3 [0, 69] { R9828 += 1, R9784 += 1, R9720 += 1, R9722 += 1, R9723 += 1 };
  s0 -> s0 [0, 65535] { R9827 += 1, R9828 += 1 };
  s0 -> s4 [0, 65535] { R9828 += 1, R9783 += 1, R9784 += 1 };
  s0 -> s5 [70, 70] { R9828 += 1, R9784 += 1, R9719 += 1, R9720 += 1 };
  s0 -> s6 [70, 70] { R9828 += 1, R9784 += 1, R9719 += 1, R9720 += 1 };
  s0 -> s7 [70, 70] { R9828 += 1, R9784 += 1, R9720 += 1, R9721 += 1, R9722 += 1 };
  s0 -> s8 [70, 70] { R9828 += 1, R9784 += 1, R9720 += 1, R9722 += 1, R9723 += 1 };
  s0 -> s9 [70, 70] { R9828 += 1, R9784 += 1, R9720 += 1, R9722 += 1, R9723 += 1 };
  s0 -> s10 [70, 70] { R9828 += 1, R9784 += 1, R9720 += 1, R9721 += 1, R9722 += 1 };
  s0 -> s1 [71, 65535] { R9828 += 1, R9784 += 1, R9720 += 1, R9721 += 1, R9722 += 1 };
  s0 -> s2 [71, 65535] { R9828 += 1, R9784 += 1, R9719 += 1, R9720 += 1 };
  s0 -> s3 [71, 65535] { R9828 += 1, R9784 += 1, R9720 += 1, R9722 += 1, R9723 += 1 };
  s1 -> s15 [0, 69] { R9828 += 1, R9784 += 1 };
  s1 -> s1 [0, 69] { R9828 += 1, R9784 += 1, R9720 += 1, R9721 += 1, R9722 += 1 };
  s1 -> s3 [0, 69] { R9828 += 1, R9784 += 1, R9720 += 1, R9722 += 1, R9723 += 1 };
  s1 -> s18 [70, 70] { R9828 += 1, R9784 += 1 };
  s1 -> s7 [70, 70] { R9828 += 1, R9784 += 1, R9720 += 1, R9721 += 1, R9722 += 1 };
  s1 -> s8 [70, 70] { R9828 += 1, R9784 += 1, R9720 += 1, R9722 += 1, R9723 += 1 };
  s1 -> s9 [70, 70] { R9828 += 1, R9784 += 1, R9720 += 1, R9722 += 1, R9723 += 1 };
  s1 -> s10 [70, 70] { R9828 += 1, R9784 += 1, R9720 += 1, R9721 += 1, R9722 += 1 };
  s1 -> s12 [70, 70] { R9828 += 1, R9784 += 1 };
  s1 -> s15 [71, 65535] { R9828 += 1, R9784 += 1 };
  s1 -> s1 [71, 65535] { R9828 += 1, R9784 += 1, R9720 += 1, R9721 += 1, R9722 += 1 };
  s1 -> s3 [71, 65535] { R9828 += 1, R9784 += 1, R9720 += 1, R9722 += 1, R9723 += 1 };
  s2 -> s1 [0, 69] { R9828 += 1, R9784 += 1, R9720 += 1, R9721 += 1, R9722 += 1 };
  s2 -> s2 [0, 69] { R9828 += 1, R9784 += 1, R9719 += 1, R9720 += 1 };
  s2 -> s3 [0, 69] { R9828 += 1, R9784 += 1, R9720 += 1, R9722 += 1, R9723 += 1 };
  s2 -> s5 [70, 70] { R9828 += 1, R9784 += 1, R9719 += 1, R9720 += 1 };
  s2 -> s6 [70, 70] { R9828 += 1, R9784 += 1, R9719 += 1, R9720 += 1 };
  s2 -> s7 [70, 70] { R9828 += 1, R9784 += 1, R9720 += 1, R9721 += 1, R9722 += 1 };
  s2 -> s8 [70, 70] { R9828 += 1, R9784 += 1, R9720 += 1, R9722 += 1, R9723 += 1 };
  s2 -> s9 [70, 70] { R9828 += 1, R9784 += 1, R9720 += 1, R9722 += 1, R9723 += 1 };
  s2 -> s10 [70, 70] { R9828 += 1, R9784 += 1, R9720 += 1, R9721 += 1, R9722 += 1 };
  s2 -> s1 [71, 65535] { R9828 += 1, R9784 += 1, R9720 += 1, R9721 += 1, R9722 += 1 };
  s2 -> s2 [71, 65535] { R9828 += 1, R9784 += 1, R9719 += 1, R9720 += 1 };
  s2 -> s3 [71, 65535] { R9828 += 1, R9784 += 1, R9720 += 1, R9722 += 1, R9723 += 1 };
  s3 -> s15 [0, 69] { R9828 += 1, R9784 += 1 };
  s3 -> s3 [0, 69] { R9828 += 1, R9784 += 1, R9720 += 1, R9722 += 1, R9723 += 1 };
  s3 -> s16 [0, 69] { R9828 += 1, R9784 += 1, R9720 += 1 };
  s3 -> s11 [70, 70] { R9828 += 1, R9784 += 1, R9720 += 1 };
  s3 -> s17 [70, 70] { R9828 += 1, R9784 += 1, R9720 += 1 };
  s3 -> s18 [70, 70] { R9828 += 1, R9784 += 1 };
  s3 -> s8 [70, 70] { R9828 += 1, R9784 += 1, R9720 += 1, R9722 += 1, R9723 += 1 };
  s3 -> s9 [70, 70] { R9828 += 1, R9784 += 1, R9720 += 1, R9722 += 1, R9723 += 1 };
  s3 -> s12 [70, 70] { R9828 += 1, R9784 += 1 };
  s3 -> s15 [71, 65535] { R9828 += 1, R9784 += 1 };
  s3 -> s3 [71, 65535] { R9828 += 1, R9784 += 1, R9720 += 1, R9722 += 1, R9723 += 1 };
  s3 -> s16 [71, 65535] { R9828 += 1, R9784 += 1, R9720 += 1 };
  s4 -> s1 [0, 69] { R9828 += 1, R9784 += 1, R9720 += 1, R9721 += 1, R9722 += 1 };
  s4 -> s2 [0, 69] { R9828 += 1, R9784 += 1, R9719 += 1, R9720 += 1 };
  s4 -> s3 [0, 69] { R9828 += 1, R9784 += 1, R9720 += 1, R9722 += 1, R9723 += 1 };
  s4 -> s4 [0, 65535] { R9828 += 1, R9783 += 1, R9784 += 1 };
  s4 -> s5 [70, 70] { R9828 += 1, R9784 += 1, R9719 += 1, R9720 += 1 };
  s4 -> s6 [70, 70] { R9828 += 1, R9784 += 1, R9719 += 1, R9720 += 1 };
  s4 -> s7 [70, 70] { R9828 += 1, R9784 += 1, R9720 += 1, R9721 += 1, R9722 += 1 };
  s4 -> s8 [70, 70] { R9828 += 1, R9784 += 1, R9720 += 1, R9722 += 1, R9723 += 1 };
  s4 -> s9 [70, 70] { R9828 += 1, R9784 += 1, R9720 += 1, R9722 += 1, R9723 += 1 };
  s4 -> s10 [70, 70] { R9828 += 1, R9784 += 1, R9720 += 1, R9721 += 1, R9722 += 1 };
  s4 -> s1 [71, 65535] { R9828 += 1, R9784 += 1, R9720 += 1, R9721 += 1, R9722 += 1 };
  s4 -> s2 [71, 65535] { R9828 += 1, R9784 += 1, R9719 += 1, R9720 += 1 };
  s4 -> s3 [71, 65535] { R9828 += 1, R9784 += 1, R9720 += 1, R9722 += 1, R9723 += 1 };
  s5 -> s5 [0, 65535] { R9828 += 1, R9784 += 1, R9719 += 1, R9720 += 1 };
  s5 -> s7 [0, 65535] { R9828 += 1, R9784 += 1, R9720 += 1, R9721 += 1, R9722 += 1 };
  s5 -> s8 [0, 65535] { R9828 += 1, R9784 += 1, R9720 += 1, R9722 += 1, R9723 += 1 };
  s7 -> s7 [0, 65535] { R9828 += 1, R9784 += 1, R9720 += 1, R9721 += 1, R9722 += 1 };
  s7 -> s8 [0, 65535] { R9828 += 1, R9784 += 1, R9720 += 1, R9722 += 1, R9723 += 1 };
  s7 -> s12 [0, 65535] { R9828 += 1, R9784 += 1 };
  s8 -> s11 [0, 65535] { R9828 += 1, R9784 += 1, R9720 += 1 };
  s8 -> s8 [0, 65535] { R9828 += 1, R9784 += 1, R9720 += 1, R9722 += 1, R9723 += 1 };
  s8 -> s12 [0, 65535] { R9828 += 1, R9784 += 1 };
  s11 -> s11 [0, 65535] { R9828 += 1, R9784 += 1, R9720 += 1 };
  s11 -> s12 [0, 65535] { R9828 += 1, R9784 += 1 };
  s12 -> s13 [0, 65535];
  s12 -> s12 [0, 65535] { R9828 += 1, R9784 += 1 };
  s12 -> s14 [0, 65535] { R9828 += 1 };
  s13 -> s13 [0, 65535];
  s14 -> s13 [0, 65535];
  s14 -> s14 [0, 65535] { R9828 += 1 };
  s15 -> s15 [0, 69] { R9828 += 1, R9784 += 1 };
  s15 -> s15 [0, 65535] { R9828 += 1 };
  s15 -> s13 [0, 65535];
  s15 -> s18 [70, 70] { R9828 += 1, R9784 += 1 };
  s15 -> s12 [70, 70] { R9828 += 1, R9784 += 1 };
  s15 -> s15 [71, 65535] { R9828 += 1, R9784 += 1 };
  s16 -> s15 [0, 69] { R9828 += 1, R9784 += 1 };
  s16 -> s16 [0, 69] { R9828 += 1, R9784 += 1, R9720 += 1 };
  s16 -> s11 [70, 70] { R9828 += 1, R9784 += 1, R9720 += 1 };
  s16 -> s17 [70, 70] { R9828 += 1, R9784 += 1, R9720 += 1 };
  s16 -> s18 [70, 70] { R9828 += 1, R9784 += 1 };
  s16 -> s12 [70, 70] { R9828 += 1, R9784 += 1 };
  s16 -> s15 [71, 65535] { R9828 += 1, R9784 += 1 };
  s16 -> s16 [71, 65535] { R9828 += 1, R9784 += 1, R9720 += 1 };
  s18 -> s13 [0, 65535];
  s18 -> s18 [0, 65535] { R9828 += 1 };
  accepting s12, s13, s14, s18, s15;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [102, 102];
  accepting s1;
};
};
constraint R2 = R9746 && R3 = R9828 && R23 - R9828 = -1 && R24 = R9828 && R25 - R9828 = -1 && R26 = R9828 && R27 = 0 && R28 = 1 && R29 = 0 && R30 = 1 && R45 + R84 + R83 + -1*R9606 + -1*R9602 - R66 = 0 && R49 + R89 + R87 = 0 && R50 + R90 + R88 + -1*R9606 + -1*R9602 - R66 = 0 && R55 + R96 + R93 + -1*R9608 + -1*R9604 - R68 = 0 && R65 + R9605 + R9601 = 0 && R67 + R9607 + R9603 = 0 && R9745 = 0 && R9769 = 0 && R9770 = 0 && R9775 = 0 && R9776 = 0 && R9779 = 0 && R9780 = 0 && R9781 = 0 && R9782 = 0 && R9783 = 0 && R9784 = 0 && R9785 = 0 && R9786 = R9828 && R9787 = 0 && R9788 = R9828 && R9789 = 0 && R9790 = R9828 && R9791 = 0 && R9792 = R9828 && R9793 = 0 && R9794 = R9828 && R9795 = 0 && R9796 = R9828 && R9797 = 0 && R9798 = R9828 && R9799 = 0 && R9800 = R9828 && R9801 = 0 && R9802 = R9828 && R9803 = 0 && R9804 = R9828 && R9805 = 0 && R9806 = R9828 && R9807 = 0 && R9808 = R9828 && R9809 = 0 && R9810 = R9828 && R9811 = 0 && R9812 = R9828 && R9813 = 0 && R9814 = R9828 && R9815 = 0 && R9816 = R9828 && R9817 = 0 && R9818 = R9828 && R9819 = 0 && R9820 = R9828 && R9821 = 0 && R9822 = R9828 && R9823 = 0 && R9824 = R9828 && R9825 = 0 && R9826 = R9828 && R9827 = 0 && R12 < 1 && R15 < 1 && R16 < 1 && R47 + R86 + R85 < 1 && R61 + R6810 + R6807 < 1 && -1*R9606 + -1*R9602 - R66 < 1 && -1*R9608 + -1*R9604 - R68 < 1 && -1 < R9746 && 0 < R9828 && (R53 + R94 + R91 != 0 || R54 + R95 + R92 + -1*R9606 + -1*R9602 - R66 = 0 || R66 + R9606 + R9602 < 1) && (R59 + R6808 + R6805 != 0 || R60 + R6809 + R6806 + -1*R9606 + -1*R9602 - R66 = 0 || R66 + R9606 + R9602 < 1) && (R66 + R9606 + R9602 != 0 || ((R53 + R94 + R91 != 0 || R54 + R95 + R92 = 0 || R68 + R9608 + R9604 < 1) && (R53 + R94 + R91 = 0 || R68 + R9608 + R9604 < 1))) && (R66 + R9606 + R9602 != 0 || ((R59 + R6808 + R6805 != 0 || R60 + R6809 + R6806 = 0 || R68 + R9608 + R9604 < 1) && (R59 + R6808 + R6805 = 0 || R68 + R9608 + R9604 < 1))) && (R66 + R9606 + R9602 != 0 || ((R73 + R9724 + R9719 != 0 || R74 + R9725 + R9720 = 0 || R68 + R9608 + R9604 < 1) && (R73 + R9724 + R9719 = 0 || R68 + R9608 + R9604 < 1))) && (R68 + R9608 + R9604 != 0 || R77 + R9728 + R9723 = 0 || (R75 + R9726 + R9721 = 0 && R76 + R9727 + R9722 = 0)) && (R73 + R9724 + R9719 != 0 || R66 + R9606 + R9602 + -1*R9725 + -1*R9720 - R74 = 0 || R66 + R9606 + R9602 < 1) && (R75 + R9726 + R9721 != 0 || R68 + R9608 + R9604 + -1*R9727 + -1*R9722 - R76 = 0 || R68 + R9608 + R9604 < 1) && (R9729 != 0 || R9730 = R9746 || (R20 = 0 && R9746 = 0)) && (R9731 != 0 || R9732 = R9746 || (R20 = 0 && R9746 = 0)) && (R9733 != 0 || R9734 = R9746 || (R20 = 0 && R9746 = 0)) && (R9735 != 0 || R9736 = R9746 || (R20 = 0 && R9746 = 0)) && (R9737 != 0 || R9738 = R9746 || (R20 = 0 && R9746 = 0)) && (R9739 != 0 || R9740 = R9746 || (R20 = 0 && R9746 = 0)) && (R9741 != 0 || R9742 = R9746 || (R20 = 0 && R9746 = 0)) && (R9743 != 0 || R9744 = R9746 || (R20 = 0 && R9746 = 0)) && (R9747 != 0 || R9746 = R9748 || (R20 = 0 && R9746 = 0)) && (R21 = 0 || (R9767 = 0 && R9768 = 0)) && (R21 = 0 || (R9771 = 0 && R9772 = 0)) && (R21 = 0 || (R9773 = 0 && R9774 = 0)) && (R21 = 0 || (R9777 = 0 && R9778 = 0)) && (R22 = 0 || (R9749 = 0 && R9750 = 0)) && (R22 = 0 || (R9751 = 0 && R9752 = 0)) && (R22 = 0 || (R9753 = 0 && R9754 = 0)) && (R22 = 0 || (R9755 = 0 && R9756 = 0)) && (R22 = 0 || (R9757 = 0 && R9758 = 0)) && (R22 = 0 || (R9759 = 0 && R9760 = 0)) && (R22 = 0 || (R9761 = 0 && R9762 = 0)) && (R22 = 0 || (R9763 = 0 && R9764 = 0)) && (R22 = 0 || (R9765 = 0 && R9766 = 0)) && (R53 + R94 + R91 = 0 || R66 + R9606 + R9602 < 1) && (R59 + R6808 + R6805 = 0 || R66 + R9606 + R9602 < 1) && (R73 + R9724 + R9719 = 0 || R66 + R9606 + R9602 < 1) && (R75 + R9726 + R9721 = 0 || R68 + R9608 + R9604 < 1) && (R9729 = 0 || (R20 = 0 && R9746 = 0)) && (R9731 = 0 || (R20 = 0 && R9746 = 0)) && (R9733 = 0 || (R20 = 0 && R9746 = 0)) && (R9735 = 0 || (R20 = 0 && R9746 = 0)) && (R9737 = 0 || (R20 = 0 && R9746 = 0)) && (R9739 = 0 || (R20 = 0 && R9746 = 0)) && (R9741 = 0 || (R20 = 0 && R9746 = 0)) && (R9743 = 0 || (R20 = 0 && R9746 = 0)) && (R9747 = 0 || (R20 = 0 && R9746 = 0));
// End of Parikh automata intersection problem
