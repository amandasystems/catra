// Parikh automata intersection problem, generated by OSTRICH+
counter int R100, R101, R102, R1109, R1110, R1111, R1112, R1113, R1114, R1115, R1116, R1117, R1118, R1119, R1120, R1121, R1122, R1123, R1124, R1125, R1126, R1127, R1128, R1129, R1130, R1131, R1132, R1133, R1134, R1135, R1136, R1137, R1138, R1139, R1140, R1141, R1142, R1143, R1144, R1145, R1146, R1147, R1148, R1149, R1150, R1151, R1152, R1153, R1154, R1155, R1156, R1157, R1158, R1159, R1160, R1161, R1162, R1163, R1164, R1165, R1166, R1167, R1168, R1169, R1170, R1171, R1172, R1173, R1174, R1175, R1176, R1177, R1178, R1179, R1180, R1181, R1182, R1183, R1184, R1185, R1186, R1187, R1188, R1189, R1190, R1191, R1192, R1193, R1194, R1195, R1196, R1197, R1198, R1199, R12, R1200, R1201, R1202, R1203, R1204, R1205, R1206, R1207, R1208, R1209, R1210, R1211, R1212, R1213, R1214, R1215, R1216, R1217, R1218, R15, R16, R2, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R4, R45, R47, R49, R5, R50, R53, R54, R55, R59, R60, R61, R65, R66, R661, R662, R663, R664, R665, R666, R667, R668, R67, R68, R73, R74, R75, R76, R77, R83, R84, R85, R86, R87, R88, R89, R90, R91, R92, R93, R94, R95, R96, R97, R98, R99;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [70, 70];
  s0 -> s0 [71, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [70, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R15 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 69];
  s0 -> s0 [0, 65535] { R16 += 1 };
  s0 -> s2 [70, 70];
  s0 -> s1 [71, 65535];
  s1 -> s1 [0, 69];
  s1 -> s2 [70, 70];
  s1 -> s1 [71, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R24 += 1 };
  s0 -> s0 [0, 65535] { R23 += 1, R24 += 1 };
  s0 -> s2 [9, 13] { R24 += 1 };
  s0 -> s1 [14, 31] { R24 += 1 };
  s0 -> s2 [32, 32] { R24 += 1 };
  s0 -> s1 [33, 65535] { R24 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R24 += 1 };
  s2 -> s1 [0, 65535] { R24 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R25 += 1, R26 += 1 };
  s1 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R28 += 1 };
  s0 -> s0 [0, 65535] { R27 += 1, R28 += 1 };
  s0 -> s2 [9, 13] { R28 += 1 };
  s0 -> s1 [14, 31] { R28 += 1 };
  s0 -> s2 [32, 32] { R28 += 1 };
  s0 -> s1 [33, 65535] { R28 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R28 += 1 };
  s2 -> s1 [0, 65535] { R28 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R29 += 1, R30 += 1 };
  s1 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R1139 += 1, R1140 += 1 };
  s0 -> s1 [0, 65535] { R1140 += 1, R22 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R1140 += 1, R22 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 69] { R1142 += 1 };
  s0 -> s0 [0, 65535] { R1141 += 1, R1142 += 1 };
  s0 -> s2 [70, 70] { R1142 += 1 };
  s0 -> s3 [70, 70] { R1142 += 1 };
  s0 -> s1 [76, 65535] { R1142 += 1 };
  s1 -> s1 [0, 69] { R1142 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R1142 += 1 };
  s1 -> s3 [70, 70] { R1142 += 1 };
  s1 -> s1 [76, 65535] { R1142 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 70] { R1142 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [76, 65535] { R1142 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 69] { R1144 += 1, R45 += 1 };
  s0 -> s0 [0, 65535] { R1143 += 1, R1144 += 1 };
  s0 -> s2 [70, 70] { R1144 += 1, R45 += 1 };
  s0 -> s3 [70, 70] { R1144 += 1, R45 += 1 };
  s0 -> s1 [71, 65535] { R1144 += 1, R45 += 1 };
  s1 -> s1 [0, 69] { R1144 += 1, R45 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R1144 += 1, R45 += 1 };
  s1 -> s3 [70, 70] { R1144 += 1, R45 += 1 };
  s1 -> s1 [71, 65535] { R1144 += 1, R45 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1144 += 1, R45 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 69] { R1146 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R1145 += 1, R1146 += 1 };
  s0 -> s2 [70, 70] { R1146 += 1, R47 += 1 };
  s0 -> s3 [70, 70] { R1146 += 1, R47 += 1 };
  s0 -> s1 [71, 65535] { R1146 += 1, R47 += 1 };
  s1 -> s1 [0, 69] { R1146 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R1146 += 1, R47 += 1 };
  s1 -> s3 [70, 70] { R1146 += 1, R47 += 1 };
  s1 -> s1 [71, 65535] { R1146 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1146 += 1, R47 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 69] { R1148 += 1, R49 += 1, R50 += 1 };
  s0 -> s0 [0, 65535] { R1147 += 1, R1148 += 1 };
  s0 -> s2 [70, 70] { R1148 += 1, R49 += 1, R50 += 1 };
  s0 -> s3 [70, 70] { R1148 += 1, R49 += 1, R50 += 1 };
  s0 -> s1 [71, 65535] { R1148 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 69] { R1148 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R1148 += 1, R49 += 1, R50 += 1 };
  s1 -> s3 [70, 70] { R1148 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [71, 65535] { R1148 += 1, R49 += 1, R50 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R1148 += 1, R49 += 1, R50 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 69] { R1150 += 1, R53 += 1, R54 += 1 };
  s0 -> s0 [0, 65535] { R1149 += 1, R1150 += 1 };
  s0 -> s2 [70, 70] { R1150 += 1, R53 += 1, R54 += 1 };
  s0 -> s3 [70, 70] { R1150 += 1, R53 += 1, R54 += 1 };
  s0 -> s1 [71, 65535] { R1150 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 69] { R1150 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R1150 += 1, R53 += 1, R54 += 1 };
  s1 -> s3 [70, 70] { R1150 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [71, 65535] { R1150 += 1, R53 += 1, R54 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1150 += 1, R53 += 1, R54 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 69] { R1152 += 1, R59 += 1, R60 += 1 };
  s0 -> s0 [0, 65535] { R1151 += 1, R1152 += 1 };
  s0 -> s2 [70, 70] { R1152 += 1, R59 += 1, R60 += 1 };
  s0 -> s3 [70, 70] { R1152 += 1, R59 += 1, R60 += 1 };
  s0 -> s1 [71, 65535] { R1152 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 69] { R1152 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R1152 += 1, R59 += 1, R60 += 1 };
  s1 -> s3 [70, 70] { R1152 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [71, 65535] { R1152 += 1, R59 += 1, R60 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1152 += 1, R59 += 1, R60 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 69] { R1154 += 1, R65 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R1153 += 1, R1154 += 1 };
  s0 -> s2 [70, 70] { R1154 += 1, R65 += 1, R66 += 1 };
  s0 -> s3 [70, 70] { R1154 += 1, R65 += 1, R66 += 1 };
  s0 -> s1 [71, 65535] { R1154 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 69] { R1154 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R1154 += 1, R65 += 1, R66 += 1 };
  s1 -> s3 [70, 70] { R1154 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [71, 65535] { R1154 += 1, R65 += 1, R66 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1154 += 1, R65 += 1, R66 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 69] { R1156 += 1, R73 += 1, R74 += 1 };
  s0 -> s0 [0, 65535] { R1155 += 1, R1156 += 1 };
  s0 -> s2 [70, 70] { R1156 += 1, R73 += 1, R74 += 1 };
  s0 -> s3 [70, 70] { R1156 += 1, R73 += 1, R74 += 1 };
  s0 -> s1 [71, 65535] { R1156 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 69] { R1156 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R1156 += 1, R73 += 1, R74 += 1 };
  s1 -> s3 [70, 70] { R1156 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [71, 65535] { R1156 += 1, R73 += 1, R74 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1156 += 1, R73 += 1, R74 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 69] { R1176 += 1 };
  s0 -> s0 [0, 65535] { R1175 += 1, R1176 += 1 };
  s0 -> s2 [70, 70] { R1176 += 1 };
  s0 -> s1 [71, 65535] { R1176 += 1 };
  s1 -> s1 [0, 69] { R1176 += 1 };
  s1 -> s2 [70, 70] { R1176 += 1 };
  s1 -> s1 [71, 65535] { R1176 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1176 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R1178 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R1177 += 1, R1178 += 1 };
  s1 -> s1 [0, 65535] { R1178 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 69] { R1180 += 1 };
  s0 -> s2 [0, 65535] { R1180 += 1, R12 += 1 };
  s0 -> s0 [0, 65535] { R1179 += 1, R1180 += 1 };
  s0 -> s3 [70, 70] { R1180 += 1 };
  s0 -> s1 [71, 65535] { R1180 += 1 };
  s1 -> s1 [0, 69] { R1180 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [70, 70] { R1180 += 1 };
  s1 -> s1 [71, 65535] { R1180 += 1 };
  s2 -> s1 [0, 69] { R1180 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1180 += 1, R12 += 1 };
  s2 -> s3 [70, 70] { R1180 += 1 };
  s2 -> s1 [71, 65535] { R1180 += 1 };
  s3 -> s3 [0, 65535] { R1180 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 69] { R1182 += 1, R1120 += 1 };
  s0 -> s2 [0, 65535] { R1182 += 1, R1119 += 1, R1120 += 1 };
  s0 -> s0 [0, 65535] { R1181 += 1, R1182 += 1 };
  s0 -> s1 [71, 65535] { R1182 += 1, R1120 += 1 };
  s1 -> s1 [0, 69] { R1182 += 1, R1120 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1182 += 1 };
  s1 -> s1 [71, 65535] { R1182 += 1, R1120 += 1 };
  s2 -> s1 [0, 69] { R1182 += 1, R1120 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1182 += 1, R1119 += 1, R1120 += 1 };
  s2 -> s1 [71, 65535] { R1182 += 1, R1120 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R1184 += 1, R1122 += 1, R20 += 1 };
  s0 -> s0 [0, 65535] { R1183 += 1, R1184 += 1 };
  s0 -> s2 [0, 65535] { R1184 += 1, R1121 += 1, R1122 += 1 };
  s1 -> s1 [0, 65535] { R1184 += 1, R1122 += 1, R20 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R1184 += 1 };
  s2 -> s1 [0, 65535] { R1184 += 1, R1122 += 1, R20 += 1 };
  s2 -> s2 [0, 65535] { R1184 += 1, R1121 += 1, R1122 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1184 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 70] { R1186 += 1, R1124 += 1 };
  s0 -> s0 [0, 65535] { R1185 += 1, R1186 += 1 };
  s0 -> s2 [0, 65535] { R1186 += 1, R1123 += 1, R1124 += 1 };
  s0 -> s1 [75, 65535] { R1186 += 1, R1124 += 1 };
  s1 -> s1 [0, 70] { R1186 += 1, R1124 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1186 += 1 };
  s1 -> s1 [75, 65535] { R1186 += 1, R1124 += 1 };
  s2 -> s1 [0, 70] { R1186 += 1, R1124 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1186 += 1, R1123 += 1, R1124 += 1 };
  s2 -> s1 [75, 65535] { R1186 += 1, R1124 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R1188 += 1, R1125 += 1, R1126 += 1 };
  s0 -> s2 [0, 65535] { R1188 += 1, R1126 += 1, R84 += 1 };
  s0 -> s0 [0, 65535] { R1187 += 1, R1188 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1188 += 1, R1125 += 1, R1126 += 1 };
  s1 -> s2 [0, 65535] { R1188 += 1, R1126 += 1, R84 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R1188 += 1 };
  s2 -> s2 [0, 65535] { R1188 += 1, R1126 += 1, R84 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1188 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 74] { R1190 += 1, R1128 += 1 };
  s0 -> s2 [0, 65535] { R1190 += 1, R1128 += 1, R86 += 1 };
  s0 -> s3 [0, 65535] { R1190 += 1, R1127 += 1, R1128 += 1 };
  s0 -> s0 [0, 65535] { R1189 += 1, R1190 += 1 };
  s0 -> s1 [76, 65535] { R1190 += 1, R1128 += 1 };
  s1 -> s1 [0, 74] { R1190 += 1, R1128 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R1190 += 1 };
  s1 -> s1 [76, 65535] { R1190 += 1, R1128 += 1 };
  s2 -> s1 [0, 74] { R1190 += 1, R1128 += 1 };
  s2 -> s2 [0, 65535] { R1190 += 1, R1128 += 1, R86 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R1190 += 1 };
  s2 -> s1 [76, 65535] { R1190 += 1, R1128 += 1 };
  s3 -> s1 [0, 74] { R1190 += 1, R1128 += 1 };
  s3 -> s2 [0, 65535] { R1190 += 1, R1128 += 1, R86 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1190 += 1, R1127 += 1, R1128 += 1 };
  s3 -> s1 [76, 65535] { R1190 += 1, R1128 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1190 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 65535] { R1192 += 1, R1130 += 1, R90 += 1 };
  s0 -> s2 [0, 65535] { R1192 += 1, R1129 += 1, R1130 += 1 };
  s0 -> s0 [0, 65535] { R1191 += 1, R1192 += 1 };
  s0 -> s3 [0, 65535] { R1192 += 1, R1130 += 1 };
  s1 -> s1 [0, 65535] { R1192 += 1, R1130 += 1, R90 += 1 };
  s1 -> s4 [0, 65535] { R1192 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R1192 += 1, R1130 += 1 };
  s2 -> s1 [0, 65535] { R1192 += 1, R1130 += 1, R90 += 1 };
  s2 -> s2 [0, 65535] { R1192 += 1, R1129 += 1, R1130 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R1192 += 1, R1130 += 1 };
  s3 -> s4 [0, 65535] { R1192 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R1192 += 1, R1130 += 1 };
  s4 -> s4 [0, 65535] { R1192 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R1194 += 1, R1132 += 1, R94 += 1, R95 += 1 };
  s0 -> s0 [0, 65535] { R1193 += 1, R1194 += 1 };
  s0 -> s2 [0, 65535] { R1194 += 1, R1131 += 1, R1132 += 1 };
  s0 -> s3 [0, 65535] { R1194 += 1, R1132 += 1, R95 += 1, R96 += 1 };
  s1 -> s1 [0, 65535] { R1194 += 1, R1132 += 1, R94 += 1, R95 += 1 };
  s1 -> s3 [0, 65535] { R1194 += 1, R1132 += 1, R95 += 1, R96 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R1194 += 1 };
  s2 -> s1 [0, 65535] { R1194 += 1, R1132 += 1, R94 += 1, R95 += 1 };
  s2 -> s2 [0, 65535] { R1194 += 1, R1131 += 1, R1132 += 1 };
  s2 -> s3 [0, 65535] { R1194 += 1, R1132 += 1, R95 += 1, R96 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s4 [0, 65535] { R1194 += 1, R1132 += 1 };
  s3 -> s3 [0, 65535] { R1194 += 1, R1132 += 1, R95 += 1, R96 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R1194 += 1 };
  s4 -> s4 [0, 65535] { R1194 += 1, R1132 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R1194 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1194 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 74] { R1196 += 1, R1134 += 1, R101 += 1 };
  s0 -> s2 [0, 65535] { R1196 += 1, R1134 += 1, R101 += 1, R102 += 1 };
  s0 -> s3 [0, 65535] { R1196 += 1, R1134 += 1, R100 += 1, R101 += 1 };
  s0 -> s0 [0, 65535] { R1195 += 1, R1196 += 1 };
  s0 -> s4 [0, 65535] { R1196 += 1, R1133 += 1, R1134 += 1 };
  s0 -> s1 [76, 65535] { R1196 += 1, R1134 += 1, R101 += 1 };
  s1 -> s1 [0, 74] { R1196 += 1, R1134 += 1, R101 += 1 };
  s1 -> s6 [0, 65535] { R1196 += 1 };
  s1 -> s1 [0, 65535] { R1196 += 1, R1134 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [76, 65535] { R1196 += 1, R1134 += 1, R101 += 1 };
  s2 -> s1 [0, 74] { R1196 += 1, R1134 += 1, R101 += 1 };
  s2 -> s6 [0, 65535] { R1196 += 1 };
  s2 -> s2 [0, 65535] { R1196 += 1, R1134 += 1, R101 += 1, R102 += 1 };
  s2 -> s7 [0, 65535] { R1196 += 1, R1134 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [76, 65535] { R1196 += 1, R1134 += 1, R101 += 1 };
  s3 -> s1 [0, 74] { R1196 += 1, R1134 += 1, R101 += 1 };
  s3 -> s6 [0, 65535] { R1196 += 1 };
  s3 -> s2 [0, 65535] { R1196 += 1, R1134 += 1, R101 += 1, R102 += 1 };
  s3 -> s3 [0, 65535] { R1196 += 1, R1134 += 1, R100 += 1, R101 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [76, 65535] { R1196 += 1, R1134 += 1, R101 += 1 };
  s4 -> s1 [0, 74] { R1196 += 1, R1134 += 1, R101 += 1 };
  s4 -> s2 [0, 65535] { R1196 += 1, R1134 += 1, R101 += 1, R102 += 1 };
  s4 -> s3 [0, 65535] { R1196 += 1, R1134 += 1, R100 += 1, R101 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1196 += 1, R1133 += 1, R1134 += 1 };
  s4 -> s1 [76, 65535] { R1196 += 1, R1134 += 1, R101 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1196 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R1196 += 1 };
  s7 -> s7 [0, 65535] { R1196 += 1, R1134 += 1 };
  s7 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R1198 += 1, R1136 += 1, R666 += 1 };
  s0 -> s0 [0, 65535] { R1197 += 1, R1198 += 1 };
  s0 -> s2 [0, 65535] { R1198 += 1, R1135 += 1, R1136 += 1 };
  s0 -> s3 [0, 65535] { R1198 += 1, R1136 += 1 };
  s1 -> s4 [0, 65535] { R1198 += 1 };
  s1 -> s1 [0, 65535] { R1198 += 1, R1136 += 1, R666 += 1 };
  s1 -> s3 [0, 65535] { R1198 += 1, R1136 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R1198 += 1, R1136 += 1, R666 += 1 };
  s2 -> s2 [0, 65535] { R1198 += 1, R1135 += 1, R1136 += 1 };
  s2 -> s3 [0, 65535] { R1198 += 1, R1136 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s4 [0, 65535] { R1198 += 1 };
  s3 -> s3 [0, 65535] { R1198 += 1, R1136 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1198 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 65535] { R1200 += 1, R1138 += 1, R1115 += 1, R1116 += 1, R1117 += 1 };
  s0 -> s2 [0, 65535] { R1200 += 1, R1137 += 1, R1138 += 1 };
  s0 -> s3 [0, 65535] { R1200 += 1, R1138 += 1, R1115 += 1, R1117 += 1, R1118 += 1 };
  s0 -> s0 [0, 65535] { R1199 += 1, R1200 += 1 };
  s0 -> s4 [0, 65535] { R1200 += 1, R1138 += 1 };
  s1 -> s5 [0, 65535] { R1200 += 1 };
  s1 -> s1 [0, 65535] { R1200 += 1, R1138 += 1, R1115 += 1, R1116 += 1, R1117 += 1 };
  s1 -> s3 [0, 65535] { R1200 += 1, R1138 += 1, R1115 += 1, R1117 += 1, R1118 += 1 };
  s1 -> s4 [0, 65535] { R1200 += 1, R1138 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s1 [0, 65535] { R1200 += 1, R1138 += 1, R1115 += 1, R1116 += 1, R1117 += 1 };
  s2 -> s2 [0, 65535] { R1200 += 1, R1137 += 1, R1138 += 1 };
  s2 -> s3 [0, 65535] { R1200 += 1, R1138 += 1, R1115 += 1, R1117 += 1, R1118 += 1 };
  s2 -> s4 [0, 65535] { R1200 += 1, R1138 += 1 };
  s2 -> s6 [0, 65535];
  s3 -> s7 [0, 65535] { R1200 += 1, R1138 += 1, R1115 += 1 };
  s3 -> s5 [0, 65535] { R1200 += 1 };
  s3 -> s3 [0, 65535] { R1200 += 1, R1138 += 1, R1115 += 1, R1117 += 1, R1118 += 1 };
  s3 -> s4 [0, 65535] { R1200 += 1, R1138 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R1200 += 1 };
  s4 -> s4 [0, 65535] { R1200 += 1, R1138 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R1200 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R1200 += 1, R1138 += 1, R1115 += 1 };
  s7 -> s5 [0, 65535] { R1200 += 1 };
  s7 -> s4 [0, 65535] { R1200 += 1, R1138 += 1 };
  s7 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R1202 += 1, R1157 += 1, R1158 += 1 };
  s0 -> s0 [0, 65535] { R1201 += 1, R1202 += 1 };
  s0 -> s2 [0, 65535] { R1202 += 1, R1158 += 1, R21 += 1 };
  s1 -> s1 [0, 65535] { R1202 += 1, R1157 += 1, R1158 += 1 };
  s1 -> s2 [0, 65535] { R1202 += 1, R1158 += 1, R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1202 += 1, R1158 += 1, R21 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R1202 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1202 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 69] { R1204 += 1, R1160 += 1 };
  s0 -> s2 [0, 65535] { R1204 += 1, R1159 += 1, R1160 += 1 };
  s0 -> s0 [0, 65535] { R1203 += 1, R1204 += 1 };
  s0 -> s3 [70, 70] { R1204 += 1, R1160 += 1 };
  s0 -> s4 [70, 70] { R1204 += 1, R1160 += 1 };
  s0 -> s5 [75, 75] { R1204 += 1, R1160 += 1 };
  s0 -> s1 [76, 65535] { R1204 += 1, R1160 += 1 };
  s1 -> s1 [0, 69] { R1204 += 1, R1160 += 1 };
  s1 -> s3 [70, 70] { R1204 += 1, R1160 += 1 };
  s1 -> s4 [70, 70] { R1204 += 1, R1160 += 1 };
  s1 -> s5 [75, 75] { R1204 += 1, R1160 += 1 };
  s1 -> s1 [76, 65535] { R1204 += 1, R1160 += 1 };
  s2 -> s1 [0, 69] { R1204 += 1, R1160 += 1 };
  s2 -> s2 [0, 65535] { R1204 += 1, R1159 += 1, R1160 += 1 };
  s2 -> s3 [70, 70] { R1204 += 1, R1160 += 1 };
  s2 -> s4 [70, 70] { R1204 += 1, R1160 += 1 };
  s2 -> s5 [75, 75] { R1204 += 1, R1160 += 1 };
  s2 -> s1 [76, 65535] { R1204 += 1, R1160 += 1 };
  s4 -> s4 [0, 70] { R1204 += 1, R1160 += 1 };
  s4 -> s7 [75, 75] { R1204 += 1, R1160 += 1 };
  s4 -> s4 [76, 65535] { R1204 += 1, R1160 += 1 };
  s5 -> s5 [0, 69] { R1204 += 1, R1160 += 1 };
  s5 -> s5 [0, 65535] { R1204 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [70, 70] { R1204 += 1, R1160 += 1 };
  s5 -> s8 [70, 70] { R1204 += 1, R1160 += 1 };
  s5 -> s5 [75, 65535] { R1204 += 1, R1160 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 70] { R1204 += 1, R1160 += 1 };
  s7 -> s7 [0, 65535] { R1204 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [75, 65535] { R1204 += 1, R1160 += 1 };
  s8 -> s8 [0, 65535] { R1204 += 1 };
  s8 -> s6 [0, 65535];
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 69] { R1206 += 1, R1162 += 1, R83 += 1 };
  s0 -> s0 [0, 65535] { R1205 += 1, R1206 += 1 };
  s0 -> s2 [0, 65535] { R1206 += 1, R1161 += 1, R1162 += 1 };
  s0 -> s3 [70, 70] { R1206 += 1, R1162 += 1, R83 += 1 };
  s0 -> s4 [70, 70] { R1206 += 1, R1162 += 1, R83 += 1 };
  s0 -> s1 [71, 65535] { R1206 += 1, R1162 += 1, R83 += 1 };
  s1 -> s1 [0, 69] { R1206 += 1, R1162 += 1, R83 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1206 += 1 };
  s1 -> s3 [70, 70] { R1206 += 1, R1162 += 1, R83 += 1 };
  s1 -> s4 [70, 70] { R1206 += 1, R1162 += 1, R83 += 1 };
  s1 -> s1 [71, 65535] { R1206 += 1, R1162 += 1, R83 += 1 };
  s2 -> s1 [0, 69] { R1206 += 1, R1162 += 1, R83 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1206 += 1, R1161 += 1, R1162 += 1 };
  s2 -> s3 [70, 70] { R1206 += 1, R1162 += 1, R83 += 1 };
  s2 -> s4 [70, 70] { R1206 += 1, R1162 += 1, R83 += 1 };
  s2 -> s1 [71, 65535] { R1206 += 1, R1162 += 1, R83 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R1206 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R1206 += 1 };
  s4 -> s4 [0, 65535] { R1206 += 1, R1162 += 1, R83 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1206 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 69] { R1208 += 1, R1164 += 1, R85 += 1 };
  s0 -> s0 [0, 65535] { R1207 += 1, R1208 += 1 };
  s0 -> s2 [0, 65535] { R1208 += 1, R1163 += 1, R1164 += 1 };
  s0 -> s3 [70, 70] { R1208 += 1, R1164 += 1, R85 += 1 };
  s0 -> s4 [70, 70] { R1208 += 1, R1164 += 1, R85 += 1 };
  s0 -> s1 [71, 65535] { R1208 += 1, R1164 += 1, R85 += 1 };
  s1 -> s1 [0, 69] { R1208 += 1, R1164 += 1, R85 += 1 };
  s1 -> s1 [0, 65535] { R1208 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [70, 70] { R1208 += 1, R1164 += 1, R85 += 1 };
  s1 -> s4 [70, 70] { R1208 += 1, R1164 += 1, R85 += 1 };
  s1 -> s1 [71, 65535] { R1208 += 1, R1164 += 1, R85 += 1 };
  s2 -> s1 [0, 69] { R1208 += 1, R1164 += 1, R85 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1208 += 1, R1163 += 1, R1164 += 1 };
  s2 -> s3 [70, 70] { R1208 += 1, R1164 += 1, R85 += 1 };
  s2 -> s4 [70, 70] { R1208 += 1, R1164 += 1, R85 += 1 };
  s2 -> s1 [71, 65535] { R1208 += 1, R1164 += 1, R85 += 1 };
  s3 -> s6 [0, 65535] { R1208 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R1208 += 1, R1164 += 1, R85 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1208 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1208 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 69] { R1210 += 1, R1166 += 1, R88 += 1 };
  s0 -> s2 [0, 69] { R1210 += 1, R1166 += 1, R87 += 1, R88 += 1 };
  s0 -> s0 [0, 65535] { R1209 += 1, R1210 += 1 };
  s0 -> s3 [0, 65535] { R1210 += 1, R1165 += 1, R1166 += 1 };
  s0 -> s4 [70, 70] { R1210 += 1, R1166 += 1, R87 += 1, R88 += 1 };
  s0 -> s5 [70, 70] { R1210 += 1, R1166 += 1, R88 += 1 };
  s0 -> s6 [70, 70] { R1210 += 1, R1166 += 1, R87 += 1, R88 += 1 };
  s0 -> s7 [70, 70] { R1210 += 1, R1166 += 1, R88 += 1 };
  s0 -> s1 [71, 74] { R1210 += 1, R1166 += 1, R88 += 1 };
  s0 -> s2 [71, 65535] { R1210 += 1, R1166 += 1, R87 += 1, R88 += 1 };
  s0 -> s8 [75, 75] { R1210 += 1, R1166 += 1, R88 += 1 };
  s0 -> s1 [76, 65535] { R1210 += 1, R1166 += 1, R88 += 1 };
  s1 -> s1 [0, 69] { R1210 += 1, R1166 += 1, R88 += 1 };
  s1 -> s5 [70, 70] { R1210 += 1, R1166 += 1, R88 += 1 };
  s1 -> s7 [70, 70] { R1210 += 1, R1166 += 1, R88 += 1 };
  s1 -> s1 [71, 74] { R1210 += 1, R1166 += 1, R88 += 1 };
  s1 -> s8 [75, 75] { R1210 += 1, R1166 += 1, R88 += 1 };
  s1 -> s1 [76, 65535] { R1210 += 1, R1166 += 1, R88 += 1 };
  s2 -> s1 [0, 69] { R1210 += 1, R1166 += 1, R88 += 1 };
  s2 -> s2 [0, 69] { R1210 += 1, R1166 += 1, R87 += 1, R88 += 1 };
  s2 -> s4 [70, 70] { R1210 += 1, R1166 += 1, R87 += 1, R88 += 1 };
  s2 -> s5 [70, 70] { R1210 += 1, R1166 += 1, R88 += 1 };
  s2 -> s6 [70, 70] { R1210 += 1, R1166 += 1, R87 += 1, R88 += 1 };
  s2 -> s7 [70, 70] { R1210 += 1, R1166 += 1, R88 += 1 };
  s2 -> s1 [71, 74] { R1210 += 1, R1166 += 1, R88 += 1 };
  s2 -> s2 [71, 65535] { R1210 += 1, R1166 += 1, R87 += 1, R88 += 1 };
  s2 -> s8 [75, 75] { R1210 += 1, R1166 += 1, R88 += 1 };
  s2 -> s1 [76, 65535] { R1210 += 1, R1166 += 1, R88 += 1 };
  s3 -> s1 [0, 69] { R1210 += 1, R1166 += 1, R88 += 1 };
  s3 -> s2 [0, 69] { R1210 += 1, R1166 += 1, R87 += 1, R88 += 1 };
  s3 -> s3 [0, 65535] { R1210 += 1, R1165 += 1, R1166 += 1 };
  s3 -> s4 [70, 70] { R1210 += 1, R1166 += 1, R87 += 1, R88 += 1 };
  s3 -> s5 [70, 70] { R1210 += 1, R1166 += 1, R88 += 1 };
  s3 -> s6 [70, 70] { R1210 += 1, R1166 += 1, R87 += 1, R88 += 1 };
  s3 -> s7 [70, 70] { R1210 += 1, R1166 += 1, R88 += 1 };
  s3 -> s1 [71, 74] { R1210 += 1, R1166 += 1, R88 += 1 };
  s3 -> s2 [71, 65535] { R1210 += 1, R1166 += 1, R87 += 1, R88 += 1 };
  s3 -> s8 [75, 75] { R1210 += 1, R1166 += 1, R88 += 1 };
  s3 -> s1 [76, 65535] { R1210 += 1, R1166 += 1, R88 += 1 };
  s6 -> s7 [0, 74] { R1210 += 1, R1166 += 1, R88 += 1 };
  s6 -> s6 [0, 65535] { R1210 += 1, R1166 += 1, R87 += 1, R88 += 1 };
  s6 -> s11 [75, 75] { R1210 += 1, R1166 += 1, R88 += 1 };
  s6 -> s7 [76, 65535] { R1210 += 1, R1166 += 1, R88 += 1 };
  s7 -> s7 [0, 74] { R1210 += 1, R1166 += 1, R88 += 1 };
  s7 -> s11 [75, 75] { R1210 += 1, R1166 += 1, R88 += 1 };
  s7 -> s7 [76, 65535] { R1210 += 1, R1166 += 1, R88 += 1 };
  s8 -> s8 [0, 69] { R1210 += 1, R1166 += 1, R88 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R1210 += 1 };
  s8 -> s10 [70, 70] { R1210 += 1, R1166 += 1, R88 += 1 };
  s8 -> s11 [70, 70] { R1210 += 1, R1166 += 1, R88 += 1 };
  s8 -> s8 [71, 65535] { R1210 += 1, R1166 += 1, R88 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R1210 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s12 [0, 65535] { R1210 += 1 };
  s11 -> s11 [0, 65535] { R1210 += 1, R1166 += 1, R88 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R1210 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 69] { R1212 += 1, R1168 += 1, R91 += 1, R92 += 1 };
  s0 -> s2 [0, 65535] { R1212 += 1, R1167 += 1, R1168 += 1 };
  s0 -> s0 [0, 65535] { R1211 += 1, R1212 += 1 };
  s0 -> s3 [70, 70] { R1212 += 1, R1168 += 1, R91 += 1, R92 += 1 };
  s0 -> s4 [70, 70] { R1212 += 1, R1168 += 1, R91 += 1, R92 += 1 };
  s0 -> s1 [71, 65535] { R1212 += 1, R1168 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 69] { R1212 += 1, R1168 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 65535] { R1212 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [70, 70] { R1212 += 1, R1168 += 1, R91 += 1, R92 += 1 };
  s1 -> s4 [70, 70] { R1212 += 1, R1168 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [71, 65535] { R1212 += 1, R1168 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [0, 69] { R1212 += 1, R1168 += 1, R91 += 1, R92 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1212 += 1, R1167 += 1, R1168 += 1 };
  s2 -> s3 [70, 70] { R1212 += 1, R1168 += 1, R91 += 1, R92 += 1 };
  s2 -> s4 [70, 70] { R1212 += 1, R1168 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [71, 65535] { R1212 += 1, R1168 += 1, R91 += 1, R92 += 1 };
  s3 -> s3 [0, 65535] { R1212 += 1, R1168 += 1, R91 += 1, R92 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R1212 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1212 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1212 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 69] { R1214 += 1, R1170 += 1, R97 += 1, R98 += 1 };
  s0 -> s2 [0, 65535] { R1214 += 1, R1169 += 1, R1170 += 1 };
  s0 -> s0 [0, 65535] { R1213 += 1, R1214 += 1 };
  s0 -> s3 [70, 70] { R1214 += 1, R1170 += 1, R97 += 1, R98 += 1 };
  s0 -> s4 [70, 70] { R1214 += 1, R1170 += 1, R97 += 1, R98 += 1 };
  s0 -> s1 [71, 65535] { R1214 += 1, R1170 += 1, R97 += 1, R98 += 1 };
  s1 -> s1 [0, 69] { R1214 += 1, R1170 += 1, R97 += 1, R98 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1214 += 1 };
  s1 -> s3 [70, 70] { R1214 += 1, R1170 += 1, R97 += 1, R98 += 1 };
  s1 -> s4 [70, 70] { R1214 += 1, R1170 += 1, R97 += 1, R98 += 1 };
  s1 -> s1 [71, 65535] { R1214 += 1, R1170 += 1, R97 += 1, R98 += 1 };
  s2 -> s1 [0, 69] { R1214 += 1, R1170 += 1, R97 += 1, R98 += 1 };
  s2 -> s2 [0, 65535] { R1214 += 1, R1169 += 1, R1170 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [70, 70] { R1214 += 1, R1170 += 1, R97 += 1, R98 += 1 };
  s2 -> s4 [70, 70] { R1214 += 1, R1170 += 1, R97 += 1, R98 += 1 };
  s2 -> s1 [71, 65535] { R1214 += 1, R1170 += 1, R97 += 1, R98 += 1 };
  s3 -> s6 [0, 65535] { R1214 += 1 };
  s3 -> s3 [0, 65535] { R1214 += 1, R1170 += 1, R97 += 1, R98 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1214 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1214 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 69] { R1216 += 1, R1172 += 1, R662 += 1, R664 += 1 };
  s0 -> s2 [0, 69] { R1216 += 1, R1172 += 1, R661 += 1, R662 += 1 };
  s0 -> s3 [0, 69] { R1216 += 1, R1172 += 1, R662 += 1, R663 += 1, R664 += 1 };
  s0 -> s0 [0, 65535] { R1215 += 1, R1216 += 1 };
  s0 -> s4 [0, 65535] { R1216 += 1, R1171 += 1, R1172 += 1 };
  s0 -> s5 [70, 70] { R1216 += 1, R1172 += 1, R661 += 1, R662 += 1 };
  s0 -> s6 [70, 70] { R1216 += 1, R1172 += 1, R662 += 1, R663 += 1, R664 += 1 };
  s0 -> s7 [70, 70] { R1216 += 1, R1172 += 1, R662 += 1, R664 += 1 };
  s0 -> s8 [70, 70] { R1216 += 1, R1172 += 1, R662 += 1, R664 += 1 };
  s0 -> s9 [70, 70] { R1216 += 1, R1172 += 1, R662 += 1, R663 += 1, R664 += 1 };
  s0 -> s10 [70, 70] { R1216 += 1, R1172 += 1, R661 += 1, R662 += 1 };
  s0 -> s1 [71, 74] { R1216 += 1, R1172 += 1, R662 += 1, R664 += 1 };
  s0 -> s2 [71, 65535] { R1216 += 1, R1172 += 1, R661 += 1, R662 += 1 };
  s0 -> s3 [71, 65535] { R1216 += 1, R1172 += 1, R662 += 1, R663 += 1, R664 += 1 };
  s0 -> s11 [75, 75] { R1216 += 1, R1172 += 1, R662 += 1, R664 += 1 };
  s0 -> s1 [76, 65535] { R1216 += 1, R1172 += 1, R662 += 1, R664 += 1 };
  s1 -> s1 [0, 69] { R1216 += 1, R1172 += 1, R662 += 1, R664 += 1 };
  s1 -> s7 [70, 70] { R1216 += 1, R1172 += 1, R662 += 1, R664 += 1 };
  s1 -> s8 [70, 70] { R1216 += 1, R1172 += 1, R662 += 1, R664 += 1 };
  s1 -> s1 [71, 74] { R1216 += 1, R1172 += 1, R662 += 1, R664 += 1 };
  s1 -> s11 [75, 75] { R1216 += 1, R1172 += 1, R662 += 1, R664 += 1 };
  s1 -> s1 [76, 65535] { R1216 += 1, R1172 += 1, R662 += 1, R664 += 1 };
  s2 -> s1 [0, 69] { R1216 += 1, R1172 += 1, R662 += 1, R664 += 1 };
  s2 -> s2 [0, 69] { R1216 += 1, R1172 += 1, R661 += 1, R662 += 1 };
  s2 -> s3 [0, 69] { R1216 += 1, R1172 += 1, R662 += 1, R663 += 1, R664 += 1 };
  s2 -> s5 [70, 70] { R1216 += 1, R1172 += 1, R661 += 1, R662 += 1 };
  s2 -> s6 [70, 70] { R1216 += 1, R1172 += 1, R662 += 1, R663 += 1, R664 += 1 };
  s2 -> s7 [70, 70] { R1216 += 1, R1172 += 1, R662 += 1, R664 += 1 };
  s2 -> s8 [70, 70] { R1216 += 1, R1172 += 1, R662 += 1, R664 += 1 };
  s2 -> s9 [70, 70] { R1216 += 1, R1172 += 1, R662 += 1, R663 += 1, R664 += 1 };
  s2 -> s10 [70, 70] { R1216 += 1, R1172 += 1, R661 += 1, R662 += 1 };
  s2 -> s1 [71, 74] { R1216 += 1, R1172 += 1, R662 += 1, R664 += 1 };
  s2 -> s2 [71, 65535] { R1216 += 1, R1172 += 1, R661 += 1, R662 += 1 };
  s2 -> s3 [71, 65535] { R1216 += 1, R1172 += 1, R662 += 1, R663 += 1, R664 += 1 };
  s2 -> s11 [75, 75] { R1216 += 1, R1172 += 1, R662 += 1, R664 += 1 };
  s2 -> s1 [76, 65535] { R1216 += 1, R1172 += 1, R662 += 1, R664 += 1 };
  s3 -> s1 [0, 69] { R1216 += 1, R1172 += 1, R662 += 1, R664 += 1 };
  s3 -> s3 [0, 69] { R1216 += 1, R1172 += 1, R662 += 1, R663 += 1, R664 += 1 };
  s3 -> s6 [70, 70] { R1216 += 1, R1172 += 1, R662 += 1, R663 += 1, R664 += 1 };
  s3 -> s7 [70, 70] { R1216 += 1, R1172 += 1, R662 += 1, R664 += 1 };
  s3 -> s8 [70, 70] { R1216 += 1, R1172 += 1, R662 += 1, R664 += 1 };
  s3 -> s9 [70, 70] { R1216 += 1, R1172 += 1, R662 += 1, R663 += 1, R664 += 1 };
  s3 -> s1 [71, 74] { R1216 += 1, R1172 += 1, R662 += 1, R664 += 1 };
  s3 -> s3 [71, 65535] { R1216 += 1, R1172 += 1, R662 += 1, R663 += 1, R664 += 1 };
  s3 -> s11 [75, 75] { R1216 += 1, R1172 += 1, R662 += 1, R664 += 1 };
  s3 -> s1 [76, 65535] { R1216 += 1, R1172 += 1, R662 += 1, R664 += 1 };
  s4 -> s1 [0, 69] { R1216 += 1, R1172 += 1, R662 += 1, R664 += 1 };
  s4 -> s2 [0, 69] { R1216 += 1, R1172 += 1, R661 += 1, R662 += 1 };
  s4 -> s3 [0, 69] { R1216 += 1, R1172 += 1, R662 += 1, R663 += 1, R664 += 1 };
  s4 -> s4 [0, 65535] { R1216 += 1, R1171 += 1, R1172 += 1 };
  s4 -> s5 [70, 70] { R1216 += 1, R1172 += 1, R661 += 1, R662 += 1 };
  s4 -> s6 [70, 70] { R1216 += 1, R1172 += 1, R662 += 1, R663 += 1, R664 += 1 };
  s4 -> s7 [70, 70] { R1216 += 1, R1172 += 1, R662 += 1, R664 += 1 };
  s4 -> s8 [70, 70] { R1216 += 1, R1172 += 1, R662 += 1, R664 += 1 };
  s4 -> s9 [70, 70] { R1216 += 1, R1172 += 1, R662 += 1, R663 += 1, R664 += 1 };
  s4 -> s10 [70, 70] { R1216 += 1, R1172 += 1, R661 += 1, R662 += 1 };
  s4 -> s1 [71, 74] { R1216 += 1, R1172 += 1, R662 += 1, R664 += 1 };
  s4 -> s2 [71, 65535] { R1216 += 1, R1172 += 1, R661 += 1, R662 += 1 };
  s4 -> s3 [71, 65535] { R1216 += 1, R1172 += 1, R662 += 1, R663 += 1, R664 += 1 };
  s4 -> s11 [75, 75] { R1216 += 1, R1172 += 1, R662 += 1, R664 += 1 };
  s4 -> s1 [76, 65535] { R1216 += 1, R1172 += 1, R662 += 1, R664 += 1 };
  s5 -> s7 [0, 74] { R1216 += 1, R1172 += 1, R662 += 1, R664 += 1 };
  s5 -> s5 [0, 65535] { R1216 += 1, R1172 += 1, R661 += 1, R662 += 1 };
  s5 -> s6 [0, 65535] { R1216 += 1, R1172 += 1, R662 += 1, R663 += 1, R664 += 1 };
  s5 -> s15 [75, 75] { R1216 += 1, R1172 += 1, R662 += 1, R664 += 1 };
  s5 -> s7 [76, 65535] { R1216 += 1, R1172 += 1, R662 += 1, R664 += 1 };
  s6 -> s7 [0, 74] { R1216 += 1, R1172 += 1, R662 += 1, R664 += 1 };
  s6 -> s6 [0, 65535] { R1216 += 1, R1172 += 1, R662 += 1, R663 += 1, R664 += 1 };
  s6 -> s15 [75, 75] { R1216 += 1, R1172 += 1, R662 += 1, R664 += 1 };
  s6 -> s7 [76, 65535] { R1216 += 1, R1172 += 1, R662 += 1, R664 += 1 };
  s7 -> s7 [0, 74] { R1216 += 1, R1172 += 1, R662 += 1, R664 += 1 };
  s7 -> s15 [75, 75] { R1216 += 1, R1172 += 1, R662 += 1, R664 += 1 };
  s7 -> s7 [76, 65535] { R1216 += 1, R1172 += 1, R662 += 1, R664 += 1 };
  s11 -> s11 [0, 69] { R1216 += 1, R1172 += 1, R662 += 1, R664 += 1 };
  s11 -> s12 [0, 69] { R1216 += 1, R1172 += 1, R662 += 1 };
  s11 -> s13 [70, 70] { R1216 += 1, R1172 += 1, R662 += 1 };
  s11 -> s14 [70, 70] { R1216 += 1, R1172 += 1, R662 += 1, R664 += 1 };
  s11 -> s15 [70, 70] { R1216 += 1, R1172 += 1, R662 += 1, R664 += 1 };
  s11 -> s16 [70, 70] { R1216 += 1, R1172 += 1, R662 += 1 };
  s11 -> s11 [71, 65535] { R1216 += 1, R1172 += 1, R662 += 1, R664 += 1 };
  s11 -> s12 [71, 65535] { R1216 += 1, R1172 += 1, R662 += 1 };
  s12 -> s12 [0, 69] { R1216 += 1, R1172 += 1, R662 += 1 };
  s12 -> s12 [0, 65535] { R1216 += 1 };
  s12 -> s17 [0, 65535];
  s12 -> s13 [70, 70] { R1216 += 1, R1172 += 1, R662 += 1 };
  s12 -> s16 [70, 70] { R1216 += 1, R1172 += 1, R662 += 1 };
  s12 -> s12 [71, 65535] { R1216 += 1, R1172 += 1, R662 += 1 };
  s13 -> s13 [0, 65535] { R1216 += 1, R1172 += 1, R662 += 1 };
  s13 -> s18 [0, 65535] { R1216 += 1 };
  s13 -> s17 [0, 65535];
  s15 -> s13 [0, 65535] { R1216 += 1, R1172 += 1, R662 += 1 };
  s15 -> s15 [0, 65535] { R1216 += 1, R1172 += 1, R662 += 1, R664 += 1 };
  s16 -> s17 [0, 65535];
  s16 -> s16 [0, 65535] { R1216 += 1 };
  s17 -> s17 [0, 65535];
  s18 -> s18 [0, 65535] { R1216 += 1 };
  s18 -> s17 [0, 65535];
  accepting s17, s16, s12, s13, s18;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 69] { R1218 += 1, R1174 += 1, R1110 += 1, R1111 += 1, R1112 += 1 };
  s0 -> s2 [0, 69] { R1218 += 1, R1174 += 1, R1109 += 1, R1110 += 1 };
  s0 -> s3 [0, 65535] { R1218 += 1, R1173 += 1, R1174 += 1 };
  s0 -> s0 [0, 65535] { R1217 += 1, R1218 += 1 };
  s0 -> s4 [70, 70] { R1218 += 1, R1174 += 1, R1109 += 1, R1110 += 1 };
  s0 -> s5 [70, 70] { R1218 += 1, R1174 += 1, R1109 += 1, R1110 += 1 };
  s0 -> s6 [70, 70] { R1218 += 1, R1174 += 1, R1110 += 1, R1111 += 1, R1112 += 1 };
  s0 -> s7 [70, 70] { R1218 += 1, R1174 += 1, R1110 += 1, R1111 += 1, R1112 += 1 };
  s0 -> s1 [71, 65535] { R1218 += 1, R1174 += 1, R1110 += 1, R1111 += 1, R1112 += 1 };
  s0 -> s2 [71, 65535] { R1218 += 1, R1174 += 1, R1109 += 1, R1110 += 1 };
  s1 -> s1 [0, 69] { R1218 += 1, R1174 += 1, R1110 += 1, R1111 += 1, R1112 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s1 [0, 65535] { R1218 += 1 };
  s1 -> s6 [70, 70] { R1218 += 1, R1174 += 1, R1110 += 1, R1111 += 1, R1112 += 1 };
  s1 -> s7 [70, 70] { R1218 += 1, R1174 += 1, R1110 += 1, R1111 += 1, R1112 += 1 };
  s1 -> s1 [71, 65535] { R1218 += 1, R1174 += 1, R1110 += 1, R1111 += 1, R1112 += 1 };
  s2 -> s1 [0, 69] { R1218 += 1, R1174 += 1, R1110 += 1, R1111 += 1, R1112 += 1 };
  s2 -> s2 [0, 69] { R1218 += 1, R1174 += 1, R1109 += 1, R1110 += 1 };
  s2 -> s4 [70, 70] { R1218 += 1, R1174 += 1, R1109 += 1, R1110 += 1 };
  s2 -> s5 [70, 70] { R1218 += 1, R1174 += 1, R1109 += 1, R1110 += 1 };
  s2 -> s6 [70, 70] { R1218 += 1, R1174 += 1, R1110 += 1, R1111 += 1, R1112 += 1 };
  s2 -> s7 [70, 70] { R1218 += 1, R1174 += 1, R1110 += 1, R1111 += 1, R1112 += 1 };
  s2 -> s1 [71, 65535] { R1218 += 1, R1174 += 1, R1110 += 1, R1111 += 1, R1112 += 1 };
  s2 -> s2 [71, 65535] { R1218 += 1, R1174 += 1, R1109 += 1, R1110 += 1 };
  s3 -> s1 [0, 69] { R1218 += 1, R1174 += 1, R1110 += 1, R1111 += 1, R1112 += 1 };
  s3 -> s2 [0, 69] { R1218 += 1, R1174 += 1, R1109 += 1, R1110 += 1 };
  s3 -> s3 [0, 65535] { R1218 += 1, R1173 += 1, R1174 += 1 };
  s3 -> s4 [70, 70] { R1218 += 1, R1174 += 1, R1109 += 1, R1110 += 1 };
  s3 -> s5 [70, 70] { R1218 += 1, R1174 += 1, R1109 += 1, R1110 += 1 };
  s3 -> s6 [70, 70] { R1218 += 1, R1174 += 1, R1110 += 1, R1111 += 1, R1112 += 1 };
  s3 -> s7 [70, 70] { R1218 += 1, R1174 += 1, R1110 += 1, R1111 += 1, R1112 += 1 };
  s3 -> s1 [71, 65535] { R1218 += 1, R1174 += 1, R1110 += 1, R1111 += 1, R1112 += 1 };
  s3 -> s2 [71, 65535] { R1218 += 1, R1174 += 1, R1109 += 1, R1110 += 1 };
  s5 -> s5 [0, 65535] { R1218 += 1, R1174 += 1, R1109 += 1, R1110 += 1 };
  s5 -> s6 [0, 65535] { R1218 += 1, R1174 += 1, R1110 += 1, R1111 += 1, R1112 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R1218 += 1, R1174 += 1, R1110 += 1, R1111 += 1, R1112 += 1 };
  s6 -> s9 [0, 65535] { R1218 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R1218 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R1218 += 1 };
  accepting s8, s9, s6, s1, s7;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [102, 102];
  accepting s1;
};
};
constraint R3 = R1218 && R23 - R1218 = -1 && R24 = R1218 && R25 - R1218 = -1 && R26 = R1218 && R27 = 0 && R28 = 1 && R29 = 0 && R30 = 1 && R45 + R84 + R83 + -1*R666 + -1*R662 - R66 = 0 && R49 + R89 + R87 = 0 && R50 + R90 + R88 + -1*R666 + -1*R662 - R66 = 0 && R55 + R96 + R93 + -1*R668 + -1*R664 - R68 = 0 && R65 + R665 + R661 = 0 && R67 + R667 + R663 = 0 && R1159 = 0 && R1160 = 0 && R1165 = 0 && R1166 = 0 && R1171 = 0 && R1172 = 0 && R1173 = 0 && R1174 = 0 && R1175 = 0 && R1176 = R1218 && R1177 = 0 && R1178 = R1218 && R1179 = 0 && R1180 = R1218 && R1181 = 0 && R1182 = R1218 && R1183 = 0 && R1184 = R1218 && R1185 = 0 && R1186 = R1218 && R1187 = 0 && R1188 = R1218 && R1189 = 0 && R1190 = R1218 && R1191 = 0 && R1192 = R1218 && R1193 = 0 && R1194 = R1218 && R1195 = 0 && R1196 = R1218 && R1197 = 0 && R1198 = R1218 && R1199 = 0 && R1200 = R1218 && R1201 = 0 && R1202 = R1218 && R1203 = 0 && R1204 = R1218 && R1205 = 0 && R1206 = R1218 && R1207 = 0 && R1208 = R1218 && R1209 = 0 && R1210 = R1218 && R1211 = 0 && R1212 = R1218 && R1213 = 0 && R1214 = R1218 && R1215 = 0 && R1216 = R1218 && R1217 = 0 && -1 < R2 && R12 < 1 && R15 < 1 && R16 < 1 && R47 + R86 + R85 < 1 && R61 + R102 + R99 < 1 && -1*R666 + -1*R662 - R66 < 1 && -1*R668 + -1*R664 - R68 < 1 && 0 < R1218 && (R2 != 0 || R20 = 0 || (R1119 = 0 && R1120 = 0)) && (R2 != 0 || R20 = 0 || (R1121 = 0 && R1122 = 0)) && (R2 != 0 || R20 = 0 || (R1123 = 0 && R1124 = 0)) && (R2 != 0 || R20 = 0 || (R1125 = 0 && R1126 = 0)) && (R2 != 0 || R20 = 0 || (R1127 = 0 && R1128 = 0)) && (R2 != 0 || R20 = 0 || (R1129 = 0 && R1130 = 0)) && (R2 != 0 || R20 = 0 || (R1131 = 0 && R1132 = 0)) && (R2 != 0 || R20 = 0 || (R1133 = 0 && R1134 = 0)) && (R2 != 0 || R20 = 0 || (R1135 = 0 && R1136 = 0)) && (R2 != 0 || R20 = 0 || (R1137 = 0 && R1138 = 0)) && (R53 + R94 + R91 != 0 || R54 + R95 + R92 + -1*R666 + -1*R662 - R66 = 0 || R66 + R666 + R662 < 1) && (R59 + R100 + R97 != 0 || R60 + R101 + R98 + -1*R666 + -1*R662 - R66 = 0 || R66 + R666 + R662 < 1) && (R66 + R666 + R662 != 0 || ((R53 + R94 + R91 != 0 || R54 + R95 + R92 = 0 || R68 + R668 + R664 < 1) && (R53 + R94 + R91 = 0 || R68 + R668 + R664 < 1))) && (R66 + R666 + R662 != 0 || ((R59 + R100 + R97 != 0 || R60 + R101 + R98 = 0 || R68 + R668 + R664 < 1) && (R59 + R100 + R97 = 0 || R68 + R668 + R664 < 1))) && (R66 + R666 + R662 != 0 || ((R73 + R1114 + R1109 != 0 || R74 + R1115 + R1110 = 0 || R68 + R668 + R664 < 1) && (R73 + R1114 + R1109 = 0 || R68 + R668 + R664 < 1))) && (R68 + R668 + R664 != 0 || R77 + R1118 + R1113 = 0 || (R75 + R1116 + R1111 = 0 && R76 + R1117 + R1112 = 0)) && (R73 + R1114 + R1109 != 0 || R66 + R666 + R662 + -1*R1115 + -1*R1110 - R74 = 0 || R66 + R666 + R662 < 1) && (R75 + R1116 + R1111 != 0 || R68 + R668 + R664 + -1*R1117 + -1*R1112 - R76 = 0 || R68 + R668 + R664 < 1) && (R1119 != 0 || R2 = R1120 || R2 < 1) && (R1121 != 0 || R2 = R1122 || R2 < 1) && (R1123 != 0 || R2 = R1124 || R2 < 1) && (R1125 != 0 || R2 = R1126 || R2 < 1) && (R1127 != 0 || R2 = R1128 || R2 < 1) && (R1129 != 0 || R2 = R1130 || R2 < 1) && (R1131 != 0 || R2 = R1132 || R2 < 1) && (R1133 != 0 || R2 = R1134 || R2 < 1) && (R1135 != 0 || R2 = R1136 || R2 < 1) && (R1137 != 0 || R2 = R1138 || R2 < 1) && (R21 = 0 || (R1157 = 0 && R1158 = 0)) && (R21 = 0 || (R1161 = 0 && R1162 = 0)) && (R21 = 0 || (R1163 = 0 && R1164 = 0)) && (R21 = 0 || (R1167 = 0 && R1168 = 0)) && (R21 = 0 || (R1169 = 0 && R1170 = 0)) && (R22 = 0 || (R1139 = 0 && R1140 = 0)) && (R22 = 0 || (R1141 = 0 && R1142 = 0)) && (R22 = 0 || (R1143 = 0 && R1144 = 0)) && (R22 = 0 || (R1145 = 0 && R1146 = 0)) && (R22 = 0 || (R1147 = 0 && R1148 = 0)) && (R22 = 0 || (R1149 = 0 && R1150 = 0)) && (R22 = 0 || (R1151 = 0 && R1152 = 0)) && (R22 = 0 || (R1153 = 0 && R1154 = 0)) && (R22 = 0 || (R1155 = 0 && R1156 = 0)) && (R53 + R94 + R91 = 0 || R66 + R666 + R662 < 1) && (R59 + R100 + R97 = 0 || R66 + R666 + R662 < 1) && (R73 + R1114 + R1109 = 0 || R66 + R666 + R662 < 1) && (R75 + R1116 + R1111 = 0 || R68 + R668 + R664 < 1) && (R1119 = 0 || R2 < 1) && (R1121 = 0 || R2 < 1) && (R1123 = 0 || R2 < 1) && (R1125 = 0 || R2 < 1) && (R1127 = 0 || R2 < 1) && (R1129 = 0 || R2 < 1) && (R1131 = 0 || R2 < 1) && (R1133 = 0 || R2 < 1) && (R1135 = 0 || R2 < 1) && (R1137 = 0 || R2 < 1);
// End of Parikh automata intersection problem
