// Parikh automata intersection problem, generated by OSTRICH+
counter int R100, R101, R102, R12, R15, R16, R2, R20, R21, R22, R23, R2335, R2336, R2337, R2338, R2339, R2340, R2341, R2342, R24, R25, R2563, R2564, R2565, R2566, R2567, R2568, R2569, R2570, R2571, R2572, R2573, R2574, R2575, R2576, R2577, R2578, R2579, R2580, R2581, R2582, R2583, R2584, R2585, R2586, R2587, R2588, R2589, R2590, R2591, R2592, R2593, R2594, R2595, R2596, R2597, R2598, R2599, R26, R2600, R2601, R2602, R2603, R2604, R2605, R2606, R2607, R2608, R2609, R2610, R2611, R2612, R2613, R2614, R2615, R2616, R2617, R2618, R2619, R2620, R2621, R2622, R2623, R2624, R2625, R2626, R2627, R2628, R2629, R2630, R2631, R2632, R2633, R2634, R2635, R2636, R2637, R2638, R2639, R2640, R2641, R2642, R2643, R2644, R2645, R2646, R2647, R2648, R2649, R2650, R2651, R2652, R2653, R2654, R2655, R2656, R2657, R2658, R2659, R2660, R2661, R2662, R2663, R2664, R2665, R2666, R2667, R2668, R2669, R2670, R2671, R2672, R27, R28, R29, R3, R30, R4, R45, R47, R49, R5, R50, R53, R54, R55, R59, R60, R61, R65, R66, R67, R68, R73, R74, R75, R76, R77, R83, R84, R85, R86, R87, R88, R89, R90, R91, R92, R93, R94, R95, R96, R97, R98, R99;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [70, 70];
  s0 -> s0 [71, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [70, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R15 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 69];
  s0 -> s0 [0, 65535] { R16 += 1 };
  s0 -> s2 [70, 70];
  s0 -> s1 [71, 65535];
  s1 -> s1 [0, 69];
  s1 -> s2 [70, 70];
  s1 -> s1 [71, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R24 += 1 };
  s0 -> s0 [0, 65535] { R23 += 1, R24 += 1 };
  s0 -> s2 [9, 13] { R24 += 1 };
  s0 -> s1 [14, 31] { R24 += 1 };
  s0 -> s2 [32, 32] { R24 += 1 };
  s0 -> s1 [33, 65535] { R24 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R24 += 1 };
  s2 -> s1 [0, 65535] { R24 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R25 += 1, R26 += 1 };
  s1 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R28 += 1 };
  s0 -> s0 [0, 65535] { R27 += 1, R28 += 1 };
  s0 -> s2 [9, 13] { R28 += 1 };
  s0 -> s1 [14, 31] { R28 += 1 };
  s0 -> s2 [32, 32] { R28 += 1 };
  s0 -> s1 [33, 65535] { R28 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R28 += 1 };
  s2 -> s1 [0, 65535] { R28 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R29 += 1, R30 += 1 };
  s1 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R2593 += 1, R2594 += 1 };
  s0 -> s1 [0, 65535] { R2594 += 1, R22 += 1 };
  s1 -> s1 [0, 65535] { R2594 += 1, R22 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 69] { R2596 += 1 };
  s0 -> s0 [0, 65535] { R2595 += 1, R2596 += 1 };
  s0 -> s2 [70, 70] { R2596 += 1 };
  s0 -> s3 [70, 70] { R2596 += 1 };
  s0 -> s1 [76, 65535] { R2596 += 1 };
  s1 -> s1 [0, 69] { R2596 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R2596 += 1 };
  s1 -> s3 [70, 70] { R2596 += 1 };
  s1 -> s1 [76, 65535] { R2596 += 1 };
  s2 -> s2 [0, 70] { R2596 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [76, 65535] { R2596 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 69] { R2598 += 1, R45 += 1 };
  s0 -> s0 [0, 65535] { R2597 += 1, R2598 += 1 };
  s0 -> s2 [70, 70] { R2598 += 1, R45 += 1 };
  s0 -> s3 [70, 70] { R2598 += 1, R45 += 1 };
  s0 -> s1 [71, 65535] { R2598 += 1, R45 += 1 };
  s1 -> s1 [0, 69] { R2598 += 1, R45 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R2598 += 1, R45 += 1 };
  s1 -> s3 [70, 70] { R2598 += 1, R45 += 1 };
  s1 -> s1 [71, 65535] { R2598 += 1, R45 += 1 };
  s2 -> s2 [0, 65535] { R2598 += 1, R45 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 69] { R2600 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R2599 += 1, R2600 += 1 };
  s0 -> s2 [70, 70] { R2600 += 1, R47 += 1 };
  s0 -> s3 [70, 70] { R2600 += 1, R47 += 1 };
  s0 -> s1 [71, 65535] { R2600 += 1, R47 += 1 };
  s1 -> s1 [0, 69] { R2600 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R2600 += 1, R47 += 1 };
  s1 -> s3 [70, 70] { R2600 += 1, R47 += 1 };
  s1 -> s1 [71, 65535] { R2600 += 1, R47 += 1 };
  s2 -> s2 [0, 65535] { R2600 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 69] { R2602 += 1, R49 += 1, R50 += 1 };
  s0 -> s0 [0, 65535] { R2601 += 1, R2602 += 1 };
  s0 -> s2 [70, 70] { R2602 += 1, R49 += 1, R50 += 1 };
  s0 -> s3 [70, 70] { R2602 += 1, R49 += 1, R50 += 1 };
  s0 -> s1 [71, 65535] { R2602 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 69] { R2602 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R2602 += 1, R49 += 1, R50 += 1 };
  s1 -> s3 [70, 70] { R2602 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [71, 65535] { R2602 += 1, R49 += 1, R50 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2602 += 1, R49 += 1, R50 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 69] { R2604 += 1, R53 += 1, R54 += 1 };
  s0 -> s0 [0, 65535] { R2603 += 1, R2604 += 1 };
  s0 -> s2 [70, 70] { R2604 += 1, R53 += 1, R54 += 1 };
  s0 -> s3 [70, 70] { R2604 += 1, R53 += 1, R54 += 1 };
  s0 -> s1 [71, 65535] { R2604 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 69] { R2604 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R2604 += 1, R53 += 1, R54 += 1 };
  s1 -> s3 [70, 70] { R2604 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [71, 65535] { R2604 += 1, R53 += 1, R54 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2604 += 1, R53 += 1, R54 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 69] { R2606 += 1, R59 += 1, R60 += 1 };
  s0 -> s0 [0, 65535] { R2605 += 1, R2606 += 1 };
  s0 -> s2 [70, 70] { R2606 += 1, R59 += 1, R60 += 1 };
  s0 -> s3 [70, 70] { R2606 += 1, R59 += 1, R60 += 1 };
  s0 -> s1 [71, 65535] { R2606 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 69] { R2606 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R2606 += 1, R59 += 1, R60 += 1 };
  s1 -> s3 [70, 70] { R2606 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [71, 65535] { R2606 += 1, R59 += 1, R60 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R2606 += 1, R59 += 1, R60 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 69] { R2608 += 1, R65 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R2607 += 1, R2608 += 1 };
  s0 -> s2 [70, 70] { R2608 += 1, R65 += 1, R66 += 1 };
  s0 -> s3 [70, 70] { R2608 += 1, R65 += 1, R66 += 1 };
  s0 -> s1 [71, 65535] { R2608 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 69] { R2608 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R2608 += 1, R65 += 1, R66 += 1 };
  s1 -> s3 [70, 70] { R2608 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [71, 65535] { R2608 += 1, R65 += 1, R66 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R2608 += 1, R65 += 1, R66 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 69] { R2610 += 1, R73 += 1, R74 += 1 };
  s0 -> s0 [0, 65535] { R2609 += 1, R2610 += 1 };
  s0 -> s2 [70, 70] { R2610 += 1, R73 += 1, R74 += 1 };
  s0 -> s3 [70, 70] { R2610 += 1, R73 += 1, R74 += 1 };
  s0 -> s1 [71, 65535] { R2610 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 69] { R2610 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R2610 += 1, R73 += 1, R74 += 1 };
  s1 -> s3 [70, 70] { R2610 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [71, 65535] { R2610 += 1, R73 += 1, R74 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2610 += 1, R73 += 1, R74 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 69] { R2630 += 1 };
  s0 -> s0 [0, 65535] { R2629 += 1, R2630 += 1 };
  s0 -> s2 [70, 70] { R2630 += 1 };
  s0 -> s1 [71, 65535] { R2630 += 1 };
  s1 -> s1 [0, 69] { R2630 += 1 };
  s1 -> s2 [70, 70] { R2630 += 1 };
  s1 -> s1 [71, 65535] { R2630 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R2630 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R2631 += 1, R2632 += 1 };
  s0 -> s1 [0, 65535] { R2632 += 1, R2 += 1 };
  s1 -> s1 [0, 65535] { R2632 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 69] { R2634 += 1 };
  s0 -> s2 [0, 65535] { R2634 += 1, R12 += 1 };
  s0 -> s0 [0, 65535] { R2633 += 1, R2634 += 1 };
  s0 -> s3 [70, 70] { R2634 += 1 };
  s0 -> s1 [71, 65535] { R2634 += 1 };
  s1 -> s1 [0, 69] { R2634 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [70, 70] { R2634 += 1 };
  s1 -> s1 [71, 65535] { R2634 += 1 };
  s2 -> s1 [0, 69] { R2634 += 1 };
  s2 -> s2 [0, 65535] { R2634 += 1, R12 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [70, 70] { R2634 += 1 };
  s2 -> s1 [71, 65535] { R2634 += 1 };
  s3 -> s3 [0, 65535] { R2634 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 69] { R2636 += 1, R2574 += 1 };
  s0 -> s0 [0, 65535] { R2635 += 1, R2636 += 1 };
  s0 -> s2 [0, 65535] { R2636 += 1, R2573 += 1, R2574 += 1 };
  s0 -> s1 [71, 65535] { R2636 += 1, R2574 += 1 };
  s1 -> s1 [0, 69] { R2636 += 1, R2574 += 1 };
  s1 -> s1 [0, 65535] { R2636 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [71, 65535] { R2636 += 1, R2574 += 1 };
  s2 -> s1 [0, 69] { R2636 += 1, R2574 += 1 };
  s2 -> s2 [0, 65535] { R2636 += 1, R2573 += 1, R2574 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [71, 65535] { R2636 += 1, R2574 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R2638 += 1, R2576 += 1, R20 += 1 };
  s0 -> s0 [0, 65535] { R2637 += 1, R2638 += 1 };
  s0 -> s2 [0, 65535] { R2638 += 1, R2575 += 1, R2576 += 1 };
  s1 -> s1 [0, 65535] { R2638 += 1, R2576 += 1, R20 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R2638 += 1 };
  s2 -> s1 [0, 65535] { R2638 += 1, R2576 += 1, R20 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R2638 += 1, R2575 += 1, R2576 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2638 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 70] { R2640 += 1, R2578 += 1 };
  s0 -> s0 [0, 65535] { R2639 += 1, R2640 += 1 };
  s0 -> s2 [0, 65535] { R2640 += 1, R2577 += 1, R2578 += 1 };
  s0 -> s1 [75, 65535] { R2640 += 1, R2578 += 1 };
  s1 -> s1 [0, 70] { R2640 += 1, R2578 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R2640 += 1 };
  s1 -> s1 [75, 65535] { R2640 += 1, R2578 += 1 };
  s2 -> s1 [0, 70] { R2640 += 1, R2578 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R2640 += 1, R2577 += 1, R2578 += 1 };
  s2 -> s1 [75, 65535] { R2640 += 1, R2578 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R2642 += 1, R2579 += 1, R2580 += 1 };
  s0 -> s2 [0, 65535] { R2642 += 1, R2580 += 1, R84 += 1 };
  s0 -> s0 [0, 65535] { R2641 += 1, R2642 += 1 };
  s1 -> s1 [0, 65535] { R2642 += 1, R2579 += 1, R2580 += 1 };
  s1 -> s2 [0, 65535] { R2642 += 1, R2580 += 1, R84 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2642 += 1, R2580 += 1, R84 += 1 };
  s2 -> s3 [0, 65535] { R2642 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2642 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 74] { R2644 += 1, R2582 += 1 };
  s0 -> s0 [0, 65535] { R2643 += 1, R2644 += 1 };
  s0 -> s2 [0, 65535] { R2644 += 1, R2582 += 1, R86 += 1 };
  s0 -> s3 [0, 65535] { R2644 += 1, R2581 += 1, R2582 += 1 };
  s0 -> s1 [76, 65535] { R2644 += 1, R2582 += 1 };
  s1 -> s1 [0, 74] { R2644 += 1, R2582 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R2644 += 1 };
  s1 -> s1 [76, 65535] { R2644 += 1, R2582 += 1 };
  s2 -> s1 [0, 74] { R2644 += 1, R2582 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R2644 += 1 };
  s2 -> s2 [0, 65535] { R2644 += 1, R2582 += 1, R86 += 1 };
  s2 -> s1 [76, 65535] { R2644 += 1, R2582 += 1 };
  s3 -> s1 [0, 74] { R2644 += 1, R2582 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R2644 += 1, R2582 += 1, R86 += 1 };
  s3 -> s3 [0, 65535] { R2644 += 1, R2581 += 1, R2582 += 1 };
  s3 -> s1 [76, 65535] { R2644 += 1, R2582 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2644 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s0 [0, 65535] { R2645 += 1, R2646 += 1 };
  s0 -> s1 [0, 65535] { R2646 += 1, R2584 += 1 };
  s0 -> s2 [0, 65535] { R2646 += 1, R2583 += 1, R2584 += 1 };
  s0 -> s3 [0, 65535] { R2646 += 1, R2584 += 1, R90 += 1 };
  s1 -> s4 [0, 65535] { R2646 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R2646 += 1, R2584 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R2646 += 1, R2584 += 1 };
  s2 -> s2 [0, 65535] { R2646 += 1, R2583 += 1, R2584 += 1 };
  s2 -> s3 [0, 65535] { R2646 += 1, R2584 += 1, R90 += 1 };
  s3 -> s4 [0, 65535] { R2646 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [0, 65535] { R2646 += 1, R2584 += 1 };
  s3 -> s3 [0, 65535] { R2646 += 1, R2584 += 1, R90 += 1 };
  s4 -> s4 [0, 65535] { R2646 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R2648 += 1, R2586 += 1, R95 += 1, R96 += 1 };
  s0 -> s2 [0, 65535] { R2648 += 1, R2586 += 1, R94 += 1, R95 += 1 };
  s0 -> s0 [0, 65535] { R2647 += 1, R2648 += 1 };
  s0 -> s3 [0, 65535] { R2648 += 1, R2585 += 1, R2586 += 1 };
  s1 -> s1 [0, 65535] { R2648 += 1, R2586 += 1, R95 += 1, R96 += 1 };
  s1 -> s5 [0, 65535] { R2648 += 1 };
  s1 -> s6 [0, 65535] { R2648 += 1, R2586 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R2648 += 1, R2586 += 1, R95 += 1, R96 += 1 };
  s2 -> s2 [0, 65535] { R2648 += 1, R2586 += 1, R94 += 1, R95 += 1 };
  s2 -> s5 [0, 65535] { R2648 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R2648 += 1, R2586 += 1, R95 += 1, R96 += 1 };
  s3 -> s2 [0, 65535] { R2648 += 1, R2586 += 1, R94 += 1, R95 += 1 };
  s3 -> s3 [0, 65535] { R2648 += 1, R2585 += 1, R2586 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2648 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R2648 += 1 };
  s6 -> s6 [0, 65535] { R2648 += 1, R2586 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 74] { R2650 += 1, R2588 += 1, R101 += 1 };
  s0 -> s0 [0, 65535] { R2649 += 1, R2650 += 1 };
  s0 -> s2 [0, 65535] { R2650 += 1, R2588 += 1, R101 += 1, R102 += 1 };
  s0 -> s3 [0, 65535] { R2650 += 1, R2588 += 1, R100 += 1, R101 += 1 };
  s0 -> s4 [0, 65535] { R2650 += 1, R2587 += 1, R2588 += 1 };
  s0 -> s1 [76, 65535] { R2650 += 1, R2588 += 1, R101 += 1 };
  s1 -> s1 [0, 74] { R2650 += 1, R2588 += 1, R101 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R2650 += 1 };
  s1 -> s1 [0, 65535] { R2650 += 1, R2588 += 1 };
  s1 -> s1 [76, 65535] { R2650 += 1, R2588 += 1, R101 += 1 };
  s2 -> s1 [0, 74] { R2650 += 1, R2588 += 1, R101 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2650 += 1, R2588 += 1, R101 += 1, R102 += 1 };
  s2 -> s6 [0, 65535] { R2650 += 1 };
  s2 -> s7 [0, 65535] { R2650 += 1, R2588 += 1 };
  s2 -> s1 [76, 65535] { R2650 += 1, R2588 += 1, R101 += 1 };
  s3 -> s1 [0, 74] { R2650 += 1, R2588 += 1, R101 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R2650 += 1, R2588 += 1, R101 += 1, R102 += 1 };
  s3 -> s6 [0, 65535] { R2650 += 1 };
  s3 -> s3 [0, 65535] { R2650 += 1, R2588 += 1, R100 += 1, R101 += 1 };
  s3 -> s1 [76, 65535] { R2650 += 1, R2588 += 1, R101 += 1 };
  s4 -> s1 [0, 74] { R2650 += 1, R2588 += 1, R101 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s2 [0, 65535] { R2650 += 1, R2588 += 1, R101 += 1, R102 += 1 };
  s4 -> s3 [0, 65535] { R2650 += 1, R2588 += 1, R100 += 1, R101 += 1 };
  s4 -> s4 [0, 65535] { R2650 += 1, R2587 += 1, R2588 += 1 };
  s4 -> s1 [76, 65535] { R2650 += 1, R2588 += 1, R101 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2650 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R2650 += 1 };
  s7 -> s7 [0, 65535] { R2650 += 1, R2588 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 74] { R2652 += 1, R2590 += 1, R2340 += 1, R2342 += 1 };
  s0 -> s0 [0, 65535] { R2651 += 1, R2652 += 1 };
  s0 -> s2 [0, 65535] { R2652 += 1, R2589 += 1, R2590 += 1 };
  s0 -> s3 [75, 75] { R2652 += 1, R2590 += 1, R2340 += 1, R2342 += 1 };
  s0 -> s1 [76, 65535] { R2652 += 1, R2590 += 1, R2340 += 1, R2342 += 1 };
  s1 -> s1 [0, 74] { R2652 += 1, R2590 += 1, R2340 += 1, R2342 += 1 };
  s1 -> s3 [75, 75] { R2652 += 1, R2590 += 1, R2340 += 1, R2342 += 1 };
  s1 -> s1 [76, 65535] { R2652 += 1, R2590 += 1, R2340 += 1, R2342 += 1 };
  s2 -> s1 [0, 74] { R2652 += 1, R2590 += 1, R2340 += 1, R2342 += 1 };
  s2 -> s2 [0, 65535] { R2652 += 1, R2589 += 1, R2590 += 1 };
  s2 -> s3 [75, 75] { R2652 += 1, R2590 += 1, R2340 += 1, R2342 += 1 };
  s2 -> s1 [76, 65535] { R2652 += 1, R2590 += 1, R2340 += 1, R2342 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2652 += 1, R2590 += 1, R2340 += 1, R2342 += 1 };
  s3 -> s5 [0, 65535] { R2652 += 1 };
  s3 -> s6 [0, 65535] { R2652 += 1, R2590 += 1, R2340 += 1 };
  s3 -> s7 [0, 65535] { R2652 += 1, R2590 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2652 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R2652 += 1 };
  s6 -> s6 [0, 65535] { R2652 += 1, R2590 += 1, R2340 += 1 };
  s6 -> s7 [0, 65535] { R2652 += 1, R2590 += 1 };
  s7 -> s4 [0, 65535];
  s7 -> s5 [0, 65535] { R2652 += 1 };
  s7 -> s7 [0, 65535] { R2652 += 1, R2590 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 65535] { R2654 += 1, R2592 += 1, R2568 += 1, R2569 += 1 };
  s0 -> s2 [0, 65535] { R2654 += 1, R2592 += 1, R2569 += 1, R2570 += 1, R2571 += 1 };
  s0 -> s0 [0, 65535] { R2653 += 1, R2654 += 1 };
  s0 -> s3 [0, 65535] { R2654 += 1, R2592 += 1, R2569 += 1, R2571 += 1, R2572 += 1 };
  s0 -> s4 [0, 65535] { R2654 += 1, R2591 += 1, R2592 += 1 };
  s1 -> s1 [0, 65535] { R2654 += 1, R2592 += 1, R2568 += 1, R2569 += 1 };
  s1 -> s2 [0, 65535] { R2654 += 1, R2592 += 1, R2569 += 1, R2570 += 1, R2571 += 1 };
  s1 -> s3 [0, 65535] { R2654 += 1, R2592 += 1, R2569 += 1, R2571 += 1, R2572 += 1 };
  s1 -> s8 [0, 65535] { R2654 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2654 += 1, R2592 += 1, R2569 += 1, R2570 += 1, R2571 += 1 };
  s2 -> s7 [0, 65535] { R2654 += 1, R2592 += 1 };
  s2 -> s3 [0, 65535] { R2654 += 1, R2592 += 1, R2569 += 1, R2571 += 1, R2572 += 1 };
  s2 -> s8 [0, 65535] { R2654 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R2654 += 1, R2592 += 1, R2569 += 1 };
  s3 -> s7 [0, 65535] { R2654 += 1, R2592 += 1 };
  s3 -> s3 [0, 65535] { R2654 += 1, R2592 += 1, R2569 += 1, R2571 += 1, R2572 += 1 };
  s3 -> s8 [0, 65535] { R2654 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s1 [0, 65535] { R2654 += 1, R2592 += 1, R2568 += 1, R2569 += 1 };
  s4 -> s2 [0, 65535] { R2654 += 1, R2592 += 1, R2569 += 1, R2570 += 1, R2571 += 1 };
  s4 -> s3 [0, 65535] { R2654 += 1, R2592 += 1, R2569 += 1, R2571 += 1, R2572 += 1 };
  s4 -> s4 [0, 65535] { R2654 += 1, R2591 += 1, R2592 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2654 += 1, R2592 += 1, R2569 += 1 };
  s6 -> s7 [0, 65535] { R2654 += 1, R2592 += 1 };
  s6 -> s8 [0, 65535] { R2654 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R2654 += 1, R2592 += 1 };
  s7 -> s8 [0, 65535] { R2654 += 1 };
  s7 -> s5 [0, 65535];
  s8 -> s8 [0, 65535] { R2654 += 1 };
  s8 -> s5 [0, 65535];
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R2656 += 1, R2611 += 1, R2612 += 1 };
  s0 -> s0 [0, 65535] { R2655 += 1, R2656 += 1 };
  s0 -> s2 [0, 65535] { R2656 += 1, R2612 += 1, R21 += 1 };
  s1 -> s1 [0, 65535] { R2656 += 1, R2611 += 1, R2612 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R2656 += 1, R2612 += 1, R21 += 1 };
  s2 -> s3 [0, 65535] { R2656 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2656 += 1, R2612 += 1, R21 += 1 };
  s3 -> s3 [0, 65535] { R2656 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 69] { R2658 += 1, R2614 += 1 };
  s0 -> s2 [0, 65535] { R2658 += 1, R2613 += 1, R2614 += 1 };
  s0 -> s0 [0, 65535] { R2657 += 1, R2658 += 1 };
  s0 -> s3 [70, 70] { R2658 += 1, R2614 += 1 };
  s0 -> s4 [70, 70] { R2658 += 1, R2614 += 1 };
  s0 -> s5 [75, 75] { R2658 += 1, R2614 += 1 };
  s0 -> s1 [76, 65535] { R2658 += 1, R2614 += 1 };
  s1 -> s1 [0, 69] { R2658 += 1, R2614 += 1 };
  s1 -> s3 [70, 70] { R2658 += 1, R2614 += 1 };
  s1 -> s4 [70, 70] { R2658 += 1, R2614 += 1 };
  s1 -> s5 [75, 75] { R2658 += 1, R2614 += 1 };
  s1 -> s1 [76, 65535] { R2658 += 1, R2614 += 1 };
  s2 -> s1 [0, 69] { R2658 += 1, R2614 += 1 };
  s2 -> s2 [0, 65535] { R2658 += 1, R2613 += 1, R2614 += 1 };
  s2 -> s3 [70, 70] { R2658 += 1, R2614 += 1 };
  s2 -> s4 [70, 70] { R2658 += 1, R2614 += 1 };
  s2 -> s5 [75, 75] { R2658 += 1, R2614 += 1 };
  s2 -> s1 [76, 65535] { R2658 += 1, R2614 += 1 };
  s3 -> s3 [0, 70] { R2658 += 1, R2614 += 1 };
  s3 -> s8 [75, 75] { R2658 += 1, R2614 += 1 };
  s3 -> s3 [76, 65535] { R2658 += 1, R2614 += 1 };
  s5 -> s5 [0, 69] { R2658 += 1, R2614 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R2658 += 1 };
  s5 -> s7 [70, 70] { R2658 += 1, R2614 += 1 };
  s5 -> s8 [70, 70] { R2658 += 1, R2614 += 1 };
  s5 -> s5 [75, 65535] { R2658 += 1, R2614 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R2658 += 1 };
  s8 -> s8 [0, 70] { R2658 += 1, R2614 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R2658 += 1 };
  s8 -> s8 [75, 65535] { R2658 += 1, R2614 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 69] { R2660 += 1, R2616 += 1, R83 += 1 };
  s0 -> s2 [0, 65535] { R2660 += 1, R2615 += 1, R2616 += 1 };
  s0 -> s0 [0, 65535] { R2659 += 1, R2660 += 1 };
  s0 -> s3 [70, 70] { R2660 += 1, R2616 += 1, R83 += 1 };
  s0 -> s4 [70, 70] { R2660 += 1, R2616 += 1, R83 += 1 };
  s0 -> s1 [71, 65535] { R2660 += 1, R2616 += 1, R83 += 1 };
  s1 -> s1 [0, 69] { R2660 += 1, R2616 += 1, R83 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R2660 += 1 };
  s1 -> s3 [70, 70] { R2660 += 1, R2616 += 1, R83 += 1 };
  s1 -> s4 [70, 70] { R2660 += 1, R2616 += 1, R83 += 1 };
  s1 -> s1 [71, 65535] { R2660 += 1, R2616 += 1, R83 += 1 };
  s2 -> s1 [0, 69] { R2660 += 1, R2616 += 1, R83 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2660 += 1, R2615 += 1, R2616 += 1 };
  s2 -> s3 [70, 70] { R2660 += 1, R2616 += 1, R83 += 1 };
  s2 -> s4 [70, 70] { R2660 += 1, R2616 += 1, R83 += 1 };
  s2 -> s1 [71, 65535] { R2660 += 1, R2616 += 1, R83 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R2660 += 1 };
  s3 -> s3 [0, 65535] { R2660 += 1, R2616 += 1, R83 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2660 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2660 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 69] { R2662 += 1, R2618 += 1, R85 += 1 };
  s0 -> s2 [0, 65535] { R2662 += 1, R2617 += 1, R2618 += 1 };
  s0 -> s0 [0, 65535] { R2661 += 1, R2662 += 1 };
  s0 -> s3 [70, 70] { R2662 += 1, R2618 += 1, R85 += 1 };
  s0 -> s4 [70, 70] { R2662 += 1, R2618 += 1, R85 += 1 };
  s0 -> s1 [71, 65535] { R2662 += 1, R2618 += 1, R85 += 1 };
  s1 -> s1 [0, 69] { R2662 += 1, R2618 += 1, R85 += 1 };
  s1 -> s1 [0, 65535] { R2662 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [70, 70] { R2662 += 1, R2618 += 1, R85 += 1 };
  s1 -> s4 [70, 70] { R2662 += 1, R2618 += 1, R85 += 1 };
  s1 -> s1 [71, 65535] { R2662 += 1, R2618 += 1, R85 += 1 };
  s2 -> s1 [0, 69] { R2662 += 1, R2618 += 1, R85 += 1 };
  s2 -> s2 [0, 65535] { R2662 += 1, R2617 += 1, R2618 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [70, 70] { R2662 += 1, R2618 += 1, R85 += 1 };
  s2 -> s4 [70, 70] { R2662 += 1, R2618 += 1, R85 += 1 };
  s2 -> s1 [71, 65535] { R2662 += 1, R2618 += 1, R85 += 1 };
  s3 -> s3 [0, 65535] { R2662 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R2662 += 1 };
  s4 -> s4 [0, 65535] { R2662 += 1, R2618 += 1, R85 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R2662 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 69] { R2664 += 1, R2620 += 1, R88 += 1 };
  s0 -> s2 [0, 69] { R2664 += 1, R2620 += 1, R87 += 1, R88 += 1 };
  s0 -> s3 [0, 65535] { R2664 += 1, R2619 += 1, R2620 += 1 };
  s0 -> s0 [0, 65535] { R2663 += 1, R2664 += 1 };
  s0 -> s4 [70, 70] { R2664 += 1, R2620 += 1, R87 += 1, R88 += 1 };
  s0 -> s5 [70, 70] { R2664 += 1, R2620 += 1, R88 += 1 };
  s0 -> s6 [70, 70] { R2664 += 1, R2620 += 1, R88 += 1 };
  s0 -> s7 [70, 70] { R2664 += 1, R2620 += 1, R87 += 1, R88 += 1 };
  s0 -> s1 [71, 74] { R2664 += 1, R2620 += 1, R88 += 1 };
  s0 -> s2 [71, 65535] { R2664 += 1, R2620 += 1, R87 += 1, R88 += 1 };
  s0 -> s8 [75, 75] { R2664 += 1, R2620 += 1, R88 += 1 };
  s0 -> s1 [76, 65535] { R2664 += 1, R2620 += 1, R88 += 1 };
  s1 -> s1 [0, 69] { R2664 += 1, R2620 += 1, R88 += 1 };
  s1 -> s5 [70, 70] { R2664 += 1, R2620 += 1, R88 += 1 };
  s1 -> s6 [70, 70] { R2664 += 1, R2620 += 1, R88 += 1 };
  s1 -> s1 [71, 74] { R2664 += 1, R2620 += 1, R88 += 1 };
  s1 -> s8 [75, 75] { R2664 += 1, R2620 += 1, R88 += 1 };
  s1 -> s1 [76, 65535] { R2664 += 1, R2620 += 1, R88 += 1 };
  s2 -> s1 [0, 69] { R2664 += 1, R2620 += 1, R88 += 1 };
  s2 -> s2 [0, 69] { R2664 += 1, R2620 += 1, R87 += 1, R88 += 1 };
  s2 -> s4 [70, 70] { R2664 += 1, R2620 += 1, R87 += 1, R88 += 1 };
  s2 -> s5 [70, 70] { R2664 += 1, R2620 += 1, R88 += 1 };
  s2 -> s6 [70, 70] { R2664 += 1, R2620 += 1, R88 += 1 };
  s2 -> s7 [70, 70] { R2664 += 1, R2620 += 1, R87 += 1, R88 += 1 };
  s2 -> s1 [71, 74] { R2664 += 1, R2620 += 1, R88 += 1 };
  s2 -> s2 [71, 65535] { R2664 += 1, R2620 += 1, R87 += 1, R88 += 1 };
  s2 -> s8 [75, 75] { R2664 += 1, R2620 += 1, R88 += 1 };
  s2 -> s1 [76, 65535] { R2664 += 1, R2620 += 1, R88 += 1 };
  s3 -> s1 [0, 69] { R2664 += 1, R2620 += 1, R88 += 1 };
  s3 -> s2 [0, 69] { R2664 += 1, R2620 += 1, R87 += 1, R88 += 1 };
  s3 -> s3 [0, 65535] { R2664 += 1, R2619 += 1, R2620 += 1 };
  s3 -> s4 [70, 70] { R2664 += 1, R2620 += 1, R87 += 1, R88 += 1 };
  s3 -> s5 [70, 70] { R2664 += 1, R2620 += 1, R88 += 1 };
  s3 -> s6 [70, 70] { R2664 += 1, R2620 += 1, R88 += 1 };
  s3 -> s7 [70, 70] { R2664 += 1, R2620 += 1, R87 += 1, R88 += 1 };
  s3 -> s1 [71, 74] { R2664 += 1, R2620 += 1, R88 += 1 };
  s3 -> s2 [71, 65535] { R2664 += 1, R2620 += 1, R87 += 1, R88 += 1 };
  s3 -> s8 [75, 75] { R2664 += 1, R2620 += 1, R88 += 1 };
  s3 -> s1 [76, 65535] { R2664 += 1, R2620 += 1, R88 += 1 };
  s6 -> s6 [0, 74] { R2664 += 1, R2620 += 1, R88 += 1 };
  s6 -> s11 [75, 75] { R2664 += 1, R2620 += 1, R88 += 1 };
  s6 -> s6 [76, 65535] { R2664 += 1, R2620 += 1, R88 += 1 };
  s7 -> s6 [0, 74] { R2664 += 1, R2620 += 1, R88 += 1 };
  s7 -> s7 [0, 65535] { R2664 += 1, R2620 += 1, R87 += 1, R88 += 1 };
  s7 -> s11 [75, 75] { R2664 += 1, R2620 += 1, R88 += 1 };
  s7 -> s6 [76, 65535] { R2664 += 1, R2620 += 1, R88 += 1 };
  s8 -> s8 [0, 69] { R2664 += 1, R2620 += 1, R88 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R2664 += 1 };
  s8 -> s10 [70, 70] { R2664 += 1, R2620 += 1, R88 += 1 };
  s8 -> s11 [70, 70] { R2664 += 1, R2620 += 1, R88 += 1 };
  s8 -> s8 [71, 65535] { R2664 += 1, R2620 += 1, R88 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R2664 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s9 [0, 65535];
  s11 -> s12 [0, 65535] { R2664 += 1 };
  s11 -> s11 [0, 65535] { R2664 += 1, R2620 += 1, R88 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R2664 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 69] { R2666 += 1, R2622 += 1, R91 += 1, R92 += 1 };
  s0 -> s2 [0, 65535] { R2666 += 1, R2621 += 1, R2622 += 1 };
  s0 -> s0 [0, 65535] { R2665 += 1, R2666 += 1 };
  s0 -> s3 [70, 70] { R2666 += 1, R2622 += 1, R91 += 1, R92 += 1 };
  s0 -> s4 [70, 70] { R2666 += 1, R2622 += 1, R91 += 1, R92 += 1 };
  s0 -> s1 [71, 65535] { R2666 += 1, R2622 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 69] { R2666 += 1, R2622 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 65535] { R2666 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [70, 70] { R2666 += 1, R2622 += 1, R91 += 1, R92 += 1 };
  s1 -> s4 [70, 70] { R2666 += 1, R2622 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [71, 65535] { R2666 += 1, R2622 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [0, 69] { R2666 += 1, R2622 += 1, R91 += 1, R92 += 1 };
  s2 -> s2 [0, 65535] { R2666 += 1, R2621 += 1, R2622 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [70, 70] { R2666 += 1, R2622 += 1, R91 += 1, R92 += 1 };
  s2 -> s4 [70, 70] { R2666 += 1, R2622 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [71, 65535] { R2666 += 1, R2622 += 1, R91 += 1, R92 += 1 };
  s3 -> s3 [0, 65535] { R2666 += 1, R2622 += 1, R91 += 1, R92 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R2666 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2666 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2666 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 69] { R2668 += 1, R2624 += 1, R97 += 1, R98 += 1 };
  s0 -> s2 [0, 65535] { R2668 += 1, R2623 += 1, R2624 += 1 };
  s0 -> s0 [0, 65535] { R2667 += 1, R2668 += 1 };
  s0 -> s3 [70, 70] { R2668 += 1, R2624 += 1, R97 += 1, R98 += 1 };
  s0 -> s4 [70, 70] { R2668 += 1, R2624 += 1, R97 += 1, R98 += 1 };
  s0 -> s1 [71, 65535] { R2668 += 1, R2624 += 1, R97 += 1, R98 += 1 };
  s1 -> s1 [0, 69] { R2668 += 1, R2624 += 1, R97 += 1, R98 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R2668 += 1 };
  s1 -> s3 [70, 70] { R2668 += 1, R2624 += 1, R97 += 1, R98 += 1 };
  s1 -> s4 [70, 70] { R2668 += 1, R2624 += 1, R97 += 1, R98 += 1 };
  s1 -> s1 [71, 65535] { R2668 += 1, R2624 += 1, R97 += 1, R98 += 1 };
  s2 -> s1 [0, 69] { R2668 += 1, R2624 += 1, R97 += 1, R98 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2668 += 1, R2623 += 1, R2624 += 1 };
  s2 -> s3 [70, 70] { R2668 += 1, R2624 += 1, R97 += 1, R98 += 1 };
  s2 -> s4 [70, 70] { R2668 += 1, R2624 += 1, R97 += 1, R98 += 1 };
  s2 -> s1 [71, 65535] { R2668 += 1, R2624 += 1, R97 += 1, R98 += 1 };
  s3 -> s6 [0, 65535] { R2668 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R2668 += 1, R2624 += 1, R97 += 1, R98 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2668 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2668 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 69] { R2670 += 1, R2626 += 1, R2335 += 1, R2336 += 1 };
  s0 -> s2 [0, 69] { R2670 += 1, R2626 += 1, R2336 += 1, R2337 += 1, R2338 += 1 };
  s0 -> s3 [0, 69] { R2670 += 1, R2626 += 1, R2336 += 1, R2338 += 1 };
  s0 -> s4 [0, 65535] { R2670 += 1, R2625 += 1, R2626 += 1 };
  s0 -> s0 [0, 65535] { R2669 += 1, R2670 += 1 };
  s0 -> s5 [70, 70] { R2670 += 1, R2626 += 1, R2336 += 1, R2337 += 1, R2338 += 1 };
  s0 -> s6 [70, 70] { R2670 += 1, R2626 += 1, R2336 += 1, R2337 += 1, R2338 += 1 };
  s0 -> s7 [70, 70] { R2670 += 1, R2626 += 1, R2335 += 1, R2336 += 1 };
  s0 -> s8 [70, 70] { R2670 += 1, R2626 += 1, R2335 += 1, R2336 += 1 };
  s0 -> s9 [70, 70] { R2670 += 1, R2626 += 1, R2336 += 1, R2338 += 1 };
  s0 -> s10 [70, 70] { R2670 += 1, R2626 += 1, R2336 += 1, R2338 += 1 };
  s0 -> s3 [71, 74] { R2670 += 1, R2626 += 1, R2336 += 1, R2338 += 1 };
  s0 -> s1 [71, 65535] { R2670 += 1, R2626 += 1, R2335 += 1, R2336 += 1 };
  s0 -> s2 [71, 65535] { R2670 += 1, R2626 += 1, R2336 += 1, R2337 += 1, R2338 += 1 };
  s0 -> s3 [76, 65535] { R2670 += 1, R2626 += 1, R2336 += 1, R2338 += 1 };
  s1 -> s1 [0, 69] { R2670 += 1, R2626 += 1, R2335 += 1, R2336 += 1 };
  s1 -> s2 [0, 69] { R2670 += 1, R2626 += 1, R2336 += 1, R2337 += 1, R2338 += 1 };
  s1 -> s3 [0, 69] { R2670 += 1, R2626 += 1, R2336 += 1, R2338 += 1 };
  s1 -> s5 [70, 70] { R2670 += 1, R2626 += 1, R2336 += 1, R2337 += 1, R2338 += 1 };
  s1 -> s6 [70, 70] { R2670 += 1, R2626 += 1, R2336 += 1, R2337 += 1, R2338 += 1 };
  s1 -> s7 [70, 70] { R2670 += 1, R2626 += 1, R2335 += 1, R2336 += 1 };
  s1 -> s8 [70, 70] { R2670 += 1, R2626 += 1, R2335 += 1, R2336 += 1 };
  s1 -> s9 [70, 70] { R2670 += 1, R2626 += 1, R2336 += 1, R2338 += 1 };
  s1 -> s10 [70, 70] { R2670 += 1, R2626 += 1, R2336 += 1, R2338 += 1 };
  s1 -> s3 [71, 74] { R2670 += 1, R2626 += 1, R2336 += 1, R2338 += 1 };
  s1 -> s1 [71, 65535] { R2670 += 1, R2626 += 1, R2335 += 1, R2336 += 1 };
  s1 -> s2 [71, 65535] { R2670 += 1, R2626 += 1, R2336 += 1, R2337 += 1, R2338 += 1 };
  s1 -> s3 [76, 65535] { R2670 += 1, R2626 += 1, R2336 += 1, R2338 += 1 };
  s2 -> s2 [0, 69] { R2670 += 1, R2626 += 1, R2336 += 1, R2337 += 1, R2338 += 1 };
  s2 -> s3 [0, 69] { R2670 += 1, R2626 += 1, R2336 += 1, R2338 += 1 };
  s2 -> s5 [70, 70] { R2670 += 1, R2626 += 1, R2336 += 1, R2337 += 1, R2338 += 1 };
  s2 -> s6 [70, 70] { R2670 += 1, R2626 += 1, R2336 += 1, R2337 += 1, R2338 += 1 };
  s2 -> s9 [70, 70] { R2670 += 1, R2626 += 1, R2336 += 1, R2338 += 1 };
  s2 -> s10 [70, 70] { R2670 += 1, R2626 += 1, R2336 += 1, R2338 += 1 };
  s2 -> s3 [71, 74] { R2670 += 1, R2626 += 1, R2336 += 1, R2338 += 1 };
  s2 -> s2 [71, 65535] { R2670 += 1, R2626 += 1, R2336 += 1, R2337 += 1, R2338 += 1 };
  s2 -> s3 [76, 65535] { R2670 += 1, R2626 += 1, R2336 += 1, R2338 += 1 };
  s3 -> s3 [0, 69] { R2670 += 1, R2626 += 1, R2336 += 1, R2338 += 1 };
  s3 -> s11 [0, 65535];
  s3 -> s3 [0, 65535] { R2670 += 1 };
  s3 -> s9 [70, 70] { R2670 += 1, R2626 += 1, R2336 += 1, R2338 += 1 };
  s3 -> s10 [70, 70] { R2670 += 1, R2626 += 1, R2336 += 1, R2338 += 1 };
  s3 -> s3 [71, 74] { R2670 += 1, R2626 += 1, R2336 += 1, R2338 += 1 };
  s3 -> s3 [76, 65535] { R2670 += 1, R2626 += 1, R2336 += 1, R2338 += 1 };
  s4 -> s1 [0, 69] { R2670 += 1, R2626 += 1, R2335 += 1, R2336 += 1 };
  s4 -> s2 [0, 69] { R2670 += 1, R2626 += 1, R2336 += 1, R2337 += 1, R2338 += 1 };
  s4 -> s3 [0, 69] { R2670 += 1, R2626 += 1, R2336 += 1, R2338 += 1 };
  s4 -> s4 [0, 65535] { R2670 += 1, R2625 += 1, R2626 += 1 };
  s4 -> s5 [70, 70] { R2670 += 1, R2626 += 1, R2336 += 1, R2337 += 1, R2338 += 1 };
  s4 -> s6 [70, 70] { R2670 += 1, R2626 += 1, R2336 += 1, R2337 += 1, R2338 += 1 };
  s4 -> s7 [70, 70] { R2670 += 1, R2626 += 1, R2335 += 1, R2336 += 1 };
  s4 -> s8 [70, 70] { R2670 += 1, R2626 += 1, R2335 += 1, R2336 += 1 };
  s4 -> s9 [70, 70] { R2670 += 1, R2626 += 1, R2336 += 1, R2338 += 1 };
  s4 -> s10 [70, 70] { R2670 += 1, R2626 += 1, R2336 += 1, R2338 += 1 };
  s4 -> s3 [71, 74] { R2670 += 1, R2626 += 1, R2336 += 1, R2338 += 1 };
  s4 -> s1 [71, 65535] { R2670 += 1, R2626 += 1, R2335 += 1, R2336 += 1 };
  s4 -> s2 [71, 65535] { R2670 += 1, R2626 += 1, R2336 += 1, R2337 += 1, R2338 += 1 };
  s4 -> s3 [76, 65535] { R2670 += 1, R2626 += 1, R2336 += 1, R2338 += 1 };
  s6 -> s10 [0, 74] { R2670 += 1, R2626 += 1, R2336 += 1, R2338 += 1 };
  s6 -> s6 [0, 65535] { R2670 += 1, R2626 += 1, R2336 += 1, R2337 += 1, R2338 += 1 };
  s6 -> s10 [76, 65535] { R2670 += 1, R2626 += 1, R2336 += 1, R2338 += 1 };
  s8 -> s10 [0, 74] { R2670 += 1, R2626 += 1, R2336 += 1, R2338 += 1 };
  s8 -> s6 [0, 65535] { R2670 += 1, R2626 += 1, R2336 += 1, R2337 += 1, R2338 += 1 };
  s8 -> s8 [0, 65535] { R2670 += 1, R2626 += 1, R2335 += 1, R2336 += 1 };
  s8 -> s10 [76, 65535] { R2670 += 1, R2626 += 1, R2336 += 1, R2338 += 1 };
  s9 -> s11 [0, 65535];
  s9 -> s9 [0, 65535] { R2670 += 1 };
  s10 -> s10 [0, 74] { R2670 += 1, R2626 += 1, R2336 += 1, R2338 += 1 };
  s10 -> s11 [0, 65535];
  s10 -> s10 [0, 65535] { R2670 += 1 };
  s10 -> s10 [76, 65535] { R2670 += 1, R2626 += 1, R2336 += 1, R2338 += 1 };
  s11 -> s11 [0, 65535];
  accepting s3, s9, s10, s11;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 69] { R2672 += 1, R2628 += 1, R2563 += 1, R2564 += 1 };
  s0 -> s0 [0, 65535] { R2671 += 1, R2672 += 1 };
  s0 -> s2 [0, 65535] { R2672 += 1, R2627 += 1, R2628 += 1 };
  s0 -> s3 [70, 70] { R2672 += 1, R2628 += 1, R2563 += 1, R2564 += 1 };
  s0 -> s4 [70, 70] { R2672 += 1, R2628 += 1, R2563 += 1, R2564 += 1 };
  s0 -> s1 [71, 65535] { R2672 += 1, R2628 += 1, R2563 += 1, R2564 += 1 };
  s1 -> s1 [0, 69] { R2672 += 1, R2628 += 1, R2563 += 1, R2564 += 1 };
  s1 -> s1 [0, 65535] { R2672 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [70, 70] { R2672 += 1, R2628 += 1, R2563 += 1, R2564 += 1 };
  s1 -> s4 [70, 70] { R2672 += 1, R2628 += 1, R2563 += 1, R2564 += 1 };
  s1 -> s1 [71, 65535] { R2672 += 1, R2628 += 1, R2563 += 1, R2564 += 1 };
  s2 -> s1 [0, 69] { R2672 += 1, R2628 += 1, R2563 += 1, R2564 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2672 += 1, R2627 += 1, R2628 += 1 };
  s2 -> s3 [70, 70] { R2672 += 1, R2628 += 1, R2563 += 1, R2564 += 1 };
  s2 -> s4 [70, 70] { R2672 += 1, R2628 += 1, R2563 += 1, R2564 += 1 };
  s2 -> s1 [71, 65535] { R2672 += 1, R2628 += 1, R2563 += 1, R2564 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R2672 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2672 += 1, R2628 += 1, R2563 += 1, R2564 += 1 };
  s4 -> s6 [0, 65535] { R2672 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2672 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [102, 102];
  accepting s1;
};
};
constraint R2 = R2590 && R3 = R2672 && R23 - R2672 = -1 && R24 = R2672 && R25 - R2672 = -1 && R26 = R2672 && R27 = 0 && R28 = 1 && R29 = 0 && R30 = 1 && R45 + R84 + R83 + -1*R2340 + -1*R2336 - R66 = 0 && R49 + R89 + R87 = 0 && R50 + R90 + R88 + -1*R2340 + -1*R2336 - R66 = 0 && R55 + R96 + R93 + -1*R2342 + -1*R2338 - R68 = 0 && R65 + R2339 + R2335 = 0 && R67 + R2341 + R2337 = 0 && R2589 = 0 && R2613 = 0 && R2614 = 0 && R2619 = 0 && R2620 = 0 && R2625 = 0 && R2626 = 0 && R2629 = 0 && R2630 = R2672 && R2631 = 0 && R2632 = R2672 && R2633 = 0 && R2634 = R2672 && R2635 = 0 && R2636 = R2672 && R2637 = 0 && R2638 = R2672 && R2639 = 0 && R2640 = R2672 && R2641 = 0 && R2642 = R2672 && R2643 = 0 && R2644 = R2672 && R2645 = 0 && R2646 = R2672 && R2647 = 0 && R2648 = R2672 && R2649 = 0 && R2650 = R2672 && R2651 = 0 && R2652 = R2672 && R2653 = 0 && R2654 = R2672 && R2655 = 0 && R2656 = R2672 && R2657 = 0 && R2658 = R2672 && R2659 = 0 && R2660 = R2672 && R2661 = 0 && R2662 = R2672 && R2663 = 0 && R2664 = R2672 && R2665 = 0 && R2666 = R2672 && R2667 = 0 && R2668 = R2672 && R2669 = 0 && R2670 = R2672 && R2671 = 0 && R12 < 1 && R15 < 1 && R16 < 1 && R47 + R86 + R85 < 1 && R61 + R102 + R99 < 1 && -1*R2340 + -1*R2336 - R66 < 1 && -1*R2342 + -1*R2338 - R68 < 1 && -1 < R2590 && 0 < R2672 && (R53 + R94 + R91 != 0 || R54 + R95 + R92 + -1*R2340 + -1*R2336 - R66 = 0 || R66 + R2340 + R2336 < 1) && (R59 + R100 + R97 != 0 || R60 + R101 + R98 + -1*R2340 + -1*R2336 - R66 = 0 || R66 + R2340 + R2336 < 1) && (R66 + R2340 + R2336 != 0 || ((R53 + R94 + R91 != 0 || R54 + R95 + R92 = 0 || R68 + R2342 + R2338 < 1) && (R53 + R94 + R91 = 0 || R68 + R2342 + R2338 < 1))) && (R66 + R2340 + R2336 != 0 || ((R59 + R100 + R97 != 0 || R60 + R101 + R98 = 0 || R68 + R2342 + R2338 < 1) && (R59 + R100 + R97 = 0 || R68 + R2342 + R2338 < 1))) && (R66 + R2340 + R2336 != 0 || ((R73 + R2568 + R2563 != 0 || R74 + R2569 + R2564 = 0 || R68 + R2342 + R2338 < 1) && (R73 + R2568 + R2563 = 0 || R68 + R2342 + R2338 < 1))) && (R68 + R2342 + R2338 != 0 || R77 + R2572 + R2567 = 0 || (R75 + R2570 + R2565 = 0 && R76 + R2571 + R2566 = 0)) && (R73 + R2568 + R2563 != 0 || R66 + R2340 + R2336 + -1*R2569 + -1*R2564 - R74 = 0 || R66 + R2340 + R2336 < 1) && (R75 + R2570 + R2565 != 0 || R68 + R2342 + R2338 + -1*R2571 + -1*R2566 - R76 = 0 || R68 + R2342 + R2338 < 1) && (R2573 != 0 || R2574 = R2590 || (R20 = 0 && R2590 = 0)) && (R2575 != 0 || R2576 = R2590 || (R20 = 0 && R2590 = 0)) && (R2577 != 0 || R2578 = R2590 || (R20 = 0 && R2590 = 0)) && (R2579 != 0 || R2580 = R2590 || (R20 = 0 && R2590 = 0)) && (R2581 != 0 || R2582 = R2590 || (R20 = 0 && R2590 = 0)) && (R2583 != 0 || R2584 = R2590 || (R20 = 0 && R2590 = 0)) && (R2585 != 0 || R2586 = R2590 || (R20 = 0 && R2590 = 0)) && (R2587 != 0 || R2588 = R2590 || (R20 = 0 && R2590 = 0)) && (R2591 != 0 || R2590 = R2592 || (R20 = 0 && R2590 = 0)) && (R21 = 0 || (R2611 = 0 && R2612 = 0)) && (R21 = 0 || (R2615 = 0 && R2616 = 0)) && (R21 = 0 || (R2617 = 0 && R2618 = 0)) && (R21 = 0 || (R2621 = 0 && R2622 = 0)) && (R21 = 0 || (R2623 = 0 && R2624 = 0)) && (R21 = 0 || (R2627 = 0 && R2628 = 0)) && (R22 = 0 || (R2593 = 0 && R2594 = 0)) && (R22 = 0 || (R2595 = 0 && R2596 = 0)) && (R22 = 0 || (R2597 = 0 && R2598 = 0)) && (R22 = 0 || (R2599 = 0 && R2600 = 0)) && (R22 = 0 || (R2601 = 0 && R2602 = 0)) && (R22 = 0 || (R2603 = 0 && R2604 = 0)) && (R22 = 0 || (R2605 = 0 && R2606 = 0)) && (R22 = 0 || (R2607 = 0 && R2608 = 0)) && (R22 = 0 || (R2609 = 0 && R2610 = 0)) && (R53 + R94 + R91 = 0 || R66 + R2340 + R2336 < 1) && (R59 + R100 + R97 = 0 || R66 + R2340 + R2336 < 1) && (R73 + R2568 + R2563 = 0 || R66 + R2340 + R2336 < 1) && (R75 + R2570 + R2565 = 0 || R68 + R2342 + R2338 < 1) && (R2573 = 0 || (R20 = 0 && R2590 = 0)) && (R2575 = 0 || (R20 = 0 && R2590 = 0)) && (R2577 = 0 || (R20 = 0 && R2590 = 0)) && (R2579 = 0 || (R20 = 0 && R2590 = 0)) && (R2581 = 0 || (R20 = 0 && R2590 = 0)) && (R2583 = 0 || (R20 = 0 && R2590 = 0)) && (R2585 = 0 || (R20 = 0 && R2590 = 0)) && (R2587 = 0 || (R20 = 0 && R2590 = 0)) && (R2591 = 0 || (R20 = 0 && R2590 = 0));
// End of Parikh automata intersection problem
