// Parikh automata intersection problem, generated by OSTRICH+
counter int R100, R101, R102, R12, R15, R16, R2, R20, R21, R22, R23, R2335, R2336, R2337, R2338, R2339, R2340, R2341, R2342, R24, R25, R26, R27, R2783, R2784, R2785, R2786, R2787, R2788, R2789, R2790, R2791, R2792, R2793, R2794, R2795, R2796, R2797, R2798, R2799, R28, R2800, R2801, R2802, R2803, R2804, R2805, R2806, R2807, R2808, R2809, R2810, R2811, R2812, R2813, R2814, R2815, R2816, R2817, R2818, R2819, R2820, R2821, R2822, R2823, R2824, R2825, R2826, R2827, R2828, R2829, R2830, R2831, R2832, R2833, R2834, R2835, R2836, R2837, R2838, R2839, R2840, R2841, R2842, R2843, R2844, R2845, R2846, R2847, R2848, R2849, R2850, R2851, R2852, R2853, R2854, R2855, R2856, R2857, R2858, R2859, R2860, R2861, R2862, R2863, R2864, R2865, R2866, R2867, R2868, R2869, R2870, R2871, R2872, R2873, R2874, R2875, R2876, R2877, R2878, R2879, R2880, R2881, R2882, R2883, R2884, R2885, R2886, R2887, R2888, R2889, R2890, R2891, R2892, R29, R3, R30, R4, R45, R47, R49, R5, R50, R53, R54, R55, R59, R60, R61, R65, R66, R67, R68, R73, R74, R75, R76, R77, R83, R84, R85, R86, R87, R88, R89, R90, R91, R92, R93, R94, R95, R96, R97, R98, R99;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [70, 70];
  s0 -> s0 [71, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [70, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R15 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 69];
  s0 -> s0 [0, 65535] { R16 += 1 };
  s0 -> s2 [70, 70];
  s0 -> s1 [71, 65535];
  s1 -> s1 [0, 69];
  s1 -> s2 [70, 70];
  s1 -> s1 [71, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R24 += 1 };
  s0 -> s0 [0, 65535] { R23 += 1, R24 += 1 };
  s0 -> s2 [9, 13] { R24 += 1 };
  s0 -> s1 [14, 31] { R24 += 1 };
  s0 -> s2 [32, 32] { R24 += 1 };
  s0 -> s1 [33, 65535] { R24 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R24 += 1 };
  s2 -> s1 [0, 65535] { R24 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R25 += 1, R26 += 1 };
  s1 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R28 += 1 };
  s0 -> s0 [0, 65535] { R27 += 1, R28 += 1 };
  s0 -> s2 [9, 13] { R28 += 1 };
  s0 -> s1 [14, 31] { R28 += 1 };
  s0 -> s2 [32, 32] { R28 += 1 };
  s0 -> s1 [33, 65535] { R28 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R28 += 1 };
  s2 -> s1 [0, 65535] { R28 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R29 += 1, R30 += 1 };
  s1 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R2813 += 1, R2814 += 1 };
  s0 -> s1 [0, 65535] { R2814 += 1, R22 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R2814 += 1, R22 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 69] { R2816 += 1 };
  s0 -> s0 [0, 65535] { R2815 += 1, R2816 += 1 };
  s0 -> s2 [70, 70] { R2816 += 1 };
  s0 -> s3 [70, 70] { R2816 += 1 };
  s0 -> s1 [76, 65535] { R2816 += 1 };
  s1 -> s1 [0, 69] { R2816 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R2816 += 1 };
  s1 -> s3 [70, 70] { R2816 += 1 };
  s1 -> s1 [76, 65535] { R2816 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 70] { R2816 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [76, 65535] { R2816 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 69] { R2818 += 1, R45 += 1 };
  s0 -> s0 [0, 65535] { R2817 += 1, R2818 += 1 };
  s0 -> s2 [70, 70] { R2818 += 1, R45 += 1 };
  s0 -> s3 [70, 70] { R2818 += 1, R45 += 1 };
  s0 -> s1 [71, 65535] { R2818 += 1, R45 += 1 };
  s1 -> s1 [0, 69] { R2818 += 1, R45 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R2818 += 1, R45 += 1 };
  s1 -> s3 [70, 70] { R2818 += 1, R45 += 1 };
  s1 -> s1 [71, 65535] { R2818 += 1, R45 += 1 };
  s2 -> s2 [0, 65535] { R2818 += 1, R45 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 69] { R2820 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R2819 += 1, R2820 += 1 };
  s0 -> s2 [70, 70] { R2820 += 1, R47 += 1 };
  s0 -> s3 [70, 70] { R2820 += 1, R47 += 1 };
  s0 -> s1 [71, 65535] { R2820 += 1, R47 += 1 };
  s1 -> s1 [0, 69] { R2820 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R2820 += 1, R47 += 1 };
  s1 -> s3 [70, 70] { R2820 += 1, R47 += 1 };
  s1 -> s1 [71, 65535] { R2820 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2820 += 1, R47 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 69] { R2822 += 1, R49 += 1, R50 += 1 };
  s0 -> s0 [0, 65535] { R2821 += 1, R2822 += 1 };
  s0 -> s2 [70, 70] { R2822 += 1, R49 += 1, R50 += 1 };
  s0 -> s3 [70, 70] { R2822 += 1, R49 += 1, R50 += 1 };
  s0 -> s1 [71, 65535] { R2822 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 69] { R2822 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R2822 += 1, R49 += 1, R50 += 1 };
  s1 -> s3 [70, 70] { R2822 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [71, 65535] { R2822 += 1, R49 += 1, R50 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2822 += 1, R49 += 1, R50 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 69] { R2824 += 1, R53 += 1, R54 += 1 };
  s0 -> s0 [0, 65535] { R2823 += 1, R2824 += 1 };
  s0 -> s2 [70, 70] { R2824 += 1, R53 += 1, R54 += 1 };
  s0 -> s3 [70, 70] { R2824 += 1, R53 += 1, R54 += 1 };
  s0 -> s1 [71, 65535] { R2824 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 69] { R2824 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R2824 += 1, R53 += 1, R54 += 1 };
  s1 -> s3 [70, 70] { R2824 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [71, 65535] { R2824 += 1, R53 += 1, R54 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R2824 += 1, R53 += 1, R54 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 69] { R2826 += 1, R59 += 1, R60 += 1 };
  s0 -> s0 [0, 65535] { R2825 += 1, R2826 += 1 };
  s0 -> s2 [70, 70] { R2826 += 1, R59 += 1, R60 += 1 };
  s0 -> s3 [70, 70] { R2826 += 1, R59 += 1, R60 += 1 };
  s0 -> s1 [71, 65535] { R2826 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 69] { R2826 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R2826 += 1, R59 += 1, R60 += 1 };
  s1 -> s3 [70, 70] { R2826 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [71, 65535] { R2826 += 1, R59 += 1, R60 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2826 += 1, R59 += 1, R60 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 69] { R2828 += 1, R65 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R2827 += 1, R2828 += 1 };
  s0 -> s2 [70, 70] { R2828 += 1, R65 += 1, R66 += 1 };
  s0 -> s3 [70, 70] { R2828 += 1, R65 += 1, R66 += 1 };
  s0 -> s1 [71, 65535] { R2828 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 69] { R2828 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R2828 += 1, R65 += 1, R66 += 1 };
  s1 -> s3 [70, 70] { R2828 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [71, 65535] { R2828 += 1, R65 += 1, R66 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2828 += 1, R65 += 1, R66 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 69] { R2830 += 1, R73 += 1, R74 += 1 };
  s0 -> s0 [0, 65535] { R2829 += 1, R2830 += 1 };
  s0 -> s2 [70, 70] { R2830 += 1, R73 += 1, R74 += 1 };
  s0 -> s3 [70, 70] { R2830 += 1, R73 += 1, R74 += 1 };
  s0 -> s1 [71, 65535] { R2830 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 69] { R2830 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R2830 += 1, R73 += 1, R74 += 1 };
  s1 -> s3 [70, 70] { R2830 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [71, 65535] { R2830 += 1, R73 += 1, R74 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R2830 += 1, R73 += 1, R74 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 69] { R2850 += 1 };
  s0 -> s0 [0, 65535] { R2849 += 1, R2850 += 1 };
  s0 -> s2 [70, 70] { R2850 += 1 };
  s0 -> s1 [71, 65535] { R2850 += 1 };
  s1 -> s1 [0, 69] { R2850 += 1 };
  s1 -> s2 [70, 70] { R2850 += 1 };
  s1 -> s1 [71, 65535] { R2850 += 1 };
  s2 -> s2 [0, 65535] { R2850 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R2851 += 1, R2852 += 1 };
  s0 -> s1 [0, 65535] { R2852 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R2852 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 69] { R2854 += 1 };
  s0 -> s2 [0, 65535] { R2854 += 1, R12 += 1 };
  s0 -> s0 [0, 65535] { R2853 += 1, R2854 += 1 };
  s0 -> s3 [70, 70] { R2854 += 1 };
  s0 -> s1 [71, 65535] { R2854 += 1 };
  s1 -> s1 [0, 69] { R2854 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [70, 70] { R2854 += 1 };
  s1 -> s1 [71, 65535] { R2854 += 1 };
  s2 -> s1 [0, 69] { R2854 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2854 += 1, R12 += 1 };
  s2 -> s3 [70, 70] { R2854 += 1 };
  s2 -> s1 [71, 65535] { R2854 += 1 };
  s3 -> s3 [0, 65535] { R2854 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 69] { R2856 += 1, R2794 += 1 };
  s0 -> s0 [0, 65535] { R2855 += 1, R2856 += 1 };
  s0 -> s2 [0, 65535] { R2856 += 1, R2793 += 1, R2794 += 1 };
  s0 -> s1 [71, 65535] { R2856 += 1, R2794 += 1 };
  s1 -> s1 [0, 69] { R2856 += 1, R2794 += 1 };
  s1 -> s1 [0, 65535] { R2856 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [71, 65535] { R2856 += 1, R2794 += 1 };
  s2 -> s1 [0, 69] { R2856 += 1, R2794 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R2856 += 1, R2793 += 1, R2794 += 1 };
  s2 -> s1 [71, 65535] { R2856 += 1, R2794 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s0 [0, 65535] { R2857 += 1, R2858 += 1 };
  s0 -> s1 [0, 65535] { R2858 += 1, R2796 += 1, R20 += 1 };
  s0 -> s2 [0, 65535] { R2858 += 1, R2795 += 1, R2796 += 1 };
  s1 -> s1 [0, 65535] { R2858 += 1, R2796 += 1, R20 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R2858 += 1 };
  s2 -> s1 [0, 65535] { R2858 += 1, R2796 += 1, R20 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R2858 += 1, R2795 += 1, R2796 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2858 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 70] { R2860 += 1, R2798 += 1 };
  s0 -> s0 [0, 65535] { R2859 += 1, R2860 += 1 };
  s0 -> s2 [0, 65535] { R2860 += 1, R2797 += 1, R2798 += 1 };
  s0 -> s1 [75, 65535] { R2860 += 1, R2798 += 1 };
  s1 -> s1 [0, 70] { R2860 += 1, R2798 += 1 };
  s1 -> s1 [0, 65535] { R2860 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [75, 65535] { R2860 += 1, R2798 += 1 };
  s2 -> s1 [0, 70] { R2860 += 1, R2798 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R2860 += 1, R2797 += 1, R2798 += 1 };
  s2 -> s1 [75, 65535] { R2860 += 1, R2798 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R2862 += 1, R2799 += 1, R2800 += 1 };
  s0 -> s2 [0, 65535] { R2862 += 1, R2800 += 1, R84 += 1 };
  s0 -> s0 [0, 65535] { R2861 += 1, R2862 += 1 };
  s1 -> s1 [0, 65535] { R2862 += 1, R2799 += 1, R2800 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R2862 += 1, R2800 += 1, R84 += 1 };
  s2 -> s3 [0, 65535] { R2862 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2862 += 1, R2800 += 1, R84 += 1 };
  s3 -> s3 [0, 65535] { R2862 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 74] { R2864 += 1, R2802 += 1 };
  s0 -> s0 [0, 65535] { R2863 += 1, R2864 += 1 };
  s0 -> s2 [0, 65535] { R2864 += 1, R2801 += 1, R2802 += 1 };
  s0 -> s3 [0, 65535] { R2864 += 1, R2802 += 1, R86 += 1 };
  s0 -> s1 [76, 65535] { R2864 += 1, R2802 += 1 };
  s1 -> s1 [0, 74] { R2864 += 1, R2802 += 1 };
  s1 -> s1 [0, 65535] { R2864 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [76, 65535] { R2864 += 1, R2802 += 1 };
  s2 -> s1 [0, 74] { R2864 += 1, R2802 += 1 };
  s2 -> s2 [0, 65535] { R2864 += 1, R2801 += 1, R2802 += 1 };
  s2 -> s3 [0, 65535] { R2864 += 1, R2802 += 1, R86 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [76, 65535] { R2864 += 1, R2802 += 1 };
  s3 -> s1 [0, 74] { R2864 += 1, R2802 += 1 };
  s3 -> s4 [0, 65535] { R2864 += 1 };
  s3 -> s3 [0, 65535] { R2864 += 1, R2802 += 1, R86 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [76, 65535] { R2864 += 1, R2802 += 1 };
  s4 -> s4 [0, 65535] { R2864 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 65535] { R2866 += 1, R2803 += 1, R2804 += 1 };
  s0 -> s0 [0, 65535] { R2865 += 1, R2866 += 1 };
  s0 -> s2 [0, 65535] { R2866 += 1, R2804 += 1, R90 += 1 };
  s0 -> s3 [0, 65535] { R2866 += 1, R2804 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R2866 += 1, R2803 += 1, R2804 += 1 };
  s1 -> s2 [0, 65535] { R2866 += 1, R2804 += 1, R90 += 1 };
  s1 -> s3 [0, 65535] { R2866 += 1, R2804 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R2866 += 1 };
  s2 -> s2 [0, 65535] { R2866 += 1, R2804 += 1, R90 += 1 };
  s2 -> s3 [0, 65535] { R2866 += 1, R2804 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R2866 += 1 };
  s3 -> s3 [0, 65535] { R2866 += 1, R2804 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2866 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R2868 += 1, R2805 += 1, R2806 += 1 };
  s0 -> s2 [0, 65535] { R2868 += 1, R2806 += 1, R95 += 1, R96 += 1 };
  s0 -> s3 [0, 65535] { R2868 += 1, R2806 += 1, R94 += 1, R95 += 1 };
  s0 -> s0 [0, 65535] { R2867 += 1, R2868 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R2868 += 1, R2805 += 1, R2806 += 1 };
  s1 -> s2 [0, 65535] { R2868 += 1, R2806 += 1, R95 += 1, R96 += 1 };
  s1 -> s3 [0, 65535] { R2868 += 1, R2806 += 1, R94 += 1, R95 += 1 };
  s2 -> s6 [0, 65535] { R2868 += 1, R2806 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R2868 += 1 };
  s2 -> s2 [0, 65535] { R2868 += 1, R2806 += 1, R95 += 1, R96 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R2868 += 1 };
  s3 -> s2 [0, 65535] { R2868 += 1, R2806 += 1, R95 += 1, R96 += 1 };
  s3 -> s3 [0, 65535] { R2868 += 1, R2806 += 1, R94 += 1, R95 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2868 += 1 };
  s6 -> s6 [0, 65535] { R2868 += 1, R2806 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R2868 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 74] { R2870 += 1, R2808 += 1, R101 += 1 };
  s0 -> s2 [0, 65535] { R2870 += 1, R2808 += 1, R101 += 1, R102 += 1 };
  s0 -> s0 [0, 65535] { R2869 += 1, R2870 += 1 };
  s0 -> s3 [0, 65535] { R2870 += 1, R2808 += 1, R100 += 1, R101 += 1 };
  s0 -> s4 [0, 65535] { R2870 += 1, R2807 += 1, R2808 += 1 };
  s0 -> s1 [76, 65535] { R2870 += 1, R2808 += 1, R101 += 1 };
  s1 -> s1 [0, 74] { R2870 += 1, R2808 += 1, R101 += 1 };
  s1 -> s1 [0, 65535] { R2870 += 1, R2808 += 1 };
  s1 -> s6 [0, 65535] { R2870 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [76, 65535] { R2870 += 1, R2808 += 1, R101 += 1 };
  s2 -> s1 [0, 74] { R2870 += 1, R2808 += 1, R101 += 1 };
  s2 -> s2 [0, 65535] { R2870 += 1, R2808 += 1, R101 += 1, R102 += 1 };
  s2 -> s7 [0, 65535] { R2870 += 1, R2808 += 1 };
  s2 -> s6 [0, 65535] { R2870 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [76, 65535] { R2870 += 1, R2808 += 1, R101 += 1 };
  s3 -> s1 [0, 74] { R2870 += 1, R2808 += 1, R101 += 1 };
  s3 -> s2 [0, 65535] { R2870 += 1, R2808 += 1, R101 += 1, R102 += 1 };
  s3 -> s3 [0, 65535] { R2870 += 1, R2808 += 1, R100 += 1, R101 += 1 };
  s3 -> s6 [0, 65535] { R2870 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [76, 65535] { R2870 += 1, R2808 += 1, R101 += 1 };
  s4 -> s1 [0, 74] { R2870 += 1, R2808 += 1, R101 += 1 };
  s4 -> s2 [0, 65535] { R2870 += 1, R2808 += 1, R101 += 1, R102 += 1 };
  s4 -> s3 [0, 65535] { R2870 += 1, R2808 += 1, R100 += 1, R101 += 1 };
  s4 -> s4 [0, 65535] { R2870 += 1, R2807 += 1, R2808 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s1 [76, 65535] { R2870 += 1, R2808 += 1, R101 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2870 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R2870 += 1, R2808 += 1 };
  s7 -> s6 [0, 65535] { R2870 += 1 };
  s7 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 74] { R2872 += 1, R2810 += 1, R2340 += 1, R2342 += 1 };
  s0 -> s2 [0, 65535] { R2872 += 1, R2809 += 1, R2810 += 1 };
  s0 -> s0 [0, 65535] { R2871 += 1, R2872 += 1 };
  s0 -> s3 [75, 75] { R2872 += 1, R2810 += 1, R2340 += 1, R2342 += 1 };
  s0 -> s1 [76, 65535] { R2872 += 1, R2810 += 1, R2340 += 1, R2342 += 1 };
  s1 -> s1 [0, 74] { R2872 += 1, R2810 += 1, R2340 += 1, R2342 += 1 };
  s1 -> s3 [75, 75] { R2872 += 1, R2810 += 1, R2340 += 1, R2342 += 1 };
  s1 -> s1 [76, 65535] { R2872 += 1, R2810 += 1, R2340 += 1, R2342 += 1 };
  s2 -> s1 [0, 74] { R2872 += 1, R2810 += 1, R2340 += 1, R2342 += 1 };
  s2 -> s2 [0, 65535] { R2872 += 1, R2809 += 1, R2810 += 1 };
  s2 -> s3 [75, 75] { R2872 += 1, R2810 += 1, R2340 += 1, R2342 += 1 };
  s2 -> s1 [76, 65535] { R2872 += 1, R2810 += 1, R2340 += 1, R2342 += 1 };
  s3 -> s4 [0, 65535] { R2872 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R2872 += 1, R2810 += 1, R2340 += 1, R2342 += 1 };
  s3 -> s6 [0, 65535] { R2872 += 1, R2810 += 1 };
  s3 -> s7 [0, 65535] { R2872 += 1, R2810 += 1, R2340 += 1 };
  s4 -> s4 [0, 65535] { R2872 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R2872 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2872 += 1, R2810 += 1 };
  s7 -> s4 [0, 65535] { R2872 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R2872 += 1, R2810 += 1 };
  s7 -> s7 [0, 65535] { R2872 += 1, R2810 += 1, R2340 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 65535] { R2874 += 1, R2812 += 1, R2789 += 1, R2790 += 1, R2791 += 1 };
  s0 -> s2 [0, 65535] { R2874 += 1, R2811 += 1, R2812 += 1 };
  s0 -> s3 [0, 65535] { R2874 += 1, R2812 += 1, R2789 += 1, R2791 += 1, R2792 += 1 };
  s0 -> s0 [0, 65535] { R2873 += 1, R2874 += 1 };
  s0 -> s4 [0, 65535] { R2874 += 1, R2812 += 1 };
  s1 -> s1 [0, 65535] { R2874 += 1, R2812 += 1, R2789 += 1, R2790 += 1, R2791 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R2874 += 1, R2812 += 1, R2789 += 1, R2791 += 1, R2792 += 1 };
  s1 -> s6 [0, 65535] { R2874 += 1 };
  s1 -> s4 [0, 65535] { R2874 += 1, R2812 += 1 };
  s2 -> s1 [0, 65535] { R2874 += 1, R2812 += 1, R2789 += 1, R2790 += 1, R2791 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2874 += 1, R2811 += 1, R2812 += 1 };
  s2 -> s3 [0, 65535] { R2874 += 1, R2812 += 1, R2789 += 1, R2791 += 1, R2792 += 1 };
  s2 -> s4 [0, 65535] { R2874 += 1, R2812 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R2874 += 1, R2812 += 1, R2789 += 1, R2791 += 1, R2792 += 1 };
  s3 -> s6 [0, 65535] { R2874 += 1 };
  s3 -> s7 [0, 65535] { R2874 += 1, R2812 += 1, R2789 += 1 };
  s3 -> s4 [0, 65535] { R2874 += 1, R2812 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R2874 += 1 };
  s4 -> s4 [0, 65535] { R2874 += 1, R2812 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2874 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R2874 += 1 };
  s7 -> s7 [0, 65535] { R2874 += 1, R2812 += 1, R2789 += 1 };
  s7 -> s4 [0, 65535] { R2874 += 1, R2812 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s0 [0, 65535] { R2875 += 1, R2876 += 1 };
  s0 -> s1 [0, 65535] { R2876 += 1, R2831 += 1, R2832 += 1 };
  s0 -> s2 [0, 65535] { R2876 += 1, R2832 += 1, R21 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R2876 += 1, R2831 += 1, R2832 += 1 };
  s1 -> s2 [0, 65535] { R2876 += 1, R2832 += 1, R21 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R2876 += 1 };
  s2 -> s2 [0, 65535] { R2876 += 1, R2832 += 1, R21 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2876 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 69] { R2878 += 1, R2834 += 1 };
  s0 -> s0 [0, 65535] { R2877 += 1, R2878 += 1 };
  s0 -> s2 [0, 65535] { R2878 += 1, R2833 += 1, R2834 += 1 };
  s0 -> s3 [70, 70] { R2878 += 1, R2834 += 1 };
  s0 -> s4 [70, 70] { R2878 += 1, R2834 += 1 };
  s0 -> s5 [75, 75] { R2878 += 1, R2834 += 1 };
  s0 -> s1 [76, 65535] { R2878 += 1, R2834 += 1 };
  s1 -> s1 [0, 69] { R2878 += 1, R2834 += 1 };
  s1 -> s3 [70, 70] { R2878 += 1, R2834 += 1 };
  s1 -> s4 [70, 70] { R2878 += 1, R2834 += 1 };
  s1 -> s5 [75, 75] { R2878 += 1, R2834 += 1 };
  s1 -> s1 [76, 65535] { R2878 += 1, R2834 += 1 };
  s2 -> s1 [0, 69] { R2878 += 1, R2834 += 1 };
  s2 -> s2 [0, 65535] { R2878 += 1, R2833 += 1, R2834 += 1 };
  s2 -> s3 [70, 70] { R2878 += 1, R2834 += 1 };
  s2 -> s4 [70, 70] { R2878 += 1, R2834 += 1 };
  s2 -> s5 [75, 75] { R2878 += 1, R2834 += 1 };
  s2 -> s1 [76, 65535] { R2878 += 1, R2834 += 1 };
  s4 -> s4 [0, 70] { R2878 += 1, R2834 += 1 };
  s4 -> s8 [75, 75] { R2878 += 1, R2834 += 1 };
  s4 -> s4 [76, 65535] { R2878 += 1, R2834 += 1 };
  s5 -> s5 [0, 69] { R2878 += 1, R2834 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R2878 += 1 };
  s5 -> s7 [70, 70] { R2878 += 1, R2834 += 1 };
  s5 -> s8 [70, 70] { R2878 += 1, R2834 += 1 };
  s5 -> s5 [75, 65535] { R2878 += 1, R2834 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R2878 += 1 };
  s8 -> s8 [0, 70] { R2878 += 1, R2834 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R2878 += 1 };
  s8 -> s8 [75, 65535] { R2878 += 1, R2834 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 69] { R2880 += 1, R2836 += 1, R83 += 1 };
  s0 -> s2 [0, 65535] { R2880 += 1, R2835 += 1, R2836 += 1 };
  s0 -> s0 [0, 65535] { R2879 += 1, R2880 += 1 };
  s0 -> s3 [70, 70] { R2880 += 1, R2836 += 1, R83 += 1 };
  s0 -> s4 [70, 70] { R2880 += 1, R2836 += 1, R83 += 1 };
  s0 -> s1 [71, 65535] { R2880 += 1, R2836 += 1, R83 += 1 };
  s1 -> s1 [0, 69] { R2880 += 1, R2836 += 1, R83 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R2880 += 1 };
  s1 -> s3 [70, 70] { R2880 += 1, R2836 += 1, R83 += 1 };
  s1 -> s4 [70, 70] { R2880 += 1, R2836 += 1, R83 += 1 };
  s1 -> s1 [71, 65535] { R2880 += 1, R2836 += 1, R83 += 1 };
  s2 -> s1 [0, 69] { R2880 += 1, R2836 += 1, R83 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2880 += 1, R2835 += 1, R2836 += 1 };
  s2 -> s3 [70, 70] { R2880 += 1, R2836 += 1, R83 += 1 };
  s2 -> s4 [70, 70] { R2880 += 1, R2836 += 1, R83 += 1 };
  s2 -> s1 [71, 65535] { R2880 += 1, R2836 += 1, R83 += 1 };
  s3 -> s3 [0, 65535] { R2880 += 1, R2836 += 1, R83 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R2880 += 1 };
  s4 -> s4 [0, 65535] { R2880 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2880 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 69] { R2882 += 1, R2838 += 1, R85 += 1 };
  s0 -> s0 [0, 65535] { R2881 += 1, R2882 += 1 };
  s0 -> s2 [0, 65535] { R2882 += 1, R2837 += 1, R2838 += 1 };
  s0 -> s3 [70, 70] { R2882 += 1, R2838 += 1, R85 += 1 };
  s0 -> s4 [70, 70] { R2882 += 1, R2838 += 1, R85 += 1 };
  s0 -> s1 [71, 65535] { R2882 += 1, R2838 += 1, R85 += 1 };
  s1 -> s1 [0, 69] { R2882 += 1, R2838 += 1, R85 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R2882 += 1 };
  s1 -> s3 [70, 70] { R2882 += 1, R2838 += 1, R85 += 1 };
  s1 -> s4 [70, 70] { R2882 += 1, R2838 += 1, R85 += 1 };
  s1 -> s1 [71, 65535] { R2882 += 1, R2838 += 1, R85 += 1 };
  s2 -> s1 [0, 69] { R2882 += 1, R2838 += 1, R85 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2882 += 1, R2837 += 1, R2838 += 1 };
  s2 -> s3 [70, 70] { R2882 += 1, R2838 += 1, R85 += 1 };
  s2 -> s4 [70, 70] { R2882 += 1, R2838 += 1, R85 += 1 };
  s2 -> s1 [71, 65535] { R2882 += 1, R2838 += 1, R85 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R2882 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R2882 += 1 };
  s4 -> s4 [0, 65535] { R2882 += 1, R2838 += 1, R85 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2882 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 69] { R2884 += 1, R2840 += 1, R87 += 1, R88 += 1 };
  s0 -> s2 [0, 69] { R2884 += 1, R2840 += 1, R88 += 1 };
  s0 -> s3 [0, 65535] { R2884 += 1, R2839 += 1, R2840 += 1 };
  s0 -> s0 [0, 65535] { R2883 += 1, R2884 += 1 };
  s0 -> s4 [70, 70] { R2884 += 1, R2840 += 1, R87 += 1, R88 += 1 };
  s0 -> s5 [70, 70] { R2884 += 1, R2840 += 1, R88 += 1 };
  s0 -> s6 [70, 70] { R2884 += 1, R2840 += 1, R88 += 1 };
  s0 -> s7 [70, 70] { R2884 += 1, R2840 += 1, R87 += 1, R88 += 1 };
  s0 -> s2 [71, 74] { R2884 += 1, R2840 += 1, R88 += 1 };
  s0 -> s1 [71, 65535] { R2884 += 1, R2840 += 1, R87 += 1, R88 += 1 };
  s0 -> s8 [75, 75] { R2884 += 1, R2840 += 1, R88 += 1 };
  s0 -> s2 [76, 65535] { R2884 += 1, R2840 += 1, R88 += 1 };
  s1 -> s1 [0, 69] { R2884 += 1, R2840 += 1, R87 += 1, R88 += 1 };
  s1 -> s2 [0, 69] { R2884 += 1, R2840 += 1, R88 += 1 };
  s1 -> s4 [70, 70] { R2884 += 1, R2840 += 1, R87 += 1, R88 += 1 };
  s1 -> s5 [70, 70] { R2884 += 1, R2840 += 1, R88 += 1 };
  s1 -> s6 [70, 70] { R2884 += 1, R2840 += 1, R88 += 1 };
  s1 -> s7 [70, 70] { R2884 += 1, R2840 += 1, R87 += 1, R88 += 1 };
  s1 -> s2 [71, 74] { R2884 += 1, R2840 += 1, R88 += 1 };
  s1 -> s1 [71, 65535] { R2884 += 1, R2840 += 1, R87 += 1, R88 += 1 };
  s1 -> s8 [75, 75] { R2884 += 1, R2840 += 1, R88 += 1 };
  s1 -> s2 [76, 65535] { R2884 += 1, R2840 += 1, R88 += 1 };
  s2 -> s2 [0, 69] { R2884 += 1, R2840 += 1, R88 += 1 };
  s2 -> s5 [70, 70] { R2884 += 1, R2840 += 1, R88 += 1 };
  s2 -> s6 [70, 70] { R2884 += 1, R2840 += 1, R88 += 1 };
  s2 -> s2 [71, 74] { R2884 += 1, R2840 += 1, R88 += 1 };
  s2 -> s8 [75, 75] { R2884 += 1, R2840 += 1, R88 += 1 };
  s2 -> s2 [76, 65535] { R2884 += 1, R2840 += 1, R88 += 1 };
  s3 -> s1 [0, 69] { R2884 += 1, R2840 += 1, R87 += 1, R88 += 1 };
  s3 -> s2 [0, 69] { R2884 += 1, R2840 += 1, R88 += 1 };
  s3 -> s3 [0, 65535] { R2884 += 1, R2839 += 1, R2840 += 1 };
  s3 -> s4 [70, 70] { R2884 += 1, R2840 += 1, R87 += 1, R88 += 1 };
  s3 -> s5 [70, 70] { R2884 += 1, R2840 += 1, R88 += 1 };
  s3 -> s6 [70, 70] { R2884 += 1, R2840 += 1, R88 += 1 };
  s3 -> s7 [70, 70] { R2884 += 1, R2840 += 1, R87 += 1, R88 += 1 };
  s3 -> s2 [71, 74] { R2884 += 1, R2840 += 1, R88 += 1 };
  s3 -> s1 [71, 65535] { R2884 += 1, R2840 += 1, R87 += 1, R88 += 1 };
  s3 -> s8 [75, 75] { R2884 += 1, R2840 += 1, R88 += 1 };
  s3 -> s2 [76, 65535] { R2884 += 1, R2840 += 1, R88 += 1 };
  s6 -> s6 [0, 74] { R2884 += 1, R2840 += 1, R88 += 1 };
  s6 -> s11 [75, 75] { R2884 += 1, R2840 += 1, R88 += 1 };
  s6 -> s6 [76, 65535] { R2884 += 1, R2840 += 1, R88 += 1 };
  s7 -> s6 [0, 74] { R2884 += 1, R2840 += 1, R88 += 1 };
  s7 -> s7 [0, 65535] { R2884 += 1, R2840 += 1, R87 += 1, R88 += 1 };
  s7 -> s11 [75, 75] { R2884 += 1, R2840 += 1, R88 += 1 };
  s7 -> s6 [76, 65535] { R2884 += 1, R2840 += 1, R88 += 1 };
  s8 -> s8 [0, 69] { R2884 += 1, R2840 += 1, R88 += 1 };
  s8 -> s8 [0, 65535] { R2884 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [70, 70] { R2884 += 1, R2840 += 1, R88 += 1 };
  s8 -> s11 [70, 70] { R2884 += 1, R2840 += 1, R88 += 1 };
  s8 -> s8 [71, 65535] { R2884 += 1, R2840 += 1, R88 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R2884 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s9 [0, 65535];
  s11 -> s12 [0, 65535] { R2884 += 1 };
  s11 -> s11 [0, 65535] { R2884 += 1, R2840 += 1, R88 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R2884 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 69] { R2886 += 1, R2842 += 1, R91 += 1, R92 += 1 };
  s0 -> s0 [0, 65535] { R2885 += 1, R2886 += 1 };
  s0 -> s2 [0, 65535] { R2886 += 1, R2841 += 1, R2842 += 1 };
  s0 -> s3 [70, 70] { R2886 += 1, R2842 += 1, R91 += 1, R92 += 1 };
  s0 -> s4 [70, 70] { R2886 += 1, R2842 += 1, R91 += 1, R92 += 1 };
  s0 -> s1 [71, 65535] { R2886 += 1, R2842 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 69] { R2886 += 1, R2842 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 65535] { R2886 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [70, 70] { R2886 += 1, R2842 += 1, R91 += 1, R92 += 1 };
  s1 -> s4 [70, 70] { R2886 += 1, R2842 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [71, 65535] { R2886 += 1, R2842 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [0, 69] { R2886 += 1, R2842 += 1, R91 += 1, R92 += 1 };
  s2 -> s2 [0, 65535] { R2886 += 1, R2841 += 1, R2842 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [70, 70] { R2886 += 1, R2842 += 1, R91 += 1, R92 += 1 };
  s2 -> s4 [70, 70] { R2886 += 1, R2842 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [71, 65535] { R2886 += 1, R2842 += 1, R91 += 1, R92 += 1 };
  s3 -> s3 [0, 65535] { R2886 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R2886 += 1 };
  s4 -> s4 [0, 65535] { R2886 += 1, R2842 += 1, R91 += 1, R92 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R2886 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 69] { R2888 += 1, R2844 += 1, R97 += 1, R98 += 1 };
  s0 -> s2 [0, 65535] { R2888 += 1, R2843 += 1, R2844 += 1 };
  s0 -> s0 [0, 65535] { R2887 += 1, R2888 += 1 };
  s0 -> s3 [70, 70] { R2888 += 1, R2844 += 1, R97 += 1, R98 += 1 };
  s0 -> s4 [70, 70] { R2888 += 1, R2844 += 1, R97 += 1, R98 += 1 };
  s0 -> s1 [71, 65535] { R2888 += 1, R2844 += 1, R97 += 1, R98 += 1 };
  s1 -> s1 [0, 69] { R2888 += 1, R2844 += 1, R97 += 1, R98 += 1 };
  s1 -> s1 [0, 65535] { R2888 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [70, 70] { R2888 += 1, R2844 += 1, R97 += 1, R98 += 1 };
  s1 -> s4 [70, 70] { R2888 += 1, R2844 += 1, R97 += 1, R98 += 1 };
  s1 -> s1 [71, 65535] { R2888 += 1, R2844 += 1, R97 += 1, R98 += 1 };
  s2 -> s1 [0, 69] { R2888 += 1, R2844 += 1, R97 += 1, R98 += 1 };
  s2 -> s2 [0, 65535] { R2888 += 1, R2843 += 1, R2844 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [70, 70] { R2888 += 1, R2844 += 1, R97 += 1, R98 += 1 };
  s2 -> s4 [70, 70] { R2888 += 1, R2844 += 1, R97 += 1, R98 += 1 };
  s2 -> s1 [71, 65535] { R2888 += 1, R2844 += 1, R97 += 1, R98 += 1 };
  s3 -> s3 [0, 65535] { R2888 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2888 += 1, R2844 += 1, R97 += 1, R98 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R2888 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2888 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 69] { R2890 += 1, R2846 += 1, R2336 += 1, R2337 += 1, R2338 += 1 };
  s0 -> s2 [0, 69] { R2890 += 1, R2846 += 1, R2335 += 1, R2336 += 1 };
  s0 -> s3 [0, 69] { R2890 += 1, R2846 += 1, R2336 += 1, R2338 += 1 };
  s0 -> s4 [0, 65535] { R2890 += 1, R2845 += 1, R2846 += 1 };
  s0 -> s0 [0, 65535] { R2889 += 1, R2890 += 1 };
  s0 -> s5 [70, 70] { R2890 += 1, R2846 += 1, R2335 += 1, R2336 += 1 };
  s0 -> s6 [70, 70] { R2890 += 1, R2846 += 1, R2336 += 1, R2338 += 1 };
  s0 -> s7 [70, 70] { R2890 += 1, R2846 += 1, R2336 += 1, R2337 += 1, R2338 += 1 };
  s0 -> s8 [70, 70] { R2890 += 1, R2846 += 1, R2336 += 1, R2338 += 1 };
  s0 -> s9 [70, 70] { R2890 += 1, R2846 += 1, R2335 += 1, R2336 += 1 };
  s0 -> s10 [70, 70] { R2890 += 1, R2846 += 1, R2336 += 1, R2337 += 1, R2338 += 1 };
  s0 -> s3 [71, 74] { R2890 += 1, R2846 += 1, R2336 += 1, R2338 += 1 };
  s0 -> s1 [71, 65535] { R2890 += 1, R2846 += 1, R2336 += 1, R2337 += 1, R2338 += 1 };
  s0 -> s2 [71, 65535] { R2890 += 1, R2846 += 1, R2335 += 1, R2336 += 1 };
  s0 -> s3 [76, 65535] { R2890 += 1, R2846 += 1, R2336 += 1, R2338 += 1 };
  s1 -> s1 [0, 69] { R2890 += 1, R2846 += 1, R2336 += 1, R2337 += 1, R2338 += 1 };
  s1 -> s3 [0, 69] { R2890 += 1, R2846 += 1, R2336 += 1, R2338 += 1 };
  s1 -> s6 [70, 70] { R2890 += 1, R2846 += 1, R2336 += 1, R2338 += 1 };
  s1 -> s7 [70, 70] { R2890 += 1, R2846 += 1, R2336 += 1, R2337 += 1, R2338 += 1 };
  s1 -> s8 [70, 70] { R2890 += 1, R2846 += 1, R2336 += 1, R2338 += 1 };
  s1 -> s10 [70, 70] { R2890 += 1, R2846 += 1, R2336 += 1, R2337 += 1, R2338 += 1 };
  s1 -> s3 [71, 74] { R2890 += 1, R2846 += 1, R2336 += 1, R2338 += 1 };
  s1 -> s1 [71, 65535] { R2890 += 1, R2846 += 1, R2336 += 1, R2337 += 1, R2338 += 1 };
  s1 -> s3 [76, 65535] { R2890 += 1, R2846 += 1, R2336 += 1, R2338 += 1 };
  s2 -> s1 [0, 69] { R2890 += 1, R2846 += 1, R2336 += 1, R2337 += 1, R2338 += 1 };
  s2 -> s2 [0, 69] { R2890 += 1, R2846 += 1, R2335 += 1, R2336 += 1 };
  s2 -> s3 [0, 69] { R2890 += 1, R2846 += 1, R2336 += 1, R2338 += 1 };
  s2 -> s5 [70, 70] { R2890 += 1, R2846 += 1, R2335 += 1, R2336 += 1 };
  s2 -> s6 [70, 70] { R2890 += 1, R2846 += 1, R2336 += 1, R2338 += 1 };
  s2 -> s7 [70, 70] { R2890 += 1, R2846 += 1, R2336 += 1, R2337 += 1, R2338 += 1 };
  s2 -> s8 [70, 70] { R2890 += 1, R2846 += 1, R2336 += 1, R2338 += 1 };
  s2 -> s9 [70, 70] { R2890 += 1, R2846 += 1, R2335 += 1, R2336 += 1 };
  s2 -> s10 [70, 70] { R2890 += 1, R2846 += 1, R2336 += 1, R2337 += 1, R2338 += 1 };
  s2 -> s3 [71, 74] { R2890 += 1, R2846 += 1, R2336 += 1, R2338 += 1 };
  s2 -> s1 [71, 65535] { R2890 += 1, R2846 += 1, R2336 += 1, R2337 += 1, R2338 += 1 };
  s2 -> s2 [71, 65535] { R2890 += 1, R2846 += 1, R2335 += 1, R2336 += 1 };
  s2 -> s3 [76, 65535] { R2890 += 1, R2846 += 1, R2336 += 1, R2338 += 1 };
  s3 -> s3 [0, 69] { R2890 += 1, R2846 += 1, R2336 += 1, R2338 += 1 };
  s3 -> s11 [0, 65535];
  s3 -> s3 [0, 65535] { R2890 += 1 };
  s3 -> s6 [70, 70] { R2890 += 1, R2846 += 1, R2336 += 1, R2338 += 1 };
  s3 -> s8 [70, 70] { R2890 += 1, R2846 += 1, R2336 += 1, R2338 += 1 };
  s3 -> s3 [71, 74] { R2890 += 1, R2846 += 1, R2336 += 1, R2338 += 1 };
  s3 -> s3 [76, 65535] { R2890 += 1, R2846 += 1, R2336 += 1, R2338 += 1 };
  s4 -> s1 [0, 69] { R2890 += 1, R2846 += 1, R2336 += 1, R2337 += 1, R2338 += 1 };
  s4 -> s2 [0, 69] { R2890 += 1, R2846 += 1, R2335 += 1, R2336 += 1 };
  s4 -> s3 [0, 69] { R2890 += 1, R2846 += 1, R2336 += 1, R2338 += 1 };
  s4 -> s4 [0, 65535] { R2890 += 1, R2845 += 1, R2846 += 1 };
  s4 -> s5 [70, 70] { R2890 += 1, R2846 += 1, R2335 += 1, R2336 += 1 };
  s4 -> s6 [70, 70] { R2890 += 1, R2846 += 1, R2336 += 1, R2338 += 1 };
  s4 -> s7 [70, 70] { R2890 += 1, R2846 += 1, R2336 += 1, R2337 += 1, R2338 += 1 };
  s4 -> s8 [70, 70] { R2890 += 1, R2846 += 1, R2336 += 1, R2338 += 1 };
  s4 -> s9 [70, 70] { R2890 += 1, R2846 += 1, R2335 += 1, R2336 += 1 };
  s4 -> s10 [70, 70] { R2890 += 1, R2846 += 1, R2336 += 1, R2337 += 1, R2338 += 1 };
  s4 -> s3 [71, 74] { R2890 += 1, R2846 += 1, R2336 += 1, R2338 += 1 };
  s4 -> s1 [71, 65535] { R2890 += 1, R2846 += 1, R2336 += 1, R2337 += 1, R2338 += 1 };
  s4 -> s2 [71, 65535] { R2890 += 1, R2846 += 1, R2335 += 1, R2336 += 1 };
  s4 -> s3 [76, 65535] { R2890 += 1, R2846 += 1, R2336 += 1, R2338 += 1 };
  s6 -> s11 [0, 65535];
  s6 -> s6 [0, 65535] { R2890 += 1 };
  s8 -> s8 [0, 74] { R2890 += 1, R2846 += 1, R2336 += 1, R2338 += 1 };
  s8 -> s11 [0, 65535];
  s8 -> s8 [0, 65535] { R2890 += 1 };
  s8 -> s8 [76, 65535] { R2890 += 1, R2846 += 1, R2336 += 1, R2338 += 1 };
  s9 -> s8 [0, 74] { R2890 += 1, R2846 += 1, R2336 += 1, R2338 += 1 };
  s9 -> s9 [0, 65535] { R2890 += 1, R2846 += 1, R2335 += 1, R2336 += 1 };
  s9 -> s10 [0, 65535] { R2890 += 1, R2846 += 1, R2336 += 1, R2337 += 1, R2338 += 1 };
  s9 -> s8 [76, 65535] { R2890 += 1, R2846 += 1, R2336 += 1, R2338 += 1 };
  s10 -> s8 [0, 74] { R2890 += 1, R2846 += 1, R2336 += 1, R2338 += 1 };
  s10 -> s10 [0, 65535] { R2890 += 1, R2846 += 1, R2336 += 1, R2337 += 1, R2338 += 1 };
  s10 -> s8 [76, 65535] { R2890 += 1, R2846 += 1, R2336 += 1, R2338 += 1 };
  s11 -> s11 [0, 65535];
  accepting s3, s6, s8, s11;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 69] { R2892 += 1, R2848 += 1, R2783 += 1, R2784 += 1 };
  s0 -> s2 [0, 69] { R2892 += 1, R2848 += 1, R2784 += 1, R2785 += 1, R2786 += 1 };
  s0 -> s3 [0, 65535] { R2892 += 1, R2847 += 1, R2848 += 1 };
  s0 -> s0 [0, 65535] { R2891 += 1, R2892 += 1 };
  s0 -> s4 [70, 70] { R2892 += 1, R2848 += 1, R2783 += 1, R2784 += 1 };
  s0 -> s5 [70, 70] { R2892 += 1, R2848 += 1, R2783 += 1, R2784 += 1 };
  s0 -> s6 [70, 70] { R2892 += 1, R2848 += 1, R2784 += 1, R2785 += 1, R2786 += 1 };
  s0 -> s7 [70, 70] { R2892 += 1, R2848 += 1, R2784 += 1, R2785 += 1, R2786 += 1 };
  s0 -> s1 [71, 65535] { R2892 += 1, R2848 += 1, R2783 += 1, R2784 += 1 };
  s0 -> s2 [71, 65535] { R2892 += 1, R2848 += 1, R2784 += 1, R2785 += 1, R2786 += 1 };
  s1 -> s1 [0, 69] { R2892 += 1, R2848 += 1, R2783 += 1, R2784 += 1 };
  s1 -> s2 [0, 69] { R2892 += 1, R2848 += 1, R2784 += 1, R2785 += 1, R2786 += 1 };
  s1 -> s4 [70, 70] { R2892 += 1, R2848 += 1, R2783 += 1, R2784 += 1 };
  s1 -> s5 [70, 70] { R2892 += 1, R2848 += 1, R2783 += 1, R2784 += 1 };
  s1 -> s6 [70, 70] { R2892 += 1, R2848 += 1, R2784 += 1, R2785 += 1, R2786 += 1 };
  s1 -> s7 [70, 70] { R2892 += 1, R2848 += 1, R2784 += 1, R2785 += 1, R2786 += 1 };
  s1 -> s1 [71, 65535] { R2892 += 1, R2848 += 1, R2783 += 1, R2784 += 1 };
  s1 -> s2 [71, 65535] { R2892 += 1, R2848 += 1, R2784 += 1, R2785 += 1, R2786 += 1 };
  s2 -> s2 [0, 69] { R2892 += 1, R2848 += 1, R2784 += 1, R2785 += 1, R2786 += 1 };
  s2 -> s9 [0, 65535];
  s2 -> s2 [0, 65535] { R2892 += 1 };
  s2 -> s6 [70, 70] { R2892 += 1, R2848 += 1, R2784 += 1, R2785 += 1, R2786 += 1 };
  s2 -> s7 [70, 70] { R2892 += 1, R2848 += 1, R2784 += 1, R2785 += 1, R2786 += 1 };
  s2 -> s2 [71, 65535] { R2892 += 1, R2848 += 1, R2784 += 1, R2785 += 1, R2786 += 1 };
  s3 -> s1 [0, 69] { R2892 += 1, R2848 += 1, R2783 += 1, R2784 += 1 };
  s3 -> s2 [0, 69] { R2892 += 1, R2848 += 1, R2784 += 1, R2785 += 1, R2786 += 1 };
  s3 -> s3 [0, 65535] { R2892 += 1, R2847 += 1, R2848 += 1 };
  s3 -> s4 [70, 70] { R2892 += 1, R2848 += 1, R2783 += 1, R2784 += 1 };
  s3 -> s5 [70, 70] { R2892 += 1, R2848 += 1, R2783 += 1, R2784 += 1 };
  s3 -> s6 [70, 70] { R2892 += 1, R2848 += 1, R2784 += 1, R2785 += 1, R2786 += 1 };
  s3 -> s7 [70, 70] { R2892 += 1, R2848 += 1, R2784 += 1, R2785 += 1, R2786 += 1 };
  s3 -> s1 [71, 65535] { R2892 += 1, R2848 += 1, R2783 += 1, R2784 += 1 };
  s3 -> s2 [71, 65535] { R2892 += 1, R2848 += 1, R2784 += 1, R2785 += 1, R2786 += 1 };
  s5 -> s5 [0, 65535] { R2892 += 1, R2848 += 1, R2783 += 1, R2784 += 1 };
  s5 -> s7 [0, 65535] { R2892 += 1, R2848 += 1, R2784 += 1, R2785 += 1, R2786 += 1 };
  s6 -> s6 [0, 65535] { R2892 += 1 };
  s6 -> s9 [0, 65535];
  s7 -> s7 [0, 65535] { R2892 += 1, R2848 += 1, R2784 += 1, R2785 += 1, R2786 += 1 };
  s7 -> s8 [0, 65535] { R2892 += 1 };
  s7 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R2892 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s8, s2, s9, s6, s7;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [102, 102];
  accepting s1;
};
};
constraint R2 = R2810 && R3 = R2892 && R23 - R2892 = -1 && R24 = R2892 && R25 - R2892 = -1 && R26 = R2892 && R27 = 0 && R28 = 1 && R29 = 0 && R30 = 1 && R45 + R84 + R83 + -1*R2340 + -1*R2336 - R66 = 0 && R49 + R89 + R87 = 0 && R50 + R90 + R88 + -1*R2340 + -1*R2336 - R66 = 0 && R55 + R96 + R93 + -1*R2342 + -1*R2338 - R68 = 0 && R65 + R2339 + R2335 = 0 && R67 + R2341 + R2337 = 0 && R2809 = 0 && R2833 = 0 && R2834 = 0 && R2839 = 0 && R2840 = 0 && R2845 = 0 && R2846 = 0 && R2847 = 0 && R2848 = 0 && R2849 = 0 && R2850 = R2892 && R2851 = 0 && R2852 = R2892 && R2853 = 0 && R2854 = R2892 && R2855 = 0 && R2856 = R2892 && R2857 = 0 && R2858 = R2892 && R2859 = 0 && R2860 = R2892 && R2861 = 0 && R2862 = R2892 && R2863 = 0 && R2864 = R2892 && R2865 = 0 && R2866 = R2892 && R2867 = 0 && R2868 = R2892 && R2869 = 0 && R2870 = R2892 && R2871 = 0 && R2872 = R2892 && R2873 = 0 && R2874 = R2892 && R2875 = 0 && R2876 = R2892 && R2877 = 0 && R2878 = R2892 && R2879 = 0 && R2880 = R2892 && R2881 = 0 && R2882 = R2892 && R2883 = 0 && R2884 = R2892 && R2885 = 0 && R2886 = R2892 && R2887 = 0 && R2888 = R2892 && R2889 = 0 && R2890 = R2892 && R2891 = 0 && R12 < 1 && R15 < 1 && R16 < 1 && R47 + R86 + R85 < 1 && R61 + R102 + R99 < 1 && -1*R2340 + -1*R2336 - R66 < 1 && -1*R2342 + -1*R2338 - R68 < 1 && -1 < R2810 && 0 < R2892 && (R53 + R94 + R91 != 0 || R54 + R95 + R92 + -1*R2340 + -1*R2336 - R66 = 0 || R66 + R2340 + R2336 < 1) && (R59 + R100 + R97 != 0 || R60 + R101 + R98 + -1*R2340 + -1*R2336 - R66 = 0 || R66 + R2340 + R2336 < 1) && (R66 + R2340 + R2336 != 0 || ((R53 + R94 + R91 != 0 || R54 + R95 + R92 = 0 || R68 + R2342 + R2338 < 1) && (R53 + R94 + R91 = 0 || R68 + R2342 + R2338 < 1))) && (R66 + R2340 + R2336 != 0 || ((R59 + R100 + R97 != 0 || R60 + R101 + R98 = 0 || R68 + R2342 + R2338 < 1) && (R59 + R100 + R97 = 0 || R68 + R2342 + R2338 < 1))) && (R66 + R2340 + R2336 != 0 || ((R73 + R2788 + R2783 != 0 || R74 + R2789 + R2784 = 0 || R68 + R2342 + R2338 < 1) && (R73 + R2788 + R2783 = 0 || R68 + R2342 + R2338 < 1))) && (R68 + R2342 + R2338 != 0 || R77 + R2792 + R2787 = 0 || (R75 + R2790 + R2785 = 0 && R76 + R2791 + R2786 = 0)) && (R73 + R2788 + R2783 != 0 || R66 + R2340 + R2336 + -1*R2789 + -1*R2784 - R74 = 0 || R66 + R2340 + R2336 < 1) && (R75 + R2790 + R2785 != 0 || R68 + R2342 + R2338 + -1*R2791 + -1*R2786 - R76 = 0 || R68 + R2342 + R2338 < 1) && (R2793 != 0 || R2794 = R2810 || (R20 = 0 && R2810 = 0)) && (R2795 != 0 || R2796 = R2810 || (R20 = 0 && R2810 = 0)) && (R2797 != 0 || R2798 = R2810 || (R20 = 0 && R2810 = 0)) && (R2799 != 0 || R2800 = R2810 || (R20 = 0 && R2810 = 0)) && (R2801 != 0 || R2802 = R2810 || (R20 = 0 && R2810 = 0)) && (R2803 != 0 || R2804 = R2810 || (R20 = 0 && R2810 = 0)) && (R2805 != 0 || R2806 = R2810 || (R20 = 0 && R2810 = 0)) && (R2807 != 0 || R2808 = R2810 || (R20 = 0 && R2810 = 0)) && (R2811 != 0 || R2810 = R2812 || (R20 = 0 && R2810 = 0)) && (R21 = 0 || (R2831 = 0 && R2832 = 0)) && (R21 = 0 || (R2835 = 0 && R2836 = 0)) && (R21 = 0 || (R2837 = 0 && R2838 = 0)) && (R21 = 0 || (R2841 = 0 && R2842 = 0)) && (R21 = 0 || (R2843 = 0 && R2844 = 0)) && (R22 = 0 || (R2813 = 0 && R2814 = 0)) && (R22 = 0 || (R2815 = 0 && R2816 = 0)) && (R22 = 0 || (R2817 = 0 && R2818 = 0)) && (R22 = 0 || (R2819 = 0 && R2820 = 0)) && (R22 = 0 || (R2821 = 0 && R2822 = 0)) && (R22 = 0 || (R2823 = 0 && R2824 = 0)) && (R22 = 0 || (R2825 = 0 && R2826 = 0)) && (R22 = 0 || (R2827 = 0 && R2828 = 0)) && (R22 = 0 || (R2829 = 0 && R2830 = 0)) && (R53 + R94 + R91 = 0 || R66 + R2340 + R2336 < 1) && (R59 + R100 + R97 = 0 || R66 + R2340 + R2336 < 1) && (R73 + R2788 + R2783 = 0 || R66 + R2340 + R2336 < 1) && (R75 + R2790 + R2785 = 0 || R68 + R2342 + R2338 < 1) && (R2793 = 0 || (R20 = 0 && R2810 = 0)) && (R2795 = 0 || (R20 = 0 && R2810 = 0)) && (R2797 = 0 || (R20 = 0 && R2810 = 0)) && (R2799 = 0 || (R20 = 0 && R2810 = 0)) && (R2801 = 0 || (R20 = 0 && R2810 = 0)) && (R2803 = 0 || (R20 = 0 && R2810 = 0)) && (R2805 = 0 || (R20 = 0 && R2810 = 0)) && (R2807 = 0 || (R20 = 0 && R2810 = 0)) && (R2811 = 0 || (R20 = 0 && R2810 = 0));
// End of Parikh automata intersection problem
