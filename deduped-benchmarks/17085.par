// Parikh automata intersection problem, generated by OSTRICH+
counter int R12, R15, R16, R2, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R3451, R3452, R3453, R3454, R3455, R3456, R3457, R3458, R3459, R3460, R3461, R3462, R3463, R3464, R3575, R3576, R3577, R3578, R3579, R3580, R3581, R3582, R3583, R3584, R3585, R3586, R3587, R3588, R3589, R3590, R3591, R3592, R3593, R3594, R3595, R3596, R3597, R3598, R3599, R3600, R3601, R3602, R3603, R3604, R3605, R3606, R3607, R3608, R3609, R3610, R3611, R3612, R3613, R3614, R3615, R3616, R3617, R3618, R3619, R3620, R3621, R3622, R3623, R3624, R3625, R3626, R3627, R3628, R3629, R3630, R3631, R3632, R3633, R3634, R3635, R3636, R3637, R3638, R3639, R3640, R3641, R3642, R3643, R3644, R3645, R3646, R3647, R3648, R3649, R3650, R3651, R3652, R3653, R3654, R3655, R3656, R3657, R3658, R3659, R3660, R3661, R3662, R3663, R3664, R3665, R3666, R3667, R3668, R3669, R3670, R3671, R3672, R3673, R3674, R3675, R3676, R3677, R3678, R3679, R3680, R3681, R3682, R3683, R3684, R4, R45, R47, R49, R5, R50, R53, R54, R55, R59, R60, R61, R65, R66, R67, R68, R73, R74, R75, R76, R77, R83, R84, R85, R86, R87, R88, R89, R90, R91, R92, R93, R94, R95, R96;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [70, 70];
  s0 -> s0 [71, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [70, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R15 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 69];
  s0 -> s0 [0, 65535] { R16 += 1 };
  s0 -> s2 [70, 70];
  s0 -> s1 [71, 65535];
  s1 -> s1 [0, 69];
  s1 -> s2 [70, 70];
  s1 -> s1 [71, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R24 += 1 };
  s0 -> s0 [0, 65535] { R23 += 1, R24 += 1 };
  s0 -> s2 [9, 13] { R24 += 1 };
  s0 -> s1 [14, 31] { R24 += 1 };
  s0 -> s2 [32, 32] { R24 += 1 };
  s0 -> s1 [33, 65535] { R24 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R24 += 1 };
  s2 -> s1 [0, 65535] { R24 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R25 += 1, R26 += 1 };
  s1 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R28 += 1 };
  s0 -> s0 [0, 65535] { R27 += 1, R28 += 1 };
  s0 -> s2 [9, 13] { R28 += 1 };
  s0 -> s1 [14, 31] { R28 += 1 };
  s0 -> s2 [32, 32] { R28 += 1 };
  s0 -> s1 [33, 65535] { R28 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R28 += 1 };
  s2 -> s1 [0, 65535] { R28 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R29 += 1, R30 += 1 };
  s1 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R3605 += 1, R3606 += 1 };
  s0 -> s1 [0, 65535] { R3606 += 1, R22 += 1 };
  s1 -> s1 [0, 65535] { R3606 += 1, R22 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 69] { R3608 += 1 };
  s0 -> s0 [0, 65535] { R3607 += 1, R3608 += 1 };
  s0 -> s2 [70, 70] { R3608 += 1 };
  s0 -> s3 [70, 70] { R3608 += 1 };
  s0 -> s1 [76, 65535] { R3608 += 1 };
  s1 -> s1 [0, 69] { R3608 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R3608 += 1 };
  s1 -> s3 [70, 70] { R3608 += 1 };
  s1 -> s1 [76, 65535] { R3608 += 1 };
  s2 -> s2 [0, 70] { R3608 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [76, 65535] { R3608 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 69] { R3610 += 1, R45 += 1 };
  s0 -> s0 [0, 65535] { R3609 += 1, R3610 += 1 };
  s0 -> s2 [70, 70] { R3610 += 1, R45 += 1 };
  s0 -> s3 [70, 70] { R3610 += 1, R45 += 1 };
  s0 -> s1 [71, 65535] { R3610 += 1, R45 += 1 };
  s1 -> s1 [0, 69] { R3610 += 1, R45 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R3610 += 1, R45 += 1 };
  s1 -> s3 [70, 70] { R3610 += 1, R45 += 1 };
  s1 -> s1 [71, 65535] { R3610 += 1, R45 += 1 };
  s2 -> s2 [0, 65535] { R3610 += 1, R45 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 69] { R3612 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R3611 += 1, R3612 += 1 };
  s0 -> s2 [70, 70] { R3612 += 1, R47 += 1 };
  s0 -> s3 [70, 70] { R3612 += 1, R47 += 1 };
  s0 -> s1 [71, 65535] { R3612 += 1, R47 += 1 };
  s1 -> s1 [0, 69] { R3612 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R3612 += 1, R47 += 1 };
  s1 -> s3 [70, 70] { R3612 += 1, R47 += 1 };
  s1 -> s1 [71, 65535] { R3612 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3612 += 1, R47 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 69] { R3614 += 1, R49 += 1, R50 += 1 };
  s0 -> s0 [0, 65535] { R3613 += 1, R3614 += 1 };
  s0 -> s2 [70, 70] { R3614 += 1, R49 += 1, R50 += 1 };
  s0 -> s3 [70, 70] { R3614 += 1, R49 += 1, R50 += 1 };
  s0 -> s1 [71, 65535] { R3614 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 69] { R3614 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R3614 += 1, R49 += 1, R50 += 1 };
  s1 -> s3 [70, 70] { R3614 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [71, 65535] { R3614 += 1, R49 += 1, R50 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3614 += 1, R49 += 1, R50 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 69] { R3616 += 1, R53 += 1, R54 += 1 };
  s0 -> s0 [0, 65535] { R3615 += 1, R3616 += 1 };
  s0 -> s2 [70, 70] { R3616 += 1, R53 += 1, R54 += 1 };
  s0 -> s3 [70, 70] { R3616 += 1, R53 += 1, R54 += 1 };
  s0 -> s1 [71, 65535] { R3616 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 69] { R3616 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R3616 += 1, R53 += 1, R54 += 1 };
  s1 -> s3 [70, 70] { R3616 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [71, 65535] { R3616 += 1, R53 += 1, R54 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R3616 += 1, R53 += 1, R54 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 69] { R3618 += 1, R59 += 1, R60 += 1 };
  s0 -> s0 [0, 65535] { R3617 += 1, R3618 += 1 };
  s0 -> s2 [70, 70] { R3618 += 1, R59 += 1, R60 += 1 };
  s0 -> s3 [70, 70] { R3618 += 1, R59 += 1, R60 += 1 };
  s0 -> s1 [71, 65535] { R3618 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 69] { R3618 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R3618 += 1, R59 += 1, R60 += 1 };
  s1 -> s3 [70, 70] { R3618 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [71, 65535] { R3618 += 1, R59 += 1, R60 += 1 };
  s2 -> s2 [0, 65535] { R3618 += 1, R59 += 1, R60 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 69] { R3620 += 1, R65 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R3619 += 1, R3620 += 1 };
  s0 -> s2 [70, 70] { R3620 += 1, R65 += 1, R66 += 1 };
  s0 -> s3 [70, 70] { R3620 += 1, R65 += 1, R66 += 1 };
  s0 -> s1 [71, 65535] { R3620 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 69] { R3620 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R3620 += 1, R65 += 1, R66 += 1 };
  s1 -> s3 [70, 70] { R3620 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [71, 65535] { R3620 += 1, R65 += 1, R66 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3620 += 1, R65 += 1, R66 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 69] { R3622 += 1, R73 += 1, R74 += 1 };
  s0 -> s0 [0, 65535] { R3621 += 1, R3622 += 1 };
  s0 -> s2 [70, 70] { R3622 += 1, R73 += 1, R74 += 1 };
  s0 -> s3 [70, 70] { R3622 += 1, R73 += 1, R74 += 1 };
  s0 -> s1 [71, 65535] { R3622 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 69] { R3622 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R3622 += 1, R73 += 1, R74 += 1 };
  s1 -> s3 [70, 70] { R3622 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [71, 65535] { R3622 += 1, R73 += 1, R74 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3622 += 1, R73 += 1, R74 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 69] { R3642 += 1 };
  s0 -> s0 [0, 65535] { R3641 += 1, R3642 += 1 };
  s0 -> s2 [70, 70] { R3642 += 1 };
  s0 -> s1 [71, 65535] { R3642 += 1 };
  s1 -> s1 [0, 69] { R3642 += 1 };
  s1 -> s2 [70, 70] { R3642 += 1 };
  s1 -> s1 [71, 65535] { R3642 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3642 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R3643 += 1, R3644 += 1 };
  s0 -> s1 [0, 65535] { R3644 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R3644 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 69] { R3646 += 1 };
  s0 -> s0 [0, 65535] { R3645 += 1, R3646 += 1 };
  s0 -> s2 [0, 65535] { R3646 += 1, R12 += 1 };
  s0 -> s3 [70, 70] { R3646 += 1 };
  s0 -> s1 [71, 65535] { R3646 += 1 };
  s1 -> s1 [0, 69] { R3646 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [70, 70] { R3646 += 1 };
  s1 -> s1 [71, 65535] { R3646 += 1 };
  s2 -> s1 [0, 69] { R3646 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3646 += 1, R12 += 1 };
  s2 -> s3 [70, 70] { R3646 += 1 };
  s2 -> s1 [71, 65535] { R3646 += 1 };
  s3 -> s3 [0, 65535] { R3646 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 69] { R3648 += 1, R3586 += 1 };
  s0 -> s0 [0, 65535] { R3647 += 1, R3648 += 1 };
  s0 -> s2 [0, 65535] { R3648 += 1, R3585 += 1, R3586 += 1 };
  s0 -> s1 [71, 65535] { R3648 += 1, R3586 += 1 };
  s1 -> s1 [0, 69] { R3648 += 1, R3586 += 1 };
  s1 -> s1 [0, 65535] { R3648 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [71, 65535] { R3648 += 1, R3586 += 1 };
  s2 -> s1 [0, 69] { R3648 += 1, R3586 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3648 += 1, R3585 += 1, R3586 += 1 };
  s2 -> s1 [71, 65535] { R3648 += 1, R3586 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R3650 += 1, R3587 += 1, R3588 += 1 };
  s0 -> s0 [0, 65535] { R3649 += 1, R3650 += 1 };
  s0 -> s2 [0, 65535] { R3650 += 1, R3588 += 1, R20 += 1 };
  s1 -> s1 [0, 65535] { R3650 += 1, R3587 += 1, R3588 += 1 };
  s1 -> s2 [0, 65535] { R3650 += 1, R3588 += 1, R20 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3650 += 1, R3588 += 1, R20 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R3650 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3650 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 70] { R3652 += 1, R3590 += 1 };
  s0 -> s2 [0, 65535] { R3652 += 1, R3589 += 1, R3590 += 1 };
  s0 -> s0 [0, 65535] { R3651 += 1, R3652 += 1 };
  s0 -> s1 [75, 65535] { R3652 += 1, R3590 += 1 };
  s1 -> s1 [0, 70] { R3652 += 1, R3590 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3652 += 1 };
  s1 -> s1 [75, 65535] { R3652 += 1, R3590 += 1 };
  s2 -> s1 [0, 70] { R3652 += 1, R3590 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3652 += 1, R3589 += 1, R3590 += 1 };
  s2 -> s1 [75, 65535] { R3652 += 1, R3590 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R3654 += 1, R3592 += 1, R84 += 1 };
  s0 -> s0 [0, 65535] { R3653 += 1, R3654 += 1 };
  s0 -> s2 [0, 65535] { R3654 += 1, R3591 += 1, R3592 += 1 };
  s1 -> s1 [0, 65535] { R3654 += 1, R3592 += 1, R84 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R3654 += 1 };
  s2 -> s1 [0, 65535] { R3654 += 1, R3592 += 1, R84 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3654 += 1, R3591 += 1, R3592 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3654 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 74] { R3656 += 1, R3594 += 1 };
  s0 -> s0 [0, 65535] { R3655 += 1, R3656 += 1 };
  s0 -> s2 [0, 65535] { R3656 += 1, R3594 += 1, R86 += 1 };
  s0 -> s3 [0, 65535] { R3656 += 1, R3593 += 1, R3594 += 1 };
  s0 -> s1 [76, 65535] { R3656 += 1, R3594 += 1 };
  s1 -> s1 [0, 74] { R3656 += 1, R3594 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R3656 += 1 };
  s1 -> s1 [76, 65535] { R3656 += 1, R3594 += 1 };
  s2 -> s1 [0, 74] { R3656 += 1, R3594 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R3656 += 1 };
  s2 -> s2 [0, 65535] { R3656 += 1, R3594 += 1, R86 += 1 };
  s2 -> s1 [76, 65535] { R3656 += 1, R3594 += 1 };
  s3 -> s1 [0, 74] { R3656 += 1, R3594 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R3656 += 1, R3594 += 1, R86 += 1 };
  s3 -> s3 [0, 65535] { R3656 += 1, R3593 += 1, R3594 += 1 };
  s3 -> s1 [76, 65535] { R3656 += 1, R3594 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3656 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 65535] { R3658 += 1, R3596 += 1, R90 += 1 };
  s0 -> s2 [0, 65535] { R3658 += 1, R3596 += 1 };
  s0 -> s0 [0, 65535] { R3657 += 1, R3658 += 1 };
  s0 -> s3 [0, 65535] { R3658 += 1, R3595 += 1, R3596 += 1 };
  s1 -> s1 [0, 65535] { R3658 += 1, R3596 += 1, R90 += 1 };
  s1 -> s2 [0, 65535] { R3658 += 1, R3596 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R3658 += 1 };
  s2 -> s2 [0, 65535] { R3658 += 1, R3596 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R3658 += 1 };
  s3 -> s1 [0, 65535] { R3658 += 1, R3596 += 1, R90 += 1 };
  s3 -> s2 [0, 65535] { R3658 += 1, R3596 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3658 += 1, R3595 += 1, R3596 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3658 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R3660 += 1, R3597 += 1, R3598 += 1 };
  s0 -> s2 [0, 65535] { R3660 += 1, R3598 += 1, R94 += 1, R95 += 1 };
  s0 -> s3 [0, 65535] { R3660 += 1, R3598 += 1, R95 += 1, R96 += 1 };
  s0 -> s0 [0, 65535] { R3659 += 1, R3660 += 1 };
  s1 -> s1 [0, 65535] { R3660 += 1, R3597 += 1, R3598 += 1 };
  s1 -> s2 [0, 65535] { R3660 += 1, R3598 += 1, R94 += 1, R95 += 1 };
  s1 -> s3 [0, 65535] { R3660 += 1, R3598 += 1, R95 += 1, R96 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s4 [0, 65535] { R3660 += 1 };
  s2 -> s2 [0, 65535] { R3660 += 1, R3598 += 1, R94 += 1, R95 += 1 };
  s2 -> s3 [0, 65535] { R3660 += 1, R3598 += 1, R95 += 1, R96 += 1 };
  s2 -> s6 [0, 65535];
  s3 -> s4 [0, 65535] { R3660 += 1 };
  s3 -> s5 [0, 65535] { R3660 += 1, R3598 += 1 };
  s3 -> s3 [0, 65535] { R3660 += 1, R3598 += 1, R95 += 1, R96 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R3660 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s4 [0, 65535] { R3660 += 1 };
  s5 -> s5 [0, 65535] { R3660 += 1, R3598 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 74] { R3662 += 1, R3600 += 1, R3455 += 1 };
  s0 -> s0 [0, 65535] { R3661 += 1, R3662 += 1 };
  s0 -> s2 [0, 65535] { R3662 += 1, R3599 += 1, R3600 += 1 };
  s0 -> s1 [0, 65535] { R3662 += 1, R3600 += 1 };
  s0 -> s1 [76, 65535] { R3662 += 1, R3600 += 1, R3455 += 1 };
  s1 -> s1 [0, 74] { R3662 += 1, R3600 += 1, R3455 += 1 };
  s1 -> s4 [0, 65535] { R3662 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3662 += 1, R3600 += 1 };
  s1 -> s1 [76, 65535] { R3662 += 1, R3600 += 1, R3455 += 1 };
  s2 -> s1 [0, 74] { R3662 += 1, R3600 += 1, R3455 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3662 += 1, R3599 += 1, R3600 += 1 };
  s2 -> s1 [0, 65535] { R3662 += 1, R3600 += 1 };
  s2 -> s1 [76, 65535] { R3662 += 1, R3600 += 1, R3455 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3662 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R3664 += 1, R3602 += 1 };
  s0 -> s2 [0, 65535] { R3664 += 1, R3602 += 1, R3462 += 1, R3464 += 1 };
  s0 -> s0 [0, 65535] { R3663 += 1, R3664 += 1 };
  s0 -> s3 [0, 65535] { R3664 += 1, R3601 += 1, R3602 += 1 };
  s0 -> s4 [0, 65535] { R3664 += 1, R3602 += 1, R3462 += 1 };
  s1 -> s5 [0, 65535] { R3664 += 1 };
  s1 -> s1 [0, 65535] { R3664 += 1, R3602 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s5 [0, 65535] { R3664 += 1 };
  s2 -> s1 [0, 65535] { R3664 += 1, R3602 += 1 };
  s2 -> s2 [0, 65535] { R3664 += 1, R3602 += 1, R3462 += 1, R3464 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s4 [0, 65535] { R3664 += 1, R3602 += 1, R3462 += 1 };
  s3 -> s1 [0, 65535] { R3664 += 1, R3602 += 1 };
  s3 -> s2 [0, 65535] { R3664 += 1, R3602 += 1, R3462 += 1, R3464 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R3664 += 1, R3601 += 1, R3602 += 1 };
  s3 -> s4 [0, 65535] { R3664 += 1, R3602 += 1, R3462 += 1 };
  s4 -> s5 [0, 65535] { R3664 += 1 };
  s4 -> s1 [0, 65535] { R3664 += 1, R3602 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R3664 += 1, R3602 += 1, R3462 += 1 };
  s5 -> s5 [0, 65535] { R3664 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s0 [0, 65535] { R3665 += 1, R3666 += 1 };
  s0 -> s1 [0, 65535] { R3666 += 1, R3603 += 1, R3604 += 1 };
  s0 -> s2 [0, 65535] { R3666 += 1, R3604 += 1 };
  s1 -> s1 [0, 65535] { R3666 += 1, R3603 += 1, R3604 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R3666 += 1, R3604 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R3666 += 1 };
  s2 -> s2 [0, 65535] { R3666 += 1, R3604 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3666 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R3668 += 1, R3624 += 1, R21 += 1 };
  s0 -> s2 [0, 65535] { R3668 += 1, R3623 += 1, R3624 += 1 };
  s0 -> s0 [0, 65535] { R3667 += 1, R3668 += 1 };
  s1 -> s4 [0, 65535] { R3668 += 1 };
  s1 -> s1 [0, 65535] { R3668 += 1, R3624 += 1, R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3668 += 1, R3624 += 1, R21 += 1 };
  s2 -> s2 [0, 65535] { R3668 += 1, R3623 += 1, R3624 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3668 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 69] { R3670 += 1, R3626 += 1 };
  s0 -> s0 [0, 65535] { R3669 += 1, R3670 += 1 };
  s0 -> s2 [0, 65535] { R3670 += 1, R3625 += 1, R3626 += 1 };
  s0 -> s3 [70, 70] { R3670 += 1, R3626 += 1 };
  s0 -> s4 [70, 70] { R3670 += 1, R3626 += 1 };
  s0 -> s5 [75, 75] { R3670 += 1, R3626 += 1 };
  s0 -> s1 [76, 65535] { R3670 += 1, R3626 += 1 };
  s1 -> s1 [0, 69] { R3670 += 1, R3626 += 1 };
  s1 -> s3 [70, 70] { R3670 += 1, R3626 += 1 };
  s1 -> s4 [70, 70] { R3670 += 1, R3626 += 1 };
  s1 -> s5 [75, 75] { R3670 += 1, R3626 += 1 };
  s1 -> s1 [76, 65535] { R3670 += 1, R3626 += 1 };
  s2 -> s1 [0, 69] { R3670 += 1, R3626 += 1 };
  s2 -> s2 [0, 65535] { R3670 += 1, R3625 += 1, R3626 += 1 };
  s2 -> s3 [70, 70] { R3670 += 1, R3626 += 1 };
  s2 -> s4 [70, 70] { R3670 += 1, R3626 += 1 };
  s2 -> s5 [75, 75] { R3670 += 1, R3626 += 1 };
  s2 -> s1 [76, 65535] { R3670 += 1, R3626 += 1 };
  s4 -> s4 [0, 70] { R3670 += 1, R3626 += 1 };
  s4 -> s8 [75, 75] { R3670 += 1, R3626 += 1 };
  s4 -> s4 [76, 65535] { R3670 += 1, R3626 += 1 };
  s5 -> s5 [0, 69] { R3670 += 1, R3626 += 1 };
  s5 -> s5 [0, 65535] { R3670 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [70, 70] { R3670 += 1, R3626 += 1 };
  s5 -> s8 [70, 70] { R3670 += 1, R3626 += 1 };
  s5 -> s5 [75, 65535] { R3670 += 1, R3626 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R3670 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 70] { R3670 += 1, R3626 += 1 };
  s8 -> s8 [0, 65535] { R3670 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [75, 65535] { R3670 += 1, R3626 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 69] { R3672 += 1, R3628 += 1, R83 += 1 };
  s0 -> s2 [0, 65535] { R3672 += 1, R3627 += 1, R3628 += 1 };
  s0 -> s0 [0, 65535] { R3671 += 1, R3672 += 1 };
  s0 -> s3 [70, 70] { R3672 += 1, R3628 += 1, R83 += 1 };
  s0 -> s4 [70, 70] { R3672 += 1, R3628 += 1, R83 += 1 };
  s0 -> s1 [71, 65535] { R3672 += 1, R3628 += 1, R83 += 1 };
  s1 -> s1 [0, 69] { R3672 += 1, R3628 += 1, R83 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3672 += 1 };
  s1 -> s3 [70, 70] { R3672 += 1, R3628 += 1, R83 += 1 };
  s1 -> s4 [70, 70] { R3672 += 1, R3628 += 1, R83 += 1 };
  s1 -> s1 [71, 65535] { R3672 += 1, R3628 += 1, R83 += 1 };
  s2 -> s1 [0, 69] { R3672 += 1, R3628 += 1, R83 += 1 };
  s2 -> s2 [0, 65535] { R3672 += 1, R3627 += 1, R3628 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [70, 70] { R3672 += 1, R3628 += 1, R83 += 1 };
  s2 -> s4 [70, 70] { R3672 += 1, R3628 += 1, R83 += 1 };
  s2 -> s1 [71, 65535] { R3672 += 1, R3628 += 1, R83 += 1 };
  s3 -> s3 [0, 65535] { R3672 += 1, R3628 += 1, R83 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R3672 += 1 };
  s4 -> s4 [0, 65535] { R3672 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3672 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 69] { R3674 += 1, R3630 += 1, R85 += 1 };
  s0 -> s2 [0, 65535] { R3674 += 1, R3629 += 1, R3630 += 1 };
  s0 -> s0 [0, 65535] { R3673 += 1, R3674 += 1 };
  s0 -> s3 [70, 70] { R3674 += 1, R3630 += 1, R85 += 1 };
  s0 -> s4 [70, 70] { R3674 += 1, R3630 += 1, R85 += 1 };
  s0 -> s1 [71, 65535] { R3674 += 1, R3630 += 1, R85 += 1 };
  s1 -> s1 [0, 69] { R3674 += 1, R3630 += 1, R85 += 1 };
  s1 -> s1 [0, 65535] { R3674 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [70, 70] { R3674 += 1, R3630 += 1, R85 += 1 };
  s1 -> s4 [70, 70] { R3674 += 1, R3630 += 1, R85 += 1 };
  s1 -> s1 [71, 65535] { R3674 += 1, R3630 += 1, R85 += 1 };
  s2 -> s1 [0, 69] { R3674 += 1, R3630 += 1, R85 += 1 };
  s2 -> s2 [0, 65535] { R3674 += 1, R3629 += 1, R3630 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [70, 70] { R3674 += 1, R3630 += 1, R85 += 1 };
  s2 -> s4 [70, 70] { R3674 += 1, R3630 += 1, R85 += 1 };
  s2 -> s1 [71, 65535] { R3674 += 1, R3630 += 1, R85 += 1 };
  s3 -> s6 [0, 65535] { R3674 += 1 };
  s3 -> s3 [0, 65535] { R3674 += 1, R3630 += 1, R85 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3674 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3674 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 69] { R3676 += 1, R3632 += 1, R88 += 1 };
  s0 -> s2 [0, 69] { R3676 += 1, R3632 += 1, R87 += 1, R88 += 1 };
  s0 -> s0 [0, 65535] { R3675 += 1, R3676 += 1 };
  s0 -> s3 [0, 65535] { R3676 += 1, R3631 += 1, R3632 += 1 };
  s0 -> s4 [70, 70] { R3676 += 1, R3632 += 1, R88 += 1 };
  s0 -> s5 [70, 70] { R3676 += 1, R3632 += 1, R87 += 1, R88 += 1 };
  s0 -> s6 [70, 70] { R3676 += 1, R3632 += 1, R88 += 1 };
  s0 -> s7 [70, 70] { R3676 += 1, R3632 += 1, R87 += 1, R88 += 1 };
  s0 -> s1 [71, 74] { R3676 += 1, R3632 += 1, R88 += 1 };
  s0 -> s2 [71, 65535] { R3676 += 1, R3632 += 1, R87 += 1, R88 += 1 };
  s0 -> s8 [75, 75] { R3676 += 1, R3632 += 1, R88 += 1 };
  s0 -> s1 [76, 65535] { R3676 += 1, R3632 += 1, R88 += 1 };
  s1 -> s1 [0, 69] { R3676 += 1, R3632 += 1, R88 += 1 };
  s1 -> s4 [70, 70] { R3676 += 1, R3632 += 1, R88 += 1 };
  s1 -> s6 [70, 70] { R3676 += 1, R3632 += 1, R88 += 1 };
  s1 -> s1 [71, 74] { R3676 += 1, R3632 += 1, R88 += 1 };
  s1 -> s8 [75, 75] { R3676 += 1, R3632 += 1, R88 += 1 };
  s1 -> s1 [76, 65535] { R3676 += 1, R3632 += 1, R88 += 1 };
  s2 -> s1 [0, 69] { R3676 += 1, R3632 += 1, R88 += 1 };
  s2 -> s2 [0, 69] { R3676 += 1, R3632 += 1, R87 += 1, R88 += 1 };
  s2 -> s4 [70, 70] { R3676 += 1, R3632 += 1, R88 += 1 };
  s2 -> s5 [70, 70] { R3676 += 1, R3632 += 1, R87 += 1, R88 += 1 };
  s2 -> s6 [70, 70] { R3676 += 1, R3632 += 1, R88 += 1 };
  s2 -> s7 [70, 70] { R3676 += 1, R3632 += 1, R87 += 1, R88 += 1 };
  s2 -> s1 [71, 74] { R3676 += 1, R3632 += 1, R88 += 1 };
  s2 -> s2 [71, 65535] { R3676 += 1, R3632 += 1, R87 += 1, R88 += 1 };
  s2 -> s8 [75, 75] { R3676 += 1, R3632 += 1, R88 += 1 };
  s2 -> s1 [76, 65535] { R3676 += 1, R3632 += 1, R88 += 1 };
  s3 -> s1 [0, 69] { R3676 += 1, R3632 += 1, R88 += 1 };
  s3 -> s2 [0, 69] { R3676 += 1, R3632 += 1, R87 += 1, R88 += 1 };
  s3 -> s3 [0, 65535] { R3676 += 1, R3631 += 1, R3632 += 1 };
  s3 -> s4 [70, 70] { R3676 += 1, R3632 += 1, R88 += 1 };
  s3 -> s5 [70, 70] { R3676 += 1, R3632 += 1, R87 += 1, R88 += 1 };
  s3 -> s6 [70, 70] { R3676 += 1, R3632 += 1, R88 += 1 };
  s3 -> s7 [70, 70] { R3676 += 1, R3632 += 1, R87 += 1, R88 += 1 };
  s3 -> s1 [71, 74] { R3676 += 1, R3632 += 1, R88 += 1 };
  s3 -> s2 [71, 65535] { R3676 += 1, R3632 += 1, R87 += 1, R88 += 1 };
  s3 -> s8 [75, 75] { R3676 += 1, R3632 += 1, R88 += 1 };
  s3 -> s1 [76, 65535] { R3676 += 1, R3632 += 1, R88 += 1 };
  s6 -> s6 [0, 74] { R3676 += 1, R3632 += 1, R88 += 1 };
  s6 -> s10 [75, 75] { R3676 += 1, R3632 += 1, R88 += 1 };
  s6 -> s6 [76, 65535] { R3676 += 1, R3632 += 1, R88 += 1 };
  s7 -> s6 [0, 74] { R3676 += 1, R3632 += 1, R88 += 1 };
  s7 -> s7 [0, 65535] { R3676 += 1, R3632 += 1, R87 += 1, R88 += 1 };
  s7 -> s10 [75, 75] { R3676 += 1, R3632 += 1, R88 += 1 };
  s7 -> s6 [76, 65535] { R3676 += 1, R3632 += 1, R88 += 1 };
  s8 -> s8 [0, 69] { R3676 += 1, R3632 += 1, R88 += 1 };
  s8 -> s8 [0, 65535] { R3676 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [70, 70] { R3676 += 1, R3632 += 1, R88 += 1 };
  s8 -> s11 [70, 70] { R3676 += 1, R3632 += 1, R88 += 1 };
  s8 -> s8 [71, 65535] { R3676 += 1, R3632 += 1, R88 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R3676 += 1, R3632 += 1, R88 += 1 };
  s10 -> s12 [0, 65535] { R3676 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R3676 += 1 };
  s11 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R3676 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 69] { R3678 += 1, R3634 += 1, R91 += 1, R92 += 1 };
  s0 -> s0 [0, 65535] { R3677 += 1, R3678 += 1 };
  s0 -> s2 [0, 65535] { R3678 += 1, R3633 += 1, R3634 += 1 };
  s0 -> s3 [70, 70] { R3678 += 1, R3634 += 1, R91 += 1, R92 += 1 };
  s0 -> s4 [70, 70] { R3678 += 1, R3634 += 1, R91 += 1, R92 += 1 };
  s0 -> s1 [71, 65535] { R3678 += 1, R3634 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 69] { R3678 += 1, R3634 += 1, R91 += 1, R92 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3678 += 1 };
  s1 -> s3 [70, 70] { R3678 += 1, R3634 += 1, R91 += 1, R92 += 1 };
  s1 -> s4 [70, 70] { R3678 += 1, R3634 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [71, 65535] { R3678 += 1, R3634 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [0, 69] { R3678 += 1, R3634 += 1, R91 += 1, R92 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3678 += 1, R3633 += 1, R3634 += 1 };
  s2 -> s3 [70, 70] { R3678 += 1, R3634 += 1, R91 += 1, R92 += 1 };
  s2 -> s4 [70, 70] { R3678 += 1, R3634 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [71, 65535] { R3678 += 1, R3634 += 1, R91 += 1, R92 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R3678 += 1 };
  s3 -> s3 [0, 65535] { R3678 += 1, R3634 += 1, R91 += 1, R92 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3678 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3678 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 69] { R3680 += 1, R3636 += 1, R3452 += 1 };
  s0 -> s2 [0, 69] { R3680 += 1, R3636 += 1, R3451 += 1, R3452 += 1 };
  s0 -> s3 [0, 69] { R3680 += 1, R3636 += 1, R3452 += 1, R3453 += 1 };
  s0 -> s4 [0, 65535] { R3680 += 1, R3635 += 1, R3636 += 1 };
  s0 -> s0 [0, 65535] { R3679 += 1, R3680 += 1 };
  s0 -> s5 [70, 70] { R3680 += 1, R3636 += 1, R3452 += 1 };
  s0 -> s6 [70, 70] { R3680 += 1, R3636 += 1, R3452 += 1 };
  s0 -> s7 [70, 70] { R3680 += 1, R3636 += 1, R3452 += 1, R3453 += 1 };
  s0 -> s8 [70, 70] { R3680 += 1, R3636 += 1, R3451 += 1, R3452 += 1 };
  s0 -> s9 [70, 70] { R3680 += 1, R3636 += 1, R3452 += 1, R3453 += 1 };
  s0 -> s10 [70, 70] { R3680 += 1, R3636 += 1, R3451 += 1, R3452 += 1 };
  s0 -> s1 [71, 74] { R3680 += 1, R3636 += 1, R3452 += 1 };
  s0 -> s2 [71, 65535] { R3680 += 1, R3636 += 1, R3451 += 1, R3452 += 1 };
  s0 -> s3 [71, 65535] { R3680 += 1, R3636 += 1, R3452 += 1, R3453 += 1 };
  s0 -> s1 [76, 65535] { R3680 += 1, R3636 += 1, R3452 += 1 };
  s1 -> s1 [0, 69] { R3680 += 1, R3636 += 1, R3452 += 1 };
  s1 -> s1 [0, 65535] { R3680 += 1 };
  s1 -> s12 [0, 65535];
  s1 -> s5 [70, 70] { R3680 += 1, R3636 += 1 };
  s1 -> s6 [70, 70] { R3680 += 1, R3636 += 1 };
  s1 -> s1 [71, 74] { R3680 += 1, R3636 += 1, R3452 += 1 };
  s1 -> s1 [71, 65535] { R3680 += 1, R3636 += 1 };
  s1 -> s1 [76, 65535] { R3680 += 1, R3636 += 1, R3452 += 1 };
  s2 -> s1 [0, 69] { R3680 += 1, R3636 += 1, R3452 += 1 };
  s2 -> s2 [0, 69] { R3680 += 1, R3636 += 1, R3451 += 1, R3452 += 1 };
  s2 -> s3 [0, 69] { R3680 += 1, R3636 += 1, R3452 += 1, R3453 += 1 };
  s2 -> s5 [70, 70] { R3680 += 1, R3636 += 1, R3452 += 1 };
  s2 -> s6 [70, 70] { R3680 += 1, R3636 += 1, R3452 += 1 };
  s2 -> s7 [70, 70] { R3680 += 1, R3636 += 1, R3452 += 1, R3453 += 1 };
  s2 -> s8 [70, 70] { R3680 += 1, R3636 += 1, R3451 += 1, R3452 += 1 };
  s2 -> s9 [70, 70] { R3680 += 1, R3636 += 1, R3452 += 1, R3453 += 1 };
  s2 -> s10 [70, 70] { R3680 += 1, R3636 += 1, R3451 += 1, R3452 += 1 };
  s2 -> s1 [71, 74] { R3680 += 1, R3636 += 1, R3452 += 1 };
  s2 -> s2 [71, 65535] { R3680 += 1, R3636 += 1, R3451 += 1, R3452 += 1 };
  s2 -> s3 [71, 65535] { R3680 += 1, R3636 += 1, R3452 += 1, R3453 += 1 };
  s2 -> s1 [76, 65535] { R3680 += 1, R3636 += 1, R3452 += 1 };
  s3 -> s1 [0, 69] { R3680 += 1, R3636 += 1, R3452 += 1 };
  s3 -> s3 [0, 69] { R3680 += 1, R3636 += 1, R3452 += 1, R3453 += 1 };
  s3 -> s5 [70, 70] { R3680 += 1, R3636 += 1, R3452 += 1 };
  s3 -> s6 [70, 70] { R3680 += 1, R3636 += 1, R3452 += 1 };
  s3 -> s7 [70, 70] { R3680 += 1, R3636 += 1, R3452 += 1, R3453 += 1 };
  s3 -> s9 [70, 70] { R3680 += 1, R3636 += 1, R3452 += 1, R3453 += 1 };
  s3 -> s1 [71, 74] { R3680 += 1, R3636 += 1, R3452 += 1 };
  s3 -> s3 [71, 65535] { R3680 += 1, R3636 += 1, R3452 += 1, R3453 += 1 };
  s3 -> s1 [76, 65535] { R3680 += 1, R3636 += 1, R3452 += 1 };
  s4 -> s1 [0, 69] { R3680 += 1, R3636 += 1, R3452 += 1 };
  s4 -> s2 [0, 69] { R3680 += 1, R3636 += 1, R3451 += 1, R3452 += 1 };
  s4 -> s3 [0, 69] { R3680 += 1, R3636 += 1, R3452 += 1, R3453 += 1 };
  s4 -> s4 [0, 65535] { R3680 += 1, R3635 += 1, R3636 += 1 };
  s4 -> s5 [70, 70] { R3680 += 1, R3636 += 1, R3452 += 1 };
  s4 -> s6 [70, 70] { R3680 += 1, R3636 += 1, R3452 += 1 };
  s4 -> s7 [70, 70] { R3680 += 1, R3636 += 1, R3452 += 1, R3453 += 1 };
  s4 -> s8 [70, 70] { R3680 += 1, R3636 += 1, R3451 += 1, R3452 += 1 };
  s4 -> s9 [70, 70] { R3680 += 1, R3636 += 1, R3452 += 1, R3453 += 1 };
  s4 -> s10 [70, 70] { R3680 += 1, R3636 += 1, R3451 += 1, R3452 += 1 };
  s4 -> s1 [71, 74] { R3680 += 1, R3636 += 1, R3452 += 1 };
  s4 -> s2 [71, 65535] { R3680 += 1, R3636 += 1, R3451 += 1, R3452 += 1 };
  s4 -> s3 [71, 65535] { R3680 += 1, R3636 += 1, R3452 += 1, R3453 += 1 };
  s4 -> s1 [76, 65535] { R3680 += 1, R3636 += 1, R3452 += 1 };
  s5 -> s5 [0, 65535] { R3680 += 1 };
  s5 -> s12 [0, 65535];
  s6 -> s6 [0, 74] { R3680 += 1, R3636 += 1, R3452 += 1 };
  s6 -> s6 [0, 65535] { R3680 += 1, R3636 += 1 };
  s6 -> s11 [0, 65535] { R3680 += 1 };
  s6 -> s12 [0, 65535];
  s6 -> s6 [76, 65535] { R3680 += 1, R3636 += 1, R3452 += 1 };
  s7 -> s6 [0, 74] { R3680 += 1, R3636 += 1, R3452 += 1 };
  s7 -> s7 [0, 65535] { R3680 += 1, R3636 += 1, R3452 += 1, R3453 += 1 };
  s7 -> s6 [76, 65535] { R3680 += 1, R3636 += 1, R3452 += 1 };
  s10 -> s6 [0, 74] { R3680 += 1, R3636 += 1, R3452 += 1 };
  s10 -> s7 [0, 65535] { R3680 += 1, R3636 += 1, R3452 += 1, R3453 += 1 };
  s10 -> s10 [0, 65535] { R3680 += 1, R3636 += 1, R3451 += 1, R3452 += 1 };
  s10 -> s6 [76, 65535] { R3680 += 1, R3636 += 1, R3452 += 1 };
  s11 -> s11 [0, 65535] { R3680 += 1 };
  s11 -> s12 [0, 65535];
  s12 -> s12 [0, 65535];
  accepting s12, s5, s6, s1, s11;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 69] { R3682 += 1, R3638 += 1, R3458 += 1, R3459 += 1, R3460 += 1 };
  s0 -> s2 [0, 69] { R3682 += 1, R3638 += 1, R3458 += 1, R3460 += 1 };
  s0 -> s3 [0, 69] { R3682 += 1, R3638 += 1, R3457 += 1, R3458 += 1 };
  s0 -> s4 [0, 65535] { R3682 += 1, R3637 += 1, R3638 += 1 };
  s0 -> s0 [0, 65535] { R3681 += 1, R3682 += 1 };
  s0 -> s5 [70, 70] { R3682 += 1, R3638 += 1, R3458 += 1, R3460 += 1 };
  s0 -> s6 [70, 70] { R3682 += 1, R3638 += 1, R3458 += 1, R3459 += 1, R3460 += 1 };
  s0 -> s7 [70, 70] { R3682 += 1, R3638 += 1, R3458 += 1, R3460 += 1 };
  s0 -> s8 [70, 70] { R3682 += 1, R3638 += 1, R3457 += 1, R3458 += 1 };
  s0 -> s9 [70, 70] { R3682 += 1, R3638 += 1, R3457 += 1, R3458 += 1 };
  s0 -> s10 [70, 70] { R3682 += 1, R3638 += 1, R3458 += 1, R3459 += 1, R3460 += 1 };
  s0 -> s2 [71, 74] { R3682 += 1, R3638 += 1, R3458 += 1, R3460 += 1 };
  s0 -> s1 [71, 65535] { R3682 += 1, R3638 += 1, R3458 += 1, R3459 += 1, R3460 += 1 };
  s0 -> s3 [71, 65535] { R3682 += 1, R3638 += 1, R3457 += 1, R3458 += 1 };
  s0 -> s11 [75, 75] { R3682 += 1, R3638 += 1, R3458 += 1, R3460 += 1 };
  s0 -> s2 [76, 65535] { R3682 += 1, R3638 += 1, R3458 += 1, R3460 += 1 };
  s1 -> s1 [0, 69] { R3682 += 1, R3638 += 1, R3458 += 1, R3459 += 1, R3460 += 1 };
  s1 -> s2 [0, 69] { R3682 += 1, R3638 += 1, R3458 += 1, R3460 += 1 };
  s1 -> s5 [70, 70] { R3682 += 1, R3638 += 1, R3458 += 1, R3460 += 1 };
  s1 -> s6 [70, 70] { R3682 += 1, R3638 += 1, R3458 += 1, R3459 += 1, R3460 += 1 };
  s1 -> s7 [70, 70] { R3682 += 1, R3638 += 1, R3458 += 1, R3460 += 1 };
  s1 -> s10 [70, 70] { R3682 += 1, R3638 += 1, R3458 += 1, R3459 += 1, R3460 += 1 };
  s1 -> s2 [71, 74] { R3682 += 1, R3638 += 1, R3458 += 1, R3460 += 1 };
  s1 -> s1 [71, 65535] { R3682 += 1, R3638 += 1, R3458 += 1, R3459 += 1, R3460 += 1 };
  s1 -> s11 [75, 75] { R3682 += 1, R3638 += 1, R3458 += 1, R3460 += 1 };
  s1 -> s2 [76, 65535] { R3682 += 1, R3638 += 1, R3458 += 1, R3460 += 1 };
  s2 -> s2 [0, 69] { R3682 += 1, R3638 += 1, R3458 += 1, R3460 += 1 };
  s2 -> s5 [70, 70] { R3682 += 1, R3638 += 1, R3458 += 1, R3460 += 1 };
  s2 -> s7 [70, 70] { R3682 += 1, R3638 += 1, R3458 += 1, R3460 += 1 };
  s2 -> s2 [71, 74] { R3682 += 1, R3638 += 1, R3458 += 1, R3460 += 1 };
  s2 -> s11 [75, 75] { R3682 += 1, R3638 += 1, R3458 += 1, R3460 += 1 };
  s2 -> s2 [76, 65535] { R3682 += 1, R3638 += 1, R3458 += 1, R3460 += 1 };
  s3 -> s1 [0, 69] { R3682 += 1, R3638 += 1, R3458 += 1, R3459 += 1, R3460 += 1 };
  s3 -> s2 [0, 69] { R3682 += 1, R3638 += 1, R3458 += 1, R3460 += 1 };
  s3 -> s3 [0, 69] { R3682 += 1, R3638 += 1, R3457 += 1, R3458 += 1 };
  s3 -> s5 [70, 70] { R3682 += 1, R3638 += 1, R3458 += 1, R3460 += 1 };
  s3 -> s6 [70, 70] { R3682 += 1, R3638 += 1, R3458 += 1, R3459 += 1, R3460 += 1 };
  s3 -> s7 [70, 70] { R3682 += 1, R3638 += 1, R3458 += 1, R3460 += 1 };
  s3 -> s8 [70, 70] { R3682 += 1, R3638 += 1, R3457 += 1, R3458 += 1 };
  s3 -> s9 [70, 70] { R3682 += 1, R3638 += 1, R3457 += 1, R3458 += 1 };
  s3 -> s10 [70, 70] { R3682 += 1, R3638 += 1, R3458 += 1, R3459 += 1, R3460 += 1 };
  s3 -> s2 [71, 74] { R3682 += 1, R3638 += 1, R3458 += 1, R3460 += 1 };
  s3 -> s1 [71, 65535] { R3682 += 1, R3638 += 1, R3458 += 1, R3459 += 1, R3460 += 1 };
  s3 -> s3 [71, 65535] { R3682 += 1, R3638 += 1, R3457 += 1, R3458 += 1 };
  s3 -> s11 [75, 75] { R3682 += 1, R3638 += 1, R3458 += 1, R3460 += 1 };
  s3 -> s2 [76, 65535] { R3682 += 1, R3638 += 1, R3458 += 1, R3460 += 1 };
  s4 -> s1 [0, 69] { R3682 += 1, R3638 += 1, R3458 += 1, R3459 += 1, R3460 += 1 };
  s4 -> s2 [0, 69] { R3682 += 1, R3638 += 1, R3458 += 1, R3460 += 1 };
  s4 -> s3 [0, 69] { R3682 += 1, R3638 += 1, R3457 += 1, R3458 += 1 };
  s4 -> s4 [0, 65535] { R3682 += 1, R3637 += 1, R3638 += 1 };
  s4 -> s5 [70, 70] { R3682 += 1, R3638 += 1, R3458 += 1, R3460 += 1 };
  s4 -> s6 [70, 70] { R3682 += 1, R3638 += 1, R3458 += 1, R3459 += 1, R3460 += 1 };
  s4 -> s7 [70, 70] { R3682 += 1, R3638 += 1, R3458 += 1, R3460 += 1 };
  s4 -> s8 [70, 70] { R3682 += 1, R3638 += 1, R3457 += 1, R3458 += 1 };
  s4 -> s9 [70, 70] { R3682 += 1, R3638 += 1, R3457 += 1, R3458 += 1 };
  s4 -> s10 [70, 70] { R3682 += 1, R3638 += 1, R3458 += 1, R3459 += 1, R3460 += 1 };
  s4 -> s2 [71, 74] { R3682 += 1, R3638 += 1, R3458 += 1, R3460 += 1 };
  s4 -> s1 [71, 65535] { R3682 += 1, R3638 += 1, R3458 += 1, R3459 += 1, R3460 += 1 };
  s4 -> s3 [71, 65535] { R3682 += 1, R3638 += 1, R3457 += 1, R3458 += 1 };
  s4 -> s11 [75, 75] { R3682 += 1, R3638 += 1, R3458 += 1, R3460 += 1 };
  s4 -> s2 [76, 65535] { R3682 += 1, R3638 += 1, R3458 += 1, R3460 += 1 };
  s7 -> s7 [0, 74] { R3682 += 1, R3638 += 1, R3458 += 1, R3460 += 1 };
  s7 -> s14 [75, 75] { R3682 += 1, R3638 += 1, R3458 += 1, R3460 += 1 };
  s7 -> s7 [76, 65535] { R3682 += 1, R3638 += 1, R3458 += 1, R3460 += 1 };
  s9 -> s7 [0, 74] { R3682 += 1, R3638 += 1, R3458 += 1, R3460 += 1 };
  s9 -> s9 [0, 65535] { R3682 += 1, R3638 += 1, R3457 += 1, R3458 += 1 };
  s9 -> s10 [0, 65535] { R3682 += 1, R3638 += 1, R3458 += 1, R3459 += 1, R3460 += 1 };
  s9 -> s14 [75, 75] { R3682 += 1, R3638 += 1, R3458 += 1, R3460 += 1 };
  s9 -> s7 [76, 65535] { R3682 += 1, R3638 += 1, R3458 += 1, R3460 += 1 };
  s10 -> s7 [0, 74] { R3682 += 1, R3638 += 1, R3458 += 1, R3460 += 1 };
  s10 -> s10 [0, 65535] { R3682 += 1, R3638 += 1, R3458 += 1, R3459 += 1, R3460 += 1 };
  s10 -> s14 [75, 75] { R3682 += 1, R3638 += 1, R3458 += 1, R3460 += 1 };
  s10 -> s7 [76, 65535] { R3682 += 1, R3638 += 1, R3458 += 1, R3460 += 1 };
  s11 -> s11 [0, 69] { R3682 += 1, R3638 += 1, R3458 += 1, R3460 += 1 };
  s11 -> s12 [0, 65535];
  s11 -> s11 [0, 65535] { R3682 += 1 };
  s11 -> s13 [70, 70] { R3682 += 1, R3638 += 1, R3458 += 1, R3460 += 1 };
  s11 -> s14 [70, 70] { R3682 += 1, R3638 += 1, R3458 += 1, R3460 += 1 };
  s11 -> s11 [71, 65535] { R3682 += 1, R3638 += 1, R3458 += 1, R3460 += 1 };
  s12 -> s12 [0, 65535];
  s13 -> s13 [0, 65535] { R3682 += 1 };
  s13 -> s12 [0, 65535];
  s14 -> s12 [0, 65535];
  s14 -> s15 [0, 65535] { R3682 += 1 };
  s14 -> s14 [0, 65535] { R3682 += 1, R3638 += 1, R3458 += 1, R3460 += 1 };
  s15 -> s12 [0, 65535];
  s15 -> s15 [0, 65535] { R3682 += 1 };
  accepting s12, s13, s14, s15, s11;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 69] { R3684 += 1, R3640 += 1, R3576 += 1, R3578 += 1, R3579 += 1 };
  s0 -> s2 [0, 69] { R3684 += 1, R3640 += 1, R3575 += 1, R3576 += 1 };
  s0 -> s3 [0, 69] { R3684 += 1, R3640 += 1, R3576 += 1, R3577 += 1, R3578 += 1 };
  s0 -> s0 [0, 65535] { R3683 += 1, R3684 += 1 };
  s0 -> s4 [0, 65535] { R3684 += 1, R3639 += 1, R3640 += 1 };
  s0 -> s5 [70, 70] { R3684 += 1, R3640 += 1, R3575 += 1, R3576 += 1 };
  s0 -> s6 [70, 70] { R3684 += 1, R3640 += 1, R3576 += 1, R3577 += 1, R3578 += 1 };
  s0 -> s7 [70, 70] { R3684 += 1, R3640 += 1, R3576 += 1, R3577 += 1, R3578 += 1 };
  s0 -> s8 [70, 70] { R3684 += 1, R3640 += 1, R3576 += 1, R3578 += 1, R3579 += 1 };
  s0 -> s9 [70, 70] { R3684 += 1, R3640 += 1, R3575 += 1, R3576 += 1 };
  s0 -> s10 [70, 70] { R3684 += 1, R3640 += 1, R3576 += 1, R3578 += 1, R3579 += 1 };
  s0 -> s1 [71, 65535] { R3684 += 1, R3640 += 1, R3576 += 1, R3578 += 1, R3579 += 1 };
  s0 -> s2 [71, 65535] { R3684 += 1, R3640 += 1, R3575 += 1, R3576 += 1 };
  s0 -> s3 [71, 65535] { R3684 += 1, R3640 += 1, R3576 += 1, R3577 += 1, R3578 += 1 };
  s1 -> s17 [0, 69] { R3684 += 1, R3640 += 1, R3576 += 1 };
  s1 -> s15 [0, 69] { R3684 += 1, R3640 += 1 };
  s1 -> s1 [0, 69] { R3684 += 1, R3640 += 1, R3576 += 1, R3578 += 1, R3579 += 1 };
  s1 -> s11 [70, 70] { R3684 += 1, R3640 += 1 };
  s1 -> s16 [70, 70] { R3684 += 1, R3640 += 1 };
  s1 -> s18 [70, 70] { R3684 += 1, R3640 += 1, R3576 += 1 };
  s1 -> s8 [70, 70] { R3684 += 1, R3640 += 1, R3576 += 1, R3578 += 1, R3579 += 1 };
  s1 -> s12 [70, 70] { R3684 += 1, R3640 += 1, R3576 += 1 };
  s1 -> s10 [70, 70] { R3684 += 1, R3640 += 1, R3576 += 1, R3578 += 1, R3579 += 1 };
  s1 -> s17 [71, 65535] { R3684 += 1, R3640 += 1, R3576 += 1 };
  s1 -> s15 [71, 65535] { R3684 += 1, R3640 += 1 };
  s1 -> s1 [71, 65535] { R3684 += 1, R3640 += 1, R3576 += 1, R3578 += 1, R3579 += 1 };
  s2 -> s1 [0, 69] { R3684 += 1, R3640 += 1, R3576 += 1, R3578 += 1, R3579 += 1 };
  s2 -> s2 [0, 69] { R3684 += 1, R3640 += 1, R3575 += 1, R3576 += 1 };
  s2 -> s3 [0, 69] { R3684 += 1, R3640 += 1, R3576 += 1, R3577 += 1, R3578 += 1 };
  s2 -> s5 [70, 70] { R3684 += 1, R3640 += 1, R3575 += 1, R3576 += 1 };
  s2 -> s6 [70, 70] { R3684 += 1, R3640 += 1, R3576 += 1, R3577 += 1, R3578 += 1 };
  s2 -> s7 [70, 70] { R3684 += 1, R3640 += 1, R3576 += 1, R3577 += 1, R3578 += 1 };
  s2 -> s8 [70, 70] { R3684 += 1, R3640 += 1, R3576 += 1, R3578 += 1, R3579 += 1 };
  s2 -> s9 [70, 70] { R3684 += 1, R3640 += 1, R3575 += 1, R3576 += 1 };
  s2 -> s10 [70, 70] { R3684 += 1, R3640 += 1, R3576 += 1, R3578 += 1, R3579 += 1 };
  s2 -> s1 [71, 65535] { R3684 += 1, R3640 += 1, R3576 += 1, R3578 += 1, R3579 += 1 };
  s2 -> s2 [71, 65535] { R3684 += 1, R3640 += 1, R3575 += 1, R3576 += 1 };
  s2 -> s3 [71, 65535] { R3684 += 1, R3640 += 1, R3576 += 1, R3577 += 1, R3578 += 1 };
  s3 -> s15 [0, 69] { R3684 += 1, R3640 += 1 };
  s3 -> s1 [0, 69] { R3684 += 1, R3640 += 1, R3576 += 1, R3578 += 1, R3579 += 1 };
  s3 -> s3 [0, 69] { R3684 += 1, R3640 += 1, R3576 += 1, R3577 += 1, R3578 += 1 };
  s3 -> s11 [70, 70] { R3684 += 1, R3640 += 1 };
  s3 -> s6 [70, 70] { R3684 += 1, R3640 += 1, R3576 += 1, R3577 += 1, R3578 += 1 };
  s3 -> s7 [70, 70] { R3684 += 1, R3640 += 1, R3576 += 1, R3577 += 1, R3578 += 1 };
  s3 -> s16 [70, 70] { R3684 += 1, R3640 += 1 };
  s3 -> s8 [70, 70] { R3684 += 1, R3640 += 1, R3576 += 1, R3578 += 1, R3579 += 1 };
  s3 -> s10 [70, 70] { R3684 += 1, R3640 += 1, R3576 += 1, R3578 += 1, R3579 += 1 };
  s3 -> s15 [71, 65535] { R3684 += 1, R3640 += 1 };
  s3 -> s1 [71, 65535] { R3684 += 1, R3640 += 1, R3576 += 1, R3578 += 1, R3579 += 1 };
  s3 -> s3 [71, 65535] { R3684 += 1, R3640 += 1, R3576 += 1, R3577 += 1, R3578 += 1 };
  s4 -> s1 [0, 69] { R3684 += 1, R3640 += 1, R3576 += 1, R3578 += 1, R3579 += 1 };
  s4 -> s2 [0, 69] { R3684 += 1, R3640 += 1, R3575 += 1, R3576 += 1 };
  s4 -> s3 [0, 69] { R3684 += 1, R3640 += 1, R3576 += 1, R3577 += 1, R3578 += 1 };
  s4 -> s4 [0, 65535] { R3684 += 1, R3639 += 1, R3640 += 1 };
  s4 -> s5 [70, 70] { R3684 += 1, R3640 += 1, R3575 += 1, R3576 += 1 };
  s4 -> s6 [70, 70] { R3684 += 1, R3640 += 1, R3576 += 1, R3577 += 1, R3578 += 1 };
  s4 -> s7 [70, 70] { R3684 += 1, R3640 += 1, R3576 += 1, R3577 += 1, R3578 += 1 };
  s4 -> s8 [70, 70] { R3684 += 1, R3640 += 1, R3576 += 1, R3578 += 1, R3579 += 1 };
  s4 -> s9 [70, 70] { R3684 += 1, R3640 += 1, R3575 += 1, R3576 += 1 };
  s4 -> s10 [70, 70] { R3684 += 1, R3640 += 1, R3576 += 1, R3578 += 1, R3579 += 1 };
  s4 -> s1 [71, 65535] { R3684 += 1, R3640 += 1, R3576 += 1, R3578 += 1, R3579 += 1 };
  s4 -> s2 [71, 65535] { R3684 += 1, R3640 += 1, R3575 += 1, R3576 += 1 };
  s4 -> s3 [71, 65535] { R3684 += 1, R3640 += 1, R3576 += 1, R3577 += 1, R3578 += 1 };
  s5 -> s5 [0, 65535] { R3684 += 1, R3640 += 1, R3575 += 1, R3576 += 1 };
  s5 -> s6 [0, 65535] { R3684 += 1, R3640 += 1, R3576 += 1, R3577 += 1, R3578 += 1 };
  s5 -> s10 [0, 65535] { R3684 += 1, R3640 += 1, R3576 += 1, R3578 += 1, R3579 += 1 };
  s6 -> s11 [0, 65535] { R3684 += 1, R3640 += 1 };
  s6 -> s6 [0, 65535] { R3684 += 1, R3640 += 1, R3576 += 1, R3577 += 1, R3578 += 1 };
  s6 -> s10 [0, 65535] { R3684 += 1, R3640 += 1, R3576 += 1, R3578 += 1, R3579 += 1 };
  s10 -> s11 [0, 65535] { R3684 += 1, R3640 += 1 };
  s10 -> s12 [0, 65535] { R3684 += 1, R3640 += 1, R3576 += 1 };
  s10 -> s10 [0, 65535] { R3684 += 1, R3640 += 1, R3576 += 1, R3578 += 1, R3579 += 1 };
  s11 -> s11 [0, 65535] { R3684 += 1, R3640 += 1 };
  s11 -> s13 [0, 65535] { R3684 += 1 };
  s11 -> s14 [0, 65535];
  s12 -> s11 [0, 65535] { R3684 += 1, R3640 += 1 };
  s12 -> s12 [0, 65535] { R3684 += 1, R3640 += 1, R3576 += 1 };
  s13 -> s13 [0, 65535] { R3684 += 1 };
  s13 -> s14 [0, 65535];
  s14 -> s14 [0, 65535];
  s15 -> s15 [0, 69] { R3684 += 1, R3640 += 1 };
  s15 -> s15 [0, 65535] { R3684 += 1 };
  s15 -> s14 [0, 65535];
  s15 -> s11 [70, 70] { R3684 += 1, R3640 += 1 };
  s15 -> s16 [70, 70] { R3684 += 1, R3640 += 1 };
  s15 -> s15 [71, 65535] { R3684 += 1, R3640 += 1 };
  s16 -> s16 [0, 65535] { R3684 += 1 };
  s16 -> s14 [0, 65535];
  s17 -> s17 [0, 69] { R3684 += 1, R3640 += 1, R3576 += 1 };
  s17 -> s15 [0, 69] { R3684 += 1, R3640 += 1 };
  s17 -> s11 [70, 70] { R3684 += 1, R3640 += 1 };
  s17 -> s16 [70, 70] { R3684 += 1, R3640 += 1 };
  s17 -> s18 [70, 70] { R3684 += 1, R3640 += 1, R3576 += 1 };
  s17 -> s12 [70, 70] { R3684 += 1, R3640 += 1, R3576 += 1 };
  s17 -> s17 [71, 65535] { R3684 += 1, R3640 += 1, R3576 += 1 };
  s17 -> s15 [71, 65535] { R3684 += 1, R3640 += 1 };
  accepting s16, s13, s14, s15, s11;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [102, 102];
  accepting s1;
};
};
constraint R3 = R3684 && R23 - R3684 = -1 && R24 = R3684 && R25 - R3684 = -1 && R26 = R3684 && R27 = 0 && R28 = 1 && R29 = 0 && R30 = 1 && R45 + R84 + R83 + -1*R3462 + -1*R3458 - R66 = 0 && R49 + R89 + R87 = 0 && R50 + R90 + R88 + -1*R3462 + -1*R3458 - R66 = 0 && R55 + R96 + R93 + -1*R3464 + -1*R3460 - R68 = 0 && R65 + R3461 + R3457 = 0 && R67 + R3463 + R3459 = 0 && R3625 = 0 && R3626 = 0 && R3631 = 0 && R3632 = 0 && R3635 = 0 && R3636 = 0 && R3637 = 0 && R3638 = 0 && R3639 = 0 && R3640 = 0 && R3641 = 0 && R3642 = R3684 && R3643 = 0 && R3644 = R3684 && R3645 = 0 && R3646 = R3684 && R3647 = 0 && R3648 = R3684 && R3649 = 0 && R3650 = R3684 && R3651 = 0 && R3652 = R3684 && R3653 = 0 && R3654 = R3684 && R3655 = 0 && R3656 = R3684 && R3657 = 0 && R3658 = R3684 && R3659 = 0 && R3660 = R3684 && R3661 = 0 && R3662 = R3684 && R3663 = 0 && R3664 = R3684 && R3665 = 0 && R3666 = R3684 && R3667 = 0 && R3668 = R3684 && R3669 = 0 && R3670 = R3684 && R3671 = 0 && R3672 = R3684 && R3673 = 0 && R3674 = R3684 && R3675 = 0 && R3676 = R3684 && R3677 = 0 && R3678 = R3684 && R3679 = 0 && R3680 = R3684 && R3681 = 0 && R3682 = R3684 && R3683 = 0 && -1 < R2 && R12 < 1 && R15 < 1 && R16 < 1 && R47 + R86 + R85 < 1 && R61 + R3456 + R3453 < 1 && -1*R3462 + -1*R3458 - R66 < 1 && -1*R3464 + -1*R3460 - R68 < 1 && 0 < R3684 && (R2 != 0 || R20 = 0 || (R3585 = 0 && R3586 = 0)) && (R2 != 0 || R20 = 0 || (R3587 = 0 && R3588 = 0)) && (R2 != 0 || R20 = 0 || (R3589 = 0 && R3590 = 0)) && (R2 != 0 || R20 = 0 || (R3591 = 0 && R3592 = 0)) && (R2 != 0 || R20 = 0 || (R3593 = 0 && R3594 = 0)) && (R2 != 0 || R20 = 0 || (R3595 = 0 && R3596 = 0)) && (R2 != 0 || R20 = 0 || (R3597 = 0 && R3598 = 0)) && (R2 != 0 || R20 = 0 || (R3599 = 0 && R3600 = 0)) && (R2 != 0 || R20 = 0 || (R3601 = 0 && R3602 = 0)) && (R2 != 0 || R20 = 0 || (R3603 = 0 && R3604 = 0)) && (R53 + R94 + R91 != 0 || R54 + R95 + R92 + -1*R3462 + -1*R3458 - R66 = 0 || R66 + R3462 + R3458 < 1) && (R59 + R3454 + R3451 != 0 || R60 + R3455 + R3452 + -1*R3462 + -1*R3458 - R66 = 0 || R66 + R3462 + R3458 < 1) && (R66 + R3462 + R3458 != 0 || ((R53 + R94 + R91 != 0 || R54 + R95 + R92 = 0 || R68 + R3464 + R3460 < 1) && (R53 + R94 + R91 = 0 || R68 + R3464 + R3460 < 1))) && (R66 + R3462 + R3458 != 0 || ((R59 + R3454 + R3451 != 0 || R60 + R3455 + R3452 = 0 || R68 + R3464 + R3460 < 1) && (R59 + R3454 + R3451 = 0 || R68 + R3464 + R3460 < 1))) && (R66 + R3462 + R3458 != 0 || ((R73 + R3580 + R3575 != 0 || R74 + R3581 + R3576 = 0 || R68 + R3464 + R3460 < 1) && (R73 + R3580 + R3575 = 0 || R68 + R3464 + R3460 < 1))) && (R68 + R3464 + R3460 != 0 || R77 + R3584 + R3579 = 0 || (R75 + R3582 + R3577 = 0 && R76 + R3583 + R3578 = 0)) && (R73 + R3580 + R3575 != 0 || R66 + R3462 + R3458 + -1*R3581 + -1*R3576 - R74 = 0 || R66 + R3462 + R3458 < 1) && (R75 + R3582 + R3577 != 0 || R68 + R3464 + R3460 + -1*R3583 + -1*R3578 - R76 = 0 || R68 + R3464 + R3460 < 1) && (R3585 != 0 || R2 = R3586 || R2 < 1) && (R3587 != 0 || R2 = R3588 || R2 < 1) && (R3589 != 0 || R2 = R3590 || R2 < 1) && (R3591 != 0 || R2 = R3592 || R2 < 1) && (R3593 != 0 || R2 = R3594 || R2 < 1) && (R3595 != 0 || R2 = R3596 || R2 < 1) && (R3597 != 0 || R2 = R3598 || R2 < 1) && (R3599 != 0 || R2 = R3600 || R2 < 1) && (R3601 != 0 || R2 = R3602 || R2 < 1) && (R3603 != 0 || R2 = R3604 || R2 < 1) && (R21 = 0 || (R3623 = 0 && R3624 = 0)) && (R21 = 0 || (R3627 = 0 && R3628 = 0)) && (R21 = 0 || (R3629 = 0 && R3630 = 0)) && (R21 = 0 || (R3633 = 0 && R3634 = 0)) && (R22 = 0 || (R3605 = 0 && R3606 = 0)) && (R22 = 0 || (R3607 = 0 && R3608 = 0)) && (R22 = 0 || (R3609 = 0 && R3610 = 0)) && (R22 = 0 || (R3611 = 0 && R3612 = 0)) && (R22 = 0 || (R3613 = 0 && R3614 = 0)) && (R22 = 0 || (R3615 = 0 && R3616 = 0)) && (R22 = 0 || (R3617 = 0 && R3618 = 0)) && (R22 = 0 || (R3619 = 0 && R3620 = 0)) && (R22 = 0 || (R3621 = 0 && R3622 = 0)) && (R53 + R94 + R91 = 0 || R66 + R3462 + R3458 < 1) && (R59 + R3454 + R3451 = 0 || R66 + R3462 + R3458 < 1) && (R73 + R3580 + R3575 = 0 || R66 + R3462 + R3458 < 1) && (R75 + R3582 + R3577 = 0 || R68 + R3464 + R3460 < 1) && (R3585 = 0 || R2 < 1) && (R3587 = 0 || R2 < 1) && (R3589 = 0 || R2 < 1) && (R3591 = 0 || R2 < 1) && (R3593 = 0 || R2 < 1) && (R3595 = 0 || R2 < 1) && (R3597 = 0 || R2 < 1) && (R3599 = 0 || R2 < 1) && (R3601 = 0 || R2 < 1) && (R3603 = 0 || R2 < 1);
// End of Parikh automata intersection problem
