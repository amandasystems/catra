// Parikh automata intersection problem, generated by OSTRICH+
counter int R100, R101, R102, R12, R15, R16, R2, R20, R21, R22, R23, R24, R25, R26, R27, R28, R2893, R2894, R2895, R2896, R2897, R2898, R2899, R29, R2900, R3, R30, R3121, R3122, R3123, R3124, R3125, R3126, R3127, R3128, R3129, R3130, R3131, R3132, R3133, R3134, R3135, R3136, R3137, R3138, R3139, R3140, R3141, R3142, R3143, R3144, R3145, R3146, R3147, R3148, R3149, R3150, R3151, R3152, R3153, R3154, R3155, R3156, R3157, R3158, R3159, R3160, R3161, R3162, R3163, R3164, R3165, R3166, R3167, R3168, R3169, R3170, R3171, R3172, R3173, R3174, R3175, R3176, R3177, R3178, R3179, R3180, R3181, R3182, R3183, R3184, R3185, R3186, R3187, R3188, R3189, R3190, R3191, R3192, R3193, R3194, R3195, R3196, R3197, R3198, R3199, R3200, R3201, R3202, R3203, R3204, R3205, R3206, R3207, R3208, R3209, R3210, R3211, R3212, R3213, R3214, R3215, R3216, R3217, R3218, R3219, R3220, R3221, R3222, R3223, R3224, R3225, R3226, R3227, R3228, R3229, R3230, R4, R45, R47, R49, R5, R50, R53, R54, R55, R59, R60, R61, R65, R66, R67, R68, R73, R74, R75, R76, R77, R83, R84, R85, R86, R87, R88, R89, R90, R91, R92, R93, R94, R95, R96, R97, R98, R99;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [70, 70];
  s0 -> s0 [71, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [70, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R15 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 69];
  s0 -> s0 [0, 65535] { R16 += 1 };
  s0 -> s2 [70, 70];
  s0 -> s1 [71, 65535];
  s1 -> s1 [0, 69];
  s1 -> s2 [70, 70];
  s1 -> s1 [71, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R24 += 1 };
  s0 -> s0 [0, 65535] { R23 += 1, R24 += 1 };
  s0 -> s2 [9, 13] { R24 += 1 };
  s0 -> s1 [14, 31] { R24 += 1 };
  s0 -> s2 [32, 32] { R24 += 1 };
  s0 -> s1 [33, 65535] { R24 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R24 += 1 };
  s2 -> s1 [0, 65535] { R24 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R25 += 1, R26 += 1 };
  s1 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R28 += 1 };
  s0 -> s0 [0, 65535] { R27 += 1, R28 += 1 };
  s0 -> s2 [9, 13] { R28 += 1 };
  s0 -> s1 [14, 31] { R28 += 1 };
  s0 -> s2 [32, 32] { R28 += 1 };
  s0 -> s1 [33, 65535] { R28 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R28 += 1 };
  s2 -> s1 [0, 65535] { R28 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R29 += 1, R30 += 1 };
  s1 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R3151 += 1, R3152 += 1 };
  s0 -> s1 [0, 65535] { R3152 += 1, R22 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R3152 += 1, R22 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 69] { R3154 += 1 };
  s0 -> s0 [0, 65535] { R3153 += 1, R3154 += 1 };
  s0 -> s2 [70, 70] { R3154 += 1 };
  s0 -> s3 [70, 70] { R3154 += 1 };
  s0 -> s1 [76, 65535] { R3154 += 1 };
  s1 -> s1 [0, 69] { R3154 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R3154 += 1 };
  s1 -> s3 [70, 70] { R3154 += 1 };
  s1 -> s1 [76, 65535] { R3154 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 70] { R3154 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [76, 65535] { R3154 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 69] { R3156 += 1, R45 += 1 };
  s0 -> s0 [0, 65535] { R3155 += 1, R3156 += 1 };
  s0 -> s2 [70, 70] { R3156 += 1, R45 += 1 };
  s0 -> s3 [70, 70] { R3156 += 1, R45 += 1 };
  s0 -> s1 [71, 65535] { R3156 += 1, R45 += 1 };
  s1 -> s1 [0, 69] { R3156 += 1, R45 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R3156 += 1, R45 += 1 };
  s1 -> s3 [70, 70] { R3156 += 1, R45 += 1 };
  s1 -> s1 [71, 65535] { R3156 += 1, R45 += 1 };
  s2 -> s2 [0, 65535] { R3156 += 1, R45 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 69] { R3158 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R3157 += 1, R3158 += 1 };
  s0 -> s2 [70, 70] { R3158 += 1, R47 += 1 };
  s0 -> s3 [70, 70] { R3158 += 1, R47 += 1 };
  s0 -> s1 [71, 65535] { R3158 += 1, R47 += 1 };
  s1 -> s1 [0, 69] { R3158 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R3158 += 1, R47 += 1 };
  s1 -> s3 [70, 70] { R3158 += 1, R47 += 1 };
  s1 -> s1 [71, 65535] { R3158 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3158 += 1, R47 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 69] { R3160 += 1, R49 += 1, R50 += 1 };
  s0 -> s0 [0, 65535] { R3159 += 1, R3160 += 1 };
  s0 -> s2 [70, 70] { R3160 += 1, R49 += 1, R50 += 1 };
  s0 -> s3 [70, 70] { R3160 += 1, R49 += 1, R50 += 1 };
  s0 -> s1 [71, 65535] { R3160 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 69] { R3160 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R3160 += 1, R49 += 1, R50 += 1 };
  s1 -> s3 [70, 70] { R3160 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [71, 65535] { R3160 += 1, R49 += 1, R50 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3160 += 1, R49 += 1, R50 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 69] { R3162 += 1, R53 += 1, R54 += 1 };
  s0 -> s0 [0, 65535] { R3161 += 1, R3162 += 1 };
  s0 -> s2 [70, 70] { R3162 += 1, R53 += 1, R54 += 1 };
  s0 -> s3 [70, 70] { R3162 += 1, R53 += 1, R54 += 1 };
  s0 -> s1 [71, 65535] { R3162 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 69] { R3162 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R3162 += 1, R53 += 1, R54 += 1 };
  s1 -> s3 [70, 70] { R3162 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [71, 65535] { R3162 += 1, R53 += 1, R54 += 1 };
  s2 -> s2 [0, 65535] { R3162 += 1, R53 += 1, R54 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 69] { R3164 += 1, R59 += 1, R60 += 1 };
  s0 -> s0 [0, 65535] { R3163 += 1, R3164 += 1 };
  s0 -> s2 [70, 70] { R3164 += 1, R59 += 1, R60 += 1 };
  s0 -> s3 [70, 70] { R3164 += 1, R59 += 1, R60 += 1 };
  s0 -> s1 [71, 65535] { R3164 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 69] { R3164 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R3164 += 1, R59 += 1, R60 += 1 };
  s1 -> s3 [70, 70] { R3164 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [71, 65535] { R3164 += 1, R59 += 1, R60 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3164 += 1, R59 += 1, R60 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 69] { R3166 += 1, R65 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R3165 += 1, R3166 += 1 };
  s0 -> s2 [70, 70] { R3166 += 1, R65 += 1, R66 += 1 };
  s0 -> s3 [70, 70] { R3166 += 1, R65 += 1, R66 += 1 };
  s0 -> s1 [71, 65535] { R3166 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 69] { R3166 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R3166 += 1, R65 += 1, R66 += 1 };
  s1 -> s3 [70, 70] { R3166 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [71, 65535] { R3166 += 1, R65 += 1, R66 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R3166 += 1, R65 += 1, R66 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 69] { R3168 += 1, R73 += 1, R74 += 1 };
  s0 -> s0 [0, 65535] { R3167 += 1, R3168 += 1 };
  s0 -> s2 [70, 70] { R3168 += 1, R73 += 1, R74 += 1 };
  s0 -> s3 [70, 70] { R3168 += 1, R73 += 1, R74 += 1 };
  s0 -> s1 [71, 65535] { R3168 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 69] { R3168 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R3168 += 1, R73 += 1, R74 += 1 };
  s1 -> s3 [70, 70] { R3168 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [71, 65535] { R3168 += 1, R73 += 1, R74 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3168 += 1, R73 += 1, R74 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 69] { R3188 += 1 };
  s0 -> s0 [0, 65535] { R3187 += 1, R3188 += 1 };
  s0 -> s2 [70, 70] { R3188 += 1 };
  s0 -> s1 [71, 65535] { R3188 += 1 };
  s1 -> s1 [0, 69] { R3188 += 1 };
  s1 -> s2 [70, 70] { R3188 += 1 };
  s1 -> s1 [71, 65535] { R3188 += 1 };
  s2 -> s2 [0, 65535] { R3188 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R3190 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R3189 += 1, R3190 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R3190 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 69] { R3192 += 1 };
  s0 -> s0 [0, 65535] { R3191 += 1, R3192 += 1 };
  s0 -> s2 [0, 65535] { R3192 += 1, R12 += 1 };
  s0 -> s3 [70, 70] { R3192 += 1 };
  s0 -> s1 [71, 65535] { R3192 += 1 };
  s1 -> s1 [0, 69] { R3192 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [70, 70] { R3192 += 1 };
  s1 -> s1 [71, 65535] { R3192 += 1 };
  s2 -> s1 [0, 69] { R3192 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3192 += 1, R12 += 1 };
  s2 -> s3 [70, 70] { R3192 += 1 };
  s2 -> s1 [71, 65535] { R3192 += 1 };
  s3 -> s3 [0, 65535] { R3192 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 69] { R3194 += 1, R3132 += 1 };
  s0 -> s2 [0, 65535] { R3194 += 1, R3131 += 1, R3132 += 1 };
  s0 -> s0 [0, 65535] { R3193 += 1, R3194 += 1 };
  s0 -> s1 [71, 65535] { R3194 += 1, R3132 += 1 };
  s1 -> s1 [0, 69] { R3194 += 1, R3132 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3194 += 1 };
  s1 -> s1 [71, 65535] { R3194 += 1, R3132 += 1 };
  s2 -> s1 [0, 69] { R3194 += 1, R3132 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3194 += 1, R3131 += 1, R3132 += 1 };
  s2 -> s1 [71, 65535] { R3194 += 1, R3132 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R3196 += 1, R3134 += 1, R20 += 1 };
  s0 -> s2 [0, 65535] { R3196 += 1, R3133 += 1, R3134 += 1 };
  s0 -> s0 [0, 65535] { R3195 += 1, R3196 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3196 += 1, R3134 += 1, R20 += 1 };
  s1 -> s4 [0, 65535] { R3196 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3196 += 1, R3134 += 1, R20 += 1 };
  s2 -> s2 [0, 65535] { R3196 += 1, R3133 += 1, R3134 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3196 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 70] { R3198 += 1, R3136 += 1 };
  s0 -> s2 [0, 65535] { R3198 += 1, R3135 += 1, R3136 += 1 };
  s0 -> s0 [0, 65535] { R3197 += 1, R3198 += 1 };
  s0 -> s1 [75, 65535] { R3198 += 1, R3136 += 1 };
  s1 -> s1 [0, 70] { R3198 += 1, R3136 += 1 };
  s1 -> s1 [0, 65535] { R3198 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [75, 65535] { R3198 += 1, R3136 += 1 };
  s2 -> s1 [0, 70] { R3198 += 1, R3136 += 1 };
  s2 -> s2 [0, 65535] { R3198 += 1, R3135 += 1, R3136 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [75, 65535] { R3198 += 1, R3136 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s0 [0, 65535] { R3199 += 1, R3200 += 1 };
  s0 -> s1 [0, 65535] { R3200 += 1, R3137 += 1, R3138 += 1 };
  s0 -> s2 [0, 65535] { R3200 += 1, R3138 += 1, R84 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3200 += 1, R3137 += 1, R3138 += 1 };
  s1 -> s2 [0, 65535] { R3200 += 1, R3138 += 1, R84 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R3200 += 1 };
  s2 -> s2 [0, 65535] { R3200 += 1, R3138 += 1, R84 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3200 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 74] { R3202 += 1, R3140 += 1 };
  s0 -> s2 [0, 65535] { R3202 += 1, R3140 += 1, R86 += 1 };
  s0 -> s0 [0, 65535] { R3201 += 1, R3202 += 1 };
  s0 -> s3 [0, 65535] { R3202 += 1, R3139 += 1, R3140 += 1 };
  s0 -> s1 [76, 65535] { R3202 += 1, R3140 += 1 };
  s1 -> s1 [0, 74] { R3202 += 1, R3140 += 1 };
  s1 -> s1 [0, 65535] { R3202 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [76, 65535] { R3202 += 1, R3140 += 1 };
  s2 -> s1 [0, 74] { R3202 += 1, R3140 += 1 };
  s2 -> s2 [0, 65535] { R3202 += 1, R3140 += 1, R86 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R3202 += 1 };
  s2 -> s1 [76, 65535] { R3202 += 1, R3140 += 1 };
  s3 -> s1 [0, 74] { R3202 += 1, R3140 += 1 };
  s3 -> s2 [0, 65535] { R3202 += 1, R3140 += 1, R86 += 1 };
  s3 -> s3 [0, 65535] { R3202 += 1, R3139 += 1, R3140 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [76, 65535] { R3202 += 1, R3140 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3202 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 65535] { R3204 += 1, R3142 += 1 };
  s0 -> s2 [0, 65535] { R3204 += 1, R3142 += 1, R90 += 1 };
  s0 -> s3 [0, 65535] { R3204 += 1, R3141 += 1, R3142 += 1 };
  s0 -> s0 [0, 65535] { R3203 += 1, R3204 += 1 };
  s1 -> s1 [0, 65535] { R3204 += 1, R3142 += 1 };
  s1 -> s5 [0, 65535] { R3204 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R3204 += 1, R3142 += 1 };
  s2 -> s5 [0, 65535] { R3204 += 1 };
  s2 -> s2 [0, 65535] { R3204 += 1, R3142 += 1, R90 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R3204 += 1, R3142 += 1 };
  s3 -> s2 [0, 65535] { R3204 += 1, R3142 += 1, R90 += 1 };
  s3 -> s3 [0, 65535] { R3204 += 1, R3141 += 1, R3142 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3204 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R3206 += 1, R3143 += 1, R3144 += 1 };
  s0 -> s2 [0, 65535] { R3206 += 1, R3144 += 1, R95 += 1, R96 += 1 };
  s0 -> s0 [0, 65535] { R3205 += 1, R3206 += 1 };
  s0 -> s3 [0, 65535] { R3206 += 1, R3144 += 1, R94 += 1, R95 += 1 };
  s1 -> s1 [0, 65535] { R3206 += 1, R3143 += 1, R3144 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R3206 += 1, R3144 += 1, R95 += 1, R96 += 1 };
  s1 -> s3 [0, 65535] { R3206 += 1, R3144 += 1, R94 += 1, R95 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3206 += 1, R3144 += 1, R95 += 1, R96 += 1 };
  s2 -> s6 [0, 65535] { R3206 += 1, R3144 += 1 };
  s2 -> s5 [0, 65535] { R3206 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R3206 += 1, R3144 += 1, R95 += 1, R96 += 1 };
  s3 -> s5 [0, 65535] { R3206 += 1 };
  s3 -> s3 [0, 65535] { R3206 += 1, R3144 += 1, R94 += 1, R95 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3206 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R3206 += 1, R3144 += 1 };
  s6 -> s5 [0, 65535] { R3206 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 74] { R3208 += 1, R3146 += 1, R101 += 1 };
  s0 -> s2 [0, 65535] { R3208 += 1, R3146 += 1, R101 += 1, R102 += 1 };
  s0 -> s0 [0, 65535] { R3207 += 1, R3208 += 1 };
  s0 -> s3 [0, 65535] { R3208 += 1, R3145 += 1, R3146 += 1 };
  s0 -> s4 [0, 65535] { R3208 += 1, R3146 += 1, R100 += 1, R101 += 1 };
  s0 -> s1 [76, 65535] { R3208 += 1, R3146 += 1, R101 += 1 };
  s1 -> s1 [0, 74] { R3208 += 1, R3146 += 1, R101 += 1 };
  s1 -> s1 [0, 65535] { R3208 += 1, R3146 += 1 };
  s1 -> s5 [0, 65535] { R3208 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [76, 65535] { R3208 += 1, R3146 += 1, R101 += 1 };
  s2 -> s1 [0, 74] { R3208 += 1, R3146 += 1, R101 += 1 };
  s2 -> s2 [0, 65535] { R3208 += 1, R3146 += 1, R101 += 1, R102 += 1 };
  s2 -> s7 [0, 65535] { R3208 += 1, R3146 += 1 };
  s2 -> s5 [0, 65535] { R3208 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s1 [76, 65535] { R3208 += 1, R3146 += 1, R101 += 1 };
  s3 -> s1 [0, 74] { R3208 += 1, R3146 += 1, R101 += 1 };
  s3 -> s2 [0, 65535] { R3208 += 1, R3146 += 1, R101 += 1, R102 += 1 };
  s3 -> s3 [0, 65535] { R3208 += 1, R3145 += 1, R3146 += 1 };
  s3 -> s4 [0, 65535] { R3208 += 1, R3146 += 1, R100 += 1, R101 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s1 [76, 65535] { R3208 += 1, R3146 += 1, R101 += 1 };
  s4 -> s1 [0, 74] { R3208 += 1, R3146 += 1, R101 += 1 };
  s4 -> s2 [0, 65535] { R3208 += 1, R3146 += 1, R101 += 1, R102 += 1 };
  s4 -> s4 [0, 65535] { R3208 += 1, R3146 += 1, R100 += 1, R101 += 1 };
  s4 -> s5 [0, 65535] { R3208 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s1 [76, 65535] { R3208 += 1, R3146 += 1, R101 += 1 };
  s5 -> s5 [0, 65535] { R3208 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R3208 += 1, R3146 += 1 };
  s7 -> s5 [0, 65535] { R3208 += 1 };
  s7 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 74] { R3210 += 1, R3148 += 1, R2898 += 1, R2900 += 1 };
  s0 -> s2 [0, 65535] { R3210 += 1, R3147 += 1, R3148 += 1 };
  s0 -> s0 [0, 65535] { R3209 += 1, R3210 += 1 };
  s0 -> s3 [0, 65535] { R3210 += 1, R3148 += 1, R2898 += 1, R2899 += 1, R2900 += 1 };
  s0 -> s4 [75, 75] { R3210 += 1, R3148 += 1, R2898 += 1, R2900 += 1 };
  s0 -> s1 [76, 65535] { R3210 += 1, R3148 += 1, R2898 += 1, R2900 += 1 };
  s1 -> s1 [0, 74] { R3210 += 1, R3148 += 1, R2898 += 1, R2900 += 1 };
  s1 -> s4 [75, 75] { R3210 += 1, R3148 += 1, R2898 += 1, R2900 += 1 };
  s1 -> s1 [76, 65535] { R3210 += 1, R3148 += 1, R2898 += 1, R2900 += 1 };
  s2 -> s1 [0, 74] { R3210 += 1, R3148 += 1, R2898 += 1, R2900 += 1 };
  s2 -> s2 [0, 65535] { R3210 += 1, R3147 += 1, R3148 += 1 };
  s2 -> s3 [0, 65535] { R3210 += 1, R3148 += 1, R2898 += 1, R2899 += 1, R2900 += 1 };
  s2 -> s4 [75, 75] { R3210 += 1, R3148 += 1, R2898 += 1, R2900 += 1 };
  s2 -> s1 [76, 65535] { R3210 += 1, R3148 += 1, R2898 += 1, R2900 += 1 };
  s3 -> s1 [0, 74] { R3210 += 1, R3148 += 1, R2898 += 1, R2900 += 1 };
  s3 -> s3 [0, 65535] { R3210 += 1, R3148 += 1, R2898 += 1, R2899 += 1, R2900 += 1 };
  s3 -> s4 [75, 75] { R3210 += 1, R3148 += 1, R2898 += 1, R2900 += 1 };
  s3 -> s1 [76, 65535] { R3210 += 1, R3148 += 1, R2898 += 1, R2900 += 1 };
  s4 -> s4 [0, 65535] { R3210 += 1, R3148 += 1, R2898 += 1, R2900 += 1 };
  s4 -> s5 [0, 65535] { R3210 += 1 };
  s4 -> s6 [0, 65535] { R3210 += 1, R3148 += 1, R2898 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s8 [0, 65535] { R3210 += 1, R3148 += 1 };
  s5 -> s5 [0, 65535] { R3210 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s5 [0, 65535] { R3210 += 1 };
  s6 -> s6 [0, 65535] { R3210 += 1, R3148 += 1, R2898 += 1 };
  s6 -> s7 [0, 65535];
  s6 -> s8 [0, 65535] { R3210 += 1, R3148 += 1 };
  s7 -> s7 [0, 65535];
  s8 -> s5 [0, 65535] { R3210 += 1 };
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R3210 += 1, R3148 += 1 };
  accepting s4, s8, s5, s6, s7;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 65535] { R3212 += 1, R3150 += 1, R3127 += 1, R3129 += 1, R3130 += 1 };
  s0 -> s0 [0, 65535] { R3211 += 1, R3212 += 1 };
  s0 -> s2 [0, 65535] { R3212 += 1, R3150 += 1, R3127 += 1, R3128 += 1, R3129 += 1 };
  s0 -> s3 [0, 65535] { R3212 += 1, R3149 += 1, R3150 += 1 };
  s0 -> s4 [0, 65535] { R3212 += 1, R3150 += 1, R3126 += 1, R3127 += 1 };
  s1 -> s7 [0, 65535] { R3212 += 1, R3150 += 1 };
  s1 -> s5 [0, 65535] { R3212 += 1 };
  s1 -> s1 [0, 65535] { R3212 += 1, R3150 += 1, R3127 += 1, R3129 += 1, R3130 += 1 };
  s1 -> s8 [0, 65535] { R3212 += 1, R3150 += 1, R3127 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s7 [0, 65535] { R3212 += 1, R3150 += 1 };
  s2 -> s5 [0, 65535] { R3212 += 1 };
  s2 -> s1 [0, 65535] { R3212 += 1, R3150 += 1, R3127 += 1, R3129 += 1, R3130 += 1 };
  s2 -> s2 [0, 65535] { R3212 += 1, R3150 += 1, R3127 += 1, R3128 += 1, R3129 += 1 };
  s2 -> s6 [0, 65535];
  s3 -> s1 [0, 65535] { R3212 += 1, R3150 += 1, R3127 += 1, R3129 += 1, R3130 += 1 };
  s3 -> s2 [0, 65535] { R3212 += 1, R3150 += 1, R3127 += 1, R3128 += 1, R3129 += 1 };
  s3 -> s3 [0, 65535] { R3212 += 1, R3149 += 1, R3150 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s4 [0, 65535] { R3212 += 1, R3150 += 1, R3126 += 1, R3127 += 1 };
  s4 -> s5 [0, 65535] { R3212 += 1 };
  s4 -> s1 [0, 65535] { R3212 += 1, R3150 += 1, R3127 += 1, R3129 += 1, R3130 += 1 };
  s4 -> s2 [0, 65535] { R3212 += 1, R3150 += 1, R3127 += 1, R3128 += 1, R3129 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R3212 += 1, R3150 += 1, R3126 += 1, R3127 += 1 };
  s5 -> s5 [0, 65535] { R3212 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R3212 += 1, R3150 += 1 };
  s7 -> s5 [0, 65535] { R3212 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R3212 += 1, R3150 += 1 };
  s8 -> s5 [0, 65535] { R3212 += 1 };
  s8 -> s8 [0, 65535] { R3212 += 1, R3150 += 1, R3127 += 1 };
  s8 -> s6 [0, 65535];
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R3214 += 1, R3169 += 1, R3170 += 1 };
  s0 -> s0 [0, 65535] { R3213 += 1, R3214 += 1 };
  s0 -> s2 [0, 65535] { R3214 += 1, R3170 += 1, R21 += 1 };
  s1 -> s1 [0, 65535] { R3214 += 1, R3169 += 1, R3170 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R3214 += 1, R3170 += 1, R21 += 1 };
  s2 -> s3 [0, 65535] { R3214 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3214 += 1, R3170 += 1, R21 += 1 };
  s3 -> s3 [0, 65535] { R3214 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 69] { R3216 += 1, R3172 += 1 };
  s0 -> s0 [0, 65535] { R3215 += 1, R3216 += 1 };
  s0 -> s2 [0, 65535] { R3216 += 1, R3171 += 1, R3172 += 1 };
  s0 -> s3 [70, 70] { R3216 += 1, R3172 += 1 };
  s0 -> s4 [70, 70] { R3216 += 1, R3172 += 1 };
  s0 -> s5 [75, 75] { R3216 += 1, R3172 += 1 };
  s0 -> s1 [76, 65535] { R3216 += 1, R3172 += 1 };
  s1 -> s1 [0, 69] { R3216 += 1, R3172 += 1 };
  s1 -> s3 [70, 70] { R3216 += 1, R3172 += 1 };
  s1 -> s4 [70, 70] { R3216 += 1, R3172 += 1 };
  s1 -> s5 [75, 75] { R3216 += 1, R3172 += 1 };
  s1 -> s1 [76, 65535] { R3216 += 1, R3172 += 1 };
  s2 -> s1 [0, 69] { R3216 += 1, R3172 += 1 };
  s2 -> s2 [0, 65535] { R3216 += 1, R3171 += 1, R3172 += 1 };
  s2 -> s3 [70, 70] { R3216 += 1, R3172 += 1 };
  s2 -> s4 [70, 70] { R3216 += 1, R3172 += 1 };
  s2 -> s5 [75, 75] { R3216 += 1, R3172 += 1 };
  s2 -> s1 [76, 65535] { R3216 += 1, R3172 += 1 };
  s3 -> s3 [0, 70] { R3216 += 1, R3172 += 1 };
  s3 -> s8 [75, 75] { R3216 += 1, R3172 += 1 };
  s3 -> s3 [76, 65535] { R3216 += 1, R3172 += 1 };
  s5 -> s5 [0, 69] { R3216 += 1, R3172 += 1 };
  s5 -> s5 [0, 65535] { R3216 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [70, 70] { R3216 += 1, R3172 += 1 };
  s5 -> s8 [70, 70] { R3216 += 1, R3172 += 1 };
  s5 -> s5 [75, 65535] { R3216 += 1, R3172 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R3216 += 1 };
  s8 -> s8 [0, 70] { R3216 += 1, R3172 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R3216 += 1 };
  s8 -> s8 [75, 65535] { R3216 += 1, R3172 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 69] { R3218 += 1, R3174 += 1, R83 += 1 };
  s0 -> s0 [0, 65535] { R3217 += 1, R3218 += 1 };
  s0 -> s2 [0, 65535] { R3218 += 1, R3173 += 1, R3174 += 1 };
  s0 -> s3 [70, 70] { R3218 += 1, R3174 += 1, R83 += 1 };
  s0 -> s4 [70, 70] { R3218 += 1, R3174 += 1, R83 += 1 };
  s0 -> s1 [71, 65535] { R3218 += 1, R3174 += 1, R83 += 1 };
  s1 -> s1 [0, 69] { R3218 += 1, R3174 += 1, R83 += 1 };
  s1 -> s1 [0, 65535] { R3218 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [70, 70] { R3218 += 1, R3174 += 1, R83 += 1 };
  s1 -> s4 [70, 70] { R3218 += 1, R3174 += 1, R83 += 1 };
  s1 -> s1 [71, 65535] { R3218 += 1, R3174 += 1, R83 += 1 };
  s2 -> s1 [0, 69] { R3218 += 1, R3174 += 1, R83 += 1 };
  s2 -> s2 [0, 65535] { R3218 += 1, R3173 += 1, R3174 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [70, 70] { R3218 += 1, R3174 += 1, R83 += 1 };
  s2 -> s4 [70, 70] { R3218 += 1, R3174 += 1, R83 += 1 };
  s2 -> s1 [71, 65535] { R3218 += 1, R3174 += 1, R83 += 1 };
  s3 -> s3 [0, 65535] { R3218 += 1, R3174 += 1, R83 += 1 };
  s3 -> s6 [0, 65535] { R3218 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3218 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3218 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 69] { R3220 += 1, R3176 += 1, R85 += 1 };
  s0 -> s0 [0, 65535] { R3219 += 1, R3220 += 1 };
  s0 -> s2 [0, 65535] { R3220 += 1, R3175 += 1, R3176 += 1 };
  s0 -> s3 [70, 70] { R3220 += 1, R3176 += 1, R85 += 1 };
  s0 -> s4 [70, 70] { R3220 += 1, R3176 += 1, R85 += 1 };
  s0 -> s1 [71, 65535] { R3220 += 1, R3176 += 1, R85 += 1 };
  s1 -> s1 [0, 69] { R3220 += 1, R3176 += 1, R85 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3220 += 1 };
  s1 -> s3 [70, 70] { R3220 += 1, R3176 += 1, R85 += 1 };
  s1 -> s4 [70, 70] { R3220 += 1, R3176 += 1, R85 += 1 };
  s1 -> s1 [71, 65535] { R3220 += 1, R3176 += 1, R85 += 1 };
  s2 -> s1 [0, 69] { R3220 += 1, R3176 += 1, R85 += 1 };
  s2 -> s2 [0, 65535] { R3220 += 1, R3175 += 1, R3176 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [70, 70] { R3220 += 1, R3176 += 1, R85 += 1 };
  s2 -> s4 [70, 70] { R3220 += 1, R3176 += 1, R85 += 1 };
  s2 -> s1 [71, 65535] { R3220 += 1, R3176 += 1, R85 += 1 };
  s3 -> s3 [0, 65535] { R3220 += 1, R3176 += 1, R85 += 1 };
  s3 -> s6 [0, 65535] { R3220 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3220 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3220 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 69] { R3222 += 1, R3178 += 1, R87 += 1, R88 += 1 };
  s0 -> s2 [0, 69] { R3222 += 1, R3178 += 1, R88 += 1 };
  s0 -> s0 [0, 65535] { R3221 += 1, R3222 += 1 };
  s0 -> s3 [0, 65535] { R3222 += 1, R3177 += 1, R3178 += 1 };
  s0 -> s4 [70, 70] { R3222 += 1, R3178 += 1, R87 += 1, R88 += 1 };
  s0 -> s5 [70, 70] { R3222 += 1, R3178 += 1, R88 += 1 };
  s0 -> s6 [70, 70] { R3222 += 1, R3178 += 1, R87 += 1, R88 += 1 };
  s0 -> s7 [70, 70] { R3222 += 1, R3178 += 1, R88 += 1 };
  s0 -> s2 [71, 74] { R3222 += 1, R3178 += 1, R88 += 1 };
  s0 -> s1 [71, 65535] { R3222 += 1, R3178 += 1, R87 += 1, R88 += 1 };
  s0 -> s8 [75, 75] { R3222 += 1, R3178 += 1, R88 += 1 };
  s0 -> s2 [76, 65535] { R3222 += 1, R3178 += 1, R88 += 1 };
  s1 -> s1 [0, 69] { R3222 += 1, R3178 += 1, R87 += 1, R88 += 1 };
  s1 -> s2 [0, 69] { R3222 += 1, R3178 += 1, R88 += 1 };
  s1 -> s4 [70, 70] { R3222 += 1, R3178 += 1, R87 += 1, R88 += 1 };
  s1 -> s5 [70, 70] { R3222 += 1, R3178 += 1, R88 += 1 };
  s1 -> s6 [70, 70] { R3222 += 1, R3178 += 1, R87 += 1, R88 += 1 };
  s1 -> s7 [70, 70] { R3222 += 1, R3178 += 1, R88 += 1 };
  s1 -> s2 [71, 74] { R3222 += 1, R3178 += 1, R88 += 1 };
  s1 -> s1 [71, 65535] { R3222 += 1, R3178 += 1, R87 += 1, R88 += 1 };
  s1 -> s8 [75, 75] { R3222 += 1, R3178 += 1, R88 += 1 };
  s1 -> s2 [76, 65535] { R3222 += 1, R3178 += 1, R88 += 1 };
  s2 -> s2 [0, 69] { R3222 += 1, R3178 += 1, R88 += 1 };
  s2 -> s5 [70, 70] { R3222 += 1, R3178 += 1, R88 += 1 };
  s2 -> s7 [70, 70] { R3222 += 1, R3178 += 1, R88 += 1 };
  s2 -> s2 [71, 74] { R3222 += 1, R3178 += 1, R88 += 1 };
  s2 -> s8 [75, 75] { R3222 += 1, R3178 += 1, R88 += 1 };
  s2 -> s2 [76, 65535] { R3222 += 1, R3178 += 1, R88 += 1 };
  s3 -> s1 [0, 69] { R3222 += 1, R3178 += 1, R87 += 1, R88 += 1 };
  s3 -> s2 [0, 69] { R3222 += 1, R3178 += 1, R88 += 1 };
  s3 -> s3 [0, 65535] { R3222 += 1, R3177 += 1, R3178 += 1 };
  s3 -> s4 [70, 70] { R3222 += 1, R3178 += 1, R87 += 1, R88 += 1 };
  s3 -> s5 [70, 70] { R3222 += 1, R3178 += 1, R88 += 1 };
  s3 -> s6 [70, 70] { R3222 += 1, R3178 += 1, R87 += 1, R88 += 1 };
  s3 -> s7 [70, 70] { R3222 += 1, R3178 += 1, R88 += 1 };
  s3 -> s2 [71, 74] { R3222 += 1, R3178 += 1, R88 += 1 };
  s3 -> s1 [71, 65535] { R3222 += 1, R3178 += 1, R87 += 1, R88 += 1 };
  s3 -> s8 [75, 75] { R3222 += 1, R3178 += 1, R88 += 1 };
  s3 -> s2 [76, 65535] { R3222 += 1, R3178 += 1, R88 += 1 };
  s5 -> s5 [0, 74] { R3222 += 1, R3178 += 1, R88 += 1 };
  s5 -> s10 [75, 75] { R3222 += 1, R3178 += 1, R88 += 1 };
  s5 -> s5 [76, 65535] { R3222 += 1, R3178 += 1, R88 += 1 };
  s6 -> s5 [0, 74] { R3222 += 1, R3178 += 1, R88 += 1 };
  s6 -> s6 [0, 65535] { R3222 += 1, R3178 += 1, R87 += 1, R88 += 1 };
  s6 -> s10 [75, 75] { R3222 += 1, R3178 += 1, R88 += 1 };
  s6 -> s5 [76, 65535] { R3222 += 1, R3178 += 1, R88 += 1 };
  s8 -> s8 [0, 69] { R3222 += 1, R3178 += 1, R88 += 1 };
  s8 -> s8 [0, 65535] { R3222 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [70, 70] { R3222 += 1, R3178 += 1, R88 += 1 };
  s8 -> s11 [70, 70] { R3222 += 1, R3178 += 1, R88 += 1 };
  s8 -> s8 [71, 65535] { R3222 += 1, R3178 += 1, R88 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s12 [0, 65535] { R3222 += 1 };
  s10 -> s10 [0, 65535] { R3222 += 1, R3178 += 1, R88 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R3222 += 1 };
  s12 -> s12 [0, 65535] { R3222 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 69] { R3224 += 1, R3180 += 1, R91 += 1, R92 += 1 };
  s0 -> s2 [0, 65535] { R3224 += 1, R3179 += 1, R3180 += 1 };
  s0 -> s0 [0, 65535] { R3223 += 1, R3224 += 1 };
  s0 -> s3 [70, 70] { R3224 += 1, R3180 += 1, R91 += 1, R92 += 1 };
  s0 -> s4 [70, 70] { R3224 += 1, R3180 += 1, R91 += 1, R92 += 1 };
  s0 -> s1 [71, 65535] { R3224 += 1, R3180 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 69] { R3224 += 1, R3180 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 65535] { R3224 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [70, 70] { R3224 += 1, R3180 += 1, R91 += 1, R92 += 1 };
  s1 -> s4 [70, 70] { R3224 += 1, R3180 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [71, 65535] { R3224 += 1, R3180 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [0, 69] { R3224 += 1, R3180 += 1, R91 += 1, R92 += 1 };
  s2 -> s2 [0, 65535] { R3224 += 1, R3179 += 1, R3180 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [70, 70] { R3224 += 1, R3180 += 1, R91 += 1, R92 += 1 };
  s2 -> s4 [70, 70] { R3224 += 1, R3180 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [71, 65535] { R3224 += 1, R3180 += 1, R91 += 1, R92 += 1 };
  s3 -> s3 [0, 65535] { R3224 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3224 += 1, R3180 += 1, R91 += 1, R92 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R3224 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3224 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 69] { R3226 += 1, R3182 += 1, R97 += 1, R98 += 1 };
  s0 -> s0 [0, 65535] { R3225 += 1, R3226 += 1 };
  s0 -> s2 [0, 65535] { R3226 += 1, R3181 += 1, R3182 += 1 };
  s0 -> s3 [70, 70] { R3226 += 1, R3182 += 1, R97 += 1, R98 += 1 };
  s0 -> s4 [70, 70] { R3226 += 1, R3182 += 1, R97 += 1, R98 += 1 };
  s0 -> s1 [71, 65535] { R3226 += 1, R3182 += 1, R97 += 1, R98 += 1 };
  s1 -> s1 [0, 69] { R3226 += 1, R3182 += 1, R97 += 1, R98 += 1 };
  s1 -> s1 [0, 65535] { R3226 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [70, 70] { R3226 += 1, R3182 += 1, R97 += 1, R98 += 1 };
  s1 -> s4 [70, 70] { R3226 += 1, R3182 += 1, R97 += 1, R98 += 1 };
  s1 -> s1 [71, 65535] { R3226 += 1, R3182 += 1, R97 += 1, R98 += 1 };
  s2 -> s1 [0, 69] { R3226 += 1, R3182 += 1, R97 += 1, R98 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3226 += 1, R3181 += 1, R3182 += 1 };
  s2 -> s3 [70, 70] { R3226 += 1, R3182 += 1, R97 += 1, R98 += 1 };
  s2 -> s4 [70, 70] { R3226 += 1, R3182 += 1, R97 += 1, R98 += 1 };
  s2 -> s1 [71, 65535] { R3226 += 1, R3182 += 1, R97 += 1, R98 += 1 };
  s3 -> s3 [0, 65535] { R3226 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3226 += 1, R3182 += 1, R97 += 1, R98 += 1 };
  s4 -> s6 [0, 65535] { R3226 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3226 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 69] { R3228 += 1, R3184 += 1, R2893 += 1, R2894 += 1 };
  s0 -> s2 [0, 69] { R3228 += 1, R3184 += 1, R2894 += 1, R2895 += 1, R2896 += 1 };
  s0 -> s3 [0, 65535] { R3228 += 1, R3183 += 1, R3184 += 1 };
  s0 -> s0 [0, 65535] { R3227 += 1, R3228 += 1 };
  s0 -> s4 [70, 70] { R3228 += 1, R3184 += 1, R2893 += 1, R2894 += 1 };
  s0 -> s5 [70, 70] { R3228 += 1, R3184 += 1, R2893 += 1, R2894 += 1 };
  s0 -> s6 [70, 70] { R3228 += 1, R3184 += 1, R2894 += 1, R2895 += 1, R2896 += 1 };
  s0 -> s7 [70, 70] { R3228 += 1, R3184 += 1, R2894 += 1, R2895 += 1, R2896 += 1 };
  s0 -> s1 [71, 65535] { R3228 += 1, R3184 += 1, R2893 += 1, R2894 += 1 };
  s0 -> s2 [71, 65535] { R3228 += 1, R3184 += 1, R2894 += 1, R2895 += 1, R2896 += 1 };
  s1 -> s1 [0, 69] { R3228 += 1, R3184 += 1, R2893 += 1, R2894 += 1 };
  s1 -> s2 [0, 69] { R3228 += 1, R3184 += 1, R2894 += 1, R2895 += 1, R2896 += 1 };
  s1 -> s4 [70, 70] { R3228 += 1, R3184 += 1, R2893 += 1, R2894 += 1 };
  s1 -> s5 [70, 70] { R3228 += 1, R3184 += 1, R2893 += 1, R2894 += 1 };
  s1 -> s6 [70, 70] { R3228 += 1, R3184 += 1, R2894 += 1, R2895 += 1, R2896 += 1 };
  s1 -> s7 [70, 70] { R3228 += 1, R3184 += 1, R2894 += 1, R2895 += 1, R2896 += 1 };
  s1 -> s1 [71, 65535] { R3228 += 1, R3184 += 1, R2893 += 1, R2894 += 1 };
  s1 -> s2 [71, 65535] { R3228 += 1, R3184 += 1, R2894 += 1, R2895 += 1, R2896 += 1 };
  s2 -> s2 [0, 69] { R3228 += 1, R3184 += 1, R2894 += 1, R2895 += 1, R2896 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R3228 += 1 };
  s2 -> s6 [70, 70] { R3228 += 1, R3184 += 1, R2894 += 1, R2895 += 1, R2896 += 1 };
  s2 -> s7 [70, 70] { R3228 += 1, R3184 += 1, R2894 += 1, R2895 += 1, R2896 += 1 };
  s2 -> s2 [71, 65535] { R3228 += 1, R3184 += 1, R2894 += 1, R2895 += 1, R2896 += 1 };
  s3 -> s1 [0, 69] { R3228 += 1, R3184 += 1, R2893 += 1, R2894 += 1 };
  s3 -> s2 [0, 69] { R3228 += 1, R3184 += 1, R2894 += 1, R2895 += 1, R2896 += 1 };
  s3 -> s3 [0, 65535] { R3228 += 1, R3183 += 1, R3184 += 1 };
  s3 -> s4 [70, 70] { R3228 += 1, R3184 += 1, R2893 += 1, R2894 += 1 };
  s3 -> s5 [70, 70] { R3228 += 1, R3184 += 1, R2893 += 1, R2894 += 1 };
  s3 -> s6 [70, 70] { R3228 += 1, R3184 += 1, R2894 += 1, R2895 += 1, R2896 += 1 };
  s3 -> s7 [70, 70] { R3228 += 1, R3184 += 1, R2894 += 1, R2895 += 1, R2896 += 1 };
  s3 -> s1 [71, 65535] { R3228 += 1, R3184 += 1, R2893 += 1, R2894 += 1 };
  s3 -> s2 [71, 65535] { R3228 += 1, R3184 += 1, R2894 += 1, R2895 += 1, R2896 += 1 };
  s4 -> s4 [0, 65535] { R3228 += 1, R3184 += 1, R2893 += 1, R2894 += 1 };
  s4 -> s6 [0, 65535] { R3228 += 1, R3184 += 1, R2894 += 1, R2895 += 1, R2896 += 1 };
  s6 -> s6 [0, 65535] { R3228 += 1, R3184 += 1, R2894 += 1, R2895 += 1, R2896 += 1 };
  s6 -> s9 [0, 65535] { R3228 += 1 };
  s6 -> s8 [0, 65535];
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R3228 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R3228 += 1 };
  s9 -> s8 [0, 65535];
  accepting s8, s2, s9, s6, s7;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 69] { R3230 += 1, R3186 += 1, R3121 += 1, R3122 += 1 };
  s0 -> s2 [0, 65535] { R3230 += 1, R3185 += 1, R3186 += 1 };
  s0 -> s0 [0, 65535] { R3229 += 1, R3230 += 1 };
  s0 -> s3 [70, 70] { R3230 += 1, R3186 += 1, R3121 += 1, R3122 += 1 };
  s0 -> s4 [70, 70] { R3230 += 1, R3186 += 1, R3121 += 1, R3122 += 1 };
  s0 -> s1 [71, 65535] { R3230 += 1, R3186 += 1, R3121 += 1, R3122 += 1 };
  s1 -> s1 [0, 69] { R3230 += 1, R3186 += 1, R3121 += 1, R3122 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3230 += 1 };
  s1 -> s3 [70, 70] { R3230 += 1, R3186 += 1, R3121 += 1, R3122 += 1 };
  s1 -> s4 [70, 70] { R3230 += 1, R3186 += 1, R3121 += 1, R3122 += 1 };
  s1 -> s1 [71, 65535] { R3230 += 1, R3186 += 1, R3121 += 1, R3122 += 1 };
  s2 -> s1 [0, 69] { R3230 += 1, R3186 += 1, R3121 += 1, R3122 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3230 += 1, R3185 += 1, R3186 += 1 };
  s2 -> s3 [70, 70] { R3230 += 1, R3186 += 1, R3121 += 1, R3122 += 1 };
  s2 -> s4 [70, 70] { R3230 += 1, R3186 += 1, R3121 += 1, R3122 += 1 };
  s2 -> s1 [71, 65535] { R3230 += 1, R3186 += 1, R3121 += 1, R3122 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R3230 += 1, R3186 += 1, R3121 += 1, R3122 += 1 };
  s3 -> s6 [0, 65535] { R3230 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3230 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3230 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [102, 102];
  accepting s1;
};
};
constraint R2 = R3148 && R3 = R3230 && R23 - R3230 = -1 && R24 = R3230 && R25 - R3230 = -1 && R26 = R3230 && R27 = 0 && R28 = 1 && R29 = 0 && R30 = 1 && R45 + R84 + R83 + -1*R2898 + -1*R2894 - R66 = 0 && R49 + R89 + R87 = 0 && R50 + R90 + R88 + -1*R2898 + -1*R2894 - R66 = 0 && R55 + R96 + R93 + -1*R2900 + -1*R2896 - R68 = 0 && R65 + R2897 + R2893 = 0 && R67 + R2899 + R2895 = 0 && R3147 = 0 && R3171 = 0 && R3172 = 0 && R3177 = 0 && R3178 = 0 && R3183 = 0 && R3184 = 0 && R3187 = 0 && R3188 = R3230 && R3189 = 0 && R3190 = R3230 && R3191 = 0 && R3192 = R3230 && R3193 = 0 && R3194 = R3230 && R3195 = 0 && R3196 = R3230 && R3197 = 0 && R3198 = R3230 && R3199 = 0 && R3200 = R3230 && R3201 = 0 && R3202 = R3230 && R3203 = 0 && R3204 = R3230 && R3205 = 0 && R3206 = R3230 && R3207 = 0 && R3208 = R3230 && R3209 = 0 && R3210 = R3230 && R3211 = 0 && R3212 = R3230 && R3213 = 0 && R3214 = R3230 && R3215 = 0 && R3216 = R3230 && R3217 = 0 && R3218 = R3230 && R3219 = 0 && R3220 = R3230 && R3221 = 0 && R3222 = R3230 && R3223 = 0 && R3224 = R3230 && R3225 = 0 && R3226 = R3230 && R3227 = 0 && R3228 = R3230 && R3229 = 0 && R12 < 1 && R15 < 1 && R16 < 1 && R47 + R86 + R85 < 1 && R61 + R102 + R99 < 1 && -1*R2898 + -1*R2894 - R66 < 1 && -1*R2900 + -1*R2896 - R68 < 1 && -1 < R3148 && 0 < R3230 && (R53 + R94 + R91 != 0 || R54 + R95 + R92 + -1*R2898 + -1*R2894 - R66 = 0 || R66 + R2898 + R2894 < 1) && (R59 + R100 + R97 != 0 || R60 + R101 + R98 + -1*R2898 + -1*R2894 - R66 = 0 || R66 + R2898 + R2894 < 1) && (R66 + R2898 + R2894 != 0 || ((R53 + R94 + R91 != 0 || R54 + R95 + R92 = 0 || R68 + R2900 + R2896 < 1) && (R53 + R94 + R91 = 0 || R68 + R2900 + R2896 < 1))) && (R66 + R2898 + R2894 != 0 || ((R59 + R100 + R97 != 0 || R60 + R101 + R98 = 0 || R68 + R2900 + R2896 < 1) && (R59 + R100 + R97 = 0 || R68 + R2900 + R2896 < 1))) && (R66 + R2898 + R2894 != 0 || ((R73 + R3126 + R3121 != 0 || R74 + R3127 + R3122 = 0 || R68 + R2900 + R2896 < 1) && (R73 + R3126 + R3121 = 0 || R68 + R2900 + R2896 < 1))) && (R68 + R2900 + R2896 != 0 || R77 + R3130 + R3125 = 0 || (R75 + R3128 + R3123 = 0 && R76 + R3129 + R3124 = 0)) && (R73 + R3126 + R3121 != 0 || R66 + R2898 + R2894 + -1*R3127 + -1*R3122 - R74 = 0 || R66 + R2898 + R2894 < 1) && (R75 + R3128 + R3123 != 0 || R68 + R2900 + R2896 + -1*R3129 + -1*R3124 - R76 = 0 || R68 + R2900 + R2896 < 1) && (R3131 != 0 || R3132 = R3148 || (R20 = 0 && R3148 = 0)) && (R3133 != 0 || R3134 = R3148 || (R20 = 0 && R3148 = 0)) && (R3135 != 0 || R3136 = R3148 || (R20 = 0 && R3148 = 0)) && (R3137 != 0 || R3138 = R3148 || (R20 = 0 && R3148 = 0)) && (R3139 != 0 || R3140 = R3148 || (R20 = 0 && R3148 = 0)) && (R3141 != 0 || R3142 = R3148 || (R20 = 0 && R3148 = 0)) && (R3143 != 0 || R3144 = R3148 || (R20 = 0 && R3148 = 0)) && (R3145 != 0 || R3146 = R3148 || (R20 = 0 && R3148 = 0)) && (R3149 != 0 || R3148 = R3150 || (R20 = 0 && R3148 = 0)) && (R21 = 0 || (R3169 = 0 && R3170 = 0)) && (R21 = 0 || (R3173 = 0 && R3174 = 0)) && (R21 = 0 || (R3175 = 0 && R3176 = 0)) && (R21 = 0 || (R3179 = 0 && R3180 = 0)) && (R21 = 0 || (R3181 = 0 && R3182 = 0)) && (R21 = 0 || (R3185 = 0 && R3186 = 0)) && (R22 = 0 || (R3151 = 0 && R3152 = 0)) && (R22 = 0 || (R3153 = 0 && R3154 = 0)) && (R22 = 0 || (R3155 = 0 && R3156 = 0)) && (R22 = 0 || (R3157 = 0 && R3158 = 0)) && (R22 = 0 || (R3159 = 0 && R3160 = 0)) && (R22 = 0 || (R3161 = 0 && R3162 = 0)) && (R22 = 0 || (R3163 = 0 && R3164 = 0)) && (R22 = 0 || (R3165 = 0 && R3166 = 0)) && (R22 = 0 || (R3167 = 0 && R3168 = 0)) && (R53 + R94 + R91 = 0 || R66 + R2898 + R2894 < 1) && (R59 + R100 + R97 = 0 || R66 + R2898 + R2894 < 1) && (R73 + R3126 + R3121 = 0 || R66 + R2898 + R2894 < 1) && (R75 + R3128 + R3123 = 0 || R68 + R2900 + R2896 < 1) && (R3131 = 0 || (R20 = 0 && R3148 = 0)) && (R3133 = 0 || (R20 = 0 && R3148 = 0)) && (R3135 = 0 || (R20 = 0 && R3148 = 0)) && (R3137 = 0 || (R20 = 0 && R3148 = 0)) && (R3139 = 0 || (R20 = 0 && R3148 = 0)) && (R3141 = 0 || (R20 = 0 && R3148 = 0)) && (R3143 = 0 || (R20 = 0 && R3148 = 0)) && (R3145 = 0 || (R20 = 0 && R3148 = 0)) && (R3149 = 0 || (R20 = 0 && R3148 = 0));
// End of Parikh automata intersection problem
