// Parikh automata intersection problem, generated by OSTRICH+
counter int R12, R15, R16, R2, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R3451, R3452, R3453, R3454, R3455, R3456, R3457, R3458, R3459, R3460, R3461, R3462, R3463, R3464, R3685, R3686, R3687, R3688, R3689, R3690, R3691, R3692, R3693, R3694, R3695, R3696, R3697, R3698, R3699, R3700, R3701, R3702, R3703, R3704, R3705, R3706, R3707, R3708, R3709, R3710, R3711, R3712, R3713, R3714, R3715, R3716, R3717, R3718, R3719, R3720, R3721, R3722, R3723, R3724, R3725, R3726, R3727, R3728, R3729, R3730, R3731, R3732, R3733, R3734, R3735, R3736, R3737, R3738, R3739, R3740, R3741, R3742, R3743, R3744, R3745, R3746, R3747, R3748, R3749, R3750, R3751, R3752, R3753, R3754, R3755, R3756, R3757, R3758, R3759, R3760, R3761, R3762, R3763, R3764, R3765, R3766, R3767, R3768, R3769, R3770, R3771, R3772, R3773, R3774, R3775, R3776, R3777, R3778, R3779, R3780, R3781, R3782, R3783, R3784, R3785, R3786, R3787, R3788, R3789, R3790, R3791, R3792, R3793, R3794, R4, R45, R47, R49, R5, R50, R53, R54, R55, R59, R60, R61, R65, R66, R67, R68, R73, R74, R75, R76, R77, R83, R84, R85, R86, R87, R88, R89, R90, R91, R92, R93, R94, R95, R96;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [70, 70];
  s0 -> s0 [71, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [70, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R15 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 69];
  s0 -> s0 [0, 65535] { R16 += 1 };
  s0 -> s2 [70, 70];
  s0 -> s1 [71, 65535];
  s1 -> s1 [0, 69];
  s1 -> s2 [70, 70];
  s1 -> s1 [71, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R24 += 1 };
  s0 -> s0 [0, 65535] { R23 += 1, R24 += 1 };
  s0 -> s2 [9, 13] { R24 += 1 };
  s0 -> s1 [14, 31] { R24 += 1 };
  s0 -> s2 [32, 32] { R24 += 1 };
  s0 -> s1 [33, 65535] { R24 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R24 += 1 };
  s2 -> s1 [0, 65535] { R24 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R25 += 1, R26 += 1 };
  s1 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R28 += 1 };
  s0 -> s0 [0, 65535] { R27 += 1, R28 += 1 };
  s0 -> s2 [9, 13] { R28 += 1 };
  s0 -> s1 [14, 31] { R28 += 1 };
  s0 -> s2 [32, 32] { R28 += 1 };
  s0 -> s1 [33, 65535] { R28 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R28 += 1 };
  s2 -> s1 [0, 65535] { R28 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R29 += 1, R30 += 1 };
  s1 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R3716 += 1, R22 += 1 };
  s0 -> s0 [0, 65535] { R3715 += 1, R3716 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R3716 += 1, R22 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 69] { R3718 += 1 };
  s0 -> s0 [0, 65535] { R3717 += 1, R3718 += 1 };
  s0 -> s2 [70, 70] { R3718 += 1 };
  s0 -> s3 [70, 70] { R3718 += 1 };
  s0 -> s1 [76, 65535] { R3718 += 1 };
  s1 -> s1 [0, 69] { R3718 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R3718 += 1 };
  s1 -> s3 [70, 70] { R3718 += 1 };
  s1 -> s1 [76, 65535] { R3718 += 1 };
  s2 -> s2 [0, 70] { R3718 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [76, 65535] { R3718 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 69] { R3720 += 1, R45 += 1 };
  s0 -> s0 [0, 65535] { R3719 += 1, R3720 += 1 };
  s0 -> s2 [70, 70] { R3720 += 1, R45 += 1 };
  s0 -> s3 [70, 70] { R3720 += 1, R45 += 1 };
  s0 -> s1 [71, 65535] { R3720 += 1, R45 += 1 };
  s1 -> s1 [0, 69] { R3720 += 1, R45 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R3720 += 1, R45 += 1 };
  s1 -> s3 [70, 70] { R3720 += 1, R45 += 1 };
  s1 -> s1 [71, 65535] { R3720 += 1, R45 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R3720 += 1, R45 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 69] { R3722 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R3721 += 1, R3722 += 1 };
  s0 -> s2 [70, 70] { R3722 += 1, R47 += 1 };
  s0 -> s3 [70, 70] { R3722 += 1, R47 += 1 };
  s0 -> s1 [71, 65535] { R3722 += 1, R47 += 1 };
  s1 -> s1 [0, 69] { R3722 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R3722 += 1, R47 += 1 };
  s1 -> s3 [70, 70] { R3722 += 1, R47 += 1 };
  s1 -> s1 [71, 65535] { R3722 += 1, R47 += 1 };
  s2 -> s2 [0, 65535] { R3722 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 69] { R3724 += 1, R49 += 1, R50 += 1 };
  s0 -> s0 [0, 65535] { R3723 += 1, R3724 += 1 };
  s0 -> s2 [70, 70] { R3724 += 1, R49 += 1, R50 += 1 };
  s0 -> s3 [70, 70] { R3724 += 1, R49 += 1, R50 += 1 };
  s0 -> s1 [71, 65535] { R3724 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 69] { R3724 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R3724 += 1, R49 += 1, R50 += 1 };
  s1 -> s3 [70, 70] { R3724 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [71, 65535] { R3724 += 1, R49 += 1, R50 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3724 += 1, R49 += 1, R50 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 69] { R3726 += 1, R53 += 1, R54 += 1 };
  s0 -> s0 [0, 65535] { R3725 += 1, R3726 += 1 };
  s0 -> s2 [70, 70] { R3726 += 1, R53 += 1, R54 += 1 };
  s0 -> s3 [70, 70] { R3726 += 1, R53 += 1, R54 += 1 };
  s0 -> s1 [71, 65535] { R3726 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 69] { R3726 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R3726 += 1, R53 += 1, R54 += 1 };
  s1 -> s3 [70, 70] { R3726 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [71, 65535] { R3726 += 1, R53 += 1, R54 += 1 };
  s2 -> s2 [0, 65535] { R3726 += 1, R53 += 1, R54 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 69] { R3728 += 1, R59 += 1, R60 += 1 };
  s0 -> s0 [0, 65535] { R3727 += 1, R3728 += 1 };
  s0 -> s2 [70, 70] { R3728 += 1, R59 += 1, R60 += 1 };
  s0 -> s3 [70, 70] { R3728 += 1, R59 += 1, R60 += 1 };
  s0 -> s1 [71, 65535] { R3728 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 69] { R3728 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R3728 += 1, R59 += 1, R60 += 1 };
  s1 -> s3 [70, 70] { R3728 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [71, 65535] { R3728 += 1, R59 += 1, R60 += 1 };
  s2 -> s2 [0, 65535] { R3728 += 1, R59 += 1, R60 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 69] { R3730 += 1, R65 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R3729 += 1, R3730 += 1 };
  s0 -> s2 [70, 70] { R3730 += 1, R65 += 1, R66 += 1 };
  s0 -> s3 [70, 70] { R3730 += 1, R65 += 1, R66 += 1 };
  s0 -> s1 [71, 65535] { R3730 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 69] { R3730 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R3730 += 1, R65 += 1, R66 += 1 };
  s1 -> s3 [70, 70] { R3730 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [71, 65535] { R3730 += 1, R65 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R3730 += 1, R65 += 1, R66 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 69] { R3732 += 1, R73 += 1, R74 += 1 };
  s0 -> s0 [0, 65535] { R3731 += 1, R3732 += 1 };
  s0 -> s2 [70, 70] { R3732 += 1, R73 += 1, R74 += 1 };
  s0 -> s3 [70, 70] { R3732 += 1, R73 += 1, R74 += 1 };
  s0 -> s1 [71, 65535] { R3732 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 69] { R3732 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R3732 += 1, R73 += 1, R74 += 1 };
  s1 -> s3 [70, 70] { R3732 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [71, 65535] { R3732 += 1, R73 += 1, R74 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3732 += 1, R73 += 1, R74 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 69] { R3752 += 1 };
  s0 -> s0 [0, 65535] { R3751 += 1, R3752 += 1 };
  s0 -> s2 [70, 70] { R3752 += 1 };
  s0 -> s1 [71, 65535] { R3752 += 1 };
  s1 -> s1 [0, 69] { R3752 += 1 };
  s1 -> s2 [70, 70] { R3752 += 1 };
  s1 -> s1 [71, 65535] { R3752 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3752 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R3754 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R3753 += 1, R3754 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R3754 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 69] { R3756 += 1 };
  s0 -> s0 [0, 65535] { R3755 += 1, R3756 += 1 };
  s0 -> s2 [0, 65535] { R3756 += 1, R12 += 1 };
  s0 -> s3 [70, 70] { R3756 += 1 };
  s0 -> s1 [71, 65535] { R3756 += 1 };
  s1 -> s1 [0, 69] { R3756 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [70, 70] { R3756 += 1 };
  s1 -> s1 [71, 65535] { R3756 += 1 };
  s2 -> s1 [0, 69] { R3756 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3756 += 1, R12 += 1 };
  s2 -> s3 [70, 70] { R3756 += 1 };
  s2 -> s1 [71, 65535] { R3756 += 1 };
  s3 -> s3 [0, 65535] { R3756 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 69] { R3758 += 1, R3696 += 1 };
  s0 -> s2 [0, 65535] { R3758 += 1, R3695 += 1, R3696 += 1 };
  s0 -> s0 [0, 65535] { R3757 += 1, R3758 += 1 };
  s0 -> s1 [71, 65535] { R3758 += 1, R3696 += 1 };
  s1 -> s1 [0, 69] { R3758 += 1, R3696 += 1 };
  s1 -> s1 [0, 65535] { R3758 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [71, 65535] { R3758 += 1, R3696 += 1 };
  s2 -> s1 [0, 69] { R3758 += 1, R3696 += 1 };
  s2 -> s2 [0, 65535] { R3758 += 1, R3695 += 1, R3696 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [71, 65535] { R3758 += 1, R3696 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R3760 += 1, R3698 += 1, R20 += 1 };
  s0 -> s0 [0, 65535] { R3759 += 1, R3760 += 1 };
  s0 -> s2 [0, 65535] { R3760 += 1, R3697 += 1, R3698 += 1 };
  s1 -> s1 [0, 65535] { R3760 += 1, R3698 += 1, R20 += 1 };
  s1 -> s4 [0, 65535] { R3760 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3760 += 1, R3698 += 1, R20 += 1 };
  s2 -> s2 [0, 65535] { R3760 += 1, R3697 += 1, R3698 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3760 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 70] { R3762 += 1, R3700 += 1 };
  s0 -> s2 [0, 65535] { R3762 += 1, R3699 += 1, R3700 += 1 };
  s0 -> s0 [0, 65535] { R3761 += 1, R3762 += 1 };
  s0 -> s1 [75, 65535] { R3762 += 1, R3700 += 1 };
  s1 -> s1 [0, 70] { R3762 += 1, R3700 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3762 += 1 };
  s1 -> s1 [75, 65535] { R3762 += 1, R3700 += 1 };
  s2 -> s1 [0, 70] { R3762 += 1, R3700 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3762 += 1, R3699 += 1, R3700 += 1 };
  s2 -> s1 [75, 65535] { R3762 += 1, R3700 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s0 [0, 65535] { R3763 += 1, R3764 += 1 };
  s0 -> s1 [0, 65535] { R3764 += 1, R3702 += 1, R84 += 1 };
  s0 -> s2 [0, 65535] { R3764 += 1, R3701 += 1, R3702 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3764 += 1, R3702 += 1, R84 += 1 };
  s1 -> s4 [0, 65535] { R3764 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3764 += 1, R3702 += 1, R84 += 1 };
  s2 -> s2 [0, 65535] { R3764 += 1, R3701 += 1, R3702 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3764 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 74] { R3766 += 1, R3704 += 1 };
  s0 -> s0 [0, 65535] { R3765 += 1, R3766 += 1 };
  s0 -> s2 [0, 65535] { R3766 += 1, R3703 += 1, R3704 += 1 };
  s0 -> s3 [0, 65535] { R3766 += 1, R3704 += 1, R86 += 1 };
  s0 -> s1 [76, 65535] { R3766 += 1, R3704 += 1 };
  s1 -> s1 [0, 74] { R3766 += 1, R3704 += 1 };
  s1 -> s1 [0, 65535] { R3766 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [76, 65535] { R3766 += 1, R3704 += 1 };
  s2 -> s1 [0, 74] { R3766 += 1, R3704 += 1 };
  s2 -> s2 [0, 65535] { R3766 += 1, R3703 += 1, R3704 += 1 };
  s2 -> s3 [0, 65535] { R3766 += 1, R3704 += 1, R86 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [76, 65535] { R3766 += 1, R3704 += 1 };
  s3 -> s1 [0, 74] { R3766 += 1, R3704 += 1 };
  s3 -> s4 [0, 65535] { R3766 += 1 };
  s3 -> s3 [0, 65535] { R3766 += 1, R3704 += 1, R86 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [76, 65535] { R3766 += 1, R3704 += 1 };
  s4 -> s4 [0, 65535] { R3766 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 65535] { R3768 += 1, R3706 += 1 };
  s0 -> s2 [0, 65535] { R3768 += 1, R3706 += 1, R90 += 1 };
  s0 -> s3 [0, 65535] { R3768 += 1, R3705 += 1, R3706 += 1 };
  s0 -> s0 [0, 65535] { R3767 += 1, R3768 += 1 };
  s1 -> s1 [0, 65535] { R3768 += 1, R3706 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R3768 += 1 };
  s2 -> s1 [0, 65535] { R3768 += 1, R3706 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R3768 += 1 };
  s2 -> s2 [0, 65535] { R3768 += 1, R3706 += 1, R90 += 1 };
  s3 -> s1 [0, 65535] { R3768 += 1, R3706 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R3768 += 1, R3706 += 1, R90 += 1 };
  s3 -> s3 [0, 65535] { R3768 += 1, R3705 += 1, R3706 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3768 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R3770 += 1, R3707 += 1, R3708 += 1 };
  s0 -> s2 [0, 65535] { R3770 += 1, R3708 += 1, R94 += 1, R95 += 1 };
  s0 -> s0 [0, 65535] { R3769 += 1, R3770 += 1 };
  s0 -> s3 [0, 65535] { R3770 += 1, R3708 += 1, R95 += 1, R96 += 1 };
  s1 -> s1 [0, 65535] { R3770 += 1, R3707 += 1, R3708 += 1 };
  s1 -> s2 [0, 65535] { R3770 += 1, R3708 += 1, R94 += 1, R95 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s3 [0, 65535] { R3770 += 1, R3708 += 1, R95 += 1, R96 += 1 };
  s2 -> s2 [0, 65535] { R3770 += 1, R3708 += 1, R94 += 1, R95 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R3770 += 1 };
  s2 -> s3 [0, 65535] { R3770 += 1, R3708 += 1, R95 += 1, R96 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R3770 += 1 };
  s3 -> s3 [0, 65535] { R3770 += 1, R3708 += 1, R95 += 1, R96 += 1 };
  s3 -> s6 [0, 65535] { R3770 += 1, R3708 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3770 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R3770 += 1 };
  s6 -> s6 [0, 65535] { R3770 += 1, R3708 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 74] { R3772 += 1, R3710 += 1, R3455 += 1 };
  s0 -> s0 [0, 65535] { R3771 += 1, R3772 += 1 };
  s0 -> s1 [0, 65535] { R3772 += 1, R3710 += 1 };
  s0 -> s2 [0, 65535] { R3772 += 1, R3709 += 1, R3710 += 1 };
  s0 -> s1 [76, 65535] { R3772 += 1, R3710 += 1, R3455 += 1 };
  s1 -> s1 [0, 74] { R3772 += 1, R3710 += 1, R3455 += 1 };
  s1 -> s1 [0, 65535] { R3772 += 1, R3710 += 1 };
  s1 -> s4 [0, 65535] { R3772 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [76, 65535] { R3772 += 1, R3710 += 1, R3455 += 1 };
  s2 -> s1 [0, 74] { R3772 += 1, R3710 += 1, R3455 += 1 };
  s2 -> s1 [0, 65535] { R3772 += 1, R3710 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3772 += 1, R3709 += 1, R3710 += 1 };
  s2 -> s1 [76, 65535] { R3772 += 1, R3710 += 1, R3455 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3772 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s0 [0, 65535] { R3773 += 1, R3774 += 1 };
  s0 -> s1 [0, 65535] { R3774 += 1, R3712 += 1, R3462 += 1 };
  s0 -> s2 [0, 65535] { R3774 += 1, R3712 += 1 };
  s0 -> s3 [0, 65535] { R3774 += 1, R3711 += 1, R3712 += 1 };
  s0 -> s4 [0, 65535] { R3774 += 1, R3712 += 1, R3462 += 1, R3464 += 1 };
  s1 -> s1 [0, 65535] { R3774 += 1, R3712 += 1, R3462 += 1 };
  s1 -> s2 [0, 65535] { R3774 += 1, R3712 += 1 };
  s1 -> s5 [0, 65535] { R3774 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R3774 += 1, R3712 += 1 };
  s2 -> s5 [0, 65535] { R3774 += 1 };
  s2 -> s6 [0, 65535];
  s3 -> s6 [0, 65535];
  s3 -> s1 [0, 65535] { R3774 += 1, R3712 += 1, R3462 += 1 };
  s3 -> s2 [0, 65535] { R3774 += 1, R3712 += 1 };
  s3 -> s3 [0, 65535] { R3774 += 1, R3711 += 1, R3712 += 1 };
  s3 -> s4 [0, 65535] { R3774 += 1, R3712 += 1, R3462 += 1, R3464 += 1 };
  s4 -> s1 [0, 65535] { R3774 += 1, R3712 += 1, R3462 += 1 };
  s4 -> s2 [0, 65535] { R3774 += 1, R3712 += 1 };
  s4 -> s5 [0, 65535] { R3774 += 1 };
  s4 -> s4 [0, 65535] { R3774 += 1, R3712 += 1, R3462 += 1, R3464 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R3774 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 65535] { R3776 += 1, R3714 += 1, R3690 += 1, R3691 += 1 };
  s0 -> s2 [0, 65535] { R3776 += 1, R3713 += 1, R3714 += 1 };
  s0 -> s3 [0, 65535] { R3776 += 1, R3714 += 1, R3691 += 1, R3692 += 1, R3693 += 1 };
  s0 -> s0 [0, 65535] { R3775 += 1, R3776 += 1 };
  s0 -> s4 [0, 65535] { R3776 += 1, R3714 += 1, R3691 += 1, R3693 += 1, R3694 += 1 };
  s1 -> s1 [0, 65535] { R3776 += 1, R3714 += 1, R3690 += 1, R3691 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s3 [0, 65535] { R3776 += 1, R3714 += 1, R3691 += 1, R3692 += 1, R3693 += 1 };
  s1 -> s8 [0, 65535] { R3776 += 1 };
  s1 -> s4 [0, 65535] { R3776 += 1, R3714 += 1, R3691 += 1, R3693 += 1, R3694 += 1 };
  s2 -> s1 [0, 65535] { R3776 += 1, R3714 += 1, R3690 += 1, R3691 += 1 };
  s2 -> s2 [0, 65535] { R3776 += 1, R3713 += 1, R3714 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s3 [0, 65535] { R3776 += 1, R3714 += 1, R3691 += 1, R3692 += 1, R3693 += 1 };
  s2 -> s4 [0, 65535] { R3776 += 1, R3714 += 1, R3691 += 1, R3693 += 1, R3694 += 1 };
  s3 -> s5 [0, 65535] { R3776 += 1, R3714 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s3 [0, 65535] { R3776 += 1, R3714 += 1, R3691 += 1, R3692 += 1, R3693 += 1 };
  s3 -> s8 [0, 65535] { R3776 += 1 };
  s3 -> s4 [0, 65535] { R3776 += 1, R3714 += 1, R3691 += 1, R3693 += 1, R3694 += 1 };
  s4 -> s5 [0, 65535] { R3776 += 1, R3714 += 1 };
  s4 -> s6 [0, 65535] { R3776 += 1, R3714 += 1, R3691 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s8 [0, 65535] { R3776 += 1 };
  s4 -> s4 [0, 65535] { R3776 += 1, R3714 += 1, R3691 += 1, R3693 += 1, R3694 += 1 };
  s5 -> s5 [0, 65535] { R3776 += 1, R3714 += 1 };
  s5 -> s7 [0, 65535];
  s5 -> s8 [0, 65535] { R3776 += 1 };
  s6 -> s5 [0, 65535] { R3776 += 1, R3714 += 1 };
  s6 -> s6 [0, 65535] { R3776 += 1, R3714 += 1, R3691 += 1 };
  s6 -> s7 [0, 65535];
  s6 -> s8 [0, 65535] { R3776 += 1 };
  s7 -> s7 [0, 65535];
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R3776 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s0 [0, 65535] { R3777 += 1, R3778 += 1 };
  s0 -> s1 [0, 65535] { R3778 += 1, R3734 += 1, R21 += 1 };
  s0 -> s2 [0, 65535] { R3778 += 1, R3733 += 1, R3734 += 1 };
  s1 -> s1 [0, 65535] { R3778 += 1, R3734 += 1, R21 += 1 };
  s1 -> s4 [0, 65535] { R3778 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3778 += 1, R3734 += 1, R21 += 1 };
  s2 -> s2 [0, 65535] { R3778 += 1, R3733 += 1, R3734 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3778 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 69] { R3780 += 1, R3736 += 1 };
  s0 -> s2 [0, 65535] { R3780 += 1, R3735 += 1, R3736 += 1 };
  s0 -> s0 [0, 65535] { R3779 += 1, R3780 += 1 };
  s0 -> s3 [70, 70] { R3780 += 1, R3736 += 1 };
  s0 -> s4 [70, 70] { R3780 += 1, R3736 += 1 };
  s0 -> s5 [75, 75] { R3780 += 1, R3736 += 1 };
  s0 -> s1 [76, 65535] { R3780 += 1, R3736 += 1 };
  s1 -> s1 [0, 69] { R3780 += 1, R3736 += 1 };
  s1 -> s3 [70, 70] { R3780 += 1, R3736 += 1 };
  s1 -> s4 [70, 70] { R3780 += 1, R3736 += 1 };
  s1 -> s5 [75, 75] { R3780 += 1, R3736 += 1 };
  s1 -> s1 [76, 65535] { R3780 += 1, R3736 += 1 };
  s2 -> s1 [0, 69] { R3780 += 1, R3736 += 1 };
  s2 -> s2 [0, 65535] { R3780 += 1, R3735 += 1, R3736 += 1 };
  s2 -> s3 [70, 70] { R3780 += 1, R3736 += 1 };
  s2 -> s4 [70, 70] { R3780 += 1, R3736 += 1 };
  s2 -> s5 [75, 75] { R3780 += 1, R3736 += 1 };
  s2 -> s1 [76, 65535] { R3780 += 1, R3736 += 1 };
  s3 -> s3 [0, 70] { R3780 += 1, R3736 += 1 };
  s3 -> s7 [75, 75] { R3780 += 1, R3736 += 1 };
  s3 -> s3 [76, 65535] { R3780 += 1, R3736 += 1 };
  s5 -> s5 [0, 69] { R3780 += 1, R3736 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R3780 += 1 };
  s5 -> s7 [70, 70] { R3780 += 1, R3736 += 1 };
  s5 -> s8 [70, 70] { R3780 += 1, R3736 += 1 };
  s5 -> s5 [75, 65535] { R3780 += 1, R3736 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 70] { R3780 += 1, R3736 += 1 };
  s7 -> s7 [0, 65535] { R3780 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [75, 65535] { R3780 += 1, R3736 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R3780 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 69] { R3782 += 1, R3738 += 1, R83 += 1 };
  s0 -> s0 [0, 65535] { R3781 += 1, R3782 += 1 };
  s0 -> s2 [0, 65535] { R3782 += 1, R3737 += 1, R3738 += 1 };
  s0 -> s3 [70, 70] { R3782 += 1, R3738 += 1, R83 += 1 };
  s0 -> s4 [70, 70] { R3782 += 1, R3738 += 1, R83 += 1 };
  s0 -> s1 [71, 65535] { R3782 += 1, R3738 += 1, R83 += 1 };
  s1 -> s1 [0, 69] { R3782 += 1, R3738 += 1, R83 += 1 };
  s1 -> s1 [0, 65535] { R3782 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [70, 70] { R3782 += 1, R3738 += 1, R83 += 1 };
  s1 -> s4 [70, 70] { R3782 += 1, R3738 += 1, R83 += 1 };
  s1 -> s1 [71, 65535] { R3782 += 1, R3738 += 1, R83 += 1 };
  s2 -> s1 [0, 69] { R3782 += 1, R3738 += 1, R83 += 1 };
  s2 -> s2 [0, 65535] { R3782 += 1, R3737 += 1, R3738 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [70, 70] { R3782 += 1, R3738 += 1, R83 += 1 };
  s2 -> s4 [70, 70] { R3782 += 1, R3738 += 1, R83 += 1 };
  s2 -> s1 [71, 65535] { R3782 += 1, R3738 += 1, R83 += 1 };
  s3 -> s3 [0, 65535] { R3782 += 1, R3738 += 1, R83 += 1 };
  s3 -> s6 [0, 65535] { R3782 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3782 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3782 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 69] { R3784 += 1, R3740 += 1, R85 += 1 };
  s0 -> s2 [0, 65535] { R3784 += 1, R3739 += 1, R3740 += 1 };
  s0 -> s0 [0, 65535] { R3783 += 1, R3784 += 1 };
  s0 -> s3 [70, 70] { R3784 += 1, R3740 += 1, R85 += 1 };
  s0 -> s4 [70, 70] { R3784 += 1, R3740 += 1, R85 += 1 };
  s0 -> s1 [71, 65535] { R3784 += 1, R3740 += 1, R85 += 1 };
  s1 -> s1 [0, 69] { R3784 += 1, R3740 += 1, R85 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3784 += 1 };
  s1 -> s3 [70, 70] { R3784 += 1, R3740 += 1, R85 += 1 };
  s1 -> s4 [70, 70] { R3784 += 1, R3740 += 1, R85 += 1 };
  s1 -> s1 [71, 65535] { R3784 += 1, R3740 += 1, R85 += 1 };
  s2 -> s1 [0, 69] { R3784 += 1, R3740 += 1, R85 += 1 };
  s2 -> s2 [0, 65535] { R3784 += 1, R3739 += 1, R3740 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [70, 70] { R3784 += 1, R3740 += 1, R85 += 1 };
  s2 -> s4 [70, 70] { R3784 += 1, R3740 += 1, R85 += 1 };
  s2 -> s1 [71, 65535] { R3784 += 1, R3740 += 1, R85 += 1 };
  s3 -> s3 [0, 65535] { R3784 += 1, R3740 += 1, R85 += 1 };
  s3 -> s6 [0, 65535] { R3784 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3784 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3784 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 69] { R3786 += 1, R3742 += 1, R87 += 1, R88 += 1 };
  s0 -> s2 [0, 69] { R3786 += 1, R3742 += 1, R88 += 1 };
  s0 -> s0 [0, 65535] { R3785 += 1, R3786 += 1 };
  s0 -> s3 [0, 65535] { R3786 += 1, R3741 += 1, R3742 += 1 };
  s0 -> s4 [70, 70] { R3786 += 1, R3742 += 1, R88 += 1 };
  s0 -> s5 [70, 70] { R3786 += 1, R3742 += 1, R87 += 1, R88 += 1 };
  s0 -> s6 [70, 70] { R3786 += 1, R3742 += 1, R87 += 1, R88 += 1 };
  s0 -> s7 [70, 70] { R3786 += 1, R3742 += 1, R88 += 1 };
  s0 -> s2 [71, 74] { R3786 += 1, R3742 += 1, R88 += 1 };
  s0 -> s1 [71, 65535] { R3786 += 1, R3742 += 1, R87 += 1, R88 += 1 };
  s0 -> s8 [75, 75] { R3786 += 1, R3742 += 1, R88 += 1 };
  s0 -> s2 [76, 65535] { R3786 += 1, R3742 += 1, R88 += 1 };
  s1 -> s1 [0, 69] { R3786 += 1, R3742 += 1, R87 += 1, R88 += 1 };
  s1 -> s2 [0, 69] { R3786 += 1, R3742 += 1, R88 += 1 };
  s1 -> s4 [70, 70] { R3786 += 1, R3742 += 1, R88 += 1 };
  s1 -> s5 [70, 70] { R3786 += 1, R3742 += 1, R87 += 1, R88 += 1 };
  s1 -> s6 [70, 70] { R3786 += 1, R3742 += 1, R87 += 1, R88 += 1 };
  s1 -> s7 [70, 70] { R3786 += 1, R3742 += 1, R88 += 1 };
  s1 -> s2 [71, 74] { R3786 += 1, R3742 += 1, R88 += 1 };
  s1 -> s1 [71, 65535] { R3786 += 1, R3742 += 1, R87 += 1, R88 += 1 };
  s1 -> s8 [75, 75] { R3786 += 1, R3742 += 1, R88 += 1 };
  s1 -> s2 [76, 65535] { R3786 += 1, R3742 += 1, R88 += 1 };
  s2 -> s2 [0, 69] { R3786 += 1, R3742 += 1, R88 += 1 };
  s2 -> s4 [70, 70] { R3786 += 1, R3742 += 1, R88 += 1 };
  s2 -> s7 [70, 70] { R3786 += 1, R3742 += 1, R88 += 1 };
  s2 -> s2 [71, 74] { R3786 += 1, R3742 += 1, R88 += 1 };
  s2 -> s8 [75, 75] { R3786 += 1, R3742 += 1, R88 += 1 };
  s2 -> s2 [76, 65535] { R3786 += 1, R3742 += 1, R88 += 1 };
  s3 -> s1 [0, 69] { R3786 += 1, R3742 += 1, R87 += 1, R88 += 1 };
  s3 -> s2 [0, 69] { R3786 += 1, R3742 += 1, R88 += 1 };
  s3 -> s3 [0, 65535] { R3786 += 1, R3741 += 1, R3742 += 1 };
  s3 -> s4 [70, 70] { R3786 += 1, R3742 += 1, R88 += 1 };
  s3 -> s5 [70, 70] { R3786 += 1, R3742 += 1, R87 += 1, R88 += 1 };
  s3 -> s6 [70, 70] { R3786 += 1, R3742 += 1, R87 += 1, R88 += 1 };
  s3 -> s7 [70, 70] { R3786 += 1, R3742 += 1, R88 += 1 };
  s3 -> s2 [71, 74] { R3786 += 1, R3742 += 1, R88 += 1 };
  s3 -> s1 [71, 65535] { R3786 += 1, R3742 += 1, R87 += 1, R88 += 1 };
  s3 -> s8 [75, 75] { R3786 += 1, R3742 += 1, R88 += 1 };
  s3 -> s2 [76, 65535] { R3786 += 1, R3742 += 1, R88 += 1 };
  s4 -> s4 [0, 74] { R3786 += 1, R3742 += 1, R88 += 1 };
  s4 -> s10 [75, 75] { R3786 += 1, R3742 += 1, R88 += 1 };
  s4 -> s4 [76, 65535] { R3786 += 1, R3742 += 1, R88 += 1 };
  s5 -> s4 [0, 74] { R3786 += 1, R3742 += 1, R88 += 1 };
  s5 -> s5 [0, 65535] { R3786 += 1, R3742 += 1, R87 += 1, R88 += 1 };
  s5 -> s10 [75, 75] { R3786 += 1, R3742 += 1, R88 += 1 };
  s5 -> s4 [76, 65535] { R3786 += 1, R3742 += 1, R88 += 1 };
  s8 -> s8 [0, 69] { R3786 += 1, R3742 += 1, R88 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R3786 += 1 };
  s8 -> s10 [70, 70] { R3786 += 1, R3742 += 1, R88 += 1 };
  s8 -> s11 [70, 70] { R3786 += 1, R3742 += 1, R88 += 1 };
  s8 -> s8 [71, 65535] { R3786 += 1, R3742 += 1, R88 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R3786 += 1, R3742 += 1, R88 += 1 };
  s10 -> s12 [0, 65535] { R3786 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R3786 += 1 };
  s11 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R3786 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 69] { R3788 += 1, R3744 += 1, R91 += 1, R92 += 1 };
  s0 -> s0 [0, 65535] { R3787 += 1, R3788 += 1 };
  s0 -> s2 [0, 65535] { R3788 += 1, R3743 += 1, R3744 += 1 };
  s0 -> s3 [70, 70] { R3788 += 1, R3744 += 1, R91 += 1, R92 += 1 };
  s0 -> s4 [70, 70] { R3788 += 1, R3744 += 1, R91 += 1, R92 += 1 };
  s0 -> s1 [71, 65535] { R3788 += 1, R3744 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 69] { R3788 += 1, R3744 += 1, R91 += 1, R92 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3788 += 1 };
  s1 -> s3 [70, 70] { R3788 += 1, R3744 += 1, R91 += 1, R92 += 1 };
  s1 -> s4 [70, 70] { R3788 += 1, R3744 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [71, 65535] { R3788 += 1, R3744 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [0, 69] { R3788 += 1, R3744 += 1, R91 += 1, R92 += 1 };
  s2 -> s2 [0, 65535] { R3788 += 1, R3743 += 1, R3744 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [70, 70] { R3788 += 1, R3744 += 1, R91 += 1, R92 += 1 };
  s2 -> s4 [70, 70] { R3788 += 1, R3744 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [71, 65535] { R3788 += 1, R3744 += 1, R91 += 1, R92 += 1 };
  s3 -> s3 [0, 65535] { R3788 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3788 += 1, R3744 += 1, R91 += 1, R92 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R3788 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3788 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 69] { R3790 += 1, R3746 += 1, R3452 += 1, R3453 += 1 };
  s0 -> s2 [0, 69] { R3790 += 1, R3746 += 1, R3452 += 1 };
  s0 -> s3 [0, 69] { R3790 += 1, R3746 += 1, R3451 += 1, R3452 += 1 };
  s0 -> s0 [0, 65535] { R3789 += 1, R3790 += 1 };
  s0 -> s4 [0, 65535] { R3790 += 1, R3745 += 1, R3746 += 1 };
  s0 -> s5 [70, 70] { R3790 += 1, R3746 += 1, R3452 += 1, R3453 += 1 };
  s0 -> s6 [70, 70] { R3790 += 1, R3746 += 1, R3451 += 1, R3452 += 1 };
  s0 -> s7 [70, 70] { R3790 += 1, R3746 += 1, R3452 += 1 };
  s0 -> s8 [70, 70] { R3790 += 1, R3746 += 1, R3451 += 1, R3452 += 1 };
  s0 -> s9 [70, 70] { R3790 += 1, R3746 += 1, R3452 += 1, R3453 += 1 };
  s0 -> s10 [70, 70] { R3790 += 1, R3746 += 1, R3452 += 1 };
  s0 -> s2 [71, 74] { R3790 += 1, R3746 += 1, R3452 += 1 };
  s0 -> s1 [71, 65535] { R3790 += 1, R3746 += 1, R3452 += 1, R3453 += 1 };
  s0 -> s3 [71, 65535] { R3790 += 1, R3746 += 1, R3451 += 1, R3452 += 1 };
  s0 -> s2 [76, 65535] { R3790 += 1, R3746 += 1, R3452 += 1 };
  s1 -> s1 [0, 69] { R3790 += 1, R3746 += 1, R3452 += 1, R3453 += 1 };
  s1 -> s2 [0, 69] { R3790 += 1, R3746 += 1, R3452 += 1 };
  s1 -> s5 [70, 70] { R3790 += 1, R3746 += 1, R3452 += 1, R3453 += 1 };
  s1 -> s7 [70, 70] { R3790 += 1, R3746 += 1, R3452 += 1 };
  s1 -> s9 [70, 70] { R3790 += 1, R3746 += 1, R3452 += 1, R3453 += 1 };
  s1 -> s10 [70, 70] { R3790 += 1, R3746 += 1, R3452 += 1 };
  s1 -> s2 [71, 74] { R3790 += 1, R3746 += 1, R3452 += 1 };
  s1 -> s1 [71, 65535] { R3790 += 1, R3746 += 1, R3452 += 1, R3453 += 1 };
  s1 -> s2 [76, 65535] { R3790 += 1, R3746 += 1, R3452 += 1 };
  s2 -> s2 [0, 69] { R3790 += 1, R3746 += 1, R3452 += 1 };
  s2 -> s11 [0, 65535];
  s2 -> s2 [0, 65535] { R3790 += 1 };
  s2 -> s7 [70, 70] { R3790 += 1, R3746 += 1 };
  s2 -> s10 [70, 70] { R3790 += 1, R3746 += 1 };
  s2 -> s2 [71, 74] { R3790 += 1, R3746 += 1, R3452 += 1 };
  s2 -> s2 [71, 65535] { R3790 += 1, R3746 += 1 };
  s2 -> s2 [76, 65535] { R3790 += 1, R3746 += 1, R3452 += 1 };
  s3 -> s1 [0, 69] { R3790 += 1, R3746 += 1, R3452 += 1, R3453 += 1 };
  s3 -> s2 [0, 69] { R3790 += 1, R3746 += 1, R3452 += 1 };
  s3 -> s3 [0, 69] { R3790 += 1, R3746 += 1, R3451 += 1, R3452 += 1 };
  s3 -> s5 [70, 70] { R3790 += 1, R3746 += 1, R3452 += 1, R3453 += 1 };
  s3 -> s6 [70, 70] { R3790 += 1, R3746 += 1, R3451 += 1, R3452 += 1 };
  s3 -> s7 [70, 70] { R3790 += 1, R3746 += 1, R3452 += 1 };
  s3 -> s8 [70, 70] { R3790 += 1, R3746 += 1, R3451 += 1, R3452 += 1 };
  s3 -> s9 [70, 70] { R3790 += 1, R3746 += 1, R3452 += 1, R3453 += 1 };
  s3 -> s10 [70, 70] { R3790 += 1, R3746 += 1, R3452 += 1 };
  s3 -> s2 [71, 74] { R3790 += 1, R3746 += 1, R3452 += 1 };
  s3 -> s1 [71, 65535] { R3790 += 1, R3746 += 1, R3452 += 1, R3453 += 1 };
  s3 -> s3 [71, 65535] { R3790 += 1, R3746 += 1, R3451 += 1, R3452 += 1 };
  s3 -> s2 [76, 65535] { R3790 += 1, R3746 += 1, R3452 += 1 };
  s4 -> s1 [0, 69] { R3790 += 1, R3746 += 1, R3452 += 1, R3453 += 1 };
  s4 -> s2 [0, 69] { R3790 += 1, R3746 += 1, R3452 += 1 };
  s4 -> s3 [0, 69] { R3790 += 1, R3746 += 1, R3451 += 1, R3452 += 1 };
  s4 -> s4 [0, 65535] { R3790 += 1, R3745 += 1, R3746 += 1 };
  s4 -> s5 [70, 70] { R3790 += 1, R3746 += 1, R3452 += 1, R3453 += 1 };
  s4 -> s6 [70, 70] { R3790 += 1, R3746 += 1, R3451 += 1, R3452 += 1 };
  s4 -> s7 [70, 70] { R3790 += 1, R3746 += 1, R3452 += 1 };
  s4 -> s8 [70, 70] { R3790 += 1, R3746 += 1, R3451 += 1, R3452 += 1 };
  s4 -> s9 [70, 70] { R3790 += 1, R3746 += 1, R3452 += 1, R3453 += 1 };
  s4 -> s10 [70, 70] { R3790 += 1, R3746 += 1, R3452 += 1 };
  s4 -> s2 [71, 74] { R3790 += 1, R3746 += 1, R3452 += 1 };
  s4 -> s1 [71, 65535] { R3790 += 1, R3746 += 1, R3452 += 1, R3453 += 1 };
  s4 -> s3 [71, 65535] { R3790 += 1, R3746 += 1, R3451 += 1, R3452 += 1 };
  s4 -> s2 [76, 65535] { R3790 += 1, R3746 += 1, R3452 += 1 };
  s5 -> s7 [0, 74] { R3790 += 1, R3746 += 1, R3452 += 1 };
  s5 -> s5 [0, 65535] { R3790 += 1, R3746 += 1, R3452 += 1, R3453 += 1 };
  s5 -> s7 [76, 65535] { R3790 += 1, R3746 += 1, R3452 += 1 };
  s7 -> s7 [0, 74] { R3790 += 1, R3746 += 1, R3452 += 1 };
  s7 -> s7 [0, 65535] { R3790 += 1, R3746 += 1 };
  s7 -> s11 [0, 65535];
  s7 -> s12 [0, 65535] { R3790 += 1 };
  s7 -> s7 [76, 65535] { R3790 += 1, R3746 += 1, R3452 += 1 };
  s8 -> s7 [0, 74] { R3790 += 1, R3746 += 1, R3452 += 1 };
  s8 -> s5 [0, 65535] { R3790 += 1, R3746 += 1, R3452 += 1, R3453 += 1 };
  s8 -> s8 [0, 65535] { R3790 += 1, R3746 += 1, R3451 += 1, R3452 += 1 };
  s8 -> s7 [76, 65535] { R3790 += 1, R3746 += 1, R3452 += 1 };
  s10 -> s11 [0, 65535];
  s10 -> s10 [0, 65535] { R3790 += 1 };
  s11 -> s11 [0, 65535];
  s12 -> s11 [0, 65535];
  s12 -> s12 [0, 65535] { R3790 += 1 };
  accepting s12, s2, s7, s10, s11;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 69] { R3792 += 1, R3748 += 1, R3457 += 1, R3458 += 1 };
  s0 -> s2 [0, 69] { R3792 += 1, R3748 += 1, R3458 += 1, R3460 += 1 };
  s0 -> s3 [0, 69] { R3792 += 1, R3748 += 1, R3458 += 1, R3459 += 1, R3460 += 1 };
  s0 -> s4 [0, 65535] { R3792 += 1, R3747 += 1, R3748 += 1 };
  s0 -> s0 [0, 65535] { R3791 += 1, R3792 += 1 };
  s0 -> s5 [70, 70] { R3792 += 1, R3748 += 1, R3457 += 1, R3458 += 1 };
  s0 -> s6 [70, 70] { R3792 += 1, R3748 += 1, R3458 += 1, R3459 += 1, R3460 += 1 };
  s0 -> s7 [70, 70] { R3792 += 1, R3748 += 1, R3457 += 1, R3458 += 1 };
  s0 -> s8 [70, 70] { R3792 += 1, R3748 += 1, R3458 += 1, R3459 += 1, R3460 += 1 };
  s0 -> s9 [70, 70] { R3792 += 1, R3748 += 1, R3458 += 1, R3460 += 1 };
  s0 -> s10 [70, 70] { R3792 += 1, R3748 += 1, R3458 += 1, R3460 += 1 };
  s0 -> s2 [71, 74] { R3792 += 1, R3748 += 1, R3458 += 1, R3460 += 1 };
  s0 -> s1 [71, 65535] { R3792 += 1, R3748 += 1, R3457 += 1, R3458 += 1 };
  s0 -> s3 [71, 65535] { R3792 += 1, R3748 += 1, R3458 += 1, R3459 += 1, R3460 += 1 };
  s0 -> s11 [75, 75] { R3792 += 1, R3748 += 1, R3458 += 1, R3460 += 1 };
  s0 -> s2 [76, 65535] { R3792 += 1, R3748 += 1, R3458 += 1, R3460 += 1 };
  s1 -> s1 [0, 69] { R3792 += 1, R3748 += 1, R3457 += 1, R3458 += 1 };
  s1 -> s2 [0, 69] { R3792 += 1, R3748 += 1, R3458 += 1, R3460 += 1 };
  s1 -> s3 [0, 69] { R3792 += 1, R3748 += 1, R3458 += 1, R3459 += 1, R3460 += 1 };
  s1 -> s5 [70, 70] { R3792 += 1, R3748 += 1, R3457 += 1, R3458 += 1 };
  s1 -> s6 [70, 70] { R3792 += 1, R3748 += 1, R3458 += 1, R3459 += 1, R3460 += 1 };
  s1 -> s7 [70, 70] { R3792 += 1, R3748 += 1, R3457 += 1, R3458 += 1 };
  s1 -> s8 [70, 70] { R3792 += 1, R3748 += 1, R3458 += 1, R3459 += 1, R3460 += 1 };
  s1 -> s9 [70, 70] { R3792 += 1, R3748 += 1, R3458 += 1, R3460 += 1 };
  s1 -> s10 [70, 70] { R3792 += 1, R3748 += 1, R3458 += 1, R3460 += 1 };
  s1 -> s2 [71, 74] { R3792 += 1, R3748 += 1, R3458 += 1, R3460 += 1 };
  s1 -> s1 [71, 65535] { R3792 += 1, R3748 += 1, R3457 += 1, R3458 += 1 };
  s1 -> s3 [71, 65535] { R3792 += 1, R3748 += 1, R3458 += 1, R3459 += 1, R3460 += 1 };
  s1 -> s11 [75, 75] { R3792 += 1, R3748 += 1, R3458 += 1, R3460 += 1 };
  s1 -> s2 [76, 65535] { R3792 += 1, R3748 += 1, R3458 += 1, R3460 += 1 };
  s2 -> s2 [0, 69] { R3792 += 1, R3748 += 1, R3458 += 1, R3460 += 1 };
  s2 -> s9 [70, 70] { R3792 += 1, R3748 += 1, R3458 += 1, R3460 += 1 };
  s2 -> s10 [70, 70] { R3792 += 1, R3748 += 1, R3458 += 1, R3460 += 1 };
  s2 -> s2 [71, 74] { R3792 += 1, R3748 += 1, R3458 += 1, R3460 += 1 };
  s2 -> s11 [75, 75] { R3792 += 1, R3748 += 1, R3458 += 1, R3460 += 1 };
  s2 -> s2 [76, 65535] { R3792 += 1, R3748 += 1, R3458 += 1, R3460 += 1 };
  s3 -> s2 [0, 69] { R3792 += 1, R3748 += 1, R3458 += 1, R3460 += 1 };
  s3 -> s3 [0, 69] { R3792 += 1, R3748 += 1, R3458 += 1, R3459 += 1, R3460 += 1 };
  s3 -> s6 [70, 70] { R3792 += 1, R3748 += 1, R3458 += 1, R3459 += 1, R3460 += 1 };
  s3 -> s8 [70, 70] { R3792 += 1, R3748 += 1, R3458 += 1, R3459 += 1, R3460 += 1 };
  s3 -> s9 [70, 70] { R3792 += 1, R3748 += 1, R3458 += 1, R3460 += 1 };
  s3 -> s10 [70, 70] { R3792 += 1, R3748 += 1, R3458 += 1, R3460 += 1 };
  s3 -> s2 [71, 74] { R3792 += 1, R3748 += 1, R3458 += 1, R3460 += 1 };
  s3 -> s3 [71, 65535] { R3792 += 1, R3748 += 1, R3458 += 1, R3459 += 1, R3460 += 1 };
  s3 -> s11 [75, 75] { R3792 += 1, R3748 += 1, R3458 += 1, R3460 += 1 };
  s3 -> s2 [76, 65535] { R3792 += 1, R3748 += 1, R3458 += 1, R3460 += 1 };
  s4 -> s1 [0, 69] { R3792 += 1, R3748 += 1, R3457 += 1, R3458 += 1 };
  s4 -> s2 [0, 69] { R3792 += 1, R3748 += 1, R3458 += 1, R3460 += 1 };
  s4 -> s3 [0, 69] { R3792 += 1, R3748 += 1, R3458 += 1, R3459 += 1, R3460 += 1 };
  s4 -> s4 [0, 65535] { R3792 += 1, R3747 += 1, R3748 += 1 };
  s4 -> s5 [70, 70] { R3792 += 1, R3748 += 1, R3457 += 1, R3458 += 1 };
  s4 -> s6 [70, 70] { R3792 += 1, R3748 += 1, R3458 += 1, R3459 += 1, R3460 += 1 };
  s4 -> s7 [70, 70] { R3792 += 1, R3748 += 1, R3457 += 1, R3458 += 1 };
  s4 -> s8 [70, 70] { R3792 += 1, R3748 += 1, R3458 += 1, R3459 += 1, R3460 += 1 };
  s4 -> s9 [70, 70] { R3792 += 1, R3748 += 1, R3458 += 1, R3460 += 1 };
  s4 -> s10 [70, 70] { R3792 += 1, R3748 += 1, R3458 += 1, R3460 += 1 };
  s4 -> s2 [71, 74] { R3792 += 1, R3748 += 1, R3458 += 1, R3460 += 1 };
  s4 -> s1 [71, 65535] { R3792 += 1, R3748 += 1, R3457 += 1, R3458 += 1 };
  s4 -> s3 [71, 65535] { R3792 += 1, R3748 += 1, R3458 += 1, R3459 += 1, R3460 += 1 };
  s4 -> s11 [75, 75] { R3792 += 1, R3748 += 1, R3458 += 1, R3460 += 1 };
  s4 -> s2 [76, 65535] { R3792 += 1, R3748 += 1, R3458 += 1, R3460 += 1 };
  s6 -> s10 [0, 74] { R3792 += 1, R3748 += 1, R3458 += 1, R3460 += 1 };
  s6 -> s6 [0, 65535] { R3792 += 1, R3748 += 1, R3458 += 1, R3459 += 1, R3460 += 1 };
  s6 -> s13 [75, 75] { R3792 += 1, R3748 += 1, R3458 += 1, R3460 += 1 };
  s6 -> s10 [76, 65535] { R3792 += 1, R3748 += 1, R3458 += 1, R3460 += 1 };
  s7 -> s10 [0, 74] { R3792 += 1, R3748 += 1, R3458 += 1, R3460 += 1 };
  s7 -> s6 [0, 65535] { R3792 += 1, R3748 += 1, R3458 += 1, R3459 += 1, R3460 += 1 };
  s7 -> s7 [0, 65535] { R3792 += 1, R3748 += 1, R3457 += 1, R3458 += 1 };
  s7 -> s13 [75, 75] { R3792 += 1, R3748 += 1, R3458 += 1, R3460 += 1 };
  s7 -> s10 [76, 65535] { R3792 += 1, R3748 += 1, R3458 += 1, R3460 += 1 };
  s10 -> s10 [0, 74] { R3792 += 1, R3748 += 1, R3458 += 1, R3460 += 1 };
  s10 -> s13 [75, 75] { R3792 += 1, R3748 += 1, R3458 += 1, R3460 += 1 };
  s10 -> s10 [76, 65535] { R3792 += 1, R3748 += 1, R3458 += 1, R3460 += 1 };
  s11 -> s11 [0, 69] { R3792 += 1, R3748 += 1, R3458 += 1, R3460 += 1 };
  s11 -> s12 [0, 65535];
  s11 -> s11 [0, 65535] { R3792 += 1 };
  s11 -> s13 [70, 70] { R3792 += 1, R3748 += 1, R3458 += 1, R3460 += 1 };
  s11 -> s14 [70, 70] { R3792 += 1, R3748 += 1, R3458 += 1, R3460 += 1 };
  s11 -> s11 [71, 65535] { R3792 += 1, R3748 += 1, R3458 += 1, R3460 += 1 };
  s12 -> s12 [0, 65535];
  s13 -> s13 [0, 65535] { R3792 += 1, R3748 += 1, R3458 += 1, R3460 += 1 };
  s13 -> s12 [0, 65535];
  s13 -> s15 [0, 65535] { R3792 += 1 };
  s14 -> s12 [0, 65535];
  s14 -> s14 [0, 65535] { R3792 += 1 };
  s15 -> s12 [0, 65535];
  s15 -> s15 [0, 65535] { R3792 += 1 };
  accepting s12, s13, s14, s15, s11;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 69] { R3794 += 1, R3750 += 1, R3685 += 1, R3686 += 1 };
  s0 -> s2 [0, 65535] { R3794 += 1, R3749 += 1, R3750 += 1 };
  s0 -> s0 [0, 65535] { R3793 += 1, R3794 += 1 };
  s0 -> s3 [70, 70] { R3794 += 1, R3750 += 1, R3685 += 1, R3686 += 1 };
  s0 -> s4 [70, 70] { R3794 += 1, R3750 += 1, R3685 += 1, R3686 += 1 };
  s0 -> s1 [71, 65535] { R3794 += 1, R3750 += 1, R3685 += 1, R3686 += 1 };
  s1 -> s1 [0, 69] { R3794 += 1, R3750 += 1, R3685 += 1, R3686 += 1 };
  s1 -> s1 [0, 65535] { R3794 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [70, 70] { R3794 += 1, R3750 += 1, R3685 += 1, R3686 += 1 };
  s1 -> s4 [70, 70] { R3794 += 1, R3750 += 1, R3685 += 1, R3686 += 1 };
  s1 -> s1 [71, 65535] { R3794 += 1, R3750 += 1, R3685 += 1, R3686 += 1 };
  s2 -> s1 [0, 69] { R3794 += 1, R3750 += 1, R3685 += 1, R3686 += 1 };
  s2 -> s2 [0, 65535] { R3794 += 1, R3749 += 1, R3750 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [70, 70] { R3794 += 1, R3750 += 1, R3685 += 1, R3686 += 1 };
  s2 -> s4 [70, 70] { R3794 += 1, R3750 += 1, R3685 += 1, R3686 += 1 };
  s2 -> s1 [71, 65535] { R3794 += 1, R3750 += 1, R3685 += 1, R3686 += 1 };
  s3 -> s6 [0, 65535] { R3794 += 1 };
  s3 -> s3 [0, 65535] { R3794 += 1, R3750 += 1, R3685 += 1, R3686 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3794 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3794 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [102, 102];
  accepting s1;
};
};
constraint R3 = R3794 && R23 - R3794 = -1 && R24 = R3794 && R25 - R3794 = -1 && R26 = R3794 && R27 = 0 && R28 = 1 && R29 = 0 && R30 = 1 && R45 + R84 + R83 + -1*R3462 + -1*R3458 - R66 = 0 && R49 + R89 + R87 = 0 && R50 + R90 + R88 + -1*R3462 + -1*R3458 - R66 = 0 && R55 + R96 + R93 + -1*R3464 + -1*R3460 - R68 = 0 && R65 + R3461 + R3457 = 0 && R67 + R3463 + R3459 = 0 && R3735 = 0 && R3736 = 0 && R3741 = 0 && R3742 = 0 && R3745 = 0 && R3746 = 0 && R3747 = 0 && R3748 = 0 && R3751 = 0 && R3752 = R3794 && R3753 = 0 && R3754 = R3794 && R3755 = 0 && R3756 = R3794 && R3757 = 0 && R3758 = R3794 && R3759 = 0 && R3760 = R3794 && R3761 = 0 && R3762 = R3794 && R3763 = 0 && R3764 = R3794 && R3765 = 0 && R3766 = R3794 && R3767 = 0 && R3768 = R3794 && R3769 = 0 && R3770 = R3794 && R3771 = 0 && R3772 = R3794 && R3773 = 0 && R3774 = R3794 && R3775 = 0 && R3776 = R3794 && R3777 = 0 && R3778 = R3794 && R3779 = 0 && R3780 = R3794 && R3781 = 0 && R3782 = R3794 && R3783 = 0 && R3784 = R3794 && R3785 = 0 && R3786 = R3794 && R3787 = 0 && R3788 = R3794 && R3789 = 0 && R3790 = R3794 && R3791 = 0 && R3792 = R3794 && R3793 = 0 && -1 < R2 && R12 < 1 && R15 < 1 && R16 < 1 && R47 + R86 + R85 < 1 && R61 + R3456 + R3453 < 1 && -1*R3462 + -1*R3458 - R66 < 1 && -1*R3464 + -1*R3460 - R68 < 1 && 0 < R3794 && (R2 != 0 || R20 = 0 || (R3695 = 0 && R3696 = 0)) && (R2 != 0 || R20 = 0 || (R3697 = 0 && R3698 = 0)) && (R2 != 0 || R20 = 0 || (R3699 = 0 && R3700 = 0)) && (R2 != 0 || R20 = 0 || (R3701 = 0 && R3702 = 0)) && (R2 != 0 || R20 = 0 || (R3703 = 0 && R3704 = 0)) && (R2 != 0 || R20 = 0 || (R3705 = 0 && R3706 = 0)) && (R2 != 0 || R20 = 0 || (R3707 = 0 && R3708 = 0)) && (R2 != 0 || R20 = 0 || (R3709 = 0 && R3710 = 0)) && (R2 != 0 || R20 = 0 || (R3711 = 0 && R3712 = 0)) && (R2 != 0 || R20 = 0 || (R3713 = 0 && R3714 = 0)) && (R53 + R94 + R91 != 0 || R54 + R95 + R92 + -1*R3462 + -1*R3458 - R66 = 0 || R66 + R3462 + R3458 < 1) && (R59 + R3454 + R3451 != 0 || R60 + R3455 + R3452 + -1*R3462 + -1*R3458 - R66 = 0 || R66 + R3462 + R3458 < 1) && (R66 + R3462 + R3458 != 0 || ((R53 + R94 + R91 != 0 || R54 + R95 + R92 = 0 || R68 + R3464 + R3460 < 1) && (R53 + R94 + R91 = 0 || R68 + R3464 + R3460 < 1))) && (R66 + R3462 + R3458 != 0 || ((R59 + R3454 + R3451 != 0 || R60 + R3455 + R3452 = 0 || R68 + R3464 + R3460 < 1) && (R59 + R3454 + R3451 = 0 || R68 + R3464 + R3460 < 1))) && (R66 + R3462 + R3458 != 0 || ((R73 + R3690 + R3685 != 0 || R74 + R3691 + R3686 = 0 || R68 + R3464 + R3460 < 1) && (R73 + R3690 + R3685 = 0 || R68 + R3464 + R3460 < 1))) && (R68 + R3464 + R3460 != 0 || R77 + R3694 + R3689 = 0 || (R75 + R3692 + R3687 = 0 && R76 + R3693 + R3688 = 0)) && (R73 + R3690 + R3685 != 0 || R66 + R3462 + R3458 + -1*R3691 + -1*R3686 - R74 = 0 || R66 + R3462 + R3458 < 1) && (R75 + R3692 + R3687 != 0 || R68 + R3464 + R3460 + -1*R3693 + -1*R3688 - R76 = 0 || R68 + R3464 + R3460 < 1) && (R3695 != 0 || R2 = R3696 || R2 < 1) && (R3697 != 0 || R2 = R3698 || R2 < 1) && (R3699 != 0 || R2 = R3700 || R2 < 1) && (R3701 != 0 || R2 = R3702 || R2 < 1) && (R3703 != 0 || R2 = R3704 || R2 < 1) && (R3705 != 0 || R2 = R3706 || R2 < 1) && (R3707 != 0 || R2 = R3708 || R2 < 1) && (R3709 != 0 || R2 = R3710 || R2 < 1) && (R3711 != 0 || R2 = R3712 || R2 < 1) && (R3713 != 0 || R2 = R3714 || R2 < 1) && (R21 = 0 || (R3733 = 0 && R3734 = 0)) && (R21 = 0 || (R3737 = 0 && R3738 = 0)) && (R21 = 0 || (R3739 = 0 && R3740 = 0)) && (R21 = 0 || (R3743 = 0 && R3744 = 0)) && (R21 = 0 || (R3749 = 0 && R3750 = 0)) && (R22 = 0 || (R3715 = 0 && R3716 = 0)) && (R22 = 0 || (R3717 = 0 && R3718 = 0)) && (R22 = 0 || (R3719 = 0 && R3720 = 0)) && (R22 = 0 || (R3721 = 0 && R3722 = 0)) && (R22 = 0 || (R3723 = 0 && R3724 = 0)) && (R22 = 0 || (R3725 = 0 && R3726 = 0)) && (R22 = 0 || (R3727 = 0 && R3728 = 0)) && (R22 = 0 || (R3729 = 0 && R3730 = 0)) && (R22 = 0 || (R3731 = 0 && R3732 = 0)) && (R53 + R94 + R91 = 0 || R66 + R3462 + R3458 < 1) && (R59 + R3454 + R3451 = 0 || R66 + R3462 + R3458 < 1) && (R73 + R3690 + R3685 = 0 || R66 + R3462 + R3458 < 1) && (R75 + R3692 + R3687 = 0 || R68 + R3464 + R3460 < 1) && (R3695 = 0 || R2 < 1) && (R3697 = 0 || R2 < 1) && (R3699 = 0 || R2 < 1) && (R3701 = 0 || R2 < 1) && (R3703 = 0 || R2 < 1) && (R3705 = 0 || R2 < 1) && (R3707 = 0 || R2 < 1) && (R3709 = 0 || R2 < 1) && (R3711 = 0 || R2 < 1) && (R3713 = 0 || R2 < 1);
// End of Parikh automata intersection problem
