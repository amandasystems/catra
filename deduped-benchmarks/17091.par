// Parikh automata intersection problem, generated by OSTRICH+
counter int R100, R101, R102, R12, R15, R16, R1777, R1778, R1779, R1780, R1781, R1782, R1783, R1784, R2, R20, R2005, R2006, R2007, R2008, R2009, R2010, R2011, R2012, R2013, R2014, R2015, R2016, R2017, R2018, R2019, R2020, R2021, R2022, R2023, R2024, R2025, R2026, R2027, R2028, R2029, R2030, R2031, R2032, R2033, R2034, R2035, R2036, R2037, R2038, R2039, R2040, R2041, R2042, R2043, R2044, R2045, R2046, R2047, R2048, R2049, R2050, R2051, R2052, R2053, R2054, R2055, R2056, R2057, R2058, R2059, R2060, R2061, R2062, R2063, R2064, R2065, R2066, R2067, R2068, R2069, R2070, R2071, R2072, R2073, R2074, R2075, R2076, R2077, R2078, R2079, R2080, R2081, R2082, R2083, R2084, R2085, R2086, R2087, R2088, R2089, R2090, R2091, R2092, R2093, R2094, R2095, R2096, R2097, R2098, R2099, R21, R2100, R2101, R2102, R2103, R2104, R2105, R2106, R2107, R2108, R2109, R2110, R2111, R2112, R2113, R2114, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R4, R45, R47, R49, R5, R50, R53, R54, R55, R59, R60, R61, R65, R66, R67, R68, R73, R74, R75, R76, R77, R83, R84, R85, R86, R87, R88, R89, R90, R91, R92, R93, R94, R95, R96, R97, R98, R99;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [70, 70];
  s0 -> s0 [71, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [70, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R15 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 69];
  s0 -> s0 [0, 65535] { R16 += 1 };
  s0 -> s2 [70, 70];
  s0 -> s1 [71, 65535];
  s1 -> s1 [0, 69];
  s1 -> s2 [70, 70];
  s1 -> s1 [71, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R24 += 1 };
  s0 -> s0 [0, 65535] { R23 += 1, R24 += 1 };
  s0 -> s2 [9, 13] { R24 += 1 };
  s0 -> s1 [14, 31] { R24 += 1 };
  s0 -> s2 [32, 32] { R24 += 1 };
  s0 -> s1 [33, 65535] { R24 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R24 += 1 };
  s2 -> s1 [0, 65535] { R24 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R25 += 1, R26 += 1 };
  s1 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R28 += 1 };
  s0 -> s0 [0, 65535] { R27 += 1, R28 += 1 };
  s0 -> s2 [9, 13] { R28 += 1 };
  s0 -> s1 [14, 31] { R28 += 1 };
  s0 -> s2 [32, 32] { R28 += 1 };
  s0 -> s1 [33, 65535] { R28 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R28 += 1 };
  s2 -> s1 [0, 65535] { R28 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R29 += 1, R30 += 1 };
  s1 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R2035 += 1, R2036 += 1 };
  s0 -> s1 [0, 65535] { R2036 += 1, R22 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R2036 += 1, R22 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 69] { R2038 += 1 };
  s0 -> s0 [0, 65535] { R2037 += 1, R2038 += 1 };
  s0 -> s2 [70, 70] { R2038 += 1 };
  s0 -> s3 [70, 70] { R2038 += 1 };
  s0 -> s1 [76, 65535] { R2038 += 1 };
  s1 -> s1 [0, 69] { R2038 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R2038 += 1 };
  s1 -> s3 [70, 70] { R2038 += 1 };
  s1 -> s1 [76, 65535] { R2038 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 70] { R2038 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [76, 65535] { R2038 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 69] { R2040 += 1, R45 += 1 };
  s0 -> s0 [0, 65535] { R2039 += 1, R2040 += 1 };
  s0 -> s2 [70, 70] { R2040 += 1, R45 += 1 };
  s0 -> s3 [70, 70] { R2040 += 1, R45 += 1 };
  s0 -> s1 [71, 65535] { R2040 += 1, R45 += 1 };
  s1 -> s1 [0, 69] { R2040 += 1, R45 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R2040 += 1, R45 += 1 };
  s1 -> s3 [70, 70] { R2040 += 1, R45 += 1 };
  s1 -> s1 [71, 65535] { R2040 += 1, R45 += 1 };
  s2 -> s2 [0, 65535] { R2040 += 1, R45 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 69] { R2042 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R2041 += 1, R2042 += 1 };
  s0 -> s2 [70, 70] { R2042 += 1, R47 += 1 };
  s0 -> s3 [70, 70] { R2042 += 1, R47 += 1 };
  s0 -> s1 [71, 65535] { R2042 += 1, R47 += 1 };
  s1 -> s1 [0, 69] { R2042 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R2042 += 1, R47 += 1 };
  s1 -> s3 [70, 70] { R2042 += 1, R47 += 1 };
  s1 -> s1 [71, 65535] { R2042 += 1, R47 += 1 };
  s2 -> s2 [0, 65535] { R2042 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 69] { R2044 += 1, R49 += 1, R50 += 1 };
  s0 -> s0 [0, 65535] { R2043 += 1, R2044 += 1 };
  s0 -> s2 [70, 70] { R2044 += 1, R49 += 1, R50 += 1 };
  s0 -> s3 [70, 70] { R2044 += 1, R49 += 1, R50 += 1 };
  s0 -> s1 [71, 65535] { R2044 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 69] { R2044 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R2044 += 1, R49 += 1, R50 += 1 };
  s1 -> s3 [70, 70] { R2044 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [71, 65535] { R2044 += 1, R49 += 1, R50 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R2044 += 1, R49 += 1, R50 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 69] { R2046 += 1, R53 += 1, R54 += 1 };
  s0 -> s0 [0, 65535] { R2045 += 1, R2046 += 1 };
  s0 -> s2 [70, 70] { R2046 += 1, R53 += 1, R54 += 1 };
  s0 -> s3 [70, 70] { R2046 += 1, R53 += 1, R54 += 1 };
  s0 -> s1 [71, 65535] { R2046 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 69] { R2046 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R2046 += 1, R53 += 1, R54 += 1 };
  s1 -> s3 [70, 70] { R2046 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [71, 65535] { R2046 += 1, R53 += 1, R54 += 1 };
  s2 -> s2 [0, 65535] { R2046 += 1, R53 += 1, R54 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 69] { R2048 += 1, R59 += 1, R60 += 1 };
  s0 -> s0 [0, 65535] { R2047 += 1, R2048 += 1 };
  s0 -> s2 [70, 70] { R2048 += 1, R59 += 1, R60 += 1 };
  s0 -> s3 [70, 70] { R2048 += 1, R59 += 1, R60 += 1 };
  s0 -> s1 [71, 65535] { R2048 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 69] { R2048 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R2048 += 1, R59 += 1, R60 += 1 };
  s1 -> s3 [70, 70] { R2048 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [71, 65535] { R2048 += 1, R59 += 1, R60 += 1 };
  s2 -> s2 [0, 65535] { R2048 += 1, R59 += 1, R60 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 69] { R2050 += 1, R65 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R2049 += 1, R2050 += 1 };
  s0 -> s2 [70, 70] { R2050 += 1, R65 += 1, R66 += 1 };
  s0 -> s3 [70, 70] { R2050 += 1, R65 += 1, R66 += 1 };
  s0 -> s1 [71, 65535] { R2050 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 69] { R2050 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R2050 += 1, R65 += 1, R66 += 1 };
  s1 -> s3 [70, 70] { R2050 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [71, 65535] { R2050 += 1, R65 += 1, R66 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2050 += 1, R65 += 1, R66 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 69] { R2052 += 1, R73 += 1, R74 += 1 };
  s0 -> s0 [0, 65535] { R2051 += 1, R2052 += 1 };
  s0 -> s2 [70, 70] { R2052 += 1, R73 += 1, R74 += 1 };
  s0 -> s3 [70, 70] { R2052 += 1, R73 += 1, R74 += 1 };
  s0 -> s1 [71, 65535] { R2052 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 69] { R2052 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R2052 += 1, R73 += 1, R74 += 1 };
  s1 -> s3 [70, 70] { R2052 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [71, 65535] { R2052 += 1, R73 += 1, R74 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R2052 += 1, R73 += 1, R74 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 69] { R2072 += 1 };
  s0 -> s0 [0, 65535] { R2071 += 1, R2072 += 1 };
  s0 -> s2 [70, 70] { R2072 += 1 };
  s0 -> s1 [71, 65535] { R2072 += 1 };
  s1 -> s1 [0, 69] { R2072 += 1 };
  s1 -> s2 [70, 70] { R2072 += 1 };
  s1 -> s1 [71, 65535] { R2072 += 1 };
  s2 -> s2 [0, 65535] { R2072 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R2073 += 1, R2074 += 1 };
  s0 -> s1 [0, 65535] { R2074 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R2074 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 69] { R2076 += 1 };
  s0 -> s2 [0, 65535] { R2076 += 1, R12 += 1 };
  s0 -> s0 [0, 65535] { R2075 += 1, R2076 += 1 };
  s0 -> s3 [70, 70] { R2076 += 1 };
  s0 -> s1 [71, 65535] { R2076 += 1 };
  s1 -> s1 [0, 69] { R2076 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [70, 70] { R2076 += 1 };
  s1 -> s1 [71, 65535] { R2076 += 1 };
  s2 -> s1 [0, 69] { R2076 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2076 += 1, R12 += 1 };
  s2 -> s3 [70, 70] { R2076 += 1 };
  s2 -> s1 [71, 65535] { R2076 += 1 };
  s3 -> s3 [0, 65535] { R2076 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 69] { R2078 += 1, R2016 += 1 };
  s0 -> s0 [0, 65535] { R2077 += 1, R2078 += 1 };
  s0 -> s2 [0, 65535] { R2078 += 1, R2015 += 1, R2016 += 1 };
  s0 -> s1 [71, 65535] { R2078 += 1, R2016 += 1 };
  s1 -> s1 [0, 69] { R2078 += 1, R2016 += 1 };
  s1 -> s1 [0, 65535] { R2078 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [71, 65535] { R2078 += 1, R2016 += 1 };
  s2 -> s1 [0, 69] { R2078 += 1, R2016 += 1 };
  s2 -> s2 [0, 65535] { R2078 += 1, R2015 += 1, R2016 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [71, 65535] { R2078 += 1, R2016 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s0 [0, 65535] { R2079 += 1, R2080 += 1 };
  s0 -> s1 [0, 65535] { R2080 += 1, R2018 += 1, R20 += 1 };
  s0 -> s2 [0, 65535] { R2080 += 1, R2017 += 1, R2018 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R2080 += 1, R2018 += 1, R20 += 1 };
  s1 -> s4 [0, 65535] { R2080 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R2080 += 1, R2018 += 1, R20 += 1 };
  s2 -> s2 [0, 65535] { R2080 += 1, R2017 += 1, R2018 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2080 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 70] { R2082 += 1, R2020 += 1 };
  s0 -> s0 [0, 65535] { R2081 += 1, R2082 += 1 };
  s0 -> s2 [0, 65535] { R2082 += 1, R2019 += 1, R2020 += 1 };
  s0 -> s1 [75, 65535] { R2082 += 1, R2020 += 1 };
  s1 -> s1 [0, 70] { R2082 += 1, R2020 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R2082 += 1 };
  s1 -> s1 [75, 65535] { R2082 += 1, R2020 += 1 };
  s2 -> s1 [0, 70] { R2082 += 1, R2020 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R2082 += 1, R2019 += 1, R2020 += 1 };
  s2 -> s1 [75, 65535] { R2082 += 1, R2020 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R2084 += 1, R2021 += 1, R2022 += 1 };
  s0 -> s0 [0, 65535] { R2083 += 1, R2084 += 1 };
  s0 -> s2 [0, 65535] { R2084 += 1, R2022 += 1, R84 += 1 };
  s1 -> s1 [0, 65535] { R2084 += 1, R2021 += 1, R2022 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R2084 += 1, R2022 += 1, R84 += 1 };
  s2 -> s3 [0, 65535] { R2084 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2084 += 1, R2022 += 1, R84 += 1 };
  s3 -> s3 [0, 65535] { R2084 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 74] { R2086 += 1, R2024 += 1 };
  s0 -> s0 [0, 65535] { R2085 += 1, R2086 += 1 };
  s0 -> s2 [0, 65535] { R2086 += 1, R2023 += 1, R2024 += 1 };
  s0 -> s3 [0, 65535] { R2086 += 1, R2024 += 1, R86 += 1 };
  s0 -> s1 [76, 65535] { R2086 += 1, R2024 += 1 };
  s1 -> s1 [0, 74] { R2086 += 1, R2024 += 1 };
  s1 -> s1 [0, 65535] { R2086 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [76, 65535] { R2086 += 1, R2024 += 1 };
  s2 -> s1 [0, 74] { R2086 += 1, R2024 += 1 };
  s2 -> s2 [0, 65535] { R2086 += 1, R2023 += 1, R2024 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R2086 += 1, R2024 += 1, R86 += 1 };
  s2 -> s1 [76, 65535] { R2086 += 1, R2024 += 1 };
  s3 -> s1 [0, 74] { R2086 += 1, R2024 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2086 += 1, R2024 += 1, R86 += 1 };
  s3 -> s5 [0, 65535] { R2086 += 1 };
  s3 -> s1 [76, 65535] { R2086 += 1, R2024 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2086 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 65535] { R2088 += 1, R2025 += 1, R2026 += 1 };
  s0 -> s2 [0, 65535] { R2088 += 1, R2026 += 1, R90 += 1 };
  s0 -> s3 [0, 65535] { R2088 += 1, R2026 += 1 };
  s0 -> s0 [0, 65535] { R2087 += 1, R2088 += 1 };
  s1 -> s1 [0, 65535] { R2088 += 1, R2025 += 1, R2026 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R2088 += 1, R2026 += 1, R90 += 1 };
  s1 -> s3 [0, 65535] { R2088 += 1, R2026 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2088 += 1, R2026 += 1, R90 += 1 };
  s2 -> s5 [0, 65535] { R2088 += 1 };
  s2 -> s3 [0, 65535] { R2088 += 1, R2026 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R2088 += 1 };
  s3 -> s3 [0, 65535] { R2088 += 1, R2026 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2088 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R2090 += 1, R2028 += 1, R95 += 1, R96 += 1 };
  s0 -> s2 [0, 65535] { R2090 += 1, R2027 += 1, R2028 += 1 };
  s0 -> s3 [0, 65535] { R2090 += 1, R2028 += 1, R94 += 1, R95 += 1 };
  s0 -> s0 [0, 65535] { R2089 += 1, R2090 += 1 };
  s1 -> s4 [0, 65535] { R2090 += 1 };
  s1 -> s1 [0, 65535] { R2090 += 1, R2028 += 1, R95 += 1, R96 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R2090 += 1, R2028 += 1 };
  s2 -> s1 [0, 65535] { R2090 += 1, R2028 += 1, R95 += 1, R96 += 1 };
  s2 -> s2 [0, 65535] { R2090 += 1, R2027 += 1, R2028 += 1 };
  s2 -> s3 [0, 65535] { R2090 += 1, R2028 += 1, R94 += 1, R95 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s4 [0, 65535] { R2090 += 1 };
  s3 -> s1 [0, 65535] { R2090 += 1, R2028 += 1, R95 += 1, R96 += 1 };
  s3 -> s3 [0, 65535] { R2090 += 1, R2028 += 1, R94 += 1, R95 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2090 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R2090 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2090 += 1, R2028 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 74] { R2092 += 1, R2030 += 1, R101 += 1 };
  s0 -> s2 [0, 65535] { R2092 += 1, R2029 += 1, R2030 += 1 };
  s0 -> s0 [0, 65535] { R2091 += 1, R2092 += 1 };
  s0 -> s3 [0, 65535] { R2092 += 1, R2030 += 1, R100 += 1, R101 += 1 };
  s0 -> s4 [0, 65535] { R2092 += 1, R2030 += 1, R101 += 1, R102 += 1 };
  s0 -> s1 [76, 65535] { R2092 += 1, R2030 += 1, R101 += 1 };
  s1 -> s1 [0, 74] { R2092 += 1, R2030 += 1, R101 += 1 };
  s1 -> s1 [0, 65535] { R2092 += 1, R2030 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R2092 += 1 };
  s1 -> s1 [76, 65535] { R2092 += 1, R2030 += 1, R101 += 1 };
  s2 -> s1 [0, 74] { R2092 += 1, R2030 += 1, R101 += 1 };
  s2 -> s2 [0, 65535] { R2092 += 1, R2029 += 1, R2030 += 1 };
  s2 -> s3 [0, 65535] { R2092 += 1, R2030 += 1, R100 += 1, R101 += 1 };
  s2 -> s4 [0, 65535] { R2092 += 1, R2030 += 1, R101 += 1, R102 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s1 [76, 65535] { R2092 += 1, R2030 += 1, R101 += 1 };
  s3 -> s1 [0, 74] { R2092 += 1, R2030 += 1, R101 += 1 };
  s3 -> s3 [0, 65535] { R2092 += 1, R2030 += 1, R100 += 1, R101 += 1 };
  s3 -> s4 [0, 65535] { R2092 += 1, R2030 += 1, R101 += 1, R102 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s7 [0, 65535] { R2092 += 1 };
  s3 -> s1 [76, 65535] { R2092 += 1, R2030 += 1, R101 += 1 };
  s4 -> s1 [0, 74] { R2092 += 1, R2030 += 1, R101 += 1 };
  s4 -> s4 [0, 65535] { R2092 += 1, R2030 += 1, R101 += 1, R102 += 1 };
  s4 -> s5 [0, 65535] { R2092 += 1, R2030 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R2092 += 1 };
  s4 -> s1 [76, 65535] { R2092 += 1, R2030 += 1, R101 += 1 };
  s5 -> s5 [0, 65535] { R2092 += 1, R2030 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R2092 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R2092 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 74] { R2094 += 1, R2032 += 1, R1782 += 1, R1784 += 1 };
  s0 -> s2 [0, 65535] { R2094 += 1, R2032 += 1, R1781 += 1, R1782 += 1 };
  s0 -> s3 [0, 65535] { R2094 += 1, R2032 += 1, R1782 += 1, R1783 += 1, R1784 += 1 };
  s0 -> s0 [0, 65535] { R2093 += 1, R2094 += 1 };
  s0 -> s4 [0, 65535] { R2094 += 1, R2031 += 1, R2032 += 1 };
  s0 -> s5 [75, 75] { R2094 += 1, R2032 += 1, R1782 += 1, R1784 += 1 };
  s0 -> s1 [76, 65535] { R2094 += 1, R2032 += 1, R1782 += 1, R1784 += 1 };
  s1 -> s1 [0, 74] { R2094 += 1, R2032 += 1, R1782 += 1, R1784 += 1 };
  s1 -> s5 [75, 75] { R2094 += 1, R2032 += 1, R1782 += 1, R1784 += 1 };
  s1 -> s1 [76, 65535] { R2094 += 1, R2032 += 1, R1782 += 1, R1784 += 1 };
  s2 -> s1 [0, 74] { R2094 += 1, R2032 += 1, R1782 += 1, R1784 += 1 };
  s2 -> s2 [0, 65535] { R2094 += 1, R2032 += 1, R1781 += 1, R1782 += 1 };
  s2 -> s3 [0, 65535] { R2094 += 1, R2032 += 1, R1782 += 1, R1783 += 1, R1784 += 1 };
  s2 -> s5 [75, 75] { R2094 += 1, R2032 += 1, R1782 += 1, R1784 += 1 };
  s2 -> s1 [76, 65535] { R2094 += 1, R2032 += 1, R1782 += 1, R1784 += 1 };
  s3 -> s1 [0, 74] { R2094 += 1, R2032 += 1, R1782 += 1, R1784 += 1 };
  s3 -> s3 [0, 65535] { R2094 += 1, R2032 += 1, R1782 += 1, R1783 += 1, R1784 += 1 };
  s3 -> s5 [75, 75] { R2094 += 1, R2032 += 1, R1782 += 1, R1784 += 1 };
  s3 -> s1 [76, 65535] { R2094 += 1, R2032 += 1, R1782 += 1, R1784 += 1 };
  s4 -> s1 [0, 74] { R2094 += 1, R2032 += 1, R1782 += 1, R1784 += 1 };
  s4 -> s2 [0, 65535] { R2094 += 1, R2032 += 1, R1781 += 1, R1782 += 1 };
  s4 -> s3 [0, 65535] { R2094 += 1, R2032 += 1, R1782 += 1, R1783 += 1, R1784 += 1 };
  s4 -> s4 [0, 65535] { R2094 += 1, R2031 += 1, R2032 += 1 };
  s4 -> s5 [75, 75] { R2094 += 1, R2032 += 1, R1782 += 1, R1784 += 1 };
  s4 -> s1 [76, 65535] { R2094 += 1, R2032 += 1, R1782 += 1, R1784 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R2094 += 1, R2032 += 1, R1782 += 1 };
  s5 -> s5 [0, 65535] { R2094 += 1, R2032 += 1, R1782 += 1, R1784 += 1 };
  s5 -> s8 [0, 65535] { R2094 += 1 };
  s5 -> s9 [0, 65535] { R2094 += 1, R2032 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R2094 += 1, R2032 += 1, R1782 += 1 };
  s7 -> s8 [0, 65535] { R2094 += 1 };
  s7 -> s9 [0, 65535] { R2094 += 1, R2032 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R2094 += 1 };
  s9 -> s6 [0, 65535];
  s9 -> s8 [0, 65535] { R2094 += 1 };
  s9 -> s9 [0, 65535] { R2094 += 1, R2032 += 1 };
  accepting s8, s5, s9, s6, s7;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 65535] { R2096 += 1, R2034 += 1, R2011 += 1, R2013 += 1, R2014 += 1 };
  s0 -> s2 [0, 65535] { R2096 += 1, R2033 += 1, R2034 += 1 };
  s0 -> s3 [0, 65535] { R2096 += 1, R2034 += 1, R2011 += 1, R2012 += 1, R2013 += 1 };
  s0 -> s0 [0, 65535] { R2095 += 1, R2096 += 1 };
  s0 -> s4 [0, 65535] { R2096 += 1, R2034 += 1, R2010 += 1, R2011 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R2096 += 1, R2034 += 1, R2011 += 1, R2013 += 1, R2014 += 1 };
  s1 -> s8 [0, 65535] { R2096 += 1, R2034 += 1, R2011 += 1 };
  s1 -> s6 [0, 65535] { R2096 += 1 };
  s1 -> s7 [0, 65535] { R2096 += 1, R2034 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R2096 += 1, R2034 += 1, R2011 += 1, R2013 += 1, R2014 += 1 };
  s2 -> s2 [0, 65535] { R2096 += 1, R2033 += 1, R2034 += 1 };
  s2 -> s3 [0, 65535] { R2096 += 1, R2034 += 1, R2011 += 1, R2012 += 1, R2013 += 1 };
  s2 -> s4 [0, 65535] { R2096 += 1, R2034 += 1, R2010 += 1, R2011 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [0, 65535] { R2096 += 1, R2034 += 1, R2011 += 1, R2013 += 1, R2014 += 1 };
  s3 -> s3 [0, 65535] { R2096 += 1, R2034 += 1, R2011 += 1, R2012 += 1, R2013 += 1 };
  s3 -> s6 [0, 65535] { R2096 += 1 };
  s3 -> s7 [0, 65535] { R2096 += 1, R2034 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s1 [0, 65535] { R2096 += 1, R2034 += 1, R2011 += 1, R2013 += 1, R2014 += 1 };
  s4 -> s3 [0, 65535] { R2096 += 1, R2034 += 1, R2011 += 1, R2012 += 1, R2013 += 1 };
  s4 -> s6 [0, 65535] { R2096 += 1 };
  s4 -> s4 [0, 65535] { R2096 += 1, R2034 += 1, R2010 += 1, R2011 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2096 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R2096 += 1 };
  s7 -> s7 [0, 65535] { R2096 += 1, R2034 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s8 [0, 65535] { R2096 += 1, R2034 += 1, R2011 += 1 };
  s8 -> s6 [0, 65535] { R2096 += 1 };
  s8 -> s7 [0, 65535] { R2096 += 1, R2034 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R2098 += 1, R2054 += 1, R21 += 1 };
  s0 -> s0 [0, 65535] { R2097 += 1, R2098 += 1 };
  s0 -> s2 [0, 65535] { R2098 += 1, R2053 += 1, R2054 += 1 };
  s1 -> s1 [0, 65535] { R2098 += 1, R2054 += 1, R21 += 1 };
  s1 -> s4 [0, 65535] { R2098 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R2098 += 1, R2054 += 1, R21 += 1 };
  s2 -> s2 [0, 65535] { R2098 += 1, R2053 += 1, R2054 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2098 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 69] { R2100 += 1, R2056 += 1 };
  s0 -> s2 [0, 65535] { R2100 += 1, R2055 += 1, R2056 += 1 };
  s0 -> s0 [0, 65535] { R2099 += 1, R2100 += 1 };
  s0 -> s3 [70, 70] { R2100 += 1, R2056 += 1 };
  s0 -> s4 [70, 70] { R2100 += 1, R2056 += 1 };
  s0 -> s5 [75, 75] { R2100 += 1, R2056 += 1 };
  s0 -> s1 [76, 65535] { R2100 += 1, R2056 += 1 };
  s1 -> s1 [0, 69] { R2100 += 1, R2056 += 1 };
  s1 -> s3 [70, 70] { R2100 += 1, R2056 += 1 };
  s1 -> s4 [70, 70] { R2100 += 1, R2056 += 1 };
  s1 -> s5 [75, 75] { R2100 += 1, R2056 += 1 };
  s1 -> s1 [76, 65535] { R2100 += 1, R2056 += 1 };
  s2 -> s1 [0, 69] { R2100 += 1, R2056 += 1 };
  s2 -> s2 [0, 65535] { R2100 += 1, R2055 += 1, R2056 += 1 };
  s2 -> s3 [70, 70] { R2100 += 1, R2056 += 1 };
  s2 -> s4 [70, 70] { R2100 += 1, R2056 += 1 };
  s2 -> s5 [75, 75] { R2100 += 1, R2056 += 1 };
  s2 -> s1 [76, 65535] { R2100 += 1, R2056 += 1 };
  s4 -> s4 [0, 70] { R2100 += 1, R2056 += 1 };
  s4 -> s7 [75, 75] { R2100 += 1, R2056 += 1 };
  s4 -> s4 [76, 65535] { R2100 += 1, R2056 += 1 };
  s5 -> s5 [0, 69] { R2100 += 1, R2056 += 1 };
  s5 -> s5 [0, 65535] { R2100 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [70, 70] { R2100 += 1, R2056 += 1 };
  s5 -> s8 [70, 70] { R2100 += 1, R2056 += 1 };
  s5 -> s5 [75, 65535] { R2100 += 1, R2056 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 70] { R2100 += 1, R2056 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R2100 += 1 };
  s7 -> s7 [75, 65535] { R2100 += 1, R2056 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R2100 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 69] { R2102 += 1, R2058 += 1, R83 += 1 };
  s0 -> s0 [0, 65535] { R2101 += 1, R2102 += 1 };
  s0 -> s2 [0, 65535] { R2102 += 1, R2057 += 1, R2058 += 1 };
  s0 -> s3 [70, 70] { R2102 += 1, R2058 += 1, R83 += 1 };
  s0 -> s4 [70, 70] { R2102 += 1, R2058 += 1, R83 += 1 };
  s0 -> s1 [71, 65535] { R2102 += 1, R2058 += 1, R83 += 1 };
  s1 -> s1 [0, 69] { R2102 += 1, R2058 += 1, R83 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R2102 += 1 };
  s1 -> s3 [70, 70] { R2102 += 1, R2058 += 1, R83 += 1 };
  s1 -> s4 [70, 70] { R2102 += 1, R2058 += 1, R83 += 1 };
  s1 -> s1 [71, 65535] { R2102 += 1, R2058 += 1, R83 += 1 };
  s2 -> s1 [0, 69] { R2102 += 1, R2058 += 1, R83 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R2102 += 1, R2057 += 1, R2058 += 1 };
  s2 -> s3 [70, 70] { R2102 += 1, R2058 += 1, R83 += 1 };
  s2 -> s4 [70, 70] { R2102 += 1, R2058 += 1, R83 += 1 };
  s2 -> s1 [71, 65535] { R2102 += 1, R2058 += 1, R83 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R2102 += 1 };
  s4 -> s5 [0, 65535] { R2102 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R2102 += 1, R2058 += 1, R83 += 1 };
  s5 -> s5 [0, 65535] { R2102 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 69] { R2104 += 1, R2060 += 1, R85 += 1 };
  s0 -> s2 [0, 65535] { R2104 += 1, R2059 += 1, R2060 += 1 };
  s0 -> s0 [0, 65535] { R2103 += 1, R2104 += 1 };
  s0 -> s3 [70, 70] { R2104 += 1, R2060 += 1, R85 += 1 };
  s0 -> s4 [70, 70] { R2104 += 1, R2060 += 1, R85 += 1 };
  s0 -> s1 [71, 65535] { R2104 += 1, R2060 += 1, R85 += 1 };
  s1 -> s1 [0, 69] { R2104 += 1, R2060 += 1, R85 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R2104 += 1 };
  s1 -> s3 [70, 70] { R2104 += 1, R2060 += 1, R85 += 1 };
  s1 -> s4 [70, 70] { R2104 += 1, R2060 += 1, R85 += 1 };
  s1 -> s1 [71, 65535] { R2104 += 1, R2060 += 1, R85 += 1 };
  s2 -> s1 [0, 69] { R2104 += 1, R2060 += 1, R85 += 1 };
  s2 -> s2 [0, 65535] { R2104 += 1, R2059 += 1, R2060 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [70, 70] { R2104 += 1, R2060 += 1, R85 += 1 };
  s2 -> s4 [70, 70] { R2104 += 1, R2060 += 1, R85 += 1 };
  s2 -> s1 [71, 65535] { R2104 += 1, R2060 += 1, R85 += 1 };
  s3 -> s6 [0, 65535] { R2104 += 1 };
  s3 -> s3 [0, 65535] { R2104 += 1, R2060 += 1, R85 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2104 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2104 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 69] { R2106 += 1, R2062 += 1, R88 += 1 };
  s0 -> s2 [0, 69] { R2106 += 1, R2062 += 1, R87 += 1, R88 += 1 };
  s0 -> s3 [0, 65535] { R2106 += 1, R2061 += 1, R2062 += 1 };
  s0 -> s0 [0, 65535] { R2105 += 1, R2106 += 1 };
  s0 -> s4 [70, 70] { R2106 += 1, R2062 += 1, R88 += 1 };
  s0 -> s5 [70, 70] { R2106 += 1, R2062 += 1, R87 += 1, R88 += 1 };
  s0 -> s6 [70, 70] { R2106 += 1, R2062 += 1, R87 += 1, R88 += 1 };
  s0 -> s7 [70, 70] { R2106 += 1, R2062 += 1, R88 += 1 };
  s0 -> s1 [71, 74] { R2106 += 1, R2062 += 1, R88 += 1 };
  s0 -> s2 [71, 65535] { R2106 += 1, R2062 += 1, R87 += 1, R88 += 1 };
  s0 -> s8 [75, 75] { R2106 += 1, R2062 += 1, R88 += 1 };
  s0 -> s1 [76, 65535] { R2106 += 1, R2062 += 1, R88 += 1 };
  s1 -> s1 [0, 69] { R2106 += 1, R2062 += 1, R88 += 1 };
  s1 -> s4 [70, 70] { R2106 += 1, R2062 += 1, R88 += 1 };
  s1 -> s7 [70, 70] { R2106 += 1, R2062 += 1, R88 += 1 };
  s1 -> s1 [71, 74] { R2106 += 1, R2062 += 1, R88 += 1 };
  s1 -> s8 [75, 75] { R2106 += 1, R2062 += 1, R88 += 1 };
  s1 -> s1 [76, 65535] { R2106 += 1, R2062 += 1, R88 += 1 };
  s2 -> s1 [0, 69] { R2106 += 1, R2062 += 1, R88 += 1 };
  s2 -> s2 [0, 69] { R2106 += 1, R2062 += 1, R87 += 1, R88 += 1 };
  s2 -> s4 [70, 70] { R2106 += 1, R2062 += 1, R88 += 1 };
  s2 -> s5 [70, 70] { R2106 += 1, R2062 += 1, R87 += 1, R88 += 1 };
  s2 -> s6 [70, 70] { R2106 += 1, R2062 += 1, R87 += 1, R88 += 1 };
  s2 -> s7 [70, 70] { R2106 += 1, R2062 += 1, R88 += 1 };
  s2 -> s1 [71, 74] { R2106 += 1, R2062 += 1, R88 += 1 };
  s2 -> s2 [71, 65535] { R2106 += 1, R2062 += 1, R87 += 1, R88 += 1 };
  s2 -> s8 [75, 75] { R2106 += 1, R2062 += 1, R88 += 1 };
  s2 -> s1 [76, 65535] { R2106 += 1, R2062 += 1, R88 += 1 };
  s3 -> s1 [0, 69] { R2106 += 1, R2062 += 1, R88 += 1 };
  s3 -> s2 [0, 69] { R2106 += 1, R2062 += 1, R87 += 1, R88 += 1 };
  s3 -> s3 [0, 65535] { R2106 += 1, R2061 += 1, R2062 += 1 };
  s3 -> s4 [70, 70] { R2106 += 1, R2062 += 1, R88 += 1 };
  s3 -> s5 [70, 70] { R2106 += 1, R2062 += 1, R87 += 1, R88 += 1 };
  s3 -> s6 [70, 70] { R2106 += 1, R2062 += 1, R87 += 1, R88 += 1 };
  s3 -> s7 [70, 70] { R2106 += 1, R2062 += 1, R88 += 1 };
  s3 -> s1 [71, 74] { R2106 += 1, R2062 += 1, R88 += 1 };
  s3 -> s2 [71, 65535] { R2106 += 1, R2062 += 1, R87 += 1, R88 += 1 };
  s3 -> s8 [75, 75] { R2106 += 1, R2062 += 1, R88 += 1 };
  s3 -> s1 [76, 65535] { R2106 += 1, R2062 += 1, R88 += 1 };
  s5 -> s7 [0, 74] { R2106 += 1, R2062 += 1, R88 += 1 };
  s5 -> s5 [0, 65535] { R2106 += 1, R2062 += 1, R87 += 1, R88 += 1 };
  s5 -> s10 [75, 75] { R2106 += 1, R2062 += 1, R88 += 1 };
  s5 -> s7 [76, 65535] { R2106 += 1, R2062 += 1, R88 += 1 };
  s7 -> s7 [0, 74] { R2106 += 1, R2062 += 1, R88 += 1 };
  s7 -> s10 [75, 75] { R2106 += 1, R2062 += 1, R88 += 1 };
  s7 -> s7 [76, 65535] { R2106 += 1, R2062 += 1, R88 += 1 };
  s8 -> s8 [0, 69] { R2106 += 1, R2062 += 1, R88 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R2106 += 1 };
  s8 -> s10 [70, 70] { R2106 += 1, R2062 += 1, R88 += 1 };
  s8 -> s11 [70, 70] { R2106 += 1, R2062 += 1, R88 += 1 };
  s8 -> s8 [71, 65535] { R2106 += 1, R2062 += 1, R88 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R2106 += 1, R2062 += 1, R88 += 1 };
  s10 -> s12 [0, 65535] { R2106 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R2106 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R2106 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 69] { R2108 += 1, R2064 += 1, R91 += 1, R92 += 1 };
  s0 -> s0 [0, 65535] { R2107 += 1, R2108 += 1 };
  s0 -> s2 [0, 65535] { R2108 += 1, R2063 += 1, R2064 += 1 };
  s0 -> s3 [70, 70] { R2108 += 1, R2064 += 1, R91 += 1, R92 += 1 };
  s0 -> s4 [70, 70] { R2108 += 1, R2064 += 1, R91 += 1, R92 += 1 };
  s0 -> s1 [71, 65535] { R2108 += 1, R2064 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 69] { R2108 += 1, R2064 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 65535] { R2108 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [70, 70] { R2108 += 1, R2064 += 1, R91 += 1, R92 += 1 };
  s1 -> s4 [70, 70] { R2108 += 1, R2064 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [71, 65535] { R2108 += 1, R2064 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [0, 69] { R2108 += 1, R2064 += 1, R91 += 1, R92 += 1 };
  s2 -> s2 [0, 65535] { R2108 += 1, R2063 += 1, R2064 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [70, 70] { R2108 += 1, R2064 += 1, R91 += 1, R92 += 1 };
  s2 -> s4 [70, 70] { R2108 += 1, R2064 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [71, 65535] { R2108 += 1, R2064 += 1, R91 += 1, R92 += 1 };
  s3 -> s3 [0, 65535] { R2108 += 1, R2064 += 1, R91 += 1, R92 += 1 };
  s3 -> s6 [0, 65535] { R2108 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2108 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2108 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 69] { R2110 += 1, R2066 += 1, R97 += 1, R98 += 1 };
  s0 -> s0 [0, 65535] { R2109 += 1, R2110 += 1 };
  s0 -> s2 [0, 65535] { R2110 += 1, R2065 += 1, R2066 += 1 };
  s0 -> s3 [70, 70] { R2110 += 1, R2066 += 1, R97 += 1, R98 += 1 };
  s0 -> s4 [70, 70] { R2110 += 1, R2066 += 1, R97 += 1, R98 += 1 };
  s0 -> s1 [71, 65535] { R2110 += 1, R2066 += 1, R97 += 1, R98 += 1 };
  s1 -> s1 [0, 69] { R2110 += 1, R2066 += 1, R97 += 1, R98 += 1 };
  s1 -> s1 [0, 65535] { R2110 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [70, 70] { R2110 += 1, R2066 += 1, R97 += 1, R98 += 1 };
  s1 -> s4 [70, 70] { R2110 += 1, R2066 += 1, R97 += 1, R98 += 1 };
  s1 -> s1 [71, 65535] { R2110 += 1, R2066 += 1, R97 += 1, R98 += 1 };
  s2 -> s1 [0, 69] { R2110 += 1, R2066 += 1, R97 += 1, R98 += 1 };
  s2 -> s2 [0, 65535] { R2110 += 1, R2065 += 1, R2066 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [70, 70] { R2110 += 1, R2066 += 1, R97 += 1, R98 += 1 };
  s2 -> s4 [70, 70] { R2110 += 1, R2066 += 1, R97 += 1, R98 += 1 };
  s2 -> s1 [71, 65535] { R2110 += 1, R2066 += 1, R97 += 1, R98 += 1 };
  s3 -> s3 [0, 65535] { R2110 += 1, R2066 += 1, R97 += 1, R98 += 1 };
  s3 -> s6 [0, 65535] { R2110 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2110 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2110 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 69] { R2112 += 1, R2068 += 1, R1777 += 1, R1778 += 1 };
  s0 -> s2 [0, 65535] { R2112 += 1, R2067 += 1, R2068 += 1 };
  s0 -> s0 [0, 65535] { R2111 += 1, R2112 += 1 };
  s0 -> s3 [70, 70] { R2112 += 1, R2068 += 1, R1777 += 1, R1778 += 1 };
  s0 -> s4 [70, 70] { R2112 += 1, R2068 += 1, R1777 += 1, R1778 += 1 };
  s0 -> s1 [71, 65535] { R2112 += 1, R2068 += 1, R1777 += 1, R1778 += 1 };
  s1 -> s1 [0, 69] { R2112 += 1, R2068 += 1, R1777 += 1, R1778 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R2112 += 1 };
  s1 -> s3 [70, 70] { R2112 += 1, R2068 += 1, R1777 += 1, R1778 += 1 };
  s1 -> s4 [70, 70] { R2112 += 1, R2068 += 1, R1777 += 1, R1778 += 1 };
  s1 -> s1 [71, 65535] { R2112 += 1, R2068 += 1, R1777 += 1, R1778 += 1 };
  s2 -> s1 [0, 69] { R2112 += 1, R2068 += 1, R1777 += 1, R1778 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2112 += 1, R2067 += 1, R2068 += 1 };
  s2 -> s3 [70, 70] { R2112 += 1, R2068 += 1, R1777 += 1, R1778 += 1 };
  s2 -> s4 [70, 70] { R2112 += 1, R2068 += 1, R1777 += 1, R1778 += 1 };
  s2 -> s1 [71, 65535] { R2112 += 1, R2068 += 1, R1777 += 1, R1778 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R2112 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2112 += 1, R2068 += 1, R1777 += 1, R1778 += 1 };
  s4 -> s6 [0, 65535] { R2112 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2112 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 69] { R2114 += 1, R2070 += 1, R2005 += 1, R2006 += 1 };
  s0 -> s2 [0, 65535] { R2114 += 1, R2069 += 1, R2070 += 1 };
  s0 -> s0 [0, 65535] { R2113 += 1, R2114 += 1 };
  s0 -> s3 [70, 70] { R2114 += 1, R2070 += 1, R2005 += 1, R2006 += 1 };
  s0 -> s4 [70, 70] { R2114 += 1, R2070 += 1, R2005 += 1, R2006 += 1 };
  s0 -> s1 [71, 65535] { R2114 += 1, R2070 += 1, R2005 += 1, R2006 += 1 };
  s1 -> s1 [0, 69] { R2114 += 1, R2070 += 1, R2005 += 1, R2006 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R2114 += 1 };
  s1 -> s3 [70, 70] { R2114 += 1, R2070 += 1, R2005 += 1, R2006 += 1 };
  s1 -> s4 [70, 70] { R2114 += 1, R2070 += 1, R2005 += 1, R2006 += 1 };
  s1 -> s1 [71, 65535] { R2114 += 1, R2070 += 1, R2005 += 1, R2006 += 1 };
  s2 -> s1 [0, 69] { R2114 += 1, R2070 += 1, R2005 += 1, R2006 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2114 += 1, R2069 += 1, R2070 += 1 };
  s2 -> s3 [70, 70] { R2114 += 1, R2070 += 1, R2005 += 1, R2006 += 1 };
  s2 -> s4 [70, 70] { R2114 += 1, R2070 += 1, R2005 += 1, R2006 += 1 };
  s2 -> s1 [71, 65535] { R2114 += 1, R2070 += 1, R2005 += 1, R2006 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R2114 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R2114 += 1 };
  s4 -> s4 [0, 65535] { R2114 += 1, R2070 += 1, R2005 += 1, R2006 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2114 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [102, 102];
  accepting s1;
};
};
constraint R2 = R2032 && R3 = R2114 && R23 - R2114 = -1 && R24 = R2114 && R25 - R2114 = -1 && R26 = R2114 && R27 = 0 && R28 = 1 && R29 = 0 && R30 = 1 && R45 + R84 + R83 + -1*R1782 + -1*R1778 - R66 = 0 && R49 + R89 + R87 = 0 && R50 + R90 + R88 + -1*R1782 + -1*R1778 - R66 = 0 && R55 + R96 + R93 + -1*R1784 + -1*R1780 - R68 = 0 && R65 + R1781 + R1777 = 0 && R67 + R1783 + R1779 = 0 && R2031 = 0 && R2055 = 0 && R2056 = 0 && R2061 = 0 && R2062 = 0 && R2071 = 0 && R2072 = R2114 && R2073 = 0 && R2074 = R2114 && R2075 = 0 && R2076 = R2114 && R2077 = 0 && R2078 = R2114 && R2079 = 0 && R2080 = R2114 && R2081 = 0 && R2082 = R2114 && R2083 = 0 && R2084 = R2114 && R2085 = 0 && R2086 = R2114 && R2087 = 0 && R2088 = R2114 && R2089 = 0 && R2090 = R2114 && R2091 = 0 && R2092 = R2114 && R2093 = 0 && R2094 = R2114 && R2095 = 0 && R2096 = R2114 && R2097 = 0 && R2098 = R2114 && R2099 = 0 && R2100 = R2114 && R2101 = 0 && R2102 = R2114 && R2103 = 0 && R2104 = R2114 && R2105 = 0 && R2106 = R2114 && R2107 = 0 && R2108 = R2114 && R2109 = 0 && R2110 = R2114 && R2111 = 0 && R2112 = R2114 && R2113 = 0 && R12 < 1 && R15 < 1 && R16 < 1 && R47 + R86 + R85 < 1 && R61 + R102 + R99 < 1 && -1*R1782 + -1*R1778 - R66 < 1 && -1*R1784 + -1*R1780 - R68 < 1 && -1 < R2032 && 0 < R2114 && (R53 + R94 + R91 != 0 || R54 + R95 + R92 + -1*R1782 + -1*R1778 - R66 = 0 || R66 + R1782 + R1778 < 1) && (R59 + R100 + R97 != 0 || R60 + R101 + R98 + -1*R1782 + -1*R1778 - R66 = 0 || R66 + R1782 + R1778 < 1) && (R66 + R1782 + R1778 != 0 || ((R53 + R94 + R91 != 0 || R54 + R95 + R92 = 0 || R68 + R1784 + R1780 < 1) && (R53 + R94 + R91 = 0 || R68 + R1784 + R1780 < 1))) && (R66 + R1782 + R1778 != 0 || ((R59 + R100 + R97 != 0 || R60 + R101 + R98 = 0 || R68 + R1784 + R1780 < 1) && (R59 + R100 + R97 = 0 || R68 + R1784 + R1780 < 1))) && (R66 + R1782 + R1778 != 0 || ((R73 + R2010 + R2005 != 0 || R74 + R2011 + R2006 = 0 || R68 + R1784 + R1780 < 1) && (R73 + R2010 + R2005 = 0 || R68 + R1784 + R1780 < 1))) && (R68 + R1784 + R1780 != 0 || R77 + R2014 + R2009 = 0 || (R75 + R2012 + R2007 = 0 && R76 + R2013 + R2008 = 0)) && (R73 + R2010 + R2005 != 0 || R66 + R1782 + R1778 + -1*R2011 + -1*R2006 - R74 = 0 || R66 + R1782 + R1778 < 1) && (R75 + R2012 + R2007 != 0 || R68 + R1784 + R1780 + -1*R2013 + -1*R2008 - R76 = 0 || R68 + R1784 + R1780 < 1) && (R2015 != 0 || R2016 = R2032 || (R20 = 0 && R2032 = 0)) && (R2017 != 0 || R2018 = R2032 || (R20 = 0 && R2032 = 0)) && (R2019 != 0 || R2020 = R2032 || (R20 = 0 && R2032 = 0)) && (R2021 != 0 || R2022 = R2032 || (R20 = 0 && R2032 = 0)) && (R2023 != 0 || R2024 = R2032 || (R20 = 0 && R2032 = 0)) && (R2025 != 0 || R2026 = R2032 || (R20 = 0 && R2032 = 0)) && (R2027 != 0 || R2028 = R2032 || (R20 = 0 && R2032 = 0)) && (R2029 != 0 || R2030 = R2032 || (R20 = 0 && R2032 = 0)) && (R2033 != 0 || R2032 = R2034 || (R20 = 0 && R2032 = 0)) && (R21 = 0 || (R2053 = 0 && R2054 = 0)) && (R21 = 0 || (R2057 = 0 && R2058 = 0)) && (R21 = 0 || (R2059 = 0 && R2060 = 0)) && (R21 = 0 || (R2063 = 0 && R2064 = 0)) && (R21 = 0 || (R2065 = 0 && R2066 = 0)) && (R21 = 0 || (R2067 = 0 && R2068 = 0)) && (R21 = 0 || (R2069 = 0 && R2070 = 0)) && (R22 = 0 || (R2035 = 0 && R2036 = 0)) && (R22 = 0 || (R2037 = 0 && R2038 = 0)) && (R22 = 0 || (R2039 = 0 && R2040 = 0)) && (R22 = 0 || (R2041 = 0 && R2042 = 0)) && (R22 = 0 || (R2043 = 0 && R2044 = 0)) && (R22 = 0 || (R2045 = 0 && R2046 = 0)) && (R22 = 0 || (R2047 = 0 && R2048 = 0)) && (R22 = 0 || (R2049 = 0 && R2050 = 0)) && (R22 = 0 || (R2051 = 0 && R2052 = 0)) && (R53 + R94 + R91 = 0 || R66 + R1782 + R1778 < 1) && (R59 + R100 + R97 = 0 || R66 + R1782 + R1778 < 1) && (R73 + R2010 + R2005 = 0 || R66 + R1782 + R1778 < 1) && (R75 + R2012 + R2007 = 0 || R68 + R1784 + R1780 < 1) && (R2015 = 0 || (R20 = 0 && R2032 = 0)) && (R2017 = 0 || (R20 = 0 && R2032 = 0)) && (R2019 = 0 || (R20 = 0 && R2032 = 0)) && (R2021 = 0 || (R20 = 0 && R2032 = 0)) && (R2023 = 0 || (R20 = 0 && R2032 = 0)) && (R2025 = 0 || (R20 = 0 && R2032 = 0)) && (R2027 = 0 || (R20 = 0 && R2032 = 0)) && (R2029 = 0 || (R20 = 0 && R2032 = 0)) && (R2033 = 0 || (R20 = 0 && R2032 = 0));
// End of Parikh automata intersection problem
