// Parikh automata intersection problem, generated by OSTRICH+
counter int R100, R101, R102, R12, R1219, R1220, R1221, R1222, R1223, R1224, R1225, R1226, R15, R16, R1667, R1668, R1669, R1670, R1671, R1672, R1673, R1674, R1675, R1676, R1677, R1678, R1679, R1680, R1681, R1682, R1683, R1684, R1685, R1686, R1687, R1688, R1689, R1690, R1691, R1692, R1693, R1694, R1695, R1696, R1697, R1698, R1699, R1700, R1701, R1702, R1703, R1704, R1705, R1706, R1707, R1708, R1709, R1710, R1711, R1712, R1713, R1714, R1715, R1716, R1717, R1718, R1719, R1720, R1721, R1722, R1723, R1724, R1725, R1726, R1727, R1728, R1729, R1730, R1731, R1732, R1733, R1734, R1735, R1736, R1737, R1738, R1739, R1740, R1741, R1742, R1743, R1744, R1745, R1746, R1747, R1748, R1749, R1750, R1751, R1752, R1753, R1754, R1755, R1756, R1757, R1758, R1759, R1760, R1761, R1762, R1763, R1764, R1765, R1766, R1767, R1768, R1769, R1770, R1771, R1772, R1773, R1774, R1775, R1776, R2, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R4, R45, R47, R49, R5, R50, R53, R54, R55, R59, R60, R61, R65, R66, R67, R68, R73, R74, R75, R76, R77, R83, R84, R85, R86, R87, R88, R89, R90, R91, R92, R93, R94, R95, R96, R97, R98, R99;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [70, 70];
  s0 -> s0 [71, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [70, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R15 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 69];
  s0 -> s0 [0, 65535] { R16 += 1 };
  s0 -> s2 [70, 70];
  s0 -> s1 [71, 65535];
  s1 -> s1 [0, 69];
  s1 -> s2 [70, 70];
  s1 -> s1 [71, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R24 += 1 };
  s0 -> s0 [0, 65535] { R23 += 1, R24 += 1 };
  s0 -> s2 [9, 13] { R24 += 1 };
  s0 -> s1 [14, 31] { R24 += 1 };
  s0 -> s2 [32, 32] { R24 += 1 };
  s0 -> s1 [33, 65535] { R24 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R24 += 1 };
  s2 -> s1 [0, 65535] { R24 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R25 += 1, R26 += 1 };
  s1 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R28 += 1 };
  s0 -> s0 [0, 65535] { R27 += 1, R28 += 1 };
  s0 -> s2 [9, 13] { R28 += 1 };
  s0 -> s1 [14, 31] { R28 += 1 };
  s0 -> s2 [32, 32] { R28 += 1 };
  s0 -> s1 [33, 65535] { R28 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R28 += 1 };
  s2 -> s1 [0, 65535] { R28 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R29 += 1, R30 += 1 };
  s1 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R1698 += 1, R22 += 1 };
  s0 -> s0 [0, 65535] { R1697 += 1, R1698 += 1 };
  s1 -> s1 [0, 65535] { R1698 += 1, R22 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 69] { R1700 += 1 };
  s0 -> s0 [0, 65535] { R1699 += 1, R1700 += 1 };
  s0 -> s2 [70, 70] { R1700 += 1 };
  s0 -> s3 [70, 70] { R1700 += 1 };
  s0 -> s1 [76, 65535] { R1700 += 1 };
  s1 -> s1 [0, 69] { R1700 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R1700 += 1 };
  s1 -> s3 [70, 70] { R1700 += 1 };
  s1 -> s1 [76, 65535] { R1700 += 1 };
  s2 -> s2 [0, 70] { R1700 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [76, 65535] { R1700 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 69] { R1702 += 1, R45 += 1 };
  s0 -> s0 [0, 65535] { R1701 += 1, R1702 += 1 };
  s0 -> s2 [70, 70] { R1702 += 1, R45 += 1 };
  s0 -> s3 [70, 70] { R1702 += 1, R45 += 1 };
  s0 -> s1 [71, 65535] { R1702 += 1, R45 += 1 };
  s1 -> s1 [0, 69] { R1702 += 1, R45 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R1702 += 1, R45 += 1 };
  s1 -> s3 [70, 70] { R1702 += 1, R45 += 1 };
  s1 -> s1 [71, 65535] { R1702 += 1, R45 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R1702 += 1, R45 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 69] { R1704 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R1703 += 1, R1704 += 1 };
  s0 -> s2 [70, 70] { R1704 += 1, R47 += 1 };
  s0 -> s3 [70, 70] { R1704 += 1, R47 += 1 };
  s0 -> s1 [71, 65535] { R1704 += 1, R47 += 1 };
  s1 -> s1 [0, 69] { R1704 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R1704 += 1, R47 += 1 };
  s1 -> s3 [70, 70] { R1704 += 1, R47 += 1 };
  s1 -> s1 [71, 65535] { R1704 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1704 += 1, R47 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 69] { R1706 += 1, R49 += 1, R50 += 1 };
  s0 -> s0 [0, 65535] { R1705 += 1, R1706 += 1 };
  s0 -> s2 [70, 70] { R1706 += 1, R49 += 1, R50 += 1 };
  s0 -> s3 [70, 70] { R1706 += 1, R49 += 1, R50 += 1 };
  s0 -> s1 [71, 65535] { R1706 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 69] { R1706 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R1706 += 1, R49 += 1, R50 += 1 };
  s1 -> s3 [70, 70] { R1706 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [71, 65535] { R1706 += 1, R49 += 1, R50 += 1 };
  s2 -> s2 [0, 65535] { R1706 += 1, R49 += 1, R50 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 69] { R1708 += 1, R53 += 1, R54 += 1 };
  s0 -> s0 [0, 65535] { R1707 += 1, R1708 += 1 };
  s0 -> s2 [70, 70] { R1708 += 1, R53 += 1, R54 += 1 };
  s0 -> s3 [70, 70] { R1708 += 1, R53 += 1, R54 += 1 };
  s0 -> s1 [71, 65535] { R1708 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 69] { R1708 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R1708 += 1, R53 += 1, R54 += 1 };
  s1 -> s3 [70, 70] { R1708 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [71, 65535] { R1708 += 1, R53 += 1, R54 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1708 += 1, R53 += 1, R54 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 69] { R1710 += 1, R59 += 1, R60 += 1 };
  s0 -> s0 [0, 65535] { R1709 += 1, R1710 += 1 };
  s0 -> s2 [70, 70] { R1710 += 1, R59 += 1, R60 += 1 };
  s0 -> s3 [70, 70] { R1710 += 1, R59 += 1, R60 += 1 };
  s0 -> s1 [71, 65535] { R1710 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 69] { R1710 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R1710 += 1, R59 += 1, R60 += 1 };
  s1 -> s3 [70, 70] { R1710 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [71, 65535] { R1710 += 1, R59 += 1, R60 += 1 };
  s2 -> s2 [0, 65535] { R1710 += 1, R59 += 1, R60 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 69] { R1712 += 1, R65 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R1711 += 1, R1712 += 1 };
  s0 -> s2 [70, 70] { R1712 += 1, R65 += 1, R66 += 1 };
  s0 -> s3 [70, 70] { R1712 += 1, R65 += 1, R66 += 1 };
  s0 -> s1 [71, 65535] { R1712 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 69] { R1712 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R1712 += 1, R65 += 1, R66 += 1 };
  s1 -> s3 [70, 70] { R1712 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [71, 65535] { R1712 += 1, R65 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R1712 += 1, R65 += 1, R66 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 69] { R1714 += 1, R73 += 1, R74 += 1 };
  s0 -> s0 [0, 65535] { R1713 += 1, R1714 += 1 };
  s0 -> s2 [70, 70] { R1714 += 1, R73 += 1, R74 += 1 };
  s0 -> s3 [70, 70] { R1714 += 1, R73 += 1, R74 += 1 };
  s0 -> s1 [71, 65535] { R1714 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 69] { R1714 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R1714 += 1, R73 += 1, R74 += 1 };
  s1 -> s3 [70, 70] { R1714 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [71, 65535] { R1714 += 1, R73 += 1, R74 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1714 += 1, R73 += 1, R74 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 69] { R1734 += 1 };
  s0 -> s0 [0, 65535] { R1733 += 1, R1734 += 1 };
  s0 -> s2 [70, 70] { R1734 += 1 };
  s0 -> s1 [71, 65535] { R1734 += 1 };
  s1 -> s1 [0, 69] { R1734 += 1 };
  s1 -> s2 [70, 70] { R1734 += 1 };
  s1 -> s1 [71, 65535] { R1734 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1734 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R1736 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R1735 += 1, R1736 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R1736 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 69] { R1738 += 1 };
  s0 -> s2 [0, 65535] { R1738 += 1, R12 += 1 };
  s0 -> s0 [0, 65535] { R1737 += 1, R1738 += 1 };
  s0 -> s3 [70, 70] { R1738 += 1 };
  s0 -> s1 [71, 65535] { R1738 += 1 };
  s1 -> s1 [0, 69] { R1738 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [70, 70] { R1738 += 1 };
  s1 -> s1 [71, 65535] { R1738 += 1 };
  s2 -> s1 [0, 69] { R1738 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1738 += 1, R12 += 1 };
  s2 -> s3 [70, 70] { R1738 += 1 };
  s2 -> s1 [71, 65535] { R1738 += 1 };
  s3 -> s3 [0, 65535] { R1738 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 69] { R1740 += 1, R1678 += 1 };
  s0 -> s2 [0, 65535] { R1740 += 1, R1677 += 1, R1678 += 1 };
  s0 -> s0 [0, 65535] { R1739 += 1, R1740 += 1 };
  s0 -> s1 [71, 65535] { R1740 += 1, R1678 += 1 };
  s1 -> s1 [0, 69] { R1740 += 1, R1678 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1740 += 1 };
  s1 -> s1 [71, 65535] { R1740 += 1, R1678 += 1 };
  s2 -> s1 [0, 69] { R1740 += 1, R1678 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1740 += 1, R1677 += 1, R1678 += 1 };
  s2 -> s1 [71, 65535] { R1740 += 1, R1678 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R1742 += 1, R1680 += 1, R20 += 1 };
  s0 -> s2 [0, 65535] { R1742 += 1, R1679 += 1, R1680 += 1 };
  s0 -> s0 [0, 65535] { R1741 += 1, R1742 += 1 };
  s1 -> s4 [0, 65535] { R1742 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1742 += 1, R1680 += 1, R20 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R1742 += 1, R1680 += 1, R20 += 1 };
  s2 -> s2 [0, 65535] { R1742 += 1, R1679 += 1, R1680 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1742 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 70] { R1744 += 1, R1682 += 1 };
  s0 -> s0 [0, 65535] { R1743 += 1, R1744 += 1 };
  s0 -> s2 [0, 65535] { R1744 += 1, R1681 += 1, R1682 += 1 };
  s0 -> s1 [75, 65535] { R1744 += 1, R1682 += 1 };
  s1 -> s1 [0, 70] { R1744 += 1, R1682 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1744 += 1 };
  s1 -> s1 [75, 65535] { R1744 += 1, R1682 += 1 };
  s2 -> s1 [0, 70] { R1744 += 1, R1682 += 1 };
  s2 -> s2 [0, 65535] { R1744 += 1, R1681 += 1, R1682 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [75, 65535] { R1744 += 1, R1682 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s0 [0, 65535] { R1745 += 1, R1746 += 1 };
  s0 -> s1 [0, 65535] { R1746 += 1, R1683 += 1, R1684 += 1 };
  s0 -> s2 [0, 65535] { R1746 += 1, R1684 += 1, R84 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1746 += 1, R1683 += 1, R1684 += 1 };
  s1 -> s2 [0, 65535] { R1746 += 1, R1684 += 1, R84 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R1746 += 1 };
  s2 -> s2 [0, 65535] { R1746 += 1, R1684 += 1, R84 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1746 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 74] { R1748 += 1, R1686 += 1 };
  s0 -> s2 [0, 65535] { R1748 += 1, R1685 += 1, R1686 += 1 };
  s0 -> s0 [0, 65535] { R1747 += 1, R1748 += 1 };
  s0 -> s3 [0, 65535] { R1748 += 1, R1686 += 1, R86 += 1 };
  s0 -> s1 [76, 65535] { R1748 += 1, R1686 += 1 };
  s1 -> s1 [0, 74] { R1748 += 1, R1686 += 1 };
  s1 -> s1 [0, 65535] { R1748 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [76, 65535] { R1748 += 1, R1686 += 1 };
  s2 -> s1 [0, 74] { R1748 += 1, R1686 += 1 };
  s2 -> s2 [0, 65535] { R1748 += 1, R1685 += 1, R1686 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R1748 += 1, R1686 += 1, R86 += 1 };
  s2 -> s1 [76, 65535] { R1748 += 1, R1686 += 1 };
  s3 -> s1 [0, 74] { R1748 += 1, R1686 += 1 };
  s3 -> s4 [0, 65535] { R1748 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R1748 += 1, R1686 += 1, R86 += 1 };
  s3 -> s1 [76, 65535] { R1748 += 1, R1686 += 1 };
  s4 -> s4 [0, 65535] { R1748 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 65535] { R1750 += 1, R1688 += 1 };
  s0 -> s2 [0, 65535] { R1750 += 1, R1687 += 1, R1688 += 1 };
  s0 -> s0 [0, 65535] { R1749 += 1, R1750 += 1 };
  s0 -> s3 [0, 65535] { R1750 += 1, R1688 += 1, R90 += 1 };
  s1 -> s1 [0, 65535] { R1750 += 1, R1688 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R1750 += 1 };
  s2 -> s1 [0, 65535] { R1750 += 1, R1688 += 1 };
  s2 -> s2 [0, 65535] { R1750 += 1, R1687 += 1, R1688 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R1750 += 1, R1688 += 1, R90 += 1 };
  s3 -> s1 [0, 65535] { R1750 += 1, R1688 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R1750 += 1 };
  s3 -> s3 [0, 65535] { R1750 += 1, R1688 += 1, R90 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1750 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s0 [0, 65535] { R1751 += 1, R1752 += 1 };
  s0 -> s1 [0, 65535] { R1752 += 1, R1689 += 1, R1690 += 1 };
  s0 -> s2 [0, 65535] { R1752 += 1, R1690 += 1, R94 += 1, R95 += 1 };
  s0 -> s3 [0, 65535] { R1752 += 1, R1690 += 1, R95 += 1, R96 += 1 };
  s1 -> s1 [0, 65535] { R1752 += 1, R1689 += 1, R1690 += 1 };
  s1 -> s2 [0, 65535] { R1752 += 1, R1690 += 1, R94 += 1, R95 += 1 };
  s1 -> s3 [0, 65535] { R1752 += 1, R1690 += 1, R95 += 1, R96 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s4 [0, 65535] { R1752 += 1 };
  s2 -> s2 [0, 65535] { R1752 += 1, R1690 += 1, R94 += 1, R95 += 1 };
  s2 -> s3 [0, 65535] { R1752 += 1, R1690 += 1, R95 += 1, R96 += 1 };
  s2 -> s6 [0, 65535];
  s3 -> s4 [0, 65535] { R1752 += 1 };
  s3 -> s5 [0, 65535] { R1752 += 1, R1690 += 1 };
  s3 -> s3 [0, 65535] { R1752 += 1, R1690 += 1, R95 += 1, R96 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R1752 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s4 [0, 65535] { R1752 += 1 };
  s5 -> s5 [0, 65535] { R1752 += 1, R1690 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 74] { R1754 += 1, R1692 += 1, R101 += 1 };
  s0 -> s0 [0, 65535] { R1753 += 1, R1754 += 1 };
  s0 -> s2 [0, 65535] { R1754 += 1, R1691 += 1, R1692 += 1 };
  s0 -> s3 [0, 65535] { R1754 += 1, R1692 += 1, R101 += 1, R102 += 1 };
  s0 -> s4 [0, 65535] { R1754 += 1, R1692 += 1, R100 += 1, R101 += 1 };
  s0 -> s1 [76, 65535] { R1754 += 1, R1692 += 1, R101 += 1 };
  s1 -> s1 [0, 74] { R1754 += 1, R1692 += 1, R101 += 1 };
  s1 -> s5 [0, 65535] { R1754 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R1754 += 1, R1692 += 1 };
  s1 -> s1 [76, 65535] { R1754 += 1, R1692 += 1, R101 += 1 };
  s2 -> s1 [0, 74] { R1754 += 1, R1692 += 1, R101 += 1 };
  s2 -> s2 [0, 65535] { R1754 += 1, R1691 += 1, R1692 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R1754 += 1, R1692 += 1, R101 += 1, R102 += 1 };
  s2 -> s4 [0, 65535] { R1754 += 1, R1692 += 1, R100 += 1, R101 += 1 };
  s2 -> s1 [76, 65535] { R1754 += 1, R1692 += 1, R101 += 1 };
  s3 -> s1 [0, 74] { R1754 += 1, R1692 += 1, R101 += 1 };
  s3 -> s5 [0, 65535] { R1754 += 1 };
  s3 -> s7 [0, 65535] { R1754 += 1, R1692 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R1754 += 1, R1692 += 1, R101 += 1, R102 += 1 };
  s3 -> s1 [76, 65535] { R1754 += 1, R1692 += 1, R101 += 1 };
  s4 -> s1 [0, 74] { R1754 += 1, R1692 += 1, R101 += 1 };
  s4 -> s5 [0, 65535] { R1754 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s3 [0, 65535] { R1754 += 1, R1692 += 1, R101 += 1, R102 += 1 };
  s4 -> s4 [0, 65535] { R1754 += 1, R1692 += 1, R100 += 1, R101 += 1 };
  s4 -> s1 [76, 65535] { R1754 += 1, R1692 += 1, R101 += 1 };
  s5 -> s5 [0, 65535] { R1754 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R1754 += 1 };
  s7 -> s7 [0, 65535] { R1754 += 1, R1692 += 1 };
  s7 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R1756 += 1, R1693 += 1, R1694 += 1 };
  s0 -> s0 [0, 65535] { R1755 += 1, R1756 += 1 };
  s0 -> s2 [0, 65535] { R1756 += 1, R1694 += 1 };
  s1 -> s1 [0, 65535] { R1756 += 1, R1693 += 1, R1694 += 1 };
  s1 -> s2 [0, 65535] { R1756 += 1, R1694 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1756 += 1, R1694 += 1 };
  s2 -> s3 [0, 65535] { R1756 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1756 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s0 [0, 65535] { R1757 += 1, R1758 += 1 };
  s0 -> s1 [0, 65535] { R1758 += 1, R1696 += 1 };
  s0 -> s2 [0, 65535] { R1758 += 1, R1696 += 1, R1673 += 1, R1674 += 1, R1675 += 1 };
  s0 -> s3 [0, 65535] { R1758 += 1, R1695 += 1, R1696 += 1 };
  s0 -> s4 [0, 65535] { R1758 += 1, R1696 += 1, R1673 += 1, R1675 += 1, R1676 += 1 };
  s1 -> s1 [0, 65535] { R1758 += 1, R1696 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R1758 += 1 };
  s2 -> s1 [0, 65535] { R1758 += 1, R1696 += 1 };
  s2 -> s2 [0, 65535] { R1758 += 1, R1696 += 1, R1673 += 1, R1674 += 1, R1675 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s4 [0, 65535] { R1758 += 1, R1696 += 1, R1673 += 1, R1675 += 1, R1676 += 1 };
  s2 -> s7 [0, 65535] { R1758 += 1 };
  s3 -> s1 [0, 65535] { R1758 += 1, R1696 += 1 };
  s3 -> s2 [0, 65535] { R1758 += 1, R1696 += 1, R1673 += 1, R1674 += 1, R1675 += 1 };
  s3 -> s3 [0, 65535] { R1758 += 1, R1695 += 1, R1696 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s4 [0, 65535] { R1758 += 1, R1696 += 1, R1673 += 1, R1675 += 1, R1676 += 1 };
  s4 -> s5 [0, 65535] { R1758 += 1, R1696 += 1, R1673 += 1 };
  s4 -> s1 [0, 65535] { R1758 += 1, R1696 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R1758 += 1, R1696 += 1, R1673 += 1, R1675 += 1, R1676 += 1 };
  s4 -> s7 [0, 65535] { R1758 += 1 };
  s5 -> s5 [0, 65535] { R1758 += 1, R1696 += 1, R1673 += 1 };
  s5 -> s1 [0, 65535] { R1758 += 1, R1696 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R1758 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R1758 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R1760 += 1, R1715 += 1, R1716 += 1 };
  s0 -> s2 [0, 65535] { R1760 += 1, R1716 += 1, R21 += 1 };
  s0 -> s0 [0, 65535] { R1759 += 1, R1760 += 1 };
  s1 -> s1 [0, 65535] { R1760 += 1, R1715 += 1, R1716 += 1 };
  s1 -> s2 [0, 65535] { R1760 += 1, R1716 += 1, R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1760 += 1, R1716 += 1, R21 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R1760 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1760 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 69] { R1762 += 1, R1718 += 1 };
  s0 -> s0 [0, 65535] { R1761 += 1, R1762 += 1 };
  s0 -> s2 [0, 65535] { R1762 += 1, R1717 += 1, R1718 += 1 };
  s0 -> s3 [70, 70] { R1762 += 1, R1718 += 1 };
  s0 -> s4 [70, 70] { R1762 += 1, R1718 += 1 };
  s0 -> s5 [75, 75] { R1762 += 1, R1718 += 1 };
  s0 -> s1 [76, 65535] { R1762 += 1, R1718 += 1 };
  s1 -> s1 [0, 69] { R1762 += 1, R1718 += 1 };
  s1 -> s3 [70, 70] { R1762 += 1, R1718 += 1 };
  s1 -> s4 [70, 70] { R1762 += 1, R1718 += 1 };
  s1 -> s5 [75, 75] { R1762 += 1, R1718 += 1 };
  s1 -> s1 [76, 65535] { R1762 += 1, R1718 += 1 };
  s2 -> s1 [0, 69] { R1762 += 1, R1718 += 1 };
  s2 -> s2 [0, 65535] { R1762 += 1, R1717 += 1, R1718 += 1 };
  s2 -> s3 [70, 70] { R1762 += 1, R1718 += 1 };
  s2 -> s4 [70, 70] { R1762 += 1, R1718 += 1 };
  s2 -> s5 [75, 75] { R1762 += 1, R1718 += 1 };
  s2 -> s1 [76, 65535] { R1762 += 1, R1718 += 1 };
  s4 -> s4 [0, 70] { R1762 += 1, R1718 += 1 };
  s4 -> s7 [75, 75] { R1762 += 1, R1718 += 1 };
  s4 -> s4 [76, 65535] { R1762 += 1, R1718 += 1 };
  s5 -> s5 [0, 69] { R1762 += 1, R1718 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R1762 += 1 };
  s5 -> s7 [70, 70] { R1762 += 1, R1718 += 1 };
  s5 -> s8 [70, 70] { R1762 += 1, R1718 += 1 };
  s5 -> s5 [75, 65535] { R1762 += 1, R1718 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 70] { R1762 += 1, R1718 += 1 };
  s7 -> s7 [0, 65535] { R1762 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [75, 65535] { R1762 += 1, R1718 += 1 };
  s8 -> s8 [0, 65535] { R1762 += 1 };
  s8 -> s6 [0, 65535];
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 69] { R1764 += 1, R1720 += 1, R83 += 1 };
  s0 -> s2 [0, 65535] { R1764 += 1, R1719 += 1, R1720 += 1 };
  s0 -> s0 [0, 65535] { R1763 += 1, R1764 += 1 };
  s0 -> s3 [70, 70] { R1764 += 1, R1720 += 1, R83 += 1 };
  s0 -> s4 [70, 70] { R1764 += 1, R1720 += 1, R83 += 1 };
  s0 -> s1 [71, 65535] { R1764 += 1, R1720 += 1, R83 += 1 };
  s1 -> s1 [0, 69] { R1764 += 1, R1720 += 1, R83 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1764 += 1 };
  s1 -> s3 [70, 70] { R1764 += 1, R1720 += 1, R83 += 1 };
  s1 -> s4 [70, 70] { R1764 += 1, R1720 += 1, R83 += 1 };
  s1 -> s1 [71, 65535] { R1764 += 1, R1720 += 1, R83 += 1 };
  s2 -> s1 [0, 69] { R1764 += 1, R1720 += 1, R83 += 1 };
  s2 -> s2 [0, 65535] { R1764 += 1, R1719 += 1, R1720 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [70, 70] { R1764 += 1, R1720 += 1, R83 += 1 };
  s2 -> s4 [70, 70] { R1764 += 1, R1720 += 1, R83 += 1 };
  s2 -> s1 [71, 65535] { R1764 += 1, R1720 += 1, R83 += 1 };
  s3 -> s6 [0, 65535] { R1764 += 1 };
  s3 -> s3 [0, 65535] { R1764 += 1, R1720 += 1, R83 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1764 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1764 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 69] { R1766 += 1, R1722 += 1, R85 += 1 };
  s0 -> s2 [0, 65535] { R1766 += 1, R1721 += 1, R1722 += 1 };
  s0 -> s0 [0, 65535] { R1765 += 1, R1766 += 1 };
  s0 -> s3 [70, 70] { R1766 += 1, R1722 += 1, R85 += 1 };
  s0 -> s4 [70, 70] { R1766 += 1, R1722 += 1, R85 += 1 };
  s0 -> s1 [71, 65535] { R1766 += 1, R1722 += 1, R85 += 1 };
  s1 -> s1 [0, 69] { R1766 += 1, R1722 += 1, R85 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1766 += 1 };
  s1 -> s3 [70, 70] { R1766 += 1, R1722 += 1, R85 += 1 };
  s1 -> s4 [70, 70] { R1766 += 1, R1722 += 1, R85 += 1 };
  s1 -> s1 [71, 65535] { R1766 += 1, R1722 += 1, R85 += 1 };
  s2 -> s1 [0, 69] { R1766 += 1, R1722 += 1, R85 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1766 += 1, R1721 += 1, R1722 += 1 };
  s2 -> s3 [70, 70] { R1766 += 1, R1722 += 1, R85 += 1 };
  s2 -> s4 [70, 70] { R1766 += 1, R1722 += 1, R85 += 1 };
  s2 -> s1 [71, 65535] { R1766 += 1, R1722 += 1, R85 += 1 };
  s3 -> s3 [0, 65535] { R1766 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R1766 += 1 };
  s4 -> s4 [0, 65535] { R1766 += 1, R1722 += 1, R85 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1766 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 69] { R1768 += 1, R1724 += 1, R87 += 1, R88 += 1 };
  s0 -> s2 [0, 69] { R1768 += 1, R1724 += 1, R88 += 1 };
  s0 -> s0 [0, 65535] { R1767 += 1, R1768 += 1 };
  s0 -> s3 [0, 65535] { R1768 += 1, R1723 += 1, R1724 += 1 };
  s0 -> s4 [70, 70] { R1768 += 1, R1724 += 1, R88 += 1 };
  s0 -> s5 [70, 70] { R1768 += 1, R1724 += 1, R87 += 1, R88 += 1 };
  s0 -> s6 [70, 70] { R1768 += 1, R1724 += 1, R88 += 1 };
  s0 -> s7 [70, 70] { R1768 += 1, R1724 += 1, R87 += 1, R88 += 1 };
  s0 -> s2 [71, 74] { R1768 += 1, R1724 += 1, R88 += 1 };
  s0 -> s1 [71, 65535] { R1768 += 1, R1724 += 1, R87 += 1, R88 += 1 };
  s0 -> s8 [75, 75] { R1768 += 1, R1724 += 1, R88 += 1 };
  s0 -> s2 [76, 65535] { R1768 += 1, R1724 += 1, R88 += 1 };
  s1 -> s1 [0, 69] { R1768 += 1, R1724 += 1, R87 += 1, R88 += 1 };
  s1 -> s2 [0, 69] { R1768 += 1, R1724 += 1, R88 += 1 };
  s1 -> s4 [70, 70] { R1768 += 1, R1724 += 1, R88 += 1 };
  s1 -> s5 [70, 70] { R1768 += 1, R1724 += 1, R87 += 1, R88 += 1 };
  s1 -> s6 [70, 70] { R1768 += 1, R1724 += 1, R88 += 1 };
  s1 -> s7 [70, 70] { R1768 += 1, R1724 += 1, R87 += 1, R88 += 1 };
  s1 -> s2 [71, 74] { R1768 += 1, R1724 += 1, R88 += 1 };
  s1 -> s1 [71, 65535] { R1768 += 1, R1724 += 1, R87 += 1, R88 += 1 };
  s1 -> s8 [75, 75] { R1768 += 1, R1724 += 1, R88 += 1 };
  s1 -> s2 [76, 65535] { R1768 += 1, R1724 += 1, R88 += 1 };
  s2 -> s2 [0, 69] { R1768 += 1, R1724 += 1, R88 += 1 };
  s2 -> s4 [70, 70] { R1768 += 1, R1724 += 1, R88 += 1 };
  s2 -> s6 [70, 70] { R1768 += 1, R1724 += 1, R88 += 1 };
  s2 -> s2 [71, 74] { R1768 += 1, R1724 += 1, R88 += 1 };
  s2 -> s8 [75, 75] { R1768 += 1, R1724 += 1, R88 += 1 };
  s2 -> s2 [76, 65535] { R1768 += 1, R1724 += 1, R88 += 1 };
  s3 -> s1 [0, 69] { R1768 += 1, R1724 += 1, R87 += 1, R88 += 1 };
  s3 -> s2 [0, 69] { R1768 += 1, R1724 += 1, R88 += 1 };
  s3 -> s3 [0, 65535] { R1768 += 1, R1723 += 1, R1724 += 1 };
  s3 -> s4 [70, 70] { R1768 += 1, R1724 += 1, R88 += 1 };
  s3 -> s5 [70, 70] { R1768 += 1, R1724 += 1, R87 += 1, R88 += 1 };
  s3 -> s6 [70, 70] { R1768 += 1, R1724 += 1, R88 += 1 };
  s3 -> s7 [70, 70] { R1768 += 1, R1724 += 1, R87 += 1, R88 += 1 };
  s3 -> s2 [71, 74] { R1768 += 1, R1724 += 1, R88 += 1 };
  s3 -> s1 [71, 65535] { R1768 += 1, R1724 += 1, R87 += 1, R88 += 1 };
  s3 -> s8 [75, 75] { R1768 += 1, R1724 += 1, R88 += 1 };
  s3 -> s2 [76, 65535] { R1768 += 1, R1724 += 1, R88 += 1 };
  s4 -> s4 [0, 74] { R1768 += 1, R1724 += 1, R88 += 1 };
  s4 -> s10 [75, 75] { R1768 += 1, R1724 += 1, R88 += 1 };
  s4 -> s4 [76, 65535] { R1768 += 1, R1724 += 1, R88 += 1 };
  s7 -> s4 [0, 74] { R1768 += 1, R1724 += 1, R88 += 1 };
  s7 -> s7 [0, 65535] { R1768 += 1, R1724 += 1, R87 += 1, R88 += 1 };
  s7 -> s10 [75, 75] { R1768 += 1, R1724 += 1, R88 += 1 };
  s7 -> s4 [76, 65535] { R1768 += 1, R1724 += 1, R88 += 1 };
  s8 -> s8 [0, 69] { R1768 += 1, R1724 += 1, R88 += 1 };
  s8 -> s8 [0, 65535] { R1768 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [70, 70] { R1768 += 1, R1724 += 1, R88 += 1 };
  s8 -> s11 [70, 70] { R1768 += 1, R1724 += 1, R88 += 1 };
  s8 -> s8 [71, 65535] { R1768 += 1, R1724 += 1, R88 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R1768 += 1, R1724 += 1, R88 += 1 };
  s10 -> s12 [0, 65535] { R1768 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R1768 += 1 };
  s11 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R1768 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 69] { R1770 += 1, R1726 += 1, R91 += 1, R92 += 1 };
  s0 -> s2 [0, 65535] { R1770 += 1, R1725 += 1, R1726 += 1 };
  s0 -> s0 [0, 65535] { R1769 += 1, R1770 += 1 };
  s0 -> s3 [70, 70] { R1770 += 1, R1726 += 1, R91 += 1, R92 += 1 };
  s0 -> s4 [70, 70] { R1770 += 1, R1726 += 1, R91 += 1, R92 += 1 };
  s0 -> s1 [71, 65535] { R1770 += 1, R1726 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 69] { R1770 += 1, R1726 += 1, R91 += 1, R92 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1770 += 1 };
  s1 -> s3 [70, 70] { R1770 += 1, R1726 += 1, R91 += 1, R92 += 1 };
  s1 -> s4 [70, 70] { R1770 += 1, R1726 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [71, 65535] { R1770 += 1, R1726 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [0, 69] { R1770 += 1, R1726 += 1, R91 += 1, R92 += 1 };
  s2 -> s2 [0, 65535] { R1770 += 1, R1725 += 1, R1726 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [70, 70] { R1770 += 1, R1726 += 1, R91 += 1, R92 += 1 };
  s2 -> s4 [70, 70] { R1770 += 1, R1726 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [71, 65535] { R1770 += 1, R1726 += 1, R91 += 1, R92 += 1 };
  s3 -> s3 [0, 65535] { R1770 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1770 += 1, R1726 += 1, R91 += 1, R92 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R1770 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1770 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 69] { R1772 += 1, R1728 += 1, R97 += 1, R98 += 1 };
  s0 -> s2 [0, 65535] { R1772 += 1, R1727 += 1, R1728 += 1 };
  s0 -> s0 [0, 65535] { R1771 += 1, R1772 += 1 };
  s0 -> s3 [70, 70] { R1772 += 1, R1728 += 1, R97 += 1, R98 += 1 };
  s0 -> s4 [70, 70] { R1772 += 1, R1728 += 1, R97 += 1, R98 += 1 };
  s0 -> s1 [71, 65535] { R1772 += 1, R1728 += 1, R97 += 1, R98 += 1 };
  s1 -> s1 [0, 69] { R1772 += 1, R1728 += 1, R97 += 1, R98 += 1 };
  s1 -> s1 [0, 65535] { R1772 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [70, 70] { R1772 += 1, R1728 += 1, R97 += 1, R98 += 1 };
  s1 -> s4 [70, 70] { R1772 += 1, R1728 += 1, R97 += 1, R98 += 1 };
  s1 -> s1 [71, 65535] { R1772 += 1, R1728 += 1, R97 += 1, R98 += 1 };
  s2 -> s1 [0, 69] { R1772 += 1, R1728 += 1, R97 += 1, R98 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R1772 += 1, R1727 += 1, R1728 += 1 };
  s2 -> s3 [70, 70] { R1772 += 1, R1728 += 1, R97 += 1, R98 += 1 };
  s2 -> s4 [70, 70] { R1772 += 1, R1728 += 1, R97 += 1, R98 += 1 };
  s2 -> s1 [71, 65535] { R1772 += 1, R1728 += 1, R97 += 1, R98 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R1772 += 1 };
  s4 -> s5 [0, 65535] { R1772 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R1772 += 1, R1728 += 1, R97 += 1, R98 += 1 };
  s5 -> s5 [0, 65535] { R1772 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 69] { R1774 += 1, R1730 += 1, R1220 += 1, R1221 += 1, R1222 += 1 };
  s0 -> s2 [0, 69] { R1774 += 1, R1730 += 1, R1219 += 1, R1220 += 1 };
  s0 -> s3 [0, 69] { R1774 += 1, R1730 += 1, R1220 += 1, R1222 += 1 };
  s0 -> s0 [0, 65535] { R1773 += 1, R1774 += 1 };
  s0 -> s4 [0, 65535] { R1774 += 1, R1729 += 1, R1730 += 1 };
  s0 -> s5 [70, 70] { R1774 += 1, R1730 += 1, R1219 += 1, R1220 += 1 };
  s0 -> s6 [70, 70] { R1774 += 1, R1730 += 1, R1220 += 1, R1221 += 1, R1222 += 1 };
  s0 -> s7 [70, 70] { R1774 += 1, R1730 += 1, R1220 += 1, R1221 += 1, R1222 += 1 };
  s0 -> s8 [70, 70] { R1774 += 1, R1730 += 1, R1219 += 1, R1220 += 1 };
  s0 -> s9 [70, 70] { R1774 += 1, R1730 += 1, R1220 += 1, R1222 += 1 };
  s0 -> s10 [70, 70] { R1774 += 1, R1730 += 1, R1220 += 1, R1222 += 1 };
  s0 -> s3 [71, 74] { R1774 += 1, R1730 += 1, R1220 += 1, R1222 += 1 };
  s0 -> s1 [71, 65535] { R1774 += 1, R1730 += 1, R1220 += 1, R1221 += 1, R1222 += 1 };
  s0 -> s2 [71, 65535] { R1774 += 1, R1730 += 1, R1219 += 1, R1220 += 1 };
  s0 -> s11 [75, 75] { R1774 += 1, R1730 += 1, R1220 += 1, R1222 += 1 };
  s0 -> s3 [76, 65535] { R1774 += 1, R1730 += 1, R1220 += 1, R1222 += 1 };
  s1 -> s1 [0, 69] { R1774 += 1, R1730 += 1, R1220 += 1, R1221 += 1, R1222 += 1 };
  s1 -> s3 [0, 69] { R1774 += 1, R1730 += 1, R1220 += 1, R1222 += 1 };
  s1 -> s6 [70, 70] { R1774 += 1, R1730 += 1, R1220 += 1, R1221 += 1, R1222 += 1 };
  s1 -> s7 [70, 70] { R1774 += 1, R1730 += 1, R1220 += 1, R1221 += 1, R1222 += 1 };
  s1 -> s9 [70, 70] { R1774 += 1, R1730 += 1, R1220 += 1, R1222 += 1 };
  s1 -> s10 [70, 70] { R1774 += 1, R1730 += 1, R1220 += 1, R1222 += 1 };
  s1 -> s3 [71, 74] { R1774 += 1, R1730 += 1, R1220 += 1, R1222 += 1 };
  s1 -> s1 [71, 65535] { R1774 += 1, R1730 += 1, R1220 += 1, R1221 += 1, R1222 += 1 };
  s1 -> s11 [75, 75] { R1774 += 1, R1730 += 1, R1220 += 1, R1222 += 1 };
  s1 -> s3 [76, 65535] { R1774 += 1, R1730 += 1, R1220 += 1, R1222 += 1 };
  s2 -> s1 [0, 69] { R1774 += 1, R1730 += 1, R1220 += 1, R1221 += 1, R1222 += 1 };
  s2 -> s2 [0, 69] { R1774 += 1, R1730 += 1, R1219 += 1, R1220 += 1 };
  s2 -> s3 [0, 69] { R1774 += 1, R1730 += 1, R1220 += 1, R1222 += 1 };
  s2 -> s5 [70, 70] { R1774 += 1, R1730 += 1, R1219 += 1, R1220 += 1 };
  s2 -> s6 [70, 70] { R1774 += 1, R1730 += 1, R1220 += 1, R1221 += 1, R1222 += 1 };
  s2 -> s7 [70, 70] { R1774 += 1, R1730 += 1, R1220 += 1, R1221 += 1, R1222 += 1 };
  s2 -> s8 [70, 70] { R1774 += 1, R1730 += 1, R1219 += 1, R1220 += 1 };
  s2 -> s9 [70, 70] { R1774 += 1, R1730 += 1, R1220 += 1, R1222 += 1 };
  s2 -> s10 [70, 70] { R1774 += 1, R1730 += 1, R1220 += 1, R1222 += 1 };
  s2 -> s3 [71, 74] { R1774 += 1, R1730 += 1, R1220 += 1, R1222 += 1 };
  s2 -> s1 [71, 65535] { R1774 += 1, R1730 += 1, R1220 += 1, R1221 += 1, R1222 += 1 };
  s2 -> s2 [71, 65535] { R1774 += 1, R1730 += 1, R1219 += 1, R1220 += 1 };
  s2 -> s11 [75, 75] { R1774 += 1, R1730 += 1, R1220 += 1, R1222 += 1 };
  s2 -> s3 [76, 65535] { R1774 += 1, R1730 += 1, R1220 += 1, R1222 += 1 };
  s3 -> s3 [0, 69] { R1774 += 1, R1730 += 1, R1220 += 1, R1222 += 1 };
  s3 -> s9 [70, 70] { R1774 += 1, R1730 += 1, R1220 += 1, R1222 += 1 };
  s3 -> s10 [70, 70] { R1774 += 1, R1730 += 1, R1220 += 1, R1222 += 1 };
  s3 -> s3 [71, 74] { R1774 += 1, R1730 += 1, R1220 += 1, R1222 += 1 };
  s3 -> s11 [75, 75] { R1774 += 1, R1730 += 1, R1220 += 1, R1222 += 1 };
  s3 -> s3 [76, 65535] { R1774 += 1, R1730 += 1, R1220 += 1, R1222 += 1 };
  s4 -> s1 [0, 69] { R1774 += 1, R1730 += 1, R1220 += 1, R1221 += 1, R1222 += 1 };
  s4 -> s2 [0, 69] { R1774 += 1, R1730 += 1, R1219 += 1, R1220 += 1 };
  s4 -> s3 [0, 69] { R1774 += 1, R1730 += 1, R1220 += 1, R1222 += 1 };
  s4 -> s4 [0, 65535] { R1774 += 1, R1729 += 1, R1730 += 1 };
  s4 -> s5 [70, 70] { R1774 += 1, R1730 += 1, R1219 += 1, R1220 += 1 };
  s4 -> s6 [70, 70] { R1774 += 1, R1730 += 1, R1220 += 1, R1221 += 1, R1222 += 1 };
  s4 -> s7 [70, 70] { R1774 += 1, R1730 += 1, R1220 += 1, R1221 += 1, R1222 += 1 };
  s4 -> s8 [70, 70] { R1774 += 1, R1730 += 1, R1219 += 1, R1220 += 1 };
  s4 -> s9 [70, 70] { R1774 += 1, R1730 += 1, R1220 += 1, R1222 += 1 };
  s4 -> s10 [70, 70] { R1774 += 1, R1730 += 1, R1220 += 1, R1222 += 1 };
  s4 -> s3 [71, 74] { R1774 += 1, R1730 += 1, R1220 += 1, R1222 += 1 };
  s4 -> s1 [71, 65535] { R1774 += 1, R1730 += 1, R1220 += 1, R1221 += 1, R1222 += 1 };
  s4 -> s2 [71, 65535] { R1774 += 1, R1730 += 1, R1219 += 1, R1220 += 1 };
  s4 -> s11 [75, 75] { R1774 += 1, R1730 += 1, R1220 += 1, R1222 += 1 };
  s4 -> s3 [76, 65535] { R1774 += 1, R1730 += 1, R1220 += 1, R1222 += 1 };
  s7 -> s10 [0, 74] { R1774 += 1, R1730 += 1, R1220 += 1, R1222 += 1 };
  s7 -> s7 [0, 65535] { R1774 += 1, R1730 += 1, R1220 += 1, R1221 += 1, R1222 += 1 };
  s7 -> s14 [75, 75] { R1774 += 1, R1730 += 1, R1220 += 1, R1222 += 1 };
  s7 -> s10 [76, 65535] { R1774 += 1, R1730 += 1, R1220 += 1, R1222 += 1 };
  s8 -> s10 [0, 74] { R1774 += 1, R1730 += 1, R1220 += 1, R1222 += 1 };
  s8 -> s8 [0, 65535] { R1774 += 1, R1730 += 1, R1219 += 1, R1220 += 1 };
  s8 -> s7 [0, 65535] { R1774 += 1, R1730 += 1, R1220 += 1, R1221 += 1, R1222 += 1 };
  s8 -> s14 [75, 75] { R1774 += 1, R1730 += 1, R1220 += 1, R1222 += 1 };
  s8 -> s10 [76, 65535] { R1774 += 1, R1730 += 1, R1220 += 1, R1222 += 1 };
  s10 -> s10 [0, 74] { R1774 += 1, R1730 += 1, R1220 += 1, R1222 += 1 };
  s10 -> s14 [75, 75] { R1774 += 1, R1730 += 1, R1220 += 1, R1222 += 1 };
  s10 -> s10 [76, 65535] { R1774 += 1, R1730 += 1, R1220 += 1, R1222 += 1 };
  s11 -> s12 [0, 69] { R1774 += 1, R1730 += 1, R1220 += 1 };
  s11 -> s13 [0, 69] { R1774 += 1, R1730 += 1 };
  s11 -> s11 [0, 69] { R1774 += 1, R1730 += 1, R1220 += 1, R1222 += 1 };
  s11 -> s14 [70, 70] { R1774 += 1, R1730 += 1, R1220 += 1, R1222 += 1 };
  s11 -> s15 [70, 70] { R1774 += 1, R1730 += 1, R1220 += 1 };
  s11 -> s16 [70, 70] { R1774 += 1, R1730 += 1, R1220 += 1, R1222 += 1 };
  s11 -> s17 [70, 70] { R1774 += 1, R1730 += 1, R1220 += 1 };
  s11 -> s18 [70, 70] { R1774 += 1, R1730 += 1 };
  s11 -> s19 [70, 70] { R1774 += 1, R1730 += 1 };
  s11 -> s12 [71, 65535] { R1774 += 1, R1730 += 1, R1220 += 1 };
  s11 -> s13 [71, 65535] { R1774 += 1, R1730 += 1 };
  s11 -> s11 [71, 65535] { R1774 += 1, R1730 += 1, R1220 += 1, R1222 += 1 };
  s12 -> s12 [0, 69] { R1774 += 1, R1730 += 1, R1220 += 1 };
  s12 -> s13 [0, 69] { R1774 += 1, R1730 += 1 };
  s12 -> s15 [70, 70] { R1774 += 1, R1730 += 1, R1220 += 1 };
  s12 -> s17 [70, 70] { R1774 += 1, R1730 += 1, R1220 += 1 };
  s12 -> s18 [70, 70] { R1774 += 1, R1730 += 1 };
  s12 -> s19 [70, 70] { R1774 += 1, R1730 += 1 };
  s12 -> s12 [71, 65535] { R1774 += 1, R1730 += 1, R1220 += 1 };
  s12 -> s13 [71, 65535] { R1774 += 1, R1730 += 1 };
  s13 -> s13 [0, 69] { R1774 += 1, R1730 += 1 };
  s13 -> s21 [0, 65535];
  s13 -> s13 [0, 65535] { R1774 += 1 };
  s13 -> s18 [70, 70] { R1774 += 1, R1730 += 1 };
  s13 -> s19 [70, 70] { R1774 += 1, R1730 += 1 };
  s13 -> s13 [71, 65535] { R1774 += 1, R1730 += 1 };
  s14 -> s14 [0, 65535] { R1774 += 1, R1730 += 1, R1220 += 1, R1222 += 1 };
  s14 -> s15 [0, 65535] { R1774 += 1, R1730 += 1, R1220 += 1 };
  s14 -> s19 [0, 65535] { R1774 += 1, R1730 += 1 };
  s15 -> s15 [0, 65535] { R1774 += 1, R1730 += 1, R1220 += 1 };
  s15 -> s19 [0, 65535] { R1774 += 1, R1730 += 1 };
  s18 -> s21 [0, 65535];
  s18 -> s18 [0, 65535] { R1774 += 1 };
  s19 -> s20 [0, 65535] { R1774 += 1 };
  s19 -> s21 [0, 65535];
  s19 -> s19 [0, 65535] { R1774 += 1, R1730 += 1 };
  s20 -> s20 [0, 65535] { R1774 += 1 };
  s20 -> s21 [0, 65535];
  s21 -> s21 [0, 65535];
  accepting s19, s13, s21, s20, s18;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 69] { R1776 += 1, R1732 += 1, R1668 += 1, R1669 += 1, R1670 += 1 };
  s0 -> s2 [0, 69] { R1776 += 1, R1732 += 1, R1667 += 1, R1668 += 1 };
  s0 -> s0 [0, 65535] { R1775 += 1, R1776 += 1 };
  s0 -> s3 [0, 65535] { R1776 += 1, R1731 += 1, R1732 += 1 };
  s0 -> s4 [70, 70] { R1776 += 1, R1732 += 1, R1668 += 1, R1669 += 1, R1670 += 1 };
  s0 -> s5 [70, 70] { R1776 += 1, R1732 += 1, R1667 += 1, R1668 += 1 };
  s0 -> s6 [70, 70] { R1776 += 1, R1732 += 1, R1667 += 1, R1668 += 1 };
  s0 -> s7 [70, 70] { R1776 += 1, R1732 += 1, R1668 += 1, R1669 += 1, R1670 += 1 };
  s0 -> s1 [71, 65535] { R1776 += 1, R1732 += 1, R1668 += 1, R1669 += 1, R1670 += 1 };
  s0 -> s2 [71, 65535] { R1776 += 1, R1732 += 1, R1667 += 1, R1668 += 1 };
  s1 -> s1 [0, 69] { R1776 += 1, R1732 += 1, R1668 += 1, R1669 += 1, R1670 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s1 [0, 65535] { R1776 += 1 };
  s1 -> s4 [70, 70] { R1776 += 1, R1732 += 1, R1668 += 1, R1669 += 1, R1670 += 1 };
  s1 -> s7 [70, 70] { R1776 += 1, R1732 += 1, R1668 += 1, R1669 += 1, R1670 += 1 };
  s1 -> s1 [71, 65535] { R1776 += 1, R1732 += 1, R1668 += 1, R1669 += 1, R1670 += 1 };
  s2 -> s1 [0, 69] { R1776 += 1, R1732 += 1, R1668 += 1, R1669 += 1, R1670 += 1 };
  s2 -> s2 [0, 69] { R1776 += 1, R1732 += 1, R1667 += 1, R1668 += 1 };
  s2 -> s4 [70, 70] { R1776 += 1, R1732 += 1, R1668 += 1, R1669 += 1, R1670 += 1 };
  s2 -> s5 [70, 70] { R1776 += 1, R1732 += 1, R1667 += 1, R1668 += 1 };
  s2 -> s6 [70, 70] { R1776 += 1, R1732 += 1, R1667 += 1, R1668 += 1 };
  s2 -> s7 [70, 70] { R1776 += 1, R1732 += 1, R1668 += 1, R1669 += 1, R1670 += 1 };
  s2 -> s1 [71, 65535] { R1776 += 1, R1732 += 1, R1668 += 1, R1669 += 1, R1670 += 1 };
  s2 -> s2 [71, 65535] { R1776 += 1, R1732 += 1, R1667 += 1, R1668 += 1 };
  s3 -> s1 [0, 69] { R1776 += 1, R1732 += 1, R1668 += 1, R1669 += 1, R1670 += 1 };
  s3 -> s2 [0, 69] { R1776 += 1, R1732 += 1, R1667 += 1, R1668 += 1 };
  s3 -> s3 [0, 65535] { R1776 += 1, R1731 += 1, R1732 += 1 };
  s3 -> s4 [70, 70] { R1776 += 1, R1732 += 1, R1668 += 1, R1669 += 1, R1670 += 1 };
  s3 -> s5 [70, 70] { R1776 += 1, R1732 += 1, R1667 += 1, R1668 += 1 };
  s3 -> s6 [70, 70] { R1776 += 1, R1732 += 1, R1667 += 1, R1668 += 1 };
  s3 -> s7 [70, 70] { R1776 += 1, R1732 += 1, R1668 += 1, R1669 += 1, R1670 += 1 };
  s3 -> s1 [71, 65535] { R1776 += 1, R1732 += 1, R1668 += 1, R1669 += 1, R1670 += 1 };
  s3 -> s2 [71, 65535] { R1776 += 1, R1732 += 1, R1667 += 1, R1668 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s4 [0, 65535] { R1776 += 1 };
  s6 -> s6 [0, 65535] { R1776 += 1, R1732 += 1, R1667 += 1, R1668 += 1 };
  s6 -> s7 [0, 65535] { R1776 += 1, R1732 += 1, R1668 += 1, R1669 += 1, R1670 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s9 [0, 65535] { R1776 += 1 };
  s7 -> s7 [0, 65535] { R1776 += 1, R1732 += 1, R1668 += 1, R1669 += 1, R1670 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R1776 += 1 };
  accepting s4, s8, s9, s1, s7;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [102, 102];
  accepting s1;
};
};
constraint R3 = R1776 && R23 - R1776 = -1 && R24 = R1776 && R25 - R1776 = -1 && R26 = R1776 && R27 = 0 && R28 = 1 && R29 = 0 && R30 = 1 && R45 + R84 + R83 + -1*R1224 + -1*R1220 - R66 = 0 && R49 + R89 + R87 = 0 && R50 + R90 + R88 + -1*R1224 + -1*R1220 - R66 = 0 && R55 + R96 + R93 + -1*R1226 + -1*R1222 - R68 = 0 && R65 + R1223 + R1219 = 0 && R67 + R1225 + R1221 = 0 && R1717 = 0 && R1718 = 0 && R1723 = 0 && R1724 = 0 && R1729 = 0 && R1730 = 0 && R1731 = 0 && R1732 = 0 && R1733 = 0 && R1734 = R1776 && R1735 = 0 && R1736 = R1776 && R1737 = 0 && R1738 = R1776 && R1739 = 0 && R1740 = R1776 && R1741 = 0 && R1742 = R1776 && R1743 = 0 && R1744 = R1776 && R1745 = 0 && R1746 = R1776 && R1747 = 0 && R1748 = R1776 && R1749 = 0 && R1750 = R1776 && R1751 = 0 && R1752 = R1776 && R1753 = 0 && R1754 = R1776 && R1755 = 0 && R1756 = R1776 && R1757 = 0 && R1758 = R1776 && R1759 = 0 && R1760 = R1776 && R1761 = 0 && R1762 = R1776 && R1763 = 0 && R1764 = R1776 && R1765 = 0 && R1766 = R1776 && R1767 = 0 && R1768 = R1776 && R1769 = 0 && R1770 = R1776 && R1771 = 0 && R1772 = R1776 && R1773 = 0 && R1774 = R1776 && R1775 = 0 && -1 < R2 && R12 < 1 && R15 < 1 && R16 < 1 && R47 + R86 + R85 < 1 && R61 + R102 + R99 < 1 && -1*R1224 + -1*R1220 - R66 < 1 && -1*R1226 + -1*R1222 - R68 < 1 && 0 < R1776 && (R2 != 0 || R20 = 0 || (R1677 = 0 && R1678 = 0)) && (R2 != 0 || R20 = 0 || (R1679 = 0 && R1680 = 0)) && (R2 != 0 || R20 = 0 || (R1681 = 0 && R1682 = 0)) && (R2 != 0 || R20 = 0 || (R1683 = 0 && R1684 = 0)) && (R2 != 0 || R20 = 0 || (R1685 = 0 && R1686 = 0)) && (R2 != 0 || R20 = 0 || (R1687 = 0 && R1688 = 0)) && (R2 != 0 || R20 = 0 || (R1689 = 0 && R1690 = 0)) && (R2 != 0 || R20 = 0 || (R1691 = 0 && R1692 = 0)) && (R2 != 0 || R20 = 0 || (R1693 = 0 && R1694 = 0)) && (R2 != 0 || R20 = 0 || (R1695 = 0 && R1696 = 0)) && (R53 + R94 + R91 != 0 || R54 + R95 + R92 + -1*R1224 + -1*R1220 - R66 = 0 || R66 + R1224 + R1220 < 1) && (R59 + R100 + R97 != 0 || R60 + R101 + R98 + -1*R1224 + -1*R1220 - R66 = 0 || R66 + R1224 + R1220 < 1) && (R66 + R1224 + R1220 != 0 || ((R53 + R94 + R91 != 0 || R54 + R95 + R92 = 0 || R68 + R1226 + R1222 < 1) && (R53 + R94 + R91 = 0 || R68 + R1226 + R1222 < 1))) && (R66 + R1224 + R1220 != 0 || ((R59 + R100 + R97 != 0 || R60 + R101 + R98 = 0 || R68 + R1226 + R1222 < 1) && (R59 + R100 + R97 = 0 || R68 + R1226 + R1222 < 1))) && (R66 + R1224 + R1220 != 0 || ((R73 + R1672 + R1667 != 0 || R74 + R1673 + R1668 = 0 || R68 + R1226 + R1222 < 1) && (R73 + R1672 + R1667 = 0 || R68 + R1226 + R1222 < 1))) && (R68 + R1226 + R1222 != 0 || R77 + R1676 + R1671 = 0 || (R75 + R1674 + R1669 = 0 && R76 + R1675 + R1670 = 0)) && (R73 + R1672 + R1667 != 0 || R66 + R1224 + R1220 + -1*R1673 + -1*R1668 - R74 = 0 || R66 + R1224 + R1220 < 1) && (R75 + R1674 + R1669 != 0 || R68 + R1226 + R1222 + -1*R1675 + -1*R1670 - R76 = 0 || R68 + R1226 + R1222 < 1) && (R1677 != 0 || R2 = R1678 || R2 < 1) && (R1679 != 0 || R2 = R1680 || R2 < 1) && (R1681 != 0 || R2 = R1682 || R2 < 1) && (R1683 != 0 || R2 = R1684 || R2 < 1) && (R1685 != 0 || R2 = R1686 || R2 < 1) && (R1687 != 0 || R2 = R1688 || R2 < 1) && (R1689 != 0 || R2 = R1690 || R2 < 1) && (R1691 != 0 || R2 = R1692 || R2 < 1) && (R1693 != 0 || R2 = R1694 || R2 < 1) && (R1695 != 0 || R2 = R1696 || R2 < 1) && (R21 = 0 || (R1715 = 0 && R1716 = 0)) && (R21 = 0 || (R1719 = 0 && R1720 = 0)) && (R21 = 0 || (R1721 = 0 && R1722 = 0)) && (R21 = 0 || (R1725 = 0 && R1726 = 0)) && (R21 = 0 || (R1727 = 0 && R1728 = 0)) && (R22 = 0 || (R1697 = 0 && R1698 = 0)) && (R22 = 0 || (R1699 = 0 && R1700 = 0)) && (R22 = 0 || (R1701 = 0 && R1702 = 0)) && (R22 = 0 || (R1703 = 0 && R1704 = 0)) && (R22 = 0 || (R1705 = 0 && R1706 = 0)) && (R22 = 0 || (R1707 = 0 && R1708 = 0)) && (R22 = 0 || (R1709 = 0 && R1710 = 0)) && (R22 = 0 || (R1711 = 0 && R1712 = 0)) && (R22 = 0 || (R1713 = 0 && R1714 = 0)) && (R53 + R94 + R91 = 0 || R66 + R1224 + R1220 < 1) && (R59 + R100 + R97 = 0 || R66 + R1224 + R1220 < 1) && (R73 + R1672 + R1667 = 0 || R66 + R1224 + R1220 < 1) && (R75 + R1674 + R1669 = 0 || R68 + R1226 + R1222 < 1) && (R1677 = 0 || R2 < 1) && (R1679 = 0 || R2 < 1) && (R1681 = 0 || R2 < 1) && (R1683 = 0 || R2 < 1) && (R1685 = 0 || R2 < 1) && (R1687 = 0 || R2 < 1) && (R1689 = 0 || R2 < 1) && (R1691 = 0 || R2 < 1) && (R1693 = 0 || R2 < 1) && (R1695 = 0 || R2 < 1);
// End of Parikh automata intersection problem
