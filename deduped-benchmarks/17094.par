// Parikh automata intersection problem, generated by OSTRICH+
counter int R100, R101, R102, R12, R15, R16, R2, R20, R21, R22, R23, R24, R25, R26, R27, R28, R2893, R2894, R2895, R2896, R2897, R2898, R2899, R29, R2900, R3, R30, R3231, R3232, R3233, R3234, R3235, R3236, R3237, R3238, R3239, R3240, R3241, R3242, R3243, R3244, R3245, R3246, R3247, R3248, R3249, R3250, R3251, R3252, R3253, R3254, R3255, R3256, R3257, R3258, R3259, R3260, R3261, R3262, R3263, R3264, R3265, R3266, R3267, R3268, R3269, R3270, R3271, R3272, R3273, R3274, R3275, R3276, R3277, R3278, R3279, R3280, R3281, R3282, R3283, R3284, R3285, R3286, R3287, R3288, R3289, R3290, R3291, R3292, R3293, R3294, R3295, R3296, R3297, R3298, R3299, R3300, R3301, R3302, R3303, R3304, R3305, R3306, R3307, R3308, R3309, R3310, R3311, R3312, R3313, R3314, R3315, R3316, R3317, R3318, R3319, R3320, R3321, R3322, R3323, R3324, R3325, R3326, R3327, R3328, R3329, R3330, R3331, R3332, R3333, R3334, R3335, R3336, R3337, R3338, R3339, R3340, R4, R45, R47, R49, R5, R50, R53, R54, R55, R59, R60, R61, R65, R66, R67, R68, R73, R74, R75, R76, R77, R83, R84, R85, R86, R87, R88, R89, R90, R91, R92, R93, R94, R95, R96, R97, R98, R99;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [70, 70];
  s0 -> s0 [71, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [70, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R15 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 69];
  s0 -> s0 [0, 65535] { R16 += 1 };
  s0 -> s2 [70, 70];
  s0 -> s1 [71, 65535];
  s1 -> s1 [0, 69];
  s1 -> s2 [70, 70];
  s1 -> s1 [71, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R24 += 1 };
  s0 -> s0 [0, 65535] { R23 += 1, R24 += 1 };
  s0 -> s2 [9, 13] { R24 += 1 };
  s0 -> s1 [14, 31] { R24 += 1 };
  s0 -> s2 [32, 32] { R24 += 1 };
  s0 -> s1 [33, 65535] { R24 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R24 += 1 };
  s2 -> s1 [0, 65535] { R24 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R25 += 1, R26 += 1 };
  s1 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R28 += 1 };
  s0 -> s0 [0, 65535] { R27 += 1, R28 += 1 };
  s0 -> s2 [9, 13] { R28 += 1 };
  s0 -> s1 [14, 31] { R28 += 1 };
  s0 -> s2 [32, 32] { R28 += 1 };
  s0 -> s1 [33, 65535] { R28 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R28 += 1 };
  s2 -> s1 [0, 65535] { R28 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R29 += 1, R30 += 1 };
  s1 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R3262 += 1, R22 += 1 };
  s0 -> s0 [0, 65535] { R3261 += 1, R3262 += 1 };
  s1 -> s1 [0, 65535] { R3262 += 1, R22 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 69] { R3264 += 1 };
  s0 -> s0 [0, 65535] { R3263 += 1, R3264 += 1 };
  s0 -> s2 [70, 70] { R3264 += 1 };
  s0 -> s3 [70, 70] { R3264 += 1 };
  s0 -> s1 [76, 65535] { R3264 += 1 };
  s1 -> s1 [0, 69] { R3264 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R3264 += 1 };
  s1 -> s3 [70, 70] { R3264 += 1 };
  s1 -> s1 [76, 65535] { R3264 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 70] { R3264 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [76, 65535] { R3264 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 69] { R3266 += 1, R45 += 1 };
  s0 -> s0 [0, 65535] { R3265 += 1, R3266 += 1 };
  s0 -> s2 [70, 70] { R3266 += 1, R45 += 1 };
  s0 -> s3 [70, 70] { R3266 += 1, R45 += 1 };
  s0 -> s1 [71, 65535] { R3266 += 1, R45 += 1 };
  s1 -> s1 [0, 69] { R3266 += 1, R45 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R3266 += 1, R45 += 1 };
  s1 -> s3 [70, 70] { R3266 += 1, R45 += 1 };
  s1 -> s1 [71, 65535] { R3266 += 1, R45 += 1 };
  s2 -> s2 [0, 65535] { R3266 += 1, R45 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 69] { R3268 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R3267 += 1, R3268 += 1 };
  s0 -> s2 [70, 70] { R3268 += 1, R47 += 1 };
  s0 -> s3 [70, 70] { R3268 += 1, R47 += 1 };
  s0 -> s1 [71, 65535] { R3268 += 1, R47 += 1 };
  s1 -> s1 [0, 69] { R3268 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R3268 += 1, R47 += 1 };
  s1 -> s3 [70, 70] { R3268 += 1, R47 += 1 };
  s1 -> s1 [71, 65535] { R3268 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3268 += 1, R47 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 69] { R3270 += 1, R49 += 1, R50 += 1 };
  s0 -> s0 [0, 65535] { R3269 += 1, R3270 += 1 };
  s0 -> s2 [70, 70] { R3270 += 1, R49 += 1, R50 += 1 };
  s0 -> s3 [70, 70] { R3270 += 1, R49 += 1, R50 += 1 };
  s0 -> s1 [71, 65535] { R3270 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 69] { R3270 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R3270 += 1, R49 += 1, R50 += 1 };
  s1 -> s3 [70, 70] { R3270 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [71, 65535] { R3270 += 1, R49 += 1, R50 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3270 += 1, R49 += 1, R50 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 69] { R3272 += 1, R53 += 1, R54 += 1 };
  s0 -> s0 [0, 65535] { R3271 += 1, R3272 += 1 };
  s0 -> s2 [70, 70] { R3272 += 1, R53 += 1, R54 += 1 };
  s0 -> s3 [70, 70] { R3272 += 1, R53 += 1, R54 += 1 };
  s0 -> s1 [71, 65535] { R3272 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 69] { R3272 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R3272 += 1, R53 += 1, R54 += 1 };
  s1 -> s3 [70, 70] { R3272 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [71, 65535] { R3272 += 1, R53 += 1, R54 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R3272 += 1, R53 += 1, R54 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 69] { R3274 += 1, R59 += 1, R60 += 1 };
  s0 -> s0 [0, 65535] { R3273 += 1, R3274 += 1 };
  s0 -> s2 [70, 70] { R3274 += 1, R59 += 1, R60 += 1 };
  s0 -> s3 [70, 70] { R3274 += 1, R59 += 1, R60 += 1 };
  s0 -> s1 [71, 65535] { R3274 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 69] { R3274 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R3274 += 1, R59 += 1, R60 += 1 };
  s1 -> s3 [70, 70] { R3274 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [71, 65535] { R3274 += 1, R59 += 1, R60 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3274 += 1, R59 += 1, R60 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 69] { R3276 += 1, R65 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R3275 += 1, R3276 += 1 };
  s0 -> s2 [70, 70] { R3276 += 1, R65 += 1, R66 += 1 };
  s0 -> s3 [70, 70] { R3276 += 1, R65 += 1, R66 += 1 };
  s0 -> s1 [71, 65535] { R3276 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 69] { R3276 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R3276 += 1, R65 += 1, R66 += 1 };
  s1 -> s3 [70, 70] { R3276 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [71, 65535] { R3276 += 1, R65 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R3276 += 1, R65 += 1, R66 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 69] { R3278 += 1, R73 += 1, R74 += 1 };
  s0 -> s0 [0, 65535] { R3277 += 1, R3278 += 1 };
  s0 -> s2 [70, 70] { R3278 += 1, R73 += 1, R74 += 1 };
  s0 -> s3 [70, 70] { R3278 += 1, R73 += 1, R74 += 1 };
  s0 -> s1 [71, 65535] { R3278 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 69] { R3278 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R3278 += 1, R73 += 1, R74 += 1 };
  s1 -> s3 [70, 70] { R3278 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [71, 65535] { R3278 += 1, R73 += 1, R74 += 1 };
  s2 -> s2 [0, 65535] { R3278 += 1, R73 += 1, R74 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 69] { R3298 += 1 };
  s0 -> s0 [0, 65535] { R3297 += 1, R3298 += 1 };
  s0 -> s2 [70, 70] { R3298 += 1 };
  s0 -> s1 [71, 65535] { R3298 += 1 };
  s1 -> s1 [0, 69] { R3298 += 1 };
  s1 -> s2 [70, 70] { R3298 += 1 };
  s1 -> s1 [71, 65535] { R3298 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3298 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R3299 += 1, R3300 += 1 };
  s0 -> s1 [0, 65535] { R3300 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R3300 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 69] { R3302 += 1 };
  s0 -> s2 [0, 65535] { R3302 += 1, R12 += 1 };
  s0 -> s0 [0, 65535] { R3301 += 1, R3302 += 1 };
  s0 -> s3 [70, 70] { R3302 += 1 };
  s0 -> s1 [71, 65535] { R3302 += 1 };
  s1 -> s1 [0, 69] { R3302 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [70, 70] { R3302 += 1 };
  s1 -> s1 [71, 65535] { R3302 += 1 };
  s2 -> s1 [0, 69] { R3302 += 1 };
  s2 -> s2 [0, 65535] { R3302 += 1, R12 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [70, 70] { R3302 += 1 };
  s2 -> s1 [71, 65535] { R3302 += 1 };
  s3 -> s3 [0, 65535] { R3302 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 69] { R3304 += 1, R3242 += 1 };
  s0 -> s2 [0, 65535] { R3304 += 1, R3241 += 1, R3242 += 1 };
  s0 -> s0 [0, 65535] { R3303 += 1, R3304 += 1 };
  s0 -> s1 [71, 65535] { R3304 += 1, R3242 += 1 };
  s1 -> s1 [0, 69] { R3304 += 1, R3242 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3304 += 1 };
  s1 -> s1 [71, 65535] { R3304 += 1, R3242 += 1 };
  s2 -> s1 [0, 69] { R3304 += 1, R3242 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3304 += 1, R3241 += 1, R3242 += 1 };
  s2 -> s1 [71, 65535] { R3304 += 1, R3242 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R3306 += 1, R3244 += 1, R20 += 1 };
  s0 -> s0 [0, 65535] { R3305 += 1, R3306 += 1 };
  s0 -> s2 [0, 65535] { R3306 += 1, R3243 += 1, R3244 += 1 };
  s1 -> s4 [0, 65535] { R3306 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3306 += 1, R3244 += 1, R20 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3306 += 1, R3244 += 1, R20 += 1 };
  s2 -> s2 [0, 65535] { R3306 += 1, R3243 += 1, R3244 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3306 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 70] { R3308 += 1, R3246 += 1 };
  s0 -> s0 [0, 65535] { R3307 += 1, R3308 += 1 };
  s0 -> s2 [0, 65535] { R3308 += 1, R3245 += 1, R3246 += 1 };
  s0 -> s1 [75, 65535] { R3308 += 1, R3246 += 1 };
  s1 -> s1 [0, 70] { R3308 += 1, R3246 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3308 += 1 };
  s1 -> s1 [75, 65535] { R3308 += 1, R3246 += 1 };
  s2 -> s1 [0, 70] { R3308 += 1, R3246 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3308 += 1, R3245 += 1, R3246 += 1 };
  s2 -> s1 [75, 65535] { R3308 += 1, R3246 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s0 [0, 65535] { R3309 += 1, R3310 += 1 };
  s0 -> s1 [0, 65535] { R3310 += 1, R3248 += 1, R84 += 1 };
  s0 -> s2 [0, 65535] { R3310 += 1, R3247 += 1, R3248 += 1 };
  s1 -> s1 [0, 65535] { R3310 += 1, R3248 += 1, R84 += 1 };
  s1 -> s4 [0, 65535] { R3310 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3310 += 1, R3248 += 1, R84 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3310 += 1, R3247 += 1, R3248 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3310 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 74] { R3312 += 1, R3250 += 1 };
  s0 -> s0 [0, 65535] { R3311 += 1, R3312 += 1 };
  s0 -> s2 [0, 65535] { R3312 += 1, R3249 += 1, R3250 += 1 };
  s0 -> s3 [0, 65535] { R3312 += 1, R3250 += 1, R86 += 1 };
  s0 -> s1 [76, 65535] { R3312 += 1, R3250 += 1 };
  s1 -> s1 [0, 74] { R3312 += 1, R3250 += 1 };
  s1 -> s1 [0, 65535] { R3312 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [76, 65535] { R3312 += 1, R3250 += 1 };
  s2 -> s1 [0, 74] { R3312 += 1, R3250 += 1 };
  s2 -> s2 [0, 65535] { R3312 += 1, R3249 += 1, R3250 += 1 };
  s2 -> s3 [0, 65535] { R3312 += 1, R3250 += 1, R86 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [76, 65535] { R3312 += 1, R3250 += 1 };
  s3 -> s1 [0, 74] { R3312 += 1, R3250 += 1 };
  s3 -> s4 [0, 65535] { R3312 += 1 };
  s3 -> s3 [0, 65535] { R3312 += 1, R3250 += 1, R86 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [76, 65535] { R3312 += 1, R3250 += 1 };
  s4 -> s4 [0, 65535] { R3312 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 65535] { R3314 += 1, R3252 += 1 };
  s0 -> s0 [0, 65535] { R3313 += 1, R3314 += 1 };
  s0 -> s2 [0, 65535] { R3314 += 1, R3251 += 1, R3252 += 1 };
  s0 -> s3 [0, 65535] { R3314 += 1, R3252 += 1, R90 += 1 };
  s1 -> s1 [0, 65535] { R3314 += 1, R3252 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R3314 += 1 };
  s2 -> s1 [0, 65535] { R3314 += 1, R3252 += 1 };
  s2 -> s2 [0, 65535] { R3314 += 1, R3251 += 1, R3252 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R3314 += 1, R3252 += 1, R90 += 1 };
  s3 -> s1 [0, 65535] { R3314 += 1, R3252 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R3314 += 1 };
  s3 -> s3 [0, 65535] { R3314 += 1, R3252 += 1, R90 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3314 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s0 [0, 65535] { R3315 += 1, R3316 += 1 };
  s0 -> s1 [0, 65535] { R3316 += 1, R3254 += 1, R95 += 1, R96 += 1 };
  s0 -> s2 [0, 65535] { R3316 += 1, R3253 += 1, R3254 += 1 };
  s0 -> s3 [0, 65535] { R3316 += 1, R3254 += 1, R94 += 1, R95 += 1 };
  s1 -> s1 [0, 65535] { R3316 += 1, R3254 += 1, R95 += 1, R96 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R3316 += 1, R3254 += 1 };
  s1 -> s5 [0, 65535] { R3316 += 1 };
  s2 -> s1 [0, 65535] { R3316 += 1, R3254 += 1, R95 += 1, R96 += 1 };
  s2 -> s2 [0, 65535] { R3316 += 1, R3253 += 1, R3254 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R3316 += 1, R3254 += 1, R94 += 1, R95 += 1 };
  s3 -> s1 [0, 65535] { R3316 += 1, R3254 += 1, R95 += 1, R96 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R3316 += 1 };
  s3 -> s3 [0, 65535] { R3316 += 1, R3254 += 1, R94 += 1, R95 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3316 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R3316 += 1, R3254 += 1 };
  s6 -> s5 [0, 65535] { R3316 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 74] { R3318 += 1, R3256 += 1, R101 += 1 };
  s0 -> s2 [0, 65535] { R3318 += 1, R3255 += 1, R3256 += 1 };
  s0 -> s0 [0, 65535] { R3317 += 1, R3318 += 1 };
  s0 -> s3 [0, 65535] { R3318 += 1, R3256 += 1, R100 += 1, R101 += 1 };
  s0 -> s4 [0, 65535] { R3318 += 1, R3256 += 1, R101 += 1, R102 += 1 };
  s0 -> s1 [76, 65535] { R3318 += 1, R3256 += 1, R101 += 1 };
  s1 -> s1 [0, 74] { R3318 += 1, R3256 += 1, R101 += 1 };
  s1 -> s1 [0, 65535] { R3318 += 1, R3256 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R3318 += 1 };
  s1 -> s1 [76, 65535] { R3318 += 1, R3256 += 1, R101 += 1 };
  s2 -> s1 [0, 74] { R3318 += 1, R3256 += 1, R101 += 1 };
  s2 -> s2 [0, 65535] { R3318 += 1, R3255 += 1, R3256 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R3318 += 1, R3256 += 1, R100 += 1, R101 += 1 };
  s2 -> s4 [0, 65535] { R3318 += 1, R3256 += 1, R101 += 1, R102 += 1 };
  s2 -> s1 [76, 65535] { R3318 += 1, R3256 += 1, R101 += 1 };
  s3 -> s1 [0, 74] { R3318 += 1, R3256 += 1, R101 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s7 [0, 65535] { R3318 += 1 };
  s3 -> s3 [0, 65535] { R3318 += 1, R3256 += 1, R100 += 1, R101 += 1 };
  s3 -> s4 [0, 65535] { R3318 += 1, R3256 += 1, R101 += 1, R102 += 1 };
  s3 -> s1 [76, 65535] { R3318 += 1, R3256 += 1, R101 += 1 };
  s4 -> s1 [0, 74] { R3318 += 1, R3256 += 1, R101 += 1 };
  s4 -> s5 [0, 65535] { R3318 += 1, R3256 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R3318 += 1 };
  s4 -> s4 [0, 65535] { R3318 += 1, R3256 += 1, R101 += 1, R102 += 1 };
  s4 -> s1 [76, 65535] { R3318 += 1, R3256 += 1, R101 += 1 };
  s5 -> s5 [0, 65535] { R3318 += 1, R3256 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R3318 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R3318 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 74] { R3320 += 1, R3258 += 1, R2898 += 1, R2900 += 1 };
  s0 -> s0 [0, 65535] { R3319 += 1, R3320 += 1 };
  s0 -> s2 [0, 65535] { R3320 += 1, R3257 += 1, R3258 += 1 };
  s0 -> s3 [0, 65535] { R3320 += 1, R3258 += 1, R2898 += 1, R2899 += 1, R2900 += 1 };
  s0 -> s4 [75, 75] { R3320 += 1, R3258 += 1, R2898 += 1, R2900 += 1 };
  s0 -> s1 [76, 65535] { R3320 += 1, R3258 += 1, R2898 += 1, R2900 += 1 };
  s1 -> s1 [0, 74] { R3320 += 1, R3258 += 1, R2898 += 1, R2900 += 1 };
  s1 -> s4 [75, 75] { R3320 += 1, R3258 += 1, R2898 += 1, R2900 += 1 };
  s1 -> s1 [76, 65535] { R3320 += 1, R3258 += 1, R2898 += 1, R2900 += 1 };
  s2 -> s1 [0, 74] { R3320 += 1, R3258 += 1, R2898 += 1, R2900 += 1 };
  s2 -> s2 [0, 65535] { R3320 += 1, R3257 += 1, R3258 += 1 };
  s2 -> s3 [0, 65535] { R3320 += 1, R3258 += 1, R2898 += 1, R2899 += 1, R2900 += 1 };
  s2 -> s4 [75, 75] { R3320 += 1, R3258 += 1, R2898 += 1, R2900 += 1 };
  s2 -> s1 [76, 65535] { R3320 += 1, R3258 += 1, R2898 += 1, R2900 += 1 };
  s3 -> s1 [0, 74] { R3320 += 1, R3258 += 1, R2898 += 1, R2900 += 1 };
  s3 -> s3 [0, 65535] { R3320 += 1, R3258 += 1, R2898 += 1, R2899 += 1, R2900 += 1 };
  s3 -> s4 [75, 75] { R3320 += 1, R3258 += 1, R2898 += 1, R2900 += 1 };
  s3 -> s1 [76, 65535] { R3320 += 1, R3258 += 1, R2898 += 1, R2900 += 1 };
  s4 -> s5 [0, 65535] { R3320 += 1, R3258 += 1 };
  s4 -> s6 [0, 65535] { R3320 += 1 };
  s4 -> s7 [0, 65535] { R3320 += 1, R3258 += 1, R2898 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s4 [0, 65535] { R3320 += 1, R3258 += 1, R2898 += 1, R2900 += 1 };
  s5 -> s5 [0, 65535] { R3320 += 1, R3258 += 1 };
  s5 -> s6 [0, 65535] { R3320 += 1 };
  s5 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R3320 += 1 };
  s6 -> s8 [0, 65535];
  s7 -> s5 [0, 65535] { R3320 += 1, R3258 += 1 };
  s7 -> s6 [0, 65535] { R3320 += 1 };
  s7 -> s7 [0, 65535] { R3320 += 1, R3258 += 1, R2898 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  accepting s4, s8, s5, s6, s7;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 65535] { R3322 += 1, R3260 += 1, R3237 += 1, R3239 += 1, R3240 += 1 };
  s0 -> s2 [0, 65535] { R3322 += 1, R3260 += 1, R3237 += 1 };
  s0 -> s0 [0, 65535] { R3321 += 1, R3322 += 1 };
  s0 -> s3 [0, 65535] { R3322 += 1, R3260 += 1 };
  s0 -> s4 [0, 65535] { R3322 += 1, R3259 += 1, R3260 += 1 };
  s1 -> s1 [0, 65535] { R3322 += 1, R3260 += 1, R3237 += 1, R3239 += 1, R3240 += 1 };
  s1 -> s2 [0, 65535] { R3322 += 1, R3260 += 1, R3237 += 1 };
  s1 -> s3 [0, 65535] { R3322 += 1, R3260 += 1 };
  s1 -> s6 [0, 65535] { R3322 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3322 += 1, R3260 += 1, R3237 += 1 };
  s2 -> s3 [0, 65535] { R3322 += 1, R3260 += 1 };
  s2 -> s6 [0, 65535] { R3322 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R3322 += 1, R3260 += 1 };
  s3 -> s6 [0, 65535] { R3322 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s1 [0, 65535] { R3322 += 1, R3260 += 1, R3237 += 1, R3239 += 1, R3240 += 1 };
  s4 -> s2 [0, 65535] { R3322 += 1, R3260 += 1, R3237 += 1 };
  s4 -> s3 [0, 65535] { R3322 += 1, R3260 += 1 };
  s4 -> s4 [0, 65535] { R3322 += 1, R3259 += 1, R3260 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3322 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s0 [0, 65535] { R3323 += 1, R3324 += 1 };
  s0 -> s1 [0, 65535] { R3324 += 1, R3279 += 1, R3280 += 1 };
  s0 -> s2 [0, 65535] { R3324 += 1, R3280 += 1, R21 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R3324 += 1, R3279 += 1, R3280 += 1 };
  s1 -> s2 [0, 65535] { R3324 += 1, R3280 += 1, R21 += 1 };
  s2 -> s3 [0, 65535] { R3324 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3324 += 1, R3280 += 1, R21 += 1 };
  s3 -> s3 [0, 65535] { R3324 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 69] { R3326 += 1, R3282 += 1 };
  s0 -> s2 [0, 65535] { R3326 += 1, R3281 += 1, R3282 += 1 };
  s0 -> s0 [0, 65535] { R3325 += 1, R3326 += 1 };
  s0 -> s3 [70, 70] { R3326 += 1, R3282 += 1 };
  s0 -> s4 [70, 70] { R3326 += 1, R3282 += 1 };
  s0 -> s5 [75, 75] { R3326 += 1, R3282 += 1 };
  s0 -> s1 [76, 65535] { R3326 += 1, R3282 += 1 };
  s1 -> s1 [0, 69] { R3326 += 1, R3282 += 1 };
  s1 -> s3 [70, 70] { R3326 += 1, R3282 += 1 };
  s1 -> s4 [70, 70] { R3326 += 1, R3282 += 1 };
  s1 -> s5 [75, 75] { R3326 += 1, R3282 += 1 };
  s1 -> s1 [76, 65535] { R3326 += 1, R3282 += 1 };
  s2 -> s1 [0, 69] { R3326 += 1, R3282 += 1 };
  s2 -> s2 [0, 65535] { R3326 += 1, R3281 += 1, R3282 += 1 };
  s2 -> s3 [70, 70] { R3326 += 1, R3282 += 1 };
  s2 -> s4 [70, 70] { R3326 += 1, R3282 += 1 };
  s2 -> s5 [75, 75] { R3326 += 1, R3282 += 1 };
  s2 -> s1 [76, 65535] { R3326 += 1, R3282 += 1 };
  s3 -> s3 [0, 70] { R3326 += 1, R3282 += 1 };
  s3 -> s7 [75, 75] { R3326 += 1, R3282 += 1 };
  s3 -> s3 [76, 65535] { R3326 += 1, R3282 += 1 };
  s5 -> s5 [0, 69] { R3326 += 1, R3282 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R3326 += 1 };
  s5 -> s7 [70, 70] { R3326 += 1, R3282 += 1 };
  s5 -> s8 [70, 70] { R3326 += 1, R3282 += 1 };
  s5 -> s5 [75, 65535] { R3326 += 1, R3282 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 70] { R3326 += 1, R3282 += 1 };
  s7 -> s7 [0, 65535] { R3326 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [75, 65535] { R3326 += 1, R3282 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R3326 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 69] { R3328 += 1, R3284 += 1, R83 += 1 };
  s0 -> s2 [0, 65535] { R3328 += 1, R3283 += 1, R3284 += 1 };
  s0 -> s0 [0, 65535] { R3327 += 1, R3328 += 1 };
  s0 -> s3 [70, 70] { R3328 += 1, R3284 += 1, R83 += 1 };
  s0 -> s4 [70, 70] { R3328 += 1, R3284 += 1, R83 += 1 };
  s0 -> s1 [71, 65535] { R3328 += 1, R3284 += 1, R83 += 1 };
  s1 -> s1 [0, 69] { R3328 += 1, R3284 += 1, R83 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3328 += 1 };
  s1 -> s3 [70, 70] { R3328 += 1, R3284 += 1, R83 += 1 };
  s1 -> s4 [70, 70] { R3328 += 1, R3284 += 1, R83 += 1 };
  s1 -> s1 [71, 65535] { R3328 += 1, R3284 += 1, R83 += 1 };
  s2 -> s1 [0, 69] { R3328 += 1, R3284 += 1, R83 += 1 };
  s2 -> s2 [0, 65535] { R3328 += 1, R3283 += 1, R3284 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [70, 70] { R3328 += 1, R3284 += 1, R83 += 1 };
  s2 -> s4 [70, 70] { R3328 += 1, R3284 += 1, R83 += 1 };
  s2 -> s1 [71, 65535] { R3328 += 1, R3284 += 1, R83 += 1 };
  s3 -> s3 [0, 65535] { R3328 += 1, R3284 += 1, R83 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R3328 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3328 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3328 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 69] { R3330 += 1, R3286 += 1, R85 += 1 };
  s0 -> s0 [0, 65535] { R3329 += 1, R3330 += 1 };
  s0 -> s2 [0, 65535] { R3330 += 1, R3285 += 1, R3286 += 1 };
  s0 -> s3 [70, 70] { R3330 += 1, R3286 += 1, R85 += 1 };
  s0 -> s4 [70, 70] { R3330 += 1, R3286 += 1, R85 += 1 };
  s0 -> s1 [71, 65535] { R3330 += 1, R3286 += 1, R85 += 1 };
  s1 -> s1 [0, 69] { R3330 += 1, R3286 += 1, R85 += 1 };
  s1 -> s1 [0, 65535] { R3330 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [70, 70] { R3330 += 1, R3286 += 1, R85 += 1 };
  s1 -> s4 [70, 70] { R3330 += 1, R3286 += 1, R85 += 1 };
  s1 -> s1 [71, 65535] { R3330 += 1, R3286 += 1, R85 += 1 };
  s2 -> s1 [0, 69] { R3330 += 1, R3286 += 1, R85 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R3330 += 1, R3285 += 1, R3286 += 1 };
  s2 -> s3 [70, 70] { R3330 += 1, R3286 += 1, R85 += 1 };
  s2 -> s4 [70, 70] { R3330 += 1, R3286 += 1, R85 += 1 };
  s2 -> s1 [71, 65535] { R3330 += 1, R3286 += 1, R85 += 1 };
  s3 -> s3 [0, 65535] { R3330 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R3330 += 1 };
  s4 -> s4 [0, 65535] { R3330 += 1, R3286 += 1, R85 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R3330 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 69] { R3332 += 1, R3288 += 1, R88 += 1 };
  s0 -> s2 [0, 69] { R3332 += 1, R3288 += 1, R87 += 1, R88 += 1 };
  s0 -> s0 [0, 65535] { R3331 += 1, R3332 += 1 };
  s0 -> s3 [0, 65535] { R3332 += 1, R3287 += 1, R3288 += 1 };
  s0 -> s4 [70, 70] { R3332 += 1, R3288 += 1, R87 += 1, R88 += 1 };
  s0 -> s5 [70, 70] { R3332 += 1, R3288 += 1, R88 += 1 };
  s0 -> s6 [70, 70] { R3332 += 1, R3288 += 1, R88 += 1 };
  s0 -> s7 [70, 70] { R3332 += 1, R3288 += 1, R87 += 1, R88 += 1 };
  s0 -> s1 [71, 74] { R3332 += 1, R3288 += 1, R88 += 1 };
  s0 -> s2 [71, 65535] { R3332 += 1, R3288 += 1, R87 += 1, R88 += 1 };
  s0 -> s8 [75, 75] { R3332 += 1, R3288 += 1, R88 += 1 };
  s0 -> s1 [76, 65535] { R3332 += 1, R3288 += 1, R88 += 1 };
  s1 -> s1 [0, 69] { R3332 += 1, R3288 += 1, R88 += 1 };
  s1 -> s5 [70, 70] { R3332 += 1, R3288 += 1, R88 += 1 };
  s1 -> s6 [70, 70] { R3332 += 1, R3288 += 1, R88 += 1 };
  s1 -> s1 [71, 74] { R3332 += 1, R3288 += 1, R88 += 1 };
  s1 -> s8 [75, 75] { R3332 += 1, R3288 += 1, R88 += 1 };
  s1 -> s1 [76, 65535] { R3332 += 1, R3288 += 1, R88 += 1 };
  s2 -> s1 [0, 69] { R3332 += 1, R3288 += 1, R88 += 1 };
  s2 -> s2 [0, 69] { R3332 += 1, R3288 += 1, R87 += 1, R88 += 1 };
  s2 -> s4 [70, 70] { R3332 += 1, R3288 += 1, R87 += 1, R88 += 1 };
  s2 -> s5 [70, 70] { R3332 += 1, R3288 += 1, R88 += 1 };
  s2 -> s6 [70, 70] { R3332 += 1, R3288 += 1, R88 += 1 };
  s2 -> s7 [70, 70] { R3332 += 1, R3288 += 1, R87 += 1, R88 += 1 };
  s2 -> s1 [71, 74] { R3332 += 1, R3288 += 1, R88 += 1 };
  s2 -> s2 [71, 65535] { R3332 += 1, R3288 += 1, R87 += 1, R88 += 1 };
  s2 -> s8 [75, 75] { R3332 += 1, R3288 += 1, R88 += 1 };
  s2 -> s1 [76, 65535] { R3332 += 1, R3288 += 1, R88 += 1 };
  s3 -> s1 [0, 69] { R3332 += 1, R3288 += 1, R88 += 1 };
  s3 -> s2 [0, 69] { R3332 += 1, R3288 += 1, R87 += 1, R88 += 1 };
  s3 -> s3 [0, 65535] { R3332 += 1, R3287 += 1, R3288 += 1 };
  s3 -> s4 [70, 70] { R3332 += 1, R3288 += 1, R87 += 1, R88 += 1 };
  s3 -> s5 [70, 70] { R3332 += 1, R3288 += 1, R88 += 1 };
  s3 -> s6 [70, 70] { R3332 += 1, R3288 += 1, R88 += 1 };
  s3 -> s7 [70, 70] { R3332 += 1, R3288 += 1, R87 += 1, R88 += 1 };
  s3 -> s1 [71, 74] { R3332 += 1, R3288 += 1, R88 += 1 };
  s3 -> s2 [71, 65535] { R3332 += 1, R3288 += 1, R87 += 1, R88 += 1 };
  s3 -> s8 [75, 75] { R3332 += 1, R3288 += 1, R88 += 1 };
  s3 -> s1 [76, 65535] { R3332 += 1, R3288 += 1, R88 += 1 };
  s4 -> s5 [0, 74] { R3332 += 1, R3288 += 1, R88 += 1 };
  s4 -> s4 [0, 65535] { R3332 += 1, R3288 += 1, R87 += 1, R88 += 1 };
  s4 -> s11 [75, 75] { R3332 += 1, R3288 += 1, R88 += 1 };
  s4 -> s5 [76, 65535] { R3332 += 1, R3288 += 1, R88 += 1 };
  s5 -> s5 [0, 74] { R3332 += 1, R3288 += 1, R88 += 1 };
  s5 -> s11 [75, 75] { R3332 += 1, R3288 += 1, R88 += 1 };
  s5 -> s5 [76, 65535] { R3332 += 1, R3288 += 1, R88 += 1 };
  s8 -> s8 [0, 69] { R3332 += 1, R3288 += 1, R88 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R3332 += 1 };
  s8 -> s10 [70, 70] { R3332 += 1, R3288 += 1, R88 += 1 };
  s8 -> s11 [70, 70] { R3332 += 1, R3288 += 1, R88 += 1 };
  s8 -> s8 [71, 65535] { R3332 += 1, R3288 += 1, R88 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R3332 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R3332 += 1, R3288 += 1, R88 += 1 };
  s11 -> s12 [0, 65535] { R3332 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R3332 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 69] { R3334 += 1, R3290 += 1, R91 += 1, R92 += 1 };
  s0 -> s0 [0, 65535] { R3333 += 1, R3334 += 1 };
  s0 -> s2 [0, 65535] { R3334 += 1, R3289 += 1, R3290 += 1 };
  s0 -> s3 [70, 70] { R3334 += 1, R3290 += 1, R91 += 1, R92 += 1 };
  s0 -> s4 [70, 70] { R3334 += 1, R3290 += 1, R91 += 1, R92 += 1 };
  s0 -> s1 [71, 65535] { R3334 += 1, R3290 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 69] { R3334 += 1, R3290 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 65535] { R3334 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [70, 70] { R3334 += 1, R3290 += 1, R91 += 1, R92 += 1 };
  s1 -> s4 [70, 70] { R3334 += 1, R3290 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [71, 65535] { R3334 += 1, R3290 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [0, 69] { R3334 += 1, R3290 += 1, R91 += 1, R92 += 1 };
  s2 -> s2 [0, 65535] { R3334 += 1, R3289 += 1, R3290 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [70, 70] { R3334 += 1, R3290 += 1, R91 += 1, R92 += 1 };
  s2 -> s4 [70, 70] { R3334 += 1, R3290 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [71, 65535] { R3334 += 1, R3290 += 1, R91 += 1, R92 += 1 };
  s3 -> s3 [0, 65535] { R3334 += 1, R3290 += 1, R91 += 1, R92 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R3334 += 1 };
  s4 -> s4 [0, 65535] { R3334 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3334 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 69] { R3336 += 1, R3292 += 1, R97 += 1, R98 += 1 };
  s0 -> s2 [0, 65535] { R3336 += 1, R3291 += 1, R3292 += 1 };
  s0 -> s0 [0, 65535] { R3335 += 1, R3336 += 1 };
  s0 -> s3 [70, 70] { R3336 += 1, R3292 += 1, R97 += 1, R98 += 1 };
  s0 -> s4 [70, 70] { R3336 += 1, R3292 += 1, R97 += 1, R98 += 1 };
  s0 -> s1 [71, 65535] { R3336 += 1, R3292 += 1, R97 += 1, R98 += 1 };
  s1 -> s1 [0, 69] { R3336 += 1, R3292 += 1, R97 += 1, R98 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3336 += 1 };
  s1 -> s3 [70, 70] { R3336 += 1, R3292 += 1, R97 += 1, R98 += 1 };
  s1 -> s4 [70, 70] { R3336 += 1, R3292 += 1, R97 += 1, R98 += 1 };
  s1 -> s1 [71, 65535] { R3336 += 1, R3292 += 1, R97 += 1, R98 += 1 };
  s2 -> s1 [0, 69] { R3336 += 1, R3292 += 1, R97 += 1, R98 += 1 };
  s2 -> s2 [0, 65535] { R3336 += 1, R3291 += 1, R3292 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [70, 70] { R3336 += 1, R3292 += 1, R97 += 1, R98 += 1 };
  s2 -> s4 [70, 70] { R3336 += 1, R3292 += 1, R97 += 1, R98 += 1 };
  s2 -> s1 [71, 65535] { R3336 += 1, R3292 += 1, R97 += 1, R98 += 1 };
  s3 -> s3 [0, 65535] { R3336 += 1, R3292 += 1, R97 += 1, R98 += 1 };
  s3 -> s6 [0, 65535] { R3336 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3336 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3336 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 69] { R3338 += 1, R3294 += 1, R2894 += 1, R2895 += 1, R2896 += 1 };
  s0 -> s2 [0, 69] { R3338 += 1, R3294 += 1, R2893 += 1, R2894 += 1 };
  s0 -> s0 [0, 65535] { R3337 += 1, R3338 += 1 };
  s0 -> s3 [0, 65535] { R3338 += 1, R3293 += 1, R3294 += 1 };
  s0 -> s4 [70, 70] { R3338 += 1, R3294 += 1, R2893 += 1, R2894 += 1 };
  s0 -> s5 [70, 70] { R3338 += 1, R3294 += 1, R2894 += 1, R2895 += 1, R2896 += 1 };
  s0 -> s6 [70, 70] { R3338 += 1, R3294 += 1, R2893 += 1, R2894 += 1 };
  s0 -> s7 [70, 70] { R3338 += 1, R3294 += 1, R2894 += 1, R2895 += 1, R2896 += 1 };
  s0 -> s1 [71, 65535] { R3338 += 1, R3294 += 1, R2894 += 1, R2895 += 1, R2896 += 1 };
  s0 -> s2 [71, 65535] { R3338 += 1, R3294 += 1, R2893 += 1, R2894 += 1 };
  s1 -> s1 [0, 69] { R3338 += 1, R3294 += 1, R2894 += 1, R2895 += 1, R2896 += 1 };
  s1 -> s1 [0, 65535] { R3338 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s5 [70, 70] { R3338 += 1, R3294 += 1, R2894 += 1, R2895 += 1, R2896 += 1 };
  s1 -> s7 [70, 70] { R3338 += 1, R3294 += 1, R2894 += 1, R2895 += 1, R2896 += 1 };
  s1 -> s1 [71, 65535] { R3338 += 1, R3294 += 1, R2894 += 1, R2895 += 1, R2896 += 1 };
  s2 -> s1 [0, 69] { R3338 += 1, R3294 += 1, R2894 += 1, R2895 += 1, R2896 += 1 };
  s2 -> s2 [0, 69] { R3338 += 1, R3294 += 1, R2893 += 1, R2894 += 1 };
  s2 -> s4 [70, 70] { R3338 += 1, R3294 += 1, R2893 += 1, R2894 += 1 };
  s2 -> s5 [70, 70] { R3338 += 1, R3294 += 1, R2894 += 1, R2895 += 1, R2896 += 1 };
  s2 -> s6 [70, 70] { R3338 += 1, R3294 += 1, R2893 += 1, R2894 += 1 };
  s2 -> s7 [70, 70] { R3338 += 1, R3294 += 1, R2894 += 1, R2895 += 1, R2896 += 1 };
  s2 -> s1 [71, 65535] { R3338 += 1, R3294 += 1, R2894 += 1, R2895 += 1, R2896 += 1 };
  s2 -> s2 [71, 65535] { R3338 += 1, R3294 += 1, R2893 += 1, R2894 += 1 };
  s3 -> s1 [0, 69] { R3338 += 1, R3294 += 1, R2894 += 1, R2895 += 1, R2896 += 1 };
  s3 -> s2 [0, 69] { R3338 += 1, R3294 += 1, R2893 += 1, R2894 += 1 };
  s3 -> s3 [0, 65535] { R3338 += 1, R3293 += 1, R3294 += 1 };
  s3 -> s4 [70, 70] { R3338 += 1, R3294 += 1, R2893 += 1, R2894 += 1 };
  s3 -> s5 [70, 70] { R3338 += 1, R3294 += 1, R2894 += 1, R2895 += 1, R2896 += 1 };
  s3 -> s6 [70, 70] { R3338 += 1, R3294 += 1, R2893 += 1, R2894 += 1 };
  s3 -> s7 [70, 70] { R3338 += 1, R3294 += 1, R2894 += 1, R2895 += 1, R2896 += 1 };
  s3 -> s1 [71, 65535] { R3338 += 1, R3294 += 1, R2894 += 1, R2895 += 1, R2896 += 1 };
  s3 -> s2 [71, 65535] { R3338 += 1, R3294 += 1, R2893 += 1, R2894 += 1 };
  s5 -> s5 [0, 65535] { R3338 += 1, R3294 += 1, R2894 += 1, R2895 += 1, R2896 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s9 [0, 65535] { R3338 += 1 };
  s6 -> s5 [0, 65535] { R3338 += 1, R3294 += 1, R2894 += 1, R2895 += 1, R2896 += 1 };
  s6 -> s6 [0, 65535] { R3338 += 1, R3294 += 1, R2893 += 1, R2894 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R3338 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R3338 += 1 };
  accepting s8, s5, s9, s1, s7;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 69] { R3340 += 1, R3296 += 1, R3232 += 1, R3233 += 1, R3234 += 1 };
  s0 -> s2 [0, 69] { R3340 += 1, R3296 += 1, R3231 += 1, R3232 += 1 };
  s0 -> s3 [0, 69] { R3340 += 1, R3296 += 1, R3232 += 1, R3234 += 1, R3235 += 1 };
  s0 -> s4 [0, 65535] { R3340 += 1, R3295 += 1, R3296 += 1 };
  s0 -> s0 [0, 65535] { R3339 += 1, R3340 += 1 };
  s0 -> s5 [70, 70] { R3340 += 1, R3296 += 1, R3231 += 1, R3232 += 1 };
  s0 -> s6 [70, 70] { R3340 += 1, R3296 += 1, R3232 += 1, R3233 += 1, R3234 += 1 };
  s0 -> s7 [70, 70] { R3340 += 1, R3296 += 1, R3231 += 1, R3232 += 1 };
  s0 -> s8 [70, 70] { R3340 += 1, R3296 += 1, R3232 += 1, R3233 += 1, R3234 += 1 };
  s0 -> s9 [70, 70] { R3340 += 1, R3296 += 1, R3232 += 1, R3234 += 1, R3235 += 1 };
  s0 -> s10 [70, 70] { R3340 += 1, R3296 += 1, R3232 += 1, R3234 += 1, R3235 += 1 };
  s0 -> s1 [71, 65535] { R3340 += 1, R3296 += 1, R3232 += 1, R3233 += 1, R3234 += 1 };
  s0 -> s2 [71, 65535] { R3340 += 1, R3296 += 1, R3231 += 1, R3232 += 1 };
  s0 -> s3 [71, 65535] { R3340 += 1, R3296 += 1, R3232 += 1, R3234 += 1, R3235 += 1 };
  s1 -> s1 [0, 69] { R3340 += 1, R3296 += 1, R3232 += 1, R3233 += 1, R3234 += 1 };
  s1 -> s3 [0, 69] { R3340 += 1, R3296 += 1, R3232 += 1, R3234 += 1, R3235 += 1 };
  s1 -> s6 [70, 70] { R3340 += 1, R3296 += 1, R3232 += 1, R3233 += 1, R3234 += 1 };
  s1 -> s8 [70, 70] { R3340 += 1, R3296 += 1, R3232 += 1, R3233 += 1, R3234 += 1 };
  s1 -> s9 [70, 70] { R3340 += 1, R3296 += 1, R3232 += 1, R3234 += 1, R3235 += 1 };
  s1 -> s10 [70, 70] { R3340 += 1, R3296 += 1, R3232 += 1, R3234 += 1, R3235 += 1 };
  s1 -> s1 [71, 65535] { R3340 += 1, R3296 += 1, R3232 += 1, R3233 += 1, R3234 += 1 };
  s1 -> s3 [71, 65535] { R3340 += 1, R3296 += 1, R3232 += 1, R3234 += 1, R3235 += 1 };
  s2 -> s1 [0, 69] { R3340 += 1, R3296 += 1, R3232 += 1, R3233 += 1, R3234 += 1 };
  s2 -> s2 [0, 69] { R3340 += 1, R3296 += 1, R3231 += 1, R3232 += 1 };
  s2 -> s3 [0, 69] { R3340 += 1, R3296 += 1, R3232 += 1, R3234 += 1, R3235 += 1 };
  s2 -> s5 [70, 70] { R3340 += 1, R3296 += 1, R3231 += 1, R3232 += 1 };
  s2 -> s6 [70, 70] { R3340 += 1, R3296 += 1, R3232 += 1, R3233 += 1, R3234 += 1 };
  s2 -> s7 [70, 70] { R3340 += 1, R3296 += 1, R3231 += 1, R3232 += 1 };
  s2 -> s8 [70, 70] { R3340 += 1, R3296 += 1, R3232 += 1, R3233 += 1, R3234 += 1 };
  s2 -> s9 [70, 70] { R3340 += 1, R3296 += 1, R3232 += 1, R3234 += 1, R3235 += 1 };
  s2 -> s10 [70, 70] { R3340 += 1, R3296 += 1, R3232 += 1, R3234 += 1, R3235 += 1 };
  s2 -> s1 [71, 65535] { R3340 += 1, R3296 += 1, R3232 += 1, R3233 += 1, R3234 += 1 };
  s2 -> s2 [71, 65535] { R3340 += 1, R3296 += 1, R3231 += 1, R3232 += 1 };
  s2 -> s3 [71, 65535] { R3340 += 1, R3296 += 1, R3232 += 1, R3234 += 1, R3235 += 1 };
  s3 -> s3 [0, 69] { R3340 += 1, R3296 += 1, R3232 += 1, R3234 += 1, R3235 += 1 };
  s3 -> s11 [0, 65535];
  s3 -> s3 [0, 65535] { R3340 += 1 };
  s3 -> s9 [70, 70] { R3340 += 1, R3296 += 1, R3232 += 1, R3234 += 1, R3235 += 1 };
  s3 -> s10 [70, 70] { R3340 += 1, R3296 += 1, R3232 += 1, R3234 += 1, R3235 += 1 };
  s3 -> s3 [71, 65535] { R3340 += 1, R3296 += 1, R3232 += 1, R3234 += 1, R3235 += 1 };
  s4 -> s1 [0, 69] { R3340 += 1, R3296 += 1, R3232 += 1, R3233 += 1, R3234 += 1 };
  s4 -> s2 [0, 69] { R3340 += 1, R3296 += 1, R3231 += 1, R3232 += 1 };
  s4 -> s3 [0, 69] { R3340 += 1, R3296 += 1, R3232 += 1, R3234 += 1, R3235 += 1 };
  s4 -> s4 [0, 65535] { R3340 += 1, R3295 += 1, R3296 += 1 };
  s4 -> s5 [70, 70] { R3340 += 1, R3296 += 1, R3231 += 1, R3232 += 1 };
  s4 -> s6 [70, 70] { R3340 += 1, R3296 += 1, R3232 += 1, R3233 += 1, R3234 += 1 };
  s4 -> s7 [70, 70] { R3340 += 1, R3296 += 1, R3231 += 1, R3232 += 1 };
  s4 -> s8 [70, 70] { R3340 += 1, R3296 += 1, R3232 += 1, R3233 += 1, R3234 += 1 };
  s4 -> s9 [70, 70] { R3340 += 1, R3296 += 1, R3232 += 1, R3234 += 1, R3235 += 1 };
  s4 -> s10 [70, 70] { R3340 += 1, R3296 += 1, R3232 += 1, R3234 += 1, R3235 += 1 };
  s4 -> s1 [71, 65535] { R3340 += 1, R3296 += 1, R3232 += 1, R3233 += 1, R3234 += 1 };
  s4 -> s2 [71, 65535] { R3340 += 1, R3296 += 1, R3231 += 1, R3232 += 1 };
  s4 -> s3 [71, 65535] { R3340 += 1, R3296 += 1, R3232 += 1, R3234 += 1, R3235 += 1 };
  s5 -> s5 [0, 65535] { R3340 += 1, R3296 += 1, R3231 += 1, R3232 += 1 };
  s5 -> s8 [0, 65535] { R3340 += 1, R3296 += 1, R3232 += 1, R3233 += 1, R3234 += 1 };
  s5 -> s10 [0, 65535] { R3340 += 1, R3296 += 1, R3232 += 1, R3234 += 1, R3235 += 1 };
  s8 -> s8 [0, 65535] { R3340 += 1, R3296 += 1, R3232 += 1, R3233 += 1, R3234 += 1 };
  s8 -> s10 [0, 65535] { R3340 += 1, R3296 += 1, R3232 += 1, R3234 += 1, R3235 += 1 };
  s9 -> s11 [0, 65535];
  s9 -> s9 [0, 65535] { R3340 += 1 };
  s10 -> s11 [0, 65535];
  s10 -> s12 [0, 65535] { R3340 += 1 };
  s10 -> s10 [0, 65535] { R3340 += 1, R3296 += 1, R3232 += 1, R3234 += 1, R3235 += 1 };
  s11 -> s11 [0, 65535];
  s12 -> s11 [0, 65535];
  s12 -> s12 [0, 65535] { R3340 += 1 };
  accepting s3, s12, s9, s10, s11;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [102, 102];
  accepting s1;
};
};
constraint R2 = R3258 && R3 = R3340 && R23 - R3340 = -1 && R24 = R3340 && R25 - R3340 = -1 && R26 = R3340 && R27 = 0 && R28 = 1 && R29 = 0 && R30 = 1 && R45 + R84 + R83 + -1*R2898 + -1*R2894 - R66 = 0 && R49 + R89 + R87 = 0 && R50 + R90 + R88 + -1*R2898 + -1*R2894 - R66 = 0 && R55 + R96 + R93 + -1*R2900 + -1*R2896 - R68 = 0 && R65 + R2897 + R2893 = 0 && R67 + R2899 + R2895 = 0 && R3257 = 0 && R3281 = 0 && R3282 = 0 && R3287 = 0 && R3288 = 0 && R3293 = 0 && R3294 = 0 && R3295 = 0 && R3296 = 0 && R3297 = 0 && R3298 = R3340 && R3299 = 0 && R3300 = R3340 && R3301 = 0 && R3302 = R3340 && R3303 = 0 && R3304 = R3340 && R3305 = 0 && R3306 = R3340 && R3307 = 0 && R3308 = R3340 && R3309 = 0 && R3310 = R3340 && R3311 = 0 && R3312 = R3340 && R3313 = 0 && R3314 = R3340 && R3315 = 0 && R3316 = R3340 && R3317 = 0 && R3318 = R3340 && R3319 = 0 && R3320 = R3340 && R3321 = 0 && R3322 = R3340 && R3323 = 0 && R3324 = R3340 && R3325 = 0 && R3326 = R3340 && R3327 = 0 && R3328 = R3340 && R3329 = 0 && R3330 = R3340 && R3331 = 0 && R3332 = R3340 && R3333 = 0 && R3334 = R3340 && R3335 = 0 && R3336 = R3340 && R3337 = 0 && R3338 = R3340 && R3339 = 0 && R12 < 1 && R15 < 1 && R16 < 1 && R47 + R86 + R85 < 1 && R61 + R102 + R99 < 1 && -1*R2898 + -1*R2894 - R66 < 1 && -1*R2900 + -1*R2896 - R68 < 1 && -1 < R3258 && 0 < R3340 && (R53 + R94 + R91 != 0 || R54 + R95 + R92 + -1*R2898 + -1*R2894 - R66 = 0 || R66 + R2898 + R2894 < 1) && (R59 + R100 + R97 != 0 || R60 + R101 + R98 + -1*R2898 + -1*R2894 - R66 = 0 || R66 + R2898 + R2894 < 1) && (R66 + R2898 + R2894 != 0 || ((R53 + R94 + R91 != 0 || R54 + R95 + R92 = 0 || R68 + R2900 + R2896 < 1) && (R53 + R94 + R91 = 0 || R68 + R2900 + R2896 < 1))) && (R66 + R2898 + R2894 != 0 || ((R59 + R100 + R97 != 0 || R60 + R101 + R98 = 0 || R68 + R2900 + R2896 < 1) && (R59 + R100 + R97 = 0 || R68 + R2900 + R2896 < 1))) && (R66 + R2898 + R2894 != 0 || ((R73 + R3236 + R3231 != 0 || R74 + R3237 + R3232 = 0 || R68 + R2900 + R2896 < 1) && (R73 + R3236 + R3231 = 0 || R68 + R2900 + R2896 < 1))) && (R68 + R2900 + R2896 != 0 || R77 + R3240 + R3235 = 0 || (R75 + R3238 + R3233 = 0 && R76 + R3239 + R3234 = 0)) && (R73 + R3236 + R3231 != 0 || R66 + R2898 + R2894 + -1*R3237 + -1*R3232 - R74 = 0 || R66 + R2898 + R2894 < 1) && (R75 + R3238 + R3233 != 0 || R68 + R2900 + R2896 + -1*R3239 + -1*R3234 - R76 = 0 || R68 + R2900 + R2896 < 1) && (R3241 != 0 || R3242 = R3258 || (R20 = 0 && R3258 = 0)) && (R3243 != 0 || R3244 = R3258 || (R20 = 0 && R3258 = 0)) && (R3245 != 0 || R3246 = R3258 || (R20 = 0 && R3258 = 0)) && (R3247 != 0 || R3248 = R3258 || (R20 = 0 && R3258 = 0)) && (R3249 != 0 || R3250 = R3258 || (R20 = 0 && R3258 = 0)) && (R3251 != 0 || R3252 = R3258 || (R20 = 0 && R3258 = 0)) && (R3253 != 0 || R3254 = R3258 || (R20 = 0 && R3258 = 0)) && (R3255 != 0 || R3256 = R3258 || (R20 = 0 && R3258 = 0)) && (R3259 != 0 || R3258 = R3260 || (R20 = 0 && R3258 = 0)) && (R21 = 0 || (R3279 = 0 && R3280 = 0)) && (R21 = 0 || (R3283 = 0 && R3284 = 0)) && (R21 = 0 || (R3285 = 0 && R3286 = 0)) && (R21 = 0 || (R3289 = 0 && R3290 = 0)) && (R21 = 0 || (R3291 = 0 && R3292 = 0)) && (R22 = 0 || (R3261 = 0 && R3262 = 0)) && (R22 = 0 || (R3263 = 0 && R3264 = 0)) && (R22 = 0 || (R3265 = 0 && R3266 = 0)) && (R22 = 0 || (R3267 = 0 && R3268 = 0)) && (R22 = 0 || (R3269 = 0 && R3270 = 0)) && (R22 = 0 || (R3271 = 0 && R3272 = 0)) && (R22 = 0 || (R3273 = 0 && R3274 = 0)) && (R22 = 0 || (R3275 = 0 && R3276 = 0)) && (R22 = 0 || (R3277 = 0 && R3278 = 0)) && (R53 + R94 + R91 = 0 || R66 + R2898 + R2894 < 1) && (R59 + R100 + R97 = 0 || R66 + R2898 + R2894 < 1) && (R73 + R3236 + R3231 = 0 || R66 + R2898 + R2894 < 1) && (R75 + R3238 + R3233 = 0 || R68 + R2900 + R2896 < 1) && (R3241 = 0 || (R20 = 0 && R3258 = 0)) && (R3243 = 0 || (R20 = 0 && R3258 = 0)) && (R3245 = 0 || (R20 = 0 && R3258 = 0)) && (R3247 = 0 || (R20 = 0 && R3258 = 0)) && (R3249 = 0 || (R20 = 0 && R3258 = 0)) && (R3251 = 0 || (R20 = 0 && R3258 = 0)) && (R3253 = 0 || (R20 = 0 && R3258 = 0)) && (R3255 = 0 || (R20 = 0 && R3258 = 0)) && (R3259 = 0 || (R20 = 0 && R3258 = 0));
// End of Parikh automata intersection problem
