// Parikh automata intersection problem, generated by OSTRICH+
counter int R100, R101, R102, R12, R15, R16, R2, R20, R21, R22, R23, R24, R25, R26, R27, R28, R2893, R2894, R2895, R2896, R2897, R2898, R2899, R29, R2900, R3, R30, R3341, R3342, R3343, R3344, R3345, R3346, R3347, R3348, R3349, R3350, R3351, R3352, R3353, R3354, R3355, R3356, R3357, R3358, R3359, R3360, R3361, R3362, R3363, R3364, R3365, R3366, R3367, R3368, R3369, R3370, R3371, R3372, R3373, R3374, R3375, R3376, R3377, R3378, R3379, R3380, R3381, R3382, R3383, R3384, R3385, R3386, R3387, R3388, R3389, R3390, R3391, R3392, R3393, R3394, R3395, R3396, R3397, R3398, R3399, R3400, R3401, R3402, R3403, R3404, R3405, R3406, R3407, R3408, R3409, R3410, R3411, R3412, R3413, R3414, R3415, R3416, R3417, R3418, R3419, R3420, R3421, R3422, R3423, R3424, R3425, R3426, R3427, R3428, R3429, R3430, R3431, R3432, R3433, R3434, R3435, R3436, R3437, R3438, R3439, R3440, R3441, R3442, R3443, R3444, R3445, R3446, R3447, R3448, R3449, R3450, R4, R45, R47, R49, R5, R50, R53, R54, R55, R59, R60, R61, R65, R66, R67, R68, R73, R74, R75, R76, R77, R83, R84, R85, R86, R87, R88, R89, R90, R91, R92, R93, R94, R95, R96, R97, R98, R99;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [70, 70];
  s0 -> s0 [71, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [70, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R15 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 69];
  s0 -> s0 [0, 65535] { R16 += 1 };
  s0 -> s2 [70, 70];
  s0 -> s1 [71, 65535];
  s1 -> s1 [0, 69];
  s1 -> s2 [70, 70];
  s1 -> s1 [71, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R24 += 1 };
  s0 -> s0 [0, 65535] { R23 += 1, R24 += 1 };
  s0 -> s2 [9, 13] { R24 += 1 };
  s0 -> s1 [14, 31] { R24 += 1 };
  s0 -> s2 [32, 32] { R24 += 1 };
  s0 -> s1 [33, 65535] { R24 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R24 += 1 };
  s2 -> s1 [0, 65535] { R24 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R25 += 1, R26 += 1 };
  s1 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R28 += 1 };
  s0 -> s0 [0, 65535] { R27 += 1, R28 += 1 };
  s0 -> s2 [9, 13] { R28 += 1 };
  s0 -> s1 [14, 31] { R28 += 1 };
  s0 -> s2 [32, 32] { R28 += 1 };
  s0 -> s1 [33, 65535] { R28 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R28 += 1 };
  s2 -> s1 [0, 65535] { R28 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R29 += 1, R30 += 1 };
  s1 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R3372 += 1, R22 += 1 };
  s0 -> s0 [0, 65535] { R3371 += 1, R3372 += 1 };
  s1 -> s1 [0, 65535] { R3372 += 1, R22 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 69] { R3374 += 1 };
  s0 -> s0 [0, 65535] { R3373 += 1, R3374 += 1 };
  s0 -> s2 [70, 70] { R3374 += 1 };
  s0 -> s3 [70, 70] { R3374 += 1 };
  s0 -> s1 [76, 65535] { R3374 += 1 };
  s1 -> s1 [0, 69] { R3374 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R3374 += 1 };
  s1 -> s3 [70, 70] { R3374 += 1 };
  s1 -> s1 [76, 65535] { R3374 += 1 };
  s2 -> s2 [0, 70] { R3374 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [76, 65535] { R3374 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 69] { R3376 += 1, R45 += 1 };
  s0 -> s0 [0, 65535] { R3375 += 1, R3376 += 1 };
  s0 -> s2 [70, 70] { R3376 += 1, R45 += 1 };
  s0 -> s3 [70, 70] { R3376 += 1, R45 += 1 };
  s0 -> s1 [71, 65535] { R3376 += 1, R45 += 1 };
  s1 -> s1 [0, 69] { R3376 += 1, R45 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R3376 += 1, R45 += 1 };
  s1 -> s3 [70, 70] { R3376 += 1, R45 += 1 };
  s1 -> s1 [71, 65535] { R3376 += 1, R45 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R3376 += 1, R45 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 69] { R3378 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R3377 += 1, R3378 += 1 };
  s0 -> s2 [70, 70] { R3378 += 1, R47 += 1 };
  s0 -> s3 [70, 70] { R3378 += 1, R47 += 1 };
  s0 -> s1 [71, 65535] { R3378 += 1, R47 += 1 };
  s1 -> s1 [0, 69] { R3378 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R3378 += 1, R47 += 1 };
  s1 -> s3 [70, 70] { R3378 += 1, R47 += 1 };
  s1 -> s1 [71, 65535] { R3378 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R3378 += 1, R47 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 69] { R3380 += 1, R49 += 1, R50 += 1 };
  s0 -> s0 [0, 65535] { R3379 += 1, R3380 += 1 };
  s0 -> s2 [70, 70] { R3380 += 1, R49 += 1, R50 += 1 };
  s0 -> s3 [70, 70] { R3380 += 1, R49 += 1, R50 += 1 };
  s0 -> s1 [71, 65535] { R3380 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 69] { R3380 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R3380 += 1, R49 += 1, R50 += 1 };
  s1 -> s3 [70, 70] { R3380 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [71, 65535] { R3380 += 1, R49 += 1, R50 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R3380 += 1, R49 += 1, R50 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 69] { R3382 += 1, R53 += 1, R54 += 1 };
  s0 -> s0 [0, 65535] { R3381 += 1, R3382 += 1 };
  s0 -> s2 [70, 70] { R3382 += 1, R53 += 1, R54 += 1 };
  s0 -> s3 [70, 70] { R3382 += 1, R53 += 1, R54 += 1 };
  s0 -> s1 [71, 65535] { R3382 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 69] { R3382 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R3382 += 1, R53 += 1, R54 += 1 };
  s1 -> s3 [70, 70] { R3382 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [71, 65535] { R3382 += 1, R53 += 1, R54 += 1 };
  s2 -> s2 [0, 65535] { R3382 += 1, R53 += 1, R54 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 69] { R3384 += 1, R59 += 1, R60 += 1 };
  s0 -> s0 [0, 65535] { R3383 += 1, R3384 += 1 };
  s0 -> s2 [70, 70] { R3384 += 1, R59 += 1, R60 += 1 };
  s0 -> s3 [70, 70] { R3384 += 1, R59 += 1, R60 += 1 };
  s0 -> s1 [71, 65535] { R3384 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 69] { R3384 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R3384 += 1, R59 += 1, R60 += 1 };
  s1 -> s3 [70, 70] { R3384 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [71, 65535] { R3384 += 1, R59 += 1, R60 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R3384 += 1, R59 += 1, R60 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 69] { R3386 += 1, R65 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R3385 += 1, R3386 += 1 };
  s0 -> s2 [70, 70] { R3386 += 1, R65 += 1, R66 += 1 };
  s0 -> s3 [70, 70] { R3386 += 1, R65 += 1, R66 += 1 };
  s0 -> s1 [71, 65535] { R3386 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 69] { R3386 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R3386 += 1, R65 += 1, R66 += 1 };
  s1 -> s3 [70, 70] { R3386 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [71, 65535] { R3386 += 1, R65 += 1, R66 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R3386 += 1, R65 += 1, R66 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 69] { R3388 += 1, R73 += 1, R74 += 1 };
  s0 -> s0 [0, 65535] { R3387 += 1, R3388 += 1 };
  s0 -> s2 [70, 70] { R3388 += 1, R73 += 1, R74 += 1 };
  s0 -> s3 [70, 70] { R3388 += 1, R73 += 1, R74 += 1 };
  s0 -> s1 [71, 65535] { R3388 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 69] { R3388 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R3388 += 1, R73 += 1, R74 += 1 };
  s1 -> s3 [70, 70] { R3388 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [71, 65535] { R3388 += 1, R73 += 1, R74 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3388 += 1, R73 += 1, R74 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 69] { R3408 += 1 };
  s0 -> s0 [0, 65535] { R3407 += 1, R3408 += 1 };
  s0 -> s2 [70, 70] { R3408 += 1 };
  s0 -> s1 [71, 65535] { R3408 += 1 };
  s1 -> s1 [0, 69] { R3408 += 1 };
  s1 -> s2 [70, 70] { R3408 += 1 };
  s1 -> s1 [71, 65535] { R3408 += 1 };
  s2 -> s2 [0, 65535] { R3408 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R3409 += 1, R3410 += 1 };
  s0 -> s1 [0, 65535] { R3410 += 1, R2 += 1 };
  s1 -> s1 [0, 65535] { R3410 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 69] { R3412 += 1 };
  s0 -> s0 [0, 65535] { R3411 += 1, R3412 += 1 };
  s0 -> s2 [0, 65535] { R3412 += 1, R12 += 1 };
  s0 -> s3 [70, 70] { R3412 += 1 };
  s0 -> s1 [71, 65535] { R3412 += 1 };
  s1 -> s1 [0, 69] { R3412 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [70, 70] { R3412 += 1 };
  s1 -> s1 [71, 65535] { R3412 += 1 };
  s2 -> s1 [0, 69] { R3412 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3412 += 1, R12 += 1 };
  s2 -> s3 [70, 70] { R3412 += 1 };
  s2 -> s1 [71, 65535] { R3412 += 1 };
  s3 -> s3 [0, 65535] { R3412 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 69] { R3414 += 1, R3352 += 1 };
  s0 -> s2 [0, 65535] { R3414 += 1, R3351 += 1, R3352 += 1 };
  s0 -> s0 [0, 65535] { R3413 += 1, R3414 += 1 };
  s0 -> s1 [71, 65535] { R3414 += 1, R3352 += 1 };
  s1 -> s1 [0, 69] { R3414 += 1, R3352 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3414 += 1 };
  s1 -> s1 [71, 65535] { R3414 += 1, R3352 += 1 };
  s2 -> s1 [0, 69] { R3414 += 1, R3352 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3414 += 1, R3351 += 1, R3352 += 1 };
  s2 -> s1 [71, 65535] { R3414 += 1, R3352 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R3416 += 1, R3353 += 1, R3354 += 1 };
  s0 -> s0 [0, 65535] { R3415 += 1, R3416 += 1 };
  s0 -> s2 [0, 65535] { R3416 += 1, R3354 += 1, R20 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3416 += 1, R3353 += 1, R3354 += 1 };
  s1 -> s2 [0, 65535] { R3416 += 1, R3354 += 1, R20 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R3416 += 1 };
  s2 -> s2 [0, 65535] { R3416 += 1, R3354 += 1, R20 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3416 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 70] { R3418 += 1, R3356 += 1 };
  s0 -> s2 [0, 65535] { R3418 += 1, R3355 += 1, R3356 += 1 };
  s0 -> s0 [0, 65535] { R3417 += 1, R3418 += 1 };
  s0 -> s1 [75, 65535] { R3418 += 1, R3356 += 1 };
  s1 -> s1 [0, 70] { R3418 += 1, R3356 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3418 += 1 };
  s1 -> s1 [75, 65535] { R3418 += 1, R3356 += 1 };
  s2 -> s1 [0, 70] { R3418 += 1, R3356 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3418 += 1, R3355 += 1, R3356 += 1 };
  s2 -> s1 [75, 65535] { R3418 += 1, R3356 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R3420 += 1, R3358 += 1, R84 += 1 };
  s0 -> s0 [0, 65535] { R3419 += 1, R3420 += 1 };
  s0 -> s2 [0, 65535] { R3420 += 1, R3357 += 1, R3358 += 1 };
  s1 -> s1 [0, 65535] { R3420 += 1, R3358 += 1, R84 += 1 };
  s1 -> s4 [0, 65535] { R3420 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3420 += 1, R3358 += 1, R84 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3420 += 1, R3357 += 1, R3358 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3420 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 74] { R3422 += 1, R3360 += 1 };
  s0 -> s2 [0, 65535] { R3422 += 1, R3359 += 1, R3360 += 1 };
  s0 -> s0 [0, 65535] { R3421 += 1, R3422 += 1 };
  s0 -> s3 [0, 65535] { R3422 += 1, R3360 += 1, R86 += 1 };
  s0 -> s1 [76, 65535] { R3422 += 1, R3360 += 1 };
  s1 -> s1 [0, 74] { R3422 += 1, R3360 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R3422 += 1 };
  s1 -> s1 [76, 65535] { R3422 += 1, R3360 += 1 };
  s2 -> s1 [0, 74] { R3422 += 1, R3360 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3422 += 1, R3359 += 1, R3360 += 1 };
  s2 -> s3 [0, 65535] { R3422 += 1, R3360 += 1, R86 += 1 };
  s2 -> s1 [76, 65535] { R3422 += 1, R3360 += 1 };
  s3 -> s1 [0, 74] { R3422 += 1, R3360 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R3422 += 1 };
  s3 -> s3 [0, 65535] { R3422 += 1, R3360 += 1, R86 += 1 };
  s3 -> s1 [76, 65535] { R3422 += 1, R3360 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3422 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 65535] { R3424 += 1, R3362 += 1 };
  s0 -> s2 [0, 65535] { R3424 += 1, R3362 += 1, R90 += 1 };
  s0 -> s3 [0, 65535] { R3424 += 1, R3361 += 1, R3362 += 1 };
  s0 -> s0 [0, 65535] { R3423 += 1, R3424 += 1 };
  s1 -> s1 [0, 65535] { R3424 += 1, R3362 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R3424 += 1 };
  s2 -> s1 [0, 65535] { R3424 += 1, R3362 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3424 += 1, R3362 += 1, R90 += 1 };
  s2 -> s5 [0, 65535] { R3424 += 1 };
  s3 -> s1 [0, 65535] { R3424 += 1, R3362 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R3424 += 1, R3362 += 1, R90 += 1 };
  s3 -> s3 [0, 65535] { R3424 += 1, R3361 += 1, R3362 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3424 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s0 [0, 65535] { R3425 += 1, R3426 += 1 };
  s0 -> s1 [0, 65535] { R3426 += 1, R3364 += 1, R95 += 1, R96 += 1 };
  s0 -> s2 [0, 65535] { R3426 += 1, R3364 += 1, R94 += 1, R95 += 1 };
  s0 -> s3 [0, 65535] { R3426 += 1, R3363 += 1, R3364 += 1 };
  s1 -> s5 [0, 65535] { R3426 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R3426 += 1, R3364 += 1, R95 += 1, R96 += 1 };
  s1 -> s6 [0, 65535] { R3426 += 1, R3364 += 1 };
  s2 -> s5 [0, 65535] { R3426 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R3426 += 1, R3364 += 1, R95 += 1, R96 += 1 };
  s2 -> s2 [0, 65535] { R3426 += 1, R3364 += 1, R94 += 1, R95 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R3426 += 1, R3364 += 1, R95 += 1, R96 += 1 };
  s3 -> s2 [0, 65535] { R3426 += 1, R3364 += 1, R94 += 1, R95 += 1 };
  s3 -> s3 [0, 65535] { R3426 += 1, R3363 += 1, R3364 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3426 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R3426 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R3426 += 1, R3364 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 74] { R3428 += 1, R3366 += 1, R101 += 1 };
  s0 -> s2 [0, 65535] { R3428 += 1, R3366 += 1, R101 += 1, R102 += 1 };
  s0 -> s0 [0, 65535] { R3427 += 1, R3428 += 1 };
  s0 -> s3 [0, 65535] { R3428 += 1, R3366 += 1, R100 += 1, R101 += 1 };
  s0 -> s4 [0, 65535] { R3428 += 1, R3365 += 1, R3366 += 1 };
  s0 -> s1 [76, 65535] { R3428 += 1, R3366 += 1, R101 += 1 };
  s1 -> s1 [0, 74] { R3428 += 1, R3366 += 1, R101 += 1 };
  s1 -> s1 [0, 65535] { R3428 += 1, R3366 += 1 };
  s1 -> s6 [0, 65535] { R3428 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [76, 65535] { R3428 += 1, R3366 += 1, R101 += 1 };
  s2 -> s1 [0, 74] { R3428 += 1, R3366 += 1, R101 += 1 };
  s2 -> s2 [0, 65535] { R3428 += 1, R3366 += 1, R101 += 1, R102 += 1 };
  s2 -> s7 [0, 65535] { R3428 += 1, R3366 += 1 };
  s2 -> s6 [0, 65535] { R3428 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [76, 65535] { R3428 += 1, R3366 += 1, R101 += 1 };
  s3 -> s1 [0, 74] { R3428 += 1, R3366 += 1, R101 += 1 };
  s3 -> s2 [0, 65535] { R3428 += 1, R3366 += 1, R101 += 1, R102 += 1 };
  s3 -> s6 [0, 65535] { R3428 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R3428 += 1, R3366 += 1, R100 += 1, R101 += 1 };
  s3 -> s1 [76, 65535] { R3428 += 1, R3366 += 1, R101 += 1 };
  s4 -> s1 [0, 74] { R3428 += 1, R3366 += 1, R101 += 1 };
  s4 -> s2 [0, 65535] { R3428 += 1, R3366 += 1, R101 += 1, R102 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s3 [0, 65535] { R3428 += 1, R3366 += 1, R100 += 1, R101 += 1 };
  s4 -> s4 [0, 65535] { R3428 += 1, R3365 += 1, R3366 += 1 };
  s4 -> s1 [76, 65535] { R3428 += 1, R3366 += 1, R101 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3428 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R3428 += 1, R3366 += 1 };
  s7 -> s6 [0, 65535] { R3428 += 1 };
  s7 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 74] { R3430 += 1, R3368 += 1, R2898 += 1, R2900 += 1 };
  s0 -> s0 [0, 65535] { R3429 += 1, R3430 += 1 };
  s0 -> s2 [0, 65535] { R3430 += 1, R3367 += 1, R3368 += 1 };
  s0 -> s3 [0, 65535] { R3430 += 1, R3368 += 1, R2898 += 1, R2899 += 1, R2900 += 1 };
  s0 -> s4 [75, 75] { R3430 += 1, R3368 += 1, R2898 += 1, R2900 += 1 };
  s0 -> s1 [76, 65535] { R3430 += 1, R3368 += 1, R2898 += 1, R2900 += 1 };
  s1 -> s1 [0, 74] { R3430 += 1, R3368 += 1, R2898 += 1, R2900 += 1 };
  s1 -> s4 [75, 75] { R3430 += 1, R3368 += 1, R2898 += 1, R2900 += 1 };
  s1 -> s1 [76, 65535] { R3430 += 1, R3368 += 1, R2898 += 1, R2900 += 1 };
  s2 -> s1 [0, 74] { R3430 += 1, R3368 += 1, R2898 += 1, R2900 += 1 };
  s2 -> s2 [0, 65535] { R3430 += 1, R3367 += 1, R3368 += 1 };
  s2 -> s3 [0, 65535] { R3430 += 1, R3368 += 1, R2898 += 1, R2899 += 1, R2900 += 1 };
  s2 -> s4 [75, 75] { R3430 += 1, R3368 += 1, R2898 += 1, R2900 += 1 };
  s2 -> s1 [76, 65535] { R3430 += 1, R3368 += 1, R2898 += 1, R2900 += 1 };
  s3 -> s1 [0, 74] { R3430 += 1, R3368 += 1, R2898 += 1, R2900 += 1 };
  s3 -> s3 [0, 65535] { R3430 += 1, R3368 += 1, R2898 += 1, R2899 += 1, R2900 += 1 };
  s3 -> s4 [75, 75] { R3430 += 1, R3368 += 1, R2898 += 1, R2900 += 1 };
  s3 -> s1 [76, 65535] { R3430 += 1, R3368 += 1, R2898 += 1, R2900 += 1 };
  s4 -> s4 [0, 65535] { R3430 += 1, R3368 += 1, R2898 += 1, R2900 += 1 };
  s4 -> s5 [0, 65535] { R3430 += 1, R3368 += 1, R2898 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R3430 += 1 };
  s4 -> s8 [0, 65535] { R3430 += 1, R3368 += 1 };
  s5 -> s5 [0, 65535] { R3430 += 1, R3368 += 1, R2898 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R3430 += 1 };
  s5 -> s8 [0, 65535] { R3430 += 1, R3368 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R3430 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R3430 += 1 };
  s8 -> s8 [0, 65535] { R3430 += 1, R3368 += 1 };
  accepting s4, s8, s5, s6, s7;
};
automaton value2_29 {
  init s0;
  s0 -> s0 [0, 65535] { R3431 += 1, R3432 += 1 };
  s0 -> s1 [0, 65535] { R3432 += 1, R3369 += 1, R3370 += 1 };
  s0 -> s2 [0, 65535] { R3432 += 1, R3370 += 1, R3347 += 1, R3348 += 1, R3349 += 1 };
  s0 -> s3 [0, 65535] { R3432 += 1, R3370 += 1 };
  s0 -> s4 [0, 65535] { R3432 += 1, R3370 += 1, R3347 += 1, R3349 += 1, R3350 += 1 };
  s1 -> s1 [0, 65535] { R3432 += 1, R3369 += 1, R3370 += 1 };
  s1 -> s2 [0, 65535] { R3432 += 1, R3370 += 1, R3347 += 1, R3348 += 1, R3349 += 1 };
  s1 -> s3 [0, 65535] { R3432 += 1, R3370 += 1 };
  s1 -> s4 [0, 65535] { R3432 += 1, R3370 += 1, R3347 += 1, R3349 += 1, R3350 += 1 };
  s1 -> s7 [0, 65535];
  s2 -> s5 [0, 65535] { R3432 += 1 };
  s2 -> s2 [0, 65535] { R3432 += 1, R3370 += 1, R3347 += 1, R3348 += 1, R3349 += 1 };
  s2 -> s3 [0, 65535] { R3432 += 1, R3370 += 1 };
  s2 -> s4 [0, 65535] { R3432 += 1, R3370 += 1, R3347 += 1, R3349 += 1, R3350 += 1 };
  s2 -> s7 [0, 65535];
  s3 -> s5 [0, 65535] { R3432 += 1 };
  s3 -> s3 [0, 65535] { R3432 += 1, R3370 += 1 };
  s3 -> s7 [0, 65535];
  s4 -> s5 [0, 65535] { R3432 += 1 };
  s4 -> s6 [0, 65535] { R3432 += 1, R3370 += 1, R3347 += 1 };
  s4 -> s3 [0, 65535] { R3432 += 1, R3370 += 1 };
  s4 -> s4 [0, 65535] { R3432 += 1, R3370 += 1, R3347 += 1, R3349 += 1, R3350 += 1 };
  s4 -> s7 [0, 65535];
  s5 -> s5 [0, 65535] { R3432 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s5 [0, 65535] { R3432 += 1 };
  s6 -> s6 [0, 65535] { R3432 += 1, R3370 += 1, R3347 += 1 };
  s6 -> s3 [0, 65535] { R3432 += 1, R3370 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R3434 += 1, R3389 += 1, R3390 += 1 };
  s0 -> s2 [0, 65535] { R3434 += 1, R3390 += 1, R21 += 1 };
  s0 -> s0 [0, 65535] { R3433 += 1, R3434 += 1 };
  s1 -> s1 [0, 65535] { R3434 += 1, R3389 += 1, R3390 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R3434 += 1, R3390 += 1, R21 += 1 };
  s2 -> s3 [0, 65535] { R3434 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3434 += 1, R3390 += 1, R21 += 1 };
  s3 -> s3 [0, 65535] { R3434 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 69] { R3436 += 1, R3392 += 1 };
  s0 -> s2 [0, 65535] { R3436 += 1, R3391 += 1, R3392 += 1 };
  s0 -> s0 [0, 65535] { R3435 += 1, R3436 += 1 };
  s0 -> s3 [70, 70] { R3436 += 1, R3392 += 1 };
  s0 -> s4 [70, 70] { R3436 += 1, R3392 += 1 };
  s0 -> s5 [75, 75] { R3436 += 1, R3392 += 1 };
  s0 -> s1 [76, 65535] { R3436 += 1, R3392 += 1 };
  s1 -> s1 [0, 69] { R3436 += 1, R3392 += 1 };
  s1 -> s3 [70, 70] { R3436 += 1, R3392 += 1 };
  s1 -> s4 [70, 70] { R3436 += 1, R3392 += 1 };
  s1 -> s5 [75, 75] { R3436 += 1, R3392 += 1 };
  s1 -> s1 [76, 65535] { R3436 += 1, R3392 += 1 };
  s2 -> s1 [0, 69] { R3436 += 1, R3392 += 1 };
  s2 -> s2 [0, 65535] { R3436 += 1, R3391 += 1, R3392 += 1 };
  s2 -> s3 [70, 70] { R3436 += 1, R3392 += 1 };
  s2 -> s4 [70, 70] { R3436 += 1, R3392 += 1 };
  s2 -> s5 [75, 75] { R3436 += 1, R3392 += 1 };
  s2 -> s1 [76, 65535] { R3436 += 1, R3392 += 1 };
  s3 -> s3 [0, 70] { R3436 += 1, R3392 += 1 };
  s3 -> s8 [75, 75] { R3436 += 1, R3392 += 1 };
  s3 -> s3 [76, 65535] { R3436 += 1, R3392 += 1 };
  s5 -> s5 [0, 69] { R3436 += 1, R3392 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R3436 += 1 };
  s5 -> s7 [70, 70] { R3436 += 1, R3392 += 1 };
  s5 -> s8 [70, 70] { R3436 += 1, R3392 += 1 };
  s5 -> s5 [75, 65535] { R3436 += 1, R3392 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R3436 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 70] { R3436 += 1, R3392 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R3436 += 1 };
  s8 -> s8 [75, 65535] { R3436 += 1, R3392 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 69] { R3438 += 1, R3394 += 1, R83 += 1 };
  s0 -> s0 [0, 65535] { R3437 += 1, R3438 += 1 };
  s0 -> s2 [0, 65535] { R3438 += 1, R3393 += 1, R3394 += 1 };
  s0 -> s3 [70, 70] { R3438 += 1, R3394 += 1, R83 += 1 };
  s0 -> s4 [70, 70] { R3438 += 1, R3394 += 1, R83 += 1 };
  s0 -> s1 [71, 65535] { R3438 += 1, R3394 += 1, R83 += 1 };
  s1 -> s1 [0, 69] { R3438 += 1, R3394 += 1, R83 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3438 += 1 };
  s1 -> s3 [70, 70] { R3438 += 1, R3394 += 1, R83 += 1 };
  s1 -> s4 [70, 70] { R3438 += 1, R3394 += 1, R83 += 1 };
  s1 -> s1 [71, 65535] { R3438 += 1, R3394 += 1, R83 += 1 };
  s2 -> s1 [0, 69] { R3438 += 1, R3394 += 1, R83 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3438 += 1, R3393 += 1, R3394 += 1 };
  s2 -> s3 [70, 70] { R3438 += 1, R3394 += 1, R83 += 1 };
  s2 -> s4 [70, 70] { R3438 += 1, R3394 += 1, R83 += 1 };
  s2 -> s1 [71, 65535] { R3438 += 1, R3394 += 1, R83 += 1 };
  s3 -> s6 [0, 65535] { R3438 += 1 };
  s3 -> s3 [0, 65535] { R3438 += 1, R3394 += 1, R83 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3438 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3438 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 69] { R3440 += 1, R3396 += 1, R85 += 1 };
  s0 -> s0 [0, 65535] { R3439 += 1, R3440 += 1 };
  s0 -> s2 [0, 65535] { R3440 += 1, R3395 += 1, R3396 += 1 };
  s0 -> s3 [70, 70] { R3440 += 1, R3396 += 1, R85 += 1 };
  s0 -> s4 [70, 70] { R3440 += 1, R3396 += 1, R85 += 1 };
  s0 -> s1 [71, 65535] { R3440 += 1, R3396 += 1, R85 += 1 };
  s1 -> s1 [0, 69] { R3440 += 1, R3396 += 1, R85 += 1 };
  s1 -> s1 [0, 65535] { R3440 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [70, 70] { R3440 += 1, R3396 += 1, R85 += 1 };
  s1 -> s4 [70, 70] { R3440 += 1, R3396 += 1, R85 += 1 };
  s1 -> s1 [71, 65535] { R3440 += 1, R3396 += 1, R85 += 1 };
  s2 -> s1 [0, 69] { R3440 += 1, R3396 += 1, R85 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3440 += 1, R3395 += 1, R3396 += 1 };
  s2 -> s3 [70, 70] { R3440 += 1, R3396 += 1, R85 += 1 };
  s2 -> s4 [70, 70] { R3440 += 1, R3396 += 1, R85 += 1 };
  s2 -> s1 [71, 65535] { R3440 += 1, R3396 += 1, R85 += 1 };
  s3 -> s3 [0, 65535] { R3440 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R3440 += 1 };
  s4 -> s4 [0, 65535] { R3440 += 1, R3396 += 1, R85 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3440 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 69] { R3442 += 1, R3398 += 1, R88 += 1 };
  s0 -> s2 [0, 69] { R3442 += 1, R3398 += 1, R87 += 1, R88 += 1 };
  s0 -> s3 [0, 65535] { R3442 += 1, R3397 += 1, R3398 += 1 };
  s0 -> s0 [0, 65535] { R3441 += 1, R3442 += 1 };
  s0 -> s4 [70, 70] { R3442 += 1, R3398 += 1, R87 += 1, R88 += 1 };
  s0 -> s5 [70, 70] { R3442 += 1, R3398 += 1, R88 += 1 };
  s0 -> s6 [70, 70] { R3442 += 1, R3398 += 1, R88 += 1 };
  s0 -> s7 [70, 70] { R3442 += 1, R3398 += 1, R87 += 1, R88 += 1 };
  s0 -> s1 [71, 74] { R3442 += 1, R3398 += 1, R88 += 1 };
  s0 -> s2 [71, 65535] { R3442 += 1, R3398 += 1, R87 += 1, R88 += 1 };
  s0 -> s8 [75, 75] { R3442 += 1, R3398 += 1, R88 += 1 };
  s0 -> s1 [76, 65535] { R3442 += 1, R3398 += 1, R88 += 1 };
  s1 -> s1 [0, 69] { R3442 += 1, R3398 += 1, R88 += 1 };
  s1 -> s5 [70, 70] { R3442 += 1, R3398 += 1, R88 += 1 };
  s1 -> s6 [70, 70] { R3442 += 1, R3398 += 1, R88 += 1 };
  s1 -> s1 [71, 74] { R3442 += 1, R3398 += 1, R88 += 1 };
  s1 -> s8 [75, 75] { R3442 += 1, R3398 += 1, R88 += 1 };
  s1 -> s1 [76, 65535] { R3442 += 1, R3398 += 1, R88 += 1 };
  s2 -> s1 [0, 69] { R3442 += 1, R3398 += 1, R88 += 1 };
  s2 -> s2 [0, 69] { R3442 += 1, R3398 += 1, R87 += 1, R88 += 1 };
  s2 -> s4 [70, 70] { R3442 += 1, R3398 += 1, R87 += 1, R88 += 1 };
  s2 -> s5 [70, 70] { R3442 += 1, R3398 += 1, R88 += 1 };
  s2 -> s6 [70, 70] { R3442 += 1, R3398 += 1, R88 += 1 };
  s2 -> s7 [70, 70] { R3442 += 1, R3398 += 1, R87 += 1, R88 += 1 };
  s2 -> s1 [71, 74] { R3442 += 1, R3398 += 1, R88 += 1 };
  s2 -> s2 [71, 65535] { R3442 += 1, R3398 += 1, R87 += 1, R88 += 1 };
  s2 -> s8 [75, 75] { R3442 += 1, R3398 += 1, R88 += 1 };
  s2 -> s1 [76, 65535] { R3442 += 1, R3398 += 1, R88 += 1 };
  s3 -> s1 [0, 69] { R3442 += 1, R3398 += 1, R88 += 1 };
  s3 -> s2 [0, 69] { R3442 += 1, R3398 += 1, R87 += 1, R88 += 1 };
  s3 -> s3 [0, 65535] { R3442 += 1, R3397 += 1, R3398 += 1 };
  s3 -> s4 [70, 70] { R3442 += 1, R3398 += 1, R87 += 1, R88 += 1 };
  s3 -> s5 [70, 70] { R3442 += 1, R3398 += 1, R88 += 1 };
  s3 -> s6 [70, 70] { R3442 += 1, R3398 += 1, R88 += 1 };
  s3 -> s7 [70, 70] { R3442 += 1, R3398 += 1, R87 += 1, R88 += 1 };
  s3 -> s1 [71, 74] { R3442 += 1, R3398 += 1, R88 += 1 };
  s3 -> s2 [71, 65535] { R3442 += 1, R3398 += 1, R87 += 1, R88 += 1 };
  s3 -> s8 [75, 75] { R3442 += 1, R3398 += 1, R88 += 1 };
  s3 -> s1 [76, 65535] { R3442 += 1, R3398 += 1, R88 += 1 };
  s4 -> s6 [0, 74] { R3442 += 1, R3398 += 1, R88 += 1 };
  s4 -> s4 [0, 65535] { R3442 += 1, R3398 += 1, R87 += 1, R88 += 1 };
  s4 -> s11 [75, 75] { R3442 += 1, R3398 += 1, R88 += 1 };
  s4 -> s6 [76, 65535] { R3442 += 1, R3398 += 1, R88 += 1 };
  s6 -> s6 [0, 74] { R3442 += 1, R3398 += 1, R88 += 1 };
  s6 -> s11 [75, 75] { R3442 += 1, R3398 += 1, R88 += 1 };
  s6 -> s6 [76, 65535] { R3442 += 1, R3398 += 1, R88 += 1 };
  s8 -> s8 [0, 69] { R3442 += 1, R3398 += 1, R88 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R3442 += 1 };
  s8 -> s10 [70, 70] { R3442 += 1, R3398 += 1, R88 += 1 };
  s8 -> s11 [70, 70] { R3442 += 1, R3398 += 1, R88 += 1 };
  s8 -> s8 [71, 65535] { R3442 += 1, R3398 += 1, R88 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R3442 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s12 [0, 65535] { R3442 += 1 };
  s11 -> s11 [0, 65535] { R3442 += 1, R3398 += 1, R88 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R3442 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 69] { R3444 += 1, R3400 += 1, R91 += 1, R92 += 1 };
  s0 -> s2 [0, 65535] { R3444 += 1, R3399 += 1, R3400 += 1 };
  s0 -> s0 [0, 65535] { R3443 += 1, R3444 += 1 };
  s0 -> s3 [70, 70] { R3444 += 1, R3400 += 1, R91 += 1, R92 += 1 };
  s0 -> s4 [70, 70] { R3444 += 1, R3400 += 1, R91 += 1, R92 += 1 };
  s0 -> s1 [71, 65535] { R3444 += 1, R3400 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 69] { R3444 += 1, R3400 += 1, R91 += 1, R92 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3444 += 1 };
  s1 -> s3 [70, 70] { R3444 += 1, R3400 += 1, R91 += 1, R92 += 1 };
  s1 -> s4 [70, 70] { R3444 += 1, R3400 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [71, 65535] { R3444 += 1, R3400 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [0, 69] { R3444 += 1, R3400 += 1, R91 += 1, R92 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3444 += 1, R3399 += 1, R3400 += 1 };
  s2 -> s3 [70, 70] { R3444 += 1, R3400 += 1, R91 += 1, R92 += 1 };
  s2 -> s4 [70, 70] { R3444 += 1, R3400 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [71, 65535] { R3444 += 1, R3400 += 1, R91 += 1, R92 += 1 };
  s3 -> s3 [0, 65535] { R3444 += 1, R3400 += 1, R91 += 1, R92 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R3444 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3444 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3444 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 69] { R3446 += 1, R3402 += 1, R97 += 1, R98 += 1 };
  s0 -> s2 [0, 65535] { R3446 += 1, R3401 += 1, R3402 += 1 };
  s0 -> s0 [0, 65535] { R3445 += 1, R3446 += 1 };
  s0 -> s3 [70, 70] { R3446 += 1, R3402 += 1, R97 += 1, R98 += 1 };
  s0 -> s4 [70, 70] { R3446 += 1, R3402 += 1, R97 += 1, R98 += 1 };
  s0 -> s1 [71, 65535] { R3446 += 1, R3402 += 1, R97 += 1, R98 += 1 };
  s1 -> s1 [0, 69] { R3446 += 1, R3402 += 1, R97 += 1, R98 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3446 += 1 };
  s1 -> s3 [70, 70] { R3446 += 1, R3402 += 1, R97 += 1, R98 += 1 };
  s1 -> s4 [70, 70] { R3446 += 1, R3402 += 1, R97 += 1, R98 += 1 };
  s1 -> s1 [71, 65535] { R3446 += 1, R3402 += 1, R97 += 1, R98 += 1 };
  s2 -> s1 [0, 69] { R3446 += 1, R3402 += 1, R97 += 1, R98 += 1 };
  s2 -> s2 [0, 65535] { R3446 += 1, R3401 += 1, R3402 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [70, 70] { R3446 += 1, R3402 += 1, R97 += 1, R98 += 1 };
  s2 -> s4 [70, 70] { R3446 += 1, R3402 += 1, R97 += 1, R98 += 1 };
  s2 -> s1 [71, 65535] { R3446 += 1, R3402 += 1, R97 += 1, R98 += 1 };
  s3 -> s3 [0, 65535] { R3446 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3446 += 1, R3402 += 1, R97 += 1, R98 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R3446 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3446 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 69] { R3448 += 1, R3404 += 1, R2894 += 1, R2895 += 1, R2896 += 1 };
  s0 -> s2 [0, 69] { R3448 += 1, R3404 += 1, R2893 += 1, R2894 += 1 };
  s0 -> s0 [0, 65535] { R3447 += 1, R3448 += 1 };
  s0 -> s3 [0, 65535] { R3448 += 1, R3403 += 1, R3404 += 1 };
  s0 -> s4 [70, 70] { R3448 += 1, R3404 += 1, R2893 += 1, R2894 += 1 };
  s0 -> s5 [70, 70] { R3448 += 1, R3404 += 1, R2893 += 1, R2894 += 1 };
  s0 -> s6 [70, 70] { R3448 += 1, R3404 += 1, R2894 += 1, R2895 += 1, R2896 += 1 };
  s0 -> s7 [70, 70] { R3448 += 1, R3404 += 1, R2894 += 1, R2895 += 1, R2896 += 1 };
  s0 -> s1 [71, 65535] { R3448 += 1, R3404 += 1, R2894 += 1, R2895 += 1, R2896 += 1 };
  s0 -> s2 [71, 65535] { R3448 += 1, R3404 += 1, R2893 += 1, R2894 += 1 };
  s1 -> s1 [0, 69] { R3448 += 1, R3404 += 1, R2894 += 1, R2895 += 1, R2896 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s1 [0, 65535] { R3448 += 1 };
  s1 -> s6 [70, 70] { R3448 += 1, R3404 += 1, R2894 += 1, R2895 += 1, R2896 += 1 };
  s1 -> s7 [70, 70] { R3448 += 1, R3404 += 1, R2894 += 1, R2895 += 1, R2896 += 1 };
  s1 -> s1 [71, 65535] { R3448 += 1, R3404 += 1, R2894 += 1, R2895 += 1, R2896 += 1 };
  s2 -> s1 [0, 69] { R3448 += 1, R3404 += 1, R2894 += 1, R2895 += 1, R2896 += 1 };
  s2 -> s2 [0, 69] { R3448 += 1, R3404 += 1, R2893 += 1, R2894 += 1 };
  s2 -> s4 [70, 70] { R3448 += 1, R3404 += 1, R2893 += 1, R2894 += 1 };
  s2 -> s5 [70, 70] { R3448 += 1, R3404 += 1, R2893 += 1, R2894 += 1 };
  s2 -> s6 [70, 70] { R3448 += 1, R3404 += 1, R2894 += 1, R2895 += 1, R2896 += 1 };
  s2 -> s7 [70, 70] { R3448 += 1, R3404 += 1, R2894 += 1, R2895 += 1, R2896 += 1 };
  s2 -> s1 [71, 65535] { R3448 += 1, R3404 += 1, R2894 += 1, R2895 += 1, R2896 += 1 };
  s2 -> s2 [71, 65535] { R3448 += 1, R3404 += 1, R2893 += 1, R2894 += 1 };
  s3 -> s1 [0, 69] { R3448 += 1, R3404 += 1, R2894 += 1, R2895 += 1, R2896 += 1 };
  s3 -> s2 [0, 69] { R3448 += 1, R3404 += 1, R2893 += 1, R2894 += 1 };
  s3 -> s3 [0, 65535] { R3448 += 1, R3403 += 1, R3404 += 1 };
  s3 -> s4 [70, 70] { R3448 += 1, R3404 += 1, R2893 += 1, R2894 += 1 };
  s3 -> s5 [70, 70] { R3448 += 1, R3404 += 1, R2893 += 1, R2894 += 1 };
  s3 -> s6 [70, 70] { R3448 += 1, R3404 += 1, R2894 += 1, R2895 += 1, R2896 += 1 };
  s3 -> s7 [70, 70] { R3448 += 1, R3404 += 1, R2894 += 1, R2895 += 1, R2896 += 1 };
  s3 -> s1 [71, 65535] { R3448 += 1, R3404 += 1, R2894 += 1, R2895 += 1, R2896 += 1 };
  s3 -> s2 [71, 65535] { R3448 += 1, R3404 += 1, R2893 += 1, R2894 += 1 };
  s5 -> s5 [0, 65535] { R3448 += 1, R3404 += 1, R2893 += 1, R2894 += 1 };
  s5 -> s7 [0, 65535] { R3448 += 1, R3404 += 1, R2894 += 1, R2895 += 1, R2896 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R3448 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R3448 += 1, R3404 += 1, R2894 += 1, R2895 += 1, R2896 += 1 };
  s7 -> s9 [0, 65535] { R3448 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R3448 += 1 };
  accepting s8, s9, s6, s1, s7;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 69] { R3450 += 1, R3406 += 1, R3341 += 1, R3342 += 1 };
  s0 -> s2 [0, 69] { R3450 += 1, R3406 += 1, R3342 += 1, R3343 += 1, R3344 += 1 };
  s0 -> s0 [0, 65535] { R3449 += 1, R3450 += 1 };
  s0 -> s3 [0, 65535] { R3450 += 1, R3405 += 1, R3406 += 1 };
  s0 -> s4 [70, 70] { R3450 += 1, R3406 += 1, R3342 += 1, R3343 += 1, R3344 += 1 };
  s0 -> s5 [70, 70] { R3450 += 1, R3406 += 1, R3342 += 1, R3343 += 1, R3344 += 1 };
  s0 -> s6 [70, 70] { R3450 += 1, R3406 += 1, R3341 += 1, R3342 += 1 };
  s0 -> s7 [70, 70] { R3450 += 1, R3406 += 1, R3341 += 1, R3342 += 1 };
  s0 -> s1 [71, 65535] { R3450 += 1, R3406 += 1, R3341 += 1, R3342 += 1 };
  s0 -> s2 [71, 65535] { R3450 += 1, R3406 += 1, R3342 += 1, R3343 += 1, R3344 += 1 };
  s1 -> s1 [0, 69] { R3450 += 1, R3406 += 1, R3341 += 1, R3342 += 1 };
  s1 -> s2 [0, 69] { R3450 += 1, R3406 += 1, R3342 += 1, R3343 += 1, R3344 += 1 };
  s1 -> s4 [70, 70] { R3450 += 1, R3406 += 1, R3342 += 1, R3343 += 1, R3344 += 1 };
  s1 -> s5 [70, 70] { R3450 += 1, R3406 += 1, R3342 += 1, R3343 += 1, R3344 += 1 };
  s1 -> s6 [70, 70] { R3450 += 1, R3406 += 1, R3341 += 1, R3342 += 1 };
  s1 -> s7 [70, 70] { R3450 += 1, R3406 += 1, R3341 += 1, R3342 += 1 };
  s1 -> s1 [71, 65535] { R3450 += 1, R3406 += 1, R3341 += 1, R3342 += 1 };
  s1 -> s2 [71, 65535] { R3450 += 1, R3406 += 1, R3342 += 1, R3343 += 1, R3344 += 1 };
  s2 -> s2 [0, 69] { R3450 += 1, R3406 += 1, R3342 += 1, R3343 += 1, R3344 += 1 };
  s2 -> s9 [0, 65535];
  s2 -> s2 [0, 65535] { R3450 += 1 };
  s2 -> s4 [70, 70] { R3450 += 1, R3406 += 1, R3342 += 1, R3343 += 1, R3344 += 1 };
  s2 -> s5 [70, 70] { R3450 += 1, R3406 += 1, R3342 += 1, R3343 += 1, R3344 += 1 };
  s2 -> s2 [71, 65535] { R3450 += 1, R3406 += 1, R3342 += 1, R3343 += 1, R3344 += 1 };
  s3 -> s1 [0, 69] { R3450 += 1, R3406 += 1, R3341 += 1, R3342 += 1 };
  s3 -> s2 [0, 69] { R3450 += 1, R3406 += 1, R3342 += 1, R3343 += 1, R3344 += 1 };
  s3 -> s3 [0, 65535] { R3450 += 1, R3405 += 1, R3406 += 1 };
  s3 -> s4 [70, 70] { R3450 += 1, R3406 += 1, R3342 += 1, R3343 += 1, R3344 += 1 };
  s3 -> s5 [70, 70] { R3450 += 1, R3406 += 1, R3342 += 1, R3343 += 1, R3344 += 1 };
  s3 -> s6 [70, 70] { R3450 += 1, R3406 += 1, R3341 += 1, R3342 += 1 };
  s3 -> s7 [70, 70] { R3450 += 1, R3406 += 1, R3341 += 1, R3342 += 1 };
  s3 -> s1 [71, 65535] { R3450 += 1, R3406 += 1, R3341 += 1, R3342 += 1 };
  s3 -> s2 [71, 65535] { R3450 += 1, R3406 += 1, R3342 += 1, R3343 += 1, R3344 += 1 };
  s4 -> s4 [0, 65535] { R3450 += 1 };
  s4 -> s9 [0, 65535];
  s5 -> s8 [0, 65535] { R3450 += 1 };
  s5 -> s9 [0, 65535];
  s5 -> s5 [0, 65535] { R3450 += 1, R3406 += 1, R3342 += 1, R3343 += 1, R3344 += 1 };
  s6 -> s5 [0, 65535] { R3450 += 1, R3406 += 1, R3342 += 1, R3343 += 1, R3344 += 1 };
  s6 -> s6 [0, 65535] { R3450 += 1, R3406 += 1, R3341 += 1, R3342 += 1 };
  s8 -> s8 [0, 65535] { R3450 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s4, s8, s5, s2, s9;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [102, 102];
  accepting s1;
};
};
constraint R2 = R3368 && R3 = R3450 && R23 - R3450 = -1 && R24 = R3450 && R25 - R3450 = -1 && R26 = R3450 && R27 = 0 && R28 = 1 && R29 = 0 && R30 = 1 && R45 + R84 + R83 + -1*R2898 + -1*R2894 - R66 = 0 && R49 + R89 + R87 = 0 && R50 + R90 + R88 + -1*R2898 + -1*R2894 - R66 = 0 && R55 + R96 + R93 + -1*R2900 + -1*R2896 - R68 = 0 && R65 + R2897 + R2893 = 0 && R67 + R2899 + R2895 = 0 && R3367 = 0 && R3391 = 0 && R3392 = 0 && R3397 = 0 && R3398 = 0 && R3403 = 0 && R3404 = 0 && R3405 = 0 && R3406 = 0 && R3407 = 0 && R3408 = R3450 && R3409 = 0 && R3410 = R3450 && R3411 = 0 && R3412 = R3450 && R3413 = 0 && R3414 = R3450 && R3415 = 0 && R3416 = R3450 && R3417 = 0 && R3418 = R3450 && R3419 = 0 && R3420 = R3450 && R3421 = 0 && R3422 = R3450 && R3423 = 0 && R3424 = R3450 && R3425 = 0 && R3426 = R3450 && R3427 = 0 && R3428 = R3450 && R3429 = 0 && R3430 = R3450 && R3431 = 0 && R3432 = R3450 && R3433 = 0 && R3434 = R3450 && R3435 = 0 && R3436 = R3450 && R3437 = 0 && R3438 = R3450 && R3439 = 0 && R3440 = R3450 && R3441 = 0 && R3442 = R3450 && R3443 = 0 && R3444 = R3450 && R3445 = 0 && R3446 = R3450 && R3447 = 0 && R3448 = R3450 && R3449 = 0 && R12 < 1 && R15 < 1 && R16 < 1 && R47 + R86 + R85 < 1 && R61 + R102 + R99 < 1 && -1*R2898 + -1*R2894 - R66 < 1 && -1*R2900 + -1*R2896 - R68 < 1 && -1 < R3368 && 0 < R3450 && (R53 + R94 + R91 != 0 || R54 + R95 + R92 + -1*R2898 + -1*R2894 - R66 = 0 || R66 + R2898 + R2894 < 1) && (R59 + R100 + R97 != 0 || R60 + R101 + R98 + -1*R2898 + -1*R2894 - R66 = 0 || R66 + R2898 + R2894 < 1) && (R66 + R2898 + R2894 != 0 || ((R53 + R94 + R91 != 0 || R54 + R95 + R92 = 0 || R68 + R2900 + R2896 < 1) && (R53 + R94 + R91 = 0 || R68 + R2900 + R2896 < 1))) && (R66 + R2898 + R2894 != 0 || ((R59 + R100 + R97 != 0 || R60 + R101 + R98 = 0 || R68 + R2900 + R2896 < 1) && (R59 + R100 + R97 = 0 || R68 + R2900 + R2896 < 1))) && (R66 + R2898 + R2894 != 0 || ((R73 + R3346 + R3341 != 0 || R74 + R3347 + R3342 = 0 || R68 + R2900 + R2896 < 1) && (R73 + R3346 + R3341 = 0 || R68 + R2900 + R2896 < 1))) && (R68 + R2900 + R2896 != 0 || R77 + R3350 + R3345 = 0 || (R75 + R3348 + R3343 = 0 && R76 + R3349 + R3344 = 0)) && (R73 + R3346 + R3341 != 0 || R66 + R2898 + R2894 + -1*R3347 + -1*R3342 - R74 = 0 || R66 + R2898 + R2894 < 1) && (R75 + R3348 + R3343 != 0 || R68 + R2900 + R2896 + -1*R3349 + -1*R3344 - R76 = 0 || R68 + R2900 + R2896 < 1) && (R3351 != 0 || R3352 = R3368 || (R20 = 0 && R3368 = 0)) && (R3353 != 0 || R3354 = R3368 || (R20 = 0 && R3368 = 0)) && (R3355 != 0 || R3356 = R3368 || (R20 = 0 && R3368 = 0)) && (R3357 != 0 || R3358 = R3368 || (R20 = 0 && R3368 = 0)) && (R3359 != 0 || R3360 = R3368 || (R20 = 0 && R3368 = 0)) && (R3361 != 0 || R3362 = R3368 || (R20 = 0 && R3368 = 0)) && (R3363 != 0 || R3364 = R3368 || (R20 = 0 && R3368 = 0)) && (R3365 != 0 || R3366 = R3368 || (R20 = 0 && R3368 = 0)) && (R3369 != 0 || R3368 = R3370 || (R20 = 0 && R3368 = 0)) && (R21 = 0 || (R3389 = 0 && R3390 = 0)) && (R21 = 0 || (R3393 = 0 && R3394 = 0)) && (R21 = 0 || (R3395 = 0 && R3396 = 0)) && (R21 = 0 || (R3399 = 0 && R3400 = 0)) && (R21 = 0 || (R3401 = 0 && R3402 = 0)) && (R22 = 0 || (R3371 = 0 && R3372 = 0)) && (R22 = 0 || (R3373 = 0 && R3374 = 0)) && (R22 = 0 || (R3375 = 0 && R3376 = 0)) && (R22 = 0 || (R3377 = 0 && R3378 = 0)) && (R22 = 0 || (R3379 = 0 && R3380 = 0)) && (R22 = 0 || (R3381 = 0 && R3382 = 0)) && (R22 = 0 || (R3383 = 0 && R3384 = 0)) && (R22 = 0 || (R3385 = 0 && R3386 = 0)) && (R22 = 0 || (R3387 = 0 && R3388 = 0)) && (R53 + R94 + R91 = 0 || R66 + R2898 + R2894 < 1) && (R59 + R100 + R97 = 0 || R66 + R2898 + R2894 < 1) && (R73 + R3346 + R3341 = 0 || R66 + R2898 + R2894 < 1) && (R75 + R3348 + R3343 = 0 || R68 + R2900 + R2896 < 1) && (R3351 = 0 || (R20 = 0 && R3368 = 0)) && (R3353 = 0 || (R20 = 0 && R3368 = 0)) && (R3355 = 0 || (R20 = 0 && R3368 = 0)) && (R3357 = 0 || (R20 = 0 && R3368 = 0)) && (R3359 = 0 || (R20 = 0 && R3368 = 0)) && (R3361 = 0 || (R20 = 0 && R3368 = 0)) && (R3363 = 0 || (R20 = 0 && R3368 = 0)) && (R3365 = 0 || (R20 = 0 && R3368 = 0)) && (R3369 = 0 || (R20 = 0 && R3368 = 0));
// End of Parikh automata intersection problem
