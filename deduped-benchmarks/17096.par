// Parikh automata intersection problem, generated by OSTRICH+
counter int R100, R101, R102, R12, R15, R16, R1777, R1778, R1779, R1780, R1781, R1782, R1783, R1784, R1785, R1786, R1787, R1788, R1789, R1790, R1791, R1792, R1793, R1794, R1795, R1796, R1797, R1798, R1799, R1800, R1801, R1802, R1803, R1804, R1805, R1806, R1807, R1808, R1809, R1810, R1811, R1812, R1813, R1814, R1815, R1816, R1817, R1818, R1819, R1820, R1821, R1822, R1823, R1824, R1825, R1826, R1827, R1828, R1829, R1830, R1831, R1832, R1833, R1834, R1835, R1836, R1837, R1838, R1839, R1840, R1841, R1842, R1843, R1844, R1845, R1846, R1847, R1848, R1849, R1850, R1851, R1852, R1853, R1854, R1855, R1856, R1857, R1858, R1859, R1860, R1861, R1862, R1863, R1864, R1865, R1866, R1867, R1868, R1869, R1870, R1871, R1872, R1873, R1874, R1875, R1876, R1877, R1878, R1879, R1880, R1881, R1882, R1883, R1884, R1885, R1886, R1887, R1888, R1889, R1890, R1891, R1892, R1893, R1894, R2, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R4, R45, R47, R49, R5, R50, R53, R54, R55, R59, R60, R61, R65, R66, R67, R68, R73, R74, R75, R76, R77, R83, R84, R85, R86, R87, R88, R89, R90, R91, R92, R93, R94, R95, R96, R97, R98, R99;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [70, 70];
  s0 -> s0 [71, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [70, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R15 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 69];
  s0 -> s0 [0, 65535] { R16 += 1 };
  s0 -> s2 [70, 70];
  s0 -> s1 [71, 65535];
  s1 -> s1 [0, 69];
  s1 -> s2 [70, 70];
  s1 -> s1 [71, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R24 += 1 };
  s0 -> s0 [0, 65535] { R23 += 1, R24 += 1 };
  s0 -> s2 [9, 13] { R24 += 1 };
  s0 -> s1 [14, 31] { R24 += 1 };
  s0 -> s2 [32, 32] { R24 += 1 };
  s0 -> s1 [33, 65535] { R24 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R24 += 1 };
  s2 -> s1 [0, 65535] { R24 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R25 += 1, R26 += 1 };
  s1 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R28 += 1 };
  s0 -> s0 [0, 65535] { R27 += 1, R28 += 1 };
  s0 -> s2 [9, 13] { R28 += 1 };
  s0 -> s1 [14, 31] { R28 += 1 };
  s0 -> s2 [32, 32] { R28 += 1 };
  s0 -> s1 [33, 65535] { R28 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R28 += 1 };
  s2 -> s1 [0, 65535] { R28 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R29 += 1, R30 += 1 };
  s1 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R1816 += 1, R22 += 1 };
  s0 -> s0 [0, 65535] { R1815 += 1, R1816 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R1816 += 1, R22 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 69] { R1818 += 1 };
  s0 -> s0 [0, 65535] { R1817 += 1, R1818 += 1 };
  s0 -> s2 [70, 70] { R1818 += 1 };
  s0 -> s3 [70, 70] { R1818 += 1 };
  s0 -> s1 [76, 65535] { R1818 += 1 };
  s1 -> s1 [0, 69] { R1818 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R1818 += 1 };
  s1 -> s3 [70, 70] { R1818 += 1 };
  s1 -> s1 [76, 65535] { R1818 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 70] { R1818 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [76, 65535] { R1818 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 69] { R1820 += 1, R45 += 1 };
  s0 -> s0 [0, 65535] { R1819 += 1, R1820 += 1 };
  s0 -> s2 [70, 70] { R1820 += 1, R45 += 1 };
  s0 -> s3 [70, 70] { R1820 += 1, R45 += 1 };
  s0 -> s1 [71, 65535] { R1820 += 1, R45 += 1 };
  s1 -> s1 [0, 69] { R1820 += 1, R45 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R1820 += 1, R45 += 1 };
  s1 -> s3 [70, 70] { R1820 += 1, R45 += 1 };
  s1 -> s1 [71, 65535] { R1820 += 1, R45 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R1820 += 1, R45 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 69] { R1822 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R1821 += 1, R1822 += 1 };
  s0 -> s2 [70, 70] { R1822 += 1, R47 += 1 };
  s0 -> s3 [70, 70] { R1822 += 1, R47 += 1 };
  s0 -> s1 [71, 65535] { R1822 += 1, R47 += 1 };
  s1 -> s1 [0, 69] { R1822 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R1822 += 1, R47 += 1 };
  s1 -> s3 [70, 70] { R1822 += 1, R47 += 1 };
  s1 -> s1 [71, 65535] { R1822 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1822 += 1, R47 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 69] { R1824 += 1, R49 += 1, R50 += 1 };
  s0 -> s0 [0, 65535] { R1823 += 1, R1824 += 1 };
  s0 -> s2 [70, 70] { R1824 += 1, R49 += 1, R50 += 1 };
  s0 -> s3 [70, 70] { R1824 += 1, R49 += 1, R50 += 1 };
  s0 -> s1 [71, 65535] { R1824 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 69] { R1824 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R1824 += 1, R49 += 1, R50 += 1 };
  s1 -> s3 [70, 70] { R1824 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [71, 65535] { R1824 += 1, R49 += 1, R50 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1824 += 1, R49 += 1, R50 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 69] { R1826 += 1, R53 += 1, R54 += 1 };
  s0 -> s0 [0, 65535] { R1825 += 1, R1826 += 1 };
  s0 -> s2 [70, 70] { R1826 += 1, R53 += 1, R54 += 1 };
  s0 -> s3 [70, 70] { R1826 += 1, R53 += 1, R54 += 1 };
  s0 -> s1 [71, 65535] { R1826 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 69] { R1826 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R1826 += 1, R53 += 1, R54 += 1 };
  s1 -> s3 [70, 70] { R1826 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [71, 65535] { R1826 += 1, R53 += 1, R54 += 1 };
  s2 -> s2 [0, 65535] { R1826 += 1, R53 += 1, R54 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 69] { R1828 += 1, R59 += 1, R60 += 1 };
  s0 -> s0 [0, 65535] { R1827 += 1, R1828 += 1 };
  s0 -> s2 [70, 70] { R1828 += 1, R59 += 1, R60 += 1 };
  s0 -> s3 [70, 70] { R1828 += 1, R59 += 1, R60 += 1 };
  s0 -> s1 [71, 65535] { R1828 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 69] { R1828 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R1828 += 1, R59 += 1, R60 += 1 };
  s1 -> s3 [70, 70] { R1828 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [71, 65535] { R1828 += 1, R59 += 1, R60 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R1828 += 1, R59 += 1, R60 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 69] { R1830 += 1, R65 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R1829 += 1, R1830 += 1 };
  s0 -> s2 [70, 70] { R1830 += 1, R65 += 1, R66 += 1 };
  s0 -> s3 [70, 70] { R1830 += 1, R65 += 1, R66 += 1 };
  s0 -> s1 [71, 65535] { R1830 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 69] { R1830 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R1830 += 1, R65 += 1, R66 += 1 };
  s1 -> s3 [70, 70] { R1830 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [71, 65535] { R1830 += 1, R65 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R1830 += 1, R65 += 1, R66 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 69] { R1832 += 1, R73 += 1, R74 += 1 };
  s0 -> s0 [0, 65535] { R1831 += 1, R1832 += 1 };
  s0 -> s2 [70, 70] { R1832 += 1, R73 += 1, R74 += 1 };
  s0 -> s3 [70, 70] { R1832 += 1, R73 += 1, R74 += 1 };
  s0 -> s1 [71, 65535] { R1832 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 69] { R1832 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R1832 += 1, R73 += 1, R74 += 1 };
  s1 -> s3 [70, 70] { R1832 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [71, 65535] { R1832 += 1, R73 += 1, R74 += 1 };
  s2 -> s2 [0, 65535] { R1832 += 1, R73 += 1, R74 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 69] { R1852 += 1 };
  s0 -> s0 [0, 65535] { R1851 += 1, R1852 += 1 };
  s0 -> s2 [70, 70] { R1852 += 1 };
  s0 -> s1 [71, 65535] { R1852 += 1 };
  s1 -> s1 [0, 69] { R1852 += 1 };
  s1 -> s2 [70, 70] { R1852 += 1 };
  s1 -> s1 [71, 65535] { R1852 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1852 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R1854 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R1853 += 1, R1854 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R1854 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 69] { R1856 += 1 };
  s0 -> s0 [0, 65535] { R1855 += 1, R1856 += 1 };
  s0 -> s2 [0, 65535] { R1856 += 1, R12 += 1 };
  s0 -> s3 [70, 70] { R1856 += 1 };
  s0 -> s1 [71, 65535] { R1856 += 1 };
  s1 -> s1 [0, 69] { R1856 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [70, 70] { R1856 += 1 };
  s1 -> s1 [71, 65535] { R1856 += 1 };
  s2 -> s1 [0, 69] { R1856 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1856 += 1, R12 += 1 };
  s2 -> s3 [70, 70] { R1856 += 1 };
  s2 -> s1 [71, 65535] { R1856 += 1 };
  s3 -> s3 [0, 65535] { R1856 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 69] { R1858 += 1, R1796 += 1 };
  s0 -> s0 [0, 65535] { R1857 += 1, R1858 += 1 };
  s0 -> s2 [0, 65535] { R1858 += 1, R1795 += 1, R1796 += 1 };
  s0 -> s1 [71, 65535] { R1858 += 1, R1796 += 1 };
  s1 -> s1 [0, 69] { R1858 += 1, R1796 += 1 };
  s1 -> s1 [0, 65535] { R1858 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [71, 65535] { R1858 += 1, R1796 += 1 };
  s2 -> s1 [0, 69] { R1858 += 1, R1796 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1858 += 1, R1795 += 1, R1796 += 1 };
  s2 -> s1 [71, 65535] { R1858 += 1, R1796 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R1860 += 1, R1798 += 1, R20 += 1 };
  s0 -> s2 [0, 65535] { R1860 += 1, R1797 += 1, R1798 += 1 };
  s0 -> s0 [0, 65535] { R1859 += 1, R1860 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R1860 += 1 };
  s1 -> s1 [0, 65535] { R1860 += 1, R1798 += 1, R20 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R1860 += 1, R1798 += 1, R20 += 1 };
  s2 -> s2 [0, 65535] { R1860 += 1, R1797 += 1, R1798 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1860 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 70] { R1862 += 1, R1800 += 1 };
  s0 -> s0 [0, 65535] { R1861 += 1, R1862 += 1 };
  s0 -> s2 [0, 65535] { R1862 += 1, R1799 += 1, R1800 += 1 };
  s0 -> s1 [75, 65535] { R1862 += 1, R1800 += 1 };
  s1 -> s1 [0, 70] { R1862 += 1, R1800 += 1 };
  s1 -> s1 [0, 65535] { R1862 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [75, 65535] { R1862 += 1, R1800 += 1 };
  s2 -> s1 [0, 70] { R1862 += 1, R1800 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1862 += 1, R1799 += 1, R1800 += 1 };
  s2 -> s1 [75, 65535] { R1862 += 1, R1800 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R1864 += 1, R1801 += 1, R1802 += 1 };
  s0 -> s0 [0, 65535] { R1863 += 1, R1864 += 1 };
  s0 -> s2 [0, 65535] { R1864 += 1, R1802 += 1, R84 += 1 };
  s1 -> s1 [0, 65535] { R1864 += 1, R1801 += 1, R1802 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R1864 += 1, R1802 += 1, R84 += 1 };
  s2 -> s3 [0, 65535] { R1864 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1864 += 1, R1802 += 1, R84 += 1 };
  s3 -> s3 [0, 65535] { R1864 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 74] { R1866 += 1, R1804 += 1 };
  s0 -> s2 [0, 65535] { R1866 += 1, R1803 += 1, R1804 += 1 };
  s0 -> s3 [0, 65535] { R1866 += 1, R1804 += 1, R86 += 1 };
  s0 -> s0 [0, 65535] { R1865 += 1, R1866 += 1 };
  s0 -> s1 [76, 65535] { R1866 += 1, R1804 += 1 };
  s1 -> s1 [0, 74] { R1866 += 1, R1804 += 1 };
  s1 -> s1 [0, 65535] { R1866 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [76, 65535] { R1866 += 1, R1804 += 1 };
  s2 -> s1 [0, 74] { R1866 += 1, R1804 += 1 };
  s2 -> s2 [0, 65535] { R1866 += 1, R1803 += 1, R1804 += 1 };
  s2 -> s3 [0, 65535] { R1866 += 1, R1804 += 1, R86 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [76, 65535] { R1866 += 1, R1804 += 1 };
  s3 -> s1 [0, 74] { R1866 += 1, R1804 += 1 };
  s3 -> s4 [0, 65535] { R1866 += 1 };
  s3 -> s3 [0, 65535] { R1866 += 1, R1804 += 1, R86 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [76, 65535] { R1866 += 1, R1804 += 1 };
  s4 -> s4 [0, 65535] { R1866 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 65535] { R1868 += 1, R1806 += 1, R90 += 1 };
  s0 -> s2 [0, 65535] { R1868 += 1, R1806 += 1 };
  s0 -> s3 [0, 65535] { R1868 += 1, R1805 += 1, R1806 += 1 };
  s0 -> s0 [0, 65535] { R1867 += 1, R1868 += 1 };
  s1 -> s1 [0, 65535] { R1868 += 1, R1806 += 1, R90 += 1 };
  s1 -> s2 [0, 65535] { R1868 += 1, R1806 += 1 };
  s1 -> s5 [0, 65535] { R1868 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1868 += 1, R1806 += 1 };
  s2 -> s5 [0, 65535] { R1868 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R1868 += 1, R1806 += 1, R90 += 1 };
  s3 -> s2 [0, 65535] { R1868 += 1, R1806 += 1 };
  s3 -> s3 [0, 65535] { R1868 += 1, R1805 += 1, R1806 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1868 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R1870 += 1, R1807 += 1, R1808 += 1 };
  s0 -> s2 [0, 65535] { R1870 += 1, R1808 += 1, R95 += 1, R96 += 1 };
  s0 -> s0 [0, 65535] { R1869 += 1, R1870 += 1 };
  s0 -> s3 [0, 65535] { R1870 += 1, R1808 += 1, R94 += 1, R95 += 1 };
  s1 -> s1 [0, 65535] { R1870 += 1, R1807 += 1, R1808 += 1 };
  s1 -> s2 [0, 65535] { R1870 += 1, R1808 += 1, R95 += 1, R96 += 1 };
  s1 -> s3 [0, 65535] { R1870 += 1, R1808 += 1, R94 += 1, R95 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1870 += 1, R1808 += 1, R95 += 1, R96 += 1 };
  s2 -> s6 [0, 65535] { R1870 += 1, R1808 += 1 };
  s2 -> s4 [0, 65535] { R1870 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R1870 += 1, R1808 += 1, R95 += 1, R96 += 1 };
  s3 -> s3 [0, 65535] { R1870 += 1, R1808 += 1, R94 += 1, R95 += 1 };
  s3 -> s4 [0, 65535] { R1870 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1870 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1870 += 1, R1808 += 1 };
  s6 -> s4 [0, 65535] { R1870 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 74] { R1872 += 1, R1810 += 1, R101 += 1 };
  s0 -> s2 [0, 65535] { R1872 += 1, R1809 += 1, R1810 += 1 };
  s0 -> s3 [0, 65535] { R1872 += 1, R1810 += 1, R101 += 1, R102 += 1 };
  s0 -> s4 [0, 65535] { R1872 += 1, R1810 += 1, R100 += 1, R101 += 1 };
  s0 -> s0 [0, 65535] { R1871 += 1, R1872 += 1 };
  s0 -> s1 [76, 65535] { R1872 += 1, R1810 += 1, R101 += 1 };
  s1 -> s1 [0, 74] { R1872 += 1, R1810 += 1, R101 += 1 };
  s1 -> s5 [0, 65535] { R1872 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R1872 += 1, R1810 += 1 };
  s1 -> s1 [76, 65535] { R1872 += 1, R1810 += 1, R101 += 1 };
  s2 -> s1 [0, 74] { R1872 += 1, R1810 += 1, R101 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R1872 += 1, R1809 += 1, R1810 += 1 };
  s2 -> s3 [0, 65535] { R1872 += 1, R1810 += 1, R101 += 1, R102 += 1 };
  s2 -> s4 [0, 65535] { R1872 += 1, R1810 += 1, R100 += 1, R101 += 1 };
  s2 -> s1 [76, 65535] { R1872 += 1, R1810 += 1, R101 += 1 };
  s3 -> s1 [0, 74] { R1872 += 1, R1810 += 1, R101 += 1 };
  s3 -> s5 [0, 65535] { R1872 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R1872 += 1, R1810 += 1, R101 += 1, R102 += 1 };
  s3 -> s7 [0, 65535] { R1872 += 1, R1810 += 1 };
  s3 -> s1 [76, 65535] { R1872 += 1, R1810 += 1, R101 += 1 };
  s4 -> s1 [0, 74] { R1872 += 1, R1810 += 1, R101 += 1 };
  s4 -> s5 [0, 65535] { R1872 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s3 [0, 65535] { R1872 += 1, R1810 += 1, R101 += 1, R102 += 1 };
  s4 -> s4 [0, 65535] { R1872 += 1, R1810 += 1, R100 += 1, R101 += 1 };
  s4 -> s1 [76, 65535] { R1872 += 1, R1810 += 1, R101 += 1 };
  s5 -> s5 [0, 65535] { R1872 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R1872 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R1872 += 1, R1810 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 74] { R1874 += 1, R1812 += 1, R1782 += 1, R1784 += 1 };
  s0 -> s0 [0, 65535] { R1873 += 1, R1874 += 1 };
  s0 -> s2 [0, 65535] { R1874 += 1, R1812 += 1, R1781 += 1, R1782 += 1 };
  s0 -> s3 [0, 65535] { R1874 += 1, R1811 += 1, R1812 += 1 };
  s0 -> s4 [0, 65535] { R1874 += 1, R1812 += 1, R1782 += 1, R1783 += 1, R1784 += 1 };
  s0 -> s5 [75, 75] { R1874 += 1, R1812 += 1, R1782 += 1, R1784 += 1 };
  s0 -> s1 [76, 65535] { R1874 += 1, R1812 += 1, R1782 += 1, R1784 += 1 };
  s1 -> s1 [0, 74] { R1874 += 1, R1812 += 1, R1782 += 1, R1784 += 1 };
  s1 -> s5 [75, 75] { R1874 += 1, R1812 += 1, R1782 += 1, R1784 += 1 };
  s1 -> s1 [76, 65535] { R1874 += 1, R1812 += 1, R1782 += 1, R1784 += 1 };
  s2 -> s1 [0, 74] { R1874 += 1, R1812 += 1, R1782 += 1, R1784 += 1 };
  s2 -> s2 [0, 65535] { R1874 += 1, R1812 += 1, R1781 += 1, R1782 += 1 };
  s2 -> s4 [0, 65535] { R1874 += 1, R1812 += 1, R1782 += 1, R1783 += 1, R1784 += 1 };
  s2 -> s5 [75, 75] { R1874 += 1, R1812 += 1, R1782 += 1, R1784 += 1 };
  s2 -> s1 [76, 65535] { R1874 += 1, R1812 += 1, R1782 += 1, R1784 += 1 };
  s3 -> s1 [0, 74] { R1874 += 1, R1812 += 1, R1782 += 1, R1784 += 1 };
  s3 -> s2 [0, 65535] { R1874 += 1, R1812 += 1, R1781 += 1, R1782 += 1 };
  s3 -> s3 [0, 65535] { R1874 += 1, R1811 += 1, R1812 += 1 };
  s3 -> s4 [0, 65535] { R1874 += 1, R1812 += 1, R1782 += 1, R1783 += 1, R1784 += 1 };
  s3 -> s5 [75, 75] { R1874 += 1, R1812 += 1, R1782 += 1, R1784 += 1 };
  s3 -> s1 [76, 65535] { R1874 += 1, R1812 += 1, R1782 += 1, R1784 += 1 };
  s4 -> s1 [0, 74] { R1874 += 1, R1812 += 1, R1782 += 1, R1784 += 1 };
  s4 -> s4 [0, 65535] { R1874 += 1, R1812 += 1, R1782 += 1, R1783 += 1, R1784 += 1 };
  s4 -> s5 [75, 75] { R1874 += 1, R1812 += 1, R1782 += 1, R1784 += 1 };
  s4 -> s1 [76, 65535] { R1874 += 1, R1812 += 1, R1782 += 1, R1784 += 1 };
  s5 -> s5 [0, 65535] { R1874 += 1, R1812 += 1, R1782 += 1, R1784 += 1 };
  s5 -> s6 [0, 65535] { R1874 += 1, R1812 += 1 };
  s5 -> s7 [0, 65535];
  s5 -> s8 [0, 65535] { R1874 += 1 };
  s5 -> s9 [0, 65535] { R1874 += 1, R1812 += 1, R1782 += 1 };
  s6 -> s6 [0, 65535] { R1874 += 1, R1812 += 1 };
  s6 -> s7 [0, 65535];
  s6 -> s8 [0, 65535] { R1874 += 1 };
  s7 -> s7 [0, 65535];
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R1874 += 1 };
  s9 -> s6 [0, 65535] { R1874 += 1, R1812 += 1 };
  s9 -> s7 [0, 65535];
  s9 -> s8 [0, 65535] { R1874 += 1 };
  s9 -> s9 [0, 65535] { R1874 += 1, R1812 += 1, R1782 += 1 };
  accepting s8, s5, s9, s6, s7;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 65535] { R1876 += 1, R1814 += 1 };
  s0 -> s2 [0, 65535] { R1876 += 1, R1814 += 1, R1791 += 1 };
  s0 -> s0 [0, 65535] { R1875 += 1, R1876 += 1 };
  s0 -> s3 [0, 65535] { R1876 += 1, R1813 += 1, R1814 += 1 };
  s1 -> s5 [0, 65535] { R1876 += 1 };
  s1 -> s1 [0, 65535] { R1876 += 1, R1814 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R1876 += 1 };
  s2 -> s1 [0, 65535] { R1876 += 1, R1814 += 1 };
  s2 -> s2 [0, 65535] { R1876 += 1, R1814 += 1, R1791 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R1876 += 1, R1814 += 1 };
  s3 -> s2 [0, 65535] { R1876 += 1, R1814 += 1, R1791 += 1 };
  s3 -> s3 [0, 65535] { R1876 += 1, R1813 += 1, R1814 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1876 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R1878 += 1, R1834 += 1, R21 += 1 };
  s0 -> s2 [0, 65535] { R1878 += 1, R1833 += 1, R1834 += 1 };
  s0 -> s0 [0, 65535] { R1877 += 1, R1878 += 1 };
  s1 -> s1 [0, 65535] { R1878 += 1, R1834 += 1, R21 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R1878 += 1 };
  s2 -> s1 [0, 65535] { R1878 += 1, R1834 += 1, R21 += 1 };
  s2 -> s2 [0, 65535] { R1878 += 1, R1833 += 1, R1834 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1878 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 69] { R1880 += 1, R1836 += 1 };
  s0 -> s0 [0, 65535] { R1879 += 1, R1880 += 1 };
  s0 -> s2 [0, 65535] { R1880 += 1, R1835 += 1, R1836 += 1 };
  s0 -> s3 [70, 70] { R1880 += 1, R1836 += 1 };
  s0 -> s4 [70, 70] { R1880 += 1, R1836 += 1 };
  s0 -> s5 [75, 75] { R1880 += 1, R1836 += 1 };
  s0 -> s1 [76, 65535] { R1880 += 1, R1836 += 1 };
  s1 -> s1 [0, 69] { R1880 += 1, R1836 += 1 };
  s1 -> s3 [70, 70] { R1880 += 1, R1836 += 1 };
  s1 -> s4 [70, 70] { R1880 += 1, R1836 += 1 };
  s1 -> s5 [75, 75] { R1880 += 1, R1836 += 1 };
  s1 -> s1 [76, 65535] { R1880 += 1, R1836 += 1 };
  s2 -> s1 [0, 69] { R1880 += 1, R1836 += 1 };
  s2 -> s2 [0, 65535] { R1880 += 1, R1835 += 1, R1836 += 1 };
  s2 -> s3 [70, 70] { R1880 += 1, R1836 += 1 };
  s2 -> s4 [70, 70] { R1880 += 1, R1836 += 1 };
  s2 -> s5 [75, 75] { R1880 += 1, R1836 += 1 };
  s2 -> s1 [76, 65535] { R1880 += 1, R1836 += 1 };
  s3 -> s3 [0, 70] { R1880 += 1, R1836 += 1 };
  s3 -> s8 [75, 75] { R1880 += 1, R1836 += 1 };
  s3 -> s3 [76, 65535] { R1880 += 1, R1836 += 1 };
  s5 -> s5 [0, 69] { R1880 += 1, R1836 += 1 };
  s5 -> s5 [0, 65535] { R1880 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [70, 70] { R1880 += 1, R1836 += 1 };
  s5 -> s8 [70, 70] { R1880 += 1, R1836 += 1 };
  s5 -> s5 [75, 65535] { R1880 += 1, R1836 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R1880 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 70] { R1880 += 1, R1836 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R1880 += 1 };
  s8 -> s8 [75, 65535] { R1880 += 1, R1836 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 69] { R1882 += 1, R1838 += 1, R83 += 1 };
  s0 -> s0 [0, 65535] { R1881 += 1, R1882 += 1 };
  s0 -> s2 [0, 65535] { R1882 += 1, R1837 += 1, R1838 += 1 };
  s0 -> s3 [70, 70] { R1882 += 1, R1838 += 1, R83 += 1 };
  s0 -> s4 [70, 70] { R1882 += 1, R1838 += 1, R83 += 1 };
  s0 -> s1 [71, 65535] { R1882 += 1, R1838 += 1, R83 += 1 };
  s1 -> s1 [0, 69] { R1882 += 1, R1838 += 1, R83 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1882 += 1 };
  s1 -> s3 [70, 70] { R1882 += 1, R1838 += 1, R83 += 1 };
  s1 -> s4 [70, 70] { R1882 += 1, R1838 += 1, R83 += 1 };
  s1 -> s1 [71, 65535] { R1882 += 1, R1838 += 1, R83 += 1 };
  s2 -> s1 [0, 69] { R1882 += 1, R1838 += 1, R83 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1882 += 1, R1837 += 1, R1838 += 1 };
  s2 -> s3 [70, 70] { R1882 += 1, R1838 += 1, R83 += 1 };
  s2 -> s4 [70, 70] { R1882 += 1, R1838 += 1, R83 += 1 };
  s2 -> s1 [71, 65535] { R1882 += 1, R1838 += 1, R83 += 1 };
  s3 -> s3 [0, 65535] { R1882 += 1, R1838 += 1, R83 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R1882 += 1 };
  s4 -> s4 [0, 65535] { R1882 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1882 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 69] { R1884 += 1, R1840 += 1, R85 += 1 };
  s0 -> s0 [0, 65535] { R1883 += 1, R1884 += 1 };
  s0 -> s2 [0, 65535] { R1884 += 1, R1839 += 1, R1840 += 1 };
  s0 -> s3 [70, 70] { R1884 += 1, R1840 += 1, R85 += 1 };
  s0 -> s4 [70, 70] { R1884 += 1, R1840 += 1, R85 += 1 };
  s0 -> s1 [71, 65535] { R1884 += 1, R1840 += 1, R85 += 1 };
  s1 -> s1 [0, 69] { R1884 += 1, R1840 += 1, R85 += 1 };
  s1 -> s1 [0, 65535] { R1884 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [70, 70] { R1884 += 1, R1840 += 1, R85 += 1 };
  s1 -> s4 [70, 70] { R1884 += 1, R1840 += 1, R85 += 1 };
  s1 -> s1 [71, 65535] { R1884 += 1, R1840 += 1, R85 += 1 };
  s2 -> s1 [0, 69] { R1884 += 1, R1840 += 1, R85 += 1 };
  s2 -> s2 [0, 65535] { R1884 += 1, R1839 += 1, R1840 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [70, 70] { R1884 += 1, R1840 += 1, R85 += 1 };
  s2 -> s4 [70, 70] { R1884 += 1, R1840 += 1, R85 += 1 };
  s2 -> s1 [71, 65535] { R1884 += 1, R1840 += 1, R85 += 1 };
  s3 -> s3 [0, 65535] { R1884 += 1, R1840 += 1, R85 += 1 };
  s3 -> s6 [0, 65535] { R1884 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1884 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1884 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 69] { R1886 += 1, R1842 += 1, R87 += 1, R88 += 1 };
  s0 -> s2 [0, 69] { R1886 += 1, R1842 += 1, R88 += 1 };
  s0 -> s0 [0, 65535] { R1885 += 1, R1886 += 1 };
  s0 -> s3 [0, 65535] { R1886 += 1, R1841 += 1, R1842 += 1 };
  s0 -> s4 [70, 70] { R1886 += 1, R1842 += 1, R87 += 1, R88 += 1 };
  s0 -> s5 [70, 70] { R1886 += 1, R1842 += 1, R88 += 1 };
  s0 -> s6 [70, 70] { R1886 += 1, R1842 += 1, R88 += 1 };
  s0 -> s7 [70, 70] { R1886 += 1, R1842 += 1, R87 += 1, R88 += 1 };
  s0 -> s2 [71, 74] { R1886 += 1, R1842 += 1, R88 += 1 };
  s0 -> s1 [71, 65535] { R1886 += 1, R1842 += 1, R87 += 1, R88 += 1 };
  s0 -> s8 [75, 75] { R1886 += 1, R1842 += 1, R88 += 1 };
  s0 -> s2 [76, 65535] { R1886 += 1, R1842 += 1, R88 += 1 };
  s1 -> s1 [0, 69] { R1886 += 1, R1842 += 1, R87 += 1, R88 += 1 };
  s1 -> s2 [0, 69] { R1886 += 1, R1842 += 1, R88 += 1 };
  s1 -> s4 [70, 70] { R1886 += 1, R1842 += 1, R87 += 1, R88 += 1 };
  s1 -> s5 [70, 70] { R1886 += 1, R1842 += 1, R88 += 1 };
  s1 -> s6 [70, 70] { R1886 += 1, R1842 += 1, R88 += 1 };
  s1 -> s7 [70, 70] { R1886 += 1, R1842 += 1, R87 += 1, R88 += 1 };
  s1 -> s2 [71, 74] { R1886 += 1, R1842 += 1, R88 += 1 };
  s1 -> s1 [71, 65535] { R1886 += 1, R1842 += 1, R87 += 1, R88 += 1 };
  s1 -> s8 [75, 75] { R1886 += 1, R1842 += 1, R88 += 1 };
  s1 -> s2 [76, 65535] { R1886 += 1, R1842 += 1, R88 += 1 };
  s2 -> s2 [0, 69] { R1886 += 1, R1842 += 1, R88 += 1 };
  s2 -> s5 [70, 70] { R1886 += 1, R1842 += 1, R88 += 1 };
  s2 -> s6 [70, 70] { R1886 += 1, R1842 += 1, R88 += 1 };
  s2 -> s2 [71, 74] { R1886 += 1, R1842 += 1, R88 += 1 };
  s2 -> s8 [75, 75] { R1886 += 1, R1842 += 1, R88 += 1 };
  s2 -> s2 [76, 65535] { R1886 += 1, R1842 += 1, R88 += 1 };
  s3 -> s1 [0, 69] { R1886 += 1, R1842 += 1, R87 += 1, R88 += 1 };
  s3 -> s2 [0, 69] { R1886 += 1, R1842 += 1, R88 += 1 };
  s3 -> s3 [0, 65535] { R1886 += 1, R1841 += 1, R1842 += 1 };
  s3 -> s4 [70, 70] { R1886 += 1, R1842 += 1, R87 += 1, R88 += 1 };
  s3 -> s5 [70, 70] { R1886 += 1, R1842 += 1, R88 += 1 };
  s3 -> s6 [70, 70] { R1886 += 1, R1842 += 1, R88 += 1 };
  s3 -> s7 [70, 70] { R1886 += 1, R1842 += 1, R87 += 1, R88 += 1 };
  s3 -> s2 [71, 74] { R1886 += 1, R1842 += 1, R88 += 1 };
  s3 -> s1 [71, 65535] { R1886 += 1, R1842 += 1, R87 += 1, R88 += 1 };
  s3 -> s8 [75, 75] { R1886 += 1, R1842 += 1, R88 += 1 };
  s3 -> s2 [76, 65535] { R1886 += 1, R1842 += 1, R88 += 1 };
  s5 -> s5 [0, 74] { R1886 += 1, R1842 += 1, R88 += 1 };
  s5 -> s11 [75, 75] { R1886 += 1, R1842 += 1, R88 += 1 };
  s5 -> s5 [76, 65535] { R1886 += 1, R1842 += 1, R88 += 1 };
  s7 -> s5 [0, 74] { R1886 += 1, R1842 += 1, R88 += 1 };
  s7 -> s7 [0, 65535] { R1886 += 1, R1842 += 1, R87 += 1, R88 += 1 };
  s7 -> s11 [75, 75] { R1886 += 1, R1842 += 1, R88 += 1 };
  s7 -> s5 [76, 65535] { R1886 += 1, R1842 += 1, R88 += 1 };
  s8 -> s8 [0, 69] { R1886 += 1, R1842 += 1, R88 += 1 };
  s8 -> s8 [0, 65535] { R1886 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [70, 70] { R1886 += 1, R1842 += 1, R88 += 1 };
  s8 -> s11 [70, 70] { R1886 += 1, R1842 += 1, R88 += 1 };
  s8 -> s8 [71, 65535] { R1886 += 1, R1842 += 1, R88 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R1886 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s12 [0, 65535] { R1886 += 1 };
  s11 -> s11 [0, 65535] { R1886 += 1, R1842 += 1, R88 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R1886 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 69] { R1888 += 1, R1844 += 1, R91 += 1, R92 += 1 };
  s0 -> s2 [0, 65535] { R1888 += 1, R1843 += 1, R1844 += 1 };
  s0 -> s0 [0, 65535] { R1887 += 1, R1888 += 1 };
  s0 -> s3 [70, 70] { R1888 += 1, R1844 += 1, R91 += 1, R92 += 1 };
  s0 -> s4 [70, 70] { R1888 += 1, R1844 += 1, R91 += 1, R92 += 1 };
  s0 -> s1 [71, 65535] { R1888 += 1, R1844 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 69] { R1888 += 1, R1844 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 65535] { R1888 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [70, 70] { R1888 += 1, R1844 += 1, R91 += 1, R92 += 1 };
  s1 -> s4 [70, 70] { R1888 += 1, R1844 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [71, 65535] { R1888 += 1, R1844 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [0, 69] { R1888 += 1, R1844 += 1, R91 += 1, R92 += 1 };
  s2 -> s2 [0, 65535] { R1888 += 1, R1843 += 1, R1844 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [70, 70] { R1888 += 1, R1844 += 1, R91 += 1, R92 += 1 };
  s2 -> s4 [70, 70] { R1888 += 1, R1844 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [71, 65535] { R1888 += 1, R1844 += 1, R91 += 1, R92 += 1 };
  s3 -> s3 [0, 65535] { R1888 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R1888 += 1, R1844 += 1, R91 += 1, R92 += 1 };
  s4 -> s5 [0, 65535] { R1888 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R1888 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 69] { R1890 += 1, R1846 += 1, R97 += 1, R98 += 1 };
  s0 -> s0 [0, 65535] { R1889 += 1, R1890 += 1 };
  s0 -> s2 [0, 65535] { R1890 += 1, R1845 += 1, R1846 += 1 };
  s0 -> s3 [70, 70] { R1890 += 1, R1846 += 1, R97 += 1, R98 += 1 };
  s0 -> s4 [70, 70] { R1890 += 1, R1846 += 1, R97 += 1, R98 += 1 };
  s0 -> s1 [71, 65535] { R1890 += 1, R1846 += 1, R97 += 1, R98 += 1 };
  s1 -> s1 [0, 69] { R1890 += 1, R1846 += 1, R97 += 1, R98 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1890 += 1 };
  s1 -> s3 [70, 70] { R1890 += 1, R1846 += 1, R97 += 1, R98 += 1 };
  s1 -> s4 [70, 70] { R1890 += 1, R1846 += 1, R97 += 1, R98 += 1 };
  s1 -> s1 [71, 65535] { R1890 += 1, R1846 += 1, R97 += 1, R98 += 1 };
  s2 -> s1 [0, 69] { R1890 += 1, R1846 += 1, R97 += 1, R98 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1890 += 1, R1845 += 1, R1846 += 1 };
  s2 -> s3 [70, 70] { R1890 += 1, R1846 += 1, R97 += 1, R98 += 1 };
  s2 -> s4 [70, 70] { R1890 += 1, R1846 += 1, R97 += 1, R98 += 1 };
  s2 -> s1 [71, 65535] { R1890 += 1, R1846 += 1, R97 += 1, R98 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R1890 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R1890 += 1 };
  s4 -> s4 [0, 65535] { R1890 += 1, R1846 += 1, R97 += 1, R98 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1890 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 69] { R1892 += 1, R1848 += 1, R1777 += 1, R1778 += 1 };
  s0 -> s0 [0, 65535] { R1891 += 1, R1892 += 1 };
  s0 -> s2 [0, 65535] { R1892 += 1, R1847 += 1, R1848 += 1 };
  s0 -> s3 [70, 70] { R1892 += 1, R1848 += 1, R1777 += 1, R1778 += 1 };
  s0 -> s4 [70, 70] { R1892 += 1, R1848 += 1, R1777 += 1, R1778 += 1 };
  s0 -> s1 [71, 65535] { R1892 += 1, R1848 += 1, R1777 += 1, R1778 += 1 };
  s1 -> s1 [0, 69] { R1892 += 1, R1848 += 1, R1777 += 1, R1778 += 1 };
  s1 -> s1 [0, 65535] { R1892 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [70, 70] { R1892 += 1, R1848 += 1, R1777 += 1, R1778 += 1 };
  s1 -> s4 [70, 70] { R1892 += 1, R1848 += 1, R1777 += 1, R1778 += 1 };
  s1 -> s1 [71, 65535] { R1892 += 1, R1848 += 1, R1777 += 1, R1778 += 1 };
  s2 -> s1 [0, 69] { R1892 += 1, R1848 += 1, R1777 += 1, R1778 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1892 += 1, R1847 += 1, R1848 += 1 };
  s2 -> s3 [70, 70] { R1892 += 1, R1848 += 1, R1777 += 1, R1778 += 1 };
  s2 -> s4 [70, 70] { R1892 += 1, R1848 += 1, R1777 += 1, R1778 += 1 };
  s2 -> s1 [71, 65535] { R1892 += 1, R1848 += 1, R1777 += 1, R1778 += 1 };
  s3 -> s6 [0, 65535] { R1892 += 1 };
  s3 -> s3 [0, 65535] { R1892 += 1, R1848 += 1, R1777 += 1, R1778 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1892 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1892 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 69] { R1894 += 1, R1850 += 1, R1786 += 1, R1788 += 1, R1789 += 1 };
  s0 -> s2 [0, 69] { R1894 += 1, R1850 += 1, R1786 += 1, R1787 += 1, R1788 += 1 };
  s0 -> s3 [0, 69] { R1894 += 1, R1850 += 1, R1785 += 1, R1786 += 1 };
  s0 -> s4 [0, 65535] { R1894 += 1, R1849 += 1, R1850 += 1 };
  s0 -> s0 [0, 65535] { R1893 += 1, R1894 += 1 };
  s0 -> s5 [70, 70] { R1894 += 1, R1850 += 1, R1785 += 1, R1786 += 1 };
  s0 -> s6 [70, 70] { R1894 += 1, R1850 += 1, R1785 += 1, R1786 += 1 };
  s0 -> s7 [70, 70] { R1894 += 1, R1850 += 1, R1786 += 1, R1787 += 1, R1788 += 1 };
  s0 -> s8 [70, 70] { R1894 += 1, R1850 += 1, R1786 += 1, R1787 += 1, R1788 += 1 };
  s0 -> s9 [70, 70] { R1894 += 1, R1850 += 1, R1786 += 1, R1788 += 1, R1789 += 1 };
  s0 -> s10 [70, 70] { R1894 += 1, R1850 += 1, R1786 += 1, R1788 += 1, R1789 += 1 };
  s0 -> s1 [71, 65535] { R1894 += 1, R1850 += 1, R1786 += 1, R1788 += 1, R1789 += 1 };
  s0 -> s2 [71, 65535] { R1894 += 1, R1850 += 1, R1786 += 1, R1787 += 1, R1788 += 1 };
  s0 -> s3 [71, 65535] { R1894 += 1, R1850 += 1, R1785 += 1, R1786 += 1 };
  s1 -> s1 [0, 69] { R1894 += 1, R1850 += 1, R1786 += 1, R1788 += 1, R1789 += 1 };
  s1 -> s14 [0, 69] { R1894 += 1, R1850 += 1, R1786 += 1 };
  s1 -> s15 [70, 70] { R1894 += 1, R1850 += 1, R1786 += 1 };
  s1 -> s11 [70, 70] { R1894 += 1, R1850 += 1, R1786 += 1 };
  s1 -> s9 [70, 70] { R1894 += 1, R1850 += 1, R1786 += 1, R1788 += 1, R1789 += 1 };
  s1 -> s10 [70, 70] { R1894 += 1, R1850 += 1, R1786 += 1, R1788 += 1, R1789 += 1 };
  s1 -> s1 [71, 65535] { R1894 += 1, R1850 += 1, R1786 += 1, R1788 += 1, R1789 += 1 };
  s1 -> s14 [71, 65535] { R1894 += 1, R1850 += 1, R1786 += 1 };
  s2 -> s1 [0, 69] { R1894 += 1, R1850 += 1, R1786 += 1, R1788 += 1, R1789 += 1 };
  s2 -> s2 [0, 69] { R1894 += 1, R1850 += 1, R1786 += 1, R1787 += 1, R1788 += 1 };
  s2 -> s7 [70, 70] { R1894 += 1, R1850 += 1, R1786 += 1, R1787 += 1, R1788 += 1 };
  s2 -> s8 [70, 70] { R1894 += 1, R1850 += 1, R1786 += 1, R1787 += 1, R1788 += 1 };
  s2 -> s9 [70, 70] { R1894 += 1, R1850 += 1, R1786 += 1, R1788 += 1, R1789 += 1 };
  s2 -> s10 [70, 70] { R1894 += 1, R1850 += 1, R1786 += 1, R1788 += 1, R1789 += 1 };
  s2 -> s1 [71, 65535] { R1894 += 1, R1850 += 1, R1786 += 1, R1788 += 1, R1789 += 1 };
  s2 -> s2 [71, 65535] { R1894 += 1, R1850 += 1, R1786 += 1, R1787 += 1, R1788 += 1 };
  s3 -> s1 [0, 69] { R1894 += 1, R1850 += 1, R1786 += 1, R1788 += 1, R1789 += 1 };
  s3 -> s2 [0, 69] { R1894 += 1, R1850 += 1, R1786 += 1, R1787 += 1, R1788 += 1 };
  s3 -> s3 [0, 69] { R1894 += 1, R1850 += 1, R1785 += 1, R1786 += 1 };
  s3 -> s5 [70, 70] { R1894 += 1, R1850 += 1, R1785 += 1, R1786 += 1 };
  s3 -> s6 [70, 70] { R1894 += 1, R1850 += 1, R1785 += 1, R1786 += 1 };
  s3 -> s7 [70, 70] { R1894 += 1, R1850 += 1, R1786 += 1, R1787 += 1, R1788 += 1 };
  s3 -> s8 [70, 70] { R1894 += 1, R1850 += 1, R1786 += 1, R1787 += 1, R1788 += 1 };
  s3 -> s9 [70, 70] { R1894 += 1, R1850 += 1, R1786 += 1, R1788 += 1, R1789 += 1 };
  s3 -> s10 [70, 70] { R1894 += 1, R1850 += 1, R1786 += 1, R1788 += 1, R1789 += 1 };
  s3 -> s1 [71, 65535] { R1894 += 1, R1850 += 1, R1786 += 1, R1788 += 1, R1789 += 1 };
  s3 -> s2 [71, 65535] { R1894 += 1, R1850 += 1, R1786 += 1, R1787 += 1, R1788 += 1 };
  s3 -> s3 [71, 65535] { R1894 += 1, R1850 += 1, R1785 += 1, R1786 += 1 };
  s4 -> s1 [0, 69] { R1894 += 1, R1850 += 1, R1786 += 1, R1788 += 1, R1789 += 1 };
  s4 -> s2 [0, 69] { R1894 += 1, R1850 += 1, R1786 += 1, R1787 += 1, R1788 += 1 };
  s4 -> s3 [0, 69] { R1894 += 1, R1850 += 1, R1785 += 1, R1786 += 1 };
  s4 -> s4 [0, 65535] { R1894 += 1, R1849 += 1, R1850 += 1 };
  s4 -> s5 [70, 70] { R1894 += 1, R1850 += 1, R1785 += 1, R1786 += 1 };
  s4 -> s6 [70, 70] { R1894 += 1, R1850 += 1, R1785 += 1, R1786 += 1 };
  s4 -> s7 [70, 70] { R1894 += 1, R1850 += 1, R1786 += 1, R1787 += 1, R1788 += 1 };
  s4 -> s8 [70, 70] { R1894 += 1, R1850 += 1, R1786 += 1, R1787 += 1, R1788 += 1 };
  s4 -> s9 [70, 70] { R1894 += 1, R1850 += 1, R1786 += 1, R1788 += 1, R1789 += 1 };
  s4 -> s10 [70, 70] { R1894 += 1, R1850 += 1, R1786 += 1, R1788 += 1, R1789 += 1 };
  s4 -> s1 [71, 65535] { R1894 += 1, R1850 += 1, R1786 += 1, R1788 += 1, R1789 += 1 };
  s4 -> s2 [71, 65535] { R1894 += 1, R1850 += 1, R1786 += 1, R1787 += 1, R1788 += 1 };
  s4 -> s3 [71, 65535] { R1894 += 1, R1850 += 1, R1785 += 1, R1786 += 1 };
  s5 -> s5 [0, 65535] { R1894 += 1, R1850 += 1, R1785 += 1, R1786 += 1 };
  s5 -> s8 [0, 65535] { R1894 += 1, R1850 += 1, R1786 += 1, R1787 += 1, R1788 += 1 };
  s5 -> s10 [0, 65535] { R1894 += 1, R1850 += 1, R1786 += 1, R1788 += 1, R1789 += 1 };
  s8 -> s8 [0, 65535] { R1894 += 1, R1850 += 1, R1786 += 1, R1787 += 1, R1788 += 1 };
  s8 -> s10 [0, 65535] { R1894 += 1, R1850 += 1, R1786 += 1, R1788 += 1, R1789 += 1 };
  s10 -> s11 [0, 65535] { R1894 += 1, R1850 += 1, R1786 += 1 };
  s10 -> s10 [0, 65535] { R1894 += 1, R1850 += 1, R1786 += 1, R1788 += 1, R1789 += 1 };
  s11 -> s12 [0, 65535];
  s11 -> s11 [0, 65535] { R1894 += 1, R1850 += 1, R1786 += 1 };
  s11 -> s13 [0, 65535] { R1894 += 1 };
  s12 -> s12 [0, 65535];
  s13 -> s12 [0, 65535];
  s13 -> s13 [0, 65535] { R1894 += 1 };
  s14 -> s14 [0, 69] { R1894 += 1, R1850 += 1, R1786 += 1 };
  s14 -> s12 [0, 65535];
  s14 -> s14 [0, 65535] { R1894 += 1 };
  s14 -> s15 [70, 70] { R1894 += 1, R1850 += 1, R1786 += 1 };
  s14 -> s11 [70, 70] { R1894 += 1, R1850 += 1, R1786 += 1 };
  s14 -> s14 [71, 65535] { R1894 += 1, R1850 += 1, R1786 += 1 };
  s15 -> s12 [0, 65535];
  s15 -> s15 [0, 65535] { R1894 += 1 };
  accepting s12, s13, s14, s15, s11;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [102, 102];
  accepting s1;
};
};
constraint R2 = R1812 && R3 = R1894 && R23 - R1894 = -1 && R24 = R1894 && R25 - R1894 = -1 && R26 = R1894 && R27 = 0 && R28 = 1 && R29 = 0 && R30 = 1 && R45 + R84 + R83 + -1*R1782 + -1*R1778 - R66 = 0 && R49 + R89 + R87 = 0 && R50 + R90 + R88 + -1*R1782 + -1*R1778 - R66 = 0 && R55 + R96 + R93 + -1*R1784 + -1*R1780 - R68 = 0 && R65 + R1781 + R1777 = 0 && R67 + R1783 + R1779 = 0 && R1811 = 0 && R1835 = 0 && R1836 = 0 && R1841 = 0 && R1842 = 0 && R1849 = 0 && R1850 = 0 && R1851 = 0 && R1852 = R1894 && R1853 = 0 && R1854 = R1894 && R1855 = 0 && R1856 = R1894 && R1857 = 0 && R1858 = R1894 && R1859 = 0 && R1860 = R1894 && R1861 = 0 && R1862 = R1894 && R1863 = 0 && R1864 = R1894 && R1865 = 0 && R1866 = R1894 && R1867 = 0 && R1868 = R1894 && R1869 = 0 && R1870 = R1894 && R1871 = 0 && R1872 = R1894 && R1873 = 0 && R1874 = R1894 && R1875 = 0 && R1876 = R1894 && R1877 = 0 && R1878 = R1894 && R1879 = 0 && R1880 = R1894 && R1881 = 0 && R1882 = R1894 && R1883 = 0 && R1884 = R1894 && R1885 = 0 && R1886 = R1894 && R1887 = 0 && R1888 = R1894 && R1889 = 0 && R1890 = R1894 && R1891 = 0 && R1892 = R1894 && R1893 = 0 && R12 < 1 && R15 < 1 && R16 < 1 && R47 + R86 + R85 < 1 && R61 + R102 + R99 < 1 && -1*R1782 + -1*R1778 - R66 < 1 && -1*R1784 + -1*R1780 - R68 < 1 && -1 < R1812 && 0 < R1894 && (R53 + R94 + R91 != 0 || R54 + R95 + R92 + -1*R1782 + -1*R1778 - R66 = 0 || R66 + R1782 + R1778 < 1) && (R59 + R100 + R97 != 0 || R60 + R101 + R98 + -1*R1782 + -1*R1778 - R66 = 0 || R66 + R1782 + R1778 < 1) && (R66 + R1782 + R1778 != 0 || ((R53 + R94 + R91 != 0 || R54 + R95 + R92 = 0 || R68 + R1784 + R1780 < 1) && (R53 + R94 + R91 = 0 || R68 + R1784 + R1780 < 1))) && (R66 + R1782 + R1778 != 0 || ((R59 + R100 + R97 != 0 || R60 + R101 + R98 = 0 || R68 + R1784 + R1780 < 1) && (R59 + R100 + R97 = 0 || R68 + R1784 + R1780 < 1))) && (R66 + R1782 + R1778 != 0 || ((R73 + R1790 + R1785 != 0 || R74 + R1791 + R1786 = 0 || R68 + R1784 + R1780 < 1) && (R73 + R1790 + R1785 = 0 || R68 + R1784 + R1780 < 1))) && (R68 + R1784 + R1780 != 0 || R77 + R1794 + R1789 = 0 || (R75 + R1792 + R1787 = 0 && R76 + R1793 + R1788 = 0)) && (R73 + R1790 + R1785 != 0 || R66 + R1782 + R1778 + -1*R1791 + -1*R1786 - R74 = 0 || R66 + R1782 + R1778 < 1) && (R75 + R1792 + R1787 != 0 || R68 + R1784 + R1780 + -1*R1793 + -1*R1788 - R76 = 0 || R68 + R1784 + R1780 < 1) && (R1795 != 0 || R1796 = R1812 || (R20 = 0 && R1812 = 0)) && (R1797 != 0 || R1798 = R1812 || (R20 = 0 && R1812 = 0)) && (R1799 != 0 || R1800 = R1812 || (R20 = 0 && R1812 = 0)) && (R1801 != 0 || R1802 = R1812 || (R20 = 0 && R1812 = 0)) && (R1803 != 0 || R1804 = R1812 || (R20 = 0 && R1812 = 0)) && (R1805 != 0 || R1806 = R1812 || (R20 = 0 && R1812 = 0)) && (R1807 != 0 || R1808 = R1812 || (R20 = 0 && R1812 = 0)) && (R1809 != 0 || R1810 = R1812 || (R20 = 0 && R1812 = 0)) && (R1813 != 0 || R1812 = R1814 || (R20 = 0 && R1812 = 0)) && (R21 = 0 || (R1833 = 0 && R1834 = 0)) && (R21 = 0 || (R1837 = 0 && R1838 = 0)) && (R21 = 0 || (R1839 = 0 && R1840 = 0)) && (R21 = 0 || (R1843 = 0 && R1844 = 0)) && (R21 = 0 || (R1845 = 0 && R1846 = 0)) && (R21 = 0 || (R1847 = 0 && R1848 = 0)) && (R22 = 0 || (R1815 = 0 && R1816 = 0)) && (R22 = 0 || (R1817 = 0 && R1818 = 0)) && (R22 = 0 || (R1819 = 0 && R1820 = 0)) && (R22 = 0 || (R1821 = 0 && R1822 = 0)) && (R22 = 0 || (R1823 = 0 && R1824 = 0)) && (R22 = 0 || (R1825 = 0 && R1826 = 0)) && (R22 = 0 || (R1827 = 0 && R1828 = 0)) && (R22 = 0 || (R1829 = 0 && R1830 = 0)) && (R22 = 0 || (R1831 = 0 && R1832 = 0)) && (R53 + R94 + R91 = 0 || R66 + R1782 + R1778 < 1) && (R59 + R100 + R97 = 0 || R66 + R1782 + R1778 < 1) && (R73 + R1790 + R1785 = 0 || R66 + R1782 + R1778 < 1) && (R75 + R1792 + R1787 = 0 || R68 + R1784 + R1780 < 1) && (R1795 = 0 || (R20 = 0 && R1812 = 0)) && (R1797 = 0 || (R20 = 0 && R1812 = 0)) && (R1799 = 0 || (R20 = 0 && R1812 = 0)) && (R1801 = 0 || (R20 = 0 && R1812 = 0)) && (R1803 = 0 || (R20 = 0 && R1812 = 0)) && (R1805 = 0 || (R20 = 0 && R1812 = 0)) && (R1807 = 0 || (R20 = 0 && R1812 = 0)) && (R1809 = 0 || (R20 = 0 && R1812 = 0)) && (R1813 = 0 || (R20 = 0 && R1812 = 0));
// End of Parikh automata intersection problem
