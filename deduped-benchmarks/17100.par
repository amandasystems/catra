// Parikh automata intersection problem, generated by OSTRICH+
counter int R12, R15, R16, R2, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R3451, R3452, R3453, R3454, R3455, R3456, R4, R4015, R4016, R4017, R4018, R4019, R4020, R4021, R4022, R4353, R4354, R4355, R4356, R4357, R4358, R4359, R4360, R4361, R4362, R4363, R4364, R4365, R4366, R4367, R4368, R4369, R4370, R4371, R4372, R4373, R4374, R4375, R4376, R4377, R4378, R4379, R4380, R4381, R4382, R4383, R4384, R4385, R4386, R4387, R4388, R4389, R4390, R4391, R4392, R4393, R4394, R4395, R4396, R4397, R4398, R4399, R4400, R4401, R4402, R4403, R4404, R4405, R4406, R4407, R4408, R4409, R4410, R4411, R4412, R4413, R4414, R4415, R4416, R4417, R4418, R4419, R4420, R4421, R4422, R4423, R4424, R4425, R4426, R4427, R4428, R4429, R4430, R4431, R4432, R4433, R4434, R4435, R4436, R4437, R4438, R4439, R4440, R4441, R4442, R4443, R4444, R4445, R4446, R4447, R4448, R4449, R4450, R4451, R4452, R4453, R4454, R4455, R4456, R4457, R4458, R4459, R4460, R4461, R4462, R45, R47, R49, R5, R50, R53, R54, R55, R59, R60, R61, R65, R66, R67, R68, R73, R74, R75, R76, R77, R83, R84, R85, R86, R87, R88, R89, R90, R91, R92, R93, R94, R95, R96;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [70, 70];
  s0 -> s0 [71, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [70, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R15 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 69];
  s0 -> s0 [0, 65535] { R16 += 1 };
  s0 -> s2 [70, 70];
  s0 -> s1 [71, 65535];
  s1 -> s1 [0, 69];
  s1 -> s2 [70, 70];
  s1 -> s1 [71, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R24 += 1 };
  s0 -> s0 [0, 65535] { R23 += 1, R24 += 1 };
  s0 -> s2 [9, 13] { R24 += 1 };
  s0 -> s1 [14, 31] { R24 += 1 };
  s0 -> s2 [32, 32] { R24 += 1 };
  s0 -> s1 [33, 65535] { R24 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R24 += 1 };
  s2 -> s1 [0, 65535] { R24 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R25 += 1, R26 += 1 };
  s1 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R28 += 1 };
  s0 -> s0 [0, 65535] { R27 += 1, R28 += 1 };
  s0 -> s2 [9, 13] { R28 += 1 };
  s0 -> s1 [14, 31] { R28 += 1 };
  s0 -> s2 [32, 32] { R28 += 1 };
  s0 -> s1 [33, 65535] { R28 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R28 += 1 };
  s2 -> s1 [0, 65535] { R28 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R29 += 1, R30 += 1 };
  s1 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R4384 += 1, R22 += 1 };
  s0 -> s0 [0, 65535] { R4383 += 1, R4384 += 1 };
  s1 -> s1 [0, 65535] { R4384 += 1, R22 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 69] { R4386 += 1 };
  s0 -> s0 [0, 65535] { R4385 += 1, R4386 += 1 };
  s0 -> s2 [70, 70] { R4386 += 1 };
  s0 -> s3 [70, 70] { R4386 += 1 };
  s0 -> s1 [76, 65535] { R4386 += 1 };
  s1 -> s1 [0, 69] { R4386 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R4386 += 1 };
  s1 -> s3 [70, 70] { R4386 += 1 };
  s1 -> s1 [76, 65535] { R4386 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 70] { R4386 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [76, 65535] { R4386 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 69] { R4388 += 1, R45 += 1 };
  s0 -> s0 [0, 65535] { R4387 += 1, R4388 += 1 };
  s0 -> s2 [70, 70] { R4388 += 1, R45 += 1 };
  s0 -> s3 [70, 70] { R4388 += 1, R45 += 1 };
  s0 -> s1 [71, 65535] { R4388 += 1, R45 += 1 };
  s1 -> s1 [0, 69] { R4388 += 1, R45 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R4388 += 1, R45 += 1 };
  s1 -> s3 [70, 70] { R4388 += 1, R45 += 1 };
  s1 -> s1 [71, 65535] { R4388 += 1, R45 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R4388 += 1, R45 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 69] { R4390 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R4389 += 1, R4390 += 1 };
  s0 -> s2 [70, 70] { R4390 += 1, R47 += 1 };
  s0 -> s3 [70, 70] { R4390 += 1, R47 += 1 };
  s0 -> s1 [71, 65535] { R4390 += 1, R47 += 1 };
  s1 -> s1 [0, 69] { R4390 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R4390 += 1, R47 += 1 };
  s1 -> s3 [70, 70] { R4390 += 1, R47 += 1 };
  s1 -> s1 [71, 65535] { R4390 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R4390 += 1, R47 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 69] { R4392 += 1, R49 += 1, R50 += 1 };
  s0 -> s0 [0, 65535] { R4391 += 1, R4392 += 1 };
  s0 -> s2 [70, 70] { R4392 += 1, R49 += 1, R50 += 1 };
  s0 -> s3 [70, 70] { R4392 += 1, R49 += 1, R50 += 1 };
  s0 -> s1 [71, 65535] { R4392 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 69] { R4392 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R4392 += 1, R49 += 1, R50 += 1 };
  s1 -> s3 [70, 70] { R4392 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [71, 65535] { R4392 += 1, R49 += 1, R50 += 1 };
  s2 -> s2 [0, 65535] { R4392 += 1, R49 += 1, R50 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 69] { R4394 += 1, R53 += 1, R54 += 1 };
  s0 -> s0 [0, 65535] { R4393 += 1, R4394 += 1 };
  s0 -> s2 [70, 70] { R4394 += 1, R53 += 1, R54 += 1 };
  s0 -> s3 [70, 70] { R4394 += 1, R53 += 1, R54 += 1 };
  s0 -> s1 [71, 65535] { R4394 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 69] { R4394 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R4394 += 1, R53 += 1, R54 += 1 };
  s1 -> s3 [70, 70] { R4394 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [71, 65535] { R4394 += 1, R53 += 1, R54 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R4394 += 1, R53 += 1, R54 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 69] { R4396 += 1, R59 += 1, R60 += 1 };
  s0 -> s0 [0, 65535] { R4395 += 1, R4396 += 1 };
  s0 -> s2 [70, 70] { R4396 += 1, R59 += 1, R60 += 1 };
  s0 -> s3 [70, 70] { R4396 += 1, R59 += 1, R60 += 1 };
  s0 -> s1 [71, 65535] { R4396 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 69] { R4396 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R4396 += 1, R59 += 1, R60 += 1 };
  s1 -> s3 [70, 70] { R4396 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [71, 65535] { R4396 += 1, R59 += 1, R60 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R4396 += 1, R59 += 1, R60 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 69] { R4398 += 1, R65 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R4397 += 1, R4398 += 1 };
  s0 -> s2 [70, 70] { R4398 += 1, R65 += 1, R66 += 1 };
  s0 -> s3 [70, 70] { R4398 += 1, R65 += 1, R66 += 1 };
  s0 -> s1 [71, 65535] { R4398 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 69] { R4398 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R4398 += 1, R65 += 1, R66 += 1 };
  s1 -> s3 [70, 70] { R4398 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [71, 65535] { R4398 += 1, R65 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R4398 += 1, R65 += 1, R66 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 69] { R4400 += 1, R73 += 1, R74 += 1 };
  s0 -> s0 [0, 65535] { R4399 += 1, R4400 += 1 };
  s0 -> s2 [70, 70] { R4400 += 1, R73 += 1, R74 += 1 };
  s0 -> s3 [70, 70] { R4400 += 1, R73 += 1, R74 += 1 };
  s0 -> s1 [71, 65535] { R4400 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 69] { R4400 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R4400 += 1, R73 += 1, R74 += 1 };
  s1 -> s3 [70, 70] { R4400 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [71, 65535] { R4400 += 1, R73 += 1, R74 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R4400 += 1, R73 += 1, R74 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 69] { R4420 += 1 };
  s0 -> s0 [0, 65535] { R4419 += 1, R4420 += 1 };
  s0 -> s2 [70, 70] { R4420 += 1 };
  s0 -> s1 [71, 65535] { R4420 += 1 };
  s1 -> s1 [0, 69] { R4420 += 1 };
  s1 -> s2 [70, 70] { R4420 += 1 };
  s1 -> s1 [71, 65535] { R4420 += 1 };
  s2 -> s2 [0, 65535] { R4420 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R4421 += 1, R4422 += 1 };
  s0 -> s1 [0, 65535] { R4422 += 1, R2 += 1 };
  s1 -> s1 [0, 65535] { R4422 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 69] { R4424 += 1 };
  s0 -> s0 [0, 65535] { R4423 += 1, R4424 += 1 };
  s0 -> s2 [0, 65535] { R4424 += 1, R12 += 1 };
  s0 -> s3 [70, 70] { R4424 += 1 };
  s0 -> s1 [71, 65535] { R4424 += 1 };
  s1 -> s1 [0, 69] { R4424 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [70, 70] { R4424 += 1 };
  s1 -> s1 [71, 65535] { R4424 += 1 };
  s2 -> s1 [0, 69] { R4424 += 1 };
  s2 -> s2 [0, 65535] { R4424 += 1, R12 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [70, 70] { R4424 += 1 };
  s2 -> s1 [71, 65535] { R4424 += 1 };
  s3 -> s3 [0, 65535] { R4424 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 69] { R4426 += 1, R4364 += 1 };
  s0 -> s0 [0, 65535] { R4425 += 1, R4426 += 1 };
  s0 -> s2 [0, 65535] { R4426 += 1, R4363 += 1, R4364 += 1 };
  s0 -> s1 [71, 65535] { R4426 += 1, R4364 += 1 };
  s1 -> s1 [0, 69] { R4426 += 1, R4364 += 1 };
  s1 -> s1 [0, 65535] { R4426 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [71, 65535] { R4426 += 1, R4364 += 1 };
  s2 -> s1 [0, 69] { R4426 += 1, R4364 += 1 };
  s2 -> s2 [0, 65535] { R4426 += 1, R4363 += 1, R4364 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [71, 65535] { R4426 += 1, R4364 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R4428 += 1, R4365 += 1, R4366 += 1 };
  s0 -> s2 [0, 65535] { R4428 += 1, R4366 += 1, R20 += 1 };
  s0 -> s0 [0, 65535] { R4427 += 1, R4428 += 1 };
  s1 -> s1 [0, 65535] { R4428 += 1, R4365 += 1, R4366 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R4428 += 1, R4366 += 1, R20 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R4428 += 1 };
  s2 -> s2 [0, 65535] { R4428 += 1, R4366 += 1, R20 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4428 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 70] { R4430 += 1, R4368 += 1 };
  s0 -> s0 [0, 65535] { R4429 += 1, R4430 += 1 };
  s0 -> s2 [0, 65535] { R4430 += 1, R4367 += 1, R4368 += 1 };
  s0 -> s1 [75, 65535] { R4430 += 1, R4368 += 1 };
  s1 -> s1 [0, 70] { R4430 += 1, R4368 += 1 };
  s1 -> s1 [0, 65535] { R4430 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [75, 65535] { R4430 += 1, R4368 += 1 };
  s2 -> s1 [0, 70] { R4430 += 1, R4368 += 1 };
  s2 -> s2 [0, 65535] { R4430 += 1, R4367 += 1, R4368 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [75, 65535] { R4430 += 1, R4368 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R4432 += 1, R4370 += 1, R84 += 1 };
  s0 -> s0 [0, 65535] { R4431 += 1, R4432 += 1 };
  s0 -> s2 [0, 65535] { R4432 += 1, R4369 += 1, R4370 += 1 };
  s1 -> s1 [0, 65535] { R4432 += 1, R4370 += 1, R84 += 1 };
  s1 -> s4 [0, 65535] { R4432 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R4432 += 1, R4370 += 1, R84 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R4432 += 1, R4369 += 1, R4370 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4432 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 74] { R4434 += 1, R4372 += 1 };
  s0 -> s0 [0, 65535] { R4433 += 1, R4434 += 1 };
  s0 -> s2 [0, 65535] { R4434 += 1, R4371 += 1, R4372 += 1 };
  s0 -> s3 [0, 65535] { R4434 += 1, R4372 += 1, R86 += 1 };
  s0 -> s1 [76, 65535] { R4434 += 1, R4372 += 1 };
  s1 -> s1 [0, 74] { R4434 += 1, R4372 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R4434 += 1 };
  s1 -> s1 [76, 65535] { R4434 += 1, R4372 += 1 };
  s2 -> s1 [0, 74] { R4434 += 1, R4372 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R4434 += 1, R4371 += 1, R4372 += 1 };
  s2 -> s3 [0, 65535] { R4434 += 1, R4372 += 1, R86 += 1 };
  s2 -> s1 [76, 65535] { R4434 += 1, R4372 += 1 };
  s3 -> s1 [0, 74] { R4434 += 1, R4372 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R4434 += 1 };
  s3 -> s3 [0, 65535] { R4434 += 1, R4372 += 1, R86 += 1 };
  s3 -> s1 [76, 65535] { R4434 += 1, R4372 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R4434 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 65535] { R4436 += 1, R4374 += 1 };
  s0 -> s2 [0, 65535] { R4436 += 1, R4373 += 1, R4374 += 1 };
  s0 -> s0 [0, 65535] { R4435 += 1, R4436 += 1 };
  s0 -> s3 [0, 65535] { R4436 += 1, R4374 += 1, R90 += 1 };
  s1 -> s4 [0, 65535] { R4436 += 1 };
  s1 -> s1 [0, 65535] { R4436 += 1, R4374 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R4436 += 1, R4374 += 1 };
  s2 -> s2 [0, 65535] { R4436 += 1, R4373 += 1, R4374 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R4436 += 1, R4374 += 1, R90 += 1 };
  s3 -> s4 [0, 65535] { R4436 += 1 };
  s3 -> s1 [0, 65535] { R4436 += 1, R4374 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R4436 += 1, R4374 += 1, R90 += 1 };
  s4 -> s4 [0, 65535] { R4436 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R4438 += 1, R4376 += 1, R95 += 1, R96 += 1 };
  s0 -> s2 [0, 65535] { R4438 += 1, R4375 += 1, R4376 += 1 };
  s0 -> s3 [0, 65535] { R4438 += 1, R4376 += 1, R94 += 1, R95 += 1 };
  s0 -> s0 [0, 65535] { R4437 += 1, R4438 += 1 };
  s1 -> s4 [0, 65535] { R4438 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R4438 += 1, R4376 += 1, R95 += 1, R96 += 1 };
  s1 -> s6 [0, 65535] { R4438 += 1, R4376 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R4438 += 1, R4376 += 1, R95 += 1, R96 += 1 };
  s2 -> s2 [0, 65535] { R4438 += 1, R4375 += 1, R4376 += 1 };
  s2 -> s3 [0, 65535] { R4438 += 1, R4376 += 1, R94 += 1, R95 += 1 };
  s3 -> s4 [0, 65535] { R4438 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [0, 65535] { R4438 += 1, R4376 += 1, R95 += 1, R96 += 1 };
  s3 -> s3 [0, 65535] { R4438 += 1, R4376 += 1, R94 += 1, R95 += 1 };
  s4 -> s4 [0, 65535] { R4438 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R4438 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R4438 += 1, R4376 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 74] { R4440 += 1, R4378 += 1, R3455 += 1 };
  s0 -> s2 [0, 65535] { R4440 += 1, R4377 += 1, R4378 += 1 };
  s0 -> s0 [0, 65535] { R4439 += 1, R4440 += 1 };
  s0 -> s1 [0, 65535] { R4440 += 1, R4378 += 1 };
  s0 -> s1 [76, 65535] { R4440 += 1, R4378 += 1, R3455 += 1 };
  s1 -> s1 [0, 74] { R4440 += 1, R4378 += 1, R3455 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R4440 += 1, R4378 += 1 };
  s1 -> s4 [0, 65535] { R4440 += 1 };
  s1 -> s1 [76, 65535] { R4440 += 1, R4378 += 1, R3455 += 1 };
  s2 -> s1 [0, 74] { R4440 += 1, R4378 += 1, R3455 += 1 };
  s2 -> s2 [0, 65535] { R4440 += 1, R4377 += 1, R4378 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R4440 += 1, R4378 += 1 };
  s2 -> s1 [76, 65535] { R4440 += 1, R4378 += 1, R3455 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4440 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R4442 += 1, R4380 += 1 };
  s0 -> s0 [0, 65535] { R4441 += 1, R4442 += 1 };
  s0 -> s2 [0, 65535] { R4442 += 1, R4380 += 1, R4020 += 1 };
  s0 -> s3 [0, 65535] { R4442 += 1, R4379 += 1, R4380 += 1 };
  s1 -> s1 [0, 65535] { R4442 += 1, R4380 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R4442 += 1 };
  s2 -> s1 [0, 65535] { R4442 += 1, R4380 += 1 };
  s2 -> s2 [0, 65535] { R4442 += 1, R4380 += 1, R4020 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R4442 += 1 };
  s3 -> s1 [0, 65535] { R4442 += 1, R4380 += 1 };
  s3 -> s2 [0, 65535] { R4442 += 1, R4380 += 1, R4020 += 1 };
  s3 -> s3 [0, 65535] { R4442 += 1, R4379 += 1, R4380 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R4442 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 65535] { R4444 += 1, R4381 += 1, R4382 += 1 };
  s0 -> s2 [0, 65535] { R4444 += 1, R4382 += 1, R4359 += 1 };
  s0 -> s0 [0, 65535] { R4443 += 1, R4444 += 1 };
  s0 -> s3 [0, 65535] { R4444 += 1, R4382 += 1, R4359 += 1, R4361 += 1, R4362 += 1 };
  s0 -> s4 [0, 65535] { R4444 += 1, R4382 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R4444 += 1, R4381 += 1, R4382 += 1 };
  s1 -> s2 [0, 65535] { R4444 += 1, R4382 += 1, R4359 += 1 };
  s1 -> s3 [0, 65535] { R4444 += 1, R4382 += 1, R4359 += 1, R4361 += 1, R4362 += 1 };
  s1 -> s4 [0, 65535] { R4444 += 1, R4382 += 1 };
  s2 -> s5 [0, 65535] { R4444 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R4444 += 1, R4382 += 1, R4359 += 1 };
  s2 -> s4 [0, 65535] { R4444 += 1, R4382 += 1 };
  s3 -> s5 [0, 65535] { R4444 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s2 [0, 65535] { R4444 += 1, R4382 += 1, R4359 += 1 };
  s3 -> s3 [0, 65535] { R4444 += 1, R4382 += 1, R4359 += 1, R4361 += 1, R4362 += 1 };
  s3 -> s4 [0, 65535] { R4444 += 1, R4382 += 1 };
  s4 -> s5 [0, 65535] { R4444 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R4444 += 1, R4382 += 1 };
  s5 -> s5 [0, 65535] { R4444 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R4446 += 1, R4402 += 1, R21 += 1 };
  s0 -> s0 [0, 65535] { R4445 += 1, R4446 += 1 };
  s0 -> s2 [0, 65535] { R4446 += 1, R4401 += 1, R4402 += 1 };
  s1 -> s4 [0, 65535] { R4446 += 1 };
  s1 -> s1 [0, 65535] { R4446 += 1, R4402 += 1, R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R4446 += 1, R4402 += 1, R21 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R4446 += 1, R4401 += 1, R4402 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4446 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 69] { R4448 += 1, R4404 += 1 };
  s0 -> s2 [0, 65535] { R4448 += 1, R4403 += 1, R4404 += 1 };
  s0 -> s0 [0, 65535] { R4447 += 1, R4448 += 1 };
  s0 -> s3 [70, 70] { R4448 += 1, R4404 += 1 };
  s0 -> s4 [70, 70] { R4448 += 1, R4404 += 1 };
  s0 -> s5 [75, 75] { R4448 += 1, R4404 += 1 };
  s0 -> s1 [76, 65535] { R4448 += 1, R4404 += 1 };
  s1 -> s1 [0, 69] { R4448 += 1, R4404 += 1 };
  s1 -> s3 [70, 70] { R4448 += 1, R4404 += 1 };
  s1 -> s4 [70, 70] { R4448 += 1, R4404 += 1 };
  s1 -> s5 [75, 75] { R4448 += 1, R4404 += 1 };
  s1 -> s1 [76, 65535] { R4448 += 1, R4404 += 1 };
  s2 -> s1 [0, 69] { R4448 += 1, R4404 += 1 };
  s2 -> s2 [0, 65535] { R4448 += 1, R4403 += 1, R4404 += 1 };
  s2 -> s3 [70, 70] { R4448 += 1, R4404 += 1 };
  s2 -> s4 [70, 70] { R4448 += 1, R4404 += 1 };
  s2 -> s5 [75, 75] { R4448 += 1, R4404 += 1 };
  s2 -> s1 [76, 65535] { R4448 += 1, R4404 += 1 };
  s3 -> s3 [0, 70] { R4448 += 1, R4404 += 1 };
  s3 -> s8 [75, 75] { R4448 += 1, R4404 += 1 };
  s3 -> s3 [76, 65535] { R4448 += 1, R4404 += 1 };
  s5 -> s5 [0, 69] { R4448 += 1, R4404 += 1 };
  s5 -> s5 [0, 65535] { R4448 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [70, 70] { R4448 += 1, R4404 += 1 };
  s5 -> s8 [70, 70] { R4448 += 1, R4404 += 1 };
  s5 -> s5 [75, 65535] { R4448 += 1, R4404 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R4448 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 70] { R4448 += 1, R4404 += 1 };
  s8 -> s8 [0, 65535] { R4448 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [75, 65535] { R4448 += 1, R4404 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 69] { R4450 += 1, R4406 += 1, R83 += 1 };
  s0 -> s0 [0, 65535] { R4449 += 1, R4450 += 1 };
  s0 -> s2 [0, 65535] { R4450 += 1, R4405 += 1, R4406 += 1 };
  s0 -> s3 [70, 70] { R4450 += 1, R4406 += 1, R83 += 1 };
  s0 -> s4 [70, 70] { R4450 += 1, R4406 += 1, R83 += 1 };
  s0 -> s1 [71, 65535] { R4450 += 1, R4406 += 1, R83 += 1 };
  s1 -> s1 [0, 69] { R4450 += 1, R4406 += 1, R83 += 1 };
  s1 -> s1 [0, 65535] { R4450 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [70, 70] { R4450 += 1, R4406 += 1, R83 += 1 };
  s1 -> s4 [70, 70] { R4450 += 1, R4406 += 1, R83 += 1 };
  s1 -> s1 [71, 65535] { R4450 += 1, R4406 += 1, R83 += 1 };
  s2 -> s1 [0, 69] { R4450 += 1, R4406 += 1, R83 += 1 };
  s2 -> s2 [0, 65535] { R4450 += 1, R4405 += 1, R4406 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [70, 70] { R4450 += 1, R4406 += 1, R83 += 1 };
  s2 -> s4 [70, 70] { R4450 += 1, R4406 += 1, R83 += 1 };
  s2 -> s1 [71, 65535] { R4450 += 1, R4406 += 1, R83 += 1 };
  s3 -> s3 [0, 65535] { R4450 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R4450 += 1, R4406 += 1, R83 += 1 };
  s4 -> s5 [0, 65535] { R4450 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R4450 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 69] { R4452 += 1, R4408 += 1, R85 += 1 };
  s0 -> s0 [0, 65535] { R4451 += 1, R4452 += 1 };
  s0 -> s2 [0, 65535] { R4452 += 1, R4407 += 1, R4408 += 1 };
  s0 -> s3 [70, 70] { R4452 += 1, R4408 += 1, R85 += 1 };
  s0 -> s4 [70, 70] { R4452 += 1, R4408 += 1, R85 += 1 };
  s0 -> s1 [71, 65535] { R4452 += 1, R4408 += 1, R85 += 1 };
  s1 -> s1 [0, 69] { R4452 += 1, R4408 += 1, R85 += 1 };
  s1 -> s1 [0, 65535] { R4452 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [70, 70] { R4452 += 1, R4408 += 1, R85 += 1 };
  s1 -> s4 [70, 70] { R4452 += 1, R4408 += 1, R85 += 1 };
  s1 -> s1 [71, 65535] { R4452 += 1, R4408 += 1, R85 += 1 };
  s2 -> s1 [0, 69] { R4452 += 1, R4408 += 1, R85 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R4452 += 1, R4407 += 1, R4408 += 1 };
  s2 -> s3 [70, 70] { R4452 += 1, R4408 += 1, R85 += 1 };
  s2 -> s4 [70, 70] { R4452 += 1, R4408 += 1, R85 += 1 };
  s2 -> s1 [71, 65535] { R4452 += 1, R4408 += 1, R85 += 1 };
  s3 -> s3 [0, 65535] { R4452 += 1, R4408 += 1, R85 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R4452 += 1 };
  s4 -> s4 [0, 65535] { R4452 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R4452 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 69] { R4454 += 1, R4410 += 1, R87 += 1, R88 += 1 };
  s0 -> s2 [0, 69] { R4454 += 1, R4410 += 1, R88 += 1 };
  s0 -> s3 [0, 65535] { R4454 += 1, R4409 += 1, R4410 += 1 };
  s0 -> s0 [0, 65535] { R4453 += 1, R4454 += 1 };
  s0 -> s4 [70, 70] { R4454 += 1, R4410 += 1, R88 += 1 };
  s0 -> s5 [70, 70] { R4454 += 1, R4410 += 1, R88 += 1 };
  s0 -> s6 [70, 70] { R4454 += 1, R4410 += 1, R87 += 1, R88 += 1 };
  s0 -> s7 [70, 70] { R4454 += 1, R4410 += 1, R87 += 1, R88 += 1 };
  s0 -> s2 [71, 74] { R4454 += 1, R4410 += 1, R88 += 1 };
  s0 -> s1 [71, 65535] { R4454 += 1, R4410 += 1, R87 += 1, R88 += 1 };
  s0 -> s8 [75, 75] { R4454 += 1, R4410 += 1, R88 += 1 };
  s0 -> s2 [76, 65535] { R4454 += 1, R4410 += 1, R88 += 1 };
  s1 -> s1 [0, 69] { R4454 += 1, R4410 += 1, R87 += 1, R88 += 1 };
  s1 -> s2 [0, 69] { R4454 += 1, R4410 += 1, R88 += 1 };
  s1 -> s4 [70, 70] { R4454 += 1, R4410 += 1, R88 += 1 };
  s1 -> s5 [70, 70] { R4454 += 1, R4410 += 1, R88 += 1 };
  s1 -> s6 [70, 70] { R4454 += 1, R4410 += 1, R87 += 1, R88 += 1 };
  s1 -> s7 [70, 70] { R4454 += 1, R4410 += 1, R87 += 1, R88 += 1 };
  s1 -> s2 [71, 74] { R4454 += 1, R4410 += 1, R88 += 1 };
  s1 -> s1 [71, 65535] { R4454 += 1, R4410 += 1, R87 += 1, R88 += 1 };
  s1 -> s8 [75, 75] { R4454 += 1, R4410 += 1, R88 += 1 };
  s1 -> s2 [76, 65535] { R4454 += 1, R4410 += 1, R88 += 1 };
  s2 -> s2 [0, 69] { R4454 += 1, R4410 += 1, R88 += 1 };
  s2 -> s4 [70, 70] { R4454 += 1, R4410 += 1, R88 += 1 };
  s2 -> s5 [70, 70] { R4454 += 1, R4410 += 1, R88 += 1 };
  s2 -> s2 [71, 74] { R4454 += 1, R4410 += 1, R88 += 1 };
  s2 -> s8 [75, 75] { R4454 += 1, R4410 += 1, R88 += 1 };
  s2 -> s2 [76, 65535] { R4454 += 1, R4410 += 1, R88 += 1 };
  s3 -> s1 [0, 69] { R4454 += 1, R4410 += 1, R87 += 1, R88 += 1 };
  s3 -> s2 [0, 69] { R4454 += 1, R4410 += 1, R88 += 1 };
  s3 -> s3 [0, 65535] { R4454 += 1, R4409 += 1, R4410 += 1 };
  s3 -> s4 [70, 70] { R4454 += 1, R4410 += 1, R88 += 1 };
  s3 -> s5 [70, 70] { R4454 += 1, R4410 += 1, R88 += 1 };
  s3 -> s6 [70, 70] { R4454 += 1, R4410 += 1, R87 += 1, R88 += 1 };
  s3 -> s7 [70, 70] { R4454 += 1, R4410 += 1, R87 += 1, R88 += 1 };
  s3 -> s2 [71, 74] { R4454 += 1, R4410 += 1, R88 += 1 };
  s3 -> s1 [71, 65535] { R4454 += 1, R4410 += 1, R87 += 1, R88 += 1 };
  s3 -> s8 [75, 75] { R4454 += 1, R4410 += 1, R88 += 1 };
  s3 -> s2 [76, 65535] { R4454 += 1, R4410 += 1, R88 += 1 };
  s4 -> s4 [0, 74] { R4454 += 1, R4410 += 1, R88 += 1 };
  s4 -> s10 [75, 75] { R4454 += 1, R4410 += 1, R88 += 1 };
  s4 -> s4 [76, 65535] { R4454 += 1, R4410 += 1, R88 += 1 };
  s7 -> s4 [0, 74] { R4454 += 1, R4410 += 1, R88 += 1 };
  s7 -> s7 [0, 65535] { R4454 += 1, R4410 += 1, R87 += 1, R88 += 1 };
  s7 -> s10 [75, 75] { R4454 += 1, R4410 += 1, R88 += 1 };
  s7 -> s4 [76, 65535] { R4454 += 1, R4410 += 1, R88 += 1 };
  s8 -> s8 [0, 69] { R4454 += 1, R4410 += 1, R88 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R4454 += 1 };
  s8 -> s10 [70, 70] { R4454 += 1, R4410 += 1, R88 += 1 };
  s8 -> s11 [70, 70] { R4454 += 1, R4410 += 1, R88 += 1 };
  s8 -> s8 [71, 65535] { R4454 += 1, R4410 += 1, R88 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R4454 += 1, R4410 += 1, R88 += 1 };
  s10 -> s12 [0, 65535] { R4454 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R4454 += 1 };
  s11 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R4454 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 69] { R4456 += 1, R4412 += 1, R91 += 1, R92 += 1 };
  s0 -> s0 [0, 65535] { R4455 += 1, R4456 += 1 };
  s0 -> s2 [0, 65535] { R4456 += 1, R4411 += 1, R4412 += 1 };
  s0 -> s3 [70, 70] { R4456 += 1, R4412 += 1, R91 += 1, R92 += 1 };
  s0 -> s4 [70, 70] { R4456 += 1, R4412 += 1, R91 += 1, R92 += 1 };
  s0 -> s1 [71, 65535] { R4456 += 1, R4412 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 69] { R4456 += 1, R4412 += 1, R91 += 1, R92 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R4456 += 1 };
  s1 -> s3 [70, 70] { R4456 += 1, R4412 += 1, R91 += 1, R92 += 1 };
  s1 -> s4 [70, 70] { R4456 += 1, R4412 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [71, 65535] { R4456 += 1, R4412 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [0, 69] { R4456 += 1, R4412 += 1, R91 += 1, R92 += 1 };
  s2 -> s2 [0, 65535] { R4456 += 1, R4411 += 1, R4412 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [70, 70] { R4456 += 1, R4412 += 1, R91 += 1, R92 += 1 };
  s2 -> s4 [70, 70] { R4456 += 1, R4412 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [71, 65535] { R4456 += 1, R4412 += 1, R91 += 1, R92 += 1 };
  s3 -> s3 [0, 65535] { R4456 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R4456 += 1 };
  s4 -> s4 [0, 65535] { R4456 += 1, R4412 += 1, R91 += 1, R92 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R4456 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 69] { R4458 += 1, R4414 += 1, R3451 += 1, R3452 += 1 };
  s0 -> s2 [0, 69] { R4458 += 1, R4414 += 1, R3452 += 1, R3453 += 1 };
  s0 -> s3 [0, 69] { R4458 += 1, R4414 += 1, R3452 += 1 };
  s0 -> s4 [0, 65535] { R4458 += 1, R4413 += 1, R4414 += 1 };
  s0 -> s0 [0, 65535] { R4457 += 1, R4458 += 1 };
  s0 -> s5 [70, 70] { R4458 += 1, R4414 += 1, R3452 += 1, R3453 += 1 };
  s0 -> s6 [70, 70] { R4458 += 1, R4414 += 1, R3452 += 1, R3453 += 1 };
  s0 -> s7 [70, 70] { R4458 += 1, R4414 += 1, R3451 += 1, R3452 += 1 };
  s0 -> s8 [70, 70] { R4458 += 1, R4414 += 1, R3452 += 1 };
  s0 -> s9 [70, 70] { R4458 += 1, R4414 += 1, R3451 += 1, R3452 += 1 };
  s0 -> s10 [70, 70] { R4458 += 1, R4414 += 1, R3452 += 1 };
  s0 -> s3 [71, 74] { R4458 += 1, R4414 += 1, R3452 += 1 };
  s0 -> s1 [71, 65535] { R4458 += 1, R4414 += 1, R3451 += 1, R3452 += 1 };
  s0 -> s2 [71, 65535] { R4458 += 1, R4414 += 1, R3452 += 1, R3453 += 1 };
  s0 -> s3 [76, 65535] { R4458 += 1, R4414 += 1, R3452 += 1 };
  s1 -> s1 [0, 69] { R4458 += 1, R4414 += 1, R3451 += 1, R3452 += 1 };
  s1 -> s2 [0, 69] { R4458 += 1, R4414 += 1, R3452 += 1, R3453 += 1 };
  s1 -> s3 [0, 69] { R4458 += 1, R4414 += 1, R3452 += 1 };
  s1 -> s5 [70, 70] { R4458 += 1, R4414 += 1, R3452 += 1, R3453 += 1 };
  s1 -> s6 [70, 70] { R4458 += 1, R4414 += 1, R3452 += 1, R3453 += 1 };
  s1 -> s7 [70, 70] { R4458 += 1, R4414 += 1, R3451 += 1, R3452 += 1 };
  s1 -> s8 [70, 70] { R4458 += 1, R4414 += 1, R3452 += 1 };
  s1 -> s9 [70, 70] { R4458 += 1, R4414 += 1, R3451 += 1, R3452 += 1 };
  s1 -> s10 [70, 70] { R4458 += 1, R4414 += 1, R3452 += 1 };
  s1 -> s3 [71, 74] { R4458 += 1, R4414 += 1, R3452 += 1 };
  s1 -> s1 [71, 65535] { R4458 += 1, R4414 += 1, R3451 += 1, R3452 += 1 };
  s1 -> s2 [71, 65535] { R4458 += 1, R4414 += 1, R3452 += 1, R3453 += 1 };
  s1 -> s3 [76, 65535] { R4458 += 1, R4414 += 1, R3452 += 1 };
  s2 -> s2 [0, 69] { R4458 += 1, R4414 += 1, R3452 += 1, R3453 += 1 };
  s2 -> s3 [0, 69] { R4458 += 1, R4414 += 1, R3452 += 1 };
  s2 -> s5 [70, 70] { R4458 += 1, R4414 += 1, R3452 += 1, R3453 += 1 };
  s2 -> s6 [70, 70] { R4458 += 1, R4414 += 1, R3452 += 1, R3453 += 1 };
  s2 -> s8 [70, 70] { R4458 += 1, R4414 += 1, R3452 += 1 };
  s2 -> s10 [70, 70] { R4458 += 1, R4414 += 1, R3452 += 1 };
  s2 -> s3 [71, 74] { R4458 += 1, R4414 += 1, R3452 += 1 };
  s2 -> s2 [71, 65535] { R4458 += 1, R4414 += 1, R3452 += 1, R3453 += 1 };
  s2 -> s3 [76, 65535] { R4458 += 1, R4414 += 1, R3452 += 1 };
  s3 -> s3 [0, 69] { R4458 += 1, R4414 += 1, R3452 += 1 };
  s3 -> s3 [0, 65535] { R4458 += 1 };
  s3 -> s11 [0, 65535];
  s3 -> s8 [70, 70] { R4458 += 1, R4414 += 1 };
  s3 -> s10 [70, 70] { R4458 += 1, R4414 += 1 };
  s3 -> s3 [71, 74] { R4458 += 1, R4414 += 1, R3452 += 1 };
  s3 -> s3 [71, 65535] { R4458 += 1, R4414 += 1 };
  s3 -> s3 [76, 65535] { R4458 += 1, R4414 += 1, R3452 += 1 };
  s4 -> s1 [0, 69] { R4458 += 1, R4414 += 1, R3451 += 1, R3452 += 1 };
  s4 -> s2 [0, 69] { R4458 += 1, R4414 += 1, R3452 += 1, R3453 += 1 };
  s4 -> s3 [0, 69] { R4458 += 1, R4414 += 1, R3452 += 1 };
  s4 -> s4 [0, 65535] { R4458 += 1, R4413 += 1, R4414 += 1 };
  s4 -> s5 [70, 70] { R4458 += 1, R4414 += 1, R3452 += 1, R3453 += 1 };
  s4 -> s6 [70, 70] { R4458 += 1, R4414 += 1, R3452 += 1, R3453 += 1 };
  s4 -> s7 [70, 70] { R4458 += 1, R4414 += 1, R3451 += 1, R3452 += 1 };
  s4 -> s8 [70, 70] { R4458 += 1, R4414 += 1, R3452 += 1 };
  s4 -> s9 [70, 70] { R4458 += 1, R4414 += 1, R3451 += 1, R3452 += 1 };
  s4 -> s10 [70, 70] { R4458 += 1, R4414 += 1, R3452 += 1 };
  s4 -> s3 [71, 74] { R4458 += 1, R4414 += 1, R3452 += 1 };
  s4 -> s1 [71, 65535] { R4458 += 1, R4414 += 1, R3451 += 1, R3452 += 1 };
  s4 -> s2 [71, 65535] { R4458 += 1, R4414 += 1, R3452 += 1, R3453 += 1 };
  s4 -> s3 [76, 65535] { R4458 += 1, R4414 += 1, R3452 += 1 };
  s5 -> s10 [0, 74] { R4458 += 1, R4414 += 1, R3452 += 1 };
  s5 -> s5 [0, 65535] { R4458 += 1, R4414 += 1, R3452 += 1, R3453 += 1 };
  s5 -> s10 [76, 65535] { R4458 += 1, R4414 += 1, R3452 += 1 };
  s7 -> s10 [0, 74] { R4458 += 1, R4414 += 1, R3452 += 1 };
  s7 -> s5 [0, 65535] { R4458 += 1, R4414 += 1, R3452 += 1, R3453 += 1 };
  s7 -> s7 [0, 65535] { R4458 += 1, R4414 += 1, R3451 += 1, R3452 += 1 };
  s7 -> s10 [76, 65535] { R4458 += 1, R4414 += 1, R3452 += 1 };
  s8 -> s11 [0, 65535];
  s8 -> s8 [0, 65535] { R4458 += 1 };
  s10 -> s10 [0, 74] { R4458 += 1, R4414 += 1, R3452 += 1 };
  s10 -> s11 [0, 65535];
  s10 -> s10 [0, 65535] { R4458 += 1, R4414 += 1 };
  s10 -> s12 [0, 65535] { R4458 += 1 };
  s10 -> s10 [76, 65535] { R4458 += 1, R4414 += 1, R3452 += 1 };
  s11 -> s11 [0, 65535];
  s12 -> s11 [0, 65535];
  s12 -> s12 [0, 65535] { R4458 += 1 };
  accepting s3, s12, s8, s10, s11;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 69] { R4460 += 1, R4416 += 1, R4016 += 1, R4018 += 1 };
  s0 -> s2 [0, 69] { R4460 += 1, R4416 += 1, R4015 += 1, R4016 += 1 };
  s0 -> s3 [0, 69] { R4460 += 1, R4416 += 1, R4016 += 1, R4017 += 1, R4018 += 1 };
  s0 -> s4 [0, 65535] { R4460 += 1, R4415 += 1, R4416 += 1 };
  s0 -> s0 [0, 65535] { R4459 += 1, R4460 += 1 };
  s0 -> s5 [70, 70] { R4460 += 1, R4416 += 1, R4015 += 1, R4016 += 1 };
  s0 -> s6 [70, 70] { R4460 += 1, R4416 += 1, R4016 += 1, R4018 += 1 };
  s0 -> s7 [70, 70] { R4460 += 1, R4416 += 1, R4016 += 1, R4018 += 1 };
  s0 -> s8 [70, 70] { R4460 += 1, R4416 += 1, R4015 += 1, R4016 += 1 };
  s0 -> s9 [70, 70] { R4460 += 1, R4416 += 1, R4016 += 1, R4017 += 1, R4018 += 1 };
  s0 -> s10 [70, 70] { R4460 += 1, R4416 += 1, R4016 += 1, R4017 += 1, R4018 += 1 };
  s0 -> s1 [71, 74] { R4460 += 1, R4416 += 1, R4016 += 1, R4018 += 1 };
  s0 -> s2 [71, 65535] { R4460 += 1, R4416 += 1, R4015 += 1, R4016 += 1 };
  s0 -> s3 [71, 65535] { R4460 += 1, R4416 += 1, R4016 += 1, R4017 += 1, R4018 += 1 };
  s0 -> s11 [75, 75] { R4460 += 1, R4416 += 1, R4016 += 1, R4018 += 1 };
  s0 -> s1 [76, 65535] { R4460 += 1, R4416 += 1, R4016 += 1, R4018 += 1 };
  s1 -> s1 [0, 69] { R4460 += 1, R4416 += 1, R4016 += 1, R4018 += 1 };
  s1 -> s6 [70, 70] { R4460 += 1, R4416 += 1, R4016 += 1, R4018 += 1 };
  s1 -> s7 [70, 70] { R4460 += 1, R4416 += 1, R4016 += 1, R4018 += 1 };
  s1 -> s1 [71, 74] { R4460 += 1, R4416 += 1, R4016 += 1, R4018 += 1 };
  s1 -> s11 [75, 75] { R4460 += 1, R4416 += 1, R4016 += 1, R4018 += 1 };
  s1 -> s1 [76, 65535] { R4460 += 1, R4416 += 1, R4016 += 1, R4018 += 1 };
  s2 -> s1 [0, 69] { R4460 += 1, R4416 += 1, R4016 += 1, R4018 += 1 };
  s2 -> s2 [0, 69] { R4460 += 1, R4416 += 1, R4015 += 1, R4016 += 1 };
  s2 -> s3 [0, 69] { R4460 += 1, R4416 += 1, R4016 += 1, R4017 += 1, R4018 += 1 };
  s2 -> s5 [70, 70] { R4460 += 1, R4416 += 1, R4015 += 1, R4016 += 1 };
  s2 -> s6 [70, 70] { R4460 += 1, R4416 += 1, R4016 += 1, R4018 += 1 };
  s2 -> s7 [70, 70] { R4460 += 1, R4416 += 1, R4016 += 1, R4018 += 1 };
  s2 -> s8 [70, 70] { R4460 += 1, R4416 += 1, R4015 += 1, R4016 += 1 };
  s2 -> s9 [70, 70] { R4460 += 1, R4416 += 1, R4016 += 1, R4017 += 1, R4018 += 1 };
  s2 -> s10 [70, 70] { R4460 += 1, R4416 += 1, R4016 += 1, R4017 += 1, R4018 += 1 };
  s2 -> s1 [71, 74] { R4460 += 1, R4416 += 1, R4016 += 1, R4018 += 1 };
  s2 -> s2 [71, 65535] { R4460 += 1, R4416 += 1, R4015 += 1, R4016 += 1 };
  s2 -> s3 [71, 65535] { R4460 += 1, R4416 += 1, R4016 += 1, R4017 += 1, R4018 += 1 };
  s2 -> s11 [75, 75] { R4460 += 1, R4416 += 1, R4016 += 1, R4018 += 1 };
  s2 -> s1 [76, 65535] { R4460 += 1, R4416 += 1, R4016 += 1, R4018 += 1 };
  s3 -> s1 [0, 69] { R4460 += 1, R4416 += 1, R4016 += 1, R4018 += 1 };
  s3 -> s3 [0, 69] { R4460 += 1, R4416 += 1, R4016 += 1, R4017 += 1, R4018 += 1 };
  s3 -> s6 [70, 70] { R4460 += 1, R4416 += 1, R4016 += 1, R4018 += 1 };
  s3 -> s7 [70, 70] { R4460 += 1, R4416 += 1, R4016 += 1, R4018 += 1 };
  s3 -> s9 [70, 70] { R4460 += 1, R4416 += 1, R4016 += 1, R4017 += 1, R4018 += 1 };
  s3 -> s10 [70, 70] { R4460 += 1, R4416 += 1, R4016 += 1, R4017 += 1, R4018 += 1 };
  s3 -> s1 [71, 74] { R4460 += 1, R4416 += 1, R4016 += 1, R4018 += 1 };
  s3 -> s3 [71, 65535] { R4460 += 1, R4416 += 1, R4016 += 1, R4017 += 1, R4018 += 1 };
  s3 -> s11 [75, 75] { R4460 += 1, R4416 += 1, R4016 += 1, R4018 += 1 };
  s3 -> s1 [76, 65535] { R4460 += 1, R4416 += 1, R4016 += 1, R4018 += 1 };
  s4 -> s1 [0, 69] { R4460 += 1, R4416 += 1, R4016 += 1, R4018 += 1 };
  s4 -> s2 [0, 69] { R4460 += 1, R4416 += 1, R4015 += 1, R4016 += 1 };
  s4 -> s3 [0, 69] { R4460 += 1, R4416 += 1, R4016 += 1, R4017 += 1, R4018 += 1 };
  s4 -> s4 [0, 65535] { R4460 += 1, R4415 += 1, R4416 += 1 };
  s4 -> s5 [70, 70] { R4460 += 1, R4416 += 1, R4015 += 1, R4016 += 1 };
  s4 -> s6 [70, 70] { R4460 += 1, R4416 += 1, R4016 += 1, R4018 += 1 };
  s4 -> s7 [70, 70] { R4460 += 1, R4416 += 1, R4016 += 1, R4018 += 1 };
  s4 -> s8 [70, 70] { R4460 += 1, R4416 += 1, R4015 += 1, R4016 += 1 };
  s4 -> s9 [70, 70] { R4460 += 1, R4416 += 1, R4016 += 1, R4017 += 1, R4018 += 1 };
  s4 -> s10 [70, 70] { R4460 += 1, R4416 += 1, R4016 += 1, R4017 += 1, R4018 += 1 };
  s4 -> s1 [71, 74] { R4460 += 1, R4416 += 1, R4016 += 1, R4018 += 1 };
  s4 -> s2 [71, 65535] { R4460 += 1, R4416 += 1, R4015 += 1, R4016 += 1 };
  s4 -> s3 [71, 65535] { R4460 += 1, R4416 += 1, R4016 += 1, R4017 += 1, R4018 += 1 };
  s4 -> s11 [75, 75] { R4460 += 1, R4416 += 1, R4016 += 1, R4018 += 1 };
  s4 -> s1 [76, 65535] { R4460 += 1, R4416 += 1, R4016 += 1, R4018 += 1 };
  s6 -> s6 [0, 74] { R4460 += 1, R4416 += 1, R4016 += 1, R4018 += 1 };
  s6 -> s13 [75, 75] { R4460 += 1, R4416 += 1, R4016 += 1, R4018 += 1 };
  s6 -> s6 [76, 65535] { R4460 += 1, R4416 += 1, R4016 += 1, R4018 += 1 };
  s8 -> s6 [0, 74] { R4460 += 1, R4416 += 1, R4016 += 1, R4018 += 1 };
  s8 -> s8 [0, 65535] { R4460 += 1, R4416 += 1, R4015 += 1, R4016 += 1 };
  s8 -> s9 [0, 65535] { R4460 += 1, R4416 += 1, R4016 += 1, R4017 += 1, R4018 += 1 };
  s8 -> s13 [75, 75] { R4460 += 1, R4416 += 1, R4016 += 1, R4018 += 1 };
  s8 -> s6 [76, 65535] { R4460 += 1, R4416 += 1, R4016 += 1, R4018 += 1 };
  s9 -> s6 [0, 74] { R4460 += 1, R4416 += 1, R4016 += 1, R4018 += 1 };
  s9 -> s9 [0, 65535] { R4460 += 1, R4416 += 1, R4016 += 1, R4017 += 1, R4018 += 1 };
  s9 -> s13 [75, 75] { R4460 += 1, R4416 += 1, R4016 += 1, R4018 += 1 };
  s9 -> s6 [76, 65535] { R4460 += 1, R4416 += 1, R4016 += 1, R4018 += 1 };
  s11 -> s11 [0, 69] { R4460 += 1, R4416 += 1, R4016 += 1, R4018 += 1 };
  s11 -> s12 [0, 69] { R4460 += 1, R4416 += 1, R4016 += 1 };
  s11 -> s13 [70, 70] { R4460 += 1, R4416 += 1, R4016 += 1, R4018 += 1 };
  s11 -> s14 [70, 70] { R4460 += 1, R4416 += 1, R4016 += 1, R4018 += 1 };
  s11 -> s15 [70, 70] { R4460 += 1, R4416 += 1, R4016 += 1 };
  s11 -> s16 [70, 70] { R4460 += 1, R4416 += 1, R4016 += 1 };
  s11 -> s11 [71, 65535] { R4460 += 1, R4416 += 1, R4016 += 1, R4018 += 1 };
  s11 -> s12 [71, 65535] { R4460 += 1, R4416 += 1, R4016 += 1 };
  s12 -> s12 [0, 69] { R4460 += 1, R4416 += 1, R4016 += 1 };
  s12 -> s17 [0, 65535];
  s12 -> s12 [0, 65535] { R4460 += 1 };
  s12 -> s15 [70, 70] { R4460 += 1, R4416 += 1, R4016 += 1 };
  s12 -> s16 [70, 70] { R4460 += 1, R4416 += 1, R4016 += 1 };
  s12 -> s12 [71, 65535] { R4460 += 1, R4416 += 1, R4016 += 1 };
  s13 -> s13 [0, 65535] { R4460 += 1, R4416 += 1, R4016 += 1, R4018 += 1 };
  s13 -> s15 [0, 65535] { R4460 += 1, R4416 += 1, R4016 += 1 };
  s15 -> s17 [0, 65535];
  s15 -> s18 [0, 65535] { R4460 += 1 };
  s15 -> s15 [0, 65535] { R4460 += 1, R4416 += 1, R4016 += 1 };
  s16 -> s17 [0, 65535];
  s16 -> s16 [0, 65535] { R4460 += 1 };
  s17 -> s17 [0, 65535];
  s18 -> s17 [0, 65535];
  s18 -> s18 [0, 65535] { R4460 += 1 };
  accepting s17, s16, s12, s18, s15;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 69] { R4462 += 1, R4418 += 1, R4354 += 1, R4356 += 1, R4357 += 1 };
  s0 -> s2 [0, 69] { R4462 += 1, R4418 += 1, R4354 += 1, R4355 += 1, R4356 += 1 };
  s0 -> s3 [0, 69] { R4462 += 1, R4418 += 1, R4353 += 1, R4354 += 1 };
  s0 -> s0 [0, 65535] { R4461 += 1, R4462 += 1 };
  s0 -> s4 [0, 65535] { R4462 += 1, R4417 += 1, R4418 += 1 };
  s0 -> s5 [70, 70] { R4462 += 1, R4418 += 1, R4353 += 1, R4354 += 1 };
  s0 -> s6 [70, 70] { R4462 += 1, R4418 += 1, R4354 += 1, R4355 += 1, R4356 += 1 };
  s0 -> s7 [70, 70] { R4462 += 1, R4418 += 1, R4354 += 1, R4356 += 1, R4357 += 1 };
  s0 -> s8 [70, 70] { R4462 += 1, R4418 += 1, R4354 += 1, R4355 += 1, R4356 += 1 };
  s0 -> s9 [70, 70] { R4462 += 1, R4418 += 1, R4353 += 1, R4354 += 1 };
  s0 -> s10 [70, 70] { R4462 += 1, R4418 += 1, R4354 += 1, R4356 += 1, R4357 += 1 };
  s0 -> s1 [71, 65535] { R4462 += 1, R4418 += 1, R4354 += 1, R4356 += 1, R4357 += 1 };
  s0 -> s2 [71, 65535] { R4462 += 1, R4418 += 1, R4354 += 1, R4355 += 1, R4356 += 1 };
  s0 -> s3 [71, 65535] { R4462 += 1, R4418 += 1, R4353 += 1, R4354 += 1 };
  s1 -> s1 [0, 69] { R4462 += 1, R4418 += 1, R4354 += 1, R4356 += 1, R4357 += 1 };
  s1 -> s1 [0, 65535] { R4462 += 1 };
  s1 -> s11 [0, 65535];
  s1 -> s7 [70, 70] { R4462 += 1, R4418 += 1, R4354 += 1, R4356 += 1, R4357 += 1 };
  s1 -> s10 [70, 70] { R4462 += 1, R4418 += 1, R4354 += 1, R4356 += 1, R4357 += 1 };
  s1 -> s1 [71, 65535] { R4462 += 1, R4418 += 1, R4354 += 1, R4356 += 1, R4357 += 1 };
  s2 -> s1 [0, 69] { R4462 += 1, R4418 += 1, R4354 += 1, R4356 += 1, R4357 += 1 };
  s2 -> s2 [0, 69] { R4462 += 1, R4418 += 1, R4354 += 1, R4355 += 1, R4356 += 1 };
  s2 -> s6 [70, 70] { R4462 += 1, R4418 += 1, R4354 += 1, R4355 += 1, R4356 += 1 };
  s2 -> s7 [70, 70] { R4462 += 1, R4418 += 1, R4354 += 1, R4356 += 1, R4357 += 1 };
  s2 -> s8 [70, 70] { R4462 += 1, R4418 += 1, R4354 += 1, R4355 += 1, R4356 += 1 };
  s2 -> s10 [70, 70] { R4462 += 1, R4418 += 1, R4354 += 1, R4356 += 1, R4357 += 1 };
  s2 -> s1 [71, 65535] { R4462 += 1, R4418 += 1, R4354 += 1, R4356 += 1, R4357 += 1 };
  s2 -> s2 [71, 65535] { R4462 += 1, R4418 += 1, R4354 += 1, R4355 += 1, R4356 += 1 };
  s3 -> s1 [0, 69] { R4462 += 1, R4418 += 1, R4354 += 1, R4356 += 1, R4357 += 1 };
  s3 -> s2 [0, 69] { R4462 += 1, R4418 += 1, R4354 += 1, R4355 += 1, R4356 += 1 };
  s3 -> s3 [0, 69] { R4462 += 1, R4418 += 1, R4353 += 1, R4354 += 1 };
  s3 -> s5 [70, 70] { R4462 += 1, R4418 += 1, R4353 += 1, R4354 += 1 };
  s3 -> s6 [70, 70] { R4462 += 1, R4418 += 1, R4354 += 1, R4355 += 1, R4356 += 1 };
  s3 -> s7 [70, 70] { R4462 += 1, R4418 += 1, R4354 += 1, R4356 += 1, R4357 += 1 };
  s3 -> s8 [70, 70] { R4462 += 1, R4418 += 1, R4354 += 1, R4355 += 1, R4356 += 1 };
  s3 -> s9 [70, 70] { R4462 += 1, R4418 += 1, R4353 += 1, R4354 += 1 };
  s3 -> s10 [70, 70] { R4462 += 1, R4418 += 1, R4354 += 1, R4356 += 1, R4357 += 1 };
  s3 -> s1 [71, 65535] { R4462 += 1, R4418 += 1, R4354 += 1, R4356 += 1, R4357 += 1 };
  s3 -> s2 [71, 65535] { R4462 += 1, R4418 += 1, R4354 += 1, R4355 += 1, R4356 += 1 };
  s3 -> s3 [71, 65535] { R4462 += 1, R4418 += 1, R4353 += 1, R4354 += 1 };
  s4 -> s1 [0, 69] { R4462 += 1, R4418 += 1, R4354 += 1, R4356 += 1, R4357 += 1 };
  s4 -> s2 [0, 69] { R4462 += 1, R4418 += 1, R4354 += 1, R4355 += 1, R4356 += 1 };
  s4 -> s3 [0, 69] { R4462 += 1, R4418 += 1, R4353 += 1, R4354 += 1 };
  s4 -> s4 [0, 65535] { R4462 += 1, R4417 += 1, R4418 += 1 };
  s4 -> s5 [70, 70] { R4462 += 1, R4418 += 1, R4353 += 1, R4354 += 1 };
  s4 -> s6 [70, 70] { R4462 += 1, R4418 += 1, R4354 += 1, R4355 += 1, R4356 += 1 };
  s4 -> s7 [70, 70] { R4462 += 1, R4418 += 1, R4354 += 1, R4356 += 1, R4357 += 1 };
  s4 -> s8 [70, 70] { R4462 += 1, R4418 += 1, R4354 += 1, R4355 += 1, R4356 += 1 };
  s4 -> s9 [70, 70] { R4462 += 1, R4418 += 1, R4353 += 1, R4354 += 1 };
  s4 -> s10 [70, 70] { R4462 += 1, R4418 += 1, R4354 += 1, R4356 += 1, R4357 += 1 };
  s4 -> s1 [71, 65535] { R4462 += 1, R4418 += 1, R4354 += 1, R4356 += 1, R4357 += 1 };
  s4 -> s2 [71, 65535] { R4462 += 1, R4418 += 1, R4354 += 1, R4355 += 1, R4356 += 1 };
  s4 -> s3 [71, 65535] { R4462 += 1, R4418 += 1, R4353 += 1, R4354 += 1 };
  s7 -> s7 [0, 65535] { R4462 += 1, R4418 += 1, R4354 += 1, R4356 += 1, R4357 += 1 };
  s7 -> s12 [0, 65535] { R4462 += 1 };
  s7 -> s11 [0, 65535];
  s8 -> s7 [0, 65535] { R4462 += 1, R4418 += 1, R4354 += 1, R4356 += 1, R4357 += 1 };
  s8 -> s8 [0, 65535] { R4462 += 1, R4418 += 1, R4354 += 1, R4355 += 1, R4356 += 1 };
  s9 -> s7 [0, 65535] { R4462 += 1, R4418 += 1, R4354 += 1, R4356 += 1, R4357 += 1 };
  s9 -> s8 [0, 65535] { R4462 += 1, R4418 += 1, R4354 += 1, R4355 += 1, R4356 += 1 };
  s9 -> s9 [0, 65535] { R4462 += 1, R4418 += 1, R4353 += 1, R4354 += 1 };
  s10 -> s11 [0, 65535];
  s10 -> s10 [0, 65535] { R4462 += 1 };
  s11 -> s11 [0, 65535];
  s12 -> s12 [0, 65535] { R4462 += 1 };
  s12 -> s11 [0, 65535];
  accepting s12, s1, s7, s10, s11;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [102, 102];
  accepting s1;
};
};
constraint R3 = R4462 && R23 - R4462 = -1 && R24 = R4462 && R25 - R4462 = -1 && R26 = R4462 && R27 = 0 && R28 = 1 && R29 = 0 && R30 = 1 && R45 + R84 + R83 + -1*R4020 + -1*R4016 - R66 = 0 && R49 + R89 + R87 = 0 && R50 + R90 + R88 + -1*R4020 + -1*R4016 - R66 = 0 && R55 + R96 + R93 + -1*R4022 + -1*R4018 - R68 = 0 && R65 + R4019 + R4015 = 0 && R67 + R4021 + R4017 = 0 && R4403 = 0 && R4404 = 0 && R4409 = 0 && R4410 = 0 && R4413 = 0 && R4414 = 0 && R4415 = 0 && R4416 = 0 && R4417 = 0 && R4418 = 0 && R4419 = 0 && R4420 = R4462 && R4421 = 0 && R4422 = R4462 && R4423 = 0 && R4424 = R4462 && R4425 = 0 && R4426 = R4462 && R4427 = 0 && R4428 = R4462 && R4429 = 0 && R4430 = R4462 && R4431 = 0 && R4432 = R4462 && R4433 = 0 && R4434 = R4462 && R4435 = 0 && R4436 = R4462 && R4437 = 0 && R4438 = R4462 && R4439 = 0 && R4440 = R4462 && R4441 = 0 && R4442 = R4462 && R4443 = 0 && R4444 = R4462 && R4445 = 0 && R4446 = R4462 && R4447 = 0 && R4448 = R4462 && R4449 = 0 && R4450 = R4462 && R4451 = 0 && R4452 = R4462 && R4453 = 0 && R4454 = R4462 && R4455 = 0 && R4456 = R4462 && R4457 = 0 && R4458 = R4462 && R4459 = 0 && R4460 = R4462 && R4461 = 0 && -1 < R2 && R12 < 1 && R15 < 1 && R16 < 1 && R47 + R86 + R85 < 1 && R61 + R3456 + R3453 < 1 && -1*R4020 + -1*R4016 - R66 < 1 && -1*R4022 + -1*R4018 - R68 < 1 && 0 < R4462 && (R2 != 0 || R20 = 0 || (R4363 = 0 && R4364 = 0)) && (R2 != 0 || R20 = 0 || (R4365 = 0 && R4366 = 0)) && (R2 != 0 || R20 = 0 || (R4367 = 0 && R4368 = 0)) && (R2 != 0 || R20 = 0 || (R4369 = 0 && R4370 = 0)) && (R2 != 0 || R20 = 0 || (R4371 = 0 && R4372 = 0)) && (R2 != 0 || R20 = 0 || (R4373 = 0 && R4374 = 0)) && (R2 != 0 || R20 = 0 || (R4375 = 0 && R4376 = 0)) && (R2 != 0 || R20 = 0 || (R4377 = 0 && R4378 = 0)) && (R2 != 0 || R20 = 0 || (R4379 = 0 && R4380 = 0)) && (R2 != 0 || R20 = 0 || (R4381 = 0 && R4382 = 0)) && (R53 + R94 + R91 != 0 || R54 + R95 + R92 + -1*R4020 + -1*R4016 - R66 = 0 || R66 + R4020 + R4016 < 1) && (R59 + R3454 + R3451 != 0 || R60 + R3455 + R3452 + -1*R4020 + -1*R4016 - R66 = 0 || R66 + R4020 + R4016 < 1) && (R66 + R4020 + R4016 != 0 || ((R53 + R94 + R91 != 0 || R54 + R95 + R92 = 0 || R68 + R4022 + R4018 < 1) && (R53 + R94 + R91 = 0 || R68 + R4022 + R4018 < 1))) && (R66 + R4020 + R4016 != 0 || ((R59 + R3454 + R3451 != 0 || R60 + R3455 + R3452 = 0 || R68 + R4022 + R4018 < 1) && (R59 + R3454 + R3451 = 0 || R68 + R4022 + R4018 < 1))) && (R66 + R4020 + R4016 != 0 || ((R73 + R4358 + R4353 != 0 || R74 + R4359 + R4354 = 0 || R68 + R4022 + R4018 < 1) && (R73 + R4358 + R4353 = 0 || R68 + R4022 + R4018 < 1))) && (R68 + R4022 + R4018 != 0 || R77 + R4362 + R4357 = 0 || (R75 + R4360 + R4355 = 0 && R76 + R4361 + R4356 = 0)) && (R73 + R4358 + R4353 != 0 || R66 + R4020 + R4016 + -1*R4359 + -1*R4354 - R74 = 0 || R66 + R4020 + R4016 < 1) && (R75 + R4360 + R4355 != 0 || R68 + R4022 + R4018 + -1*R4361 + -1*R4356 - R76 = 0 || R68 + R4022 + R4018 < 1) && (R4363 != 0 || R2 = R4364 || R2 < 1) && (R4365 != 0 || R2 = R4366 || R2 < 1) && (R4367 != 0 || R2 = R4368 || R2 < 1) && (R4369 != 0 || R2 = R4370 || R2 < 1) && (R4371 != 0 || R2 = R4372 || R2 < 1) && (R4373 != 0 || R2 = R4374 || R2 < 1) && (R4375 != 0 || R2 = R4376 || R2 < 1) && (R4377 != 0 || R2 = R4378 || R2 < 1) && (R4379 != 0 || R2 = R4380 || R2 < 1) && (R4381 != 0 || R2 = R4382 || R2 < 1) && (R21 = 0 || (R4401 = 0 && R4402 = 0)) && (R21 = 0 || (R4405 = 0 && R4406 = 0)) && (R21 = 0 || (R4407 = 0 && R4408 = 0)) && (R21 = 0 || (R4411 = 0 && R4412 = 0)) && (R22 = 0 || (R4383 = 0 && R4384 = 0)) && (R22 = 0 || (R4385 = 0 && R4386 = 0)) && (R22 = 0 || (R4387 = 0 && R4388 = 0)) && (R22 = 0 || (R4389 = 0 && R4390 = 0)) && (R22 = 0 || (R4391 = 0 && R4392 = 0)) && (R22 = 0 || (R4393 = 0 && R4394 = 0)) && (R22 = 0 || (R4395 = 0 && R4396 = 0)) && (R22 = 0 || (R4397 = 0 && R4398 = 0)) && (R22 = 0 || (R4399 = 0 && R4400 = 0)) && (R53 + R94 + R91 = 0 || R66 + R4020 + R4016 < 1) && (R59 + R3454 + R3451 = 0 || R66 + R4020 + R4016 < 1) && (R73 + R4358 + R4353 = 0 || R66 + R4020 + R4016 < 1) && (R75 + R4360 + R4355 = 0 || R68 + R4022 + R4018 < 1) && (R4363 = 0 || R2 < 1) && (R4365 = 0 || R2 < 1) && (R4367 = 0 || R2 < 1) && (R4369 = 0 || R2 < 1) && (R4371 = 0 || R2 < 1) && (R4373 = 0 || R2 < 1) && (R4375 = 0 || R2 < 1) && (R4377 = 0 || R2 < 1) && (R4379 = 0 || R2 < 1) && (R4381 = 0 || R2 < 1);
// End of Parikh automata intersection problem
