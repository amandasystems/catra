// Parikh automata intersection problem, generated by OSTRICH+
counter int R100, R101, R102, R12, R1219, R1220, R1221, R1222, R1223, R1224, R1225, R1226, R1447, R1448, R1449, R1450, R1451, R1452, R1453, R1454, R1455, R1456, R1457, R1458, R1459, R1460, R1461, R1462, R1463, R1464, R1465, R1466, R1467, R1468, R1469, R1470, R1471, R1472, R1473, R1474, R1475, R1476, R1477, R1478, R1479, R1480, R1481, R1482, R1483, R1484, R1485, R1486, R1487, R1488, R1489, R1490, R1491, R1492, R1493, R1494, R1495, R1496, R1497, R1498, R1499, R15, R1500, R1501, R1502, R1503, R1504, R1505, R1506, R1507, R1508, R1509, R1510, R1511, R1512, R1513, R1514, R1515, R1516, R1517, R1518, R1519, R1520, R1521, R1522, R1523, R1524, R1525, R1526, R1527, R1528, R1529, R1530, R1531, R1532, R1533, R1534, R1535, R1536, R1537, R1538, R1539, R1540, R1541, R1542, R1543, R1544, R1545, R1546, R1547, R1548, R1549, R1550, R1551, R1552, R1553, R1554, R1555, R1556, R16, R2, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R4, R45, R47, R49, R5, R50, R53, R54, R55, R59, R60, R61, R65, R66, R67, R68, R73, R74, R75, R76, R77, R83, R84, R85, R86, R87, R88, R89, R90, R91, R92, R93, R94, R95, R96, R97, R98, R99;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [70, 70];
  s0 -> s0 [71, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [70, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R15 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 69];
  s0 -> s0 [0, 65535] { R16 += 1 };
  s0 -> s2 [70, 70];
  s0 -> s1 [71, 65535];
  s1 -> s1 [0, 69];
  s1 -> s2 [70, 70];
  s1 -> s1 [71, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R24 += 1 };
  s0 -> s0 [0, 65535] { R23 += 1, R24 += 1 };
  s0 -> s2 [9, 13] { R24 += 1 };
  s0 -> s1 [14, 31] { R24 += 1 };
  s0 -> s2 [32, 32] { R24 += 1 };
  s0 -> s1 [33, 65535] { R24 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R24 += 1 };
  s2 -> s1 [0, 65535] { R24 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R25 += 1, R26 += 1 };
  s1 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R28 += 1 };
  s0 -> s0 [0, 65535] { R27 += 1, R28 += 1 };
  s0 -> s2 [9, 13] { R28 += 1 };
  s0 -> s1 [14, 31] { R28 += 1 };
  s0 -> s2 [32, 32] { R28 += 1 };
  s0 -> s1 [33, 65535] { R28 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R28 += 1 };
  s2 -> s1 [0, 65535] { R28 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R29 += 1, R30 += 1 };
  s1 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R1478 += 1, R22 += 1 };
  s0 -> s0 [0, 65535] { R1477 += 1, R1478 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R1478 += 1, R22 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 69] { R1480 += 1 };
  s0 -> s0 [0, 65535] { R1479 += 1, R1480 += 1 };
  s0 -> s2 [70, 70] { R1480 += 1 };
  s0 -> s3 [70, 70] { R1480 += 1 };
  s0 -> s1 [76, 65535] { R1480 += 1 };
  s1 -> s1 [0, 69] { R1480 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R1480 += 1 };
  s1 -> s3 [70, 70] { R1480 += 1 };
  s1 -> s1 [76, 65535] { R1480 += 1 };
  s2 -> s2 [0, 70] { R1480 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [76, 65535] { R1480 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 69] { R1482 += 1, R45 += 1 };
  s0 -> s0 [0, 65535] { R1481 += 1, R1482 += 1 };
  s0 -> s2 [70, 70] { R1482 += 1, R45 += 1 };
  s0 -> s3 [70, 70] { R1482 += 1, R45 += 1 };
  s0 -> s1 [71, 65535] { R1482 += 1, R45 += 1 };
  s1 -> s1 [0, 69] { R1482 += 1, R45 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R1482 += 1, R45 += 1 };
  s1 -> s3 [70, 70] { R1482 += 1, R45 += 1 };
  s1 -> s1 [71, 65535] { R1482 += 1, R45 += 1 };
  s2 -> s2 [0, 65535] { R1482 += 1, R45 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 69] { R1484 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R1483 += 1, R1484 += 1 };
  s0 -> s2 [70, 70] { R1484 += 1, R47 += 1 };
  s0 -> s3 [70, 70] { R1484 += 1, R47 += 1 };
  s0 -> s1 [71, 65535] { R1484 += 1, R47 += 1 };
  s1 -> s1 [0, 69] { R1484 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R1484 += 1, R47 += 1 };
  s1 -> s3 [70, 70] { R1484 += 1, R47 += 1 };
  s1 -> s1 [71, 65535] { R1484 += 1, R47 += 1 };
  s2 -> s2 [0, 65535] { R1484 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 69] { R1486 += 1, R49 += 1, R50 += 1 };
  s0 -> s0 [0, 65535] { R1485 += 1, R1486 += 1 };
  s0 -> s2 [70, 70] { R1486 += 1, R49 += 1, R50 += 1 };
  s0 -> s3 [70, 70] { R1486 += 1, R49 += 1, R50 += 1 };
  s0 -> s1 [71, 65535] { R1486 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 69] { R1486 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R1486 += 1, R49 += 1, R50 += 1 };
  s1 -> s3 [70, 70] { R1486 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [71, 65535] { R1486 += 1, R49 += 1, R50 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R1486 += 1, R49 += 1, R50 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 69] { R1488 += 1, R53 += 1, R54 += 1 };
  s0 -> s0 [0, 65535] { R1487 += 1, R1488 += 1 };
  s0 -> s2 [70, 70] { R1488 += 1, R53 += 1, R54 += 1 };
  s0 -> s3 [70, 70] { R1488 += 1, R53 += 1, R54 += 1 };
  s0 -> s1 [71, 65535] { R1488 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 69] { R1488 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R1488 += 1, R53 += 1, R54 += 1 };
  s1 -> s3 [70, 70] { R1488 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [71, 65535] { R1488 += 1, R53 += 1, R54 += 1 };
  s2 -> s2 [0, 65535] { R1488 += 1, R53 += 1, R54 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 69] { R1490 += 1, R59 += 1, R60 += 1 };
  s0 -> s0 [0, 65535] { R1489 += 1, R1490 += 1 };
  s0 -> s2 [70, 70] { R1490 += 1, R59 += 1, R60 += 1 };
  s0 -> s3 [70, 70] { R1490 += 1, R59 += 1, R60 += 1 };
  s0 -> s1 [71, 65535] { R1490 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 69] { R1490 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R1490 += 1, R59 += 1, R60 += 1 };
  s1 -> s3 [70, 70] { R1490 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [71, 65535] { R1490 += 1, R59 += 1, R60 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1490 += 1, R59 += 1, R60 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 69] { R1492 += 1, R65 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R1491 += 1, R1492 += 1 };
  s0 -> s2 [70, 70] { R1492 += 1, R65 += 1, R66 += 1 };
  s0 -> s3 [70, 70] { R1492 += 1, R65 += 1, R66 += 1 };
  s0 -> s1 [71, 65535] { R1492 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 69] { R1492 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R1492 += 1, R65 += 1, R66 += 1 };
  s1 -> s3 [70, 70] { R1492 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [71, 65535] { R1492 += 1, R65 += 1, R66 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1492 += 1, R65 += 1, R66 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 69] { R1494 += 1, R73 += 1, R74 += 1 };
  s0 -> s0 [0, 65535] { R1493 += 1, R1494 += 1 };
  s0 -> s2 [70, 70] { R1494 += 1, R73 += 1, R74 += 1 };
  s0 -> s3 [70, 70] { R1494 += 1, R73 += 1, R74 += 1 };
  s0 -> s1 [71, 65535] { R1494 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 69] { R1494 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R1494 += 1, R73 += 1, R74 += 1 };
  s1 -> s3 [70, 70] { R1494 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [71, 65535] { R1494 += 1, R73 += 1, R74 += 1 };
  s2 -> s2 [0, 65535] { R1494 += 1, R73 += 1, R74 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 69] { R1514 += 1 };
  s0 -> s0 [0, 65535] { R1513 += 1, R1514 += 1 };
  s0 -> s2 [70, 70] { R1514 += 1 };
  s0 -> s1 [71, 65535] { R1514 += 1 };
  s1 -> s1 [0, 69] { R1514 += 1 };
  s1 -> s2 [70, 70] { R1514 += 1 };
  s1 -> s1 [71, 65535] { R1514 += 1 };
  s2 -> s2 [0, 65535] { R1514 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R1516 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R1515 += 1, R1516 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R1516 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 69] { R1518 += 1 };
  s0 -> s2 [0, 65535] { R1518 += 1, R12 += 1 };
  s0 -> s0 [0, 65535] { R1517 += 1, R1518 += 1 };
  s0 -> s3 [70, 70] { R1518 += 1 };
  s0 -> s1 [71, 65535] { R1518 += 1 };
  s1 -> s1 [0, 69] { R1518 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [70, 70] { R1518 += 1 };
  s1 -> s1 [71, 65535] { R1518 += 1 };
  s2 -> s1 [0, 69] { R1518 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1518 += 1, R12 += 1 };
  s2 -> s3 [70, 70] { R1518 += 1 };
  s2 -> s1 [71, 65535] { R1518 += 1 };
  s3 -> s3 [0, 65535] { R1518 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 69] { R1520 += 1, R1458 += 1 };
  s0 -> s2 [0, 65535] { R1520 += 1, R1457 += 1, R1458 += 1 };
  s0 -> s0 [0, 65535] { R1519 += 1, R1520 += 1 };
  s0 -> s1 [71, 65535] { R1520 += 1, R1458 += 1 };
  s1 -> s1 [0, 69] { R1520 += 1, R1458 += 1 };
  s1 -> s1 [0, 65535] { R1520 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [71, 65535] { R1520 += 1, R1458 += 1 };
  s2 -> s1 [0, 69] { R1520 += 1, R1458 += 1 };
  s2 -> s2 [0, 65535] { R1520 += 1, R1457 += 1, R1458 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [71, 65535] { R1520 += 1, R1458 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s0 [0, 65535] { R1521 += 1, R1522 += 1 };
  s0 -> s1 [0, 65535] { R1522 += 1, R1460 += 1, R20 += 1 };
  s0 -> s2 [0, 65535] { R1522 += 1, R1459 += 1, R1460 += 1 };
  s1 -> s1 [0, 65535] { R1522 += 1, R1460 += 1, R20 += 1 };
  s1 -> s4 [0, 65535] { R1522 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R1522 += 1, R1460 += 1, R20 += 1 };
  s2 -> s2 [0, 65535] { R1522 += 1, R1459 += 1, R1460 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1522 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 70] { R1524 += 1, R1462 += 1 };
  s0 -> s2 [0, 65535] { R1524 += 1, R1461 += 1, R1462 += 1 };
  s0 -> s0 [0, 65535] { R1523 += 1, R1524 += 1 };
  s0 -> s1 [75, 65535] { R1524 += 1, R1462 += 1 };
  s1 -> s1 [0, 70] { R1524 += 1, R1462 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1524 += 1 };
  s1 -> s1 [75, 65535] { R1524 += 1, R1462 += 1 };
  s2 -> s1 [0, 70] { R1524 += 1, R1462 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1524 += 1, R1461 += 1, R1462 += 1 };
  s2 -> s1 [75, 65535] { R1524 += 1, R1462 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s0 [0, 65535] { R1525 += 1, R1526 += 1 };
  s0 -> s1 [0, 65535] { R1526 += 1, R1464 += 1, R84 += 1 };
  s0 -> s2 [0, 65535] { R1526 += 1, R1463 += 1, R1464 += 1 };
  s1 -> s4 [0, 65535] { R1526 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1526 += 1, R1464 += 1, R84 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R1526 += 1, R1464 += 1, R84 += 1 };
  s2 -> s2 [0, 65535] { R1526 += 1, R1463 += 1, R1464 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1526 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 74] { R1528 += 1, R1466 += 1 };
  s0 -> s0 [0, 65535] { R1527 += 1, R1528 += 1 };
  s0 -> s2 [0, 65535] { R1528 += 1, R1465 += 1, R1466 += 1 };
  s0 -> s3 [0, 65535] { R1528 += 1, R1466 += 1, R86 += 1 };
  s0 -> s1 [76, 65535] { R1528 += 1, R1466 += 1 };
  s1 -> s1 [0, 74] { R1528 += 1, R1466 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1528 += 1 };
  s1 -> s1 [76, 65535] { R1528 += 1, R1466 += 1 };
  s2 -> s1 [0, 74] { R1528 += 1, R1466 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1528 += 1, R1465 += 1, R1466 += 1 };
  s2 -> s3 [0, 65535] { R1528 += 1, R1466 += 1, R86 += 1 };
  s2 -> s1 [76, 65535] { R1528 += 1, R1466 += 1 };
  s3 -> s1 [0, 74] { R1528 += 1, R1466 += 1 };
  s3 -> s4 [0, 65535] { R1528 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R1528 += 1, R1466 += 1, R86 += 1 };
  s3 -> s1 [76, 65535] { R1528 += 1, R1466 += 1 };
  s4 -> s4 [0, 65535] { R1528 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 65535] { R1530 += 1, R1468 += 1 };
  s0 -> s2 [0, 65535] { R1530 += 1, R1467 += 1, R1468 += 1 };
  s0 -> s3 [0, 65535] { R1530 += 1, R1468 += 1, R90 += 1 };
  s0 -> s0 [0, 65535] { R1529 += 1, R1530 += 1 };
  s1 -> s1 [0, 65535] { R1530 += 1, R1468 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R1530 += 1 };
  s2 -> s1 [0, 65535] { R1530 += 1, R1468 += 1 };
  s2 -> s2 [0, 65535] { R1530 += 1, R1467 += 1, R1468 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R1530 += 1, R1468 += 1, R90 += 1 };
  s3 -> s1 [0, 65535] { R1530 += 1, R1468 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R1530 += 1 };
  s3 -> s3 [0, 65535] { R1530 += 1, R1468 += 1, R90 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1530 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R1532 += 1, R1470 += 1, R95 += 1, R96 += 1 };
  s0 -> s2 [0, 65535] { R1532 += 1, R1470 += 1, R94 += 1, R95 += 1 };
  s0 -> s3 [0, 65535] { R1532 += 1, R1469 += 1, R1470 += 1 };
  s0 -> s0 [0, 65535] { R1531 += 1, R1532 += 1 };
  s1 -> s1 [0, 65535] { R1532 += 1, R1470 += 1, R95 += 1, R96 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R1532 += 1 };
  s1 -> s6 [0, 65535] { R1532 += 1, R1470 += 1 };
  s2 -> s1 [0, 65535] { R1532 += 1, R1470 += 1, R95 += 1, R96 += 1 };
  s2 -> s2 [0, 65535] { R1532 += 1, R1470 += 1, R94 += 1, R95 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R1532 += 1 };
  s3 -> s1 [0, 65535] { R1532 += 1, R1470 += 1, R95 += 1, R96 += 1 };
  s3 -> s2 [0, 65535] { R1532 += 1, R1470 += 1, R94 += 1, R95 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1532 += 1, R1469 += 1, R1470 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1532 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R1532 += 1 };
  s6 -> s6 [0, 65535] { R1532 += 1, R1470 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 74] { R1534 += 1, R1472 += 1, R101 += 1 };
  s0 -> s2 [0, 65535] { R1534 += 1, R1471 += 1, R1472 += 1 };
  s0 -> s3 [0, 65535] { R1534 += 1, R1472 += 1, R101 += 1, R102 += 1 };
  s0 -> s0 [0, 65535] { R1533 += 1, R1534 += 1 };
  s0 -> s4 [0, 65535] { R1534 += 1, R1472 += 1, R100 += 1, R101 += 1 };
  s0 -> s1 [76, 65535] { R1534 += 1, R1472 += 1, R101 += 1 };
  s1 -> s1 [0, 74] { R1534 += 1, R1472 += 1, R101 += 1 };
  s1 -> s1 [0, 65535] { R1534 += 1, R1472 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R1534 += 1 };
  s1 -> s1 [76, 65535] { R1534 += 1, R1472 += 1, R101 += 1 };
  s2 -> s1 [0, 74] { R1534 += 1, R1472 += 1, R101 += 1 };
  s2 -> s2 [0, 65535] { R1534 += 1, R1471 += 1, R1472 += 1 };
  s2 -> s3 [0, 65535] { R1534 += 1, R1472 += 1, R101 += 1, R102 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [0, 65535] { R1534 += 1, R1472 += 1, R100 += 1, R101 += 1 };
  s2 -> s1 [76, 65535] { R1534 += 1, R1472 += 1, R101 += 1 };
  s3 -> s1 [0, 74] { R1534 += 1, R1472 += 1, R101 += 1 };
  s3 -> s3 [0, 65535] { R1534 += 1, R1472 += 1, R101 += 1, R102 += 1 };
  s3 -> s7 [0, 65535] { R1534 += 1, R1472 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R1534 += 1 };
  s3 -> s1 [76, 65535] { R1534 += 1, R1472 += 1, R101 += 1 };
  s4 -> s1 [0, 74] { R1534 += 1, R1472 += 1, R101 += 1 };
  s4 -> s3 [0, 65535] { R1534 += 1, R1472 += 1, R101 += 1, R102 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R1534 += 1 };
  s4 -> s4 [0, 65535] { R1534 += 1, R1472 += 1, R100 += 1, R101 += 1 };
  s4 -> s1 [76, 65535] { R1534 += 1, R1472 += 1, R101 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1534 += 1 };
  s7 -> s7 [0, 65535] { R1534 += 1, R1472 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R1534 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s0 [0, 65535] { R1535 += 1, R1536 += 1 };
  s0 -> s1 [0, 65535] { R1536 += 1, R1473 += 1, R1474 += 1 };
  s0 -> s2 [0, 65535] { R1536 += 1, R1474 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R1536 += 1, R1473 += 1, R1474 += 1 };
  s1 -> s2 [0, 65535] { R1536 += 1, R1474 += 1 };
  s2 -> s3 [0, 65535] { R1536 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1536 += 1, R1474 += 1 };
  s3 -> s3 [0, 65535] { R1536 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 65535] { R1538 += 1, R1476 += 1, R1453 += 1, R1454 += 1, R1455 += 1 };
  s0 -> s2 [0, 65535] { R1538 += 1, R1476 += 1, R1452 += 1, R1453 += 1 };
  s0 -> s0 [0, 65535] { R1537 += 1, R1538 += 1 };
  s0 -> s3 [0, 65535] { R1538 += 1, R1475 += 1, R1476 += 1 };
  s0 -> s4 [0, 65535] { R1538 += 1, R1476 += 1, R1453 += 1, R1455 += 1, R1456 += 1 };
  s1 -> s5 [0, 65535] { R1538 += 1 };
  s1 -> s1 [0, 65535] { R1538 += 1, R1476 += 1, R1453 += 1, R1454 += 1, R1455 += 1 };
  s1 -> s6 [0, 65535] { R1538 += 1, R1476 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s4 [0, 65535] { R1538 += 1, R1476 += 1, R1453 += 1, R1455 += 1, R1456 += 1 };
  s2 -> s5 [0, 65535] { R1538 += 1 };
  s2 -> s1 [0, 65535] { R1538 += 1, R1476 += 1, R1453 += 1, R1454 += 1, R1455 += 1 };
  s2 -> s2 [0, 65535] { R1538 += 1, R1476 += 1, R1452 += 1, R1453 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s4 [0, 65535] { R1538 += 1, R1476 += 1, R1453 += 1, R1455 += 1, R1456 += 1 };
  s3 -> s1 [0, 65535] { R1538 += 1, R1476 += 1, R1453 += 1, R1454 += 1, R1455 += 1 };
  s3 -> s2 [0, 65535] { R1538 += 1, R1476 += 1, R1452 += 1, R1453 += 1 };
  s3 -> s3 [0, 65535] { R1538 += 1, R1475 += 1, R1476 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s4 [0, 65535] { R1538 += 1, R1476 += 1, R1453 += 1, R1455 += 1, R1456 += 1 };
  s4 -> s5 [0, 65535] { R1538 += 1 };
  s4 -> s6 [0, 65535] { R1538 += 1, R1476 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s8 [0, 65535] { R1538 += 1, R1476 += 1, R1453 += 1 };
  s4 -> s4 [0, 65535] { R1538 += 1, R1476 += 1, R1453 += 1, R1455 += 1, R1456 += 1 };
  s5 -> s5 [0, 65535] { R1538 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s5 [0, 65535] { R1538 += 1 };
  s6 -> s6 [0, 65535] { R1538 += 1, R1476 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  s8 -> s5 [0, 65535] { R1538 += 1 };
  s8 -> s6 [0, 65535] { R1538 += 1, R1476 += 1 };
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R1538 += 1, R1476 += 1, R1453 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R1540 += 1, R1495 += 1, R1496 += 1 };
  s0 -> s0 [0, 65535] { R1539 += 1, R1540 += 1 };
  s0 -> s2 [0, 65535] { R1540 += 1, R1496 += 1, R21 += 1 };
  s1 -> s1 [0, 65535] { R1540 += 1, R1495 += 1, R1496 += 1 };
  s1 -> s2 [0, 65535] { R1540 += 1, R1496 += 1, R21 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R1540 += 1 };
  s2 -> s2 [0, 65535] { R1540 += 1, R1496 += 1, R21 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1540 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 69] { R1542 += 1, R1498 += 1 };
  s0 -> s2 [0, 65535] { R1542 += 1, R1497 += 1, R1498 += 1 };
  s0 -> s0 [0, 65535] { R1541 += 1, R1542 += 1 };
  s0 -> s3 [70, 70] { R1542 += 1, R1498 += 1 };
  s0 -> s4 [70, 70] { R1542 += 1, R1498 += 1 };
  s0 -> s5 [75, 75] { R1542 += 1, R1498 += 1 };
  s0 -> s1 [76, 65535] { R1542 += 1, R1498 += 1 };
  s1 -> s1 [0, 69] { R1542 += 1, R1498 += 1 };
  s1 -> s3 [70, 70] { R1542 += 1, R1498 += 1 };
  s1 -> s4 [70, 70] { R1542 += 1, R1498 += 1 };
  s1 -> s5 [75, 75] { R1542 += 1, R1498 += 1 };
  s1 -> s1 [76, 65535] { R1542 += 1, R1498 += 1 };
  s2 -> s1 [0, 69] { R1542 += 1, R1498 += 1 };
  s2 -> s2 [0, 65535] { R1542 += 1, R1497 += 1, R1498 += 1 };
  s2 -> s3 [70, 70] { R1542 += 1, R1498 += 1 };
  s2 -> s4 [70, 70] { R1542 += 1, R1498 += 1 };
  s2 -> s5 [75, 75] { R1542 += 1, R1498 += 1 };
  s2 -> s1 [76, 65535] { R1542 += 1, R1498 += 1 };
  s4 -> s4 [0, 70] { R1542 += 1, R1498 += 1 };
  s4 -> s7 [75, 75] { R1542 += 1, R1498 += 1 };
  s4 -> s4 [76, 65535] { R1542 += 1, R1498 += 1 };
  s5 -> s5 [0, 69] { R1542 += 1, R1498 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R1542 += 1 };
  s5 -> s7 [70, 70] { R1542 += 1, R1498 += 1 };
  s5 -> s8 [70, 70] { R1542 += 1, R1498 += 1 };
  s5 -> s5 [75, 65535] { R1542 += 1, R1498 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 70] { R1542 += 1, R1498 += 1 };
  s7 -> s7 [0, 65535] { R1542 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [75, 65535] { R1542 += 1, R1498 += 1 };
  s8 -> s8 [0, 65535] { R1542 += 1 };
  s8 -> s6 [0, 65535];
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 69] { R1544 += 1, R1500 += 1, R83 += 1 };
  s0 -> s2 [0, 65535] { R1544 += 1, R1499 += 1, R1500 += 1 };
  s0 -> s0 [0, 65535] { R1543 += 1, R1544 += 1 };
  s0 -> s3 [70, 70] { R1544 += 1, R1500 += 1, R83 += 1 };
  s0 -> s4 [70, 70] { R1544 += 1, R1500 += 1, R83 += 1 };
  s0 -> s1 [71, 65535] { R1544 += 1, R1500 += 1, R83 += 1 };
  s1 -> s1 [0, 69] { R1544 += 1, R1500 += 1, R83 += 1 };
  s1 -> s1 [0, 65535] { R1544 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [70, 70] { R1544 += 1, R1500 += 1, R83 += 1 };
  s1 -> s4 [70, 70] { R1544 += 1, R1500 += 1, R83 += 1 };
  s1 -> s1 [71, 65535] { R1544 += 1, R1500 += 1, R83 += 1 };
  s2 -> s1 [0, 69] { R1544 += 1, R1500 += 1, R83 += 1 };
  s2 -> s2 [0, 65535] { R1544 += 1, R1499 += 1, R1500 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [70, 70] { R1544 += 1, R1500 += 1, R83 += 1 };
  s2 -> s4 [70, 70] { R1544 += 1, R1500 += 1, R83 += 1 };
  s2 -> s1 [71, 65535] { R1544 += 1, R1500 += 1, R83 += 1 };
  s3 -> s6 [0, 65535] { R1544 += 1 };
  s3 -> s3 [0, 65535] { R1544 += 1, R1500 += 1, R83 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1544 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1544 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 69] { R1546 += 1, R1502 += 1, R85 += 1 };
  s0 -> s2 [0, 65535] { R1546 += 1, R1501 += 1, R1502 += 1 };
  s0 -> s0 [0, 65535] { R1545 += 1, R1546 += 1 };
  s0 -> s3 [70, 70] { R1546 += 1, R1502 += 1, R85 += 1 };
  s0 -> s4 [70, 70] { R1546 += 1, R1502 += 1, R85 += 1 };
  s0 -> s1 [71, 65535] { R1546 += 1, R1502 += 1, R85 += 1 };
  s1 -> s1 [0, 69] { R1546 += 1, R1502 += 1, R85 += 1 };
  s1 -> s1 [0, 65535] { R1546 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [70, 70] { R1546 += 1, R1502 += 1, R85 += 1 };
  s1 -> s4 [70, 70] { R1546 += 1, R1502 += 1, R85 += 1 };
  s1 -> s1 [71, 65535] { R1546 += 1, R1502 += 1, R85 += 1 };
  s2 -> s1 [0, 69] { R1546 += 1, R1502 += 1, R85 += 1 };
  s2 -> s2 [0, 65535] { R1546 += 1, R1501 += 1, R1502 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [70, 70] { R1546 += 1, R1502 += 1, R85 += 1 };
  s2 -> s4 [70, 70] { R1546 += 1, R1502 += 1, R85 += 1 };
  s2 -> s1 [71, 65535] { R1546 += 1, R1502 += 1, R85 += 1 };
  s3 -> s3 [0, 65535] { R1546 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R1546 += 1 };
  s4 -> s4 [0, 65535] { R1546 += 1, R1502 += 1, R85 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R1546 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 69] { R1548 += 1, R1504 += 1, R87 += 1, R88 += 1 };
  s0 -> s2 [0, 69] { R1548 += 1, R1504 += 1, R88 += 1 };
  s0 -> s0 [0, 65535] { R1547 += 1, R1548 += 1 };
  s0 -> s3 [0, 65535] { R1548 += 1, R1503 += 1, R1504 += 1 };
  s0 -> s4 [70, 70] { R1548 += 1, R1504 += 1, R88 += 1 };
  s0 -> s5 [70, 70] { R1548 += 1, R1504 += 1, R87 += 1, R88 += 1 };
  s0 -> s6 [70, 70] { R1548 += 1, R1504 += 1, R88 += 1 };
  s0 -> s7 [70, 70] { R1548 += 1, R1504 += 1, R87 += 1, R88 += 1 };
  s0 -> s2 [71, 74] { R1548 += 1, R1504 += 1, R88 += 1 };
  s0 -> s1 [71, 65535] { R1548 += 1, R1504 += 1, R87 += 1, R88 += 1 };
  s0 -> s8 [75, 75] { R1548 += 1, R1504 += 1, R88 += 1 };
  s0 -> s2 [76, 65535] { R1548 += 1, R1504 += 1, R88 += 1 };
  s1 -> s1 [0, 69] { R1548 += 1, R1504 += 1, R87 += 1, R88 += 1 };
  s1 -> s2 [0, 69] { R1548 += 1, R1504 += 1, R88 += 1 };
  s1 -> s4 [70, 70] { R1548 += 1, R1504 += 1, R88 += 1 };
  s1 -> s5 [70, 70] { R1548 += 1, R1504 += 1, R87 += 1, R88 += 1 };
  s1 -> s6 [70, 70] { R1548 += 1, R1504 += 1, R88 += 1 };
  s1 -> s7 [70, 70] { R1548 += 1, R1504 += 1, R87 += 1, R88 += 1 };
  s1 -> s2 [71, 74] { R1548 += 1, R1504 += 1, R88 += 1 };
  s1 -> s1 [71, 65535] { R1548 += 1, R1504 += 1, R87 += 1, R88 += 1 };
  s1 -> s8 [75, 75] { R1548 += 1, R1504 += 1, R88 += 1 };
  s1 -> s2 [76, 65535] { R1548 += 1, R1504 += 1, R88 += 1 };
  s2 -> s2 [0, 69] { R1548 += 1, R1504 += 1, R88 += 1 };
  s2 -> s4 [70, 70] { R1548 += 1, R1504 += 1, R88 += 1 };
  s2 -> s6 [70, 70] { R1548 += 1, R1504 += 1, R88 += 1 };
  s2 -> s2 [71, 74] { R1548 += 1, R1504 += 1, R88 += 1 };
  s2 -> s8 [75, 75] { R1548 += 1, R1504 += 1, R88 += 1 };
  s2 -> s2 [76, 65535] { R1548 += 1, R1504 += 1, R88 += 1 };
  s3 -> s1 [0, 69] { R1548 += 1, R1504 += 1, R87 += 1, R88 += 1 };
  s3 -> s2 [0, 69] { R1548 += 1, R1504 += 1, R88 += 1 };
  s3 -> s3 [0, 65535] { R1548 += 1, R1503 += 1, R1504 += 1 };
  s3 -> s4 [70, 70] { R1548 += 1, R1504 += 1, R88 += 1 };
  s3 -> s5 [70, 70] { R1548 += 1, R1504 += 1, R87 += 1, R88 += 1 };
  s3 -> s6 [70, 70] { R1548 += 1, R1504 += 1, R88 += 1 };
  s3 -> s7 [70, 70] { R1548 += 1, R1504 += 1, R87 += 1, R88 += 1 };
  s3 -> s2 [71, 74] { R1548 += 1, R1504 += 1, R88 += 1 };
  s3 -> s1 [71, 65535] { R1548 += 1, R1504 += 1, R87 += 1, R88 += 1 };
  s3 -> s8 [75, 75] { R1548 += 1, R1504 += 1, R88 += 1 };
  s3 -> s2 [76, 65535] { R1548 += 1, R1504 += 1, R88 += 1 };
  s6 -> s6 [0, 74] { R1548 += 1, R1504 += 1, R88 += 1 };
  s6 -> s10 [75, 75] { R1548 += 1, R1504 += 1, R88 += 1 };
  s6 -> s6 [76, 65535] { R1548 += 1, R1504 += 1, R88 += 1 };
  s7 -> s6 [0, 74] { R1548 += 1, R1504 += 1, R88 += 1 };
  s7 -> s7 [0, 65535] { R1548 += 1, R1504 += 1, R87 += 1, R88 += 1 };
  s7 -> s10 [75, 75] { R1548 += 1, R1504 += 1, R88 += 1 };
  s7 -> s6 [76, 65535] { R1548 += 1, R1504 += 1, R88 += 1 };
  s8 -> s8 [0, 69] { R1548 += 1, R1504 += 1, R88 += 1 };
  s8 -> s8 [0, 65535] { R1548 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [70, 70] { R1548 += 1, R1504 += 1, R88 += 1 };
  s8 -> s11 [70, 70] { R1548 += 1, R1504 += 1, R88 += 1 };
  s8 -> s8 [71, 65535] { R1548 += 1, R1504 += 1, R88 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s12 [0, 65535] { R1548 += 1 };
  s10 -> s10 [0, 65535] { R1548 += 1, R1504 += 1, R88 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R1548 += 1 };
  s11 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R1548 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 69] { R1550 += 1, R1506 += 1, R91 += 1, R92 += 1 };
  s0 -> s2 [0, 65535] { R1550 += 1, R1505 += 1, R1506 += 1 };
  s0 -> s0 [0, 65535] { R1549 += 1, R1550 += 1 };
  s0 -> s3 [70, 70] { R1550 += 1, R1506 += 1, R91 += 1, R92 += 1 };
  s0 -> s4 [70, 70] { R1550 += 1, R1506 += 1, R91 += 1, R92 += 1 };
  s0 -> s1 [71, 65535] { R1550 += 1, R1506 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 69] { R1550 += 1, R1506 += 1, R91 += 1, R92 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1550 += 1 };
  s1 -> s3 [70, 70] { R1550 += 1, R1506 += 1, R91 += 1, R92 += 1 };
  s1 -> s4 [70, 70] { R1550 += 1, R1506 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [71, 65535] { R1550 += 1, R1506 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [0, 69] { R1550 += 1, R1506 += 1, R91 += 1, R92 += 1 };
  s2 -> s2 [0, 65535] { R1550 += 1, R1505 += 1, R1506 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [70, 70] { R1550 += 1, R1506 += 1, R91 += 1, R92 += 1 };
  s2 -> s4 [70, 70] { R1550 += 1, R1506 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [71, 65535] { R1550 += 1, R1506 += 1, R91 += 1, R92 += 1 };
  s3 -> s6 [0, 65535] { R1550 += 1 };
  s3 -> s3 [0, 65535] { R1550 += 1, R1506 += 1, R91 += 1, R92 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1550 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1550 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 69] { R1552 += 1, R1508 += 1, R97 += 1, R98 += 1 };
  s0 -> s0 [0, 65535] { R1551 += 1, R1552 += 1 };
  s0 -> s2 [0, 65535] { R1552 += 1, R1507 += 1, R1508 += 1 };
  s0 -> s3 [70, 70] { R1552 += 1, R1508 += 1, R97 += 1, R98 += 1 };
  s0 -> s4 [70, 70] { R1552 += 1, R1508 += 1, R97 += 1, R98 += 1 };
  s0 -> s1 [71, 65535] { R1552 += 1, R1508 += 1, R97 += 1, R98 += 1 };
  s1 -> s1 [0, 69] { R1552 += 1, R1508 += 1, R97 += 1, R98 += 1 };
  s1 -> s1 [0, 65535] { R1552 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [70, 70] { R1552 += 1, R1508 += 1, R97 += 1, R98 += 1 };
  s1 -> s4 [70, 70] { R1552 += 1, R1508 += 1, R97 += 1, R98 += 1 };
  s1 -> s1 [71, 65535] { R1552 += 1, R1508 += 1, R97 += 1, R98 += 1 };
  s2 -> s1 [0, 69] { R1552 += 1, R1508 += 1, R97 += 1, R98 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R1552 += 1, R1507 += 1, R1508 += 1 };
  s2 -> s3 [70, 70] { R1552 += 1, R1508 += 1, R97 += 1, R98 += 1 };
  s2 -> s4 [70, 70] { R1552 += 1, R1508 += 1, R97 += 1, R98 += 1 };
  s2 -> s1 [71, 65535] { R1552 += 1, R1508 += 1, R97 += 1, R98 += 1 };
  s3 -> s3 [0, 65535] { R1552 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R1552 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R1552 += 1, R1508 += 1, R97 += 1, R98 += 1 };
  s5 -> s5 [0, 65535] { R1552 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 69] { R1554 += 1, R1510 += 1, R1219 += 1, R1220 += 1 };
  s0 -> s2 [0, 69] { R1554 += 1, R1510 += 1, R1220 += 1, R1221 += 1, R1222 += 1 };
  s0 -> s3 [0, 69] { R1554 += 1, R1510 += 1, R1220 += 1, R1222 += 1 };
  s0 -> s0 [0, 65535] { R1553 += 1, R1554 += 1 };
  s0 -> s4 [0, 65535] { R1554 += 1, R1509 += 1, R1510 += 1 };
  s0 -> s5 [70, 70] { R1554 += 1, R1510 += 1, R1220 += 1, R1222 += 1 };
  s0 -> s6 [70, 70] { R1554 += 1, R1510 += 1, R1220 += 1, R1221 += 1, R1222 += 1 };
  s0 -> s7 [70, 70] { R1554 += 1, R1510 += 1, R1220 += 1, R1221 += 1, R1222 += 1 };
  s0 -> s8 [70, 70] { R1554 += 1, R1510 += 1, R1219 += 1, R1220 += 1 };
  s0 -> s9 [70, 70] { R1554 += 1, R1510 += 1, R1220 += 1, R1222 += 1 };
  s0 -> s10 [70, 70] { R1554 += 1, R1510 += 1, R1219 += 1, R1220 += 1 };
  s0 -> s3 [71, 74] { R1554 += 1, R1510 += 1, R1220 += 1, R1222 += 1 };
  s0 -> s1 [71, 65535] { R1554 += 1, R1510 += 1, R1219 += 1, R1220 += 1 };
  s0 -> s2 [71, 65535] { R1554 += 1, R1510 += 1, R1220 += 1, R1221 += 1, R1222 += 1 };
  s0 -> s11 [75, 75] { R1554 += 1, R1510 += 1, R1220 += 1, R1222 += 1 };
  s0 -> s3 [76, 65535] { R1554 += 1, R1510 += 1, R1220 += 1, R1222 += 1 };
  s1 -> s1 [0, 69] { R1554 += 1, R1510 += 1, R1219 += 1, R1220 += 1 };
  s1 -> s2 [0, 69] { R1554 += 1, R1510 += 1, R1220 += 1, R1221 += 1, R1222 += 1 };
  s1 -> s3 [0, 69] { R1554 += 1, R1510 += 1, R1220 += 1, R1222 += 1 };
  s1 -> s5 [70, 70] { R1554 += 1, R1510 += 1, R1220 += 1, R1222 += 1 };
  s1 -> s6 [70, 70] { R1554 += 1, R1510 += 1, R1220 += 1, R1221 += 1, R1222 += 1 };
  s1 -> s7 [70, 70] { R1554 += 1, R1510 += 1, R1220 += 1, R1221 += 1, R1222 += 1 };
  s1 -> s8 [70, 70] { R1554 += 1, R1510 += 1, R1219 += 1, R1220 += 1 };
  s1 -> s9 [70, 70] { R1554 += 1, R1510 += 1, R1220 += 1, R1222 += 1 };
  s1 -> s10 [70, 70] { R1554 += 1, R1510 += 1, R1219 += 1, R1220 += 1 };
  s1 -> s3 [71, 74] { R1554 += 1, R1510 += 1, R1220 += 1, R1222 += 1 };
  s1 -> s1 [71, 65535] { R1554 += 1, R1510 += 1, R1219 += 1, R1220 += 1 };
  s1 -> s2 [71, 65535] { R1554 += 1, R1510 += 1, R1220 += 1, R1221 += 1, R1222 += 1 };
  s1 -> s11 [75, 75] { R1554 += 1, R1510 += 1, R1220 += 1, R1222 += 1 };
  s1 -> s3 [76, 65535] { R1554 += 1, R1510 += 1, R1220 += 1, R1222 += 1 };
  s2 -> s2 [0, 69] { R1554 += 1, R1510 += 1, R1220 += 1, R1221 += 1, R1222 += 1 };
  s2 -> s3 [0, 69] { R1554 += 1, R1510 += 1, R1220 += 1, R1222 += 1 };
  s2 -> s5 [70, 70] { R1554 += 1, R1510 += 1, R1220 += 1, R1222 += 1 };
  s2 -> s6 [70, 70] { R1554 += 1, R1510 += 1, R1220 += 1, R1221 += 1, R1222 += 1 };
  s2 -> s7 [70, 70] { R1554 += 1, R1510 += 1, R1220 += 1, R1221 += 1, R1222 += 1 };
  s2 -> s9 [70, 70] { R1554 += 1, R1510 += 1, R1220 += 1, R1222 += 1 };
  s2 -> s3 [71, 74] { R1554 += 1, R1510 += 1, R1220 += 1, R1222 += 1 };
  s2 -> s2 [71, 65535] { R1554 += 1, R1510 += 1, R1220 += 1, R1221 += 1, R1222 += 1 };
  s2 -> s11 [75, 75] { R1554 += 1, R1510 += 1, R1220 += 1, R1222 += 1 };
  s2 -> s3 [76, 65535] { R1554 += 1, R1510 += 1, R1220 += 1, R1222 += 1 };
  s3 -> s3 [0, 69] { R1554 += 1, R1510 += 1, R1220 += 1, R1222 += 1 };
  s3 -> s5 [70, 70] { R1554 += 1, R1510 += 1, R1220 += 1, R1222 += 1 };
  s3 -> s9 [70, 70] { R1554 += 1, R1510 += 1, R1220 += 1, R1222 += 1 };
  s3 -> s3 [71, 74] { R1554 += 1, R1510 += 1, R1220 += 1, R1222 += 1 };
  s3 -> s11 [75, 75] { R1554 += 1, R1510 += 1, R1220 += 1, R1222 += 1 };
  s3 -> s3 [76, 65535] { R1554 += 1, R1510 += 1, R1220 += 1, R1222 += 1 };
  s4 -> s1 [0, 69] { R1554 += 1, R1510 += 1, R1219 += 1, R1220 += 1 };
  s4 -> s2 [0, 69] { R1554 += 1, R1510 += 1, R1220 += 1, R1221 += 1, R1222 += 1 };
  s4 -> s3 [0, 69] { R1554 += 1, R1510 += 1, R1220 += 1, R1222 += 1 };
  s4 -> s4 [0, 65535] { R1554 += 1, R1509 += 1, R1510 += 1 };
  s4 -> s5 [70, 70] { R1554 += 1, R1510 += 1, R1220 += 1, R1222 += 1 };
  s4 -> s6 [70, 70] { R1554 += 1, R1510 += 1, R1220 += 1, R1221 += 1, R1222 += 1 };
  s4 -> s7 [70, 70] { R1554 += 1, R1510 += 1, R1220 += 1, R1221 += 1, R1222 += 1 };
  s4 -> s8 [70, 70] { R1554 += 1, R1510 += 1, R1219 += 1, R1220 += 1 };
  s4 -> s9 [70, 70] { R1554 += 1, R1510 += 1, R1220 += 1, R1222 += 1 };
  s4 -> s10 [70, 70] { R1554 += 1, R1510 += 1, R1219 += 1, R1220 += 1 };
  s4 -> s3 [71, 74] { R1554 += 1, R1510 += 1, R1220 += 1, R1222 += 1 };
  s4 -> s1 [71, 65535] { R1554 += 1, R1510 += 1, R1219 += 1, R1220 += 1 };
  s4 -> s2 [71, 65535] { R1554 += 1, R1510 += 1, R1220 += 1, R1221 += 1, R1222 += 1 };
  s4 -> s11 [75, 75] { R1554 += 1, R1510 += 1, R1220 += 1, R1222 += 1 };
  s4 -> s3 [76, 65535] { R1554 += 1, R1510 += 1, R1220 += 1, R1222 += 1 };
  s7 -> s9 [0, 74] { R1554 += 1, R1510 += 1, R1220 += 1, R1222 += 1 };
  s7 -> s7 [0, 65535] { R1554 += 1, R1510 += 1, R1220 += 1, R1221 += 1, R1222 += 1 };
  s7 -> s19 [75, 75] { R1554 += 1, R1510 += 1, R1220 += 1, R1222 += 1 };
  s7 -> s9 [76, 65535] { R1554 += 1, R1510 += 1, R1220 += 1, R1222 += 1 };
  s9 -> s9 [0, 74] { R1554 += 1, R1510 += 1, R1220 += 1, R1222 += 1 };
  s9 -> s19 [75, 75] { R1554 += 1, R1510 += 1, R1220 += 1, R1222 += 1 };
  s9 -> s9 [76, 65535] { R1554 += 1, R1510 += 1, R1220 += 1, R1222 += 1 };
  s10 -> s9 [0, 74] { R1554 += 1, R1510 += 1, R1220 += 1, R1222 += 1 };
  s10 -> s7 [0, 65535] { R1554 += 1, R1510 += 1, R1220 += 1, R1221 += 1, R1222 += 1 };
  s10 -> s10 [0, 65535] { R1554 += 1, R1510 += 1, R1219 += 1, R1220 += 1 };
  s10 -> s19 [75, 75] { R1554 += 1, R1510 += 1, R1220 += 1, R1222 += 1 };
  s10 -> s9 [76, 65535] { R1554 += 1, R1510 += 1, R1220 += 1, R1222 += 1 };
  s11 -> s12 [0, 69] { R1554 += 1, R1510 += 1, R1220 += 1 };
  s11 -> s13 [0, 69] { R1554 += 1, R1510 += 1 };
  s11 -> s11 [0, 69] { R1554 += 1, R1510 += 1, R1220 += 1, R1222 += 1 };
  s11 -> s14 [70, 70] { R1554 += 1, R1510 += 1, R1220 += 1, R1222 += 1 };
  s11 -> s15 [70, 70] { R1554 += 1, R1510 += 1 };
  s11 -> s16 [70, 70] { R1554 += 1, R1510 += 1, R1220 += 1 };
  s11 -> s17 [70, 70] { R1554 += 1, R1510 += 1 };
  s11 -> s18 [70, 70] { R1554 += 1, R1510 += 1, R1220 += 1 };
  s11 -> s19 [70, 70] { R1554 += 1, R1510 += 1, R1220 += 1, R1222 += 1 };
  s11 -> s12 [71, 65535] { R1554 += 1, R1510 += 1, R1220 += 1 };
  s11 -> s13 [71, 65535] { R1554 += 1, R1510 += 1 };
  s11 -> s11 [71, 65535] { R1554 += 1, R1510 += 1, R1220 += 1, R1222 += 1 };
  s12 -> s12 [0, 69] { R1554 += 1, R1510 += 1, R1220 += 1 };
  s12 -> s13 [0, 69] { R1554 += 1, R1510 += 1 };
  s12 -> s15 [70, 70] { R1554 += 1, R1510 += 1 };
  s12 -> s16 [70, 70] { R1554 += 1, R1510 += 1, R1220 += 1 };
  s12 -> s17 [70, 70] { R1554 += 1, R1510 += 1 };
  s12 -> s18 [70, 70] { R1554 += 1, R1510 += 1, R1220 += 1 };
  s12 -> s12 [71, 65535] { R1554 += 1, R1510 += 1, R1220 += 1 };
  s12 -> s13 [71, 65535] { R1554 += 1, R1510 += 1 };
  s13 -> s13 [0, 69] { R1554 += 1, R1510 += 1 };
  s13 -> s20 [0, 65535];
  s13 -> s13 [0, 65535] { R1554 += 1 };
  s13 -> s15 [70, 70] { R1554 += 1, R1510 += 1 };
  s13 -> s17 [70, 70] { R1554 += 1, R1510 += 1 };
  s13 -> s13 [71, 65535] { R1554 += 1, R1510 += 1 };
  s15 -> s21 [0, 65535] { R1554 += 1 };
  s15 -> s20 [0, 65535];
  s15 -> s15 [0, 65535] { R1554 += 1, R1510 += 1 };
  s16 -> s15 [0, 65535] { R1554 += 1, R1510 += 1 };
  s16 -> s16 [0, 65535] { R1554 += 1, R1510 += 1, R1220 += 1 };
  s17 -> s20 [0, 65535];
  s17 -> s17 [0, 65535] { R1554 += 1 };
  s19 -> s15 [0, 65535] { R1554 += 1, R1510 += 1 };
  s19 -> s16 [0, 65535] { R1554 += 1, R1510 += 1, R1220 += 1 };
  s19 -> s19 [0, 65535] { R1554 += 1, R1510 += 1, R1220 += 1, R1222 += 1 };
  s20 -> s20 [0, 65535];
  s21 -> s21 [0, 65535] { R1554 += 1 };
  s21 -> s20 [0, 65535];
  accepting s17, s13, s21, s20, s15;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 69] { R1556 += 1, R1512 += 1, R1447 += 1, R1448 += 1 };
  s0 -> s0 [0, 65535] { R1555 += 1, R1556 += 1 };
  s0 -> s2 [0, 65535] { R1556 += 1, R1511 += 1, R1512 += 1 };
  s0 -> s3 [70, 70] { R1556 += 1, R1512 += 1, R1447 += 1, R1448 += 1 };
  s0 -> s4 [70, 70] { R1556 += 1, R1512 += 1, R1447 += 1, R1448 += 1 };
  s0 -> s1 [71, 65535] { R1556 += 1, R1512 += 1, R1447 += 1, R1448 += 1 };
  s1 -> s1 [0, 69] { R1556 += 1, R1512 += 1, R1447 += 1, R1448 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1556 += 1 };
  s1 -> s3 [70, 70] { R1556 += 1, R1512 += 1, R1447 += 1, R1448 += 1 };
  s1 -> s4 [70, 70] { R1556 += 1, R1512 += 1, R1447 += 1, R1448 += 1 };
  s1 -> s1 [71, 65535] { R1556 += 1, R1512 += 1, R1447 += 1, R1448 += 1 };
  s2 -> s1 [0, 69] { R1556 += 1, R1512 += 1, R1447 += 1, R1448 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1556 += 1, R1511 += 1, R1512 += 1 };
  s2 -> s3 [70, 70] { R1556 += 1, R1512 += 1, R1447 += 1, R1448 += 1 };
  s2 -> s4 [70, 70] { R1556 += 1, R1512 += 1, R1447 += 1, R1448 += 1 };
  s2 -> s1 [71, 65535] { R1556 += 1, R1512 += 1, R1447 += 1, R1448 += 1 };
  s3 -> s3 [0, 65535] { R1556 += 1, R1512 += 1, R1447 += 1, R1448 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R1556 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1556 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1556 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [102, 102];
  accepting s1;
};
};
constraint R3 = R1556 && R23 - R1556 = -1 && R24 = R1556 && R25 - R1556 = -1 && R26 = R1556 && R27 = 0 && R28 = 1 && R29 = 0 && R30 = 1 && R45 + R84 + R83 + -1*R1224 + -1*R1220 - R66 = 0 && R49 + R89 + R87 = 0 && R50 + R90 + R88 + -1*R1224 + -1*R1220 - R66 = 0 && R55 + R96 + R93 + -1*R1226 + -1*R1222 - R68 = 0 && R65 + R1223 + R1219 = 0 && R67 + R1225 + R1221 = 0 && R1497 = 0 && R1498 = 0 && R1503 = 0 && R1504 = 0 && R1509 = 0 && R1510 = 0 && R1513 = 0 && R1514 = R1556 && R1515 = 0 && R1516 = R1556 && R1517 = 0 && R1518 = R1556 && R1519 = 0 && R1520 = R1556 && R1521 = 0 && R1522 = R1556 && R1523 = 0 && R1524 = R1556 && R1525 = 0 && R1526 = R1556 && R1527 = 0 && R1528 = R1556 && R1529 = 0 && R1530 = R1556 && R1531 = 0 && R1532 = R1556 && R1533 = 0 && R1534 = R1556 && R1535 = 0 && R1536 = R1556 && R1537 = 0 && R1538 = R1556 && R1539 = 0 && R1540 = R1556 && R1541 = 0 && R1542 = R1556 && R1543 = 0 && R1544 = R1556 && R1545 = 0 && R1546 = R1556 && R1547 = 0 && R1548 = R1556 && R1549 = 0 && R1550 = R1556 && R1551 = 0 && R1552 = R1556 && R1553 = 0 && R1554 = R1556 && R1555 = 0 && -1 < R2 && R12 < 1 && R15 < 1 && R16 < 1 && R47 + R86 + R85 < 1 && R61 + R102 + R99 < 1 && -1*R1224 + -1*R1220 - R66 < 1 && -1*R1226 + -1*R1222 - R68 < 1 && 0 < R1556 && (R2 != 0 || R20 = 0 || (R1457 = 0 && R1458 = 0)) && (R2 != 0 || R20 = 0 || (R1459 = 0 && R1460 = 0)) && (R2 != 0 || R20 = 0 || (R1461 = 0 && R1462 = 0)) && (R2 != 0 || R20 = 0 || (R1463 = 0 && R1464 = 0)) && (R2 != 0 || R20 = 0 || (R1465 = 0 && R1466 = 0)) && (R2 != 0 || R20 = 0 || (R1467 = 0 && R1468 = 0)) && (R2 != 0 || R20 = 0 || (R1469 = 0 && R1470 = 0)) && (R2 != 0 || R20 = 0 || (R1471 = 0 && R1472 = 0)) && (R2 != 0 || R20 = 0 || (R1473 = 0 && R1474 = 0)) && (R2 != 0 || R20 = 0 || (R1475 = 0 && R1476 = 0)) && (R53 + R94 + R91 != 0 || R54 + R95 + R92 + -1*R1224 + -1*R1220 - R66 = 0 || R66 + R1224 + R1220 < 1) && (R59 + R100 + R97 != 0 || R60 + R101 + R98 + -1*R1224 + -1*R1220 - R66 = 0 || R66 + R1224 + R1220 < 1) && (R66 + R1224 + R1220 != 0 || ((R53 + R94 + R91 != 0 || R54 + R95 + R92 = 0 || R68 + R1226 + R1222 < 1) && (R53 + R94 + R91 = 0 || R68 + R1226 + R1222 < 1))) && (R66 + R1224 + R1220 != 0 || ((R59 + R100 + R97 != 0 || R60 + R101 + R98 = 0 || R68 + R1226 + R1222 < 1) && (R59 + R100 + R97 = 0 || R68 + R1226 + R1222 < 1))) && (R66 + R1224 + R1220 != 0 || ((R73 + R1452 + R1447 != 0 || R74 + R1453 + R1448 = 0 || R68 + R1226 + R1222 < 1) && (R73 + R1452 + R1447 = 0 || R68 + R1226 + R1222 < 1))) && (R68 + R1226 + R1222 != 0 || R77 + R1456 + R1451 = 0 || (R75 + R1454 + R1449 = 0 && R76 + R1455 + R1450 = 0)) && (R73 + R1452 + R1447 != 0 || R66 + R1224 + R1220 + -1*R1453 + -1*R1448 - R74 = 0 || R66 + R1224 + R1220 < 1) && (R75 + R1454 + R1449 != 0 || R68 + R1226 + R1222 + -1*R1455 + -1*R1450 - R76 = 0 || R68 + R1226 + R1222 < 1) && (R1457 != 0 || R2 = R1458 || R2 < 1) && (R1459 != 0 || R2 = R1460 || R2 < 1) && (R1461 != 0 || R2 = R1462 || R2 < 1) && (R1463 != 0 || R2 = R1464 || R2 < 1) && (R1465 != 0 || R2 = R1466 || R2 < 1) && (R1467 != 0 || R2 = R1468 || R2 < 1) && (R1469 != 0 || R2 = R1470 || R2 < 1) && (R1471 != 0 || R2 = R1472 || R2 < 1) && (R1473 != 0 || R2 = R1474 || R2 < 1) && (R1475 != 0 || R2 = R1476 || R2 < 1) && (R21 = 0 || (R1495 = 0 && R1496 = 0)) && (R21 = 0 || (R1499 = 0 && R1500 = 0)) && (R21 = 0 || (R1501 = 0 && R1502 = 0)) && (R21 = 0 || (R1505 = 0 && R1506 = 0)) && (R21 = 0 || (R1507 = 0 && R1508 = 0)) && (R21 = 0 || (R1511 = 0 && R1512 = 0)) && (R22 = 0 || (R1477 = 0 && R1478 = 0)) && (R22 = 0 || (R1479 = 0 && R1480 = 0)) && (R22 = 0 || (R1481 = 0 && R1482 = 0)) && (R22 = 0 || (R1483 = 0 && R1484 = 0)) && (R22 = 0 || (R1485 = 0 && R1486 = 0)) && (R22 = 0 || (R1487 = 0 && R1488 = 0)) && (R22 = 0 || (R1489 = 0 && R1490 = 0)) && (R22 = 0 || (R1491 = 0 && R1492 = 0)) && (R22 = 0 || (R1493 = 0 && R1494 = 0)) && (R53 + R94 + R91 = 0 || R66 + R1224 + R1220 < 1) && (R59 + R100 + R97 = 0 || R66 + R1224 + R1220 < 1) && (R73 + R1452 + R1447 = 0 || R66 + R1224 + R1220 < 1) && (R75 + R1454 + R1449 = 0 || R68 + R1226 + R1222 < 1) && (R1457 = 0 || R2 < 1) && (R1459 = 0 || R2 < 1) && (R1461 = 0 || R2 < 1) && (R1463 = 0 || R2 < 1) && (R1465 = 0 || R2 < 1) && (R1467 = 0 || R2 < 1) && (R1469 = 0 || R2 < 1) && (R1471 = 0 || R2 < 1) && (R1473 = 0 || R2 < 1) && (R1475 = 0 || R2 < 1);
// End of Parikh automata intersection problem
