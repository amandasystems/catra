// Parikh automata intersection problem, generated by OSTRICH+
counter int R100, R101, R102, R12, R1219, R1220, R1221, R1222, R1223, R1224, R1225, R1226, R15, R1557, R1558, R1559, R1560, R1561, R1562, R1563, R1564, R1565, R1566, R1567, R1568, R1569, R1570, R1571, R1572, R1573, R1574, R1575, R1576, R1577, R1578, R1579, R1580, R1581, R1582, R1583, R1584, R1585, R1586, R1587, R1588, R1589, R1590, R1591, R1592, R1593, R1594, R1595, R1596, R1597, R1598, R1599, R16, R1600, R1601, R1602, R1603, R1604, R1605, R1606, R1607, R1608, R1609, R1610, R1611, R1612, R1613, R1614, R1615, R1616, R1617, R1618, R1619, R1620, R1621, R1622, R1623, R1624, R1625, R1626, R1627, R1628, R1629, R1630, R1631, R1632, R1633, R1634, R1635, R1636, R1637, R1638, R1639, R1640, R1641, R1642, R1643, R1644, R1645, R1646, R1647, R1648, R1649, R1650, R1651, R1652, R1653, R1654, R1655, R1656, R1657, R1658, R1659, R1660, R1661, R1662, R1663, R1664, R1665, R1666, R2, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R4, R45, R47, R49, R5, R50, R53, R54, R55, R59, R60, R61, R65, R66, R67, R68, R73, R74, R75, R76, R77, R83, R84, R85, R86, R87, R88, R89, R90, R91, R92, R93, R94, R95, R96, R97, R98, R99;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [70, 70];
  s0 -> s0 [71, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [70, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R15 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 69];
  s0 -> s0 [0, 65535] { R16 += 1 };
  s0 -> s2 [70, 70];
  s0 -> s1 [71, 65535];
  s1 -> s1 [0, 69];
  s1 -> s2 [70, 70];
  s1 -> s1 [71, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R24 += 1 };
  s0 -> s0 [0, 65535] { R23 += 1, R24 += 1 };
  s0 -> s2 [9, 13] { R24 += 1 };
  s0 -> s1 [14, 31] { R24 += 1 };
  s0 -> s2 [32, 32] { R24 += 1 };
  s0 -> s1 [33, 65535] { R24 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R24 += 1 };
  s2 -> s1 [0, 65535] { R24 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R25 += 1, R26 += 1 };
  s1 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R28 += 1 };
  s0 -> s0 [0, 65535] { R27 += 1, R28 += 1 };
  s0 -> s2 [9, 13] { R28 += 1 };
  s0 -> s1 [14, 31] { R28 += 1 };
  s0 -> s2 [32, 32] { R28 += 1 };
  s0 -> s1 [33, 65535] { R28 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R28 += 1 };
  s2 -> s1 [0, 65535] { R28 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R29 += 1, R30 += 1 };
  s1 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R1588 += 1, R22 += 1 };
  s0 -> s0 [0, 65535] { R1587 += 1, R1588 += 1 };
  s1 -> s1 [0, 65535] { R1588 += 1, R22 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 69] { R1590 += 1 };
  s0 -> s0 [0, 65535] { R1589 += 1, R1590 += 1 };
  s0 -> s2 [70, 70] { R1590 += 1 };
  s0 -> s3 [70, 70] { R1590 += 1 };
  s0 -> s1 [76, 65535] { R1590 += 1 };
  s1 -> s1 [0, 69] { R1590 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R1590 += 1 };
  s1 -> s3 [70, 70] { R1590 += 1 };
  s1 -> s1 [76, 65535] { R1590 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 70] { R1590 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [76, 65535] { R1590 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 69] { R1592 += 1, R45 += 1 };
  s0 -> s0 [0, 65535] { R1591 += 1, R1592 += 1 };
  s0 -> s2 [70, 70] { R1592 += 1, R45 += 1 };
  s0 -> s3 [70, 70] { R1592 += 1, R45 += 1 };
  s0 -> s1 [71, 65535] { R1592 += 1, R45 += 1 };
  s1 -> s1 [0, 69] { R1592 += 1, R45 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R1592 += 1, R45 += 1 };
  s1 -> s3 [70, 70] { R1592 += 1, R45 += 1 };
  s1 -> s1 [71, 65535] { R1592 += 1, R45 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1592 += 1, R45 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 69] { R1594 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R1593 += 1, R1594 += 1 };
  s0 -> s2 [70, 70] { R1594 += 1, R47 += 1 };
  s0 -> s3 [70, 70] { R1594 += 1, R47 += 1 };
  s0 -> s1 [71, 65535] { R1594 += 1, R47 += 1 };
  s1 -> s1 [0, 69] { R1594 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R1594 += 1, R47 += 1 };
  s1 -> s3 [70, 70] { R1594 += 1, R47 += 1 };
  s1 -> s1 [71, 65535] { R1594 += 1, R47 += 1 };
  s2 -> s2 [0, 65535] { R1594 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 69] { R1596 += 1, R49 += 1, R50 += 1 };
  s0 -> s0 [0, 65535] { R1595 += 1, R1596 += 1 };
  s0 -> s2 [70, 70] { R1596 += 1, R49 += 1, R50 += 1 };
  s0 -> s3 [70, 70] { R1596 += 1, R49 += 1, R50 += 1 };
  s0 -> s1 [71, 65535] { R1596 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 69] { R1596 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R1596 += 1, R49 += 1, R50 += 1 };
  s1 -> s3 [70, 70] { R1596 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [71, 65535] { R1596 += 1, R49 += 1, R50 += 1 };
  s2 -> s2 [0, 65535] { R1596 += 1, R49 += 1, R50 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 69] { R1598 += 1, R53 += 1, R54 += 1 };
  s0 -> s0 [0, 65535] { R1597 += 1, R1598 += 1 };
  s0 -> s2 [70, 70] { R1598 += 1, R53 += 1, R54 += 1 };
  s0 -> s3 [70, 70] { R1598 += 1, R53 += 1, R54 += 1 };
  s0 -> s1 [71, 65535] { R1598 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 69] { R1598 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R1598 += 1, R53 += 1, R54 += 1 };
  s1 -> s3 [70, 70] { R1598 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [71, 65535] { R1598 += 1, R53 += 1, R54 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R1598 += 1, R53 += 1, R54 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 69] { R1600 += 1, R59 += 1, R60 += 1 };
  s0 -> s0 [0, 65535] { R1599 += 1, R1600 += 1 };
  s0 -> s2 [70, 70] { R1600 += 1, R59 += 1, R60 += 1 };
  s0 -> s3 [70, 70] { R1600 += 1, R59 += 1, R60 += 1 };
  s0 -> s1 [71, 65535] { R1600 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 69] { R1600 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R1600 += 1, R59 += 1, R60 += 1 };
  s1 -> s3 [70, 70] { R1600 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [71, 65535] { R1600 += 1, R59 += 1, R60 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1600 += 1, R59 += 1, R60 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 69] { R1602 += 1, R65 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R1601 += 1, R1602 += 1 };
  s0 -> s2 [70, 70] { R1602 += 1, R65 += 1, R66 += 1 };
  s0 -> s3 [70, 70] { R1602 += 1, R65 += 1, R66 += 1 };
  s0 -> s1 [71, 65535] { R1602 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 69] { R1602 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R1602 += 1, R65 += 1, R66 += 1 };
  s1 -> s3 [70, 70] { R1602 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [71, 65535] { R1602 += 1, R65 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R1602 += 1, R65 += 1, R66 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 69] { R1604 += 1, R73 += 1, R74 += 1 };
  s0 -> s0 [0, 65535] { R1603 += 1, R1604 += 1 };
  s0 -> s2 [70, 70] { R1604 += 1, R73 += 1, R74 += 1 };
  s0 -> s3 [70, 70] { R1604 += 1, R73 += 1, R74 += 1 };
  s0 -> s1 [71, 65535] { R1604 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 69] { R1604 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R1604 += 1, R73 += 1, R74 += 1 };
  s1 -> s3 [70, 70] { R1604 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [71, 65535] { R1604 += 1, R73 += 1, R74 += 1 };
  s2 -> s2 [0, 65535] { R1604 += 1, R73 += 1, R74 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 69] { R1624 += 1 };
  s0 -> s0 [0, 65535] { R1623 += 1, R1624 += 1 };
  s0 -> s2 [70, 70] { R1624 += 1 };
  s0 -> s1 [71, 65535] { R1624 += 1 };
  s1 -> s1 [0, 69] { R1624 += 1 };
  s1 -> s2 [70, 70] { R1624 += 1 };
  s1 -> s1 [71, 65535] { R1624 += 1 };
  s2 -> s2 [0, 65535] { R1624 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R1626 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R1625 += 1, R1626 += 1 };
  s1 -> s1 [0, 65535] { R1626 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 69] { R1628 += 1 };
  s0 -> s0 [0, 65535] { R1627 += 1, R1628 += 1 };
  s0 -> s2 [0, 65535] { R1628 += 1, R12 += 1 };
  s0 -> s3 [70, 70] { R1628 += 1 };
  s0 -> s1 [71, 65535] { R1628 += 1 };
  s1 -> s1 [0, 69] { R1628 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [70, 70] { R1628 += 1 };
  s1 -> s1 [71, 65535] { R1628 += 1 };
  s2 -> s1 [0, 69] { R1628 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1628 += 1, R12 += 1 };
  s2 -> s3 [70, 70] { R1628 += 1 };
  s2 -> s1 [71, 65535] { R1628 += 1 };
  s3 -> s3 [0, 65535] { R1628 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 69] { R1630 += 1, R1568 += 1 };
  s0 -> s2 [0, 65535] { R1630 += 1, R1567 += 1, R1568 += 1 };
  s0 -> s0 [0, 65535] { R1629 += 1, R1630 += 1 };
  s0 -> s1 [71, 65535] { R1630 += 1, R1568 += 1 };
  s1 -> s1 [0, 69] { R1630 += 1, R1568 += 1 };
  s1 -> s1 [0, 65535] { R1630 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [71, 65535] { R1630 += 1, R1568 += 1 };
  s2 -> s1 [0, 69] { R1630 += 1, R1568 += 1 };
  s2 -> s2 [0, 65535] { R1630 += 1, R1567 += 1, R1568 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [71, 65535] { R1630 += 1, R1568 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R1632 += 1, R1570 += 1, R20 += 1 };
  s0 -> s2 [0, 65535] { R1632 += 1, R1569 += 1, R1570 += 1 };
  s0 -> s0 [0, 65535] { R1631 += 1, R1632 += 1 };
  s1 -> s4 [0, 65535] { R1632 += 1 };
  s1 -> s1 [0, 65535] { R1632 += 1, R1570 += 1, R20 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R1632 += 1, R1570 += 1, R20 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1632 += 1, R1569 += 1, R1570 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1632 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 70] { R1634 += 1, R1572 += 1 };
  s0 -> s2 [0, 65535] { R1634 += 1, R1571 += 1, R1572 += 1 };
  s0 -> s0 [0, 65535] { R1633 += 1, R1634 += 1 };
  s0 -> s1 [75, 65535] { R1634 += 1, R1572 += 1 };
  s1 -> s1 [0, 70] { R1634 += 1, R1572 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1634 += 1 };
  s1 -> s1 [75, 65535] { R1634 += 1, R1572 += 1 };
  s2 -> s1 [0, 70] { R1634 += 1, R1572 += 1 };
  s2 -> s2 [0, 65535] { R1634 += 1, R1571 += 1, R1572 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [75, 65535] { R1634 += 1, R1572 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R1636 += 1, R1573 += 1, R1574 += 1 };
  s0 -> s2 [0, 65535] { R1636 += 1, R1574 += 1, R84 += 1 };
  s0 -> s0 [0, 65535] { R1635 += 1, R1636 += 1 };
  s1 -> s1 [0, 65535] { R1636 += 1, R1573 += 1, R1574 += 1 };
  s1 -> s2 [0, 65535] { R1636 += 1, R1574 += 1, R84 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R1636 += 1 };
  s2 -> s2 [0, 65535] { R1636 += 1, R1574 += 1, R84 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1636 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 74] { R1638 += 1, R1576 += 1 };
  s0 -> s2 [0, 65535] { R1638 += 1, R1575 += 1, R1576 += 1 };
  s0 -> s0 [0, 65535] { R1637 += 1, R1638 += 1 };
  s0 -> s3 [0, 65535] { R1638 += 1, R1576 += 1, R86 += 1 };
  s0 -> s1 [76, 65535] { R1638 += 1, R1576 += 1 };
  s1 -> s1 [0, 74] { R1638 += 1, R1576 += 1 };
  s1 -> s1 [0, 65535] { R1638 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [76, 65535] { R1638 += 1, R1576 += 1 };
  s2 -> s1 [0, 74] { R1638 += 1, R1576 += 1 };
  s2 -> s2 [0, 65535] { R1638 += 1, R1575 += 1, R1576 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R1638 += 1, R1576 += 1, R86 += 1 };
  s2 -> s1 [76, 65535] { R1638 += 1, R1576 += 1 };
  s3 -> s1 [0, 74] { R1638 += 1, R1576 += 1 };
  s3 -> s4 [0, 65535] { R1638 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R1638 += 1, R1576 += 1, R86 += 1 };
  s3 -> s1 [76, 65535] { R1638 += 1, R1576 += 1 };
  s4 -> s4 [0, 65535] { R1638 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 65535] { R1640 += 1, R1578 += 1, R90 += 1 };
  s0 -> s2 [0, 65535] { R1640 += 1, R1578 += 1 };
  s0 -> s0 [0, 65535] { R1639 += 1, R1640 += 1 };
  s0 -> s3 [0, 65535] { R1640 += 1, R1577 += 1, R1578 += 1 };
  s1 -> s1 [0, 65535] { R1640 += 1, R1578 += 1, R90 += 1 };
  s1 -> s2 [0, 65535] { R1640 += 1, R1578 += 1 };
  s1 -> s5 [0, 65535] { R1640 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1640 += 1, R1578 += 1 };
  s2 -> s5 [0, 65535] { R1640 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R1640 += 1, R1578 += 1, R90 += 1 };
  s3 -> s2 [0, 65535] { R1640 += 1, R1578 += 1 };
  s3 -> s3 [0, 65535] { R1640 += 1, R1577 += 1, R1578 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1640 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R1642 += 1, R1580 += 1, R94 += 1, R95 += 1 };
  s0 -> s2 [0, 65535] { R1642 += 1, R1579 += 1, R1580 += 1 };
  s0 -> s3 [0, 65535] { R1642 += 1, R1580 += 1, R95 += 1, R96 += 1 };
  s0 -> s0 [0, 65535] { R1641 += 1, R1642 += 1 };
  s1 -> s1 [0, 65535] { R1642 += 1, R1580 += 1, R94 += 1, R95 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s3 [0, 65535] { R1642 += 1, R1580 += 1, R95 += 1, R96 += 1 };
  s1 -> s5 [0, 65535] { R1642 += 1 };
  s2 -> s1 [0, 65535] { R1642 += 1, R1580 += 1, R94 += 1, R95 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1642 += 1, R1579 += 1, R1580 += 1 };
  s2 -> s3 [0, 65535] { R1642 += 1, R1580 += 1, R95 += 1, R96 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1642 += 1, R1580 += 1, R95 += 1, R96 += 1 };
  s3 -> s5 [0, 65535] { R1642 += 1 };
  s3 -> s6 [0, 65535] { R1642 += 1, R1580 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1642 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R1642 += 1 };
  s6 -> s6 [0, 65535] { R1642 += 1, R1580 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 74] { R1644 += 1, R1582 += 1, R101 += 1 };
  s0 -> s0 [0, 65535] { R1643 += 1, R1644 += 1 };
  s0 -> s2 [0, 65535] { R1644 += 1, R1582 += 1, R101 += 1, R102 += 1 };
  s0 -> s3 [0, 65535] { R1644 += 1, R1582 += 1, R100 += 1, R101 += 1 };
  s0 -> s4 [0, 65535] { R1644 += 1, R1581 += 1, R1582 += 1 };
  s0 -> s1 [76, 65535] { R1644 += 1, R1582 += 1, R101 += 1 };
  s1 -> s1 [0, 74] { R1644 += 1, R1582 += 1, R101 += 1 };
  s1 -> s1 [0, 65535] { R1644 += 1, R1582 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R1644 += 1 };
  s1 -> s1 [76, 65535] { R1644 += 1, R1582 += 1, R101 += 1 };
  s2 -> s1 [0, 74] { R1644 += 1, R1582 += 1, R101 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1644 += 1, R1582 += 1, R101 += 1, R102 += 1 };
  s2 -> s6 [0, 65535] { R1644 += 1 };
  s2 -> s7 [0, 65535] { R1644 += 1, R1582 += 1 };
  s2 -> s1 [76, 65535] { R1644 += 1, R1582 += 1, R101 += 1 };
  s3 -> s1 [0, 74] { R1644 += 1, R1582 += 1, R101 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R1644 += 1, R1582 += 1, R101 += 1, R102 += 1 };
  s3 -> s6 [0, 65535] { R1644 += 1 };
  s3 -> s3 [0, 65535] { R1644 += 1, R1582 += 1, R100 += 1, R101 += 1 };
  s3 -> s1 [76, 65535] { R1644 += 1, R1582 += 1, R101 += 1 };
  s4 -> s1 [0, 74] { R1644 += 1, R1582 += 1, R101 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s2 [0, 65535] { R1644 += 1, R1582 += 1, R101 += 1, R102 += 1 };
  s4 -> s3 [0, 65535] { R1644 += 1, R1582 += 1, R100 += 1, R101 += 1 };
  s4 -> s4 [0, 65535] { R1644 += 1, R1581 += 1, R1582 += 1 };
  s4 -> s1 [76, 65535] { R1644 += 1, R1582 += 1, R101 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1644 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R1644 += 1 };
  s7 -> s7 [0, 65535] { R1644 += 1, R1582 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R1646 += 1, R1584 += 1 };
  s0 -> s0 [0, 65535] { R1645 += 1, R1646 += 1 };
  s0 -> s2 [0, 65535] { R1646 += 1, R1583 += 1, R1584 += 1 };
  s1 -> s1 [0, 65535] { R1646 += 1, R1584 += 1 };
  s1 -> s4 [0, 65535] { R1646 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R1646 += 1, R1584 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1646 += 1, R1583 += 1, R1584 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1646 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 65535] { R1648 += 1, R1585 += 1, R1586 += 1 };
  s0 -> s0 [0, 65535] { R1647 += 1, R1648 += 1 };
  s0 -> s2 [0, 65535] { R1648 += 1, R1586 += 1 };
  s0 -> s3 [0, 65535] { R1648 += 1, R1586 += 1, R1563 += 1 };
  s0 -> s4 [0, 65535] { R1648 += 1, R1586 += 1, R1563 += 1, R1565 += 1, R1566 += 1 };
  s1 -> s1 [0, 65535] { R1648 += 1, R1585 += 1, R1586 += 1 };
  s1 -> s2 [0, 65535] { R1648 += 1, R1586 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R1648 += 1, R1586 += 1, R1563 += 1 };
  s1 -> s4 [0, 65535] { R1648 += 1, R1586 += 1, R1563 += 1, R1565 += 1, R1566 += 1 };
  s2 -> s2 [0, 65535] { R1648 += 1, R1586 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R1648 += 1 };
  s3 -> s2 [0, 65535] { R1648 += 1, R1586 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R1648 += 1 };
  s3 -> s3 [0, 65535] { R1648 += 1, R1586 += 1, R1563 += 1 };
  s4 -> s2 [0, 65535] { R1648 += 1, R1586 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R1648 += 1 };
  s4 -> s3 [0, 65535] { R1648 += 1, R1586 += 1, R1563 += 1 };
  s4 -> s4 [0, 65535] { R1648 += 1, R1586 += 1, R1563 += 1, R1565 += 1, R1566 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1648 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R1650 += 1, R1606 += 1, R21 += 1 };
  s0 -> s2 [0, 65535] { R1650 += 1, R1605 += 1, R1606 += 1 };
  s0 -> s0 [0, 65535] { R1649 += 1, R1650 += 1 };
  s1 -> s1 [0, 65535] { R1650 += 1, R1606 += 1, R21 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R1650 += 1 };
  s2 -> s1 [0, 65535] { R1650 += 1, R1606 += 1, R21 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1650 += 1, R1605 += 1, R1606 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1650 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 69] { R1652 += 1, R1608 += 1 };
  s0 -> s0 [0, 65535] { R1651 += 1, R1652 += 1 };
  s0 -> s2 [0, 65535] { R1652 += 1, R1607 += 1, R1608 += 1 };
  s0 -> s3 [70, 70] { R1652 += 1, R1608 += 1 };
  s0 -> s4 [70, 70] { R1652 += 1, R1608 += 1 };
  s0 -> s5 [75, 75] { R1652 += 1, R1608 += 1 };
  s0 -> s1 [76, 65535] { R1652 += 1, R1608 += 1 };
  s1 -> s1 [0, 69] { R1652 += 1, R1608 += 1 };
  s1 -> s3 [70, 70] { R1652 += 1, R1608 += 1 };
  s1 -> s4 [70, 70] { R1652 += 1, R1608 += 1 };
  s1 -> s5 [75, 75] { R1652 += 1, R1608 += 1 };
  s1 -> s1 [76, 65535] { R1652 += 1, R1608 += 1 };
  s2 -> s1 [0, 69] { R1652 += 1, R1608 += 1 };
  s2 -> s2 [0, 65535] { R1652 += 1, R1607 += 1, R1608 += 1 };
  s2 -> s3 [70, 70] { R1652 += 1, R1608 += 1 };
  s2 -> s4 [70, 70] { R1652 += 1, R1608 += 1 };
  s2 -> s5 [75, 75] { R1652 += 1, R1608 += 1 };
  s2 -> s1 [76, 65535] { R1652 += 1, R1608 += 1 };
  s3 -> s3 [0, 70] { R1652 += 1, R1608 += 1 };
  s3 -> s7 [75, 75] { R1652 += 1, R1608 += 1 };
  s3 -> s3 [76, 65535] { R1652 += 1, R1608 += 1 };
  s5 -> s5 [0, 69] { R1652 += 1, R1608 += 1 };
  s5 -> s5 [0, 65535] { R1652 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [70, 70] { R1652 += 1, R1608 += 1 };
  s5 -> s8 [70, 70] { R1652 += 1, R1608 += 1 };
  s5 -> s5 [75, 65535] { R1652 += 1, R1608 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 70] { R1652 += 1, R1608 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R1652 += 1 };
  s7 -> s7 [75, 65535] { R1652 += 1, R1608 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R1652 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 69] { R1654 += 1, R1610 += 1, R83 += 1 };
  s0 -> s0 [0, 65535] { R1653 += 1, R1654 += 1 };
  s0 -> s2 [0, 65535] { R1654 += 1, R1609 += 1, R1610 += 1 };
  s0 -> s3 [70, 70] { R1654 += 1, R1610 += 1, R83 += 1 };
  s0 -> s4 [70, 70] { R1654 += 1, R1610 += 1, R83 += 1 };
  s0 -> s1 [71, 65535] { R1654 += 1, R1610 += 1, R83 += 1 };
  s1 -> s1 [0, 69] { R1654 += 1, R1610 += 1, R83 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R1654 += 1 };
  s1 -> s3 [70, 70] { R1654 += 1, R1610 += 1, R83 += 1 };
  s1 -> s4 [70, 70] { R1654 += 1, R1610 += 1, R83 += 1 };
  s1 -> s1 [71, 65535] { R1654 += 1, R1610 += 1, R83 += 1 };
  s2 -> s1 [0, 69] { R1654 += 1, R1610 += 1, R83 += 1 };
  s2 -> s2 [0, 65535] { R1654 += 1, R1609 += 1, R1610 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [70, 70] { R1654 += 1, R1610 += 1, R83 += 1 };
  s2 -> s4 [70, 70] { R1654 += 1, R1610 += 1, R83 += 1 };
  s2 -> s1 [71, 65535] { R1654 += 1, R1610 += 1, R83 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R1654 += 1 };
  s4 -> s5 [0, 65535] { R1654 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R1654 += 1, R1610 += 1, R83 += 1 };
  s5 -> s5 [0, 65535] { R1654 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 69] { R1656 += 1, R1612 += 1, R85 += 1 };
  s0 -> s0 [0, 65535] { R1655 += 1, R1656 += 1 };
  s0 -> s2 [0, 65535] { R1656 += 1, R1611 += 1, R1612 += 1 };
  s0 -> s3 [70, 70] { R1656 += 1, R1612 += 1, R85 += 1 };
  s0 -> s4 [70, 70] { R1656 += 1, R1612 += 1, R85 += 1 };
  s0 -> s1 [71, 65535] { R1656 += 1, R1612 += 1, R85 += 1 };
  s1 -> s1 [0, 69] { R1656 += 1, R1612 += 1, R85 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1656 += 1 };
  s1 -> s3 [70, 70] { R1656 += 1, R1612 += 1, R85 += 1 };
  s1 -> s4 [70, 70] { R1656 += 1, R1612 += 1, R85 += 1 };
  s1 -> s1 [71, 65535] { R1656 += 1, R1612 += 1, R85 += 1 };
  s2 -> s1 [0, 69] { R1656 += 1, R1612 += 1, R85 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1656 += 1, R1611 += 1, R1612 += 1 };
  s2 -> s3 [70, 70] { R1656 += 1, R1612 += 1, R85 += 1 };
  s2 -> s4 [70, 70] { R1656 += 1, R1612 += 1, R85 += 1 };
  s2 -> s1 [71, 65535] { R1656 += 1, R1612 += 1, R85 += 1 };
  s3 -> s3 [0, 65535] { R1656 += 1, R1612 += 1, R85 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R1656 += 1 };
  s4 -> s4 [0, 65535] { R1656 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1656 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 69] { R1658 += 1, R1614 += 1, R87 += 1, R88 += 1 };
  s0 -> s2 [0, 69] { R1658 += 1, R1614 += 1, R88 += 1 };
  s0 -> s3 [0, 65535] { R1658 += 1, R1613 += 1, R1614 += 1 };
  s0 -> s0 [0, 65535] { R1657 += 1, R1658 += 1 };
  s0 -> s4 [70, 70] { R1658 += 1, R1614 += 1, R87 += 1, R88 += 1 };
  s0 -> s5 [70, 70] { R1658 += 1, R1614 += 1, R88 += 1 };
  s0 -> s6 [70, 70] { R1658 += 1, R1614 += 1, R87 += 1, R88 += 1 };
  s0 -> s7 [70, 70] { R1658 += 1, R1614 += 1, R88 += 1 };
  s0 -> s2 [71, 74] { R1658 += 1, R1614 += 1, R88 += 1 };
  s0 -> s1 [71, 65535] { R1658 += 1, R1614 += 1, R87 += 1, R88 += 1 };
  s0 -> s8 [75, 75] { R1658 += 1, R1614 += 1, R88 += 1 };
  s0 -> s2 [76, 65535] { R1658 += 1, R1614 += 1, R88 += 1 };
  s1 -> s1 [0, 69] { R1658 += 1, R1614 += 1, R87 += 1, R88 += 1 };
  s1 -> s2 [0, 69] { R1658 += 1, R1614 += 1, R88 += 1 };
  s1 -> s4 [70, 70] { R1658 += 1, R1614 += 1, R87 += 1, R88 += 1 };
  s1 -> s5 [70, 70] { R1658 += 1, R1614 += 1, R88 += 1 };
  s1 -> s6 [70, 70] { R1658 += 1, R1614 += 1, R87 += 1, R88 += 1 };
  s1 -> s7 [70, 70] { R1658 += 1, R1614 += 1, R88 += 1 };
  s1 -> s2 [71, 74] { R1658 += 1, R1614 += 1, R88 += 1 };
  s1 -> s1 [71, 65535] { R1658 += 1, R1614 += 1, R87 += 1, R88 += 1 };
  s1 -> s8 [75, 75] { R1658 += 1, R1614 += 1, R88 += 1 };
  s1 -> s2 [76, 65535] { R1658 += 1, R1614 += 1, R88 += 1 };
  s2 -> s2 [0, 69] { R1658 += 1, R1614 += 1, R88 += 1 };
  s2 -> s5 [70, 70] { R1658 += 1, R1614 += 1, R88 += 1 };
  s2 -> s7 [70, 70] { R1658 += 1, R1614 += 1, R88 += 1 };
  s2 -> s2 [71, 74] { R1658 += 1, R1614 += 1, R88 += 1 };
  s2 -> s8 [75, 75] { R1658 += 1, R1614 += 1, R88 += 1 };
  s2 -> s2 [76, 65535] { R1658 += 1, R1614 += 1, R88 += 1 };
  s3 -> s1 [0, 69] { R1658 += 1, R1614 += 1, R87 += 1, R88 += 1 };
  s3 -> s2 [0, 69] { R1658 += 1, R1614 += 1, R88 += 1 };
  s3 -> s3 [0, 65535] { R1658 += 1, R1613 += 1, R1614 += 1 };
  s3 -> s4 [70, 70] { R1658 += 1, R1614 += 1, R87 += 1, R88 += 1 };
  s3 -> s5 [70, 70] { R1658 += 1, R1614 += 1, R88 += 1 };
  s3 -> s6 [70, 70] { R1658 += 1, R1614 += 1, R87 += 1, R88 += 1 };
  s3 -> s7 [70, 70] { R1658 += 1, R1614 += 1, R88 += 1 };
  s3 -> s2 [71, 74] { R1658 += 1, R1614 += 1, R88 += 1 };
  s3 -> s1 [71, 65535] { R1658 += 1, R1614 += 1, R87 += 1, R88 += 1 };
  s3 -> s8 [75, 75] { R1658 += 1, R1614 += 1, R88 += 1 };
  s3 -> s2 [76, 65535] { R1658 += 1, R1614 += 1, R88 += 1 };
  s4 -> s7 [0, 74] { R1658 += 1, R1614 += 1, R88 += 1 };
  s4 -> s4 [0, 65535] { R1658 += 1, R1614 += 1, R87 += 1, R88 += 1 };
  s4 -> s11 [75, 75] { R1658 += 1, R1614 += 1, R88 += 1 };
  s4 -> s7 [76, 65535] { R1658 += 1, R1614 += 1, R88 += 1 };
  s7 -> s7 [0, 74] { R1658 += 1, R1614 += 1, R88 += 1 };
  s7 -> s11 [75, 75] { R1658 += 1, R1614 += 1, R88 += 1 };
  s7 -> s7 [76, 65535] { R1658 += 1, R1614 += 1, R88 += 1 };
  s8 -> s8 [0, 69] { R1658 += 1, R1614 += 1, R88 += 1 };
  s8 -> s8 [0, 65535] { R1658 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [70, 70] { R1658 += 1, R1614 += 1, R88 += 1 };
  s8 -> s11 [70, 70] { R1658 += 1, R1614 += 1, R88 += 1 };
  s8 -> s8 [71, 65535] { R1658 += 1, R1614 += 1, R88 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R1658 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R1658 += 1, R1614 += 1, R88 += 1 };
  s11 -> s12 [0, 65535] { R1658 += 1 };
  s11 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R1658 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 69] { R1660 += 1, R1616 += 1, R91 += 1, R92 += 1 };
  s0 -> s2 [0, 65535] { R1660 += 1, R1615 += 1, R1616 += 1 };
  s0 -> s0 [0, 65535] { R1659 += 1, R1660 += 1 };
  s0 -> s3 [70, 70] { R1660 += 1, R1616 += 1, R91 += 1, R92 += 1 };
  s0 -> s4 [70, 70] { R1660 += 1, R1616 += 1, R91 += 1, R92 += 1 };
  s0 -> s1 [71, 65535] { R1660 += 1, R1616 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 69] { R1660 += 1, R1616 += 1, R91 += 1, R92 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1660 += 1 };
  s1 -> s3 [70, 70] { R1660 += 1, R1616 += 1, R91 += 1, R92 += 1 };
  s1 -> s4 [70, 70] { R1660 += 1, R1616 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [71, 65535] { R1660 += 1, R1616 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [0, 69] { R1660 += 1, R1616 += 1, R91 += 1, R92 += 1 };
  s2 -> s2 [0, 65535] { R1660 += 1, R1615 += 1, R1616 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [70, 70] { R1660 += 1, R1616 += 1, R91 += 1, R92 += 1 };
  s2 -> s4 [70, 70] { R1660 += 1, R1616 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [71, 65535] { R1660 += 1, R1616 += 1, R91 += 1, R92 += 1 };
  s3 -> s6 [0, 65535] { R1660 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R1660 += 1, R1616 += 1, R91 += 1, R92 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1660 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1660 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 69] { R1662 += 1, R1618 += 1, R97 += 1, R98 += 1 };
  s0 -> s0 [0, 65535] { R1661 += 1, R1662 += 1 };
  s0 -> s2 [0, 65535] { R1662 += 1, R1617 += 1, R1618 += 1 };
  s0 -> s3 [70, 70] { R1662 += 1, R1618 += 1, R97 += 1, R98 += 1 };
  s0 -> s4 [70, 70] { R1662 += 1, R1618 += 1, R97 += 1, R98 += 1 };
  s0 -> s1 [71, 65535] { R1662 += 1, R1618 += 1, R97 += 1, R98 += 1 };
  s1 -> s1 [0, 69] { R1662 += 1, R1618 += 1, R97 += 1, R98 += 1 };
  s1 -> s1 [0, 65535] { R1662 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [70, 70] { R1662 += 1, R1618 += 1, R97 += 1, R98 += 1 };
  s1 -> s4 [70, 70] { R1662 += 1, R1618 += 1, R97 += 1, R98 += 1 };
  s1 -> s1 [71, 65535] { R1662 += 1, R1618 += 1, R97 += 1, R98 += 1 };
  s2 -> s1 [0, 69] { R1662 += 1, R1618 += 1, R97 += 1, R98 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1662 += 1, R1617 += 1, R1618 += 1 };
  s2 -> s3 [70, 70] { R1662 += 1, R1618 += 1, R97 += 1, R98 += 1 };
  s2 -> s4 [70, 70] { R1662 += 1, R1618 += 1, R97 += 1, R98 += 1 };
  s2 -> s1 [71, 65535] { R1662 += 1, R1618 += 1, R97 += 1, R98 += 1 };
  s3 -> s3 [0, 65535] { R1662 += 1, R1618 += 1, R97 += 1, R98 += 1 };
  s3 -> s6 [0, 65535] { R1662 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1662 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1662 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 69] { R1664 += 1, R1620 += 1, R1220 += 1, R1221 += 1, R1222 += 1 };
  s0 -> s2 [0, 69] { R1664 += 1, R1620 += 1, R1220 += 1, R1222 += 1 };
  s0 -> s3 [0, 69] { R1664 += 1, R1620 += 1, R1219 += 1, R1220 += 1 };
  s0 -> s4 [0, 65535] { R1664 += 1, R1619 += 1, R1620 += 1 };
  s0 -> s0 [0, 65535] { R1663 += 1, R1664 += 1 };
  s0 -> s5 [70, 70] { R1664 += 1, R1620 += 1, R1220 += 1, R1222 += 1 };
  s0 -> s6 [70, 70] { R1664 += 1, R1620 += 1, R1219 += 1, R1220 += 1 };
  s0 -> s7 [70, 70] { R1664 += 1, R1620 += 1, R1219 += 1, R1220 += 1 };
  s0 -> s8 [70, 70] { R1664 += 1, R1620 += 1, R1220 += 1, R1221 += 1, R1222 += 1 };
  s0 -> s9 [70, 70] { R1664 += 1, R1620 += 1, R1220 += 1, R1222 += 1 };
  s0 -> s10 [70, 70] { R1664 += 1, R1620 += 1, R1220 += 1, R1221 += 1, R1222 += 1 };
  s0 -> s2 [71, 74] { R1664 += 1, R1620 += 1, R1220 += 1, R1222 += 1 };
  s0 -> s1 [71, 65535] { R1664 += 1, R1620 += 1, R1220 += 1, R1221 += 1, R1222 += 1 };
  s0 -> s3 [71, 65535] { R1664 += 1, R1620 += 1, R1219 += 1, R1220 += 1 };
  s0 -> s11 [75, 75] { R1664 += 1, R1620 += 1, R1220 += 1, R1222 += 1 };
  s0 -> s2 [76, 65535] { R1664 += 1, R1620 += 1, R1220 += 1, R1222 += 1 };
  s1 -> s1 [0, 69] { R1664 += 1, R1620 += 1, R1220 += 1, R1221 += 1, R1222 += 1 };
  s1 -> s2 [0, 69] { R1664 += 1, R1620 += 1, R1220 += 1, R1222 += 1 };
  s1 -> s5 [70, 70] { R1664 += 1, R1620 += 1, R1220 += 1, R1222 += 1 };
  s1 -> s8 [70, 70] { R1664 += 1, R1620 += 1, R1220 += 1, R1221 += 1, R1222 += 1 };
  s1 -> s9 [70, 70] { R1664 += 1, R1620 += 1, R1220 += 1, R1222 += 1 };
  s1 -> s10 [70, 70] { R1664 += 1, R1620 += 1, R1220 += 1, R1221 += 1, R1222 += 1 };
  s1 -> s2 [71, 74] { R1664 += 1, R1620 += 1, R1220 += 1, R1222 += 1 };
  s1 -> s1 [71, 65535] { R1664 += 1, R1620 += 1, R1220 += 1, R1221 += 1, R1222 += 1 };
  s1 -> s11 [75, 75] { R1664 += 1, R1620 += 1, R1220 += 1, R1222 += 1 };
  s1 -> s2 [76, 65535] { R1664 += 1, R1620 += 1, R1220 += 1, R1222 += 1 };
  s2 -> s2 [0, 69] { R1664 += 1, R1620 += 1, R1220 += 1, R1222 += 1 };
  s2 -> s5 [70, 70] { R1664 += 1, R1620 += 1, R1220 += 1, R1222 += 1 };
  s2 -> s9 [70, 70] { R1664 += 1, R1620 += 1, R1220 += 1, R1222 += 1 };
  s2 -> s2 [71, 74] { R1664 += 1, R1620 += 1, R1220 += 1, R1222 += 1 };
  s2 -> s11 [75, 75] { R1664 += 1, R1620 += 1, R1220 += 1, R1222 += 1 };
  s2 -> s2 [76, 65535] { R1664 += 1, R1620 += 1, R1220 += 1, R1222 += 1 };
  s3 -> s1 [0, 69] { R1664 += 1, R1620 += 1, R1220 += 1, R1221 += 1, R1222 += 1 };
  s3 -> s2 [0, 69] { R1664 += 1, R1620 += 1, R1220 += 1, R1222 += 1 };
  s3 -> s3 [0, 69] { R1664 += 1, R1620 += 1, R1219 += 1, R1220 += 1 };
  s3 -> s5 [70, 70] { R1664 += 1, R1620 += 1, R1220 += 1, R1222 += 1 };
  s3 -> s6 [70, 70] { R1664 += 1, R1620 += 1, R1219 += 1, R1220 += 1 };
  s3 -> s7 [70, 70] { R1664 += 1, R1620 += 1, R1219 += 1, R1220 += 1 };
  s3 -> s8 [70, 70] { R1664 += 1, R1620 += 1, R1220 += 1, R1221 += 1, R1222 += 1 };
  s3 -> s9 [70, 70] { R1664 += 1, R1620 += 1, R1220 += 1, R1222 += 1 };
  s3 -> s10 [70, 70] { R1664 += 1, R1620 += 1, R1220 += 1, R1221 += 1, R1222 += 1 };
  s3 -> s2 [71, 74] { R1664 += 1, R1620 += 1, R1220 += 1, R1222 += 1 };
  s3 -> s1 [71, 65535] { R1664 += 1, R1620 += 1, R1220 += 1, R1221 += 1, R1222 += 1 };
  s3 -> s3 [71, 65535] { R1664 += 1, R1620 += 1, R1219 += 1, R1220 += 1 };
  s3 -> s11 [75, 75] { R1664 += 1, R1620 += 1, R1220 += 1, R1222 += 1 };
  s3 -> s2 [76, 65535] { R1664 += 1, R1620 += 1, R1220 += 1, R1222 += 1 };
  s4 -> s1 [0, 69] { R1664 += 1, R1620 += 1, R1220 += 1, R1221 += 1, R1222 += 1 };
  s4 -> s2 [0, 69] { R1664 += 1, R1620 += 1, R1220 += 1, R1222 += 1 };
  s4 -> s3 [0, 69] { R1664 += 1, R1620 += 1, R1219 += 1, R1220 += 1 };
  s4 -> s4 [0, 65535] { R1664 += 1, R1619 += 1, R1620 += 1 };
  s4 -> s5 [70, 70] { R1664 += 1, R1620 += 1, R1220 += 1, R1222 += 1 };
  s4 -> s6 [70, 70] { R1664 += 1, R1620 += 1, R1219 += 1, R1220 += 1 };
  s4 -> s7 [70, 70] { R1664 += 1, R1620 += 1, R1219 += 1, R1220 += 1 };
  s4 -> s8 [70, 70] { R1664 += 1, R1620 += 1, R1220 += 1, R1221 += 1, R1222 += 1 };
  s4 -> s9 [70, 70] { R1664 += 1, R1620 += 1, R1220 += 1, R1222 += 1 };
  s4 -> s10 [70, 70] { R1664 += 1, R1620 += 1, R1220 += 1, R1221 += 1, R1222 += 1 };
  s4 -> s2 [71, 74] { R1664 += 1, R1620 += 1, R1220 += 1, R1222 += 1 };
  s4 -> s1 [71, 65535] { R1664 += 1, R1620 += 1, R1220 += 1, R1221 += 1, R1222 += 1 };
  s4 -> s3 [71, 65535] { R1664 += 1, R1620 += 1, R1219 += 1, R1220 += 1 };
  s4 -> s11 [75, 75] { R1664 += 1, R1620 += 1, R1220 += 1, R1222 += 1 };
  s4 -> s2 [76, 65535] { R1664 += 1, R1620 += 1, R1220 += 1, R1222 += 1 };
  s5 -> s5 [0, 74] { R1664 += 1, R1620 += 1, R1220 += 1, R1222 += 1 };
  s5 -> s19 [75, 75] { R1664 += 1, R1620 += 1, R1220 += 1, R1222 += 1 };
  s5 -> s5 [76, 65535] { R1664 += 1, R1620 += 1, R1220 += 1, R1222 += 1 };
  s6 -> s5 [0, 74] { R1664 += 1, R1620 += 1, R1220 += 1, R1222 += 1 };
  s6 -> s6 [0, 65535] { R1664 += 1, R1620 += 1, R1219 += 1, R1220 += 1 };
  s6 -> s8 [0, 65535] { R1664 += 1, R1620 += 1, R1220 += 1, R1221 += 1, R1222 += 1 };
  s6 -> s19 [75, 75] { R1664 += 1, R1620 += 1, R1220 += 1, R1222 += 1 };
  s6 -> s5 [76, 65535] { R1664 += 1, R1620 += 1, R1220 += 1, R1222 += 1 };
  s8 -> s5 [0, 74] { R1664 += 1, R1620 += 1, R1220 += 1, R1222 += 1 };
  s8 -> s8 [0, 65535] { R1664 += 1, R1620 += 1, R1220 += 1, R1221 += 1, R1222 += 1 };
  s8 -> s19 [75, 75] { R1664 += 1, R1620 += 1, R1220 += 1, R1222 += 1 };
  s8 -> s5 [76, 65535] { R1664 += 1, R1620 += 1, R1220 += 1, R1222 += 1 };
  s11 -> s11 [0, 69] { R1664 += 1, R1620 += 1, R1220 += 1, R1222 += 1 };
  s11 -> s12 [0, 69] { R1664 += 1, R1620 += 1, R1220 += 1 };
  s11 -> s13 [0, 69] { R1664 += 1, R1620 += 1 };
  s11 -> s14 [70, 70] { R1664 += 1, R1620 += 1 };
  s11 -> s15 [70, 70] { R1664 += 1, R1620 += 1 };
  s11 -> s16 [70, 70] { R1664 += 1, R1620 += 1, R1220 += 1 };
  s11 -> s17 [70, 70] { R1664 += 1, R1620 += 1, R1220 += 1, R1222 += 1 };
  s11 -> s18 [70, 70] { R1664 += 1, R1620 += 1, R1220 += 1 };
  s11 -> s19 [70, 70] { R1664 += 1, R1620 += 1, R1220 += 1, R1222 += 1 };
  s11 -> s11 [71, 65535] { R1664 += 1, R1620 += 1, R1220 += 1, R1222 += 1 };
  s11 -> s12 [71, 65535] { R1664 += 1, R1620 += 1, R1220 += 1 };
  s11 -> s13 [71, 65535] { R1664 += 1, R1620 += 1 };
  s12 -> s12 [0, 69] { R1664 += 1, R1620 += 1, R1220 += 1 };
  s12 -> s13 [0, 69] { R1664 += 1, R1620 += 1 };
  s12 -> s14 [70, 70] { R1664 += 1, R1620 += 1 };
  s12 -> s15 [70, 70] { R1664 += 1, R1620 += 1 };
  s12 -> s16 [70, 70] { R1664 += 1, R1620 += 1, R1220 += 1 };
  s12 -> s18 [70, 70] { R1664 += 1, R1620 += 1, R1220 += 1 };
  s12 -> s12 [71, 65535] { R1664 += 1, R1620 += 1, R1220 += 1 };
  s12 -> s13 [71, 65535] { R1664 += 1, R1620 += 1 };
  s13 -> s13 [0, 69] { R1664 += 1, R1620 += 1 };
  s13 -> s21 [0, 65535];
  s13 -> s13 [0, 65535] { R1664 += 1 };
  s13 -> s14 [70, 70] { R1664 += 1, R1620 += 1 };
  s13 -> s15 [70, 70] { R1664 += 1, R1620 += 1 };
  s13 -> s13 [71, 65535] { R1664 += 1, R1620 += 1 };
  s14 -> s21 [0, 65535];
  s14 -> s14 [0, 65535] { R1664 += 1 };
  s15 -> s20 [0, 65535] { R1664 += 1 };
  s15 -> s21 [0, 65535];
  s15 -> s15 [0, 65535] { R1664 += 1, R1620 += 1 };
  s18 -> s15 [0, 65535] { R1664 += 1, R1620 += 1 };
  s18 -> s18 [0, 65535] { R1664 += 1, R1620 += 1, R1220 += 1 };
  s19 -> s15 [0, 65535] { R1664 += 1, R1620 += 1 };
  s19 -> s18 [0, 65535] { R1664 += 1, R1620 += 1, R1220 += 1 };
  s19 -> s19 [0, 65535] { R1664 += 1, R1620 += 1, R1220 += 1, R1222 += 1 };
  s20 -> s20 [0, 65535] { R1664 += 1 };
  s20 -> s21 [0, 65535];
  s21 -> s21 [0, 65535];
  accepting s13, s14, s21, s20, s15;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 69] { R1666 += 1, R1622 += 1, R1558 += 1, R1559 += 1, R1560 += 1 };
  s0 -> s2 [0, 69] { R1666 += 1, R1622 += 1, R1558 += 1, R1560 += 1, R1561 += 1 };
  s0 -> s3 [0, 69] { R1666 += 1, R1622 += 1, R1557 += 1, R1558 += 1 };
  s0 -> s4 [0, 65535] { R1666 += 1, R1621 += 1, R1622 += 1 };
  s0 -> s0 [0, 65535] { R1665 += 1, R1666 += 1 };
  s0 -> s5 [70, 70] { R1666 += 1, R1622 += 1, R1557 += 1, R1558 += 1 };
  s0 -> s6 [70, 70] { R1666 += 1, R1622 += 1, R1558 += 1, R1559 += 1, R1560 += 1 };
  s0 -> s7 [70, 70] { R1666 += 1, R1622 += 1, R1558 += 1, R1560 += 1, R1561 += 1 };
  s0 -> s8 [70, 70] { R1666 += 1, R1622 += 1, R1558 += 1, R1559 += 1, R1560 += 1 };
  s0 -> s9 [70, 70] { R1666 += 1, R1622 += 1, R1557 += 1, R1558 += 1 };
  s0 -> s10 [70, 70] { R1666 += 1, R1622 += 1, R1558 += 1, R1560 += 1, R1561 += 1 };
  s0 -> s1 [71, 65535] { R1666 += 1, R1622 += 1, R1558 += 1, R1559 += 1, R1560 += 1 };
  s0 -> s2 [71, 65535] { R1666 += 1, R1622 += 1, R1558 += 1, R1560 += 1, R1561 += 1 };
  s0 -> s3 [71, 65535] { R1666 += 1, R1622 += 1, R1557 += 1, R1558 += 1 };
  s1 -> s1 [0, 69] { R1666 += 1, R1622 += 1, R1558 += 1, R1559 += 1, R1560 += 1 };
  s1 -> s2 [0, 69] { R1666 += 1, R1622 += 1, R1558 += 1, R1560 += 1, R1561 += 1 };
  s1 -> s6 [70, 70] { R1666 += 1, R1622 += 1, R1558 += 1, R1559 += 1, R1560 += 1 };
  s1 -> s7 [70, 70] { R1666 += 1, R1622 += 1, R1558 += 1, R1560 += 1, R1561 += 1 };
  s1 -> s8 [70, 70] { R1666 += 1, R1622 += 1, R1558 += 1, R1559 += 1, R1560 += 1 };
  s1 -> s10 [70, 70] { R1666 += 1, R1622 += 1, R1558 += 1, R1560 += 1, R1561 += 1 };
  s1 -> s1 [71, 65535] { R1666 += 1, R1622 += 1, R1558 += 1, R1559 += 1, R1560 += 1 };
  s1 -> s2 [71, 65535] { R1666 += 1, R1622 += 1, R1558 += 1, R1560 += 1, R1561 += 1 };
  s2 -> s2 [0, 69] { R1666 += 1, R1622 += 1, R1558 += 1, R1560 += 1, R1561 += 1 };
  s2 -> s2 [0, 65535] { R1666 += 1 };
  s2 -> s11 [0, 65535];
  s2 -> s7 [70, 70] { R1666 += 1, R1622 += 1, R1558 += 1, R1560 += 1, R1561 += 1 };
  s2 -> s10 [70, 70] { R1666 += 1, R1622 += 1, R1558 += 1, R1560 += 1, R1561 += 1 };
  s2 -> s2 [71, 65535] { R1666 += 1, R1622 += 1, R1558 += 1, R1560 += 1, R1561 += 1 };
  s3 -> s1 [0, 69] { R1666 += 1, R1622 += 1, R1558 += 1, R1559 += 1, R1560 += 1 };
  s3 -> s2 [0, 69] { R1666 += 1, R1622 += 1, R1558 += 1, R1560 += 1, R1561 += 1 };
  s3 -> s3 [0, 69] { R1666 += 1, R1622 += 1, R1557 += 1, R1558 += 1 };
  s3 -> s5 [70, 70] { R1666 += 1, R1622 += 1, R1557 += 1, R1558 += 1 };
  s3 -> s6 [70, 70] { R1666 += 1, R1622 += 1, R1558 += 1, R1559 += 1, R1560 += 1 };
  s3 -> s7 [70, 70] { R1666 += 1, R1622 += 1, R1558 += 1, R1560 += 1, R1561 += 1 };
  s3 -> s8 [70, 70] { R1666 += 1, R1622 += 1, R1558 += 1, R1559 += 1, R1560 += 1 };
  s3 -> s9 [70, 70] { R1666 += 1, R1622 += 1, R1557 += 1, R1558 += 1 };
  s3 -> s10 [70, 70] { R1666 += 1, R1622 += 1, R1558 += 1, R1560 += 1, R1561 += 1 };
  s3 -> s1 [71, 65535] { R1666 += 1, R1622 += 1, R1558 += 1, R1559 += 1, R1560 += 1 };
  s3 -> s2 [71, 65535] { R1666 += 1, R1622 += 1, R1558 += 1, R1560 += 1, R1561 += 1 };
  s3 -> s3 [71, 65535] { R1666 += 1, R1622 += 1, R1557 += 1, R1558 += 1 };
  s4 -> s1 [0, 69] { R1666 += 1, R1622 += 1, R1558 += 1, R1559 += 1, R1560 += 1 };
  s4 -> s2 [0, 69] { R1666 += 1, R1622 += 1, R1558 += 1, R1560 += 1, R1561 += 1 };
  s4 -> s3 [0, 69] { R1666 += 1, R1622 += 1, R1557 += 1, R1558 += 1 };
  s4 -> s4 [0, 65535] { R1666 += 1, R1621 += 1, R1622 += 1 };
  s4 -> s5 [70, 70] { R1666 += 1, R1622 += 1, R1557 += 1, R1558 += 1 };
  s4 -> s6 [70, 70] { R1666 += 1, R1622 += 1, R1558 += 1, R1559 += 1, R1560 += 1 };
  s4 -> s7 [70, 70] { R1666 += 1, R1622 += 1, R1558 += 1, R1560 += 1, R1561 += 1 };
  s4 -> s8 [70, 70] { R1666 += 1, R1622 += 1, R1558 += 1, R1559 += 1, R1560 += 1 };
  s4 -> s9 [70, 70] { R1666 += 1, R1622 += 1, R1557 += 1, R1558 += 1 };
  s4 -> s10 [70, 70] { R1666 += 1, R1622 += 1, R1558 += 1, R1560 += 1, R1561 += 1 };
  s4 -> s1 [71, 65535] { R1666 += 1, R1622 += 1, R1558 += 1, R1559 += 1, R1560 += 1 };
  s4 -> s2 [71, 65535] { R1666 += 1, R1622 += 1, R1558 += 1, R1560 += 1, R1561 += 1 };
  s4 -> s3 [71, 65535] { R1666 += 1, R1622 += 1, R1557 += 1, R1558 += 1 };
  s5 -> s5 [0, 65535] { R1666 += 1, R1622 += 1, R1557 += 1, R1558 += 1 };
  s5 -> s6 [0, 65535] { R1666 += 1, R1622 += 1, R1558 += 1, R1559 += 1, R1560 += 1 };
  s5 -> s7 [0, 65535] { R1666 += 1, R1622 += 1, R1558 += 1, R1560 += 1, R1561 += 1 };
  s6 -> s6 [0, 65535] { R1666 += 1, R1622 += 1, R1558 += 1, R1559 += 1, R1560 += 1 };
  s6 -> s7 [0, 65535] { R1666 += 1, R1622 += 1, R1558 += 1, R1560 += 1, R1561 += 1 };
  s7 -> s7 [0, 65535] { R1666 += 1, R1622 += 1, R1558 += 1, R1560 += 1, R1561 += 1 };
  s7 -> s12 [0, 65535] { R1666 += 1 };
  s7 -> s11 [0, 65535];
  s10 -> s11 [0, 65535];
  s10 -> s10 [0, 65535] { R1666 += 1 };
  s11 -> s11 [0, 65535];
  s12 -> s12 [0, 65535] { R1666 += 1 };
  s12 -> s11 [0, 65535];
  accepting s12, s2, s7, s10, s11;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [102, 102];
  accepting s1;
};
};
constraint R3 = R1666 && R23 - R1666 = -1 && R24 = R1666 && R25 - R1666 = -1 && R26 = R1666 && R27 = 0 && R28 = 1 && R29 = 0 && R30 = 1 && R45 + R84 + R83 + -1*R1224 + -1*R1220 - R66 = 0 && R49 + R89 + R87 = 0 && R50 + R90 + R88 + -1*R1224 + -1*R1220 - R66 = 0 && R55 + R96 + R93 + -1*R1226 + -1*R1222 - R68 = 0 && R65 + R1223 + R1219 = 0 && R67 + R1225 + R1221 = 0 && R1607 = 0 && R1608 = 0 && R1613 = 0 && R1614 = 0 && R1619 = 0 && R1620 = 0 && R1621 = 0 && R1622 = 0 && R1623 = 0 && R1624 = R1666 && R1625 = 0 && R1626 = R1666 && R1627 = 0 && R1628 = R1666 && R1629 = 0 && R1630 = R1666 && R1631 = 0 && R1632 = R1666 && R1633 = 0 && R1634 = R1666 && R1635 = 0 && R1636 = R1666 && R1637 = 0 && R1638 = R1666 && R1639 = 0 && R1640 = R1666 && R1641 = 0 && R1642 = R1666 && R1643 = 0 && R1644 = R1666 && R1645 = 0 && R1646 = R1666 && R1647 = 0 && R1648 = R1666 && R1649 = 0 && R1650 = R1666 && R1651 = 0 && R1652 = R1666 && R1653 = 0 && R1654 = R1666 && R1655 = 0 && R1656 = R1666 && R1657 = 0 && R1658 = R1666 && R1659 = 0 && R1660 = R1666 && R1661 = 0 && R1662 = R1666 && R1663 = 0 && R1664 = R1666 && R1665 = 0 && -1 < R2 && R12 < 1 && R15 < 1 && R16 < 1 && R47 + R86 + R85 < 1 && R61 + R102 + R99 < 1 && -1*R1224 + -1*R1220 - R66 < 1 && -1*R1226 + -1*R1222 - R68 < 1 && 0 < R1666 && (R2 != 0 || R20 = 0 || (R1567 = 0 && R1568 = 0)) && (R2 != 0 || R20 = 0 || (R1569 = 0 && R1570 = 0)) && (R2 != 0 || R20 = 0 || (R1571 = 0 && R1572 = 0)) && (R2 != 0 || R20 = 0 || (R1573 = 0 && R1574 = 0)) && (R2 != 0 || R20 = 0 || (R1575 = 0 && R1576 = 0)) && (R2 != 0 || R20 = 0 || (R1577 = 0 && R1578 = 0)) && (R2 != 0 || R20 = 0 || (R1579 = 0 && R1580 = 0)) && (R2 != 0 || R20 = 0 || (R1581 = 0 && R1582 = 0)) && (R2 != 0 || R20 = 0 || (R1583 = 0 && R1584 = 0)) && (R2 != 0 || R20 = 0 || (R1585 = 0 && R1586 = 0)) && (R53 + R94 + R91 != 0 || R54 + R95 + R92 + -1*R1224 + -1*R1220 - R66 = 0 || R66 + R1224 + R1220 < 1) && (R59 + R100 + R97 != 0 || R60 + R101 + R98 + -1*R1224 + -1*R1220 - R66 = 0 || R66 + R1224 + R1220 < 1) && (R66 + R1224 + R1220 != 0 || ((R53 + R94 + R91 != 0 || R54 + R95 + R92 = 0 || R68 + R1226 + R1222 < 1) && (R53 + R94 + R91 = 0 || R68 + R1226 + R1222 < 1))) && (R66 + R1224 + R1220 != 0 || ((R59 + R100 + R97 != 0 || R60 + R101 + R98 = 0 || R68 + R1226 + R1222 < 1) && (R59 + R100 + R97 = 0 || R68 + R1226 + R1222 < 1))) && (R66 + R1224 + R1220 != 0 || ((R73 + R1562 + R1557 != 0 || R74 + R1563 + R1558 = 0 || R68 + R1226 + R1222 < 1) && (R73 + R1562 + R1557 = 0 || R68 + R1226 + R1222 < 1))) && (R68 + R1226 + R1222 != 0 || R77 + R1566 + R1561 = 0 || (R75 + R1564 + R1559 = 0 && R76 + R1565 + R1560 = 0)) && (R73 + R1562 + R1557 != 0 || R66 + R1224 + R1220 + -1*R1563 + -1*R1558 - R74 = 0 || R66 + R1224 + R1220 < 1) && (R75 + R1564 + R1559 != 0 || R68 + R1226 + R1222 + -1*R1565 + -1*R1560 - R76 = 0 || R68 + R1226 + R1222 < 1) && (R1567 != 0 || R2 = R1568 || R2 < 1) && (R1569 != 0 || R2 = R1570 || R2 < 1) && (R1571 != 0 || R2 = R1572 || R2 < 1) && (R1573 != 0 || R2 = R1574 || R2 < 1) && (R1575 != 0 || R2 = R1576 || R2 < 1) && (R1577 != 0 || R2 = R1578 || R2 < 1) && (R1579 != 0 || R2 = R1580 || R2 < 1) && (R1581 != 0 || R2 = R1582 || R2 < 1) && (R1583 != 0 || R2 = R1584 || R2 < 1) && (R1585 != 0 || R2 = R1586 || R2 < 1) && (R21 = 0 || (R1605 = 0 && R1606 = 0)) && (R21 = 0 || (R1609 = 0 && R1610 = 0)) && (R21 = 0 || (R1611 = 0 && R1612 = 0)) && (R21 = 0 || (R1615 = 0 && R1616 = 0)) && (R21 = 0 || (R1617 = 0 && R1618 = 0)) && (R22 = 0 || (R1587 = 0 && R1588 = 0)) && (R22 = 0 || (R1589 = 0 && R1590 = 0)) && (R22 = 0 || (R1591 = 0 && R1592 = 0)) && (R22 = 0 || (R1593 = 0 && R1594 = 0)) && (R22 = 0 || (R1595 = 0 && R1596 = 0)) && (R22 = 0 || (R1597 = 0 && R1598 = 0)) && (R22 = 0 || (R1599 = 0 && R1600 = 0)) && (R22 = 0 || (R1601 = 0 && R1602 = 0)) && (R22 = 0 || (R1603 = 0 && R1604 = 0)) && (R53 + R94 + R91 = 0 || R66 + R1224 + R1220 < 1) && (R59 + R100 + R97 = 0 || R66 + R1224 + R1220 < 1) && (R73 + R1562 + R1557 = 0 || R66 + R1224 + R1220 < 1) && (R75 + R1564 + R1559 = 0 || R68 + R1226 + R1222 < 1) && (R1567 = 0 || R2 < 1) && (R1569 = 0 || R2 < 1) && (R1571 = 0 || R2 < 1) && (R1573 = 0 || R2 < 1) && (R1575 = 0 || R2 < 1) && (R1577 = 0 || R2 < 1) && (R1579 = 0 || R2 < 1) && (R1581 = 0 || R2 < 1) && (R1583 = 0 || R2 < 1) && (R1585 = 0 || R2 < 1);
// End of Parikh automata intersection problem
