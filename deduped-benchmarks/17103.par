// Parikh automata intersection problem, generated by OSTRICH+
counter int R100, R101, R102, R103, R104, R105, R106, R107, R108, R109, R110, R12, R15, R16, R2, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R4, R45, R47, R49, R5, R50, R53, R54, R55, R551, R552, R553, R554, R555, R556, R557, R558, R559, R560, R561, R562, R563, R564, R565, R566, R567, R568, R569, R570, R571, R572, R573, R574, R575, R576, R577, R578, R579, R580, R581, R582, R583, R584, R585, R586, R587, R588, R589, R59, R590, R591, R592, R593, R594, R595, R596, R597, R598, R599, R60, R600, R601, R602, R603, R604, R605, R606, R607, R608, R609, R61, R610, R611, R612, R613, R614, R615, R616, R617, R618, R619, R620, R621, R622, R623, R624, R625, R626, R627, R628, R629, R630, R631, R632, R633, R634, R635, R636, R637, R638, R639, R640, R641, R642, R643, R644, R645, R646, R647, R648, R649, R65, R650, R651, R652, R653, R654, R655, R656, R657, R658, R659, R66, R660, R67, R68, R73, R74, R75, R76, R77, R83, R84, R85, R86, R87, R88, R89, R90, R91, R92, R93, R94, R95, R96, R97, R98, R99;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [70, 70];
  s0 -> s0 [71, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [70, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R15 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 69];
  s0 -> s0 [0, 65535] { R16 += 1 };
  s0 -> s2 [70, 70];
  s0 -> s1 [71, 65535];
  s1 -> s1 [0, 69];
  s1 -> s2 [70, 70];
  s1 -> s1 [71, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R24 += 1 };
  s0 -> s0 [0, 65535] { R23 += 1, R24 += 1 };
  s0 -> s2 [9, 13] { R24 += 1 };
  s0 -> s1 [14, 31] { R24 += 1 };
  s0 -> s2 [32, 32] { R24 += 1 };
  s0 -> s1 [33, 65535] { R24 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R24 += 1 };
  s2 -> s1 [0, 65535] { R24 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R25 += 1, R26 += 1 };
  s1 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R28 += 1 };
  s0 -> s0 [0, 65535] { R27 += 1, R28 += 1 };
  s0 -> s2 [9, 13] { R28 += 1 };
  s0 -> s1 [14, 31] { R28 += 1 };
  s0 -> s2 [32, 32] { R28 += 1 };
  s0 -> s1 [33, 65535] { R28 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R28 += 1 };
  s2 -> s1 [0, 65535] { R28 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R29 += 1, R30 += 1 };
  s1 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R582 += 1, R22 += 1 };
  s0 -> s0 [0, 65535] { R581 += 1, R582 += 1 };
  s1 -> s1 [0, 65535] { R582 += 1, R22 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 69] { R584 += 1 };
  s0 -> s0 [0, 65535] { R583 += 1, R584 += 1 };
  s0 -> s2 [70, 70] { R584 += 1 };
  s0 -> s3 [70, 70] { R584 += 1 };
  s0 -> s1 [76, 65535] { R584 += 1 };
  s1 -> s1 [0, 69] { R584 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R584 += 1 };
  s1 -> s3 [70, 70] { R584 += 1 };
  s1 -> s1 [76, 65535] { R584 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 70] { R584 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [76, 65535] { R584 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 69] { R586 += 1, R45 += 1 };
  s0 -> s0 [0, 65535] { R585 += 1, R586 += 1 };
  s0 -> s2 [70, 70] { R586 += 1, R45 += 1 };
  s0 -> s3 [70, 70] { R586 += 1, R45 += 1 };
  s0 -> s1 [71, 65535] { R586 += 1, R45 += 1 };
  s1 -> s1 [0, 69] { R586 += 1, R45 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R586 += 1, R45 += 1 };
  s1 -> s3 [70, 70] { R586 += 1, R45 += 1 };
  s1 -> s1 [71, 65535] { R586 += 1, R45 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R586 += 1, R45 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 69] { R588 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R587 += 1, R588 += 1 };
  s0 -> s2 [70, 70] { R588 += 1, R47 += 1 };
  s0 -> s3 [70, 70] { R588 += 1, R47 += 1 };
  s0 -> s1 [71, 65535] { R588 += 1, R47 += 1 };
  s1 -> s1 [0, 69] { R588 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R588 += 1, R47 += 1 };
  s1 -> s3 [70, 70] { R588 += 1, R47 += 1 };
  s1 -> s1 [71, 65535] { R588 += 1, R47 += 1 };
  s2 -> s2 [0, 65535] { R588 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 69] { R590 += 1, R49 += 1, R50 += 1 };
  s0 -> s0 [0, 65535] { R589 += 1, R590 += 1 };
  s0 -> s2 [70, 70] { R590 += 1, R49 += 1, R50 += 1 };
  s0 -> s3 [70, 70] { R590 += 1, R49 += 1, R50 += 1 };
  s0 -> s1 [71, 65535] { R590 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 69] { R590 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R590 += 1, R49 += 1, R50 += 1 };
  s1 -> s3 [70, 70] { R590 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [71, 65535] { R590 += 1, R49 += 1, R50 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R590 += 1, R49 += 1, R50 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 69] { R592 += 1, R53 += 1, R54 += 1 };
  s0 -> s0 [0, 65535] { R591 += 1, R592 += 1 };
  s0 -> s2 [70, 70] { R592 += 1, R53 += 1, R54 += 1 };
  s0 -> s3 [70, 70] { R592 += 1, R53 += 1, R54 += 1 };
  s0 -> s1 [71, 65535] { R592 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 69] { R592 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R592 += 1, R53 += 1, R54 += 1 };
  s1 -> s3 [70, 70] { R592 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [71, 65535] { R592 += 1, R53 += 1, R54 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R592 += 1, R53 += 1, R54 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 69] { R594 += 1, R59 += 1, R60 += 1 };
  s0 -> s0 [0, 65535] { R593 += 1, R594 += 1 };
  s0 -> s2 [70, 70] { R594 += 1, R59 += 1, R60 += 1 };
  s0 -> s3 [70, 70] { R594 += 1, R59 += 1, R60 += 1 };
  s0 -> s1 [71, 65535] { R594 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 69] { R594 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R594 += 1, R59 += 1, R60 += 1 };
  s1 -> s3 [70, 70] { R594 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [71, 65535] { R594 += 1, R59 += 1, R60 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R594 += 1, R59 += 1, R60 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 69] { R596 += 1, R65 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R595 += 1, R596 += 1 };
  s0 -> s2 [70, 70] { R596 += 1, R65 += 1, R66 += 1 };
  s0 -> s3 [70, 70] { R596 += 1, R65 += 1, R66 += 1 };
  s0 -> s1 [71, 65535] { R596 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 69] { R596 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R596 += 1, R65 += 1, R66 += 1 };
  s1 -> s3 [70, 70] { R596 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [71, 65535] { R596 += 1, R65 += 1, R66 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R596 += 1, R65 += 1, R66 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 69] { R598 += 1, R73 += 1, R74 += 1 };
  s0 -> s0 [0, 65535] { R597 += 1, R598 += 1 };
  s0 -> s2 [70, 70] { R598 += 1, R73 += 1, R74 += 1 };
  s0 -> s3 [70, 70] { R598 += 1, R73 += 1, R74 += 1 };
  s0 -> s1 [71, 65535] { R598 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 69] { R598 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R598 += 1, R73 += 1, R74 += 1 };
  s1 -> s3 [70, 70] { R598 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [71, 65535] { R598 += 1, R73 += 1, R74 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R598 += 1, R73 += 1, R74 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 69] { R618 += 1 };
  s0 -> s0 [0, 65535] { R617 += 1, R618 += 1 };
  s0 -> s2 [70, 70] { R618 += 1 };
  s0 -> s1 [71, 65535] { R618 += 1 };
  s1 -> s1 [0, 69] { R618 += 1 };
  s1 -> s2 [70, 70] { R618 += 1 };
  s1 -> s1 [71, 65535] { R618 += 1 };
  s2 -> s2 [0, 65535] { R618 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R619 += 1, R620 += 1 };
  s0 -> s1 [0, 65535] { R620 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R620 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 69] { R622 += 1 };
  s0 -> s0 [0, 65535] { R621 += 1, R622 += 1 };
  s0 -> s2 [0, 65535] { R622 += 1, R12 += 1 };
  s0 -> s3 [70, 70] { R622 += 1 };
  s0 -> s1 [71, 65535] { R622 += 1 };
  s1 -> s1 [0, 69] { R622 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [70, 70] { R622 += 1 };
  s1 -> s1 [71, 65535] { R622 += 1 };
  s2 -> s1 [0, 69] { R622 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R622 += 1, R12 += 1 };
  s2 -> s3 [70, 70] { R622 += 1 };
  s2 -> s1 [71, 65535] { R622 += 1 };
  s3 -> s3 [0, 65535] { R622 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 69] { R624 += 1, R562 += 1 };
  s0 -> s0 [0, 65535] { R623 += 1, R624 += 1 };
  s0 -> s2 [0, 65535] { R624 += 1, R561 += 1, R562 += 1 };
  s0 -> s1 [71, 65535] { R624 += 1, R562 += 1 };
  s1 -> s1 [0, 69] { R624 += 1, R562 += 1 };
  s1 -> s1 [0, 65535] { R624 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [71, 65535] { R624 += 1, R562 += 1 };
  s2 -> s1 [0, 69] { R624 += 1, R562 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R624 += 1, R561 += 1, R562 += 1 };
  s2 -> s1 [71, 65535] { R624 += 1, R562 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s0 [0, 65535] { R625 += 1, R626 += 1 };
  s0 -> s1 [0, 65535] { R626 += 1, R563 += 1, R564 += 1 };
  s0 -> s2 [0, 65535] { R626 += 1, R564 += 1, R20 += 1 };
  s1 -> s1 [0, 65535] { R626 += 1, R563 += 1, R564 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R626 += 1, R564 += 1, R20 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R626 += 1 };
  s2 -> s2 [0, 65535] { R626 += 1, R564 += 1, R20 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R626 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 70] { R628 += 1, R566 += 1 };
  s0 -> s2 [0, 65535] { R628 += 1, R565 += 1, R566 += 1 };
  s0 -> s0 [0, 65535] { R627 += 1, R628 += 1 };
  s0 -> s1 [75, 65535] { R628 += 1, R566 += 1 };
  s1 -> s1 [0, 70] { R628 += 1, R566 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R628 += 1 };
  s1 -> s1 [75, 65535] { R628 += 1, R566 += 1 };
  s2 -> s1 [0, 70] { R628 += 1, R566 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R628 += 1, R565 += 1, R566 += 1 };
  s2 -> s1 [75, 65535] { R628 += 1, R566 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s0 [0, 65535] { R629 += 1, R630 += 1 };
  s0 -> s1 [0, 65535] { R630 += 1, R567 += 1, R568 += 1 };
  s0 -> s2 [0, 65535] { R630 += 1, R568 += 1, R84 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R630 += 1, R567 += 1, R568 += 1 };
  s1 -> s2 [0, 65535] { R630 += 1, R568 += 1, R84 += 1 };
  s2 -> s3 [0, 65535] { R630 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R630 += 1, R568 += 1, R84 += 1 };
  s3 -> s3 [0, 65535] { R630 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 74] { R632 += 1, R570 += 1 };
  s0 -> s0 [0, 65535] { R631 += 1, R632 += 1 };
  s0 -> s2 [0, 65535] { R632 += 1, R569 += 1, R570 += 1 };
  s0 -> s3 [0, 65535] { R632 += 1, R570 += 1, R86 += 1 };
  s0 -> s1 [76, 65535] { R632 += 1, R570 += 1 };
  s1 -> s1 [0, 74] { R632 += 1, R570 += 1 };
  s1 -> s1 [0, 65535] { R632 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [76, 65535] { R632 += 1, R570 += 1 };
  s2 -> s1 [0, 74] { R632 += 1, R570 += 1 };
  s2 -> s2 [0, 65535] { R632 += 1, R569 += 1, R570 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R632 += 1, R570 += 1, R86 += 1 };
  s2 -> s1 [76, 65535] { R632 += 1, R570 += 1 };
  s3 -> s1 [0, 74] { R632 += 1, R570 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R632 += 1, R570 += 1, R86 += 1 };
  s3 -> s5 [0, 65535] { R632 += 1 };
  s3 -> s1 [76, 65535] { R632 += 1, R570 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R632 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s0 [0, 65535] { R633 += 1, R634 += 1 };
  s0 -> s1 [0, 65535] { R634 += 1, R572 += 1, R90 += 1 };
  s0 -> s2 [0, 65535] { R634 += 1, R571 += 1, R572 += 1 };
  s0 -> s3 [0, 65535] { R634 += 1, R572 += 1 };
  s1 -> s4 [0, 65535] { R634 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R634 += 1, R572 += 1, R90 += 1 };
  s1 -> s3 [0, 65535] { R634 += 1, R572 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R634 += 1, R572 += 1, R90 += 1 };
  s2 -> s2 [0, 65535] { R634 += 1, R571 += 1, R572 += 1 };
  s2 -> s3 [0, 65535] { R634 += 1, R572 += 1 };
  s3 -> s4 [0, 65535] { R634 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R634 += 1, R572 += 1 };
  s4 -> s4 [0, 65535] { R634 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R636 += 1, R573 += 1, R574 += 1 };
  s0 -> s0 [0, 65535] { R635 += 1, R636 += 1 };
  s0 -> s2 [0, 65535] { R636 += 1, R574 += 1, R95 += 1, R96 += 1 };
  s0 -> s3 [0, 65535] { R636 += 1, R574 += 1, R94 += 1, R95 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R636 += 1, R573 += 1, R574 += 1 };
  s1 -> s2 [0, 65535] { R636 += 1, R574 += 1, R95 += 1, R96 += 1 };
  s1 -> s3 [0, 65535] { R636 += 1, R574 += 1, R94 += 1, R95 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R636 += 1 };
  s2 -> s6 [0, 65535] { R636 += 1, R574 += 1 };
  s2 -> s2 [0, 65535] { R636 += 1, R574 += 1, R95 += 1, R96 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R636 += 1 };
  s3 -> s2 [0, 65535] { R636 += 1, R574 += 1, R95 += 1, R96 += 1 };
  s3 -> s3 [0, 65535] { R636 += 1, R574 += 1, R94 += 1, R95 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R636 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R636 += 1 };
  s6 -> s6 [0, 65535] { R636 += 1, R574 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 74] { R638 += 1, R576 += 1, R101 += 1 };
  s0 -> s0 [0, 65535] { R637 += 1, R638 += 1 };
  s0 -> s2 [0, 65535] { R638 += 1, R575 += 1, R576 += 1 };
  s0 -> s3 [0, 65535] { R638 += 1, R576 += 1, R101 += 1, R102 += 1 };
  s0 -> s4 [0, 65535] { R638 += 1, R576 += 1, R100 += 1, R101 += 1 };
  s0 -> s1 [76, 65535] { R638 += 1, R576 += 1, R101 += 1 };
  s1 -> s1 [0, 74] { R638 += 1, R576 += 1, R101 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R638 += 1, R576 += 1 };
  s1 -> s6 [0, 65535] { R638 += 1 };
  s1 -> s1 [76, 65535] { R638 += 1, R576 += 1, R101 += 1 };
  s2 -> s1 [0, 74] { R638 += 1, R576 += 1, R101 += 1 };
  s2 -> s2 [0, 65535] { R638 += 1, R575 += 1, R576 += 1 };
  s2 -> s3 [0, 65535] { R638 += 1, R576 += 1, R101 += 1, R102 += 1 };
  s2 -> s4 [0, 65535] { R638 += 1, R576 += 1, R100 += 1, R101 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [76, 65535] { R638 += 1, R576 += 1, R101 += 1 };
  s3 -> s1 [0, 74] { R638 += 1, R576 += 1, R101 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s7 [0, 65535] { R638 += 1, R576 += 1 };
  s3 -> s3 [0, 65535] { R638 += 1, R576 += 1, R101 += 1, R102 += 1 };
  s3 -> s6 [0, 65535] { R638 += 1 };
  s3 -> s1 [76, 65535] { R638 += 1, R576 += 1, R101 += 1 };
  s4 -> s1 [0, 74] { R638 += 1, R576 += 1, R101 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s3 [0, 65535] { R638 += 1, R576 += 1, R101 += 1, R102 += 1 };
  s4 -> s4 [0, 65535] { R638 += 1, R576 += 1, R100 += 1, R101 += 1 };
  s4 -> s6 [0, 65535] { R638 += 1 };
  s4 -> s1 [76, 65535] { R638 += 1, R576 += 1, R101 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R638 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R638 += 1, R576 += 1 };
  s7 -> s6 [0, 65535] { R638 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R640 += 1, R578 += 1 };
  s0 -> s2 [0, 65535] { R640 += 1, R577 += 1, R578 += 1 };
  s0 -> s3 [0, 65535] { R640 += 1, R578 += 1, R108 += 1, R110 += 1 };
  s0 -> s0 [0, 65535] { R639 += 1, R640 += 1 };
  s0 -> s4 [0, 65535] { R640 += 1, R578 += 1, R108 += 1 };
  s1 -> s1 [0, 65535] { R640 += 1, R578 += 1 };
  s1 -> s5 [0, 65535] { R640 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s1 [0, 65535] { R640 += 1, R578 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R640 += 1, R577 += 1, R578 += 1 };
  s2 -> s3 [0, 65535] { R640 += 1, R578 += 1, R108 += 1, R110 += 1 };
  s2 -> s4 [0, 65535] { R640 += 1, R578 += 1, R108 += 1 };
  s3 -> s1 [0, 65535] { R640 += 1, R578 += 1 };
  s3 -> s5 [0, 65535] { R640 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R640 += 1, R578 += 1, R108 += 1, R110 += 1 };
  s3 -> s4 [0, 65535] { R640 += 1, R578 += 1, R108 += 1 };
  s4 -> s1 [0, 65535] { R640 += 1, R578 += 1 };
  s4 -> s5 [0, 65535] { R640 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R640 += 1, R578 += 1, R108 += 1 };
  s5 -> s5 [0, 65535] { R640 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 65535] { R642 += 1, R580 += 1, R557 += 1, R559 += 1, R560 += 1 };
  s0 -> s2 [0, 65535] { R642 += 1, R579 += 1, R580 += 1 };
  s0 -> s0 [0, 65535] { R641 += 1, R642 += 1 };
  s0 -> s3 [0, 65535] { R642 += 1, R580 += 1, R557 += 1, R558 += 1, R559 += 1 };
  s0 -> s4 [0, 65535] { R642 += 1, R580 += 1 };
  s1 -> s1 [0, 65535] { R642 += 1, R580 += 1, R557 += 1, R559 += 1, R560 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R642 += 1 };
  s1 -> s7 [0, 65535] { R642 += 1, R580 += 1, R557 += 1 };
  s1 -> s4 [0, 65535] { R642 += 1, R580 += 1 };
  s2 -> s1 [0, 65535] { R642 += 1, R580 += 1, R557 += 1, R559 += 1, R560 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R642 += 1, R579 += 1, R580 += 1 };
  s2 -> s3 [0, 65535] { R642 += 1, R580 += 1, R557 += 1, R558 += 1, R559 += 1 };
  s2 -> s4 [0, 65535] { R642 += 1, R580 += 1 };
  s3 -> s1 [0, 65535] { R642 += 1, R580 += 1, R557 += 1, R559 += 1, R560 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R642 += 1 };
  s3 -> s3 [0, 65535] { R642 += 1, R580 += 1, R557 += 1, R558 += 1, R559 += 1 };
  s3 -> s4 [0, 65535] { R642 += 1, R580 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R642 += 1 };
  s4 -> s4 [0, 65535] { R642 += 1, R580 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R642 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R642 += 1 };
  s7 -> s7 [0, 65535] { R642 += 1, R580 += 1, R557 += 1 };
  s7 -> s4 [0, 65535] { R642 += 1, R580 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s0 [0, 65535] { R643 += 1, R644 += 1 };
  s0 -> s1 [0, 65535] { R644 += 1, R599 += 1, R600 += 1 };
  s0 -> s2 [0, 65535] { R644 += 1, R600 += 1, R21 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R644 += 1, R599 += 1, R600 += 1 };
  s1 -> s2 [0, 65535] { R644 += 1, R600 += 1, R21 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R644 += 1, R600 += 1, R21 += 1 };
  s2 -> s4 [0, 65535] { R644 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R644 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 69] { R646 += 1, R602 += 1 };
  s0 -> s0 [0, 65535] { R645 += 1, R646 += 1 };
  s0 -> s2 [0, 65535] { R646 += 1, R601 += 1, R602 += 1 };
  s0 -> s3 [70, 70] { R646 += 1, R602 += 1 };
  s0 -> s4 [70, 70] { R646 += 1, R602 += 1 };
  s0 -> s5 [75, 75] { R646 += 1, R602 += 1 };
  s0 -> s1 [76, 65535] { R646 += 1, R602 += 1 };
  s1 -> s1 [0, 69] { R646 += 1, R602 += 1 };
  s1 -> s3 [70, 70] { R646 += 1, R602 += 1 };
  s1 -> s4 [70, 70] { R646 += 1, R602 += 1 };
  s1 -> s5 [75, 75] { R646 += 1, R602 += 1 };
  s1 -> s1 [76, 65535] { R646 += 1, R602 += 1 };
  s2 -> s1 [0, 69] { R646 += 1, R602 += 1 };
  s2 -> s2 [0, 65535] { R646 += 1, R601 += 1, R602 += 1 };
  s2 -> s3 [70, 70] { R646 += 1, R602 += 1 };
  s2 -> s4 [70, 70] { R646 += 1, R602 += 1 };
  s2 -> s5 [75, 75] { R646 += 1, R602 += 1 };
  s2 -> s1 [76, 65535] { R646 += 1, R602 += 1 };
  s3 -> s3 [0, 70] { R646 += 1, R602 += 1 };
  s3 -> s7 [75, 75] { R646 += 1, R602 += 1 };
  s3 -> s3 [76, 65535] { R646 += 1, R602 += 1 };
  s5 -> s5 [0, 69] { R646 += 1, R602 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R646 += 1 };
  s5 -> s7 [70, 70] { R646 += 1, R602 += 1 };
  s5 -> s8 [70, 70] { R646 += 1, R602 += 1 };
  s5 -> s5 [75, 65535] { R646 += 1, R602 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 70] { R646 += 1, R602 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R646 += 1 };
  s7 -> s7 [75, 65535] { R646 += 1, R602 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R646 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 69] { R648 += 1, R604 += 1, R83 += 1 };
  s0 -> s2 [0, 65535] { R648 += 1, R603 += 1, R604 += 1 };
  s0 -> s0 [0, 65535] { R647 += 1, R648 += 1 };
  s0 -> s3 [70, 70] { R648 += 1, R604 += 1, R83 += 1 };
  s0 -> s4 [70, 70] { R648 += 1, R604 += 1, R83 += 1 };
  s0 -> s1 [71, 65535] { R648 += 1, R604 += 1, R83 += 1 };
  s1 -> s1 [0, 69] { R648 += 1, R604 += 1, R83 += 1 };
  s1 -> s1 [0, 65535] { R648 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [70, 70] { R648 += 1, R604 += 1, R83 += 1 };
  s1 -> s4 [70, 70] { R648 += 1, R604 += 1, R83 += 1 };
  s1 -> s1 [71, 65535] { R648 += 1, R604 += 1, R83 += 1 };
  s2 -> s1 [0, 69] { R648 += 1, R604 += 1, R83 += 1 };
  s2 -> s2 [0, 65535] { R648 += 1, R603 += 1, R604 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [70, 70] { R648 += 1, R604 += 1, R83 += 1 };
  s2 -> s4 [70, 70] { R648 += 1, R604 += 1, R83 += 1 };
  s2 -> s1 [71, 65535] { R648 += 1, R604 += 1, R83 += 1 };
  s3 -> s3 [0, 65535] { R648 += 1, R604 += 1, R83 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R648 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R648 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R648 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 69] { R650 += 1, R606 += 1, R85 += 1 };
  s0 -> s0 [0, 65535] { R649 += 1, R650 += 1 };
  s0 -> s2 [0, 65535] { R650 += 1, R605 += 1, R606 += 1 };
  s0 -> s3 [70, 70] { R650 += 1, R606 += 1, R85 += 1 };
  s0 -> s4 [70, 70] { R650 += 1, R606 += 1, R85 += 1 };
  s0 -> s1 [71, 65535] { R650 += 1, R606 += 1, R85 += 1 };
  s1 -> s1 [0, 69] { R650 += 1, R606 += 1, R85 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R650 += 1 };
  s1 -> s3 [70, 70] { R650 += 1, R606 += 1, R85 += 1 };
  s1 -> s4 [70, 70] { R650 += 1, R606 += 1, R85 += 1 };
  s1 -> s1 [71, 65535] { R650 += 1, R606 += 1, R85 += 1 };
  s2 -> s1 [0, 69] { R650 += 1, R606 += 1, R85 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R650 += 1, R605 += 1, R606 += 1 };
  s2 -> s3 [70, 70] { R650 += 1, R606 += 1, R85 += 1 };
  s2 -> s4 [70, 70] { R650 += 1, R606 += 1, R85 += 1 };
  s2 -> s1 [71, 65535] { R650 += 1, R606 += 1, R85 += 1 };
  s3 -> s3 [0, 65535] { R650 += 1, R606 += 1, R85 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R650 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R650 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R650 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 69] { R652 += 1, R608 += 1, R87 += 1, R88 += 1 };
  s0 -> s2 [0, 69] { R652 += 1, R608 += 1, R88 += 1 };
  s0 -> s3 [0, 65535] { R652 += 1, R607 += 1, R608 += 1 };
  s0 -> s0 [0, 65535] { R651 += 1, R652 += 1 };
  s0 -> s4 [70, 70] { R652 += 1, R608 += 1, R88 += 1 };
  s0 -> s5 [70, 70] { R652 += 1, R608 += 1, R87 += 1, R88 += 1 };
  s0 -> s6 [70, 70] { R652 += 1, R608 += 1, R87 += 1, R88 += 1 };
  s0 -> s7 [70, 70] { R652 += 1, R608 += 1, R88 += 1 };
  s0 -> s2 [71, 74] { R652 += 1, R608 += 1, R88 += 1 };
  s0 -> s1 [71, 65535] { R652 += 1, R608 += 1, R87 += 1, R88 += 1 };
  s0 -> s8 [75, 75] { R652 += 1, R608 += 1, R88 += 1 };
  s0 -> s2 [76, 65535] { R652 += 1, R608 += 1, R88 += 1 };
  s1 -> s1 [0, 69] { R652 += 1, R608 += 1, R87 += 1, R88 += 1 };
  s1 -> s2 [0, 69] { R652 += 1, R608 += 1, R88 += 1 };
  s1 -> s4 [70, 70] { R652 += 1, R608 += 1, R88 += 1 };
  s1 -> s5 [70, 70] { R652 += 1, R608 += 1, R87 += 1, R88 += 1 };
  s1 -> s6 [70, 70] { R652 += 1, R608 += 1, R87 += 1, R88 += 1 };
  s1 -> s7 [70, 70] { R652 += 1, R608 += 1, R88 += 1 };
  s1 -> s2 [71, 74] { R652 += 1, R608 += 1, R88 += 1 };
  s1 -> s1 [71, 65535] { R652 += 1, R608 += 1, R87 += 1, R88 += 1 };
  s1 -> s8 [75, 75] { R652 += 1, R608 += 1, R88 += 1 };
  s1 -> s2 [76, 65535] { R652 += 1, R608 += 1, R88 += 1 };
  s2 -> s2 [0, 69] { R652 += 1, R608 += 1, R88 += 1 };
  s2 -> s4 [70, 70] { R652 += 1, R608 += 1, R88 += 1 };
  s2 -> s7 [70, 70] { R652 += 1, R608 += 1, R88 += 1 };
  s2 -> s2 [71, 74] { R652 += 1, R608 += 1, R88 += 1 };
  s2 -> s8 [75, 75] { R652 += 1, R608 += 1, R88 += 1 };
  s2 -> s2 [76, 65535] { R652 += 1, R608 += 1, R88 += 1 };
  s3 -> s1 [0, 69] { R652 += 1, R608 += 1, R87 += 1, R88 += 1 };
  s3 -> s2 [0, 69] { R652 += 1, R608 += 1, R88 += 1 };
  s3 -> s3 [0, 65535] { R652 += 1, R607 += 1, R608 += 1 };
  s3 -> s4 [70, 70] { R652 += 1, R608 += 1, R88 += 1 };
  s3 -> s5 [70, 70] { R652 += 1, R608 += 1, R87 += 1, R88 += 1 };
  s3 -> s6 [70, 70] { R652 += 1, R608 += 1, R87 += 1, R88 += 1 };
  s3 -> s7 [70, 70] { R652 += 1, R608 += 1, R88 += 1 };
  s3 -> s2 [71, 74] { R652 += 1, R608 += 1, R88 += 1 };
  s3 -> s1 [71, 65535] { R652 += 1, R608 += 1, R87 += 1, R88 += 1 };
  s3 -> s8 [75, 75] { R652 += 1, R608 += 1, R88 += 1 };
  s3 -> s2 [76, 65535] { R652 += 1, R608 += 1, R88 += 1 };
  s4 -> s4 [0, 74] { R652 += 1, R608 += 1, R88 += 1 };
  s4 -> s10 [75, 75] { R652 += 1, R608 += 1, R88 += 1 };
  s4 -> s4 [76, 65535] { R652 += 1, R608 += 1, R88 += 1 };
  s5 -> s4 [0, 74] { R652 += 1, R608 += 1, R88 += 1 };
  s5 -> s5 [0, 65535] { R652 += 1, R608 += 1, R87 += 1, R88 += 1 };
  s5 -> s10 [75, 75] { R652 += 1, R608 += 1, R88 += 1 };
  s5 -> s4 [76, 65535] { R652 += 1, R608 += 1, R88 += 1 };
  s8 -> s8 [0, 69] { R652 += 1, R608 += 1, R88 += 1 };
  s8 -> s8 [0, 65535] { R652 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [70, 70] { R652 += 1, R608 += 1, R88 += 1 };
  s8 -> s11 [70, 70] { R652 += 1, R608 += 1, R88 += 1 };
  s8 -> s8 [71, 65535] { R652 += 1, R608 += 1, R88 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R652 += 1, R608 += 1, R88 += 1 };
  s10 -> s12 [0, 65535] { R652 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R652 += 1 };
  s12 -> s12 [0, 65535] { R652 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 69] { R654 += 1, R610 += 1, R91 += 1, R92 += 1 };
  s0 -> s2 [0, 65535] { R654 += 1, R609 += 1, R610 += 1 };
  s0 -> s0 [0, 65535] { R653 += 1, R654 += 1 };
  s0 -> s3 [70, 70] { R654 += 1, R610 += 1, R91 += 1, R92 += 1 };
  s0 -> s4 [70, 70] { R654 += 1, R610 += 1, R91 += 1, R92 += 1 };
  s0 -> s1 [71, 65535] { R654 += 1, R610 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 69] { R654 += 1, R610 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 65535] { R654 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [70, 70] { R654 += 1, R610 += 1, R91 += 1, R92 += 1 };
  s1 -> s4 [70, 70] { R654 += 1, R610 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [71, 65535] { R654 += 1, R610 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [0, 69] { R654 += 1, R610 += 1, R91 += 1, R92 += 1 };
  s2 -> s2 [0, 65535] { R654 += 1, R609 += 1, R610 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [70, 70] { R654 += 1, R610 += 1, R91 += 1, R92 += 1 };
  s2 -> s4 [70, 70] { R654 += 1, R610 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [71, 65535] { R654 += 1, R610 += 1, R91 += 1, R92 += 1 };
  s3 -> s3 [0, 65535] { R654 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R654 += 1 };
  s4 -> s4 [0, 65535] { R654 += 1, R610 += 1, R91 += 1, R92 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R654 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 69] { R656 += 1, R612 += 1, R97 += 1, R98 += 1 };
  s0 -> s2 [0, 65535] { R656 += 1, R611 += 1, R612 += 1 };
  s0 -> s0 [0, 65535] { R655 += 1, R656 += 1 };
  s0 -> s3 [70, 70] { R656 += 1, R612 += 1, R97 += 1, R98 += 1 };
  s0 -> s4 [70, 70] { R656 += 1, R612 += 1, R97 += 1, R98 += 1 };
  s0 -> s1 [71, 65535] { R656 += 1, R612 += 1, R97 += 1, R98 += 1 };
  s1 -> s1 [0, 69] { R656 += 1, R612 += 1, R97 += 1, R98 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R656 += 1 };
  s1 -> s3 [70, 70] { R656 += 1, R612 += 1, R97 += 1, R98 += 1 };
  s1 -> s4 [70, 70] { R656 += 1, R612 += 1, R97 += 1, R98 += 1 };
  s1 -> s1 [71, 65535] { R656 += 1, R612 += 1, R97 += 1, R98 += 1 };
  s2 -> s1 [0, 69] { R656 += 1, R612 += 1, R97 += 1, R98 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R656 += 1, R611 += 1, R612 += 1 };
  s2 -> s3 [70, 70] { R656 += 1, R612 += 1, R97 += 1, R98 += 1 };
  s2 -> s4 [70, 70] { R656 += 1, R612 += 1, R97 += 1, R98 += 1 };
  s2 -> s1 [71, 65535] { R656 += 1, R612 += 1, R97 += 1, R98 += 1 };
  s3 -> s6 [0, 65535] { R656 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R656 += 1, R612 += 1, R97 += 1, R98 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R656 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R656 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 69] { R658 += 1, R614 += 1, R104 += 1, R106 += 1 };
  s0 -> s2 [0, 69] { R658 += 1, R614 += 1, R104 += 1, R105 += 1, R106 += 1 };
  s0 -> s3 [0, 69] { R658 += 1, R614 += 1, R103 += 1, R104 += 1 };
  s0 -> s0 [0, 65535] { R657 += 1, R658 += 1 };
  s0 -> s4 [0, 65535] { R658 += 1, R613 += 1, R614 += 1 };
  s0 -> s5 [70, 70] { R658 += 1, R614 += 1, R104 += 1, R106 += 1 };
  s0 -> s6 [70, 70] { R658 += 1, R614 += 1, R104 += 1, R105 += 1, R106 += 1 };
  s0 -> s7 [70, 70] { R658 += 1, R614 += 1, R103 += 1, R104 += 1 };
  s0 -> s8 [70, 70] { R658 += 1, R614 += 1, R103 += 1, R104 += 1 };
  s0 -> s9 [70, 70] { R658 += 1, R614 += 1, R104 += 1, R105 += 1, R106 += 1 };
  s0 -> s10 [70, 70] { R658 += 1, R614 += 1, R104 += 1, R106 += 1 };
  s0 -> s1 [71, 74] { R658 += 1, R614 += 1, R104 += 1, R106 += 1 };
  s0 -> s2 [71, 65535] { R658 += 1, R614 += 1, R104 += 1, R105 += 1, R106 += 1 };
  s0 -> s3 [71, 65535] { R658 += 1, R614 += 1, R103 += 1, R104 += 1 };
  s0 -> s11 [75, 75] { R658 += 1, R614 += 1, R104 += 1, R106 += 1 };
  s0 -> s1 [76, 65535] { R658 += 1, R614 += 1, R104 += 1, R106 += 1 };
  s1 -> s1 [0, 69] { R658 += 1, R614 += 1, R104 += 1, R106 += 1 };
  s1 -> s5 [70, 70] { R658 += 1, R614 += 1, R104 += 1, R106 += 1 };
  s1 -> s10 [70, 70] { R658 += 1, R614 += 1, R104 += 1, R106 += 1 };
  s1 -> s1 [71, 74] { R658 += 1, R614 += 1, R104 += 1, R106 += 1 };
  s1 -> s11 [75, 75] { R658 += 1, R614 += 1, R104 += 1, R106 += 1 };
  s1 -> s1 [76, 65535] { R658 += 1, R614 += 1, R104 += 1, R106 += 1 };
  s2 -> s1 [0, 69] { R658 += 1, R614 += 1, R104 += 1, R106 += 1 };
  s2 -> s2 [0, 69] { R658 += 1, R614 += 1, R104 += 1, R105 += 1, R106 += 1 };
  s2 -> s5 [70, 70] { R658 += 1, R614 += 1, R104 += 1, R106 += 1 };
  s2 -> s6 [70, 70] { R658 += 1, R614 += 1, R104 += 1, R105 += 1, R106 += 1 };
  s2 -> s9 [70, 70] { R658 += 1, R614 += 1, R104 += 1, R105 += 1, R106 += 1 };
  s2 -> s10 [70, 70] { R658 += 1, R614 += 1, R104 += 1, R106 += 1 };
  s2 -> s1 [71, 74] { R658 += 1, R614 += 1, R104 += 1, R106 += 1 };
  s2 -> s2 [71, 65535] { R658 += 1, R614 += 1, R104 += 1, R105 += 1, R106 += 1 };
  s2 -> s11 [75, 75] { R658 += 1, R614 += 1, R104 += 1, R106 += 1 };
  s2 -> s1 [76, 65535] { R658 += 1, R614 += 1, R104 += 1, R106 += 1 };
  s3 -> s1 [0, 69] { R658 += 1, R614 += 1, R104 += 1, R106 += 1 };
  s3 -> s2 [0, 69] { R658 += 1, R614 += 1, R104 += 1, R105 += 1, R106 += 1 };
  s3 -> s3 [0, 69] { R658 += 1, R614 += 1, R103 += 1, R104 += 1 };
  s3 -> s5 [70, 70] { R658 += 1, R614 += 1, R104 += 1, R106 += 1 };
  s3 -> s6 [70, 70] { R658 += 1, R614 += 1, R104 += 1, R105 += 1, R106 += 1 };
  s3 -> s7 [70, 70] { R658 += 1, R614 += 1, R103 += 1, R104 += 1 };
  s3 -> s8 [70, 70] { R658 += 1, R614 += 1, R103 += 1, R104 += 1 };
  s3 -> s9 [70, 70] { R658 += 1, R614 += 1, R104 += 1, R105 += 1, R106 += 1 };
  s3 -> s10 [70, 70] { R658 += 1, R614 += 1, R104 += 1, R106 += 1 };
  s3 -> s1 [71, 74] { R658 += 1, R614 += 1, R104 += 1, R106 += 1 };
  s3 -> s2 [71, 65535] { R658 += 1, R614 += 1, R104 += 1, R105 += 1, R106 += 1 };
  s3 -> s3 [71, 65535] { R658 += 1, R614 += 1, R103 += 1, R104 += 1 };
  s3 -> s11 [75, 75] { R658 += 1, R614 += 1, R104 += 1, R106 += 1 };
  s3 -> s1 [76, 65535] { R658 += 1, R614 += 1, R104 += 1, R106 += 1 };
  s4 -> s1 [0, 69] { R658 += 1, R614 += 1, R104 += 1, R106 += 1 };
  s4 -> s2 [0, 69] { R658 += 1, R614 += 1, R104 += 1, R105 += 1, R106 += 1 };
  s4 -> s3 [0, 69] { R658 += 1, R614 += 1, R103 += 1, R104 += 1 };
  s4 -> s4 [0, 65535] { R658 += 1, R613 += 1, R614 += 1 };
  s4 -> s5 [70, 70] { R658 += 1, R614 += 1, R104 += 1, R106 += 1 };
  s4 -> s6 [70, 70] { R658 += 1, R614 += 1, R104 += 1, R105 += 1, R106 += 1 };
  s4 -> s7 [70, 70] { R658 += 1, R614 += 1, R103 += 1, R104 += 1 };
  s4 -> s8 [70, 70] { R658 += 1, R614 += 1, R103 += 1, R104 += 1 };
  s4 -> s9 [70, 70] { R658 += 1, R614 += 1, R104 += 1, R105 += 1, R106 += 1 };
  s4 -> s10 [70, 70] { R658 += 1, R614 += 1, R104 += 1, R106 += 1 };
  s4 -> s1 [71, 74] { R658 += 1, R614 += 1, R104 += 1, R106 += 1 };
  s4 -> s2 [71, 65535] { R658 += 1, R614 += 1, R104 += 1, R105 += 1, R106 += 1 };
  s4 -> s3 [71, 65535] { R658 += 1, R614 += 1, R103 += 1, R104 += 1 };
  s4 -> s11 [75, 75] { R658 += 1, R614 += 1, R104 += 1, R106 += 1 };
  s4 -> s1 [76, 65535] { R658 += 1, R614 += 1, R104 += 1, R106 += 1 };
  s5 -> s5 [0, 74] { R658 += 1, R614 += 1, R104 += 1, R106 += 1 };
  s5 -> s13 [75, 75] { R658 += 1, R614 += 1, R104 += 1, R106 += 1 };
  s5 -> s5 [76, 65535] { R658 += 1, R614 += 1, R104 += 1, R106 += 1 };
  s8 -> s5 [0, 74] { R658 += 1, R614 += 1, R104 += 1, R106 += 1 };
  s8 -> s8 [0, 65535] { R658 += 1, R614 += 1, R103 += 1, R104 += 1 };
  s8 -> s9 [0, 65535] { R658 += 1, R614 += 1, R104 += 1, R105 += 1, R106 += 1 };
  s8 -> s13 [75, 75] { R658 += 1, R614 += 1, R104 += 1, R106 += 1 };
  s8 -> s5 [76, 65535] { R658 += 1, R614 += 1, R104 += 1, R106 += 1 };
  s9 -> s5 [0, 74] { R658 += 1, R614 += 1, R104 += 1, R106 += 1 };
  s9 -> s9 [0, 65535] { R658 += 1, R614 += 1, R104 += 1, R105 += 1, R106 += 1 };
  s9 -> s13 [75, 75] { R658 += 1, R614 += 1, R104 += 1, R106 += 1 };
  s9 -> s5 [76, 65535] { R658 += 1, R614 += 1, R104 += 1, R106 += 1 };
  s11 -> s11 [0, 69] { R658 += 1, R614 += 1, R104 += 1, R106 += 1 };
  s11 -> s11 [0, 65535] { R658 += 1 };
  s11 -> s12 [0, 65535];
  s11 -> s13 [70, 70] { R658 += 1, R614 += 1, R104 += 1, R106 += 1 };
  s11 -> s14 [70, 70] { R658 += 1, R614 += 1, R104 += 1, R106 += 1 };
  s11 -> s11 [71, 65535] { R658 += 1, R614 += 1, R104 += 1, R106 += 1 };
  s12 -> s12 [0, 65535];
  s13 -> s13 [0, 65535] { R658 += 1, R614 += 1, R104 += 1, R106 += 1 };
  s13 -> s15 [0, 65535] { R658 += 1 };
  s13 -> s12 [0, 65535];
  s14 -> s14 [0, 65535] { R658 += 1 };
  s14 -> s12 [0, 65535];
  s15 -> s15 [0, 65535] { R658 += 1 };
  s15 -> s12 [0, 65535];
  accepting s12, s13, s14, s15, s11;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 69] { R660 += 1, R616 += 1, R551 += 1, R552 += 1 };
  s0 -> s2 [0, 69] { R660 += 1, R616 += 1, R552 += 1, R553 += 1, R554 += 1 };
  s0 -> s3 [0, 65535] { R660 += 1, R615 += 1, R616 += 1 };
  s0 -> s0 [0, 65535] { R659 += 1, R660 += 1 };
  s0 -> s4 [70, 70] { R660 += 1, R616 += 1, R551 += 1, R552 += 1 };
  s0 -> s5 [70, 70] { R660 += 1, R616 += 1, R552 += 1, R553 += 1, R554 += 1 };
  s0 -> s6 [70, 70] { R660 += 1, R616 += 1, R551 += 1, R552 += 1 };
  s0 -> s7 [70, 70] { R660 += 1, R616 += 1, R552 += 1, R553 += 1, R554 += 1 };
  s0 -> s1 [71, 65535] { R660 += 1, R616 += 1, R551 += 1, R552 += 1 };
  s0 -> s2 [71, 65535] { R660 += 1, R616 += 1, R552 += 1, R553 += 1, R554 += 1 };
  s1 -> s1 [0, 69] { R660 += 1, R616 += 1, R551 += 1, R552 += 1 };
  s1 -> s2 [0, 69] { R660 += 1, R616 += 1, R552 += 1, R553 += 1, R554 += 1 };
  s1 -> s4 [70, 70] { R660 += 1, R616 += 1, R551 += 1, R552 += 1 };
  s1 -> s5 [70, 70] { R660 += 1, R616 += 1, R552 += 1, R553 += 1, R554 += 1 };
  s1 -> s6 [70, 70] { R660 += 1, R616 += 1, R551 += 1, R552 += 1 };
  s1 -> s7 [70, 70] { R660 += 1, R616 += 1, R552 += 1, R553 += 1, R554 += 1 };
  s1 -> s1 [71, 65535] { R660 += 1, R616 += 1, R551 += 1, R552 += 1 };
  s1 -> s2 [71, 65535] { R660 += 1, R616 += 1, R552 += 1, R553 += 1, R554 += 1 };
  s2 -> s2 [0, 69] { R660 += 1, R616 += 1, R552 += 1, R553 += 1, R554 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R660 += 1 };
  s2 -> s5 [70, 70] { R660 += 1, R616 += 1, R552 += 1, R553 += 1, R554 += 1 };
  s2 -> s7 [70, 70] { R660 += 1, R616 += 1, R552 += 1, R553 += 1, R554 += 1 };
  s2 -> s2 [71, 65535] { R660 += 1, R616 += 1, R552 += 1, R553 += 1, R554 += 1 };
  s3 -> s1 [0, 69] { R660 += 1, R616 += 1, R551 += 1, R552 += 1 };
  s3 -> s2 [0, 69] { R660 += 1, R616 += 1, R552 += 1, R553 += 1, R554 += 1 };
  s3 -> s3 [0, 65535] { R660 += 1, R615 += 1, R616 += 1 };
  s3 -> s4 [70, 70] { R660 += 1, R616 += 1, R551 += 1, R552 += 1 };
  s3 -> s5 [70, 70] { R660 += 1, R616 += 1, R552 += 1, R553 += 1, R554 += 1 };
  s3 -> s6 [70, 70] { R660 += 1, R616 += 1, R551 += 1, R552 += 1 };
  s3 -> s7 [70, 70] { R660 += 1, R616 += 1, R552 += 1, R553 += 1, R554 += 1 };
  s3 -> s1 [71, 65535] { R660 += 1, R616 += 1, R551 += 1, R552 += 1 };
  s3 -> s2 [71, 65535] { R660 += 1, R616 += 1, R552 += 1, R553 += 1, R554 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s5 [0, 65535] { R660 += 1, R616 += 1, R552 += 1, R553 += 1, R554 += 1 };
  s5 -> s9 [0, 65535] { R660 += 1 };
  s6 -> s5 [0, 65535] { R660 += 1, R616 += 1, R552 += 1, R553 += 1, R554 += 1 };
  s6 -> s6 [0, 65535] { R660 += 1, R616 += 1, R551 += 1, R552 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R660 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R660 += 1 };
  accepting s8, s5, s2, s9, s7;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [102, 102];
  accepting s1;
};
};
constraint R3 = R660 && R23 - R660 = -1 && R24 = R660 && R25 - R660 = -1 && R26 = R660 && R27 = 0 && R28 = 1 && R29 = 0 && R30 = 1 && R45 + R84 + R83 + -1*R108 + -1*R104 - R66 = 0 && R49 + R89 + R87 = 0 && R50 + R90 + R88 + -1*R108 + -1*R104 - R66 = 0 && R55 + R96 + R93 + -1*R110 + -1*R106 - R68 = 0 && R65 + R107 + R103 = 0 && R67 + R109 + R105 = 0 && R601 = 0 && R602 = 0 && R607 = 0 && R608 = 0 && R613 = 0 && R614 = 0 && R615 = 0 && R616 = 0 && R617 = 0 && R618 = R660 && R619 = 0 && R620 = R660 && R621 = 0 && R622 = R660 && R623 = 0 && R624 = R660 && R625 = 0 && R626 = R660 && R627 = 0 && R628 = R660 && R629 = 0 && R630 = R660 && R631 = 0 && R632 = R660 && R633 = 0 && R634 = R660 && R635 = 0 && R636 = R660 && R637 = 0 && R638 = R660 && R639 = 0 && R640 = R660 && R641 = 0 && R642 = R660 && R643 = 0 && R644 = R660 && R645 = 0 && R646 = R660 && R647 = 0 && R648 = R660 && R649 = 0 && R650 = R660 && R651 = 0 && R652 = R660 && R653 = 0 && R654 = R660 && R655 = 0 && R656 = R660 && R657 = 0 && R658 = R660 && R659 = 0 && -1 < R2 && R12 < 1 && R15 < 1 && R16 < 1 && R47 + R86 + R85 < 1 && R61 + R102 + R99 < 1 && -1*R108 + -1*R104 - R66 < 1 && -1*R110 + -1*R106 - R68 < 1 && 0 < R660 && (R2 != 0 || R20 = 0 || (R561 = 0 && R562 = 0)) && (R2 != 0 || R20 = 0 || (R563 = 0 && R564 = 0)) && (R2 != 0 || R20 = 0 || (R565 = 0 && R566 = 0)) && (R2 != 0 || R20 = 0 || (R567 = 0 && R568 = 0)) && (R2 != 0 || R20 = 0 || (R569 = 0 && R570 = 0)) && (R2 != 0 || R20 = 0 || (R571 = 0 && R572 = 0)) && (R2 != 0 || R20 = 0 || (R573 = 0 && R574 = 0)) && (R2 != 0 || R20 = 0 || (R575 = 0 && R576 = 0)) && (R2 != 0 || R20 = 0 || (R577 = 0 && R578 = 0)) && (R2 != 0 || R20 = 0 || (R579 = 0 && R580 = 0)) && (R53 + R94 + R91 != 0 || R54 + R95 + R92 + -1*R108 + -1*R104 - R66 = 0 || R66 + R108 + R104 < 1) && (R59 + R100 + R97 != 0 || R60 + R101 + R98 + -1*R108 + -1*R104 - R66 = 0 || R66 + R108 + R104 < 1) && (R66 + R108 + R104 != 0 || ((R53 + R94 + R91 != 0 || R54 + R95 + R92 = 0 || R68 + R110 + R106 < 1) && (R53 + R94 + R91 = 0 || R68 + R110 + R106 < 1))) && (R66 + R108 + R104 != 0 || ((R59 + R100 + R97 != 0 || R60 + R101 + R98 = 0 || R68 + R110 + R106 < 1) && (R59 + R100 + R97 = 0 || R68 + R110 + R106 < 1))) && (R66 + R108 + R104 != 0 || ((R73 + R556 + R551 != 0 || R74 + R557 + R552 = 0 || R68 + R110 + R106 < 1) && (R73 + R556 + R551 = 0 || R68 + R110 + R106 < 1))) && (R68 + R110 + R106 != 0 || R77 + R560 + R555 = 0 || (R75 + R558 + R553 = 0 && R76 + R559 + R554 = 0)) && (R73 + R556 + R551 != 0 || R66 + R108 + R104 + -1*R557 + -1*R552 - R74 = 0 || R66 + R108 + R104 < 1) && (R75 + R558 + R553 != 0 || R68 + R110 + R106 + -1*R559 + -1*R554 - R76 = 0 || R68 + R110 + R106 < 1) && (R561 != 0 || R2 = R562 || R2 < 1) && (R563 != 0 || R2 = R564 || R2 < 1) && (R565 != 0 || R2 = R566 || R2 < 1) && (R567 != 0 || R2 = R568 || R2 < 1) && (R569 != 0 || R2 = R570 || R2 < 1) && (R571 != 0 || R2 = R572 || R2 < 1) && (R573 != 0 || R2 = R574 || R2 < 1) && (R575 != 0 || R2 = R576 || R2 < 1) && (R577 != 0 || R2 = R578 || R2 < 1) && (R579 != 0 || R2 = R580 || R2 < 1) && (R21 = 0 || (R599 = 0 && R600 = 0)) && (R21 = 0 || (R603 = 0 && R604 = 0)) && (R21 = 0 || (R605 = 0 && R606 = 0)) && (R21 = 0 || (R609 = 0 && R610 = 0)) && (R21 = 0 || (R611 = 0 && R612 = 0)) && (R22 = 0 || (R581 = 0 && R582 = 0)) && (R22 = 0 || (R583 = 0 && R584 = 0)) && (R22 = 0 || (R585 = 0 && R586 = 0)) && (R22 = 0 || (R587 = 0 && R588 = 0)) && (R22 = 0 || (R589 = 0 && R590 = 0)) && (R22 = 0 || (R591 = 0 && R592 = 0)) && (R22 = 0 || (R593 = 0 && R594 = 0)) && (R22 = 0 || (R595 = 0 && R596 = 0)) && (R22 = 0 || (R597 = 0 && R598 = 0)) && (R53 + R94 + R91 = 0 || R66 + R108 + R104 < 1) && (R59 + R100 + R97 = 0 || R66 + R108 + R104 < 1) && (R73 + R556 + R551 = 0 || R66 + R108 + R104 < 1) && (R75 + R558 + R553 = 0 || R68 + R110 + R106 < 1) && (R561 = 0 || R2 < 1) && (R563 = 0 || R2 < 1) && (R565 = 0 || R2 < 1) && (R567 = 0 || R2 < 1) && (R569 = 0 || R2 < 1) && (R571 = 0 || R2 < 1) && (R573 = 0 || R2 < 1) && (R575 = 0 || R2 < 1) && (R577 = 0 || R2 < 1) && (R579 = 0 || R2 < 1);
// End of Parikh automata intersection problem
