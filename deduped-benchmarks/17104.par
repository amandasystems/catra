// Parikh automata intersection problem, generated by OSTRICH+
counter int R10159, R10160, R10161, R10162, R10163, R10164, R11281, R11282, R11283, R11284, R11285, R11286, R11287, R11288, R11509, R11510, R11511, R11512, R11513, R11514, R11515, R11516, R11517, R11518, R11519, R11520, R11521, R11522, R11523, R11524, R11525, R11526, R11527, R11528, R11529, R11530, R11531, R11532, R11533, R11534, R11535, R11536, R11537, R11538, R11539, R11540, R11541, R11542, R11543, R11544, R11545, R11546, R11547, R11548, R11549, R11550, R11551, R11552, R11553, R11554, R11555, R11556, R11557, R11558, R11559, R11560, R11561, R11562, R11563, R11564, R11565, R11566, R11567, R11568, R11569, R11570, R11571, R11572, R11573, R11574, R11575, R11576, R11577, R11578, R11579, R11580, R11581, R11582, R11583, R11584, R11585, R11586, R11587, R11588, R11589, R11590, R11591, R11592, R11593, R11594, R11595, R11596, R11597, R11598, R11599, R11600, R11601, R11602, R11603, R11604, R11605, R11606, R11607, R11608, R11609, R11610, R11611, R11612, R11613, R11614, R11615, R11616, R11617, R11618, R12, R15, R16, R2, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R4, R45, R47, R49, R5, R50, R53, R54, R55, R59, R60, R61, R65, R66, R67, R68, R73, R74, R75, R76, R77, R83, R84, R85, R86, R87, R88, R89, R90, R91, R92, R93, R94, R95, R96;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [70, 70];
  s0 -> s0 [71, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [70, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R15 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 69];
  s0 -> s0 [0, 65535] { R16 += 1 };
  s0 -> s2 [70, 70];
  s0 -> s1 [71, 65535];
  s1 -> s1 [0, 69];
  s1 -> s2 [70, 70];
  s1 -> s1 [71, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R24 += 1 };
  s0 -> s0 [0, 65535] { R23 += 1, R24 += 1 };
  s0 -> s2 [9, 13] { R24 += 1 };
  s0 -> s1 [14, 31] { R24 += 1 };
  s0 -> s2 [32, 32] { R24 += 1 };
  s0 -> s1 [33, 65535] { R24 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R24 += 1 };
  s2 -> s1 [0, 65535] { R24 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R25 += 1, R26 += 1 };
  s1 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R28 += 1 };
  s0 -> s0 [0, 65535] { R27 += 1, R28 += 1 };
  s0 -> s2 [9, 13] { R28 += 1 };
  s0 -> s1 [14, 31] { R28 += 1 };
  s0 -> s2 [32, 32] { R28 += 1 };
  s0 -> s1 [33, 65535] { R28 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R28 += 1 };
  s2 -> s1 [0, 65535] { R28 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R29 += 1, R30 += 1 };
  s1 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R11540 += 1, R22 += 1 };
  s0 -> s0 [0, 65535] { R11539 += 1, R11540 += 1 };
  s1 -> s1 [0, 65535] { R11540 += 1, R22 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 69] { R11542 += 1 };
  s0 -> s0 [0, 65535] { R11541 += 1, R11542 += 1 };
  s0 -> s2 [70, 70] { R11542 += 1 };
  s0 -> s3 [70, 70] { R11542 += 1 };
  s0 -> s1 [76, 65535] { R11542 += 1 };
  s1 -> s1 [0, 69] { R11542 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R11542 += 1 };
  s1 -> s3 [70, 70] { R11542 += 1 };
  s1 -> s1 [76, 65535] { R11542 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 70] { R11542 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [76, 65535] { R11542 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 69] { R11544 += 1, R45 += 1 };
  s0 -> s0 [0, 65535] { R11543 += 1, R11544 += 1 };
  s0 -> s2 [70, 70] { R11544 += 1, R45 += 1 };
  s0 -> s3 [70, 70] { R11544 += 1, R45 += 1 };
  s0 -> s1 [71, 65535] { R11544 += 1, R45 += 1 };
  s1 -> s1 [0, 69] { R11544 += 1, R45 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R11544 += 1, R45 += 1 };
  s1 -> s3 [70, 70] { R11544 += 1, R45 += 1 };
  s1 -> s1 [71, 65535] { R11544 += 1, R45 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R11544 += 1, R45 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 69] { R11546 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R11545 += 1, R11546 += 1 };
  s0 -> s2 [70, 70] { R11546 += 1, R47 += 1 };
  s0 -> s3 [70, 70] { R11546 += 1, R47 += 1 };
  s0 -> s1 [71, 65535] { R11546 += 1, R47 += 1 };
  s1 -> s1 [0, 69] { R11546 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R11546 += 1, R47 += 1 };
  s1 -> s3 [70, 70] { R11546 += 1, R47 += 1 };
  s1 -> s1 [71, 65535] { R11546 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R11546 += 1, R47 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 69] { R11548 += 1, R49 += 1, R50 += 1 };
  s0 -> s0 [0, 65535] { R11547 += 1, R11548 += 1 };
  s0 -> s2 [70, 70] { R11548 += 1, R49 += 1, R50 += 1 };
  s0 -> s3 [70, 70] { R11548 += 1, R49 += 1, R50 += 1 };
  s0 -> s1 [71, 65535] { R11548 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 69] { R11548 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R11548 += 1, R49 += 1, R50 += 1 };
  s1 -> s3 [70, 70] { R11548 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [71, 65535] { R11548 += 1, R49 += 1, R50 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R11548 += 1, R49 += 1, R50 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 69] { R11550 += 1, R53 += 1, R54 += 1 };
  s0 -> s0 [0, 65535] { R11549 += 1, R11550 += 1 };
  s0 -> s2 [70, 70] { R11550 += 1, R53 += 1, R54 += 1 };
  s0 -> s3 [70, 70] { R11550 += 1, R53 += 1, R54 += 1 };
  s0 -> s1 [71, 65535] { R11550 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 69] { R11550 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R11550 += 1, R53 += 1, R54 += 1 };
  s1 -> s3 [70, 70] { R11550 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [71, 65535] { R11550 += 1, R53 += 1, R54 += 1 };
  s2 -> s2 [0, 65535] { R11550 += 1, R53 += 1, R54 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 69] { R11552 += 1, R59 += 1, R60 += 1 };
  s0 -> s0 [0, 65535] { R11551 += 1, R11552 += 1 };
  s0 -> s2 [70, 70] { R11552 += 1, R59 += 1, R60 += 1 };
  s0 -> s3 [70, 70] { R11552 += 1, R59 += 1, R60 += 1 };
  s0 -> s1 [71, 65535] { R11552 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 69] { R11552 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R11552 += 1, R59 += 1, R60 += 1 };
  s1 -> s3 [70, 70] { R11552 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [71, 65535] { R11552 += 1, R59 += 1, R60 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R11552 += 1, R59 += 1, R60 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 69] { R11554 += 1, R65 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R11553 += 1, R11554 += 1 };
  s0 -> s2 [70, 70] { R11554 += 1, R65 += 1, R66 += 1 };
  s0 -> s3 [70, 70] { R11554 += 1, R65 += 1, R66 += 1 };
  s0 -> s1 [71, 65535] { R11554 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 69] { R11554 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R11554 += 1, R65 += 1, R66 += 1 };
  s1 -> s3 [70, 70] { R11554 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [71, 65535] { R11554 += 1, R65 += 1, R66 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R11554 += 1, R65 += 1, R66 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 69] { R11556 += 1, R73 += 1, R74 += 1 };
  s0 -> s0 [0, 65535] { R11555 += 1, R11556 += 1 };
  s0 -> s2 [70, 70] { R11556 += 1, R73 += 1, R74 += 1 };
  s0 -> s3 [70, 70] { R11556 += 1, R73 += 1, R74 += 1 };
  s0 -> s1 [71, 65535] { R11556 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 69] { R11556 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R11556 += 1, R73 += 1, R74 += 1 };
  s1 -> s3 [70, 70] { R11556 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [71, 65535] { R11556 += 1, R73 += 1, R74 += 1 };
  s2 -> s2 [0, 65535] { R11556 += 1, R73 += 1, R74 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 69] { R11576 += 1 };
  s0 -> s0 [0, 65535] { R11575 += 1, R11576 += 1 };
  s0 -> s2 [70, 70] { R11576 += 1 };
  s0 -> s1 [71, 65535] { R11576 += 1 };
  s1 -> s1 [0, 69] { R11576 += 1 };
  s1 -> s2 [70, 70] { R11576 += 1 };
  s1 -> s1 [71, 65535] { R11576 += 1 };
  s2 -> s2 [0, 65535] { R11576 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R11578 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R11577 += 1, R11578 += 1 };
  s1 -> s1 [0, 65535] { R11578 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 69] { R11580 += 1 };
  s0 -> s2 [0, 65535] { R11580 += 1, R12 += 1 };
  s0 -> s0 [0, 65535] { R11579 += 1, R11580 += 1 };
  s0 -> s3 [70, 70] { R11580 += 1 };
  s0 -> s1 [71, 65535] { R11580 += 1 };
  s1 -> s1 [0, 69] { R11580 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [70, 70] { R11580 += 1 };
  s1 -> s1 [71, 65535] { R11580 += 1 };
  s2 -> s1 [0, 69] { R11580 += 1 };
  s2 -> s2 [0, 65535] { R11580 += 1, R12 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [70, 70] { R11580 += 1 };
  s2 -> s1 [71, 65535] { R11580 += 1 };
  s3 -> s3 [0, 65535] { R11580 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 69] { R11582 += 1, R11520 += 1 };
  s0 -> s2 [0, 65535] { R11582 += 1, R11519 += 1, R11520 += 1 };
  s0 -> s0 [0, 65535] { R11581 += 1, R11582 += 1 };
  s0 -> s1 [71, 65535] { R11582 += 1, R11520 += 1 };
  s1 -> s1 [0, 69] { R11582 += 1, R11520 += 1 };
  s1 -> s1 [0, 65535] { R11582 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [71, 65535] { R11582 += 1, R11520 += 1 };
  s2 -> s1 [0, 69] { R11582 += 1, R11520 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R11582 += 1, R11519 += 1, R11520 += 1 };
  s2 -> s1 [71, 65535] { R11582 += 1, R11520 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R11584 += 1, R11522 += 1, R20 += 1 };
  s0 -> s0 [0, 65535] { R11583 += 1, R11584 += 1 };
  s0 -> s2 [0, 65535] { R11584 += 1, R11521 += 1, R11522 += 1 };
  s1 -> s4 [0, 65535] { R11584 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R11584 += 1, R11522 += 1, R20 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R11584 += 1, R11522 += 1, R20 += 1 };
  s2 -> s2 [0, 65535] { R11584 += 1, R11521 += 1, R11522 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R11584 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 70] { R11586 += 1, R11524 += 1 };
  s0 -> s2 [0, 65535] { R11586 += 1, R11523 += 1, R11524 += 1 };
  s0 -> s0 [0, 65535] { R11585 += 1, R11586 += 1 };
  s0 -> s1 [75, 65535] { R11586 += 1, R11524 += 1 };
  s1 -> s1 [0, 70] { R11586 += 1, R11524 += 1 };
  s1 -> s1 [0, 65535] { R11586 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [75, 65535] { R11586 += 1, R11524 += 1 };
  s2 -> s1 [0, 70] { R11586 += 1, R11524 += 1 };
  s2 -> s2 [0, 65535] { R11586 += 1, R11523 += 1, R11524 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [75, 65535] { R11586 += 1, R11524 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s0 [0, 65535] { R11587 += 1, R11588 += 1 };
  s0 -> s1 [0, 65535] { R11588 += 1, R11526 += 1, R84 += 1 };
  s0 -> s2 [0, 65535] { R11588 += 1, R11525 += 1, R11526 += 1 };
  s1 -> s1 [0, 65535] { R11588 += 1, R11526 += 1, R84 += 1 };
  s1 -> s4 [0, 65535] { R11588 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R11588 += 1, R11526 += 1, R84 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R11588 += 1, R11525 += 1, R11526 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R11588 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 74] { R11590 += 1, R11528 += 1 };
  s0 -> s0 [0, 65535] { R11589 += 1, R11590 += 1 };
  s0 -> s2 [0, 65535] { R11590 += 1, R11527 += 1, R11528 += 1 };
  s0 -> s3 [0, 65535] { R11590 += 1, R11528 += 1, R86 += 1 };
  s0 -> s1 [76, 65535] { R11590 += 1, R11528 += 1 };
  s1 -> s1 [0, 74] { R11590 += 1, R11528 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R11590 += 1 };
  s1 -> s1 [76, 65535] { R11590 += 1, R11528 += 1 };
  s2 -> s1 [0, 74] { R11590 += 1, R11528 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R11590 += 1, R11527 += 1, R11528 += 1 };
  s2 -> s3 [0, 65535] { R11590 += 1, R11528 += 1, R86 += 1 };
  s2 -> s1 [76, 65535] { R11590 += 1, R11528 += 1 };
  s3 -> s1 [0, 74] { R11590 += 1, R11528 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R11590 += 1 };
  s3 -> s3 [0, 65535] { R11590 += 1, R11528 += 1, R86 += 1 };
  s3 -> s1 [76, 65535] { R11590 += 1, R11528 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R11590 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s0 [0, 65535] { R11591 += 1, R11592 += 1 };
  s0 -> s1 [0, 65535] { R11592 += 1, R11530 += 1, R90 += 1 };
  s0 -> s2 [0, 65535] { R11592 += 1, R11529 += 1, R11530 += 1 };
  s0 -> s3 [0, 65535] { R11592 += 1, R11530 += 1 };
  s1 -> s1 [0, 65535] { R11592 += 1, R11530 += 1, R90 += 1 };
  s1 -> s3 [0, 65535] { R11592 += 1, R11530 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R11592 += 1 };
  s2 -> s1 [0, 65535] { R11592 += 1, R11530 += 1, R90 += 1 };
  s2 -> s2 [0, 65535] { R11592 += 1, R11529 += 1, R11530 += 1 };
  s2 -> s3 [0, 65535] { R11592 += 1, R11530 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R11592 += 1, R11530 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R11592 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R11592 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R11594 += 1, R11531 += 1, R11532 += 1 };
  s0 -> s2 [0, 65535] { R11594 += 1, R11532 += 1, R94 += 1, R95 += 1 };
  s0 -> s3 [0, 65535] { R11594 += 1, R11532 += 1, R95 += 1, R96 += 1 };
  s0 -> s0 [0, 65535] { R11593 += 1, R11594 += 1 };
  s1 -> s1 [0, 65535] { R11594 += 1, R11531 += 1, R11532 += 1 };
  s1 -> s2 [0, 65535] { R11594 += 1, R11532 += 1, R94 += 1, R95 += 1 };
  s1 -> s3 [0, 65535] { R11594 += 1, R11532 += 1, R95 += 1, R96 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R11594 += 1, R11532 += 1, R94 += 1, R95 += 1 };
  s2 -> s3 [0, 65535] { R11594 += 1, R11532 += 1, R95 += 1, R96 += 1 };
  s2 -> s4 [0, 65535] { R11594 += 1 };
  s2 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R11594 += 1, R11532 += 1, R95 += 1, R96 += 1 };
  s3 -> s4 [0, 65535] { R11594 += 1 };
  s3 -> s5 [0, 65535] { R11594 += 1, R11532 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R11594 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s4 [0, 65535] { R11594 += 1 };
  s5 -> s5 [0, 65535] { R11594 += 1, R11532 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 65535] { R11596 += 1, R11533 += 1, R11534 += 1 };
  s0 -> s0 [0, 65535] { R11595 += 1, R11596 += 1 };
  s0 -> s2 [0, 65535] { R11596 += 1, R11534 += 1 };
  s1 -> s1 [0, 65535] { R11596 += 1, R11533 += 1, R11534 += 1 };
  s1 -> s2 [0, 65535] { R11596 += 1, R11534 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R11596 += 1 };
  s2 -> s2 [0, 65535] { R11596 += 1, R11534 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R11596 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R11598 += 1, R11535 += 1, R11536 += 1 };
  s0 -> s2 [0, 65535] { R11598 += 1, R11536 += 1 };
  s0 -> s0 [0, 65535] { R11597 += 1, R11598 += 1 };
  s1 -> s1 [0, 65535] { R11598 += 1, R11535 += 1, R11536 += 1 };
  s1 -> s2 [0, 65535] { R11598 += 1, R11536 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R11598 += 1 };
  s2 -> s2 [0, 65535] { R11598 += 1, R11536 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R11598 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 65535] { R11600 += 1, R11538 += 1, R11515 += 1, R11517 += 1, R11518 += 1 };
  s0 -> s0 [0, 65535] { R11599 += 1, R11600 += 1 };
  s0 -> s2 [0, 65535] { R11600 += 1, R11538 += 1, R11515 += 1, R11516 += 1, R11517 += 1 };
  s0 -> s3 [0, 65535] { R11600 += 1, R11538 += 1, R11514 += 1, R11515 += 1 };
  s0 -> s4 [0, 65535] { R11600 += 1, R11537 += 1, R11538 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R11600 += 1, R11538 += 1, R11515 += 1, R11517 += 1, R11518 += 1 };
  s1 -> s7 [0, 65535] { R11600 += 1, R11538 += 1 };
  s1 -> s8 [0, 65535] { R11600 += 1, R11538 += 1, R11515 += 1 };
  s1 -> s6 [0, 65535] { R11600 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R11600 += 1, R11538 += 1, R11515 += 1, R11517 += 1, R11518 += 1 };
  s2 -> s7 [0, 65535] { R11600 += 1, R11538 += 1 };
  s2 -> s2 [0, 65535] { R11600 += 1, R11538 += 1, R11515 += 1, R11516 += 1, R11517 += 1 };
  s2 -> s6 [0, 65535] { R11600 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [0, 65535] { R11600 += 1, R11538 += 1, R11515 += 1, R11517 += 1, R11518 += 1 };
  s3 -> s2 [0, 65535] { R11600 += 1, R11538 += 1, R11515 += 1, R11516 += 1, R11517 += 1 };
  s3 -> s6 [0, 65535] { R11600 += 1 };
  s3 -> s3 [0, 65535] { R11600 += 1, R11538 += 1, R11514 += 1, R11515 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s1 [0, 65535] { R11600 += 1, R11538 += 1, R11515 += 1, R11517 += 1, R11518 += 1 };
  s4 -> s2 [0, 65535] { R11600 += 1, R11538 += 1, R11515 += 1, R11516 += 1, R11517 += 1 };
  s4 -> s3 [0, 65535] { R11600 += 1, R11538 += 1, R11514 += 1, R11515 += 1 };
  s4 -> s4 [0, 65535] { R11600 += 1, R11537 += 1, R11538 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R11600 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R11600 += 1, R11538 += 1 };
  s7 -> s6 [0, 65535] { R11600 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s7 [0, 65535] { R11600 += 1, R11538 += 1 };
  s8 -> s8 [0, 65535] { R11600 += 1, R11538 += 1, R11515 += 1 };
  s8 -> s6 [0, 65535] { R11600 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R11602 += 1, R11558 += 1, R21 += 1 };
  s0 -> s2 [0, 65535] { R11602 += 1, R11557 += 1, R11558 += 1 };
  s0 -> s0 [0, 65535] { R11601 += 1, R11602 += 1 };
  s1 -> s1 [0, 65535] { R11602 += 1, R11558 += 1, R21 += 1 };
  s1 -> s4 [0, 65535] { R11602 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R11602 += 1, R11558 += 1, R21 += 1 };
  s2 -> s2 [0, 65535] { R11602 += 1, R11557 += 1, R11558 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R11602 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 69] { R11604 += 1, R11560 += 1 };
  s0 -> s0 [0, 65535] { R11603 += 1, R11604 += 1 };
  s0 -> s2 [0, 65535] { R11604 += 1, R11559 += 1, R11560 += 1 };
  s0 -> s3 [70, 70] { R11604 += 1, R11560 += 1 };
  s0 -> s4 [70, 70] { R11604 += 1, R11560 += 1 };
  s0 -> s5 [75, 75] { R11604 += 1, R11560 += 1 };
  s0 -> s1 [76, 65535] { R11604 += 1, R11560 += 1 };
  s1 -> s1 [0, 69] { R11604 += 1, R11560 += 1 };
  s1 -> s3 [70, 70] { R11604 += 1, R11560 += 1 };
  s1 -> s4 [70, 70] { R11604 += 1, R11560 += 1 };
  s1 -> s5 [75, 75] { R11604 += 1, R11560 += 1 };
  s1 -> s1 [76, 65535] { R11604 += 1, R11560 += 1 };
  s2 -> s1 [0, 69] { R11604 += 1, R11560 += 1 };
  s2 -> s2 [0, 65535] { R11604 += 1, R11559 += 1, R11560 += 1 };
  s2 -> s3 [70, 70] { R11604 += 1, R11560 += 1 };
  s2 -> s4 [70, 70] { R11604 += 1, R11560 += 1 };
  s2 -> s5 [75, 75] { R11604 += 1, R11560 += 1 };
  s2 -> s1 [76, 65535] { R11604 += 1, R11560 += 1 };
  s3 -> s3 [0, 70] { R11604 += 1, R11560 += 1 };
  s3 -> s8 [75, 75] { R11604 += 1, R11560 += 1 };
  s3 -> s3 [76, 65535] { R11604 += 1, R11560 += 1 };
  s5 -> s5 [0, 69] { R11604 += 1, R11560 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R11604 += 1 };
  s5 -> s7 [70, 70] { R11604 += 1, R11560 += 1 };
  s5 -> s8 [70, 70] { R11604 += 1, R11560 += 1 };
  s5 -> s5 [75, 65535] { R11604 += 1, R11560 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R11604 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 70] { R11604 += 1, R11560 += 1 };
  s8 -> s8 [0, 65535] { R11604 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [75, 65535] { R11604 += 1, R11560 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 69] { R11606 += 1, R11562 += 1, R83 += 1 };
  s0 -> s2 [0, 65535] { R11606 += 1, R11561 += 1, R11562 += 1 };
  s0 -> s0 [0, 65535] { R11605 += 1, R11606 += 1 };
  s0 -> s3 [70, 70] { R11606 += 1, R11562 += 1, R83 += 1 };
  s0 -> s4 [70, 70] { R11606 += 1, R11562 += 1, R83 += 1 };
  s0 -> s1 [71, 65535] { R11606 += 1, R11562 += 1, R83 += 1 };
  s1 -> s1 [0, 69] { R11606 += 1, R11562 += 1, R83 += 1 };
  s1 -> s1 [0, 65535] { R11606 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [70, 70] { R11606 += 1, R11562 += 1, R83 += 1 };
  s1 -> s4 [70, 70] { R11606 += 1, R11562 += 1, R83 += 1 };
  s1 -> s1 [71, 65535] { R11606 += 1, R11562 += 1, R83 += 1 };
  s2 -> s1 [0, 69] { R11606 += 1, R11562 += 1, R83 += 1 };
  s2 -> s2 [0, 65535] { R11606 += 1, R11561 += 1, R11562 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [70, 70] { R11606 += 1, R11562 += 1, R83 += 1 };
  s2 -> s4 [70, 70] { R11606 += 1, R11562 += 1, R83 += 1 };
  s2 -> s1 [71, 65535] { R11606 += 1, R11562 += 1, R83 += 1 };
  s3 -> s3 [0, 65535] { R11606 += 1, R11562 += 1, R83 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R11606 += 1 };
  s4 -> s4 [0, 65535] { R11606 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R11606 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 69] { R11608 += 1, R11564 += 1, R85 += 1 };
  s0 -> s2 [0, 65535] { R11608 += 1, R11563 += 1, R11564 += 1 };
  s0 -> s0 [0, 65535] { R11607 += 1, R11608 += 1 };
  s0 -> s3 [70, 70] { R11608 += 1, R11564 += 1, R85 += 1 };
  s0 -> s4 [70, 70] { R11608 += 1, R11564 += 1, R85 += 1 };
  s0 -> s1 [71, 65535] { R11608 += 1, R11564 += 1, R85 += 1 };
  s1 -> s1 [0, 69] { R11608 += 1, R11564 += 1, R85 += 1 };
  s1 -> s1 [0, 65535] { R11608 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [70, 70] { R11608 += 1, R11564 += 1, R85 += 1 };
  s1 -> s4 [70, 70] { R11608 += 1, R11564 += 1, R85 += 1 };
  s1 -> s1 [71, 65535] { R11608 += 1, R11564 += 1, R85 += 1 };
  s2 -> s1 [0, 69] { R11608 += 1, R11564 += 1, R85 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R11608 += 1, R11563 += 1, R11564 += 1 };
  s2 -> s3 [70, 70] { R11608 += 1, R11564 += 1, R85 += 1 };
  s2 -> s4 [70, 70] { R11608 += 1, R11564 += 1, R85 += 1 };
  s2 -> s1 [71, 65535] { R11608 += 1, R11564 += 1, R85 += 1 };
  s3 -> s3 [0, 65535] { R11608 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R11608 += 1 };
  s4 -> s4 [0, 65535] { R11608 += 1, R11564 += 1, R85 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R11608 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 69] { R11610 += 1, R11566 += 1, R88 += 1 };
  s0 -> s2 [0, 69] { R11610 += 1, R11566 += 1, R87 += 1, R88 += 1 };
  s0 -> s0 [0, 65535] { R11609 += 1, R11610 += 1 };
  s0 -> s3 [0, 65535] { R11610 += 1, R11565 += 1, R11566 += 1 };
  s0 -> s4 [70, 70] { R11610 += 1, R11566 += 1, R88 += 1 };
  s0 -> s5 [70, 70] { R11610 += 1, R11566 += 1, R87 += 1, R88 += 1 };
  s0 -> s6 [70, 70] { R11610 += 1, R11566 += 1, R88 += 1 };
  s0 -> s7 [70, 70] { R11610 += 1, R11566 += 1, R87 += 1, R88 += 1 };
  s0 -> s1 [71, 74] { R11610 += 1, R11566 += 1, R88 += 1 };
  s0 -> s2 [71, 65535] { R11610 += 1, R11566 += 1, R87 += 1, R88 += 1 };
  s0 -> s8 [75, 75] { R11610 += 1, R11566 += 1, R88 += 1 };
  s0 -> s1 [76, 65535] { R11610 += 1, R11566 += 1, R88 += 1 };
  s1 -> s1 [0, 69] { R11610 += 1, R11566 += 1, R88 += 1 };
  s1 -> s4 [70, 70] { R11610 += 1, R11566 += 1, R88 += 1 };
  s1 -> s6 [70, 70] { R11610 += 1, R11566 += 1, R88 += 1 };
  s1 -> s1 [71, 74] { R11610 += 1, R11566 += 1, R88 += 1 };
  s1 -> s8 [75, 75] { R11610 += 1, R11566 += 1, R88 += 1 };
  s1 -> s1 [76, 65535] { R11610 += 1, R11566 += 1, R88 += 1 };
  s2 -> s1 [0, 69] { R11610 += 1, R11566 += 1, R88 += 1 };
  s2 -> s2 [0, 69] { R11610 += 1, R11566 += 1, R87 += 1, R88 += 1 };
  s2 -> s4 [70, 70] { R11610 += 1, R11566 += 1, R88 += 1 };
  s2 -> s5 [70, 70] { R11610 += 1, R11566 += 1, R87 += 1, R88 += 1 };
  s2 -> s6 [70, 70] { R11610 += 1, R11566 += 1, R88 += 1 };
  s2 -> s7 [70, 70] { R11610 += 1, R11566 += 1, R87 += 1, R88 += 1 };
  s2 -> s1 [71, 74] { R11610 += 1, R11566 += 1, R88 += 1 };
  s2 -> s2 [71, 65535] { R11610 += 1, R11566 += 1, R87 += 1, R88 += 1 };
  s2 -> s8 [75, 75] { R11610 += 1, R11566 += 1, R88 += 1 };
  s2 -> s1 [76, 65535] { R11610 += 1, R11566 += 1, R88 += 1 };
  s3 -> s1 [0, 69] { R11610 += 1, R11566 += 1, R88 += 1 };
  s3 -> s2 [0, 69] { R11610 += 1, R11566 += 1, R87 += 1, R88 += 1 };
  s3 -> s3 [0, 65535] { R11610 += 1, R11565 += 1, R11566 += 1 };
  s3 -> s4 [70, 70] { R11610 += 1, R11566 += 1, R88 += 1 };
  s3 -> s5 [70, 70] { R11610 += 1, R11566 += 1, R87 += 1, R88 += 1 };
  s3 -> s6 [70, 70] { R11610 += 1, R11566 += 1, R88 += 1 };
  s3 -> s7 [70, 70] { R11610 += 1, R11566 += 1, R87 += 1, R88 += 1 };
  s3 -> s1 [71, 74] { R11610 += 1, R11566 += 1, R88 += 1 };
  s3 -> s2 [71, 65535] { R11610 += 1, R11566 += 1, R87 += 1, R88 += 1 };
  s3 -> s8 [75, 75] { R11610 += 1, R11566 += 1, R88 += 1 };
  s3 -> s1 [76, 65535] { R11610 += 1, R11566 += 1, R88 += 1 };
  s6 -> s6 [0, 74] { R11610 += 1, R11566 += 1, R88 += 1 };
  s6 -> s10 [75, 75] { R11610 += 1, R11566 += 1, R88 += 1 };
  s6 -> s6 [76, 65535] { R11610 += 1, R11566 += 1, R88 += 1 };
  s7 -> s6 [0, 74] { R11610 += 1, R11566 += 1, R88 += 1 };
  s7 -> s7 [0, 65535] { R11610 += 1, R11566 += 1, R87 += 1, R88 += 1 };
  s7 -> s10 [75, 75] { R11610 += 1, R11566 += 1, R88 += 1 };
  s7 -> s6 [76, 65535] { R11610 += 1, R11566 += 1, R88 += 1 };
  s8 -> s8 [0, 69] { R11610 += 1, R11566 += 1, R88 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R11610 += 1 };
  s8 -> s10 [70, 70] { R11610 += 1, R11566 += 1, R88 += 1 };
  s8 -> s11 [70, 70] { R11610 += 1, R11566 += 1, R88 += 1 };
  s8 -> s8 [71, 65535] { R11610 += 1, R11566 += 1, R88 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s12 [0, 65535] { R11610 += 1 };
  s10 -> s10 [0, 65535] { R11610 += 1, R11566 += 1, R88 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R11610 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R11610 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 69] { R11612 += 1, R11568 += 1, R91 += 1, R92 += 1 };
  s0 -> s0 [0, 65535] { R11611 += 1, R11612 += 1 };
  s0 -> s2 [0, 65535] { R11612 += 1, R11567 += 1, R11568 += 1 };
  s0 -> s3 [70, 70] { R11612 += 1, R11568 += 1, R91 += 1, R92 += 1 };
  s0 -> s4 [70, 70] { R11612 += 1, R11568 += 1, R91 += 1, R92 += 1 };
  s0 -> s1 [71, 65535] { R11612 += 1, R11568 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 69] { R11612 += 1, R11568 += 1, R91 += 1, R92 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R11612 += 1 };
  s1 -> s3 [70, 70] { R11612 += 1, R11568 += 1, R91 += 1, R92 += 1 };
  s1 -> s4 [70, 70] { R11612 += 1, R11568 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [71, 65535] { R11612 += 1, R11568 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [0, 69] { R11612 += 1, R11568 += 1, R91 += 1, R92 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R11612 += 1, R11567 += 1, R11568 += 1 };
  s2 -> s3 [70, 70] { R11612 += 1, R11568 += 1, R91 += 1, R92 += 1 };
  s2 -> s4 [70, 70] { R11612 += 1, R11568 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [71, 65535] { R11612 += 1, R11568 += 1, R91 += 1, R92 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R11612 += 1, R11568 += 1, R91 += 1, R92 += 1 };
  s3 -> s6 [0, 65535] { R11612 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R11612 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R11612 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 69] { R11614 += 1, R11570 += 1, R10159 += 1, R10160 += 1 };
  s0 -> s2 [0, 69] { R11614 += 1, R11570 += 1, R10160 += 1, R10161 += 1 };
  s0 -> s3 [0, 65535] { R11614 += 1, R11569 += 1, R11570 += 1 };
  s0 -> s0 [0, 65535] { R11613 += 1, R11614 += 1 };
  s0 -> s4 [70, 70] { R11614 += 1, R11570 += 1, R10160 += 1, R10161 += 1 };
  s0 -> s5 [70, 70] { R11614 += 1, R11570 += 1, R10159 += 1, R10160 += 1 };
  s0 -> s6 [70, 70] { R11614 += 1, R11570 += 1, R10159 += 1, R10160 += 1 };
  s0 -> s7 [70, 70] { R11614 += 1, R11570 += 1, R10160 += 1, R10161 += 1 };
  s0 -> s1 [71, 65535] { R11614 += 1, R11570 += 1, R10159 += 1, R10160 += 1 };
  s0 -> s2 [71, 65535] { R11614 += 1, R11570 += 1, R10160 += 1, R10161 += 1 };
  s1 -> s1 [0, 69] { R11614 += 1, R11570 += 1, R10159 += 1, R10160 += 1 };
  s1 -> s2 [0, 69] { R11614 += 1, R11570 += 1, R10160 += 1, R10161 += 1 };
  s1 -> s4 [70, 70] { R11614 += 1, R11570 += 1, R10160 += 1, R10161 += 1 };
  s1 -> s5 [70, 70] { R11614 += 1, R11570 += 1, R10159 += 1, R10160 += 1 };
  s1 -> s6 [70, 70] { R11614 += 1, R11570 += 1, R10159 += 1, R10160 += 1 };
  s1 -> s7 [70, 70] { R11614 += 1, R11570 += 1, R10160 += 1, R10161 += 1 };
  s1 -> s1 [71, 65535] { R11614 += 1, R11570 += 1, R10159 += 1, R10160 += 1 };
  s1 -> s2 [71, 65535] { R11614 += 1, R11570 += 1, R10160 += 1, R10161 += 1 };
  s2 -> s2 [0, 69] { R11614 += 1, R11570 += 1, R10160 += 1, R10161 += 1 };
  s2 -> s11 [0, 69] { R11614 += 1, R11570 += 1 };
  s2 -> s4 [70, 70] { R11614 += 1, R11570 += 1, R10160 += 1, R10161 += 1 };
  s2 -> s8 [70, 70] { R11614 += 1, R11570 += 1 };
  s2 -> s12 [70, 70] { R11614 += 1, R11570 += 1 };
  s2 -> s7 [70, 70] { R11614 += 1, R11570 += 1, R10160 += 1, R10161 += 1 };
  s2 -> s2 [71, 65535] { R11614 += 1, R11570 += 1, R10160 += 1, R10161 += 1 };
  s2 -> s11 [71, 65535] { R11614 += 1, R11570 += 1 };
  s3 -> s1 [0, 69] { R11614 += 1, R11570 += 1, R10159 += 1, R10160 += 1 };
  s3 -> s2 [0, 69] { R11614 += 1, R11570 += 1, R10160 += 1, R10161 += 1 };
  s3 -> s3 [0, 65535] { R11614 += 1, R11569 += 1, R11570 += 1 };
  s3 -> s4 [70, 70] { R11614 += 1, R11570 += 1, R10160 += 1, R10161 += 1 };
  s3 -> s5 [70, 70] { R11614 += 1, R11570 += 1, R10159 += 1, R10160 += 1 };
  s3 -> s6 [70, 70] { R11614 += 1, R11570 += 1, R10159 += 1, R10160 += 1 };
  s3 -> s7 [70, 70] { R11614 += 1, R11570 += 1, R10160 += 1, R10161 += 1 };
  s3 -> s1 [71, 65535] { R11614 += 1, R11570 += 1, R10159 += 1, R10160 += 1 };
  s3 -> s2 [71, 65535] { R11614 += 1, R11570 += 1, R10160 += 1, R10161 += 1 };
  s5 -> s5 [0, 65535] { R11614 += 1, R11570 += 1, R10159 += 1, R10160 += 1 };
  s5 -> s7 [0, 65535] { R11614 += 1, R11570 += 1, R10160 += 1, R10161 += 1 };
  s7 -> s8 [0, 65535] { R11614 += 1, R11570 += 1 };
  s7 -> s7 [0, 65535] { R11614 += 1, R11570 += 1, R10160 += 1, R10161 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R11614 += 1, R11570 += 1 };
  s8 -> s10 [0, 65535] { R11614 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R11614 += 1 };
  s11 -> s11 [0, 69] { R11614 += 1, R11570 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R11614 += 1 };
  s11 -> s8 [70, 70] { R11614 += 1, R11570 += 1 };
  s11 -> s12 [70, 70] { R11614 += 1, R11570 += 1 };
  s11 -> s11 [71, 65535] { R11614 += 1, R11570 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R11614 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 69] { R11616 += 1, R11572 += 1, R11281 += 1, R11282 += 1 };
  s0 -> s2 [0, 69] { R11616 += 1, R11572 += 1, R11282 += 1, R11283 += 1, R11284 += 1 };
  s0 -> s3 [0, 69] { R11616 += 1, R11572 += 1, R11282 += 1, R11284 += 1 };
  s0 -> s4 [0, 65535] { R11616 += 1, R11571 += 1, R11572 += 1 };
  s0 -> s0 [0, 65535] { R11615 += 1, R11616 += 1 };
  s0 -> s5 [70, 70] { R11616 += 1, R11572 += 1, R11281 += 1, R11282 += 1 };
  s0 -> s6 [70, 70] { R11616 += 1, R11572 += 1, R11282 += 1, R11284 += 1 };
  s0 -> s7 [70, 70] { R11616 += 1, R11572 += 1, R11282 += 1, R11283 += 1, R11284 += 1 };
  s0 -> s8 [70, 70] { R11616 += 1, R11572 += 1, R11282 += 1, R11283 += 1, R11284 += 1 };
  s0 -> s9 [70, 70] { R11616 += 1, R11572 += 1, R11281 += 1, R11282 += 1 };
  s0 -> s10 [70, 70] { R11616 += 1, R11572 += 1, R11282 += 1, R11284 += 1 };
  s0 -> s3 [71, 74] { R11616 += 1, R11572 += 1, R11282 += 1, R11284 += 1 };
  s0 -> s1 [71, 65535] { R11616 += 1, R11572 += 1, R11281 += 1, R11282 += 1 };
  s0 -> s2 [71, 65535] { R11616 += 1, R11572 += 1, R11282 += 1, R11283 += 1, R11284 += 1 };
  s0 -> s11 [75, 75] { R11616 += 1, R11572 += 1, R11282 += 1, R11284 += 1 };
  s0 -> s3 [76, 65535] { R11616 += 1, R11572 += 1, R11282 += 1, R11284 += 1 };
  s1 -> s1 [0, 69] { R11616 += 1, R11572 += 1, R11281 += 1, R11282 += 1 };
  s1 -> s2 [0, 69] { R11616 += 1, R11572 += 1, R11282 += 1, R11283 += 1, R11284 += 1 };
  s1 -> s3 [0, 69] { R11616 += 1, R11572 += 1, R11282 += 1, R11284 += 1 };
  s1 -> s5 [70, 70] { R11616 += 1, R11572 += 1, R11281 += 1, R11282 += 1 };
  s1 -> s6 [70, 70] { R11616 += 1, R11572 += 1, R11282 += 1, R11284 += 1 };
  s1 -> s7 [70, 70] { R11616 += 1, R11572 += 1, R11282 += 1, R11283 += 1, R11284 += 1 };
  s1 -> s8 [70, 70] { R11616 += 1, R11572 += 1, R11282 += 1, R11283 += 1, R11284 += 1 };
  s1 -> s9 [70, 70] { R11616 += 1, R11572 += 1, R11281 += 1, R11282 += 1 };
  s1 -> s10 [70, 70] { R11616 += 1, R11572 += 1, R11282 += 1, R11284 += 1 };
  s1 -> s3 [71, 74] { R11616 += 1, R11572 += 1, R11282 += 1, R11284 += 1 };
  s1 -> s1 [71, 65535] { R11616 += 1, R11572 += 1, R11281 += 1, R11282 += 1 };
  s1 -> s2 [71, 65535] { R11616 += 1, R11572 += 1, R11282 += 1, R11283 += 1, R11284 += 1 };
  s1 -> s11 [75, 75] { R11616 += 1, R11572 += 1, R11282 += 1, R11284 += 1 };
  s1 -> s3 [76, 65535] { R11616 += 1, R11572 += 1, R11282 += 1, R11284 += 1 };
  s2 -> s2 [0, 69] { R11616 += 1, R11572 += 1, R11282 += 1, R11283 += 1, R11284 += 1 };
  s2 -> s3 [0, 69] { R11616 += 1, R11572 += 1, R11282 += 1, R11284 += 1 };
  s2 -> s6 [70, 70] { R11616 += 1, R11572 += 1, R11282 += 1, R11284 += 1 };
  s2 -> s7 [70, 70] { R11616 += 1, R11572 += 1, R11282 += 1, R11283 += 1, R11284 += 1 };
  s2 -> s8 [70, 70] { R11616 += 1, R11572 += 1, R11282 += 1, R11283 += 1, R11284 += 1 };
  s2 -> s10 [70, 70] { R11616 += 1, R11572 += 1, R11282 += 1, R11284 += 1 };
  s2 -> s3 [71, 74] { R11616 += 1, R11572 += 1, R11282 += 1, R11284 += 1 };
  s2 -> s2 [71, 65535] { R11616 += 1, R11572 += 1, R11282 += 1, R11283 += 1, R11284 += 1 };
  s2 -> s11 [75, 75] { R11616 += 1, R11572 += 1, R11282 += 1, R11284 += 1 };
  s2 -> s3 [76, 65535] { R11616 += 1, R11572 += 1, R11282 += 1, R11284 += 1 };
  s3 -> s3 [0, 69] { R11616 += 1, R11572 += 1, R11282 += 1, R11284 += 1 };
  s3 -> s6 [70, 70] { R11616 += 1, R11572 += 1, R11282 += 1, R11284 += 1 };
  s3 -> s10 [70, 70] { R11616 += 1, R11572 += 1, R11282 += 1, R11284 += 1 };
  s3 -> s3 [71, 74] { R11616 += 1, R11572 += 1, R11282 += 1, R11284 += 1 };
  s3 -> s11 [75, 75] { R11616 += 1, R11572 += 1, R11282 += 1, R11284 += 1 };
  s3 -> s3 [76, 65535] { R11616 += 1, R11572 += 1, R11282 += 1, R11284 += 1 };
  s4 -> s1 [0, 69] { R11616 += 1, R11572 += 1, R11281 += 1, R11282 += 1 };
  s4 -> s2 [0, 69] { R11616 += 1, R11572 += 1, R11282 += 1, R11283 += 1, R11284 += 1 };
  s4 -> s3 [0, 69] { R11616 += 1, R11572 += 1, R11282 += 1, R11284 += 1 };
  s4 -> s4 [0, 65535] { R11616 += 1, R11571 += 1, R11572 += 1 };
  s4 -> s5 [70, 70] { R11616 += 1, R11572 += 1, R11281 += 1, R11282 += 1 };
  s4 -> s6 [70, 70] { R11616 += 1, R11572 += 1, R11282 += 1, R11284 += 1 };
  s4 -> s7 [70, 70] { R11616 += 1, R11572 += 1, R11282 += 1, R11283 += 1, R11284 += 1 };
  s4 -> s8 [70, 70] { R11616 += 1, R11572 += 1, R11282 += 1, R11283 += 1, R11284 += 1 };
  s4 -> s9 [70, 70] { R11616 += 1, R11572 += 1, R11281 += 1, R11282 += 1 };
  s4 -> s10 [70, 70] { R11616 += 1, R11572 += 1, R11282 += 1, R11284 += 1 };
  s4 -> s3 [71, 74] { R11616 += 1, R11572 += 1, R11282 += 1, R11284 += 1 };
  s4 -> s1 [71, 65535] { R11616 += 1, R11572 += 1, R11281 += 1, R11282 += 1 };
  s4 -> s2 [71, 65535] { R11616 += 1, R11572 += 1, R11282 += 1, R11283 += 1, R11284 += 1 };
  s4 -> s11 [75, 75] { R11616 += 1, R11572 += 1, R11282 += 1, R11284 += 1 };
  s4 -> s3 [76, 65535] { R11616 += 1, R11572 += 1, R11282 += 1, R11284 += 1 };
  s5 -> s10 [0, 74] { R11616 += 1, R11572 += 1, R11282 += 1, R11284 += 1 };
  s5 -> s5 [0, 65535] { R11616 += 1, R11572 += 1, R11281 += 1, R11282 += 1 };
  s5 -> s7 [0, 65535] { R11616 += 1, R11572 += 1, R11282 += 1, R11283 += 1, R11284 += 1 };
  s5 -> s18 [75, 75] { R11616 += 1, R11572 += 1, R11282 += 1, R11284 += 1 };
  s5 -> s10 [76, 65535] { R11616 += 1, R11572 += 1, R11282 += 1, R11284 += 1 };
  s7 -> s10 [0, 74] { R11616 += 1, R11572 += 1, R11282 += 1, R11284 += 1 };
  s7 -> s7 [0, 65535] { R11616 += 1, R11572 += 1, R11282 += 1, R11283 += 1, R11284 += 1 };
  s7 -> s18 [75, 75] { R11616 += 1, R11572 += 1, R11282 += 1, R11284 += 1 };
  s7 -> s10 [76, 65535] { R11616 += 1, R11572 += 1, R11282 += 1, R11284 += 1 };
  s10 -> s10 [0, 74] { R11616 += 1, R11572 += 1, R11282 += 1, R11284 += 1 };
  s10 -> s18 [75, 75] { R11616 += 1, R11572 += 1, R11282 += 1, R11284 += 1 };
  s10 -> s10 [76, 65535] { R11616 += 1, R11572 += 1, R11282 += 1, R11284 += 1 };
  s11 -> s11 [0, 69] { R11616 += 1, R11572 += 1, R11282 += 1, R11284 += 1 };
  s11 -> s12 [0, 69] { R11616 += 1, R11572 += 1 };
  s11 -> s13 [0, 69] { R11616 += 1, R11572 += 1, R11282 += 1 };
  s11 -> s14 [70, 70] { R11616 += 1, R11572 += 1, R11282 += 1, R11284 += 1 };
  s11 -> s15 [70, 70] { R11616 += 1, R11572 += 1 };
  s11 -> s16 [70, 70] { R11616 += 1, R11572 += 1, R11282 += 1 };
  s11 -> s17 [70, 70] { R11616 += 1, R11572 += 1 };
  s11 -> s18 [70, 70] { R11616 += 1, R11572 += 1, R11282 += 1, R11284 += 1 };
  s11 -> s19 [70, 70] { R11616 += 1, R11572 += 1, R11282 += 1 };
  s11 -> s11 [71, 65535] { R11616 += 1, R11572 += 1, R11282 += 1, R11284 += 1 };
  s11 -> s12 [71, 65535] { R11616 += 1, R11572 += 1 };
  s11 -> s13 [71, 65535] { R11616 += 1, R11572 += 1, R11282 += 1 };
  s12 -> s12 [0, 69] { R11616 += 1, R11572 += 1 };
  s12 -> s20 [0, 65535];
  s12 -> s12 [0, 65535] { R11616 += 1 };
  s12 -> s15 [70, 70] { R11616 += 1, R11572 += 1 };
  s12 -> s17 [70, 70] { R11616 += 1, R11572 += 1 };
  s12 -> s12 [71, 65535] { R11616 += 1, R11572 += 1 };
  s13 -> s12 [0, 69] { R11616 += 1, R11572 += 1 };
  s13 -> s13 [0, 69] { R11616 += 1, R11572 += 1, R11282 += 1 };
  s13 -> s15 [70, 70] { R11616 += 1, R11572 += 1 };
  s13 -> s16 [70, 70] { R11616 += 1, R11572 += 1, R11282 += 1 };
  s13 -> s17 [70, 70] { R11616 += 1, R11572 += 1 };
  s13 -> s19 [70, 70] { R11616 += 1, R11572 += 1, R11282 += 1 };
  s13 -> s12 [71, 65535] { R11616 += 1, R11572 += 1 };
  s13 -> s13 [71, 65535] { R11616 += 1, R11572 += 1, R11282 += 1 };
  s15 -> s20 [0, 65535];
  s15 -> s15 [0, 65535] { R11616 += 1 };
  s17 -> s20 [0, 65535];
  s17 -> s17 [0, 65535] { R11616 += 1, R11572 += 1 };
  s17 -> s21 [0, 65535] { R11616 += 1 };
  s18 -> s18 [0, 65535] { R11616 += 1, R11572 += 1, R11282 += 1, R11284 += 1 };
  s18 -> s17 [0, 65535] { R11616 += 1, R11572 += 1 };
  s18 -> s19 [0, 65535] { R11616 += 1, R11572 += 1, R11282 += 1 };
  s19 -> s17 [0, 65535] { R11616 += 1, R11572 += 1 };
  s19 -> s19 [0, 65535] { R11616 += 1, R11572 += 1, R11282 += 1 };
  s20 -> s20 [0, 65535];
  s21 -> s20 [0, 65535];
  s21 -> s21 [0, 65535] { R11616 += 1 };
  accepting s17, s12, s21, s20, s15;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 69] { R11618 += 1, R11574 += 1, R11509 += 1, R11510 += 1 };
  s0 -> s0 [0, 65535] { R11617 += 1, R11618 += 1 };
  s0 -> s2 [0, 65535] { R11618 += 1, R11573 += 1, R11574 += 1 };
  s0 -> s3 [70, 70] { R11618 += 1, R11574 += 1, R11509 += 1, R11510 += 1 };
  s0 -> s4 [70, 70] { R11618 += 1, R11574 += 1, R11509 += 1, R11510 += 1 };
  s0 -> s1 [71, 65535] { R11618 += 1, R11574 += 1, R11509 += 1, R11510 += 1 };
  s1 -> s1 [0, 69] { R11618 += 1, R11574 += 1, R11509 += 1, R11510 += 1 };
  s1 -> s1 [0, 65535] { R11618 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [70, 70] { R11618 += 1, R11574 += 1, R11509 += 1, R11510 += 1 };
  s1 -> s4 [70, 70] { R11618 += 1, R11574 += 1, R11509 += 1, R11510 += 1 };
  s1 -> s1 [71, 65535] { R11618 += 1, R11574 += 1, R11509 += 1, R11510 += 1 };
  s2 -> s1 [0, 69] { R11618 += 1, R11574 += 1, R11509 += 1, R11510 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R11618 += 1, R11573 += 1, R11574 += 1 };
  s2 -> s3 [70, 70] { R11618 += 1, R11574 += 1, R11509 += 1, R11510 += 1 };
  s2 -> s4 [70, 70] { R11618 += 1, R11574 += 1, R11509 += 1, R11510 += 1 };
  s2 -> s1 [71, 65535] { R11618 += 1, R11574 += 1, R11509 += 1, R11510 += 1 };
  s3 -> s3 [0, 65535] { R11618 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R11618 += 1 };
  s4 -> s4 [0, 65535] { R11618 += 1, R11574 += 1, R11509 += 1, R11510 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R11618 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [102, 102];
  accepting s1;
};
};
constraint R3 = R11618 && R23 - R11618 = -1 && R24 = R11618 && R25 - R11618 = -1 && R26 = R11618 && R27 = 0 && R28 = 1 && R29 = 0 && R30 = 1 && R45 + R84 + R83 + -1*R11286 + -1*R11282 - R66 = 0 && R49 + R89 + R87 = 0 && R50 + R90 + R88 + -1*R11286 + -1*R11282 - R66 = 0 && R55 + R96 + R93 + -1*R11288 + -1*R11284 - R68 = 0 && R65 + R11285 + R11281 = 0 && R67 + R11287 + R11283 = 0 && R11559 = 0 && R11560 = 0 && R11565 = 0 && R11566 = 0 && R11569 = 0 && R11570 = 0 && R11571 = 0 && R11572 = 0 && R11575 = 0 && R11576 = R11618 && R11577 = 0 && R11578 = R11618 && R11579 = 0 && R11580 = R11618 && R11581 = 0 && R11582 = R11618 && R11583 = 0 && R11584 = R11618 && R11585 = 0 && R11586 = R11618 && R11587 = 0 && R11588 = R11618 && R11589 = 0 && R11590 = R11618 && R11591 = 0 && R11592 = R11618 && R11593 = 0 && R11594 = R11618 && R11595 = 0 && R11596 = R11618 && R11597 = 0 && R11598 = R11618 && R11599 = 0 && R11600 = R11618 && R11601 = 0 && R11602 = R11618 && R11603 = 0 && R11604 = R11618 && R11605 = 0 && R11606 = R11618 && R11607 = 0 && R11608 = R11618 && R11609 = 0 && R11610 = R11618 && R11611 = 0 && R11612 = R11618 && R11613 = 0 && R11614 = R11618 && R11615 = 0 && R11616 = R11618 && R11617 = 0 && -1 < R2 && R12 < 1 && R15 < 1 && R16 < 1 && R47 + R86 + R85 < 1 && R61 + R10164 + R10161 < 1 && -1*R11286 + -1*R11282 - R66 < 1 && -1*R11288 + -1*R11284 - R68 < 1 && 0 < R11618 && (R2 != 0 || R20 = 0 || (R11519 = 0 && R11520 = 0)) && (R2 != 0 || R20 = 0 || (R11521 = 0 && R11522 = 0)) && (R2 != 0 || R20 = 0 || (R11523 = 0 && R11524 = 0)) && (R2 != 0 || R20 = 0 || (R11525 = 0 && R11526 = 0)) && (R2 != 0 || R20 = 0 || (R11527 = 0 && R11528 = 0)) && (R2 != 0 || R20 = 0 || (R11529 = 0 && R11530 = 0)) && (R2 != 0 || R20 = 0 || (R11531 = 0 && R11532 = 0)) && (R2 != 0 || R20 = 0 || (R11533 = 0 && R11534 = 0)) && (R2 != 0 || R20 = 0 || (R11535 = 0 && R11536 = 0)) && (R2 != 0 || R20 = 0 || (R11537 = 0 && R11538 = 0)) && (R53 + R94 + R91 != 0 || R54 + R95 + R92 + -1*R11286 + -1*R11282 - R66 = 0 || R66 + R11286 + R11282 < 1) && (R59 + R10162 + R10159 != 0 || R60 + R10163 + R10160 + -1*R11286 + -1*R11282 - R66 = 0 || R66 + R11286 + R11282 < 1) && (R66 + R11286 + R11282 != 0 || ((R53 + R94 + R91 != 0 || R54 + R95 + R92 = 0 || R68 + R11288 + R11284 < 1) && (R53 + R94 + R91 = 0 || R68 + R11288 + R11284 < 1))) && (R66 + R11286 + R11282 != 0 || ((R59 + R10162 + R10159 != 0 || R60 + R10163 + R10160 = 0 || R68 + R11288 + R11284 < 1) && (R59 + R10162 + R10159 = 0 || R68 + R11288 + R11284 < 1))) && (R66 + R11286 + R11282 != 0 || ((R73 + R11514 + R11509 != 0 || R74 + R11515 + R11510 = 0 || R68 + R11288 + R11284 < 1) && (R73 + R11514 + R11509 = 0 || R68 + R11288 + R11284 < 1))) && (R68 + R11288 + R11284 != 0 || R77 + R11518 + R11513 = 0 || (R75 + R11516 + R11511 = 0 && R76 + R11517 + R11512 = 0)) && (R73 + R11514 + R11509 != 0 || R66 + R11286 + R11282 + -1*R11515 + -1*R11510 - R74 = 0 || R66 + R11286 + R11282 < 1) && (R75 + R11516 + R11511 != 0 || R68 + R11288 + R11284 + -1*R11517 + -1*R11512 - R76 = 0 || R68 + R11288 + R11284 < 1) && (R11519 != 0 || R2 = R11520 || R2 < 1) && (R11521 != 0 || R2 = R11522 || R2 < 1) && (R11523 != 0 || R2 = R11524 || R2 < 1) && (R11525 != 0 || R2 = R11526 || R2 < 1) && (R11527 != 0 || R2 = R11528 || R2 < 1) && (R11529 != 0 || R2 = R11530 || R2 < 1) && (R11531 != 0 || R2 = R11532 || R2 < 1) && (R11533 != 0 || R2 = R11534 || R2 < 1) && (R11535 != 0 || R2 = R11536 || R2 < 1) && (R11537 != 0 || R2 = R11538 || R2 < 1) && (R21 = 0 || (R11557 = 0 && R11558 = 0)) && (R21 = 0 || (R11561 = 0 && R11562 = 0)) && (R21 = 0 || (R11563 = 0 && R11564 = 0)) && (R21 = 0 || (R11567 = 0 && R11568 = 0)) && (R21 = 0 || (R11573 = 0 && R11574 = 0)) && (R22 = 0 || (R11539 = 0 && R11540 = 0)) && (R22 = 0 || (R11541 = 0 && R11542 = 0)) && (R22 = 0 || (R11543 = 0 && R11544 = 0)) && (R22 = 0 || (R11545 = 0 && R11546 = 0)) && (R22 = 0 || (R11547 = 0 && R11548 = 0)) && (R22 = 0 || (R11549 = 0 && R11550 = 0)) && (R22 = 0 || (R11551 = 0 && R11552 = 0)) && (R22 = 0 || (R11553 = 0 && R11554 = 0)) && (R22 = 0 || (R11555 = 0 && R11556 = 0)) && (R53 + R94 + R91 = 0 || R66 + R11286 + R11282 < 1) && (R59 + R10162 + R10159 = 0 || R66 + R11286 + R11282 < 1) && (R73 + R11514 + R11509 = 0 || R66 + R11286 + R11282 < 1) && (R75 + R11516 + R11511 = 0 || R68 + R11288 + R11284 < 1) && (R11519 = 0 || R2 < 1) && (R11521 = 0 || R2 < 1) && (R11523 = 0 || R2 < 1) && (R11525 = 0 || R2 < 1) && (R11527 = 0 || R2 < 1) && (R11529 = 0 || R2 < 1) && (R11531 = 0 || R2 < 1) && (R11533 = 0 || R2 < 1) && (R11535 = 0 || R2 < 1) && (R11537 = 0 || R2 < 1);
// End of Parikh automata intersection problem
