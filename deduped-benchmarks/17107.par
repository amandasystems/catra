// Parikh automata intersection problem, generated by OSTRICH+
counter int R12, R15, R16, R2, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R4, R45, R47, R49, R5, R50, R53, R54, R55, R59, R60, R61, R65, R66, R67, R68, R6805, R6806, R6807, R6808, R6809, R6810, R73, R74, R75, R76, R77, R7927, R7928, R7929, R7930, R7931, R7932, R7933, R7934, R83, R8375, R8376, R8377, R8378, R8379, R8380, R8381, R8382, R8383, R8384, R8385, R8386, R8387, R8388, R8389, R8390, R8391, R8392, R8393, R8394, R8395, R8396, R8397, R8398, R8399, R84, R8400, R8401, R8402, R8403, R8404, R8405, R8406, R8407, R8408, R8409, R8410, R8411, R8412, R8413, R8414, R8415, R8416, R8417, R8418, R8419, R8420, R8421, R8422, R8423, R8424, R8425, R8426, R8427, R8428, R8429, R8430, R8431, R8432, R8433, R8434, R8435, R8436, R8437, R8438, R8439, R8440, R8441, R8442, R8443, R8444, R8445, R8446, R8447, R8448, R8449, R8450, R8451, R8452, R8453, R8454, R8455, R8456, R8457, R8458, R8459, R8460, R8461, R8462, R8463, R8464, R8465, R8466, R8467, R8468, R8469, R8470, R8471, R8472, R8473, R8474, R8475, R8476, R8477, R8478, R8479, R8480, R8481, R8482, R8483, R8484, R85, R86, R87, R88, R89, R90, R91, R92, R93, R94, R95, R96;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [70, 70];
  s0 -> s0 [71, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [70, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R15 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 69];
  s0 -> s0 [0, 65535] { R16 += 1 };
  s0 -> s2 [70, 70];
  s0 -> s1 [71, 65535];
  s1 -> s1 [0, 69];
  s1 -> s2 [70, 70];
  s1 -> s1 [71, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R24 += 1 };
  s0 -> s0 [0, 65535] { R23 += 1, R24 += 1 };
  s0 -> s2 [9, 13] { R24 += 1 };
  s0 -> s1 [14, 31] { R24 += 1 };
  s0 -> s2 [32, 32] { R24 += 1 };
  s0 -> s1 [33, 65535] { R24 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R24 += 1 };
  s2 -> s1 [0, 65535] { R24 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R25 += 1, R26 += 1 };
  s1 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R28 += 1 };
  s0 -> s0 [0, 65535] { R27 += 1, R28 += 1 };
  s0 -> s2 [9, 13] { R28 += 1 };
  s0 -> s1 [14, 31] { R28 += 1 };
  s0 -> s2 [32, 32] { R28 += 1 };
  s0 -> s1 [33, 65535] { R28 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R28 += 1 };
  s2 -> s1 [0, 65535] { R28 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R29 += 1, R30 += 1 };
  s1 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R8405 += 1, R8406 += 1 };
  s0 -> s1 [0, 65535] { R8406 += 1, R22 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R8406 += 1, R22 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 69] { R8408 += 1 };
  s0 -> s0 [0, 65535] { R8407 += 1, R8408 += 1 };
  s0 -> s2 [70, 70] { R8408 += 1 };
  s0 -> s3 [70, 70] { R8408 += 1 };
  s0 -> s1 [76, 65535] { R8408 += 1 };
  s1 -> s1 [0, 69] { R8408 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R8408 += 1 };
  s1 -> s3 [70, 70] { R8408 += 1 };
  s1 -> s1 [76, 65535] { R8408 += 1 };
  s2 -> s2 [0, 70] { R8408 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [76, 65535] { R8408 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 69] { R8410 += 1, R45 += 1 };
  s0 -> s0 [0, 65535] { R8409 += 1, R8410 += 1 };
  s0 -> s2 [70, 70] { R8410 += 1, R45 += 1 };
  s0 -> s3 [70, 70] { R8410 += 1, R45 += 1 };
  s0 -> s1 [71, 65535] { R8410 += 1, R45 += 1 };
  s1 -> s1 [0, 69] { R8410 += 1, R45 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R8410 += 1, R45 += 1 };
  s1 -> s3 [70, 70] { R8410 += 1, R45 += 1 };
  s1 -> s1 [71, 65535] { R8410 += 1, R45 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R8410 += 1, R45 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 69] { R8412 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R8411 += 1, R8412 += 1 };
  s0 -> s2 [70, 70] { R8412 += 1, R47 += 1 };
  s0 -> s3 [70, 70] { R8412 += 1, R47 += 1 };
  s0 -> s1 [71, 65535] { R8412 += 1, R47 += 1 };
  s1 -> s1 [0, 69] { R8412 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R8412 += 1, R47 += 1 };
  s1 -> s3 [70, 70] { R8412 += 1, R47 += 1 };
  s1 -> s1 [71, 65535] { R8412 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8412 += 1, R47 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 69] { R8414 += 1, R49 += 1, R50 += 1 };
  s0 -> s0 [0, 65535] { R8413 += 1, R8414 += 1 };
  s0 -> s2 [70, 70] { R8414 += 1, R49 += 1, R50 += 1 };
  s0 -> s3 [70, 70] { R8414 += 1, R49 += 1, R50 += 1 };
  s0 -> s1 [71, 65535] { R8414 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 69] { R8414 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R8414 += 1, R49 += 1, R50 += 1 };
  s1 -> s3 [70, 70] { R8414 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [71, 65535] { R8414 += 1, R49 += 1, R50 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8414 += 1, R49 += 1, R50 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 69] { R8416 += 1, R53 += 1, R54 += 1 };
  s0 -> s0 [0, 65535] { R8415 += 1, R8416 += 1 };
  s0 -> s2 [70, 70] { R8416 += 1, R53 += 1, R54 += 1 };
  s0 -> s3 [70, 70] { R8416 += 1, R53 += 1, R54 += 1 };
  s0 -> s1 [71, 65535] { R8416 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 69] { R8416 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R8416 += 1, R53 += 1, R54 += 1 };
  s1 -> s3 [70, 70] { R8416 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [71, 65535] { R8416 += 1, R53 += 1, R54 += 1 };
  s2 -> s2 [0, 65535] { R8416 += 1, R53 += 1, R54 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 69] { R8418 += 1, R59 += 1, R60 += 1 };
  s0 -> s0 [0, 65535] { R8417 += 1, R8418 += 1 };
  s0 -> s2 [70, 70] { R8418 += 1, R59 += 1, R60 += 1 };
  s0 -> s3 [70, 70] { R8418 += 1, R59 += 1, R60 += 1 };
  s0 -> s1 [71, 65535] { R8418 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 69] { R8418 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R8418 += 1, R59 += 1, R60 += 1 };
  s1 -> s3 [70, 70] { R8418 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [71, 65535] { R8418 += 1, R59 += 1, R60 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8418 += 1, R59 += 1, R60 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 69] { R8420 += 1, R65 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R8419 += 1, R8420 += 1 };
  s0 -> s2 [70, 70] { R8420 += 1, R65 += 1, R66 += 1 };
  s0 -> s3 [70, 70] { R8420 += 1, R65 += 1, R66 += 1 };
  s0 -> s1 [71, 65535] { R8420 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 69] { R8420 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R8420 += 1, R65 += 1, R66 += 1 };
  s1 -> s3 [70, 70] { R8420 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [71, 65535] { R8420 += 1, R65 += 1, R66 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8420 += 1, R65 += 1, R66 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 69] { R8422 += 1, R73 += 1, R74 += 1 };
  s0 -> s0 [0, 65535] { R8421 += 1, R8422 += 1 };
  s0 -> s2 [70, 70] { R8422 += 1, R73 += 1, R74 += 1 };
  s0 -> s3 [70, 70] { R8422 += 1, R73 += 1, R74 += 1 };
  s0 -> s1 [71, 65535] { R8422 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 69] { R8422 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R8422 += 1, R73 += 1, R74 += 1 };
  s1 -> s3 [70, 70] { R8422 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [71, 65535] { R8422 += 1, R73 += 1, R74 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8422 += 1, R73 += 1, R74 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 69] { R8442 += 1 };
  s0 -> s0 [0, 65535] { R8441 += 1, R8442 += 1 };
  s0 -> s2 [70, 70] { R8442 += 1 };
  s0 -> s1 [71, 65535] { R8442 += 1 };
  s1 -> s1 [0, 69] { R8442 += 1 };
  s1 -> s2 [70, 70] { R8442 += 1 };
  s1 -> s1 [71, 65535] { R8442 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R8442 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R8444 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R8443 += 1, R8444 += 1 };
  s1 -> s1 [0, 65535] { R8444 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 69] { R8446 += 1 };
  s0 -> s0 [0, 65535] { R8445 += 1, R8446 += 1 };
  s0 -> s2 [0, 65535] { R8446 += 1, R12 += 1 };
  s0 -> s3 [70, 70] { R8446 += 1 };
  s0 -> s1 [71, 65535] { R8446 += 1 };
  s1 -> s1 [0, 69] { R8446 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [70, 70] { R8446 += 1 };
  s1 -> s1 [71, 65535] { R8446 += 1 };
  s2 -> s1 [0, 69] { R8446 += 1 };
  s2 -> s2 [0, 65535] { R8446 += 1, R12 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [70, 70] { R8446 += 1 };
  s2 -> s1 [71, 65535] { R8446 += 1 };
  s3 -> s3 [0, 65535] { R8446 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 69] { R8448 += 1, R8386 += 1 };
  s0 -> s2 [0, 65535] { R8448 += 1, R8385 += 1, R8386 += 1 };
  s0 -> s0 [0, 65535] { R8447 += 1, R8448 += 1 };
  s0 -> s1 [71, 65535] { R8448 += 1, R8386 += 1 };
  s1 -> s1 [0, 69] { R8448 += 1, R8386 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R8448 += 1 };
  s1 -> s1 [71, 65535] { R8448 += 1, R8386 += 1 };
  s2 -> s1 [0, 69] { R8448 += 1, R8386 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R8448 += 1, R8385 += 1, R8386 += 1 };
  s2 -> s1 [71, 65535] { R8448 += 1, R8386 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R8450 += 1, R8387 += 1, R8388 += 1 };
  s0 -> s0 [0, 65535] { R8449 += 1, R8450 += 1 };
  s0 -> s2 [0, 65535] { R8450 += 1, R8388 += 1, R20 += 1 };
  s1 -> s1 [0, 65535] { R8450 += 1, R8387 += 1, R8388 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R8450 += 1, R8388 += 1, R20 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R8450 += 1 };
  s2 -> s2 [0, 65535] { R8450 += 1, R8388 += 1, R20 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8450 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 70] { R8452 += 1, R8390 += 1 };
  s0 -> s0 [0, 65535] { R8451 += 1, R8452 += 1 };
  s0 -> s2 [0, 65535] { R8452 += 1, R8389 += 1, R8390 += 1 };
  s0 -> s1 [75, 65535] { R8452 += 1, R8390 += 1 };
  s1 -> s1 [0, 70] { R8452 += 1, R8390 += 1 };
  s1 -> s1 [0, 65535] { R8452 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [75, 65535] { R8452 += 1, R8390 += 1 };
  s2 -> s1 [0, 70] { R8452 += 1, R8390 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R8452 += 1, R8389 += 1, R8390 += 1 };
  s2 -> s1 [75, 65535] { R8452 += 1, R8390 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R8454 += 1, R8391 += 1, R8392 += 1 };
  s0 -> s0 [0, 65535] { R8453 += 1, R8454 += 1 };
  s0 -> s2 [0, 65535] { R8454 += 1, R8392 += 1, R84 += 1 };
  s1 -> s1 [0, 65535] { R8454 += 1, R8391 += 1, R8392 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R8454 += 1, R8392 += 1, R84 += 1 };
  s2 -> s3 [0, 65535] { R8454 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8454 += 1, R8392 += 1, R84 += 1 };
  s3 -> s3 [0, 65535] { R8454 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 74] { R8456 += 1, R8394 += 1 };
  s0 -> s2 [0, 65535] { R8456 += 1, R8394 += 1, R86 += 1 };
  s0 -> s0 [0, 65535] { R8455 += 1, R8456 += 1 };
  s0 -> s3 [0, 65535] { R8456 += 1, R8393 += 1, R8394 += 1 };
  s0 -> s1 [76, 65535] { R8456 += 1, R8394 += 1 };
  s1 -> s1 [0, 74] { R8456 += 1, R8394 += 1 };
  s1 -> s1 [0, 65535] { R8456 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [76, 65535] { R8456 += 1, R8394 += 1 };
  s2 -> s1 [0, 74] { R8456 += 1, R8394 += 1 };
  s2 -> s2 [0, 65535] { R8456 += 1, R8394 += 1, R86 += 1 };
  s2 -> s5 [0, 65535] { R8456 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [76, 65535] { R8456 += 1, R8394 += 1 };
  s3 -> s1 [0, 74] { R8456 += 1, R8394 += 1 };
  s3 -> s2 [0, 65535] { R8456 += 1, R8394 += 1, R86 += 1 };
  s3 -> s3 [0, 65535] { R8456 += 1, R8393 += 1, R8394 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [76, 65535] { R8456 += 1, R8394 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8456 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s0 [0, 65535] { R8457 += 1, R8458 += 1 };
  s0 -> s1 [0, 65535] { R8458 += 1, R8396 += 1 };
  s0 -> s2 [0, 65535] { R8458 += 1, R8395 += 1, R8396 += 1 };
  s0 -> s3 [0, 65535] { R8458 += 1, R8396 += 1, R90 += 1 };
  s1 -> s1 [0, 65535] { R8458 += 1, R8396 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R8458 += 1 };
  s2 -> s1 [0, 65535] { R8458 += 1, R8396 += 1 };
  s2 -> s2 [0, 65535] { R8458 += 1, R8395 += 1, R8396 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R8458 += 1, R8396 += 1, R90 += 1 };
  s3 -> s1 [0, 65535] { R8458 += 1, R8396 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8458 += 1, R8396 += 1, R90 += 1 };
  s3 -> s5 [0, 65535] { R8458 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8458 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R8460 += 1, R8398 += 1, R94 += 1, R95 += 1 };
  s0 -> s2 [0, 65535] { R8460 += 1, R8398 += 1, R95 += 1, R96 += 1 };
  s0 -> s0 [0, 65535] { R8459 += 1, R8460 += 1 };
  s0 -> s3 [0, 65535] { R8460 += 1, R8397 += 1, R8398 += 1 };
  s1 -> s1 [0, 65535] { R8460 += 1, R8398 += 1, R94 += 1, R95 += 1 };
  s1 -> s6 [0, 65535] { R8460 += 1 };
  s1 -> s2 [0, 65535] { R8460 += 1, R8398 += 1, R95 += 1, R96 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R8460 += 1, R8398 += 1 };
  s2 -> s6 [0, 65535] { R8460 += 1 };
  s2 -> s2 [0, 65535] { R8460 += 1, R8398 += 1, R95 += 1, R96 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R8460 += 1, R8398 += 1, R94 += 1, R95 += 1 };
  s3 -> s2 [0, 65535] { R8460 += 1, R8398 += 1, R95 += 1, R96 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8460 += 1, R8397 += 1, R8398 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8460 += 1, R8398 += 1 };
  s5 -> s6 [0, 65535] { R8460 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R8460 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 74] { R8462 += 1, R8400 += 1, R6809 += 1 };
  s0 -> s2 [0, 65535] { R8462 += 1, R8399 += 1, R8400 += 1 };
  s0 -> s0 [0, 65535] { R8461 += 1, R8462 += 1 };
  s0 -> s3 [0, 65535] { R8462 += 1, R8400 += 1 };
  s0 -> s4 [0, 65535] { R8462 += 1, R8400 += 1, R6809 += 1, R6810 += 1 };
  s0 -> s1 [76, 65535] { R8462 += 1, R8400 += 1, R6809 += 1 };
  s1 -> s1 [0, 74] { R8462 += 1, R8400 += 1, R6809 += 1 };
  s1 -> s5 [0, 65535] { R8462 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R8462 += 1, R8400 += 1 };
  s1 -> s1 [76, 65535] { R8462 += 1, R8400 += 1, R6809 += 1 };
  s2 -> s1 [0, 74] { R8462 += 1, R8400 += 1, R6809 += 1 };
  s2 -> s2 [0, 65535] { R8462 += 1, R8399 += 1, R8400 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R8462 += 1, R8400 += 1 };
  s2 -> s4 [0, 65535] { R8462 += 1, R8400 += 1, R6809 += 1, R6810 += 1 };
  s2 -> s1 [76, 65535] { R8462 += 1, R8400 += 1, R6809 += 1 };
  s3 -> s5 [0, 65535] { R8462 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R8462 += 1, R8400 += 1 };
  s4 -> s1 [0, 74] { R8462 += 1, R8400 += 1, R6809 += 1 };
  s4 -> s5 [0, 65535] { R8462 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s3 [0, 65535] { R8462 += 1, R8400 += 1 };
  s4 -> s4 [0, 65535] { R8462 += 1, R8400 += 1, R6809 += 1, R6810 += 1 };
  s4 -> s1 [76, 65535] { R8462 += 1, R8400 += 1, R6809 += 1 };
  s5 -> s5 [0, 65535] { R8462 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R8464 += 1, R8402 += 1 };
  s0 -> s0 [0, 65535] { R8463 += 1, R8464 += 1 };
  s0 -> s2 [0, 65535] { R8464 += 1, R8401 += 1, R8402 += 1 };
  s1 -> s1 [0, 65535] { R8464 += 1, R8402 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R8464 += 1 };
  s2 -> s1 [0, 65535] { R8464 += 1, R8402 += 1 };
  s2 -> s2 [0, 65535] { R8464 += 1, R8401 += 1, R8402 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8464 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s0 [0, 65535] { R8465 += 1, R8466 += 1 };
  s0 -> s1 [0, 65535] { R8466 += 1, R8404 += 1 };
  s0 -> s2 [0, 65535] { R8466 += 1, R8404 += 1, R8381 += 1, R8383 += 1, R8384 += 1 };
  s0 -> s3 [0, 65535] { R8466 += 1, R8404 += 1, R8381 += 1, R8382 += 1, R8383 += 1 };
  s0 -> s4 [0, 65535] { R8466 += 1, R8403 += 1, R8404 += 1 };
  s1 -> s6 [0, 65535] { R8466 += 1 };
  s1 -> s1 [0, 65535] { R8466 += 1, R8404 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s7 [0, 65535] { R8466 += 1, R8404 += 1, R8381 += 1 };
  s2 -> s6 [0, 65535] { R8466 += 1 };
  s2 -> s1 [0, 65535] { R8466 += 1, R8404 += 1 };
  s2 -> s2 [0, 65535] { R8466 += 1, R8404 += 1, R8381 += 1, R8383 += 1, R8384 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R8466 += 1 };
  s3 -> s1 [0, 65535] { R8466 += 1, R8404 += 1 };
  s3 -> s2 [0, 65535] { R8466 += 1, R8404 += 1, R8381 += 1, R8383 += 1, R8384 += 1 };
  s3 -> s3 [0, 65535] { R8466 += 1, R8404 += 1, R8381 += 1, R8382 += 1, R8383 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s1 [0, 65535] { R8466 += 1, R8404 += 1 };
  s4 -> s2 [0, 65535] { R8466 += 1, R8404 += 1, R8381 += 1, R8383 += 1, R8384 += 1 };
  s4 -> s3 [0, 65535] { R8466 += 1, R8404 += 1, R8381 += 1, R8382 += 1, R8383 += 1 };
  s4 -> s4 [0, 65535] { R8466 += 1, R8403 += 1, R8404 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8466 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R8466 += 1, R8404 += 1, R8381 += 1 };
  s7 -> s6 [0, 65535] { R8466 += 1 };
  s7 -> s1 [0, 65535] { R8466 += 1, R8404 += 1 };
  s7 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R8468 += 1, R8423 += 1, R8424 += 1 };
  s0 -> s0 [0, 65535] { R8467 += 1, R8468 += 1 };
  s0 -> s2 [0, 65535] { R8468 += 1, R8424 += 1, R21 += 1 };
  s1 -> s1 [0, 65535] { R8468 += 1, R8423 += 1, R8424 += 1 };
  s1 -> s2 [0, 65535] { R8468 += 1, R8424 += 1, R21 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R8468 += 1 };
  s2 -> s2 [0, 65535] { R8468 += 1, R8424 += 1, R21 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8468 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 69] { R8470 += 1, R8426 += 1 };
  s0 -> s2 [0, 65535] { R8470 += 1, R8425 += 1, R8426 += 1 };
  s0 -> s0 [0, 65535] { R8469 += 1, R8470 += 1 };
  s0 -> s3 [70, 70] { R8470 += 1, R8426 += 1 };
  s0 -> s4 [70, 70] { R8470 += 1, R8426 += 1 };
  s0 -> s5 [75, 75] { R8470 += 1, R8426 += 1 };
  s0 -> s1 [76, 65535] { R8470 += 1, R8426 += 1 };
  s1 -> s1 [0, 69] { R8470 += 1, R8426 += 1 };
  s1 -> s3 [70, 70] { R8470 += 1, R8426 += 1 };
  s1 -> s4 [70, 70] { R8470 += 1, R8426 += 1 };
  s1 -> s5 [75, 75] { R8470 += 1, R8426 += 1 };
  s1 -> s1 [76, 65535] { R8470 += 1, R8426 += 1 };
  s2 -> s1 [0, 69] { R8470 += 1, R8426 += 1 };
  s2 -> s2 [0, 65535] { R8470 += 1, R8425 += 1, R8426 += 1 };
  s2 -> s3 [70, 70] { R8470 += 1, R8426 += 1 };
  s2 -> s4 [70, 70] { R8470 += 1, R8426 += 1 };
  s2 -> s5 [75, 75] { R8470 += 1, R8426 += 1 };
  s2 -> s1 [76, 65535] { R8470 += 1, R8426 += 1 };
  s3 -> s3 [0, 70] { R8470 += 1, R8426 += 1 };
  s3 -> s8 [75, 75] { R8470 += 1, R8426 += 1 };
  s3 -> s3 [76, 65535] { R8470 += 1, R8426 += 1 };
  s5 -> s5 [0, 69] { R8470 += 1, R8426 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R8470 += 1 };
  s5 -> s7 [70, 70] { R8470 += 1, R8426 += 1 };
  s5 -> s8 [70, 70] { R8470 += 1, R8426 += 1 };
  s5 -> s5 [75, 65535] { R8470 += 1, R8426 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R8470 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 70] { R8470 += 1, R8426 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R8470 += 1 };
  s8 -> s8 [75, 65535] { R8470 += 1, R8426 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 69] { R8472 += 1, R8428 += 1, R83 += 1 };
  s0 -> s0 [0, 65535] { R8471 += 1, R8472 += 1 };
  s0 -> s2 [0, 65535] { R8472 += 1, R8427 += 1, R8428 += 1 };
  s0 -> s3 [70, 70] { R8472 += 1, R8428 += 1, R83 += 1 };
  s0 -> s4 [70, 70] { R8472 += 1, R8428 += 1, R83 += 1 };
  s0 -> s1 [71, 65535] { R8472 += 1, R8428 += 1, R83 += 1 };
  s1 -> s1 [0, 69] { R8472 += 1, R8428 += 1, R83 += 1 };
  s1 -> s1 [0, 65535] { R8472 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [70, 70] { R8472 += 1, R8428 += 1, R83 += 1 };
  s1 -> s4 [70, 70] { R8472 += 1, R8428 += 1, R83 += 1 };
  s1 -> s1 [71, 65535] { R8472 += 1, R8428 += 1, R83 += 1 };
  s2 -> s1 [0, 69] { R8472 += 1, R8428 += 1, R83 += 1 };
  s2 -> s2 [0, 65535] { R8472 += 1, R8427 += 1, R8428 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [70, 70] { R8472 += 1, R8428 += 1, R83 += 1 };
  s2 -> s4 [70, 70] { R8472 += 1, R8428 += 1, R83 += 1 };
  s2 -> s1 [71, 65535] { R8472 += 1, R8428 += 1, R83 += 1 };
  s3 -> s3 [0, 65535] { R8472 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R8472 += 1 };
  s4 -> s4 [0, 65535] { R8472 += 1, R8428 += 1, R83 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R8472 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 69] { R8474 += 1, R8430 += 1, R85 += 1 };
  s0 -> s2 [0, 65535] { R8474 += 1, R8429 += 1, R8430 += 1 };
  s0 -> s0 [0, 65535] { R8473 += 1, R8474 += 1 };
  s0 -> s3 [70, 70] { R8474 += 1, R8430 += 1, R85 += 1 };
  s0 -> s4 [70, 70] { R8474 += 1, R8430 += 1, R85 += 1 };
  s0 -> s1 [71, 65535] { R8474 += 1, R8430 += 1, R85 += 1 };
  s1 -> s1 [0, 69] { R8474 += 1, R8430 += 1, R85 += 1 };
  s1 -> s1 [0, 65535] { R8474 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [70, 70] { R8474 += 1, R8430 += 1, R85 += 1 };
  s1 -> s4 [70, 70] { R8474 += 1, R8430 += 1, R85 += 1 };
  s1 -> s1 [71, 65535] { R8474 += 1, R8430 += 1, R85 += 1 };
  s2 -> s1 [0, 69] { R8474 += 1, R8430 += 1, R85 += 1 };
  s2 -> s2 [0, 65535] { R8474 += 1, R8429 += 1, R8430 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [70, 70] { R8474 += 1, R8430 += 1, R85 += 1 };
  s2 -> s4 [70, 70] { R8474 += 1, R8430 += 1, R85 += 1 };
  s2 -> s1 [71, 65535] { R8474 += 1, R8430 += 1, R85 += 1 };
  s3 -> s3 [0, 65535] { R8474 += 1, R8430 += 1, R85 += 1 };
  s3 -> s6 [0, 65535] { R8474 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8474 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8474 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 69] { R8476 += 1, R8432 += 1, R88 += 1 };
  s0 -> s2 [0, 69] { R8476 += 1, R8432 += 1, R87 += 1, R88 += 1 };
  s0 -> s0 [0, 65535] { R8475 += 1, R8476 += 1 };
  s0 -> s3 [0, 65535] { R8476 += 1, R8431 += 1, R8432 += 1 };
  s0 -> s4 [70, 70] { R8476 += 1, R8432 += 1, R87 += 1, R88 += 1 };
  s0 -> s5 [70, 70] { R8476 += 1, R8432 += 1, R88 += 1 };
  s0 -> s6 [70, 70] { R8476 += 1, R8432 += 1, R87 += 1, R88 += 1 };
  s0 -> s7 [70, 70] { R8476 += 1, R8432 += 1, R88 += 1 };
  s0 -> s1 [71, 74] { R8476 += 1, R8432 += 1, R88 += 1 };
  s0 -> s2 [71, 65535] { R8476 += 1, R8432 += 1, R87 += 1, R88 += 1 };
  s0 -> s8 [75, 75] { R8476 += 1, R8432 += 1, R88 += 1 };
  s0 -> s1 [76, 65535] { R8476 += 1, R8432 += 1, R88 += 1 };
  s1 -> s1 [0, 69] { R8476 += 1, R8432 += 1, R88 += 1 };
  s1 -> s5 [70, 70] { R8476 += 1, R8432 += 1, R88 += 1 };
  s1 -> s7 [70, 70] { R8476 += 1, R8432 += 1, R88 += 1 };
  s1 -> s1 [71, 74] { R8476 += 1, R8432 += 1, R88 += 1 };
  s1 -> s8 [75, 75] { R8476 += 1, R8432 += 1, R88 += 1 };
  s1 -> s1 [76, 65535] { R8476 += 1, R8432 += 1, R88 += 1 };
  s2 -> s1 [0, 69] { R8476 += 1, R8432 += 1, R88 += 1 };
  s2 -> s2 [0, 69] { R8476 += 1, R8432 += 1, R87 += 1, R88 += 1 };
  s2 -> s4 [70, 70] { R8476 += 1, R8432 += 1, R87 += 1, R88 += 1 };
  s2 -> s5 [70, 70] { R8476 += 1, R8432 += 1, R88 += 1 };
  s2 -> s6 [70, 70] { R8476 += 1, R8432 += 1, R87 += 1, R88 += 1 };
  s2 -> s7 [70, 70] { R8476 += 1, R8432 += 1, R88 += 1 };
  s2 -> s1 [71, 74] { R8476 += 1, R8432 += 1, R88 += 1 };
  s2 -> s2 [71, 65535] { R8476 += 1, R8432 += 1, R87 += 1, R88 += 1 };
  s2 -> s8 [75, 75] { R8476 += 1, R8432 += 1, R88 += 1 };
  s2 -> s1 [76, 65535] { R8476 += 1, R8432 += 1, R88 += 1 };
  s3 -> s1 [0, 69] { R8476 += 1, R8432 += 1, R88 += 1 };
  s3 -> s2 [0, 69] { R8476 += 1, R8432 += 1, R87 += 1, R88 += 1 };
  s3 -> s3 [0, 65535] { R8476 += 1, R8431 += 1, R8432 += 1 };
  s3 -> s4 [70, 70] { R8476 += 1, R8432 += 1, R87 += 1, R88 += 1 };
  s3 -> s5 [70, 70] { R8476 += 1, R8432 += 1, R88 += 1 };
  s3 -> s6 [70, 70] { R8476 += 1, R8432 += 1, R87 += 1, R88 += 1 };
  s3 -> s7 [70, 70] { R8476 += 1, R8432 += 1, R88 += 1 };
  s3 -> s1 [71, 74] { R8476 += 1, R8432 += 1, R88 += 1 };
  s3 -> s2 [71, 65535] { R8476 += 1, R8432 += 1, R87 += 1, R88 += 1 };
  s3 -> s8 [75, 75] { R8476 += 1, R8432 += 1, R88 += 1 };
  s3 -> s1 [76, 65535] { R8476 += 1, R8432 += 1, R88 += 1 };
  s5 -> s5 [0, 74] { R8476 += 1, R8432 += 1, R88 += 1 };
  s5 -> s10 [75, 75] { R8476 += 1, R8432 += 1, R88 += 1 };
  s5 -> s5 [76, 65535] { R8476 += 1, R8432 += 1, R88 += 1 };
  s6 -> s5 [0, 74] { R8476 += 1, R8432 += 1, R88 += 1 };
  s6 -> s6 [0, 65535] { R8476 += 1, R8432 += 1, R87 += 1, R88 += 1 };
  s6 -> s10 [75, 75] { R8476 += 1, R8432 += 1, R88 += 1 };
  s6 -> s5 [76, 65535] { R8476 += 1, R8432 += 1, R88 += 1 };
  s8 -> s8 [0, 69] { R8476 += 1, R8432 += 1, R88 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R8476 += 1 };
  s8 -> s10 [70, 70] { R8476 += 1, R8432 += 1, R88 += 1 };
  s8 -> s11 [70, 70] { R8476 += 1, R8432 += 1, R88 += 1 };
  s8 -> s8 [71, 65535] { R8476 += 1, R8432 += 1, R88 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R8476 += 1, R8432 += 1, R88 += 1 };
  s10 -> s12 [0, 65535] { R8476 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R8476 += 1 };
  s11 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R8476 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 69] { R8478 += 1, R8434 += 1, R91 += 1, R92 += 1 };
  s0 -> s2 [0, 65535] { R8478 += 1, R8433 += 1, R8434 += 1 };
  s0 -> s0 [0, 65535] { R8477 += 1, R8478 += 1 };
  s0 -> s3 [70, 70] { R8478 += 1, R8434 += 1, R91 += 1, R92 += 1 };
  s0 -> s4 [70, 70] { R8478 += 1, R8434 += 1, R91 += 1, R92 += 1 };
  s0 -> s1 [71, 65535] { R8478 += 1, R8434 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 69] { R8478 += 1, R8434 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 65535] { R8478 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [70, 70] { R8478 += 1, R8434 += 1, R91 += 1, R92 += 1 };
  s1 -> s4 [70, 70] { R8478 += 1, R8434 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [71, 65535] { R8478 += 1, R8434 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [0, 69] { R8478 += 1, R8434 += 1, R91 += 1, R92 += 1 };
  s2 -> s2 [0, 65535] { R8478 += 1, R8433 += 1, R8434 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [70, 70] { R8478 += 1, R8434 += 1, R91 += 1, R92 += 1 };
  s2 -> s4 [70, 70] { R8478 += 1, R8434 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [71, 65535] { R8478 += 1, R8434 += 1, R91 += 1, R92 += 1 };
  s3 -> s3 [0, 65535] { R8478 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8478 += 1, R8434 += 1, R91 += 1, R92 += 1 };
  s4 -> s6 [0, 65535] { R8478 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8478 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 69] { R8480 += 1, R8436 += 1, R6806 += 1, R6807 += 1 };
  s0 -> s2 [0, 69] { R8480 += 1, R8436 += 1, R6805 += 1, R6806 += 1 };
  s0 -> s3 [0, 65535] { R8480 += 1, R8435 += 1, R8436 += 1 };
  s0 -> s0 [0, 65535] { R8479 += 1, R8480 += 1 };
  s0 -> s4 [70, 70] { R8480 += 1, R8436 += 1, R6806 += 1, R6807 += 1 };
  s0 -> s5 [70, 70] { R8480 += 1, R8436 += 1, R6806 += 1, R6807 += 1 };
  s0 -> s6 [70, 70] { R8480 += 1, R8436 += 1, R6805 += 1, R6806 += 1 };
  s0 -> s7 [70, 70] { R8480 += 1, R8436 += 1, R6805 += 1, R6806 += 1 };
  s0 -> s1 [71, 65535] { R8480 += 1, R8436 += 1, R6806 += 1, R6807 += 1 };
  s0 -> s2 [71, 65535] { R8480 += 1, R8436 += 1, R6805 += 1, R6806 += 1 };
  s1 -> s1 [0, 69] { R8480 += 1, R8436 += 1, R6806 += 1, R6807 += 1 };
  s1 -> s1 [0, 65535] { R8480 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s4 [70, 70] { R8480 += 1, R8436 += 1, R6806 += 1, R6807 += 1 };
  s1 -> s5 [70, 70] { R8480 += 1, R8436 += 1, R6806 += 1, R6807 += 1 };
  s1 -> s1 [71, 65535] { R8480 += 1, R8436 += 1, R6806 += 1, R6807 += 1 };
  s2 -> s1 [0, 69] { R8480 += 1, R8436 += 1, R6806 += 1, R6807 += 1 };
  s2 -> s2 [0, 69] { R8480 += 1, R8436 += 1, R6805 += 1, R6806 += 1 };
  s2 -> s4 [70, 70] { R8480 += 1, R8436 += 1, R6806 += 1, R6807 += 1 };
  s2 -> s5 [70, 70] { R8480 += 1, R8436 += 1, R6806 += 1, R6807 += 1 };
  s2 -> s6 [70, 70] { R8480 += 1, R8436 += 1, R6805 += 1, R6806 += 1 };
  s2 -> s7 [70, 70] { R8480 += 1, R8436 += 1, R6805 += 1, R6806 += 1 };
  s2 -> s1 [71, 65535] { R8480 += 1, R8436 += 1, R6806 += 1, R6807 += 1 };
  s2 -> s2 [71, 65535] { R8480 += 1, R8436 += 1, R6805 += 1, R6806 += 1 };
  s3 -> s1 [0, 69] { R8480 += 1, R8436 += 1, R6806 += 1, R6807 += 1 };
  s3 -> s2 [0, 69] { R8480 += 1, R8436 += 1, R6805 += 1, R6806 += 1 };
  s3 -> s3 [0, 65535] { R8480 += 1, R8435 += 1, R8436 += 1 };
  s3 -> s4 [70, 70] { R8480 += 1, R8436 += 1, R6806 += 1, R6807 += 1 };
  s3 -> s5 [70, 70] { R8480 += 1, R8436 += 1, R6806 += 1, R6807 += 1 };
  s3 -> s6 [70, 70] { R8480 += 1, R8436 += 1, R6805 += 1, R6806 += 1 };
  s3 -> s7 [70, 70] { R8480 += 1, R8436 += 1, R6805 += 1, R6806 += 1 };
  s3 -> s1 [71, 65535] { R8480 += 1, R8436 += 1, R6806 += 1, R6807 += 1 };
  s3 -> s2 [71, 65535] { R8480 += 1, R8436 += 1, R6805 += 1, R6806 += 1 };
  s4 -> s4 [0, 65535] { R8480 += 1 };
  s4 -> s8 [0, 65535];
  s5 -> s8 [0, 65535];
  s5 -> s5 [0, 65535] { R8480 += 1, R8436 += 1, R6806 += 1, R6807 += 1 };
  s5 -> s9 [0, 65535] { R8480 += 1 };
  s7 -> s5 [0, 65535] { R8480 += 1, R8436 += 1, R6806 += 1, R6807 += 1 };
  s7 -> s7 [0, 65535] { R8480 += 1, R8436 += 1, R6805 += 1, R6806 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R8480 += 1 };
  accepting s4, s8, s5, s9, s1;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 69] { R8482 += 1, R8438 += 1, R7928 += 1, R7930 += 1 };
  s0 -> s2 [0, 69] { R8482 += 1, R8438 += 1, R7928 += 1, R7929 += 1, R7930 += 1 };
  s0 -> s3 [0, 69] { R8482 += 1, R8438 += 1, R7927 += 1, R7928 += 1 };
  s0 -> s0 [0, 65535] { R8481 += 1, R8482 += 1 };
  s0 -> s4 [0, 65535] { R8482 += 1, R8437 += 1, R8438 += 1 };
  s0 -> s5 [70, 70] { R8482 += 1, R8438 += 1, R7928 += 1, R7930 += 1 };
  s0 -> s6 [70, 70] { R8482 += 1, R8438 += 1, R7927 += 1, R7928 += 1 };
  s0 -> s7 [70, 70] { R8482 += 1, R8438 += 1, R7928 += 1, R7929 += 1, R7930 += 1 };
  s0 -> s8 [70, 70] { R8482 += 1, R8438 += 1, R7927 += 1, R7928 += 1 };
  s0 -> s9 [70, 70] { R8482 += 1, R8438 += 1, R7928 += 1, R7929 += 1, R7930 += 1 };
  s0 -> s10 [70, 70] { R8482 += 1, R8438 += 1, R7928 += 1, R7930 += 1 };
  s0 -> s1 [71, 74] { R8482 += 1, R8438 += 1, R7928 += 1, R7930 += 1 };
  s0 -> s2 [71, 65535] { R8482 += 1, R8438 += 1, R7928 += 1, R7929 += 1, R7930 += 1 };
  s0 -> s3 [71, 65535] { R8482 += 1, R8438 += 1, R7927 += 1, R7928 += 1 };
  s0 -> s11 [75, 75] { R8482 += 1, R8438 += 1, R7928 += 1, R7930 += 1 };
  s0 -> s1 [76, 65535] { R8482 += 1, R8438 += 1, R7928 += 1, R7930 += 1 };
  s1 -> s1 [0, 69] { R8482 += 1, R8438 += 1, R7928 += 1, R7930 += 1 };
  s1 -> s5 [70, 70] { R8482 += 1, R8438 += 1, R7928 += 1, R7930 += 1 };
  s1 -> s10 [70, 70] { R8482 += 1, R8438 += 1, R7928 += 1, R7930 += 1 };
  s1 -> s1 [71, 74] { R8482 += 1, R8438 += 1, R7928 += 1, R7930 += 1 };
  s1 -> s11 [75, 75] { R8482 += 1, R8438 += 1, R7928 += 1, R7930 += 1 };
  s1 -> s1 [76, 65535] { R8482 += 1, R8438 += 1, R7928 += 1, R7930 += 1 };
  s2 -> s1 [0, 69] { R8482 += 1, R8438 += 1, R7928 += 1, R7930 += 1 };
  s2 -> s2 [0, 69] { R8482 += 1, R8438 += 1, R7928 += 1, R7929 += 1, R7930 += 1 };
  s2 -> s5 [70, 70] { R8482 += 1, R8438 += 1, R7928 += 1, R7930 += 1 };
  s2 -> s7 [70, 70] { R8482 += 1, R8438 += 1, R7928 += 1, R7929 += 1, R7930 += 1 };
  s2 -> s9 [70, 70] { R8482 += 1, R8438 += 1, R7928 += 1, R7929 += 1, R7930 += 1 };
  s2 -> s10 [70, 70] { R8482 += 1, R8438 += 1, R7928 += 1, R7930 += 1 };
  s2 -> s1 [71, 74] { R8482 += 1, R8438 += 1, R7928 += 1, R7930 += 1 };
  s2 -> s2 [71, 65535] { R8482 += 1, R8438 += 1, R7928 += 1, R7929 += 1, R7930 += 1 };
  s2 -> s11 [75, 75] { R8482 += 1, R8438 += 1, R7928 += 1, R7930 += 1 };
  s2 -> s1 [76, 65535] { R8482 += 1, R8438 += 1, R7928 += 1, R7930 += 1 };
  s3 -> s1 [0, 69] { R8482 += 1, R8438 += 1, R7928 += 1, R7930 += 1 };
  s3 -> s2 [0, 69] { R8482 += 1, R8438 += 1, R7928 += 1, R7929 += 1, R7930 += 1 };
  s3 -> s3 [0, 69] { R8482 += 1, R8438 += 1, R7927 += 1, R7928 += 1 };
  s3 -> s5 [70, 70] { R8482 += 1, R8438 += 1, R7928 += 1, R7930 += 1 };
  s3 -> s6 [70, 70] { R8482 += 1, R8438 += 1, R7927 += 1, R7928 += 1 };
  s3 -> s7 [70, 70] { R8482 += 1, R8438 += 1, R7928 += 1, R7929 += 1, R7930 += 1 };
  s3 -> s8 [70, 70] { R8482 += 1, R8438 += 1, R7927 += 1, R7928 += 1 };
  s3 -> s9 [70, 70] { R8482 += 1, R8438 += 1, R7928 += 1, R7929 += 1, R7930 += 1 };
  s3 -> s10 [70, 70] { R8482 += 1, R8438 += 1, R7928 += 1, R7930 += 1 };
  s3 -> s1 [71, 74] { R8482 += 1, R8438 += 1, R7928 += 1, R7930 += 1 };
  s3 -> s2 [71, 65535] { R8482 += 1, R8438 += 1, R7928 += 1, R7929 += 1, R7930 += 1 };
  s3 -> s3 [71, 65535] { R8482 += 1, R8438 += 1, R7927 += 1, R7928 += 1 };
  s3 -> s11 [75, 75] { R8482 += 1, R8438 += 1, R7928 += 1, R7930 += 1 };
  s3 -> s1 [76, 65535] { R8482 += 1, R8438 += 1, R7928 += 1, R7930 += 1 };
  s4 -> s1 [0, 69] { R8482 += 1, R8438 += 1, R7928 += 1, R7930 += 1 };
  s4 -> s2 [0, 69] { R8482 += 1, R8438 += 1, R7928 += 1, R7929 += 1, R7930 += 1 };
  s4 -> s3 [0, 69] { R8482 += 1, R8438 += 1, R7927 += 1, R7928 += 1 };
  s4 -> s4 [0, 65535] { R8482 += 1, R8437 += 1, R8438 += 1 };
  s4 -> s5 [70, 70] { R8482 += 1, R8438 += 1, R7928 += 1, R7930 += 1 };
  s4 -> s6 [70, 70] { R8482 += 1, R8438 += 1, R7927 += 1, R7928 += 1 };
  s4 -> s7 [70, 70] { R8482 += 1, R8438 += 1, R7928 += 1, R7929 += 1, R7930 += 1 };
  s4 -> s8 [70, 70] { R8482 += 1, R8438 += 1, R7927 += 1, R7928 += 1 };
  s4 -> s9 [70, 70] { R8482 += 1, R8438 += 1, R7928 += 1, R7929 += 1, R7930 += 1 };
  s4 -> s10 [70, 70] { R8482 += 1, R8438 += 1, R7928 += 1, R7930 += 1 };
  s4 -> s1 [71, 74] { R8482 += 1, R8438 += 1, R7928 += 1, R7930 += 1 };
  s4 -> s2 [71, 65535] { R8482 += 1, R8438 += 1, R7928 += 1, R7929 += 1, R7930 += 1 };
  s4 -> s3 [71, 65535] { R8482 += 1, R8438 += 1, R7927 += 1, R7928 += 1 };
  s4 -> s11 [75, 75] { R8482 += 1, R8438 += 1, R7928 += 1, R7930 += 1 };
  s4 -> s1 [76, 65535] { R8482 += 1, R8438 += 1, R7928 += 1, R7930 += 1 };
  s6 -> s10 [0, 74] { R8482 += 1, R8438 += 1, R7928 += 1, R7930 += 1 };
  s6 -> s6 [0, 65535] { R8482 += 1, R8438 += 1, R7927 += 1, R7928 += 1 };
  s6 -> s7 [0, 65535] { R8482 += 1, R8438 += 1, R7928 += 1, R7929 += 1, R7930 += 1 };
  s6 -> s14 [75, 75] { R8482 += 1, R8438 += 1, R7928 += 1, R7930 += 1 };
  s6 -> s10 [76, 65535] { R8482 += 1, R8438 += 1, R7928 += 1, R7930 += 1 };
  s7 -> s10 [0, 74] { R8482 += 1, R8438 += 1, R7928 += 1, R7930 += 1 };
  s7 -> s7 [0, 65535] { R8482 += 1, R8438 += 1, R7928 += 1, R7929 += 1, R7930 += 1 };
  s7 -> s14 [75, 75] { R8482 += 1, R8438 += 1, R7928 += 1, R7930 += 1 };
  s7 -> s10 [76, 65535] { R8482 += 1, R8438 += 1, R7928 += 1, R7930 += 1 };
  s10 -> s10 [0, 74] { R8482 += 1, R8438 += 1, R7928 += 1, R7930 += 1 };
  s10 -> s14 [75, 75] { R8482 += 1, R8438 += 1, R7928 += 1, R7930 += 1 };
  s10 -> s10 [76, 65535] { R8482 += 1, R8438 += 1, R7928 += 1, R7930 += 1 };
  s11 -> s11 [0, 69] { R8482 += 1, R8438 += 1, R7928 += 1, R7930 += 1 };
  s11 -> s12 [0, 69] { R8482 += 1, R8438 += 1 };
  s11 -> s13 [0, 69] { R8482 += 1, R8438 += 1, R7928 += 1 };
  s11 -> s14 [70, 70] { R8482 += 1, R8438 += 1, R7928 += 1, R7930 += 1 };
  s11 -> s15 [70, 70] { R8482 += 1, R8438 += 1, R7928 += 1 };
  s11 -> s16 [70, 70] { R8482 += 1, R8438 += 1, R7928 += 1, R7930 += 1 };
  s11 -> s17 [70, 70] { R8482 += 1, R8438 += 1 };
  s11 -> s18 [70, 70] { R8482 += 1, R8438 += 1, R7928 += 1 };
  s11 -> s19 [70, 70] { R8482 += 1, R8438 += 1 };
  s11 -> s11 [71, 65535] { R8482 += 1, R8438 += 1, R7928 += 1, R7930 += 1 };
  s11 -> s12 [71, 65535] { R8482 += 1, R8438 += 1 };
  s11 -> s13 [71, 65535] { R8482 += 1, R8438 += 1, R7928 += 1 };
  s12 -> s12 [0, 69] { R8482 += 1, R8438 += 1 };
  s12 -> s12 [0, 65535] { R8482 += 1 };
  s12 -> s20 [0, 65535];
  s12 -> s17 [70, 70] { R8482 += 1, R8438 += 1 };
  s12 -> s19 [70, 70] { R8482 += 1, R8438 += 1 };
  s12 -> s12 [71, 65535] { R8482 += 1, R8438 += 1 };
  s13 -> s12 [0, 69] { R8482 += 1, R8438 += 1 };
  s13 -> s13 [0, 69] { R8482 += 1, R8438 += 1, R7928 += 1 };
  s13 -> s15 [70, 70] { R8482 += 1, R8438 += 1, R7928 += 1 };
  s13 -> s17 [70, 70] { R8482 += 1, R8438 += 1 };
  s13 -> s18 [70, 70] { R8482 += 1, R8438 += 1, R7928 += 1 };
  s13 -> s19 [70, 70] { R8482 += 1, R8438 += 1 };
  s13 -> s12 [71, 65535] { R8482 += 1, R8438 += 1 };
  s13 -> s13 [71, 65535] { R8482 += 1, R8438 += 1, R7928 += 1 };
  s14 -> s14 [0, 65535] { R8482 += 1, R8438 += 1, R7928 += 1, R7930 += 1 };
  s14 -> s15 [0, 65535] { R8482 += 1, R8438 += 1, R7928 += 1 };
  s14 -> s19 [0, 65535] { R8482 += 1, R8438 += 1 };
  s15 -> s15 [0, 65535] { R8482 += 1, R8438 += 1, R7928 += 1 };
  s15 -> s19 [0, 65535] { R8482 += 1, R8438 += 1 };
  s17 -> s17 [0, 65535] { R8482 += 1 };
  s17 -> s20 [0, 65535];
  s19 -> s19 [0, 65535] { R8482 += 1, R8438 += 1 };
  s19 -> s20 [0, 65535];
  s19 -> s21 [0, 65535] { R8482 += 1 };
  s20 -> s20 [0, 65535];
  s21 -> s20 [0, 65535];
  s21 -> s21 [0, 65535] { R8482 += 1 };
  accepting s17, s19, s12, s21, s20;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 69] { R8484 += 1, R8440 += 1, R8376 += 1, R8377 += 1, R8378 += 1 };
  s0 -> s2 [0, 69] { R8484 += 1, R8440 += 1, R8375 += 1, R8376 += 1 };
  s0 -> s3 [0, 65535] { R8484 += 1, R8439 += 1, R8440 += 1 };
  s0 -> s0 [0, 65535] { R8483 += 1, R8484 += 1 };
  s0 -> s4 [70, 70] { R8484 += 1, R8440 += 1, R8376 += 1, R8377 += 1, R8378 += 1 };
  s0 -> s5 [70, 70] { R8484 += 1, R8440 += 1, R8375 += 1, R8376 += 1 };
  s0 -> s6 [70, 70] { R8484 += 1, R8440 += 1, R8375 += 1, R8376 += 1 };
  s0 -> s7 [70, 70] { R8484 += 1, R8440 += 1, R8376 += 1, R8377 += 1, R8378 += 1 };
  s0 -> s1 [71, 65535] { R8484 += 1, R8440 += 1, R8376 += 1, R8377 += 1, R8378 += 1 };
  s0 -> s2 [71, 65535] { R8484 += 1, R8440 += 1, R8375 += 1, R8376 += 1 };
  s1 -> s1 [0, 69] { R8484 += 1, R8440 += 1, R8376 += 1, R8377 += 1, R8378 += 1 };
  s1 -> s1 [0, 65535] { R8484 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s4 [70, 70] { R8484 += 1, R8440 += 1, R8376 += 1, R8377 += 1, R8378 += 1 };
  s1 -> s7 [70, 70] { R8484 += 1, R8440 += 1, R8376 += 1, R8377 += 1, R8378 += 1 };
  s1 -> s1 [71, 65535] { R8484 += 1, R8440 += 1, R8376 += 1, R8377 += 1, R8378 += 1 };
  s2 -> s1 [0, 69] { R8484 += 1, R8440 += 1, R8376 += 1, R8377 += 1, R8378 += 1 };
  s2 -> s2 [0, 69] { R8484 += 1, R8440 += 1, R8375 += 1, R8376 += 1 };
  s2 -> s4 [70, 70] { R8484 += 1, R8440 += 1, R8376 += 1, R8377 += 1, R8378 += 1 };
  s2 -> s5 [70, 70] { R8484 += 1, R8440 += 1, R8375 += 1, R8376 += 1 };
  s2 -> s6 [70, 70] { R8484 += 1, R8440 += 1, R8375 += 1, R8376 += 1 };
  s2 -> s7 [70, 70] { R8484 += 1, R8440 += 1, R8376 += 1, R8377 += 1, R8378 += 1 };
  s2 -> s1 [71, 65535] { R8484 += 1, R8440 += 1, R8376 += 1, R8377 += 1, R8378 += 1 };
  s2 -> s2 [71, 65535] { R8484 += 1, R8440 += 1, R8375 += 1, R8376 += 1 };
  s3 -> s1 [0, 69] { R8484 += 1, R8440 += 1, R8376 += 1, R8377 += 1, R8378 += 1 };
  s3 -> s2 [0, 69] { R8484 += 1, R8440 += 1, R8375 += 1, R8376 += 1 };
  s3 -> s3 [0, 65535] { R8484 += 1, R8439 += 1, R8440 += 1 };
  s3 -> s4 [70, 70] { R8484 += 1, R8440 += 1, R8376 += 1, R8377 += 1, R8378 += 1 };
  s3 -> s5 [70, 70] { R8484 += 1, R8440 += 1, R8375 += 1, R8376 += 1 };
  s3 -> s6 [70, 70] { R8484 += 1, R8440 += 1, R8375 += 1, R8376 += 1 };
  s3 -> s7 [70, 70] { R8484 += 1, R8440 += 1, R8376 += 1, R8377 += 1, R8378 += 1 };
  s3 -> s1 [71, 65535] { R8484 += 1, R8440 += 1, R8376 += 1, R8377 += 1, R8378 += 1 };
  s3 -> s2 [71, 65535] { R8484 += 1, R8440 += 1, R8375 += 1, R8376 += 1 };
  s4 -> s4 [0, 65535] { R8484 += 1, R8440 += 1, R8376 += 1, R8377 += 1, R8378 += 1 };
  s4 -> s9 [0, 65535] { R8484 += 1 };
  s4 -> s8 [0, 65535];
  s5 -> s4 [0, 65535] { R8484 += 1, R8440 += 1, R8376 += 1, R8377 += 1, R8378 += 1 };
  s5 -> s5 [0, 65535] { R8484 += 1, R8440 += 1, R8375 += 1, R8376 += 1 };
  s7 -> s7 [0, 65535] { R8484 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R8484 += 1 };
  s9 -> s8 [0, 65535];
  accepting s4, s8, s9, s1, s7;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [102, 102];
  accepting s1;
};
};
constraint R3 = R8484 && R23 - R8484 = -1 && R24 = R8484 && R25 - R8484 = -1 && R26 = R8484 && R27 = 0 && R28 = 1 && R29 = 0 && R30 = 1 && R45 + R84 + R83 + -1*R7932 + -1*R7928 - R66 = 0 && R49 + R89 + R87 = 0 && R50 + R90 + R88 + -1*R7932 + -1*R7928 - R66 = 0 && R55 + R96 + R93 + -1*R7934 + -1*R7930 - R68 = 0 && R65 + R7931 + R7927 = 0 && R67 + R7933 + R7929 = 0 && R8425 = 0 && R8426 = 0 && R8431 = 0 && R8432 = 0 && R8435 = 0 && R8436 = 0 && R8437 = 0 && R8438 = 0 && R8439 = 0 && R8440 = 0 && R8441 = 0 && R8442 = R8484 && R8443 = 0 && R8444 = R8484 && R8445 = 0 && R8446 = R8484 && R8447 = 0 && R8448 = R8484 && R8449 = 0 && R8450 = R8484 && R8451 = 0 && R8452 = R8484 && R8453 = 0 && R8454 = R8484 && R8455 = 0 && R8456 = R8484 && R8457 = 0 && R8458 = R8484 && R8459 = 0 && R8460 = R8484 && R8461 = 0 && R8462 = R8484 && R8463 = 0 && R8464 = R8484 && R8465 = 0 && R8466 = R8484 && R8467 = 0 && R8468 = R8484 && R8469 = 0 && R8470 = R8484 && R8471 = 0 && R8472 = R8484 && R8473 = 0 && R8474 = R8484 && R8475 = 0 && R8476 = R8484 && R8477 = 0 && R8478 = R8484 && R8479 = 0 && R8480 = R8484 && R8481 = 0 && R8482 = R8484 && R8483 = 0 && -1 < R2 && R12 < 1 && R15 < 1 && R16 < 1 && R47 + R86 + R85 < 1 && R61 + R6810 + R6807 < 1 && -1*R7932 + -1*R7928 - R66 < 1 && -1*R7934 + -1*R7930 - R68 < 1 && 0 < R8484 && (R2 != 0 || R20 = 0 || (R8385 = 0 && R8386 = 0)) && (R2 != 0 || R20 = 0 || (R8387 = 0 && R8388 = 0)) && (R2 != 0 || R20 = 0 || (R8389 = 0 && R8390 = 0)) && (R2 != 0 || R20 = 0 || (R8391 = 0 && R8392 = 0)) && (R2 != 0 || R20 = 0 || (R8393 = 0 && R8394 = 0)) && (R2 != 0 || R20 = 0 || (R8395 = 0 && R8396 = 0)) && (R2 != 0 || R20 = 0 || (R8397 = 0 && R8398 = 0)) && (R2 != 0 || R20 = 0 || (R8399 = 0 && R8400 = 0)) && (R2 != 0 || R20 = 0 || (R8401 = 0 && R8402 = 0)) && (R2 != 0 || R20 = 0 || (R8403 = 0 && R8404 = 0)) && (R53 + R94 + R91 != 0 || R54 + R95 + R92 + -1*R7932 + -1*R7928 - R66 = 0 || R66 + R7932 + R7928 < 1) && (R59 + R6808 + R6805 != 0 || R60 + R6809 + R6806 + -1*R7932 + -1*R7928 - R66 = 0 || R66 + R7932 + R7928 < 1) && (R66 + R7932 + R7928 != 0 || ((R53 + R94 + R91 != 0 || R54 + R95 + R92 = 0 || R68 + R7934 + R7930 < 1) && (R53 + R94 + R91 = 0 || R68 + R7934 + R7930 < 1))) && (R66 + R7932 + R7928 != 0 || ((R59 + R6808 + R6805 != 0 || R60 + R6809 + R6806 = 0 || R68 + R7934 + R7930 < 1) && (R59 + R6808 + R6805 = 0 || R68 + R7934 + R7930 < 1))) && (R66 + R7932 + R7928 != 0 || ((R73 + R8380 + R8375 != 0 || R74 + R8381 + R8376 = 0 || R68 + R7934 + R7930 < 1) && (R73 + R8380 + R8375 = 0 || R68 + R7934 + R7930 < 1))) && (R68 + R7934 + R7930 != 0 || R77 + R8384 + R8379 = 0 || (R75 + R8382 + R8377 = 0 && R76 + R8383 + R8378 = 0)) && (R73 + R8380 + R8375 != 0 || R66 + R7932 + R7928 + -1*R8381 + -1*R8376 - R74 = 0 || R66 + R7932 + R7928 < 1) && (R75 + R8382 + R8377 != 0 || R68 + R7934 + R7930 + -1*R8383 + -1*R8378 - R76 = 0 || R68 + R7934 + R7930 < 1) && (R8385 != 0 || R2 = R8386 || R2 < 1) && (R8387 != 0 || R2 = R8388 || R2 < 1) && (R8389 != 0 || R2 = R8390 || R2 < 1) && (R8391 != 0 || R2 = R8392 || R2 < 1) && (R8393 != 0 || R2 = R8394 || R2 < 1) && (R8395 != 0 || R2 = R8396 || R2 < 1) && (R8397 != 0 || R2 = R8398 || R2 < 1) && (R8399 != 0 || R2 = R8400 || R2 < 1) && (R8401 != 0 || R2 = R8402 || R2 < 1) && (R8403 != 0 || R2 = R8404 || R2 < 1) && (R21 = 0 || (R8423 = 0 && R8424 = 0)) && (R21 = 0 || (R8427 = 0 && R8428 = 0)) && (R21 = 0 || (R8429 = 0 && R8430 = 0)) && (R21 = 0 || (R8433 = 0 && R8434 = 0)) && (R22 = 0 || (R8405 = 0 && R8406 = 0)) && (R22 = 0 || (R8407 = 0 && R8408 = 0)) && (R22 = 0 || (R8409 = 0 && R8410 = 0)) && (R22 = 0 || (R8411 = 0 && R8412 = 0)) && (R22 = 0 || (R8413 = 0 && R8414 = 0)) && (R22 = 0 || (R8415 = 0 && R8416 = 0)) && (R22 = 0 || (R8417 = 0 && R8418 = 0)) && (R22 = 0 || (R8419 = 0 && R8420 = 0)) && (R22 = 0 || (R8421 = 0 && R8422 = 0)) && (R53 + R94 + R91 = 0 || R66 + R7932 + R7928 < 1) && (R59 + R6808 + R6805 = 0 || R66 + R7932 + R7928 < 1) && (R73 + R8380 + R8375 = 0 || R66 + R7932 + R7928 < 1) && (R75 + R8382 + R8377 = 0 || R68 + R7934 + R7930 < 1) && (R8385 = 0 || R2 < 1) && (R8387 = 0 || R2 < 1) && (R8389 = 0 || R2 < 1) && (R8391 = 0 || R2 < 1) && (R8393 = 0 || R2 < 1) && (R8395 = 0 || R2 < 1) && (R8397 = 0 || R2 < 1) && (R8399 = 0 || R2 < 1) && (R8401 = 0 || R2 < 1) && (R8403 = 0 || R2 < 1);
// End of Parikh automata intersection problem
