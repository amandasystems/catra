// Parikh automata intersection problem, generated by OSTRICH+
counter int R12, R15, R16, R2, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R3451, R3452, R3453, R3454, R3455, R3456, R4, R45, R47, R49, R5, R50, R5131, R5132, R5133, R5134, R5135, R5136, R5137, R5138, R53, R54, R55, R5579, R5580, R5581, R5582, R5583, R5584, R5585, R5586, R5587, R5588, R5589, R5590, R5591, R5592, R5593, R5594, R5595, R5596, R5597, R5598, R5599, R5600, R5601, R5602, R5603, R5604, R5605, R5606, R5607, R5608, R5609, R5610, R5611, R5612, R5613, R5614, R5615, R5616, R5617, R5618, R5619, R5620, R5621, R5622, R5623, R5624, R5625, R5626, R5627, R5628, R5629, R5630, R5631, R5632, R5633, R5634, R5635, R5636, R5637, R5638, R5639, R5640, R5641, R5642, R5643, R5644, R5645, R5646, R5647, R5648, R5649, R5650, R5651, R5652, R5653, R5654, R5655, R5656, R5657, R5658, R5659, R5660, R5661, R5662, R5663, R5664, R5665, R5666, R5667, R5668, R5669, R5670, R5671, R5672, R5673, R5674, R5675, R5676, R5677, R5678, R5679, R5680, R5681, R5682, R5683, R5684, R5685, R5686, R5687, R5688, R59, R60, R61, R65, R66, R67, R68, R73, R74, R75, R76, R77, R83, R84, R85, R86, R87, R88, R89, R90, R91, R92, R93, R94, R95, R96;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [70, 70];
  s0 -> s0 [71, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [70, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R15 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 69];
  s0 -> s0 [0, 65535] { R16 += 1 };
  s0 -> s2 [70, 70];
  s0 -> s1 [71, 65535];
  s1 -> s1 [0, 69];
  s1 -> s2 [70, 70];
  s1 -> s1 [71, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R24 += 1 };
  s0 -> s0 [0, 65535] { R23 += 1, R24 += 1 };
  s0 -> s2 [9, 13] { R24 += 1 };
  s0 -> s1 [14, 31] { R24 += 1 };
  s0 -> s2 [32, 32] { R24 += 1 };
  s0 -> s1 [33, 65535] { R24 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R24 += 1 };
  s2 -> s1 [0, 65535] { R24 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R25 += 1, R26 += 1 };
  s1 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R28 += 1 };
  s0 -> s0 [0, 65535] { R27 += 1, R28 += 1 };
  s0 -> s2 [9, 13] { R28 += 1 };
  s0 -> s1 [14, 31] { R28 += 1 };
  s0 -> s2 [32, 32] { R28 += 1 };
  s0 -> s1 [33, 65535] { R28 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R28 += 1 };
  s2 -> s1 [0, 65535] { R28 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R29 += 1, R30 += 1 };
  s1 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R5610 += 1, R22 += 1 };
  s0 -> s0 [0, 65535] { R5609 += 1, R5610 += 1 };
  s1 -> s1 [0, 65535] { R5610 += 1, R22 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 69] { R5612 += 1 };
  s0 -> s0 [0, 65535] { R5611 += 1, R5612 += 1 };
  s0 -> s2 [70, 70] { R5612 += 1 };
  s0 -> s3 [70, 70] { R5612 += 1 };
  s0 -> s1 [76, 65535] { R5612 += 1 };
  s1 -> s1 [0, 69] { R5612 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R5612 += 1 };
  s1 -> s3 [70, 70] { R5612 += 1 };
  s1 -> s1 [76, 65535] { R5612 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 70] { R5612 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [76, 65535] { R5612 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 69] { R5614 += 1, R45 += 1 };
  s0 -> s0 [0, 65535] { R5613 += 1, R5614 += 1 };
  s0 -> s2 [70, 70] { R5614 += 1, R45 += 1 };
  s0 -> s3 [70, 70] { R5614 += 1, R45 += 1 };
  s0 -> s1 [71, 65535] { R5614 += 1, R45 += 1 };
  s1 -> s1 [0, 69] { R5614 += 1, R45 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R5614 += 1, R45 += 1 };
  s1 -> s3 [70, 70] { R5614 += 1, R45 += 1 };
  s1 -> s1 [71, 65535] { R5614 += 1, R45 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R5614 += 1, R45 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 69] { R5616 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R5615 += 1, R5616 += 1 };
  s0 -> s2 [70, 70] { R5616 += 1, R47 += 1 };
  s0 -> s3 [70, 70] { R5616 += 1, R47 += 1 };
  s0 -> s1 [71, 65535] { R5616 += 1, R47 += 1 };
  s1 -> s1 [0, 69] { R5616 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R5616 += 1, R47 += 1 };
  s1 -> s3 [70, 70] { R5616 += 1, R47 += 1 };
  s1 -> s1 [71, 65535] { R5616 += 1, R47 += 1 };
  s2 -> s2 [0, 65535] { R5616 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 69] { R5618 += 1, R49 += 1, R50 += 1 };
  s0 -> s0 [0, 65535] { R5617 += 1, R5618 += 1 };
  s0 -> s2 [70, 70] { R5618 += 1, R49 += 1, R50 += 1 };
  s0 -> s3 [70, 70] { R5618 += 1, R49 += 1, R50 += 1 };
  s0 -> s1 [71, 65535] { R5618 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 69] { R5618 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R5618 += 1, R49 += 1, R50 += 1 };
  s1 -> s3 [70, 70] { R5618 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [71, 65535] { R5618 += 1, R49 += 1, R50 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R5618 += 1, R49 += 1, R50 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 69] { R5620 += 1, R53 += 1, R54 += 1 };
  s0 -> s0 [0, 65535] { R5619 += 1, R5620 += 1 };
  s0 -> s2 [70, 70] { R5620 += 1, R53 += 1, R54 += 1 };
  s0 -> s3 [70, 70] { R5620 += 1, R53 += 1, R54 += 1 };
  s0 -> s1 [71, 65535] { R5620 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 69] { R5620 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R5620 += 1, R53 += 1, R54 += 1 };
  s1 -> s3 [70, 70] { R5620 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [71, 65535] { R5620 += 1, R53 += 1, R54 += 1 };
  s2 -> s2 [0, 65535] { R5620 += 1, R53 += 1, R54 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 69] { R5622 += 1, R59 += 1, R60 += 1 };
  s0 -> s0 [0, 65535] { R5621 += 1, R5622 += 1 };
  s0 -> s2 [70, 70] { R5622 += 1, R59 += 1, R60 += 1 };
  s0 -> s3 [70, 70] { R5622 += 1, R59 += 1, R60 += 1 };
  s0 -> s1 [71, 65535] { R5622 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 69] { R5622 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R5622 += 1, R59 += 1, R60 += 1 };
  s1 -> s3 [70, 70] { R5622 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [71, 65535] { R5622 += 1, R59 += 1, R60 += 1 };
  s2 -> s2 [0, 65535] { R5622 += 1, R59 += 1, R60 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 69] { R5624 += 1, R65 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R5623 += 1, R5624 += 1 };
  s0 -> s2 [70, 70] { R5624 += 1, R65 += 1, R66 += 1 };
  s0 -> s3 [70, 70] { R5624 += 1, R65 += 1, R66 += 1 };
  s0 -> s1 [71, 65535] { R5624 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 69] { R5624 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R5624 += 1, R65 += 1, R66 += 1 };
  s1 -> s3 [70, 70] { R5624 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [71, 65535] { R5624 += 1, R65 += 1, R66 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R5624 += 1, R65 += 1, R66 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 69] { R5626 += 1, R73 += 1, R74 += 1 };
  s0 -> s0 [0, 65535] { R5625 += 1, R5626 += 1 };
  s0 -> s2 [70, 70] { R5626 += 1, R73 += 1, R74 += 1 };
  s0 -> s3 [70, 70] { R5626 += 1, R73 += 1, R74 += 1 };
  s0 -> s1 [71, 65535] { R5626 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 69] { R5626 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R5626 += 1, R73 += 1, R74 += 1 };
  s1 -> s3 [70, 70] { R5626 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [71, 65535] { R5626 += 1, R73 += 1, R74 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R5626 += 1, R73 += 1, R74 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 69] { R5646 += 1 };
  s0 -> s0 [0, 65535] { R5645 += 1, R5646 += 1 };
  s0 -> s2 [70, 70] { R5646 += 1 };
  s0 -> s1 [71, 65535] { R5646 += 1 };
  s1 -> s1 [0, 69] { R5646 += 1 };
  s1 -> s2 [70, 70] { R5646 += 1 };
  s1 -> s1 [71, 65535] { R5646 += 1 };
  s2 -> s2 [0, 65535] { R5646 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R5647 += 1, R5648 += 1 };
  s0 -> s1 [0, 65535] { R5648 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R5648 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 69] { R5650 += 1 };
  s0 -> s0 [0, 65535] { R5649 += 1, R5650 += 1 };
  s0 -> s2 [0, 65535] { R5650 += 1, R12 += 1 };
  s0 -> s3 [70, 70] { R5650 += 1 };
  s0 -> s1 [71, 65535] { R5650 += 1 };
  s1 -> s1 [0, 69] { R5650 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [70, 70] { R5650 += 1 };
  s1 -> s1 [71, 65535] { R5650 += 1 };
  s2 -> s1 [0, 69] { R5650 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R5650 += 1, R12 += 1 };
  s2 -> s3 [70, 70] { R5650 += 1 };
  s2 -> s1 [71, 65535] { R5650 += 1 };
  s3 -> s3 [0, 65535] { R5650 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 69] { R5652 += 1, R5590 += 1 };
  s0 -> s0 [0, 65535] { R5651 += 1, R5652 += 1 };
  s0 -> s2 [0, 65535] { R5652 += 1, R5589 += 1, R5590 += 1 };
  s0 -> s1 [71, 65535] { R5652 += 1, R5590 += 1 };
  s1 -> s1 [0, 69] { R5652 += 1, R5590 += 1 };
  s1 -> s1 [0, 65535] { R5652 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [71, 65535] { R5652 += 1, R5590 += 1 };
  s2 -> s1 [0, 69] { R5652 += 1, R5590 += 1 };
  s2 -> s2 [0, 65535] { R5652 += 1, R5589 += 1, R5590 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [71, 65535] { R5652 += 1, R5590 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R5654 += 1, R5592 += 1, R20 += 1 };
  s0 -> s2 [0, 65535] { R5654 += 1, R5591 += 1, R5592 += 1 };
  s0 -> s0 [0, 65535] { R5653 += 1, R5654 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R5654 += 1, R5592 += 1, R20 += 1 };
  s1 -> s4 [0, 65535] { R5654 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R5654 += 1, R5592 += 1, R20 += 1 };
  s2 -> s2 [0, 65535] { R5654 += 1, R5591 += 1, R5592 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R5654 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 70] { R5656 += 1, R5594 += 1 };
  s0 -> s2 [0, 65535] { R5656 += 1, R5593 += 1, R5594 += 1 };
  s0 -> s0 [0, 65535] { R5655 += 1, R5656 += 1 };
  s0 -> s1 [75, 65535] { R5656 += 1, R5594 += 1 };
  s1 -> s1 [0, 70] { R5656 += 1, R5594 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R5656 += 1 };
  s1 -> s1 [75, 65535] { R5656 += 1, R5594 += 1 };
  s2 -> s1 [0, 70] { R5656 += 1, R5594 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R5656 += 1, R5593 += 1, R5594 += 1 };
  s2 -> s1 [75, 65535] { R5656 += 1, R5594 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R5658 += 1, R5596 += 1, R84 += 1 };
  s0 -> s0 [0, 65535] { R5657 += 1, R5658 += 1 };
  s0 -> s2 [0, 65535] { R5658 += 1, R5595 += 1, R5596 += 1 };
  s1 -> s4 [0, 65535] { R5658 += 1 };
  s1 -> s1 [0, 65535] { R5658 += 1, R5596 += 1, R84 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R5658 += 1, R5596 += 1, R84 += 1 };
  s2 -> s2 [0, 65535] { R5658 += 1, R5595 += 1, R5596 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R5658 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 74] { R5660 += 1, R5598 += 1 };
  s0 -> s0 [0, 65535] { R5659 += 1, R5660 += 1 };
  s0 -> s2 [0, 65535] { R5660 += 1, R5598 += 1, R86 += 1 };
  s0 -> s3 [0, 65535] { R5660 += 1, R5597 += 1, R5598 += 1 };
  s0 -> s1 [76, 65535] { R5660 += 1, R5598 += 1 };
  s1 -> s1 [0, 74] { R5660 += 1, R5598 += 1 };
  s1 -> s1 [0, 65535] { R5660 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [76, 65535] { R5660 += 1, R5598 += 1 };
  s2 -> s1 [0, 74] { R5660 += 1, R5598 += 1 };
  s2 -> s5 [0, 65535] { R5660 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R5660 += 1, R5598 += 1, R86 += 1 };
  s2 -> s1 [76, 65535] { R5660 += 1, R5598 += 1 };
  s3 -> s1 [0, 74] { R5660 += 1, R5598 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R5660 += 1, R5598 += 1, R86 += 1 };
  s3 -> s3 [0, 65535] { R5660 += 1, R5597 += 1, R5598 += 1 };
  s3 -> s1 [76, 65535] { R5660 += 1, R5598 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R5660 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 65535] { R5662 += 1, R5600 += 1, R90 += 1 };
  s0 -> s2 [0, 65535] { R5662 += 1, R5600 += 1 };
  s0 -> s3 [0, 65535] { R5662 += 1, R5599 += 1, R5600 += 1 };
  s0 -> s0 [0, 65535] { R5661 += 1, R5662 += 1 };
  s1 -> s1 [0, 65535] { R5662 += 1, R5600 += 1, R90 += 1 };
  s1 -> s5 [0, 65535] { R5662 += 1 };
  s1 -> s2 [0, 65535] { R5662 += 1, R5600 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R5662 += 1 };
  s2 -> s2 [0, 65535] { R5662 += 1, R5600 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R5662 += 1, R5600 += 1, R90 += 1 };
  s3 -> s2 [0, 65535] { R5662 += 1, R5600 += 1 };
  s3 -> s3 [0, 65535] { R5662 += 1, R5599 += 1, R5600 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R5662 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R5664 += 1, R5601 += 1, R5602 += 1 };
  s0 -> s2 [0, 65535] { R5664 += 1, R5602 += 1, R94 += 1, R95 += 1 };
  s0 -> s3 [0, 65535] { R5664 += 1, R5602 += 1, R95 += 1, R96 += 1 };
  s0 -> s0 [0, 65535] { R5663 += 1, R5664 += 1 };
  s1 -> s1 [0, 65535] { R5664 += 1, R5601 += 1, R5602 += 1 };
  s1 -> s2 [0, 65535] { R5664 += 1, R5602 += 1, R94 += 1, R95 += 1 };
  s1 -> s3 [0, 65535] { R5664 += 1, R5602 += 1, R95 += 1, R96 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R5664 += 1, R5602 += 1, R94 += 1, R95 += 1 };
  s2 -> s3 [0, 65535] { R5664 += 1, R5602 += 1, R95 += 1, R96 += 1 };
  s2 -> s5 [0, 65535] { R5664 += 1 };
  s2 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R5664 += 1, R5602 += 1, R95 += 1, R96 += 1 };
  s3 -> s4 [0, 65535] { R5664 += 1, R5602 += 1 };
  s3 -> s5 [0, 65535] { R5664 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R5664 += 1, R5602 += 1 };
  s4 -> s5 [0, 65535] { R5664 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R5664 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 74] { R5666 += 1, R5604 += 1, R3455 += 1 };
  s0 -> s2 [0, 65535] { R5666 += 1, R5603 += 1, R5604 += 1 };
  s0 -> s1 [0, 65535] { R5666 += 1, R5604 += 1 };
  s0 -> s0 [0, 65535] { R5665 += 1, R5666 += 1 };
  s0 -> s1 [76, 65535] { R5666 += 1, R5604 += 1, R3455 += 1 };
  s1 -> s1 [0, 74] { R5666 += 1, R5604 += 1, R3455 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R5666 += 1, R5604 += 1 };
  s1 -> s4 [0, 65535] { R5666 += 1 };
  s1 -> s1 [76, 65535] { R5666 += 1, R5604 += 1, R3455 += 1 };
  s2 -> s1 [0, 74] { R5666 += 1, R5604 += 1, R3455 += 1 };
  s2 -> s2 [0, 65535] { R5666 += 1, R5603 += 1, R5604 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R5666 += 1, R5604 += 1 };
  s2 -> s1 [76, 65535] { R5666 += 1, R5604 += 1, R3455 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R5666 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 74] { R5668 += 1, R5606 += 1, R5136 += 1, R5138 += 1 };
  s0 -> s0 [0, 65535] { R5667 += 1, R5668 += 1 };
  s0 -> s2 [0, 65535] { R5668 += 1, R5606 += 1, R5136 += 1, R5137 += 1, R5138 += 1 };
  s0 -> s3 [0, 65535] { R5668 += 1, R5605 += 1, R5606 += 1 };
  s0 -> s4 [0, 65535] { R5668 += 1, R5606 += 1, R5135 += 1, R5136 += 1 };
  s0 -> s5 [75, 75] { R5668 += 1, R5606 += 1, R5136 += 1, R5138 += 1 };
  s0 -> s1 [76, 65535] { R5668 += 1, R5606 += 1, R5136 += 1, R5138 += 1 };
  s1 -> s1 [0, 74] { R5668 += 1, R5606 += 1, R5136 += 1, R5138 += 1 };
  s1 -> s5 [75, 75] { R5668 += 1, R5606 += 1, R5136 += 1, R5138 += 1 };
  s1 -> s1 [76, 65535] { R5668 += 1, R5606 += 1, R5136 += 1, R5138 += 1 };
  s2 -> s1 [0, 74] { R5668 += 1, R5606 += 1, R5136 += 1, R5138 += 1 };
  s2 -> s2 [0, 65535] { R5668 += 1, R5606 += 1, R5136 += 1, R5137 += 1, R5138 += 1 };
  s2 -> s5 [75, 75] { R5668 += 1, R5606 += 1, R5136 += 1, R5138 += 1 };
  s2 -> s1 [76, 65535] { R5668 += 1, R5606 += 1, R5136 += 1, R5138 += 1 };
  s3 -> s1 [0, 74] { R5668 += 1, R5606 += 1, R5136 += 1, R5138 += 1 };
  s3 -> s2 [0, 65535] { R5668 += 1, R5606 += 1, R5136 += 1, R5137 += 1, R5138 += 1 };
  s3 -> s3 [0, 65535] { R5668 += 1, R5605 += 1, R5606 += 1 };
  s3 -> s4 [0, 65535] { R5668 += 1, R5606 += 1, R5135 += 1, R5136 += 1 };
  s3 -> s5 [75, 75] { R5668 += 1, R5606 += 1, R5136 += 1, R5138 += 1 };
  s3 -> s1 [76, 65535] { R5668 += 1, R5606 += 1, R5136 += 1, R5138 += 1 };
  s4 -> s1 [0, 74] { R5668 += 1, R5606 += 1, R5136 += 1, R5138 += 1 };
  s4 -> s2 [0, 65535] { R5668 += 1, R5606 += 1, R5136 += 1, R5137 += 1, R5138 += 1 };
  s4 -> s4 [0, 65535] { R5668 += 1, R5606 += 1, R5135 += 1, R5136 += 1 };
  s4 -> s5 [75, 75] { R5668 += 1, R5606 += 1, R5136 += 1, R5138 += 1 };
  s4 -> s1 [76, 65535] { R5668 += 1, R5606 += 1, R5136 += 1, R5138 += 1 };
  s5 -> s5 [0, 65535] { R5668 += 1, R5606 += 1, R5136 += 1, R5138 += 1 };
  s5 -> s6 [0, 65535] { R5668 += 1, R5606 += 1 };
  s5 -> s7 [0, 65535] { R5668 += 1 };
  s5 -> s8 [0, 65535] { R5668 += 1, R5606 += 1, R5136 += 1 };
  s5 -> s9 [0, 65535];
  s6 -> s6 [0, 65535] { R5668 += 1, R5606 += 1 };
  s6 -> s7 [0, 65535] { R5668 += 1 };
  s6 -> s9 [0, 65535];
  s7 -> s7 [0, 65535] { R5668 += 1 };
  s7 -> s9 [0, 65535];
  s8 -> s6 [0, 65535] { R5668 += 1, R5606 += 1 };
  s8 -> s7 [0, 65535] { R5668 += 1 };
  s8 -> s8 [0, 65535] { R5668 += 1, R5606 += 1, R5136 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s8, s5, s9, s6, s7;
};
automaton value2_29 {
  init s0;
  s0 -> s0 [0, 65535] { R5669 += 1, R5670 += 1 };
  s0 -> s1 [0, 65535] { R5670 += 1, R5607 += 1, R5608 += 1 };
  s0 -> s2 [0, 65535] { R5670 += 1, R5608 += 1 };
  s0 -> s3 [0, 65535] { R5670 += 1, R5608 += 1, R5585 += 1, R5586 += 1, R5587 += 1 };
  s0 -> s4 [0, 65535] { R5670 += 1, R5608 += 1, R5585 += 1, R5587 += 1, R5588 += 1 };
  s1 -> s1 [0, 65535] { R5670 += 1, R5607 += 1, R5608 += 1 };
  s1 -> s2 [0, 65535] { R5670 += 1, R5608 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s3 [0, 65535] { R5670 += 1, R5608 += 1, R5585 += 1, R5586 += 1, R5587 += 1 };
  s1 -> s4 [0, 65535] { R5670 += 1, R5608 += 1, R5585 += 1, R5587 += 1, R5588 += 1 };
  s2 -> s5 [0, 65535] { R5670 += 1 };
  s2 -> s2 [0, 65535] { R5670 += 1, R5608 += 1 };
  s2 -> s7 [0, 65535];
  s3 -> s5 [0, 65535] { R5670 += 1 };
  s3 -> s2 [0, 65535] { R5670 += 1, R5608 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s3 [0, 65535] { R5670 += 1, R5608 += 1, R5585 += 1, R5586 += 1, R5587 += 1 };
  s3 -> s4 [0, 65535] { R5670 += 1, R5608 += 1, R5585 += 1, R5587 += 1, R5588 += 1 };
  s4 -> s5 [0, 65535] { R5670 += 1 };
  s4 -> s2 [0, 65535] { R5670 += 1, R5608 += 1 };
  s4 -> s6 [0, 65535] { R5670 += 1, R5608 += 1, R5585 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s4 [0, 65535] { R5670 += 1, R5608 += 1, R5585 += 1, R5587 += 1, R5588 += 1 };
  s5 -> s5 [0, 65535] { R5670 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s5 [0, 65535] { R5670 += 1 };
  s6 -> s2 [0, 65535] { R5670 += 1, R5608 += 1 };
  s6 -> s6 [0, 65535] { R5670 += 1, R5608 += 1, R5585 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R5672 += 1, R5627 += 1, R5628 += 1 };
  s0 -> s2 [0, 65535] { R5672 += 1, R5628 += 1, R21 += 1 };
  s0 -> s0 [0, 65535] { R5671 += 1, R5672 += 1 };
  s1 -> s1 [0, 65535] { R5672 += 1, R5627 += 1, R5628 += 1 };
  s1 -> s2 [0, 65535] { R5672 += 1, R5628 += 1, R21 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R5672 += 1 };
  s2 -> s2 [0, 65535] { R5672 += 1, R5628 += 1, R21 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R5672 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 69] { R5674 += 1, R5630 += 1 };
  s0 -> s0 [0, 65535] { R5673 += 1, R5674 += 1 };
  s0 -> s2 [0, 65535] { R5674 += 1, R5629 += 1, R5630 += 1 };
  s0 -> s3 [70, 70] { R5674 += 1, R5630 += 1 };
  s0 -> s4 [70, 70] { R5674 += 1, R5630 += 1 };
  s0 -> s5 [75, 75] { R5674 += 1, R5630 += 1 };
  s0 -> s1 [76, 65535] { R5674 += 1, R5630 += 1 };
  s1 -> s1 [0, 69] { R5674 += 1, R5630 += 1 };
  s1 -> s3 [70, 70] { R5674 += 1, R5630 += 1 };
  s1 -> s4 [70, 70] { R5674 += 1, R5630 += 1 };
  s1 -> s5 [75, 75] { R5674 += 1, R5630 += 1 };
  s1 -> s1 [76, 65535] { R5674 += 1, R5630 += 1 };
  s2 -> s1 [0, 69] { R5674 += 1, R5630 += 1 };
  s2 -> s2 [0, 65535] { R5674 += 1, R5629 += 1, R5630 += 1 };
  s2 -> s3 [70, 70] { R5674 += 1, R5630 += 1 };
  s2 -> s4 [70, 70] { R5674 += 1, R5630 += 1 };
  s2 -> s5 [75, 75] { R5674 += 1, R5630 += 1 };
  s2 -> s1 [76, 65535] { R5674 += 1, R5630 += 1 };
  s4 -> s4 [0, 70] { R5674 += 1, R5630 += 1 };
  s4 -> s7 [75, 75] { R5674 += 1, R5630 += 1 };
  s4 -> s4 [76, 65535] { R5674 += 1, R5630 += 1 };
  s5 -> s5 [0, 69] { R5674 += 1, R5630 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R5674 += 1 };
  s5 -> s7 [70, 70] { R5674 += 1, R5630 += 1 };
  s5 -> s8 [70, 70] { R5674 += 1, R5630 += 1 };
  s5 -> s5 [75, 65535] { R5674 += 1, R5630 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 70] { R5674 += 1, R5630 += 1 };
  s7 -> s7 [0, 65535] { R5674 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [75, 65535] { R5674 += 1, R5630 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R5674 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 69] { R5676 += 1, R5632 += 1, R83 += 1 };
  s0 -> s0 [0, 65535] { R5675 += 1, R5676 += 1 };
  s0 -> s2 [0, 65535] { R5676 += 1, R5631 += 1, R5632 += 1 };
  s0 -> s3 [70, 70] { R5676 += 1, R5632 += 1, R83 += 1 };
  s0 -> s4 [70, 70] { R5676 += 1, R5632 += 1, R83 += 1 };
  s0 -> s1 [71, 65535] { R5676 += 1, R5632 += 1, R83 += 1 };
  s1 -> s1 [0, 69] { R5676 += 1, R5632 += 1, R83 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R5676 += 1 };
  s1 -> s3 [70, 70] { R5676 += 1, R5632 += 1, R83 += 1 };
  s1 -> s4 [70, 70] { R5676 += 1, R5632 += 1, R83 += 1 };
  s1 -> s1 [71, 65535] { R5676 += 1, R5632 += 1, R83 += 1 };
  s2 -> s1 [0, 69] { R5676 += 1, R5632 += 1, R83 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R5676 += 1, R5631 += 1, R5632 += 1 };
  s2 -> s3 [70, 70] { R5676 += 1, R5632 += 1, R83 += 1 };
  s2 -> s4 [70, 70] { R5676 += 1, R5632 += 1, R83 += 1 };
  s2 -> s1 [71, 65535] { R5676 += 1, R5632 += 1, R83 += 1 };
  s3 -> s3 [0, 65535] { R5676 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R5676 += 1, R5632 += 1, R83 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R5676 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R5676 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 69] { R5678 += 1, R5634 += 1, R85 += 1 };
  s0 -> s2 [0, 65535] { R5678 += 1, R5633 += 1, R5634 += 1 };
  s0 -> s0 [0, 65535] { R5677 += 1, R5678 += 1 };
  s0 -> s3 [70, 70] { R5678 += 1, R5634 += 1, R85 += 1 };
  s0 -> s4 [70, 70] { R5678 += 1, R5634 += 1, R85 += 1 };
  s0 -> s1 [71, 65535] { R5678 += 1, R5634 += 1, R85 += 1 };
  s1 -> s1 [0, 69] { R5678 += 1, R5634 += 1, R85 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R5678 += 1 };
  s1 -> s3 [70, 70] { R5678 += 1, R5634 += 1, R85 += 1 };
  s1 -> s4 [70, 70] { R5678 += 1, R5634 += 1, R85 += 1 };
  s1 -> s1 [71, 65535] { R5678 += 1, R5634 += 1, R85 += 1 };
  s2 -> s1 [0, 69] { R5678 += 1, R5634 += 1, R85 += 1 };
  s2 -> s2 [0, 65535] { R5678 += 1, R5633 += 1, R5634 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [70, 70] { R5678 += 1, R5634 += 1, R85 += 1 };
  s2 -> s4 [70, 70] { R5678 += 1, R5634 += 1, R85 += 1 };
  s2 -> s1 [71, 65535] { R5678 += 1, R5634 += 1, R85 += 1 };
  s3 -> s3 [0, 65535] { R5678 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R5678 += 1 };
  s4 -> s4 [0, 65535] { R5678 += 1, R5634 += 1, R85 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R5678 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 69] { R5680 += 1, R5636 += 1, R87 += 1, R88 += 1 };
  s0 -> s2 [0, 69] { R5680 += 1, R5636 += 1, R88 += 1 };
  s0 -> s3 [0, 65535] { R5680 += 1, R5635 += 1, R5636 += 1 };
  s0 -> s0 [0, 65535] { R5679 += 1, R5680 += 1 };
  s0 -> s4 [70, 70] { R5680 += 1, R5636 += 1, R87 += 1, R88 += 1 };
  s0 -> s5 [70, 70] { R5680 += 1, R5636 += 1, R88 += 1 };
  s0 -> s6 [70, 70] { R5680 += 1, R5636 += 1, R88 += 1 };
  s0 -> s7 [70, 70] { R5680 += 1, R5636 += 1, R87 += 1, R88 += 1 };
  s0 -> s2 [71, 74] { R5680 += 1, R5636 += 1, R88 += 1 };
  s0 -> s1 [71, 65535] { R5680 += 1, R5636 += 1, R87 += 1, R88 += 1 };
  s0 -> s8 [75, 75] { R5680 += 1, R5636 += 1, R88 += 1 };
  s0 -> s2 [76, 65535] { R5680 += 1, R5636 += 1, R88 += 1 };
  s1 -> s1 [0, 69] { R5680 += 1, R5636 += 1, R87 += 1, R88 += 1 };
  s1 -> s2 [0, 69] { R5680 += 1, R5636 += 1, R88 += 1 };
  s1 -> s4 [70, 70] { R5680 += 1, R5636 += 1, R87 += 1, R88 += 1 };
  s1 -> s5 [70, 70] { R5680 += 1, R5636 += 1, R88 += 1 };
  s1 -> s6 [70, 70] { R5680 += 1, R5636 += 1, R88 += 1 };
  s1 -> s7 [70, 70] { R5680 += 1, R5636 += 1, R87 += 1, R88 += 1 };
  s1 -> s2 [71, 74] { R5680 += 1, R5636 += 1, R88 += 1 };
  s1 -> s1 [71, 65535] { R5680 += 1, R5636 += 1, R87 += 1, R88 += 1 };
  s1 -> s8 [75, 75] { R5680 += 1, R5636 += 1, R88 += 1 };
  s1 -> s2 [76, 65535] { R5680 += 1, R5636 += 1, R88 += 1 };
  s2 -> s2 [0, 69] { R5680 += 1, R5636 += 1, R88 += 1 };
  s2 -> s5 [70, 70] { R5680 += 1, R5636 += 1, R88 += 1 };
  s2 -> s6 [70, 70] { R5680 += 1, R5636 += 1, R88 += 1 };
  s2 -> s2 [71, 74] { R5680 += 1, R5636 += 1, R88 += 1 };
  s2 -> s8 [75, 75] { R5680 += 1, R5636 += 1, R88 += 1 };
  s2 -> s2 [76, 65535] { R5680 += 1, R5636 += 1, R88 += 1 };
  s3 -> s1 [0, 69] { R5680 += 1, R5636 += 1, R87 += 1, R88 += 1 };
  s3 -> s2 [0, 69] { R5680 += 1, R5636 += 1, R88 += 1 };
  s3 -> s3 [0, 65535] { R5680 += 1, R5635 += 1, R5636 += 1 };
  s3 -> s4 [70, 70] { R5680 += 1, R5636 += 1, R87 += 1, R88 += 1 };
  s3 -> s5 [70, 70] { R5680 += 1, R5636 += 1, R88 += 1 };
  s3 -> s6 [70, 70] { R5680 += 1, R5636 += 1, R88 += 1 };
  s3 -> s7 [70, 70] { R5680 += 1, R5636 += 1, R87 += 1, R88 += 1 };
  s3 -> s2 [71, 74] { R5680 += 1, R5636 += 1, R88 += 1 };
  s3 -> s1 [71, 65535] { R5680 += 1, R5636 += 1, R87 += 1, R88 += 1 };
  s3 -> s8 [75, 75] { R5680 += 1, R5636 += 1, R88 += 1 };
  s3 -> s2 [76, 65535] { R5680 += 1, R5636 += 1, R88 += 1 };
  s4 -> s6 [0, 74] { R5680 += 1, R5636 += 1, R88 += 1 };
  s4 -> s4 [0, 65535] { R5680 += 1, R5636 += 1, R87 += 1, R88 += 1 };
  s4 -> s11 [75, 75] { R5680 += 1, R5636 += 1, R88 += 1 };
  s4 -> s6 [76, 65535] { R5680 += 1, R5636 += 1, R88 += 1 };
  s6 -> s6 [0, 74] { R5680 += 1, R5636 += 1, R88 += 1 };
  s6 -> s11 [75, 75] { R5680 += 1, R5636 += 1, R88 += 1 };
  s6 -> s6 [76, 65535] { R5680 += 1, R5636 += 1, R88 += 1 };
  s8 -> s8 [0, 69] { R5680 += 1, R5636 += 1, R88 += 1 };
  s8 -> s8 [0, 65535] { R5680 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [70, 70] { R5680 += 1, R5636 += 1, R88 += 1 };
  s8 -> s11 [70, 70] { R5680 += 1, R5636 += 1, R88 += 1 };
  s8 -> s8 [71, 65535] { R5680 += 1, R5636 += 1, R88 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R5680 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s12 [0, 65535] { R5680 += 1 };
  s11 -> s11 [0, 65535] { R5680 += 1, R5636 += 1, R88 += 1 };
  s11 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R5680 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 69] { R5682 += 1, R5638 += 1, R91 += 1, R92 += 1 };
  s0 -> s0 [0, 65535] { R5681 += 1, R5682 += 1 };
  s0 -> s2 [0, 65535] { R5682 += 1, R5637 += 1, R5638 += 1 };
  s0 -> s3 [70, 70] { R5682 += 1, R5638 += 1, R91 += 1, R92 += 1 };
  s0 -> s4 [70, 70] { R5682 += 1, R5638 += 1, R91 += 1, R92 += 1 };
  s0 -> s1 [71, 65535] { R5682 += 1, R5638 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 69] { R5682 += 1, R5638 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 65535] { R5682 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [70, 70] { R5682 += 1, R5638 += 1, R91 += 1, R92 += 1 };
  s1 -> s4 [70, 70] { R5682 += 1, R5638 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [71, 65535] { R5682 += 1, R5638 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [0, 69] { R5682 += 1, R5638 += 1, R91 += 1, R92 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R5682 += 1, R5637 += 1, R5638 += 1 };
  s2 -> s3 [70, 70] { R5682 += 1, R5638 += 1, R91 += 1, R92 += 1 };
  s2 -> s4 [70, 70] { R5682 += 1, R5638 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [71, 65535] { R5682 += 1, R5638 += 1, R91 += 1, R92 += 1 };
  s3 -> s3 [0, 65535] { R5682 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R5682 += 1, R5638 += 1, R91 += 1, R92 += 1 };
  s4 -> s6 [0, 65535] { R5682 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R5682 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 69] { R5684 += 1, R5640 += 1, R3451 += 1, R3452 += 1 };
  s0 -> s2 [0, 69] { R5684 += 1, R5640 += 1, R3452 += 1 };
  s0 -> s3 [0, 69] { R5684 += 1, R5640 += 1, R3452 += 1, R3453 += 1 };
  s0 -> s4 [0, 65535] { R5684 += 1, R5639 += 1, R5640 += 1 };
  s0 -> s0 [0, 65535] { R5683 += 1, R5684 += 1 };
  s0 -> s5 [70, 70] { R5684 += 1, R5640 += 1, R3451 += 1, R3452 += 1 };
  s0 -> s6 [70, 70] { R5684 += 1, R5640 += 1, R3452 += 1, R3453 += 1 };
  s0 -> s7 [70, 70] { R5684 += 1, R5640 += 1, R3452 += 1 };
  s0 -> s8 [70, 70] { R5684 += 1, R5640 += 1, R3452 += 1, R3453 += 1 };
  s0 -> s9 [70, 70] { R5684 += 1, R5640 += 1, R3452 += 1 };
  s0 -> s10 [70, 70] { R5684 += 1, R5640 += 1, R3451 += 1, R3452 += 1 };
  s0 -> s2 [71, 74] { R5684 += 1, R5640 += 1, R3452 += 1 };
  s0 -> s1 [71, 65535] { R5684 += 1, R5640 += 1, R3451 += 1, R3452 += 1 };
  s0 -> s3 [71, 65535] { R5684 += 1, R5640 += 1, R3452 += 1, R3453 += 1 };
  s0 -> s2 [76, 65535] { R5684 += 1, R5640 += 1, R3452 += 1 };
  s1 -> s1 [0, 69] { R5684 += 1, R5640 += 1, R3451 += 1, R3452 += 1 };
  s1 -> s2 [0, 69] { R5684 += 1, R5640 += 1, R3452 += 1 };
  s1 -> s3 [0, 69] { R5684 += 1, R5640 += 1, R3452 += 1, R3453 += 1 };
  s1 -> s5 [70, 70] { R5684 += 1, R5640 += 1, R3451 += 1, R3452 += 1 };
  s1 -> s6 [70, 70] { R5684 += 1, R5640 += 1, R3452 += 1, R3453 += 1 };
  s1 -> s7 [70, 70] { R5684 += 1, R5640 += 1, R3452 += 1 };
  s1 -> s8 [70, 70] { R5684 += 1, R5640 += 1, R3452 += 1, R3453 += 1 };
  s1 -> s9 [70, 70] { R5684 += 1, R5640 += 1, R3452 += 1 };
  s1 -> s10 [70, 70] { R5684 += 1, R5640 += 1, R3451 += 1, R3452 += 1 };
  s1 -> s2 [71, 74] { R5684 += 1, R5640 += 1, R3452 += 1 };
  s1 -> s1 [71, 65535] { R5684 += 1, R5640 += 1, R3451 += 1, R3452 += 1 };
  s1 -> s3 [71, 65535] { R5684 += 1, R5640 += 1, R3452 += 1, R3453 += 1 };
  s1 -> s2 [76, 65535] { R5684 += 1, R5640 += 1, R3452 += 1 };
  s2 -> s2 [0, 69] { R5684 += 1, R5640 += 1, R3452 += 1 };
  s2 -> s2 [0, 65535] { R5684 += 1 };
  s2 -> s11 [0, 65535];
  s2 -> s7 [70, 70] { R5684 += 1, R5640 += 1 };
  s2 -> s9 [70, 70] { R5684 += 1, R5640 += 1 };
  s2 -> s2 [71, 74] { R5684 += 1, R5640 += 1, R3452 += 1 };
  s2 -> s2 [71, 65535] { R5684 += 1, R5640 += 1 };
  s2 -> s2 [76, 65535] { R5684 += 1, R5640 += 1, R3452 += 1 };
  s3 -> s2 [0, 69] { R5684 += 1, R5640 += 1, R3452 += 1 };
  s3 -> s3 [0, 69] { R5684 += 1, R5640 += 1, R3452 += 1, R3453 += 1 };
  s3 -> s6 [70, 70] { R5684 += 1, R5640 += 1, R3452 += 1, R3453 += 1 };
  s3 -> s7 [70, 70] { R5684 += 1, R5640 += 1, R3452 += 1 };
  s3 -> s8 [70, 70] { R5684 += 1, R5640 += 1, R3452 += 1, R3453 += 1 };
  s3 -> s9 [70, 70] { R5684 += 1, R5640 += 1, R3452 += 1 };
  s3 -> s2 [71, 74] { R5684 += 1, R5640 += 1, R3452 += 1 };
  s3 -> s3 [71, 65535] { R5684 += 1, R5640 += 1, R3452 += 1, R3453 += 1 };
  s3 -> s2 [76, 65535] { R5684 += 1, R5640 += 1, R3452 += 1 };
  s4 -> s1 [0, 69] { R5684 += 1, R5640 += 1, R3451 += 1, R3452 += 1 };
  s4 -> s2 [0, 69] { R5684 += 1, R5640 += 1, R3452 += 1 };
  s4 -> s3 [0, 69] { R5684 += 1, R5640 += 1, R3452 += 1, R3453 += 1 };
  s4 -> s4 [0, 65535] { R5684 += 1, R5639 += 1, R5640 += 1 };
  s4 -> s5 [70, 70] { R5684 += 1, R5640 += 1, R3451 += 1, R3452 += 1 };
  s4 -> s6 [70, 70] { R5684 += 1, R5640 += 1, R3452 += 1, R3453 += 1 };
  s4 -> s7 [70, 70] { R5684 += 1, R5640 += 1, R3452 += 1 };
  s4 -> s8 [70, 70] { R5684 += 1, R5640 += 1, R3452 += 1, R3453 += 1 };
  s4 -> s9 [70, 70] { R5684 += 1, R5640 += 1, R3452 += 1 };
  s4 -> s10 [70, 70] { R5684 += 1, R5640 += 1, R3451 += 1, R3452 += 1 };
  s4 -> s2 [71, 74] { R5684 += 1, R5640 += 1, R3452 += 1 };
  s4 -> s1 [71, 65535] { R5684 += 1, R5640 += 1, R3451 += 1, R3452 += 1 };
  s4 -> s3 [71, 65535] { R5684 += 1, R5640 += 1, R3452 += 1, R3453 += 1 };
  s4 -> s2 [76, 65535] { R5684 += 1, R5640 += 1, R3452 += 1 };
  s7 -> s7 [0, 74] { R5684 += 1, R5640 += 1, R3452 += 1 };
  s7 -> s7 [0, 65535] { R5684 += 1, R5640 += 1 };
  s7 -> s11 [0, 65535];
  s7 -> s12 [0, 65535] { R5684 += 1 };
  s7 -> s7 [76, 65535] { R5684 += 1, R5640 += 1, R3452 += 1 };
  s8 -> s7 [0, 74] { R5684 += 1, R5640 += 1, R3452 += 1 };
  s8 -> s8 [0, 65535] { R5684 += 1, R5640 += 1, R3452 += 1, R3453 += 1 };
  s8 -> s7 [76, 65535] { R5684 += 1, R5640 += 1, R3452 += 1 };
  s9 -> s9 [0, 65535] { R5684 += 1 };
  s9 -> s11 [0, 65535];
  s10 -> s7 [0, 74] { R5684 += 1, R5640 += 1, R3452 += 1 };
  s10 -> s8 [0, 65535] { R5684 += 1, R5640 += 1, R3452 += 1, R3453 += 1 };
  s10 -> s10 [0, 65535] { R5684 += 1, R5640 += 1, R3451 += 1, R3452 += 1 };
  s10 -> s7 [76, 65535] { R5684 += 1, R5640 += 1, R3452 += 1 };
  s11 -> s11 [0, 65535];
  s12 -> s11 [0, 65535];
  s12 -> s12 [0, 65535] { R5684 += 1 };
  accepting s12, s2, s9, s7, s11;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 69] { R5686 += 1, R5642 += 1, R5131 += 1, R5132 += 1 };
  s0 -> s2 [0, 65535] { R5686 += 1, R5641 += 1, R5642 += 1 };
  s0 -> s0 [0, 65535] { R5685 += 1, R5686 += 1 };
  s0 -> s3 [70, 70] { R5686 += 1, R5642 += 1, R5131 += 1, R5132 += 1 };
  s0 -> s4 [70, 70] { R5686 += 1, R5642 += 1, R5131 += 1, R5132 += 1 };
  s0 -> s1 [71, 65535] { R5686 += 1, R5642 += 1, R5131 += 1, R5132 += 1 };
  s1 -> s1 [0, 69] { R5686 += 1, R5642 += 1, R5131 += 1, R5132 += 1 };
  s1 -> s1 [0, 65535] { R5686 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [70, 70] { R5686 += 1, R5642 += 1, R5131 += 1, R5132 += 1 };
  s1 -> s4 [70, 70] { R5686 += 1, R5642 += 1, R5131 += 1, R5132 += 1 };
  s1 -> s1 [71, 65535] { R5686 += 1, R5642 += 1, R5131 += 1, R5132 += 1 };
  s2 -> s1 [0, 69] { R5686 += 1, R5642 += 1, R5131 += 1, R5132 += 1 };
  s2 -> s2 [0, 65535] { R5686 += 1, R5641 += 1, R5642 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [70, 70] { R5686 += 1, R5642 += 1, R5131 += 1, R5132 += 1 };
  s2 -> s4 [70, 70] { R5686 += 1, R5642 += 1, R5131 += 1, R5132 += 1 };
  s2 -> s1 [71, 65535] { R5686 += 1, R5642 += 1, R5131 += 1, R5132 += 1 };
  s3 -> s3 [0, 65535] { R5686 += 1, R5642 += 1, R5131 += 1, R5132 += 1 };
  s3 -> s6 [0, 65535] { R5686 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R5686 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R5686 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 69] { R5688 += 1, R5644 += 1, R5580 += 1, R5581 += 1, R5582 += 1 };
  s0 -> s2 [0, 69] { R5688 += 1, R5644 += 1, R5579 += 1, R5580 += 1 };
  s0 -> s0 [0, 65535] { R5687 += 1, R5688 += 1 };
  s0 -> s3 [0, 65535] { R5688 += 1, R5643 += 1, R5644 += 1 };
  s0 -> s4 [70, 70] { R5688 += 1, R5644 += 1, R5579 += 1, R5580 += 1 };
  s0 -> s5 [70, 70] { R5688 += 1, R5644 += 1, R5580 += 1, R5581 += 1, R5582 += 1 };
  s0 -> s6 [70, 70] { R5688 += 1, R5644 += 1, R5579 += 1, R5580 += 1 };
  s0 -> s7 [70, 70] { R5688 += 1, R5644 += 1, R5580 += 1, R5581 += 1, R5582 += 1 };
  s0 -> s1 [71, 65535] { R5688 += 1, R5644 += 1, R5580 += 1, R5581 += 1, R5582 += 1 };
  s0 -> s2 [71, 65535] { R5688 += 1, R5644 += 1, R5579 += 1, R5580 += 1 };
  s1 -> s1 [0, 69] { R5688 += 1, R5644 += 1, R5580 += 1, R5581 += 1, R5582 += 1 };
  s1 -> s1 [0, 65535] { R5688 += 1 };
  s1 -> s9 [0, 65535];
  s1 -> s5 [70, 70] { R5688 += 1, R5644 += 1, R5580 += 1, R5581 += 1, R5582 += 1 };
  s1 -> s7 [70, 70] { R5688 += 1, R5644 += 1, R5580 += 1, R5581 += 1, R5582 += 1 };
  s1 -> s1 [71, 65535] { R5688 += 1, R5644 += 1, R5580 += 1, R5581 += 1, R5582 += 1 };
  s2 -> s1 [0, 69] { R5688 += 1, R5644 += 1, R5580 += 1, R5581 += 1, R5582 += 1 };
  s2 -> s2 [0, 69] { R5688 += 1, R5644 += 1, R5579 += 1, R5580 += 1 };
  s2 -> s4 [70, 70] { R5688 += 1, R5644 += 1, R5579 += 1, R5580 += 1 };
  s2 -> s5 [70, 70] { R5688 += 1, R5644 += 1, R5580 += 1, R5581 += 1, R5582 += 1 };
  s2 -> s6 [70, 70] { R5688 += 1, R5644 += 1, R5579 += 1, R5580 += 1 };
  s2 -> s7 [70, 70] { R5688 += 1, R5644 += 1, R5580 += 1, R5581 += 1, R5582 += 1 };
  s2 -> s1 [71, 65535] { R5688 += 1, R5644 += 1, R5580 += 1, R5581 += 1, R5582 += 1 };
  s2 -> s2 [71, 65535] { R5688 += 1, R5644 += 1, R5579 += 1, R5580 += 1 };
  s3 -> s1 [0, 69] { R5688 += 1, R5644 += 1, R5580 += 1, R5581 += 1, R5582 += 1 };
  s3 -> s2 [0, 69] { R5688 += 1, R5644 += 1, R5579 += 1, R5580 += 1 };
  s3 -> s3 [0, 65535] { R5688 += 1, R5643 += 1, R5644 += 1 };
  s3 -> s4 [70, 70] { R5688 += 1, R5644 += 1, R5579 += 1, R5580 += 1 };
  s3 -> s5 [70, 70] { R5688 += 1, R5644 += 1, R5580 += 1, R5581 += 1, R5582 += 1 };
  s3 -> s6 [70, 70] { R5688 += 1, R5644 += 1, R5579 += 1, R5580 += 1 };
  s3 -> s7 [70, 70] { R5688 += 1, R5644 += 1, R5580 += 1, R5581 += 1, R5582 += 1 };
  s3 -> s1 [71, 65535] { R5688 += 1, R5644 += 1, R5580 += 1, R5581 += 1, R5582 += 1 };
  s3 -> s2 [71, 65535] { R5688 += 1, R5644 += 1, R5579 += 1, R5580 += 1 };
  s4 -> s4 [0, 65535] { R5688 += 1, R5644 += 1, R5579 += 1, R5580 += 1 };
  s4 -> s7 [0, 65535] { R5688 += 1, R5644 += 1, R5580 += 1, R5581 += 1, R5582 += 1 };
  s5 -> s5 [0, 65535] { R5688 += 1 };
  s5 -> s9 [0, 65535];
  s7 -> s8 [0, 65535] { R5688 += 1 };
  s7 -> s9 [0, 65535];
  s7 -> s7 [0, 65535] { R5688 += 1, R5644 += 1, R5580 += 1, R5581 += 1, R5582 += 1 };
  s8 -> s8 [0, 65535] { R5688 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s8, s5, s9, s1, s7;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [102, 102];
  accepting s1;
};
};
constraint R2 = R5606 && R3 = R5688 && R23 - R5688 = -1 && R24 = R5688 && R25 - R5688 = -1 && R26 = R5688 && R27 = 0 && R28 = 1 && R29 = 0 && R30 = 1 && R45 + R84 + R83 + -1*R5136 + -1*R5132 - R66 = 0 && R49 + R89 + R87 = 0 && R50 + R90 + R88 + -1*R5136 + -1*R5132 - R66 = 0 && R55 + R96 + R93 + -1*R5138 + -1*R5134 - R68 = 0 && R65 + R5135 + R5131 = 0 && R67 + R5137 + R5133 = 0 && R5605 = 0 && R5629 = 0 && R5630 = 0 && R5635 = 0 && R5636 = 0 && R5639 = 0 && R5640 = 0 && R5643 = 0 && R5644 = 0 && R5645 = 0 && R5646 = R5688 && R5647 = 0 && R5648 = R5688 && R5649 = 0 && R5650 = R5688 && R5651 = 0 && R5652 = R5688 && R5653 = 0 && R5654 = R5688 && R5655 = 0 && R5656 = R5688 && R5657 = 0 && R5658 = R5688 && R5659 = 0 && R5660 = R5688 && R5661 = 0 && R5662 = R5688 && R5663 = 0 && R5664 = R5688 && R5665 = 0 && R5666 = R5688 && R5667 = 0 && R5668 = R5688 && R5669 = 0 && R5670 = R5688 && R5671 = 0 && R5672 = R5688 && R5673 = 0 && R5674 = R5688 && R5675 = 0 && R5676 = R5688 && R5677 = 0 && R5678 = R5688 && R5679 = 0 && R5680 = R5688 && R5681 = 0 && R5682 = R5688 && R5683 = 0 && R5684 = R5688 && R5685 = 0 && R5686 = R5688 && R5687 = 0 && R12 < 1 && R15 < 1 && R16 < 1 && R47 + R86 + R85 < 1 && R61 + R3456 + R3453 < 1 && -1*R5136 + -1*R5132 - R66 < 1 && -1*R5138 + -1*R5134 - R68 < 1 && -1 < R5606 && 0 < R5688 && (R53 + R94 + R91 != 0 || R54 + R95 + R92 + -1*R5136 + -1*R5132 - R66 = 0 || R66 + R5136 + R5132 < 1) && (R59 + R3454 + R3451 != 0 || R60 + R3455 + R3452 + -1*R5136 + -1*R5132 - R66 = 0 || R66 + R5136 + R5132 < 1) && (R66 + R5136 + R5132 != 0 || ((R53 + R94 + R91 != 0 || R54 + R95 + R92 = 0 || R68 + R5138 + R5134 < 1) && (R53 + R94 + R91 = 0 || R68 + R5138 + R5134 < 1))) && (R66 + R5136 + R5132 != 0 || ((R59 + R3454 + R3451 != 0 || R60 + R3455 + R3452 = 0 || R68 + R5138 + R5134 < 1) && (R59 + R3454 + R3451 = 0 || R68 + R5138 + R5134 < 1))) && (R66 + R5136 + R5132 != 0 || ((R73 + R5584 + R5579 != 0 || R74 + R5585 + R5580 = 0 || R68 + R5138 + R5134 < 1) && (R73 + R5584 + R5579 = 0 || R68 + R5138 + R5134 < 1))) && (R68 + R5138 + R5134 != 0 || R77 + R5588 + R5583 = 0 || (R75 + R5586 + R5581 = 0 && R76 + R5587 + R5582 = 0)) && (R73 + R5584 + R5579 != 0 || R66 + R5136 + R5132 + -1*R5585 + -1*R5580 - R74 = 0 || R66 + R5136 + R5132 < 1) && (R75 + R5586 + R5581 != 0 || R68 + R5138 + R5134 + -1*R5587 + -1*R5582 - R76 = 0 || R68 + R5138 + R5134 < 1) && (R5589 != 0 || R5590 = R5606 || (R20 = 0 && R5606 = 0)) && (R5591 != 0 || R5592 = R5606 || (R20 = 0 && R5606 = 0)) && (R5593 != 0 || R5594 = R5606 || (R20 = 0 && R5606 = 0)) && (R5595 != 0 || R5596 = R5606 || (R20 = 0 && R5606 = 0)) && (R5597 != 0 || R5598 = R5606 || (R20 = 0 && R5606 = 0)) && (R5599 != 0 || R5600 = R5606 || (R20 = 0 && R5606 = 0)) && (R5601 != 0 || R5602 = R5606 || (R20 = 0 && R5606 = 0)) && (R5603 != 0 || R5604 = R5606 || (R20 = 0 && R5606 = 0)) && (R5607 != 0 || R5606 = R5608 || (R20 = 0 && R5606 = 0)) && (R21 = 0 || (R5627 = 0 && R5628 = 0)) && (R21 = 0 || (R5631 = 0 && R5632 = 0)) && (R21 = 0 || (R5633 = 0 && R5634 = 0)) && (R21 = 0 || (R5637 = 0 && R5638 = 0)) && (R21 = 0 || (R5641 = 0 && R5642 = 0)) && (R22 = 0 || (R5609 = 0 && R5610 = 0)) && (R22 = 0 || (R5611 = 0 && R5612 = 0)) && (R22 = 0 || (R5613 = 0 && R5614 = 0)) && (R22 = 0 || (R5615 = 0 && R5616 = 0)) && (R22 = 0 || (R5617 = 0 && R5618 = 0)) && (R22 = 0 || (R5619 = 0 && R5620 = 0)) && (R22 = 0 || (R5621 = 0 && R5622 = 0)) && (R22 = 0 || (R5623 = 0 && R5624 = 0)) && (R22 = 0 || (R5625 = 0 && R5626 = 0)) && (R53 + R94 + R91 = 0 || R66 + R5136 + R5132 < 1) && (R59 + R3454 + R3451 = 0 || R66 + R5136 + R5132 < 1) && (R73 + R5584 + R5579 = 0 || R66 + R5136 + R5132 < 1) && (R75 + R5586 + R5581 = 0 || R68 + R5138 + R5134 < 1) && (R5589 = 0 || (R20 = 0 && R5606 = 0)) && (R5591 = 0 || (R20 = 0 && R5606 = 0)) && (R5593 = 0 || (R20 = 0 && R5606 = 0)) && (R5595 = 0 || (R20 = 0 && R5606 = 0)) && (R5597 = 0 || (R20 = 0 && R5606 = 0)) && (R5599 = 0 || (R20 = 0 && R5606 = 0)) && (R5601 = 0 || (R20 = 0 && R5606 = 0)) && (R5603 = 0 || (R20 = 0 && R5606 = 0)) && (R5607 = 0 || (R20 = 0 && R5606 = 0));
// End of Parikh automata intersection problem
