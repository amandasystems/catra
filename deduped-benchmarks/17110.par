// Parikh automata intersection problem, generated by OSTRICH+
counter int R12, R15, R16, R2, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R4, R45, R47, R49, R5, R50, R53, R54, R55, R59, R60, R61, R65, R66, R67, R68, R6805, R6806, R6807, R6808, R6809, R6810, R73, R74, R75, R76, R77, R83, R84, R8485, R8486, R8487, R8488, R8489, R8490, R8491, R8492, R8493, R8494, R8495, R8496, R8497, R8498, R8499, R85, R8500, R8501, R8502, R8503, R8504, R8505, R8506, R8507, R8508, R8509, R8510, R8511, R8512, R8513, R8514, R8515, R8516, R8517, R8518, R8519, R8520, R8521, R8522, R8523, R8524, R8525, R8526, R8527, R8528, R8529, R8530, R8531, R8532, R8533, R8534, R8535, R8536, R8537, R8538, R8539, R8540, R8541, R8542, R8543, R8544, R8545, R8546, R8547, R8548, R8549, R8550, R8551, R8552, R8553, R8554, R8555, R8556, R8557, R8558, R8559, R8560, R8561, R8562, R8563, R8564, R8565, R8566, R8567, R8568, R8569, R8570, R8571, R8572, R8573, R8574, R8575, R8576, R8577, R8578, R8579, R8580, R8581, R8582, R8583, R8584, R8585, R8586, R8587, R8588, R8589, R8590, R8591, R8592, R8593, R8594, R8595, R8596, R8597, R8598, R8599, R86, R8600, R8601, R8602, R87, R88, R89, R90, R91, R92, R93, R94, R95, R96;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [70, 70];
  s0 -> s0 [71, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [70, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R15 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 69];
  s0 -> s0 [0, 65535] { R16 += 1 };
  s0 -> s2 [70, 70];
  s0 -> s1 [71, 65535];
  s1 -> s1 [0, 69];
  s1 -> s2 [70, 70];
  s1 -> s1 [71, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R24 += 1 };
  s0 -> s0 [0, 65535] { R23 += 1, R24 += 1 };
  s0 -> s2 [9, 13] { R24 += 1 };
  s0 -> s1 [14, 31] { R24 += 1 };
  s0 -> s2 [32, 32] { R24 += 1 };
  s0 -> s1 [33, 65535] { R24 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R24 += 1 };
  s2 -> s1 [0, 65535] { R24 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R25 += 1, R26 += 1 };
  s1 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R28 += 1 };
  s0 -> s0 [0, 65535] { R27 += 1, R28 += 1 };
  s0 -> s2 [9, 13] { R28 += 1 };
  s0 -> s1 [14, 31] { R28 += 1 };
  s0 -> s2 [32, 32] { R28 += 1 };
  s0 -> s1 [33, 65535] { R28 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R28 += 1 };
  s2 -> s1 [0, 65535] { R28 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R29 += 1, R30 += 1 };
  s1 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R8524 += 1, R22 += 1 };
  s0 -> s0 [0, 65535] { R8523 += 1, R8524 += 1 };
  s1 -> s1 [0, 65535] { R8524 += 1, R22 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 69] { R8526 += 1 };
  s0 -> s0 [0, 65535] { R8525 += 1, R8526 += 1 };
  s0 -> s2 [70, 70] { R8526 += 1 };
  s0 -> s3 [70, 70] { R8526 += 1 };
  s0 -> s1 [76, 65535] { R8526 += 1 };
  s1 -> s1 [0, 69] { R8526 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R8526 += 1 };
  s1 -> s3 [70, 70] { R8526 += 1 };
  s1 -> s1 [76, 65535] { R8526 += 1 };
  s2 -> s2 [0, 70] { R8526 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [76, 65535] { R8526 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 69] { R8528 += 1, R45 += 1 };
  s0 -> s0 [0, 65535] { R8527 += 1, R8528 += 1 };
  s0 -> s2 [70, 70] { R8528 += 1, R45 += 1 };
  s0 -> s3 [70, 70] { R8528 += 1, R45 += 1 };
  s0 -> s1 [71, 65535] { R8528 += 1, R45 += 1 };
  s1 -> s1 [0, 69] { R8528 += 1, R45 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R8528 += 1, R45 += 1 };
  s1 -> s3 [70, 70] { R8528 += 1, R45 += 1 };
  s1 -> s1 [71, 65535] { R8528 += 1, R45 += 1 };
  s2 -> s2 [0, 65535] { R8528 += 1, R45 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 69] { R8530 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R8529 += 1, R8530 += 1 };
  s0 -> s2 [70, 70] { R8530 += 1, R47 += 1 };
  s0 -> s3 [70, 70] { R8530 += 1, R47 += 1 };
  s0 -> s1 [71, 65535] { R8530 += 1, R47 += 1 };
  s1 -> s1 [0, 69] { R8530 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R8530 += 1, R47 += 1 };
  s1 -> s3 [70, 70] { R8530 += 1, R47 += 1 };
  s1 -> s1 [71, 65535] { R8530 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8530 += 1, R47 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 69] { R8532 += 1, R49 += 1, R50 += 1 };
  s0 -> s0 [0, 65535] { R8531 += 1, R8532 += 1 };
  s0 -> s2 [70, 70] { R8532 += 1, R49 += 1, R50 += 1 };
  s0 -> s3 [70, 70] { R8532 += 1, R49 += 1, R50 += 1 };
  s0 -> s1 [71, 65535] { R8532 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 69] { R8532 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R8532 += 1, R49 += 1, R50 += 1 };
  s1 -> s3 [70, 70] { R8532 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [71, 65535] { R8532 += 1, R49 += 1, R50 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R8532 += 1, R49 += 1, R50 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 69] { R8534 += 1, R53 += 1, R54 += 1 };
  s0 -> s0 [0, 65535] { R8533 += 1, R8534 += 1 };
  s0 -> s2 [70, 70] { R8534 += 1, R53 += 1, R54 += 1 };
  s0 -> s3 [70, 70] { R8534 += 1, R53 += 1, R54 += 1 };
  s0 -> s1 [71, 65535] { R8534 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 69] { R8534 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R8534 += 1, R53 += 1, R54 += 1 };
  s1 -> s3 [70, 70] { R8534 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [71, 65535] { R8534 += 1, R53 += 1, R54 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8534 += 1, R53 += 1, R54 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 69] { R8536 += 1, R59 += 1, R60 += 1 };
  s0 -> s0 [0, 65535] { R8535 += 1, R8536 += 1 };
  s0 -> s2 [70, 70] { R8536 += 1, R59 += 1, R60 += 1 };
  s0 -> s3 [70, 70] { R8536 += 1, R59 += 1, R60 += 1 };
  s0 -> s1 [71, 65535] { R8536 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 69] { R8536 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R8536 += 1, R59 += 1, R60 += 1 };
  s1 -> s3 [70, 70] { R8536 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [71, 65535] { R8536 += 1, R59 += 1, R60 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R8536 += 1, R59 += 1, R60 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 69] { R8538 += 1, R65 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R8537 += 1, R8538 += 1 };
  s0 -> s2 [70, 70] { R8538 += 1, R65 += 1, R66 += 1 };
  s0 -> s3 [70, 70] { R8538 += 1, R65 += 1, R66 += 1 };
  s0 -> s1 [71, 65535] { R8538 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 69] { R8538 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R8538 += 1, R65 += 1, R66 += 1 };
  s1 -> s3 [70, 70] { R8538 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [71, 65535] { R8538 += 1, R65 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R8538 += 1, R65 += 1, R66 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 69] { R8540 += 1, R73 += 1, R74 += 1 };
  s0 -> s0 [0, 65535] { R8539 += 1, R8540 += 1 };
  s0 -> s2 [70, 70] { R8540 += 1, R73 += 1, R74 += 1 };
  s0 -> s3 [70, 70] { R8540 += 1, R73 += 1, R74 += 1 };
  s0 -> s1 [71, 65535] { R8540 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 69] { R8540 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R8540 += 1, R73 += 1, R74 += 1 };
  s1 -> s3 [70, 70] { R8540 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [71, 65535] { R8540 += 1, R73 += 1, R74 += 1 };
  s2 -> s2 [0, 65535] { R8540 += 1, R73 += 1, R74 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 69] { R8560 += 1 };
  s0 -> s0 [0, 65535] { R8559 += 1, R8560 += 1 };
  s0 -> s2 [70, 70] { R8560 += 1 };
  s0 -> s1 [71, 65535] { R8560 += 1 };
  s1 -> s1 [0, 69] { R8560 += 1 };
  s1 -> s2 [70, 70] { R8560 += 1 };
  s1 -> s1 [71, 65535] { R8560 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R8560 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R8561 += 1, R8562 += 1 };
  s0 -> s1 [0, 65535] { R8562 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R8562 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 69] { R8564 += 1 };
  s0 -> s2 [0, 65535] { R8564 += 1, R12 += 1 };
  s0 -> s0 [0, 65535] { R8563 += 1, R8564 += 1 };
  s0 -> s3 [70, 70] { R8564 += 1 };
  s0 -> s1 [71, 65535] { R8564 += 1 };
  s1 -> s1 [0, 69] { R8564 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [70, 70] { R8564 += 1 };
  s1 -> s1 [71, 65535] { R8564 += 1 };
  s2 -> s1 [0, 69] { R8564 += 1 };
  s2 -> s2 [0, 65535] { R8564 += 1, R12 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [70, 70] { R8564 += 1 };
  s2 -> s1 [71, 65535] { R8564 += 1 };
  s3 -> s3 [0, 65535] { R8564 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 69] { R8566 += 1, R8504 += 1 };
  s0 -> s2 [0, 65535] { R8566 += 1, R8503 += 1, R8504 += 1 };
  s0 -> s0 [0, 65535] { R8565 += 1, R8566 += 1 };
  s0 -> s1 [71, 65535] { R8566 += 1, R8504 += 1 };
  s1 -> s1 [0, 69] { R8566 += 1, R8504 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R8566 += 1 };
  s1 -> s1 [71, 65535] { R8566 += 1, R8504 += 1 };
  s2 -> s1 [0, 69] { R8566 += 1, R8504 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R8566 += 1, R8503 += 1, R8504 += 1 };
  s2 -> s1 [71, 65535] { R8566 += 1, R8504 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R8568 += 1, R8506 += 1, R20 += 1 };
  s0 -> s2 [0, 65535] { R8568 += 1, R8505 += 1, R8506 += 1 };
  s0 -> s0 [0, 65535] { R8567 += 1, R8568 += 1 };
  s1 -> s1 [0, 65535] { R8568 += 1, R8506 += 1, R20 += 1 };
  s1 -> s4 [0, 65535] { R8568 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R8568 += 1, R8506 += 1, R20 += 1 };
  s2 -> s2 [0, 65535] { R8568 += 1, R8505 += 1, R8506 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8568 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 70] { R8570 += 1, R8508 += 1 };
  s0 -> s0 [0, 65535] { R8569 += 1, R8570 += 1 };
  s0 -> s2 [0, 65535] { R8570 += 1, R8507 += 1, R8508 += 1 };
  s0 -> s1 [75, 65535] { R8570 += 1, R8508 += 1 };
  s1 -> s1 [0, 70] { R8570 += 1, R8508 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R8570 += 1 };
  s1 -> s1 [75, 65535] { R8570 += 1, R8508 += 1 };
  s2 -> s1 [0, 70] { R8570 += 1, R8508 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R8570 += 1, R8507 += 1, R8508 += 1 };
  s2 -> s1 [75, 65535] { R8570 += 1, R8508 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R8572 += 1, R8509 += 1, R8510 += 1 };
  s0 -> s2 [0, 65535] { R8572 += 1, R8510 += 1, R84 += 1 };
  s0 -> s0 [0, 65535] { R8571 += 1, R8572 += 1 };
  s1 -> s1 [0, 65535] { R8572 += 1, R8509 += 1, R8510 += 1 };
  s1 -> s2 [0, 65535] { R8572 += 1, R8510 += 1, R84 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R8572 += 1, R8510 += 1, R84 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R8572 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8572 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 74] { R8574 += 1, R8512 += 1 };
  s0 -> s2 [0, 65535] { R8574 += 1, R8511 += 1, R8512 += 1 };
  s0 -> s3 [0, 65535] { R8574 += 1, R8512 += 1, R86 += 1 };
  s0 -> s0 [0, 65535] { R8573 += 1, R8574 += 1 };
  s0 -> s1 [76, 65535] { R8574 += 1, R8512 += 1 };
  s1 -> s1 [0, 74] { R8574 += 1, R8512 += 1 };
  s1 -> s1 [0, 65535] { R8574 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [76, 65535] { R8574 += 1, R8512 += 1 };
  s2 -> s1 [0, 74] { R8574 += 1, R8512 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R8574 += 1, R8511 += 1, R8512 += 1 };
  s2 -> s3 [0, 65535] { R8574 += 1, R8512 += 1, R86 += 1 };
  s2 -> s1 [76, 65535] { R8574 += 1, R8512 += 1 };
  s3 -> s1 [0, 74] { R8574 += 1, R8512 += 1 };
  s3 -> s4 [0, 65535] { R8574 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R8574 += 1, R8512 += 1, R86 += 1 };
  s3 -> s1 [76, 65535] { R8574 += 1, R8512 += 1 };
  s4 -> s4 [0, 65535] { R8574 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 65535] { R8576 += 1, R8514 += 1, R90 += 1 };
  s0 -> s2 [0, 65535] { R8576 += 1, R8513 += 1, R8514 += 1 };
  s0 -> s0 [0, 65535] { R8575 += 1, R8576 += 1 };
  s0 -> s3 [0, 65535] { R8576 += 1, R8514 += 1 };
  s1 -> s4 [0, 65535] { R8576 += 1 };
  s1 -> s1 [0, 65535] { R8576 += 1, R8514 += 1, R90 += 1 };
  s1 -> s3 [0, 65535] { R8576 += 1, R8514 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R8576 += 1, R8514 += 1, R90 += 1 };
  s2 -> s2 [0, 65535] { R8576 += 1, R8513 += 1, R8514 += 1 };
  s2 -> s3 [0, 65535] { R8576 += 1, R8514 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s4 [0, 65535] { R8576 += 1 };
  s3 -> s3 [0, 65535] { R8576 += 1, R8514 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8576 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R8578 += 1, R8516 += 1, R94 += 1, R95 += 1 };
  s0 -> s2 [0, 65535] { R8578 += 1, R8516 += 1, R95 += 1, R96 += 1 };
  s0 -> s0 [0, 65535] { R8577 += 1, R8578 += 1 };
  s0 -> s3 [0, 65535] { R8578 += 1, R8515 += 1, R8516 += 1 };
  s1 -> s6 [0, 65535] { R8578 += 1 };
  s1 -> s1 [0, 65535] { R8578 += 1, R8516 += 1, R94 += 1, R95 += 1 };
  s1 -> s2 [0, 65535] { R8578 += 1, R8516 += 1, R95 += 1, R96 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R8578 += 1, R8516 += 1 };
  s2 -> s6 [0, 65535] { R8578 += 1 };
  s2 -> s2 [0, 65535] { R8578 += 1, R8516 += 1, R95 += 1, R96 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R8578 += 1, R8516 += 1, R94 += 1, R95 += 1 };
  s3 -> s2 [0, 65535] { R8578 += 1, R8516 += 1, R95 += 1, R96 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8578 += 1, R8515 += 1, R8516 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8578 += 1, R8516 += 1 };
  s5 -> s6 [0, 65535] { R8578 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R8578 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 74] { R8580 += 1, R8518 += 1, R6809 += 1 };
  s0 -> s2 [0, 65535] { R8580 += 1, R8517 += 1, R8518 += 1 };
  s0 -> s3 [0, 65535] { R8580 += 1, R8518 += 1 };
  s0 -> s4 [0, 65535] { R8580 += 1, R8518 += 1, R6809 += 1, R6810 += 1 };
  s0 -> s0 [0, 65535] { R8579 += 1, R8580 += 1 };
  s0 -> s1 [76, 65535] { R8580 += 1, R8518 += 1, R6809 += 1 };
  s1 -> s1 [0, 74] { R8580 += 1, R8518 += 1, R6809 += 1 };
  s1 -> s1 [0, 65535] { R8580 += 1, R8518 += 1 };
  s1 -> s5 [0, 65535] { R8580 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [76, 65535] { R8580 += 1, R8518 += 1, R6809 += 1 };
  s2 -> s1 [0, 74] { R8580 += 1, R8518 += 1, R6809 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R8580 += 1, R8517 += 1, R8518 += 1 };
  s2 -> s3 [0, 65535] { R8580 += 1, R8518 += 1 };
  s2 -> s4 [0, 65535] { R8580 += 1, R8518 += 1, R6809 += 1, R6810 += 1 };
  s2 -> s1 [76, 65535] { R8580 += 1, R8518 += 1, R6809 += 1 };
  s3 -> s5 [0, 65535] { R8580 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R8580 += 1, R8518 += 1 };
  s4 -> s1 [0, 74] { R8580 += 1, R8518 += 1, R6809 += 1 };
  s4 -> s5 [0, 65535] { R8580 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s3 [0, 65535] { R8580 += 1, R8518 += 1 };
  s4 -> s4 [0, 65535] { R8580 += 1, R8518 += 1, R6809 += 1, R6810 += 1 };
  s4 -> s1 [76, 65535] { R8580 += 1, R8518 += 1, R6809 += 1 };
  s5 -> s5 [0, 65535] { R8580 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 74] { R8582 += 1, R8520 += 1, R8490 += 1, R8492 += 1 };
  s0 -> s0 [0, 65535] { R8581 += 1, R8582 += 1 };
  s0 -> s2 [0, 65535] { R8582 += 1, R8519 += 1, R8520 += 1 };
  s0 -> s3 [0, 65535] { R8582 += 1, R8520 += 1, R8489 += 1, R8490 += 1 };
  s0 -> s4 [0, 65535] { R8582 += 1, R8520 += 1, R8490 += 1, R8491 += 1, R8492 += 1 };
  s0 -> s5 [75, 75] { R8582 += 1, R8520 += 1, R8490 += 1, R8492 += 1 };
  s0 -> s1 [76, 65535] { R8582 += 1, R8520 += 1, R8490 += 1, R8492 += 1 };
  s1 -> s1 [0, 74] { R8582 += 1, R8520 += 1, R8490 += 1, R8492 += 1 };
  s1 -> s5 [75, 75] { R8582 += 1, R8520 += 1, R8490 += 1, R8492 += 1 };
  s1 -> s1 [76, 65535] { R8582 += 1, R8520 += 1, R8490 += 1, R8492 += 1 };
  s2 -> s1 [0, 74] { R8582 += 1, R8520 += 1, R8490 += 1, R8492 += 1 };
  s2 -> s2 [0, 65535] { R8582 += 1, R8519 += 1, R8520 += 1 };
  s2 -> s3 [0, 65535] { R8582 += 1, R8520 += 1, R8489 += 1, R8490 += 1 };
  s2 -> s4 [0, 65535] { R8582 += 1, R8520 += 1, R8490 += 1, R8491 += 1, R8492 += 1 };
  s2 -> s5 [75, 75] { R8582 += 1, R8520 += 1, R8490 += 1, R8492 += 1 };
  s2 -> s1 [76, 65535] { R8582 += 1, R8520 += 1, R8490 += 1, R8492 += 1 };
  s3 -> s1 [0, 74] { R8582 += 1, R8520 += 1, R8490 += 1, R8492 += 1 };
  s3 -> s3 [0, 65535] { R8582 += 1, R8520 += 1, R8489 += 1, R8490 += 1 };
  s3 -> s4 [0, 65535] { R8582 += 1, R8520 += 1, R8490 += 1, R8491 += 1, R8492 += 1 };
  s3 -> s5 [75, 75] { R8582 += 1, R8520 += 1, R8490 += 1, R8492 += 1 };
  s3 -> s1 [76, 65535] { R8582 += 1, R8520 += 1, R8490 += 1, R8492 += 1 };
  s4 -> s1 [0, 74] { R8582 += 1, R8520 += 1, R8490 += 1, R8492 += 1 };
  s4 -> s4 [0, 65535] { R8582 += 1, R8520 += 1, R8490 += 1, R8491 += 1, R8492 += 1 };
  s4 -> s5 [75, 75] { R8582 += 1, R8520 += 1, R8490 += 1, R8492 += 1 };
  s4 -> s1 [76, 65535] { R8582 += 1, R8520 += 1, R8490 += 1, R8492 += 1 };
  s5 -> s6 [0, 65535] { R8582 += 1, R8520 += 1, R8490 += 1 };
  s5 -> s7 [0, 65535];
  s5 -> s5 [0, 65535] { R8582 += 1, R8520 += 1, R8490 += 1, R8492 += 1 };
  s5 -> s8 [0, 65535] { R8582 += 1, R8520 += 1 };
  s5 -> s9 [0, 65535] { R8582 += 1 };
  s6 -> s6 [0, 65535] { R8582 += 1, R8520 += 1, R8490 += 1 };
  s6 -> s7 [0, 65535];
  s6 -> s8 [0, 65535] { R8582 += 1, R8520 += 1 };
  s6 -> s9 [0, 65535] { R8582 += 1 };
  s7 -> s7 [0, 65535];
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R8582 += 1, R8520 += 1 };
  s8 -> s9 [0, 65535] { R8582 += 1 };
  s9 -> s7 [0, 65535];
  s9 -> s9 [0, 65535] { R8582 += 1 };
  accepting s8, s5, s9, s6, s7;
};
automaton value2_29 {
  init s0;
  s0 -> s0 [0, 65535] { R8583 += 1, R8584 += 1 };
  s0 -> s1 [0, 65535] { R8584 += 1, R8522 += 1 };
  s0 -> s2 [0, 65535] { R8584 += 1, R8521 += 1, R8522 += 1 };
  s0 -> s3 [0, 65535] { R8584 += 1, R8522 += 1, R8499 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R8584 += 1, R8522 += 1 };
  s1 -> s5 [0, 65535] { R8584 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R8584 += 1, R8522 += 1 };
  s2 -> s2 [0, 65535] { R8584 += 1, R8521 += 1, R8522 += 1 };
  s2 -> s3 [0, 65535] { R8584 += 1, R8522 += 1, R8499 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R8584 += 1, R8522 += 1 };
  s3 -> s5 [0, 65535] { R8584 += 1 };
  s3 -> s3 [0, 65535] { R8584 += 1, R8522 += 1, R8499 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8584 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s0 [0, 65535] { R8585 += 1, R8586 += 1 };
  s0 -> s1 [0, 65535] { R8586 += 1, R8542 += 1, R21 += 1 };
  s0 -> s2 [0, 65535] { R8586 += 1, R8541 += 1, R8542 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R8586 += 1 };
  s1 -> s1 [0, 65535] { R8586 += 1, R8542 += 1, R21 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R8586 += 1, R8542 += 1, R21 += 1 };
  s2 -> s2 [0, 65535] { R8586 += 1, R8541 += 1, R8542 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8586 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 69] { R8588 += 1, R8544 += 1 };
  s0 -> s0 [0, 65535] { R8587 += 1, R8588 += 1 };
  s0 -> s2 [0, 65535] { R8588 += 1, R8543 += 1, R8544 += 1 };
  s0 -> s3 [70, 70] { R8588 += 1, R8544 += 1 };
  s0 -> s4 [70, 70] { R8588 += 1, R8544 += 1 };
  s0 -> s5 [75, 75] { R8588 += 1, R8544 += 1 };
  s0 -> s1 [76, 65535] { R8588 += 1, R8544 += 1 };
  s1 -> s1 [0, 69] { R8588 += 1, R8544 += 1 };
  s1 -> s3 [70, 70] { R8588 += 1, R8544 += 1 };
  s1 -> s4 [70, 70] { R8588 += 1, R8544 += 1 };
  s1 -> s5 [75, 75] { R8588 += 1, R8544 += 1 };
  s1 -> s1 [76, 65535] { R8588 += 1, R8544 += 1 };
  s2 -> s1 [0, 69] { R8588 += 1, R8544 += 1 };
  s2 -> s2 [0, 65535] { R8588 += 1, R8543 += 1, R8544 += 1 };
  s2 -> s3 [70, 70] { R8588 += 1, R8544 += 1 };
  s2 -> s4 [70, 70] { R8588 += 1, R8544 += 1 };
  s2 -> s5 [75, 75] { R8588 += 1, R8544 += 1 };
  s2 -> s1 [76, 65535] { R8588 += 1, R8544 += 1 };
  s4 -> s4 [0, 70] { R8588 += 1, R8544 += 1 };
  s4 -> s8 [75, 75] { R8588 += 1, R8544 += 1 };
  s4 -> s4 [76, 65535] { R8588 += 1, R8544 += 1 };
  s5 -> s5 [0, 69] { R8588 += 1, R8544 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R8588 += 1 };
  s5 -> s7 [70, 70] { R8588 += 1, R8544 += 1 };
  s5 -> s8 [70, 70] { R8588 += 1, R8544 += 1 };
  s5 -> s5 [75, 65535] { R8588 += 1, R8544 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R8588 += 1 };
  s8 -> s8 [0, 70] { R8588 += 1, R8544 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R8588 += 1 };
  s8 -> s8 [75, 65535] { R8588 += 1, R8544 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 69] { R8590 += 1, R8546 += 1, R83 += 1 };
  s0 -> s0 [0, 65535] { R8589 += 1, R8590 += 1 };
  s0 -> s2 [0, 65535] { R8590 += 1, R8545 += 1, R8546 += 1 };
  s0 -> s3 [70, 70] { R8590 += 1, R8546 += 1, R83 += 1 };
  s0 -> s4 [70, 70] { R8590 += 1, R8546 += 1, R83 += 1 };
  s0 -> s1 [71, 65535] { R8590 += 1, R8546 += 1, R83 += 1 };
  s1 -> s1 [0, 69] { R8590 += 1, R8546 += 1, R83 += 1 };
  s1 -> s1 [0, 65535] { R8590 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [70, 70] { R8590 += 1, R8546 += 1, R83 += 1 };
  s1 -> s4 [70, 70] { R8590 += 1, R8546 += 1, R83 += 1 };
  s1 -> s1 [71, 65535] { R8590 += 1, R8546 += 1, R83 += 1 };
  s2 -> s1 [0, 69] { R8590 += 1, R8546 += 1, R83 += 1 };
  s2 -> s2 [0, 65535] { R8590 += 1, R8545 += 1, R8546 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [70, 70] { R8590 += 1, R8546 += 1, R83 += 1 };
  s2 -> s4 [70, 70] { R8590 += 1, R8546 += 1, R83 += 1 };
  s2 -> s1 [71, 65535] { R8590 += 1, R8546 += 1, R83 += 1 };
  s3 -> s3 [0, 65535] { R8590 += 1, R8546 += 1, R83 += 1 };
  s3 -> s6 [0, 65535] { R8590 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8590 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8590 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 69] { R8592 += 1, R8548 += 1, R85 += 1 };
  s0 -> s2 [0, 65535] { R8592 += 1, R8547 += 1, R8548 += 1 };
  s0 -> s0 [0, 65535] { R8591 += 1, R8592 += 1 };
  s0 -> s3 [70, 70] { R8592 += 1, R8548 += 1, R85 += 1 };
  s0 -> s4 [70, 70] { R8592 += 1, R8548 += 1, R85 += 1 };
  s0 -> s1 [71, 65535] { R8592 += 1, R8548 += 1, R85 += 1 };
  s1 -> s1 [0, 69] { R8592 += 1, R8548 += 1, R85 += 1 };
  s1 -> s1 [0, 65535] { R8592 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [70, 70] { R8592 += 1, R8548 += 1, R85 += 1 };
  s1 -> s4 [70, 70] { R8592 += 1, R8548 += 1, R85 += 1 };
  s1 -> s1 [71, 65535] { R8592 += 1, R8548 += 1, R85 += 1 };
  s2 -> s1 [0, 69] { R8592 += 1, R8548 += 1, R85 += 1 };
  s2 -> s2 [0, 65535] { R8592 += 1, R8547 += 1, R8548 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [70, 70] { R8592 += 1, R8548 += 1, R85 += 1 };
  s2 -> s4 [70, 70] { R8592 += 1, R8548 += 1, R85 += 1 };
  s2 -> s1 [71, 65535] { R8592 += 1, R8548 += 1, R85 += 1 };
  s3 -> s3 [0, 65535] { R8592 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R8592 += 1, R8548 += 1, R85 += 1 };
  s4 -> s5 [0, 65535] { R8592 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R8592 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 69] { R8594 += 1, R8550 += 1, R87 += 1, R88 += 1 };
  s0 -> s2 [0, 69] { R8594 += 1, R8550 += 1, R88 += 1 };
  s0 -> s0 [0, 65535] { R8593 += 1, R8594 += 1 };
  s0 -> s3 [0, 65535] { R8594 += 1, R8549 += 1, R8550 += 1 };
  s0 -> s4 [70, 70] { R8594 += 1, R8550 += 1, R88 += 1 };
  s0 -> s5 [70, 70] { R8594 += 1, R8550 += 1, R88 += 1 };
  s0 -> s6 [70, 70] { R8594 += 1, R8550 += 1, R87 += 1, R88 += 1 };
  s0 -> s7 [70, 70] { R8594 += 1, R8550 += 1, R87 += 1, R88 += 1 };
  s0 -> s2 [71, 74] { R8594 += 1, R8550 += 1, R88 += 1 };
  s0 -> s1 [71, 65535] { R8594 += 1, R8550 += 1, R87 += 1, R88 += 1 };
  s0 -> s8 [75, 75] { R8594 += 1, R8550 += 1, R88 += 1 };
  s0 -> s2 [76, 65535] { R8594 += 1, R8550 += 1, R88 += 1 };
  s1 -> s1 [0, 69] { R8594 += 1, R8550 += 1, R87 += 1, R88 += 1 };
  s1 -> s2 [0, 69] { R8594 += 1, R8550 += 1, R88 += 1 };
  s1 -> s4 [70, 70] { R8594 += 1, R8550 += 1, R88 += 1 };
  s1 -> s5 [70, 70] { R8594 += 1, R8550 += 1, R88 += 1 };
  s1 -> s6 [70, 70] { R8594 += 1, R8550 += 1, R87 += 1, R88 += 1 };
  s1 -> s7 [70, 70] { R8594 += 1, R8550 += 1, R87 += 1, R88 += 1 };
  s1 -> s2 [71, 74] { R8594 += 1, R8550 += 1, R88 += 1 };
  s1 -> s1 [71, 65535] { R8594 += 1, R8550 += 1, R87 += 1, R88 += 1 };
  s1 -> s8 [75, 75] { R8594 += 1, R8550 += 1, R88 += 1 };
  s1 -> s2 [76, 65535] { R8594 += 1, R8550 += 1, R88 += 1 };
  s2 -> s2 [0, 69] { R8594 += 1, R8550 += 1, R88 += 1 };
  s2 -> s4 [70, 70] { R8594 += 1, R8550 += 1, R88 += 1 };
  s2 -> s5 [70, 70] { R8594 += 1, R8550 += 1, R88 += 1 };
  s2 -> s2 [71, 74] { R8594 += 1, R8550 += 1, R88 += 1 };
  s2 -> s8 [75, 75] { R8594 += 1, R8550 += 1, R88 += 1 };
  s2 -> s2 [76, 65535] { R8594 += 1, R8550 += 1, R88 += 1 };
  s3 -> s1 [0, 69] { R8594 += 1, R8550 += 1, R87 += 1, R88 += 1 };
  s3 -> s2 [0, 69] { R8594 += 1, R8550 += 1, R88 += 1 };
  s3 -> s3 [0, 65535] { R8594 += 1, R8549 += 1, R8550 += 1 };
  s3 -> s4 [70, 70] { R8594 += 1, R8550 += 1, R88 += 1 };
  s3 -> s5 [70, 70] { R8594 += 1, R8550 += 1, R88 += 1 };
  s3 -> s6 [70, 70] { R8594 += 1, R8550 += 1, R87 += 1, R88 += 1 };
  s3 -> s7 [70, 70] { R8594 += 1, R8550 += 1, R87 += 1, R88 += 1 };
  s3 -> s2 [71, 74] { R8594 += 1, R8550 += 1, R88 += 1 };
  s3 -> s1 [71, 65535] { R8594 += 1, R8550 += 1, R87 += 1, R88 += 1 };
  s3 -> s8 [75, 75] { R8594 += 1, R8550 += 1, R88 += 1 };
  s3 -> s2 [76, 65535] { R8594 += 1, R8550 += 1, R88 += 1 };
  s4 -> s4 [0, 74] { R8594 += 1, R8550 += 1, R88 += 1 };
  s4 -> s10 [75, 75] { R8594 += 1, R8550 += 1, R88 += 1 };
  s4 -> s4 [76, 65535] { R8594 += 1, R8550 += 1, R88 += 1 };
  s6 -> s4 [0, 74] { R8594 += 1, R8550 += 1, R88 += 1 };
  s6 -> s6 [0, 65535] { R8594 += 1, R8550 += 1, R87 += 1, R88 += 1 };
  s6 -> s10 [75, 75] { R8594 += 1, R8550 += 1, R88 += 1 };
  s6 -> s4 [76, 65535] { R8594 += 1, R8550 += 1, R88 += 1 };
  s8 -> s8 [0, 69] { R8594 += 1, R8550 += 1, R88 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R8594 += 1 };
  s8 -> s10 [70, 70] { R8594 += 1, R8550 += 1, R88 += 1 };
  s8 -> s11 [70, 70] { R8594 += 1, R8550 += 1, R88 += 1 };
  s8 -> s8 [71, 65535] { R8594 += 1, R8550 += 1, R88 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R8594 += 1, R8550 += 1, R88 += 1 };
  s10 -> s12 [0, 65535] { R8594 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R8594 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R8594 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 69] { R8596 += 1, R8552 += 1, R91 += 1, R92 += 1 };
  s0 -> s2 [0, 65535] { R8596 += 1, R8551 += 1, R8552 += 1 };
  s0 -> s0 [0, 65535] { R8595 += 1, R8596 += 1 };
  s0 -> s3 [70, 70] { R8596 += 1, R8552 += 1, R91 += 1, R92 += 1 };
  s0 -> s4 [70, 70] { R8596 += 1, R8552 += 1, R91 += 1, R92 += 1 };
  s0 -> s1 [71, 65535] { R8596 += 1, R8552 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 69] { R8596 += 1, R8552 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 65535] { R8596 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [70, 70] { R8596 += 1, R8552 += 1, R91 += 1, R92 += 1 };
  s1 -> s4 [70, 70] { R8596 += 1, R8552 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [71, 65535] { R8596 += 1, R8552 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [0, 69] { R8596 += 1, R8552 += 1, R91 += 1, R92 += 1 };
  s2 -> s2 [0, 65535] { R8596 += 1, R8551 += 1, R8552 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [70, 70] { R8596 += 1, R8552 += 1, R91 += 1, R92 += 1 };
  s2 -> s4 [70, 70] { R8596 += 1, R8552 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [71, 65535] { R8596 += 1, R8552 += 1, R91 += 1, R92 += 1 };
  s3 -> s3 [0, 65535] { R8596 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R8596 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R8596 += 1, R8552 += 1, R91 += 1, R92 += 1 };
  s5 -> s5 [0, 65535] { R8596 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 69] { R8598 += 1, R8554 += 1, R6806 += 1, R6807 += 1 };
  s0 -> s2 [0, 69] { R8598 += 1, R8554 += 1, R6805 += 1, R6806 += 1 };
  s0 -> s3 [0, 65535] { R8598 += 1, R8553 += 1, R8554 += 1 };
  s0 -> s0 [0, 65535] { R8597 += 1, R8598 += 1 };
  s0 -> s4 [70, 70] { R8598 += 1, R8554 += 1, R6806 += 1, R6807 += 1 };
  s0 -> s5 [70, 70] { R8598 += 1, R8554 += 1, R6805 += 1, R6806 += 1 };
  s0 -> s6 [70, 70] { R8598 += 1, R8554 += 1, R6806 += 1, R6807 += 1 };
  s0 -> s7 [70, 70] { R8598 += 1, R8554 += 1, R6805 += 1, R6806 += 1 };
  s0 -> s1 [71, 65535] { R8598 += 1, R8554 += 1, R6806 += 1, R6807 += 1 };
  s0 -> s2 [71, 65535] { R8598 += 1, R8554 += 1, R6805 += 1, R6806 += 1 };
  s1 -> s1 [0, 69] { R8598 += 1, R8554 += 1, R6806 += 1, R6807 += 1 };
  s1 -> s1 [0, 65535] { R8598 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s4 [70, 70] { R8598 += 1, R8554 += 1, R6806 += 1, R6807 += 1 };
  s1 -> s6 [70, 70] { R8598 += 1, R8554 += 1, R6806 += 1, R6807 += 1 };
  s1 -> s1 [71, 65535] { R8598 += 1, R8554 += 1, R6806 += 1, R6807 += 1 };
  s2 -> s1 [0, 69] { R8598 += 1, R8554 += 1, R6806 += 1, R6807 += 1 };
  s2 -> s2 [0, 69] { R8598 += 1, R8554 += 1, R6805 += 1, R6806 += 1 };
  s2 -> s4 [70, 70] { R8598 += 1, R8554 += 1, R6806 += 1, R6807 += 1 };
  s2 -> s5 [70, 70] { R8598 += 1, R8554 += 1, R6805 += 1, R6806 += 1 };
  s2 -> s6 [70, 70] { R8598 += 1, R8554 += 1, R6806 += 1, R6807 += 1 };
  s2 -> s7 [70, 70] { R8598 += 1, R8554 += 1, R6805 += 1, R6806 += 1 };
  s2 -> s1 [71, 65535] { R8598 += 1, R8554 += 1, R6806 += 1, R6807 += 1 };
  s2 -> s2 [71, 65535] { R8598 += 1, R8554 += 1, R6805 += 1, R6806 += 1 };
  s3 -> s1 [0, 69] { R8598 += 1, R8554 += 1, R6806 += 1, R6807 += 1 };
  s3 -> s2 [0, 69] { R8598 += 1, R8554 += 1, R6805 += 1, R6806 += 1 };
  s3 -> s3 [0, 65535] { R8598 += 1, R8553 += 1, R8554 += 1 };
  s3 -> s4 [70, 70] { R8598 += 1, R8554 += 1, R6806 += 1, R6807 += 1 };
  s3 -> s5 [70, 70] { R8598 += 1, R8554 += 1, R6805 += 1, R6806 += 1 };
  s3 -> s6 [70, 70] { R8598 += 1, R8554 += 1, R6806 += 1, R6807 += 1 };
  s3 -> s7 [70, 70] { R8598 += 1, R8554 += 1, R6805 += 1, R6806 += 1 };
  s3 -> s1 [71, 65535] { R8598 += 1, R8554 += 1, R6806 += 1, R6807 += 1 };
  s3 -> s2 [71, 65535] { R8598 += 1, R8554 += 1, R6805 += 1, R6806 += 1 };
  s4 -> s4 [0, 65535] { R8598 += 1, R8554 += 1, R6806 += 1, R6807 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s9 [0, 65535] { R8598 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R8598 += 1 };
  s7 -> s4 [0, 65535] { R8598 += 1, R8554 += 1, R6806 += 1, R6807 += 1 };
  s7 -> s7 [0, 65535] { R8598 += 1, R8554 += 1, R6805 += 1, R6806 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R8598 += 1 };
  accepting s4, s8, s9, s6, s1;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 69] { R8600 += 1, R8556 += 1, R8485 += 1, R8486 += 1 };
  s0 -> s2 [0, 65535] { R8600 += 1, R8555 += 1, R8556 += 1 };
  s0 -> s0 [0, 65535] { R8599 += 1, R8600 += 1 };
  s0 -> s3 [70, 70] { R8600 += 1, R8556 += 1, R8485 += 1, R8486 += 1 };
  s0 -> s4 [70, 70] { R8600 += 1, R8556 += 1, R8485 += 1, R8486 += 1 };
  s0 -> s1 [71, 65535] { R8600 += 1, R8556 += 1, R8485 += 1, R8486 += 1 };
  s1 -> s1 [0, 69] { R8600 += 1, R8556 += 1, R8485 += 1, R8486 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R8600 += 1 };
  s1 -> s3 [70, 70] { R8600 += 1, R8556 += 1, R8485 += 1, R8486 += 1 };
  s1 -> s4 [70, 70] { R8600 += 1, R8556 += 1, R8485 += 1, R8486 += 1 };
  s1 -> s1 [71, 65535] { R8600 += 1, R8556 += 1, R8485 += 1, R8486 += 1 };
  s2 -> s1 [0, 69] { R8600 += 1, R8556 += 1, R8485 += 1, R8486 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R8600 += 1, R8555 += 1, R8556 += 1 };
  s2 -> s3 [70, 70] { R8600 += 1, R8556 += 1, R8485 += 1, R8486 += 1 };
  s2 -> s4 [70, 70] { R8600 += 1, R8556 += 1, R8485 += 1, R8486 += 1 };
  s2 -> s1 [71, 65535] { R8600 += 1, R8556 += 1, R8485 += 1, R8486 += 1 };
  s3 -> s6 [0, 65535] { R8600 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R8600 += 1, R8556 += 1, R8485 += 1, R8486 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8600 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8600 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 69] { R8602 += 1, R8558 += 1, R8494 += 1, R8496 += 1, R8497 += 1 };
  s0 -> s2 [0, 69] { R8602 += 1, R8558 += 1, R8493 += 1, R8494 += 1 };
  s0 -> s3 [0, 69] { R8602 += 1, R8558 += 1, R8494 += 1, R8495 += 1, R8496 += 1 };
  s0 -> s4 [0, 65535] { R8602 += 1, R8557 += 1, R8558 += 1 };
  s0 -> s0 [0, 65535] { R8601 += 1, R8602 += 1 };
  s0 -> s5 [70, 70] { R8602 += 1, R8558 += 1, R8494 += 1, R8496 += 1, R8497 += 1 };
  s0 -> s6 [70, 70] { R8602 += 1, R8558 += 1, R8494 += 1, R8496 += 1, R8497 += 1 };
  s0 -> s7 [70, 70] { R8602 += 1, R8558 += 1, R8493 += 1, R8494 += 1 };
  s0 -> s8 [70, 70] { R8602 += 1, R8558 += 1, R8493 += 1, R8494 += 1 };
  s0 -> s9 [70, 70] { R8602 += 1, R8558 += 1, R8494 += 1, R8495 += 1, R8496 += 1 };
  s0 -> s10 [70, 70] { R8602 += 1, R8558 += 1, R8494 += 1, R8495 += 1, R8496 += 1 };
  s0 -> s1 [71, 65535] { R8602 += 1, R8558 += 1, R8494 += 1, R8496 += 1, R8497 += 1 };
  s0 -> s2 [71, 65535] { R8602 += 1, R8558 += 1, R8493 += 1, R8494 += 1 };
  s0 -> s3 [71, 65535] { R8602 += 1, R8558 += 1, R8494 += 1, R8495 += 1, R8496 += 1 };
  s1 -> s1 [0, 69] { R8602 += 1, R8558 += 1, R8494 += 1, R8496 += 1, R8497 += 1 };
  s1 -> s14 [0, 69] { R8602 += 1, R8558 += 1, R8494 += 1 };
  s1 -> s15 [70, 70] { R8602 += 1, R8558 += 1, R8494 += 1 };
  s1 -> s5 [70, 70] { R8602 += 1, R8558 += 1, R8494 += 1, R8496 += 1, R8497 += 1 };
  s1 -> s6 [70, 70] { R8602 += 1, R8558 += 1, R8494 += 1, R8496 += 1, R8497 += 1 };
  s1 -> s11 [70, 70] { R8602 += 1, R8558 += 1, R8494 += 1 };
  s1 -> s1 [71, 65535] { R8602 += 1, R8558 += 1, R8494 += 1, R8496 += 1, R8497 += 1 };
  s1 -> s14 [71, 65535] { R8602 += 1, R8558 += 1, R8494 += 1 };
  s2 -> s1 [0, 69] { R8602 += 1, R8558 += 1, R8494 += 1, R8496 += 1, R8497 += 1 };
  s2 -> s2 [0, 69] { R8602 += 1, R8558 += 1, R8493 += 1, R8494 += 1 };
  s2 -> s3 [0, 69] { R8602 += 1, R8558 += 1, R8494 += 1, R8495 += 1, R8496 += 1 };
  s2 -> s5 [70, 70] { R8602 += 1, R8558 += 1, R8494 += 1, R8496 += 1, R8497 += 1 };
  s2 -> s6 [70, 70] { R8602 += 1, R8558 += 1, R8494 += 1, R8496 += 1, R8497 += 1 };
  s2 -> s7 [70, 70] { R8602 += 1, R8558 += 1, R8493 += 1, R8494 += 1 };
  s2 -> s8 [70, 70] { R8602 += 1, R8558 += 1, R8493 += 1, R8494 += 1 };
  s2 -> s9 [70, 70] { R8602 += 1, R8558 += 1, R8494 += 1, R8495 += 1, R8496 += 1 };
  s2 -> s10 [70, 70] { R8602 += 1, R8558 += 1, R8494 += 1, R8495 += 1, R8496 += 1 };
  s2 -> s1 [71, 65535] { R8602 += 1, R8558 += 1, R8494 += 1, R8496 += 1, R8497 += 1 };
  s2 -> s2 [71, 65535] { R8602 += 1, R8558 += 1, R8493 += 1, R8494 += 1 };
  s2 -> s3 [71, 65535] { R8602 += 1, R8558 += 1, R8494 += 1, R8495 += 1, R8496 += 1 };
  s3 -> s1 [0, 69] { R8602 += 1, R8558 += 1, R8494 += 1, R8496 += 1, R8497 += 1 };
  s3 -> s3 [0, 69] { R8602 += 1, R8558 += 1, R8494 += 1, R8495 += 1, R8496 += 1 };
  s3 -> s5 [70, 70] { R8602 += 1, R8558 += 1, R8494 += 1, R8496 += 1, R8497 += 1 };
  s3 -> s6 [70, 70] { R8602 += 1, R8558 += 1, R8494 += 1, R8496 += 1, R8497 += 1 };
  s3 -> s9 [70, 70] { R8602 += 1, R8558 += 1, R8494 += 1, R8495 += 1, R8496 += 1 };
  s3 -> s10 [70, 70] { R8602 += 1, R8558 += 1, R8494 += 1, R8495 += 1, R8496 += 1 };
  s3 -> s1 [71, 65535] { R8602 += 1, R8558 += 1, R8494 += 1, R8496 += 1, R8497 += 1 };
  s3 -> s3 [71, 65535] { R8602 += 1, R8558 += 1, R8494 += 1, R8495 += 1, R8496 += 1 };
  s4 -> s1 [0, 69] { R8602 += 1, R8558 += 1, R8494 += 1, R8496 += 1, R8497 += 1 };
  s4 -> s2 [0, 69] { R8602 += 1, R8558 += 1, R8493 += 1, R8494 += 1 };
  s4 -> s3 [0, 69] { R8602 += 1, R8558 += 1, R8494 += 1, R8495 += 1, R8496 += 1 };
  s4 -> s4 [0, 65535] { R8602 += 1, R8557 += 1, R8558 += 1 };
  s4 -> s5 [70, 70] { R8602 += 1, R8558 += 1, R8494 += 1, R8496 += 1, R8497 += 1 };
  s4 -> s6 [70, 70] { R8602 += 1, R8558 += 1, R8494 += 1, R8496 += 1, R8497 += 1 };
  s4 -> s7 [70, 70] { R8602 += 1, R8558 += 1, R8493 += 1, R8494 += 1 };
  s4 -> s8 [70, 70] { R8602 += 1, R8558 += 1, R8493 += 1, R8494 += 1 };
  s4 -> s9 [70, 70] { R8602 += 1, R8558 += 1, R8494 += 1, R8495 += 1, R8496 += 1 };
  s4 -> s10 [70, 70] { R8602 += 1, R8558 += 1, R8494 += 1, R8495 += 1, R8496 += 1 };
  s4 -> s1 [71, 65535] { R8602 += 1, R8558 += 1, R8494 += 1, R8496 += 1, R8497 += 1 };
  s4 -> s2 [71, 65535] { R8602 += 1, R8558 += 1, R8493 += 1, R8494 += 1 };
  s4 -> s3 [71, 65535] { R8602 += 1, R8558 += 1, R8494 += 1, R8495 += 1, R8496 += 1 };
  s5 -> s5 [0, 65535] { R8602 += 1, R8558 += 1, R8494 += 1, R8496 += 1, R8497 += 1 };
  s5 -> s11 [0, 65535] { R8602 += 1, R8558 += 1, R8494 += 1 };
  s8 -> s5 [0, 65535] { R8602 += 1, R8558 += 1, R8494 += 1, R8496 += 1, R8497 += 1 };
  s8 -> s8 [0, 65535] { R8602 += 1, R8558 += 1, R8493 += 1, R8494 += 1 };
  s8 -> s9 [0, 65535] { R8602 += 1, R8558 += 1, R8494 += 1, R8495 += 1, R8496 += 1 };
  s9 -> s5 [0, 65535] { R8602 += 1, R8558 += 1, R8494 += 1, R8496 += 1, R8497 += 1 };
  s9 -> s9 [0, 65535] { R8602 += 1, R8558 += 1, R8494 += 1, R8495 += 1, R8496 += 1 };
  s11 -> s12 [0, 65535] { R8602 += 1 };
  s11 -> s11 [0, 65535] { R8602 += 1, R8558 += 1, R8494 += 1 };
  s11 -> s13 [0, 65535];
  s12 -> s12 [0, 65535] { R8602 += 1 };
  s12 -> s13 [0, 65535];
  s13 -> s13 [0, 65535];
  s14 -> s14 [0, 69] { R8602 += 1, R8558 += 1, R8494 += 1 };
  s14 -> s14 [0, 65535] { R8602 += 1 };
  s14 -> s13 [0, 65535];
  s14 -> s15 [70, 70] { R8602 += 1, R8558 += 1, R8494 += 1 };
  s14 -> s11 [70, 70] { R8602 += 1, R8558 += 1, R8494 += 1 };
  s14 -> s14 [71, 65535] { R8602 += 1, R8558 += 1, R8494 += 1 };
  s15 -> s15 [0, 65535] { R8602 += 1 };
  s15 -> s13 [0, 65535];
  accepting s12, s13, s14, s15, s11;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [102, 102];
  accepting s1;
};
};
constraint R2 = R8520 && R3 = R8602 && R23 - R8602 = -1 && R24 = R8602 && R25 - R8602 = -1 && R26 = R8602 && R27 = 0 && R28 = 1 && R29 = 0 && R30 = 1 && R45 + R84 + R83 + -1*R8490 + -1*R8486 - R66 = 0 && R49 + R89 + R87 = 0 && R50 + R90 + R88 + -1*R8490 + -1*R8486 - R66 = 0 && R55 + R96 + R93 + -1*R8492 + -1*R8488 - R68 = 0 && R65 + R8489 + R8485 = 0 && R67 + R8491 + R8487 = 0 && R8519 = 0 && R8543 = 0 && R8544 = 0 && R8549 = 0 && R8550 = 0 && R8553 = 0 && R8554 = 0 && R8557 = 0 && R8558 = 0 && R8559 = 0 && R8560 = R8602 && R8561 = 0 && R8562 = R8602 && R8563 = 0 && R8564 = R8602 && R8565 = 0 && R8566 = R8602 && R8567 = 0 && R8568 = R8602 && R8569 = 0 && R8570 = R8602 && R8571 = 0 && R8572 = R8602 && R8573 = 0 && R8574 = R8602 && R8575 = 0 && R8576 = R8602 && R8577 = 0 && R8578 = R8602 && R8579 = 0 && R8580 = R8602 && R8581 = 0 && R8582 = R8602 && R8583 = 0 && R8584 = R8602 && R8585 = 0 && R8586 = R8602 && R8587 = 0 && R8588 = R8602 && R8589 = 0 && R8590 = R8602 && R8591 = 0 && R8592 = R8602 && R8593 = 0 && R8594 = R8602 && R8595 = 0 && R8596 = R8602 && R8597 = 0 && R8598 = R8602 && R8599 = 0 && R8600 = R8602 && R8601 = 0 && R12 < 1 && R15 < 1 && R16 < 1 && R47 + R86 + R85 < 1 && R61 + R6810 + R6807 < 1 && -1*R8490 + -1*R8486 - R66 < 1 && -1*R8492 + -1*R8488 - R68 < 1 && -1 < R8520 && 0 < R8602 && (R53 + R94 + R91 != 0 || R54 + R95 + R92 + -1*R8490 + -1*R8486 - R66 = 0 || R66 + R8490 + R8486 < 1) && (R59 + R6808 + R6805 != 0 || R60 + R6809 + R6806 + -1*R8490 + -1*R8486 - R66 = 0 || R66 + R8490 + R8486 < 1) && (R66 + R8490 + R8486 != 0 || ((R53 + R94 + R91 != 0 || R54 + R95 + R92 = 0 || R68 + R8492 + R8488 < 1) && (R53 + R94 + R91 = 0 || R68 + R8492 + R8488 < 1))) && (R66 + R8490 + R8486 != 0 || ((R59 + R6808 + R6805 != 0 || R60 + R6809 + R6806 = 0 || R68 + R8492 + R8488 < 1) && (R59 + R6808 + R6805 = 0 || R68 + R8492 + R8488 < 1))) && (R66 + R8490 + R8486 != 0 || ((R73 + R8498 + R8493 != 0 || R74 + R8499 + R8494 = 0 || R68 + R8492 + R8488 < 1) && (R73 + R8498 + R8493 = 0 || R68 + R8492 + R8488 < 1))) && (R68 + R8492 + R8488 != 0 || R77 + R8502 + R8497 = 0 || (R75 + R8500 + R8495 = 0 && R76 + R8501 + R8496 = 0)) && (R73 + R8498 + R8493 != 0 || R66 + R8490 + R8486 + -1*R8499 + -1*R8494 - R74 = 0 || R66 + R8490 + R8486 < 1) && (R75 + R8500 + R8495 != 0 || R68 + R8492 + R8488 + -1*R8501 + -1*R8496 - R76 = 0 || R68 + R8492 + R8488 < 1) && (R8503 != 0 || R8504 = R8520 || (R20 = 0 && R8520 = 0)) && (R8505 != 0 || R8506 = R8520 || (R20 = 0 && R8520 = 0)) && (R8507 != 0 || R8508 = R8520 || (R20 = 0 && R8520 = 0)) && (R8509 != 0 || R8510 = R8520 || (R20 = 0 && R8520 = 0)) && (R8511 != 0 || R8512 = R8520 || (R20 = 0 && R8520 = 0)) && (R8513 != 0 || R8514 = R8520 || (R20 = 0 && R8520 = 0)) && (R8515 != 0 || R8516 = R8520 || (R20 = 0 && R8520 = 0)) && (R8517 != 0 || R8518 = R8520 || (R20 = 0 && R8520 = 0)) && (R8521 != 0 || R8520 = R8522 || (R20 = 0 && R8520 = 0)) && (R21 = 0 || (R8541 = 0 && R8542 = 0)) && (R21 = 0 || (R8545 = 0 && R8546 = 0)) && (R21 = 0 || (R8547 = 0 && R8548 = 0)) && (R21 = 0 || (R8551 = 0 && R8552 = 0)) && (R21 = 0 || (R8555 = 0 && R8556 = 0)) && (R22 = 0 || (R8523 = 0 && R8524 = 0)) && (R22 = 0 || (R8525 = 0 && R8526 = 0)) && (R22 = 0 || (R8527 = 0 && R8528 = 0)) && (R22 = 0 || (R8529 = 0 && R8530 = 0)) && (R22 = 0 || (R8531 = 0 && R8532 = 0)) && (R22 = 0 || (R8533 = 0 && R8534 = 0)) && (R22 = 0 || (R8535 = 0 && R8536 = 0)) && (R22 = 0 || (R8537 = 0 && R8538 = 0)) && (R22 = 0 || (R8539 = 0 && R8540 = 0)) && (R53 + R94 + R91 = 0 || R66 + R8490 + R8486 < 1) && (R59 + R6808 + R6805 = 0 || R66 + R8490 + R8486 < 1) && (R73 + R8498 + R8493 = 0 || R66 + R8490 + R8486 < 1) && (R75 + R8500 + R8495 = 0 || R68 + R8492 + R8488 < 1) && (R8503 = 0 || (R20 = 0 && R8520 = 0)) && (R8505 = 0 || (R20 = 0 && R8520 = 0)) && (R8507 = 0 || (R20 = 0 && R8520 = 0)) && (R8509 = 0 || (R20 = 0 && R8520 = 0)) && (R8511 = 0 || (R20 = 0 && R8520 = 0)) && (R8513 = 0 || (R20 = 0 && R8520 = 0)) && (R8515 = 0 || (R20 = 0 && R8520 = 0)) && (R8517 = 0 || (R20 = 0 && R8520 = 0)) && (R8521 = 0 || (R20 = 0 && R8520 = 0));
// End of Parikh automata intersection problem
