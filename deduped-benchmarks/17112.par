// Parikh automata intersection problem, generated by OSTRICH+
counter int R10159, R10160, R10161, R10162, R10163, R10164, R12, R12955, R12956, R12957, R12958, R12959, R12960, R12961, R12962, R13183, R13184, R13185, R13186, R13187, R13188, R13189, R13190, R13191, R13192, R13193, R13194, R13195, R13196, R13197, R13198, R13199, R13200, R13201, R13202, R13203, R13204, R13205, R13206, R13207, R13208, R13209, R13210, R13211, R13212, R13213, R13214, R13215, R13216, R13217, R13218, R13219, R13220, R13221, R13222, R13223, R13224, R13225, R13226, R13227, R13228, R13229, R13230, R13231, R13232, R13233, R13234, R13235, R13236, R13237, R13238, R13239, R13240, R13241, R13242, R13243, R13244, R13245, R13246, R13247, R13248, R13249, R13250, R13251, R13252, R13253, R13254, R13255, R13256, R13257, R13258, R13259, R13260, R13261, R13262, R13263, R13264, R13265, R13266, R13267, R13268, R13269, R13270, R13271, R13272, R13273, R13274, R13275, R13276, R13277, R13278, R13279, R13280, R13281, R13282, R13283, R13284, R13285, R13286, R13287, R13288, R13289, R13290, R13291, R13292, R15, R16, R2, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R4, R45, R47, R49, R5, R50, R53, R54, R55, R59, R60, R61, R65, R66, R67, R68, R73, R74, R75, R76, R77, R83, R84, R85, R86, R87, R88, R89, R90, R91, R92, R93, R94, R95, R96;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [70, 70];
  s0 -> s0 [71, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [70, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R15 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 69];
  s0 -> s0 [0, 65535] { R16 += 1 };
  s0 -> s2 [70, 70];
  s0 -> s1 [71, 65535];
  s1 -> s1 [0, 69];
  s1 -> s2 [70, 70];
  s1 -> s1 [71, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R24 += 1 };
  s0 -> s0 [0, 65535] { R23 += 1, R24 += 1 };
  s0 -> s2 [9, 13] { R24 += 1 };
  s0 -> s1 [14, 31] { R24 += 1 };
  s0 -> s2 [32, 32] { R24 += 1 };
  s0 -> s1 [33, 65535] { R24 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R24 += 1 };
  s2 -> s1 [0, 65535] { R24 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R25 += 1, R26 += 1 };
  s1 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R28 += 1 };
  s0 -> s0 [0, 65535] { R27 += 1, R28 += 1 };
  s0 -> s2 [9, 13] { R28 += 1 };
  s0 -> s1 [14, 31] { R28 += 1 };
  s0 -> s2 [32, 32] { R28 += 1 };
  s0 -> s1 [33, 65535] { R28 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R28 += 1 };
  s2 -> s1 [0, 65535] { R28 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R29 += 1, R30 += 1 };
  s1 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R13214 += 1, R22 += 1 };
  s0 -> s0 [0, 65535] { R13213 += 1, R13214 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R13214 += 1, R22 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 69] { R13216 += 1 };
  s0 -> s0 [0, 65535] { R13215 += 1, R13216 += 1 };
  s0 -> s2 [70, 70] { R13216 += 1 };
  s0 -> s3 [70, 70] { R13216 += 1 };
  s0 -> s1 [76, 65535] { R13216 += 1 };
  s1 -> s1 [0, 69] { R13216 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R13216 += 1 };
  s1 -> s3 [70, 70] { R13216 += 1 };
  s1 -> s1 [76, 65535] { R13216 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 70] { R13216 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [76, 65535] { R13216 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 69] { R13218 += 1, R45 += 1 };
  s0 -> s0 [0, 65535] { R13217 += 1, R13218 += 1 };
  s0 -> s2 [70, 70] { R13218 += 1, R45 += 1 };
  s0 -> s3 [70, 70] { R13218 += 1, R45 += 1 };
  s0 -> s1 [71, 65535] { R13218 += 1, R45 += 1 };
  s1 -> s1 [0, 69] { R13218 += 1, R45 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R13218 += 1, R45 += 1 };
  s1 -> s3 [70, 70] { R13218 += 1, R45 += 1 };
  s1 -> s1 [71, 65535] { R13218 += 1, R45 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R13218 += 1, R45 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 69] { R13220 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R13219 += 1, R13220 += 1 };
  s0 -> s2 [70, 70] { R13220 += 1, R47 += 1 };
  s0 -> s3 [70, 70] { R13220 += 1, R47 += 1 };
  s0 -> s1 [71, 65535] { R13220 += 1, R47 += 1 };
  s1 -> s1 [0, 69] { R13220 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R13220 += 1, R47 += 1 };
  s1 -> s3 [70, 70] { R13220 += 1, R47 += 1 };
  s1 -> s1 [71, 65535] { R13220 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R13220 += 1, R47 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 69] { R13222 += 1, R49 += 1, R50 += 1 };
  s0 -> s0 [0, 65535] { R13221 += 1, R13222 += 1 };
  s0 -> s2 [70, 70] { R13222 += 1, R49 += 1, R50 += 1 };
  s0 -> s3 [70, 70] { R13222 += 1, R49 += 1, R50 += 1 };
  s0 -> s1 [71, 65535] { R13222 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 69] { R13222 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R13222 += 1, R49 += 1, R50 += 1 };
  s1 -> s3 [70, 70] { R13222 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [71, 65535] { R13222 += 1, R49 += 1, R50 += 1 };
  s2 -> s2 [0, 65535] { R13222 += 1, R49 += 1, R50 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 69] { R13224 += 1, R53 += 1, R54 += 1 };
  s0 -> s0 [0, 65535] { R13223 += 1, R13224 += 1 };
  s0 -> s2 [70, 70] { R13224 += 1, R53 += 1, R54 += 1 };
  s0 -> s3 [70, 70] { R13224 += 1, R53 += 1, R54 += 1 };
  s0 -> s1 [71, 65535] { R13224 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 69] { R13224 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R13224 += 1, R53 += 1, R54 += 1 };
  s1 -> s3 [70, 70] { R13224 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [71, 65535] { R13224 += 1, R53 += 1, R54 += 1 };
  s2 -> s2 [0, 65535] { R13224 += 1, R53 += 1, R54 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 69] { R13226 += 1, R59 += 1, R60 += 1 };
  s0 -> s0 [0, 65535] { R13225 += 1, R13226 += 1 };
  s0 -> s2 [70, 70] { R13226 += 1, R59 += 1, R60 += 1 };
  s0 -> s3 [70, 70] { R13226 += 1, R59 += 1, R60 += 1 };
  s0 -> s1 [71, 65535] { R13226 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 69] { R13226 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R13226 += 1, R59 += 1, R60 += 1 };
  s1 -> s3 [70, 70] { R13226 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [71, 65535] { R13226 += 1, R59 += 1, R60 += 1 };
  s2 -> s2 [0, 65535] { R13226 += 1, R59 += 1, R60 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 69] { R13228 += 1, R65 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R13227 += 1, R13228 += 1 };
  s0 -> s2 [70, 70] { R13228 += 1, R65 += 1, R66 += 1 };
  s0 -> s3 [70, 70] { R13228 += 1, R65 += 1, R66 += 1 };
  s0 -> s1 [71, 65535] { R13228 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 69] { R13228 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R13228 += 1, R65 += 1, R66 += 1 };
  s1 -> s3 [70, 70] { R13228 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [71, 65535] { R13228 += 1, R65 += 1, R66 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R13228 += 1, R65 += 1, R66 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 69] { R13230 += 1, R73 += 1, R74 += 1 };
  s0 -> s0 [0, 65535] { R13229 += 1, R13230 += 1 };
  s0 -> s2 [70, 70] { R13230 += 1, R73 += 1, R74 += 1 };
  s0 -> s3 [70, 70] { R13230 += 1, R73 += 1, R74 += 1 };
  s0 -> s1 [71, 65535] { R13230 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 69] { R13230 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R13230 += 1, R73 += 1, R74 += 1 };
  s1 -> s3 [70, 70] { R13230 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [71, 65535] { R13230 += 1, R73 += 1, R74 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R13230 += 1, R73 += 1, R74 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 69] { R13250 += 1 };
  s0 -> s0 [0, 65535] { R13249 += 1, R13250 += 1 };
  s0 -> s2 [70, 70] { R13250 += 1 };
  s0 -> s1 [71, 65535] { R13250 += 1 };
  s1 -> s1 [0, 69] { R13250 += 1 };
  s1 -> s2 [70, 70] { R13250 += 1 };
  s1 -> s1 [71, 65535] { R13250 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R13250 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R13251 += 1, R13252 += 1 };
  s0 -> s1 [0, 65535] { R13252 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R13252 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 69] { R13254 += 1 };
  s0 -> s2 [0, 65535] { R13254 += 1, R12 += 1 };
  s0 -> s0 [0, 65535] { R13253 += 1, R13254 += 1 };
  s0 -> s3 [70, 70] { R13254 += 1 };
  s0 -> s1 [71, 65535] { R13254 += 1 };
  s1 -> s1 [0, 69] { R13254 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [70, 70] { R13254 += 1 };
  s1 -> s1 [71, 65535] { R13254 += 1 };
  s2 -> s1 [0, 69] { R13254 += 1 };
  s2 -> s2 [0, 65535] { R13254 += 1, R12 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [70, 70] { R13254 += 1 };
  s2 -> s1 [71, 65535] { R13254 += 1 };
  s3 -> s3 [0, 65535] { R13254 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 69] { R13256 += 1, R13194 += 1 };
  s0 -> s0 [0, 65535] { R13255 += 1, R13256 += 1 };
  s0 -> s2 [0, 65535] { R13256 += 1, R13193 += 1, R13194 += 1 };
  s0 -> s1 [71, 65535] { R13256 += 1, R13194 += 1 };
  s1 -> s1 [0, 69] { R13256 += 1, R13194 += 1 };
  s1 -> s1 [0, 65535] { R13256 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [71, 65535] { R13256 += 1, R13194 += 1 };
  s2 -> s1 [0, 69] { R13256 += 1, R13194 += 1 };
  s2 -> s2 [0, 65535] { R13256 += 1, R13193 += 1, R13194 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [71, 65535] { R13256 += 1, R13194 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R13258 += 1, R13196 += 1, R20 += 1 };
  s0 -> s2 [0, 65535] { R13258 += 1, R13195 += 1, R13196 += 1 };
  s0 -> s0 [0, 65535] { R13257 += 1, R13258 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R13258 += 1, R13196 += 1, R20 += 1 };
  s1 -> s4 [0, 65535] { R13258 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R13258 += 1, R13196 += 1, R20 += 1 };
  s2 -> s2 [0, 65535] { R13258 += 1, R13195 += 1, R13196 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R13258 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 70] { R13260 += 1, R13198 += 1 };
  s0 -> s2 [0, 65535] { R13260 += 1, R13197 += 1, R13198 += 1 };
  s0 -> s0 [0, 65535] { R13259 += 1, R13260 += 1 };
  s0 -> s1 [75, 65535] { R13260 += 1, R13198 += 1 };
  s1 -> s1 [0, 70] { R13260 += 1, R13198 += 1 };
  s1 -> s1 [0, 65535] { R13260 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [75, 65535] { R13260 += 1, R13198 += 1 };
  s2 -> s1 [0, 70] { R13260 += 1, R13198 += 1 };
  s2 -> s2 [0, 65535] { R13260 += 1, R13197 += 1, R13198 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [75, 65535] { R13260 += 1, R13198 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R13262 += 1, R13199 += 1, R13200 += 1 };
  s0 -> s0 [0, 65535] { R13261 += 1, R13262 += 1 };
  s0 -> s2 [0, 65535] { R13262 += 1, R13200 += 1, R84 += 1 };
  s1 -> s1 [0, 65535] { R13262 += 1, R13199 += 1, R13200 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R13262 += 1, R13200 += 1, R84 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R13262 += 1, R13200 += 1, R84 += 1 };
  s2 -> s4 [0, 65535] { R13262 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R13262 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 74] { R13264 += 1, R13202 += 1 };
  s0 -> s2 [0, 65535] { R13264 += 1, R13202 += 1, R86 += 1 };
  s0 -> s0 [0, 65535] { R13263 += 1, R13264 += 1 };
  s0 -> s3 [0, 65535] { R13264 += 1, R13201 += 1, R13202 += 1 };
  s0 -> s1 [76, 65535] { R13264 += 1, R13202 += 1 };
  s1 -> s1 [0, 74] { R13264 += 1, R13202 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R13264 += 1 };
  s1 -> s1 [76, 65535] { R13264 += 1, R13202 += 1 };
  s2 -> s1 [0, 74] { R13264 += 1, R13202 += 1 };
  s2 -> s2 [0, 65535] { R13264 += 1, R13202 += 1, R86 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R13264 += 1 };
  s2 -> s1 [76, 65535] { R13264 += 1, R13202 += 1 };
  s3 -> s1 [0, 74] { R13264 += 1, R13202 += 1 };
  s3 -> s2 [0, 65535] { R13264 += 1, R13202 += 1, R86 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R13264 += 1, R13201 += 1, R13202 += 1 };
  s3 -> s1 [76, 65535] { R13264 += 1, R13202 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R13264 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 65535] { R13266 += 1, R13203 += 1, R13204 += 1 };
  s0 -> s2 [0, 65535] { R13266 += 1, R13204 += 1, R90 += 1 };
  s0 -> s0 [0, 65535] { R13265 += 1, R13266 += 1 };
  s0 -> s3 [0, 65535] { R13266 += 1, R13204 += 1 };
  s1 -> s1 [0, 65535] { R13266 += 1, R13203 += 1, R13204 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s2 [0, 65535] { R13266 += 1, R13204 += 1, R90 += 1 };
  s1 -> s3 [0, 65535] { R13266 += 1, R13204 += 1 };
  s2 -> s4 [0, 65535] { R13266 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R13266 += 1, R13204 += 1, R90 += 1 };
  s2 -> s3 [0, 65535] { R13266 += 1, R13204 += 1 };
  s3 -> s4 [0, 65535] { R13266 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R13266 += 1, R13204 += 1 };
  s4 -> s4 [0, 65535] { R13266 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s0 [0, 65535] { R13267 += 1, R13268 += 1 };
  s0 -> s1 [0, 65535] { R13268 += 1, R13206 += 1, R94 += 1, R95 += 1 };
  s0 -> s2 [0, 65535] { R13268 += 1, R13205 += 1, R13206 += 1 };
  s0 -> s3 [0, 65535] { R13268 += 1, R13206 += 1, R95 += 1, R96 += 1 };
  s1 -> s1 [0, 65535] { R13268 += 1, R13206 += 1, R94 += 1, R95 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R13268 += 1 };
  s1 -> s3 [0, 65535] { R13268 += 1, R13206 += 1, R95 += 1, R96 += 1 };
  s2 -> s1 [0, 65535] { R13268 += 1, R13206 += 1, R94 += 1, R95 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R13268 += 1, R13205 += 1, R13206 += 1 };
  s2 -> s3 [0, 65535] { R13268 += 1, R13206 += 1, R95 += 1, R96 += 1 };
  s3 -> s4 [0, 65535] { R13268 += 1, R13206 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R13268 += 1 };
  s3 -> s3 [0, 65535] { R13268 += 1, R13206 += 1, R95 += 1, R96 += 1 };
  s4 -> s4 [0, 65535] { R13268 += 1, R13206 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R13268 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R13268 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s0 [0, 65535] { R13269 += 1, R13270 += 1 };
  s0 -> s1 [0, 65535] { R13270 += 1, R13207 += 1, R13208 += 1 };
  s0 -> s2 [0, 65535] { R13270 += 1, R13208 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R13270 += 1, R13207 += 1, R13208 += 1 };
  s1 -> s2 [0, 65535] { R13270 += 1, R13208 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R13270 += 1 };
  s2 -> s2 [0, 65535] { R13270 += 1, R13208 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R13270 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 74] { R13272 += 1, R13210 += 1, R12960 += 1, R12962 += 1 };
  s0 -> s2 [0, 65535] { R13272 += 1, R13209 += 1, R13210 += 1 };
  s0 -> s0 [0, 65535] { R13271 += 1, R13272 += 1 };
  s0 -> s3 [0, 65535] { R13272 += 1, R13210 += 1, R12960 += 1, R12961 += 1, R12962 += 1 };
  s0 -> s4 [75, 75] { R13272 += 1, R13210 += 1, R12960 += 1, R12962 += 1 };
  s0 -> s1 [76, 65535] { R13272 += 1, R13210 += 1, R12960 += 1, R12962 += 1 };
  s1 -> s1 [0, 74] { R13272 += 1, R13210 += 1, R12960 += 1, R12962 += 1 };
  s1 -> s4 [75, 75] { R13272 += 1, R13210 += 1, R12960 += 1, R12962 += 1 };
  s1 -> s1 [76, 65535] { R13272 += 1, R13210 += 1, R12960 += 1, R12962 += 1 };
  s2 -> s1 [0, 74] { R13272 += 1, R13210 += 1, R12960 += 1, R12962 += 1 };
  s2 -> s2 [0, 65535] { R13272 += 1, R13209 += 1, R13210 += 1 };
  s2 -> s3 [0, 65535] { R13272 += 1, R13210 += 1, R12960 += 1, R12961 += 1, R12962 += 1 };
  s2 -> s4 [75, 75] { R13272 += 1, R13210 += 1, R12960 += 1, R12962 += 1 };
  s2 -> s1 [76, 65535] { R13272 += 1, R13210 += 1, R12960 += 1, R12962 += 1 };
  s3 -> s1 [0, 74] { R13272 += 1, R13210 += 1, R12960 += 1, R12962 += 1 };
  s3 -> s3 [0, 65535] { R13272 += 1, R13210 += 1, R12960 += 1, R12961 += 1, R12962 += 1 };
  s3 -> s4 [75, 75] { R13272 += 1, R13210 += 1, R12960 += 1, R12962 += 1 };
  s3 -> s1 [76, 65535] { R13272 += 1, R13210 += 1, R12960 += 1, R12962 += 1 };
  s4 -> s5 [0, 65535] { R13272 += 1, R13210 += 1 };
  s4 -> s4 [0, 65535] { R13272 += 1, R13210 += 1, R12960 += 1, R12962 += 1 };
  s4 -> s6 [0, 65535] { R13272 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s8 [0, 65535] { R13272 += 1, R13210 += 1, R12960 += 1 };
  s5 -> s5 [0, 65535] { R13272 += 1, R13210 += 1 };
  s5 -> s6 [0, 65535] { R13272 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s6 [0, 65535] { R13272 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  s8 -> s5 [0, 65535] { R13272 += 1, R13210 += 1 };
  s8 -> s6 [0, 65535] { R13272 += 1 };
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R13272 += 1, R13210 += 1, R12960 += 1 };
  accepting s4, s8, s5, s6, s7;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 65535] { R13274 += 1, R13212 += 1, R13188 += 1, R13189 += 1 };
  s0 -> s0 [0, 65535] { R13273 += 1, R13274 += 1 };
  s0 -> s2 [0, 65535] { R13274 += 1, R13212 += 1, R13189 += 1, R13190 += 1, R13191 += 1 };
  s0 -> s3 [0, 65535] { R13274 += 1, R13212 += 1, R13189 += 1, R13191 += 1, R13192 += 1 };
  s0 -> s4 [0, 65535] { R13274 += 1, R13211 += 1, R13212 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R13274 += 1, R13212 += 1, R13188 += 1, R13189 += 1 };
  s1 -> s2 [0, 65535] { R13274 += 1, R13212 += 1, R13189 += 1, R13190 += 1, R13191 += 1 };
  s1 -> s3 [0, 65535] { R13274 += 1, R13212 += 1, R13189 += 1, R13191 += 1, R13192 += 1 };
  s1 -> s8 [0, 65535] { R13274 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R13274 += 1, R13212 += 1, R13189 += 1, R13190 += 1, R13191 += 1 };
  s2 -> s3 [0, 65535] { R13274 += 1, R13212 += 1, R13189 += 1, R13191 += 1, R13192 += 1 };
  s2 -> s7 [0, 65535] { R13274 += 1, R13212 += 1 };
  s2 -> s8 [0, 65535] { R13274 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R13274 += 1, R13212 += 1, R13189 += 1 };
  s3 -> s3 [0, 65535] { R13274 += 1, R13212 += 1, R13189 += 1, R13191 += 1, R13192 += 1 };
  s3 -> s7 [0, 65535] { R13274 += 1, R13212 += 1 };
  s3 -> s8 [0, 65535] { R13274 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s1 [0, 65535] { R13274 += 1, R13212 += 1, R13188 += 1, R13189 += 1 };
  s4 -> s2 [0, 65535] { R13274 += 1, R13212 += 1, R13189 += 1, R13190 += 1, R13191 += 1 };
  s4 -> s3 [0, 65535] { R13274 += 1, R13212 += 1, R13189 += 1, R13191 += 1, R13192 += 1 };
  s4 -> s4 [0, 65535] { R13274 += 1, R13211 += 1, R13212 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R13274 += 1, R13212 += 1, R13189 += 1 };
  s6 -> s7 [0, 65535] { R13274 += 1, R13212 += 1 };
  s6 -> s8 [0, 65535] { R13274 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R13274 += 1, R13212 += 1 };
  s7 -> s8 [0, 65535] { R13274 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s8 [0, 65535] { R13274 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s0 [0, 65535] { R13275 += 1, R13276 += 1 };
  s0 -> s1 [0, 65535] { R13276 += 1, R13231 += 1, R13232 += 1 };
  s0 -> s2 [0, 65535] { R13276 += 1, R13232 += 1, R21 += 1 };
  s1 -> s1 [0, 65535] { R13276 += 1, R13231 += 1, R13232 += 1 };
  s1 -> s2 [0, 65535] { R13276 += 1, R13232 += 1, R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R13276 += 1, R13232 += 1, R21 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R13276 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R13276 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 69] { R13278 += 1, R13234 += 1 };
  s0 -> s0 [0, 65535] { R13277 += 1, R13278 += 1 };
  s0 -> s2 [0, 65535] { R13278 += 1, R13233 += 1, R13234 += 1 };
  s0 -> s3 [70, 70] { R13278 += 1, R13234 += 1 };
  s0 -> s4 [70, 70] { R13278 += 1, R13234 += 1 };
  s0 -> s5 [75, 75] { R13278 += 1, R13234 += 1 };
  s0 -> s1 [76, 65535] { R13278 += 1, R13234 += 1 };
  s1 -> s1 [0, 69] { R13278 += 1, R13234 += 1 };
  s1 -> s3 [70, 70] { R13278 += 1, R13234 += 1 };
  s1 -> s4 [70, 70] { R13278 += 1, R13234 += 1 };
  s1 -> s5 [75, 75] { R13278 += 1, R13234 += 1 };
  s1 -> s1 [76, 65535] { R13278 += 1, R13234 += 1 };
  s2 -> s1 [0, 69] { R13278 += 1, R13234 += 1 };
  s2 -> s2 [0, 65535] { R13278 += 1, R13233 += 1, R13234 += 1 };
  s2 -> s3 [70, 70] { R13278 += 1, R13234 += 1 };
  s2 -> s4 [70, 70] { R13278 += 1, R13234 += 1 };
  s2 -> s5 [75, 75] { R13278 += 1, R13234 += 1 };
  s2 -> s1 [76, 65535] { R13278 += 1, R13234 += 1 };
  s4 -> s4 [0, 70] { R13278 += 1, R13234 += 1 };
  s4 -> s8 [75, 75] { R13278 += 1, R13234 += 1 };
  s4 -> s4 [76, 65535] { R13278 += 1, R13234 += 1 };
  s5 -> s5 [0, 69] { R13278 += 1, R13234 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R13278 += 1 };
  s5 -> s7 [70, 70] { R13278 += 1, R13234 += 1 };
  s5 -> s8 [70, 70] { R13278 += 1, R13234 += 1 };
  s5 -> s5 [75, 65535] { R13278 += 1, R13234 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R13278 += 1 };
  s8 -> s8 [0, 70] { R13278 += 1, R13234 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R13278 += 1 };
  s8 -> s8 [75, 65535] { R13278 += 1, R13234 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 69] { R13280 += 1, R13236 += 1, R83 += 1 };
  s0 -> s0 [0, 65535] { R13279 += 1, R13280 += 1 };
  s0 -> s2 [0, 65535] { R13280 += 1, R13235 += 1, R13236 += 1 };
  s0 -> s3 [70, 70] { R13280 += 1, R13236 += 1, R83 += 1 };
  s0 -> s4 [70, 70] { R13280 += 1, R13236 += 1, R83 += 1 };
  s0 -> s1 [71, 65535] { R13280 += 1, R13236 += 1, R83 += 1 };
  s1 -> s1 [0, 69] { R13280 += 1, R13236 += 1, R83 += 1 };
  s1 -> s1 [0, 65535] { R13280 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [70, 70] { R13280 += 1, R13236 += 1, R83 += 1 };
  s1 -> s4 [70, 70] { R13280 += 1, R13236 += 1, R83 += 1 };
  s1 -> s1 [71, 65535] { R13280 += 1, R13236 += 1, R83 += 1 };
  s2 -> s1 [0, 69] { R13280 += 1, R13236 += 1, R83 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R13280 += 1, R13235 += 1, R13236 += 1 };
  s2 -> s3 [70, 70] { R13280 += 1, R13236 += 1, R83 += 1 };
  s2 -> s4 [70, 70] { R13280 += 1, R13236 += 1, R83 += 1 };
  s2 -> s1 [71, 65535] { R13280 += 1, R13236 += 1, R83 += 1 };
  s3 -> s3 [0, 65535] { R13280 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R13280 += 1 };
  s4 -> s4 [0, 65535] { R13280 += 1, R13236 += 1, R83 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R13280 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 69] { R13282 += 1, R13238 += 1, R85 += 1 };
  s0 -> s2 [0, 65535] { R13282 += 1, R13237 += 1, R13238 += 1 };
  s0 -> s0 [0, 65535] { R13281 += 1, R13282 += 1 };
  s0 -> s3 [70, 70] { R13282 += 1, R13238 += 1, R85 += 1 };
  s0 -> s4 [70, 70] { R13282 += 1, R13238 += 1, R85 += 1 };
  s0 -> s1 [71, 65535] { R13282 += 1, R13238 += 1, R85 += 1 };
  s1 -> s1 [0, 69] { R13282 += 1, R13238 += 1, R85 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R13282 += 1 };
  s1 -> s3 [70, 70] { R13282 += 1, R13238 += 1, R85 += 1 };
  s1 -> s4 [70, 70] { R13282 += 1, R13238 += 1, R85 += 1 };
  s1 -> s1 [71, 65535] { R13282 += 1, R13238 += 1, R85 += 1 };
  s2 -> s1 [0, 69] { R13282 += 1, R13238 += 1, R85 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R13282 += 1, R13237 += 1, R13238 += 1 };
  s2 -> s3 [70, 70] { R13282 += 1, R13238 += 1, R85 += 1 };
  s2 -> s4 [70, 70] { R13282 += 1, R13238 += 1, R85 += 1 };
  s2 -> s1 [71, 65535] { R13282 += 1, R13238 += 1, R85 += 1 };
  s3 -> s3 [0, 65535] { R13282 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R13282 += 1 };
  s4 -> s4 [0, 65535] { R13282 += 1, R13238 += 1, R85 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R13282 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 69] { R13284 += 1, R13240 += 1, R88 += 1 };
  s0 -> s2 [0, 69] { R13284 += 1, R13240 += 1, R87 += 1, R88 += 1 };
  s0 -> s0 [0, 65535] { R13283 += 1, R13284 += 1 };
  s0 -> s3 [0, 65535] { R13284 += 1, R13239 += 1, R13240 += 1 };
  s0 -> s4 [70, 70] { R13284 += 1, R13240 += 1, R88 += 1 };
  s0 -> s5 [70, 70] { R13284 += 1, R13240 += 1, R88 += 1 };
  s0 -> s6 [70, 70] { R13284 += 1, R13240 += 1, R87 += 1, R88 += 1 };
  s0 -> s7 [70, 70] { R13284 += 1, R13240 += 1, R87 += 1, R88 += 1 };
  s0 -> s1 [71, 74] { R13284 += 1, R13240 += 1, R88 += 1 };
  s0 -> s2 [71, 65535] { R13284 += 1, R13240 += 1, R87 += 1, R88 += 1 };
  s0 -> s8 [75, 75] { R13284 += 1, R13240 += 1, R88 += 1 };
  s0 -> s1 [76, 65535] { R13284 += 1, R13240 += 1, R88 += 1 };
  s1 -> s1 [0, 69] { R13284 += 1, R13240 += 1, R88 += 1 };
  s1 -> s4 [70, 70] { R13284 += 1, R13240 += 1, R88 += 1 };
  s1 -> s5 [70, 70] { R13284 += 1, R13240 += 1, R88 += 1 };
  s1 -> s1 [71, 74] { R13284 += 1, R13240 += 1, R88 += 1 };
  s1 -> s8 [75, 75] { R13284 += 1, R13240 += 1, R88 += 1 };
  s1 -> s1 [76, 65535] { R13284 += 1, R13240 += 1, R88 += 1 };
  s2 -> s1 [0, 69] { R13284 += 1, R13240 += 1, R88 += 1 };
  s2 -> s2 [0, 69] { R13284 += 1, R13240 += 1, R87 += 1, R88 += 1 };
  s2 -> s4 [70, 70] { R13284 += 1, R13240 += 1, R88 += 1 };
  s2 -> s5 [70, 70] { R13284 += 1, R13240 += 1, R88 += 1 };
  s2 -> s6 [70, 70] { R13284 += 1, R13240 += 1, R87 += 1, R88 += 1 };
  s2 -> s7 [70, 70] { R13284 += 1, R13240 += 1, R87 += 1, R88 += 1 };
  s2 -> s1 [71, 74] { R13284 += 1, R13240 += 1, R88 += 1 };
  s2 -> s2 [71, 65535] { R13284 += 1, R13240 += 1, R87 += 1, R88 += 1 };
  s2 -> s8 [75, 75] { R13284 += 1, R13240 += 1, R88 += 1 };
  s2 -> s1 [76, 65535] { R13284 += 1, R13240 += 1, R88 += 1 };
  s3 -> s1 [0, 69] { R13284 += 1, R13240 += 1, R88 += 1 };
  s3 -> s2 [0, 69] { R13284 += 1, R13240 += 1, R87 += 1, R88 += 1 };
  s3 -> s3 [0, 65535] { R13284 += 1, R13239 += 1, R13240 += 1 };
  s3 -> s4 [70, 70] { R13284 += 1, R13240 += 1, R88 += 1 };
  s3 -> s5 [70, 70] { R13284 += 1, R13240 += 1, R88 += 1 };
  s3 -> s6 [70, 70] { R13284 += 1, R13240 += 1, R87 += 1, R88 += 1 };
  s3 -> s7 [70, 70] { R13284 += 1, R13240 += 1, R87 += 1, R88 += 1 };
  s3 -> s1 [71, 74] { R13284 += 1, R13240 += 1, R88 += 1 };
  s3 -> s2 [71, 65535] { R13284 += 1, R13240 += 1, R87 += 1, R88 += 1 };
  s3 -> s8 [75, 75] { R13284 += 1, R13240 += 1, R88 += 1 };
  s3 -> s1 [76, 65535] { R13284 += 1, R13240 += 1, R88 += 1 };
  s5 -> s5 [0, 74] { R13284 += 1, R13240 += 1, R88 += 1 };
  s5 -> s11 [75, 75] { R13284 += 1, R13240 += 1, R88 += 1 };
  s5 -> s5 [76, 65535] { R13284 += 1, R13240 += 1, R88 += 1 };
  s7 -> s5 [0, 74] { R13284 += 1, R13240 += 1, R88 += 1 };
  s7 -> s7 [0, 65535] { R13284 += 1, R13240 += 1, R87 += 1, R88 += 1 };
  s7 -> s11 [75, 75] { R13284 += 1, R13240 += 1, R88 += 1 };
  s7 -> s5 [76, 65535] { R13284 += 1, R13240 += 1, R88 += 1 };
  s8 -> s8 [0, 69] { R13284 += 1, R13240 += 1, R88 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R13284 += 1 };
  s8 -> s10 [70, 70] { R13284 += 1, R13240 += 1, R88 += 1 };
  s8 -> s11 [70, 70] { R13284 += 1, R13240 += 1, R88 += 1 };
  s8 -> s8 [71, 65535] { R13284 += 1, R13240 += 1, R88 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R13284 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R13284 += 1, R13240 += 1, R88 += 1 };
  s11 -> s12 [0, 65535] { R13284 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R13284 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 69] { R13286 += 1, R13242 += 1, R91 += 1, R92 += 1 };
  s0 -> s2 [0, 65535] { R13286 += 1, R13241 += 1, R13242 += 1 };
  s0 -> s0 [0, 65535] { R13285 += 1, R13286 += 1 };
  s0 -> s3 [70, 70] { R13286 += 1, R13242 += 1, R91 += 1, R92 += 1 };
  s0 -> s4 [70, 70] { R13286 += 1, R13242 += 1, R91 += 1, R92 += 1 };
  s0 -> s1 [71, 65535] { R13286 += 1, R13242 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 69] { R13286 += 1, R13242 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 65535] { R13286 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [70, 70] { R13286 += 1, R13242 += 1, R91 += 1, R92 += 1 };
  s1 -> s4 [70, 70] { R13286 += 1, R13242 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [71, 65535] { R13286 += 1, R13242 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [0, 69] { R13286 += 1, R13242 += 1, R91 += 1, R92 += 1 };
  s2 -> s2 [0, 65535] { R13286 += 1, R13241 += 1, R13242 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [70, 70] { R13286 += 1, R13242 += 1, R91 += 1, R92 += 1 };
  s2 -> s4 [70, 70] { R13286 += 1, R13242 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [71, 65535] { R13286 += 1, R13242 += 1, R91 += 1, R92 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R13286 += 1 };
  s4 -> s5 [0, 65535] { R13286 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R13286 += 1, R13242 += 1, R91 += 1, R92 += 1 };
  s5 -> s5 [0, 65535] { R13286 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 69] { R13288 += 1, R13244 += 1, R10160 += 1, R10161 += 1 };
  s0 -> s2 [0, 69] { R13288 += 1, R13244 += 1, R10159 += 1, R10160 += 1 };
  s0 -> s0 [0, 65535] { R13287 += 1, R13288 += 1 };
  s0 -> s3 [0, 65535] { R13288 += 1, R13243 += 1, R13244 += 1 };
  s0 -> s4 [70, 70] { R13288 += 1, R13244 += 1, R10160 += 1, R10161 += 1 };
  s0 -> s5 [70, 70] { R13288 += 1, R13244 += 1, R10159 += 1, R10160 += 1 };
  s0 -> s6 [70, 70] { R13288 += 1, R13244 += 1, R10160 += 1, R10161 += 1 };
  s0 -> s7 [70, 70] { R13288 += 1, R13244 += 1, R10159 += 1, R10160 += 1 };
  s0 -> s1 [71, 65535] { R13288 += 1, R13244 += 1, R10160 += 1, R10161 += 1 };
  s0 -> s2 [71, 65535] { R13288 += 1, R13244 += 1, R10159 += 1, R10160 += 1 };
  s1 -> s11 [0, 69] { R13288 += 1, R13244 += 1 };
  s1 -> s1 [0, 69] { R13288 += 1, R13244 += 1, R10160 += 1, R10161 += 1 };
  s1 -> s4 [70, 70] { R13288 += 1, R13244 += 1, R10160 += 1, R10161 += 1 };
  s1 -> s12 [70, 70] { R13288 += 1, R13244 += 1 };
  s1 -> s8 [70, 70] { R13288 += 1, R13244 += 1 };
  s1 -> s6 [70, 70] { R13288 += 1, R13244 += 1, R10160 += 1, R10161 += 1 };
  s1 -> s11 [71, 65535] { R13288 += 1, R13244 += 1 };
  s1 -> s1 [71, 65535] { R13288 += 1, R13244 += 1, R10160 += 1, R10161 += 1 };
  s2 -> s1 [0, 69] { R13288 += 1, R13244 += 1, R10160 += 1, R10161 += 1 };
  s2 -> s2 [0, 69] { R13288 += 1, R13244 += 1, R10159 += 1, R10160 += 1 };
  s2 -> s4 [70, 70] { R13288 += 1, R13244 += 1, R10160 += 1, R10161 += 1 };
  s2 -> s5 [70, 70] { R13288 += 1, R13244 += 1, R10159 += 1, R10160 += 1 };
  s2 -> s6 [70, 70] { R13288 += 1, R13244 += 1, R10160 += 1, R10161 += 1 };
  s2 -> s7 [70, 70] { R13288 += 1, R13244 += 1, R10159 += 1, R10160 += 1 };
  s2 -> s1 [71, 65535] { R13288 += 1, R13244 += 1, R10160 += 1, R10161 += 1 };
  s2 -> s2 [71, 65535] { R13288 += 1, R13244 += 1, R10159 += 1, R10160 += 1 };
  s3 -> s1 [0, 69] { R13288 += 1, R13244 += 1, R10160 += 1, R10161 += 1 };
  s3 -> s2 [0, 69] { R13288 += 1, R13244 += 1, R10159 += 1, R10160 += 1 };
  s3 -> s3 [0, 65535] { R13288 += 1, R13243 += 1, R13244 += 1 };
  s3 -> s4 [70, 70] { R13288 += 1, R13244 += 1, R10160 += 1, R10161 += 1 };
  s3 -> s5 [70, 70] { R13288 += 1, R13244 += 1, R10159 += 1, R10160 += 1 };
  s3 -> s6 [70, 70] { R13288 += 1, R13244 += 1, R10160 += 1, R10161 += 1 };
  s3 -> s7 [70, 70] { R13288 += 1, R13244 += 1, R10159 += 1, R10160 += 1 };
  s3 -> s1 [71, 65535] { R13288 += 1, R13244 += 1, R10160 += 1, R10161 += 1 };
  s3 -> s2 [71, 65535] { R13288 += 1, R13244 += 1, R10159 += 1, R10160 += 1 };
  s4 -> s4 [0, 65535] { R13288 += 1, R13244 += 1, R10160 += 1, R10161 += 1 };
  s4 -> s8 [0, 65535] { R13288 += 1, R13244 += 1 };
  s7 -> s4 [0, 65535] { R13288 += 1, R13244 += 1, R10160 += 1, R10161 += 1 };
  s7 -> s7 [0, 65535] { R13288 += 1, R13244 += 1, R10159 += 1, R10160 += 1 };
  s8 -> s9 [0, 65535] { R13288 += 1 };
  s8 -> s10 [0, 65535];
  s8 -> s8 [0, 65535] { R13288 += 1, R13244 += 1 };
  s9 -> s9 [0, 65535] { R13288 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s11 [0, 69] { R13288 += 1, R13244 += 1 };
  s11 -> s11 [0, 65535] { R13288 += 1 };
  s11 -> s10 [0, 65535];
  s11 -> s12 [70, 70] { R13288 += 1, R13244 += 1 };
  s11 -> s8 [70, 70] { R13288 += 1, R13244 += 1 };
  s11 -> s11 [71, 65535] { R13288 += 1, R13244 += 1 };
  s12 -> s12 [0, 65535] { R13288 += 1 };
  s12 -> s10 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 69] { R13290 += 1, R13246 += 1, R12955 += 1, R12956 += 1 };
  s0 -> s2 [0, 69] { R13290 += 1, R13246 += 1, R12956 += 1, R12957 += 1, R12958 += 1 };
  s0 -> s3 [0, 65535] { R13290 += 1, R13245 += 1, R13246 += 1 };
  s0 -> s0 [0, 65535] { R13289 += 1, R13290 += 1 };
  s0 -> s4 [70, 70] { R13290 += 1, R13246 += 1, R12956 += 1, R12957 += 1, R12958 += 1 };
  s0 -> s5 [70, 70] { R13290 += 1, R13246 += 1, R12955 += 1, R12956 += 1 };
  s0 -> s6 [70, 70] { R13290 += 1, R13246 += 1, R12955 += 1, R12956 += 1 };
  s0 -> s7 [70, 70] { R13290 += 1, R13246 += 1, R12956 += 1, R12957 += 1, R12958 += 1 };
  s0 -> s1 [71, 65535] { R13290 += 1, R13246 += 1, R12955 += 1, R12956 += 1 };
  s0 -> s2 [71, 65535] { R13290 += 1, R13246 += 1, R12956 += 1, R12957 += 1, R12958 += 1 };
  s1 -> s1 [0, 69] { R13290 += 1, R13246 += 1, R12955 += 1, R12956 += 1 };
  s1 -> s2 [0, 69] { R13290 += 1, R13246 += 1, R12956 += 1, R12957 += 1, R12958 += 1 };
  s1 -> s4 [70, 70] { R13290 += 1, R13246 += 1, R12956 += 1, R12957 += 1, R12958 += 1 };
  s1 -> s5 [70, 70] { R13290 += 1, R13246 += 1, R12955 += 1, R12956 += 1 };
  s1 -> s6 [70, 70] { R13290 += 1, R13246 += 1, R12955 += 1, R12956 += 1 };
  s1 -> s7 [70, 70] { R13290 += 1, R13246 += 1, R12956 += 1, R12957 += 1, R12958 += 1 };
  s1 -> s1 [71, 65535] { R13290 += 1, R13246 += 1, R12955 += 1, R12956 += 1 };
  s1 -> s2 [71, 65535] { R13290 += 1, R13246 += 1, R12956 += 1, R12957 += 1, R12958 += 1 };
  s2 -> s2 [0, 69] { R13290 += 1, R13246 += 1, R12956 += 1, R12957 += 1, R12958 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R13290 += 1 };
  s2 -> s4 [70, 70] { R13290 += 1, R13246 += 1, R12956 += 1, R12957 += 1, R12958 += 1 };
  s2 -> s7 [70, 70] { R13290 += 1, R13246 += 1, R12956 += 1, R12957 += 1, R12958 += 1 };
  s2 -> s2 [71, 65535] { R13290 += 1, R13246 += 1, R12956 += 1, R12957 += 1, R12958 += 1 };
  s3 -> s1 [0, 69] { R13290 += 1, R13246 += 1, R12955 += 1, R12956 += 1 };
  s3 -> s2 [0, 69] { R13290 += 1, R13246 += 1, R12956 += 1, R12957 += 1, R12958 += 1 };
  s3 -> s3 [0, 65535] { R13290 += 1, R13245 += 1, R13246 += 1 };
  s3 -> s4 [70, 70] { R13290 += 1, R13246 += 1, R12956 += 1, R12957 += 1, R12958 += 1 };
  s3 -> s5 [70, 70] { R13290 += 1, R13246 += 1, R12955 += 1, R12956 += 1 };
  s3 -> s6 [70, 70] { R13290 += 1, R13246 += 1, R12955 += 1, R12956 += 1 };
  s3 -> s7 [70, 70] { R13290 += 1, R13246 += 1, R12956 += 1, R12957 += 1, R12958 += 1 };
  s3 -> s1 [71, 65535] { R13290 += 1, R13246 += 1, R12955 += 1, R12956 += 1 };
  s3 -> s2 [71, 65535] { R13290 += 1, R13246 += 1, R12956 += 1, R12957 += 1, R12958 += 1 };
  s4 -> s4 [0, 65535] { R13290 += 1, R13246 += 1, R12956 += 1, R12957 += 1, R12958 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s9 [0, 65535] { R13290 += 1 };
  s6 -> s4 [0, 65535] { R13290 += 1, R13246 += 1, R12956 += 1, R12957 += 1, R12958 += 1 };
  s6 -> s6 [0, 65535] { R13290 += 1, R13246 += 1, R12955 += 1, R12956 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R13290 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R13290 += 1 };
  accepting s4, s8, s2, s9, s7;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 69] { R13292 += 1, R13248 += 1, R13183 += 1, R13184 += 1 };
  s0 -> s0 [0, 65535] { R13291 += 1, R13292 += 1 };
  s0 -> s2 [0, 65535] { R13292 += 1, R13247 += 1, R13248 += 1 };
  s0 -> s3 [70, 70] { R13292 += 1, R13248 += 1, R13183 += 1, R13184 += 1 };
  s0 -> s4 [70, 70] { R13292 += 1, R13248 += 1, R13183 += 1, R13184 += 1 };
  s0 -> s1 [71, 65535] { R13292 += 1, R13248 += 1, R13183 += 1, R13184 += 1 };
  s1 -> s1 [0, 69] { R13292 += 1, R13248 += 1, R13183 += 1, R13184 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R13292 += 1 };
  s1 -> s3 [70, 70] { R13292 += 1, R13248 += 1, R13183 += 1, R13184 += 1 };
  s1 -> s4 [70, 70] { R13292 += 1, R13248 += 1, R13183 += 1, R13184 += 1 };
  s1 -> s1 [71, 65535] { R13292 += 1, R13248 += 1, R13183 += 1, R13184 += 1 };
  s2 -> s1 [0, 69] { R13292 += 1, R13248 += 1, R13183 += 1, R13184 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R13292 += 1, R13247 += 1, R13248 += 1 };
  s2 -> s3 [70, 70] { R13292 += 1, R13248 += 1, R13183 += 1, R13184 += 1 };
  s2 -> s4 [70, 70] { R13292 += 1, R13248 += 1, R13183 += 1, R13184 += 1 };
  s2 -> s1 [71, 65535] { R13292 += 1, R13248 += 1, R13183 += 1, R13184 += 1 };
  s3 -> s3 [0, 65535] { R13292 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R13292 += 1, R13248 += 1, R13183 += 1, R13184 += 1 };
  s4 -> s6 [0, 65535] { R13292 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R13292 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [102, 102];
  accepting s1;
};
};
constraint R2 = R13210 && R3 = R13292 && R23 - R13292 = -1 && R24 = R13292 && R25 - R13292 = -1 && R26 = R13292 && R27 = 0 && R28 = 1 && R29 = 0 && R30 = 1 && R45 + R84 + R83 + -1*R12960 + -1*R12956 - R66 = 0 && R49 + R89 + R87 = 0 && R50 + R90 + R88 + -1*R12960 + -1*R12956 - R66 = 0 && R55 + R96 + R93 + -1*R12962 + -1*R12958 - R68 = 0 && R65 + R12959 + R12955 = 0 && R67 + R12961 + R12957 = 0 && R13209 = 0 && R13233 = 0 && R13234 = 0 && R13239 = 0 && R13240 = 0 && R13243 = 0 && R13244 = 0 && R13245 = 0 && R13246 = 0 && R13249 = 0 && R13250 = R13292 && R13251 = 0 && R13252 = R13292 && R13253 = 0 && R13254 = R13292 && R13255 = 0 && R13256 = R13292 && R13257 = 0 && R13258 = R13292 && R13259 = 0 && R13260 = R13292 && R13261 = 0 && R13262 = R13292 && R13263 = 0 && R13264 = R13292 && R13265 = 0 && R13266 = R13292 && R13267 = 0 && R13268 = R13292 && R13269 = 0 && R13270 = R13292 && R13271 = 0 && R13272 = R13292 && R13273 = 0 && R13274 = R13292 && R13275 = 0 && R13276 = R13292 && R13277 = 0 && R13278 = R13292 && R13279 = 0 && R13280 = R13292 && R13281 = 0 && R13282 = R13292 && R13283 = 0 && R13284 = R13292 && R13285 = 0 && R13286 = R13292 && R13287 = 0 && R13288 = R13292 && R13289 = 0 && R13290 = R13292 && R13291 = 0 && R12 < 1 && R15 < 1 && R16 < 1 && R47 + R86 + R85 < 1 && R61 + R10164 + R10161 < 1 && -1*R12960 + -1*R12956 - R66 < 1 && -1*R12962 + -1*R12958 - R68 < 1 && -1 < R13210 && 0 < R13292 && (R53 + R94 + R91 != 0 || R54 + R95 + R92 + -1*R12960 + -1*R12956 - R66 = 0 || R66 + R12960 + R12956 < 1) && (R59 + R10162 + R10159 != 0 || R60 + R10163 + R10160 + -1*R12960 + -1*R12956 - R66 = 0 || R66 + R12960 + R12956 < 1) && (R66 + R12960 + R12956 != 0 || ((R53 + R94 + R91 != 0 || R54 + R95 + R92 = 0 || R68 + R12962 + R12958 < 1) && (R53 + R94 + R91 = 0 || R68 + R12962 + R12958 < 1))) && (R66 + R12960 + R12956 != 0 || ((R59 + R10162 + R10159 != 0 || R60 + R10163 + R10160 = 0 || R68 + R12962 + R12958 < 1) && (R59 + R10162 + R10159 = 0 || R68 + R12962 + R12958 < 1))) && (R66 + R12960 + R12956 != 0 || ((R73 + R13188 + R13183 != 0 || R74 + R13189 + R13184 = 0 || R68 + R12962 + R12958 < 1) && (R73 + R13188 + R13183 = 0 || R68 + R12962 + R12958 < 1))) && (R68 + R12962 + R12958 != 0 || R77 + R13192 + R13187 = 0 || (R75 + R13190 + R13185 = 0 && R76 + R13191 + R13186 = 0)) && (R73 + R13188 + R13183 != 0 || R66 + R12960 + R12956 + -1*R13189 + -1*R13184 - R74 = 0 || R66 + R12960 + R12956 < 1) && (R75 + R13190 + R13185 != 0 || R68 + R12962 + R12958 + -1*R13191 + -1*R13186 - R76 = 0 || R68 + R12962 + R12958 < 1) && (R13193 != 0 || R13194 = R13210 || (R20 = 0 && R13210 = 0)) && (R13195 != 0 || R13196 = R13210 || (R20 = 0 && R13210 = 0)) && (R13197 != 0 || R13198 = R13210 || (R20 = 0 && R13210 = 0)) && (R13199 != 0 || R13200 = R13210 || (R20 = 0 && R13210 = 0)) && (R13201 != 0 || R13202 = R13210 || (R20 = 0 && R13210 = 0)) && (R13203 != 0 || R13204 = R13210 || (R20 = 0 && R13210 = 0)) && (R13205 != 0 || R13206 = R13210 || (R20 = 0 && R13210 = 0)) && (R13207 != 0 || R13208 = R13210 || (R20 = 0 && R13210 = 0)) && (R13211 != 0 || R13210 = R13212 || (R20 = 0 && R13210 = 0)) && (R21 = 0 || (R13231 = 0 && R13232 = 0)) && (R21 = 0 || (R13235 = 0 && R13236 = 0)) && (R21 = 0 || (R13237 = 0 && R13238 = 0)) && (R21 = 0 || (R13241 = 0 && R13242 = 0)) && (R21 = 0 || (R13247 = 0 && R13248 = 0)) && (R22 = 0 || (R13213 = 0 && R13214 = 0)) && (R22 = 0 || (R13215 = 0 && R13216 = 0)) && (R22 = 0 || (R13217 = 0 && R13218 = 0)) && (R22 = 0 || (R13219 = 0 && R13220 = 0)) && (R22 = 0 || (R13221 = 0 && R13222 = 0)) && (R22 = 0 || (R13223 = 0 && R13224 = 0)) && (R22 = 0 || (R13225 = 0 && R13226 = 0)) && (R22 = 0 || (R13227 = 0 && R13228 = 0)) && (R22 = 0 || (R13229 = 0 && R13230 = 0)) && (R53 + R94 + R91 = 0 || R66 + R12960 + R12956 < 1) && (R59 + R10162 + R10159 = 0 || R66 + R12960 + R12956 < 1) && (R73 + R13188 + R13183 = 0 || R66 + R12960 + R12956 < 1) && (R75 + R13190 + R13185 = 0 || R68 + R12962 + R12958 < 1) && (R13193 = 0 || (R20 = 0 && R13210 = 0)) && (R13195 = 0 || (R20 = 0 && R13210 = 0)) && (R13197 = 0 || (R20 = 0 && R13210 = 0)) && (R13199 = 0 || (R20 = 0 && R13210 = 0)) && (R13201 = 0 || (R20 = 0 && R13210 = 0)) && (R13203 = 0 || (R20 = 0 && R13210 = 0)) && (R13205 = 0 || (R20 = 0 && R13210 = 0)) && (R13207 = 0 || (R20 = 0 && R13210 = 0)) && (R13211 = 0 || (R20 = 0 && R13210 = 0));
// End of Parikh automata intersection problem
