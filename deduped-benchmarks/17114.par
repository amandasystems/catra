// Parikh automata intersection problem, generated by OSTRICH+
counter int R100, R101, R102, R12, R15, R16, R2, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R4, R45, R47, R49, R5, R50, R53, R54, R55, R59, R60, R61, R65, R66, R661, R662, R663, R664, R665, R666, R667, R668, R669, R67, R670, R671, R672, R673, R674, R675, R676, R677, R678, R679, R68, R680, R681, R682, R683, R684, R685, R686, R687, R688, R689, R690, R691, R692, R693, R694, R695, R696, R697, R698, R699, R700, R701, R702, R703, R704, R705, R706, R707, R708, R709, R710, R711, R712, R713, R714, R715, R716, R717, R718, R719, R720, R721, R722, R723, R724, R725, R726, R727, R728, R729, R73, R730, R731, R732, R733, R734, R735, R736, R737, R738, R739, R74, R740, R741, R742, R743, R744, R745, R746, R747, R748, R749, R75, R750, R751, R752, R753, R754, R755, R756, R757, R758, R759, R76, R760, R761, R762, R763, R764, R765, R766, R767, R768, R769, R77, R770, R771, R772, R773, R774, R775, R776, R777, R778, R83, R84, R85, R86, R87, R88, R89, R90, R91, R92, R93, R94, R95, R96, R97, R98, R99;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [70, 70];
  s0 -> s0 [71, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [70, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R15 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 69];
  s0 -> s0 [0, 65535] { R16 += 1 };
  s0 -> s2 [70, 70];
  s0 -> s1 [71, 65535];
  s1 -> s1 [0, 69];
  s1 -> s2 [70, 70];
  s1 -> s1 [71, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R24 += 1 };
  s0 -> s0 [0, 65535] { R23 += 1, R24 += 1 };
  s0 -> s2 [9, 13] { R24 += 1 };
  s0 -> s1 [14, 31] { R24 += 1 };
  s0 -> s2 [32, 32] { R24 += 1 };
  s0 -> s1 [33, 65535] { R24 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R24 += 1 };
  s2 -> s1 [0, 65535] { R24 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R25 += 1, R26 += 1 };
  s1 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R28 += 1 };
  s0 -> s0 [0, 65535] { R27 += 1, R28 += 1 };
  s0 -> s2 [9, 13] { R28 += 1 };
  s0 -> s1 [14, 31] { R28 += 1 };
  s0 -> s2 [32, 32] { R28 += 1 };
  s0 -> s1 [33, 65535] { R28 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R28 += 1 };
  s2 -> s1 [0, 65535] { R28 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R29 += 1, R30 += 1 };
  s1 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R699 += 1, R700 += 1 };
  s0 -> s1 [0, 65535] { R700 += 1, R22 += 1 };
  s1 -> s1 [0, 65535] { R700 += 1, R22 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 69] { R702 += 1 };
  s0 -> s0 [0, 65535] { R701 += 1, R702 += 1 };
  s0 -> s2 [70, 70] { R702 += 1 };
  s0 -> s3 [70, 70] { R702 += 1 };
  s0 -> s1 [76, 65535] { R702 += 1 };
  s1 -> s1 [0, 69] { R702 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R702 += 1 };
  s1 -> s3 [70, 70] { R702 += 1 };
  s1 -> s1 [76, 65535] { R702 += 1 };
  s2 -> s2 [0, 70] { R702 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [76, 65535] { R702 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 69] { R704 += 1, R45 += 1 };
  s0 -> s0 [0, 65535] { R703 += 1, R704 += 1 };
  s0 -> s2 [70, 70] { R704 += 1, R45 += 1 };
  s0 -> s3 [70, 70] { R704 += 1, R45 += 1 };
  s0 -> s1 [71, 65535] { R704 += 1, R45 += 1 };
  s1 -> s1 [0, 69] { R704 += 1, R45 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R704 += 1, R45 += 1 };
  s1 -> s3 [70, 70] { R704 += 1, R45 += 1 };
  s1 -> s1 [71, 65535] { R704 += 1, R45 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R704 += 1, R45 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 69] { R706 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R705 += 1, R706 += 1 };
  s0 -> s2 [70, 70] { R706 += 1, R47 += 1 };
  s0 -> s3 [70, 70] { R706 += 1, R47 += 1 };
  s0 -> s1 [71, 65535] { R706 += 1, R47 += 1 };
  s1 -> s1 [0, 69] { R706 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R706 += 1, R47 += 1 };
  s1 -> s3 [70, 70] { R706 += 1, R47 += 1 };
  s1 -> s1 [71, 65535] { R706 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R706 += 1, R47 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 69] { R708 += 1, R49 += 1, R50 += 1 };
  s0 -> s0 [0, 65535] { R707 += 1, R708 += 1 };
  s0 -> s2 [70, 70] { R708 += 1, R49 += 1, R50 += 1 };
  s0 -> s3 [70, 70] { R708 += 1, R49 += 1, R50 += 1 };
  s0 -> s1 [71, 65535] { R708 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 69] { R708 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R708 += 1, R49 += 1, R50 += 1 };
  s1 -> s3 [70, 70] { R708 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [71, 65535] { R708 += 1, R49 += 1, R50 += 1 };
  s2 -> s2 [0, 65535] { R708 += 1, R49 += 1, R50 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 69] { R710 += 1, R53 += 1, R54 += 1 };
  s0 -> s0 [0, 65535] { R709 += 1, R710 += 1 };
  s0 -> s2 [70, 70] { R710 += 1, R53 += 1, R54 += 1 };
  s0 -> s3 [70, 70] { R710 += 1, R53 += 1, R54 += 1 };
  s0 -> s1 [71, 65535] { R710 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 69] { R710 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R710 += 1, R53 += 1, R54 += 1 };
  s1 -> s3 [70, 70] { R710 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [71, 65535] { R710 += 1, R53 += 1, R54 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R710 += 1, R53 += 1, R54 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 69] { R712 += 1, R59 += 1, R60 += 1 };
  s0 -> s0 [0, 65535] { R711 += 1, R712 += 1 };
  s0 -> s2 [70, 70] { R712 += 1, R59 += 1, R60 += 1 };
  s0 -> s3 [70, 70] { R712 += 1, R59 += 1, R60 += 1 };
  s0 -> s1 [71, 65535] { R712 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 69] { R712 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R712 += 1, R59 += 1, R60 += 1 };
  s1 -> s3 [70, 70] { R712 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [71, 65535] { R712 += 1, R59 += 1, R60 += 1 };
  s2 -> s2 [0, 65535] { R712 += 1, R59 += 1, R60 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 69] { R714 += 1, R65 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R713 += 1, R714 += 1 };
  s0 -> s2 [70, 70] { R714 += 1, R65 += 1, R66 += 1 };
  s0 -> s3 [70, 70] { R714 += 1, R65 += 1, R66 += 1 };
  s0 -> s1 [71, 65535] { R714 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 69] { R714 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R714 += 1, R65 += 1, R66 += 1 };
  s1 -> s3 [70, 70] { R714 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [71, 65535] { R714 += 1, R65 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R714 += 1, R65 += 1, R66 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 69] { R716 += 1, R73 += 1, R74 += 1 };
  s0 -> s0 [0, 65535] { R715 += 1, R716 += 1 };
  s0 -> s2 [70, 70] { R716 += 1, R73 += 1, R74 += 1 };
  s0 -> s3 [70, 70] { R716 += 1, R73 += 1, R74 += 1 };
  s0 -> s1 [71, 65535] { R716 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 69] { R716 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R716 += 1, R73 += 1, R74 += 1 };
  s1 -> s3 [70, 70] { R716 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [71, 65535] { R716 += 1, R73 += 1, R74 += 1 };
  s2 -> s2 [0, 65535] { R716 += 1, R73 += 1, R74 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 69] { R736 += 1 };
  s0 -> s0 [0, 65535] { R735 += 1, R736 += 1 };
  s0 -> s2 [70, 70] { R736 += 1 };
  s0 -> s1 [71, 65535] { R736 += 1 };
  s1 -> s1 [0, 69] { R736 += 1 };
  s1 -> s2 [70, 70] { R736 += 1 };
  s1 -> s1 [71, 65535] { R736 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R736 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R737 += 1, R738 += 1 };
  s0 -> s1 [0, 65535] { R738 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R738 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 69] { R740 += 1 };
  s0 -> s2 [0, 65535] { R740 += 1, R12 += 1 };
  s0 -> s0 [0, 65535] { R739 += 1, R740 += 1 };
  s0 -> s3 [70, 70] { R740 += 1 };
  s0 -> s1 [71, 65535] { R740 += 1 };
  s1 -> s1 [0, 69] { R740 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [70, 70] { R740 += 1 };
  s1 -> s1 [71, 65535] { R740 += 1 };
  s2 -> s1 [0, 69] { R740 += 1 };
  s2 -> s2 [0, 65535] { R740 += 1, R12 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [70, 70] { R740 += 1 };
  s2 -> s1 [71, 65535] { R740 += 1 };
  s3 -> s3 [0, 65535] { R740 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 69] { R742 += 1, R680 += 1 };
  s0 -> s0 [0, 65535] { R741 += 1, R742 += 1 };
  s0 -> s2 [0, 65535] { R742 += 1, R679 += 1, R680 += 1 };
  s0 -> s1 [71, 65535] { R742 += 1, R680 += 1 };
  s1 -> s1 [0, 69] { R742 += 1, R680 += 1 };
  s1 -> s1 [0, 65535] { R742 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [71, 65535] { R742 += 1, R680 += 1 };
  s2 -> s1 [0, 69] { R742 += 1, R680 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R742 += 1, R679 += 1, R680 += 1 };
  s2 -> s1 [71, 65535] { R742 += 1, R680 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s0 [0, 65535] { R743 += 1, R744 += 1 };
  s0 -> s1 [0, 65535] { R744 += 1, R681 += 1, R682 += 1 };
  s0 -> s2 [0, 65535] { R744 += 1, R682 += 1, R20 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R744 += 1, R681 += 1, R682 += 1 };
  s1 -> s2 [0, 65535] { R744 += 1, R682 += 1, R20 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R744 += 1 };
  s2 -> s2 [0, 65535] { R744 += 1, R682 += 1, R20 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R744 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 70] { R746 += 1, R684 += 1 };
  s0 -> s0 [0, 65535] { R745 += 1, R746 += 1 };
  s0 -> s2 [0, 65535] { R746 += 1, R683 += 1, R684 += 1 };
  s0 -> s1 [75, 65535] { R746 += 1, R684 += 1 };
  s1 -> s1 [0, 70] { R746 += 1, R684 += 1 };
  s1 -> s1 [0, 65535] { R746 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [75, 65535] { R746 += 1, R684 += 1 };
  s2 -> s1 [0, 70] { R746 += 1, R684 += 1 };
  s2 -> s2 [0, 65535] { R746 += 1, R683 += 1, R684 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [75, 65535] { R746 += 1, R684 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R748 += 1, R685 += 1, R686 += 1 };
  s0 -> s2 [0, 65535] { R748 += 1, R686 += 1, R84 += 1 };
  s0 -> s0 [0, 65535] { R747 += 1, R748 += 1 };
  s1 -> s1 [0, 65535] { R748 += 1, R685 += 1, R686 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R748 += 1, R686 += 1, R84 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R748 += 1, R686 += 1, R84 += 1 };
  s2 -> s4 [0, 65535] { R748 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R748 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 74] { R750 += 1, R688 += 1 };
  s0 -> s2 [0, 65535] { R750 += 1, R687 += 1, R688 += 1 };
  s0 -> s0 [0, 65535] { R749 += 1, R750 += 1 };
  s0 -> s3 [0, 65535] { R750 += 1, R688 += 1, R86 += 1 };
  s0 -> s1 [76, 65535] { R750 += 1, R688 += 1 };
  s1 -> s1 [0, 74] { R750 += 1, R688 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R750 += 1 };
  s1 -> s1 [76, 65535] { R750 += 1, R688 += 1 };
  s2 -> s1 [0, 74] { R750 += 1, R688 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R750 += 1, R687 += 1, R688 += 1 };
  s2 -> s3 [0, 65535] { R750 += 1, R688 += 1, R86 += 1 };
  s2 -> s1 [76, 65535] { R750 += 1, R688 += 1 };
  s3 -> s1 [0, 74] { R750 += 1, R688 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R750 += 1, R688 += 1, R86 += 1 };
  s3 -> s5 [0, 65535] { R750 += 1 };
  s3 -> s1 [76, 65535] { R750 += 1, R688 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R750 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 65535] { R752 += 1, R690 += 1 };
  s0 -> s2 [0, 65535] { R752 += 1, R690 += 1, R90 += 1 };
  s0 -> s0 [0, 65535] { R751 += 1, R752 += 1 };
  s0 -> s3 [0, 65535] { R752 += 1, R689 += 1, R690 += 1 };
  s1 -> s1 [0, 65535] { R752 += 1, R690 += 1 };
  s1 -> s5 [0, 65535] { R752 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R752 += 1, R690 += 1 };
  s2 -> s2 [0, 65535] { R752 += 1, R690 += 1, R90 += 1 };
  s2 -> s5 [0, 65535] { R752 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R752 += 1, R690 += 1 };
  s3 -> s2 [0, 65535] { R752 += 1, R690 += 1, R90 += 1 };
  s3 -> s3 [0, 65535] { R752 += 1, R689 += 1, R690 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R752 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s0 [0, 65535] { R753 += 1, R754 += 1 };
  s0 -> s1 [0, 65535] { R754 += 1, R692 += 1, R95 += 1, R96 += 1 };
  s0 -> s2 [0, 65535] { R754 += 1, R692 += 1, R94 += 1, R95 += 1 };
  s0 -> s3 [0, 65535] { R754 += 1, R691 += 1, R692 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R754 += 1, R692 += 1 };
  s1 -> s1 [0, 65535] { R754 += 1, R692 += 1, R95 += 1, R96 += 1 };
  s1 -> s5 [0, 65535] { R754 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R754 += 1, R692 += 1, R95 += 1, R96 += 1 };
  s2 -> s5 [0, 65535] { R754 += 1 };
  s2 -> s2 [0, 65535] { R754 += 1, R692 += 1, R94 += 1, R95 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R754 += 1, R692 += 1, R95 += 1, R96 += 1 };
  s3 -> s2 [0, 65535] { R754 += 1, R692 += 1, R94 += 1, R95 += 1 };
  s3 -> s3 [0, 65535] { R754 += 1, R691 += 1, R692 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R754 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R754 += 1, R692 += 1 };
  s6 -> s5 [0, 65535] { R754 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 74] { R756 += 1, R694 += 1, R101 += 1 };
  s0 -> s2 [0, 65535] { R756 += 1, R693 += 1, R694 += 1 };
  s0 -> s3 [0, 65535] { R756 += 1, R694 += 1, R100 += 1, R101 += 1 };
  s0 -> s0 [0, 65535] { R755 += 1, R756 += 1 };
  s0 -> s4 [0, 65535] { R756 += 1, R694 += 1, R101 += 1, R102 += 1 };
  s0 -> s1 [76, 65535] { R756 += 1, R694 += 1, R101 += 1 };
  s1 -> s1 [0, 74] { R756 += 1, R694 += 1, R101 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s7 [0, 65535] { R756 += 1 };
  s1 -> s1 [0, 65535] { R756 += 1, R694 += 1 };
  s1 -> s1 [76, 65535] { R756 += 1, R694 += 1, R101 += 1 };
  s2 -> s1 [0, 74] { R756 += 1, R694 += 1, R101 += 1 };
  s2 -> s2 [0, 65535] { R756 += 1, R693 += 1, R694 += 1 };
  s2 -> s3 [0, 65535] { R756 += 1, R694 += 1, R100 += 1, R101 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [0, 65535] { R756 += 1, R694 += 1, R101 += 1, R102 += 1 };
  s2 -> s1 [76, 65535] { R756 += 1, R694 += 1, R101 += 1 };
  s3 -> s1 [0, 74] { R756 += 1, R694 += 1, R101 += 1 };
  s3 -> s3 [0, 65535] { R756 += 1, R694 += 1, R100 += 1, R101 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s4 [0, 65535] { R756 += 1, R694 += 1, R101 += 1, R102 += 1 };
  s3 -> s7 [0, 65535] { R756 += 1 };
  s3 -> s1 [76, 65535] { R756 += 1, R694 += 1, R101 += 1 };
  s4 -> s1 [0, 74] { R756 += 1, R694 += 1, R101 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R756 += 1, R694 += 1 };
  s4 -> s4 [0, 65535] { R756 += 1, R694 += 1, R101 += 1, R102 += 1 };
  s4 -> s7 [0, 65535] { R756 += 1 };
  s4 -> s1 [76, 65535] { R756 += 1, R694 += 1, R101 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R756 += 1, R694 += 1 };
  s6 -> s7 [0, 65535] { R756 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R756 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R758 += 1, R696 += 1, R666 += 1 };
  s0 -> s2 [0, 65535] { R758 += 1, R696 += 1 };
  s0 -> s0 [0, 65535] { R757 += 1, R758 += 1 };
  s0 -> s3 [0, 65535] { R758 += 1, R695 += 1, R696 += 1 };
  s1 -> s1 [0, 65535] { R758 += 1, R696 += 1, R666 += 1 };
  s1 -> s5 [0, 65535] { R758 += 1 };
  s1 -> s2 [0, 65535] { R758 += 1, R696 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R758 += 1 };
  s2 -> s2 [0, 65535] { R758 += 1, R696 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R758 += 1, R696 += 1, R666 += 1 };
  s3 -> s2 [0, 65535] { R758 += 1, R696 += 1 };
  s3 -> s3 [0, 65535] { R758 += 1, R695 += 1, R696 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R758 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s0 [0, 65535] { R759 += 1, R760 += 1 };
  s0 -> s1 [0, 65535] { R760 += 1, R698 += 1 };
  s0 -> s2 [0, 65535] { R760 += 1, R698 += 1, R675 += 1 };
  s0 -> s3 [0, 65535] { R760 += 1, R697 += 1, R698 += 1 };
  s1 -> s5 [0, 65535] { R760 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R760 += 1, R698 += 1 };
  s2 -> s5 [0, 65535] { R760 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R760 += 1, R698 += 1 };
  s2 -> s2 [0, 65535] { R760 += 1, R698 += 1, R675 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R760 += 1, R698 += 1 };
  s3 -> s2 [0, 65535] { R760 += 1, R698 += 1, R675 += 1 };
  s3 -> s3 [0, 65535] { R760 += 1, R697 += 1, R698 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R760 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R762 += 1, R718 += 1, R21 += 1 };
  s0 -> s0 [0, 65535] { R761 += 1, R762 += 1 };
  s0 -> s2 [0, 65535] { R762 += 1, R717 += 1, R718 += 1 };
  s1 -> s1 [0, 65535] { R762 += 1, R718 += 1, R21 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R762 += 1 };
  s2 -> s1 [0, 65535] { R762 += 1, R718 += 1, R21 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R762 += 1, R717 += 1, R718 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R762 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 69] { R764 += 1, R720 += 1 };
  s0 -> s2 [0, 65535] { R764 += 1, R719 += 1, R720 += 1 };
  s0 -> s0 [0, 65535] { R763 += 1, R764 += 1 };
  s0 -> s3 [70, 70] { R764 += 1, R720 += 1 };
  s0 -> s4 [70, 70] { R764 += 1, R720 += 1 };
  s0 -> s5 [75, 75] { R764 += 1, R720 += 1 };
  s0 -> s1 [76, 65535] { R764 += 1, R720 += 1 };
  s1 -> s1 [0, 69] { R764 += 1, R720 += 1 };
  s1 -> s3 [70, 70] { R764 += 1, R720 += 1 };
  s1 -> s4 [70, 70] { R764 += 1, R720 += 1 };
  s1 -> s5 [75, 75] { R764 += 1, R720 += 1 };
  s1 -> s1 [76, 65535] { R764 += 1, R720 += 1 };
  s2 -> s1 [0, 69] { R764 += 1, R720 += 1 };
  s2 -> s2 [0, 65535] { R764 += 1, R719 += 1, R720 += 1 };
  s2 -> s3 [70, 70] { R764 += 1, R720 += 1 };
  s2 -> s4 [70, 70] { R764 += 1, R720 += 1 };
  s2 -> s5 [75, 75] { R764 += 1, R720 += 1 };
  s2 -> s1 [76, 65535] { R764 += 1, R720 += 1 };
  s4 -> s4 [0, 70] { R764 += 1, R720 += 1 };
  s4 -> s7 [75, 75] { R764 += 1, R720 += 1 };
  s4 -> s4 [76, 65535] { R764 += 1, R720 += 1 };
  s5 -> s5 [0, 69] { R764 += 1, R720 += 1 };
  s5 -> s5 [0, 65535] { R764 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [70, 70] { R764 += 1, R720 += 1 };
  s5 -> s8 [70, 70] { R764 += 1, R720 += 1 };
  s5 -> s5 [75, 65535] { R764 += 1, R720 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 70] { R764 += 1, R720 += 1 };
  s7 -> s7 [0, 65535] { R764 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [75, 65535] { R764 += 1, R720 += 1 };
  s8 -> s8 [0, 65535] { R764 += 1 };
  s8 -> s6 [0, 65535];
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 69] { R766 += 1, R722 += 1, R83 += 1 };
  s0 -> s0 [0, 65535] { R765 += 1, R766 += 1 };
  s0 -> s2 [0, 65535] { R766 += 1, R721 += 1, R722 += 1 };
  s0 -> s3 [70, 70] { R766 += 1, R722 += 1, R83 += 1 };
  s0 -> s4 [70, 70] { R766 += 1, R722 += 1, R83 += 1 };
  s0 -> s1 [71, 65535] { R766 += 1, R722 += 1, R83 += 1 };
  s1 -> s1 [0, 69] { R766 += 1, R722 += 1, R83 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R766 += 1 };
  s1 -> s3 [70, 70] { R766 += 1, R722 += 1, R83 += 1 };
  s1 -> s4 [70, 70] { R766 += 1, R722 += 1, R83 += 1 };
  s1 -> s1 [71, 65535] { R766 += 1, R722 += 1, R83 += 1 };
  s2 -> s1 [0, 69] { R766 += 1, R722 += 1, R83 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R766 += 1, R721 += 1, R722 += 1 };
  s2 -> s3 [70, 70] { R766 += 1, R722 += 1, R83 += 1 };
  s2 -> s4 [70, 70] { R766 += 1, R722 += 1, R83 += 1 };
  s2 -> s1 [71, 65535] { R766 += 1, R722 += 1, R83 += 1 };
  s3 -> s3 [0, 65535] { R766 += 1, R722 += 1, R83 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R766 += 1 };
  s4 -> s4 [0, 65535] { R766 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R766 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 69] { R768 += 1, R724 += 1, R85 += 1 };
  s0 -> s0 [0, 65535] { R767 += 1, R768 += 1 };
  s0 -> s2 [0, 65535] { R768 += 1, R723 += 1, R724 += 1 };
  s0 -> s3 [70, 70] { R768 += 1, R724 += 1, R85 += 1 };
  s0 -> s4 [70, 70] { R768 += 1, R724 += 1, R85 += 1 };
  s0 -> s1 [71, 65535] { R768 += 1, R724 += 1, R85 += 1 };
  s1 -> s1 [0, 69] { R768 += 1, R724 += 1, R85 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R768 += 1 };
  s1 -> s3 [70, 70] { R768 += 1, R724 += 1, R85 += 1 };
  s1 -> s4 [70, 70] { R768 += 1, R724 += 1, R85 += 1 };
  s1 -> s1 [71, 65535] { R768 += 1, R724 += 1, R85 += 1 };
  s2 -> s1 [0, 69] { R768 += 1, R724 += 1, R85 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R768 += 1, R723 += 1, R724 += 1 };
  s2 -> s3 [70, 70] { R768 += 1, R724 += 1, R85 += 1 };
  s2 -> s4 [70, 70] { R768 += 1, R724 += 1, R85 += 1 };
  s2 -> s1 [71, 65535] { R768 += 1, R724 += 1, R85 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R768 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R768 += 1, R724 += 1, R85 += 1 };
  s4 -> s6 [0, 65535] { R768 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R768 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 69] { R770 += 1, R726 += 1, R87 += 1, R88 += 1 };
  s0 -> s2 [0, 69] { R770 += 1, R726 += 1, R88 += 1 };
  s0 -> s0 [0, 65535] { R769 += 1, R770 += 1 };
  s0 -> s3 [0, 65535] { R770 += 1, R725 += 1, R726 += 1 };
  s0 -> s4 [70, 70] { R770 += 1, R726 += 1, R88 += 1 };
  s0 -> s5 [70, 70] { R770 += 1, R726 += 1, R88 += 1 };
  s0 -> s6 [70, 70] { R770 += 1, R726 += 1, R87 += 1, R88 += 1 };
  s0 -> s7 [70, 70] { R770 += 1, R726 += 1, R87 += 1, R88 += 1 };
  s0 -> s2 [71, 74] { R770 += 1, R726 += 1, R88 += 1 };
  s0 -> s1 [71, 65535] { R770 += 1, R726 += 1, R87 += 1, R88 += 1 };
  s0 -> s8 [75, 75] { R770 += 1, R726 += 1, R88 += 1 };
  s0 -> s2 [76, 65535] { R770 += 1, R726 += 1, R88 += 1 };
  s1 -> s1 [0, 69] { R770 += 1, R726 += 1, R87 += 1, R88 += 1 };
  s1 -> s2 [0, 69] { R770 += 1, R726 += 1, R88 += 1 };
  s1 -> s4 [70, 70] { R770 += 1, R726 += 1, R88 += 1 };
  s1 -> s5 [70, 70] { R770 += 1, R726 += 1, R88 += 1 };
  s1 -> s6 [70, 70] { R770 += 1, R726 += 1, R87 += 1, R88 += 1 };
  s1 -> s7 [70, 70] { R770 += 1, R726 += 1, R87 += 1, R88 += 1 };
  s1 -> s2 [71, 74] { R770 += 1, R726 += 1, R88 += 1 };
  s1 -> s1 [71, 65535] { R770 += 1, R726 += 1, R87 += 1, R88 += 1 };
  s1 -> s8 [75, 75] { R770 += 1, R726 += 1, R88 += 1 };
  s1 -> s2 [76, 65535] { R770 += 1, R726 += 1, R88 += 1 };
  s2 -> s2 [0, 69] { R770 += 1, R726 += 1, R88 += 1 };
  s2 -> s4 [70, 70] { R770 += 1, R726 += 1, R88 += 1 };
  s2 -> s5 [70, 70] { R770 += 1, R726 += 1, R88 += 1 };
  s2 -> s2 [71, 74] { R770 += 1, R726 += 1, R88 += 1 };
  s2 -> s8 [75, 75] { R770 += 1, R726 += 1, R88 += 1 };
  s2 -> s2 [76, 65535] { R770 += 1, R726 += 1, R88 += 1 };
  s3 -> s1 [0, 69] { R770 += 1, R726 += 1, R87 += 1, R88 += 1 };
  s3 -> s2 [0, 69] { R770 += 1, R726 += 1, R88 += 1 };
  s3 -> s3 [0, 65535] { R770 += 1, R725 += 1, R726 += 1 };
  s3 -> s4 [70, 70] { R770 += 1, R726 += 1, R88 += 1 };
  s3 -> s5 [70, 70] { R770 += 1, R726 += 1, R88 += 1 };
  s3 -> s6 [70, 70] { R770 += 1, R726 += 1, R87 += 1, R88 += 1 };
  s3 -> s7 [70, 70] { R770 += 1, R726 += 1, R87 += 1, R88 += 1 };
  s3 -> s2 [71, 74] { R770 += 1, R726 += 1, R88 += 1 };
  s3 -> s1 [71, 65535] { R770 += 1, R726 += 1, R87 += 1, R88 += 1 };
  s3 -> s8 [75, 75] { R770 += 1, R726 += 1, R88 += 1 };
  s3 -> s2 [76, 65535] { R770 += 1, R726 += 1, R88 += 1 };
  s5 -> s5 [0, 74] { R770 += 1, R726 += 1, R88 += 1 };
  s5 -> s10 [75, 75] { R770 += 1, R726 += 1, R88 += 1 };
  s5 -> s5 [76, 65535] { R770 += 1, R726 += 1, R88 += 1 };
  s6 -> s5 [0, 74] { R770 += 1, R726 += 1, R88 += 1 };
  s6 -> s6 [0, 65535] { R770 += 1, R726 += 1, R87 += 1, R88 += 1 };
  s6 -> s10 [75, 75] { R770 += 1, R726 += 1, R88 += 1 };
  s6 -> s5 [76, 65535] { R770 += 1, R726 += 1, R88 += 1 };
  s8 -> s8 [0, 69] { R770 += 1, R726 += 1, R88 += 1 };
  s8 -> s8 [0, 65535] { R770 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [70, 70] { R770 += 1, R726 += 1, R88 += 1 };
  s8 -> s11 [70, 70] { R770 += 1, R726 += 1, R88 += 1 };
  s8 -> s8 [71, 65535] { R770 += 1, R726 += 1, R88 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R770 += 1, R726 += 1, R88 += 1 };
  s10 -> s12 [0, 65535] { R770 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R770 += 1 };
  s11 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R770 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 69] { R772 += 1, R728 += 1, R91 += 1, R92 += 1 };
  s0 -> s0 [0, 65535] { R771 += 1, R772 += 1 };
  s0 -> s2 [0, 65535] { R772 += 1, R727 += 1, R728 += 1 };
  s0 -> s3 [70, 70] { R772 += 1, R728 += 1, R91 += 1, R92 += 1 };
  s0 -> s4 [70, 70] { R772 += 1, R728 += 1, R91 += 1, R92 += 1 };
  s0 -> s1 [71, 65535] { R772 += 1, R728 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 69] { R772 += 1, R728 += 1, R91 += 1, R92 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R772 += 1 };
  s1 -> s3 [70, 70] { R772 += 1, R728 += 1, R91 += 1, R92 += 1 };
  s1 -> s4 [70, 70] { R772 += 1, R728 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [71, 65535] { R772 += 1, R728 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [0, 69] { R772 += 1, R728 += 1, R91 += 1, R92 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R772 += 1, R727 += 1, R728 += 1 };
  s2 -> s3 [70, 70] { R772 += 1, R728 += 1, R91 += 1, R92 += 1 };
  s2 -> s4 [70, 70] { R772 += 1, R728 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [71, 65535] { R772 += 1, R728 += 1, R91 += 1, R92 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R772 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R772 += 1, R728 += 1, R91 += 1, R92 += 1 };
  s4 -> s6 [0, 65535] { R772 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R772 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 69] { R774 += 1, R730 += 1, R97 += 1, R98 += 1 };
  s0 -> s0 [0, 65535] { R773 += 1, R774 += 1 };
  s0 -> s2 [0, 65535] { R774 += 1, R729 += 1, R730 += 1 };
  s0 -> s3 [70, 70] { R774 += 1, R730 += 1, R97 += 1, R98 += 1 };
  s0 -> s4 [70, 70] { R774 += 1, R730 += 1, R97 += 1, R98 += 1 };
  s0 -> s1 [71, 65535] { R774 += 1, R730 += 1, R97 += 1, R98 += 1 };
  s1 -> s1 [0, 69] { R774 += 1, R730 += 1, R97 += 1, R98 += 1 };
  s1 -> s1 [0, 65535] { R774 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [70, 70] { R774 += 1, R730 += 1, R97 += 1, R98 += 1 };
  s1 -> s4 [70, 70] { R774 += 1, R730 += 1, R97 += 1, R98 += 1 };
  s1 -> s1 [71, 65535] { R774 += 1, R730 += 1, R97 += 1, R98 += 1 };
  s2 -> s1 [0, 69] { R774 += 1, R730 += 1, R97 += 1, R98 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R774 += 1, R729 += 1, R730 += 1 };
  s2 -> s3 [70, 70] { R774 += 1, R730 += 1, R97 += 1, R98 += 1 };
  s2 -> s4 [70, 70] { R774 += 1, R730 += 1, R97 += 1, R98 += 1 };
  s2 -> s1 [71, 65535] { R774 += 1, R730 += 1, R97 += 1, R98 += 1 };
  s3 -> s3 [0, 65535] { R774 += 1, R730 += 1, R97 += 1, R98 += 1 };
  s3 -> s6 [0, 65535] { R774 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R774 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R774 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 69] { R776 += 1, R732 += 1, R662 += 1, R663 += 1, R664 += 1 };
  s0 -> s2 [0, 69] { R776 += 1, R732 += 1, R662 += 1, R664 += 1 };
  s0 -> s3 [0, 69] { R776 += 1, R732 += 1, R661 += 1, R662 += 1 };
  s0 -> s4 [0, 65535] { R776 += 1, R731 += 1, R732 += 1 };
  s0 -> s0 [0, 65535] { R775 += 1, R776 += 1 };
  s0 -> s5 [70, 70] { R776 += 1, R732 += 1, R662 += 1, R664 += 1 };
  s0 -> s6 [70, 70] { R776 += 1, R732 += 1, R662 += 1, R664 += 1 };
  s0 -> s7 [70, 70] { R776 += 1, R732 += 1, R661 += 1, R662 += 1 };
  s0 -> s8 [70, 70] { R776 += 1, R732 += 1, R662 += 1, R663 += 1, R664 += 1 };
  s0 -> s9 [70, 70] { R776 += 1, R732 += 1, R662 += 1, R663 += 1, R664 += 1 };
  s0 -> s10 [70, 70] { R776 += 1, R732 += 1, R661 += 1, R662 += 1 };
  s0 -> s2 [71, 74] { R776 += 1, R732 += 1, R662 += 1, R664 += 1 };
  s0 -> s1 [71, 65535] { R776 += 1, R732 += 1, R662 += 1, R663 += 1, R664 += 1 };
  s0 -> s3 [71, 65535] { R776 += 1, R732 += 1, R661 += 1, R662 += 1 };
  s0 -> s11 [75, 75] { R776 += 1, R732 += 1, R662 += 1, R664 += 1 };
  s0 -> s2 [76, 65535] { R776 += 1, R732 += 1, R662 += 1, R664 += 1 };
  s1 -> s1 [0, 69] { R776 += 1, R732 += 1, R662 += 1, R663 += 1, R664 += 1 };
  s1 -> s2 [0, 69] { R776 += 1, R732 += 1, R662 += 1, R664 += 1 };
  s1 -> s5 [70, 70] { R776 += 1, R732 += 1, R662 += 1, R664 += 1 };
  s1 -> s6 [70, 70] { R776 += 1, R732 += 1, R662 += 1, R664 += 1 };
  s1 -> s8 [70, 70] { R776 += 1, R732 += 1, R662 += 1, R663 += 1, R664 += 1 };
  s1 -> s9 [70, 70] { R776 += 1, R732 += 1, R662 += 1, R663 += 1, R664 += 1 };
  s1 -> s2 [71, 74] { R776 += 1, R732 += 1, R662 += 1, R664 += 1 };
  s1 -> s1 [71, 65535] { R776 += 1, R732 += 1, R662 += 1, R663 += 1, R664 += 1 };
  s1 -> s11 [75, 75] { R776 += 1, R732 += 1, R662 += 1, R664 += 1 };
  s1 -> s2 [76, 65535] { R776 += 1, R732 += 1, R662 += 1, R664 += 1 };
  s2 -> s2 [0, 69] { R776 += 1, R732 += 1, R662 += 1, R664 += 1 };
  s2 -> s5 [70, 70] { R776 += 1, R732 += 1, R662 += 1, R664 += 1 };
  s2 -> s6 [70, 70] { R776 += 1, R732 += 1, R662 += 1, R664 += 1 };
  s2 -> s2 [71, 74] { R776 += 1, R732 += 1, R662 += 1, R664 += 1 };
  s2 -> s11 [75, 75] { R776 += 1, R732 += 1, R662 += 1, R664 += 1 };
  s2 -> s2 [76, 65535] { R776 += 1, R732 += 1, R662 += 1, R664 += 1 };
  s3 -> s1 [0, 69] { R776 += 1, R732 += 1, R662 += 1, R663 += 1, R664 += 1 };
  s3 -> s2 [0, 69] { R776 += 1, R732 += 1, R662 += 1, R664 += 1 };
  s3 -> s3 [0, 69] { R776 += 1, R732 += 1, R661 += 1, R662 += 1 };
  s3 -> s5 [70, 70] { R776 += 1, R732 += 1, R662 += 1, R664 += 1 };
  s3 -> s6 [70, 70] { R776 += 1, R732 += 1, R662 += 1, R664 += 1 };
  s3 -> s7 [70, 70] { R776 += 1, R732 += 1, R661 += 1, R662 += 1 };
  s3 -> s8 [70, 70] { R776 += 1, R732 += 1, R662 += 1, R663 += 1, R664 += 1 };
  s3 -> s9 [70, 70] { R776 += 1, R732 += 1, R662 += 1, R663 += 1, R664 += 1 };
  s3 -> s10 [70, 70] { R776 += 1, R732 += 1, R661 += 1, R662 += 1 };
  s3 -> s2 [71, 74] { R776 += 1, R732 += 1, R662 += 1, R664 += 1 };
  s3 -> s1 [71, 65535] { R776 += 1, R732 += 1, R662 += 1, R663 += 1, R664 += 1 };
  s3 -> s3 [71, 65535] { R776 += 1, R732 += 1, R661 += 1, R662 += 1 };
  s3 -> s11 [75, 75] { R776 += 1, R732 += 1, R662 += 1, R664 += 1 };
  s3 -> s2 [76, 65535] { R776 += 1, R732 += 1, R662 += 1, R664 += 1 };
  s4 -> s1 [0, 69] { R776 += 1, R732 += 1, R662 += 1, R663 += 1, R664 += 1 };
  s4 -> s2 [0, 69] { R776 += 1, R732 += 1, R662 += 1, R664 += 1 };
  s4 -> s3 [0, 69] { R776 += 1, R732 += 1, R661 += 1, R662 += 1 };
  s4 -> s4 [0, 65535] { R776 += 1, R731 += 1, R732 += 1 };
  s4 -> s5 [70, 70] { R776 += 1, R732 += 1, R662 += 1, R664 += 1 };
  s4 -> s6 [70, 70] { R776 += 1, R732 += 1, R662 += 1, R664 += 1 };
  s4 -> s7 [70, 70] { R776 += 1, R732 += 1, R661 += 1, R662 += 1 };
  s4 -> s8 [70, 70] { R776 += 1, R732 += 1, R662 += 1, R663 += 1, R664 += 1 };
  s4 -> s9 [70, 70] { R776 += 1, R732 += 1, R662 += 1, R663 += 1, R664 += 1 };
  s4 -> s10 [70, 70] { R776 += 1, R732 += 1, R661 += 1, R662 += 1 };
  s4 -> s2 [71, 74] { R776 += 1, R732 += 1, R662 += 1, R664 += 1 };
  s4 -> s1 [71, 65535] { R776 += 1, R732 += 1, R662 += 1, R663 += 1, R664 += 1 };
  s4 -> s3 [71, 65535] { R776 += 1, R732 += 1, R661 += 1, R662 += 1 };
  s4 -> s11 [75, 75] { R776 += 1, R732 += 1, R662 += 1, R664 += 1 };
  s4 -> s2 [76, 65535] { R776 += 1, R732 += 1, R662 += 1, R664 += 1 };
  s5 -> s5 [0, 74] { R776 += 1, R732 += 1, R662 += 1, R664 += 1 };
  s5 -> s15 [75, 75] { R776 += 1, R732 += 1, R662 += 1, R664 += 1 };
  s5 -> s5 [76, 65535] { R776 += 1, R732 += 1, R662 += 1, R664 += 1 };
  s9 -> s5 [0, 74] { R776 += 1, R732 += 1, R662 += 1, R664 += 1 };
  s9 -> s9 [0, 65535] { R776 += 1, R732 += 1, R662 += 1, R663 += 1, R664 += 1 };
  s9 -> s15 [75, 75] { R776 += 1, R732 += 1, R662 += 1, R664 += 1 };
  s9 -> s5 [76, 65535] { R776 += 1, R732 += 1, R662 += 1, R664 += 1 };
  s10 -> s5 [0, 74] { R776 += 1, R732 += 1, R662 += 1, R664 += 1 };
  s10 -> s9 [0, 65535] { R776 += 1, R732 += 1, R662 += 1, R663 += 1, R664 += 1 };
  s10 -> s10 [0, 65535] { R776 += 1, R732 += 1, R661 += 1, R662 += 1 };
  s10 -> s15 [75, 75] { R776 += 1, R732 += 1, R662 += 1, R664 += 1 };
  s10 -> s5 [76, 65535] { R776 += 1, R732 += 1, R662 += 1, R664 += 1 };
  s11 -> s11 [0, 69] { R776 += 1, R732 += 1, R662 += 1, R664 += 1 };
  s11 -> s12 [0, 69] { R776 += 1, R732 += 1, R662 += 1 };
  s11 -> s13 [70, 70] { R776 += 1, R732 += 1, R662 += 1, R664 += 1 };
  s11 -> s14 [70, 70] { R776 += 1, R732 += 1, R662 += 1 };
  s11 -> s15 [70, 70] { R776 += 1, R732 += 1, R662 += 1, R664 += 1 };
  s11 -> s16 [70, 70] { R776 += 1, R732 += 1, R662 += 1 };
  s11 -> s11 [71, 65535] { R776 += 1, R732 += 1, R662 += 1, R664 += 1 };
  s11 -> s12 [71, 65535] { R776 += 1, R732 += 1, R662 += 1 };
  s12 -> s12 [0, 69] { R776 += 1, R732 += 1, R662 += 1 };
  s12 -> s17 [0, 65535];
  s12 -> s12 [0, 65535] { R776 += 1 };
  s12 -> s14 [70, 70] { R776 += 1, R732 += 1, R662 += 1 };
  s12 -> s16 [70, 70] { R776 += 1, R732 += 1, R662 += 1 };
  s12 -> s12 [71, 65535] { R776 += 1, R732 += 1, R662 += 1 };
  s14 -> s17 [0, 65535];
  s14 -> s14 [0, 65535] { R776 += 1 };
  s15 -> s15 [0, 65535] { R776 += 1, R732 += 1, R662 += 1, R664 += 1 };
  s15 -> s16 [0, 65535] { R776 += 1, R732 += 1, R662 += 1 };
  s16 -> s17 [0, 65535];
  s16 -> s18 [0, 65535] { R776 += 1 };
  s16 -> s16 [0, 65535] { R776 += 1, R732 += 1, R662 += 1 };
  s17 -> s17 [0, 65535];
  s18 -> s17 [0, 65535];
  s18 -> s18 [0, 65535] { R776 += 1 };
  accepting s17, s16, s12, s14, s18;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 69] { R778 += 1, R734 += 1, R670 += 1, R671 += 1, R672 += 1 };
  s0 -> s2 [0, 69] { R778 += 1, R734 += 1, R669 += 1, R670 += 1 };
  s0 -> s3 [0, 69] { R778 += 1, R734 += 1, R670 += 1, R672 += 1, R673 += 1 };
  s0 -> s4 [0, 65535] { R778 += 1, R733 += 1, R734 += 1 };
  s0 -> s0 [0, 65535] { R777 += 1, R778 += 1 };
  s0 -> s5 [70, 70] { R778 += 1, R734 += 1, R669 += 1, R670 += 1 };
  s0 -> s6 [70, 70] { R778 += 1, R734 += 1, R670 += 1, R672 += 1, R673 += 1 };
  s0 -> s7 [70, 70] { R778 += 1, R734 += 1, R670 += 1, R671 += 1, R672 += 1 };
  s0 -> s8 [70, 70] { R778 += 1, R734 += 1, R669 += 1, R670 += 1 };
  s0 -> s9 [70, 70] { R778 += 1, R734 += 1, R670 += 1, R671 += 1, R672 += 1 };
  s0 -> s10 [70, 70] { R778 += 1, R734 += 1, R670 += 1, R672 += 1, R673 += 1 };
  s0 -> s1 [71, 65535] { R778 += 1, R734 += 1, R670 += 1, R671 += 1, R672 += 1 };
  s0 -> s2 [71, 65535] { R778 += 1, R734 += 1, R669 += 1, R670 += 1 };
  s0 -> s3 [71, 65535] { R778 += 1, R734 += 1, R670 += 1, R672 += 1, R673 += 1 };
  s1 -> s1 [0, 69] { R778 += 1, R734 += 1, R670 += 1, R671 += 1, R672 += 1 };
  s1 -> s3 [0, 69] { R778 += 1, R734 += 1, R670 += 1, R672 += 1, R673 += 1 };
  s1 -> s6 [70, 70] { R778 += 1, R734 += 1, R670 += 1, R672 += 1, R673 += 1 };
  s1 -> s7 [70, 70] { R778 += 1, R734 += 1, R670 += 1, R671 += 1, R672 += 1 };
  s1 -> s9 [70, 70] { R778 += 1, R734 += 1, R670 += 1, R671 += 1, R672 += 1 };
  s1 -> s10 [70, 70] { R778 += 1, R734 += 1, R670 += 1, R672 += 1, R673 += 1 };
  s1 -> s1 [71, 65535] { R778 += 1, R734 += 1, R670 += 1, R671 += 1, R672 += 1 };
  s1 -> s3 [71, 65535] { R778 += 1, R734 += 1, R670 += 1, R672 += 1, R673 += 1 };
  s2 -> s1 [0, 69] { R778 += 1, R734 += 1, R670 += 1, R671 += 1, R672 += 1 };
  s2 -> s2 [0, 69] { R778 += 1, R734 += 1, R669 += 1, R670 += 1 };
  s2 -> s3 [0, 69] { R778 += 1, R734 += 1, R670 += 1, R672 += 1, R673 += 1 };
  s2 -> s5 [70, 70] { R778 += 1, R734 += 1, R669 += 1, R670 += 1 };
  s2 -> s6 [70, 70] { R778 += 1, R734 += 1, R670 += 1, R672 += 1, R673 += 1 };
  s2 -> s7 [70, 70] { R778 += 1, R734 += 1, R670 += 1, R671 += 1, R672 += 1 };
  s2 -> s8 [70, 70] { R778 += 1, R734 += 1, R669 += 1, R670 += 1 };
  s2 -> s9 [70, 70] { R778 += 1, R734 += 1, R670 += 1, R671 += 1, R672 += 1 };
  s2 -> s10 [70, 70] { R778 += 1, R734 += 1, R670 += 1, R672 += 1, R673 += 1 };
  s2 -> s1 [71, 65535] { R778 += 1, R734 += 1, R670 += 1, R671 += 1, R672 += 1 };
  s2 -> s2 [71, 65535] { R778 += 1, R734 += 1, R669 += 1, R670 += 1 };
  s2 -> s3 [71, 65535] { R778 += 1, R734 += 1, R670 += 1, R672 += 1, R673 += 1 };
  s3 -> s14 [0, 69] { R778 += 1, R734 += 1, R670 += 1 };
  s3 -> s3 [0, 69] { R778 += 1, R734 += 1, R670 += 1, R672 += 1, R673 += 1 };
  s3 -> s15 [70, 70] { R778 += 1, R734 += 1, R670 += 1 };
  s3 -> s6 [70, 70] { R778 += 1, R734 += 1, R670 += 1, R672 += 1, R673 += 1 };
  s3 -> s10 [70, 70] { R778 += 1, R734 += 1, R670 += 1, R672 += 1, R673 += 1 };
  s3 -> s11 [70, 70] { R778 += 1, R734 += 1, R670 += 1 };
  s3 -> s14 [71, 65535] { R778 += 1, R734 += 1, R670 += 1 };
  s3 -> s3 [71, 65535] { R778 += 1, R734 += 1, R670 += 1, R672 += 1, R673 += 1 };
  s4 -> s1 [0, 69] { R778 += 1, R734 += 1, R670 += 1, R671 += 1, R672 += 1 };
  s4 -> s2 [0, 69] { R778 += 1, R734 += 1, R669 += 1, R670 += 1 };
  s4 -> s3 [0, 69] { R778 += 1, R734 += 1, R670 += 1, R672 += 1, R673 += 1 };
  s4 -> s4 [0, 65535] { R778 += 1, R733 += 1, R734 += 1 };
  s4 -> s5 [70, 70] { R778 += 1, R734 += 1, R669 += 1, R670 += 1 };
  s4 -> s6 [70, 70] { R778 += 1, R734 += 1, R670 += 1, R672 += 1, R673 += 1 };
  s4 -> s7 [70, 70] { R778 += 1, R734 += 1, R670 += 1, R671 += 1, R672 += 1 };
  s4 -> s8 [70, 70] { R778 += 1, R734 += 1, R669 += 1, R670 += 1 };
  s4 -> s9 [70, 70] { R778 += 1, R734 += 1, R670 += 1, R671 += 1, R672 += 1 };
  s4 -> s10 [70, 70] { R778 += 1, R734 += 1, R670 += 1, R672 += 1, R673 += 1 };
  s4 -> s1 [71, 65535] { R778 += 1, R734 += 1, R670 += 1, R671 += 1, R672 += 1 };
  s4 -> s2 [71, 65535] { R778 += 1, R734 += 1, R669 += 1, R670 += 1 };
  s4 -> s3 [71, 65535] { R778 += 1, R734 += 1, R670 += 1, R672 += 1, R673 += 1 };
  s5 -> s5 [0, 65535] { R778 += 1, R734 += 1, R669 += 1, R670 += 1 };
  s5 -> s6 [0, 65535] { R778 += 1, R734 += 1, R670 += 1, R672 += 1, R673 += 1 };
  s5 -> s7 [0, 65535] { R778 += 1, R734 += 1, R670 += 1, R671 += 1, R672 += 1 };
  s6 -> s6 [0, 65535] { R778 += 1, R734 += 1, R670 += 1, R672 += 1, R673 += 1 };
  s6 -> s11 [0, 65535] { R778 += 1, R734 += 1, R670 += 1 };
  s7 -> s6 [0, 65535] { R778 += 1, R734 += 1, R670 += 1, R672 += 1, R673 += 1 };
  s7 -> s7 [0, 65535] { R778 += 1, R734 += 1, R670 += 1, R671 += 1, R672 += 1 };
  s11 -> s12 [0, 65535];
  s11 -> s13 [0, 65535] { R778 += 1 };
  s11 -> s11 [0, 65535] { R778 += 1, R734 += 1, R670 += 1 };
  s12 -> s12 [0, 65535];
  s13 -> s12 [0, 65535];
  s13 -> s13 [0, 65535] { R778 += 1 };
  s14 -> s14 [0, 69] { R778 += 1, R734 += 1, R670 += 1 };
  s14 -> s14 [0, 65535] { R778 += 1 };
  s14 -> s12 [0, 65535];
  s14 -> s15 [70, 70] { R778 += 1, R734 += 1, R670 += 1 };
  s14 -> s11 [70, 70] { R778 += 1, R734 += 1, R670 += 1 };
  s14 -> s14 [71, 65535] { R778 += 1, R734 += 1, R670 += 1 };
  s15 -> s15 [0, 65535] { R778 += 1 };
  s15 -> s12 [0, 65535];
  accepting s12, s13, s14, s15, s11;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [102, 102];
  accepting s1;
};
};
constraint R3 = R778 && R23 - R778 = -1 && R24 = R778 && R25 - R778 = -1 && R26 = R778 && R27 = 0 && R28 = 1 && R29 = 0 && R30 = 1 && R45 + R84 + R83 + -1*R666 + -1*R662 - R66 = 0 && R49 + R89 + R87 = 0 && R50 + R90 + R88 + -1*R666 + -1*R662 - R66 = 0 && R55 + R96 + R93 + -1*R668 + -1*R664 - R68 = 0 && R65 + R665 + R661 = 0 && R67 + R667 + R663 = 0 && R719 = 0 && R720 = 0 && R725 = 0 && R726 = 0 && R731 = 0 && R732 = 0 && R733 = 0 && R734 = 0 && R735 = 0 && R736 = R778 && R737 = 0 && R738 = R778 && R739 = 0 && R740 = R778 && R741 = 0 && R742 = R778 && R743 = 0 && R744 = R778 && R745 = 0 && R746 = R778 && R747 = 0 && R748 = R778 && R749 = 0 && R750 = R778 && R751 = 0 && R752 = R778 && R753 = 0 && R754 = R778 && R755 = 0 && R756 = R778 && R757 = 0 && R758 = R778 && R759 = 0 && R760 = R778 && R761 = 0 && R762 = R778 && R763 = 0 && R764 = R778 && R765 = 0 && R766 = R778 && R767 = 0 && R768 = R778 && R769 = 0 && R770 = R778 && R771 = 0 && R772 = R778 && R773 = 0 && R774 = R778 && R775 = 0 && R776 = R778 && R777 = 0 && -1 < R2 && R12 < 1 && R15 < 1 && R16 < 1 && R47 + R86 + R85 < 1 && R61 + R102 + R99 < 1 && -1*R666 + -1*R662 - R66 < 1 && -1*R668 + -1*R664 - R68 < 1 && 0 < R778 && (R2 != 0 || R20 = 0 || (R679 = 0 && R680 = 0)) && (R2 != 0 || R20 = 0 || (R681 = 0 && R682 = 0)) && (R2 != 0 || R20 = 0 || (R683 = 0 && R684 = 0)) && (R2 != 0 || R20 = 0 || (R685 = 0 && R686 = 0)) && (R2 != 0 || R20 = 0 || (R687 = 0 && R688 = 0)) && (R2 != 0 || R20 = 0 || (R689 = 0 && R690 = 0)) && (R2 != 0 || R20 = 0 || (R691 = 0 && R692 = 0)) && (R2 != 0 || R20 = 0 || (R693 = 0 && R694 = 0)) && (R2 != 0 || R20 = 0 || (R695 = 0 && R696 = 0)) && (R2 != 0 || R20 = 0 || (R697 = 0 && R698 = 0)) && (R53 + R94 + R91 != 0 || R54 + R95 + R92 + -1*R666 + -1*R662 - R66 = 0 || R66 + R666 + R662 < 1) && (R59 + R100 + R97 != 0 || R60 + R101 + R98 + -1*R666 + -1*R662 - R66 = 0 || R66 + R666 + R662 < 1) && (R66 + R666 + R662 != 0 || ((R53 + R94 + R91 != 0 || R54 + R95 + R92 = 0 || R68 + R668 + R664 < 1) && (R53 + R94 + R91 = 0 || R68 + R668 + R664 < 1))) && (R66 + R666 + R662 != 0 || ((R59 + R100 + R97 != 0 || R60 + R101 + R98 = 0 || R68 + R668 + R664 < 1) && (R59 + R100 + R97 = 0 || R68 + R668 + R664 < 1))) && (R66 + R666 + R662 != 0 || ((R73 + R674 + R669 != 0 || R74 + R675 + R670 = 0 || R68 + R668 + R664 < 1) && (R73 + R674 + R669 = 0 || R68 + R668 + R664 < 1))) && (R68 + R668 + R664 != 0 || R77 + R678 + R673 = 0 || (R75 + R676 + R671 = 0 && R76 + R677 + R672 = 0)) && (R73 + R674 + R669 != 0 || R66 + R666 + R662 + -1*R675 + -1*R670 - R74 = 0 || R66 + R666 + R662 < 1) && (R75 + R676 + R671 != 0 || R68 + R668 + R664 + -1*R677 + -1*R672 - R76 = 0 || R68 + R668 + R664 < 1) && (R679 != 0 || R2 = R680 || R2 < 1) && (R681 != 0 || R2 = R682 || R2 < 1) && (R683 != 0 || R2 = R684 || R2 < 1) && (R685 != 0 || R2 = R686 || R2 < 1) && (R687 != 0 || R2 = R688 || R2 < 1) && (R689 != 0 || R2 = R690 || R2 < 1) && (R691 != 0 || R2 = R692 || R2 < 1) && (R693 != 0 || R2 = R694 || R2 < 1) && (R695 != 0 || R2 = R696 || R2 < 1) && (R697 != 0 || R2 = R698 || R2 < 1) && (R21 = 0 || (R717 = 0 && R718 = 0)) && (R21 = 0 || (R721 = 0 && R722 = 0)) && (R21 = 0 || (R723 = 0 && R724 = 0)) && (R21 = 0 || (R727 = 0 && R728 = 0)) && (R21 = 0 || (R729 = 0 && R730 = 0)) && (R22 = 0 || (R699 = 0 && R700 = 0)) && (R22 = 0 || (R701 = 0 && R702 = 0)) && (R22 = 0 || (R703 = 0 && R704 = 0)) && (R22 = 0 || (R705 = 0 && R706 = 0)) && (R22 = 0 || (R707 = 0 && R708 = 0)) && (R22 = 0 || (R709 = 0 && R710 = 0)) && (R22 = 0 || (R711 = 0 && R712 = 0)) && (R22 = 0 || (R713 = 0 && R714 = 0)) && (R22 = 0 || (R715 = 0 && R716 = 0)) && (R53 + R94 + R91 = 0 || R66 + R666 + R662 < 1) && (R59 + R100 + R97 = 0 || R66 + R666 + R662 < 1) && (R73 + R674 + R669 = 0 || R66 + R666 + R662 < 1) && (R75 + R676 + R671 = 0 || R68 + R668 + R664 < 1) && (R679 = 0 || R2 < 1) && (R681 = 0 || R2 < 1) && (R683 = 0 || R2 < 1) && (R685 = 0 || R2 < 1) && (R687 = 0 || R2 < 1) && (R689 = 0 || R2 < 1) && (R691 = 0 || R2 < 1) && (R693 = 0 || R2 < 1) && (R695 = 0 || R2 < 1) && (R697 = 0 || R2 < 1);
// End of Parikh automata intersection problem
