// Parikh automata intersection problem, generated by OSTRICH+
counter int R100, R101, R102, R12, R15, R16, R2, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R4, R45, R47, R49, R5, R50, R53, R54, R55, R59, R60, R61, R65, R66, R661, R662, R663, R664, R665, R666, R667, R668, R67, R68, R73, R74, R75, R76, R77, R83, R84, R85, R86, R87, R88, R889, R89, R890, R891, R892, R893, R894, R895, R896, R897, R898, R899, R90, R900, R901, R902, R903, R904, R905, R906, R907, R908, R909, R91, R910, R911, R912, R913, R914, R915, R916, R917, R918, R919, R92, R920, R921, R922, R923, R924, R925, R926, R927, R928, R929, R93, R930, R931, R932, R933, R934, R935, R936, R937, R938, R939, R94, R940, R941, R942, R943, R944, R945, R946, R947, R948, R949, R95, R950, R951, R952, R953, R954, R955, R956, R957, R958, R959, R96, R960, R961, R962, R963, R964, R965, R966, R967, R968, R969, R97, R970, R971, R972, R973, R974, R975, R976, R977, R978, R979, R98, R980, R981, R982, R983, R984, R985, R986, R987, R988, R989, R99, R990, R991, R992, R993, R994, R995, R996, R997, R998;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [70, 70];
  s0 -> s0 [71, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [70, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R15 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 69];
  s0 -> s0 [0, 65535] { R16 += 1 };
  s0 -> s2 [70, 70];
  s0 -> s1 [71, 65535];
  s1 -> s1 [0, 69];
  s1 -> s2 [70, 70];
  s1 -> s1 [71, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R24 += 1 };
  s0 -> s0 [0, 65535] { R23 += 1, R24 += 1 };
  s0 -> s2 [9, 13] { R24 += 1 };
  s0 -> s1 [14, 31] { R24 += 1 };
  s0 -> s2 [32, 32] { R24 += 1 };
  s0 -> s1 [33, 65535] { R24 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R24 += 1 };
  s2 -> s1 [0, 65535] { R24 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R25 += 1, R26 += 1 };
  s1 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R28 += 1 };
  s0 -> s0 [0, 65535] { R27 += 1, R28 += 1 };
  s0 -> s2 [9, 13] { R28 += 1 };
  s0 -> s1 [14, 31] { R28 += 1 };
  s0 -> s2 [32, 32] { R28 += 1 };
  s0 -> s1 [33, 65535] { R28 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R28 += 1 };
  s2 -> s1 [0, 65535] { R28 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R29 += 1, R30 += 1 };
  s1 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R920 += 1, R22 += 1 };
  s0 -> s0 [0, 65535] { R919 += 1, R920 += 1 };
  s1 -> s1 [0, 65535] { R920 += 1, R22 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 69] { R922 += 1 };
  s0 -> s0 [0, 65535] { R921 += 1, R922 += 1 };
  s0 -> s2 [70, 70] { R922 += 1 };
  s0 -> s3 [70, 70] { R922 += 1 };
  s0 -> s1 [76, 65535] { R922 += 1 };
  s1 -> s1 [0, 69] { R922 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R922 += 1 };
  s1 -> s3 [70, 70] { R922 += 1 };
  s1 -> s1 [76, 65535] { R922 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 70] { R922 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [76, 65535] { R922 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 69] { R924 += 1, R45 += 1 };
  s0 -> s0 [0, 65535] { R923 += 1, R924 += 1 };
  s0 -> s2 [70, 70] { R924 += 1, R45 += 1 };
  s0 -> s3 [70, 70] { R924 += 1, R45 += 1 };
  s0 -> s1 [71, 65535] { R924 += 1, R45 += 1 };
  s1 -> s1 [0, 69] { R924 += 1, R45 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R924 += 1, R45 += 1 };
  s1 -> s3 [70, 70] { R924 += 1, R45 += 1 };
  s1 -> s1 [71, 65535] { R924 += 1, R45 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R924 += 1, R45 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 69] { R926 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R925 += 1, R926 += 1 };
  s0 -> s2 [70, 70] { R926 += 1, R47 += 1 };
  s0 -> s3 [70, 70] { R926 += 1, R47 += 1 };
  s0 -> s1 [71, 65535] { R926 += 1, R47 += 1 };
  s1 -> s1 [0, 69] { R926 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R926 += 1, R47 += 1 };
  s1 -> s3 [70, 70] { R926 += 1, R47 += 1 };
  s1 -> s1 [71, 65535] { R926 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R926 += 1, R47 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 69] { R928 += 1, R49 += 1, R50 += 1 };
  s0 -> s0 [0, 65535] { R927 += 1, R928 += 1 };
  s0 -> s2 [70, 70] { R928 += 1, R49 += 1, R50 += 1 };
  s0 -> s3 [70, 70] { R928 += 1, R49 += 1, R50 += 1 };
  s0 -> s1 [71, 65535] { R928 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 69] { R928 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R928 += 1, R49 += 1, R50 += 1 };
  s1 -> s3 [70, 70] { R928 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [71, 65535] { R928 += 1, R49 += 1, R50 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R928 += 1, R49 += 1, R50 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 69] { R930 += 1, R53 += 1, R54 += 1 };
  s0 -> s0 [0, 65535] { R929 += 1, R930 += 1 };
  s0 -> s2 [70, 70] { R930 += 1, R53 += 1, R54 += 1 };
  s0 -> s3 [70, 70] { R930 += 1, R53 += 1, R54 += 1 };
  s0 -> s1 [71, 65535] { R930 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 69] { R930 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R930 += 1, R53 += 1, R54 += 1 };
  s1 -> s3 [70, 70] { R930 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [71, 65535] { R930 += 1, R53 += 1, R54 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R930 += 1, R53 += 1, R54 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 69] { R932 += 1, R59 += 1, R60 += 1 };
  s0 -> s0 [0, 65535] { R931 += 1, R932 += 1 };
  s0 -> s2 [70, 70] { R932 += 1, R59 += 1, R60 += 1 };
  s0 -> s3 [70, 70] { R932 += 1, R59 += 1, R60 += 1 };
  s0 -> s1 [71, 65535] { R932 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 69] { R932 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R932 += 1, R59 += 1, R60 += 1 };
  s1 -> s3 [70, 70] { R932 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [71, 65535] { R932 += 1, R59 += 1, R60 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R932 += 1, R59 += 1, R60 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 69] { R934 += 1, R65 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R933 += 1, R934 += 1 };
  s0 -> s2 [70, 70] { R934 += 1, R65 += 1, R66 += 1 };
  s0 -> s3 [70, 70] { R934 += 1, R65 += 1, R66 += 1 };
  s0 -> s1 [71, 65535] { R934 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 69] { R934 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R934 += 1, R65 += 1, R66 += 1 };
  s1 -> s3 [70, 70] { R934 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [71, 65535] { R934 += 1, R65 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R934 += 1, R65 += 1, R66 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 69] { R936 += 1, R73 += 1, R74 += 1 };
  s0 -> s0 [0, 65535] { R935 += 1, R936 += 1 };
  s0 -> s2 [70, 70] { R936 += 1, R73 += 1, R74 += 1 };
  s0 -> s3 [70, 70] { R936 += 1, R73 += 1, R74 += 1 };
  s0 -> s1 [71, 65535] { R936 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 69] { R936 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R936 += 1, R73 += 1, R74 += 1 };
  s1 -> s3 [70, 70] { R936 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [71, 65535] { R936 += 1, R73 += 1, R74 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R936 += 1, R73 += 1, R74 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 69] { R956 += 1 };
  s0 -> s0 [0, 65535] { R955 += 1, R956 += 1 };
  s0 -> s2 [70, 70] { R956 += 1 };
  s0 -> s1 [71, 65535] { R956 += 1 };
  s1 -> s1 [0, 69] { R956 += 1 };
  s1 -> s2 [70, 70] { R956 += 1 };
  s1 -> s1 [71, 65535] { R956 += 1 };
  s2 -> s2 [0, 65535] { R956 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R958 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R957 += 1, R958 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R958 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 69] { R960 += 1 };
  s0 -> s2 [0, 65535] { R960 += 1, R12 += 1 };
  s0 -> s0 [0, 65535] { R959 += 1, R960 += 1 };
  s0 -> s3 [70, 70] { R960 += 1 };
  s0 -> s1 [71, 65535] { R960 += 1 };
  s1 -> s1 [0, 69] { R960 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [70, 70] { R960 += 1 };
  s1 -> s1 [71, 65535] { R960 += 1 };
  s2 -> s1 [0, 69] { R960 += 1 };
  s2 -> s2 [0, 65535] { R960 += 1, R12 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [70, 70] { R960 += 1 };
  s2 -> s1 [71, 65535] { R960 += 1 };
  s3 -> s3 [0, 65535] { R960 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 69] { R962 += 1, R900 += 1 };
  s0 -> s2 [0, 65535] { R962 += 1, R899 += 1, R900 += 1 };
  s0 -> s0 [0, 65535] { R961 += 1, R962 += 1 };
  s0 -> s1 [71, 65535] { R962 += 1, R900 += 1 };
  s1 -> s1 [0, 69] { R962 += 1, R900 += 1 };
  s1 -> s1 [0, 65535] { R962 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [71, 65535] { R962 += 1, R900 += 1 };
  s2 -> s1 [0, 69] { R962 += 1, R900 += 1 };
  s2 -> s2 [0, 65535] { R962 += 1, R899 += 1, R900 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [71, 65535] { R962 += 1, R900 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R964 += 1, R901 += 1, R902 += 1 };
  s0 -> s0 [0, 65535] { R963 += 1, R964 += 1 };
  s0 -> s2 [0, 65535] { R964 += 1, R902 += 1, R20 += 1 };
  s1 -> s1 [0, 65535] { R964 += 1, R901 += 1, R902 += 1 };
  s1 -> s2 [0, 65535] { R964 += 1, R902 += 1, R20 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R964 += 1 };
  s2 -> s2 [0, 65535] { R964 += 1, R902 += 1, R20 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R964 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 70] { R966 += 1, R904 += 1 };
  s0 -> s0 [0, 65535] { R965 += 1, R966 += 1 };
  s0 -> s2 [0, 65535] { R966 += 1, R903 += 1, R904 += 1 };
  s0 -> s1 [75, 65535] { R966 += 1, R904 += 1 };
  s1 -> s1 [0, 70] { R966 += 1, R904 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R966 += 1 };
  s1 -> s1 [75, 65535] { R966 += 1, R904 += 1 };
  s2 -> s1 [0, 70] { R966 += 1, R904 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R966 += 1, R903 += 1, R904 += 1 };
  s2 -> s1 [75, 65535] { R966 += 1, R904 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R968 += 1, R905 += 1, R906 += 1 };
  s0 -> s2 [0, 65535] { R968 += 1, R906 += 1, R84 += 1 };
  s0 -> s0 [0, 65535] { R967 += 1, R968 += 1 };
  s1 -> s1 [0, 65535] { R968 += 1, R905 += 1, R906 += 1 };
  s1 -> s2 [0, 65535] { R968 += 1, R906 += 1, R84 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R968 += 1, R906 += 1, R84 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R968 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R968 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 74] { R970 += 1, R908 += 1 };
  s0 -> s2 [0, 65535] { R970 += 1, R908 += 1, R86 += 1 };
  s0 -> s0 [0, 65535] { R969 += 1, R970 += 1 };
  s0 -> s3 [0, 65535] { R970 += 1, R907 += 1, R908 += 1 };
  s0 -> s1 [76, 65535] { R970 += 1, R908 += 1 };
  s1 -> s1 [0, 74] { R970 += 1, R908 += 1 };
  s1 -> s1 [0, 65535] { R970 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [76, 65535] { R970 += 1, R908 += 1 };
  s2 -> s1 [0, 74] { R970 += 1, R908 += 1 };
  s2 -> s2 [0, 65535] { R970 += 1, R908 += 1, R86 += 1 };
  s2 -> s5 [0, 65535] { R970 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [76, 65535] { R970 += 1, R908 += 1 };
  s3 -> s1 [0, 74] { R970 += 1, R908 += 1 };
  s3 -> s2 [0, 65535] { R970 += 1, R908 += 1, R86 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R970 += 1, R907 += 1, R908 += 1 };
  s3 -> s1 [76, 65535] { R970 += 1, R908 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R970 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 65535] { R972 += 1, R909 += 1, R910 += 1 };
  s0 -> s2 [0, 65535] { R972 += 1, R910 += 1 };
  s0 -> s3 [0, 65535] { R972 += 1, R910 += 1, R90 += 1 };
  s0 -> s0 [0, 65535] { R971 += 1, R972 += 1 };
  s1 -> s1 [0, 65535] { R972 += 1, R909 += 1, R910 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R972 += 1, R910 += 1 };
  s1 -> s3 [0, 65535] { R972 += 1, R910 += 1, R90 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R972 += 1, R910 += 1 };
  s2 -> s5 [0, 65535] { R972 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R972 += 1, R910 += 1 };
  s3 -> s5 [0, 65535] { R972 += 1 };
  s3 -> s3 [0, 65535] { R972 += 1, R910 += 1, R90 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R972 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R974 += 1, R912 += 1, R95 += 1, R96 += 1 };
  s0 -> s2 [0, 65535] { R974 += 1, R912 += 1, R94 += 1, R95 += 1 };
  s0 -> s3 [0, 65535] { R974 += 1, R911 += 1, R912 += 1 };
  s0 -> s0 [0, 65535] { R973 += 1, R974 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R974 += 1, R912 += 1, R95 += 1, R96 += 1 };
  s1 -> s5 [0, 65535] { R974 += 1 };
  s1 -> s6 [0, 65535] { R974 += 1, R912 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R974 += 1, R912 += 1, R95 += 1, R96 += 1 };
  s2 -> s5 [0, 65535] { R974 += 1 };
  s2 -> s2 [0, 65535] { R974 += 1, R912 += 1, R94 += 1, R95 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R974 += 1, R912 += 1, R95 += 1, R96 += 1 };
  s3 -> s2 [0, 65535] { R974 += 1, R912 += 1, R94 += 1, R95 += 1 };
  s3 -> s3 [0, 65535] { R974 += 1, R911 += 1, R912 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R974 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R974 += 1 };
  s6 -> s6 [0, 65535] { R974 += 1, R912 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 74] { R976 += 1, R914 += 1, R101 += 1 };
  s0 -> s2 [0, 65535] { R976 += 1, R914 += 1, R101 += 1, R102 += 1 };
  s0 -> s3 [0, 65535] { R976 += 1, R913 += 1, R914 += 1 };
  s0 -> s4 [0, 65535] { R976 += 1, R914 += 1, R100 += 1, R101 += 1 };
  s0 -> s0 [0, 65535] { R975 += 1, R976 += 1 };
  s0 -> s1 [76, 65535] { R976 += 1, R914 += 1, R101 += 1 };
  s1 -> s1 [0, 74] { R976 += 1, R914 += 1, R101 += 1 };
  s1 -> s1 [0, 65535] { R976 += 1, R914 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R976 += 1 };
  s1 -> s1 [76, 65535] { R976 += 1, R914 += 1, R101 += 1 };
  s2 -> s1 [0, 74] { R976 += 1, R914 += 1, R101 += 1 };
  s2 -> s2 [0, 65535] { R976 += 1, R914 += 1, R101 += 1, R102 += 1 };
  s2 -> s7 [0, 65535] { R976 += 1, R914 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R976 += 1 };
  s2 -> s1 [76, 65535] { R976 += 1, R914 += 1, R101 += 1 };
  s3 -> s1 [0, 74] { R976 += 1, R914 += 1, R101 += 1 };
  s3 -> s2 [0, 65535] { R976 += 1, R914 += 1, R101 += 1, R102 += 1 };
  s3 -> s3 [0, 65535] { R976 += 1, R913 += 1, R914 += 1 };
  s3 -> s4 [0, 65535] { R976 += 1, R914 += 1, R100 += 1, R101 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [76, 65535] { R976 += 1, R914 += 1, R101 += 1 };
  s4 -> s1 [0, 74] { R976 += 1, R914 += 1, R101 += 1 };
  s4 -> s2 [0, 65535] { R976 += 1, R914 += 1, R101 += 1, R102 += 1 };
  s4 -> s4 [0, 65535] { R976 += 1, R914 += 1, R100 += 1, R101 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R976 += 1 };
  s4 -> s1 [76, 65535] { R976 += 1, R914 += 1, R101 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R976 += 1 };
  s7 -> s7 [0, 65535] { R976 += 1, R914 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R976 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s0 [0, 65535] { R977 += 1, R978 += 1 };
  s0 -> s1 [0, 65535] { R978 += 1, R916 += 1, R666 += 1 };
  s0 -> s2 [0, 65535] { R978 += 1, R916 += 1 };
  s0 -> s3 [0, 65535] { R978 += 1, R915 += 1, R916 += 1 };
  s1 -> s5 [0, 65535] { R978 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R978 += 1, R916 += 1, R666 += 1 };
  s1 -> s2 [0, 65535] { R978 += 1, R916 += 1 };
  s2 -> s5 [0, 65535] { R978 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R978 += 1, R916 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R978 += 1, R916 += 1, R666 += 1 };
  s3 -> s2 [0, 65535] { R978 += 1, R916 += 1 };
  s3 -> s3 [0, 65535] { R978 += 1, R915 += 1, R916 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R978 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 65535] { R980 += 1, R918 += 1, R894 += 1, R895 += 1 };
  s0 -> s2 [0, 65535] { R980 += 1, R917 += 1, R918 += 1 };
  s0 -> s3 [0, 65535] { R980 += 1, R918 += 1, R895 += 1, R897 += 1, R898 += 1 };
  s0 -> s4 [0, 65535] { R980 += 1, R918 += 1, R895 += 1, R896 += 1, R897 += 1 };
  s0 -> s0 [0, 65535] { R979 += 1, R980 += 1 };
  s1 -> s1 [0, 65535] { R980 += 1, R918 += 1, R894 += 1, R895 += 1 };
  s1 -> s6 [0, 65535] { R980 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s3 [0, 65535] { R980 += 1, R918 += 1, R895 += 1, R897 += 1, R898 += 1 };
  s1 -> s4 [0, 65535] { R980 += 1, R918 += 1, R895 += 1, R896 += 1, R897 += 1 };
  s2 -> s1 [0, 65535] { R980 += 1, R918 += 1, R894 += 1, R895 += 1 };
  s2 -> s2 [0, 65535] { R980 += 1, R917 += 1, R918 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s3 [0, 65535] { R980 += 1, R918 += 1, R895 += 1, R897 += 1, R898 += 1 };
  s2 -> s4 [0, 65535] { R980 += 1, R918 += 1, R895 += 1, R896 += 1, R897 += 1 };
  s3 -> s5 [0, 65535] { R980 += 1, R918 += 1 };
  s3 -> s6 [0, 65535] { R980 += 1 };
  s3 -> s8 [0, 65535] { R980 += 1, R918 += 1, R895 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s3 [0, 65535] { R980 += 1, R918 += 1, R895 += 1, R897 += 1, R898 += 1 };
  s4 -> s5 [0, 65535] { R980 += 1, R918 += 1 };
  s4 -> s6 [0, 65535] { R980 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s3 [0, 65535] { R980 += 1, R918 += 1, R895 += 1, R897 += 1, R898 += 1 };
  s4 -> s4 [0, 65535] { R980 += 1, R918 += 1, R895 += 1, R896 += 1, R897 += 1 };
  s5 -> s5 [0, 65535] { R980 += 1, R918 += 1 };
  s5 -> s6 [0, 65535] { R980 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s6 [0, 65535] { R980 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  s8 -> s5 [0, 65535] { R980 += 1, R918 += 1 };
  s8 -> s6 [0, 65535] { R980 += 1 };
  s8 -> s8 [0, 65535] { R980 += 1, R918 += 1, R895 += 1 };
  s8 -> s7 [0, 65535];
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s0 [0, 65535] { R981 += 1, R982 += 1 };
  s0 -> s1 [0, 65535] { R982 += 1, R937 += 1, R938 += 1 };
  s0 -> s2 [0, 65535] { R982 += 1, R938 += 1, R21 += 1 };
  s1 -> s1 [0, 65535] { R982 += 1, R937 += 1, R938 += 1 };
  s1 -> s2 [0, 65535] { R982 += 1, R938 += 1, R21 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R982 += 1 };
  s2 -> s2 [0, 65535] { R982 += 1, R938 += 1, R21 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R982 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 69] { R984 += 1, R940 += 1 };
  s0 -> s0 [0, 65535] { R983 += 1, R984 += 1 };
  s0 -> s2 [0, 65535] { R984 += 1, R939 += 1, R940 += 1 };
  s0 -> s3 [70, 70] { R984 += 1, R940 += 1 };
  s0 -> s4 [70, 70] { R984 += 1, R940 += 1 };
  s0 -> s5 [75, 75] { R984 += 1, R940 += 1 };
  s0 -> s1 [76, 65535] { R984 += 1, R940 += 1 };
  s1 -> s1 [0, 69] { R984 += 1, R940 += 1 };
  s1 -> s3 [70, 70] { R984 += 1, R940 += 1 };
  s1 -> s4 [70, 70] { R984 += 1, R940 += 1 };
  s1 -> s5 [75, 75] { R984 += 1, R940 += 1 };
  s1 -> s1 [76, 65535] { R984 += 1, R940 += 1 };
  s2 -> s1 [0, 69] { R984 += 1, R940 += 1 };
  s2 -> s2 [0, 65535] { R984 += 1, R939 += 1, R940 += 1 };
  s2 -> s3 [70, 70] { R984 += 1, R940 += 1 };
  s2 -> s4 [70, 70] { R984 += 1, R940 += 1 };
  s2 -> s5 [75, 75] { R984 += 1, R940 += 1 };
  s2 -> s1 [76, 65535] { R984 += 1, R940 += 1 };
  s4 -> s4 [0, 70] { R984 += 1, R940 += 1 };
  s4 -> s8 [75, 75] { R984 += 1, R940 += 1 };
  s4 -> s4 [76, 65535] { R984 += 1, R940 += 1 };
  s5 -> s5 [0, 69] { R984 += 1, R940 += 1 };
  s5 -> s5 [0, 65535] { R984 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [70, 70] { R984 += 1, R940 += 1 };
  s5 -> s8 [70, 70] { R984 += 1, R940 += 1 };
  s5 -> s5 [75, 65535] { R984 += 1, R940 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R984 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 70] { R984 += 1, R940 += 1 };
  s8 -> s8 [0, 65535] { R984 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [75, 65535] { R984 += 1, R940 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 69] { R986 += 1, R942 += 1, R83 += 1 };
  s0 -> s2 [0, 65535] { R986 += 1, R941 += 1, R942 += 1 };
  s0 -> s0 [0, 65535] { R985 += 1, R986 += 1 };
  s0 -> s3 [70, 70] { R986 += 1, R942 += 1, R83 += 1 };
  s0 -> s4 [70, 70] { R986 += 1, R942 += 1, R83 += 1 };
  s0 -> s1 [71, 65535] { R986 += 1, R942 += 1, R83 += 1 };
  s1 -> s1 [0, 69] { R986 += 1, R942 += 1, R83 += 1 };
  s1 -> s1 [0, 65535] { R986 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [70, 70] { R986 += 1, R942 += 1, R83 += 1 };
  s1 -> s4 [70, 70] { R986 += 1, R942 += 1, R83 += 1 };
  s1 -> s1 [71, 65535] { R986 += 1, R942 += 1, R83 += 1 };
  s2 -> s1 [0, 69] { R986 += 1, R942 += 1, R83 += 1 };
  s2 -> s2 [0, 65535] { R986 += 1, R941 += 1, R942 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [70, 70] { R986 += 1, R942 += 1, R83 += 1 };
  s2 -> s4 [70, 70] { R986 += 1, R942 += 1, R83 += 1 };
  s2 -> s1 [71, 65535] { R986 += 1, R942 += 1, R83 += 1 };
  s3 -> s3 [0, 65535] { R986 += 1, R942 += 1, R83 += 1 };
  s3 -> s6 [0, 65535] { R986 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R986 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R986 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 69] { R988 += 1, R944 += 1, R85 += 1 };
  s0 -> s0 [0, 65535] { R987 += 1, R988 += 1 };
  s0 -> s2 [0, 65535] { R988 += 1, R943 += 1, R944 += 1 };
  s0 -> s3 [70, 70] { R988 += 1, R944 += 1, R85 += 1 };
  s0 -> s4 [70, 70] { R988 += 1, R944 += 1, R85 += 1 };
  s0 -> s1 [71, 65535] { R988 += 1, R944 += 1, R85 += 1 };
  s1 -> s1 [0, 69] { R988 += 1, R944 += 1, R85 += 1 };
  s1 -> s1 [0, 65535] { R988 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [70, 70] { R988 += 1, R944 += 1, R85 += 1 };
  s1 -> s4 [70, 70] { R988 += 1, R944 += 1, R85 += 1 };
  s1 -> s1 [71, 65535] { R988 += 1, R944 += 1, R85 += 1 };
  s2 -> s1 [0, 69] { R988 += 1, R944 += 1, R85 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R988 += 1, R943 += 1, R944 += 1 };
  s2 -> s3 [70, 70] { R988 += 1, R944 += 1, R85 += 1 };
  s2 -> s4 [70, 70] { R988 += 1, R944 += 1, R85 += 1 };
  s2 -> s1 [71, 65535] { R988 += 1, R944 += 1, R85 += 1 };
  s3 -> s6 [0, 65535] { R988 += 1 };
  s3 -> s3 [0, 65535] { R988 += 1, R944 += 1, R85 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R988 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R988 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 69] { R990 += 1, R946 += 1, R88 += 1 };
  s0 -> s2 [0, 69] { R990 += 1, R946 += 1, R87 += 1, R88 += 1 };
  s0 -> s0 [0, 65535] { R989 += 1, R990 += 1 };
  s0 -> s3 [0, 65535] { R990 += 1, R945 += 1, R946 += 1 };
  s0 -> s4 [70, 70] { R990 += 1, R946 += 1, R87 += 1, R88 += 1 };
  s0 -> s5 [70, 70] { R990 += 1, R946 += 1, R88 += 1 };
  s0 -> s6 [70, 70] { R990 += 1, R946 += 1, R88 += 1 };
  s0 -> s7 [70, 70] { R990 += 1, R946 += 1, R87 += 1, R88 += 1 };
  s0 -> s1 [71, 74] { R990 += 1, R946 += 1, R88 += 1 };
  s0 -> s2 [71, 65535] { R990 += 1, R946 += 1, R87 += 1, R88 += 1 };
  s0 -> s8 [75, 75] { R990 += 1, R946 += 1, R88 += 1 };
  s0 -> s1 [76, 65535] { R990 += 1, R946 += 1, R88 += 1 };
  s1 -> s1 [0, 69] { R990 += 1, R946 += 1, R88 += 1 };
  s1 -> s5 [70, 70] { R990 += 1, R946 += 1, R88 += 1 };
  s1 -> s6 [70, 70] { R990 += 1, R946 += 1, R88 += 1 };
  s1 -> s1 [71, 74] { R990 += 1, R946 += 1, R88 += 1 };
  s1 -> s8 [75, 75] { R990 += 1, R946 += 1, R88 += 1 };
  s1 -> s1 [76, 65535] { R990 += 1, R946 += 1, R88 += 1 };
  s2 -> s1 [0, 69] { R990 += 1, R946 += 1, R88 += 1 };
  s2 -> s2 [0, 69] { R990 += 1, R946 += 1, R87 += 1, R88 += 1 };
  s2 -> s4 [70, 70] { R990 += 1, R946 += 1, R87 += 1, R88 += 1 };
  s2 -> s5 [70, 70] { R990 += 1, R946 += 1, R88 += 1 };
  s2 -> s6 [70, 70] { R990 += 1, R946 += 1, R88 += 1 };
  s2 -> s7 [70, 70] { R990 += 1, R946 += 1, R87 += 1, R88 += 1 };
  s2 -> s1 [71, 74] { R990 += 1, R946 += 1, R88 += 1 };
  s2 -> s2 [71, 65535] { R990 += 1, R946 += 1, R87 += 1, R88 += 1 };
  s2 -> s8 [75, 75] { R990 += 1, R946 += 1, R88 += 1 };
  s2 -> s1 [76, 65535] { R990 += 1, R946 += 1, R88 += 1 };
  s3 -> s1 [0, 69] { R990 += 1, R946 += 1, R88 += 1 };
  s3 -> s2 [0, 69] { R990 += 1, R946 += 1, R87 += 1, R88 += 1 };
  s3 -> s3 [0, 65535] { R990 += 1, R945 += 1, R946 += 1 };
  s3 -> s4 [70, 70] { R990 += 1, R946 += 1, R87 += 1, R88 += 1 };
  s3 -> s5 [70, 70] { R990 += 1, R946 += 1, R88 += 1 };
  s3 -> s6 [70, 70] { R990 += 1, R946 += 1, R88 += 1 };
  s3 -> s7 [70, 70] { R990 += 1, R946 += 1, R87 += 1, R88 += 1 };
  s3 -> s1 [71, 74] { R990 += 1, R946 += 1, R88 += 1 };
  s3 -> s2 [71, 65535] { R990 += 1, R946 += 1, R87 += 1, R88 += 1 };
  s3 -> s8 [75, 75] { R990 += 1, R946 += 1, R88 += 1 };
  s3 -> s1 [76, 65535] { R990 += 1, R946 += 1, R88 += 1 };
  s4 -> s6 [0, 74] { R990 += 1, R946 += 1, R88 += 1 };
  s4 -> s4 [0, 65535] { R990 += 1, R946 += 1, R87 += 1, R88 += 1 };
  s4 -> s11 [75, 75] { R990 += 1, R946 += 1, R88 += 1 };
  s4 -> s6 [76, 65535] { R990 += 1, R946 += 1, R88 += 1 };
  s6 -> s6 [0, 74] { R990 += 1, R946 += 1, R88 += 1 };
  s6 -> s11 [75, 75] { R990 += 1, R946 += 1, R88 += 1 };
  s6 -> s6 [76, 65535] { R990 += 1, R946 += 1, R88 += 1 };
  s8 -> s8 [0, 69] { R990 += 1, R946 += 1, R88 += 1 };
  s8 -> s8 [0, 65535] { R990 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [70, 70] { R990 += 1, R946 += 1, R88 += 1 };
  s8 -> s11 [70, 70] { R990 += 1, R946 += 1, R88 += 1 };
  s8 -> s8 [71, 65535] { R990 += 1, R946 += 1, R88 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R990 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s12 [0, 65535] { R990 += 1 };
  s11 -> s11 [0, 65535] { R990 += 1, R946 += 1, R88 += 1 };
  s11 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R990 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 69] { R992 += 1, R948 += 1, R91 += 1, R92 += 1 };
  s0 -> s0 [0, 65535] { R991 += 1, R992 += 1 };
  s0 -> s2 [0, 65535] { R992 += 1, R947 += 1, R948 += 1 };
  s0 -> s3 [70, 70] { R992 += 1, R948 += 1, R91 += 1, R92 += 1 };
  s0 -> s4 [70, 70] { R992 += 1, R948 += 1, R91 += 1, R92 += 1 };
  s0 -> s1 [71, 65535] { R992 += 1, R948 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 69] { R992 += 1, R948 += 1, R91 += 1, R92 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R992 += 1 };
  s1 -> s3 [70, 70] { R992 += 1, R948 += 1, R91 += 1, R92 += 1 };
  s1 -> s4 [70, 70] { R992 += 1, R948 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [71, 65535] { R992 += 1, R948 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [0, 69] { R992 += 1, R948 += 1, R91 += 1, R92 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R992 += 1, R947 += 1, R948 += 1 };
  s2 -> s3 [70, 70] { R992 += 1, R948 += 1, R91 += 1, R92 += 1 };
  s2 -> s4 [70, 70] { R992 += 1, R948 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [71, 65535] { R992 += 1, R948 += 1, R91 += 1, R92 += 1 };
  s3 -> s3 [0, 65535] { R992 += 1, R948 += 1, R91 += 1, R92 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R992 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R992 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R992 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 69] { R994 += 1, R950 += 1, R97 += 1, R98 += 1 };
  s0 -> s0 [0, 65535] { R993 += 1, R994 += 1 };
  s0 -> s2 [0, 65535] { R994 += 1, R949 += 1, R950 += 1 };
  s0 -> s3 [70, 70] { R994 += 1, R950 += 1, R97 += 1, R98 += 1 };
  s0 -> s4 [70, 70] { R994 += 1, R950 += 1, R97 += 1, R98 += 1 };
  s0 -> s1 [71, 65535] { R994 += 1, R950 += 1, R97 += 1, R98 += 1 };
  s1 -> s1 [0, 69] { R994 += 1, R950 += 1, R97 += 1, R98 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R994 += 1 };
  s1 -> s3 [70, 70] { R994 += 1, R950 += 1, R97 += 1, R98 += 1 };
  s1 -> s4 [70, 70] { R994 += 1, R950 += 1, R97 += 1, R98 += 1 };
  s1 -> s1 [71, 65535] { R994 += 1, R950 += 1, R97 += 1, R98 += 1 };
  s2 -> s1 [0, 69] { R994 += 1, R950 += 1, R97 += 1, R98 += 1 };
  s2 -> s2 [0, 65535] { R994 += 1, R949 += 1, R950 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [70, 70] { R994 += 1, R950 += 1, R97 += 1, R98 += 1 };
  s2 -> s4 [70, 70] { R994 += 1, R950 += 1, R97 += 1, R98 += 1 };
  s2 -> s1 [71, 65535] { R994 += 1, R950 += 1, R97 += 1, R98 += 1 };
  s3 -> s3 [0, 65535] { R994 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R994 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R994 += 1, R950 += 1, R97 += 1, R98 += 1 };
  s5 -> s5 [0, 65535] { R994 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 69] { R996 += 1, R952 += 1, R662 += 1, R663 += 1, R664 += 1 };
  s0 -> s2 [0, 69] { R996 += 1, R952 += 1, R662 += 1, R664 += 1 };
  s0 -> s3 [0, 69] { R996 += 1, R952 += 1, R661 += 1, R662 += 1 };
  s0 -> s4 [0, 65535] { R996 += 1, R951 += 1, R952 += 1 };
  s0 -> s0 [0, 65535] { R995 += 1, R996 += 1 };
  s0 -> s5 [70, 70] { R996 += 1, R952 += 1, R662 += 1, R664 += 1 };
  s0 -> s6 [70, 70] { R996 += 1, R952 += 1, R662 += 1, R663 += 1, R664 += 1 };
  s0 -> s7 [70, 70] { R996 += 1, R952 += 1, R661 += 1, R662 += 1 };
  s0 -> s8 [70, 70] { R996 += 1, R952 += 1, R661 += 1, R662 += 1 };
  s0 -> s9 [70, 70] { R996 += 1, R952 += 1, R662 += 1, R663 += 1, R664 += 1 };
  s0 -> s10 [70, 70] { R996 += 1, R952 += 1, R662 += 1, R664 += 1 };
  s0 -> s2 [71, 74] { R996 += 1, R952 += 1, R662 += 1, R664 += 1 };
  s0 -> s1 [71, 65535] { R996 += 1, R952 += 1, R662 += 1, R663 += 1, R664 += 1 };
  s0 -> s3 [71, 65535] { R996 += 1, R952 += 1, R661 += 1, R662 += 1 };
  s0 -> s11 [75, 75] { R996 += 1, R952 += 1, R662 += 1, R664 += 1 };
  s0 -> s2 [76, 65535] { R996 += 1, R952 += 1, R662 += 1, R664 += 1 };
  s1 -> s1 [0, 69] { R996 += 1, R952 += 1, R662 += 1, R663 += 1, R664 += 1 };
  s1 -> s2 [0, 69] { R996 += 1, R952 += 1, R662 += 1, R664 += 1 };
  s1 -> s5 [70, 70] { R996 += 1, R952 += 1, R662 += 1, R664 += 1 };
  s1 -> s6 [70, 70] { R996 += 1, R952 += 1, R662 += 1, R663 += 1, R664 += 1 };
  s1 -> s9 [70, 70] { R996 += 1, R952 += 1, R662 += 1, R663 += 1, R664 += 1 };
  s1 -> s10 [70, 70] { R996 += 1, R952 += 1, R662 += 1, R664 += 1 };
  s1 -> s2 [71, 74] { R996 += 1, R952 += 1, R662 += 1, R664 += 1 };
  s1 -> s1 [71, 65535] { R996 += 1, R952 += 1, R662 += 1, R663 += 1, R664 += 1 };
  s1 -> s11 [75, 75] { R996 += 1, R952 += 1, R662 += 1, R664 += 1 };
  s1 -> s2 [76, 65535] { R996 += 1, R952 += 1, R662 += 1, R664 += 1 };
  s2 -> s2 [0, 69] { R996 += 1, R952 += 1, R662 += 1, R664 += 1 };
  s2 -> s5 [70, 70] { R996 += 1, R952 += 1, R662 += 1, R664 += 1 };
  s2 -> s10 [70, 70] { R996 += 1, R952 += 1, R662 += 1, R664 += 1 };
  s2 -> s2 [71, 74] { R996 += 1, R952 += 1, R662 += 1, R664 += 1 };
  s2 -> s11 [75, 75] { R996 += 1, R952 += 1, R662 += 1, R664 += 1 };
  s2 -> s2 [76, 65535] { R996 += 1, R952 += 1, R662 += 1, R664 += 1 };
  s3 -> s1 [0, 69] { R996 += 1, R952 += 1, R662 += 1, R663 += 1, R664 += 1 };
  s3 -> s2 [0, 69] { R996 += 1, R952 += 1, R662 += 1, R664 += 1 };
  s3 -> s3 [0, 69] { R996 += 1, R952 += 1, R661 += 1, R662 += 1 };
  s3 -> s5 [70, 70] { R996 += 1, R952 += 1, R662 += 1, R664 += 1 };
  s3 -> s6 [70, 70] { R996 += 1, R952 += 1, R662 += 1, R663 += 1, R664 += 1 };
  s3 -> s7 [70, 70] { R996 += 1, R952 += 1, R661 += 1, R662 += 1 };
  s3 -> s8 [70, 70] { R996 += 1, R952 += 1, R661 += 1, R662 += 1 };
  s3 -> s9 [70, 70] { R996 += 1, R952 += 1, R662 += 1, R663 += 1, R664 += 1 };
  s3 -> s10 [70, 70] { R996 += 1, R952 += 1, R662 += 1, R664 += 1 };
  s3 -> s2 [71, 74] { R996 += 1, R952 += 1, R662 += 1, R664 += 1 };
  s3 -> s1 [71, 65535] { R996 += 1, R952 += 1, R662 += 1, R663 += 1, R664 += 1 };
  s3 -> s3 [71, 65535] { R996 += 1, R952 += 1, R661 += 1, R662 += 1 };
  s3 -> s11 [75, 75] { R996 += 1, R952 += 1, R662 += 1, R664 += 1 };
  s3 -> s2 [76, 65535] { R996 += 1, R952 += 1, R662 += 1, R664 += 1 };
  s4 -> s1 [0, 69] { R996 += 1, R952 += 1, R662 += 1, R663 += 1, R664 += 1 };
  s4 -> s2 [0, 69] { R996 += 1, R952 += 1, R662 += 1, R664 += 1 };
  s4 -> s3 [0, 69] { R996 += 1, R952 += 1, R661 += 1, R662 += 1 };
  s4 -> s4 [0, 65535] { R996 += 1, R951 += 1, R952 += 1 };
  s4 -> s5 [70, 70] { R996 += 1, R952 += 1, R662 += 1, R664 += 1 };
  s4 -> s6 [70, 70] { R996 += 1, R952 += 1, R662 += 1, R663 += 1, R664 += 1 };
  s4 -> s7 [70, 70] { R996 += 1, R952 += 1, R661 += 1, R662 += 1 };
  s4 -> s8 [70, 70] { R996 += 1, R952 += 1, R661 += 1, R662 += 1 };
  s4 -> s9 [70, 70] { R996 += 1, R952 += 1, R662 += 1, R663 += 1, R664 += 1 };
  s4 -> s10 [70, 70] { R996 += 1, R952 += 1, R662 += 1, R664 += 1 };
  s4 -> s2 [71, 74] { R996 += 1, R952 += 1, R662 += 1, R664 += 1 };
  s4 -> s1 [71, 65535] { R996 += 1, R952 += 1, R662 += 1, R663 += 1, R664 += 1 };
  s4 -> s3 [71, 65535] { R996 += 1, R952 += 1, R661 += 1, R662 += 1 };
  s4 -> s11 [75, 75] { R996 += 1, R952 += 1, R662 += 1, R664 += 1 };
  s4 -> s2 [76, 65535] { R996 += 1, R952 += 1, R662 += 1, R664 += 1 };
  s7 -> s10 [0, 74] { R996 += 1, R952 += 1, R662 += 1, R664 += 1 };
  s7 -> s7 [0, 65535] { R996 += 1, R952 += 1, R661 += 1, R662 += 1 };
  s7 -> s9 [0, 65535] { R996 += 1, R952 += 1, R662 += 1, R663 += 1, R664 += 1 };
  s7 -> s15 [75, 75] { R996 += 1, R952 += 1, R662 += 1, R664 += 1 };
  s7 -> s10 [76, 65535] { R996 += 1, R952 += 1, R662 += 1, R664 += 1 };
  s9 -> s10 [0, 74] { R996 += 1, R952 += 1, R662 += 1, R664 += 1 };
  s9 -> s9 [0, 65535] { R996 += 1, R952 += 1, R662 += 1, R663 += 1, R664 += 1 };
  s9 -> s15 [75, 75] { R996 += 1, R952 += 1, R662 += 1, R664 += 1 };
  s9 -> s10 [76, 65535] { R996 += 1, R952 += 1, R662 += 1, R664 += 1 };
  s10 -> s10 [0, 74] { R996 += 1, R952 += 1, R662 += 1, R664 += 1 };
  s10 -> s15 [75, 75] { R996 += 1, R952 += 1, R662 += 1, R664 += 1 };
  s10 -> s10 [76, 65535] { R996 += 1, R952 += 1, R662 += 1, R664 += 1 };
  s11 -> s11 [0, 69] { R996 += 1, R952 += 1, R662 += 1, R664 += 1 };
  s11 -> s12 [0, 69] { R996 += 1, R952 += 1, R662 += 1 };
  s11 -> s13 [70, 70] { R996 += 1, R952 += 1, R662 += 1, R664 += 1 };
  s11 -> s14 [70, 70] { R996 += 1, R952 += 1, R662 += 1 };
  s11 -> s15 [70, 70] { R996 += 1, R952 += 1, R662 += 1, R664 += 1 };
  s11 -> s16 [70, 70] { R996 += 1, R952 += 1, R662 += 1 };
  s11 -> s11 [71, 65535] { R996 += 1, R952 += 1, R662 += 1, R664 += 1 };
  s11 -> s12 [71, 65535] { R996 += 1, R952 += 1, R662 += 1 };
  s12 -> s12 [0, 69] { R996 += 1, R952 += 1, R662 += 1 };
  s12 -> s18 [0, 65535];
  s12 -> s12 [0, 65535] { R996 += 1 };
  s12 -> s14 [70, 70] { R996 += 1, R952 += 1, R662 += 1 };
  s12 -> s16 [70, 70] { R996 += 1, R952 += 1, R662 += 1 };
  s12 -> s12 [71, 65535] { R996 += 1, R952 += 1, R662 += 1 };
  s14 -> s18 [0, 65535];
  s14 -> s14 [0, 65535] { R996 += 1 };
  s15 -> s15 [0, 65535] { R996 += 1, R952 += 1, R662 += 1, R664 += 1 };
  s15 -> s16 [0, 65535] { R996 += 1, R952 += 1, R662 += 1 };
  s16 -> s17 [0, 65535] { R996 += 1 };
  s16 -> s18 [0, 65535];
  s16 -> s16 [0, 65535] { R996 += 1, R952 += 1, R662 += 1 };
  s17 -> s17 [0, 65535] { R996 += 1 };
  s17 -> s18 [0, 65535];
  s18 -> s18 [0, 65535];
  accepting s17, s16, s12, s14, s18;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 69] { R998 += 1, R954 += 1, R889 += 1, R890 += 1 };
  s0 -> s2 [0, 65535] { R998 += 1, R953 += 1, R954 += 1 };
  s0 -> s0 [0, 65535] { R997 += 1, R998 += 1 };
  s0 -> s3 [70, 70] { R998 += 1, R954 += 1, R889 += 1, R890 += 1 };
  s0 -> s4 [70, 70] { R998 += 1, R954 += 1, R889 += 1, R890 += 1 };
  s0 -> s1 [71, 65535] { R998 += 1, R954 += 1, R889 += 1, R890 += 1 };
  s1 -> s1 [0, 69] { R998 += 1, R954 += 1, R889 += 1, R890 += 1 };
  s1 -> s1 [0, 65535] { R998 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [70, 70] { R998 += 1, R954 += 1, R889 += 1, R890 += 1 };
  s1 -> s4 [70, 70] { R998 += 1, R954 += 1, R889 += 1, R890 += 1 };
  s1 -> s1 [71, 65535] { R998 += 1, R954 += 1, R889 += 1, R890 += 1 };
  s2 -> s1 [0, 69] { R998 += 1, R954 += 1, R889 += 1, R890 += 1 };
  s2 -> s2 [0, 65535] { R998 += 1, R953 += 1, R954 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [70, 70] { R998 += 1, R954 += 1, R889 += 1, R890 += 1 };
  s2 -> s4 [70, 70] { R998 += 1, R954 += 1, R889 += 1, R890 += 1 };
  s2 -> s1 [71, 65535] { R998 += 1, R954 += 1, R889 += 1, R890 += 1 };
  s3 -> s6 [0, 65535] { R998 += 1 };
  s3 -> s3 [0, 65535] { R998 += 1, R954 += 1, R889 += 1, R890 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R998 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R998 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [102, 102];
  accepting s1;
};
};
constraint R3 = R998 && R23 - R998 = -1 && R24 = R998 && R25 - R998 = -1 && R26 = R998 && R27 = 0 && R28 = 1 && R29 = 0 && R30 = 1 && R45 + R84 + R83 + -1*R666 + -1*R662 - R66 = 0 && R49 + R89 + R87 = 0 && R50 + R90 + R88 + -1*R666 + -1*R662 - R66 = 0 && R55 + R96 + R93 + -1*R668 + -1*R664 - R68 = 0 && R65 + R665 + R661 = 0 && R67 + R667 + R663 = 0 && R939 = 0 && R940 = 0 && R945 = 0 && R946 = 0 && R951 = 0 && R952 = 0 && R955 = 0 && R956 = R998 && R957 = 0 && R958 = R998 && R959 = 0 && R960 = R998 && R961 = 0 && R962 = R998 && R963 = 0 && R964 = R998 && R965 = 0 && R966 = R998 && R967 = 0 && R968 = R998 && R969 = 0 && R970 = R998 && R971 = 0 && R972 = R998 && R973 = 0 && R974 = R998 && R975 = 0 && R976 = R998 && R977 = 0 && R978 = R998 && R979 = 0 && R980 = R998 && R981 = 0 && R982 = R998 && R983 = 0 && R984 = R998 && R985 = 0 && R986 = R998 && R987 = 0 && R988 = R998 && R989 = 0 && R990 = R998 && R991 = 0 && R992 = R998 && R993 = 0 && R994 = R998 && R995 = 0 && R996 = R998 && R997 = 0 && -1 < R2 && R12 < 1 && R15 < 1 && R16 < 1 && R47 + R86 + R85 < 1 && R61 + R102 + R99 < 1 && -1*R666 + -1*R662 - R66 < 1 && -1*R668 + -1*R664 - R68 < 1 && 0 < R998 && (R2 != 0 || R20 = 0 || (R899 = 0 && R900 = 0)) && (R2 != 0 || R20 = 0 || (R901 = 0 && R902 = 0)) && (R2 != 0 || R20 = 0 || (R903 = 0 && R904 = 0)) && (R2 != 0 || R20 = 0 || (R905 = 0 && R906 = 0)) && (R2 != 0 || R20 = 0 || (R907 = 0 && R908 = 0)) && (R2 != 0 || R20 = 0 || (R909 = 0 && R910 = 0)) && (R2 != 0 || R20 = 0 || (R911 = 0 && R912 = 0)) && (R2 != 0 || R20 = 0 || (R913 = 0 && R914 = 0)) && (R2 != 0 || R20 = 0 || (R915 = 0 && R916 = 0)) && (R2 != 0 || R20 = 0 || (R917 = 0 && R918 = 0)) && (R53 + R94 + R91 != 0 || R54 + R95 + R92 + -1*R666 + -1*R662 - R66 = 0 || R66 + R666 + R662 < 1) && (R59 + R100 + R97 != 0 || R60 + R101 + R98 + -1*R666 + -1*R662 - R66 = 0 || R66 + R666 + R662 < 1) && (R66 + R666 + R662 != 0 || ((R53 + R94 + R91 != 0 || R54 + R95 + R92 = 0 || R68 + R668 + R664 < 1) && (R53 + R94 + R91 = 0 || R68 + R668 + R664 < 1))) && (R66 + R666 + R662 != 0 || ((R59 + R100 + R97 != 0 || R60 + R101 + R98 = 0 || R68 + R668 + R664 < 1) && (R59 + R100 + R97 = 0 || R68 + R668 + R664 < 1))) && (R66 + R666 + R662 != 0 || ((R73 + R894 + R889 != 0 || R74 + R895 + R890 = 0 || R68 + R668 + R664 < 1) && (R73 + R894 + R889 = 0 || R68 + R668 + R664 < 1))) && (R68 + R668 + R664 != 0 || R77 + R898 + R893 = 0 || (R75 + R896 + R891 = 0 && R76 + R897 + R892 = 0)) && (R73 + R894 + R889 != 0 || R66 + R666 + R662 + -1*R895 + -1*R890 - R74 = 0 || R66 + R666 + R662 < 1) && (R75 + R896 + R891 != 0 || R68 + R668 + R664 + -1*R897 + -1*R892 - R76 = 0 || R68 + R668 + R664 < 1) && (R899 != 0 || R2 = R900 || R2 < 1) && (R901 != 0 || R2 = R902 || R2 < 1) && (R903 != 0 || R2 = R904 || R2 < 1) && (R905 != 0 || R2 = R906 || R2 < 1) && (R907 != 0 || R2 = R908 || R2 < 1) && (R909 != 0 || R2 = R910 || R2 < 1) && (R911 != 0 || R2 = R912 || R2 < 1) && (R913 != 0 || R2 = R914 || R2 < 1) && (R915 != 0 || R2 = R916 || R2 < 1) && (R917 != 0 || R2 = R918 || R2 < 1) && (R21 = 0 || (R937 = 0 && R938 = 0)) && (R21 = 0 || (R941 = 0 && R942 = 0)) && (R21 = 0 || (R943 = 0 && R944 = 0)) && (R21 = 0 || (R947 = 0 && R948 = 0)) && (R21 = 0 || (R949 = 0 && R950 = 0)) && (R21 = 0 || (R953 = 0 && R954 = 0)) && (R22 = 0 || (R919 = 0 && R920 = 0)) && (R22 = 0 || (R921 = 0 && R922 = 0)) && (R22 = 0 || (R923 = 0 && R924 = 0)) && (R22 = 0 || (R925 = 0 && R926 = 0)) && (R22 = 0 || (R927 = 0 && R928 = 0)) && (R22 = 0 || (R929 = 0 && R930 = 0)) && (R22 = 0 || (R931 = 0 && R932 = 0)) && (R22 = 0 || (R933 = 0 && R934 = 0)) && (R22 = 0 || (R935 = 0 && R936 = 0)) && (R53 + R94 + R91 = 0 || R66 + R666 + R662 < 1) && (R59 + R100 + R97 = 0 || R66 + R666 + R662 < 1) && (R73 + R894 + R889 = 0 || R66 + R666 + R662 < 1) && (R75 + R896 + R891 = 0 || R68 + R668 + R664 < 1) && (R899 = 0 || R2 < 1) && (R901 = 0 || R2 < 1) && (R903 = 0 || R2 < 1) && (R905 = 0 || R2 < 1) && (R907 = 0 || R2 < 1) && (R909 = 0 || R2 < 1) && (R911 = 0 || R2 < 1) && (R913 = 0 || R2 < 1) && (R915 = 0 || R2 < 1) && (R917 = 0 || R2 < 1);
// End of Parikh automata intersection problem
