// Parikh automata intersection problem, generated by OSTRICH+
counter int R10000, R10001, R10002, R10003, R10004, R10005, R10006, R10007, R10008, R10009, R10010, R10011, R10012, R10013, R10014, R10015, R10016, R10017, R10018, R10019, R10020, R10021, R10022, R10023, R10024, R10025, R10026, R10027, R10028, R10029, R10030, R10031, R10032, R10033, R10034, R10035, R10036, R10037, R10038, R10039, R10040, R10041, R10042, R10043, R10044, R10045, R10046, R10047, R10048, R12, R15, R16, R2, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R4, R45, R47, R49, R5, R50, R53, R54, R55, R59, R60, R61, R65, R66, R67, R68, R6805, R6806, R6807, R6808, R6809, R6810, R73, R74, R75, R76, R77, R83, R84, R85, R86, R87, R88, R89, R90, R91, R92, R93, R94, R95, R96, R9601, R9602, R9603, R9604, R9605, R9606, R9607, R9608, R9939, R9940, R9941, R9942, R9943, R9944, R9945, R9946, R9947, R9948, R9949, R9950, R9951, R9952, R9953, R9954, R9955, R9956, R9957, R9958, R9959, R9960, R9961, R9962, R9963, R9964, R9965, R9966, R9967, R9968, R9969, R9970, R9971, R9972, R9973, R9974, R9975, R9976, R9977, R9978, R9979, R9980, R9981, R9982, R9983, R9984, R9985, R9986, R9987, R9988, R9989, R9990, R9991, R9992, R9993, R9994, R9995, R9996, R9997, R9998, R9999;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [70, 70];
  s0 -> s0 [71, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [70, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R15 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 69];
  s0 -> s0 [0, 65535] { R16 += 1 };
  s0 -> s2 [70, 70];
  s0 -> s1 [71, 65535];
  s1 -> s1 [0, 69];
  s1 -> s2 [70, 70];
  s1 -> s1 [71, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R24 += 1 };
  s0 -> s0 [0, 65535] { R23 += 1, R24 += 1 };
  s0 -> s2 [9, 13] { R24 += 1 };
  s0 -> s1 [14, 31] { R24 += 1 };
  s0 -> s2 [32, 32] { R24 += 1 };
  s0 -> s1 [33, 65535] { R24 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R24 += 1 };
  s2 -> s1 [0, 65535] { R24 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R25 += 1, R26 += 1 };
  s1 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R28 += 1 };
  s0 -> s0 [0, 65535] { R27 += 1, R28 += 1 };
  s0 -> s2 [9, 13] { R28 += 1 };
  s0 -> s1 [14, 31] { R28 += 1 };
  s0 -> s2 [32, 32] { R28 += 1 };
  s0 -> s1 [33, 65535] { R28 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R28 += 1 };
  s2 -> s1 [0, 65535] { R28 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R29 += 1, R30 += 1 };
  s1 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R9969 += 1, R9970 += 1 };
  s0 -> s1 [0, 65535] { R9970 += 1, R22 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R9970 += 1, R22 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 69] { R9972 += 1 };
  s0 -> s0 [0, 65535] { R9971 += 1, R9972 += 1 };
  s0 -> s2 [70, 70] { R9972 += 1 };
  s0 -> s3 [70, 70] { R9972 += 1 };
  s0 -> s1 [76, 65535] { R9972 += 1 };
  s1 -> s1 [0, 69] { R9972 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R9972 += 1 };
  s1 -> s3 [70, 70] { R9972 += 1 };
  s1 -> s1 [76, 65535] { R9972 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 70] { R9972 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [76, 65535] { R9972 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 69] { R9974 += 1, R45 += 1 };
  s0 -> s0 [0, 65535] { R9973 += 1, R9974 += 1 };
  s0 -> s2 [70, 70] { R9974 += 1, R45 += 1 };
  s0 -> s3 [70, 70] { R9974 += 1, R45 += 1 };
  s0 -> s1 [71, 65535] { R9974 += 1, R45 += 1 };
  s1 -> s1 [0, 69] { R9974 += 1, R45 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R9974 += 1, R45 += 1 };
  s1 -> s3 [70, 70] { R9974 += 1, R45 += 1 };
  s1 -> s1 [71, 65535] { R9974 += 1, R45 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R9974 += 1, R45 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 69] { R9976 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R9975 += 1, R9976 += 1 };
  s0 -> s2 [70, 70] { R9976 += 1, R47 += 1 };
  s0 -> s3 [70, 70] { R9976 += 1, R47 += 1 };
  s0 -> s1 [71, 65535] { R9976 += 1, R47 += 1 };
  s1 -> s1 [0, 69] { R9976 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R9976 += 1, R47 += 1 };
  s1 -> s3 [70, 70] { R9976 += 1, R47 += 1 };
  s1 -> s1 [71, 65535] { R9976 += 1, R47 += 1 };
  s2 -> s2 [0, 65535] { R9976 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 69] { R9978 += 1, R49 += 1, R50 += 1 };
  s0 -> s0 [0, 65535] { R9977 += 1, R9978 += 1 };
  s0 -> s2 [70, 70] { R9978 += 1, R49 += 1, R50 += 1 };
  s0 -> s3 [70, 70] { R9978 += 1, R49 += 1, R50 += 1 };
  s0 -> s1 [71, 65535] { R9978 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 69] { R9978 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R9978 += 1, R49 += 1, R50 += 1 };
  s1 -> s3 [70, 70] { R9978 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [71, 65535] { R9978 += 1, R49 += 1, R50 += 1 };
  s2 -> s2 [0, 65535] { R9978 += 1, R49 += 1, R50 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 69] { R9980 += 1, R53 += 1, R54 += 1 };
  s0 -> s0 [0, 65535] { R9979 += 1, R9980 += 1 };
  s0 -> s2 [70, 70] { R9980 += 1, R53 += 1, R54 += 1 };
  s0 -> s3 [70, 70] { R9980 += 1, R53 += 1, R54 += 1 };
  s0 -> s1 [71, 65535] { R9980 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 69] { R9980 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R9980 += 1, R53 += 1, R54 += 1 };
  s1 -> s3 [70, 70] { R9980 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [71, 65535] { R9980 += 1, R53 += 1, R54 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R9980 += 1, R53 += 1, R54 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 69] { R9982 += 1, R59 += 1, R60 += 1 };
  s0 -> s0 [0, 65535] { R9981 += 1, R9982 += 1 };
  s0 -> s2 [70, 70] { R9982 += 1, R59 += 1, R60 += 1 };
  s0 -> s3 [70, 70] { R9982 += 1, R59 += 1, R60 += 1 };
  s0 -> s1 [71, 65535] { R9982 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 69] { R9982 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R9982 += 1, R59 += 1, R60 += 1 };
  s1 -> s3 [70, 70] { R9982 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [71, 65535] { R9982 += 1, R59 += 1, R60 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R9982 += 1, R59 += 1, R60 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 69] { R9984 += 1, R65 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R9983 += 1, R9984 += 1 };
  s0 -> s2 [70, 70] { R9984 += 1, R65 += 1, R66 += 1 };
  s0 -> s3 [70, 70] { R9984 += 1, R65 += 1, R66 += 1 };
  s0 -> s1 [71, 65535] { R9984 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 69] { R9984 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R9984 += 1, R65 += 1, R66 += 1 };
  s1 -> s3 [70, 70] { R9984 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [71, 65535] { R9984 += 1, R65 += 1, R66 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R9984 += 1, R65 += 1, R66 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 69] { R9986 += 1, R73 += 1, R74 += 1 };
  s0 -> s0 [0, 65535] { R9985 += 1, R9986 += 1 };
  s0 -> s2 [70, 70] { R9986 += 1, R73 += 1, R74 += 1 };
  s0 -> s3 [70, 70] { R9986 += 1, R73 += 1, R74 += 1 };
  s0 -> s1 [71, 65535] { R9986 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 69] { R9986 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R9986 += 1, R73 += 1, R74 += 1 };
  s1 -> s3 [70, 70] { R9986 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [71, 65535] { R9986 += 1, R73 += 1, R74 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R9986 += 1, R73 += 1, R74 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 69] { R10006 += 1 };
  s0 -> s0 [0, 65535] { R10005 += 1, R10006 += 1 };
  s0 -> s2 [70, 70] { R10006 += 1 };
  s0 -> s1 [71, 65535] { R10006 += 1 };
  s1 -> s1 [0, 69] { R10006 += 1 };
  s1 -> s2 [70, 70] { R10006 += 1 };
  s1 -> s1 [71, 65535] { R10006 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10006 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R10007 += 1, R10008 += 1 };
  s0 -> s1 [0, 65535] { R10008 += 1, R2 += 1 };
  s1 -> s1 [0, 65535] { R10008 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 69] { R10010 += 1 };
  s0 -> s2 [0, 65535] { R10010 += 1, R12 += 1 };
  s0 -> s0 [0, 65535] { R10009 += 1, R10010 += 1 };
  s0 -> s3 [70, 70] { R10010 += 1 };
  s0 -> s1 [71, 65535] { R10010 += 1 };
  s1 -> s1 [0, 69] { R10010 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [70, 70] { R10010 += 1 };
  s1 -> s1 [71, 65535] { R10010 += 1 };
  s2 -> s1 [0, 69] { R10010 += 1 };
  s2 -> s2 [0, 65535] { R10010 += 1, R12 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [70, 70] { R10010 += 1 };
  s2 -> s1 [71, 65535] { R10010 += 1 };
  s3 -> s3 [0, 65535] { R10010 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 69] { R10012 += 1, R9950 += 1 };
  s0 -> s2 [0, 65535] { R10012 += 1, R9949 += 1, R9950 += 1 };
  s0 -> s0 [0, 65535] { R10011 += 1, R10012 += 1 };
  s0 -> s1 [71, 65535] { R10012 += 1, R9950 += 1 };
  s1 -> s1 [0, 69] { R10012 += 1, R9950 += 1 };
  s1 -> s1 [0, 65535] { R10012 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [71, 65535] { R10012 += 1, R9950 += 1 };
  s2 -> s1 [0, 69] { R10012 += 1, R9950 += 1 };
  s2 -> s2 [0, 65535] { R10012 += 1, R9949 += 1, R9950 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [71, 65535] { R10012 += 1, R9950 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R10014 += 1, R9952 += 1, R20 += 1 };
  s0 -> s0 [0, 65535] { R10013 += 1, R10014 += 1 };
  s0 -> s2 [0, 65535] { R10014 += 1, R9951 += 1, R9952 += 1 };
  s1 -> s1 [0, 65535] { R10014 += 1, R9952 += 1, R20 += 1 };
  s1 -> s4 [0, 65535] { R10014 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10014 += 1, R9952 += 1, R20 += 1 };
  s2 -> s2 [0, 65535] { R10014 += 1, R9951 += 1, R9952 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10014 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 70] { R10016 += 1, R9954 += 1 };
  s0 -> s2 [0, 65535] { R10016 += 1, R9953 += 1, R9954 += 1 };
  s0 -> s0 [0, 65535] { R10015 += 1, R10016 += 1 };
  s0 -> s1 [75, 65535] { R10016 += 1, R9954 += 1 };
  s1 -> s1 [0, 70] { R10016 += 1, R9954 += 1 };
  s1 -> s1 [0, 65535] { R10016 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [75, 65535] { R10016 += 1, R9954 += 1 };
  s2 -> s1 [0, 70] { R10016 += 1, R9954 += 1 };
  s2 -> s2 [0, 65535] { R10016 += 1, R9953 += 1, R9954 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [75, 65535] { R10016 += 1, R9954 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R10018 += 1, R9955 += 1, R9956 += 1 };
  s0 -> s2 [0, 65535] { R10018 += 1, R9956 += 1, R84 += 1 };
  s0 -> s0 [0, 65535] { R10017 += 1, R10018 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R10018 += 1, R9955 += 1, R9956 += 1 };
  s1 -> s2 [0, 65535] { R10018 += 1, R9956 += 1, R84 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10018 += 1, R9956 += 1, R84 += 1 };
  s2 -> s4 [0, 65535] { R10018 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10018 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 74] { R10020 += 1, R9958 += 1 };
  s0 -> s2 [0, 65535] { R10020 += 1, R9957 += 1, R9958 += 1 };
  s0 -> s0 [0, 65535] { R10019 += 1, R10020 += 1 };
  s0 -> s3 [0, 65535] { R10020 += 1, R9958 += 1, R86 += 1 };
  s0 -> s1 [76, 65535] { R10020 += 1, R9958 += 1 };
  s1 -> s1 [0, 74] { R10020 += 1, R9958 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10020 += 1 };
  s1 -> s1 [76, 65535] { R10020 += 1, R9958 += 1 };
  s2 -> s1 [0, 74] { R10020 += 1, R9958 += 1 };
  s2 -> s2 [0, 65535] { R10020 += 1, R9957 += 1, R9958 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R10020 += 1, R9958 += 1, R86 += 1 };
  s2 -> s1 [76, 65535] { R10020 += 1, R9958 += 1 };
  s3 -> s1 [0, 74] { R10020 += 1, R9958 += 1 };
  s3 -> s4 [0, 65535] { R10020 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10020 += 1, R9958 += 1, R86 += 1 };
  s3 -> s1 [76, 65535] { R10020 += 1, R9958 += 1 };
  s4 -> s4 [0, 65535] { R10020 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 65535] { R10022 += 1, R9960 += 1, R90 += 1 };
  s0 -> s2 [0, 65535] { R10022 += 1, R9960 += 1 };
  s0 -> s0 [0, 65535] { R10021 += 1, R10022 += 1 };
  s0 -> s3 [0, 65535] { R10022 += 1, R9959 += 1, R9960 += 1 };
  s1 -> s5 [0, 65535] { R10022 += 1 };
  s1 -> s1 [0, 65535] { R10022 += 1, R9960 += 1, R90 += 1 };
  s1 -> s2 [0, 65535] { R10022 += 1, R9960 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R10022 += 1 };
  s2 -> s2 [0, 65535] { R10022 += 1, R9960 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R10022 += 1, R9960 += 1, R90 += 1 };
  s3 -> s2 [0, 65535] { R10022 += 1, R9960 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10022 += 1, R9959 += 1, R9960 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10022 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s0 [0, 65535] { R10023 += 1, R10024 += 1 };
  s0 -> s1 [0, 65535] { R10024 += 1, R9962 += 1, R95 += 1, R96 += 1 };
  s0 -> s2 [0, 65535] { R10024 += 1, R9961 += 1, R9962 += 1 };
  s0 -> s3 [0, 65535] { R10024 += 1, R9962 += 1, R94 += 1, R95 += 1 };
  s1 -> s4 [0, 65535] { R10024 += 1 };
  s1 -> s1 [0, 65535] { R10024 += 1, R9962 += 1, R95 += 1, R96 += 1 };
  s1 -> s6 [0, 65535] { R10024 += 1, R9962 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R10024 += 1, R9962 += 1, R95 += 1, R96 += 1 };
  s2 -> s2 [0, 65535] { R10024 += 1, R9961 += 1, R9962 += 1 };
  s2 -> s3 [0, 65535] { R10024 += 1, R9962 += 1, R94 += 1, R95 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s4 [0, 65535] { R10024 += 1 };
  s3 -> s1 [0, 65535] { R10024 += 1, R9962 += 1, R95 += 1, R96 += 1 };
  s3 -> s3 [0, 65535] { R10024 += 1, R9962 += 1, R94 += 1, R95 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10024 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R10024 += 1 };
  s6 -> s6 [0, 65535] { R10024 += 1, R9962 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 74] { R10026 += 1, R9964 += 1, R6809 += 1 };
  s0 -> s2 [0, 65535] { R10026 += 1, R9964 += 1 };
  s0 -> s3 [0, 65535] { R10026 += 1, R9963 += 1, R9964 += 1 };
  s0 -> s4 [0, 65535] { R10026 += 1, R9964 += 1, R6809 += 1, R6810 += 1 };
  s0 -> s0 [0, 65535] { R10025 += 1, R10026 += 1 };
  s0 -> s1 [76, 65535] { R10026 += 1, R9964 += 1, R6809 += 1 };
  s1 -> s1 [0, 74] { R10026 += 1, R9964 += 1, R6809 += 1 };
  s1 -> s1 [0, 65535] { R10026 += 1, R9964 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R10026 += 1 };
  s1 -> s1 [76, 65535] { R10026 += 1, R9964 += 1, R6809 += 1 };
  s2 -> s2 [0, 65535] { R10026 += 1, R9964 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R10026 += 1 };
  s3 -> s1 [0, 74] { R10026 += 1, R9964 += 1, R6809 += 1 };
  s3 -> s2 [0, 65535] { R10026 += 1, R9964 += 1 };
  s3 -> s3 [0, 65535] { R10026 += 1, R9963 += 1, R9964 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s4 [0, 65535] { R10026 += 1, R9964 += 1, R6809 += 1, R6810 += 1 };
  s3 -> s1 [76, 65535] { R10026 += 1, R9964 += 1, R6809 += 1 };
  s4 -> s1 [0, 74] { R10026 += 1, R9964 += 1, R6809 += 1 };
  s4 -> s2 [0, 65535] { R10026 += 1, R9964 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R10026 += 1 };
  s4 -> s4 [0, 65535] { R10026 += 1, R9964 += 1, R6809 += 1, R6810 += 1 };
  s4 -> s1 [76, 65535] { R10026 += 1, R9964 += 1, R6809 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10026 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 74] { R10028 += 1, R9966 += 1, R9606 += 1, R9608 += 1 };
  s0 -> s0 [0, 65535] { R10027 += 1, R10028 += 1 };
  s0 -> s2 [0, 65535] { R10028 += 1, R9966 += 1, R9606 += 1, R9607 += 1, R9608 += 1 };
  s0 -> s3 [0, 65535] { R10028 += 1, R9965 += 1, R9966 += 1 };
  s0 -> s4 [75, 75] { R10028 += 1, R9966 += 1, R9606 += 1, R9608 += 1 };
  s0 -> s1 [76, 65535] { R10028 += 1, R9966 += 1, R9606 += 1, R9608 += 1 };
  s1 -> s1 [0, 74] { R10028 += 1, R9966 += 1, R9606 += 1, R9608 += 1 };
  s1 -> s4 [75, 75] { R10028 += 1, R9966 += 1, R9606 += 1, R9608 += 1 };
  s1 -> s1 [76, 65535] { R10028 += 1, R9966 += 1, R9606 += 1, R9608 += 1 };
  s2 -> s1 [0, 74] { R10028 += 1, R9966 += 1, R9606 += 1, R9608 += 1 };
  s2 -> s2 [0, 65535] { R10028 += 1, R9966 += 1, R9606 += 1, R9607 += 1, R9608 += 1 };
  s2 -> s4 [75, 75] { R10028 += 1, R9966 += 1, R9606 += 1, R9608 += 1 };
  s2 -> s1 [76, 65535] { R10028 += 1, R9966 += 1, R9606 += 1, R9608 += 1 };
  s3 -> s1 [0, 74] { R10028 += 1, R9966 += 1, R9606 += 1, R9608 += 1 };
  s3 -> s2 [0, 65535] { R10028 += 1, R9966 += 1, R9606 += 1, R9607 += 1, R9608 += 1 };
  s3 -> s3 [0, 65535] { R10028 += 1, R9965 += 1, R9966 += 1 };
  s3 -> s4 [75, 75] { R10028 += 1, R9966 += 1, R9606 += 1, R9608 += 1 };
  s3 -> s1 [76, 65535] { R10028 += 1, R9966 += 1, R9606 += 1, R9608 += 1 };
  s4 -> s5 [0, 65535] { R10028 += 1 };
  s4 -> s4 [0, 65535] { R10028 += 1, R9966 += 1, R9606 += 1, R9608 += 1 };
  s4 -> s6 [0, 65535] { R10028 += 1, R9966 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s8 [0, 65535] { R10028 += 1, R9966 += 1, R9606 += 1 };
  s5 -> s5 [0, 65535] { R10028 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s5 [0, 65535] { R10028 += 1 };
  s6 -> s6 [0, 65535] { R10028 += 1, R9966 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  s8 -> s5 [0, 65535] { R10028 += 1 };
  s8 -> s6 [0, 65535] { R10028 += 1, R9966 += 1 };
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R10028 += 1, R9966 += 1, R9606 += 1 };
  accepting s4, s8, s5, s6, s7;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 65535] { R10030 += 1, R9968 += 1, R9945 += 1, R9947 += 1, R9948 += 1 };
  s0 -> s2 [0, 65535] { R10030 += 1, R9967 += 1, R9968 += 1 };
  s0 -> s0 [0, 65535] { R10029 += 1, R10030 += 1 };
  s0 -> s3 [0, 65535] { R10030 += 1, R9968 += 1, R9945 += 1 };
  s0 -> s4 [0, 65535] { R10030 += 1, R9968 += 1 };
  s1 -> s1 [0, 65535] { R10030 += 1, R9968 += 1, R9945 += 1, R9947 += 1, R9948 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R10030 += 1, R9968 += 1, R9945 += 1 };
  s1 -> s6 [0, 65535] { R10030 += 1 };
  s1 -> s4 [0, 65535] { R10030 += 1, R9968 += 1 };
  s2 -> s1 [0, 65535] { R10030 += 1, R9968 += 1, R9945 += 1, R9947 += 1, R9948 += 1 };
  s2 -> s2 [0, 65535] { R10030 += 1, R9967 += 1, R9968 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R10030 += 1, R9968 += 1, R9945 += 1 };
  s2 -> s4 [0, 65535] { R10030 += 1, R9968 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10030 += 1, R9968 += 1, R9945 += 1 };
  s3 -> s6 [0, 65535] { R10030 += 1 };
  s3 -> s4 [0, 65535] { R10030 += 1, R9968 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R10030 += 1 };
  s4 -> s4 [0, 65535] { R10030 += 1, R9968 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10030 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R10032 += 1, R9987 += 1, R9988 += 1 };
  s0 -> s0 [0, 65535] { R10031 += 1, R10032 += 1 };
  s0 -> s2 [0, 65535] { R10032 += 1, R9988 += 1, R21 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R10032 += 1, R9987 += 1, R9988 += 1 };
  s1 -> s2 [0, 65535] { R10032 += 1, R9988 += 1, R21 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R10032 += 1 };
  s2 -> s2 [0, 65535] { R10032 += 1, R9988 += 1, R21 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10032 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 69] { R10034 += 1, R9990 += 1 };
  s0 -> s0 [0, 65535] { R10033 += 1, R10034 += 1 };
  s0 -> s2 [0, 65535] { R10034 += 1, R9989 += 1, R9990 += 1 };
  s0 -> s3 [70, 70] { R10034 += 1, R9990 += 1 };
  s0 -> s4 [70, 70] { R10034 += 1, R9990 += 1 };
  s0 -> s5 [75, 75] { R10034 += 1, R9990 += 1 };
  s0 -> s1 [76, 65535] { R10034 += 1, R9990 += 1 };
  s1 -> s1 [0, 69] { R10034 += 1, R9990 += 1 };
  s1 -> s3 [70, 70] { R10034 += 1, R9990 += 1 };
  s1 -> s4 [70, 70] { R10034 += 1, R9990 += 1 };
  s1 -> s5 [75, 75] { R10034 += 1, R9990 += 1 };
  s1 -> s1 [76, 65535] { R10034 += 1, R9990 += 1 };
  s2 -> s1 [0, 69] { R10034 += 1, R9990 += 1 };
  s2 -> s2 [0, 65535] { R10034 += 1, R9989 += 1, R9990 += 1 };
  s2 -> s3 [70, 70] { R10034 += 1, R9990 += 1 };
  s2 -> s4 [70, 70] { R10034 += 1, R9990 += 1 };
  s2 -> s5 [75, 75] { R10034 += 1, R9990 += 1 };
  s2 -> s1 [76, 65535] { R10034 += 1, R9990 += 1 };
  s4 -> s4 [0, 70] { R10034 += 1, R9990 += 1 };
  s4 -> s8 [75, 75] { R10034 += 1, R9990 += 1 };
  s4 -> s4 [76, 65535] { R10034 += 1, R9990 += 1 };
  s5 -> s5 [0, 69] { R10034 += 1, R9990 += 1 };
  s5 -> s5 [0, 65535] { R10034 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [70, 70] { R10034 += 1, R9990 += 1 };
  s5 -> s8 [70, 70] { R10034 += 1, R9990 += 1 };
  s5 -> s5 [75, 65535] { R10034 += 1, R9990 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R10034 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 70] { R10034 += 1, R9990 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R10034 += 1 };
  s8 -> s8 [75, 65535] { R10034 += 1, R9990 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 69] { R10036 += 1, R9992 += 1, R83 += 1 };
  s0 -> s2 [0, 65535] { R10036 += 1, R9991 += 1, R9992 += 1 };
  s0 -> s0 [0, 65535] { R10035 += 1, R10036 += 1 };
  s0 -> s3 [70, 70] { R10036 += 1, R9992 += 1, R83 += 1 };
  s0 -> s4 [70, 70] { R10036 += 1, R9992 += 1, R83 += 1 };
  s0 -> s1 [71, 65535] { R10036 += 1, R9992 += 1, R83 += 1 };
  s1 -> s1 [0, 69] { R10036 += 1, R9992 += 1, R83 += 1 };
  s1 -> s1 [0, 65535] { R10036 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [70, 70] { R10036 += 1, R9992 += 1, R83 += 1 };
  s1 -> s4 [70, 70] { R10036 += 1, R9992 += 1, R83 += 1 };
  s1 -> s1 [71, 65535] { R10036 += 1, R9992 += 1, R83 += 1 };
  s2 -> s1 [0, 69] { R10036 += 1, R9992 += 1, R83 += 1 };
  s2 -> s2 [0, 65535] { R10036 += 1, R9991 += 1, R9992 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [70, 70] { R10036 += 1, R9992 += 1, R83 += 1 };
  s2 -> s4 [70, 70] { R10036 += 1, R9992 += 1, R83 += 1 };
  s2 -> s1 [71, 65535] { R10036 += 1, R9992 += 1, R83 += 1 };
  s3 -> s3 [0, 65535] { R10036 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R10036 += 1 };
  s4 -> s4 [0, 65535] { R10036 += 1, R9992 += 1, R83 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10036 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 69] { R10038 += 1, R9994 += 1, R85 += 1 };
  s0 -> s2 [0, 65535] { R10038 += 1, R9993 += 1, R9994 += 1 };
  s0 -> s0 [0, 65535] { R10037 += 1, R10038 += 1 };
  s0 -> s3 [70, 70] { R10038 += 1, R9994 += 1, R85 += 1 };
  s0 -> s4 [70, 70] { R10038 += 1, R9994 += 1, R85 += 1 };
  s0 -> s1 [71, 65535] { R10038 += 1, R9994 += 1, R85 += 1 };
  s1 -> s1 [0, 69] { R10038 += 1, R9994 += 1, R85 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R10038 += 1 };
  s1 -> s3 [70, 70] { R10038 += 1, R9994 += 1, R85 += 1 };
  s1 -> s4 [70, 70] { R10038 += 1, R9994 += 1, R85 += 1 };
  s1 -> s1 [71, 65535] { R10038 += 1, R9994 += 1, R85 += 1 };
  s2 -> s1 [0, 69] { R10038 += 1, R9994 += 1, R85 += 1 };
  s2 -> s2 [0, 65535] { R10038 += 1, R9993 += 1, R9994 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [70, 70] { R10038 += 1, R9994 += 1, R85 += 1 };
  s2 -> s4 [70, 70] { R10038 += 1, R9994 += 1, R85 += 1 };
  s2 -> s1 [71, 65535] { R10038 += 1, R9994 += 1, R85 += 1 };
  s3 -> s3 [0, 65535] { R10038 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R10038 += 1 };
  s4 -> s4 [0, 65535] { R10038 += 1, R9994 += 1, R85 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R10038 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 69] { R10040 += 1, R9996 += 1, R87 += 1, R88 += 1 };
  s0 -> s2 [0, 69] { R10040 += 1, R9996 += 1, R88 += 1 };
  s0 -> s3 [0, 65535] { R10040 += 1, R9995 += 1, R9996 += 1 };
  s0 -> s0 [0, 65535] { R10039 += 1, R10040 += 1 };
  s0 -> s4 [70, 70] { R10040 += 1, R9996 += 1, R87 += 1, R88 += 1 };
  s0 -> s5 [70, 70] { R10040 += 1, R9996 += 1, R88 += 1 };
  s0 -> s6 [70, 70] { R10040 += 1, R9996 += 1, R88 += 1 };
  s0 -> s7 [70, 70] { R10040 += 1, R9996 += 1, R87 += 1, R88 += 1 };
  s0 -> s2 [71, 74] { R10040 += 1, R9996 += 1, R88 += 1 };
  s0 -> s1 [71, 65535] { R10040 += 1, R9996 += 1, R87 += 1, R88 += 1 };
  s0 -> s8 [75, 75] { R10040 += 1, R9996 += 1, R88 += 1 };
  s0 -> s2 [76, 65535] { R10040 += 1, R9996 += 1, R88 += 1 };
  s1 -> s1 [0, 69] { R10040 += 1, R9996 += 1, R87 += 1, R88 += 1 };
  s1 -> s2 [0, 69] { R10040 += 1, R9996 += 1, R88 += 1 };
  s1 -> s4 [70, 70] { R10040 += 1, R9996 += 1, R87 += 1, R88 += 1 };
  s1 -> s5 [70, 70] { R10040 += 1, R9996 += 1, R88 += 1 };
  s1 -> s6 [70, 70] { R10040 += 1, R9996 += 1, R88 += 1 };
  s1 -> s7 [70, 70] { R10040 += 1, R9996 += 1, R87 += 1, R88 += 1 };
  s1 -> s2 [71, 74] { R10040 += 1, R9996 += 1, R88 += 1 };
  s1 -> s1 [71, 65535] { R10040 += 1, R9996 += 1, R87 += 1, R88 += 1 };
  s1 -> s8 [75, 75] { R10040 += 1, R9996 += 1, R88 += 1 };
  s1 -> s2 [76, 65535] { R10040 += 1, R9996 += 1, R88 += 1 };
  s2 -> s2 [0, 69] { R10040 += 1, R9996 += 1, R88 += 1 };
  s2 -> s5 [70, 70] { R10040 += 1, R9996 += 1, R88 += 1 };
  s2 -> s6 [70, 70] { R10040 += 1, R9996 += 1, R88 += 1 };
  s2 -> s2 [71, 74] { R10040 += 1, R9996 += 1, R88 += 1 };
  s2 -> s8 [75, 75] { R10040 += 1, R9996 += 1, R88 += 1 };
  s2 -> s2 [76, 65535] { R10040 += 1, R9996 += 1, R88 += 1 };
  s3 -> s1 [0, 69] { R10040 += 1, R9996 += 1, R87 += 1, R88 += 1 };
  s3 -> s2 [0, 69] { R10040 += 1, R9996 += 1, R88 += 1 };
  s3 -> s3 [0, 65535] { R10040 += 1, R9995 += 1, R9996 += 1 };
  s3 -> s4 [70, 70] { R10040 += 1, R9996 += 1, R87 += 1, R88 += 1 };
  s3 -> s5 [70, 70] { R10040 += 1, R9996 += 1, R88 += 1 };
  s3 -> s6 [70, 70] { R10040 += 1, R9996 += 1, R88 += 1 };
  s3 -> s7 [70, 70] { R10040 += 1, R9996 += 1, R87 += 1, R88 += 1 };
  s3 -> s2 [71, 74] { R10040 += 1, R9996 += 1, R88 += 1 };
  s3 -> s1 [71, 65535] { R10040 += 1, R9996 += 1, R87 += 1, R88 += 1 };
  s3 -> s8 [75, 75] { R10040 += 1, R9996 += 1, R88 += 1 };
  s3 -> s2 [76, 65535] { R10040 += 1, R9996 += 1, R88 += 1 };
  s4 -> s5 [0, 74] { R10040 += 1, R9996 += 1, R88 += 1 };
  s4 -> s4 [0, 65535] { R10040 += 1, R9996 += 1, R87 += 1, R88 += 1 };
  s4 -> s10 [75, 75] { R10040 += 1, R9996 += 1, R88 += 1 };
  s4 -> s5 [76, 65535] { R10040 += 1, R9996 += 1, R88 += 1 };
  s5 -> s5 [0, 74] { R10040 += 1, R9996 += 1, R88 += 1 };
  s5 -> s10 [75, 75] { R10040 += 1, R9996 += 1, R88 += 1 };
  s5 -> s5 [76, 65535] { R10040 += 1, R9996 += 1, R88 += 1 };
  s8 -> s8 [0, 69] { R10040 += 1, R9996 += 1, R88 += 1 };
  s8 -> s8 [0, 65535] { R10040 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [70, 70] { R10040 += 1, R9996 += 1, R88 += 1 };
  s8 -> s11 [70, 70] { R10040 += 1, R9996 += 1, R88 += 1 };
  s8 -> s8 [71, 65535] { R10040 += 1, R9996 += 1, R88 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R10040 += 1, R9996 += 1, R88 += 1 };
  s10 -> s9 [0, 65535];
  s10 -> s12 [0, 65535] { R10040 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R10040 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R10040 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 69] { R10042 += 1, R9998 += 1, R91 += 1, R92 += 1 };
  s0 -> s2 [0, 65535] { R10042 += 1, R9997 += 1, R9998 += 1 };
  s0 -> s0 [0, 65535] { R10041 += 1, R10042 += 1 };
  s0 -> s3 [70, 70] { R10042 += 1, R9998 += 1, R91 += 1, R92 += 1 };
  s0 -> s4 [70, 70] { R10042 += 1, R9998 += 1, R91 += 1, R92 += 1 };
  s0 -> s1 [71, 65535] { R10042 += 1, R9998 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 69] { R10042 += 1, R9998 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 65535] { R10042 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [70, 70] { R10042 += 1, R9998 += 1, R91 += 1, R92 += 1 };
  s1 -> s4 [70, 70] { R10042 += 1, R9998 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [71, 65535] { R10042 += 1, R9998 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [0, 69] { R10042 += 1, R9998 += 1, R91 += 1, R92 += 1 };
  s2 -> s2 [0, 65535] { R10042 += 1, R9997 += 1, R9998 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [70, 70] { R10042 += 1, R9998 += 1, R91 += 1, R92 += 1 };
  s2 -> s4 [70, 70] { R10042 += 1, R9998 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [71, 65535] { R10042 += 1, R9998 += 1, R91 += 1, R92 += 1 };
  s3 -> s3 [0, 65535] { R10042 += 1, R9998 += 1, R91 += 1, R92 += 1 };
  s3 -> s6 [0, 65535] { R10042 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10042 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10042 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 69] { R10044 += 1, R10000 += 1, R6805 += 1, R6806 += 1 };
  s0 -> s2 [0, 69] { R10044 += 1, R10000 += 1, R6806 += 1, R6807 += 1 };
  s0 -> s3 [0, 65535] { R10044 += 1, R9999 += 1, R10000 += 1 };
  s0 -> s0 [0, 65535] { R10043 += 1, R10044 += 1 };
  s0 -> s4 [70, 70] { R10044 += 1, R10000 += 1, R6805 += 1, R6806 += 1 };
  s0 -> s5 [70, 70] { R10044 += 1, R10000 += 1, R6806 += 1, R6807 += 1 };
  s0 -> s6 [70, 70] { R10044 += 1, R10000 += 1, R6805 += 1, R6806 += 1 };
  s0 -> s7 [70, 70] { R10044 += 1, R10000 += 1, R6806 += 1, R6807 += 1 };
  s0 -> s1 [71, 65535] { R10044 += 1, R10000 += 1, R6805 += 1, R6806 += 1 };
  s0 -> s2 [71, 65535] { R10044 += 1, R10000 += 1, R6806 += 1, R6807 += 1 };
  s1 -> s1 [0, 69] { R10044 += 1, R10000 += 1, R6805 += 1, R6806 += 1 };
  s1 -> s2 [0, 69] { R10044 += 1, R10000 += 1, R6806 += 1, R6807 += 1 };
  s1 -> s4 [70, 70] { R10044 += 1, R10000 += 1, R6805 += 1, R6806 += 1 };
  s1 -> s5 [70, 70] { R10044 += 1, R10000 += 1, R6806 += 1, R6807 += 1 };
  s1 -> s6 [70, 70] { R10044 += 1, R10000 += 1, R6805 += 1, R6806 += 1 };
  s1 -> s7 [70, 70] { R10044 += 1, R10000 += 1, R6806 += 1, R6807 += 1 };
  s1 -> s1 [71, 65535] { R10044 += 1, R10000 += 1, R6805 += 1, R6806 += 1 };
  s1 -> s2 [71, 65535] { R10044 += 1, R10000 += 1, R6806 += 1, R6807 += 1 };
  s2 -> s2 [0, 69] { R10044 += 1, R10000 += 1, R6806 += 1, R6807 += 1 };
  s2 -> s9 [0, 65535];
  s2 -> s2 [0, 65535] { R10044 += 1 };
  s2 -> s5 [70, 70] { R10044 += 1, R10000 += 1, R6806 += 1, R6807 += 1 };
  s2 -> s7 [70, 70] { R10044 += 1, R10000 += 1, R6806 += 1, R6807 += 1 };
  s2 -> s2 [71, 65535] { R10044 += 1, R10000 += 1, R6806 += 1, R6807 += 1 };
  s3 -> s1 [0, 69] { R10044 += 1, R10000 += 1, R6805 += 1, R6806 += 1 };
  s3 -> s2 [0, 69] { R10044 += 1, R10000 += 1, R6806 += 1, R6807 += 1 };
  s3 -> s3 [0, 65535] { R10044 += 1, R9999 += 1, R10000 += 1 };
  s3 -> s4 [70, 70] { R10044 += 1, R10000 += 1, R6805 += 1, R6806 += 1 };
  s3 -> s5 [70, 70] { R10044 += 1, R10000 += 1, R6806 += 1, R6807 += 1 };
  s3 -> s6 [70, 70] { R10044 += 1, R10000 += 1, R6805 += 1, R6806 += 1 };
  s3 -> s7 [70, 70] { R10044 += 1, R10000 += 1, R6806 += 1, R6807 += 1 };
  s3 -> s1 [71, 65535] { R10044 += 1, R10000 += 1, R6805 += 1, R6806 += 1 };
  s3 -> s2 [71, 65535] { R10044 += 1, R10000 += 1, R6806 += 1, R6807 += 1 };
  s5 -> s5 [0, 65535] { R10044 += 1 };
  s5 -> s9 [0, 65535];
  s6 -> s6 [0, 65535] { R10044 += 1, R10000 += 1, R6805 += 1, R6806 += 1 };
  s6 -> s7 [0, 65535] { R10044 += 1, R10000 += 1, R6806 += 1, R6807 += 1 };
  s7 -> s8 [0, 65535] { R10044 += 1 };
  s7 -> s9 [0, 65535];
  s7 -> s7 [0, 65535] { R10044 += 1, R10000 += 1, R6806 += 1, R6807 += 1 };
  s8 -> s8 [0, 65535] { R10044 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s8, s5, s2, s9, s7;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 69] { R10046 += 1, R10002 += 1, R9602 += 1, R9603 += 1, R9604 += 1 };
  s0 -> s2 [0, 69] { R10046 += 1, R10002 += 1, R9601 += 1, R9602 += 1 };
  s0 -> s0 [0, 65535] { R10045 += 1, R10046 += 1 };
  s0 -> s3 [0, 65535] { R10046 += 1, R10001 += 1, R10002 += 1 };
  s0 -> s4 [70, 70] { R10046 += 1, R10002 += 1, R9601 += 1, R9602 += 1 };
  s0 -> s5 [70, 70] { R10046 += 1, R10002 += 1, R9601 += 1, R9602 += 1 };
  s0 -> s6 [70, 70] { R10046 += 1, R10002 += 1, R9602 += 1, R9603 += 1, R9604 += 1 };
  s0 -> s7 [70, 70] { R10046 += 1, R10002 += 1, R9602 += 1, R9603 += 1, R9604 += 1 };
  s0 -> s1 [71, 65535] { R10046 += 1, R10002 += 1, R9602 += 1, R9603 += 1, R9604 += 1 };
  s0 -> s2 [71, 65535] { R10046 += 1, R10002 += 1, R9601 += 1, R9602 += 1 };
  s1 -> s1 [0, 69] { R10046 += 1, R10002 += 1, R9602 += 1, R9603 += 1, R9604 += 1 };
  s1 -> s1 [0, 65535] { R10046 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s6 [70, 70] { R10046 += 1, R10002 += 1, R9602 += 1, R9603 += 1, R9604 += 1 };
  s1 -> s7 [70, 70] { R10046 += 1, R10002 += 1, R9602 += 1, R9603 += 1, R9604 += 1 };
  s1 -> s1 [71, 65535] { R10046 += 1, R10002 += 1, R9602 += 1, R9603 += 1, R9604 += 1 };
  s2 -> s1 [0, 69] { R10046 += 1, R10002 += 1, R9602 += 1, R9603 += 1, R9604 += 1 };
  s2 -> s2 [0, 69] { R10046 += 1, R10002 += 1, R9601 += 1, R9602 += 1 };
  s2 -> s4 [70, 70] { R10046 += 1, R10002 += 1, R9601 += 1, R9602 += 1 };
  s2 -> s5 [70, 70] { R10046 += 1, R10002 += 1, R9601 += 1, R9602 += 1 };
  s2 -> s6 [70, 70] { R10046 += 1, R10002 += 1, R9602 += 1, R9603 += 1, R9604 += 1 };
  s2 -> s7 [70, 70] { R10046 += 1, R10002 += 1, R9602 += 1, R9603 += 1, R9604 += 1 };
  s2 -> s1 [71, 65535] { R10046 += 1, R10002 += 1, R9602 += 1, R9603 += 1, R9604 += 1 };
  s2 -> s2 [71, 65535] { R10046 += 1, R10002 += 1, R9601 += 1, R9602 += 1 };
  s3 -> s1 [0, 69] { R10046 += 1, R10002 += 1, R9602 += 1, R9603 += 1, R9604 += 1 };
  s3 -> s2 [0, 69] { R10046 += 1, R10002 += 1, R9601 += 1, R9602 += 1 };
  s3 -> s3 [0, 65535] { R10046 += 1, R10001 += 1, R10002 += 1 };
  s3 -> s4 [70, 70] { R10046 += 1, R10002 += 1, R9601 += 1, R9602 += 1 };
  s3 -> s5 [70, 70] { R10046 += 1, R10002 += 1, R9601 += 1, R9602 += 1 };
  s3 -> s6 [70, 70] { R10046 += 1, R10002 += 1, R9602 += 1, R9603 += 1, R9604 += 1 };
  s3 -> s7 [70, 70] { R10046 += 1, R10002 += 1, R9602 += 1, R9603 += 1, R9604 += 1 };
  s3 -> s1 [71, 65535] { R10046 += 1, R10002 += 1, R9602 += 1, R9603 += 1, R9604 += 1 };
  s3 -> s2 [71, 65535] { R10046 += 1, R10002 += 1, R9601 += 1, R9602 += 1 };
  s5 -> s5 [0, 65535] { R10046 += 1, R10002 += 1, R9601 += 1, R9602 += 1 };
  s5 -> s7 [0, 65535] { R10046 += 1, R10002 += 1, R9602 += 1, R9603 += 1, R9604 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R10046 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R10046 += 1, R10002 += 1, R9602 += 1, R9603 += 1, R9604 += 1 };
  s7 -> s9 [0, 65535] { R10046 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R10046 += 1 };
  accepting s8, s9, s6, s1, s7;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 69] { R10048 += 1, R10004 += 1, R9939 += 1, R9940 += 1 };
  s0 -> s2 [0, 69] { R10048 += 1, R10004 += 1, R9940 += 1, R9942 += 1, R9943 += 1 };
  s0 -> s3 [0, 69] { R10048 += 1, R10004 += 1, R9940 += 1, R9941 += 1, R9942 += 1 };
  s0 -> s0 [0, 65535] { R10047 += 1, R10048 += 1 };
  s0 -> s4 [0, 65535] { R10048 += 1, R10003 += 1, R10004 += 1 };
  s0 -> s5 [70, 70] { R10048 += 1, R10004 += 1, R9940 += 1, R9942 += 1, R9943 += 1 };
  s0 -> s6 [70, 70] { R10048 += 1, R10004 += 1, R9940 += 1, R9941 += 1, R9942 += 1 };
  s0 -> s7 [70, 70] { R10048 += 1, R10004 += 1, R9940 += 1, R9942 += 1, R9943 += 1 };
  s0 -> s8 [70, 70] { R10048 += 1, R10004 += 1, R9940 += 1, R9941 += 1, R9942 += 1 };
  s0 -> s9 [70, 70] { R10048 += 1, R10004 += 1, R9939 += 1, R9940 += 1 };
  s0 -> s10 [70, 70] { R10048 += 1, R10004 += 1, R9939 += 1, R9940 += 1 };
  s0 -> s1 [71, 65535] { R10048 += 1, R10004 += 1, R9939 += 1, R9940 += 1 };
  s0 -> s2 [71, 65535] { R10048 += 1, R10004 += 1, R9940 += 1, R9942 += 1, R9943 += 1 };
  s0 -> s3 [71, 65535] { R10048 += 1, R10004 += 1, R9940 += 1, R9941 += 1, R9942 += 1 };
  s1 -> s1 [0, 69] { R10048 += 1, R10004 += 1, R9939 += 1, R9940 += 1 };
  s1 -> s2 [0, 69] { R10048 += 1, R10004 += 1, R9940 += 1, R9942 += 1, R9943 += 1 };
  s1 -> s3 [0, 69] { R10048 += 1, R10004 += 1, R9940 += 1, R9941 += 1, R9942 += 1 };
  s1 -> s5 [70, 70] { R10048 += 1, R10004 += 1, R9940 += 1, R9942 += 1, R9943 += 1 };
  s1 -> s6 [70, 70] { R10048 += 1, R10004 += 1, R9940 += 1, R9941 += 1, R9942 += 1 };
  s1 -> s7 [70, 70] { R10048 += 1, R10004 += 1, R9940 += 1, R9942 += 1, R9943 += 1 };
  s1 -> s8 [70, 70] { R10048 += 1, R10004 += 1, R9940 += 1, R9941 += 1, R9942 += 1 };
  s1 -> s9 [70, 70] { R10048 += 1, R10004 += 1, R9939 += 1, R9940 += 1 };
  s1 -> s10 [70, 70] { R10048 += 1, R10004 += 1, R9939 += 1, R9940 += 1 };
  s1 -> s1 [71, 65535] { R10048 += 1, R10004 += 1, R9939 += 1, R9940 += 1 };
  s1 -> s2 [71, 65535] { R10048 += 1, R10004 += 1, R9940 += 1, R9942 += 1, R9943 += 1 };
  s1 -> s3 [71, 65535] { R10048 += 1, R10004 += 1, R9940 += 1, R9941 += 1, R9942 += 1 };
  s2 -> s2 [0, 69] { R10048 += 1, R10004 += 1, R9940 += 1, R9942 += 1, R9943 += 1 };
  s2 -> s2 [0, 65535] { R10048 += 1 };
  s2 -> s11 [0, 65535];
  s2 -> s5 [70, 70] { R10048 += 1, R10004 += 1, R9940 += 1, R9942 += 1, R9943 += 1 };
  s2 -> s7 [70, 70] { R10048 += 1, R10004 += 1, R9940 += 1, R9942 += 1, R9943 += 1 };
  s2 -> s2 [71, 65535] { R10048 += 1, R10004 += 1, R9940 += 1, R9942 += 1, R9943 += 1 };
  s3 -> s2 [0, 69] { R10048 += 1, R10004 += 1, R9940 += 1, R9942 += 1, R9943 += 1 };
  s3 -> s3 [0, 69] { R10048 += 1, R10004 += 1, R9940 += 1, R9941 += 1, R9942 += 1 };
  s3 -> s5 [70, 70] { R10048 += 1, R10004 += 1, R9940 += 1, R9942 += 1, R9943 += 1 };
  s3 -> s6 [70, 70] { R10048 += 1, R10004 += 1, R9940 += 1, R9941 += 1, R9942 += 1 };
  s3 -> s7 [70, 70] { R10048 += 1, R10004 += 1, R9940 += 1, R9942 += 1, R9943 += 1 };
  s3 -> s8 [70, 70] { R10048 += 1, R10004 += 1, R9940 += 1, R9941 += 1, R9942 += 1 };
  s3 -> s2 [71, 65535] { R10048 += 1, R10004 += 1, R9940 += 1, R9942 += 1, R9943 += 1 };
  s3 -> s3 [71, 65535] { R10048 += 1, R10004 += 1, R9940 += 1, R9941 += 1, R9942 += 1 };
  s4 -> s1 [0, 69] { R10048 += 1, R10004 += 1, R9939 += 1, R9940 += 1 };
  s4 -> s2 [0, 69] { R10048 += 1, R10004 += 1, R9940 += 1, R9942 += 1, R9943 += 1 };
  s4 -> s3 [0, 69] { R10048 += 1, R10004 += 1, R9940 += 1, R9941 += 1, R9942 += 1 };
  s4 -> s4 [0, 65535] { R10048 += 1, R10003 += 1, R10004 += 1 };
  s4 -> s5 [70, 70] { R10048 += 1, R10004 += 1, R9940 += 1, R9942 += 1, R9943 += 1 };
  s4 -> s6 [70, 70] { R10048 += 1, R10004 += 1, R9940 += 1, R9941 += 1, R9942 += 1 };
  s4 -> s7 [70, 70] { R10048 += 1, R10004 += 1, R9940 += 1, R9942 += 1, R9943 += 1 };
  s4 -> s8 [70, 70] { R10048 += 1, R10004 += 1, R9940 += 1, R9941 += 1, R9942 += 1 };
  s4 -> s9 [70, 70] { R10048 += 1, R10004 += 1, R9939 += 1, R9940 += 1 };
  s4 -> s10 [70, 70] { R10048 += 1, R10004 += 1, R9939 += 1, R9940 += 1 };
  s4 -> s1 [71, 65535] { R10048 += 1, R10004 += 1, R9939 += 1, R9940 += 1 };
  s4 -> s2 [71, 65535] { R10048 += 1, R10004 += 1, R9940 += 1, R9942 += 1, R9943 += 1 };
  s4 -> s3 [71, 65535] { R10048 += 1, R10004 += 1, R9940 += 1, R9941 += 1, R9942 += 1 };
  s5 -> s5 [0, 65535] { R10048 += 1, R10004 += 1, R9940 += 1, R9942 += 1, R9943 += 1 };
  s5 -> s12 [0, 65535] { R10048 += 1 };
  s5 -> s11 [0, 65535];
  s6 -> s5 [0, 65535] { R10048 += 1, R10004 += 1, R9940 += 1, R9942 += 1, R9943 += 1 };
  s6 -> s6 [0, 65535] { R10048 += 1, R10004 += 1, R9940 += 1, R9941 += 1, R9942 += 1 };
  s7 -> s7 [0, 65535] { R10048 += 1 };
  s7 -> s11 [0, 65535];
  s9 -> s5 [0, 65535] { R10048 += 1, R10004 += 1, R9940 += 1, R9942 += 1, R9943 += 1 };
  s9 -> s6 [0, 65535] { R10048 += 1, R10004 += 1, R9940 += 1, R9941 += 1, R9942 += 1 };
  s9 -> s9 [0, 65535] { R10048 += 1, R10004 += 1, R9939 += 1, R9940 += 1 };
  s11 -> s11 [0, 65535];
  s12 -> s12 [0, 65535] { R10048 += 1 };
  s12 -> s11 [0, 65535];
  accepting s12, s5, s2, s7, s11;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [102, 102];
  accepting s1;
};
};
constraint R2 = R9966 && R3 = R10048 && R23 - R10048 = -1 && R24 = R10048 && R25 - R10048 = -1 && R26 = R10048 && R27 = 0 && R28 = 1 && R29 = 0 && R30 = 1 && R45 + R84 + R83 + -1*R9606 + -1*R9602 - R66 = 0 && R49 + R89 + R87 = 0 && R50 + R90 + R88 + -1*R9606 + -1*R9602 - R66 = 0 && R55 + R96 + R93 + -1*R9608 + -1*R9604 - R68 = 0 && R65 + R9605 + R9601 = 0 && R67 + R9607 + R9603 = 0 && R9965 = 0 && R9989 = 0 && R9990 = 0 && R9995 = 0 && R9996 = 0 && R9999 = 0 && R10000 = 0 && R10001 = 0 && R10002 = 0 && R10003 = 0 && R10004 = 0 && R10005 = 0 && R10006 = R10048 && R10007 = 0 && R10008 = R10048 && R10009 = 0 && R10010 = R10048 && R10011 = 0 && R10012 = R10048 && R10013 = 0 && R10014 = R10048 && R10015 = 0 && R10016 = R10048 && R10017 = 0 && R10018 = R10048 && R10019 = 0 && R10020 = R10048 && R10021 = 0 && R10022 = R10048 && R10023 = 0 && R10024 = R10048 && R10025 = 0 && R10026 = R10048 && R10027 = 0 && R10028 = R10048 && R10029 = 0 && R10030 = R10048 && R10031 = 0 && R10032 = R10048 && R10033 = 0 && R10034 = R10048 && R10035 = 0 && R10036 = R10048 && R10037 = 0 && R10038 = R10048 && R10039 = 0 && R10040 = R10048 && R10041 = 0 && R10042 = R10048 && R10043 = 0 && R10044 = R10048 && R10045 = 0 && R10046 = R10048 && R10047 = 0 && R12 < 1 && R15 < 1 && R16 < 1 && R47 + R86 + R85 < 1 && R61 + R6810 + R6807 < 1 && -1*R9606 + -1*R9602 - R66 < 1 && -1*R9608 + -1*R9604 - R68 < 1 && -1 < R9966 && 0 < R10048 && (R53 + R94 + R91 != 0 || R54 + R95 + R92 + -1*R9606 + -1*R9602 - R66 = 0 || R66 + R9606 + R9602 < 1) && (R59 + R6808 + R6805 != 0 || R60 + R6809 + R6806 + -1*R9606 + -1*R9602 - R66 = 0 || R66 + R9606 + R9602 < 1) && (R66 + R9606 + R9602 != 0 || ((R53 + R94 + R91 != 0 || R54 + R95 + R92 = 0 || R68 + R9608 + R9604 < 1) && (R53 + R94 + R91 = 0 || R68 + R9608 + R9604 < 1))) && (R66 + R9606 + R9602 != 0 || ((R59 + R6808 + R6805 != 0 || R60 + R6809 + R6806 = 0 || R68 + R9608 + R9604 < 1) && (R59 + R6808 + R6805 = 0 || R68 + R9608 + R9604 < 1))) && (R66 + R9606 + R9602 != 0 || ((R73 + R9944 + R9939 != 0 || R74 + R9945 + R9940 = 0 || R68 + R9608 + R9604 < 1) && (R73 + R9944 + R9939 = 0 || R68 + R9608 + R9604 < 1))) && (R68 + R9608 + R9604 != 0 || R77 + R9948 + R9943 = 0 || (R75 + R9946 + R9941 = 0 && R76 + R9947 + R9942 = 0)) && (R73 + R9944 + R9939 != 0 || R66 + R9606 + R9602 + -1*R9945 + -1*R9940 - R74 = 0 || R66 + R9606 + R9602 < 1) && (R75 + R9946 + R9941 != 0 || R68 + R9608 + R9604 + -1*R9947 + -1*R9942 - R76 = 0 || R68 + R9608 + R9604 < 1) && (R9949 != 0 || R9950 = R9966 || (R20 = 0 && R9966 = 0)) && (R9951 != 0 || R9952 = R9966 || (R20 = 0 && R9966 = 0)) && (R9953 != 0 || R9954 = R9966 || (R20 = 0 && R9966 = 0)) && (R9955 != 0 || R9956 = R9966 || (R20 = 0 && R9966 = 0)) && (R9957 != 0 || R9958 = R9966 || (R20 = 0 && R9966 = 0)) && (R9959 != 0 || R9960 = R9966 || (R20 = 0 && R9966 = 0)) && (R9961 != 0 || R9962 = R9966 || (R20 = 0 && R9966 = 0)) && (R9963 != 0 || R9964 = R9966 || (R20 = 0 && R9966 = 0)) && (R9967 != 0 || R9966 = R9968 || (R20 = 0 && R9966 = 0)) && (R21 = 0 || (R9987 = 0 && R9988 = 0)) && (R21 = 0 || (R9991 = 0 && R9992 = 0)) && (R21 = 0 || (R9993 = 0 && R9994 = 0)) && (R21 = 0 || (R9997 = 0 && R9998 = 0)) && (R22 = 0 || (R9969 = 0 && R9970 = 0)) && (R22 = 0 || (R9971 = 0 && R9972 = 0)) && (R22 = 0 || (R9973 = 0 && R9974 = 0)) && (R22 = 0 || (R9975 = 0 && R9976 = 0)) && (R22 = 0 || (R9977 = 0 && R9978 = 0)) && (R22 = 0 || (R9979 = 0 && R9980 = 0)) && (R22 = 0 || (R9981 = 0 && R9982 = 0)) && (R22 = 0 || (R9983 = 0 && R9984 = 0)) && (R22 = 0 || (R9985 = 0 && R9986 = 0)) && (R53 + R94 + R91 = 0 || R66 + R9606 + R9602 < 1) && (R59 + R6808 + R6805 = 0 || R66 + R9606 + R9602 < 1) && (R73 + R9944 + R9939 = 0 || R66 + R9606 + R9602 < 1) && (R75 + R9946 + R9941 = 0 || R68 + R9608 + R9604 < 1) && (R9949 = 0 || (R20 = 0 && R9966 = 0)) && (R9951 = 0 || (R20 = 0 && R9966 = 0)) && (R9953 = 0 || (R20 = 0 && R9966 = 0)) && (R9955 = 0 || (R20 = 0 && R9966 = 0)) && (R9957 = 0 || (R20 = 0 && R9966 = 0)) && (R9959 = 0 || (R20 = 0 && R9966 = 0)) && (R9961 = 0 || (R20 = 0 && R9966 = 0)) && (R9963 = 0 || (R20 = 0 && R9966 = 0)) && (R9967 = 0 || (R20 = 0 && R9966 = 0));
// End of Parikh automata intersection problem
