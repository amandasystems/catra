// Parikh automata intersection problem, generated by OSTRICH+
counter int R12, R15, R16, R2, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R4, R45, R47, R49, R5, R50, R53, R54, R55, R59, R60, R61, R65, R66, R67, R68, R6805, R6806, R6807, R6808, R6809, R6810, R73, R74, R75, R76, R77, R83, R84, R8485, R8486, R8487, R8488, R8489, R8490, R8491, R8492, R85, R86, R87, R8713, R8714, R8715, R8716, R8717, R8718, R8719, R8720, R8721, R8722, R8723, R8724, R8725, R8726, R8727, R8728, R8729, R8730, R8731, R8732, R8733, R8734, R8735, R8736, R8737, R8738, R8739, R8740, R8741, R8742, R8743, R8744, R8745, R8746, R8747, R8748, R8749, R8750, R8751, R8752, R8753, R8754, R8755, R8756, R8757, R8758, R8759, R8760, R8761, R8762, R8763, R8764, R8765, R8766, R8767, R8768, R8769, R8770, R8771, R8772, R8773, R8774, R8775, R8776, R8777, R8778, R8779, R8780, R8781, R8782, R8783, R8784, R8785, R8786, R8787, R8788, R8789, R8790, R8791, R8792, R8793, R8794, R8795, R8796, R8797, R8798, R8799, R88, R8800, R8801, R8802, R8803, R8804, R8805, R8806, R8807, R8808, R8809, R8810, R8811, R8812, R8813, R8814, R8815, R8816, R8817, R8818, R8819, R8820, R8821, R8822, R89, R90, R91, R92, R93, R94, R95, R96;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [70, 70];
  s0 -> s0 [71, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [70, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R15 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 69];
  s0 -> s0 [0, 65535] { R16 += 1 };
  s0 -> s2 [70, 70];
  s0 -> s1 [71, 65535];
  s1 -> s1 [0, 69];
  s1 -> s2 [70, 70];
  s1 -> s1 [71, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R24 += 1 };
  s0 -> s0 [0, 65535] { R23 += 1, R24 += 1 };
  s0 -> s2 [9, 13] { R24 += 1 };
  s0 -> s1 [14, 31] { R24 += 1 };
  s0 -> s2 [32, 32] { R24 += 1 };
  s0 -> s1 [33, 65535] { R24 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R24 += 1 };
  s2 -> s1 [0, 65535] { R24 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R25 += 1, R26 += 1 };
  s1 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R28 += 1 };
  s0 -> s0 [0, 65535] { R27 += 1, R28 += 1 };
  s0 -> s2 [9, 13] { R28 += 1 };
  s0 -> s1 [14, 31] { R28 += 1 };
  s0 -> s2 [32, 32] { R28 += 1 };
  s0 -> s1 [33, 65535] { R28 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R28 += 1 };
  s2 -> s1 [0, 65535] { R28 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R29 += 1, R30 += 1 };
  s1 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R8744 += 1, R22 += 1 };
  s0 -> s0 [0, 65535] { R8743 += 1, R8744 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R8744 += 1, R22 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 69] { R8746 += 1 };
  s0 -> s0 [0, 65535] { R8745 += 1, R8746 += 1 };
  s0 -> s2 [70, 70] { R8746 += 1 };
  s0 -> s3 [70, 70] { R8746 += 1 };
  s0 -> s1 [76, 65535] { R8746 += 1 };
  s1 -> s1 [0, 69] { R8746 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R8746 += 1 };
  s1 -> s3 [70, 70] { R8746 += 1 };
  s1 -> s1 [76, 65535] { R8746 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 70] { R8746 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [76, 65535] { R8746 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 69] { R8748 += 1, R45 += 1 };
  s0 -> s0 [0, 65535] { R8747 += 1, R8748 += 1 };
  s0 -> s2 [70, 70] { R8748 += 1, R45 += 1 };
  s0 -> s3 [70, 70] { R8748 += 1, R45 += 1 };
  s0 -> s1 [71, 65535] { R8748 += 1, R45 += 1 };
  s1 -> s1 [0, 69] { R8748 += 1, R45 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R8748 += 1, R45 += 1 };
  s1 -> s3 [70, 70] { R8748 += 1, R45 += 1 };
  s1 -> s1 [71, 65535] { R8748 += 1, R45 += 1 };
  s2 -> s2 [0, 65535] { R8748 += 1, R45 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 69] { R8750 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R8749 += 1, R8750 += 1 };
  s0 -> s2 [70, 70] { R8750 += 1, R47 += 1 };
  s0 -> s3 [70, 70] { R8750 += 1, R47 += 1 };
  s0 -> s1 [71, 65535] { R8750 += 1, R47 += 1 };
  s1 -> s1 [0, 69] { R8750 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R8750 += 1, R47 += 1 };
  s1 -> s3 [70, 70] { R8750 += 1, R47 += 1 };
  s1 -> s1 [71, 65535] { R8750 += 1, R47 += 1 };
  s2 -> s2 [0, 65535] { R8750 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 69] { R8752 += 1, R49 += 1, R50 += 1 };
  s0 -> s0 [0, 65535] { R8751 += 1, R8752 += 1 };
  s0 -> s2 [70, 70] { R8752 += 1, R49 += 1, R50 += 1 };
  s0 -> s3 [70, 70] { R8752 += 1, R49 += 1, R50 += 1 };
  s0 -> s1 [71, 65535] { R8752 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 69] { R8752 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R8752 += 1, R49 += 1, R50 += 1 };
  s1 -> s3 [70, 70] { R8752 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [71, 65535] { R8752 += 1, R49 += 1, R50 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R8752 += 1, R49 += 1, R50 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 69] { R8754 += 1, R53 += 1, R54 += 1 };
  s0 -> s0 [0, 65535] { R8753 += 1, R8754 += 1 };
  s0 -> s2 [70, 70] { R8754 += 1, R53 += 1, R54 += 1 };
  s0 -> s3 [70, 70] { R8754 += 1, R53 += 1, R54 += 1 };
  s0 -> s1 [71, 65535] { R8754 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 69] { R8754 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R8754 += 1, R53 += 1, R54 += 1 };
  s1 -> s3 [70, 70] { R8754 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [71, 65535] { R8754 += 1, R53 += 1, R54 += 1 };
  s2 -> s2 [0, 65535] { R8754 += 1, R53 += 1, R54 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 69] { R8756 += 1, R59 += 1, R60 += 1 };
  s0 -> s0 [0, 65535] { R8755 += 1, R8756 += 1 };
  s0 -> s2 [70, 70] { R8756 += 1, R59 += 1, R60 += 1 };
  s0 -> s3 [70, 70] { R8756 += 1, R59 += 1, R60 += 1 };
  s0 -> s1 [71, 65535] { R8756 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 69] { R8756 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R8756 += 1, R59 += 1, R60 += 1 };
  s1 -> s3 [70, 70] { R8756 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [71, 65535] { R8756 += 1, R59 += 1, R60 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R8756 += 1, R59 += 1, R60 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 69] { R8758 += 1, R65 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R8757 += 1, R8758 += 1 };
  s0 -> s2 [70, 70] { R8758 += 1, R65 += 1, R66 += 1 };
  s0 -> s3 [70, 70] { R8758 += 1, R65 += 1, R66 += 1 };
  s0 -> s1 [71, 65535] { R8758 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 69] { R8758 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R8758 += 1, R65 += 1, R66 += 1 };
  s1 -> s3 [70, 70] { R8758 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [71, 65535] { R8758 += 1, R65 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R8758 += 1, R65 += 1, R66 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 69] { R8760 += 1, R73 += 1, R74 += 1 };
  s0 -> s0 [0, 65535] { R8759 += 1, R8760 += 1 };
  s0 -> s2 [70, 70] { R8760 += 1, R73 += 1, R74 += 1 };
  s0 -> s3 [70, 70] { R8760 += 1, R73 += 1, R74 += 1 };
  s0 -> s1 [71, 65535] { R8760 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 69] { R8760 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R8760 += 1, R73 += 1, R74 += 1 };
  s1 -> s3 [70, 70] { R8760 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [71, 65535] { R8760 += 1, R73 += 1, R74 += 1 };
  s2 -> s2 [0, 65535] { R8760 += 1, R73 += 1, R74 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 69] { R8780 += 1 };
  s0 -> s0 [0, 65535] { R8779 += 1, R8780 += 1 };
  s0 -> s2 [70, 70] { R8780 += 1 };
  s0 -> s1 [71, 65535] { R8780 += 1 };
  s1 -> s1 [0, 69] { R8780 += 1 };
  s1 -> s2 [70, 70] { R8780 += 1 };
  s1 -> s1 [71, 65535] { R8780 += 1 };
  s2 -> s2 [0, 65535] { R8780 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R8782 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R8781 += 1, R8782 += 1 };
  s1 -> s1 [0, 65535] { R8782 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 69] { R8784 += 1 };
  s0 -> s2 [0, 65535] { R8784 += 1, R12 += 1 };
  s0 -> s0 [0, 65535] { R8783 += 1, R8784 += 1 };
  s0 -> s3 [70, 70] { R8784 += 1 };
  s0 -> s1 [71, 65535] { R8784 += 1 };
  s1 -> s1 [0, 69] { R8784 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [70, 70] { R8784 += 1 };
  s1 -> s1 [71, 65535] { R8784 += 1 };
  s2 -> s1 [0, 69] { R8784 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8784 += 1, R12 += 1 };
  s2 -> s3 [70, 70] { R8784 += 1 };
  s2 -> s1 [71, 65535] { R8784 += 1 };
  s3 -> s3 [0, 65535] { R8784 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 69] { R8786 += 1, R8724 += 1 };
  s0 -> s2 [0, 65535] { R8786 += 1, R8723 += 1, R8724 += 1 };
  s0 -> s0 [0, 65535] { R8785 += 1, R8786 += 1 };
  s0 -> s1 [71, 65535] { R8786 += 1, R8724 += 1 };
  s1 -> s1 [0, 69] { R8786 += 1, R8724 += 1 };
  s1 -> s1 [0, 65535] { R8786 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [71, 65535] { R8786 += 1, R8724 += 1 };
  s2 -> s1 [0, 69] { R8786 += 1, R8724 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R8786 += 1, R8723 += 1, R8724 += 1 };
  s2 -> s1 [71, 65535] { R8786 += 1, R8724 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R8788 += 1, R8726 += 1, R20 += 1 };
  s0 -> s0 [0, 65535] { R8787 += 1, R8788 += 1 };
  s0 -> s2 [0, 65535] { R8788 += 1, R8725 += 1, R8726 += 1 };
  s1 -> s4 [0, 65535] { R8788 += 1 };
  s1 -> s1 [0, 65535] { R8788 += 1, R8726 += 1, R20 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R8788 += 1, R8726 += 1, R20 += 1 };
  s2 -> s2 [0, 65535] { R8788 += 1, R8725 += 1, R8726 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8788 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 70] { R8790 += 1, R8728 += 1 };
  s0 -> s2 [0, 65535] { R8790 += 1, R8727 += 1, R8728 += 1 };
  s0 -> s0 [0, 65535] { R8789 += 1, R8790 += 1 };
  s0 -> s1 [75, 65535] { R8790 += 1, R8728 += 1 };
  s1 -> s1 [0, 70] { R8790 += 1, R8728 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R8790 += 1 };
  s1 -> s1 [75, 65535] { R8790 += 1, R8728 += 1 };
  s2 -> s1 [0, 70] { R8790 += 1, R8728 += 1 };
  s2 -> s2 [0, 65535] { R8790 += 1, R8727 += 1, R8728 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [75, 65535] { R8790 += 1, R8728 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s0 [0, 65535] { R8791 += 1, R8792 += 1 };
  s0 -> s1 [0, 65535] { R8792 += 1, R8729 += 1, R8730 += 1 };
  s0 -> s2 [0, 65535] { R8792 += 1, R8730 += 1, R84 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R8792 += 1, R8729 += 1, R8730 += 1 };
  s1 -> s2 [0, 65535] { R8792 += 1, R8730 += 1, R84 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R8792 += 1 };
  s2 -> s2 [0, 65535] { R8792 += 1, R8730 += 1, R84 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8792 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 74] { R8794 += 1, R8732 += 1 };
  s0 -> s2 [0, 65535] { R8794 += 1, R8731 += 1, R8732 += 1 };
  s0 -> s0 [0, 65535] { R8793 += 1, R8794 += 1 };
  s0 -> s3 [0, 65535] { R8794 += 1, R8732 += 1, R86 += 1 };
  s0 -> s1 [76, 65535] { R8794 += 1, R8732 += 1 };
  s1 -> s1 [0, 74] { R8794 += 1, R8732 += 1 };
  s1 -> s1 [0, 65535] { R8794 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [76, 65535] { R8794 += 1, R8732 += 1 };
  s2 -> s1 [0, 74] { R8794 += 1, R8732 += 1 };
  s2 -> s2 [0, 65535] { R8794 += 1, R8731 += 1, R8732 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R8794 += 1, R8732 += 1, R86 += 1 };
  s2 -> s1 [76, 65535] { R8794 += 1, R8732 += 1 };
  s3 -> s1 [0, 74] { R8794 += 1, R8732 += 1 };
  s3 -> s4 [0, 65535] { R8794 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R8794 += 1, R8732 += 1, R86 += 1 };
  s3 -> s1 [76, 65535] { R8794 += 1, R8732 += 1 };
  s4 -> s4 [0, 65535] { R8794 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 65535] { R8796 += 1, R8734 += 1 };
  s0 -> s2 [0, 65535] { R8796 += 1, R8734 += 1, R90 += 1 };
  s0 -> s0 [0, 65535] { R8795 += 1, R8796 += 1 };
  s0 -> s3 [0, 65535] { R8796 += 1, R8733 += 1, R8734 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R8796 += 1 };
  s1 -> s1 [0, 65535] { R8796 += 1, R8734 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R8796 += 1 };
  s2 -> s1 [0, 65535] { R8796 += 1, R8734 += 1 };
  s2 -> s2 [0, 65535] { R8796 += 1, R8734 += 1, R90 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R8796 += 1, R8734 += 1 };
  s3 -> s2 [0, 65535] { R8796 += 1, R8734 += 1, R90 += 1 };
  s3 -> s3 [0, 65535] { R8796 += 1, R8733 += 1, R8734 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8796 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R8798 += 1, R8736 += 1, R94 += 1, R95 += 1 };
  s0 -> s2 [0, 65535] { R8798 += 1, R8736 += 1, R95 += 1, R96 += 1 };
  s0 -> s3 [0, 65535] { R8798 += 1, R8735 += 1, R8736 += 1 };
  s0 -> s0 [0, 65535] { R8797 += 1, R8798 += 1 };
  s1 -> s5 [0, 65535] { R8798 += 1 };
  s1 -> s1 [0, 65535] { R8798 += 1, R8736 += 1, R94 += 1, R95 += 1 };
  s1 -> s2 [0, 65535] { R8798 += 1, R8736 += 1, R95 += 1, R96 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R8798 += 1 };
  s2 -> s6 [0, 65535] { R8798 += 1, R8736 += 1 };
  s2 -> s2 [0, 65535] { R8798 += 1, R8736 += 1, R95 += 1, R96 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R8798 += 1, R8736 += 1, R94 += 1, R95 += 1 };
  s3 -> s2 [0, 65535] { R8798 += 1, R8736 += 1, R95 += 1, R96 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8798 += 1, R8735 += 1, R8736 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8798 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R8798 += 1 };
  s6 -> s6 [0, 65535] { R8798 += 1, R8736 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 74] { R8800 += 1, R8738 += 1, R6809 += 1 };
  s0 -> s0 [0, 65535] { R8799 += 1, R8800 += 1 };
  s0 -> s2 [0, 65535] { R8800 += 1, R8738 += 1 };
  s0 -> s3 [0, 65535] { R8800 += 1, R8737 += 1, R8738 += 1 };
  s0 -> s4 [0, 65535] { R8800 += 1, R8738 += 1, R6809 += 1, R6810 += 1 };
  s0 -> s1 [76, 65535] { R8800 += 1, R8738 += 1, R6809 += 1 };
  s1 -> s1 [0, 74] { R8800 += 1, R8738 += 1, R6809 += 1 };
  s1 -> s5 [0, 65535] { R8800 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R8800 += 1, R8738 += 1 };
  s1 -> s1 [76, 65535] { R8800 += 1, R8738 += 1, R6809 += 1 };
  s2 -> s5 [0, 65535] { R8800 += 1 };
  s2 -> s2 [0, 65535] { R8800 += 1, R8738 += 1 };
  s2 -> s6 [0, 65535];
  s3 -> s1 [0, 74] { R8800 += 1, R8738 += 1, R6809 += 1 };
  s3 -> s2 [0, 65535] { R8800 += 1, R8738 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R8800 += 1, R8737 += 1, R8738 += 1 };
  s3 -> s4 [0, 65535] { R8800 += 1, R8738 += 1, R6809 += 1, R6810 += 1 };
  s3 -> s1 [76, 65535] { R8800 += 1, R8738 += 1, R6809 += 1 };
  s4 -> s1 [0, 74] { R8800 += 1, R8738 += 1, R6809 += 1 };
  s4 -> s5 [0, 65535] { R8800 += 1 };
  s4 -> s2 [0, 65535] { R8800 += 1, R8738 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R8800 += 1, R8738 += 1, R6809 += 1, R6810 += 1 };
  s4 -> s1 [76, 65535] { R8800 += 1, R8738 += 1, R6809 += 1 };
  s5 -> s5 [0, 65535] { R8800 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 74] { R8802 += 1, R8740 += 1, R8490 += 1, R8492 += 1 };
  s0 -> s2 [0, 65535] { R8802 += 1, R8740 += 1, R8490 += 1, R8491 += 1, R8492 += 1 };
  s0 -> s3 [0, 65535] { R8802 += 1, R8739 += 1, R8740 += 1 };
  s0 -> s4 [0, 65535] { R8802 += 1, R8740 += 1, R8489 += 1, R8490 += 1 };
  s0 -> s0 [0, 65535] { R8801 += 1, R8802 += 1 };
  s0 -> s5 [75, 75] { R8802 += 1, R8740 += 1, R8490 += 1, R8492 += 1 };
  s0 -> s1 [76, 65535] { R8802 += 1, R8740 += 1, R8490 += 1, R8492 += 1 };
  s1 -> s1 [0, 74] { R8802 += 1, R8740 += 1, R8490 += 1, R8492 += 1 };
  s1 -> s5 [75, 75] { R8802 += 1, R8740 += 1, R8490 += 1, R8492 += 1 };
  s1 -> s1 [76, 65535] { R8802 += 1, R8740 += 1, R8490 += 1, R8492 += 1 };
  s2 -> s1 [0, 74] { R8802 += 1, R8740 += 1, R8490 += 1, R8492 += 1 };
  s2 -> s2 [0, 65535] { R8802 += 1, R8740 += 1, R8490 += 1, R8491 += 1, R8492 += 1 };
  s2 -> s5 [75, 75] { R8802 += 1, R8740 += 1, R8490 += 1, R8492 += 1 };
  s2 -> s1 [76, 65535] { R8802 += 1, R8740 += 1, R8490 += 1, R8492 += 1 };
  s3 -> s1 [0, 74] { R8802 += 1, R8740 += 1, R8490 += 1, R8492 += 1 };
  s3 -> s2 [0, 65535] { R8802 += 1, R8740 += 1, R8490 += 1, R8491 += 1, R8492 += 1 };
  s3 -> s3 [0, 65535] { R8802 += 1, R8739 += 1, R8740 += 1 };
  s3 -> s4 [0, 65535] { R8802 += 1, R8740 += 1, R8489 += 1, R8490 += 1 };
  s3 -> s5 [75, 75] { R8802 += 1, R8740 += 1, R8490 += 1, R8492 += 1 };
  s3 -> s1 [76, 65535] { R8802 += 1, R8740 += 1, R8490 += 1, R8492 += 1 };
  s4 -> s1 [0, 74] { R8802 += 1, R8740 += 1, R8490 += 1, R8492 += 1 };
  s4 -> s2 [0, 65535] { R8802 += 1, R8740 += 1, R8490 += 1, R8491 += 1, R8492 += 1 };
  s4 -> s4 [0, 65535] { R8802 += 1, R8740 += 1, R8489 += 1, R8490 += 1 };
  s4 -> s5 [75, 75] { R8802 += 1, R8740 += 1, R8490 += 1, R8492 += 1 };
  s4 -> s1 [76, 65535] { R8802 += 1, R8740 += 1, R8490 += 1, R8492 += 1 };
  s5 -> s6 [0, 65535] { R8802 += 1 };
  s5 -> s7 [0, 65535] { R8802 += 1, R8740 += 1 };
  s5 -> s5 [0, 65535] { R8802 += 1, R8740 += 1, R8490 += 1, R8492 += 1 };
  s5 -> s8 [0, 65535] { R8802 += 1, R8740 += 1, R8490 += 1 };
  s5 -> s9 [0, 65535];
  s6 -> s6 [0, 65535] { R8802 += 1 };
  s6 -> s9 [0, 65535];
  s7 -> s6 [0, 65535] { R8802 += 1 };
  s7 -> s7 [0, 65535] { R8802 += 1, R8740 += 1 };
  s7 -> s9 [0, 65535];
  s8 -> s6 [0, 65535] { R8802 += 1 };
  s8 -> s7 [0, 65535] { R8802 += 1, R8740 += 1 };
  s8 -> s8 [0, 65535] { R8802 += 1, R8740 += 1, R8490 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s8, s5, s9, s6, s7;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 65535] { R8804 += 1, R8742 += 1, R8719 += 1, R8720 += 1, R8721 += 1 };
  s0 -> s2 [0, 65535] { R8804 += 1, R8742 += 1, R8719 += 1, R8721 += 1, R8722 += 1 };
  s0 -> s3 [0, 65535] { R8804 += 1, R8742 += 1, R8718 += 1, R8719 += 1 };
  s0 -> s0 [0, 65535] { R8803 += 1, R8804 += 1 };
  s0 -> s4 [0, 65535] { R8804 += 1, R8741 += 1, R8742 += 1 };
  s1 -> s1 [0, 65535] { R8804 += 1, R8742 += 1, R8719 += 1, R8720 += 1, R8721 += 1 };
  s1 -> s2 [0, 65535] { R8804 += 1, R8742 += 1, R8719 += 1, R8721 += 1, R8722 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R8804 += 1 };
  s1 -> s7 [0, 65535] { R8804 += 1, R8742 += 1 };
  s2 -> s2 [0, 65535] { R8804 += 1, R8742 += 1, R8719 += 1, R8721 += 1, R8722 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R8804 += 1 };
  s2 -> s7 [0, 65535] { R8804 += 1, R8742 += 1 };
  s2 -> s8 [0, 65535] { R8804 += 1, R8742 += 1, R8719 += 1 };
  s3 -> s1 [0, 65535] { R8804 += 1, R8742 += 1, R8719 += 1, R8720 += 1, R8721 += 1 };
  s3 -> s2 [0, 65535] { R8804 += 1, R8742 += 1, R8719 += 1, R8721 += 1, R8722 += 1 };
  s3 -> s3 [0, 65535] { R8804 += 1, R8742 += 1, R8718 += 1, R8719 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R8804 += 1 };
  s4 -> s1 [0, 65535] { R8804 += 1, R8742 += 1, R8719 += 1, R8720 += 1, R8721 += 1 };
  s4 -> s2 [0, 65535] { R8804 += 1, R8742 += 1, R8719 += 1, R8721 += 1, R8722 += 1 };
  s4 -> s3 [0, 65535] { R8804 += 1, R8742 += 1, R8718 += 1, R8719 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8804 += 1, R8741 += 1, R8742 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8804 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R8804 += 1 };
  s7 -> s7 [0, 65535] { R8804 += 1, R8742 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s6 [0, 65535] { R8804 += 1 };
  s8 -> s7 [0, 65535] { R8804 += 1, R8742 += 1 };
  s8 -> s8 [0, 65535] { R8804 += 1, R8742 += 1, R8719 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s0 [0, 65535] { R8805 += 1, R8806 += 1 };
  s0 -> s1 [0, 65535] { R8806 += 1, R8761 += 1, R8762 += 1 };
  s0 -> s2 [0, 65535] { R8806 += 1, R8762 += 1, R21 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R8806 += 1, R8761 += 1, R8762 += 1 };
  s1 -> s2 [0, 65535] { R8806 += 1, R8762 += 1, R21 += 1 };
  s2 -> s3 [0, 65535] { R8806 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8806 += 1, R8762 += 1, R21 += 1 };
  s3 -> s3 [0, 65535] { R8806 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 69] { R8808 += 1, R8764 += 1 };
  s0 -> s0 [0, 65535] { R8807 += 1, R8808 += 1 };
  s0 -> s2 [0, 65535] { R8808 += 1, R8763 += 1, R8764 += 1 };
  s0 -> s3 [70, 70] { R8808 += 1, R8764 += 1 };
  s0 -> s4 [70, 70] { R8808 += 1, R8764 += 1 };
  s0 -> s5 [75, 75] { R8808 += 1, R8764 += 1 };
  s0 -> s1 [76, 65535] { R8808 += 1, R8764 += 1 };
  s1 -> s1 [0, 69] { R8808 += 1, R8764 += 1 };
  s1 -> s3 [70, 70] { R8808 += 1, R8764 += 1 };
  s1 -> s4 [70, 70] { R8808 += 1, R8764 += 1 };
  s1 -> s5 [75, 75] { R8808 += 1, R8764 += 1 };
  s1 -> s1 [76, 65535] { R8808 += 1, R8764 += 1 };
  s2 -> s1 [0, 69] { R8808 += 1, R8764 += 1 };
  s2 -> s2 [0, 65535] { R8808 += 1, R8763 += 1, R8764 += 1 };
  s2 -> s3 [70, 70] { R8808 += 1, R8764 += 1 };
  s2 -> s4 [70, 70] { R8808 += 1, R8764 += 1 };
  s2 -> s5 [75, 75] { R8808 += 1, R8764 += 1 };
  s2 -> s1 [76, 65535] { R8808 += 1, R8764 += 1 };
  s4 -> s4 [0, 70] { R8808 += 1, R8764 += 1 };
  s4 -> s7 [75, 75] { R8808 += 1, R8764 += 1 };
  s4 -> s4 [76, 65535] { R8808 += 1, R8764 += 1 };
  s5 -> s5 [0, 69] { R8808 += 1, R8764 += 1 };
  s5 -> s5 [0, 65535] { R8808 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [70, 70] { R8808 += 1, R8764 += 1 };
  s5 -> s8 [70, 70] { R8808 += 1, R8764 += 1 };
  s5 -> s5 [75, 65535] { R8808 += 1, R8764 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 70] { R8808 += 1, R8764 += 1 };
  s7 -> s7 [0, 65535] { R8808 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [75, 65535] { R8808 += 1, R8764 += 1 };
  s8 -> s8 [0, 65535] { R8808 += 1 };
  s8 -> s6 [0, 65535];
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 69] { R8810 += 1, R8766 += 1, R83 += 1 };
  s0 -> s2 [0, 65535] { R8810 += 1, R8765 += 1, R8766 += 1 };
  s0 -> s0 [0, 65535] { R8809 += 1, R8810 += 1 };
  s0 -> s3 [70, 70] { R8810 += 1, R8766 += 1, R83 += 1 };
  s0 -> s4 [70, 70] { R8810 += 1, R8766 += 1, R83 += 1 };
  s0 -> s1 [71, 65535] { R8810 += 1, R8766 += 1, R83 += 1 };
  s1 -> s1 [0, 69] { R8810 += 1, R8766 += 1, R83 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R8810 += 1 };
  s1 -> s3 [70, 70] { R8810 += 1, R8766 += 1, R83 += 1 };
  s1 -> s4 [70, 70] { R8810 += 1, R8766 += 1, R83 += 1 };
  s1 -> s1 [71, 65535] { R8810 += 1, R8766 += 1, R83 += 1 };
  s2 -> s1 [0, 69] { R8810 += 1, R8766 += 1, R83 += 1 };
  s2 -> s2 [0, 65535] { R8810 += 1, R8765 += 1, R8766 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [70, 70] { R8810 += 1, R8766 += 1, R83 += 1 };
  s2 -> s4 [70, 70] { R8810 += 1, R8766 += 1, R83 += 1 };
  s2 -> s1 [71, 65535] { R8810 += 1, R8766 += 1, R83 += 1 };
  s3 -> s3 [0, 65535] { R8810 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R8810 += 1 };
  s4 -> s4 [0, 65535] { R8810 += 1, R8766 += 1, R83 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R8810 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 69] { R8812 += 1, R8768 += 1, R85 += 1 };
  s0 -> s2 [0, 65535] { R8812 += 1, R8767 += 1, R8768 += 1 };
  s0 -> s0 [0, 65535] { R8811 += 1, R8812 += 1 };
  s0 -> s3 [70, 70] { R8812 += 1, R8768 += 1, R85 += 1 };
  s0 -> s4 [70, 70] { R8812 += 1, R8768 += 1, R85 += 1 };
  s0 -> s1 [71, 65535] { R8812 += 1, R8768 += 1, R85 += 1 };
  s1 -> s1 [0, 69] { R8812 += 1, R8768 += 1, R85 += 1 };
  s1 -> s1 [0, 65535] { R8812 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [70, 70] { R8812 += 1, R8768 += 1, R85 += 1 };
  s1 -> s4 [70, 70] { R8812 += 1, R8768 += 1, R85 += 1 };
  s1 -> s1 [71, 65535] { R8812 += 1, R8768 += 1, R85 += 1 };
  s2 -> s1 [0, 69] { R8812 += 1, R8768 += 1, R85 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R8812 += 1, R8767 += 1, R8768 += 1 };
  s2 -> s3 [70, 70] { R8812 += 1, R8768 += 1, R85 += 1 };
  s2 -> s4 [70, 70] { R8812 += 1, R8768 += 1, R85 += 1 };
  s2 -> s1 [71, 65535] { R8812 += 1, R8768 += 1, R85 += 1 };
  s3 -> s6 [0, 65535] { R8812 += 1 };
  s3 -> s3 [0, 65535] { R8812 += 1, R8768 += 1, R85 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8812 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8812 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 69] { R8814 += 1, R8770 += 1, R88 += 1 };
  s0 -> s2 [0, 69] { R8814 += 1, R8770 += 1, R87 += 1, R88 += 1 };
  s0 -> s0 [0, 65535] { R8813 += 1, R8814 += 1 };
  s0 -> s3 [0, 65535] { R8814 += 1, R8769 += 1, R8770 += 1 };
  s0 -> s4 [70, 70] { R8814 += 1, R8770 += 1, R88 += 1 };
  s0 -> s5 [70, 70] { R8814 += 1, R8770 += 1, R88 += 1 };
  s0 -> s6 [70, 70] { R8814 += 1, R8770 += 1, R87 += 1, R88 += 1 };
  s0 -> s7 [70, 70] { R8814 += 1, R8770 += 1, R87 += 1, R88 += 1 };
  s0 -> s1 [71, 74] { R8814 += 1, R8770 += 1, R88 += 1 };
  s0 -> s2 [71, 65535] { R8814 += 1, R8770 += 1, R87 += 1, R88 += 1 };
  s0 -> s8 [75, 75] { R8814 += 1, R8770 += 1, R88 += 1 };
  s0 -> s1 [76, 65535] { R8814 += 1, R8770 += 1, R88 += 1 };
  s1 -> s1 [0, 69] { R8814 += 1, R8770 += 1, R88 += 1 };
  s1 -> s4 [70, 70] { R8814 += 1, R8770 += 1, R88 += 1 };
  s1 -> s5 [70, 70] { R8814 += 1, R8770 += 1, R88 += 1 };
  s1 -> s1 [71, 74] { R8814 += 1, R8770 += 1, R88 += 1 };
  s1 -> s8 [75, 75] { R8814 += 1, R8770 += 1, R88 += 1 };
  s1 -> s1 [76, 65535] { R8814 += 1, R8770 += 1, R88 += 1 };
  s2 -> s1 [0, 69] { R8814 += 1, R8770 += 1, R88 += 1 };
  s2 -> s2 [0, 69] { R8814 += 1, R8770 += 1, R87 += 1, R88 += 1 };
  s2 -> s4 [70, 70] { R8814 += 1, R8770 += 1, R88 += 1 };
  s2 -> s5 [70, 70] { R8814 += 1, R8770 += 1, R88 += 1 };
  s2 -> s6 [70, 70] { R8814 += 1, R8770 += 1, R87 += 1, R88 += 1 };
  s2 -> s7 [70, 70] { R8814 += 1, R8770 += 1, R87 += 1, R88 += 1 };
  s2 -> s1 [71, 74] { R8814 += 1, R8770 += 1, R88 += 1 };
  s2 -> s2 [71, 65535] { R8814 += 1, R8770 += 1, R87 += 1, R88 += 1 };
  s2 -> s8 [75, 75] { R8814 += 1, R8770 += 1, R88 += 1 };
  s2 -> s1 [76, 65535] { R8814 += 1, R8770 += 1, R88 += 1 };
  s3 -> s1 [0, 69] { R8814 += 1, R8770 += 1, R88 += 1 };
  s3 -> s2 [0, 69] { R8814 += 1, R8770 += 1, R87 += 1, R88 += 1 };
  s3 -> s3 [0, 65535] { R8814 += 1, R8769 += 1, R8770 += 1 };
  s3 -> s4 [70, 70] { R8814 += 1, R8770 += 1, R88 += 1 };
  s3 -> s5 [70, 70] { R8814 += 1, R8770 += 1, R88 += 1 };
  s3 -> s6 [70, 70] { R8814 += 1, R8770 += 1, R87 += 1, R88 += 1 };
  s3 -> s7 [70, 70] { R8814 += 1, R8770 += 1, R87 += 1, R88 += 1 };
  s3 -> s1 [71, 74] { R8814 += 1, R8770 += 1, R88 += 1 };
  s3 -> s2 [71, 65535] { R8814 += 1, R8770 += 1, R87 += 1, R88 += 1 };
  s3 -> s8 [75, 75] { R8814 += 1, R8770 += 1, R88 += 1 };
  s3 -> s1 [76, 65535] { R8814 += 1, R8770 += 1, R88 += 1 };
  s5 -> s5 [0, 74] { R8814 += 1, R8770 += 1, R88 += 1 };
  s5 -> s10 [75, 75] { R8814 += 1, R8770 += 1, R88 += 1 };
  s5 -> s5 [76, 65535] { R8814 += 1, R8770 += 1, R88 += 1 };
  s7 -> s5 [0, 74] { R8814 += 1, R8770 += 1, R88 += 1 };
  s7 -> s7 [0, 65535] { R8814 += 1, R8770 += 1, R87 += 1, R88 += 1 };
  s7 -> s10 [75, 75] { R8814 += 1, R8770 += 1, R88 += 1 };
  s7 -> s5 [76, 65535] { R8814 += 1, R8770 += 1, R88 += 1 };
  s8 -> s8 [0, 69] { R8814 += 1, R8770 += 1, R88 += 1 };
  s8 -> s8 [0, 65535] { R8814 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [70, 70] { R8814 += 1, R8770 += 1, R88 += 1 };
  s8 -> s11 [70, 70] { R8814 += 1, R8770 += 1, R88 += 1 };
  s8 -> s8 [71, 65535] { R8814 += 1, R8770 += 1, R88 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s12 [0, 65535] { R8814 += 1 };
  s10 -> s10 [0, 65535] { R8814 += 1, R8770 += 1, R88 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R8814 += 1 };
  s11 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R8814 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 69] { R8816 += 1, R8772 += 1, R91 += 1, R92 += 1 };
  s0 -> s2 [0, 65535] { R8816 += 1, R8771 += 1, R8772 += 1 };
  s0 -> s0 [0, 65535] { R8815 += 1, R8816 += 1 };
  s0 -> s3 [70, 70] { R8816 += 1, R8772 += 1, R91 += 1, R92 += 1 };
  s0 -> s4 [70, 70] { R8816 += 1, R8772 += 1, R91 += 1, R92 += 1 };
  s0 -> s1 [71, 65535] { R8816 += 1, R8772 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 69] { R8816 += 1, R8772 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 65535] { R8816 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [70, 70] { R8816 += 1, R8772 += 1, R91 += 1, R92 += 1 };
  s1 -> s4 [70, 70] { R8816 += 1, R8772 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [71, 65535] { R8816 += 1, R8772 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [0, 69] { R8816 += 1, R8772 += 1, R91 += 1, R92 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R8816 += 1, R8771 += 1, R8772 += 1 };
  s2 -> s3 [70, 70] { R8816 += 1, R8772 += 1, R91 += 1, R92 += 1 };
  s2 -> s4 [70, 70] { R8816 += 1, R8772 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [71, 65535] { R8816 += 1, R8772 += 1, R91 += 1, R92 += 1 };
  s3 -> s3 [0, 65535] { R8816 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8816 += 1, R8772 += 1, R91 += 1, R92 += 1 };
  s4 -> s6 [0, 65535] { R8816 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8816 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 69] { R8818 += 1, R8774 += 1, R6805 += 1, R6806 += 1 };
  s0 -> s2 [0, 69] { R8818 += 1, R8774 += 1, R6806 += 1, R6807 += 1 };
  s0 -> s0 [0, 65535] { R8817 += 1, R8818 += 1 };
  s0 -> s3 [0, 65535] { R8818 += 1, R8773 += 1, R8774 += 1 };
  s0 -> s4 [70, 70] { R8818 += 1, R8774 += 1, R6805 += 1, R6806 += 1 };
  s0 -> s5 [70, 70] { R8818 += 1, R8774 += 1, R6805 += 1, R6806 += 1 };
  s0 -> s6 [70, 70] { R8818 += 1, R8774 += 1, R6806 += 1, R6807 += 1 };
  s0 -> s7 [70, 70] { R8818 += 1, R8774 += 1, R6806 += 1, R6807 += 1 };
  s0 -> s1 [71, 65535] { R8818 += 1, R8774 += 1, R6805 += 1, R6806 += 1 };
  s0 -> s2 [71, 65535] { R8818 += 1, R8774 += 1, R6806 += 1, R6807 += 1 };
  s1 -> s1 [0, 69] { R8818 += 1, R8774 += 1, R6805 += 1, R6806 += 1 };
  s1 -> s2 [0, 69] { R8818 += 1, R8774 += 1, R6806 += 1, R6807 += 1 };
  s1 -> s4 [70, 70] { R8818 += 1, R8774 += 1, R6805 += 1, R6806 += 1 };
  s1 -> s5 [70, 70] { R8818 += 1, R8774 += 1, R6805 += 1, R6806 += 1 };
  s1 -> s6 [70, 70] { R8818 += 1, R8774 += 1, R6806 += 1, R6807 += 1 };
  s1 -> s7 [70, 70] { R8818 += 1, R8774 += 1, R6806 += 1, R6807 += 1 };
  s1 -> s1 [71, 65535] { R8818 += 1, R8774 += 1, R6805 += 1, R6806 += 1 };
  s1 -> s2 [71, 65535] { R8818 += 1, R8774 += 1, R6806 += 1, R6807 += 1 };
  s2 -> s2 [0, 69] { R8818 += 1, R8774 += 1, R6806 += 1, R6807 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R8818 += 1 };
  s2 -> s6 [70, 70] { R8818 += 1, R8774 += 1, R6806 += 1, R6807 += 1 };
  s2 -> s7 [70, 70] { R8818 += 1, R8774 += 1, R6806 += 1, R6807 += 1 };
  s2 -> s2 [71, 65535] { R8818 += 1, R8774 += 1, R6806 += 1, R6807 += 1 };
  s3 -> s1 [0, 69] { R8818 += 1, R8774 += 1, R6805 += 1, R6806 += 1 };
  s3 -> s2 [0, 69] { R8818 += 1, R8774 += 1, R6806 += 1, R6807 += 1 };
  s3 -> s3 [0, 65535] { R8818 += 1, R8773 += 1, R8774 += 1 };
  s3 -> s4 [70, 70] { R8818 += 1, R8774 += 1, R6805 += 1, R6806 += 1 };
  s3 -> s5 [70, 70] { R8818 += 1, R8774 += 1, R6805 += 1, R6806 += 1 };
  s3 -> s6 [70, 70] { R8818 += 1, R8774 += 1, R6806 += 1, R6807 += 1 };
  s3 -> s7 [70, 70] { R8818 += 1, R8774 += 1, R6806 += 1, R6807 += 1 };
  s3 -> s1 [71, 65535] { R8818 += 1, R8774 += 1, R6805 += 1, R6806 += 1 };
  s3 -> s2 [71, 65535] { R8818 += 1, R8774 += 1, R6806 += 1, R6807 += 1 };
  s4 -> s4 [0, 65535] { R8818 += 1, R8774 += 1, R6805 += 1, R6806 += 1 };
  s4 -> s6 [0, 65535] { R8818 += 1, R8774 += 1, R6806 += 1, R6807 += 1 };
  s6 -> s9 [0, 65535] { R8818 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R8818 += 1, R8774 += 1, R6806 += 1, R6807 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R8818 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R8818 += 1 };
  s9 -> s8 [0, 65535];
  accepting s8, s2, s9, s6, s7;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 69] { R8820 += 1, R8776 += 1, R8485 += 1, R8486 += 1 };
  s0 -> s2 [0, 65535] { R8820 += 1, R8775 += 1, R8776 += 1 };
  s0 -> s0 [0, 65535] { R8819 += 1, R8820 += 1 };
  s0 -> s3 [70, 70] { R8820 += 1, R8776 += 1, R8485 += 1, R8486 += 1 };
  s0 -> s4 [70, 70] { R8820 += 1, R8776 += 1, R8485 += 1, R8486 += 1 };
  s0 -> s1 [71, 65535] { R8820 += 1, R8776 += 1, R8485 += 1, R8486 += 1 };
  s1 -> s1 [0, 69] { R8820 += 1, R8776 += 1, R8485 += 1, R8486 += 1 };
  s1 -> s1 [0, 65535] { R8820 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [70, 70] { R8820 += 1, R8776 += 1, R8485 += 1, R8486 += 1 };
  s1 -> s4 [70, 70] { R8820 += 1, R8776 += 1, R8485 += 1, R8486 += 1 };
  s1 -> s1 [71, 65535] { R8820 += 1, R8776 += 1, R8485 += 1, R8486 += 1 };
  s2 -> s1 [0, 69] { R8820 += 1, R8776 += 1, R8485 += 1, R8486 += 1 };
  s2 -> s2 [0, 65535] { R8820 += 1, R8775 += 1, R8776 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [70, 70] { R8820 += 1, R8776 += 1, R8485 += 1, R8486 += 1 };
  s2 -> s4 [70, 70] { R8820 += 1, R8776 += 1, R8485 += 1, R8486 += 1 };
  s2 -> s1 [71, 65535] { R8820 += 1, R8776 += 1, R8485 += 1, R8486 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R8820 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R8820 += 1 };
  s4 -> s4 [0, 65535] { R8820 += 1, R8776 += 1, R8485 += 1, R8486 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8820 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 69] { R8822 += 1, R8778 += 1, R8713 += 1, R8714 += 1 };
  s0 -> s2 [0, 65535] { R8822 += 1, R8777 += 1, R8778 += 1 };
  s0 -> s0 [0, 65535] { R8821 += 1, R8822 += 1 };
  s0 -> s3 [70, 70] { R8822 += 1, R8778 += 1, R8713 += 1, R8714 += 1 };
  s0 -> s4 [70, 70] { R8822 += 1, R8778 += 1, R8713 += 1, R8714 += 1 };
  s0 -> s1 [71, 65535] { R8822 += 1, R8778 += 1, R8713 += 1, R8714 += 1 };
  s1 -> s1 [0, 69] { R8822 += 1, R8778 += 1, R8713 += 1, R8714 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R8822 += 1 };
  s1 -> s3 [70, 70] { R8822 += 1, R8778 += 1, R8713 += 1, R8714 += 1 };
  s1 -> s4 [70, 70] { R8822 += 1, R8778 += 1, R8713 += 1, R8714 += 1 };
  s1 -> s1 [71, 65535] { R8822 += 1, R8778 += 1, R8713 += 1, R8714 += 1 };
  s2 -> s1 [0, 69] { R8822 += 1, R8778 += 1, R8713 += 1, R8714 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R8822 += 1, R8777 += 1, R8778 += 1 };
  s2 -> s3 [70, 70] { R8822 += 1, R8778 += 1, R8713 += 1, R8714 += 1 };
  s2 -> s4 [70, 70] { R8822 += 1, R8778 += 1, R8713 += 1, R8714 += 1 };
  s2 -> s1 [71, 65535] { R8822 += 1, R8778 += 1, R8713 += 1, R8714 += 1 };
  s3 -> s6 [0, 65535] { R8822 += 1 };
  s3 -> s3 [0, 65535] { R8822 += 1, R8778 += 1, R8713 += 1, R8714 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8822 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8822 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [102, 102];
  accepting s1;
};
};
constraint R2 = R8740 && R3 = R8822 && R23 - R8822 = -1 && R24 = R8822 && R25 - R8822 = -1 && R26 = R8822 && R27 = 0 && R28 = 1 && R29 = 0 && R30 = 1 && R45 + R84 + R83 + -1*R8490 + -1*R8486 - R66 = 0 && R49 + R89 + R87 = 0 && R50 + R90 + R88 + -1*R8490 + -1*R8486 - R66 = 0 && R55 + R96 + R93 + -1*R8492 + -1*R8488 - R68 = 0 && R65 + R8489 + R8485 = 0 && R67 + R8491 + R8487 = 0 && R8739 = 0 && R8763 = 0 && R8764 = 0 && R8769 = 0 && R8770 = 0 && R8773 = 0 && R8774 = 0 && R8779 = 0 && R8780 = R8822 && R8781 = 0 && R8782 = R8822 && R8783 = 0 && R8784 = R8822 && R8785 = 0 && R8786 = R8822 && R8787 = 0 && R8788 = R8822 && R8789 = 0 && R8790 = R8822 && R8791 = 0 && R8792 = R8822 && R8793 = 0 && R8794 = R8822 && R8795 = 0 && R8796 = R8822 && R8797 = 0 && R8798 = R8822 && R8799 = 0 && R8800 = R8822 && R8801 = 0 && R8802 = R8822 && R8803 = 0 && R8804 = R8822 && R8805 = 0 && R8806 = R8822 && R8807 = 0 && R8808 = R8822 && R8809 = 0 && R8810 = R8822 && R8811 = 0 && R8812 = R8822 && R8813 = 0 && R8814 = R8822 && R8815 = 0 && R8816 = R8822 && R8817 = 0 && R8818 = R8822 && R8819 = 0 && R8820 = R8822 && R8821 = 0 && R12 < 1 && R15 < 1 && R16 < 1 && R47 + R86 + R85 < 1 && R61 + R6810 + R6807 < 1 && -1*R8490 + -1*R8486 - R66 < 1 && -1*R8492 + -1*R8488 - R68 < 1 && -1 < R8740 && 0 < R8822 && (R53 + R94 + R91 != 0 || R54 + R95 + R92 + -1*R8490 + -1*R8486 - R66 = 0 || R66 + R8490 + R8486 < 1) && (R59 + R6808 + R6805 != 0 || R60 + R6809 + R6806 + -1*R8490 + -1*R8486 - R66 = 0 || R66 + R8490 + R8486 < 1) && (R66 + R8490 + R8486 != 0 || ((R53 + R94 + R91 != 0 || R54 + R95 + R92 = 0 || R68 + R8492 + R8488 < 1) && (R53 + R94 + R91 = 0 || R68 + R8492 + R8488 < 1))) && (R66 + R8490 + R8486 != 0 || ((R59 + R6808 + R6805 != 0 || R60 + R6809 + R6806 = 0 || R68 + R8492 + R8488 < 1) && (R59 + R6808 + R6805 = 0 || R68 + R8492 + R8488 < 1))) && (R66 + R8490 + R8486 != 0 || ((R73 + R8718 + R8713 != 0 || R74 + R8719 + R8714 = 0 || R68 + R8492 + R8488 < 1) && (R73 + R8718 + R8713 = 0 || R68 + R8492 + R8488 < 1))) && (R68 + R8492 + R8488 != 0 || R77 + R8722 + R8717 = 0 || (R75 + R8720 + R8715 = 0 && R76 + R8721 + R8716 = 0)) && (R73 + R8718 + R8713 != 0 || R66 + R8490 + R8486 + -1*R8719 + -1*R8714 - R74 = 0 || R66 + R8490 + R8486 < 1) && (R75 + R8720 + R8715 != 0 || R68 + R8492 + R8488 + -1*R8721 + -1*R8716 - R76 = 0 || R68 + R8492 + R8488 < 1) && (R8723 != 0 || R8724 = R8740 || (R20 = 0 && R8740 = 0)) && (R8725 != 0 || R8726 = R8740 || (R20 = 0 && R8740 = 0)) && (R8727 != 0 || R8728 = R8740 || (R20 = 0 && R8740 = 0)) && (R8729 != 0 || R8730 = R8740 || (R20 = 0 && R8740 = 0)) && (R8731 != 0 || R8732 = R8740 || (R20 = 0 && R8740 = 0)) && (R8733 != 0 || R8734 = R8740 || (R20 = 0 && R8740 = 0)) && (R8735 != 0 || R8736 = R8740 || (R20 = 0 && R8740 = 0)) && (R8737 != 0 || R8738 = R8740 || (R20 = 0 && R8740 = 0)) && (R8741 != 0 || R8740 = R8742 || (R20 = 0 && R8740 = 0)) && (R21 = 0 || (R8761 = 0 && R8762 = 0)) && (R21 = 0 || (R8765 = 0 && R8766 = 0)) && (R21 = 0 || (R8767 = 0 && R8768 = 0)) && (R21 = 0 || (R8771 = 0 && R8772 = 0)) && (R21 = 0 || (R8775 = 0 && R8776 = 0)) && (R21 = 0 || (R8777 = 0 && R8778 = 0)) && (R22 = 0 || (R8743 = 0 && R8744 = 0)) && (R22 = 0 || (R8745 = 0 && R8746 = 0)) && (R22 = 0 || (R8747 = 0 && R8748 = 0)) && (R22 = 0 || (R8749 = 0 && R8750 = 0)) && (R22 = 0 || (R8751 = 0 && R8752 = 0)) && (R22 = 0 || (R8753 = 0 && R8754 = 0)) && (R22 = 0 || (R8755 = 0 && R8756 = 0)) && (R22 = 0 || (R8757 = 0 && R8758 = 0)) && (R22 = 0 || (R8759 = 0 && R8760 = 0)) && (R53 + R94 + R91 = 0 || R66 + R8490 + R8486 < 1) && (R59 + R6808 + R6805 = 0 || R66 + R8490 + R8486 < 1) && (R73 + R8718 + R8713 = 0 || R66 + R8490 + R8486 < 1) && (R75 + R8720 + R8715 = 0 || R68 + R8492 + R8488 < 1) && (R8723 = 0 || (R20 = 0 && R8740 = 0)) && (R8725 = 0 || (R20 = 0 && R8740 = 0)) && (R8727 = 0 || (R20 = 0 && R8740 = 0)) && (R8729 = 0 || (R20 = 0 && R8740 = 0)) && (R8731 = 0 || (R20 = 0 && R8740 = 0)) && (R8733 = 0 || (R20 = 0 && R8740 = 0)) && (R8735 = 0 || (R20 = 0 && R8740 = 0)) && (R8737 = 0 || (R20 = 0 && R8740 = 0)) && (R8741 = 0 || (R20 = 0 && R8740 = 0));
// End of Parikh automata intersection problem
