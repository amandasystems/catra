// Parikh automata intersection problem, generated by OSTRICH+
counter int R12, R15, R16, R2, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R4, R45, R47, R49, R5, R50, R53, R54, R55, R59, R60, R61, R65, R66, R67, R68, R6805, R6806, R6807, R6808, R6809, R6810, R6811, R6812, R6813, R6814, R6815, R6816, R6817, R6818, R7149, R7150, R7151, R7152, R7153, R7154, R7155, R7156, R7157, R7158, R7159, R7160, R7161, R7162, R7163, R7164, R7165, R7166, R7167, R7168, R7169, R7170, R7171, R7172, R7173, R7174, R7175, R7176, R7177, R7178, R7179, R7180, R7181, R7182, R7183, R7184, R7185, R7186, R7187, R7188, R7189, R7190, R7191, R7192, R7193, R7194, R7195, R7196, R7197, R7198, R7199, R7200, R7201, R7202, R7203, R7204, R7205, R7206, R7207, R7208, R7209, R7210, R7211, R7212, R7213, R7214, R7215, R7216, R7217, R7218, R7219, R7220, R7221, R7222, R7223, R7224, R7225, R7226, R7227, R7228, R7229, R7230, R7231, R7232, R7233, R7234, R7235, R7236, R7237, R7238, R7239, R7240, R7241, R7242, R7243, R7244, R7245, R7246, R7247, R7248, R7249, R7250, R7251, R7252, R7253, R7254, R7255, R7256, R7257, R7258, R73, R74, R75, R76, R77, R83, R84, R85, R86, R87, R88, R89, R90, R91, R92, R93, R94, R95, R96;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [70, 70];
  s0 -> s0 [71, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [70, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R15 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 69];
  s0 -> s0 [0, 65535] { R16 += 1 };
  s0 -> s2 [70, 70];
  s0 -> s1 [71, 65535];
  s1 -> s1 [0, 69];
  s1 -> s2 [70, 70];
  s1 -> s1 [71, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R24 += 1 };
  s0 -> s0 [0, 65535] { R23 += 1, R24 += 1 };
  s0 -> s2 [9, 13] { R24 += 1 };
  s0 -> s1 [14, 31] { R24 += 1 };
  s0 -> s2 [32, 32] { R24 += 1 };
  s0 -> s1 [33, 65535] { R24 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R24 += 1 };
  s2 -> s1 [0, 65535] { R24 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R25 += 1, R26 += 1 };
  s1 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R28 += 1 };
  s0 -> s0 [0, 65535] { R27 += 1, R28 += 1 };
  s0 -> s2 [9, 13] { R28 += 1 };
  s0 -> s1 [14, 31] { R28 += 1 };
  s0 -> s2 [32, 32] { R28 += 1 };
  s0 -> s1 [33, 65535] { R28 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R28 += 1 };
  s2 -> s1 [0, 65535] { R28 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R29 += 1, R30 += 1 };
  s1 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R7179 += 1, R7180 += 1 };
  s0 -> s1 [0, 65535] { R7180 += 1, R22 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R7180 += 1, R22 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 69] { R7182 += 1 };
  s0 -> s0 [0, 65535] { R7181 += 1, R7182 += 1 };
  s0 -> s2 [70, 70] { R7182 += 1 };
  s0 -> s3 [70, 70] { R7182 += 1 };
  s0 -> s1 [76, 65535] { R7182 += 1 };
  s1 -> s1 [0, 69] { R7182 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R7182 += 1 };
  s1 -> s3 [70, 70] { R7182 += 1 };
  s1 -> s1 [76, 65535] { R7182 += 1 };
  s2 -> s2 [0, 70] { R7182 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [76, 65535] { R7182 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 69] { R7184 += 1, R45 += 1 };
  s0 -> s0 [0, 65535] { R7183 += 1, R7184 += 1 };
  s0 -> s2 [70, 70] { R7184 += 1, R45 += 1 };
  s0 -> s3 [70, 70] { R7184 += 1, R45 += 1 };
  s0 -> s1 [71, 65535] { R7184 += 1, R45 += 1 };
  s1 -> s1 [0, 69] { R7184 += 1, R45 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R7184 += 1, R45 += 1 };
  s1 -> s3 [70, 70] { R7184 += 1, R45 += 1 };
  s1 -> s1 [71, 65535] { R7184 += 1, R45 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7184 += 1, R45 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 69] { R7186 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R7185 += 1, R7186 += 1 };
  s0 -> s2 [70, 70] { R7186 += 1, R47 += 1 };
  s0 -> s3 [70, 70] { R7186 += 1, R47 += 1 };
  s0 -> s1 [71, 65535] { R7186 += 1, R47 += 1 };
  s1 -> s1 [0, 69] { R7186 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R7186 += 1, R47 += 1 };
  s1 -> s3 [70, 70] { R7186 += 1, R47 += 1 };
  s1 -> s1 [71, 65535] { R7186 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R7186 += 1, R47 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 69] { R7188 += 1, R49 += 1, R50 += 1 };
  s0 -> s0 [0, 65535] { R7187 += 1, R7188 += 1 };
  s0 -> s2 [70, 70] { R7188 += 1, R49 += 1, R50 += 1 };
  s0 -> s3 [70, 70] { R7188 += 1, R49 += 1, R50 += 1 };
  s0 -> s1 [71, 65535] { R7188 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 69] { R7188 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R7188 += 1, R49 += 1, R50 += 1 };
  s1 -> s3 [70, 70] { R7188 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [71, 65535] { R7188 += 1, R49 += 1, R50 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7188 += 1, R49 += 1, R50 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 69] { R7190 += 1, R53 += 1, R54 += 1 };
  s0 -> s0 [0, 65535] { R7189 += 1, R7190 += 1 };
  s0 -> s2 [70, 70] { R7190 += 1, R53 += 1, R54 += 1 };
  s0 -> s3 [70, 70] { R7190 += 1, R53 += 1, R54 += 1 };
  s0 -> s1 [71, 65535] { R7190 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 69] { R7190 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R7190 += 1, R53 += 1, R54 += 1 };
  s1 -> s3 [70, 70] { R7190 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [71, 65535] { R7190 += 1, R53 += 1, R54 += 1 };
  s2 -> s2 [0, 65535] { R7190 += 1, R53 += 1, R54 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 69] { R7192 += 1, R59 += 1, R60 += 1 };
  s0 -> s0 [0, 65535] { R7191 += 1, R7192 += 1 };
  s0 -> s2 [70, 70] { R7192 += 1, R59 += 1, R60 += 1 };
  s0 -> s3 [70, 70] { R7192 += 1, R59 += 1, R60 += 1 };
  s0 -> s1 [71, 65535] { R7192 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 69] { R7192 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R7192 += 1, R59 += 1, R60 += 1 };
  s1 -> s3 [70, 70] { R7192 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [71, 65535] { R7192 += 1, R59 += 1, R60 += 1 };
  s2 -> s2 [0, 65535] { R7192 += 1, R59 += 1, R60 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 69] { R7194 += 1, R65 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R7193 += 1, R7194 += 1 };
  s0 -> s2 [70, 70] { R7194 += 1, R65 += 1, R66 += 1 };
  s0 -> s3 [70, 70] { R7194 += 1, R65 += 1, R66 += 1 };
  s0 -> s1 [71, 65535] { R7194 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 69] { R7194 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R7194 += 1, R65 += 1, R66 += 1 };
  s1 -> s3 [70, 70] { R7194 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [71, 65535] { R7194 += 1, R65 += 1, R66 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7194 += 1, R65 += 1, R66 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 69] { R7196 += 1, R73 += 1, R74 += 1 };
  s0 -> s0 [0, 65535] { R7195 += 1, R7196 += 1 };
  s0 -> s2 [70, 70] { R7196 += 1, R73 += 1, R74 += 1 };
  s0 -> s3 [70, 70] { R7196 += 1, R73 += 1, R74 += 1 };
  s0 -> s1 [71, 65535] { R7196 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 69] { R7196 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R7196 += 1, R73 += 1, R74 += 1 };
  s1 -> s3 [70, 70] { R7196 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [71, 65535] { R7196 += 1, R73 += 1, R74 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7196 += 1, R73 += 1, R74 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 69] { R7216 += 1 };
  s0 -> s0 [0, 65535] { R7215 += 1, R7216 += 1 };
  s0 -> s2 [70, 70] { R7216 += 1 };
  s0 -> s1 [71, 65535] { R7216 += 1 };
  s1 -> s1 [0, 69] { R7216 += 1 };
  s1 -> s2 [70, 70] { R7216 += 1 };
  s1 -> s1 [71, 65535] { R7216 += 1 };
  s2 -> s2 [0, 65535] { R7216 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R7217 += 1, R7218 += 1 };
  s0 -> s1 [0, 65535] { R7218 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R7218 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 69] { R7220 += 1 };
  s0 -> s2 [0, 65535] { R7220 += 1, R12 += 1 };
  s0 -> s0 [0, 65535] { R7219 += 1, R7220 += 1 };
  s0 -> s3 [70, 70] { R7220 += 1 };
  s0 -> s1 [71, 65535] { R7220 += 1 };
  s1 -> s1 [0, 69] { R7220 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [70, 70] { R7220 += 1 };
  s1 -> s1 [71, 65535] { R7220 += 1 };
  s2 -> s1 [0, 69] { R7220 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R7220 += 1, R12 += 1 };
  s2 -> s3 [70, 70] { R7220 += 1 };
  s2 -> s1 [71, 65535] { R7220 += 1 };
  s3 -> s3 [0, 65535] { R7220 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 69] { R7222 += 1, R7160 += 1 };
  s0 -> s2 [0, 65535] { R7222 += 1, R7159 += 1, R7160 += 1 };
  s0 -> s0 [0, 65535] { R7221 += 1, R7222 += 1 };
  s0 -> s1 [71, 65535] { R7222 += 1, R7160 += 1 };
  s1 -> s1 [0, 69] { R7222 += 1, R7160 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R7222 += 1 };
  s1 -> s1 [71, 65535] { R7222 += 1, R7160 += 1 };
  s2 -> s1 [0, 69] { R7222 += 1, R7160 += 1 };
  s2 -> s2 [0, 65535] { R7222 += 1, R7159 += 1, R7160 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [71, 65535] { R7222 += 1, R7160 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R7224 += 1, R7162 += 1, R20 += 1 };
  s0 -> s2 [0, 65535] { R7224 += 1, R7161 += 1, R7162 += 1 };
  s0 -> s0 [0, 65535] { R7223 += 1, R7224 += 1 };
  s1 -> s1 [0, 65535] { R7224 += 1, R7162 += 1, R20 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R7224 += 1 };
  s2 -> s1 [0, 65535] { R7224 += 1, R7162 += 1, R20 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R7224 += 1, R7161 += 1, R7162 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7224 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 70] { R7226 += 1, R7164 += 1 };
  s0 -> s2 [0, 65535] { R7226 += 1, R7163 += 1, R7164 += 1 };
  s0 -> s0 [0, 65535] { R7225 += 1, R7226 += 1 };
  s0 -> s1 [75, 65535] { R7226 += 1, R7164 += 1 };
  s1 -> s1 [0, 70] { R7226 += 1, R7164 += 1 };
  s1 -> s1 [0, 65535] { R7226 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [75, 65535] { R7226 += 1, R7164 += 1 };
  s2 -> s1 [0, 70] { R7226 += 1, R7164 += 1 };
  s2 -> s2 [0, 65535] { R7226 += 1, R7163 += 1, R7164 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [75, 65535] { R7226 += 1, R7164 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R7228 += 1, R7165 += 1, R7166 += 1 };
  s0 -> s2 [0, 65535] { R7228 += 1, R7166 += 1, R84 += 1 };
  s0 -> s0 [0, 65535] { R7227 += 1, R7228 += 1 };
  s1 -> s1 [0, 65535] { R7228 += 1, R7165 += 1, R7166 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R7228 += 1, R7166 += 1, R84 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R7228 += 1, R7166 += 1, R84 += 1 };
  s2 -> s4 [0, 65535] { R7228 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7228 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 74] { R7230 += 1, R7168 += 1 };
  s0 -> s2 [0, 65535] { R7230 += 1, R7168 += 1, R86 += 1 };
  s0 -> s0 [0, 65535] { R7229 += 1, R7230 += 1 };
  s0 -> s3 [0, 65535] { R7230 += 1, R7167 += 1, R7168 += 1 };
  s0 -> s1 [76, 65535] { R7230 += 1, R7168 += 1 };
  s1 -> s1 [0, 74] { R7230 += 1, R7168 += 1 };
  s1 -> s1 [0, 65535] { R7230 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [76, 65535] { R7230 += 1, R7168 += 1 };
  s2 -> s1 [0, 74] { R7230 += 1, R7168 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R7230 += 1, R7168 += 1, R86 += 1 };
  s2 -> s5 [0, 65535] { R7230 += 1 };
  s2 -> s1 [76, 65535] { R7230 += 1, R7168 += 1 };
  s3 -> s1 [0, 74] { R7230 += 1, R7168 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R7230 += 1, R7168 += 1, R86 += 1 };
  s3 -> s3 [0, 65535] { R7230 += 1, R7167 += 1, R7168 += 1 };
  s3 -> s1 [76, 65535] { R7230 += 1, R7168 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R7230 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 65535] { R7232 += 1, R7169 += 1, R7170 += 1 };
  s0 -> s2 [0, 65535] { R7232 += 1, R7170 += 1, R90 += 1 };
  s0 -> s3 [0, 65535] { R7232 += 1, R7170 += 1 };
  s0 -> s0 [0, 65535] { R7231 += 1, R7232 += 1 };
  s1 -> s1 [0, 65535] { R7232 += 1, R7169 += 1, R7170 += 1 };
  s1 -> s2 [0, 65535] { R7232 += 1, R7170 += 1, R90 += 1 };
  s1 -> s3 [0, 65535] { R7232 += 1, R7170 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s4 [0, 65535] { R7232 += 1 };
  s2 -> s2 [0, 65535] { R7232 += 1, R7170 += 1, R90 += 1 };
  s2 -> s3 [0, 65535] { R7232 += 1, R7170 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s4 [0, 65535] { R7232 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R7232 += 1, R7170 += 1 };
  s4 -> s4 [0, 65535] { R7232 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R7234 += 1, R7172 += 1, R95 += 1, R96 += 1 };
  s0 -> s2 [0, 65535] { R7234 += 1, R7172 += 1, R94 += 1, R95 += 1 };
  s0 -> s0 [0, 65535] { R7233 += 1, R7234 += 1 };
  s0 -> s3 [0, 65535] { R7234 += 1, R7171 += 1, R7172 += 1 };
  s1 -> s1 [0, 65535] { R7234 += 1, R7172 += 1, R95 += 1, R96 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R7234 += 1, R7172 += 1 };
  s1 -> s5 [0, 65535] { R7234 += 1 };
  s2 -> s1 [0, 65535] { R7234 += 1, R7172 += 1, R95 += 1, R96 += 1 };
  s2 -> s2 [0, 65535] { R7234 += 1, R7172 += 1, R94 += 1, R95 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R7234 += 1 };
  s3 -> s1 [0, 65535] { R7234 += 1, R7172 += 1, R95 += 1, R96 += 1 };
  s3 -> s2 [0, 65535] { R7234 += 1, R7172 += 1, R94 += 1, R95 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7234 += 1, R7171 += 1, R7172 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R7234 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R7234 += 1, R7172 += 1 };
  s6 -> s5 [0, 65535] { R7234 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 74] { R7236 += 1, R7174 += 1, R6809 += 1 };
  s0 -> s2 [0, 65535] { R7236 += 1, R7174 += 1 };
  s0 -> s3 [0, 65535] { R7236 += 1, R7173 += 1, R7174 += 1 };
  s0 -> s4 [0, 65535] { R7236 += 1, R7174 += 1, R6809 += 1, R6810 += 1 };
  s0 -> s0 [0, 65535] { R7235 += 1, R7236 += 1 };
  s0 -> s1 [76, 65535] { R7236 += 1, R7174 += 1, R6809 += 1 };
  s1 -> s1 [0, 74] { R7236 += 1, R7174 += 1, R6809 += 1 };
  s1 -> s5 [0, 65535] { R7236 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R7236 += 1, R7174 += 1 };
  s1 -> s1 [76, 65535] { R7236 += 1, R7174 += 1, R6809 += 1 };
  s2 -> s2 [0, 65535] { R7236 += 1, R7174 += 1 };
  s2 -> s5 [0, 65535] { R7236 += 1 };
  s2 -> s6 [0, 65535];
  s3 -> s1 [0, 74] { R7236 += 1, R7174 += 1, R6809 += 1 };
  s3 -> s2 [0, 65535] { R7236 += 1, R7174 += 1 };
  s3 -> s3 [0, 65535] { R7236 += 1, R7173 += 1, R7174 += 1 };
  s3 -> s4 [0, 65535] { R7236 += 1, R7174 += 1, R6809 += 1, R6810 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s1 [76, 65535] { R7236 += 1, R7174 += 1, R6809 += 1 };
  s4 -> s1 [0, 74] { R7236 += 1, R7174 += 1, R6809 += 1 };
  s4 -> s2 [0, 65535] { R7236 += 1, R7174 += 1 };
  s4 -> s5 [0, 65535] { R7236 += 1 };
  s4 -> s4 [0, 65535] { R7236 += 1, R7174 += 1, R6809 += 1, R6810 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s1 [76, 65535] { R7236 += 1, R7174 += 1, R6809 += 1 };
  s5 -> s5 [0, 65535] { R7236 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R7238 += 1, R7176 += 1 };
  s0 -> s2 [0, 65535] { R7238 += 1, R7175 += 1, R7176 += 1 };
  s0 -> s3 [0, 65535] { R7238 += 1, R7176 += 1, R6816 += 1 };
  s0 -> s4 [0, 65535] { R7238 += 1, R7176 += 1, R6816 += 1, R6818 += 1 };
  s0 -> s0 [0, 65535] { R7237 += 1, R7238 += 1 };
  s1 -> s1 [0, 65535] { R7238 += 1, R7176 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R7238 += 1 };
  s2 -> s1 [0, 65535] { R7238 += 1, R7176 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R7238 += 1, R7175 += 1, R7176 += 1 };
  s2 -> s3 [0, 65535] { R7238 += 1, R7176 += 1, R6816 += 1 };
  s2 -> s4 [0, 65535] { R7238 += 1, R7176 += 1, R6816 += 1, R6818 += 1 };
  s3 -> s1 [0, 65535] { R7238 += 1, R7176 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R7238 += 1 };
  s3 -> s3 [0, 65535] { R7238 += 1, R7176 += 1, R6816 += 1 };
  s4 -> s1 [0, 65535] { R7238 += 1, R7176 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R7238 += 1 };
  s4 -> s3 [0, 65535] { R7238 += 1, R7176 += 1, R6816 += 1 };
  s4 -> s4 [0, 65535] { R7238 += 1, R7176 += 1, R6816 += 1, R6818 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7238 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s0 [0, 65535] { R7239 += 1, R7240 += 1 };
  s0 -> s1 [0, 65535] { R7240 += 1, R7178 += 1, R7155 += 1, R7157 += 1, R7158 += 1 };
  s0 -> s2 [0, 65535] { R7240 += 1, R7177 += 1, R7178 += 1 };
  s0 -> s3 [0, 65535] { R7240 += 1, R7178 += 1 };
  s0 -> s4 [0, 65535] { R7240 += 1, R7178 += 1, R7155 += 1 };
  s1 -> s5 [0, 65535] { R7240 += 1 };
  s1 -> s1 [0, 65535] { R7240 += 1, R7178 += 1, R7155 += 1, R7157 += 1, R7158 += 1 };
  s1 -> s3 [0, 65535] { R7240 += 1, R7178 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s4 [0, 65535] { R7240 += 1, R7178 += 1, R7155 += 1 };
  s2 -> s1 [0, 65535] { R7240 += 1, R7178 += 1, R7155 += 1, R7157 += 1, R7158 += 1 };
  s2 -> s2 [0, 65535] { R7240 += 1, R7177 += 1, R7178 += 1 };
  s2 -> s3 [0, 65535] { R7240 += 1, R7178 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s4 [0, 65535] { R7240 += 1, R7178 += 1, R7155 += 1 };
  s3 -> s5 [0, 65535] { R7240 += 1 };
  s3 -> s3 [0, 65535] { R7240 += 1, R7178 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R7240 += 1 };
  s4 -> s3 [0, 65535] { R7240 += 1, R7178 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R7240 += 1, R7178 += 1, R7155 += 1 };
  s5 -> s5 [0, 65535] { R7240 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R7242 += 1, R7198 += 1, R21 += 1 };
  s0 -> s2 [0, 65535] { R7242 += 1, R7197 += 1, R7198 += 1 };
  s0 -> s0 [0, 65535] { R7241 += 1, R7242 += 1 };
  s1 -> s1 [0, 65535] { R7242 += 1, R7198 += 1, R21 += 1 };
  s1 -> s4 [0, 65535] { R7242 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R7242 += 1, R7198 += 1, R21 += 1 };
  s2 -> s2 [0, 65535] { R7242 += 1, R7197 += 1, R7198 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7242 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 69] { R7244 += 1, R7200 += 1 };
  s0 -> s2 [0, 65535] { R7244 += 1, R7199 += 1, R7200 += 1 };
  s0 -> s0 [0, 65535] { R7243 += 1, R7244 += 1 };
  s0 -> s3 [70, 70] { R7244 += 1, R7200 += 1 };
  s0 -> s4 [70, 70] { R7244 += 1, R7200 += 1 };
  s0 -> s5 [75, 75] { R7244 += 1, R7200 += 1 };
  s0 -> s1 [76, 65535] { R7244 += 1, R7200 += 1 };
  s1 -> s1 [0, 69] { R7244 += 1, R7200 += 1 };
  s1 -> s3 [70, 70] { R7244 += 1, R7200 += 1 };
  s1 -> s4 [70, 70] { R7244 += 1, R7200 += 1 };
  s1 -> s5 [75, 75] { R7244 += 1, R7200 += 1 };
  s1 -> s1 [76, 65535] { R7244 += 1, R7200 += 1 };
  s2 -> s1 [0, 69] { R7244 += 1, R7200 += 1 };
  s2 -> s2 [0, 65535] { R7244 += 1, R7199 += 1, R7200 += 1 };
  s2 -> s3 [70, 70] { R7244 += 1, R7200 += 1 };
  s2 -> s4 [70, 70] { R7244 += 1, R7200 += 1 };
  s2 -> s5 [75, 75] { R7244 += 1, R7200 += 1 };
  s2 -> s1 [76, 65535] { R7244 += 1, R7200 += 1 };
  s3 -> s3 [0, 70] { R7244 += 1, R7200 += 1 };
  s3 -> s7 [75, 75] { R7244 += 1, R7200 += 1 };
  s3 -> s3 [76, 65535] { R7244 += 1, R7200 += 1 };
  s5 -> s5 [0, 69] { R7244 += 1, R7200 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R7244 += 1 };
  s5 -> s7 [70, 70] { R7244 += 1, R7200 += 1 };
  s5 -> s8 [70, 70] { R7244 += 1, R7200 += 1 };
  s5 -> s5 [75, 65535] { R7244 += 1, R7200 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 70] { R7244 += 1, R7200 += 1 };
  s7 -> s7 [0, 65535] { R7244 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [75, 65535] { R7244 += 1, R7200 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R7244 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 69] { R7246 += 1, R7202 += 1, R83 += 1 };
  s0 -> s0 [0, 65535] { R7245 += 1, R7246 += 1 };
  s0 -> s2 [0, 65535] { R7246 += 1, R7201 += 1, R7202 += 1 };
  s0 -> s3 [70, 70] { R7246 += 1, R7202 += 1, R83 += 1 };
  s0 -> s4 [70, 70] { R7246 += 1, R7202 += 1, R83 += 1 };
  s0 -> s1 [71, 65535] { R7246 += 1, R7202 += 1, R83 += 1 };
  s1 -> s1 [0, 69] { R7246 += 1, R7202 += 1, R83 += 1 };
  s1 -> s1 [0, 65535] { R7246 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [70, 70] { R7246 += 1, R7202 += 1, R83 += 1 };
  s1 -> s4 [70, 70] { R7246 += 1, R7202 += 1, R83 += 1 };
  s1 -> s1 [71, 65535] { R7246 += 1, R7202 += 1, R83 += 1 };
  s2 -> s1 [0, 69] { R7246 += 1, R7202 += 1, R83 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R7246 += 1, R7201 += 1, R7202 += 1 };
  s2 -> s3 [70, 70] { R7246 += 1, R7202 += 1, R83 += 1 };
  s2 -> s4 [70, 70] { R7246 += 1, R7202 += 1, R83 += 1 };
  s2 -> s1 [71, 65535] { R7246 += 1, R7202 += 1, R83 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R7246 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R7246 += 1 };
  s4 -> s4 [0, 65535] { R7246 += 1, R7202 += 1, R83 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7246 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 69] { R7248 += 1, R7204 += 1, R85 += 1 };
  s0 -> s2 [0, 65535] { R7248 += 1, R7203 += 1, R7204 += 1 };
  s0 -> s0 [0, 65535] { R7247 += 1, R7248 += 1 };
  s0 -> s3 [70, 70] { R7248 += 1, R7204 += 1, R85 += 1 };
  s0 -> s4 [70, 70] { R7248 += 1, R7204 += 1, R85 += 1 };
  s0 -> s1 [71, 65535] { R7248 += 1, R7204 += 1, R85 += 1 };
  s1 -> s1 [0, 69] { R7248 += 1, R7204 += 1, R85 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R7248 += 1 };
  s1 -> s3 [70, 70] { R7248 += 1, R7204 += 1, R85 += 1 };
  s1 -> s4 [70, 70] { R7248 += 1, R7204 += 1, R85 += 1 };
  s1 -> s1 [71, 65535] { R7248 += 1, R7204 += 1, R85 += 1 };
  s2 -> s1 [0, 69] { R7248 += 1, R7204 += 1, R85 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R7248 += 1, R7203 += 1, R7204 += 1 };
  s2 -> s3 [70, 70] { R7248 += 1, R7204 += 1, R85 += 1 };
  s2 -> s4 [70, 70] { R7248 += 1, R7204 += 1, R85 += 1 };
  s2 -> s1 [71, 65535] { R7248 += 1, R7204 += 1, R85 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R7248 += 1, R7204 += 1, R85 += 1 };
  s3 -> s6 [0, 65535] { R7248 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R7248 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7248 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 69] { R7250 += 1, R7206 += 1, R88 += 1 };
  s0 -> s2 [0, 69] { R7250 += 1, R7206 += 1, R87 += 1, R88 += 1 };
  s0 -> s0 [0, 65535] { R7249 += 1, R7250 += 1 };
  s0 -> s3 [0, 65535] { R7250 += 1, R7205 += 1, R7206 += 1 };
  s0 -> s4 [70, 70] { R7250 += 1, R7206 += 1, R88 += 1 };
  s0 -> s5 [70, 70] { R7250 += 1, R7206 += 1, R87 += 1, R88 += 1 };
  s0 -> s6 [70, 70] { R7250 += 1, R7206 += 1, R88 += 1 };
  s0 -> s7 [70, 70] { R7250 += 1, R7206 += 1, R87 += 1, R88 += 1 };
  s0 -> s1 [71, 74] { R7250 += 1, R7206 += 1, R88 += 1 };
  s0 -> s2 [71, 65535] { R7250 += 1, R7206 += 1, R87 += 1, R88 += 1 };
  s0 -> s8 [75, 75] { R7250 += 1, R7206 += 1, R88 += 1 };
  s0 -> s1 [76, 65535] { R7250 += 1, R7206 += 1, R88 += 1 };
  s1 -> s1 [0, 69] { R7250 += 1, R7206 += 1, R88 += 1 };
  s1 -> s4 [70, 70] { R7250 += 1, R7206 += 1, R88 += 1 };
  s1 -> s6 [70, 70] { R7250 += 1, R7206 += 1, R88 += 1 };
  s1 -> s1 [71, 74] { R7250 += 1, R7206 += 1, R88 += 1 };
  s1 -> s8 [75, 75] { R7250 += 1, R7206 += 1, R88 += 1 };
  s1 -> s1 [76, 65535] { R7250 += 1, R7206 += 1, R88 += 1 };
  s2 -> s1 [0, 69] { R7250 += 1, R7206 += 1, R88 += 1 };
  s2 -> s2 [0, 69] { R7250 += 1, R7206 += 1, R87 += 1, R88 += 1 };
  s2 -> s4 [70, 70] { R7250 += 1, R7206 += 1, R88 += 1 };
  s2 -> s5 [70, 70] { R7250 += 1, R7206 += 1, R87 += 1, R88 += 1 };
  s2 -> s6 [70, 70] { R7250 += 1, R7206 += 1, R88 += 1 };
  s2 -> s7 [70, 70] { R7250 += 1, R7206 += 1, R87 += 1, R88 += 1 };
  s2 -> s1 [71, 74] { R7250 += 1, R7206 += 1, R88 += 1 };
  s2 -> s2 [71, 65535] { R7250 += 1, R7206 += 1, R87 += 1, R88 += 1 };
  s2 -> s8 [75, 75] { R7250 += 1, R7206 += 1, R88 += 1 };
  s2 -> s1 [76, 65535] { R7250 += 1, R7206 += 1, R88 += 1 };
  s3 -> s1 [0, 69] { R7250 += 1, R7206 += 1, R88 += 1 };
  s3 -> s2 [0, 69] { R7250 += 1, R7206 += 1, R87 += 1, R88 += 1 };
  s3 -> s3 [0, 65535] { R7250 += 1, R7205 += 1, R7206 += 1 };
  s3 -> s4 [70, 70] { R7250 += 1, R7206 += 1, R88 += 1 };
  s3 -> s5 [70, 70] { R7250 += 1, R7206 += 1, R87 += 1, R88 += 1 };
  s3 -> s6 [70, 70] { R7250 += 1, R7206 += 1, R88 += 1 };
  s3 -> s7 [70, 70] { R7250 += 1, R7206 += 1, R87 += 1, R88 += 1 };
  s3 -> s1 [71, 74] { R7250 += 1, R7206 += 1, R88 += 1 };
  s3 -> s2 [71, 65535] { R7250 += 1, R7206 += 1, R87 += 1, R88 += 1 };
  s3 -> s8 [75, 75] { R7250 += 1, R7206 += 1, R88 += 1 };
  s3 -> s1 [76, 65535] { R7250 += 1, R7206 += 1, R88 += 1 };
  s5 -> s6 [0, 74] { R7250 += 1, R7206 += 1, R88 += 1 };
  s5 -> s5 [0, 65535] { R7250 += 1, R7206 += 1, R87 += 1, R88 += 1 };
  s5 -> s11 [75, 75] { R7250 += 1, R7206 += 1, R88 += 1 };
  s5 -> s6 [76, 65535] { R7250 += 1, R7206 += 1, R88 += 1 };
  s6 -> s6 [0, 74] { R7250 += 1, R7206 += 1, R88 += 1 };
  s6 -> s11 [75, 75] { R7250 += 1, R7206 += 1, R88 += 1 };
  s6 -> s6 [76, 65535] { R7250 += 1, R7206 += 1, R88 += 1 };
  s8 -> s8 [0, 69] { R7250 += 1, R7206 += 1, R88 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R7250 += 1 };
  s8 -> s10 [70, 70] { R7250 += 1, R7206 += 1, R88 += 1 };
  s8 -> s11 [70, 70] { R7250 += 1, R7206 += 1, R88 += 1 };
  s8 -> s8 [71, 65535] { R7250 += 1, R7206 += 1, R88 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R7250 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R7250 += 1, R7206 += 1, R88 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s12 [0, 65535] { R7250 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R7250 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 69] { R7252 += 1, R7208 += 1, R91 += 1, R92 += 1 };
  s0 -> s2 [0, 65535] { R7252 += 1, R7207 += 1, R7208 += 1 };
  s0 -> s0 [0, 65535] { R7251 += 1, R7252 += 1 };
  s0 -> s3 [70, 70] { R7252 += 1, R7208 += 1, R91 += 1, R92 += 1 };
  s0 -> s4 [70, 70] { R7252 += 1, R7208 += 1, R91 += 1, R92 += 1 };
  s0 -> s1 [71, 65535] { R7252 += 1, R7208 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 69] { R7252 += 1, R7208 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 65535] { R7252 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [70, 70] { R7252 += 1, R7208 += 1, R91 += 1, R92 += 1 };
  s1 -> s4 [70, 70] { R7252 += 1, R7208 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [71, 65535] { R7252 += 1, R7208 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [0, 69] { R7252 += 1, R7208 += 1, R91 += 1, R92 += 1 };
  s2 -> s2 [0, 65535] { R7252 += 1, R7207 += 1, R7208 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [70, 70] { R7252 += 1, R7208 += 1, R91 += 1, R92 += 1 };
  s2 -> s4 [70, 70] { R7252 += 1, R7208 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [71, 65535] { R7252 += 1, R7208 += 1, R91 += 1, R92 += 1 };
  s3 -> s3 [0, 65535] { R7252 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R7252 += 1, R7208 += 1, R91 += 1, R92 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R7252 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7252 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 69] { R7254 += 1, R7210 += 1, R6805 += 1, R6806 += 1 };
  s0 -> s2 [0, 69] { R7254 += 1, R7210 += 1, R6806 += 1, R6807 += 1 };
  s0 -> s3 [0, 65535] { R7254 += 1, R7209 += 1, R7210 += 1 };
  s0 -> s0 [0, 65535] { R7253 += 1, R7254 += 1 };
  s0 -> s4 [70, 70] { R7254 += 1, R7210 += 1, R6805 += 1, R6806 += 1 };
  s0 -> s5 [70, 70] { R7254 += 1, R7210 += 1, R6805 += 1, R6806 += 1 };
  s0 -> s6 [70, 70] { R7254 += 1, R7210 += 1, R6806 += 1, R6807 += 1 };
  s0 -> s7 [70, 70] { R7254 += 1, R7210 += 1, R6806 += 1, R6807 += 1 };
  s0 -> s1 [71, 65535] { R7254 += 1, R7210 += 1, R6805 += 1, R6806 += 1 };
  s0 -> s2 [71, 65535] { R7254 += 1, R7210 += 1, R6806 += 1, R6807 += 1 };
  s1 -> s1 [0, 69] { R7254 += 1, R7210 += 1, R6805 += 1, R6806 += 1 };
  s1 -> s2 [0, 69] { R7254 += 1, R7210 += 1, R6806 += 1, R6807 += 1 };
  s1 -> s4 [70, 70] { R7254 += 1, R7210 += 1, R6805 += 1, R6806 += 1 };
  s1 -> s5 [70, 70] { R7254 += 1, R7210 += 1, R6805 += 1, R6806 += 1 };
  s1 -> s6 [70, 70] { R7254 += 1, R7210 += 1, R6806 += 1, R6807 += 1 };
  s1 -> s7 [70, 70] { R7254 += 1, R7210 += 1, R6806 += 1, R6807 += 1 };
  s1 -> s1 [71, 65535] { R7254 += 1, R7210 += 1, R6805 += 1, R6806 += 1 };
  s1 -> s2 [71, 65535] { R7254 += 1, R7210 += 1, R6806 += 1, R6807 += 1 };
  s2 -> s2 [0, 69] { R7254 += 1, R7210 += 1, R6806 += 1, R6807 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R7254 += 1 };
  s2 -> s6 [70, 70] { R7254 += 1, R7210 += 1, R6806 += 1, R6807 += 1 };
  s2 -> s7 [70, 70] { R7254 += 1, R7210 += 1, R6806 += 1, R6807 += 1 };
  s2 -> s2 [71, 65535] { R7254 += 1, R7210 += 1, R6806 += 1, R6807 += 1 };
  s3 -> s1 [0, 69] { R7254 += 1, R7210 += 1, R6805 += 1, R6806 += 1 };
  s3 -> s2 [0, 69] { R7254 += 1, R7210 += 1, R6806 += 1, R6807 += 1 };
  s3 -> s3 [0, 65535] { R7254 += 1, R7209 += 1, R7210 += 1 };
  s3 -> s4 [70, 70] { R7254 += 1, R7210 += 1, R6805 += 1, R6806 += 1 };
  s3 -> s5 [70, 70] { R7254 += 1, R7210 += 1, R6805 += 1, R6806 += 1 };
  s3 -> s6 [70, 70] { R7254 += 1, R7210 += 1, R6806 += 1, R6807 += 1 };
  s3 -> s7 [70, 70] { R7254 += 1, R7210 += 1, R6806 += 1, R6807 += 1 };
  s3 -> s1 [71, 65535] { R7254 += 1, R7210 += 1, R6805 += 1, R6806 += 1 };
  s3 -> s2 [71, 65535] { R7254 += 1, R7210 += 1, R6806 += 1, R6807 += 1 };
  s5 -> s5 [0, 65535] { R7254 += 1, R7210 += 1, R6805 += 1, R6806 += 1 };
  s5 -> s6 [0, 65535] { R7254 += 1, R7210 += 1, R6806 += 1, R6807 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R7254 += 1, R7210 += 1, R6806 += 1, R6807 += 1 };
  s6 -> s9 [0, 65535] { R7254 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R7254 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R7254 += 1 };
  accepting s8, s2, s9, s6, s7;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 69] { R7256 += 1, R7212 += 1, R6812 += 1, R6814 += 1 };
  s0 -> s2 [0, 69] { R7256 += 1, R7212 += 1, R6811 += 1, R6812 += 1 };
  s0 -> s3 [0, 69] { R7256 += 1, R7212 += 1, R6812 += 1, R6813 += 1, R6814 += 1 };
  s0 -> s0 [0, 65535] { R7255 += 1, R7256 += 1 };
  s0 -> s4 [0, 65535] { R7256 += 1, R7211 += 1, R7212 += 1 };
  s0 -> s5 [70, 70] { R7256 += 1, R7212 += 1, R6811 += 1, R6812 += 1 };
  s0 -> s6 [70, 70] { R7256 += 1, R7212 += 1, R6812 += 1, R6814 += 1 };
  s0 -> s7 [70, 70] { R7256 += 1, R7212 += 1, R6812 += 1, R6814 += 1 };
  s0 -> s8 [70, 70] { R7256 += 1, R7212 += 1, R6812 += 1, R6813 += 1, R6814 += 1 };
  s0 -> s9 [70, 70] { R7256 += 1, R7212 += 1, R6812 += 1, R6813 += 1, R6814 += 1 };
  s0 -> s10 [70, 70] { R7256 += 1, R7212 += 1, R6811 += 1, R6812 += 1 };
  s0 -> s1 [71, 74] { R7256 += 1, R7212 += 1, R6812 += 1, R6814 += 1 };
  s0 -> s2 [71, 65535] { R7256 += 1, R7212 += 1, R6811 += 1, R6812 += 1 };
  s0 -> s3 [71, 65535] { R7256 += 1, R7212 += 1, R6812 += 1, R6813 += 1, R6814 += 1 };
  s0 -> s11 [75, 75] { R7256 += 1, R7212 += 1, R6812 += 1, R6814 += 1 };
  s0 -> s1 [76, 65535] { R7256 += 1, R7212 += 1, R6812 += 1, R6814 += 1 };
  s1 -> s1 [0, 69] { R7256 += 1, R7212 += 1, R6812 += 1, R6814 += 1 };
  s1 -> s6 [70, 70] { R7256 += 1, R7212 += 1, R6812 += 1, R6814 += 1 };
  s1 -> s7 [70, 70] { R7256 += 1, R7212 += 1, R6812 += 1, R6814 += 1 };
  s1 -> s1 [71, 74] { R7256 += 1, R7212 += 1, R6812 += 1, R6814 += 1 };
  s1 -> s11 [75, 75] { R7256 += 1, R7212 += 1, R6812 += 1, R6814 += 1 };
  s1 -> s1 [76, 65535] { R7256 += 1, R7212 += 1, R6812 += 1, R6814 += 1 };
  s2 -> s1 [0, 69] { R7256 += 1, R7212 += 1, R6812 += 1, R6814 += 1 };
  s2 -> s2 [0, 69] { R7256 += 1, R7212 += 1, R6811 += 1, R6812 += 1 };
  s2 -> s3 [0, 69] { R7256 += 1, R7212 += 1, R6812 += 1, R6813 += 1, R6814 += 1 };
  s2 -> s5 [70, 70] { R7256 += 1, R7212 += 1, R6811 += 1, R6812 += 1 };
  s2 -> s6 [70, 70] { R7256 += 1, R7212 += 1, R6812 += 1, R6814 += 1 };
  s2 -> s7 [70, 70] { R7256 += 1, R7212 += 1, R6812 += 1, R6814 += 1 };
  s2 -> s8 [70, 70] { R7256 += 1, R7212 += 1, R6812 += 1, R6813 += 1, R6814 += 1 };
  s2 -> s9 [70, 70] { R7256 += 1, R7212 += 1, R6812 += 1, R6813 += 1, R6814 += 1 };
  s2 -> s10 [70, 70] { R7256 += 1, R7212 += 1, R6811 += 1, R6812 += 1 };
  s2 -> s1 [71, 74] { R7256 += 1, R7212 += 1, R6812 += 1, R6814 += 1 };
  s2 -> s2 [71, 65535] { R7256 += 1, R7212 += 1, R6811 += 1, R6812 += 1 };
  s2 -> s3 [71, 65535] { R7256 += 1, R7212 += 1, R6812 += 1, R6813 += 1, R6814 += 1 };
  s2 -> s11 [75, 75] { R7256 += 1, R7212 += 1, R6812 += 1, R6814 += 1 };
  s2 -> s1 [76, 65535] { R7256 += 1, R7212 += 1, R6812 += 1, R6814 += 1 };
  s3 -> s1 [0, 69] { R7256 += 1, R7212 += 1, R6812 += 1, R6814 += 1 };
  s3 -> s3 [0, 69] { R7256 += 1, R7212 += 1, R6812 += 1, R6813 += 1, R6814 += 1 };
  s3 -> s6 [70, 70] { R7256 += 1, R7212 += 1, R6812 += 1, R6814 += 1 };
  s3 -> s7 [70, 70] { R7256 += 1, R7212 += 1, R6812 += 1, R6814 += 1 };
  s3 -> s8 [70, 70] { R7256 += 1, R7212 += 1, R6812 += 1, R6813 += 1, R6814 += 1 };
  s3 -> s9 [70, 70] { R7256 += 1, R7212 += 1, R6812 += 1, R6813 += 1, R6814 += 1 };
  s3 -> s1 [71, 74] { R7256 += 1, R7212 += 1, R6812 += 1, R6814 += 1 };
  s3 -> s3 [71, 65535] { R7256 += 1, R7212 += 1, R6812 += 1, R6813 += 1, R6814 += 1 };
  s3 -> s11 [75, 75] { R7256 += 1, R7212 += 1, R6812 += 1, R6814 += 1 };
  s3 -> s1 [76, 65535] { R7256 += 1, R7212 += 1, R6812 += 1, R6814 += 1 };
  s4 -> s1 [0, 69] { R7256 += 1, R7212 += 1, R6812 += 1, R6814 += 1 };
  s4 -> s2 [0, 69] { R7256 += 1, R7212 += 1, R6811 += 1, R6812 += 1 };
  s4 -> s3 [0, 69] { R7256 += 1, R7212 += 1, R6812 += 1, R6813 += 1, R6814 += 1 };
  s4 -> s4 [0, 65535] { R7256 += 1, R7211 += 1, R7212 += 1 };
  s4 -> s5 [70, 70] { R7256 += 1, R7212 += 1, R6811 += 1, R6812 += 1 };
  s4 -> s6 [70, 70] { R7256 += 1, R7212 += 1, R6812 += 1, R6814 += 1 };
  s4 -> s7 [70, 70] { R7256 += 1, R7212 += 1, R6812 += 1, R6814 += 1 };
  s4 -> s8 [70, 70] { R7256 += 1, R7212 += 1, R6812 += 1, R6813 += 1, R6814 += 1 };
  s4 -> s9 [70, 70] { R7256 += 1, R7212 += 1, R6812 += 1, R6813 += 1, R6814 += 1 };
  s4 -> s10 [70, 70] { R7256 += 1, R7212 += 1, R6811 += 1, R6812 += 1 };
  s4 -> s1 [71, 74] { R7256 += 1, R7212 += 1, R6812 += 1, R6814 += 1 };
  s4 -> s2 [71, 65535] { R7256 += 1, R7212 += 1, R6811 += 1, R6812 += 1 };
  s4 -> s3 [71, 65535] { R7256 += 1, R7212 += 1, R6812 += 1, R6813 += 1, R6814 += 1 };
  s4 -> s11 [75, 75] { R7256 += 1, R7212 += 1, R6812 += 1, R6814 += 1 };
  s4 -> s1 [76, 65535] { R7256 += 1, R7212 += 1, R6812 += 1, R6814 += 1 };
  s6 -> s6 [0, 74] { R7256 += 1, R7212 += 1, R6812 += 1, R6814 += 1 };
  s6 -> s14 [75, 75] { R7256 += 1, R7212 += 1, R6812 += 1, R6814 += 1 };
  s6 -> s6 [76, 65535] { R7256 += 1, R7212 += 1, R6812 += 1, R6814 += 1 };
  s9 -> s6 [0, 74] { R7256 += 1, R7212 += 1, R6812 += 1, R6814 += 1 };
  s9 -> s9 [0, 65535] { R7256 += 1, R7212 += 1, R6812 += 1, R6813 += 1, R6814 += 1 };
  s9 -> s14 [75, 75] { R7256 += 1, R7212 += 1, R6812 += 1, R6814 += 1 };
  s9 -> s6 [76, 65535] { R7256 += 1, R7212 += 1, R6812 += 1, R6814 += 1 };
  s10 -> s6 [0, 74] { R7256 += 1, R7212 += 1, R6812 += 1, R6814 += 1 };
  s10 -> s9 [0, 65535] { R7256 += 1, R7212 += 1, R6812 += 1, R6813 += 1, R6814 += 1 };
  s10 -> s10 [0, 65535] { R7256 += 1, R7212 += 1, R6811 += 1, R6812 += 1 };
  s10 -> s14 [75, 75] { R7256 += 1, R7212 += 1, R6812 += 1, R6814 += 1 };
  s10 -> s6 [76, 65535] { R7256 += 1, R7212 += 1, R6812 += 1, R6814 += 1 };
  s11 -> s11 [0, 69] { R7256 += 1, R7212 += 1, R6812 += 1, R6814 += 1 };
  s11 -> s11 [0, 65535] { R7256 += 1 };
  s11 -> s12 [0, 65535];
  s11 -> s13 [70, 70] { R7256 += 1, R7212 += 1, R6812 += 1, R6814 += 1 };
  s11 -> s14 [70, 70] { R7256 += 1, R7212 += 1, R6812 += 1, R6814 += 1 };
  s11 -> s11 [71, 65535] { R7256 += 1, R7212 += 1, R6812 += 1, R6814 += 1 };
  s12 -> s12 [0, 65535];
  s13 -> s13 [0, 65535] { R7256 += 1 };
  s13 -> s12 [0, 65535];
  s14 -> s15 [0, 65535] { R7256 += 1 };
  s14 -> s14 [0, 65535] { R7256 += 1, R7212 += 1, R6812 += 1, R6814 += 1 };
  s14 -> s12 [0, 65535];
  s15 -> s15 [0, 65535] { R7256 += 1 };
  s15 -> s12 [0, 65535];
  accepting s12, s13, s14, s15, s11;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 69] { R7258 += 1, R7214 += 1, R7150 += 1, R7152 += 1, R7153 += 1 };
  s0 -> s2 [0, 69] { R7258 += 1, R7214 += 1, R7149 += 1, R7150 += 1 };
  s0 -> s3 [0, 69] { R7258 += 1, R7214 += 1, R7150 += 1, R7151 += 1, R7152 += 1 };
  s0 -> s4 [0, 65535] { R7258 += 1, R7213 += 1, R7214 += 1 };
  s0 -> s0 [0, 65535] { R7257 += 1, R7258 += 1 };
  s0 -> s5 [70, 70] { R7258 += 1, R7214 += 1, R7150 += 1, R7152 += 1, R7153 += 1 };
  s0 -> s6 [70, 70] { R7258 += 1, R7214 += 1, R7150 += 1, R7151 += 1, R7152 += 1 };
  s0 -> s7 [70, 70] { R7258 += 1, R7214 += 1, R7150 += 1, R7152 += 1, R7153 += 1 };
  s0 -> s8 [70, 70] { R7258 += 1, R7214 += 1, R7149 += 1, R7150 += 1 };
  s0 -> s9 [70, 70] { R7258 += 1, R7214 += 1, R7149 += 1, R7150 += 1 };
  s0 -> s10 [70, 70] { R7258 += 1, R7214 += 1, R7150 += 1, R7151 += 1, R7152 += 1 };
  s0 -> s1 [71, 65535] { R7258 += 1, R7214 += 1, R7150 += 1, R7152 += 1, R7153 += 1 };
  s0 -> s2 [71, 65535] { R7258 += 1, R7214 += 1, R7149 += 1, R7150 += 1 };
  s0 -> s3 [71, 65535] { R7258 += 1, R7214 += 1, R7150 += 1, R7151 += 1, R7152 += 1 };
  s1 -> s1 [0, 69] { R7258 += 1, R7214 += 1, R7150 += 1, R7152 += 1, R7153 += 1 };
  s1 -> s11 [0, 65535];
  s1 -> s1 [0, 65535] { R7258 += 1 };
  s1 -> s5 [70, 70] { R7258 += 1, R7214 += 1, R7150 += 1, R7152 += 1, R7153 += 1 };
  s1 -> s7 [70, 70] { R7258 += 1, R7214 += 1, R7150 += 1, R7152 += 1, R7153 += 1 };
  s1 -> s1 [71, 65535] { R7258 += 1, R7214 += 1, R7150 += 1, R7152 += 1, R7153 += 1 };
  s2 -> s1 [0, 69] { R7258 += 1, R7214 += 1, R7150 += 1, R7152 += 1, R7153 += 1 };
  s2 -> s2 [0, 69] { R7258 += 1, R7214 += 1, R7149 += 1, R7150 += 1 };
  s2 -> s3 [0, 69] { R7258 += 1, R7214 += 1, R7150 += 1, R7151 += 1, R7152 += 1 };
  s2 -> s5 [70, 70] { R7258 += 1, R7214 += 1, R7150 += 1, R7152 += 1, R7153 += 1 };
  s2 -> s6 [70, 70] { R7258 += 1, R7214 += 1, R7150 += 1, R7151 += 1, R7152 += 1 };
  s2 -> s7 [70, 70] { R7258 += 1, R7214 += 1, R7150 += 1, R7152 += 1, R7153 += 1 };
  s2 -> s8 [70, 70] { R7258 += 1, R7214 += 1, R7149 += 1, R7150 += 1 };
  s2 -> s9 [70, 70] { R7258 += 1, R7214 += 1, R7149 += 1, R7150 += 1 };
  s2 -> s10 [70, 70] { R7258 += 1, R7214 += 1, R7150 += 1, R7151 += 1, R7152 += 1 };
  s2 -> s1 [71, 65535] { R7258 += 1, R7214 += 1, R7150 += 1, R7152 += 1, R7153 += 1 };
  s2 -> s2 [71, 65535] { R7258 += 1, R7214 += 1, R7149 += 1, R7150 += 1 };
  s2 -> s3 [71, 65535] { R7258 += 1, R7214 += 1, R7150 += 1, R7151 += 1, R7152 += 1 };
  s3 -> s1 [0, 69] { R7258 += 1, R7214 += 1, R7150 += 1, R7152 += 1, R7153 += 1 };
  s3 -> s3 [0, 69] { R7258 += 1, R7214 += 1, R7150 += 1, R7151 += 1, R7152 += 1 };
  s3 -> s5 [70, 70] { R7258 += 1, R7214 += 1, R7150 += 1, R7152 += 1, R7153 += 1 };
  s3 -> s6 [70, 70] { R7258 += 1, R7214 += 1, R7150 += 1, R7151 += 1, R7152 += 1 };
  s3 -> s7 [70, 70] { R7258 += 1, R7214 += 1, R7150 += 1, R7152 += 1, R7153 += 1 };
  s3 -> s10 [70, 70] { R7258 += 1, R7214 += 1, R7150 += 1, R7151 += 1, R7152 += 1 };
  s3 -> s1 [71, 65535] { R7258 += 1, R7214 += 1, R7150 += 1, R7152 += 1, R7153 += 1 };
  s3 -> s3 [71, 65535] { R7258 += 1, R7214 += 1, R7150 += 1, R7151 += 1, R7152 += 1 };
  s4 -> s1 [0, 69] { R7258 += 1, R7214 += 1, R7150 += 1, R7152 += 1, R7153 += 1 };
  s4 -> s2 [0, 69] { R7258 += 1, R7214 += 1, R7149 += 1, R7150 += 1 };
  s4 -> s3 [0, 69] { R7258 += 1, R7214 += 1, R7150 += 1, R7151 += 1, R7152 += 1 };
  s4 -> s4 [0, 65535] { R7258 += 1, R7213 += 1, R7214 += 1 };
  s4 -> s5 [70, 70] { R7258 += 1, R7214 += 1, R7150 += 1, R7152 += 1, R7153 += 1 };
  s4 -> s6 [70, 70] { R7258 += 1, R7214 += 1, R7150 += 1, R7151 += 1, R7152 += 1 };
  s4 -> s7 [70, 70] { R7258 += 1, R7214 += 1, R7150 += 1, R7152 += 1, R7153 += 1 };
  s4 -> s8 [70, 70] { R7258 += 1, R7214 += 1, R7149 += 1, R7150 += 1 };
  s4 -> s9 [70, 70] { R7258 += 1, R7214 += 1, R7149 += 1, R7150 += 1 };
  s4 -> s10 [70, 70] { R7258 += 1, R7214 += 1, R7150 += 1, R7151 += 1, R7152 += 1 };
  s4 -> s1 [71, 65535] { R7258 += 1, R7214 += 1, R7150 += 1, R7152 += 1, R7153 += 1 };
  s4 -> s2 [71, 65535] { R7258 += 1, R7214 += 1, R7149 += 1, R7150 += 1 };
  s4 -> s3 [71, 65535] { R7258 += 1, R7214 += 1, R7150 += 1, R7151 += 1, R7152 += 1 };
  s5 -> s11 [0, 65535];
  s5 -> s12 [0, 65535] { R7258 += 1 };
  s5 -> s5 [0, 65535] { R7258 += 1, R7214 += 1, R7150 += 1, R7152 += 1, R7153 += 1 };
  s6 -> s5 [0, 65535] { R7258 += 1, R7214 += 1, R7150 += 1, R7152 += 1, R7153 += 1 };
  s6 -> s6 [0, 65535] { R7258 += 1, R7214 += 1, R7150 += 1, R7151 += 1, R7152 += 1 };
  s7 -> s11 [0, 65535];
  s7 -> s7 [0, 65535] { R7258 += 1 };
  s9 -> s5 [0, 65535] { R7258 += 1, R7214 += 1, R7150 += 1, R7152 += 1, R7153 += 1 };
  s9 -> s6 [0, 65535] { R7258 += 1, R7214 += 1, R7150 += 1, R7151 += 1, R7152 += 1 };
  s9 -> s9 [0, 65535] { R7258 += 1, R7214 += 1, R7149 += 1, R7150 += 1 };
  s11 -> s11 [0, 65535];
  s12 -> s11 [0, 65535];
  s12 -> s12 [0, 65535] { R7258 += 1 };
  accepting s12, s5, s1, s7, s11;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [102, 102];
  accepting s1;
};
};
constraint R3 = R7258 && R23 - R7258 = -1 && R24 = R7258 && R25 - R7258 = -1 && R26 = R7258 && R27 = 0 && R28 = 1 && R29 = 0 && R30 = 1 && R45 + R84 + R83 + -1*R6816 + -1*R6812 - R66 = 0 && R49 + R89 + R87 = 0 && R50 + R90 + R88 + -1*R6816 + -1*R6812 - R66 = 0 && R55 + R96 + R93 + -1*R6818 + -1*R6814 - R68 = 0 && R65 + R6815 + R6811 = 0 && R67 + R6817 + R6813 = 0 && R7199 = 0 && R7200 = 0 && R7205 = 0 && R7206 = 0 && R7209 = 0 && R7210 = 0 && R7211 = 0 && R7212 = 0 && R7213 = 0 && R7214 = 0 && R7215 = 0 && R7216 = R7258 && R7217 = 0 && R7218 = R7258 && R7219 = 0 && R7220 = R7258 && R7221 = 0 && R7222 = R7258 && R7223 = 0 && R7224 = R7258 && R7225 = 0 && R7226 = R7258 && R7227 = 0 && R7228 = R7258 && R7229 = 0 && R7230 = R7258 && R7231 = 0 && R7232 = R7258 && R7233 = 0 && R7234 = R7258 && R7235 = 0 && R7236 = R7258 && R7237 = 0 && R7238 = R7258 && R7239 = 0 && R7240 = R7258 && R7241 = 0 && R7242 = R7258 && R7243 = 0 && R7244 = R7258 && R7245 = 0 && R7246 = R7258 && R7247 = 0 && R7248 = R7258 && R7249 = 0 && R7250 = R7258 && R7251 = 0 && R7252 = R7258 && R7253 = 0 && R7254 = R7258 && R7255 = 0 && R7256 = R7258 && R7257 = 0 && -1 < R2 && R12 < 1 && R15 < 1 && R16 < 1 && R47 + R86 + R85 < 1 && R61 + R6810 + R6807 < 1 && -1*R6816 + -1*R6812 - R66 < 1 && -1*R6818 + -1*R6814 - R68 < 1 && 0 < R7258 && (R2 != 0 || R20 = 0 || (R7159 = 0 && R7160 = 0)) && (R2 != 0 || R20 = 0 || (R7161 = 0 && R7162 = 0)) && (R2 != 0 || R20 = 0 || (R7163 = 0 && R7164 = 0)) && (R2 != 0 || R20 = 0 || (R7165 = 0 && R7166 = 0)) && (R2 != 0 || R20 = 0 || (R7167 = 0 && R7168 = 0)) && (R2 != 0 || R20 = 0 || (R7169 = 0 && R7170 = 0)) && (R2 != 0 || R20 = 0 || (R7171 = 0 && R7172 = 0)) && (R2 != 0 || R20 = 0 || (R7173 = 0 && R7174 = 0)) && (R2 != 0 || R20 = 0 || (R7175 = 0 && R7176 = 0)) && (R2 != 0 || R20 = 0 || (R7177 = 0 && R7178 = 0)) && (R53 + R94 + R91 != 0 || R54 + R95 + R92 + -1*R6816 + -1*R6812 - R66 = 0 || R66 + R6816 + R6812 < 1) && (R59 + R6808 + R6805 != 0 || R60 + R6809 + R6806 + -1*R6816 + -1*R6812 - R66 = 0 || R66 + R6816 + R6812 < 1) && (R66 + R6816 + R6812 != 0 || ((R53 + R94 + R91 != 0 || R54 + R95 + R92 = 0 || R68 + R6818 + R6814 < 1) && (R53 + R94 + R91 = 0 || R68 + R6818 + R6814 < 1))) && (R66 + R6816 + R6812 != 0 || ((R59 + R6808 + R6805 != 0 || R60 + R6809 + R6806 = 0 || R68 + R6818 + R6814 < 1) && (R59 + R6808 + R6805 = 0 || R68 + R6818 + R6814 < 1))) && (R66 + R6816 + R6812 != 0 || ((R73 + R7154 + R7149 != 0 || R74 + R7155 + R7150 = 0 || R68 + R6818 + R6814 < 1) && (R73 + R7154 + R7149 = 0 || R68 + R6818 + R6814 < 1))) && (R68 + R6818 + R6814 != 0 || R77 + R7158 + R7153 = 0 || (R75 + R7156 + R7151 = 0 && R76 + R7157 + R7152 = 0)) && (R73 + R7154 + R7149 != 0 || R66 + R6816 + R6812 + -1*R7155 + -1*R7150 - R74 = 0 || R66 + R6816 + R6812 < 1) && (R75 + R7156 + R7151 != 0 || R68 + R6818 + R6814 + -1*R7157 + -1*R7152 - R76 = 0 || R68 + R6818 + R6814 < 1) && (R7159 != 0 || R2 = R7160 || R2 < 1) && (R7161 != 0 || R2 = R7162 || R2 < 1) && (R7163 != 0 || R2 = R7164 || R2 < 1) && (R7165 != 0 || R2 = R7166 || R2 < 1) && (R7167 != 0 || R2 = R7168 || R2 < 1) && (R7169 != 0 || R2 = R7170 || R2 < 1) && (R7171 != 0 || R2 = R7172 || R2 < 1) && (R7173 != 0 || R2 = R7174 || R2 < 1) && (R7175 != 0 || R2 = R7176 || R2 < 1) && (R7177 != 0 || R2 = R7178 || R2 < 1) && (R21 = 0 || (R7197 = 0 && R7198 = 0)) && (R21 = 0 || (R7201 = 0 && R7202 = 0)) && (R21 = 0 || (R7203 = 0 && R7204 = 0)) && (R21 = 0 || (R7207 = 0 && R7208 = 0)) && (R22 = 0 || (R7179 = 0 && R7180 = 0)) && (R22 = 0 || (R7181 = 0 && R7182 = 0)) && (R22 = 0 || (R7183 = 0 && R7184 = 0)) && (R22 = 0 || (R7185 = 0 && R7186 = 0)) && (R22 = 0 || (R7187 = 0 && R7188 = 0)) && (R22 = 0 || (R7189 = 0 && R7190 = 0)) && (R22 = 0 || (R7191 = 0 && R7192 = 0)) && (R22 = 0 || (R7193 = 0 && R7194 = 0)) && (R22 = 0 || (R7195 = 0 && R7196 = 0)) && (R53 + R94 + R91 = 0 || R66 + R6816 + R6812 < 1) && (R59 + R6808 + R6805 = 0 || R66 + R6816 + R6812 < 1) && (R73 + R7154 + R7149 = 0 || R66 + R6816 + R6812 < 1) && (R75 + R7156 + R7151 = 0 || R68 + R6818 + R6814 < 1) && (R7159 = 0 || R2 < 1) && (R7161 = 0 || R2 < 1) && (R7163 = 0 || R2 < 1) && (R7165 = 0 || R2 < 1) && (R7167 = 0 || R2 < 1) && (R7169 = 0 || R2 < 1) && (R7171 = 0 || R2 < 1) && (R7173 = 0 || R2 < 1) && (R7175 = 0 || R2 < 1) && (R7177 = 0 || R2 < 1);
// End of Parikh automata intersection problem
