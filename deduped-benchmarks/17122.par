// Parikh automata intersection problem, generated by OSTRICH+
counter int R12, R15, R16, R2, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R4, R45, R47, R49, R5, R50, R53, R54, R55, R59, R60, R61, R65, R66, R67, R68, R6805, R6806, R6807, R6808, R6809, R6810, R6811, R6812, R6813, R6814, R6815, R6816, R6817, R6818, R7039, R7040, R7041, R7042, R7043, R7044, R7045, R7046, R7047, R7048, R7049, R7050, R7051, R7052, R7053, R7054, R7055, R7056, R7057, R7058, R7059, R7060, R7061, R7062, R7063, R7064, R7065, R7066, R7067, R7068, R7069, R7070, R7071, R7072, R7073, R7074, R7075, R7076, R7077, R7078, R7079, R7080, R7081, R7082, R7083, R7084, R7085, R7086, R7087, R7088, R7089, R7090, R7091, R7092, R7093, R7094, R7095, R7096, R7097, R7098, R7099, R7100, R7101, R7102, R7103, R7104, R7105, R7106, R7107, R7108, R7109, R7110, R7111, R7112, R7113, R7114, R7115, R7116, R7117, R7118, R7119, R7120, R7121, R7122, R7123, R7124, R7125, R7126, R7127, R7128, R7129, R7130, R7131, R7132, R7133, R7134, R7135, R7136, R7137, R7138, R7139, R7140, R7141, R7142, R7143, R7144, R7145, R7146, R7147, R7148, R73, R74, R75, R76, R77, R83, R84, R85, R86, R87, R88, R89, R90, R91, R92, R93, R94, R95, R96;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [70, 70];
  s0 -> s0 [71, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [70, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R15 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 69];
  s0 -> s0 [0, 65535] { R16 += 1 };
  s0 -> s2 [70, 70];
  s0 -> s1 [71, 65535];
  s1 -> s1 [0, 69];
  s1 -> s2 [70, 70];
  s1 -> s1 [71, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R24 += 1 };
  s0 -> s0 [0, 65535] { R23 += 1, R24 += 1 };
  s0 -> s2 [9, 13] { R24 += 1 };
  s0 -> s1 [14, 31] { R24 += 1 };
  s0 -> s2 [32, 32] { R24 += 1 };
  s0 -> s1 [33, 65535] { R24 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R24 += 1 };
  s2 -> s1 [0, 65535] { R24 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R25 += 1, R26 += 1 };
  s1 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R28 += 1 };
  s0 -> s0 [0, 65535] { R27 += 1, R28 += 1 };
  s0 -> s2 [9, 13] { R28 += 1 };
  s0 -> s1 [14, 31] { R28 += 1 };
  s0 -> s2 [32, 32] { R28 += 1 };
  s0 -> s1 [33, 65535] { R28 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R28 += 1 };
  s2 -> s1 [0, 65535] { R28 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R29 += 1, R30 += 1 };
  s1 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R7070 += 1, R22 += 1 };
  s0 -> s0 [0, 65535] { R7069 += 1, R7070 += 1 };
  s1 -> s1 [0, 65535] { R7070 += 1, R22 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 69] { R7072 += 1 };
  s0 -> s0 [0, 65535] { R7071 += 1, R7072 += 1 };
  s0 -> s2 [70, 70] { R7072 += 1 };
  s0 -> s3 [70, 70] { R7072 += 1 };
  s0 -> s1 [76, 65535] { R7072 += 1 };
  s1 -> s1 [0, 69] { R7072 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R7072 += 1 };
  s1 -> s3 [70, 70] { R7072 += 1 };
  s1 -> s1 [76, 65535] { R7072 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 70] { R7072 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [76, 65535] { R7072 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 69] { R7074 += 1, R45 += 1 };
  s0 -> s0 [0, 65535] { R7073 += 1, R7074 += 1 };
  s0 -> s2 [70, 70] { R7074 += 1, R45 += 1 };
  s0 -> s3 [70, 70] { R7074 += 1, R45 += 1 };
  s0 -> s1 [71, 65535] { R7074 += 1, R45 += 1 };
  s1 -> s1 [0, 69] { R7074 += 1, R45 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R7074 += 1, R45 += 1 };
  s1 -> s3 [70, 70] { R7074 += 1, R45 += 1 };
  s1 -> s1 [71, 65535] { R7074 += 1, R45 += 1 };
  s2 -> s2 [0, 65535] { R7074 += 1, R45 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 69] { R7076 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R7075 += 1, R7076 += 1 };
  s0 -> s2 [70, 70] { R7076 += 1, R47 += 1 };
  s0 -> s3 [70, 70] { R7076 += 1, R47 += 1 };
  s0 -> s1 [71, 65535] { R7076 += 1, R47 += 1 };
  s1 -> s1 [0, 69] { R7076 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R7076 += 1, R47 += 1 };
  s1 -> s3 [70, 70] { R7076 += 1, R47 += 1 };
  s1 -> s1 [71, 65535] { R7076 += 1, R47 += 1 };
  s2 -> s2 [0, 65535] { R7076 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 69] { R7078 += 1, R49 += 1, R50 += 1 };
  s0 -> s0 [0, 65535] { R7077 += 1, R7078 += 1 };
  s0 -> s2 [70, 70] { R7078 += 1, R49 += 1, R50 += 1 };
  s0 -> s3 [70, 70] { R7078 += 1, R49 += 1, R50 += 1 };
  s0 -> s1 [71, 65535] { R7078 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 69] { R7078 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R7078 += 1, R49 += 1, R50 += 1 };
  s1 -> s3 [70, 70] { R7078 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [71, 65535] { R7078 += 1, R49 += 1, R50 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7078 += 1, R49 += 1, R50 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 69] { R7080 += 1, R53 += 1, R54 += 1 };
  s0 -> s0 [0, 65535] { R7079 += 1, R7080 += 1 };
  s0 -> s2 [70, 70] { R7080 += 1, R53 += 1, R54 += 1 };
  s0 -> s3 [70, 70] { R7080 += 1, R53 += 1, R54 += 1 };
  s0 -> s1 [71, 65535] { R7080 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 69] { R7080 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R7080 += 1, R53 += 1, R54 += 1 };
  s1 -> s3 [70, 70] { R7080 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [71, 65535] { R7080 += 1, R53 += 1, R54 += 1 };
  s2 -> s2 [0, 65535] { R7080 += 1, R53 += 1, R54 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 69] { R7082 += 1, R59 += 1, R60 += 1 };
  s0 -> s0 [0, 65535] { R7081 += 1, R7082 += 1 };
  s0 -> s2 [70, 70] { R7082 += 1, R59 += 1, R60 += 1 };
  s0 -> s3 [70, 70] { R7082 += 1, R59 += 1, R60 += 1 };
  s0 -> s1 [71, 65535] { R7082 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 69] { R7082 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R7082 += 1, R59 += 1, R60 += 1 };
  s1 -> s3 [70, 70] { R7082 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [71, 65535] { R7082 += 1, R59 += 1, R60 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R7082 += 1, R59 += 1, R60 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 69] { R7084 += 1, R65 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R7083 += 1, R7084 += 1 };
  s0 -> s2 [70, 70] { R7084 += 1, R65 += 1, R66 += 1 };
  s0 -> s3 [70, 70] { R7084 += 1, R65 += 1, R66 += 1 };
  s0 -> s1 [71, 65535] { R7084 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 69] { R7084 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R7084 += 1, R65 += 1, R66 += 1 };
  s1 -> s3 [70, 70] { R7084 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [71, 65535] { R7084 += 1, R65 += 1, R66 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R7084 += 1, R65 += 1, R66 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 69] { R7086 += 1, R73 += 1, R74 += 1 };
  s0 -> s0 [0, 65535] { R7085 += 1, R7086 += 1 };
  s0 -> s2 [70, 70] { R7086 += 1, R73 += 1, R74 += 1 };
  s0 -> s3 [70, 70] { R7086 += 1, R73 += 1, R74 += 1 };
  s0 -> s1 [71, 65535] { R7086 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 69] { R7086 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R7086 += 1, R73 += 1, R74 += 1 };
  s1 -> s3 [70, 70] { R7086 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [71, 65535] { R7086 += 1, R73 += 1, R74 += 1 };
  s2 -> s2 [0, 65535] { R7086 += 1, R73 += 1, R74 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 69] { R7106 += 1 };
  s0 -> s0 [0, 65535] { R7105 += 1, R7106 += 1 };
  s0 -> s2 [70, 70] { R7106 += 1 };
  s0 -> s1 [71, 65535] { R7106 += 1 };
  s1 -> s1 [0, 69] { R7106 += 1 };
  s1 -> s2 [70, 70] { R7106 += 1 };
  s1 -> s1 [71, 65535] { R7106 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R7106 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R7107 += 1, R7108 += 1 };
  s0 -> s1 [0, 65535] { R7108 += 1, R2 += 1 };
  s1 -> s1 [0, 65535] { R7108 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 69] { R7110 += 1 };
  s0 -> s0 [0, 65535] { R7109 += 1, R7110 += 1 };
  s0 -> s2 [0, 65535] { R7110 += 1, R12 += 1 };
  s0 -> s3 [70, 70] { R7110 += 1 };
  s0 -> s1 [71, 65535] { R7110 += 1 };
  s1 -> s1 [0, 69] { R7110 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [70, 70] { R7110 += 1 };
  s1 -> s1 [71, 65535] { R7110 += 1 };
  s2 -> s1 [0, 69] { R7110 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R7110 += 1, R12 += 1 };
  s2 -> s3 [70, 70] { R7110 += 1 };
  s2 -> s1 [71, 65535] { R7110 += 1 };
  s3 -> s3 [0, 65535] { R7110 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 69] { R7112 += 1, R7050 += 1 };
  s0 -> s2 [0, 65535] { R7112 += 1, R7049 += 1, R7050 += 1 };
  s0 -> s0 [0, 65535] { R7111 += 1, R7112 += 1 };
  s0 -> s1 [71, 65535] { R7112 += 1, R7050 += 1 };
  s1 -> s1 [0, 69] { R7112 += 1, R7050 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R7112 += 1 };
  s1 -> s1 [71, 65535] { R7112 += 1, R7050 += 1 };
  s2 -> s1 [0, 69] { R7112 += 1, R7050 += 1 };
  s2 -> s2 [0, 65535] { R7112 += 1, R7049 += 1, R7050 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [71, 65535] { R7112 += 1, R7050 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s0 [0, 65535] { R7113 += 1, R7114 += 1 };
  s0 -> s1 [0, 65535] { R7114 += 1, R7052 += 1, R20 += 1 };
  s0 -> s2 [0, 65535] { R7114 += 1, R7051 += 1, R7052 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R7114 += 1, R7052 += 1, R20 += 1 };
  s1 -> s4 [0, 65535] { R7114 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R7114 += 1, R7052 += 1, R20 += 1 };
  s2 -> s2 [0, 65535] { R7114 += 1, R7051 += 1, R7052 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7114 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 70] { R7116 += 1, R7054 += 1 };
  s0 -> s0 [0, 65535] { R7115 += 1, R7116 += 1 };
  s0 -> s2 [0, 65535] { R7116 += 1, R7053 += 1, R7054 += 1 };
  s0 -> s1 [75, 65535] { R7116 += 1, R7054 += 1 };
  s1 -> s1 [0, 70] { R7116 += 1, R7054 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R7116 += 1 };
  s1 -> s1 [75, 65535] { R7116 += 1, R7054 += 1 };
  s2 -> s1 [0, 70] { R7116 += 1, R7054 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R7116 += 1, R7053 += 1, R7054 += 1 };
  s2 -> s1 [75, 65535] { R7116 += 1, R7054 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R7118 += 1, R7056 += 1, R84 += 1 };
  s0 -> s2 [0, 65535] { R7118 += 1, R7055 += 1, R7056 += 1 };
  s0 -> s0 [0, 65535] { R7117 += 1, R7118 += 1 };
  s1 -> s4 [0, 65535] { R7118 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R7118 += 1, R7056 += 1, R84 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R7118 += 1, R7056 += 1, R84 += 1 };
  s2 -> s2 [0, 65535] { R7118 += 1, R7055 += 1, R7056 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7118 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 74] { R7120 += 1, R7058 += 1 };
  s0 -> s2 [0, 65535] { R7120 += 1, R7057 += 1, R7058 += 1 };
  s0 -> s0 [0, 65535] { R7119 += 1, R7120 += 1 };
  s0 -> s3 [0, 65535] { R7120 += 1, R7058 += 1, R86 += 1 };
  s0 -> s1 [76, 65535] { R7120 += 1, R7058 += 1 };
  s1 -> s1 [0, 74] { R7120 += 1, R7058 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R7120 += 1 };
  s1 -> s1 [76, 65535] { R7120 += 1, R7058 += 1 };
  s2 -> s1 [0, 74] { R7120 += 1, R7058 += 1 };
  s2 -> s2 [0, 65535] { R7120 += 1, R7057 += 1, R7058 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R7120 += 1, R7058 += 1, R86 += 1 };
  s2 -> s1 [76, 65535] { R7120 += 1, R7058 += 1 };
  s3 -> s1 [0, 74] { R7120 += 1, R7058 += 1 };
  s3 -> s4 [0, 65535] { R7120 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R7120 += 1, R7058 += 1, R86 += 1 };
  s3 -> s1 [76, 65535] { R7120 += 1, R7058 += 1 };
  s4 -> s4 [0, 65535] { R7120 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 65535] { R7122 += 1, R7060 += 1, R90 += 1 };
  s0 -> s2 [0, 65535] { R7122 += 1, R7060 += 1 };
  s0 -> s3 [0, 65535] { R7122 += 1, R7059 += 1, R7060 += 1 };
  s0 -> s0 [0, 65535] { R7121 += 1, R7122 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R7122 += 1 };
  s1 -> s1 [0, 65535] { R7122 += 1, R7060 += 1, R90 += 1 };
  s1 -> s2 [0, 65535] { R7122 += 1, R7060 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R7122 += 1 };
  s2 -> s2 [0, 65535] { R7122 += 1, R7060 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R7122 += 1, R7060 += 1, R90 += 1 };
  s3 -> s2 [0, 65535] { R7122 += 1, R7060 += 1 };
  s3 -> s3 [0, 65535] { R7122 += 1, R7059 += 1, R7060 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R7122 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R7124 += 1, R7062 += 1, R95 += 1, R96 += 1 };
  s0 -> s2 [0, 65535] { R7124 += 1, R7062 += 1, R94 += 1, R95 += 1 };
  s0 -> s0 [0, 65535] { R7123 += 1, R7124 += 1 };
  s0 -> s3 [0, 65535] { R7124 += 1, R7061 += 1, R7062 += 1 };
  s1 -> s1 [0, 65535] { R7124 += 1, R7062 += 1, R95 += 1, R96 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R7124 += 1, R7062 += 1 };
  s1 -> s5 [0, 65535] { R7124 += 1 };
  s2 -> s1 [0, 65535] { R7124 += 1, R7062 += 1, R95 += 1, R96 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R7124 += 1, R7062 += 1, R94 += 1, R95 += 1 };
  s2 -> s5 [0, 65535] { R7124 += 1 };
  s3 -> s1 [0, 65535] { R7124 += 1, R7062 += 1, R95 += 1, R96 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R7124 += 1, R7062 += 1, R94 += 1, R95 += 1 };
  s3 -> s3 [0, 65535] { R7124 += 1, R7061 += 1, R7062 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R7124 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R7124 += 1, R7062 += 1 };
  s6 -> s5 [0, 65535] { R7124 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 74] { R7126 += 1, R7064 += 1, R6809 += 1 };
  s0 -> s0 [0, 65535] { R7125 += 1, R7126 += 1 };
  s0 -> s2 [0, 65535] { R7126 += 1, R7064 += 1, R6809 += 1, R6810 += 1 };
  s0 -> s3 [0, 65535] { R7126 += 1, R7063 += 1, R7064 += 1 };
  s0 -> s4 [0, 65535] { R7126 += 1, R7064 += 1 };
  s0 -> s1 [76, 65535] { R7126 += 1, R7064 += 1, R6809 += 1 };
  s1 -> s1 [0, 74] { R7126 += 1, R7064 += 1, R6809 += 1 };
  s1 -> s5 [0, 65535] { R7126 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R7126 += 1, R7064 += 1 };
  s1 -> s1 [76, 65535] { R7126 += 1, R7064 += 1, R6809 += 1 };
  s2 -> s1 [0, 74] { R7126 += 1, R7064 += 1, R6809 += 1 };
  s2 -> s2 [0, 65535] { R7126 += 1, R7064 += 1, R6809 += 1, R6810 += 1 };
  s2 -> s5 [0, 65535] { R7126 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s4 [0, 65535] { R7126 += 1, R7064 += 1 };
  s2 -> s1 [76, 65535] { R7126 += 1, R7064 += 1, R6809 += 1 };
  s3 -> s1 [0, 74] { R7126 += 1, R7064 += 1, R6809 += 1 };
  s3 -> s2 [0, 65535] { R7126 += 1, R7064 += 1, R6809 += 1, R6810 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R7126 += 1, R7063 += 1, R7064 += 1 };
  s3 -> s4 [0, 65535] { R7126 += 1, R7064 += 1 };
  s3 -> s1 [76, 65535] { R7126 += 1, R7064 += 1, R6809 += 1 };
  s4 -> s5 [0, 65535] { R7126 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R7126 += 1, R7064 += 1 };
  s5 -> s5 [0, 65535] { R7126 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R7128 += 1, R7066 += 1 };
  s0 -> s2 [0, 65535] { R7128 += 1, R7066 += 1, R6816 += 1 };
  s0 -> s0 [0, 65535] { R7127 += 1, R7128 += 1 };
  s0 -> s3 [0, 65535] { R7128 += 1, R7065 += 1, R7066 += 1 };
  s0 -> s4 [0, 65535] { R7128 += 1, R7066 += 1, R6816 += 1, R6818 += 1 };
  s1 -> s1 [0, 65535] { R7128 += 1, R7066 += 1 };
  s1 -> s5 [0, 65535] { R7128 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s1 [0, 65535] { R7128 += 1, R7066 += 1 };
  s2 -> s5 [0, 65535] { R7128 += 1 };
  s2 -> s2 [0, 65535] { R7128 += 1, R7066 += 1, R6816 += 1 };
  s2 -> s6 [0, 65535];
  s3 -> s1 [0, 65535] { R7128 += 1, R7066 += 1 };
  s3 -> s2 [0, 65535] { R7128 += 1, R7066 += 1, R6816 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R7128 += 1, R7065 += 1, R7066 += 1 };
  s3 -> s4 [0, 65535] { R7128 += 1, R7066 += 1, R6816 += 1, R6818 += 1 };
  s4 -> s1 [0, 65535] { R7128 += 1, R7066 += 1 };
  s4 -> s5 [0, 65535] { R7128 += 1 };
  s4 -> s2 [0, 65535] { R7128 += 1, R7066 += 1, R6816 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R7128 += 1, R7066 += 1, R6816 += 1, R6818 += 1 };
  s5 -> s5 [0, 65535] { R7128 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 65535] { R7130 += 1, R7067 += 1, R7068 += 1 };
  s0 -> s2 [0, 65535] { R7130 += 1, R7068 += 1, R7045 += 1, R7046 += 1, R7047 += 1 };
  s0 -> s3 [0, 65535] { R7130 += 1, R7068 += 1, R7044 += 1, R7045 += 1 };
  s0 -> s4 [0, 65535] { R7130 += 1, R7068 += 1, R7045 += 1, R7047 += 1, R7048 += 1 };
  s0 -> s0 [0, 65535] { R7129 += 1, R7130 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R7130 += 1, R7067 += 1, R7068 += 1 };
  s1 -> s2 [0, 65535] { R7130 += 1, R7068 += 1, R7045 += 1, R7046 += 1, R7047 += 1 };
  s1 -> s3 [0, 65535] { R7130 += 1, R7068 += 1, R7044 += 1, R7045 += 1 };
  s1 -> s4 [0, 65535] { R7130 += 1, R7068 += 1, R7045 += 1, R7047 += 1, R7048 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R7130 += 1, R7068 += 1 };
  s2 -> s2 [0, 65535] { R7130 += 1, R7068 += 1, R7045 += 1, R7046 += 1, R7047 += 1 };
  s2 -> s4 [0, 65535] { R7130 += 1, R7068 += 1, R7045 += 1, R7047 += 1, R7048 += 1 };
  s2 -> s7 [0, 65535] { R7130 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R7130 += 1, R7068 += 1, R7045 += 1, R7046 += 1, R7047 += 1 };
  s3 -> s3 [0, 65535] { R7130 += 1, R7068 += 1, R7044 += 1, R7045 += 1 };
  s3 -> s4 [0, 65535] { R7130 += 1, R7068 += 1, R7045 += 1, R7047 += 1, R7048 += 1 };
  s3 -> s7 [0, 65535] { R7130 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R7130 += 1, R7068 += 1 };
  s4 -> s4 [0, 65535] { R7130 += 1, R7068 += 1, R7045 += 1, R7047 += 1, R7048 += 1 };
  s4 -> s7 [0, 65535] { R7130 += 1 };
  s4 -> s8 [0, 65535] { R7130 += 1, R7068 += 1, R7045 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7130 += 1, R7068 += 1 };
  s6 -> s7 [0, 65535] { R7130 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R7130 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s6 [0, 65535] { R7130 += 1, R7068 += 1 };
  s8 -> s7 [0, 65535] { R7130 += 1 };
  s8 -> s8 [0, 65535] { R7130 += 1, R7068 += 1, R7045 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R7132 += 1, R7088 += 1, R21 += 1 };
  s0 -> s0 [0, 65535] { R7131 += 1, R7132 += 1 };
  s0 -> s2 [0, 65535] { R7132 += 1, R7087 += 1, R7088 += 1 };
  s1 -> s4 [0, 65535] { R7132 += 1 };
  s1 -> s1 [0, 65535] { R7132 += 1, R7088 += 1, R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R7132 += 1, R7088 += 1, R21 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R7132 += 1, R7087 += 1, R7088 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7132 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 69] { R7134 += 1, R7090 += 1 };
  s0 -> s0 [0, 65535] { R7133 += 1, R7134 += 1 };
  s0 -> s2 [0, 65535] { R7134 += 1, R7089 += 1, R7090 += 1 };
  s0 -> s3 [70, 70] { R7134 += 1, R7090 += 1 };
  s0 -> s4 [70, 70] { R7134 += 1, R7090 += 1 };
  s0 -> s5 [75, 75] { R7134 += 1, R7090 += 1 };
  s0 -> s1 [76, 65535] { R7134 += 1, R7090 += 1 };
  s1 -> s1 [0, 69] { R7134 += 1, R7090 += 1 };
  s1 -> s3 [70, 70] { R7134 += 1, R7090 += 1 };
  s1 -> s4 [70, 70] { R7134 += 1, R7090 += 1 };
  s1 -> s5 [75, 75] { R7134 += 1, R7090 += 1 };
  s1 -> s1 [76, 65535] { R7134 += 1, R7090 += 1 };
  s2 -> s1 [0, 69] { R7134 += 1, R7090 += 1 };
  s2 -> s2 [0, 65535] { R7134 += 1, R7089 += 1, R7090 += 1 };
  s2 -> s3 [70, 70] { R7134 += 1, R7090 += 1 };
  s2 -> s4 [70, 70] { R7134 += 1, R7090 += 1 };
  s2 -> s5 [75, 75] { R7134 += 1, R7090 += 1 };
  s2 -> s1 [76, 65535] { R7134 += 1, R7090 += 1 };
  s3 -> s3 [0, 70] { R7134 += 1, R7090 += 1 };
  s3 -> s8 [75, 75] { R7134 += 1, R7090 += 1 };
  s3 -> s3 [76, 65535] { R7134 += 1, R7090 += 1 };
  s5 -> s5 [0, 69] { R7134 += 1, R7090 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R7134 += 1 };
  s5 -> s7 [70, 70] { R7134 += 1, R7090 += 1 };
  s5 -> s8 [70, 70] { R7134 += 1, R7090 += 1 };
  s5 -> s5 [75, 65535] { R7134 += 1, R7090 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R7134 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 70] { R7134 += 1, R7090 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R7134 += 1 };
  s8 -> s8 [75, 65535] { R7134 += 1, R7090 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 69] { R7136 += 1, R7092 += 1, R83 += 1 };
  s0 -> s2 [0, 65535] { R7136 += 1, R7091 += 1, R7092 += 1 };
  s0 -> s0 [0, 65535] { R7135 += 1, R7136 += 1 };
  s0 -> s3 [70, 70] { R7136 += 1, R7092 += 1, R83 += 1 };
  s0 -> s4 [70, 70] { R7136 += 1, R7092 += 1, R83 += 1 };
  s0 -> s1 [71, 65535] { R7136 += 1, R7092 += 1, R83 += 1 };
  s1 -> s1 [0, 69] { R7136 += 1, R7092 += 1, R83 += 1 };
  s1 -> s1 [0, 65535] { R7136 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [70, 70] { R7136 += 1, R7092 += 1, R83 += 1 };
  s1 -> s4 [70, 70] { R7136 += 1, R7092 += 1, R83 += 1 };
  s1 -> s1 [71, 65535] { R7136 += 1, R7092 += 1, R83 += 1 };
  s2 -> s1 [0, 69] { R7136 += 1, R7092 += 1, R83 += 1 };
  s2 -> s2 [0, 65535] { R7136 += 1, R7091 += 1, R7092 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [70, 70] { R7136 += 1, R7092 += 1, R83 += 1 };
  s2 -> s4 [70, 70] { R7136 += 1, R7092 += 1, R83 += 1 };
  s2 -> s1 [71, 65535] { R7136 += 1, R7092 += 1, R83 += 1 };
  s3 -> s3 [0, 65535] { R7136 += 1, R7092 += 1, R83 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R7136 += 1 };
  s4 -> s4 [0, 65535] { R7136 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7136 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 69] { R7138 += 1, R7094 += 1, R85 += 1 };
  s0 -> s0 [0, 65535] { R7137 += 1, R7138 += 1 };
  s0 -> s2 [0, 65535] { R7138 += 1, R7093 += 1, R7094 += 1 };
  s0 -> s3 [70, 70] { R7138 += 1, R7094 += 1, R85 += 1 };
  s0 -> s4 [70, 70] { R7138 += 1, R7094 += 1, R85 += 1 };
  s0 -> s1 [71, 65535] { R7138 += 1, R7094 += 1, R85 += 1 };
  s1 -> s1 [0, 69] { R7138 += 1, R7094 += 1, R85 += 1 };
  s1 -> s1 [0, 65535] { R7138 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [70, 70] { R7138 += 1, R7094 += 1, R85 += 1 };
  s1 -> s4 [70, 70] { R7138 += 1, R7094 += 1, R85 += 1 };
  s1 -> s1 [71, 65535] { R7138 += 1, R7094 += 1, R85 += 1 };
  s2 -> s1 [0, 69] { R7138 += 1, R7094 += 1, R85 += 1 };
  s2 -> s2 [0, 65535] { R7138 += 1, R7093 += 1, R7094 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [70, 70] { R7138 += 1, R7094 += 1, R85 += 1 };
  s2 -> s4 [70, 70] { R7138 += 1, R7094 += 1, R85 += 1 };
  s2 -> s1 [71, 65535] { R7138 += 1, R7094 += 1, R85 += 1 };
  s3 -> s3 [0, 65535] { R7138 += 1, R7094 += 1, R85 += 1 };
  s3 -> s6 [0, 65535] { R7138 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R7138 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7138 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 69] { R7140 += 1, R7096 += 1, R87 += 1, R88 += 1 };
  s0 -> s2 [0, 69] { R7140 += 1, R7096 += 1, R88 += 1 };
  s0 -> s0 [0, 65535] { R7139 += 1, R7140 += 1 };
  s0 -> s3 [0, 65535] { R7140 += 1, R7095 += 1, R7096 += 1 };
  s0 -> s4 [70, 70] { R7140 += 1, R7096 += 1, R88 += 1 };
  s0 -> s5 [70, 70] { R7140 += 1, R7096 += 1, R87 += 1, R88 += 1 };
  s0 -> s6 [70, 70] { R7140 += 1, R7096 += 1, R87 += 1, R88 += 1 };
  s0 -> s7 [70, 70] { R7140 += 1, R7096 += 1, R88 += 1 };
  s0 -> s2 [71, 74] { R7140 += 1, R7096 += 1, R88 += 1 };
  s0 -> s1 [71, 65535] { R7140 += 1, R7096 += 1, R87 += 1, R88 += 1 };
  s0 -> s8 [75, 75] { R7140 += 1, R7096 += 1, R88 += 1 };
  s0 -> s2 [76, 65535] { R7140 += 1, R7096 += 1, R88 += 1 };
  s1 -> s1 [0, 69] { R7140 += 1, R7096 += 1, R87 += 1, R88 += 1 };
  s1 -> s2 [0, 69] { R7140 += 1, R7096 += 1, R88 += 1 };
  s1 -> s4 [70, 70] { R7140 += 1, R7096 += 1, R88 += 1 };
  s1 -> s5 [70, 70] { R7140 += 1, R7096 += 1, R87 += 1, R88 += 1 };
  s1 -> s6 [70, 70] { R7140 += 1, R7096 += 1, R87 += 1, R88 += 1 };
  s1 -> s7 [70, 70] { R7140 += 1, R7096 += 1, R88 += 1 };
  s1 -> s2 [71, 74] { R7140 += 1, R7096 += 1, R88 += 1 };
  s1 -> s1 [71, 65535] { R7140 += 1, R7096 += 1, R87 += 1, R88 += 1 };
  s1 -> s8 [75, 75] { R7140 += 1, R7096 += 1, R88 += 1 };
  s1 -> s2 [76, 65535] { R7140 += 1, R7096 += 1, R88 += 1 };
  s2 -> s2 [0, 69] { R7140 += 1, R7096 += 1, R88 += 1 };
  s2 -> s4 [70, 70] { R7140 += 1, R7096 += 1, R88 += 1 };
  s2 -> s7 [70, 70] { R7140 += 1, R7096 += 1, R88 += 1 };
  s2 -> s2 [71, 74] { R7140 += 1, R7096 += 1, R88 += 1 };
  s2 -> s8 [75, 75] { R7140 += 1, R7096 += 1, R88 += 1 };
  s2 -> s2 [76, 65535] { R7140 += 1, R7096 += 1, R88 += 1 };
  s3 -> s1 [0, 69] { R7140 += 1, R7096 += 1, R87 += 1, R88 += 1 };
  s3 -> s2 [0, 69] { R7140 += 1, R7096 += 1, R88 += 1 };
  s3 -> s3 [0, 65535] { R7140 += 1, R7095 += 1, R7096 += 1 };
  s3 -> s4 [70, 70] { R7140 += 1, R7096 += 1, R88 += 1 };
  s3 -> s5 [70, 70] { R7140 += 1, R7096 += 1, R87 += 1, R88 += 1 };
  s3 -> s6 [70, 70] { R7140 += 1, R7096 += 1, R87 += 1, R88 += 1 };
  s3 -> s7 [70, 70] { R7140 += 1, R7096 += 1, R88 += 1 };
  s3 -> s2 [71, 74] { R7140 += 1, R7096 += 1, R88 += 1 };
  s3 -> s1 [71, 65535] { R7140 += 1, R7096 += 1, R87 += 1, R88 += 1 };
  s3 -> s8 [75, 75] { R7140 += 1, R7096 += 1, R88 += 1 };
  s3 -> s2 [76, 65535] { R7140 += 1, R7096 += 1, R88 += 1 };
  s4 -> s4 [0, 74] { R7140 += 1, R7096 += 1, R88 += 1 };
  s4 -> s10 [75, 75] { R7140 += 1, R7096 += 1, R88 += 1 };
  s4 -> s4 [76, 65535] { R7140 += 1, R7096 += 1, R88 += 1 };
  s6 -> s4 [0, 74] { R7140 += 1, R7096 += 1, R88 += 1 };
  s6 -> s6 [0, 65535] { R7140 += 1, R7096 += 1, R87 += 1, R88 += 1 };
  s6 -> s10 [75, 75] { R7140 += 1, R7096 += 1, R88 += 1 };
  s6 -> s4 [76, 65535] { R7140 += 1, R7096 += 1, R88 += 1 };
  s8 -> s8 [0, 69] { R7140 += 1, R7096 += 1, R88 += 1 };
  s8 -> s8 [0, 65535] { R7140 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [70, 70] { R7140 += 1, R7096 += 1, R88 += 1 };
  s8 -> s11 [70, 70] { R7140 += 1, R7096 += 1, R88 += 1 };
  s8 -> s8 [71, 65535] { R7140 += 1, R7096 += 1, R88 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R7140 += 1, R7096 += 1, R88 += 1 };
  s10 -> s9 [0, 65535];
  s10 -> s12 [0, 65535] { R7140 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R7140 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R7140 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 69] { R7142 += 1, R7098 += 1, R91 += 1, R92 += 1 };
  s0 -> s0 [0, 65535] { R7141 += 1, R7142 += 1 };
  s0 -> s2 [0, 65535] { R7142 += 1, R7097 += 1, R7098 += 1 };
  s0 -> s3 [70, 70] { R7142 += 1, R7098 += 1, R91 += 1, R92 += 1 };
  s0 -> s4 [70, 70] { R7142 += 1, R7098 += 1, R91 += 1, R92 += 1 };
  s0 -> s1 [71, 65535] { R7142 += 1, R7098 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 69] { R7142 += 1, R7098 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 65535] { R7142 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [70, 70] { R7142 += 1, R7098 += 1, R91 += 1, R92 += 1 };
  s1 -> s4 [70, 70] { R7142 += 1, R7098 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [71, 65535] { R7142 += 1, R7098 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [0, 69] { R7142 += 1, R7098 += 1, R91 += 1, R92 += 1 };
  s2 -> s2 [0, 65535] { R7142 += 1, R7097 += 1, R7098 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [70, 70] { R7142 += 1, R7098 += 1, R91 += 1, R92 += 1 };
  s2 -> s4 [70, 70] { R7142 += 1, R7098 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [71, 65535] { R7142 += 1, R7098 += 1, R91 += 1, R92 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R7142 += 1 };
  s3 -> s3 [0, 65535] { R7142 += 1, R7098 += 1, R91 += 1, R92 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R7142 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7142 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 69] { R7144 += 1, R7100 += 1, R6805 += 1, R6806 += 1 };
  s0 -> s2 [0, 69] { R7144 += 1, R7100 += 1, R6806 += 1, R6807 += 1 };
  s0 -> s0 [0, 65535] { R7143 += 1, R7144 += 1 };
  s0 -> s3 [0, 65535] { R7144 += 1, R7099 += 1, R7100 += 1 };
  s0 -> s4 [70, 70] { R7144 += 1, R7100 += 1, R6805 += 1, R6806 += 1 };
  s0 -> s5 [70, 70] { R7144 += 1, R7100 += 1, R6806 += 1, R6807 += 1 };
  s0 -> s6 [70, 70] { R7144 += 1, R7100 += 1, R6805 += 1, R6806 += 1 };
  s0 -> s7 [70, 70] { R7144 += 1, R7100 += 1, R6806 += 1, R6807 += 1 };
  s0 -> s1 [71, 65535] { R7144 += 1, R7100 += 1, R6805 += 1, R6806 += 1 };
  s0 -> s2 [71, 65535] { R7144 += 1, R7100 += 1, R6806 += 1, R6807 += 1 };
  s1 -> s1 [0, 69] { R7144 += 1, R7100 += 1, R6805 += 1, R6806 += 1 };
  s1 -> s2 [0, 69] { R7144 += 1, R7100 += 1, R6806 += 1, R6807 += 1 };
  s1 -> s4 [70, 70] { R7144 += 1, R7100 += 1, R6805 += 1, R6806 += 1 };
  s1 -> s5 [70, 70] { R7144 += 1, R7100 += 1, R6806 += 1, R6807 += 1 };
  s1 -> s6 [70, 70] { R7144 += 1, R7100 += 1, R6805 += 1, R6806 += 1 };
  s1 -> s7 [70, 70] { R7144 += 1, R7100 += 1, R6806 += 1, R6807 += 1 };
  s1 -> s1 [71, 65535] { R7144 += 1, R7100 += 1, R6805 += 1, R6806 += 1 };
  s1 -> s2 [71, 65535] { R7144 += 1, R7100 += 1, R6806 += 1, R6807 += 1 };
  s2 -> s2 [0, 69] { R7144 += 1, R7100 += 1, R6806 += 1, R6807 += 1 };
  s2 -> s9 [0, 65535];
  s2 -> s2 [0, 65535] { R7144 += 1 };
  s2 -> s5 [70, 70] { R7144 += 1, R7100 += 1, R6806 += 1, R6807 += 1 };
  s2 -> s7 [70, 70] { R7144 += 1, R7100 += 1, R6806 += 1, R6807 += 1 };
  s2 -> s2 [71, 65535] { R7144 += 1, R7100 += 1, R6806 += 1, R6807 += 1 };
  s3 -> s1 [0, 69] { R7144 += 1, R7100 += 1, R6805 += 1, R6806 += 1 };
  s3 -> s2 [0, 69] { R7144 += 1, R7100 += 1, R6806 += 1, R6807 += 1 };
  s3 -> s3 [0, 65535] { R7144 += 1, R7099 += 1, R7100 += 1 };
  s3 -> s4 [70, 70] { R7144 += 1, R7100 += 1, R6805 += 1, R6806 += 1 };
  s3 -> s5 [70, 70] { R7144 += 1, R7100 += 1, R6806 += 1, R6807 += 1 };
  s3 -> s6 [70, 70] { R7144 += 1, R7100 += 1, R6805 += 1, R6806 += 1 };
  s3 -> s7 [70, 70] { R7144 += 1, R7100 += 1, R6806 += 1, R6807 += 1 };
  s3 -> s1 [71, 65535] { R7144 += 1, R7100 += 1, R6805 += 1, R6806 += 1 };
  s3 -> s2 [71, 65535] { R7144 += 1, R7100 += 1, R6806 += 1, R6807 += 1 };
  s4 -> s4 [0, 65535] { R7144 += 1, R7100 += 1, R6805 += 1, R6806 += 1 };
  s4 -> s7 [0, 65535] { R7144 += 1, R7100 += 1, R6806 += 1, R6807 += 1 };
  s5 -> s5 [0, 65535] { R7144 += 1 };
  s5 -> s9 [0, 65535];
  s7 -> s7 [0, 65535] { R7144 += 1, R7100 += 1, R6806 += 1, R6807 += 1 };
  s7 -> s8 [0, 65535] { R7144 += 1 };
  s7 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R7144 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s8, s5, s2, s9, s7;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 69] { R7146 += 1, R7102 += 1, R6811 += 1, R6812 += 1 };
  s0 -> s2 [0, 69] { R7146 += 1, R7102 += 1, R6812 += 1, R6814 += 1 };
  s0 -> s3 [0, 69] { R7146 += 1, R7102 += 1, R6812 += 1, R6813 += 1, R6814 += 1 };
  s0 -> s0 [0, 65535] { R7145 += 1, R7146 += 1 };
  s0 -> s4 [0, 65535] { R7146 += 1, R7101 += 1, R7102 += 1 };
  s0 -> s5 [70, 70] { R7146 += 1, R7102 += 1, R6812 += 1, R6814 += 1 };
  s0 -> s6 [70, 70] { R7146 += 1, R7102 += 1, R6811 += 1, R6812 += 1 };
  s0 -> s7 [70, 70] { R7146 += 1, R7102 += 1, R6812 += 1, R6814 += 1 };
  s0 -> s8 [70, 70] { R7146 += 1, R7102 += 1, R6812 += 1, R6813 += 1, R6814 += 1 };
  s0 -> s9 [70, 70] { R7146 += 1, R7102 += 1, R6812 += 1, R6813 += 1, R6814 += 1 };
  s0 -> s10 [70, 70] { R7146 += 1, R7102 += 1, R6811 += 1, R6812 += 1 };
  s0 -> s2 [71, 74] { R7146 += 1, R7102 += 1, R6812 += 1, R6814 += 1 };
  s0 -> s1 [71, 65535] { R7146 += 1, R7102 += 1, R6811 += 1, R6812 += 1 };
  s0 -> s3 [71, 65535] { R7146 += 1, R7102 += 1, R6812 += 1, R6813 += 1, R6814 += 1 };
  s0 -> s11 [75, 75] { R7146 += 1, R7102 += 1, R6812 += 1, R6814 += 1 };
  s0 -> s2 [76, 65535] { R7146 += 1, R7102 += 1, R6812 += 1, R6814 += 1 };
  s1 -> s1 [0, 69] { R7146 += 1, R7102 += 1, R6811 += 1, R6812 += 1 };
  s1 -> s2 [0, 69] { R7146 += 1, R7102 += 1, R6812 += 1, R6814 += 1 };
  s1 -> s3 [0, 69] { R7146 += 1, R7102 += 1, R6812 += 1, R6813 += 1, R6814 += 1 };
  s1 -> s5 [70, 70] { R7146 += 1, R7102 += 1, R6812 += 1, R6814 += 1 };
  s1 -> s6 [70, 70] { R7146 += 1, R7102 += 1, R6811 += 1, R6812 += 1 };
  s1 -> s7 [70, 70] { R7146 += 1, R7102 += 1, R6812 += 1, R6814 += 1 };
  s1 -> s8 [70, 70] { R7146 += 1, R7102 += 1, R6812 += 1, R6813 += 1, R6814 += 1 };
  s1 -> s9 [70, 70] { R7146 += 1, R7102 += 1, R6812 += 1, R6813 += 1, R6814 += 1 };
  s1 -> s10 [70, 70] { R7146 += 1, R7102 += 1, R6811 += 1, R6812 += 1 };
  s1 -> s2 [71, 74] { R7146 += 1, R7102 += 1, R6812 += 1, R6814 += 1 };
  s1 -> s1 [71, 65535] { R7146 += 1, R7102 += 1, R6811 += 1, R6812 += 1 };
  s1 -> s3 [71, 65535] { R7146 += 1, R7102 += 1, R6812 += 1, R6813 += 1, R6814 += 1 };
  s1 -> s11 [75, 75] { R7146 += 1, R7102 += 1, R6812 += 1, R6814 += 1 };
  s1 -> s2 [76, 65535] { R7146 += 1, R7102 += 1, R6812 += 1, R6814 += 1 };
  s2 -> s2 [0, 69] { R7146 += 1, R7102 += 1, R6812 += 1, R6814 += 1 };
  s2 -> s5 [70, 70] { R7146 += 1, R7102 += 1, R6812 += 1, R6814 += 1 };
  s2 -> s7 [70, 70] { R7146 += 1, R7102 += 1, R6812 += 1, R6814 += 1 };
  s2 -> s2 [71, 74] { R7146 += 1, R7102 += 1, R6812 += 1, R6814 += 1 };
  s2 -> s11 [75, 75] { R7146 += 1, R7102 += 1, R6812 += 1, R6814 += 1 };
  s2 -> s2 [76, 65535] { R7146 += 1, R7102 += 1, R6812 += 1, R6814 += 1 };
  s3 -> s2 [0, 69] { R7146 += 1, R7102 += 1, R6812 += 1, R6814 += 1 };
  s3 -> s3 [0, 69] { R7146 += 1, R7102 += 1, R6812 += 1, R6813 += 1, R6814 += 1 };
  s3 -> s5 [70, 70] { R7146 += 1, R7102 += 1, R6812 += 1, R6814 += 1 };
  s3 -> s7 [70, 70] { R7146 += 1, R7102 += 1, R6812 += 1, R6814 += 1 };
  s3 -> s8 [70, 70] { R7146 += 1, R7102 += 1, R6812 += 1, R6813 += 1, R6814 += 1 };
  s3 -> s9 [70, 70] { R7146 += 1, R7102 += 1, R6812 += 1, R6813 += 1, R6814 += 1 };
  s3 -> s2 [71, 74] { R7146 += 1, R7102 += 1, R6812 += 1, R6814 += 1 };
  s3 -> s3 [71, 65535] { R7146 += 1, R7102 += 1, R6812 += 1, R6813 += 1, R6814 += 1 };
  s3 -> s11 [75, 75] { R7146 += 1, R7102 += 1, R6812 += 1, R6814 += 1 };
  s3 -> s2 [76, 65535] { R7146 += 1, R7102 += 1, R6812 += 1, R6814 += 1 };
  s4 -> s1 [0, 69] { R7146 += 1, R7102 += 1, R6811 += 1, R6812 += 1 };
  s4 -> s2 [0, 69] { R7146 += 1, R7102 += 1, R6812 += 1, R6814 += 1 };
  s4 -> s3 [0, 69] { R7146 += 1, R7102 += 1, R6812 += 1, R6813 += 1, R6814 += 1 };
  s4 -> s4 [0, 65535] { R7146 += 1, R7101 += 1, R7102 += 1 };
  s4 -> s5 [70, 70] { R7146 += 1, R7102 += 1, R6812 += 1, R6814 += 1 };
  s4 -> s6 [70, 70] { R7146 += 1, R7102 += 1, R6811 += 1, R6812 += 1 };
  s4 -> s7 [70, 70] { R7146 += 1, R7102 += 1, R6812 += 1, R6814 += 1 };
  s4 -> s8 [70, 70] { R7146 += 1, R7102 += 1, R6812 += 1, R6813 += 1, R6814 += 1 };
  s4 -> s9 [70, 70] { R7146 += 1, R7102 += 1, R6812 += 1, R6813 += 1, R6814 += 1 };
  s4 -> s10 [70, 70] { R7146 += 1, R7102 += 1, R6811 += 1, R6812 += 1 };
  s4 -> s2 [71, 74] { R7146 += 1, R7102 += 1, R6812 += 1, R6814 += 1 };
  s4 -> s1 [71, 65535] { R7146 += 1, R7102 += 1, R6811 += 1, R6812 += 1 };
  s4 -> s3 [71, 65535] { R7146 += 1, R7102 += 1, R6812 += 1, R6813 += 1, R6814 += 1 };
  s4 -> s11 [75, 75] { R7146 += 1, R7102 += 1, R6812 += 1, R6814 += 1 };
  s4 -> s2 [76, 65535] { R7146 += 1, R7102 += 1, R6812 += 1, R6814 += 1 };
  s5 -> s5 [0, 74] { R7146 += 1, R7102 += 1, R6812 += 1, R6814 += 1 };
  s5 -> s14 [75, 75] { R7146 += 1, R7102 += 1, R6812 += 1, R6814 += 1 };
  s5 -> s5 [76, 65535] { R7146 += 1, R7102 += 1, R6812 += 1, R6814 += 1 };
  s6 -> s5 [0, 74] { R7146 += 1, R7102 += 1, R6812 += 1, R6814 += 1 };
  s6 -> s6 [0, 65535] { R7146 += 1, R7102 += 1, R6811 += 1, R6812 += 1 };
  s6 -> s8 [0, 65535] { R7146 += 1, R7102 += 1, R6812 += 1, R6813 += 1, R6814 += 1 };
  s6 -> s14 [75, 75] { R7146 += 1, R7102 += 1, R6812 += 1, R6814 += 1 };
  s6 -> s5 [76, 65535] { R7146 += 1, R7102 += 1, R6812 += 1, R6814 += 1 };
  s8 -> s5 [0, 74] { R7146 += 1, R7102 += 1, R6812 += 1, R6814 += 1 };
  s8 -> s8 [0, 65535] { R7146 += 1, R7102 += 1, R6812 += 1, R6813 += 1, R6814 += 1 };
  s8 -> s14 [75, 75] { R7146 += 1, R7102 += 1, R6812 += 1, R6814 += 1 };
  s8 -> s5 [76, 65535] { R7146 += 1, R7102 += 1, R6812 += 1, R6814 += 1 };
  s11 -> s11 [0, 69] { R7146 += 1, R7102 += 1, R6812 += 1, R6814 += 1 };
  s11 -> s11 [0, 65535] { R7146 += 1 };
  s11 -> s12 [0, 65535];
  s11 -> s13 [70, 70] { R7146 += 1, R7102 += 1, R6812 += 1, R6814 += 1 };
  s11 -> s14 [70, 70] { R7146 += 1, R7102 += 1, R6812 += 1, R6814 += 1 };
  s11 -> s11 [71, 65535] { R7146 += 1, R7102 += 1, R6812 += 1, R6814 += 1 };
  s12 -> s12 [0, 65535];
  s13 -> s13 [0, 65535] { R7146 += 1 };
  s13 -> s12 [0, 65535];
  s14 -> s12 [0, 65535];
  s14 -> s15 [0, 65535] { R7146 += 1 };
  s14 -> s14 [0, 65535] { R7146 += 1, R7102 += 1, R6812 += 1, R6814 += 1 };
  s15 -> s12 [0, 65535];
  s15 -> s15 [0, 65535] { R7146 += 1 };
  accepting s12, s13, s14, s15, s11;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 69] { R7148 += 1, R7104 += 1, R7039 += 1, R7040 += 1 };
  s0 -> s0 [0, 65535] { R7147 += 1, R7148 += 1 };
  s0 -> s2 [0, 65535] { R7148 += 1, R7103 += 1, R7104 += 1 };
  s0 -> s3 [70, 70] { R7148 += 1, R7104 += 1, R7039 += 1, R7040 += 1 };
  s0 -> s4 [70, 70] { R7148 += 1, R7104 += 1, R7039 += 1, R7040 += 1 };
  s0 -> s1 [71, 65535] { R7148 += 1, R7104 += 1, R7039 += 1, R7040 += 1 };
  s1 -> s1 [0, 69] { R7148 += 1, R7104 += 1, R7039 += 1, R7040 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R7148 += 1 };
  s1 -> s3 [70, 70] { R7148 += 1, R7104 += 1, R7039 += 1, R7040 += 1 };
  s1 -> s4 [70, 70] { R7148 += 1, R7104 += 1, R7039 += 1, R7040 += 1 };
  s1 -> s1 [71, 65535] { R7148 += 1, R7104 += 1, R7039 += 1, R7040 += 1 };
  s2 -> s1 [0, 69] { R7148 += 1, R7104 += 1, R7039 += 1, R7040 += 1 };
  s2 -> s2 [0, 65535] { R7148 += 1, R7103 += 1, R7104 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [70, 70] { R7148 += 1, R7104 += 1, R7039 += 1, R7040 += 1 };
  s2 -> s4 [70, 70] { R7148 += 1, R7104 += 1, R7039 += 1, R7040 += 1 };
  s2 -> s1 [71, 65535] { R7148 += 1, R7104 += 1, R7039 += 1, R7040 += 1 };
  s3 -> s3 [0, 65535] { R7148 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R7148 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R7148 += 1, R7104 += 1, R7039 += 1, R7040 += 1 };
  s5 -> s5 [0, 65535] { R7148 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [102, 102];
  accepting s1;
};
};
constraint R3 = R7148 && R23 - R7148 = -1 && R24 = R7148 && R25 - R7148 = -1 && R26 = R7148 && R27 = 0 && R28 = 1 && R29 = 0 && R30 = 1 && R45 + R84 + R83 + -1*R6816 + -1*R6812 - R66 = 0 && R49 + R89 + R87 = 0 && R50 + R90 + R88 + -1*R6816 + -1*R6812 - R66 = 0 && R55 + R96 + R93 + -1*R6818 + -1*R6814 - R68 = 0 && R65 + R6815 + R6811 = 0 && R67 + R6817 + R6813 = 0 && R7089 = 0 && R7090 = 0 && R7095 = 0 && R7096 = 0 && R7099 = 0 && R7100 = 0 && R7101 = 0 && R7102 = 0 && R7105 = 0 && R7106 = R7148 && R7107 = 0 && R7108 = R7148 && R7109 = 0 && R7110 = R7148 && R7111 = 0 && R7112 = R7148 && R7113 = 0 && R7114 = R7148 && R7115 = 0 && R7116 = R7148 && R7117 = 0 && R7118 = R7148 && R7119 = 0 && R7120 = R7148 && R7121 = 0 && R7122 = R7148 && R7123 = 0 && R7124 = R7148 && R7125 = 0 && R7126 = R7148 && R7127 = 0 && R7128 = R7148 && R7129 = 0 && R7130 = R7148 && R7131 = 0 && R7132 = R7148 && R7133 = 0 && R7134 = R7148 && R7135 = 0 && R7136 = R7148 && R7137 = 0 && R7138 = R7148 && R7139 = 0 && R7140 = R7148 && R7141 = 0 && R7142 = R7148 && R7143 = 0 && R7144 = R7148 && R7145 = 0 && R7146 = R7148 && R7147 = 0 && -1 < R2 && R12 < 1 && R15 < 1 && R16 < 1 && R47 + R86 + R85 < 1 && R61 + R6810 + R6807 < 1 && -1*R6816 + -1*R6812 - R66 < 1 && -1*R6818 + -1*R6814 - R68 < 1 && 0 < R7148 && (R2 != 0 || R20 = 0 || (R7049 = 0 && R7050 = 0)) && (R2 != 0 || R20 = 0 || (R7051 = 0 && R7052 = 0)) && (R2 != 0 || R20 = 0 || (R7053 = 0 && R7054 = 0)) && (R2 != 0 || R20 = 0 || (R7055 = 0 && R7056 = 0)) && (R2 != 0 || R20 = 0 || (R7057 = 0 && R7058 = 0)) && (R2 != 0 || R20 = 0 || (R7059 = 0 && R7060 = 0)) && (R2 != 0 || R20 = 0 || (R7061 = 0 && R7062 = 0)) && (R2 != 0 || R20 = 0 || (R7063 = 0 && R7064 = 0)) && (R2 != 0 || R20 = 0 || (R7065 = 0 && R7066 = 0)) && (R2 != 0 || R20 = 0 || (R7067 = 0 && R7068 = 0)) && (R53 + R94 + R91 != 0 || R54 + R95 + R92 + -1*R6816 + -1*R6812 - R66 = 0 || R66 + R6816 + R6812 < 1) && (R59 + R6808 + R6805 != 0 || R60 + R6809 + R6806 + -1*R6816 + -1*R6812 - R66 = 0 || R66 + R6816 + R6812 < 1) && (R66 + R6816 + R6812 != 0 || ((R53 + R94 + R91 != 0 || R54 + R95 + R92 = 0 || R68 + R6818 + R6814 < 1) && (R53 + R94 + R91 = 0 || R68 + R6818 + R6814 < 1))) && (R66 + R6816 + R6812 != 0 || ((R59 + R6808 + R6805 != 0 || R60 + R6809 + R6806 = 0 || R68 + R6818 + R6814 < 1) && (R59 + R6808 + R6805 = 0 || R68 + R6818 + R6814 < 1))) && (R66 + R6816 + R6812 != 0 || ((R73 + R7044 + R7039 != 0 || R74 + R7045 + R7040 = 0 || R68 + R6818 + R6814 < 1) && (R73 + R7044 + R7039 = 0 || R68 + R6818 + R6814 < 1))) && (R68 + R6818 + R6814 != 0 || R77 + R7048 + R7043 = 0 || (R75 + R7046 + R7041 = 0 && R76 + R7047 + R7042 = 0)) && (R73 + R7044 + R7039 != 0 || R66 + R6816 + R6812 + -1*R7045 + -1*R7040 - R74 = 0 || R66 + R6816 + R6812 < 1) && (R75 + R7046 + R7041 != 0 || R68 + R6818 + R6814 + -1*R7047 + -1*R7042 - R76 = 0 || R68 + R6818 + R6814 < 1) && (R7049 != 0 || R2 = R7050 || R2 < 1) && (R7051 != 0 || R2 = R7052 || R2 < 1) && (R7053 != 0 || R2 = R7054 || R2 < 1) && (R7055 != 0 || R2 = R7056 || R2 < 1) && (R7057 != 0 || R2 = R7058 || R2 < 1) && (R7059 != 0 || R2 = R7060 || R2 < 1) && (R7061 != 0 || R2 = R7062 || R2 < 1) && (R7063 != 0 || R2 = R7064 || R2 < 1) && (R7065 != 0 || R2 = R7066 || R2 < 1) && (R7067 != 0 || R2 = R7068 || R2 < 1) && (R21 = 0 || (R7087 = 0 && R7088 = 0)) && (R21 = 0 || (R7091 = 0 && R7092 = 0)) && (R21 = 0 || (R7093 = 0 && R7094 = 0)) && (R21 = 0 || (R7097 = 0 && R7098 = 0)) && (R21 = 0 || (R7103 = 0 && R7104 = 0)) && (R22 = 0 || (R7069 = 0 && R7070 = 0)) && (R22 = 0 || (R7071 = 0 && R7072 = 0)) && (R22 = 0 || (R7073 = 0 && R7074 = 0)) && (R22 = 0 || (R7075 = 0 && R7076 = 0)) && (R22 = 0 || (R7077 = 0 && R7078 = 0)) && (R22 = 0 || (R7079 = 0 && R7080 = 0)) && (R22 = 0 || (R7081 = 0 && R7082 = 0)) && (R22 = 0 || (R7083 = 0 && R7084 = 0)) && (R22 = 0 || (R7085 = 0 && R7086 = 0)) && (R53 + R94 + R91 = 0 || R66 + R6816 + R6812 < 1) && (R59 + R6808 + R6805 = 0 || R66 + R6816 + R6812 < 1) && (R73 + R7044 + R7039 = 0 || R66 + R6816 + R6812 < 1) && (R75 + R7046 + R7041 = 0 || R68 + R6818 + R6814 < 1) && (R7049 = 0 || R2 < 1) && (R7051 = 0 || R2 < 1) && (R7053 = 0 || R2 < 1) && (R7055 = 0 || R2 < 1) && (R7057 = 0 || R2 < 1) && (R7059 = 0 || R2 < 1) && (R7061 = 0 || R2 < 1) && (R7063 = 0 || R2 < 1) && (R7065 = 0 || R2 < 1) && (R7067 = 0 || R2 < 1);
// End of Parikh automata intersection problem
