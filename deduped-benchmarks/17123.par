// Parikh automata intersection problem, generated by OSTRICH+
counter int R12, R15, R16, R2, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R4, R45, R47, R49, R5, R50, R53, R54, R55, R59, R60, R61, R65, R66, R67, R68, R6805, R6806, R6807, R6808, R6809, R6810, R73, R74, R75, R76, R77, R83, R84, R8485, R8486, R8487, R8488, R8489, R8490, R8491, R8492, R85, R86, R8603, R8604, R8605, R8606, R8607, R8608, R8609, R8610, R8611, R8612, R8613, R8614, R8615, R8616, R8617, R8618, R8619, R8620, R8621, R8622, R8623, R8624, R8625, R8626, R8627, R8628, R8629, R8630, R8631, R8632, R8633, R8634, R8635, R8636, R8637, R8638, R8639, R8640, R8641, R8642, R8643, R8644, R8645, R8646, R8647, R8648, R8649, R8650, R8651, R8652, R8653, R8654, R8655, R8656, R8657, R8658, R8659, R8660, R8661, R8662, R8663, R8664, R8665, R8666, R8667, R8668, R8669, R8670, R8671, R8672, R8673, R8674, R8675, R8676, R8677, R8678, R8679, R8680, R8681, R8682, R8683, R8684, R8685, R8686, R8687, R8688, R8689, R8690, R8691, R8692, R8693, R8694, R8695, R8696, R8697, R8698, R8699, R87, R8700, R8701, R8702, R8703, R8704, R8705, R8706, R8707, R8708, R8709, R8710, R8711, R8712, R88, R89, R90, R91, R92, R93, R94, R95, R96;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [70, 70];
  s0 -> s0 [71, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [70, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R15 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 69];
  s0 -> s0 [0, 65535] { R16 += 1 };
  s0 -> s2 [70, 70];
  s0 -> s1 [71, 65535];
  s1 -> s1 [0, 69];
  s1 -> s2 [70, 70];
  s1 -> s1 [71, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R24 += 1 };
  s0 -> s0 [0, 65535] { R23 += 1, R24 += 1 };
  s0 -> s2 [9, 13] { R24 += 1 };
  s0 -> s1 [14, 31] { R24 += 1 };
  s0 -> s2 [32, 32] { R24 += 1 };
  s0 -> s1 [33, 65535] { R24 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R24 += 1 };
  s2 -> s1 [0, 65535] { R24 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R25 += 1, R26 += 1 };
  s1 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R28 += 1 };
  s0 -> s0 [0, 65535] { R27 += 1, R28 += 1 };
  s0 -> s2 [9, 13] { R28 += 1 };
  s0 -> s1 [14, 31] { R28 += 1 };
  s0 -> s2 [32, 32] { R28 += 1 };
  s0 -> s1 [33, 65535] { R28 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R28 += 1 };
  s2 -> s1 [0, 65535] { R28 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R29 += 1, R30 += 1 };
  s1 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R8633 += 1, R8634 += 1 };
  s0 -> s1 [0, 65535] { R8634 += 1, R22 += 1 };
  s1 -> s1 [0, 65535] { R8634 += 1, R22 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 69] { R8636 += 1 };
  s0 -> s0 [0, 65535] { R8635 += 1, R8636 += 1 };
  s0 -> s2 [70, 70] { R8636 += 1 };
  s0 -> s3 [70, 70] { R8636 += 1 };
  s0 -> s1 [76, 65535] { R8636 += 1 };
  s1 -> s1 [0, 69] { R8636 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R8636 += 1 };
  s1 -> s3 [70, 70] { R8636 += 1 };
  s1 -> s1 [76, 65535] { R8636 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 70] { R8636 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [76, 65535] { R8636 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 69] { R8638 += 1, R45 += 1 };
  s0 -> s0 [0, 65535] { R8637 += 1, R8638 += 1 };
  s0 -> s2 [70, 70] { R8638 += 1, R45 += 1 };
  s0 -> s3 [70, 70] { R8638 += 1, R45 += 1 };
  s0 -> s1 [71, 65535] { R8638 += 1, R45 += 1 };
  s1 -> s1 [0, 69] { R8638 += 1, R45 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R8638 += 1, R45 += 1 };
  s1 -> s3 [70, 70] { R8638 += 1, R45 += 1 };
  s1 -> s1 [71, 65535] { R8638 += 1, R45 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R8638 += 1, R45 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 69] { R8640 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R8639 += 1, R8640 += 1 };
  s0 -> s2 [70, 70] { R8640 += 1, R47 += 1 };
  s0 -> s3 [70, 70] { R8640 += 1, R47 += 1 };
  s0 -> s1 [71, 65535] { R8640 += 1, R47 += 1 };
  s1 -> s1 [0, 69] { R8640 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R8640 += 1, R47 += 1 };
  s1 -> s3 [70, 70] { R8640 += 1, R47 += 1 };
  s1 -> s1 [71, 65535] { R8640 += 1, R47 += 1 };
  s2 -> s2 [0, 65535] { R8640 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 69] { R8642 += 1, R49 += 1, R50 += 1 };
  s0 -> s0 [0, 65535] { R8641 += 1, R8642 += 1 };
  s0 -> s2 [70, 70] { R8642 += 1, R49 += 1, R50 += 1 };
  s0 -> s3 [70, 70] { R8642 += 1, R49 += 1, R50 += 1 };
  s0 -> s1 [71, 65535] { R8642 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 69] { R8642 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R8642 += 1, R49 += 1, R50 += 1 };
  s1 -> s3 [70, 70] { R8642 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [71, 65535] { R8642 += 1, R49 += 1, R50 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8642 += 1, R49 += 1, R50 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 69] { R8644 += 1, R53 += 1, R54 += 1 };
  s0 -> s0 [0, 65535] { R8643 += 1, R8644 += 1 };
  s0 -> s2 [70, 70] { R8644 += 1, R53 += 1, R54 += 1 };
  s0 -> s3 [70, 70] { R8644 += 1, R53 += 1, R54 += 1 };
  s0 -> s1 [71, 65535] { R8644 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 69] { R8644 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R8644 += 1, R53 += 1, R54 += 1 };
  s1 -> s3 [70, 70] { R8644 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [71, 65535] { R8644 += 1, R53 += 1, R54 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8644 += 1, R53 += 1, R54 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 69] { R8646 += 1, R59 += 1, R60 += 1 };
  s0 -> s0 [0, 65535] { R8645 += 1, R8646 += 1 };
  s0 -> s2 [70, 70] { R8646 += 1, R59 += 1, R60 += 1 };
  s0 -> s3 [70, 70] { R8646 += 1, R59 += 1, R60 += 1 };
  s0 -> s1 [71, 65535] { R8646 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 69] { R8646 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R8646 += 1, R59 += 1, R60 += 1 };
  s1 -> s3 [70, 70] { R8646 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [71, 65535] { R8646 += 1, R59 += 1, R60 += 1 };
  s2 -> s2 [0, 65535] { R8646 += 1, R59 += 1, R60 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 69] { R8648 += 1, R65 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R8647 += 1, R8648 += 1 };
  s0 -> s2 [70, 70] { R8648 += 1, R65 += 1, R66 += 1 };
  s0 -> s3 [70, 70] { R8648 += 1, R65 += 1, R66 += 1 };
  s0 -> s1 [71, 65535] { R8648 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 69] { R8648 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R8648 += 1, R65 += 1, R66 += 1 };
  s1 -> s3 [70, 70] { R8648 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [71, 65535] { R8648 += 1, R65 += 1, R66 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8648 += 1, R65 += 1, R66 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 69] { R8650 += 1, R73 += 1, R74 += 1 };
  s0 -> s0 [0, 65535] { R8649 += 1, R8650 += 1 };
  s0 -> s2 [70, 70] { R8650 += 1, R73 += 1, R74 += 1 };
  s0 -> s3 [70, 70] { R8650 += 1, R73 += 1, R74 += 1 };
  s0 -> s1 [71, 65535] { R8650 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 69] { R8650 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R8650 += 1, R73 += 1, R74 += 1 };
  s1 -> s3 [70, 70] { R8650 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [71, 65535] { R8650 += 1, R73 += 1, R74 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R8650 += 1, R73 += 1, R74 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 69] { R8670 += 1 };
  s0 -> s0 [0, 65535] { R8669 += 1, R8670 += 1 };
  s0 -> s2 [70, 70] { R8670 += 1 };
  s0 -> s1 [71, 65535] { R8670 += 1 };
  s1 -> s1 [0, 69] { R8670 += 1 };
  s1 -> s2 [70, 70] { R8670 += 1 };
  s1 -> s1 [71, 65535] { R8670 += 1 };
  s2 -> s2 [0, 65535] { R8670 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R8672 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R8671 += 1, R8672 += 1 };
  s1 -> s1 [0, 65535] { R8672 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 69] { R8674 += 1 };
  s0 -> s2 [0, 65535] { R8674 += 1, R12 += 1 };
  s0 -> s0 [0, 65535] { R8673 += 1, R8674 += 1 };
  s0 -> s3 [70, 70] { R8674 += 1 };
  s0 -> s1 [71, 65535] { R8674 += 1 };
  s1 -> s1 [0, 69] { R8674 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [70, 70] { R8674 += 1 };
  s1 -> s1 [71, 65535] { R8674 += 1 };
  s2 -> s1 [0, 69] { R8674 += 1 };
  s2 -> s2 [0, 65535] { R8674 += 1, R12 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [70, 70] { R8674 += 1 };
  s2 -> s1 [71, 65535] { R8674 += 1 };
  s3 -> s3 [0, 65535] { R8674 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 69] { R8676 += 1, R8614 += 1 };
  s0 -> s0 [0, 65535] { R8675 += 1, R8676 += 1 };
  s0 -> s2 [0, 65535] { R8676 += 1, R8613 += 1, R8614 += 1 };
  s0 -> s1 [71, 65535] { R8676 += 1, R8614 += 1 };
  s1 -> s1 [0, 69] { R8676 += 1, R8614 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R8676 += 1 };
  s1 -> s1 [71, 65535] { R8676 += 1, R8614 += 1 };
  s2 -> s1 [0, 69] { R8676 += 1, R8614 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R8676 += 1, R8613 += 1, R8614 += 1 };
  s2 -> s1 [71, 65535] { R8676 += 1, R8614 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s0 [0, 65535] { R8677 += 1, R8678 += 1 };
  s0 -> s1 [0, 65535] { R8678 += 1, R8616 += 1, R20 += 1 };
  s0 -> s2 [0, 65535] { R8678 += 1, R8615 += 1, R8616 += 1 };
  s1 -> s4 [0, 65535] { R8678 += 1 };
  s1 -> s1 [0, 65535] { R8678 += 1, R8616 += 1, R20 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R8678 += 1, R8616 += 1, R20 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R8678 += 1, R8615 += 1, R8616 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8678 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 70] { R8680 += 1, R8618 += 1 };
  s0 -> s2 [0, 65535] { R8680 += 1, R8617 += 1, R8618 += 1 };
  s0 -> s0 [0, 65535] { R8679 += 1, R8680 += 1 };
  s0 -> s1 [75, 65535] { R8680 += 1, R8618 += 1 };
  s1 -> s1 [0, 70] { R8680 += 1, R8618 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R8680 += 1 };
  s1 -> s1 [75, 65535] { R8680 += 1, R8618 += 1 };
  s2 -> s1 [0, 70] { R8680 += 1, R8618 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R8680 += 1, R8617 += 1, R8618 += 1 };
  s2 -> s1 [75, 65535] { R8680 += 1, R8618 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s0 [0, 65535] { R8681 += 1, R8682 += 1 };
  s0 -> s1 [0, 65535] { R8682 += 1, R8619 += 1, R8620 += 1 };
  s0 -> s2 [0, 65535] { R8682 += 1, R8620 += 1, R84 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R8682 += 1, R8619 += 1, R8620 += 1 };
  s1 -> s2 [0, 65535] { R8682 += 1, R8620 += 1, R84 += 1 };
  s2 -> s3 [0, 65535] { R8682 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8682 += 1, R8620 += 1, R84 += 1 };
  s3 -> s3 [0, 65535] { R8682 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 74] { R8684 += 1, R8622 += 1 };
  s0 -> s0 [0, 65535] { R8683 += 1, R8684 += 1 };
  s0 -> s2 [0, 65535] { R8684 += 1, R8622 += 1, R86 += 1 };
  s0 -> s3 [0, 65535] { R8684 += 1, R8621 += 1, R8622 += 1 };
  s0 -> s1 [76, 65535] { R8684 += 1, R8622 += 1 };
  s1 -> s1 [0, 74] { R8684 += 1, R8622 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R8684 += 1 };
  s1 -> s1 [76, 65535] { R8684 += 1, R8622 += 1 };
  s2 -> s1 [0, 74] { R8684 += 1, R8622 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8684 += 1, R8622 += 1, R86 += 1 };
  s2 -> s5 [0, 65535] { R8684 += 1 };
  s2 -> s1 [76, 65535] { R8684 += 1, R8622 += 1 };
  s3 -> s1 [0, 74] { R8684 += 1, R8622 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R8684 += 1, R8622 += 1, R86 += 1 };
  s3 -> s3 [0, 65535] { R8684 += 1, R8621 += 1, R8622 += 1 };
  s3 -> s1 [76, 65535] { R8684 += 1, R8622 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8684 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s0 [0, 65535] { R8685 += 1, R8686 += 1 };
  s0 -> s1 [0, 65535] { R8686 += 1, R8623 += 1, R8624 += 1 };
  s0 -> s2 [0, 65535] { R8686 += 1, R8624 += 1, R90 += 1 };
  s0 -> s3 [0, 65535] { R8686 += 1, R8624 += 1 };
  s1 -> s1 [0, 65535] { R8686 += 1, R8623 += 1, R8624 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s2 [0, 65535] { R8686 += 1, R8624 += 1, R90 += 1 };
  s1 -> s3 [0, 65535] { R8686 += 1, R8624 += 1 };
  s2 -> s4 [0, 65535] { R8686 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R8686 += 1, R8624 += 1, R90 += 1 };
  s2 -> s3 [0, 65535] { R8686 += 1, R8624 += 1 };
  s3 -> s4 [0, 65535] { R8686 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R8686 += 1, R8624 += 1 };
  s4 -> s4 [0, 65535] { R8686 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R8688 += 1, R8626 += 1, R95 += 1, R96 += 1 };
  s0 -> s2 [0, 65535] { R8688 += 1, R8625 += 1, R8626 += 1 };
  s0 -> s3 [0, 65535] { R8688 += 1, R8626 += 1, R94 += 1, R95 += 1 };
  s0 -> s0 [0, 65535] { R8687 += 1, R8688 += 1 };
  s1 -> s1 [0, 65535] { R8688 += 1, R8626 += 1, R95 += 1, R96 += 1 };
  s1 -> s4 [0, 65535] { R8688 += 1 };
  s1 -> s6 [0, 65535] { R8688 += 1, R8626 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R8688 += 1, R8626 += 1, R95 += 1, R96 += 1 };
  s2 -> s2 [0, 65535] { R8688 += 1, R8625 += 1, R8626 += 1 };
  s2 -> s3 [0, 65535] { R8688 += 1, R8626 += 1, R94 += 1, R95 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s1 [0, 65535] { R8688 += 1, R8626 += 1, R95 += 1, R96 += 1 };
  s3 -> s3 [0, 65535] { R8688 += 1, R8626 += 1, R94 += 1, R95 += 1 };
  s3 -> s4 [0, 65535] { R8688 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8688 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R8688 += 1 };
  s6 -> s6 [0, 65535] { R8688 += 1, R8626 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 74] { R8690 += 1, R8628 += 1, R6809 += 1 };
  s0 -> s2 [0, 65535] { R8690 += 1, R8628 += 1, R6809 += 1, R6810 += 1 };
  s0 -> s0 [0, 65535] { R8689 += 1, R8690 += 1 };
  s0 -> s3 [0, 65535] { R8690 += 1, R8628 += 1 };
  s0 -> s4 [0, 65535] { R8690 += 1, R8627 += 1, R8628 += 1 };
  s0 -> s1 [76, 65535] { R8690 += 1, R8628 += 1, R6809 += 1 };
  s1 -> s1 [0, 74] { R8690 += 1, R8628 += 1, R6809 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R8690 += 1 };
  s1 -> s1 [0, 65535] { R8690 += 1, R8628 += 1 };
  s1 -> s1 [76, 65535] { R8690 += 1, R8628 += 1, R6809 += 1 };
  s2 -> s1 [0, 74] { R8690 += 1, R8628 += 1, R6809 += 1 };
  s2 -> s2 [0, 65535] { R8690 += 1, R8628 += 1, R6809 += 1, R6810 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R8690 += 1, R8628 += 1 };
  s2 -> s6 [0, 65535] { R8690 += 1 };
  s2 -> s1 [76, 65535] { R8690 += 1, R8628 += 1, R6809 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R8690 += 1, R8628 += 1 };
  s3 -> s6 [0, 65535] { R8690 += 1 };
  s4 -> s1 [0, 74] { R8690 += 1, R8628 += 1, R6809 += 1 };
  s4 -> s2 [0, 65535] { R8690 += 1, R8628 += 1, R6809 += 1, R6810 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s3 [0, 65535] { R8690 += 1, R8628 += 1 };
  s4 -> s4 [0, 65535] { R8690 += 1, R8627 += 1, R8628 += 1 };
  s4 -> s1 [76, 65535] { R8690 += 1, R8628 += 1, R6809 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8690 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 74] { R8692 += 1, R8630 += 1, R8490 += 1, R8492 += 1 };
  s0 -> s2 [0, 65535] { R8692 += 1, R8630 += 1, R8490 += 1, R8491 += 1, R8492 += 1 };
  s0 -> s0 [0, 65535] { R8691 += 1, R8692 += 1 };
  s0 -> s3 [0, 65535] { R8692 += 1, R8629 += 1, R8630 += 1 };
  s0 -> s4 [0, 65535] { R8692 += 1, R8630 += 1, R8489 += 1, R8490 += 1 };
  s0 -> s5 [75, 75] { R8692 += 1, R8630 += 1, R8490 += 1, R8492 += 1 };
  s0 -> s1 [76, 65535] { R8692 += 1, R8630 += 1, R8490 += 1, R8492 += 1 };
  s1 -> s1 [0, 74] { R8692 += 1, R8630 += 1, R8490 += 1, R8492 += 1 };
  s1 -> s5 [75, 75] { R8692 += 1, R8630 += 1, R8490 += 1, R8492 += 1 };
  s1 -> s1 [76, 65535] { R8692 += 1, R8630 += 1, R8490 += 1, R8492 += 1 };
  s2 -> s1 [0, 74] { R8692 += 1, R8630 += 1, R8490 += 1, R8492 += 1 };
  s2 -> s2 [0, 65535] { R8692 += 1, R8630 += 1, R8490 += 1, R8491 += 1, R8492 += 1 };
  s2 -> s5 [75, 75] { R8692 += 1, R8630 += 1, R8490 += 1, R8492 += 1 };
  s2 -> s1 [76, 65535] { R8692 += 1, R8630 += 1, R8490 += 1, R8492 += 1 };
  s3 -> s1 [0, 74] { R8692 += 1, R8630 += 1, R8490 += 1, R8492 += 1 };
  s3 -> s2 [0, 65535] { R8692 += 1, R8630 += 1, R8490 += 1, R8491 += 1, R8492 += 1 };
  s3 -> s3 [0, 65535] { R8692 += 1, R8629 += 1, R8630 += 1 };
  s3 -> s4 [0, 65535] { R8692 += 1, R8630 += 1, R8489 += 1, R8490 += 1 };
  s3 -> s5 [75, 75] { R8692 += 1, R8630 += 1, R8490 += 1, R8492 += 1 };
  s3 -> s1 [76, 65535] { R8692 += 1, R8630 += 1, R8490 += 1, R8492 += 1 };
  s4 -> s1 [0, 74] { R8692 += 1, R8630 += 1, R8490 += 1, R8492 += 1 };
  s4 -> s2 [0, 65535] { R8692 += 1, R8630 += 1, R8490 += 1, R8491 += 1, R8492 += 1 };
  s4 -> s4 [0, 65535] { R8692 += 1, R8630 += 1, R8489 += 1, R8490 += 1 };
  s4 -> s5 [75, 75] { R8692 += 1, R8630 += 1, R8490 += 1, R8492 += 1 };
  s4 -> s1 [76, 65535] { R8692 += 1, R8630 += 1, R8490 += 1, R8492 += 1 };
  s5 -> s6 [0, 65535] { R8692 += 1, R8630 += 1, R8490 += 1 };
  s5 -> s5 [0, 65535] { R8692 += 1, R8630 += 1, R8490 += 1, R8492 += 1 };
  s5 -> s7 [0, 65535] { R8692 += 1, R8630 += 1 };
  s5 -> s8 [0, 65535] { R8692 += 1 };
  s5 -> s9 [0, 65535];
  s6 -> s6 [0, 65535] { R8692 += 1, R8630 += 1, R8490 += 1 };
  s6 -> s7 [0, 65535] { R8692 += 1, R8630 += 1 };
  s6 -> s8 [0, 65535] { R8692 += 1 };
  s6 -> s9 [0, 65535];
  s7 -> s7 [0, 65535] { R8692 += 1, R8630 += 1 };
  s7 -> s8 [0, 65535] { R8692 += 1 };
  s7 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R8692 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s8, s5, s9, s6, s7;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 65535] { R8694 += 1, R8631 += 1, R8632 += 1 };
  s0 -> s2 [0, 65535] { R8694 += 1, R8632 += 1 };
  s0 -> s0 [0, 65535] { R8693 += 1, R8694 += 1 };
  s1 -> s1 [0, 65535] { R8694 += 1, R8631 += 1, R8632 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R8694 += 1, R8632 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R8694 += 1, R8632 += 1 };
  s2 -> s4 [0, 65535] { R8694 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8694 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s0 [0, 65535] { R8695 += 1, R8696 += 1 };
  s0 -> s1 [0, 65535] { R8696 += 1, R8651 += 1, R8652 += 1 };
  s0 -> s2 [0, 65535] { R8696 += 1, R8652 += 1, R21 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R8696 += 1, R8651 += 1, R8652 += 1 };
  s1 -> s2 [0, 65535] { R8696 += 1, R8652 += 1, R21 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R8696 += 1 };
  s2 -> s2 [0, 65535] { R8696 += 1, R8652 += 1, R21 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8696 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 69] { R8698 += 1, R8654 += 1 };
  s0 -> s0 [0, 65535] { R8697 += 1, R8698 += 1 };
  s0 -> s2 [0, 65535] { R8698 += 1, R8653 += 1, R8654 += 1 };
  s0 -> s3 [70, 70] { R8698 += 1, R8654 += 1 };
  s0 -> s4 [70, 70] { R8698 += 1, R8654 += 1 };
  s0 -> s5 [75, 75] { R8698 += 1, R8654 += 1 };
  s0 -> s1 [76, 65535] { R8698 += 1, R8654 += 1 };
  s1 -> s1 [0, 69] { R8698 += 1, R8654 += 1 };
  s1 -> s3 [70, 70] { R8698 += 1, R8654 += 1 };
  s1 -> s4 [70, 70] { R8698 += 1, R8654 += 1 };
  s1 -> s5 [75, 75] { R8698 += 1, R8654 += 1 };
  s1 -> s1 [76, 65535] { R8698 += 1, R8654 += 1 };
  s2 -> s1 [0, 69] { R8698 += 1, R8654 += 1 };
  s2 -> s2 [0, 65535] { R8698 += 1, R8653 += 1, R8654 += 1 };
  s2 -> s3 [70, 70] { R8698 += 1, R8654 += 1 };
  s2 -> s4 [70, 70] { R8698 += 1, R8654 += 1 };
  s2 -> s5 [75, 75] { R8698 += 1, R8654 += 1 };
  s2 -> s1 [76, 65535] { R8698 += 1, R8654 += 1 };
  s3 -> s3 [0, 70] { R8698 += 1, R8654 += 1 };
  s3 -> s7 [75, 75] { R8698 += 1, R8654 += 1 };
  s3 -> s3 [76, 65535] { R8698 += 1, R8654 += 1 };
  s5 -> s5 [0, 69] { R8698 += 1, R8654 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R8698 += 1 };
  s5 -> s7 [70, 70] { R8698 += 1, R8654 += 1 };
  s5 -> s8 [70, 70] { R8698 += 1, R8654 += 1 };
  s5 -> s5 [75, 65535] { R8698 += 1, R8654 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 70] { R8698 += 1, R8654 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R8698 += 1 };
  s7 -> s7 [75, 65535] { R8698 += 1, R8654 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R8698 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 69] { R8700 += 1, R8656 += 1, R83 += 1 };
  s0 -> s0 [0, 65535] { R8699 += 1, R8700 += 1 };
  s0 -> s2 [0, 65535] { R8700 += 1, R8655 += 1, R8656 += 1 };
  s0 -> s3 [70, 70] { R8700 += 1, R8656 += 1, R83 += 1 };
  s0 -> s4 [70, 70] { R8700 += 1, R8656 += 1, R83 += 1 };
  s0 -> s1 [71, 65535] { R8700 += 1, R8656 += 1, R83 += 1 };
  s1 -> s1 [0, 69] { R8700 += 1, R8656 += 1, R83 += 1 };
  s1 -> s1 [0, 65535] { R8700 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [70, 70] { R8700 += 1, R8656 += 1, R83 += 1 };
  s1 -> s4 [70, 70] { R8700 += 1, R8656 += 1, R83 += 1 };
  s1 -> s1 [71, 65535] { R8700 += 1, R8656 += 1, R83 += 1 };
  s2 -> s1 [0, 69] { R8700 += 1, R8656 += 1, R83 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R8700 += 1, R8655 += 1, R8656 += 1 };
  s2 -> s3 [70, 70] { R8700 += 1, R8656 += 1, R83 += 1 };
  s2 -> s4 [70, 70] { R8700 += 1, R8656 += 1, R83 += 1 };
  s2 -> s1 [71, 65535] { R8700 += 1, R8656 += 1, R83 += 1 };
  s3 -> s3 [0, 65535] { R8700 += 1, R8656 += 1, R83 += 1 };
  s3 -> s6 [0, 65535] { R8700 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8700 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8700 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 69] { R8702 += 1, R8658 += 1, R85 += 1 };
  s0 -> s2 [0, 65535] { R8702 += 1, R8657 += 1, R8658 += 1 };
  s0 -> s0 [0, 65535] { R8701 += 1, R8702 += 1 };
  s0 -> s3 [70, 70] { R8702 += 1, R8658 += 1, R85 += 1 };
  s0 -> s4 [70, 70] { R8702 += 1, R8658 += 1, R85 += 1 };
  s0 -> s1 [71, 65535] { R8702 += 1, R8658 += 1, R85 += 1 };
  s1 -> s1 [0, 69] { R8702 += 1, R8658 += 1, R85 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R8702 += 1 };
  s1 -> s3 [70, 70] { R8702 += 1, R8658 += 1, R85 += 1 };
  s1 -> s4 [70, 70] { R8702 += 1, R8658 += 1, R85 += 1 };
  s1 -> s1 [71, 65535] { R8702 += 1, R8658 += 1, R85 += 1 };
  s2 -> s1 [0, 69] { R8702 += 1, R8658 += 1, R85 += 1 };
  s2 -> s2 [0, 65535] { R8702 += 1, R8657 += 1, R8658 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [70, 70] { R8702 += 1, R8658 += 1, R85 += 1 };
  s2 -> s4 [70, 70] { R8702 += 1, R8658 += 1, R85 += 1 };
  s2 -> s1 [71, 65535] { R8702 += 1, R8658 += 1, R85 += 1 };
  s3 -> s3 [0, 65535] { R8702 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8702 += 1, R8658 += 1, R85 += 1 };
  s4 -> s6 [0, 65535] { R8702 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8702 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 69] { R8704 += 1, R8660 += 1, R88 += 1 };
  s0 -> s2 [0, 69] { R8704 += 1, R8660 += 1, R87 += 1, R88 += 1 };
  s0 -> s0 [0, 65535] { R8703 += 1, R8704 += 1 };
  s0 -> s3 [0, 65535] { R8704 += 1, R8659 += 1, R8660 += 1 };
  s0 -> s4 [70, 70] { R8704 += 1, R8660 += 1, R88 += 1 };
  s0 -> s5 [70, 70] { R8704 += 1, R8660 += 1, R87 += 1, R88 += 1 };
  s0 -> s6 [70, 70] { R8704 += 1, R8660 += 1, R88 += 1 };
  s0 -> s7 [70, 70] { R8704 += 1, R8660 += 1, R87 += 1, R88 += 1 };
  s0 -> s1 [71, 74] { R8704 += 1, R8660 += 1, R88 += 1 };
  s0 -> s2 [71, 65535] { R8704 += 1, R8660 += 1, R87 += 1, R88 += 1 };
  s0 -> s8 [75, 75] { R8704 += 1, R8660 += 1, R88 += 1 };
  s0 -> s1 [76, 65535] { R8704 += 1, R8660 += 1, R88 += 1 };
  s1 -> s1 [0, 69] { R8704 += 1, R8660 += 1, R88 += 1 };
  s1 -> s4 [70, 70] { R8704 += 1, R8660 += 1, R88 += 1 };
  s1 -> s6 [70, 70] { R8704 += 1, R8660 += 1, R88 += 1 };
  s1 -> s1 [71, 74] { R8704 += 1, R8660 += 1, R88 += 1 };
  s1 -> s8 [75, 75] { R8704 += 1, R8660 += 1, R88 += 1 };
  s1 -> s1 [76, 65535] { R8704 += 1, R8660 += 1, R88 += 1 };
  s2 -> s1 [0, 69] { R8704 += 1, R8660 += 1, R88 += 1 };
  s2 -> s2 [0, 69] { R8704 += 1, R8660 += 1, R87 += 1, R88 += 1 };
  s2 -> s4 [70, 70] { R8704 += 1, R8660 += 1, R88 += 1 };
  s2 -> s5 [70, 70] { R8704 += 1, R8660 += 1, R87 += 1, R88 += 1 };
  s2 -> s6 [70, 70] { R8704 += 1, R8660 += 1, R88 += 1 };
  s2 -> s7 [70, 70] { R8704 += 1, R8660 += 1, R87 += 1, R88 += 1 };
  s2 -> s1 [71, 74] { R8704 += 1, R8660 += 1, R88 += 1 };
  s2 -> s2 [71, 65535] { R8704 += 1, R8660 += 1, R87 += 1, R88 += 1 };
  s2 -> s8 [75, 75] { R8704 += 1, R8660 += 1, R88 += 1 };
  s2 -> s1 [76, 65535] { R8704 += 1, R8660 += 1, R88 += 1 };
  s3 -> s1 [0, 69] { R8704 += 1, R8660 += 1, R88 += 1 };
  s3 -> s2 [0, 69] { R8704 += 1, R8660 += 1, R87 += 1, R88 += 1 };
  s3 -> s3 [0, 65535] { R8704 += 1, R8659 += 1, R8660 += 1 };
  s3 -> s4 [70, 70] { R8704 += 1, R8660 += 1, R88 += 1 };
  s3 -> s5 [70, 70] { R8704 += 1, R8660 += 1, R87 += 1, R88 += 1 };
  s3 -> s6 [70, 70] { R8704 += 1, R8660 += 1, R88 += 1 };
  s3 -> s7 [70, 70] { R8704 += 1, R8660 += 1, R87 += 1, R88 += 1 };
  s3 -> s1 [71, 74] { R8704 += 1, R8660 += 1, R88 += 1 };
  s3 -> s2 [71, 65535] { R8704 += 1, R8660 += 1, R87 += 1, R88 += 1 };
  s3 -> s8 [75, 75] { R8704 += 1, R8660 += 1, R88 += 1 };
  s3 -> s1 [76, 65535] { R8704 += 1, R8660 += 1, R88 += 1 };
  s4 -> s4 [0, 74] { R8704 += 1, R8660 += 1, R88 += 1 };
  s4 -> s11 [75, 75] { R8704 += 1, R8660 += 1, R88 += 1 };
  s4 -> s4 [76, 65535] { R8704 += 1, R8660 += 1, R88 += 1 };
  s7 -> s4 [0, 74] { R8704 += 1, R8660 += 1, R88 += 1 };
  s7 -> s7 [0, 65535] { R8704 += 1, R8660 += 1, R87 += 1, R88 += 1 };
  s7 -> s11 [75, 75] { R8704 += 1, R8660 += 1, R88 += 1 };
  s7 -> s4 [76, 65535] { R8704 += 1, R8660 += 1, R88 += 1 };
  s8 -> s8 [0, 69] { R8704 += 1, R8660 += 1, R88 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R8704 += 1 };
  s8 -> s10 [70, 70] { R8704 += 1, R8660 += 1, R88 += 1 };
  s8 -> s11 [70, 70] { R8704 += 1, R8660 += 1, R88 += 1 };
  s8 -> s8 [71, 65535] { R8704 += 1, R8660 += 1, R88 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R8704 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s12 [0, 65535] { R8704 += 1 };
  s11 -> s11 [0, 65535] { R8704 += 1, R8660 += 1, R88 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R8704 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 69] { R8706 += 1, R8662 += 1, R91 += 1, R92 += 1 };
  s0 -> s0 [0, 65535] { R8705 += 1, R8706 += 1 };
  s0 -> s2 [0, 65535] { R8706 += 1, R8661 += 1, R8662 += 1 };
  s0 -> s3 [70, 70] { R8706 += 1, R8662 += 1, R91 += 1, R92 += 1 };
  s0 -> s4 [70, 70] { R8706 += 1, R8662 += 1, R91 += 1, R92 += 1 };
  s0 -> s1 [71, 65535] { R8706 += 1, R8662 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 69] { R8706 += 1, R8662 += 1, R91 += 1, R92 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R8706 += 1 };
  s1 -> s3 [70, 70] { R8706 += 1, R8662 += 1, R91 += 1, R92 += 1 };
  s1 -> s4 [70, 70] { R8706 += 1, R8662 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [71, 65535] { R8706 += 1, R8662 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [0, 69] { R8706 += 1, R8662 += 1, R91 += 1, R92 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R8706 += 1, R8661 += 1, R8662 += 1 };
  s2 -> s3 [70, 70] { R8706 += 1, R8662 += 1, R91 += 1, R92 += 1 };
  s2 -> s4 [70, 70] { R8706 += 1, R8662 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [71, 65535] { R8706 += 1, R8662 += 1, R91 += 1, R92 += 1 };
  s3 -> s6 [0, 65535] { R8706 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R8706 += 1, R8662 += 1, R91 += 1, R92 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8706 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8706 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 69] { R8708 += 1, R8664 += 1, R6805 += 1, R6806 += 1 };
  s0 -> s2 [0, 69] { R8708 += 1, R8664 += 1, R6806 += 1, R6807 += 1 };
  s0 -> s0 [0, 65535] { R8707 += 1, R8708 += 1 };
  s0 -> s3 [0, 65535] { R8708 += 1, R8663 += 1, R8664 += 1 };
  s0 -> s4 [70, 70] { R8708 += 1, R8664 += 1, R6805 += 1, R6806 += 1 };
  s0 -> s5 [70, 70] { R8708 += 1, R8664 += 1, R6806 += 1, R6807 += 1 };
  s0 -> s6 [70, 70] { R8708 += 1, R8664 += 1, R6805 += 1, R6806 += 1 };
  s0 -> s7 [70, 70] { R8708 += 1, R8664 += 1, R6806 += 1, R6807 += 1 };
  s0 -> s1 [71, 65535] { R8708 += 1, R8664 += 1, R6805 += 1, R6806 += 1 };
  s0 -> s2 [71, 65535] { R8708 += 1, R8664 += 1, R6806 += 1, R6807 += 1 };
  s1 -> s1 [0, 69] { R8708 += 1, R8664 += 1, R6805 += 1, R6806 += 1 };
  s1 -> s2 [0, 69] { R8708 += 1, R8664 += 1, R6806 += 1, R6807 += 1 };
  s1 -> s4 [70, 70] { R8708 += 1, R8664 += 1, R6805 += 1, R6806 += 1 };
  s1 -> s5 [70, 70] { R8708 += 1, R8664 += 1, R6806 += 1, R6807 += 1 };
  s1 -> s6 [70, 70] { R8708 += 1, R8664 += 1, R6805 += 1, R6806 += 1 };
  s1 -> s7 [70, 70] { R8708 += 1, R8664 += 1, R6806 += 1, R6807 += 1 };
  s1 -> s1 [71, 65535] { R8708 += 1, R8664 += 1, R6805 += 1, R6806 += 1 };
  s1 -> s2 [71, 65535] { R8708 += 1, R8664 += 1, R6806 += 1, R6807 += 1 };
  s2 -> s2 [0, 69] { R8708 += 1, R8664 += 1, R6806 += 1, R6807 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R8708 += 1 };
  s2 -> s5 [70, 70] { R8708 += 1, R8664 += 1, R6806 += 1, R6807 += 1 };
  s2 -> s7 [70, 70] { R8708 += 1, R8664 += 1, R6806 += 1, R6807 += 1 };
  s2 -> s2 [71, 65535] { R8708 += 1, R8664 += 1, R6806 += 1, R6807 += 1 };
  s3 -> s1 [0, 69] { R8708 += 1, R8664 += 1, R6805 += 1, R6806 += 1 };
  s3 -> s2 [0, 69] { R8708 += 1, R8664 += 1, R6806 += 1, R6807 += 1 };
  s3 -> s3 [0, 65535] { R8708 += 1, R8663 += 1, R8664 += 1 };
  s3 -> s4 [70, 70] { R8708 += 1, R8664 += 1, R6805 += 1, R6806 += 1 };
  s3 -> s5 [70, 70] { R8708 += 1, R8664 += 1, R6806 += 1, R6807 += 1 };
  s3 -> s6 [70, 70] { R8708 += 1, R8664 += 1, R6805 += 1, R6806 += 1 };
  s3 -> s7 [70, 70] { R8708 += 1, R8664 += 1, R6806 += 1, R6807 += 1 };
  s3 -> s1 [71, 65535] { R8708 += 1, R8664 += 1, R6805 += 1, R6806 += 1 };
  s3 -> s2 [71, 65535] { R8708 += 1, R8664 += 1, R6806 += 1, R6807 += 1 };
  s4 -> s4 [0, 65535] { R8708 += 1, R8664 += 1, R6805 += 1, R6806 += 1 };
  s4 -> s5 [0, 65535] { R8708 += 1, R8664 += 1, R6806 += 1, R6807 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s9 [0, 65535] { R8708 += 1 };
  s5 -> s5 [0, 65535] { R8708 += 1, R8664 += 1, R6806 += 1, R6807 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R8708 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R8708 += 1 };
  accepting s8, s5, s2, s9, s7;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 69] { R8710 += 1, R8666 += 1, R8485 += 1, R8486 += 1 };
  s0 -> s0 [0, 65535] { R8709 += 1, R8710 += 1 };
  s0 -> s2 [0, 65535] { R8710 += 1, R8665 += 1, R8666 += 1 };
  s0 -> s3 [70, 70] { R8710 += 1, R8666 += 1, R8485 += 1, R8486 += 1 };
  s0 -> s4 [70, 70] { R8710 += 1, R8666 += 1, R8485 += 1, R8486 += 1 };
  s0 -> s1 [71, 65535] { R8710 += 1, R8666 += 1, R8485 += 1, R8486 += 1 };
  s1 -> s1 [0, 69] { R8710 += 1, R8666 += 1, R8485 += 1, R8486 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R8710 += 1 };
  s1 -> s3 [70, 70] { R8710 += 1, R8666 += 1, R8485 += 1, R8486 += 1 };
  s1 -> s4 [70, 70] { R8710 += 1, R8666 += 1, R8485 += 1, R8486 += 1 };
  s1 -> s1 [71, 65535] { R8710 += 1, R8666 += 1, R8485 += 1, R8486 += 1 };
  s2 -> s1 [0, 69] { R8710 += 1, R8666 += 1, R8485 += 1, R8486 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R8710 += 1, R8665 += 1, R8666 += 1 };
  s2 -> s3 [70, 70] { R8710 += 1, R8666 += 1, R8485 += 1, R8486 += 1 };
  s2 -> s4 [70, 70] { R8710 += 1, R8666 += 1, R8485 += 1, R8486 += 1 };
  s2 -> s1 [71, 65535] { R8710 += 1, R8666 += 1, R8485 += 1, R8486 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R8710 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R8710 += 1 };
  s4 -> s4 [0, 65535] { R8710 += 1, R8666 += 1, R8485 += 1, R8486 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8710 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 69] { R8712 += 1, R8668 += 1, R8604 += 1, R8605 += 1, R8606 += 1 };
  s0 -> s2 [0, 69] { R8712 += 1, R8668 += 1, R8603 += 1, R8604 += 1 };
  s0 -> s3 [0, 69] { R8712 += 1, R8668 += 1, R8604 += 1, R8606 += 1, R8607 += 1 };
  s0 -> s0 [0, 65535] { R8711 += 1, R8712 += 1 };
  s0 -> s4 [0, 65535] { R8712 += 1, R8667 += 1, R8668 += 1 };
  s0 -> s5 [70, 70] { R8712 += 1, R8668 += 1, R8603 += 1, R8604 += 1 };
  s0 -> s6 [70, 70] { R8712 += 1, R8668 += 1, R8603 += 1, R8604 += 1 };
  s0 -> s7 [70, 70] { R8712 += 1, R8668 += 1, R8604 += 1, R8606 += 1, R8607 += 1 };
  s0 -> s8 [70, 70] { R8712 += 1, R8668 += 1, R8604 += 1, R8605 += 1, R8606 += 1 };
  s0 -> s9 [70, 70] { R8712 += 1, R8668 += 1, R8604 += 1, R8606 += 1, R8607 += 1 };
  s0 -> s10 [70, 70] { R8712 += 1, R8668 += 1, R8604 += 1, R8605 += 1, R8606 += 1 };
  s0 -> s1 [71, 65535] { R8712 += 1, R8668 += 1, R8604 += 1, R8605 += 1, R8606 += 1 };
  s0 -> s2 [71, 65535] { R8712 += 1, R8668 += 1, R8603 += 1, R8604 += 1 };
  s0 -> s3 [71, 65535] { R8712 += 1, R8668 += 1, R8604 += 1, R8606 += 1, R8607 += 1 };
  s1 -> s15 [0, 69] { R8712 += 1, R8668 += 1 };
  s1 -> s1 [0, 69] { R8712 += 1, R8668 += 1, R8604 += 1, R8605 += 1, R8606 += 1 };
  s1 -> s3 [0, 69] { R8712 += 1, R8668 += 1, R8604 += 1, R8606 += 1, R8607 += 1 };
  s1 -> s7 [70, 70] { R8712 += 1, R8668 += 1, R8604 += 1, R8606 += 1, R8607 += 1 };
  s1 -> s8 [70, 70] { R8712 += 1, R8668 += 1, R8604 += 1, R8605 += 1, R8606 += 1 };
  s1 -> s9 [70, 70] { R8712 += 1, R8668 += 1, R8604 += 1, R8606 += 1, R8607 += 1 };
  s1 -> s10 [70, 70] { R8712 += 1, R8668 += 1, R8604 += 1, R8605 += 1, R8606 += 1 };
  s1 -> s18 [70, 70] { R8712 += 1, R8668 += 1 };
  s1 -> s12 [70, 70] { R8712 += 1, R8668 += 1 };
  s1 -> s15 [71, 65535] { R8712 += 1, R8668 += 1 };
  s1 -> s1 [71, 65535] { R8712 += 1, R8668 += 1, R8604 += 1, R8605 += 1, R8606 += 1 };
  s1 -> s3 [71, 65535] { R8712 += 1, R8668 += 1, R8604 += 1, R8606 += 1, R8607 += 1 };
  s2 -> s1 [0, 69] { R8712 += 1, R8668 += 1, R8604 += 1, R8605 += 1, R8606 += 1 };
  s2 -> s2 [0, 69] { R8712 += 1, R8668 += 1, R8603 += 1, R8604 += 1 };
  s2 -> s3 [0, 69] { R8712 += 1, R8668 += 1, R8604 += 1, R8606 += 1, R8607 += 1 };
  s2 -> s5 [70, 70] { R8712 += 1, R8668 += 1, R8603 += 1, R8604 += 1 };
  s2 -> s6 [70, 70] { R8712 += 1, R8668 += 1, R8603 += 1, R8604 += 1 };
  s2 -> s7 [70, 70] { R8712 += 1, R8668 += 1, R8604 += 1, R8606 += 1, R8607 += 1 };
  s2 -> s8 [70, 70] { R8712 += 1, R8668 += 1, R8604 += 1, R8605 += 1, R8606 += 1 };
  s2 -> s9 [70, 70] { R8712 += 1, R8668 += 1, R8604 += 1, R8606 += 1, R8607 += 1 };
  s2 -> s10 [70, 70] { R8712 += 1, R8668 += 1, R8604 += 1, R8605 += 1, R8606 += 1 };
  s2 -> s1 [71, 65535] { R8712 += 1, R8668 += 1, R8604 += 1, R8605 += 1, R8606 += 1 };
  s2 -> s2 [71, 65535] { R8712 += 1, R8668 += 1, R8603 += 1, R8604 += 1 };
  s2 -> s3 [71, 65535] { R8712 += 1, R8668 += 1, R8604 += 1, R8606 += 1, R8607 += 1 };
  s3 -> s15 [0, 69] { R8712 += 1, R8668 += 1 };
  s3 -> s16 [0, 69] { R8712 += 1, R8668 += 1, R8604 += 1 };
  s3 -> s3 [0, 69] { R8712 += 1, R8668 += 1, R8604 += 1, R8606 += 1, R8607 += 1 };
  s3 -> s7 [70, 70] { R8712 += 1, R8668 += 1, R8604 += 1, R8606 += 1, R8607 += 1 };
  s3 -> s17 [70, 70] { R8712 += 1, R8668 += 1, R8604 += 1 };
  s3 -> s11 [70, 70] { R8712 += 1, R8668 += 1, R8604 += 1 };
  s3 -> s9 [70, 70] { R8712 += 1, R8668 += 1, R8604 += 1, R8606 += 1, R8607 += 1 };
  s3 -> s18 [70, 70] { R8712 += 1, R8668 += 1 };
  s3 -> s12 [70, 70] { R8712 += 1, R8668 += 1 };
  s3 -> s15 [71, 65535] { R8712 += 1, R8668 += 1 };
  s3 -> s16 [71, 65535] { R8712 += 1, R8668 += 1, R8604 += 1 };
  s3 -> s3 [71, 65535] { R8712 += 1, R8668 += 1, R8604 += 1, R8606 += 1, R8607 += 1 };
  s4 -> s1 [0, 69] { R8712 += 1, R8668 += 1, R8604 += 1, R8605 += 1, R8606 += 1 };
  s4 -> s2 [0, 69] { R8712 += 1, R8668 += 1, R8603 += 1, R8604 += 1 };
  s4 -> s3 [0, 69] { R8712 += 1, R8668 += 1, R8604 += 1, R8606 += 1, R8607 += 1 };
  s4 -> s4 [0, 65535] { R8712 += 1, R8667 += 1, R8668 += 1 };
  s4 -> s5 [70, 70] { R8712 += 1, R8668 += 1, R8603 += 1, R8604 += 1 };
  s4 -> s6 [70, 70] { R8712 += 1, R8668 += 1, R8603 += 1, R8604 += 1 };
  s4 -> s7 [70, 70] { R8712 += 1, R8668 += 1, R8604 += 1, R8606 += 1, R8607 += 1 };
  s4 -> s8 [70, 70] { R8712 += 1, R8668 += 1, R8604 += 1, R8605 += 1, R8606 += 1 };
  s4 -> s9 [70, 70] { R8712 += 1, R8668 += 1, R8604 += 1, R8606 += 1, R8607 += 1 };
  s4 -> s10 [70, 70] { R8712 += 1, R8668 += 1, R8604 += 1, R8605 += 1, R8606 += 1 };
  s4 -> s1 [71, 65535] { R8712 += 1, R8668 += 1, R8604 += 1, R8605 += 1, R8606 += 1 };
  s4 -> s2 [71, 65535] { R8712 += 1, R8668 += 1, R8603 += 1, R8604 += 1 };
  s4 -> s3 [71, 65535] { R8712 += 1, R8668 += 1, R8604 += 1, R8606 += 1, R8607 += 1 };
  s6 -> s6 [0, 65535] { R8712 += 1, R8668 += 1, R8603 += 1, R8604 += 1 };
  s6 -> s8 [0, 65535] { R8712 += 1, R8668 += 1, R8604 += 1, R8605 += 1, R8606 += 1 };
  s6 -> s9 [0, 65535] { R8712 += 1, R8668 += 1, R8604 += 1, R8606 += 1, R8607 += 1 };
  s8 -> s8 [0, 65535] { R8712 += 1, R8668 += 1, R8604 += 1, R8605 += 1, R8606 += 1 };
  s8 -> s9 [0, 65535] { R8712 += 1, R8668 += 1, R8604 += 1, R8606 += 1, R8607 += 1 };
  s8 -> s12 [0, 65535] { R8712 += 1, R8668 += 1 };
  s9 -> s11 [0, 65535] { R8712 += 1, R8668 += 1, R8604 += 1 };
  s9 -> s9 [0, 65535] { R8712 += 1, R8668 += 1, R8604 += 1, R8606 += 1, R8607 += 1 };
  s9 -> s12 [0, 65535] { R8712 += 1, R8668 += 1 };
  s11 -> s11 [0, 65535] { R8712 += 1, R8668 += 1, R8604 += 1 };
  s11 -> s12 [0, 65535] { R8712 += 1, R8668 += 1 };
  s12 -> s13 [0, 65535] { R8712 += 1 };
  s12 -> s14 [0, 65535];
  s12 -> s12 [0, 65535] { R8712 += 1, R8668 += 1 };
  s13 -> s13 [0, 65535] { R8712 += 1 };
  s13 -> s14 [0, 65535];
  s14 -> s14 [0, 65535];
  s15 -> s15 [0, 69] { R8712 += 1, R8668 += 1 };
  s15 -> s15 [0, 65535] { R8712 += 1 };
  s15 -> s14 [0, 65535];
  s15 -> s18 [70, 70] { R8712 += 1, R8668 += 1 };
  s15 -> s12 [70, 70] { R8712 += 1, R8668 += 1 };
  s15 -> s15 [71, 65535] { R8712 += 1, R8668 += 1 };
  s16 -> s15 [0, 69] { R8712 += 1, R8668 += 1 };
  s16 -> s16 [0, 69] { R8712 += 1, R8668 += 1, R8604 += 1 };
  s16 -> s17 [70, 70] { R8712 += 1, R8668 += 1, R8604 += 1 };
  s16 -> s11 [70, 70] { R8712 += 1, R8668 += 1, R8604 += 1 };
  s16 -> s18 [70, 70] { R8712 += 1, R8668 += 1 };
  s16 -> s12 [70, 70] { R8712 += 1, R8668 += 1 };
  s16 -> s15 [71, 65535] { R8712 += 1, R8668 += 1 };
  s16 -> s16 [71, 65535] { R8712 += 1, R8668 += 1, R8604 += 1 };
  s18 -> s14 [0, 65535];
  s18 -> s18 [0, 65535] { R8712 += 1 };
  accepting s12, s13, s14, s18, s15;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [102, 102];
  accepting s1;
};
};
constraint R2 = R8630 && R3 = R8712 && R23 - R8712 = -1 && R24 = R8712 && R25 - R8712 = -1 && R26 = R8712 && R27 = 0 && R28 = 1 && R29 = 0 && R30 = 1 && R45 + R84 + R83 + -1*R8490 + -1*R8486 - R66 = 0 && R49 + R89 + R87 = 0 && R50 + R90 + R88 + -1*R8490 + -1*R8486 - R66 = 0 && R55 + R96 + R93 + -1*R8492 + -1*R8488 - R68 = 0 && R65 + R8489 + R8485 = 0 && R67 + R8491 + R8487 = 0 && R8629 = 0 && R8653 = 0 && R8654 = 0 && R8659 = 0 && R8660 = 0 && R8663 = 0 && R8664 = 0 && R8667 = 0 && R8668 = 0 && R8669 = 0 && R8670 = R8712 && R8671 = 0 && R8672 = R8712 && R8673 = 0 && R8674 = R8712 && R8675 = 0 && R8676 = R8712 && R8677 = 0 && R8678 = R8712 && R8679 = 0 && R8680 = R8712 && R8681 = 0 && R8682 = R8712 && R8683 = 0 && R8684 = R8712 && R8685 = 0 && R8686 = R8712 && R8687 = 0 && R8688 = R8712 && R8689 = 0 && R8690 = R8712 && R8691 = 0 && R8692 = R8712 && R8693 = 0 && R8694 = R8712 && R8695 = 0 && R8696 = R8712 && R8697 = 0 && R8698 = R8712 && R8699 = 0 && R8700 = R8712 && R8701 = 0 && R8702 = R8712 && R8703 = 0 && R8704 = R8712 && R8705 = 0 && R8706 = R8712 && R8707 = 0 && R8708 = R8712 && R8709 = 0 && R8710 = R8712 && R8711 = 0 && R12 < 1 && R15 < 1 && R16 < 1 && R47 + R86 + R85 < 1 && R61 + R6810 + R6807 < 1 && -1*R8490 + -1*R8486 - R66 < 1 && -1*R8492 + -1*R8488 - R68 < 1 && -1 < R8630 && 0 < R8712 && (R53 + R94 + R91 != 0 || R54 + R95 + R92 + -1*R8490 + -1*R8486 - R66 = 0 || R66 + R8490 + R8486 < 1) && (R59 + R6808 + R6805 != 0 || R60 + R6809 + R6806 + -1*R8490 + -1*R8486 - R66 = 0 || R66 + R8490 + R8486 < 1) && (R66 + R8490 + R8486 != 0 || ((R53 + R94 + R91 != 0 || R54 + R95 + R92 = 0 || R68 + R8492 + R8488 < 1) && (R53 + R94 + R91 = 0 || R68 + R8492 + R8488 < 1))) && (R66 + R8490 + R8486 != 0 || ((R59 + R6808 + R6805 != 0 || R60 + R6809 + R6806 = 0 || R68 + R8492 + R8488 < 1) && (R59 + R6808 + R6805 = 0 || R68 + R8492 + R8488 < 1))) && (R66 + R8490 + R8486 != 0 || ((R73 + R8608 + R8603 != 0 || R74 + R8609 + R8604 = 0 || R68 + R8492 + R8488 < 1) && (R73 + R8608 + R8603 = 0 || R68 + R8492 + R8488 < 1))) && (R68 + R8492 + R8488 != 0 || R77 + R8612 + R8607 = 0 || (R75 + R8610 + R8605 = 0 && R76 + R8611 + R8606 = 0)) && (R73 + R8608 + R8603 != 0 || R66 + R8490 + R8486 + -1*R8609 + -1*R8604 - R74 = 0 || R66 + R8490 + R8486 < 1) && (R75 + R8610 + R8605 != 0 || R68 + R8492 + R8488 + -1*R8611 + -1*R8606 - R76 = 0 || R68 + R8492 + R8488 < 1) && (R8613 != 0 || R8614 = R8630 || (R20 = 0 && R8630 = 0)) && (R8615 != 0 || R8616 = R8630 || (R20 = 0 && R8630 = 0)) && (R8617 != 0 || R8618 = R8630 || (R20 = 0 && R8630 = 0)) && (R8619 != 0 || R8620 = R8630 || (R20 = 0 && R8630 = 0)) && (R8621 != 0 || R8622 = R8630 || (R20 = 0 && R8630 = 0)) && (R8623 != 0 || R8624 = R8630 || (R20 = 0 && R8630 = 0)) && (R8625 != 0 || R8626 = R8630 || (R20 = 0 && R8630 = 0)) && (R8627 != 0 || R8628 = R8630 || (R20 = 0 && R8630 = 0)) && (R8631 != 0 || R8630 = R8632 || (R20 = 0 && R8630 = 0)) && (R21 = 0 || (R8651 = 0 && R8652 = 0)) && (R21 = 0 || (R8655 = 0 && R8656 = 0)) && (R21 = 0 || (R8657 = 0 && R8658 = 0)) && (R21 = 0 || (R8661 = 0 && R8662 = 0)) && (R21 = 0 || (R8665 = 0 && R8666 = 0)) && (R22 = 0 || (R8633 = 0 && R8634 = 0)) && (R22 = 0 || (R8635 = 0 && R8636 = 0)) && (R22 = 0 || (R8637 = 0 && R8638 = 0)) && (R22 = 0 || (R8639 = 0 && R8640 = 0)) && (R22 = 0 || (R8641 = 0 && R8642 = 0)) && (R22 = 0 || (R8643 = 0 && R8644 = 0)) && (R22 = 0 || (R8645 = 0 && R8646 = 0)) && (R22 = 0 || (R8647 = 0 && R8648 = 0)) && (R22 = 0 || (R8649 = 0 && R8650 = 0)) && (R53 + R94 + R91 = 0 || R66 + R8490 + R8486 < 1) && (R59 + R6808 + R6805 = 0 || R66 + R8490 + R8486 < 1) && (R73 + R8608 + R8603 = 0 || R66 + R8490 + R8486 < 1) && (R75 + R8610 + R8605 = 0 || R68 + R8492 + R8488 < 1) && (R8613 = 0 || (R20 = 0 && R8630 = 0)) && (R8615 = 0 || (R20 = 0 && R8630 = 0)) && (R8617 = 0 || (R20 = 0 && R8630 = 0)) && (R8619 = 0 || (R20 = 0 && R8630 = 0)) && (R8621 = 0 || (R20 = 0 && R8630 = 0)) && (R8623 = 0 || (R20 = 0 && R8630 = 0)) && (R8625 = 0 || (R20 = 0 && R8630 = 0)) && (R8627 = 0 || (R20 = 0 && R8630 = 0)) && (R8631 = 0 || (R20 = 0 && R8630 = 0));
// End of Parikh automata intersection problem
