// Parikh automata intersection problem, generated by OSTRICH+
counter int R10049, R10050, R10051, R10052, R10053, R10054, R10055, R10056, R10057, R10058, R10059, R10060, R10061, R10062, R10063, R10064, R10065, R10066, R10067, R10068, R10069, R10070, R10071, R10072, R10073, R10074, R10075, R10076, R10077, R10078, R10079, R10080, R10081, R10082, R10083, R10084, R10085, R10086, R10087, R10088, R10089, R10090, R10091, R10092, R10093, R10094, R10095, R10096, R10097, R10098, R10099, R10100, R10101, R10102, R10103, R10104, R10105, R10106, R10107, R10108, R10109, R10110, R10111, R10112, R10113, R10114, R10115, R10116, R10117, R10118, R10119, R10120, R10121, R10122, R10123, R10124, R10125, R10126, R10127, R10128, R10129, R10130, R10131, R10132, R10133, R10134, R10135, R10136, R10137, R10138, R10139, R10140, R10141, R10142, R10143, R10144, R10145, R10146, R10147, R10148, R10149, R10150, R10151, R10152, R10153, R10154, R10155, R10156, R10157, R10158, R12, R15, R16, R2, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R4, R45, R47, R49, R5, R50, R53, R54, R55, R59, R60, R61, R65, R66, R67, R68, R6805, R6806, R6807, R6808, R6809, R6810, R73, R74, R75, R76, R77, R83, R84, R85, R86, R87, R88, R89, R90, R91, R92, R93, R94, R95, R96, R9601, R9602, R9603, R9604, R9605, R9606, R9607, R9608;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [70, 70];
  s0 -> s0 [71, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [70, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R15 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 69];
  s0 -> s0 [0, 65535] { R16 += 1 };
  s0 -> s2 [70, 70];
  s0 -> s1 [71, 65535];
  s1 -> s1 [0, 69];
  s1 -> s2 [70, 70];
  s1 -> s1 [71, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R24 += 1 };
  s0 -> s0 [0, 65535] { R23 += 1, R24 += 1 };
  s0 -> s2 [9, 13] { R24 += 1 };
  s0 -> s1 [14, 31] { R24 += 1 };
  s0 -> s2 [32, 32] { R24 += 1 };
  s0 -> s1 [33, 65535] { R24 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R24 += 1 };
  s2 -> s1 [0, 65535] { R24 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R25 += 1, R26 += 1 };
  s1 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R28 += 1 };
  s0 -> s0 [0, 65535] { R27 += 1, R28 += 1 };
  s0 -> s2 [9, 13] { R28 += 1 };
  s0 -> s1 [14, 31] { R28 += 1 };
  s0 -> s2 [32, 32] { R28 += 1 };
  s0 -> s1 [33, 65535] { R28 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R28 += 1 };
  s2 -> s1 [0, 65535] { R28 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R29 += 1, R30 += 1 };
  s1 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R10079 += 1, R10080 += 1 };
  s0 -> s1 [0, 65535] { R10080 += 1, R22 += 1 };
  s1 -> s1 [0, 65535] { R10080 += 1, R22 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 69] { R10082 += 1 };
  s0 -> s0 [0, 65535] { R10081 += 1, R10082 += 1 };
  s0 -> s2 [70, 70] { R10082 += 1 };
  s0 -> s3 [70, 70] { R10082 += 1 };
  s0 -> s1 [76, 65535] { R10082 += 1 };
  s1 -> s1 [0, 69] { R10082 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R10082 += 1 };
  s1 -> s3 [70, 70] { R10082 += 1 };
  s1 -> s1 [76, 65535] { R10082 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 70] { R10082 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [76, 65535] { R10082 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 69] { R10084 += 1, R45 += 1 };
  s0 -> s0 [0, 65535] { R10083 += 1, R10084 += 1 };
  s0 -> s2 [70, 70] { R10084 += 1, R45 += 1 };
  s0 -> s3 [70, 70] { R10084 += 1, R45 += 1 };
  s0 -> s1 [71, 65535] { R10084 += 1, R45 += 1 };
  s1 -> s1 [0, 69] { R10084 += 1, R45 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R10084 += 1, R45 += 1 };
  s1 -> s3 [70, 70] { R10084 += 1, R45 += 1 };
  s1 -> s1 [71, 65535] { R10084 += 1, R45 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10084 += 1, R45 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 69] { R10086 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R10085 += 1, R10086 += 1 };
  s0 -> s2 [70, 70] { R10086 += 1, R47 += 1 };
  s0 -> s3 [70, 70] { R10086 += 1, R47 += 1 };
  s0 -> s1 [71, 65535] { R10086 += 1, R47 += 1 };
  s1 -> s1 [0, 69] { R10086 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R10086 += 1, R47 += 1 };
  s1 -> s3 [70, 70] { R10086 += 1, R47 += 1 };
  s1 -> s1 [71, 65535] { R10086 += 1, R47 += 1 };
  s2 -> s2 [0, 65535] { R10086 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 69] { R10088 += 1, R49 += 1, R50 += 1 };
  s0 -> s0 [0, 65535] { R10087 += 1, R10088 += 1 };
  s0 -> s2 [70, 70] { R10088 += 1, R49 += 1, R50 += 1 };
  s0 -> s3 [70, 70] { R10088 += 1, R49 += 1, R50 += 1 };
  s0 -> s1 [71, 65535] { R10088 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 69] { R10088 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R10088 += 1, R49 += 1, R50 += 1 };
  s1 -> s3 [70, 70] { R10088 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [71, 65535] { R10088 += 1, R49 += 1, R50 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10088 += 1, R49 += 1, R50 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 69] { R10090 += 1, R53 += 1, R54 += 1 };
  s0 -> s0 [0, 65535] { R10089 += 1, R10090 += 1 };
  s0 -> s2 [70, 70] { R10090 += 1, R53 += 1, R54 += 1 };
  s0 -> s3 [70, 70] { R10090 += 1, R53 += 1, R54 += 1 };
  s0 -> s1 [71, 65535] { R10090 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 69] { R10090 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R10090 += 1, R53 += 1, R54 += 1 };
  s1 -> s3 [70, 70] { R10090 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [71, 65535] { R10090 += 1, R53 += 1, R54 += 1 };
  s2 -> s2 [0, 65535] { R10090 += 1, R53 += 1, R54 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 69] { R10092 += 1, R59 += 1, R60 += 1 };
  s0 -> s0 [0, 65535] { R10091 += 1, R10092 += 1 };
  s0 -> s2 [70, 70] { R10092 += 1, R59 += 1, R60 += 1 };
  s0 -> s3 [70, 70] { R10092 += 1, R59 += 1, R60 += 1 };
  s0 -> s1 [71, 65535] { R10092 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 69] { R10092 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R10092 += 1, R59 += 1, R60 += 1 };
  s1 -> s3 [70, 70] { R10092 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [71, 65535] { R10092 += 1, R59 += 1, R60 += 1 };
  s2 -> s2 [0, 65535] { R10092 += 1, R59 += 1, R60 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 69] { R10094 += 1, R65 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R10093 += 1, R10094 += 1 };
  s0 -> s2 [70, 70] { R10094 += 1, R65 += 1, R66 += 1 };
  s0 -> s3 [70, 70] { R10094 += 1, R65 += 1, R66 += 1 };
  s0 -> s1 [71, 65535] { R10094 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 69] { R10094 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R10094 += 1, R65 += 1, R66 += 1 };
  s1 -> s3 [70, 70] { R10094 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [71, 65535] { R10094 += 1, R65 += 1, R66 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R10094 += 1, R65 += 1, R66 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 69] { R10096 += 1, R73 += 1, R74 += 1 };
  s0 -> s0 [0, 65535] { R10095 += 1, R10096 += 1 };
  s0 -> s2 [70, 70] { R10096 += 1, R73 += 1, R74 += 1 };
  s0 -> s3 [70, 70] { R10096 += 1, R73 += 1, R74 += 1 };
  s0 -> s1 [71, 65535] { R10096 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 69] { R10096 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R10096 += 1, R73 += 1, R74 += 1 };
  s1 -> s3 [70, 70] { R10096 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [71, 65535] { R10096 += 1, R73 += 1, R74 += 1 };
  s2 -> s2 [0, 65535] { R10096 += 1, R73 += 1, R74 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 69] { R10116 += 1 };
  s0 -> s0 [0, 65535] { R10115 += 1, R10116 += 1 };
  s0 -> s2 [70, 70] { R10116 += 1 };
  s0 -> s1 [71, 65535] { R10116 += 1 };
  s1 -> s1 [0, 69] { R10116 += 1 };
  s1 -> s2 [70, 70] { R10116 += 1 };
  s1 -> s1 [71, 65535] { R10116 += 1 };
  s2 -> s2 [0, 65535] { R10116 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R10118 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R10117 += 1, R10118 += 1 };
  s1 -> s1 [0, 65535] { R10118 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 69] { R10120 += 1 };
  s0 -> s2 [0, 65535] { R10120 += 1, R12 += 1 };
  s0 -> s0 [0, 65535] { R10119 += 1, R10120 += 1 };
  s0 -> s3 [70, 70] { R10120 += 1 };
  s0 -> s1 [71, 65535] { R10120 += 1 };
  s1 -> s1 [0, 69] { R10120 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [70, 70] { R10120 += 1 };
  s1 -> s1 [71, 65535] { R10120 += 1 };
  s2 -> s1 [0, 69] { R10120 += 1 };
  s2 -> s2 [0, 65535] { R10120 += 1, R12 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [70, 70] { R10120 += 1 };
  s2 -> s1 [71, 65535] { R10120 += 1 };
  s3 -> s3 [0, 65535] { R10120 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 69] { R10122 += 1, R10060 += 1 };
  s0 -> s0 [0, 65535] { R10121 += 1, R10122 += 1 };
  s0 -> s2 [0, 65535] { R10122 += 1, R10059 += 1, R10060 += 1 };
  s0 -> s1 [71, 65535] { R10122 += 1, R10060 += 1 };
  s1 -> s1 [0, 69] { R10122 += 1, R10060 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R10122 += 1 };
  s1 -> s1 [71, 65535] { R10122 += 1, R10060 += 1 };
  s2 -> s1 [0, 69] { R10122 += 1, R10060 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10122 += 1, R10059 += 1, R10060 += 1 };
  s2 -> s1 [71, 65535] { R10122 += 1, R10060 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s0 [0, 65535] { R10123 += 1, R10124 += 1 };
  s0 -> s1 [0, 65535] { R10124 += 1, R10061 += 1, R10062 += 1 };
  s0 -> s2 [0, 65535] { R10124 += 1, R10062 += 1, R20 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R10124 += 1, R10061 += 1, R10062 += 1 };
  s1 -> s2 [0, 65535] { R10124 += 1, R10062 += 1, R20 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R10124 += 1 };
  s2 -> s2 [0, 65535] { R10124 += 1, R10062 += 1, R20 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10124 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 70] { R10126 += 1, R10064 += 1 };
  s0 -> s0 [0, 65535] { R10125 += 1, R10126 += 1 };
  s0 -> s2 [0, 65535] { R10126 += 1, R10063 += 1, R10064 += 1 };
  s0 -> s1 [75, 65535] { R10126 += 1, R10064 += 1 };
  s1 -> s1 [0, 70] { R10126 += 1, R10064 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R10126 += 1 };
  s1 -> s1 [75, 65535] { R10126 += 1, R10064 += 1 };
  s2 -> s1 [0, 70] { R10126 += 1, R10064 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10126 += 1, R10063 += 1, R10064 += 1 };
  s2 -> s1 [75, 65535] { R10126 += 1, R10064 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s0 [0, 65535] { R10127 += 1, R10128 += 1 };
  s0 -> s1 [0, 65535] { R10128 += 1, R10066 += 1, R84 += 1 };
  s0 -> s2 [0, 65535] { R10128 += 1, R10065 += 1, R10066 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R10128 += 1 };
  s1 -> s1 [0, 65535] { R10128 += 1, R10066 += 1, R84 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10128 += 1, R10066 += 1, R84 += 1 };
  s2 -> s2 [0, 65535] { R10128 += 1, R10065 += 1, R10066 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10128 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 74] { R10130 += 1, R10068 += 1 };
  s0 -> s0 [0, 65535] { R10129 += 1, R10130 += 1 };
  s0 -> s2 [0, 65535] { R10130 += 1, R10067 += 1, R10068 += 1 };
  s0 -> s3 [0, 65535] { R10130 += 1, R10068 += 1, R86 += 1 };
  s0 -> s1 [76, 65535] { R10130 += 1, R10068 += 1 };
  s1 -> s1 [0, 74] { R10130 += 1, R10068 += 1 };
  s1 -> s1 [0, 65535] { R10130 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [76, 65535] { R10130 += 1, R10068 += 1 };
  s2 -> s1 [0, 74] { R10130 += 1, R10068 += 1 };
  s2 -> s2 [0, 65535] { R10130 += 1, R10067 += 1, R10068 += 1 };
  s2 -> s3 [0, 65535] { R10130 += 1, R10068 += 1, R86 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [76, 65535] { R10130 += 1, R10068 += 1 };
  s3 -> s1 [0, 74] { R10130 += 1, R10068 += 1 };
  s3 -> s3 [0, 65535] { R10130 += 1, R10068 += 1, R86 += 1 };
  s3 -> s4 [0, 65535] { R10130 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [76, 65535] { R10130 += 1, R10068 += 1 };
  s4 -> s4 [0, 65535] { R10130 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s0 [0, 65535] { R10131 += 1, R10132 += 1 };
  s0 -> s1 [0, 65535] { R10132 += 1, R10069 += 1, R10070 += 1 };
  s0 -> s2 [0, 65535] { R10132 += 1, R10070 += 1 };
  s0 -> s3 [0, 65535] { R10132 += 1, R10070 += 1, R90 += 1 };
  s1 -> s1 [0, 65535] { R10132 += 1, R10069 += 1, R10070 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R10132 += 1, R10070 += 1 };
  s1 -> s3 [0, 65535] { R10132 += 1, R10070 += 1, R90 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10132 += 1, R10070 += 1 };
  s2 -> s5 [0, 65535] { R10132 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R10132 += 1, R10070 += 1 };
  s3 -> s5 [0, 65535] { R10132 += 1 };
  s3 -> s3 [0, 65535] { R10132 += 1, R10070 += 1, R90 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10132 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R10134 += 1, R10072 += 1, R94 += 1, R95 += 1 };
  s0 -> s2 [0, 65535] { R10134 += 1, R10071 += 1, R10072 += 1 };
  s0 -> s3 [0, 65535] { R10134 += 1, R10072 += 1, R95 += 1, R96 += 1 };
  s0 -> s0 [0, 65535] { R10133 += 1, R10134 += 1 };
  s1 -> s5 [0, 65535] { R10134 += 1 };
  s1 -> s1 [0, 65535] { R10134 += 1, R10072 += 1, R94 += 1, R95 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [0, 65535] { R10134 += 1, R10072 += 1, R95 += 1, R96 += 1 };
  s2 -> s1 [0, 65535] { R10134 += 1, R10072 += 1, R94 += 1, R95 += 1 };
  s2 -> s2 [0, 65535] { R10134 += 1, R10071 += 1, R10072 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R10134 += 1, R10072 += 1, R95 += 1, R96 += 1 };
  s3 -> s4 [0, 65535] { R10134 += 1, R10072 += 1 };
  s3 -> s5 [0, 65535] { R10134 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R10134 += 1, R10072 += 1, R95 += 1, R96 += 1 };
  s4 -> s4 [0, 65535] { R10134 += 1, R10072 += 1 };
  s4 -> s5 [0, 65535] { R10134 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R10134 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 74] { R10136 += 1, R10074 += 1, R6809 += 1 };
  s0 -> s2 [0, 65535] { R10136 += 1, R10073 += 1, R10074 += 1 };
  s0 -> s3 [0, 65535] { R10136 += 1, R10074 += 1 };
  s0 -> s0 [0, 65535] { R10135 += 1, R10136 += 1 };
  s0 -> s4 [0, 65535] { R10136 += 1, R10074 += 1, R6809 += 1, R6810 += 1 };
  s0 -> s1 [76, 65535] { R10136 += 1, R10074 += 1, R6809 += 1 };
  s1 -> s1 [0, 74] { R10136 += 1, R10074 += 1, R6809 += 1 };
  s1 -> s5 [0, 65535] { R10136 += 1 };
  s1 -> s1 [0, 65535] { R10136 += 1, R10074 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [76, 65535] { R10136 += 1, R10074 += 1, R6809 += 1 };
  s2 -> s1 [0, 74] { R10136 += 1, R10074 += 1, R6809 += 1 };
  s2 -> s2 [0, 65535] { R10136 += 1, R10073 += 1, R10074 += 1 };
  s2 -> s3 [0, 65535] { R10136 += 1, R10074 += 1 };
  s2 -> s4 [0, 65535] { R10136 += 1, R10074 += 1, R6809 += 1, R6810 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s1 [76, 65535] { R10136 += 1, R10074 += 1, R6809 += 1 };
  s3 -> s3 [0, 65535] { R10136 += 1, R10074 += 1 };
  s3 -> s5 [0, 65535] { R10136 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s1 [0, 74] { R10136 += 1, R10074 += 1, R6809 += 1 };
  s4 -> s3 [0, 65535] { R10136 += 1, R10074 += 1 };
  s4 -> s5 [0, 65535] { R10136 += 1 };
  s4 -> s4 [0, 65535] { R10136 += 1, R10074 += 1, R6809 += 1, R6810 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s1 [76, 65535] { R10136 += 1, R10074 += 1, R6809 += 1 };
  s5 -> s5 [0, 65535] { R10136 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 74] { R10138 += 1, R10076 += 1, R9606 += 1, R9608 += 1 };
  s0 -> s0 [0, 65535] { R10137 += 1, R10138 += 1 };
  s0 -> s2 [0, 65535] { R10138 += 1, R10076 += 1, R9606 += 1, R9607 += 1, R9608 += 1 };
  s0 -> s3 [0, 65535] { R10138 += 1, R10075 += 1, R10076 += 1 };
  s0 -> s4 [75, 75] { R10138 += 1, R10076 += 1, R9606 += 1, R9608 += 1 };
  s0 -> s1 [76, 65535] { R10138 += 1, R10076 += 1, R9606 += 1, R9608 += 1 };
  s1 -> s1 [0, 74] { R10138 += 1, R10076 += 1, R9606 += 1, R9608 += 1 };
  s1 -> s4 [75, 75] { R10138 += 1, R10076 += 1, R9606 += 1, R9608 += 1 };
  s1 -> s1 [76, 65535] { R10138 += 1, R10076 += 1, R9606 += 1, R9608 += 1 };
  s2 -> s1 [0, 74] { R10138 += 1, R10076 += 1, R9606 += 1, R9608 += 1 };
  s2 -> s2 [0, 65535] { R10138 += 1, R10076 += 1, R9606 += 1, R9607 += 1, R9608 += 1 };
  s2 -> s4 [75, 75] { R10138 += 1, R10076 += 1, R9606 += 1, R9608 += 1 };
  s2 -> s1 [76, 65535] { R10138 += 1, R10076 += 1, R9606 += 1, R9608 += 1 };
  s3 -> s1 [0, 74] { R10138 += 1, R10076 += 1, R9606 += 1, R9608 += 1 };
  s3 -> s2 [0, 65535] { R10138 += 1, R10076 += 1, R9606 += 1, R9607 += 1, R9608 += 1 };
  s3 -> s3 [0, 65535] { R10138 += 1, R10075 += 1, R10076 += 1 };
  s3 -> s4 [75, 75] { R10138 += 1, R10076 += 1, R9606 += 1, R9608 += 1 };
  s3 -> s1 [76, 65535] { R10138 += 1, R10076 += 1, R9606 += 1, R9608 += 1 };
  s4 -> s5 [0, 65535] { R10138 += 1, R10076 += 1 };
  s4 -> s6 [0, 65535] { R10138 += 1 };
  s4 -> s4 [0, 65535] { R10138 += 1, R10076 += 1, R9606 += 1, R9608 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s8 [0, 65535] { R10138 += 1, R10076 += 1, R9606 += 1 };
  s5 -> s5 [0, 65535] { R10138 += 1, R10076 += 1 };
  s5 -> s6 [0, 65535] { R10138 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s6 [0, 65535] { R10138 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  s8 -> s5 [0, 65535] { R10138 += 1, R10076 += 1 };
  s8 -> s6 [0, 65535] { R10138 += 1 };
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R10138 += 1, R10076 += 1, R9606 += 1 };
  accepting s4, s8, s5, s6, s7;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 65535] { R10140 += 1, R10078 += 1 };
  s0 -> s0 [0, 65535] { R10139 += 1, R10140 += 1 };
  s0 -> s2 [0, 65535] { R10140 += 1, R10078 += 1, R10055 += 1, R10056 += 1, R10057 += 1 };
  s0 -> s3 [0, 65535] { R10140 += 1, R10078 += 1, R10055 += 1, R10057 += 1, R10058 += 1 };
  s0 -> s4 [0, 65535] { R10140 += 1, R10077 += 1, R10078 += 1 };
  s1 -> s1 [0, 65535] { R10140 += 1, R10078 += 1 };
  s1 -> s6 [0, 65535] { R10140 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R10140 += 1, R10078 += 1 };
  s2 -> s6 [0, 65535] { R10140 += 1 };
  s2 -> s2 [0, 65535] { R10140 += 1, R10078 += 1, R10055 += 1, R10056 += 1, R10057 += 1 };
  s2 -> s3 [0, 65535] { R10140 += 1, R10078 += 1, R10055 += 1, R10057 += 1, R10058 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s1 [0, 65535] { R10140 += 1, R10078 += 1 };
  s3 -> s6 [0, 65535] { R10140 += 1 };
  s3 -> s3 [0, 65535] { R10140 += 1, R10078 += 1, R10055 += 1, R10057 += 1, R10058 += 1 };
  s3 -> s7 [0, 65535] { R10140 += 1, R10078 += 1, R10055 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s1 [0, 65535] { R10140 += 1, R10078 += 1 };
  s4 -> s2 [0, 65535] { R10140 += 1, R10078 += 1, R10055 += 1, R10056 += 1, R10057 += 1 };
  s4 -> s3 [0, 65535] { R10140 += 1, R10078 += 1, R10055 += 1, R10057 += 1, R10058 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10140 += 1, R10077 += 1, R10078 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10140 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s1 [0, 65535] { R10140 += 1, R10078 += 1 };
  s7 -> s6 [0, 65535] { R10140 += 1 };
  s7 -> s7 [0, 65535] { R10140 += 1, R10078 += 1, R10055 += 1 };
  s7 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R10142 += 1, R10097 += 1, R10098 += 1 };
  s0 -> s2 [0, 65535] { R10142 += 1, R10098 += 1, R21 += 1 };
  s0 -> s0 [0, 65535] { R10141 += 1, R10142 += 1 };
  s1 -> s1 [0, 65535] { R10142 += 1, R10097 += 1, R10098 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R10142 += 1, R10098 += 1, R21 += 1 };
  s2 -> s3 [0, 65535] { R10142 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10142 += 1, R10098 += 1, R21 += 1 };
  s3 -> s3 [0, 65535] { R10142 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 69] { R10144 += 1, R10100 += 1 };
  s0 -> s2 [0, 65535] { R10144 += 1, R10099 += 1, R10100 += 1 };
  s0 -> s0 [0, 65535] { R10143 += 1, R10144 += 1 };
  s0 -> s3 [70, 70] { R10144 += 1, R10100 += 1 };
  s0 -> s4 [70, 70] { R10144 += 1, R10100 += 1 };
  s0 -> s5 [75, 75] { R10144 += 1, R10100 += 1 };
  s0 -> s1 [76, 65535] { R10144 += 1, R10100 += 1 };
  s1 -> s1 [0, 69] { R10144 += 1, R10100 += 1 };
  s1 -> s3 [70, 70] { R10144 += 1, R10100 += 1 };
  s1 -> s4 [70, 70] { R10144 += 1, R10100 += 1 };
  s1 -> s5 [75, 75] { R10144 += 1, R10100 += 1 };
  s1 -> s1 [76, 65535] { R10144 += 1, R10100 += 1 };
  s2 -> s1 [0, 69] { R10144 += 1, R10100 += 1 };
  s2 -> s2 [0, 65535] { R10144 += 1, R10099 += 1, R10100 += 1 };
  s2 -> s3 [70, 70] { R10144 += 1, R10100 += 1 };
  s2 -> s4 [70, 70] { R10144 += 1, R10100 += 1 };
  s2 -> s5 [75, 75] { R10144 += 1, R10100 += 1 };
  s2 -> s1 [76, 65535] { R10144 += 1, R10100 += 1 };
  s4 -> s4 [0, 70] { R10144 += 1, R10100 += 1 };
  s4 -> s7 [75, 75] { R10144 += 1, R10100 += 1 };
  s4 -> s4 [76, 65535] { R10144 += 1, R10100 += 1 };
  s5 -> s5 [0, 69] { R10144 += 1, R10100 += 1 };
  s5 -> s5 [0, 65535] { R10144 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [70, 70] { R10144 += 1, R10100 += 1 };
  s5 -> s8 [70, 70] { R10144 += 1, R10100 += 1 };
  s5 -> s5 [75, 65535] { R10144 += 1, R10100 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 70] { R10144 += 1, R10100 += 1 };
  s7 -> s7 [0, 65535] { R10144 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [75, 65535] { R10144 += 1, R10100 += 1 };
  s8 -> s8 [0, 65535] { R10144 += 1 };
  s8 -> s6 [0, 65535];
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 69] { R10146 += 1, R10102 += 1, R83 += 1 };
  s0 -> s2 [0, 65535] { R10146 += 1, R10101 += 1, R10102 += 1 };
  s0 -> s0 [0, 65535] { R10145 += 1, R10146 += 1 };
  s0 -> s3 [70, 70] { R10146 += 1, R10102 += 1, R83 += 1 };
  s0 -> s4 [70, 70] { R10146 += 1, R10102 += 1, R83 += 1 };
  s0 -> s1 [71, 65535] { R10146 += 1, R10102 += 1, R83 += 1 };
  s1 -> s1 [0, 69] { R10146 += 1, R10102 += 1, R83 += 1 };
  s1 -> s1 [0, 65535] { R10146 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [70, 70] { R10146 += 1, R10102 += 1, R83 += 1 };
  s1 -> s4 [70, 70] { R10146 += 1, R10102 += 1, R83 += 1 };
  s1 -> s1 [71, 65535] { R10146 += 1, R10102 += 1, R83 += 1 };
  s2 -> s1 [0, 69] { R10146 += 1, R10102 += 1, R83 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10146 += 1, R10101 += 1, R10102 += 1 };
  s2 -> s3 [70, 70] { R10146 += 1, R10102 += 1, R83 += 1 };
  s2 -> s4 [70, 70] { R10146 += 1, R10102 += 1, R83 += 1 };
  s2 -> s1 [71, 65535] { R10146 += 1, R10102 += 1, R83 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10146 += 1, R10102 += 1, R83 += 1 };
  s3 -> s6 [0, 65535] { R10146 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10146 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10146 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 69] { R10148 += 1, R10104 += 1, R85 += 1 };
  s0 -> s2 [0, 65535] { R10148 += 1, R10103 += 1, R10104 += 1 };
  s0 -> s0 [0, 65535] { R10147 += 1, R10148 += 1 };
  s0 -> s3 [70, 70] { R10148 += 1, R10104 += 1, R85 += 1 };
  s0 -> s4 [70, 70] { R10148 += 1, R10104 += 1, R85 += 1 };
  s0 -> s1 [71, 65535] { R10148 += 1, R10104 += 1, R85 += 1 };
  s1 -> s1 [0, 69] { R10148 += 1, R10104 += 1, R85 += 1 };
  s1 -> s1 [0, 65535] { R10148 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [70, 70] { R10148 += 1, R10104 += 1, R85 += 1 };
  s1 -> s4 [70, 70] { R10148 += 1, R10104 += 1, R85 += 1 };
  s1 -> s1 [71, 65535] { R10148 += 1, R10104 += 1, R85 += 1 };
  s2 -> s1 [0, 69] { R10148 += 1, R10104 += 1, R85 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10148 += 1, R10103 += 1, R10104 += 1 };
  s2 -> s3 [70, 70] { R10148 += 1, R10104 += 1, R85 += 1 };
  s2 -> s4 [70, 70] { R10148 += 1, R10104 += 1, R85 += 1 };
  s2 -> s1 [71, 65535] { R10148 += 1, R10104 += 1, R85 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R10148 += 1 };
  s3 -> s3 [0, 65535] { R10148 += 1, R10104 += 1, R85 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10148 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10148 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 69] { R10150 += 1, R10106 += 1, R87 += 1, R88 += 1 };
  s0 -> s2 [0, 69] { R10150 += 1, R10106 += 1, R88 += 1 };
  s0 -> s3 [0, 65535] { R10150 += 1, R10105 += 1, R10106 += 1 };
  s0 -> s0 [0, 65535] { R10149 += 1, R10150 += 1 };
  s0 -> s4 [70, 70] { R10150 += 1, R10106 += 1, R88 += 1 };
  s0 -> s5 [70, 70] { R10150 += 1, R10106 += 1, R87 += 1, R88 += 1 };
  s0 -> s6 [70, 70] { R10150 += 1, R10106 += 1, R88 += 1 };
  s0 -> s7 [70, 70] { R10150 += 1, R10106 += 1, R87 += 1, R88 += 1 };
  s0 -> s2 [71, 74] { R10150 += 1, R10106 += 1, R88 += 1 };
  s0 -> s1 [71, 65535] { R10150 += 1, R10106 += 1, R87 += 1, R88 += 1 };
  s0 -> s8 [75, 75] { R10150 += 1, R10106 += 1, R88 += 1 };
  s0 -> s2 [76, 65535] { R10150 += 1, R10106 += 1, R88 += 1 };
  s1 -> s1 [0, 69] { R10150 += 1, R10106 += 1, R87 += 1, R88 += 1 };
  s1 -> s2 [0, 69] { R10150 += 1, R10106 += 1, R88 += 1 };
  s1 -> s4 [70, 70] { R10150 += 1, R10106 += 1, R88 += 1 };
  s1 -> s5 [70, 70] { R10150 += 1, R10106 += 1, R87 += 1, R88 += 1 };
  s1 -> s6 [70, 70] { R10150 += 1, R10106 += 1, R88 += 1 };
  s1 -> s7 [70, 70] { R10150 += 1, R10106 += 1, R87 += 1, R88 += 1 };
  s1 -> s2 [71, 74] { R10150 += 1, R10106 += 1, R88 += 1 };
  s1 -> s1 [71, 65535] { R10150 += 1, R10106 += 1, R87 += 1, R88 += 1 };
  s1 -> s8 [75, 75] { R10150 += 1, R10106 += 1, R88 += 1 };
  s1 -> s2 [76, 65535] { R10150 += 1, R10106 += 1, R88 += 1 };
  s2 -> s2 [0, 69] { R10150 += 1, R10106 += 1, R88 += 1 };
  s2 -> s4 [70, 70] { R10150 += 1, R10106 += 1, R88 += 1 };
  s2 -> s6 [70, 70] { R10150 += 1, R10106 += 1, R88 += 1 };
  s2 -> s2 [71, 74] { R10150 += 1, R10106 += 1, R88 += 1 };
  s2 -> s8 [75, 75] { R10150 += 1, R10106 += 1, R88 += 1 };
  s2 -> s2 [76, 65535] { R10150 += 1, R10106 += 1, R88 += 1 };
  s3 -> s1 [0, 69] { R10150 += 1, R10106 += 1, R87 += 1, R88 += 1 };
  s3 -> s2 [0, 69] { R10150 += 1, R10106 += 1, R88 += 1 };
  s3 -> s3 [0, 65535] { R10150 += 1, R10105 += 1, R10106 += 1 };
  s3 -> s4 [70, 70] { R10150 += 1, R10106 += 1, R88 += 1 };
  s3 -> s5 [70, 70] { R10150 += 1, R10106 += 1, R87 += 1, R88 += 1 };
  s3 -> s6 [70, 70] { R10150 += 1, R10106 += 1, R88 += 1 };
  s3 -> s7 [70, 70] { R10150 += 1, R10106 += 1, R87 += 1, R88 += 1 };
  s3 -> s2 [71, 74] { R10150 += 1, R10106 += 1, R88 += 1 };
  s3 -> s1 [71, 65535] { R10150 += 1, R10106 += 1, R87 += 1, R88 += 1 };
  s3 -> s8 [75, 75] { R10150 += 1, R10106 += 1, R88 += 1 };
  s3 -> s2 [76, 65535] { R10150 += 1, R10106 += 1, R88 += 1 };
  s6 -> s6 [0, 74] { R10150 += 1, R10106 += 1, R88 += 1 };
  s6 -> s10 [75, 75] { R10150 += 1, R10106 += 1, R88 += 1 };
  s6 -> s6 [76, 65535] { R10150 += 1, R10106 += 1, R88 += 1 };
  s7 -> s6 [0, 74] { R10150 += 1, R10106 += 1, R88 += 1 };
  s7 -> s7 [0, 65535] { R10150 += 1, R10106 += 1, R87 += 1, R88 += 1 };
  s7 -> s10 [75, 75] { R10150 += 1, R10106 += 1, R88 += 1 };
  s7 -> s6 [76, 65535] { R10150 += 1, R10106 += 1, R88 += 1 };
  s8 -> s8 [0, 69] { R10150 += 1, R10106 += 1, R88 += 1 };
  s8 -> s8 [0, 65535] { R10150 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [70, 70] { R10150 += 1, R10106 += 1, R88 += 1 };
  s8 -> s11 [70, 70] { R10150 += 1, R10106 += 1, R88 += 1 };
  s8 -> s8 [71, 65535] { R10150 += 1, R10106 += 1, R88 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s12 [0, 65535] { R10150 += 1 };
  s10 -> s10 [0, 65535] { R10150 += 1, R10106 += 1, R88 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R10150 += 1 };
  s11 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R10150 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 69] { R10152 += 1, R10108 += 1, R91 += 1, R92 += 1 };
  s0 -> s0 [0, 65535] { R10151 += 1, R10152 += 1 };
  s0 -> s2 [0, 65535] { R10152 += 1, R10107 += 1, R10108 += 1 };
  s0 -> s3 [70, 70] { R10152 += 1, R10108 += 1, R91 += 1, R92 += 1 };
  s0 -> s4 [70, 70] { R10152 += 1, R10108 += 1, R91 += 1, R92 += 1 };
  s0 -> s1 [71, 65535] { R10152 += 1, R10108 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 69] { R10152 += 1, R10108 += 1, R91 += 1, R92 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10152 += 1 };
  s1 -> s3 [70, 70] { R10152 += 1, R10108 += 1, R91 += 1, R92 += 1 };
  s1 -> s4 [70, 70] { R10152 += 1, R10108 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [71, 65535] { R10152 += 1, R10108 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [0, 69] { R10152 += 1, R10108 += 1, R91 += 1, R92 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10152 += 1, R10107 += 1, R10108 += 1 };
  s2 -> s3 [70, 70] { R10152 += 1, R10108 += 1, R91 += 1, R92 += 1 };
  s2 -> s4 [70, 70] { R10152 += 1, R10108 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [71, 65535] { R10152 += 1, R10108 += 1, R91 += 1, R92 += 1 };
  s3 -> s3 [0, 65535] { R10152 += 1, R10108 += 1, R91 += 1, R92 += 1 };
  s3 -> s6 [0, 65535] { R10152 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10152 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10152 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 69] { R10154 += 1, R10110 += 1, R6806 += 1, R6807 += 1 };
  s0 -> s2 [0, 69] { R10154 += 1, R10110 += 1, R6805 += 1, R6806 += 1 };
  s0 -> s3 [0, 65535] { R10154 += 1, R10109 += 1, R10110 += 1 };
  s0 -> s0 [0, 65535] { R10153 += 1, R10154 += 1 };
  s0 -> s4 [70, 70] { R10154 += 1, R10110 += 1, R6806 += 1, R6807 += 1 };
  s0 -> s5 [70, 70] { R10154 += 1, R10110 += 1, R6806 += 1, R6807 += 1 };
  s0 -> s6 [70, 70] { R10154 += 1, R10110 += 1, R6805 += 1, R6806 += 1 };
  s0 -> s7 [70, 70] { R10154 += 1, R10110 += 1, R6805 += 1, R6806 += 1 };
  s0 -> s1 [71, 65535] { R10154 += 1, R10110 += 1, R6806 += 1, R6807 += 1 };
  s0 -> s2 [71, 65535] { R10154 += 1, R10110 += 1, R6805 += 1, R6806 += 1 };
  s1 -> s1 [0, 69] { R10154 += 1, R10110 += 1, R6806 += 1, R6807 += 1 };
  s1 -> s1 [0, 65535] { R10154 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s4 [70, 70] { R10154 += 1, R10110 += 1, R6806 += 1, R6807 += 1 };
  s1 -> s5 [70, 70] { R10154 += 1, R10110 += 1, R6806 += 1, R6807 += 1 };
  s1 -> s1 [71, 65535] { R10154 += 1, R10110 += 1, R6806 += 1, R6807 += 1 };
  s2 -> s1 [0, 69] { R10154 += 1, R10110 += 1, R6806 += 1, R6807 += 1 };
  s2 -> s2 [0, 69] { R10154 += 1, R10110 += 1, R6805 += 1, R6806 += 1 };
  s2 -> s4 [70, 70] { R10154 += 1, R10110 += 1, R6806 += 1, R6807 += 1 };
  s2 -> s5 [70, 70] { R10154 += 1, R10110 += 1, R6806 += 1, R6807 += 1 };
  s2 -> s6 [70, 70] { R10154 += 1, R10110 += 1, R6805 += 1, R6806 += 1 };
  s2 -> s7 [70, 70] { R10154 += 1, R10110 += 1, R6805 += 1, R6806 += 1 };
  s2 -> s1 [71, 65535] { R10154 += 1, R10110 += 1, R6806 += 1, R6807 += 1 };
  s2 -> s2 [71, 65535] { R10154 += 1, R10110 += 1, R6805 += 1, R6806 += 1 };
  s3 -> s1 [0, 69] { R10154 += 1, R10110 += 1, R6806 += 1, R6807 += 1 };
  s3 -> s2 [0, 69] { R10154 += 1, R10110 += 1, R6805 += 1, R6806 += 1 };
  s3 -> s3 [0, 65535] { R10154 += 1, R10109 += 1, R10110 += 1 };
  s3 -> s4 [70, 70] { R10154 += 1, R10110 += 1, R6806 += 1, R6807 += 1 };
  s3 -> s5 [70, 70] { R10154 += 1, R10110 += 1, R6806 += 1, R6807 += 1 };
  s3 -> s6 [70, 70] { R10154 += 1, R10110 += 1, R6805 += 1, R6806 += 1 };
  s3 -> s7 [70, 70] { R10154 += 1, R10110 += 1, R6805 += 1, R6806 += 1 };
  s3 -> s1 [71, 65535] { R10154 += 1, R10110 += 1, R6806 += 1, R6807 += 1 };
  s3 -> s2 [71, 65535] { R10154 += 1, R10110 += 1, R6805 += 1, R6806 += 1 };
  s4 -> s4 [0, 65535] { R10154 += 1, R10110 += 1, R6806 += 1, R6807 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s9 [0, 65535] { R10154 += 1 };
  s5 -> s5 [0, 65535] { R10154 += 1 };
  s5 -> s8 [0, 65535];
  s6 -> s4 [0, 65535] { R10154 += 1, R10110 += 1, R6806 += 1, R6807 += 1 };
  s6 -> s6 [0, 65535] { R10154 += 1, R10110 += 1, R6805 += 1, R6806 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R10154 += 1 };
  accepting s4, s8, s5, s9, s1;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 69] { R10156 += 1, R10112 += 1, R9601 += 1, R9602 += 1 };
  s0 -> s2 [0, 69] { R10156 += 1, R10112 += 1, R9602 += 1, R9603 += 1, R9604 += 1 };
  s0 -> s0 [0, 65535] { R10155 += 1, R10156 += 1 };
  s0 -> s3 [0, 65535] { R10156 += 1, R10111 += 1, R10112 += 1 };
  s0 -> s4 [70, 70] { R10156 += 1, R10112 += 1, R9601 += 1, R9602 += 1 };
  s0 -> s5 [70, 70] { R10156 += 1, R10112 += 1, R9602 += 1, R9603 += 1, R9604 += 1 };
  s0 -> s6 [70, 70] { R10156 += 1, R10112 += 1, R9601 += 1, R9602 += 1 };
  s0 -> s7 [70, 70] { R10156 += 1, R10112 += 1, R9602 += 1, R9603 += 1, R9604 += 1 };
  s0 -> s1 [71, 65535] { R10156 += 1, R10112 += 1, R9601 += 1, R9602 += 1 };
  s0 -> s2 [71, 65535] { R10156 += 1, R10112 += 1, R9602 += 1, R9603 += 1, R9604 += 1 };
  s1 -> s1 [0, 69] { R10156 += 1, R10112 += 1, R9601 += 1, R9602 += 1 };
  s1 -> s2 [0, 69] { R10156 += 1, R10112 += 1, R9602 += 1, R9603 += 1, R9604 += 1 };
  s1 -> s4 [70, 70] { R10156 += 1, R10112 += 1, R9601 += 1, R9602 += 1 };
  s1 -> s5 [70, 70] { R10156 += 1, R10112 += 1, R9602 += 1, R9603 += 1, R9604 += 1 };
  s1 -> s6 [70, 70] { R10156 += 1, R10112 += 1, R9601 += 1, R9602 += 1 };
  s1 -> s7 [70, 70] { R10156 += 1, R10112 += 1, R9602 += 1, R9603 += 1, R9604 += 1 };
  s1 -> s1 [71, 65535] { R10156 += 1, R10112 += 1, R9601 += 1, R9602 += 1 };
  s1 -> s2 [71, 65535] { R10156 += 1, R10112 += 1, R9602 += 1, R9603 += 1, R9604 += 1 };
  s2 -> s2 [0, 69] { R10156 += 1, R10112 += 1, R9602 += 1, R9603 += 1, R9604 += 1 };
  s2 -> s9 [0, 65535];
  s2 -> s2 [0, 65535] { R10156 += 1 };
  s2 -> s5 [70, 70] { R10156 += 1, R10112 += 1, R9602 += 1, R9603 += 1, R9604 += 1 };
  s2 -> s7 [70, 70] { R10156 += 1, R10112 += 1, R9602 += 1, R9603 += 1, R9604 += 1 };
  s2 -> s2 [71, 65535] { R10156 += 1, R10112 += 1, R9602 += 1, R9603 += 1, R9604 += 1 };
  s3 -> s1 [0, 69] { R10156 += 1, R10112 += 1, R9601 += 1, R9602 += 1 };
  s3 -> s2 [0, 69] { R10156 += 1, R10112 += 1, R9602 += 1, R9603 += 1, R9604 += 1 };
  s3 -> s3 [0, 65535] { R10156 += 1, R10111 += 1, R10112 += 1 };
  s3 -> s4 [70, 70] { R10156 += 1, R10112 += 1, R9601 += 1, R9602 += 1 };
  s3 -> s5 [70, 70] { R10156 += 1, R10112 += 1, R9602 += 1, R9603 += 1, R9604 += 1 };
  s3 -> s6 [70, 70] { R10156 += 1, R10112 += 1, R9601 += 1, R9602 += 1 };
  s3 -> s7 [70, 70] { R10156 += 1, R10112 += 1, R9602 += 1, R9603 += 1, R9604 += 1 };
  s3 -> s1 [71, 65535] { R10156 += 1, R10112 += 1, R9601 += 1, R9602 += 1 };
  s3 -> s2 [71, 65535] { R10156 += 1, R10112 += 1, R9602 += 1, R9603 += 1, R9604 += 1 };
  s4 -> s4 [0, 65535] { R10156 += 1, R10112 += 1, R9601 += 1, R9602 += 1 };
  s4 -> s7 [0, 65535] { R10156 += 1, R10112 += 1, R9602 += 1, R9603 += 1, R9604 += 1 };
  s5 -> s5 [0, 65535] { R10156 += 1 };
  s5 -> s9 [0, 65535];
  s7 -> s8 [0, 65535] { R10156 += 1 };
  s7 -> s9 [0, 65535];
  s7 -> s7 [0, 65535] { R10156 += 1, R10112 += 1, R9602 += 1, R9603 += 1, R9604 += 1 };
  s8 -> s8 [0, 65535] { R10156 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s8, s5, s2, s9, s7;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 69] { R10158 += 1, R10114 += 1, R10050 += 1, R10051 += 1, R10052 += 1 };
  s0 -> s2 [0, 69] { R10158 += 1, R10114 += 1, R10049 += 1, R10050 += 1 };
  s0 -> s3 [0, 65535] { R10158 += 1, R10113 += 1, R10114 += 1 };
  s0 -> s0 [0, 65535] { R10157 += 1, R10158 += 1 };
  s0 -> s4 [70, 70] { R10158 += 1, R10114 += 1, R10050 += 1, R10051 += 1, R10052 += 1 };
  s0 -> s5 [70, 70] { R10158 += 1, R10114 += 1, R10049 += 1, R10050 += 1 };
  s0 -> s6 [70, 70] { R10158 += 1, R10114 += 1, R10050 += 1, R10051 += 1, R10052 += 1 };
  s0 -> s7 [70, 70] { R10158 += 1, R10114 += 1, R10049 += 1, R10050 += 1 };
  s0 -> s1 [71, 65535] { R10158 += 1, R10114 += 1, R10050 += 1, R10051 += 1, R10052 += 1 };
  s0 -> s2 [71, 65535] { R10158 += 1, R10114 += 1, R10049 += 1, R10050 += 1 };
  s1 -> s1 [0, 69] { R10158 += 1, R10114 += 1, R10050 += 1, R10051 += 1, R10052 += 1 };
  s1 -> s1 [0, 65535] { R10158 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s4 [70, 70] { R10158 += 1, R10114 += 1, R10050 += 1, R10051 += 1, R10052 += 1 };
  s1 -> s6 [70, 70] { R10158 += 1, R10114 += 1, R10050 += 1, R10051 += 1, R10052 += 1 };
  s1 -> s1 [71, 65535] { R10158 += 1, R10114 += 1, R10050 += 1, R10051 += 1, R10052 += 1 };
  s2 -> s1 [0, 69] { R10158 += 1, R10114 += 1, R10050 += 1, R10051 += 1, R10052 += 1 };
  s2 -> s2 [0, 69] { R10158 += 1, R10114 += 1, R10049 += 1, R10050 += 1 };
  s2 -> s4 [70, 70] { R10158 += 1, R10114 += 1, R10050 += 1, R10051 += 1, R10052 += 1 };
  s2 -> s5 [70, 70] { R10158 += 1, R10114 += 1, R10049 += 1, R10050 += 1 };
  s2 -> s6 [70, 70] { R10158 += 1, R10114 += 1, R10050 += 1, R10051 += 1, R10052 += 1 };
  s2 -> s7 [70, 70] { R10158 += 1, R10114 += 1, R10049 += 1, R10050 += 1 };
  s2 -> s1 [71, 65535] { R10158 += 1, R10114 += 1, R10050 += 1, R10051 += 1, R10052 += 1 };
  s2 -> s2 [71, 65535] { R10158 += 1, R10114 += 1, R10049 += 1, R10050 += 1 };
  s3 -> s1 [0, 69] { R10158 += 1, R10114 += 1, R10050 += 1, R10051 += 1, R10052 += 1 };
  s3 -> s2 [0, 69] { R10158 += 1, R10114 += 1, R10049 += 1, R10050 += 1 };
  s3 -> s3 [0, 65535] { R10158 += 1, R10113 += 1, R10114 += 1 };
  s3 -> s4 [70, 70] { R10158 += 1, R10114 += 1, R10050 += 1, R10051 += 1, R10052 += 1 };
  s3 -> s5 [70, 70] { R10158 += 1, R10114 += 1, R10049 += 1, R10050 += 1 };
  s3 -> s6 [70, 70] { R10158 += 1, R10114 += 1, R10050 += 1, R10051 += 1, R10052 += 1 };
  s3 -> s7 [70, 70] { R10158 += 1, R10114 += 1, R10049 += 1, R10050 += 1 };
  s3 -> s1 [71, 65535] { R10158 += 1, R10114 += 1, R10050 += 1, R10051 += 1, R10052 += 1 };
  s3 -> s2 [71, 65535] { R10158 += 1, R10114 += 1, R10049 += 1, R10050 += 1 };
  s4 -> s4 [0, 65535] { R10158 += 1, R10114 += 1, R10050 += 1, R10051 += 1, R10052 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s9 [0, 65535] { R10158 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R10158 += 1 };
  s7 -> s4 [0, 65535] { R10158 += 1, R10114 += 1, R10050 += 1, R10051 += 1, R10052 += 1 };
  s7 -> s7 [0, 65535] { R10158 += 1, R10114 += 1, R10049 += 1, R10050 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R10158 += 1 };
  accepting s4, s8, s9, s6, s1;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [102, 102];
  accepting s1;
};
};
constraint R2 = R10076 && R3 = R10158 && R23 - R10158 = -1 && R24 = R10158 && R25 - R10158 = -1 && R26 = R10158 && R27 = 0 && R28 = 1 && R29 = 0 && R30 = 1 && R45 + R84 + R83 + -1*R9606 + -1*R9602 - R66 = 0 && R49 + R89 + R87 = 0 && R50 + R90 + R88 + -1*R9606 + -1*R9602 - R66 = 0 && R55 + R96 + R93 + -1*R9608 + -1*R9604 - R68 = 0 && R65 + R9605 + R9601 = 0 && R67 + R9607 + R9603 = 0 && R10075 = 0 && R10099 = 0 && R10100 = 0 && R10105 = 0 && R10106 = 0 && R10109 = 0 && R10110 = 0 && R10111 = 0 && R10112 = 0 && R10113 = 0 && R10114 = 0 && R10115 = 0 && R10116 = R10158 && R10117 = 0 && R10118 = R10158 && R10119 = 0 && R10120 = R10158 && R10121 = 0 && R10122 = R10158 && R10123 = 0 && R10124 = R10158 && R10125 = 0 && R10126 = R10158 && R10127 = 0 && R10128 = R10158 && R10129 = 0 && R10130 = R10158 && R10131 = 0 && R10132 = R10158 && R10133 = 0 && R10134 = R10158 && R10135 = 0 && R10136 = R10158 && R10137 = 0 && R10138 = R10158 && R10139 = 0 && R10140 = R10158 && R10141 = 0 && R10142 = R10158 && R10143 = 0 && R10144 = R10158 && R10145 = 0 && R10146 = R10158 && R10147 = 0 && R10148 = R10158 && R10149 = 0 && R10150 = R10158 && R10151 = 0 && R10152 = R10158 && R10153 = 0 && R10154 = R10158 && R10155 = 0 && R10156 = R10158 && R10157 = 0 && R12 < 1 && R15 < 1 && R16 < 1 && R47 + R86 + R85 < 1 && R61 + R6810 + R6807 < 1 && -1*R9606 + -1*R9602 - R66 < 1 && -1*R9608 + -1*R9604 - R68 < 1 && -1 < R10076 && 0 < R10158 && (R53 + R94 + R91 != 0 || R54 + R95 + R92 + -1*R9606 + -1*R9602 - R66 = 0 || R66 + R9606 + R9602 < 1) && (R59 + R6808 + R6805 != 0 || R60 + R6809 + R6806 + -1*R9606 + -1*R9602 - R66 = 0 || R66 + R9606 + R9602 < 1) && (R66 + R9606 + R9602 != 0 || ((R53 + R94 + R91 != 0 || R54 + R95 + R92 = 0 || R68 + R9608 + R9604 < 1) && (R53 + R94 + R91 = 0 || R68 + R9608 + R9604 < 1))) && (R66 + R9606 + R9602 != 0 || ((R59 + R6808 + R6805 != 0 || R60 + R6809 + R6806 = 0 || R68 + R9608 + R9604 < 1) && (R59 + R6808 + R6805 = 0 || R68 + R9608 + R9604 < 1))) && (R66 + R9606 + R9602 != 0 || ((R73 + R10054 + R10049 != 0 || R74 + R10055 + R10050 = 0 || R68 + R9608 + R9604 < 1) && (R73 + R10054 + R10049 = 0 || R68 + R9608 + R9604 < 1))) && (R68 + R9608 + R9604 != 0 || R77 + R10058 + R10053 = 0 || (R75 + R10056 + R10051 = 0 && R76 + R10057 + R10052 = 0)) && (R73 + R10054 + R10049 != 0 || R66 + R9606 + R9602 + -1*R10055 + -1*R10050 - R74 = 0 || R66 + R9606 + R9602 < 1) && (R75 + R10056 + R10051 != 0 || R68 + R9608 + R9604 + -1*R10057 + -1*R10052 - R76 = 0 || R68 + R9608 + R9604 < 1) && (R10059 != 0 || R10060 = R10076 || (R20 = 0 && R10076 = 0)) && (R10061 != 0 || R10062 = R10076 || (R20 = 0 && R10076 = 0)) && (R10063 != 0 || R10064 = R10076 || (R20 = 0 && R10076 = 0)) && (R10065 != 0 || R10066 = R10076 || (R20 = 0 && R10076 = 0)) && (R10067 != 0 || R10068 = R10076 || (R20 = 0 && R10076 = 0)) && (R10069 != 0 || R10070 = R10076 || (R20 = 0 && R10076 = 0)) && (R10071 != 0 || R10072 = R10076 || (R20 = 0 && R10076 = 0)) && (R10073 != 0 || R10074 = R10076 || (R20 = 0 && R10076 = 0)) && (R10077 != 0 || R10076 = R10078 || (R20 = 0 && R10076 = 0)) && (R21 = 0 || (R10097 = 0 && R10098 = 0)) && (R21 = 0 || (R10101 = 0 && R10102 = 0)) && (R21 = 0 || (R10103 = 0 && R10104 = 0)) && (R21 = 0 || (R10107 = 0 && R10108 = 0)) && (R22 = 0 || (R10079 = 0 && R10080 = 0)) && (R22 = 0 || (R10081 = 0 && R10082 = 0)) && (R22 = 0 || (R10083 = 0 && R10084 = 0)) && (R22 = 0 || (R10085 = 0 && R10086 = 0)) && (R22 = 0 || (R10087 = 0 && R10088 = 0)) && (R22 = 0 || (R10089 = 0 && R10090 = 0)) && (R22 = 0 || (R10091 = 0 && R10092 = 0)) && (R22 = 0 || (R10093 = 0 && R10094 = 0)) && (R22 = 0 || (R10095 = 0 && R10096 = 0)) && (R53 + R94 + R91 = 0 || R66 + R9606 + R9602 < 1) && (R59 + R6808 + R6805 = 0 || R66 + R9606 + R9602 < 1) && (R73 + R10054 + R10049 = 0 || R66 + R9606 + R9602 < 1) && (R75 + R10056 + R10051 = 0 || R68 + R9608 + R9604 < 1) && (R10059 = 0 || (R20 = 0 && R10076 = 0)) && (R10061 = 0 || (R20 = 0 && R10076 = 0)) && (R10063 = 0 || (R20 = 0 && R10076 = 0)) && (R10065 = 0 || (R20 = 0 && R10076 = 0)) && (R10067 = 0 || (R20 = 0 && R10076 = 0)) && (R10069 = 0 || (R20 = 0 && R10076 = 0)) && (R10071 = 0 || (R20 = 0 && R10076 = 0)) && (R10073 = 0 || (R20 = 0 && R10076 = 0)) && (R10077 = 0 || (R20 = 0 && R10076 = 0));
// End of Parikh automata intersection problem
