// Parikh automata intersection problem, generated by OSTRICH+
counter int R10159, R10160, R10161, R10162, R10163, R10164, R12, R12397, R12398, R12399, R12400, R12401, R12402, R12403, R12404, R12845, R12846, R12847, R12848, R12849, R12850, R12851, R12852, R12853, R12854, R12855, R12856, R12857, R12858, R12859, R12860, R12861, R12862, R12863, R12864, R12865, R12866, R12867, R12868, R12869, R12870, R12871, R12872, R12873, R12874, R12875, R12876, R12877, R12878, R12879, R12880, R12881, R12882, R12883, R12884, R12885, R12886, R12887, R12888, R12889, R12890, R12891, R12892, R12893, R12894, R12895, R12896, R12897, R12898, R12899, R12900, R12901, R12902, R12903, R12904, R12905, R12906, R12907, R12908, R12909, R12910, R12911, R12912, R12913, R12914, R12915, R12916, R12917, R12918, R12919, R12920, R12921, R12922, R12923, R12924, R12925, R12926, R12927, R12928, R12929, R12930, R12931, R12932, R12933, R12934, R12935, R12936, R12937, R12938, R12939, R12940, R12941, R12942, R12943, R12944, R12945, R12946, R12947, R12948, R12949, R12950, R12951, R12952, R12953, R12954, R15, R16, R2, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R4, R45, R47, R49, R5, R50, R53, R54, R55, R59, R60, R61, R65, R66, R67, R68, R73, R74, R75, R76, R77, R83, R84, R85, R86, R87, R88, R89, R90, R91, R92, R93, R94, R95, R96;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [70, 70];
  s0 -> s0 [71, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [70, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R15 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 69];
  s0 -> s0 [0, 65535] { R16 += 1 };
  s0 -> s2 [70, 70];
  s0 -> s1 [71, 65535];
  s1 -> s1 [0, 69];
  s1 -> s2 [70, 70];
  s1 -> s1 [71, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R24 += 1 };
  s0 -> s0 [0, 65535] { R23 += 1, R24 += 1 };
  s0 -> s2 [9, 13] { R24 += 1 };
  s0 -> s1 [14, 31] { R24 += 1 };
  s0 -> s2 [32, 32] { R24 += 1 };
  s0 -> s1 [33, 65535] { R24 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R24 += 1 };
  s2 -> s1 [0, 65535] { R24 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R25 += 1, R26 += 1 };
  s1 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R28 += 1 };
  s0 -> s0 [0, 65535] { R27 += 1, R28 += 1 };
  s0 -> s2 [9, 13] { R28 += 1 };
  s0 -> s1 [14, 31] { R28 += 1 };
  s0 -> s2 [32, 32] { R28 += 1 };
  s0 -> s1 [33, 65535] { R28 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R28 += 1 };
  s2 -> s1 [0, 65535] { R28 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R29 += 1, R30 += 1 };
  s1 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R12876 += 1, R22 += 1 };
  s0 -> s0 [0, 65535] { R12875 += 1, R12876 += 1 };
  s1 -> s1 [0, 65535] { R12876 += 1, R22 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 69] { R12878 += 1 };
  s0 -> s0 [0, 65535] { R12877 += 1, R12878 += 1 };
  s0 -> s2 [70, 70] { R12878 += 1 };
  s0 -> s3 [70, 70] { R12878 += 1 };
  s0 -> s1 [76, 65535] { R12878 += 1 };
  s1 -> s1 [0, 69] { R12878 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R12878 += 1 };
  s1 -> s3 [70, 70] { R12878 += 1 };
  s1 -> s1 [76, 65535] { R12878 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 70] { R12878 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [76, 65535] { R12878 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 69] { R12880 += 1, R45 += 1 };
  s0 -> s0 [0, 65535] { R12879 += 1, R12880 += 1 };
  s0 -> s2 [70, 70] { R12880 += 1, R45 += 1 };
  s0 -> s3 [70, 70] { R12880 += 1, R45 += 1 };
  s0 -> s1 [71, 65535] { R12880 += 1, R45 += 1 };
  s1 -> s1 [0, 69] { R12880 += 1, R45 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R12880 += 1, R45 += 1 };
  s1 -> s3 [70, 70] { R12880 += 1, R45 += 1 };
  s1 -> s1 [71, 65535] { R12880 += 1, R45 += 1 };
  s2 -> s2 [0, 65535] { R12880 += 1, R45 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 69] { R12882 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R12881 += 1, R12882 += 1 };
  s0 -> s2 [70, 70] { R12882 += 1, R47 += 1 };
  s0 -> s3 [70, 70] { R12882 += 1, R47 += 1 };
  s0 -> s1 [71, 65535] { R12882 += 1, R47 += 1 };
  s1 -> s1 [0, 69] { R12882 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R12882 += 1, R47 += 1 };
  s1 -> s3 [70, 70] { R12882 += 1, R47 += 1 };
  s1 -> s1 [71, 65535] { R12882 += 1, R47 += 1 };
  s2 -> s2 [0, 65535] { R12882 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 69] { R12884 += 1, R49 += 1, R50 += 1 };
  s0 -> s0 [0, 65535] { R12883 += 1, R12884 += 1 };
  s0 -> s2 [70, 70] { R12884 += 1, R49 += 1, R50 += 1 };
  s0 -> s3 [70, 70] { R12884 += 1, R49 += 1, R50 += 1 };
  s0 -> s1 [71, 65535] { R12884 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 69] { R12884 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R12884 += 1, R49 += 1, R50 += 1 };
  s1 -> s3 [70, 70] { R12884 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [71, 65535] { R12884 += 1, R49 += 1, R50 += 1 };
  s2 -> s2 [0, 65535] { R12884 += 1, R49 += 1, R50 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 69] { R12886 += 1, R53 += 1, R54 += 1 };
  s0 -> s0 [0, 65535] { R12885 += 1, R12886 += 1 };
  s0 -> s2 [70, 70] { R12886 += 1, R53 += 1, R54 += 1 };
  s0 -> s3 [70, 70] { R12886 += 1, R53 += 1, R54 += 1 };
  s0 -> s1 [71, 65535] { R12886 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 69] { R12886 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R12886 += 1, R53 += 1, R54 += 1 };
  s1 -> s3 [70, 70] { R12886 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [71, 65535] { R12886 += 1, R53 += 1, R54 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R12886 += 1, R53 += 1, R54 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 69] { R12888 += 1, R59 += 1, R60 += 1 };
  s0 -> s0 [0, 65535] { R12887 += 1, R12888 += 1 };
  s0 -> s2 [70, 70] { R12888 += 1, R59 += 1, R60 += 1 };
  s0 -> s3 [70, 70] { R12888 += 1, R59 += 1, R60 += 1 };
  s0 -> s1 [71, 65535] { R12888 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 69] { R12888 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R12888 += 1, R59 += 1, R60 += 1 };
  s1 -> s3 [70, 70] { R12888 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [71, 65535] { R12888 += 1, R59 += 1, R60 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R12888 += 1, R59 += 1, R60 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 69] { R12890 += 1, R65 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R12889 += 1, R12890 += 1 };
  s0 -> s2 [70, 70] { R12890 += 1, R65 += 1, R66 += 1 };
  s0 -> s3 [70, 70] { R12890 += 1, R65 += 1, R66 += 1 };
  s0 -> s1 [71, 65535] { R12890 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 69] { R12890 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R12890 += 1, R65 += 1, R66 += 1 };
  s1 -> s3 [70, 70] { R12890 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [71, 65535] { R12890 += 1, R65 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R12890 += 1, R65 += 1, R66 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 69] { R12892 += 1, R73 += 1, R74 += 1 };
  s0 -> s0 [0, 65535] { R12891 += 1, R12892 += 1 };
  s0 -> s2 [70, 70] { R12892 += 1, R73 += 1, R74 += 1 };
  s0 -> s3 [70, 70] { R12892 += 1, R73 += 1, R74 += 1 };
  s0 -> s1 [71, 65535] { R12892 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 69] { R12892 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R12892 += 1, R73 += 1, R74 += 1 };
  s1 -> s3 [70, 70] { R12892 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [71, 65535] { R12892 += 1, R73 += 1, R74 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R12892 += 1, R73 += 1, R74 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 69] { R12912 += 1 };
  s0 -> s0 [0, 65535] { R12911 += 1, R12912 += 1 };
  s0 -> s2 [70, 70] { R12912 += 1 };
  s0 -> s1 [71, 65535] { R12912 += 1 };
  s1 -> s1 [0, 69] { R12912 += 1 };
  s1 -> s2 [70, 70] { R12912 += 1 };
  s1 -> s1 [71, 65535] { R12912 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R12912 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R12913 += 1, R12914 += 1 };
  s0 -> s1 [0, 65535] { R12914 += 1, R2 += 1 };
  s1 -> s1 [0, 65535] { R12914 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 69] { R12916 += 1 };
  s0 -> s0 [0, 65535] { R12915 += 1, R12916 += 1 };
  s0 -> s2 [0, 65535] { R12916 += 1, R12 += 1 };
  s0 -> s3 [70, 70] { R12916 += 1 };
  s0 -> s1 [71, 65535] { R12916 += 1 };
  s1 -> s1 [0, 69] { R12916 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [70, 70] { R12916 += 1 };
  s1 -> s1 [71, 65535] { R12916 += 1 };
  s2 -> s1 [0, 69] { R12916 += 1 };
  s2 -> s2 [0, 65535] { R12916 += 1, R12 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [70, 70] { R12916 += 1 };
  s2 -> s1 [71, 65535] { R12916 += 1 };
  s3 -> s3 [0, 65535] { R12916 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 69] { R12918 += 1, R12856 += 1 };
  s0 -> s2 [0, 65535] { R12918 += 1, R12855 += 1, R12856 += 1 };
  s0 -> s0 [0, 65535] { R12917 += 1, R12918 += 1 };
  s0 -> s1 [71, 65535] { R12918 += 1, R12856 += 1 };
  s1 -> s1 [0, 69] { R12918 += 1, R12856 += 1 };
  s1 -> s1 [0, 65535] { R12918 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [71, 65535] { R12918 += 1, R12856 += 1 };
  s2 -> s1 [0, 69] { R12918 += 1, R12856 += 1 };
  s2 -> s2 [0, 65535] { R12918 += 1, R12855 += 1, R12856 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [71, 65535] { R12918 += 1, R12856 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R12920 += 1, R12858 += 1, R20 += 1 };
  s0 -> s0 [0, 65535] { R12919 += 1, R12920 += 1 };
  s0 -> s2 [0, 65535] { R12920 += 1, R12857 += 1, R12858 += 1 };
  s1 -> s1 [0, 65535] { R12920 += 1, R12858 += 1, R20 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R12920 += 1 };
  s2 -> s1 [0, 65535] { R12920 += 1, R12858 += 1, R20 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R12920 += 1, R12857 += 1, R12858 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R12920 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 70] { R12922 += 1, R12860 += 1 };
  s0 -> s2 [0, 65535] { R12922 += 1, R12859 += 1, R12860 += 1 };
  s0 -> s0 [0, 65535] { R12921 += 1, R12922 += 1 };
  s0 -> s1 [75, 65535] { R12922 += 1, R12860 += 1 };
  s1 -> s1 [0, 70] { R12922 += 1, R12860 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R12922 += 1 };
  s1 -> s1 [75, 65535] { R12922 += 1, R12860 += 1 };
  s2 -> s1 [0, 70] { R12922 += 1, R12860 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R12922 += 1, R12859 += 1, R12860 += 1 };
  s2 -> s1 [75, 65535] { R12922 += 1, R12860 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s0 [0, 65535] { R12923 += 1, R12924 += 1 };
  s0 -> s1 [0, 65535] { R12924 += 1, R12861 += 1, R12862 += 1 };
  s0 -> s2 [0, 65535] { R12924 += 1, R12862 += 1, R84 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R12924 += 1, R12861 += 1, R12862 += 1 };
  s1 -> s2 [0, 65535] { R12924 += 1, R12862 += 1, R84 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R12924 += 1 };
  s2 -> s2 [0, 65535] { R12924 += 1, R12862 += 1, R84 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R12924 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 74] { R12926 += 1, R12864 += 1 };
  s0 -> s2 [0, 65535] { R12926 += 1, R12864 += 1, R86 += 1 };
  s0 -> s0 [0, 65535] { R12925 += 1, R12926 += 1 };
  s0 -> s3 [0, 65535] { R12926 += 1, R12863 += 1, R12864 += 1 };
  s0 -> s1 [76, 65535] { R12926 += 1, R12864 += 1 };
  s1 -> s1 [0, 74] { R12926 += 1, R12864 += 1 };
  s1 -> s1 [0, 65535] { R12926 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [76, 65535] { R12926 += 1, R12864 += 1 };
  s2 -> s1 [0, 74] { R12926 += 1, R12864 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R12926 += 1, R12864 += 1, R86 += 1 };
  s2 -> s5 [0, 65535] { R12926 += 1 };
  s2 -> s1 [76, 65535] { R12926 += 1, R12864 += 1 };
  s3 -> s1 [0, 74] { R12926 += 1, R12864 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R12926 += 1, R12864 += 1, R86 += 1 };
  s3 -> s3 [0, 65535] { R12926 += 1, R12863 += 1, R12864 += 1 };
  s3 -> s1 [76, 65535] { R12926 += 1, R12864 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R12926 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 65535] { R12928 += 1, R12866 += 1 };
  s0 -> s2 [0, 65535] { R12928 += 1, R12865 += 1, R12866 += 1 };
  s0 -> s3 [0, 65535] { R12928 += 1, R12866 += 1, R90 += 1 };
  s0 -> s0 [0, 65535] { R12927 += 1, R12928 += 1 };
  s1 -> s1 [0, 65535] { R12928 += 1, R12866 += 1 };
  s1 -> s4 [0, 65535] { R12928 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R12928 += 1, R12866 += 1 };
  s2 -> s2 [0, 65535] { R12928 += 1, R12865 += 1, R12866 += 1 };
  s2 -> s3 [0, 65535] { R12928 += 1, R12866 += 1, R90 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s1 [0, 65535] { R12928 += 1, R12866 += 1 };
  s3 -> s4 [0, 65535] { R12928 += 1 };
  s3 -> s3 [0, 65535] { R12928 += 1, R12866 += 1, R90 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R12928 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R12930 += 1, R12868 += 1, R95 += 1, R96 += 1 };
  s0 -> s2 [0, 65535] { R12930 += 1, R12868 += 1, R94 += 1, R95 += 1 };
  s0 -> s3 [0, 65535] { R12930 += 1, R12867 += 1, R12868 += 1 };
  s0 -> s0 [0, 65535] { R12929 += 1, R12930 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R12930 += 1 };
  s1 -> s1 [0, 65535] { R12930 += 1, R12868 += 1, R95 += 1, R96 += 1 };
  s1 -> s6 [0, 65535] { R12930 += 1, R12868 += 1 };
  s2 -> s5 [0, 65535] { R12930 += 1 };
  s2 -> s1 [0, 65535] { R12930 += 1, R12868 += 1, R95 += 1, R96 += 1 };
  s2 -> s2 [0, 65535] { R12930 += 1, R12868 += 1, R94 += 1, R95 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R12930 += 1, R12868 += 1, R95 += 1, R96 += 1 };
  s3 -> s2 [0, 65535] { R12930 += 1, R12868 += 1, R94 += 1, R95 += 1 };
  s3 -> s3 [0, 65535] { R12930 += 1, R12867 += 1, R12868 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R12930 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R12930 += 1 };
  s6 -> s6 [0, 65535] { R12930 += 1, R12868 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 65535] { R12932 += 1, R12869 += 1, R12870 += 1 };
  s0 -> s0 [0, 65535] { R12931 += 1, R12932 += 1 };
  s0 -> s2 [0, 65535] { R12932 += 1, R12870 += 1 };
  s1 -> s1 [0, 65535] { R12932 += 1, R12869 += 1, R12870 += 1 };
  s1 -> s2 [0, 65535] { R12932 += 1, R12870 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R12932 += 1 };
  s2 -> s2 [0, 65535] { R12932 += 1, R12870 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R12932 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 74] { R12934 += 1, R12872 += 1, R12402 += 1, R12404 += 1 };
  s0 -> s2 [0, 65535] { R12934 += 1, R12871 += 1, R12872 += 1 };
  s0 -> s0 [0, 65535] { R12933 += 1, R12934 += 1 };
  s0 -> s3 [75, 75] { R12934 += 1, R12872 += 1, R12402 += 1, R12404 += 1 };
  s0 -> s1 [76, 65535] { R12934 += 1, R12872 += 1, R12402 += 1, R12404 += 1 };
  s1 -> s1 [0, 74] { R12934 += 1, R12872 += 1, R12402 += 1, R12404 += 1 };
  s1 -> s3 [75, 75] { R12934 += 1, R12872 += 1, R12402 += 1, R12404 += 1 };
  s1 -> s1 [76, 65535] { R12934 += 1, R12872 += 1, R12402 += 1, R12404 += 1 };
  s2 -> s1 [0, 74] { R12934 += 1, R12872 += 1, R12402 += 1, R12404 += 1 };
  s2 -> s2 [0, 65535] { R12934 += 1, R12871 += 1, R12872 += 1 };
  s2 -> s3 [75, 75] { R12934 += 1, R12872 += 1, R12402 += 1, R12404 += 1 };
  s2 -> s1 [76, 65535] { R12934 += 1, R12872 += 1, R12402 += 1, R12404 += 1 };
  s3 -> s4 [0, 65535] { R12934 += 1, R12872 += 1, R12402 += 1 };
  s3 -> s5 [0, 65535] { R12934 += 1, R12872 += 1 };
  s3 -> s6 [0, 65535] { R12934 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s3 [0, 65535] { R12934 += 1, R12872 += 1, R12402 += 1, R12404 += 1 };
  s4 -> s4 [0, 65535] { R12934 += 1, R12872 += 1, R12402 += 1 };
  s4 -> s5 [0, 65535] { R12934 += 1, R12872 += 1 };
  s4 -> s6 [0, 65535] { R12934 += 1 };
  s4 -> s7 [0, 65535];
  s5 -> s5 [0, 65535] { R12934 += 1, R12872 += 1 };
  s5 -> s6 [0, 65535] { R12934 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s6 [0, 65535] { R12934 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s3, s4, s5, s6, s7;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 65535] { R12936 += 1, R12874 += 1, R12851 += 1, R12853 += 1, R12854 += 1 };
  s0 -> s2 [0, 65535] { R12936 += 1, R12874 += 1 };
  s0 -> s3 [0, 65535] { R12936 += 1, R12874 += 1, R12851 += 1, R12852 += 1, R12853 += 1 };
  s0 -> s0 [0, 65535] { R12935 += 1, R12936 += 1 };
  s0 -> s4 [0, 65535] { R12936 += 1, R12873 += 1, R12874 += 1 };
  s1 -> s1 [0, 65535] { R12936 += 1, R12874 += 1, R12851 += 1, R12853 += 1, R12854 += 1 };
  s1 -> s2 [0, 65535] { R12936 += 1, R12874 += 1 };
  s1 -> s7 [0, 65535] { R12936 += 1, R12874 += 1, R12851 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R12936 += 1 };
  s2 -> s2 [0, 65535] { R12936 += 1, R12874 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R12936 += 1 };
  s3 -> s1 [0, 65535] { R12936 += 1, R12874 += 1, R12851 += 1, R12853 += 1, R12854 += 1 };
  s3 -> s2 [0, 65535] { R12936 += 1, R12874 += 1 };
  s3 -> s3 [0, 65535] { R12936 += 1, R12874 += 1, R12851 += 1, R12852 += 1, R12853 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R12936 += 1 };
  s4 -> s1 [0, 65535] { R12936 += 1, R12874 += 1, R12851 += 1, R12853 += 1, R12854 += 1 };
  s4 -> s2 [0, 65535] { R12936 += 1, R12874 += 1 };
  s4 -> s3 [0, 65535] { R12936 += 1, R12874 += 1, R12851 += 1, R12852 += 1, R12853 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R12936 += 1, R12873 += 1, R12874 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R12936 += 1 };
  s7 -> s2 [0, 65535] { R12936 += 1, R12874 += 1 };
  s7 -> s7 [0, 65535] { R12936 += 1, R12874 += 1, R12851 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R12936 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R12938 += 1, R12893 += 1, R12894 += 1 };
  s0 -> s0 [0, 65535] { R12937 += 1, R12938 += 1 };
  s0 -> s2 [0, 65535] { R12938 += 1, R12894 += 1, R21 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R12938 += 1, R12893 += 1, R12894 += 1 };
  s1 -> s2 [0, 65535] { R12938 += 1, R12894 += 1, R21 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R12938 += 1 };
  s2 -> s2 [0, 65535] { R12938 += 1, R12894 += 1, R21 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R12938 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 69] { R12940 += 1, R12896 += 1 };
  s0 -> s0 [0, 65535] { R12939 += 1, R12940 += 1 };
  s0 -> s2 [0, 65535] { R12940 += 1, R12895 += 1, R12896 += 1 };
  s0 -> s3 [70, 70] { R12940 += 1, R12896 += 1 };
  s0 -> s4 [70, 70] { R12940 += 1, R12896 += 1 };
  s0 -> s5 [75, 75] { R12940 += 1, R12896 += 1 };
  s0 -> s1 [76, 65535] { R12940 += 1, R12896 += 1 };
  s1 -> s1 [0, 69] { R12940 += 1, R12896 += 1 };
  s1 -> s3 [70, 70] { R12940 += 1, R12896 += 1 };
  s1 -> s4 [70, 70] { R12940 += 1, R12896 += 1 };
  s1 -> s5 [75, 75] { R12940 += 1, R12896 += 1 };
  s1 -> s1 [76, 65535] { R12940 += 1, R12896 += 1 };
  s2 -> s1 [0, 69] { R12940 += 1, R12896 += 1 };
  s2 -> s2 [0, 65535] { R12940 += 1, R12895 += 1, R12896 += 1 };
  s2 -> s3 [70, 70] { R12940 += 1, R12896 += 1 };
  s2 -> s4 [70, 70] { R12940 += 1, R12896 += 1 };
  s2 -> s5 [75, 75] { R12940 += 1, R12896 += 1 };
  s2 -> s1 [76, 65535] { R12940 += 1, R12896 += 1 };
  s4 -> s4 [0, 70] { R12940 += 1, R12896 += 1 };
  s4 -> s8 [75, 75] { R12940 += 1, R12896 += 1 };
  s4 -> s4 [76, 65535] { R12940 += 1, R12896 += 1 };
  s5 -> s5 [0, 69] { R12940 += 1, R12896 += 1 };
  s5 -> s5 [0, 65535] { R12940 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [70, 70] { R12940 += 1, R12896 += 1 };
  s5 -> s8 [70, 70] { R12940 += 1, R12896 += 1 };
  s5 -> s5 [75, 65535] { R12940 += 1, R12896 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R12940 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 70] { R12940 += 1, R12896 += 1 };
  s8 -> s8 [0, 65535] { R12940 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [75, 65535] { R12940 += 1, R12896 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 69] { R12942 += 1, R12898 += 1, R83 += 1 };
  s0 -> s0 [0, 65535] { R12941 += 1, R12942 += 1 };
  s0 -> s2 [0, 65535] { R12942 += 1, R12897 += 1, R12898 += 1 };
  s0 -> s3 [70, 70] { R12942 += 1, R12898 += 1, R83 += 1 };
  s0 -> s4 [70, 70] { R12942 += 1, R12898 += 1, R83 += 1 };
  s0 -> s1 [71, 65535] { R12942 += 1, R12898 += 1, R83 += 1 };
  s1 -> s1 [0, 69] { R12942 += 1, R12898 += 1, R83 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R12942 += 1 };
  s1 -> s3 [70, 70] { R12942 += 1, R12898 += 1, R83 += 1 };
  s1 -> s4 [70, 70] { R12942 += 1, R12898 += 1, R83 += 1 };
  s1 -> s1 [71, 65535] { R12942 += 1, R12898 += 1, R83 += 1 };
  s2 -> s1 [0, 69] { R12942 += 1, R12898 += 1, R83 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R12942 += 1, R12897 += 1, R12898 += 1 };
  s2 -> s3 [70, 70] { R12942 += 1, R12898 += 1, R83 += 1 };
  s2 -> s4 [70, 70] { R12942 += 1, R12898 += 1, R83 += 1 };
  s2 -> s1 [71, 65535] { R12942 += 1, R12898 += 1, R83 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R12942 += 1 };
  s4 -> s5 [0, 65535] { R12942 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R12942 += 1, R12898 += 1, R83 += 1 };
  s5 -> s5 [0, 65535] { R12942 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 69] { R12944 += 1, R12900 += 1, R85 += 1 };
  s0 -> s2 [0, 65535] { R12944 += 1, R12899 += 1, R12900 += 1 };
  s0 -> s0 [0, 65535] { R12943 += 1, R12944 += 1 };
  s0 -> s3 [70, 70] { R12944 += 1, R12900 += 1, R85 += 1 };
  s0 -> s4 [70, 70] { R12944 += 1, R12900 += 1, R85 += 1 };
  s0 -> s1 [71, 65535] { R12944 += 1, R12900 += 1, R85 += 1 };
  s1 -> s1 [0, 69] { R12944 += 1, R12900 += 1, R85 += 1 };
  s1 -> s1 [0, 65535] { R12944 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [70, 70] { R12944 += 1, R12900 += 1, R85 += 1 };
  s1 -> s4 [70, 70] { R12944 += 1, R12900 += 1, R85 += 1 };
  s1 -> s1 [71, 65535] { R12944 += 1, R12900 += 1, R85 += 1 };
  s2 -> s1 [0, 69] { R12944 += 1, R12900 += 1, R85 += 1 };
  s2 -> s2 [0, 65535] { R12944 += 1, R12899 += 1, R12900 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [70, 70] { R12944 += 1, R12900 += 1, R85 += 1 };
  s2 -> s4 [70, 70] { R12944 += 1, R12900 += 1, R85 += 1 };
  s2 -> s1 [71, 65535] { R12944 += 1, R12900 += 1, R85 += 1 };
  s3 -> s3 [0, 65535] { R12944 += 1, R12900 += 1, R85 += 1 };
  s3 -> s6 [0, 65535] { R12944 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R12944 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R12944 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 69] { R12946 += 1, R12902 += 1, R87 += 1, R88 += 1 };
  s0 -> s2 [0, 69] { R12946 += 1, R12902 += 1, R88 += 1 };
  s0 -> s3 [0, 65535] { R12946 += 1, R12901 += 1, R12902 += 1 };
  s0 -> s0 [0, 65535] { R12945 += 1, R12946 += 1 };
  s0 -> s4 [70, 70] { R12946 += 1, R12902 += 1, R87 += 1, R88 += 1 };
  s0 -> s5 [70, 70] { R12946 += 1, R12902 += 1, R87 += 1, R88 += 1 };
  s0 -> s6 [70, 70] { R12946 += 1, R12902 += 1, R88 += 1 };
  s0 -> s7 [70, 70] { R12946 += 1, R12902 += 1, R88 += 1 };
  s0 -> s2 [71, 74] { R12946 += 1, R12902 += 1, R88 += 1 };
  s0 -> s1 [71, 65535] { R12946 += 1, R12902 += 1, R87 += 1, R88 += 1 };
  s0 -> s8 [75, 75] { R12946 += 1, R12902 += 1, R88 += 1 };
  s0 -> s2 [76, 65535] { R12946 += 1, R12902 += 1, R88 += 1 };
  s1 -> s1 [0, 69] { R12946 += 1, R12902 += 1, R87 += 1, R88 += 1 };
  s1 -> s2 [0, 69] { R12946 += 1, R12902 += 1, R88 += 1 };
  s1 -> s4 [70, 70] { R12946 += 1, R12902 += 1, R87 += 1, R88 += 1 };
  s1 -> s5 [70, 70] { R12946 += 1, R12902 += 1, R87 += 1, R88 += 1 };
  s1 -> s6 [70, 70] { R12946 += 1, R12902 += 1, R88 += 1 };
  s1 -> s7 [70, 70] { R12946 += 1, R12902 += 1, R88 += 1 };
  s1 -> s2 [71, 74] { R12946 += 1, R12902 += 1, R88 += 1 };
  s1 -> s1 [71, 65535] { R12946 += 1, R12902 += 1, R87 += 1, R88 += 1 };
  s1 -> s8 [75, 75] { R12946 += 1, R12902 += 1, R88 += 1 };
  s1 -> s2 [76, 65535] { R12946 += 1, R12902 += 1, R88 += 1 };
  s2 -> s2 [0, 69] { R12946 += 1, R12902 += 1, R88 += 1 };
  s2 -> s6 [70, 70] { R12946 += 1, R12902 += 1, R88 += 1 };
  s2 -> s7 [70, 70] { R12946 += 1, R12902 += 1, R88 += 1 };
  s2 -> s2 [71, 74] { R12946 += 1, R12902 += 1, R88 += 1 };
  s2 -> s8 [75, 75] { R12946 += 1, R12902 += 1, R88 += 1 };
  s2 -> s2 [76, 65535] { R12946 += 1, R12902 += 1, R88 += 1 };
  s3 -> s1 [0, 69] { R12946 += 1, R12902 += 1, R87 += 1, R88 += 1 };
  s3 -> s2 [0, 69] { R12946 += 1, R12902 += 1, R88 += 1 };
  s3 -> s3 [0, 65535] { R12946 += 1, R12901 += 1, R12902 += 1 };
  s3 -> s4 [70, 70] { R12946 += 1, R12902 += 1, R87 += 1, R88 += 1 };
  s3 -> s5 [70, 70] { R12946 += 1, R12902 += 1, R87 += 1, R88 += 1 };
  s3 -> s6 [70, 70] { R12946 += 1, R12902 += 1, R88 += 1 };
  s3 -> s7 [70, 70] { R12946 += 1, R12902 += 1, R88 += 1 };
  s3 -> s2 [71, 74] { R12946 += 1, R12902 += 1, R88 += 1 };
  s3 -> s1 [71, 65535] { R12946 += 1, R12902 += 1, R87 += 1, R88 += 1 };
  s3 -> s8 [75, 75] { R12946 += 1, R12902 += 1, R88 += 1 };
  s3 -> s2 [76, 65535] { R12946 += 1, R12902 += 1, R88 += 1 };
  s5 -> s6 [0, 74] { R12946 += 1, R12902 += 1, R88 += 1 };
  s5 -> s5 [0, 65535] { R12946 += 1, R12902 += 1, R87 += 1, R88 += 1 };
  s5 -> s10 [75, 75] { R12946 += 1, R12902 += 1, R88 += 1 };
  s5 -> s6 [76, 65535] { R12946 += 1, R12902 += 1, R88 += 1 };
  s6 -> s6 [0, 74] { R12946 += 1, R12902 += 1, R88 += 1 };
  s6 -> s10 [75, 75] { R12946 += 1, R12902 += 1, R88 += 1 };
  s6 -> s6 [76, 65535] { R12946 += 1, R12902 += 1, R88 += 1 };
  s8 -> s8 [0, 69] { R12946 += 1, R12902 += 1, R88 += 1 };
  s8 -> s8 [0, 65535] { R12946 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [70, 70] { R12946 += 1, R12902 += 1, R88 += 1 };
  s8 -> s11 [70, 70] { R12946 += 1, R12902 += 1, R88 += 1 };
  s8 -> s8 [71, 65535] { R12946 += 1, R12902 += 1, R88 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R12946 += 1, R12902 += 1, R88 += 1 };
  s10 -> s12 [0, 65535] { R12946 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R12946 += 1 };
  s12 -> s12 [0, 65535] { R12946 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 69] { R12948 += 1, R12904 += 1, R91 += 1, R92 += 1 };
  s0 -> s0 [0, 65535] { R12947 += 1, R12948 += 1 };
  s0 -> s2 [0, 65535] { R12948 += 1, R12903 += 1, R12904 += 1 };
  s0 -> s3 [70, 70] { R12948 += 1, R12904 += 1, R91 += 1, R92 += 1 };
  s0 -> s4 [70, 70] { R12948 += 1, R12904 += 1, R91 += 1, R92 += 1 };
  s0 -> s1 [71, 65535] { R12948 += 1, R12904 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 69] { R12948 += 1, R12904 += 1, R91 += 1, R92 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R12948 += 1 };
  s1 -> s3 [70, 70] { R12948 += 1, R12904 += 1, R91 += 1, R92 += 1 };
  s1 -> s4 [70, 70] { R12948 += 1, R12904 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [71, 65535] { R12948 += 1, R12904 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [0, 69] { R12948 += 1, R12904 += 1, R91 += 1, R92 += 1 };
  s2 -> s2 [0, 65535] { R12948 += 1, R12903 += 1, R12904 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [70, 70] { R12948 += 1, R12904 += 1, R91 += 1, R92 += 1 };
  s2 -> s4 [70, 70] { R12948 += 1, R12904 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [71, 65535] { R12948 += 1, R12904 += 1, R91 += 1, R92 += 1 };
  s3 -> s6 [0, 65535] { R12948 += 1 };
  s3 -> s3 [0, 65535] { R12948 += 1, R12904 += 1, R91 += 1, R92 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R12948 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R12948 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 69] { R12950 += 1, R12906 += 1, R10159 += 1, R10160 += 1 };
  s0 -> s2 [0, 69] { R12950 += 1, R12906 += 1, R10160 += 1, R10161 += 1 };
  s0 -> s0 [0, 65535] { R12949 += 1, R12950 += 1 };
  s0 -> s3 [0, 65535] { R12950 += 1, R12905 += 1, R12906 += 1 };
  s0 -> s4 [70, 70] { R12950 += 1, R12906 += 1, R10160 += 1, R10161 += 1 };
  s0 -> s5 [70, 70] { R12950 += 1, R12906 += 1, R10159 += 1, R10160 += 1 };
  s0 -> s6 [70, 70] { R12950 += 1, R12906 += 1, R10160 += 1, R10161 += 1 };
  s0 -> s7 [70, 70] { R12950 += 1, R12906 += 1, R10159 += 1, R10160 += 1 };
  s0 -> s1 [71, 65535] { R12950 += 1, R12906 += 1, R10159 += 1, R10160 += 1 };
  s0 -> s2 [71, 65535] { R12950 += 1, R12906 += 1, R10160 += 1, R10161 += 1 };
  s1 -> s1 [0, 69] { R12950 += 1, R12906 += 1, R10159 += 1, R10160 += 1 };
  s1 -> s2 [0, 69] { R12950 += 1, R12906 += 1, R10160 += 1, R10161 += 1 };
  s1 -> s4 [70, 70] { R12950 += 1, R12906 += 1, R10160 += 1, R10161 += 1 };
  s1 -> s5 [70, 70] { R12950 += 1, R12906 += 1, R10159 += 1, R10160 += 1 };
  s1 -> s6 [70, 70] { R12950 += 1, R12906 += 1, R10160 += 1, R10161 += 1 };
  s1 -> s7 [70, 70] { R12950 += 1, R12906 += 1, R10159 += 1, R10160 += 1 };
  s1 -> s1 [71, 65535] { R12950 += 1, R12906 += 1, R10159 += 1, R10160 += 1 };
  s1 -> s2 [71, 65535] { R12950 += 1, R12906 += 1, R10160 += 1, R10161 += 1 };
  s2 -> s11 [0, 69] { R12950 += 1, R12906 += 1 };
  s2 -> s2 [0, 69] { R12950 += 1, R12906 += 1, R10160 += 1, R10161 += 1 };
  s2 -> s4 [70, 70] { R12950 += 1, R12906 += 1, R10160 += 1, R10161 += 1 };
  s2 -> s8 [70, 70] { R12950 += 1, R12906 += 1 };
  s2 -> s6 [70, 70] { R12950 += 1, R12906 += 1, R10160 += 1, R10161 += 1 };
  s2 -> s12 [70, 70] { R12950 += 1, R12906 += 1 };
  s2 -> s11 [71, 65535] { R12950 += 1, R12906 += 1 };
  s2 -> s2 [71, 65535] { R12950 += 1, R12906 += 1, R10160 += 1, R10161 += 1 };
  s3 -> s1 [0, 69] { R12950 += 1, R12906 += 1, R10159 += 1, R10160 += 1 };
  s3 -> s2 [0, 69] { R12950 += 1, R12906 += 1, R10160 += 1, R10161 += 1 };
  s3 -> s3 [0, 65535] { R12950 += 1, R12905 += 1, R12906 += 1 };
  s3 -> s4 [70, 70] { R12950 += 1, R12906 += 1, R10160 += 1, R10161 += 1 };
  s3 -> s5 [70, 70] { R12950 += 1, R12906 += 1, R10159 += 1, R10160 += 1 };
  s3 -> s6 [70, 70] { R12950 += 1, R12906 += 1, R10160 += 1, R10161 += 1 };
  s3 -> s7 [70, 70] { R12950 += 1, R12906 += 1, R10159 += 1, R10160 += 1 };
  s3 -> s1 [71, 65535] { R12950 += 1, R12906 += 1, R10159 += 1, R10160 += 1 };
  s3 -> s2 [71, 65535] { R12950 += 1, R12906 += 1, R10160 += 1, R10161 += 1 };
  s4 -> s4 [0, 65535] { R12950 += 1, R12906 += 1, R10160 += 1, R10161 += 1 };
  s4 -> s8 [0, 65535] { R12950 += 1, R12906 += 1 };
  s7 -> s4 [0, 65535] { R12950 += 1, R12906 += 1, R10160 += 1, R10161 += 1 };
  s7 -> s7 [0, 65535] { R12950 += 1, R12906 += 1, R10159 += 1, R10160 += 1 };
  s8 -> s8 [0, 65535] { R12950 += 1, R12906 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [0, 65535] { R12950 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R12950 += 1 };
  s11 -> s11 [0, 69] { R12950 += 1, R12906 += 1 };
  s11 -> s11 [0, 65535] { R12950 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s8 [70, 70] { R12950 += 1, R12906 += 1 };
  s11 -> s12 [70, 70] { R12950 += 1, R12906 += 1 };
  s11 -> s11 [71, 65535] { R12950 += 1, R12906 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R12950 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 69] { R12952 += 1, R12908 += 1, R12397 += 1, R12398 += 1 };
  s0 -> s2 [0, 69] { R12952 += 1, R12908 += 1, R12398 += 1, R12400 += 1 };
  s0 -> s3 [0, 69] { R12952 += 1, R12908 += 1, R12398 += 1, R12399 += 1, R12400 += 1 };
  s0 -> s4 [0, 65535] { R12952 += 1, R12907 += 1, R12908 += 1 };
  s0 -> s0 [0, 65535] { R12951 += 1, R12952 += 1 };
  s0 -> s5 [70, 70] { R12952 += 1, R12908 += 1, R12398 += 1, R12400 += 1 };
  s0 -> s6 [70, 70] { R12952 += 1, R12908 += 1, R12397 += 1, R12398 += 1 };
  s0 -> s7 [70, 70] { R12952 += 1, R12908 += 1, R12397 += 1, R12398 += 1 };
  s0 -> s8 [70, 70] { R12952 += 1, R12908 += 1, R12398 += 1, R12400 += 1 };
  s0 -> s9 [70, 70] { R12952 += 1, R12908 += 1, R12398 += 1, R12399 += 1, R12400 += 1 };
  s0 -> s10 [70, 70] { R12952 += 1, R12908 += 1, R12398 += 1, R12399 += 1, R12400 += 1 };
  s0 -> s2 [71, 74] { R12952 += 1, R12908 += 1, R12398 += 1, R12400 += 1 };
  s0 -> s1 [71, 65535] { R12952 += 1, R12908 += 1, R12397 += 1, R12398 += 1 };
  s0 -> s3 [71, 65535] { R12952 += 1, R12908 += 1, R12398 += 1, R12399 += 1, R12400 += 1 };
  s0 -> s2 [76, 65535] { R12952 += 1, R12908 += 1, R12398 += 1, R12400 += 1 };
  s1 -> s1 [0, 69] { R12952 += 1, R12908 += 1, R12397 += 1, R12398 += 1 };
  s1 -> s2 [0, 69] { R12952 += 1, R12908 += 1, R12398 += 1, R12400 += 1 };
  s1 -> s3 [0, 69] { R12952 += 1, R12908 += 1, R12398 += 1, R12399 += 1, R12400 += 1 };
  s1 -> s5 [70, 70] { R12952 += 1, R12908 += 1, R12398 += 1, R12400 += 1 };
  s1 -> s6 [70, 70] { R12952 += 1, R12908 += 1, R12397 += 1, R12398 += 1 };
  s1 -> s7 [70, 70] { R12952 += 1, R12908 += 1, R12397 += 1, R12398 += 1 };
  s1 -> s8 [70, 70] { R12952 += 1, R12908 += 1, R12398 += 1, R12400 += 1 };
  s1 -> s9 [70, 70] { R12952 += 1, R12908 += 1, R12398 += 1, R12399 += 1, R12400 += 1 };
  s1 -> s10 [70, 70] { R12952 += 1, R12908 += 1, R12398 += 1, R12399 += 1, R12400 += 1 };
  s1 -> s2 [71, 74] { R12952 += 1, R12908 += 1, R12398 += 1, R12400 += 1 };
  s1 -> s1 [71, 65535] { R12952 += 1, R12908 += 1, R12397 += 1, R12398 += 1 };
  s1 -> s3 [71, 65535] { R12952 += 1, R12908 += 1, R12398 += 1, R12399 += 1, R12400 += 1 };
  s1 -> s2 [76, 65535] { R12952 += 1, R12908 += 1, R12398 += 1, R12400 += 1 };
  s2 -> s2 [0, 69] { R12952 += 1, R12908 += 1, R12398 += 1, R12400 += 1 };
  s2 -> s2 [0, 65535] { R12952 += 1 };
  s2 -> s11 [0, 65535];
  s2 -> s5 [70, 70] { R12952 += 1, R12908 += 1, R12398 += 1, R12400 += 1 };
  s2 -> s8 [70, 70] { R12952 += 1, R12908 += 1, R12398 += 1, R12400 += 1 };
  s2 -> s2 [71, 74] { R12952 += 1, R12908 += 1, R12398 += 1, R12400 += 1 };
  s2 -> s2 [76, 65535] { R12952 += 1, R12908 += 1, R12398 += 1, R12400 += 1 };
  s3 -> s2 [0, 69] { R12952 += 1, R12908 += 1, R12398 += 1, R12400 += 1 };
  s3 -> s3 [0, 69] { R12952 += 1, R12908 += 1, R12398 += 1, R12399 += 1, R12400 += 1 };
  s3 -> s5 [70, 70] { R12952 += 1, R12908 += 1, R12398 += 1, R12400 += 1 };
  s3 -> s8 [70, 70] { R12952 += 1, R12908 += 1, R12398 += 1, R12400 += 1 };
  s3 -> s9 [70, 70] { R12952 += 1, R12908 += 1, R12398 += 1, R12399 += 1, R12400 += 1 };
  s3 -> s10 [70, 70] { R12952 += 1, R12908 += 1, R12398 += 1, R12399 += 1, R12400 += 1 };
  s3 -> s2 [71, 74] { R12952 += 1, R12908 += 1, R12398 += 1, R12400 += 1 };
  s3 -> s3 [71, 65535] { R12952 += 1, R12908 += 1, R12398 += 1, R12399 += 1, R12400 += 1 };
  s3 -> s2 [76, 65535] { R12952 += 1, R12908 += 1, R12398 += 1, R12400 += 1 };
  s4 -> s1 [0, 69] { R12952 += 1, R12908 += 1, R12397 += 1, R12398 += 1 };
  s4 -> s2 [0, 69] { R12952 += 1, R12908 += 1, R12398 += 1, R12400 += 1 };
  s4 -> s3 [0, 69] { R12952 += 1, R12908 += 1, R12398 += 1, R12399 += 1, R12400 += 1 };
  s4 -> s4 [0, 65535] { R12952 += 1, R12907 += 1, R12908 += 1 };
  s4 -> s5 [70, 70] { R12952 += 1, R12908 += 1, R12398 += 1, R12400 += 1 };
  s4 -> s6 [70, 70] { R12952 += 1, R12908 += 1, R12397 += 1, R12398 += 1 };
  s4 -> s7 [70, 70] { R12952 += 1, R12908 += 1, R12397 += 1, R12398 += 1 };
  s4 -> s8 [70, 70] { R12952 += 1, R12908 += 1, R12398 += 1, R12400 += 1 };
  s4 -> s9 [70, 70] { R12952 += 1, R12908 += 1, R12398 += 1, R12399 += 1, R12400 += 1 };
  s4 -> s10 [70, 70] { R12952 += 1, R12908 += 1, R12398 += 1, R12399 += 1, R12400 += 1 };
  s4 -> s2 [71, 74] { R12952 += 1, R12908 += 1, R12398 += 1, R12400 += 1 };
  s4 -> s1 [71, 65535] { R12952 += 1, R12908 += 1, R12397 += 1, R12398 += 1 };
  s4 -> s3 [71, 65535] { R12952 += 1, R12908 += 1, R12398 += 1, R12399 += 1, R12400 += 1 };
  s4 -> s2 [76, 65535] { R12952 += 1, R12908 += 1, R12398 += 1, R12400 += 1 };
  s5 -> s5 [0, 65535] { R12952 += 1 };
  s5 -> s11 [0, 65535];
  s6 -> s8 [0, 74] { R12952 += 1, R12908 += 1, R12398 += 1, R12400 += 1 };
  s6 -> s6 [0, 65535] { R12952 += 1, R12908 += 1, R12397 += 1, R12398 += 1 };
  s6 -> s9 [0, 65535] { R12952 += 1, R12908 += 1, R12398 += 1, R12399 += 1, R12400 += 1 };
  s6 -> s8 [76, 65535] { R12952 += 1, R12908 += 1, R12398 += 1, R12400 += 1 };
  s8 -> s8 [0, 74] { R12952 += 1, R12908 += 1, R12398 += 1, R12400 += 1 };
  s8 -> s8 [0, 65535] { R12952 += 1 };
  s8 -> s11 [0, 65535];
  s8 -> s8 [76, 65535] { R12952 += 1, R12908 += 1, R12398 += 1, R12400 += 1 };
  s9 -> s8 [0, 74] { R12952 += 1, R12908 += 1, R12398 += 1, R12400 += 1 };
  s9 -> s9 [0, 65535] { R12952 += 1, R12908 += 1, R12398 += 1, R12399 += 1, R12400 += 1 };
  s9 -> s8 [76, 65535] { R12952 += 1, R12908 += 1, R12398 += 1, R12400 += 1 };
  s11 -> s11 [0, 65535];
  accepting s2, s5, s8, s11;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 69] { R12954 += 1, R12910 += 1, R12845 += 1, R12846 += 1 };
  s0 -> s2 [0, 69] { R12954 += 1, R12910 += 1, R12846 += 1, R12847 += 1, R12848 += 1 };
  s0 -> s0 [0, 65535] { R12953 += 1, R12954 += 1 };
  s0 -> s3 [0, 65535] { R12954 += 1, R12909 += 1, R12910 += 1 };
  s0 -> s4 [70, 70] { R12954 += 1, R12910 += 1, R12846 += 1, R12847 += 1, R12848 += 1 };
  s0 -> s5 [70, 70] { R12954 += 1, R12910 += 1, R12845 += 1, R12846 += 1 };
  s0 -> s6 [70, 70] { R12954 += 1, R12910 += 1, R12846 += 1, R12847 += 1, R12848 += 1 };
  s0 -> s7 [70, 70] { R12954 += 1, R12910 += 1, R12845 += 1, R12846 += 1 };
  s0 -> s1 [71, 65535] { R12954 += 1, R12910 += 1, R12845 += 1, R12846 += 1 };
  s0 -> s2 [71, 65535] { R12954 += 1, R12910 += 1, R12846 += 1, R12847 += 1, R12848 += 1 };
  s1 -> s1 [0, 69] { R12954 += 1, R12910 += 1, R12845 += 1, R12846 += 1 };
  s1 -> s2 [0, 69] { R12954 += 1, R12910 += 1, R12846 += 1, R12847 += 1, R12848 += 1 };
  s1 -> s4 [70, 70] { R12954 += 1, R12910 += 1, R12846 += 1, R12847 += 1, R12848 += 1 };
  s1 -> s5 [70, 70] { R12954 += 1, R12910 += 1, R12845 += 1, R12846 += 1 };
  s1 -> s6 [70, 70] { R12954 += 1, R12910 += 1, R12846 += 1, R12847 += 1, R12848 += 1 };
  s1 -> s7 [70, 70] { R12954 += 1, R12910 += 1, R12845 += 1, R12846 += 1 };
  s1 -> s1 [71, 65535] { R12954 += 1, R12910 += 1, R12845 += 1, R12846 += 1 };
  s1 -> s2 [71, 65535] { R12954 += 1, R12910 += 1, R12846 += 1, R12847 += 1, R12848 += 1 };
  s2 -> s2 [0, 69] { R12954 += 1, R12910 += 1, R12846 += 1, R12847 += 1, R12848 += 1 };
  s2 -> s9 [0, 65535];
  s2 -> s2 [0, 65535] { R12954 += 1 };
  s2 -> s4 [70, 70] { R12954 += 1, R12910 += 1, R12846 += 1, R12847 += 1, R12848 += 1 };
  s2 -> s6 [70, 70] { R12954 += 1, R12910 += 1, R12846 += 1, R12847 += 1, R12848 += 1 };
  s2 -> s2 [71, 65535] { R12954 += 1, R12910 += 1, R12846 += 1, R12847 += 1, R12848 += 1 };
  s3 -> s1 [0, 69] { R12954 += 1, R12910 += 1, R12845 += 1, R12846 += 1 };
  s3 -> s2 [0, 69] { R12954 += 1, R12910 += 1, R12846 += 1, R12847 += 1, R12848 += 1 };
  s3 -> s3 [0, 65535] { R12954 += 1, R12909 += 1, R12910 += 1 };
  s3 -> s4 [70, 70] { R12954 += 1, R12910 += 1, R12846 += 1, R12847 += 1, R12848 += 1 };
  s3 -> s5 [70, 70] { R12954 += 1, R12910 += 1, R12845 += 1, R12846 += 1 };
  s3 -> s6 [70, 70] { R12954 += 1, R12910 += 1, R12846 += 1, R12847 += 1, R12848 += 1 };
  s3 -> s7 [70, 70] { R12954 += 1, R12910 += 1, R12845 += 1, R12846 += 1 };
  s3 -> s1 [71, 65535] { R12954 += 1, R12910 += 1, R12845 += 1, R12846 += 1 };
  s3 -> s2 [71, 65535] { R12954 += 1, R12910 += 1, R12846 += 1, R12847 += 1, R12848 += 1 };
  s4 -> s4 [0, 65535] { R12954 += 1 };
  s4 -> s9 [0, 65535];
  s6 -> s6 [0, 65535] { R12954 += 1, R12910 += 1, R12846 += 1, R12847 += 1, R12848 += 1 };
  s6 -> s8 [0, 65535] { R12954 += 1 };
  s6 -> s9 [0, 65535];
  s7 -> s6 [0, 65535] { R12954 += 1, R12910 += 1, R12846 += 1, R12847 += 1, R12848 += 1 };
  s7 -> s7 [0, 65535] { R12954 += 1, R12910 += 1, R12845 += 1, R12846 += 1 };
  s8 -> s8 [0, 65535] { R12954 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s4, s8, s2, s9, s6;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [102, 102];
  accepting s1;
};
};
constraint R2 = R12872 && R3 = R12954 && R23 - R12954 = -1 && R24 = R12954 && R25 - R12954 = -1 && R26 = R12954 && R27 = 0 && R28 = 1 && R29 = 0 && R30 = 1 && R45 + R84 + R83 + -1*R12402 + -1*R12398 - R66 = 0 && R49 + R89 + R87 = 0 && R50 + R90 + R88 + -1*R12402 + -1*R12398 - R66 = 0 && R55 + R96 + R93 + -1*R12404 + -1*R12400 - R68 = 0 && R65 + R12401 + R12397 = 0 && R67 + R12403 + R12399 = 0 && R12871 = 0 && R12895 = 0 && R12896 = 0 && R12901 = 0 && R12902 = 0 && R12905 = 0 && R12906 = 0 && R12907 = 0 && R12908 = 0 && R12909 = 0 && R12910 = 0 && R12911 = 0 && R12912 = R12954 && R12913 = 0 && R12914 = R12954 && R12915 = 0 && R12916 = R12954 && R12917 = 0 && R12918 = R12954 && R12919 = 0 && R12920 = R12954 && R12921 = 0 && R12922 = R12954 && R12923 = 0 && R12924 = R12954 && R12925 = 0 && R12926 = R12954 && R12927 = 0 && R12928 = R12954 && R12929 = 0 && R12930 = R12954 && R12931 = 0 && R12932 = R12954 && R12933 = 0 && R12934 = R12954 && R12935 = 0 && R12936 = R12954 && R12937 = 0 && R12938 = R12954 && R12939 = 0 && R12940 = R12954 && R12941 = 0 && R12942 = R12954 && R12943 = 0 && R12944 = R12954 && R12945 = 0 && R12946 = R12954 && R12947 = 0 && R12948 = R12954 && R12949 = 0 && R12950 = R12954 && R12951 = 0 && R12952 = R12954 && R12953 = 0 && R12 < 1 && R15 < 1 && R16 < 1 && R47 + R86 + R85 < 1 && R61 + R10164 + R10161 < 1 && -1*R12402 + -1*R12398 - R66 < 1 && -1*R12404 + -1*R12400 - R68 < 1 && -1 < R12872 && 0 < R12954 && (R53 + R94 + R91 != 0 || R54 + R95 + R92 + -1*R12402 + -1*R12398 - R66 = 0 || R66 + R12402 + R12398 < 1) && (R59 + R10162 + R10159 != 0 || R60 + R10163 + R10160 + -1*R12402 + -1*R12398 - R66 = 0 || R66 + R12402 + R12398 < 1) && (R66 + R12402 + R12398 != 0 || ((R53 + R94 + R91 != 0 || R54 + R95 + R92 = 0 || R68 + R12404 + R12400 < 1) && (R53 + R94 + R91 = 0 || R68 + R12404 + R12400 < 1))) && (R66 + R12402 + R12398 != 0 || ((R59 + R10162 + R10159 != 0 || R60 + R10163 + R10160 = 0 || R68 + R12404 + R12400 < 1) && (R59 + R10162 + R10159 = 0 || R68 + R12404 + R12400 < 1))) && (R66 + R12402 + R12398 != 0 || ((R73 + R12850 + R12845 != 0 || R74 + R12851 + R12846 = 0 || R68 + R12404 + R12400 < 1) && (R73 + R12850 + R12845 = 0 || R68 + R12404 + R12400 < 1))) && (R68 + R12404 + R12400 != 0 || R77 + R12854 + R12849 = 0 || (R75 + R12852 + R12847 = 0 && R76 + R12853 + R12848 = 0)) && (R73 + R12850 + R12845 != 0 || R66 + R12402 + R12398 + -1*R12851 + -1*R12846 - R74 = 0 || R66 + R12402 + R12398 < 1) && (R75 + R12852 + R12847 != 0 || R68 + R12404 + R12400 + -1*R12853 + -1*R12848 - R76 = 0 || R68 + R12404 + R12400 < 1) && (R12855 != 0 || R12856 = R12872 || (R20 = 0 && R12872 = 0)) && (R12857 != 0 || R12858 = R12872 || (R20 = 0 && R12872 = 0)) && (R12859 != 0 || R12860 = R12872 || (R20 = 0 && R12872 = 0)) && (R12861 != 0 || R12862 = R12872 || (R20 = 0 && R12872 = 0)) && (R12863 != 0 || R12864 = R12872 || (R20 = 0 && R12872 = 0)) && (R12865 != 0 || R12866 = R12872 || (R20 = 0 && R12872 = 0)) && (R12867 != 0 || R12868 = R12872 || (R20 = 0 && R12872 = 0)) && (R12869 != 0 || R12870 = R12872 || (R20 = 0 && R12872 = 0)) && (R12873 != 0 || R12872 = R12874 || (R20 = 0 && R12872 = 0)) && (R21 = 0 || (R12893 = 0 && R12894 = 0)) && (R21 = 0 || (R12897 = 0 && R12898 = 0)) && (R21 = 0 || (R12899 = 0 && R12900 = 0)) && (R21 = 0 || (R12903 = 0 && R12904 = 0)) && (R22 = 0 || (R12875 = 0 && R12876 = 0)) && (R22 = 0 || (R12877 = 0 && R12878 = 0)) && (R22 = 0 || (R12879 = 0 && R12880 = 0)) && (R22 = 0 || (R12881 = 0 && R12882 = 0)) && (R22 = 0 || (R12883 = 0 && R12884 = 0)) && (R22 = 0 || (R12885 = 0 && R12886 = 0)) && (R22 = 0 || (R12887 = 0 && R12888 = 0)) && (R22 = 0 || (R12889 = 0 && R12890 = 0)) && (R22 = 0 || (R12891 = 0 && R12892 = 0)) && (R53 + R94 + R91 = 0 || R66 + R12402 + R12398 < 1) && (R59 + R10162 + R10159 = 0 || R66 + R12402 + R12398 < 1) && (R73 + R12850 + R12845 = 0 || R66 + R12402 + R12398 < 1) && (R75 + R12852 + R12847 = 0 || R68 + R12404 + R12400 < 1) && (R12855 = 0 || (R20 = 0 && R12872 = 0)) && (R12857 = 0 || (R20 = 0 && R12872 = 0)) && (R12859 = 0 || (R20 = 0 && R12872 = 0)) && (R12861 = 0 || (R20 = 0 && R12872 = 0)) && (R12863 = 0 || (R20 = 0 && R12872 = 0)) && (R12865 = 0 || (R20 = 0 && R12872 = 0)) && (R12867 = 0 || (R20 = 0 && R12872 = 0)) && (R12869 = 0 || (R20 = 0 && R12872 = 0)) && (R12873 = 0 || (R20 = 0 && R12872 = 0));
// End of Parikh automata intersection problem
