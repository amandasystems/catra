// Parikh automata intersection problem, generated by OSTRICH+
counter int R100, R101, R102, R12, R15, R16, R2, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R4, R45, R47, R49, R5, R50, R53, R54, R55, R59, R60, R61, R65, R66, R661, R662, R663, R664, R665, R666, R667, R668, R67, R68, R73, R74, R75, R76, R77, R779, R780, R781, R782, R783, R784, R785, R786, R787, R788, R789, R790, R791, R792, R793, R794, R795, R796, R797, R798, R799, R800, R801, R802, R803, R804, R805, R806, R807, R808, R809, R810, R811, R812, R813, R814, R815, R816, R817, R818, R819, R820, R821, R822, R823, R824, R825, R826, R827, R828, R829, R83, R830, R831, R832, R833, R834, R835, R836, R837, R838, R839, R84, R840, R841, R842, R843, R844, R845, R846, R847, R848, R849, R85, R850, R851, R852, R853, R854, R855, R856, R857, R858, R859, R86, R860, R861, R862, R863, R864, R865, R866, R867, R868, R869, R87, R870, R871, R872, R873, R874, R875, R876, R877, R878, R879, R88, R880, R881, R882, R883, R884, R885, R886, R887, R888, R89, R90, R91, R92, R93, R94, R95, R96, R97, R98, R99;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [70, 70];
  s0 -> s0 [71, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [70, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R15 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 69];
  s0 -> s0 [0, 65535] { R16 += 1 };
  s0 -> s2 [70, 70];
  s0 -> s1 [71, 65535];
  s1 -> s1 [0, 69];
  s1 -> s2 [70, 70];
  s1 -> s1 [71, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R24 += 1 };
  s0 -> s0 [0, 65535] { R23 += 1, R24 += 1 };
  s0 -> s2 [9, 13] { R24 += 1 };
  s0 -> s1 [14, 31] { R24 += 1 };
  s0 -> s2 [32, 32] { R24 += 1 };
  s0 -> s1 [33, 65535] { R24 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R24 += 1 };
  s2 -> s1 [0, 65535] { R24 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R25 += 1, R26 += 1 };
  s1 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R28 += 1 };
  s0 -> s0 [0, 65535] { R27 += 1, R28 += 1 };
  s0 -> s2 [9, 13] { R28 += 1 };
  s0 -> s1 [14, 31] { R28 += 1 };
  s0 -> s2 [32, 32] { R28 += 1 };
  s0 -> s1 [33, 65535] { R28 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R28 += 1 };
  s2 -> s1 [0, 65535] { R28 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R29 += 1, R30 += 1 };
  s1 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R809 += 1, R810 += 1 };
  s0 -> s1 [0, 65535] { R810 += 1, R22 += 1 };
  s1 -> s1 [0, 65535] { R810 += 1, R22 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 69] { R812 += 1 };
  s0 -> s0 [0, 65535] { R811 += 1, R812 += 1 };
  s0 -> s2 [70, 70] { R812 += 1 };
  s0 -> s3 [70, 70] { R812 += 1 };
  s0 -> s1 [76, 65535] { R812 += 1 };
  s1 -> s1 [0, 69] { R812 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R812 += 1 };
  s1 -> s3 [70, 70] { R812 += 1 };
  s1 -> s1 [76, 65535] { R812 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 70] { R812 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [76, 65535] { R812 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 69] { R814 += 1, R45 += 1 };
  s0 -> s0 [0, 65535] { R813 += 1, R814 += 1 };
  s0 -> s2 [70, 70] { R814 += 1, R45 += 1 };
  s0 -> s3 [70, 70] { R814 += 1, R45 += 1 };
  s0 -> s1 [71, 65535] { R814 += 1, R45 += 1 };
  s1 -> s1 [0, 69] { R814 += 1, R45 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R814 += 1, R45 += 1 };
  s1 -> s3 [70, 70] { R814 += 1, R45 += 1 };
  s1 -> s1 [71, 65535] { R814 += 1, R45 += 1 };
  s2 -> s2 [0, 65535] { R814 += 1, R45 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 69] { R816 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R815 += 1, R816 += 1 };
  s0 -> s2 [70, 70] { R816 += 1, R47 += 1 };
  s0 -> s3 [70, 70] { R816 += 1, R47 += 1 };
  s0 -> s1 [71, 65535] { R816 += 1, R47 += 1 };
  s1 -> s1 [0, 69] { R816 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R816 += 1, R47 += 1 };
  s1 -> s3 [70, 70] { R816 += 1, R47 += 1 };
  s1 -> s1 [71, 65535] { R816 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R816 += 1, R47 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 69] { R818 += 1, R49 += 1, R50 += 1 };
  s0 -> s0 [0, 65535] { R817 += 1, R818 += 1 };
  s0 -> s2 [70, 70] { R818 += 1, R49 += 1, R50 += 1 };
  s0 -> s3 [70, 70] { R818 += 1, R49 += 1, R50 += 1 };
  s0 -> s1 [71, 65535] { R818 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 69] { R818 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R818 += 1, R49 += 1, R50 += 1 };
  s1 -> s3 [70, 70] { R818 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [71, 65535] { R818 += 1, R49 += 1, R50 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R818 += 1, R49 += 1, R50 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 69] { R820 += 1, R53 += 1, R54 += 1 };
  s0 -> s0 [0, 65535] { R819 += 1, R820 += 1 };
  s0 -> s2 [70, 70] { R820 += 1, R53 += 1, R54 += 1 };
  s0 -> s3 [70, 70] { R820 += 1, R53 += 1, R54 += 1 };
  s0 -> s1 [71, 65535] { R820 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 69] { R820 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R820 += 1, R53 += 1, R54 += 1 };
  s1 -> s3 [70, 70] { R820 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [71, 65535] { R820 += 1, R53 += 1, R54 += 1 };
  s2 -> s2 [0, 65535] { R820 += 1, R53 += 1, R54 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 69] { R822 += 1, R59 += 1, R60 += 1 };
  s0 -> s0 [0, 65535] { R821 += 1, R822 += 1 };
  s0 -> s2 [70, 70] { R822 += 1, R59 += 1, R60 += 1 };
  s0 -> s3 [70, 70] { R822 += 1, R59 += 1, R60 += 1 };
  s0 -> s1 [71, 65535] { R822 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 69] { R822 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R822 += 1, R59 += 1, R60 += 1 };
  s1 -> s3 [70, 70] { R822 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [71, 65535] { R822 += 1, R59 += 1, R60 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R822 += 1, R59 += 1, R60 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 69] { R824 += 1, R65 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R823 += 1, R824 += 1 };
  s0 -> s2 [70, 70] { R824 += 1, R65 += 1, R66 += 1 };
  s0 -> s3 [70, 70] { R824 += 1, R65 += 1, R66 += 1 };
  s0 -> s1 [71, 65535] { R824 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 69] { R824 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R824 += 1, R65 += 1, R66 += 1 };
  s1 -> s3 [70, 70] { R824 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [71, 65535] { R824 += 1, R65 += 1, R66 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R824 += 1, R65 += 1, R66 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 69] { R826 += 1, R73 += 1, R74 += 1 };
  s0 -> s0 [0, 65535] { R825 += 1, R826 += 1 };
  s0 -> s2 [70, 70] { R826 += 1, R73 += 1, R74 += 1 };
  s0 -> s3 [70, 70] { R826 += 1, R73 += 1, R74 += 1 };
  s0 -> s1 [71, 65535] { R826 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 69] { R826 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R826 += 1, R73 += 1, R74 += 1 };
  s1 -> s3 [70, 70] { R826 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [71, 65535] { R826 += 1, R73 += 1, R74 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R826 += 1, R73 += 1, R74 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 69] { R846 += 1 };
  s0 -> s0 [0, 65535] { R845 += 1, R846 += 1 };
  s0 -> s2 [70, 70] { R846 += 1 };
  s0 -> s1 [71, 65535] { R846 += 1 };
  s1 -> s1 [0, 69] { R846 += 1 };
  s1 -> s2 [70, 70] { R846 += 1 };
  s1 -> s1 [71, 65535] { R846 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R846 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R848 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R847 += 1, R848 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R848 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 69] { R850 += 1 };
  s0 -> s2 [0, 65535] { R850 += 1, R12 += 1 };
  s0 -> s0 [0, 65535] { R849 += 1, R850 += 1 };
  s0 -> s3 [70, 70] { R850 += 1 };
  s0 -> s1 [71, 65535] { R850 += 1 };
  s1 -> s1 [0, 69] { R850 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [70, 70] { R850 += 1 };
  s1 -> s1 [71, 65535] { R850 += 1 };
  s2 -> s1 [0, 69] { R850 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R850 += 1, R12 += 1 };
  s2 -> s3 [70, 70] { R850 += 1 };
  s2 -> s1 [71, 65535] { R850 += 1 };
  s3 -> s3 [0, 65535] { R850 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 69] { R852 += 1, R790 += 1 };
  s0 -> s2 [0, 65535] { R852 += 1, R789 += 1, R790 += 1 };
  s0 -> s0 [0, 65535] { R851 += 1, R852 += 1 };
  s0 -> s1 [71, 65535] { R852 += 1, R790 += 1 };
  s1 -> s1 [0, 69] { R852 += 1, R790 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R852 += 1 };
  s1 -> s1 [71, 65535] { R852 += 1, R790 += 1 };
  s2 -> s1 [0, 69] { R852 += 1, R790 += 1 };
  s2 -> s2 [0, 65535] { R852 += 1, R789 += 1, R790 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [71, 65535] { R852 += 1, R790 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R854 += 1, R792 += 1, R20 += 1 };
  s0 -> s2 [0, 65535] { R854 += 1, R791 += 1, R792 += 1 };
  s0 -> s0 [0, 65535] { R853 += 1, R854 += 1 };
  s1 -> s1 [0, 65535] { R854 += 1, R792 += 1, R20 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R854 += 1 };
  s2 -> s1 [0, 65535] { R854 += 1, R792 += 1, R20 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R854 += 1, R791 += 1, R792 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R854 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 70] { R856 += 1, R794 += 1 };
  s0 -> s2 [0, 65535] { R856 += 1, R793 += 1, R794 += 1 };
  s0 -> s0 [0, 65535] { R855 += 1, R856 += 1 };
  s0 -> s1 [75, 65535] { R856 += 1, R794 += 1 };
  s1 -> s1 [0, 70] { R856 += 1, R794 += 1 };
  s1 -> s1 [0, 65535] { R856 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [75, 65535] { R856 += 1, R794 += 1 };
  s2 -> s1 [0, 70] { R856 += 1, R794 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R856 += 1, R793 += 1, R794 += 1 };
  s2 -> s1 [75, 65535] { R856 += 1, R794 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R858 += 1, R796 += 1, R84 += 1 };
  s0 -> s0 [0, 65535] { R857 += 1, R858 += 1 };
  s0 -> s2 [0, 65535] { R858 += 1, R795 += 1, R796 += 1 };
  s1 -> s1 [0, 65535] { R858 += 1, R796 += 1, R84 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R858 += 1 };
  s2 -> s1 [0, 65535] { R858 += 1, R796 += 1, R84 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R858 += 1, R795 += 1, R796 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R858 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 74] { R860 += 1, R798 += 1 };
  s0 -> s0 [0, 65535] { R859 += 1, R860 += 1 };
  s0 -> s2 [0, 65535] { R860 += 1, R798 += 1, R86 += 1 };
  s0 -> s3 [0, 65535] { R860 += 1, R797 += 1, R798 += 1 };
  s0 -> s1 [76, 65535] { R860 += 1, R798 += 1 };
  s1 -> s1 [0, 74] { R860 += 1, R798 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R860 += 1 };
  s1 -> s1 [76, 65535] { R860 += 1, R798 += 1 };
  s2 -> s1 [0, 74] { R860 += 1, R798 += 1 };
  s2 -> s5 [0, 65535] { R860 += 1 };
  s2 -> s2 [0, 65535] { R860 += 1, R798 += 1, R86 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [76, 65535] { R860 += 1, R798 += 1 };
  s3 -> s1 [0, 74] { R860 += 1, R798 += 1 };
  s3 -> s2 [0, 65535] { R860 += 1, R798 += 1, R86 += 1 };
  s3 -> s3 [0, 65535] { R860 += 1, R797 += 1, R798 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [76, 65535] { R860 += 1, R798 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R860 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 65535] { R862 += 1, R800 += 1 };
  s0 -> s2 [0, 65535] { R862 += 1, R799 += 1, R800 += 1 };
  s0 -> s3 [0, 65535] { R862 += 1, R800 += 1, R90 += 1 };
  s0 -> s0 [0, 65535] { R861 += 1, R862 += 1 };
  s1 -> s1 [0, 65535] { R862 += 1, R800 += 1 };
  s1 -> s4 [0, 65535] { R862 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R862 += 1, R800 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R862 += 1, R799 += 1, R800 += 1 };
  s2 -> s3 [0, 65535] { R862 += 1, R800 += 1, R90 += 1 };
  s3 -> s1 [0, 65535] { R862 += 1, R800 += 1 };
  s3 -> s4 [0, 65535] { R862 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R862 += 1, R800 += 1, R90 += 1 };
  s4 -> s4 [0, 65535] { R862 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R864 += 1, R802 += 1, R94 += 1, R95 += 1 };
  s0 -> s0 [0, 65535] { R863 += 1, R864 += 1 };
  s0 -> s2 [0, 65535] { R864 += 1, R801 += 1, R802 += 1 };
  s0 -> s3 [0, 65535] { R864 += 1, R802 += 1, R95 += 1, R96 += 1 };
  s1 -> s4 [0, 65535] { R864 += 1 };
  s1 -> s1 [0, 65535] { R864 += 1, R802 += 1, R94 += 1, R95 += 1 };
  s1 -> s3 [0, 65535] { R864 += 1, R802 += 1, R95 += 1, R96 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s1 [0, 65535] { R864 += 1, R802 += 1, R94 += 1, R95 += 1 };
  s2 -> s2 [0, 65535] { R864 += 1, R801 += 1, R802 += 1 };
  s2 -> s3 [0, 65535] { R864 += 1, R802 += 1, R95 += 1, R96 += 1 };
  s2 -> s6 [0, 65535];
  s3 -> s4 [0, 65535] { R864 += 1 };
  s3 -> s5 [0, 65535] { R864 += 1, R802 += 1 };
  s3 -> s3 [0, 65535] { R864 += 1, R802 += 1, R95 += 1, R96 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R864 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s4 [0, 65535] { R864 += 1 };
  s5 -> s5 [0, 65535] { R864 += 1, R802 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 74] { R866 += 1, R804 += 1, R101 += 1 };
  s0 -> s2 [0, 65535] { R866 += 1, R804 += 1, R101 += 1, R102 += 1 };
  s0 -> s0 [0, 65535] { R865 += 1, R866 += 1 };
  s0 -> s3 [0, 65535] { R866 += 1, R803 += 1, R804 += 1 };
  s0 -> s4 [0, 65535] { R866 += 1, R804 += 1, R100 += 1, R101 += 1 };
  s0 -> s1 [76, 65535] { R866 += 1, R804 += 1, R101 += 1 };
  s1 -> s1 [0, 74] { R866 += 1, R804 += 1, R101 += 1 };
  s1 -> s1 [0, 65535] { R866 += 1, R804 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R866 += 1 };
  s1 -> s1 [76, 65535] { R866 += 1, R804 += 1, R101 += 1 };
  s2 -> s1 [0, 74] { R866 += 1, R804 += 1, R101 += 1 };
  s2 -> s7 [0, 65535] { R866 += 1, R804 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R866 += 1 };
  s2 -> s2 [0, 65535] { R866 += 1, R804 += 1, R101 += 1, R102 += 1 };
  s2 -> s1 [76, 65535] { R866 += 1, R804 += 1, R101 += 1 };
  s3 -> s1 [0, 74] { R866 += 1, R804 += 1, R101 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R866 += 1, R804 += 1, R101 += 1, R102 += 1 };
  s3 -> s3 [0, 65535] { R866 += 1, R803 += 1, R804 += 1 };
  s3 -> s4 [0, 65535] { R866 += 1, R804 += 1, R100 += 1, R101 += 1 };
  s3 -> s1 [76, 65535] { R866 += 1, R804 += 1, R101 += 1 };
  s4 -> s1 [0, 74] { R866 += 1, R804 += 1, R101 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R866 += 1 };
  s4 -> s2 [0, 65535] { R866 += 1, R804 += 1, R101 += 1, R102 += 1 };
  s4 -> s4 [0, 65535] { R866 += 1, R804 += 1, R100 += 1, R101 += 1 };
  s4 -> s1 [76, 65535] { R866 += 1, R804 += 1, R101 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R866 += 1 };
  s7 -> s7 [0, 65535] { R866 += 1, R804 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R866 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R868 += 1, R805 += 1, R806 += 1 };
  s0 -> s2 [0, 65535] { R868 += 1, R806 += 1, R666 += 1 };
  s0 -> s3 [0, 65535] { R868 += 1, R806 += 1 };
  s0 -> s0 [0, 65535] { R867 += 1, R868 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R868 += 1, R805 += 1, R806 += 1 };
  s1 -> s2 [0, 65535] { R868 += 1, R806 += 1, R666 += 1 };
  s1 -> s3 [0, 65535] { R868 += 1, R806 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R868 += 1, R806 += 1, R666 += 1 };
  s2 -> s3 [0, 65535] { R868 += 1, R806 += 1 };
  s2 -> s5 [0, 65535] { R868 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R868 += 1, R806 += 1 };
  s3 -> s5 [0, 65535] { R868 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R868 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 65535] { R870 += 1, R807 += 1, R808 += 1 };
  s0 -> s0 [0, 65535] { R869 += 1, R870 += 1 };
  s0 -> s2 [0, 65535] { R870 += 1, R808 += 1 };
  s1 -> s1 [0, 65535] { R870 += 1, R807 += 1, R808 += 1 };
  s1 -> s2 [0, 65535] { R870 += 1, R808 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R870 += 1 };
  s2 -> s2 [0, 65535] { R870 += 1, R808 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R870 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R872 += 1, R827 += 1, R828 += 1 };
  s0 -> s0 [0, 65535] { R871 += 1, R872 += 1 };
  s0 -> s2 [0, 65535] { R872 += 1, R828 += 1, R21 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R872 += 1, R827 += 1, R828 += 1 };
  s1 -> s2 [0, 65535] { R872 += 1, R828 += 1, R21 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R872 += 1 };
  s2 -> s2 [0, 65535] { R872 += 1, R828 += 1, R21 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R872 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 69] { R874 += 1, R830 += 1 };
  s0 -> s2 [0, 65535] { R874 += 1, R829 += 1, R830 += 1 };
  s0 -> s0 [0, 65535] { R873 += 1, R874 += 1 };
  s0 -> s3 [70, 70] { R874 += 1, R830 += 1 };
  s0 -> s4 [70, 70] { R874 += 1, R830 += 1 };
  s0 -> s5 [75, 75] { R874 += 1, R830 += 1 };
  s0 -> s1 [76, 65535] { R874 += 1, R830 += 1 };
  s1 -> s1 [0, 69] { R874 += 1, R830 += 1 };
  s1 -> s3 [70, 70] { R874 += 1, R830 += 1 };
  s1 -> s4 [70, 70] { R874 += 1, R830 += 1 };
  s1 -> s5 [75, 75] { R874 += 1, R830 += 1 };
  s1 -> s1 [76, 65535] { R874 += 1, R830 += 1 };
  s2 -> s1 [0, 69] { R874 += 1, R830 += 1 };
  s2 -> s2 [0, 65535] { R874 += 1, R829 += 1, R830 += 1 };
  s2 -> s3 [70, 70] { R874 += 1, R830 += 1 };
  s2 -> s4 [70, 70] { R874 += 1, R830 += 1 };
  s2 -> s5 [75, 75] { R874 += 1, R830 += 1 };
  s2 -> s1 [76, 65535] { R874 += 1, R830 += 1 };
  s3 -> s3 [0, 70] { R874 += 1, R830 += 1 };
  s3 -> s8 [75, 75] { R874 += 1, R830 += 1 };
  s3 -> s3 [76, 65535] { R874 += 1, R830 += 1 };
  s5 -> s5 [0, 69] { R874 += 1, R830 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R874 += 1 };
  s5 -> s7 [70, 70] { R874 += 1, R830 += 1 };
  s5 -> s8 [70, 70] { R874 += 1, R830 += 1 };
  s5 -> s5 [75, 65535] { R874 += 1, R830 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R874 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 70] { R874 += 1, R830 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R874 += 1 };
  s8 -> s8 [75, 65535] { R874 += 1, R830 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 69] { R876 += 1, R832 += 1, R83 += 1 };
  s0 -> s0 [0, 65535] { R875 += 1, R876 += 1 };
  s0 -> s2 [0, 65535] { R876 += 1, R831 += 1, R832 += 1 };
  s0 -> s3 [70, 70] { R876 += 1, R832 += 1, R83 += 1 };
  s0 -> s4 [70, 70] { R876 += 1, R832 += 1, R83 += 1 };
  s0 -> s1 [71, 65535] { R876 += 1, R832 += 1, R83 += 1 };
  s1 -> s1 [0, 69] { R876 += 1, R832 += 1, R83 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R876 += 1 };
  s1 -> s3 [70, 70] { R876 += 1, R832 += 1, R83 += 1 };
  s1 -> s4 [70, 70] { R876 += 1, R832 += 1, R83 += 1 };
  s1 -> s1 [71, 65535] { R876 += 1, R832 += 1, R83 += 1 };
  s2 -> s1 [0, 69] { R876 += 1, R832 += 1, R83 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R876 += 1, R831 += 1, R832 += 1 };
  s2 -> s3 [70, 70] { R876 += 1, R832 += 1, R83 += 1 };
  s2 -> s4 [70, 70] { R876 += 1, R832 += 1, R83 += 1 };
  s2 -> s1 [71, 65535] { R876 += 1, R832 += 1, R83 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R876 += 1, R832 += 1, R83 += 1 };
  s3 -> s6 [0, 65535] { R876 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R876 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R876 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 69] { R878 += 1, R834 += 1, R85 += 1 };
  s0 -> s2 [0, 65535] { R878 += 1, R833 += 1, R834 += 1 };
  s0 -> s0 [0, 65535] { R877 += 1, R878 += 1 };
  s0 -> s3 [70, 70] { R878 += 1, R834 += 1, R85 += 1 };
  s0 -> s4 [70, 70] { R878 += 1, R834 += 1, R85 += 1 };
  s0 -> s1 [71, 65535] { R878 += 1, R834 += 1, R85 += 1 };
  s1 -> s1 [0, 69] { R878 += 1, R834 += 1, R85 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R878 += 1 };
  s1 -> s3 [70, 70] { R878 += 1, R834 += 1, R85 += 1 };
  s1 -> s4 [70, 70] { R878 += 1, R834 += 1, R85 += 1 };
  s1 -> s1 [71, 65535] { R878 += 1, R834 += 1, R85 += 1 };
  s2 -> s1 [0, 69] { R878 += 1, R834 += 1, R85 += 1 };
  s2 -> s2 [0, 65535] { R878 += 1, R833 += 1, R834 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [70, 70] { R878 += 1, R834 += 1, R85 += 1 };
  s2 -> s4 [70, 70] { R878 += 1, R834 += 1, R85 += 1 };
  s2 -> s1 [71, 65535] { R878 += 1, R834 += 1, R85 += 1 };
  s3 -> s3 [0, 65535] { R878 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R878 += 1 };
  s4 -> s4 [0, 65535] { R878 += 1, R834 += 1, R85 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R878 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 69] { R880 += 1, R836 += 1, R88 += 1 };
  s0 -> s2 [0, 69] { R880 += 1, R836 += 1, R87 += 1, R88 += 1 };
  s0 -> s0 [0, 65535] { R879 += 1, R880 += 1 };
  s0 -> s3 [0, 65535] { R880 += 1, R835 += 1, R836 += 1 };
  s0 -> s4 [70, 70] { R880 += 1, R836 += 1, R88 += 1 };
  s0 -> s5 [70, 70] { R880 += 1, R836 += 1, R87 += 1, R88 += 1 };
  s0 -> s6 [70, 70] { R880 += 1, R836 += 1, R87 += 1, R88 += 1 };
  s0 -> s7 [70, 70] { R880 += 1, R836 += 1, R88 += 1 };
  s0 -> s1 [71, 74] { R880 += 1, R836 += 1, R88 += 1 };
  s0 -> s2 [71, 65535] { R880 += 1, R836 += 1, R87 += 1, R88 += 1 };
  s0 -> s8 [75, 75] { R880 += 1, R836 += 1, R88 += 1 };
  s0 -> s1 [76, 65535] { R880 += 1, R836 += 1, R88 += 1 };
  s1 -> s1 [0, 69] { R880 += 1, R836 += 1, R88 += 1 };
  s1 -> s4 [70, 70] { R880 += 1, R836 += 1, R88 += 1 };
  s1 -> s7 [70, 70] { R880 += 1, R836 += 1, R88 += 1 };
  s1 -> s1 [71, 74] { R880 += 1, R836 += 1, R88 += 1 };
  s1 -> s8 [75, 75] { R880 += 1, R836 += 1, R88 += 1 };
  s1 -> s1 [76, 65535] { R880 += 1, R836 += 1, R88 += 1 };
  s2 -> s1 [0, 69] { R880 += 1, R836 += 1, R88 += 1 };
  s2 -> s2 [0, 69] { R880 += 1, R836 += 1, R87 += 1, R88 += 1 };
  s2 -> s4 [70, 70] { R880 += 1, R836 += 1, R88 += 1 };
  s2 -> s5 [70, 70] { R880 += 1, R836 += 1, R87 += 1, R88 += 1 };
  s2 -> s6 [70, 70] { R880 += 1, R836 += 1, R87 += 1, R88 += 1 };
  s2 -> s7 [70, 70] { R880 += 1, R836 += 1, R88 += 1 };
  s2 -> s1 [71, 74] { R880 += 1, R836 += 1, R88 += 1 };
  s2 -> s2 [71, 65535] { R880 += 1, R836 += 1, R87 += 1, R88 += 1 };
  s2 -> s8 [75, 75] { R880 += 1, R836 += 1, R88 += 1 };
  s2 -> s1 [76, 65535] { R880 += 1, R836 += 1, R88 += 1 };
  s3 -> s1 [0, 69] { R880 += 1, R836 += 1, R88 += 1 };
  s3 -> s2 [0, 69] { R880 += 1, R836 += 1, R87 += 1, R88 += 1 };
  s3 -> s3 [0, 65535] { R880 += 1, R835 += 1, R836 += 1 };
  s3 -> s4 [70, 70] { R880 += 1, R836 += 1, R88 += 1 };
  s3 -> s5 [70, 70] { R880 += 1, R836 += 1, R87 += 1, R88 += 1 };
  s3 -> s6 [70, 70] { R880 += 1, R836 += 1, R87 += 1, R88 += 1 };
  s3 -> s7 [70, 70] { R880 += 1, R836 += 1, R88 += 1 };
  s3 -> s1 [71, 74] { R880 += 1, R836 += 1, R88 += 1 };
  s3 -> s2 [71, 65535] { R880 += 1, R836 += 1, R87 += 1, R88 += 1 };
  s3 -> s8 [75, 75] { R880 += 1, R836 += 1, R88 += 1 };
  s3 -> s1 [76, 65535] { R880 += 1, R836 += 1, R88 += 1 };
  s4 -> s4 [0, 74] { R880 += 1, R836 += 1, R88 += 1 };
  s4 -> s11 [75, 75] { R880 += 1, R836 += 1, R88 += 1 };
  s4 -> s4 [76, 65535] { R880 += 1, R836 += 1, R88 += 1 };
  s6 -> s4 [0, 74] { R880 += 1, R836 += 1, R88 += 1 };
  s6 -> s6 [0, 65535] { R880 += 1, R836 += 1, R87 += 1, R88 += 1 };
  s6 -> s11 [75, 75] { R880 += 1, R836 += 1, R88 += 1 };
  s6 -> s4 [76, 65535] { R880 += 1, R836 += 1, R88 += 1 };
  s8 -> s8 [0, 69] { R880 += 1, R836 += 1, R88 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R880 += 1 };
  s8 -> s10 [70, 70] { R880 += 1, R836 += 1, R88 += 1 };
  s8 -> s11 [70, 70] { R880 += 1, R836 += 1, R88 += 1 };
  s8 -> s8 [71, 65535] { R880 += 1, R836 += 1, R88 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R880 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s12 [0, 65535] { R880 += 1 };
  s11 -> s11 [0, 65535] { R880 += 1, R836 += 1, R88 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R880 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 69] { R882 += 1, R838 += 1, R91 += 1, R92 += 1 };
  s0 -> s2 [0, 65535] { R882 += 1, R837 += 1, R838 += 1 };
  s0 -> s0 [0, 65535] { R881 += 1, R882 += 1 };
  s0 -> s3 [70, 70] { R882 += 1, R838 += 1, R91 += 1, R92 += 1 };
  s0 -> s4 [70, 70] { R882 += 1, R838 += 1, R91 += 1, R92 += 1 };
  s0 -> s1 [71, 65535] { R882 += 1, R838 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 69] { R882 += 1, R838 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 65535] { R882 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [70, 70] { R882 += 1, R838 += 1, R91 += 1, R92 += 1 };
  s1 -> s4 [70, 70] { R882 += 1, R838 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [71, 65535] { R882 += 1, R838 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [0, 69] { R882 += 1, R838 += 1, R91 += 1, R92 += 1 };
  s2 -> s2 [0, 65535] { R882 += 1, R837 += 1, R838 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [70, 70] { R882 += 1, R838 += 1, R91 += 1, R92 += 1 };
  s2 -> s4 [70, 70] { R882 += 1, R838 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [71, 65535] { R882 += 1, R838 += 1, R91 += 1, R92 += 1 };
  s3 -> s6 [0, 65535] { R882 += 1 };
  s3 -> s3 [0, 65535] { R882 += 1, R838 += 1, R91 += 1, R92 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R882 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R882 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 69] { R884 += 1, R840 += 1, R97 += 1, R98 += 1 };
  s0 -> s2 [0, 65535] { R884 += 1, R839 += 1, R840 += 1 };
  s0 -> s0 [0, 65535] { R883 += 1, R884 += 1 };
  s0 -> s3 [70, 70] { R884 += 1, R840 += 1, R97 += 1, R98 += 1 };
  s0 -> s4 [70, 70] { R884 += 1, R840 += 1, R97 += 1, R98 += 1 };
  s0 -> s1 [71, 65535] { R884 += 1, R840 += 1, R97 += 1, R98 += 1 };
  s1 -> s1 [0, 69] { R884 += 1, R840 += 1, R97 += 1, R98 += 1 };
  s1 -> s1 [0, 65535] { R884 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [70, 70] { R884 += 1, R840 += 1, R97 += 1, R98 += 1 };
  s1 -> s4 [70, 70] { R884 += 1, R840 += 1, R97 += 1, R98 += 1 };
  s1 -> s1 [71, 65535] { R884 += 1, R840 += 1, R97 += 1, R98 += 1 };
  s2 -> s1 [0, 69] { R884 += 1, R840 += 1, R97 += 1, R98 += 1 };
  s2 -> s2 [0, 65535] { R884 += 1, R839 += 1, R840 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [70, 70] { R884 += 1, R840 += 1, R97 += 1, R98 += 1 };
  s2 -> s4 [70, 70] { R884 += 1, R840 += 1, R97 += 1, R98 += 1 };
  s2 -> s1 [71, 65535] { R884 += 1, R840 += 1, R97 += 1, R98 += 1 };
  s3 -> s3 [0, 65535] { R884 += 1, R840 += 1, R97 += 1, R98 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R884 += 1 };
  s4 -> s4 [0, 65535] { R884 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R884 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 69] { R886 += 1, R842 += 1, R662 += 1, R663 += 1, R664 += 1 };
  s0 -> s2 [0, 69] { R886 += 1, R842 += 1, R662 += 1, R664 += 1 };
  s0 -> s3 [0, 69] { R886 += 1, R842 += 1, R661 += 1, R662 += 1 };
  s0 -> s4 [0, 65535] { R886 += 1, R841 += 1, R842 += 1 };
  s0 -> s0 [0, 65535] { R885 += 1, R886 += 1 };
  s0 -> s5 [70, 70] { R886 += 1, R842 += 1, R661 += 1, R662 += 1 };
  s0 -> s6 [70, 70] { R886 += 1, R842 += 1, R662 += 1, R664 += 1 };
  s0 -> s7 [70, 70] { R886 += 1, R842 += 1, R662 += 1, R663 += 1, R664 += 1 };
  s0 -> s8 [70, 70] { R886 += 1, R842 += 1, R662 += 1, R663 += 1, R664 += 1 };
  s0 -> s9 [70, 70] { R886 += 1, R842 += 1, R661 += 1, R662 += 1 };
  s0 -> s10 [70, 70] { R886 += 1, R842 += 1, R662 += 1, R664 += 1 };
  s0 -> s2 [71, 74] { R886 += 1, R842 += 1, R662 += 1, R664 += 1 };
  s0 -> s1 [71, 65535] { R886 += 1, R842 += 1, R662 += 1, R663 += 1, R664 += 1 };
  s0 -> s3 [71, 65535] { R886 += 1, R842 += 1, R661 += 1, R662 += 1 };
  s0 -> s11 [75, 75] { R886 += 1, R842 += 1, R662 += 1, R664 += 1 };
  s0 -> s2 [76, 65535] { R886 += 1, R842 += 1, R662 += 1, R664 += 1 };
  s1 -> s1 [0, 69] { R886 += 1, R842 += 1, R662 += 1, R663 += 1, R664 += 1 };
  s1 -> s2 [0, 69] { R886 += 1, R842 += 1, R662 += 1, R664 += 1 };
  s1 -> s6 [70, 70] { R886 += 1, R842 += 1, R662 += 1, R664 += 1 };
  s1 -> s7 [70, 70] { R886 += 1, R842 += 1, R662 += 1, R663 += 1, R664 += 1 };
  s1 -> s8 [70, 70] { R886 += 1, R842 += 1, R662 += 1, R663 += 1, R664 += 1 };
  s1 -> s10 [70, 70] { R886 += 1, R842 += 1, R662 += 1, R664 += 1 };
  s1 -> s2 [71, 74] { R886 += 1, R842 += 1, R662 += 1, R664 += 1 };
  s1 -> s1 [71, 65535] { R886 += 1, R842 += 1, R662 += 1, R663 += 1, R664 += 1 };
  s1 -> s11 [75, 75] { R886 += 1, R842 += 1, R662 += 1, R664 += 1 };
  s1 -> s2 [76, 65535] { R886 += 1, R842 += 1, R662 += 1, R664 += 1 };
  s2 -> s2 [0, 69] { R886 += 1, R842 += 1, R662 += 1, R664 += 1 };
  s2 -> s6 [70, 70] { R886 += 1, R842 += 1, R662 += 1, R664 += 1 };
  s2 -> s10 [70, 70] { R886 += 1, R842 += 1, R662 += 1, R664 += 1 };
  s2 -> s2 [71, 74] { R886 += 1, R842 += 1, R662 += 1, R664 += 1 };
  s2 -> s11 [75, 75] { R886 += 1, R842 += 1, R662 += 1, R664 += 1 };
  s2 -> s2 [76, 65535] { R886 += 1, R842 += 1, R662 += 1, R664 += 1 };
  s3 -> s1 [0, 69] { R886 += 1, R842 += 1, R662 += 1, R663 += 1, R664 += 1 };
  s3 -> s2 [0, 69] { R886 += 1, R842 += 1, R662 += 1, R664 += 1 };
  s3 -> s3 [0, 69] { R886 += 1, R842 += 1, R661 += 1, R662 += 1 };
  s3 -> s5 [70, 70] { R886 += 1, R842 += 1, R661 += 1, R662 += 1 };
  s3 -> s6 [70, 70] { R886 += 1, R842 += 1, R662 += 1, R664 += 1 };
  s3 -> s7 [70, 70] { R886 += 1, R842 += 1, R662 += 1, R663 += 1, R664 += 1 };
  s3 -> s8 [70, 70] { R886 += 1, R842 += 1, R662 += 1, R663 += 1, R664 += 1 };
  s3 -> s9 [70, 70] { R886 += 1, R842 += 1, R661 += 1, R662 += 1 };
  s3 -> s10 [70, 70] { R886 += 1, R842 += 1, R662 += 1, R664 += 1 };
  s3 -> s2 [71, 74] { R886 += 1, R842 += 1, R662 += 1, R664 += 1 };
  s3 -> s1 [71, 65535] { R886 += 1, R842 += 1, R662 += 1, R663 += 1, R664 += 1 };
  s3 -> s3 [71, 65535] { R886 += 1, R842 += 1, R661 += 1, R662 += 1 };
  s3 -> s11 [75, 75] { R886 += 1, R842 += 1, R662 += 1, R664 += 1 };
  s3 -> s2 [76, 65535] { R886 += 1, R842 += 1, R662 += 1, R664 += 1 };
  s4 -> s1 [0, 69] { R886 += 1, R842 += 1, R662 += 1, R663 += 1, R664 += 1 };
  s4 -> s2 [0, 69] { R886 += 1, R842 += 1, R662 += 1, R664 += 1 };
  s4 -> s3 [0, 69] { R886 += 1, R842 += 1, R661 += 1, R662 += 1 };
  s4 -> s4 [0, 65535] { R886 += 1, R841 += 1, R842 += 1 };
  s4 -> s5 [70, 70] { R886 += 1, R842 += 1, R661 += 1, R662 += 1 };
  s4 -> s6 [70, 70] { R886 += 1, R842 += 1, R662 += 1, R664 += 1 };
  s4 -> s7 [70, 70] { R886 += 1, R842 += 1, R662 += 1, R663 += 1, R664 += 1 };
  s4 -> s8 [70, 70] { R886 += 1, R842 += 1, R662 += 1, R663 += 1, R664 += 1 };
  s4 -> s9 [70, 70] { R886 += 1, R842 += 1, R661 += 1, R662 += 1 };
  s4 -> s10 [70, 70] { R886 += 1, R842 += 1, R662 += 1, R664 += 1 };
  s4 -> s2 [71, 74] { R886 += 1, R842 += 1, R662 += 1, R664 += 1 };
  s4 -> s1 [71, 65535] { R886 += 1, R842 += 1, R662 += 1, R663 += 1, R664 += 1 };
  s4 -> s3 [71, 65535] { R886 += 1, R842 += 1, R661 += 1, R662 += 1 };
  s4 -> s11 [75, 75] { R886 += 1, R842 += 1, R662 += 1, R664 += 1 };
  s4 -> s2 [76, 65535] { R886 += 1, R842 += 1, R662 += 1, R664 += 1 };
  s6 -> s6 [0, 74] { R886 += 1, R842 += 1, R662 += 1, R664 += 1 };
  s6 -> s14 [75, 75] { R886 += 1, R842 += 1, R662 += 1, R664 += 1 };
  s6 -> s6 [76, 65535] { R886 += 1, R842 += 1, R662 += 1, R664 += 1 };
  s8 -> s6 [0, 74] { R886 += 1, R842 += 1, R662 += 1, R664 += 1 };
  s8 -> s8 [0, 65535] { R886 += 1, R842 += 1, R662 += 1, R663 += 1, R664 += 1 };
  s8 -> s14 [75, 75] { R886 += 1, R842 += 1, R662 += 1, R664 += 1 };
  s8 -> s6 [76, 65535] { R886 += 1, R842 += 1, R662 += 1, R664 += 1 };
  s9 -> s6 [0, 74] { R886 += 1, R842 += 1, R662 += 1, R664 += 1 };
  s9 -> s8 [0, 65535] { R886 += 1, R842 += 1, R662 += 1, R663 += 1, R664 += 1 };
  s9 -> s9 [0, 65535] { R886 += 1, R842 += 1, R661 += 1, R662 += 1 };
  s9 -> s14 [75, 75] { R886 += 1, R842 += 1, R662 += 1, R664 += 1 };
  s9 -> s6 [76, 65535] { R886 += 1, R842 += 1, R662 += 1, R664 += 1 };
  s11 -> s12 [0, 69] { R886 += 1, R842 += 1, R662 += 1 };
  s11 -> s11 [0, 69] { R886 += 1, R842 += 1, R662 += 1, R664 += 1 };
  s11 -> s13 [70, 70] { R886 += 1, R842 += 1, R662 += 1, R664 += 1 };
  s11 -> s14 [70, 70] { R886 += 1, R842 += 1, R662 += 1, R664 += 1 };
  s11 -> s15 [70, 70] { R886 += 1, R842 += 1, R662 += 1 };
  s11 -> s16 [70, 70] { R886 += 1, R842 += 1, R662 += 1 };
  s11 -> s12 [71, 65535] { R886 += 1, R842 += 1, R662 += 1 };
  s11 -> s11 [71, 65535] { R886 += 1, R842 += 1, R662 += 1, R664 += 1 };
  s12 -> s12 [0, 69] { R886 += 1, R842 += 1, R662 += 1 };
  s12 -> s12 [0, 65535] { R886 += 1 };
  s12 -> s18 [0, 65535];
  s12 -> s15 [70, 70] { R886 += 1, R842 += 1, R662 += 1 };
  s12 -> s16 [70, 70] { R886 += 1, R842 += 1, R662 += 1 };
  s12 -> s12 [71, 65535] { R886 += 1, R842 += 1, R662 += 1 };
  s14 -> s14 [0, 65535] { R886 += 1, R842 += 1, R662 += 1, R664 += 1 };
  s14 -> s16 [0, 65535] { R886 += 1, R842 += 1, R662 += 1 };
  s15 -> s15 [0, 65535] { R886 += 1 };
  s15 -> s18 [0, 65535];
  s16 -> s17 [0, 65535] { R886 += 1 };
  s16 -> s16 [0, 65535] { R886 += 1, R842 += 1, R662 += 1 };
  s16 -> s18 [0, 65535];
  s17 -> s17 [0, 65535] { R886 += 1 };
  s17 -> s18 [0, 65535];
  s18 -> s18 [0, 65535];
  accepting s17, s16, s12, s18, s15;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 69] { R888 += 1, R844 += 1, R780 += 1, R781 += 1, R782 += 1 };
  s0 -> s2 [0, 69] { R888 += 1, R844 += 1, R780 += 1, R782 += 1, R783 += 1 };
  s0 -> s3 [0, 69] { R888 += 1, R844 += 1, R779 += 1, R780 += 1 };
  s0 -> s4 [0, 65535] { R888 += 1, R843 += 1, R844 += 1 };
  s0 -> s0 [0, 65535] { R887 += 1, R888 += 1 };
  s0 -> s5 [70, 70] { R888 += 1, R844 += 1, R780 += 1, R781 += 1, R782 += 1 };
  s0 -> s6 [70, 70] { R888 += 1, R844 += 1, R780 += 1, R781 += 1, R782 += 1 };
  s0 -> s7 [70, 70] { R888 += 1, R844 += 1, R779 += 1, R780 += 1 };
  s0 -> s8 [70, 70] { R888 += 1, R844 += 1, R780 += 1, R782 += 1, R783 += 1 };
  s0 -> s9 [70, 70] { R888 += 1, R844 += 1, R779 += 1, R780 += 1 };
  s0 -> s10 [70, 70] { R888 += 1, R844 += 1, R780 += 1, R782 += 1, R783 += 1 };
  s0 -> s1 [71, 65535] { R888 += 1, R844 += 1, R780 += 1, R781 += 1, R782 += 1 };
  s0 -> s2 [71, 65535] { R888 += 1, R844 += 1, R780 += 1, R782 += 1, R783 += 1 };
  s0 -> s3 [71, 65535] { R888 += 1, R844 += 1, R779 += 1, R780 += 1 };
  s1 -> s1 [0, 69] { R888 += 1, R844 += 1, R780 += 1, R781 += 1, R782 += 1 };
  s1 -> s15 [0, 69] { R888 += 1, R844 += 1 };
  s1 -> s2 [0, 69] { R888 += 1, R844 += 1, R780 += 1, R782 += 1, R783 += 1 };
  s1 -> s5 [70, 70] { R888 += 1, R844 += 1, R780 += 1, R781 += 1, R782 += 1 };
  s1 -> s6 [70, 70] { R888 += 1, R844 += 1, R780 += 1, R781 += 1, R782 += 1 };
  s1 -> s18 [70, 70] { R888 += 1, R844 += 1 };
  s1 -> s8 [70, 70] { R888 += 1, R844 += 1, R780 += 1, R782 += 1, R783 += 1 };
  s1 -> s12 [70, 70] { R888 += 1, R844 += 1 };
  s1 -> s10 [70, 70] { R888 += 1, R844 += 1, R780 += 1, R782 += 1, R783 += 1 };
  s1 -> s1 [71, 65535] { R888 += 1, R844 += 1, R780 += 1, R781 += 1, R782 += 1 };
  s1 -> s15 [71, 65535] { R888 += 1, R844 += 1 };
  s1 -> s2 [71, 65535] { R888 += 1, R844 += 1, R780 += 1, R782 += 1, R783 += 1 };
  s2 -> s15 [0, 69] { R888 += 1, R844 += 1 };
  s2 -> s2 [0, 69] { R888 += 1, R844 += 1, R780 += 1, R782 += 1, R783 += 1 };
  s2 -> s16 [0, 69] { R888 += 1, R844 += 1, R780 += 1 };
  s2 -> s11 [70, 70] { R888 += 1, R844 += 1, R780 += 1 };
  s2 -> s17 [70, 70] { R888 += 1, R844 += 1, R780 += 1 };
  s2 -> s18 [70, 70] { R888 += 1, R844 += 1 };
  s2 -> s8 [70, 70] { R888 += 1, R844 += 1, R780 += 1, R782 += 1, R783 += 1 };
  s2 -> s12 [70, 70] { R888 += 1, R844 += 1 };
  s2 -> s10 [70, 70] { R888 += 1, R844 += 1, R780 += 1, R782 += 1, R783 += 1 };
  s2 -> s15 [71, 65535] { R888 += 1, R844 += 1 };
  s2 -> s2 [71, 65535] { R888 += 1, R844 += 1, R780 += 1, R782 += 1, R783 += 1 };
  s2 -> s16 [71, 65535] { R888 += 1, R844 += 1, R780 += 1 };
  s3 -> s1 [0, 69] { R888 += 1, R844 += 1, R780 += 1, R781 += 1, R782 += 1 };
  s3 -> s2 [0, 69] { R888 += 1, R844 += 1, R780 += 1, R782 += 1, R783 += 1 };
  s3 -> s3 [0, 69] { R888 += 1, R844 += 1, R779 += 1, R780 += 1 };
  s3 -> s5 [70, 70] { R888 += 1, R844 += 1, R780 += 1, R781 += 1, R782 += 1 };
  s3 -> s6 [70, 70] { R888 += 1, R844 += 1, R780 += 1, R781 += 1, R782 += 1 };
  s3 -> s7 [70, 70] { R888 += 1, R844 += 1, R779 += 1, R780 += 1 };
  s3 -> s8 [70, 70] { R888 += 1, R844 += 1, R780 += 1, R782 += 1, R783 += 1 };
  s3 -> s9 [70, 70] { R888 += 1, R844 += 1, R779 += 1, R780 += 1 };
  s3 -> s10 [70, 70] { R888 += 1, R844 += 1, R780 += 1, R782 += 1, R783 += 1 };
  s3 -> s1 [71, 65535] { R888 += 1, R844 += 1, R780 += 1, R781 += 1, R782 += 1 };
  s3 -> s2 [71, 65535] { R888 += 1, R844 += 1, R780 += 1, R782 += 1, R783 += 1 };
  s3 -> s3 [71, 65535] { R888 += 1, R844 += 1, R779 += 1, R780 += 1 };
  s4 -> s1 [0, 69] { R888 += 1, R844 += 1, R780 += 1, R781 += 1, R782 += 1 };
  s4 -> s2 [0, 69] { R888 += 1, R844 += 1, R780 += 1, R782 += 1, R783 += 1 };
  s4 -> s3 [0, 69] { R888 += 1, R844 += 1, R779 += 1, R780 += 1 };
  s4 -> s4 [0, 65535] { R888 += 1, R843 += 1, R844 += 1 };
  s4 -> s5 [70, 70] { R888 += 1, R844 += 1, R780 += 1, R781 += 1, R782 += 1 };
  s4 -> s6 [70, 70] { R888 += 1, R844 += 1, R780 += 1, R781 += 1, R782 += 1 };
  s4 -> s7 [70, 70] { R888 += 1, R844 += 1, R779 += 1, R780 += 1 };
  s4 -> s8 [70, 70] { R888 += 1, R844 += 1, R780 += 1, R782 += 1, R783 += 1 };
  s4 -> s9 [70, 70] { R888 += 1, R844 += 1, R779 += 1, R780 += 1 };
  s4 -> s10 [70, 70] { R888 += 1, R844 += 1, R780 += 1, R782 += 1, R783 += 1 };
  s4 -> s1 [71, 65535] { R888 += 1, R844 += 1, R780 += 1, R781 += 1, R782 += 1 };
  s4 -> s2 [71, 65535] { R888 += 1, R844 += 1, R780 += 1, R782 += 1, R783 += 1 };
  s4 -> s3 [71, 65535] { R888 += 1, R844 += 1, R779 += 1, R780 += 1 };
  s6 -> s6 [0, 65535] { R888 += 1, R844 += 1, R780 += 1, R781 += 1, R782 += 1 };
  s6 -> s12 [0, 65535] { R888 += 1, R844 += 1 };
  s6 -> s10 [0, 65535] { R888 += 1, R844 += 1, R780 += 1, R782 += 1, R783 += 1 };
  s9 -> s6 [0, 65535] { R888 += 1, R844 += 1, R780 += 1, R781 += 1, R782 += 1 };
  s9 -> s9 [0, 65535] { R888 += 1, R844 += 1, R779 += 1, R780 += 1 };
  s9 -> s10 [0, 65535] { R888 += 1, R844 += 1, R780 += 1, R782 += 1, R783 += 1 };
  s10 -> s11 [0, 65535] { R888 += 1, R844 += 1, R780 += 1 };
  s10 -> s12 [0, 65535] { R888 += 1, R844 += 1 };
  s10 -> s10 [0, 65535] { R888 += 1, R844 += 1, R780 += 1, R782 += 1, R783 += 1 };
  s11 -> s11 [0, 65535] { R888 += 1, R844 += 1, R780 += 1 };
  s11 -> s12 [0, 65535] { R888 += 1, R844 += 1 };
  s12 -> s13 [0, 65535] { R888 += 1 };
  s12 -> s14 [0, 65535];
  s12 -> s12 [0, 65535] { R888 += 1, R844 += 1 };
  s13 -> s13 [0, 65535] { R888 += 1 };
  s13 -> s14 [0, 65535];
  s14 -> s14 [0, 65535];
  s15 -> s15 [0, 69] { R888 += 1, R844 += 1 };
  s15 -> s15 [0, 65535] { R888 += 1 };
  s15 -> s14 [0, 65535];
  s15 -> s18 [70, 70] { R888 += 1, R844 += 1 };
  s15 -> s12 [70, 70] { R888 += 1, R844 += 1 };
  s15 -> s15 [71, 65535] { R888 += 1, R844 += 1 };
  s16 -> s15 [0, 69] { R888 += 1, R844 += 1 };
  s16 -> s16 [0, 69] { R888 += 1, R844 += 1, R780 += 1 };
  s16 -> s11 [70, 70] { R888 += 1, R844 += 1, R780 += 1 };
  s16 -> s17 [70, 70] { R888 += 1, R844 += 1, R780 += 1 };
  s16 -> s18 [70, 70] { R888 += 1, R844 += 1 };
  s16 -> s12 [70, 70] { R888 += 1, R844 += 1 };
  s16 -> s15 [71, 65535] { R888 += 1, R844 += 1 };
  s16 -> s16 [71, 65535] { R888 += 1, R844 += 1, R780 += 1 };
  s18 -> s14 [0, 65535];
  s18 -> s18 [0, 65535] { R888 += 1 };
  accepting s12, s13, s14, s18, s15;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [102, 102];
  accepting s1;
};
};
constraint R3 = R888 && R23 - R888 = -1 && R24 = R888 && R25 - R888 = -1 && R26 = R888 && R27 = 0 && R28 = 1 && R29 = 0 && R30 = 1 && R45 + R84 + R83 + -1*R666 + -1*R662 - R66 = 0 && R49 + R89 + R87 = 0 && R50 + R90 + R88 + -1*R666 + -1*R662 - R66 = 0 && R55 + R96 + R93 + -1*R668 + -1*R664 - R68 = 0 && R65 + R665 + R661 = 0 && R67 + R667 + R663 = 0 && R829 = 0 && R830 = 0 && R835 = 0 && R836 = 0 && R841 = 0 && R842 = 0 && R843 = 0 && R844 = 0 && R845 = 0 && R846 = R888 && R847 = 0 && R848 = R888 && R849 = 0 && R850 = R888 && R851 = 0 && R852 = R888 && R853 = 0 && R854 = R888 && R855 = 0 && R856 = R888 && R857 = 0 && R858 = R888 && R859 = 0 && R860 = R888 && R861 = 0 && R862 = R888 && R863 = 0 && R864 = R888 && R865 = 0 && R866 = R888 && R867 = 0 && R868 = R888 && R869 = 0 && R870 = R888 && R871 = 0 && R872 = R888 && R873 = 0 && R874 = R888 && R875 = 0 && R876 = R888 && R877 = 0 && R878 = R888 && R879 = 0 && R880 = R888 && R881 = 0 && R882 = R888 && R883 = 0 && R884 = R888 && R885 = 0 && R886 = R888 && R887 = 0 && -1 < R2 && R12 < 1 && R15 < 1 && R16 < 1 && R47 + R86 + R85 < 1 && R61 + R102 + R99 < 1 && -1*R666 + -1*R662 - R66 < 1 && -1*R668 + -1*R664 - R68 < 1 && 0 < R888 && (R2 != 0 || R20 = 0 || (R789 = 0 && R790 = 0)) && (R2 != 0 || R20 = 0 || (R791 = 0 && R792 = 0)) && (R2 != 0 || R20 = 0 || (R793 = 0 && R794 = 0)) && (R2 != 0 || R20 = 0 || (R795 = 0 && R796 = 0)) && (R2 != 0 || R20 = 0 || (R797 = 0 && R798 = 0)) && (R2 != 0 || R20 = 0 || (R799 = 0 && R800 = 0)) && (R2 != 0 || R20 = 0 || (R801 = 0 && R802 = 0)) && (R2 != 0 || R20 = 0 || (R803 = 0 && R804 = 0)) && (R2 != 0 || R20 = 0 || (R805 = 0 && R806 = 0)) && (R2 != 0 || R20 = 0 || (R807 = 0 && R808 = 0)) && (R53 + R94 + R91 != 0 || R54 + R95 + R92 + -1*R666 + -1*R662 - R66 = 0 || R66 + R666 + R662 < 1) && (R59 + R100 + R97 != 0 || R60 + R101 + R98 + -1*R666 + -1*R662 - R66 = 0 || R66 + R666 + R662 < 1) && (R66 + R666 + R662 != 0 || ((R53 + R94 + R91 != 0 || R54 + R95 + R92 = 0 || R68 + R668 + R664 < 1) && (R53 + R94 + R91 = 0 || R68 + R668 + R664 < 1))) && (R66 + R666 + R662 != 0 || ((R59 + R100 + R97 != 0 || R60 + R101 + R98 = 0 || R68 + R668 + R664 < 1) && (R59 + R100 + R97 = 0 || R68 + R668 + R664 < 1))) && (R66 + R666 + R662 != 0 || ((R73 + R784 + R779 != 0 || R74 + R785 + R780 = 0 || R68 + R668 + R664 < 1) && (R73 + R784 + R779 = 0 || R68 + R668 + R664 < 1))) && (R68 + R668 + R664 != 0 || R77 + R788 + R783 = 0 || (R75 + R786 + R781 = 0 && R76 + R787 + R782 = 0)) && (R73 + R784 + R779 != 0 || R66 + R666 + R662 + -1*R785 + -1*R780 - R74 = 0 || R66 + R666 + R662 < 1) && (R75 + R786 + R781 != 0 || R68 + R668 + R664 + -1*R787 + -1*R782 - R76 = 0 || R68 + R668 + R664 < 1) && (R789 != 0 || R2 = R790 || R2 < 1) && (R791 != 0 || R2 = R792 || R2 < 1) && (R793 != 0 || R2 = R794 || R2 < 1) && (R795 != 0 || R2 = R796 || R2 < 1) && (R797 != 0 || R2 = R798 || R2 < 1) && (R799 != 0 || R2 = R800 || R2 < 1) && (R801 != 0 || R2 = R802 || R2 < 1) && (R803 != 0 || R2 = R804 || R2 < 1) && (R805 != 0 || R2 = R806 || R2 < 1) && (R807 != 0 || R2 = R808 || R2 < 1) && (R21 = 0 || (R827 = 0 && R828 = 0)) && (R21 = 0 || (R831 = 0 && R832 = 0)) && (R21 = 0 || (R833 = 0 && R834 = 0)) && (R21 = 0 || (R837 = 0 && R838 = 0)) && (R21 = 0 || (R839 = 0 && R840 = 0)) && (R22 = 0 || (R809 = 0 && R810 = 0)) && (R22 = 0 || (R811 = 0 && R812 = 0)) && (R22 = 0 || (R813 = 0 && R814 = 0)) && (R22 = 0 || (R815 = 0 && R816 = 0)) && (R22 = 0 || (R817 = 0 && R818 = 0)) && (R22 = 0 || (R819 = 0 && R820 = 0)) && (R22 = 0 || (R821 = 0 && R822 = 0)) && (R22 = 0 || (R823 = 0 && R824 = 0)) && (R22 = 0 || (R825 = 0 && R826 = 0)) && (R53 + R94 + R91 = 0 || R66 + R666 + R662 < 1) && (R59 + R100 + R97 = 0 || R66 + R666 + R662 < 1) && (R73 + R784 + R779 = 0 || R66 + R666 + R662 < 1) && (R75 + R786 + R781 = 0 || R68 + R668 + R664 < 1) && (R789 = 0 || R2 < 1) && (R791 = 0 || R2 < 1) && (R793 = 0 || R2 < 1) && (R795 = 0 || R2 < 1) && (R797 = 0 || R2 < 1) && (R799 = 0 || R2 < 1) && (R801 = 0 || R2 < 1) && (R803 = 0 || R2 < 1) && (R805 = 0 || R2 < 1) && (R807 = 0 || R2 < 1);
// End of Parikh automata intersection problem
