// Parikh automata intersection problem, generated by OSTRICH+
counter int R10159, R10160, R10161, R10162, R10163, R10164, R12, R12397, R12398, R12399, R12400, R12401, R12402, R12403, R12404, R12405, R12406, R12407, R12408, R12409, R12410, R12411, R12412, R12413, R12414, R12415, R12416, R12417, R12418, R12419, R12420, R12421, R12422, R12423, R12424, R12425, R12426, R12427, R12428, R12429, R12430, R12431, R12432, R12433, R12434, R12435, R12436, R12437, R12438, R12439, R12440, R12441, R12442, R12443, R12444, R12445, R12446, R12447, R12448, R12449, R12450, R12451, R12452, R12453, R12454, R12455, R12456, R12457, R12458, R12459, R12460, R12461, R12462, R12463, R12464, R12465, R12466, R12467, R12468, R12469, R12470, R12471, R12472, R12473, R12474, R12475, R12476, R12477, R12478, R12479, R12480, R12481, R12482, R12483, R12484, R12485, R12486, R12487, R12488, R12489, R12490, R12491, R12492, R12493, R12494, R12495, R12496, R12497, R12498, R12499, R12500, R12501, R12502, R12503, R12504, R12505, R12506, R12507, R12508, R12509, R12510, R12511, R12512, R12513, R12514, R15, R16, R2, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R4, R45, R47, R49, R5, R50, R53, R54, R55, R59, R60, R61, R65, R66, R67, R68, R73, R74, R75, R76, R77, R83, R84, R85, R86, R87, R88, R89, R90, R91, R92, R93, R94, R95, R96;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [70, 70];
  s0 -> s0 [71, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [70, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R15 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 69];
  s0 -> s0 [0, 65535] { R16 += 1 };
  s0 -> s2 [70, 70];
  s0 -> s1 [71, 65535];
  s1 -> s1 [0, 69];
  s1 -> s2 [70, 70];
  s1 -> s1 [71, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R24 += 1 };
  s0 -> s0 [0, 65535] { R23 += 1, R24 += 1 };
  s0 -> s2 [9, 13] { R24 += 1 };
  s0 -> s1 [14, 31] { R24 += 1 };
  s0 -> s2 [32, 32] { R24 += 1 };
  s0 -> s1 [33, 65535] { R24 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R24 += 1 };
  s2 -> s1 [0, 65535] { R24 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R25 += 1, R26 += 1 };
  s1 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R28 += 1 };
  s0 -> s0 [0, 65535] { R27 += 1, R28 += 1 };
  s0 -> s2 [9, 13] { R28 += 1 };
  s0 -> s1 [14, 31] { R28 += 1 };
  s0 -> s2 [32, 32] { R28 += 1 };
  s0 -> s1 [33, 65535] { R28 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R28 += 1 };
  s2 -> s1 [0, 65535] { R28 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R29 += 1, R30 += 1 };
  s1 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R12436 += 1, R22 += 1 };
  s0 -> s0 [0, 65535] { R12435 += 1, R12436 += 1 };
  s1 -> s1 [0, 65535] { R12436 += 1, R22 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 69] { R12438 += 1 };
  s0 -> s0 [0, 65535] { R12437 += 1, R12438 += 1 };
  s0 -> s2 [70, 70] { R12438 += 1 };
  s0 -> s3 [70, 70] { R12438 += 1 };
  s0 -> s1 [76, 65535] { R12438 += 1 };
  s1 -> s1 [0, 69] { R12438 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R12438 += 1 };
  s1 -> s3 [70, 70] { R12438 += 1 };
  s1 -> s1 [76, 65535] { R12438 += 1 };
  s2 -> s2 [0, 70] { R12438 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [76, 65535] { R12438 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 69] { R12440 += 1, R45 += 1 };
  s0 -> s0 [0, 65535] { R12439 += 1, R12440 += 1 };
  s0 -> s2 [70, 70] { R12440 += 1, R45 += 1 };
  s0 -> s3 [70, 70] { R12440 += 1, R45 += 1 };
  s0 -> s1 [71, 65535] { R12440 += 1, R45 += 1 };
  s1 -> s1 [0, 69] { R12440 += 1, R45 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R12440 += 1, R45 += 1 };
  s1 -> s3 [70, 70] { R12440 += 1, R45 += 1 };
  s1 -> s1 [71, 65535] { R12440 += 1, R45 += 1 };
  s2 -> s2 [0, 65535] { R12440 += 1, R45 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 69] { R12442 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R12441 += 1, R12442 += 1 };
  s0 -> s2 [70, 70] { R12442 += 1, R47 += 1 };
  s0 -> s3 [70, 70] { R12442 += 1, R47 += 1 };
  s0 -> s1 [71, 65535] { R12442 += 1, R47 += 1 };
  s1 -> s1 [0, 69] { R12442 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R12442 += 1, R47 += 1 };
  s1 -> s3 [70, 70] { R12442 += 1, R47 += 1 };
  s1 -> s1 [71, 65535] { R12442 += 1, R47 += 1 };
  s2 -> s2 [0, 65535] { R12442 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 69] { R12444 += 1, R49 += 1, R50 += 1 };
  s0 -> s0 [0, 65535] { R12443 += 1, R12444 += 1 };
  s0 -> s2 [70, 70] { R12444 += 1, R49 += 1, R50 += 1 };
  s0 -> s3 [70, 70] { R12444 += 1, R49 += 1, R50 += 1 };
  s0 -> s1 [71, 65535] { R12444 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 69] { R12444 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R12444 += 1, R49 += 1, R50 += 1 };
  s1 -> s3 [70, 70] { R12444 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [71, 65535] { R12444 += 1, R49 += 1, R50 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R12444 += 1, R49 += 1, R50 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 69] { R12446 += 1, R53 += 1, R54 += 1 };
  s0 -> s0 [0, 65535] { R12445 += 1, R12446 += 1 };
  s0 -> s2 [70, 70] { R12446 += 1, R53 += 1, R54 += 1 };
  s0 -> s3 [70, 70] { R12446 += 1, R53 += 1, R54 += 1 };
  s0 -> s1 [71, 65535] { R12446 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 69] { R12446 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R12446 += 1, R53 += 1, R54 += 1 };
  s1 -> s3 [70, 70] { R12446 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [71, 65535] { R12446 += 1, R53 += 1, R54 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R12446 += 1, R53 += 1, R54 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 69] { R12448 += 1, R59 += 1, R60 += 1 };
  s0 -> s0 [0, 65535] { R12447 += 1, R12448 += 1 };
  s0 -> s2 [70, 70] { R12448 += 1, R59 += 1, R60 += 1 };
  s0 -> s3 [70, 70] { R12448 += 1, R59 += 1, R60 += 1 };
  s0 -> s1 [71, 65535] { R12448 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 69] { R12448 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R12448 += 1, R59 += 1, R60 += 1 };
  s1 -> s3 [70, 70] { R12448 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [71, 65535] { R12448 += 1, R59 += 1, R60 += 1 };
  s2 -> s2 [0, 65535] { R12448 += 1, R59 += 1, R60 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 69] { R12450 += 1, R65 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R12449 += 1, R12450 += 1 };
  s0 -> s2 [70, 70] { R12450 += 1, R65 += 1, R66 += 1 };
  s0 -> s3 [70, 70] { R12450 += 1, R65 += 1, R66 += 1 };
  s0 -> s1 [71, 65535] { R12450 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 69] { R12450 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R12450 += 1, R65 += 1, R66 += 1 };
  s1 -> s3 [70, 70] { R12450 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [71, 65535] { R12450 += 1, R65 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R12450 += 1, R65 += 1, R66 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 69] { R12452 += 1, R73 += 1, R74 += 1 };
  s0 -> s0 [0, 65535] { R12451 += 1, R12452 += 1 };
  s0 -> s2 [70, 70] { R12452 += 1, R73 += 1, R74 += 1 };
  s0 -> s3 [70, 70] { R12452 += 1, R73 += 1, R74 += 1 };
  s0 -> s1 [71, 65535] { R12452 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 69] { R12452 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R12452 += 1, R73 += 1, R74 += 1 };
  s1 -> s3 [70, 70] { R12452 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [71, 65535] { R12452 += 1, R73 += 1, R74 += 1 };
  s2 -> s2 [0, 65535] { R12452 += 1, R73 += 1, R74 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 69] { R12472 += 1 };
  s0 -> s0 [0, 65535] { R12471 += 1, R12472 += 1 };
  s0 -> s2 [70, 70] { R12472 += 1 };
  s0 -> s1 [71, 65535] { R12472 += 1 };
  s1 -> s1 [0, 69] { R12472 += 1 };
  s1 -> s2 [70, 70] { R12472 += 1 };
  s1 -> s1 [71, 65535] { R12472 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R12472 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R12474 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R12473 += 1, R12474 += 1 };
  s1 -> s1 [0, 65535] { R12474 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 69] { R12476 += 1 };
  s0 -> s0 [0, 65535] { R12475 += 1, R12476 += 1 };
  s0 -> s2 [0, 65535] { R12476 += 1, R12 += 1 };
  s0 -> s3 [70, 70] { R12476 += 1 };
  s0 -> s1 [71, 65535] { R12476 += 1 };
  s1 -> s1 [0, 69] { R12476 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [70, 70] { R12476 += 1 };
  s1 -> s1 [71, 65535] { R12476 += 1 };
  s2 -> s1 [0, 69] { R12476 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R12476 += 1, R12 += 1 };
  s2 -> s3 [70, 70] { R12476 += 1 };
  s2 -> s1 [71, 65535] { R12476 += 1 };
  s3 -> s3 [0, 65535] { R12476 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 69] { R12478 += 1, R12416 += 1 };
  s0 -> s2 [0, 65535] { R12478 += 1, R12415 += 1, R12416 += 1 };
  s0 -> s0 [0, 65535] { R12477 += 1, R12478 += 1 };
  s0 -> s1 [71, 65535] { R12478 += 1, R12416 += 1 };
  s1 -> s1 [0, 69] { R12478 += 1, R12416 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R12478 += 1 };
  s1 -> s1 [71, 65535] { R12478 += 1, R12416 += 1 };
  s2 -> s1 [0, 69] { R12478 += 1, R12416 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R12478 += 1, R12415 += 1, R12416 += 1 };
  s2 -> s1 [71, 65535] { R12478 += 1, R12416 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s0 [0, 65535] { R12479 += 1, R12480 += 1 };
  s0 -> s1 [0, 65535] { R12480 += 1, R12417 += 1, R12418 += 1 };
  s0 -> s2 [0, 65535] { R12480 += 1, R12418 += 1, R20 += 1 };
  s1 -> s1 [0, 65535] { R12480 += 1, R12417 += 1, R12418 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R12480 += 1, R12418 += 1, R20 += 1 };
  s2 -> s3 [0, 65535] { R12480 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R12480 += 1, R12418 += 1, R20 += 1 };
  s3 -> s3 [0, 65535] { R12480 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 70] { R12482 += 1, R12420 += 1 };
  s0 -> s2 [0, 65535] { R12482 += 1, R12419 += 1, R12420 += 1 };
  s0 -> s0 [0, 65535] { R12481 += 1, R12482 += 1 };
  s0 -> s1 [75, 65535] { R12482 += 1, R12420 += 1 };
  s1 -> s1 [0, 70] { R12482 += 1, R12420 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R12482 += 1 };
  s1 -> s1 [75, 65535] { R12482 += 1, R12420 += 1 };
  s2 -> s1 [0, 70] { R12482 += 1, R12420 += 1 };
  s2 -> s2 [0, 65535] { R12482 += 1, R12419 += 1, R12420 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [75, 65535] { R12482 += 1, R12420 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R12484 += 1, R12422 += 1, R84 += 1 };
  s0 -> s0 [0, 65535] { R12483 += 1, R12484 += 1 };
  s0 -> s2 [0, 65535] { R12484 += 1, R12421 += 1, R12422 += 1 };
  s1 -> s4 [0, 65535] { R12484 += 1 };
  s1 -> s1 [0, 65535] { R12484 += 1, R12422 += 1, R84 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R12484 += 1, R12422 += 1, R84 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R12484 += 1, R12421 += 1, R12422 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R12484 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 74] { R12486 += 1, R12424 += 1 };
  s0 -> s2 [0, 65535] { R12486 += 1, R12424 += 1, R86 += 1 };
  s0 -> s0 [0, 65535] { R12485 += 1, R12486 += 1 };
  s0 -> s3 [0, 65535] { R12486 += 1, R12423 += 1, R12424 += 1 };
  s0 -> s1 [76, 65535] { R12486 += 1, R12424 += 1 };
  s1 -> s1 [0, 74] { R12486 += 1, R12424 += 1 };
  s1 -> s1 [0, 65535] { R12486 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [76, 65535] { R12486 += 1, R12424 += 1 };
  s2 -> s1 [0, 74] { R12486 += 1, R12424 += 1 };
  s2 -> s2 [0, 65535] { R12486 += 1, R12424 += 1, R86 += 1 };
  s2 -> s5 [0, 65535] { R12486 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [76, 65535] { R12486 += 1, R12424 += 1 };
  s3 -> s1 [0, 74] { R12486 += 1, R12424 += 1 };
  s3 -> s2 [0, 65535] { R12486 += 1, R12424 += 1, R86 += 1 };
  s3 -> s3 [0, 65535] { R12486 += 1, R12423 += 1, R12424 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [76, 65535] { R12486 += 1, R12424 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R12486 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 65535] { R12488 += 1, R12426 += 1, R90 += 1 };
  s0 -> s2 [0, 65535] { R12488 += 1, R12426 += 1 };
  s0 -> s0 [0, 65535] { R12487 += 1, R12488 += 1 };
  s0 -> s3 [0, 65535] { R12488 += 1, R12425 += 1, R12426 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R12488 += 1, R12426 += 1, R90 += 1 };
  s1 -> s2 [0, 65535] { R12488 += 1, R12426 += 1 };
  s1 -> s5 [0, 65535] { R12488 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R12488 += 1, R12426 += 1 };
  s2 -> s5 [0, 65535] { R12488 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R12488 += 1, R12426 += 1, R90 += 1 };
  s3 -> s2 [0, 65535] { R12488 += 1, R12426 += 1 };
  s3 -> s3 [0, 65535] { R12488 += 1, R12425 += 1, R12426 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R12488 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R12490 += 1, R12428 += 1, R95 += 1, R96 += 1 };
  s0 -> s2 [0, 65535] { R12490 += 1, R12428 += 1, R94 += 1, R95 += 1 };
  s0 -> s0 [0, 65535] { R12489 += 1, R12490 += 1 };
  s0 -> s3 [0, 65535] { R12490 += 1, R12427 += 1, R12428 += 1 };
  s1 -> s1 [0, 65535] { R12490 += 1, R12428 += 1, R95 += 1, R96 += 1 };
  s1 -> s5 [0, 65535] { R12490 += 1 };
  s1 -> s6 [0, 65535] { R12490 += 1, R12428 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R12490 += 1, R12428 += 1, R95 += 1, R96 += 1 };
  s2 -> s5 [0, 65535] { R12490 += 1 };
  s2 -> s2 [0, 65535] { R12490 += 1, R12428 += 1, R94 += 1, R95 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R12490 += 1, R12428 += 1, R95 += 1, R96 += 1 };
  s3 -> s2 [0, 65535] { R12490 += 1, R12428 += 1, R94 += 1, R95 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R12490 += 1, R12427 += 1, R12428 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R12490 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R12490 += 1 };
  s6 -> s6 [0, 65535] { R12490 += 1, R12428 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 65535] { R12492 += 1, R12430 += 1 };
  s0 -> s0 [0, 65535] { R12491 += 1, R12492 += 1 };
  s0 -> s2 [0, 65535] { R12492 += 1, R12429 += 1, R12430 += 1 };
  s1 -> s1 [0, 65535] { R12492 += 1, R12430 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R12492 += 1 };
  s2 -> s1 [0, 65535] { R12492 += 1, R12430 += 1 };
  s2 -> s2 [0, 65535] { R12492 += 1, R12429 += 1, R12430 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R12492 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 74] { R12494 += 1, R12432 += 1, R12402 += 1, R12404 += 1 };
  s0 -> s0 [0, 65535] { R12493 += 1, R12494 += 1 };
  s0 -> s2 [0, 65535] { R12494 += 1, R12431 += 1, R12432 += 1 };
  s0 -> s3 [75, 75] { R12494 += 1, R12432 += 1, R12402 += 1, R12404 += 1 };
  s0 -> s1 [76, 65535] { R12494 += 1, R12432 += 1, R12402 += 1, R12404 += 1 };
  s1 -> s1 [0, 74] { R12494 += 1, R12432 += 1, R12402 += 1, R12404 += 1 };
  s1 -> s3 [75, 75] { R12494 += 1, R12432 += 1, R12402 += 1, R12404 += 1 };
  s1 -> s1 [76, 65535] { R12494 += 1, R12432 += 1, R12402 += 1, R12404 += 1 };
  s2 -> s1 [0, 74] { R12494 += 1, R12432 += 1, R12402 += 1, R12404 += 1 };
  s2 -> s2 [0, 65535] { R12494 += 1, R12431 += 1, R12432 += 1 };
  s2 -> s3 [75, 75] { R12494 += 1, R12432 += 1, R12402 += 1, R12404 += 1 };
  s2 -> s1 [76, 65535] { R12494 += 1, R12432 += 1, R12402 += 1, R12404 += 1 };
  s3 -> s3 [0, 65535] { R12494 += 1, R12432 += 1, R12402 += 1, R12404 += 1 };
  s3 -> s4 [0, 65535] { R12494 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R12494 += 1, R12432 += 1 };
  s3 -> s7 [0, 65535] { R12494 += 1, R12432 += 1, R12402 += 1 };
  s4 -> s4 [0, 65535] { R12494 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R12494 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R12494 += 1, R12432 += 1 };
  s7 -> s4 [0, 65535] { R12494 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R12494 += 1, R12432 += 1 };
  s7 -> s7 [0, 65535] { R12494 += 1, R12432 += 1, R12402 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 65535] { R12496 += 1, R12434 += 1, R12411 += 1 };
  s0 -> s2 [0, 65535] { R12496 += 1, R12434 += 1 };
  s0 -> s3 [0, 65535] { R12496 += 1, R12433 += 1, R12434 += 1 };
  s0 -> s0 [0, 65535] { R12495 += 1, R12496 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R12496 += 1, R12434 += 1, R12411 += 1 };
  s1 -> s2 [0, 65535] { R12496 += 1, R12434 += 1 };
  s1 -> s5 [0, 65535] { R12496 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R12496 += 1, R12434 += 1 };
  s2 -> s5 [0, 65535] { R12496 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R12496 += 1, R12434 += 1, R12411 += 1 };
  s3 -> s2 [0, 65535] { R12496 += 1, R12434 += 1 };
  s3 -> s3 [0, 65535] { R12496 += 1, R12433 += 1, R12434 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R12496 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R12498 += 1, R12454 += 1, R21 += 1 };
  s0 -> s0 [0, 65535] { R12497 += 1, R12498 += 1 };
  s0 -> s2 [0, 65535] { R12498 += 1, R12453 += 1, R12454 += 1 };
  s1 -> s1 [0, 65535] { R12498 += 1, R12454 += 1, R21 += 1 };
  s1 -> s4 [0, 65535] { R12498 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R12498 += 1, R12454 += 1, R21 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R12498 += 1, R12453 += 1, R12454 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R12498 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 69] { R12500 += 1, R12456 += 1 };
  s0 -> s2 [0, 65535] { R12500 += 1, R12455 += 1, R12456 += 1 };
  s0 -> s0 [0, 65535] { R12499 += 1, R12500 += 1 };
  s0 -> s3 [70, 70] { R12500 += 1, R12456 += 1 };
  s0 -> s4 [70, 70] { R12500 += 1, R12456 += 1 };
  s0 -> s5 [75, 75] { R12500 += 1, R12456 += 1 };
  s0 -> s1 [76, 65535] { R12500 += 1, R12456 += 1 };
  s1 -> s1 [0, 69] { R12500 += 1, R12456 += 1 };
  s1 -> s3 [70, 70] { R12500 += 1, R12456 += 1 };
  s1 -> s4 [70, 70] { R12500 += 1, R12456 += 1 };
  s1 -> s5 [75, 75] { R12500 += 1, R12456 += 1 };
  s1 -> s1 [76, 65535] { R12500 += 1, R12456 += 1 };
  s2 -> s1 [0, 69] { R12500 += 1, R12456 += 1 };
  s2 -> s2 [0, 65535] { R12500 += 1, R12455 += 1, R12456 += 1 };
  s2 -> s3 [70, 70] { R12500 += 1, R12456 += 1 };
  s2 -> s4 [70, 70] { R12500 += 1, R12456 += 1 };
  s2 -> s5 [75, 75] { R12500 += 1, R12456 += 1 };
  s2 -> s1 [76, 65535] { R12500 += 1, R12456 += 1 };
  s3 -> s3 [0, 70] { R12500 += 1, R12456 += 1 };
  s3 -> s7 [75, 75] { R12500 += 1, R12456 += 1 };
  s3 -> s3 [76, 65535] { R12500 += 1, R12456 += 1 };
  s5 -> s5 [0, 69] { R12500 += 1, R12456 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R12500 += 1 };
  s5 -> s7 [70, 70] { R12500 += 1, R12456 += 1 };
  s5 -> s8 [70, 70] { R12500 += 1, R12456 += 1 };
  s5 -> s5 [75, 65535] { R12500 += 1, R12456 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 70] { R12500 += 1, R12456 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R12500 += 1 };
  s7 -> s7 [75, 65535] { R12500 += 1, R12456 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R12500 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 69] { R12502 += 1, R12458 += 1, R83 += 1 };
  s0 -> s2 [0, 65535] { R12502 += 1, R12457 += 1, R12458 += 1 };
  s0 -> s0 [0, 65535] { R12501 += 1, R12502 += 1 };
  s0 -> s3 [70, 70] { R12502 += 1, R12458 += 1, R83 += 1 };
  s0 -> s4 [70, 70] { R12502 += 1, R12458 += 1, R83 += 1 };
  s0 -> s1 [71, 65535] { R12502 += 1, R12458 += 1, R83 += 1 };
  s1 -> s1 [0, 69] { R12502 += 1, R12458 += 1, R83 += 1 };
  s1 -> s1 [0, 65535] { R12502 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [70, 70] { R12502 += 1, R12458 += 1, R83 += 1 };
  s1 -> s4 [70, 70] { R12502 += 1, R12458 += 1, R83 += 1 };
  s1 -> s1 [71, 65535] { R12502 += 1, R12458 += 1, R83 += 1 };
  s2 -> s1 [0, 69] { R12502 += 1, R12458 += 1, R83 += 1 };
  s2 -> s2 [0, 65535] { R12502 += 1, R12457 += 1, R12458 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [70, 70] { R12502 += 1, R12458 += 1, R83 += 1 };
  s2 -> s4 [70, 70] { R12502 += 1, R12458 += 1, R83 += 1 };
  s2 -> s1 [71, 65535] { R12502 += 1, R12458 += 1, R83 += 1 };
  s3 -> s6 [0, 65535] { R12502 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R12502 += 1, R12458 += 1, R83 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R12502 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R12502 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 69] { R12504 += 1, R12460 += 1, R85 += 1 };
  s0 -> s2 [0, 65535] { R12504 += 1, R12459 += 1, R12460 += 1 };
  s0 -> s0 [0, 65535] { R12503 += 1, R12504 += 1 };
  s0 -> s3 [70, 70] { R12504 += 1, R12460 += 1, R85 += 1 };
  s0 -> s4 [70, 70] { R12504 += 1, R12460 += 1, R85 += 1 };
  s0 -> s1 [71, 65535] { R12504 += 1, R12460 += 1, R85 += 1 };
  s1 -> s1 [0, 69] { R12504 += 1, R12460 += 1, R85 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R12504 += 1 };
  s1 -> s3 [70, 70] { R12504 += 1, R12460 += 1, R85 += 1 };
  s1 -> s4 [70, 70] { R12504 += 1, R12460 += 1, R85 += 1 };
  s1 -> s1 [71, 65535] { R12504 += 1, R12460 += 1, R85 += 1 };
  s2 -> s1 [0, 69] { R12504 += 1, R12460 += 1, R85 += 1 };
  s2 -> s2 [0, 65535] { R12504 += 1, R12459 += 1, R12460 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [70, 70] { R12504 += 1, R12460 += 1, R85 += 1 };
  s2 -> s4 [70, 70] { R12504 += 1, R12460 += 1, R85 += 1 };
  s2 -> s1 [71, 65535] { R12504 += 1, R12460 += 1, R85 += 1 };
  s3 -> s3 [0, 65535] { R12504 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R12504 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R12504 += 1, R12460 += 1, R85 += 1 };
  s5 -> s5 [0, 65535] { R12504 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 69] { R12506 += 1, R12462 += 1, R88 += 1 };
  s0 -> s2 [0, 69] { R12506 += 1, R12462 += 1, R87 += 1, R88 += 1 };
  s0 -> s0 [0, 65535] { R12505 += 1, R12506 += 1 };
  s0 -> s3 [0, 65535] { R12506 += 1, R12461 += 1, R12462 += 1 };
  s0 -> s4 [70, 70] { R12506 += 1, R12462 += 1, R88 += 1 };
  s0 -> s5 [70, 70] { R12506 += 1, R12462 += 1, R87 += 1, R88 += 1 };
  s0 -> s6 [70, 70] { R12506 += 1, R12462 += 1, R88 += 1 };
  s0 -> s7 [70, 70] { R12506 += 1, R12462 += 1, R87 += 1, R88 += 1 };
  s0 -> s1 [71, 74] { R12506 += 1, R12462 += 1, R88 += 1 };
  s0 -> s2 [71, 65535] { R12506 += 1, R12462 += 1, R87 += 1, R88 += 1 };
  s0 -> s8 [75, 75] { R12506 += 1, R12462 += 1, R88 += 1 };
  s0 -> s1 [76, 65535] { R12506 += 1, R12462 += 1, R88 += 1 };
  s1 -> s1 [0, 69] { R12506 += 1, R12462 += 1, R88 += 1 };
  s1 -> s4 [70, 70] { R12506 += 1, R12462 += 1, R88 += 1 };
  s1 -> s6 [70, 70] { R12506 += 1, R12462 += 1, R88 += 1 };
  s1 -> s1 [71, 74] { R12506 += 1, R12462 += 1, R88 += 1 };
  s1 -> s8 [75, 75] { R12506 += 1, R12462 += 1, R88 += 1 };
  s1 -> s1 [76, 65535] { R12506 += 1, R12462 += 1, R88 += 1 };
  s2 -> s1 [0, 69] { R12506 += 1, R12462 += 1, R88 += 1 };
  s2 -> s2 [0, 69] { R12506 += 1, R12462 += 1, R87 += 1, R88 += 1 };
  s2 -> s4 [70, 70] { R12506 += 1, R12462 += 1, R88 += 1 };
  s2 -> s5 [70, 70] { R12506 += 1, R12462 += 1, R87 += 1, R88 += 1 };
  s2 -> s6 [70, 70] { R12506 += 1, R12462 += 1, R88 += 1 };
  s2 -> s7 [70, 70] { R12506 += 1, R12462 += 1, R87 += 1, R88 += 1 };
  s2 -> s1 [71, 74] { R12506 += 1, R12462 += 1, R88 += 1 };
  s2 -> s2 [71, 65535] { R12506 += 1, R12462 += 1, R87 += 1, R88 += 1 };
  s2 -> s8 [75, 75] { R12506 += 1, R12462 += 1, R88 += 1 };
  s2 -> s1 [76, 65535] { R12506 += 1, R12462 += 1, R88 += 1 };
  s3 -> s1 [0, 69] { R12506 += 1, R12462 += 1, R88 += 1 };
  s3 -> s2 [0, 69] { R12506 += 1, R12462 += 1, R87 += 1, R88 += 1 };
  s3 -> s3 [0, 65535] { R12506 += 1, R12461 += 1, R12462 += 1 };
  s3 -> s4 [70, 70] { R12506 += 1, R12462 += 1, R88 += 1 };
  s3 -> s5 [70, 70] { R12506 += 1, R12462 += 1, R87 += 1, R88 += 1 };
  s3 -> s6 [70, 70] { R12506 += 1, R12462 += 1, R88 += 1 };
  s3 -> s7 [70, 70] { R12506 += 1, R12462 += 1, R87 += 1, R88 += 1 };
  s3 -> s1 [71, 74] { R12506 += 1, R12462 += 1, R88 += 1 };
  s3 -> s2 [71, 65535] { R12506 += 1, R12462 += 1, R87 += 1, R88 += 1 };
  s3 -> s8 [75, 75] { R12506 += 1, R12462 += 1, R88 += 1 };
  s3 -> s1 [76, 65535] { R12506 += 1, R12462 += 1, R88 += 1 };
  s4 -> s4 [0, 74] { R12506 += 1, R12462 += 1, R88 += 1 };
  s4 -> s11 [75, 75] { R12506 += 1, R12462 += 1, R88 += 1 };
  s4 -> s4 [76, 65535] { R12506 += 1, R12462 += 1, R88 += 1 };
  s7 -> s4 [0, 74] { R12506 += 1, R12462 += 1, R88 += 1 };
  s7 -> s7 [0, 65535] { R12506 += 1, R12462 += 1, R87 += 1, R88 += 1 };
  s7 -> s11 [75, 75] { R12506 += 1, R12462 += 1, R88 += 1 };
  s7 -> s4 [76, 65535] { R12506 += 1, R12462 += 1, R88 += 1 };
  s8 -> s8 [0, 69] { R12506 += 1, R12462 += 1, R88 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R12506 += 1 };
  s8 -> s10 [70, 70] { R12506 += 1, R12462 += 1, R88 += 1 };
  s8 -> s11 [70, 70] { R12506 += 1, R12462 += 1, R88 += 1 };
  s8 -> s8 [71, 65535] { R12506 += 1, R12462 += 1, R88 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R12506 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s12 [0, 65535] { R12506 += 1 };
  s11 -> s11 [0, 65535] { R12506 += 1, R12462 += 1, R88 += 1 };
  s11 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R12506 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 69] { R12508 += 1, R12464 += 1, R91 += 1, R92 += 1 };
  s0 -> s2 [0, 65535] { R12508 += 1, R12463 += 1, R12464 += 1 };
  s0 -> s0 [0, 65535] { R12507 += 1, R12508 += 1 };
  s0 -> s3 [70, 70] { R12508 += 1, R12464 += 1, R91 += 1, R92 += 1 };
  s0 -> s4 [70, 70] { R12508 += 1, R12464 += 1, R91 += 1, R92 += 1 };
  s0 -> s1 [71, 65535] { R12508 += 1, R12464 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 69] { R12508 += 1, R12464 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 65535] { R12508 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [70, 70] { R12508 += 1, R12464 += 1, R91 += 1, R92 += 1 };
  s1 -> s4 [70, 70] { R12508 += 1, R12464 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [71, 65535] { R12508 += 1, R12464 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [0, 69] { R12508 += 1, R12464 += 1, R91 += 1, R92 += 1 };
  s2 -> s2 [0, 65535] { R12508 += 1, R12463 += 1, R12464 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [70, 70] { R12508 += 1, R12464 += 1, R91 += 1, R92 += 1 };
  s2 -> s4 [70, 70] { R12508 += 1, R12464 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [71, 65535] { R12508 += 1, R12464 += 1, R91 += 1, R92 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R12508 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R12508 += 1 };
  s4 -> s4 [0, 65535] { R12508 += 1, R12464 += 1, R91 += 1, R92 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R12508 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 69] { R12510 += 1, R12466 += 1, R10160 += 1, R10161 += 1 };
  s0 -> s2 [0, 69] { R12510 += 1, R12466 += 1, R10159 += 1, R10160 += 1 };
  s0 -> s3 [0, 65535] { R12510 += 1, R12465 += 1, R12466 += 1 };
  s0 -> s0 [0, 65535] { R12509 += 1, R12510 += 1 };
  s0 -> s4 [70, 70] { R12510 += 1, R12466 += 1, R10160 += 1, R10161 += 1 };
  s0 -> s5 [70, 70] { R12510 += 1, R12466 += 1, R10159 += 1, R10160 += 1 };
  s0 -> s6 [70, 70] { R12510 += 1, R12466 += 1, R10159 += 1, R10160 += 1 };
  s0 -> s7 [70, 70] { R12510 += 1, R12466 += 1, R10160 += 1, R10161 += 1 };
  s0 -> s1 [71, 65535] { R12510 += 1, R12466 += 1, R10160 += 1, R10161 += 1 };
  s0 -> s2 [71, 65535] { R12510 += 1, R12466 += 1, R10159 += 1, R10160 += 1 };
  s1 -> s11 [0, 69] { R12510 += 1, R12466 += 1 };
  s1 -> s1 [0, 69] { R12510 += 1, R12466 += 1, R10160 += 1, R10161 += 1 };
  s1 -> s4 [70, 70] { R12510 += 1, R12466 += 1, R10160 += 1, R10161 += 1 };
  s1 -> s12 [70, 70] { R12510 += 1, R12466 += 1 };
  s1 -> s8 [70, 70] { R12510 += 1, R12466 += 1 };
  s1 -> s7 [70, 70] { R12510 += 1, R12466 += 1, R10160 += 1, R10161 += 1 };
  s1 -> s11 [71, 65535] { R12510 += 1, R12466 += 1 };
  s1 -> s1 [71, 65535] { R12510 += 1, R12466 += 1, R10160 += 1, R10161 += 1 };
  s2 -> s1 [0, 69] { R12510 += 1, R12466 += 1, R10160 += 1, R10161 += 1 };
  s2 -> s2 [0, 69] { R12510 += 1, R12466 += 1, R10159 += 1, R10160 += 1 };
  s2 -> s4 [70, 70] { R12510 += 1, R12466 += 1, R10160 += 1, R10161 += 1 };
  s2 -> s5 [70, 70] { R12510 += 1, R12466 += 1, R10159 += 1, R10160 += 1 };
  s2 -> s6 [70, 70] { R12510 += 1, R12466 += 1, R10159 += 1, R10160 += 1 };
  s2 -> s7 [70, 70] { R12510 += 1, R12466 += 1, R10160 += 1, R10161 += 1 };
  s2 -> s1 [71, 65535] { R12510 += 1, R12466 += 1, R10160 += 1, R10161 += 1 };
  s2 -> s2 [71, 65535] { R12510 += 1, R12466 += 1, R10159 += 1, R10160 += 1 };
  s3 -> s1 [0, 69] { R12510 += 1, R12466 += 1, R10160 += 1, R10161 += 1 };
  s3 -> s2 [0, 69] { R12510 += 1, R12466 += 1, R10159 += 1, R10160 += 1 };
  s3 -> s3 [0, 65535] { R12510 += 1, R12465 += 1, R12466 += 1 };
  s3 -> s4 [70, 70] { R12510 += 1, R12466 += 1, R10160 += 1, R10161 += 1 };
  s3 -> s5 [70, 70] { R12510 += 1, R12466 += 1, R10159 += 1, R10160 += 1 };
  s3 -> s6 [70, 70] { R12510 += 1, R12466 += 1, R10159 += 1, R10160 += 1 };
  s3 -> s7 [70, 70] { R12510 += 1, R12466 += 1, R10160 += 1, R10161 += 1 };
  s3 -> s1 [71, 65535] { R12510 += 1, R12466 += 1, R10160 += 1, R10161 += 1 };
  s3 -> s2 [71, 65535] { R12510 += 1, R12466 += 1, R10159 += 1, R10160 += 1 };
  s5 -> s5 [0, 65535] { R12510 += 1, R12466 += 1, R10159 += 1, R10160 += 1 };
  s5 -> s7 [0, 65535] { R12510 += 1, R12466 += 1, R10160 += 1, R10161 += 1 };
  s7 -> s8 [0, 65535] { R12510 += 1, R12466 += 1 };
  s7 -> s7 [0, 65535] { R12510 += 1, R12466 += 1, R10160 += 1, R10161 += 1 };
  s8 -> s9 [0, 65535] { R12510 += 1 };
  s8 -> s10 [0, 65535];
  s8 -> s8 [0, 65535] { R12510 += 1, R12466 += 1 };
  s9 -> s9 [0, 65535] { R12510 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s11 [0, 69] { R12510 += 1, R12466 += 1 };
  s11 -> s11 [0, 65535] { R12510 += 1 };
  s11 -> s10 [0, 65535];
  s11 -> s12 [70, 70] { R12510 += 1, R12466 += 1 };
  s11 -> s8 [70, 70] { R12510 += 1, R12466 += 1 };
  s11 -> s11 [71, 65535] { R12510 += 1, R12466 += 1 };
  s12 -> s12 [0, 65535] { R12510 += 1 };
  s12 -> s10 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 69] { R12512 += 1, R12468 += 1, R12397 += 1, R12398 += 1 };
  s0 -> s2 [0, 69] { R12512 += 1, R12468 += 1, R12398 += 1, R12399 += 1, R12400 += 1 };
  s0 -> s3 [0, 69] { R12512 += 1, R12468 += 1, R12398 += 1, R12400 += 1 };
  s0 -> s4 [0, 65535] { R12512 += 1, R12467 += 1, R12468 += 1 };
  s0 -> s0 [0, 65535] { R12511 += 1, R12512 += 1 };
  s0 -> s5 [70, 70] { R12512 += 1, R12468 += 1, R12398 += 1, R12399 += 1, R12400 += 1 };
  s0 -> s6 [70, 70] { R12512 += 1, R12468 += 1, R12397 += 1, R12398 += 1 };
  s0 -> s7 [70, 70] { R12512 += 1, R12468 += 1, R12398 += 1, R12399 += 1, R12400 += 1 };
  s0 -> s8 [70, 70] { R12512 += 1, R12468 += 1, R12398 += 1, R12400 += 1 };
  s0 -> s9 [70, 70] { R12512 += 1, R12468 += 1, R12397 += 1, R12398 += 1 };
  s0 -> s10 [70, 70] { R12512 += 1, R12468 += 1, R12398 += 1, R12400 += 1 };
  s0 -> s3 [71, 74] { R12512 += 1, R12468 += 1, R12398 += 1, R12400 += 1 };
  s0 -> s1 [71, 65535] { R12512 += 1, R12468 += 1, R12397 += 1, R12398 += 1 };
  s0 -> s2 [71, 65535] { R12512 += 1, R12468 += 1, R12398 += 1, R12399 += 1, R12400 += 1 };
  s0 -> s3 [76, 65535] { R12512 += 1, R12468 += 1, R12398 += 1, R12400 += 1 };
  s1 -> s1 [0, 69] { R12512 += 1, R12468 += 1, R12397 += 1, R12398 += 1 };
  s1 -> s2 [0, 69] { R12512 += 1, R12468 += 1, R12398 += 1, R12399 += 1, R12400 += 1 };
  s1 -> s3 [0, 69] { R12512 += 1, R12468 += 1, R12398 += 1, R12400 += 1 };
  s1 -> s5 [70, 70] { R12512 += 1, R12468 += 1, R12398 += 1, R12399 += 1, R12400 += 1 };
  s1 -> s6 [70, 70] { R12512 += 1, R12468 += 1, R12397 += 1, R12398 += 1 };
  s1 -> s7 [70, 70] { R12512 += 1, R12468 += 1, R12398 += 1, R12399 += 1, R12400 += 1 };
  s1 -> s8 [70, 70] { R12512 += 1, R12468 += 1, R12398 += 1, R12400 += 1 };
  s1 -> s9 [70, 70] { R12512 += 1, R12468 += 1, R12397 += 1, R12398 += 1 };
  s1 -> s10 [70, 70] { R12512 += 1, R12468 += 1, R12398 += 1, R12400 += 1 };
  s1 -> s3 [71, 74] { R12512 += 1, R12468 += 1, R12398 += 1, R12400 += 1 };
  s1 -> s1 [71, 65535] { R12512 += 1, R12468 += 1, R12397 += 1, R12398 += 1 };
  s1 -> s2 [71, 65535] { R12512 += 1, R12468 += 1, R12398 += 1, R12399 += 1, R12400 += 1 };
  s1 -> s3 [76, 65535] { R12512 += 1, R12468 += 1, R12398 += 1, R12400 += 1 };
  s2 -> s2 [0, 69] { R12512 += 1, R12468 += 1, R12398 += 1, R12399 += 1, R12400 += 1 };
  s2 -> s3 [0, 69] { R12512 += 1, R12468 += 1, R12398 += 1, R12400 += 1 };
  s2 -> s5 [70, 70] { R12512 += 1, R12468 += 1, R12398 += 1, R12399 += 1, R12400 += 1 };
  s2 -> s7 [70, 70] { R12512 += 1, R12468 += 1, R12398 += 1, R12399 += 1, R12400 += 1 };
  s2 -> s8 [70, 70] { R12512 += 1, R12468 += 1, R12398 += 1, R12400 += 1 };
  s2 -> s10 [70, 70] { R12512 += 1, R12468 += 1, R12398 += 1, R12400 += 1 };
  s2 -> s3 [71, 74] { R12512 += 1, R12468 += 1, R12398 += 1, R12400 += 1 };
  s2 -> s2 [71, 65535] { R12512 += 1, R12468 += 1, R12398 += 1, R12399 += 1, R12400 += 1 };
  s2 -> s3 [76, 65535] { R12512 += 1, R12468 += 1, R12398 += 1, R12400 += 1 };
  s3 -> s3 [0, 69] { R12512 += 1, R12468 += 1, R12398 += 1, R12400 += 1 };
  s3 -> s11 [0, 65535];
  s3 -> s3 [0, 65535] { R12512 += 1 };
  s3 -> s8 [70, 70] { R12512 += 1, R12468 += 1, R12398 += 1, R12400 += 1 };
  s3 -> s10 [70, 70] { R12512 += 1, R12468 += 1, R12398 += 1, R12400 += 1 };
  s3 -> s3 [71, 74] { R12512 += 1, R12468 += 1, R12398 += 1, R12400 += 1 };
  s3 -> s3 [76, 65535] { R12512 += 1, R12468 += 1, R12398 += 1, R12400 += 1 };
  s4 -> s1 [0, 69] { R12512 += 1, R12468 += 1, R12397 += 1, R12398 += 1 };
  s4 -> s2 [0, 69] { R12512 += 1, R12468 += 1, R12398 += 1, R12399 += 1, R12400 += 1 };
  s4 -> s3 [0, 69] { R12512 += 1, R12468 += 1, R12398 += 1, R12400 += 1 };
  s4 -> s4 [0, 65535] { R12512 += 1, R12467 += 1, R12468 += 1 };
  s4 -> s5 [70, 70] { R12512 += 1, R12468 += 1, R12398 += 1, R12399 += 1, R12400 += 1 };
  s4 -> s6 [70, 70] { R12512 += 1, R12468 += 1, R12397 += 1, R12398 += 1 };
  s4 -> s7 [70, 70] { R12512 += 1, R12468 += 1, R12398 += 1, R12399 += 1, R12400 += 1 };
  s4 -> s8 [70, 70] { R12512 += 1, R12468 += 1, R12398 += 1, R12400 += 1 };
  s4 -> s9 [70, 70] { R12512 += 1, R12468 += 1, R12397 += 1, R12398 += 1 };
  s4 -> s10 [70, 70] { R12512 += 1, R12468 += 1, R12398 += 1, R12400 += 1 };
  s4 -> s3 [71, 74] { R12512 += 1, R12468 += 1, R12398 += 1, R12400 += 1 };
  s4 -> s1 [71, 65535] { R12512 += 1, R12468 += 1, R12397 += 1, R12398 += 1 };
  s4 -> s2 [71, 65535] { R12512 += 1, R12468 += 1, R12398 += 1, R12399 += 1, R12400 += 1 };
  s4 -> s3 [76, 65535] { R12512 += 1, R12468 += 1, R12398 += 1, R12400 += 1 };
  s5 -> s8 [0, 74] { R12512 += 1, R12468 += 1, R12398 += 1, R12400 += 1 };
  s5 -> s5 [0, 65535] { R12512 += 1, R12468 += 1, R12398 += 1, R12399 += 1, R12400 += 1 };
  s5 -> s8 [76, 65535] { R12512 += 1, R12468 += 1, R12398 += 1, R12400 += 1 };
  s8 -> s8 [0, 74] { R12512 += 1, R12468 += 1, R12398 += 1, R12400 += 1 };
  s8 -> s11 [0, 65535];
  s8 -> s8 [0, 65535] { R12512 += 1 };
  s8 -> s8 [76, 65535] { R12512 += 1, R12468 += 1, R12398 += 1, R12400 += 1 };
  s9 -> s8 [0, 74] { R12512 += 1, R12468 += 1, R12398 += 1, R12400 += 1 };
  s9 -> s5 [0, 65535] { R12512 += 1, R12468 += 1, R12398 += 1, R12399 += 1, R12400 += 1 };
  s9 -> s9 [0, 65535] { R12512 += 1, R12468 += 1, R12397 += 1, R12398 += 1 };
  s9 -> s8 [76, 65535] { R12512 += 1, R12468 += 1, R12398 += 1, R12400 += 1 };
  s10 -> s11 [0, 65535];
  s10 -> s10 [0, 65535] { R12512 += 1 };
  s11 -> s11 [0, 65535];
  accepting s3, s8, s10, s11;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 69] { R12514 += 1, R12470 += 1, R12406 += 1, R12407 += 1, R12408 += 1 };
  s0 -> s2 [0, 69] { R12514 += 1, R12470 += 1, R12406 += 1, R12408 += 1, R12409 += 1 };
  s0 -> s3 [0, 69] { R12514 += 1, R12470 += 1, R12405 += 1, R12406 += 1 };
  s0 -> s0 [0, 65535] { R12513 += 1, R12514 += 1 };
  s0 -> s4 [0, 65535] { R12514 += 1, R12469 += 1, R12470 += 1 };
  s0 -> s5 [70, 70] { R12514 += 1, R12470 += 1, R12406 += 1, R12407 += 1, R12408 += 1 };
  s0 -> s6 [70, 70] { R12514 += 1, R12470 += 1, R12406 += 1, R12407 += 1, R12408 += 1 };
  s0 -> s7 [70, 70] { R12514 += 1, R12470 += 1, R12405 += 1, R12406 += 1 };
  s0 -> s8 [70, 70] { R12514 += 1, R12470 += 1, R12406 += 1, R12408 += 1, R12409 += 1 };
  s0 -> s9 [70, 70] { R12514 += 1, R12470 += 1, R12406 += 1, R12408 += 1, R12409 += 1 };
  s0 -> s10 [70, 70] { R12514 += 1, R12470 += 1, R12405 += 1, R12406 += 1 };
  s0 -> s1 [71, 65535] { R12514 += 1, R12470 += 1, R12406 += 1, R12407 += 1, R12408 += 1 };
  s0 -> s2 [71, 65535] { R12514 += 1, R12470 += 1, R12406 += 1, R12408 += 1, R12409 += 1 };
  s0 -> s3 [71, 65535] { R12514 += 1, R12470 += 1, R12405 += 1, R12406 += 1 };
  s1 -> s1 [0, 69] { R12514 += 1, R12470 += 1, R12406 += 1, R12407 += 1, R12408 += 1 };
  s1 -> s2 [0, 69] { R12514 += 1, R12470 += 1, R12406 += 1, R12408 += 1, R12409 += 1 };
  s1 -> s5 [70, 70] { R12514 += 1, R12470 += 1, R12406 += 1, R12407 += 1, R12408 += 1 };
  s1 -> s6 [70, 70] { R12514 += 1, R12470 += 1, R12406 += 1, R12407 += 1, R12408 += 1 };
  s1 -> s8 [70, 70] { R12514 += 1, R12470 += 1, R12406 += 1, R12408 += 1, R12409 += 1 };
  s1 -> s9 [70, 70] { R12514 += 1, R12470 += 1, R12406 += 1, R12408 += 1, R12409 += 1 };
  s1 -> s1 [71, 65535] { R12514 += 1, R12470 += 1, R12406 += 1, R12407 += 1, R12408 += 1 };
  s1 -> s2 [71, 65535] { R12514 += 1, R12470 += 1, R12406 += 1, R12408 += 1, R12409 += 1 };
  s2 -> s14 [0, 69] { R12514 += 1, R12470 += 1, R12406 += 1 };
  s2 -> s2 [0, 69] { R12514 += 1, R12470 += 1, R12406 += 1, R12408 += 1, R12409 += 1 };
  s2 -> s15 [70, 70] { R12514 += 1, R12470 += 1, R12406 += 1 };
  s2 -> s11 [70, 70] { R12514 += 1, R12470 += 1, R12406 += 1 };
  s2 -> s8 [70, 70] { R12514 += 1, R12470 += 1, R12406 += 1, R12408 += 1, R12409 += 1 };
  s2 -> s9 [70, 70] { R12514 += 1, R12470 += 1, R12406 += 1, R12408 += 1, R12409 += 1 };
  s2 -> s14 [71, 65535] { R12514 += 1, R12470 += 1, R12406 += 1 };
  s2 -> s2 [71, 65535] { R12514 += 1, R12470 += 1, R12406 += 1, R12408 += 1, R12409 += 1 };
  s3 -> s1 [0, 69] { R12514 += 1, R12470 += 1, R12406 += 1, R12407 += 1, R12408 += 1 };
  s3 -> s2 [0, 69] { R12514 += 1, R12470 += 1, R12406 += 1, R12408 += 1, R12409 += 1 };
  s3 -> s3 [0, 69] { R12514 += 1, R12470 += 1, R12405 += 1, R12406 += 1 };
  s3 -> s5 [70, 70] { R12514 += 1, R12470 += 1, R12406 += 1, R12407 += 1, R12408 += 1 };
  s3 -> s6 [70, 70] { R12514 += 1, R12470 += 1, R12406 += 1, R12407 += 1, R12408 += 1 };
  s3 -> s7 [70, 70] { R12514 += 1, R12470 += 1, R12405 += 1, R12406 += 1 };
  s3 -> s8 [70, 70] { R12514 += 1, R12470 += 1, R12406 += 1, R12408 += 1, R12409 += 1 };
  s3 -> s9 [70, 70] { R12514 += 1, R12470 += 1, R12406 += 1, R12408 += 1, R12409 += 1 };
  s3 -> s10 [70, 70] { R12514 += 1, R12470 += 1, R12405 += 1, R12406 += 1 };
  s3 -> s1 [71, 65535] { R12514 += 1, R12470 += 1, R12406 += 1, R12407 += 1, R12408 += 1 };
  s3 -> s2 [71, 65535] { R12514 += 1, R12470 += 1, R12406 += 1, R12408 += 1, R12409 += 1 };
  s3 -> s3 [71, 65535] { R12514 += 1, R12470 += 1, R12405 += 1, R12406 += 1 };
  s4 -> s1 [0, 69] { R12514 += 1, R12470 += 1, R12406 += 1, R12407 += 1, R12408 += 1 };
  s4 -> s2 [0, 69] { R12514 += 1, R12470 += 1, R12406 += 1, R12408 += 1, R12409 += 1 };
  s4 -> s3 [0, 69] { R12514 += 1, R12470 += 1, R12405 += 1, R12406 += 1 };
  s4 -> s4 [0, 65535] { R12514 += 1, R12469 += 1, R12470 += 1 };
  s4 -> s5 [70, 70] { R12514 += 1, R12470 += 1, R12406 += 1, R12407 += 1, R12408 += 1 };
  s4 -> s6 [70, 70] { R12514 += 1, R12470 += 1, R12406 += 1, R12407 += 1, R12408 += 1 };
  s4 -> s7 [70, 70] { R12514 += 1, R12470 += 1, R12405 += 1, R12406 += 1 };
  s4 -> s8 [70, 70] { R12514 += 1, R12470 += 1, R12406 += 1, R12408 += 1, R12409 += 1 };
  s4 -> s9 [70, 70] { R12514 += 1, R12470 += 1, R12406 += 1, R12408 += 1, R12409 += 1 };
  s4 -> s10 [70, 70] { R12514 += 1, R12470 += 1, R12405 += 1, R12406 += 1 };
  s4 -> s1 [71, 65535] { R12514 += 1, R12470 += 1, R12406 += 1, R12407 += 1, R12408 += 1 };
  s4 -> s2 [71, 65535] { R12514 += 1, R12470 += 1, R12406 += 1, R12408 += 1, R12409 += 1 };
  s4 -> s3 [71, 65535] { R12514 += 1, R12470 += 1, R12405 += 1, R12406 += 1 };
  s5 -> s5 [0, 65535] { R12514 += 1, R12470 += 1, R12406 += 1, R12407 += 1, R12408 += 1 };
  s5 -> s8 [0, 65535] { R12514 += 1, R12470 += 1, R12406 += 1, R12408 += 1, R12409 += 1 };
  s8 -> s11 [0, 65535] { R12514 += 1, R12470 += 1, R12406 += 1 };
  s8 -> s8 [0, 65535] { R12514 += 1, R12470 += 1, R12406 += 1, R12408 += 1, R12409 += 1 };
  s10 -> s5 [0, 65535] { R12514 += 1, R12470 += 1, R12406 += 1, R12407 += 1, R12408 += 1 };
  s10 -> s8 [0, 65535] { R12514 += 1, R12470 += 1, R12406 += 1, R12408 += 1, R12409 += 1 };
  s10 -> s10 [0, 65535] { R12514 += 1, R12470 += 1, R12405 += 1, R12406 += 1 };
  s11 -> s12 [0, 65535] { R12514 += 1 };
  s11 -> s11 [0, 65535] { R12514 += 1, R12470 += 1, R12406 += 1 };
  s11 -> s13 [0, 65535];
  s12 -> s12 [0, 65535] { R12514 += 1 };
  s12 -> s13 [0, 65535];
  s13 -> s13 [0, 65535];
  s14 -> s14 [0, 69] { R12514 += 1, R12470 += 1, R12406 += 1 };
  s14 -> s14 [0, 65535] { R12514 += 1 };
  s14 -> s13 [0, 65535];
  s14 -> s15 [70, 70] { R12514 += 1, R12470 += 1, R12406 += 1 };
  s14 -> s11 [70, 70] { R12514 += 1, R12470 += 1, R12406 += 1 };
  s14 -> s14 [71, 65535] { R12514 += 1, R12470 += 1, R12406 += 1 };
  s15 -> s15 [0, 65535] { R12514 += 1 };
  s15 -> s13 [0, 65535];
  accepting s12, s13, s14, s15, s11;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [102, 102];
  accepting s1;
};
};
constraint R2 = R12432 && R3 = R12514 && R23 - R12514 = -1 && R24 = R12514 && R25 - R12514 = -1 && R26 = R12514 && R27 = 0 && R28 = 1 && R29 = 0 && R30 = 1 && R45 + R84 + R83 + -1*R12402 + -1*R12398 - R66 = 0 && R49 + R89 + R87 = 0 && R50 + R90 + R88 + -1*R12402 + -1*R12398 - R66 = 0 && R55 + R96 + R93 + -1*R12404 + -1*R12400 - R68 = 0 && R65 + R12401 + R12397 = 0 && R67 + R12403 + R12399 = 0 && R12431 = 0 && R12455 = 0 && R12456 = 0 && R12461 = 0 && R12462 = 0 && R12465 = 0 && R12466 = 0 && R12467 = 0 && R12468 = 0 && R12469 = 0 && R12470 = 0 && R12471 = 0 && R12472 = R12514 && R12473 = 0 && R12474 = R12514 && R12475 = 0 && R12476 = R12514 && R12477 = 0 && R12478 = R12514 && R12479 = 0 && R12480 = R12514 && R12481 = 0 && R12482 = R12514 && R12483 = 0 && R12484 = R12514 && R12485 = 0 && R12486 = R12514 && R12487 = 0 && R12488 = R12514 && R12489 = 0 && R12490 = R12514 && R12491 = 0 && R12492 = R12514 && R12493 = 0 && R12494 = R12514 && R12495 = 0 && R12496 = R12514 && R12497 = 0 && R12498 = R12514 && R12499 = 0 && R12500 = R12514 && R12501 = 0 && R12502 = R12514 && R12503 = 0 && R12504 = R12514 && R12505 = 0 && R12506 = R12514 && R12507 = 0 && R12508 = R12514 && R12509 = 0 && R12510 = R12514 && R12511 = 0 && R12512 = R12514 && R12513 = 0 && R12 < 1 && R15 < 1 && R16 < 1 && R47 + R86 + R85 < 1 && R61 + R10164 + R10161 < 1 && -1*R12402 + -1*R12398 - R66 < 1 && -1*R12404 + -1*R12400 - R68 < 1 && -1 < R12432 && 0 < R12514 && (R53 + R94 + R91 != 0 || R54 + R95 + R92 + -1*R12402 + -1*R12398 - R66 = 0 || R66 + R12402 + R12398 < 1) && (R59 + R10162 + R10159 != 0 || R60 + R10163 + R10160 + -1*R12402 + -1*R12398 - R66 = 0 || R66 + R12402 + R12398 < 1) && (R66 + R12402 + R12398 != 0 || ((R53 + R94 + R91 != 0 || R54 + R95 + R92 = 0 || R68 + R12404 + R12400 < 1) && (R53 + R94 + R91 = 0 || R68 + R12404 + R12400 < 1))) && (R66 + R12402 + R12398 != 0 || ((R59 + R10162 + R10159 != 0 || R60 + R10163 + R10160 = 0 || R68 + R12404 + R12400 < 1) && (R59 + R10162 + R10159 = 0 || R68 + R12404 + R12400 < 1))) && (R66 + R12402 + R12398 != 0 || ((R73 + R12410 + R12405 != 0 || R74 + R12411 + R12406 = 0 || R68 + R12404 + R12400 < 1) && (R73 + R12410 + R12405 = 0 || R68 + R12404 + R12400 < 1))) && (R68 + R12404 + R12400 != 0 || R77 + R12414 + R12409 = 0 || (R75 + R12412 + R12407 = 0 && R76 + R12413 + R12408 = 0)) && (R73 + R12410 + R12405 != 0 || R66 + R12402 + R12398 + -1*R12411 + -1*R12406 - R74 = 0 || R66 + R12402 + R12398 < 1) && (R75 + R12412 + R12407 != 0 || R68 + R12404 + R12400 + -1*R12413 + -1*R12408 - R76 = 0 || R68 + R12404 + R12400 < 1) && (R12415 != 0 || R12416 = R12432 || (R20 = 0 && R12432 = 0)) && (R12417 != 0 || R12418 = R12432 || (R20 = 0 && R12432 = 0)) && (R12419 != 0 || R12420 = R12432 || (R20 = 0 && R12432 = 0)) && (R12421 != 0 || R12422 = R12432 || (R20 = 0 && R12432 = 0)) && (R12423 != 0 || R12424 = R12432 || (R20 = 0 && R12432 = 0)) && (R12425 != 0 || R12426 = R12432 || (R20 = 0 && R12432 = 0)) && (R12427 != 0 || R12428 = R12432 || (R20 = 0 && R12432 = 0)) && (R12429 != 0 || R12430 = R12432 || (R20 = 0 && R12432 = 0)) && (R12433 != 0 || R12432 = R12434 || (R20 = 0 && R12432 = 0)) && (R21 = 0 || (R12453 = 0 && R12454 = 0)) && (R21 = 0 || (R12457 = 0 && R12458 = 0)) && (R21 = 0 || (R12459 = 0 && R12460 = 0)) && (R21 = 0 || (R12463 = 0 && R12464 = 0)) && (R22 = 0 || (R12435 = 0 && R12436 = 0)) && (R22 = 0 || (R12437 = 0 && R12438 = 0)) && (R22 = 0 || (R12439 = 0 && R12440 = 0)) && (R22 = 0 || (R12441 = 0 && R12442 = 0)) && (R22 = 0 || (R12443 = 0 && R12444 = 0)) && (R22 = 0 || (R12445 = 0 && R12446 = 0)) && (R22 = 0 || (R12447 = 0 && R12448 = 0)) && (R22 = 0 || (R12449 = 0 && R12450 = 0)) && (R22 = 0 || (R12451 = 0 && R12452 = 0)) && (R53 + R94 + R91 = 0 || R66 + R12402 + R12398 < 1) && (R59 + R10162 + R10159 = 0 || R66 + R12402 + R12398 < 1) && (R73 + R12410 + R12405 = 0 || R66 + R12402 + R12398 < 1) && (R75 + R12412 + R12407 = 0 || R68 + R12404 + R12400 < 1) && (R12415 = 0 || (R20 = 0 && R12432 = 0)) && (R12417 = 0 || (R20 = 0 && R12432 = 0)) && (R12419 = 0 || (R20 = 0 && R12432 = 0)) && (R12421 = 0 || (R20 = 0 && R12432 = 0)) && (R12423 = 0 || (R20 = 0 && R12432 = 0)) && (R12425 = 0 || (R20 = 0 && R12432 = 0)) && (R12427 = 0 || (R20 = 0 && R12432 = 0)) && (R12429 = 0 || (R20 = 0 && R12432 = 0)) && (R12433 = 0 || (R20 = 0 && R12432 = 0));
// End of Parikh automata intersection problem
