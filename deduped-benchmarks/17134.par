// Parikh automata intersection problem, generated by OSTRICH+
counter int R12, R15, R16, R2, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R4, R45, R47, R49, R5, R50, R53, R54, R55, R59, R60, R61, R65, R66, R67, R68, R6805, R6806, R6807, R6808, R6809, R6810, R73, R74, R75, R76, R77, R7927, R7928, R7929, R7930, R7931, R7932, R7933, R7934, R8155, R8156, R8157, R8158, R8159, R8160, R8161, R8162, R8163, R8164, R8165, R8166, R8167, R8168, R8169, R8170, R8171, R8172, R8173, R8174, R8175, R8176, R8177, R8178, R8179, R8180, R8181, R8182, R8183, R8184, R8185, R8186, R8187, R8188, R8189, R8190, R8191, R8192, R8193, R8194, R8195, R8196, R8197, R8198, R8199, R8200, R8201, R8202, R8203, R8204, R8205, R8206, R8207, R8208, R8209, R8210, R8211, R8212, R8213, R8214, R8215, R8216, R8217, R8218, R8219, R8220, R8221, R8222, R8223, R8224, R8225, R8226, R8227, R8228, R8229, R8230, R8231, R8232, R8233, R8234, R8235, R8236, R8237, R8238, R8239, R8240, R8241, R8242, R8243, R8244, R8245, R8246, R8247, R8248, R8249, R8250, R8251, R8252, R8253, R8254, R8255, R8256, R8257, R8258, R8259, R8260, R8261, R8262, R8263, R8264, R83, R84, R85, R86, R87, R88, R89, R90, R91, R92, R93, R94, R95, R96;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [70, 70];
  s0 -> s0 [71, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [70, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R15 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 69];
  s0 -> s0 [0, 65535] { R16 += 1 };
  s0 -> s2 [70, 70];
  s0 -> s1 [71, 65535];
  s1 -> s1 [0, 69];
  s1 -> s2 [70, 70];
  s1 -> s1 [71, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R24 += 1 };
  s0 -> s0 [0, 65535] { R23 += 1, R24 += 1 };
  s0 -> s2 [9, 13] { R24 += 1 };
  s0 -> s1 [14, 31] { R24 += 1 };
  s0 -> s2 [32, 32] { R24 += 1 };
  s0 -> s1 [33, 65535] { R24 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R24 += 1 };
  s2 -> s1 [0, 65535] { R24 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R25 += 1, R26 += 1 };
  s1 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R28 += 1 };
  s0 -> s0 [0, 65535] { R27 += 1, R28 += 1 };
  s0 -> s2 [9, 13] { R28 += 1 };
  s0 -> s1 [14, 31] { R28 += 1 };
  s0 -> s2 [32, 32] { R28 += 1 };
  s0 -> s1 [33, 65535] { R28 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R28 += 1 };
  s2 -> s1 [0, 65535] { R28 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R29 += 1, R30 += 1 };
  s1 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R8185 += 1, R8186 += 1 };
  s0 -> s1 [0, 65535] { R8186 += 1, R22 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R8186 += 1, R22 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 69] { R8188 += 1 };
  s0 -> s0 [0, 65535] { R8187 += 1, R8188 += 1 };
  s0 -> s2 [70, 70] { R8188 += 1 };
  s0 -> s3 [70, 70] { R8188 += 1 };
  s0 -> s1 [76, 65535] { R8188 += 1 };
  s1 -> s1 [0, 69] { R8188 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R8188 += 1 };
  s1 -> s3 [70, 70] { R8188 += 1 };
  s1 -> s1 [76, 65535] { R8188 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 70] { R8188 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [76, 65535] { R8188 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 69] { R8190 += 1, R45 += 1 };
  s0 -> s0 [0, 65535] { R8189 += 1, R8190 += 1 };
  s0 -> s2 [70, 70] { R8190 += 1, R45 += 1 };
  s0 -> s3 [70, 70] { R8190 += 1, R45 += 1 };
  s0 -> s1 [71, 65535] { R8190 += 1, R45 += 1 };
  s1 -> s1 [0, 69] { R8190 += 1, R45 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R8190 += 1, R45 += 1 };
  s1 -> s3 [70, 70] { R8190 += 1, R45 += 1 };
  s1 -> s1 [71, 65535] { R8190 += 1, R45 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R8190 += 1, R45 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 69] { R8192 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R8191 += 1, R8192 += 1 };
  s0 -> s2 [70, 70] { R8192 += 1, R47 += 1 };
  s0 -> s3 [70, 70] { R8192 += 1, R47 += 1 };
  s0 -> s1 [71, 65535] { R8192 += 1, R47 += 1 };
  s1 -> s1 [0, 69] { R8192 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R8192 += 1, R47 += 1 };
  s1 -> s3 [70, 70] { R8192 += 1, R47 += 1 };
  s1 -> s1 [71, 65535] { R8192 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8192 += 1, R47 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 69] { R8194 += 1, R49 += 1, R50 += 1 };
  s0 -> s0 [0, 65535] { R8193 += 1, R8194 += 1 };
  s0 -> s2 [70, 70] { R8194 += 1, R49 += 1, R50 += 1 };
  s0 -> s3 [70, 70] { R8194 += 1, R49 += 1, R50 += 1 };
  s0 -> s1 [71, 65535] { R8194 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 69] { R8194 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R8194 += 1, R49 += 1, R50 += 1 };
  s1 -> s3 [70, 70] { R8194 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [71, 65535] { R8194 += 1, R49 += 1, R50 += 1 };
  s2 -> s2 [0, 65535] { R8194 += 1, R49 += 1, R50 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 69] { R8196 += 1, R53 += 1, R54 += 1 };
  s0 -> s0 [0, 65535] { R8195 += 1, R8196 += 1 };
  s0 -> s2 [70, 70] { R8196 += 1, R53 += 1, R54 += 1 };
  s0 -> s3 [70, 70] { R8196 += 1, R53 += 1, R54 += 1 };
  s0 -> s1 [71, 65535] { R8196 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 69] { R8196 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R8196 += 1, R53 += 1, R54 += 1 };
  s1 -> s3 [70, 70] { R8196 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [71, 65535] { R8196 += 1, R53 += 1, R54 += 1 };
  s2 -> s2 [0, 65535] { R8196 += 1, R53 += 1, R54 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 69] { R8198 += 1, R59 += 1, R60 += 1 };
  s0 -> s0 [0, 65535] { R8197 += 1, R8198 += 1 };
  s0 -> s2 [70, 70] { R8198 += 1, R59 += 1, R60 += 1 };
  s0 -> s3 [70, 70] { R8198 += 1, R59 += 1, R60 += 1 };
  s0 -> s1 [71, 65535] { R8198 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 69] { R8198 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R8198 += 1, R59 += 1, R60 += 1 };
  s1 -> s3 [70, 70] { R8198 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [71, 65535] { R8198 += 1, R59 += 1, R60 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8198 += 1, R59 += 1, R60 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 69] { R8200 += 1, R65 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R8199 += 1, R8200 += 1 };
  s0 -> s2 [70, 70] { R8200 += 1, R65 += 1, R66 += 1 };
  s0 -> s3 [70, 70] { R8200 += 1, R65 += 1, R66 += 1 };
  s0 -> s1 [71, 65535] { R8200 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 69] { R8200 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R8200 += 1, R65 += 1, R66 += 1 };
  s1 -> s3 [70, 70] { R8200 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [71, 65535] { R8200 += 1, R65 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R8200 += 1, R65 += 1, R66 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 69] { R8202 += 1, R73 += 1, R74 += 1 };
  s0 -> s0 [0, 65535] { R8201 += 1, R8202 += 1 };
  s0 -> s2 [70, 70] { R8202 += 1, R73 += 1, R74 += 1 };
  s0 -> s3 [70, 70] { R8202 += 1, R73 += 1, R74 += 1 };
  s0 -> s1 [71, 65535] { R8202 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 69] { R8202 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R8202 += 1, R73 += 1, R74 += 1 };
  s1 -> s3 [70, 70] { R8202 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [71, 65535] { R8202 += 1, R73 += 1, R74 += 1 };
  s2 -> s2 [0, 65535] { R8202 += 1, R73 += 1, R74 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 69] { R8222 += 1 };
  s0 -> s0 [0, 65535] { R8221 += 1, R8222 += 1 };
  s0 -> s2 [70, 70] { R8222 += 1 };
  s0 -> s1 [71, 65535] { R8222 += 1 };
  s1 -> s1 [0, 69] { R8222 += 1 };
  s1 -> s2 [70, 70] { R8222 += 1 };
  s1 -> s1 [71, 65535] { R8222 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R8222 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R8223 += 1, R8224 += 1 };
  s0 -> s1 [0, 65535] { R8224 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R8224 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 69] { R8226 += 1 };
  s0 -> s0 [0, 65535] { R8225 += 1, R8226 += 1 };
  s0 -> s2 [0, 65535] { R8226 += 1, R12 += 1 };
  s0 -> s3 [70, 70] { R8226 += 1 };
  s0 -> s1 [71, 65535] { R8226 += 1 };
  s1 -> s1 [0, 69] { R8226 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [70, 70] { R8226 += 1 };
  s1 -> s1 [71, 65535] { R8226 += 1 };
  s2 -> s1 [0, 69] { R8226 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8226 += 1, R12 += 1 };
  s2 -> s3 [70, 70] { R8226 += 1 };
  s2 -> s1 [71, 65535] { R8226 += 1 };
  s3 -> s3 [0, 65535] { R8226 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 69] { R8228 += 1, R8166 += 1 };
  s0 -> s2 [0, 65535] { R8228 += 1, R8165 += 1, R8166 += 1 };
  s0 -> s0 [0, 65535] { R8227 += 1, R8228 += 1 };
  s0 -> s1 [71, 65535] { R8228 += 1, R8166 += 1 };
  s1 -> s1 [0, 69] { R8228 += 1, R8166 += 1 };
  s1 -> s1 [0, 65535] { R8228 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [71, 65535] { R8228 += 1, R8166 += 1 };
  s2 -> s1 [0, 69] { R8228 += 1, R8166 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R8228 += 1, R8165 += 1, R8166 += 1 };
  s2 -> s1 [71, 65535] { R8228 += 1, R8166 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R8230 += 1, R8168 += 1, R20 += 1 };
  s0 -> s0 [0, 65535] { R8229 += 1, R8230 += 1 };
  s0 -> s2 [0, 65535] { R8230 += 1, R8167 += 1, R8168 += 1 };
  s1 -> s4 [0, 65535] { R8230 += 1 };
  s1 -> s1 [0, 65535] { R8230 += 1, R8168 += 1, R20 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R8230 += 1, R8168 += 1, R20 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R8230 += 1, R8167 += 1, R8168 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8230 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 70] { R8232 += 1, R8170 += 1 };
  s0 -> s0 [0, 65535] { R8231 += 1, R8232 += 1 };
  s0 -> s2 [0, 65535] { R8232 += 1, R8169 += 1, R8170 += 1 };
  s0 -> s1 [75, 65535] { R8232 += 1, R8170 += 1 };
  s1 -> s1 [0, 70] { R8232 += 1, R8170 += 1 };
  s1 -> s1 [0, 65535] { R8232 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [75, 65535] { R8232 += 1, R8170 += 1 };
  s2 -> s1 [0, 70] { R8232 += 1, R8170 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R8232 += 1, R8169 += 1, R8170 += 1 };
  s2 -> s1 [75, 65535] { R8232 += 1, R8170 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s0 [0, 65535] { R8233 += 1, R8234 += 1 };
  s0 -> s1 [0, 65535] { R8234 += 1, R8172 += 1, R84 += 1 };
  s0 -> s2 [0, 65535] { R8234 += 1, R8171 += 1, R8172 += 1 };
  s1 -> s1 [0, 65535] { R8234 += 1, R8172 += 1, R84 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R8234 += 1 };
  s2 -> s1 [0, 65535] { R8234 += 1, R8172 += 1, R84 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R8234 += 1, R8171 += 1, R8172 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8234 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 74] { R8236 += 1, R8174 += 1 };
  s0 -> s2 [0, 65535] { R8236 += 1, R8174 += 1, R86 += 1 };
  s0 -> s0 [0, 65535] { R8235 += 1, R8236 += 1 };
  s0 -> s3 [0, 65535] { R8236 += 1, R8173 += 1, R8174 += 1 };
  s0 -> s1 [76, 65535] { R8236 += 1, R8174 += 1 };
  s1 -> s1 [0, 74] { R8236 += 1, R8174 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R8236 += 1 };
  s1 -> s1 [76, 65535] { R8236 += 1, R8174 += 1 };
  s2 -> s1 [0, 74] { R8236 += 1, R8174 += 1 };
  s2 -> s5 [0, 65535] { R8236 += 1 };
  s2 -> s2 [0, 65535] { R8236 += 1, R8174 += 1, R86 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [76, 65535] { R8236 += 1, R8174 += 1 };
  s3 -> s1 [0, 74] { R8236 += 1, R8174 += 1 };
  s3 -> s2 [0, 65535] { R8236 += 1, R8174 += 1, R86 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8236 += 1, R8173 += 1, R8174 += 1 };
  s3 -> s1 [76, 65535] { R8236 += 1, R8174 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8236 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 65535] { R8238 += 1, R8176 += 1, R90 += 1 };
  s0 -> s2 [0, 65535] { R8238 += 1, R8175 += 1, R8176 += 1 };
  s0 -> s3 [0, 65535] { R8238 += 1, R8176 += 1 };
  s0 -> s0 [0, 65535] { R8237 += 1, R8238 += 1 };
  s1 -> s1 [0, 65535] { R8238 += 1, R8176 += 1, R90 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s3 [0, 65535] { R8238 += 1, R8176 += 1 };
  s1 -> s5 [0, 65535] { R8238 += 1 };
  s2 -> s1 [0, 65535] { R8238 += 1, R8176 += 1, R90 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8238 += 1, R8175 += 1, R8176 += 1 };
  s2 -> s3 [0, 65535] { R8238 += 1, R8176 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8238 += 1, R8176 += 1 };
  s3 -> s5 [0, 65535] { R8238 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8238 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R8240 += 1, R8178 += 1, R95 += 1, R96 += 1 };
  s0 -> s2 [0, 65535] { R8240 += 1, R8178 += 1, R94 += 1, R95 += 1 };
  s0 -> s0 [0, 65535] { R8239 += 1, R8240 += 1 };
  s0 -> s3 [0, 65535] { R8240 += 1, R8177 += 1, R8178 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R8240 += 1, R8178 += 1 };
  s1 -> s1 [0, 65535] { R8240 += 1, R8178 += 1, R95 += 1, R96 += 1 };
  s1 -> s5 [0, 65535] { R8240 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R8240 += 1, R8178 += 1, R95 += 1, R96 += 1 };
  s2 -> s2 [0, 65535] { R8240 += 1, R8178 += 1, R94 += 1, R95 += 1 };
  s2 -> s5 [0, 65535] { R8240 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R8240 += 1, R8178 += 1, R95 += 1, R96 += 1 };
  s3 -> s2 [0, 65535] { R8240 += 1, R8178 += 1, R94 += 1, R95 += 1 };
  s3 -> s3 [0, 65535] { R8240 += 1, R8177 += 1, R8178 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8240 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R8240 += 1, R8178 += 1 };
  s6 -> s5 [0, 65535] { R8240 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 74] { R8242 += 1, R8180 += 1, R6809 += 1 };
  s0 -> s2 [0, 65535] { R8242 += 1, R8180 += 1, R6809 += 1, R6810 += 1 };
  s0 -> s0 [0, 65535] { R8241 += 1, R8242 += 1 };
  s0 -> s3 [0, 65535] { R8242 += 1, R8180 += 1 };
  s0 -> s4 [0, 65535] { R8242 += 1, R8179 += 1, R8180 += 1 };
  s0 -> s1 [76, 65535] { R8242 += 1, R8180 += 1, R6809 += 1 };
  s1 -> s1 [0, 74] { R8242 += 1, R8180 += 1, R6809 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R8242 += 1, R8180 += 1 };
  s1 -> s6 [0, 65535] { R8242 += 1 };
  s1 -> s1 [76, 65535] { R8242 += 1, R8180 += 1, R6809 += 1 };
  s2 -> s1 [0, 74] { R8242 += 1, R8180 += 1, R6809 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R8242 += 1, R8180 += 1, R6809 += 1, R6810 += 1 };
  s2 -> s3 [0, 65535] { R8242 += 1, R8180 += 1 };
  s2 -> s6 [0, 65535] { R8242 += 1 };
  s2 -> s1 [76, 65535] { R8242 += 1, R8180 += 1, R6809 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R8242 += 1, R8180 += 1 };
  s3 -> s6 [0, 65535] { R8242 += 1 };
  s4 -> s1 [0, 74] { R8242 += 1, R8180 += 1, R6809 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s2 [0, 65535] { R8242 += 1, R8180 += 1, R6809 += 1, R6810 += 1 };
  s4 -> s3 [0, 65535] { R8242 += 1, R8180 += 1 };
  s4 -> s4 [0, 65535] { R8242 += 1, R8179 += 1, R8180 += 1 };
  s4 -> s1 [76, 65535] { R8242 += 1, R8180 += 1, R6809 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8242 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R8244 += 1, R8181 += 1, R8182 += 1 };
  s0 -> s0 [0, 65535] { R8243 += 1, R8244 += 1 };
  s0 -> s2 [0, 65535] { R8244 += 1, R8182 += 1 };
  s1 -> s1 [0, 65535] { R8244 += 1, R8181 += 1, R8182 += 1 };
  s1 -> s2 [0, 65535] { R8244 += 1, R8182 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8244 += 1, R8182 += 1 };
  s2 -> s3 [0, 65535] { R8244 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8244 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 65535] { R8246 += 1, R8184 += 1, R8161 += 1, R8163 += 1, R8164 += 1 };
  s0 -> s2 [0, 65535] { R8246 += 1, R8184 += 1, R8161 += 1, R8162 += 1, R8163 += 1 };
  s0 -> s3 [0, 65535] { R8246 += 1, R8184 += 1, R8160 += 1, R8161 += 1 };
  s0 -> s0 [0, 65535] { R8245 += 1, R8246 += 1 };
  s0 -> s4 [0, 65535] { R8246 += 1, R8183 += 1, R8184 += 1 };
  s1 -> s6 [0, 65535] { R8246 += 1 };
  s1 -> s1 [0, 65535] { R8246 += 1, R8184 += 1, R8161 += 1, R8163 += 1, R8164 += 1 };
  s1 -> s8 [0, 65535] { R8246 += 1, R8184 += 1, R8161 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s7 [0, 65535] { R8246 += 1, R8184 += 1 };
  s2 -> s6 [0, 65535] { R8246 += 1 };
  s2 -> s1 [0, 65535] { R8246 += 1, R8184 += 1, R8161 += 1, R8163 += 1, R8164 += 1 };
  s2 -> s2 [0, 65535] { R8246 += 1, R8184 += 1, R8161 += 1, R8162 += 1, R8163 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s7 [0, 65535] { R8246 += 1, R8184 += 1 };
  s3 -> s6 [0, 65535] { R8246 += 1 };
  s3 -> s1 [0, 65535] { R8246 += 1, R8184 += 1, R8161 += 1, R8163 += 1, R8164 += 1 };
  s3 -> s2 [0, 65535] { R8246 += 1, R8184 += 1, R8161 += 1, R8162 += 1, R8163 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R8246 += 1, R8184 += 1, R8160 += 1, R8161 += 1 };
  s4 -> s1 [0, 65535] { R8246 += 1, R8184 += 1, R8161 += 1, R8163 += 1, R8164 += 1 };
  s4 -> s2 [0, 65535] { R8246 += 1, R8184 += 1, R8161 += 1, R8162 += 1, R8163 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s3 [0, 65535] { R8246 += 1, R8184 += 1, R8160 += 1, R8161 += 1 };
  s4 -> s4 [0, 65535] { R8246 += 1, R8183 += 1, R8184 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8246 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R8246 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R8246 += 1, R8184 += 1 };
  s8 -> s6 [0, 65535] { R8246 += 1 };
  s8 -> s8 [0, 65535] { R8246 += 1, R8184 += 1, R8161 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s7 [0, 65535] { R8246 += 1, R8184 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s0 [0, 65535] { R8247 += 1, R8248 += 1 };
  s0 -> s1 [0, 65535] { R8248 += 1, R8203 += 1, R8204 += 1 };
  s0 -> s2 [0, 65535] { R8248 += 1, R8204 += 1, R21 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R8248 += 1, R8203 += 1, R8204 += 1 };
  s1 -> s2 [0, 65535] { R8248 += 1, R8204 += 1, R21 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R8248 += 1, R8204 += 1, R21 += 1 };
  s2 -> s4 [0, 65535] { R8248 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8248 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 69] { R8250 += 1, R8206 += 1 };
  s0 -> s2 [0, 65535] { R8250 += 1, R8205 += 1, R8206 += 1 };
  s0 -> s0 [0, 65535] { R8249 += 1, R8250 += 1 };
  s0 -> s3 [70, 70] { R8250 += 1, R8206 += 1 };
  s0 -> s4 [70, 70] { R8250 += 1, R8206 += 1 };
  s0 -> s5 [75, 75] { R8250 += 1, R8206 += 1 };
  s0 -> s1 [76, 65535] { R8250 += 1, R8206 += 1 };
  s1 -> s1 [0, 69] { R8250 += 1, R8206 += 1 };
  s1 -> s3 [70, 70] { R8250 += 1, R8206 += 1 };
  s1 -> s4 [70, 70] { R8250 += 1, R8206 += 1 };
  s1 -> s5 [75, 75] { R8250 += 1, R8206 += 1 };
  s1 -> s1 [76, 65535] { R8250 += 1, R8206 += 1 };
  s2 -> s1 [0, 69] { R8250 += 1, R8206 += 1 };
  s2 -> s2 [0, 65535] { R8250 += 1, R8205 += 1, R8206 += 1 };
  s2 -> s3 [70, 70] { R8250 += 1, R8206 += 1 };
  s2 -> s4 [70, 70] { R8250 += 1, R8206 += 1 };
  s2 -> s5 [75, 75] { R8250 += 1, R8206 += 1 };
  s2 -> s1 [76, 65535] { R8250 += 1, R8206 += 1 };
  s3 -> s3 [0, 70] { R8250 += 1, R8206 += 1 };
  s3 -> s7 [75, 75] { R8250 += 1, R8206 += 1 };
  s3 -> s3 [76, 65535] { R8250 += 1, R8206 += 1 };
  s5 -> s5 [0, 69] { R8250 += 1, R8206 += 1 };
  s5 -> s5 [0, 65535] { R8250 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [70, 70] { R8250 += 1, R8206 += 1 };
  s5 -> s8 [70, 70] { R8250 += 1, R8206 += 1 };
  s5 -> s5 [75, 65535] { R8250 += 1, R8206 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 70] { R8250 += 1, R8206 += 1 };
  s7 -> s7 [0, 65535] { R8250 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [75, 65535] { R8250 += 1, R8206 += 1 };
  s8 -> s8 [0, 65535] { R8250 += 1 };
  s8 -> s6 [0, 65535];
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 69] { R8252 += 1, R8208 += 1, R83 += 1 };
  s0 -> s0 [0, 65535] { R8251 += 1, R8252 += 1 };
  s0 -> s2 [0, 65535] { R8252 += 1, R8207 += 1, R8208 += 1 };
  s0 -> s3 [70, 70] { R8252 += 1, R8208 += 1, R83 += 1 };
  s0 -> s4 [70, 70] { R8252 += 1, R8208 += 1, R83 += 1 };
  s0 -> s1 [71, 65535] { R8252 += 1, R8208 += 1, R83 += 1 };
  s1 -> s1 [0, 69] { R8252 += 1, R8208 += 1, R83 += 1 };
  s1 -> s1 [0, 65535] { R8252 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [70, 70] { R8252 += 1, R8208 += 1, R83 += 1 };
  s1 -> s4 [70, 70] { R8252 += 1, R8208 += 1, R83 += 1 };
  s1 -> s1 [71, 65535] { R8252 += 1, R8208 += 1, R83 += 1 };
  s2 -> s1 [0, 69] { R8252 += 1, R8208 += 1, R83 += 1 };
  s2 -> s2 [0, 65535] { R8252 += 1, R8207 += 1, R8208 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [70, 70] { R8252 += 1, R8208 += 1, R83 += 1 };
  s2 -> s4 [70, 70] { R8252 += 1, R8208 += 1, R83 += 1 };
  s2 -> s1 [71, 65535] { R8252 += 1, R8208 += 1, R83 += 1 };
  s3 -> s3 [0, 65535] { R8252 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R8252 += 1 };
  s4 -> s4 [0, 65535] { R8252 += 1, R8208 += 1, R83 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R8252 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 69] { R8254 += 1, R8210 += 1, R85 += 1 };
  s0 -> s0 [0, 65535] { R8253 += 1, R8254 += 1 };
  s0 -> s2 [0, 65535] { R8254 += 1, R8209 += 1, R8210 += 1 };
  s0 -> s3 [70, 70] { R8254 += 1, R8210 += 1, R85 += 1 };
  s0 -> s4 [70, 70] { R8254 += 1, R8210 += 1, R85 += 1 };
  s0 -> s1 [71, 65535] { R8254 += 1, R8210 += 1, R85 += 1 };
  s1 -> s1 [0, 69] { R8254 += 1, R8210 += 1, R85 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R8254 += 1 };
  s1 -> s3 [70, 70] { R8254 += 1, R8210 += 1, R85 += 1 };
  s1 -> s4 [70, 70] { R8254 += 1, R8210 += 1, R85 += 1 };
  s1 -> s1 [71, 65535] { R8254 += 1, R8210 += 1, R85 += 1 };
  s2 -> s1 [0, 69] { R8254 += 1, R8210 += 1, R85 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R8254 += 1, R8209 += 1, R8210 += 1 };
  s2 -> s3 [70, 70] { R8254 += 1, R8210 += 1, R85 += 1 };
  s2 -> s4 [70, 70] { R8254 += 1, R8210 += 1, R85 += 1 };
  s2 -> s1 [71, 65535] { R8254 += 1, R8210 += 1, R85 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R8254 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8254 += 1, R8210 += 1, R85 += 1 };
  s4 -> s6 [0, 65535] { R8254 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8254 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 69] { R8256 += 1, R8212 += 1, R88 += 1 };
  s0 -> s2 [0, 69] { R8256 += 1, R8212 += 1, R87 += 1, R88 += 1 };
  s0 -> s0 [0, 65535] { R8255 += 1, R8256 += 1 };
  s0 -> s3 [0, 65535] { R8256 += 1, R8211 += 1, R8212 += 1 };
  s0 -> s4 [70, 70] { R8256 += 1, R8212 += 1, R88 += 1 };
  s0 -> s5 [70, 70] { R8256 += 1, R8212 += 1, R87 += 1, R88 += 1 };
  s0 -> s6 [70, 70] { R8256 += 1, R8212 += 1, R88 += 1 };
  s0 -> s7 [70, 70] { R8256 += 1, R8212 += 1, R87 += 1, R88 += 1 };
  s0 -> s1 [71, 74] { R8256 += 1, R8212 += 1, R88 += 1 };
  s0 -> s2 [71, 65535] { R8256 += 1, R8212 += 1, R87 += 1, R88 += 1 };
  s0 -> s8 [75, 75] { R8256 += 1, R8212 += 1, R88 += 1 };
  s0 -> s1 [76, 65535] { R8256 += 1, R8212 += 1, R88 += 1 };
  s1 -> s1 [0, 69] { R8256 += 1, R8212 += 1, R88 += 1 };
  s1 -> s4 [70, 70] { R8256 += 1, R8212 += 1, R88 += 1 };
  s1 -> s6 [70, 70] { R8256 += 1, R8212 += 1, R88 += 1 };
  s1 -> s1 [71, 74] { R8256 += 1, R8212 += 1, R88 += 1 };
  s1 -> s8 [75, 75] { R8256 += 1, R8212 += 1, R88 += 1 };
  s1 -> s1 [76, 65535] { R8256 += 1, R8212 += 1, R88 += 1 };
  s2 -> s1 [0, 69] { R8256 += 1, R8212 += 1, R88 += 1 };
  s2 -> s2 [0, 69] { R8256 += 1, R8212 += 1, R87 += 1, R88 += 1 };
  s2 -> s4 [70, 70] { R8256 += 1, R8212 += 1, R88 += 1 };
  s2 -> s5 [70, 70] { R8256 += 1, R8212 += 1, R87 += 1, R88 += 1 };
  s2 -> s6 [70, 70] { R8256 += 1, R8212 += 1, R88 += 1 };
  s2 -> s7 [70, 70] { R8256 += 1, R8212 += 1, R87 += 1, R88 += 1 };
  s2 -> s1 [71, 74] { R8256 += 1, R8212 += 1, R88 += 1 };
  s2 -> s2 [71, 65535] { R8256 += 1, R8212 += 1, R87 += 1, R88 += 1 };
  s2 -> s8 [75, 75] { R8256 += 1, R8212 += 1, R88 += 1 };
  s2 -> s1 [76, 65535] { R8256 += 1, R8212 += 1, R88 += 1 };
  s3 -> s1 [0, 69] { R8256 += 1, R8212 += 1, R88 += 1 };
  s3 -> s2 [0, 69] { R8256 += 1, R8212 += 1, R87 += 1, R88 += 1 };
  s3 -> s3 [0, 65535] { R8256 += 1, R8211 += 1, R8212 += 1 };
  s3 -> s4 [70, 70] { R8256 += 1, R8212 += 1, R88 += 1 };
  s3 -> s5 [70, 70] { R8256 += 1, R8212 += 1, R87 += 1, R88 += 1 };
  s3 -> s6 [70, 70] { R8256 += 1, R8212 += 1, R88 += 1 };
  s3 -> s7 [70, 70] { R8256 += 1, R8212 += 1, R87 += 1, R88 += 1 };
  s3 -> s1 [71, 74] { R8256 += 1, R8212 += 1, R88 += 1 };
  s3 -> s2 [71, 65535] { R8256 += 1, R8212 += 1, R87 += 1, R88 += 1 };
  s3 -> s8 [75, 75] { R8256 += 1, R8212 += 1, R88 += 1 };
  s3 -> s1 [76, 65535] { R8256 += 1, R8212 += 1, R88 += 1 };
  s4 -> s4 [0, 74] { R8256 += 1, R8212 += 1, R88 += 1 };
  s4 -> s11 [75, 75] { R8256 += 1, R8212 += 1, R88 += 1 };
  s4 -> s4 [76, 65535] { R8256 += 1, R8212 += 1, R88 += 1 };
  s5 -> s4 [0, 74] { R8256 += 1, R8212 += 1, R88 += 1 };
  s5 -> s5 [0, 65535] { R8256 += 1, R8212 += 1, R87 += 1, R88 += 1 };
  s5 -> s11 [75, 75] { R8256 += 1, R8212 += 1, R88 += 1 };
  s5 -> s4 [76, 65535] { R8256 += 1, R8212 += 1, R88 += 1 };
  s8 -> s8 [0, 69] { R8256 += 1, R8212 += 1, R88 += 1 };
  s8 -> s8 [0, 65535] { R8256 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [70, 70] { R8256 += 1, R8212 += 1, R88 += 1 };
  s8 -> s11 [70, 70] { R8256 += 1, R8212 += 1, R88 += 1 };
  s8 -> s8 [71, 65535] { R8256 += 1, R8212 += 1, R88 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R8256 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s12 [0, 65535] { R8256 += 1 };
  s11 -> s11 [0, 65535] { R8256 += 1, R8212 += 1, R88 += 1 };
  s11 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R8256 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 69] { R8258 += 1, R8214 += 1, R91 += 1, R92 += 1 };
  s0 -> s2 [0, 65535] { R8258 += 1, R8213 += 1, R8214 += 1 };
  s0 -> s0 [0, 65535] { R8257 += 1, R8258 += 1 };
  s0 -> s3 [70, 70] { R8258 += 1, R8214 += 1, R91 += 1, R92 += 1 };
  s0 -> s4 [70, 70] { R8258 += 1, R8214 += 1, R91 += 1, R92 += 1 };
  s0 -> s1 [71, 65535] { R8258 += 1, R8214 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 69] { R8258 += 1, R8214 += 1, R91 += 1, R92 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R8258 += 1 };
  s1 -> s3 [70, 70] { R8258 += 1, R8214 += 1, R91 += 1, R92 += 1 };
  s1 -> s4 [70, 70] { R8258 += 1, R8214 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [71, 65535] { R8258 += 1, R8214 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [0, 69] { R8258 += 1, R8214 += 1, R91 += 1, R92 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R8258 += 1, R8213 += 1, R8214 += 1 };
  s2 -> s3 [70, 70] { R8258 += 1, R8214 += 1, R91 += 1, R92 += 1 };
  s2 -> s4 [70, 70] { R8258 += 1, R8214 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [71, 65535] { R8258 += 1, R8214 += 1, R91 += 1, R92 += 1 };
  s3 -> s3 [0, 65535] { R8258 += 1, R8214 += 1, R91 += 1, R92 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R8258 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8258 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8258 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 69] { R8260 += 1, R8216 += 1, R6806 += 1, R6807 += 1 };
  s0 -> s2 [0, 69] { R8260 += 1, R8216 += 1, R6805 += 1, R6806 += 1 };
  s0 -> s3 [0, 65535] { R8260 += 1, R8215 += 1, R8216 += 1 };
  s0 -> s0 [0, 65535] { R8259 += 1, R8260 += 1 };
  s0 -> s4 [70, 70] { R8260 += 1, R8216 += 1, R6806 += 1, R6807 += 1 };
  s0 -> s5 [70, 70] { R8260 += 1, R8216 += 1, R6806 += 1, R6807 += 1 };
  s0 -> s6 [70, 70] { R8260 += 1, R8216 += 1, R6805 += 1, R6806 += 1 };
  s0 -> s7 [70, 70] { R8260 += 1, R8216 += 1, R6805 += 1, R6806 += 1 };
  s0 -> s1 [71, 65535] { R8260 += 1, R8216 += 1, R6806 += 1, R6807 += 1 };
  s0 -> s2 [71, 65535] { R8260 += 1, R8216 += 1, R6805 += 1, R6806 += 1 };
  s1 -> s1 [0, 69] { R8260 += 1, R8216 += 1, R6806 += 1, R6807 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s1 [0, 65535] { R8260 += 1 };
  s1 -> s4 [70, 70] { R8260 += 1, R8216 += 1, R6806 += 1, R6807 += 1 };
  s1 -> s5 [70, 70] { R8260 += 1, R8216 += 1, R6806 += 1, R6807 += 1 };
  s1 -> s1 [71, 65535] { R8260 += 1, R8216 += 1, R6806 += 1, R6807 += 1 };
  s2 -> s1 [0, 69] { R8260 += 1, R8216 += 1, R6806 += 1, R6807 += 1 };
  s2 -> s2 [0, 69] { R8260 += 1, R8216 += 1, R6805 += 1, R6806 += 1 };
  s2 -> s4 [70, 70] { R8260 += 1, R8216 += 1, R6806 += 1, R6807 += 1 };
  s2 -> s5 [70, 70] { R8260 += 1, R8216 += 1, R6806 += 1, R6807 += 1 };
  s2 -> s6 [70, 70] { R8260 += 1, R8216 += 1, R6805 += 1, R6806 += 1 };
  s2 -> s7 [70, 70] { R8260 += 1, R8216 += 1, R6805 += 1, R6806 += 1 };
  s2 -> s1 [71, 65535] { R8260 += 1, R8216 += 1, R6806 += 1, R6807 += 1 };
  s2 -> s2 [71, 65535] { R8260 += 1, R8216 += 1, R6805 += 1, R6806 += 1 };
  s3 -> s1 [0, 69] { R8260 += 1, R8216 += 1, R6806 += 1, R6807 += 1 };
  s3 -> s2 [0, 69] { R8260 += 1, R8216 += 1, R6805 += 1, R6806 += 1 };
  s3 -> s3 [0, 65535] { R8260 += 1, R8215 += 1, R8216 += 1 };
  s3 -> s4 [70, 70] { R8260 += 1, R8216 += 1, R6806 += 1, R6807 += 1 };
  s3 -> s5 [70, 70] { R8260 += 1, R8216 += 1, R6806 += 1, R6807 += 1 };
  s3 -> s6 [70, 70] { R8260 += 1, R8216 += 1, R6805 += 1, R6806 += 1 };
  s3 -> s7 [70, 70] { R8260 += 1, R8216 += 1, R6805 += 1, R6806 += 1 };
  s3 -> s1 [71, 65535] { R8260 += 1, R8216 += 1, R6806 += 1, R6807 += 1 };
  s3 -> s2 [71, 65535] { R8260 += 1, R8216 += 1, R6805 += 1, R6806 += 1 };
  s4 -> s4 [0, 65535] { R8260 += 1 };
  s4 -> s8 [0, 65535];
  s5 -> s8 [0, 65535];
  s5 -> s5 [0, 65535] { R8260 += 1, R8216 += 1, R6806 += 1, R6807 += 1 };
  s5 -> s9 [0, 65535] { R8260 += 1 };
  s7 -> s5 [0, 65535] { R8260 += 1, R8216 += 1, R6806 += 1, R6807 += 1 };
  s7 -> s7 [0, 65535] { R8260 += 1, R8216 += 1, R6805 += 1, R6806 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R8260 += 1 };
  accepting s4, s8, s5, s9, s1;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 69] { R8262 += 1, R8218 += 1, R7928 += 1, R7930 += 1 };
  s0 -> s2 [0, 69] { R8262 += 1, R8218 += 1, R7928 += 1, R7929 += 1, R7930 += 1 };
  s0 -> s3 [0, 69] { R8262 += 1, R8218 += 1, R7927 += 1, R7928 += 1 };
  s0 -> s4 [0, 65535] { R8262 += 1, R8217 += 1, R8218 += 1 };
  s0 -> s0 [0, 65535] { R8261 += 1, R8262 += 1 };
  s0 -> s5 [70, 70] { R8262 += 1, R8218 += 1, R7928 += 1, R7930 += 1 };
  s0 -> s6 [70, 70] { R8262 += 1, R8218 += 1, R7928 += 1, R7929 += 1, R7930 += 1 };
  s0 -> s7 [70, 70] { R8262 += 1, R8218 += 1, R7927 += 1, R7928 += 1 };
  s0 -> s8 [70, 70] { R8262 += 1, R8218 += 1, R7928 += 1, R7929 += 1, R7930 += 1 };
  s0 -> s9 [70, 70] { R8262 += 1, R8218 += 1, R7927 += 1, R7928 += 1 };
  s0 -> s10 [70, 70] { R8262 += 1, R8218 += 1, R7928 += 1, R7930 += 1 };
  s0 -> s1 [71, 74] { R8262 += 1, R8218 += 1, R7928 += 1, R7930 += 1 };
  s0 -> s2 [71, 65535] { R8262 += 1, R8218 += 1, R7928 += 1, R7929 += 1, R7930 += 1 };
  s0 -> s3 [71, 65535] { R8262 += 1, R8218 += 1, R7927 += 1, R7928 += 1 };
  s0 -> s11 [75, 75] { R8262 += 1, R8218 += 1, R7928 += 1, R7930 += 1 };
  s0 -> s1 [76, 65535] { R8262 += 1, R8218 += 1, R7928 += 1, R7930 += 1 };
  s1 -> s1 [0, 69] { R8262 += 1, R8218 += 1, R7928 += 1, R7930 += 1 };
  s1 -> s5 [70, 70] { R8262 += 1, R8218 += 1, R7928 += 1, R7930 += 1 };
  s1 -> s10 [70, 70] { R8262 += 1, R8218 += 1, R7928 += 1, R7930 += 1 };
  s1 -> s1 [71, 74] { R8262 += 1, R8218 += 1, R7928 += 1, R7930 += 1 };
  s1 -> s11 [75, 75] { R8262 += 1, R8218 += 1, R7928 += 1, R7930 += 1 };
  s1 -> s1 [76, 65535] { R8262 += 1, R8218 += 1, R7928 += 1, R7930 += 1 };
  s2 -> s1 [0, 69] { R8262 += 1, R8218 += 1, R7928 += 1, R7930 += 1 };
  s2 -> s2 [0, 69] { R8262 += 1, R8218 += 1, R7928 += 1, R7929 += 1, R7930 += 1 };
  s2 -> s5 [70, 70] { R8262 += 1, R8218 += 1, R7928 += 1, R7930 += 1 };
  s2 -> s6 [70, 70] { R8262 += 1, R8218 += 1, R7928 += 1, R7929 += 1, R7930 += 1 };
  s2 -> s8 [70, 70] { R8262 += 1, R8218 += 1, R7928 += 1, R7929 += 1, R7930 += 1 };
  s2 -> s10 [70, 70] { R8262 += 1, R8218 += 1, R7928 += 1, R7930 += 1 };
  s2 -> s1 [71, 74] { R8262 += 1, R8218 += 1, R7928 += 1, R7930 += 1 };
  s2 -> s2 [71, 65535] { R8262 += 1, R8218 += 1, R7928 += 1, R7929 += 1, R7930 += 1 };
  s2 -> s11 [75, 75] { R8262 += 1, R8218 += 1, R7928 += 1, R7930 += 1 };
  s2 -> s1 [76, 65535] { R8262 += 1, R8218 += 1, R7928 += 1, R7930 += 1 };
  s3 -> s1 [0, 69] { R8262 += 1, R8218 += 1, R7928 += 1, R7930 += 1 };
  s3 -> s2 [0, 69] { R8262 += 1, R8218 += 1, R7928 += 1, R7929 += 1, R7930 += 1 };
  s3 -> s3 [0, 69] { R8262 += 1, R8218 += 1, R7927 += 1, R7928 += 1 };
  s3 -> s5 [70, 70] { R8262 += 1, R8218 += 1, R7928 += 1, R7930 += 1 };
  s3 -> s6 [70, 70] { R8262 += 1, R8218 += 1, R7928 += 1, R7929 += 1, R7930 += 1 };
  s3 -> s7 [70, 70] { R8262 += 1, R8218 += 1, R7927 += 1, R7928 += 1 };
  s3 -> s8 [70, 70] { R8262 += 1, R8218 += 1, R7928 += 1, R7929 += 1, R7930 += 1 };
  s3 -> s9 [70, 70] { R8262 += 1, R8218 += 1, R7927 += 1, R7928 += 1 };
  s3 -> s10 [70, 70] { R8262 += 1, R8218 += 1, R7928 += 1, R7930 += 1 };
  s3 -> s1 [71, 74] { R8262 += 1, R8218 += 1, R7928 += 1, R7930 += 1 };
  s3 -> s2 [71, 65535] { R8262 += 1, R8218 += 1, R7928 += 1, R7929 += 1, R7930 += 1 };
  s3 -> s3 [71, 65535] { R8262 += 1, R8218 += 1, R7927 += 1, R7928 += 1 };
  s3 -> s11 [75, 75] { R8262 += 1, R8218 += 1, R7928 += 1, R7930 += 1 };
  s3 -> s1 [76, 65535] { R8262 += 1, R8218 += 1, R7928 += 1, R7930 += 1 };
  s4 -> s1 [0, 69] { R8262 += 1, R8218 += 1, R7928 += 1, R7930 += 1 };
  s4 -> s2 [0, 69] { R8262 += 1, R8218 += 1, R7928 += 1, R7929 += 1, R7930 += 1 };
  s4 -> s3 [0, 69] { R8262 += 1, R8218 += 1, R7927 += 1, R7928 += 1 };
  s4 -> s4 [0, 65535] { R8262 += 1, R8217 += 1, R8218 += 1 };
  s4 -> s5 [70, 70] { R8262 += 1, R8218 += 1, R7928 += 1, R7930 += 1 };
  s4 -> s6 [70, 70] { R8262 += 1, R8218 += 1, R7928 += 1, R7929 += 1, R7930 += 1 };
  s4 -> s7 [70, 70] { R8262 += 1, R8218 += 1, R7927 += 1, R7928 += 1 };
  s4 -> s8 [70, 70] { R8262 += 1, R8218 += 1, R7928 += 1, R7929 += 1, R7930 += 1 };
  s4 -> s9 [70, 70] { R8262 += 1, R8218 += 1, R7927 += 1, R7928 += 1 };
  s4 -> s10 [70, 70] { R8262 += 1, R8218 += 1, R7928 += 1, R7930 += 1 };
  s4 -> s1 [71, 74] { R8262 += 1, R8218 += 1, R7928 += 1, R7930 += 1 };
  s4 -> s2 [71, 65535] { R8262 += 1, R8218 += 1, R7928 += 1, R7929 += 1, R7930 += 1 };
  s4 -> s3 [71, 65535] { R8262 += 1, R8218 += 1, R7927 += 1, R7928 += 1 };
  s4 -> s11 [75, 75] { R8262 += 1, R8218 += 1, R7928 += 1, R7930 += 1 };
  s4 -> s1 [76, 65535] { R8262 += 1, R8218 += 1, R7928 += 1, R7930 += 1 };
  s7 -> s10 [0, 74] { R8262 += 1, R8218 += 1, R7928 += 1, R7930 += 1 };
  s7 -> s7 [0, 65535] { R8262 += 1, R8218 += 1, R7927 += 1, R7928 += 1 };
  s7 -> s8 [0, 65535] { R8262 += 1, R8218 += 1, R7928 += 1, R7929 += 1, R7930 += 1 };
  s7 -> s18 [75, 75] { R8262 += 1, R8218 += 1, R7928 += 1, R7930 += 1 };
  s7 -> s10 [76, 65535] { R8262 += 1, R8218 += 1, R7928 += 1, R7930 += 1 };
  s8 -> s10 [0, 74] { R8262 += 1, R8218 += 1, R7928 += 1, R7930 += 1 };
  s8 -> s8 [0, 65535] { R8262 += 1, R8218 += 1, R7928 += 1, R7929 += 1, R7930 += 1 };
  s8 -> s18 [75, 75] { R8262 += 1, R8218 += 1, R7928 += 1, R7930 += 1 };
  s8 -> s10 [76, 65535] { R8262 += 1, R8218 += 1, R7928 += 1, R7930 += 1 };
  s10 -> s10 [0, 74] { R8262 += 1, R8218 += 1, R7928 += 1, R7930 += 1 };
  s10 -> s18 [75, 75] { R8262 += 1, R8218 += 1, R7928 += 1, R7930 += 1 };
  s10 -> s10 [76, 65535] { R8262 += 1, R8218 += 1, R7928 += 1, R7930 += 1 };
  s11 -> s11 [0, 69] { R8262 += 1, R8218 += 1, R7928 += 1, R7930 += 1 };
  s11 -> s12 [0, 69] { R8262 += 1, R8218 += 1 };
  s11 -> s13 [0, 69] { R8262 += 1, R8218 += 1, R7928 += 1 };
  s11 -> s14 [70, 70] { R8262 += 1, R8218 += 1 };
  s11 -> s15 [70, 70] { R8262 += 1, R8218 += 1, R7928 += 1 };
  s11 -> s16 [70, 70] { R8262 += 1, R8218 += 1, R7928 += 1, R7930 += 1 };
  s11 -> s17 [70, 70] { R8262 += 1, R8218 += 1 };
  s11 -> s18 [70, 70] { R8262 += 1, R8218 += 1, R7928 += 1, R7930 += 1 };
  s11 -> s19 [70, 70] { R8262 += 1, R8218 += 1, R7928 += 1 };
  s11 -> s11 [71, 65535] { R8262 += 1, R8218 += 1, R7928 += 1, R7930 += 1 };
  s11 -> s12 [71, 65535] { R8262 += 1, R8218 += 1 };
  s11 -> s13 [71, 65535] { R8262 += 1, R8218 += 1, R7928 += 1 };
  s12 -> s12 [0, 69] { R8262 += 1, R8218 += 1 };
  s12 -> s20 [0, 65535];
  s12 -> s12 [0, 65535] { R8262 += 1 };
  s12 -> s14 [70, 70] { R8262 += 1, R8218 += 1 };
  s12 -> s17 [70, 70] { R8262 += 1, R8218 += 1 };
  s12 -> s12 [71, 65535] { R8262 += 1, R8218 += 1 };
  s13 -> s12 [0, 69] { R8262 += 1, R8218 += 1 };
  s13 -> s13 [0, 69] { R8262 += 1, R8218 += 1, R7928 += 1 };
  s13 -> s14 [70, 70] { R8262 += 1, R8218 += 1 };
  s13 -> s15 [70, 70] { R8262 += 1, R8218 += 1, R7928 += 1 };
  s13 -> s17 [70, 70] { R8262 += 1, R8218 += 1 };
  s13 -> s19 [70, 70] { R8262 += 1, R8218 += 1, R7928 += 1 };
  s13 -> s12 [71, 65535] { R8262 += 1, R8218 += 1 };
  s13 -> s13 [71, 65535] { R8262 += 1, R8218 += 1, R7928 += 1 };
  s14 -> s20 [0, 65535];
  s14 -> s14 [0, 65535] { R8262 += 1 };
  s17 -> s20 [0, 65535];
  s17 -> s21 [0, 65535] { R8262 += 1 };
  s17 -> s17 [0, 65535] { R8262 += 1, R8218 += 1 };
  s18 -> s17 [0, 65535] { R8262 += 1, R8218 += 1 };
  s18 -> s18 [0, 65535] { R8262 += 1, R8218 += 1, R7928 += 1, R7930 += 1 };
  s18 -> s19 [0, 65535] { R8262 += 1, R8218 += 1, R7928 += 1 };
  s19 -> s17 [0, 65535] { R8262 += 1, R8218 += 1 };
  s19 -> s19 [0, 65535] { R8262 += 1, R8218 += 1, R7928 += 1 };
  s20 -> s20 [0, 65535];
  s21 -> s20 [0, 65535];
  s21 -> s21 [0, 65535] { R8262 += 1 };
  accepting s17, s12, s14, s21, s20;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 69] { R8264 += 1, R8220 += 1, R8155 += 1, R8156 += 1 };
  s0 -> s2 [0, 65535] { R8264 += 1, R8219 += 1, R8220 += 1 };
  s0 -> s0 [0, 65535] { R8263 += 1, R8264 += 1 };
  s0 -> s3 [70, 70] { R8264 += 1, R8220 += 1, R8155 += 1, R8156 += 1 };
  s0 -> s4 [70, 70] { R8264 += 1, R8220 += 1, R8155 += 1, R8156 += 1 };
  s0 -> s1 [71, 65535] { R8264 += 1, R8220 += 1, R8155 += 1, R8156 += 1 };
  s1 -> s1 [0, 69] { R8264 += 1, R8220 += 1, R8155 += 1, R8156 += 1 };
  s1 -> s1 [0, 65535] { R8264 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [70, 70] { R8264 += 1, R8220 += 1, R8155 += 1, R8156 += 1 };
  s1 -> s4 [70, 70] { R8264 += 1, R8220 += 1, R8155 += 1, R8156 += 1 };
  s1 -> s1 [71, 65535] { R8264 += 1, R8220 += 1, R8155 += 1, R8156 += 1 };
  s2 -> s1 [0, 69] { R8264 += 1, R8220 += 1, R8155 += 1, R8156 += 1 };
  s2 -> s2 [0, 65535] { R8264 += 1, R8219 += 1, R8220 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [70, 70] { R8264 += 1, R8220 += 1, R8155 += 1, R8156 += 1 };
  s2 -> s4 [70, 70] { R8264 += 1, R8220 += 1, R8155 += 1, R8156 += 1 };
  s2 -> s1 [71, 65535] { R8264 += 1, R8220 += 1, R8155 += 1, R8156 += 1 };
  s3 -> s3 [0, 65535] { R8264 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8264 += 1, R8220 += 1, R8155 += 1, R8156 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R8264 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8264 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [102, 102];
  accepting s1;
};
};
constraint R3 = R8264 && R23 - R8264 = -1 && R24 = R8264 && R25 - R8264 = -1 && R26 = R8264 && R27 = 0 && R28 = 1 && R29 = 0 && R30 = 1 && R45 + R84 + R83 + -1*R7932 + -1*R7928 - R66 = 0 && R49 + R89 + R87 = 0 && R50 + R90 + R88 + -1*R7932 + -1*R7928 - R66 = 0 && R55 + R96 + R93 + -1*R7934 + -1*R7930 - R68 = 0 && R65 + R7931 + R7927 = 0 && R67 + R7933 + R7929 = 0 && R8205 = 0 && R8206 = 0 && R8211 = 0 && R8212 = 0 && R8215 = 0 && R8216 = 0 && R8217 = 0 && R8218 = 0 && R8221 = 0 && R8222 = R8264 && R8223 = 0 && R8224 = R8264 && R8225 = 0 && R8226 = R8264 && R8227 = 0 && R8228 = R8264 && R8229 = 0 && R8230 = R8264 && R8231 = 0 && R8232 = R8264 && R8233 = 0 && R8234 = R8264 && R8235 = 0 && R8236 = R8264 && R8237 = 0 && R8238 = R8264 && R8239 = 0 && R8240 = R8264 && R8241 = 0 && R8242 = R8264 && R8243 = 0 && R8244 = R8264 && R8245 = 0 && R8246 = R8264 && R8247 = 0 && R8248 = R8264 && R8249 = 0 && R8250 = R8264 && R8251 = 0 && R8252 = R8264 && R8253 = 0 && R8254 = R8264 && R8255 = 0 && R8256 = R8264 && R8257 = 0 && R8258 = R8264 && R8259 = 0 && R8260 = R8264 && R8261 = 0 && R8262 = R8264 && R8263 = 0 && -1 < R2 && R12 < 1 && R15 < 1 && R16 < 1 && R47 + R86 + R85 < 1 && R61 + R6810 + R6807 < 1 && -1*R7932 + -1*R7928 - R66 < 1 && -1*R7934 + -1*R7930 - R68 < 1 && 0 < R8264 && (R2 != 0 || R20 = 0 || (R8165 = 0 && R8166 = 0)) && (R2 != 0 || R20 = 0 || (R8167 = 0 && R8168 = 0)) && (R2 != 0 || R20 = 0 || (R8169 = 0 && R8170 = 0)) && (R2 != 0 || R20 = 0 || (R8171 = 0 && R8172 = 0)) && (R2 != 0 || R20 = 0 || (R8173 = 0 && R8174 = 0)) && (R2 != 0 || R20 = 0 || (R8175 = 0 && R8176 = 0)) && (R2 != 0 || R20 = 0 || (R8177 = 0 && R8178 = 0)) && (R2 != 0 || R20 = 0 || (R8179 = 0 && R8180 = 0)) && (R2 != 0 || R20 = 0 || (R8181 = 0 && R8182 = 0)) && (R2 != 0 || R20 = 0 || (R8183 = 0 && R8184 = 0)) && (R53 + R94 + R91 != 0 || R54 + R95 + R92 + -1*R7932 + -1*R7928 - R66 = 0 || R66 + R7932 + R7928 < 1) && (R59 + R6808 + R6805 != 0 || R60 + R6809 + R6806 + -1*R7932 + -1*R7928 - R66 = 0 || R66 + R7932 + R7928 < 1) && (R66 + R7932 + R7928 != 0 || ((R53 + R94 + R91 != 0 || R54 + R95 + R92 = 0 || R68 + R7934 + R7930 < 1) && (R53 + R94 + R91 = 0 || R68 + R7934 + R7930 < 1))) && (R66 + R7932 + R7928 != 0 || ((R59 + R6808 + R6805 != 0 || R60 + R6809 + R6806 = 0 || R68 + R7934 + R7930 < 1) && (R59 + R6808 + R6805 = 0 || R68 + R7934 + R7930 < 1))) && (R66 + R7932 + R7928 != 0 || ((R73 + R8160 + R8155 != 0 || R74 + R8161 + R8156 = 0 || R68 + R7934 + R7930 < 1) && (R73 + R8160 + R8155 = 0 || R68 + R7934 + R7930 < 1))) && (R68 + R7934 + R7930 != 0 || R77 + R8164 + R8159 = 0 || (R75 + R8162 + R8157 = 0 && R76 + R8163 + R8158 = 0)) && (R73 + R8160 + R8155 != 0 || R66 + R7932 + R7928 + -1*R8161 + -1*R8156 - R74 = 0 || R66 + R7932 + R7928 < 1) && (R75 + R8162 + R8157 != 0 || R68 + R7934 + R7930 + -1*R8163 + -1*R8158 - R76 = 0 || R68 + R7934 + R7930 < 1) && (R8165 != 0 || R2 = R8166 || R2 < 1) && (R8167 != 0 || R2 = R8168 || R2 < 1) && (R8169 != 0 || R2 = R8170 || R2 < 1) && (R8171 != 0 || R2 = R8172 || R2 < 1) && (R8173 != 0 || R2 = R8174 || R2 < 1) && (R8175 != 0 || R2 = R8176 || R2 < 1) && (R8177 != 0 || R2 = R8178 || R2 < 1) && (R8179 != 0 || R2 = R8180 || R2 < 1) && (R8181 != 0 || R2 = R8182 || R2 < 1) && (R8183 != 0 || R2 = R8184 || R2 < 1) && (R21 = 0 || (R8203 = 0 && R8204 = 0)) && (R21 = 0 || (R8207 = 0 && R8208 = 0)) && (R21 = 0 || (R8209 = 0 && R8210 = 0)) && (R21 = 0 || (R8213 = 0 && R8214 = 0)) && (R21 = 0 || (R8219 = 0 && R8220 = 0)) && (R22 = 0 || (R8185 = 0 && R8186 = 0)) && (R22 = 0 || (R8187 = 0 && R8188 = 0)) && (R22 = 0 || (R8189 = 0 && R8190 = 0)) && (R22 = 0 || (R8191 = 0 && R8192 = 0)) && (R22 = 0 || (R8193 = 0 && R8194 = 0)) && (R22 = 0 || (R8195 = 0 && R8196 = 0)) && (R22 = 0 || (R8197 = 0 && R8198 = 0)) && (R22 = 0 || (R8199 = 0 && R8200 = 0)) && (R22 = 0 || (R8201 = 0 && R8202 = 0)) && (R53 + R94 + R91 = 0 || R66 + R7932 + R7928 < 1) && (R59 + R6808 + R6805 = 0 || R66 + R7932 + R7928 < 1) && (R73 + R8160 + R8155 = 0 || R66 + R7932 + R7928 < 1) && (R75 + R8162 + R8157 = 0 || R68 + R7934 + R7930 < 1) && (R8165 = 0 || R2 < 1) && (R8167 = 0 || R2 < 1) && (R8169 = 0 || R2 < 1) && (R8171 = 0 || R2 < 1) && (R8173 = 0 || R2 < 1) && (R8175 = 0 || R2 < 1) && (R8177 = 0 || R2 < 1) && (R8179 = 0 || R2 < 1) && (R8181 = 0 || R2 < 1) && (R8183 = 0 || R2 < 1);
// End of Parikh automata intersection problem
