// Parikh automata intersection problem, generated by OSTRICH+
counter int R12, R15, R16, R2, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R4, R45, R47, R49, R5, R50, R53, R54, R55, R59, R60, R61, R65, R66, R67, R68, R6805, R6806, R6807, R6808, R6809, R6810, R73, R7369, R7370, R7371, R7372, R7373, R7374, R7375, R7376, R74, R75, R7597, R7598, R7599, R76, R7600, R7601, R7602, R7603, R7604, R7605, R7606, R7607, R7608, R7609, R7610, R7611, R7612, R7613, R7614, R7615, R7616, R7617, R7618, R7619, R7620, R7621, R7622, R7623, R7624, R7625, R7626, R7627, R7628, R7629, R7630, R7631, R7632, R7633, R7634, R7635, R7636, R7637, R7638, R7639, R7640, R7641, R7642, R7643, R7644, R7645, R7646, R7647, R7648, R7649, R7650, R7651, R7652, R7653, R7654, R7655, R7656, R7657, R7658, R7659, R7660, R7661, R7662, R7663, R7664, R7665, R7666, R7667, R7668, R7669, R7670, R7671, R7672, R7673, R7674, R7675, R7676, R7677, R7678, R7679, R7680, R7681, R7682, R7683, R7684, R7685, R7686, R7687, R7688, R7689, R7690, R7691, R7692, R7693, R7694, R7695, R7696, R7697, R7698, R7699, R77, R7700, R7701, R7702, R7703, R7704, R7705, R7706, R83, R84, R85, R86, R87, R88, R89, R90, R91, R92, R93, R94, R95, R96;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [70, 70];
  s0 -> s0 [71, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [70, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R15 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 69];
  s0 -> s0 [0, 65535] { R16 += 1 };
  s0 -> s2 [70, 70];
  s0 -> s1 [71, 65535];
  s1 -> s1 [0, 69];
  s1 -> s2 [70, 70];
  s1 -> s1 [71, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R24 += 1 };
  s0 -> s0 [0, 65535] { R23 += 1, R24 += 1 };
  s0 -> s2 [9, 13] { R24 += 1 };
  s0 -> s1 [14, 31] { R24 += 1 };
  s0 -> s2 [32, 32] { R24 += 1 };
  s0 -> s1 [33, 65535] { R24 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R24 += 1 };
  s2 -> s1 [0, 65535] { R24 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R25 += 1, R26 += 1 };
  s1 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R28 += 1 };
  s0 -> s0 [0, 65535] { R27 += 1, R28 += 1 };
  s0 -> s2 [9, 13] { R28 += 1 };
  s0 -> s1 [14, 31] { R28 += 1 };
  s0 -> s2 [32, 32] { R28 += 1 };
  s0 -> s1 [33, 65535] { R28 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R28 += 1 };
  s2 -> s1 [0, 65535] { R28 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R29 += 1, R30 += 1 };
  s1 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R7628 += 1, R22 += 1 };
  s0 -> s0 [0, 65535] { R7627 += 1, R7628 += 1 };
  s1 -> s1 [0, 65535] { R7628 += 1, R22 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 69] { R7630 += 1 };
  s0 -> s0 [0, 65535] { R7629 += 1, R7630 += 1 };
  s0 -> s2 [70, 70] { R7630 += 1 };
  s0 -> s3 [70, 70] { R7630 += 1 };
  s0 -> s1 [76, 65535] { R7630 += 1 };
  s1 -> s1 [0, 69] { R7630 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R7630 += 1 };
  s1 -> s3 [70, 70] { R7630 += 1 };
  s1 -> s1 [76, 65535] { R7630 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 70] { R7630 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [76, 65535] { R7630 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 69] { R7632 += 1, R45 += 1 };
  s0 -> s0 [0, 65535] { R7631 += 1, R7632 += 1 };
  s0 -> s2 [70, 70] { R7632 += 1, R45 += 1 };
  s0 -> s3 [70, 70] { R7632 += 1, R45 += 1 };
  s0 -> s1 [71, 65535] { R7632 += 1, R45 += 1 };
  s1 -> s1 [0, 69] { R7632 += 1, R45 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R7632 += 1, R45 += 1 };
  s1 -> s3 [70, 70] { R7632 += 1, R45 += 1 };
  s1 -> s1 [71, 65535] { R7632 += 1, R45 += 1 };
  s2 -> s2 [0, 65535] { R7632 += 1, R45 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 69] { R7634 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R7633 += 1, R7634 += 1 };
  s0 -> s2 [70, 70] { R7634 += 1, R47 += 1 };
  s0 -> s3 [70, 70] { R7634 += 1, R47 += 1 };
  s0 -> s1 [71, 65535] { R7634 += 1, R47 += 1 };
  s1 -> s1 [0, 69] { R7634 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R7634 += 1, R47 += 1 };
  s1 -> s3 [70, 70] { R7634 += 1, R47 += 1 };
  s1 -> s1 [71, 65535] { R7634 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R7634 += 1, R47 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 69] { R7636 += 1, R49 += 1, R50 += 1 };
  s0 -> s0 [0, 65535] { R7635 += 1, R7636 += 1 };
  s0 -> s2 [70, 70] { R7636 += 1, R49 += 1, R50 += 1 };
  s0 -> s3 [70, 70] { R7636 += 1, R49 += 1, R50 += 1 };
  s0 -> s1 [71, 65535] { R7636 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 69] { R7636 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R7636 += 1, R49 += 1, R50 += 1 };
  s1 -> s3 [70, 70] { R7636 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [71, 65535] { R7636 += 1, R49 += 1, R50 += 1 };
  s2 -> s2 [0, 65535] { R7636 += 1, R49 += 1, R50 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 69] { R7638 += 1, R53 += 1, R54 += 1 };
  s0 -> s0 [0, 65535] { R7637 += 1, R7638 += 1 };
  s0 -> s2 [70, 70] { R7638 += 1, R53 += 1, R54 += 1 };
  s0 -> s3 [70, 70] { R7638 += 1, R53 += 1, R54 += 1 };
  s0 -> s1 [71, 65535] { R7638 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 69] { R7638 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R7638 += 1, R53 += 1, R54 += 1 };
  s1 -> s3 [70, 70] { R7638 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [71, 65535] { R7638 += 1, R53 += 1, R54 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R7638 += 1, R53 += 1, R54 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 69] { R7640 += 1, R59 += 1, R60 += 1 };
  s0 -> s0 [0, 65535] { R7639 += 1, R7640 += 1 };
  s0 -> s2 [70, 70] { R7640 += 1, R59 += 1, R60 += 1 };
  s0 -> s3 [70, 70] { R7640 += 1, R59 += 1, R60 += 1 };
  s0 -> s1 [71, 65535] { R7640 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 69] { R7640 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R7640 += 1, R59 += 1, R60 += 1 };
  s1 -> s3 [70, 70] { R7640 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [71, 65535] { R7640 += 1, R59 += 1, R60 += 1 };
  s2 -> s2 [0, 65535] { R7640 += 1, R59 += 1, R60 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 69] { R7642 += 1, R65 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R7641 += 1, R7642 += 1 };
  s0 -> s2 [70, 70] { R7642 += 1, R65 += 1, R66 += 1 };
  s0 -> s3 [70, 70] { R7642 += 1, R65 += 1, R66 += 1 };
  s0 -> s1 [71, 65535] { R7642 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 69] { R7642 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R7642 += 1, R65 += 1, R66 += 1 };
  s1 -> s3 [70, 70] { R7642 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [71, 65535] { R7642 += 1, R65 += 1, R66 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R7642 += 1, R65 += 1, R66 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 69] { R7644 += 1, R73 += 1, R74 += 1 };
  s0 -> s0 [0, 65535] { R7643 += 1, R7644 += 1 };
  s0 -> s2 [70, 70] { R7644 += 1, R73 += 1, R74 += 1 };
  s0 -> s3 [70, 70] { R7644 += 1, R73 += 1, R74 += 1 };
  s0 -> s1 [71, 65535] { R7644 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 69] { R7644 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R7644 += 1, R73 += 1, R74 += 1 };
  s1 -> s3 [70, 70] { R7644 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [71, 65535] { R7644 += 1, R73 += 1, R74 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R7644 += 1, R73 += 1, R74 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 69] { R7664 += 1 };
  s0 -> s0 [0, 65535] { R7663 += 1, R7664 += 1 };
  s0 -> s2 [70, 70] { R7664 += 1 };
  s0 -> s1 [71, 65535] { R7664 += 1 };
  s1 -> s1 [0, 69] { R7664 += 1 };
  s1 -> s2 [70, 70] { R7664 += 1 };
  s1 -> s1 [71, 65535] { R7664 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R7664 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R7666 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R7665 += 1, R7666 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R7666 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 69] { R7668 += 1 };
  s0 -> s0 [0, 65535] { R7667 += 1, R7668 += 1 };
  s0 -> s2 [0, 65535] { R7668 += 1, R12 += 1 };
  s0 -> s3 [70, 70] { R7668 += 1 };
  s0 -> s1 [71, 65535] { R7668 += 1 };
  s1 -> s1 [0, 69] { R7668 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [70, 70] { R7668 += 1 };
  s1 -> s1 [71, 65535] { R7668 += 1 };
  s2 -> s1 [0, 69] { R7668 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R7668 += 1, R12 += 1 };
  s2 -> s3 [70, 70] { R7668 += 1 };
  s2 -> s1 [71, 65535] { R7668 += 1 };
  s3 -> s3 [0, 65535] { R7668 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 69] { R7670 += 1, R7608 += 1 };
  s0 -> s2 [0, 65535] { R7670 += 1, R7607 += 1, R7608 += 1 };
  s0 -> s0 [0, 65535] { R7669 += 1, R7670 += 1 };
  s0 -> s1 [71, 65535] { R7670 += 1, R7608 += 1 };
  s1 -> s1 [0, 69] { R7670 += 1, R7608 += 1 };
  s1 -> s1 [0, 65535] { R7670 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [71, 65535] { R7670 += 1, R7608 += 1 };
  s2 -> s1 [0, 69] { R7670 += 1, R7608 += 1 };
  s2 -> s2 [0, 65535] { R7670 += 1, R7607 += 1, R7608 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [71, 65535] { R7670 += 1, R7608 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s0 [0, 65535] { R7671 += 1, R7672 += 1 };
  s0 -> s1 [0, 65535] { R7672 += 1, R7609 += 1, R7610 += 1 };
  s0 -> s2 [0, 65535] { R7672 += 1, R7610 += 1, R20 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R7672 += 1, R7609 += 1, R7610 += 1 };
  s1 -> s2 [0, 65535] { R7672 += 1, R7610 += 1, R20 += 1 };
  s2 -> s3 [0, 65535] { R7672 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R7672 += 1, R7610 += 1, R20 += 1 };
  s3 -> s3 [0, 65535] { R7672 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 70] { R7674 += 1, R7612 += 1 };
  s0 -> s2 [0, 65535] { R7674 += 1, R7611 += 1, R7612 += 1 };
  s0 -> s0 [0, 65535] { R7673 += 1, R7674 += 1 };
  s0 -> s1 [75, 65535] { R7674 += 1, R7612 += 1 };
  s1 -> s1 [0, 70] { R7674 += 1, R7612 += 1 };
  s1 -> s1 [0, 65535] { R7674 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [75, 65535] { R7674 += 1, R7612 += 1 };
  s2 -> s1 [0, 70] { R7674 += 1, R7612 += 1 };
  s2 -> s2 [0, 65535] { R7674 += 1, R7611 += 1, R7612 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [75, 65535] { R7674 += 1, R7612 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s0 [0, 65535] { R7675 += 1, R7676 += 1 };
  s0 -> s1 [0, 65535] { R7676 += 1, R7613 += 1, R7614 += 1 };
  s0 -> s2 [0, 65535] { R7676 += 1, R7614 += 1, R84 += 1 };
  s1 -> s1 [0, 65535] { R7676 += 1, R7613 += 1, R7614 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R7676 += 1, R7614 += 1, R84 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R7676 += 1 };
  s2 -> s2 [0, 65535] { R7676 += 1, R7614 += 1, R84 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7676 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 74] { R7678 += 1, R7616 += 1 };
  s0 -> s2 [0, 65535] { R7678 += 1, R7616 += 1, R86 += 1 };
  s0 -> s3 [0, 65535] { R7678 += 1, R7615 += 1, R7616 += 1 };
  s0 -> s0 [0, 65535] { R7677 += 1, R7678 += 1 };
  s0 -> s1 [76, 65535] { R7678 += 1, R7616 += 1 };
  s1 -> s1 [0, 74] { R7678 += 1, R7616 += 1 };
  s1 -> s1 [0, 65535] { R7678 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [76, 65535] { R7678 += 1, R7616 += 1 };
  s2 -> s1 [0, 74] { R7678 += 1, R7616 += 1 };
  s2 -> s2 [0, 65535] { R7678 += 1, R7616 += 1, R86 += 1 };
  s2 -> s5 [0, 65535] { R7678 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [76, 65535] { R7678 += 1, R7616 += 1 };
  s3 -> s1 [0, 74] { R7678 += 1, R7616 += 1 };
  s3 -> s2 [0, 65535] { R7678 += 1, R7616 += 1, R86 += 1 };
  s3 -> s3 [0, 65535] { R7678 += 1, R7615 += 1, R7616 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [76, 65535] { R7678 += 1, R7616 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R7678 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 65535] { R7680 += 1, R7618 += 1 };
  s0 -> s2 [0, 65535] { R7680 += 1, R7618 += 1, R90 += 1 };
  s0 -> s3 [0, 65535] { R7680 += 1, R7617 += 1, R7618 += 1 };
  s0 -> s0 [0, 65535] { R7679 += 1, R7680 += 1 };
  s1 -> s1 [0, 65535] { R7680 += 1, R7618 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R7680 += 1 };
  s2 -> s1 [0, 65535] { R7680 += 1, R7618 += 1 };
  s2 -> s2 [0, 65535] { R7680 += 1, R7618 += 1, R90 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R7680 += 1 };
  s3 -> s1 [0, 65535] { R7680 += 1, R7618 += 1 };
  s3 -> s2 [0, 65535] { R7680 += 1, R7618 += 1, R90 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7680 += 1, R7617 += 1, R7618 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R7680 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R7682 += 1, R7619 += 1, R7620 += 1 };
  s0 -> s0 [0, 65535] { R7681 += 1, R7682 += 1 };
  s0 -> s2 [0, 65535] { R7682 += 1, R7620 += 1, R94 += 1, R95 += 1 };
  s0 -> s3 [0, 65535] { R7682 += 1, R7620 += 1, R95 += 1, R96 += 1 };
  s1 -> s1 [0, 65535] { R7682 += 1, R7619 += 1, R7620 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s2 [0, 65535] { R7682 += 1, R7620 += 1, R94 += 1, R95 += 1 };
  s1 -> s3 [0, 65535] { R7682 += 1, R7620 += 1, R95 += 1, R96 += 1 };
  s2 -> s4 [0, 65535] { R7682 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R7682 += 1, R7620 += 1, R94 += 1, R95 += 1 };
  s2 -> s3 [0, 65535] { R7682 += 1, R7620 += 1, R95 += 1, R96 += 1 };
  s3 -> s4 [0, 65535] { R7682 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R7682 += 1, R7620 += 1 };
  s3 -> s3 [0, 65535] { R7682 += 1, R7620 += 1, R95 += 1, R96 += 1 };
  s4 -> s4 [0, 65535] { R7682 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R7682 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7682 += 1, R7620 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 74] { R7684 += 1, R7622 += 1, R6809 += 1 };
  s0 -> s0 [0, 65535] { R7683 += 1, R7684 += 1 };
  s0 -> s2 [0, 65535] { R7684 += 1, R7621 += 1, R7622 += 1 };
  s0 -> s3 [0, 65535] { R7684 += 1, R7622 += 1 };
  s0 -> s4 [0, 65535] { R7684 += 1, R7622 += 1, R6809 += 1, R6810 += 1 };
  s0 -> s1 [76, 65535] { R7684 += 1, R7622 += 1, R6809 += 1 };
  s1 -> s1 [0, 74] { R7684 += 1, R7622 += 1, R6809 += 1 };
  s1 -> s1 [0, 65535] { R7684 += 1, R7622 += 1 };
  s1 -> s5 [0, 65535] { R7684 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [76, 65535] { R7684 += 1, R7622 += 1, R6809 += 1 };
  s2 -> s1 [0, 74] { R7684 += 1, R7622 += 1, R6809 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R7684 += 1, R7621 += 1, R7622 += 1 };
  s2 -> s3 [0, 65535] { R7684 += 1, R7622 += 1 };
  s2 -> s4 [0, 65535] { R7684 += 1, R7622 += 1, R6809 += 1, R6810 += 1 };
  s2 -> s1 [76, 65535] { R7684 += 1, R7622 += 1, R6809 += 1 };
  s3 -> s5 [0, 65535] { R7684 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R7684 += 1, R7622 += 1 };
  s4 -> s1 [0, 74] { R7684 += 1, R7622 += 1, R6809 += 1 };
  s4 -> s5 [0, 65535] { R7684 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s3 [0, 65535] { R7684 += 1, R7622 += 1 };
  s4 -> s4 [0, 65535] { R7684 += 1, R7622 += 1, R6809 += 1, R6810 += 1 };
  s4 -> s1 [76, 65535] { R7684 += 1, R7622 += 1, R6809 += 1 };
  s5 -> s5 [0, 65535] { R7684 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R7686 += 1, R7624 += 1 };
  s0 -> s0 [0, 65535] { R7685 += 1, R7686 += 1 };
  s0 -> s2 [0, 65535] { R7686 += 1, R7623 += 1, R7624 += 1 };
  s0 -> s3 [0, 65535] { R7686 += 1, R7624 += 1, R7374 += 1 };
  s1 -> s1 [0, 65535] { R7686 += 1, R7624 += 1 };
  s1 -> s4 [0, 65535] { R7686 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R7686 += 1, R7624 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R7686 += 1, R7623 += 1, R7624 += 1 };
  s2 -> s3 [0, 65535] { R7686 += 1, R7624 += 1, R7374 += 1 };
  s3 -> s1 [0, 65535] { R7686 += 1, R7624 += 1 };
  s3 -> s4 [0, 65535] { R7686 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R7686 += 1, R7624 += 1, R7374 += 1 };
  s4 -> s4 [0, 65535] { R7686 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 65535] { R7688 += 1, R7626 += 1, R7602 += 1, R7603 += 1 };
  s0 -> s2 [0, 65535] { R7688 += 1, R7626 += 1, R7603 += 1, R7605 += 1, R7606 += 1 };
  s0 -> s0 [0, 65535] { R7687 += 1, R7688 += 1 };
  s0 -> s3 [0, 65535] { R7688 += 1, R7626 += 1, R7603 += 1, R7604 += 1, R7605 += 1 };
  s0 -> s4 [0, 65535] { R7688 += 1, R7625 += 1, R7626 += 1 };
  s1 -> s1 [0, 65535] { R7688 += 1, R7626 += 1, R7602 += 1, R7603 += 1 };
  s1 -> s2 [0, 65535] { R7688 += 1, R7626 += 1, R7603 += 1, R7605 += 1, R7606 += 1 };
  s1 -> s3 [0, 65535] { R7688 += 1, R7626 += 1, R7603 += 1, R7604 += 1, R7605 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s7 [0, 65535] { R7688 += 1 };
  s2 -> s2 [0, 65535] { R7688 += 1, R7626 += 1, R7603 += 1, R7605 += 1, R7606 += 1 };
  s2 -> s8 [0, 65535] { R7688 += 1, R7626 += 1, R7603 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R7688 += 1, R7626 += 1 };
  s2 -> s7 [0, 65535] { R7688 += 1 };
  s3 -> s2 [0, 65535] { R7688 += 1, R7626 += 1, R7603 += 1, R7605 += 1, R7606 += 1 };
  s3 -> s3 [0, 65535] { R7688 += 1, R7626 += 1, R7603 += 1, R7604 += 1, R7605 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R7688 += 1, R7626 += 1 };
  s3 -> s7 [0, 65535] { R7688 += 1 };
  s4 -> s1 [0, 65535] { R7688 += 1, R7626 += 1, R7602 += 1, R7603 += 1 };
  s4 -> s2 [0, 65535] { R7688 += 1, R7626 += 1, R7603 += 1, R7605 += 1, R7606 += 1 };
  s4 -> s3 [0, 65535] { R7688 += 1, R7626 += 1, R7603 += 1, R7604 += 1, R7605 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R7688 += 1, R7625 += 1, R7626 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7688 += 1, R7626 += 1 };
  s6 -> s7 [0, 65535] { R7688 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R7688 += 1 };
  s8 -> s8 [0, 65535] { R7688 += 1, R7626 += 1, R7603 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s6 [0, 65535] { R7688 += 1, R7626 += 1 };
  s8 -> s7 [0, 65535] { R7688 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R7690 += 1, R7646 += 1, R21 += 1 };
  s0 -> s2 [0, 65535] { R7690 += 1, R7645 += 1, R7646 += 1 };
  s0 -> s0 [0, 65535] { R7689 += 1, R7690 += 1 };
  s1 -> s4 [0, 65535] { R7690 += 1 };
  s1 -> s1 [0, 65535] { R7690 += 1, R7646 += 1, R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R7690 += 1, R7646 += 1, R21 += 1 };
  s2 -> s2 [0, 65535] { R7690 += 1, R7645 += 1, R7646 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7690 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 69] { R7692 += 1, R7648 += 1 };
  s0 -> s2 [0, 65535] { R7692 += 1, R7647 += 1, R7648 += 1 };
  s0 -> s0 [0, 65535] { R7691 += 1, R7692 += 1 };
  s0 -> s3 [70, 70] { R7692 += 1, R7648 += 1 };
  s0 -> s4 [70, 70] { R7692 += 1, R7648 += 1 };
  s0 -> s5 [75, 75] { R7692 += 1, R7648 += 1 };
  s0 -> s1 [76, 65535] { R7692 += 1, R7648 += 1 };
  s1 -> s1 [0, 69] { R7692 += 1, R7648 += 1 };
  s1 -> s3 [70, 70] { R7692 += 1, R7648 += 1 };
  s1 -> s4 [70, 70] { R7692 += 1, R7648 += 1 };
  s1 -> s5 [75, 75] { R7692 += 1, R7648 += 1 };
  s1 -> s1 [76, 65535] { R7692 += 1, R7648 += 1 };
  s2 -> s1 [0, 69] { R7692 += 1, R7648 += 1 };
  s2 -> s2 [0, 65535] { R7692 += 1, R7647 += 1, R7648 += 1 };
  s2 -> s3 [70, 70] { R7692 += 1, R7648 += 1 };
  s2 -> s4 [70, 70] { R7692 += 1, R7648 += 1 };
  s2 -> s5 [75, 75] { R7692 += 1, R7648 += 1 };
  s2 -> s1 [76, 65535] { R7692 += 1, R7648 += 1 };
  s3 -> s3 [0, 70] { R7692 += 1, R7648 += 1 };
  s3 -> s8 [75, 75] { R7692 += 1, R7648 += 1 };
  s3 -> s3 [76, 65535] { R7692 += 1, R7648 += 1 };
  s5 -> s5 [0, 69] { R7692 += 1, R7648 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R7692 += 1 };
  s5 -> s7 [70, 70] { R7692 += 1, R7648 += 1 };
  s5 -> s8 [70, 70] { R7692 += 1, R7648 += 1 };
  s5 -> s5 [75, 65535] { R7692 += 1, R7648 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R7692 += 1 };
  s8 -> s8 [0, 70] { R7692 += 1, R7648 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R7692 += 1 };
  s8 -> s8 [75, 65535] { R7692 += 1, R7648 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 69] { R7694 += 1, R7650 += 1, R83 += 1 };
  s0 -> s0 [0, 65535] { R7693 += 1, R7694 += 1 };
  s0 -> s2 [0, 65535] { R7694 += 1, R7649 += 1, R7650 += 1 };
  s0 -> s3 [70, 70] { R7694 += 1, R7650 += 1, R83 += 1 };
  s0 -> s4 [70, 70] { R7694 += 1, R7650 += 1, R83 += 1 };
  s0 -> s1 [71, 65535] { R7694 += 1, R7650 += 1, R83 += 1 };
  s1 -> s1 [0, 69] { R7694 += 1, R7650 += 1, R83 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R7694 += 1 };
  s1 -> s3 [70, 70] { R7694 += 1, R7650 += 1, R83 += 1 };
  s1 -> s4 [70, 70] { R7694 += 1, R7650 += 1, R83 += 1 };
  s1 -> s1 [71, 65535] { R7694 += 1, R7650 += 1, R83 += 1 };
  s2 -> s1 [0, 69] { R7694 += 1, R7650 += 1, R83 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R7694 += 1, R7649 += 1, R7650 += 1 };
  s2 -> s3 [70, 70] { R7694 += 1, R7650 += 1, R83 += 1 };
  s2 -> s4 [70, 70] { R7694 += 1, R7650 += 1, R83 += 1 };
  s2 -> s1 [71, 65535] { R7694 += 1, R7650 += 1, R83 += 1 };
  s3 -> s3 [0, 65535] { R7694 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R7694 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R7694 += 1, R7650 += 1, R83 += 1 };
  s5 -> s5 [0, 65535] { R7694 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 69] { R7696 += 1, R7652 += 1, R85 += 1 };
  s0 -> s0 [0, 65535] { R7695 += 1, R7696 += 1 };
  s0 -> s2 [0, 65535] { R7696 += 1, R7651 += 1, R7652 += 1 };
  s0 -> s3 [70, 70] { R7696 += 1, R7652 += 1, R85 += 1 };
  s0 -> s4 [70, 70] { R7696 += 1, R7652 += 1, R85 += 1 };
  s0 -> s1 [71, 65535] { R7696 += 1, R7652 += 1, R85 += 1 };
  s1 -> s1 [0, 69] { R7696 += 1, R7652 += 1, R85 += 1 };
  s1 -> s1 [0, 65535] { R7696 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [70, 70] { R7696 += 1, R7652 += 1, R85 += 1 };
  s1 -> s4 [70, 70] { R7696 += 1, R7652 += 1, R85 += 1 };
  s1 -> s1 [71, 65535] { R7696 += 1, R7652 += 1, R85 += 1 };
  s2 -> s1 [0, 69] { R7696 += 1, R7652 += 1, R85 += 1 };
  s2 -> s2 [0, 65535] { R7696 += 1, R7651 += 1, R7652 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [70, 70] { R7696 += 1, R7652 += 1, R85 += 1 };
  s2 -> s4 [70, 70] { R7696 += 1, R7652 += 1, R85 += 1 };
  s2 -> s1 [71, 65535] { R7696 += 1, R7652 += 1, R85 += 1 };
  s3 -> s3 [0, 65535] { R7696 += 1, R7652 += 1, R85 += 1 };
  s3 -> s6 [0, 65535] { R7696 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R7696 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7696 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 69] { R7698 += 1, R7654 += 1, R87 += 1, R88 += 1 };
  s0 -> s2 [0, 69] { R7698 += 1, R7654 += 1, R88 += 1 };
  s0 -> s3 [0, 65535] { R7698 += 1, R7653 += 1, R7654 += 1 };
  s0 -> s0 [0, 65535] { R7697 += 1, R7698 += 1 };
  s0 -> s4 [70, 70] { R7698 += 1, R7654 += 1, R88 += 1 };
  s0 -> s5 [70, 70] { R7698 += 1, R7654 += 1, R88 += 1 };
  s0 -> s6 [70, 70] { R7698 += 1, R7654 += 1, R87 += 1, R88 += 1 };
  s0 -> s7 [70, 70] { R7698 += 1, R7654 += 1, R87 += 1, R88 += 1 };
  s0 -> s2 [71, 74] { R7698 += 1, R7654 += 1, R88 += 1 };
  s0 -> s1 [71, 65535] { R7698 += 1, R7654 += 1, R87 += 1, R88 += 1 };
  s0 -> s8 [75, 75] { R7698 += 1, R7654 += 1, R88 += 1 };
  s0 -> s2 [76, 65535] { R7698 += 1, R7654 += 1, R88 += 1 };
  s1 -> s1 [0, 69] { R7698 += 1, R7654 += 1, R87 += 1, R88 += 1 };
  s1 -> s2 [0, 69] { R7698 += 1, R7654 += 1, R88 += 1 };
  s1 -> s4 [70, 70] { R7698 += 1, R7654 += 1, R88 += 1 };
  s1 -> s5 [70, 70] { R7698 += 1, R7654 += 1, R88 += 1 };
  s1 -> s6 [70, 70] { R7698 += 1, R7654 += 1, R87 += 1, R88 += 1 };
  s1 -> s7 [70, 70] { R7698 += 1, R7654 += 1, R87 += 1, R88 += 1 };
  s1 -> s2 [71, 74] { R7698 += 1, R7654 += 1, R88 += 1 };
  s1 -> s1 [71, 65535] { R7698 += 1, R7654 += 1, R87 += 1, R88 += 1 };
  s1 -> s8 [75, 75] { R7698 += 1, R7654 += 1, R88 += 1 };
  s1 -> s2 [76, 65535] { R7698 += 1, R7654 += 1, R88 += 1 };
  s2 -> s2 [0, 69] { R7698 += 1, R7654 += 1, R88 += 1 };
  s2 -> s4 [70, 70] { R7698 += 1, R7654 += 1, R88 += 1 };
  s2 -> s5 [70, 70] { R7698 += 1, R7654 += 1, R88 += 1 };
  s2 -> s2 [71, 74] { R7698 += 1, R7654 += 1, R88 += 1 };
  s2 -> s8 [75, 75] { R7698 += 1, R7654 += 1, R88 += 1 };
  s2 -> s2 [76, 65535] { R7698 += 1, R7654 += 1, R88 += 1 };
  s3 -> s1 [0, 69] { R7698 += 1, R7654 += 1, R87 += 1, R88 += 1 };
  s3 -> s2 [0, 69] { R7698 += 1, R7654 += 1, R88 += 1 };
  s3 -> s3 [0, 65535] { R7698 += 1, R7653 += 1, R7654 += 1 };
  s3 -> s4 [70, 70] { R7698 += 1, R7654 += 1, R88 += 1 };
  s3 -> s5 [70, 70] { R7698 += 1, R7654 += 1, R88 += 1 };
  s3 -> s6 [70, 70] { R7698 += 1, R7654 += 1, R87 += 1, R88 += 1 };
  s3 -> s7 [70, 70] { R7698 += 1, R7654 += 1, R87 += 1, R88 += 1 };
  s3 -> s2 [71, 74] { R7698 += 1, R7654 += 1, R88 += 1 };
  s3 -> s1 [71, 65535] { R7698 += 1, R7654 += 1, R87 += 1, R88 += 1 };
  s3 -> s8 [75, 75] { R7698 += 1, R7654 += 1, R88 += 1 };
  s3 -> s2 [76, 65535] { R7698 += 1, R7654 += 1, R88 += 1 };
  s4 -> s4 [0, 74] { R7698 += 1, R7654 += 1, R88 += 1 };
  s4 -> s10 [75, 75] { R7698 += 1, R7654 += 1, R88 += 1 };
  s4 -> s4 [76, 65535] { R7698 += 1, R7654 += 1, R88 += 1 };
  s7 -> s4 [0, 74] { R7698 += 1, R7654 += 1, R88 += 1 };
  s7 -> s7 [0, 65535] { R7698 += 1, R7654 += 1, R87 += 1, R88 += 1 };
  s7 -> s10 [75, 75] { R7698 += 1, R7654 += 1, R88 += 1 };
  s7 -> s4 [76, 65535] { R7698 += 1, R7654 += 1, R88 += 1 };
  s8 -> s8 [0, 69] { R7698 += 1, R7654 += 1, R88 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R7698 += 1 };
  s8 -> s10 [70, 70] { R7698 += 1, R7654 += 1, R88 += 1 };
  s8 -> s11 [70, 70] { R7698 += 1, R7654 += 1, R88 += 1 };
  s8 -> s8 [71, 65535] { R7698 += 1, R7654 += 1, R88 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s12 [0, 65535] { R7698 += 1 };
  s10 -> s10 [0, 65535] { R7698 += 1, R7654 += 1, R88 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R7698 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R7698 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 69] { R7700 += 1, R7656 += 1, R91 += 1, R92 += 1 };
  s0 -> s0 [0, 65535] { R7699 += 1, R7700 += 1 };
  s0 -> s2 [0, 65535] { R7700 += 1, R7655 += 1, R7656 += 1 };
  s0 -> s3 [70, 70] { R7700 += 1, R7656 += 1, R91 += 1, R92 += 1 };
  s0 -> s4 [70, 70] { R7700 += 1, R7656 += 1, R91 += 1, R92 += 1 };
  s0 -> s1 [71, 65535] { R7700 += 1, R7656 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 69] { R7700 += 1, R7656 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 65535] { R7700 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [70, 70] { R7700 += 1, R7656 += 1, R91 += 1, R92 += 1 };
  s1 -> s4 [70, 70] { R7700 += 1, R7656 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [71, 65535] { R7700 += 1, R7656 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [0, 69] { R7700 += 1, R7656 += 1, R91 += 1, R92 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R7700 += 1, R7655 += 1, R7656 += 1 };
  s2 -> s3 [70, 70] { R7700 += 1, R7656 += 1, R91 += 1, R92 += 1 };
  s2 -> s4 [70, 70] { R7700 += 1, R7656 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [71, 65535] { R7700 += 1, R7656 += 1, R91 += 1, R92 += 1 };
  s3 -> s6 [0, 65535] { R7700 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R7700 += 1, R7656 += 1, R91 += 1, R92 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R7700 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7700 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 69] { R7702 += 1, R7658 += 1, R6806 += 1, R6807 += 1 };
  s0 -> s2 [0, 69] { R7702 += 1, R7658 += 1, R6805 += 1, R6806 += 1 };
  s0 -> s3 [0, 65535] { R7702 += 1, R7657 += 1, R7658 += 1 };
  s0 -> s0 [0, 65535] { R7701 += 1, R7702 += 1 };
  s0 -> s4 [70, 70] { R7702 += 1, R7658 += 1, R6806 += 1, R6807 += 1 };
  s0 -> s5 [70, 70] { R7702 += 1, R7658 += 1, R6806 += 1, R6807 += 1 };
  s0 -> s6 [70, 70] { R7702 += 1, R7658 += 1, R6805 += 1, R6806 += 1 };
  s0 -> s7 [70, 70] { R7702 += 1, R7658 += 1, R6805 += 1, R6806 += 1 };
  s0 -> s1 [71, 65535] { R7702 += 1, R7658 += 1, R6806 += 1, R6807 += 1 };
  s0 -> s2 [71, 65535] { R7702 += 1, R7658 += 1, R6805 += 1, R6806 += 1 };
  s1 -> s1 [0, 69] { R7702 += 1, R7658 += 1, R6806 += 1, R6807 += 1 };
  s1 -> s1 [0, 65535] { R7702 += 1 };
  s1 -> s9 [0, 65535];
  s1 -> s4 [70, 70] { R7702 += 1, R7658 += 1, R6806 += 1, R6807 += 1 };
  s1 -> s5 [70, 70] { R7702 += 1, R7658 += 1, R6806 += 1, R6807 += 1 };
  s1 -> s1 [71, 65535] { R7702 += 1, R7658 += 1, R6806 += 1, R6807 += 1 };
  s2 -> s1 [0, 69] { R7702 += 1, R7658 += 1, R6806 += 1, R6807 += 1 };
  s2 -> s2 [0, 69] { R7702 += 1, R7658 += 1, R6805 += 1, R6806 += 1 };
  s2 -> s4 [70, 70] { R7702 += 1, R7658 += 1, R6806 += 1, R6807 += 1 };
  s2 -> s5 [70, 70] { R7702 += 1, R7658 += 1, R6806 += 1, R6807 += 1 };
  s2 -> s6 [70, 70] { R7702 += 1, R7658 += 1, R6805 += 1, R6806 += 1 };
  s2 -> s7 [70, 70] { R7702 += 1, R7658 += 1, R6805 += 1, R6806 += 1 };
  s2 -> s1 [71, 65535] { R7702 += 1, R7658 += 1, R6806 += 1, R6807 += 1 };
  s2 -> s2 [71, 65535] { R7702 += 1, R7658 += 1, R6805 += 1, R6806 += 1 };
  s3 -> s1 [0, 69] { R7702 += 1, R7658 += 1, R6806 += 1, R6807 += 1 };
  s3 -> s2 [0, 69] { R7702 += 1, R7658 += 1, R6805 += 1, R6806 += 1 };
  s3 -> s3 [0, 65535] { R7702 += 1, R7657 += 1, R7658 += 1 };
  s3 -> s4 [70, 70] { R7702 += 1, R7658 += 1, R6806 += 1, R6807 += 1 };
  s3 -> s5 [70, 70] { R7702 += 1, R7658 += 1, R6806 += 1, R6807 += 1 };
  s3 -> s6 [70, 70] { R7702 += 1, R7658 += 1, R6805 += 1, R6806 += 1 };
  s3 -> s7 [70, 70] { R7702 += 1, R7658 += 1, R6805 += 1, R6806 += 1 };
  s3 -> s1 [71, 65535] { R7702 += 1, R7658 += 1, R6806 += 1, R6807 += 1 };
  s3 -> s2 [71, 65535] { R7702 += 1, R7658 += 1, R6805 += 1, R6806 += 1 };
  s4 -> s4 [0, 65535] { R7702 += 1 };
  s4 -> s9 [0, 65535];
  s5 -> s8 [0, 65535] { R7702 += 1 };
  s5 -> s5 [0, 65535] { R7702 += 1, R7658 += 1, R6806 += 1, R6807 += 1 };
  s5 -> s9 [0, 65535];
  s7 -> s5 [0, 65535] { R7702 += 1, R7658 += 1, R6806 += 1, R6807 += 1 };
  s7 -> s7 [0, 65535] { R7702 += 1, R7658 += 1, R6805 += 1, R6806 += 1 };
  s8 -> s8 [0, 65535] { R7702 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s4, s8, s5, s9, s1;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 69] { R7704 += 1, R7660 += 1, R7370 += 1, R7372 += 1 };
  s0 -> s2 [0, 69] { R7704 += 1, R7660 += 1, R7369 += 1, R7370 += 1 };
  s0 -> s3 [0, 69] { R7704 += 1, R7660 += 1, R7370 += 1, R7371 += 1, R7372 += 1 };
  s0 -> s4 [0, 65535] { R7704 += 1, R7659 += 1, R7660 += 1 };
  s0 -> s0 [0, 65535] { R7703 += 1, R7704 += 1 };
  s0 -> s5 [70, 70] { R7704 += 1, R7660 += 1, R7369 += 1, R7370 += 1 };
  s0 -> s6 [70, 70] { R7704 += 1, R7660 += 1, R7370 += 1, R7372 += 1 };
  s0 -> s7 [70, 70] { R7704 += 1, R7660 += 1, R7369 += 1, R7370 += 1 };
  s0 -> s8 [70, 70] { R7704 += 1, R7660 += 1, R7370 += 1, R7371 += 1, R7372 += 1 };
  s0 -> s9 [70, 70] { R7704 += 1, R7660 += 1, R7370 += 1, R7371 += 1, R7372 += 1 };
  s0 -> s10 [70, 70] { R7704 += 1, R7660 += 1, R7370 += 1, R7372 += 1 };
  s0 -> s1 [71, 74] { R7704 += 1, R7660 += 1, R7370 += 1, R7372 += 1 };
  s0 -> s2 [71, 65535] { R7704 += 1, R7660 += 1, R7369 += 1, R7370 += 1 };
  s0 -> s3 [71, 65535] { R7704 += 1, R7660 += 1, R7370 += 1, R7371 += 1, R7372 += 1 };
  s0 -> s11 [75, 75] { R7704 += 1, R7660 += 1, R7370 += 1, R7372 += 1 };
  s0 -> s1 [76, 65535] { R7704 += 1, R7660 += 1, R7370 += 1, R7372 += 1 };
  s1 -> s1 [0, 69] { R7704 += 1, R7660 += 1, R7370 += 1, R7372 += 1 };
  s1 -> s6 [70, 70] { R7704 += 1, R7660 += 1, R7370 += 1, R7372 += 1 };
  s1 -> s10 [70, 70] { R7704 += 1, R7660 += 1, R7370 += 1, R7372 += 1 };
  s1 -> s1 [71, 74] { R7704 += 1, R7660 += 1, R7370 += 1, R7372 += 1 };
  s1 -> s11 [75, 75] { R7704 += 1, R7660 += 1, R7370 += 1, R7372 += 1 };
  s1 -> s1 [76, 65535] { R7704 += 1, R7660 += 1, R7370 += 1, R7372 += 1 };
  s2 -> s1 [0, 69] { R7704 += 1, R7660 += 1, R7370 += 1, R7372 += 1 };
  s2 -> s2 [0, 69] { R7704 += 1, R7660 += 1, R7369 += 1, R7370 += 1 };
  s2 -> s3 [0, 69] { R7704 += 1, R7660 += 1, R7370 += 1, R7371 += 1, R7372 += 1 };
  s2 -> s5 [70, 70] { R7704 += 1, R7660 += 1, R7369 += 1, R7370 += 1 };
  s2 -> s6 [70, 70] { R7704 += 1, R7660 += 1, R7370 += 1, R7372 += 1 };
  s2 -> s7 [70, 70] { R7704 += 1, R7660 += 1, R7369 += 1, R7370 += 1 };
  s2 -> s8 [70, 70] { R7704 += 1, R7660 += 1, R7370 += 1, R7371 += 1, R7372 += 1 };
  s2 -> s9 [70, 70] { R7704 += 1, R7660 += 1, R7370 += 1, R7371 += 1, R7372 += 1 };
  s2 -> s10 [70, 70] { R7704 += 1, R7660 += 1, R7370 += 1, R7372 += 1 };
  s2 -> s1 [71, 74] { R7704 += 1, R7660 += 1, R7370 += 1, R7372 += 1 };
  s2 -> s2 [71, 65535] { R7704 += 1, R7660 += 1, R7369 += 1, R7370 += 1 };
  s2 -> s3 [71, 65535] { R7704 += 1, R7660 += 1, R7370 += 1, R7371 += 1, R7372 += 1 };
  s2 -> s11 [75, 75] { R7704 += 1, R7660 += 1, R7370 += 1, R7372 += 1 };
  s2 -> s1 [76, 65535] { R7704 += 1, R7660 += 1, R7370 += 1, R7372 += 1 };
  s3 -> s1 [0, 69] { R7704 += 1, R7660 += 1, R7370 += 1, R7372 += 1 };
  s3 -> s3 [0, 69] { R7704 += 1, R7660 += 1, R7370 += 1, R7371 += 1, R7372 += 1 };
  s3 -> s6 [70, 70] { R7704 += 1, R7660 += 1, R7370 += 1, R7372 += 1 };
  s3 -> s8 [70, 70] { R7704 += 1, R7660 += 1, R7370 += 1, R7371 += 1, R7372 += 1 };
  s3 -> s9 [70, 70] { R7704 += 1, R7660 += 1, R7370 += 1, R7371 += 1, R7372 += 1 };
  s3 -> s10 [70, 70] { R7704 += 1, R7660 += 1, R7370 += 1, R7372 += 1 };
  s3 -> s1 [71, 74] { R7704 += 1, R7660 += 1, R7370 += 1, R7372 += 1 };
  s3 -> s3 [71, 65535] { R7704 += 1, R7660 += 1, R7370 += 1, R7371 += 1, R7372 += 1 };
  s3 -> s11 [75, 75] { R7704 += 1, R7660 += 1, R7370 += 1, R7372 += 1 };
  s3 -> s1 [76, 65535] { R7704 += 1, R7660 += 1, R7370 += 1, R7372 += 1 };
  s4 -> s1 [0, 69] { R7704 += 1, R7660 += 1, R7370 += 1, R7372 += 1 };
  s4 -> s2 [0, 69] { R7704 += 1, R7660 += 1, R7369 += 1, R7370 += 1 };
  s4 -> s3 [0, 69] { R7704 += 1, R7660 += 1, R7370 += 1, R7371 += 1, R7372 += 1 };
  s4 -> s4 [0, 65535] { R7704 += 1, R7659 += 1, R7660 += 1 };
  s4 -> s5 [70, 70] { R7704 += 1, R7660 += 1, R7369 += 1, R7370 += 1 };
  s4 -> s6 [70, 70] { R7704 += 1, R7660 += 1, R7370 += 1, R7372 += 1 };
  s4 -> s7 [70, 70] { R7704 += 1, R7660 += 1, R7369 += 1, R7370 += 1 };
  s4 -> s8 [70, 70] { R7704 += 1, R7660 += 1, R7370 += 1, R7371 += 1, R7372 += 1 };
  s4 -> s9 [70, 70] { R7704 += 1, R7660 += 1, R7370 += 1, R7371 += 1, R7372 += 1 };
  s4 -> s10 [70, 70] { R7704 += 1, R7660 += 1, R7370 += 1, R7372 += 1 };
  s4 -> s1 [71, 74] { R7704 += 1, R7660 += 1, R7370 += 1, R7372 += 1 };
  s4 -> s2 [71, 65535] { R7704 += 1, R7660 += 1, R7369 += 1, R7370 += 1 };
  s4 -> s3 [71, 65535] { R7704 += 1, R7660 += 1, R7370 += 1, R7371 += 1, R7372 += 1 };
  s4 -> s11 [75, 75] { R7704 += 1, R7660 += 1, R7370 += 1, R7372 += 1 };
  s4 -> s1 [76, 65535] { R7704 += 1, R7660 += 1, R7370 += 1, R7372 += 1 };
  s5 -> s10 [0, 74] { R7704 += 1, R7660 += 1, R7370 += 1, R7372 += 1 };
  s5 -> s5 [0, 65535] { R7704 += 1, R7660 += 1, R7369 += 1, R7370 += 1 };
  s5 -> s8 [0, 65535] { R7704 += 1, R7660 += 1, R7370 += 1, R7371 += 1, R7372 += 1 };
  s5 -> s16 [75, 75] { R7704 += 1, R7660 += 1, R7370 += 1, R7372 += 1 };
  s5 -> s10 [76, 65535] { R7704 += 1, R7660 += 1, R7370 += 1, R7372 += 1 };
  s8 -> s10 [0, 74] { R7704 += 1, R7660 += 1, R7370 += 1, R7372 += 1 };
  s8 -> s8 [0, 65535] { R7704 += 1, R7660 += 1, R7370 += 1, R7371 += 1, R7372 += 1 };
  s8 -> s16 [75, 75] { R7704 += 1, R7660 += 1, R7370 += 1, R7372 += 1 };
  s8 -> s10 [76, 65535] { R7704 += 1, R7660 += 1, R7370 += 1, R7372 += 1 };
  s10 -> s10 [0, 74] { R7704 += 1, R7660 += 1, R7370 += 1, R7372 += 1 };
  s10 -> s16 [75, 75] { R7704 += 1, R7660 += 1, R7370 += 1, R7372 += 1 };
  s10 -> s10 [76, 65535] { R7704 += 1, R7660 += 1, R7370 += 1, R7372 += 1 };
  s11 -> s11 [0, 69] { R7704 += 1, R7660 += 1, R7370 += 1, R7372 += 1 };
  s11 -> s12 [0, 69] { R7704 += 1, R7660 += 1, R7370 += 1 };
  s11 -> s13 [70, 70] { R7704 += 1, R7660 += 1, R7370 += 1, R7372 += 1 };
  s11 -> s14 [70, 70] { R7704 += 1, R7660 += 1, R7370 += 1 };
  s11 -> s15 [70, 70] { R7704 += 1, R7660 += 1, R7370 += 1 };
  s11 -> s16 [70, 70] { R7704 += 1, R7660 += 1, R7370 += 1, R7372 += 1 };
  s11 -> s11 [71, 65535] { R7704 += 1, R7660 += 1, R7370 += 1, R7372 += 1 };
  s11 -> s12 [71, 65535] { R7704 += 1, R7660 += 1, R7370 += 1 };
  s12 -> s12 [0, 69] { R7704 += 1, R7660 += 1, R7370 += 1 };
  s12 -> s17 [0, 65535];
  s12 -> s12 [0, 65535] { R7704 += 1 };
  s12 -> s14 [70, 70] { R7704 += 1, R7660 += 1, R7370 += 1 };
  s12 -> s15 [70, 70] { R7704 += 1, R7660 += 1, R7370 += 1 };
  s12 -> s12 [71, 65535] { R7704 += 1, R7660 += 1, R7370 += 1 };
  s14 -> s14 [0, 65535] { R7704 += 1 };
  s14 -> s17 [0, 65535];
  s15 -> s15 [0, 65535] { R7704 += 1, R7660 += 1, R7370 += 1 };
  s15 -> s17 [0, 65535];
  s15 -> s18 [0, 65535] { R7704 += 1 };
  s16 -> s15 [0, 65535] { R7704 += 1, R7660 += 1, R7370 += 1 };
  s16 -> s16 [0, 65535] { R7704 += 1, R7660 += 1, R7370 += 1, R7372 += 1 };
  s17 -> s17 [0, 65535];
  s18 -> s17 [0, 65535];
  s18 -> s18 [0, 65535] { R7704 += 1 };
  accepting s17, s12, s14, s18, s15;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 69] { R7706 += 1, R7662 += 1, R7597 += 1, R7598 += 1 };
  s0 -> s0 [0, 65535] { R7705 += 1, R7706 += 1 };
  s0 -> s2 [0, 65535] { R7706 += 1, R7661 += 1, R7662 += 1 };
  s0 -> s3 [70, 70] { R7706 += 1, R7662 += 1, R7597 += 1, R7598 += 1 };
  s0 -> s4 [70, 70] { R7706 += 1, R7662 += 1, R7597 += 1, R7598 += 1 };
  s0 -> s1 [71, 65535] { R7706 += 1, R7662 += 1, R7597 += 1, R7598 += 1 };
  s1 -> s1 [0, 69] { R7706 += 1, R7662 += 1, R7597 += 1, R7598 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R7706 += 1 };
  s1 -> s3 [70, 70] { R7706 += 1, R7662 += 1, R7597 += 1, R7598 += 1 };
  s1 -> s4 [70, 70] { R7706 += 1, R7662 += 1, R7597 += 1, R7598 += 1 };
  s1 -> s1 [71, 65535] { R7706 += 1, R7662 += 1, R7597 += 1, R7598 += 1 };
  s2 -> s1 [0, 69] { R7706 += 1, R7662 += 1, R7597 += 1, R7598 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R7706 += 1, R7661 += 1, R7662 += 1 };
  s2 -> s3 [70, 70] { R7706 += 1, R7662 += 1, R7597 += 1, R7598 += 1 };
  s2 -> s4 [70, 70] { R7706 += 1, R7662 += 1, R7597 += 1, R7598 += 1 };
  s2 -> s1 [71, 65535] { R7706 += 1, R7662 += 1, R7597 += 1, R7598 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R7706 += 1, R7662 += 1, R7597 += 1, R7598 += 1 };
  s3 -> s6 [0, 65535] { R7706 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R7706 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7706 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [102, 102];
  accepting s1;
};
};
constraint R3 = R7706 && R23 - R7706 = -1 && R24 = R7706 && R25 - R7706 = -1 && R26 = R7706 && R27 = 0 && R28 = 1 && R29 = 0 && R30 = 1 && R45 + R84 + R83 + -1*R7374 + -1*R7370 - R66 = 0 && R49 + R89 + R87 = 0 && R50 + R90 + R88 + -1*R7374 + -1*R7370 - R66 = 0 && R55 + R96 + R93 + -1*R7376 + -1*R7372 - R68 = 0 && R65 + R7373 + R7369 = 0 && R67 + R7375 + R7371 = 0 && R7647 = 0 && R7648 = 0 && R7653 = 0 && R7654 = 0 && R7657 = 0 && R7658 = 0 && R7659 = 0 && R7660 = 0 && R7663 = 0 && R7664 = R7706 && R7665 = 0 && R7666 = R7706 && R7667 = 0 && R7668 = R7706 && R7669 = 0 && R7670 = R7706 && R7671 = 0 && R7672 = R7706 && R7673 = 0 && R7674 = R7706 && R7675 = 0 && R7676 = R7706 && R7677 = 0 && R7678 = R7706 && R7679 = 0 && R7680 = R7706 && R7681 = 0 && R7682 = R7706 && R7683 = 0 && R7684 = R7706 && R7685 = 0 && R7686 = R7706 && R7687 = 0 && R7688 = R7706 && R7689 = 0 && R7690 = R7706 && R7691 = 0 && R7692 = R7706 && R7693 = 0 && R7694 = R7706 && R7695 = 0 && R7696 = R7706 && R7697 = 0 && R7698 = R7706 && R7699 = 0 && R7700 = R7706 && R7701 = 0 && R7702 = R7706 && R7703 = 0 && R7704 = R7706 && R7705 = 0 && -1 < R2 && R12 < 1 && R15 < 1 && R16 < 1 && R47 + R86 + R85 < 1 && R61 + R6810 + R6807 < 1 && -1*R7374 + -1*R7370 - R66 < 1 && -1*R7376 + -1*R7372 - R68 < 1 && 0 < R7706 && (R2 != 0 || R20 = 0 || (R7607 = 0 && R7608 = 0)) && (R2 != 0 || R20 = 0 || (R7609 = 0 && R7610 = 0)) && (R2 != 0 || R20 = 0 || (R7611 = 0 && R7612 = 0)) && (R2 != 0 || R20 = 0 || (R7613 = 0 && R7614 = 0)) && (R2 != 0 || R20 = 0 || (R7615 = 0 && R7616 = 0)) && (R2 != 0 || R20 = 0 || (R7617 = 0 && R7618 = 0)) && (R2 != 0 || R20 = 0 || (R7619 = 0 && R7620 = 0)) && (R2 != 0 || R20 = 0 || (R7621 = 0 && R7622 = 0)) && (R2 != 0 || R20 = 0 || (R7623 = 0 && R7624 = 0)) && (R2 != 0 || R20 = 0 || (R7625 = 0 && R7626 = 0)) && (R53 + R94 + R91 != 0 || R54 + R95 + R92 + -1*R7374 + -1*R7370 - R66 = 0 || R66 + R7374 + R7370 < 1) && (R59 + R6808 + R6805 != 0 || R60 + R6809 + R6806 + -1*R7374 + -1*R7370 - R66 = 0 || R66 + R7374 + R7370 < 1) && (R66 + R7374 + R7370 != 0 || ((R53 + R94 + R91 != 0 || R54 + R95 + R92 = 0 || R68 + R7376 + R7372 < 1) && (R53 + R94 + R91 = 0 || R68 + R7376 + R7372 < 1))) && (R66 + R7374 + R7370 != 0 || ((R59 + R6808 + R6805 != 0 || R60 + R6809 + R6806 = 0 || R68 + R7376 + R7372 < 1) && (R59 + R6808 + R6805 = 0 || R68 + R7376 + R7372 < 1))) && (R66 + R7374 + R7370 != 0 || ((R73 + R7602 + R7597 != 0 || R74 + R7603 + R7598 = 0 || R68 + R7376 + R7372 < 1) && (R73 + R7602 + R7597 = 0 || R68 + R7376 + R7372 < 1))) && (R68 + R7376 + R7372 != 0 || R77 + R7606 + R7601 = 0 || (R75 + R7604 + R7599 = 0 && R76 + R7605 + R7600 = 0)) && (R73 + R7602 + R7597 != 0 || R66 + R7374 + R7370 + -1*R7603 + -1*R7598 - R74 = 0 || R66 + R7374 + R7370 < 1) && (R75 + R7604 + R7599 != 0 || R68 + R7376 + R7372 + -1*R7605 + -1*R7600 - R76 = 0 || R68 + R7376 + R7372 < 1) && (R7607 != 0 || R2 = R7608 || R2 < 1) && (R7609 != 0 || R2 = R7610 || R2 < 1) && (R7611 != 0 || R2 = R7612 || R2 < 1) && (R7613 != 0 || R2 = R7614 || R2 < 1) && (R7615 != 0 || R2 = R7616 || R2 < 1) && (R7617 != 0 || R2 = R7618 || R2 < 1) && (R7619 != 0 || R2 = R7620 || R2 < 1) && (R7621 != 0 || R2 = R7622 || R2 < 1) && (R7623 != 0 || R2 = R7624 || R2 < 1) && (R7625 != 0 || R2 = R7626 || R2 < 1) && (R21 = 0 || (R7645 = 0 && R7646 = 0)) && (R21 = 0 || (R7649 = 0 && R7650 = 0)) && (R21 = 0 || (R7651 = 0 && R7652 = 0)) && (R21 = 0 || (R7655 = 0 && R7656 = 0)) && (R21 = 0 || (R7661 = 0 && R7662 = 0)) && (R22 = 0 || (R7627 = 0 && R7628 = 0)) && (R22 = 0 || (R7629 = 0 && R7630 = 0)) && (R22 = 0 || (R7631 = 0 && R7632 = 0)) && (R22 = 0 || (R7633 = 0 && R7634 = 0)) && (R22 = 0 || (R7635 = 0 && R7636 = 0)) && (R22 = 0 || (R7637 = 0 && R7638 = 0)) && (R22 = 0 || (R7639 = 0 && R7640 = 0)) && (R22 = 0 || (R7641 = 0 && R7642 = 0)) && (R22 = 0 || (R7643 = 0 && R7644 = 0)) && (R53 + R94 + R91 = 0 || R66 + R7374 + R7370 < 1) && (R59 + R6808 + R6805 = 0 || R66 + R7374 + R7370 < 1) && (R73 + R7602 + R7597 = 0 || R66 + R7374 + R7370 < 1) && (R75 + R7604 + R7599 = 0 || R68 + R7376 + R7372 < 1) && (R7607 = 0 || R2 < 1) && (R7609 = 0 || R2 < 1) && (R7611 = 0 || R2 < 1) && (R7613 = 0 || R2 < 1) && (R7615 = 0 || R2 < 1) && (R7617 = 0 || R2 < 1) && (R7619 = 0 || R2 < 1) && (R7621 = 0 || R2 < 1) && (R7623 = 0 || R2 < 1) && (R7625 = 0 || R2 < 1);
// End of Parikh automata intersection problem
