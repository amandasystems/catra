// Parikh automata intersection problem, generated by OSTRICH+
counter int R12, R15, R16, R2, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R4, R45, R47, R49, R5, R50, R53, R54, R55, R59, R60, R61, R65, R66, R67, R68, R6805, R6806, R6807, R6808, R6809, R6810, R73, R74, R75, R76, R77, R7927, R7928, R7929, R7930, R7931, R7932, R7933, R7934, R8265, R8266, R8267, R8268, R8269, R8270, R8271, R8272, R8273, R8274, R8275, R8276, R8277, R8278, R8279, R8280, R8281, R8282, R8283, R8284, R8285, R8286, R8287, R8288, R8289, R8290, R8291, R8292, R8293, R8294, R8295, R8296, R8297, R8298, R8299, R83, R8300, R8301, R8302, R8303, R8304, R8305, R8306, R8307, R8308, R8309, R8310, R8311, R8312, R8313, R8314, R8315, R8316, R8317, R8318, R8319, R8320, R8321, R8322, R8323, R8324, R8325, R8326, R8327, R8328, R8329, R8330, R8331, R8332, R8333, R8334, R8335, R8336, R8337, R8338, R8339, R8340, R8341, R8342, R8343, R8344, R8345, R8346, R8347, R8348, R8349, R8350, R8351, R8352, R8353, R8354, R8355, R8356, R8357, R8358, R8359, R8360, R8361, R8362, R8363, R8364, R8365, R8366, R8367, R8368, R8369, R8370, R8371, R8372, R8373, R8374, R84, R85, R86, R87, R88, R89, R90, R91, R92, R93, R94, R95, R96;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [70, 70];
  s0 -> s0 [71, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [70, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R15 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 69];
  s0 -> s0 [0, 65535] { R16 += 1 };
  s0 -> s2 [70, 70];
  s0 -> s1 [71, 65535];
  s1 -> s1 [0, 69];
  s1 -> s2 [70, 70];
  s1 -> s1 [71, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R24 += 1 };
  s0 -> s0 [0, 65535] { R23 += 1, R24 += 1 };
  s0 -> s2 [9, 13] { R24 += 1 };
  s0 -> s1 [14, 31] { R24 += 1 };
  s0 -> s2 [32, 32] { R24 += 1 };
  s0 -> s1 [33, 65535] { R24 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R24 += 1 };
  s2 -> s1 [0, 65535] { R24 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R25 += 1, R26 += 1 };
  s1 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R28 += 1 };
  s0 -> s0 [0, 65535] { R27 += 1, R28 += 1 };
  s0 -> s2 [9, 13] { R28 += 1 };
  s0 -> s1 [14, 31] { R28 += 1 };
  s0 -> s2 [32, 32] { R28 += 1 };
  s0 -> s1 [33, 65535] { R28 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R28 += 1 };
  s2 -> s1 [0, 65535] { R28 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R29 += 1, R30 += 1 };
  s1 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R8296 += 1, R22 += 1 };
  s0 -> s0 [0, 65535] { R8295 += 1, R8296 += 1 };
  s1 -> s1 [0, 65535] { R8296 += 1, R22 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 69] { R8298 += 1 };
  s0 -> s0 [0, 65535] { R8297 += 1, R8298 += 1 };
  s0 -> s2 [70, 70] { R8298 += 1 };
  s0 -> s3 [70, 70] { R8298 += 1 };
  s0 -> s1 [76, 65535] { R8298 += 1 };
  s1 -> s1 [0, 69] { R8298 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R8298 += 1 };
  s1 -> s3 [70, 70] { R8298 += 1 };
  s1 -> s1 [76, 65535] { R8298 += 1 };
  s2 -> s2 [0, 70] { R8298 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [76, 65535] { R8298 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 69] { R8300 += 1, R45 += 1 };
  s0 -> s0 [0, 65535] { R8299 += 1, R8300 += 1 };
  s0 -> s2 [70, 70] { R8300 += 1, R45 += 1 };
  s0 -> s3 [70, 70] { R8300 += 1, R45 += 1 };
  s0 -> s1 [71, 65535] { R8300 += 1, R45 += 1 };
  s1 -> s1 [0, 69] { R8300 += 1, R45 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R8300 += 1, R45 += 1 };
  s1 -> s3 [70, 70] { R8300 += 1, R45 += 1 };
  s1 -> s1 [71, 65535] { R8300 += 1, R45 += 1 };
  s2 -> s2 [0, 65535] { R8300 += 1, R45 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 69] { R8302 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R8301 += 1, R8302 += 1 };
  s0 -> s2 [70, 70] { R8302 += 1, R47 += 1 };
  s0 -> s3 [70, 70] { R8302 += 1, R47 += 1 };
  s0 -> s1 [71, 65535] { R8302 += 1, R47 += 1 };
  s1 -> s1 [0, 69] { R8302 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R8302 += 1, R47 += 1 };
  s1 -> s3 [70, 70] { R8302 += 1, R47 += 1 };
  s1 -> s1 [71, 65535] { R8302 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R8302 += 1, R47 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 69] { R8304 += 1, R49 += 1, R50 += 1 };
  s0 -> s0 [0, 65535] { R8303 += 1, R8304 += 1 };
  s0 -> s2 [70, 70] { R8304 += 1, R49 += 1, R50 += 1 };
  s0 -> s3 [70, 70] { R8304 += 1, R49 += 1, R50 += 1 };
  s0 -> s1 [71, 65535] { R8304 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 69] { R8304 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R8304 += 1, R49 += 1, R50 += 1 };
  s1 -> s3 [70, 70] { R8304 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [71, 65535] { R8304 += 1, R49 += 1, R50 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R8304 += 1, R49 += 1, R50 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 69] { R8306 += 1, R53 += 1, R54 += 1 };
  s0 -> s0 [0, 65535] { R8305 += 1, R8306 += 1 };
  s0 -> s2 [70, 70] { R8306 += 1, R53 += 1, R54 += 1 };
  s0 -> s3 [70, 70] { R8306 += 1, R53 += 1, R54 += 1 };
  s0 -> s1 [71, 65535] { R8306 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 69] { R8306 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R8306 += 1, R53 += 1, R54 += 1 };
  s1 -> s3 [70, 70] { R8306 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [71, 65535] { R8306 += 1, R53 += 1, R54 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8306 += 1, R53 += 1, R54 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 69] { R8308 += 1, R59 += 1, R60 += 1 };
  s0 -> s0 [0, 65535] { R8307 += 1, R8308 += 1 };
  s0 -> s2 [70, 70] { R8308 += 1, R59 += 1, R60 += 1 };
  s0 -> s3 [70, 70] { R8308 += 1, R59 += 1, R60 += 1 };
  s0 -> s1 [71, 65535] { R8308 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 69] { R8308 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R8308 += 1, R59 += 1, R60 += 1 };
  s1 -> s3 [70, 70] { R8308 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [71, 65535] { R8308 += 1, R59 += 1, R60 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8308 += 1, R59 += 1, R60 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 69] { R8310 += 1, R65 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R8309 += 1, R8310 += 1 };
  s0 -> s2 [70, 70] { R8310 += 1, R65 += 1, R66 += 1 };
  s0 -> s3 [70, 70] { R8310 += 1, R65 += 1, R66 += 1 };
  s0 -> s1 [71, 65535] { R8310 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 69] { R8310 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R8310 += 1, R65 += 1, R66 += 1 };
  s1 -> s3 [70, 70] { R8310 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [71, 65535] { R8310 += 1, R65 += 1, R66 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8310 += 1, R65 += 1, R66 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 69] { R8312 += 1, R73 += 1, R74 += 1 };
  s0 -> s0 [0, 65535] { R8311 += 1, R8312 += 1 };
  s0 -> s2 [70, 70] { R8312 += 1, R73 += 1, R74 += 1 };
  s0 -> s3 [70, 70] { R8312 += 1, R73 += 1, R74 += 1 };
  s0 -> s1 [71, 65535] { R8312 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 69] { R8312 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R8312 += 1, R73 += 1, R74 += 1 };
  s1 -> s3 [70, 70] { R8312 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [71, 65535] { R8312 += 1, R73 += 1, R74 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R8312 += 1, R73 += 1, R74 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 69] { R8332 += 1 };
  s0 -> s0 [0, 65535] { R8331 += 1, R8332 += 1 };
  s0 -> s2 [70, 70] { R8332 += 1 };
  s0 -> s1 [71, 65535] { R8332 += 1 };
  s1 -> s1 [0, 69] { R8332 += 1 };
  s1 -> s2 [70, 70] { R8332 += 1 };
  s1 -> s1 [71, 65535] { R8332 += 1 };
  s2 -> s2 [0, 65535] { R8332 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R8334 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R8333 += 1, R8334 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R8334 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 69] { R8336 += 1 };
  s0 -> s2 [0, 65535] { R8336 += 1, R12 += 1 };
  s0 -> s0 [0, 65535] { R8335 += 1, R8336 += 1 };
  s0 -> s3 [70, 70] { R8336 += 1 };
  s0 -> s1 [71, 65535] { R8336 += 1 };
  s1 -> s1 [0, 69] { R8336 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [70, 70] { R8336 += 1 };
  s1 -> s1 [71, 65535] { R8336 += 1 };
  s2 -> s1 [0, 69] { R8336 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8336 += 1, R12 += 1 };
  s2 -> s3 [70, 70] { R8336 += 1 };
  s2 -> s1 [71, 65535] { R8336 += 1 };
  s3 -> s3 [0, 65535] { R8336 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 69] { R8338 += 1, R8276 += 1 };
  s0 -> s0 [0, 65535] { R8337 += 1, R8338 += 1 };
  s0 -> s2 [0, 65535] { R8338 += 1, R8275 += 1, R8276 += 1 };
  s0 -> s1 [71, 65535] { R8338 += 1, R8276 += 1 };
  s1 -> s1 [0, 69] { R8338 += 1, R8276 += 1 };
  s1 -> s1 [0, 65535] { R8338 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [71, 65535] { R8338 += 1, R8276 += 1 };
  s2 -> s1 [0, 69] { R8338 += 1, R8276 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R8338 += 1, R8275 += 1, R8276 += 1 };
  s2 -> s1 [71, 65535] { R8338 += 1, R8276 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R8340 += 1, R8278 += 1, R20 += 1 };
  s0 -> s0 [0, 65535] { R8339 += 1, R8340 += 1 };
  s0 -> s2 [0, 65535] { R8340 += 1, R8277 += 1, R8278 += 1 };
  s1 -> s4 [0, 65535] { R8340 += 1 };
  s1 -> s1 [0, 65535] { R8340 += 1, R8278 += 1, R20 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R8340 += 1, R8278 += 1, R20 += 1 };
  s2 -> s2 [0, 65535] { R8340 += 1, R8277 += 1, R8278 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8340 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 70] { R8342 += 1, R8280 += 1 };
  s0 -> s2 [0, 65535] { R8342 += 1, R8279 += 1, R8280 += 1 };
  s0 -> s0 [0, 65535] { R8341 += 1, R8342 += 1 };
  s0 -> s1 [75, 65535] { R8342 += 1, R8280 += 1 };
  s1 -> s1 [0, 70] { R8342 += 1, R8280 += 1 };
  s1 -> s1 [0, 65535] { R8342 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [75, 65535] { R8342 += 1, R8280 += 1 };
  s2 -> s1 [0, 70] { R8342 += 1, R8280 += 1 };
  s2 -> s2 [0, 65535] { R8342 += 1, R8279 += 1, R8280 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [75, 65535] { R8342 += 1, R8280 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R8344 += 1, R8282 += 1, R84 += 1 };
  s0 -> s0 [0, 65535] { R8343 += 1, R8344 += 1 };
  s0 -> s2 [0, 65535] { R8344 += 1, R8281 += 1, R8282 += 1 };
  s1 -> s1 [0, 65535] { R8344 += 1, R8282 += 1, R84 += 1 };
  s1 -> s4 [0, 65535] { R8344 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R8344 += 1, R8282 += 1, R84 += 1 };
  s2 -> s2 [0, 65535] { R8344 += 1, R8281 += 1, R8282 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8344 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 74] { R8346 += 1, R8284 += 1 };
  s0 -> s0 [0, 65535] { R8345 += 1, R8346 += 1 };
  s0 -> s2 [0, 65535] { R8346 += 1, R8283 += 1, R8284 += 1 };
  s0 -> s3 [0, 65535] { R8346 += 1, R8284 += 1, R86 += 1 };
  s0 -> s1 [76, 65535] { R8346 += 1, R8284 += 1 };
  s1 -> s1 [0, 74] { R8346 += 1, R8284 += 1 };
  s1 -> s1 [0, 65535] { R8346 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [76, 65535] { R8346 += 1, R8284 += 1 };
  s2 -> s1 [0, 74] { R8346 += 1, R8284 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R8346 += 1, R8283 += 1, R8284 += 1 };
  s2 -> s3 [0, 65535] { R8346 += 1, R8284 += 1, R86 += 1 };
  s2 -> s1 [76, 65535] { R8346 += 1, R8284 += 1 };
  s3 -> s1 [0, 74] { R8346 += 1, R8284 += 1 };
  s3 -> s4 [0, 65535] { R8346 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R8346 += 1, R8284 += 1, R86 += 1 };
  s3 -> s1 [76, 65535] { R8346 += 1, R8284 += 1 };
  s4 -> s4 [0, 65535] { R8346 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 65535] { R8348 += 1, R8286 += 1 };
  s0 -> s2 [0, 65535] { R8348 += 1, R8286 += 1, R90 += 1 };
  s0 -> s3 [0, 65535] { R8348 += 1, R8285 += 1, R8286 += 1 };
  s0 -> s0 [0, 65535] { R8347 += 1, R8348 += 1 };
  s1 -> s1 [0, 65535] { R8348 += 1, R8286 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R8348 += 1 };
  s2 -> s1 [0, 65535] { R8348 += 1, R8286 += 1 };
  s2 -> s2 [0, 65535] { R8348 += 1, R8286 += 1, R90 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R8348 += 1 };
  s3 -> s1 [0, 65535] { R8348 += 1, R8286 += 1 };
  s3 -> s2 [0, 65535] { R8348 += 1, R8286 += 1, R90 += 1 };
  s3 -> s3 [0, 65535] { R8348 += 1, R8285 += 1, R8286 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8348 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R8350 += 1, R8288 += 1, R95 += 1, R96 += 1 };
  s0 -> s0 [0, 65535] { R8349 += 1, R8350 += 1 };
  s0 -> s2 [0, 65535] { R8350 += 1, R8288 += 1, R94 += 1, R95 += 1 };
  s0 -> s3 [0, 65535] { R8350 += 1, R8287 += 1, R8288 += 1 };
  s1 -> s5 [0, 65535] { R8350 += 1 };
  s1 -> s1 [0, 65535] { R8350 += 1, R8288 += 1, R95 += 1, R96 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R8350 += 1, R8288 += 1 };
  s2 -> s5 [0, 65535] { R8350 += 1 };
  s2 -> s1 [0, 65535] { R8350 += 1, R8288 += 1, R95 += 1, R96 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8350 += 1, R8288 += 1, R94 += 1, R95 += 1 };
  s3 -> s1 [0, 65535] { R8350 += 1, R8288 += 1, R95 += 1, R96 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R8350 += 1, R8288 += 1, R94 += 1, R95 += 1 };
  s3 -> s3 [0, 65535] { R8350 += 1, R8287 += 1, R8288 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8350 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R8350 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R8350 += 1, R8288 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 74] { R8352 += 1, R8290 += 1, R6809 += 1 };
  s0 -> s2 [0, 65535] { R8352 += 1, R8290 += 1, R6809 += 1, R6810 += 1 };
  s0 -> s3 [0, 65535] { R8352 += 1, R8289 += 1, R8290 += 1 };
  s0 -> s0 [0, 65535] { R8351 += 1, R8352 += 1 };
  s0 -> s4 [0, 65535] { R8352 += 1, R8290 += 1 };
  s0 -> s1 [76, 65535] { R8352 += 1, R8290 += 1, R6809 += 1 };
  s1 -> s1 [0, 74] { R8352 += 1, R8290 += 1, R6809 += 1 };
  s1 -> s5 [0, 65535] { R8352 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R8352 += 1, R8290 += 1 };
  s1 -> s1 [76, 65535] { R8352 += 1, R8290 += 1, R6809 += 1 };
  s2 -> s1 [0, 74] { R8352 += 1, R8290 += 1, R6809 += 1 };
  s2 -> s2 [0, 65535] { R8352 += 1, R8290 += 1, R6809 += 1, R6810 += 1 };
  s2 -> s5 [0, 65535] { R8352 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s4 [0, 65535] { R8352 += 1, R8290 += 1 };
  s2 -> s1 [76, 65535] { R8352 += 1, R8290 += 1, R6809 += 1 };
  s3 -> s1 [0, 74] { R8352 += 1, R8290 += 1, R6809 += 1 };
  s3 -> s2 [0, 65535] { R8352 += 1, R8290 += 1, R6809 += 1, R6810 += 1 };
  s3 -> s3 [0, 65535] { R8352 += 1, R8289 += 1, R8290 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s4 [0, 65535] { R8352 += 1, R8290 += 1 };
  s3 -> s1 [76, 65535] { R8352 += 1, R8290 += 1, R6809 += 1 };
  s4 -> s5 [0, 65535] { R8352 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R8352 += 1, R8290 += 1 };
  s5 -> s5 [0, 65535] { R8352 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R8354 += 1, R8291 += 1, R8292 += 1 };
  s0 -> s0 [0, 65535] { R8353 += 1, R8354 += 1 };
  s0 -> s2 [0, 65535] { R8354 += 1, R8292 += 1 };
  s1 -> s1 [0, 65535] { R8354 += 1, R8291 += 1, R8292 += 1 };
  s1 -> s2 [0, 65535] { R8354 += 1, R8292 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R8354 += 1 };
  s2 -> s2 [0, 65535] { R8354 += 1, R8292 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8354 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 65535] { R8356 += 1, R8294 += 1, R8271 += 1 };
  s0 -> s2 [0, 65535] { R8356 += 1, R8294 += 1 };
  s0 -> s0 [0, 65535] { R8355 += 1, R8356 += 1 };
  s0 -> s3 [0, 65535] { R8356 += 1, R8293 += 1, R8294 += 1 };
  s0 -> s4 [0, 65535] { R8356 += 1, R8294 += 1, R8271 += 1, R8273 += 1, R8274 += 1 };
  s1 -> s5 [0, 65535] { R8356 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R8356 += 1, R8294 += 1, R8271 += 1 };
  s1 -> s2 [0, 65535] { R8356 += 1, R8294 += 1 };
  s2 -> s5 [0, 65535] { R8356 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R8356 += 1, R8294 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s1 [0, 65535] { R8356 += 1, R8294 += 1, R8271 += 1 };
  s3 -> s2 [0, 65535] { R8356 += 1, R8294 += 1 };
  s3 -> s3 [0, 65535] { R8356 += 1, R8293 += 1, R8294 += 1 };
  s3 -> s4 [0, 65535] { R8356 += 1, R8294 += 1, R8271 += 1, R8273 += 1, R8274 += 1 };
  s4 -> s5 [0, 65535] { R8356 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s1 [0, 65535] { R8356 += 1, R8294 += 1, R8271 += 1 };
  s4 -> s2 [0, 65535] { R8356 += 1, R8294 += 1 };
  s4 -> s4 [0, 65535] { R8356 += 1, R8294 += 1, R8271 += 1, R8273 += 1, R8274 += 1 };
  s5 -> s5 [0, 65535] { R8356 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R8358 += 1, R8314 += 1, R21 += 1 };
  s0 -> s2 [0, 65535] { R8358 += 1, R8313 += 1, R8314 += 1 };
  s0 -> s0 [0, 65535] { R8357 += 1, R8358 += 1 };
  s1 -> s1 [0, 65535] { R8358 += 1, R8314 += 1, R21 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R8358 += 1 };
  s2 -> s1 [0, 65535] { R8358 += 1, R8314 += 1, R21 += 1 };
  s2 -> s2 [0, 65535] { R8358 += 1, R8313 += 1, R8314 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8358 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 69] { R8360 += 1, R8316 += 1 };
  s0 -> s2 [0, 65535] { R8360 += 1, R8315 += 1, R8316 += 1 };
  s0 -> s0 [0, 65535] { R8359 += 1, R8360 += 1 };
  s0 -> s3 [70, 70] { R8360 += 1, R8316 += 1 };
  s0 -> s4 [70, 70] { R8360 += 1, R8316 += 1 };
  s0 -> s5 [75, 75] { R8360 += 1, R8316 += 1 };
  s0 -> s1 [76, 65535] { R8360 += 1, R8316 += 1 };
  s1 -> s1 [0, 69] { R8360 += 1, R8316 += 1 };
  s1 -> s3 [70, 70] { R8360 += 1, R8316 += 1 };
  s1 -> s4 [70, 70] { R8360 += 1, R8316 += 1 };
  s1 -> s5 [75, 75] { R8360 += 1, R8316 += 1 };
  s1 -> s1 [76, 65535] { R8360 += 1, R8316 += 1 };
  s2 -> s1 [0, 69] { R8360 += 1, R8316 += 1 };
  s2 -> s2 [0, 65535] { R8360 += 1, R8315 += 1, R8316 += 1 };
  s2 -> s3 [70, 70] { R8360 += 1, R8316 += 1 };
  s2 -> s4 [70, 70] { R8360 += 1, R8316 += 1 };
  s2 -> s5 [75, 75] { R8360 += 1, R8316 += 1 };
  s2 -> s1 [76, 65535] { R8360 += 1, R8316 += 1 };
  s4 -> s4 [0, 70] { R8360 += 1, R8316 += 1 };
  s4 -> s8 [75, 75] { R8360 += 1, R8316 += 1 };
  s4 -> s4 [76, 65535] { R8360 += 1, R8316 += 1 };
  s5 -> s5 [0, 69] { R8360 += 1, R8316 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R8360 += 1 };
  s5 -> s7 [70, 70] { R8360 += 1, R8316 += 1 };
  s5 -> s8 [70, 70] { R8360 += 1, R8316 += 1 };
  s5 -> s5 [75, 65535] { R8360 += 1, R8316 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R8360 += 1 };
  s8 -> s8 [0, 70] { R8360 += 1, R8316 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R8360 += 1 };
  s8 -> s8 [75, 65535] { R8360 += 1, R8316 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 69] { R8362 += 1, R8318 += 1, R83 += 1 };
  s0 -> s2 [0, 65535] { R8362 += 1, R8317 += 1, R8318 += 1 };
  s0 -> s0 [0, 65535] { R8361 += 1, R8362 += 1 };
  s0 -> s3 [70, 70] { R8362 += 1, R8318 += 1, R83 += 1 };
  s0 -> s4 [70, 70] { R8362 += 1, R8318 += 1, R83 += 1 };
  s0 -> s1 [71, 65535] { R8362 += 1, R8318 += 1, R83 += 1 };
  s1 -> s1 [0, 69] { R8362 += 1, R8318 += 1, R83 += 1 };
  s1 -> s1 [0, 65535] { R8362 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [70, 70] { R8362 += 1, R8318 += 1, R83 += 1 };
  s1 -> s4 [70, 70] { R8362 += 1, R8318 += 1, R83 += 1 };
  s1 -> s1 [71, 65535] { R8362 += 1, R8318 += 1, R83 += 1 };
  s2 -> s1 [0, 69] { R8362 += 1, R8318 += 1, R83 += 1 };
  s2 -> s2 [0, 65535] { R8362 += 1, R8317 += 1, R8318 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [70, 70] { R8362 += 1, R8318 += 1, R83 += 1 };
  s2 -> s4 [70, 70] { R8362 += 1, R8318 += 1, R83 += 1 };
  s2 -> s1 [71, 65535] { R8362 += 1, R8318 += 1, R83 += 1 };
  s3 -> s3 [0, 65535] { R8362 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R8362 += 1, R8318 += 1, R83 += 1 };
  s4 -> s5 [0, 65535] { R8362 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R8362 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 69] { R8364 += 1, R8320 += 1, R85 += 1 };
  s0 -> s2 [0, 65535] { R8364 += 1, R8319 += 1, R8320 += 1 };
  s0 -> s0 [0, 65535] { R8363 += 1, R8364 += 1 };
  s0 -> s3 [70, 70] { R8364 += 1, R8320 += 1, R85 += 1 };
  s0 -> s4 [70, 70] { R8364 += 1, R8320 += 1, R85 += 1 };
  s0 -> s1 [71, 65535] { R8364 += 1, R8320 += 1, R85 += 1 };
  s1 -> s1 [0, 69] { R8364 += 1, R8320 += 1, R85 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R8364 += 1 };
  s1 -> s3 [70, 70] { R8364 += 1, R8320 += 1, R85 += 1 };
  s1 -> s4 [70, 70] { R8364 += 1, R8320 += 1, R85 += 1 };
  s1 -> s1 [71, 65535] { R8364 += 1, R8320 += 1, R85 += 1 };
  s2 -> s1 [0, 69] { R8364 += 1, R8320 += 1, R85 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R8364 += 1, R8319 += 1, R8320 += 1 };
  s2 -> s3 [70, 70] { R8364 += 1, R8320 += 1, R85 += 1 };
  s2 -> s4 [70, 70] { R8364 += 1, R8320 += 1, R85 += 1 };
  s2 -> s1 [71, 65535] { R8364 += 1, R8320 += 1, R85 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R8364 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R8364 += 1 };
  s4 -> s4 [0, 65535] { R8364 += 1, R8320 += 1, R85 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8364 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 69] { R8366 += 1, R8322 += 1, R88 += 1 };
  s0 -> s2 [0, 69] { R8366 += 1, R8322 += 1, R87 += 1, R88 += 1 };
  s0 -> s3 [0, 65535] { R8366 += 1, R8321 += 1, R8322 += 1 };
  s0 -> s0 [0, 65535] { R8365 += 1, R8366 += 1 };
  s0 -> s4 [70, 70] { R8366 += 1, R8322 += 1, R88 += 1 };
  s0 -> s5 [70, 70] { R8366 += 1, R8322 += 1, R87 += 1, R88 += 1 };
  s0 -> s6 [70, 70] { R8366 += 1, R8322 += 1, R87 += 1, R88 += 1 };
  s0 -> s7 [70, 70] { R8366 += 1, R8322 += 1, R88 += 1 };
  s0 -> s1 [71, 74] { R8366 += 1, R8322 += 1, R88 += 1 };
  s0 -> s2 [71, 65535] { R8366 += 1, R8322 += 1, R87 += 1, R88 += 1 };
  s0 -> s8 [75, 75] { R8366 += 1, R8322 += 1, R88 += 1 };
  s0 -> s1 [76, 65535] { R8366 += 1, R8322 += 1, R88 += 1 };
  s1 -> s1 [0, 69] { R8366 += 1, R8322 += 1, R88 += 1 };
  s1 -> s4 [70, 70] { R8366 += 1, R8322 += 1, R88 += 1 };
  s1 -> s7 [70, 70] { R8366 += 1, R8322 += 1, R88 += 1 };
  s1 -> s1 [71, 74] { R8366 += 1, R8322 += 1, R88 += 1 };
  s1 -> s8 [75, 75] { R8366 += 1, R8322 += 1, R88 += 1 };
  s1 -> s1 [76, 65535] { R8366 += 1, R8322 += 1, R88 += 1 };
  s2 -> s1 [0, 69] { R8366 += 1, R8322 += 1, R88 += 1 };
  s2 -> s2 [0, 69] { R8366 += 1, R8322 += 1, R87 += 1, R88 += 1 };
  s2 -> s4 [70, 70] { R8366 += 1, R8322 += 1, R88 += 1 };
  s2 -> s5 [70, 70] { R8366 += 1, R8322 += 1, R87 += 1, R88 += 1 };
  s2 -> s6 [70, 70] { R8366 += 1, R8322 += 1, R87 += 1, R88 += 1 };
  s2 -> s7 [70, 70] { R8366 += 1, R8322 += 1, R88 += 1 };
  s2 -> s1 [71, 74] { R8366 += 1, R8322 += 1, R88 += 1 };
  s2 -> s2 [71, 65535] { R8366 += 1, R8322 += 1, R87 += 1, R88 += 1 };
  s2 -> s8 [75, 75] { R8366 += 1, R8322 += 1, R88 += 1 };
  s2 -> s1 [76, 65535] { R8366 += 1, R8322 += 1, R88 += 1 };
  s3 -> s1 [0, 69] { R8366 += 1, R8322 += 1, R88 += 1 };
  s3 -> s2 [0, 69] { R8366 += 1, R8322 += 1, R87 += 1, R88 += 1 };
  s3 -> s3 [0, 65535] { R8366 += 1, R8321 += 1, R8322 += 1 };
  s3 -> s4 [70, 70] { R8366 += 1, R8322 += 1, R88 += 1 };
  s3 -> s5 [70, 70] { R8366 += 1, R8322 += 1, R87 += 1, R88 += 1 };
  s3 -> s6 [70, 70] { R8366 += 1, R8322 += 1, R87 += 1, R88 += 1 };
  s3 -> s7 [70, 70] { R8366 += 1, R8322 += 1, R88 += 1 };
  s3 -> s1 [71, 74] { R8366 += 1, R8322 += 1, R88 += 1 };
  s3 -> s2 [71, 65535] { R8366 += 1, R8322 += 1, R87 += 1, R88 += 1 };
  s3 -> s8 [75, 75] { R8366 += 1, R8322 += 1, R88 += 1 };
  s3 -> s1 [76, 65535] { R8366 += 1, R8322 += 1, R88 += 1 };
  s4 -> s4 [0, 74] { R8366 += 1, R8322 += 1, R88 += 1 };
  s4 -> s11 [75, 75] { R8366 += 1, R8322 += 1, R88 += 1 };
  s4 -> s4 [76, 65535] { R8366 += 1, R8322 += 1, R88 += 1 };
  s6 -> s4 [0, 74] { R8366 += 1, R8322 += 1, R88 += 1 };
  s6 -> s6 [0, 65535] { R8366 += 1, R8322 += 1, R87 += 1, R88 += 1 };
  s6 -> s11 [75, 75] { R8366 += 1, R8322 += 1, R88 += 1 };
  s6 -> s4 [76, 65535] { R8366 += 1, R8322 += 1, R88 += 1 };
  s8 -> s8 [0, 69] { R8366 += 1, R8322 += 1, R88 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R8366 += 1 };
  s8 -> s10 [70, 70] { R8366 += 1, R8322 += 1, R88 += 1 };
  s8 -> s11 [70, 70] { R8366 += 1, R8322 += 1, R88 += 1 };
  s8 -> s8 [71, 65535] { R8366 += 1, R8322 += 1, R88 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R8366 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R8366 += 1, R8322 += 1, R88 += 1 };
  s11 -> s12 [0, 65535] { R8366 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R8366 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 69] { R8368 += 1, R8324 += 1, R91 += 1, R92 += 1 };
  s0 -> s2 [0, 65535] { R8368 += 1, R8323 += 1, R8324 += 1 };
  s0 -> s0 [0, 65535] { R8367 += 1, R8368 += 1 };
  s0 -> s3 [70, 70] { R8368 += 1, R8324 += 1, R91 += 1, R92 += 1 };
  s0 -> s4 [70, 70] { R8368 += 1, R8324 += 1, R91 += 1, R92 += 1 };
  s0 -> s1 [71, 65535] { R8368 += 1, R8324 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 69] { R8368 += 1, R8324 += 1, R91 += 1, R92 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R8368 += 1 };
  s1 -> s3 [70, 70] { R8368 += 1, R8324 += 1, R91 += 1, R92 += 1 };
  s1 -> s4 [70, 70] { R8368 += 1, R8324 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [71, 65535] { R8368 += 1, R8324 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [0, 69] { R8368 += 1, R8324 += 1, R91 += 1, R92 += 1 };
  s2 -> s2 [0, 65535] { R8368 += 1, R8323 += 1, R8324 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [70, 70] { R8368 += 1, R8324 += 1, R91 += 1, R92 += 1 };
  s2 -> s4 [70, 70] { R8368 += 1, R8324 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [71, 65535] { R8368 += 1, R8324 += 1, R91 += 1, R92 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R8368 += 1, R8324 += 1, R91 += 1, R92 += 1 };
  s3 -> s6 [0, 65535] { R8368 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8368 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8368 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 69] { R8370 += 1, R8326 += 1, R6805 += 1, R6806 += 1 };
  s0 -> s2 [0, 69] { R8370 += 1, R8326 += 1, R6806 += 1, R6807 += 1 };
  s0 -> s0 [0, 65535] { R8369 += 1, R8370 += 1 };
  s0 -> s3 [0, 65535] { R8370 += 1, R8325 += 1, R8326 += 1 };
  s0 -> s4 [70, 70] { R8370 += 1, R8326 += 1, R6806 += 1, R6807 += 1 };
  s0 -> s5 [70, 70] { R8370 += 1, R8326 += 1, R6806 += 1, R6807 += 1 };
  s0 -> s6 [70, 70] { R8370 += 1, R8326 += 1, R6805 += 1, R6806 += 1 };
  s0 -> s7 [70, 70] { R8370 += 1, R8326 += 1, R6805 += 1, R6806 += 1 };
  s0 -> s1 [71, 65535] { R8370 += 1, R8326 += 1, R6805 += 1, R6806 += 1 };
  s0 -> s2 [71, 65535] { R8370 += 1, R8326 += 1, R6806 += 1, R6807 += 1 };
  s1 -> s1 [0, 69] { R8370 += 1, R8326 += 1, R6805 += 1, R6806 += 1 };
  s1 -> s2 [0, 69] { R8370 += 1, R8326 += 1, R6806 += 1, R6807 += 1 };
  s1 -> s4 [70, 70] { R8370 += 1, R8326 += 1, R6806 += 1, R6807 += 1 };
  s1 -> s5 [70, 70] { R8370 += 1, R8326 += 1, R6806 += 1, R6807 += 1 };
  s1 -> s6 [70, 70] { R8370 += 1, R8326 += 1, R6805 += 1, R6806 += 1 };
  s1 -> s7 [70, 70] { R8370 += 1, R8326 += 1, R6805 += 1, R6806 += 1 };
  s1 -> s1 [71, 65535] { R8370 += 1, R8326 += 1, R6805 += 1, R6806 += 1 };
  s1 -> s2 [71, 65535] { R8370 += 1, R8326 += 1, R6806 += 1, R6807 += 1 };
  s2 -> s2 [0, 69] { R8370 += 1, R8326 += 1, R6806 += 1, R6807 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R8370 += 1 };
  s2 -> s4 [70, 70] { R8370 += 1, R8326 += 1, R6806 += 1, R6807 += 1 };
  s2 -> s5 [70, 70] { R8370 += 1, R8326 += 1, R6806 += 1, R6807 += 1 };
  s2 -> s2 [71, 65535] { R8370 += 1, R8326 += 1, R6806 += 1, R6807 += 1 };
  s3 -> s1 [0, 69] { R8370 += 1, R8326 += 1, R6805 += 1, R6806 += 1 };
  s3 -> s2 [0, 69] { R8370 += 1, R8326 += 1, R6806 += 1, R6807 += 1 };
  s3 -> s3 [0, 65535] { R8370 += 1, R8325 += 1, R8326 += 1 };
  s3 -> s4 [70, 70] { R8370 += 1, R8326 += 1, R6806 += 1, R6807 += 1 };
  s3 -> s5 [70, 70] { R8370 += 1, R8326 += 1, R6806 += 1, R6807 += 1 };
  s3 -> s6 [70, 70] { R8370 += 1, R8326 += 1, R6805 += 1, R6806 += 1 };
  s3 -> s7 [70, 70] { R8370 += 1, R8326 += 1, R6805 += 1, R6806 += 1 };
  s3 -> s1 [71, 65535] { R8370 += 1, R8326 += 1, R6805 += 1, R6806 += 1 };
  s3 -> s2 [71, 65535] { R8370 += 1, R8326 += 1, R6806 += 1, R6807 += 1 };
  s4 -> s9 [0, 65535] { R8370 += 1 };
  s4 -> s4 [0, 65535] { R8370 += 1, R8326 += 1, R6806 += 1, R6807 += 1 };
  s4 -> s8 [0, 65535];
  s5 -> s5 [0, 65535] { R8370 += 1 };
  s5 -> s8 [0, 65535];
  s6 -> s4 [0, 65535] { R8370 += 1, R8326 += 1, R6806 += 1, R6807 += 1 };
  s6 -> s6 [0, 65535] { R8370 += 1, R8326 += 1, R6805 += 1, R6806 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R8370 += 1 };
  s9 -> s8 [0, 65535];
  accepting s4, s8, s5, s2, s9;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 69] { R8372 += 1, R8328 += 1, R7927 += 1, R7928 += 1 };
  s0 -> s2 [0, 69] { R8372 += 1, R8328 += 1, R7928 += 1, R7930 += 1 };
  s0 -> s3 [0, 69] { R8372 += 1, R8328 += 1, R7928 += 1, R7929 += 1, R7930 += 1 };
  s0 -> s4 [0, 65535] { R8372 += 1, R8327 += 1, R8328 += 1 };
  s0 -> s0 [0, 65535] { R8371 += 1, R8372 += 1 };
  s0 -> s5 [70, 70] { R8372 += 1, R8328 += 1, R7927 += 1, R7928 += 1 };
  s0 -> s6 [70, 70] { R8372 += 1, R8328 += 1, R7928 += 1, R7929 += 1, R7930 += 1 };
  s0 -> s7 [70, 70] { R8372 += 1, R8328 += 1, R7928 += 1, R7930 += 1 };
  s0 -> s8 [70, 70] { R8372 += 1, R8328 += 1, R7928 += 1, R7929 += 1, R7930 += 1 };
  s0 -> s9 [70, 70] { R8372 += 1, R8328 += 1, R7928 += 1, R7930 += 1 };
  s0 -> s10 [70, 70] { R8372 += 1, R8328 += 1, R7927 += 1, R7928 += 1 };
  s0 -> s2 [71, 74] { R8372 += 1, R8328 += 1, R7928 += 1, R7930 += 1 };
  s0 -> s1 [71, 65535] { R8372 += 1, R8328 += 1, R7927 += 1, R7928 += 1 };
  s0 -> s3 [71, 65535] { R8372 += 1, R8328 += 1, R7928 += 1, R7929 += 1, R7930 += 1 };
  s0 -> s11 [75, 75] { R8372 += 1, R8328 += 1, R7928 += 1, R7930 += 1 };
  s0 -> s2 [76, 65535] { R8372 += 1, R8328 += 1, R7928 += 1, R7930 += 1 };
  s1 -> s1 [0, 69] { R8372 += 1, R8328 += 1, R7927 += 1, R7928 += 1 };
  s1 -> s2 [0, 69] { R8372 += 1, R8328 += 1, R7928 += 1, R7930 += 1 };
  s1 -> s3 [0, 69] { R8372 += 1, R8328 += 1, R7928 += 1, R7929 += 1, R7930 += 1 };
  s1 -> s5 [70, 70] { R8372 += 1, R8328 += 1, R7927 += 1, R7928 += 1 };
  s1 -> s6 [70, 70] { R8372 += 1, R8328 += 1, R7928 += 1, R7929 += 1, R7930 += 1 };
  s1 -> s7 [70, 70] { R8372 += 1, R8328 += 1, R7928 += 1, R7930 += 1 };
  s1 -> s8 [70, 70] { R8372 += 1, R8328 += 1, R7928 += 1, R7929 += 1, R7930 += 1 };
  s1 -> s9 [70, 70] { R8372 += 1, R8328 += 1, R7928 += 1, R7930 += 1 };
  s1 -> s10 [70, 70] { R8372 += 1, R8328 += 1, R7927 += 1, R7928 += 1 };
  s1 -> s2 [71, 74] { R8372 += 1, R8328 += 1, R7928 += 1, R7930 += 1 };
  s1 -> s1 [71, 65535] { R8372 += 1, R8328 += 1, R7927 += 1, R7928 += 1 };
  s1 -> s3 [71, 65535] { R8372 += 1, R8328 += 1, R7928 += 1, R7929 += 1, R7930 += 1 };
  s1 -> s11 [75, 75] { R8372 += 1, R8328 += 1, R7928 += 1, R7930 += 1 };
  s1 -> s2 [76, 65535] { R8372 += 1, R8328 += 1, R7928 += 1, R7930 += 1 };
  s2 -> s2 [0, 69] { R8372 += 1, R8328 += 1, R7928 += 1, R7930 += 1 };
  s2 -> s7 [70, 70] { R8372 += 1, R8328 += 1, R7928 += 1, R7930 += 1 };
  s2 -> s9 [70, 70] { R8372 += 1, R8328 += 1, R7928 += 1, R7930 += 1 };
  s2 -> s2 [71, 74] { R8372 += 1, R8328 += 1, R7928 += 1, R7930 += 1 };
  s2 -> s11 [75, 75] { R8372 += 1, R8328 += 1, R7928 += 1, R7930 += 1 };
  s2 -> s2 [76, 65535] { R8372 += 1, R8328 += 1, R7928 += 1, R7930 += 1 };
  s3 -> s2 [0, 69] { R8372 += 1, R8328 += 1, R7928 += 1, R7930 += 1 };
  s3 -> s3 [0, 69] { R8372 += 1, R8328 += 1, R7928 += 1, R7929 += 1, R7930 += 1 };
  s3 -> s6 [70, 70] { R8372 += 1, R8328 += 1, R7928 += 1, R7929 += 1, R7930 += 1 };
  s3 -> s7 [70, 70] { R8372 += 1, R8328 += 1, R7928 += 1, R7930 += 1 };
  s3 -> s8 [70, 70] { R8372 += 1, R8328 += 1, R7928 += 1, R7929 += 1, R7930 += 1 };
  s3 -> s9 [70, 70] { R8372 += 1, R8328 += 1, R7928 += 1, R7930 += 1 };
  s3 -> s2 [71, 74] { R8372 += 1, R8328 += 1, R7928 += 1, R7930 += 1 };
  s3 -> s3 [71, 65535] { R8372 += 1, R8328 += 1, R7928 += 1, R7929 += 1, R7930 += 1 };
  s3 -> s11 [75, 75] { R8372 += 1, R8328 += 1, R7928 += 1, R7930 += 1 };
  s3 -> s2 [76, 65535] { R8372 += 1, R8328 += 1, R7928 += 1, R7930 += 1 };
  s4 -> s1 [0, 69] { R8372 += 1, R8328 += 1, R7927 += 1, R7928 += 1 };
  s4 -> s2 [0, 69] { R8372 += 1, R8328 += 1, R7928 += 1, R7930 += 1 };
  s4 -> s3 [0, 69] { R8372 += 1, R8328 += 1, R7928 += 1, R7929 += 1, R7930 += 1 };
  s4 -> s4 [0, 65535] { R8372 += 1, R8327 += 1, R8328 += 1 };
  s4 -> s5 [70, 70] { R8372 += 1, R8328 += 1, R7927 += 1, R7928 += 1 };
  s4 -> s6 [70, 70] { R8372 += 1, R8328 += 1, R7928 += 1, R7929 += 1, R7930 += 1 };
  s4 -> s7 [70, 70] { R8372 += 1, R8328 += 1, R7928 += 1, R7930 += 1 };
  s4 -> s8 [70, 70] { R8372 += 1, R8328 += 1, R7928 += 1, R7929 += 1, R7930 += 1 };
  s4 -> s9 [70, 70] { R8372 += 1, R8328 += 1, R7928 += 1, R7930 += 1 };
  s4 -> s10 [70, 70] { R8372 += 1, R8328 += 1, R7927 += 1, R7928 += 1 };
  s4 -> s2 [71, 74] { R8372 += 1, R8328 += 1, R7928 += 1, R7930 += 1 };
  s4 -> s1 [71, 65535] { R8372 += 1, R8328 += 1, R7927 += 1, R7928 += 1 };
  s4 -> s3 [71, 65535] { R8372 += 1, R8328 += 1, R7928 += 1, R7929 += 1, R7930 += 1 };
  s4 -> s11 [75, 75] { R8372 += 1, R8328 += 1, R7928 += 1, R7930 += 1 };
  s4 -> s2 [76, 65535] { R8372 += 1, R8328 += 1, R7928 += 1, R7930 += 1 };
  s5 -> s9 [0, 74] { R8372 += 1, R8328 += 1, R7928 += 1, R7930 += 1 };
  s5 -> s5 [0, 65535] { R8372 += 1, R8328 += 1, R7927 += 1, R7928 += 1 };
  s5 -> s6 [0, 65535] { R8372 += 1, R8328 += 1, R7928 += 1, R7929 += 1, R7930 += 1 };
  s5 -> s14 [75, 75] { R8372 += 1, R8328 += 1, R7928 += 1, R7930 += 1 };
  s5 -> s9 [76, 65535] { R8372 += 1, R8328 += 1, R7928 += 1, R7930 += 1 };
  s6 -> s9 [0, 74] { R8372 += 1, R8328 += 1, R7928 += 1, R7930 += 1 };
  s6 -> s6 [0, 65535] { R8372 += 1, R8328 += 1, R7928 += 1, R7929 += 1, R7930 += 1 };
  s6 -> s14 [75, 75] { R8372 += 1, R8328 += 1, R7928 += 1, R7930 += 1 };
  s6 -> s9 [76, 65535] { R8372 += 1, R8328 += 1, R7928 += 1, R7930 += 1 };
  s9 -> s9 [0, 74] { R8372 += 1, R8328 += 1, R7928 += 1, R7930 += 1 };
  s9 -> s14 [75, 75] { R8372 += 1, R8328 += 1, R7928 += 1, R7930 += 1 };
  s9 -> s9 [76, 65535] { R8372 += 1, R8328 += 1, R7928 += 1, R7930 += 1 };
  s11 -> s11 [0, 69] { R8372 += 1, R8328 += 1, R7928 += 1, R7930 += 1 };
  s11 -> s12 [0, 69] { R8372 += 1, R8328 += 1, R7928 += 1 };
  s11 -> s13 [0, 69] { R8372 += 1, R8328 += 1 };
  s11 -> s14 [70, 70] { R8372 += 1, R8328 += 1, R7928 += 1, R7930 += 1 };
  s11 -> s15 [70, 70] { R8372 += 1, R8328 += 1, R7928 += 1, R7930 += 1 };
  s11 -> s16 [70, 70] { R8372 += 1, R8328 += 1, R7928 += 1 };
  s11 -> s17 [70, 70] { R8372 += 1, R8328 += 1 };
  s11 -> s18 [70, 70] { R8372 += 1, R8328 += 1, R7928 += 1 };
  s11 -> s19 [70, 70] { R8372 += 1, R8328 += 1 };
  s11 -> s11 [71, 65535] { R8372 += 1, R8328 += 1, R7928 += 1, R7930 += 1 };
  s11 -> s12 [71, 65535] { R8372 += 1, R8328 += 1, R7928 += 1 };
  s11 -> s13 [71, 65535] { R8372 += 1, R8328 += 1 };
  s12 -> s12 [0, 69] { R8372 += 1, R8328 += 1, R7928 += 1 };
  s12 -> s13 [0, 69] { R8372 += 1, R8328 += 1 };
  s12 -> s16 [70, 70] { R8372 += 1, R8328 += 1, R7928 += 1 };
  s12 -> s17 [70, 70] { R8372 += 1, R8328 += 1 };
  s12 -> s18 [70, 70] { R8372 += 1, R8328 += 1, R7928 += 1 };
  s12 -> s19 [70, 70] { R8372 += 1, R8328 += 1 };
  s12 -> s12 [71, 65535] { R8372 += 1, R8328 += 1, R7928 += 1 };
  s12 -> s13 [71, 65535] { R8372 += 1, R8328 += 1 };
  s13 -> s13 [0, 69] { R8372 += 1, R8328 += 1 };
  s13 -> s20 [0, 65535];
  s13 -> s13 [0, 65535] { R8372 += 1 };
  s13 -> s17 [70, 70] { R8372 += 1, R8328 += 1 };
  s13 -> s19 [70, 70] { R8372 += 1, R8328 += 1 };
  s13 -> s13 [71, 65535] { R8372 += 1, R8328 += 1 };
  s14 -> s14 [0, 65535] { R8372 += 1, R8328 += 1, R7928 += 1, R7930 += 1 };
  s14 -> s18 [0, 65535] { R8372 += 1, R8328 += 1, R7928 += 1 };
  s14 -> s19 [0, 65535] { R8372 += 1, R8328 += 1 };
  s17 -> s20 [0, 65535];
  s17 -> s17 [0, 65535] { R8372 += 1 };
  s18 -> s18 [0, 65535] { R8372 += 1, R8328 += 1, R7928 += 1 };
  s18 -> s19 [0, 65535] { R8372 += 1, R8328 += 1 };
  s19 -> s20 [0, 65535];
  s19 -> s21 [0, 65535] { R8372 += 1 };
  s19 -> s19 [0, 65535] { R8372 += 1, R8328 += 1 };
  s20 -> s20 [0, 65535];
  s21 -> s20 [0, 65535];
  s21 -> s21 [0, 65535] { R8372 += 1 };
  accepting s17, s19, s13, s21, s20;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 69] { R8374 += 1, R8330 += 1, R8266 += 1, R8267 += 1, R8268 += 1 };
  s0 -> s2 [0, 69] { R8374 += 1, R8330 += 1, R8266 += 1, R8268 += 1, R8269 += 1 };
  s0 -> s3 [0, 69] { R8374 += 1, R8330 += 1, R8265 += 1, R8266 += 1 };
  s0 -> s4 [0, 65535] { R8374 += 1, R8329 += 1, R8330 += 1 };
  s0 -> s0 [0, 65535] { R8373 += 1, R8374 += 1 };
  s0 -> s5 [70, 70] { R8374 += 1, R8330 += 1, R8266 += 1, R8268 += 1, R8269 += 1 };
  s0 -> s6 [70, 70] { R8374 += 1, R8330 += 1, R8265 += 1, R8266 += 1 };
  s0 -> s7 [70, 70] { R8374 += 1, R8330 += 1, R8266 += 1, R8267 += 1, R8268 += 1 };
  s0 -> s8 [70, 70] { R8374 += 1, R8330 += 1, R8265 += 1, R8266 += 1 };
  s0 -> s9 [70, 70] { R8374 += 1, R8330 += 1, R8266 += 1, R8267 += 1, R8268 += 1 };
  s0 -> s10 [70, 70] { R8374 += 1, R8330 += 1, R8266 += 1, R8268 += 1, R8269 += 1 };
  s0 -> s1 [71, 65535] { R8374 += 1, R8330 += 1, R8266 += 1, R8267 += 1, R8268 += 1 };
  s0 -> s2 [71, 65535] { R8374 += 1, R8330 += 1, R8266 += 1, R8268 += 1, R8269 += 1 };
  s0 -> s3 [71, 65535] { R8374 += 1, R8330 += 1, R8265 += 1, R8266 += 1 };
  s1 -> s1 [0, 69] { R8374 += 1, R8330 += 1, R8266 += 1, R8267 += 1, R8268 += 1 };
  s1 -> s2 [0, 69] { R8374 += 1, R8330 += 1, R8266 += 1, R8268 += 1, R8269 += 1 };
  s1 -> s5 [70, 70] { R8374 += 1, R8330 += 1, R8266 += 1, R8268 += 1, R8269 += 1 };
  s1 -> s7 [70, 70] { R8374 += 1, R8330 += 1, R8266 += 1, R8267 += 1, R8268 += 1 };
  s1 -> s9 [70, 70] { R8374 += 1, R8330 += 1, R8266 += 1, R8267 += 1, R8268 += 1 };
  s1 -> s10 [70, 70] { R8374 += 1, R8330 += 1, R8266 += 1, R8268 += 1, R8269 += 1 };
  s1 -> s1 [71, 65535] { R8374 += 1, R8330 += 1, R8266 += 1, R8267 += 1, R8268 += 1 };
  s1 -> s2 [71, 65535] { R8374 += 1, R8330 += 1, R8266 += 1, R8268 += 1, R8269 += 1 };
  s2 -> s2 [0, 69] { R8374 += 1, R8330 += 1, R8266 += 1, R8268 += 1, R8269 += 1 };
  s2 -> s2 [0, 65535] { R8374 += 1 };
  s2 -> s11 [0, 65535];
  s2 -> s5 [70, 70] { R8374 += 1, R8330 += 1, R8266 += 1, R8268 += 1, R8269 += 1 };
  s2 -> s10 [70, 70] { R8374 += 1, R8330 += 1, R8266 += 1, R8268 += 1, R8269 += 1 };
  s2 -> s2 [71, 65535] { R8374 += 1, R8330 += 1, R8266 += 1, R8268 += 1, R8269 += 1 };
  s3 -> s1 [0, 69] { R8374 += 1, R8330 += 1, R8266 += 1, R8267 += 1, R8268 += 1 };
  s3 -> s2 [0, 69] { R8374 += 1, R8330 += 1, R8266 += 1, R8268 += 1, R8269 += 1 };
  s3 -> s3 [0, 69] { R8374 += 1, R8330 += 1, R8265 += 1, R8266 += 1 };
  s3 -> s5 [70, 70] { R8374 += 1, R8330 += 1, R8266 += 1, R8268 += 1, R8269 += 1 };
  s3 -> s6 [70, 70] { R8374 += 1, R8330 += 1, R8265 += 1, R8266 += 1 };
  s3 -> s7 [70, 70] { R8374 += 1, R8330 += 1, R8266 += 1, R8267 += 1, R8268 += 1 };
  s3 -> s8 [70, 70] { R8374 += 1, R8330 += 1, R8265 += 1, R8266 += 1 };
  s3 -> s9 [70, 70] { R8374 += 1, R8330 += 1, R8266 += 1, R8267 += 1, R8268 += 1 };
  s3 -> s10 [70, 70] { R8374 += 1, R8330 += 1, R8266 += 1, R8268 += 1, R8269 += 1 };
  s3 -> s1 [71, 65535] { R8374 += 1, R8330 += 1, R8266 += 1, R8267 += 1, R8268 += 1 };
  s3 -> s2 [71, 65535] { R8374 += 1, R8330 += 1, R8266 += 1, R8268 += 1, R8269 += 1 };
  s3 -> s3 [71, 65535] { R8374 += 1, R8330 += 1, R8265 += 1, R8266 += 1 };
  s4 -> s1 [0, 69] { R8374 += 1, R8330 += 1, R8266 += 1, R8267 += 1, R8268 += 1 };
  s4 -> s2 [0, 69] { R8374 += 1, R8330 += 1, R8266 += 1, R8268 += 1, R8269 += 1 };
  s4 -> s3 [0, 69] { R8374 += 1, R8330 += 1, R8265 += 1, R8266 += 1 };
  s4 -> s4 [0, 65535] { R8374 += 1, R8329 += 1, R8330 += 1 };
  s4 -> s5 [70, 70] { R8374 += 1, R8330 += 1, R8266 += 1, R8268 += 1, R8269 += 1 };
  s4 -> s6 [70, 70] { R8374 += 1, R8330 += 1, R8265 += 1, R8266 += 1 };
  s4 -> s7 [70, 70] { R8374 += 1, R8330 += 1, R8266 += 1, R8267 += 1, R8268 += 1 };
  s4 -> s8 [70, 70] { R8374 += 1, R8330 += 1, R8265 += 1, R8266 += 1 };
  s4 -> s9 [70, 70] { R8374 += 1, R8330 += 1, R8266 += 1, R8267 += 1, R8268 += 1 };
  s4 -> s10 [70, 70] { R8374 += 1, R8330 += 1, R8266 += 1, R8268 += 1, R8269 += 1 };
  s4 -> s1 [71, 65535] { R8374 += 1, R8330 += 1, R8266 += 1, R8267 += 1, R8268 += 1 };
  s4 -> s2 [71, 65535] { R8374 += 1, R8330 += 1, R8266 += 1, R8268 += 1, R8269 += 1 };
  s4 -> s3 [71, 65535] { R8374 += 1, R8330 += 1, R8265 += 1, R8266 += 1 };
  s5 -> s5 [0, 65535] { R8374 += 1, R8330 += 1, R8266 += 1, R8268 += 1, R8269 += 1 };
  s5 -> s12 [0, 65535] { R8374 += 1 };
  s5 -> s11 [0, 65535];
  s6 -> s5 [0, 65535] { R8374 += 1, R8330 += 1, R8266 += 1, R8268 += 1, R8269 += 1 };
  s6 -> s6 [0, 65535] { R8374 += 1, R8330 += 1, R8265 += 1, R8266 += 1 };
  s6 -> s9 [0, 65535] { R8374 += 1, R8330 += 1, R8266 += 1, R8267 += 1, R8268 += 1 };
  s9 -> s5 [0, 65535] { R8374 += 1, R8330 += 1, R8266 += 1, R8268 += 1, R8269 += 1 };
  s9 -> s9 [0, 65535] { R8374 += 1, R8330 += 1, R8266 += 1, R8267 += 1, R8268 += 1 };
  s10 -> s11 [0, 65535];
  s10 -> s10 [0, 65535] { R8374 += 1 };
  s11 -> s11 [0, 65535];
  s12 -> s12 [0, 65535] { R8374 += 1 };
  s12 -> s11 [0, 65535];
  accepting s12, s5, s2, s10, s11;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [102, 102];
  accepting s1;
};
};
constraint R3 = R8374 && R23 - R8374 = -1 && R24 = R8374 && R25 - R8374 = -1 && R26 = R8374 && R27 = 0 && R28 = 1 && R29 = 0 && R30 = 1 && R45 + R84 + R83 + -1*R7932 + -1*R7928 - R66 = 0 && R49 + R89 + R87 = 0 && R50 + R90 + R88 + -1*R7932 + -1*R7928 - R66 = 0 && R55 + R96 + R93 + -1*R7934 + -1*R7930 - R68 = 0 && R65 + R7931 + R7927 = 0 && R67 + R7933 + R7929 = 0 && R8315 = 0 && R8316 = 0 && R8321 = 0 && R8322 = 0 && R8325 = 0 && R8326 = 0 && R8327 = 0 && R8328 = 0 && R8329 = 0 && R8330 = 0 && R8331 = 0 && R8332 = R8374 && R8333 = 0 && R8334 = R8374 && R8335 = 0 && R8336 = R8374 && R8337 = 0 && R8338 = R8374 && R8339 = 0 && R8340 = R8374 && R8341 = 0 && R8342 = R8374 && R8343 = 0 && R8344 = R8374 && R8345 = 0 && R8346 = R8374 && R8347 = 0 && R8348 = R8374 && R8349 = 0 && R8350 = R8374 && R8351 = 0 && R8352 = R8374 && R8353 = 0 && R8354 = R8374 && R8355 = 0 && R8356 = R8374 && R8357 = 0 && R8358 = R8374 && R8359 = 0 && R8360 = R8374 && R8361 = 0 && R8362 = R8374 && R8363 = 0 && R8364 = R8374 && R8365 = 0 && R8366 = R8374 && R8367 = 0 && R8368 = R8374 && R8369 = 0 && R8370 = R8374 && R8371 = 0 && R8372 = R8374 && R8373 = 0 && -1 < R2 && R12 < 1 && R15 < 1 && R16 < 1 && R47 + R86 + R85 < 1 && R61 + R6810 + R6807 < 1 && -1*R7932 + -1*R7928 - R66 < 1 && -1*R7934 + -1*R7930 - R68 < 1 && 0 < R8374 && (R2 != 0 || R20 = 0 || (R8275 = 0 && R8276 = 0)) && (R2 != 0 || R20 = 0 || (R8277 = 0 && R8278 = 0)) && (R2 != 0 || R20 = 0 || (R8279 = 0 && R8280 = 0)) && (R2 != 0 || R20 = 0 || (R8281 = 0 && R8282 = 0)) && (R2 != 0 || R20 = 0 || (R8283 = 0 && R8284 = 0)) && (R2 != 0 || R20 = 0 || (R8285 = 0 && R8286 = 0)) && (R2 != 0 || R20 = 0 || (R8287 = 0 && R8288 = 0)) && (R2 != 0 || R20 = 0 || (R8289 = 0 && R8290 = 0)) && (R2 != 0 || R20 = 0 || (R8291 = 0 && R8292 = 0)) && (R2 != 0 || R20 = 0 || (R8293 = 0 && R8294 = 0)) && (R53 + R94 + R91 != 0 || R54 + R95 + R92 + -1*R7932 + -1*R7928 - R66 = 0 || R66 + R7932 + R7928 < 1) && (R59 + R6808 + R6805 != 0 || R60 + R6809 + R6806 + -1*R7932 + -1*R7928 - R66 = 0 || R66 + R7932 + R7928 < 1) && (R66 + R7932 + R7928 != 0 || ((R53 + R94 + R91 != 0 || R54 + R95 + R92 = 0 || R68 + R7934 + R7930 < 1) && (R53 + R94 + R91 = 0 || R68 + R7934 + R7930 < 1))) && (R66 + R7932 + R7928 != 0 || ((R59 + R6808 + R6805 != 0 || R60 + R6809 + R6806 = 0 || R68 + R7934 + R7930 < 1) && (R59 + R6808 + R6805 = 0 || R68 + R7934 + R7930 < 1))) && (R66 + R7932 + R7928 != 0 || ((R73 + R8270 + R8265 != 0 || R74 + R8271 + R8266 = 0 || R68 + R7934 + R7930 < 1) && (R73 + R8270 + R8265 = 0 || R68 + R7934 + R7930 < 1))) && (R68 + R7934 + R7930 != 0 || R77 + R8274 + R8269 = 0 || (R75 + R8272 + R8267 = 0 && R76 + R8273 + R8268 = 0)) && (R73 + R8270 + R8265 != 0 || R66 + R7932 + R7928 + -1*R8271 + -1*R8266 - R74 = 0 || R66 + R7932 + R7928 < 1) && (R75 + R8272 + R8267 != 0 || R68 + R7934 + R7930 + -1*R8273 + -1*R8268 - R76 = 0 || R68 + R7934 + R7930 < 1) && (R8275 != 0 || R2 = R8276 || R2 < 1) && (R8277 != 0 || R2 = R8278 || R2 < 1) && (R8279 != 0 || R2 = R8280 || R2 < 1) && (R8281 != 0 || R2 = R8282 || R2 < 1) && (R8283 != 0 || R2 = R8284 || R2 < 1) && (R8285 != 0 || R2 = R8286 || R2 < 1) && (R8287 != 0 || R2 = R8288 || R2 < 1) && (R8289 != 0 || R2 = R8290 || R2 < 1) && (R8291 != 0 || R2 = R8292 || R2 < 1) && (R8293 != 0 || R2 = R8294 || R2 < 1) && (R21 = 0 || (R8313 = 0 && R8314 = 0)) && (R21 = 0 || (R8317 = 0 && R8318 = 0)) && (R21 = 0 || (R8319 = 0 && R8320 = 0)) && (R21 = 0 || (R8323 = 0 && R8324 = 0)) && (R22 = 0 || (R8295 = 0 && R8296 = 0)) && (R22 = 0 || (R8297 = 0 && R8298 = 0)) && (R22 = 0 || (R8299 = 0 && R8300 = 0)) && (R22 = 0 || (R8301 = 0 && R8302 = 0)) && (R22 = 0 || (R8303 = 0 && R8304 = 0)) && (R22 = 0 || (R8305 = 0 && R8306 = 0)) && (R22 = 0 || (R8307 = 0 && R8308 = 0)) && (R22 = 0 || (R8309 = 0 && R8310 = 0)) && (R22 = 0 || (R8311 = 0 && R8312 = 0)) && (R53 + R94 + R91 = 0 || R66 + R7932 + R7928 < 1) && (R59 + R6808 + R6805 = 0 || R66 + R7932 + R7928 < 1) && (R73 + R8270 + R8265 = 0 || R66 + R7932 + R7928 < 1) && (R75 + R8272 + R8267 = 0 || R68 + R7934 + R7930 < 1) && (R8275 = 0 || R2 < 1) && (R8277 = 0 || R2 < 1) && (R8279 = 0 || R2 < 1) && (R8281 = 0 || R2 < 1) && (R8283 = 0 || R2 < 1) && (R8285 = 0 || R2 < 1) && (R8287 = 0 || R2 < 1) && (R8289 = 0 || R2 < 1) && (R8291 = 0 || R2 < 1) && (R8293 = 0 || R2 < 1);
// End of Parikh automata intersection problem
