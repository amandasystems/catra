// Parikh automata intersection problem, generated by OSTRICH+
counter int R10159, R10160, R10161, R10162, R10163, R10164, R10723, R10724, R10725, R10726, R10727, R10728, R10729, R10730, R11061, R11062, R11063, R11064, R11065, R11066, R11067, R11068, R11069, R11070, R11071, R11072, R11073, R11074, R11075, R11076, R11077, R11078, R11079, R11080, R11081, R11082, R11083, R11084, R11085, R11086, R11087, R11088, R11089, R11090, R11091, R11092, R11093, R11094, R11095, R11096, R11097, R11098, R11099, R11100, R11101, R11102, R11103, R11104, R11105, R11106, R11107, R11108, R11109, R11110, R11111, R11112, R11113, R11114, R11115, R11116, R11117, R11118, R11119, R11120, R11121, R11122, R11123, R11124, R11125, R11126, R11127, R11128, R11129, R11130, R11131, R11132, R11133, R11134, R11135, R11136, R11137, R11138, R11139, R11140, R11141, R11142, R11143, R11144, R11145, R11146, R11147, R11148, R11149, R11150, R11151, R11152, R11153, R11154, R11155, R11156, R11157, R11158, R11159, R11160, R11161, R11162, R11163, R11164, R11165, R11166, R11167, R11168, R11169, R11170, R12, R15, R16, R2, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R4, R45, R47, R49, R5, R50, R53, R54, R55, R59, R60, R61, R65, R66, R67, R68, R73, R74, R75, R76, R77, R83, R84, R85, R86, R87, R88, R89, R90, R91, R92, R93, R94, R95, R96;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [70, 70];
  s0 -> s0 [71, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [70, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R15 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 69];
  s0 -> s0 [0, 65535] { R16 += 1 };
  s0 -> s2 [70, 70];
  s0 -> s1 [71, 65535];
  s1 -> s1 [0, 69];
  s1 -> s2 [70, 70];
  s1 -> s1 [71, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R24 += 1 };
  s0 -> s0 [0, 65535] { R23 += 1, R24 += 1 };
  s0 -> s2 [9, 13] { R24 += 1 };
  s0 -> s1 [14, 31] { R24 += 1 };
  s0 -> s2 [32, 32] { R24 += 1 };
  s0 -> s1 [33, 65535] { R24 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R24 += 1 };
  s2 -> s1 [0, 65535] { R24 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R25 += 1, R26 += 1 };
  s1 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R28 += 1 };
  s0 -> s0 [0, 65535] { R27 += 1, R28 += 1 };
  s0 -> s2 [9, 13] { R28 += 1 };
  s0 -> s1 [14, 31] { R28 += 1 };
  s0 -> s2 [32, 32] { R28 += 1 };
  s0 -> s1 [33, 65535] { R28 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R28 += 1 };
  s2 -> s1 [0, 65535] { R28 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R29 += 1, R30 += 1 };
  s1 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R11091 += 1, R11092 += 1 };
  s0 -> s1 [0, 65535] { R11092 += 1, R22 += 1 };
  s1 -> s1 [0, 65535] { R11092 += 1, R22 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 69] { R11094 += 1 };
  s0 -> s0 [0, 65535] { R11093 += 1, R11094 += 1 };
  s0 -> s2 [70, 70] { R11094 += 1 };
  s0 -> s3 [70, 70] { R11094 += 1 };
  s0 -> s1 [76, 65535] { R11094 += 1 };
  s1 -> s1 [0, 69] { R11094 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R11094 += 1 };
  s1 -> s3 [70, 70] { R11094 += 1 };
  s1 -> s1 [76, 65535] { R11094 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 70] { R11094 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [76, 65535] { R11094 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 69] { R11096 += 1, R45 += 1 };
  s0 -> s0 [0, 65535] { R11095 += 1, R11096 += 1 };
  s0 -> s2 [70, 70] { R11096 += 1, R45 += 1 };
  s0 -> s3 [70, 70] { R11096 += 1, R45 += 1 };
  s0 -> s1 [71, 65535] { R11096 += 1, R45 += 1 };
  s1 -> s1 [0, 69] { R11096 += 1, R45 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R11096 += 1, R45 += 1 };
  s1 -> s3 [70, 70] { R11096 += 1, R45 += 1 };
  s1 -> s1 [71, 65535] { R11096 += 1, R45 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R11096 += 1, R45 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 69] { R11098 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R11097 += 1, R11098 += 1 };
  s0 -> s2 [70, 70] { R11098 += 1, R47 += 1 };
  s0 -> s3 [70, 70] { R11098 += 1, R47 += 1 };
  s0 -> s1 [71, 65535] { R11098 += 1, R47 += 1 };
  s1 -> s1 [0, 69] { R11098 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R11098 += 1, R47 += 1 };
  s1 -> s3 [70, 70] { R11098 += 1, R47 += 1 };
  s1 -> s1 [71, 65535] { R11098 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R11098 += 1, R47 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 69] { R11100 += 1, R49 += 1, R50 += 1 };
  s0 -> s0 [0, 65535] { R11099 += 1, R11100 += 1 };
  s0 -> s2 [70, 70] { R11100 += 1, R49 += 1, R50 += 1 };
  s0 -> s3 [70, 70] { R11100 += 1, R49 += 1, R50 += 1 };
  s0 -> s1 [71, 65535] { R11100 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 69] { R11100 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R11100 += 1, R49 += 1, R50 += 1 };
  s1 -> s3 [70, 70] { R11100 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [71, 65535] { R11100 += 1, R49 += 1, R50 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R11100 += 1, R49 += 1, R50 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 69] { R11102 += 1, R53 += 1, R54 += 1 };
  s0 -> s0 [0, 65535] { R11101 += 1, R11102 += 1 };
  s0 -> s2 [70, 70] { R11102 += 1, R53 += 1, R54 += 1 };
  s0 -> s3 [70, 70] { R11102 += 1, R53 += 1, R54 += 1 };
  s0 -> s1 [71, 65535] { R11102 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 69] { R11102 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R11102 += 1, R53 += 1, R54 += 1 };
  s1 -> s3 [70, 70] { R11102 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [71, 65535] { R11102 += 1, R53 += 1, R54 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R11102 += 1, R53 += 1, R54 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 69] { R11104 += 1, R59 += 1, R60 += 1 };
  s0 -> s0 [0, 65535] { R11103 += 1, R11104 += 1 };
  s0 -> s2 [70, 70] { R11104 += 1, R59 += 1, R60 += 1 };
  s0 -> s3 [70, 70] { R11104 += 1, R59 += 1, R60 += 1 };
  s0 -> s1 [71, 65535] { R11104 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 69] { R11104 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R11104 += 1, R59 += 1, R60 += 1 };
  s1 -> s3 [70, 70] { R11104 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [71, 65535] { R11104 += 1, R59 += 1, R60 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R11104 += 1, R59 += 1, R60 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 69] { R11106 += 1, R65 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R11105 += 1, R11106 += 1 };
  s0 -> s2 [70, 70] { R11106 += 1, R65 += 1, R66 += 1 };
  s0 -> s3 [70, 70] { R11106 += 1, R65 += 1, R66 += 1 };
  s0 -> s1 [71, 65535] { R11106 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 69] { R11106 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R11106 += 1, R65 += 1, R66 += 1 };
  s1 -> s3 [70, 70] { R11106 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [71, 65535] { R11106 += 1, R65 += 1, R66 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R11106 += 1, R65 += 1, R66 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 69] { R11108 += 1, R73 += 1, R74 += 1 };
  s0 -> s0 [0, 65535] { R11107 += 1, R11108 += 1 };
  s0 -> s2 [70, 70] { R11108 += 1, R73 += 1, R74 += 1 };
  s0 -> s3 [70, 70] { R11108 += 1, R73 += 1, R74 += 1 };
  s0 -> s1 [71, 65535] { R11108 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 69] { R11108 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R11108 += 1, R73 += 1, R74 += 1 };
  s1 -> s3 [70, 70] { R11108 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [71, 65535] { R11108 += 1, R73 += 1, R74 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R11108 += 1, R73 += 1, R74 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 69] { R11128 += 1 };
  s0 -> s0 [0, 65535] { R11127 += 1, R11128 += 1 };
  s0 -> s2 [70, 70] { R11128 += 1 };
  s0 -> s1 [71, 65535] { R11128 += 1 };
  s1 -> s1 [0, 69] { R11128 += 1 };
  s1 -> s2 [70, 70] { R11128 += 1 };
  s1 -> s1 [71, 65535] { R11128 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R11128 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R11130 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R11129 += 1, R11130 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R11130 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 69] { R11132 += 1 };
  s0 -> s2 [0, 65535] { R11132 += 1, R12 += 1 };
  s0 -> s0 [0, 65535] { R11131 += 1, R11132 += 1 };
  s0 -> s3 [70, 70] { R11132 += 1 };
  s0 -> s1 [71, 65535] { R11132 += 1 };
  s1 -> s1 [0, 69] { R11132 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [70, 70] { R11132 += 1 };
  s1 -> s1 [71, 65535] { R11132 += 1 };
  s2 -> s1 [0, 69] { R11132 += 1 };
  s2 -> s2 [0, 65535] { R11132 += 1, R12 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [70, 70] { R11132 += 1 };
  s2 -> s1 [71, 65535] { R11132 += 1 };
  s3 -> s3 [0, 65535] { R11132 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 69] { R11134 += 1, R11072 += 1 };
  s0 -> s2 [0, 65535] { R11134 += 1, R11071 += 1, R11072 += 1 };
  s0 -> s0 [0, 65535] { R11133 += 1, R11134 += 1 };
  s0 -> s1 [71, 65535] { R11134 += 1, R11072 += 1 };
  s1 -> s1 [0, 69] { R11134 += 1, R11072 += 1 };
  s1 -> s1 [0, 65535] { R11134 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [71, 65535] { R11134 += 1, R11072 += 1 };
  s2 -> s1 [0, 69] { R11134 += 1, R11072 += 1 };
  s2 -> s2 [0, 65535] { R11134 += 1, R11071 += 1, R11072 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [71, 65535] { R11134 += 1, R11072 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R11136 += 1, R11074 += 1, R20 += 1 };
  s0 -> s2 [0, 65535] { R11136 += 1, R11073 += 1, R11074 += 1 };
  s0 -> s0 [0, 65535] { R11135 += 1, R11136 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R11136 += 1, R11074 += 1, R20 += 1 };
  s1 -> s4 [0, 65535] { R11136 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R11136 += 1, R11074 += 1, R20 += 1 };
  s2 -> s2 [0, 65535] { R11136 += 1, R11073 += 1, R11074 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R11136 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 70] { R11138 += 1, R11076 += 1 };
  s0 -> s0 [0, 65535] { R11137 += 1, R11138 += 1 };
  s0 -> s2 [0, 65535] { R11138 += 1, R11075 += 1, R11076 += 1 };
  s0 -> s1 [75, 65535] { R11138 += 1, R11076 += 1 };
  s1 -> s1 [0, 70] { R11138 += 1, R11076 += 1 };
  s1 -> s1 [0, 65535] { R11138 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [75, 65535] { R11138 += 1, R11076 += 1 };
  s2 -> s1 [0, 70] { R11138 += 1, R11076 += 1 };
  s2 -> s2 [0, 65535] { R11138 += 1, R11075 += 1, R11076 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [75, 65535] { R11138 += 1, R11076 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s0 [0, 65535] { R11139 += 1, R11140 += 1 };
  s0 -> s1 [0, 65535] { R11140 += 1, R11077 += 1, R11078 += 1 };
  s0 -> s2 [0, 65535] { R11140 += 1, R11078 += 1, R84 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R11140 += 1, R11077 += 1, R11078 += 1 };
  s1 -> s2 [0, 65535] { R11140 += 1, R11078 += 1, R84 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R11140 += 1 };
  s2 -> s2 [0, 65535] { R11140 += 1, R11078 += 1, R84 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R11140 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 74] { R11142 += 1, R11080 += 1 };
  s0 -> s0 [0, 65535] { R11141 += 1, R11142 += 1 };
  s0 -> s2 [0, 65535] { R11142 += 1, R11079 += 1, R11080 += 1 };
  s0 -> s3 [0, 65535] { R11142 += 1, R11080 += 1, R86 += 1 };
  s0 -> s1 [76, 65535] { R11142 += 1, R11080 += 1 };
  s1 -> s1 [0, 74] { R11142 += 1, R11080 += 1 };
  s1 -> s1 [0, 65535] { R11142 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [76, 65535] { R11142 += 1, R11080 += 1 };
  s2 -> s1 [0, 74] { R11142 += 1, R11080 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R11142 += 1, R11079 += 1, R11080 += 1 };
  s2 -> s3 [0, 65535] { R11142 += 1, R11080 += 1, R86 += 1 };
  s2 -> s1 [76, 65535] { R11142 += 1, R11080 += 1 };
  s3 -> s1 [0, 74] { R11142 += 1, R11080 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R11142 += 1, R11080 += 1, R86 += 1 };
  s3 -> s5 [0, 65535] { R11142 += 1 };
  s3 -> s1 [76, 65535] { R11142 += 1, R11080 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R11142 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 65535] { R11144 += 1, R11082 += 1, R90 += 1 };
  s0 -> s0 [0, 65535] { R11143 += 1, R11144 += 1 };
  s0 -> s2 [0, 65535] { R11144 += 1, R11082 += 1 };
  s0 -> s3 [0, 65535] { R11144 += 1, R11081 += 1, R11082 += 1 };
  s1 -> s1 [0, 65535] { R11144 += 1, R11082 += 1, R90 += 1 };
  s1 -> s5 [0, 65535] { R11144 += 1 };
  s1 -> s2 [0, 65535] { R11144 += 1, R11082 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R11144 += 1 };
  s2 -> s2 [0, 65535] { R11144 += 1, R11082 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R11144 += 1, R11082 += 1, R90 += 1 };
  s3 -> s2 [0, 65535] { R11144 += 1, R11082 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R11144 += 1, R11081 += 1, R11082 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R11144 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R11146 += 1, R11083 += 1, R11084 += 1 };
  s0 -> s0 [0, 65535] { R11145 += 1, R11146 += 1 };
  s0 -> s2 [0, 65535] { R11146 += 1, R11084 += 1, R94 += 1, R95 += 1 };
  s0 -> s3 [0, 65535] { R11146 += 1, R11084 += 1, R95 += 1, R96 += 1 };
  s1 -> s1 [0, 65535] { R11146 += 1, R11083 += 1, R11084 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s2 [0, 65535] { R11146 += 1, R11084 += 1, R94 += 1, R95 += 1 };
  s1 -> s3 [0, 65535] { R11146 += 1, R11084 += 1, R95 += 1, R96 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R11146 += 1 };
  s2 -> s2 [0, 65535] { R11146 += 1, R11084 += 1, R94 += 1, R95 += 1 };
  s2 -> s3 [0, 65535] { R11146 += 1, R11084 += 1, R95 += 1, R96 += 1 };
  s3 -> s4 [0, 65535] { R11146 += 1, R11084 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R11146 += 1 };
  s3 -> s3 [0, 65535] { R11146 += 1, R11084 += 1, R95 += 1, R96 += 1 };
  s4 -> s4 [0, 65535] { R11146 += 1, R11084 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R11146 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R11146 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 65535] { R11148 += 1, R11086 += 1 };
  s0 -> s0 [0, 65535] { R11147 += 1, R11148 += 1 };
  s0 -> s2 [0, 65535] { R11148 += 1, R11085 += 1, R11086 += 1 };
  s1 -> s4 [0, 65535] { R11148 += 1 };
  s1 -> s1 [0, 65535] { R11148 += 1, R11086 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R11148 += 1, R11086 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R11148 += 1, R11085 += 1, R11086 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R11148 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R11150 += 1, R11088 += 1 };
  s0 -> s2 [0, 65535] { R11150 += 1, R11087 += 1, R11088 += 1 };
  s0 -> s0 [0, 65535] { R11149 += 1, R11150 += 1 };
  s0 -> s3 [0, 65535] { R11150 += 1, R11088 += 1, R10728 += 1 };
  s1 -> s4 [0, 65535] { R11150 += 1 };
  s1 -> s1 [0, 65535] { R11150 += 1, R11088 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R11150 += 1, R11088 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R11150 += 1, R11087 += 1, R11088 += 1 };
  s2 -> s3 [0, 65535] { R11150 += 1, R11088 += 1, R10728 += 1 };
  s3 -> s4 [0, 65535] { R11150 += 1 };
  s3 -> s1 [0, 65535] { R11150 += 1, R11088 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R11150 += 1, R11088 += 1, R10728 += 1 };
  s4 -> s4 [0, 65535] { R11150 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s0 [0, 65535] { R11151 += 1, R11152 += 1 };
  s0 -> s1 [0, 65535] { R11152 += 1, R11090 += 1, R11067 += 1 };
  s0 -> s2 [0, 65535] { R11152 += 1, R11090 += 1, R11067 += 1, R11069 += 1, R11070 += 1 };
  s0 -> s3 [0, 65535] { R11152 += 1, R11090 += 1 };
  s0 -> s4 [0, 65535] { R11152 += 1, R11089 += 1, R11090 += 1 };
  s1 -> s6 [0, 65535] { R11152 += 1 };
  s1 -> s1 [0, 65535] { R11152 += 1, R11090 += 1, R11067 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R11152 += 1, R11090 += 1 };
  s2 -> s6 [0, 65535] { R11152 += 1 };
  s2 -> s1 [0, 65535] { R11152 += 1, R11090 += 1, R11067 += 1 };
  s2 -> s2 [0, 65535] { R11152 += 1, R11090 += 1, R11067 += 1, R11069 += 1, R11070 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R11152 += 1, R11090 += 1 };
  s3 -> s6 [0, 65535] { R11152 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R11152 += 1, R11090 += 1 };
  s4 -> s1 [0, 65535] { R11152 += 1, R11090 += 1, R11067 += 1 };
  s4 -> s2 [0, 65535] { R11152 += 1, R11090 += 1, R11067 += 1, R11069 += 1, R11070 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s3 [0, 65535] { R11152 += 1, R11090 += 1 };
  s4 -> s4 [0, 65535] { R11152 += 1, R11089 += 1, R11090 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R11152 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R11154 += 1, R11109 += 1, R11110 += 1 };
  s0 -> s0 [0, 65535] { R11153 += 1, R11154 += 1 };
  s0 -> s2 [0, 65535] { R11154 += 1, R11110 += 1, R21 += 1 };
  s1 -> s1 [0, 65535] { R11154 += 1, R11109 += 1, R11110 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R11154 += 1, R11110 += 1, R21 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R11154 += 1 };
  s2 -> s2 [0, 65535] { R11154 += 1, R11110 += 1, R21 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R11154 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 69] { R11156 += 1, R11112 += 1 };
  s0 -> s0 [0, 65535] { R11155 += 1, R11156 += 1 };
  s0 -> s2 [0, 65535] { R11156 += 1, R11111 += 1, R11112 += 1 };
  s0 -> s3 [70, 70] { R11156 += 1, R11112 += 1 };
  s0 -> s4 [70, 70] { R11156 += 1, R11112 += 1 };
  s0 -> s5 [75, 75] { R11156 += 1, R11112 += 1 };
  s0 -> s1 [76, 65535] { R11156 += 1, R11112 += 1 };
  s1 -> s1 [0, 69] { R11156 += 1, R11112 += 1 };
  s1 -> s3 [70, 70] { R11156 += 1, R11112 += 1 };
  s1 -> s4 [70, 70] { R11156 += 1, R11112 += 1 };
  s1 -> s5 [75, 75] { R11156 += 1, R11112 += 1 };
  s1 -> s1 [76, 65535] { R11156 += 1, R11112 += 1 };
  s2 -> s1 [0, 69] { R11156 += 1, R11112 += 1 };
  s2 -> s2 [0, 65535] { R11156 += 1, R11111 += 1, R11112 += 1 };
  s2 -> s3 [70, 70] { R11156 += 1, R11112 += 1 };
  s2 -> s4 [70, 70] { R11156 += 1, R11112 += 1 };
  s2 -> s5 [75, 75] { R11156 += 1, R11112 += 1 };
  s2 -> s1 [76, 65535] { R11156 += 1, R11112 += 1 };
  s3 -> s3 [0, 70] { R11156 += 1, R11112 += 1 };
  s3 -> s7 [75, 75] { R11156 += 1, R11112 += 1 };
  s3 -> s3 [76, 65535] { R11156 += 1, R11112 += 1 };
  s5 -> s5 [0, 69] { R11156 += 1, R11112 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R11156 += 1 };
  s5 -> s7 [70, 70] { R11156 += 1, R11112 += 1 };
  s5 -> s8 [70, 70] { R11156 += 1, R11112 += 1 };
  s5 -> s5 [75, 65535] { R11156 += 1, R11112 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 70] { R11156 += 1, R11112 += 1 };
  s7 -> s7 [0, 65535] { R11156 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [75, 65535] { R11156 += 1, R11112 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R11156 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 69] { R11158 += 1, R11114 += 1, R83 += 1 };
  s0 -> s2 [0, 65535] { R11158 += 1, R11113 += 1, R11114 += 1 };
  s0 -> s0 [0, 65535] { R11157 += 1, R11158 += 1 };
  s0 -> s3 [70, 70] { R11158 += 1, R11114 += 1, R83 += 1 };
  s0 -> s4 [70, 70] { R11158 += 1, R11114 += 1, R83 += 1 };
  s0 -> s1 [71, 65535] { R11158 += 1, R11114 += 1, R83 += 1 };
  s1 -> s1 [0, 69] { R11158 += 1, R11114 += 1, R83 += 1 };
  s1 -> s1 [0, 65535] { R11158 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [70, 70] { R11158 += 1, R11114 += 1, R83 += 1 };
  s1 -> s4 [70, 70] { R11158 += 1, R11114 += 1, R83 += 1 };
  s1 -> s1 [71, 65535] { R11158 += 1, R11114 += 1, R83 += 1 };
  s2 -> s1 [0, 69] { R11158 += 1, R11114 += 1, R83 += 1 };
  s2 -> s2 [0, 65535] { R11158 += 1, R11113 += 1, R11114 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [70, 70] { R11158 += 1, R11114 += 1, R83 += 1 };
  s2 -> s4 [70, 70] { R11158 += 1, R11114 += 1, R83 += 1 };
  s2 -> s1 [71, 65535] { R11158 += 1, R11114 += 1, R83 += 1 };
  s3 -> s3 [0, 65535] { R11158 += 1, R11114 += 1, R83 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R11158 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R11158 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R11158 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 69] { R11160 += 1, R11116 += 1, R85 += 1 };
  s0 -> s2 [0, 65535] { R11160 += 1, R11115 += 1, R11116 += 1 };
  s0 -> s0 [0, 65535] { R11159 += 1, R11160 += 1 };
  s0 -> s3 [70, 70] { R11160 += 1, R11116 += 1, R85 += 1 };
  s0 -> s4 [70, 70] { R11160 += 1, R11116 += 1, R85 += 1 };
  s0 -> s1 [71, 65535] { R11160 += 1, R11116 += 1, R85 += 1 };
  s1 -> s1 [0, 69] { R11160 += 1, R11116 += 1, R85 += 1 };
  s1 -> s1 [0, 65535] { R11160 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [70, 70] { R11160 += 1, R11116 += 1, R85 += 1 };
  s1 -> s4 [70, 70] { R11160 += 1, R11116 += 1, R85 += 1 };
  s1 -> s1 [71, 65535] { R11160 += 1, R11116 += 1, R85 += 1 };
  s2 -> s1 [0, 69] { R11160 += 1, R11116 += 1, R85 += 1 };
  s2 -> s2 [0, 65535] { R11160 += 1, R11115 += 1, R11116 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [70, 70] { R11160 += 1, R11116 += 1, R85 += 1 };
  s2 -> s4 [70, 70] { R11160 += 1, R11116 += 1, R85 += 1 };
  s2 -> s1 [71, 65535] { R11160 += 1, R11116 += 1, R85 += 1 };
  s3 -> s3 [0, 65535] { R11160 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R11160 += 1 };
  s4 -> s4 [0, 65535] { R11160 += 1, R11116 += 1, R85 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R11160 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 69] { R11162 += 1, R11118 += 1, R87 += 1, R88 += 1 };
  s0 -> s2 [0, 69] { R11162 += 1, R11118 += 1, R88 += 1 };
  s0 -> s3 [0, 65535] { R11162 += 1, R11117 += 1, R11118 += 1 };
  s0 -> s0 [0, 65535] { R11161 += 1, R11162 += 1 };
  s0 -> s4 [70, 70] { R11162 += 1, R11118 += 1, R87 += 1, R88 += 1 };
  s0 -> s5 [70, 70] { R11162 += 1, R11118 += 1, R88 += 1 };
  s0 -> s6 [70, 70] { R11162 += 1, R11118 += 1, R88 += 1 };
  s0 -> s7 [70, 70] { R11162 += 1, R11118 += 1, R87 += 1, R88 += 1 };
  s0 -> s2 [71, 74] { R11162 += 1, R11118 += 1, R88 += 1 };
  s0 -> s1 [71, 65535] { R11162 += 1, R11118 += 1, R87 += 1, R88 += 1 };
  s0 -> s8 [75, 75] { R11162 += 1, R11118 += 1, R88 += 1 };
  s0 -> s2 [76, 65535] { R11162 += 1, R11118 += 1, R88 += 1 };
  s1 -> s1 [0, 69] { R11162 += 1, R11118 += 1, R87 += 1, R88 += 1 };
  s1 -> s2 [0, 69] { R11162 += 1, R11118 += 1, R88 += 1 };
  s1 -> s4 [70, 70] { R11162 += 1, R11118 += 1, R87 += 1, R88 += 1 };
  s1 -> s5 [70, 70] { R11162 += 1, R11118 += 1, R88 += 1 };
  s1 -> s6 [70, 70] { R11162 += 1, R11118 += 1, R88 += 1 };
  s1 -> s7 [70, 70] { R11162 += 1, R11118 += 1, R87 += 1, R88 += 1 };
  s1 -> s2 [71, 74] { R11162 += 1, R11118 += 1, R88 += 1 };
  s1 -> s1 [71, 65535] { R11162 += 1, R11118 += 1, R87 += 1, R88 += 1 };
  s1 -> s8 [75, 75] { R11162 += 1, R11118 += 1, R88 += 1 };
  s1 -> s2 [76, 65535] { R11162 += 1, R11118 += 1, R88 += 1 };
  s2 -> s2 [0, 69] { R11162 += 1, R11118 += 1, R88 += 1 };
  s2 -> s5 [70, 70] { R11162 += 1, R11118 += 1, R88 += 1 };
  s2 -> s6 [70, 70] { R11162 += 1, R11118 += 1, R88 += 1 };
  s2 -> s2 [71, 74] { R11162 += 1, R11118 += 1, R88 += 1 };
  s2 -> s8 [75, 75] { R11162 += 1, R11118 += 1, R88 += 1 };
  s2 -> s2 [76, 65535] { R11162 += 1, R11118 += 1, R88 += 1 };
  s3 -> s1 [0, 69] { R11162 += 1, R11118 += 1, R87 += 1, R88 += 1 };
  s3 -> s2 [0, 69] { R11162 += 1, R11118 += 1, R88 += 1 };
  s3 -> s3 [0, 65535] { R11162 += 1, R11117 += 1, R11118 += 1 };
  s3 -> s4 [70, 70] { R11162 += 1, R11118 += 1, R87 += 1, R88 += 1 };
  s3 -> s5 [70, 70] { R11162 += 1, R11118 += 1, R88 += 1 };
  s3 -> s6 [70, 70] { R11162 += 1, R11118 += 1, R88 += 1 };
  s3 -> s7 [70, 70] { R11162 += 1, R11118 += 1, R87 += 1, R88 += 1 };
  s3 -> s2 [71, 74] { R11162 += 1, R11118 += 1, R88 += 1 };
  s3 -> s1 [71, 65535] { R11162 += 1, R11118 += 1, R87 += 1, R88 += 1 };
  s3 -> s8 [75, 75] { R11162 += 1, R11118 += 1, R88 += 1 };
  s3 -> s2 [76, 65535] { R11162 += 1, R11118 += 1, R88 += 1 };
  s4 -> s6 [0, 74] { R11162 += 1, R11118 += 1, R88 += 1 };
  s4 -> s4 [0, 65535] { R11162 += 1, R11118 += 1, R87 += 1, R88 += 1 };
  s4 -> s11 [75, 75] { R11162 += 1, R11118 += 1, R88 += 1 };
  s4 -> s6 [76, 65535] { R11162 += 1, R11118 += 1, R88 += 1 };
  s6 -> s6 [0, 74] { R11162 += 1, R11118 += 1, R88 += 1 };
  s6 -> s11 [75, 75] { R11162 += 1, R11118 += 1, R88 += 1 };
  s6 -> s6 [76, 65535] { R11162 += 1, R11118 += 1, R88 += 1 };
  s8 -> s8 [0, 69] { R11162 += 1, R11118 += 1, R88 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R11162 += 1 };
  s8 -> s10 [70, 70] { R11162 += 1, R11118 += 1, R88 += 1 };
  s8 -> s11 [70, 70] { R11162 += 1, R11118 += 1, R88 += 1 };
  s8 -> s8 [71, 65535] { R11162 += 1, R11118 += 1, R88 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R11162 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s12 [0, 65535] { R11162 += 1 };
  s11 -> s11 [0, 65535] { R11162 += 1, R11118 += 1, R88 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R11162 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 69] { R11164 += 1, R11120 += 1, R91 += 1, R92 += 1 };
  s0 -> s0 [0, 65535] { R11163 += 1, R11164 += 1 };
  s0 -> s2 [0, 65535] { R11164 += 1, R11119 += 1, R11120 += 1 };
  s0 -> s3 [70, 70] { R11164 += 1, R11120 += 1, R91 += 1, R92 += 1 };
  s0 -> s4 [70, 70] { R11164 += 1, R11120 += 1, R91 += 1, R92 += 1 };
  s0 -> s1 [71, 65535] { R11164 += 1, R11120 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 69] { R11164 += 1, R11120 += 1, R91 += 1, R92 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R11164 += 1 };
  s1 -> s3 [70, 70] { R11164 += 1, R11120 += 1, R91 += 1, R92 += 1 };
  s1 -> s4 [70, 70] { R11164 += 1, R11120 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [71, 65535] { R11164 += 1, R11120 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [0, 69] { R11164 += 1, R11120 += 1, R91 += 1, R92 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R11164 += 1, R11119 += 1, R11120 += 1 };
  s2 -> s3 [70, 70] { R11164 += 1, R11120 += 1, R91 += 1, R92 += 1 };
  s2 -> s4 [70, 70] { R11164 += 1, R11120 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [71, 65535] { R11164 += 1, R11120 += 1, R91 += 1, R92 += 1 };
  s3 -> s6 [0, 65535] { R11164 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R11164 += 1, R11120 += 1, R91 += 1, R92 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R11164 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R11164 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 69] { R11166 += 1, R11122 += 1, R10160 += 1, R10161 += 1 };
  s0 -> s2 [0, 69] { R11166 += 1, R11122 += 1, R10159 += 1, R10160 += 1 };
  s0 -> s0 [0, 65535] { R11165 += 1, R11166 += 1 };
  s0 -> s3 [0, 65535] { R11166 += 1, R11121 += 1, R11122 += 1 };
  s0 -> s4 [70, 70] { R11166 += 1, R11122 += 1, R10159 += 1, R10160 += 1 };
  s0 -> s5 [70, 70] { R11166 += 1, R11122 += 1, R10160 += 1, R10161 += 1 };
  s0 -> s6 [70, 70] { R11166 += 1, R11122 += 1, R10160 += 1, R10161 += 1 };
  s0 -> s7 [70, 70] { R11166 += 1, R11122 += 1, R10159 += 1, R10160 += 1 };
  s0 -> s1 [71, 65535] { R11166 += 1, R11122 += 1, R10160 += 1, R10161 += 1 };
  s0 -> s2 [71, 65535] { R11166 += 1, R11122 += 1, R10159 += 1, R10160 += 1 };
  s1 -> s1 [0, 69] { R11166 += 1, R11122 += 1, R10160 += 1, R10161 += 1 };
  s1 -> s11 [0, 69] { R11166 += 1, R11122 += 1 };
  s1 -> s12 [70, 70] { R11166 += 1, R11122 += 1 };
  s1 -> s8 [70, 70] { R11166 += 1, R11122 += 1 };
  s1 -> s5 [70, 70] { R11166 += 1, R11122 += 1, R10160 += 1, R10161 += 1 };
  s1 -> s6 [70, 70] { R11166 += 1, R11122 += 1, R10160 += 1, R10161 += 1 };
  s1 -> s1 [71, 65535] { R11166 += 1, R11122 += 1, R10160 += 1, R10161 += 1 };
  s1 -> s11 [71, 65535] { R11166 += 1, R11122 += 1 };
  s2 -> s1 [0, 69] { R11166 += 1, R11122 += 1, R10160 += 1, R10161 += 1 };
  s2 -> s2 [0, 69] { R11166 += 1, R11122 += 1, R10159 += 1, R10160 += 1 };
  s2 -> s4 [70, 70] { R11166 += 1, R11122 += 1, R10159 += 1, R10160 += 1 };
  s2 -> s5 [70, 70] { R11166 += 1, R11122 += 1, R10160 += 1, R10161 += 1 };
  s2 -> s6 [70, 70] { R11166 += 1, R11122 += 1, R10160 += 1, R10161 += 1 };
  s2 -> s7 [70, 70] { R11166 += 1, R11122 += 1, R10159 += 1, R10160 += 1 };
  s2 -> s1 [71, 65535] { R11166 += 1, R11122 += 1, R10160 += 1, R10161 += 1 };
  s2 -> s2 [71, 65535] { R11166 += 1, R11122 += 1, R10159 += 1, R10160 += 1 };
  s3 -> s1 [0, 69] { R11166 += 1, R11122 += 1, R10160 += 1, R10161 += 1 };
  s3 -> s2 [0, 69] { R11166 += 1, R11122 += 1, R10159 += 1, R10160 += 1 };
  s3 -> s3 [0, 65535] { R11166 += 1, R11121 += 1, R11122 += 1 };
  s3 -> s4 [70, 70] { R11166 += 1, R11122 += 1, R10159 += 1, R10160 += 1 };
  s3 -> s5 [70, 70] { R11166 += 1, R11122 += 1, R10160 += 1, R10161 += 1 };
  s3 -> s6 [70, 70] { R11166 += 1, R11122 += 1, R10160 += 1, R10161 += 1 };
  s3 -> s7 [70, 70] { R11166 += 1, R11122 += 1, R10159 += 1, R10160 += 1 };
  s3 -> s1 [71, 65535] { R11166 += 1, R11122 += 1, R10160 += 1, R10161 += 1 };
  s3 -> s2 [71, 65535] { R11166 += 1, R11122 += 1, R10159 += 1, R10160 += 1 };
  s5 -> s8 [0, 65535] { R11166 += 1, R11122 += 1 };
  s5 -> s5 [0, 65535] { R11166 += 1, R11122 += 1, R10160 += 1, R10161 += 1 };
  s7 -> s5 [0, 65535] { R11166 += 1, R11122 += 1, R10160 += 1, R10161 += 1 };
  s7 -> s7 [0, 65535] { R11166 += 1, R11122 += 1, R10159 += 1, R10160 += 1 };
  s8 -> s8 [0, 65535] { R11166 += 1, R11122 += 1 };
  s8 -> s9 [0, 65535] { R11166 += 1 };
  s8 -> s10 [0, 65535];
  s9 -> s9 [0, 65535] { R11166 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s11 [0, 69] { R11166 += 1, R11122 += 1 };
  s11 -> s11 [0, 65535] { R11166 += 1 };
  s11 -> s10 [0, 65535];
  s11 -> s12 [70, 70] { R11166 += 1, R11122 += 1 };
  s11 -> s8 [70, 70] { R11166 += 1, R11122 += 1 };
  s11 -> s11 [71, 65535] { R11166 += 1, R11122 += 1 };
  s12 -> s12 [0, 65535] { R11166 += 1 };
  s12 -> s10 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 69] { R11168 += 1, R11124 += 1, R10723 += 1, R10724 += 1 };
  s0 -> s2 [0, 69] { R11168 += 1, R11124 += 1, R10724 += 1, R10725 += 1, R10726 += 1 };
  s0 -> s3 [0, 69] { R11168 += 1, R11124 += 1, R10724 += 1, R10726 += 1 };
  s0 -> s0 [0, 65535] { R11167 += 1, R11168 += 1 };
  s0 -> s4 [0, 65535] { R11168 += 1, R11123 += 1, R11124 += 1 };
  s0 -> s5 [70, 70] { R11168 += 1, R11124 += 1, R10724 += 1, R10725 += 1, R10726 += 1 };
  s0 -> s6 [70, 70] { R11168 += 1, R11124 += 1, R10724 += 1, R10725 += 1, R10726 += 1 };
  s0 -> s7 [70, 70] { R11168 += 1, R11124 += 1, R10723 += 1, R10724 += 1 };
  s0 -> s8 [70, 70] { R11168 += 1, R11124 += 1, R10724 += 1, R10726 += 1 };
  s0 -> s9 [70, 70] { R11168 += 1, R11124 += 1, R10723 += 1, R10724 += 1 };
  s0 -> s10 [70, 70] { R11168 += 1, R11124 += 1, R10724 += 1, R10726 += 1 };
  s0 -> s3 [71, 74] { R11168 += 1, R11124 += 1, R10724 += 1, R10726 += 1 };
  s0 -> s1 [71, 65535] { R11168 += 1, R11124 += 1, R10723 += 1, R10724 += 1 };
  s0 -> s2 [71, 65535] { R11168 += 1, R11124 += 1, R10724 += 1, R10725 += 1, R10726 += 1 };
  s0 -> s11 [75, 75] { R11168 += 1, R11124 += 1, R10724 += 1, R10726 += 1 };
  s0 -> s3 [76, 65535] { R11168 += 1, R11124 += 1, R10724 += 1, R10726 += 1 };
  s1 -> s1 [0, 69] { R11168 += 1, R11124 += 1, R10723 += 1, R10724 += 1 };
  s1 -> s2 [0, 69] { R11168 += 1, R11124 += 1, R10724 += 1, R10725 += 1, R10726 += 1 };
  s1 -> s3 [0, 69] { R11168 += 1, R11124 += 1, R10724 += 1, R10726 += 1 };
  s1 -> s5 [70, 70] { R11168 += 1, R11124 += 1, R10724 += 1, R10725 += 1, R10726 += 1 };
  s1 -> s6 [70, 70] { R11168 += 1, R11124 += 1, R10724 += 1, R10725 += 1, R10726 += 1 };
  s1 -> s7 [70, 70] { R11168 += 1, R11124 += 1, R10723 += 1, R10724 += 1 };
  s1 -> s8 [70, 70] { R11168 += 1, R11124 += 1, R10724 += 1, R10726 += 1 };
  s1 -> s9 [70, 70] { R11168 += 1, R11124 += 1, R10723 += 1, R10724 += 1 };
  s1 -> s10 [70, 70] { R11168 += 1, R11124 += 1, R10724 += 1, R10726 += 1 };
  s1 -> s3 [71, 74] { R11168 += 1, R11124 += 1, R10724 += 1, R10726 += 1 };
  s1 -> s1 [71, 65535] { R11168 += 1, R11124 += 1, R10723 += 1, R10724 += 1 };
  s1 -> s2 [71, 65535] { R11168 += 1, R11124 += 1, R10724 += 1, R10725 += 1, R10726 += 1 };
  s1 -> s11 [75, 75] { R11168 += 1, R11124 += 1, R10724 += 1, R10726 += 1 };
  s1 -> s3 [76, 65535] { R11168 += 1, R11124 += 1, R10724 += 1, R10726 += 1 };
  s2 -> s2 [0, 69] { R11168 += 1, R11124 += 1, R10724 += 1, R10725 += 1, R10726 += 1 };
  s2 -> s3 [0, 69] { R11168 += 1, R11124 += 1, R10724 += 1, R10726 += 1 };
  s2 -> s5 [70, 70] { R11168 += 1, R11124 += 1, R10724 += 1, R10725 += 1, R10726 += 1 };
  s2 -> s6 [70, 70] { R11168 += 1, R11124 += 1, R10724 += 1, R10725 += 1, R10726 += 1 };
  s2 -> s8 [70, 70] { R11168 += 1, R11124 += 1, R10724 += 1, R10726 += 1 };
  s2 -> s10 [70, 70] { R11168 += 1, R11124 += 1, R10724 += 1, R10726 += 1 };
  s2 -> s3 [71, 74] { R11168 += 1, R11124 += 1, R10724 += 1, R10726 += 1 };
  s2 -> s2 [71, 65535] { R11168 += 1, R11124 += 1, R10724 += 1, R10725 += 1, R10726 += 1 };
  s2 -> s11 [75, 75] { R11168 += 1, R11124 += 1, R10724 += 1, R10726 += 1 };
  s2 -> s3 [76, 65535] { R11168 += 1, R11124 += 1, R10724 += 1, R10726 += 1 };
  s3 -> s3 [0, 69] { R11168 += 1, R11124 += 1, R10724 += 1, R10726 += 1 };
  s3 -> s8 [70, 70] { R11168 += 1, R11124 += 1, R10724 += 1, R10726 += 1 };
  s3 -> s10 [70, 70] { R11168 += 1, R11124 += 1, R10724 += 1, R10726 += 1 };
  s3 -> s3 [71, 74] { R11168 += 1, R11124 += 1, R10724 += 1, R10726 += 1 };
  s3 -> s11 [75, 75] { R11168 += 1, R11124 += 1, R10724 += 1, R10726 += 1 };
  s3 -> s3 [76, 65535] { R11168 += 1, R11124 += 1, R10724 += 1, R10726 += 1 };
  s4 -> s1 [0, 69] { R11168 += 1, R11124 += 1, R10723 += 1, R10724 += 1 };
  s4 -> s2 [0, 69] { R11168 += 1, R11124 += 1, R10724 += 1, R10725 += 1, R10726 += 1 };
  s4 -> s3 [0, 69] { R11168 += 1, R11124 += 1, R10724 += 1, R10726 += 1 };
  s4 -> s4 [0, 65535] { R11168 += 1, R11123 += 1, R11124 += 1 };
  s4 -> s5 [70, 70] { R11168 += 1, R11124 += 1, R10724 += 1, R10725 += 1, R10726 += 1 };
  s4 -> s6 [70, 70] { R11168 += 1, R11124 += 1, R10724 += 1, R10725 += 1, R10726 += 1 };
  s4 -> s7 [70, 70] { R11168 += 1, R11124 += 1, R10723 += 1, R10724 += 1 };
  s4 -> s8 [70, 70] { R11168 += 1, R11124 += 1, R10724 += 1, R10726 += 1 };
  s4 -> s9 [70, 70] { R11168 += 1, R11124 += 1, R10723 += 1, R10724 += 1 };
  s4 -> s10 [70, 70] { R11168 += 1, R11124 += 1, R10724 += 1, R10726 += 1 };
  s4 -> s3 [71, 74] { R11168 += 1, R11124 += 1, R10724 += 1, R10726 += 1 };
  s4 -> s1 [71, 65535] { R11168 += 1, R11124 += 1, R10723 += 1, R10724 += 1 };
  s4 -> s2 [71, 65535] { R11168 += 1, R11124 += 1, R10724 += 1, R10725 += 1, R10726 += 1 };
  s4 -> s11 [75, 75] { R11168 += 1, R11124 += 1, R10724 += 1, R10726 += 1 };
  s4 -> s3 [76, 65535] { R11168 += 1, R11124 += 1, R10724 += 1, R10726 += 1 };
  s6 -> s10 [0, 74] { R11168 += 1, R11124 += 1, R10724 += 1, R10726 += 1 };
  s6 -> s6 [0, 65535] { R11168 += 1, R11124 += 1, R10724 += 1, R10725 += 1, R10726 += 1 };
  s6 -> s16 [75, 75] { R11168 += 1, R11124 += 1, R10724 += 1, R10726 += 1 };
  s6 -> s10 [76, 65535] { R11168 += 1, R11124 += 1, R10724 += 1, R10726 += 1 };
  s7 -> s10 [0, 74] { R11168 += 1, R11124 += 1, R10724 += 1, R10726 += 1 };
  s7 -> s6 [0, 65535] { R11168 += 1, R11124 += 1, R10724 += 1, R10725 += 1, R10726 += 1 };
  s7 -> s7 [0, 65535] { R11168 += 1, R11124 += 1, R10723 += 1, R10724 += 1 };
  s7 -> s16 [75, 75] { R11168 += 1, R11124 += 1, R10724 += 1, R10726 += 1 };
  s7 -> s10 [76, 65535] { R11168 += 1, R11124 += 1, R10724 += 1, R10726 += 1 };
  s10 -> s10 [0, 74] { R11168 += 1, R11124 += 1, R10724 += 1, R10726 += 1 };
  s10 -> s16 [75, 75] { R11168 += 1, R11124 += 1, R10724 += 1, R10726 += 1 };
  s10 -> s10 [76, 65535] { R11168 += 1, R11124 += 1, R10724 += 1, R10726 += 1 };
  s11 -> s11 [0, 69] { R11168 += 1, R11124 += 1, R10724 += 1, R10726 += 1 };
  s11 -> s12 [0, 69] { R11168 += 1, R11124 += 1, R10724 += 1 };
  s11 -> s13 [70, 70] { R11168 += 1, R11124 += 1, R10724 += 1, R10726 += 1 };
  s11 -> s14 [70, 70] { R11168 += 1, R11124 += 1, R10724 += 1 };
  s11 -> s15 [70, 70] { R11168 += 1, R11124 += 1, R10724 += 1 };
  s11 -> s16 [70, 70] { R11168 += 1, R11124 += 1, R10724 += 1, R10726 += 1 };
  s11 -> s11 [71, 65535] { R11168 += 1, R11124 += 1, R10724 += 1, R10726 += 1 };
  s11 -> s12 [71, 65535] { R11168 += 1, R11124 += 1, R10724 += 1 };
  s12 -> s12 [0, 69] { R11168 += 1, R11124 += 1, R10724 += 1 };
  s12 -> s18 [0, 65535];
  s12 -> s12 [0, 65535] { R11168 += 1 };
  s12 -> s14 [70, 70] { R11168 += 1, R11124 += 1, R10724 += 1 };
  s12 -> s15 [70, 70] { R11168 += 1, R11124 += 1, R10724 += 1 };
  s12 -> s12 [71, 65535] { R11168 += 1, R11124 += 1, R10724 += 1 };
  s14 -> s18 [0, 65535];
  s14 -> s14 [0, 65535] { R11168 += 1 };
  s15 -> s17 [0, 65535] { R11168 += 1 };
  s15 -> s18 [0, 65535];
  s15 -> s15 [0, 65535] { R11168 += 1, R11124 += 1, R10724 += 1 };
  s16 -> s15 [0, 65535] { R11168 += 1, R11124 += 1, R10724 += 1 };
  s16 -> s16 [0, 65535] { R11168 += 1, R11124 += 1, R10724 += 1, R10726 += 1 };
  s17 -> s17 [0, 65535] { R11168 += 1 };
  s17 -> s18 [0, 65535];
  s18 -> s18 [0, 65535];
  accepting s17, s12, s14, s18, s15;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 69] { R11170 += 1, R11126 += 1, R11062 += 1, R11063 += 1, R11064 += 1 };
  s0 -> s2 [0, 69] { R11170 += 1, R11126 += 1, R11061 += 1, R11062 += 1 };
  s0 -> s3 [0, 69] { R11170 += 1, R11126 += 1, R11062 += 1, R11064 += 1, R11065 += 1 };
  s0 -> s4 [0, 65535] { R11170 += 1, R11125 += 1, R11126 += 1 };
  s0 -> s0 [0, 65535] { R11169 += 1, R11170 += 1 };
  s0 -> s5 [70, 70] { R11170 += 1, R11126 += 1, R11061 += 1, R11062 += 1 };
  s0 -> s6 [70, 70] { R11170 += 1, R11126 += 1, R11061 += 1, R11062 += 1 };
  s0 -> s7 [70, 70] { R11170 += 1, R11126 += 1, R11062 += 1, R11064 += 1, R11065 += 1 };
  s0 -> s8 [70, 70] { R11170 += 1, R11126 += 1, R11062 += 1, R11064 += 1, R11065 += 1 };
  s0 -> s9 [70, 70] { R11170 += 1, R11126 += 1, R11062 += 1, R11063 += 1, R11064 += 1 };
  s0 -> s10 [70, 70] { R11170 += 1, R11126 += 1, R11062 += 1, R11063 += 1, R11064 += 1 };
  s0 -> s1 [71, 65535] { R11170 += 1, R11126 += 1, R11062 += 1, R11063 += 1, R11064 += 1 };
  s0 -> s2 [71, 65535] { R11170 += 1, R11126 += 1, R11061 += 1, R11062 += 1 };
  s0 -> s3 [71, 65535] { R11170 += 1, R11126 += 1, R11062 += 1, R11064 += 1, R11065 += 1 };
  s1 -> s1 [0, 69] { R11170 += 1, R11126 += 1, R11062 += 1, R11063 += 1, R11064 += 1 };
  s1 -> s3 [0, 69] { R11170 += 1, R11126 += 1, R11062 += 1, R11064 += 1, R11065 += 1 };
  s1 -> s7 [70, 70] { R11170 += 1, R11126 += 1, R11062 += 1, R11064 += 1, R11065 += 1 };
  s1 -> s8 [70, 70] { R11170 += 1, R11126 += 1, R11062 += 1, R11064 += 1, R11065 += 1 };
  s1 -> s9 [70, 70] { R11170 += 1, R11126 += 1, R11062 += 1, R11063 += 1, R11064 += 1 };
  s1 -> s10 [70, 70] { R11170 += 1, R11126 += 1, R11062 += 1, R11063 += 1, R11064 += 1 };
  s1 -> s1 [71, 65535] { R11170 += 1, R11126 += 1, R11062 += 1, R11063 += 1, R11064 += 1 };
  s1 -> s3 [71, 65535] { R11170 += 1, R11126 += 1, R11062 += 1, R11064 += 1, R11065 += 1 };
  s2 -> s1 [0, 69] { R11170 += 1, R11126 += 1, R11062 += 1, R11063 += 1, R11064 += 1 };
  s2 -> s2 [0, 69] { R11170 += 1, R11126 += 1, R11061 += 1, R11062 += 1 };
  s2 -> s3 [0, 69] { R11170 += 1, R11126 += 1, R11062 += 1, R11064 += 1, R11065 += 1 };
  s2 -> s5 [70, 70] { R11170 += 1, R11126 += 1, R11061 += 1, R11062 += 1 };
  s2 -> s6 [70, 70] { R11170 += 1, R11126 += 1, R11061 += 1, R11062 += 1 };
  s2 -> s7 [70, 70] { R11170 += 1, R11126 += 1, R11062 += 1, R11064 += 1, R11065 += 1 };
  s2 -> s8 [70, 70] { R11170 += 1, R11126 += 1, R11062 += 1, R11064 += 1, R11065 += 1 };
  s2 -> s9 [70, 70] { R11170 += 1, R11126 += 1, R11062 += 1, R11063 += 1, R11064 += 1 };
  s2 -> s10 [70, 70] { R11170 += 1, R11126 += 1, R11062 += 1, R11063 += 1, R11064 += 1 };
  s2 -> s1 [71, 65535] { R11170 += 1, R11126 += 1, R11062 += 1, R11063 += 1, R11064 += 1 };
  s2 -> s2 [71, 65535] { R11170 += 1, R11126 += 1, R11061 += 1, R11062 += 1 };
  s2 -> s3 [71, 65535] { R11170 += 1, R11126 += 1, R11062 += 1, R11064 += 1, R11065 += 1 };
  s3 -> s3 [0, 69] { R11170 += 1, R11126 += 1, R11062 += 1, R11064 += 1, R11065 += 1 };
  s3 -> s11 [0, 65535];
  s3 -> s3 [0, 65535] { R11170 += 1 };
  s3 -> s7 [70, 70] { R11170 += 1, R11126 += 1, R11062 += 1, R11064 += 1, R11065 += 1 };
  s3 -> s8 [70, 70] { R11170 += 1, R11126 += 1, R11062 += 1, R11064 += 1, R11065 += 1 };
  s3 -> s3 [71, 65535] { R11170 += 1, R11126 += 1, R11062 += 1, R11064 += 1, R11065 += 1 };
  s4 -> s1 [0, 69] { R11170 += 1, R11126 += 1, R11062 += 1, R11063 += 1, R11064 += 1 };
  s4 -> s2 [0, 69] { R11170 += 1, R11126 += 1, R11061 += 1, R11062 += 1 };
  s4 -> s3 [0, 69] { R11170 += 1, R11126 += 1, R11062 += 1, R11064 += 1, R11065 += 1 };
  s4 -> s4 [0, 65535] { R11170 += 1, R11125 += 1, R11126 += 1 };
  s4 -> s5 [70, 70] { R11170 += 1, R11126 += 1, R11061 += 1, R11062 += 1 };
  s4 -> s6 [70, 70] { R11170 += 1, R11126 += 1, R11061 += 1, R11062 += 1 };
  s4 -> s7 [70, 70] { R11170 += 1, R11126 += 1, R11062 += 1, R11064 += 1, R11065 += 1 };
  s4 -> s8 [70, 70] { R11170 += 1, R11126 += 1, R11062 += 1, R11064 += 1, R11065 += 1 };
  s4 -> s9 [70, 70] { R11170 += 1, R11126 += 1, R11062 += 1, R11063 += 1, R11064 += 1 };
  s4 -> s10 [70, 70] { R11170 += 1, R11126 += 1, R11062 += 1, R11063 += 1, R11064 += 1 };
  s4 -> s1 [71, 65535] { R11170 += 1, R11126 += 1, R11062 += 1, R11063 += 1, R11064 += 1 };
  s4 -> s2 [71, 65535] { R11170 += 1, R11126 += 1, R11061 += 1, R11062 += 1 };
  s4 -> s3 [71, 65535] { R11170 += 1, R11126 += 1, R11062 += 1, R11064 += 1, R11065 += 1 };
  s6 -> s6 [0, 65535] { R11170 += 1, R11126 += 1, R11061 += 1, R11062 += 1 };
  s6 -> s8 [0, 65535] { R11170 += 1, R11126 += 1, R11062 += 1, R11064 += 1, R11065 += 1 };
  s6 -> s10 [0, 65535] { R11170 += 1, R11126 += 1, R11062 += 1, R11063 += 1, R11064 += 1 };
  s7 -> s7 [0, 65535] { R11170 += 1 };
  s7 -> s11 [0, 65535];
  s8 -> s8 [0, 65535] { R11170 += 1, R11126 += 1, R11062 += 1, R11064 += 1, R11065 += 1 };
  s8 -> s11 [0, 65535];
  s8 -> s12 [0, 65535] { R11170 += 1 };
  s10 -> s8 [0, 65535] { R11170 += 1, R11126 += 1, R11062 += 1, R11064 += 1, R11065 += 1 };
  s10 -> s10 [0, 65535] { R11170 += 1, R11126 += 1, R11062 += 1, R11063 += 1, R11064 += 1 };
  s11 -> s11 [0, 65535];
  s12 -> s11 [0, 65535];
  s12 -> s12 [0, 65535] { R11170 += 1 };
  accepting s3, s12, s8, s7, s11;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [102, 102];
  accepting s1;
};
};
constraint R3 = R11170 && R23 - R11170 = -1 && R24 = R11170 && R25 - R11170 = -1 && R26 = R11170 && R27 = 0 && R28 = 1 && R29 = 0 && R30 = 1 && R45 + R84 + R83 + -1*R10728 + -1*R10724 - R66 = 0 && R49 + R89 + R87 = 0 && R50 + R90 + R88 + -1*R10728 + -1*R10724 - R66 = 0 && R55 + R96 + R93 + -1*R10730 + -1*R10726 - R68 = 0 && R65 + R10727 + R10723 = 0 && R67 + R10729 + R10725 = 0 && R11111 = 0 && R11112 = 0 && R11117 = 0 && R11118 = 0 && R11121 = 0 && R11122 = 0 && R11123 = 0 && R11124 = 0 && R11125 = 0 && R11126 = 0 && R11127 = 0 && R11128 = R11170 && R11129 = 0 && R11130 = R11170 && R11131 = 0 && R11132 = R11170 && R11133 = 0 && R11134 = R11170 && R11135 = 0 && R11136 = R11170 && R11137 = 0 && R11138 = R11170 && R11139 = 0 && R11140 = R11170 && R11141 = 0 && R11142 = R11170 && R11143 = 0 && R11144 = R11170 && R11145 = 0 && R11146 = R11170 && R11147 = 0 && R11148 = R11170 && R11149 = 0 && R11150 = R11170 && R11151 = 0 && R11152 = R11170 && R11153 = 0 && R11154 = R11170 && R11155 = 0 && R11156 = R11170 && R11157 = 0 && R11158 = R11170 && R11159 = 0 && R11160 = R11170 && R11161 = 0 && R11162 = R11170 && R11163 = 0 && R11164 = R11170 && R11165 = 0 && R11166 = R11170 && R11167 = 0 && R11168 = R11170 && R11169 = 0 && -1 < R2 && R12 < 1 && R15 < 1 && R16 < 1 && R47 + R86 + R85 < 1 && R61 + R10164 + R10161 < 1 && -1*R10728 + -1*R10724 - R66 < 1 && -1*R10730 + -1*R10726 - R68 < 1 && 0 < R11170 && (R2 != 0 || R20 = 0 || (R11071 = 0 && R11072 = 0)) && (R2 != 0 || R20 = 0 || (R11073 = 0 && R11074 = 0)) && (R2 != 0 || R20 = 0 || (R11075 = 0 && R11076 = 0)) && (R2 != 0 || R20 = 0 || (R11077 = 0 && R11078 = 0)) && (R2 != 0 || R20 = 0 || (R11079 = 0 && R11080 = 0)) && (R2 != 0 || R20 = 0 || (R11081 = 0 && R11082 = 0)) && (R2 != 0 || R20 = 0 || (R11083 = 0 && R11084 = 0)) && (R2 != 0 || R20 = 0 || (R11085 = 0 && R11086 = 0)) && (R2 != 0 || R20 = 0 || (R11087 = 0 && R11088 = 0)) && (R2 != 0 || R20 = 0 || (R11089 = 0 && R11090 = 0)) && (R53 + R94 + R91 != 0 || R54 + R95 + R92 + -1*R10728 + -1*R10724 - R66 = 0 || R66 + R10728 + R10724 < 1) && (R59 + R10162 + R10159 != 0 || R60 + R10163 + R10160 + -1*R10728 + -1*R10724 - R66 = 0 || R66 + R10728 + R10724 < 1) && (R66 + R10728 + R10724 != 0 || ((R53 + R94 + R91 != 0 || R54 + R95 + R92 = 0 || R68 + R10730 + R10726 < 1) && (R53 + R94 + R91 = 0 || R68 + R10730 + R10726 < 1))) && (R66 + R10728 + R10724 != 0 || ((R59 + R10162 + R10159 != 0 || R60 + R10163 + R10160 = 0 || R68 + R10730 + R10726 < 1) && (R59 + R10162 + R10159 = 0 || R68 + R10730 + R10726 < 1))) && (R66 + R10728 + R10724 != 0 || ((R73 + R11066 + R11061 != 0 || R74 + R11067 + R11062 = 0 || R68 + R10730 + R10726 < 1) && (R73 + R11066 + R11061 = 0 || R68 + R10730 + R10726 < 1))) && (R68 + R10730 + R10726 != 0 || R77 + R11070 + R11065 = 0 || (R75 + R11068 + R11063 = 0 && R76 + R11069 + R11064 = 0)) && (R73 + R11066 + R11061 != 0 || R66 + R10728 + R10724 + -1*R11067 + -1*R11062 - R74 = 0 || R66 + R10728 + R10724 < 1) && (R75 + R11068 + R11063 != 0 || R68 + R10730 + R10726 + -1*R11069 + -1*R11064 - R76 = 0 || R68 + R10730 + R10726 < 1) && (R11071 != 0 || R2 = R11072 || R2 < 1) && (R11073 != 0 || R2 = R11074 || R2 < 1) && (R11075 != 0 || R2 = R11076 || R2 < 1) && (R11077 != 0 || R2 = R11078 || R2 < 1) && (R11079 != 0 || R2 = R11080 || R2 < 1) && (R11081 != 0 || R2 = R11082 || R2 < 1) && (R11083 != 0 || R2 = R11084 || R2 < 1) && (R11085 != 0 || R2 = R11086 || R2 < 1) && (R11087 != 0 || R2 = R11088 || R2 < 1) && (R11089 != 0 || R2 = R11090 || R2 < 1) && (R21 = 0 || (R11109 = 0 && R11110 = 0)) && (R21 = 0 || (R11113 = 0 && R11114 = 0)) && (R21 = 0 || (R11115 = 0 && R11116 = 0)) && (R21 = 0 || (R11119 = 0 && R11120 = 0)) && (R22 = 0 || (R11091 = 0 && R11092 = 0)) && (R22 = 0 || (R11093 = 0 && R11094 = 0)) && (R22 = 0 || (R11095 = 0 && R11096 = 0)) && (R22 = 0 || (R11097 = 0 && R11098 = 0)) && (R22 = 0 || (R11099 = 0 && R11100 = 0)) && (R22 = 0 || (R11101 = 0 && R11102 = 0)) && (R22 = 0 || (R11103 = 0 && R11104 = 0)) && (R22 = 0 || (R11105 = 0 && R11106 = 0)) && (R22 = 0 || (R11107 = 0 && R11108 = 0)) && (R53 + R94 + R91 = 0 || R66 + R10728 + R10724 < 1) && (R59 + R10162 + R10159 = 0 || R66 + R10728 + R10724 < 1) && (R73 + R11066 + R11061 = 0 || R66 + R10728 + R10724 < 1) && (R75 + R11068 + R11063 = 0 || R68 + R10730 + R10726 < 1) && (R11071 = 0 || R2 < 1) && (R11073 = 0 || R2 < 1) && (R11075 = 0 || R2 < 1) && (R11077 = 0 || R2 < 1) && (R11079 = 0 || R2 < 1) && (R11081 = 0 || R2 < 1) && (R11083 = 0 || R2 < 1) && (R11085 = 0 || R2 < 1) && (R11087 = 0 || R2 < 1) && (R11089 = 0 || R2 < 1);
// End of Parikh automata intersection problem
