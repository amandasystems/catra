// Parikh automata intersection problem, generated by OSTRICH+
counter int R10159, R10160, R10161, R10162, R10163, R10164, R11839, R11840, R11841, R11842, R11843, R11844, R11845, R11846, R12, R12067, R12068, R12069, R12070, R12071, R12072, R12073, R12074, R12075, R12076, R12077, R12078, R12079, R12080, R12081, R12082, R12083, R12084, R12085, R12086, R12087, R12088, R12089, R12090, R12091, R12092, R12093, R12094, R12095, R12096, R12097, R12098, R12099, R12100, R12101, R12102, R12103, R12104, R12105, R12106, R12107, R12108, R12109, R12110, R12111, R12112, R12113, R12114, R12115, R12116, R12117, R12118, R12119, R12120, R12121, R12122, R12123, R12124, R12125, R12126, R12127, R12128, R12129, R12130, R12131, R12132, R12133, R12134, R12135, R12136, R12137, R12138, R12139, R12140, R12141, R12142, R12143, R12144, R12145, R12146, R12147, R12148, R12149, R12150, R12151, R12152, R12153, R12154, R12155, R12156, R12157, R12158, R12159, R12160, R12161, R12162, R12163, R12164, R12165, R12166, R12167, R12168, R12169, R12170, R12171, R12172, R12173, R12174, R12175, R12176, R15, R16, R2, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R4, R45, R47, R49, R5, R50, R53, R54, R55, R59, R60, R61, R65, R66, R67, R68, R73, R74, R75, R76, R77, R83, R84, R85, R86, R87, R88, R89, R90, R91, R92, R93, R94, R95, R96;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [70, 70];
  s0 -> s0 [71, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [70, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R15 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 69];
  s0 -> s0 [0, 65535] { R16 += 1 };
  s0 -> s2 [70, 70];
  s0 -> s1 [71, 65535];
  s1 -> s1 [0, 69];
  s1 -> s2 [70, 70];
  s1 -> s1 [71, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R24 += 1 };
  s0 -> s0 [0, 65535] { R23 += 1, R24 += 1 };
  s0 -> s2 [9, 13] { R24 += 1 };
  s0 -> s1 [14, 31] { R24 += 1 };
  s0 -> s2 [32, 32] { R24 += 1 };
  s0 -> s1 [33, 65535] { R24 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R24 += 1 };
  s2 -> s1 [0, 65535] { R24 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R25 += 1, R26 += 1 };
  s1 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R28 += 1 };
  s0 -> s0 [0, 65535] { R27 += 1, R28 += 1 };
  s0 -> s2 [9, 13] { R28 += 1 };
  s0 -> s1 [14, 31] { R28 += 1 };
  s0 -> s2 [32, 32] { R28 += 1 };
  s0 -> s1 [33, 65535] { R28 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R28 += 1 };
  s2 -> s1 [0, 65535] { R28 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R29 += 1, R30 += 1 };
  s1 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R12097 += 1, R12098 += 1 };
  s0 -> s1 [0, 65535] { R12098 += 1, R22 += 1 };
  s1 -> s1 [0, 65535] { R12098 += 1, R22 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 69] { R12100 += 1 };
  s0 -> s0 [0, 65535] { R12099 += 1, R12100 += 1 };
  s0 -> s2 [70, 70] { R12100 += 1 };
  s0 -> s3 [70, 70] { R12100 += 1 };
  s0 -> s1 [76, 65535] { R12100 += 1 };
  s1 -> s1 [0, 69] { R12100 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R12100 += 1 };
  s1 -> s3 [70, 70] { R12100 += 1 };
  s1 -> s1 [76, 65535] { R12100 += 1 };
  s2 -> s2 [0, 70] { R12100 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [76, 65535] { R12100 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 69] { R12102 += 1, R45 += 1 };
  s0 -> s0 [0, 65535] { R12101 += 1, R12102 += 1 };
  s0 -> s2 [70, 70] { R12102 += 1, R45 += 1 };
  s0 -> s3 [70, 70] { R12102 += 1, R45 += 1 };
  s0 -> s1 [71, 65535] { R12102 += 1, R45 += 1 };
  s1 -> s1 [0, 69] { R12102 += 1, R45 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R12102 += 1, R45 += 1 };
  s1 -> s3 [70, 70] { R12102 += 1, R45 += 1 };
  s1 -> s1 [71, 65535] { R12102 += 1, R45 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R12102 += 1, R45 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 69] { R12104 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R12103 += 1, R12104 += 1 };
  s0 -> s2 [70, 70] { R12104 += 1, R47 += 1 };
  s0 -> s3 [70, 70] { R12104 += 1, R47 += 1 };
  s0 -> s1 [71, 65535] { R12104 += 1, R47 += 1 };
  s1 -> s1 [0, 69] { R12104 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R12104 += 1, R47 += 1 };
  s1 -> s3 [70, 70] { R12104 += 1, R47 += 1 };
  s1 -> s1 [71, 65535] { R12104 += 1, R47 += 1 };
  s2 -> s2 [0, 65535] { R12104 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 69] { R12106 += 1, R49 += 1, R50 += 1 };
  s0 -> s0 [0, 65535] { R12105 += 1, R12106 += 1 };
  s0 -> s2 [70, 70] { R12106 += 1, R49 += 1, R50 += 1 };
  s0 -> s3 [70, 70] { R12106 += 1, R49 += 1, R50 += 1 };
  s0 -> s1 [71, 65535] { R12106 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 69] { R12106 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R12106 += 1, R49 += 1, R50 += 1 };
  s1 -> s3 [70, 70] { R12106 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [71, 65535] { R12106 += 1, R49 += 1, R50 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R12106 += 1, R49 += 1, R50 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 69] { R12108 += 1, R53 += 1, R54 += 1 };
  s0 -> s0 [0, 65535] { R12107 += 1, R12108 += 1 };
  s0 -> s2 [70, 70] { R12108 += 1, R53 += 1, R54 += 1 };
  s0 -> s3 [70, 70] { R12108 += 1, R53 += 1, R54 += 1 };
  s0 -> s1 [71, 65535] { R12108 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 69] { R12108 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R12108 += 1, R53 += 1, R54 += 1 };
  s1 -> s3 [70, 70] { R12108 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [71, 65535] { R12108 += 1, R53 += 1, R54 += 1 };
  s2 -> s2 [0, 65535] { R12108 += 1, R53 += 1, R54 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 69] { R12110 += 1, R59 += 1, R60 += 1 };
  s0 -> s0 [0, 65535] { R12109 += 1, R12110 += 1 };
  s0 -> s2 [70, 70] { R12110 += 1, R59 += 1, R60 += 1 };
  s0 -> s3 [70, 70] { R12110 += 1, R59 += 1, R60 += 1 };
  s0 -> s1 [71, 65535] { R12110 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 69] { R12110 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R12110 += 1, R59 += 1, R60 += 1 };
  s1 -> s3 [70, 70] { R12110 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [71, 65535] { R12110 += 1, R59 += 1, R60 += 1 };
  s2 -> s2 [0, 65535] { R12110 += 1, R59 += 1, R60 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 69] { R12112 += 1, R65 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R12111 += 1, R12112 += 1 };
  s0 -> s2 [70, 70] { R12112 += 1, R65 += 1, R66 += 1 };
  s0 -> s3 [70, 70] { R12112 += 1, R65 += 1, R66 += 1 };
  s0 -> s1 [71, 65535] { R12112 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 69] { R12112 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R12112 += 1, R65 += 1, R66 += 1 };
  s1 -> s3 [70, 70] { R12112 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [71, 65535] { R12112 += 1, R65 += 1, R66 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R12112 += 1, R65 += 1, R66 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 69] { R12114 += 1, R73 += 1, R74 += 1 };
  s0 -> s0 [0, 65535] { R12113 += 1, R12114 += 1 };
  s0 -> s2 [70, 70] { R12114 += 1, R73 += 1, R74 += 1 };
  s0 -> s3 [70, 70] { R12114 += 1, R73 += 1, R74 += 1 };
  s0 -> s1 [71, 65535] { R12114 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 69] { R12114 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R12114 += 1, R73 += 1, R74 += 1 };
  s1 -> s3 [70, 70] { R12114 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [71, 65535] { R12114 += 1, R73 += 1, R74 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R12114 += 1, R73 += 1, R74 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 69] { R12134 += 1 };
  s0 -> s0 [0, 65535] { R12133 += 1, R12134 += 1 };
  s0 -> s2 [70, 70] { R12134 += 1 };
  s0 -> s1 [71, 65535] { R12134 += 1 };
  s1 -> s1 [0, 69] { R12134 += 1 };
  s1 -> s2 [70, 70] { R12134 += 1 };
  s1 -> s1 [71, 65535] { R12134 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R12134 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R12135 += 1, R12136 += 1 };
  s0 -> s1 [0, 65535] { R12136 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R12136 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 69] { R12138 += 1 };
  s0 -> s2 [0, 65535] { R12138 += 1, R12 += 1 };
  s0 -> s0 [0, 65535] { R12137 += 1, R12138 += 1 };
  s0 -> s3 [70, 70] { R12138 += 1 };
  s0 -> s1 [71, 65535] { R12138 += 1 };
  s1 -> s1 [0, 69] { R12138 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [70, 70] { R12138 += 1 };
  s1 -> s1 [71, 65535] { R12138 += 1 };
  s2 -> s1 [0, 69] { R12138 += 1 };
  s2 -> s2 [0, 65535] { R12138 += 1, R12 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [70, 70] { R12138 += 1 };
  s2 -> s1 [71, 65535] { R12138 += 1 };
  s3 -> s3 [0, 65535] { R12138 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 69] { R12140 += 1, R12078 += 1 };
  s0 -> s0 [0, 65535] { R12139 += 1, R12140 += 1 };
  s0 -> s2 [0, 65535] { R12140 += 1, R12077 += 1, R12078 += 1 };
  s0 -> s1 [71, 65535] { R12140 += 1, R12078 += 1 };
  s1 -> s1 [0, 69] { R12140 += 1, R12078 += 1 };
  s1 -> s1 [0, 65535] { R12140 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [71, 65535] { R12140 += 1, R12078 += 1 };
  s2 -> s1 [0, 69] { R12140 += 1, R12078 += 1 };
  s2 -> s2 [0, 65535] { R12140 += 1, R12077 += 1, R12078 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [71, 65535] { R12140 += 1, R12078 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R12142 += 1, R12080 += 1, R20 += 1 };
  s0 -> s2 [0, 65535] { R12142 += 1, R12079 += 1, R12080 += 1 };
  s0 -> s0 [0, 65535] { R12141 += 1, R12142 += 1 };
  s1 -> s1 [0, 65535] { R12142 += 1, R12080 += 1, R20 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R12142 += 1 };
  s2 -> s1 [0, 65535] { R12142 += 1, R12080 += 1, R20 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R12142 += 1, R12079 += 1, R12080 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R12142 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 70] { R12144 += 1, R12082 += 1 };
  s0 -> s2 [0, 65535] { R12144 += 1, R12081 += 1, R12082 += 1 };
  s0 -> s0 [0, 65535] { R12143 += 1, R12144 += 1 };
  s0 -> s1 [75, 65535] { R12144 += 1, R12082 += 1 };
  s1 -> s1 [0, 70] { R12144 += 1, R12082 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R12144 += 1 };
  s1 -> s1 [75, 65535] { R12144 += 1, R12082 += 1 };
  s2 -> s1 [0, 70] { R12144 += 1, R12082 += 1 };
  s2 -> s2 [0, 65535] { R12144 += 1, R12081 += 1, R12082 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [75, 65535] { R12144 += 1, R12082 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s0 [0, 65535] { R12145 += 1, R12146 += 1 };
  s0 -> s1 [0, 65535] { R12146 += 1, R12083 += 1, R12084 += 1 };
  s0 -> s2 [0, 65535] { R12146 += 1, R12084 += 1, R84 += 1 };
  s1 -> s1 [0, 65535] { R12146 += 1, R12083 += 1, R12084 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R12146 += 1, R12084 += 1, R84 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R12146 += 1, R12084 += 1, R84 += 1 };
  s2 -> s4 [0, 65535] { R12146 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R12146 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 74] { R12148 += 1, R12086 += 1 };
  s0 -> s2 [0, 65535] { R12148 += 1, R12086 += 1, R86 += 1 };
  s0 -> s3 [0, 65535] { R12148 += 1, R12085 += 1, R12086 += 1 };
  s0 -> s0 [0, 65535] { R12147 += 1, R12148 += 1 };
  s0 -> s1 [76, 65535] { R12148 += 1, R12086 += 1 };
  s1 -> s1 [0, 74] { R12148 += 1, R12086 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R12148 += 1 };
  s1 -> s1 [76, 65535] { R12148 += 1, R12086 += 1 };
  s2 -> s1 [0, 74] { R12148 += 1, R12086 += 1 };
  s2 -> s5 [0, 65535] { R12148 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R12148 += 1, R12086 += 1, R86 += 1 };
  s2 -> s1 [76, 65535] { R12148 += 1, R12086 += 1 };
  s3 -> s1 [0, 74] { R12148 += 1, R12086 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R12148 += 1, R12086 += 1, R86 += 1 };
  s3 -> s3 [0, 65535] { R12148 += 1, R12085 += 1, R12086 += 1 };
  s3 -> s1 [76, 65535] { R12148 += 1, R12086 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R12148 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 65535] { R12150 += 1, R12088 += 1, R90 += 1 };
  s0 -> s2 [0, 65535] { R12150 += 1, R12087 += 1, R12088 += 1 };
  s0 -> s3 [0, 65535] { R12150 += 1, R12088 += 1 };
  s0 -> s0 [0, 65535] { R12149 += 1, R12150 += 1 };
  s1 -> s1 [0, 65535] { R12150 += 1, R12088 += 1, R90 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R12150 += 1 };
  s1 -> s3 [0, 65535] { R12150 += 1, R12088 += 1 };
  s2 -> s1 [0, 65535] { R12150 += 1, R12088 += 1, R90 += 1 };
  s2 -> s2 [0, 65535] { R12150 += 1, R12087 += 1, R12088 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R12150 += 1, R12088 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R12150 += 1 };
  s3 -> s3 [0, 65535] { R12150 += 1, R12088 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R12150 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R12152 += 1, R12089 += 1, R12090 += 1 };
  s0 -> s2 [0, 65535] { R12152 += 1, R12090 += 1, R94 += 1, R95 += 1 };
  s0 -> s0 [0, 65535] { R12151 += 1, R12152 += 1 };
  s0 -> s3 [0, 65535] { R12152 += 1, R12090 += 1, R95 += 1, R96 += 1 };
  s1 -> s1 [0, 65535] { R12152 += 1, R12089 += 1, R12090 += 1 };
  s1 -> s2 [0, 65535] { R12152 += 1, R12090 += 1, R94 += 1, R95 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [0, 65535] { R12152 += 1, R12090 += 1, R95 += 1, R96 += 1 };
  s2 -> s5 [0, 65535] { R12152 += 1 };
  s2 -> s2 [0, 65535] { R12152 += 1, R12090 += 1, R94 += 1, R95 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R12152 += 1, R12090 += 1, R95 += 1, R96 += 1 };
  s3 -> s4 [0, 65535] { R12152 += 1, R12090 += 1 };
  s3 -> s5 [0, 65535] { R12152 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R12152 += 1, R12090 += 1, R95 += 1, R96 += 1 };
  s4 -> s4 [0, 65535] { R12152 += 1, R12090 += 1 };
  s4 -> s5 [0, 65535] { R12152 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R12152 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 65535] { R12154 += 1, R12091 += 1, R12092 += 1 };
  s0 -> s2 [0, 65535] { R12154 += 1, R12092 += 1 };
  s0 -> s0 [0, 65535] { R12153 += 1, R12154 += 1 };
  s1 -> s1 [0, 65535] { R12154 += 1, R12091 += 1, R12092 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R12154 += 1, R12092 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R12154 += 1 };
  s2 -> s2 [0, 65535] { R12154 += 1, R12092 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R12154 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 74] { R12156 += 1, R12094 += 1, R11844 += 1, R11846 += 1 };
  s0 -> s2 [0, 65535] { R12156 += 1, R12094 += 1, R11843 += 1, R11844 += 1 };
  s0 -> s3 [0, 65535] { R12156 += 1, R12093 += 1, R12094 += 1 };
  s0 -> s0 [0, 65535] { R12155 += 1, R12156 += 1 };
  s0 -> s4 [0, 65535] { R12156 += 1, R12094 += 1, R11844 += 1, R11845 += 1, R11846 += 1 };
  s0 -> s5 [75, 75] { R12156 += 1, R12094 += 1, R11844 += 1, R11846 += 1 };
  s0 -> s1 [76, 65535] { R12156 += 1, R12094 += 1, R11844 += 1, R11846 += 1 };
  s1 -> s1 [0, 74] { R12156 += 1, R12094 += 1, R11844 += 1, R11846 += 1 };
  s1 -> s5 [75, 75] { R12156 += 1, R12094 += 1, R11844 += 1, R11846 += 1 };
  s1 -> s1 [76, 65535] { R12156 += 1, R12094 += 1, R11844 += 1, R11846 += 1 };
  s2 -> s1 [0, 74] { R12156 += 1, R12094 += 1, R11844 += 1, R11846 += 1 };
  s2 -> s2 [0, 65535] { R12156 += 1, R12094 += 1, R11843 += 1, R11844 += 1 };
  s2 -> s4 [0, 65535] { R12156 += 1, R12094 += 1, R11844 += 1, R11845 += 1, R11846 += 1 };
  s2 -> s5 [75, 75] { R12156 += 1, R12094 += 1, R11844 += 1, R11846 += 1 };
  s2 -> s1 [76, 65535] { R12156 += 1, R12094 += 1, R11844 += 1, R11846 += 1 };
  s3 -> s1 [0, 74] { R12156 += 1, R12094 += 1, R11844 += 1, R11846 += 1 };
  s3 -> s2 [0, 65535] { R12156 += 1, R12094 += 1, R11843 += 1, R11844 += 1 };
  s3 -> s3 [0, 65535] { R12156 += 1, R12093 += 1, R12094 += 1 };
  s3 -> s4 [0, 65535] { R12156 += 1, R12094 += 1, R11844 += 1, R11845 += 1, R11846 += 1 };
  s3 -> s5 [75, 75] { R12156 += 1, R12094 += 1, R11844 += 1, R11846 += 1 };
  s3 -> s1 [76, 65535] { R12156 += 1, R12094 += 1, R11844 += 1, R11846 += 1 };
  s4 -> s1 [0, 74] { R12156 += 1, R12094 += 1, R11844 += 1, R11846 += 1 };
  s4 -> s4 [0, 65535] { R12156 += 1, R12094 += 1, R11844 += 1, R11845 += 1, R11846 += 1 };
  s4 -> s5 [75, 75] { R12156 += 1, R12094 += 1, R11844 += 1, R11846 += 1 };
  s4 -> s1 [76, 65535] { R12156 += 1, R12094 += 1, R11844 += 1, R11846 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R12156 += 1 };
  s5 -> s8 [0, 65535] { R12156 += 1, R12094 += 1, R11844 += 1 };
  s5 -> s9 [0, 65535] { R12156 += 1, R12094 += 1 };
  s5 -> s5 [0, 65535] { R12156 += 1, R12094 += 1, R11844 += 1, R11846 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R12156 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R12156 += 1 };
  s8 -> s8 [0, 65535] { R12156 += 1, R12094 += 1, R11844 += 1 };
  s8 -> s9 [0, 65535] { R12156 += 1, R12094 += 1 };
  s9 -> s6 [0, 65535];
  s9 -> s7 [0, 65535] { R12156 += 1 };
  s9 -> s9 [0, 65535] { R12156 += 1, R12094 += 1 };
  accepting s8, s5, s9, s6, s7;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 65535] { R12158 += 1, R12095 += 1, R12096 += 1 };
  s0 -> s2 [0, 65535] { R12158 += 1, R12096 += 1, R12073 += 1, R12075 += 1, R12076 += 1 };
  s0 -> s3 [0, 65535] { R12158 += 1, R12096 += 1, R12072 += 1, R12073 += 1 };
  s0 -> s0 [0, 65535] { R12157 += 1, R12158 += 1 };
  s0 -> s4 [0, 65535] { R12158 += 1, R12096 += 1, R12073 += 1, R12074 += 1, R12075 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R12158 += 1, R12095 += 1, R12096 += 1 };
  s1 -> s2 [0, 65535] { R12158 += 1, R12096 += 1, R12073 += 1, R12075 += 1, R12076 += 1 };
  s1 -> s3 [0, 65535] { R12158 += 1, R12096 += 1, R12072 += 1, R12073 += 1 };
  s1 -> s4 [0, 65535] { R12158 += 1, R12096 += 1, R12073 += 1, R12074 += 1, R12075 += 1 };
  s2 -> s5 [0, 65535] { R12158 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s7 [0, 65535] { R12158 += 1, R12096 += 1 };
  s2 -> s2 [0, 65535] { R12158 += 1, R12096 += 1, R12073 += 1, R12075 += 1, R12076 += 1 };
  s2 -> s8 [0, 65535] { R12158 += 1, R12096 += 1, R12073 += 1 };
  s3 -> s5 [0, 65535] { R12158 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s2 [0, 65535] { R12158 += 1, R12096 += 1, R12073 += 1, R12075 += 1, R12076 += 1 };
  s3 -> s3 [0, 65535] { R12158 += 1, R12096 += 1, R12072 += 1, R12073 += 1 };
  s3 -> s4 [0, 65535] { R12158 += 1, R12096 += 1, R12073 += 1, R12074 += 1, R12075 += 1 };
  s4 -> s5 [0, 65535] { R12158 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R12158 += 1, R12096 += 1 };
  s4 -> s2 [0, 65535] { R12158 += 1, R12096 += 1, R12073 += 1, R12075 += 1, R12076 += 1 };
  s4 -> s4 [0, 65535] { R12158 += 1, R12096 += 1, R12073 += 1, R12074 += 1, R12075 += 1 };
  s5 -> s5 [0, 65535] { R12158 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R12158 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R12158 += 1, R12096 += 1 };
  s8 -> s5 [0, 65535] { R12158 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R12158 += 1, R12096 += 1 };
  s8 -> s8 [0, 65535] { R12158 += 1, R12096 += 1, R12073 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R12160 += 1, R12115 += 1, R12116 += 1 };
  s0 -> s2 [0, 65535] { R12160 += 1, R12116 += 1, R21 += 1 };
  s0 -> s0 [0, 65535] { R12159 += 1, R12160 += 1 };
  s1 -> s1 [0, 65535] { R12160 += 1, R12115 += 1, R12116 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R12160 += 1, R12116 += 1, R21 += 1 };
  s2 -> s3 [0, 65535] { R12160 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R12160 += 1, R12116 += 1, R21 += 1 };
  s3 -> s3 [0, 65535] { R12160 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 69] { R12162 += 1, R12118 += 1 };
  s0 -> s0 [0, 65535] { R12161 += 1, R12162 += 1 };
  s0 -> s2 [0, 65535] { R12162 += 1, R12117 += 1, R12118 += 1 };
  s0 -> s3 [70, 70] { R12162 += 1, R12118 += 1 };
  s0 -> s4 [70, 70] { R12162 += 1, R12118 += 1 };
  s0 -> s5 [75, 75] { R12162 += 1, R12118 += 1 };
  s0 -> s1 [76, 65535] { R12162 += 1, R12118 += 1 };
  s1 -> s1 [0, 69] { R12162 += 1, R12118 += 1 };
  s1 -> s3 [70, 70] { R12162 += 1, R12118 += 1 };
  s1 -> s4 [70, 70] { R12162 += 1, R12118 += 1 };
  s1 -> s5 [75, 75] { R12162 += 1, R12118 += 1 };
  s1 -> s1 [76, 65535] { R12162 += 1, R12118 += 1 };
  s2 -> s1 [0, 69] { R12162 += 1, R12118 += 1 };
  s2 -> s2 [0, 65535] { R12162 += 1, R12117 += 1, R12118 += 1 };
  s2 -> s3 [70, 70] { R12162 += 1, R12118 += 1 };
  s2 -> s4 [70, 70] { R12162 += 1, R12118 += 1 };
  s2 -> s5 [75, 75] { R12162 += 1, R12118 += 1 };
  s2 -> s1 [76, 65535] { R12162 += 1, R12118 += 1 };
  s4 -> s4 [0, 70] { R12162 += 1, R12118 += 1 };
  s4 -> s7 [75, 75] { R12162 += 1, R12118 += 1 };
  s4 -> s4 [76, 65535] { R12162 += 1, R12118 += 1 };
  s5 -> s5 [0, 69] { R12162 += 1, R12118 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R12162 += 1 };
  s5 -> s7 [70, 70] { R12162 += 1, R12118 += 1 };
  s5 -> s8 [70, 70] { R12162 += 1, R12118 += 1 };
  s5 -> s5 [75, 65535] { R12162 += 1, R12118 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 70] { R12162 += 1, R12118 += 1 };
  s7 -> s7 [0, 65535] { R12162 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [75, 65535] { R12162 += 1, R12118 += 1 };
  s8 -> s8 [0, 65535] { R12162 += 1 };
  s8 -> s6 [0, 65535];
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 69] { R12164 += 1, R12120 += 1, R83 += 1 };
  s0 -> s0 [0, 65535] { R12163 += 1, R12164 += 1 };
  s0 -> s2 [0, 65535] { R12164 += 1, R12119 += 1, R12120 += 1 };
  s0 -> s3 [70, 70] { R12164 += 1, R12120 += 1, R83 += 1 };
  s0 -> s4 [70, 70] { R12164 += 1, R12120 += 1, R83 += 1 };
  s0 -> s1 [71, 65535] { R12164 += 1, R12120 += 1, R83 += 1 };
  s1 -> s1 [0, 69] { R12164 += 1, R12120 += 1, R83 += 1 };
  s1 -> s1 [0, 65535] { R12164 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [70, 70] { R12164 += 1, R12120 += 1, R83 += 1 };
  s1 -> s4 [70, 70] { R12164 += 1, R12120 += 1, R83 += 1 };
  s1 -> s1 [71, 65535] { R12164 += 1, R12120 += 1, R83 += 1 };
  s2 -> s1 [0, 69] { R12164 += 1, R12120 += 1, R83 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R12164 += 1, R12119 += 1, R12120 += 1 };
  s2 -> s3 [70, 70] { R12164 += 1, R12120 += 1, R83 += 1 };
  s2 -> s4 [70, 70] { R12164 += 1, R12120 += 1, R83 += 1 };
  s2 -> s1 [71, 65535] { R12164 += 1, R12120 += 1, R83 += 1 };
  s3 -> s3 [0, 65535] { R12164 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R12164 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R12164 += 1, R12120 += 1, R83 += 1 };
  s5 -> s5 [0, 65535] { R12164 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 69] { R12166 += 1, R12122 += 1, R85 += 1 };
  s0 -> s2 [0, 65535] { R12166 += 1, R12121 += 1, R12122 += 1 };
  s0 -> s0 [0, 65535] { R12165 += 1, R12166 += 1 };
  s0 -> s3 [70, 70] { R12166 += 1, R12122 += 1, R85 += 1 };
  s0 -> s4 [70, 70] { R12166 += 1, R12122 += 1, R85 += 1 };
  s0 -> s1 [71, 65535] { R12166 += 1, R12122 += 1, R85 += 1 };
  s1 -> s1 [0, 69] { R12166 += 1, R12122 += 1, R85 += 1 };
  s1 -> s1 [0, 65535] { R12166 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [70, 70] { R12166 += 1, R12122 += 1, R85 += 1 };
  s1 -> s4 [70, 70] { R12166 += 1, R12122 += 1, R85 += 1 };
  s1 -> s1 [71, 65535] { R12166 += 1, R12122 += 1, R85 += 1 };
  s2 -> s1 [0, 69] { R12166 += 1, R12122 += 1, R85 += 1 };
  s2 -> s2 [0, 65535] { R12166 += 1, R12121 += 1, R12122 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [70, 70] { R12166 += 1, R12122 += 1, R85 += 1 };
  s2 -> s4 [70, 70] { R12166 += 1, R12122 += 1, R85 += 1 };
  s2 -> s1 [71, 65535] { R12166 += 1, R12122 += 1, R85 += 1 };
  s3 -> s3 [0, 65535] { R12166 += 1, R12122 += 1, R85 += 1 };
  s3 -> s6 [0, 65535] { R12166 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R12166 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R12166 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 69] { R12168 += 1, R12124 += 1, R87 += 1, R88 += 1 };
  s0 -> s2 [0, 69] { R12168 += 1, R12124 += 1, R88 += 1 };
  s0 -> s3 [0, 65535] { R12168 += 1, R12123 += 1, R12124 += 1 };
  s0 -> s0 [0, 65535] { R12167 += 1, R12168 += 1 };
  s0 -> s4 [70, 70] { R12168 += 1, R12124 += 1, R88 += 1 };
  s0 -> s5 [70, 70] { R12168 += 1, R12124 += 1, R87 += 1, R88 += 1 };
  s0 -> s6 [70, 70] { R12168 += 1, R12124 += 1, R88 += 1 };
  s0 -> s7 [70, 70] { R12168 += 1, R12124 += 1, R87 += 1, R88 += 1 };
  s0 -> s2 [71, 74] { R12168 += 1, R12124 += 1, R88 += 1 };
  s0 -> s1 [71, 65535] { R12168 += 1, R12124 += 1, R87 += 1, R88 += 1 };
  s0 -> s8 [75, 75] { R12168 += 1, R12124 += 1, R88 += 1 };
  s0 -> s2 [76, 65535] { R12168 += 1, R12124 += 1, R88 += 1 };
  s1 -> s1 [0, 69] { R12168 += 1, R12124 += 1, R87 += 1, R88 += 1 };
  s1 -> s2 [0, 69] { R12168 += 1, R12124 += 1, R88 += 1 };
  s1 -> s4 [70, 70] { R12168 += 1, R12124 += 1, R88 += 1 };
  s1 -> s5 [70, 70] { R12168 += 1, R12124 += 1, R87 += 1, R88 += 1 };
  s1 -> s6 [70, 70] { R12168 += 1, R12124 += 1, R88 += 1 };
  s1 -> s7 [70, 70] { R12168 += 1, R12124 += 1, R87 += 1, R88 += 1 };
  s1 -> s2 [71, 74] { R12168 += 1, R12124 += 1, R88 += 1 };
  s1 -> s1 [71, 65535] { R12168 += 1, R12124 += 1, R87 += 1, R88 += 1 };
  s1 -> s8 [75, 75] { R12168 += 1, R12124 += 1, R88 += 1 };
  s1 -> s2 [76, 65535] { R12168 += 1, R12124 += 1, R88 += 1 };
  s2 -> s2 [0, 69] { R12168 += 1, R12124 += 1, R88 += 1 };
  s2 -> s4 [70, 70] { R12168 += 1, R12124 += 1, R88 += 1 };
  s2 -> s6 [70, 70] { R12168 += 1, R12124 += 1, R88 += 1 };
  s2 -> s2 [71, 74] { R12168 += 1, R12124 += 1, R88 += 1 };
  s2 -> s8 [75, 75] { R12168 += 1, R12124 += 1, R88 += 1 };
  s2 -> s2 [76, 65535] { R12168 += 1, R12124 += 1, R88 += 1 };
  s3 -> s1 [0, 69] { R12168 += 1, R12124 += 1, R87 += 1, R88 += 1 };
  s3 -> s2 [0, 69] { R12168 += 1, R12124 += 1, R88 += 1 };
  s3 -> s3 [0, 65535] { R12168 += 1, R12123 += 1, R12124 += 1 };
  s3 -> s4 [70, 70] { R12168 += 1, R12124 += 1, R88 += 1 };
  s3 -> s5 [70, 70] { R12168 += 1, R12124 += 1, R87 += 1, R88 += 1 };
  s3 -> s6 [70, 70] { R12168 += 1, R12124 += 1, R88 += 1 };
  s3 -> s7 [70, 70] { R12168 += 1, R12124 += 1, R87 += 1, R88 += 1 };
  s3 -> s2 [71, 74] { R12168 += 1, R12124 += 1, R88 += 1 };
  s3 -> s1 [71, 65535] { R12168 += 1, R12124 += 1, R87 += 1, R88 += 1 };
  s3 -> s8 [75, 75] { R12168 += 1, R12124 += 1, R88 += 1 };
  s3 -> s2 [76, 65535] { R12168 += 1, R12124 += 1, R88 += 1 };
  s4 -> s4 [0, 74] { R12168 += 1, R12124 += 1, R88 += 1 };
  s4 -> s11 [75, 75] { R12168 += 1, R12124 += 1, R88 += 1 };
  s4 -> s4 [76, 65535] { R12168 += 1, R12124 += 1, R88 += 1 };
  s5 -> s4 [0, 74] { R12168 += 1, R12124 += 1, R88 += 1 };
  s5 -> s5 [0, 65535] { R12168 += 1, R12124 += 1, R87 += 1, R88 += 1 };
  s5 -> s11 [75, 75] { R12168 += 1, R12124 += 1, R88 += 1 };
  s5 -> s4 [76, 65535] { R12168 += 1, R12124 += 1, R88 += 1 };
  s8 -> s8 [0, 69] { R12168 += 1, R12124 += 1, R88 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R12168 += 1 };
  s8 -> s10 [70, 70] { R12168 += 1, R12124 += 1, R88 += 1 };
  s8 -> s11 [70, 70] { R12168 += 1, R12124 += 1, R88 += 1 };
  s8 -> s8 [71, 65535] { R12168 += 1, R12124 += 1, R88 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R12168 += 1 };
  s11 -> s12 [0, 65535] { R12168 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R12168 += 1, R12124 += 1, R88 += 1 };
  s12 -> s12 [0, 65535] { R12168 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 69] { R12170 += 1, R12126 += 1, R91 += 1, R92 += 1 };
  s0 -> s2 [0, 65535] { R12170 += 1, R12125 += 1, R12126 += 1 };
  s0 -> s0 [0, 65535] { R12169 += 1, R12170 += 1 };
  s0 -> s3 [70, 70] { R12170 += 1, R12126 += 1, R91 += 1, R92 += 1 };
  s0 -> s4 [70, 70] { R12170 += 1, R12126 += 1, R91 += 1, R92 += 1 };
  s0 -> s1 [71, 65535] { R12170 += 1, R12126 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 69] { R12170 += 1, R12126 += 1, R91 += 1, R92 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R12170 += 1 };
  s1 -> s3 [70, 70] { R12170 += 1, R12126 += 1, R91 += 1, R92 += 1 };
  s1 -> s4 [70, 70] { R12170 += 1, R12126 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [71, 65535] { R12170 += 1, R12126 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [0, 69] { R12170 += 1, R12126 += 1, R91 += 1, R92 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R12170 += 1, R12125 += 1, R12126 += 1 };
  s2 -> s3 [70, 70] { R12170 += 1, R12126 += 1, R91 += 1, R92 += 1 };
  s2 -> s4 [70, 70] { R12170 += 1, R12126 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [71, 65535] { R12170 += 1, R12126 += 1, R91 += 1, R92 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R12170 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R12170 += 1, R12126 += 1, R91 += 1, R92 += 1 };
  s4 -> s6 [0, 65535] { R12170 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R12170 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 69] { R12172 += 1, R12128 += 1, R10160 += 1, R10161 += 1 };
  s0 -> s2 [0, 69] { R12172 += 1, R12128 += 1, R10159 += 1, R10160 += 1 };
  s0 -> s0 [0, 65535] { R12171 += 1, R12172 += 1 };
  s0 -> s3 [0, 65535] { R12172 += 1, R12127 += 1, R12128 += 1 };
  s0 -> s4 [70, 70] { R12172 += 1, R12128 += 1, R10159 += 1, R10160 += 1 };
  s0 -> s5 [70, 70] { R12172 += 1, R12128 += 1, R10159 += 1, R10160 += 1 };
  s0 -> s6 [70, 70] { R12172 += 1, R12128 += 1, R10160 += 1, R10161 += 1 };
  s0 -> s7 [70, 70] { R12172 += 1, R12128 += 1, R10160 += 1, R10161 += 1 };
  s0 -> s1 [71, 65535] { R12172 += 1, R12128 += 1, R10160 += 1, R10161 += 1 };
  s0 -> s2 [71, 65535] { R12172 += 1, R12128 += 1, R10159 += 1, R10160 += 1 };
  s1 -> s1 [0, 69] { R12172 += 1, R12128 += 1, R10160 += 1, R10161 += 1 };
  s1 -> s11 [0, 69] { R12172 += 1, R12128 += 1 };
  s1 -> s12 [70, 70] { R12172 += 1, R12128 += 1 };
  s1 -> s6 [70, 70] { R12172 += 1, R12128 += 1, R10160 += 1, R10161 += 1 };
  s1 -> s8 [70, 70] { R12172 += 1, R12128 += 1 };
  s1 -> s7 [70, 70] { R12172 += 1, R12128 += 1, R10160 += 1, R10161 += 1 };
  s1 -> s1 [71, 65535] { R12172 += 1, R12128 += 1, R10160 += 1, R10161 += 1 };
  s1 -> s11 [71, 65535] { R12172 += 1, R12128 += 1 };
  s2 -> s1 [0, 69] { R12172 += 1, R12128 += 1, R10160 += 1, R10161 += 1 };
  s2 -> s2 [0, 69] { R12172 += 1, R12128 += 1, R10159 += 1, R10160 += 1 };
  s2 -> s4 [70, 70] { R12172 += 1, R12128 += 1, R10159 += 1, R10160 += 1 };
  s2 -> s5 [70, 70] { R12172 += 1, R12128 += 1, R10159 += 1, R10160 += 1 };
  s2 -> s6 [70, 70] { R12172 += 1, R12128 += 1, R10160 += 1, R10161 += 1 };
  s2 -> s7 [70, 70] { R12172 += 1, R12128 += 1, R10160 += 1, R10161 += 1 };
  s2 -> s1 [71, 65535] { R12172 += 1, R12128 += 1, R10160 += 1, R10161 += 1 };
  s2 -> s2 [71, 65535] { R12172 += 1, R12128 += 1, R10159 += 1, R10160 += 1 };
  s3 -> s1 [0, 69] { R12172 += 1, R12128 += 1, R10160 += 1, R10161 += 1 };
  s3 -> s2 [0, 69] { R12172 += 1, R12128 += 1, R10159 += 1, R10160 += 1 };
  s3 -> s3 [0, 65535] { R12172 += 1, R12127 += 1, R12128 += 1 };
  s3 -> s4 [70, 70] { R12172 += 1, R12128 += 1, R10159 += 1, R10160 += 1 };
  s3 -> s5 [70, 70] { R12172 += 1, R12128 += 1, R10159 += 1, R10160 += 1 };
  s3 -> s6 [70, 70] { R12172 += 1, R12128 += 1, R10160 += 1, R10161 += 1 };
  s3 -> s7 [70, 70] { R12172 += 1, R12128 += 1, R10160 += 1, R10161 += 1 };
  s3 -> s1 [71, 65535] { R12172 += 1, R12128 += 1, R10160 += 1, R10161 += 1 };
  s3 -> s2 [71, 65535] { R12172 += 1, R12128 += 1, R10159 += 1, R10160 += 1 };
  s5 -> s5 [0, 65535] { R12172 += 1, R12128 += 1, R10159 += 1, R10160 += 1 };
  s5 -> s7 [0, 65535] { R12172 += 1, R12128 += 1, R10160 += 1, R10161 += 1 };
  s7 -> s8 [0, 65535] { R12172 += 1, R12128 += 1 };
  s7 -> s7 [0, 65535] { R12172 += 1, R12128 += 1, R10160 += 1, R10161 += 1 };
  s8 -> s9 [0, 65535] { R12172 += 1 };
  s8 -> s8 [0, 65535] { R12172 += 1, R12128 += 1 };
  s8 -> s10 [0, 65535];
  s9 -> s9 [0, 65535] { R12172 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s11 [0, 69] { R12172 += 1, R12128 += 1 };
  s11 -> s11 [0, 65535] { R12172 += 1 };
  s11 -> s10 [0, 65535];
  s11 -> s12 [70, 70] { R12172 += 1, R12128 += 1 };
  s11 -> s8 [70, 70] { R12172 += 1, R12128 += 1 };
  s11 -> s11 [71, 65535] { R12172 += 1, R12128 += 1 };
  s12 -> s12 [0, 65535] { R12172 += 1 };
  s12 -> s10 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 69] { R12174 += 1, R12130 += 1, R11839 += 1, R11840 += 1 };
  s0 -> s2 [0, 65535] { R12174 += 1, R12129 += 1, R12130 += 1 };
  s0 -> s0 [0, 65535] { R12173 += 1, R12174 += 1 };
  s0 -> s3 [70, 70] { R12174 += 1, R12130 += 1, R11839 += 1, R11840 += 1 };
  s0 -> s4 [70, 70] { R12174 += 1, R12130 += 1, R11839 += 1, R11840 += 1 };
  s0 -> s1 [71, 65535] { R12174 += 1, R12130 += 1, R11839 += 1, R11840 += 1 };
  s1 -> s1 [0, 69] { R12174 += 1, R12130 += 1, R11839 += 1, R11840 += 1 };
  s1 -> s1 [0, 65535] { R12174 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [70, 70] { R12174 += 1, R12130 += 1, R11839 += 1, R11840 += 1 };
  s1 -> s4 [70, 70] { R12174 += 1, R12130 += 1, R11839 += 1, R11840 += 1 };
  s1 -> s1 [71, 65535] { R12174 += 1, R12130 += 1, R11839 += 1, R11840 += 1 };
  s2 -> s1 [0, 69] { R12174 += 1, R12130 += 1, R11839 += 1, R11840 += 1 };
  s2 -> s2 [0, 65535] { R12174 += 1, R12129 += 1, R12130 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [70, 70] { R12174 += 1, R12130 += 1, R11839 += 1, R11840 += 1 };
  s2 -> s4 [70, 70] { R12174 += 1, R12130 += 1, R11839 += 1, R11840 += 1 };
  s2 -> s1 [71, 65535] { R12174 += 1, R12130 += 1, R11839 += 1, R11840 += 1 };
  s3 -> s6 [0, 65535] { R12174 += 1 };
  s3 -> s3 [0, 65535] { R12174 += 1, R12130 += 1, R11839 += 1, R11840 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R12174 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R12174 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 69] { R12176 += 1, R12132 += 1, R12067 += 1, R12068 += 1 };
  s0 -> s2 [0, 65535] { R12176 += 1, R12131 += 1, R12132 += 1 };
  s0 -> s0 [0, 65535] { R12175 += 1, R12176 += 1 };
  s0 -> s3 [70, 70] { R12176 += 1, R12132 += 1, R12067 += 1, R12068 += 1 };
  s0 -> s4 [70, 70] { R12176 += 1, R12132 += 1, R12067 += 1, R12068 += 1 };
  s0 -> s1 [71, 65535] { R12176 += 1, R12132 += 1, R12067 += 1, R12068 += 1 };
  s1 -> s1 [0, 69] { R12176 += 1, R12132 += 1, R12067 += 1, R12068 += 1 };
  s1 -> s1 [0, 65535] { R12176 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [70, 70] { R12176 += 1, R12132 += 1, R12067 += 1, R12068 += 1 };
  s1 -> s4 [70, 70] { R12176 += 1, R12132 += 1, R12067 += 1, R12068 += 1 };
  s1 -> s1 [71, 65535] { R12176 += 1, R12132 += 1, R12067 += 1, R12068 += 1 };
  s2 -> s1 [0, 69] { R12176 += 1, R12132 += 1, R12067 += 1, R12068 += 1 };
  s2 -> s2 [0, 65535] { R12176 += 1, R12131 += 1, R12132 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [70, 70] { R12176 += 1, R12132 += 1, R12067 += 1, R12068 += 1 };
  s2 -> s4 [70, 70] { R12176 += 1, R12132 += 1, R12067 += 1, R12068 += 1 };
  s2 -> s1 [71, 65535] { R12176 += 1, R12132 += 1, R12067 += 1, R12068 += 1 };
  s3 -> s6 [0, 65535] { R12176 += 1 };
  s3 -> s3 [0, 65535] { R12176 += 1, R12132 += 1, R12067 += 1, R12068 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R12176 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R12176 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [102, 102];
  accepting s1;
};
};
constraint R2 = R12094 && R3 = R12176 && R23 - R12176 = -1 && R24 = R12176 && R25 - R12176 = -1 && R26 = R12176 && R27 = 0 && R28 = 1 && R29 = 0 && R30 = 1 && R45 + R84 + R83 + -1*R11844 + -1*R11840 - R66 = 0 && R49 + R89 + R87 = 0 && R50 + R90 + R88 + -1*R11844 + -1*R11840 - R66 = 0 && R55 + R96 + R93 + -1*R11846 + -1*R11842 - R68 = 0 && R65 + R11843 + R11839 = 0 && R67 + R11845 + R11841 = 0 && R12093 = 0 && R12117 = 0 && R12118 = 0 && R12123 = 0 && R12124 = 0 && R12127 = 0 && R12128 = 0 && R12133 = 0 && R12134 = R12176 && R12135 = 0 && R12136 = R12176 && R12137 = 0 && R12138 = R12176 && R12139 = 0 && R12140 = R12176 && R12141 = 0 && R12142 = R12176 && R12143 = 0 && R12144 = R12176 && R12145 = 0 && R12146 = R12176 && R12147 = 0 && R12148 = R12176 && R12149 = 0 && R12150 = R12176 && R12151 = 0 && R12152 = R12176 && R12153 = 0 && R12154 = R12176 && R12155 = 0 && R12156 = R12176 && R12157 = 0 && R12158 = R12176 && R12159 = 0 && R12160 = R12176 && R12161 = 0 && R12162 = R12176 && R12163 = 0 && R12164 = R12176 && R12165 = 0 && R12166 = R12176 && R12167 = 0 && R12168 = R12176 && R12169 = 0 && R12170 = R12176 && R12171 = 0 && R12172 = R12176 && R12173 = 0 && R12174 = R12176 && R12175 = 0 && R12 < 1 && R15 < 1 && R16 < 1 && R47 + R86 + R85 < 1 && R61 + R10164 + R10161 < 1 && -1*R11844 + -1*R11840 - R66 < 1 && -1*R11846 + -1*R11842 - R68 < 1 && -1 < R12094 && 0 < R12176 && (R53 + R94 + R91 != 0 || R54 + R95 + R92 + -1*R11844 + -1*R11840 - R66 = 0 || R66 + R11844 + R11840 < 1) && (R59 + R10162 + R10159 != 0 || R60 + R10163 + R10160 + -1*R11844 + -1*R11840 - R66 = 0 || R66 + R11844 + R11840 < 1) && (R66 + R11844 + R11840 != 0 || ((R53 + R94 + R91 != 0 || R54 + R95 + R92 = 0 || R68 + R11846 + R11842 < 1) && (R53 + R94 + R91 = 0 || R68 + R11846 + R11842 < 1))) && (R66 + R11844 + R11840 != 0 || ((R59 + R10162 + R10159 != 0 || R60 + R10163 + R10160 = 0 || R68 + R11846 + R11842 < 1) && (R59 + R10162 + R10159 = 0 || R68 + R11846 + R11842 < 1))) && (R66 + R11844 + R11840 != 0 || ((R73 + R12072 + R12067 != 0 || R74 + R12073 + R12068 = 0 || R68 + R11846 + R11842 < 1) && (R73 + R12072 + R12067 = 0 || R68 + R11846 + R11842 < 1))) && (R68 + R11846 + R11842 != 0 || R77 + R12076 + R12071 = 0 || (R75 + R12074 + R12069 = 0 && R76 + R12075 + R12070 = 0)) && (R73 + R12072 + R12067 != 0 || R66 + R11844 + R11840 + -1*R12073 + -1*R12068 - R74 = 0 || R66 + R11844 + R11840 < 1) && (R75 + R12074 + R12069 != 0 || R68 + R11846 + R11842 + -1*R12075 + -1*R12070 - R76 = 0 || R68 + R11846 + R11842 < 1) && (R12077 != 0 || R12078 = R12094 || (R20 = 0 && R12094 = 0)) && (R12079 != 0 || R12080 = R12094 || (R20 = 0 && R12094 = 0)) && (R12081 != 0 || R12082 = R12094 || (R20 = 0 && R12094 = 0)) && (R12083 != 0 || R12084 = R12094 || (R20 = 0 && R12094 = 0)) && (R12085 != 0 || R12086 = R12094 || (R20 = 0 && R12094 = 0)) && (R12087 != 0 || R12088 = R12094 || (R20 = 0 && R12094 = 0)) && (R12089 != 0 || R12090 = R12094 || (R20 = 0 && R12094 = 0)) && (R12091 != 0 || R12092 = R12094 || (R20 = 0 && R12094 = 0)) && (R12095 != 0 || R12094 = R12096 || (R20 = 0 && R12094 = 0)) && (R21 = 0 || (R12115 = 0 && R12116 = 0)) && (R21 = 0 || (R12119 = 0 && R12120 = 0)) && (R21 = 0 || (R12121 = 0 && R12122 = 0)) && (R21 = 0 || (R12125 = 0 && R12126 = 0)) && (R21 = 0 || (R12129 = 0 && R12130 = 0)) && (R21 = 0 || (R12131 = 0 && R12132 = 0)) && (R22 = 0 || (R12097 = 0 && R12098 = 0)) && (R22 = 0 || (R12099 = 0 && R12100 = 0)) && (R22 = 0 || (R12101 = 0 && R12102 = 0)) && (R22 = 0 || (R12103 = 0 && R12104 = 0)) && (R22 = 0 || (R12105 = 0 && R12106 = 0)) && (R22 = 0 || (R12107 = 0 && R12108 = 0)) && (R22 = 0 || (R12109 = 0 && R12110 = 0)) && (R22 = 0 || (R12111 = 0 && R12112 = 0)) && (R22 = 0 || (R12113 = 0 && R12114 = 0)) && (R53 + R94 + R91 = 0 || R66 + R11844 + R11840 < 1) && (R59 + R10162 + R10159 = 0 || R66 + R11844 + R11840 < 1) && (R73 + R12072 + R12067 = 0 || R66 + R11844 + R11840 < 1) && (R75 + R12074 + R12069 = 0 || R68 + R11846 + R11842 < 1) && (R12077 = 0 || (R20 = 0 && R12094 = 0)) && (R12079 = 0 || (R20 = 0 && R12094 = 0)) && (R12081 = 0 || (R20 = 0 && R12094 = 0)) && (R12083 = 0 || (R20 = 0 && R12094 = 0)) && (R12085 = 0 || (R20 = 0 && R12094 = 0)) && (R12087 = 0 || (R20 = 0 && R12094 = 0)) && (R12089 = 0 || (R20 = 0 && R12094 = 0)) && (R12091 = 0 || (R20 = 0 && R12094 = 0)) && (R12095 = 0 || (R20 = 0 && R12094 = 0));
// End of Parikh automata intersection problem
