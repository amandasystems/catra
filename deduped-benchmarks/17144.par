// Parikh automata intersection problem, generated by OSTRICH+
counter int R10159, R10160, R10161, R10162, R10163, R10164, R12, R12397, R12398, R12399, R12400, R12401, R12402, R12403, R12404, R12735, R12736, R12737, R12738, R12739, R12740, R12741, R12742, R12743, R12744, R12745, R12746, R12747, R12748, R12749, R12750, R12751, R12752, R12753, R12754, R12755, R12756, R12757, R12758, R12759, R12760, R12761, R12762, R12763, R12764, R12765, R12766, R12767, R12768, R12769, R12770, R12771, R12772, R12773, R12774, R12775, R12776, R12777, R12778, R12779, R12780, R12781, R12782, R12783, R12784, R12785, R12786, R12787, R12788, R12789, R12790, R12791, R12792, R12793, R12794, R12795, R12796, R12797, R12798, R12799, R12800, R12801, R12802, R12803, R12804, R12805, R12806, R12807, R12808, R12809, R12810, R12811, R12812, R12813, R12814, R12815, R12816, R12817, R12818, R12819, R12820, R12821, R12822, R12823, R12824, R12825, R12826, R12827, R12828, R12829, R12830, R12831, R12832, R12833, R12834, R12835, R12836, R12837, R12838, R12839, R12840, R12841, R12842, R12843, R12844, R15, R16, R2, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R4, R45, R47, R49, R5, R50, R53, R54, R55, R59, R60, R61, R65, R66, R67, R68, R73, R74, R75, R76, R77, R83, R84, R85, R86, R87, R88, R89, R90, R91, R92, R93, R94, R95, R96;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [70, 70];
  s0 -> s0 [71, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [70, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R15 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 69];
  s0 -> s0 [0, 65535] { R16 += 1 };
  s0 -> s2 [70, 70];
  s0 -> s1 [71, 65535];
  s1 -> s1 [0, 69];
  s1 -> s2 [70, 70];
  s1 -> s1 [71, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R24 += 1 };
  s0 -> s0 [0, 65535] { R23 += 1, R24 += 1 };
  s0 -> s2 [9, 13] { R24 += 1 };
  s0 -> s1 [14, 31] { R24 += 1 };
  s0 -> s2 [32, 32] { R24 += 1 };
  s0 -> s1 [33, 65535] { R24 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R24 += 1 };
  s2 -> s1 [0, 65535] { R24 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R25 += 1, R26 += 1 };
  s1 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R28 += 1 };
  s0 -> s0 [0, 65535] { R27 += 1, R28 += 1 };
  s0 -> s2 [9, 13] { R28 += 1 };
  s0 -> s1 [14, 31] { R28 += 1 };
  s0 -> s2 [32, 32] { R28 += 1 };
  s0 -> s1 [33, 65535] { R28 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R28 += 1 };
  s2 -> s1 [0, 65535] { R28 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R29 += 1, R30 += 1 };
  s1 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R12765 += 1, R12766 += 1 };
  s0 -> s1 [0, 65535] { R12766 += 1, R22 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R12766 += 1, R22 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 69] { R12768 += 1 };
  s0 -> s0 [0, 65535] { R12767 += 1, R12768 += 1 };
  s0 -> s2 [70, 70] { R12768 += 1 };
  s0 -> s3 [70, 70] { R12768 += 1 };
  s0 -> s1 [76, 65535] { R12768 += 1 };
  s1 -> s1 [0, 69] { R12768 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R12768 += 1 };
  s1 -> s3 [70, 70] { R12768 += 1 };
  s1 -> s1 [76, 65535] { R12768 += 1 };
  s2 -> s2 [0, 70] { R12768 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [76, 65535] { R12768 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 69] { R12770 += 1, R45 += 1 };
  s0 -> s0 [0, 65535] { R12769 += 1, R12770 += 1 };
  s0 -> s2 [70, 70] { R12770 += 1, R45 += 1 };
  s0 -> s3 [70, 70] { R12770 += 1, R45 += 1 };
  s0 -> s1 [71, 65535] { R12770 += 1, R45 += 1 };
  s1 -> s1 [0, 69] { R12770 += 1, R45 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R12770 += 1, R45 += 1 };
  s1 -> s3 [70, 70] { R12770 += 1, R45 += 1 };
  s1 -> s1 [71, 65535] { R12770 += 1, R45 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R12770 += 1, R45 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 69] { R12772 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R12771 += 1, R12772 += 1 };
  s0 -> s2 [70, 70] { R12772 += 1, R47 += 1 };
  s0 -> s3 [70, 70] { R12772 += 1, R47 += 1 };
  s0 -> s1 [71, 65535] { R12772 += 1, R47 += 1 };
  s1 -> s1 [0, 69] { R12772 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R12772 += 1, R47 += 1 };
  s1 -> s3 [70, 70] { R12772 += 1, R47 += 1 };
  s1 -> s1 [71, 65535] { R12772 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R12772 += 1, R47 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 69] { R12774 += 1, R49 += 1, R50 += 1 };
  s0 -> s0 [0, 65535] { R12773 += 1, R12774 += 1 };
  s0 -> s2 [70, 70] { R12774 += 1, R49 += 1, R50 += 1 };
  s0 -> s3 [70, 70] { R12774 += 1, R49 += 1, R50 += 1 };
  s0 -> s1 [71, 65535] { R12774 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 69] { R12774 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R12774 += 1, R49 += 1, R50 += 1 };
  s1 -> s3 [70, 70] { R12774 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [71, 65535] { R12774 += 1, R49 += 1, R50 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R12774 += 1, R49 += 1, R50 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 69] { R12776 += 1, R53 += 1, R54 += 1 };
  s0 -> s0 [0, 65535] { R12775 += 1, R12776 += 1 };
  s0 -> s2 [70, 70] { R12776 += 1, R53 += 1, R54 += 1 };
  s0 -> s3 [70, 70] { R12776 += 1, R53 += 1, R54 += 1 };
  s0 -> s1 [71, 65535] { R12776 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 69] { R12776 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R12776 += 1, R53 += 1, R54 += 1 };
  s1 -> s3 [70, 70] { R12776 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [71, 65535] { R12776 += 1, R53 += 1, R54 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R12776 += 1, R53 += 1, R54 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 69] { R12778 += 1, R59 += 1, R60 += 1 };
  s0 -> s0 [0, 65535] { R12777 += 1, R12778 += 1 };
  s0 -> s2 [70, 70] { R12778 += 1, R59 += 1, R60 += 1 };
  s0 -> s3 [70, 70] { R12778 += 1, R59 += 1, R60 += 1 };
  s0 -> s1 [71, 65535] { R12778 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 69] { R12778 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R12778 += 1, R59 += 1, R60 += 1 };
  s1 -> s3 [70, 70] { R12778 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [71, 65535] { R12778 += 1, R59 += 1, R60 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R12778 += 1, R59 += 1, R60 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 69] { R12780 += 1, R65 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R12779 += 1, R12780 += 1 };
  s0 -> s2 [70, 70] { R12780 += 1, R65 += 1, R66 += 1 };
  s0 -> s3 [70, 70] { R12780 += 1, R65 += 1, R66 += 1 };
  s0 -> s1 [71, 65535] { R12780 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 69] { R12780 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R12780 += 1, R65 += 1, R66 += 1 };
  s1 -> s3 [70, 70] { R12780 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [71, 65535] { R12780 += 1, R65 += 1, R66 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R12780 += 1, R65 += 1, R66 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 69] { R12782 += 1, R73 += 1, R74 += 1 };
  s0 -> s0 [0, 65535] { R12781 += 1, R12782 += 1 };
  s0 -> s2 [70, 70] { R12782 += 1, R73 += 1, R74 += 1 };
  s0 -> s3 [70, 70] { R12782 += 1, R73 += 1, R74 += 1 };
  s0 -> s1 [71, 65535] { R12782 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 69] { R12782 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R12782 += 1, R73 += 1, R74 += 1 };
  s1 -> s3 [70, 70] { R12782 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [71, 65535] { R12782 += 1, R73 += 1, R74 += 1 };
  s2 -> s2 [0, 65535] { R12782 += 1, R73 += 1, R74 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 69] { R12802 += 1 };
  s0 -> s0 [0, 65535] { R12801 += 1, R12802 += 1 };
  s0 -> s2 [70, 70] { R12802 += 1 };
  s0 -> s1 [71, 65535] { R12802 += 1 };
  s1 -> s1 [0, 69] { R12802 += 1 };
  s1 -> s2 [70, 70] { R12802 += 1 };
  s1 -> s1 [71, 65535] { R12802 += 1 };
  s2 -> s2 [0, 65535] { R12802 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R12803 += 1, R12804 += 1 };
  s0 -> s1 [0, 65535] { R12804 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R12804 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 69] { R12806 += 1 };
  s0 -> s0 [0, 65535] { R12805 += 1, R12806 += 1 };
  s0 -> s2 [0, 65535] { R12806 += 1, R12 += 1 };
  s0 -> s3 [70, 70] { R12806 += 1 };
  s0 -> s1 [71, 65535] { R12806 += 1 };
  s1 -> s1 [0, 69] { R12806 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [70, 70] { R12806 += 1 };
  s1 -> s1 [71, 65535] { R12806 += 1 };
  s2 -> s1 [0, 69] { R12806 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R12806 += 1, R12 += 1 };
  s2 -> s3 [70, 70] { R12806 += 1 };
  s2 -> s1 [71, 65535] { R12806 += 1 };
  s3 -> s3 [0, 65535] { R12806 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 69] { R12808 += 1, R12746 += 1 };
  s0 -> s2 [0, 65535] { R12808 += 1, R12745 += 1, R12746 += 1 };
  s0 -> s0 [0, 65535] { R12807 += 1, R12808 += 1 };
  s0 -> s1 [71, 65535] { R12808 += 1, R12746 += 1 };
  s1 -> s1 [0, 69] { R12808 += 1, R12746 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R12808 += 1 };
  s1 -> s1 [71, 65535] { R12808 += 1, R12746 += 1 };
  s2 -> s1 [0, 69] { R12808 += 1, R12746 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R12808 += 1, R12745 += 1, R12746 += 1 };
  s2 -> s1 [71, 65535] { R12808 += 1, R12746 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R12810 += 1, R12747 += 1, R12748 += 1 };
  s0 -> s0 [0, 65535] { R12809 += 1, R12810 += 1 };
  s0 -> s2 [0, 65535] { R12810 += 1, R12748 += 1, R20 += 1 };
  s1 -> s1 [0, 65535] { R12810 += 1, R12747 += 1, R12748 += 1 };
  s1 -> s2 [0, 65535] { R12810 += 1, R12748 += 1, R20 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R12810 += 1, R12748 += 1, R20 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R12810 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R12810 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 70] { R12812 += 1, R12750 += 1 };
  s0 -> s0 [0, 65535] { R12811 += 1, R12812 += 1 };
  s0 -> s2 [0, 65535] { R12812 += 1, R12749 += 1, R12750 += 1 };
  s0 -> s1 [75, 65535] { R12812 += 1, R12750 += 1 };
  s1 -> s1 [0, 70] { R12812 += 1, R12750 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R12812 += 1 };
  s1 -> s1 [75, 65535] { R12812 += 1, R12750 += 1 };
  s2 -> s1 [0, 70] { R12812 += 1, R12750 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R12812 += 1, R12749 += 1, R12750 += 1 };
  s2 -> s1 [75, 65535] { R12812 += 1, R12750 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R12814 += 1, R12751 += 1, R12752 += 1 };
  s0 -> s0 [0, 65535] { R12813 += 1, R12814 += 1 };
  s0 -> s2 [0, 65535] { R12814 += 1, R12752 += 1, R84 += 1 };
  s1 -> s1 [0, 65535] { R12814 += 1, R12751 += 1, R12752 += 1 };
  s1 -> s2 [0, 65535] { R12814 += 1, R12752 += 1, R84 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R12814 += 1, R12752 += 1, R84 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R12814 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R12814 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 74] { R12816 += 1, R12754 += 1 };
  s0 -> s0 [0, 65535] { R12815 += 1, R12816 += 1 };
  s0 -> s2 [0, 65535] { R12816 += 1, R12753 += 1, R12754 += 1 };
  s0 -> s3 [0, 65535] { R12816 += 1, R12754 += 1, R86 += 1 };
  s0 -> s1 [76, 65535] { R12816 += 1, R12754 += 1 };
  s1 -> s1 [0, 74] { R12816 += 1, R12754 += 1 };
  s1 -> s1 [0, 65535] { R12816 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [76, 65535] { R12816 += 1, R12754 += 1 };
  s2 -> s1 [0, 74] { R12816 += 1, R12754 += 1 };
  s2 -> s2 [0, 65535] { R12816 += 1, R12753 += 1, R12754 += 1 };
  s2 -> s3 [0, 65535] { R12816 += 1, R12754 += 1, R86 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [76, 65535] { R12816 += 1, R12754 += 1 };
  s3 -> s1 [0, 74] { R12816 += 1, R12754 += 1 };
  s3 -> s4 [0, 65535] { R12816 += 1 };
  s3 -> s3 [0, 65535] { R12816 += 1, R12754 += 1, R86 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [76, 65535] { R12816 += 1, R12754 += 1 };
  s4 -> s4 [0, 65535] { R12816 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 65535] { R12818 += 1, R12756 += 1 };
  s0 -> s0 [0, 65535] { R12817 += 1, R12818 += 1 };
  s0 -> s2 [0, 65535] { R12818 += 1, R12756 += 1, R90 += 1 };
  s0 -> s3 [0, 65535] { R12818 += 1, R12755 += 1, R12756 += 1 };
  s1 -> s1 [0, 65535] { R12818 += 1, R12756 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R12818 += 1 };
  s2 -> s1 [0, 65535] { R12818 += 1, R12756 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R12818 += 1, R12756 += 1, R90 += 1 };
  s2 -> s5 [0, 65535] { R12818 += 1 };
  s3 -> s1 [0, 65535] { R12818 += 1, R12756 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R12818 += 1, R12756 += 1, R90 += 1 };
  s3 -> s3 [0, 65535] { R12818 += 1, R12755 += 1, R12756 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R12818 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R12820 += 1, R12758 += 1, R94 += 1, R95 += 1 };
  s0 -> s2 [0, 65535] { R12820 += 1, R12757 += 1, R12758 += 1 };
  s0 -> s3 [0, 65535] { R12820 += 1, R12758 += 1, R95 += 1, R96 += 1 };
  s0 -> s0 [0, 65535] { R12819 += 1, R12820 += 1 };
  s1 -> s1 [0, 65535] { R12820 += 1, R12758 += 1, R94 += 1, R95 += 1 };
  s1 -> s3 [0, 65535] { R12820 += 1, R12758 += 1, R95 += 1, R96 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R12820 += 1 };
  s2 -> s1 [0, 65535] { R12820 += 1, R12758 += 1, R94 += 1, R95 += 1 };
  s2 -> s2 [0, 65535] { R12820 += 1, R12757 += 1, R12758 += 1 };
  s2 -> s3 [0, 65535] { R12820 += 1, R12758 += 1, R95 += 1, R96 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s4 [0, 65535] { R12820 += 1, R12758 += 1 };
  s3 -> s3 [0, 65535] { R12820 += 1, R12758 += 1, R95 += 1, R96 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R12820 += 1 };
  s4 -> s4 [0, 65535] { R12820 += 1, R12758 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R12820 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R12820 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 65535] { R12822 += 1, R12759 += 1, R12760 += 1 };
  s0 -> s0 [0, 65535] { R12821 += 1, R12822 += 1 };
  s0 -> s2 [0, 65535] { R12822 += 1, R12760 += 1 };
  s1 -> s1 [0, 65535] { R12822 += 1, R12759 += 1, R12760 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R12822 += 1, R12760 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R12822 += 1, R12760 += 1 };
  s2 -> s4 [0, 65535] { R12822 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R12822 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 74] { R12824 += 1, R12762 += 1, R12402 += 1, R12404 += 1 };
  s0 -> s2 [0, 65535] { R12824 += 1, R12761 += 1, R12762 += 1 };
  s0 -> s0 [0, 65535] { R12823 += 1, R12824 += 1 };
  s0 -> s3 [75, 75] { R12824 += 1, R12762 += 1, R12402 += 1, R12404 += 1 };
  s0 -> s1 [76, 65535] { R12824 += 1, R12762 += 1, R12402 += 1, R12404 += 1 };
  s1 -> s1 [0, 74] { R12824 += 1, R12762 += 1, R12402 += 1, R12404 += 1 };
  s1 -> s3 [75, 75] { R12824 += 1, R12762 += 1, R12402 += 1, R12404 += 1 };
  s1 -> s1 [76, 65535] { R12824 += 1, R12762 += 1, R12402 += 1, R12404 += 1 };
  s2 -> s1 [0, 74] { R12824 += 1, R12762 += 1, R12402 += 1, R12404 += 1 };
  s2 -> s2 [0, 65535] { R12824 += 1, R12761 += 1, R12762 += 1 };
  s2 -> s3 [75, 75] { R12824 += 1, R12762 += 1, R12402 += 1, R12404 += 1 };
  s2 -> s1 [76, 65535] { R12824 += 1, R12762 += 1, R12402 += 1, R12404 += 1 };
  s3 -> s4 [0, 65535] { R12824 += 1 };
  s3 -> s5 [0, 65535] { R12824 += 1, R12762 += 1, R12402 += 1 };
  s3 -> s3 [0, 65535] { R12824 += 1, R12762 += 1, R12402 += 1, R12404 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s7 [0, 65535] { R12824 += 1, R12762 += 1 };
  s4 -> s4 [0, 65535] { R12824 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s4 [0, 65535] { R12824 += 1 };
  s5 -> s5 [0, 65535] { R12824 += 1, R12762 += 1, R12402 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R12824 += 1, R12762 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s4 [0, 65535] { R12824 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R12824 += 1, R12762 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 65535] { R12826 += 1, R12764 += 1, R12741 += 1, R12743 += 1, R12744 += 1 };
  s0 -> s0 [0, 65535] { R12825 += 1, R12826 += 1 };
  s0 -> s2 [0, 65535] { R12826 += 1, R12764 += 1, R12741 += 1 };
  s0 -> s3 [0, 65535] { R12826 += 1, R12763 += 1, R12764 += 1 };
  s0 -> s4 [0, 65535] { R12826 += 1, R12764 += 1 };
  s1 -> s1 [0, 65535] { R12826 += 1, R12764 += 1, R12741 += 1, R12743 += 1, R12744 += 1 };
  s1 -> s5 [0, 65535] { R12826 += 1 };
  s1 -> s2 [0, 65535] { R12826 += 1, R12764 += 1, R12741 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s4 [0, 65535] { R12826 += 1, R12764 += 1 };
  s2 -> s5 [0, 65535] { R12826 += 1 };
  s2 -> s2 [0, 65535] { R12826 += 1, R12764 += 1, R12741 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s4 [0, 65535] { R12826 += 1, R12764 += 1 };
  s3 -> s1 [0, 65535] { R12826 += 1, R12764 += 1, R12741 += 1, R12743 += 1, R12744 += 1 };
  s3 -> s2 [0, 65535] { R12826 += 1, R12764 += 1, R12741 += 1 };
  s3 -> s3 [0, 65535] { R12826 += 1, R12763 += 1, R12764 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s4 [0, 65535] { R12826 += 1, R12764 += 1 };
  s4 -> s5 [0, 65535] { R12826 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R12826 += 1, R12764 += 1 };
  s5 -> s5 [0, 65535] { R12826 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R12828 += 1, R12784 += 1, R21 += 1 };
  s0 -> s2 [0, 65535] { R12828 += 1, R12783 += 1, R12784 += 1 };
  s0 -> s0 [0, 65535] { R12827 += 1, R12828 += 1 };
  s1 -> s1 [0, 65535] { R12828 += 1, R12784 += 1, R21 += 1 };
  s1 -> s4 [0, 65535] { R12828 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R12828 += 1, R12784 += 1, R21 += 1 };
  s2 -> s2 [0, 65535] { R12828 += 1, R12783 += 1, R12784 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R12828 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 69] { R12830 += 1, R12786 += 1 };
  s0 -> s0 [0, 65535] { R12829 += 1, R12830 += 1 };
  s0 -> s2 [0, 65535] { R12830 += 1, R12785 += 1, R12786 += 1 };
  s0 -> s3 [70, 70] { R12830 += 1, R12786 += 1 };
  s0 -> s4 [70, 70] { R12830 += 1, R12786 += 1 };
  s0 -> s5 [75, 75] { R12830 += 1, R12786 += 1 };
  s0 -> s1 [76, 65535] { R12830 += 1, R12786 += 1 };
  s1 -> s1 [0, 69] { R12830 += 1, R12786 += 1 };
  s1 -> s3 [70, 70] { R12830 += 1, R12786 += 1 };
  s1 -> s4 [70, 70] { R12830 += 1, R12786 += 1 };
  s1 -> s5 [75, 75] { R12830 += 1, R12786 += 1 };
  s1 -> s1 [76, 65535] { R12830 += 1, R12786 += 1 };
  s2 -> s1 [0, 69] { R12830 += 1, R12786 += 1 };
  s2 -> s2 [0, 65535] { R12830 += 1, R12785 += 1, R12786 += 1 };
  s2 -> s3 [70, 70] { R12830 += 1, R12786 += 1 };
  s2 -> s4 [70, 70] { R12830 += 1, R12786 += 1 };
  s2 -> s5 [75, 75] { R12830 += 1, R12786 += 1 };
  s2 -> s1 [76, 65535] { R12830 += 1, R12786 += 1 };
  s3 -> s3 [0, 70] { R12830 += 1, R12786 += 1 };
  s3 -> s7 [75, 75] { R12830 += 1, R12786 += 1 };
  s3 -> s3 [76, 65535] { R12830 += 1, R12786 += 1 };
  s5 -> s5 [0, 69] { R12830 += 1, R12786 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R12830 += 1 };
  s5 -> s7 [70, 70] { R12830 += 1, R12786 += 1 };
  s5 -> s8 [70, 70] { R12830 += 1, R12786 += 1 };
  s5 -> s5 [75, 65535] { R12830 += 1, R12786 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 70] { R12830 += 1, R12786 += 1 };
  s7 -> s7 [0, 65535] { R12830 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [75, 65535] { R12830 += 1, R12786 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R12830 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 69] { R12832 += 1, R12788 += 1, R83 += 1 };
  s0 -> s0 [0, 65535] { R12831 += 1, R12832 += 1 };
  s0 -> s2 [0, 65535] { R12832 += 1, R12787 += 1, R12788 += 1 };
  s0 -> s3 [70, 70] { R12832 += 1, R12788 += 1, R83 += 1 };
  s0 -> s4 [70, 70] { R12832 += 1, R12788 += 1, R83 += 1 };
  s0 -> s1 [71, 65535] { R12832 += 1, R12788 += 1, R83 += 1 };
  s1 -> s1 [0, 69] { R12832 += 1, R12788 += 1, R83 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R12832 += 1 };
  s1 -> s3 [70, 70] { R12832 += 1, R12788 += 1, R83 += 1 };
  s1 -> s4 [70, 70] { R12832 += 1, R12788 += 1, R83 += 1 };
  s1 -> s1 [71, 65535] { R12832 += 1, R12788 += 1, R83 += 1 };
  s2 -> s1 [0, 69] { R12832 += 1, R12788 += 1, R83 += 1 };
  s2 -> s2 [0, 65535] { R12832 += 1, R12787 += 1, R12788 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [70, 70] { R12832 += 1, R12788 += 1, R83 += 1 };
  s2 -> s4 [70, 70] { R12832 += 1, R12788 += 1, R83 += 1 };
  s2 -> s1 [71, 65535] { R12832 += 1, R12788 += 1, R83 += 1 };
  s3 -> s6 [0, 65535] { R12832 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R12832 += 1, R12788 += 1, R83 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R12832 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R12832 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 69] { R12834 += 1, R12790 += 1, R85 += 1 };
  s0 -> s0 [0, 65535] { R12833 += 1, R12834 += 1 };
  s0 -> s2 [0, 65535] { R12834 += 1, R12789 += 1, R12790 += 1 };
  s0 -> s3 [70, 70] { R12834 += 1, R12790 += 1, R85 += 1 };
  s0 -> s4 [70, 70] { R12834 += 1, R12790 += 1, R85 += 1 };
  s0 -> s1 [71, 65535] { R12834 += 1, R12790 += 1, R85 += 1 };
  s1 -> s1 [0, 69] { R12834 += 1, R12790 += 1, R85 += 1 };
  s1 -> s1 [0, 65535] { R12834 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [70, 70] { R12834 += 1, R12790 += 1, R85 += 1 };
  s1 -> s4 [70, 70] { R12834 += 1, R12790 += 1, R85 += 1 };
  s1 -> s1 [71, 65535] { R12834 += 1, R12790 += 1, R85 += 1 };
  s2 -> s1 [0, 69] { R12834 += 1, R12790 += 1, R85 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R12834 += 1, R12789 += 1, R12790 += 1 };
  s2 -> s3 [70, 70] { R12834 += 1, R12790 += 1, R85 += 1 };
  s2 -> s4 [70, 70] { R12834 += 1, R12790 += 1, R85 += 1 };
  s2 -> s1 [71, 65535] { R12834 += 1, R12790 += 1, R85 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R12834 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R12834 += 1 };
  s4 -> s4 [0, 65535] { R12834 += 1, R12790 += 1, R85 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R12834 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 69] { R12836 += 1, R12792 += 1, R88 += 1 };
  s0 -> s2 [0, 69] { R12836 += 1, R12792 += 1, R87 += 1, R88 += 1 };
  s0 -> s0 [0, 65535] { R12835 += 1, R12836 += 1 };
  s0 -> s3 [0, 65535] { R12836 += 1, R12791 += 1, R12792 += 1 };
  s0 -> s4 [70, 70] { R12836 += 1, R12792 += 1, R87 += 1, R88 += 1 };
  s0 -> s5 [70, 70] { R12836 += 1, R12792 += 1, R88 += 1 };
  s0 -> s6 [70, 70] { R12836 += 1, R12792 += 1, R88 += 1 };
  s0 -> s7 [70, 70] { R12836 += 1, R12792 += 1, R87 += 1, R88 += 1 };
  s0 -> s1 [71, 74] { R12836 += 1, R12792 += 1, R88 += 1 };
  s0 -> s2 [71, 65535] { R12836 += 1, R12792 += 1, R87 += 1, R88 += 1 };
  s0 -> s8 [75, 75] { R12836 += 1, R12792 += 1, R88 += 1 };
  s0 -> s1 [76, 65535] { R12836 += 1, R12792 += 1, R88 += 1 };
  s1 -> s1 [0, 69] { R12836 += 1, R12792 += 1, R88 += 1 };
  s1 -> s5 [70, 70] { R12836 += 1, R12792 += 1, R88 += 1 };
  s1 -> s6 [70, 70] { R12836 += 1, R12792 += 1, R88 += 1 };
  s1 -> s1 [71, 74] { R12836 += 1, R12792 += 1, R88 += 1 };
  s1 -> s8 [75, 75] { R12836 += 1, R12792 += 1, R88 += 1 };
  s1 -> s1 [76, 65535] { R12836 += 1, R12792 += 1, R88 += 1 };
  s2 -> s1 [0, 69] { R12836 += 1, R12792 += 1, R88 += 1 };
  s2 -> s2 [0, 69] { R12836 += 1, R12792 += 1, R87 += 1, R88 += 1 };
  s2 -> s4 [70, 70] { R12836 += 1, R12792 += 1, R87 += 1, R88 += 1 };
  s2 -> s5 [70, 70] { R12836 += 1, R12792 += 1, R88 += 1 };
  s2 -> s6 [70, 70] { R12836 += 1, R12792 += 1, R88 += 1 };
  s2 -> s7 [70, 70] { R12836 += 1, R12792 += 1, R87 += 1, R88 += 1 };
  s2 -> s1 [71, 74] { R12836 += 1, R12792 += 1, R88 += 1 };
  s2 -> s2 [71, 65535] { R12836 += 1, R12792 += 1, R87 += 1, R88 += 1 };
  s2 -> s8 [75, 75] { R12836 += 1, R12792 += 1, R88 += 1 };
  s2 -> s1 [76, 65535] { R12836 += 1, R12792 += 1, R88 += 1 };
  s3 -> s1 [0, 69] { R12836 += 1, R12792 += 1, R88 += 1 };
  s3 -> s2 [0, 69] { R12836 += 1, R12792 += 1, R87 += 1, R88 += 1 };
  s3 -> s3 [0, 65535] { R12836 += 1, R12791 += 1, R12792 += 1 };
  s3 -> s4 [70, 70] { R12836 += 1, R12792 += 1, R87 += 1, R88 += 1 };
  s3 -> s5 [70, 70] { R12836 += 1, R12792 += 1, R88 += 1 };
  s3 -> s6 [70, 70] { R12836 += 1, R12792 += 1, R88 += 1 };
  s3 -> s7 [70, 70] { R12836 += 1, R12792 += 1, R87 += 1, R88 += 1 };
  s3 -> s1 [71, 74] { R12836 += 1, R12792 += 1, R88 += 1 };
  s3 -> s2 [71, 65535] { R12836 += 1, R12792 += 1, R87 += 1, R88 += 1 };
  s3 -> s8 [75, 75] { R12836 += 1, R12792 += 1, R88 += 1 };
  s3 -> s1 [76, 65535] { R12836 += 1, R12792 += 1, R88 += 1 };
  s6 -> s6 [0, 74] { R12836 += 1, R12792 += 1, R88 += 1 };
  s6 -> s11 [75, 75] { R12836 += 1, R12792 += 1, R88 += 1 };
  s6 -> s6 [76, 65535] { R12836 += 1, R12792 += 1, R88 += 1 };
  s7 -> s6 [0, 74] { R12836 += 1, R12792 += 1, R88 += 1 };
  s7 -> s7 [0, 65535] { R12836 += 1, R12792 += 1, R87 += 1, R88 += 1 };
  s7 -> s11 [75, 75] { R12836 += 1, R12792 += 1, R88 += 1 };
  s7 -> s6 [76, 65535] { R12836 += 1, R12792 += 1, R88 += 1 };
  s8 -> s8 [0, 69] { R12836 += 1, R12792 += 1, R88 += 1 };
  s8 -> s8 [0, 65535] { R12836 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [70, 70] { R12836 += 1, R12792 += 1, R88 += 1 };
  s8 -> s11 [70, 70] { R12836 += 1, R12792 += 1, R88 += 1 };
  s8 -> s8 [71, 65535] { R12836 += 1, R12792 += 1, R88 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R12836 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s12 [0, 65535] { R12836 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R12836 += 1, R12792 += 1, R88 += 1 };
  s12 -> s12 [0, 65535] { R12836 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 69] { R12838 += 1, R12794 += 1, R91 += 1, R92 += 1 };
  s0 -> s2 [0, 65535] { R12838 += 1, R12793 += 1, R12794 += 1 };
  s0 -> s0 [0, 65535] { R12837 += 1, R12838 += 1 };
  s0 -> s3 [70, 70] { R12838 += 1, R12794 += 1, R91 += 1, R92 += 1 };
  s0 -> s4 [70, 70] { R12838 += 1, R12794 += 1, R91 += 1, R92 += 1 };
  s0 -> s1 [71, 65535] { R12838 += 1, R12794 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 69] { R12838 += 1, R12794 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 65535] { R12838 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [70, 70] { R12838 += 1, R12794 += 1, R91 += 1, R92 += 1 };
  s1 -> s4 [70, 70] { R12838 += 1, R12794 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [71, 65535] { R12838 += 1, R12794 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [0, 69] { R12838 += 1, R12794 += 1, R91 += 1, R92 += 1 };
  s2 -> s2 [0, 65535] { R12838 += 1, R12793 += 1, R12794 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [70, 70] { R12838 += 1, R12794 += 1, R91 += 1, R92 += 1 };
  s2 -> s4 [70, 70] { R12838 += 1, R12794 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [71, 65535] { R12838 += 1, R12794 += 1, R91 += 1, R92 += 1 };
  s3 -> s6 [0, 65535] { R12838 += 1 };
  s3 -> s3 [0, 65535] { R12838 += 1, R12794 += 1, R91 += 1, R92 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R12838 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R12838 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 69] { R12840 += 1, R12796 += 1, R10160 += 1, R10161 += 1 };
  s0 -> s2 [0, 69] { R12840 += 1, R12796 += 1, R10159 += 1, R10160 += 1 };
  s0 -> s3 [0, 65535] { R12840 += 1, R12795 += 1, R12796 += 1 };
  s0 -> s0 [0, 65535] { R12839 += 1, R12840 += 1 };
  s0 -> s4 [70, 70] { R12840 += 1, R12796 += 1, R10160 += 1, R10161 += 1 };
  s0 -> s5 [70, 70] { R12840 += 1, R12796 += 1, R10159 += 1, R10160 += 1 };
  s0 -> s6 [70, 70] { R12840 += 1, R12796 += 1, R10159 += 1, R10160 += 1 };
  s0 -> s7 [70, 70] { R12840 += 1, R12796 += 1, R10160 += 1, R10161 += 1 };
  s0 -> s1 [71, 65535] { R12840 += 1, R12796 += 1, R10160 += 1, R10161 += 1 };
  s0 -> s2 [71, 65535] { R12840 += 1, R12796 += 1, R10159 += 1, R10160 += 1 };
  s1 -> s11 [0, 69] { R12840 += 1, R12796 += 1 };
  s1 -> s1 [0, 69] { R12840 += 1, R12796 += 1, R10160 += 1, R10161 += 1 };
  s1 -> s4 [70, 70] { R12840 += 1, R12796 += 1, R10160 += 1, R10161 += 1 };
  s1 -> s12 [70, 70] { R12840 += 1, R12796 += 1 };
  s1 -> s8 [70, 70] { R12840 += 1, R12796 += 1 };
  s1 -> s7 [70, 70] { R12840 += 1, R12796 += 1, R10160 += 1, R10161 += 1 };
  s1 -> s11 [71, 65535] { R12840 += 1, R12796 += 1 };
  s1 -> s1 [71, 65535] { R12840 += 1, R12796 += 1, R10160 += 1, R10161 += 1 };
  s2 -> s1 [0, 69] { R12840 += 1, R12796 += 1, R10160 += 1, R10161 += 1 };
  s2 -> s2 [0, 69] { R12840 += 1, R12796 += 1, R10159 += 1, R10160 += 1 };
  s2 -> s4 [70, 70] { R12840 += 1, R12796 += 1, R10160 += 1, R10161 += 1 };
  s2 -> s5 [70, 70] { R12840 += 1, R12796 += 1, R10159 += 1, R10160 += 1 };
  s2 -> s6 [70, 70] { R12840 += 1, R12796 += 1, R10159 += 1, R10160 += 1 };
  s2 -> s7 [70, 70] { R12840 += 1, R12796 += 1, R10160 += 1, R10161 += 1 };
  s2 -> s1 [71, 65535] { R12840 += 1, R12796 += 1, R10160 += 1, R10161 += 1 };
  s2 -> s2 [71, 65535] { R12840 += 1, R12796 += 1, R10159 += 1, R10160 += 1 };
  s3 -> s1 [0, 69] { R12840 += 1, R12796 += 1, R10160 += 1, R10161 += 1 };
  s3 -> s2 [0, 69] { R12840 += 1, R12796 += 1, R10159 += 1, R10160 += 1 };
  s3 -> s3 [0, 65535] { R12840 += 1, R12795 += 1, R12796 += 1 };
  s3 -> s4 [70, 70] { R12840 += 1, R12796 += 1, R10160 += 1, R10161 += 1 };
  s3 -> s5 [70, 70] { R12840 += 1, R12796 += 1, R10159 += 1, R10160 += 1 };
  s3 -> s6 [70, 70] { R12840 += 1, R12796 += 1, R10159 += 1, R10160 += 1 };
  s3 -> s7 [70, 70] { R12840 += 1, R12796 += 1, R10160 += 1, R10161 += 1 };
  s3 -> s1 [71, 65535] { R12840 += 1, R12796 += 1, R10160 += 1, R10161 += 1 };
  s3 -> s2 [71, 65535] { R12840 += 1, R12796 += 1, R10159 += 1, R10160 += 1 };
  s5 -> s5 [0, 65535] { R12840 += 1, R12796 += 1, R10159 += 1, R10160 += 1 };
  s5 -> s7 [0, 65535] { R12840 += 1, R12796 += 1, R10160 += 1, R10161 += 1 };
  s7 -> s8 [0, 65535] { R12840 += 1, R12796 += 1 };
  s7 -> s7 [0, 65535] { R12840 += 1, R12796 += 1, R10160 += 1, R10161 += 1 };
  s8 -> s9 [0, 65535] { R12840 += 1 };
  s8 -> s8 [0, 65535] { R12840 += 1, R12796 += 1 };
  s8 -> s10 [0, 65535];
  s9 -> s9 [0, 65535] { R12840 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s11 [0, 69] { R12840 += 1, R12796 += 1 };
  s11 -> s11 [0, 65535] { R12840 += 1 };
  s11 -> s10 [0, 65535];
  s11 -> s12 [70, 70] { R12840 += 1, R12796 += 1 };
  s11 -> s8 [70, 70] { R12840 += 1, R12796 += 1 };
  s11 -> s11 [71, 65535] { R12840 += 1, R12796 += 1 };
  s12 -> s12 [0, 65535] { R12840 += 1 };
  s12 -> s10 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 69] { R12842 += 1, R12798 += 1, R12397 += 1, R12398 += 1 };
  s0 -> s2 [0, 69] { R12842 += 1, R12798 += 1, R12398 += 1, R12400 += 1 };
  s0 -> s3 [0, 69] { R12842 += 1, R12798 += 1, R12398 += 1, R12399 += 1, R12400 += 1 };
  s0 -> s0 [0, 65535] { R12841 += 1, R12842 += 1 };
  s0 -> s4 [0, 65535] { R12842 += 1, R12797 += 1, R12798 += 1 };
  s0 -> s5 [70, 70] { R12842 += 1, R12798 += 1, R12397 += 1, R12398 += 1 };
  s0 -> s6 [70, 70] { R12842 += 1, R12798 += 1, R12398 += 1, R12399 += 1, R12400 += 1 };
  s0 -> s7 [70, 70] { R12842 += 1, R12798 += 1, R12398 += 1, R12400 += 1 };
  s0 -> s8 [70, 70] { R12842 += 1, R12798 += 1, R12397 += 1, R12398 += 1 };
  s0 -> s9 [70, 70] { R12842 += 1, R12798 += 1, R12398 += 1, R12399 += 1, R12400 += 1 };
  s0 -> s10 [70, 70] { R12842 += 1, R12798 += 1, R12398 += 1, R12400 += 1 };
  s0 -> s2 [71, 74] { R12842 += 1, R12798 += 1, R12398 += 1, R12400 += 1 };
  s0 -> s1 [71, 65535] { R12842 += 1, R12798 += 1, R12397 += 1, R12398 += 1 };
  s0 -> s3 [71, 65535] { R12842 += 1, R12798 += 1, R12398 += 1, R12399 += 1, R12400 += 1 };
  s0 -> s2 [76, 65535] { R12842 += 1, R12798 += 1, R12398 += 1, R12400 += 1 };
  s1 -> s1 [0, 69] { R12842 += 1, R12798 += 1, R12397 += 1, R12398 += 1 };
  s1 -> s2 [0, 69] { R12842 += 1, R12798 += 1, R12398 += 1, R12400 += 1 };
  s1 -> s3 [0, 69] { R12842 += 1, R12798 += 1, R12398 += 1, R12399 += 1, R12400 += 1 };
  s1 -> s5 [70, 70] { R12842 += 1, R12798 += 1, R12397 += 1, R12398 += 1 };
  s1 -> s6 [70, 70] { R12842 += 1, R12798 += 1, R12398 += 1, R12399 += 1, R12400 += 1 };
  s1 -> s7 [70, 70] { R12842 += 1, R12798 += 1, R12398 += 1, R12400 += 1 };
  s1 -> s8 [70, 70] { R12842 += 1, R12798 += 1, R12397 += 1, R12398 += 1 };
  s1 -> s9 [70, 70] { R12842 += 1, R12798 += 1, R12398 += 1, R12399 += 1, R12400 += 1 };
  s1 -> s10 [70, 70] { R12842 += 1, R12798 += 1, R12398 += 1, R12400 += 1 };
  s1 -> s2 [71, 74] { R12842 += 1, R12798 += 1, R12398 += 1, R12400 += 1 };
  s1 -> s1 [71, 65535] { R12842 += 1, R12798 += 1, R12397 += 1, R12398 += 1 };
  s1 -> s3 [71, 65535] { R12842 += 1, R12798 += 1, R12398 += 1, R12399 += 1, R12400 += 1 };
  s1 -> s2 [76, 65535] { R12842 += 1, R12798 += 1, R12398 += 1, R12400 += 1 };
  s2 -> s2 [0, 69] { R12842 += 1, R12798 += 1, R12398 += 1, R12400 += 1 };
  s2 -> s11 [0, 65535];
  s2 -> s2 [0, 65535] { R12842 += 1 };
  s2 -> s7 [70, 70] { R12842 += 1, R12798 += 1, R12398 += 1, R12400 += 1 };
  s2 -> s10 [70, 70] { R12842 += 1, R12798 += 1, R12398 += 1, R12400 += 1 };
  s2 -> s2 [71, 74] { R12842 += 1, R12798 += 1, R12398 += 1, R12400 += 1 };
  s2 -> s2 [76, 65535] { R12842 += 1, R12798 += 1, R12398 += 1, R12400 += 1 };
  s3 -> s2 [0, 69] { R12842 += 1, R12798 += 1, R12398 += 1, R12400 += 1 };
  s3 -> s3 [0, 69] { R12842 += 1, R12798 += 1, R12398 += 1, R12399 += 1, R12400 += 1 };
  s3 -> s6 [70, 70] { R12842 += 1, R12798 += 1, R12398 += 1, R12399 += 1, R12400 += 1 };
  s3 -> s7 [70, 70] { R12842 += 1, R12798 += 1, R12398 += 1, R12400 += 1 };
  s3 -> s9 [70, 70] { R12842 += 1, R12798 += 1, R12398 += 1, R12399 += 1, R12400 += 1 };
  s3 -> s10 [70, 70] { R12842 += 1, R12798 += 1, R12398 += 1, R12400 += 1 };
  s3 -> s2 [71, 74] { R12842 += 1, R12798 += 1, R12398 += 1, R12400 += 1 };
  s3 -> s3 [71, 65535] { R12842 += 1, R12798 += 1, R12398 += 1, R12399 += 1, R12400 += 1 };
  s3 -> s2 [76, 65535] { R12842 += 1, R12798 += 1, R12398 += 1, R12400 += 1 };
  s4 -> s1 [0, 69] { R12842 += 1, R12798 += 1, R12397 += 1, R12398 += 1 };
  s4 -> s2 [0, 69] { R12842 += 1, R12798 += 1, R12398 += 1, R12400 += 1 };
  s4 -> s3 [0, 69] { R12842 += 1, R12798 += 1, R12398 += 1, R12399 += 1, R12400 += 1 };
  s4 -> s4 [0, 65535] { R12842 += 1, R12797 += 1, R12798 += 1 };
  s4 -> s5 [70, 70] { R12842 += 1, R12798 += 1, R12397 += 1, R12398 += 1 };
  s4 -> s6 [70, 70] { R12842 += 1, R12798 += 1, R12398 += 1, R12399 += 1, R12400 += 1 };
  s4 -> s7 [70, 70] { R12842 += 1, R12798 += 1, R12398 += 1, R12400 += 1 };
  s4 -> s8 [70, 70] { R12842 += 1, R12798 += 1, R12397 += 1, R12398 += 1 };
  s4 -> s9 [70, 70] { R12842 += 1, R12798 += 1, R12398 += 1, R12399 += 1, R12400 += 1 };
  s4 -> s10 [70, 70] { R12842 += 1, R12798 += 1, R12398 += 1, R12400 += 1 };
  s4 -> s2 [71, 74] { R12842 += 1, R12798 += 1, R12398 += 1, R12400 += 1 };
  s4 -> s1 [71, 65535] { R12842 += 1, R12798 += 1, R12397 += 1, R12398 += 1 };
  s4 -> s3 [71, 65535] { R12842 += 1, R12798 += 1, R12398 += 1, R12399 += 1, R12400 += 1 };
  s4 -> s2 [76, 65535] { R12842 += 1, R12798 += 1, R12398 += 1, R12400 += 1 };
  s5 -> s7 [0, 74] { R12842 += 1, R12798 += 1, R12398 += 1, R12400 += 1 };
  s5 -> s5 [0, 65535] { R12842 += 1, R12798 += 1, R12397 += 1, R12398 += 1 };
  s5 -> s6 [0, 65535] { R12842 += 1, R12798 += 1, R12398 += 1, R12399 += 1, R12400 += 1 };
  s5 -> s7 [76, 65535] { R12842 += 1, R12798 += 1, R12398 += 1, R12400 += 1 };
  s6 -> s7 [0, 74] { R12842 += 1, R12798 += 1, R12398 += 1, R12400 += 1 };
  s6 -> s6 [0, 65535] { R12842 += 1, R12798 += 1, R12398 += 1, R12399 += 1, R12400 += 1 };
  s6 -> s7 [76, 65535] { R12842 += 1, R12798 += 1, R12398 += 1, R12400 += 1 };
  s7 -> s7 [0, 74] { R12842 += 1, R12798 += 1, R12398 += 1, R12400 += 1 };
  s7 -> s11 [0, 65535];
  s7 -> s7 [0, 65535] { R12842 += 1 };
  s7 -> s7 [76, 65535] { R12842 += 1, R12798 += 1, R12398 += 1, R12400 += 1 };
  s10 -> s11 [0, 65535];
  s10 -> s10 [0, 65535] { R12842 += 1 };
  s11 -> s11 [0, 65535];
  accepting s2, s7, s10, s11;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 69] { R12844 += 1, R12800 += 1, R12735 += 1, R12736 += 1 };
  s0 -> s2 [0, 69] { R12844 += 1, R12800 += 1, R12736 += 1, R12737 += 1, R12738 += 1 };
  s0 -> s3 [0, 69] { R12844 += 1, R12800 += 1, R12736 += 1, R12738 += 1, R12739 += 1 };
  s0 -> s4 [0, 65535] { R12844 += 1, R12799 += 1, R12800 += 1 };
  s0 -> s0 [0, 65535] { R12843 += 1, R12844 += 1 };
  s0 -> s5 [70, 70] { R12844 += 1, R12800 += 1, R12735 += 1, R12736 += 1 };
  s0 -> s6 [70, 70] { R12844 += 1, R12800 += 1, R12736 += 1, R12738 += 1, R12739 += 1 };
  s0 -> s7 [70, 70] { R12844 += 1, R12800 += 1, R12736 += 1, R12737 += 1, R12738 += 1 };
  s0 -> s8 [70, 70] { R12844 += 1, R12800 += 1, R12736 += 1, R12738 += 1, R12739 += 1 };
  s0 -> s9 [70, 70] { R12844 += 1, R12800 += 1, R12736 += 1, R12737 += 1, R12738 += 1 };
  s0 -> s10 [70, 70] { R12844 += 1, R12800 += 1, R12735 += 1, R12736 += 1 };
  s0 -> s1 [71, 65535] { R12844 += 1, R12800 += 1, R12735 += 1, R12736 += 1 };
  s0 -> s2 [71, 65535] { R12844 += 1, R12800 += 1, R12736 += 1, R12737 += 1, R12738 += 1 };
  s0 -> s3 [71, 65535] { R12844 += 1, R12800 += 1, R12736 += 1, R12738 += 1, R12739 += 1 };
  s1 -> s1 [0, 69] { R12844 += 1, R12800 += 1, R12735 += 1, R12736 += 1 };
  s1 -> s2 [0, 69] { R12844 += 1, R12800 += 1, R12736 += 1, R12737 += 1, R12738 += 1 };
  s1 -> s3 [0, 69] { R12844 += 1, R12800 += 1, R12736 += 1, R12738 += 1, R12739 += 1 };
  s1 -> s5 [70, 70] { R12844 += 1, R12800 += 1, R12735 += 1, R12736 += 1 };
  s1 -> s6 [70, 70] { R12844 += 1, R12800 += 1, R12736 += 1, R12738 += 1, R12739 += 1 };
  s1 -> s7 [70, 70] { R12844 += 1, R12800 += 1, R12736 += 1, R12737 += 1, R12738 += 1 };
  s1 -> s8 [70, 70] { R12844 += 1, R12800 += 1, R12736 += 1, R12738 += 1, R12739 += 1 };
  s1 -> s9 [70, 70] { R12844 += 1, R12800 += 1, R12736 += 1, R12737 += 1, R12738 += 1 };
  s1 -> s10 [70, 70] { R12844 += 1, R12800 += 1, R12735 += 1, R12736 += 1 };
  s1 -> s1 [71, 65535] { R12844 += 1, R12800 += 1, R12735 += 1, R12736 += 1 };
  s1 -> s2 [71, 65535] { R12844 += 1, R12800 += 1, R12736 += 1, R12737 += 1, R12738 += 1 };
  s1 -> s3 [71, 65535] { R12844 += 1, R12800 += 1, R12736 += 1, R12738 += 1, R12739 += 1 };
  s2 -> s2 [0, 69] { R12844 += 1, R12800 += 1, R12736 += 1, R12737 += 1, R12738 += 1 };
  s2 -> s3 [0, 69] { R12844 += 1, R12800 += 1, R12736 += 1, R12738 += 1, R12739 += 1 };
  s2 -> s6 [70, 70] { R12844 += 1, R12800 += 1, R12736 += 1, R12738 += 1, R12739 += 1 };
  s2 -> s7 [70, 70] { R12844 += 1, R12800 += 1, R12736 += 1, R12737 += 1, R12738 += 1 };
  s2 -> s8 [70, 70] { R12844 += 1, R12800 += 1, R12736 += 1, R12738 += 1, R12739 += 1 };
  s2 -> s9 [70, 70] { R12844 += 1, R12800 += 1, R12736 += 1, R12737 += 1, R12738 += 1 };
  s2 -> s2 [71, 65535] { R12844 += 1, R12800 += 1, R12736 += 1, R12737 += 1, R12738 += 1 };
  s2 -> s3 [71, 65535] { R12844 += 1, R12800 += 1, R12736 += 1, R12738 += 1, R12739 += 1 };
  s3 -> s3 [0, 69] { R12844 += 1, R12800 += 1, R12736 += 1, R12738 += 1, R12739 += 1 };
  s3 -> s11 [0, 65535];
  s3 -> s3 [0, 65535] { R12844 += 1 };
  s3 -> s6 [70, 70] { R12844 += 1, R12800 += 1, R12736 += 1, R12738 += 1, R12739 += 1 };
  s3 -> s8 [70, 70] { R12844 += 1, R12800 += 1, R12736 += 1, R12738 += 1, R12739 += 1 };
  s3 -> s3 [71, 65535] { R12844 += 1, R12800 += 1, R12736 += 1, R12738 += 1, R12739 += 1 };
  s4 -> s1 [0, 69] { R12844 += 1, R12800 += 1, R12735 += 1, R12736 += 1 };
  s4 -> s2 [0, 69] { R12844 += 1, R12800 += 1, R12736 += 1, R12737 += 1, R12738 += 1 };
  s4 -> s3 [0, 69] { R12844 += 1, R12800 += 1, R12736 += 1, R12738 += 1, R12739 += 1 };
  s4 -> s4 [0, 65535] { R12844 += 1, R12799 += 1, R12800 += 1 };
  s4 -> s5 [70, 70] { R12844 += 1, R12800 += 1, R12735 += 1, R12736 += 1 };
  s4 -> s6 [70, 70] { R12844 += 1, R12800 += 1, R12736 += 1, R12738 += 1, R12739 += 1 };
  s4 -> s7 [70, 70] { R12844 += 1, R12800 += 1, R12736 += 1, R12737 += 1, R12738 += 1 };
  s4 -> s8 [70, 70] { R12844 += 1, R12800 += 1, R12736 += 1, R12738 += 1, R12739 += 1 };
  s4 -> s9 [70, 70] { R12844 += 1, R12800 += 1, R12736 += 1, R12737 += 1, R12738 += 1 };
  s4 -> s10 [70, 70] { R12844 += 1, R12800 += 1, R12735 += 1, R12736 += 1 };
  s4 -> s1 [71, 65535] { R12844 += 1, R12800 += 1, R12735 += 1, R12736 += 1 };
  s4 -> s2 [71, 65535] { R12844 += 1, R12800 += 1, R12736 += 1, R12737 += 1, R12738 += 1 };
  s4 -> s3 [71, 65535] { R12844 += 1, R12800 += 1, R12736 += 1, R12738 += 1, R12739 += 1 };
  s5 -> s5 [0, 65535] { R12844 += 1, R12800 += 1, R12735 += 1, R12736 += 1 };
  s5 -> s6 [0, 65535] { R12844 += 1, R12800 += 1, R12736 += 1, R12738 += 1, R12739 += 1 };
  s5 -> s7 [0, 65535] { R12844 += 1, R12800 += 1, R12736 += 1, R12737 += 1, R12738 += 1 };
  s6 -> s6 [0, 65535] { R12844 += 1, R12800 += 1, R12736 += 1, R12738 += 1, R12739 += 1 };
  s6 -> s11 [0, 65535];
  s6 -> s12 [0, 65535] { R12844 += 1 };
  s7 -> s6 [0, 65535] { R12844 += 1, R12800 += 1, R12736 += 1, R12738 += 1, R12739 += 1 };
  s7 -> s7 [0, 65535] { R12844 += 1, R12800 += 1, R12736 += 1, R12737 += 1, R12738 += 1 };
  s8 -> s8 [0, 65535] { R12844 += 1 };
  s8 -> s11 [0, 65535];
  s11 -> s11 [0, 65535];
  s12 -> s11 [0, 65535];
  s12 -> s12 [0, 65535] { R12844 += 1 };
  accepting s3, s12, s8, s6, s11;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [102, 102];
  accepting s1;
};
};
constraint R2 = R12762 && R3 = R12844 && R23 - R12844 = -1 && R24 = R12844 && R25 - R12844 = -1 && R26 = R12844 && R27 = 0 && R28 = 1 && R29 = 0 && R30 = 1 && R45 + R84 + R83 + -1*R12402 + -1*R12398 - R66 = 0 && R49 + R89 + R87 = 0 && R50 + R90 + R88 + -1*R12402 + -1*R12398 - R66 = 0 && R55 + R96 + R93 + -1*R12404 + -1*R12400 - R68 = 0 && R65 + R12401 + R12397 = 0 && R67 + R12403 + R12399 = 0 && R12761 = 0 && R12785 = 0 && R12786 = 0 && R12791 = 0 && R12792 = 0 && R12795 = 0 && R12796 = 0 && R12797 = 0 && R12798 = 0 && R12799 = 0 && R12800 = 0 && R12801 = 0 && R12802 = R12844 && R12803 = 0 && R12804 = R12844 && R12805 = 0 && R12806 = R12844 && R12807 = 0 && R12808 = R12844 && R12809 = 0 && R12810 = R12844 && R12811 = 0 && R12812 = R12844 && R12813 = 0 && R12814 = R12844 && R12815 = 0 && R12816 = R12844 && R12817 = 0 && R12818 = R12844 && R12819 = 0 && R12820 = R12844 && R12821 = 0 && R12822 = R12844 && R12823 = 0 && R12824 = R12844 && R12825 = 0 && R12826 = R12844 && R12827 = 0 && R12828 = R12844 && R12829 = 0 && R12830 = R12844 && R12831 = 0 && R12832 = R12844 && R12833 = 0 && R12834 = R12844 && R12835 = 0 && R12836 = R12844 && R12837 = 0 && R12838 = R12844 && R12839 = 0 && R12840 = R12844 && R12841 = 0 && R12842 = R12844 && R12843 = 0 && R12 < 1 && R15 < 1 && R16 < 1 && R47 + R86 + R85 < 1 && R61 + R10164 + R10161 < 1 && -1*R12402 + -1*R12398 - R66 < 1 && -1*R12404 + -1*R12400 - R68 < 1 && -1 < R12762 && 0 < R12844 && (R53 + R94 + R91 != 0 || R54 + R95 + R92 + -1*R12402 + -1*R12398 - R66 = 0 || R66 + R12402 + R12398 < 1) && (R59 + R10162 + R10159 != 0 || R60 + R10163 + R10160 + -1*R12402 + -1*R12398 - R66 = 0 || R66 + R12402 + R12398 < 1) && (R66 + R12402 + R12398 != 0 || ((R53 + R94 + R91 != 0 || R54 + R95 + R92 = 0 || R68 + R12404 + R12400 < 1) && (R53 + R94 + R91 = 0 || R68 + R12404 + R12400 < 1))) && (R66 + R12402 + R12398 != 0 || ((R59 + R10162 + R10159 != 0 || R60 + R10163 + R10160 = 0 || R68 + R12404 + R12400 < 1) && (R59 + R10162 + R10159 = 0 || R68 + R12404 + R12400 < 1))) && (R66 + R12402 + R12398 != 0 || ((R73 + R12740 + R12735 != 0 || R74 + R12741 + R12736 = 0 || R68 + R12404 + R12400 < 1) && (R73 + R12740 + R12735 = 0 || R68 + R12404 + R12400 < 1))) && (R68 + R12404 + R12400 != 0 || R77 + R12744 + R12739 = 0 || (R75 + R12742 + R12737 = 0 && R76 + R12743 + R12738 = 0)) && (R73 + R12740 + R12735 != 0 || R66 + R12402 + R12398 + -1*R12741 + -1*R12736 - R74 = 0 || R66 + R12402 + R12398 < 1) && (R75 + R12742 + R12737 != 0 || R68 + R12404 + R12400 + -1*R12743 + -1*R12738 - R76 = 0 || R68 + R12404 + R12400 < 1) && (R12745 != 0 || R12746 = R12762 || (R20 = 0 && R12762 = 0)) && (R12747 != 0 || R12748 = R12762 || (R20 = 0 && R12762 = 0)) && (R12749 != 0 || R12750 = R12762 || (R20 = 0 && R12762 = 0)) && (R12751 != 0 || R12752 = R12762 || (R20 = 0 && R12762 = 0)) && (R12753 != 0 || R12754 = R12762 || (R20 = 0 && R12762 = 0)) && (R12755 != 0 || R12756 = R12762 || (R20 = 0 && R12762 = 0)) && (R12757 != 0 || R12758 = R12762 || (R20 = 0 && R12762 = 0)) && (R12759 != 0 || R12760 = R12762 || (R20 = 0 && R12762 = 0)) && (R12763 != 0 || R12762 = R12764 || (R20 = 0 && R12762 = 0)) && (R21 = 0 || (R12783 = 0 && R12784 = 0)) && (R21 = 0 || (R12787 = 0 && R12788 = 0)) && (R21 = 0 || (R12789 = 0 && R12790 = 0)) && (R21 = 0 || (R12793 = 0 && R12794 = 0)) && (R22 = 0 || (R12765 = 0 && R12766 = 0)) && (R22 = 0 || (R12767 = 0 && R12768 = 0)) && (R22 = 0 || (R12769 = 0 && R12770 = 0)) && (R22 = 0 || (R12771 = 0 && R12772 = 0)) && (R22 = 0 || (R12773 = 0 && R12774 = 0)) && (R22 = 0 || (R12775 = 0 && R12776 = 0)) && (R22 = 0 || (R12777 = 0 && R12778 = 0)) && (R22 = 0 || (R12779 = 0 && R12780 = 0)) && (R22 = 0 || (R12781 = 0 && R12782 = 0)) && (R53 + R94 + R91 = 0 || R66 + R12402 + R12398 < 1) && (R59 + R10162 + R10159 = 0 || R66 + R12402 + R12398 < 1) && (R73 + R12740 + R12735 = 0 || R66 + R12402 + R12398 < 1) && (R75 + R12742 + R12737 = 0 || R68 + R12404 + R12400 < 1) && (R12745 = 0 || (R20 = 0 && R12762 = 0)) && (R12747 = 0 || (R20 = 0 && R12762 = 0)) && (R12749 = 0 || (R20 = 0 && R12762 = 0)) && (R12751 = 0 || (R20 = 0 && R12762 = 0)) && (R12753 = 0 || (R20 = 0 && R12762 = 0)) && (R12755 = 0 || (R20 = 0 && R12762 = 0)) && (R12757 = 0 || (R20 = 0 && R12762 = 0)) && (R12759 = 0 || (R20 = 0 && R12762 = 0)) && (R12763 = 0 || (R20 = 0 && R12762 = 0));
// End of Parikh automata intersection problem
