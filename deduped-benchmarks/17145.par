// Parikh automata intersection problem, generated by OSTRICH+
counter int R12, R15, R16, R2, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R3451, R3452, R3453, R3454, R3455, R3456, R4, R45, R47, R49, R5, R50, R53, R54, R55, R59, R60, R61, R6247, R6248, R6249, R6250, R6251, R6252, R6253, R6254, R65, R66, R6695, R6696, R6697, R6698, R6699, R67, R6700, R6701, R6702, R6703, R6704, R6705, R6706, R6707, R6708, R6709, R6710, R6711, R6712, R6713, R6714, R6715, R6716, R6717, R6718, R6719, R6720, R6721, R6722, R6723, R6724, R6725, R6726, R6727, R6728, R6729, R6730, R6731, R6732, R6733, R6734, R6735, R6736, R6737, R6738, R6739, R6740, R6741, R6742, R6743, R6744, R6745, R6746, R6747, R6748, R6749, R6750, R6751, R6752, R6753, R6754, R6755, R6756, R6757, R6758, R6759, R6760, R6761, R6762, R6763, R6764, R6765, R6766, R6767, R6768, R6769, R6770, R6771, R6772, R6773, R6774, R6775, R6776, R6777, R6778, R6779, R6780, R6781, R6782, R6783, R6784, R6785, R6786, R6787, R6788, R6789, R6790, R6791, R6792, R6793, R6794, R6795, R6796, R6797, R6798, R6799, R68, R6800, R6801, R6802, R6803, R6804, R73, R74, R75, R76, R77, R83, R84, R85, R86, R87, R88, R89, R90, R91, R92, R93, R94, R95, R96;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [70, 70];
  s0 -> s0 [71, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [70, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R15 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 69];
  s0 -> s0 [0, 65535] { R16 += 1 };
  s0 -> s2 [70, 70];
  s0 -> s1 [71, 65535];
  s1 -> s1 [0, 69];
  s1 -> s2 [70, 70];
  s1 -> s1 [71, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R24 += 1 };
  s0 -> s0 [0, 65535] { R23 += 1, R24 += 1 };
  s0 -> s2 [9, 13] { R24 += 1 };
  s0 -> s1 [14, 31] { R24 += 1 };
  s0 -> s2 [32, 32] { R24 += 1 };
  s0 -> s1 [33, 65535] { R24 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R24 += 1 };
  s2 -> s1 [0, 65535] { R24 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R25 += 1, R26 += 1 };
  s1 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R28 += 1 };
  s0 -> s0 [0, 65535] { R27 += 1, R28 += 1 };
  s0 -> s2 [9, 13] { R28 += 1 };
  s0 -> s1 [14, 31] { R28 += 1 };
  s0 -> s2 [32, 32] { R28 += 1 };
  s0 -> s1 [33, 65535] { R28 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R28 += 1 };
  s2 -> s1 [0, 65535] { R28 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R29 += 1, R30 += 1 };
  s1 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R6725 += 1, R6726 += 1 };
  s0 -> s1 [0, 65535] { R6726 += 1, R22 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R6726 += 1, R22 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 69] { R6728 += 1 };
  s0 -> s0 [0, 65535] { R6727 += 1, R6728 += 1 };
  s0 -> s2 [70, 70] { R6728 += 1 };
  s0 -> s3 [70, 70] { R6728 += 1 };
  s0 -> s1 [76, 65535] { R6728 += 1 };
  s1 -> s1 [0, 69] { R6728 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R6728 += 1 };
  s1 -> s3 [70, 70] { R6728 += 1 };
  s1 -> s1 [76, 65535] { R6728 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 70] { R6728 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [76, 65535] { R6728 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 69] { R6730 += 1, R45 += 1 };
  s0 -> s0 [0, 65535] { R6729 += 1, R6730 += 1 };
  s0 -> s2 [70, 70] { R6730 += 1, R45 += 1 };
  s0 -> s3 [70, 70] { R6730 += 1, R45 += 1 };
  s0 -> s1 [71, 65535] { R6730 += 1, R45 += 1 };
  s1 -> s1 [0, 69] { R6730 += 1, R45 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R6730 += 1, R45 += 1 };
  s1 -> s3 [70, 70] { R6730 += 1, R45 += 1 };
  s1 -> s1 [71, 65535] { R6730 += 1, R45 += 1 };
  s2 -> s2 [0, 65535] { R6730 += 1, R45 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 69] { R6732 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R6731 += 1, R6732 += 1 };
  s0 -> s2 [70, 70] { R6732 += 1, R47 += 1 };
  s0 -> s3 [70, 70] { R6732 += 1, R47 += 1 };
  s0 -> s1 [71, 65535] { R6732 += 1, R47 += 1 };
  s1 -> s1 [0, 69] { R6732 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R6732 += 1, R47 += 1 };
  s1 -> s3 [70, 70] { R6732 += 1, R47 += 1 };
  s1 -> s1 [71, 65535] { R6732 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R6732 += 1, R47 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 69] { R6734 += 1, R49 += 1, R50 += 1 };
  s0 -> s0 [0, 65535] { R6733 += 1, R6734 += 1 };
  s0 -> s2 [70, 70] { R6734 += 1, R49 += 1, R50 += 1 };
  s0 -> s3 [70, 70] { R6734 += 1, R49 += 1, R50 += 1 };
  s0 -> s1 [71, 65535] { R6734 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 69] { R6734 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R6734 += 1, R49 += 1, R50 += 1 };
  s1 -> s3 [70, 70] { R6734 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [71, 65535] { R6734 += 1, R49 += 1, R50 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R6734 += 1, R49 += 1, R50 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 69] { R6736 += 1, R53 += 1, R54 += 1 };
  s0 -> s0 [0, 65535] { R6735 += 1, R6736 += 1 };
  s0 -> s2 [70, 70] { R6736 += 1, R53 += 1, R54 += 1 };
  s0 -> s3 [70, 70] { R6736 += 1, R53 += 1, R54 += 1 };
  s0 -> s1 [71, 65535] { R6736 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 69] { R6736 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R6736 += 1, R53 += 1, R54 += 1 };
  s1 -> s3 [70, 70] { R6736 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [71, 65535] { R6736 += 1, R53 += 1, R54 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R6736 += 1, R53 += 1, R54 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 69] { R6738 += 1, R59 += 1, R60 += 1 };
  s0 -> s0 [0, 65535] { R6737 += 1, R6738 += 1 };
  s0 -> s2 [70, 70] { R6738 += 1, R59 += 1, R60 += 1 };
  s0 -> s3 [70, 70] { R6738 += 1, R59 += 1, R60 += 1 };
  s0 -> s1 [71, 65535] { R6738 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 69] { R6738 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R6738 += 1, R59 += 1, R60 += 1 };
  s1 -> s3 [70, 70] { R6738 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [71, 65535] { R6738 += 1, R59 += 1, R60 += 1 };
  s2 -> s2 [0, 65535] { R6738 += 1, R59 += 1, R60 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 69] { R6740 += 1, R65 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R6739 += 1, R6740 += 1 };
  s0 -> s2 [70, 70] { R6740 += 1, R65 += 1, R66 += 1 };
  s0 -> s3 [70, 70] { R6740 += 1, R65 += 1, R66 += 1 };
  s0 -> s1 [71, 65535] { R6740 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 69] { R6740 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R6740 += 1, R65 += 1, R66 += 1 };
  s1 -> s3 [70, 70] { R6740 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [71, 65535] { R6740 += 1, R65 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R6740 += 1, R65 += 1, R66 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 69] { R6742 += 1, R73 += 1, R74 += 1 };
  s0 -> s0 [0, 65535] { R6741 += 1, R6742 += 1 };
  s0 -> s2 [70, 70] { R6742 += 1, R73 += 1, R74 += 1 };
  s0 -> s3 [70, 70] { R6742 += 1, R73 += 1, R74 += 1 };
  s0 -> s1 [71, 65535] { R6742 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 69] { R6742 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R6742 += 1, R73 += 1, R74 += 1 };
  s1 -> s3 [70, 70] { R6742 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [71, 65535] { R6742 += 1, R73 += 1, R74 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R6742 += 1, R73 += 1, R74 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 69] { R6762 += 1 };
  s0 -> s0 [0, 65535] { R6761 += 1, R6762 += 1 };
  s0 -> s2 [70, 70] { R6762 += 1 };
  s0 -> s1 [71, 65535] { R6762 += 1 };
  s1 -> s1 [0, 69] { R6762 += 1 };
  s1 -> s2 [70, 70] { R6762 += 1 };
  s1 -> s1 [71, 65535] { R6762 += 1 };
  s2 -> s2 [0, 65535] { R6762 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R6764 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R6763 += 1, R6764 += 1 };
  s1 -> s1 [0, 65535] { R6764 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 69] { R6766 += 1 };
  s0 -> s2 [0, 65535] { R6766 += 1, R12 += 1 };
  s0 -> s0 [0, 65535] { R6765 += 1, R6766 += 1 };
  s0 -> s3 [70, 70] { R6766 += 1 };
  s0 -> s1 [71, 65535] { R6766 += 1 };
  s1 -> s1 [0, 69] { R6766 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [70, 70] { R6766 += 1 };
  s1 -> s1 [71, 65535] { R6766 += 1 };
  s2 -> s1 [0, 69] { R6766 += 1 };
  s2 -> s2 [0, 65535] { R6766 += 1, R12 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [70, 70] { R6766 += 1 };
  s2 -> s1 [71, 65535] { R6766 += 1 };
  s3 -> s3 [0, 65535] { R6766 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 69] { R6768 += 1, R6706 += 1 };
  s0 -> s0 [0, 65535] { R6767 += 1, R6768 += 1 };
  s0 -> s2 [0, 65535] { R6768 += 1, R6705 += 1, R6706 += 1 };
  s0 -> s1 [71, 65535] { R6768 += 1, R6706 += 1 };
  s1 -> s1 [0, 69] { R6768 += 1, R6706 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R6768 += 1 };
  s1 -> s1 [71, 65535] { R6768 += 1, R6706 += 1 };
  s2 -> s1 [0, 69] { R6768 += 1, R6706 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R6768 += 1, R6705 += 1, R6706 += 1 };
  s2 -> s1 [71, 65535] { R6768 += 1, R6706 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s0 [0, 65535] { R6769 += 1, R6770 += 1 };
  s0 -> s1 [0, 65535] { R6770 += 1, R6707 += 1, R6708 += 1 };
  s0 -> s2 [0, 65535] { R6770 += 1, R6708 += 1, R20 += 1 };
  s1 -> s1 [0, 65535] { R6770 += 1, R6707 += 1, R6708 += 1 };
  s1 -> s2 [0, 65535] { R6770 += 1, R6708 += 1, R20 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R6770 += 1, R6708 += 1, R20 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R6770 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R6770 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 70] { R6772 += 1, R6710 += 1 };
  s0 -> s0 [0, 65535] { R6771 += 1, R6772 += 1 };
  s0 -> s2 [0, 65535] { R6772 += 1, R6709 += 1, R6710 += 1 };
  s0 -> s1 [75, 65535] { R6772 += 1, R6710 += 1 };
  s1 -> s1 [0, 70] { R6772 += 1, R6710 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R6772 += 1 };
  s1 -> s1 [75, 65535] { R6772 += 1, R6710 += 1 };
  s2 -> s1 [0, 70] { R6772 += 1, R6710 += 1 };
  s2 -> s2 [0, 65535] { R6772 += 1, R6709 += 1, R6710 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [75, 65535] { R6772 += 1, R6710 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R6774 += 1, R6711 += 1, R6712 += 1 };
  s0 -> s2 [0, 65535] { R6774 += 1, R6712 += 1, R84 += 1 };
  s0 -> s0 [0, 65535] { R6773 += 1, R6774 += 1 };
  s1 -> s1 [0, 65535] { R6774 += 1, R6711 += 1, R6712 += 1 };
  s1 -> s2 [0, 65535] { R6774 += 1, R6712 += 1, R84 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R6774 += 1 };
  s2 -> s2 [0, 65535] { R6774 += 1, R6712 += 1, R84 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R6774 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 74] { R6776 += 1, R6714 += 1 };
  s0 -> s2 [0, 65535] { R6776 += 1, R6714 += 1, R86 += 1 };
  s0 -> s3 [0, 65535] { R6776 += 1, R6713 += 1, R6714 += 1 };
  s0 -> s0 [0, 65535] { R6775 += 1, R6776 += 1 };
  s0 -> s1 [76, 65535] { R6776 += 1, R6714 += 1 };
  s1 -> s1 [0, 74] { R6776 += 1, R6714 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R6776 += 1 };
  s1 -> s1 [76, 65535] { R6776 += 1, R6714 += 1 };
  s2 -> s1 [0, 74] { R6776 += 1, R6714 += 1 };
  s2 -> s2 [0, 65535] { R6776 += 1, R6714 += 1, R86 += 1 };
  s2 -> s5 [0, 65535] { R6776 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [76, 65535] { R6776 += 1, R6714 += 1 };
  s3 -> s1 [0, 74] { R6776 += 1, R6714 += 1 };
  s3 -> s2 [0, 65535] { R6776 += 1, R6714 += 1, R86 += 1 };
  s3 -> s3 [0, 65535] { R6776 += 1, R6713 += 1, R6714 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [76, 65535] { R6776 += 1, R6714 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R6776 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 65535] { R6778 += 1, R6716 += 1, R90 += 1 };
  s0 -> s0 [0, 65535] { R6777 += 1, R6778 += 1 };
  s0 -> s2 [0, 65535] { R6778 += 1, R6716 += 1 };
  s0 -> s3 [0, 65535] { R6778 += 1, R6715 += 1, R6716 += 1 };
  s1 -> s1 [0, 65535] { R6778 += 1, R6716 += 1, R90 += 1 };
  s1 -> s5 [0, 65535] { R6778 += 1 };
  s1 -> s2 [0, 65535] { R6778 += 1, R6716 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R6778 += 1 };
  s2 -> s2 [0, 65535] { R6778 += 1, R6716 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R6778 += 1, R6716 += 1, R90 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R6778 += 1, R6716 += 1 };
  s3 -> s3 [0, 65535] { R6778 += 1, R6715 += 1, R6716 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R6778 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R6780 += 1, R6718 += 1, R95 += 1, R96 += 1 };
  s0 -> s2 [0, 65535] { R6780 += 1, R6717 += 1, R6718 += 1 };
  s0 -> s3 [0, 65535] { R6780 += 1, R6718 += 1, R94 += 1, R95 += 1 };
  s0 -> s0 [0, 65535] { R6779 += 1, R6780 += 1 };
  s1 -> s1 [0, 65535] { R6780 += 1, R6718 += 1, R95 += 1, R96 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R6780 += 1 };
  s1 -> s6 [0, 65535] { R6780 += 1, R6718 += 1 };
  s2 -> s1 [0, 65535] { R6780 += 1, R6718 += 1, R95 += 1, R96 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R6780 += 1, R6717 += 1, R6718 += 1 };
  s2 -> s3 [0, 65535] { R6780 += 1, R6718 += 1, R94 += 1, R95 += 1 };
  s3 -> s1 [0, 65535] { R6780 += 1, R6718 += 1, R95 += 1, R96 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R6780 += 1, R6718 += 1, R94 += 1, R95 += 1 };
  s3 -> s5 [0, 65535] { R6780 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R6780 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R6780 += 1 };
  s6 -> s6 [0, 65535] { R6780 += 1, R6718 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 74] { R6782 += 1, R6720 += 1, R3455 += 1 };
  s0 -> s1 [0, 65535] { R6782 += 1, R6720 += 1 };
  s0 -> s0 [0, 65535] { R6781 += 1, R6782 += 1 };
  s0 -> s2 [0, 65535] { R6782 += 1, R6719 += 1, R6720 += 1 };
  s0 -> s1 [76, 65535] { R6782 += 1, R6720 += 1, R3455 += 1 };
  s1 -> s1 [0, 74] { R6782 += 1, R6720 += 1, R3455 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R6782 += 1 };
  s1 -> s1 [0, 65535] { R6782 += 1, R6720 += 1 };
  s1 -> s1 [76, 65535] { R6782 += 1, R6720 += 1, R3455 += 1 };
  s2 -> s1 [0, 74] { R6782 += 1, R6720 += 1, R3455 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R6782 += 1, R6720 += 1 };
  s2 -> s2 [0, 65535] { R6782 += 1, R6719 += 1, R6720 += 1 };
  s2 -> s1 [76, 65535] { R6782 += 1, R6720 += 1, R3455 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R6782 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 74] { R6784 += 1, R6722 += 1, R6252 += 1, R6254 += 1 };
  s0 -> s2 [0, 65535] { R6784 += 1, R6722 += 1, R6252 += 1, R6253 += 1, R6254 += 1 };
  s0 -> s0 [0, 65535] { R6783 += 1, R6784 += 1 };
  s0 -> s3 [0, 65535] { R6784 += 1, R6721 += 1, R6722 += 1 };
  s0 -> s4 [75, 75] { R6784 += 1, R6722 += 1, R6252 += 1, R6254 += 1 };
  s0 -> s1 [76, 65535] { R6784 += 1, R6722 += 1, R6252 += 1, R6254 += 1 };
  s1 -> s1 [0, 74] { R6784 += 1, R6722 += 1, R6252 += 1, R6254 += 1 };
  s1 -> s4 [75, 75] { R6784 += 1, R6722 += 1, R6252 += 1, R6254 += 1 };
  s1 -> s1 [76, 65535] { R6784 += 1, R6722 += 1, R6252 += 1, R6254 += 1 };
  s2 -> s1 [0, 74] { R6784 += 1, R6722 += 1, R6252 += 1, R6254 += 1 };
  s2 -> s2 [0, 65535] { R6784 += 1, R6722 += 1, R6252 += 1, R6253 += 1, R6254 += 1 };
  s2 -> s4 [75, 75] { R6784 += 1, R6722 += 1, R6252 += 1, R6254 += 1 };
  s2 -> s1 [76, 65535] { R6784 += 1, R6722 += 1, R6252 += 1, R6254 += 1 };
  s3 -> s1 [0, 74] { R6784 += 1, R6722 += 1, R6252 += 1, R6254 += 1 };
  s3 -> s2 [0, 65535] { R6784 += 1, R6722 += 1, R6252 += 1, R6253 += 1, R6254 += 1 };
  s3 -> s3 [0, 65535] { R6784 += 1, R6721 += 1, R6722 += 1 };
  s3 -> s4 [75, 75] { R6784 += 1, R6722 += 1, R6252 += 1, R6254 += 1 };
  s3 -> s1 [76, 65535] { R6784 += 1, R6722 += 1, R6252 += 1, R6254 += 1 };
  s4 -> s5 [0, 65535] { R6784 += 1, R6722 += 1, R6252 += 1 };
  s4 -> s6 [0, 65535] { R6784 += 1, R6722 += 1 };
  s4 -> s7 [0, 65535] { R6784 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s4 [0, 65535] { R6784 += 1, R6722 += 1, R6252 += 1, R6254 += 1 };
  s5 -> s5 [0, 65535] { R6784 += 1, R6722 += 1, R6252 += 1 };
  s5 -> s6 [0, 65535] { R6784 += 1, R6722 += 1 };
  s5 -> s7 [0, 65535] { R6784 += 1 };
  s5 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R6784 += 1, R6722 += 1 };
  s6 -> s7 [0, 65535] { R6784 += 1 };
  s6 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R6784 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  accepting s4, s8, s5, s6, s7;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 65535] { R6786 += 1, R6724 += 1, R6701 += 1, R6702 += 1, R6703 += 1 };
  s0 -> s2 [0, 65535] { R6786 += 1, R6724 += 1, R6701 += 1, R6703 += 1, R6704 += 1 };
  s0 -> s0 [0, 65535] { R6785 += 1, R6786 += 1 };
  s0 -> s3 [0, 65535] { R6786 += 1, R6724 += 1 };
  s0 -> s4 [0, 65535] { R6786 += 1, R6723 += 1, R6724 += 1 };
  s1 -> s1 [0, 65535] { R6786 += 1, R6724 += 1, R6701 += 1, R6702 += 1, R6703 += 1 };
  s1 -> s2 [0, 65535] { R6786 += 1, R6724 += 1, R6701 += 1, R6703 += 1, R6704 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R6786 += 1, R6724 += 1 };
  s1 -> s6 [0, 65535] { R6786 += 1 };
  s2 -> s2 [0, 65535] { R6786 += 1, R6724 += 1, R6701 += 1, R6703 += 1, R6704 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R6786 += 1, R6724 += 1 };
  s2 -> s6 [0, 65535] { R6786 += 1 };
  s2 -> s7 [0, 65535] { R6786 += 1, R6724 += 1, R6701 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R6786 += 1, R6724 += 1 };
  s3 -> s6 [0, 65535] { R6786 += 1 };
  s4 -> s1 [0, 65535] { R6786 += 1, R6724 += 1, R6701 += 1, R6702 += 1, R6703 += 1 };
  s4 -> s2 [0, 65535] { R6786 += 1, R6724 += 1, R6701 += 1, R6703 += 1, R6704 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s3 [0, 65535] { R6786 += 1, R6724 += 1 };
  s4 -> s4 [0, 65535] { R6786 += 1, R6723 += 1, R6724 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6786 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s3 [0, 65535] { R6786 += 1, R6724 += 1 };
  s7 -> s6 [0, 65535] { R6786 += 1 };
  s7 -> s7 [0, 65535] { R6786 += 1, R6724 += 1, R6701 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R6788 += 1, R6744 += 1, R21 += 1 };
  s0 -> s2 [0, 65535] { R6788 += 1, R6743 += 1, R6744 += 1 };
  s0 -> s0 [0, 65535] { R6787 += 1, R6788 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R6788 += 1 };
  s1 -> s1 [0, 65535] { R6788 += 1, R6744 += 1, R21 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R6788 += 1, R6744 += 1, R21 += 1 };
  s2 -> s2 [0, 65535] { R6788 += 1, R6743 += 1, R6744 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R6788 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 69] { R6790 += 1, R6746 += 1 };
  s0 -> s2 [0, 65535] { R6790 += 1, R6745 += 1, R6746 += 1 };
  s0 -> s0 [0, 65535] { R6789 += 1, R6790 += 1 };
  s0 -> s3 [70, 70] { R6790 += 1, R6746 += 1 };
  s0 -> s4 [70, 70] { R6790 += 1, R6746 += 1 };
  s0 -> s5 [75, 75] { R6790 += 1, R6746 += 1 };
  s0 -> s1 [76, 65535] { R6790 += 1, R6746 += 1 };
  s1 -> s1 [0, 69] { R6790 += 1, R6746 += 1 };
  s1 -> s3 [70, 70] { R6790 += 1, R6746 += 1 };
  s1 -> s4 [70, 70] { R6790 += 1, R6746 += 1 };
  s1 -> s5 [75, 75] { R6790 += 1, R6746 += 1 };
  s1 -> s1 [76, 65535] { R6790 += 1, R6746 += 1 };
  s2 -> s1 [0, 69] { R6790 += 1, R6746 += 1 };
  s2 -> s2 [0, 65535] { R6790 += 1, R6745 += 1, R6746 += 1 };
  s2 -> s3 [70, 70] { R6790 += 1, R6746 += 1 };
  s2 -> s4 [70, 70] { R6790 += 1, R6746 += 1 };
  s2 -> s5 [75, 75] { R6790 += 1, R6746 += 1 };
  s2 -> s1 [76, 65535] { R6790 += 1, R6746 += 1 };
  s4 -> s4 [0, 70] { R6790 += 1, R6746 += 1 };
  s4 -> s8 [75, 75] { R6790 += 1, R6746 += 1 };
  s4 -> s4 [76, 65535] { R6790 += 1, R6746 += 1 };
  s5 -> s5 [0, 69] { R6790 += 1, R6746 += 1 };
  s5 -> s5 [0, 65535] { R6790 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [70, 70] { R6790 += 1, R6746 += 1 };
  s5 -> s8 [70, 70] { R6790 += 1, R6746 += 1 };
  s5 -> s5 [75, 65535] { R6790 += 1, R6746 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R6790 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 70] { R6790 += 1, R6746 += 1 };
  s8 -> s8 [0, 65535] { R6790 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [75, 65535] { R6790 += 1, R6746 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 69] { R6792 += 1, R6748 += 1, R83 += 1 };
  s0 -> s2 [0, 65535] { R6792 += 1, R6747 += 1, R6748 += 1 };
  s0 -> s0 [0, 65535] { R6791 += 1, R6792 += 1 };
  s0 -> s3 [70, 70] { R6792 += 1, R6748 += 1, R83 += 1 };
  s0 -> s4 [70, 70] { R6792 += 1, R6748 += 1, R83 += 1 };
  s0 -> s1 [71, 65535] { R6792 += 1, R6748 += 1, R83 += 1 };
  s1 -> s1 [0, 69] { R6792 += 1, R6748 += 1, R83 += 1 };
  s1 -> s1 [0, 65535] { R6792 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [70, 70] { R6792 += 1, R6748 += 1, R83 += 1 };
  s1 -> s4 [70, 70] { R6792 += 1, R6748 += 1, R83 += 1 };
  s1 -> s1 [71, 65535] { R6792 += 1, R6748 += 1, R83 += 1 };
  s2 -> s1 [0, 69] { R6792 += 1, R6748 += 1, R83 += 1 };
  s2 -> s2 [0, 65535] { R6792 += 1, R6747 += 1, R6748 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [70, 70] { R6792 += 1, R6748 += 1, R83 += 1 };
  s2 -> s4 [70, 70] { R6792 += 1, R6748 += 1, R83 += 1 };
  s2 -> s1 [71, 65535] { R6792 += 1, R6748 += 1, R83 += 1 };
  s3 -> s3 [0, 65535] { R6792 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R6792 += 1 };
  s4 -> s4 [0, 65535] { R6792 += 1, R6748 += 1, R83 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R6792 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 69] { R6794 += 1, R6750 += 1, R85 += 1 };
  s0 -> s2 [0, 65535] { R6794 += 1, R6749 += 1, R6750 += 1 };
  s0 -> s0 [0, 65535] { R6793 += 1, R6794 += 1 };
  s0 -> s3 [70, 70] { R6794 += 1, R6750 += 1, R85 += 1 };
  s0 -> s4 [70, 70] { R6794 += 1, R6750 += 1, R85 += 1 };
  s0 -> s1 [71, 65535] { R6794 += 1, R6750 += 1, R85 += 1 };
  s1 -> s1 [0, 69] { R6794 += 1, R6750 += 1, R85 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R6794 += 1 };
  s1 -> s3 [70, 70] { R6794 += 1, R6750 += 1, R85 += 1 };
  s1 -> s4 [70, 70] { R6794 += 1, R6750 += 1, R85 += 1 };
  s1 -> s1 [71, 65535] { R6794 += 1, R6750 += 1, R85 += 1 };
  s2 -> s1 [0, 69] { R6794 += 1, R6750 += 1, R85 += 1 };
  s2 -> s2 [0, 65535] { R6794 += 1, R6749 += 1, R6750 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [70, 70] { R6794 += 1, R6750 += 1, R85 += 1 };
  s2 -> s4 [70, 70] { R6794 += 1, R6750 += 1, R85 += 1 };
  s2 -> s1 [71, 65535] { R6794 += 1, R6750 += 1, R85 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R6794 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R6794 += 1, R6750 += 1, R85 += 1 };
  s4 -> s6 [0, 65535] { R6794 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6794 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 69] { R6796 += 1, R6752 += 1, R88 += 1 };
  s0 -> s2 [0, 69] { R6796 += 1, R6752 += 1, R87 += 1, R88 += 1 };
  s0 -> s0 [0, 65535] { R6795 += 1, R6796 += 1 };
  s0 -> s3 [0, 65535] { R6796 += 1, R6751 += 1, R6752 += 1 };
  s0 -> s4 [70, 70] { R6796 += 1, R6752 += 1, R88 += 1 };
  s0 -> s5 [70, 70] { R6796 += 1, R6752 += 1, R87 += 1, R88 += 1 };
  s0 -> s6 [70, 70] { R6796 += 1, R6752 += 1, R87 += 1, R88 += 1 };
  s0 -> s7 [70, 70] { R6796 += 1, R6752 += 1, R88 += 1 };
  s0 -> s1 [71, 74] { R6796 += 1, R6752 += 1, R88 += 1 };
  s0 -> s2 [71, 65535] { R6796 += 1, R6752 += 1, R87 += 1, R88 += 1 };
  s0 -> s8 [75, 75] { R6796 += 1, R6752 += 1, R88 += 1 };
  s0 -> s1 [76, 65535] { R6796 += 1, R6752 += 1, R88 += 1 };
  s1 -> s1 [0, 69] { R6796 += 1, R6752 += 1, R88 += 1 };
  s1 -> s4 [70, 70] { R6796 += 1, R6752 += 1, R88 += 1 };
  s1 -> s7 [70, 70] { R6796 += 1, R6752 += 1, R88 += 1 };
  s1 -> s1 [71, 74] { R6796 += 1, R6752 += 1, R88 += 1 };
  s1 -> s8 [75, 75] { R6796 += 1, R6752 += 1, R88 += 1 };
  s1 -> s1 [76, 65535] { R6796 += 1, R6752 += 1, R88 += 1 };
  s2 -> s1 [0, 69] { R6796 += 1, R6752 += 1, R88 += 1 };
  s2 -> s2 [0, 69] { R6796 += 1, R6752 += 1, R87 += 1, R88 += 1 };
  s2 -> s4 [70, 70] { R6796 += 1, R6752 += 1, R88 += 1 };
  s2 -> s5 [70, 70] { R6796 += 1, R6752 += 1, R87 += 1, R88 += 1 };
  s2 -> s6 [70, 70] { R6796 += 1, R6752 += 1, R87 += 1, R88 += 1 };
  s2 -> s7 [70, 70] { R6796 += 1, R6752 += 1, R88 += 1 };
  s2 -> s1 [71, 74] { R6796 += 1, R6752 += 1, R88 += 1 };
  s2 -> s2 [71, 65535] { R6796 += 1, R6752 += 1, R87 += 1, R88 += 1 };
  s2 -> s8 [75, 75] { R6796 += 1, R6752 += 1, R88 += 1 };
  s2 -> s1 [76, 65535] { R6796 += 1, R6752 += 1, R88 += 1 };
  s3 -> s1 [0, 69] { R6796 += 1, R6752 += 1, R88 += 1 };
  s3 -> s2 [0, 69] { R6796 += 1, R6752 += 1, R87 += 1, R88 += 1 };
  s3 -> s3 [0, 65535] { R6796 += 1, R6751 += 1, R6752 += 1 };
  s3 -> s4 [70, 70] { R6796 += 1, R6752 += 1, R88 += 1 };
  s3 -> s5 [70, 70] { R6796 += 1, R6752 += 1, R87 += 1, R88 += 1 };
  s3 -> s6 [70, 70] { R6796 += 1, R6752 += 1, R87 += 1, R88 += 1 };
  s3 -> s7 [70, 70] { R6796 += 1, R6752 += 1, R88 += 1 };
  s3 -> s1 [71, 74] { R6796 += 1, R6752 += 1, R88 += 1 };
  s3 -> s2 [71, 65535] { R6796 += 1, R6752 += 1, R87 += 1, R88 += 1 };
  s3 -> s8 [75, 75] { R6796 += 1, R6752 += 1, R88 += 1 };
  s3 -> s1 [76, 65535] { R6796 += 1, R6752 += 1, R88 += 1 };
  s5 -> s7 [0, 74] { R6796 += 1, R6752 += 1, R88 += 1 };
  s5 -> s5 [0, 65535] { R6796 += 1, R6752 += 1, R87 += 1, R88 += 1 };
  s5 -> s11 [75, 75] { R6796 += 1, R6752 += 1, R88 += 1 };
  s5 -> s7 [76, 65535] { R6796 += 1, R6752 += 1, R88 += 1 };
  s7 -> s7 [0, 74] { R6796 += 1, R6752 += 1, R88 += 1 };
  s7 -> s11 [75, 75] { R6796 += 1, R6752 += 1, R88 += 1 };
  s7 -> s7 [76, 65535] { R6796 += 1, R6752 += 1, R88 += 1 };
  s8 -> s8 [0, 69] { R6796 += 1, R6752 += 1, R88 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R6796 += 1 };
  s8 -> s10 [70, 70] { R6796 += 1, R6752 += 1, R88 += 1 };
  s8 -> s11 [70, 70] { R6796 += 1, R6752 += 1, R88 += 1 };
  s8 -> s8 [71, 65535] { R6796 += 1, R6752 += 1, R88 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R6796 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s12 [0, 65535] { R6796 += 1 };
  s11 -> s11 [0, 65535] { R6796 += 1, R6752 += 1, R88 += 1 };
  s11 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R6796 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 69] { R6798 += 1, R6754 += 1, R91 += 1, R92 += 1 };
  s0 -> s2 [0, 65535] { R6798 += 1, R6753 += 1, R6754 += 1 };
  s0 -> s0 [0, 65535] { R6797 += 1, R6798 += 1 };
  s0 -> s3 [70, 70] { R6798 += 1, R6754 += 1, R91 += 1, R92 += 1 };
  s0 -> s4 [70, 70] { R6798 += 1, R6754 += 1, R91 += 1, R92 += 1 };
  s0 -> s1 [71, 65535] { R6798 += 1, R6754 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 69] { R6798 += 1, R6754 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 65535] { R6798 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [70, 70] { R6798 += 1, R6754 += 1, R91 += 1, R92 += 1 };
  s1 -> s4 [70, 70] { R6798 += 1, R6754 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [71, 65535] { R6798 += 1, R6754 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [0, 69] { R6798 += 1, R6754 += 1, R91 += 1, R92 += 1 };
  s2 -> s2 [0, 65535] { R6798 += 1, R6753 += 1, R6754 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [70, 70] { R6798 += 1, R6754 += 1, R91 += 1, R92 += 1 };
  s2 -> s4 [70, 70] { R6798 += 1, R6754 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [71, 65535] { R6798 += 1, R6754 += 1, R91 += 1, R92 += 1 };
  s3 -> s3 [0, 65535] { R6798 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R6798 += 1 };
  s4 -> s4 [0, 65535] { R6798 += 1, R6754 += 1, R91 += 1, R92 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R6798 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 69] { R6800 += 1, R6756 += 1, R3452 += 1 };
  s0 -> s2 [0, 69] { R6800 += 1, R6756 += 1, R3451 += 1, R3452 += 1 };
  s0 -> s3 [0, 69] { R6800 += 1, R6756 += 1, R3452 += 1, R3453 += 1 };
  s0 -> s0 [0, 65535] { R6799 += 1, R6800 += 1 };
  s0 -> s4 [0, 65535] { R6800 += 1, R6755 += 1, R6756 += 1 };
  s0 -> s5 [70, 70] { R6800 += 1, R6756 += 1, R3451 += 1, R3452 += 1 };
  s0 -> s6 [70, 70] { R6800 += 1, R6756 += 1, R3451 += 1, R3452 += 1 };
  s0 -> s7 [70, 70] { R6800 += 1, R6756 += 1, R3452 += 1 };
  s0 -> s8 [70, 70] { R6800 += 1, R6756 += 1, R3452 += 1, R3453 += 1 };
  s0 -> s9 [70, 70] { R6800 += 1, R6756 += 1, R3452 += 1, R3453 += 1 };
  s0 -> s10 [70, 70] { R6800 += 1, R6756 += 1, R3452 += 1 };
  s0 -> s1 [71, 74] { R6800 += 1, R6756 += 1, R3452 += 1 };
  s0 -> s2 [71, 65535] { R6800 += 1, R6756 += 1, R3451 += 1, R3452 += 1 };
  s0 -> s3 [71, 65535] { R6800 += 1, R6756 += 1, R3452 += 1, R3453 += 1 };
  s0 -> s1 [76, 65535] { R6800 += 1, R6756 += 1, R3452 += 1 };
  s1 -> s1 [0, 69] { R6800 += 1, R6756 += 1, R3452 += 1 };
  s1 -> s12 [0, 65535];
  s1 -> s1 [0, 65535] { R6800 += 1 };
  s1 -> s7 [70, 70] { R6800 += 1, R6756 += 1 };
  s1 -> s10 [70, 70] { R6800 += 1, R6756 += 1 };
  s1 -> s1 [71, 74] { R6800 += 1, R6756 += 1, R3452 += 1 };
  s1 -> s1 [71, 65535] { R6800 += 1, R6756 += 1 };
  s1 -> s1 [76, 65535] { R6800 += 1, R6756 += 1, R3452 += 1 };
  s2 -> s1 [0, 69] { R6800 += 1, R6756 += 1, R3452 += 1 };
  s2 -> s2 [0, 69] { R6800 += 1, R6756 += 1, R3451 += 1, R3452 += 1 };
  s2 -> s3 [0, 69] { R6800 += 1, R6756 += 1, R3452 += 1, R3453 += 1 };
  s2 -> s5 [70, 70] { R6800 += 1, R6756 += 1, R3451 += 1, R3452 += 1 };
  s2 -> s6 [70, 70] { R6800 += 1, R6756 += 1, R3451 += 1, R3452 += 1 };
  s2 -> s7 [70, 70] { R6800 += 1, R6756 += 1, R3452 += 1 };
  s2 -> s8 [70, 70] { R6800 += 1, R6756 += 1, R3452 += 1, R3453 += 1 };
  s2 -> s9 [70, 70] { R6800 += 1, R6756 += 1, R3452 += 1, R3453 += 1 };
  s2 -> s10 [70, 70] { R6800 += 1, R6756 += 1, R3452 += 1 };
  s2 -> s1 [71, 74] { R6800 += 1, R6756 += 1, R3452 += 1 };
  s2 -> s2 [71, 65535] { R6800 += 1, R6756 += 1, R3451 += 1, R3452 += 1 };
  s2 -> s3 [71, 65535] { R6800 += 1, R6756 += 1, R3452 += 1, R3453 += 1 };
  s2 -> s1 [76, 65535] { R6800 += 1, R6756 += 1, R3452 += 1 };
  s3 -> s1 [0, 69] { R6800 += 1, R6756 += 1, R3452 += 1 };
  s3 -> s3 [0, 69] { R6800 += 1, R6756 += 1, R3452 += 1, R3453 += 1 };
  s3 -> s7 [70, 70] { R6800 += 1, R6756 += 1, R3452 += 1 };
  s3 -> s8 [70, 70] { R6800 += 1, R6756 += 1, R3452 += 1, R3453 += 1 };
  s3 -> s9 [70, 70] { R6800 += 1, R6756 += 1, R3452 += 1, R3453 += 1 };
  s3 -> s10 [70, 70] { R6800 += 1, R6756 += 1, R3452 += 1 };
  s3 -> s1 [71, 74] { R6800 += 1, R6756 += 1, R3452 += 1 };
  s3 -> s3 [71, 65535] { R6800 += 1, R6756 += 1, R3452 += 1, R3453 += 1 };
  s3 -> s1 [76, 65535] { R6800 += 1, R6756 += 1, R3452 += 1 };
  s4 -> s1 [0, 69] { R6800 += 1, R6756 += 1, R3452 += 1 };
  s4 -> s2 [0, 69] { R6800 += 1, R6756 += 1, R3451 += 1, R3452 += 1 };
  s4 -> s3 [0, 69] { R6800 += 1, R6756 += 1, R3452 += 1, R3453 += 1 };
  s4 -> s4 [0, 65535] { R6800 += 1, R6755 += 1, R6756 += 1 };
  s4 -> s5 [70, 70] { R6800 += 1, R6756 += 1, R3451 += 1, R3452 += 1 };
  s4 -> s6 [70, 70] { R6800 += 1, R6756 += 1, R3451 += 1, R3452 += 1 };
  s4 -> s7 [70, 70] { R6800 += 1, R6756 += 1, R3452 += 1 };
  s4 -> s8 [70, 70] { R6800 += 1, R6756 += 1, R3452 += 1, R3453 += 1 };
  s4 -> s9 [70, 70] { R6800 += 1, R6756 += 1, R3452 += 1, R3453 += 1 };
  s4 -> s10 [70, 70] { R6800 += 1, R6756 += 1, R3452 += 1 };
  s4 -> s1 [71, 74] { R6800 += 1, R6756 += 1, R3452 += 1 };
  s4 -> s2 [71, 65535] { R6800 += 1, R6756 += 1, R3451 += 1, R3452 += 1 };
  s4 -> s3 [71, 65535] { R6800 += 1, R6756 += 1, R3452 += 1, R3453 += 1 };
  s4 -> s1 [76, 65535] { R6800 += 1, R6756 += 1, R3452 += 1 };
  s6 -> s10 [0, 74] { R6800 += 1, R6756 += 1, R3452 += 1 };
  s6 -> s6 [0, 65535] { R6800 += 1, R6756 += 1, R3451 += 1, R3452 += 1 };
  s6 -> s9 [0, 65535] { R6800 += 1, R6756 += 1, R3452 += 1, R3453 += 1 };
  s6 -> s10 [76, 65535] { R6800 += 1, R6756 += 1, R3452 += 1 };
  s7 -> s7 [0, 65535] { R6800 += 1 };
  s7 -> s12 [0, 65535];
  s9 -> s10 [0, 74] { R6800 += 1, R6756 += 1, R3452 += 1 };
  s9 -> s9 [0, 65535] { R6800 += 1, R6756 += 1, R3452 += 1, R3453 += 1 };
  s9 -> s10 [76, 65535] { R6800 += 1, R6756 += 1, R3452 += 1 };
  s10 -> s10 [0, 74] { R6800 += 1, R6756 += 1, R3452 += 1 };
  s10 -> s11 [0, 65535] { R6800 += 1 };
  s10 -> s12 [0, 65535];
  s10 -> s10 [0, 65535] { R6800 += 1, R6756 += 1 };
  s10 -> s10 [76, 65535] { R6800 += 1, R6756 += 1, R3452 += 1 };
  s11 -> s11 [0, 65535] { R6800 += 1 };
  s11 -> s12 [0, 65535];
  s12 -> s12 [0, 65535];
  accepting s12, s1, s7, s10, s11;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 69] { R6802 += 1, R6758 += 1, R6247 += 1, R6248 += 1 };
  s0 -> s2 [0, 69] { R6802 += 1, R6758 += 1, R6248 += 1, R6249 += 1, R6250 += 1 };
  s0 -> s0 [0, 65535] { R6801 += 1, R6802 += 1 };
  s0 -> s3 [0, 65535] { R6802 += 1, R6757 += 1, R6758 += 1 };
  s0 -> s4 [70, 70] { R6802 += 1, R6758 += 1, R6247 += 1, R6248 += 1 };
  s0 -> s5 [70, 70] { R6802 += 1, R6758 += 1, R6247 += 1, R6248 += 1 };
  s0 -> s6 [70, 70] { R6802 += 1, R6758 += 1, R6248 += 1, R6249 += 1, R6250 += 1 };
  s0 -> s7 [70, 70] { R6802 += 1, R6758 += 1, R6248 += 1, R6249 += 1, R6250 += 1 };
  s0 -> s1 [71, 65535] { R6802 += 1, R6758 += 1, R6247 += 1, R6248 += 1 };
  s0 -> s2 [71, 65535] { R6802 += 1, R6758 += 1, R6248 += 1, R6249 += 1, R6250 += 1 };
  s1 -> s1 [0, 69] { R6802 += 1, R6758 += 1, R6247 += 1, R6248 += 1 };
  s1 -> s2 [0, 69] { R6802 += 1, R6758 += 1, R6248 += 1, R6249 += 1, R6250 += 1 };
  s1 -> s4 [70, 70] { R6802 += 1, R6758 += 1, R6247 += 1, R6248 += 1 };
  s1 -> s5 [70, 70] { R6802 += 1, R6758 += 1, R6247 += 1, R6248 += 1 };
  s1 -> s6 [70, 70] { R6802 += 1, R6758 += 1, R6248 += 1, R6249 += 1, R6250 += 1 };
  s1 -> s7 [70, 70] { R6802 += 1, R6758 += 1, R6248 += 1, R6249 += 1, R6250 += 1 };
  s1 -> s1 [71, 65535] { R6802 += 1, R6758 += 1, R6247 += 1, R6248 += 1 };
  s1 -> s2 [71, 65535] { R6802 += 1, R6758 += 1, R6248 += 1, R6249 += 1, R6250 += 1 };
  s2 -> s2 [0, 69] { R6802 += 1, R6758 += 1, R6248 += 1, R6249 += 1, R6250 += 1 };
  s2 -> s2 [0, 65535] { R6802 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s6 [70, 70] { R6802 += 1, R6758 += 1, R6248 += 1, R6249 += 1, R6250 += 1 };
  s2 -> s7 [70, 70] { R6802 += 1, R6758 += 1, R6248 += 1, R6249 += 1, R6250 += 1 };
  s2 -> s2 [71, 65535] { R6802 += 1, R6758 += 1, R6248 += 1, R6249 += 1, R6250 += 1 };
  s3 -> s1 [0, 69] { R6802 += 1, R6758 += 1, R6247 += 1, R6248 += 1 };
  s3 -> s2 [0, 69] { R6802 += 1, R6758 += 1, R6248 += 1, R6249 += 1, R6250 += 1 };
  s3 -> s3 [0, 65535] { R6802 += 1, R6757 += 1, R6758 += 1 };
  s3 -> s4 [70, 70] { R6802 += 1, R6758 += 1, R6247 += 1, R6248 += 1 };
  s3 -> s5 [70, 70] { R6802 += 1, R6758 += 1, R6247 += 1, R6248 += 1 };
  s3 -> s6 [70, 70] { R6802 += 1, R6758 += 1, R6248 += 1, R6249 += 1, R6250 += 1 };
  s3 -> s7 [70, 70] { R6802 += 1, R6758 += 1, R6248 += 1, R6249 += 1, R6250 += 1 };
  s3 -> s1 [71, 65535] { R6802 += 1, R6758 += 1, R6247 += 1, R6248 += 1 };
  s3 -> s2 [71, 65535] { R6802 += 1, R6758 += 1, R6248 += 1, R6249 += 1, R6250 += 1 };
  s4 -> s4 [0, 65535] { R6802 += 1, R6758 += 1, R6247 += 1, R6248 += 1 };
  s4 -> s7 [0, 65535] { R6802 += 1, R6758 += 1, R6248 += 1, R6249 += 1, R6250 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R6802 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s9 [0, 65535] { R6802 += 1 };
  s7 -> s7 [0, 65535] { R6802 += 1, R6758 += 1, R6248 += 1, R6249 += 1, R6250 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R6802 += 1 };
  accepting s8, s2, s9, s6, s7;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 69] { R6804 += 1, R6760 += 1, R6696 += 1, R6697 += 1, R6698 += 1 };
  s0 -> s2 [0, 69] { R6804 += 1, R6760 += 1, R6695 += 1, R6696 += 1 };
  s0 -> s3 [0, 65535] { R6804 += 1, R6759 += 1, R6760 += 1 };
  s0 -> s0 [0, 65535] { R6803 += 1, R6804 += 1 };
  s0 -> s4 [70, 70] { R6804 += 1, R6760 += 1, R6695 += 1, R6696 += 1 };
  s0 -> s5 [70, 70] { R6804 += 1, R6760 += 1, R6696 += 1, R6697 += 1, R6698 += 1 };
  s0 -> s6 [70, 70] { R6804 += 1, R6760 += 1, R6696 += 1, R6697 += 1, R6698 += 1 };
  s0 -> s7 [70, 70] { R6804 += 1, R6760 += 1, R6695 += 1, R6696 += 1 };
  s0 -> s1 [71, 65535] { R6804 += 1, R6760 += 1, R6696 += 1, R6697 += 1, R6698 += 1 };
  s0 -> s2 [71, 65535] { R6804 += 1, R6760 += 1, R6695 += 1, R6696 += 1 };
  s1 -> s1 [0, 69] { R6804 += 1, R6760 += 1, R6696 += 1, R6697 += 1, R6698 += 1 };
  s1 -> s1 [0, 65535] { R6804 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s5 [70, 70] { R6804 += 1, R6760 += 1, R6696 += 1, R6697 += 1, R6698 += 1 };
  s1 -> s6 [70, 70] { R6804 += 1, R6760 += 1, R6696 += 1, R6697 += 1, R6698 += 1 };
  s1 -> s1 [71, 65535] { R6804 += 1, R6760 += 1, R6696 += 1, R6697 += 1, R6698 += 1 };
  s2 -> s1 [0, 69] { R6804 += 1, R6760 += 1, R6696 += 1, R6697 += 1, R6698 += 1 };
  s2 -> s2 [0, 69] { R6804 += 1, R6760 += 1, R6695 += 1, R6696 += 1 };
  s2 -> s4 [70, 70] { R6804 += 1, R6760 += 1, R6695 += 1, R6696 += 1 };
  s2 -> s5 [70, 70] { R6804 += 1, R6760 += 1, R6696 += 1, R6697 += 1, R6698 += 1 };
  s2 -> s6 [70, 70] { R6804 += 1, R6760 += 1, R6696 += 1, R6697 += 1, R6698 += 1 };
  s2 -> s7 [70, 70] { R6804 += 1, R6760 += 1, R6695 += 1, R6696 += 1 };
  s2 -> s1 [71, 65535] { R6804 += 1, R6760 += 1, R6696 += 1, R6697 += 1, R6698 += 1 };
  s2 -> s2 [71, 65535] { R6804 += 1, R6760 += 1, R6695 += 1, R6696 += 1 };
  s3 -> s1 [0, 69] { R6804 += 1, R6760 += 1, R6696 += 1, R6697 += 1, R6698 += 1 };
  s3 -> s2 [0, 69] { R6804 += 1, R6760 += 1, R6695 += 1, R6696 += 1 };
  s3 -> s3 [0, 65535] { R6804 += 1, R6759 += 1, R6760 += 1 };
  s3 -> s4 [70, 70] { R6804 += 1, R6760 += 1, R6695 += 1, R6696 += 1 };
  s3 -> s5 [70, 70] { R6804 += 1, R6760 += 1, R6696 += 1, R6697 += 1, R6698 += 1 };
  s3 -> s6 [70, 70] { R6804 += 1, R6760 += 1, R6696 += 1, R6697 += 1, R6698 += 1 };
  s3 -> s7 [70, 70] { R6804 += 1, R6760 += 1, R6695 += 1, R6696 += 1 };
  s3 -> s1 [71, 65535] { R6804 += 1, R6760 += 1, R6696 += 1, R6697 += 1, R6698 += 1 };
  s3 -> s2 [71, 65535] { R6804 += 1, R6760 += 1, R6695 += 1, R6696 += 1 };
  s5 -> s5 [0, 65535] { R6804 += 1, R6760 += 1, R6696 += 1, R6697 += 1, R6698 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s9 [0, 65535] { R6804 += 1 };
  s6 -> s6 [0, 65535] { R6804 += 1 };
  s6 -> s8 [0, 65535];
  s7 -> s5 [0, 65535] { R6804 += 1, R6760 += 1, R6696 += 1, R6697 += 1, R6698 += 1 };
  s7 -> s7 [0, 65535] { R6804 += 1, R6760 += 1, R6695 += 1, R6696 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R6804 += 1 };
  accepting s8, s5, s9, s6, s1;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [102, 102];
  accepting s1;
};
};
constraint R2 = R6722 && R3 = R6804 && R23 - R6804 = -1 && R24 = R6804 && R25 - R6804 = -1 && R26 = R6804 && R27 = 0 && R28 = 1 && R29 = 0 && R30 = 1 && R45 + R84 + R83 + -1*R6252 + -1*R6248 - R66 = 0 && R49 + R89 + R87 = 0 && R50 + R90 + R88 + -1*R6252 + -1*R6248 - R66 = 0 && R55 + R96 + R93 + -1*R6254 + -1*R6250 - R68 = 0 && R65 + R6251 + R6247 = 0 && R67 + R6253 + R6249 = 0 && R6721 = 0 && R6745 = 0 && R6746 = 0 && R6751 = 0 && R6752 = 0 && R6755 = 0 && R6756 = 0 && R6757 = 0 && R6758 = 0 && R6759 = 0 && R6760 = 0 && R6761 = 0 && R6762 = R6804 && R6763 = 0 && R6764 = R6804 && R6765 = 0 && R6766 = R6804 && R6767 = 0 && R6768 = R6804 && R6769 = 0 && R6770 = R6804 && R6771 = 0 && R6772 = R6804 && R6773 = 0 && R6774 = R6804 && R6775 = 0 && R6776 = R6804 && R6777 = 0 && R6778 = R6804 && R6779 = 0 && R6780 = R6804 && R6781 = 0 && R6782 = R6804 && R6783 = 0 && R6784 = R6804 && R6785 = 0 && R6786 = R6804 && R6787 = 0 && R6788 = R6804 && R6789 = 0 && R6790 = R6804 && R6791 = 0 && R6792 = R6804 && R6793 = 0 && R6794 = R6804 && R6795 = 0 && R6796 = R6804 && R6797 = 0 && R6798 = R6804 && R6799 = 0 && R6800 = R6804 && R6801 = 0 && R6802 = R6804 && R6803 = 0 && R12 < 1 && R15 < 1 && R16 < 1 && R47 + R86 + R85 < 1 && R61 + R3456 + R3453 < 1 && -1*R6252 + -1*R6248 - R66 < 1 && -1*R6254 + -1*R6250 - R68 < 1 && -1 < R6722 && 0 < R6804 && (R53 + R94 + R91 != 0 || R54 + R95 + R92 + -1*R6252 + -1*R6248 - R66 = 0 || R66 + R6252 + R6248 < 1) && (R59 + R3454 + R3451 != 0 || R60 + R3455 + R3452 + -1*R6252 + -1*R6248 - R66 = 0 || R66 + R6252 + R6248 < 1) && (R66 + R6252 + R6248 != 0 || ((R53 + R94 + R91 != 0 || R54 + R95 + R92 = 0 || R68 + R6254 + R6250 < 1) && (R53 + R94 + R91 = 0 || R68 + R6254 + R6250 < 1))) && (R66 + R6252 + R6248 != 0 || ((R59 + R3454 + R3451 != 0 || R60 + R3455 + R3452 = 0 || R68 + R6254 + R6250 < 1) && (R59 + R3454 + R3451 = 0 || R68 + R6254 + R6250 < 1))) && (R66 + R6252 + R6248 != 0 || ((R73 + R6700 + R6695 != 0 || R74 + R6701 + R6696 = 0 || R68 + R6254 + R6250 < 1) && (R73 + R6700 + R6695 = 0 || R68 + R6254 + R6250 < 1))) && (R68 + R6254 + R6250 != 0 || R77 + R6704 + R6699 = 0 || (R75 + R6702 + R6697 = 0 && R76 + R6703 + R6698 = 0)) && (R73 + R6700 + R6695 != 0 || R66 + R6252 + R6248 + -1*R6701 + -1*R6696 - R74 = 0 || R66 + R6252 + R6248 < 1) && (R75 + R6702 + R6697 != 0 || R68 + R6254 + R6250 + -1*R6703 + -1*R6698 - R76 = 0 || R68 + R6254 + R6250 < 1) && (R6705 != 0 || R6706 = R6722 || (R20 = 0 && R6722 = 0)) && (R6707 != 0 || R6708 = R6722 || (R20 = 0 && R6722 = 0)) && (R6709 != 0 || R6710 = R6722 || (R20 = 0 && R6722 = 0)) && (R6711 != 0 || R6712 = R6722 || (R20 = 0 && R6722 = 0)) && (R6713 != 0 || R6714 = R6722 || (R20 = 0 && R6722 = 0)) && (R6715 != 0 || R6716 = R6722 || (R20 = 0 && R6722 = 0)) && (R6717 != 0 || R6718 = R6722 || (R20 = 0 && R6722 = 0)) && (R6719 != 0 || R6720 = R6722 || (R20 = 0 && R6722 = 0)) && (R6723 != 0 || R6722 = R6724 || (R20 = 0 && R6722 = 0)) && (R21 = 0 || (R6743 = 0 && R6744 = 0)) && (R21 = 0 || (R6747 = 0 && R6748 = 0)) && (R21 = 0 || (R6749 = 0 && R6750 = 0)) && (R21 = 0 || (R6753 = 0 && R6754 = 0)) && (R22 = 0 || (R6725 = 0 && R6726 = 0)) && (R22 = 0 || (R6727 = 0 && R6728 = 0)) && (R22 = 0 || (R6729 = 0 && R6730 = 0)) && (R22 = 0 || (R6731 = 0 && R6732 = 0)) && (R22 = 0 || (R6733 = 0 && R6734 = 0)) && (R22 = 0 || (R6735 = 0 && R6736 = 0)) && (R22 = 0 || (R6737 = 0 && R6738 = 0)) && (R22 = 0 || (R6739 = 0 && R6740 = 0)) && (R22 = 0 || (R6741 = 0 && R6742 = 0)) && (R53 + R94 + R91 = 0 || R66 + R6252 + R6248 < 1) && (R59 + R3454 + R3451 = 0 || R66 + R6252 + R6248 < 1) && (R73 + R6700 + R6695 = 0 || R66 + R6252 + R6248 < 1) && (R75 + R6702 + R6697 = 0 || R68 + R6254 + R6250 < 1) && (R6705 = 0 || (R20 = 0 && R6722 = 0)) && (R6707 = 0 || (R20 = 0 && R6722 = 0)) && (R6709 = 0 || (R20 = 0 && R6722 = 0)) && (R6711 = 0 || (R20 = 0 && R6722 = 0)) && (R6713 = 0 || (R20 = 0 && R6722 = 0)) && (R6715 = 0 || (R20 = 0 && R6722 = 0)) && (R6717 = 0 || (R20 = 0 && R6722 = 0)) && (R6719 = 0 || (R20 = 0 && R6722 = 0)) && (R6723 = 0 || (R20 = 0 && R6722 = 0));
// End of Parikh automata intersection problem
