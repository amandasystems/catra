// Parikh automata intersection problem, generated by OSTRICH+
counter int R12, R15, R16, R2, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R4, R45, R47, R49, R5, R50, R53, R54, R55, R59, R60, R61, R65, R66, R67, R68, R6805, R6806, R6807, R6808, R6809, R6810, R73, R74, R75, R76, R77, R7927, R7928, R7929, R7930, R7931, R7932, R7933, R7934, R8045, R8046, R8047, R8048, R8049, R8050, R8051, R8052, R8053, R8054, R8055, R8056, R8057, R8058, R8059, R8060, R8061, R8062, R8063, R8064, R8065, R8066, R8067, R8068, R8069, R8070, R8071, R8072, R8073, R8074, R8075, R8076, R8077, R8078, R8079, R8080, R8081, R8082, R8083, R8084, R8085, R8086, R8087, R8088, R8089, R8090, R8091, R8092, R8093, R8094, R8095, R8096, R8097, R8098, R8099, R8100, R8101, R8102, R8103, R8104, R8105, R8106, R8107, R8108, R8109, R8110, R8111, R8112, R8113, R8114, R8115, R8116, R8117, R8118, R8119, R8120, R8121, R8122, R8123, R8124, R8125, R8126, R8127, R8128, R8129, R8130, R8131, R8132, R8133, R8134, R8135, R8136, R8137, R8138, R8139, R8140, R8141, R8142, R8143, R8144, R8145, R8146, R8147, R8148, R8149, R8150, R8151, R8152, R8153, R8154, R83, R84, R85, R86, R87, R88, R89, R90, R91, R92, R93, R94, R95, R96;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [70, 70];
  s0 -> s0 [71, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [70, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R15 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 69];
  s0 -> s0 [0, 65535] { R16 += 1 };
  s0 -> s2 [70, 70];
  s0 -> s1 [71, 65535];
  s1 -> s1 [0, 69];
  s1 -> s2 [70, 70];
  s1 -> s1 [71, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R24 += 1 };
  s0 -> s0 [0, 65535] { R23 += 1, R24 += 1 };
  s0 -> s2 [9, 13] { R24 += 1 };
  s0 -> s1 [14, 31] { R24 += 1 };
  s0 -> s2 [32, 32] { R24 += 1 };
  s0 -> s1 [33, 65535] { R24 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R24 += 1 };
  s2 -> s1 [0, 65535] { R24 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R25 += 1, R26 += 1 };
  s1 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R28 += 1 };
  s0 -> s0 [0, 65535] { R27 += 1, R28 += 1 };
  s0 -> s2 [9, 13] { R28 += 1 };
  s0 -> s1 [14, 31] { R28 += 1 };
  s0 -> s2 [32, 32] { R28 += 1 };
  s0 -> s1 [33, 65535] { R28 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R28 += 1 };
  s2 -> s1 [0, 65535] { R28 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R29 += 1, R30 += 1 };
  s1 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R8076 += 1, R22 += 1 };
  s0 -> s0 [0, 65535] { R8075 += 1, R8076 += 1 };
  s1 -> s1 [0, 65535] { R8076 += 1, R22 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 69] { R8078 += 1 };
  s0 -> s0 [0, 65535] { R8077 += 1, R8078 += 1 };
  s0 -> s2 [70, 70] { R8078 += 1 };
  s0 -> s3 [70, 70] { R8078 += 1 };
  s0 -> s1 [76, 65535] { R8078 += 1 };
  s1 -> s1 [0, 69] { R8078 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R8078 += 1 };
  s1 -> s3 [70, 70] { R8078 += 1 };
  s1 -> s1 [76, 65535] { R8078 += 1 };
  s2 -> s2 [0, 70] { R8078 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [76, 65535] { R8078 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 69] { R8080 += 1, R45 += 1 };
  s0 -> s0 [0, 65535] { R8079 += 1, R8080 += 1 };
  s0 -> s2 [70, 70] { R8080 += 1, R45 += 1 };
  s0 -> s3 [70, 70] { R8080 += 1, R45 += 1 };
  s0 -> s1 [71, 65535] { R8080 += 1, R45 += 1 };
  s1 -> s1 [0, 69] { R8080 += 1, R45 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R8080 += 1, R45 += 1 };
  s1 -> s3 [70, 70] { R8080 += 1, R45 += 1 };
  s1 -> s1 [71, 65535] { R8080 += 1, R45 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8080 += 1, R45 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 69] { R8082 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R8081 += 1, R8082 += 1 };
  s0 -> s2 [70, 70] { R8082 += 1, R47 += 1 };
  s0 -> s3 [70, 70] { R8082 += 1, R47 += 1 };
  s0 -> s1 [71, 65535] { R8082 += 1, R47 += 1 };
  s1 -> s1 [0, 69] { R8082 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R8082 += 1, R47 += 1 };
  s1 -> s3 [70, 70] { R8082 += 1, R47 += 1 };
  s1 -> s1 [71, 65535] { R8082 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8082 += 1, R47 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 69] { R8084 += 1, R49 += 1, R50 += 1 };
  s0 -> s0 [0, 65535] { R8083 += 1, R8084 += 1 };
  s0 -> s2 [70, 70] { R8084 += 1, R49 += 1, R50 += 1 };
  s0 -> s3 [70, 70] { R8084 += 1, R49 += 1, R50 += 1 };
  s0 -> s1 [71, 65535] { R8084 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 69] { R8084 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R8084 += 1, R49 += 1, R50 += 1 };
  s1 -> s3 [70, 70] { R8084 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [71, 65535] { R8084 += 1, R49 += 1, R50 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8084 += 1, R49 += 1, R50 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 69] { R8086 += 1, R53 += 1, R54 += 1 };
  s0 -> s0 [0, 65535] { R8085 += 1, R8086 += 1 };
  s0 -> s2 [70, 70] { R8086 += 1, R53 += 1, R54 += 1 };
  s0 -> s3 [70, 70] { R8086 += 1, R53 += 1, R54 += 1 };
  s0 -> s1 [71, 65535] { R8086 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 69] { R8086 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R8086 += 1, R53 += 1, R54 += 1 };
  s1 -> s3 [70, 70] { R8086 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [71, 65535] { R8086 += 1, R53 += 1, R54 += 1 };
  s2 -> s2 [0, 65535] { R8086 += 1, R53 += 1, R54 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 69] { R8088 += 1, R59 += 1, R60 += 1 };
  s0 -> s0 [0, 65535] { R8087 += 1, R8088 += 1 };
  s0 -> s2 [70, 70] { R8088 += 1, R59 += 1, R60 += 1 };
  s0 -> s3 [70, 70] { R8088 += 1, R59 += 1, R60 += 1 };
  s0 -> s1 [71, 65535] { R8088 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 69] { R8088 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R8088 += 1, R59 += 1, R60 += 1 };
  s1 -> s3 [70, 70] { R8088 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [71, 65535] { R8088 += 1, R59 += 1, R60 += 1 };
  s2 -> s2 [0, 65535] { R8088 += 1, R59 += 1, R60 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 69] { R8090 += 1, R65 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R8089 += 1, R8090 += 1 };
  s0 -> s2 [70, 70] { R8090 += 1, R65 += 1, R66 += 1 };
  s0 -> s3 [70, 70] { R8090 += 1, R65 += 1, R66 += 1 };
  s0 -> s1 [71, 65535] { R8090 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 69] { R8090 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R8090 += 1, R65 += 1, R66 += 1 };
  s1 -> s3 [70, 70] { R8090 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [71, 65535] { R8090 += 1, R65 += 1, R66 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8090 += 1, R65 += 1, R66 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 69] { R8092 += 1, R73 += 1, R74 += 1 };
  s0 -> s0 [0, 65535] { R8091 += 1, R8092 += 1 };
  s0 -> s2 [70, 70] { R8092 += 1, R73 += 1, R74 += 1 };
  s0 -> s3 [70, 70] { R8092 += 1, R73 += 1, R74 += 1 };
  s0 -> s1 [71, 65535] { R8092 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 69] { R8092 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R8092 += 1, R73 += 1, R74 += 1 };
  s1 -> s3 [70, 70] { R8092 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [71, 65535] { R8092 += 1, R73 += 1, R74 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8092 += 1, R73 += 1, R74 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 69] { R8112 += 1 };
  s0 -> s0 [0, 65535] { R8111 += 1, R8112 += 1 };
  s0 -> s2 [70, 70] { R8112 += 1 };
  s0 -> s1 [71, 65535] { R8112 += 1 };
  s1 -> s1 [0, 69] { R8112 += 1 };
  s1 -> s2 [70, 70] { R8112 += 1 };
  s1 -> s1 [71, 65535] { R8112 += 1 };
  s2 -> s2 [0, 65535] { R8112 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R8114 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R8113 += 1, R8114 += 1 };
  s1 -> s1 [0, 65535] { R8114 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 69] { R8116 += 1 };
  s0 -> s2 [0, 65535] { R8116 += 1, R12 += 1 };
  s0 -> s0 [0, 65535] { R8115 += 1, R8116 += 1 };
  s0 -> s3 [70, 70] { R8116 += 1 };
  s0 -> s1 [71, 65535] { R8116 += 1 };
  s1 -> s1 [0, 69] { R8116 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [70, 70] { R8116 += 1 };
  s1 -> s1 [71, 65535] { R8116 += 1 };
  s2 -> s1 [0, 69] { R8116 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8116 += 1, R12 += 1 };
  s2 -> s3 [70, 70] { R8116 += 1 };
  s2 -> s1 [71, 65535] { R8116 += 1 };
  s3 -> s3 [0, 65535] { R8116 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 69] { R8118 += 1, R8056 += 1 };
  s0 -> s2 [0, 65535] { R8118 += 1, R8055 += 1, R8056 += 1 };
  s0 -> s0 [0, 65535] { R8117 += 1, R8118 += 1 };
  s0 -> s1 [71, 65535] { R8118 += 1, R8056 += 1 };
  s1 -> s1 [0, 69] { R8118 += 1, R8056 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R8118 += 1 };
  s1 -> s1 [71, 65535] { R8118 += 1, R8056 += 1 };
  s2 -> s1 [0, 69] { R8118 += 1, R8056 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R8118 += 1, R8055 += 1, R8056 += 1 };
  s2 -> s1 [71, 65535] { R8118 += 1, R8056 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R8120 += 1, R8058 += 1, R20 += 1 };
  s0 -> s2 [0, 65535] { R8120 += 1, R8057 += 1, R8058 += 1 };
  s0 -> s0 [0, 65535] { R8119 += 1, R8120 += 1 };
  s1 -> s1 [0, 65535] { R8120 += 1, R8058 += 1, R20 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R8120 += 1 };
  s2 -> s1 [0, 65535] { R8120 += 1, R8058 += 1, R20 += 1 };
  s2 -> s2 [0, 65535] { R8120 += 1, R8057 += 1, R8058 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8120 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 70] { R8122 += 1, R8060 += 1 };
  s0 -> s0 [0, 65535] { R8121 += 1, R8122 += 1 };
  s0 -> s2 [0, 65535] { R8122 += 1, R8059 += 1, R8060 += 1 };
  s0 -> s1 [75, 65535] { R8122 += 1, R8060 += 1 };
  s1 -> s1 [0, 70] { R8122 += 1, R8060 += 1 };
  s1 -> s1 [0, 65535] { R8122 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [75, 65535] { R8122 += 1, R8060 += 1 };
  s2 -> s1 [0, 70] { R8122 += 1, R8060 += 1 };
  s2 -> s2 [0, 65535] { R8122 += 1, R8059 += 1, R8060 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [75, 65535] { R8122 += 1, R8060 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s0 [0, 65535] { R8123 += 1, R8124 += 1 };
  s0 -> s1 [0, 65535] { R8124 += 1, R8062 += 1, R84 += 1 };
  s0 -> s2 [0, 65535] { R8124 += 1, R8061 += 1, R8062 += 1 };
  s1 -> s1 [0, 65535] { R8124 += 1, R8062 += 1, R84 += 1 };
  s1 -> s4 [0, 65535] { R8124 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R8124 += 1, R8062 += 1, R84 += 1 };
  s2 -> s2 [0, 65535] { R8124 += 1, R8061 += 1, R8062 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8124 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 74] { R8126 += 1, R8064 += 1 };
  s0 -> s2 [0, 65535] { R8126 += 1, R8063 += 1, R8064 += 1 };
  s0 -> s0 [0, 65535] { R8125 += 1, R8126 += 1 };
  s0 -> s3 [0, 65535] { R8126 += 1, R8064 += 1, R86 += 1 };
  s0 -> s1 [76, 65535] { R8126 += 1, R8064 += 1 };
  s1 -> s1 [0, 74] { R8126 += 1, R8064 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R8126 += 1 };
  s1 -> s1 [76, 65535] { R8126 += 1, R8064 += 1 };
  s2 -> s1 [0, 74] { R8126 += 1, R8064 += 1 };
  s2 -> s2 [0, 65535] { R8126 += 1, R8063 += 1, R8064 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R8126 += 1, R8064 += 1, R86 += 1 };
  s2 -> s1 [76, 65535] { R8126 += 1, R8064 += 1 };
  s3 -> s1 [0, 74] { R8126 += 1, R8064 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8126 += 1, R8064 += 1, R86 += 1 };
  s3 -> s5 [0, 65535] { R8126 += 1 };
  s3 -> s1 [76, 65535] { R8126 += 1, R8064 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8126 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 65535] { R8128 += 1, R8065 += 1, R8066 += 1 };
  s0 -> s0 [0, 65535] { R8127 += 1, R8128 += 1 };
  s0 -> s2 [0, 65535] { R8128 += 1, R8066 += 1 };
  s0 -> s3 [0, 65535] { R8128 += 1, R8066 += 1, R90 += 1 };
  s1 -> s1 [0, 65535] { R8128 += 1, R8065 += 1, R8066 += 1 };
  s1 -> s2 [0, 65535] { R8128 += 1, R8066 += 1 };
  s1 -> s3 [0, 65535] { R8128 += 1, R8066 += 1, R90 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s4 [0, 65535] { R8128 += 1 };
  s2 -> s2 [0, 65535] { R8128 += 1, R8066 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s4 [0, 65535] { R8128 += 1 };
  s3 -> s2 [0, 65535] { R8128 += 1, R8066 += 1 };
  s3 -> s3 [0, 65535] { R8128 += 1, R8066 += 1, R90 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8128 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R8130 += 1, R8067 += 1, R8068 += 1 };
  s0 -> s0 [0, 65535] { R8129 += 1, R8130 += 1 };
  s0 -> s2 [0, 65535] { R8130 += 1, R8068 += 1, R94 += 1, R95 += 1 };
  s0 -> s3 [0, 65535] { R8130 += 1, R8068 += 1, R95 += 1, R96 += 1 };
  s1 -> s1 [0, 65535] { R8130 += 1, R8067 += 1, R8068 += 1 };
  s1 -> s2 [0, 65535] { R8130 += 1, R8068 += 1, R94 += 1, R95 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [0, 65535] { R8130 += 1, R8068 += 1, R95 += 1, R96 += 1 };
  s2 -> s4 [0, 65535] { R8130 += 1 };
  s2 -> s2 [0, 65535] { R8130 += 1, R8068 += 1, R94 += 1, R95 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R8130 += 1, R8068 += 1, R95 += 1, R96 += 1 };
  s3 -> s4 [0, 65535] { R8130 += 1 };
  s3 -> s5 [0, 65535] { R8130 += 1, R8068 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R8130 += 1, R8068 += 1, R95 += 1, R96 += 1 };
  s4 -> s4 [0, 65535] { R8130 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s4 [0, 65535] { R8130 += 1 };
  s5 -> s5 [0, 65535] { R8130 += 1, R8068 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 74] { R8132 += 1, R8070 += 1, R6809 += 1 };
  s0 -> s2 [0, 65535] { R8132 += 1, R8070 += 1, R6809 += 1, R6810 += 1 };
  s0 -> s3 [0, 65535] { R8132 += 1, R8069 += 1, R8070 += 1 };
  s0 -> s0 [0, 65535] { R8131 += 1, R8132 += 1 };
  s0 -> s4 [0, 65535] { R8132 += 1, R8070 += 1 };
  s0 -> s1 [76, 65535] { R8132 += 1, R8070 += 1, R6809 += 1 };
  s1 -> s1 [0, 74] { R8132 += 1, R8070 += 1, R6809 += 1 };
  s1 -> s1 [0, 65535] { R8132 += 1, R8070 += 1 };
  s1 -> s5 [0, 65535] { R8132 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [76, 65535] { R8132 += 1, R8070 += 1, R6809 += 1 };
  s2 -> s1 [0, 74] { R8132 += 1, R8070 += 1, R6809 += 1 };
  s2 -> s2 [0, 65535] { R8132 += 1, R8070 += 1, R6809 += 1, R6810 += 1 };
  s2 -> s4 [0, 65535] { R8132 += 1, R8070 += 1 };
  s2 -> s5 [0, 65535] { R8132 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s1 [76, 65535] { R8132 += 1, R8070 += 1, R6809 += 1 };
  s3 -> s1 [0, 74] { R8132 += 1, R8070 += 1, R6809 += 1 };
  s3 -> s2 [0, 65535] { R8132 += 1, R8070 += 1, R6809 += 1, R6810 += 1 };
  s3 -> s3 [0, 65535] { R8132 += 1, R8069 += 1, R8070 += 1 };
  s3 -> s4 [0, 65535] { R8132 += 1, R8070 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s1 [76, 65535] { R8132 += 1, R8070 += 1, R6809 += 1 };
  s4 -> s4 [0, 65535] { R8132 += 1, R8070 += 1 };
  s4 -> s5 [0, 65535] { R8132 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R8132 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s0 [0, 65535] { R8133 += 1, R8134 += 1 };
  s0 -> s1 [0, 65535] { R8134 += 1, R8072 += 1 };
  s0 -> s2 [0, 65535] { R8134 += 1, R8071 += 1, R8072 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R8134 += 1, R8072 += 1 };
  s1 -> s4 [0, 65535] { R8134 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R8134 += 1, R8072 += 1 };
  s2 -> s2 [0, 65535] { R8134 += 1, R8071 += 1, R8072 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8134 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 65535] { R8136 += 1, R8074 += 1 };
  s0 -> s2 [0, 65535] { R8136 += 1, R8073 += 1, R8074 += 1 };
  s0 -> s0 [0, 65535] { R8135 += 1, R8136 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R8136 += 1 };
  s1 -> s1 [0, 65535] { R8136 += 1, R8074 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R8136 += 1, R8074 += 1 };
  s2 -> s2 [0, 65535] { R8136 += 1, R8073 += 1, R8074 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8136 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R8138 += 1, R8093 += 1, R8094 += 1 };
  s0 -> s2 [0, 65535] { R8138 += 1, R8094 += 1, R21 += 1 };
  s0 -> s0 [0, 65535] { R8137 += 1, R8138 += 1 };
  s1 -> s1 [0, 65535] { R8138 += 1, R8093 += 1, R8094 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R8138 += 1, R8094 += 1, R21 += 1 };
  s2 -> s3 [0, 65535] { R8138 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8138 += 1, R8094 += 1, R21 += 1 };
  s3 -> s3 [0, 65535] { R8138 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 69] { R8140 += 1, R8096 += 1 };
  s0 -> s0 [0, 65535] { R8139 += 1, R8140 += 1 };
  s0 -> s2 [0, 65535] { R8140 += 1, R8095 += 1, R8096 += 1 };
  s0 -> s3 [70, 70] { R8140 += 1, R8096 += 1 };
  s0 -> s4 [70, 70] { R8140 += 1, R8096 += 1 };
  s0 -> s5 [75, 75] { R8140 += 1, R8096 += 1 };
  s0 -> s1 [76, 65535] { R8140 += 1, R8096 += 1 };
  s1 -> s1 [0, 69] { R8140 += 1, R8096 += 1 };
  s1 -> s3 [70, 70] { R8140 += 1, R8096 += 1 };
  s1 -> s4 [70, 70] { R8140 += 1, R8096 += 1 };
  s1 -> s5 [75, 75] { R8140 += 1, R8096 += 1 };
  s1 -> s1 [76, 65535] { R8140 += 1, R8096 += 1 };
  s2 -> s1 [0, 69] { R8140 += 1, R8096 += 1 };
  s2 -> s2 [0, 65535] { R8140 += 1, R8095 += 1, R8096 += 1 };
  s2 -> s3 [70, 70] { R8140 += 1, R8096 += 1 };
  s2 -> s4 [70, 70] { R8140 += 1, R8096 += 1 };
  s2 -> s5 [75, 75] { R8140 += 1, R8096 += 1 };
  s2 -> s1 [76, 65535] { R8140 += 1, R8096 += 1 };
  s3 -> s3 [0, 70] { R8140 += 1, R8096 += 1 };
  s3 -> s7 [75, 75] { R8140 += 1, R8096 += 1 };
  s3 -> s3 [76, 65535] { R8140 += 1, R8096 += 1 };
  s5 -> s5 [0, 69] { R8140 += 1, R8096 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R8140 += 1 };
  s5 -> s7 [70, 70] { R8140 += 1, R8096 += 1 };
  s5 -> s8 [70, 70] { R8140 += 1, R8096 += 1 };
  s5 -> s5 [75, 65535] { R8140 += 1, R8096 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 70] { R8140 += 1, R8096 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R8140 += 1 };
  s7 -> s7 [75, 65535] { R8140 += 1, R8096 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R8140 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 69] { R8142 += 1, R8098 += 1, R83 += 1 };
  s0 -> s2 [0, 65535] { R8142 += 1, R8097 += 1, R8098 += 1 };
  s0 -> s0 [0, 65535] { R8141 += 1, R8142 += 1 };
  s0 -> s3 [70, 70] { R8142 += 1, R8098 += 1, R83 += 1 };
  s0 -> s4 [70, 70] { R8142 += 1, R8098 += 1, R83 += 1 };
  s0 -> s1 [71, 65535] { R8142 += 1, R8098 += 1, R83 += 1 };
  s1 -> s1 [0, 69] { R8142 += 1, R8098 += 1, R83 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R8142 += 1 };
  s1 -> s3 [70, 70] { R8142 += 1, R8098 += 1, R83 += 1 };
  s1 -> s4 [70, 70] { R8142 += 1, R8098 += 1, R83 += 1 };
  s1 -> s1 [71, 65535] { R8142 += 1, R8098 += 1, R83 += 1 };
  s2 -> s1 [0, 69] { R8142 += 1, R8098 += 1, R83 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R8142 += 1, R8097 += 1, R8098 += 1 };
  s2 -> s3 [70, 70] { R8142 += 1, R8098 += 1, R83 += 1 };
  s2 -> s4 [70, 70] { R8142 += 1, R8098 += 1, R83 += 1 };
  s2 -> s1 [71, 65535] { R8142 += 1, R8098 += 1, R83 += 1 };
  s3 -> s3 [0, 65535] { R8142 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8142 += 1, R8098 += 1, R83 += 1 };
  s4 -> s6 [0, 65535] { R8142 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8142 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 69] { R8144 += 1, R8100 += 1, R85 += 1 };
  s0 -> s2 [0, 65535] { R8144 += 1, R8099 += 1, R8100 += 1 };
  s0 -> s0 [0, 65535] { R8143 += 1, R8144 += 1 };
  s0 -> s3 [70, 70] { R8144 += 1, R8100 += 1, R85 += 1 };
  s0 -> s4 [70, 70] { R8144 += 1, R8100 += 1, R85 += 1 };
  s0 -> s1 [71, 65535] { R8144 += 1, R8100 += 1, R85 += 1 };
  s1 -> s1 [0, 69] { R8144 += 1, R8100 += 1, R85 += 1 };
  s1 -> s1 [0, 65535] { R8144 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [70, 70] { R8144 += 1, R8100 += 1, R85 += 1 };
  s1 -> s4 [70, 70] { R8144 += 1, R8100 += 1, R85 += 1 };
  s1 -> s1 [71, 65535] { R8144 += 1, R8100 += 1, R85 += 1 };
  s2 -> s1 [0, 69] { R8144 += 1, R8100 += 1, R85 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R8144 += 1, R8099 += 1, R8100 += 1 };
  s2 -> s3 [70, 70] { R8144 += 1, R8100 += 1, R85 += 1 };
  s2 -> s4 [70, 70] { R8144 += 1, R8100 += 1, R85 += 1 };
  s2 -> s1 [71, 65535] { R8144 += 1, R8100 += 1, R85 += 1 };
  s3 -> s3 [0, 65535] { R8144 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8144 += 1, R8100 += 1, R85 += 1 };
  s4 -> s6 [0, 65535] { R8144 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8144 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 69] { R8146 += 1, R8102 += 1, R88 += 1 };
  s0 -> s2 [0, 69] { R8146 += 1, R8102 += 1, R87 += 1, R88 += 1 };
  s0 -> s0 [0, 65535] { R8145 += 1, R8146 += 1 };
  s0 -> s3 [0, 65535] { R8146 += 1, R8101 += 1, R8102 += 1 };
  s0 -> s4 [70, 70] { R8146 += 1, R8102 += 1, R87 += 1, R88 += 1 };
  s0 -> s5 [70, 70] { R8146 += 1, R8102 += 1, R88 += 1 };
  s0 -> s6 [70, 70] { R8146 += 1, R8102 += 1, R88 += 1 };
  s0 -> s7 [70, 70] { R8146 += 1, R8102 += 1, R87 += 1, R88 += 1 };
  s0 -> s1 [71, 74] { R8146 += 1, R8102 += 1, R88 += 1 };
  s0 -> s2 [71, 65535] { R8146 += 1, R8102 += 1, R87 += 1, R88 += 1 };
  s0 -> s8 [75, 75] { R8146 += 1, R8102 += 1, R88 += 1 };
  s0 -> s1 [76, 65535] { R8146 += 1, R8102 += 1, R88 += 1 };
  s1 -> s1 [0, 69] { R8146 += 1, R8102 += 1, R88 += 1 };
  s1 -> s5 [70, 70] { R8146 += 1, R8102 += 1, R88 += 1 };
  s1 -> s6 [70, 70] { R8146 += 1, R8102 += 1, R88 += 1 };
  s1 -> s1 [71, 74] { R8146 += 1, R8102 += 1, R88 += 1 };
  s1 -> s8 [75, 75] { R8146 += 1, R8102 += 1, R88 += 1 };
  s1 -> s1 [76, 65535] { R8146 += 1, R8102 += 1, R88 += 1 };
  s2 -> s1 [0, 69] { R8146 += 1, R8102 += 1, R88 += 1 };
  s2 -> s2 [0, 69] { R8146 += 1, R8102 += 1, R87 += 1, R88 += 1 };
  s2 -> s4 [70, 70] { R8146 += 1, R8102 += 1, R87 += 1, R88 += 1 };
  s2 -> s5 [70, 70] { R8146 += 1, R8102 += 1, R88 += 1 };
  s2 -> s6 [70, 70] { R8146 += 1, R8102 += 1, R88 += 1 };
  s2 -> s7 [70, 70] { R8146 += 1, R8102 += 1, R87 += 1, R88 += 1 };
  s2 -> s1 [71, 74] { R8146 += 1, R8102 += 1, R88 += 1 };
  s2 -> s2 [71, 65535] { R8146 += 1, R8102 += 1, R87 += 1, R88 += 1 };
  s2 -> s8 [75, 75] { R8146 += 1, R8102 += 1, R88 += 1 };
  s2 -> s1 [76, 65535] { R8146 += 1, R8102 += 1, R88 += 1 };
  s3 -> s1 [0, 69] { R8146 += 1, R8102 += 1, R88 += 1 };
  s3 -> s2 [0, 69] { R8146 += 1, R8102 += 1, R87 += 1, R88 += 1 };
  s3 -> s3 [0, 65535] { R8146 += 1, R8101 += 1, R8102 += 1 };
  s3 -> s4 [70, 70] { R8146 += 1, R8102 += 1, R87 += 1, R88 += 1 };
  s3 -> s5 [70, 70] { R8146 += 1, R8102 += 1, R88 += 1 };
  s3 -> s6 [70, 70] { R8146 += 1, R8102 += 1, R88 += 1 };
  s3 -> s7 [70, 70] { R8146 += 1, R8102 += 1, R87 += 1, R88 += 1 };
  s3 -> s1 [71, 74] { R8146 += 1, R8102 += 1, R88 += 1 };
  s3 -> s2 [71, 65535] { R8146 += 1, R8102 += 1, R87 += 1, R88 += 1 };
  s3 -> s8 [75, 75] { R8146 += 1, R8102 += 1, R88 += 1 };
  s3 -> s1 [76, 65535] { R8146 += 1, R8102 += 1, R88 += 1 };
  s5 -> s5 [0, 74] { R8146 += 1, R8102 += 1, R88 += 1 };
  s5 -> s10 [75, 75] { R8146 += 1, R8102 += 1, R88 += 1 };
  s5 -> s5 [76, 65535] { R8146 += 1, R8102 += 1, R88 += 1 };
  s7 -> s5 [0, 74] { R8146 += 1, R8102 += 1, R88 += 1 };
  s7 -> s7 [0, 65535] { R8146 += 1, R8102 += 1, R87 += 1, R88 += 1 };
  s7 -> s10 [75, 75] { R8146 += 1, R8102 += 1, R88 += 1 };
  s7 -> s5 [76, 65535] { R8146 += 1, R8102 += 1, R88 += 1 };
  s8 -> s8 [0, 69] { R8146 += 1, R8102 += 1, R88 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R8146 += 1 };
  s8 -> s10 [70, 70] { R8146 += 1, R8102 += 1, R88 += 1 };
  s8 -> s11 [70, 70] { R8146 += 1, R8102 += 1, R88 += 1 };
  s8 -> s8 [71, 65535] { R8146 += 1, R8102 += 1, R88 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R8146 += 1, R8102 += 1, R88 += 1 };
  s10 -> s9 [0, 65535];
  s10 -> s12 [0, 65535] { R8146 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R8146 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R8146 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 69] { R8148 += 1, R8104 += 1, R91 += 1, R92 += 1 };
  s0 -> s0 [0, 65535] { R8147 += 1, R8148 += 1 };
  s0 -> s2 [0, 65535] { R8148 += 1, R8103 += 1, R8104 += 1 };
  s0 -> s3 [70, 70] { R8148 += 1, R8104 += 1, R91 += 1, R92 += 1 };
  s0 -> s4 [70, 70] { R8148 += 1, R8104 += 1, R91 += 1, R92 += 1 };
  s0 -> s1 [71, 65535] { R8148 += 1, R8104 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 69] { R8148 += 1, R8104 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 65535] { R8148 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [70, 70] { R8148 += 1, R8104 += 1, R91 += 1, R92 += 1 };
  s1 -> s4 [70, 70] { R8148 += 1, R8104 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [71, 65535] { R8148 += 1, R8104 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [0, 69] { R8148 += 1, R8104 += 1, R91 += 1, R92 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R8148 += 1, R8103 += 1, R8104 += 1 };
  s2 -> s3 [70, 70] { R8148 += 1, R8104 += 1, R91 += 1, R92 += 1 };
  s2 -> s4 [70, 70] { R8148 += 1, R8104 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [71, 65535] { R8148 += 1, R8104 += 1, R91 += 1, R92 += 1 };
  s3 -> s3 [0, 65535] { R8148 += 1, R8104 += 1, R91 += 1, R92 += 1 };
  s3 -> s6 [0, 65535] { R8148 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8148 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8148 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 69] { R8150 += 1, R8106 += 1, R6806 += 1, R6807 += 1 };
  s0 -> s2 [0, 69] { R8150 += 1, R8106 += 1, R6805 += 1, R6806 += 1 };
  s0 -> s0 [0, 65535] { R8149 += 1, R8150 += 1 };
  s0 -> s3 [0, 65535] { R8150 += 1, R8105 += 1, R8106 += 1 };
  s0 -> s4 [70, 70] { R8150 += 1, R8106 += 1, R6806 += 1, R6807 += 1 };
  s0 -> s5 [70, 70] { R8150 += 1, R8106 += 1, R6806 += 1, R6807 += 1 };
  s0 -> s6 [70, 70] { R8150 += 1, R8106 += 1, R6805 += 1, R6806 += 1 };
  s0 -> s7 [70, 70] { R8150 += 1, R8106 += 1, R6805 += 1, R6806 += 1 };
  s0 -> s1 [71, 65535] { R8150 += 1, R8106 += 1, R6806 += 1, R6807 += 1 };
  s0 -> s2 [71, 65535] { R8150 += 1, R8106 += 1, R6805 += 1, R6806 += 1 };
  s1 -> s1 [0, 69] { R8150 += 1, R8106 += 1, R6806 += 1, R6807 += 1 };
  s1 -> s1 [0, 65535] { R8150 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s4 [70, 70] { R8150 += 1, R8106 += 1, R6806 += 1, R6807 += 1 };
  s1 -> s5 [70, 70] { R8150 += 1, R8106 += 1, R6806 += 1, R6807 += 1 };
  s1 -> s1 [71, 65535] { R8150 += 1, R8106 += 1, R6806 += 1, R6807 += 1 };
  s2 -> s1 [0, 69] { R8150 += 1, R8106 += 1, R6806 += 1, R6807 += 1 };
  s2 -> s2 [0, 69] { R8150 += 1, R8106 += 1, R6805 += 1, R6806 += 1 };
  s2 -> s4 [70, 70] { R8150 += 1, R8106 += 1, R6806 += 1, R6807 += 1 };
  s2 -> s5 [70, 70] { R8150 += 1, R8106 += 1, R6806 += 1, R6807 += 1 };
  s2 -> s6 [70, 70] { R8150 += 1, R8106 += 1, R6805 += 1, R6806 += 1 };
  s2 -> s7 [70, 70] { R8150 += 1, R8106 += 1, R6805 += 1, R6806 += 1 };
  s2 -> s1 [71, 65535] { R8150 += 1, R8106 += 1, R6806 += 1, R6807 += 1 };
  s2 -> s2 [71, 65535] { R8150 += 1, R8106 += 1, R6805 += 1, R6806 += 1 };
  s3 -> s1 [0, 69] { R8150 += 1, R8106 += 1, R6806 += 1, R6807 += 1 };
  s3 -> s2 [0, 69] { R8150 += 1, R8106 += 1, R6805 += 1, R6806 += 1 };
  s3 -> s3 [0, 65535] { R8150 += 1, R8105 += 1, R8106 += 1 };
  s3 -> s4 [70, 70] { R8150 += 1, R8106 += 1, R6806 += 1, R6807 += 1 };
  s3 -> s5 [70, 70] { R8150 += 1, R8106 += 1, R6806 += 1, R6807 += 1 };
  s3 -> s6 [70, 70] { R8150 += 1, R8106 += 1, R6805 += 1, R6806 += 1 };
  s3 -> s7 [70, 70] { R8150 += 1, R8106 += 1, R6805 += 1, R6806 += 1 };
  s3 -> s1 [71, 65535] { R8150 += 1, R8106 += 1, R6806 += 1, R6807 += 1 };
  s3 -> s2 [71, 65535] { R8150 += 1, R8106 += 1, R6805 += 1, R6806 += 1 };
  s4 -> s4 [0, 65535] { R8150 += 1, R8106 += 1, R6806 += 1, R6807 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s9 [0, 65535] { R8150 += 1 };
  s5 -> s5 [0, 65535] { R8150 += 1 };
  s5 -> s8 [0, 65535];
  s7 -> s4 [0, 65535] { R8150 += 1, R8106 += 1, R6806 += 1, R6807 += 1 };
  s7 -> s7 [0, 65535] { R8150 += 1, R8106 += 1, R6805 += 1, R6806 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R8150 += 1 };
  accepting s4, s8, s5, s9, s1;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 69] { R8152 += 1, R8108 += 1, R7928 += 1, R7930 += 1 };
  s0 -> s2 [0, 69] { R8152 += 1, R8108 += 1, R7928 += 1, R7929 += 1, R7930 += 1 };
  s0 -> s3 [0, 69] { R8152 += 1, R8108 += 1, R7927 += 1, R7928 += 1 };
  s0 -> s0 [0, 65535] { R8151 += 1, R8152 += 1 };
  s0 -> s4 [0, 65535] { R8152 += 1, R8107 += 1, R8108 += 1 };
  s0 -> s5 [70, 70] { R8152 += 1, R8108 += 1, R7927 += 1, R7928 += 1 };
  s0 -> s6 [70, 70] { R8152 += 1, R8108 += 1, R7928 += 1, R7930 += 1 };
  s0 -> s7 [70, 70] { R8152 += 1, R8108 += 1, R7928 += 1, R7929 += 1, R7930 += 1 };
  s0 -> s8 [70, 70] { R8152 += 1, R8108 += 1, R7927 += 1, R7928 += 1 };
  s0 -> s9 [70, 70] { R8152 += 1, R8108 += 1, R7928 += 1, R7929 += 1, R7930 += 1 };
  s0 -> s10 [70, 70] { R8152 += 1, R8108 += 1, R7928 += 1, R7930 += 1 };
  s0 -> s1 [71, 74] { R8152 += 1, R8108 += 1, R7928 += 1, R7930 += 1 };
  s0 -> s2 [71, 65535] { R8152 += 1, R8108 += 1, R7928 += 1, R7929 += 1, R7930 += 1 };
  s0 -> s3 [71, 65535] { R8152 += 1, R8108 += 1, R7927 += 1, R7928 += 1 };
  s0 -> s11 [75, 75] { R8152 += 1, R8108 += 1, R7928 += 1, R7930 += 1 };
  s0 -> s1 [76, 65535] { R8152 += 1, R8108 += 1, R7928 += 1, R7930 += 1 };
  s1 -> s1 [0, 69] { R8152 += 1, R8108 += 1, R7928 += 1, R7930 += 1 };
  s1 -> s6 [70, 70] { R8152 += 1, R8108 += 1, R7928 += 1, R7930 += 1 };
  s1 -> s10 [70, 70] { R8152 += 1, R8108 += 1, R7928 += 1, R7930 += 1 };
  s1 -> s1 [71, 74] { R8152 += 1, R8108 += 1, R7928 += 1, R7930 += 1 };
  s1 -> s11 [75, 75] { R8152 += 1, R8108 += 1, R7928 += 1, R7930 += 1 };
  s1 -> s1 [76, 65535] { R8152 += 1, R8108 += 1, R7928 += 1, R7930 += 1 };
  s2 -> s1 [0, 69] { R8152 += 1, R8108 += 1, R7928 += 1, R7930 += 1 };
  s2 -> s2 [0, 69] { R8152 += 1, R8108 += 1, R7928 += 1, R7929 += 1, R7930 += 1 };
  s2 -> s6 [70, 70] { R8152 += 1, R8108 += 1, R7928 += 1, R7930 += 1 };
  s2 -> s7 [70, 70] { R8152 += 1, R8108 += 1, R7928 += 1, R7929 += 1, R7930 += 1 };
  s2 -> s9 [70, 70] { R8152 += 1, R8108 += 1, R7928 += 1, R7929 += 1, R7930 += 1 };
  s2 -> s10 [70, 70] { R8152 += 1, R8108 += 1, R7928 += 1, R7930 += 1 };
  s2 -> s1 [71, 74] { R8152 += 1, R8108 += 1, R7928 += 1, R7930 += 1 };
  s2 -> s2 [71, 65535] { R8152 += 1, R8108 += 1, R7928 += 1, R7929 += 1, R7930 += 1 };
  s2 -> s11 [75, 75] { R8152 += 1, R8108 += 1, R7928 += 1, R7930 += 1 };
  s2 -> s1 [76, 65535] { R8152 += 1, R8108 += 1, R7928 += 1, R7930 += 1 };
  s3 -> s1 [0, 69] { R8152 += 1, R8108 += 1, R7928 += 1, R7930 += 1 };
  s3 -> s2 [0, 69] { R8152 += 1, R8108 += 1, R7928 += 1, R7929 += 1, R7930 += 1 };
  s3 -> s3 [0, 69] { R8152 += 1, R8108 += 1, R7927 += 1, R7928 += 1 };
  s3 -> s5 [70, 70] { R8152 += 1, R8108 += 1, R7927 += 1, R7928 += 1 };
  s3 -> s6 [70, 70] { R8152 += 1, R8108 += 1, R7928 += 1, R7930 += 1 };
  s3 -> s7 [70, 70] { R8152 += 1, R8108 += 1, R7928 += 1, R7929 += 1, R7930 += 1 };
  s3 -> s8 [70, 70] { R8152 += 1, R8108 += 1, R7927 += 1, R7928 += 1 };
  s3 -> s9 [70, 70] { R8152 += 1, R8108 += 1, R7928 += 1, R7929 += 1, R7930 += 1 };
  s3 -> s10 [70, 70] { R8152 += 1, R8108 += 1, R7928 += 1, R7930 += 1 };
  s3 -> s1 [71, 74] { R8152 += 1, R8108 += 1, R7928 += 1, R7930 += 1 };
  s3 -> s2 [71, 65535] { R8152 += 1, R8108 += 1, R7928 += 1, R7929 += 1, R7930 += 1 };
  s3 -> s3 [71, 65535] { R8152 += 1, R8108 += 1, R7927 += 1, R7928 += 1 };
  s3 -> s11 [75, 75] { R8152 += 1, R8108 += 1, R7928 += 1, R7930 += 1 };
  s3 -> s1 [76, 65535] { R8152 += 1, R8108 += 1, R7928 += 1, R7930 += 1 };
  s4 -> s1 [0, 69] { R8152 += 1, R8108 += 1, R7928 += 1, R7930 += 1 };
  s4 -> s2 [0, 69] { R8152 += 1, R8108 += 1, R7928 += 1, R7929 += 1, R7930 += 1 };
  s4 -> s3 [0, 69] { R8152 += 1, R8108 += 1, R7927 += 1, R7928 += 1 };
  s4 -> s4 [0, 65535] { R8152 += 1, R8107 += 1, R8108 += 1 };
  s4 -> s5 [70, 70] { R8152 += 1, R8108 += 1, R7927 += 1, R7928 += 1 };
  s4 -> s6 [70, 70] { R8152 += 1, R8108 += 1, R7928 += 1, R7930 += 1 };
  s4 -> s7 [70, 70] { R8152 += 1, R8108 += 1, R7928 += 1, R7929 += 1, R7930 += 1 };
  s4 -> s8 [70, 70] { R8152 += 1, R8108 += 1, R7927 += 1, R7928 += 1 };
  s4 -> s9 [70, 70] { R8152 += 1, R8108 += 1, R7928 += 1, R7929 += 1, R7930 += 1 };
  s4 -> s10 [70, 70] { R8152 += 1, R8108 += 1, R7928 += 1, R7930 += 1 };
  s4 -> s1 [71, 74] { R8152 += 1, R8108 += 1, R7928 += 1, R7930 += 1 };
  s4 -> s2 [71, 65535] { R8152 += 1, R8108 += 1, R7928 += 1, R7929 += 1, R7930 += 1 };
  s4 -> s3 [71, 65535] { R8152 += 1, R8108 += 1, R7927 += 1, R7928 += 1 };
  s4 -> s11 [75, 75] { R8152 += 1, R8108 += 1, R7928 += 1, R7930 += 1 };
  s4 -> s1 [76, 65535] { R8152 += 1, R8108 += 1, R7928 += 1, R7930 += 1 };
  s5 -> s10 [0, 74] { R8152 += 1, R8108 += 1, R7928 += 1, R7930 += 1 };
  s5 -> s5 [0, 65535] { R8152 += 1, R8108 += 1, R7927 += 1, R7928 += 1 };
  s5 -> s9 [0, 65535] { R8152 += 1, R8108 += 1, R7928 += 1, R7929 += 1, R7930 += 1 };
  s5 -> s15 [75, 75] { R8152 += 1, R8108 += 1, R7928 += 1, R7930 += 1 };
  s5 -> s10 [76, 65535] { R8152 += 1, R8108 += 1, R7928 += 1, R7930 += 1 };
  s9 -> s10 [0, 74] { R8152 += 1, R8108 += 1, R7928 += 1, R7930 += 1 };
  s9 -> s9 [0, 65535] { R8152 += 1, R8108 += 1, R7928 += 1, R7929 += 1, R7930 += 1 };
  s9 -> s15 [75, 75] { R8152 += 1, R8108 += 1, R7928 += 1, R7930 += 1 };
  s9 -> s10 [76, 65535] { R8152 += 1, R8108 += 1, R7928 += 1, R7930 += 1 };
  s10 -> s10 [0, 74] { R8152 += 1, R8108 += 1, R7928 += 1, R7930 += 1 };
  s10 -> s15 [75, 75] { R8152 += 1, R8108 += 1, R7928 += 1, R7930 += 1 };
  s10 -> s10 [76, 65535] { R8152 += 1, R8108 += 1, R7928 += 1, R7930 += 1 };
  s11 -> s12 [0, 69] { R8152 += 1, R8108 += 1, R7928 += 1 };
  s11 -> s11 [0, 69] { R8152 += 1, R8108 += 1, R7928 += 1, R7930 += 1 };
  s11 -> s13 [0, 69] { R8152 += 1, R8108 += 1 };
  s11 -> s14 [70, 70] { R8152 += 1, R8108 += 1, R7928 += 1 };
  s11 -> s15 [70, 70] { R8152 += 1, R8108 += 1, R7928 += 1, R7930 += 1 };
  s11 -> s16 [70, 70] { R8152 += 1, R8108 += 1 };
  s11 -> s17 [70, 70] { R8152 += 1, R8108 += 1, R7928 += 1 };
  s11 -> s18 [70, 70] { R8152 += 1, R8108 += 1, R7928 += 1, R7930 += 1 };
  s11 -> s19 [70, 70] { R8152 += 1, R8108 += 1 };
  s11 -> s12 [71, 65535] { R8152 += 1, R8108 += 1, R7928 += 1 };
  s11 -> s11 [71, 65535] { R8152 += 1, R8108 += 1, R7928 += 1, R7930 += 1 };
  s11 -> s13 [71, 65535] { R8152 += 1, R8108 += 1 };
  s12 -> s12 [0, 69] { R8152 += 1, R8108 += 1, R7928 += 1 };
  s12 -> s13 [0, 69] { R8152 += 1, R8108 += 1 };
  s12 -> s14 [70, 70] { R8152 += 1, R8108 += 1, R7928 += 1 };
  s12 -> s16 [70, 70] { R8152 += 1, R8108 += 1 };
  s12 -> s17 [70, 70] { R8152 += 1, R8108 += 1, R7928 += 1 };
  s12 -> s19 [70, 70] { R8152 += 1, R8108 += 1 };
  s12 -> s12 [71, 65535] { R8152 += 1, R8108 += 1, R7928 += 1 };
  s12 -> s13 [71, 65535] { R8152 += 1, R8108 += 1 };
  s13 -> s13 [0, 69] { R8152 += 1, R8108 += 1 };
  s13 -> s20 [0, 65535];
  s13 -> s13 [0, 65535] { R8152 += 1 };
  s13 -> s16 [70, 70] { R8152 += 1, R8108 += 1 };
  s13 -> s19 [70, 70] { R8152 += 1, R8108 += 1 };
  s13 -> s13 [71, 65535] { R8152 += 1, R8108 += 1 };
  s15 -> s15 [0, 65535] { R8152 += 1, R8108 += 1, R7928 += 1, R7930 += 1 };
  s15 -> s16 [0, 65535] { R8152 += 1, R8108 += 1 };
  s15 -> s17 [0, 65535] { R8152 += 1, R8108 += 1, R7928 += 1 };
  s16 -> s20 [0, 65535];
  s16 -> s16 [0, 65535] { R8152 += 1, R8108 += 1 };
  s16 -> s21 [0, 65535] { R8152 += 1 };
  s17 -> s16 [0, 65535] { R8152 += 1, R8108 += 1 };
  s17 -> s17 [0, 65535] { R8152 += 1, R8108 += 1, R7928 += 1 };
  s19 -> s20 [0, 65535];
  s19 -> s19 [0, 65535] { R8152 += 1 };
  s20 -> s20 [0, 65535];
  s21 -> s20 [0, 65535];
  s21 -> s21 [0, 65535] { R8152 += 1 };
  accepting s16, s19, s13, s21, s20;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 69] { R8154 += 1, R8110 += 1, R8046 += 1, R8048 += 1, R8049 += 1 };
  s0 -> s2 [0, 69] { R8154 += 1, R8110 += 1, R8046 += 1, R8047 += 1, R8048 += 1 };
  s0 -> s3 [0, 69] { R8154 += 1, R8110 += 1, R8045 += 1, R8046 += 1 };
  s0 -> s0 [0, 65535] { R8153 += 1, R8154 += 1 };
  s0 -> s4 [0, 65535] { R8154 += 1, R8109 += 1, R8110 += 1 };
  s0 -> s5 [70, 70] { R8154 += 1, R8110 += 1, R8046 += 1, R8047 += 1, R8048 += 1 };
  s0 -> s6 [70, 70] { R8154 += 1, R8110 += 1, R8046 += 1, R8048 += 1, R8049 += 1 };
  s0 -> s7 [70, 70] { R8154 += 1, R8110 += 1, R8046 += 1, R8047 += 1, R8048 += 1 };
  s0 -> s8 [70, 70] { R8154 += 1, R8110 += 1, R8045 += 1, R8046 += 1 };
  s0 -> s9 [70, 70] { R8154 += 1, R8110 += 1, R8046 += 1, R8048 += 1, R8049 += 1 };
  s0 -> s10 [70, 70] { R8154 += 1, R8110 += 1, R8045 += 1, R8046 += 1 };
  s0 -> s1 [71, 65535] { R8154 += 1, R8110 += 1, R8046 += 1, R8048 += 1, R8049 += 1 };
  s0 -> s2 [71, 65535] { R8154 += 1, R8110 += 1, R8046 += 1, R8047 += 1, R8048 += 1 };
  s0 -> s3 [71, 65535] { R8154 += 1, R8110 += 1, R8045 += 1, R8046 += 1 };
  s1 -> s1 [0, 69] { R8154 += 1, R8110 += 1, R8046 += 1, R8048 += 1, R8049 += 1 };
  s1 -> s15 [0, 69] { R8154 += 1, R8110 += 1 };
  s1 -> s17 [0, 69] { R8154 += 1, R8110 += 1, R8046 += 1 };
  s1 -> s11 [70, 70] { R8154 += 1, R8110 += 1 };
  s1 -> s12 [70, 70] { R8154 += 1, R8110 += 1, R8046 += 1 };
  s1 -> s6 [70, 70] { R8154 += 1, R8110 += 1, R8046 += 1, R8048 += 1, R8049 += 1 };
  s1 -> s16 [70, 70] { R8154 += 1, R8110 += 1 };
  s1 -> s9 [70, 70] { R8154 += 1, R8110 += 1, R8046 += 1, R8048 += 1, R8049 += 1 };
  s1 -> s18 [70, 70] { R8154 += 1, R8110 += 1, R8046 += 1 };
  s1 -> s1 [71, 65535] { R8154 += 1, R8110 += 1, R8046 += 1, R8048 += 1, R8049 += 1 };
  s1 -> s15 [71, 65535] { R8154 += 1, R8110 += 1 };
  s1 -> s17 [71, 65535] { R8154 += 1, R8110 += 1, R8046 += 1 };
  s2 -> s1 [0, 69] { R8154 += 1, R8110 += 1, R8046 += 1, R8048 += 1, R8049 += 1 };
  s2 -> s2 [0, 69] { R8154 += 1, R8110 += 1, R8046 += 1, R8047 += 1, R8048 += 1 };
  s2 -> s15 [0, 69] { R8154 += 1, R8110 += 1 };
  s2 -> s5 [70, 70] { R8154 += 1, R8110 += 1, R8046 += 1, R8047 += 1, R8048 += 1 };
  s2 -> s11 [70, 70] { R8154 += 1, R8110 += 1 };
  s2 -> s6 [70, 70] { R8154 += 1, R8110 += 1, R8046 += 1, R8048 += 1, R8049 += 1 };
  s2 -> s16 [70, 70] { R8154 += 1, R8110 += 1 };
  s2 -> s7 [70, 70] { R8154 += 1, R8110 += 1, R8046 += 1, R8047 += 1, R8048 += 1 };
  s2 -> s9 [70, 70] { R8154 += 1, R8110 += 1, R8046 += 1, R8048 += 1, R8049 += 1 };
  s2 -> s1 [71, 65535] { R8154 += 1, R8110 += 1, R8046 += 1, R8048 += 1, R8049 += 1 };
  s2 -> s2 [71, 65535] { R8154 += 1, R8110 += 1, R8046 += 1, R8047 += 1, R8048 += 1 };
  s2 -> s15 [71, 65535] { R8154 += 1, R8110 += 1 };
  s3 -> s1 [0, 69] { R8154 += 1, R8110 += 1, R8046 += 1, R8048 += 1, R8049 += 1 };
  s3 -> s2 [0, 69] { R8154 += 1, R8110 += 1, R8046 += 1, R8047 += 1, R8048 += 1 };
  s3 -> s3 [0, 69] { R8154 += 1, R8110 += 1, R8045 += 1, R8046 += 1 };
  s3 -> s5 [70, 70] { R8154 += 1, R8110 += 1, R8046 += 1, R8047 += 1, R8048 += 1 };
  s3 -> s6 [70, 70] { R8154 += 1, R8110 += 1, R8046 += 1, R8048 += 1, R8049 += 1 };
  s3 -> s7 [70, 70] { R8154 += 1, R8110 += 1, R8046 += 1, R8047 += 1, R8048 += 1 };
  s3 -> s8 [70, 70] { R8154 += 1, R8110 += 1, R8045 += 1, R8046 += 1 };
  s3 -> s9 [70, 70] { R8154 += 1, R8110 += 1, R8046 += 1, R8048 += 1, R8049 += 1 };
  s3 -> s10 [70, 70] { R8154 += 1, R8110 += 1, R8045 += 1, R8046 += 1 };
  s3 -> s1 [71, 65535] { R8154 += 1, R8110 += 1, R8046 += 1, R8048 += 1, R8049 += 1 };
  s3 -> s2 [71, 65535] { R8154 += 1, R8110 += 1, R8046 += 1, R8047 += 1, R8048 += 1 };
  s3 -> s3 [71, 65535] { R8154 += 1, R8110 += 1, R8045 += 1, R8046 += 1 };
  s4 -> s1 [0, 69] { R8154 += 1, R8110 += 1, R8046 += 1, R8048 += 1, R8049 += 1 };
  s4 -> s2 [0, 69] { R8154 += 1, R8110 += 1, R8046 += 1, R8047 += 1, R8048 += 1 };
  s4 -> s3 [0, 69] { R8154 += 1, R8110 += 1, R8045 += 1, R8046 += 1 };
  s4 -> s4 [0, 65535] { R8154 += 1, R8109 += 1, R8110 += 1 };
  s4 -> s5 [70, 70] { R8154 += 1, R8110 += 1, R8046 += 1, R8047 += 1, R8048 += 1 };
  s4 -> s6 [70, 70] { R8154 += 1, R8110 += 1, R8046 += 1, R8048 += 1, R8049 += 1 };
  s4 -> s7 [70, 70] { R8154 += 1, R8110 += 1, R8046 += 1, R8047 += 1, R8048 += 1 };
  s4 -> s8 [70, 70] { R8154 += 1, R8110 += 1, R8045 += 1, R8046 += 1 };
  s4 -> s9 [70, 70] { R8154 += 1, R8110 += 1, R8046 += 1, R8048 += 1, R8049 += 1 };
  s4 -> s10 [70, 70] { R8154 += 1, R8110 += 1, R8045 += 1, R8046 += 1 };
  s4 -> s1 [71, 65535] { R8154 += 1, R8110 += 1, R8046 += 1, R8048 += 1, R8049 += 1 };
  s4 -> s2 [71, 65535] { R8154 += 1, R8110 += 1, R8046 += 1, R8047 += 1, R8048 += 1 };
  s4 -> s3 [71, 65535] { R8154 += 1, R8110 += 1, R8045 += 1, R8046 += 1 };
  s7 -> s11 [0, 65535] { R8154 += 1, R8110 += 1 };
  s7 -> s7 [0, 65535] { R8154 += 1, R8110 += 1, R8046 += 1, R8047 += 1, R8048 += 1 };
  s7 -> s9 [0, 65535] { R8154 += 1, R8110 += 1, R8046 += 1, R8048 += 1, R8049 += 1 };
  s9 -> s11 [0, 65535] { R8154 += 1, R8110 += 1 };
  s9 -> s12 [0, 65535] { R8154 += 1, R8110 += 1, R8046 += 1 };
  s9 -> s9 [0, 65535] { R8154 += 1, R8110 += 1, R8046 += 1, R8048 += 1, R8049 += 1 };
  s10 -> s7 [0, 65535] { R8154 += 1, R8110 += 1, R8046 += 1, R8047 += 1, R8048 += 1 };
  s10 -> s9 [0, 65535] { R8154 += 1, R8110 += 1, R8046 += 1, R8048 += 1, R8049 += 1 };
  s10 -> s10 [0, 65535] { R8154 += 1, R8110 += 1, R8045 += 1, R8046 += 1 };
  s11 -> s13 [0, 65535] { R8154 += 1 };
  s11 -> s11 [0, 65535] { R8154 += 1, R8110 += 1 };
  s11 -> s14 [0, 65535];
  s12 -> s11 [0, 65535] { R8154 += 1, R8110 += 1 };
  s12 -> s12 [0, 65535] { R8154 += 1, R8110 += 1, R8046 += 1 };
  s13 -> s13 [0, 65535] { R8154 += 1 };
  s13 -> s14 [0, 65535];
  s14 -> s14 [0, 65535];
  s15 -> s15 [0, 69] { R8154 += 1, R8110 += 1 };
  s15 -> s14 [0, 65535];
  s15 -> s15 [0, 65535] { R8154 += 1 };
  s15 -> s11 [70, 70] { R8154 += 1, R8110 += 1 };
  s15 -> s16 [70, 70] { R8154 += 1, R8110 += 1 };
  s15 -> s15 [71, 65535] { R8154 += 1, R8110 += 1 };
  s16 -> s16 [0, 65535] { R8154 += 1 };
  s16 -> s14 [0, 65535];
  s17 -> s15 [0, 69] { R8154 += 1, R8110 += 1 };
  s17 -> s17 [0, 69] { R8154 += 1, R8110 += 1, R8046 += 1 };
  s17 -> s11 [70, 70] { R8154 += 1, R8110 += 1 };
  s17 -> s12 [70, 70] { R8154 += 1, R8110 += 1, R8046 += 1 };
  s17 -> s16 [70, 70] { R8154 += 1, R8110 += 1 };
  s17 -> s18 [70, 70] { R8154 += 1, R8110 += 1, R8046 += 1 };
  s17 -> s15 [71, 65535] { R8154 += 1, R8110 += 1 };
  s17 -> s17 [71, 65535] { R8154 += 1, R8110 += 1, R8046 += 1 };
  accepting s16, s13, s14, s15, s11;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [102, 102];
  accepting s1;
};
};
constraint R3 = R8154 && R23 - R8154 = -1 && R24 = R8154 && R25 - R8154 = -1 && R26 = R8154 && R27 = 0 && R28 = 1 && R29 = 0 && R30 = 1 && R45 + R84 + R83 + -1*R7932 + -1*R7928 - R66 = 0 && R49 + R89 + R87 = 0 && R50 + R90 + R88 + -1*R7932 + -1*R7928 - R66 = 0 && R55 + R96 + R93 + -1*R7934 + -1*R7930 - R68 = 0 && R65 + R7931 + R7927 = 0 && R67 + R7933 + R7929 = 0 && R8095 = 0 && R8096 = 0 && R8101 = 0 && R8102 = 0 && R8105 = 0 && R8106 = 0 && R8107 = 0 && R8108 = 0 && R8109 = 0 && R8110 = 0 && R8111 = 0 && R8112 = R8154 && R8113 = 0 && R8114 = R8154 && R8115 = 0 && R8116 = R8154 && R8117 = 0 && R8118 = R8154 && R8119 = 0 && R8120 = R8154 && R8121 = 0 && R8122 = R8154 && R8123 = 0 && R8124 = R8154 && R8125 = 0 && R8126 = R8154 && R8127 = 0 && R8128 = R8154 && R8129 = 0 && R8130 = R8154 && R8131 = 0 && R8132 = R8154 && R8133 = 0 && R8134 = R8154 && R8135 = 0 && R8136 = R8154 && R8137 = 0 && R8138 = R8154 && R8139 = 0 && R8140 = R8154 && R8141 = 0 && R8142 = R8154 && R8143 = 0 && R8144 = R8154 && R8145 = 0 && R8146 = R8154 && R8147 = 0 && R8148 = R8154 && R8149 = 0 && R8150 = R8154 && R8151 = 0 && R8152 = R8154 && R8153 = 0 && -1 < R2 && R12 < 1 && R15 < 1 && R16 < 1 && R47 + R86 + R85 < 1 && R61 + R6810 + R6807 < 1 && -1*R7932 + -1*R7928 - R66 < 1 && -1*R7934 + -1*R7930 - R68 < 1 && 0 < R8154 && (R2 != 0 || R20 = 0 || (R8055 = 0 && R8056 = 0)) && (R2 != 0 || R20 = 0 || (R8057 = 0 && R8058 = 0)) && (R2 != 0 || R20 = 0 || (R8059 = 0 && R8060 = 0)) && (R2 != 0 || R20 = 0 || (R8061 = 0 && R8062 = 0)) && (R2 != 0 || R20 = 0 || (R8063 = 0 && R8064 = 0)) && (R2 != 0 || R20 = 0 || (R8065 = 0 && R8066 = 0)) && (R2 != 0 || R20 = 0 || (R8067 = 0 && R8068 = 0)) && (R2 != 0 || R20 = 0 || (R8069 = 0 && R8070 = 0)) && (R2 != 0 || R20 = 0 || (R8071 = 0 && R8072 = 0)) && (R2 != 0 || R20 = 0 || (R8073 = 0 && R8074 = 0)) && (R53 + R94 + R91 != 0 || R54 + R95 + R92 + -1*R7932 + -1*R7928 - R66 = 0 || R66 + R7932 + R7928 < 1) && (R59 + R6808 + R6805 != 0 || R60 + R6809 + R6806 + -1*R7932 + -1*R7928 - R66 = 0 || R66 + R7932 + R7928 < 1) && (R66 + R7932 + R7928 != 0 || ((R53 + R94 + R91 != 0 || R54 + R95 + R92 = 0 || R68 + R7934 + R7930 < 1) && (R53 + R94 + R91 = 0 || R68 + R7934 + R7930 < 1))) && (R66 + R7932 + R7928 != 0 || ((R59 + R6808 + R6805 != 0 || R60 + R6809 + R6806 = 0 || R68 + R7934 + R7930 < 1) && (R59 + R6808 + R6805 = 0 || R68 + R7934 + R7930 < 1))) && (R66 + R7932 + R7928 != 0 || ((R73 + R8050 + R8045 != 0 || R74 + R8051 + R8046 = 0 || R68 + R7934 + R7930 < 1) && (R73 + R8050 + R8045 = 0 || R68 + R7934 + R7930 < 1))) && (R68 + R7934 + R7930 != 0 || R77 + R8054 + R8049 = 0 || (R75 + R8052 + R8047 = 0 && R76 + R8053 + R8048 = 0)) && (R73 + R8050 + R8045 != 0 || R66 + R7932 + R7928 + -1*R8051 + -1*R8046 - R74 = 0 || R66 + R7932 + R7928 < 1) && (R75 + R8052 + R8047 != 0 || R68 + R7934 + R7930 + -1*R8053 + -1*R8048 - R76 = 0 || R68 + R7934 + R7930 < 1) && (R8055 != 0 || R2 = R8056 || R2 < 1) && (R8057 != 0 || R2 = R8058 || R2 < 1) && (R8059 != 0 || R2 = R8060 || R2 < 1) && (R8061 != 0 || R2 = R8062 || R2 < 1) && (R8063 != 0 || R2 = R8064 || R2 < 1) && (R8065 != 0 || R2 = R8066 || R2 < 1) && (R8067 != 0 || R2 = R8068 || R2 < 1) && (R8069 != 0 || R2 = R8070 || R2 < 1) && (R8071 != 0 || R2 = R8072 || R2 < 1) && (R8073 != 0 || R2 = R8074 || R2 < 1) && (R21 = 0 || (R8093 = 0 && R8094 = 0)) && (R21 = 0 || (R8097 = 0 && R8098 = 0)) && (R21 = 0 || (R8099 = 0 && R8100 = 0)) && (R21 = 0 || (R8103 = 0 && R8104 = 0)) && (R22 = 0 || (R8075 = 0 && R8076 = 0)) && (R22 = 0 || (R8077 = 0 && R8078 = 0)) && (R22 = 0 || (R8079 = 0 && R8080 = 0)) && (R22 = 0 || (R8081 = 0 && R8082 = 0)) && (R22 = 0 || (R8083 = 0 && R8084 = 0)) && (R22 = 0 || (R8085 = 0 && R8086 = 0)) && (R22 = 0 || (R8087 = 0 && R8088 = 0)) && (R22 = 0 || (R8089 = 0 && R8090 = 0)) && (R22 = 0 || (R8091 = 0 && R8092 = 0)) && (R53 + R94 + R91 = 0 || R66 + R7932 + R7928 < 1) && (R59 + R6808 + R6805 = 0 || R66 + R7932 + R7928 < 1) && (R73 + R8050 + R8045 = 0 || R66 + R7932 + R7928 < 1) && (R75 + R8052 + R8047 = 0 || R68 + R7934 + R7930 < 1) && (R8055 = 0 || R2 < 1) && (R8057 = 0 || R2 < 1) && (R8059 = 0 || R2 < 1) && (R8061 = 0 || R2 < 1) && (R8063 = 0 || R2 < 1) && (R8065 = 0 || R2 < 1) && (R8067 = 0 || R2 < 1) && (R8069 = 0 || R2 < 1) && (R8071 = 0 || R2 < 1) && (R8073 = 0 || R2 < 1);
// End of Parikh automata intersection problem
