// Parikh automata intersection problem, generated by OSTRICH+
counter int R12, R15, R16, R2, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R4, R45, R47, R49, R5, R50, R53, R54, R55, R59, R60, R61, R65, R66, R67, R68, R6805, R6806, R6807, R6808, R6809, R6810, R73, R74, R75, R76, R77, R7927, R7928, R7929, R7930, R7931, R7932, R7933, R7934, R7935, R7936, R7937, R7938, R7939, R7940, R7941, R7942, R7943, R7944, R7945, R7946, R7947, R7948, R7949, R7950, R7951, R7952, R7953, R7954, R7955, R7956, R7957, R7958, R7959, R7960, R7961, R7962, R7963, R7964, R7965, R7966, R7967, R7968, R7969, R7970, R7971, R7972, R7973, R7974, R7975, R7976, R7977, R7978, R7979, R7980, R7981, R7982, R7983, R7984, R7985, R7986, R7987, R7988, R7989, R7990, R7991, R7992, R7993, R7994, R7995, R7996, R7997, R7998, R7999, R8000, R8001, R8002, R8003, R8004, R8005, R8006, R8007, R8008, R8009, R8010, R8011, R8012, R8013, R8014, R8015, R8016, R8017, R8018, R8019, R8020, R8021, R8022, R8023, R8024, R8025, R8026, R8027, R8028, R8029, R8030, R8031, R8032, R8033, R8034, R8035, R8036, R8037, R8038, R8039, R8040, R8041, R8042, R8043, R8044, R83, R84, R85, R86, R87, R88, R89, R90, R91, R92, R93, R94, R95, R96;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [70, 70];
  s0 -> s0 [71, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [70, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R15 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 69];
  s0 -> s0 [0, 65535] { R16 += 1 };
  s0 -> s2 [70, 70];
  s0 -> s1 [71, 65535];
  s1 -> s1 [0, 69];
  s1 -> s2 [70, 70];
  s1 -> s1 [71, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R24 += 1 };
  s0 -> s0 [0, 65535] { R23 += 1, R24 += 1 };
  s0 -> s2 [9, 13] { R24 += 1 };
  s0 -> s1 [14, 31] { R24 += 1 };
  s0 -> s2 [32, 32] { R24 += 1 };
  s0 -> s1 [33, 65535] { R24 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R24 += 1 };
  s2 -> s1 [0, 65535] { R24 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R25 += 1, R26 += 1 };
  s1 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R28 += 1 };
  s0 -> s0 [0, 65535] { R27 += 1, R28 += 1 };
  s0 -> s2 [9, 13] { R28 += 1 };
  s0 -> s1 [14, 31] { R28 += 1 };
  s0 -> s2 [32, 32] { R28 += 1 };
  s0 -> s1 [33, 65535] { R28 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R28 += 1 };
  s2 -> s1 [0, 65535] { R28 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R29 += 1, R30 += 1 };
  s1 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R7965 += 1, R7966 += 1 };
  s0 -> s1 [0, 65535] { R7966 += 1, R22 += 1 };
  s1 -> s1 [0, 65535] { R7966 += 1, R22 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 69] { R7968 += 1 };
  s0 -> s0 [0, 65535] { R7967 += 1, R7968 += 1 };
  s0 -> s2 [70, 70] { R7968 += 1 };
  s0 -> s3 [70, 70] { R7968 += 1 };
  s0 -> s1 [76, 65535] { R7968 += 1 };
  s1 -> s1 [0, 69] { R7968 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R7968 += 1 };
  s1 -> s3 [70, 70] { R7968 += 1 };
  s1 -> s1 [76, 65535] { R7968 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 70] { R7968 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [76, 65535] { R7968 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 69] { R7970 += 1, R45 += 1 };
  s0 -> s0 [0, 65535] { R7969 += 1, R7970 += 1 };
  s0 -> s2 [70, 70] { R7970 += 1, R45 += 1 };
  s0 -> s3 [70, 70] { R7970 += 1, R45 += 1 };
  s0 -> s1 [71, 65535] { R7970 += 1, R45 += 1 };
  s1 -> s1 [0, 69] { R7970 += 1, R45 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R7970 += 1, R45 += 1 };
  s1 -> s3 [70, 70] { R7970 += 1, R45 += 1 };
  s1 -> s1 [71, 65535] { R7970 += 1, R45 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7970 += 1, R45 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 69] { R7972 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R7971 += 1, R7972 += 1 };
  s0 -> s2 [70, 70] { R7972 += 1, R47 += 1 };
  s0 -> s3 [70, 70] { R7972 += 1, R47 += 1 };
  s0 -> s1 [71, 65535] { R7972 += 1, R47 += 1 };
  s1 -> s1 [0, 69] { R7972 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R7972 += 1, R47 += 1 };
  s1 -> s3 [70, 70] { R7972 += 1, R47 += 1 };
  s1 -> s1 [71, 65535] { R7972 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7972 += 1, R47 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 69] { R7974 += 1, R49 += 1, R50 += 1 };
  s0 -> s0 [0, 65535] { R7973 += 1, R7974 += 1 };
  s0 -> s2 [70, 70] { R7974 += 1, R49 += 1, R50 += 1 };
  s0 -> s3 [70, 70] { R7974 += 1, R49 += 1, R50 += 1 };
  s0 -> s1 [71, 65535] { R7974 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 69] { R7974 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R7974 += 1, R49 += 1, R50 += 1 };
  s1 -> s3 [70, 70] { R7974 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [71, 65535] { R7974 += 1, R49 += 1, R50 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7974 += 1, R49 += 1, R50 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 69] { R7976 += 1, R53 += 1, R54 += 1 };
  s0 -> s0 [0, 65535] { R7975 += 1, R7976 += 1 };
  s0 -> s2 [70, 70] { R7976 += 1, R53 += 1, R54 += 1 };
  s0 -> s3 [70, 70] { R7976 += 1, R53 += 1, R54 += 1 };
  s0 -> s1 [71, 65535] { R7976 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 69] { R7976 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R7976 += 1, R53 += 1, R54 += 1 };
  s1 -> s3 [70, 70] { R7976 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [71, 65535] { R7976 += 1, R53 += 1, R54 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7976 += 1, R53 += 1, R54 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 69] { R7978 += 1, R59 += 1, R60 += 1 };
  s0 -> s0 [0, 65535] { R7977 += 1, R7978 += 1 };
  s0 -> s2 [70, 70] { R7978 += 1, R59 += 1, R60 += 1 };
  s0 -> s3 [70, 70] { R7978 += 1, R59 += 1, R60 += 1 };
  s0 -> s1 [71, 65535] { R7978 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 69] { R7978 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R7978 += 1, R59 += 1, R60 += 1 };
  s1 -> s3 [70, 70] { R7978 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [71, 65535] { R7978 += 1, R59 += 1, R60 += 1 };
  s2 -> s2 [0, 65535] { R7978 += 1, R59 += 1, R60 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 69] { R7980 += 1, R65 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R7979 += 1, R7980 += 1 };
  s0 -> s2 [70, 70] { R7980 += 1, R65 += 1, R66 += 1 };
  s0 -> s3 [70, 70] { R7980 += 1, R65 += 1, R66 += 1 };
  s0 -> s1 [71, 65535] { R7980 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 69] { R7980 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R7980 += 1, R65 += 1, R66 += 1 };
  s1 -> s3 [70, 70] { R7980 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [71, 65535] { R7980 += 1, R65 += 1, R66 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R7980 += 1, R65 += 1, R66 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 69] { R7982 += 1, R73 += 1, R74 += 1 };
  s0 -> s0 [0, 65535] { R7981 += 1, R7982 += 1 };
  s0 -> s2 [70, 70] { R7982 += 1, R73 += 1, R74 += 1 };
  s0 -> s3 [70, 70] { R7982 += 1, R73 += 1, R74 += 1 };
  s0 -> s1 [71, 65535] { R7982 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 69] { R7982 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R7982 += 1, R73 += 1, R74 += 1 };
  s1 -> s3 [70, 70] { R7982 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [71, 65535] { R7982 += 1, R73 += 1, R74 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R7982 += 1, R73 += 1, R74 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 69] { R8002 += 1 };
  s0 -> s0 [0, 65535] { R8001 += 1, R8002 += 1 };
  s0 -> s2 [70, 70] { R8002 += 1 };
  s0 -> s1 [71, 65535] { R8002 += 1 };
  s1 -> s1 [0, 69] { R8002 += 1 };
  s1 -> s2 [70, 70] { R8002 += 1 };
  s1 -> s1 [71, 65535] { R8002 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R8002 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R8004 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R8003 += 1, R8004 += 1 };
  s1 -> s1 [0, 65535] { R8004 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 69] { R8006 += 1 };
  s0 -> s2 [0, 65535] { R8006 += 1, R12 += 1 };
  s0 -> s0 [0, 65535] { R8005 += 1, R8006 += 1 };
  s0 -> s3 [70, 70] { R8006 += 1 };
  s0 -> s1 [71, 65535] { R8006 += 1 };
  s1 -> s1 [0, 69] { R8006 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [70, 70] { R8006 += 1 };
  s1 -> s1 [71, 65535] { R8006 += 1 };
  s2 -> s1 [0, 69] { R8006 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8006 += 1, R12 += 1 };
  s2 -> s3 [70, 70] { R8006 += 1 };
  s2 -> s1 [71, 65535] { R8006 += 1 };
  s3 -> s3 [0, 65535] { R8006 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 69] { R8008 += 1, R7946 += 1 };
  s0 -> s0 [0, 65535] { R8007 += 1, R8008 += 1 };
  s0 -> s2 [0, 65535] { R8008 += 1, R7945 += 1, R7946 += 1 };
  s0 -> s1 [71, 65535] { R8008 += 1, R7946 += 1 };
  s1 -> s1 [0, 69] { R8008 += 1, R7946 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R8008 += 1 };
  s1 -> s1 [71, 65535] { R8008 += 1, R7946 += 1 };
  s2 -> s1 [0, 69] { R8008 += 1, R7946 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R8008 += 1, R7945 += 1, R7946 += 1 };
  s2 -> s1 [71, 65535] { R8008 += 1, R7946 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R8010 += 1, R7947 += 1, R7948 += 1 };
  s0 -> s0 [0, 65535] { R8009 += 1, R8010 += 1 };
  s0 -> s2 [0, 65535] { R8010 += 1, R7948 += 1, R20 += 1 };
  s1 -> s1 [0, 65535] { R8010 += 1, R7947 += 1, R7948 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R8010 += 1, R7948 += 1, R20 += 1 };
  s2 -> s3 [0, 65535] { R8010 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8010 += 1, R7948 += 1, R20 += 1 };
  s3 -> s3 [0, 65535] { R8010 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 70] { R8012 += 1, R7950 += 1 };
  s0 -> s2 [0, 65535] { R8012 += 1, R7949 += 1, R7950 += 1 };
  s0 -> s0 [0, 65535] { R8011 += 1, R8012 += 1 };
  s0 -> s1 [75, 65535] { R8012 += 1, R7950 += 1 };
  s1 -> s1 [0, 70] { R8012 += 1, R7950 += 1 };
  s1 -> s1 [0, 65535] { R8012 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [75, 65535] { R8012 += 1, R7950 += 1 };
  s2 -> s1 [0, 70] { R8012 += 1, R7950 += 1 };
  s2 -> s2 [0, 65535] { R8012 += 1, R7949 += 1, R7950 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [75, 65535] { R8012 += 1, R7950 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R8014 += 1, R7952 += 1, R84 += 1 };
  s0 -> s2 [0, 65535] { R8014 += 1, R7951 += 1, R7952 += 1 };
  s0 -> s0 [0, 65535] { R8013 += 1, R8014 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R8014 += 1, R7952 += 1, R84 += 1 };
  s1 -> s4 [0, 65535] { R8014 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R8014 += 1, R7952 += 1, R84 += 1 };
  s2 -> s2 [0, 65535] { R8014 += 1, R7951 += 1, R7952 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8014 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 74] { R8016 += 1, R7954 += 1 };
  s0 -> s2 [0, 65535] { R8016 += 1, R7953 += 1, R7954 += 1 };
  s0 -> s0 [0, 65535] { R8015 += 1, R8016 += 1 };
  s0 -> s3 [0, 65535] { R8016 += 1, R7954 += 1, R86 += 1 };
  s0 -> s1 [76, 65535] { R8016 += 1, R7954 += 1 };
  s1 -> s1 [0, 74] { R8016 += 1, R7954 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R8016 += 1 };
  s1 -> s1 [76, 65535] { R8016 += 1, R7954 += 1 };
  s2 -> s1 [0, 74] { R8016 += 1, R7954 += 1 };
  s2 -> s2 [0, 65535] { R8016 += 1, R7953 += 1, R7954 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R8016 += 1, R7954 += 1, R86 += 1 };
  s2 -> s1 [76, 65535] { R8016 += 1, R7954 += 1 };
  s3 -> s1 [0, 74] { R8016 += 1, R7954 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R8016 += 1 };
  s3 -> s3 [0, 65535] { R8016 += 1, R7954 += 1, R86 += 1 };
  s3 -> s1 [76, 65535] { R8016 += 1, R7954 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8016 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 65535] { R8018 += 1, R7955 += 1, R7956 += 1 };
  s0 -> s2 [0, 65535] { R8018 += 1, R7956 += 1, R90 += 1 };
  s0 -> s0 [0, 65535] { R8017 += 1, R8018 += 1 };
  s0 -> s3 [0, 65535] { R8018 += 1, R7956 += 1 };
  s1 -> s1 [0, 65535] { R8018 += 1, R7955 += 1, R7956 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R8018 += 1, R7956 += 1, R90 += 1 };
  s1 -> s3 [0, 65535] { R8018 += 1, R7956 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8018 += 1, R7956 += 1, R90 += 1 };
  s2 -> s5 [0, 65535] { R8018 += 1 };
  s2 -> s3 [0, 65535] { R8018 += 1, R7956 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R8018 += 1 };
  s3 -> s3 [0, 65535] { R8018 += 1, R7956 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8018 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s0 [0, 65535] { R8019 += 1, R8020 += 1 };
  s0 -> s1 [0, 65535] { R8020 += 1, R7958 += 1, R95 += 1, R96 += 1 };
  s0 -> s2 [0, 65535] { R8020 += 1, R7957 += 1, R7958 += 1 };
  s0 -> s3 [0, 65535] { R8020 += 1, R7958 += 1, R94 += 1, R95 += 1 };
  s1 -> s4 [0, 65535] { R8020 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R8020 += 1, R7958 += 1, R95 += 1, R96 += 1 };
  s1 -> s6 [0, 65535] { R8020 += 1, R7958 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R8020 += 1, R7958 += 1, R95 += 1, R96 += 1 };
  s2 -> s2 [0, 65535] { R8020 += 1, R7957 += 1, R7958 += 1 };
  s2 -> s3 [0, 65535] { R8020 += 1, R7958 += 1, R94 += 1, R95 += 1 };
  s3 -> s4 [0, 65535] { R8020 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [0, 65535] { R8020 += 1, R7958 += 1, R95 += 1, R96 += 1 };
  s3 -> s3 [0, 65535] { R8020 += 1, R7958 += 1, R94 += 1, R95 += 1 };
  s4 -> s4 [0, 65535] { R8020 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R8020 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8020 += 1, R7958 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 74] { R8022 += 1, R7960 += 1, R6809 += 1 };
  s0 -> s2 [0, 65535] { R8022 += 1, R7959 += 1, R7960 += 1 };
  s0 -> s3 [0, 65535] { R8022 += 1, R7960 += 1 };
  s0 -> s0 [0, 65535] { R8021 += 1, R8022 += 1 };
  s0 -> s4 [0, 65535] { R8022 += 1, R7960 += 1, R6809 += 1, R6810 += 1 };
  s0 -> s1 [76, 65535] { R8022 += 1, R7960 += 1, R6809 += 1 };
  s1 -> s1 [0, 74] { R8022 += 1, R7960 += 1, R6809 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R8022 += 1, R7960 += 1 };
  s1 -> s6 [0, 65535] { R8022 += 1 };
  s1 -> s1 [76, 65535] { R8022 += 1, R7960 += 1, R6809 += 1 };
  s2 -> s1 [0, 74] { R8022 += 1, R7960 += 1, R6809 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R8022 += 1, R7959 += 1, R7960 += 1 };
  s2 -> s3 [0, 65535] { R8022 += 1, R7960 += 1 };
  s2 -> s4 [0, 65535] { R8022 += 1, R7960 += 1, R6809 += 1, R6810 += 1 };
  s2 -> s1 [76, 65535] { R8022 += 1, R7960 += 1, R6809 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R8022 += 1, R7960 += 1 };
  s3 -> s6 [0, 65535] { R8022 += 1 };
  s4 -> s1 [0, 74] { R8022 += 1, R7960 += 1, R6809 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s3 [0, 65535] { R8022 += 1, R7960 += 1 };
  s4 -> s4 [0, 65535] { R8022 += 1, R7960 += 1, R6809 += 1, R6810 += 1 };
  s4 -> s6 [0, 65535] { R8022 += 1 };
  s4 -> s1 [76, 65535] { R8022 += 1, R7960 += 1, R6809 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8022 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R8024 += 1, R7961 += 1, R7962 += 1 };
  s0 -> s0 [0, 65535] { R8023 += 1, R8024 += 1 };
  s0 -> s2 [0, 65535] { R8024 += 1, R7962 += 1 };
  s1 -> s1 [0, 65535] { R8024 += 1, R7961 += 1, R7962 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R8024 += 1, R7962 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R8024 += 1 };
  s2 -> s2 [0, 65535] { R8024 += 1, R7962 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8024 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 65535] { R8026 += 1, R7963 += 1, R7964 += 1 };
  s0 -> s2 [0, 65535] { R8026 += 1, R7964 += 1, R7941 += 1 };
  s0 -> s3 [0, 65535] { R8026 += 1, R7964 += 1 };
  s0 -> s0 [0, 65535] { R8025 += 1, R8026 += 1 };
  s1 -> s1 [0, 65535] { R8026 += 1, R7963 += 1, R7964 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R8026 += 1, R7964 += 1, R7941 += 1 };
  s1 -> s3 [0, 65535] { R8026 += 1, R7964 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8026 += 1, R7964 += 1, R7941 += 1 };
  s2 -> s3 [0, 65535] { R8026 += 1, R7964 += 1 };
  s2 -> s5 [0, 65535] { R8026 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8026 += 1, R7964 += 1 };
  s3 -> s5 [0, 65535] { R8026 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8026 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R8028 += 1, R7984 += 1, R21 += 1 };
  s0 -> s0 [0, 65535] { R8027 += 1, R8028 += 1 };
  s0 -> s2 [0, 65535] { R8028 += 1, R7983 += 1, R7984 += 1 };
  s1 -> s1 [0, 65535] { R8028 += 1, R7984 += 1, R21 += 1 };
  s1 -> s4 [0, 65535] { R8028 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R8028 += 1, R7984 += 1, R21 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R8028 += 1, R7983 += 1, R7984 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8028 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 69] { R8030 += 1, R7986 += 1 };
  s0 -> s0 [0, 65535] { R8029 += 1, R8030 += 1 };
  s0 -> s2 [0, 65535] { R8030 += 1, R7985 += 1, R7986 += 1 };
  s0 -> s3 [70, 70] { R8030 += 1, R7986 += 1 };
  s0 -> s4 [70, 70] { R8030 += 1, R7986 += 1 };
  s0 -> s5 [75, 75] { R8030 += 1, R7986 += 1 };
  s0 -> s1 [76, 65535] { R8030 += 1, R7986 += 1 };
  s1 -> s1 [0, 69] { R8030 += 1, R7986 += 1 };
  s1 -> s3 [70, 70] { R8030 += 1, R7986 += 1 };
  s1 -> s4 [70, 70] { R8030 += 1, R7986 += 1 };
  s1 -> s5 [75, 75] { R8030 += 1, R7986 += 1 };
  s1 -> s1 [76, 65535] { R8030 += 1, R7986 += 1 };
  s2 -> s1 [0, 69] { R8030 += 1, R7986 += 1 };
  s2 -> s2 [0, 65535] { R8030 += 1, R7985 += 1, R7986 += 1 };
  s2 -> s3 [70, 70] { R8030 += 1, R7986 += 1 };
  s2 -> s4 [70, 70] { R8030 += 1, R7986 += 1 };
  s2 -> s5 [75, 75] { R8030 += 1, R7986 += 1 };
  s2 -> s1 [76, 65535] { R8030 += 1, R7986 += 1 };
  s4 -> s4 [0, 70] { R8030 += 1, R7986 += 1 };
  s4 -> s8 [75, 75] { R8030 += 1, R7986 += 1 };
  s4 -> s4 [76, 65535] { R8030 += 1, R7986 += 1 };
  s5 -> s5 [0, 69] { R8030 += 1, R7986 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R8030 += 1 };
  s5 -> s7 [70, 70] { R8030 += 1, R7986 += 1 };
  s5 -> s8 [70, 70] { R8030 += 1, R7986 += 1 };
  s5 -> s5 [75, 65535] { R8030 += 1, R7986 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R8030 += 1 };
  s8 -> s8 [0, 70] { R8030 += 1, R7986 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R8030 += 1 };
  s8 -> s8 [75, 65535] { R8030 += 1, R7986 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 69] { R8032 += 1, R7988 += 1, R83 += 1 };
  s0 -> s0 [0, 65535] { R8031 += 1, R8032 += 1 };
  s0 -> s2 [0, 65535] { R8032 += 1, R7987 += 1, R7988 += 1 };
  s0 -> s3 [70, 70] { R8032 += 1, R7988 += 1, R83 += 1 };
  s0 -> s4 [70, 70] { R8032 += 1, R7988 += 1, R83 += 1 };
  s0 -> s1 [71, 65535] { R8032 += 1, R7988 += 1, R83 += 1 };
  s1 -> s1 [0, 69] { R8032 += 1, R7988 += 1, R83 += 1 };
  s1 -> s1 [0, 65535] { R8032 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [70, 70] { R8032 += 1, R7988 += 1, R83 += 1 };
  s1 -> s4 [70, 70] { R8032 += 1, R7988 += 1, R83 += 1 };
  s1 -> s1 [71, 65535] { R8032 += 1, R7988 += 1, R83 += 1 };
  s2 -> s1 [0, 69] { R8032 += 1, R7988 += 1, R83 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R8032 += 1, R7987 += 1, R7988 += 1 };
  s2 -> s3 [70, 70] { R8032 += 1, R7988 += 1, R83 += 1 };
  s2 -> s4 [70, 70] { R8032 += 1, R7988 += 1, R83 += 1 };
  s2 -> s1 [71, 65535] { R8032 += 1, R7988 += 1, R83 += 1 };
  s3 -> s6 [0, 65535] { R8032 += 1 };
  s3 -> s3 [0, 65535] { R8032 += 1, R7988 += 1, R83 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8032 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8032 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 69] { R8034 += 1, R7990 += 1, R85 += 1 };
  s0 -> s0 [0, 65535] { R8033 += 1, R8034 += 1 };
  s0 -> s2 [0, 65535] { R8034 += 1, R7989 += 1, R7990 += 1 };
  s0 -> s3 [70, 70] { R8034 += 1, R7990 += 1, R85 += 1 };
  s0 -> s4 [70, 70] { R8034 += 1, R7990 += 1, R85 += 1 };
  s0 -> s1 [71, 65535] { R8034 += 1, R7990 += 1, R85 += 1 };
  s1 -> s1 [0, 69] { R8034 += 1, R7990 += 1, R85 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R8034 += 1 };
  s1 -> s3 [70, 70] { R8034 += 1, R7990 += 1, R85 += 1 };
  s1 -> s4 [70, 70] { R8034 += 1, R7990 += 1, R85 += 1 };
  s1 -> s1 [71, 65535] { R8034 += 1, R7990 += 1, R85 += 1 };
  s2 -> s1 [0, 69] { R8034 += 1, R7990 += 1, R85 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R8034 += 1, R7989 += 1, R7990 += 1 };
  s2 -> s3 [70, 70] { R8034 += 1, R7990 += 1, R85 += 1 };
  s2 -> s4 [70, 70] { R8034 += 1, R7990 += 1, R85 += 1 };
  s2 -> s1 [71, 65535] { R8034 += 1, R7990 += 1, R85 += 1 };
  s3 -> s3 [0, 65535] { R8034 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8034 += 1, R7990 += 1, R85 += 1 };
  s4 -> s6 [0, 65535] { R8034 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8034 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 69] { R8036 += 1, R7992 += 1, R88 += 1 };
  s0 -> s2 [0, 69] { R8036 += 1, R7992 += 1, R87 += 1, R88 += 1 };
  s0 -> s3 [0, 65535] { R8036 += 1, R7991 += 1, R7992 += 1 };
  s0 -> s0 [0, 65535] { R8035 += 1, R8036 += 1 };
  s0 -> s4 [70, 70] { R8036 += 1, R7992 += 1, R88 += 1 };
  s0 -> s5 [70, 70] { R8036 += 1, R7992 += 1, R87 += 1, R88 += 1 };
  s0 -> s6 [70, 70] { R8036 += 1, R7992 += 1, R87 += 1, R88 += 1 };
  s0 -> s7 [70, 70] { R8036 += 1, R7992 += 1, R88 += 1 };
  s0 -> s1 [71, 74] { R8036 += 1, R7992 += 1, R88 += 1 };
  s0 -> s2 [71, 65535] { R8036 += 1, R7992 += 1, R87 += 1, R88 += 1 };
  s0 -> s8 [75, 75] { R8036 += 1, R7992 += 1, R88 += 1 };
  s0 -> s1 [76, 65535] { R8036 += 1, R7992 += 1, R88 += 1 };
  s1 -> s1 [0, 69] { R8036 += 1, R7992 += 1, R88 += 1 };
  s1 -> s4 [70, 70] { R8036 += 1, R7992 += 1, R88 += 1 };
  s1 -> s7 [70, 70] { R8036 += 1, R7992 += 1, R88 += 1 };
  s1 -> s1 [71, 74] { R8036 += 1, R7992 += 1, R88 += 1 };
  s1 -> s8 [75, 75] { R8036 += 1, R7992 += 1, R88 += 1 };
  s1 -> s1 [76, 65535] { R8036 += 1, R7992 += 1, R88 += 1 };
  s2 -> s1 [0, 69] { R8036 += 1, R7992 += 1, R88 += 1 };
  s2 -> s2 [0, 69] { R8036 += 1, R7992 += 1, R87 += 1, R88 += 1 };
  s2 -> s4 [70, 70] { R8036 += 1, R7992 += 1, R88 += 1 };
  s2 -> s5 [70, 70] { R8036 += 1, R7992 += 1, R87 += 1, R88 += 1 };
  s2 -> s6 [70, 70] { R8036 += 1, R7992 += 1, R87 += 1, R88 += 1 };
  s2 -> s7 [70, 70] { R8036 += 1, R7992 += 1, R88 += 1 };
  s2 -> s1 [71, 74] { R8036 += 1, R7992 += 1, R88 += 1 };
  s2 -> s2 [71, 65535] { R8036 += 1, R7992 += 1, R87 += 1, R88 += 1 };
  s2 -> s8 [75, 75] { R8036 += 1, R7992 += 1, R88 += 1 };
  s2 -> s1 [76, 65535] { R8036 += 1, R7992 += 1, R88 += 1 };
  s3 -> s1 [0, 69] { R8036 += 1, R7992 += 1, R88 += 1 };
  s3 -> s2 [0, 69] { R8036 += 1, R7992 += 1, R87 += 1, R88 += 1 };
  s3 -> s3 [0, 65535] { R8036 += 1, R7991 += 1, R7992 += 1 };
  s3 -> s4 [70, 70] { R8036 += 1, R7992 += 1, R88 += 1 };
  s3 -> s5 [70, 70] { R8036 += 1, R7992 += 1, R87 += 1, R88 += 1 };
  s3 -> s6 [70, 70] { R8036 += 1, R7992 += 1, R87 += 1, R88 += 1 };
  s3 -> s7 [70, 70] { R8036 += 1, R7992 += 1, R88 += 1 };
  s3 -> s1 [71, 74] { R8036 += 1, R7992 += 1, R88 += 1 };
  s3 -> s2 [71, 65535] { R8036 += 1, R7992 += 1, R87 += 1, R88 += 1 };
  s3 -> s8 [75, 75] { R8036 += 1, R7992 += 1, R88 += 1 };
  s3 -> s1 [76, 65535] { R8036 += 1, R7992 += 1, R88 += 1 };
  s6 -> s7 [0, 74] { R8036 += 1, R7992 += 1, R88 += 1 };
  s6 -> s6 [0, 65535] { R8036 += 1, R7992 += 1, R87 += 1, R88 += 1 };
  s6 -> s11 [75, 75] { R8036 += 1, R7992 += 1, R88 += 1 };
  s6 -> s7 [76, 65535] { R8036 += 1, R7992 += 1, R88 += 1 };
  s7 -> s7 [0, 74] { R8036 += 1, R7992 += 1, R88 += 1 };
  s7 -> s11 [75, 75] { R8036 += 1, R7992 += 1, R88 += 1 };
  s7 -> s7 [76, 65535] { R8036 += 1, R7992 += 1, R88 += 1 };
  s8 -> s8 [0, 69] { R8036 += 1, R7992 += 1, R88 += 1 };
  s8 -> s8 [0, 65535] { R8036 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [70, 70] { R8036 += 1, R7992 += 1, R88 += 1 };
  s8 -> s11 [70, 70] { R8036 += 1, R7992 += 1, R88 += 1 };
  s8 -> s8 [71, 65535] { R8036 += 1, R7992 += 1, R88 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R8036 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R8036 += 1, R7992 += 1, R88 += 1 };
  s11 -> s12 [0, 65535] { R8036 += 1 };
  s11 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R8036 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 69] { R8038 += 1, R7994 += 1, R91 += 1, R92 += 1 };
  s0 -> s0 [0, 65535] { R8037 += 1, R8038 += 1 };
  s0 -> s2 [0, 65535] { R8038 += 1, R7993 += 1, R7994 += 1 };
  s0 -> s3 [70, 70] { R8038 += 1, R7994 += 1, R91 += 1, R92 += 1 };
  s0 -> s4 [70, 70] { R8038 += 1, R7994 += 1, R91 += 1, R92 += 1 };
  s0 -> s1 [71, 65535] { R8038 += 1, R7994 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 69] { R8038 += 1, R7994 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 65535] { R8038 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [70, 70] { R8038 += 1, R7994 += 1, R91 += 1, R92 += 1 };
  s1 -> s4 [70, 70] { R8038 += 1, R7994 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [71, 65535] { R8038 += 1, R7994 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [0, 69] { R8038 += 1, R7994 += 1, R91 += 1, R92 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R8038 += 1, R7993 += 1, R7994 += 1 };
  s2 -> s3 [70, 70] { R8038 += 1, R7994 += 1, R91 += 1, R92 += 1 };
  s2 -> s4 [70, 70] { R8038 += 1, R7994 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [71, 65535] { R8038 += 1, R7994 += 1, R91 += 1, R92 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R8038 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R8038 += 1 };
  s4 -> s4 [0, 65535] { R8038 += 1, R7994 += 1, R91 += 1, R92 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8038 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 69] { R8040 += 1, R7996 += 1, R6805 += 1, R6806 += 1 };
  s0 -> s2 [0, 69] { R8040 += 1, R7996 += 1, R6806 += 1, R6807 += 1 };
  s0 -> s3 [0, 65535] { R8040 += 1, R7995 += 1, R7996 += 1 };
  s0 -> s0 [0, 65535] { R8039 += 1, R8040 += 1 };
  s0 -> s4 [70, 70] { R8040 += 1, R7996 += 1, R6806 += 1, R6807 += 1 };
  s0 -> s5 [70, 70] { R8040 += 1, R7996 += 1, R6805 += 1, R6806 += 1 };
  s0 -> s6 [70, 70] { R8040 += 1, R7996 += 1, R6806 += 1, R6807 += 1 };
  s0 -> s7 [70, 70] { R8040 += 1, R7996 += 1, R6805 += 1, R6806 += 1 };
  s0 -> s1 [71, 65535] { R8040 += 1, R7996 += 1, R6805 += 1, R6806 += 1 };
  s0 -> s2 [71, 65535] { R8040 += 1, R7996 += 1, R6806 += 1, R6807 += 1 };
  s1 -> s1 [0, 69] { R8040 += 1, R7996 += 1, R6805 += 1, R6806 += 1 };
  s1 -> s2 [0, 69] { R8040 += 1, R7996 += 1, R6806 += 1, R6807 += 1 };
  s1 -> s4 [70, 70] { R8040 += 1, R7996 += 1, R6806 += 1, R6807 += 1 };
  s1 -> s5 [70, 70] { R8040 += 1, R7996 += 1, R6805 += 1, R6806 += 1 };
  s1 -> s6 [70, 70] { R8040 += 1, R7996 += 1, R6806 += 1, R6807 += 1 };
  s1 -> s7 [70, 70] { R8040 += 1, R7996 += 1, R6805 += 1, R6806 += 1 };
  s1 -> s1 [71, 65535] { R8040 += 1, R7996 += 1, R6805 += 1, R6806 += 1 };
  s1 -> s2 [71, 65535] { R8040 += 1, R7996 += 1, R6806 += 1, R6807 += 1 };
  s2 -> s2 [0, 69] { R8040 += 1, R7996 += 1, R6806 += 1, R6807 += 1 };
  s2 -> s9 [0, 65535];
  s2 -> s2 [0, 65535] { R8040 += 1 };
  s2 -> s4 [70, 70] { R8040 += 1, R7996 += 1, R6806 += 1, R6807 += 1 };
  s2 -> s6 [70, 70] { R8040 += 1, R7996 += 1, R6806 += 1, R6807 += 1 };
  s2 -> s2 [71, 65535] { R8040 += 1, R7996 += 1, R6806 += 1, R6807 += 1 };
  s3 -> s1 [0, 69] { R8040 += 1, R7996 += 1, R6805 += 1, R6806 += 1 };
  s3 -> s2 [0, 69] { R8040 += 1, R7996 += 1, R6806 += 1, R6807 += 1 };
  s3 -> s3 [0, 65535] { R8040 += 1, R7995 += 1, R7996 += 1 };
  s3 -> s4 [70, 70] { R8040 += 1, R7996 += 1, R6806 += 1, R6807 += 1 };
  s3 -> s5 [70, 70] { R8040 += 1, R7996 += 1, R6805 += 1, R6806 += 1 };
  s3 -> s6 [70, 70] { R8040 += 1, R7996 += 1, R6806 += 1, R6807 += 1 };
  s3 -> s7 [70, 70] { R8040 += 1, R7996 += 1, R6805 += 1, R6806 += 1 };
  s3 -> s1 [71, 65535] { R8040 += 1, R7996 += 1, R6805 += 1, R6806 += 1 };
  s3 -> s2 [71, 65535] { R8040 += 1, R7996 += 1, R6806 += 1, R6807 += 1 };
  s4 -> s4 [0, 65535] { R8040 += 1 };
  s4 -> s9 [0, 65535];
  s5 -> s5 [0, 65535] { R8040 += 1, R7996 += 1, R6805 += 1, R6806 += 1 };
  s5 -> s6 [0, 65535] { R8040 += 1, R7996 += 1, R6806 += 1, R6807 += 1 };
  s6 -> s8 [0, 65535] { R8040 += 1 };
  s6 -> s6 [0, 65535] { R8040 += 1, R7996 += 1, R6806 += 1, R6807 += 1 };
  s6 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R8040 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s4, s8, s2, s9, s6;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 69] { R8042 += 1, R7998 += 1, R7928 += 1, R7930 += 1 };
  s0 -> s2 [0, 69] { R8042 += 1, R7998 += 1, R7927 += 1, R7928 += 1 };
  s0 -> s3 [0, 69] { R8042 += 1, R7998 += 1, R7928 += 1, R7929 += 1, R7930 += 1 };
  s0 -> s4 [0, 65535] { R8042 += 1, R7997 += 1, R7998 += 1 };
  s0 -> s0 [0, 65535] { R8041 += 1, R8042 += 1 };
  s0 -> s5 [70, 70] { R8042 += 1, R7998 += 1, R7928 += 1, R7930 += 1 };
  s0 -> s6 [70, 70] { R8042 += 1, R7998 += 1, R7927 += 1, R7928 += 1 };
  s0 -> s7 [70, 70] { R8042 += 1, R7998 += 1, R7928 += 1, R7929 += 1, R7930 += 1 };
  s0 -> s8 [70, 70] { R8042 += 1, R7998 += 1, R7928 += 1, R7930 += 1 };
  s0 -> s9 [70, 70] { R8042 += 1, R7998 += 1, R7927 += 1, R7928 += 1 };
  s0 -> s10 [70, 70] { R8042 += 1, R7998 += 1, R7928 += 1, R7929 += 1, R7930 += 1 };
  s0 -> s1 [71, 74] { R8042 += 1, R7998 += 1, R7928 += 1, R7930 += 1 };
  s0 -> s2 [71, 65535] { R8042 += 1, R7998 += 1, R7927 += 1, R7928 += 1 };
  s0 -> s3 [71, 65535] { R8042 += 1, R7998 += 1, R7928 += 1, R7929 += 1, R7930 += 1 };
  s0 -> s11 [75, 75] { R8042 += 1, R7998 += 1, R7928 += 1, R7930 += 1 };
  s0 -> s1 [76, 65535] { R8042 += 1, R7998 += 1, R7928 += 1, R7930 += 1 };
  s1 -> s1 [0, 69] { R8042 += 1, R7998 += 1, R7928 += 1, R7930 += 1 };
  s1 -> s5 [70, 70] { R8042 += 1, R7998 += 1, R7928 += 1, R7930 += 1 };
  s1 -> s8 [70, 70] { R8042 += 1, R7998 += 1, R7928 += 1, R7930 += 1 };
  s1 -> s1 [71, 74] { R8042 += 1, R7998 += 1, R7928 += 1, R7930 += 1 };
  s1 -> s11 [75, 75] { R8042 += 1, R7998 += 1, R7928 += 1, R7930 += 1 };
  s1 -> s1 [76, 65535] { R8042 += 1, R7998 += 1, R7928 += 1, R7930 += 1 };
  s2 -> s1 [0, 69] { R8042 += 1, R7998 += 1, R7928 += 1, R7930 += 1 };
  s2 -> s2 [0, 69] { R8042 += 1, R7998 += 1, R7927 += 1, R7928 += 1 };
  s2 -> s3 [0, 69] { R8042 += 1, R7998 += 1, R7928 += 1, R7929 += 1, R7930 += 1 };
  s2 -> s5 [70, 70] { R8042 += 1, R7998 += 1, R7928 += 1, R7930 += 1 };
  s2 -> s6 [70, 70] { R8042 += 1, R7998 += 1, R7927 += 1, R7928 += 1 };
  s2 -> s7 [70, 70] { R8042 += 1, R7998 += 1, R7928 += 1, R7929 += 1, R7930 += 1 };
  s2 -> s8 [70, 70] { R8042 += 1, R7998 += 1, R7928 += 1, R7930 += 1 };
  s2 -> s9 [70, 70] { R8042 += 1, R7998 += 1, R7927 += 1, R7928 += 1 };
  s2 -> s10 [70, 70] { R8042 += 1, R7998 += 1, R7928 += 1, R7929 += 1, R7930 += 1 };
  s2 -> s1 [71, 74] { R8042 += 1, R7998 += 1, R7928 += 1, R7930 += 1 };
  s2 -> s2 [71, 65535] { R8042 += 1, R7998 += 1, R7927 += 1, R7928 += 1 };
  s2 -> s3 [71, 65535] { R8042 += 1, R7998 += 1, R7928 += 1, R7929 += 1, R7930 += 1 };
  s2 -> s11 [75, 75] { R8042 += 1, R7998 += 1, R7928 += 1, R7930 += 1 };
  s2 -> s1 [76, 65535] { R8042 += 1, R7998 += 1, R7928 += 1, R7930 += 1 };
  s3 -> s1 [0, 69] { R8042 += 1, R7998 += 1, R7928 += 1, R7930 += 1 };
  s3 -> s3 [0, 69] { R8042 += 1, R7998 += 1, R7928 += 1, R7929 += 1, R7930 += 1 };
  s3 -> s5 [70, 70] { R8042 += 1, R7998 += 1, R7928 += 1, R7930 += 1 };
  s3 -> s7 [70, 70] { R8042 += 1, R7998 += 1, R7928 += 1, R7929 += 1, R7930 += 1 };
  s3 -> s8 [70, 70] { R8042 += 1, R7998 += 1, R7928 += 1, R7930 += 1 };
  s3 -> s10 [70, 70] { R8042 += 1, R7998 += 1, R7928 += 1, R7929 += 1, R7930 += 1 };
  s3 -> s1 [71, 74] { R8042 += 1, R7998 += 1, R7928 += 1, R7930 += 1 };
  s3 -> s3 [71, 65535] { R8042 += 1, R7998 += 1, R7928 += 1, R7929 += 1, R7930 += 1 };
  s3 -> s11 [75, 75] { R8042 += 1, R7998 += 1, R7928 += 1, R7930 += 1 };
  s3 -> s1 [76, 65535] { R8042 += 1, R7998 += 1, R7928 += 1, R7930 += 1 };
  s4 -> s1 [0, 69] { R8042 += 1, R7998 += 1, R7928 += 1, R7930 += 1 };
  s4 -> s2 [0, 69] { R8042 += 1, R7998 += 1, R7927 += 1, R7928 += 1 };
  s4 -> s3 [0, 69] { R8042 += 1, R7998 += 1, R7928 += 1, R7929 += 1, R7930 += 1 };
  s4 -> s4 [0, 65535] { R8042 += 1, R7997 += 1, R7998 += 1 };
  s4 -> s5 [70, 70] { R8042 += 1, R7998 += 1, R7928 += 1, R7930 += 1 };
  s4 -> s6 [70, 70] { R8042 += 1, R7998 += 1, R7927 += 1, R7928 += 1 };
  s4 -> s7 [70, 70] { R8042 += 1, R7998 += 1, R7928 += 1, R7929 += 1, R7930 += 1 };
  s4 -> s8 [70, 70] { R8042 += 1, R7998 += 1, R7928 += 1, R7930 += 1 };
  s4 -> s9 [70, 70] { R8042 += 1, R7998 += 1, R7927 += 1, R7928 += 1 };
  s4 -> s10 [70, 70] { R8042 += 1, R7998 += 1, R7928 += 1, R7929 += 1, R7930 += 1 };
  s4 -> s1 [71, 74] { R8042 += 1, R7998 += 1, R7928 += 1, R7930 += 1 };
  s4 -> s2 [71, 65535] { R8042 += 1, R7998 += 1, R7927 += 1, R7928 += 1 };
  s4 -> s3 [71, 65535] { R8042 += 1, R7998 += 1, R7928 += 1, R7929 += 1, R7930 += 1 };
  s4 -> s11 [75, 75] { R8042 += 1, R7998 += 1, R7928 += 1, R7930 += 1 };
  s4 -> s1 [76, 65535] { R8042 += 1, R7998 += 1, R7928 += 1, R7930 += 1 };
  s5 -> s5 [0, 74] { R8042 += 1, R7998 += 1, R7928 += 1, R7930 += 1 };
  s5 -> s18 [75, 75] { R8042 += 1, R7998 += 1, R7928 += 1, R7930 += 1 };
  s5 -> s5 [76, 65535] { R8042 += 1, R7998 += 1, R7928 += 1, R7930 += 1 };
  s6 -> s5 [0, 74] { R8042 += 1, R7998 += 1, R7928 += 1, R7930 += 1 };
  s6 -> s6 [0, 65535] { R8042 += 1, R7998 += 1, R7927 += 1, R7928 += 1 };
  s6 -> s10 [0, 65535] { R8042 += 1, R7998 += 1, R7928 += 1, R7929 += 1, R7930 += 1 };
  s6 -> s18 [75, 75] { R8042 += 1, R7998 += 1, R7928 += 1, R7930 += 1 };
  s6 -> s5 [76, 65535] { R8042 += 1, R7998 += 1, R7928 += 1, R7930 += 1 };
  s10 -> s5 [0, 74] { R8042 += 1, R7998 += 1, R7928 += 1, R7930 += 1 };
  s10 -> s10 [0, 65535] { R8042 += 1, R7998 += 1, R7928 += 1, R7929 += 1, R7930 += 1 };
  s10 -> s18 [75, 75] { R8042 += 1, R7998 += 1, R7928 += 1, R7930 += 1 };
  s10 -> s5 [76, 65535] { R8042 += 1, R7998 += 1, R7928 += 1, R7930 += 1 };
  s11 -> s12 [0, 69] { R8042 += 1, R7998 += 1, R7928 += 1 };
  s11 -> s13 [0, 69] { R8042 += 1, R7998 += 1 };
  s11 -> s11 [0, 69] { R8042 += 1, R7998 += 1, R7928 += 1, R7930 += 1 };
  s11 -> s14 [70, 70] { R8042 += 1, R7998 += 1 };
  s11 -> s15 [70, 70] { R8042 += 1, R7998 += 1, R7928 += 1 };
  s11 -> s16 [70, 70] { R8042 += 1, R7998 += 1, R7928 += 1, R7930 += 1 };
  s11 -> s17 [70, 70] { R8042 += 1, R7998 += 1 };
  s11 -> s18 [70, 70] { R8042 += 1, R7998 += 1, R7928 += 1, R7930 += 1 };
  s11 -> s19 [70, 70] { R8042 += 1, R7998 += 1, R7928 += 1 };
  s11 -> s12 [71, 65535] { R8042 += 1, R7998 += 1, R7928 += 1 };
  s11 -> s13 [71, 65535] { R8042 += 1, R7998 += 1 };
  s11 -> s11 [71, 65535] { R8042 += 1, R7998 += 1, R7928 += 1, R7930 += 1 };
  s12 -> s12 [0, 69] { R8042 += 1, R7998 += 1, R7928 += 1 };
  s12 -> s13 [0, 69] { R8042 += 1, R7998 += 1 };
  s12 -> s14 [70, 70] { R8042 += 1, R7998 += 1 };
  s12 -> s15 [70, 70] { R8042 += 1, R7998 += 1, R7928 += 1 };
  s12 -> s17 [70, 70] { R8042 += 1, R7998 += 1 };
  s12 -> s19 [70, 70] { R8042 += 1, R7998 += 1, R7928 += 1 };
  s12 -> s12 [71, 65535] { R8042 += 1, R7998 += 1, R7928 += 1 };
  s12 -> s13 [71, 65535] { R8042 += 1, R7998 += 1 };
  s13 -> s13 [0, 69] { R8042 += 1, R7998 += 1 };
  s13 -> s20 [0, 65535];
  s13 -> s13 [0, 65535] { R8042 += 1 };
  s13 -> s14 [70, 70] { R8042 += 1, R7998 += 1 };
  s13 -> s17 [70, 70] { R8042 += 1, R7998 += 1 };
  s13 -> s13 [71, 65535] { R8042 += 1, R7998 += 1 };
  s14 -> s14 [0, 65535] { R8042 += 1, R7998 += 1 };
  s14 -> s21 [0, 65535] { R8042 += 1 };
  s14 -> s20 [0, 65535];
  s15 -> s14 [0, 65535] { R8042 += 1, R7998 += 1 };
  s15 -> s15 [0, 65535] { R8042 += 1, R7998 += 1, R7928 += 1 };
  s17 -> s17 [0, 65535] { R8042 += 1 };
  s17 -> s20 [0, 65535];
  s18 -> s14 [0, 65535] { R8042 += 1, R7998 += 1 };
  s18 -> s15 [0, 65535] { R8042 += 1, R7998 += 1, R7928 += 1 };
  s18 -> s18 [0, 65535] { R8042 += 1, R7998 += 1, R7928 += 1, R7930 += 1 };
  s20 -> s20 [0, 65535];
  s21 -> s21 [0, 65535] { R8042 += 1 };
  s21 -> s20 [0, 65535];
  accepting s17, s13, s14, s21, s20;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 69] { R8044 += 1, R8000 += 1, R7936 += 1, R7938 += 1, R7939 += 1 };
  s0 -> s2 [0, 69] { R8044 += 1, R8000 += 1, R7935 += 1, R7936 += 1 };
  s0 -> s3 [0, 69] { R8044 += 1, R8000 += 1, R7936 += 1, R7937 += 1, R7938 += 1 };
  s0 -> s4 [0, 65535] { R8044 += 1, R7999 += 1, R8000 += 1 };
  s0 -> s0 [0, 65535] { R8043 += 1, R8044 += 1 };
  s0 -> s5 [70, 70] { R8044 += 1, R8000 += 1, R7936 += 1, R7937 += 1, R7938 += 1 };
  s0 -> s6 [70, 70] { R8044 += 1, R8000 += 1, R7935 += 1, R7936 += 1 };
  s0 -> s7 [70, 70] { R8044 += 1, R8000 += 1, R7936 += 1, R7938 += 1, R7939 += 1 };
  s0 -> s8 [70, 70] { R8044 += 1, R8000 += 1, R7935 += 1, R7936 += 1 };
  s0 -> s9 [70, 70] { R8044 += 1, R8000 += 1, R7936 += 1, R7938 += 1, R7939 += 1 };
  s0 -> s10 [70, 70] { R8044 += 1, R8000 += 1, R7936 += 1, R7937 += 1, R7938 += 1 };
  s0 -> s1 [71, 65535] { R8044 += 1, R8000 += 1, R7936 += 1, R7938 += 1, R7939 += 1 };
  s0 -> s2 [71, 65535] { R8044 += 1, R8000 += 1, R7935 += 1, R7936 += 1 };
  s0 -> s3 [71, 65535] { R8044 += 1, R8000 += 1, R7936 += 1, R7937 += 1, R7938 += 1 };
  s1 -> s14 [0, 69] { R8044 += 1, R8000 += 1, R7936 += 1 };
  s1 -> s1 [0, 69] { R8044 += 1, R8000 += 1, R7936 += 1, R7938 += 1, R7939 += 1 };
  s1 -> s11 [70, 70] { R8044 += 1, R8000 += 1, R7936 += 1 };
  s1 -> s15 [70, 70] { R8044 += 1, R8000 += 1, R7936 += 1 };
  s1 -> s7 [70, 70] { R8044 += 1, R8000 += 1, R7936 += 1, R7938 += 1, R7939 += 1 };
  s1 -> s9 [70, 70] { R8044 += 1, R8000 += 1, R7936 += 1, R7938 += 1, R7939 += 1 };
  s1 -> s14 [71, 65535] { R8044 += 1, R8000 += 1, R7936 += 1 };
  s1 -> s1 [71, 65535] { R8044 += 1, R8000 += 1, R7936 += 1, R7938 += 1, R7939 += 1 };
  s2 -> s1 [0, 69] { R8044 += 1, R8000 += 1, R7936 += 1, R7938 += 1, R7939 += 1 };
  s2 -> s2 [0, 69] { R8044 += 1, R8000 += 1, R7935 += 1, R7936 += 1 };
  s2 -> s3 [0, 69] { R8044 += 1, R8000 += 1, R7936 += 1, R7937 += 1, R7938 += 1 };
  s2 -> s5 [70, 70] { R8044 += 1, R8000 += 1, R7936 += 1, R7937 += 1, R7938 += 1 };
  s2 -> s6 [70, 70] { R8044 += 1, R8000 += 1, R7935 += 1, R7936 += 1 };
  s2 -> s7 [70, 70] { R8044 += 1, R8000 += 1, R7936 += 1, R7938 += 1, R7939 += 1 };
  s2 -> s8 [70, 70] { R8044 += 1, R8000 += 1, R7935 += 1, R7936 += 1 };
  s2 -> s9 [70, 70] { R8044 += 1, R8000 += 1, R7936 += 1, R7938 += 1, R7939 += 1 };
  s2 -> s10 [70, 70] { R8044 += 1, R8000 += 1, R7936 += 1, R7937 += 1, R7938 += 1 };
  s2 -> s1 [71, 65535] { R8044 += 1, R8000 += 1, R7936 += 1, R7938 += 1, R7939 += 1 };
  s2 -> s2 [71, 65535] { R8044 += 1, R8000 += 1, R7935 += 1, R7936 += 1 };
  s2 -> s3 [71, 65535] { R8044 += 1, R8000 += 1, R7936 += 1, R7937 += 1, R7938 += 1 };
  s3 -> s1 [0, 69] { R8044 += 1, R8000 += 1, R7936 += 1, R7938 += 1, R7939 += 1 };
  s3 -> s3 [0, 69] { R8044 += 1, R8000 += 1, R7936 += 1, R7937 += 1, R7938 += 1 };
  s3 -> s5 [70, 70] { R8044 += 1, R8000 += 1, R7936 += 1, R7937 += 1, R7938 += 1 };
  s3 -> s7 [70, 70] { R8044 += 1, R8000 += 1, R7936 += 1, R7938 += 1, R7939 += 1 };
  s3 -> s9 [70, 70] { R8044 += 1, R8000 += 1, R7936 += 1, R7938 += 1, R7939 += 1 };
  s3 -> s10 [70, 70] { R8044 += 1, R8000 += 1, R7936 += 1, R7937 += 1, R7938 += 1 };
  s3 -> s1 [71, 65535] { R8044 += 1, R8000 += 1, R7936 += 1, R7938 += 1, R7939 += 1 };
  s3 -> s3 [71, 65535] { R8044 += 1, R8000 += 1, R7936 += 1, R7937 += 1, R7938 += 1 };
  s4 -> s1 [0, 69] { R8044 += 1, R8000 += 1, R7936 += 1, R7938 += 1, R7939 += 1 };
  s4 -> s2 [0, 69] { R8044 += 1, R8000 += 1, R7935 += 1, R7936 += 1 };
  s4 -> s3 [0, 69] { R8044 += 1, R8000 += 1, R7936 += 1, R7937 += 1, R7938 += 1 };
  s4 -> s4 [0, 65535] { R8044 += 1, R7999 += 1, R8000 += 1 };
  s4 -> s5 [70, 70] { R8044 += 1, R8000 += 1, R7936 += 1, R7937 += 1, R7938 += 1 };
  s4 -> s6 [70, 70] { R8044 += 1, R8000 += 1, R7935 += 1, R7936 += 1 };
  s4 -> s7 [70, 70] { R8044 += 1, R8000 += 1, R7936 += 1, R7938 += 1, R7939 += 1 };
  s4 -> s8 [70, 70] { R8044 += 1, R8000 += 1, R7935 += 1, R7936 += 1 };
  s4 -> s9 [70, 70] { R8044 += 1, R8000 += 1, R7936 += 1, R7938 += 1, R7939 += 1 };
  s4 -> s10 [70, 70] { R8044 += 1, R8000 += 1, R7936 += 1, R7937 += 1, R7938 += 1 };
  s4 -> s1 [71, 65535] { R8044 += 1, R8000 += 1, R7936 += 1, R7938 += 1, R7939 += 1 };
  s4 -> s2 [71, 65535] { R8044 += 1, R8000 += 1, R7935 += 1, R7936 += 1 };
  s4 -> s3 [71, 65535] { R8044 += 1, R8000 += 1, R7936 += 1, R7937 += 1, R7938 += 1 };
  s6 -> s6 [0, 65535] { R8044 += 1, R8000 += 1, R7935 += 1, R7936 += 1 };
  s6 -> s7 [0, 65535] { R8044 += 1, R8000 += 1, R7936 += 1, R7938 += 1, R7939 += 1 };
  s6 -> s10 [0, 65535] { R8044 += 1, R8000 += 1, R7936 += 1, R7937 += 1, R7938 += 1 };
  s7 -> s11 [0, 65535] { R8044 += 1, R8000 += 1, R7936 += 1 };
  s7 -> s7 [0, 65535] { R8044 += 1, R8000 += 1, R7936 += 1, R7938 += 1, R7939 += 1 };
  s10 -> s7 [0, 65535] { R8044 += 1, R8000 += 1, R7936 += 1, R7938 += 1, R7939 += 1 };
  s10 -> s10 [0, 65535] { R8044 += 1, R8000 += 1, R7936 += 1, R7937 += 1, R7938 += 1 };
  s11 -> s12 [0, 65535] { R8044 += 1 };
  s11 -> s11 [0, 65535] { R8044 += 1, R8000 += 1, R7936 += 1 };
  s11 -> s13 [0, 65535];
  s12 -> s12 [0, 65535] { R8044 += 1 };
  s12 -> s13 [0, 65535];
  s13 -> s13 [0, 65535];
  s14 -> s14 [0, 69] { R8044 += 1, R8000 += 1, R7936 += 1 };
  s14 -> s14 [0, 65535] { R8044 += 1 };
  s14 -> s13 [0, 65535];
  s14 -> s11 [70, 70] { R8044 += 1, R8000 += 1, R7936 += 1 };
  s14 -> s15 [70, 70] { R8044 += 1, R8000 += 1, R7936 += 1 };
  s14 -> s14 [71, 65535] { R8044 += 1, R8000 += 1, R7936 += 1 };
  s15 -> s15 [0, 65535] { R8044 += 1 };
  s15 -> s13 [0, 65535];
  accepting s12, s13, s14, s15, s11;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [102, 102];
  accepting s1;
};
};
constraint R3 = R8044 && R23 - R8044 = -1 && R24 = R8044 && R25 - R8044 = -1 && R26 = R8044 && R27 = 0 && R28 = 1 && R29 = 0 && R30 = 1 && R45 + R84 + R83 + -1*R7932 + -1*R7928 - R66 = 0 && R49 + R89 + R87 = 0 && R50 + R90 + R88 + -1*R7932 + -1*R7928 - R66 = 0 && R55 + R96 + R93 + -1*R7934 + -1*R7930 - R68 = 0 && R65 + R7931 + R7927 = 0 && R67 + R7933 + R7929 = 0 && R7985 = 0 && R7986 = 0 && R7991 = 0 && R7992 = 0 && R7995 = 0 && R7996 = 0 && R7997 = 0 && R7998 = 0 && R7999 = 0 && R8000 = 0 && R8001 = 0 && R8002 = R8044 && R8003 = 0 && R8004 = R8044 && R8005 = 0 && R8006 = R8044 && R8007 = 0 && R8008 = R8044 && R8009 = 0 && R8010 = R8044 && R8011 = 0 && R8012 = R8044 && R8013 = 0 && R8014 = R8044 && R8015 = 0 && R8016 = R8044 && R8017 = 0 && R8018 = R8044 && R8019 = 0 && R8020 = R8044 && R8021 = 0 && R8022 = R8044 && R8023 = 0 && R8024 = R8044 && R8025 = 0 && R8026 = R8044 && R8027 = 0 && R8028 = R8044 && R8029 = 0 && R8030 = R8044 && R8031 = 0 && R8032 = R8044 && R8033 = 0 && R8034 = R8044 && R8035 = 0 && R8036 = R8044 && R8037 = 0 && R8038 = R8044 && R8039 = 0 && R8040 = R8044 && R8041 = 0 && R8042 = R8044 && R8043 = 0 && -1 < R2 && R12 < 1 && R15 < 1 && R16 < 1 && R47 + R86 + R85 < 1 && R61 + R6810 + R6807 < 1 && -1*R7932 + -1*R7928 - R66 < 1 && -1*R7934 + -1*R7930 - R68 < 1 && 0 < R8044 && (R2 != 0 || R20 = 0 || (R7945 = 0 && R7946 = 0)) && (R2 != 0 || R20 = 0 || (R7947 = 0 && R7948 = 0)) && (R2 != 0 || R20 = 0 || (R7949 = 0 && R7950 = 0)) && (R2 != 0 || R20 = 0 || (R7951 = 0 && R7952 = 0)) && (R2 != 0 || R20 = 0 || (R7953 = 0 && R7954 = 0)) && (R2 != 0 || R20 = 0 || (R7955 = 0 && R7956 = 0)) && (R2 != 0 || R20 = 0 || (R7957 = 0 && R7958 = 0)) && (R2 != 0 || R20 = 0 || (R7959 = 0 && R7960 = 0)) && (R2 != 0 || R20 = 0 || (R7961 = 0 && R7962 = 0)) && (R2 != 0 || R20 = 0 || (R7963 = 0 && R7964 = 0)) && (R53 + R94 + R91 != 0 || R54 + R95 + R92 + -1*R7932 + -1*R7928 - R66 = 0 || R66 + R7932 + R7928 < 1) && (R59 + R6808 + R6805 != 0 || R60 + R6809 + R6806 + -1*R7932 + -1*R7928 - R66 = 0 || R66 + R7932 + R7928 < 1) && (R66 + R7932 + R7928 != 0 || ((R53 + R94 + R91 != 0 || R54 + R95 + R92 = 0 || R68 + R7934 + R7930 < 1) && (R53 + R94 + R91 = 0 || R68 + R7934 + R7930 < 1))) && (R66 + R7932 + R7928 != 0 || ((R59 + R6808 + R6805 != 0 || R60 + R6809 + R6806 = 0 || R68 + R7934 + R7930 < 1) && (R59 + R6808 + R6805 = 0 || R68 + R7934 + R7930 < 1))) && (R66 + R7932 + R7928 != 0 || ((R73 + R7940 + R7935 != 0 || R74 + R7941 + R7936 = 0 || R68 + R7934 + R7930 < 1) && (R73 + R7940 + R7935 = 0 || R68 + R7934 + R7930 < 1))) && (R68 + R7934 + R7930 != 0 || R77 + R7944 + R7939 = 0 || (R75 + R7942 + R7937 = 0 && R76 + R7943 + R7938 = 0)) && (R73 + R7940 + R7935 != 0 || R66 + R7932 + R7928 + -1*R7941 + -1*R7936 - R74 = 0 || R66 + R7932 + R7928 < 1) && (R75 + R7942 + R7937 != 0 || R68 + R7934 + R7930 + -1*R7943 + -1*R7938 - R76 = 0 || R68 + R7934 + R7930 < 1) && (R7945 != 0 || R2 = R7946 || R2 < 1) && (R7947 != 0 || R2 = R7948 || R2 < 1) && (R7949 != 0 || R2 = R7950 || R2 < 1) && (R7951 != 0 || R2 = R7952 || R2 < 1) && (R7953 != 0 || R2 = R7954 || R2 < 1) && (R7955 != 0 || R2 = R7956 || R2 < 1) && (R7957 != 0 || R2 = R7958 || R2 < 1) && (R7959 != 0 || R2 = R7960 || R2 < 1) && (R7961 != 0 || R2 = R7962 || R2 < 1) && (R7963 != 0 || R2 = R7964 || R2 < 1) && (R21 = 0 || (R7983 = 0 && R7984 = 0)) && (R21 = 0 || (R7987 = 0 && R7988 = 0)) && (R21 = 0 || (R7989 = 0 && R7990 = 0)) && (R21 = 0 || (R7993 = 0 && R7994 = 0)) && (R22 = 0 || (R7965 = 0 && R7966 = 0)) && (R22 = 0 || (R7967 = 0 && R7968 = 0)) && (R22 = 0 || (R7969 = 0 && R7970 = 0)) && (R22 = 0 || (R7971 = 0 && R7972 = 0)) && (R22 = 0 || (R7973 = 0 && R7974 = 0)) && (R22 = 0 || (R7975 = 0 && R7976 = 0)) && (R22 = 0 || (R7977 = 0 && R7978 = 0)) && (R22 = 0 || (R7979 = 0 && R7980 = 0)) && (R22 = 0 || (R7981 = 0 && R7982 = 0)) && (R53 + R94 + R91 = 0 || R66 + R7932 + R7928 < 1) && (R59 + R6808 + R6805 = 0 || R66 + R7932 + R7928 < 1) && (R73 + R7940 + R7935 = 0 || R66 + R7932 + R7928 < 1) && (R75 + R7942 + R7937 = 0 || R68 + R7934 + R7930 < 1) && (R7945 = 0 || R2 < 1) && (R7947 = 0 || R2 < 1) && (R7949 = 0 || R2 < 1) && (R7951 = 0 || R2 < 1) && (R7953 = 0 || R2 < 1) && (R7955 = 0 || R2 < 1) && (R7957 = 0 || R2 < 1) && (R7959 = 0 || R2 < 1) && (R7961 = 0 || R2 < 1) && (R7963 = 0 || R2 < 1);
// End of Parikh automata intersection problem
