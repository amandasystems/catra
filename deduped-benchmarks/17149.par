// Parikh automata intersection problem, generated by OSTRICH+
counter int R12, R15, R16, R2, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R4, R45, R47, R49, R5, R50, R53, R54, R55, R59, R60, R61, R65, R66, R67, R68, R6805, R6806, R6807, R6808, R6809, R6810, R6811, R6812, R6813, R6814, R6815, R6816, R6817, R6818, R7259, R7260, R7261, R7262, R7263, R7264, R7265, R7266, R7267, R7268, R7269, R7270, R7271, R7272, R7273, R7274, R7275, R7276, R7277, R7278, R7279, R7280, R7281, R7282, R7283, R7284, R7285, R7286, R7287, R7288, R7289, R7290, R7291, R7292, R7293, R7294, R7295, R7296, R7297, R7298, R7299, R73, R7300, R7301, R7302, R7303, R7304, R7305, R7306, R7307, R7308, R7309, R7310, R7311, R7312, R7313, R7314, R7315, R7316, R7317, R7318, R7319, R7320, R7321, R7322, R7323, R7324, R7325, R7326, R7327, R7328, R7329, R7330, R7331, R7332, R7333, R7334, R7335, R7336, R7337, R7338, R7339, R7340, R7341, R7342, R7343, R7344, R7345, R7346, R7347, R7348, R7349, R7350, R7351, R7352, R7353, R7354, R7355, R7356, R7357, R7358, R7359, R7360, R7361, R7362, R7363, R7364, R7365, R7366, R7367, R7368, R74, R75, R76, R77, R83, R84, R85, R86, R87, R88, R89, R90, R91, R92, R93, R94, R95, R96;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [70, 70];
  s0 -> s0 [71, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [70, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R15 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 69];
  s0 -> s0 [0, 65535] { R16 += 1 };
  s0 -> s2 [70, 70];
  s0 -> s1 [71, 65535];
  s1 -> s1 [0, 69];
  s1 -> s2 [70, 70];
  s1 -> s1 [71, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R24 += 1 };
  s0 -> s0 [0, 65535] { R23 += 1, R24 += 1 };
  s0 -> s2 [9, 13] { R24 += 1 };
  s0 -> s1 [14, 31] { R24 += 1 };
  s0 -> s2 [32, 32] { R24 += 1 };
  s0 -> s1 [33, 65535] { R24 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R24 += 1 };
  s2 -> s1 [0, 65535] { R24 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R25 += 1, R26 += 1 };
  s1 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R28 += 1 };
  s0 -> s0 [0, 65535] { R27 += 1, R28 += 1 };
  s0 -> s2 [9, 13] { R28 += 1 };
  s0 -> s1 [14, 31] { R28 += 1 };
  s0 -> s2 [32, 32] { R28 += 1 };
  s0 -> s1 [33, 65535] { R28 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R28 += 1 };
  s2 -> s1 [0, 65535] { R28 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R29 += 1, R30 += 1 };
  s1 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R7289 += 1, R7290 += 1 };
  s0 -> s1 [0, 65535] { R7290 += 1, R22 += 1 };
  s1 -> s1 [0, 65535] { R7290 += 1, R22 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 69] { R7292 += 1 };
  s0 -> s0 [0, 65535] { R7291 += 1, R7292 += 1 };
  s0 -> s2 [70, 70] { R7292 += 1 };
  s0 -> s3 [70, 70] { R7292 += 1 };
  s0 -> s1 [76, 65535] { R7292 += 1 };
  s1 -> s1 [0, 69] { R7292 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R7292 += 1 };
  s1 -> s3 [70, 70] { R7292 += 1 };
  s1 -> s1 [76, 65535] { R7292 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 70] { R7292 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [76, 65535] { R7292 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 69] { R7294 += 1, R45 += 1 };
  s0 -> s0 [0, 65535] { R7293 += 1, R7294 += 1 };
  s0 -> s2 [70, 70] { R7294 += 1, R45 += 1 };
  s0 -> s3 [70, 70] { R7294 += 1, R45 += 1 };
  s0 -> s1 [71, 65535] { R7294 += 1, R45 += 1 };
  s1 -> s1 [0, 69] { R7294 += 1, R45 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R7294 += 1, R45 += 1 };
  s1 -> s3 [70, 70] { R7294 += 1, R45 += 1 };
  s1 -> s1 [71, 65535] { R7294 += 1, R45 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7294 += 1, R45 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 69] { R7296 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R7295 += 1, R7296 += 1 };
  s0 -> s2 [70, 70] { R7296 += 1, R47 += 1 };
  s0 -> s3 [70, 70] { R7296 += 1, R47 += 1 };
  s0 -> s1 [71, 65535] { R7296 += 1, R47 += 1 };
  s1 -> s1 [0, 69] { R7296 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R7296 += 1, R47 += 1 };
  s1 -> s3 [70, 70] { R7296 += 1, R47 += 1 };
  s1 -> s1 [71, 65535] { R7296 += 1, R47 += 1 };
  s2 -> s2 [0, 65535] { R7296 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 69] { R7298 += 1, R49 += 1, R50 += 1 };
  s0 -> s0 [0, 65535] { R7297 += 1, R7298 += 1 };
  s0 -> s2 [70, 70] { R7298 += 1, R49 += 1, R50 += 1 };
  s0 -> s3 [70, 70] { R7298 += 1, R49 += 1, R50 += 1 };
  s0 -> s1 [71, 65535] { R7298 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 69] { R7298 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R7298 += 1, R49 += 1, R50 += 1 };
  s1 -> s3 [70, 70] { R7298 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [71, 65535] { R7298 += 1, R49 += 1, R50 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R7298 += 1, R49 += 1, R50 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 69] { R7300 += 1, R53 += 1, R54 += 1 };
  s0 -> s0 [0, 65535] { R7299 += 1, R7300 += 1 };
  s0 -> s2 [70, 70] { R7300 += 1, R53 += 1, R54 += 1 };
  s0 -> s3 [70, 70] { R7300 += 1, R53 += 1, R54 += 1 };
  s0 -> s1 [71, 65535] { R7300 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 69] { R7300 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R7300 += 1, R53 += 1, R54 += 1 };
  s1 -> s3 [70, 70] { R7300 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [71, 65535] { R7300 += 1, R53 += 1, R54 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7300 += 1, R53 += 1, R54 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 69] { R7302 += 1, R59 += 1, R60 += 1 };
  s0 -> s0 [0, 65535] { R7301 += 1, R7302 += 1 };
  s0 -> s2 [70, 70] { R7302 += 1, R59 += 1, R60 += 1 };
  s0 -> s3 [70, 70] { R7302 += 1, R59 += 1, R60 += 1 };
  s0 -> s1 [71, 65535] { R7302 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 69] { R7302 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R7302 += 1, R59 += 1, R60 += 1 };
  s1 -> s3 [70, 70] { R7302 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [71, 65535] { R7302 += 1, R59 += 1, R60 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7302 += 1, R59 += 1, R60 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 69] { R7304 += 1, R65 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R7303 += 1, R7304 += 1 };
  s0 -> s2 [70, 70] { R7304 += 1, R65 += 1, R66 += 1 };
  s0 -> s3 [70, 70] { R7304 += 1, R65 += 1, R66 += 1 };
  s0 -> s1 [71, 65535] { R7304 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 69] { R7304 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R7304 += 1, R65 += 1, R66 += 1 };
  s1 -> s3 [70, 70] { R7304 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [71, 65535] { R7304 += 1, R65 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R7304 += 1, R65 += 1, R66 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 69] { R7306 += 1, R73 += 1, R74 += 1 };
  s0 -> s0 [0, 65535] { R7305 += 1, R7306 += 1 };
  s0 -> s2 [70, 70] { R7306 += 1, R73 += 1, R74 += 1 };
  s0 -> s3 [70, 70] { R7306 += 1, R73 += 1, R74 += 1 };
  s0 -> s1 [71, 65535] { R7306 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 69] { R7306 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R7306 += 1, R73 += 1, R74 += 1 };
  s1 -> s3 [70, 70] { R7306 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [71, 65535] { R7306 += 1, R73 += 1, R74 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R7306 += 1, R73 += 1, R74 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 69] { R7326 += 1 };
  s0 -> s0 [0, 65535] { R7325 += 1, R7326 += 1 };
  s0 -> s2 [70, 70] { R7326 += 1 };
  s0 -> s1 [71, 65535] { R7326 += 1 };
  s1 -> s1 [0, 69] { R7326 += 1 };
  s1 -> s2 [70, 70] { R7326 += 1 };
  s1 -> s1 [71, 65535] { R7326 += 1 };
  s2 -> s2 [0, 65535] { R7326 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R7327 += 1, R7328 += 1 };
  s0 -> s1 [0, 65535] { R7328 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R7328 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 69] { R7330 += 1 };
  s0 -> s0 [0, 65535] { R7329 += 1, R7330 += 1 };
  s0 -> s2 [0, 65535] { R7330 += 1, R12 += 1 };
  s0 -> s3 [70, 70] { R7330 += 1 };
  s0 -> s1 [71, 65535] { R7330 += 1 };
  s1 -> s1 [0, 69] { R7330 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [70, 70] { R7330 += 1 };
  s1 -> s1 [71, 65535] { R7330 += 1 };
  s2 -> s1 [0, 69] { R7330 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R7330 += 1, R12 += 1 };
  s2 -> s3 [70, 70] { R7330 += 1 };
  s2 -> s1 [71, 65535] { R7330 += 1 };
  s3 -> s3 [0, 65535] { R7330 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 69] { R7332 += 1, R7270 += 1 };
  s0 -> s2 [0, 65535] { R7332 += 1, R7269 += 1, R7270 += 1 };
  s0 -> s0 [0, 65535] { R7331 += 1, R7332 += 1 };
  s0 -> s1 [71, 65535] { R7332 += 1, R7270 += 1 };
  s1 -> s1 [0, 69] { R7332 += 1, R7270 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R7332 += 1 };
  s1 -> s1 [71, 65535] { R7332 += 1, R7270 += 1 };
  s2 -> s1 [0, 69] { R7332 += 1, R7270 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R7332 += 1, R7269 += 1, R7270 += 1 };
  s2 -> s1 [71, 65535] { R7332 += 1, R7270 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R7334 += 1, R7271 += 1, R7272 += 1 };
  s0 -> s0 [0, 65535] { R7333 += 1, R7334 += 1 };
  s0 -> s2 [0, 65535] { R7334 += 1, R7272 += 1, R20 += 1 };
  s1 -> s1 [0, 65535] { R7334 += 1, R7271 += 1, R7272 += 1 };
  s1 -> s2 [0, 65535] { R7334 += 1, R7272 += 1, R20 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R7334 += 1 };
  s2 -> s2 [0, 65535] { R7334 += 1, R7272 += 1, R20 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7334 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 70] { R7336 += 1, R7274 += 1 };
  s0 -> s0 [0, 65535] { R7335 += 1, R7336 += 1 };
  s0 -> s2 [0, 65535] { R7336 += 1, R7273 += 1, R7274 += 1 };
  s0 -> s1 [75, 65535] { R7336 += 1, R7274 += 1 };
  s1 -> s1 [0, 70] { R7336 += 1, R7274 += 1 };
  s1 -> s1 [0, 65535] { R7336 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [75, 65535] { R7336 += 1, R7274 += 1 };
  s2 -> s1 [0, 70] { R7336 += 1, R7274 += 1 };
  s2 -> s2 [0, 65535] { R7336 += 1, R7273 += 1, R7274 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [75, 65535] { R7336 += 1, R7274 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R7338 += 1, R7275 += 1, R7276 += 1 };
  s0 -> s0 [0, 65535] { R7337 += 1, R7338 += 1 };
  s0 -> s2 [0, 65535] { R7338 += 1, R7276 += 1, R84 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R7338 += 1, R7275 += 1, R7276 += 1 };
  s1 -> s2 [0, 65535] { R7338 += 1, R7276 += 1, R84 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R7338 += 1, R7276 += 1, R84 += 1 };
  s2 -> s4 [0, 65535] { R7338 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7338 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 74] { R7340 += 1, R7278 += 1 };
  s0 -> s2 [0, 65535] { R7340 += 1, R7277 += 1, R7278 += 1 };
  s0 -> s0 [0, 65535] { R7339 += 1, R7340 += 1 };
  s0 -> s3 [0, 65535] { R7340 += 1, R7278 += 1, R86 += 1 };
  s0 -> s1 [76, 65535] { R7340 += 1, R7278 += 1 };
  s1 -> s1 [0, 74] { R7340 += 1, R7278 += 1 };
  s1 -> s1 [0, 65535] { R7340 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [76, 65535] { R7340 += 1, R7278 += 1 };
  s2 -> s1 [0, 74] { R7340 += 1, R7278 += 1 };
  s2 -> s2 [0, 65535] { R7340 += 1, R7277 += 1, R7278 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R7340 += 1, R7278 += 1, R86 += 1 };
  s2 -> s1 [76, 65535] { R7340 += 1, R7278 += 1 };
  s3 -> s1 [0, 74] { R7340 += 1, R7278 += 1 };
  s3 -> s4 [0, 65535] { R7340 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R7340 += 1, R7278 += 1, R86 += 1 };
  s3 -> s1 [76, 65535] { R7340 += 1, R7278 += 1 };
  s4 -> s4 [0, 65535] { R7340 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 65535] { R7342 += 1, R7280 += 1, R90 += 1 };
  s0 -> s0 [0, 65535] { R7341 += 1, R7342 += 1 };
  s0 -> s2 [0, 65535] { R7342 += 1, R7280 += 1 };
  s0 -> s3 [0, 65535] { R7342 += 1, R7279 += 1, R7280 += 1 };
  s1 -> s5 [0, 65535] { R7342 += 1 };
  s1 -> s1 [0, 65535] { R7342 += 1, R7280 += 1, R90 += 1 };
  s1 -> s2 [0, 65535] { R7342 += 1, R7280 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R7342 += 1 };
  s2 -> s2 [0, 65535] { R7342 += 1, R7280 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R7342 += 1, R7280 += 1, R90 += 1 };
  s3 -> s2 [0, 65535] { R7342 += 1, R7280 += 1 };
  s3 -> s3 [0, 65535] { R7342 += 1, R7279 += 1, R7280 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R7342 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R7344 += 1, R7281 += 1, R7282 += 1 };
  s0 -> s2 [0, 65535] { R7344 += 1, R7282 += 1, R95 += 1, R96 += 1 };
  s0 -> s3 [0, 65535] { R7344 += 1, R7282 += 1, R94 += 1, R95 += 1 };
  s0 -> s0 [0, 65535] { R7343 += 1, R7344 += 1 };
  s1 -> s1 [0, 65535] { R7344 += 1, R7281 += 1, R7282 += 1 };
  s1 -> s2 [0, 65535] { R7344 += 1, R7282 += 1, R95 += 1, R96 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R7344 += 1, R7282 += 1, R94 += 1, R95 += 1 };
  s2 -> s4 [0, 65535] { R7344 += 1 };
  s2 -> s2 [0, 65535] { R7344 += 1, R7282 += 1, R95 += 1, R96 += 1 };
  s2 -> s6 [0, 65535] { R7344 += 1, R7282 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s4 [0, 65535] { R7344 += 1 };
  s3 -> s2 [0, 65535] { R7344 += 1, R7282 += 1, R95 += 1, R96 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R7344 += 1, R7282 += 1, R94 += 1, R95 += 1 };
  s4 -> s4 [0, 65535] { R7344 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R7344 += 1 };
  s6 -> s6 [0, 65535] { R7344 += 1, R7282 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 74] { R7346 += 1, R7284 += 1, R6809 += 1 };
  s0 -> s2 [0, 65535] { R7346 += 1, R7284 += 1 };
  s0 -> s3 [0, 65535] { R7346 += 1, R7283 += 1, R7284 += 1 };
  s0 -> s0 [0, 65535] { R7345 += 1, R7346 += 1 };
  s0 -> s4 [0, 65535] { R7346 += 1, R7284 += 1, R6809 += 1, R6810 += 1 };
  s0 -> s1 [76, 65535] { R7346 += 1, R7284 += 1, R6809 += 1 };
  s1 -> s1 [0, 74] { R7346 += 1, R7284 += 1, R6809 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R7346 += 1 };
  s1 -> s1 [0, 65535] { R7346 += 1, R7284 += 1 };
  s1 -> s1 [76, 65535] { R7346 += 1, R7284 += 1, R6809 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R7346 += 1, R7284 += 1 };
  s2 -> s6 [0, 65535] { R7346 += 1 };
  s3 -> s1 [0, 74] { R7346 += 1, R7284 += 1, R6809 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R7346 += 1, R7284 += 1 };
  s3 -> s3 [0, 65535] { R7346 += 1, R7283 += 1, R7284 += 1 };
  s3 -> s4 [0, 65535] { R7346 += 1, R7284 += 1, R6809 += 1, R6810 += 1 };
  s3 -> s1 [76, 65535] { R7346 += 1, R7284 += 1, R6809 += 1 };
  s4 -> s1 [0, 74] { R7346 += 1, R7284 += 1, R6809 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s2 [0, 65535] { R7346 += 1, R7284 += 1 };
  s4 -> s6 [0, 65535] { R7346 += 1 };
  s4 -> s4 [0, 65535] { R7346 += 1, R7284 += 1, R6809 += 1, R6810 += 1 };
  s4 -> s1 [76, 65535] { R7346 += 1, R7284 += 1, R6809 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7346 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R7348 += 1, R7286 += 1 };
  s0 -> s2 [0, 65535] { R7348 += 1, R7286 += 1, R6816 += 1, R6818 += 1 };
  s0 -> s3 [0, 65535] { R7348 += 1, R7285 += 1, R7286 += 1 };
  s0 -> s0 [0, 65535] { R7347 += 1, R7348 += 1 };
  s0 -> s4 [0, 65535] { R7348 += 1, R7286 += 1, R6816 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R7348 += 1, R7286 += 1 };
  s1 -> s6 [0, 65535] { R7348 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R7348 += 1, R7286 += 1 };
  s2 -> s2 [0, 65535] { R7348 += 1, R7286 += 1, R6816 += 1, R6818 += 1 };
  s2 -> s6 [0, 65535] { R7348 += 1 };
  s2 -> s4 [0, 65535] { R7348 += 1, R7286 += 1, R6816 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [0, 65535] { R7348 += 1, R7286 += 1 };
  s3 -> s2 [0, 65535] { R7348 += 1, R7286 += 1, R6816 += 1, R6818 += 1 };
  s3 -> s3 [0, 65535] { R7348 += 1, R7285 += 1, R7286 += 1 };
  s3 -> s4 [0, 65535] { R7348 += 1, R7286 += 1, R6816 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s1 [0, 65535] { R7348 += 1, R7286 += 1 };
  s4 -> s6 [0, 65535] { R7348 += 1 };
  s4 -> s4 [0, 65535] { R7348 += 1, R7286 += 1, R6816 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7348 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 65535] { R7350 += 1, R7288 += 1, R7265 += 1, R7266 += 1, R7267 += 1 };
  s0 -> s0 [0, 65535] { R7349 += 1, R7350 += 1 };
  s0 -> s2 [0, 65535] { R7350 += 1, R7288 += 1 };
  s0 -> s3 [0, 65535] { R7350 += 1, R7288 += 1, R7265 += 1, R7267 += 1, R7268 += 1 };
  s0 -> s4 [0, 65535] { R7350 += 1, R7287 += 1, R7288 += 1 };
  s1 -> s1 [0, 65535] { R7350 += 1, R7288 += 1, R7265 += 1, R7266 += 1, R7267 += 1 };
  s1 -> s6 [0, 65535] { R7350 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s2 [0, 65535] { R7350 += 1, R7288 += 1 };
  s1 -> s3 [0, 65535] { R7350 += 1, R7288 += 1, R7265 += 1, R7267 += 1, R7268 += 1 };
  s2 -> s6 [0, 65535] { R7350 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R7350 += 1, R7288 += 1 };
  s3 -> s6 [0, 65535] { R7350 += 1 };
  s3 -> s7 [0, 65535] { R7350 += 1, R7288 += 1, R7265 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R7350 += 1, R7288 += 1 };
  s3 -> s3 [0, 65535] { R7350 += 1, R7288 += 1, R7265 += 1, R7267 += 1, R7268 += 1 };
  s4 -> s1 [0, 65535] { R7350 += 1, R7288 += 1, R7265 += 1, R7266 += 1, R7267 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s2 [0, 65535] { R7350 += 1, R7288 += 1 };
  s4 -> s3 [0, 65535] { R7350 += 1, R7288 += 1, R7265 += 1, R7267 += 1, R7268 += 1 };
  s4 -> s4 [0, 65535] { R7350 += 1, R7287 += 1, R7288 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7350 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R7350 += 1 };
  s7 -> s7 [0, 65535] { R7350 += 1, R7288 += 1, R7265 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s2 [0, 65535] { R7350 += 1, R7288 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s0 [0, 65535] { R7351 += 1, R7352 += 1 };
  s0 -> s1 [0, 65535] { R7352 += 1, R7308 += 1, R21 += 1 };
  s0 -> s2 [0, 65535] { R7352 += 1, R7307 += 1, R7308 += 1 };
  s1 -> s4 [0, 65535] { R7352 += 1 };
  s1 -> s1 [0, 65535] { R7352 += 1, R7308 += 1, R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R7352 += 1, R7308 += 1, R21 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R7352 += 1, R7307 += 1, R7308 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7352 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 69] { R7354 += 1, R7310 += 1 };
  s0 -> s0 [0, 65535] { R7353 += 1, R7354 += 1 };
  s0 -> s2 [0, 65535] { R7354 += 1, R7309 += 1, R7310 += 1 };
  s0 -> s3 [70, 70] { R7354 += 1, R7310 += 1 };
  s0 -> s4 [70, 70] { R7354 += 1, R7310 += 1 };
  s0 -> s5 [75, 75] { R7354 += 1, R7310 += 1 };
  s0 -> s1 [76, 65535] { R7354 += 1, R7310 += 1 };
  s1 -> s1 [0, 69] { R7354 += 1, R7310 += 1 };
  s1 -> s3 [70, 70] { R7354 += 1, R7310 += 1 };
  s1 -> s4 [70, 70] { R7354 += 1, R7310 += 1 };
  s1 -> s5 [75, 75] { R7354 += 1, R7310 += 1 };
  s1 -> s1 [76, 65535] { R7354 += 1, R7310 += 1 };
  s2 -> s1 [0, 69] { R7354 += 1, R7310 += 1 };
  s2 -> s2 [0, 65535] { R7354 += 1, R7309 += 1, R7310 += 1 };
  s2 -> s3 [70, 70] { R7354 += 1, R7310 += 1 };
  s2 -> s4 [70, 70] { R7354 += 1, R7310 += 1 };
  s2 -> s5 [75, 75] { R7354 += 1, R7310 += 1 };
  s2 -> s1 [76, 65535] { R7354 += 1, R7310 += 1 };
  s3 -> s3 [0, 70] { R7354 += 1, R7310 += 1 };
  s3 -> s8 [75, 75] { R7354 += 1, R7310 += 1 };
  s3 -> s3 [76, 65535] { R7354 += 1, R7310 += 1 };
  s5 -> s5 [0, 69] { R7354 += 1, R7310 += 1 };
  s5 -> s5 [0, 65535] { R7354 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [70, 70] { R7354 += 1, R7310 += 1 };
  s5 -> s8 [70, 70] { R7354 += 1, R7310 += 1 };
  s5 -> s5 [75, 65535] { R7354 += 1, R7310 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R7354 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 70] { R7354 += 1, R7310 += 1 };
  s8 -> s8 [0, 65535] { R7354 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [75, 65535] { R7354 += 1, R7310 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 69] { R7356 += 1, R7312 += 1, R83 += 1 };
  s0 -> s2 [0, 65535] { R7356 += 1, R7311 += 1, R7312 += 1 };
  s0 -> s0 [0, 65535] { R7355 += 1, R7356 += 1 };
  s0 -> s3 [70, 70] { R7356 += 1, R7312 += 1, R83 += 1 };
  s0 -> s4 [70, 70] { R7356 += 1, R7312 += 1, R83 += 1 };
  s0 -> s1 [71, 65535] { R7356 += 1, R7312 += 1, R83 += 1 };
  s1 -> s1 [0, 69] { R7356 += 1, R7312 += 1, R83 += 1 };
  s1 -> s1 [0, 65535] { R7356 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [70, 70] { R7356 += 1, R7312 += 1, R83 += 1 };
  s1 -> s4 [70, 70] { R7356 += 1, R7312 += 1, R83 += 1 };
  s1 -> s1 [71, 65535] { R7356 += 1, R7312 += 1, R83 += 1 };
  s2 -> s1 [0, 69] { R7356 += 1, R7312 += 1, R83 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R7356 += 1, R7311 += 1, R7312 += 1 };
  s2 -> s3 [70, 70] { R7356 += 1, R7312 += 1, R83 += 1 };
  s2 -> s4 [70, 70] { R7356 += 1, R7312 += 1, R83 += 1 };
  s2 -> s1 [71, 65535] { R7356 += 1, R7312 += 1, R83 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R7356 += 1 };
  s4 -> s5 [0, 65535] { R7356 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R7356 += 1, R7312 += 1, R83 += 1 };
  s5 -> s5 [0, 65535] { R7356 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 69] { R7358 += 1, R7314 += 1, R85 += 1 };
  s0 -> s2 [0, 65535] { R7358 += 1, R7313 += 1, R7314 += 1 };
  s0 -> s0 [0, 65535] { R7357 += 1, R7358 += 1 };
  s0 -> s3 [70, 70] { R7358 += 1, R7314 += 1, R85 += 1 };
  s0 -> s4 [70, 70] { R7358 += 1, R7314 += 1, R85 += 1 };
  s0 -> s1 [71, 65535] { R7358 += 1, R7314 += 1, R85 += 1 };
  s1 -> s1 [0, 69] { R7358 += 1, R7314 += 1, R85 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R7358 += 1 };
  s1 -> s3 [70, 70] { R7358 += 1, R7314 += 1, R85 += 1 };
  s1 -> s4 [70, 70] { R7358 += 1, R7314 += 1, R85 += 1 };
  s1 -> s1 [71, 65535] { R7358 += 1, R7314 += 1, R85 += 1 };
  s2 -> s1 [0, 69] { R7358 += 1, R7314 += 1, R85 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R7358 += 1, R7313 += 1, R7314 += 1 };
  s2 -> s3 [70, 70] { R7358 += 1, R7314 += 1, R85 += 1 };
  s2 -> s4 [70, 70] { R7358 += 1, R7314 += 1, R85 += 1 };
  s2 -> s1 [71, 65535] { R7358 += 1, R7314 += 1, R85 += 1 };
  s3 -> s3 [0, 65535] { R7358 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R7358 += 1, R7314 += 1, R85 += 1 };
  s4 -> s6 [0, 65535] { R7358 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7358 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 69] { R7360 += 1, R7316 += 1, R88 += 1 };
  s0 -> s2 [0, 69] { R7360 += 1, R7316 += 1, R87 += 1, R88 += 1 };
  s0 -> s3 [0, 65535] { R7360 += 1, R7315 += 1, R7316 += 1 };
  s0 -> s0 [0, 65535] { R7359 += 1, R7360 += 1 };
  s0 -> s4 [70, 70] { R7360 += 1, R7316 += 1, R87 += 1, R88 += 1 };
  s0 -> s5 [70, 70] { R7360 += 1, R7316 += 1, R88 += 1 };
  s0 -> s6 [70, 70] { R7360 += 1, R7316 += 1, R88 += 1 };
  s0 -> s7 [70, 70] { R7360 += 1, R7316 += 1, R87 += 1, R88 += 1 };
  s0 -> s1 [71, 74] { R7360 += 1, R7316 += 1, R88 += 1 };
  s0 -> s2 [71, 65535] { R7360 += 1, R7316 += 1, R87 += 1, R88 += 1 };
  s0 -> s8 [75, 75] { R7360 += 1, R7316 += 1, R88 += 1 };
  s0 -> s1 [76, 65535] { R7360 += 1, R7316 += 1, R88 += 1 };
  s1 -> s1 [0, 69] { R7360 += 1, R7316 += 1, R88 += 1 };
  s1 -> s5 [70, 70] { R7360 += 1, R7316 += 1, R88 += 1 };
  s1 -> s6 [70, 70] { R7360 += 1, R7316 += 1, R88 += 1 };
  s1 -> s1 [71, 74] { R7360 += 1, R7316 += 1, R88 += 1 };
  s1 -> s8 [75, 75] { R7360 += 1, R7316 += 1, R88 += 1 };
  s1 -> s1 [76, 65535] { R7360 += 1, R7316 += 1, R88 += 1 };
  s2 -> s1 [0, 69] { R7360 += 1, R7316 += 1, R88 += 1 };
  s2 -> s2 [0, 69] { R7360 += 1, R7316 += 1, R87 += 1, R88 += 1 };
  s2 -> s4 [70, 70] { R7360 += 1, R7316 += 1, R87 += 1, R88 += 1 };
  s2 -> s5 [70, 70] { R7360 += 1, R7316 += 1, R88 += 1 };
  s2 -> s6 [70, 70] { R7360 += 1, R7316 += 1, R88 += 1 };
  s2 -> s7 [70, 70] { R7360 += 1, R7316 += 1, R87 += 1, R88 += 1 };
  s2 -> s1 [71, 74] { R7360 += 1, R7316 += 1, R88 += 1 };
  s2 -> s2 [71, 65535] { R7360 += 1, R7316 += 1, R87 += 1, R88 += 1 };
  s2 -> s8 [75, 75] { R7360 += 1, R7316 += 1, R88 += 1 };
  s2 -> s1 [76, 65535] { R7360 += 1, R7316 += 1, R88 += 1 };
  s3 -> s1 [0, 69] { R7360 += 1, R7316 += 1, R88 += 1 };
  s3 -> s2 [0, 69] { R7360 += 1, R7316 += 1, R87 += 1, R88 += 1 };
  s3 -> s3 [0, 65535] { R7360 += 1, R7315 += 1, R7316 += 1 };
  s3 -> s4 [70, 70] { R7360 += 1, R7316 += 1, R87 += 1, R88 += 1 };
  s3 -> s5 [70, 70] { R7360 += 1, R7316 += 1, R88 += 1 };
  s3 -> s6 [70, 70] { R7360 += 1, R7316 += 1, R88 += 1 };
  s3 -> s7 [70, 70] { R7360 += 1, R7316 += 1, R87 += 1, R88 += 1 };
  s3 -> s1 [71, 74] { R7360 += 1, R7316 += 1, R88 += 1 };
  s3 -> s2 [71, 65535] { R7360 += 1, R7316 += 1, R87 += 1, R88 += 1 };
  s3 -> s8 [75, 75] { R7360 += 1, R7316 += 1, R88 += 1 };
  s3 -> s1 [76, 65535] { R7360 += 1, R7316 += 1, R88 += 1 };
  s4 -> s6 [0, 74] { R7360 += 1, R7316 += 1, R88 += 1 };
  s4 -> s4 [0, 65535] { R7360 += 1, R7316 += 1, R87 += 1, R88 += 1 };
  s4 -> s11 [75, 75] { R7360 += 1, R7316 += 1, R88 += 1 };
  s4 -> s6 [76, 65535] { R7360 += 1, R7316 += 1, R88 += 1 };
  s6 -> s6 [0, 74] { R7360 += 1, R7316 += 1, R88 += 1 };
  s6 -> s11 [75, 75] { R7360 += 1, R7316 += 1, R88 += 1 };
  s6 -> s6 [76, 65535] { R7360 += 1, R7316 += 1, R88 += 1 };
  s8 -> s8 [0, 69] { R7360 += 1, R7316 += 1, R88 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R7360 += 1 };
  s8 -> s10 [70, 70] { R7360 += 1, R7316 += 1, R88 += 1 };
  s8 -> s11 [70, 70] { R7360 += 1, R7316 += 1, R88 += 1 };
  s8 -> s8 [71, 65535] { R7360 += 1, R7316 += 1, R88 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R7360 += 1 };
  s11 -> s12 [0, 65535] { R7360 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R7360 += 1, R7316 += 1, R88 += 1 };
  s12 -> s12 [0, 65535] { R7360 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 69] { R7362 += 1, R7318 += 1, R91 += 1, R92 += 1 };
  s0 -> s0 [0, 65535] { R7361 += 1, R7362 += 1 };
  s0 -> s2 [0, 65535] { R7362 += 1, R7317 += 1, R7318 += 1 };
  s0 -> s3 [70, 70] { R7362 += 1, R7318 += 1, R91 += 1, R92 += 1 };
  s0 -> s4 [70, 70] { R7362 += 1, R7318 += 1, R91 += 1, R92 += 1 };
  s0 -> s1 [71, 65535] { R7362 += 1, R7318 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 69] { R7362 += 1, R7318 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 65535] { R7362 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [70, 70] { R7362 += 1, R7318 += 1, R91 += 1, R92 += 1 };
  s1 -> s4 [70, 70] { R7362 += 1, R7318 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [71, 65535] { R7362 += 1, R7318 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [0, 69] { R7362 += 1, R7318 += 1, R91 += 1, R92 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R7362 += 1, R7317 += 1, R7318 += 1 };
  s2 -> s3 [70, 70] { R7362 += 1, R7318 += 1, R91 += 1, R92 += 1 };
  s2 -> s4 [70, 70] { R7362 += 1, R7318 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [71, 65535] { R7362 += 1, R7318 += 1, R91 += 1, R92 += 1 };
  s3 -> s3 [0, 65535] { R7362 += 1, R7318 += 1, R91 += 1, R92 += 1 };
  s3 -> s6 [0, 65535] { R7362 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R7362 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7362 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 69] { R7364 += 1, R7320 += 1, R6806 += 1, R6807 += 1 };
  s0 -> s2 [0, 69] { R7364 += 1, R7320 += 1, R6805 += 1, R6806 += 1 };
  s0 -> s3 [0, 65535] { R7364 += 1, R7319 += 1, R7320 += 1 };
  s0 -> s0 [0, 65535] { R7363 += 1, R7364 += 1 };
  s0 -> s4 [70, 70] { R7364 += 1, R7320 += 1, R6806 += 1, R6807 += 1 };
  s0 -> s5 [70, 70] { R7364 += 1, R7320 += 1, R6806 += 1, R6807 += 1 };
  s0 -> s6 [70, 70] { R7364 += 1, R7320 += 1, R6805 += 1, R6806 += 1 };
  s0 -> s7 [70, 70] { R7364 += 1, R7320 += 1, R6805 += 1, R6806 += 1 };
  s0 -> s1 [71, 65535] { R7364 += 1, R7320 += 1, R6806 += 1, R6807 += 1 };
  s0 -> s2 [71, 65535] { R7364 += 1, R7320 += 1, R6805 += 1, R6806 += 1 };
  s1 -> s1 [0, 69] { R7364 += 1, R7320 += 1, R6806 += 1, R6807 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s1 [0, 65535] { R7364 += 1 };
  s1 -> s4 [70, 70] { R7364 += 1, R7320 += 1, R6806 += 1, R6807 += 1 };
  s1 -> s5 [70, 70] { R7364 += 1, R7320 += 1, R6806 += 1, R6807 += 1 };
  s1 -> s1 [71, 65535] { R7364 += 1, R7320 += 1, R6806 += 1, R6807 += 1 };
  s2 -> s1 [0, 69] { R7364 += 1, R7320 += 1, R6806 += 1, R6807 += 1 };
  s2 -> s2 [0, 69] { R7364 += 1, R7320 += 1, R6805 += 1, R6806 += 1 };
  s2 -> s4 [70, 70] { R7364 += 1, R7320 += 1, R6806 += 1, R6807 += 1 };
  s2 -> s5 [70, 70] { R7364 += 1, R7320 += 1, R6806 += 1, R6807 += 1 };
  s2 -> s6 [70, 70] { R7364 += 1, R7320 += 1, R6805 += 1, R6806 += 1 };
  s2 -> s7 [70, 70] { R7364 += 1, R7320 += 1, R6805 += 1, R6806 += 1 };
  s2 -> s1 [71, 65535] { R7364 += 1, R7320 += 1, R6806 += 1, R6807 += 1 };
  s2 -> s2 [71, 65535] { R7364 += 1, R7320 += 1, R6805 += 1, R6806 += 1 };
  s3 -> s1 [0, 69] { R7364 += 1, R7320 += 1, R6806 += 1, R6807 += 1 };
  s3 -> s2 [0, 69] { R7364 += 1, R7320 += 1, R6805 += 1, R6806 += 1 };
  s3 -> s3 [0, 65535] { R7364 += 1, R7319 += 1, R7320 += 1 };
  s3 -> s4 [70, 70] { R7364 += 1, R7320 += 1, R6806 += 1, R6807 += 1 };
  s3 -> s5 [70, 70] { R7364 += 1, R7320 += 1, R6806 += 1, R6807 += 1 };
  s3 -> s6 [70, 70] { R7364 += 1, R7320 += 1, R6805 += 1, R6806 += 1 };
  s3 -> s7 [70, 70] { R7364 += 1, R7320 += 1, R6805 += 1, R6806 += 1 };
  s3 -> s1 [71, 65535] { R7364 += 1, R7320 += 1, R6806 += 1, R6807 += 1 };
  s3 -> s2 [71, 65535] { R7364 += 1, R7320 += 1, R6805 += 1, R6806 += 1 };
  s4 -> s9 [0, 65535] { R7364 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s4 [0, 65535] { R7364 += 1, R7320 += 1, R6806 += 1, R6807 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s5 [0, 65535] { R7364 += 1 };
  s7 -> s4 [0, 65535] { R7364 += 1, R7320 += 1, R6806 += 1, R6807 += 1 };
  s7 -> s7 [0, 65535] { R7364 += 1, R7320 += 1, R6805 += 1, R6806 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R7364 += 1 };
  s9 -> s8 [0, 65535];
  accepting s4, s8, s5, s9, s1;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 69] { R7366 += 1, R7322 += 1, R6812 += 1, R6814 += 1 };
  s0 -> s2 [0, 69] { R7366 += 1, R7322 += 1, R6812 += 1, R6813 += 1, R6814 += 1 };
  s0 -> s3 [0, 69] { R7366 += 1, R7322 += 1, R6811 += 1, R6812 += 1 };
  s0 -> s4 [0, 65535] { R7366 += 1, R7321 += 1, R7322 += 1 };
  s0 -> s0 [0, 65535] { R7365 += 1, R7366 += 1 };
  s0 -> s5 [70, 70] { R7366 += 1, R7322 += 1, R6812 += 1, R6813 += 1, R6814 += 1 };
  s0 -> s6 [70, 70] { R7366 += 1, R7322 += 1, R6812 += 1, R6814 += 1 };
  s0 -> s7 [70, 70] { R7366 += 1, R7322 += 1, R6812 += 1, R6813 += 1, R6814 += 1 };
  s0 -> s8 [70, 70] { R7366 += 1, R7322 += 1, R6812 += 1, R6814 += 1 };
  s0 -> s9 [70, 70] { R7366 += 1, R7322 += 1, R6811 += 1, R6812 += 1 };
  s0 -> s10 [70, 70] { R7366 += 1, R7322 += 1, R6811 += 1, R6812 += 1 };
  s0 -> s1 [71, 74] { R7366 += 1, R7322 += 1, R6812 += 1, R6814 += 1 };
  s0 -> s2 [71, 65535] { R7366 += 1, R7322 += 1, R6812 += 1, R6813 += 1, R6814 += 1 };
  s0 -> s3 [71, 65535] { R7366 += 1, R7322 += 1, R6811 += 1, R6812 += 1 };
  s0 -> s11 [75, 75] { R7366 += 1, R7322 += 1, R6812 += 1, R6814 += 1 };
  s0 -> s1 [76, 65535] { R7366 += 1, R7322 += 1, R6812 += 1, R6814 += 1 };
  s1 -> s1 [0, 69] { R7366 += 1, R7322 += 1, R6812 += 1, R6814 += 1 };
  s1 -> s6 [70, 70] { R7366 += 1, R7322 += 1, R6812 += 1, R6814 += 1 };
  s1 -> s8 [70, 70] { R7366 += 1, R7322 += 1, R6812 += 1, R6814 += 1 };
  s1 -> s1 [71, 74] { R7366 += 1, R7322 += 1, R6812 += 1, R6814 += 1 };
  s1 -> s11 [75, 75] { R7366 += 1, R7322 += 1, R6812 += 1, R6814 += 1 };
  s1 -> s1 [76, 65535] { R7366 += 1, R7322 += 1, R6812 += 1, R6814 += 1 };
  s2 -> s1 [0, 69] { R7366 += 1, R7322 += 1, R6812 += 1, R6814 += 1 };
  s2 -> s2 [0, 69] { R7366 += 1, R7322 += 1, R6812 += 1, R6813 += 1, R6814 += 1 };
  s2 -> s5 [70, 70] { R7366 += 1, R7322 += 1, R6812 += 1, R6813 += 1, R6814 += 1 };
  s2 -> s6 [70, 70] { R7366 += 1, R7322 += 1, R6812 += 1, R6814 += 1 };
  s2 -> s7 [70, 70] { R7366 += 1, R7322 += 1, R6812 += 1, R6813 += 1, R6814 += 1 };
  s2 -> s8 [70, 70] { R7366 += 1, R7322 += 1, R6812 += 1, R6814 += 1 };
  s2 -> s1 [71, 74] { R7366 += 1, R7322 += 1, R6812 += 1, R6814 += 1 };
  s2 -> s2 [71, 65535] { R7366 += 1, R7322 += 1, R6812 += 1, R6813 += 1, R6814 += 1 };
  s2 -> s11 [75, 75] { R7366 += 1, R7322 += 1, R6812 += 1, R6814 += 1 };
  s2 -> s1 [76, 65535] { R7366 += 1, R7322 += 1, R6812 += 1, R6814 += 1 };
  s3 -> s1 [0, 69] { R7366 += 1, R7322 += 1, R6812 += 1, R6814 += 1 };
  s3 -> s2 [0, 69] { R7366 += 1, R7322 += 1, R6812 += 1, R6813 += 1, R6814 += 1 };
  s3 -> s3 [0, 69] { R7366 += 1, R7322 += 1, R6811 += 1, R6812 += 1 };
  s3 -> s5 [70, 70] { R7366 += 1, R7322 += 1, R6812 += 1, R6813 += 1, R6814 += 1 };
  s3 -> s6 [70, 70] { R7366 += 1, R7322 += 1, R6812 += 1, R6814 += 1 };
  s3 -> s7 [70, 70] { R7366 += 1, R7322 += 1, R6812 += 1, R6813 += 1, R6814 += 1 };
  s3 -> s8 [70, 70] { R7366 += 1, R7322 += 1, R6812 += 1, R6814 += 1 };
  s3 -> s9 [70, 70] { R7366 += 1, R7322 += 1, R6811 += 1, R6812 += 1 };
  s3 -> s10 [70, 70] { R7366 += 1, R7322 += 1, R6811 += 1, R6812 += 1 };
  s3 -> s1 [71, 74] { R7366 += 1, R7322 += 1, R6812 += 1, R6814 += 1 };
  s3 -> s2 [71, 65535] { R7366 += 1, R7322 += 1, R6812 += 1, R6813 += 1, R6814 += 1 };
  s3 -> s3 [71, 65535] { R7366 += 1, R7322 += 1, R6811 += 1, R6812 += 1 };
  s3 -> s11 [75, 75] { R7366 += 1, R7322 += 1, R6812 += 1, R6814 += 1 };
  s3 -> s1 [76, 65535] { R7366 += 1, R7322 += 1, R6812 += 1, R6814 += 1 };
  s4 -> s1 [0, 69] { R7366 += 1, R7322 += 1, R6812 += 1, R6814 += 1 };
  s4 -> s2 [0, 69] { R7366 += 1, R7322 += 1, R6812 += 1, R6813 += 1, R6814 += 1 };
  s4 -> s3 [0, 69] { R7366 += 1, R7322 += 1, R6811 += 1, R6812 += 1 };
  s4 -> s4 [0, 65535] { R7366 += 1, R7321 += 1, R7322 += 1 };
  s4 -> s5 [70, 70] { R7366 += 1, R7322 += 1, R6812 += 1, R6813 += 1, R6814 += 1 };
  s4 -> s6 [70, 70] { R7366 += 1, R7322 += 1, R6812 += 1, R6814 += 1 };
  s4 -> s7 [70, 70] { R7366 += 1, R7322 += 1, R6812 += 1, R6813 += 1, R6814 += 1 };
  s4 -> s8 [70, 70] { R7366 += 1, R7322 += 1, R6812 += 1, R6814 += 1 };
  s4 -> s9 [70, 70] { R7366 += 1, R7322 += 1, R6811 += 1, R6812 += 1 };
  s4 -> s10 [70, 70] { R7366 += 1, R7322 += 1, R6811 += 1, R6812 += 1 };
  s4 -> s1 [71, 74] { R7366 += 1, R7322 += 1, R6812 += 1, R6814 += 1 };
  s4 -> s2 [71, 65535] { R7366 += 1, R7322 += 1, R6812 += 1, R6813 += 1, R6814 += 1 };
  s4 -> s3 [71, 65535] { R7366 += 1, R7322 += 1, R6811 += 1, R6812 += 1 };
  s4 -> s11 [75, 75] { R7366 += 1, R7322 += 1, R6812 += 1, R6814 += 1 };
  s4 -> s1 [76, 65535] { R7366 += 1, R7322 += 1, R6812 += 1, R6814 += 1 };
  s7 -> s8 [0, 74] { R7366 += 1, R7322 += 1, R6812 += 1, R6814 += 1 };
  s7 -> s7 [0, 65535] { R7366 += 1, R7322 += 1, R6812 += 1, R6813 += 1, R6814 += 1 };
  s7 -> s13 [75, 75] { R7366 += 1, R7322 += 1, R6812 += 1, R6814 += 1 };
  s7 -> s8 [76, 65535] { R7366 += 1, R7322 += 1, R6812 += 1, R6814 += 1 };
  s8 -> s8 [0, 74] { R7366 += 1, R7322 += 1, R6812 += 1, R6814 += 1 };
  s8 -> s13 [75, 75] { R7366 += 1, R7322 += 1, R6812 += 1, R6814 += 1 };
  s8 -> s8 [76, 65535] { R7366 += 1, R7322 += 1, R6812 += 1, R6814 += 1 };
  s9 -> s8 [0, 74] { R7366 += 1, R7322 += 1, R6812 += 1, R6814 += 1 };
  s9 -> s7 [0, 65535] { R7366 += 1, R7322 += 1, R6812 += 1, R6813 += 1, R6814 += 1 };
  s9 -> s9 [0, 65535] { R7366 += 1, R7322 += 1, R6811 += 1, R6812 += 1 };
  s9 -> s13 [75, 75] { R7366 += 1, R7322 += 1, R6812 += 1, R6814 += 1 };
  s9 -> s8 [76, 65535] { R7366 += 1, R7322 += 1, R6812 += 1, R6814 += 1 };
  s11 -> s11 [0, 69] { R7366 += 1, R7322 += 1, R6812 += 1, R6814 += 1 };
  s11 -> s12 [0, 65535];
  s11 -> s11 [0, 65535] { R7366 += 1 };
  s11 -> s13 [70, 70] { R7366 += 1, R7322 += 1, R6812 += 1, R6814 += 1 };
  s11 -> s14 [70, 70] { R7366 += 1, R7322 += 1, R6812 += 1, R6814 += 1 };
  s11 -> s11 [71, 65535] { R7366 += 1, R7322 += 1, R6812 += 1, R6814 += 1 };
  s12 -> s12 [0, 65535];
  s13 -> s12 [0, 65535];
  s13 -> s13 [0, 65535] { R7366 += 1, R7322 += 1, R6812 += 1, R6814 += 1 };
  s13 -> s15 [0, 65535] { R7366 += 1 };
  s14 -> s12 [0, 65535];
  s14 -> s14 [0, 65535] { R7366 += 1 };
  s15 -> s12 [0, 65535];
  s15 -> s15 [0, 65535] { R7366 += 1 };
  accepting s12, s13, s14, s15, s11;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 69] { R7368 += 1, R7324 += 1, R7259 += 1, R7260 += 1 };
  s0 -> s2 [0, 69] { R7368 += 1, R7324 += 1, R7260 += 1, R7261 += 1, R7262 += 1 };
  s0 -> s3 [0, 65535] { R7368 += 1, R7323 += 1, R7324 += 1 };
  s0 -> s0 [0, 65535] { R7367 += 1, R7368 += 1 };
  s0 -> s4 [70, 70] { R7368 += 1, R7324 += 1, R7260 += 1, R7261 += 1, R7262 += 1 };
  s0 -> s5 [70, 70] { R7368 += 1, R7324 += 1, R7259 += 1, R7260 += 1 };
  s0 -> s6 [70, 70] { R7368 += 1, R7324 += 1, R7259 += 1, R7260 += 1 };
  s0 -> s7 [70, 70] { R7368 += 1, R7324 += 1, R7260 += 1, R7261 += 1, R7262 += 1 };
  s0 -> s1 [71, 65535] { R7368 += 1, R7324 += 1, R7259 += 1, R7260 += 1 };
  s0 -> s2 [71, 65535] { R7368 += 1, R7324 += 1, R7260 += 1, R7261 += 1, R7262 += 1 };
  s1 -> s1 [0, 69] { R7368 += 1, R7324 += 1, R7259 += 1, R7260 += 1 };
  s1 -> s2 [0, 69] { R7368 += 1, R7324 += 1, R7260 += 1, R7261 += 1, R7262 += 1 };
  s1 -> s4 [70, 70] { R7368 += 1, R7324 += 1, R7260 += 1, R7261 += 1, R7262 += 1 };
  s1 -> s5 [70, 70] { R7368 += 1, R7324 += 1, R7259 += 1, R7260 += 1 };
  s1 -> s6 [70, 70] { R7368 += 1, R7324 += 1, R7259 += 1, R7260 += 1 };
  s1 -> s7 [70, 70] { R7368 += 1, R7324 += 1, R7260 += 1, R7261 += 1, R7262 += 1 };
  s1 -> s1 [71, 65535] { R7368 += 1, R7324 += 1, R7259 += 1, R7260 += 1 };
  s1 -> s2 [71, 65535] { R7368 += 1, R7324 += 1, R7260 += 1, R7261 += 1, R7262 += 1 };
  s2 -> s2 [0, 69] { R7368 += 1, R7324 += 1, R7260 += 1, R7261 += 1, R7262 += 1 };
  s2 -> s2 [0, 65535] { R7368 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s4 [70, 70] { R7368 += 1, R7324 += 1, R7260 += 1, R7261 += 1, R7262 += 1 };
  s2 -> s7 [70, 70] { R7368 += 1, R7324 += 1, R7260 += 1, R7261 += 1, R7262 += 1 };
  s2 -> s2 [71, 65535] { R7368 += 1, R7324 += 1, R7260 += 1, R7261 += 1, R7262 += 1 };
  s3 -> s1 [0, 69] { R7368 += 1, R7324 += 1, R7259 += 1, R7260 += 1 };
  s3 -> s2 [0, 69] { R7368 += 1, R7324 += 1, R7260 += 1, R7261 += 1, R7262 += 1 };
  s3 -> s3 [0, 65535] { R7368 += 1, R7323 += 1, R7324 += 1 };
  s3 -> s4 [70, 70] { R7368 += 1, R7324 += 1, R7260 += 1, R7261 += 1, R7262 += 1 };
  s3 -> s5 [70, 70] { R7368 += 1, R7324 += 1, R7259 += 1, R7260 += 1 };
  s3 -> s6 [70, 70] { R7368 += 1, R7324 += 1, R7259 += 1, R7260 += 1 };
  s3 -> s7 [70, 70] { R7368 += 1, R7324 += 1, R7260 += 1, R7261 += 1, R7262 += 1 };
  s3 -> s1 [71, 65535] { R7368 += 1, R7324 += 1, R7259 += 1, R7260 += 1 };
  s3 -> s2 [71, 65535] { R7368 += 1, R7324 += 1, R7260 += 1, R7261 += 1, R7262 += 1 };
  s4 -> s4 [0, 65535] { R7368 += 1, R7324 += 1, R7260 += 1, R7261 += 1, R7262 += 1 };
  s4 -> s9 [0, 65535] { R7368 += 1 };
  s4 -> s8 [0, 65535];
  s6 -> s4 [0, 65535] { R7368 += 1, R7324 += 1, R7260 += 1, R7261 += 1, R7262 += 1 };
  s6 -> s6 [0, 65535] { R7368 += 1, R7324 += 1, R7259 += 1, R7260 += 1 };
  s7 -> s7 [0, 65535] { R7368 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R7368 += 1 };
  s9 -> s8 [0, 65535];
  accepting s4, s8, s2, s9, s7;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [102, 102];
  accepting s1;
};
};
constraint R3 = R7368 && R23 - R7368 = -1 && R24 = R7368 && R25 - R7368 = -1 && R26 = R7368 && R27 = 0 && R28 = 1 && R29 = 0 && R30 = 1 && R45 + R84 + R83 + -1*R6816 + -1*R6812 - R66 = 0 && R49 + R89 + R87 = 0 && R50 + R90 + R88 + -1*R6816 + -1*R6812 - R66 = 0 && R55 + R96 + R93 + -1*R6818 + -1*R6814 - R68 = 0 && R65 + R6815 + R6811 = 0 && R67 + R6817 + R6813 = 0 && R7309 = 0 && R7310 = 0 && R7315 = 0 && R7316 = 0 && R7319 = 0 && R7320 = 0 && R7321 = 0 && R7322 = 0 && R7323 = 0 && R7324 = 0 && R7325 = 0 && R7326 = R7368 && R7327 = 0 && R7328 = R7368 && R7329 = 0 && R7330 = R7368 && R7331 = 0 && R7332 = R7368 && R7333 = 0 && R7334 = R7368 && R7335 = 0 && R7336 = R7368 && R7337 = 0 && R7338 = R7368 && R7339 = 0 && R7340 = R7368 && R7341 = 0 && R7342 = R7368 && R7343 = 0 && R7344 = R7368 && R7345 = 0 && R7346 = R7368 && R7347 = 0 && R7348 = R7368 && R7349 = 0 && R7350 = R7368 && R7351 = 0 && R7352 = R7368 && R7353 = 0 && R7354 = R7368 && R7355 = 0 && R7356 = R7368 && R7357 = 0 && R7358 = R7368 && R7359 = 0 && R7360 = R7368 && R7361 = 0 && R7362 = R7368 && R7363 = 0 && R7364 = R7368 && R7365 = 0 && R7366 = R7368 && R7367 = 0 && -1 < R2 && R12 < 1 && R15 < 1 && R16 < 1 && R47 + R86 + R85 < 1 && R61 + R6810 + R6807 < 1 && -1*R6816 + -1*R6812 - R66 < 1 && -1*R6818 + -1*R6814 - R68 < 1 && 0 < R7368 && (R2 != 0 || R20 = 0 || (R7269 = 0 && R7270 = 0)) && (R2 != 0 || R20 = 0 || (R7271 = 0 && R7272 = 0)) && (R2 != 0 || R20 = 0 || (R7273 = 0 && R7274 = 0)) && (R2 != 0 || R20 = 0 || (R7275 = 0 && R7276 = 0)) && (R2 != 0 || R20 = 0 || (R7277 = 0 && R7278 = 0)) && (R2 != 0 || R20 = 0 || (R7279 = 0 && R7280 = 0)) && (R2 != 0 || R20 = 0 || (R7281 = 0 && R7282 = 0)) && (R2 != 0 || R20 = 0 || (R7283 = 0 && R7284 = 0)) && (R2 != 0 || R20 = 0 || (R7285 = 0 && R7286 = 0)) && (R2 != 0 || R20 = 0 || (R7287 = 0 && R7288 = 0)) && (R53 + R94 + R91 != 0 || R54 + R95 + R92 + -1*R6816 + -1*R6812 - R66 = 0 || R66 + R6816 + R6812 < 1) && (R59 + R6808 + R6805 != 0 || R60 + R6809 + R6806 + -1*R6816 + -1*R6812 - R66 = 0 || R66 + R6816 + R6812 < 1) && (R66 + R6816 + R6812 != 0 || ((R53 + R94 + R91 != 0 || R54 + R95 + R92 = 0 || R68 + R6818 + R6814 < 1) && (R53 + R94 + R91 = 0 || R68 + R6818 + R6814 < 1))) && (R66 + R6816 + R6812 != 0 || ((R59 + R6808 + R6805 != 0 || R60 + R6809 + R6806 = 0 || R68 + R6818 + R6814 < 1) && (R59 + R6808 + R6805 = 0 || R68 + R6818 + R6814 < 1))) && (R66 + R6816 + R6812 != 0 || ((R73 + R7264 + R7259 != 0 || R74 + R7265 + R7260 = 0 || R68 + R6818 + R6814 < 1) && (R73 + R7264 + R7259 = 0 || R68 + R6818 + R6814 < 1))) && (R68 + R6818 + R6814 != 0 || R77 + R7268 + R7263 = 0 || (R75 + R7266 + R7261 = 0 && R76 + R7267 + R7262 = 0)) && (R73 + R7264 + R7259 != 0 || R66 + R6816 + R6812 + -1*R7265 + -1*R7260 - R74 = 0 || R66 + R6816 + R6812 < 1) && (R75 + R7266 + R7261 != 0 || R68 + R6818 + R6814 + -1*R7267 + -1*R7262 - R76 = 0 || R68 + R6818 + R6814 < 1) && (R7269 != 0 || R2 = R7270 || R2 < 1) && (R7271 != 0 || R2 = R7272 || R2 < 1) && (R7273 != 0 || R2 = R7274 || R2 < 1) && (R7275 != 0 || R2 = R7276 || R2 < 1) && (R7277 != 0 || R2 = R7278 || R2 < 1) && (R7279 != 0 || R2 = R7280 || R2 < 1) && (R7281 != 0 || R2 = R7282 || R2 < 1) && (R7283 != 0 || R2 = R7284 || R2 < 1) && (R7285 != 0 || R2 = R7286 || R2 < 1) && (R7287 != 0 || R2 = R7288 || R2 < 1) && (R21 = 0 || (R7307 = 0 && R7308 = 0)) && (R21 = 0 || (R7311 = 0 && R7312 = 0)) && (R21 = 0 || (R7313 = 0 && R7314 = 0)) && (R21 = 0 || (R7317 = 0 && R7318 = 0)) && (R22 = 0 || (R7289 = 0 && R7290 = 0)) && (R22 = 0 || (R7291 = 0 && R7292 = 0)) && (R22 = 0 || (R7293 = 0 && R7294 = 0)) && (R22 = 0 || (R7295 = 0 && R7296 = 0)) && (R22 = 0 || (R7297 = 0 && R7298 = 0)) && (R22 = 0 || (R7299 = 0 && R7300 = 0)) && (R22 = 0 || (R7301 = 0 && R7302 = 0)) && (R22 = 0 || (R7303 = 0 && R7304 = 0)) && (R22 = 0 || (R7305 = 0 && R7306 = 0)) && (R53 + R94 + R91 = 0 || R66 + R6816 + R6812 < 1) && (R59 + R6808 + R6805 = 0 || R66 + R6816 + R6812 < 1) && (R73 + R7264 + R7259 = 0 || R66 + R6816 + R6812 < 1) && (R75 + R7266 + R7261 = 0 || R68 + R6818 + R6814 < 1) && (R7269 = 0 || R2 < 1) && (R7271 = 0 || R2 < 1) && (R7273 = 0 || R2 < 1) && (R7275 = 0 || R2 < 1) && (R7277 = 0 || R2 < 1) && (R7279 = 0 || R2 < 1) && (R7281 = 0 || R2 < 1) && (R7283 = 0 || R2 < 1) && (R7285 = 0 || R2 < 1) && (R7287 = 0 || R2 < 1);
// End of Parikh automata intersection problem
