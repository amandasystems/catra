// Parikh automata intersection problem, generated by OSTRICH+
counter int R12, R15, R16, R2, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R3451, R3452, R3453, R3454, R3455, R3456, R4, R45, R47, R49, R5, R50, R53, R54, R55, R59, R60, R61, R6247, R6248, R6249, R6250, R6251, R6252, R6253, R6254, R65, R6585, R6586, R6587, R6588, R6589, R6590, R6591, R6592, R6593, R6594, R6595, R6596, R6597, R6598, R6599, R66, R6600, R6601, R6602, R6603, R6604, R6605, R6606, R6607, R6608, R6609, R6610, R6611, R6612, R6613, R6614, R6615, R6616, R6617, R6618, R6619, R6620, R6621, R6622, R6623, R6624, R6625, R6626, R6627, R6628, R6629, R6630, R6631, R6632, R6633, R6634, R6635, R6636, R6637, R6638, R6639, R6640, R6641, R6642, R6643, R6644, R6645, R6646, R6647, R6648, R6649, R6650, R6651, R6652, R6653, R6654, R6655, R6656, R6657, R6658, R6659, R6660, R6661, R6662, R6663, R6664, R6665, R6666, R6667, R6668, R6669, R6670, R6671, R6672, R6673, R6674, R6675, R6676, R6677, R6678, R6679, R6680, R6681, R6682, R6683, R6684, R6685, R6686, R6687, R6688, R6689, R6690, R6691, R6692, R6693, R6694, R67, R68, R73, R74, R75, R76, R77, R83, R84, R85, R86, R87, R88, R89, R90, R91, R92, R93, R94, R95, R96;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [70, 70];
  s0 -> s0 [71, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [70, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R15 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 69];
  s0 -> s0 [0, 65535] { R16 += 1 };
  s0 -> s2 [70, 70];
  s0 -> s1 [71, 65535];
  s1 -> s1 [0, 69];
  s1 -> s2 [70, 70];
  s1 -> s1 [71, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R24 += 1 };
  s0 -> s0 [0, 65535] { R23 += 1, R24 += 1 };
  s0 -> s2 [9, 13] { R24 += 1 };
  s0 -> s1 [14, 31] { R24 += 1 };
  s0 -> s2 [32, 32] { R24 += 1 };
  s0 -> s1 [33, 65535] { R24 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R24 += 1 };
  s2 -> s1 [0, 65535] { R24 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R25 += 1, R26 += 1 };
  s1 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R28 += 1 };
  s0 -> s0 [0, 65535] { R27 += 1, R28 += 1 };
  s0 -> s2 [9, 13] { R28 += 1 };
  s0 -> s1 [14, 31] { R28 += 1 };
  s0 -> s2 [32, 32] { R28 += 1 };
  s0 -> s1 [33, 65535] { R28 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R28 += 1 };
  s2 -> s1 [0, 65535] { R28 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R29 += 1, R30 += 1 };
  s1 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R6615 += 1, R6616 += 1 };
  s0 -> s1 [0, 65535] { R6616 += 1, R22 += 1 };
  s1 -> s1 [0, 65535] { R6616 += 1, R22 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 69] { R6618 += 1 };
  s0 -> s0 [0, 65535] { R6617 += 1, R6618 += 1 };
  s0 -> s2 [70, 70] { R6618 += 1 };
  s0 -> s3 [70, 70] { R6618 += 1 };
  s0 -> s1 [76, 65535] { R6618 += 1 };
  s1 -> s1 [0, 69] { R6618 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R6618 += 1 };
  s1 -> s3 [70, 70] { R6618 += 1 };
  s1 -> s1 [76, 65535] { R6618 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 70] { R6618 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [76, 65535] { R6618 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 69] { R6620 += 1, R45 += 1 };
  s0 -> s0 [0, 65535] { R6619 += 1, R6620 += 1 };
  s0 -> s2 [70, 70] { R6620 += 1, R45 += 1 };
  s0 -> s3 [70, 70] { R6620 += 1, R45 += 1 };
  s0 -> s1 [71, 65535] { R6620 += 1, R45 += 1 };
  s1 -> s1 [0, 69] { R6620 += 1, R45 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R6620 += 1, R45 += 1 };
  s1 -> s3 [70, 70] { R6620 += 1, R45 += 1 };
  s1 -> s1 [71, 65535] { R6620 += 1, R45 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R6620 += 1, R45 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 69] { R6622 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R6621 += 1, R6622 += 1 };
  s0 -> s2 [70, 70] { R6622 += 1, R47 += 1 };
  s0 -> s3 [70, 70] { R6622 += 1, R47 += 1 };
  s0 -> s1 [71, 65535] { R6622 += 1, R47 += 1 };
  s1 -> s1 [0, 69] { R6622 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R6622 += 1, R47 += 1 };
  s1 -> s3 [70, 70] { R6622 += 1, R47 += 1 };
  s1 -> s1 [71, 65535] { R6622 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R6622 += 1, R47 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 69] { R6624 += 1, R49 += 1, R50 += 1 };
  s0 -> s0 [0, 65535] { R6623 += 1, R6624 += 1 };
  s0 -> s2 [70, 70] { R6624 += 1, R49 += 1, R50 += 1 };
  s0 -> s3 [70, 70] { R6624 += 1, R49 += 1, R50 += 1 };
  s0 -> s1 [71, 65535] { R6624 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 69] { R6624 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R6624 += 1, R49 += 1, R50 += 1 };
  s1 -> s3 [70, 70] { R6624 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [71, 65535] { R6624 += 1, R49 += 1, R50 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R6624 += 1, R49 += 1, R50 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 69] { R6626 += 1, R53 += 1, R54 += 1 };
  s0 -> s0 [0, 65535] { R6625 += 1, R6626 += 1 };
  s0 -> s2 [70, 70] { R6626 += 1, R53 += 1, R54 += 1 };
  s0 -> s3 [70, 70] { R6626 += 1, R53 += 1, R54 += 1 };
  s0 -> s1 [71, 65535] { R6626 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 69] { R6626 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R6626 += 1, R53 += 1, R54 += 1 };
  s1 -> s3 [70, 70] { R6626 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [71, 65535] { R6626 += 1, R53 += 1, R54 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R6626 += 1, R53 += 1, R54 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 69] { R6628 += 1, R59 += 1, R60 += 1 };
  s0 -> s0 [0, 65535] { R6627 += 1, R6628 += 1 };
  s0 -> s2 [70, 70] { R6628 += 1, R59 += 1, R60 += 1 };
  s0 -> s3 [70, 70] { R6628 += 1, R59 += 1, R60 += 1 };
  s0 -> s1 [71, 65535] { R6628 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 69] { R6628 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R6628 += 1, R59 += 1, R60 += 1 };
  s1 -> s3 [70, 70] { R6628 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [71, 65535] { R6628 += 1, R59 += 1, R60 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R6628 += 1, R59 += 1, R60 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 69] { R6630 += 1, R65 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R6629 += 1, R6630 += 1 };
  s0 -> s2 [70, 70] { R6630 += 1, R65 += 1, R66 += 1 };
  s0 -> s3 [70, 70] { R6630 += 1, R65 += 1, R66 += 1 };
  s0 -> s1 [71, 65535] { R6630 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 69] { R6630 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R6630 += 1, R65 += 1, R66 += 1 };
  s1 -> s3 [70, 70] { R6630 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [71, 65535] { R6630 += 1, R65 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R6630 += 1, R65 += 1, R66 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 69] { R6632 += 1, R73 += 1, R74 += 1 };
  s0 -> s0 [0, 65535] { R6631 += 1, R6632 += 1 };
  s0 -> s2 [70, 70] { R6632 += 1, R73 += 1, R74 += 1 };
  s0 -> s3 [70, 70] { R6632 += 1, R73 += 1, R74 += 1 };
  s0 -> s1 [71, 65535] { R6632 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 69] { R6632 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R6632 += 1, R73 += 1, R74 += 1 };
  s1 -> s3 [70, 70] { R6632 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [71, 65535] { R6632 += 1, R73 += 1, R74 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R6632 += 1, R73 += 1, R74 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 69] { R6652 += 1 };
  s0 -> s0 [0, 65535] { R6651 += 1, R6652 += 1 };
  s0 -> s2 [70, 70] { R6652 += 1 };
  s0 -> s1 [71, 65535] { R6652 += 1 };
  s1 -> s1 [0, 69] { R6652 += 1 };
  s1 -> s2 [70, 70] { R6652 += 1 };
  s1 -> s1 [71, 65535] { R6652 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R6652 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R6653 += 1, R6654 += 1 };
  s0 -> s1 [0, 65535] { R6654 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R6654 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 69] { R6656 += 1 };
  s0 -> s0 [0, 65535] { R6655 += 1, R6656 += 1 };
  s0 -> s2 [0, 65535] { R6656 += 1, R12 += 1 };
  s0 -> s3 [70, 70] { R6656 += 1 };
  s0 -> s1 [71, 65535] { R6656 += 1 };
  s1 -> s1 [0, 69] { R6656 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [70, 70] { R6656 += 1 };
  s1 -> s1 [71, 65535] { R6656 += 1 };
  s2 -> s1 [0, 69] { R6656 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R6656 += 1, R12 += 1 };
  s2 -> s3 [70, 70] { R6656 += 1 };
  s2 -> s1 [71, 65535] { R6656 += 1 };
  s3 -> s3 [0, 65535] { R6656 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 69] { R6658 += 1, R6596 += 1 };
  s0 -> s2 [0, 65535] { R6658 += 1, R6595 += 1, R6596 += 1 };
  s0 -> s0 [0, 65535] { R6657 += 1, R6658 += 1 };
  s0 -> s1 [71, 65535] { R6658 += 1, R6596 += 1 };
  s1 -> s1 [0, 69] { R6658 += 1, R6596 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R6658 += 1 };
  s1 -> s1 [71, 65535] { R6658 += 1, R6596 += 1 };
  s2 -> s1 [0, 69] { R6658 += 1, R6596 += 1 };
  s2 -> s2 [0, 65535] { R6658 += 1, R6595 += 1, R6596 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [71, 65535] { R6658 += 1, R6596 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R6660 += 1, R6598 += 1, R20 += 1 };
  s0 -> s2 [0, 65535] { R6660 += 1, R6597 += 1, R6598 += 1 };
  s0 -> s0 [0, 65535] { R6659 += 1, R6660 += 1 };
  s1 -> s1 [0, 65535] { R6660 += 1, R6598 += 1, R20 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R6660 += 1 };
  s2 -> s1 [0, 65535] { R6660 += 1, R6598 += 1, R20 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R6660 += 1, R6597 += 1, R6598 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R6660 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 70] { R6662 += 1, R6600 += 1 };
  s0 -> s2 [0, 65535] { R6662 += 1, R6599 += 1, R6600 += 1 };
  s0 -> s0 [0, 65535] { R6661 += 1, R6662 += 1 };
  s0 -> s1 [75, 65535] { R6662 += 1, R6600 += 1 };
  s1 -> s1 [0, 70] { R6662 += 1, R6600 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R6662 += 1 };
  s1 -> s1 [75, 65535] { R6662 += 1, R6600 += 1 };
  s2 -> s1 [0, 70] { R6662 += 1, R6600 += 1 };
  s2 -> s2 [0, 65535] { R6662 += 1, R6599 += 1, R6600 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [75, 65535] { R6662 += 1, R6600 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R6664 += 1, R6601 += 1, R6602 += 1 };
  s0 -> s0 [0, 65535] { R6663 += 1, R6664 += 1 };
  s0 -> s2 [0, 65535] { R6664 += 1, R6602 += 1, R84 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R6664 += 1, R6601 += 1, R6602 += 1 };
  s1 -> s2 [0, 65535] { R6664 += 1, R6602 += 1, R84 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R6664 += 1 };
  s2 -> s2 [0, 65535] { R6664 += 1, R6602 += 1, R84 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R6664 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 74] { R6666 += 1, R6604 += 1 };
  s0 -> s2 [0, 65535] { R6666 += 1, R6603 += 1, R6604 += 1 };
  s0 -> s0 [0, 65535] { R6665 += 1, R6666 += 1 };
  s0 -> s3 [0, 65535] { R6666 += 1, R6604 += 1, R86 += 1 };
  s0 -> s1 [76, 65535] { R6666 += 1, R6604 += 1 };
  s1 -> s1 [0, 74] { R6666 += 1, R6604 += 1 };
  s1 -> s1 [0, 65535] { R6666 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [76, 65535] { R6666 += 1, R6604 += 1 };
  s2 -> s1 [0, 74] { R6666 += 1, R6604 += 1 };
  s2 -> s2 [0, 65535] { R6666 += 1, R6603 += 1, R6604 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R6666 += 1, R6604 += 1, R86 += 1 };
  s2 -> s1 [76, 65535] { R6666 += 1, R6604 += 1 };
  s3 -> s1 [0, 74] { R6666 += 1, R6604 += 1 };
  s3 -> s4 [0, 65535] { R6666 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R6666 += 1, R6604 += 1, R86 += 1 };
  s3 -> s1 [76, 65535] { R6666 += 1, R6604 += 1 };
  s4 -> s4 [0, 65535] { R6666 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 65535] { R6668 += 1, R6605 += 1, R6606 += 1 };
  s0 -> s2 [0, 65535] { R6668 += 1, R6606 += 1 };
  s0 -> s3 [0, 65535] { R6668 += 1, R6606 += 1, R90 += 1 };
  s0 -> s0 [0, 65535] { R6667 += 1, R6668 += 1 };
  s1 -> s1 [0, 65535] { R6668 += 1, R6605 += 1, R6606 += 1 };
  s1 -> s2 [0, 65535] { R6668 += 1, R6606 += 1 };
  s1 -> s3 [0, 65535] { R6668 += 1, R6606 += 1, R90 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R6668 += 1, R6606 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R6668 += 1 };
  s3 -> s2 [0, 65535] { R6668 += 1, R6606 += 1 };
  s3 -> s3 [0, 65535] { R6668 += 1, R6606 += 1, R90 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R6668 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R6668 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R6670 += 1, R6608 += 1, R94 += 1, R95 += 1 };
  s0 -> s2 [0, 65535] { R6670 += 1, R6608 += 1, R95 += 1, R96 += 1 };
  s0 -> s3 [0, 65535] { R6670 += 1, R6607 += 1, R6608 += 1 };
  s0 -> s0 [0, 65535] { R6669 += 1, R6670 += 1 };
  s1 -> s1 [0, 65535] { R6670 += 1, R6608 += 1, R94 += 1, R95 += 1 };
  s1 -> s2 [0, 65535] { R6670 += 1, R6608 += 1, R95 += 1, R96 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R6670 += 1 };
  s2 -> s2 [0, 65535] { R6670 += 1, R6608 += 1, R95 += 1, R96 += 1 };
  s2 -> s5 [0, 65535] { R6670 += 1, R6608 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s6 [0, 65535] { R6670 += 1 };
  s3 -> s1 [0, 65535] { R6670 += 1, R6608 += 1, R94 += 1, R95 += 1 };
  s3 -> s2 [0, 65535] { R6670 += 1, R6608 += 1, R95 += 1, R96 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R6670 += 1, R6607 += 1, R6608 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R6670 += 1, R6608 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s6 [0, 65535] { R6670 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R6670 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 74] { R6672 += 1, R6610 += 1, R3455 += 1 };
  s0 -> s1 [0, 65535] { R6672 += 1, R6610 += 1 };
  s0 -> s0 [0, 65535] { R6671 += 1, R6672 += 1 };
  s0 -> s2 [0, 65535] { R6672 += 1, R6609 += 1, R6610 += 1 };
  s0 -> s1 [76, 65535] { R6672 += 1, R6610 += 1, R3455 += 1 };
  s1 -> s1 [0, 74] { R6672 += 1, R6610 += 1, R3455 += 1 };
  s1 -> s1 [0, 65535] { R6672 += 1, R6610 += 1 };
  s1 -> s4 [0, 65535] { R6672 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [76, 65535] { R6672 += 1, R6610 += 1, R3455 += 1 };
  s2 -> s1 [0, 74] { R6672 += 1, R6610 += 1, R3455 += 1 };
  s2 -> s1 [0, 65535] { R6672 += 1, R6610 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R6672 += 1, R6609 += 1, R6610 += 1 };
  s2 -> s1 [76, 65535] { R6672 += 1, R6610 += 1, R3455 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R6672 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 74] { R6674 += 1, R6612 += 1, R6252 += 1, R6254 += 1 };
  s0 -> s2 [0, 65535] { R6674 += 1, R6612 += 1, R6252 += 1, R6253 += 1, R6254 += 1 };
  s0 -> s3 [0, 65535] { R6674 += 1, R6611 += 1, R6612 += 1 };
  s0 -> s0 [0, 65535] { R6673 += 1, R6674 += 1 };
  s0 -> s4 [75, 75] { R6674 += 1, R6612 += 1, R6252 += 1, R6254 += 1 };
  s0 -> s1 [76, 65535] { R6674 += 1, R6612 += 1, R6252 += 1, R6254 += 1 };
  s1 -> s1 [0, 74] { R6674 += 1, R6612 += 1, R6252 += 1, R6254 += 1 };
  s1 -> s4 [75, 75] { R6674 += 1, R6612 += 1, R6252 += 1, R6254 += 1 };
  s1 -> s1 [76, 65535] { R6674 += 1, R6612 += 1, R6252 += 1, R6254 += 1 };
  s2 -> s1 [0, 74] { R6674 += 1, R6612 += 1, R6252 += 1, R6254 += 1 };
  s2 -> s2 [0, 65535] { R6674 += 1, R6612 += 1, R6252 += 1, R6253 += 1, R6254 += 1 };
  s2 -> s4 [75, 75] { R6674 += 1, R6612 += 1, R6252 += 1, R6254 += 1 };
  s2 -> s1 [76, 65535] { R6674 += 1, R6612 += 1, R6252 += 1, R6254 += 1 };
  s3 -> s1 [0, 74] { R6674 += 1, R6612 += 1, R6252 += 1, R6254 += 1 };
  s3 -> s2 [0, 65535] { R6674 += 1, R6612 += 1, R6252 += 1, R6253 += 1, R6254 += 1 };
  s3 -> s3 [0, 65535] { R6674 += 1, R6611 += 1, R6612 += 1 };
  s3 -> s4 [75, 75] { R6674 += 1, R6612 += 1, R6252 += 1, R6254 += 1 };
  s3 -> s1 [76, 65535] { R6674 += 1, R6612 += 1, R6252 += 1, R6254 += 1 };
  s4 -> s4 [0, 65535] { R6674 += 1, R6612 += 1, R6252 += 1, R6254 += 1 };
  s4 -> s5 [0, 65535] { R6674 += 1 };
  s4 -> s6 [0, 65535] { R6674 += 1, R6612 += 1, R6252 += 1 };
  s4 -> s7 [0, 65535] { R6674 += 1, R6612 += 1 };
  s4 -> s8 [0, 65535];
  s5 -> s5 [0, 65535] { R6674 += 1 };
  s5 -> s8 [0, 65535];
  s6 -> s5 [0, 65535] { R6674 += 1 };
  s6 -> s6 [0, 65535] { R6674 += 1, R6612 += 1, R6252 += 1 };
  s6 -> s7 [0, 65535] { R6674 += 1, R6612 += 1 };
  s6 -> s8 [0, 65535];
  s7 -> s5 [0, 65535] { R6674 += 1 };
  s7 -> s7 [0, 65535] { R6674 += 1, R6612 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  accepting s4, s8, s5, s6, s7;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 65535] { R6676 += 1, R6614 += 1, R6591 += 1 };
  s0 -> s0 [0, 65535] { R6675 += 1, R6676 += 1 };
  s0 -> s2 [0, 65535] { R6676 += 1, R6613 += 1, R6614 += 1 };
  s0 -> s3 [0, 65535] { R6676 += 1, R6614 += 1, R6591 += 1, R6593 += 1, R6594 += 1 };
  s0 -> s4 [0, 65535] { R6676 += 1, R6614 += 1 };
  s1 -> s1 [0, 65535] { R6676 += 1, R6614 += 1, R6591 += 1 };
  s1 -> s5 [0, 65535] { R6676 += 1 };
  s1 -> s4 [0, 65535] { R6676 += 1, R6614 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s1 [0, 65535] { R6676 += 1, R6614 += 1, R6591 += 1 };
  s2 -> s2 [0, 65535] { R6676 += 1, R6613 += 1, R6614 += 1 };
  s2 -> s3 [0, 65535] { R6676 += 1, R6614 += 1, R6591 += 1, R6593 += 1, R6594 += 1 };
  s2 -> s4 [0, 65535] { R6676 += 1, R6614 += 1 };
  s2 -> s6 [0, 65535];
  s3 -> s1 [0, 65535] { R6676 += 1, R6614 += 1, R6591 += 1 };
  s3 -> s3 [0, 65535] { R6676 += 1, R6614 += 1, R6591 += 1, R6593 += 1, R6594 += 1 };
  s3 -> s5 [0, 65535] { R6676 += 1 };
  s3 -> s4 [0, 65535] { R6676 += 1, R6614 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R6676 += 1 };
  s4 -> s4 [0, 65535] { R6676 += 1, R6614 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R6676 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R6678 += 1, R6634 += 1, R21 += 1 };
  s0 -> s2 [0, 65535] { R6678 += 1, R6633 += 1, R6634 += 1 };
  s0 -> s0 [0, 65535] { R6677 += 1, R6678 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R6678 += 1, R6634 += 1, R21 += 1 };
  s1 -> s4 [0, 65535] { R6678 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R6678 += 1, R6634 += 1, R21 += 1 };
  s2 -> s2 [0, 65535] { R6678 += 1, R6633 += 1, R6634 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R6678 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 69] { R6680 += 1, R6636 += 1 };
  s0 -> s2 [0, 65535] { R6680 += 1, R6635 += 1, R6636 += 1 };
  s0 -> s0 [0, 65535] { R6679 += 1, R6680 += 1 };
  s0 -> s3 [70, 70] { R6680 += 1, R6636 += 1 };
  s0 -> s4 [70, 70] { R6680 += 1, R6636 += 1 };
  s0 -> s5 [75, 75] { R6680 += 1, R6636 += 1 };
  s0 -> s1 [76, 65535] { R6680 += 1, R6636 += 1 };
  s1 -> s1 [0, 69] { R6680 += 1, R6636 += 1 };
  s1 -> s3 [70, 70] { R6680 += 1, R6636 += 1 };
  s1 -> s4 [70, 70] { R6680 += 1, R6636 += 1 };
  s1 -> s5 [75, 75] { R6680 += 1, R6636 += 1 };
  s1 -> s1 [76, 65535] { R6680 += 1, R6636 += 1 };
  s2 -> s1 [0, 69] { R6680 += 1, R6636 += 1 };
  s2 -> s2 [0, 65535] { R6680 += 1, R6635 += 1, R6636 += 1 };
  s2 -> s3 [70, 70] { R6680 += 1, R6636 += 1 };
  s2 -> s4 [70, 70] { R6680 += 1, R6636 += 1 };
  s2 -> s5 [75, 75] { R6680 += 1, R6636 += 1 };
  s2 -> s1 [76, 65535] { R6680 += 1, R6636 += 1 };
  s4 -> s4 [0, 70] { R6680 += 1, R6636 += 1 };
  s4 -> s8 [75, 75] { R6680 += 1, R6636 += 1 };
  s4 -> s4 [76, 65535] { R6680 += 1, R6636 += 1 };
  s5 -> s5 [0, 69] { R6680 += 1, R6636 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R6680 += 1 };
  s5 -> s7 [70, 70] { R6680 += 1, R6636 += 1 };
  s5 -> s8 [70, 70] { R6680 += 1, R6636 += 1 };
  s5 -> s5 [75, 65535] { R6680 += 1, R6636 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R6680 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 70] { R6680 += 1, R6636 += 1 };
  s8 -> s8 [0, 65535] { R6680 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [75, 65535] { R6680 += 1, R6636 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 69] { R6682 += 1, R6638 += 1, R83 += 1 };
  s0 -> s0 [0, 65535] { R6681 += 1, R6682 += 1 };
  s0 -> s2 [0, 65535] { R6682 += 1, R6637 += 1, R6638 += 1 };
  s0 -> s3 [70, 70] { R6682 += 1, R6638 += 1, R83 += 1 };
  s0 -> s4 [70, 70] { R6682 += 1, R6638 += 1, R83 += 1 };
  s0 -> s1 [71, 65535] { R6682 += 1, R6638 += 1, R83 += 1 };
  s1 -> s1 [0, 69] { R6682 += 1, R6638 += 1, R83 += 1 };
  s1 -> s1 [0, 65535] { R6682 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [70, 70] { R6682 += 1, R6638 += 1, R83 += 1 };
  s1 -> s4 [70, 70] { R6682 += 1, R6638 += 1, R83 += 1 };
  s1 -> s1 [71, 65535] { R6682 += 1, R6638 += 1, R83 += 1 };
  s2 -> s1 [0, 69] { R6682 += 1, R6638 += 1, R83 += 1 };
  s2 -> s2 [0, 65535] { R6682 += 1, R6637 += 1, R6638 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [70, 70] { R6682 += 1, R6638 += 1, R83 += 1 };
  s2 -> s4 [70, 70] { R6682 += 1, R6638 += 1, R83 += 1 };
  s2 -> s1 [71, 65535] { R6682 += 1, R6638 += 1, R83 += 1 };
  s3 -> s3 [0, 65535] { R6682 += 1, R6638 += 1, R83 += 1 };
  s3 -> s6 [0, 65535] { R6682 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R6682 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6682 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 69] { R6684 += 1, R6640 += 1, R85 += 1 };
  s0 -> s0 [0, 65535] { R6683 += 1, R6684 += 1 };
  s0 -> s2 [0, 65535] { R6684 += 1, R6639 += 1, R6640 += 1 };
  s0 -> s3 [70, 70] { R6684 += 1, R6640 += 1, R85 += 1 };
  s0 -> s4 [70, 70] { R6684 += 1, R6640 += 1, R85 += 1 };
  s0 -> s1 [71, 65535] { R6684 += 1, R6640 += 1, R85 += 1 };
  s1 -> s1 [0, 69] { R6684 += 1, R6640 += 1, R85 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R6684 += 1 };
  s1 -> s3 [70, 70] { R6684 += 1, R6640 += 1, R85 += 1 };
  s1 -> s4 [70, 70] { R6684 += 1, R6640 += 1, R85 += 1 };
  s1 -> s1 [71, 65535] { R6684 += 1, R6640 += 1, R85 += 1 };
  s2 -> s1 [0, 69] { R6684 += 1, R6640 += 1, R85 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R6684 += 1, R6639 += 1, R6640 += 1 };
  s2 -> s3 [70, 70] { R6684 += 1, R6640 += 1, R85 += 1 };
  s2 -> s4 [70, 70] { R6684 += 1, R6640 += 1, R85 += 1 };
  s2 -> s1 [71, 65535] { R6684 += 1, R6640 += 1, R85 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R6684 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R6684 += 1 };
  s4 -> s4 [0, 65535] { R6684 += 1, R6640 += 1, R85 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6684 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 69] { R6686 += 1, R6642 += 1, R88 += 1 };
  s0 -> s2 [0, 69] { R6686 += 1, R6642 += 1, R87 += 1, R88 += 1 };
  s0 -> s0 [0, 65535] { R6685 += 1, R6686 += 1 };
  s0 -> s3 [0, 65535] { R6686 += 1, R6641 += 1, R6642 += 1 };
  s0 -> s4 [70, 70] { R6686 += 1, R6642 += 1, R88 += 1 };
  s0 -> s5 [70, 70] { R6686 += 1, R6642 += 1, R87 += 1, R88 += 1 };
  s0 -> s6 [70, 70] { R6686 += 1, R6642 += 1, R88 += 1 };
  s0 -> s7 [70, 70] { R6686 += 1, R6642 += 1, R87 += 1, R88 += 1 };
  s0 -> s1 [71, 74] { R6686 += 1, R6642 += 1, R88 += 1 };
  s0 -> s2 [71, 65535] { R6686 += 1, R6642 += 1, R87 += 1, R88 += 1 };
  s0 -> s8 [75, 75] { R6686 += 1, R6642 += 1, R88 += 1 };
  s0 -> s1 [76, 65535] { R6686 += 1, R6642 += 1, R88 += 1 };
  s1 -> s1 [0, 69] { R6686 += 1, R6642 += 1, R88 += 1 };
  s1 -> s4 [70, 70] { R6686 += 1, R6642 += 1, R88 += 1 };
  s1 -> s6 [70, 70] { R6686 += 1, R6642 += 1, R88 += 1 };
  s1 -> s1 [71, 74] { R6686 += 1, R6642 += 1, R88 += 1 };
  s1 -> s8 [75, 75] { R6686 += 1, R6642 += 1, R88 += 1 };
  s1 -> s1 [76, 65535] { R6686 += 1, R6642 += 1, R88 += 1 };
  s2 -> s1 [0, 69] { R6686 += 1, R6642 += 1, R88 += 1 };
  s2 -> s2 [0, 69] { R6686 += 1, R6642 += 1, R87 += 1, R88 += 1 };
  s2 -> s4 [70, 70] { R6686 += 1, R6642 += 1, R88 += 1 };
  s2 -> s5 [70, 70] { R6686 += 1, R6642 += 1, R87 += 1, R88 += 1 };
  s2 -> s6 [70, 70] { R6686 += 1, R6642 += 1, R88 += 1 };
  s2 -> s7 [70, 70] { R6686 += 1, R6642 += 1, R87 += 1, R88 += 1 };
  s2 -> s1 [71, 74] { R6686 += 1, R6642 += 1, R88 += 1 };
  s2 -> s2 [71, 65535] { R6686 += 1, R6642 += 1, R87 += 1, R88 += 1 };
  s2 -> s8 [75, 75] { R6686 += 1, R6642 += 1, R88 += 1 };
  s2 -> s1 [76, 65535] { R6686 += 1, R6642 += 1, R88 += 1 };
  s3 -> s1 [0, 69] { R6686 += 1, R6642 += 1, R88 += 1 };
  s3 -> s2 [0, 69] { R6686 += 1, R6642 += 1, R87 += 1, R88 += 1 };
  s3 -> s3 [0, 65535] { R6686 += 1, R6641 += 1, R6642 += 1 };
  s3 -> s4 [70, 70] { R6686 += 1, R6642 += 1, R88 += 1 };
  s3 -> s5 [70, 70] { R6686 += 1, R6642 += 1, R87 += 1, R88 += 1 };
  s3 -> s6 [70, 70] { R6686 += 1, R6642 += 1, R88 += 1 };
  s3 -> s7 [70, 70] { R6686 += 1, R6642 += 1, R87 += 1, R88 += 1 };
  s3 -> s1 [71, 74] { R6686 += 1, R6642 += 1, R88 += 1 };
  s3 -> s2 [71, 65535] { R6686 += 1, R6642 += 1, R87 += 1, R88 += 1 };
  s3 -> s8 [75, 75] { R6686 += 1, R6642 += 1, R88 += 1 };
  s3 -> s1 [76, 65535] { R6686 += 1, R6642 += 1, R88 += 1 };
  s5 -> s6 [0, 74] { R6686 += 1, R6642 += 1, R88 += 1 };
  s5 -> s5 [0, 65535] { R6686 += 1, R6642 += 1, R87 += 1, R88 += 1 };
  s5 -> s10 [75, 75] { R6686 += 1, R6642 += 1, R88 += 1 };
  s5 -> s6 [76, 65535] { R6686 += 1, R6642 += 1, R88 += 1 };
  s6 -> s6 [0, 74] { R6686 += 1, R6642 += 1, R88 += 1 };
  s6 -> s10 [75, 75] { R6686 += 1, R6642 += 1, R88 += 1 };
  s6 -> s6 [76, 65535] { R6686 += 1, R6642 += 1, R88 += 1 };
  s8 -> s8 [0, 69] { R6686 += 1, R6642 += 1, R88 += 1 };
  s8 -> s8 [0, 65535] { R6686 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [70, 70] { R6686 += 1, R6642 += 1, R88 += 1 };
  s8 -> s11 [70, 70] { R6686 += 1, R6642 += 1, R88 += 1 };
  s8 -> s8 [71, 65535] { R6686 += 1, R6642 += 1, R88 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R6686 += 1, R6642 += 1, R88 += 1 };
  s10 -> s12 [0, 65535] { R6686 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R6686 += 1 };
  s11 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R6686 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 69] { R6688 += 1, R6644 += 1, R91 += 1, R92 += 1 };
  s0 -> s0 [0, 65535] { R6687 += 1, R6688 += 1 };
  s0 -> s2 [0, 65535] { R6688 += 1, R6643 += 1, R6644 += 1 };
  s0 -> s3 [70, 70] { R6688 += 1, R6644 += 1, R91 += 1, R92 += 1 };
  s0 -> s4 [70, 70] { R6688 += 1, R6644 += 1, R91 += 1, R92 += 1 };
  s0 -> s1 [71, 65535] { R6688 += 1, R6644 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 69] { R6688 += 1, R6644 += 1, R91 += 1, R92 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R6688 += 1 };
  s1 -> s3 [70, 70] { R6688 += 1, R6644 += 1, R91 += 1, R92 += 1 };
  s1 -> s4 [70, 70] { R6688 += 1, R6644 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [71, 65535] { R6688 += 1, R6644 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [0, 69] { R6688 += 1, R6644 += 1, R91 += 1, R92 += 1 };
  s2 -> s2 [0, 65535] { R6688 += 1, R6643 += 1, R6644 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [70, 70] { R6688 += 1, R6644 += 1, R91 += 1, R92 += 1 };
  s2 -> s4 [70, 70] { R6688 += 1, R6644 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [71, 65535] { R6688 += 1, R6644 += 1, R91 += 1, R92 += 1 };
  s3 -> s3 [0, 65535] { R6688 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R6688 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R6688 += 1, R6644 += 1, R91 += 1, R92 += 1 };
  s5 -> s5 [0, 65535] { R6688 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 69] { R6690 += 1, R6646 += 1, R3452 += 1, R3453 += 1 };
  s0 -> s2 [0, 69] { R6690 += 1, R6646 += 1, R3451 += 1, R3452 += 1 };
  s0 -> s3 [0, 69] { R6690 += 1, R6646 += 1, R3452 += 1 };
  s0 -> s0 [0, 65535] { R6689 += 1, R6690 += 1 };
  s0 -> s4 [0, 65535] { R6690 += 1, R6645 += 1, R6646 += 1 };
  s0 -> s5 [70, 70] { R6690 += 1, R6646 += 1, R3452 += 1, R3453 += 1 };
  s0 -> s6 [70, 70] { R6690 += 1, R6646 += 1, R3452 += 1 };
  s0 -> s7 [70, 70] { R6690 += 1, R6646 += 1, R3452 += 1 };
  s0 -> s8 [70, 70] { R6690 += 1, R6646 += 1, R3451 += 1, R3452 += 1 };
  s0 -> s9 [70, 70] { R6690 += 1, R6646 += 1, R3451 += 1, R3452 += 1 };
  s0 -> s10 [70, 70] { R6690 += 1, R6646 += 1, R3452 += 1, R3453 += 1 };
  s0 -> s3 [71, 74] { R6690 += 1, R6646 += 1, R3452 += 1 };
  s0 -> s1 [71, 65535] { R6690 += 1, R6646 += 1, R3452 += 1, R3453 += 1 };
  s0 -> s2 [71, 65535] { R6690 += 1, R6646 += 1, R3451 += 1, R3452 += 1 };
  s0 -> s3 [76, 65535] { R6690 += 1, R6646 += 1, R3452 += 1 };
  s1 -> s1 [0, 69] { R6690 += 1, R6646 += 1, R3452 += 1, R3453 += 1 };
  s1 -> s3 [0, 69] { R6690 += 1, R6646 += 1, R3452 += 1 };
  s1 -> s5 [70, 70] { R6690 += 1, R6646 += 1, R3452 += 1, R3453 += 1 };
  s1 -> s6 [70, 70] { R6690 += 1, R6646 += 1, R3452 += 1 };
  s1 -> s7 [70, 70] { R6690 += 1, R6646 += 1, R3452 += 1 };
  s1 -> s10 [70, 70] { R6690 += 1, R6646 += 1, R3452 += 1, R3453 += 1 };
  s1 -> s3 [71, 74] { R6690 += 1, R6646 += 1, R3452 += 1 };
  s1 -> s1 [71, 65535] { R6690 += 1, R6646 += 1, R3452 += 1, R3453 += 1 };
  s1 -> s3 [76, 65535] { R6690 += 1, R6646 += 1, R3452 += 1 };
  s2 -> s1 [0, 69] { R6690 += 1, R6646 += 1, R3452 += 1, R3453 += 1 };
  s2 -> s2 [0, 69] { R6690 += 1, R6646 += 1, R3451 += 1, R3452 += 1 };
  s2 -> s3 [0, 69] { R6690 += 1, R6646 += 1, R3452 += 1 };
  s2 -> s5 [70, 70] { R6690 += 1, R6646 += 1, R3452 += 1, R3453 += 1 };
  s2 -> s6 [70, 70] { R6690 += 1, R6646 += 1, R3452 += 1 };
  s2 -> s7 [70, 70] { R6690 += 1, R6646 += 1, R3452 += 1 };
  s2 -> s8 [70, 70] { R6690 += 1, R6646 += 1, R3451 += 1, R3452 += 1 };
  s2 -> s9 [70, 70] { R6690 += 1, R6646 += 1, R3451 += 1, R3452 += 1 };
  s2 -> s10 [70, 70] { R6690 += 1, R6646 += 1, R3452 += 1, R3453 += 1 };
  s2 -> s3 [71, 74] { R6690 += 1, R6646 += 1, R3452 += 1 };
  s2 -> s1 [71, 65535] { R6690 += 1, R6646 += 1, R3452 += 1, R3453 += 1 };
  s2 -> s2 [71, 65535] { R6690 += 1, R6646 += 1, R3451 += 1, R3452 += 1 };
  s2 -> s3 [76, 65535] { R6690 += 1, R6646 += 1, R3452 += 1 };
  s3 -> s3 [0, 69] { R6690 += 1, R6646 += 1, R3452 += 1 };
  s3 -> s12 [0, 65535];
  s3 -> s3 [0, 65535] { R6690 += 1 };
  s3 -> s6 [70, 70] { R6690 += 1, R6646 += 1 };
  s3 -> s7 [70, 70] { R6690 += 1, R6646 += 1 };
  s3 -> s3 [71, 74] { R6690 += 1, R6646 += 1, R3452 += 1 };
  s3 -> s3 [71, 65535] { R6690 += 1, R6646 += 1 };
  s3 -> s3 [76, 65535] { R6690 += 1, R6646 += 1, R3452 += 1 };
  s4 -> s1 [0, 69] { R6690 += 1, R6646 += 1, R3452 += 1, R3453 += 1 };
  s4 -> s2 [0, 69] { R6690 += 1, R6646 += 1, R3451 += 1, R3452 += 1 };
  s4 -> s3 [0, 69] { R6690 += 1, R6646 += 1, R3452 += 1 };
  s4 -> s4 [0, 65535] { R6690 += 1, R6645 += 1, R6646 += 1 };
  s4 -> s5 [70, 70] { R6690 += 1, R6646 += 1, R3452 += 1, R3453 += 1 };
  s4 -> s6 [70, 70] { R6690 += 1, R6646 += 1, R3452 += 1 };
  s4 -> s7 [70, 70] { R6690 += 1, R6646 += 1, R3452 += 1 };
  s4 -> s8 [70, 70] { R6690 += 1, R6646 += 1, R3451 += 1, R3452 += 1 };
  s4 -> s9 [70, 70] { R6690 += 1, R6646 += 1, R3451 += 1, R3452 += 1 };
  s4 -> s10 [70, 70] { R6690 += 1, R6646 += 1, R3452 += 1, R3453 += 1 };
  s4 -> s3 [71, 74] { R6690 += 1, R6646 += 1, R3452 += 1 };
  s4 -> s1 [71, 65535] { R6690 += 1, R6646 += 1, R3452 += 1, R3453 += 1 };
  s4 -> s2 [71, 65535] { R6690 += 1, R6646 += 1, R3451 += 1, R3452 += 1 };
  s4 -> s3 [76, 65535] { R6690 += 1, R6646 += 1, R3452 += 1 };
  s6 -> s6 [0, 65535] { R6690 += 1 };
  s6 -> s12 [0, 65535];
  s7 -> s7 [0, 74] { R6690 += 1, R6646 += 1, R3452 += 1 };
  s7 -> s7 [0, 65535] { R6690 += 1, R6646 += 1 };
  s7 -> s11 [0, 65535] { R6690 += 1 };
  s7 -> s12 [0, 65535];
  s7 -> s7 [76, 65535] { R6690 += 1, R6646 += 1, R3452 += 1 };
  s8 -> s7 [0, 74] { R6690 += 1, R6646 += 1, R3452 += 1 };
  s8 -> s8 [0, 65535] { R6690 += 1, R6646 += 1, R3451 += 1, R3452 += 1 };
  s8 -> s10 [0, 65535] { R6690 += 1, R6646 += 1, R3452 += 1, R3453 += 1 };
  s8 -> s7 [76, 65535] { R6690 += 1, R6646 += 1, R3452 += 1 };
  s10 -> s7 [0, 74] { R6690 += 1, R6646 += 1, R3452 += 1 };
  s10 -> s10 [0, 65535] { R6690 += 1, R6646 += 1, R3452 += 1, R3453 += 1 };
  s10 -> s7 [76, 65535] { R6690 += 1, R6646 += 1, R3452 += 1 };
  s11 -> s11 [0, 65535] { R6690 += 1 };
  s11 -> s12 [0, 65535];
  s12 -> s12 [0, 65535];
  accepting s3, s12, s6, s7, s11;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 69] { R6692 += 1, R6648 += 1, R6247 += 1, R6248 += 1 };
  s0 -> s2 [0, 69] { R6692 += 1, R6648 += 1, R6248 += 1, R6249 += 1, R6250 += 1 };
  s0 -> s3 [0, 65535] { R6692 += 1, R6647 += 1, R6648 += 1 };
  s0 -> s0 [0, 65535] { R6691 += 1, R6692 += 1 };
  s0 -> s4 [70, 70] { R6692 += 1, R6648 += 1, R6247 += 1, R6248 += 1 };
  s0 -> s5 [70, 70] { R6692 += 1, R6648 += 1, R6248 += 1, R6249 += 1, R6250 += 1 };
  s0 -> s6 [70, 70] { R6692 += 1, R6648 += 1, R6247 += 1, R6248 += 1 };
  s0 -> s7 [70, 70] { R6692 += 1, R6648 += 1, R6248 += 1, R6249 += 1, R6250 += 1 };
  s0 -> s1 [71, 65535] { R6692 += 1, R6648 += 1, R6247 += 1, R6248 += 1 };
  s0 -> s2 [71, 65535] { R6692 += 1, R6648 += 1, R6248 += 1, R6249 += 1, R6250 += 1 };
  s1 -> s1 [0, 69] { R6692 += 1, R6648 += 1, R6247 += 1, R6248 += 1 };
  s1 -> s2 [0, 69] { R6692 += 1, R6648 += 1, R6248 += 1, R6249 += 1, R6250 += 1 };
  s1 -> s4 [70, 70] { R6692 += 1, R6648 += 1, R6247 += 1, R6248 += 1 };
  s1 -> s5 [70, 70] { R6692 += 1, R6648 += 1, R6248 += 1, R6249 += 1, R6250 += 1 };
  s1 -> s6 [70, 70] { R6692 += 1, R6648 += 1, R6247 += 1, R6248 += 1 };
  s1 -> s7 [70, 70] { R6692 += 1, R6648 += 1, R6248 += 1, R6249 += 1, R6250 += 1 };
  s1 -> s1 [71, 65535] { R6692 += 1, R6648 += 1, R6247 += 1, R6248 += 1 };
  s1 -> s2 [71, 65535] { R6692 += 1, R6648 += 1, R6248 += 1, R6249 += 1, R6250 += 1 };
  s2 -> s2 [0, 69] { R6692 += 1, R6648 += 1, R6248 += 1, R6249 += 1, R6250 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R6692 += 1 };
  s2 -> s5 [70, 70] { R6692 += 1, R6648 += 1, R6248 += 1, R6249 += 1, R6250 += 1 };
  s2 -> s7 [70, 70] { R6692 += 1, R6648 += 1, R6248 += 1, R6249 += 1, R6250 += 1 };
  s2 -> s2 [71, 65535] { R6692 += 1, R6648 += 1, R6248 += 1, R6249 += 1, R6250 += 1 };
  s3 -> s1 [0, 69] { R6692 += 1, R6648 += 1, R6247 += 1, R6248 += 1 };
  s3 -> s2 [0, 69] { R6692 += 1, R6648 += 1, R6248 += 1, R6249 += 1, R6250 += 1 };
  s3 -> s3 [0, 65535] { R6692 += 1, R6647 += 1, R6648 += 1 };
  s3 -> s4 [70, 70] { R6692 += 1, R6648 += 1, R6247 += 1, R6248 += 1 };
  s3 -> s5 [70, 70] { R6692 += 1, R6648 += 1, R6248 += 1, R6249 += 1, R6250 += 1 };
  s3 -> s6 [70, 70] { R6692 += 1, R6648 += 1, R6247 += 1, R6248 += 1 };
  s3 -> s7 [70, 70] { R6692 += 1, R6648 += 1, R6248 += 1, R6249 += 1, R6250 += 1 };
  s3 -> s1 [71, 65535] { R6692 += 1, R6648 += 1, R6247 += 1, R6248 += 1 };
  s3 -> s2 [71, 65535] { R6692 += 1, R6648 += 1, R6248 += 1, R6249 += 1, R6250 += 1 };
  s4 -> s4 [0, 65535] { R6692 += 1, R6648 += 1, R6247 += 1, R6248 += 1 };
  s4 -> s5 [0, 65535] { R6692 += 1, R6648 += 1, R6248 += 1, R6249 += 1, R6250 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s5 [0, 65535] { R6692 += 1, R6648 += 1, R6248 += 1, R6249 += 1, R6250 += 1 };
  s5 -> s9 [0, 65535] { R6692 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R6692 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R6692 += 1 };
  accepting s8, s5, s2, s9, s7;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 69] { R6694 += 1, R6650 += 1, R6585 += 1, R6586 += 1 };
  s0 -> s2 [0, 69] { R6694 += 1, R6650 += 1, R6586 += 1, R6587 += 1, R6588 += 1 };
  s0 -> s3 [0, 69] { R6694 += 1, R6650 += 1, R6586 += 1, R6588 += 1, R6589 += 1 };
  s0 -> s0 [0, 65535] { R6693 += 1, R6694 += 1 };
  s0 -> s4 [0, 65535] { R6694 += 1, R6649 += 1, R6650 += 1 };
  s0 -> s5 [70, 70] { R6694 += 1, R6650 += 1, R6585 += 1, R6586 += 1 };
  s0 -> s6 [70, 70] { R6694 += 1, R6650 += 1, R6586 += 1, R6588 += 1, R6589 += 1 };
  s0 -> s7 [70, 70] { R6694 += 1, R6650 += 1, R6585 += 1, R6586 += 1 };
  s0 -> s8 [70, 70] { R6694 += 1, R6650 += 1, R6586 += 1, R6587 += 1, R6588 += 1 };
  s0 -> s9 [70, 70] { R6694 += 1, R6650 += 1, R6586 += 1, R6588 += 1, R6589 += 1 };
  s0 -> s10 [70, 70] { R6694 += 1, R6650 += 1, R6586 += 1, R6587 += 1, R6588 += 1 };
  s0 -> s1 [71, 65535] { R6694 += 1, R6650 += 1, R6585 += 1, R6586 += 1 };
  s0 -> s2 [71, 65535] { R6694 += 1, R6650 += 1, R6586 += 1, R6587 += 1, R6588 += 1 };
  s0 -> s3 [71, 65535] { R6694 += 1, R6650 += 1, R6586 += 1, R6588 += 1, R6589 += 1 };
  s1 -> s1 [0, 69] { R6694 += 1, R6650 += 1, R6585 += 1, R6586 += 1 };
  s1 -> s2 [0, 69] { R6694 += 1, R6650 += 1, R6586 += 1, R6587 += 1, R6588 += 1 };
  s1 -> s3 [0, 69] { R6694 += 1, R6650 += 1, R6586 += 1, R6588 += 1, R6589 += 1 };
  s1 -> s5 [70, 70] { R6694 += 1, R6650 += 1, R6585 += 1, R6586 += 1 };
  s1 -> s6 [70, 70] { R6694 += 1, R6650 += 1, R6586 += 1, R6588 += 1, R6589 += 1 };
  s1 -> s7 [70, 70] { R6694 += 1, R6650 += 1, R6585 += 1, R6586 += 1 };
  s1 -> s8 [70, 70] { R6694 += 1, R6650 += 1, R6586 += 1, R6587 += 1, R6588 += 1 };
  s1 -> s9 [70, 70] { R6694 += 1, R6650 += 1, R6586 += 1, R6588 += 1, R6589 += 1 };
  s1 -> s10 [70, 70] { R6694 += 1, R6650 += 1, R6586 += 1, R6587 += 1, R6588 += 1 };
  s1 -> s1 [71, 65535] { R6694 += 1, R6650 += 1, R6585 += 1, R6586 += 1 };
  s1 -> s2 [71, 65535] { R6694 += 1, R6650 += 1, R6586 += 1, R6587 += 1, R6588 += 1 };
  s1 -> s3 [71, 65535] { R6694 += 1, R6650 += 1, R6586 += 1, R6588 += 1, R6589 += 1 };
  s2 -> s2 [0, 69] { R6694 += 1, R6650 += 1, R6586 += 1, R6587 += 1, R6588 += 1 };
  s2 -> s3 [0, 69] { R6694 += 1, R6650 += 1, R6586 += 1, R6588 += 1, R6589 += 1 };
  s2 -> s6 [70, 70] { R6694 += 1, R6650 += 1, R6586 += 1, R6588 += 1, R6589 += 1 };
  s2 -> s8 [70, 70] { R6694 += 1, R6650 += 1, R6586 += 1, R6587 += 1, R6588 += 1 };
  s2 -> s9 [70, 70] { R6694 += 1, R6650 += 1, R6586 += 1, R6588 += 1, R6589 += 1 };
  s2 -> s10 [70, 70] { R6694 += 1, R6650 += 1, R6586 += 1, R6587 += 1, R6588 += 1 };
  s2 -> s2 [71, 65535] { R6694 += 1, R6650 += 1, R6586 += 1, R6587 += 1, R6588 += 1 };
  s2 -> s3 [71, 65535] { R6694 += 1, R6650 += 1, R6586 += 1, R6588 += 1, R6589 += 1 };
  s3 -> s3 [0, 69] { R6694 += 1, R6650 += 1, R6586 += 1, R6588 += 1, R6589 += 1 };
  s3 -> s3 [0, 65535] { R6694 += 1 };
  s3 -> s11 [0, 65535];
  s3 -> s6 [70, 70] { R6694 += 1, R6650 += 1, R6586 += 1, R6588 += 1, R6589 += 1 };
  s3 -> s9 [70, 70] { R6694 += 1, R6650 += 1, R6586 += 1, R6588 += 1, R6589 += 1 };
  s3 -> s3 [71, 65535] { R6694 += 1, R6650 += 1, R6586 += 1, R6588 += 1, R6589 += 1 };
  s4 -> s1 [0, 69] { R6694 += 1, R6650 += 1, R6585 += 1, R6586 += 1 };
  s4 -> s2 [0, 69] { R6694 += 1, R6650 += 1, R6586 += 1, R6587 += 1, R6588 += 1 };
  s4 -> s3 [0, 69] { R6694 += 1, R6650 += 1, R6586 += 1, R6588 += 1, R6589 += 1 };
  s4 -> s4 [0, 65535] { R6694 += 1, R6649 += 1, R6650 += 1 };
  s4 -> s5 [70, 70] { R6694 += 1, R6650 += 1, R6585 += 1, R6586 += 1 };
  s4 -> s6 [70, 70] { R6694 += 1, R6650 += 1, R6586 += 1, R6588 += 1, R6589 += 1 };
  s4 -> s7 [70, 70] { R6694 += 1, R6650 += 1, R6585 += 1, R6586 += 1 };
  s4 -> s8 [70, 70] { R6694 += 1, R6650 += 1, R6586 += 1, R6587 += 1, R6588 += 1 };
  s4 -> s9 [70, 70] { R6694 += 1, R6650 += 1, R6586 += 1, R6588 += 1, R6589 += 1 };
  s4 -> s10 [70, 70] { R6694 += 1, R6650 += 1, R6586 += 1, R6587 += 1, R6588 += 1 };
  s4 -> s1 [71, 65535] { R6694 += 1, R6650 += 1, R6585 += 1, R6586 += 1 };
  s4 -> s2 [71, 65535] { R6694 += 1, R6650 += 1, R6586 += 1, R6587 += 1, R6588 += 1 };
  s4 -> s3 [71, 65535] { R6694 += 1, R6650 += 1, R6586 += 1, R6588 += 1, R6589 += 1 };
  s6 -> s12 [0, 65535] { R6694 += 1 };
  s6 -> s6 [0, 65535] { R6694 += 1, R6650 += 1, R6586 += 1, R6588 += 1, R6589 += 1 };
  s6 -> s11 [0, 65535];
  s7 -> s6 [0, 65535] { R6694 += 1, R6650 += 1, R6586 += 1, R6588 += 1, R6589 += 1 };
  s7 -> s7 [0, 65535] { R6694 += 1, R6650 += 1, R6585 += 1, R6586 += 1 };
  s7 -> s10 [0, 65535] { R6694 += 1, R6650 += 1, R6586 += 1, R6587 += 1, R6588 += 1 };
  s9 -> s11 [0, 65535];
  s9 -> s9 [0, 65535] { R6694 += 1 };
  s10 -> s6 [0, 65535] { R6694 += 1, R6650 += 1, R6586 += 1, R6588 += 1, R6589 += 1 };
  s10 -> s10 [0, 65535] { R6694 += 1, R6650 += 1, R6586 += 1, R6587 += 1, R6588 += 1 };
  s11 -> s11 [0, 65535];
  s12 -> s12 [0, 65535] { R6694 += 1 };
  s12 -> s11 [0, 65535];
  accepting s3, s12, s9, s6, s11;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [102, 102];
  accepting s1;
};
};
constraint R2 = R6612 && R3 = R6694 && R23 - R6694 = -1 && R24 = R6694 && R25 - R6694 = -1 && R26 = R6694 && R27 = 0 && R28 = 1 && R29 = 0 && R30 = 1 && R45 + R84 + R83 + -1*R6252 + -1*R6248 - R66 = 0 && R49 + R89 + R87 = 0 && R50 + R90 + R88 + -1*R6252 + -1*R6248 - R66 = 0 && R55 + R96 + R93 + -1*R6254 + -1*R6250 - R68 = 0 && R65 + R6251 + R6247 = 0 && R67 + R6253 + R6249 = 0 && R6611 = 0 && R6635 = 0 && R6636 = 0 && R6641 = 0 && R6642 = 0 && R6645 = 0 && R6646 = 0 && R6647 = 0 && R6648 = 0 && R6649 = 0 && R6650 = 0 && R6651 = 0 && R6652 = R6694 && R6653 = 0 && R6654 = R6694 && R6655 = 0 && R6656 = R6694 && R6657 = 0 && R6658 = R6694 && R6659 = 0 && R6660 = R6694 && R6661 = 0 && R6662 = R6694 && R6663 = 0 && R6664 = R6694 && R6665 = 0 && R6666 = R6694 && R6667 = 0 && R6668 = R6694 && R6669 = 0 && R6670 = R6694 && R6671 = 0 && R6672 = R6694 && R6673 = 0 && R6674 = R6694 && R6675 = 0 && R6676 = R6694 && R6677 = 0 && R6678 = R6694 && R6679 = 0 && R6680 = R6694 && R6681 = 0 && R6682 = R6694 && R6683 = 0 && R6684 = R6694 && R6685 = 0 && R6686 = R6694 && R6687 = 0 && R6688 = R6694 && R6689 = 0 && R6690 = R6694 && R6691 = 0 && R6692 = R6694 && R6693 = 0 && R12 < 1 && R15 < 1 && R16 < 1 && R47 + R86 + R85 < 1 && R61 + R3456 + R3453 < 1 && -1*R6252 + -1*R6248 - R66 < 1 && -1*R6254 + -1*R6250 - R68 < 1 && -1 < R6612 && 0 < R6694 && (R53 + R94 + R91 != 0 || R54 + R95 + R92 + -1*R6252 + -1*R6248 - R66 = 0 || R66 + R6252 + R6248 < 1) && (R59 + R3454 + R3451 != 0 || R60 + R3455 + R3452 + -1*R6252 + -1*R6248 - R66 = 0 || R66 + R6252 + R6248 < 1) && (R66 + R6252 + R6248 != 0 || ((R53 + R94 + R91 != 0 || R54 + R95 + R92 = 0 || R68 + R6254 + R6250 < 1) && (R53 + R94 + R91 = 0 || R68 + R6254 + R6250 < 1))) && (R66 + R6252 + R6248 != 0 || ((R59 + R3454 + R3451 != 0 || R60 + R3455 + R3452 = 0 || R68 + R6254 + R6250 < 1) && (R59 + R3454 + R3451 = 0 || R68 + R6254 + R6250 < 1))) && (R66 + R6252 + R6248 != 0 || ((R73 + R6590 + R6585 != 0 || R74 + R6591 + R6586 = 0 || R68 + R6254 + R6250 < 1) && (R73 + R6590 + R6585 = 0 || R68 + R6254 + R6250 < 1))) && (R68 + R6254 + R6250 != 0 || R77 + R6594 + R6589 = 0 || (R75 + R6592 + R6587 = 0 && R76 + R6593 + R6588 = 0)) && (R73 + R6590 + R6585 != 0 || R66 + R6252 + R6248 + -1*R6591 + -1*R6586 - R74 = 0 || R66 + R6252 + R6248 < 1) && (R75 + R6592 + R6587 != 0 || R68 + R6254 + R6250 + -1*R6593 + -1*R6588 - R76 = 0 || R68 + R6254 + R6250 < 1) && (R6595 != 0 || R6596 = R6612 || (R20 = 0 && R6612 = 0)) && (R6597 != 0 || R6598 = R6612 || (R20 = 0 && R6612 = 0)) && (R6599 != 0 || R6600 = R6612 || (R20 = 0 && R6612 = 0)) && (R6601 != 0 || R6602 = R6612 || (R20 = 0 && R6612 = 0)) && (R6603 != 0 || R6604 = R6612 || (R20 = 0 && R6612 = 0)) && (R6605 != 0 || R6606 = R6612 || (R20 = 0 && R6612 = 0)) && (R6607 != 0 || R6608 = R6612 || (R20 = 0 && R6612 = 0)) && (R6609 != 0 || R6610 = R6612 || (R20 = 0 && R6612 = 0)) && (R6613 != 0 || R6612 = R6614 || (R20 = 0 && R6612 = 0)) && (R21 = 0 || (R6633 = 0 && R6634 = 0)) && (R21 = 0 || (R6637 = 0 && R6638 = 0)) && (R21 = 0 || (R6639 = 0 && R6640 = 0)) && (R21 = 0 || (R6643 = 0 && R6644 = 0)) && (R22 = 0 || (R6615 = 0 && R6616 = 0)) && (R22 = 0 || (R6617 = 0 && R6618 = 0)) && (R22 = 0 || (R6619 = 0 && R6620 = 0)) && (R22 = 0 || (R6621 = 0 && R6622 = 0)) && (R22 = 0 || (R6623 = 0 && R6624 = 0)) && (R22 = 0 || (R6625 = 0 && R6626 = 0)) && (R22 = 0 || (R6627 = 0 && R6628 = 0)) && (R22 = 0 || (R6629 = 0 && R6630 = 0)) && (R22 = 0 || (R6631 = 0 && R6632 = 0)) && (R53 + R94 + R91 = 0 || R66 + R6252 + R6248 < 1) && (R59 + R3454 + R3451 = 0 || R66 + R6252 + R6248 < 1) && (R73 + R6590 + R6585 = 0 || R66 + R6252 + R6248 < 1) && (R75 + R6592 + R6587 = 0 || R68 + R6254 + R6250 < 1) && (R6595 = 0 || (R20 = 0 && R6612 = 0)) && (R6597 = 0 || (R20 = 0 && R6612 = 0)) && (R6599 = 0 || (R20 = 0 && R6612 = 0)) && (R6601 = 0 || (R20 = 0 && R6612 = 0)) && (R6603 = 0 || (R20 = 0 && R6612 = 0)) && (R6605 = 0 || (R20 = 0 && R6612 = 0)) && (R6607 = 0 || (R20 = 0 && R6612 = 0)) && (R6609 = 0 || (R20 = 0 && R6612 = 0)) && (R6613 = 0 || (R20 = 0 && R6612 = 0));
// End of Parikh automata intersection problem
