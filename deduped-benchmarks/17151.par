// Parikh automata intersection problem, generated by OSTRICH+
counter int R10159, R10160, R10161, R10162, R10163, R10164, R12, R12397, R12398, R12399, R12400, R12401, R12402, R12403, R12404, R12625, R12626, R12627, R12628, R12629, R12630, R12631, R12632, R12633, R12634, R12635, R12636, R12637, R12638, R12639, R12640, R12641, R12642, R12643, R12644, R12645, R12646, R12647, R12648, R12649, R12650, R12651, R12652, R12653, R12654, R12655, R12656, R12657, R12658, R12659, R12660, R12661, R12662, R12663, R12664, R12665, R12666, R12667, R12668, R12669, R12670, R12671, R12672, R12673, R12674, R12675, R12676, R12677, R12678, R12679, R12680, R12681, R12682, R12683, R12684, R12685, R12686, R12687, R12688, R12689, R12690, R12691, R12692, R12693, R12694, R12695, R12696, R12697, R12698, R12699, R12700, R12701, R12702, R12703, R12704, R12705, R12706, R12707, R12708, R12709, R12710, R12711, R12712, R12713, R12714, R12715, R12716, R12717, R12718, R12719, R12720, R12721, R12722, R12723, R12724, R12725, R12726, R12727, R12728, R12729, R12730, R12731, R12732, R12733, R12734, R15, R16, R2, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R4, R45, R47, R49, R5, R50, R53, R54, R55, R59, R60, R61, R65, R66, R67, R68, R73, R74, R75, R76, R77, R83, R84, R85, R86, R87, R88, R89, R90, R91, R92, R93, R94, R95, R96;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [70, 70];
  s0 -> s0 [71, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [70, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R15 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 69];
  s0 -> s0 [0, 65535] { R16 += 1 };
  s0 -> s2 [70, 70];
  s0 -> s1 [71, 65535];
  s1 -> s1 [0, 69];
  s1 -> s2 [70, 70];
  s1 -> s1 [71, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R24 += 1 };
  s0 -> s0 [0, 65535] { R23 += 1, R24 += 1 };
  s0 -> s2 [9, 13] { R24 += 1 };
  s0 -> s1 [14, 31] { R24 += 1 };
  s0 -> s2 [32, 32] { R24 += 1 };
  s0 -> s1 [33, 65535] { R24 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R24 += 1 };
  s2 -> s1 [0, 65535] { R24 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R25 += 1, R26 += 1 };
  s1 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R28 += 1 };
  s0 -> s0 [0, 65535] { R27 += 1, R28 += 1 };
  s0 -> s2 [9, 13] { R28 += 1 };
  s0 -> s1 [14, 31] { R28 += 1 };
  s0 -> s2 [32, 32] { R28 += 1 };
  s0 -> s1 [33, 65535] { R28 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R28 += 1 };
  s2 -> s1 [0, 65535] { R28 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R29 += 1, R30 += 1 };
  s1 -> s1 [0, 65535] { R30 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R12656 += 1, R22 += 1 };
  s0 -> s0 [0, 65535] { R12655 += 1, R12656 += 1 };
  s1 -> s1 [0, 65535] { R12656 += 1, R22 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 69] { R12658 += 1 };
  s0 -> s0 [0, 65535] { R12657 += 1, R12658 += 1 };
  s0 -> s2 [70, 70] { R12658 += 1 };
  s0 -> s3 [70, 70] { R12658 += 1 };
  s0 -> s1 [76, 65535] { R12658 += 1 };
  s1 -> s1 [0, 69] { R12658 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R12658 += 1 };
  s1 -> s3 [70, 70] { R12658 += 1 };
  s1 -> s1 [76, 65535] { R12658 += 1 };
  s2 -> s2 [0, 70] { R12658 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [76, 65535] { R12658 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 69] { R12660 += 1, R45 += 1 };
  s0 -> s0 [0, 65535] { R12659 += 1, R12660 += 1 };
  s0 -> s2 [70, 70] { R12660 += 1, R45 += 1 };
  s0 -> s3 [70, 70] { R12660 += 1, R45 += 1 };
  s0 -> s1 [71, 65535] { R12660 += 1, R45 += 1 };
  s1 -> s1 [0, 69] { R12660 += 1, R45 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R12660 += 1, R45 += 1 };
  s1 -> s3 [70, 70] { R12660 += 1, R45 += 1 };
  s1 -> s1 [71, 65535] { R12660 += 1, R45 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R12660 += 1, R45 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 69] { R12662 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R12661 += 1, R12662 += 1 };
  s0 -> s2 [70, 70] { R12662 += 1, R47 += 1 };
  s0 -> s3 [70, 70] { R12662 += 1, R47 += 1 };
  s0 -> s1 [71, 65535] { R12662 += 1, R47 += 1 };
  s1 -> s1 [0, 69] { R12662 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R12662 += 1, R47 += 1 };
  s1 -> s3 [70, 70] { R12662 += 1, R47 += 1 };
  s1 -> s1 [71, 65535] { R12662 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R12662 += 1, R47 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 69] { R12664 += 1, R49 += 1, R50 += 1 };
  s0 -> s0 [0, 65535] { R12663 += 1, R12664 += 1 };
  s0 -> s2 [70, 70] { R12664 += 1, R49 += 1, R50 += 1 };
  s0 -> s3 [70, 70] { R12664 += 1, R49 += 1, R50 += 1 };
  s0 -> s1 [71, 65535] { R12664 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 69] { R12664 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R12664 += 1, R49 += 1, R50 += 1 };
  s1 -> s3 [70, 70] { R12664 += 1, R49 += 1, R50 += 1 };
  s1 -> s1 [71, 65535] { R12664 += 1, R49 += 1, R50 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R12664 += 1, R49 += 1, R50 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 69] { R12666 += 1, R53 += 1, R54 += 1 };
  s0 -> s0 [0, 65535] { R12665 += 1, R12666 += 1 };
  s0 -> s2 [70, 70] { R12666 += 1, R53 += 1, R54 += 1 };
  s0 -> s3 [70, 70] { R12666 += 1, R53 += 1, R54 += 1 };
  s0 -> s1 [71, 65535] { R12666 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 69] { R12666 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R12666 += 1, R53 += 1, R54 += 1 };
  s1 -> s3 [70, 70] { R12666 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [71, 65535] { R12666 += 1, R53 += 1, R54 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R12666 += 1, R53 += 1, R54 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 69] { R12668 += 1, R59 += 1, R60 += 1 };
  s0 -> s0 [0, 65535] { R12667 += 1, R12668 += 1 };
  s0 -> s2 [70, 70] { R12668 += 1, R59 += 1, R60 += 1 };
  s0 -> s3 [70, 70] { R12668 += 1, R59 += 1, R60 += 1 };
  s0 -> s1 [71, 65535] { R12668 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 69] { R12668 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R12668 += 1, R59 += 1, R60 += 1 };
  s1 -> s3 [70, 70] { R12668 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [71, 65535] { R12668 += 1, R59 += 1, R60 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R12668 += 1, R59 += 1, R60 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 69] { R12670 += 1, R65 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R12669 += 1, R12670 += 1 };
  s0 -> s2 [70, 70] { R12670 += 1, R65 += 1, R66 += 1 };
  s0 -> s3 [70, 70] { R12670 += 1, R65 += 1, R66 += 1 };
  s0 -> s1 [71, 65535] { R12670 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 69] { R12670 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R12670 += 1, R65 += 1, R66 += 1 };
  s1 -> s3 [70, 70] { R12670 += 1, R65 += 1, R66 += 1 };
  s1 -> s1 [71, 65535] { R12670 += 1, R65 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R12670 += 1, R65 += 1, R66 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 69] { R12672 += 1, R73 += 1, R74 += 1 };
  s0 -> s0 [0, 65535] { R12671 += 1, R12672 += 1 };
  s0 -> s2 [70, 70] { R12672 += 1, R73 += 1, R74 += 1 };
  s0 -> s3 [70, 70] { R12672 += 1, R73 += 1, R74 += 1 };
  s0 -> s1 [71, 65535] { R12672 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 69] { R12672 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R12672 += 1, R73 += 1, R74 += 1 };
  s1 -> s3 [70, 70] { R12672 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [71, 65535] { R12672 += 1, R73 += 1, R74 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R12672 += 1, R73 += 1, R74 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 69] { R12692 += 1 };
  s0 -> s0 [0, 65535] { R12691 += 1, R12692 += 1 };
  s0 -> s2 [70, 70] { R12692 += 1 };
  s0 -> s1 [71, 65535] { R12692 += 1 };
  s1 -> s1 [0, 69] { R12692 += 1 };
  s1 -> s2 [70, 70] { R12692 += 1 };
  s1 -> s1 [71, 65535] { R12692 += 1 };
  s2 -> s2 [0, 65535] { R12692 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R12694 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R12693 += 1, R12694 += 1 };
  s1 -> s1 [0, 65535] { R12694 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 69] { R12696 += 1 };
  s0 -> s2 [0, 65535] { R12696 += 1, R12 += 1 };
  s0 -> s0 [0, 65535] { R12695 += 1, R12696 += 1 };
  s0 -> s3 [70, 70] { R12696 += 1 };
  s0 -> s1 [71, 65535] { R12696 += 1 };
  s1 -> s1 [0, 69] { R12696 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [70, 70] { R12696 += 1 };
  s1 -> s1 [71, 65535] { R12696 += 1 };
  s2 -> s1 [0, 69] { R12696 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R12696 += 1, R12 += 1 };
  s2 -> s3 [70, 70] { R12696 += 1 };
  s2 -> s1 [71, 65535] { R12696 += 1 };
  s3 -> s3 [0, 65535] { R12696 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 69] { R12698 += 1, R12636 += 1 };
  s0 -> s2 [0, 65535] { R12698 += 1, R12635 += 1, R12636 += 1 };
  s0 -> s0 [0, 65535] { R12697 += 1, R12698 += 1 };
  s0 -> s1 [71, 65535] { R12698 += 1, R12636 += 1 };
  s1 -> s1 [0, 69] { R12698 += 1, R12636 += 1 };
  s1 -> s1 [0, 65535] { R12698 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [71, 65535] { R12698 += 1, R12636 += 1 };
  s2 -> s1 [0, 69] { R12698 += 1, R12636 += 1 };
  s2 -> s2 [0, 65535] { R12698 += 1, R12635 += 1, R12636 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [71, 65535] { R12698 += 1, R12636 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R12700 += 1, R12638 += 1, R20 += 1 };
  s0 -> s2 [0, 65535] { R12700 += 1, R12637 += 1, R12638 += 1 };
  s0 -> s0 [0, 65535] { R12699 += 1, R12700 += 1 };
  s1 -> s4 [0, 65535] { R12700 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R12700 += 1, R12638 += 1, R20 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R12700 += 1, R12638 += 1, R20 += 1 };
  s2 -> s2 [0, 65535] { R12700 += 1, R12637 += 1, R12638 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R12700 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 70] { R12702 += 1, R12640 += 1 };
  s0 -> s2 [0, 65535] { R12702 += 1, R12639 += 1, R12640 += 1 };
  s0 -> s0 [0, 65535] { R12701 += 1, R12702 += 1 };
  s0 -> s1 [75, 65535] { R12702 += 1, R12640 += 1 };
  s1 -> s1 [0, 70] { R12702 += 1, R12640 += 1 };
  s1 -> s1 [0, 65535] { R12702 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [75, 65535] { R12702 += 1, R12640 += 1 };
  s2 -> s1 [0, 70] { R12702 += 1, R12640 += 1 };
  s2 -> s2 [0, 65535] { R12702 += 1, R12639 += 1, R12640 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [75, 65535] { R12702 += 1, R12640 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s0 [0, 65535] { R12703 += 1, R12704 += 1 };
  s0 -> s1 [0, 65535] { R12704 += 1, R12641 += 1, R12642 += 1 };
  s0 -> s2 [0, 65535] { R12704 += 1, R12642 += 1, R84 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R12704 += 1, R12641 += 1, R12642 += 1 };
  s1 -> s2 [0, 65535] { R12704 += 1, R12642 += 1, R84 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R12704 += 1 };
  s2 -> s2 [0, 65535] { R12704 += 1, R12642 += 1, R84 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R12704 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 74] { R12706 += 1, R12644 += 1 };
  s0 -> s2 [0, 65535] { R12706 += 1, R12643 += 1, R12644 += 1 };
  s0 -> s3 [0, 65535] { R12706 += 1, R12644 += 1, R86 += 1 };
  s0 -> s0 [0, 65535] { R12705 += 1, R12706 += 1 };
  s0 -> s1 [76, 65535] { R12706 += 1, R12644 += 1 };
  s1 -> s1 [0, 74] { R12706 += 1, R12644 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R12706 += 1 };
  s1 -> s1 [76, 65535] { R12706 += 1, R12644 += 1 };
  s2 -> s1 [0, 74] { R12706 += 1, R12644 += 1 };
  s2 -> s2 [0, 65535] { R12706 += 1, R12643 += 1, R12644 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R12706 += 1, R12644 += 1, R86 += 1 };
  s2 -> s1 [76, 65535] { R12706 += 1, R12644 += 1 };
  s3 -> s1 [0, 74] { R12706 += 1, R12644 += 1 };
  s3 -> s4 [0, 65535] { R12706 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R12706 += 1, R12644 += 1, R86 += 1 };
  s3 -> s1 [76, 65535] { R12706 += 1, R12644 += 1 };
  s4 -> s4 [0, 65535] { R12706 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 65535] { R12708 += 1, R12646 += 1, R90 += 1 };
  s0 -> s2 [0, 65535] { R12708 += 1, R12645 += 1, R12646 += 1 };
  s0 -> s0 [0, 65535] { R12707 += 1, R12708 += 1 };
  s0 -> s3 [0, 65535] { R12708 += 1, R12646 += 1 };
  s1 -> s1 [0, 65535] { R12708 += 1, R12646 += 1, R90 += 1 };
  s1 -> s4 [0, 65535] { R12708 += 1 };
  s1 -> s3 [0, 65535] { R12708 += 1, R12646 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R12708 += 1, R12646 += 1, R90 += 1 };
  s2 -> s2 [0, 65535] { R12708 += 1, R12645 += 1, R12646 += 1 };
  s2 -> s3 [0, 65535] { R12708 += 1, R12646 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s4 [0, 65535] { R12708 += 1 };
  s3 -> s3 [0, 65535] { R12708 += 1, R12646 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R12708 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R12710 += 1, R12648 += 1, R94 += 1, R95 += 1 };
  s0 -> s0 [0, 65535] { R12709 += 1, R12710 += 1 };
  s0 -> s2 [0, 65535] { R12710 += 1, R12647 += 1, R12648 += 1 };
  s0 -> s3 [0, 65535] { R12710 += 1, R12648 += 1, R95 += 1, R96 += 1 };
  s1 -> s1 [0, 65535] { R12710 += 1, R12648 += 1, R94 += 1, R95 += 1 };
  s1 -> s5 [0, 65535] { R12710 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [0, 65535] { R12710 += 1, R12648 += 1, R95 += 1, R96 += 1 };
  s2 -> s1 [0, 65535] { R12710 += 1, R12648 += 1, R94 += 1, R95 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R12710 += 1, R12647 += 1, R12648 += 1 };
  s2 -> s3 [0, 65535] { R12710 += 1, R12648 += 1, R95 += 1, R96 += 1 };
  s3 -> s4 [0, 65535] { R12710 += 1, R12648 += 1 };
  s3 -> s5 [0, 65535] { R12710 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R12710 += 1, R12648 += 1, R95 += 1, R96 += 1 };
  s4 -> s4 [0, 65535] { R12710 += 1, R12648 += 1 };
  s4 -> s5 [0, 65535] { R12710 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R12710 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s0 [0, 65535] { R12711 += 1, R12712 += 1 };
  s0 -> s1 [0, 65535] { R12712 += 1, R12649 += 1, R12650 += 1 };
  s0 -> s2 [0, 65535] { R12712 += 1, R12650 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R12712 += 1, R12649 += 1, R12650 += 1 };
  s1 -> s2 [0, 65535] { R12712 += 1, R12650 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R12712 += 1 };
  s2 -> s2 [0, 65535] { R12712 += 1, R12650 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R12712 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 74] { R12714 += 1, R12652 += 1, R12402 += 1, R12404 += 1 };
  s0 -> s0 [0, 65535] { R12713 += 1, R12714 += 1 };
  s0 -> s2 [0, 65535] { R12714 += 1, R12651 += 1, R12652 += 1 };
  s0 -> s3 [75, 75] { R12714 += 1, R12652 += 1, R12402 += 1, R12404 += 1 };
  s0 -> s1 [76, 65535] { R12714 += 1, R12652 += 1, R12402 += 1, R12404 += 1 };
  s1 -> s1 [0, 74] { R12714 += 1, R12652 += 1, R12402 += 1, R12404 += 1 };
  s1 -> s3 [75, 75] { R12714 += 1, R12652 += 1, R12402 += 1, R12404 += 1 };
  s1 -> s1 [76, 65535] { R12714 += 1, R12652 += 1, R12402 += 1, R12404 += 1 };
  s2 -> s1 [0, 74] { R12714 += 1, R12652 += 1, R12402 += 1, R12404 += 1 };
  s2 -> s2 [0, 65535] { R12714 += 1, R12651 += 1, R12652 += 1 };
  s2 -> s3 [75, 75] { R12714 += 1, R12652 += 1, R12402 += 1, R12404 += 1 };
  s2 -> s1 [76, 65535] { R12714 += 1, R12652 += 1, R12402 += 1, R12404 += 1 };
  s3 -> s3 [0, 65535] { R12714 += 1, R12652 += 1, R12402 += 1, R12404 += 1 };
  s3 -> s4 [0, 65535] { R12714 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R12714 += 1, R12652 += 1 };
  s3 -> s7 [0, 65535] { R12714 += 1, R12652 += 1, R12402 += 1 };
  s4 -> s4 [0, 65535] { R12714 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R12714 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R12714 += 1, R12652 += 1 };
  s7 -> s4 [0, 65535] { R12714 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R12714 += 1, R12652 += 1 };
  s7 -> s7 [0, 65535] { R12714 += 1, R12652 += 1, R12402 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 65535] { R12716 += 1, R12653 += 1, R12654 += 1 };
  s0 -> s0 [0, 65535] { R12715 += 1, R12716 += 1 };
  s0 -> s2 [0, 65535] { R12716 += 1, R12654 += 1, R12631 += 1, R12632 += 1, R12633 += 1 };
  s0 -> s3 [0, 65535] { R12716 += 1, R12654 += 1, R12631 += 1, R12633 += 1, R12634 += 1 };
  s0 -> s4 [0, 65535] { R12716 += 1, R12654 += 1, R12630 += 1, R12631 += 1 };
  s1 -> s1 [0, 65535] { R12716 += 1, R12653 += 1, R12654 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s2 [0, 65535] { R12716 += 1, R12654 += 1, R12631 += 1, R12632 += 1, R12633 += 1 };
  s1 -> s3 [0, 65535] { R12716 += 1, R12654 += 1, R12631 += 1, R12633 += 1, R12634 += 1 };
  s1 -> s4 [0, 65535] { R12716 += 1, R12654 += 1, R12630 += 1, R12631 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R12716 += 1, R12654 += 1, R12631 += 1, R12632 += 1, R12633 += 1 };
  s2 -> s6 [0, 65535] { R12716 += 1 };
  s2 -> s3 [0, 65535] { R12716 += 1, R12654 += 1, R12631 += 1, R12633 += 1, R12634 += 1 };
  s2 -> s8 [0, 65535] { R12716 += 1, R12654 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R12716 += 1 };
  s3 -> s7 [0, 65535] { R12716 += 1, R12654 += 1, R12631 += 1 };
  s3 -> s3 [0, 65535] { R12716 += 1, R12654 += 1, R12631 += 1, R12633 += 1, R12634 += 1 };
  s3 -> s8 [0, 65535] { R12716 += 1, R12654 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s2 [0, 65535] { R12716 += 1, R12654 += 1, R12631 += 1, R12632 += 1, R12633 += 1 };
  s4 -> s6 [0, 65535] { R12716 += 1 };
  s4 -> s3 [0, 65535] { R12716 += 1, R12654 += 1, R12631 += 1, R12633 += 1, R12634 += 1 };
  s4 -> s4 [0, 65535] { R12716 += 1, R12654 += 1, R12630 += 1, R12631 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R12716 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R12716 += 1 };
  s7 -> s7 [0, 65535] { R12716 += 1, R12654 += 1, R12631 += 1 };
  s7 -> s8 [0, 65535] { R12716 += 1, R12654 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s6 [0, 65535] { R12716 += 1 };
  s8 -> s8 [0, 65535] { R12716 += 1, R12654 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s0 [0, 65535] { R12717 += 1, R12718 += 1 };
  s0 -> s1 [0, 65535] { R12718 += 1, R12674 += 1, R21 += 1 };
  s0 -> s2 [0, 65535] { R12718 += 1, R12673 += 1, R12674 += 1 };
  s1 -> s4 [0, 65535] { R12718 += 1 };
  s1 -> s1 [0, 65535] { R12718 += 1, R12674 += 1, R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R12718 += 1, R12674 += 1, R21 += 1 };
  s2 -> s2 [0, 65535] { R12718 += 1, R12673 += 1, R12674 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R12718 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 69] { R12720 += 1, R12676 += 1 };
  s0 -> s0 [0, 65535] { R12719 += 1, R12720 += 1 };
  s0 -> s2 [0, 65535] { R12720 += 1, R12675 += 1, R12676 += 1 };
  s0 -> s3 [70, 70] { R12720 += 1, R12676 += 1 };
  s0 -> s4 [70, 70] { R12720 += 1, R12676 += 1 };
  s0 -> s5 [75, 75] { R12720 += 1, R12676 += 1 };
  s0 -> s1 [76, 65535] { R12720 += 1, R12676 += 1 };
  s1 -> s1 [0, 69] { R12720 += 1, R12676 += 1 };
  s1 -> s3 [70, 70] { R12720 += 1, R12676 += 1 };
  s1 -> s4 [70, 70] { R12720 += 1, R12676 += 1 };
  s1 -> s5 [75, 75] { R12720 += 1, R12676 += 1 };
  s1 -> s1 [76, 65535] { R12720 += 1, R12676 += 1 };
  s2 -> s1 [0, 69] { R12720 += 1, R12676 += 1 };
  s2 -> s2 [0, 65535] { R12720 += 1, R12675 += 1, R12676 += 1 };
  s2 -> s3 [70, 70] { R12720 += 1, R12676 += 1 };
  s2 -> s4 [70, 70] { R12720 += 1, R12676 += 1 };
  s2 -> s5 [75, 75] { R12720 += 1, R12676 += 1 };
  s2 -> s1 [76, 65535] { R12720 += 1, R12676 += 1 };
  s3 -> s3 [0, 70] { R12720 += 1, R12676 += 1 };
  s3 -> s7 [75, 75] { R12720 += 1, R12676 += 1 };
  s3 -> s3 [76, 65535] { R12720 += 1, R12676 += 1 };
  s5 -> s5 [0, 69] { R12720 += 1, R12676 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R12720 += 1 };
  s5 -> s7 [70, 70] { R12720 += 1, R12676 += 1 };
  s5 -> s8 [70, 70] { R12720 += 1, R12676 += 1 };
  s5 -> s5 [75, 65535] { R12720 += 1, R12676 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 70] { R12720 += 1, R12676 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R12720 += 1 };
  s7 -> s7 [75, 65535] { R12720 += 1, R12676 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R12720 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 69] { R12722 += 1, R12678 += 1, R83 += 1 };
  s0 -> s2 [0, 65535] { R12722 += 1, R12677 += 1, R12678 += 1 };
  s0 -> s0 [0, 65535] { R12721 += 1, R12722 += 1 };
  s0 -> s3 [70, 70] { R12722 += 1, R12678 += 1, R83 += 1 };
  s0 -> s4 [70, 70] { R12722 += 1, R12678 += 1, R83 += 1 };
  s0 -> s1 [71, 65535] { R12722 += 1, R12678 += 1, R83 += 1 };
  s1 -> s1 [0, 69] { R12722 += 1, R12678 += 1, R83 += 1 };
  s1 -> s1 [0, 65535] { R12722 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [70, 70] { R12722 += 1, R12678 += 1, R83 += 1 };
  s1 -> s4 [70, 70] { R12722 += 1, R12678 += 1, R83 += 1 };
  s1 -> s1 [71, 65535] { R12722 += 1, R12678 += 1, R83 += 1 };
  s2 -> s1 [0, 69] { R12722 += 1, R12678 += 1, R83 += 1 };
  s2 -> s2 [0, 65535] { R12722 += 1, R12677 += 1, R12678 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [70, 70] { R12722 += 1, R12678 += 1, R83 += 1 };
  s2 -> s4 [70, 70] { R12722 += 1, R12678 += 1, R83 += 1 };
  s2 -> s1 [71, 65535] { R12722 += 1, R12678 += 1, R83 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R12722 += 1 };
  s3 -> s3 [0, 65535] { R12722 += 1, R12678 += 1, R83 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R12722 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R12722 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 69] { R12724 += 1, R12680 += 1, R85 += 1 };
  s0 -> s2 [0, 65535] { R12724 += 1, R12679 += 1, R12680 += 1 };
  s0 -> s0 [0, 65535] { R12723 += 1, R12724 += 1 };
  s0 -> s3 [70, 70] { R12724 += 1, R12680 += 1, R85 += 1 };
  s0 -> s4 [70, 70] { R12724 += 1, R12680 += 1, R85 += 1 };
  s0 -> s1 [71, 65535] { R12724 += 1, R12680 += 1, R85 += 1 };
  s1 -> s1 [0, 69] { R12724 += 1, R12680 += 1, R85 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R12724 += 1 };
  s1 -> s3 [70, 70] { R12724 += 1, R12680 += 1, R85 += 1 };
  s1 -> s4 [70, 70] { R12724 += 1, R12680 += 1, R85 += 1 };
  s1 -> s1 [71, 65535] { R12724 += 1, R12680 += 1, R85 += 1 };
  s2 -> s1 [0, 69] { R12724 += 1, R12680 += 1, R85 += 1 };
  s2 -> s2 [0, 65535] { R12724 += 1, R12679 += 1, R12680 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [70, 70] { R12724 += 1, R12680 += 1, R85 += 1 };
  s2 -> s4 [70, 70] { R12724 += 1, R12680 += 1, R85 += 1 };
  s2 -> s1 [71, 65535] { R12724 += 1, R12680 += 1, R85 += 1 };
  s3 -> s3 [0, 65535] { R12724 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R12724 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R12724 += 1, R12680 += 1, R85 += 1 };
  s5 -> s5 [0, 65535] { R12724 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 69] { R12726 += 1, R12682 += 1, R87 += 1, R88 += 1 };
  s0 -> s2 [0, 69] { R12726 += 1, R12682 += 1, R88 += 1 };
  s0 -> s0 [0, 65535] { R12725 += 1, R12726 += 1 };
  s0 -> s3 [0, 65535] { R12726 += 1, R12681 += 1, R12682 += 1 };
  s0 -> s4 [70, 70] { R12726 += 1, R12682 += 1, R87 += 1, R88 += 1 };
  s0 -> s5 [70, 70] { R12726 += 1, R12682 += 1, R88 += 1 };
  s0 -> s6 [70, 70] { R12726 += 1, R12682 += 1, R88 += 1 };
  s0 -> s7 [70, 70] { R12726 += 1, R12682 += 1, R87 += 1, R88 += 1 };
  s0 -> s2 [71, 74] { R12726 += 1, R12682 += 1, R88 += 1 };
  s0 -> s1 [71, 65535] { R12726 += 1, R12682 += 1, R87 += 1, R88 += 1 };
  s0 -> s8 [75, 75] { R12726 += 1, R12682 += 1, R88 += 1 };
  s0 -> s2 [76, 65535] { R12726 += 1, R12682 += 1, R88 += 1 };
  s1 -> s1 [0, 69] { R12726 += 1, R12682 += 1, R87 += 1, R88 += 1 };
  s1 -> s2 [0, 69] { R12726 += 1, R12682 += 1, R88 += 1 };
  s1 -> s4 [70, 70] { R12726 += 1, R12682 += 1, R87 += 1, R88 += 1 };
  s1 -> s5 [70, 70] { R12726 += 1, R12682 += 1, R88 += 1 };
  s1 -> s6 [70, 70] { R12726 += 1, R12682 += 1, R88 += 1 };
  s1 -> s7 [70, 70] { R12726 += 1, R12682 += 1, R87 += 1, R88 += 1 };
  s1 -> s2 [71, 74] { R12726 += 1, R12682 += 1, R88 += 1 };
  s1 -> s1 [71, 65535] { R12726 += 1, R12682 += 1, R87 += 1, R88 += 1 };
  s1 -> s8 [75, 75] { R12726 += 1, R12682 += 1, R88 += 1 };
  s1 -> s2 [76, 65535] { R12726 += 1, R12682 += 1, R88 += 1 };
  s2 -> s2 [0, 69] { R12726 += 1, R12682 += 1, R88 += 1 };
  s2 -> s5 [70, 70] { R12726 += 1, R12682 += 1, R88 += 1 };
  s2 -> s6 [70, 70] { R12726 += 1, R12682 += 1, R88 += 1 };
  s2 -> s2 [71, 74] { R12726 += 1, R12682 += 1, R88 += 1 };
  s2 -> s8 [75, 75] { R12726 += 1, R12682 += 1, R88 += 1 };
  s2 -> s2 [76, 65535] { R12726 += 1, R12682 += 1, R88 += 1 };
  s3 -> s1 [0, 69] { R12726 += 1, R12682 += 1, R87 += 1, R88 += 1 };
  s3 -> s2 [0, 69] { R12726 += 1, R12682 += 1, R88 += 1 };
  s3 -> s3 [0, 65535] { R12726 += 1, R12681 += 1, R12682 += 1 };
  s3 -> s4 [70, 70] { R12726 += 1, R12682 += 1, R87 += 1, R88 += 1 };
  s3 -> s5 [70, 70] { R12726 += 1, R12682 += 1, R88 += 1 };
  s3 -> s6 [70, 70] { R12726 += 1, R12682 += 1, R88 += 1 };
  s3 -> s7 [70, 70] { R12726 += 1, R12682 += 1, R87 += 1, R88 += 1 };
  s3 -> s2 [71, 74] { R12726 += 1, R12682 += 1, R88 += 1 };
  s3 -> s1 [71, 65535] { R12726 += 1, R12682 += 1, R87 += 1, R88 += 1 };
  s3 -> s8 [75, 75] { R12726 += 1, R12682 += 1, R88 += 1 };
  s3 -> s2 [76, 65535] { R12726 += 1, R12682 += 1, R88 += 1 };
  s5 -> s5 [0, 74] { R12726 += 1, R12682 += 1, R88 += 1 };
  s5 -> s10 [75, 75] { R12726 += 1, R12682 += 1, R88 += 1 };
  s5 -> s5 [76, 65535] { R12726 += 1, R12682 += 1, R88 += 1 };
  s7 -> s5 [0, 74] { R12726 += 1, R12682 += 1, R88 += 1 };
  s7 -> s7 [0, 65535] { R12726 += 1, R12682 += 1, R87 += 1, R88 += 1 };
  s7 -> s10 [75, 75] { R12726 += 1, R12682 += 1, R88 += 1 };
  s7 -> s5 [76, 65535] { R12726 += 1, R12682 += 1, R88 += 1 };
  s8 -> s8 [0, 69] { R12726 += 1, R12682 += 1, R88 += 1 };
  s8 -> s8 [0, 65535] { R12726 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [70, 70] { R12726 += 1, R12682 += 1, R88 += 1 };
  s8 -> s11 [70, 70] { R12726 += 1, R12682 += 1, R88 += 1 };
  s8 -> s8 [71, 65535] { R12726 += 1, R12682 += 1, R88 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R12726 += 1, R12682 += 1, R88 += 1 };
  s10 -> s12 [0, 65535] { R12726 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R12726 += 1 };
  s11 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R12726 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 69] { R12728 += 1, R12684 += 1, R91 += 1, R92 += 1 };
  s0 -> s2 [0, 65535] { R12728 += 1, R12683 += 1, R12684 += 1 };
  s0 -> s0 [0, 65535] { R12727 += 1, R12728 += 1 };
  s0 -> s3 [70, 70] { R12728 += 1, R12684 += 1, R91 += 1, R92 += 1 };
  s0 -> s4 [70, 70] { R12728 += 1, R12684 += 1, R91 += 1, R92 += 1 };
  s0 -> s1 [71, 65535] { R12728 += 1, R12684 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 69] { R12728 += 1, R12684 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 65535] { R12728 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [70, 70] { R12728 += 1, R12684 += 1, R91 += 1, R92 += 1 };
  s1 -> s4 [70, 70] { R12728 += 1, R12684 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [71, 65535] { R12728 += 1, R12684 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [0, 69] { R12728 += 1, R12684 += 1, R91 += 1, R92 += 1 };
  s2 -> s2 [0, 65535] { R12728 += 1, R12683 += 1, R12684 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [70, 70] { R12728 += 1, R12684 += 1, R91 += 1, R92 += 1 };
  s2 -> s4 [70, 70] { R12728 += 1, R12684 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [71, 65535] { R12728 += 1, R12684 += 1, R91 += 1, R92 += 1 };
  s3 -> s3 [0, 65535] { R12728 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R12728 += 1 };
  s4 -> s4 [0, 65535] { R12728 += 1, R12684 += 1, R91 += 1, R92 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R12728 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 69] { R12730 += 1, R12686 += 1, R10160 += 1, R10161 += 1 };
  s0 -> s2 [0, 69] { R12730 += 1, R12686 += 1, R10159 += 1, R10160 += 1 };
  s0 -> s3 [0, 65535] { R12730 += 1, R12685 += 1, R12686 += 1 };
  s0 -> s0 [0, 65535] { R12729 += 1, R12730 += 1 };
  s0 -> s4 [70, 70] { R12730 += 1, R12686 += 1, R10159 += 1, R10160 += 1 };
  s0 -> s5 [70, 70] { R12730 += 1, R12686 += 1, R10160 += 1, R10161 += 1 };
  s0 -> s6 [70, 70] { R12730 += 1, R12686 += 1, R10159 += 1, R10160 += 1 };
  s0 -> s7 [70, 70] { R12730 += 1, R12686 += 1, R10160 += 1, R10161 += 1 };
  s0 -> s1 [71, 65535] { R12730 += 1, R12686 += 1, R10160 += 1, R10161 += 1 };
  s0 -> s2 [71, 65535] { R12730 += 1, R12686 += 1, R10159 += 1, R10160 += 1 };
  s1 -> s11 [0, 69] { R12730 += 1, R12686 += 1 };
  s1 -> s1 [0, 69] { R12730 += 1, R12686 += 1, R10160 += 1, R10161 += 1 };
  s1 -> s12 [70, 70] { R12730 += 1, R12686 += 1 };
  s1 -> s5 [70, 70] { R12730 += 1, R12686 += 1, R10160 += 1, R10161 += 1 };
  s1 -> s7 [70, 70] { R12730 += 1, R12686 += 1, R10160 += 1, R10161 += 1 };
  s1 -> s8 [70, 70] { R12730 += 1, R12686 += 1 };
  s1 -> s11 [71, 65535] { R12730 += 1, R12686 += 1 };
  s1 -> s1 [71, 65535] { R12730 += 1, R12686 += 1, R10160 += 1, R10161 += 1 };
  s2 -> s1 [0, 69] { R12730 += 1, R12686 += 1, R10160 += 1, R10161 += 1 };
  s2 -> s2 [0, 69] { R12730 += 1, R12686 += 1, R10159 += 1, R10160 += 1 };
  s2 -> s4 [70, 70] { R12730 += 1, R12686 += 1, R10159 += 1, R10160 += 1 };
  s2 -> s5 [70, 70] { R12730 += 1, R12686 += 1, R10160 += 1, R10161 += 1 };
  s2 -> s6 [70, 70] { R12730 += 1, R12686 += 1, R10159 += 1, R10160 += 1 };
  s2 -> s7 [70, 70] { R12730 += 1, R12686 += 1, R10160 += 1, R10161 += 1 };
  s2 -> s1 [71, 65535] { R12730 += 1, R12686 += 1, R10160 += 1, R10161 += 1 };
  s2 -> s2 [71, 65535] { R12730 += 1, R12686 += 1, R10159 += 1, R10160 += 1 };
  s3 -> s1 [0, 69] { R12730 += 1, R12686 += 1, R10160 += 1, R10161 += 1 };
  s3 -> s2 [0, 69] { R12730 += 1, R12686 += 1, R10159 += 1, R10160 += 1 };
  s3 -> s3 [0, 65535] { R12730 += 1, R12685 += 1, R12686 += 1 };
  s3 -> s4 [70, 70] { R12730 += 1, R12686 += 1, R10159 += 1, R10160 += 1 };
  s3 -> s5 [70, 70] { R12730 += 1, R12686 += 1, R10160 += 1, R10161 += 1 };
  s3 -> s6 [70, 70] { R12730 += 1, R12686 += 1, R10159 += 1, R10160 += 1 };
  s3 -> s7 [70, 70] { R12730 += 1, R12686 += 1, R10160 += 1, R10161 += 1 };
  s3 -> s1 [71, 65535] { R12730 += 1, R12686 += 1, R10160 += 1, R10161 += 1 };
  s3 -> s2 [71, 65535] { R12730 += 1, R12686 += 1, R10159 += 1, R10160 += 1 };
  s5 -> s5 [0, 65535] { R12730 += 1, R12686 += 1, R10160 += 1, R10161 += 1 };
  s5 -> s8 [0, 65535] { R12730 += 1, R12686 += 1 };
  s6 -> s5 [0, 65535] { R12730 += 1, R12686 += 1, R10160 += 1, R10161 += 1 };
  s6 -> s6 [0, 65535] { R12730 += 1, R12686 += 1, R10159 += 1, R10160 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [0, 65535] { R12730 += 1 };
  s8 -> s8 [0, 65535] { R12730 += 1, R12686 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R12730 += 1 };
  s11 -> s11 [0, 69] { R12730 += 1, R12686 += 1 };
  s11 -> s11 [0, 65535] { R12730 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s12 [70, 70] { R12730 += 1, R12686 += 1 };
  s11 -> s8 [70, 70] { R12730 += 1, R12686 += 1 };
  s11 -> s11 [71, 65535] { R12730 += 1, R12686 += 1 };
  s12 -> s12 [0, 65535] { R12730 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 69] { R12732 += 1, R12688 += 1, R12397 += 1, R12398 += 1 };
  s0 -> s2 [0, 69] { R12732 += 1, R12688 += 1, R12398 += 1, R12400 += 1 };
  s0 -> s3 [0, 69] { R12732 += 1, R12688 += 1, R12398 += 1, R12399 += 1, R12400 += 1 };
  s0 -> s4 [0, 65535] { R12732 += 1, R12687 += 1, R12688 += 1 };
  s0 -> s0 [0, 65535] { R12731 += 1, R12732 += 1 };
  s0 -> s5 [70, 70] { R12732 += 1, R12688 += 1, R12398 += 1, R12399 += 1, R12400 += 1 };
  s0 -> s6 [70, 70] { R12732 += 1, R12688 += 1, R12397 += 1, R12398 += 1 };
  s0 -> s7 [70, 70] { R12732 += 1, R12688 += 1, R12398 += 1, R12400 += 1 };
  s0 -> s8 [70, 70] { R12732 += 1, R12688 += 1, R12397 += 1, R12398 += 1 };
  s0 -> s9 [70, 70] { R12732 += 1, R12688 += 1, R12398 += 1, R12399 += 1, R12400 += 1 };
  s0 -> s10 [70, 70] { R12732 += 1, R12688 += 1, R12398 += 1, R12400 += 1 };
  s0 -> s2 [71, 74] { R12732 += 1, R12688 += 1, R12398 += 1, R12400 += 1 };
  s0 -> s1 [71, 65535] { R12732 += 1, R12688 += 1, R12397 += 1, R12398 += 1 };
  s0 -> s3 [71, 65535] { R12732 += 1, R12688 += 1, R12398 += 1, R12399 += 1, R12400 += 1 };
  s0 -> s2 [76, 65535] { R12732 += 1, R12688 += 1, R12398 += 1, R12400 += 1 };
  s1 -> s1 [0, 69] { R12732 += 1, R12688 += 1, R12397 += 1, R12398 += 1 };
  s1 -> s2 [0, 69] { R12732 += 1, R12688 += 1, R12398 += 1, R12400 += 1 };
  s1 -> s3 [0, 69] { R12732 += 1, R12688 += 1, R12398 += 1, R12399 += 1, R12400 += 1 };
  s1 -> s5 [70, 70] { R12732 += 1, R12688 += 1, R12398 += 1, R12399 += 1, R12400 += 1 };
  s1 -> s6 [70, 70] { R12732 += 1, R12688 += 1, R12397 += 1, R12398 += 1 };
  s1 -> s7 [70, 70] { R12732 += 1, R12688 += 1, R12398 += 1, R12400 += 1 };
  s1 -> s8 [70, 70] { R12732 += 1, R12688 += 1, R12397 += 1, R12398 += 1 };
  s1 -> s9 [70, 70] { R12732 += 1, R12688 += 1, R12398 += 1, R12399 += 1, R12400 += 1 };
  s1 -> s10 [70, 70] { R12732 += 1, R12688 += 1, R12398 += 1, R12400 += 1 };
  s1 -> s2 [71, 74] { R12732 += 1, R12688 += 1, R12398 += 1, R12400 += 1 };
  s1 -> s1 [71, 65535] { R12732 += 1, R12688 += 1, R12397 += 1, R12398 += 1 };
  s1 -> s3 [71, 65535] { R12732 += 1, R12688 += 1, R12398 += 1, R12399 += 1, R12400 += 1 };
  s1 -> s2 [76, 65535] { R12732 += 1, R12688 += 1, R12398 += 1, R12400 += 1 };
  s2 -> s2 [0, 69] { R12732 += 1, R12688 += 1, R12398 += 1, R12400 += 1 };
  s2 -> s2 [0, 65535] { R12732 += 1 };
  s2 -> s11 [0, 65535];
  s2 -> s7 [70, 70] { R12732 += 1, R12688 += 1, R12398 += 1, R12400 += 1 };
  s2 -> s10 [70, 70] { R12732 += 1, R12688 += 1, R12398 += 1, R12400 += 1 };
  s2 -> s2 [71, 74] { R12732 += 1, R12688 += 1, R12398 += 1, R12400 += 1 };
  s2 -> s2 [76, 65535] { R12732 += 1, R12688 += 1, R12398 += 1, R12400 += 1 };
  s3 -> s2 [0, 69] { R12732 += 1, R12688 += 1, R12398 += 1, R12400 += 1 };
  s3 -> s3 [0, 69] { R12732 += 1, R12688 += 1, R12398 += 1, R12399 += 1, R12400 += 1 };
  s3 -> s5 [70, 70] { R12732 += 1, R12688 += 1, R12398 += 1, R12399 += 1, R12400 += 1 };
  s3 -> s7 [70, 70] { R12732 += 1, R12688 += 1, R12398 += 1, R12400 += 1 };
  s3 -> s9 [70, 70] { R12732 += 1, R12688 += 1, R12398 += 1, R12399 += 1, R12400 += 1 };
  s3 -> s10 [70, 70] { R12732 += 1, R12688 += 1, R12398 += 1, R12400 += 1 };
  s3 -> s2 [71, 74] { R12732 += 1, R12688 += 1, R12398 += 1, R12400 += 1 };
  s3 -> s3 [71, 65535] { R12732 += 1, R12688 += 1, R12398 += 1, R12399 += 1, R12400 += 1 };
  s3 -> s2 [76, 65535] { R12732 += 1, R12688 += 1, R12398 += 1, R12400 += 1 };
  s4 -> s1 [0, 69] { R12732 += 1, R12688 += 1, R12397 += 1, R12398 += 1 };
  s4 -> s2 [0, 69] { R12732 += 1, R12688 += 1, R12398 += 1, R12400 += 1 };
  s4 -> s3 [0, 69] { R12732 += 1, R12688 += 1, R12398 += 1, R12399 += 1, R12400 += 1 };
  s4 -> s4 [0, 65535] { R12732 += 1, R12687 += 1, R12688 += 1 };
  s4 -> s5 [70, 70] { R12732 += 1, R12688 += 1, R12398 += 1, R12399 += 1, R12400 += 1 };
  s4 -> s6 [70, 70] { R12732 += 1, R12688 += 1, R12397 += 1, R12398 += 1 };
  s4 -> s7 [70, 70] { R12732 += 1, R12688 += 1, R12398 += 1, R12400 += 1 };
  s4 -> s8 [70, 70] { R12732 += 1, R12688 += 1, R12397 += 1, R12398 += 1 };
  s4 -> s9 [70, 70] { R12732 += 1, R12688 += 1, R12398 += 1, R12399 += 1, R12400 += 1 };
  s4 -> s10 [70, 70] { R12732 += 1, R12688 += 1, R12398 += 1, R12400 += 1 };
  s4 -> s2 [71, 74] { R12732 += 1, R12688 += 1, R12398 += 1, R12400 += 1 };
  s4 -> s1 [71, 65535] { R12732 += 1, R12688 += 1, R12397 += 1, R12398 += 1 };
  s4 -> s3 [71, 65535] { R12732 += 1, R12688 += 1, R12398 += 1, R12399 += 1, R12400 += 1 };
  s4 -> s2 [76, 65535] { R12732 += 1, R12688 += 1, R12398 += 1, R12400 += 1 };
  s6 -> s10 [0, 74] { R12732 += 1, R12688 += 1, R12398 += 1, R12400 += 1 };
  s6 -> s6 [0, 65535] { R12732 += 1, R12688 += 1, R12397 += 1, R12398 += 1 };
  s6 -> s9 [0, 65535] { R12732 += 1, R12688 += 1, R12398 += 1, R12399 += 1, R12400 += 1 };
  s6 -> s10 [76, 65535] { R12732 += 1, R12688 += 1, R12398 += 1, R12400 += 1 };
  s7 -> s7 [0, 65535] { R12732 += 1 };
  s7 -> s11 [0, 65535];
  s9 -> s10 [0, 74] { R12732 += 1, R12688 += 1, R12398 += 1, R12400 += 1 };
  s9 -> s9 [0, 65535] { R12732 += 1, R12688 += 1, R12398 += 1, R12399 += 1, R12400 += 1 };
  s9 -> s10 [76, 65535] { R12732 += 1, R12688 += 1, R12398 += 1, R12400 += 1 };
  s10 -> s10 [0, 74] { R12732 += 1, R12688 += 1, R12398 += 1, R12400 += 1 };
  s10 -> s11 [0, 65535];
  s10 -> s10 [0, 65535] { R12732 += 1 };
  s10 -> s10 [76, 65535] { R12732 += 1, R12688 += 1, R12398 += 1, R12400 += 1 };
  s11 -> s11 [0, 65535];
  accepting s2, s7, s10, s11;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 69] { R12734 += 1, R12690 += 1, R12625 += 1, R12626 += 1 };
  s0 -> s0 [0, 65535] { R12733 += 1, R12734 += 1 };
  s0 -> s2 [0, 65535] { R12734 += 1, R12689 += 1, R12690 += 1 };
  s0 -> s3 [70, 70] { R12734 += 1, R12690 += 1, R12625 += 1, R12626 += 1 };
  s0 -> s4 [70, 70] { R12734 += 1, R12690 += 1, R12625 += 1, R12626 += 1 };
  s0 -> s1 [71, 65535] { R12734 += 1, R12690 += 1, R12625 += 1, R12626 += 1 };
  s1 -> s1 [0, 69] { R12734 += 1, R12690 += 1, R12625 += 1, R12626 += 1 };
  s1 -> s1 [0, 65535] { R12734 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [70, 70] { R12734 += 1, R12690 += 1, R12625 += 1, R12626 += 1 };
  s1 -> s4 [70, 70] { R12734 += 1, R12690 += 1, R12625 += 1, R12626 += 1 };
  s1 -> s1 [71, 65535] { R12734 += 1, R12690 += 1, R12625 += 1, R12626 += 1 };
  s2 -> s1 [0, 69] { R12734 += 1, R12690 += 1, R12625 += 1, R12626 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R12734 += 1, R12689 += 1, R12690 += 1 };
  s2 -> s3 [70, 70] { R12734 += 1, R12690 += 1, R12625 += 1, R12626 += 1 };
  s2 -> s4 [70, 70] { R12734 += 1, R12690 += 1, R12625 += 1, R12626 += 1 };
  s2 -> s1 [71, 65535] { R12734 += 1, R12690 += 1, R12625 += 1, R12626 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R12734 += 1 };
  s3 -> s3 [0, 65535] { R12734 += 1, R12690 += 1, R12625 += 1, R12626 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R12734 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R12734 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [102, 102];
  accepting s1;
};
};
constraint R2 = R12652 && R3 = R12734 && R23 - R12734 = -1 && R24 = R12734 && R25 - R12734 = -1 && R26 = R12734 && R27 = 0 && R28 = 1 && R29 = 0 && R30 = 1 && R45 + R84 + R83 + -1*R12402 + -1*R12398 - R66 = 0 && R49 + R89 + R87 = 0 && R50 + R90 + R88 + -1*R12402 + -1*R12398 - R66 = 0 && R55 + R96 + R93 + -1*R12404 + -1*R12400 - R68 = 0 && R65 + R12401 + R12397 = 0 && R67 + R12403 + R12399 = 0 && R12651 = 0 && R12675 = 0 && R12676 = 0 && R12681 = 0 && R12682 = 0 && R12685 = 0 && R12686 = 0 && R12687 = 0 && R12688 = 0 && R12691 = 0 && R12692 = R12734 && R12693 = 0 && R12694 = R12734 && R12695 = 0 && R12696 = R12734 && R12697 = 0 && R12698 = R12734 && R12699 = 0 && R12700 = R12734 && R12701 = 0 && R12702 = R12734 && R12703 = 0 && R12704 = R12734 && R12705 = 0 && R12706 = R12734 && R12707 = 0 && R12708 = R12734 && R12709 = 0 && R12710 = R12734 && R12711 = 0 && R12712 = R12734 && R12713 = 0 && R12714 = R12734 && R12715 = 0 && R12716 = R12734 && R12717 = 0 && R12718 = R12734 && R12719 = 0 && R12720 = R12734 && R12721 = 0 && R12722 = R12734 && R12723 = 0 && R12724 = R12734 && R12725 = 0 && R12726 = R12734 && R12727 = 0 && R12728 = R12734 && R12729 = 0 && R12730 = R12734 && R12731 = 0 && R12732 = R12734 && R12733 = 0 && R12 < 1 && R15 < 1 && R16 < 1 && R47 + R86 + R85 < 1 && R61 + R10164 + R10161 < 1 && -1*R12402 + -1*R12398 - R66 < 1 && -1*R12404 + -1*R12400 - R68 < 1 && -1 < R12652 && 0 < R12734 && (R53 + R94 + R91 != 0 || R54 + R95 + R92 + -1*R12402 + -1*R12398 - R66 = 0 || R66 + R12402 + R12398 < 1) && (R59 + R10162 + R10159 != 0 || R60 + R10163 + R10160 + -1*R12402 + -1*R12398 - R66 = 0 || R66 + R12402 + R12398 < 1) && (R66 + R12402 + R12398 != 0 || ((R53 + R94 + R91 != 0 || R54 + R95 + R92 = 0 || R68 + R12404 + R12400 < 1) && (R53 + R94 + R91 = 0 || R68 + R12404 + R12400 < 1))) && (R66 + R12402 + R12398 != 0 || ((R59 + R10162 + R10159 != 0 || R60 + R10163 + R10160 = 0 || R68 + R12404 + R12400 < 1) && (R59 + R10162 + R10159 = 0 || R68 + R12404 + R12400 < 1))) && (R66 + R12402 + R12398 != 0 || ((R73 + R12630 + R12625 != 0 || R74 + R12631 + R12626 = 0 || R68 + R12404 + R12400 < 1) && (R73 + R12630 + R12625 = 0 || R68 + R12404 + R12400 < 1))) && (R68 + R12404 + R12400 != 0 || R77 + R12634 + R12629 = 0 || (R75 + R12632 + R12627 = 0 && R76 + R12633 + R12628 = 0)) && (R73 + R12630 + R12625 != 0 || R66 + R12402 + R12398 + -1*R12631 + -1*R12626 - R74 = 0 || R66 + R12402 + R12398 < 1) && (R75 + R12632 + R12627 != 0 || R68 + R12404 + R12400 + -1*R12633 + -1*R12628 - R76 = 0 || R68 + R12404 + R12400 < 1) && (R12635 != 0 || R12636 = R12652 || (R20 = 0 && R12652 = 0)) && (R12637 != 0 || R12638 = R12652 || (R20 = 0 && R12652 = 0)) && (R12639 != 0 || R12640 = R12652 || (R20 = 0 && R12652 = 0)) && (R12641 != 0 || R12642 = R12652 || (R20 = 0 && R12652 = 0)) && (R12643 != 0 || R12644 = R12652 || (R20 = 0 && R12652 = 0)) && (R12645 != 0 || R12646 = R12652 || (R20 = 0 && R12652 = 0)) && (R12647 != 0 || R12648 = R12652 || (R20 = 0 && R12652 = 0)) && (R12649 != 0 || R12650 = R12652 || (R20 = 0 && R12652 = 0)) && (R12653 != 0 || R12652 = R12654 || (R20 = 0 && R12652 = 0)) && (R21 = 0 || (R12673 = 0 && R12674 = 0)) && (R21 = 0 || (R12677 = 0 && R12678 = 0)) && (R21 = 0 || (R12679 = 0 && R12680 = 0)) && (R21 = 0 || (R12683 = 0 && R12684 = 0)) && (R21 = 0 || (R12689 = 0 && R12690 = 0)) && (R22 = 0 || (R12655 = 0 && R12656 = 0)) && (R22 = 0 || (R12657 = 0 && R12658 = 0)) && (R22 = 0 || (R12659 = 0 && R12660 = 0)) && (R22 = 0 || (R12661 = 0 && R12662 = 0)) && (R22 = 0 || (R12663 = 0 && R12664 = 0)) && (R22 = 0 || (R12665 = 0 && R12666 = 0)) && (R22 = 0 || (R12667 = 0 && R12668 = 0)) && (R22 = 0 || (R12669 = 0 && R12670 = 0)) && (R22 = 0 || (R12671 = 0 && R12672 = 0)) && (R53 + R94 + R91 = 0 || R66 + R12402 + R12398 < 1) && (R59 + R10162 + R10159 = 0 || R66 + R12402 + R12398 < 1) && (R73 + R12630 + R12625 = 0 || R66 + R12402 + R12398 < 1) && (R75 + R12632 + R12627 = 0 || R68 + R12404 + R12400 < 1) && (R12635 = 0 || (R20 = 0 && R12652 = 0)) && (R12637 = 0 || (R20 = 0 && R12652 = 0)) && (R12639 = 0 || (R20 = 0 && R12652 = 0)) && (R12641 = 0 || (R20 = 0 && R12652 = 0)) && (R12643 = 0 || (R20 = 0 && R12652 = 0)) && (R12645 = 0 || (R20 = 0 && R12652 = 0)) && (R12647 = 0 || (R20 = 0 && R12652 = 0)) && (R12649 = 0 || (R20 = 0 && R12652 = 0)) && (R12653 = 0 || (R20 = 0 && R12652 = 0));
// End of Parikh automata intersection problem
