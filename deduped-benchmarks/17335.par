// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R100, R101, R102, R103, R104, R105, R106, R107, R108, R109, R11, R110, R111, R112, R113, R114, R115, R116, R117, R118, R119, R12, R120, R121, R122, R123, R124, R125, R126, R127, R128, R16, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R3, R31, R33, R35, R36, R39, R4, R40, R41, R45, R46, R47, R48, R49, R50, R51, R52, R53, R54, R55, R56, R57, R58, R59, R60, R61, R62, R63, R64, R65, R66, R67, R68, R69, R70, R71, R72, R73, R74, R75, R76, R77, R78, R79, R8, R80, R81, R82, R83, R84, R85, R86, R87, R88, R89, R90, R91, R92, R93, R94, R95, R96, R97, R98, R99;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 72];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [73, 73];
  s0 -> s1 [74, 65535];
  s1 -> s1 [0, 72];
  s1 -> s2 [73, 73];
  s1 -> s1 [74, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R20 += 1 };
  s0 -> s0 [0, 65535] { R19 += 1, R20 += 1 };
  s0 -> s2 [9, 13] { R20 += 1 };
  s0 -> s1 [14, 31] { R20 += 1 };
  s0 -> s2 [32, 32] { R20 += 1 };
  s0 -> s1 [33, 65535] { R20 += 1 };
  s1 -> s1 [0, 65535] { R20 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R20 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R22 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R21 += 1, R22 += 1 };
  s1 -> s1 [0, 65535] { R22 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R24 += 1 };
  s0 -> s0 [0, 65535] { R23 += 1, R24 += 1 };
  s0 -> s2 [9, 13] { R24 += 1 };
  s0 -> s1 [14, 31] { R24 += 1 };
  s0 -> s2 [32, 32] { R24 += 1 };
  s0 -> s1 [33, 65535] { R24 += 1 };
  s1 -> s1 [0, 65535] { R24 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R24 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R25 += 1, R26 += 1 };
  s1 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R74 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R73 += 1, R74 += 1 };
  s1 -> s1 [0, 65535] { R74 += 1, R18 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 72] { R76 += 1 };
  s0 -> s0 [0, 65535] { R75 += 1, R76 += 1 };
  s0 -> s2 [73, 73] { R76 += 1 };
  s0 -> s3 [73, 73] { R76 += 1 };
  s0 -> s1 [91, 65535] { R76 += 1 };
  s1 -> s1 [0, 72] { R76 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R76 += 1 };
  s1 -> s3 [73, 73] { R76 += 1 };
  s1 -> s1 [91, 65535] { R76 += 1 };
  s2 -> s2 [0, 73] { R76 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [91, 65535] { R76 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 72] { R78 += 1, R31 += 1 };
  s0 -> s0 [0, 65535] { R77 += 1, R78 += 1 };
  s0 -> s2 [73, 73] { R78 += 1, R31 += 1 };
  s0 -> s3 [73, 73] { R78 += 1, R31 += 1 };
  s0 -> s1 [74, 65535] { R78 += 1, R31 += 1 };
  s1 -> s1 [0, 72] { R78 += 1, R31 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R78 += 1, R31 += 1 };
  s1 -> s3 [73, 73] { R78 += 1, R31 += 1 };
  s1 -> s1 [74, 65535] { R78 += 1, R31 += 1 };
  s2 -> s2 [0, 65535] { R78 += 1, R31 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 72] { R80 += 1, R33 += 1 };
  s0 -> s0 [0, 65535] { R79 += 1, R80 += 1 };
  s0 -> s2 [73, 73] { R80 += 1, R33 += 1 };
  s0 -> s3 [73, 73] { R80 += 1, R33 += 1 };
  s0 -> s1 [74, 65535] { R80 += 1, R33 += 1 };
  s1 -> s1 [0, 72] { R80 += 1, R33 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R80 += 1, R33 += 1 };
  s1 -> s3 [73, 73] { R80 += 1, R33 += 1 };
  s1 -> s1 [74, 65535] { R80 += 1, R33 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R80 += 1, R33 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 72] { R82 += 1, R35 += 1, R36 += 1 };
  s0 -> s0 [0, 65535] { R81 += 1, R82 += 1 };
  s0 -> s2 [73, 73] { R82 += 1, R35 += 1, R36 += 1 };
  s0 -> s3 [73, 73] { R82 += 1, R35 += 1, R36 += 1 };
  s0 -> s1 [74, 65535] { R82 += 1, R35 += 1, R36 += 1 };
  s1 -> s1 [0, 72] { R82 += 1, R35 += 1, R36 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R82 += 1, R35 += 1, R36 += 1 };
  s1 -> s3 [73, 73] { R82 += 1, R35 += 1, R36 += 1 };
  s1 -> s1 [74, 65535] { R82 += 1, R35 += 1, R36 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R82 += 1, R35 += 1, R36 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 72] { R84 += 1, R39 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R83 += 1, R84 += 1 };
  s0 -> s2 [73, 73] { R84 += 1, R39 += 1, R40 += 1 };
  s0 -> s3 [73, 73] { R84 += 1, R39 += 1, R40 += 1 };
  s0 -> s1 [74, 65535] { R84 += 1, R39 += 1, R40 += 1 };
  s1 -> s1 [0, 72] { R84 += 1, R39 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R84 += 1, R39 += 1, R40 += 1 };
  s1 -> s3 [73, 73] { R84 += 1, R39 += 1, R40 += 1 };
  s1 -> s1 [74, 65535] { R84 += 1, R39 += 1, R40 += 1 };
  s2 -> s2 [0, 65535] { R84 += 1, R39 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 72] { R98 += 1 };
  s0 -> s0 [0, 65535] { R97 += 1, R98 += 1 };
  s0 -> s2 [73, 73] { R98 += 1 };
  s0 -> s1 [74, 65535] { R98 += 1 };
  s1 -> s1 [0, 72] { R98 += 1 };
  s1 -> s2 [73, 73] { R98 += 1 };
  s1 -> s1 [74, 65535] { R98 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R98 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_15 {
  init s0;
  s0 -> s0 [0, 65535] { R99 += 1, R100 += 1 };
  s0 -> s1 [0, 65535] { R100 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R100 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 72] { R102 += 1 };
  s0 -> s0 [0, 65535] { R101 += 1, R102 += 1 };
  s0 -> s2 [0, 65535] { R102 += 1, R8 += 1 };
  s0 -> s3 [73, 73] { R102 += 1 };
  s0 -> s1 [74, 65535] { R102 += 1 };
  s1 -> s1 [0, 72] { R102 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [73, 73] { R102 += 1 };
  s1 -> s1 [74, 65535] { R102 += 1 };
  s2 -> s1 [0, 72] { R102 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R102 += 1, R8 += 1 };
  s2 -> s3 [73, 73] { R102 += 1 };
  s2 -> s1 [74, 65535] { R102 += 1 };
  s3 -> s3 [0, 65535] { R102 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 72] { R104 += 1, R60 += 1 };
  s0 -> s0 [0, 65535] { R103 += 1, R104 += 1 };
  s0 -> s2 [0, 65535] { R104 += 1, R59 += 1, R60 += 1 };
  s0 -> s1 [74, 65535] { R104 += 1, R60 += 1 };
  s1 -> s1 [0, 72] { R104 += 1, R60 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R104 += 1 };
  s1 -> s1 [74, 65535] { R104 += 1, R60 += 1 };
  s2 -> s1 [0, 72] { R104 += 1, R60 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R104 += 1, R59 += 1, R60 += 1 };
  s2 -> s1 [74, 65535] { R104 += 1, R60 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R105 += 1, R106 += 1 };
  s0 -> s1 [0, 65535] { R106 += 1, R61 += 1, R62 += 1 };
  s0 -> s2 [0, 65535] { R106 += 1, R62 += 1, R16 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R106 += 1, R61 += 1, R62 += 1 };
  s1 -> s2 [0, 65535] { R106 += 1, R62 += 1, R16 += 1 };
  s2 -> s3 [0, 65535] { R106 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R106 += 1, R62 += 1, R16 += 1 };
  s3 -> s3 [0, 65535] { R106 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 73] { R108 += 1, R64 += 1 };
  s0 -> s2 [0, 65535] { R108 += 1, R63 += 1, R64 += 1 };
  s0 -> s0 [0, 65535] { R107 += 1, R108 += 1 };
  s0 -> s1 [90, 65535] { R108 += 1, R64 += 1 };
  s1 -> s1 [0, 73] { R108 += 1, R64 += 1 };
  s1 -> s1 [0, 65535] { R108 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [90, 65535] { R108 += 1, R64 += 1 };
  s2 -> s1 [0, 73] { R108 += 1, R64 += 1 };
  s2 -> s2 [0, 65535] { R108 += 1, R63 += 1, R64 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [90, 65535] { R108 += 1, R64 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 65535] { R110 += 1, R65 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R109 += 1, R110 += 1 };
  s0 -> s2 [0, 65535] { R110 += 1, R66 += 1, R46 += 1 };
  s1 -> s1 [0, 65535] { R110 += 1, R65 += 1, R66 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R110 += 1, R66 += 1, R46 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R110 += 1 };
  s2 -> s2 [0, 65535] { R110 += 1, R66 += 1, R46 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R110 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 89] { R112 += 1, R68 += 1 };
  s0 -> s0 [0, 65535] { R111 += 1, R112 += 1 };
  s0 -> s2 [0, 65535] { R112 += 1, R67 += 1, R68 += 1 };
  s0 -> s3 [0, 65535] { R112 += 1, R68 += 1, R48 += 1 };
  s0 -> s1 [91, 65535] { R112 += 1, R68 += 1 };
  s1 -> s1 [0, 89] { R112 += 1, R68 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R112 += 1 };
  s1 -> s1 [91, 65535] { R112 += 1, R68 += 1 };
  s2 -> s1 [0, 89] { R112 += 1, R68 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R112 += 1, R67 += 1, R68 += 1 };
  s2 -> s3 [0, 65535] { R112 += 1, R68 += 1, R48 += 1 };
  s2 -> s1 [91, 65535] { R112 += 1, R68 += 1 };
  s3 -> s1 [0, 89] { R112 += 1, R68 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R112 += 1, R68 += 1, R48 += 1 };
  s3 -> s5 [0, 65535] { R112 += 1 };
  s3 -> s1 [91, 65535] { R112 += 1, R68 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R112 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 65535] { R114 += 1, R70 += 1, R52 += 1 };
  s0 -> s2 [0, 65535] { R114 += 1, R69 += 1, R70 += 1 };
  s0 -> s0 [0, 65535] { R113 += 1, R114 += 1 };
  s0 -> s3 [0, 65535] { R114 += 1, R70 += 1 };
  s1 -> s1 [0, 65535] { R114 += 1, R70 += 1, R52 += 1 };
  s1 -> s3 [0, 65535] { R114 += 1, R70 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R114 += 1 };
  s2 -> s1 [0, 65535] { R114 += 1, R70 += 1, R52 += 1 };
  s2 -> s2 [0, 65535] { R114 += 1, R69 += 1, R70 += 1 };
  s2 -> s3 [0, 65535] { R114 += 1, R70 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R114 += 1, R70 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R114 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R114 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R116 += 1, R72 += 1, R57 += 1, R58 += 1 };
  s0 -> s2 [0, 65535] { R116 += 1, R71 += 1, R72 += 1 };
  s0 -> s3 [0, 65535] { R116 += 1, R72 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R115 += 1, R116 += 1 };
  s1 -> s4 [0, 65535] { R116 += 1 };
  s1 -> s1 [0, 65535] { R116 += 1, R72 += 1, R57 += 1, R58 += 1 };
  s1 -> s6 [0, 65535] { R116 += 1, R72 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R116 += 1, R72 += 1, R57 += 1, R58 += 1 };
  s2 -> s2 [0, 65535] { R116 += 1, R71 += 1, R72 += 1 };
  s2 -> s3 [0, 65535] { R116 += 1, R72 += 1, R56 += 1, R57 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s4 [0, 65535] { R116 += 1 };
  s3 -> s1 [0, 65535] { R116 += 1, R72 += 1, R57 += 1, R58 += 1 };
  s3 -> s3 [0, 65535] { R116 += 1, R72 += 1, R56 += 1, R57 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R116 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R116 += 1 };
  s6 -> s6 [0, 65535] { R116 += 1, R72 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s0 [0, 65535] { R117 += 1, R118 += 1 };
  s0 -> s1 [0, 65535] { R118 += 1, R85 += 1, R86 += 1 };
  s0 -> s2 [0, 65535] { R118 += 1, R86 += 1, R17 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R118 += 1, R85 += 1, R86 += 1 };
  s1 -> s2 [0, 65535] { R118 += 1, R86 += 1, R17 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R118 += 1 };
  s2 -> s2 [0, 65535] { R118 += 1, R86 += 1, R17 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R118 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 72] { R120 += 1, R88 += 1 };
  s0 -> s0 [0, 65535] { R119 += 1, R120 += 1 };
  s0 -> s2 [0, 65535] { R120 += 1, R87 += 1, R88 += 1 };
  s0 -> s3 [73, 73] { R120 += 1, R88 += 1 };
  s0 -> s4 [73, 73] { R120 += 1, R88 += 1 };
  s0 -> s5 [90, 90] { R120 += 1, R88 += 1 };
  s0 -> s1 [91, 65535] { R120 += 1, R88 += 1 };
  s1 -> s1 [0, 72] { R120 += 1, R88 += 1 };
  s1 -> s3 [73, 73] { R120 += 1, R88 += 1 };
  s1 -> s4 [73, 73] { R120 += 1, R88 += 1 };
  s1 -> s5 [90, 90] { R120 += 1, R88 += 1 };
  s1 -> s1 [91, 65535] { R120 += 1, R88 += 1 };
  s2 -> s1 [0, 72] { R120 += 1, R88 += 1 };
  s2 -> s2 [0, 65535] { R120 += 1, R87 += 1, R88 += 1 };
  s2 -> s3 [73, 73] { R120 += 1, R88 += 1 };
  s2 -> s4 [73, 73] { R120 += 1, R88 += 1 };
  s2 -> s5 [90, 90] { R120 += 1, R88 += 1 };
  s2 -> s1 [91, 65535] { R120 += 1, R88 += 1 };
  s4 -> s4 [0, 73] { R120 += 1, R88 += 1 };
  s4 -> s8 [90, 90] { R120 += 1, R88 += 1 };
  s4 -> s4 [91, 65535] { R120 += 1, R88 += 1 };
  s5 -> s5 [0, 72] { R120 += 1, R88 += 1 };
  s5 -> s5 [0, 65535] { R120 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [73, 73] { R120 += 1, R88 += 1 };
  s5 -> s8 [73, 73] { R120 += 1, R88 += 1 };
  s5 -> s5 [90, 65535] { R120 += 1, R88 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R120 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 73] { R120 += 1, R88 += 1 };
  s8 -> s8 [0, 65535] { R120 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [90, 65535] { R120 += 1, R88 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 72] { R122 += 1, R90 += 1, R45 += 1 };
  s0 -> s2 [0, 65535] { R122 += 1, R89 += 1, R90 += 1 };
  s0 -> s0 [0, 65535] { R121 += 1, R122 += 1 };
  s0 -> s3 [73, 73] { R122 += 1, R90 += 1, R45 += 1 };
  s0 -> s4 [73, 73] { R122 += 1, R90 += 1, R45 += 1 };
  s0 -> s1 [74, 65535] { R122 += 1, R90 += 1, R45 += 1 };
  s1 -> s1 [0, 72] { R122 += 1, R90 += 1, R45 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R122 += 1 };
  s1 -> s3 [73, 73] { R122 += 1, R90 += 1, R45 += 1 };
  s1 -> s4 [73, 73] { R122 += 1, R90 += 1, R45 += 1 };
  s1 -> s1 [74, 65535] { R122 += 1, R90 += 1, R45 += 1 };
  s2 -> s1 [0, 72] { R122 += 1, R90 += 1, R45 += 1 };
  s2 -> s2 [0, 65535] { R122 += 1, R89 += 1, R90 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R122 += 1, R90 += 1, R45 += 1 };
  s2 -> s4 [73, 73] { R122 += 1, R90 += 1, R45 += 1 };
  s2 -> s1 [74, 65535] { R122 += 1, R90 += 1, R45 += 1 };
  s3 -> s6 [0, 65535] { R122 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R122 += 1, R90 += 1, R45 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R122 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R122 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 72] { R124 += 1, R92 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R123 += 1, R124 += 1 };
  s0 -> s2 [0, 65535] { R124 += 1, R91 += 1, R92 += 1 };
  s0 -> s3 [73, 73] { R124 += 1, R92 += 1, R47 += 1 };
  s0 -> s4 [73, 73] { R124 += 1, R92 += 1, R47 += 1 };
  s0 -> s1 [74, 65535] { R124 += 1, R92 += 1, R47 += 1 };
  s1 -> s1 [0, 72] { R124 += 1, R92 += 1, R47 += 1 };
  s1 -> s1 [0, 65535] { R124 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R124 += 1, R92 += 1, R47 += 1 };
  s1 -> s4 [73, 73] { R124 += 1, R92 += 1, R47 += 1 };
  s1 -> s1 [74, 65535] { R124 += 1, R92 += 1, R47 += 1 };
  s2 -> s1 [0, 72] { R124 += 1, R92 += 1, R47 += 1 };
  s2 -> s2 [0, 65535] { R124 += 1, R91 += 1, R92 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R124 += 1, R92 += 1, R47 += 1 };
  s2 -> s4 [73, 73] { R124 += 1, R92 += 1, R47 += 1 };
  s2 -> s1 [74, 65535] { R124 += 1, R92 += 1, R47 += 1 };
  s3 -> s3 [0, 65535] { R124 += 1, R92 += 1, R47 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R124 += 1 };
  s4 -> s4 [0, 65535] { R124 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R124 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 72] { R126 += 1, R94 += 1, R50 += 1 };
  s0 -> s2 [0, 72] { R126 += 1, R94 += 1, R49 += 1, R50 += 1 };
  s0 -> s0 [0, 65535] { R125 += 1, R126 += 1 };
  s0 -> s3 [0, 65535] { R126 += 1, R93 += 1, R94 += 1 };
  s0 -> s4 [73, 73] { R126 += 1, R94 += 1, R49 += 1, R50 += 1 };
  s0 -> s5 [73, 73] { R126 += 1, R94 += 1, R50 += 1 };
  s0 -> s6 [73, 73] { R126 += 1, R94 += 1, R49 += 1, R50 += 1 };
  s0 -> s7 [73, 73] { R126 += 1, R94 += 1, R50 += 1 };
  s0 -> s1 [74, 89] { R126 += 1, R94 += 1, R50 += 1 };
  s0 -> s2 [74, 65535] { R126 += 1, R94 += 1, R49 += 1, R50 += 1 };
  s0 -> s8 [90, 90] { R126 += 1, R94 += 1, R50 += 1 };
  s0 -> s1 [91, 65535] { R126 += 1, R94 += 1, R50 += 1 };
  s1 -> s1 [0, 72] { R126 += 1, R94 += 1, R50 += 1 };
  s1 -> s5 [73, 73] { R126 += 1, R94 += 1, R50 += 1 };
  s1 -> s7 [73, 73] { R126 += 1, R94 += 1, R50 += 1 };
  s1 -> s1 [74, 89] { R126 += 1, R94 += 1, R50 += 1 };
  s1 -> s8 [90, 90] { R126 += 1, R94 += 1, R50 += 1 };
  s1 -> s1 [91, 65535] { R126 += 1, R94 += 1, R50 += 1 };
  s2 -> s1 [0, 72] { R126 += 1, R94 += 1, R50 += 1 };
  s2 -> s2 [0, 72] { R126 += 1, R94 += 1, R49 += 1, R50 += 1 };
  s2 -> s4 [73, 73] { R126 += 1, R94 += 1, R49 += 1, R50 += 1 };
  s2 -> s5 [73, 73] { R126 += 1, R94 += 1, R50 += 1 };
  s2 -> s6 [73, 73] { R126 += 1, R94 += 1, R49 += 1, R50 += 1 };
  s2 -> s7 [73, 73] { R126 += 1, R94 += 1, R50 += 1 };
  s2 -> s1 [74, 89] { R126 += 1, R94 += 1, R50 += 1 };
  s2 -> s2 [74, 65535] { R126 += 1, R94 += 1, R49 += 1, R50 += 1 };
  s2 -> s8 [90, 90] { R126 += 1, R94 += 1, R50 += 1 };
  s2 -> s1 [91, 65535] { R126 += 1, R94 += 1, R50 += 1 };
  s3 -> s1 [0, 72] { R126 += 1, R94 += 1, R50 += 1 };
  s3 -> s2 [0, 72] { R126 += 1, R94 += 1, R49 += 1, R50 += 1 };
  s3 -> s3 [0, 65535] { R126 += 1, R93 += 1, R94 += 1 };
  s3 -> s4 [73, 73] { R126 += 1, R94 += 1, R49 += 1, R50 += 1 };
  s3 -> s5 [73, 73] { R126 += 1, R94 += 1, R50 += 1 };
  s3 -> s6 [73, 73] { R126 += 1, R94 += 1, R49 += 1, R50 += 1 };
  s3 -> s7 [73, 73] { R126 += 1, R94 += 1, R50 += 1 };
  s3 -> s1 [74, 89] { R126 += 1, R94 += 1, R50 += 1 };
  s3 -> s2 [74, 65535] { R126 += 1, R94 += 1, R49 += 1, R50 += 1 };
  s3 -> s8 [90, 90] { R126 += 1, R94 += 1, R50 += 1 };
  s3 -> s1 [91, 65535] { R126 += 1, R94 += 1, R50 += 1 };
  s4 -> s7 [0, 89] { R126 += 1, R94 += 1, R50 += 1 };
  s4 -> s4 [0, 65535] { R126 += 1, R94 += 1, R49 += 1, R50 += 1 };
  s4 -> s11 [90, 90] { R126 += 1, R94 += 1, R50 += 1 };
  s4 -> s7 [91, 65535] { R126 += 1, R94 += 1, R50 += 1 };
  s7 -> s7 [0, 89] { R126 += 1, R94 += 1, R50 += 1 };
  s7 -> s11 [90, 90] { R126 += 1, R94 += 1, R50 += 1 };
  s7 -> s7 [91, 65535] { R126 += 1, R94 += 1, R50 += 1 };
  s8 -> s8 [0, 72] { R126 += 1, R94 += 1, R50 += 1 };
  s8 -> s8 [0, 65535] { R126 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [73, 73] { R126 += 1, R94 += 1, R50 += 1 };
  s8 -> s11 [73, 73] { R126 += 1, R94 += 1, R50 += 1 };
  s8 -> s8 [74, 65535] { R126 += 1, R94 += 1, R50 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R126 += 1 };
  s11 -> s12 [0, 65535] { R126 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R126 += 1, R94 += 1, R50 += 1 };
  s12 -> s12 [0, 65535] { R126 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 72] { R128 += 1, R96 += 1, R53 += 1, R54 += 1 };
  s0 -> s2 [0, 65535] { R128 += 1, R95 += 1, R96 += 1 };
  s0 -> s0 [0, 65535] { R127 += 1, R128 += 1 };
  s0 -> s3 [73, 73] { R128 += 1, R96 += 1, R53 += 1, R54 += 1 };
  s0 -> s4 [73, 73] { R128 += 1, R96 += 1, R53 += 1, R54 += 1 };
  s0 -> s1 [74, 65535] { R128 += 1, R96 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 72] { R128 += 1, R96 += 1, R53 += 1, R54 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R128 += 1 };
  s1 -> s3 [73, 73] { R128 += 1, R96 += 1, R53 += 1, R54 += 1 };
  s1 -> s4 [73, 73] { R128 += 1, R96 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [74, 65535] { R128 += 1, R96 += 1, R53 += 1, R54 += 1 };
  s2 -> s1 [0, 72] { R128 += 1, R96 += 1, R53 += 1, R54 += 1 };
  s2 -> s2 [0, 65535] { R128 += 1, R95 += 1, R96 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [73, 73] { R128 += 1, R96 += 1, R53 += 1, R54 += 1 };
  s2 -> s4 [73, 73] { R128 += 1, R96 += 1, R53 += 1, R54 += 1 };
  s2 -> s1 [74, 65535] { R128 += 1, R96 += 1, R53 += 1, R54 += 1 };
  s3 -> s3 [0, 65535] { R128 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R128 += 1 };
  s4 -> s4 [0, 65535] { R128 += 1, R96 += 1, R53 += 1, R54 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R128 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
constraint R2 = R128 && R19 - R128 = -1 && R20 = R128 && R21 - R128 = -1 && R22 = R128 && R23 = 0 && R24 = 1 && R25 = 0 && R26 = 1 && R31 + R46 + R45 + -1*R52 + -1*R50 - R36 = 0 && R35 + R51 + R49 = 0 && R87 = 0 && R88 = 0 && R93 = 0 && R94 = 0 && R97 = 0 && R98 = R128 && R99 = 0 && R100 = R128 && R101 = 0 && R102 = R128 && R103 = 0 && R104 = R128 && R105 = 0 && R106 = R128 && R107 = 0 && R108 = R128 && R109 = 0 && R110 = R128 && R111 = 0 && R112 = R128 && R113 = 0 && R114 = R128 && R115 = 0 && R116 = R128 && R117 = 0 && R118 = R128 && R119 = 0 && R120 = R128 && R121 = 0 && R122 = R128 && R123 = 0 && R124 = R128 && R125 = 0 && R126 = R128 && R127 = 0 && -1 < R1 && R8 < 1 && R11 < 1 && R12 < 1 && R33 + R48 + R47 < 1 && -1*R52 + -1*R50 - R36 < 1 && 0 < R128 && (R1 != 0 || R16 = 0 || (R59 = 0 && R60 = 0)) && (R1 != 0 || R16 = 0 || (R61 = 0 && R62 = 0)) && (R1 != 0 || R16 = 0 || (R63 = 0 && R64 = 0)) && (R1 != 0 || R16 = 0 || (R65 = 0 && R66 = 0)) && (R1 != 0 || R16 = 0 || (R67 = 0 && R68 = 0)) && (R1 != 0 || R16 = 0 || (R69 = 0 && R70 = 0)) && (R1 != 0 || R16 = 0 || (R71 = 0 && R72 = 0)) && (R36 + R52 + R50 != 0 || R41 + R58 + R55 = 0 || (R39 + R56 + R53 = 0 && R40 + R57 + R54 = 0)) && (R39 + R56 + R53 != 0 || R36 + R52 + R50 + -1*R57 + -1*R54 - R40 = 0 || R36 + R52 + R50 < 1) && (R59 != 0 || R1 = R60 || R1 < 1) && (R61 != 0 || R1 = R62 || R1 < 1) && (R63 != 0 || R1 = R64 || R1 < 1) && (R65 != 0 || R1 = R66 || R1 < 1) && (R67 != 0 || R1 = R68 || R1 < 1) && (R69 != 0 || R1 = R70 || R1 < 1) && (R71 != 0 || R1 = R72 || R1 < 1) && (R17 = 0 || (R85 = 0 && R86 = 0)) && (R17 = 0 || (R89 = 0 && R90 = 0)) && (R17 = 0 || (R91 = 0 && R92 = 0)) && (R17 = 0 || (R95 = 0 && R96 = 0)) && (R18 = 0 || (R73 = 0 && R74 = 0)) && (R18 = 0 || (R75 = 0 && R76 = 0)) && (R18 = 0 || (R77 = 0 && R78 = 0)) && (R18 = 0 || (R79 = 0 && R80 = 0)) && (R18 = 0 || (R81 = 0 && R82 = 0)) && (R18 = 0 || (R83 = 0 && R84 = 0)) && (R39 + R56 + R53 = 0 || R36 + R52 + R50 < 1) && (R59 = 0 || R1 < 1) && (R61 = 0 || R1 < 1) && (R63 = 0 || R1 < 1) && (R65 = 0 || R1 < 1) && (R67 = 0 || R1 < 1) && (R69 = 0 || R1 < 1) && (R71 = 0 || R1 < 1);
// End of Parikh automata intersection problem
