// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R10252, R10253, R10254, R10255, R11, R11100, R11101, R11102, R11103, R11104, R11105, R11314, R11315, R11316, R11317, R11318, R11319, R11320, R11321, R11322, R11323, R11324, R11325, R11326, R11327, R11328, R11329, R11330, R11331, R11332, R11333, R11334, R11335, R11336, R11337, R11338, R11339, R11340, R11341, R11342, R11343, R11344, R11345, R11346, R11347, R11348, R11349, R11350, R11351, R11352, R11353, R11354, R11355, R11356, R11357, R11358, R11359, R11360, R11361, R11362, R11363, R11364, R11365, R11366, R11367, R11368, R11369, R11370, R11371, R11372, R11373, R11374, R11375, R11376, R11377, R11378, R11379, R11380, R11381, R11382, R11383, R11384, R11385, R11386, R11387, R11388, R11389, R11390, R11391, R11392, R11393, R11394, R11395, R11396, R11397, R11398, R11399, R11400, R11401, R11402, R11403, R11404, R11405, R11406, R11407, R11408, R11409, R11410, R11411, R11412, R11413, R11414, R11415, R11416, R11417, R12, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R70, R71, R72, R73, R7706, R7707, R7708, R7709, R7710, R7711, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [81, 81];
  s0 -> s0 [82, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [81, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 80];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [81, 81];
  s0 -> s1 [82, 65535];
  s1 -> s1 [0, 80];
  s1 -> s2 [81, 81];
  s1 -> s1 [82, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s1 [0, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s1 [0, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R11338 += 1, R11339 += 1 };
  s0 -> s1 [0, 65535] { R11339 += 1, R19 += 1 };
  s1 -> s1 [0, 65535] { R11339 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 80] { R11341 += 1 };
  s0 -> s0 [0, 65535] { R11340 += 1, R11341 += 1 };
  s0 -> s2 [81, 81] { R11341 += 1 };
  s0 -> s3 [81, 81] { R11341 += 1 };
  s0 -> s1 [83, 65535] { R11341 += 1 };
  s1 -> s1 [0, 80] { R11341 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R11341 += 1 };
  s1 -> s3 [81, 81] { R11341 += 1 };
  s1 -> s1 [83, 65535] { R11341 += 1 };
  s2 -> s2 [0, 81] { R11341 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [83, 65535] { R11341 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 80] { R11343 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R11342 += 1, R11343 += 1 };
  s0 -> s2 [81, 81] { R11343 += 1, R38 += 1 };
  s0 -> s3 [81, 81] { R11343 += 1, R38 += 1 };
  s0 -> s1 [82, 65535] { R11343 += 1, R38 += 1 };
  s1 -> s1 [0, 80] { R11343 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R11343 += 1, R38 += 1 };
  s1 -> s3 [81, 81] { R11343 += 1, R38 += 1 };
  s1 -> s1 [82, 65535] { R11343 += 1, R38 += 1 };
  s2 -> s2 [0, 65535] { R11343 += 1, R38 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 80] { R11345 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R11344 += 1, R11345 += 1 };
  s0 -> s2 [81, 81] { R11345 += 1, R40 += 1 };
  s0 -> s3 [81, 81] { R11345 += 1, R40 += 1 };
  s0 -> s1 [82, 65535] { R11345 += 1, R40 += 1 };
  s1 -> s1 [0, 80] { R11345 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R11345 += 1, R40 += 1 };
  s1 -> s3 [81, 81] { R11345 += 1, R40 += 1 };
  s1 -> s1 [82, 65535] { R11345 += 1, R40 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R11345 += 1, R40 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 80] { R11347 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R11346 += 1, R11347 += 1 };
  s0 -> s2 [81, 81] { R11347 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [81, 81] { R11347 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [82, 65535] { R11347 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 80] { R11347 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R11347 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [81, 81] { R11347 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [82, 65535] { R11347 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R11347 += 1, R42 += 1, R43 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 80] { R11349 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R11348 += 1, R11349 += 1 };
  s0 -> s2 [81, 81] { R11349 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [81, 81] { R11349 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [82, 65535] { R11349 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 80] { R11349 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R11349 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [81, 81] { R11349 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [82, 65535] { R11349 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535] { R11349 += 1, R46 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 80] { R11351 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R11350 += 1, R11351 += 1 };
  s0 -> s2 [81, 81] { R11351 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [81, 81] { R11351 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [82, 65535] { R11351 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 80] { R11351 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R11351 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [81, 81] { R11351 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [82, 65535] { R11351 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535] { R11351 += 1, R52 += 1, R53 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 80] { R11353 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R11352 += 1, R11353 += 1 };
  s0 -> s2 [81, 81] { R11353 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [81, 81] { R11353 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [82, 65535] { R11353 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 80] { R11353 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R11353 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [81, 81] { R11353 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [82, 65535] { R11353 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535] { R11353 += 1, R56 += 1, R57 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 80] { R11355 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R11354 += 1, R11355 += 1 };
  s0 -> s2 [81, 81] { R11355 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [81, 81] { R11355 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [82, 65535] { R11355 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 80] { R11355 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R11355 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [81, 81] { R11355 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [82, 65535] { R11355 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R11355 += 1, R62 += 1, R63 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 80] { R11375 += 1 };
  s0 -> s0 [0, 65535] { R11374 += 1, R11375 += 1 };
  s0 -> s2 [81, 81] { R11375 += 1 };
  s0 -> s1 [82, 65535] { R11375 += 1 };
  s1 -> s1 [0, 80] { R11375 += 1 };
  s1 -> s2 [81, 81] { R11375 += 1 };
  s1 -> s1 [82, 65535] { R11375 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R11375 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R11376 += 1, R11377 += 1 };
  s0 -> s1 [0, 65535] { R11377 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R11377 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 80] { R11379 += 1 };
  s0 -> s0 [0, 65535] { R11378 += 1, R11379 += 1 };
  s0 -> s2 [0, 65535] { R11379 += 1, R8 += 1 };
  s0 -> s3 [81, 81] { R11379 += 1 };
  s0 -> s1 [82, 65535] { R11379 += 1 };
  s1 -> s1 [0, 80] { R11379 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [81, 81] { R11379 += 1 };
  s1 -> s1 [82, 65535] { R11379 += 1 };
  s2 -> s1 [0, 80] { R11379 += 1 };
  s2 -> s2 [0, 65535] { R11379 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [81, 81] { R11379 += 1 };
  s2 -> s1 [82, 65535] { R11379 += 1 };
  s3 -> s3 [0, 65535] { R11379 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 80] { R11381 += 1, R11319 += 1 };
  s0 -> s2 [0, 65535] { R11381 += 1, R11318 += 1, R11319 += 1 };
  s0 -> s0 [0, 65535] { R11380 += 1, R11381 += 1 };
  s0 -> s1 [82, 65535] { R11381 += 1, R11319 += 1 };
  s1 -> s1 [0, 80] { R11381 += 1, R11319 += 1 };
  s1 -> s1 [0, 65535] { R11381 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [82, 65535] { R11381 += 1, R11319 += 1 };
  s2 -> s1 [0, 80] { R11381 += 1, R11319 += 1 };
  s2 -> s2 [0, 65535] { R11381 += 1, R11318 += 1, R11319 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [82, 65535] { R11381 += 1, R11319 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R11383 += 1, R11321 += 1, R17 += 1 };
  s0 -> s0 [0, 65535] { R11382 += 1, R11383 += 1 };
  s0 -> s2 [0, 65535] { R11383 += 1, R11320 += 1, R11321 += 1 };
  s1 -> s1 [0, 65535] { R11383 += 1, R11321 += 1, R17 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R11383 += 1 };
  s2 -> s1 [0, 65535] { R11383 += 1, R11321 += 1, R17 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R11383 += 1, R11320 += 1, R11321 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R11383 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 65535] { R11385 += 1, R11323 += 1 };
  s0 -> s2 [0, 65535] { R11385 += 1, R11322 += 1, R11323 += 1 };
  s0 -> s0 [0, 65535] { R11384 += 1, R11385 += 1 };
  s1 -> s4 [0, 65535] { R11385 += 1 };
  s1 -> s1 [0, 65535] { R11385 += 1, R11323 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R11385 += 1, R11323 += 1 };
  s2 -> s2 [0, 65535] { R11385 += 1, R11322 += 1, R11323 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R11385 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R11387 += 1, R11325 += 1, R67 += 1 };
  s0 -> s2 [0, 65535] { R11387 += 1, R11324 += 1, R11325 += 1 };
  s0 -> s0 [0, 65535] { R11386 += 1, R11387 += 1 };
  s1 -> s1 [0, 65535] { R11387 += 1, R11325 += 1, R67 += 1 };
  s1 -> s4 [0, 65535] { R11387 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R11387 += 1, R11325 += 1, R67 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R11387 += 1, R11324 += 1, R11325 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R11387 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 81] { R11389 += 1, R11327 += 1 };
  s0 -> s2 [0, 65535] { R11389 += 1, R11327 += 1, R69 += 1 };
  s0 -> s3 [0, 65535] { R11389 += 1, R11326 += 1, R11327 += 1 };
  s0 -> s0 [0, 65535] { R11388 += 1, R11389 += 1 };
  s0 -> s1 [83, 65535] { R11389 += 1, R11327 += 1 };
  s1 -> s1 [0, 81] { R11389 += 1, R11327 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R11389 += 1 };
  s1 -> s1 [83, 65535] { R11389 += 1, R11327 += 1 };
  s2 -> s1 [0, 81] { R11389 += 1, R11327 += 1 };
  s2 -> s2 [0, 65535] { R11389 += 1, R11327 += 1, R69 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R11389 += 1 };
  s2 -> s1 [83, 65535] { R11389 += 1, R11327 += 1 };
  s3 -> s1 [0, 81] { R11389 += 1, R11327 += 1 };
  s3 -> s2 [0, 65535] { R11389 += 1, R11327 += 1, R69 += 1 };
  s3 -> s3 [0, 65535] { R11389 += 1, R11326 += 1, R11327 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [83, 65535] { R11389 += 1, R11327 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R11389 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 81] { R11391 += 1, R11329 += 1, R73 += 1 };
  s0 -> s2 [0, 65535] { R11391 += 1, R11328 += 1, R11329 += 1 };
  s0 -> s0 [0, 65535] { R11390 += 1, R11391 += 1 };
  s0 -> s3 [0, 65535] { R11391 += 1, R11329 += 1, R72 += 1, R73 += 1 };
  s0 -> s1 [83, 65535] { R11391 += 1, R11329 += 1, R73 += 1 };
  s1 -> s1 [0, 81] { R11391 += 1, R11329 += 1, R73 += 1 };
  s1 -> s1 [0, 65535] { R11391 += 1, R11329 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R11391 += 1 };
  s1 -> s1 [83, 65535] { R11391 += 1, R11329 += 1, R73 += 1 };
  s2 -> s1 [0, 81] { R11391 += 1, R11329 += 1, R73 += 1 };
  s2 -> s2 [0, 65535] { R11391 += 1, R11328 += 1, R11329 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R11391 += 1, R11329 += 1, R72 += 1, R73 += 1 };
  s2 -> s1 [83, 65535] { R11391 += 1, R11329 += 1, R73 += 1 };
  s3 -> s1 [0, 81] { R11391 += 1, R11329 += 1, R73 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R11391 += 1, R11329 += 1, R72 += 1, R73 += 1 };
  s3 -> s5 [0, 65535] { R11391 += 1 };
  s3 -> s1 [83, 65535] { R11391 += 1, R11329 += 1, R73 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R11391 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s0 [0, 65535] { R11392 += 1, R11393 += 1 };
  s0 -> s1 [0, 65535] { R11393 += 1, R11331 += 1 };
  s0 -> s2 [0, 65535] { R11393 += 1, R11330 += 1, R11331 += 1 };
  s1 -> s4 [0, 65535] { R11393 += 1 };
  s1 -> s1 [0, 65535] { R11393 += 1, R11331 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R11393 += 1, R11331 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R11393 += 1, R11330 += 1, R11331 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R11393 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 82] { R11395 += 1, R11333 += 1, R10255 += 1 };
  s0 -> s0 [0, 65535] { R11394 += 1, R11395 += 1 };
  s0 -> s2 [0, 65535] { R11395 += 1, R11332 += 1, R11333 += 1 };
  s0 -> s3 [87, 87] { R11395 += 1, R11333 += 1, R10255 += 1 };
  s0 -> s1 [88, 65535] { R11395 += 1, R11333 += 1, R10255 += 1 };
  s1 -> s1 [0, 82] { R11395 += 1, R11333 += 1, R10255 += 1 };
  s1 -> s3 [87, 87] { R11395 += 1, R11333 += 1, R10255 += 1 };
  s1 -> s1 [88, 65535] { R11395 += 1, R11333 += 1, R10255 += 1 };
  s2 -> s1 [0, 82] { R11395 += 1, R11333 += 1, R10255 += 1 };
  s2 -> s2 [0, 65535] { R11395 += 1, R11332 += 1, R11333 += 1 };
  s2 -> s3 [87, 87] { R11395 += 1, R11333 += 1, R10255 += 1 };
  s2 -> s1 [88, 65535] { R11395 += 1, R11333 += 1, R10255 += 1 };
  s3 -> s3 [0, 82] { R11395 += 1, R11333 += 1, R10255 += 1 };
  s3 -> s3 [0, 65535] { R11395 += 1, R11333 += 1 };
  s3 -> s4 [0, 65535] { R11395 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [87, 65535] { R11395 += 1, R11333 += 1, R10255 += 1 };
  s4 -> s4 [0, 65535] { R11395 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
automaton value2_28 {
  init s0;
  s0 -> s0 [0, 65535] { R11396 += 1, R11397 += 1 };
  s0 -> s1 [0, 65535] { R11397 += 1, R11334 += 1, R11335 += 1 };
  s0 -> s2 [0, 65535] { R11397 += 1, R11335 += 1 };
  s1 -> s1 [0, 65535] { R11397 += 1, R11334 += 1, R11335 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R11397 += 1, R11335 += 1 };
  s2 -> s3 [0, 65535] { R11397 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R11397 += 1, R11335 += 1 };
  s3 -> s3 [0, 65535] { R11397 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 82] { R11399 += 1, R11337 += 1, R11317 += 1 };
  s0 -> s0 [0, 65535] { R11398 += 1, R11399 += 1 };
  s0 -> s1 [0, 65535] { R11399 += 1, R11337 += 1 };
  s0 -> s2 [0, 65535] { R11399 += 1, R11336 += 1, R11337 += 1 };
  s0 -> s1 [88, 65535] { R11399 += 1, R11337 += 1, R11317 += 1 };
  s1 -> s1 [0, 82] { R11399 += 1, R11337 += 1, R11317 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R11399 += 1, R11337 += 1 };
  s1 -> s4 [0, 65535] { R11399 += 1 };
  s1 -> s1 [88, 65535] { R11399 += 1, R11337 += 1, R11317 += 1 };
  s2 -> s1 [0, 82] { R11399 += 1, R11337 += 1, R11317 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R11399 += 1, R11337 += 1 };
  s2 -> s2 [0, 65535] { R11399 += 1, R11336 += 1, R11337 += 1 };
  s2 -> s1 [88, 65535] { R11399 += 1, R11337 += 1, R11317 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R11399 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R11401 += 1, R11356 += 1, R11357 += 1 };
  s0 -> s2 [0, 65535] { R11401 += 1, R11357 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R11400 += 1, R11401 += 1 };
  s1 -> s1 [0, 65535] { R11401 += 1, R11356 += 1, R11357 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R11401 += 1, R11357 += 1, R18 += 1 };
  s2 -> s3 [0, 65535] { R11401 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R11401 += 1, R11357 += 1, R18 += 1 };
  s3 -> s3 [0, 65535] { R11401 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 80] { R11403 += 1, R11359 += 1 };
  s0 -> s2 [0, 65535] { R11403 += 1, R11358 += 1, R11359 += 1 };
  s0 -> s0 [0, 65535] { R11402 += 1, R11403 += 1 };
  s0 -> s3 [81, 81] { R11403 += 1, R11359 += 1 };
  s0 -> s4 [81, 81] { R11403 += 1, R11359 += 1 };
  s0 -> s5 [82, 82] { R11403 += 1, R11359 += 1 };
  s0 -> s1 [83, 65535] { R11403 += 1, R11359 += 1 };
  s1 -> s1 [0, 80] { R11403 += 1, R11359 += 1 };
  s1 -> s3 [81, 81] { R11403 += 1, R11359 += 1 };
  s1 -> s4 [81, 81] { R11403 += 1, R11359 += 1 };
  s1 -> s5 [82, 82] { R11403 += 1, R11359 += 1 };
  s1 -> s1 [83, 65535] { R11403 += 1, R11359 += 1 };
  s2 -> s1 [0, 80] { R11403 += 1, R11359 += 1 };
  s2 -> s2 [0, 65535] { R11403 += 1, R11358 += 1, R11359 += 1 };
  s2 -> s3 [81, 81] { R11403 += 1, R11359 += 1 };
  s2 -> s4 [81, 81] { R11403 += 1, R11359 += 1 };
  s2 -> s5 [82, 82] { R11403 += 1, R11359 += 1 };
  s2 -> s1 [83, 65535] { R11403 += 1, R11359 += 1 };
  s3 -> s3 [0, 81] { R11403 += 1, R11359 += 1 };
  s3 -> s8 [82, 82] { R11403 += 1, R11359 += 1 };
  s3 -> s3 [83, 65535] { R11403 += 1, R11359 += 1 };
  s5 -> s5 [0, 80] { R11403 += 1, R11359 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R11403 += 1 };
  s5 -> s7 [81, 81] { R11403 += 1, R11359 += 1 };
  s5 -> s8 [81, 81] { R11403 += 1, R11359 += 1 };
  s5 -> s5 [82, 65535] { R11403 += 1, R11359 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R11403 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R11403 += 1, R11359 += 1 };
  s8 -> s9 [0, 65535] { R11403 += 1 };
  s9 -> s6 [0, 65535];
  s9 -> s9 [0, 65535] { R11403 += 1 };
  accepting s8, s5, s9, s6, s7;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 80] { R11405 += 1, R11361 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R11404 += 1, R11405 += 1 };
  s0 -> s2 [0, 65535] { R11405 += 1, R11360 += 1, R11361 += 1 };
  s0 -> s3 [81, 81] { R11405 += 1, R11361 += 1, R66 += 1 };
  s0 -> s4 [81, 81] { R11405 += 1, R11361 += 1, R66 += 1 };
  s0 -> s1 [82, 65535] { R11405 += 1, R11361 += 1, R66 += 1 };
  s1 -> s1 [0, 80] { R11405 += 1, R11361 += 1, R66 += 1 };
  s1 -> s1 [0, 65535] { R11405 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [81, 81] { R11405 += 1, R11361 += 1, R66 += 1 };
  s1 -> s4 [81, 81] { R11405 += 1, R11361 += 1, R66 += 1 };
  s1 -> s1 [82, 65535] { R11405 += 1, R11361 += 1, R66 += 1 };
  s2 -> s1 [0, 80] { R11405 += 1, R11361 += 1, R66 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R11405 += 1, R11360 += 1, R11361 += 1 };
  s2 -> s3 [81, 81] { R11405 += 1, R11361 += 1, R66 += 1 };
  s2 -> s4 [81, 81] { R11405 += 1, R11361 += 1, R66 += 1 };
  s2 -> s1 [82, 65535] { R11405 += 1, R11361 += 1, R66 += 1 };
  s3 -> s3 [0, 65535] { R11405 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R11405 += 1, R11361 += 1, R66 += 1 };
  s4 -> s6 [0, 65535] { R11405 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R11405 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 80] { R11407 += 1, R11363 += 1, R68 += 1 };
  s0 -> s2 [0, 65535] { R11407 += 1, R11362 += 1, R11363 += 1 };
  s0 -> s0 [0, 65535] { R11406 += 1, R11407 += 1 };
  s0 -> s3 [81, 81] { R11407 += 1, R11363 += 1, R68 += 1 };
  s0 -> s4 [81, 81] { R11407 += 1, R11363 += 1, R68 += 1 };
  s0 -> s1 [82, 65535] { R11407 += 1, R11363 += 1, R68 += 1 };
  s1 -> s1 [0, 80] { R11407 += 1, R11363 += 1, R68 += 1 };
  s1 -> s1 [0, 65535] { R11407 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [81, 81] { R11407 += 1, R11363 += 1, R68 += 1 };
  s1 -> s4 [81, 81] { R11407 += 1, R11363 += 1, R68 += 1 };
  s1 -> s1 [82, 65535] { R11407 += 1, R11363 += 1, R68 += 1 };
  s2 -> s1 [0, 80] { R11407 += 1, R11363 += 1, R68 += 1 };
  s2 -> s2 [0, 65535] { R11407 += 1, R11362 += 1, R11363 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [81, 81] { R11407 += 1, R11363 += 1, R68 += 1 };
  s2 -> s4 [81, 81] { R11407 += 1, R11363 += 1, R68 += 1 };
  s2 -> s1 [82, 65535] { R11407 += 1, R11363 += 1, R68 += 1 };
  s3 -> s3 [0, 65535] { R11407 += 1, R11363 += 1, R68 += 1 };
  s3 -> s6 [0, 65535] { R11407 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R11407 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R11407 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 80] { R11409 += 1, R11365 += 1, R70 += 1, R71 += 1 };
  s0 -> s0 [0, 65535] { R11408 += 1, R11409 += 1 };
  s0 -> s2 [0, 65535] { R11409 += 1, R11364 += 1, R11365 += 1 };
  s0 -> s3 [81, 81] { R11409 += 1, R11365 += 1, R70 += 1, R71 += 1 };
  s0 -> s4 [81, 81] { R11409 += 1, R11365 += 1, R70 += 1, R71 += 1 };
  s0 -> s1 [82, 65535] { R11409 += 1, R11365 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 80] { R11409 += 1, R11365 += 1, R70 += 1, R71 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R11409 += 1 };
  s1 -> s3 [81, 81] { R11409 += 1, R11365 += 1, R70 += 1, R71 += 1 };
  s1 -> s4 [81, 81] { R11409 += 1, R11365 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [82, 65535] { R11409 += 1, R11365 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [0, 80] { R11409 += 1, R11365 += 1, R70 += 1, R71 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R11409 += 1, R11364 += 1, R11365 += 1 };
  s2 -> s3 [81, 81] { R11409 += 1, R11365 += 1, R70 += 1, R71 += 1 };
  s2 -> s4 [81, 81] { R11409 += 1, R11365 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [82, 65535] { R11409 += 1, R11365 += 1, R70 += 1, R71 += 1 };
  s3 -> s3 [0, 65535] { R11409 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R11409 += 1, R11365 += 1, R70 += 1, R71 += 1 };
  s4 -> s6 [0, 65535] { R11409 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R11409 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 80] { R11411 += 1, R11367 += 1, R7706 += 1, R7707 += 1 };
  s0 -> s2 [0, 80] { R11411 += 1, R11367 += 1, R7707 += 1, R7708 += 1 };
  s0 -> s3 [0, 65535] { R11411 += 1, R11366 += 1, R11367 += 1 };
  s0 -> s0 [0, 65535] { R11410 += 1, R11411 += 1 };
  s0 -> s4 [81, 81] { R11411 += 1, R11367 += 1, R7707 += 1, R7708 += 1 };
  s0 -> s5 [81, 81] { R11411 += 1, R11367 += 1, R7707 += 1, R7708 += 1 };
  s0 -> s6 [81, 81] { R11411 += 1, R11367 += 1, R7706 += 1, R7707 += 1 };
  s0 -> s7 [81, 81] { R11411 += 1, R11367 += 1, R7706 += 1, R7707 += 1 };
  s0 -> s1 [82, 65535] { R11411 += 1, R11367 += 1, R7706 += 1, R7707 += 1 };
  s0 -> s2 [82, 65535] { R11411 += 1, R11367 += 1, R7707 += 1, R7708 += 1 };
  s1 -> s1 [0, 80] { R11411 += 1, R11367 += 1, R7706 += 1, R7707 += 1 };
  s1 -> s2 [0, 80] { R11411 += 1, R11367 += 1, R7707 += 1, R7708 += 1 };
  s1 -> s4 [81, 81] { R11411 += 1, R11367 += 1, R7707 += 1, R7708 += 1 };
  s1 -> s5 [81, 81] { R11411 += 1, R11367 += 1, R7707 += 1, R7708 += 1 };
  s1 -> s6 [81, 81] { R11411 += 1, R11367 += 1, R7706 += 1, R7707 += 1 };
  s1 -> s7 [81, 81] { R11411 += 1, R11367 += 1, R7706 += 1, R7707 += 1 };
  s1 -> s1 [82, 65535] { R11411 += 1, R11367 += 1, R7706 += 1, R7707 += 1 };
  s1 -> s2 [82, 65535] { R11411 += 1, R11367 += 1, R7707 += 1, R7708 += 1 };
  s2 -> s11 [0, 80] { R11411 += 1, R11367 += 1 };
  s2 -> s2 [0, 80] { R11411 += 1, R11367 += 1, R7707 += 1, R7708 += 1 };
  s2 -> s4 [81, 81] { R11411 += 1, R11367 += 1, R7707 += 1, R7708 += 1 };
  s2 -> s5 [81, 81] { R11411 += 1, R11367 += 1, R7707 += 1, R7708 += 1 };
  s2 -> s12 [81, 81] { R11411 += 1, R11367 += 1 };
  s2 -> s8 [81, 81] { R11411 += 1, R11367 += 1 };
  s2 -> s11 [82, 65535] { R11411 += 1, R11367 += 1 };
  s2 -> s2 [82, 65535] { R11411 += 1, R11367 += 1, R7707 += 1, R7708 += 1 };
  s3 -> s1 [0, 80] { R11411 += 1, R11367 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s2 [0, 80] { R11411 += 1, R11367 += 1, R7707 += 1, R7708 += 1 };
  s3 -> s3 [0, 65535] { R11411 += 1, R11366 += 1, R11367 += 1 };
  s3 -> s4 [81, 81] { R11411 += 1, R11367 += 1, R7707 += 1, R7708 += 1 };
  s3 -> s5 [81, 81] { R11411 += 1, R11367 += 1, R7707 += 1, R7708 += 1 };
  s3 -> s6 [81, 81] { R11411 += 1, R11367 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s7 [81, 81] { R11411 += 1, R11367 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s1 [82, 65535] { R11411 += 1, R11367 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s2 [82, 65535] { R11411 += 1, R11367 += 1, R7707 += 1, R7708 += 1 };
  s5 -> s5 [0, 65535] { R11411 += 1, R11367 += 1, R7707 += 1, R7708 += 1 };
  s5 -> s8 [0, 65535] { R11411 += 1, R11367 += 1 };
  s7 -> s5 [0, 65535] { R11411 += 1, R11367 += 1, R7707 += 1, R7708 += 1 };
  s7 -> s7 [0, 65535] { R11411 += 1, R11367 += 1, R7706 += 1, R7707 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R11411 += 1, R11367 += 1 };
  s8 -> s10 [0, 65535] { R11411 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R11411 += 1 };
  s11 -> s11 [0, 80] { R11411 += 1, R11367 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R11411 += 1 };
  s11 -> s12 [81, 81] { R11411 += 1, R11367 += 1 };
  s11 -> s8 [81, 81] { R11411 += 1, R11367 += 1 };
  s11 -> s11 [82, 65535] { R11411 += 1, R11367 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R11411 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 80] { R11413 += 1, R11369 += 1, R10252 += 1, R10253 += 1 };
  s0 -> s2 [0, 80] { R11413 += 1, R11369 += 1, R10253 += 1 };
  s0 -> s3 [0, 65535] { R11413 += 1, R11368 += 1, R11369 += 1 };
  s0 -> s0 [0, 65535] { R11412 += 1, R11413 += 1 };
  s0 -> s4 [81, 81] { R11413 += 1, R11369 += 1, R10252 += 1, R10253 += 1 };
  s0 -> s5 [81, 81] { R11413 += 1, R11369 += 1, R10253 += 1 };
  s0 -> s6 [81, 81] { R11413 += 1, R11369 += 1, R10253 += 1 };
  s0 -> s7 [81, 81] { R11413 += 1, R11369 += 1, R10252 += 1, R10253 += 1 };
  s0 -> s2 [82, 82] { R11413 += 1, R11369 += 1, R10253 += 1 };
  s0 -> s1 [82, 65535] { R11413 += 1, R11369 += 1, R10252 += 1, R10253 += 1 };
  s0 -> s2 [88, 65535] { R11413 += 1, R11369 += 1, R10253 += 1 };
  s1 -> s1 [0, 80] { R11413 += 1, R11369 += 1, R10252 += 1, R10253 += 1 };
  s1 -> s2 [0, 80] { R11413 += 1, R11369 += 1, R10253 += 1 };
  s1 -> s4 [81, 81] { R11413 += 1, R11369 += 1, R10252 += 1, R10253 += 1 };
  s1 -> s5 [81, 81] { R11413 += 1, R11369 += 1, R10253 += 1 };
  s1 -> s6 [81, 81] { R11413 += 1, R11369 += 1, R10253 += 1 };
  s1 -> s7 [81, 81] { R11413 += 1, R11369 += 1, R10252 += 1, R10253 += 1 };
  s1 -> s2 [82, 82] { R11413 += 1, R11369 += 1, R10253 += 1 };
  s1 -> s1 [82, 65535] { R11413 += 1, R11369 += 1, R10252 += 1, R10253 += 1 };
  s1 -> s2 [88, 65535] { R11413 += 1, R11369 += 1, R10253 += 1 };
  s2 -> s2 [0, 80] { R11413 += 1, R11369 += 1, R10253 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R11413 += 1 };
  s2 -> s5 [81, 81] { R11413 += 1, R11369 += 1, R10253 += 1 };
  s2 -> s6 [81, 81] { R11413 += 1, R11369 += 1, R10253 += 1 };
  s2 -> s2 [82, 82] { R11413 += 1, R11369 += 1, R10253 += 1 };
  s2 -> s2 [88, 65535] { R11413 += 1, R11369 += 1, R10253 += 1 };
  s3 -> s1 [0, 80] { R11413 += 1, R11369 += 1, R10252 += 1, R10253 += 1 };
  s3 -> s2 [0, 80] { R11413 += 1, R11369 += 1, R10253 += 1 };
  s3 -> s3 [0, 65535] { R11413 += 1, R11368 += 1, R11369 += 1 };
  s3 -> s4 [81, 81] { R11413 += 1, R11369 += 1, R10252 += 1, R10253 += 1 };
  s3 -> s5 [81, 81] { R11413 += 1, R11369 += 1, R10253 += 1 };
  s3 -> s6 [81, 81] { R11413 += 1, R11369 += 1, R10253 += 1 };
  s3 -> s7 [81, 81] { R11413 += 1, R11369 += 1, R10252 += 1, R10253 += 1 };
  s3 -> s2 [82, 82] { R11413 += 1, R11369 += 1, R10253 += 1 };
  s3 -> s1 [82, 65535] { R11413 += 1, R11369 += 1, R10252 += 1, R10253 += 1 };
  s3 -> s2 [88, 65535] { R11413 += 1, R11369 += 1, R10253 += 1 };
  s4 -> s5 [0, 82] { R11413 += 1, R11369 += 1, R10253 += 1 };
  s4 -> s4 [0, 65535] { R11413 += 1, R11369 += 1, R10252 += 1, R10253 += 1 };
  s4 -> s5 [88, 65535] { R11413 += 1, R11369 += 1, R10253 += 1 };
  s5 -> s5 [0, 82] { R11413 += 1, R11369 += 1, R10253 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s5 [0, 65535] { R11413 += 1 };
  s5 -> s5 [88, 65535] { R11413 += 1, R11369 += 1, R10253 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R11413 += 1 };
  s8 -> s8 [0, 65535];
  accepting s2, s5, s6, s8;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 80] { R11415 += 1, R11371 += 1, R11101 += 1, R11102 += 1 };
  s0 -> s2 [0, 80] { R11415 += 1, R11371 += 1, R11100 += 1, R11101 += 1 };
  s0 -> s0 [0, 65535] { R11414 += 1, R11415 += 1 };
  s0 -> s3 [0, 65535] { R11415 += 1, R11370 += 1, R11371 += 1 };
  s0 -> s4 [81, 81] { R11415 += 1, R11371 += 1, R11101 += 1, R11102 += 1 };
  s0 -> s5 [81, 81] { R11415 += 1, R11371 += 1, R11101 += 1, R11102 += 1 };
  s0 -> s6 [81, 81] { R11415 += 1, R11371 += 1, R11100 += 1, R11101 += 1 };
  s0 -> s7 [81, 81] { R11415 += 1, R11371 += 1, R11100 += 1, R11101 += 1 };
  s0 -> s1 [82, 65535] { R11415 += 1, R11371 += 1, R11101 += 1, R11102 += 1 };
  s0 -> s2 [82, 65535] { R11415 += 1, R11371 += 1, R11100 += 1, R11101 += 1 };
  s1 -> s1 [0, 80] { R11415 += 1, R11371 += 1, R11101 += 1, R11102 += 1 };
  s1 -> s11 [0, 80] { R11415 += 1, R11371 += 1 };
  s1 -> s12 [81, 81] { R11415 += 1, R11371 += 1 };
  s1 -> s4 [81, 81] { R11415 += 1, R11371 += 1, R11101 += 1, R11102 += 1 };
  s1 -> s5 [81, 81] { R11415 += 1, R11371 += 1, R11101 += 1, R11102 += 1 };
  s1 -> s8 [81, 81] { R11415 += 1, R11371 += 1 };
  s1 -> s1 [82, 65535] { R11415 += 1, R11371 += 1, R11101 += 1, R11102 += 1 };
  s1 -> s11 [82, 65535] { R11415 += 1, R11371 += 1 };
  s2 -> s1 [0, 80] { R11415 += 1, R11371 += 1, R11101 += 1, R11102 += 1 };
  s2 -> s2 [0, 80] { R11415 += 1, R11371 += 1, R11100 += 1, R11101 += 1 };
  s2 -> s4 [81, 81] { R11415 += 1, R11371 += 1, R11101 += 1, R11102 += 1 };
  s2 -> s5 [81, 81] { R11415 += 1, R11371 += 1, R11101 += 1, R11102 += 1 };
  s2 -> s6 [81, 81] { R11415 += 1, R11371 += 1, R11100 += 1, R11101 += 1 };
  s2 -> s7 [81, 81] { R11415 += 1, R11371 += 1, R11100 += 1, R11101 += 1 };
  s2 -> s1 [82, 65535] { R11415 += 1, R11371 += 1, R11101 += 1, R11102 += 1 };
  s2 -> s2 [82, 65535] { R11415 += 1, R11371 += 1, R11100 += 1, R11101 += 1 };
  s3 -> s1 [0, 80] { R11415 += 1, R11371 += 1, R11101 += 1, R11102 += 1 };
  s3 -> s2 [0, 80] { R11415 += 1, R11371 += 1, R11100 += 1, R11101 += 1 };
  s3 -> s3 [0, 65535] { R11415 += 1, R11370 += 1, R11371 += 1 };
  s3 -> s4 [81, 81] { R11415 += 1, R11371 += 1, R11101 += 1, R11102 += 1 };
  s3 -> s5 [81, 81] { R11415 += 1, R11371 += 1, R11101 += 1, R11102 += 1 };
  s3 -> s6 [81, 81] { R11415 += 1, R11371 += 1, R11100 += 1, R11101 += 1 };
  s3 -> s7 [81, 81] { R11415 += 1, R11371 += 1, R11100 += 1, R11101 += 1 };
  s3 -> s1 [82, 65535] { R11415 += 1, R11371 += 1, R11101 += 1, R11102 += 1 };
  s3 -> s2 [82, 65535] { R11415 += 1, R11371 += 1, R11100 += 1, R11101 += 1 };
  s4 -> s4 [0, 65535] { R11415 += 1, R11371 += 1, R11101 += 1, R11102 += 1 };
  s4 -> s8 [0, 65535] { R11415 += 1, R11371 += 1 };
  s7 -> s4 [0, 65535] { R11415 += 1, R11371 += 1, R11101 += 1, R11102 += 1 };
  s7 -> s7 [0, 65535] { R11415 += 1, R11371 += 1, R11100 += 1, R11101 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R11415 += 1, R11371 += 1 };
  s8 -> s10 [0, 65535] { R11415 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R11415 += 1 };
  s11 -> s11 [0, 80] { R11415 += 1, R11371 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R11415 += 1 };
  s11 -> s12 [81, 81] { R11415 += 1, R11371 += 1 };
  s11 -> s8 [81, 81] { R11415 += 1, R11371 += 1 };
  s11 -> s11 [82, 65535] { R11415 += 1, R11371 += 1 };
  s12 -> s12 [0, 65535] { R11415 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 80] { R11417 += 1, R11373 += 1, R11314 += 1, R11315 += 1 };
  s0 -> s2 [0, 80] { R11417 += 1, R11373 += 1, R11315 += 1 };
  s0 -> s0 [0, 65535] { R11416 += 1, R11417 += 1 };
  s0 -> s3 [0, 65535] { R11417 += 1, R11372 += 1, R11373 += 1 };
  s0 -> s4 [81, 81] { R11417 += 1, R11373 += 1, R11315 += 1 };
  s0 -> s5 [81, 81] { R11417 += 1, R11373 += 1, R11314 += 1, R11315 += 1 };
  s0 -> s6 [81, 81] { R11417 += 1, R11373 += 1, R11314 += 1, R11315 += 1 };
  s0 -> s7 [81, 81] { R11417 += 1, R11373 += 1, R11315 += 1 };
  s0 -> s8 [82, 82] { R11417 += 1, R11373 += 1, R11315 += 1 };
  s0 -> s1 [82, 65535] { R11417 += 1, R11373 += 1, R11314 += 1, R11315 += 1 };
  s0 -> s2 [88, 65535] { R11417 += 1, R11373 += 1, R11315 += 1 };
  s1 -> s1 [0, 80] { R11417 += 1, R11373 += 1, R11314 += 1, R11315 += 1 };
  s1 -> s2 [0, 80] { R11417 += 1, R11373 += 1, R11315 += 1 };
  s1 -> s4 [81, 81] { R11417 += 1, R11373 += 1, R11315 += 1 };
  s1 -> s5 [81, 81] { R11417 += 1, R11373 += 1, R11314 += 1, R11315 += 1 };
  s1 -> s6 [81, 81] { R11417 += 1, R11373 += 1, R11314 += 1, R11315 += 1 };
  s1 -> s7 [81, 81] { R11417 += 1, R11373 += 1, R11315 += 1 };
  s1 -> s8 [82, 82] { R11417 += 1, R11373 += 1, R11315 += 1 };
  s1 -> s1 [82, 65535] { R11417 += 1, R11373 += 1, R11314 += 1, R11315 += 1 };
  s1 -> s2 [88, 65535] { R11417 += 1, R11373 += 1, R11315 += 1 };
  s2 -> s2 [0, 80] { R11417 += 1, R11373 += 1, R11315 += 1 };
  s2 -> s4 [81, 81] { R11417 += 1, R11373 += 1 };
  s2 -> s7 [81, 81] { R11417 += 1, R11373 += 1 };
  s2 -> s8 [82, 82] { R11417 += 1, R11373 += 1, R11315 += 1 };
  s2 -> s2 [82, 65535] { R11417 += 1, R11373 += 1 };
  s2 -> s2 [88, 65535] { R11417 += 1, R11373 += 1, R11315 += 1 };
  s3 -> s1 [0, 80] { R11417 += 1, R11373 += 1, R11314 += 1, R11315 += 1 };
  s3 -> s2 [0, 80] { R11417 += 1, R11373 += 1, R11315 += 1 };
  s3 -> s3 [0, 65535] { R11417 += 1, R11372 += 1, R11373 += 1 };
  s3 -> s4 [81, 81] { R11417 += 1, R11373 += 1, R11315 += 1 };
  s3 -> s5 [81, 81] { R11417 += 1, R11373 += 1, R11314 += 1, R11315 += 1 };
  s3 -> s6 [81, 81] { R11417 += 1, R11373 += 1, R11314 += 1, R11315 += 1 };
  s3 -> s7 [81, 81] { R11417 += 1, R11373 += 1, R11315 += 1 };
  s3 -> s8 [82, 82] { R11417 += 1, R11373 += 1, R11315 += 1 };
  s3 -> s1 [82, 65535] { R11417 += 1, R11373 += 1, R11314 += 1, R11315 += 1 };
  s3 -> s2 [88, 65535] { R11417 += 1, R11373 += 1, R11315 += 1 };
  s5 -> s7 [0, 81] { R11417 += 1, R11373 += 1, R11315 += 1 };
  s5 -> s5 [0, 65535] { R11417 += 1, R11373 += 1, R11314 += 1, R11315 += 1 };
  s5 -> s11 [82, 82] { R11417 += 1, R11373 += 1, R11315 += 1 };
  s5 -> s7 [88, 65535] { R11417 += 1, R11373 += 1, R11315 += 1 };
  s7 -> s7 [0, 81] { R11417 += 1, R11373 += 1, R11315 += 1 };
  s7 -> s7 [0, 65535] { R11417 += 1, R11373 += 1 };
  s7 -> s11 [82, 82] { R11417 += 1, R11373 += 1, R11315 += 1 };
  s7 -> s7 [88, 65535] { R11417 += 1, R11373 += 1, R11315 += 1 };
  s8 -> s8 [0, 80] { R11417 += 1, R11373 += 1, R11315 += 1 };
  s8 -> s8 [0, 65535] { R11417 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [81, 81] { R11417 += 1, R11373 += 1 };
  s8 -> s11 [81, 81] { R11417 += 1, R11373 += 1 };
  s8 -> s8 [82, 82] { R11417 += 1, R11373 += 1, R11315 += 1 };
  s8 -> s8 [82, 65535] { R11417 += 1, R11373 += 1 };
  s8 -> s8 [88, 65535] { R11417 += 1, R11373 += 1, R11315 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R11417 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s11 [0, 82] { R11417 += 1, R11373 += 1, R11315 += 1 };
  s11 -> s11 [0, 65535] { R11417 += 1, R11373 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s12 [0, 65535] { R11417 += 1 };
  s11 -> s11 [88, 65535] { R11417 += 1, R11373 += 1, R11315 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R11417 += 1 };
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining c1
automaton c1_0 {
  init s0;
  s0 -> s1 [114, 114];
  accepting s1;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [113, 113];
  accepting s1;
};
};
constraint R1 = R11333 && R2 = R11417 && R20 - R11417 = -1 && R21 = R11417 && R22 - R11417 = -1 && R23 = R11417 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R10255 + -1*R10253 - R53 = 0 && R52 + R10254 + R10252 = 0 && R11332 = 0 && R11358 = 0 && R11359 = 0 && R11366 = 0 && R11367 = 0 && R11368 = 0 && R11369 = 0 && R11370 = 0 && R11371 = 0 && R11372 = 0 && R11373 = 0 && R11374 = 0 && R11375 = R11417 && R11376 = 0 && R11377 = R11417 && R11378 = 0 && R11379 = R11417 && R11380 = 0 && R11381 = R11417 && R11382 = 0 && R11383 = R11417 && R11384 = 0 && R11385 = R11417 && R11386 = 0 && R11387 = R11417 && R11388 = 0 && R11389 = R11417 && R11390 = 0 && R11391 = R11417 && R11392 = 0 && R11393 = R11417 && R11394 = 0 && R11395 = R11417 && R11396 = 0 && R11397 = R11417 && R11398 = 0 && R11399 = R11417 && R11400 = 0 && R11401 = R11417 && R11402 = 0 && R11403 = R11417 && R11404 = 0 && R11405 = R11417 && R11406 = 0 && R11407 = R11417 && R11408 = 0 && R11409 = R11417 && R11410 = 0 && R11411 = R11417 && R11412 = 0 && R11413 = R11417 && R11414 = 0 && R11415 = R11417 && R11416 = 0 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R10255 + -1*R10253 - R53 < 1 && -1 < R11333 && 0 < R11417 && (R48 + R7711 + R7708 != 0 || ((R42 + R72 + R70 != 0 || R43 + R73 + R71 + -1*R10255 + -1*R10253 - R53 = 0 || R53 + R10255 + R10253 < 1) && (R42 + R72 + R70 = 0 || R53 + R10255 + R10253 < 1))) && (R48 + R7711 + R7708 != 0 || ((R46 + R7709 + R7706 != 0 || R47 + R7710 + R7707 + -1*R10255 + -1*R10253 - R53 = 0 || R53 + R10255 + R10253 < 1) && (R46 + R7709 + R7706 = 0 || R53 + R10255 + R10253 < 1))) && (R11318 != 0 || R11319 = R11333 || (R17 = 0 && R11333 = 0)) && (R11320 != 0 || R11321 = R11333 || (R17 = 0 && R11333 = 0)) && (R11322 != 0 || R11323 = R11333 || (R17 = 0 && R11333 = 0)) && (R11324 != 0 || R11325 = R11333 || (R17 = 0 && R11333 = 0)) && (R11326 != 0 || R11327 = R11333 || (R17 = 0 && R11333 = 0)) && (R11328 != 0 || R11329 = R11333 || (R17 = 0 && R11333 = 0)) && (R11330 != 0 || R11331 = R11333 || (R17 = 0 && R11333 = 0)) && (R11334 != 0 || R11333 = R11335 || (R17 = 0 && R11333 = 0)) && (R11336 != 0 || R11333 = R11337 || (R17 = 0 && R11333 = 0)) && (R18 = 0 || (R11356 = 0 && R11357 = 0)) && (R18 = 0 || (R11360 = 0 && R11361 = 0)) && (R18 = 0 || (R11362 = 0 && R11363 = 0)) && (R18 = 0 || (R11364 = 0 && R11365 = 0)) && (R19 = 0 || (R11338 = 0 && R11339 = 0)) && (R19 = 0 || (R11340 = 0 && R11341 = 0)) && (R19 = 0 || (R11342 = 0 && R11343 = 0)) && (R19 = 0 || (R11344 = 0 && R11345 = 0)) && (R19 = 0 || (R11346 = 0 && R11347 = 0)) && (R19 = 0 || (R11348 = 0 && R11349 = 0)) && (R19 = 0 || (R11350 = 0 && R11351 = 0)) && (R19 = 0 || (R11352 = 0 && R11353 = 0)) && (R19 = 0 || (R11354 = 0 && R11355 = 0)) && (R48 + R7711 + R7708 = 0 || (R42 + R72 + R70 = 0 && R43 + R73 + R71 + -1*R10255 + -1*R10253 - R53 = 0)) && (R48 + R7711 + R7708 = 0 || (R46 + R7709 + R7706 = 0 && R47 + R7710 + R7707 + -1*R10255 + -1*R10253 - R53 = 0)) && (R58 + R11105 + R11102 = 0 || (R56 + R11103 + R11100 = 0 && R57 + R11104 + R11101 = 0)) && (R58 + R11105 + R11102 = 0 || (R62 + R11316 + R11314 = 0 && R63 + R11317 + R11315 = 0)) && (R11318 = 0 || (R17 = 0 && R11333 = 0)) && (R11320 = 0 || (R17 = 0 && R11333 = 0)) && (R11322 = 0 || (R17 = 0 && R11333 = 0)) && (R11324 = 0 || (R17 = 0 && R11333 = 0)) && (R11326 = 0 || (R17 = 0 && R11333 = 0)) && (R11328 = 0 || (R17 = 0 && R11333 = 0)) && (R11330 = 0 || (R17 = 0 && R11333 = 0)) && (R11334 = 0 || (R17 = 0 && R11333 = 0)) && (R11336 = 0 || (R17 = 0 && R11333 = 0));
// End of Parikh automata intersection problem
