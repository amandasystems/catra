// Parikh automata intersection problem, generated by OSTRICH+
counter int R1199, R1200, R1201, R1202, R1203, R1204, R1205, R1206, R1207, R1208, R1209, R1210, R1211, R1212, R1213, R1214, R1215, R1216, R1217, R1218, R1219, R1220, R1221, R1222, R1223, R1224, R1225, R1226, R1227, R1228, R1229, R1230, R1231, R1232, R1233, R1234, R1235, R1236, R1237, R1238, R1239, R1240, R1241, R1242, R1243, R1244, R1245, R1246, R1247, R1248, R1249, R1250, R1251, R1252, R1253, R1254, R1255, R1256, R1257, R1258, R1259, R1260, R1261, R1262, R1263, R1264, R1265, R1266, R1267, R1268, R1269, R1270, R1271, R1272, R1273, R1274, R1275, R1276, R1277, R1278, R1279, R1280, R1281, R1282, R1283, R1284, R1285, R1286, R1287, R1288, R1289, R1290, R1291, R1292, R1293, R1294, R1295, R1296, R1297, R1298, R1299, R1300, R1301, R1302, R1303, R1304, R1305, R1306, R1307, R1308, R1309, R1310, R1311, R1312, R1313, R1314, R1315, R1316, R1317, R1318, R1319, R1320, R1321, R1322, R1323, R1324, R1325, R1326, R1327, R1328, R1329, R1330, R1331, R1332, R1333, R1334, R1335, R1336, R14, R17, R2, R21, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R31, R32, R33, R34, R35, R36, R37, R38, R4, R5, R6, R7, R857, R858, R859, R860, R861, R862, R863, R864, R865, R866, R867, R868, R869, R870, R871, R872, R873, R874, R875, R876, R877, R878, R879, R880, R881, R882, R883, R884, R885, R886, R887, R888, R889, R890, R891, R892, R893, R894, R895, R896, R897, R898, R899, R900, R901, R902, R903, R904, R905, R906, R907, R908, R909, R910, R911, R912, R913, R914, R915, R916, R917, R918, R919, R920, R921, R922;
synchronised {  // Automata constraining P33
automaton P33_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [99, 99];
  accepting s1;
};
};
synchronised {  // Automata constraining P48
automaton P48_0 {
  init s0;
  s0 -> s1 [102, 102];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R17 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s0 [0, 65535] { R31 += 1, R32 += 1 };
  s0 -> s1 [9, 9] { R32 += 1 };
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value2_4 {
  init s0;
  s0 -> s0 [0, 65535] { R33 += 1, R34 += 1 };
  s0 -> s1 [0, 65535] { R34 += 1, R6 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R34 += 1, R6 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 8] { R36 += 1 };
  s0 -> s0 [0, 65535] { R35 += 1, R36 += 1 };
  s0 -> s2 [9, 13] { R36 += 1 };
  s0 -> s1 [14, 31] { R36 += 1 };
  s0 -> s2 [32, 32] { R36 += 1 };
  s0 -> s1 [33, 65535] { R36 += 1 };
  s1 -> s1 [0, 65535] { R36 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R36 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 65535] { R38 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R37 += 1, R38 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R38 += 1, R7 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 64] { R1266 += 1 };
  s0 -> s0 [0, 65535] { R1265 += 1, R1266 += 1 };
  s0 -> s2 [67, 67] { R1266 += 1 };
  s0 -> s1 [68, 65535] { R1266 += 1 };
  s1 -> s1 [0, 64] { R1266 += 1 };
  s1 -> s2 [67, 67] { R1266 += 1 };
  s1 -> s1 [68, 65535] { R1266 += 1 };
  s2 -> s2 [0, 64] { R1266 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [67, 65535] { R1266 += 1 };
  accepting s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R1267 += 1, R1268 += 1 };
  s0 -> s1 [0, 65535] { R1268 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R1268 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 66] { R1270 += 1 };
  s0 -> s2 [0, 65535] { R1270 += 1, R14 += 1 };
  s0 -> s0 [0, 65535] { R1269 += 1, R1270 += 1 };
  s0 -> s3 [67, 67] { R1270 += 1 };
  s0 -> s1 [68, 65535] { R1270 += 1 };
  s1 -> s1 [0, 66] { R1270 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [67, 67] { R1270 += 1 };
  s1 -> s1 [68, 65535] { R1270 += 1 };
  s2 -> s1 [0, 66] { R1270 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1270 += 1, R14 += 1 };
  s2 -> s3 [67, 67] { R1270 += 1 };
  s2 -> s1 [68, 65535] { R1270 += 1 };
  s3 -> s3 [0, 65535] { R1270 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 8] { R1272 += 1, R24 += 1 };
  s0 -> s2 [0, 65535] { R1272 += 1, R23 += 1, R24 += 1 };
  s0 -> s0 [0, 65535] { R1271 += 1, R1272 += 1 };
  s0 -> s3 [9, 13] { R1272 += 1, R24 += 1 };
  s0 -> s1 [14, 31] { R1272 += 1, R24 += 1 };
  s0 -> s3 [32, 32] { R1272 += 1, R24 += 1 };
  s0 -> s1 [33, 65535] { R1272 += 1, R24 += 1 };
  s1 -> s1 [0, 65535] { R1272 += 1, R24 += 1 };
  s1 -> s5 [0, 65535] { R1272 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R1272 += 1, R24 += 1 };
  s2 -> s2 [0, 65535] { R1272 += 1, R23 += 1, R24 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R1272 += 1, R24 += 1 };
  s2 -> s1 [14, 31] { R1272 += 1, R24 += 1 };
  s2 -> s3 [32, 32] { R1272 += 1, R24 += 1 };
  s2 -> s1 [33, 65535] { R1272 += 1, R24 += 1 };
  s3 -> s1 [0, 65535] { R1272 += 1, R24 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1272 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 65535] { R1274 += 1, R26 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R1273 += 1, R1274 += 1 };
  s0 -> s2 [0, 65535] { R1274 += 1, R25 += 1, R26 += 1 };
  s1 -> s4 [0, 65535] { R1274 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1274 += 1, R26 += 1, R4 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R1274 += 1, R26 += 1, R4 += 1 };
  s2 -> s2 [0, 65535] { R1274 += 1, R25 += 1, R26 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1274 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 8] { R1276 += 1, R28 += 1 };
  s0 -> s0 [0, 65535] { R1275 += 1, R1276 += 1 };
  s0 -> s2 [0, 65535] { R1276 += 1, R27 += 1, R28 += 1 };
  s0 -> s3 [9, 13] { R1276 += 1, R28 += 1 };
  s0 -> s1 [14, 31] { R1276 += 1, R28 += 1 };
  s0 -> s3 [32, 32] { R1276 += 1, R28 += 1 };
  s0 -> s1 [33, 65535] { R1276 += 1, R28 += 1 };
  s1 -> s1 [0, 65535] { R1276 += 1, R28 += 1 };
  s1 -> s5 [0, 65535] { R1276 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R1276 += 1, R28 += 1 };
  s2 -> s2 [0, 65535] { R1276 += 1, R27 += 1, R28 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R1276 += 1, R28 += 1 };
  s2 -> s1 [14, 31] { R1276 += 1, R28 += 1 };
  s2 -> s3 [32, 32] { R1276 += 1, R28 += 1 };
  s2 -> s1 [33, 65535] { R1276 += 1, R28 += 1 };
  s3 -> s1 [0, 65535] { R1276 += 1, R28 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1276 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s0 [0, 65535] { R1277 += 1, R1278 += 1 };
  s0 -> s1 [0, 65535] { R1278 += 1, R29 += 1, R30 += 1 };
  s0 -> s2 [0, 65535] { R1278 += 1, R30 += 1, R5 += 1 };
  s1 -> s1 [0, 65535] { R1278 += 1, R29 += 1, R30 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R1278 += 1, R30 += 1, R5 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R1278 += 1 };
  s2 -> s2 [0, 65535] { R1278 += 1, R30 += 1, R5 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1278 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 66] { R1280 += 1, R1208 += 1 };
  s0 -> s0 [0, 65535] { R1279 += 1, R1280 += 1 };
  s0 -> s2 [0, 65535] { R1280 += 1, R1207 += 1, R1208 += 1 };
  s0 -> s1 [68, 65535] { R1280 += 1, R1208 += 1 };
  s1 -> s1 [0, 66] { R1280 += 1, R1208 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1280 += 1 };
  s1 -> s1 [68, 65535] { R1280 += 1, R1208 += 1 };
  s2 -> s1 [0, 66] { R1280 += 1, R1208 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1280 += 1, R1207 += 1, R1208 += 1 };
  s2 -> s1 [68, 65535] { R1280 += 1, R1208 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 65535] { R1282 += 1, R1209 += 1, R1210 += 1 };
  s0 -> s0 [0, 65535] { R1281 += 1, R1282 += 1 };
  s0 -> s2 [0, 65535] { R1282 += 1, R1210 += 1, R21 += 1 };
  s1 -> s1 [0, 65535] { R1282 += 1, R1209 += 1, R1210 += 1 };
  s1 -> s2 [0, 65535] { R1282 += 1, R1210 += 1, R21 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R1282 += 1 };
  s2 -> s2 [0, 65535] { R1282 += 1, R1210 += 1, R21 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1282 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 67] { R1284 += 1, R1212 += 1 };
  s0 -> s2 [0, 65535] { R1284 += 1, R1211 += 1, R1212 += 1 };
  s0 -> s0 [0, 65535] { R1283 += 1, R1284 += 1 };
  s0 -> s1 [70, 65535] { R1284 += 1, R1212 += 1 };
  s1 -> s1 [0, 67] { R1284 += 1, R1212 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1284 += 1 };
  s1 -> s1 [70, 65535] { R1284 += 1, R1212 += 1 };
  s2 -> s1 [0, 67] { R1284 += 1, R1212 += 1 };
  s2 -> s2 [0, 65535] { R1284 += 1, R1211 += 1, R1212 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [70, 65535] { R1284 += 1, R1212 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 65535] { R1286 += 1, R1213 += 1, R1214 += 1 };
  s0 -> s0 [0, 65535] { R1285 += 1, R1286 += 1 };
  s0 -> s2 [0, 65535] { R1286 += 1, R1214 += 1, R858 += 1 };
  s1 -> s1 [0, 65535] { R1286 += 1, R1213 += 1, R1214 += 1 };
  s1 -> s2 [0, 65535] { R1286 += 1, R1214 += 1, R858 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R1286 += 1 };
  s2 -> s2 [0, 65535] { R1286 += 1, R1214 += 1, R858 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1286 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 69] { R1288 += 1, R1216 += 1 };
  s0 -> s2 [0, 65535] { R1288 += 1, R1215 += 1, R1216 += 1 };
  s0 -> s3 [0, 65535] { R1288 += 1, R1216 += 1, R860 += 1 };
  s0 -> s0 [0, 65535] { R1287 += 1, R1288 += 1 };
  s0 -> s1 [71, 65535] { R1288 += 1, R1216 += 1 };
  s1 -> s1 [0, 69] { R1288 += 1, R1216 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R1288 += 1 };
  s1 -> s1 [71, 65535] { R1288 += 1, R1216 += 1 };
  s2 -> s1 [0, 69] { R1288 += 1, R1216 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1288 += 1, R1215 += 1, R1216 += 1 };
  s2 -> s3 [0, 65535] { R1288 += 1, R1216 += 1, R860 += 1 };
  s2 -> s1 [71, 65535] { R1288 += 1, R1216 += 1 };
  s3 -> s1 [0, 69] { R1288 += 1, R1216 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1288 += 1, R1216 += 1, R860 += 1 };
  s3 -> s5 [0, 65535] { R1288 += 1 };
  s3 -> s1 [71, 65535] { R1288 += 1, R1216 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1288 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 65535] { R1290 += 1, R1218 += 1, R865 += 1, R866 += 1 };
  s0 -> s2 [0, 65535] { R1290 += 1, R1218 += 1, R864 += 1, R865 += 1 };
  s0 -> s0 [0, 65535] { R1289 += 1, R1290 += 1 };
  s0 -> s3 [0, 65535] { R1290 += 1, R1217 += 1, R1218 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R1290 += 1, R1218 += 1, R865 += 1, R866 += 1 };
  s1 -> s6 [0, 65535] { R1290 += 1, R1218 += 1 };
  s1 -> s5 [0, 65535] { R1290 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R1290 += 1, R1218 += 1, R865 += 1, R866 += 1 };
  s2 -> s2 [0, 65535] { R1290 += 1, R1218 += 1, R864 += 1, R865 += 1 };
  s2 -> s5 [0, 65535] { R1290 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R1290 += 1, R1218 += 1, R865 += 1, R866 += 1 };
  s3 -> s2 [0, 65535] { R1290 += 1, R1218 += 1, R864 += 1, R865 += 1 };
  s3 -> s3 [0, 65535] { R1290 += 1, R1217 += 1, R1218 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1290 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R1290 += 1, R1218 += 1 };
  s6 -> s5 [0, 65535] { R1290 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 69] { R1292 += 1, R1220 += 1, R870 += 1 };
  s0 -> s2 [0, 65535] { R1292 += 1, R1219 += 1, R1220 += 1 };
  s0 -> s3 [0, 65535] { R1292 += 1, R1220 += 1, R869 += 1, R870 += 1 };
  s0 -> s0 [0, 65535] { R1291 += 1, R1292 += 1 };
  s0 -> s4 [70, 70] { R1292 += 1, R1220 += 1, R870 += 1 };
  s0 -> s5 [70, 70] { R1292 += 1, R1220 += 1, R870 += 1 };
  s0 -> s1 [75, 65535] { R1292 += 1, R1220 += 1, R870 += 1 };
  s1 -> s1 [0, 69] { R1292 += 1, R1220 += 1, R870 += 1 };
  s1 -> s6 [0, 65535] { R1292 += 1 };
  s1 -> s1 [0, 65535] { R1292 += 1, R1220 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s4 [70, 70] { R1292 += 1, R1220 += 1, R870 += 1 };
  s1 -> s5 [70, 70] { R1292 += 1, R1220 += 1, R870 += 1 };
  s1 -> s1 [75, 65535] { R1292 += 1, R1220 += 1, R870 += 1 };
  s2 -> s1 [0, 69] { R1292 += 1, R1220 += 1, R870 += 1 };
  s2 -> s2 [0, 65535] { R1292 += 1, R1219 += 1, R1220 += 1 };
  s2 -> s3 [0, 65535] { R1292 += 1, R1220 += 1, R869 += 1, R870 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s4 [70, 70] { R1292 += 1, R1220 += 1, R870 += 1 };
  s2 -> s5 [70, 70] { R1292 += 1, R1220 += 1, R870 += 1 };
  s2 -> s1 [75, 65535] { R1292 += 1, R1220 += 1, R870 += 1 };
  s3 -> s1 [0, 69] { R1292 += 1, R1220 += 1, R870 += 1 };
  s3 -> s6 [0, 65535] { R1292 += 1 };
  s3 -> s3 [0, 65535] { R1292 += 1, R1220 += 1, R869 += 1, R870 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s4 [70, 70] { R1292 += 1, R1220 += 1, R870 += 1 };
  s3 -> s5 [70, 70] { R1292 += 1, R1220 += 1, R870 += 1 };
  s3 -> s1 [75, 65535] { R1292 += 1, R1220 += 1, R870 += 1 };
  s4 -> s4 [0, 70] { R1292 += 1, R1220 += 1, R870 += 1 };
  s4 -> s6 [0, 65535] { R1292 += 1 };
  s4 -> s4 [0, 65535] { R1292 += 1, R1220 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s4 [75, 65535] { R1292 += 1, R1220 += 1, R870 += 1 };
  s5 -> s6 [0, 65535] { R1292 += 1 };
  s5 -> s7 [0, 65535];
  s5 -> s5 [0, 65535] { R1292 += 1, R1220 += 1 };
  s6 -> s6 [0, 65535] { R1292 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 69] { R1294 += 1, R1222 += 1, R874 += 1 };
  s0 -> s2 [0, 65535] { R1294 += 1, R1221 += 1, R1222 += 1 };
  s0 -> s0 [0, 65535] { R1293 += 1, R1294 += 1 };
  s0 -> s3 [0, 65535] { R1294 += 1, R1222 += 1, R873 += 1, R874 += 1 };
  s0 -> s4 [70, 70] { R1294 += 1, R1222 += 1, R874 += 1 };
  s0 -> s1 [71, 65535] { R1294 += 1, R1222 += 1, R874 += 1 };
  s1 -> s1 [0, 69] { R1294 += 1, R1222 += 1, R874 += 1 };
  s1 -> s4 [70, 70] { R1294 += 1, R1222 += 1, R874 += 1 };
  s1 -> s1 [71, 65535] { R1294 += 1, R1222 += 1, R874 += 1 };
  s2 -> s1 [0, 69] { R1294 += 1, R1222 += 1, R874 += 1 };
  s2 -> s2 [0, 65535] { R1294 += 1, R1221 += 1, R1222 += 1 };
  s2 -> s3 [0, 65535] { R1294 += 1, R1222 += 1, R873 += 1, R874 += 1 };
  s2 -> s4 [70, 70] { R1294 += 1, R1222 += 1, R874 += 1 };
  s2 -> s1 [71, 65535] { R1294 += 1, R1222 += 1, R874 += 1 };
  s3 -> s1 [0, 69] { R1294 += 1, R1222 += 1, R874 += 1 };
  s3 -> s3 [0, 65535] { R1294 += 1, R1222 += 1, R873 += 1, R874 += 1 };
  s3 -> s4 [70, 70] { R1294 += 1, R1222 += 1, R874 += 1 };
  s3 -> s1 [71, 65535] { R1294 += 1, R1222 += 1, R874 += 1 };
  s4 -> s5 [0, 65535] { R1294 += 1, R1222 += 1 };
  s4 -> s6 [0, 65535] { R1294 += 1 };
  s4 -> s4 [0, 65535] { R1294 += 1, R1222 += 1, R874 += 1 };
  s4 -> s7 [0, 65535];
  s5 -> s5 [0, 65535] { R1294 += 1, R1222 += 1 };
  s5 -> s6 [0, 65535] { R1294 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s6 [0, 65535] { R1294 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s4, s5, s6, s7;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 65535] { R1296 += 1, R1224 += 1, R878 += 1, R879 += 1 };
  s0 -> s2 [0, 65535] { R1296 += 1, R1224 += 1, R879 += 1, R880 += 1 };
  s0 -> s0 [0, 65535] { R1295 += 1, R1296 += 1 };
  s0 -> s3 [0, 65535] { R1296 += 1, R1223 += 1, R1224 += 1 };
  s1 -> s1 [0, 65535] { R1296 += 1, R1224 += 1, R878 += 1, R879 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R1296 += 1, R1224 += 1, R879 += 1, R880 += 1 };
  s1 -> s6 [0, 65535] { R1296 += 1 };
  s2 -> s5 [0, 65535] { R1296 += 1, R1224 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1296 += 1, R1224 += 1, R879 += 1, R880 += 1 };
  s2 -> s6 [0, 65535] { R1296 += 1 };
  s3 -> s1 [0, 65535] { R1296 += 1, R1224 += 1, R878 += 1, R879 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R1296 += 1, R1224 += 1, R879 += 1, R880 += 1 };
  s3 -> s3 [0, 65535] { R1296 += 1, R1223 += 1, R1224 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1296 += 1, R1224 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s6 [0, 65535] { R1296 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R1296 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 69] { R1298 += 1, R1226 += 1, R885 += 1 };
  s0 -> s2 [0, 65535] { R1298 += 1, R1226 += 1, R884 += 1, R885 += 1 };
  s0 -> s3 [0, 65535] { R1298 += 1, R1225 += 1, R1226 += 1 };
  s0 -> s4 [0, 65535] { R1298 += 1, R1226 += 1, R885 += 1, R886 += 1 };
  s0 -> s0 [0, 65535] { R1297 += 1, R1298 += 1 };
  s0 -> s1 [71, 65535] { R1298 += 1, R1226 += 1, R885 += 1 };
  s1 -> s1 [0, 69] { R1298 += 1, R1226 += 1, R885 += 1 };
  s1 -> s5 [0, 65535] { R1298 += 1 };
  s1 -> s1 [0, 65535] { R1298 += 1, R1226 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s1 [71, 65535] { R1298 += 1, R1226 += 1, R885 += 1 };
  s2 -> s1 [0, 69] { R1298 += 1, R1226 += 1, R885 += 1 };
  s2 -> s5 [0, 65535] { R1298 += 1 };
  s2 -> s2 [0, 65535] { R1298 += 1, R1226 += 1, R884 += 1, R885 += 1 };
  s2 -> s4 [0, 65535] { R1298 += 1, R1226 += 1, R885 += 1, R886 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s1 [71, 65535] { R1298 += 1, R1226 += 1, R885 += 1 };
  s3 -> s1 [0, 69] { R1298 += 1, R1226 += 1, R885 += 1 };
  s3 -> s2 [0, 65535] { R1298 += 1, R1226 += 1, R884 += 1, R885 += 1 };
  s3 -> s3 [0, 65535] { R1298 += 1, R1225 += 1, R1226 += 1 };
  s3 -> s4 [0, 65535] { R1298 += 1, R1226 += 1, R885 += 1, R886 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s1 [71, 65535] { R1298 += 1, R1226 += 1, R885 += 1 };
  s4 -> s1 [0, 69] { R1298 += 1, R1226 += 1, R885 += 1 };
  s4 -> s5 [0, 65535] { R1298 += 1 };
  s4 -> s6 [0, 65535] { R1298 += 1, R1226 += 1 };
  s4 -> s4 [0, 65535] { R1298 += 1, R1226 += 1, R885 += 1, R886 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s1 [71, 65535] { R1298 += 1, R1226 += 1, R885 += 1 };
  s5 -> s5 [0, 65535] { R1298 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s5 [0, 65535] { R1298 += 1 };
  s6 -> s6 [0, 65535] { R1298 += 1, R1226 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 69] { R1300 += 1, R1228 += 1, R892 += 1, R894 += 1 };
  s0 -> s2 [0, 65535] { R1300 += 1, R1227 += 1, R1228 += 1 };
  s0 -> s3 [0, 65535] { R1300 += 1, R1228 += 1, R892 += 1, R893 += 1, R894 += 1 };
  s0 -> s4 [0, 65535] { R1300 += 1, R1228 += 1, R891 += 1, R892 += 1 };
  s0 -> s0 [0, 65535] { R1299 += 1, R1300 += 1 };
  s0 -> s1 [71, 65535] { R1300 += 1, R1228 += 1, R892 += 1, R894 += 1 };
  s1 -> s1 [0, 69] { R1300 += 1, R1228 += 1, R892 += 1, R894 += 1 };
  s1 -> s7 [0, 65535] { R1300 += 1, R1228 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1300 += 1, R1228 += 1, R892 += 1 };
  s1 -> s6 [0, 65535] { R1300 += 1 };
  s1 -> s1 [71, 65535] { R1300 += 1, R1228 += 1, R892 += 1, R894 += 1 };
  s2 -> s1 [0, 69] { R1300 += 1, R1228 += 1, R892 += 1, R894 += 1 };
  s2 -> s2 [0, 65535] { R1300 += 1, R1227 += 1, R1228 += 1 };
  s2 -> s3 [0, 65535] { R1300 += 1, R1228 += 1, R892 += 1, R893 += 1, R894 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [0, 65535] { R1300 += 1, R1228 += 1, R891 += 1, R892 += 1 };
  s2 -> s1 [71, 65535] { R1300 += 1, R1228 += 1, R892 += 1, R894 += 1 };
  s3 -> s1 [0, 69] { R1300 += 1, R1228 += 1, R892 += 1, R894 += 1 };
  s3 -> s7 [0, 65535] { R1300 += 1, R1228 += 1 };
  s3 -> s3 [0, 65535] { R1300 += 1, R1228 += 1, R892 += 1, R893 += 1, R894 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R1300 += 1 };
  s3 -> s1 [71, 65535] { R1300 += 1, R1228 += 1, R892 += 1, R894 += 1 };
  s4 -> s1 [0, 69] { R1300 += 1, R1228 += 1, R892 += 1, R894 += 1 };
  s4 -> s3 [0, 65535] { R1300 += 1, R1228 += 1, R892 += 1, R893 += 1, R894 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R1300 += 1 };
  s4 -> s4 [0, 65535] { R1300 += 1, R1228 += 1, R891 += 1, R892 += 1 };
  s4 -> s1 [71, 65535] { R1300 += 1, R1228 += 1, R892 += 1, R894 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1300 += 1 };
  s7 -> s7 [0, 65535] { R1300 += 1, R1228 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R1300 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 65535] { R1302 += 1, R1230 += 1, R901 += 1, R902 += 1, R903 += 1 };
  s0 -> s2 [0, 65535] { R1302 += 1, R1230 += 1, R901 += 1, R903 += 1, R904 += 1 };
  s0 -> s0 [0, 65535] { R1301 += 1, R1302 += 1 };
  s0 -> s3 [0, 65535] { R1302 += 1, R1230 += 1, R900 += 1, R901 += 1 };
  s0 -> s4 [0, 65535] { R1302 += 1, R1229 += 1, R1230 += 1 };
  s1 -> s1 [0, 65535] { R1302 += 1, R1230 += 1, R901 += 1, R902 += 1, R903 += 1 };
  s1 -> s2 [0, 65535] { R1302 += 1, R1230 += 1, R901 += 1, R903 += 1, R904 += 1 };
  s1 -> s6 [0, 65535] { R1302 += 1 };
  s1 -> s8 [0, 65535] { R1302 += 1, R1230 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s7 [0, 65535] { R1302 += 1, R1230 += 1, R901 += 1 };
  s2 -> s2 [0, 65535] { R1302 += 1, R1230 += 1, R901 += 1, R903 += 1, R904 += 1 };
  s2 -> s6 [0, 65535] { R1302 += 1 };
  s2 -> s8 [0, 65535] { R1302 += 1, R1230 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s1 [0, 65535] { R1302 += 1, R1230 += 1, R901 += 1, R902 += 1, R903 += 1 };
  s3 -> s2 [0, 65535] { R1302 += 1, R1230 += 1, R901 += 1, R903 += 1, R904 += 1 };
  s3 -> s3 [0, 65535] { R1302 += 1, R1230 += 1, R900 += 1, R901 += 1 };
  s3 -> s6 [0, 65535] { R1302 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s1 [0, 65535] { R1302 += 1, R1230 += 1, R901 += 1, R902 += 1, R903 += 1 };
  s4 -> s2 [0, 65535] { R1302 += 1, R1230 += 1, R901 += 1, R903 += 1, R904 += 1 };
  s4 -> s3 [0, 65535] { R1302 += 1, R1230 += 1, R900 += 1, R901 += 1 };
  s4 -> s4 [0, 65535] { R1302 += 1, R1229 += 1, R1230 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1302 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R1302 += 1, R1230 += 1, R901 += 1 };
  s7 -> s6 [0, 65535] { R1302 += 1 };
  s7 -> s8 [0, 65535] { R1302 += 1, R1230 += 1 };
  s7 -> s5 [0, 65535];
  s8 -> s6 [0, 65535] { R1302 += 1 };
  s8 -> s8 [0, 65535] { R1302 += 1, R1230 += 1 };
  s8 -> s5 [0, 65535];
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 70] { R1304 += 1, R1232 += 1, R910 += 1, R912 += 1 };
  s0 -> s2 [0, 65535] { R1304 += 1, R1231 += 1, R1232 += 1 };
  s0 -> s0 [0, 65535] { R1303 += 1, R1304 += 1 };
  s0 -> s3 [0, 65535] { R1304 += 1, R1232 += 1, R910 += 1, R911 += 1, R912 += 1 };
  s0 -> s4 [0, 65535] { R1304 += 1, R1232 += 1, R909 += 1, R910 += 1 };
  s0 -> s1 [74, 65535] { R1304 += 1, R1232 += 1, R910 += 1, R912 += 1 };
  s1 -> s1 [0, 70] { R1304 += 1, R1232 += 1, R910 += 1, R912 += 1 };
  s1 -> s7 [0, 65535] { R1304 += 1, R1232 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R1304 += 1 };
  s1 -> s1 [0, 65535] { R1304 += 1, R1232 += 1, R910 += 1 };
  s1 -> s1 [74, 65535] { R1304 += 1, R1232 += 1, R910 += 1, R912 += 1 };
  s2 -> s1 [0, 70] { R1304 += 1, R1232 += 1, R910 += 1, R912 += 1 };
  s2 -> s2 [0, 65535] { R1304 += 1, R1231 += 1, R1232 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R1304 += 1, R1232 += 1, R910 += 1, R911 += 1, R912 += 1 };
  s2 -> s4 [0, 65535] { R1304 += 1, R1232 += 1, R909 += 1, R910 += 1 };
  s2 -> s1 [74, 65535] { R1304 += 1, R1232 += 1, R910 += 1, R912 += 1 };
  s3 -> s1 [0, 70] { R1304 += 1, R1232 += 1, R910 += 1, R912 += 1 };
  s3 -> s7 [0, 65535] { R1304 += 1, R1232 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R1304 += 1 };
  s3 -> s3 [0, 65535] { R1304 += 1, R1232 += 1, R910 += 1, R911 += 1, R912 += 1 };
  s3 -> s1 [74, 65535] { R1304 += 1, R1232 += 1, R910 += 1, R912 += 1 };
  s4 -> s1 [0, 70] { R1304 += 1, R1232 += 1, R910 += 1, R912 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R1304 += 1 };
  s4 -> s3 [0, 65535] { R1304 += 1, R1232 += 1, R910 += 1, R911 += 1, R912 += 1 };
  s4 -> s4 [0, 65535] { R1304 += 1, R1232 += 1, R909 += 1, R910 += 1 };
  s4 -> s1 [74, 65535] { R1304 += 1, R1232 += 1, R910 += 1, R912 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1304 += 1 };
  s7 -> s7 [0, 65535] { R1304 += 1, R1232 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R1304 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 65535] { R1306 += 1, R1234 += 1, R918 += 1, R919 += 1 };
  s0 -> s2 [0, 65535] { R1306 += 1, R1234 += 1, R919 += 1, R920 += 1, R921 += 1 };
  s0 -> s3 [0, 65535] { R1306 += 1, R1233 += 1, R1234 += 1 };
  s0 -> s4 [0, 65535] { R1306 += 1, R1234 += 1, R919 += 1, R921 += 1, R922 += 1 };
  s0 -> s0 [0, 65535] { R1305 += 1, R1306 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1306 += 1, R1234 += 1, R918 += 1, R919 += 1 };
  s1 -> s2 [0, 65535] { R1306 += 1, R1234 += 1, R919 += 1, R920 += 1, R921 += 1 };
  s1 -> s6 [0, 65535] { R1306 += 1 };
  s1 -> s4 [0, 65535] { R1306 += 1, R1234 += 1, R919 += 1, R921 += 1, R922 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1306 += 1, R1234 += 1, R919 += 1, R920 += 1, R921 += 1 };
  s2 -> s6 [0, 65535] { R1306 += 1 };
  s2 -> s4 [0, 65535] { R1306 += 1, R1234 += 1, R919 += 1, R921 += 1, R922 += 1 };
  s2 -> s7 [0, 65535] { R1306 += 1, R1234 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [0, 65535] { R1306 += 1, R1234 += 1, R918 += 1, R919 += 1 };
  s3 -> s2 [0, 65535] { R1306 += 1, R1234 += 1, R919 += 1, R920 += 1, R921 += 1 };
  s3 -> s3 [0, 65535] { R1306 += 1, R1233 += 1, R1234 += 1 };
  s3 -> s4 [0, 65535] { R1306 += 1, R1234 += 1, R919 += 1, R921 += 1, R922 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R1306 += 1 };
  s4 -> s4 [0, 65535] { R1306 += 1, R1234 += 1, R919 += 1, R921 += 1, R922 += 1 };
  s4 -> s7 [0, 65535] { R1306 += 1, R1234 += 1 };
  s4 -> s8 [0, 65535] { R1306 += 1, R1234 += 1, R919 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1306 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R1306 += 1 };
  s7 -> s7 [0, 65535] { R1306 += 1, R1234 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s6 [0, 65535] { R1306 += 1 };
  s8 -> s7 [0, 65535] { R1306 += 1, R1234 += 1 };
  s8 -> s8 [0, 65535] { R1306 += 1, R1234 += 1, R919 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 69] { R1308 += 1, R1236 += 1, R1204 += 1, R1206 += 1 };
  s0 -> s0 [0, 65535] { R1307 += 1, R1308 += 1 };
  s0 -> s2 [0, 65535] { R1308 += 1, R1236 += 1, R1204 += 1, R1205 += 1, R1206 += 1 };
  s0 -> s3 [0, 65535] { R1308 += 1, R1235 += 1, R1236 += 1 };
  s0 -> s4 [70, 70] { R1308 += 1, R1236 += 1, R1204 += 1, R1206 += 1 };
  s0 -> s5 [74, 74] { R1308 += 1, R1236 += 1, R1204 += 1, R1206 += 1 };
  s0 -> s1 [75, 65535] { R1308 += 1, R1236 += 1, R1204 += 1, R1206 += 1 };
  s1 -> s1 [0, 69] { R1308 += 1, R1236 += 1, R1204 += 1, R1206 += 1 };
  s1 -> s4 [70, 70] { R1308 += 1, R1236 += 1, R1204 += 1, R1206 += 1 };
  s1 -> s5 [74, 74] { R1308 += 1, R1236 += 1, R1204 += 1, R1206 += 1 };
  s1 -> s1 [75, 65535] { R1308 += 1, R1236 += 1, R1204 += 1, R1206 += 1 };
  s2 -> s1 [0, 69] { R1308 += 1, R1236 += 1, R1204 += 1, R1206 += 1 };
  s2 -> s2 [0, 65535] { R1308 += 1, R1236 += 1, R1204 += 1, R1205 += 1, R1206 += 1 };
  s2 -> s4 [70, 70] { R1308 += 1, R1236 += 1, R1204 += 1, R1206 += 1 };
  s2 -> s5 [74, 74] { R1308 += 1, R1236 += 1, R1204 += 1, R1206 += 1 };
  s2 -> s1 [75, 65535] { R1308 += 1, R1236 += 1, R1204 += 1, R1206 += 1 };
  s3 -> s1 [0, 69] { R1308 += 1, R1236 += 1, R1204 += 1, R1206 += 1 };
  s3 -> s2 [0, 65535] { R1308 += 1, R1236 += 1, R1204 += 1, R1205 += 1, R1206 += 1 };
  s3 -> s3 [0, 65535] { R1308 += 1, R1235 += 1, R1236 += 1 };
  s3 -> s4 [70, 70] { R1308 += 1, R1236 += 1, R1204 += 1, R1206 += 1 };
  s3 -> s5 [74, 74] { R1308 += 1, R1236 += 1, R1204 += 1, R1206 += 1 };
  s3 -> s1 [75, 65535] { R1308 += 1, R1236 += 1, R1204 += 1, R1206 += 1 };
  s4 -> s4 [0, 70] { R1308 += 1, R1236 += 1, R1204 += 1, R1206 += 1 };
  s4 -> s10 [74, 74] { R1308 += 1, R1236 += 1, R1204 += 1, R1206 += 1 };
  s4 -> s4 [75, 65535] { R1308 += 1, R1236 += 1, R1204 += 1, R1206 += 1 };
  s5 -> s5 [0, 69] { R1308 += 1, R1236 += 1, R1204 += 1, R1206 += 1 };
  s5 -> s6 [0, 65535] { R1308 += 1 };
  s5 -> s7 [0, 65535] { R1308 += 1, R1236 += 1 };
  s5 -> s5 [0, 65535] { R1308 += 1, R1236 += 1, R1204 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s9 [70, 70] { R1308 += 1, R1236 += 1, R1204 += 1, R1206 += 1 };
  s5 -> s10 [70, 70] { R1308 += 1, R1236 += 1, R1204 += 1, R1206 += 1 };
  s5 -> s5 [74, 65535] { R1308 += 1, R1236 += 1, R1204 += 1, R1206 += 1 };
  s6 -> s6 [0, 65535] { R1308 += 1 };
  s6 -> s8 [0, 65535];
  s7 -> s6 [0, 65535] { R1308 += 1 };
  s7 -> s7 [0, 65535] { R1308 += 1, R1236 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  s9 -> s6 [0, 65535] { R1308 += 1 };
  s9 -> s9 [0, 65535] { R1308 += 1, R1236 += 1, R1204 += 1 };
  s9 -> s7 [0, 65535] { R1308 += 1, R1236 += 1 };
  s9 -> s8 [0, 65535];
  s10 -> s10 [0, 70] { R1308 += 1, R1236 += 1, R1204 += 1, R1206 += 1 };
  s10 -> s6 [0, 65535] { R1308 += 1 };
  s10 -> s7 [0, 65535] { R1308 += 1, R1236 += 1 };
  s10 -> s8 [0, 65535];
  s10 -> s10 [0, 65535] { R1308 += 1, R1236 += 1, R1204 += 1 };
  s10 -> s10 [74, 65535] { R1308 += 1, R1236 += 1, R1204 += 1, R1206 += 1 };
  accepting s8, s5, s9, s6, s7, s10;
};
automaton value2_29 {
  init s0;
  s0 -> s0 [0, 65535] { R1309 += 1, R1310 += 1 };
  s0 -> s1 [0, 65535] { R1310 += 1, R1238 += 1, R22 += 1 };
  s0 -> s2 [0, 65535] { R1310 += 1, R1237 += 1, R1238 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R1310 += 1 };
  s1 -> s1 [0, 65535] { R1310 += 1, R1238 += 1, R22 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R1310 += 1, R1238 += 1, R22 += 1 };
  s2 -> s2 [0, 65535] { R1310 += 1, R1237 += 1, R1238 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1310 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 66] { R1312 += 1, R1240 += 1 };
  s0 -> s0 [0, 65535] { R1311 += 1, R1312 += 1 };
  s0 -> s2 [0, 65535] { R1312 += 1, R1239 += 1, R1240 += 1 };
  s0 -> s3 [67, 67] { R1312 += 1, R1240 += 1 };
  s0 -> s4 [67, 67] { R1312 += 1, R1240 += 1 };
  s0 -> s5 [70, 70] { R1312 += 1, R1240 += 1 };
  s0 -> s1 [71, 65535] { R1312 += 1, R1240 += 1 };
  s1 -> s1 [0, 66] { R1312 += 1, R1240 += 1 };
  s1 -> s3 [67, 67] { R1312 += 1, R1240 += 1 };
  s1 -> s4 [67, 67] { R1312 += 1, R1240 += 1 };
  s1 -> s5 [70, 70] { R1312 += 1, R1240 += 1 };
  s1 -> s1 [71, 65535] { R1312 += 1, R1240 += 1 };
  s2 -> s1 [0, 66] { R1312 += 1, R1240 += 1 };
  s2 -> s2 [0, 65535] { R1312 += 1, R1239 += 1, R1240 += 1 };
  s2 -> s3 [67, 67] { R1312 += 1, R1240 += 1 };
  s2 -> s4 [67, 67] { R1312 += 1, R1240 += 1 };
  s2 -> s5 [70, 70] { R1312 += 1, R1240 += 1 };
  s2 -> s1 [71, 65535] { R1312 += 1, R1240 += 1 };
  s4 -> s4 [0, 67] { R1312 += 1, R1240 += 1 };
  s4 -> s7 [70, 70] { R1312 += 1, R1240 += 1 };
  s4 -> s4 [71, 65535] { R1312 += 1, R1240 += 1 };
  s5 -> s5 [0, 66] { R1312 += 1, R1240 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R1312 += 1 };
  s5 -> s7 [67, 67] { R1312 += 1, R1240 += 1 };
  s5 -> s8 [67, 67] { R1312 += 1, R1240 += 1 };
  s5 -> s5 [70, 65535] { R1312 += 1, R1240 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 67] { R1312 += 1, R1240 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R1312 += 1 };
  s7 -> s7 [70, 65535] { R1312 += 1, R1240 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R1312 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 66] { R1314 += 1, R1242 += 1, R857 += 1 };
  s0 -> s2 [0, 65535] { R1314 += 1, R1241 += 1, R1242 += 1 };
  s0 -> s0 [0, 65535] { R1313 += 1, R1314 += 1 };
  s0 -> s3 [67, 67] { R1314 += 1, R1242 += 1, R857 += 1 };
  s0 -> s4 [67, 67] { R1314 += 1, R1242 += 1, R857 += 1 };
  s0 -> s1 [68, 65535] { R1314 += 1, R1242 += 1, R857 += 1 };
  s1 -> s1 [0, 66] { R1314 += 1, R1242 += 1, R857 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1314 += 1 };
  s1 -> s3 [67, 67] { R1314 += 1, R1242 += 1, R857 += 1 };
  s1 -> s4 [67, 67] { R1314 += 1, R1242 += 1, R857 += 1 };
  s1 -> s1 [68, 65535] { R1314 += 1, R1242 += 1, R857 += 1 };
  s2 -> s1 [0, 66] { R1314 += 1, R1242 += 1, R857 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1314 += 1, R1241 += 1, R1242 += 1 };
  s2 -> s3 [67, 67] { R1314 += 1, R1242 += 1, R857 += 1 };
  s2 -> s4 [67, 67] { R1314 += 1, R1242 += 1, R857 += 1 };
  s2 -> s1 [68, 65535] { R1314 += 1, R1242 += 1, R857 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R1314 += 1, R1242 += 1, R857 += 1 };
  s3 -> s6 [0, 65535] { R1314 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1314 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1314 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 66] { R1316 += 1, R1244 += 1, R859 += 1 };
  s0 -> s2 [0, 65535] { R1316 += 1, R1243 += 1, R1244 += 1 };
  s0 -> s0 [0, 65535] { R1315 += 1, R1316 += 1 };
  s0 -> s3 [67, 67] { R1316 += 1, R1244 += 1, R859 += 1 };
  s0 -> s4 [67, 67] { R1316 += 1, R1244 += 1, R859 += 1 };
  s0 -> s1 [68, 65535] { R1316 += 1, R1244 += 1, R859 += 1 };
  s1 -> s1 [0, 66] { R1316 += 1, R1244 += 1, R859 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R1316 += 1 };
  s1 -> s3 [67, 67] { R1316 += 1, R1244 += 1, R859 += 1 };
  s1 -> s4 [67, 67] { R1316 += 1, R1244 += 1, R859 += 1 };
  s1 -> s1 [68, 65535] { R1316 += 1, R1244 += 1, R859 += 1 };
  s2 -> s1 [0, 66] { R1316 += 1, R1244 += 1, R859 += 1 };
  s2 -> s2 [0, 65535] { R1316 += 1, R1243 += 1, R1244 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [67, 67] { R1316 += 1, R1244 += 1, R859 += 1 };
  s2 -> s4 [67, 67] { R1316 += 1, R1244 += 1, R859 += 1 };
  s2 -> s1 [68, 65535] { R1316 += 1, R1244 += 1, R859 += 1 };
  s3 -> s3 [0, 65535] { R1316 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R1316 += 1, R1244 += 1, R859 += 1 };
  s4 -> s5 [0, 65535] { R1316 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R1316 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 66] { R1318 += 1, R1246 += 1, R861 += 1, R862 += 1 };
  s0 -> s0 [0, 65535] { R1317 += 1, R1318 += 1 };
  s0 -> s2 [0, 65535] { R1318 += 1, R1245 += 1, R1246 += 1 };
  s0 -> s3 [67, 67] { R1318 += 1, R1246 += 1, R861 += 1, R862 += 1 };
  s0 -> s4 [67, 67] { R1318 += 1, R1246 += 1, R861 += 1, R862 += 1 };
  s0 -> s1 [68, 65535] { R1318 += 1, R1246 += 1, R861 += 1, R862 += 1 };
  s1 -> s1 [0, 66] { R1318 += 1, R1246 += 1, R861 += 1, R862 += 1 };
  s1 -> s1 [0, 65535] { R1318 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [67, 67] { R1318 += 1, R1246 += 1, R861 += 1, R862 += 1 };
  s1 -> s4 [67, 67] { R1318 += 1, R1246 += 1, R861 += 1, R862 += 1 };
  s1 -> s1 [68, 65535] { R1318 += 1, R1246 += 1, R861 += 1, R862 += 1 };
  s2 -> s1 [0, 66] { R1318 += 1, R1246 += 1, R861 += 1, R862 += 1 };
  s2 -> s2 [0, 65535] { R1318 += 1, R1245 += 1, R1246 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [67, 67] { R1318 += 1, R1246 += 1, R861 += 1, R862 += 1 };
  s2 -> s4 [67, 67] { R1318 += 1, R1246 += 1, R861 += 1, R862 += 1 };
  s2 -> s1 [68, 65535] { R1318 += 1, R1246 += 1, R861 += 1, R862 += 1 };
  s3 -> s6 [0, 65535] { R1318 += 1 };
  s3 -> s3 [0, 65535] { R1318 += 1, R1246 += 1, R861 += 1, R862 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1318 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1318 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 66] { R1320 += 1, R1248 += 1, R867 += 1, R868 += 1 };
  s0 -> s2 [0, 65535] { R1320 += 1, R1247 += 1, R1248 += 1 };
  s0 -> s0 [0, 65535] { R1319 += 1, R1320 += 1 };
  s0 -> s3 [67, 67] { R1320 += 1, R1248 += 1, R867 += 1, R868 += 1 };
  s0 -> s4 [67, 67] { R1320 += 1, R1248 += 1, R867 += 1, R868 += 1 };
  s0 -> s1 [68, 65535] { R1320 += 1, R1248 += 1, R867 += 1, R868 += 1 };
  s1 -> s1 [0, 66] { R1320 += 1, R1248 += 1, R867 += 1, R868 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1320 += 1 };
  s1 -> s3 [67, 67] { R1320 += 1, R1248 += 1, R867 += 1, R868 += 1 };
  s1 -> s4 [67, 67] { R1320 += 1, R1248 += 1, R867 += 1, R868 += 1 };
  s1 -> s1 [68, 65535] { R1320 += 1, R1248 += 1, R867 += 1, R868 += 1 };
  s2 -> s1 [0, 66] { R1320 += 1, R1248 += 1, R867 += 1, R868 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1320 += 1, R1247 += 1, R1248 += 1 };
  s2 -> s3 [67, 67] { R1320 += 1, R1248 += 1, R867 += 1, R868 += 1 };
  s2 -> s4 [67, 67] { R1320 += 1, R1248 += 1, R867 += 1, R868 += 1 };
  s2 -> s1 [68, 65535] { R1320 += 1, R1248 += 1, R867 += 1, R868 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R1320 += 1, R1248 += 1, R867 += 1, R868 += 1 };
  s3 -> s6 [0, 65535] { R1320 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1320 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1320 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 66] { R1322 += 1, R1250 += 1, R871 += 1, R872 += 1 };
  s0 -> s0 [0, 65535] { R1321 += 1, R1322 += 1 };
  s0 -> s2 [0, 65535] { R1322 += 1, R1249 += 1, R1250 += 1 };
  s0 -> s3 [67, 67] { R1322 += 1, R1250 += 1, R871 += 1, R872 += 1 };
  s0 -> s4 [67, 67] { R1322 += 1, R1250 += 1, R871 += 1, R872 += 1 };
  s0 -> s1 [68, 65535] { R1322 += 1, R1250 += 1, R871 += 1, R872 += 1 };
  s1 -> s1 [0, 66] { R1322 += 1, R1250 += 1, R871 += 1, R872 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1322 += 1 };
  s1 -> s3 [67, 67] { R1322 += 1, R1250 += 1, R871 += 1, R872 += 1 };
  s1 -> s4 [67, 67] { R1322 += 1, R1250 += 1, R871 += 1, R872 += 1 };
  s1 -> s1 [68, 65535] { R1322 += 1, R1250 += 1, R871 += 1, R872 += 1 };
  s2 -> s1 [0, 66] { R1322 += 1, R1250 += 1, R871 += 1, R872 += 1 };
  s2 -> s2 [0, 65535] { R1322 += 1, R1249 += 1, R1250 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [67, 67] { R1322 += 1, R1250 += 1, R871 += 1, R872 += 1 };
  s2 -> s4 [67, 67] { R1322 += 1, R1250 += 1, R871 += 1, R872 += 1 };
  s2 -> s1 [68, 65535] { R1322 += 1, R1250 += 1, R871 += 1, R872 += 1 };
  s3 -> s3 [0, 65535] { R1322 += 1, R1250 += 1, R871 += 1, R872 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R1322 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1322 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1322 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 66] { R1324 += 1, R1252 += 1, R875 += 1, R876 += 1 };
  s0 -> s2 [0, 65535] { R1324 += 1, R1251 += 1, R1252 += 1 };
  s0 -> s0 [0, 65535] { R1323 += 1, R1324 += 1 };
  s0 -> s3 [67, 67] { R1324 += 1, R1252 += 1, R875 += 1, R876 += 1 };
  s0 -> s4 [67, 67] { R1324 += 1, R1252 += 1, R875 += 1, R876 += 1 };
  s0 -> s1 [68, 65535] { R1324 += 1, R1252 += 1, R875 += 1, R876 += 1 };
  s1 -> s1 [0, 66] { R1324 += 1, R1252 += 1, R875 += 1, R876 += 1 };
  s1 -> s1 [0, 65535] { R1324 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [67, 67] { R1324 += 1, R1252 += 1, R875 += 1, R876 += 1 };
  s1 -> s4 [67, 67] { R1324 += 1, R1252 += 1, R875 += 1, R876 += 1 };
  s1 -> s1 [68, 65535] { R1324 += 1, R1252 += 1, R875 += 1, R876 += 1 };
  s2 -> s1 [0, 66] { R1324 += 1, R1252 += 1, R875 += 1, R876 += 1 };
  s2 -> s2 [0, 65535] { R1324 += 1, R1251 += 1, R1252 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [67, 67] { R1324 += 1, R1252 += 1, R875 += 1, R876 += 1 };
  s2 -> s4 [67, 67] { R1324 += 1, R1252 += 1, R875 += 1, R876 += 1 };
  s2 -> s1 [68, 65535] { R1324 += 1, R1252 += 1, R875 += 1, R876 += 1 };
  s3 -> s3 [0, 65535] { R1324 += 1, R1252 += 1, R875 += 1, R876 += 1 };
  s3 -> s6 [0, 65535] { R1324 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1324 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1324 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 66] { R1326 += 1, R1254 += 1, R881 += 1, R882 += 1 };
  s0 -> s2 [0, 65535] { R1326 += 1, R1253 += 1, R1254 += 1 };
  s0 -> s0 [0, 65535] { R1325 += 1, R1326 += 1 };
  s0 -> s3 [67, 67] { R1326 += 1, R1254 += 1, R881 += 1, R882 += 1 };
  s0 -> s4 [67, 67] { R1326 += 1, R1254 += 1, R881 += 1, R882 += 1 };
  s0 -> s1 [68, 65535] { R1326 += 1, R1254 += 1, R881 += 1, R882 += 1 };
  s1 -> s1 [0, 66] { R1326 += 1, R1254 += 1, R881 += 1, R882 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1326 += 1 };
  s1 -> s3 [67, 67] { R1326 += 1, R1254 += 1, R881 += 1, R882 += 1 };
  s1 -> s4 [67, 67] { R1326 += 1, R1254 += 1, R881 += 1, R882 += 1 };
  s1 -> s1 [68, 65535] { R1326 += 1, R1254 += 1, R881 += 1, R882 += 1 };
  s2 -> s1 [0, 66] { R1326 += 1, R1254 += 1, R881 += 1, R882 += 1 };
  s2 -> s2 [0, 65535] { R1326 += 1, R1253 += 1, R1254 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [67, 67] { R1326 += 1, R1254 += 1, R881 += 1, R882 += 1 };
  s2 -> s4 [67, 67] { R1326 += 1, R1254 += 1, R881 += 1, R882 += 1 };
  s2 -> s1 [68, 65535] { R1326 += 1, R1254 += 1, R881 += 1, R882 += 1 };
  s3 -> s3 [0, 65535] { R1326 += 1, R1254 += 1, R881 += 1, R882 += 1 };
  s3 -> s6 [0, 65535] { R1326 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1326 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1326 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 66] { R1328 += 1, R1256 += 1, R887 += 1, R888 += 1 };
  s0 -> s2 [0, 65535] { R1328 += 1, R1255 += 1, R1256 += 1 };
  s0 -> s0 [0, 65535] { R1327 += 1, R1328 += 1 };
  s0 -> s3 [67, 67] { R1328 += 1, R1256 += 1, R887 += 1, R888 += 1 };
  s0 -> s4 [67, 67] { R1328 += 1, R1256 += 1, R887 += 1, R888 += 1 };
  s0 -> s1 [68, 65535] { R1328 += 1, R1256 += 1, R887 += 1, R888 += 1 };
  s1 -> s1 [0, 66] { R1328 += 1, R1256 += 1, R887 += 1, R888 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1328 += 1 };
  s1 -> s3 [67, 67] { R1328 += 1, R1256 += 1, R887 += 1, R888 += 1 };
  s1 -> s4 [67, 67] { R1328 += 1, R1256 += 1, R887 += 1, R888 += 1 };
  s1 -> s1 [68, 65535] { R1328 += 1, R1256 += 1, R887 += 1, R888 += 1 };
  s2 -> s1 [0, 66] { R1328 += 1, R1256 += 1, R887 += 1, R888 += 1 };
  s2 -> s2 [0, 65535] { R1328 += 1, R1255 += 1, R1256 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [67, 67] { R1328 += 1, R1256 += 1, R887 += 1, R888 += 1 };
  s2 -> s4 [67, 67] { R1328 += 1, R1256 += 1, R887 += 1, R888 += 1 };
  s2 -> s1 [68, 65535] { R1328 += 1, R1256 += 1, R887 += 1, R888 += 1 };
  s3 -> s3 [0, 65535] { R1328 += 1, R1256 += 1, R887 += 1, R888 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R1328 += 1 };
  s4 -> s4 [0, 65535] { R1328 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1328 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_39 {
  init s0;
  s0 -> s1 [0, 66] { R1330 += 1, R1258 += 1, R895 += 1, R896 += 1 };
  s0 -> s2 [0, 65535] { R1330 += 1, R1257 += 1, R1258 += 1 };
  s0 -> s0 [0, 65535] { R1329 += 1, R1330 += 1 };
  s0 -> s3 [67, 67] { R1330 += 1, R1258 += 1, R895 += 1, R896 += 1 };
  s0 -> s4 [67, 67] { R1330 += 1, R1258 += 1, R895 += 1, R896 += 1 };
  s0 -> s1 [68, 65535] { R1330 += 1, R1258 += 1, R895 += 1, R896 += 1 };
  s1 -> s1 [0, 66] { R1330 += 1, R1258 += 1, R895 += 1, R896 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1330 += 1 };
  s1 -> s3 [67, 67] { R1330 += 1, R1258 += 1, R895 += 1, R896 += 1 };
  s1 -> s4 [67, 67] { R1330 += 1, R1258 += 1, R895 += 1, R896 += 1 };
  s1 -> s1 [68, 65535] { R1330 += 1, R1258 += 1, R895 += 1, R896 += 1 };
  s2 -> s1 [0, 66] { R1330 += 1, R1258 += 1, R895 += 1, R896 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1330 += 1, R1257 += 1, R1258 += 1 };
  s2 -> s3 [67, 67] { R1330 += 1, R1258 += 1, R895 += 1, R896 += 1 };
  s2 -> s4 [67, 67] { R1330 += 1, R1258 += 1, R895 += 1, R896 += 1 };
  s2 -> s1 [68, 65535] { R1330 += 1, R1258 += 1, R895 += 1, R896 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R1330 += 1 };
  s3 -> s3 [0, 65535] { R1330 += 1, R1258 += 1, R895 += 1, R896 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1330 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1330 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_40 {
  init s0;
  s0 -> s1 [0, 66] { R1332 += 1, R1260 += 1, R905 += 1, R906 += 1 };
  s0 -> s2 [0, 65535] { R1332 += 1, R1259 += 1, R1260 += 1 };
  s0 -> s0 [0, 65535] { R1331 += 1, R1332 += 1 };
  s0 -> s3 [67, 67] { R1332 += 1, R1260 += 1, R905 += 1, R906 += 1 };
  s0 -> s4 [67, 67] { R1332 += 1, R1260 += 1, R905 += 1, R906 += 1 };
  s0 -> s1 [68, 65535] { R1332 += 1, R1260 += 1, R905 += 1, R906 += 1 };
  s1 -> s1 [0, 66] { R1332 += 1, R1260 += 1, R905 += 1, R906 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1332 += 1 };
  s1 -> s3 [67, 67] { R1332 += 1, R1260 += 1, R905 += 1, R906 += 1 };
  s1 -> s4 [67, 67] { R1332 += 1, R1260 += 1, R905 += 1, R906 += 1 };
  s1 -> s1 [68, 65535] { R1332 += 1, R1260 += 1, R905 += 1, R906 += 1 };
  s2 -> s1 [0, 66] { R1332 += 1, R1260 += 1, R905 += 1, R906 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1332 += 1, R1259 += 1, R1260 += 1 };
  s2 -> s3 [67, 67] { R1332 += 1, R1260 += 1, R905 += 1, R906 += 1 };
  s2 -> s4 [67, 67] { R1332 += 1, R1260 += 1, R905 += 1, R906 += 1 };
  s2 -> s1 [68, 65535] { R1332 += 1, R1260 += 1, R905 += 1, R906 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R1332 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1332 += 1, R1260 += 1, R905 += 1, R906 += 1 };
  s4 -> s6 [0, 65535] { R1332 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1332 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_41 {
  init s0;
  s0 -> s1 [0, 66] { R1334 += 1, R1262 += 1, R913 += 1, R914 += 1 };
  s0 -> s0 [0, 65535] { R1333 += 1, R1334 += 1 };
  s0 -> s2 [0, 65535] { R1334 += 1, R1261 += 1, R1262 += 1 };
  s0 -> s3 [67, 67] { R1334 += 1, R1262 += 1, R913 += 1, R914 += 1 };
  s0 -> s4 [67, 67] { R1334 += 1, R1262 += 1, R913 += 1, R914 += 1 };
  s0 -> s1 [68, 65535] { R1334 += 1, R1262 += 1, R913 += 1, R914 += 1 };
  s1 -> s1 [0, 66] { R1334 += 1, R1262 += 1, R913 += 1, R914 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1334 += 1 };
  s1 -> s3 [67, 67] { R1334 += 1, R1262 += 1, R913 += 1, R914 += 1 };
  s1 -> s4 [67, 67] { R1334 += 1, R1262 += 1, R913 += 1, R914 += 1 };
  s1 -> s1 [68, 65535] { R1334 += 1, R1262 += 1, R913 += 1, R914 += 1 };
  s2 -> s1 [0, 66] { R1334 += 1, R1262 += 1, R913 += 1, R914 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1334 += 1, R1261 += 1, R1262 += 1 };
  s2 -> s3 [67, 67] { R1334 += 1, R1262 += 1, R913 += 1, R914 += 1 };
  s2 -> s4 [67, 67] { R1334 += 1, R1262 += 1, R913 += 1, R914 += 1 };
  s2 -> s1 [68, 65535] { R1334 += 1, R1262 += 1, R913 += 1, R914 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R1334 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1334 += 1, R1262 += 1, R913 += 1, R914 += 1 };
  s4 -> s6 [0, 65535] { R1334 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1334 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_42 {
  init s0;
  s0 -> s1 [0, 66] { R1336 += 1, R1264 += 1, R1200 += 1, R1201 += 1, R1202 += 1 };
  s0 -> s2 [0, 66] { R1336 += 1, R1264 += 1, R1199 += 1, R1200 += 1 };
  s0 -> s3 [0, 65535] { R1336 += 1, R1263 += 1, R1264 += 1 };
  s0 -> s0 [0, 65535] { R1335 += 1, R1336 += 1 };
  s0 -> s4 [67, 67] { R1336 += 1, R1264 += 1, R1199 += 1, R1200 += 1 };
  s0 -> s5 [67, 67] { R1336 += 1, R1264 += 1, R1200 += 1, R1201 += 1, R1202 += 1 };
  s0 -> s6 [67, 67] { R1336 += 1, R1264 += 1, R1199 += 1, R1200 += 1 };
  s0 -> s7 [67, 67] { R1336 += 1, R1264 += 1, R1200 += 1, R1201 += 1, R1202 += 1 };
  s0 -> s1 [68, 65535] { R1336 += 1, R1264 += 1, R1200 += 1, R1201 += 1, R1202 += 1 };
  s0 -> s2 [68, 65535] { R1336 += 1, R1264 += 1, R1199 += 1, R1200 += 1 };
  s1 -> s1 [0, 66] { R1336 += 1, R1264 += 1, R1200 += 1, R1201 += 1, R1202 += 1 };
  s1 -> s1 [0, 65535] { R1336 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s5 [67, 67] { R1336 += 1, R1264 += 1, R1200 += 1, R1201 += 1, R1202 += 1 };
  s1 -> s7 [67, 67] { R1336 += 1, R1264 += 1, R1200 += 1, R1201 += 1, R1202 += 1 };
  s1 -> s1 [68, 65535] { R1336 += 1, R1264 += 1, R1200 += 1, R1201 += 1, R1202 += 1 };
  s2 -> s1 [0, 66] { R1336 += 1, R1264 += 1, R1200 += 1, R1201 += 1, R1202 += 1 };
  s2 -> s2 [0, 66] { R1336 += 1, R1264 += 1, R1199 += 1, R1200 += 1 };
  s2 -> s4 [67, 67] { R1336 += 1, R1264 += 1, R1199 += 1, R1200 += 1 };
  s2 -> s5 [67, 67] { R1336 += 1, R1264 += 1, R1200 += 1, R1201 += 1, R1202 += 1 };
  s2 -> s6 [67, 67] { R1336 += 1, R1264 += 1, R1199 += 1, R1200 += 1 };
  s2 -> s7 [67, 67] { R1336 += 1, R1264 += 1, R1200 += 1, R1201 += 1, R1202 += 1 };
  s2 -> s1 [68, 65535] { R1336 += 1, R1264 += 1, R1200 += 1, R1201 += 1, R1202 += 1 };
  s2 -> s2 [68, 65535] { R1336 += 1, R1264 += 1, R1199 += 1, R1200 += 1 };
  s3 -> s1 [0, 66] { R1336 += 1, R1264 += 1, R1200 += 1, R1201 += 1, R1202 += 1 };
  s3 -> s2 [0, 66] { R1336 += 1, R1264 += 1, R1199 += 1, R1200 += 1 };
  s3 -> s3 [0, 65535] { R1336 += 1, R1263 += 1, R1264 += 1 };
  s3 -> s4 [67, 67] { R1336 += 1, R1264 += 1, R1199 += 1, R1200 += 1 };
  s3 -> s5 [67, 67] { R1336 += 1, R1264 += 1, R1200 += 1, R1201 += 1, R1202 += 1 };
  s3 -> s6 [67, 67] { R1336 += 1, R1264 += 1, R1199 += 1, R1200 += 1 };
  s3 -> s7 [67, 67] { R1336 += 1, R1264 += 1, R1200 += 1, R1201 += 1, R1202 += 1 };
  s3 -> s1 [68, 65535] { R1336 += 1, R1264 += 1, R1200 += 1, R1201 += 1, R1202 += 1 };
  s3 -> s2 [68, 65535] { R1336 += 1, R1264 += 1, R1199 += 1, R1200 += 1 };
  s5 -> s5 [0, 65535] { R1336 += 1, R1264 += 1, R1200 += 1, R1201 += 1, R1202 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s9 [0, 65535] { R1336 += 1 };
  s6 -> s5 [0, 65535] { R1336 += 1, R1264 += 1, R1200 += 1, R1201 += 1, R1202 += 1 };
  s6 -> s6 [0, 65535] { R1336 += 1, R1264 += 1, R1199 += 1, R1200 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R1336 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R1336 += 1 };
  accepting s8, s5, s9, s1, s7;
};
};
constraint R2 = R1236 && R3 - R1336 = 1 && R23 - R1236 = -1 && R24 = R1236 && R25 - R1236 = -1 && R26 = R1236 && R27 = 0 && R28 = 1 && R29 = 0 && R30 = 1 && R31 = R1336 && R32 - R1336 = 1 && R33 = R1336 && R34 - R1336 = 1 && R35 = 0 && R36 = 1 && R37 = 0 && R38 = 1 && R858 + R857 + -1*R1204 + -1*R1200 = 0 && R873 + R871 = 0 && R874 + R872 + -1*R1204 + -1*R1200 = 0 && R1203 + R1199 = 0 && R1205 + R1201 = 0 && R1206 + R1202 = 0 && R1207 = 0 && R1208 = R1236 && R1209 = 0 && R1210 = R1236 && R1211 = 0 && R1212 = R1236 && R1213 = 0 && R1214 = R1236 && R1215 = 0 && R1216 = R1236 && R1217 = 0 && R1218 = R1236 && R1219 = 0 && R1220 = R1236 && R1221 = 0 && R1222 = R1236 && R1223 = 0 && R1224 = R1236 && R1225 = 0 && R1226 = R1236 && R1227 = 0 && R1228 = R1236 && R1229 = 0 && R1230 = R1236 && R1231 = 0 && R1232 = R1236 && R1233 = 0 && R1234 = R1236 && R1235 = 0 && R1239 = 0 && R1240 = 0 && R1263 = 0 && R1264 = 0 && R1265 = 0 && R1266 = R1336 && R1267 = 0 && R1268 = R1336 && R1269 = 0 && R1270 = R1336 && R1271 = 0 && R1272 = R1336 && R1273 = 0 && R1274 = R1336 && R1275 = 0 && R1276 = R1336 && R1277 = 0 && R1278 = R1336 && R1279 = 0 && R1280 = R1336 && R1281 = 0 && R1282 = R1336 && R1283 = 0 && R1284 = R1336 && R1285 = 0 && R1286 = R1336 && R1287 = 0 && R1288 = R1336 && R1289 = 0 && R1290 = R1336 && R1291 = 0 && R1292 = R1336 && R1293 = 0 && R1294 = R1336 && R1295 = 0 && R1296 = R1336 && R1297 = 0 && R1298 = R1336 && R1299 = 0 && R1300 = R1336 && R1301 = 0 && R1302 = R1336 && R1303 = 0 && R1304 = R1336 && R1305 = 0 && R1306 = R1336 && R1307 = 0 && R1308 = R1336 && R1309 = 0 && R1310 = R1336 && R1311 = 0 && R1312 = R1336 && R1313 = 0 && R1314 = R1336 && R1315 = 0 && R1316 = R1336 && R1317 = 0 && R1318 = R1336 && R1319 = 0 && R1320 = R1336 && R1321 = 0 && R1322 = R1336 && R1323 = 0 && R1324 = R1336 && R1325 = 0 && R1326 = R1336 && R1327 = 0 && R1328 = R1336 && R1329 = 0 && R1330 = R1336 && R1331 = 0 && R1332 = R1336 && R1333 = 0 && R1334 = R1336 && R1335 = 0 && R14 < 1 && R17 < 1 && R860 + R859 < 1 && -1*R880 + -1*R877 < 1 && R886 + R883 < 1 && -1*R1204 + -1*R1200 < 1 && 0 < R1236 && -1 < R1336 && (R878 + R875 != 0 || R879 + R876 + -1*R1204 + -1*R1200 = 0 || R880 + R877 < 1) && (R880 + R877 != 0 || R904 + R899 = 0 || (R893 + R889 = 0 && R894 + R890 = 0)) && (R880 + R877 != 0 || R904 + R899 = 0 || (R902 + R897 = 0 && R903 + R898 = 0)) && (R880 + R877 != 0 || R904 + R899 = 0 || (R911 + R907 = 0 && R912 + R908 = 0)) && (R880 + R877 != 0 || ((R878 + R875 != 0 || R879 + R876 + -1*R1204 + -1*R1200 = 0 || R1204 + R1200 < 1) && (R878 + R875 = 0 || R1204 + R1200 < 1))) && (R884 + R881 != 0 || R885 + R882 + -1*R1204 + -1*R1200 = 0 || (R880 + R877 = 0 && R1204 + R1200 = 0)) && (R891 + R887 != 0 || R892 + R888 + -1*R1204 + -1*R1200 = 0 || (R880 + R877 = 0 && R1204 + R1200 = 0)) && (R893 + R889 != 0 || R880 + R877 + -1*R894 + -1*R890 = 0 || R880 + R877 < 1) && (R900 + R895 != 0 || R901 + R896 + -1*R1204 + -1*R1200 = 0 || (R880 + R877 = 0 && R1204 + R1200 = 0)) && (R902 + R897 != 0 || R880 + R877 + -1*R903 + -1*R898 = 0 || R880 + R877 < 1) && (R909 + R905 != 0 || R910 + R906 + -1*R1204 + -1*R1200 = 0 || (R880 + R877 = 0 && R1204 + R1200 = 0)) && (R911 + R907 != 0 || R880 + R877 + -1*R912 + -1*R908 = 0 || R880 + R877 < 1) && (R918 + R913 != 0 || R919 + R914 + -1*R1204 + -1*R1200 = 0 || (R880 + R877 = 0 && R1204 + R1200 = 0)) && (R22 = 0 || (R1237 = 0 && R1238 = 0)) && (R22 = 0 || (R1241 = 0 && R1242 = 0)) && (R22 = 0 || (R1243 = 0 && R1244 = 0)) && (R22 = 0 || (R1245 = 0 && R1246 = 0)) && (R22 = 0 || (R1247 = 0 && R1248 = 0)) && (R22 = 0 || (R1249 = 0 && R1250 = 0)) && (R22 = 0 || (R1251 = 0 && R1252 = 0)) && (R22 = 0 || (R1253 = 0 && R1254 = 0)) && (R22 = 0 || (R1255 = 0 && R1256 = 0)) && (R22 = 0 || (R1257 = 0 && R1258 = 0)) && (R22 = 0 || (R1259 = 0 && R1260 = 0)) && (R22 = 0 || (R1261 = 0 && R1262 = 0)) && (R866 + R863 = 0 || (R864 + R861 = 0 && R865 + R862 = 0)) && (R866 + R863 = 0 || (R869 + R867 = 0 && R870 + R868 = 0)) && (R878 + R875 = 0 || R880 + R877 < 1) && (R884 + R881 = 0 || (R880 + R877 = 0 && R1204 + R1200 = 0)) && (R891 + R887 = 0 || (R880 + R877 = 0 && R1204 + R1200 = 0)) && (R893 + R889 = 0 || R880 + R877 < 1) && (R900 + R895 = 0 || (R880 + R877 = 0 && R1204 + R1200 = 0)) && (R902 + R897 = 0 || R880 + R877 < 1) && (R909 + R905 = 0 || (R880 + R877 = 0 && R1204 + R1200 = 0)) && (R911 + R907 = 0 || R880 + R877 < 1) && (R918 + R913 = 0 || (R880 + R877 = 0 && R1204 + R1200 = 0)) && (R922 + R917 = 0 || (R920 + R915 = 0 && R921 + R916 = 0));
// End of Parikh automata intersection problem
