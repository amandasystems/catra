// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R11, R115, R116, R12, R166, R167, R168, R169, R170, R171, R172, R173, R174, R175, R176, R177, R178, R179, R180, R181, R182, R183, R184, R185, R186, R187, R188, R189, R190, R191, R192, R193, R194, R195, R196, R197, R198, R199, R2, R200, R201, R202, R203, R204, R205, R206, R207, R208, R209, R210, R211, R212, R213, R214, R3, R4, R5, R6, R7, R8, R9;
synchronised {  // Automata constraining value1
automaton value1_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 60];
  s0 -> s1 [61, 61];
  s0 -> s0 [62, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 65535];
  accepting s1;
};
automaton value1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value1_2 {
  init s0;
  s0 -> s1 [0, 60] { R116 += 1 };
  s0 -> s0 [0, 65535] { R115 += 1, R116 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535] { R116 += 1 };
  s1 -> s1 [0, 60] { R116 += 1 };
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535] { R116 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value1_3 {
  init s0;
  s0 -> s0 [0, 65535] { R191 += 1, R192 += 1 };
  s0 -> s1 [0, 65535] { R192 += 1, R0 += 1 };
  s1 -> s1 [0, 65535] { R192 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_4 {
  init s0;
  s0 -> s1 [0, 65535] { R194 += 1, R167 += 1, R168 += 1 };
  s0 -> s0 [0, 65535] { R193 += 1, R194 += 1 };
  s0 -> s2 [32, 32] { R194 += 1, R168 += 1 };
  s1 -> s1 [0, 65535] { R194 += 1, R167 += 1, R168 += 1 };
  s1 -> s2 [32, 32] { R194 += 1, R168 += 1 };
  s2 -> s2 [0, 65535] { R194 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value1_5 {
  init s0;
  s0 -> s0 [0, 65535] { R195 += 1, R196 += 1 };
  s0 -> s1 [0, 65535] { R196 += 1, R170 += 1, R4 += 1 };
  s0 -> s2 [0, 65535] { R196 += 1, R169 += 1, R170 += 1 };
  s1 -> s4 [0, 65535] { R196 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R196 += 1, R170 += 1, R4 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R196 += 1, R170 += 1, R4 += 1 };
  s2 -> s2 [0, 65535] { R196 += 1, R169 += 1, R170 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R196 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_6 {
  init s0;
  s0 -> s1 [0, 64] { R198 += 1 };
  s0 -> s0 [0, 65535] { R197 += 1, R198 += 1 };
  s0 -> s2 [90, 90] { R198 += 1 };
  s0 -> s1 [91, 65535] { R198 += 1 };
  s1 -> s1 [0, 64] { R198 += 1 };
  s1 -> s2 [90, 90] { R198 += 1 };
  s1 -> s1 [91, 65535] { R198 += 1 };
  s2 -> s2 [0, 64] { R198 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [90, 65535] { R198 += 1 };
  accepting s2;
};
automaton value1_7 {
  init s0;
  s0 -> s1 [0, 65535] { R200 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R199 += 1, R200 += 1 };
  s1 -> s1 [0, 65535] { R200 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_8 {
  init s0;
  s0 -> s1 [0, 89] { R202 += 1, R12 += 1 };
  s0 -> s0 [0, 65535] { R201 += 1, R202 += 1 };
  s0 -> s2 [0, 65535] { R202 += 1, R11 += 1, R12 += 1 };
  s0 -> s3 [90, 90] { R202 += 1 };
  s0 -> s1 [91, 65535] { R202 += 1, R12 += 1 };
  s1 -> s1 [0, 89] { R202 += 1, R12 += 1 };
  s1 -> s3 [90, 90] { R202 += 1 };
  s1 -> s1 [91, 65535] { R202 += 1, R12 += 1 };
  s2 -> s1 [0, 89] { R202 += 1, R12 += 1 };
  s2 -> s2 [0, 65535] { R202 += 1, R11 += 1, R12 += 1 };
  s2 -> s3 [90, 90] { R202 += 1 };
  s2 -> s1 [91, 65535] { R202 += 1, R12 += 1 };
  s3 -> s3 [0, 65535] { R202 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton value1_9 {
  init s0;
  s0 -> s1 [0, 8] { R204 += 1, R180 += 1 };
  s0 -> s2 [0, 65535] { R204 += 1, R179 += 1, R180 += 1 };
  s0 -> s0 [0, 65535] { R203 += 1, R204 += 1 };
  s0 -> s3 [9, 13] { R204 += 1, R180 += 1 };
  s0 -> s1 [14, 31] { R204 += 1, R180 += 1 };
  s0 -> s3 [32, 32] { R204 += 1, R180 += 1 };
  s0 -> s1 [33, 65535] { R204 += 1, R180 += 1 };
  s1 -> s5 [0, 65535] { R204 += 1 };
  s1 -> s1 [0, 65535] { R204 += 1, R180 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R204 += 1, R180 += 1 };
  s2 -> s2 [0, 65535] { R204 += 1, R179 += 1, R180 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R204 += 1, R180 += 1 };
  s2 -> s1 [14, 31] { R204 += 1, R180 += 1 };
  s2 -> s3 [32, 32] { R204 += 1, R180 += 1 };
  s2 -> s1 [33, 65535] { R204 += 1, R180 += 1 };
  s3 -> s1 [0, 65535] { R204 += 1, R180 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R204 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value1_10 {
  init s0;
  s0 -> s0 [0, 65535] { R205 += 1, R206 += 1 };
  s0 -> s1 [0, 65535] { R206 += 1, R182 += 1, R7 += 1 };
  s0 -> s2 [0, 65535] { R206 += 1, R181 += 1, R182 += 1 };
  s1 -> s4 [0, 65535] { R206 += 1 };
  s1 -> s1 [0, 65535] { R206 += 1, R182 += 1, R7 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R206 += 1, R182 += 1, R7 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R206 += 1, R181 += 1, R182 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R206 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_11 {
  init s0;
  s0 -> s1 [0, 8] { R208 += 1, R184 += 1 };
  s0 -> s0 [0, 65535] { R207 += 1, R208 += 1 };
  s0 -> s2 [0, 65535] { R208 += 1, R183 += 1, R184 += 1 };
  s0 -> s3 [9, 13] { R208 += 1, R184 += 1 };
  s0 -> s1 [14, 31] { R208 += 1, R184 += 1 };
  s0 -> s3 [32, 32] { R208 += 1, R184 += 1 };
  s0 -> s1 [33, 65535] { R208 += 1, R184 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R208 += 1 };
  s1 -> s1 [0, 65535] { R208 += 1, R184 += 1 };
  s2 -> s1 [0, 8] { R208 += 1, R184 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R208 += 1, R183 += 1, R184 += 1 };
  s2 -> s3 [9, 13] { R208 += 1, R184 += 1 };
  s2 -> s1 [14, 31] { R208 += 1, R184 += 1 };
  s2 -> s3 [32, 32] { R208 += 1, R184 += 1 };
  s2 -> s1 [33, 65535] { R208 += 1, R184 += 1 };
  s3 -> s1 [0, 65535] { R208 += 1, R184 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R208 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value1_12 {
  init s0;
  s0 -> s0 [0, 65535] { R209 += 1, R210 += 1 };
  s0 -> s1 [0, 65535] { R210 += 1, R185 += 1, R186 += 1 };
  s0 -> s2 [0, 65535] { R210 += 1, R186 += 1, R8 += 1 };
  s1 -> s1 [0, 65535] { R210 += 1, R185 += 1, R186 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R210 += 1, R186 += 1, R8 += 1 };
  s2 -> s3 [0, 65535] { R210 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R210 += 1, R186 += 1, R8 += 1 };
  s3 -> s3 [0, 65535] { R210 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_13 {
  init s0;
  s0 -> s1 [0, 89] { R212 += 1, R188 += 1 };
  s0 -> s0 [0, 65535] { R211 += 1, R212 += 1 };
  s0 -> s2 [0, 65535] { R212 += 1, R187 += 1, R188 += 1 };
  s0 -> s1 [91, 65535] { R212 += 1, R188 += 1 };
  s1 -> s1 [0, 89] { R212 += 1, R188 += 1 };
  s1 -> s1 [0, 65535] { R212 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [91, 65535] { R212 += 1, R188 += 1 };
  s2 -> s1 [0, 89] { R212 += 1, R188 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R212 += 1, R187 += 1, R188 += 1 };
  s2 -> s1 [91, 65535] { R212 += 1, R188 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value1_14 {
  init s0;
  s0 -> s1 [0, 65535] { R214 += 1, R189 += 1, R190 += 1 };
  s0 -> s2 [0, 65535] { R214 += 1, R190 += 1, R166 += 1 };
  s0 -> s0 [0, 65535] { R213 += 1, R214 += 1 };
  s1 -> s1 [0, 65535] { R214 += 1, R189 += 1, R190 += 1 };
  s1 -> s2 [0, 65535] { R214 += 1, R190 += 1, R166 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R214 += 1 };
  s2 -> s2 [0, 65535] { R214 += 1, R190 += 1, R166 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R214 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s0 [91, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R9 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 8] { R172 += 1 };
  s0 -> s0 [0, 65535] { R171 += 1, R172 += 1 };
  s0 -> s2 [9, 13] { R172 += 1 };
  s0 -> s1 [14, 31] { R172 += 1 };
  s0 -> s2 [32, 32] { R172 += 1 };
  s0 -> s1 [33, 65535] { R172 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R172 += 1 };
  s2 -> s1 [0, 65535] { R172 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_4 {
  init s0;
  s0 -> s0 [0, 65535] { R173 += 1, R174 += 1 };
  s0 -> s1 [0, 65535] { R174 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R174 += 1, R5 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 8] { R176 += 1 };
  s0 -> s0 [0, 65535] { R175 += 1, R176 += 1 };
  s0 -> s2 [9, 13] { R176 += 1 };
  s0 -> s1 [14, 31] { R176 += 1 };
  s0 -> s2 [32, 32] { R176 += 1 };
  s0 -> s1 [33, 65535] { R176 += 1 };
  s1 -> s1 [0, 65535] { R176 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R176 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_6 {
  init s0;
  s0 -> s0 [0, 65535] { R177 += 1, R178 += 1 };
  s0 -> s1 [0, 65535] { R178 += 1, R6 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R178 += 1, R6 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
};
constraint R2 = R182 && R3 = R196 && R11 = 0 && R115 = 0 && R116 = R214 && R167 = 0 && R179 - R182 = -1 && R180 = R182 && R181 - R182 = -1 && R183 = 0 && R184 = 1 && R185 = 0 && R186 = 1 && R191 - R214 = 1 && R192 = R196 && R193 - R214 = 1 && R194 = R196 && R195 - R214 = 1 && R197 = 0 && R198 = R214 && R199 = 0 && R200 = R214 && R201 = 0 && R202 = R214 && R203 = 0 && R204 = R214 && R205 = 0 && R206 = R214 && R207 = 0 && R208 = R214 && R209 = 0 && R210 = R214 && R211 = 0 && R212 = R214 && R213 = 0 && R0 != 0 && R1 != 0 && R9 < 1 && R12 < R182 && -2 < R12 && 0 < R182 && R214 < R196 && -1 < R214 && (R0 != R168 || R168 = 1 || R168 < 0) && (R5 != 0 || ((R1 != R172 || R171 - R172 = -1 || R172 < 0) && (R1 = R172 || R1 < 1))) && (R5 != 0 || ((R1 != R174 || R173 - R174 = -1 || R174 < 0) && (R1 = R174 || R1 < 1))) && (R168 != 1 || -1 < R0) && (R169 != 0 || ((R4 != 0 || ((R0 != R170 || R170 = 1 || R170 < 0) && (R0 = R170 || R170 = 1 || R0 < 1))) && (R4 = 0 || ((R0 != R170 || R170 = 1 || R170 < 0) && (R170 != 1 || -1 < R0) && (R0 = R170 || R170 = 1))))) && (R175 != 0 || ((R6 != 0 || ((R1 != R176 || R176 = 1 || R176 < 0) && (R1 = R176 || R176 = 1 || R1 < 1))) && (R6 = 0 || ((R1 != R176 || R176 = 1 || R176 < 0) && (R176 != 1 || -1 < R1) && (R1 = R176 || R176 = 1))))) && (R177 != 0 || ((R6 != 0 || ((R1 != R178 || R178 = 1 || R178 < 0) && (R1 = R178 || R178 = 1 || R1 < 1))) && (R6 = 0 || ((R1 != R178 || R178 = 1 || R178 < 0) && (R178 != 1 || -1 < R1) && (R1 = R178 || R178 = 1))))) && (R182 != R188 || R12 - R187 = -1 || ((R166 != 0 || R188 - R12 < 2) && (R166 = 0 || R188 - R12 < 1 || R188 < 1))) && (R182 != R190 || R12 - R189 = -1 || ((R166 != 0 || R190 - R12 < 2) && (R166 = 0 || R190 - R12 < 1 || R190 < 1))) && (R0 = R168 || R168 = 1) && (R5 = 0 || (R1 = R172 && R171 - R172 = -1)) && (R5 = 0 || (R1 = R174 && R173 - R174 = -1)) && (R169 = 0 || (R4 = 0 && R0 < 0)) && (R175 = 0 || (R6 = 0 && R1 < 0)) && (R177 = 0 || (R6 = 0 && R1 < 0)) && (R182 = R188 || (R12 - R182 = -1 && R166 = 0)) && (R182 = R190 || (R12 - R182 = -1 && R166 = 0));
// End of Parikh automata intersection problem
