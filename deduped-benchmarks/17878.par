// Parikh automata intersection problem, generated by OSTRICH+
counter int R100, R101, R102, R103, R104, R105, R106, R107, R108, R109, R11, R110, R111, R112, R113, R114, R115, R116, R117, R118, R119, R12, R120, R121, R122, R123, R18, R19, R2, R20, R21, R22, R23, R24, R25, R256, R257, R258, R259, R26, R260, R261, R262, R263, R264, R265, R266, R267, R268, R269, R27, R270, R271, R272, R273, R274, R275, R276, R277, R278, R279, R280, R281, R282, R283, R284, R285, R286, R287, R288, R289, R290, R291, R292, R293, R294, R295, R296, R297, R298, R299, R3, R300, R301, R302, R303, R304, R305, R306, R307, R308, R309, R310, R311, R312, R313, R314, R315, R316, R317, R318, R319, R320, R321, R4, R58, R59, R60, R61, R62, R63, R64, R65, R66, R67, R68, R69, R70, R71, R72, R73, R74, R75, R76, R77, R78, R79, R80, R81, R82, R83, R84, R85, R86, R87, R88, R89, R90, R91, R92, R93, R94, R95, R96, R97, R98, R99;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [84, 84];
  s0 -> s0 [85, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [84, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 83];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [84, 84];
  s0 -> s1 [85, 65535];
  s1 -> s1 [0, 83];
  s1 -> s2 [84, 84];
  s1 -> s1 [85, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s1 [0, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R25 += 1 };
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 83] { R265 += 1 };
  s0 -> s0 [0, 65535] { R264 += 1, R265 += 1 };
  s0 -> s1 [85, 65535] { R265 += 1 };
  s1 -> s1 [0, 83] { R265 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [85, 65535] { R265 += 1 };
  accepting s0, s1;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 65535] { R267 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R266 += 1, R267 += 1 };
  s1 -> s1 [0, 65535] { R267 += 1, R18 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 84] { R269 += 1 };
  s0 -> s0 [0, 65535] { R268 += 1, R269 += 1 };
  s0 -> s2 [85, 85] { R269 += 1 };
  s0 -> s1 [86, 65535] { R269 += 1 };
  s1 -> s1 [0, 84] { R269 += 1 };
  s1 -> s2 [85, 85] { R269 += 1 };
  s1 -> s1 [86, 65535] { R269 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R269 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_11 {
  init s0;
  s0 -> s0 [0, 65535] { R270 += 1, R271 += 1 };
  s0 -> s1 [0, 65535] { R271 += 1, R59 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R271 += 1, R59 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 84] { R273 += 1 };
  s0 -> s2 [0, 65535] { R273 += 1, R61 += 1 };
  s0 -> s0 [0, 65535] { R272 += 1, R273 += 1 };
  s0 -> s1 [86, 65535] { R273 += 1 };
  s1 -> s1 [0, 84] { R273 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [86, 65535] { R273 += 1 };
  s2 -> s1 [0, 84] { R273 += 1 };
  s2 -> s2 [0, 65535] { R273 += 1, R61 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [86, 65535] { R273 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 65535] { R275 += 1, R65 += 1, R66 += 1 };
  s0 -> s2 [0, 65535] { R275 += 1, R66 += 1, R67 += 1 };
  s0 -> s0 [0, 65535] { R274 += 1, R275 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R275 += 1, R65 += 1, R66 += 1 };
  s1 -> s2 [0, 65535] { R275 += 1, R66 += 1, R67 += 1 };
  s2 -> s3 [0, 65535] { R275 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R275 += 1, R66 += 1, R67 += 1 };
  s3 -> s3 [0, 65535] { R275 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 84] { R277 += 1, R71 += 1 };
  s0 -> s0 [0, 65535] { R276 += 1, R277 += 1 };
  s0 -> s2 [0, 65535] { R277 += 1, R70 += 1, R71 += 1 };
  s0 -> s3 [85, 85] { R277 += 1, R71 += 1 };
  s0 -> s4 [85, 85] { R277 += 1, R71 += 1 };
  s0 -> s1 [90, 65535] { R277 += 1, R71 += 1 };
  s1 -> s1 [0, 84] { R277 += 1, R71 += 1 };
  s1 -> s1 [0, 65535] { R277 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [85, 85] { R277 += 1, R71 += 1 };
  s1 -> s4 [85, 85] { R277 += 1, R71 += 1 };
  s1 -> s1 [90, 65535] { R277 += 1, R71 += 1 };
  s2 -> s1 [0, 84] { R277 += 1, R71 += 1 };
  s2 -> s2 [0, 65535] { R277 += 1, R70 += 1, R71 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [85, 85] { R277 += 1, R71 += 1 };
  s2 -> s4 [85, 85] { R277 += 1, R71 += 1 };
  s2 -> s1 [90, 65535] { R277 += 1, R71 += 1 };
  s3 -> s3 [0, 85] { R277 += 1, R71 += 1 };
  s3 -> s3 [0, 65535] { R277 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [90, 65535] { R277 += 1, R71 += 1 };
  s4 -> s4 [0, 65535] { R277 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 84] { R279 += 1, R75 += 1 };
  s0 -> s2 [0, 65535] { R279 += 1, R74 += 1, R75 += 1 };
  s0 -> s0 [0, 65535] { R278 += 1, R279 += 1 };
  s0 -> s3 [85, 85] { R279 += 1, R75 += 1 };
  s0 -> s1 [86, 65535] { R279 += 1, R75 += 1 };
  s1 -> s1 [0, 84] { R279 += 1, R75 += 1 };
  s1 -> s3 [85, 85] { R279 += 1, R75 += 1 };
  s1 -> s1 [86, 65535] { R279 += 1, R75 += 1 };
  s2 -> s1 [0, 84] { R279 += 1, R75 += 1 };
  s2 -> s2 [0, 65535] { R279 += 1, R74 += 1, R75 += 1 };
  s2 -> s3 [85, 85] { R279 += 1, R75 += 1 };
  s2 -> s1 [86, 65535] { R279 += 1, R75 += 1 };
  s3 -> s4 [0, 65535] { R279 += 1 };
  s3 -> s3 [0, 65535] { R279 += 1, R75 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R279 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 65535] { R281 += 1, R79 += 1, R80 += 1 };
  s0 -> s0 [0, 65535] { R280 += 1, R281 += 1 };
  s0 -> s2 [0, 65535] { R281 += 1, R80 += 1, R81 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R281 += 1, R79 += 1, R80 += 1 };
  s1 -> s2 [0, 65535] { R281 += 1, R80 += 1, R81 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R281 += 1 };
  s2 -> s2 [0, 65535] { R281 += 1, R80 += 1, R81 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R281 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 84] { R283 += 1, R86 += 1 };
  s0 -> s2 [0, 65535] { R283 += 1, R85 += 1, R86 += 1 };
  s0 -> s3 [0, 65535] { R283 += 1, R86 += 1, R87 += 1 };
  s0 -> s0 [0, 65535] { R282 += 1, R283 += 1 };
  s0 -> s1 [86, 65535] { R283 += 1, R86 += 1 };
  s1 -> s1 [0, 84] { R283 += 1, R86 += 1 };
  s1 -> s1 [0, 65535] { R283 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [86, 65535] { R283 += 1, R86 += 1 };
  s2 -> s1 [0, 84] { R283 += 1, R86 += 1 };
  s2 -> s2 [0, 65535] { R283 += 1, R85 += 1, R86 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R283 += 1, R86 += 1, R87 += 1 };
  s2 -> s1 [86, 65535] { R283 += 1, R86 += 1 };
  s3 -> s1 [0, 84] { R283 += 1, R86 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R283 += 1 };
  s3 -> s3 [0, 65535] { R283 += 1, R86 += 1, R87 += 1 };
  s3 -> s1 [86, 65535] { R283 += 1, R86 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R283 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 84] { R285 += 1, R93 += 1, R95 += 1 };
  s0 -> s2 [0, 65535] { R285 += 1, R93 += 1, R94 += 1, R95 += 1 };
  s0 -> s0 [0, 65535] { R284 += 1, R285 += 1 };
  s0 -> s3 [0, 65535] { R285 += 1, R92 += 1, R93 += 1 };
  s0 -> s1 [86, 65535] { R285 += 1, R93 += 1, R95 += 1 };
  s1 -> s1 [0, 84] { R285 += 1, R93 += 1, R95 += 1 };
  s1 -> s1 [0, 65535] { R285 += 1, R93 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R285 += 1 };
  s1 -> s1 [86, 65535] { R285 += 1, R93 += 1, R95 += 1 };
  s2 -> s1 [0, 84] { R285 += 1, R93 += 1, R95 += 1 };
  s2 -> s2 [0, 65535] { R285 += 1, R93 += 1, R94 += 1, R95 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R285 += 1 };
  s2 -> s1 [86, 65535] { R285 += 1, R93 += 1, R95 += 1 };
  s3 -> s1 [0, 84] { R285 += 1, R93 += 1, R95 += 1 };
  s3 -> s2 [0, 65535] { R285 += 1, R93 += 1, R94 += 1, R95 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R285 += 1, R92 += 1, R93 += 1 };
  s3 -> s1 [86, 65535] { R285 += 1, R93 += 1, R95 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R285 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 65535] { R287 += 1, R101 += 1, R102 += 1 };
  s0 -> s2 [0, 65535] { R287 += 1, R102 += 1, R103 += 1, R104 += 1 };
  s0 -> s0 [0, 65535] { R286 += 1, R287 += 1 };
  s0 -> s3 [0, 65535] { R287 += 1, R102 += 1, R104 += 1, R105 += 1 };
  s1 -> s1 [0, 65535] { R287 += 1, R101 += 1, R102 += 1 };
  s1 -> s2 [0, 65535] { R287 += 1, R102 += 1, R103 += 1, R104 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [0, 65535] { R287 += 1, R102 += 1, R104 += 1, R105 += 1 };
  s2 -> s2 [0, 65535] { R287 += 1, R102 += 1, R103 += 1, R104 += 1 };
  s2 -> s5 [0, 65535] { R287 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R287 += 1, R102 += 1, R104 += 1, R105 += 1 };
  s3 -> s4 [0, 65535] { R287 += 1, R102 += 1 };
  s3 -> s5 [0, 65535] { R287 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R287 += 1, R102 += 1, R104 += 1, R105 += 1 };
  s4 -> s4 [0, 65535] { R287 += 1, R102 += 1 };
  s4 -> s5 [0, 65535] { R287 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R287 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 85] { R289 += 1, R111 += 1, R113 += 1 };
  s0 -> s2 [0, 65535] { R289 += 1, R111 += 1, R112 += 1, R113 += 1 };
  s0 -> s3 [0, 65535] { R289 += 1, R110 += 1, R111 += 1 };
  s0 -> s0 [0, 65535] { R288 += 1, R289 += 1 };
  s0 -> s1 [89, 65535] { R289 += 1, R111 += 1, R113 += 1 };
  s1 -> s1 [0, 85] { R289 += 1, R111 += 1, R113 += 1 };
  s1 -> s1 [0, 65535] { R289 += 1, R111 += 1 };
  s1 -> s5 [0, 65535] { R289 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [89, 65535] { R289 += 1, R111 += 1, R113 += 1 };
  s2 -> s1 [0, 85] { R289 += 1, R111 += 1, R113 += 1 };
  s2 -> s2 [0, 65535] { R289 += 1, R111 += 1, R112 += 1, R113 += 1 };
  s2 -> s5 [0, 65535] { R289 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [89, 65535] { R289 += 1, R111 += 1, R113 += 1 };
  s3 -> s1 [0, 85] { R289 += 1, R111 += 1, R113 += 1 };
  s3 -> s2 [0, 65535] { R289 += 1, R111 += 1, R112 += 1, R113 += 1 };
  s3 -> s3 [0, 65535] { R289 += 1, R110 += 1, R111 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [89, 65535] { R289 += 1, R111 += 1, R113 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R289 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R291 += 1, R120 += 1, R121 += 1, R122 += 1 };
  s0 -> s2 [0, 65535] { R291 += 1, R119 += 1, R120 += 1 };
  s0 -> s3 [0, 65535] { R291 += 1, R120 += 1, R122 += 1, R123 += 1 };
  s0 -> s0 [0, 65535] { R290 += 1, R291 += 1 };
  s1 -> s1 [0, 65535] { R291 += 1, R120 += 1, R121 += 1, R122 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s3 [0, 65535] { R291 += 1, R120 += 1, R122 += 1, R123 += 1 };
  s1 -> s5 [0, 65535] { R291 += 1 };
  s2 -> s1 [0, 65535] { R291 += 1, R120 += 1, R121 += 1, R122 += 1 };
  s2 -> s2 [0, 65535] { R291 += 1, R119 += 1, R120 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R291 += 1, R120 += 1, R122 += 1, R123 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R291 += 1, R120 += 1, R122 += 1, R123 += 1 };
  s3 -> s5 [0, 65535] { R291 += 1 };
  s3 -> s6 [0, 65535] { R291 += 1, R120 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R291 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R291 += 1 };
  s6 -> s6 [0, 65535] { R291 += 1, R120 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 84] { R293 += 1, R261 += 1, R263 += 1 };
  s0 -> s2 [0, 65535] { R293 += 1, R261 += 1, R262 += 1, R263 += 1 };
  s0 -> s0 [0, 65535] { R292 += 1, R293 += 1 };
  s0 -> s3 [85, 85] { R293 += 1, R261 += 1, R263 += 1 };
  s0 -> s4 [89, 89] { R293 += 1, R261 += 1, R263 += 1 };
  s0 -> s1 [90, 65535] { R293 += 1, R261 += 1, R263 += 1 };
  s1 -> s1 [0, 84] { R293 += 1, R261 += 1, R263 += 1 };
  s1 -> s3 [85, 85] { R293 += 1, R261 += 1, R263 += 1 };
  s1 -> s4 [89, 89] { R293 += 1, R261 += 1, R263 += 1 };
  s1 -> s1 [90, 65535] { R293 += 1, R261 += 1, R263 += 1 };
  s2 -> s1 [0, 84] { R293 += 1, R261 += 1, R263 += 1 };
  s2 -> s2 [0, 65535] { R293 += 1, R261 += 1, R262 += 1, R263 += 1 };
  s2 -> s3 [85, 85] { R293 += 1, R261 += 1, R263 += 1 };
  s2 -> s4 [89, 89] { R293 += 1, R261 += 1, R263 += 1 };
  s2 -> s1 [90, 65535] { R293 += 1, R261 += 1, R263 += 1 };
  s3 -> s3 [0, 85] { R293 += 1, R261 += 1, R263 += 1 };
  s3 -> s8 [89, 89] { R293 += 1, R261 += 1, R263 += 1 };
  s3 -> s3 [90, 65535] { R293 += 1, R261 += 1, R263 += 1 };
  s4 -> s4 [0, 84] { R293 += 1, R261 += 1, R263 += 1 };
  s4 -> s5 [0, 65535] { R293 += 1 };
  s4 -> s4 [0, 65535] { R293 += 1, R261 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [85, 85] { R293 += 1, R261 += 1, R263 += 1 };
  s4 -> s8 [85, 85] { R293 += 1, R261 += 1, R263 += 1 };
  s4 -> s4 [89, 65535] { R293 += 1, R261 += 1, R263 += 1 };
  s5 -> s5 [0, 65535] { R293 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R293 += 1 };
  s7 -> s7 [0, 65535] { R293 += 1, R261 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 85] { R293 += 1, R261 += 1, R263 += 1 };
  s8 -> s5 [0, 65535] { R293 += 1 };
  s8 -> s8 [0, 65535] { R293 += 1, R261 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [89, 65535] { R293 += 1, R261 += 1, R263 += 1 };
  accepting s4, s8, s5, s6, s7;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R295 += 1, R19 += 1 };
  s0 -> s0 [0, 65535] { R294 += 1, R295 += 1 };
  s1 -> s1 [0, 65535] { R295 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 83] { R297 += 1 };
  s0 -> s0 [0, 65535] { R296 += 1, R297 += 1 };
  s0 -> s2 [84, 84] { R297 += 1 };
  s0 -> s3 [84, 84] { R297 += 1 };
  s0 -> s1 [86, 65535] { R297 += 1 };
  s1 -> s1 [0, 83] { R297 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R297 += 1 };
  s1 -> s3 [84, 84] { R297 += 1 };
  s1 -> s1 [86, 65535] { R297 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 84] { R297 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [86, 65535] { R297 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 83] { R299 += 1, R58 += 1 };
  s0 -> s0 [0, 65535] { R298 += 1, R299 += 1 };
  s0 -> s2 [84, 84] { R299 += 1, R58 += 1 };
  s0 -> s3 [84, 84] { R299 += 1, R58 += 1 };
  s0 -> s1 [85, 65535] { R299 += 1, R58 += 1 };
  s1 -> s1 [0, 83] { R299 += 1, R58 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R299 += 1, R58 += 1 };
  s1 -> s3 [84, 84] { R299 += 1, R58 += 1 };
  s1 -> s1 [85, 65535] { R299 += 1, R58 += 1 };
  s2 -> s2 [0, 65535] { R299 += 1, R58 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 83] { R301 += 1, R60 += 1 };
  s0 -> s0 [0, 65535] { R300 += 1, R301 += 1 };
  s0 -> s2 [84, 84] { R301 += 1, R60 += 1 };
  s0 -> s3 [84, 84] { R301 += 1, R60 += 1 };
  s0 -> s1 [85, 65535] { R301 += 1, R60 += 1 };
  s1 -> s1 [0, 83] { R301 += 1, R60 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R301 += 1, R60 += 1 };
  s1 -> s3 [84, 84] { R301 += 1, R60 += 1 };
  s1 -> s1 [85, 65535] { R301 += 1, R60 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R301 += 1, R60 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 83] { R303 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R302 += 1, R303 += 1 };
  s0 -> s2 [84, 84] { R303 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [84, 84] { R303 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [85, 65535] { R303 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 83] { R303 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R303 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [84, 84] { R303 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [85, 65535] { R303 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R303 += 1, R62 += 1, R63 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 83] { R305 += 1, R68 += 1, R69 += 1 };
  s0 -> s0 [0, 65535] { R304 += 1, R305 += 1 };
  s0 -> s2 [84, 84] { R305 += 1, R68 += 1, R69 += 1 };
  s0 -> s3 [84, 84] { R305 += 1, R68 += 1, R69 += 1 };
  s0 -> s1 [85, 65535] { R305 += 1, R68 += 1, R69 += 1 };
  s1 -> s1 [0, 83] { R305 += 1, R68 += 1, R69 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R305 += 1, R68 += 1, R69 += 1 };
  s1 -> s3 [84, 84] { R305 += 1, R68 += 1, R69 += 1 };
  s1 -> s1 [85, 65535] { R305 += 1, R68 += 1, R69 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R305 += 1, R68 += 1, R69 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 83] { R307 += 1, R72 += 1, R73 += 1 };
  s0 -> s0 [0, 65535] { R306 += 1, R307 += 1 };
  s0 -> s2 [84, 84] { R307 += 1, R72 += 1, R73 += 1 };
  s0 -> s3 [84, 84] { R307 += 1, R72 += 1, R73 += 1 };
  s0 -> s1 [85, 65535] { R307 += 1, R72 += 1, R73 += 1 };
  s1 -> s1 [0, 83] { R307 += 1, R72 += 1, R73 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R307 += 1, R72 += 1, R73 += 1 };
  s1 -> s3 [84, 84] { R307 += 1, R72 += 1, R73 += 1 };
  s1 -> s1 [85, 65535] { R307 += 1, R72 += 1, R73 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R307 += 1, R72 += 1, R73 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 83] { R309 += 1, R76 += 1, R77 += 1 };
  s0 -> s0 [0, 65535] { R308 += 1, R309 += 1 };
  s0 -> s2 [84, 84] { R309 += 1, R76 += 1, R77 += 1 };
  s0 -> s3 [84, 84] { R309 += 1, R76 += 1, R77 += 1 };
  s0 -> s1 [85, 65535] { R309 += 1, R76 += 1, R77 += 1 };
  s1 -> s1 [0, 83] { R309 += 1, R76 += 1, R77 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R309 += 1, R76 += 1, R77 += 1 };
  s1 -> s3 [84, 84] { R309 += 1, R76 += 1, R77 += 1 };
  s1 -> s1 [85, 65535] { R309 += 1, R76 += 1, R77 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R309 += 1, R76 += 1, R77 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 83] { R311 += 1, R82 += 1, R83 += 1 };
  s0 -> s0 [0, 65535] { R310 += 1, R311 += 1 };
  s0 -> s2 [84, 84] { R311 += 1, R82 += 1, R83 += 1 };
  s0 -> s3 [84, 84] { R311 += 1, R82 += 1, R83 += 1 };
  s0 -> s1 [85, 65535] { R311 += 1, R82 += 1, R83 += 1 };
  s1 -> s1 [0, 83] { R311 += 1, R82 += 1, R83 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R311 += 1, R82 += 1, R83 += 1 };
  s1 -> s3 [84, 84] { R311 += 1, R82 += 1, R83 += 1 };
  s1 -> s1 [85, 65535] { R311 += 1, R82 += 1, R83 += 1 };
  s2 -> s2 [0, 65535] { R311 += 1, R82 += 1, R83 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 83] { R313 += 1, R88 += 1, R89 += 1 };
  s0 -> s0 [0, 65535] { R312 += 1, R313 += 1 };
  s0 -> s2 [84, 84] { R313 += 1, R88 += 1, R89 += 1 };
  s0 -> s3 [84, 84] { R313 += 1, R88 += 1, R89 += 1 };
  s0 -> s1 [85, 65535] { R313 += 1, R88 += 1, R89 += 1 };
  s1 -> s1 [0, 83] { R313 += 1, R88 += 1, R89 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R313 += 1, R88 += 1, R89 += 1 };
  s1 -> s3 [84, 84] { R313 += 1, R88 += 1, R89 += 1 };
  s1 -> s1 [85, 65535] { R313 += 1, R88 += 1, R89 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R313 += 1, R88 += 1, R89 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 83] { R315 += 1, R96 += 1, R97 += 1 };
  s0 -> s0 [0, 65535] { R314 += 1, R315 += 1 };
  s0 -> s2 [84, 84] { R315 += 1, R96 += 1, R97 += 1 };
  s0 -> s3 [84, 84] { R315 += 1, R96 += 1, R97 += 1 };
  s0 -> s1 [85, 65535] { R315 += 1, R96 += 1, R97 += 1 };
  s1 -> s1 [0, 83] { R315 += 1, R96 += 1, R97 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R315 += 1, R96 += 1, R97 += 1 };
  s1 -> s3 [84, 84] { R315 += 1, R96 += 1, R97 += 1 };
  s1 -> s1 [85, 65535] { R315 += 1, R96 += 1, R97 += 1 };
  s2 -> s2 [0, 65535] { R315 += 1, R96 += 1, R97 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 83] { R317 += 1, R106 += 1, R107 += 1 };
  s0 -> s0 [0, 65535] { R316 += 1, R317 += 1 };
  s0 -> s2 [84, 84] { R317 += 1, R106 += 1, R107 += 1 };
  s0 -> s3 [84, 84] { R317 += 1, R106 += 1, R107 += 1 };
  s0 -> s1 [85, 65535] { R317 += 1, R106 += 1, R107 += 1 };
  s1 -> s1 [0, 83] { R317 += 1, R106 += 1, R107 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R317 += 1, R106 += 1, R107 += 1 };
  s1 -> s3 [84, 84] { R317 += 1, R106 += 1, R107 += 1 };
  s1 -> s1 [85, 65535] { R317 += 1, R106 += 1, R107 += 1 };
  s2 -> s2 [0, 65535] { R317 += 1, R106 += 1, R107 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 83] { R319 += 1, R114 += 1, R115 += 1 };
  s0 -> s0 [0, 65535] { R318 += 1, R319 += 1 };
  s0 -> s2 [84, 84] { R319 += 1, R114 += 1, R115 += 1 };
  s0 -> s3 [84, 84] { R319 += 1, R114 += 1, R115 += 1 };
  s0 -> s1 [85, 65535] { R319 += 1, R114 += 1, R115 += 1 };
  s1 -> s1 [0, 83] { R319 += 1, R114 += 1, R115 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R319 += 1, R114 += 1, R115 += 1 };
  s1 -> s3 [84, 84] { R319 += 1, R114 += 1, R115 += 1 };
  s1 -> s1 [85, 65535] { R319 += 1, R114 += 1, R115 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R319 += 1, R114 += 1, R115 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 83] { R321 += 1, R256 += 1, R257 += 1 };
  s0 -> s2 [0, 83] { R321 += 1, R257 += 1, R258 += 1, R259 += 1 };
  s0 -> s0 [0, 65535] { R320 += 1, R321 += 1 };
  s0 -> s3 [84, 84] { R321 += 1, R257 += 1, R258 += 1, R259 += 1 };
  s0 -> s4 [84, 84] { R321 += 1, R257 += 1, R258 += 1, R259 += 1 };
  s0 -> s5 [84, 84] { R321 += 1, R256 += 1, R257 += 1 };
  s0 -> s6 [84, 84] { R321 += 1, R256 += 1, R257 += 1 };
  s0 -> s1 [85, 65535] { R321 += 1, R256 += 1, R257 += 1 };
  s0 -> s2 [85, 65535] { R321 += 1, R257 += 1, R258 += 1, R259 += 1 };
  s1 -> s1 [0, 83] { R321 += 1, R256 += 1, R257 += 1 };
  s1 -> s2 [0, 83] { R321 += 1, R257 += 1, R258 += 1, R259 += 1 };
  s1 -> s3 [84, 84] { R321 += 1, R257 += 1, R258 += 1, R259 += 1 };
  s1 -> s4 [84, 84] { R321 += 1, R257 += 1, R258 += 1, R259 += 1 };
  s1 -> s5 [84, 84] { R321 += 1, R256 += 1, R257 += 1 };
  s1 -> s6 [84, 84] { R321 += 1, R256 += 1, R257 += 1 };
  s1 -> s1 [85, 65535] { R321 += 1, R256 += 1, R257 += 1 };
  s1 -> s2 [85, 65535] { R321 += 1, R257 += 1, R258 += 1, R259 += 1 };
  s2 -> s2 [0, 83] { R321 += 1, R257 += 1, R258 += 1, R259 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s3 [84, 84] { R321 += 1, R257 += 1, R258 += 1, R259 += 1 };
  s2 -> s4 [84, 84] { R321 += 1, R257 += 1, R258 += 1, R259 += 1 };
  s2 -> s2 [85, 65535] { R321 += 1, R257 += 1, R258 += 1, R259 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R321 += 1, R257 += 1, R258 += 1, R259 += 1 };
  s4 -> s7 [0, 65535];
  s6 -> s4 [0, 65535] { R321 += 1, R257 += 1, R258 += 1, R259 += 1 };
  s6 -> s6 [0, 65535] { R321 += 1, R256 += 1, R257 += 1 };
  s7 -> s7 [0, 65535];
  accepting s2, s3, s4, s7;
};
};
synchronised {  // Automata constraining P4
automaton P4_0 {
  init s0;
  s0 -> s1 [116, 116];
  accepting s1;
};
};
synchronised {  // Automata constraining P59
automaton P59_0 {
  init s0;
  s0 -> s1 [117, 117];
  accepting s1;
};
};
constraint R2 = R293 && R20 - R293 = -1 && R21 = R293 && R22 - R293 = -1 && R23 = R293 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R59 + R58 + -1*R261 + -1*R257 = 0 && R74 + R72 = 0 && R75 + R73 + -1*R261 + -1*R257 = 0 && R260 + R256 = 0 && R262 + R258 = 0 && R263 + R259 = 0 && R264 = 0 && R265 = R293 && R266 = 0 && R267 = R293 && R268 = 0 && R269 = R293 && R270 = 0 && R271 = R293 && R272 = 0 && R273 = R293 && R274 = 0 && R275 = R293 && R276 = 0 && R277 = R293 && R278 = 0 && R279 = R293 && R280 = 0 && R281 = R293 && R282 = 0 && R283 = R293 && R284 = 0 && R285 = R293 && R286 = 0 && R287 = R293 && R288 = 0 && R289 = R293 && R290 = 0 && R291 = R293 && R292 = 0 && R320 = 0 && R321 = 0 && R11 < 1 && R12 < 1 && R61 + R60 < 1 && -1*R81 + -1*R78 < 1 && R87 + R84 < 1 && -1*R261 + -1*R257 < 1 && 0 < R293 && (R79 + R76 != 0 || R80 + R77 + -1*R261 + -1*R257 = 0 || R81 + R78 < 1) && (R81 + R78 != 0 || R105 + R100 = 0 || (R94 + R90 = 0 && R95 + R91 = 0)) && (R81 + R78 != 0 || R105 + R100 = 0 || (R103 + R98 = 0 && R104 + R99 = 0)) && (R81 + R78 != 0 || R105 + R100 = 0 || (R112 + R108 = 0 && R113 + R109 = 0)) && (R81 + R78 != 0 || ((R79 + R76 != 0 || R80 + R77 + -1*R261 + -1*R257 = 0 || R261 + R257 < 1) && (R79 + R76 = 0 || R261 + R257 < 1))) && (R85 + R82 != 0 || R86 + R83 + -1*R261 + -1*R257 = 0 || (R81 + R78 = 0 && R261 + R257 = 0)) && (R92 + R88 != 0 || R93 + R89 + -1*R261 + -1*R257 = 0 || (R81 + R78 = 0 && R261 + R257 = 0)) && (R94 + R90 != 0 || R81 + R78 + -1*R95 + -1*R91 = 0 || R81 + R78 < 1) && (R101 + R96 != 0 || R102 + R97 + -1*R261 + -1*R257 = 0 || (R81 + R78 = 0 && R261 + R257 = 0)) && (R103 + R98 != 0 || R81 + R78 + -1*R104 + -1*R99 = 0 || R81 + R78 < 1) && (R110 + R106 != 0 || R111 + R107 + -1*R261 + -1*R257 = 0 || (R81 + R78 = 0 && R261 + R257 = 0)) && (R112 + R108 != 0 || R81 + R78 + -1*R113 + -1*R109 = 0 || R81 + R78 < 1) && (R119 + R114 != 0 || R120 + R115 + -1*R261 + -1*R257 = 0 || (R81 + R78 = 0 && R261 + R257 = 0)) && (R19 = 0 || (R294 = 0 && R295 = 0)) && (R19 = 0 || (R296 = 0 && R297 = 0)) && (R19 = 0 || (R298 = 0 && R299 = 0)) && (R19 = 0 || (R300 = 0 && R301 = 0)) && (R19 = 0 || (R302 = 0 && R303 = 0)) && (R19 = 0 || (R304 = 0 && R305 = 0)) && (R19 = 0 || (R306 = 0 && R307 = 0)) && (R19 = 0 || (R308 = 0 && R309 = 0)) && (R19 = 0 || (R310 = 0 && R311 = 0)) && (R19 = 0 || (R312 = 0 && R313 = 0)) && (R19 = 0 || (R314 = 0 && R315 = 0)) && (R19 = 0 || (R316 = 0 && R317 = 0)) && (R19 = 0 || (R318 = 0 && R319 = 0)) && (R67 + R64 = 0 || (R65 + R62 = 0 && R66 + R63 = 0)) && (R67 + R64 = 0 || (R70 + R68 = 0 && R71 + R69 = 0)) && (R79 + R76 = 0 || R81 + R78 < 1) && (R85 + R82 = 0 || (R81 + R78 = 0 && R261 + R257 = 0)) && (R92 + R88 = 0 || (R81 + R78 = 0 && R261 + R257 = 0)) && (R94 + R90 = 0 || R81 + R78 < 1) && (R101 + R96 = 0 || (R81 + R78 = 0 && R261 + R257 = 0)) && (R103 + R98 = 0 || R81 + R78 < 1) && (R110 + R106 = 0 || (R81 + R78 = 0 && R261 + R257 = 0)) && (R112 + R108 = 0 || R81 + R78 < 1) && (R119 + R114 = 0 || (R81 + R78 = 0 && R261 + R257 = 0)) && (R123 + R118 = 0 || (R121 + R116 = 0 && R122 + R117 = 0));
// End of Parikh automata intersection problem
