// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R100, R101, R102, R103, R104, R105, R106, R107, R108, R109, R11, R110, R111, R112, R113, R114, R115, R2, R3, R4, R5, R6, R64, R65, R66, R67, R68, R69, R70, R71, R72, R73, R74, R75, R76, R77, R78, R79, R80, R81, R82, R83, R84, R85, R86, R87, R88, R89, R90, R91, R92, R93, R94, R95, R96, R97, R98, R99;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R64 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s0 [0, 65535] { R74 += 1, R75 += 1 };
  s0 -> s1 [10, 10] { R75 += 1 };
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value2_4 {
  init s0;
  s0 -> s0 [0, 65535] { R76 += 1, R77 += 1 };
  s0 -> s1 [0, 65535] { R77 += 1, R5 += 1 };
  s1 -> s1 [0, 65535] { R77 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 64] { R93 += 1 };
  s0 -> s0 [0, 65535] { R92 += 1, R93 += 1 };
  s0 -> s2 [67, 67] { R93 += 1 };
  s0 -> s1 [68, 65535] { R93 += 1 };
  s1 -> s1 [0, 64] { R93 += 1 };
  s1 -> s2 [67, 67] { R93 += 1 };
  s1 -> s1 [68, 65535] { R93 += 1 };
  s2 -> s2 [0, 64] { R93 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [67, 65535] { R93 += 1 };
  accepting s2;
};
automaton value2_6 {
  init s0;
  s0 -> s0 [0, 65535] { R94 += 1, R95 += 1 };
  s0 -> s1 [0, 65535] { R95 += 1, R1 += 1 };
  s1 -> s1 [0, 65535] { R95 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 66] { R97 += 1, R11 += 1 };
  s0 -> s2 [0, 65535] { R97 += 1, R10 += 1, R11 += 1 };
  s0 -> s0 [0, 65535] { R96 += 1, R97 += 1 };
  s0 -> s3 [67, 67] { R97 += 1 };
  s0 -> s1 [68, 65535] { R97 += 1, R11 += 1 };
  s1 -> s1 [0, 66] { R97 += 1, R11 += 1 };
  s1 -> s3 [67, 67] { R97 += 1 };
  s1 -> s1 [68, 65535] { R97 += 1, R11 += 1 };
  s2 -> s1 [0, 66] { R97 += 1, R11 += 1 };
  s2 -> s2 [0, 65535] { R97 += 1, R10 += 1, R11 += 1 };
  s2 -> s3 [67, 67] { R97 += 1 };
  s2 -> s1 [68, 65535] { R97 += 1, R11 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R97 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 8] { R99 += 1, R67 += 1 };
  s0 -> s2 [0, 65535] { R99 += 1, R66 += 1, R67 += 1 };
  s0 -> s0 [0, 65535] { R98 += 1, R99 += 1 };
  s0 -> s3 [9, 13] { R99 += 1, R67 += 1 };
  s0 -> s1 [14, 31] { R99 += 1, R67 += 1 };
  s0 -> s3 [32, 32] { R99 += 1, R67 += 1 };
  s0 -> s1 [33, 65535] { R99 += 1, R67 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R99 += 1 };
  s1 -> s1 [0, 65535] { R99 += 1, R67 += 1 };
  s2 -> s1 [0, 8] { R99 += 1, R67 += 1 };
  s2 -> s2 [0, 65535] { R99 += 1, R66 += 1, R67 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R99 += 1, R67 += 1 };
  s2 -> s1 [14, 31] { R99 += 1, R67 += 1 };
  s2 -> s3 [32, 32] { R99 += 1, R67 += 1 };
  s2 -> s1 [33, 65535] { R99 += 1, R67 += 1 };
  s3 -> s1 [0, 65535] { R99 += 1, R67 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R99 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 65535] { R101 += 1, R68 += 1, R69 += 1 };
  s0 -> s0 [0, 65535] { R100 += 1, R101 += 1 };
  s0 -> s2 [0, 65535] { R101 += 1, R69 += 1, R3 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R101 += 1, R68 += 1, R69 += 1 };
  s1 -> s2 [0, 65535] { R101 += 1, R69 += 1, R3 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R101 += 1 };
  s2 -> s2 [0, 65535] { R101 += 1, R69 += 1, R3 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R101 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 8] { R103 += 1, R71 += 1 };
  s0 -> s0 [0, 65535] { R102 += 1, R103 += 1 };
  s0 -> s2 [0, 65535] { R103 += 1, R70 += 1, R71 += 1 };
  s0 -> s3 [9, 13] { R103 += 1, R71 += 1 };
  s0 -> s1 [14, 31] { R103 += 1, R71 += 1 };
  s0 -> s3 [32, 32] { R103 += 1, R71 += 1 };
  s0 -> s1 [33, 65535] { R103 += 1, R71 += 1 };
  s1 -> s1 [0, 65535] { R103 += 1, R71 += 1 };
  s1 -> s5 [0, 65535] { R103 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R103 += 1, R71 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R103 += 1, R70 += 1, R71 += 1 };
  s2 -> s3 [9, 13] { R103 += 1, R71 += 1 };
  s2 -> s1 [14, 31] { R103 += 1, R71 += 1 };
  s2 -> s3 [32, 32] { R103 += 1, R71 += 1 };
  s2 -> s1 [33, 65535] { R103 += 1, R71 += 1 };
  s3 -> s1 [0, 65535] { R103 += 1, R71 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R103 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s0 [0, 65535] { R104 += 1, R105 += 1 };
  s0 -> s1 [0, 65535] { R105 += 1, R73 += 1, R4 += 1 };
  s0 -> s2 [0, 65535] { R105 += 1, R72 += 1, R73 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R105 += 1, R73 += 1, R4 += 1 };
  s1 -> s4 [0, 65535] { R105 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R105 += 1, R73 += 1, R4 += 1 };
  s2 -> s2 [0, 65535] { R105 += 1, R72 += 1, R73 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R105 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 66] { R107 += 1, R83 += 1 };
  s0 -> s2 [0, 65535] { R107 += 1, R82 += 1, R83 += 1 };
  s0 -> s0 [0, 65535] { R106 += 1, R107 += 1 };
  s0 -> s3 [67, 67] { R107 += 1, R83 += 1 };
  s0 -> s1 [68, 65535] { R107 += 1, R83 += 1 };
  s1 -> s1 [0, 66] { R107 += 1, R83 += 1 };
  s1 -> s3 [67, 67] { R107 += 1, R83 += 1 };
  s1 -> s1 [68, 65535] { R107 += 1, R83 += 1 };
  s2 -> s1 [0, 66] { R107 += 1, R83 += 1 };
  s2 -> s2 [0, 65535] { R107 += 1, R82 += 1, R83 += 1 };
  s2 -> s3 [67, 67] { R107 += 1, R83 += 1 };
  s2 -> s1 [68, 65535] { R107 += 1, R83 += 1 };
  s3 -> s4 [0, 65535] { R107 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R107 += 1, R83 += 1 };
  s4 -> s4 [0, 65535] { R107 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 65535] { R109 += 1, R85 += 1, R0 += 1 };
  s0 -> s2 [0, 65535] { R109 += 1, R84 += 1, R85 += 1 };
  s0 -> s0 [0, 65535] { R108 += 1, R109 += 1 };
  s1 -> s1 [0, 65535] { R109 += 1, R85 += 1, R0 += 1 };
  s1 -> s4 [0, 65535] { R109 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R109 += 1, R85 += 1, R0 += 1 };
  s2 -> s2 [0, 65535] { R109 += 1, R84 += 1, R85 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R109 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 66] { R111 += 1, R87 += 1 };
  s0 -> s2 [0, 65535] { R111 += 1, R87 += 1, R6 += 1 };
  s0 -> s3 [0, 65535] { R111 += 1, R86 += 1, R87 += 1 };
  s0 -> s0 [0, 65535] { R110 += 1, R111 += 1 };
  s0 -> s4 [67, 67] { R111 += 1, R87 += 1 };
  s0 -> s1 [68, 65535] { R111 += 1, R87 += 1 };
  s1 -> s1 [0, 66] { R111 += 1, R87 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R111 += 1 };
  s1 -> s4 [67, 67] { R111 += 1, R87 += 1 };
  s1 -> s1 [68, 65535] { R111 += 1, R87 += 1 };
  s2 -> s1 [0, 66] { R111 += 1, R87 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R111 += 1, R87 += 1, R6 += 1 };
  s2 -> s6 [0, 65535] { R111 += 1 };
  s2 -> s4 [67, 67] { R111 += 1, R87 += 1 };
  s2 -> s1 [68, 65535] { R111 += 1, R87 += 1 };
  s3 -> s1 [0, 66] { R111 += 1, R87 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R111 += 1, R87 += 1, R6 += 1 };
  s3 -> s3 [0, 65535] { R111 += 1, R86 += 1, R87 += 1 };
  s3 -> s4 [67, 67] { R111 += 1, R87 += 1 };
  s3 -> s1 [68, 65535] { R111 += 1, R87 += 1 };
  s4 -> s4 [0, 65535] { R111 += 1, R87 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R111 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 66] { R113 += 1, R89 += 1, R79 += 1 };
  s0 -> s2 [0, 65535] { R113 += 1, R89 += 1, R78 += 1, R79 += 1 };
  s0 -> s3 [0, 65535] { R113 += 1, R88 += 1, R89 += 1 };
  s0 -> s0 [0, 65535] { R112 += 1, R113 += 1 };
  s0 -> s4 [67, 67] { R113 += 1, R89 += 1, R79 += 1 };
  s0 -> s1 [68, 65535] { R113 += 1, R89 += 1, R79 += 1 };
  s1 -> s1 [0, 66] { R113 += 1, R89 += 1, R79 += 1 };
  s1 -> s4 [67, 67] { R113 += 1, R89 += 1, R79 += 1 };
  s1 -> s1 [68, 65535] { R113 += 1, R89 += 1, R79 += 1 };
  s2 -> s1 [0, 66] { R113 += 1, R89 += 1, R79 += 1 };
  s2 -> s2 [0, 65535] { R113 += 1, R89 += 1, R78 += 1, R79 += 1 };
  s2 -> s4 [67, 67] { R113 += 1, R89 += 1, R79 += 1 };
  s2 -> s1 [68, 65535] { R113 += 1, R89 += 1, R79 += 1 };
  s3 -> s1 [0, 66] { R113 += 1, R89 += 1, R79 += 1 };
  s3 -> s2 [0, 65535] { R113 += 1, R89 += 1, R78 += 1, R79 += 1 };
  s3 -> s3 [0, 65535] { R113 += 1, R88 += 1, R89 += 1 };
  s3 -> s4 [67, 67] { R113 += 1, R89 += 1, R79 += 1 };
  s3 -> s1 [68, 65535] { R113 += 1, R89 += 1, R79 += 1 };
  s4 -> s5 [0, 65535] { R113 += 1, R89 += 1 };
  s4 -> s4 [0, 65535] { R113 += 1, R89 += 1, R79 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R113 += 1 };
  s5 -> s5 [0, 65535] { R113 += 1, R89 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R113 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R113 += 1 };
  accepting s4, s5, s6, s7;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 65535] { R115 += 1, R91 += 1, R80 += 1, R81 += 1 };
  s0 -> s2 [0, 65535] { R115 += 1, R91 += 1, R81 += 1, R65 += 1 };
  s0 -> s0 [0, 65535] { R114 += 1, R115 += 1 };
  s0 -> s3 [0, 65535] { R115 += 1, R90 += 1, R91 += 1 };
  s1 -> s1 [0, 65535] { R115 += 1, R91 += 1, R80 += 1, R81 += 1 };
  s1 -> s2 [0, 65535] { R115 += 1, R91 += 1, R81 += 1, R65 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R115 += 1 };
  s2 -> s5 [0, 65535] { R115 += 1, R91 += 1 };
  s2 -> s2 [0, 65535] { R115 += 1, R91 += 1, R81 += 1, R65 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s6 [0, 65535] { R115 += 1 };
  s3 -> s1 [0, 65535] { R115 += 1, R91 += 1, R80 += 1, R81 += 1 };
  s3 -> s2 [0, 65535] { R115 += 1, R91 += 1, R81 += 1, R65 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R115 += 1, R90 += 1, R91 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R115 += 1, R91 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s6 [0, 65535] { R115 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R115 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R0 = R79 && R1 = R89 && R2 = R115 && R10 = 0 && R11 - R88 = -1 && R66 - R89 = -1 && R67 = R89 && R68 - R89 = -1 && R69 = R89 && R70 = 0 && R71 = 1 && R72 = 0 && R73 = 1 && R74 = 0 && R75 = 1 && R76 = 0 && R77 = 1 && R78 = 0 && R82 = R88 && R83 = R89 && R92 = 1 && R93 = R115 && R94 = 1 && R95 = R115 && R96 = 1 && R97 = R115 && R98 = 1 && R99 = R115 && R100 = 1 && R101 = R115 && R102 = 1 && R103 = R115 && R104 = 1 && R105 = R115 && R106 = 1 && R107 = R115 && R108 = 1 && R109 = R115 && R110 = 1 && R111 = R115 && R112 = 1 && R113 = R115 && R114 = 1 && R6 < 1 && R64 < 1 && -1 < R79 && R88 - R89 < 1 && -1 < R88 && 0 < R89 && 0 < R115 && (R80 != 0 || R79 = R81 || (R65 = 0 && R79 = 0)) && (R84 != R88 || R85 = R89 || (R79 = 0 && R88 = R89)) && (R86 != R88 || R87 = R89 || (R79 = 0 && R88 = R89)) && (R88 != R90 || R89 = R91 || ((R79 != 0 || R89 - R90 < 1 || R90 < 0) && (R79 < 1 || R89 < R90 || R90 < 0))) && (R80 = 0 || (R65 = 0 && R79 = 0)) && (R84 = R88 || (R79 = 0 && R88 = R89)) && (R86 = R88 || (R79 = 0 && R88 = R89)) && (R88 = R90 || (R79 = 0 && R88 = R89));
// End of Parikh automata intersection problem
