// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R1038, R1039, R1040, R1041, R1042, R1043, R1044, R1045, R1046, R1047, R1048, R1049, R1050, R1051, R1052, R1053, R1054, R1055, R1056, R1057, R1058, R1059, R1060, R1061, R1062, R1063, R1064, R1065, R1066, R1067, R1068, R1069, R1070, R1071, R1072, R1073, R1074, R1075, R1076, R1077, R1078, R1079, R1080, R1081, R1082, R1083, R1084, R1085, R1086, R1087, R1088, R1089, R1090, R1091, R1092, R1093, R1094, R1095, R1096, R1097, R1098, R1099, R11, R1100, R1101, R1102, R1103, R1104, R1105, R1106, R1107, R1108, R1109, R1110, R1111, R1112, R1113, R1114, R1115, R1116, R1117, R1118, R1119, R1120, R1121, R1122, R1123, R1124, R1125, R1126, R1127, R1128, R1129, R1130, R1131, R1132, R1133, R1134, R1135, R1136, R1137, R1138, R1139, R1140, R1141, R12, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R70, R71, R72, R73, R74, R75, R76, R77, R78, R79, R8, R80, R81, R82, R83, R928, R929, R930, R931, R932, R933;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 72];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [73, 73];
  s0 -> s1 [74, 65535];
  s1 -> s1 [0, 72];
  s1 -> s2 [73, 73];
  s1 -> s1 [74, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R21 += 1 };
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s1 [0, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R1063 += 1, R19 += 1 };
  s0 -> s0 [0, 65535] { R1062 += 1, R1063 += 1 };
  s1 -> s1 [0, 65535] { R1063 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 72] { R1065 += 1 };
  s0 -> s0 [0, 65535] { R1064 += 1, R1065 += 1 };
  s0 -> s2 [73, 73] { R1065 += 1 };
  s0 -> s3 [73, 73] { R1065 += 1 };
  s0 -> s1 [82, 65535] { R1065 += 1 };
  s1 -> s1 [0, 72] { R1065 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R1065 += 1 };
  s1 -> s3 [73, 73] { R1065 += 1 };
  s1 -> s1 [82, 65535] { R1065 += 1 };
  s2 -> s2 [0, 73] { R1065 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [82, 65535] { R1065 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 72] { R1067 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R1066 += 1, R1067 += 1 };
  s0 -> s2 [73, 73] { R1067 += 1, R38 += 1 };
  s0 -> s3 [73, 73] { R1067 += 1, R38 += 1 };
  s0 -> s1 [74, 65535] { R1067 += 1, R38 += 1 };
  s1 -> s1 [0, 72] { R1067 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R1067 += 1, R38 += 1 };
  s1 -> s3 [73, 73] { R1067 += 1, R38 += 1 };
  s1 -> s1 [74, 65535] { R1067 += 1, R38 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1067 += 1, R38 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 72] { R1069 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R1068 += 1, R1069 += 1 };
  s0 -> s2 [73, 73] { R1069 += 1, R40 += 1 };
  s0 -> s3 [73, 73] { R1069 += 1, R40 += 1 };
  s0 -> s1 [74, 65535] { R1069 += 1, R40 += 1 };
  s1 -> s1 [0, 72] { R1069 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R1069 += 1, R40 += 1 };
  s1 -> s3 [73, 73] { R1069 += 1, R40 += 1 };
  s1 -> s1 [74, 65535] { R1069 += 1, R40 += 1 };
  s2 -> s2 [0, 65535] { R1069 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 72] { R1071 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R1070 += 1, R1071 += 1 };
  s0 -> s2 [73, 73] { R1071 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [73, 73] { R1071 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [74, 65535] { R1071 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 72] { R1071 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R1071 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [73, 73] { R1071 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [74, 65535] { R1071 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535] { R1071 += 1, R42 += 1, R43 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 72] { R1073 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R1072 += 1, R1073 += 1 };
  s0 -> s2 [73, 73] { R1073 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [73, 73] { R1073 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [74, 65535] { R1073 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 72] { R1073 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R1073 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [73, 73] { R1073 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [74, 65535] { R1073 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535] { R1073 += 1, R46 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 72] { R1075 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R1074 += 1, R1075 += 1 };
  s0 -> s2 [73, 73] { R1075 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [73, 73] { R1075 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [74, 65535] { R1075 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 72] { R1075 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R1075 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [73, 73] { R1075 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [74, 65535] { R1075 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535] { R1075 += 1, R52 += 1, R53 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 72] { R1077 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R1076 += 1, R1077 += 1 };
  s0 -> s2 [73, 73] { R1077 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [73, 73] { R1077 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [74, 65535] { R1077 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 72] { R1077 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R1077 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [73, 73] { R1077 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [74, 65535] { R1077 += 1, R56 += 1, R57 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1077 += 1, R56 += 1, R57 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 72] { R1079 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R1078 += 1, R1079 += 1 };
  s0 -> s2 [73, 73] { R1079 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [73, 73] { R1079 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [74, 65535] { R1079 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 72] { R1079 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R1079 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [73, 73] { R1079 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [74, 65535] { R1079 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R1079 += 1, R62 += 1, R63 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 72] { R1099 += 1 };
  s0 -> s0 [0, 65535] { R1098 += 1, R1099 += 1 };
  s0 -> s2 [73, 73] { R1099 += 1 };
  s0 -> s1 [74, 65535] { R1099 += 1 };
  s1 -> s1 [0, 72] { R1099 += 1 };
  s1 -> s2 [73, 73] { R1099 += 1 };
  s1 -> s1 [74, 65535] { R1099 += 1 };
  s2 -> s2 [0, 65535] { R1099 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R1100 += 1, R1101 += 1 };
  s0 -> s1 [0, 65535] { R1101 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R1101 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 72] { R1103 += 1 };
  s0 -> s0 [0, 65535] { R1102 += 1, R1103 += 1 };
  s0 -> s2 [0, 65535] { R1103 += 1, R8 += 1 };
  s0 -> s3 [73, 73] { R1103 += 1 };
  s0 -> s1 [74, 65535] { R1103 += 1 };
  s1 -> s1 [0, 72] { R1103 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [73, 73] { R1103 += 1 };
  s1 -> s1 [74, 65535] { R1103 += 1 };
  s2 -> s1 [0, 72] { R1103 += 1 };
  s2 -> s2 [0, 65535] { R1103 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [73, 73] { R1103 += 1 };
  s2 -> s1 [74, 65535] { R1103 += 1 };
  s3 -> s3 [0, 65535] { R1103 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 72] { R1105 += 1, R1043 += 1 };
  s0 -> s0 [0, 65535] { R1104 += 1, R1105 += 1 };
  s0 -> s2 [0, 65535] { R1105 += 1, R1042 += 1, R1043 += 1 };
  s0 -> s1 [74, 65535] { R1105 += 1, R1043 += 1 };
  s1 -> s1 [0, 72] { R1105 += 1, R1043 += 1 };
  s1 -> s1 [0, 65535] { R1105 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [74, 65535] { R1105 += 1, R1043 += 1 };
  s2 -> s1 [0, 72] { R1105 += 1, R1043 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1105 += 1, R1042 += 1, R1043 += 1 };
  s2 -> s1 [74, 65535] { R1105 += 1, R1043 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R1107 += 1, R1045 += 1, R17 += 1 };
  s0 -> s2 [0, 65535] { R1107 += 1, R1044 += 1, R1045 += 1 };
  s0 -> s0 [0, 65535] { R1106 += 1, R1107 += 1 };
  s1 -> s1 [0, 65535] { R1107 += 1, R1045 += 1, R17 += 1 };
  s1 -> s4 [0, 65535] { R1107 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R1107 += 1, R1045 += 1, R17 += 1 };
  s2 -> s2 [0, 65535] { R1107 += 1, R1044 += 1, R1045 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1107 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 73] { R1109 += 1, R1047 += 1 };
  s0 -> s0 [0, 65535] { R1108 += 1, R1109 += 1 };
  s0 -> s2 [0, 65535] { R1109 += 1, R1046 += 1, R1047 += 1 };
  s0 -> s1 [81, 65535] { R1109 += 1, R1047 += 1 };
  s1 -> s1 [0, 73] { R1109 += 1, R1047 += 1 };
  s1 -> s1 [0, 65535] { R1109 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [81, 65535] { R1109 += 1, R1047 += 1 };
  s2 -> s1 [0, 73] { R1109 += 1, R1047 += 1 };
  s2 -> s2 [0, 65535] { R1109 += 1, R1046 += 1, R1047 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [81, 65535] { R1109 += 1, R1047 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R1111 += 1, R1049 += 1, R67 += 1 };
  s0 -> s2 [0, 65535] { R1111 += 1, R1048 += 1, R1049 += 1 };
  s0 -> s0 [0, 65535] { R1110 += 1, R1111 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1111 += 1, R1049 += 1, R67 += 1 };
  s1 -> s4 [0, 65535] { R1111 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R1111 += 1, R1049 += 1, R67 += 1 };
  s2 -> s2 [0, 65535] { R1111 += 1, R1048 += 1, R1049 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1111 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 80] { R1113 += 1, R1051 += 1 };
  s0 -> s2 [0, 65535] { R1113 += 1, R1051 += 1, R69 += 1 };
  s0 -> s0 [0, 65535] { R1112 += 1, R1113 += 1 };
  s0 -> s3 [0, 65535] { R1113 += 1, R1050 += 1, R1051 += 1 };
  s0 -> s1 [82, 65535] { R1113 += 1, R1051 += 1 };
  s1 -> s1 [0, 80] { R1113 += 1, R1051 += 1 };
  s1 -> s1 [0, 65535] { R1113 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [82, 65535] { R1113 += 1, R1051 += 1 };
  s2 -> s1 [0, 80] { R1113 += 1, R1051 += 1 };
  s2 -> s2 [0, 65535] { R1113 += 1, R1051 += 1, R69 += 1 };
  s2 -> s5 [0, 65535] { R1113 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [82, 65535] { R1113 += 1, R1051 += 1 };
  s3 -> s1 [0, 80] { R1113 += 1, R1051 += 1 };
  s3 -> s2 [0, 65535] { R1113 += 1, R1051 += 1, R69 += 1 };
  s3 -> s3 [0, 65535] { R1113 += 1, R1050 += 1, R1051 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [82, 65535] { R1113 += 1, R1051 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1113 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 80] { R1115 += 1, R1053 += 1, R73 += 1 };
  s0 -> s2 [0, 65535] { R1115 += 1, R1052 += 1, R1053 += 1 };
  s0 -> s3 [0, 65535] { R1115 += 1, R1053 += 1, R72 += 1, R73 += 1 };
  s0 -> s0 [0, 65535] { R1114 += 1, R1115 += 1 };
  s0 -> s1 [82, 65535] { R1115 += 1, R1053 += 1, R73 += 1 };
  s1 -> s1 [0, 80] { R1115 += 1, R1053 += 1, R73 += 1 };
  s1 -> s4 [0, 65535] { R1115 += 1 };
  s1 -> s1 [0, 65535] { R1115 += 1, R1053 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [82, 65535] { R1115 += 1, R1053 += 1, R73 += 1 };
  s2 -> s1 [0, 80] { R1115 += 1, R1053 += 1, R73 += 1 };
  s2 -> s2 [0, 65535] { R1115 += 1, R1052 += 1, R1053 += 1 };
  s2 -> s3 [0, 65535] { R1115 += 1, R1053 += 1, R72 += 1, R73 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [82, 65535] { R1115 += 1, R1053 += 1, R73 += 1 };
  s3 -> s1 [0, 80] { R1115 += 1, R1053 += 1, R73 += 1 };
  s3 -> s4 [0, 65535] { R1115 += 1 };
  s3 -> s3 [0, 65535] { R1115 += 1, R1053 += 1, R72 += 1, R73 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [82, 65535] { R1115 += 1, R1053 += 1, R73 += 1 };
  s4 -> s4 [0, 65535] { R1115 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R1117 += 1, R1055 += 1, R77 += 1, R78 += 1 };
  s0 -> s2 [0, 65535] { R1117 += 1, R1054 += 1, R1055 += 1 };
  s0 -> s3 [0, 65535] { R1117 += 1, R1055 += 1, R78 += 1, R79 += 1 };
  s0 -> s0 [0, 65535] { R1116 += 1, R1117 += 1 };
  s1 -> s1 [0, 65535] { R1117 += 1, R1055 += 1, R77 += 1, R78 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R1117 += 1, R1055 += 1, R78 += 1, R79 += 1 };
  s1 -> s6 [0, 65535] { R1117 += 1 };
  s2 -> s1 [0, 65535] { R1117 += 1, R1055 += 1, R77 += 1, R78 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1117 += 1, R1054 += 1, R1055 += 1 };
  s2 -> s3 [0, 65535] { R1117 += 1, R1055 += 1, R78 += 1, R79 += 1 };
  s3 -> s4 [0, 65535] { R1117 += 1, R1055 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R1117 += 1, R1055 += 1, R78 += 1, R79 += 1 };
  s3 -> s6 [0, 65535] { R1117 += 1 };
  s4 -> s4 [0, 65535] { R1117 += 1, R1055 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R1117 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1117 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 81] { R1119 += 1, R1057 += 1, R83 += 1 };
  s0 -> s1 [0, 65535] { R1119 += 1, R1057 += 1 };
  s0 -> s2 [0, 65535] { R1119 += 1, R1056 += 1, R1057 += 1 };
  s0 -> s0 [0, 65535] { R1118 += 1, R1119 += 1 };
  s0 -> s1 [83, 65535] { R1119 += 1, R1057 += 1, R83 += 1 };
  s1 -> s1 [0, 81] { R1119 += 1, R1057 += 1, R83 += 1 };
  s1 -> s1 [0, 65535] { R1119 += 1, R1057 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R1119 += 1 };
  s1 -> s1 [83, 65535] { R1119 += 1, R1057 += 1, R83 += 1 };
  s2 -> s1 [0, 81] { R1119 += 1, R1057 += 1, R83 += 1 };
  s2 -> s1 [0, 65535] { R1119 += 1, R1057 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1119 += 1, R1056 += 1, R1057 += 1 };
  s2 -> s1 [83, 65535] { R1119 += 1, R1057 += 1, R83 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1119 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R1121 += 1, R1059 += 1 };
  s0 -> s0 [0, 65535] { R1120 += 1, R1121 += 1 };
  s0 -> s2 [0, 65535] { R1121 += 1, R1058 += 1, R1059 += 1 };
  s1 -> s4 [0, 65535] { R1121 += 1 };
  s1 -> s1 [0, 65535] { R1121 += 1, R1059 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R1121 += 1, R1059 += 1 };
  s2 -> s2 [0, 65535] { R1121 += 1, R1058 += 1, R1059 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1121 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 80] { R1123 += 1, R1061 += 1, R1041 += 1 };
  s0 -> s0 [0, 65535] { R1122 += 1, R1123 += 1 };
  s0 -> s2 [0, 65535] { R1123 += 1, R1060 += 1, R1061 += 1 };
  s0 -> s1 [0, 65535] { R1123 += 1, R1061 += 1 };
  s0 -> s3 [81, 81] { R1123 += 1, R1061 += 1, R1041 += 1 };
  s0 -> s4 [81, 81] { R1123 += 1, R1061 += 1, R1041 += 1 };
  s0 -> s1 [84, 65535] { R1123 += 1, R1061 += 1, R1041 += 1 };
  s1 -> s1 [0, 80] { R1123 += 1, R1061 += 1, R1041 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1123 += 1, R1061 += 1 };
  s1 -> s6 [0, 65535] { R1123 += 1 };
  s1 -> s3 [81, 81] { R1123 += 1, R1061 += 1, R1041 += 1 };
  s1 -> s4 [81, 81] { R1123 += 1, R1061 += 1, R1041 += 1 };
  s1 -> s1 [84, 65535] { R1123 += 1, R1061 += 1, R1041 += 1 };
  s2 -> s1 [0, 80] { R1123 += 1, R1061 += 1, R1041 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1123 += 1, R1060 += 1, R1061 += 1 };
  s2 -> s1 [0, 65535] { R1123 += 1, R1061 += 1 };
  s2 -> s3 [81, 81] { R1123 += 1, R1061 += 1, R1041 += 1 };
  s2 -> s4 [81, 81] { R1123 += 1, R1061 += 1, R1041 += 1 };
  s2 -> s1 [84, 65535] { R1123 += 1, R1061 += 1, R1041 += 1 };
  s3 -> s3 [0, 81] { R1123 += 1, R1061 += 1, R1041 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R1123 += 1, R1061 += 1 };
  s3 -> s6 [0, 65535] { R1123 += 1 };
  s3 -> s3 [84, 65535] { R1123 += 1, R1061 += 1, R1041 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1123 += 1, R1061 += 1 };
  s4 -> s6 [0, 65535] { R1123 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1123 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R1125 += 1, R1081 += 1, R18 += 1 };
  s0 -> s2 [0, 65535] { R1125 += 1, R1080 += 1, R1081 += 1 };
  s0 -> s0 [0, 65535] { R1124 += 1, R1125 += 1 };
  s1 -> s1 [0, 65535] { R1125 += 1, R1081 += 1, R18 += 1 };
  s1 -> s4 [0, 65535] { R1125 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R1125 += 1, R1081 += 1, R18 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1125 += 1, R1080 += 1, R1081 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1125 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 72] { R1127 += 1, R1083 += 1 };
  s0 -> s0 [0, 65535] { R1126 += 1, R1127 += 1 };
  s0 -> s2 [0, 65535] { R1127 += 1, R1082 += 1, R1083 += 1 };
  s0 -> s3 [73, 73] { R1127 += 1, R1083 += 1 };
  s0 -> s4 [73, 73] { R1127 += 1, R1083 += 1 };
  s0 -> s5 [81, 81] { R1127 += 1, R1083 += 1 };
  s0 -> s1 [82, 65535] { R1127 += 1, R1083 += 1 };
  s1 -> s1 [0, 72] { R1127 += 1, R1083 += 1 };
  s1 -> s3 [73, 73] { R1127 += 1, R1083 += 1 };
  s1 -> s4 [73, 73] { R1127 += 1, R1083 += 1 };
  s1 -> s5 [81, 81] { R1127 += 1, R1083 += 1 };
  s1 -> s1 [82, 65535] { R1127 += 1, R1083 += 1 };
  s2 -> s1 [0, 72] { R1127 += 1, R1083 += 1 };
  s2 -> s2 [0, 65535] { R1127 += 1, R1082 += 1, R1083 += 1 };
  s2 -> s3 [73, 73] { R1127 += 1, R1083 += 1 };
  s2 -> s4 [73, 73] { R1127 += 1, R1083 += 1 };
  s2 -> s5 [81, 81] { R1127 += 1, R1083 += 1 };
  s2 -> s1 [82, 65535] { R1127 += 1, R1083 += 1 };
  s3 -> s3 [0, 73] { R1127 += 1, R1083 += 1 };
  s3 -> s7 [81, 81] { R1127 += 1, R1083 += 1 };
  s3 -> s3 [82, 65535] { R1127 += 1, R1083 += 1 };
  s5 -> s5 [0, 72] { R1127 += 1, R1083 += 1 };
  s5 -> s5 [0, 65535] { R1127 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [73, 73] { R1127 += 1, R1083 += 1 };
  s5 -> s8 [73, 73] { R1127 += 1, R1083 += 1 };
  s5 -> s5 [81, 65535] { R1127 += 1, R1083 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 73] { R1127 += 1, R1083 += 1 };
  s7 -> s7 [0, 65535] { R1127 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [81, 65535] { R1127 += 1, R1083 += 1 };
  s8 -> s8 [0, 65535] { R1127 += 1 };
  s8 -> s6 [0, 65535];
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 72] { R1129 += 1, R1085 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R1128 += 1, R1129 += 1 };
  s0 -> s2 [0, 65535] { R1129 += 1, R1084 += 1, R1085 += 1 };
  s0 -> s3 [73, 73] { R1129 += 1, R1085 += 1, R66 += 1 };
  s0 -> s4 [73, 73] { R1129 += 1, R1085 += 1, R66 += 1 };
  s0 -> s1 [74, 65535] { R1129 += 1, R1085 += 1, R66 += 1 };
  s1 -> s1 [0, 72] { R1129 += 1, R1085 += 1, R66 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1129 += 1 };
  s1 -> s3 [73, 73] { R1129 += 1, R1085 += 1, R66 += 1 };
  s1 -> s4 [73, 73] { R1129 += 1, R1085 += 1, R66 += 1 };
  s1 -> s1 [74, 65535] { R1129 += 1, R1085 += 1, R66 += 1 };
  s2 -> s1 [0, 72] { R1129 += 1, R1085 += 1, R66 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1129 += 1, R1084 += 1, R1085 += 1 };
  s2 -> s3 [73, 73] { R1129 += 1, R1085 += 1, R66 += 1 };
  s2 -> s4 [73, 73] { R1129 += 1, R1085 += 1, R66 += 1 };
  s2 -> s1 [74, 65535] { R1129 += 1, R1085 += 1, R66 += 1 };
  s3 -> s3 [0, 65535] { R1129 += 1, R1085 += 1, R66 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R1129 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1129 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1129 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 72] { R1131 += 1, R1087 += 1, R68 += 1 };
  s0 -> s2 [0, 65535] { R1131 += 1, R1086 += 1, R1087 += 1 };
  s0 -> s0 [0, 65535] { R1130 += 1, R1131 += 1 };
  s0 -> s3 [73, 73] { R1131 += 1, R1087 += 1, R68 += 1 };
  s0 -> s4 [73, 73] { R1131 += 1, R1087 += 1, R68 += 1 };
  s0 -> s1 [74, 65535] { R1131 += 1, R1087 += 1, R68 += 1 };
  s1 -> s1 [0, 72] { R1131 += 1, R1087 += 1, R68 += 1 };
  s1 -> s1 [0, 65535] { R1131 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R1131 += 1, R1087 += 1, R68 += 1 };
  s1 -> s4 [73, 73] { R1131 += 1, R1087 += 1, R68 += 1 };
  s1 -> s1 [74, 65535] { R1131 += 1, R1087 += 1, R68 += 1 };
  s2 -> s1 [0, 72] { R1131 += 1, R1087 += 1, R68 += 1 };
  s2 -> s2 [0, 65535] { R1131 += 1, R1086 += 1, R1087 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R1131 += 1, R1087 += 1, R68 += 1 };
  s2 -> s4 [73, 73] { R1131 += 1, R1087 += 1, R68 += 1 };
  s2 -> s1 [74, 65535] { R1131 += 1, R1087 += 1, R68 += 1 };
  s3 -> s3 [0, 65535] { R1131 += 1, R1087 += 1, R68 += 1 };
  s3 -> s6 [0, 65535] { R1131 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1131 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1131 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 72] { R1133 += 1, R1089 += 1, R70 += 1, R71 += 1 };
  s0 -> s0 [0, 65535] { R1132 += 1, R1133 += 1 };
  s0 -> s2 [0, 65535] { R1133 += 1, R1088 += 1, R1089 += 1 };
  s0 -> s3 [73, 73] { R1133 += 1, R1089 += 1, R70 += 1, R71 += 1 };
  s0 -> s4 [73, 73] { R1133 += 1, R1089 += 1, R70 += 1, R71 += 1 };
  s0 -> s1 [74, 65535] { R1133 += 1, R1089 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 72] { R1133 += 1, R1089 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 65535] { R1133 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R1133 += 1, R1089 += 1, R70 += 1, R71 += 1 };
  s1 -> s4 [73, 73] { R1133 += 1, R1089 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [74, 65535] { R1133 += 1, R1089 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [0, 72] { R1133 += 1, R1089 += 1, R70 += 1, R71 += 1 };
  s2 -> s2 [0, 65535] { R1133 += 1, R1088 += 1, R1089 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R1133 += 1, R1089 += 1, R70 += 1, R71 += 1 };
  s2 -> s4 [73, 73] { R1133 += 1, R1089 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [74, 65535] { R1133 += 1, R1089 += 1, R70 += 1, R71 += 1 };
  s3 -> s3 [0, 65535] { R1133 += 1, R1089 += 1, R70 += 1, R71 += 1 };
  s3 -> s6 [0, 65535] { R1133 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1133 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1133 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 72] { R1135 += 1, R1091 += 1, R74 += 1, R75 += 1 };
  s0 -> s0 [0, 65535] { R1134 += 1, R1135 += 1 };
  s0 -> s2 [0, 65535] { R1135 += 1, R1090 += 1, R1091 += 1 };
  s0 -> s3 [73, 73] { R1135 += 1, R1091 += 1, R74 += 1, R75 += 1 };
  s0 -> s4 [73, 73] { R1135 += 1, R1091 += 1, R74 += 1, R75 += 1 };
  s0 -> s1 [74, 65535] { R1135 += 1, R1091 += 1, R74 += 1, R75 += 1 };
  s1 -> s1 [0, 72] { R1135 += 1, R1091 += 1, R74 += 1, R75 += 1 };
  s1 -> s1 [0, 65535] { R1135 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R1135 += 1, R1091 += 1, R74 += 1, R75 += 1 };
  s1 -> s4 [73, 73] { R1135 += 1, R1091 += 1, R74 += 1, R75 += 1 };
  s1 -> s1 [74, 65535] { R1135 += 1, R1091 += 1, R74 += 1, R75 += 1 };
  s2 -> s1 [0, 72] { R1135 += 1, R1091 += 1, R74 += 1, R75 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1135 += 1, R1090 += 1, R1091 += 1 };
  s2 -> s3 [73, 73] { R1135 += 1, R1091 += 1, R74 += 1, R75 += 1 };
  s2 -> s4 [73, 73] { R1135 += 1, R1091 += 1, R74 += 1, R75 += 1 };
  s2 -> s1 [74, 65535] { R1135 += 1, R1091 += 1, R74 += 1, R75 += 1 };
  s3 -> s3 [0, 65535] { R1135 += 1, R1091 += 1, R74 += 1, R75 += 1 };
  s3 -> s6 [0, 65535] { R1135 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1135 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1135 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 72] { R1137 += 1, R1093 += 1, R81 += 1 };
  s0 -> s2 [0, 72] { R1137 += 1, R1093 += 1, R80 += 1, R81 += 1 };
  s0 -> s0 [0, 65535] { R1136 += 1, R1137 += 1 };
  s0 -> s3 [0, 65535] { R1137 += 1, R1092 += 1, R1093 += 1 };
  s0 -> s4 [73, 73] { R1137 += 1, R1093 += 1, R81 += 1 };
  s0 -> s5 [73, 73] { R1137 += 1, R1093 += 1, R80 += 1, R81 += 1 };
  s0 -> s6 [73, 73] { R1137 += 1, R1093 += 1, R80 += 1, R81 += 1 };
  s0 -> s7 [73, 73] { R1137 += 1, R1093 += 1, R81 += 1 };
  s0 -> s1 [74, 81] { R1137 += 1, R1093 += 1, R81 += 1 };
  s0 -> s2 [74, 65535] { R1137 += 1, R1093 += 1, R80 += 1, R81 += 1 };
  s0 -> s8 [83, 83] { R1137 += 1, R1093 += 1, R81 += 1 };
  s0 -> s1 [84, 65535] { R1137 += 1, R1093 += 1, R81 += 1 };
  s1 -> s1 [0, 72] { R1137 += 1, R1093 += 1, R81 += 1 };
  s1 -> s4 [73, 73] { R1137 += 1, R1093 += 1, R81 += 1 };
  s1 -> s7 [73, 73] { R1137 += 1, R1093 += 1, R81 += 1 };
  s1 -> s1 [74, 81] { R1137 += 1, R1093 += 1, R81 += 1 };
  s1 -> s8 [83, 83] { R1137 += 1, R1093 += 1, R81 += 1 };
  s1 -> s1 [84, 65535] { R1137 += 1, R1093 += 1, R81 += 1 };
  s2 -> s1 [0, 72] { R1137 += 1, R1093 += 1, R81 += 1 };
  s2 -> s2 [0, 72] { R1137 += 1, R1093 += 1, R80 += 1, R81 += 1 };
  s2 -> s4 [73, 73] { R1137 += 1, R1093 += 1, R81 += 1 };
  s2 -> s5 [73, 73] { R1137 += 1, R1093 += 1, R80 += 1, R81 += 1 };
  s2 -> s6 [73, 73] { R1137 += 1, R1093 += 1, R80 += 1, R81 += 1 };
  s2 -> s7 [73, 73] { R1137 += 1, R1093 += 1, R81 += 1 };
  s2 -> s1 [74, 81] { R1137 += 1, R1093 += 1, R81 += 1 };
  s2 -> s2 [74, 65535] { R1137 += 1, R1093 += 1, R80 += 1, R81 += 1 };
  s2 -> s8 [83, 83] { R1137 += 1, R1093 += 1, R81 += 1 };
  s2 -> s1 [84, 65535] { R1137 += 1, R1093 += 1, R81 += 1 };
  s3 -> s1 [0, 72] { R1137 += 1, R1093 += 1, R81 += 1 };
  s3 -> s2 [0, 72] { R1137 += 1, R1093 += 1, R80 += 1, R81 += 1 };
  s3 -> s3 [0, 65535] { R1137 += 1, R1092 += 1, R1093 += 1 };
  s3 -> s4 [73, 73] { R1137 += 1, R1093 += 1, R81 += 1 };
  s3 -> s5 [73, 73] { R1137 += 1, R1093 += 1, R80 += 1, R81 += 1 };
  s3 -> s6 [73, 73] { R1137 += 1, R1093 += 1, R80 += 1, R81 += 1 };
  s3 -> s7 [73, 73] { R1137 += 1, R1093 += 1, R81 += 1 };
  s3 -> s1 [74, 81] { R1137 += 1, R1093 += 1, R81 += 1 };
  s3 -> s2 [74, 65535] { R1137 += 1, R1093 += 1, R80 += 1, R81 += 1 };
  s3 -> s8 [83, 83] { R1137 += 1, R1093 += 1, R81 += 1 };
  s3 -> s1 [84, 65535] { R1137 += 1, R1093 += 1, R81 += 1 };
  s4 -> s4 [0, 81] { R1137 += 1, R1093 += 1, R81 += 1 };
  s4 -> s11 [83, 83] { R1137 += 1, R1093 += 1, R81 += 1 };
  s4 -> s4 [84, 65535] { R1137 += 1, R1093 += 1, R81 += 1 };
  s6 -> s4 [0, 81] { R1137 += 1, R1093 += 1, R81 += 1 };
  s6 -> s6 [0, 65535] { R1137 += 1, R1093 += 1, R80 += 1, R81 += 1 };
  s6 -> s11 [83, 83] { R1137 += 1, R1093 += 1, R81 += 1 };
  s6 -> s4 [84, 65535] { R1137 += 1, R1093 += 1, R81 += 1 };
  s8 -> s8 [0, 72] { R1137 += 1, R1093 += 1, R81 += 1 };
  s8 -> s8 [0, 65535] { R1137 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [73, 73] { R1137 += 1, R1093 += 1 };
  s8 -> s11 [73, 73] { R1137 += 1, R1093 += 1 };
  s8 -> s8 [74, 81] { R1137 += 1, R1093 += 1, R81 += 1 };
  s8 -> s8 [74, 65535] { R1137 += 1, R1093 += 1 };
  s8 -> s8 [83, 65535] { R1137 += 1, R1093 += 1, R81 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R1137 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s11 [0, 81] { R1137 += 1, R1093 += 1, R81 += 1 };
  s11 -> s12 [0, 65535] { R1137 += 1 };
  s11 -> s11 [0, 65535] { R1137 += 1, R1093 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [83, 65535] { R1137 += 1, R1093 += 1, R81 += 1 };
  s12 -> s12 [0, 65535] { R1137 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 72] { R1139 += 1, R1095 += 1, R928 += 1, R929 += 1 };
  s0 -> s2 [0, 72] { R1139 += 1, R1095 += 1, R929 += 1, R930 += 1 };
  s0 -> s0 [0, 65535] { R1138 += 1, R1139 += 1 };
  s0 -> s3 [0, 65535] { R1139 += 1, R1094 += 1, R1095 += 1 };
  s0 -> s4 [73, 73] { R1139 += 1, R1095 += 1, R929 += 1, R930 += 1 };
  s0 -> s5 [73, 73] { R1139 += 1, R1095 += 1, R928 += 1, R929 += 1 };
  s0 -> s6 [73, 73] { R1139 += 1, R1095 += 1, R929 += 1, R930 += 1 };
  s0 -> s7 [73, 73] { R1139 += 1, R1095 += 1, R928 += 1, R929 += 1 };
  s0 -> s1 [74, 65535] { R1139 += 1, R1095 += 1, R928 += 1, R929 += 1 };
  s0 -> s2 [74, 65535] { R1139 += 1, R1095 += 1, R929 += 1, R930 += 1 };
  s1 -> s1 [0, 72] { R1139 += 1, R1095 += 1, R928 += 1, R929 += 1 };
  s1 -> s2 [0, 72] { R1139 += 1, R1095 += 1, R929 += 1, R930 += 1 };
  s1 -> s4 [73, 73] { R1139 += 1, R1095 += 1, R929 += 1, R930 += 1 };
  s1 -> s5 [73, 73] { R1139 += 1, R1095 += 1, R928 += 1, R929 += 1 };
  s1 -> s6 [73, 73] { R1139 += 1, R1095 += 1, R929 += 1, R930 += 1 };
  s1 -> s7 [73, 73] { R1139 += 1, R1095 += 1, R928 += 1, R929 += 1 };
  s1 -> s1 [74, 65535] { R1139 += 1, R1095 += 1, R928 += 1, R929 += 1 };
  s1 -> s2 [74, 65535] { R1139 += 1, R1095 += 1, R929 += 1, R930 += 1 };
  s2 -> s2 [0, 72] { R1139 += 1, R1095 += 1, R929 += 1, R930 += 1 };
  s2 -> s11 [0, 72] { R1139 += 1, R1095 += 1 };
  s2 -> s4 [73, 73] { R1139 += 1, R1095 += 1, R929 += 1, R930 += 1 };
  s2 -> s6 [73, 73] { R1139 += 1, R1095 += 1, R929 += 1, R930 += 1 };
  s2 -> s8 [73, 73] { R1139 += 1, R1095 += 1 };
  s2 -> s12 [73, 73] { R1139 += 1, R1095 += 1 };
  s2 -> s2 [74, 65535] { R1139 += 1, R1095 += 1, R929 += 1, R930 += 1 };
  s2 -> s11 [74, 65535] { R1139 += 1, R1095 += 1 };
  s3 -> s1 [0, 72] { R1139 += 1, R1095 += 1, R928 += 1, R929 += 1 };
  s3 -> s2 [0, 72] { R1139 += 1, R1095 += 1, R929 += 1, R930 += 1 };
  s3 -> s3 [0, 65535] { R1139 += 1, R1094 += 1, R1095 += 1 };
  s3 -> s4 [73, 73] { R1139 += 1, R1095 += 1, R929 += 1, R930 += 1 };
  s3 -> s5 [73, 73] { R1139 += 1, R1095 += 1, R928 += 1, R929 += 1 };
  s3 -> s6 [73, 73] { R1139 += 1, R1095 += 1, R929 += 1, R930 += 1 };
  s3 -> s7 [73, 73] { R1139 += 1, R1095 += 1, R928 += 1, R929 += 1 };
  s3 -> s1 [74, 65535] { R1139 += 1, R1095 += 1, R928 += 1, R929 += 1 };
  s3 -> s2 [74, 65535] { R1139 += 1, R1095 += 1, R929 += 1, R930 += 1 };
  s5 -> s5 [0, 65535] { R1139 += 1, R1095 += 1, R928 += 1, R929 += 1 };
  s5 -> s6 [0, 65535] { R1139 += 1, R1095 += 1, R929 += 1, R930 += 1 };
  s6 -> s6 [0, 65535] { R1139 += 1, R1095 += 1, R929 += 1, R930 += 1 };
  s6 -> s8 [0, 65535] { R1139 += 1, R1095 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [0, 65535] { R1139 += 1 };
  s8 -> s8 [0, 65535] { R1139 += 1, R1095 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R1139 += 1 };
  s11 -> s11 [0, 72] { R1139 += 1, R1095 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R1139 += 1 };
  s11 -> s8 [73, 73] { R1139 += 1, R1095 += 1 };
  s11 -> s12 [73, 73] { R1139 += 1, R1095 += 1 };
  s11 -> s11 [74, 65535] { R1139 += 1, R1095 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R1139 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 72] { R1141 += 1, R1097 += 1, R1039 += 1 };
  s0 -> s2 [0, 72] { R1141 += 1, R1097 += 1, R1038 += 1, R1039 += 1 };
  s0 -> s0 [0, 65535] { R1140 += 1, R1141 += 1 };
  s0 -> s3 [0, 65535] { R1141 += 1, R1096 += 1, R1097 += 1 };
  s0 -> s4 [73, 73] { R1141 += 1, R1097 += 1, R1039 += 1 };
  s0 -> s5 [73, 73] { R1141 += 1, R1097 += 1, R1038 += 1, R1039 += 1 };
  s0 -> s6 [73, 73] { R1141 += 1, R1097 += 1, R1039 += 1 };
  s0 -> s7 [73, 73] { R1141 += 1, R1097 += 1, R1038 += 1, R1039 += 1 };
  s0 -> s1 [74, 80] { R1141 += 1, R1097 += 1, R1039 += 1 };
  s0 -> s2 [74, 65535] { R1141 += 1, R1097 += 1, R1038 += 1, R1039 += 1 };
  s0 -> s1 [84, 65535] { R1141 += 1, R1097 += 1, R1039 += 1 };
  s1 -> s1 [0, 72] { R1141 += 1, R1097 += 1, R1039 += 1 };
  s1 -> s1 [0, 65535] { R1141 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s4 [73, 73] { R1141 += 1, R1097 += 1 };
  s1 -> s6 [73, 73] { R1141 += 1, R1097 += 1 };
  s1 -> s1 [74, 80] { R1141 += 1, R1097 += 1, R1039 += 1 };
  s1 -> s1 [74, 65535] { R1141 += 1, R1097 += 1 };
  s1 -> s1 [84, 65535] { R1141 += 1, R1097 += 1, R1039 += 1 };
  s2 -> s1 [0, 72] { R1141 += 1, R1097 += 1, R1039 += 1 };
  s2 -> s2 [0, 72] { R1141 += 1, R1097 += 1, R1038 += 1, R1039 += 1 };
  s2 -> s4 [73, 73] { R1141 += 1, R1097 += 1, R1039 += 1 };
  s2 -> s5 [73, 73] { R1141 += 1, R1097 += 1, R1038 += 1, R1039 += 1 };
  s2 -> s6 [73, 73] { R1141 += 1, R1097 += 1, R1039 += 1 };
  s2 -> s7 [73, 73] { R1141 += 1, R1097 += 1, R1038 += 1, R1039 += 1 };
  s2 -> s1 [74, 80] { R1141 += 1, R1097 += 1, R1039 += 1 };
  s2 -> s2 [74, 65535] { R1141 += 1, R1097 += 1, R1038 += 1, R1039 += 1 };
  s2 -> s1 [84, 65535] { R1141 += 1, R1097 += 1, R1039 += 1 };
  s3 -> s1 [0, 72] { R1141 += 1, R1097 += 1, R1039 += 1 };
  s3 -> s2 [0, 72] { R1141 += 1, R1097 += 1, R1038 += 1, R1039 += 1 };
  s3 -> s3 [0, 65535] { R1141 += 1, R1096 += 1, R1097 += 1 };
  s3 -> s4 [73, 73] { R1141 += 1, R1097 += 1, R1039 += 1 };
  s3 -> s5 [73, 73] { R1141 += 1, R1097 += 1, R1038 += 1, R1039 += 1 };
  s3 -> s6 [73, 73] { R1141 += 1, R1097 += 1, R1039 += 1 };
  s3 -> s7 [73, 73] { R1141 += 1, R1097 += 1, R1038 += 1, R1039 += 1 };
  s3 -> s1 [74, 80] { R1141 += 1, R1097 += 1, R1039 += 1 };
  s3 -> s2 [74, 65535] { R1141 += 1, R1097 += 1, R1038 += 1, R1039 += 1 };
  s3 -> s1 [84, 65535] { R1141 += 1, R1097 += 1, R1039 += 1 };
  s4 -> s4 [0, 65535] { R1141 += 1 };
  s4 -> s8 [0, 65535];
  s6 -> s6 [0, 80] { R1141 += 1, R1097 += 1, R1039 += 1 };
  s6 -> s6 [0, 65535] { R1141 += 1, R1097 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s9 [0, 65535] { R1141 += 1 };
  s6 -> s6 [84, 65535] { R1141 += 1, R1097 += 1, R1039 += 1 };
  s7 -> s6 [0, 80] { R1141 += 1, R1097 += 1, R1039 += 1 };
  s7 -> s7 [0, 65535] { R1141 += 1, R1097 += 1, R1038 += 1, R1039 += 1 };
  s7 -> s6 [84, 65535] { R1141 += 1, R1097 += 1, R1039 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R1141 += 1 };
  accepting s4, s8, s9, s6, s1;
};
};
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [113, 113];
  accepting s1;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
constraint R2 = R1141 && R20 - R1141 = -1 && R21 = R1141 && R22 - R1141 = -1 && R23 = R1141 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R83 + -1*R81 - R53 = 0 && R52 + R82 + R80 = 0 && R1082 = 0 && R1083 = 0 && R1092 = 0 && R1093 = 0 && R1094 = 0 && R1095 = 0 && R1096 = 0 && R1097 = 0 && R1098 = 0 && R1099 = R1141 && R1100 = 0 && R1101 = R1141 && R1102 = 0 && R1103 = R1141 && R1104 = 0 && R1105 = R1141 && R1106 = 0 && R1107 = R1141 && R1108 = 0 && R1109 = R1141 && R1110 = 0 && R1111 = R1141 && R1112 = 0 && R1113 = R1141 && R1114 = 0 && R1115 = R1141 && R1116 = 0 && R1117 = R1141 && R1118 = 0 && R1119 = R1141 && R1120 = 0 && R1121 = R1141 && R1122 = 0 && R1123 = R1141 && R1124 = 0 && R1125 = R1141 && R1126 = 0 && R1127 = R1141 && R1128 = 0 && R1129 = R1141 && R1130 = 0 && R1131 = R1141 && R1132 = 0 && R1133 = R1141 && R1134 = 0 && R1135 = R1141 && R1136 = 0 && R1137 = R1141 && R1138 = 0 && R1139 = R1141 && R1140 = 0 && -1 < R1 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R83 + -1*R81 - R53 < 1 && 0 < R1141 && (R1 != 0 || R17 = 0 || (R1042 = 0 && R1043 = 0)) && (R1 != 0 || R17 = 0 || (R1044 = 0 && R1045 = 0)) && (R1 != 0 || R17 = 0 || (R1046 = 0 && R1047 = 0)) && (R1 != 0 || R17 = 0 || (R1048 = 0 && R1049 = 0)) && (R1 != 0 || R17 = 0 || (R1050 = 0 && R1051 = 0)) && (R1 != 0 || R17 = 0 || (R1052 = 0 && R1053 = 0)) && (R1 != 0 || R17 = 0 || (R1054 = 0 && R1055 = 0)) && (R1 != 0 || R17 = 0 || (R1056 = 0 && R1057 = 0)) && (R1 != 0 || R17 = 0 || (R1058 = 0 && R1059 = 0)) && (R1 != 0 || R17 = 0 || (R1060 = 0 && R1061 = 0)) && (R48 + R79 + R76 != 0 || ((R42 + R72 + R70 != 0 || R43 + R73 + R71 + -1*R83 + -1*R81 - R53 = 0 || R53 + R83 + R81 < 1) && (R42 + R72 + R70 = 0 || R53 + R83 + R81 < 1))) && (R48 + R79 + R76 != 0 || ((R46 + R77 + R74 != 0 || R47 + R78 + R75 + -1*R83 + -1*R81 - R53 = 0 || R53 + R83 + R81 < 1) && (R46 + R77 + R74 = 0 || R53 + R83 + R81 < 1))) && (R1042 != 0 || R1 = R1043 || R1 < 1) && (R1044 != 0 || R1 = R1045 || R1 < 1) && (R1046 != 0 || R1 = R1047 || R1 < 1) && (R1048 != 0 || R1 = R1049 || R1 < 1) && (R1050 != 0 || R1 = R1051 || R1 < 1) && (R1052 != 0 || R1 = R1053 || R1 < 1) && (R1054 != 0 || R1 = R1055 || R1 < 1) && (R1056 != 0 || R1 = R1057 || R1 < 1) && (R1058 != 0 || R1 = R1059 || R1 < 1) && (R1060 != 0 || R1 = R1061 || R1 < 1) && (R18 = 0 || (R1080 = 0 && R1081 = 0)) && (R18 = 0 || (R1084 = 0 && R1085 = 0)) && (R18 = 0 || (R1086 = 0 && R1087 = 0)) && (R18 = 0 || (R1088 = 0 && R1089 = 0)) && (R18 = 0 || (R1090 = 0 && R1091 = 0)) && (R19 = 0 || (R1062 = 0 && R1063 = 0)) && (R19 = 0 || (R1064 = 0 && R1065 = 0)) && (R19 = 0 || (R1066 = 0 && R1067 = 0)) && (R19 = 0 || (R1068 = 0 && R1069 = 0)) && (R19 = 0 || (R1070 = 0 && R1071 = 0)) && (R19 = 0 || (R1072 = 0 && R1073 = 0)) && (R19 = 0 || (R1074 = 0 && R1075 = 0)) && (R19 = 0 || (R1076 = 0 && R1077 = 0)) && (R19 = 0 || (R1078 = 0 && R1079 = 0)) && (R48 + R79 + R76 = 0 || (R42 + R72 + R70 = 0 && R43 + R73 + R71 + -1*R83 + -1*R81 - R53 = 0)) && (R48 + R79 + R76 = 0 || (R46 + R77 + R74 = 0 && R47 + R78 + R75 + -1*R83 + -1*R81 - R53 = 0)) && (R58 + R933 + R930 = 0 || (R56 + R931 + R928 = 0 && R57 + R932 + R929 = 0)) && (R58 + R933 + R930 = 0 || (R62 + R1040 + R1038 = 0 && R63 + R1041 + R1039 = 0)) && (R1042 = 0 || R1 < 1) && (R1044 = 0 || R1 < 1) && (R1046 = 0 || R1 < 1) && (R1048 = 0 || R1 < 1) && (R1050 = 0 || R1 < 1) && (R1052 = 0 || R1 < 1) && (R1054 = 0 || R1 < 1) && (R1056 = 0 || R1 < 1) && (R1058 = 0 || R1 < 1) && (R1060 = 0 || R1 < 1);
// End of Parikh automata intersection problem
