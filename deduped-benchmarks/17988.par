// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R11522, R11523, R11524, R11525, R12, R15342, R15343, R15344, R15345, R15346, R15347, R16618, R16619, R16620, R16621, R16622, R16623, R16624, R16625, R16626, R16627, R16732, R16733, R16734, R16735, R16736, R16737, R16738, R16739, R16740, R16741, R16742, R16743, R16744, R16745, R16746, R16747, R16748, R16749, R16750, R16751, R16752, R16753, R16754, R16755, R16756, R16757, R16758, R16759, R16760, R16761, R16762, R16763, R16764, R16765, R16766, R16767, R16768, R16769, R16770, R16771, R16772, R16773, R16774, R16775, R16776, R16777, R16778, R16779, R16780, R16781, R16782, R16783, R16784, R16785, R16786, R16787, R16788, R16789, R16790, R16791, R16792, R16793, R16794, R16795, R16796, R16797, R16798, R16799, R16800, R16801, R16802, R16803, R16804, R16805, R16806, R16807, R16808, R16809, R16810, R16811, R16812, R16813, R16814, R16815, R16816, R16817, R16818, R16819, R16820, R16821, R16822, R16823, R16824, R16825, R16826, R16827, R16828, R16829, R16830, R16831, R16832, R16833, R16834, R16835, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 72];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [73, 73];
  s0 -> s1 [74, 65535];
  s1 -> s1 [0, 72];
  s1 -> s2 [73, 73];
  s1 -> s1 [74, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R21 += 1 };
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s1 [0, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R16756 += 1, R16757 += 1 };
  s0 -> s1 [0, 65535] { R16757 += 1, R19 += 1 };
  s1 -> s1 [0, 65535] { R16757 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 72] { R16759 += 1 };
  s0 -> s0 [0, 65535] { R16758 += 1, R16759 += 1 };
  s0 -> s2 [73, 73] { R16759 += 1 };
  s0 -> s3 [73, 73] { R16759 += 1 };
  s0 -> s1 [82, 65535] { R16759 += 1 };
  s1 -> s1 [0, 72] { R16759 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R16759 += 1 };
  s1 -> s3 [73, 73] { R16759 += 1 };
  s1 -> s1 [82, 65535] { R16759 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 73] { R16759 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [82, 65535] { R16759 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 72] { R16761 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R16760 += 1, R16761 += 1 };
  s0 -> s2 [73, 73] { R16761 += 1, R38 += 1 };
  s0 -> s3 [73, 73] { R16761 += 1, R38 += 1 };
  s0 -> s1 [74, 65535] { R16761 += 1, R38 += 1 };
  s1 -> s1 [0, 72] { R16761 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R16761 += 1, R38 += 1 };
  s1 -> s3 [73, 73] { R16761 += 1, R38 += 1 };
  s1 -> s1 [74, 65535] { R16761 += 1, R38 += 1 };
  s2 -> s2 [0, 65535] { R16761 += 1, R38 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 72] { R16763 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R16762 += 1, R16763 += 1 };
  s0 -> s2 [73, 73] { R16763 += 1, R40 += 1 };
  s0 -> s3 [73, 73] { R16763 += 1, R40 += 1 };
  s0 -> s1 [74, 65535] { R16763 += 1, R40 += 1 };
  s1 -> s1 [0, 72] { R16763 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R16763 += 1, R40 += 1 };
  s1 -> s3 [73, 73] { R16763 += 1, R40 += 1 };
  s1 -> s1 [74, 65535] { R16763 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R16763 += 1, R40 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 72] { R16765 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R16764 += 1, R16765 += 1 };
  s0 -> s2 [73, 73] { R16765 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [73, 73] { R16765 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [74, 65535] { R16765 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 72] { R16765 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R16765 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [73, 73] { R16765 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [74, 65535] { R16765 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R16765 += 1, R42 += 1, R43 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 72] { R16767 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R16766 += 1, R16767 += 1 };
  s0 -> s2 [73, 73] { R16767 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [73, 73] { R16767 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [74, 65535] { R16767 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 72] { R16767 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R16767 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [73, 73] { R16767 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [74, 65535] { R16767 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535] { R16767 += 1, R46 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 72] { R16769 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R16768 += 1, R16769 += 1 };
  s0 -> s2 [73, 73] { R16769 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [73, 73] { R16769 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [74, 65535] { R16769 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 72] { R16769 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R16769 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [73, 73] { R16769 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [74, 65535] { R16769 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535] { R16769 += 1, R52 += 1, R53 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 72] { R16771 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R16770 += 1, R16771 += 1 };
  s0 -> s2 [73, 73] { R16771 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [73, 73] { R16771 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [74, 65535] { R16771 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 72] { R16771 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R16771 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [73, 73] { R16771 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [74, 65535] { R16771 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535] { R16771 += 1, R56 += 1, R57 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 72] { R16773 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R16772 += 1, R16773 += 1 };
  s0 -> s2 [73, 73] { R16773 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [73, 73] { R16773 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [74, 65535] { R16773 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 72] { R16773 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R16773 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [73, 73] { R16773 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [74, 65535] { R16773 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R16773 += 1, R62 += 1, R63 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 72] { R16793 += 1 };
  s0 -> s0 [0, 65535] { R16792 += 1, R16793 += 1 };
  s0 -> s2 [73, 73] { R16793 += 1 };
  s0 -> s1 [74, 65535] { R16793 += 1 };
  s1 -> s1 [0, 72] { R16793 += 1 };
  s1 -> s2 [73, 73] { R16793 += 1 };
  s1 -> s1 [74, 65535] { R16793 += 1 };
  s2 -> s2 [0, 65535] { R16793 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R16795 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R16794 += 1, R16795 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R16795 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 72] { R16797 += 1 };
  s0 -> s0 [0, 65535] { R16796 += 1, R16797 += 1 };
  s0 -> s2 [0, 65535] { R16797 += 1, R8 += 1 };
  s0 -> s3 [73, 73] { R16797 += 1 };
  s0 -> s1 [74, 65535] { R16797 += 1 };
  s1 -> s1 [0, 72] { R16797 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [73, 73] { R16797 += 1 };
  s1 -> s1 [74, 65535] { R16797 += 1 };
  s2 -> s1 [0, 72] { R16797 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R16797 += 1, R8 += 1 };
  s2 -> s3 [73, 73] { R16797 += 1 };
  s2 -> s1 [74, 65535] { R16797 += 1 };
  s3 -> s3 [0, 65535] { R16797 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 72] { R16799 += 1, R16737 += 1 };
  s0 -> s2 [0, 65535] { R16799 += 1, R16736 += 1, R16737 += 1 };
  s0 -> s0 [0, 65535] { R16798 += 1, R16799 += 1 };
  s0 -> s1 [74, 65535] { R16799 += 1, R16737 += 1 };
  s1 -> s1 [0, 72] { R16799 += 1, R16737 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R16799 += 1 };
  s1 -> s1 [74, 65535] { R16799 += 1, R16737 += 1 };
  s2 -> s1 [0, 72] { R16799 += 1, R16737 += 1 };
  s2 -> s2 [0, 65535] { R16799 += 1, R16736 += 1, R16737 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [74, 65535] { R16799 += 1, R16737 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s0 [0, 65535] { R16800 += 1, R16801 += 1 };
  s0 -> s1 [0, 65535] { R16801 += 1, R16738 += 1, R16739 += 1 };
  s0 -> s2 [0, 65535] { R16801 += 1, R16739 += 1, R17 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R16801 += 1, R16738 += 1, R16739 += 1 };
  s1 -> s2 [0, 65535] { R16801 += 1, R16739 += 1, R17 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R16801 += 1 };
  s2 -> s2 [0, 65535] { R16801 += 1, R16739 += 1, R17 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R16801 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 73] { R16803 += 1, R16741 += 1 };
  s0 -> s0 [0, 65535] { R16802 += 1, R16803 += 1 };
  s0 -> s2 [0, 65535] { R16803 += 1, R16740 += 1, R16741 += 1 };
  s0 -> s1 [81, 65535] { R16803 += 1, R16741 += 1 };
  s1 -> s1 [0, 73] { R16803 += 1, R16741 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R16803 += 1 };
  s1 -> s1 [81, 65535] { R16803 += 1, R16741 += 1 };
  s2 -> s1 [0, 73] { R16803 += 1, R16741 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R16803 += 1, R16740 += 1, R16741 += 1 };
  s2 -> s1 [81, 65535] { R16803 += 1, R16741 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R16805 += 1, R16743 += 1, R67 += 1 };
  s0 -> s2 [0, 65535] { R16805 += 1, R16742 += 1, R16743 += 1 };
  s0 -> s0 [0, 65535] { R16804 += 1, R16805 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R16805 += 1, R16743 += 1, R67 += 1 };
  s1 -> s4 [0, 65535] { R16805 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R16805 += 1, R16743 += 1, R67 += 1 };
  s2 -> s2 [0, 65535] { R16805 += 1, R16742 += 1, R16743 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R16805 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 80] { R16807 += 1, R16745 += 1 };
  s0 -> s2 [0, 65535] { R16807 += 1, R16744 += 1, R16745 += 1 };
  s0 -> s0 [0, 65535] { R16806 += 1, R16807 += 1 };
  s0 -> s3 [0, 65535] { R16807 += 1, R16745 += 1, R69 += 1 };
  s0 -> s1 [82, 65535] { R16807 += 1, R16745 += 1 };
  s1 -> s1 [0, 80] { R16807 += 1, R16745 += 1 };
  s1 -> s1 [0, 65535] { R16807 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [82, 65535] { R16807 += 1, R16745 += 1 };
  s2 -> s1 [0, 80] { R16807 += 1, R16745 += 1 };
  s2 -> s2 [0, 65535] { R16807 += 1, R16744 += 1, R16745 += 1 };
  s2 -> s3 [0, 65535] { R16807 += 1, R16745 += 1, R69 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [82, 65535] { R16807 += 1, R16745 += 1 };
  s3 -> s1 [0, 80] { R16807 += 1, R16745 += 1 };
  s3 -> s3 [0, 65535] { R16807 += 1, R16745 += 1, R69 += 1 };
  s3 -> s4 [0, 65535] { R16807 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [82, 65535] { R16807 += 1, R16745 += 1 };
  s4 -> s4 [0, 65535] { R16807 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 80] { R16809 += 1, R16747 += 1, R11525 += 1 };
  s0 -> s1 [0, 65535] { R16809 += 1, R16747 += 1 };
  s0 -> s2 [0, 65535] { R16809 += 1, R16746 += 1, R16747 += 1 };
  s0 -> s0 [0, 65535] { R16808 += 1, R16809 += 1 };
  s0 -> s1 [82, 65535] { R16809 += 1, R16747 += 1, R11525 += 1 };
  s1 -> s1 [0, 80] { R16809 += 1, R16747 += 1, R11525 += 1 };
  s1 -> s1 [0, 65535] { R16809 += 1, R16747 += 1 };
  s1 -> s4 [0, 65535] { R16809 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [82, 65535] { R16809 += 1, R16747 += 1, R11525 += 1 };
  s2 -> s1 [0, 80] { R16809 += 1, R16747 += 1, R11525 += 1 };
  s2 -> s1 [0, 65535] { R16809 += 1, R16747 += 1 };
  s2 -> s2 [0, 65535] { R16809 += 1, R16746 += 1, R16747 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [82, 65535] { R16809 += 1, R16747 += 1, R11525 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R16809 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s0 [0, 65535] { R16810 += 1, R16811 += 1 };
  s0 -> s1 [0, 65535] { R16811 += 1, R16749 += 1 };
  s0 -> s2 [0, 65535] { R16811 += 1, R16749 += 1, R15346 += 1, R15347 += 1 };
  s0 -> s3 [0, 65535] { R16811 += 1, R16748 += 1, R16749 += 1 };
  s1 -> s5 [0, 65535] { R16811 += 1 };
  s1 -> s1 [0, 65535] { R16811 += 1, R16749 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R16811 += 1 };
  s2 -> s1 [0, 65535] { R16811 += 1, R16749 += 1 };
  s2 -> s2 [0, 65535] { R16811 += 1, R16749 += 1, R15346 += 1, R15347 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R16811 += 1, R16749 += 1 };
  s3 -> s2 [0, 65535] { R16811 += 1, R16749 += 1, R15346 += 1, R15347 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R16811 += 1, R16748 += 1, R16749 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R16811 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 81] { R16813 += 1, R16751 += 1, R16621 += 1 };
  s0 -> s0 [0, 65535] { R16812 += 1, R16813 += 1 };
  s0 -> s2 [0, 65535] { R16813 += 1, R16750 += 1, R16751 += 1 };
  s0 -> s3 [0, 65535] { R16813 += 1, R16751 += 1, R16620 += 1, R16621 += 1 };
  s0 -> s4 [83, 83] { R16813 += 1, R16751 += 1, R16621 += 1 };
  s0 -> s1 [84, 65535] { R16813 += 1, R16751 += 1, R16621 += 1 };
  s1 -> s1 [0, 81] { R16813 += 1, R16751 += 1, R16621 += 1 };
  s1 -> s4 [83, 83] { R16813 += 1, R16751 += 1, R16621 += 1 };
  s1 -> s1 [84, 65535] { R16813 += 1, R16751 += 1, R16621 += 1 };
  s2 -> s1 [0, 81] { R16813 += 1, R16751 += 1, R16621 += 1 };
  s2 -> s2 [0, 65535] { R16813 += 1, R16750 += 1, R16751 += 1 };
  s2 -> s3 [0, 65535] { R16813 += 1, R16751 += 1, R16620 += 1, R16621 += 1 };
  s2 -> s4 [83, 83] { R16813 += 1, R16751 += 1, R16621 += 1 };
  s2 -> s1 [84, 65535] { R16813 += 1, R16751 += 1, R16621 += 1 };
  s3 -> s1 [0, 81] { R16813 += 1, R16751 += 1, R16621 += 1 };
  s3 -> s3 [0, 65535] { R16813 += 1, R16751 += 1, R16620 += 1, R16621 += 1 };
  s3 -> s4 [83, 83] { R16813 += 1, R16751 += 1, R16621 += 1 };
  s3 -> s1 [84, 65535] { R16813 += 1, R16751 += 1, R16621 += 1 };
  s4 -> s4 [0, 81] { R16813 += 1, R16751 += 1, R16621 += 1 };
  s4 -> s5 [0, 65535] { R16813 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R16813 += 1, R16751 += 1 };
  s4 -> s4 [83, 65535] { R16813 += 1, R16751 += 1, R16621 += 1 };
  s5 -> s5 [0, 65535] { R16813 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s4, s5, s6;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R16815 += 1, R16753 += 1, R16625 += 1, R16626 += 1 };
  s0 -> s2 [0, 65535] { R16815 += 1, R16752 += 1, R16753 += 1 };
  s0 -> s3 [0, 65535] { R16815 += 1, R16753 += 1, R16626 += 1, R16627 += 1 };
  s0 -> s0 [0, 65535] { R16814 += 1, R16815 += 1 };
  s1 -> s1 [0, 65535] { R16815 += 1, R16753 += 1, R16625 += 1, R16626 += 1 };
  s1 -> s4 [0, 65535] { R16815 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R16815 += 1, R16753 += 1, R16626 += 1, R16627 += 1 };
  s2 -> s1 [0, 65535] { R16815 += 1, R16753 += 1, R16625 += 1, R16626 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R16815 += 1, R16752 += 1, R16753 += 1 };
  s2 -> s3 [0, 65535] { R16815 += 1, R16753 += 1, R16626 += 1, R16627 += 1 };
  s3 -> s4 [0, 65535] { R16815 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R16815 += 1, R16753 += 1 };
  s3 -> s3 [0, 65535] { R16815 += 1, R16753 += 1, R16626 += 1, R16627 += 1 };
  s4 -> s4 [0, 65535] { R16815 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R16815 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R16815 += 1, R16753 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 80] { R16817 += 1, R16755 += 1, R16735 += 1 };
  s0 -> s2 [0, 65535] { R16817 += 1, R16754 += 1, R16755 += 1 };
  s0 -> s0 [0, 65535] { R16816 += 1, R16817 += 1 };
  s0 -> s1 [0, 65535] { R16817 += 1, R16755 += 1 };
  s0 -> s3 [81, 81] { R16817 += 1, R16755 += 1, R16735 += 1 };
  s0 -> s4 [81, 81] { R16817 += 1, R16755 += 1, R16735 += 1 };
  s0 -> s1 [84, 65535] { R16817 += 1, R16755 += 1, R16735 += 1 };
  s1 -> s1 [0, 80] { R16817 += 1, R16755 += 1, R16735 += 1 };
  s1 -> s5 [0, 65535] { R16817 += 1 };
  s1 -> s1 [0, 65535] { R16817 += 1, R16755 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [81, 81] { R16817 += 1, R16755 += 1, R16735 += 1 };
  s1 -> s4 [81, 81] { R16817 += 1, R16755 += 1, R16735 += 1 };
  s1 -> s1 [84, 65535] { R16817 += 1, R16755 += 1, R16735 += 1 };
  s2 -> s1 [0, 80] { R16817 += 1, R16755 += 1, R16735 += 1 };
  s2 -> s2 [0, 65535] { R16817 += 1, R16754 += 1, R16755 += 1 };
  s2 -> s1 [0, 65535] { R16817 += 1, R16755 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [81, 81] { R16817 += 1, R16755 += 1, R16735 += 1 };
  s2 -> s4 [81, 81] { R16817 += 1, R16755 += 1, R16735 += 1 };
  s2 -> s1 [84, 65535] { R16817 += 1, R16755 += 1, R16735 += 1 };
  s3 -> s3 [0, 81] { R16817 += 1, R16755 += 1, R16735 += 1 };
  s3 -> s5 [0, 65535] { R16817 += 1 };
  s3 -> s3 [0, 65535] { R16817 += 1, R16755 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [84, 65535] { R16817 += 1, R16755 += 1, R16735 += 1 };
  s4 -> s5 [0, 65535] { R16817 += 1 };
  s4 -> s4 [0, 65535] { R16817 += 1, R16755 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R16817 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R16819 += 1, R16775 += 1, R18 += 1 };
  s0 -> s2 [0, 65535] { R16819 += 1, R16774 += 1, R16775 += 1 };
  s0 -> s0 [0, 65535] { R16818 += 1, R16819 += 1 };
  s1 -> s1 [0, 65535] { R16819 += 1, R16775 += 1, R18 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R16819 += 1 };
  s2 -> s1 [0, 65535] { R16819 += 1, R16775 += 1, R18 += 1 };
  s2 -> s2 [0, 65535] { R16819 += 1, R16774 += 1, R16775 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R16819 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 72] { R16821 += 1, R16777 += 1 };
  s0 -> s2 [0, 65535] { R16821 += 1, R16776 += 1, R16777 += 1 };
  s0 -> s0 [0, 65535] { R16820 += 1, R16821 += 1 };
  s0 -> s3 [73, 73] { R16821 += 1, R16777 += 1 };
  s0 -> s4 [73, 73] { R16821 += 1, R16777 += 1 };
  s0 -> s5 [81, 81] { R16821 += 1, R16777 += 1 };
  s0 -> s1 [82, 65535] { R16821 += 1, R16777 += 1 };
  s1 -> s1 [0, 72] { R16821 += 1, R16777 += 1 };
  s1 -> s3 [73, 73] { R16821 += 1, R16777 += 1 };
  s1 -> s4 [73, 73] { R16821 += 1, R16777 += 1 };
  s1 -> s5 [81, 81] { R16821 += 1, R16777 += 1 };
  s1 -> s1 [82, 65535] { R16821 += 1, R16777 += 1 };
  s2 -> s1 [0, 72] { R16821 += 1, R16777 += 1 };
  s2 -> s2 [0, 65535] { R16821 += 1, R16776 += 1, R16777 += 1 };
  s2 -> s3 [73, 73] { R16821 += 1, R16777 += 1 };
  s2 -> s4 [73, 73] { R16821 += 1, R16777 += 1 };
  s2 -> s5 [81, 81] { R16821 += 1, R16777 += 1 };
  s2 -> s1 [82, 65535] { R16821 += 1, R16777 += 1 };
  s4 -> s4 [0, 73] { R16821 += 1, R16777 += 1 };
  s4 -> s8 [81, 81] { R16821 += 1, R16777 += 1 };
  s4 -> s4 [82, 65535] { R16821 += 1, R16777 += 1 };
  s5 -> s5 [0, 72] { R16821 += 1, R16777 += 1 };
  s5 -> s5 [0, 65535] { R16821 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [73, 73] { R16821 += 1, R16777 += 1 };
  s5 -> s8 [73, 73] { R16821 += 1, R16777 += 1 };
  s5 -> s5 [81, 65535] { R16821 += 1, R16777 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R16821 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 73] { R16821 += 1, R16777 += 1 };
  s8 -> s8 [0, 65535] { R16821 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [81, 65535] { R16821 += 1, R16777 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 72] { R16823 += 1, R16779 += 1, R66 += 1 };
  s0 -> s2 [0, 65535] { R16823 += 1, R16778 += 1, R16779 += 1 };
  s0 -> s0 [0, 65535] { R16822 += 1, R16823 += 1 };
  s0 -> s3 [73, 73] { R16823 += 1, R16779 += 1, R66 += 1 };
  s0 -> s4 [73, 73] { R16823 += 1, R16779 += 1, R66 += 1 };
  s0 -> s1 [74, 65535] { R16823 += 1, R16779 += 1, R66 += 1 };
  s1 -> s1 [0, 72] { R16823 += 1, R16779 += 1, R66 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R16823 += 1 };
  s1 -> s3 [73, 73] { R16823 += 1, R16779 += 1, R66 += 1 };
  s1 -> s4 [73, 73] { R16823 += 1, R16779 += 1, R66 += 1 };
  s1 -> s1 [74, 65535] { R16823 += 1, R16779 += 1, R66 += 1 };
  s2 -> s1 [0, 72] { R16823 += 1, R16779 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R16823 += 1, R16778 += 1, R16779 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [73, 73] { R16823 += 1, R16779 += 1, R66 += 1 };
  s2 -> s4 [73, 73] { R16823 += 1, R16779 += 1, R66 += 1 };
  s2 -> s1 [74, 65535] { R16823 += 1, R16779 += 1, R66 += 1 };
  s3 -> s3 [0, 65535] { R16823 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R16823 += 1 };
  s4 -> s4 [0, 65535] { R16823 += 1, R16779 += 1, R66 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R16823 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 72] { R16825 += 1, R16781 += 1, R68 += 1 };
  s0 -> s0 [0, 65535] { R16824 += 1, R16825 += 1 };
  s0 -> s2 [0, 65535] { R16825 += 1, R16780 += 1, R16781 += 1 };
  s0 -> s3 [73, 73] { R16825 += 1, R16781 += 1, R68 += 1 };
  s0 -> s4 [73, 73] { R16825 += 1, R16781 += 1, R68 += 1 };
  s0 -> s1 [74, 65535] { R16825 += 1, R16781 += 1, R68 += 1 };
  s1 -> s1 [0, 72] { R16825 += 1, R16781 += 1, R68 += 1 };
  s1 -> s1 [0, 65535] { R16825 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [73, 73] { R16825 += 1, R16781 += 1, R68 += 1 };
  s1 -> s4 [73, 73] { R16825 += 1, R16781 += 1, R68 += 1 };
  s1 -> s1 [74, 65535] { R16825 += 1, R16781 += 1, R68 += 1 };
  s2 -> s1 [0, 72] { R16825 += 1, R16781 += 1, R68 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R16825 += 1, R16780 += 1, R16781 += 1 };
  s2 -> s3 [73, 73] { R16825 += 1, R16781 += 1, R68 += 1 };
  s2 -> s4 [73, 73] { R16825 += 1, R16781 += 1, R68 += 1 };
  s2 -> s1 [74, 65535] { R16825 += 1, R16781 += 1, R68 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R16825 += 1 };
  s4 -> s5 [0, 65535] { R16825 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R16825 += 1, R16781 += 1, R68 += 1 };
  s5 -> s5 [0, 65535] { R16825 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 72] { R16827 += 1, R16783 += 1, R11523 += 1 };
  s0 -> s2 [0, 72] { R16827 += 1, R16783 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s0 [0, 65535] { R16826 += 1, R16827 += 1 };
  s0 -> s3 [0, 65535] { R16827 += 1, R16782 += 1, R16783 += 1 };
  s0 -> s4 [73, 73] { R16827 += 1, R16783 += 1, R11523 += 1 };
  s0 -> s5 [73, 73] { R16827 += 1, R16783 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s6 [73, 73] { R16827 += 1, R16783 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s7 [73, 73] { R16827 += 1, R16783 += 1, R11523 += 1 };
  s0 -> s1 [74, 80] { R16827 += 1, R16783 += 1, R11523 += 1 };
  s0 -> s2 [74, 65535] { R16827 += 1, R16783 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s1 [82, 65535] { R16827 += 1, R16783 += 1, R11523 += 1 };
  s1 -> s1 [0, 72] { R16827 += 1, R16783 += 1, R11523 += 1 };
  s1 -> s1 [0, 65535] { R16827 += 1 };
  s1 -> s9 [0, 65535];
  s1 -> s4 [73, 73] { R16827 += 1, R16783 += 1 };
  s1 -> s7 [73, 73] { R16827 += 1, R16783 += 1 };
  s1 -> s1 [74, 80] { R16827 += 1, R16783 += 1, R11523 += 1 };
  s1 -> s1 [74, 65535] { R16827 += 1, R16783 += 1 };
  s1 -> s1 [82, 65535] { R16827 += 1, R16783 += 1, R11523 += 1 };
  s2 -> s1 [0, 72] { R16827 += 1, R16783 += 1, R11523 += 1 };
  s2 -> s2 [0, 72] { R16827 += 1, R16783 += 1, R11522 += 1, R11523 += 1 };
  s2 -> s4 [73, 73] { R16827 += 1, R16783 += 1, R11523 += 1 };
  s2 -> s5 [73, 73] { R16827 += 1, R16783 += 1, R11522 += 1, R11523 += 1 };
  s2 -> s6 [73, 73] { R16827 += 1, R16783 += 1, R11522 += 1, R11523 += 1 };
  s2 -> s7 [73, 73] { R16827 += 1, R16783 += 1, R11523 += 1 };
  s2 -> s1 [74, 80] { R16827 += 1, R16783 += 1, R11523 += 1 };
  s2 -> s2 [74, 65535] { R16827 += 1, R16783 += 1, R11522 += 1, R11523 += 1 };
  s2 -> s1 [82, 65535] { R16827 += 1, R16783 += 1, R11523 += 1 };
  s3 -> s1 [0, 72] { R16827 += 1, R16783 += 1, R11523 += 1 };
  s3 -> s2 [0, 72] { R16827 += 1, R16783 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s3 [0, 65535] { R16827 += 1, R16782 += 1, R16783 += 1 };
  s3 -> s4 [73, 73] { R16827 += 1, R16783 += 1, R11523 += 1 };
  s3 -> s5 [73, 73] { R16827 += 1, R16783 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s6 [73, 73] { R16827 += 1, R16783 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s7 [73, 73] { R16827 += 1, R16783 += 1, R11523 += 1 };
  s3 -> s1 [74, 80] { R16827 += 1, R16783 += 1, R11523 += 1 };
  s3 -> s2 [74, 65535] { R16827 += 1, R16783 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s1 [82, 65535] { R16827 += 1, R16783 += 1, R11523 += 1 };
  s4 -> s4 [0, 65535] { R16827 += 1 };
  s4 -> s9 [0, 65535];
  s6 -> s7 [0, 80] { R16827 += 1, R16783 += 1, R11523 += 1 };
  s6 -> s6 [0, 65535] { R16827 += 1, R16783 += 1, R11522 += 1, R11523 += 1 };
  s6 -> s7 [82, 65535] { R16827 += 1, R16783 += 1, R11523 += 1 };
  s7 -> s7 [0, 80] { R16827 += 1, R16783 += 1, R11523 += 1 };
  s7 -> s8 [0, 65535] { R16827 += 1 };
  s7 -> s7 [0, 65535] { R16827 += 1, R16783 += 1 };
  s7 -> s9 [0, 65535];
  s7 -> s7 [82, 65535] { R16827 += 1, R16783 += 1, R11523 += 1 };
  s8 -> s8 [0, 65535] { R16827 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s4, s8, s9, s1, s7;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 72] { R16829 += 1, R16785 += 1, R15343 += 1, R15344 += 1 };
  s0 -> s2 [0, 72] { R16829 += 1, R16785 += 1, R15342 += 1, R15343 += 1 };
  s0 -> s0 [0, 65535] { R16828 += 1, R16829 += 1 };
  s0 -> s3 [0, 65535] { R16829 += 1, R16784 += 1, R16785 += 1 };
  s0 -> s4 [73, 73] { R16829 += 1, R16785 += 1, R15342 += 1, R15343 += 1 };
  s0 -> s5 [73, 73] { R16829 += 1, R16785 += 1, R15343 += 1, R15344 += 1 };
  s0 -> s6 [73, 73] { R16829 += 1, R16785 += 1, R15343 += 1, R15344 += 1 };
  s0 -> s7 [73, 73] { R16829 += 1, R16785 += 1, R15342 += 1, R15343 += 1 };
  s0 -> s1 [74, 65535] { R16829 += 1, R16785 += 1, R15343 += 1, R15344 += 1 };
  s0 -> s2 [74, 65535] { R16829 += 1, R16785 += 1, R15342 += 1, R15343 += 1 };
  s1 -> s1 [0, 72] { R16829 += 1, R16785 += 1, R15343 += 1, R15344 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s1 [0, 65535] { R16829 += 1 };
  s1 -> s5 [73, 73] { R16829 += 1, R16785 += 1, R15343 += 1, R15344 += 1 };
  s1 -> s6 [73, 73] { R16829 += 1, R16785 += 1, R15343 += 1, R15344 += 1 };
  s1 -> s1 [74, 65535] { R16829 += 1, R16785 += 1, R15343 += 1, R15344 += 1 };
  s2 -> s1 [0, 72] { R16829 += 1, R16785 += 1, R15343 += 1, R15344 += 1 };
  s2 -> s2 [0, 72] { R16829 += 1, R16785 += 1, R15342 += 1, R15343 += 1 };
  s2 -> s4 [73, 73] { R16829 += 1, R16785 += 1, R15342 += 1, R15343 += 1 };
  s2 -> s5 [73, 73] { R16829 += 1, R16785 += 1, R15343 += 1, R15344 += 1 };
  s2 -> s6 [73, 73] { R16829 += 1, R16785 += 1, R15343 += 1, R15344 += 1 };
  s2 -> s7 [73, 73] { R16829 += 1, R16785 += 1, R15342 += 1, R15343 += 1 };
  s2 -> s1 [74, 65535] { R16829 += 1, R16785 += 1, R15343 += 1, R15344 += 1 };
  s2 -> s2 [74, 65535] { R16829 += 1, R16785 += 1, R15342 += 1, R15343 += 1 };
  s3 -> s1 [0, 72] { R16829 += 1, R16785 += 1, R15343 += 1, R15344 += 1 };
  s3 -> s2 [0, 72] { R16829 += 1, R16785 += 1, R15342 += 1, R15343 += 1 };
  s3 -> s3 [0, 65535] { R16829 += 1, R16784 += 1, R16785 += 1 };
  s3 -> s4 [73, 73] { R16829 += 1, R16785 += 1, R15342 += 1, R15343 += 1 };
  s3 -> s5 [73, 73] { R16829 += 1, R16785 += 1, R15343 += 1, R15344 += 1 };
  s3 -> s6 [73, 73] { R16829 += 1, R16785 += 1, R15343 += 1, R15344 += 1 };
  s3 -> s7 [73, 73] { R16829 += 1, R16785 += 1, R15342 += 1, R15343 += 1 };
  s3 -> s1 [74, 65535] { R16829 += 1, R16785 += 1, R15343 += 1, R15344 += 1 };
  s3 -> s2 [74, 65535] { R16829 += 1, R16785 += 1, R15342 += 1, R15343 += 1 };
  s5 -> s5 [0, 65535] { R16829 += 1, R16785 += 1, R15343 += 1, R15344 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s9 [0, 65535] { R16829 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R16829 += 1 };
  s7 -> s5 [0, 65535] { R16829 += 1, R16785 += 1, R15343 += 1, R15344 += 1 };
  s7 -> s7 [0, 65535] { R16829 += 1, R16785 += 1, R15342 += 1, R15343 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R16829 += 1 };
  accepting s8, s5, s9, s6, s1;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 72] { R16831 += 1, R16787 += 1, R16618 += 1, R16619 += 1 };
  s0 -> s2 [0, 65535] { R16831 += 1, R16786 += 1, R16787 += 1 };
  s0 -> s0 [0, 65535] { R16830 += 1, R16831 += 1 };
  s0 -> s3 [73, 73] { R16831 += 1, R16787 += 1, R16618 += 1, R16619 += 1 };
  s0 -> s4 [73, 73] { R16831 += 1, R16787 += 1, R16618 += 1, R16619 += 1 };
  s0 -> s1 [74, 65535] { R16831 += 1, R16787 += 1, R16618 += 1, R16619 += 1 };
  s1 -> s1 [0, 72] { R16831 += 1, R16787 += 1, R16618 += 1, R16619 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R16831 += 1 };
  s1 -> s3 [73, 73] { R16831 += 1, R16787 += 1, R16618 += 1, R16619 += 1 };
  s1 -> s4 [73, 73] { R16831 += 1, R16787 += 1, R16618 += 1, R16619 += 1 };
  s1 -> s1 [74, 65535] { R16831 += 1, R16787 += 1, R16618 += 1, R16619 += 1 };
  s2 -> s1 [0, 72] { R16831 += 1, R16787 += 1, R16618 += 1, R16619 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R16831 += 1, R16786 += 1, R16787 += 1 };
  s2 -> s3 [73, 73] { R16831 += 1, R16787 += 1, R16618 += 1, R16619 += 1 };
  s2 -> s4 [73, 73] { R16831 += 1, R16787 += 1, R16618 += 1, R16619 += 1 };
  s2 -> s1 [74, 65535] { R16831 += 1, R16787 += 1, R16618 += 1, R16619 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R16831 += 1 };
  s4 -> s5 [0, 65535] { R16831 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R16831 += 1, R16787 += 1, R16618 += 1, R16619 += 1 };
  s5 -> s5 [0, 65535] { R16831 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 72] { R16833 += 1, R16789 += 1, R16622 += 1, R16623 += 1 };
  s0 -> s2 [0, 65535] { R16833 += 1, R16788 += 1, R16789 += 1 };
  s0 -> s0 [0, 65535] { R16832 += 1, R16833 += 1 };
  s0 -> s3 [73, 73] { R16833 += 1, R16789 += 1, R16622 += 1, R16623 += 1 };
  s0 -> s4 [73, 73] { R16833 += 1, R16789 += 1, R16622 += 1, R16623 += 1 };
  s0 -> s1 [74, 65535] { R16833 += 1, R16789 += 1, R16622 += 1, R16623 += 1 };
  s1 -> s1 [0, 72] { R16833 += 1, R16789 += 1, R16622 += 1, R16623 += 1 };
  s1 -> s1 [0, 65535] { R16833 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R16833 += 1, R16789 += 1, R16622 += 1, R16623 += 1 };
  s1 -> s4 [73, 73] { R16833 += 1, R16789 += 1, R16622 += 1, R16623 += 1 };
  s1 -> s1 [74, 65535] { R16833 += 1, R16789 += 1, R16622 += 1, R16623 += 1 };
  s2 -> s1 [0, 72] { R16833 += 1, R16789 += 1, R16622 += 1, R16623 += 1 };
  s2 -> s2 [0, 65535] { R16833 += 1, R16788 += 1, R16789 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R16833 += 1, R16789 += 1, R16622 += 1, R16623 += 1 };
  s2 -> s4 [73, 73] { R16833 += 1, R16789 += 1, R16622 += 1, R16623 += 1 };
  s2 -> s1 [74, 65535] { R16833 += 1, R16789 += 1, R16622 += 1, R16623 += 1 };
  s3 -> s6 [0, 65535] { R16833 += 1 };
  s3 -> s3 [0, 65535] { R16833 += 1, R16789 += 1, R16622 += 1, R16623 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R16833 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R16833 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 72] { R16835 += 1, R16791 += 1, R16733 += 1 };
  s0 -> s2 [0, 72] { R16835 += 1, R16791 += 1, R16732 += 1, R16733 += 1 };
  s0 -> s0 [0, 65535] { R16834 += 1, R16835 += 1 };
  s0 -> s3 [0, 65535] { R16835 += 1, R16790 += 1, R16791 += 1 };
  s0 -> s4 [73, 73] { R16835 += 1, R16791 += 1, R16732 += 1, R16733 += 1 };
  s0 -> s5 [73, 73] { R16835 += 1, R16791 += 1, R16733 += 1 };
  s0 -> s6 [73, 73] { R16835 += 1, R16791 += 1, R16732 += 1, R16733 += 1 };
  s0 -> s7 [73, 73] { R16835 += 1, R16791 += 1, R16733 += 1 };
  s0 -> s1 [74, 80] { R16835 += 1, R16791 += 1, R16733 += 1 };
  s0 -> s2 [74, 65535] { R16835 += 1, R16791 += 1, R16732 += 1, R16733 += 1 };
  s0 -> s1 [84, 65535] { R16835 += 1, R16791 += 1, R16733 += 1 };
  s1 -> s1 [0, 72] { R16835 += 1, R16791 += 1, R16733 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s1 [0, 65535] { R16835 += 1 };
  s1 -> s5 [73, 73] { R16835 += 1, R16791 += 1 };
  s1 -> s7 [73, 73] { R16835 += 1, R16791 += 1 };
  s1 -> s1 [74, 80] { R16835 += 1, R16791 += 1, R16733 += 1 };
  s1 -> s1 [74, 65535] { R16835 += 1, R16791 += 1 };
  s1 -> s1 [84, 65535] { R16835 += 1, R16791 += 1, R16733 += 1 };
  s2 -> s1 [0, 72] { R16835 += 1, R16791 += 1, R16733 += 1 };
  s2 -> s2 [0, 72] { R16835 += 1, R16791 += 1, R16732 += 1, R16733 += 1 };
  s2 -> s4 [73, 73] { R16835 += 1, R16791 += 1, R16732 += 1, R16733 += 1 };
  s2 -> s5 [73, 73] { R16835 += 1, R16791 += 1, R16733 += 1 };
  s2 -> s6 [73, 73] { R16835 += 1, R16791 += 1, R16732 += 1, R16733 += 1 };
  s2 -> s7 [73, 73] { R16835 += 1, R16791 += 1, R16733 += 1 };
  s2 -> s1 [74, 80] { R16835 += 1, R16791 += 1, R16733 += 1 };
  s2 -> s2 [74, 65535] { R16835 += 1, R16791 += 1, R16732 += 1, R16733 += 1 };
  s2 -> s1 [84, 65535] { R16835 += 1, R16791 += 1, R16733 += 1 };
  s3 -> s1 [0, 72] { R16835 += 1, R16791 += 1, R16733 += 1 };
  s3 -> s2 [0, 72] { R16835 += 1, R16791 += 1, R16732 += 1, R16733 += 1 };
  s3 -> s3 [0, 65535] { R16835 += 1, R16790 += 1, R16791 += 1 };
  s3 -> s4 [73, 73] { R16835 += 1, R16791 += 1, R16732 += 1, R16733 += 1 };
  s3 -> s5 [73, 73] { R16835 += 1, R16791 += 1, R16733 += 1 };
  s3 -> s6 [73, 73] { R16835 += 1, R16791 += 1, R16732 += 1, R16733 += 1 };
  s3 -> s7 [73, 73] { R16835 += 1, R16791 += 1, R16733 += 1 };
  s3 -> s1 [74, 80] { R16835 += 1, R16791 += 1, R16733 += 1 };
  s3 -> s2 [74, 65535] { R16835 += 1, R16791 += 1, R16732 += 1, R16733 += 1 };
  s3 -> s1 [84, 65535] { R16835 += 1, R16791 += 1, R16733 += 1 };
  s5 -> s5 [0, 80] { R16835 += 1, R16791 += 1, R16733 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s5 [0, 65535] { R16835 += 1, R16791 += 1 };
  s5 -> s9 [0, 65535] { R16835 += 1 };
  s5 -> s5 [84, 65535] { R16835 += 1, R16791 += 1, R16733 += 1 };
  s6 -> s5 [0, 80] { R16835 += 1, R16791 += 1, R16733 += 1 };
  s6 -> s6 [0, 65535] { R16835 += 1, R16791 += 1, R16732 += 1, R16733 += 1 };
  s6 -> s5 [84, 65535] { R16835 += 1, R16791 += 1, R16733 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R16835 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R16835 += 1 };
  accepting s8, s5, s9, s1, s7;
};
};
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [113, 113];
  accepting s1;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
constraint R1 = R16751 && R2 = R16835 && R20 - R16835 = -1 && R21 = R16835 && R22 - R16835 = -1 && R23 = R16835 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R16621 + -1*R16619 - R53 = 0 && R52 + R16620 + R16618 = 0 && R16750 = 0 && R16776 = 0 && R16777 = 0 && R16782 = 0 && R16783 = 0 && R16784 = 0 && R16785 = 0 && R16790 = 0 && R16791 = 0 && R16792 = 0 && R16793 = R16835 && R16794 = 0 && R16795 = R16835 && R16796 = 0 && R16797 = R16835 && R16798 = 0 && R16799 = R16835 && R16800 = 0 && R16801 = R16835 && R16802 = 0 && R16803 = R16835 && R16804 = 0 && R16805 = R16835 && R16806 = 0 && R16807 = R16835 && R16808 = 0 && R16809 = R16835 && R16810 = 0 && R16811 = R16835 && R16812 = 0 && R16813 = R16835 && R16814 = 0 && R16815 = R16835 && R16816 = 0 && R16817 = R16835 && R16818 = 0 && R16819 = R16835 && R16820 = 0 && R16821 = R16835 && R16822 = 0 && R16823 = R16835 && R16824 = 0 && R16825 = R16835 && R16826 = 0 && R16827 = R16835 && R16828 = 0 && R16829 = R16835 && R16830 = 0 && R16831 = R16835 && R16832 = 0 && R16833 = R16835 && R16834 = 0 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R16621 + -1*R16619 - R53 < 1 && -1 < R16751 && 0 < R16835 && (R48 + R15347 + R15344 != 0 || ((R42 + R11524 + R11522 != 0 || R43 + R11525 + R11523 + -1*R16621 + -1*R16619 - R53 = 0 || R53 + R16621 + R16619 < 1) && (R42 + R11524 + R11522 = 0 || R53 + R16621 + R16619 < 1))) && (R48 + R15347 + R15344 != 0 || ((R46 + R15345 + R15342 != 0 || R47 + R15346 + R15343 + -1*R16621 + -1*R16619 - R53 = 0 || R53 + R16621 + R16619 < 1) && (R46 + R15345 + R15342 = 0 || R53 + R16621 + R16619 < 1))) && (R16736 != 0 || R16737 = R16751 || (R17 = 0 && R16751 = 0)) && (R16738 != 0 || R16739 = R16751 || (R17 = 0 && R16751 = 0)) && (R16740 != 0 || R16741 = R16751 || (R17 = 0 && R16751 = 0)) && (R16742 != 0 || R16743 = R16751 || (R17 = 0 && R16751 = 0)) && (R16744 != 0 || R16745 = R16751 || (R17 = 0 && R16751 = 0)) && (R16746 != 0 || R16747 = R16751 || (R17 = 0 && R16751 = 0)) && (R16748 != 0 || R16749 = R16751 || (R17 = 0 && R16751 = 0)) && (R16752 != 0 || R16751 = R16753 || (R17 = 0 && R16751 = 0)) && (R16754 != 0 || R16751 = R16755 || (R17 = 0 && R16751 = 0)) && (R18 = 0 || (R16774 = 0 && R16775 = 0)) && (R18 = 0 || (R16778 = 0 && R16779 = 0)) && (R18 = 0 || (R16780 = 0 && R16781 = 0)) && (R18 = 0 || (R16786 = 0 && R16787 = 0)) && (R18 = 0 || (R16788 = 0 && R16789 = 0)) && (R19 = 0 || (R16756 = 0 && R16757 = 0)) && (R19 = 0 || (R16758 = 0 && R16759 = 0)) && (R19 = 0 || (R16760 = 0 && R16761 = 0)) && (R19 = 0 || (R16762 = 0 && R16763 = 0)) && (R19 = 0 || (R16764 = 0 && R16765 = 0)) && (R19 = 0 || (R16766 = 0 && R16767 = 0)) && (R19 = 0 || (R16768 = 0 && R16769 = 0)) && (R19 = 0 || (R16770 = 0 && R16771 = 0)) && (R19 = 0 || (R16772 = 0 && R16773 = 0)) && (R48 + R15347 + R15344 = 0 || (R42 + R11524 + R11522 = 0 && R43 + R11525 + R11523 + -1*R16621 + -1*R16619 - R53 = 0)) && (R48 + R15347 + R15344 = 0 || (R46 + R15345 + R15342 = 0 && R47 + R15346 + R15343 + -1*R16621 + -1*R16619 - R53 = 0)) && (R58 + R16627 + R16624 = 0 || (R56 + R16625 + R16622 = 0 && R57 + R16626 + R16623 = 0)) && (R58 + R16627 + R16624 = 0 || (R62 + R16734 + R16732 = 0 && R63 + R16735 + R16733 = 0)) && (R16736 = 0 || (R17 = 0 && R16751 = 0)) && (R16738 = 0 || (R17 = 0 && R16751 = 0)) && (R16740 = 0 || (R17 = 0 && R16751 = 0)) && (R16742 = 0 || (R17 = 0 && R16751 = 0)) && (R16744 = 0 || (R17 = 0 && R16751 = 0)) && (R16746 = 0 || (R17 = 0 && R16751 = 0)) && (R16748 = 0 || (R17 = 0 && R16751 = 0)) && (R16752 = 0 || (R17 = 0 && R16751 = 0)) && (R16754 = 0 || (R17 = 0 && R16751 = 0));
// End of Parikh automata intersection problem
