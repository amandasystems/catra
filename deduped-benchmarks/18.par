// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R12, R13, R14, R15, R16, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R31, R32, R33, R34, R35, R36, R37, R38, R39, R4, R40, R41, R42, R43, R44, R45, R46, R47, R48, R49, R5, R50, R51, R52, R53, R54, R55, R56, R57, R6, R7, R8, R9;
synchronised {  // Automata constraining P21
automaton P21_0 {
  init s0;
  s0 -> s1 [9, 9];
  accepting s1;
};
};
synchronised {  // Automata constraining P20
automaton P20_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
synchronised {  // Automata constraining P23
automaton P23_0 {
  init s0;
  s0 -> s1 [13, 13];
  accepting s1;
};
};
synchronised {  // Automata constraining value
automaton value_0 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value_1 {
  init s0;
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s1 [12, 12] { R25 += 1 };
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value_2 {
  init s0;
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s0 -> s1 [0, 65535] { R27 += 1, R7 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R27 += 1, R7 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value_3 {
  init s0;
  s0 -> s0 [0, 65535] { R38 += 1, R39 += 1 };
  s0 -> s1 [0, 65535] { R39 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R39 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value_4 {
  init s0;
  s0 -> s0 [0, 65535] { R40 += 1, R41 += 1 };
  s0 -> s1 [0, 65535] { R41 += 1, R16 += 1, R17 += 1 };
  s0 -> s2 [10, 10] { R41 += 1, R17 += 1 };
  s1 -> s1 [0, 65535] { R41 += 1, R16 += 1, R17 += 1 };
  s1 -> s2 [10, 10] { R41 += 1, R17 += 1 };
  s2 -> s2 [0, 65535] { R41 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value_5 {
  init s0;
  s0 -> s1 [0, 65535] { R43 += 1, R18 += 1, R19 += 1 };
  s0 -> s0 [0, 65535] { R42 += 1, R43 += 1 };
  s0 -> s2 [0, 65535] { R43 += 1, R19 += 1, R5 += 1 };
  s1 -> s1 [0, 65535] { R43 += 1, R18 += 1, R19 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R43 += 1, R19 += 1, R5 += 1 };
  s2 -> s3 [0, 65535] { R43 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R43 += 1, R19 += 1, R5 += 1 };
  s3 -> s3 [0, 65535] { R43 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value_6 {
  init s0;
  s0 -> s1 [0, 8] { R45 += 1, R21 += 1 };
  s0 -> s2 [0, 65535] { R45 += 1, R20 += 1, R21 += 1 };
  s0 -> s0 [0, 65535] { R44 += 1, R45 += 1 };
  s0 -> s3 [9, 13] { R45 += 1, R21 += 1 };
  s0 -> s1 [14, 31] { R45 += 1, R21 += 1 };
  s0 -> s3 [32, 32] { R45 += 1, R21 += 1 };
  s0 -> s1 [33, 65535] { R45 += 1, R21 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R45 += 1, R21 += 1 };
  s1 -> s5 [0, 65535] { R45 += 1 };
  s2 -> s1 [0, 8] { R45 += 1, R21 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R45 += 1, R20 += 1, R21 += 1 };
  s2 -> s3 [9, 13] { R45 += 1, R21 += 1 };
  s2 -> s1 [14, 31] { R45 += 1, R21 += 1 };
  s2 -> s3 [32, 32] { R45 += 1, R21 += 1 };
  s2 -> s1 [33, 65535] { R45 += 1, R21 += 1 };
  s3 -> s1 [0, 65535] { R45 += 1, R21 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R45 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value_7 {
  init s0;
  s0 -> s1 [0, 65535] { R47 += 1, R23 += 1, R6 += 1 };
  s0 -> s2 [0, 65535] { R47 += 1, R22 += 1, R23 += 1 };
  s0 -> s0 [0, 65535] { R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535] { R47 += 1, R23 += 1, R6 += 1 };
  s1 -> s4 [0, 65535] { R47 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R47 += 1, R23 += 1, R6 += 1 };
  s2 -> s2 [0, 65535] { R47 += 1, R22 += 1, R23 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R47 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value_8 {
  init s0;
  s0 -> s1 [0, 65535] { R49 += 1, R29 += 1, R0 += 1 };
  s0 -> s2 [0, 65535] { R49 += 1, R28 += 1, R29 += 1 };
  s0 -> s0 [0, 65535] { R48 += 1, R49 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R49 += 1 };
  s1 -> s1 [0, 65535] { R49 += 1, R29 += 1, R0 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R49 += 1, R29 += 1, R0 += 1 };
  s2 -> s2 [0, 65535] { R49 += 1, R28 += 1, R29 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R49 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value_9 {
  init s0;
  s0 -> s0 [0, 65535] { R50 += 1, R51 += 1 };
  s0 -> s1 [0, 65535] { R51 += 1, R30 += 1, R31 += 1 };
  s0 -> s2 [0, 65535] { R51 += 1, R31 += 1, R8 += 1, R9 += 1 };
  s0 -> s3 [11, 11] { R51 += 1, R31 += 1, R9 += 1 };
  s1 -> s1 [0, 65535] { R51 += 1, R30 += 1, R31 += 1 };
  s1 -> s2 [0, 65535] { R51 += 1, R31 += 1, R8 += 1, R9 += 1 };
  s1 -> s3 [11, 11] { R51 += 1, R31 += 1, R9 += 1 };
  s2 -> s2 [0, 65535] { R51 += 1, R31 += 1, R8 += 1, R9 += 1 };
  s2 -> s3 [11, 11] { R51 += 1, R31 += 1, R9 += 1 };
  s3 -> s3 [0, 65535] { R51 += 1, R31 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R51 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R51 += 1 };
  accepting s3, s4, s5;
};
automaton value_10 {
  init s0;
  s0 -> s1 [0, 65535] { R53 += 1, R32 += 1, R33 += 1 };
  s0 -> s0 [0, 65535] { R52 += 1, R53 += 1 };
  s0 -> s2 [0, 65535] { R53 += 1, R33 += 1, R10 += 1, R11 += 1 };
  s0 -> s3 [0, 65535] { R53 += 1, R33 += 1, R11 += 1, R3 += 1 };
  s1 -> s1 [0, 65535] { R53 += 1, R32 += 1, R33 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s2 [0, 65535] { R53 += 1, R33 += 1, R10 += 1, R11 += 1 };
  s1 -> s3 [0, 65535] { R53 += 1, R33 += 1, R11 += 1, R3 += 1 };
  s2 -> s4 [0, 65535] { R53 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R53 += 1, R33 += 1, R10 += 1, R11 += 1 };
  s2 -> s3 [0, 65535] { R53 += 1, R33 += 1, R11 += 1, R3 += 1 };
  s3 -> s4 [0, 65535] { R53 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R53 += 1, R33 += 1, R11 += 1, R3 += 1 };
  s3 -> s6 [0, 65535] { R53 += 1, R33 += 1 };
  s4 -> s4 [0, 65535] { R53 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R53 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R53 += 1, R33 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value_11 {
  init s0;
  s0 -> s1 [0, 8] { R55 += 1, R35 += 1, R13 += 1 };
  s0 -> s2 [0, 65535] { R55 += 1, R34 += 1, R35 += 1 };
  s0 -> s3 [0, 65535] { R55 += 1, R35 += 1, R12 += 1, R13 += 1 };
  s0 -> s0 [0, 65535] { R54 += 1, R55 += 1 };
  s0 -> s4 [9, 13] { R55 += 1, R35 += 1, R13 += 1 };
  s0 -> s1 [14, 31] { R55 += 1, R35 += 1, R13 += 1 };
  s0 -> s4 [32, 32] { R55 += 1, R35 += 1, R13 += 1 };
  s0 -> s1 [33, 65535] { R55 += 1, R35 += 1, R13 += 1 };
  s1 -> s5 [0, 65535] { R55 += 1 };
  s1 -> s1 [0, 65535] { R55 += 1, R35 += 1, R13 += 1 };
  s1 -> s7 [0, 65535] { R55 += 1, R35 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s1 [0, 8] { R55 += 1, R35 += 1, R13 += 1 };
  s2 -> s2 [0, 65535] { R55 += 1, R34 += 1, R35 += 1 };
  s2 -> s3 [0, 65535] { R55 += 1, R35 += 1, R12 += 1, R13 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s4 [9, 13] { R55 += 1, R35 += 1, R13 += 1 };
  s2 -> s1 [14, 31] { R55 += 1, R35 += 1, R13 += 1 };
  s2 -> s4 [32, 32] { R55 += 1, R35 += 1, R13 += 1 };
  s2 -> s1 [33, 65535] { R55 += 1, R35 += 1, R13 += 1 };
  s3 -> s1 [0, 8] { R55 += 1, R35 += 1, R13 += 1 };
  s3 -> s5 [0, 65535] { R55 += 1 };
  s3 -> s3 [0, 65535] { R55 += 1, R35 += 1, R12 += 1, R13 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s4 [9, 13] { R55 += 1, R35 += 1, R13 += 1 };
  s3 -> s1 [14, 31] { R55 += 1, R35 += 1, R13 += 1 };
  s3 -> s4 [32, 32] { R55 += 1, R35 += 1, R13 += 1 };
  s3 -> s1 [33, 65535] { R55 += 1, R35 += 1, R13 += 1 };
  s4 -> s1 [0, 65535] { R55 += 1, R35 += 1, R13 += 1 };
  s5 -> s5 [0, 65535] { R55 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R55 += 1 };
  s7 -> s7 [0, 65535] { R55 += 1, R35 += 1 };
  s7 -> s6 [0, 65535];
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton value_12 {
  init s0;
  s0 -> s1 [0, 65535] { R57 += 1, R37 += 1, R14 += 1, R15 += 1 };
  s0 -> s2 [0, 65535] { R57 += 1, R37 += 1, R15 += 1, R4 += 1 };
  s0 -> s3 [0, 65535] { R57 += 1, R36 += 1, R37 += 1 };
  s0 -> s0 [0, 65535] { R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535] { R57 += 1, R37 += 1, R14 += 1, R15 += 1 };
  s1 -> s6 [0, 65535] { R57 += 1 };
  s1 -> s2 [0, 65535] { R57 += 1, R37 += 1, R15 += 1, R4 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R57 += 1, R37 += 1 };
  s2 -> s6 [0, 65535] { R57 += 1 };
  s2 -> s2 [0, 65535] { R57 += 1, R37 += 1, R15 += 1, R4 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R57 += 1, R37 += 1, R14 += 1, R15 += 1 };
  s3 -> s2 [0, 65535] { R57 += 1, R37 += 1, R15 += 1, R4 += 1 };
  s3 -> s3 [0, 65535] { R57 += 1, R36 += 1, R37 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R57 += 1, R37 += 1 };
  s5 -> s6 [0, 65535] { R57 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R57 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R0 = R9 && R1 - R37 = 1 && R2 = R57 && R8 - R9 = -1 && R16 = R37 && R17 - R37 = 1 && R18 = R37 && R19 - R37 = 1 && R20 = 0 && R21 = 1 && R22 = 0 && R23 = 1 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R28 = 0 && R29 = R37 && R30 = 0 && R31 = R37 && R32 = 0 && R33 = R37 && R34 = 0 && R35 = R37 && R36 = 0 && R38 = 1 && R39 = R57 && R40 = 1 && R41 = R57 && R42 = 1 && R43 = R57 && R44 = 1 && R45 = R57 && R46 = 1 && R47 = R57 && R48 = 1 && R49 = R57 && R50 = 1 && R51 = R57 && R52 = 1 && R53 = R57 && R54 = 1 && R55 = R57 && R56 = 1 && R9 != 0 && -1 < R37 && 0 < R57 && (R9 != R11 || R10 - R11 = -1 || (R3 = 0 && R11 < 0)) && (R12 != 0 || ((R4 != 0 || ((R9 != R13 || R13 = 1 || R13 < 0) && (R9 = R13 || R13 = 1 || R9 < 1))) && (R4 = 0 || ((R9 != R13 || R13 = 1 || R13 < 0) && (R13 != 1 || -1 < R9) && (R9 = R13 || R13 = 1))))) && (R14 != 0 || ((R4 != 0 || ((R9 != R15 || R15 = 1 || R15 < 0) && (R9 = R15 || R15 = 1 || R9 < 1))) && (R4 = 0 || ((R9 != R15 || R15 = 1 || R15 < 0) && (R15 != 1 || -1 < R9) && (R9 = R15 || R15 = 1))))) && (R9 = R11 || (R3 = 0 && R9 < 0)) && (R12 = 0 || (R4 = 0 && R9 < 0)) && (R14 = 0 || (R4 = 0 && R9 < 0));
// End of Parikh automata intersection problem
