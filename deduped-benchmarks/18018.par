// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R11522, R11523, R11524, R11525, R12, R15342, R15343, R15344, R15345, R15346, R15347, R17, R17888, R17889, R17890, R17891, R18, R18314, R18315, R18316, R18317, R18318, R18319, R18528, R18529, R18530, R18531, R18532, R18533, R18534, R18535, R18536, R18537, R18538, R18539, R18540, R18541, R18542, R18543, R18544, R18545, R18546, R18547, R18548, R18549, R18550, R18551, R18552, R18553, R18554, R18555, R18556, R18557, R18558, R18559, R18560, R18561, R18562, R18563, R18564, R18565, R18566, R18567, R18568, R18569, R18570, R18571, R18572, R18573, R18574, R18575, R18576, R18577, R18578, R18579, R18580, R18581, R18582, R18583, R18584, R18585, R18586, R18587, R18588, R18589, R18590, R18591, R18592, R18593, R18594, R18595, R18596, R18597, R18598, R18599, R18600, R18601, R18602, R18603, R18604, R18605, R18606, R18607, R18608, R18609, R18610, R18611, R18612, R18613, R18614, R18615, R18616, R18617, R18618, R18619, R18620, R18621, R18622, R18623, R18624, R18625, R18626, R18627, R18628, R18629, R18630, R18631, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 72];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [73, 73];
  s0 -> s1 [74, 65535];
  s1 -> s1 [0, 72];
  s1 -> s2 [73, 73];
  s1 -> s1 [74, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R21 += 1 };
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s1 [0, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R18552 += 1, R18553 += 1 };
  s0 -> s1 [0, 65535] { R18553 += 1, R19 += 1 };
  s1 -> s1 [0, 65535] { R18553 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 72] { R18555 += 1 };
  s0 -> s0 [0, 65535] { R18554 += 1, R18555 += 1 };
  s0 -> s2 [73, 73] { R18555 += 1 };
  s0 -> s3 [73, 73] { R18555 += 1 };
  s0 -> s1 [82, 65535] { R18555 += 1 };
  s1 -> s1 [0, 72] { R18555 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R18555 += 1 };
  s1 -> s3 [73, 73] { R18555 += 1 };
  s1 -> s1 [82, 65535] { R18555 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 73] { R18555 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [82, 65535] { R18555 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 72] { R18557 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R18556 += 1, R18557 += 1 };
  s0 -> s2 [73, 73] { R18557 += 1, R38 += 1 };
  s0 -> s3 [73, 73] { R18557 += 1, R38 += 1 };
  s0 -> s1 [74, 65535] { R18557 += 1, R38 += 1 };
  s1 -> s1 [0, 72] { R18557 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R18557 += 1, R38 += 1 };
  s1 -> s3 [73, 73] { R18557 += 1, R38 += 1 };
  s1 -> s1 [74, 65535] { R18557 += 1, R38 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R18557 += 1, R38 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 72] { R18559 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R18558 += 1, R18559 += 1 };
  s0 -> s2 [73, 73] { R18559 += 1, R40 += 1 };
  s0 -> s3 [73, 73] { R18559 += 1, R40 += 1 };
  s0 -> s1 [74, 65535] { R18559 += 1, R40 += 1 };
  s1 -> s1 [0, 72] { R18559 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R18559 += 1, R40 += 1 };
  s1 -> s3 [73, 73] { R18559 += 1, R40 += 1 };
  s1 -> s1 [74, 65535] { R18559 += 1, R40 += 1 };
  s2 -> s2 [0, 65535] { R18559 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 72] { R18561 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R18560 += 1, R18561 += 1 };
  s0 -> s2 [73, 73] { R18561 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [73, 73] { R18561 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [74, 65535] { R18561 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 72] { R18561 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R18561 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [73, 73] { R18561 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [74, 65535] { R18561 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535] { R18561 += 1, R42 += 1, R43 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 72] { R18563 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R18562 += 1, R18563 += 1 };
  s0 -> s2 [73, 73] { R18563 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [73, 73] { R18563 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [74, 65535] { R18563 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 72] { R18563 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R18563 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [73, 73] { R18563 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [74, 65535] { R18563 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535] { R18563 += 1, R46 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 72] { R18565 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R18564 += 1, R18565 += 1 };
  s0 -> s2 [73, 73] { R18565 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [73, 73] { R18565 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [74, 65535] { R18565 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 72] { R18565 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R18565 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [73, 73] { R18565 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [74, 65535] { R18565 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535] { R18565 += 1, R52 += 1, R53 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 72] { R18567 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R18566 += 1, R18567 += 1 };
  s0 -> s2 [73, 73] { R18567 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [73, 73] { R18567 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [74, 65535] { R18567 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 72] { R18567 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R18567 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [73, 73] { R18567 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [74, 65535] { R18567 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R18567 += 1, R56 += 1, R57 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 72] { R18569 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R18568 += 1, R18569 += 1 };
  s0 -> s2 [73, 73] { R18569 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [73, 73] { R18569 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [74, 65535] { R18569 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 72] { R18569 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R18569 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [73, 73] { R18569 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [74, 65535] { R18569 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535] { R18569 += 1, R62 += 1, R63 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 72] { R18589 += 1 };
  s0 -> s0 [0, 65535] { R18588 += 1, R18589 += 1 };
  s0 -> s2 [73, 73] { R18589 += 1 };
  s0 -> s1 [74, 65535] { R18589 += 1 };
  s1 -> s1 [0, 72] { R18589 += 1 };
  s1 -> s2 [73, 73] { R18589 += 1 };
  s1 -> s1 [74, 65535] { R18589 += 1 };
  s2 -> s2 [0, 65535] { R18589 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R18591 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R18590 += 1, R18591 += 1 };
  s1 -> s1 [0, 65535] { R18591 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 72] { R18593 += 1 };
  s0 -> s2 [0, 65535] { R18593 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R18592 += 1, R18593 += 1 };
  s0 -> s3 [73, 73] { R18593 += 1 };
  s0 -> s1 [74, 65535] { R18593 += 1 };
  s1 -> s1 [0, 72] { R18593 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [73, 73] { R18593 += 1 };
  s1 -> s1 [74, 65535] { R18593 += 1 };
  s2 -> s1 [0, 72] { R18593 += 1 };
  s2 -> s2 [0, 65535] { R18593 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [73, 73] { R18593 += 1 };
  s2 -> s1 [74, 65535] { R18593 += 1 };
  s3 -> s3 [0, 65535] { R18593 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 72] { R18595 += 1, R18533 += 1 };
  s0 -> s0 [0, 65535] { R18594 += 1, R18595 += 1 };
  s0 -> s2 [0, 65535] { R18595 += 1, R18532 += 1, R18533 += 1 };
  s0 -> s1 [74, 65535] { R18595 += 1, R18533 += 1 };
  s1 -> s1 [0, 72] { R18595 += 1, R18533 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R18595 += 1 };
  s1 -> s1 [74, 65535] { R18595 += 1, R18533 += 1 };
  s2 -> s1 [0, 72] { R18595 += 1, R18533 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R18595 += 1, R18532 += 1, R18533 += 1 };
  s2 -> s1 [74, 65535] { R18595 += 1, R18533 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s0 [0, 65535] { R18596 += 1, R18597 += 1 };
  s0 -> s1 [0, 65535] { R18597 += 1, R18535 += 1, R17 += 1 };
  s0 -> s2 [0, 65535] { R18597 += 1, R18534 += 1, R18535 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R18597 += 1 };
  s1 -> s1 [0, 65535] { R18597 += 1, R18535 += 1, R17 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R18597 += 1, R18535 += 1, R17 += 1 };
  s2 -> s2 [0, 65535] { R18597 += 1, R18534 += 1, R18535 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R18597 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 73] { R18599 += 1, R18537 += 1 };
  s0 -> s2 [0, 65535] { R18599 += 1, R18536 += 1, R18537 += 1 };
  s0 -> s0 [0, 65535] { R18598 += 1, R18599 += 1 };
  s0 -> s1 [81, 65535] { R18599 += 1, R18537 += 1 };
  s1 -> s1 [0, 73] { R18599 += 1, R18537 += 1 };
  s1 -> s1 [0, 65535] { R18599 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [81, 65535] { R18599 += 1, R18537 += 1 };
  s2 -> s1 [0, 73] { R18599 += 1, R18537 += 1 };
  s2 -> s2 [0, 65535] { R18599 += 1, R18536 += 1, R18537 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [81, 65535] { R18599 += 1, R18537 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s0 [0, 65535] { R18600 += 1, R18601 += 1 };
  s0 -> s1 [0, 65535] { R18601 += 1, R18538 += 1, R18539 += 1 };
  s0 -> s2 [0, 65535] { R18601 += 1, R18539 += 1, R67 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R18601 += 1, R18538 += 1, R18539 += 1 };
  s1 -> s2 [0, 65535] { R18601 += 1, R18539 += 1, R67 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R18601 += 1 };
  s2 -> s2 [0, 65535] { R18601 += 1, R18539 += 1, R67 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R18601 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 80] { R18603 += 1, R18541 += 1 };
  s0 -> s2 [0, 65535] { R18603 += 1, R18540 += 1, R18541 += 1 };
  s0 -> s3 [0, 65535] { R18603 += 1, R18541 += 1, R69 += 1 };
  s0 -> s0 [0, 65535] { R18602 += 1, R18603 += 1 };
  s0 -> s1 [82, 65535] { R18603 += 1, R18541 += 1 };
  s1 -> s1 [0, 80] { R18603 += 1, R18541 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R18603 += 1 };
  s1 -> s1 [82, 65535] { R18603 += 1, R18541 += 1 };
  s2 -> s1 [0, 80] { R18603 += 1, R18541 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R18603 += 1, R18540 += 1, R18541 += 1 };
  s2 -> s3 [0, 65535] { R18603 += 1, R18541 += 1, R69 += 1 };
  s2 -> s1 [82, 65535] { R18603 += 1, R18541 += 1 };
  s3 -> s1 [0, 80] { R18603 += 1, R18541 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R18603 += 1, R18541 += 1, R69 += 1 };
  s3 -> s5 [0, 65535] { R18603 += 1 };
  s3 -> s1 [82, 65535] { R18603 += 1, R18541 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R18603 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 80] { R18605 += 1, R18543 += 1, R11525 += 1 };
  s0 -> s0 [0, 65535] { R18604 += 1, R18605 += 1 };
  s0 -> s2 [0, 65535] { R18605 += 1, R18542 += 1, R18543 += 1 };
  s0 -> s1 [0, 65535] { R18605 += 1, R18543 += 1 };
  s0 -> s1 [82, 65535] { R18605 += 1, R18543 += 1, R11525 += 1 };
  s1 -> s1 [0, 80] { R18605 += 1, R18543 += 1, R11525 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R18605 += 1, R18543 += 1 };
  s1 -> s4 [0, 65535] { R18605 += 1 };
  s1 -> s1 [82, 65535] { R18605 += 1, R18543 += 1, R11525 += 1 };
  s2 -> s1 [0, 80] { R18605 += 1, R18543 += 1, R11525 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R18605 += 1, R18542 += 1, R18543 += 1 };
  s2 -> s1 [0, 65535] { R18605 += 1, R18543 += 1 };
  s2 -> s1 [82, 65535] { R18605 += 1, R18543 += 1, R11525 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R18605 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s0 [0, 65535] { R18606 += 1, R18607 += 1 };
  s0 -> s1 [0, 65535] { R18607 += 1, R18544 += 1, R18545 += 1 };
  s0 -> s2 [0, 65535] { R18607 += 1, R18545 += 1 };
  s0 -> s3 [0, 65535] { R18607 += 1, R18545 += 1, R15346 += 1, R15347 += 1 };
  s1 -> s1 [0, 65535] { R18607 += 1, R18544 += 1, R18545 += 1 };
  s1 -> s2 [0, 65535] { R18607 += 1, R18545 += 1 };
  s1 -> s3 [0, 65535] { R18607 += 1, R18545 += 1, R15346 += 1, R15347 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s4 [0, 65535] { R18607 += 1 };
  s2 -> s2 [0, 65535] { R18607 += 1, R18545 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s4 [0, 65535] { R18607 += 1 };
  s3 -> s2 [0, 65535] { R18607 += 1, R18545 += 1 };
  s3 -> s3 [0, 65535] { R18607 += 1, R18545 += 1, R15346 += 1, R15347 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R18607 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 81] { R18609 += 1, R18547 += 1, R17891 += 1 };
  s0 -> s2 [0, 65535] { R18609 += 1, R18546 += 1, R18547 += 1 };
  s0 -> s0 [0, 65535] { R18608 += 1, R18609 += 1 };
  s0 -> s3 [83, 83] { R18609 += 1, R18547 += 1, R17891 += 1 };
  s0 -> s1 [84, 65535] { R18609 += 1, R18547 += 1, R17891 += 1 };
  s1 -> s1 [0, 81] { R18609 += 1, R18547 += 1, R17891 += 1 };
  s1 -> s3 [83, 83] { R18609 += 1, R18547 += 1, R17891 += 1 };
  s1 -> s1 [84, 65535] { R18609 += 1, R18547 += 1, R17891 += 1 };
  s2 -> s1 [0, 81] { R18609 += 1, R18547 += 1, R17891 += 1 };
  s2 -> s2 [0, 65535] { R18609 += 1, R18546 += 1, R18547 += 1 };
  s2 -> s3 [83, 83] { R18609 += 1, R18547 += 1, R17891 += 1 };
  s2 -> s1 [84, 65535] { R18609 += 1, R18547 += 1, R17891 += 1 };
  s3 -> s3 [0, 81] { R18609 += 1, R18547 += 1, R17891 += 1 };
  s3 -> s4 [0, 65535] { R18609 += 1 };
  s3 -> s3 [0, 65535] { R18609 += 1, R18547 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [83, 65535] { R18609 += 1, R18547 += 1, R17891 += 1 };
  s4 -> s4 [0, 65535] { R18609 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
automaton value2_28 {
  init s0;
  s0 -> s0 [0, 65535] { R18610 += 1, R18611 += 1 };
  s0 -> s1 [0, 65535] { R18611 += 1, R18549 += 1, R18318 += 1, R18319 += 1 };
  s0 -> s2 [0, 65535] { R18611 += 1, R18549 += 1 };
  s0 -> s3 [0, 65535] { R18611 += 1, R18548 += 1, R18549 += 1 };
  s1 -> s1 [0, 65535] { R18611 += 1, R18549 += 1, R18318 += 1, R18319 += 1 };
  s1 -> s2 [0, 65535] { R18611 += 1, R18549 += 1 };
  s1 -> s5 [0, 65535] { R18611 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R18611 += 1, R18549 += 1 };
  s2 -> s5 [0, 65535] { R18611 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R18611 += 1, R18549 += 1, R18318 += 1, R18319 += 1 };
  s3 -> s2 [0, 65535] { R18611 += 1, R18549 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R18611 += 1, R18548 += 1, R18549 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R18611 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s0 [0, 65535] { R18612 += 1, R18613 += 1 };
  s0 -> s1 [0, 65535] { R18613 += 1, R18551 += 1 };
  s0 -> s2 [0, 65535] { R18613 += 1, R18550 += 1, R18551 += 1 };
  s1 -> s1 [0, 65535] { R18613 += 1, R18551 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R18613 += 1 };
  s2 -> s1 [0, 65535] { R18613 += 1, R18551 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R18613 += 1, R18550 += 1, R18551 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R18613 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R18615 += 1, R18571 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R18614 += 1, R18615 += 1 };
  s0 -> s2 [0, 65535] { R18615 += 1, R18570 += 1, R18571 += 1 };
  s1 -> s1 [0, 65535] { R18615 += 1, R18571 += 1, R18 += 1 };
  s1 -> s4 [0, 65535] { R18615 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R18615 += 1, R18571 += 1, R18 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R18615 += 1, R18570 += 1, R18571 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R18615 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 72] { R18617 += 1, R18573 += 1 };
  s0 -> s2 [0, 65535] { R18617 += 1, R18572 += 1, R18573 += 1 };
  s0 -> s0 [0, 65535] { R18616 += 1, R18617 += 1 };
  s0 -> s3 [73, 73] { R18617 += 1, R18573 += 1 };
  s0 -> s4 [73, 73] { R18617 += 1, R18573 += 1 };
  s0 -> s5 [81, 81] { R18617 += 1, R18573 += 1 };
  s0 -> s1 [82, 65535] { R18617 += 1, R18573 += 1 };
  s1 -> s1 [0, 72] { R18617 += 1, R18573 += 1 };
  s1 -> s3 [73, 73] { R18617 += 1, R18573 += 1 };
  s1 -> s4 [73, 73] { R18617 += 1, R18573 += 1 };
  s1 -> s5 [81, 81] { R18617 += 1, R18573 += 1 };
  s1 -> s1 [82, 65535] { R18617 += 1, R18573 += 1 };
  s2 -> s1 [0, 72] { R18617 += 1, R18573 += 1 };
  s2 -> s2 [0, 65535] { R18617 += 1, R18572 += 1, R18573 += 1 };
  s2 -> s3 [73, 73] { R18617 += 1, R18573 += 1 };
  s2 -> s4 [73, 73] { R18617 += 1, R18573 += 1 };
  s2 -> s5 [81, 81] { R18617 += 1, R18573 += 1 };
  s2 -> s1 [82, 65535] { R18617 += 1, R18573 += 1 };
  s3 -> s3 [0, 73] { R18617 += 1, R18573 += 1 };
  s3 -> s8 [81, 81] { R18617 += 1, R18573 += 1 };
  s3 -> s3 [82, 65535] { R18617 += 1, R18573 += 1 };
  s5 -> s5 [0, 72] { R18617 += 1, R18573 += 1 };
  s5 -> s5 [0, 65535] { R18617 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [73, 73] { R18617 += 1, R18573 += 1 };
  s5 -> s8 [73, 73] { R18617 += 1, R18573 += 1 };
  s5 -> s5 [81, 65535] { R18617 += 1, R18573 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R18617 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 73] { R18617 += 1, R18573 += 1 };
  s8 -> s8 [0, 65535] { R18617 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [81, 65535] { R18617 += 1, R18573 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 72] { R18619 += 1, R18575 += 1, R66 += 1 };
  s0 -> s2 [0, 65535] { R18619 += 1, R18574 += 1, R18575 += 1 };
  s0 -> s0 [0, 65535] { R18618 += 1, R18619 += 1 };
  s0 -> s3 [73, 73] { R18619 += 1, R18575 += 1, R66 += 1 };
  s0 -> s4 [73, 73] { R18619 += 1, R18575 += 1, R66 += 1 };
  s0 -> s1 [74, 65535] { R18619 += 1, R18575 += 1, R66 += 1 };
  s1 -> s1 [0, 72] { R18619 += 1, R18575 += 1, R66 += 1 };
  s1 -> s1 [0, 65535] { R18619 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R18619 += 1, R18575 += 1, R66 += 1 };
  s1 -> s4 [73, 73] { R18619 += 1, R18575 += 1, R66 += 1 };
  s1 -> s1 [74, 65535] { R18619 += 1, R18575 += 1, R66 += 1 };
  s2 -> s1 [0, 72] { R18619 += 1, R18575 += 1, R66 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R18619 += 1, R18574 += 1, R18575 += 1 };
  s2 -> s3 [73, 73] { R18619 += 1, R18575 += 1, R66 += 1 };
  s2 -> s4 [73, 73] { R18619 += 1, R18575 += 1, R66 += 1 };
  s2 -> s1 [74, 65535] { R18619 += 1, R18575 += 1, R66 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R18619 += 1, R18575 += 1, R66 += 1 };
  s3 -> s6 [0, 65535] { R18619 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R18619 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R18619 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 72] { R18621 += 1, R18577 += 1, R68 += 1 };
  s0 -> s2 [0, 65535] { R18621 += 1, R18576 += 1, R18577 += 1 };
  s0 -> s0 [0, 65535] { R18620 += 1, R18621 += 1 };
  s0 -> s3 [73, 73] { R18621 += 1, R18577 += 1, R68 += 1 };
  s0 -> s4 [73, 73] { R18621 += 1, R18577 += 1, R68 += 1 };
  s0 -> s1 [74, 65535] { R18621 += 1, R18577 += 1, R68 += 1 };
  s1 -> s1 [0, 72] { R18621 += 1, R18577 += 1, R68 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R18621 += 1 };
  s1 -> s3 [73, 73] { R18621 += 1, R18577 += 1, R68 += 1 };
  s1 -> s4 [73, 73] { R18621 += 1, R18577 += 1, R68 += 1 };
  s1 -> s1 [74, 65535] { R18621 += 1, R18577 += 1, R68 += 1 };
  s2 -> s1 [0, 72] { R18621 += 1, R18577 += 1, R68 += 1 };
  s2 -> s2 [0, 65535] { R18621 += 1, R18576 += 1, R18577 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R18621 += 1, R18577 += 1, R68 += 1 };
  s2 -> s4 [73, 73] { R18621 += 1, R18577 += 1, R68 += 1 };
  s2 -> s1 [74, 65535] { R18621 += 1, R18577 += 1, R68 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R18621 += 1, R18577 += 1, R68 += 1 };
  s3 -> s6 [0, 65535] { R18621 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R18621 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R18621 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 72] { R18623 += 1, R18579 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s2 [0, 72] { R18623 += 1, R18579 += 1, R11523 += 1 };
  s0 -> s0 [0, 65535] { R18622 += 1, R18623 += 1 };
  s0 -> s3 [0, 65535] { R18623 += 1, R18578 += 1, R18579 += 1 };
  s0 -> s4 [73, 73] { R18623 += 1, R18579 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s5 [73, 73] { R18623 += 1, R18579 += 1, R11523 += 1 };
  s0 -> s6 [73, 73] { R18623 += 1, R18579 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s7 [73, 73] { R18623 += 1, R18579 += 1, R11523 += 1 };
  s0 -> s2 [74, 80] { R18623 += 1, R18579 += 1, R11523 += 1 };
  s0 -> s1 [74, 65535] { R18623 += 1, R18579 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s2 [82, 65535] { R18623 += 1, R18579 += 1, R11523 += 1 };
  s1 -> s1 [0, 72] { R18623 += 1, R18579 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s2 [0, 72] { R18623 += 1, R18579 += 1, R11523 += 1 };
  s1 -> s4 [73, 73] { R18623 += 1, R18579 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s5 [73, 73] { R18623 += 1, R18579 += 1, R11523 += 1 };
  s1 -> s6 [73, 73] { R18623 += 1, R18579 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s7 [73, 73] { R18623 += 1, R18579 += 1, R11523 += 1 };
  s1 -> s2 [74, 80] { R18623 += 1, R18579 += 1, R11523 += 1 };
  s1 -> s1 [74, 65535] { R18623 += 1, R18579 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s2 [82, 65535] { R18623 += 1, R18579 += 1, R11523 += 1 };
  s2 -> s2 [0, 72] { R18623 += 1, R18579 += 1, R11523 += 1 };
  s2 -> s9 [0, 65535];
  s2 -> s2 [0, 65535] { R18623 += 1 };
  s2 -> s5 [73, 73] { R18623 += 1, R18579 += 1 };
  s2 -> s7 [73, 73] { R18623 += 1, R18579 += 1 };
  s2 -> s2 [74, 80] { R18623 += 1, R18579 += 1, R11523 += 1 };
  s2 -> s2 [74, 65535] { R18623 += 1, R18579 += 1 };
  s2 -> s2 [82, 65535] { R18623 += 1, R18579 += 1, R11523 += 1 };
  s3 -> s1 [0, 72] { R18623 += 1, R18579 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s2 [0, 72] { R18623 += 1, R18579 += 1, R11523 += 1 };
  s3 -> s3 [0, 65535] { R18623 += 1, R18578 += 1, R18579 += 1 };
  s3 -> s4 [73, 73] { R18623 += 1, R18579 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s5 [73, 73] { R18623 += 1, R18579 += 1, R11523 += 1 };
  s3 -> s6 [73, 73] { R18623 += 1, R18579 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s7 [73, 73] { R18623 += 1, R18579 += 1, R11523 += 1 };
  s3 -> s2 [74, 80] { R18623 += 1, R18579 += 1, R11523 += 1 };
  s3 -> s1 [74, 65535] { R18623 += 1, R18579 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s2 [82, 65535] { R18623 += 1, R18579 += 1, R11523 += 1 };
  s5 -> s9 [0, 65535];
  s5 -> s5 [0, 65535] { R18623 += 1 };
  s6 -> s7 [0, 80] { R18623 += 1, R18579 += 1, R11523 += 1 };
  s6 -> s6 [0, 65535] { R18623 += 1, R18579 += 1, R11522 += 1, R11523 += 1 };
  s6 -> s7 [82, 65535] { R18623 += 1, R18579 += 1, R11523 += 1 };
  s7 -> s7 [0, 80] { R18623 += 1, R18579 += 1, R11523 += 1 };
  s7 -> s8 [0, 65535] { R18623 += 1 };
  s7 -> s9 [0, 65535];
  s7 -> s7 [0, 65535] { R18623 += 1, R18579 += 1 };
  s7 -> s7 [82, 65535] { R18623 += 1, R18579 += 1, R11523 += 1 };
  s8 -> s8 [0, 65535] { R18623 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s8, s5, s2, s9, s7;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 72] { R18625 += 1, R18581 += 1, R15343 += 1, R15344 += 1 };
  s0 -> s2 [0, 72] { R18625 += 1, R18581 += 1, R15342 += 1, R15343 += 1 };
  s0 -> s0 [0, 65535] { R18624 += 1, R18625 += 1 };
  s0 -> s3 [0, 65535] { R18625 += 1, R18580 += 1, R18581 += 1 };
  s0 -> s4 [73, 73] { R18625 += 1, R18581 += 1, R15342 += 1, R15343 += 1 };
  s0 -> s5 [73, 73] { R18625 += 1, R18581 += 1, R15343 += 1, R15344 += 1 };
  s0 -> s6 [73, 73] { R18625 += 1, R18581 += 1, R15343 += 1, R15344 += 1 };
  s0 -> s7 [73, 73] { R18625 += 1, R18581 += 1, R15342 += 1, R15343 += 1 };
  s0 -> s1 [74, 65535] { R18625 += 1, R18581 += 1, R15343 += 1, R15344 += 1 };
  s0 -> s2 [74, 65535] { R18625 += 1, R18581 += 1, R15342 += 1, R15343 += 1 };
  s1 -> s1 [0, 72] { R18625 += 1, R18581 += 1, R15343 += 1, R15344 += 1 };
  s1 -> s9 [0, 65535];
  s1 -> s1 [0, 65535] { R18625 += 1 };
  s1 -> s5 [73, 73] { R18625 += 1, R18581 += 1, R15343 += 1, R15344 += 1 };
  s1 -> s6 [73, 73] { R18625 += 1, R18581 += 1, R15343 += 1, R15344 += 1 };
  s1 -> s1 [74, 65535] { R18625 += 1, R18581 += 1, R15343 += 1, R15344 += 1 };
  s2 -> s1 [0, 72] { R18625 += 1, R18581 += 1, R15343 += 1, R15344 += 1 };
  s2 -> s2 [0, 72] { R18625 += 1, R18581 += 1, R15342 += 1, R15343 += 1 };
  s2 -> s4 [73, 73] { R18625 += 1, R18581 += 1, R15342 += 1, R15343 += 1 };
  s2 -> s5 [73, 73] { R18625 += 1, R18581 += 1, R15343 += 1, R15344 += 1 };
  s2 -> s6 [73, 73] { R18625 += 1, R18581 += 1, R15343 += 1, R15344 += 1 };
  s2 -> s7 [73, 73] { R18625 += 1, R18581 += 1, R15342 += 1, R15343 += 1 };
  s2 -> s1 [74, 65535] { R18625 += 1, R18581 += 1, R15343 += 1, R15344 += 1 };
  s2 -> s2 [74, 65535] { R18625 += 1, R18581 += 1, R15342 += 1, R15343 += 1 };
  s3 -> s1 [0, 72] { R18625 += 1, R18581 += 1, R15343 += 1, R15344 += 1 };
  s3 -> s2 [0, 72] { R18625 += 1, R18581 += 1, R15342 += 1, R15343 += 1 };
  s3 -> s3 [0, 65535] { R18625 += 1, R18580 += 1, R18581 += 1 };
  s3 -> s4 [73, 73] { R18625 += 1, R18581 += 1, R15342 += 1, R15343 += 1 };
  s3 -> s5 [73, 73] { R18625 += 1, R18581 += 1, R15343 += 1, R15344 += 1 };
  s3 -> s6 [73, 73] { R18625 += 1, R18581 += 1, R15343 += 1, R15344 += 1 };
  s3 -> s7 [73, 73] { R18625 += 1, R18581 += 1, R15342 += 1, R15343 += 1 };
  s3 -> s1 [74, 65535] { R18625 += 1, R18581 += 1, R15343 += 1, R15344 += 1 };
  s3 -> s2 [74, 65535] { R18625 += 1, R18581 += 1, R15342 += 1, R15343 += 1 };
  s5 -> s5 [0, 65535] { R18625 += 1 };
  s5 -> s9 [0, 65535];
  s6 -> s8 [0, 65535] { R18625 += 1 };
  s6 -> s6 [0, 65535] { R18625 += 1, R18581 += 1, R15343 += 1, R15344 += 1 };
  s6 -> s9 [0, 65535];
  s7 -> s6 [0, 65535] { R18625 += 1, R18581 += 1, R15343 += 1, R15344 += 1 };
  s7 -> s7 [0, 65535] { R18625 += 1, R18581 += 1, R15342 += 1, R15343 += 1 };
  s8 -> s8 [0, 65535] { R18625 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s8, s5, s9, s6, s1;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 72] { R18627 += 1, R18583 += 1, R17889 += 1 };
  s0 -> s2 [0, 72] { R18627 += 1, R18583 += 1, R17888 += 1, R17889 += 1 };
  s0 -> s3 [0, 65535] { R18627 += 1, R18582 += 1, R18583 += 1 };
  s0 -> s0 [0, 65535] { R18626 += 1, R18627 += 1 };
  s0 -> s4 [73, 73] { R18627 += 1, R18583 += 1, R17889 += 1 };
  s0 -> s5 [73, 73] { R18627 += 1, R18583 += 1, R17888 += 1, R17889 += 1 };
  s0 -> s6 [73, 73] { R18627 += 1, R18583 += 1, R17889 += 1 };
  s0 -> s7 [73, 73] { R18627 += 1, R18583 += 1, R17888 += 1, R17889 += 1 };
  s0 -> s1 [74, 81] { R18627 += 1, R18583 += 1, R17889 += 1 };
  s0 -> s2 [74, 65535] { R18627 += 1, R18583 += 1, R17888 += 1, R17889 += 1 };
  s0 -> s1 [84, 65535] { R18627 += 1, R18583 += 1, R17889 += 1 };
  s1 -> s1 [0, 72] { R18627 += 1, R18583 += 1, R17889 += 1 };
  s1 -> s1 [0, 65535] { R18627 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s4 [73, 73] { R18627 += 1, R18583 += 1, R17889 += 1 };
  s1 -> s6 [73, 73] { R18627 += 1, R18583 += 1, R17889 += 1 };
  s1 -> s1 [74, 81] { R18627 += 1, R18583 += 1, R17889 += 1 };
  s1 -> s1 [84, 65535] { R18627 += 1, R18583 += 1, R17889 += 1 };
  s2 -> s1 [0, 72] { R18627 += 1, R18583 += 1, R17889 += 1 };
  s2 -> s2 [0, 72] { R18627 += 1, R18583 += 1, R17888 += 1, R17889 += 1 };
  s2 -> s4 [73, 73] { R18627 += 1, R18583 += 1, R17889 += 1 };
  s2 -> s5 [73, 73] { R18627 += 1, R18583 += 1, R17888 += 1, R17889 += 1 };
  s2 -> s6 [73, 73] { R18627 += 1, R18583 += 1, R17889 += 1 };
  s2 -> s7 [73, 73] { R18627 += 1, R18583 += 1, R17888 += 1, R17889 += 1 };
  s2 -> s1 [74, 81] { R18627 += 1, R18583 += 1, R17889 += 1 };
  s2 -> s2 [74, 65535] { R18627 += 1, R18583 += 1, R17888 += 1, R17889 += 1 };
  s2 -> s1 [84, 65535] { R18627 += 1, R18583 += 1, R17889 += 1 };
  s3 -> s1 [0, 72] { R18627 += 1, R18583 += 1, R17889 += 1 };
  s3 -> s2 [0, 72] { R18627 += 1, R18583 += 1, R17888 += 1, R17889 += 1 };
  s3 -> s3 [0, 65535] { R18627 += 1, R18582 += 1, R18583 += 1 };
  s3 -> s4 [73, 73] { R18627 += 1, R18583 += 1, R17889 += 1 };
  s3 -> s5 [73, 73] { R18627 += 1, R18583 += 1, R17888 += 1, R17889 += 1 };
  s3 -> s6 [73, 73] { R18627 += 1, R18583 += 1, R17889 += 1 };
  s3 -> s7 [73, 73] { R18627 += 1, R18583 += 1, R17888 += 1, R17889 += 1 };
  s3 -> s1 [74, 81] { R18627 += 1, R18583 += 1, R17889 += 1 };
  s3 -> s2 [74, 65535] { R18627 += 1, R18583 += 1, R17888 += 1, R17889 += 1 };
  s3 -> s1 [84, 65535] { R18627 += 1, R18583 += 1, R17889 += 1 };
  s4 -> s4 [0, 81] { R18627 += 1, R18583 += 1, R17889 += 1 };
  s4 -> s4 [0, 65535] { R18627 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s4 [84, 65535] { R18627 += 1, R18583 += 1, R17889 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R18627 += 1 };
  s7 -> s4 [0, 81] { R18627 += 1, R18583 += 1, R17889 += 1 };
  s7 -> s7 [0, 65535] { R18627 += 1, R18583 += 1, R17888 += 1, R17889 += 1 };
  s7 -> s4 [84, 65535] { R18627 += 1, R18583 += 1, R17889 += 1 };
  s8 -> s8 [0, 65535];
  accepting s1, s4, s6, s8;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 72] { R18629 += 1, R18585 += 1, R18315 += 1, R18316 += 1 };
  s0 -> s2 [0, 72] { R18629 += 1, R18585 += 1, R18314 += 1, R18315 += 1 };
  s0 -> s3 [0, 65535] { R18629 += 1, R18584 += 1, R18585 += 1 };
  s0 -> s0 [0, 65535] { R18628 += 1, R18629 += 1 };
  s0 -> s4 [73, 73] { R18629 += 1, R18585 += 1, R18315 += 1, R18316 += 1 };
  s0 -> s5 [73, 73] { R18629 += 1, R18585 += 1, R18314 += 1, R18315 += 1 };
  s0 -> s6 [73, 73] { R18629 += 1, R18585 += 1, R18315 += 1, R18316 += 1 };
  s0 -> s7 [73, 73] { R18629 += 1, R18585 += 1, R18314 += 1, R18315 += 1 };
  s0 -> s1 [74, 65535] { R18629 += 1, R18585 += 1, R18315 += 1, R18316 += 1 };
  s0 -> s2 [74, 65535] { R18629 += 1, R18585 += 1, R18314 += 1, R18315 += 1 };
  s1 -> s1 [0, 72] { R18629 += 1, R18585 += 1, R18315 += 1, R18316 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s1 [0, 65535] { R18629 += 1 };
  s1 -> s4 [73, 73] { R18629 += 1, R18585 += 1, R18315 += 1, R18316 += 1 };
  s1 -> s6 [73, 73] { R18629 += 1, R18585 += 1, R18315 += 1, R18316 += 1 };
  s1 -> s1 [74, 65535] { R18629 += 1, R18585 += 1, R18315 += 1, R18316 += 1 };
  s2 -> s1 [0, 72] { R18629 += 1, R18585 += 1, R18315 += 1, R18316 += 1 };
  s2 -> s2 [0, 72] { R18629 += 1, R18585 += 1, R18314 += 1, R18315 += 1 };
  s2 -> s4 [73, 73] { R18629 += 1, R18585 += 1, R18315 += 1, R18316 += 1 };
  s2 -> s5 [73, 73] { R18629 += 1, R18585 += 1, R18314 += 1, R18315 += 1 };
  s2 -> s6 [73, 73] { R18629 += 1, R18585 += 1, R18315 += 1, R18316 += 1 };
  s2 -> s7 [73, 73] { R18629 += 1, R18585 += 1, R18314 += 1, R18315 += 1 };
  s2 -> s1 [74, 65535] { R18629 += 1, R18585 += 1, R18315 += 1, R18316 += 1 };
  s2 -> s2 [74, 65535] { R18629 += 1, R18585 += 1, R18314 += 1, R18315 += 1 };
  s3 -> s1 [0, 72] { R18629 += 1, R18585 += 1, R18315 += 1, R18316 += 1 };
  s3 -> s2 [0, 72] { R18629 += 1, R18585 += 1, R18314 += 1, R18315 += 1 };
  s3 -> s3 [0, 65535] { R18629 += 1, R18584 += 1, R18585 += 1 };
  s3 -> s4 [73, 73] { R18629 += 1, R18585 += 1, R18315 += 1, R18316 += 1 };
  s3 -> s5 [73, 73] { R18629 += 1, R18585 += 1, R18314 += 1, R18315 += 1 };
  s3 -> s6 [73, 73] { R18629 += 1, R18585 += 1, R18315 += 1, R18316 += 1 };
  s3 -> s7 [73, 73] { R18629 += 1, R18585 += 1, R18314 += 1, R18315 += 1 };
  s3 -> s1 [74, 65535] { R18629 += 1, R18585 += 1, R18315 += 1, R18316 += 1 };
  s3 -> s2 [74, 65535] { R18629 += 1, R18585 += 1, R18314 += 1, R18315 += 1 };
  s4 -> s4 [0, 65535] { R18629 += 1, R18585 += 1, R18315 += 1, R18316 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s9 [0, 65535] { R18629 += 1 };
  s5 -> s4 [0, 65535] { R18629 += 1, R18585 += 1, R18315 += 1, R18316 += 1 };
  s5 -> s5 [0, 65535] { R18629 += 1, R18585 += 1, R18314 += 1, R18315 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R18629 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R18629 += 1 };
  accepting s4, s8, s9, s6, s1;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 72] { R18631 += 1, R18587 += 1, R18528 += 1, R18529 += 1 };
  s0 -> s2 [0, 72] { R18631 += 1, R18587 += 1, R18529 += 1 };
  s0 -> s0 [0, 65535] { R18630 += 1, R18631 += 1 };
  s0 -> s3 [0, 65535] { R18631 += 1, R18586 += 1, R18587 += 1 };
  s0 -> s4 [73, 73] { R18631 += 1, R18587 += 1, R18528 += 1, R18529 += 1 };
  s0 -> s5 [73, 73] { R18631 += 1, R18587 += 1, R18529 += 1 };
  s0 -> s6 [73, 73] { R18631 += 1, R18587 += 1, R18529 += 1 };
  s0 -> s7 [73, 73] { R18631 += 1, R18587 += 1, R18528 += 1, R18529 += 1 };
  s0 -> s2 [74, 80] { R18631 += 1, R18587 += 1, R18529 += 1 };
  s0 -> s1 [74, 65535] { R18631 += 1, R18587 += 1, R18528 += 1, R18529 += 1 };
  s0 -> s8 [81, 81] { R18631 += 1, R18587 += 1, R18529 += 1 };
  s0 -> s2 [84, 65535] { R18631 += 1, R18587 += 1, R18529 += 1 };
  s1 -> s1 [0, 72] { R18631 += 1, R18587 += 1, R18528 += 1, R18529 += 1 };
  s1 -> s2 [0, 72] { R18631 += 1, R18587 += 1, R18529 += 1 };
  s1 -> s4 [73, 73] { R18631 += 1, R18587 += 1, R18528 += 1, R18529 += 1 };
  s1 -> s5 [73, 73] { R18631 += 1, R18587 += 1, R18529 += 1 };
  s1 -> s6 [73, 73] { R18631 += 1, R18587 += 1, R18529 += 1 };
  s1 -> s7 [73, 73] { R18631 += 1, R18587 += 1, R18528 += 1, R18529 += 1 };
  s1 -> s2 [74, 80] { R18631 += 1, R18587 += 1, R18529 += 1 };
  s1 -> s1 [74, 65535] { R18631 += 1, R18587 += 1, R18528 += 1, R18529 += 1 };
  s1 -> s8 [81, 81] { R18631 += 1, R18587 += 1, R18529 += 1 };
  s1 -> s2 [84, 65535] { R18631 += 1, R18587 += 1, R18529 += 1 };
  s2 -> s2 [0, 72] { R18631 += 1, R18587 += 1, R18529 += 1 };
  s2 -> s5 [73, 73] { R18631 += 1, R18587 += 1 };
  s2 -> s6 [73, 73] { R18631 += 1, R18587 += 1 };
  s2 -> s2 [74, 80] { R18631 += 1, R18587 += 1, R18529 += 1 };
  s2 -> s2 [74, 65535] { R18631 += 1, R18587 += 1 };
  s2 -> s8 [81, 81] { R18631 += 1, R18587 += 1, R18529 += 1 };
  s2 -> s2 [84, 65535] { R18631 += 1, R18587 += 1, R18529 += 1 };
  s3 -> s1 [0, 72] { R18631 += 1, R18587 += 1, R18528 += 1, R18529 += 1 };
  s3 -> s2 [0, 72] { R18631 += 1, R18587 += 1, R18529 += 1 };
  s3 -> s3 [0, 65535] { R18631 += 1, R18586 += 1, R18587 += 1 };
  s3 -> s4 [73, 73] { R18631 += 1, R18587 += 1, R18528 += 1, R18529 += 1 };
  s3 -> s5 [73, 73] { R18631 += 1, R18587 += 1, R18529 += 1 };
  s3 -> s6 [73, 73] { R18631 += 1, R18587 += 1, R18529 += 1 };
  s3 -> s7 [73, 73] { R18631 += 1, R18587 += 1, R18528 += 1, R18529 += 1 };
  s3 -> s2 [74, 80] { R18631 += 1, R18587 += 1, R18529 += 1 };
  s3 -> s1 [74, 65535] { R18631 += 1, R18587 += 1, R18528 += 1, R18529 += 1 };
  s3 -> s8 [81, 81] { R18631 += 1, R18587 += 1, R18529 += 1 };
  s3 -> s2 [84, 65535] { R18631 += 1, R18587 += 1, R18529 += 1 };
  s4 -> s5 [0, 80] { R18631 += 1, R18587 += 1, R18529 += 1 };
  s4 -> s4 [0, 65535] { R18631 += 1, R18587 += 1, R18528 += 1, R18529 += 1 };
  s4 -> s10 [81, 81] { R18631 += 1, R18587 += 1, R18529 += 1 };
  s4 -> s5 [84, 65535] { R18631 += 1, R18587 += 1, R18529 += 1 };
  s5 -> s5 [0, 80] { R18631 += 1, R18587 += 1, R18529 += 1 };
  s5 -> s5 [0, 65535] { R18631 += 1, R18587 += 1 };
  s5 -> s10 [81, 81] { R18631 += 1, R18587 += 1, R18529 += 1 };
  s5 -> s5 [84, 65535] { R18631 += 1, R18587 += 1, R18529 += 1 };
  s8 -> s8 [0, 72] { R18631 += 1, R18587 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R18631 += 1 };
  s8 -> s10 [73, 73] { R18631 += 1, R18587 += 1 };
  s8 -> s11 [73, 73] { R18631 += 1, R18587 += 1 };
  s8 -> s8 [74, 65535] { R18631 += 1, R18587 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R18631 += 1, R18587 += 1 };
  s10 -> s9 [0, 65535];
  s10 -> s12 [0, 65535] { R18631 += 1 };
  s11 -> s11 [0, 65535] { R18631 += 1 };
  s11 -> s9 [0, 65535];
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R18631 += 1 };
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [113, 113];
  accepting s1;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
constraint R1 = R18547 && R2 = R18631 && R20 - R18631 = -1 && R21 = R18631 && R22 - R18631 = -1 && R23 = R18631 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R17891 + -1*R17889 - R53 = 0 && R52 + R17890 + R17888 = 0 && R18546 = 0 && R18572 = 0 && R18573 = 0 && R18578 = 0 && R18579 = 0 && R18580 = 0 && R18581 = 0 && R18582 = 0 && R18583 = 0 && R18584 = 0 && R18585 = 0 && R18586 = 0 && R18587 = 0 && R18588 = 0 && R18589 = R18631 && R18590 = 0 && R18591 = R18631 && R18592 = 0 && R18593 = R18631 && R18594 = 0 && R18595 = R18631 && R18596 = 0 && R18597 = R18631 && R18598 = 0 && R18599 = R18631 && R18600 = 0 && R18601 = R18631 && R18602 = 0 && R18603 = R18631 && R18604 = 0 && R18605 = R18631 && R18606 = 0 && R18607 = R18631 && R18608 = 0 && R18609 = R18631 && R18610 = 0 && R18611 = R18631 && R18612 = 0 && R18613 = R18631 && R18614 = 0 && R18615 = R18631 && R18616 = 0 && R18617 = R18631 && R18618 = 0 && R18619 = R18631 && R18620 = 0 && R18621 = R18631 && R18622 = 0 && R18623 = R18631 && R18624 = 0 && R18625 = R18631 && R18626 = 0 && R18627 = R18631 && R18628 = 0 && R18629 = R18631 && R18630 = 0 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R17891 + -1*R17889 - R53 < 1 && -1 < R18547 && 0 < R18631 && (R48 + R15347 + R15344 != 0 || ((R42 + R11524 + R11522 != 0 || R43 + R11525 + R11523 + -1*R17891 + -1*R17889 - R53 = 0 || R53 + R17891 + R17889 < 1) && (R42 + R11524 + R11522 = 0 || R53 + R17891 + R17889 < 1))) && (R48 + R15347 + R15344 != 0 || ((R46 + R15345 + R15342 != 0 || R47 + R15346 + R15343 + -1*R17891 + -1*R17889 - R53 = 0 || R53 + R17891 + R17889 < 1) && (R46 + R15345 + R15342 = 0 || R53 + R17891 + R17889 < 1))) && (R18532 != 0 || R18533 = R18547 || (R17 = 0 && R18547 = 0)) && (R18534 != 0 || R18535 = R18547 || (R17 = 0 && R18547 = 0)) && (R18536 != 0 || R18537 = R18547 || (R17 = 0 && R18547 = 0)) && (R18538 != 0 || R18539 = R18547 || (R17 = 0 && R18547 = 0)) && (R18540 != 0 || R18541 = R18547 || (R17 = 0 && R18547 = 0)) && (R18542 != 0 || R18543 = R18547 || (R17 = 0 && R18547 = 0)) && (R18544 != 0 || R18545 = R18547 || (R17 = 0 && R18547 = 0)) && (R18548 != 0 || R18547 = R18549 || (R17 = 0 && R18547 = 0)) && (R18550 != 0 || R18547 = R18551 || (R17 = 0 && R18547 = 0)) && (R18 = 0 || (R18570 = 0 && R18571 = 0)) && (R18 = 0 || (R18574 = 0 && R18575 = 0)) && (R18 = 0 || (R18576 = 0 && R18577 = 0)) && (R19 = 0 || (R18552 = 0 && R18553 = 0)) && (R19 = 0 || (R18554 = 0 && R18555 = 0)) && (R19 = 0 || (R18556 = 0 && R18557 = 0)) && (R19 = 0 || (R18558 = 0 && R18559 = 0)) && (R19 = 0 || (R18560 = 0 && R18561 = 0)) && (R19 = 0 || (R18562 = 0 && R18563 = 0)) && (R19 = 0 || (R18564 = 0 && R18565 = 0)) && (R19 = 0 || (R18566 = 0 && R18567 = 0)) && (R19 = 0 || (R18568 = 0 && R18569 = 0)) && (R48 + R15347 + R15344 = 0 || (R42 + R11524 + R11522 = 0 && R43 + R11525 + R11523 + -1*R17891 + -1*R17889 - R53 = 0)) && (R48 + R15347 + R15344 = 0 || (R46 + R15345 + R15342 = 0 && R47 + R15346 + R15343 + -1*R17891 + -1*R17889 - R53 = 0)) && (R58 + R18319 + R18316 = 0 || (R56 + R18317 + R18314 = 0 && R57 + R18318 + R18315 = 0)) && (R58 + R18319 + R18316 = 0 || (R62 + R18530 + R18528 = 0 && R63 + R18531 + R18529 = 0)) && (R18532 = 0 || (R17 = 0 && R18547 = 0)) && (R18534 = 0 || (R17 = 0 && R18547 = 0)) && (R18536 = 0 || (R17 = 0 && R18547 = 0)) && (R18538 = 0 || (R17 = 0 && R18547 = 0)) && (R18540 = 0 || (R17 = 0 && R18547 = 0)) && (R18542 = 0 || (R17 = 0 && R18547 = 0)) && (R18544 = 0 || (R17 = 0 && R18547 = 0)) && (R18548 = 0 || (R17 = 0 && R18547 = 0)) && (R18550 = 0 || (R17 = 0 && R18547 = 0));
// End of Parikh automata intersection problem
