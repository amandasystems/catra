// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R11522, R11523, R11524, R11525, R12, R15342, R15343, R15344, R15345, R15346, R15347, R16618, R16619, R16620, R16621, R17, R17044, R17045, R17046, R17047, R17048, R17049, R17258, R17259, R17260, R17261, R17262, R17263, R17264, R17265, R17266, R17267, R17268, R17269, R17270, R17271, R17272, R17273, R17274, R17275, R17276, R17277, R17278, R17279, R17280, R17281, R17282, R17283, R17284, R17285, R17286, R17287, R17288, R17289, R17290, R17291, R17292, R17293, R17294, R17295, R17296, R17297, R17298, R17299, R17300, R17301, R17302, R17303, R17304, R17305, R17306, R17307, R17308, R17309, R17310, R17311, R17312, R17313, R17314, R17315, R17316, R17317, R17318, R17319, R17320, R17321, R17322, R17323, R17324, R17325, R17326, R17327, R17328, R17329, R17330, R17331, R17332, R17333, R17334, R17335, R17336, R17337, R17338, R17339, R17340, R17341, R17342, R17343, R17344, R17345, R17346, R17347, R17348, R17349, R17350, R17351, R17352, R17353, R17354, R17355, R17356, R17357, R17358, R17359, R17360, R17361, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 72];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [73, 73];
  s0 -> s1 [74, 65535];
  s1 -> s1 [0, 72];
  s1 -> s2 [73, 73];
  s1 -> s1 [74, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R21 += 1 };
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s1 [0, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R17282 += 1, R17283 += 1 };
  s0 -> s1 [0, 65535] { R17283 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R17283 += 1, R19 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 72] { R17285 += 1 };
  s0 -> s0 [0, 65535] { R17284 += 1, R17285 += 1 };
  s0 -> s2 [73, 73] { R17285 += 1 };
  s0 -> s3 [73, 73] { R17285 += 1 };
  s0 -> s1 [82, 65535] { R17285 += 1 };
  s1 -> s1 [0, 72] { R17285 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R17285 += 1 };
  s1 -> s3 [73, 73] { R17285 += 1 };
  s1 -> s1 [82, 65535] { R17285 += 1 };
  s2 -> s2 [0, 73] { R17285 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [82, 65535] { R17285 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 72] { R17287 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R17286 += 1, R17287 += 1 };
  s0 -> s2 [73, 73] { R17287 += 1, R38 += 1 };
  s0 -> s3 [73, 73] { R17287 += 1, R38 += 1 };
  s0 -> s1 [74, 65535] { R17287 += 1, R38 += 1 };
  s1 -> s1 [0, 72] { R17287 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R17287 += 1, R38 += 1 };
  s1 -> s3 [73, 73] { R17287 += 1, R38 += 1 };
  s1 -> s1 [74, 65535] { R17287 += 1, R38 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R17287 += 1, R38 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 72] { R17289 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R17288 += 1, R17289 += 1 };
  s0 -> s2 [73, 73] { R17289 += 1, R40 += 1 };
  s0 -> s3 [73, 73] { R17289 += 1, R40 += 1 };
  s0 -> s1 [74, 65535] { R17289 += 1, R40 += 1 };
  s1 -> s1 [0, 72] { R17289 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R17289 += 1, R40 += 1 };
  s1 -> s3 [73, 73] { R17289 += 1, R40 += 1 };
  s1 -> s1 [74, 65535] { R17289 += 1, R40 += 1 };
  s2 -> s2 [0, 65535] { R17289 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 72] { R17291 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R17290 += 1, R17291 += 1 };
  s0 -> s2 [73, 73] { R17291 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [73, 73] { R17291 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [74, 65535] { R17291 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 72] { R17291 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R17291 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [73, 73] { R17291 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [74, 65535] { R17291 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R17291 += 1, R42 += 1, R43 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 72] { R17293 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R17292 += 1, R17293 += 1 };
  s0 -> s2 [73, 73] { R17293 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [73, 73] { R17293 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [74, 65535] { R17293 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 72] { R17293 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R17293 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [73, 73] { R17293 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [74, 65535] { R17293 += 1, R46 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R17293 += 1, R46 += 1, R47 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 72] { R17295 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R17294 += 1, R17295 += 1 };
  s0 -> s2 [73, 73] { R17295 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [73, 73] { R17295 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [74, 65535] { R17295 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 72] { R17295 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R17295 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [73, 73] { R17295 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [74, 65535] { R17295 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535] { R17295 += 1, R52 += 1, R53 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 72] { R17297 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R17296 += 1, R17297 += 1 };
  s0 -> s2 [73, 73] { R17297 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [73, 73] { R17297 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [74, 65535] { R17297 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 72] { R17297 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R17297 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [73, 73] { R17297 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [74, 65535] { R17297 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R17297 += 1, R56 += 1, R57 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 72] { R17299 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R17298 += 1, R17299 += 1 };
  s0 -> s2 [73, 73] { R17299 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [73, 73] { R17299 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [74, 65535] { R17299 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 72] { R17299 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R17299 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [73, 73] { R17299 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [74, 65535] { R17299 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R17299 += 1, R62 += 1, R63 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 72] { R17319 += 1 };
  s0 -> s0 [0, 65535] { R17318 += 1, R17319 += 1 };
  s0 -> s2 [73, 73] { R17319 += 1 };
  s0 -> s1 [74, 65535] { R17319 += 1 };
  s1 -> s1 [0, 72] { R17319 += 1 };
  s1 -> s2 [73, 73] { R17319 += 1 };
  s1 -> s1 [74, 65535] { R17319 += 1 };
  s2 -> s2 [0, 65535] { R17319 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R17320 += 1, R17321 += 1 };
  s0 -> s1 [0, 65535] { R17321 += 1, R1 += 1 };
  s1 -> s1 [0, 65535] { R17321 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 72] { R17323 += 1 };
  s0 -> s0 [0, 65535] { R17322 += 1, R17323 += 1 };
  s0 -> s2 [0, 65535] { R17323 += 1, R8 += 1 };
  s0 -> s3 [73, 73] { R17323 += 1 };
  s0 -> s1 [74, 65535] { R17323 += 1 };
  s1 -> s1 [0, 72] { R17323 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [73, 73] { R17323 += 1 };
  s1 -> s1 [74, 65535] { R17323 += 1 };
  s2 -> s1 [0, 72] { R17323 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R17323 += 1, R8 += 1 };
  s2 -> s3 [73, 73] { R17323 += 1 };
  s2 -> s1 [74, 65535] { R17323 += 1 };
  s3 -> s3 [0, 65535] { R17323 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 72] { R17325 += 1, R17263 += 1 };
  s0 -> s2 [0, 65535] { R17325 += 1, R17262 += 1, R17263 += 1 };
  s0 -> s0 [0, 65535] { R17324 += 1, R17325 += 1 };
  s0 -> s1 [74, 65535] { R17325 += 1, R17263 += 1 };
  s1 -> s1 [0, 72] { R17325 += 1, R17263 += 1 };
  s1 -> s1 [0, 65535] { R17325 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [74, 65535] { R17325 += 1, R17263 += 1 };
  s2 -> s1 [0, 72] { R17325 += 1, R17263 += 1 };
  s2 -> s2 [0, 65535] { R17325 += 1, R17262 += 1, R17263 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [74, 65535] { R17325 += 1, R17263 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s0 [0, 65535] { R17326 += 1, R17327 += 1 };
  s0 -> s1 [0, 65535] { R17327 += 1, R17265 += 1, R17 += 1 };
  s0 -> s2 [0, 65535] { R17327 += 1, R17264 += 1, R17265 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R17327 += 1 };
  s1 -> s1 [0, 65535] { R17327 += 1, R17265 += 1, R17 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R17327 += 1, R17265 += 1, R17 += 1 };
  s2 -> s2 [0, 65535] { R17327 += 1, R17264 += 1, R17265 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R17327 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 73] { R17329 += 1, R17267 += 1 };
  s0 -> s0 [0, 65535] { R17328 += 1, R17329 += 1 };
  s0 -> s2 [0, 65535] { R17329 += 1, R17266 += 1, R17267 += 1 };
  s0 -> s1 [81, 65535] { R17329 += 1, R17267 += 1 };
  s1 -> s1 [0, 73] { R17329 += 1, R17267 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R17329 += 1 };
  s1 -> s1 [81, 65535] { R17329 += 1, R17267 += 1 };
  s2 -> s1 [0, 73] { R17329 += 1, R17267 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R17329 += 1, R17266 += 1, R17267 += 1 };
  s2 -> s1 [81, 65535] { R17329 += 1, R17267 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R17331 += 1, R17269 += 1, R67 += 1 };
  s0 -> s2 [0, 65535] { R17331 += 1, R17268 += 1, R17269 += 1 };
  s0 -> s0 [0, 65535] { R17330 += 1, R17331 += 1 };
  s1 -> s1 [0, 65535] { R17331 += 1, R17269 += 1, R67 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R17331 += 1 };
  s2 -> s1 [0, 65535] { R17331 += 1, R17269 += 1, R67 += 1 };
  s2 -> s2 [0, 65535] { R17331 += 1, R17268 += 1, R17269 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R17331 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 80] { R17333 += 1, R17271 += 1 };
  s0 -> s2 [0, 65535] { R17333 += 1, R17271 += 1, R69 += 1 };
  s0 -> s0 [0, 65535] { R17332 += 1, R17333 += 1 };
  s0 -> s3 [0, 65535] { R17333 += 1, R17270 += 1, R17271 += 1 };
  s0 -> s1 [82, 65535] { R17333 += 1, R17271 += 1 };
  s1 -> s1 [0, 80] { R17333 += 1, R17271 += 1 };
  s1 -> s1 [0, 65535] { R17333 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [82, 65535] { R17333 += 1, R17271 += 1 };
  s2 -> s1 [0, 80] { R17333 += 1, R17271 += 1 };
  s2 -> s2 [0, 65535] { R17333 += 1, R17271 += 1, R69 += 1 };
  s2 -> s5 [0, 65535] { R17333 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [82, 65535] { R17333 += 1, R17271 += 1 };
  s3 -> s1 [0, 80] { R17333 += 1, R17271 += 1 };
  s3 -> s2 [0, 65535] { R17333 += 1, R17271 += 1, R69 += 1 };
  s3 -> s3 [0, 65535] { R17333 += 1, R17270 += 1, R17271 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [82, 65535] { R17333 += 1, R17271 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R17333 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 80] { R17335 += 1, R17273 += 1, R11525 += 1 };
  s0 -> s0 [0, 65535] { R17334 += 1, R17335 += 1 };
  s0 -> s2 [0, 65535] { R17335 += 1, R17272 += 1, R17273 += 1 };
  s0 -> s1 [0, 65535] { R17335 += 1, R17273 += 1 };
  s0 -> s1 [82, 65535] { R17335 += 1, R17273 += 1, R11525 += 1 };
  s1 -> s1 [0, 80] { R17335 += 1, R17273 += 1, R11525 += 1 };
  s1 -> s4 [0, 65535] { R17335 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R17335 += 1, R17273 += 1 };
  s1 -> s1 [82, 65535] { R17335 += 1, R17273 += 1, R11525 += 1 };
  s2 -> s1 [0, 80] { R17335 += 1, R17273 += 1, R11525 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R17335 += 1, R17272 += 1, R17273 += 1 };
  s2 -> s1 [0, 65535] { R17335 += 1, R17273 += 1 };
  s2 -> s1 [82, 65535] { R17335 += 1, R17273 += 1, R11525 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R17335 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s0 [0, 65535] { R17336 += 1, R17337 += 1 };
  s0 -> s1 [0, 65535] { R17337 += 1, R17275 += 1 };
  s0 -> s2 [0, 65535] { R17337 += 1, R17274 += 1, R17275 += 1 };
  s0 -> s3 [0, 65535] { R17337 += 1, R17275 += 1, R15346 += 1, R15347 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R17337 += 1, R17275 += 1 };
  s1 -> s5 [0, 65535] { R17337 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R17337 += 1, R17275 += 1 };
  s2 -> s2 [0, 65535] { R17337 += 1, R17274 += 1, R17275 += 1 };
  s2 -> s3 [0, 65535] { R17337 += 1, R17275 += 1, R15346 += 1, R15347 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R17337 += 1, R17275 += 1 };
  s3 -> s3 [0, 65535] { R17337 += 1, R17275 += 1, R15346 += 1, R15347 += 1 };
  s3 -> s5 [0, 65535] { R17337 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R17337 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 81] { R17339 += 1, R17277 += 1, R16621 += 1 };
  s0 -> s2 [0, 65535] { R17339 += 1, R17276 += 1, R17277 += 1 };
  s0 -> s0 [0, 65535] { R17338 += 1, R17339 += 1 };
  s0 -> s3 [0, 65535] { R17339 += 1, R17277 += 1, R16620 += 1, R16621 += 1 };
  s0 -> s4 [83, 83] { R17339 += 1, R17277 += 1, R16621 += 1 };
  s0 -> s1 [84, 65535] { R17339 += 1, R17277 += 1, R16621 += 1 };
  s1 -> s1 [0, 81] { R17339 += 1, R17277 += 1, R16621 += 1 };
  s1 -> s4 [83, 83] { R17339 += 1, R17277 += 1, R16621 += 1 };
  s1 -> s1 [84, 65535] { R17339 += 1, R17277 += 1, R16621 += 1 };
  s2 -> s1 [0, 81] { R17339 += 1, R17277 += 1, R16621 += 1 };
  s2 -> s2 [0, 65535] { R17339 += 1, R17276 += 1, R17277 += 1 };
  s2 -> s3 [0, 65535] { R17339 += 1, R17277 += 1, R16620 += 1, R16621 += 1 };
  s2 -> s4 [83, 83] { R17339 += 1, R17277 += 1, R16621 += 1 };
  s2 -> s1 [84, 65535] { R17339 += 1, R17277 += 1, R16621 += 1 };
  s3 -> s1 [0, 81] { R17339 += 1, R17277 += 1, R16621 += 1 };
  s3 -> s3 [0, 65535] { R17339 += 1, R17277 += 1, R16620 += 1, R16621 += 1 };
  s3 -> s4 [83, 83] { R17339 += 1, R17277 += 1, R16621 += 1 };
  s3 -> s1 [84, 65535] { R17339 += 1, R17277 += 1, R16621 += 1 };
  s4 -> s4 [0, 81] { R17339 += 1, R17277 += 1, R16621 += 1 };
  s4 -> s5 [0, 65535] { R17339 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R17339 += 1, R17277 += 1 };
  s4 -> s4 [83, 65535] { R17339 += 1, R17277 += 1, R16621 += 1 };
  s5 -> s5 [0, 65535] { R17339 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s4, s5, s6;
};
automaton value2_28 {
  init s0;
  s0 -> s0 [0, 65535] { R17340 += 1, R17341 += 1 };
  s0 -> s1 [0, 65535] { R17341 += 1, R17278 += 1, R17279 += 1 };
  s0 -> s2 [0, 65535] { R17341 += 1, R17279 += 1 };
  s0 -> s3 [0, 65535] { R17341 += 1, R17279 += 1, R17048 += 1, R17049 += 1 };
  s1 -> s1 [0, 65535] { R17341 += 1, R17278 += 1, R17279 += 1 };
  s1 -> s2 [0, 65535] { R17341 += 1, R17279 += 1 };
  s1 -> s3 [0, 65535] { R17341 += 1, R17279 += 1, R17048 += 1, R17049 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s4 [0, 65535] { R17341 += 1 };
  s2 -> s2 [0, 65535] { R17341 += 1, R17279 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s4 [0, 65535] { R17341 += 1 };
  s3 -> s2 [0, 65535] { R17341 += 1, R17279 += 1 };
  s3 -> s3 [0, 65535] { R17341 += 1, R17279 += 1, R17048 += 1, R17049 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R17341 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s0 [0, 65535] { R17342 += 1, R17343 += 1 };
  s0 -> s1 [0, 65535] { R17343 += 1, R17281 += 1 };
  s0 -> s2 [0, 65535] { R17343 += 1, R17280 += 1, R17281 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R17343 += 1 };
  s1 -> s1 [0, 65535] { R17343 += 1, R17281 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R17343 += 1, R17281 += 1 };
  s2 -> s2 [0, 65535] { R17343 += 1, R17280 += 1, R17281 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R17343 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s0 [0, 65535] { R17344 += 1, R17345 += 1 };
  s0 -> s1 [0, 65535] { R17345 += 1, R17301 += 1, R18 += 1 };
  s0 -> s2 [0, 65535] { R17345 += 1, R17300 += 1, R17301 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R17345 += 1 };
  s1 -> s1 [0, 65535] { R17345 += 1, R17301 += 1, R18 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R17345 += 1, R17301 += 1, R18 += 1 };
  s2 -> s2 [0, 65535] { R17345 += 1, R17300 += 1, R17301 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R17345 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 72] { R17347 += 1, R17303 += 1 };
  s0 -> s2 [0, 65535] { R17347 += 1, R17302 += 1, R17303 += 1 };
  s0 -> s0 [0, 65535] { R17346 += 1, R17347 += 1 };
  s0 -> s3 [73, 73] { R17347 += 1, R17303 += 1 };
  s0 -> s4 [73, 73] { R17347 += 1, R17303 += 1 };
  s0 -> s5 [81, 81] { R17347 += 1, R17303 += 1 };
  s0 -> s1 [82, 65535] { R17347 += 1, R17303 += 1 };
  s1 -> s1 [0, 72] { R17347 += 1, R17303 += 1 };
  s1 -> s3 [73, 73] { R17347 += 1, R17303 += 1 };
  s1 -> s4 [73, 73] { R17347 += 1, R17303 += 1 };
  s1 -> s5 [81, 81] { R17347 += 1, R17303 += 1 };
  s1 -> s1 [82, 65535] { R17347 += 1, R17303 += 1 };
  s2 -> s1 [0, 72] { R17347 += 1, R17303 += 1 };
  s2 -> s2 [0, 65535] { R17347 += 1, R17302 += 1, R17303 += 1 };
  s2 -> s3 [73, 73] { R17347 += 1, R17303 += 1 };
  s2 -> s4 [73, 73] { R17347 += 1, R17303 += 1 };
  s2 -> s5 [81, 81] { R17347 += 1, R17303 += 1 };
  s2 -> s1 [82, 65535] { R17347 += 1, R17303 += 1 };
  s4 -> s4 [0, 73] { R17347 += 1, R17303 += 1 };
  s4 -> s8 [81, 81] { R17347 += 1, R17303 += 1 };
  s4 -> s4 [82, 65535] { R17347 += 1, R17303 += 1 };
  s5 -> s5 [0, 72] { R17347 += 1, R17303 += 1 };
  s5 -> s5 [0, 65535] { R17347 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [73, 73] { R17347 += 1, R17303 += 1 };
  s5 -> s8 [73, 73] { R17347 += 1, R17303 += 1 };
  s5 -> s5 [81, 65535] { R17347 += 1, R17303 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R17347 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 73] { R17347 += 1, R17303 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R17347 += 1 };
  s8 -> s8 [81, 65535] { R17347 += 1, R17303 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 72] { R17349 += 1, R17305 += 1, R66 += 1 };
  s0 -> s2 [0, 65535] { R17349 += 1, R17304 += 1, R17305 += 1 };
  s0 -> s0 [0, 65535] { R17348 += 1, R17349 += 1 };
  s0 -> s3 [73, 73] { R17349 += 1, R17305 += 1, R66 += 1 };
  s0 -> s4 [73, 73] { R17349 += 1, R17305 += 1, R66 += 1 };
  s0 -> s1 [74, 65535] { R17349 += 1, R17305 += 1, R66 += 1 };
  s1 -> s1 [0, 72] { R17349 += 1, R17305 += 1, R66 += 1 };
  s1 -> s1 [0, 65535] { R17349 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R17349 += 1, R17305 += 1, R66 += 1 };
  s1 -> s4 [73, 73] { R17349 += 1, R17305 += 1, R66 += 1 };
  s1 -> s1 [74, 65535] { R17349 += 1, R17305 += 1, R66 += 1 };
  s2 -> s1 [0, 72] { R17349 += 1, R17305 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R17349 += 1, R17304 += 1, R17305 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R17349 += 1, R17305 += 1, R66 += 1 };
  s2 -> s4 [73, 73] { R17349 += 1, R17305 += 1, R66 += 1 };
  s2 -> s1 [74, 65535] { R17349 += 1, R17305 += 1, R66 += 1 };
  s3 -> s3 [0, 65535] { R17349 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R17349 += 1, R17305 += 1, R66 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R17349 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R17349 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 72] { R17351 += 1, R17307 += 1, R68 += 1 };
  s0 -> s2 [0, 65535] { R17351 += 1, R17306 += 1, R17307 += 1 };
  s0 -> s0 [0, 65535] { R17350 += 1, R17351 += 1 };
  s0 -> s3 [73, 73] { R17351 += 1, R17307 += 1, R68 += 1 };
  s0 -> s4 [73, 73] { R17351 += 1, R17307 += 1, R68 += 1 };
  s0 -> s1 [74, 65535] { R17351 += 1, R17307 += 1, R68 += 1 };
  s1 -> s1 [0, 72] { R17351 += 1, R17307 += 1, R68 += 1 };
  s1 -> s1 [0, 65535] { R17351 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R17351 += 1, R17307 += 1, R68 += 1 };
  s1 -> s4 [73, 73] { R17351 += 1, R17307 += 1, R68 += 1 };
  s1 -> s1 [74, 65535] { R17351 += 1, R17307 += 1, R68 += 1 };
  s2 -> s1 [0, 72] { R17351 += 1, R17307 += 1, R68 += 1 };
  s2 -> s2 [0, 65535] { R17351 += 1, R17306 += 1, R17307 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R17351 += 1, R17307 += 1, R68 += 1 };
  s2 -> s4 [73, 73] { R17351 += 1, R17307 += 1, R68 += 1 };
  s2 -> s1 [74, 65535] { R17351 += 1, R17307 += 1, R68 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R17351 += 1, R17307 += 1, R68 += 1 };
  s3 -> s6 [0, 65535] { R17351 += 1 };
  s4 -> s4 [0, 65535] { R17351 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R17351 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 72] { R17353 += 1, R17309 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s2 [0, 72] { R17353 += 1, R17309 += 1, R11523 += 1 };
  s0 -> s3 [0, 65535] { R17353 += 1, R17308 += 1, R17309 += 1 };
  s0 -> s0 [0, 65535] { R17352 += 1, R17353 += 1 };
  s0 -> s4 [73, 73] { R17353 += 1, R17309 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s5 [73, 73] { R17353 += 1, R17309 += 1, R11523 += 1 };
  s0 -> s6 [73, 73] { R17353 += 1, R17309 += 1, R11523 += 1 };
  s0 -> s7 [73, 73] { R17353 += 1, R17309 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s2 [74, 80] { R17353 += 1, R17309 += 1, R11523 += 1 };
  s0 -> s1 [74, 65535] { R17353 += 1, R17309 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s2 [82, 65535] { R17353 += 1, R17309 += 1, R11523 += 1 };
  s1 -> s1 [0, 72] { R17353 += 1, R17309 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s2 [0, 72] { R17353 += 1, R17309 += 1, R11523 += 1 };
  s1 -> s4 [73, 73] { R17353 += 1, R17309 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s5 [73, 73] { R17353 += 1, R17309 += 1, R11523 += 1 };
  s1 -> s6 [73, 73] { R17353 += 1, R17309 += 1, R11523 += 1 };
  s1 -> s7 [73, 73] { R17353 += 1, R17309 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s2 [74, 80] { R17353 += 1, R17309 += 1, R11523 += 1 };
  s1 -> s1 [74, 65535] { R17353 += 1, R17309 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s2 [82, 65535] { R17353 += 1, R17309 += 1, R11523 += 1 };
  s2 -> s2 [0, 72] { R17353 += 1, R17309 += 1, R11523 += 1 };
  s2 -> s9 [0, 65535];
  s2 -> s2 [0, 65535] { R17353 += 1 };
  s2 -> s5 [73, 73] { R17353 += 1, R17309 += 1 };
  s2 -> s6 [73, 73] { R17353 += 1, R17309 += 1 };
  s2 -> s2 [74, 80] { R17353 += 1, R17309 += 1, R11523 += 1 };
  s2 -> s2 [74, 65535] { R17353 += 1, R17309 += 1 };
  s2 -> s2 [82, 65535] { R17353 += 1, R17309 += 1, R11523 += 1 };
  s3 -> s1 [0, 72] { R17353 += 1, R17309 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s2 [0, 72] { R17353 += 1, R17309 += 1, R11523 += 1 };
  s3 -> s3 [0, 65535] { R17353 += 1, R17308 += 1, R17309 += 1 };
  s3 -> s4 [73, 73] { R17353 += 1, R17309 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s5 [73, 73] { R17353 += 1, R17309 += 1, R11523 += 1 };
  s3 -> s6 [73, 73] { R17353 += 1, R17309 += 1, R11523 += 1 };
  s3 -> s7 [73, 73] { R17353 += 1, R17309 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s2 [74, 80] { R17353 += 1, R17309 += 1, R11523 += 1 };
  s3 -> s1 [74, 65535] { R17353 += 1, R17309 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s2 [82, 65535] { R17353 += 1, R17309 += 1, R11523 += 1 };
  s4 -> s6 [0, 80] { R17353 += 1, R17309 += 1, R11523 += 1 };
  s4 -> s4 [0, 65535] { R17353 += 1, R17309 += 1, R11522 += 1, R11523 += 1 };
  s4 -> s6 [82, 65535] { R17353 += 1, R17309 += 1, R11523 += 1 };
  s5 -> s5 [0, 65535] { R17353 += 1 };
  s5 -> s9 [0, 65535];
  s6 -> s6 [0, 80] { R17353 += 1, R17309 += 1, R11523 += 1 };
  s6 -> s6 [0, 65535] { R17353 += 1, R17309 += 1 };
  s6 -> s8 [0, 65535] { R17353 += 1 };
  s6 -> s9 [0, 65535];
  s6 -> s6 [82, 65535] { R17353 += 1, R17309 += 1, R11523 += 1 };
  s8 -> s8 [0, 65535] { R17353 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s8, s5, s2, s9, s6;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 72] { R17355 += 1, R17311 += 1, R15342 += 1, R15343 += 1 };
  s0 -> s2 [0, 72] { R17355 += 1, R17311 += 1, R15343 += 1, R15344 += 1 };
  s0 -> s3 [0, 65535] { R17355 += 1, R17310 += 1, R17311 += 1 };
  s0 -> s0 [0, 65535] { R17354 += 1, R17355 += 1 };
  s0 -> s4 [73, 73] { R17355 += 1, R17311 += 1, R15343 += 1, R15344 += 1 };
  s0 -> s5 [73, 73] { R17355 += 1, R17311 += 1, R15342 += 1, R15343 += 1 };
  s0 -> s6 [73, 73] { R17355 += 1, R17311 += 1, R15342 += 1, R15343 += 1 };
  s0 -> s7 [73, 73] { R17355 += 1, R17311 += 1, R15343 += 1, R15344 += 1 };
  s0 -> s1 [74, 65535] { R17355 += 1, R17311 += 1, R15342 += 1, R15343 += 1 };
  s0 -> s2 [74, 65535] { R17355 += 1, R17311 += 1, R15343 += 1, R15344 += 1 };
  s1 -> s1 [0, 72] { R17355 += 1, R17311 += 1, R15342 += 1, R15343 += 1 };
  s1 -> s2 [0, 72] { R17355 += 1, R17311 += 1, R15343 += 1, R15344 += 1 };
  s1 -> s4 [73, 73] { R17355 += 1, R17311 += 1, R15343 += 1, R15344 += 1 };
  s1 -> s5 [73, 73] { R17355 += 1, R17311 += 1, R15342 += 1, R15343 += 1 };
  s1 -> s6 [73, 73] { R17355 += 1, R17311 += 1, R15342 += 1, R15343 += 1 };
  s1 -> s7 [73, 73] { R17355 += 1, R17311 += 1, R15343 += 1, R15344 += 1 };
  s1 -> s1 [74, 65535] { R17355 += 1, R17311 += 1, R15342 += 1, R15343 += 1 };
  s1 -> s2 [74, 65535] { R17355 += 1, R17311 += 1, R15343 += 1, R15344 += 1 };
  s2 -> s2 [0, 72] { R17355 += 1, R17311 += 1, R15343 += 1, R15344 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R17355 += 1 };
  s2 -> s4 [73, 73] { R17355 += 1, R17311 += 1, R15343 += 1, R15344 += 1 };
  s2 -> s7 [73, 73] { R17355 += 1, R17311 += 1, R15343 += 1, R15344 += 1 };
  s2 -> s2 [74, 65535] { R17355 += 1, R17311 += 1, R15343 += 1, R15344 += 1 };
  s3 -> s1 [0, 72] { R17355 += 1, R17311 += 1, R15342 += 1, R15343 += 1 };
  s3 -> s2 [0, 72] { R17355 += 1, R17311 += 1, R15343 += 1, R15344 += 1 };
  s3 -> s3 [0, 65535] { R17355 += 1, R17310 += 1, R17311 += 1 };
  s3 -> s4 [73, 73] { R17355 += 1, R17311 += 1, R15343 += 1, R15344 += 1 };
  s3 -> s5 [73, 73] { R17355 += 1, R17311 += 1, R15342 += 1, R15343 += 1 };
  s3 -> s6 [73, 73] { R17355 += 1, R17311 += 1, R15342 += 1, R15343 += 1 };
  s3 -> s7 [73, 73] { R17355 += 1, R17311 += 1, R15343 += 1, R15344 += 1 };
  s3 -> s1 [74, 65535] { R17355 += 1, R17311 += 1, R15342 += 1, R15343 += 1 };
  s3 -> s2 [74, 65535] { R17355 += 1, R17311 += 1, R15343 += 1, R15344 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s4 [0, 65535] { R17355 += 1 };
  s6 -> s6 [0, 65535] { R17355 += 1, R17311 += 1, R15342 += 1, R15343 += 1 };
  s6 -> s7 [0, 65535] { R17355 += 1, R17311 += 1, R15343 += 1, R15344 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s9 [0, 65535] { R17355 += 1 };
  s7 -> s7 [0, 65535] { R17355 += 1, R17311 += 1, R15343 += 1, R15344 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R17355 += 1 };
  accepting s4, s8, s2, s9, s7;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 72] { R17357 += 1, R17313 += 1, R16618 += 1, R16619 += 1 };
  s0 -> s2 [0, 65535] { R17357 += 1, R17312 += 1, R17313 += 1 };
  s0 -> s0 [0, 65535] { R17356 += 1, R17357 += 1 };
  s0 -> s3 [73, 73] { R17357 += 1, R17313 += 1, R16618 += 1, R16619 += 1 };
  s0 -> s4 [73, 73] { R17357 += 1, R17313 += 1, R16618 += 1, R16619 += 1 };
  s0 -> s1 [74, 65535] { R17357 += 1, R17313 += 1, R16618 += 1, R16619 += 1 };
  s1 -> s1 [0, 72] { R17357 += 1, R17313 += 1, R16618 += 1, R16619 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R17357 += 1 };
  s1 -> s3 [73, 73] { R17357 += 1, R17313 += 1, R16618 += 1, R16619 += 1 };
  s1 -> s4 [73, 73] { R17357 += 1, R17313 += 1, R16618 += 1, R16619 += 1 };
  s1 -> s1 [74, 65535] { R17357 += 1, R17313 += 1, R16618 += 1, R16619 += 1 };
  s2 -> s1 [0, 72] { R17357 += 1, R17313 += 1, R16618 += 1, R16619 += 1 };
  s2 -> s2 [0, 65535] { R17357 += 1, R17312 += 1, R17313 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R17357 += 1, R17313 += 1, R16618 += 1, R16619 += 1 };
  s2 -> s4 [73, 73] { R17357 += 1, R17313 += 1, R16618 += 1, R16619 += 1 };
  s2 -> s1 [74, 65535] { R17357 += 1, R17313 += 1, R16618 += 1, R16619 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R17357 += 1 };
  s3 -> s3 [0, 65535] { R17357 += 1, R17313 += 1, R16618 += 1, R16619 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R17357 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R17357 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 72] { R17359 += 1, R17315 += 1, R17044 += 1, R17045 += 1 };
  s0 -> s2 [0, 72] { R17359 += 1, R17315 += 1, R17045 += 1, R17046 += 1 };
  s0 -> s0 [0, 65535] { R17358 += 1, R17359 += 1 };
  s0 -> s3 [0, 65535] { R17359 += 1, R17314 += 1, R17315 += 1 };
  s0 -> s4 [73, 73] { R17359 += 1, R17315 += 1, R17045 += 1, R17046 += 1 };
  s0 -> s5 [73, 73] { R17359 += 1, R17315 += 1, R17044 += 1, R17045 += 1 };
  s0 -> s6 [73, 73] { R17359 += 1, R17315 += 1, R17045 += 1, R17046 += 1 };
  s0 -> s7 [73, 73] { R17359 += 1, R17315 += 1, R17044 += 1, R17045 += 1 };
  s0 -> s1 [74, 65535] { R17359 += 1, R17315 += 1, R17044 += 1, R17045 += 1 };
  s0 -> s2 [74, 65535] { R17359 += 1, R17315 += 1, R17045 += 1, R17046 += 1 };
  s1 -> s1 [0, 72] { R17359 += 1, R17315 += 1, R17044 += 1, R17045 += 1 };
  s1 -> s2 [0, 72] { R17359 += 1, R17315 += 1, R17045 += 1, R17046 += 1 };
  s1 -> s4 [73, 73] { R17359 += 1, R17315 += 1, R17045 += 1, R17046 += 1 };
  s1 -> s5 [73, 73] { R17359 += 1, R17315 += 1, R17044 += 1, R17045 += 1 };
  s1 -> s6 [73, 73] { R17359 += 1, R17315 += 1, R17045 += 1, R17046 += 1 };
  s1 -> s7 [73, 73] { R17359 += 1, R17315 += 1, R17044 += 1, R17045 += 1 };
  s1 -> s1 [74, 65535] { R17359 += 1, R17315 += 1, R17044 += 1, R17045 += 1 };
  s1 -> s2 [74, 65535] { R17359 += 1, R17315 += 1, R17045 += 1, R17046 += 1 };
  s2 -> s2 [0, 72] { R17359 += 1, R17315 += 1, R17045 += 1, R17046 += 1 };
  s2 -> s2 [0, 65535] { R17359 += 1 };
  s2 -> s9 [0, 65535];
  s2 -> s4 [73, 73] { R17359 += 1, R17315 += 1, R17045 += 1, R17046 += 1 };
  s2 -> s6 [73, 73] { R17359 += 1, R17315 += 1, R17045 += 1, R17046 += 1 };
  s2 -> s2 [74, 65535] { R17359 += 1, R17315 += 1, R17045 += 1, R17046 += 1 };
  s3 -> s1 [0, 72] { R17359 += 1, R17315 += 1, R17044 += 1, R17045 += 1 };
  s3 -> s2 [0, 72] { R17359 += 1, R17315 += 1, R17045 += 1, R17046 += 1 };
  s3 -> s3 [0, 65535] { R17359 += 1, R17314 += 1, R17315 += 1 };
  s3 -> s4 [73, 73] { R17359 += 1, R17315 += 1, R17045 += 1, R17046 += 1 };
  s3 -> s5 [73, 73] { R17359 += 1, R17315 += 1, R17044 += 1, R17045 += 1 };
  s3 -> s6 [73, 73] { R17359 += 1, R17315 += 1, R17045 += 1, R17046 += 1 };
  s3 -> s7 [73, 73] { R17359 += 1, R17315 += 1, R17044 += 1, R17045 += 1 };
  s3 -> s1 [74, 65535] { R17359 += 1, R17315 += 1, R17044 += 1, R17045 += 1 };
  s3 -> s2 [74, 65535] { R17359 += 1, R17315 += 1, R17045 += 1, R17046 += 1 };
  s4 -> s4 [0, 65535] { R17359 += 1 };
  s4 -> s9 [0, 65535];
  s6 -> s8 [0, 65535] { R17359 += 1 };
  s6 -> s6 [0, 65535] { R17359 += 1, R17315 += 1, R17045 += 1, R17046 += 1 };
  s6 -> s9 [0, 65535];
  s7 -> s6 [0, 65535] { R17359 += 1, R17315 += 1, R17045 += 1, R17046 += 1 };
  s7 -> s7 [0, 65535] { R17359 += 1, R17315 += 1, R17044 += 1, R17045 += 1 };
  s8 -> s8 [0, 65535] { R17359 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s4, s8, s2, s9, s6;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 72] { R17361 += 1, R17317 += 1, R17259 += 1 };
  s0 -> s2 [0, 72] { R17361 += 1, R17317 += 1, R17258 += 1, R17259 += 1 };
  s0 -> s0 [0, 65535] { R17360 += 1, R17361 += 1 };
  s0 -> s3 [0, 65535] { R17361 += 1, R17316 += 1, R17317 += 1 };
  s0 -> s4 [73, 73] { R17361 += 1, R17317 += 1, R17259 += 1 };
  s0 -> s5 [73, 73] { R17361 += 1, R17317 += 1, R17259 += 1 };
  s0 -> s6 [73, 73] { R17361 += 1, R17317 += 1, R17258 += 1, R17259 += 1 };
  s0 -> s7 [73, 73] { R17361 += 1, R17317 += 1, R17258 += 1, R17259 += 1 };
  s0 -> s1 [74, 80] { R17361 += 1, R17317 += 1, R17259 += 1 };
  s0 -> s2 [74, 65535] { R17361 += 1, R17317 += 1, R17258 += 1, R17259 += 1 };
  s0 -> s8 [81, 81] { R17361 += 1, R17317 += 1, R17259 += 1 };
  s0 -> s1 [84, 65535] { R17361 += 1, R17317 += 1, R17259 += 1 };
  s1 -> s1 [0, 72] { R17361 += 1, R17317 += 1, R17259 += 1 };
  s1 -> s4 [73, 73] { R17361 += 1, R17317 += 1 };
  s1 -> s5 [73, 73] { R17361 += 1, R17317 += 1 };
  s1 -> s1 [74, 80] { R17361 += 1, R17317 += 1, R17259 += 1 };
  s1 -> s1 [74, 65535] { R17361 += 1, R17317 += 1 };
  s1 -> s8 [81, 81] { R17361 += 1, R17317 += 1, R17259 += 1 };
  s1 -> s1 [84, 65535] { R17361 += 1, R17317 += 1, R17259 += 1 };
  s2 -> s1 [0, 72] { R17361 += 1, R17317 += 1, R17259 += 1 };
  s2 -> s2 [0, 72] { R17361 += 1, R17317 += 1, R17258 += 1, R17259 += 1 };
  s2 -> s4 [73, 73] { R17361 += 1, R17317 += 1, R17259 += 1 };
  s2 -> s5 [73, 73] { R17361 += 1, R17317 += 1, R17259 += 1 };
  s2 -> s6 [73, 73] { R17361 += 1, R17317 += 1, R17258 += 1, R17259 += 1 };
  s2 -> s7 [73, 73] { R17361 += 1, R17317 += 1, R17258 += 1, R17259 += 1 };
  s2 -> s1 [74, 80] { R17361 += 1, R17317 += 1, R17259 += 1 };
  s2 -> s2 [74, 65535] { R17361 += 1, R17317 += 1, R17258 += 1, R17259 += 1 };
  s2 -> s8 [81, 81] { R17361 += 1, R17317 += 1, R17259 += 1 };
  s2 -> s1 [84, 65535] { R17361 += 1, R17317 += 1, R17259 += 1 };
  s3 -> s1 [0, 72] { R17361 += 1, R17317 += 1, R17259 += 1 };
  s3 -> s2 [0, 72] { R17361 += 1, R17317 += 1, R17258 += 1, R17259 += 1 };
  s3 -> s3 [0, 65535] { R17361 += 1, R17316 += 1, R17317 += 1 };
  s3 -> s4 [73, 73] { R17361 += 1, R17317 += 1, R17259 += 1 };
  s3 -> s5 [73, 73] { R17361 += 1, R17317 += 1, R17259 += 1 };
  s3 -> s6 [73, 73] { R17361 += 1, R17317 += 1, R17258 += 1, R17259 += 1 };
  s3 -> s7 [73, 73] { R17361 += 1, R17317 += 1, R17258 += 1, R17259 += 1 };
  s3 -> s1 [74, 80] { R17361 += 1, R17317 += 1, R17259 += 1 };
  s3 -> s2 [74, 65535] { R17361 += 1, R17317 += 1, R17258 += 1, R17259 += 1 };
  s3 -> s8 [81, 81] { R17361 += 1, R17317 += 1, R17259 += 1 };
  s3 -> s1 [84, 65535] { R17361 += 1, R17317 += 1, R17259 += 1 };
  s5 -> s5 [0, 80] { R17361 += 1, R17317 += 1, R17259 += 1 };
  s5 -> s5 [0, 65535] { R17361 += 1, R17317 += 1 };
  s5 -> s11 [81, 81] { R17361 += 1, R17317 += 1, R17259 += 1 };
  s5 -> s5 [84, 65535] { R17361 += 1, R17317 += 1, R17259 += 1 };
  s7 -> s5 [0, 80] { R17361 += 1, R17317 += 1, R17259 += 1 };
  s7 -> s7 [0, 65535] { R17361 += 1, R17317 += 1, R17258 += 1, R17259 += 1 };
  s7 -> s11 [81, 81] { R17361 += 1, R17317 += 1, R17259 += 1 };
  s7 -> s5 [84, 65535] { R17361 += 1, R17317 += 1, R17259 += 1 };
  s8 -> s8 [0, 72] { R17361 += 1, R17317 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R17361 += 1 };
  s8 -> s10 [73, 73] { R17361 += 1, R17317 += 1 };
  s8 -> s11 [73, 73] { R17361 += 1, R17317 += 1 };
  s8 -> s8 [74, 65535] { R17361 += 1, R17317 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R17361 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s12 [0, 65535] { R17361 += 1 };
  s11 -> s11 [0, 65535] { R17361 += 1, R17317 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R17361 += 1 };
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [113, 113];
  accepting s1;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
constraint R1 = R17277 && R2 = R17361 && R20 - R17361 = -1 && R21 = R17361 && R22 - R17361 = -1 && R23 = R17361 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R16621 + -1*R16619 - R53 = 0 && R52 + R16620 + R16618 = 0 && R17276 = 0 && R17302 = 0 && R17303 = 0 && R17308 = 0 && R17309 = 0 && R17310 = 0 && R17311 = 0 && R17314 = 0 && R17315 = 0 && R17316 = 0 && R17317 = 0 && R17318 = 0 && R17319 = R17361 && R17320 = 0 && R17321 = R17361 && R17322 = 0 && R17323 = R17361 && R17324 = 0 && R17325 = R17361 && R17326 = 0 && R17327 = R17361 && R17328 = 0 && R17329 = R17361 && R17330 = 0 && R17331 = R17361 && R17332 = 0 && R17333 = R17361 && R17334 = 0 && R17335 = R17361 && R17336 = 0 && R17337 = R17361 && R17338 = 0 && R17339 = R17361 && R17340 = 0 && R17341 = R17361 && R17342 = 0 && R17343 = R17361 && R17344 = 0 && R17345 = R17361 && R17346 = 0 && R17347 = R17361 && R17348 = 0 && R17349 = R17361 && R17350 = 0 && R17351 = R17361 && R17352 = 0 && R17353 = R17361 && R17354 = 0 && R17355 = R17361 && R17356 = 0 && R17357 = R17361 && R17358 = 0 && R17359 = R17361 && R17360 = 0 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R16621 + -1*R16619 - R53 < 1 && -1 < R17277 && 0 < R17361 && (R48 + R15347 + R15344 != 0 || ((R42 + R11524 + R11522 != 0 || R43 + R11525 + R11523 + -1*R16621 + -1*R16619 - R53 = 0 || R53 + R16621 + R16619 < 1) && (R42 + R11524 + R11522 = 0 || R53 + R16621 + R16619 < 1))) && (R48 + R15347 + R15344 != 0 || ((R46 + R15345 + R15342 != 0 || R47 + R15346 + R15343 + -1*R16621 + -1*R16619 - R53 = 0 || R53 + R16621 + R16619 < 1) && (R46 + R15345 + R15342 = 0 || R53 + R16621 + R16619 < 1))) && (R17262 != 0 || R17263 = R17277 || (R17 = 0 && R17277 = 0)) && (R17264 != 0 || R17265 = R17277 || (R17 = 0 && R17277 = 0)) && (R17266 != 0 || R17267 = R17277 || (R17 = 0 && R17277 = 0)) && (R17268 != 0 || R17269 = R17277 || (R17 = 0 && R17277 = 0)) && (R17270 != 0 || R17271 = R17277 || (R17 = 0 && R17277 = 0)) && (R17272 != 0 || R17273 = R17277 || (R17 = 0 && R17277 = 0)) && (R17274 != 0 || R17275 = R17277 || (R17 = 0 && R17277 = 0)) && (R17278 != 0 || R17277 = R17279 || (R17 = 0 && R17277 = 0)) && (R17280 != 0 || R17277 = R17281 || (R17 = 0 && R17277 = 0)) && (R18 = 0 || (R17300 = 0 && R17301 = 0)) && (R18 = 0 || (R17304 = 0 && R17305 = 0)) && (R18 = 0 || (R17306 = 0 && R17307 = 0)) && (R18 = 0 || (R17312 = 0 && R17313 = 0)) && (R19 = 0 || (R17282 = 0 && R17283 = 0)) && (R19 = 0 || (R17284 = 0 && R17285 = 0)) && (R19 = 0 || (R17286 = 0 && R17287 = 0)) && (R19 = 0 || (R17288 = 0 && R17289 = 0)) && (R19 = 0 || (R17290 = 0 && R17291 = 0)) && (R19 = 0 || (R17292 = 0 && R17293 = 0)) && (R19 = 0 || (R17294 = 0 && R17295 = 0)) && (R19 = 0 || (R17296 = 0 && R17297 = 0)) && (R19 = 0 || (R17298 = 0 && R17299 = 0)) && (R48 + R15347 + R15344 = 0 || (R42 + R11524 + R11522 = 0 && R43 + R11525 + R11523 + -1*R16621 + -1*R16619 - R53 = 0)) && (R48 + R15347 + R15344 = 0 || (R46 + R15345 + R15342 = 0 && R47 + R15346 + R15343 + -1*R16621 + -1*R16619 - R53 = 0)) && (R58 + R17049 + R17046 = 0 || (R56 + R17047 + R17044 = 0 && R57 + R17048 + R17045 = 0)) && (R58 + R17049 + R17046 = 0 || (R62 + R17260 + R17258 = 0 && R63 + R17261 + R17259 = 0)) && (R17262 = 0 || (R17 = 0 && R17277 = 0)) && (R17264 = 0 || (R17 = 0 && R17277 = 0)) && (R17266 = 0 || (R17 = 0 && R17277 = 0)) && (R17268 = 0 || (R17 = 0 && R17277 = 0)) && (R17270 = 0 || (R17 = 0 && R17277 = 0)) && (R17272 = 0 || (R17 = 0 && R17277 = 0)) && (R17274 = 0 || (R17 = 0 && R17277 = 0)) && (R17278 = 0 || (R17 = 0 && R17277 = 0)) && (R17280 = 0 || (R17 = 0 && R17277 = 0));
// End of Parikh automata intersection problem
