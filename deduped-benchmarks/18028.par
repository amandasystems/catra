// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R11522, R11523, R11524, R11525, R12, R15342, R15343, R15344, R15345, R15346, R15347, R16618, R16619, R16620, R16621, R17, R17466, R17467, R17468, R17469, R17470, R17471, R17784, R17785, R17786, R17787, R17788, R17789, R17790, R17791, R17792, R17793, R17794, R17795, R17796, R17797, R17798, R17799, R17800, R17801, R17802, R17803, R17804, R17805, R17806, R17807, R17808, R17809, R17810, R17811, R17812, R17813, R17814, R17815, R17816, R17817, R17818, R17819, R17820, R17821, R17822, R17823, R17824, R17825, R17826, R17827, R17828, R17829, R17830, R17831, R17832, R17833, R17834, R17835, R17836, R17837, R17838, R17839, R17840, R17841, R17842, R17843, R17844, R17845, R17846, R17847, R17848, R17849, R17850, R17851, R17852, R17853, R17854, R17855, R17856, R17857, R17858, R17859, R17860, R17861, R17862, R17863, R17864, R17865, R17866, R17867, R17868, R17869, R17870, R17871, R17872, R17873, R17874, R17875, R17876, R17877, R17878, R17879, R17880, R17881, R17882, R17883, R17884, R17885, R17886, R17887, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 72];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [73, 73];
  s0 -> s1 [74, 65535];
  s1 -> s1 [0, 72];
  s1 -> s2 [73, 73];
  s1 -> s1 [74, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R21 += 1 };
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s1 [0, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R17809 += 1, R19 += 1 };
  s0 -> s0 [0, 65535] { R17808 += 1, R17809 += 1 };
  s1 -> s1 [0, 65535] { R17809 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 72] { R17811 += 1 };
  s0 -> s0 [0, 65535] { R17810 += 1, R17811 += 1 };
  s0 -> s2 [73, 73] { R17811 += 1 };
  s0 -> s3 [73, 73] { R17811 += 1 };
  s0 -> s1 [82, 65535] { R17811 += 1 };
  s1 -> s1 [0, 72] { R17811 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R17811 += 1 };
  s1 -> s3 [73, 73] { R17811 += 1 };
  s1 -> s1 [82, 65535] { R17811 += 1 };
  s2 -> s2 [0, 73] { R17811 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [82, 65535] { R17811 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 72] { R17813 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R17812 += 1, R17813 += 1 };
  s0 -> s2 [73, 73] { R17813 += 1, R38 += 1 };
  s0 -> s3 [73, 73] { R17813 += 1, R38 += 1 };
  s0 -> s1 [74, 65535] { R17813 += 1, R38 += 1 };
  s1 -> s1 [0, 72] { R17813 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R17813 += 1, R38 += 1 };
  s1 -> s3 [73, 73] { R17813 += 1, R38 += 1 };
  s1 -> s1 [74, 65535] { R17813 += 1, R38 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R17813 += 1, R38 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 72] { R17815 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R17814 += 1, R17815 += 1 };
  s0 -> s2 [73, 73] { R17815 += 1, R40 += 1 };
  s0 -> s3 [73, 73] { R17815 += 1, R40 += 1 };
  s0 -> s1 [74, 65535] { R17815 += 1, R40 += 1 };
  s1 -> s1 [0, 72] { R17815 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R17815 += 1, R40 += 1 };
  s1 -> s3 [73, 73] { R17815 += 1, R40 += 1 };
  s1 -> s1 [74, 65535] { R17815 += 1, R40 += 1 };
  s2 -> s2 [0, 65535] { R17815 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 72] { R17817 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R17816 += 1, R17817 += 1 };
  s0 -> s2 [73, 73] { R17817 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [73, 73] { R17817 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [74, 65535] { R17817 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 72] { R17817 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R17817 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [73, 73] { R17817 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [74, 65535] { R17817 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535] { R17817 += 1, R42 += 1, R43 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 72] { R17819 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R17818 += 1, R17819 += 1 };
  s0 -> s2 [73, 73] { R17819 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [73, 73] { R17819 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [74, 65535] { R17819 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 72] { R17819 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R17819 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [73, 73] { R17819 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [74, 65535] { R17819 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R17819 += 1, R46 += 1, R47 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 72] { R17821 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R17820 += 1, R17821 += 1 };
  s0 -> s2 [73, 73] { R17821 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [73, 73] { R17821 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [74, 65535] { R17821 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 72] { R17821 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R17821 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [73, 73] { R17821 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [74, 65535] { R17821 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535] { R17821 += 1, R52 += 1, R53 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 72] { R17823 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R17822 += 1, R17823 += 1 };
  s0 -> s2 [73, 73] { R17823 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [73, 73] { R17823 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [74, 65535] { R17823 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 72] { R17823 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R17823 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [73, 73] { R17823 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [74, 65535] { R17823 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R17823 += 1, R56 += 1, R57 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 72] { R17825 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R17824 += 1, R17825 += 1 };
  s0 -> s2 [73, 73] { R17825 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [73, 73] { R17825 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [74, 65535] { R17825 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 72] { R17825 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R17825 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [73, 73] { R17825 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [74, 65535] { R17825 += 1, R62 += 1, R63 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R17825 += 1, R62 += 1, R63 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 72] { R17845 += 1 };
  s0 -> s0 [0, 65535] { R17844 += 1, R17845 += 1 };
  s0 -> s2 [73, 73] { R17845 += 1 };
  s0 -> s1 [74, 65535] { R17845 += 1 };
  s1 -> s1 [0, 72] { R17845 += 1 };
  s1 -> s2 [73, 73] { R17845 += 1 };
  s1 -> s1 [74, 65535] { R17845 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R17845 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R17846 += 1, R17847 += 1 };
  s0 -> s1 [0, 65535] { R17847 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R17847 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 72] { R17849 += 1 };
  s0 -> s2 [0, 65535] { R17849 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R17848 += 1, R17849 += 1 };
  s0 -> s3 [73, 73] { R17849 += 1 };
  s0 -> s1 [74, 65535] { R17849 += 1 };
  s1 -> s1 [0, 72] { R17849 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [73, 73] { R17849 += 1 };
  s1 -> s1 [74, 65535] { R17849 += 1 };
  s2 -> s1 [0, 72] { R17849 += 1 };
  s2 -> s2 [0, 65535] { R17849 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [73, 73] { R17849 += 1 };
  s2 -> s1 [74, 65535] { R17849 += 1 };
  s3 -> s3 [0, 65535] { R17849 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 72] { R17851 += 1, R17789 += 1 };
  s0 -> s0 [0, 65535] { R17850 += 1, R17851 += 1 };
  s0 -> s2 [0, 65535] { R17851 += 1, R17788 += 1, R17789 += 1 };
  s0 -> s1 [74, 65535] { R17851 += 1, R17789 += 1 };
  s1 -> s1 [0, 72] { R17851 += 1, R17789 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R17851 += 1 };
  s1 -> s1 [74, 65535] { R17851 += 1, R17789 += 1 };
  s2 -> s1 [0, 72] { R17851 += 1, R17789 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R17851 += 1, R17788 += 1, R17789 += 1 };
  s2 -> s1 [74, 65535] { R17851 += 1, R17789 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R17853 += 1, R17791 += 1, R17 += 1 };
  s0 -> s0 [0, 65535] { R17852 += 1, R17853 += 1 };
  s0 -> s2 [0, 65535] { R17853 += 1, R17790 += 1, R17791 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R17853 += 1, R17791 += 1, R17 += 1 };
  s1 -> s4 [0, 65535] { R17853 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R17853 += 1, R17791 += 1, R17 += 1 };
  s2 -> s2 [0, 65535] { R17853 += 1, R17790 += 1, R17791 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R17853 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 73] { R17855 += 1, R17793 += 1 };
  s0 -> s0 [0, 65535] { R17854 += 1, R17855 += 1 };
  s0 -> s2 [0, 65535] { R17855 += 1, R17792 += 1, R17793 += 1 };
  s0 -> s1 [81, 65535] { R17855 += 1, R17793 += 1 };
  s1 -> s1 [0, 73] { R17855 += 1, R17793 += 1 };
  s1 -> s1 [0, 65535] { R17855 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [81, 65535] { R17855 += 1, R17793 += 1 };
  s2 -> s1 [0, 73] { R17855 += 1, R17793 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R17855 += 1, R17792 += 1, R17793 += 1 };
  s2 -> s1 [81, 65535] { R17855 += 1, R17793 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s0 [0, 65535] { R17856 += 1, R17857 += 1 };
  s0 -> s1 [0, 65535] { R17857 += 1, R17794 += 1, R17795 += 1 };
  s0 -> s2 [0, 65535] { R17857 += 1, R17795 += 1, R67 += 1 };
  s1 -> s1 [0, 65535] { R17857 += 1, R17794 += 1, R17795 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R17857 += 1, R17795 += 1, R67 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R17857 += 1, R17795 += 1, R67 += 1 };
  s2 -> s4 [0, 65535] { R17857 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R17857 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 80] { R17859 += 1, R17797 += 1 };
  s0 -> s2 [0, 65535] { R17859 += 1, R17796 += 1, R17797 += 1 };
  s0 -> s3 [0, 65535] { R17859 += 1, R17797 += 1, R69 += 1 };
  s0 -> s0 [0, 65535] { R17858 += 1, R17859 += 1 };
  s0 -> s1 [82, 65535] { R17859 += 1, R17797 += 1 };
  s1 -> s1 [0, 80] { R17859 += 1, R17797 += 1 };
  s1 -> s1 [0, 65535] { R17859 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [82, 65535] { R17859 += 1, R17797 += 1 };
  s2 -> s1 [0, 80] { R17859 += 1, R17797 += 1 };
  s2 -> s2 [0, 65535] { R17859 += 1, R17796 += 1, R17797 += 1 };
  s2 -> s3 [0, 65535] { R17859 += 1, R17797 += 1, R69 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [82, 65535] { R17859 += 1, R17797 += 1 };
  s3 -> s1 [0, 80] { R17859 += 1, R17797 += 1 };
  s3 -> s3 [0, 65535] { R17859 += 1, R17797 += 1, R69 += 1 };
  s3 -> s4 [0, 65535] { R17859 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [82, 65535] { R17859 += 1, R17797 += 1 };
  s4 -> s4 [0, 65535] { R17859 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 80] { R17861 += 1, R17799 += 1, R11525 += 1 };
  s0 -> s1 [0, 65535] { R17861 += 1, R17799 += 1 };
  s0 -> s2 [0, 65535] { R17861 += 1, R17798 += 1, R17799 += 1 };
  s0 -> s0 [0, 65535] { R17860 += 1, R17861 += 1 };
  s0 -> s1 [82, 65535] { R17861 += 1, R17799 += 1, R11525 += 1 };
  s1 -> s1 [0, 80] { R17861 += 1, R17799 += 1, R11525 += 1 };
  s1 -> s1 [0, 65535] { R17861 += 1, R17799 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R17861 += 1 };
  s1 -> s1 [82, 65535] { R17861 += 1, R17799 += 1, R11525 += 1 };
  s2 -> s1 [0, 80] { R17861 += 1, R17799 += 1, R11525 += 1 };
  s2 -> s1 [0, 65535] { R17861 += 1, R17799 += 1 };
  s2 -> s2 [0, 65535] { R17861 += 1, R17798 += 1, R17799 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [82, 65535] { R17861 += 1, R17799 += 1, R11525 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R17861 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R17863 += 1, R17801 += 1, R15346 += 1, R15347 += 1 };
  s0 -> s0 [0, 65535] { R17862 += 1, R17863 += 1 };
  s0 -> s2 [0, 65535] { R17863 += 1, R17800 += 1, R17801 += 1 };
  s0 -> s3 [0, 65535] { R17863 += 1, R17801 += 1 };
  s1 -> s4 [0, 65535] { R17863 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R17863 += 1, R17801 += 1, R15346 += 1, R15347 += 1 };
  s1 -> s3 [0, 65535] { R17863 += 1, R17801 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R17863 += 1, R17801 += 1, R15346 += 1, R15347 += 1 };
  s2 -> s2 [0, 65535] { R17863 += 1, R17800 += 1, R17801 += 1 };
  s2 -> s3 [0, 65535] { R17863 += 1, R17801 += 1 };
  s3 -> s4 [0, 65535] { R17863 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R17863 += 1, R17801 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R17863 += 1 };
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 81] { R17865 += 1, R17803 += 1, R16621 += 1 };
  s0 -> s2 [0, 65535] { R17865 += 1, R17802 += 1, R17803 += 1 };
  s0 -> s0 [0, 65535] { R17864 += 1, R17865 += 1 };
  s0 -> s3 [0, 65535] { R17865 += 1, R17803 += 1, R16620 += 1, R16621 += 1 };
  s0 -> s4 [83, 83] { R17865 += 1, R17803 += 1, R16621 += 1 };
  s0 -> s1 [84, 65535] { R17865 += 1, R17803 += 1, R16621 += 1 };
  s1 -> s1 [0, 81] { R17865 += 1, R17803 += 1, R16621 += 1 };
  s1 -> s4 [83, 83] { R17865 += 1, R17803 += 1, R16621 += 1 };
  s1 -> s1 [84, 65535] { R17865 += 1, R17803 += 1, R16621 += 1 };
  s2 -> s1 [0, 81] { R17865 += 1, R17803 += 1, R16621 += 1 };
  s2 -> s2 [0, 65535] { R17865 += 1, R17802 += 1, R17803 += 1 };
  s2 -> s3 [0, 65535] { R17865 += 1, R17803 += 1, R16620 += 1, R16621 += 1 };
  s2 -> s4 [83, 83] { R17865 += 1, R17803 += 1, R16621 += 1 };
  s2 -> s1 [84, 65535] { R17865 += 1, R17803 += 1, R16621 += 1 };
  s3 -> s1 [0, 81] { R17865 += 1, R17803 += 1, R16621 += 1 };
  s3 -> s3 [0, 65535] { R17865 += 1, R17803 += 1, R16620 += 1, R16621 += 1 };
  s3 -> s4 [83, 83] { R17865 += 1, R17803 += 1, R16621 += 1 };
  s3 -> s1 [84, 65535] { R17865 += 1, R17803 += 1, R16621 += 1 };
  s4 -> s4 [0, 81] { R17865 += 1, R17803 += 1, R16621 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R17865 += 1, R17803 += 1 };
  s4 -> s6 [0, 65535] { R17865 += 1 };
  s4 -> s4 [83, 65535] { R17865 += 1, R17803 += 1, R16621 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R17865 += 1 };
  accepting s4, s5, s6;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R17867 += 1, R17805 += 1 };
  s0 -> s0 [0, 65535] { R17866 += 1, R17867 += 1 };
  s0 -> s2 [0, 65535] { R17867 += 1, R17804 += 1, R17805 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R17867 += 1, R17805 += 1 };
  s1 -> s4 [0, 65535] { R17867 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R17867 += 1, R17805 += 1 };
  s2 -> s2 [0, 65535] { R17867 += 1, R17804 += 1, R17805 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R17867 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 81] { R17869 += 1, R17807 += 1, R17787 += 1 };
  s0 -> s2 [0, 65535] { R17869 += 1, R17806 += 1, R17807 += 1 };
  s0 -> s1 [0, 65535] { R17869 += 1, R17807 += 1 };
  s0 -> s0 [0, 65535] { R17868 += 1, R17869 += 1 };
  s0 -> s1 [84, 65535] { R17869 += 1, R17807 += 1, R17787 += 1 };
  s1 -> s1 [0, 81] { R17869 += 1, R17807 += 1, R17787 += 1 };
  s1 -> s4 [0, 65535] { R17869 += 1 };
  s1 -> s1 [0, 65535] { R17869 += 1, R17807 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [84, 65535] { R17869 += 1, R17807 += 1, R17787 += 1 };
  s2 -> s1 [0, 81] { R17869 += 1, R17807 += 1, R17787 += 1 };
  s2 -> s2 [0, 65535] { R17869 += 1, R17806 += 1, R17807 += 1 };
  s2 -> s1 [0, 65535] { R17869 += 1, R17807 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [84, 65535] { R17869 += 1, R17807 += 1, R17787 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R17869 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R17871 += 1, R17827 += 1, R18 += 1 };
  s0 -> s2 [0, 65535] { R17871 += 1, R17826 += 1, R17827 += 1 };
  s0 -> s0 [0, 65535] { R17870 += 1, R17871 += 1 };
  s1 -> s1 [0, 65535] { R17871 += 1, R17827 += 1, R18 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R17871 += 1 };
  s2 -> s1 [0, 65535] { R17871 += 1, R17827 += 1, R18 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R17871 += 1, R17826 += 1, R17827 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R17871 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 72] { R17873 += 1, R17829 += 1 };
  s0 -> s0 [0, 65535] { R17872 += 1, R17873 += 1 };
  s0 -> s2 [0, 65535] { R17873 += 1, R17828 += 1, R17829 += 1 };
  s0 -> s3 [73, 73] { R17873 += 1, R17829 += 1 };
  s0 -> s4 [73, 73] { R17873 += 1, R17829 += 1 };
  s0 -> s5 [81, 81] { R17873 += 1, R17829 += 1 };
  s0 -> s1 [82, 65535] { R17873 += 1, R17829 += 1 };
  s1 -> s1 [0, 72] { R17873 += 1, R17829 += 1 };
  s1 -> s3 [73, 73] { R17873 += 1, R17829 += 1 };
  s1 -> s4 [73, 73] { R17873 += 1, R17829 += 1 };
  s1 -> s5 [81, 81] { R17873 += 1, R17829 += 1 };
  s1 -> s1 [82, 65535] { R17873 += 1, R17829 += 1 };
  s2 -> s1 [0, 72] { R17873 += 1, R17829 += 1 };
  s2 -> s2 [0, 65535] { R17873 += 1, R17828 += 1, R17829 += 1 };
  s2 -> s3 [73, 73] { R17873 += 1, R17829 += 1 };
  s2 -> s4 [73, 73] { R17873 += 1, R17829 += 1 };
  s2 -> s5 [81, 81] { R17873 += 1, R17829 += 1 };
  s2 -> s1 [82, 65535] { R17873 += 1, R17829 += 1 };
  s3 -> s3 [0, 73] { R17873 += 1, R17829 += 1 };
  s3 -> s7 [81, 81] { R17873 += 1, R17829 += 1 };
  s3 -> s3 [82, 65535] { R17873 += 1, R17829 += 1 };
  s5 -> s5 [0, 72] { R17873 += 1, R17829 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R17873 += 1 };
  s5 -> s7 [73, 73] { R17873 += 1, R17829 += 1 };
  s5 -> s8 [73, 73] { R17873 += 1, R17829 += 1 };
  s5 -> s5 [81, 65535] { R17873 += 1, R17829 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 73] { R17873 += 1, R17829 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R17873 += 1 };
  s7 -> s7 [81, 65535] { R17873 += 1, R17829 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R17873 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 72] { R17875 += 1, R17831 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R17874 += 1, R17875 += 1 };
  s0 -> s2 [0, 65535] { R17875 += 1, R17830 += 1, R17831 += 1 };
  s0 -> s3 [73, 73] { R17875 += 1, R17831 += 1, R66 += 1 };
  s0 -> s4 [73, 73] { R17875 += 1, R17831 += 1, R66 += 1 };
  s0 -> s1 [74, 65535] { R17875 += 1, R17831 += 1, R66 += 1 };
  s1 -> s1 [0, 72] { R17875 += 1, R17831 += 1, R66 += 1 };
  s1 -> s1 [0, 65535] { R17875 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R17875 += 1, R17831 += 1, R66 += 1 };
  s1 -> s4 [73, 73] { R17875 += 1, R17831 += 1, R66 += 1 };
  s1 -> s1 [74, 65535] { R17875 += 1, R17831 += 1, R66 += 1 };
  s2 -> s1 [0, 72] { R17875 += 1, R17831 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R17875 += 1, R17830 += 1, R17831 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R17875 += 1, R17831 += 1, R66 += 1 };
  s2 -> s4 [73, 73] { R17875 += 1, R17831 += 1, R66 += 1 };
  s2 -> s1 [74, 65535] { R17875 += 1, R17831 += 1, R66 += 1 };
  s3 -> s6 [0, 65535] { R17875 += 1 };
  s3 -> s3 [0, 65535] { R17875 += 1, R17831 += 1, R66 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R17875 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R17875 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 72] { R17877 += 1, R17833 += 1, R68 += 1 };
  s0 -> s2 [0, 65535] { R17877 += 1, R17832 += 1, R17833 += 1 };
  s0 -> s0 [0, 65535] { R17876 += 1, R17877 += 1 };
  s0 -> s3 [73, 73] { R17877 += 1, R17833 += 1, R68 += 1 };
  s0 -> s4 [73, 73] { R17877 += 1, R17833 += 1, R68 += 1 };
  s0 -> s1 [74, 65535] { R17877 += 1, R17833 += 1, R68 += 1 };
  s1 -> s1 [0, 72] { R17877 += 1, R17833 += 1, R68 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R17877 += 1 };
  s1 -> s3 [73, 73] { R17877 += 1, R17833 += 1, R68 += 1 };
  s1 -> s4 [73, 73] { R17877 += 1, R17833 += 1, R68 += 1 };
  s1 -> s1 [74, 65535] { R17877 += 1, R17833 += 1, R68 += 1 };
  s2 -> s1 [0, 72] { R17877 += 1, R17833 += 1, R68 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R17877 += 1, R17832 += 1, R17833 += 1 };
  s2 -> s3 [73, 73] { R17877 += 1, R17833 += 1, R68 += 1 };
  s2 -> s4 [73, 73] { R17877 += 1, R17833 += 1, R68 += 1 };
  s2 -> s1 [74, 65535] { R17877 += 1, R17833 += 1, R68 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R17877 += 1, R17833 += 1, R68 += 1 };
  s3 -> s6 [0, 65535] { R17877 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R17877 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R17877 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 72] { R17879 += 1, R17835 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s2 [0, 72] { R17879 += 1, R17835 += 1, R11523 += 1 };
  s0 -> s3 [0, 65535] { R17879 += 1, R17834 += 1, R17835 += 1 };
  s0 -> s0 [0, 65535] { R17878 += 1, R17879 += 1 };
  s0 -> s4 [73, 73] { R17879 += 1, R17835 += 1, R11523 += 1 };
  s0 -> s5 [73, 73] { R17879 += 1, R17835 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s6 [73, 73] { R17879 += 1, R17835 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s7 [73, 73] { R17879 += 1, R17835 += 1, R11523 += 1 };
  s0 -> s2 [74, 80] { R17879 += 1, R17835 += 1, R11523 += 1 };
  s0 -> s1 [74, 65535] { R17879 += 1, R17835 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s2 [82, 65535] { R17879 += 1, R17835 += 1, R11523 += 1 };
  s1 -> s1 [0, 72] { R17879 += 1, R17835 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s2 [0, 72] { R17879 += 1, R17835 += 1, R11523 += 1 };
  s1 -> s4 [73, 73] { R17879 += 1, R17835 += 1, R11523 += 1 };
  s1 -> s5 [73, 73] { R17879 += 1, R17835 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s6 [73, 73] { R17879 += 1, R17835 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s7 [73, 73] { R17879 += 1, R17835 += 1, R11523 += 1 };
  s1 -> s2 [74, 80] { R17879 += 1, R17835 += 1, R11523 += 1 };
  s1 -> s1 [74, 65535] { R17879 += 1, R17835 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s2 [82, 65535] { R17879 += 1, R17835 += 1, R11523 += 1 };
  s2 -> s2 [0, 72] { R17879 += 1, R17835 += 1, R11523 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R17879 += 1 };
  s2 -> s4 [73, 73] { R17879 += 1, R17835 += 1 };
  s2 -> s7 [73, 73] { R17879 += 1, R17835 += 1 };
  s2 -> s2 [74, 80] { R17879 += 1, R17835 += 1, R11523 += 1 };
  s2 -> s2 [74, 65535] { R17879 += 1, R17835 += 1 };
  s2 -> s2 [82, 65535] { R17879 += 1, R17835 += 1, R11523 += 1 };
  s3 -> s1 [0, 72] { R17879 += 1, R17835 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s2 [0, 72] { R17879 += 1, R17835 += 1, R11523 += 1 };
  s3 -> s3 [0, 65535] { R17879 += 1, R17834 += 1, R17835 += 1 };
  s3 -> s4 [73, 73] { R17879 += 1, R17835 += 1, R11523 += 1 };
  s3 -> s5 [73, 73] { R17879 += 1, R17835 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s6 [73, 73] { R17879 += 1, R17835 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s7 [73, 73] { R17879 += 1, R17835 += 1, R11523 += 1 };
  s3 -> s2 [74, 80] { R17879 += 1, R17835 += 1, R11523 += 1 };
  s3 -> s1 [74, 65535] { R17879 += 1, R17835 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s2 [82, 65535] { R17879 += 1, R17835 += 1, R11523 += 1 };
  s4 -> s4 [0, 80] { R17879 += 1, R17835 += 1, R11523 += 1 };
  s4 -> s4 [0, 65535] { R17879 += 1, R17835 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s9 [0, 65535] { R17879 += 1 };
  s4 -> s4 [82, 65535] { R17879 += 1, R17835 += 1, R11523 += 1 };
  s5 -> s4 [0, 80] { R17879 += 1, R17835 += 1, R11523 += 1 };
  s5 -> s5 [0, 65535] { R17879 += 1, R17835 += 1, R11522 += 1, R11523 += 1 };
  s5 -> s4 [82, 65535] { R17879 += 1, R17835 += 1, R11523 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R17879 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R17879 += 1 };
  accepting s4, s8, s2, s9, s7;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 72] { R17881 += 1, R17837 += 1, R15343 += 1, R15344 += 1 };
  s0 -> s2 [0, 72] { R17881 += 1, R17837 += 1, R15342 += 1, R15343 += 1 };
  s0 -> s3 [0, 65535] { R17881 += 1, R17836 += 1, R17837 += 1 };
  s0 -> s0 [0, 65535] { R17880 += 1, R17881 += 1 };
  s0 -> s4 [73, 73] { R17881 += 1, R17837 += 1, R15342 += 1, R15343 += 1 };
  s0 -> s5 [73, 73] { R17881 += 1, R17837 += 1, R15342 += 1, R15343 += 1 };
  s0 -> s6 [73, 73] { R17881 += 1, R17837 += 1, R15343 += 1, R15344 += 1 };
  s0 -> s7 [73, 73] { R17881 += 1, R17837 += 1, R15343 += 1, R15344 += 1 };
  s0 -> s1 [74, 65535] { R17881 += 1, R17837 += 1, R15343 += 1, R15344 += 1 };
  s0 -> s2 [74, 65535] { R17881 += 1, R17837 += 1, R15342 += 1, R15343 += 1 };
  s1 -> s1 [0, 72] { R17881 += 1, R17837 += 1, R15343 += 1, R15344 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s1 [0, 65535] { R17881 += 1 };
  s1 -> s6 [73, 73] { R17881 += 1, R17837 += 1, R15343 += 1, R15344 += 1 };
  s1 -> s7 [73, 73] { R17881 += 1, R17837 += 1, R15343 += 1, R15344 += 1 };
  s1 -> s1 [74, 65535] { R17881 += 1, R17837 += 1, R15343 += 1, R15344 += 1 };
  s2 -> s1 [0, 72] { R17881 += 1, R17837 += 1, R15343 += 1, R15344 += 1 };
  s2 -> s2 [0, 72] { R17881 += 1, R17837 += 1, R15342 += 1, R15343 += 1 };
  s2 -> s4 [73, 73] { R17881 += 1, R17837 += 1, R15342 += 1, R15343 += 1 };
  s2 -> s5 [73, 73] { R17881 += 1, R17837 += 1, R15342 += 1, R15343 += 1 };
  s2 -> s6 [73, 73] { R17881 += 1, R17837 += 1, R15343 += 1, R15344 += 1 };
  s2 -> s7 [73, 73] { R17881 += 1, R17837 += 1, R15343 += 1, R15344 += 1 };
  s2 -> s1 [74, 65535] { R17881 += 1, R17837 += 1, R15343 += 1, R15344 += 1 };
  s2 -> s2 [74, 65535] { R17881 += 1, R17837 += 1, R15342 += 1, R15343 += 1 };
  s3 -> s1 [0, 72] { R17881 += 1, R17837 += 1, R15343 += 1, R15344 += 1 };
  s3 -> s2 [0, 72] { R17881 += 1, R17837 += 1, R15342 += 1, R15343 += 1 };
  s3 -> s3 [0, 65535] { R17881 += 1, R17836 += 1, R17837 += 1 };
  s3 -> s4 [73, 73] { R17881 += 1, R17837 += 1, R15342 += 1, R15343 += 1 };
  s3 -> s5 [73, 73] { R17881 += 1, R17837 += 1, R15342 += 1, R15343 += 1 };
  s3 -> s6 [73, 73] { R17881 += 1, R17837 += 1, R15343 += 1, R15344 += 1 };
  s3 -> s7 [73, 73] { R17881 += 1, R17837 += 1, R15343 += 1, R15344 += 1 };
  s3 -> s1 [74, 65535] { R17881 += 1, R17837 += 1, R15343 += 1, R15344 += 1 };
  s3 -> s2 [74, 65535] { R17881 += 1, R17837 += 1, R15342 += 1, R15343 += 1 };
  s4 -> s4 [0, 65535] { R17881 += 1, R17837 += 1, R15342 += 1, R15343 += 1 };
  s4 -> s6 [0, 65535] { R17881 += 1, R17837 += 1, R15343 += 1, R15344 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s9 [0, 65535] { R17881 += 1 };
  s6 -> s6 [0, 65535] { R17881 += 1, R17837 += 1, R15343 += 1, R15344 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R17881 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R17881 += 1 };
  accepting s8, s9, s6, s1, s7;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 72] { R17883 += 1, R17839 += 1, R16618 += 1, R16619 += 1 };
  s0 -> s2 [0, 65535] { R17883 += 1, R17838 += 1, R17839 += 1 };
  s0 -> s0 [0, 65535] { R17882 += 1, R17883 += 1 };
  s0 -> s3 [73, 73] { R17883 += 1, R17839 += 1, R16618 += 1, R16619 += 1 };
  s0 -> s4 [73, 73] { R17883 += 1, R17839 += 1, R16618 += 1, R16619 += 1 };
  s0 -> s1 [74, 65535] { R17883 += 1, R17839 += 1, R16618 += 1, R16619 += 1 };
  s1 -> s1 [0, 72] { R17883 += 1, R17839 += 1, R16618 += 1, R16619 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R17883 += 1 };
  s1 -> s3 [73, 73] { R17883 += 1, R17839 += 1, R16618 += 1, R16619 += 1 };
  s1 -> s4 [73, 73] { R17883 += 1, R17839 += 1, R16618 += 1, R16619 += 1 };
  s1 -> s1 [74, 65535] { R17883 += 1, R17839 += 1, R16618 += 1, R16619 += 1 };
  s2 -> s1 [0, 72] { R17883 += 1, R17839 += 1, R16618 += 1, R16619 += 1 };
  s2 -> s2 [0, 65535] { R17883 += 1, R17838 += 1, R17839 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R17883 += 1, R17839 += 1, R16618 += 1, R16619 += 1 };
  s2 -> s4 [73, 73] { R17883 += 1, R17839 += 1, R16618 += 1, R16619 += 1 };
  s2 -> s1 [74, 65535] { R17883 += 1, R17839 += 1, R16618 += 1, R16619 += 1 };
  s3 -> s6 [0, 65535] { R17883 += 1 };
  s3 -> s3 [0, 65535] { R17883 += 1, R17839 += 1, R16618 += 1, R16619 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R17883 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R17883 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 72] { R17885 += 1, R17841 += 1, R17467 += 1, R17468 += 1 };
  s0 -> s2 [0, 72] { R17885 += 1, R17841 += 1, R17466 += 1, R17467 += 1 };
  s0 -> s0 [0, 65535] { R17884 += 1, R17885 += 1 };
  s0 -> s3 [0, 65535] { R17885 += 1, R17840 += 1, R17841 += 1 };
  s0 -> s4 [73, 73] { R17885 += 1, R17841 += 1, R17467 += 1, R17468 += 1 };
  s0 -> s5 [73, 73] { R17885 += 1, R17841 += 1, R17467 += 1, R17468 += 1 };
  s0 -> s6 [73, 73] { R17885 += 1, R17841 += 1, R17466 += 1, R17467 += 1 };
  s0 -> s7 [73, 73] { R17885 += 1, R17841 += 1, R17466 += 1, R17467 += 1 };
  s0 -> s1 [74, 65535] { R17885 += 1, R17841 += 1, R17467 += 1, R17468 += 1 };
  s0 -> s2 [74, 65535] { R17885 += 1, R17841 += 1, R17466 += 1, R17467 += 1 };
  s1 -> s11 [0, 72] { R17885 += 1, R17841 += 1 };
  s1 -> s1 [0, 72] { R17885 += 1, R17841 += 1, R17467 += 1, R17468 += 1 };
  s1 -> s12 [73, 73] { R17885 += 1, R17841 += 1 };
  s1 -> s8 [73, 73] { R17885 += 1, R17841 += 1 };
  s1 -> s4 [73, 73] { R17885 += 1, R17841 += 1, R17467 += 1, R17468 += 1 };
  s1 -> s5 [73, 73] { R17885 += 1, R17841 += 1, R17467 += 1, R17468 += 1 };
  s1 -> s11 [74, 65535] { R17885 += 1, R17841 += 1 };
  s1 -> s1 [74, 65535] { R17885 += 1, R17841 += 1, R17467 += 1, R17468 += 1 };
  s2 -> s1 [0, 72] { R17885 += 1, R17841 += 1, R17467 += 1, R17468 += 1 };
  s2 -> s2 [0, 72] { R17885 += 1, R17841 += 1, R17466 += 1, R17467 += 1 };
  s2 -> s4 [73, 73] { R17885 += 1, R17841 += 1, R17467 += 1, R17468 += 1 };
  s2 -> s5 [73, 73] { R17885 += 1, R17841 += 1, R17467 += 1, R17468 += 1 };
  s2 -> s6 [73, 73] { R17885 += 1, R17841 += 1, R17466 += 1, R17467 += 1 };
  s2 -> s7 [73, 73] { R17885 += 1, R17841 += 1, R17466 += 1, R17467 += 1 };
  s2 -> s1 [74, 65535] { R17885 += 1, R17841 += 1, R17467 += 1, R17468 += 1 };
  s2 -> s2 [74, 65535] { R17885 += 1, R17841 += 1, R17466 += 1, R17467 += 1 };
  s3 -> s1 [0, 72] { R17885 += 1, R17841 += 1, R17467 += 1, R17468 += 1 };
  s3 -> s2 [0, 72] { R17885 += 1, R17841 += 1, R17466 += 1, R17467 += 1 };
  s3 -> s3 [0, 65535] { R17885 += 1, R17840 += 1, R17841 += 1 };
  s3 -> s4 [73, 73] { R17885 += 1, R17841 += 1, R17467 += 1, R17468 += 1 };
  s3 -> s5 [73, 73] { R17885 += 1, R17841 += 1, R17467 += 1, R17468 += 1 };
  s3 -> s6 [73, 73] { R17885 += 1, R17841 += 1, R17466 += 1, R17467 += 1 };
  s3 -> s7 [73, 73] { R17885 += 1, R17841 += 1, R17466 += 1, R17467 += 1 };
  s3 -> s1 [74, 65535] { R17885 += 1, R17841 += 1, R17467 += 1, R17468 += 1 };
  s3 -> s2 [74, 65535] { R17885 += 1, R17841 += 1, R17466 += 1, R17467 += 1 };
  s4 -> s8 [0, 65535] { R17885 += 1, R17841 += 1 };
  s4 -> s4 [0, 65535] { R17885 += 1, R17841 += 1, R17467 += 1, R17468 += 1 };
  s7 -> s4 [0, 65535] { R17885 += 1, R17841 += 1, R17467 += 1, R17468 += 1 };
  s7 -> s7 [0, 65535] { R17885 += 1, R17841 += 1, R17466 += 1, R17467 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R17885 += 1, R17841 += 1 };
  s8 -> s10 [0, 65535] { R17885 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R17885 += 1 };
  s11 -> s11 [0, 72] { R17885 += 1, R17841 += 1 };
  s11 -> s11 [0, 65535] { R17885 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s12 [73, 73] { R17885 += 1, R17841 += 1 };
  s11 -> s8 [73, 73] { R17885 += 1, R17841 += 1 };
  s11 -> s11 [74, 65535] { R17885 += 1, R17841 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R17885 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 72] { R17887 += 1, R17843 += 1, R17785 += 1 };
  s0 -> s2 [0, 72] { R17887 += 1, R17843 += 1, R17784 += 1, R17785 += 1 };
  s0 -> s3 [0, 65535] { R17887 += 1, R17842 += 1, R17843 += 1 };
  s0 -> s0 [0, 65535] { R17886 += 1, R17887 += 1 };
  s0 -> s4 [73, 73] { R17887 += 1, R17843 += 1, R17785 += 1 };
  s0 -> s5 [73, 73] { R17887 += 1, R17843 += 1, R17784 += 1, R17785 += 1 };
  s0 -> s6 [73, 73] { R17887 += 1, R17843 += 1, R17785 += 1 };
  s0 -> s7 [73, 73] { R17887 += 1, R17843 += 1, R17784 += 1, R17785 += 1 };
  s0 -> s1 [74, 80] { R17887 += 1, R17843 += 1, R17785 += 1 };
  s0 -> s2 [74, 65535] { R17887 += 1, R17843 += 1, R17784 += 1, R17785 += 1 };
  s0 -> s8 [81, 81] { R17887 += 1, R17843 += 1, R17785 += 1 };
  s0 -> s1 [84, 65535] { R17887 += 1, R17843 += 1, R17785 += 1 };
  s1 -> s1 [0, 72] { R17887 += 1, R17843 += 1, R17785 += 1 };
  s1 -> s4 [73, 73] { R17887 += 1, R17843 += 1 };
  s1 -> s6 [73, 73] { R17887 += 1, R17843 += 1 };
  s1 -> s1 [74, 80] { R17887 += 1, R17843 += 1, R17785 += 1 };
  s1 -> s1 [74, 65535] { R17887 += 1, R17843 += 1 };
  s1 -> s8 [81, 81] { R17887 += 1, R17843 += 1, R17785 += 1 };
  s1 -> s1 [84, 65535] { R17887 += 1, R17843 += 1, R17785 += 1 };
  s2 -> s1 [0, 72] { R17887 += 1, R17843 += 1, R17785 += 1 };
  s2 -> s2 [0, 72] { R17887 += 1, R17843 += 1, R17784 += 1, R17785 += 1 };
  s2 -> s4 [73, 73] { R17887 += 1, R17843 += 1, R17785 += 1 };
  s2 -> s5 [73, 73] { R17887 += 1, R17843 += 1, R17784 += 1, R17785 += 1 };
  s2 -> s6 [73, 73] { R17887 += 1, R17843 += 1, R17785 += 1 };
  s2 -> s7 [73, 73] { R17887 += 1, R17843 += 1, R17784 += 1, R17785 += 1 };
  s2 -> s1 [74, 80] { R17887 += 1, R17843 += 1, R17785 += 1 };
  s2 -> s2 [74, 65535] { R17887 += 1, R17843 += 1, R17784 += 1, R17785 += 1 };
  s2 -> s8 [81, 81] { R17887 += 1, R17843 += 1, R17785 += 1 };
  s2 -> s1 [84, 65535] { R17887 += 1, R17843 += 1, R17785 += 1 };
  s3 -> s1 [0, 72] { R17887 += 1, R17843 += 1, R17785 += 1 };
  s3 -> s2 [0, 72] { R17887 += 1, R17843 += 1, R17784 += 1, R17785 += 1 };
  s3 -> s3 [0, 65535] { R17887 += 1, R17842 += 1, R17843 += 1 };
  s3 -> s4 [73, 73] { R17887 += 1, R17843 += 1, R17785 += 1 };
  s3 -> s5 [73, 73] { R17887 += 1, R17843 += 1, R17784 += 1, R17785 += 1 };
  s3 -> s6 [73, 73] { R17887 += 1, R17843 += 1, R17785 += 1 };
  s3 -> s7 [73, 73] { R17887 += 1, R17843 += 1, R17784 += 1, R17785 += 1 };
  s3 -> s1 [74, 80] { R17887 += 1, R17843 += 1, R17785 += 1 };
  s3 -> s2 [74, 65535] { R17887 += 1, R17843 += 1, R17784 += 1, R17785 += 1 };
  s3 -> s8 [81, 81] { R17887 += 1, R17843 += 1, R17785 += 1 };
  s3 -> s1 [84, 65535] { R17887 += 1, R17843 += 1, R17785 += 1 };
  s6 -> s6 [0, 80] { R17887 += 1, R17843 += 1, R17785 += 1 };
  s6 -> s6 [0, 65535] { R17887 += 1, R17843 += 1 };
  s6 -> s10 [81, 81] { R17887 += 1, R17843 += 1, R17785 += 1 };
  s6 -> s6 [84, 65535] { R17887 += 1, R17843 += 1, R17785 += 1 };
  s7 -> s6 [0, 80] { R17887 += 1, R17843 += 1, R17785 += 1 };
  s7 -> s7 [0, 65535] { R17887 += 1, R17843 += 1, R17784 += 1, R17785 += 1 };
  s7 -> s10 [81, 81] { R17887 += 1, R17843 += 1, R17785 += 1 };
  s7 -> s6 [84, 65535] { R17887 += 1, R17843 += 1, R17785 += 1 };
  s8 -> s8 [0, 72] { R17887 += 1, R17843 += 1, R17785 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R17887 += 1 };
  s8 -> s10 [73, 73] { R17887 += 1, R17843 += 1 };
  s8 -> s11 [73, 73] { R17887 += 1, R17843 += 1 };
  s8 -> s8 [74, 81] { R17887 += 1, R17843 += 1, R17785 += 1 };
  s8 -> s8 [74, 65535] { R17887 += 1, R17843 += 1 };
  s8 -> s8 [84, 65535] { R17887 += 1, R17843 += 1, R17785 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 81] { R17887 += 1, R17843 += 1, R17785 += 1 };
  s10 -> s9 [0, 65535];
  s10 -> s12 [0, 65535] { R17887 += 1 };
  s10 -> s10 [0, 65535] { R17887 += 1, R17843 += 1 };
  s10 -> s10 [84, 65535] { R17887 += 1, R17843 += 1, R17785 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R17887 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R17887 += 1 };
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [113, 113];
  accepting s1;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
constraint R1 = R17803 && R2 = R17887 && R20 - R17887 = -1 && R21 = R17887 && R22 - R17887 = -1 && R23 = R17887 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R16621 + -1*R16619 - R53 = 0 && R52 + R16620 + R16618 = 0 && R17802 = 0 && R17828 = 0 && R17829 = 0 && R17834 = 0 && R17835 = 0 && R17836 = 0 && R17837 = 0 && R17840 = 0 && R17841 = 0 && R17842 = 0 && R17843 = 0 && R17844 = 0 && R17845 = R17887 && R17846 = 0 && R17847 = R17887 && R17848 = 0 && R17849 = R17887 && R17850 = 0 && R17851 = R17887 && R17852 = 0 && R17853 = R17887 && R17854 = 0 && R17855 = R17887 && R17856 = 0 && R17857 = R17887 && R17858 = 0 && R17859 = R17887 && R17860 = 0 && R17861 = R17887 && R17862 = 0 && R17863 = R17887 && R17864 = 0 && R17865 = R17887 && R17866 = 0 && R17867 = R17887 && R17868 = 0 && R17869 = R17887 && R17870 = 0 && R17871 = R17887 && R17872 = 0 && R17873 = R17887 && R17874 = 0 && R17875 = R17887 && R17876 = 0 && R17877 = R17887 && R17878 = 0 && R17879 = R17887 && R17880 = 0 && R17881 = R17887 && R17882 = 0 && R17883 = R17887 && R17884 = 0 && R17885 = R17887 && R17886 = 0 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R16621 + -1*R16619 - R53 < 1 && -1 < R17803 && 0 < R17887 && (R48 + R15347 + R15344 != 0 || ((R42 + R11524 + R11522 != 0 || R43 + R11525 + R11523 + -1*R16621 + -1*R16619 - R53 = 0 || R53 + R16621 + R16619 < 1) && (R42 + R11524 + R11522 = 0 || R53 + R16621 + R16619 < 1))) && (R48 + R15347 + R15344 != 0 || ((R46 + R15345 + R15342 != 0 || R47 + R15346 + R15343 + -1*R16621 + -1*R16619 - R53 = 0 || R53 + R16621 + R16619 < 1) && (R46 + R15345 + R15342 = 0 || R53 + R16621 + R16619 < 1))) && (R17788 != 0 || R17789 = R17803 || (R17 = 0 && R17803 = 0)) && (R17790 != 0 || R17791 = R17803 || (R17 = 0 && R17803 = 0)) && (R17792 != 0 || R17793 = R17803 || (R17 = 0 && R17803 = 0)) && (R17794 != 0 || R17795 = R17803 || (R17 = 0 && R17803 = 0)) && (R17796 != 0 || R17797 = R17803 || (R17 = 0 && R17803 = 0)) && (R17798 != 0 || R17799 = R17803 || (R17 = 0 && R17803 = 0)) && (R17800 != 0 || R17801 = R17803 || (R17 = 0 && R17803 = 0)) && (R17804 != 0 || R17803 = R17805 || (R17 = 0 && R17803 = 0)) && (R17806 != 0 || R17803 = R17807 || (R17 = 0 && R17803 = 0)) && (R18 = 0 || (R17826 = 0 && R17827 = 0)) && (R18 = 0 || (R17830 = 0 && R17831 = 0)) && (R18 = 0 || (R17832 = 0 && R17833 = 0)) && (R18 = 0 || (R17838 = 0 && R17839 = 0)) && (R19 = 0 || (R17808 = 0 && R17809 = 0)) && (R19 = 0 || (R17810 = 0 && R17811 = 0)) && (R19 = 0 || (R17812 = 0 && R17813 = 0)) && (R19 = 0 || (R17814 = 0 && R17815 = 0)) && (R19 = 0 || (R17816 = 0 && R17817 = 0)) && (R19 = 0 || (R17818 = 0 && R17819 = 0)) && (R19 = 0 || (R17820 = 0 && R17821 = 0)) && (R19 = 0 || (R17822 = 0 && R17823 = 0)) && (R19 = 0 || (R17824 = 0 && R17825 = 0)) && (R48 + R15347 + R15344 = 0 || (R42 + R11524 + R11522 = 0 && R43 + R11525 + R11523 + -1*R16621 + -1*R16619 - R53 = 0)) && (R48 + R15347 + R15344 = 0 || (R46 + R15345 + R15342 = 0 && R47 + R15346 + R15343 + -1*R16621 + -1*R16619 - R53 = 0)) && (R58 + R17471 + R17468 = 0 || (R56 + R17469 + R17466 = 0 && R57 + R17470 + R17467 = 0)) && (R58 + R17471 + R17468 = 0 || (R62 + R17786 + R17784 = 0 && R63 + R17787 + R17785 = 0)) && (R17788 = 0 || (R17 = 0 && R17803 = 0)) && (R17790 = 0 || (R17 = 0 && R17803 = 0)) && (R17792 = 0 || (R17 = 0 && R17803 = 0)) && (R17794 = 0 || (R17 = 0 && R17803 = 0)) && (R17796 = 0 || (R17 = 0 && R17803 = 0)) && (R17798 = 0 || (R17 = 0 && R17803 = 0)) && (R17800 = 0 || (R17 = 0 && R17803 = 0)) && (R17804 = 0 || (R17 = 0 && R17803 = 0)) && (R17806 = 0 || (R17 = 0 && R17803 = 0));
// End of Parikh automata intersection problem
