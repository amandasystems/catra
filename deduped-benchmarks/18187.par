// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R12, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R3890, R3891, R3892, R3893, R3894, R3895, R3896, R3897, R3898, R3899, R3900, R3901, R3902, R3903, R3904, R3905, R3906, R3907, R3908, R3909, R3910, R3911, R3912, R3913, R3914, R3915, R3916, R3917, R3918, R3919, R3920, R3921, R3922, R3923, R3924, R3925, R3926, R3927, R3928, R3929, R3930, R3931, R3932, R3933, R3934, R3935, R3936, R3937, R3938, R3939, R3940, R3941, R3942, R3943, R3944, R3945, R3946, R3947, R3948, R3949, R3950, R3951, R3952, R3953, R3954, R3955, R3956, R3957, R3958, R3959, R3960, R3961, R3962, R3963, R3964, R3965, R3966, R3967, R3968, R3969, R3970, R3971, R3972, R3973, R3974, R3975, R3976, R3977, R3978, R3979, R3980, R3981, R3982, R3983, R3984, R3985, R3986, R3987, R3988, R3989, R3990, R3991, R3992, R3993, R3994, R3995, R3996, R3997, R3998, R3999, R4, R40, R4000, R4001, R4002, R4003, R4004, R4005, R4006, R4007, R4008, R4009, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R70, R71, R72, R73, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 72];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [73, 73];
  s0 -> s1 [74, 65535];
  s1 -> s1 [0, 72];
  s1 -> s2 [73, 73];
  s1 -> s1 [74, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s1 [0, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R25 += 1 };
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R3931 += 1, R19 += 1 };
  s0 -> s0 [0, 65535] { R3930 += 1, R3931 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R3931 += 1, R19 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 72] { R3933 += 1 };
  s0 -> s0 [0, 65535] { R3932 += 1, R3933 += 1 };
  s0 -> s2 [73, 73] { R3933 += 1 };
  s0 -> s3 [73, 73] { R3933 += 1 };
  s0 -> s1 [78, 65535] { R3933 += 1 };
  s1 -> s1 [0, 72] { R3933 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R3933 += 1 };
  s1 -> s3 [73, 73] { R3933 += 1 };
  s1 -> s1 [78, 65535] { R3933 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 73] { R3933 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [78, 65535] { R3933 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 72] { R3935 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R3934 += 1, R3935 += 1 };
  s0 -> s2 [73, 73] { R3935 += 1, R38 += 1 };
  s0 -> s3 [73, 73] { R3935 += 1, R38 += 1 };
  s0 -> s1 [74, 65535] { R3935 += 1, R38 += 1 };
  s1 -> s1 [0, 72] { R3935 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R3935 += 1, R38 += 1 };
  s1 -> s3 [73, 73] { R3935 += 1, R38 += 1 };
  s1 -> s1 [74, 65535] { R3935 += 1, R38 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3935 += 1, R38 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 72] { R3937 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R3936 += 1, R3937 += 1 };
  s0 -> s2 [73, 73] { R3937 += 1, R40 += 1 };
  s0 -> s3 [73, 73] { R3937 += 1, R40 += 1 };
  s0 -> s1 [74, 65535] { R3937 += 1, R40 += 1 };
  s1 -> s1 [0, 72] { R3937 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R3937 += 1, R40 += 1 };
  s1 -> s3 [73, 73] { R3937 += 1, R40 += 1 };
  s1 -> s1 [74, 65535] { R3937 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3937 += 1, R40 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 72] { R3939 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R3938 += 1, R3939 += 1 };
  s0 -> s2 [73, 73] { R3939 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [73, 73] { R3939 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [74, 65535] { R3939 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 72] { R3939 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R3939 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [73, 73] { R3939 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [74, 65535] { R3939 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3939 += 1, R42 += 1, R43 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 72] { R3941 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R3940 += 1, R3941 += 1 };
  s0 -> s2 [73, 73] { R3941 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [73, 73] { R3941 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [74, 65535] { R3941 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 72] { R3941 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R3941 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [73, 73] { R3941 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [74, 65535] { R3941 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3941 += 1, R46 += 1, R47 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 72] { R3943 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R3942 += 1, R3943 += 1 };
  s0 -> s2 [73, 73] { R3943 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [73, 73] { R3943 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [74, 65535] { R3943 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 72] { R3943 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R3943 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [73, 73] { R3943 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [74, 65535] { R3943 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3943 += 1, R52 += 1, R53 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 72] { R3945 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R3944 += 1, R3945 += 1 };
  s0 -> s2 [73, 73] { R3945 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [73, 73] { R3945 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [74, 65535] { R3945 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 72] { R3945 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R3945 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [73, 73] { R3945 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [74, 65535] { R3945 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535] { R3945 += 1, R56 += 1, R57 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 72] { R3947 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R3946 += 1, R3947 += 1 };
  s0 -> s2 [73, 73] { R3947 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [73, 73] { R3947 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [74, 65535] { R3947 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 72] { R3947 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R3947 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [73, 73] { R3947 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [74, 65535] { R3947 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535] { R3947 += 1, R62 += 1, R63 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 72] { R3967 += 1 };
  s0 -> s0 [0, 65535] { R3966 += 1, R3967 += 1 };
  s0 -> s2 [73, 73] { R3967 += 1 };
  s0 -> s1 [74, 65535] { R3967 += 1 };
  s1 -> s1 [0, 72] { R3967 += 1 };
  s1 -> s2 [73, 73] { R3967 += 1 };
  s1 -> s1 [74, 65535] { R3967 += 1 };
  s2 -> s2 [0, 65535] { R3967 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R3968 += 1, R3969 += 1 };
  s0 -> s1 [0, 65535] { R3969 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R3969 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 72] { R3971 += 1 };
  s0 -> s0 [0, 65535] { R3970 += 1, R3971 += 1 };
  s0 -> s2 [0, 65535] { R3971 += 1, R8 += 1 };
  s0 -> s3 [73, 73] { R3971 += 1 };
  s0 -> s1 [74, 65535] { R3971 += 1 };
  s1 -> s1 [0, 72] { R3971 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [73, 73] { R3971 += 1 };
  s1 -> s1 [74, 65535] { R3971 += 1 };
  s2 -> s1 [0, 72] { R3971 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3971 += 1, R8 += 1 };
  s2 -> s3 [73, 73] { R3971 += 1 };
  s2 -> s1 [74, 65535] { R3971 += 1 };
  s3 -> s3 [0, 65535] { R3971 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 72] { R3973 += 1, R3911 += 1 };
  s0 -> s0 [0, 65535] { R3972 += 1, R3973 += 1 };
  s0 -> s2 [0, 65535] { R3973 += 1, R3910 += 1, R3911 += 1 };
  s0 -> s1 [74, 65535] { R3973 += 1, R3911 += 1 };
  s1 -> s1 [0, 72] { R3973 += 1, R3911 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3973 += 1 };
  s1 -> s1 [74, 65535] { R3973 += 1, R3911 += 1 };
  s2 -> s1 [0, 72] { R3973 += 1, R3911 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3973 += 1, R3910 += 1, R3911 += 1 };
  s2 -> s1 [74, 65535] { R3973 += 1, R3911 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R3975 += 1, R3913 += 1, R17 += 1 };
  s0 -> s2 [0, 65535] { R3975 += 1, R3912 += 1, R3913 += 1 };
  s0 -> s0 [0, 65535] { R3974 += 1, R3975 += 1 };
  s1 -> s1 [0, 65535] { R3975 += 1, R3913 += 1, R17 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R3975 += 1 };
  s2 -> s1 [0, 65535] { R3975 += 1, R3913 += 1, R17 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3975 += 1, R3912 += 1, R3913 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3975 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 73] { R3977 += 1, R3915 += 1 };
  s0 -> s2 [0, 65535] { R3977 += 1, R3914 += 1, R3915 += 1 };
  s0 -> s0 [0, 65535] { R3976 += 1, R3977 += 1 };
  s0 -> s1 [77, 65535] { R3977 += 1, R3915 += 1 };
  s1 -> s1 [0, 73] { R3977 += 1, R3915 += 1 };
  s1 -> s1 [0, 65535] { R3977 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [77, 65535] { R3977 += 1, R3915 += 1 };
  s2 -> s1 [0, 73] { R3977 += 1, R3915 += 1 };
  s2 -> s2 [0, 65535] { R3977 += 1, R3914 += 1, R3915 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [77, 65535] { R3977 += 1, R3915 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s0 [0, 65535] { R3978 += 1, R3979 += 1 };
  s0 -> s1 [0, 65535] { R3979 += 1, R3916 += 1, R3917 += 1 };
  s0 -> s2 [0, 65535] { R3979 += 1, R3917 += 1, R67 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3979 += 1, R3916 += 1, R3917 += 1 };
  s1 -> s2 [0, 65535] { R3979 += 1, R3917 += 1, R67 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R3979 += 1 };
  s2 -> s2 [0, 65535] { R3979 += 1, R3917 += 1, R67 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3979 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 76] { R3981 += 1, R3919 += 1 };
  s0 -> s0 [0, 65535] { R3980 += 1, R3981 += 1 };
  s0 -> s2 [0, 65535] { R3981 += 1, R3918 += 1, R3919 += 1 };
  s0 -> s3 [0, 65535] { R3981 += 1, R3919 += 1, R69 += 1 };
  s0 -> s1 [78, 65535] { R3981 += 1, R3919 += 1 };
  s1 -> s1 [0, 76] { R3981 += 1, R3919 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3981 += 1 };
  s1 -> s1 [78, 65535] { R3981 += 1, R3919 += 1 };
  s2 -> s1 [0, 76] { R3981 += 1, R3919 += 1 };
  s2 -> s2 [0, 65535] { R3981 += 1, R3918 += 1, R3919 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R3981 += 1, R3919 += 1, R69 += 1 };
  s2 -> s1 [78, 65535] { R3981 += 1, R3919 += 1 };
  s3 -> s1 [0, 76] { R3981 += 1, R3919 += 1 };
  s3 -> s4 [0, 65535] { R3981 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R3981 += 1, R3919 += 1, R69 += 1 };
  s3 -> s1 [78, 65535] { R3981 += 1, R3919 += 1 };
  s4 -> s4 [0, 65535] { R3981 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 76] { R3983 += 1, R3921 += 1, R73 += 1 };
  s0 -> s2 [0, 65535] { R3983 += 1, R3921 += 1, R72 += 1, R73 += 1 };
  s0 -> s3 [0, 65535] { R3983 += 1, R3920 += 1, R3921 += 1 };
  s0 -> s0 [0, 65535] { R3982 += 1, R3983 += 1 };
  s0 -> s1 [78, 65535] { R3983 += 1, R3921 += 1, R73 += 1 };
  s1 -> s1 [0, 76] { R3983 += 1, R3921 += 1, R73 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R3983 += 1, R3921 += 1 };
  s1 -> s5 [0, 65535] { R3983 += 1 };
  s1 -> s1 [78, 65535] { R3983 += 1, R3921 += 1, R73 += 1 };
  s2 -> s1 [0, 76] { R3983 += 1, R3921 += 1, R73 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3983 += 1, R3921 += 1, R72 += 1, R73 += 1 };
  s2 -> s5 [0, 65535] { R3983 += 1 };
  s2 -> s1 [78, 65535] { R3983 += 1, R3921 += 1, R73 += 1 };
  s3 -> s1 [0, 76] { R3983 += 1, R3921 += 1, R73 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R3983 += 1, R3921 += 1, R72 += 1, R73 += 1 };
  s3 -> s3 [0, 65535] { R3983 += 1, R3920 += 1, R3921 += 1 };
  s3 -> s1 [78, 65535] { R3983 += 1, R3921 += 1, R73 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3983 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s0 [0, 65535] { R3984 += 1, R3985 += 1 };
  s0 -> s1 [0, 65535] { R3985 += 1, R3923 += 1, R3894 += 1, R3895 += 1 };
  s0 -> s2 [0, 65535] { R3985 += 1, R3923 += 1 };
  s0 -> s3 [0, 65535] { R3985 += 1, R3922 += 1, R3923 += 1 };
  s1 -> s1 [0, 65535] { R3985 += 1, R3923 += 1, R3894 += 1, R3895 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R3985 += 1 };
  s1 -> s2 [0, 65535] { R3985 += 1, R3923 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R3985 += 1 };
  s2 -> s2 [0, 65535] { R3985 += 1, R3923 += 1 };
  s3 -> s1 [0, 65535] { R3985 += 1, R3923 += 1, R3894 += 1, R3895 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R3985 += 1, R3923 += 1 };
  s3 -> s3 [0, 65535] { R3985 += 1, R3922 += 1, R3923 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3985 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 77] { R3987 += 1, R3925 += 1, R3899 += 1 };
  s0 -> s2 [0, 65535] { R3987 += 1, R3924 += 1, R3925 += 1 };
  s0 -> s0 [0, 65535] { R3986 += 1, R3987 += 1 };
  s0 -> s1 [0, 65535] { R3987 += 1, R3925 += 1 };
  s0 -> s1 [88, 65535] { R3987 += 1, R3925 += 1, R3899 += 1 };
  s1 -> s1 [0, 77] { R3987 += 1, R3925 += 1, R3899 += 1 };
  s1 -> s1 [0, 65535] { R3987 += 1, R3925 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R3987 += 1 };
  s1 -> s1 [88, 65535] { R3987 += 1, R3925 += 1, R3899 += 1 };
  s2 -> s1 [0, 77] { R3987 += 1, R3925 += 1, R3899 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3987 += 1, R3924 += 1, R3925 += 1 };
  s2 -> s1 [0, 65535] { R3987 += 1, R3925 += 1 };
  s2 -> s1 [88, 65535] { R3987 += 1, R3925 += 1, R3899 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3987 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R3989 += 1, R3926 += 1, R3927 += 1 };
  s0 -> s0 [0, 65535] { R3988 += 1, R3989 += 1 };
  s0 -> s2 [0, 65535] { R3989 += 1, R3927 += 1, R3903 += 1, R3904 += 1 };
  s0 -> s3 [0, 65535] { R3989 += 1, R3927 += 1, R3904 += 1, R3905 += 1 };
  s1 -> s1 [0, 65535] { R3989 += 1, R3926 += 1, R3927 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s2 [0, 65535] { R3989 += 1, R3927 += 1, R3903 += 1, R3904 += 1 };
  s1 -> s3 [0, 65535] { R3989 += 1, R3927 += 1, R3904 += 1, R3905 += 1 };
  s2 -> s4 [0, 65535] { R3989 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R3989 += 1, R3927 += 1, R3903 += 1, R3904 += 1 };
  s2 -> s3 [0, 65535] { R3989 += 1, R3927 += 1, R3904 += 1, R3905 += 1 };
  s3 -> s4 [0, 65535] { R3989 += 1 };
  s3 -> s5 [0, 65535] { R3989 += 1, R3927 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R3989 += 1, R3927 += 1, R3904 += 1, R3905 += 1 };
  s4 -> s4 [0, 65535] { R3989 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s4 [0, 65535] { R3989 += 1 };
  s5 -> s5 [0, 65535] { R3989 += 1, R3927 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 76] { R3991 += 1, R3929 += 1, R3909 += 1 };
  s0 -> s2 [0, 65535] { R3991 += 1, R3928 += 1, R3929 += 1 };
  s0 -> s0 [0, 65535] { R3990 += 1, R3991 += 1 };
  s0 -> s3 [0, 65535] { R3991 += 1, R3929 += 1, R3908 += 1, R3909 += 1 };
  s0 -> s4 [77, 77] { R3991 += 1, R3929 += 1, R3909 += 1 };
  s0 -> s5 [77, 77] { R3991 += 1, R3929 += 1, R3909 += 1 };
  s0 -> s1 [89, 65535] { R3991 += 1, R3929 += 1, R3909 += 1 };
  s1 -> s1 [0, 76] { R3991 += 1, R3929 += 1, R3909 += 1 };
  s1 -> s6 [0, 65535] { R3991 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s1 [0, 65535] { R3991 += 1, R3929 += 1 };
  s1 -> s4 [77, 77] { R3991 += 1, R3929 += 1, R3909 += 1 };
  s1 -> s5 [77, 77] { R3991 += 1, R3929 += 1, R3909 += 1 };
  s1 -> s1 [89, 65535] { R3991 += 1, R3929 += 1, R3909 += 1 };
  s2 -> s1 [0, 76] { R3991 += 1, R3929 += 1, R3909 += 1 };
  s2 -> s2 [0, 65535] { R3991 += 1, R3928 += 1, R3929 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s3 [0, 65535] { R3991 += 1, R3929 += 1, R3908 += 1, R3909 += 1 };
  s2 -> s4 [77, 77] { R3991 += 1, R3929 += 1, R3909 += 1 };
  s2 -> s5 [77, 77] { R3991 += 1, R3929 += 1, R3909 += 1 };
  s2 -> s1 [89, 65535] { R3991 += 1, R3929 += 1, R3909 += 1 };
  s3 -> s1 [0, 76] { R3991 += 1, R3929 += 1, R3909 += 1 };
  s3 -> s6 [0, 65535] { R3991 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s3 [0, 65535] { R3991 += 1, R3929 += 1, R3908 += 1, R3909 += 1 };
  s3 -> s4 [77, 77] { R3991 += 1, R3929 += 1, R3909 += 1 };
  s3 -> s5 [77, 77] { R3991 += 1, R3929 += 1, R3909 += 1 };
  s3 -> s1 [89, 65535] { R3991 += 1, R3929 += 1, R3909 += 1 };
  s4 -> s6 [0, 65535] { R3991 += 1 };
  s4 -> s4 [0, 65535] { R3991 += 1, R3929 += 1 };
  s4 -> s7 [0, 65535];
  s5 -> s5 [0, 77] { R3991 += 1, R3929 += 1, R3909 += 1 };
  s5 -> s6 [0, 65535] { R3991 += 1 };
  s5 -> s7 [0, 65535];
  s5 -> s5 [0, 65535] { R3991 += 1, R3929 += 1 };
  s5 -> s5 [89, 65535] { R3991 += 1, R3929 += 1, R3909 += 1 };
  s6 -> s6 [0, 65535] { R3991 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R3993 += 1, R3948 += 1, R3949 += 1 };
  s0 -> s0 [0, 65535] { R3992 += 1, R3993 += 1 };
  s0 -> s2 [0, 65535] { R3993 += 1, R3949 += 1, R18 += 1 };
  s1 -> s1 [0, 65535] { R3993 += 1, R3948 += 1, R3949 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R3993 += 1, R3949 += 1, R18 += 1 };
  s2 -> s3 [0, 65535] { R3993 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3993 += 1, R3949 += 1, R18 += 1 };
  s3 -> s3 [0, 65535] { R3993 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 72] { R3995 += 1, R3951 += 1 };
  s0 -> s2 [0, 65535] { R3995 += 1, R3950 += 1, R3951 += 1 };
  s0 -> s0 [0, 65535] { R3994 += 1, R3995 += 1 };
  s0 -> s3 [73, 73] { R3995 += 1, R3951 += 1 };
  s0 -> s4 [73, 73] { R3995 += 1, R3951 += 1 };
  s0 -> s5 [77, 77] { R3995 += 1, R3951 += 1 };
  s0 -> s1 [78, 65535] { R3995 += 1, R3951 += 1 };
  s1 -> s1 [0, 72] { R3995 += 1, R3951 += 1 };
  s1 -> s3 [73, 73] { R3995 += 1, R3951 += 1 };
  s1 -> s4 [73, 73] { R3995 += 1, R3951 += 1 };
  s1 -> s5 [77, 77] { R3995 += 1, R3951 += 1 };
  s1 -> s1 [78, 65535] { R3995 += 1, R3951 += 1 };
  s2 -> s1 [0, 72] { R3995 += 1, R3951 += 1 };
  s2 -> s2 [0, 65535] { R3995 += 1, R3950 += 1, R3951 += 1 };
  s2 -> s3 [73, 73] { R3995 += 1, R3951 += 1 };
  s2 -> s4 [73, 73] { R3995 += 1, R3951 += 1 };
  s2 -> s5 [77, 77] { R3995 += 1, R3951 += 1 };
  s2 -> s1 [78, 65535] { R3995 += 1, R3951 += 1 };
  s4 -> s4 [0, 73] { R3995 += 1, R3951 += 1 };
  s4 -> s7 [77, 77] { R3995 += 1, R3951 += 1 };
  s4 -> s4 [78, 65535] { R3995 += 1, R3951 += 1 };
  s5 -> s5 [0, 72] { R3995 += 1, R3951 += 1 };
  s5 -> s5 [0, 65535] { R3995 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [73, 73] { R3995 += 1, R3951 += 1 };
  s5 -> s8 [73, 73] { R3995 += 1, R3951 += 1 };
  s5 -> s5 [77, 65535] { R3995 += 1, R3951 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 73] { R3995 += 1, R3951 += 1 };
  s7 -> s7 [0, 65535] { R3995 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [77, 65535] { R3995 += 1, R3951 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R3995 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 72] { R3997 += 1, R3953 += 1, R66 += 1 };
  s0 -> s2 [0, 65535] { R3997 += 1, R3952 += 1, R3953 += 1 };
  s0 -> s0 [0, 65535] { R3996 += 1, R3997 += 1 };
  s0 -> s3 [73, 73] { R3997 += 1, R3953 += 1, R66 += 1 };
  s0 -> s4 [73, 73] { R3997 += 1, R3953 += 1, R66 += 1 };
  s0 -> s1 [74, 65535] { R3997 += 1, R3953 += 1, R66 += 1 };
  s1 -> s1 [0, 72] { R3997 += 1, R3953 += 1, R66 += 1 };
  s1 -> s1 [0, 65535] { R3997 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R3997 += 1, R3953 += 1, R66 += 1 };
  s1 -> s4 [73, 73] { R3997 += 1, R3953 += 1, R66 += 1 };
  s1 -> s1 [74, 65535] { R3997 += 1, R3953 += 1, R66 += 1 };
  s2 -> s1 [0, 72] { R3997 += 1, R3953 += 1, R66 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3997 += 1, R3952 += 1, R3953 += 1 };
  s2 -> s3 [73, 73] { R3997 += 1, R3953 += 1, R66 += 1 };
  s2 -> s4 [73, 73] { R3997 += 1, R3953 += 1, R66 += 1 };
  s2 -> s1 [74, 65535] { R3997 += 1, R3953 += 1, R66 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R3997 += 1, R3953 += 1, R66 += 1 };
  s3 -> s6 [0, 65535] { R3997 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3997 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3997 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 72] { R3999 += 1, R3955 += 1, R68 += 1 };
  s0 -> s0 [0, 65535] { R3998 += 1, R3999 += 1 };
  s0 -> s2 [0, 65535] { R3999 += 1, R3954 += 1, R3955 += 1 };
  s0 -> s3 [73, 73] { R3999 += 1, R3955 += 1, R68 += 1 };
  s0 -> s4 [73, 73] { R3999 += 1, R3955 += 1, R68 += 1 };
  s0 -> s1 [74, 65535] { R3999 += 1, R3955 += 1, R68 += 1 };
  s1 -> s1 [0, 72] { R3999 += 1, R3955 += 1, R68 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3999 += 1 };
  s1 -> s3 [73, 73] { R3999 += 1, R3955 += 1, R68 += 1 };
  s1 -> s4 [73, 73] { R3999 += 1, R3955 += 1, R68 += 1 };
  s1 -> s1 [74, 65535] { R3999 += 1, R3955 += 1, R68 += 1 };
  s2 -> s1 [0, 72] { R3999 += 1, R3955 += 1, R68 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3999 += 1, R3954 += 1, R3955 += 1 };
  s2 -> s3 [73, 73] { R3999 += 1, R3955 += 1, R68 += 1 };
  s2 -> s4 [73, 73] { R3999 += 1, R3955 += 1, R68 += 1 };
  s2 -> s1 [74, 65535] { R3999 += 1, R3955 += 1, R68 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R3999 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R3999 += 1 };
  s4 -> s4 [0, 65535] { R3999 += 1, R3955 += 1, R68 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3999 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 72] { R4001 += 1, R3957 += 1, R70 += 1, R71 += 1 };
  s0 -> s0 [0, 65535] { R4000 += 1, R4001 += 1 };
  s0 -> s2 [0, 65535] { R4001 += 1, R3956 += 1, R3957 += 1 };
  s0 -> s3 [73, 73] { R4001 += 1, R3957 += 1, R70 += 1, R71 += 1 };
  s0 -> s4 [73, 73] { R4001 += 1, R3957 += 1, R70 += 1, R71 += 1 };
  s0 -> s1 [74, 65535] { R4001 += 1, R3957 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 72] { R4001 += 1, R3957 += 1, R70 += 1, R71 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R4001 += 1 };
  s1 -> s3 [73, 73] { R4001 += 1, R3957 += 1, R70 += 1, R71 += 1 };
  s1 -> s4 [73, 73] { R4001 += 1, R3957 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [74, 65535] { R4001 += 1, R3957 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [0, 72] { R4001 += 1, R3957 += 1, R70 += 1, R71 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R4001 += 1, R3956 += 1, R3957 += 1 };
  s2 -> s3 [73, 73] { R4001 += 1, R3957 += 1, R70 += 1, R71 += 1 };
  s2 -> s4 [73, 73] { R4001 += 1, R3957 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [74, 65535] { R4001 += 1, R3957 += 1, R70 += 1, R71 += 1 };
  s3 -> s3 [0, 65535] { R4001 += 1, R3957 += 1, R70 += 1, R71 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R4001 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R4001 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R4001 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 72] { R4003 += 1, R3959 += 1, R3890 += 1, R3891 += 1 };
  s0 -> s2 [0, 72] { R4003 += 1, R3959 += 1, R3891 += 1, R3892 += 1 };
  s0 -> s0 [0, 65535] { R4002 += 1, R4003 += 1 };
  s0 -> s3 [0, 65535] { R4003 += 1, R3958 += 1, R3959 += 1 };
  s0 -> s4 [73, 73] { R4003 += 1, R3959 += 1, R3890 += 1, R3891 += 1 };
  s0 -> s5 [73, 73] { R4003 += 1, R3959 += 1, R3890 += 1, R3891 += 1 };
  s0 -> s6 [73, 73] { R4003 += 1, R3959 += 1, R3891 += 1, R3892 += 1 };
  s0 -> s7 [73, 73] { R4003 += 1, R3959 += 1, R3891 += 1, R3892 += 1 };
  s0 -> s1 [74, 65535] { R4003 += 1, R3959 += 1, R3890 += 1, R3891 += 1 };
  s0 -> s2 [74, 65535] { R4003 += 1, R3959 += 1, R3891 += 1, R3892 += 1 };
  s1 -> s1 [0, 72] { R4003 += 1, R3959 += 1, R3890 += 1, R3891 += 1 };
  s1 -> s2 [0, 72] { R4003 += 1, R3959 += 1, R3891 += 1, R3892 += 1 };
  s1 -> s4 [73, 73] { R4003 += 1, R3959 += 1, R3890 += 1, R3891 += 1 };
  s1 -> s5 [73, 73] { R4003 += 1, R3959 += 1, R3890 += 1, R3891 += 1 };
  s1 -> s6 [73, 73] { R4003 += 1, R3959 += 1, R3891 += 1, R3892 += 1 };
  s1 -> s7 [73, 73] { R4003 += 1, R3959 += 1, R3891 += 1, R3892 += 1 };
  s1 -> s1 [74, 65535] { R4003 += 1, R3959 += 1, R3890 += 1, R3891 += 1 };
  s1 -> s2 [74, 65535] { R4003 += 1, R3959 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s2 [0, 72] { R4003 += 1, R3959 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s2 [0, 65535] { R4003 += 1 };
  s2 -> s9 [0, 65535];
  s2 -> s6 [73, 73] { R4003 += 1, R3959 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s7 [73, 73] { R4003 += 1, R3959 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s2 [74, 65535] { R4003 += 1, R3959 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s1 [0, 72] { R4003 += 1, R3959 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s2 [0, 72] { R4003 += 1, R3959 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s3 [0, 65535] { R4003 += 1, R3958 += 1, R3959 += 1 };
  s3 -> s4 [73, 73] { R4003 += 1, R3959 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s5 [73, 73] { R4003 += 1, R3959 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s6 [73, 73] { R4003 += 1, R3959 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s7 [73, 73] { R4003 += 1, R3959 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s1 [74, 65535] { R4003 += 1, R3959 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s2 [74, 65535] { R4003 += 1, R3959 += 1, R3891 += 1, R3892 += 1 };
  s5 -> s5 [0, 65535] { R4003 += 1, R3959 += 1, R3890 += 1, R3891 += 1 };
  s5 -> s7 [0, 65535] { R4003 += 1, R3959 += 1, R3891 += 1, R3892 += 1 };
  s6 -> s6 [0, 65535] { R4003 += 1 };
  s6 -> s9 [0, 65535];
  s7 -> s8 [0, 65535] { R4003 += 1 };
  s7 -> s7 [0, 65535] { R4003 += 1, R3959 += 1, R3891 += 1, R3892 += 1 };
  s7 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R4003 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s8, s2, s9, s6, s7;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 72] { R4005 += 1, R3961 += 1, R3897 += 1 };
  s0 -> s2 [0, 72] { R4005 += 1, R3961 += 1, R3896 += 1, R3897 += 1 };
  s0 -> s3 [0, 65535] { R4005 += 1, R3960 += 1, R3961 += 1 };
  s0 -> s0 [0, 65535] { R4004 += 1, R4005 += 1 };
  s0 -> s4 [73, 73] { R4005 += 1, R3961 += 1, R3896 += 1, R3897 += 1 };
  s0 -> s5 [73, 73] { R4005 += 1, R3961 += 1, R3897 += 1 };
  s0 -> s6 [73, 73] { R4005 += 1, R3961 += 1, R3897 += 1 };
  s0 -> s7 [73, 73] { R4005 += 1, R3961 += 1, R3896 += 1, R3897 += 1 };
  s0 -> s1 [74, 77] { R4005 += 1, R3961 += 1, R3897 += 1 };
  s0 -> s2 [74, 65535] { R4005 += 1, R3961 += 1, R3896 += 1, R3897 += 1 };
  s0 -> s8 [88, 88] { R4005 += 1, R3961 += 1, R3897 += 1 };
  s0 -> s1 [89, 65535] { R4005 += 1, R3961 += 1, R3897 += 1 };
  s1 -> s1 [0, 72] { R4005 += 1, R3961 += 1, R3897 += 1 };
  s1 -> s5 [73, 73] { R4005 += 1, R3961 += 1, R3897 += 1 };
  s1 -> s6 [73, 73] { R4005 += 1, R3961 += 1, R3897 += 1 };
  s1 -> s1 [74, 77] { R4005 += 1, R3961 += 1, R3897 += 1 };
  s1 -> s8 [88, 88] { R4005 += 1, R3961 += 1, R3897 += 1 };
  s1 -> s1 [89, 65535] { R4005 += 1, R3961 += 1, R3897 += 1 };
  s2 -> s1 [0, 72] { R4005 += 1, R3961 += 1, R3897 += 1 };
  s2 -> s2 [0, 72] { R4005 += 1, R3961 += 1, R3896 += 1, R3897 += 1 };
  s2 -> s4 [73, 73] { R4005 += 1, R3961 += 1, R3896 += 1, R3897 += 1 };
  s2 -> s5 [73, 73] { R4005 += 1, R3961 += 1, R3897 += 1 };
  s2 -> s6 [73, 73] { R4005 += 1, R3961 += 1, R3897 += 1 };
  s2 -> s7 [73, 73] { R4005 += 1, R3961 += 1, R3896 += 1, R3897 += 1 };
  s2 -> s1 [74, 77] { R4005 += 1, R3961 += 1, R3897 += 1 };
  s2 -> s2 [74, 65535] { R4005 += 1, R3961 += 1, R3896 += 1, R3897 += 1 };
  s2 -> s8 [88, 88] { R4005 += 1, R3961 += 1, R3897 += 1 };
  s2 -> s1 [89, 65535] { R4005 += 1, R3961 += 1, R3897 += 1 };
  s3 -> s1 [0, 72] { R4005 += 1, R3961 += 1, R3897 += 1 };
  s3 -> s2 [0, 72] { R4005 += 1, R3961 += 1, R3896 += 1, R3897 += 1 };
  s3 -> s3 [0, 65535] { R4005 += 1, R3960 += 1, R3961 += 1 };
  s3 -> s4 [73, 73] { R4005 += 1, R3961 += 1, R3896 += 1, R3897 += 1 };
  s3 -> s5 [73, 73] { R4005 += 1, R3961 += 1, R3897 += 1 };
  s3 -> s6 [73, 73] { R4005 += 1, R3961 += 1, R3897 += 1 };
  s3 -> s7 [73, 73] { R4005 += 1, R3961 += 1, R3896 += 1, R3897 += 1 };
  s3 -> s1 [74, 77] { R4005 += 1, R3961 += 1, R3897 += 1 };
  s3 -> s2 [74, 65535] { R4005 += 1, R3961 += 1, R3896 += 1, R3897 += 1 };
  s3 -> s8 [88, 88] { R4005 += 1, R3961 += 1, R3897 += 1 };
  s3 -> s1 [89, 65535] { R4005 += 1, R3961 += 1, R3897 += 1 };
  s4 -> s6 [0, 77] { R4005 += 1, R3961 += 1, R3897 += 1 };
  s4 -> s4 [0, 65535] { R4005 += 1, R3961 += 1, R3896 += 1, R3897 += 1 };
  s4 -> s11 [88, 88] { R4005 += 1, R3961 += 1, R3897 += 1 };
  s4 -> s6 [89, 65535] { R4005 += 1, R3961 += 1, R3897 += 1 };
  s6 -> s6 [0, 77] { R4005 += 1, R3961 += 1, R3897 += 1 };
  s6 -> s11 [88, 88] { R4005 += 1, R3961 += 1, R3897 += 1 };
  s6 -> s6 [89, 65535] { R4005 += 1, R3961 += 1, R3897 += 1 };
  s8 -> s8 [0, 72] { R4005 += 1, R3961 += 1, R3897 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R4005 += 1 };
  s8 -> s10 [73, 73] { R4005 += 1, R3961 += 1 };
  s8 -> s11 [73, 73] { R4005 += 1, R3961 += 1 };
  s8 -> s8 [74, 77] { R4005 += 1, R3961 += 1, R3897 += 1 };
  s8 -> s8 [74, 65535] { R4005 += 1, R3961 += 1 };
  s8 -> s8 [88, 65535] { R4005 += 1, R3961 += 1, R3897 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R4005 += 1 };
  s11 -> s11 [0, 77] { R4005 += 1, R3961 += 1, R3897 += 1 };
  s11 -> s12 [0, 65535] { R4005 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R4005 += 1, R3961 += 1 };
  s11 -> s11 [88, 65535] { R4005 += 1, R3961 += 1, R3897 += 1 };
  s12 -> s12 [0, 65535] { R4005 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 72] { R4007 += 1, R3963 += 1, R3900 += 1, R3901 += 1 };
  s0 -> s2 [0, 65535] { R4007 += 1, R3962 += 1, R3963 += 1 };
  s0 -> s0 [0, 65535] { R4006 += 1, R4007 += 1 };
  s0 -> s3 [73, 73] { R4007 += 1, R3963 += 1, R3900 += 1, R3901 += 1 };
  s0 -> s4 [73, 73] { R4007 += 1, R3963 += 1, R3900 += 1, R3901 += 1 };
  s0 -> s1 [74, 65535] { R4007 += 1, R3963 += 1, R3900 += 1, R3901 += 1 };
  s1 -> s1 [0, 72] { R4007 += 1, R3963 += 1, R3900 += 1, R3901 += 1 };
  s1 -> s1 [0, 65535] { R4007 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [73, 73] { R4007 += 1, R3963 += 1, R3900 += 1, R3901 += 1 };
  s1 -> s4 [73, 73] { R4007 += 1, R3963 += 1, R3900 += 1, R3901 += 1 };
  s1 -> s1 [74, 65535] { R4007 += 1, R3963 += 1, R3900 += 1, R3901 += 1 };
  s2 -> s1 [0, 72] { R4007 += 1, R3963 += 1, R3900 += 1, R3901 += 1 };
  s2 -> s2 [0, 65535] { R4007 += 1, R3962 += 1, R3963 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [73, 73] { R4007 += 1, R3963 += 1, R3900 += 1, R3901 += 1 };
  s2 -> s4 [73, 73] { R4007 += 1, R3963 += 1, R3900 += 1, R3901 += 1 };
  s2 -> s1 [74, 65535] { R4007 += 1, R3963 += 1, R3900 += 1, R3901 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R4007 += 1 };
  s4 -> s5 [0, 65535] { R4007 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R4007 += 1, R3963 += 1, R3900 += 1, R3901 += 1 };
  s5 -> s5 [0, 65535] { R4007 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 72] { R4009 += 1, R3965 += 1, R3906 += 1, R3907 += 1 };
  s0 -> s0 [0, 65535] { R4008 += 1, R4009 += 1 };
  s0 -> s2 [0, 65535] { R4009 += 1, R3964 += 1, R3965 += 1 };
  s0 -> s3 [73, 73] { R4009 += 1, R3965 += 1, R3906 += 1, R3907 += 1 };
  s0 -> s4 [73, 73] { R4009 += 1, R3965 += 1, R3906 += 1, R3907 += 1 };
  s0 -> s1 [74, 65535] { R4009 += 1, R3965 += 1, R3906 += 1, R3907 += 1 };
  s1 -> s1 [0, 72] { R4009 += 1, R3965 += 1, R3906 += 1, R3907 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R4009 += 1 };
  s1 -> s3 [73, 73] { R4009 += 1, R3965 += 1, R3906 += 1, R3907 += 1 };
  s1 -> s4 [73, 73] { R4009 += 1, R3965 += 1, R3906 += 1, R3907 += 1 };
  s1 -> s1 [74, 65535] { R4009 += 1, R3965 += 1, R3906 += 1, R3907 += 1 };
  s2 -> s1 [0, 72] { R4009 += 1, R3965 += 1, R3906 += 1, R3907 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R4009 += 1, R3964 += 1, R3965 += 1 };
  s2 -> s3 [73, 73] { R4009 += 1, R3965 += 1, R3906 += 1, R3907 += 1 };
  s2 -> s4 [73, 73] { R4009 += 1, R3965 += 1, R3906 += 1, R3907 += 1 };
  s2 -> s1 [74, 65535] { R4009 += 1, R3965 += 1, R3906 += 1, R3907 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R4009 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R4009 += 1, R3965 += 1, R3906 += 1, R3907 += 1 };
  s4 -> s6 [0, 65535] { R4009 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R4009 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
synchronised {  // Automata constraining P54
automaton P54_0 {
  init s0;
  s0 -> s1 [109, 109];
  accepting s1;
};
};
constraint R2 = R4009 && R20 - R4009 = -1 && R21 = R4009 && R22 - R4009 = -1 && R23 = R4009 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R3899 + -1*R3897 - R53 = 0 && R52 + R3898 + R3896 = 0 && R3950 = 0 && R3951 = 0 && R3958 = 0 && R3959 = 0 && R3960 = 0 && R3961 = 0 && R3966 = 0 && R3967 = R4009 && R3968 = 0 && R3969 = R4009 && R3970 = 0 && R3971 = R4009 && R3972 = 0 && R3973 = R4009 && R3974 = 0 && R3975 = R4009 && R3976 = 0 && R3977 = R4009 && R3978 = 0 && R3979 = R4009 && R3980 = 0 && R3981 = R4009 && R3982 = 0 && R3983 = R4009 && R3984 = 0 && R3985 = R4009 && R3986 = 0 && R3987 = R4009 && R3988 = 0 && R3989 = R4009 && R3990 = 0 && R3991 = R4009 && R3992 = 0 && R3993 = R4009 && R3994 = 0 && R3995 = R4009 && R3996 = 0 && R3997 = R4009 && R3998 = 0 && R3999 = R4009 && R4000 = 0 && R4001 = R4009 && R4002 = 0 && R4003 = R4009 && R4004 = 0 && R4005 = R4009 && R4006 = 0 && R4007 = R4009 && R4008 = 0 && -1 < R1 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R3899 + -1*R3897 - R53 < 1 && 0 < R4009 && (R1 != 0 || R17 = 0 || (R3910 = 0 && R3911 = 0)) && (R1 != 0 || R17 = 0 || (R3912 = 0 && R3913 = 0)) && (R1 != 0 || R17 = 0 || (R3914 = 0 && R3915 = 0)) && (R1 != 0 || R17 = 0 || (R3916 = 0 && R3917 = 0)) && (R1 != 0 || R17 = 0 || (R3918 = 0 && R3919 = 0)) && (R1 != 0 || R17 = 0 || (R3920 = 0 && R3921 = 0)) && (R1 != 0 || R17 = 0 || (R3922 = 0 && R3923 = 0)) && (R1 != 0 || R17 = 0 || (R3924 = 0 && R3925 = 0)) && (R1 != 0 || R17 = 0 || (R3926 = 0 && R3927 = 0)) && (R1 != 0 || R17 = 0 || (R3928 = 0 && R3929 = 0)) && (R48 + R3895 + R3892 != 0 || ((R42 + R72 + R70 != 0 || R43 + R73 + R71 + -1*R3899 + -1*R3897 - R53 = 0 || R53 + R3899 + R3897 < 1) && (R42 + R72 + R70 = 0 || R53 + R3899 + R3897 < 1))) && (R48 + R3895 + R3892 != 0 || ((R46 + R3893 + R3890 != 0 || R47 + R3894 + R3891 + -1*R3899 + -1*R3897 - R53 = 0 || R53 + R3899 + R3897 < 1) && (R46 + R3893 + R3890 = 0 || R53 + R3899 + R3897 < 1))) && (R3910 != 0 || R1 = R3911 || R1 < 1) && (R3912 != 0 || R1 = R3913 || R1 < 1) && (R3914 != 0 || R1 = R3915 || R1 < 1) && (R3916 != 0 || R1 = R3917 || R1 < 1) && (R3918 != 0 || R1 = R3919 || R1 < 1) && (R3920 != 0 || R1 = R3921 || R1 < 1) && (R3922 != 0 || R1 = R3923 || R1 < 1) && (R3924 != 0 || R1 = R3925 || R1 < 1) && (R3926 != 0 || R1 = R3927 || R1 < 1) && (R3928 != 0 || R1 = R3929 || R1 < 1) && (R18 = 0 || (R3948 = 0 && R3949 = 0)) && (R18 = 0 || (R3952 = 0 && R3953 = 0)) && (R18 = 0 || (R3954 = 0 && R3955 = 0)) && (R18 = 0 || (R3956 = 0 && R3957 = 0)) && (R18 = 0 || (R3962 = 0 && R3963 = 0)) && (R18 = 0 || (R3964 = 0 && R3965 = 0)) && (R19 = 0 || (R3930 = 0 && R3931 = 0)) && (R19 = 0 || (R3932 = 0 && R3933 = 0)) && (R19 = 0 || (R3934 = 0 && R3935 = 0)) && (R19 = 0 || (R3936 = 0 && R3937 = 0)) && (R19 = 0 || (R3938 = 0 && R3939 = 0)) && (R19 = 0 || (R3940 = 0 && R3941 = 0)) && (R19 = 0 || (R3942 = 0 && R3943 = 0)) && (R19 = 0 || (R3944 = 0 && R3945 = 0)) && (R19 = 0 || (R3946 = 0 && R3947 = 0)) && (R48 + R3895 + R3892 = 0 || (R42 + R72 + R70 = 0 && R43 + R73 + R71 + -1*R3899 + -1*R3897 - R53 = 0)) && (R48 + R3895 + R3892 = 0 || (R46 + R3893 + R3890 = 0 && R47 + R3894 + R3891 + -1*R3899 + -1*R3897 - R53 = 0)) && (R58 + R3905 + R3902 = 0 || (R56 + R3903 + R3900 = 0 && R57 + R3904 + R3901 = 0)) && (R58 + R3905 + R3902 = 0 || (R62 + R3908 + R3906 = 0 && R63 + R3909 + R3907 = 0)) && (R3910 = 0 || R1 < 1) && (R3912 = 0 || R1 < 1) && (R3914 = 0 || R1 < 1) && (R3916 = 0 || R1 < 1) && (R3918 = 0 || R1 < 1) && (R3920 = 0 || R1 < 1) && (R3922 = 0 || R1 < 1) && (R3924 = 0 || R1 < 1) && (R3926 = 0 || R1 < 1) && (R3928 = 0 || R1 < 1);
// End of Parikh automata intersection problem
