// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R12, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R70, R71, R72, R73, R7706, R7707, R7708, R7709, R7710, R7711, R8, R8982, R8983, R8984, R8985, R9408, R9409, R9410, R9411, R9412, R9413, R9622, R9623, R9624, R9625, R9626, R9627, R9628, R9629, R9630, R9631, R9632, R9633, R9634, R9635, R9636, R9637, R9638, R9639, R9640, R9641, R9642, R9643, R9644, R9645, R9646, R9647, R9648, R9649, R9650, R9651, R9652, R9653, R9654, R9655, R9656, R9657, R9658, R9659, R9660, R9661, R9662, R9663, R9664, R9665, R9666, R9667, R9668, R9669, R9670, R9671, R9672, R9673, R9674, R9675, R9676, R9677, R9678, R9679, R9680, R9681, R9682, R9683, R9684, R9685, R9686, R9687, R9688, R9689, R9690, R9691, R9692, R9693, R9694, R9695, R9696, R9697, R9698, R9699, R9700, R9701, R9702, R9703, R9704, R9705, R9706, R9707, R9708, R9709, R9710, R9711, R9712, R9713, R9714, R9715, R9716, R9717, R9718, R9719, R9720, R9721, R9722, R9723, R9724, R9725;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [84, 84];
  s0 -> s0 [85, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [84, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 83];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [84, 84];
  s0 -> s1 [85, 65535];
  s1 -> s1 [0, 83];
  s1 -> s2 [84, 84];
  s1 -> s1 [85, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s1 [0, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s1 [0, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R9647 += 1, R19 += 1 };
  s0 -> s0 [0, 65535] { R9646 += 1, R9647 += 1 };
  s1 -> s1 [0, 65535] { R9647 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 83] { R9649 += 1 };
  s0 -> s0 [0, 65535] { R9648 += 1, R9649 += 1 };
  s0 -> s2 [84, 84] { R9649 += 1 };
  s0 -> s3 [84, 84] { R9649 += 1 };
  s0 -> s1 [86, 65535] { R9649 += 1 };
  s1 -> s1 [0, 83] { R9649 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R9649 += 1 };
  s1 -> s3 [84, 84] { R9649 += 1 };
  s1 -> s1 [86, 65535] { R9649 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 84] { R9649 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [86, 65535] { R9649 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 83] { R9651 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R9650 += 1, R9651 += 1 };
  s0 -> s2 [84, 84] { R9651 += 1, R38 += 1 };
  s0 -> s3 [84, 84] { R9651 += 1, R38 += 1 };
  s0 -> s1 [85, 65535] { R9651 += 1, R38 += 1 };
  s1 -> s1 [0, 83] { R9651 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R9651 += 1, R38 += 1 };
  s1 -> s3 [84, 84] { R9651 += 1, R38 += 1 };
  s1 -> s1 [85, 65535] { R9651 += 1, R38 += 1 };
  s2 -> s2 [0, 65535] { R9651 += 1, R38 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 83] { R9653 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R9652 += 1, R9653 += 1 };
  s0 -> s2 [84, 84] { R9653 += 1, R40 += 1 };
  s0 -> s3 [84, 84] { R9653 += 1, R40 += 1 };
  s0 -> s1 [85, 65535] { R9653 += 1, R40 += 1 };
  s1 -> s1 [0, 83] { R9653 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R9653 += 1, R40 += 1 };
  s1 -> s3 [84, 84] { R9653 += 1, R40 += 1 };
  s1 -> s1 [85, 65535] { R9653 += 1, R40 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R9653 += 1, R40 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 83] { R9655 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R9654 += 1, R9655 += 1 };
  s0 -> s2 [84, 84] { R9655 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [84, 84] { R9655 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [85, 65535] { R9655 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 83] { R9655 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R9655 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [84, 84] { R9655 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [85, 65535] { R9655 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R9655 += 1, R42 += 1, R43 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 83] { R9657 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R9656 += 1, R9657 += 1 };
  s0 -> s2 [84, 84] { R9657 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [84, 84] { R9657 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [85, 65535] { R9657 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 83] { R9657 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R9657 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [84, 84] { R9657 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [85, 65535] { R9657 += 1, R46 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R9657 += 1, R46 += 1, R47 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 83] { R9659 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R9658 += 1, R9659 += 1 };
  s0 -> s2 [84, 84] { R9659 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [84, 84] { R9659 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [85, 65535] { R9659 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 83] { R9659 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R9659 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [84, 84] { R9659 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [85, 65535] { R9659 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R9659 += 1, R52 += 1, R53 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 83] { R9661 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R9660 += 1, R9661 += 1 };
  s0 -> s2 [84, 84] { R9661 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [84, 84] { R9661 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [85, 65535] { R9661 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 83] { R9661 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R9661 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [84, 84] { R9661 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [85, 65535] { R9661 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535] { R9661 += 1, R56 += 1, R57 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 83] { R9663 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R9662 += 1, R9663 += 1 };
  s0 -> s2 [84, 84] { R9663 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [84, 84] { R9663 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [85, 65535] { R9663 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 83] { R9663 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R9663 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [84, 84] { R9663 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [85, 65535] { R9663 += 1, R62 += 1, R63 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R9663 += 1, R62 += 1, R63 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 83] { R9683 += 1 };
  s0 -> s0 [0, 65535] { R9682 += 1, R9683 += 1 };
  s0 -> s2 [84, 84] { R9683 += 1 };
  s0 -> s1 [85, 65535] { R9683 += 1 };
  s1 -> s1 [0, 83] { R9683 += 1 };
  s1 -> s2 [84, 84] { R9683 += 1 };
  s1 -> s1 [85, 65535] { R9683 += 1 };
  s2 -> s2 [0, 65535] { R9683 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R9685 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R9684 += 1, R9685 += 1 };
  s1 -> s1 [0, 65535] { R9685 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 83] { R9687 += 1 };
  s0 -> s0 [0, 65535] { R9686 += 1, R9687 += 1 };
  s0 -> s2 [0, 65535] { R9687 += 1, R8 += 1 };
  s0 -> s3 [84, 84] { R9687 += 1 };
  s0 -> s1 [85, 65535] { R9687 += 1 };
  s1 -> s1 [0, 83] { R9687 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [84, 84] { R9687 += 1 };
  s1 -> s1 [85, 65535] { R9687 += 1 };
  s2 -> s1 [0, 83] { R9687 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R9687 += 1, R8 += 1 };
  s2 -> s3 [84, 84] { R9687 += 1 };
  s2 -> s1 [85, 65535] { R9687 += 1 };
  s3 -> s3 [0, 65535] { R9687 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 83] { R9689 += 1, R9627 += 1 };
  s0 -> s0 [0, 65535] { R9688 += 1, R9689 += 1 };
  s0 -> s2 [0, 65535] { R9689 += 1, R9626 += 1, R9627 += 1 };
  s0 -> s1 [85, 65535] { R9689 += 1, R9627 += 1 };
  s1 -> s1 [0, 83] { R9689 += 1, R9627 += 1 };
  s1 -> s1 [0, 65535] { R9689 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [85, 65535] { R9689 += 1, R9627 += 1 };
  s2 -> s1 [0, 83] { R9689 += 1, R9627 += 1 };
  s2 -> s2 [0, 65535] { R9689 += 1, R9626 += 1, R9627 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [85, 65535] { R9689 += 1, R9627 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R9691 += 1, R9628 += 1, R9629 += 1 };
  s0 -> s2 [0, 65535] { R9691 += 1, R9629 += 1, R17 += 1 };
  s0 -> s0 [0, 65535] { R9690 += 1, R9691 += 1 };
  s1 -> s1 [0, 65535] { R9691 += 1, R9628 += 1, R9629 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R9691 += 1, R9629 += 1, R17 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R9691 += 1, R9629 += 1, R17 += 1 };
  s2 -> s4 [0, 65535] { R9691 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R9691 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s0 [0, 65535] { R9692 += 1, R9693 += 1 };
  s0 -> s1 [0, 65535] { R9693 += 1, R9630 += 1, R9631 += 1 };
  s0 -> s2 [0, 65535] { R9693 += 1, R9631 += 1 };
  s1 -> s1 [0, 65535] { R9693 += 1, R9630 += 1, R9631 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R9693 += 1, R9631 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R9693 += 1 };
  s2 -> s2 [0, 65535] { R9693 += 1, R9631 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R9693 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R9695 += 1, R9632 += 1, R9633 += 1 };
  s0 -> s2 [0, 65535] { R9695 += 1, R9633 += 1, R67 += 1 };
  s0 -> s0 [0, 65535] { R9694 += 1, R9695 += 1 };
  s1 -> s1 [0, 65535] { R9695 += 1, R9632 += 1, R9633 += 1 };
  s1 -> s2 [0, 65535] { R9695 += 1, R9633 += 1, R67 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R9695 += 1, R9633 += 1, R67 += 1 };
  s2 -> s3 [0, 65535] { R9695 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R9695 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 84] { R9697 += 1, R9635 += 1 };
  s0 -> s2 [0, 65535] { R9697 += 1, R9635 += 1, R69 += 1 };
  s0 -> s0 [0, 65535] { R9696 += 1, R9697 += 1 };
  s0 -> s3 [0, 65535] { R9697 += 1, R9634 += 1, R9635 += 1 };
  s0 -> s1 [86, 65535] { R9697 += 1, R9635 += 1 };
  s1 -> s1 [0, 84] { R9697 += 1, R9635 += 1 };
  s1 -> s1 [0, 65535] { R9697 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [86, 65535] { R9697 += 1, R9635 += 1 };
  s2 -> s1 [0, 84] { R9697 += 1, R9635 += 1 };
  s2 -> s2 [0, 65535] { R9697 += 1, R9635 += 1, R69 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R9697 += 1 };
  s2 -> s1 [86, 65535] { R9697 += 1, R9635 += 1 };
  s3 -> s1 [0, 84] { R9697 += 1, R9635 += 1 };
  s3 -> s2 [0, 65535] { R9697 += 1, R9635 += 1, R69 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R9697 += 1, R9634 += 1, R9635 += 1 };
  s3 -> s1 [86, 65535] { R9697 += 1, R9635 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R9697 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 84] { R9699 += 1, R9637 += 1, R73 += 1 };
  s0 -> s0 [0, 65535] { R9698 += 1, R9699 += 1 };
  s0 -> s2 [0, 65535] { R9699 += 1, R9636 += 1, R9637 += 1 };
  s0 -> s3 [0, 65535] { R9699 += 1, R9637 += 1, R72 += 1, R73 += 1 };
  s0 -> s1 [86, 65535] { R9699 += 1, R9637 += 1, R73 += 1 };
  s1 -> s1 [0, 84] { R9699 += 1, R9637 += 1, R73 += 1 };
  s1 -> s4 [0, 65535] { R9699 += 1 };
  s1 -> s1 [0, 65535] { R9699 += 1, R9637 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [86, 65535] { R9699 += 1, R9637 += 1, R73 += 1 };
  s2 -> s1 [0, 84] { R9699 += 1, R9637 += 1, R73 += 1 };
  s2 -> s2 [0, 65535] { R9699 += 1, R9636 += 1, R9637 += 1 };
  s2 -> s3 [0, 65535] { R9699 += 1, R9637 += 1, R72 += 1, R73 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [86, 65535] { R9699 += 1, R9637 += 1, R73 += 1 };
  s3 -> s1 [0, 84] { R9699 += 1, R9637 += 1, R73 += 1 };
  s3 -> s4 [0, 65535] { R9699 += 1 };
  s3 -> s3 [0, 65535] { R9699 += 1, R9637 += 1, R72 += 1, R73 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [86, 65535] { R9699 += 1, R9637 += 1, R73 += 1 };
  s4 -> s4 [0, 65535] { R9699 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s0 [0, 65535] { R9700 += 1, R9701 += 1 };
  s0 -> s1 [0, 65535] { R9701 += 1, R9638 += 1, R9639 += 1 };
  s0 -> s2 [0, 65535] { R9701 += 1, R9639 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R9701 += 1, R9638 += 1, R9639 += 1 };
  s1 -> s2 [0, 65535] { R9701 += 1, R9639 += 1 };
  s2 -> s3 [0, 65535] { R9701 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R9701 += 1, R9639 += 1 };
  s3 -> s3 [0, 65535] { R9701 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 85] { R9703 += 1, R9641 += 1, R8985 += 1 };
  s0 -> s2 [0, 65535] { R9703 += 1, R9641 += 1, R8984 += 1, R8985 += 1 };
  s0 -> s3 [0, 65535] { R9703 += 1, R9640 += 1, R9641 += 1 };
  s0 -> s0 [0, 65535] { R9702 += 1, R9703 += 1 };
  s0 -> s4 [90, 90] { R9703 += 1, R9641 += 1, R8985 += 1 };
  s0 -> s1 [91, 65535] { R9703 += 1, R9641 += 1, R8985 += 1 };
  s1 -> s1 [0, 85] { R9703 += 1, R9641 += 1, R8985 += 1 };
  s1 -> s4 [90, 90] { R9703 += 1, R9641 += 1, R8985 += 1 };
  s1 -> s1 [91, 65535] { R9703 += 1, R9641 += 1, R8985 += 1 };
  s2 -> s1 [0, 85] { R9703 += 1, R9641 += 1, R8985 += 1 };
  s2 -> s2 [0, 65535] { R9703 += 1, R9641 += 1, R8984 += 1, R8985 += 1 };
  s2 -> s4 [90, 90] { R9703 += 1, R9641 += 1, R8985 += 1 };
  s2 -> s1 [91, 65535] { R9703 += 1, R9641 += 1, R8985 += 1 };
  s3 -> s1 [0, 85] { R9703 += 1, R9641 += 1, R8985 += 1 };
  s3 -> s2 [0, 65535] { R9703 += 1, R9641 += 1, R8984 += 1, R8985 += 1 };
  s3 -> s3 [0, 65535] { R9703 += 1, R9640 += 1, R9641 += 1 };
  s3 -> s4 [90, 90] { R9703 += 1, R9641 += 1, R8985 += 1 };
  s3 -> s1 [91, 65535] { R9703 += 1, R9641 += 1, R8985 += 1 };
  s4 -> s4 [0, 85] { R9703 += 1, R9641 += 1, R8985 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R9703 += 1, R9641 += 1 };
  s4 -> s6 [0, 65535] { R9703 += 1 };
  s4 -> s4 [90, 65535] { R9703 += 1, R9641 += 1, R8985 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9703 += 1 };
  accepting s4, s5, s6;
};
automaton value2_28 {
  init s0;
  s0 -> s0 [0, 65535] { R9704 += 1, R9705 += 1 };
  s0 -> s1 [0, 65535] { R9705 += 1, R9643 += 1, R9412 += 1, R9413 += 1 };
  s0 -> s2 [0, 65535] { R9705 += 1, R9643 += 1 };
  s0 -> s3 [0, 65535] { R9705 += 1, R9642 += 1, R9643 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R9705 += 1, R9643 += 1, R9412 += 1, R9413 += 1 };
  s1 -> s2 [0, 65535] { R9705 += 1, R9643 += 1 };
  s1 -> s5 [0, 65535] { R9705 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R9705 += 1, R9643 += 1 };
  s2 -> s5 [0, 65535] { R9705 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R9705 += 1, R9643 += 1, R9412 += 1, R9413 += 1 };
  s3 -> s2 [0, 65535] { R9705 += 1, R9643 += 1 };
  s3 -> s3 [0, 65535] { R9705 += 1, R9642 += 1, R9643 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R9705 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 85] { R9707 += 1, R9645 += 1, R9625 += 1 };
  s0 -> s2 [0, 65535] { R9707 += 1, R9644 += 1, R9645 += 1 };
  s0 -> s1 [0, 65535] { R9707 += 1, R9645 += 1 };
  s0 -> s0 [0, 65535] { R9706 += 1, R9707 += 1 };
  s0 -> s1 [91, 65535] { R9707 += 1, R9645 += 1, R9625 += 1 };
  s1 -> s1 [0, 85] { R9707 += 1, R9645 += 1, R9625 += 1 };
  s1 -> s4 [0, 65535] { R9707 += 1 };
  s1 -> s1 [0, 65535] { R9707 += 1, R9645 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [91, 65535] { R9707 += 1, R9645 += 1, R9625 += 1 };
  s2 -> s1 [0, 85] { R9707 += 1, R9645 += 1, R9625 += 1 };
  s2 -> s2 [0, 65535] { R9707 += 1, R9644 += 1, R9645 += 1 };
  s2 -> s1 [0, 65535] { R9707 += 1, R9645 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [91, 65535] { R9707 += 1, R9645 += 1, R9625 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R9707 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s0 [0, 65535] { R9708 += 1, R9709 += 1 };
  s0 -> s1 [0, 65535] { R9709 += 1, R9665 += 1, R18 += 1 };
  s0 -> s2 [0, 65535] { R9709 += 1, R9664 += 1, R9665 += 1 };
  s1 -> s1 [0, 65535] { R9709 += 1, R9665 += 1, R18 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R9709 += 1 };
  s2 -> s1 [0, 65535] { R9709 += 1, R9665 += 1, R18 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R9709 += 1, R9664 += 1, R9665 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R9709 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 83] { R9711 += 1, R9667 += 1 };
  s0 -> s2 [0, 65535] { R9711 += 1, R9666 += 1, R9667 += 1 };
  s0 -> s0 [0, 65535] { R9710 += 1, R9711 += 1 };
  s0 -> s3 [84, 84] { R9711 += 1, R9667 += 1 };
  s0 -> s4 [84, 84] { R9711 += 1, R9667 += 1 };
  s0 -> s5 [85, 85] { R9711 += 1, R9667 += 1 };
  s0 -> s1 [86, 65535] { R9711 += 1, R9667 += 1 };
  s1 -> s1 [0, 83] { R9711 += 1, R9667 += 1 };
  s1 -> s3 [84, 84] { R9711 += 1, R9667 += 1 };
  s1 -> s4 [84, 84] { R9711 += 1, R9667 += 1 };
  s1 -> s5 [85, 85] { R9711 += 1, R9667 += 1 };
  s1 -> s1 [86, 65535] { R9711 += 1, R9667 += 1 };
  s2 -> s1 [0, 83] { R9711 += 1, R9667 += 1 };
  s2 -> s2 [0, 65535] { R9711 += 1, R9666 += 1, R9667 += 1 };
  s2 -> s3 [84, 84] { R9711 += 1, R9667 += 1 };
  s2 -> s4 [84, 84] { R9711 += 1, R9667 += 1 };
  s2 -> s5 [85, 85] { R9711 += 1, R9667 += 1 };
  s2 -> s1 [86, 65535] { R9711 += 1, R9667 += 1 };
  s3 -> s3 [0, 84] { R9711 += 1, R9667 += 1 };
  s3 -> s7 [85, 85] { R9711 += 1, R9667 += 1 };
  s3 -> s3 [86, 65535] { R9711 += 1, R9667 += 1 };
  s5 -> s5 [0, 83] { R9711 += 1, R9667 += 1 };
  s5 -> s5 [0, 65535] { R9711 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [84, 84] { R9711 += 1, R9667 += 1 };
  s5 -> s8 [84, 84] { R9711 += 1, R9667 += 1 };
  s5 -> s5 [85, 65535] { R9711 += 1, R9667 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R9711 += 1, R9667 += 1 };
  s7 -> s9 [0, 65535] { R9711 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R9711 += 1 };
  s8 -> s6 [0, 65535];
  s9 -> s9 [0, 65535] { R9711 += 1 };
  s9 -> s6 [0, 65535];
  accepting s8, s5, s9, s6, s7;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 83] { R9713 += 1, R9669 += 1, R66 += 1 };
  s0 -> s2 [0, 65535] { R9713 += 1, R9668 += 1, R9669 += 1 };
  s0 -> s0 [0, 65535] { R9712 += 1, R9713 += 1 };
  s0 -> s3 [84, 84] { R9713 += 1, R9669 += 1, R66 += 1 };
  s0 -> s4 [84, 84] { R9713 += 1, R9669 += 1, R66 += 1 };
  s0 -> s1 [85, 65535] { R9713 += 1, R9669 += 1, R66 += 1 };
  s1 -> s1 [0, 83] { R9713 += 1, R9669 += 1, R66 += 1 };
  s1 -> s1 [0, 65535] { R9713 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [84, 84] { R9713 += 1, R9669 += 1, R66 += 1 };
  s1 -> s4 [84, 84] { R9713 += 1, R9669 += 1, R66 += 1 };
  s1 -> s1 [85, 65535] { R9713 += 1, R9669 += 1, R66 += 1 };
  s2 -> s1 [0, 83] { R9713 += 1, R9669 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R9713 += 1, R9668 += 1, R9669 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [84, 84] { R9713 += 1, R9669 += 1, R66 += 1 };
  s2 -> s4 [84, 84] { R9713 += 1, R9669 += 1, R66 += 1 };
  s2 -> s1 [85, 65535] { R9713 += 1, R9669 += 1, R66 += 1 };
  s3 -> s3 [0, 65535] { R9713 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R9713 += 1, R9669 += 1, R66 += 1 };
  s4 -> s5 [0, 65535] { R9713 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R9713 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 83] { R9715 += 1, R9671 += 1, R68 += 1 };
  s0 -> s2 [0, 65535] { R9715 += 1, R9670 += 1, R9671 += 1 };
  s0 -> s0 [0, 65535] { R9714 += 1, R9715 += 1 };
  s0 -> s3 [84, 84] { R9715 += 1, R9671 += 1, R68 += 1 };
  s0 -> s4 [84, 84] { R9715 += 1, R9671 += 1, R68 += 1 };
  s0 -> s1 [85, 65535] { R9715 += 1, R9671 += 1, R68 += 1 };
  s1 -> s1 [0, 83] { R9715 += 1, R9671 += 1, R68 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R9715 += 1 };
  s1 -> s3 [84, 84] { R9715 += 1, R9671 += 1, R68 += 1 };
  s1 -> s4 [84, 84] { R9715 += 1, R9671 += 1, R68 += 1 };
  s1 -> s1 [85, 65535] { R9715 += 1, R9671 += 1, R68 += 1 };
  s2 -> s1 [0, 83] { R9715 += 1, R9671 += 1, R68 += 1 };
  s2 -> s2 [0, 65535] { R9715 += 1, R9670 += 1, R9671 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [84, 84] { R9715 += 1, R9671 += 1, R68 += 1 };
  s2 -> s4 [84, 84] { R9715 += 1, R9671 += 1, R68 += 1 };
  s2 -> s1 [85, 65535] { R9715 += 1, R9671 += 1, R68 += 1 };
  s3 -> s6 [0, 65535] { R9715 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R9715 += 1, R9671 += 1, R68 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R9715 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9715 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 83] { R9717 += 1, R9673 += 1, R70 += 1, R71 += 1 };
  s0 -> s2 [0, 65535] { R9717 += 1, R9672 += 1, R9673 += 1 };
  s0 -> s0 [0, 65535] { R9716 += 1, R9717 += 1 };
  s0 -> s3 [84, 84] { R9717 += 1, R9673 += 1, R70 += 1, R71 += 1 };
  s0 -> s4 [84, 84] { R9717 += 1, R9673 += 1, R70 += 1, R71 += 1 };
  s0 -> s1 [85, 65535] { R9717 += 1, R9673 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 83] { R9717 += 1, R9673 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 65535] { R9717 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [84, 84] { R9717 += 1, R9673 += 1, R70 += 1, R71 += 1 };
  s1 -> s4 [84, 84] { R9717 += 1, R9673 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [85, 65535] { R9717 += 1, R9673 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [0, 83] { R9717 += 1, R9673 += 1, R70 += 1, R71 += 1 };
  s2 -> s2 [0, 65535] { R9717 += 1, R9672 += 1, R9673 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [84, 84] { R9717 += 1, R9673 += 1, R70 += 1, R71 += 1 };
  s2 -> s4 [84, 84] { R9717 += 1, R9673 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [85, 65535] { R9717 += 1, R9673 += 1, R70 += 1, R71 += 1 };
  s3 -> s3 [0, 65535] { R9717 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R9717 += 1, R9673 += 1, R70 += 1, R71 += 1 };
  s4 -> s5 [0, 65535] { R9717 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R9717 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 83] { R9719 += 1, R9675 += 1, R7707 += 1, R7708 += 1 };
  s0 -> s2 [0, 83] { R9719 += 1, R9675 += 1, R7706 += 1, R7707 += 1 };
  s0 -> s3 [0, 65535] { R9719 += 1, R9674 += 1, R9675 += 1 };
  s0 -> s0 [0, 65535] { R9718 += 1, R9719 += 1 };
  s0 -> s4 [84, 84] { R9719 += 1, R9675 += 1, R7707 += 1, R7708 += 1 };
  s0 -> s5 [84, 84] { R9719 += 1, R9675 += 1, R7707 += 1, R7708 += 1 };
  s0 -> s6 [84, 84] { R9719 += 1, R9675 += 1, R7706 += 1, R7707 += 1 };
  s0 -> s7 [84, 84] { R9719 += 1, R9675 += 1, R7706 += 1, R7707 += 1 };
  s0 -> s1 [85, 65535] { R9719 += 1, R9675 += 1, R7707 += 1, R7708 += 1 };
  s0 -> s2 [85, 65535] { R9719 += 1, R9675 += 1, R7706 += 1, R7707 += 1 };
  s1 -> s1 [0, 83] { R9719 += 1, R9675 += 1, R7707 += 1, R7708 += 1 };
  s1 -> s11 [0, 83] { R9719 += 1, R9675 += 1 };
  s1 -> s8 [84, 84] { R9719 += 1, R9675 += 1 };
  s1 -> s4 [84, 84] { R9719 += 1, R9675 += 1, R7707 += 1, R7708 += 1 };
  s1 -> s5 [84, 84] { R9719 += 1, R9675 += 1, R7707 += 1, R7708 += 1 };
  s1 -> s12 [84, 84] { R9719 += 1, R9675 += 1 };
  s1 -> s1 [85, 65535] { R9719 += 1, R9675 += 1, R7707 += 1, R7708 += 1 };
  s1 -> s11 [85, 65535] { R9719 += 1, R9675 += 1 };
  s2 -> s1 [0, 83] { R9719 += 1, R9675 += 1, R7707 += 1, R7708 += 1 };
  s2 -> s2 [0, 83] { R9719 += 1, R9675 += 1, R7706 += 1, R7707 += 1 };
  s2 -> s4 [84, 84] { R9719 += 1, R9675 += 1, R7707 += 1, R7708 += 1 };
  s2 -> s5 [84, 84] { R9719 += 1, R9675 += 1, R7707 += 1, R7708 += 1 };
  s2 -> s6 [84, 84] { R9719 += 1, R9675 += 1, R7706 += 1, R7707 += 1 };
  s2 -> s7 [84, 84] { R9719 += 1, R9675 += 1, R7706 += 1, R7707 += 1 };
  s2 -> s1 [85, 65535] { R9719 += 1, R9675 += 1, R7707 += 1, R7708 += 1 };
  s2 -> s2 [85, 65535] { R9719 += 1, R9675 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s1 [0, 83] { R9719 += 1, R9675 += 1, R7707 += 1, R7708 += 1 };
  s3 -> s2 [0, 83] { R9719 += 1, R9675 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s3 [0, 65535] { R9719 += 1, R9674 += 1, R9675 += 1 };
  s3 -> s4 [84, 84] { R9719 += 1, R9675 += 1, R7707 += 1, R7708 += 1 };
  s3 -> s5 [84, 84] { R9719 += 1, R9675 += 1, R7707 += 1, R7708 += 1 };
  s3 -> s6 [84, 84] { R9719 += 1, R9675 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s7 [84, 84] { R9719 += 1, R9675 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s1 [85, 65535] { R9719 += 1, R9675 += 1, R7707 += 1, R7708 += 1 };
  s3 -> s2 [85, 65535] { R9719 += 1, R9675 += 1, R7706 += 1, R7707 += 1 };
  s4 -> s8 [0, 65535] { R9719 += 1, R9675 += 1 };
  s4 -> s4 [0, 65535] { R9719 += 1, R9675 += 1, R7707 += 1, R7708 += 1 };
  s6 -> s4 [0, 65535] { R9719 += 1, R9675 += 1, R7707 += 1, R7708 += 1 };
  s6 -> s6 [0, 65535] { R9719 += 1, R9675 += 1, R7706 += 1, R7707 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R9719 += 1, R9675 += 1 };
  s8 -> s10 [0, 65535] { R9719 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R9719 += 1 };
  s11 -> s11 [0, 83] { R9719 += 1, R9675 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R9719 += 1 };
  s11 -> s8 [84, 84] { R9719 += 1, R9675 += 1 };
  s11 -> s12 [84, 84] { R9719 += 1, R9675 += 1 };
  s11 -> s11 [85, 65535] { R9719 += 1, R9675 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R9719 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 83] { R9721 += 1, R9677 += 1, R8982 += 1, R8983 += 1 };
  s0 -> s0 [0, 65535] { R9720 += 1, R9721 += 1 };
  s0 -> s2 [0, 65535] { R9721 += 1, R9676 += 1, R9677 += 1 };
  s0 -> s3 [84, 84] { R9721 += 1, R9677 += 1, R8982 += 1, R8983 += 1 };
  s0 -> s4 [84, 84] { R9721 += 1, R9677 += 1, R8982 += 1, R8983 += 1 };
  s0 -> s1 [85, 65535] { R9721 += 1, R9677 += 1, R8982 += 1, R8983 += 1 };
  s1 -> s1 [0, 83] { R9721 += 1, R9677 += 1, R8982 += 1, R8983 += 1 };
  s1 -> s1 [0, 65535] { R9721 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [84, 84] { R9721 += 1, R9677 += 1, R8982 += 1, R8983 += 1 };
  s1 -> s4 [84, 84] { R9721 += 1, R9677 += 1, R8982 += 1, R8983 += 1 };
  s1 -> s1 [85, 65535] { R9721 += 1, R9677 += 1, R8982 += 1, R8983 += 1 };
  s2 -> s1 [0, 83] { R9721 += 1, R9677 += 1, R8982 += 1, R8983 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R9721 += 1, R9676 += 1, R9677 += 1 };
  s2 -> s3 [84, 84] { R9721 += 1, R9677 += 1, R8982 += 1, R8983 += 1 };
  s2 -> s4 [84, 84] { R9721 += 1, R9677 += 1, R8982 += 1, R8983 += 1 };
  s2 -> s1 [85, 65535] { R9721 += 1, R9677 += 1, R8982 += 1, R8983 += 1 };
  s3 -> s3 [0, 65535] { R9721 += 1, R9677 += 1, R8982 += 1, R8983 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R9721 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R9721 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9721 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 83] { R9723 += 1, R9679 += 1, R9408 += 1, R9409 += 1 };
  s0 -> s2 [0, 83] { R9723 += 1, R9679 += 1, R9409 += 1, R9410 += 1 };
  s0 -> s0 [0, 65535] { R9722 += 1, R9723 += 1 };
  s0 -> s3 [0, 65535] { R9723 += 1, R9678 += 1, R9679 += 1 };
  s0 -> s4 [84, 84] { R9723 += 1, R9679 += 1, R9408 += 1, R9409 += 1 };
  s0 -> s5 [84, 84] { R9723 += 1, R9679 += 1, R9408 += 1, R9409 += 1 };
  s0 -> s6 [84, 84] { R9723 += 1, R9679 += 1, R9409 += 1, R9410 += 1 };
  s0 -> s7 [84, 84] { R9723 += 1, R9679 += 1, R9409 += 1, R9410 += 1 };
  s0 -> s1 [85, 65535] { R9723 += 1, R9679 += 1, R9408 += 1, R9409 += 1 };
  s0 -> s2 [85, 65535] { R9723 += 1, R9679 += 1, R9409 += 1, R9410 += 1 };
  s1 -> s1 [0, 83] { R9723 += 1, R9679 += 1, R9408 += 1, R9409 += 1 };
  s1 -> s2 [0, 83] { R9723 += 1, R9679 += 1, R9409 += 1, R9410 += 1 };
  s1 -> s4 [84, 84] { R9723 += 1, R9679 += 1, R9408 += 1, R9409 += 1 };
  s1 -> s5 [84, 84] { R9723 += 1, R9679 += 1, R9408 += 1, R9409 += 1 };
  s1 -> s6 [84, 84] { R9723 += 1, R9679 += 1, R9409 += 1, R9410 += 1 };
  s1 -> s7 [84, 84] { R9723 += 1, R9679 += 1, R9409 += 1, R9410 += 1 };
  s1 -> s1 [85, 65535] { R9723 += 1, R9679 += 1, R9408 += 1, R9409 += 1 };
  s1 -> s2 [85, 65535] { R9723 += 1, R9679 += 1, R9409 += 1, R9410 += 1 };
  s2 -> s2 [0, 83] { R9723 += 1, R9679 += 1, R9409 += 1, R9410 += 1 };
  s2 -> s2 [0, 65535] { R9723 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s6 [84, 84] { R9723 += 1, R9679 += 1, R9409 += 1, R9410 += 1 };
  s2 -> s7 [84, 84] { R9723 += 1, R9679 += 1, R9409 += 1, R9410 += 1 };
  s2 -> s2 [85, 65535] { R9723 += 1, R9679 += 1, R9409 += 1, R9410 += 1 };
  s3 -> s1 [0, 83] { R9723 += 1, R9679 += 1, R9408 += 1, R9409 += 1 };
  s3 -> s2 [0, 83] { R9723 += 1, R9679 += 1, R9409 += 1, R9410 += 1 };
  s3 -> s3 [0, 65535] { R9723 += 1, R9678 += 1, R9679 += 1 };
  s3 -> s4 [84, 84] { R9723 += 1, R9679 += 1, R9408 += 1, R9409 += 1 };
  s3 -> s5 [84, 84] { R9723 += 1, R9679 += 1, R9408 += 1, R9409 += 1 };
  s3 -> s6 [84, 84] { R9723 += 1, R9679 += 1, R9409 += 1, R9410 += 1 };
  s3 -> s7 [84, 84] { R9723 += 1, R9679 += 1, R9409 += 1, R9410 += 1 };
  s3 -> s1 [85, 65535] { R9723 += 1, R9679 += 1, R9408 += 1, R9409 += 1 };
  s3 -> s2 [85, 65535] { R9723 += 1, R9679 += 1, R9409 += 1, R9410 += 1 };
  s5 -> s5 [0, 65535] { R9723 += 1, R9679 += 1, R9408 += 1, R9409 += 1 };
  s5 -> s6 [0, 65535] { R9723 += 1, R9679 += 1, R9409 += 1, R9410 += 1 };
  s6 -> s6 [0, 65535] { R9723 += 1, R9679 += 1, R9409 += 1, R9410 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s9 [0, 65535] { R9723 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R9723 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R9723 += 1 };
  accepting s8, s2, s9, s6, s7;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 83] { R9725 += 1, R9681 += 1, R9622 += 1, R9623 += 1 };
  s0 -> s2 [0, 83] { R9725 += 1, R9681 += 1, R9623 += 1 };
  s0 -> s3 [0, 65535] { R9725 += 1, R9680 += 1, R9681 += 1 };
  s0 -> s0 [0, 65535] { R9724 += 1, R9725 += 1 };
  s0 -> s4 [84, 84] { R9725 += 1, R9681 += 1, R9622 += 1, R9623 += 1 };
  s0 -> s5 [84, 84] { R9725 += 1, R9681 += 1, R9622 += 1, R9623 += 1 };
  s0 -> s6 [84, 84] { R9725 += 1, R9681 += 1, R9623 += 1 };
  s0 -> s7 [84, 84] { R9725 += 1, R9681 += 1, R9623 += 1 };
  s0 -> s8 [85, 85] { R9725 += 1, R9681 += 1, R9623 += 1 };
  s0 -> s1 [85, 65535] { R9725 += 1, R9681 += 1, R9622 += 1, R9623 += 1 };
  s0 -> s2 [91, 65535] { R9725 += 1, R9681 += 1, R9623 += 1 };
  s1 -> s1 [0, 83] { R9725 += 1, R9681 += 1, R9622 += 1, R9623 += 1 };
  s1 -> s2 [0, 83] { R9725 += 1, R9681 += 1, R9623 += 1 };
  s1 -> s4 [84, 84] { R9725 += 1, R9681 += 1, R9622 += 1, R9623 += 1 };
  s1 -> s5 [84, 84] { R9725 += 1, R9681 += 1, R9622 += 1, R9623 += 1 };
  s1 -> s6 [84, 84] { R9725 += 1, R9681 += 1, R9623 += 1 };
  s1 -> s7 [84, 84] { R9725 += 1, R9681 += 1, R9623 += 1 };
  s1 -> s8 [85, 85] { R9725 += 1, R9681 += 1, R9623 += 1 };
  s1 -> s1 [85, 65535] { R9725 += 1, R9681 += 1, R9622 += 1, R9623 += 1 };
  s1 -> s2 [91, 65535] { R9725 += 1, R9681 += 1, R9623 += 1 };
  s2 -> s2 [0, 83] { R9725 += 1, R9681 += 1, R9623 += 1 };
  s2 -> s6 [84, 84] { R9725 += 1, R9681 += 1 };
  s2 -> s7 [84, 84] { R9725 += 1, R9681 += 1 };
  s2 -> s8 [85, 85] { R9725 += 1, R9681 += 1, R9623 += 1 };
  s2 -> s2 [85, 65535] { R9725 += 1, R9681 += 1 };
  s2 -> s2 [91, 65535] { R9725 += 1, R9681 += 1, R9623 += 1 };
  s3 -> s1 [0, 83] { R9725 += 1, R9681 += 1, R9622 += 1, R9623 += 1 };
  s3 -> s2 [0, 83] { R9725 += 1, R9681 += 1, R9623 += 1 };
  s3 -> s3 [0, 65535] { R9725 += 1, R9680 += 1, R9681 += 1 };
  s3 -> s4 [84, 84] { R9725 += 1, R9681 += 1, R9622 += 1, R9623 += 1 };
  s3 -> s5 [84, 84] { R9725 += 1, R9681 += 1, R9622 += 1, R9623 += 1 };
  s3 -> s6 [84, 84] { R9725 += 1, R9681 += 1, R9623 += 1 };
  s3 -> s7 [84, 84] { R9725 += 1, R9681 += 1, R9623 += 1 };
  s3 -> s8 [85, 85] { R9725 += 1, R9681 += 1, R9623 += 1 };
  s3 -> s1 [85, 65535] { R9725 += 1, R9681 += 1, R9622 += 1, R9623 += 1 };
  s3 -> s2 [91, 65535] { R9725 += 1, R9681 += 1, R9623 += 1 };
  s5 -> s7 [0, 84] { R9725 += 1, R9681 += 1, R9623 += 1 };
  s5 -> s5 [0, 65535] { R9725 += 1, R9681 += 1, R9622 += 1, R9623 += 1 };
  s5 -> s10 [85, 85] { R9725 += 1, R9681 += 1, R9623 += 1 };
  s5 -> s7 [91, 65535] { R9725 += 1, R9681 += 1, R9623 += 1 };
  s7 -> s7 [0, 84] { R9725 += 1, R9681 += 1, R9623 += 1 };
  s7 -> s7 [0, 65535] { R9725 += 1, R9681 += 1 };
  s7 -> s10 [85, 85] { R9725 += 1, R9681 += 1, R9623 += 1 };
  s7 -> s7 [91, 65535] { R9725 += 1, R9681 += 1, R9623 += 1 };
  s8 -> s8 [0, 83] { R9725 += 1, R9681 += 1, R9623 += 1 };
  s8 -> s8 [0, 65535] { R9725 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [84, 84] { R9725 += 1, R9681 += 1 };
  s8 -> s11 [84, 84] { R9725 += 1, R9681 += 1 };
  s8 -> s8 [85, 85] { R9725 += 1, R9681 += 1, R9623 += 1 };
  s8 -> s8 [85, 65535] { R9725 += 1, R9681 += 1 };
  s8 -> s8 [91, 65535] { R9725 += 1, R9681 += 1, R9623 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 85] { R9725 += 1, R9681 += 1, R9623 += 1 };
  s10 -> s10 [0, 65535] { R9725 += 1, R9681 += 1 };
  s10 -> s12 [0, 65535] { R9725 += 1 };
  s10 -> s9 [0, 65535];
  s10 -> s10 [91, 65535] { R9725 += 1, R9681 += 1, R9623 += 1 };
  s11 -> s11 [0, 65535] { R9725 += 1 };
  s11 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R9725 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [116, 116];
  accepting s1;
};
};
synchronised {  // Automata constraining P62
automaton P62_0 {
  init s0;
  s0 -> s1 [117, 117];
  accepting s1;
};
};
constraint R1 = R9641 && R2 = R9725 && R20 - R9725 = -1 && R21 = R9725 && R22 - R9725 = -1 && R23 = R9725 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R8985 + -1*R8983 - R53 = 0 && R52 + R8984 + R8982 = 0 && R9640 = 0 && R9666 = 0 && R9667 = 0 && R9674 = 0 && R9675 = 0 && R9678 = 0 && R9679 = 0 && R9680 = 0 && R9681 = 0 && R9682 = 0 && R9683 = R9725 && R9684 = 0 && R9685 = R9725 && R9686 = 0 && R9687 = R9725 && R9688 = 0 && R9689 = R9725 && R9690 = 0 && R9691 = R9725 && R9692 = 0 && R9693 = R9725 && R9694 = 0 && R9695 = R9725 && R9696 = 0 && R9697 = R9725 && R9698 = 0 && R9699 = R9725 && R9700 = 0 && R9701 = R9725 && R9702 = 0 && R9703 = R9725 && R9704 = 0 && R9705 = R9725 && R9706 = 0 && R9707 = R9725 && R9708 = 0 && R9709 = R9725 && R9710 = 0 && R9711 = R9725 && R9712 = 0 && R9713 = R9725 && R9714 = 0 && R9715 = R9725 && R9716 = 0 && R9717 = R9725 && R9718 = 0 && R9719 = R9725 && R9720 = 0 && R9721 = R9725 && R9722 = 0 && R9723 = R9725 && R9724 = 0 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R8985 + -1*R8983 - R53 < 1 && -1 < R9641 && 0 < R9725 && (R48 + R7711 + R7708 != 0 || ((R42 + R72 + R70 != 0 || R43 + R73 + R71 + -1*R8985 + -1*R8983 - R53 = 0 || R53 + R8985 + R8983 < 1) && (R42 + R72 + R70 = 0 || R53 + R8985 + R8983 < 1))) && (R48 + R7711 + R7708 != 0 || ((R46 + R7709 + R7706 != 0 || R47 + R7710 + R7707 + -1*R8985 + -1*R8983 - R53 = 0 || R53 + R8985 + R8983 < 1) && (R46 + R7709 + R7706 = 0 || R53 + R8985 + R8983 < 1))) && (R9626 != 0 || R9627 = R9641 || (R17 = 0 && R9641 = 0)) && (R9628 != 0 || R9629 = R9641 || (R17 = 0 && R9641 = 0)) && (R9630 != 0 || R9631 = R9641 || (R17 = 0 && R9641 = 0)) && (R9632 != 0 || R9633 = R9641 || (R17 = 0 && R9641 = 0)) && (R9634 != 0 || R9635 = R9641 || (R17 = 0 && R9641 = 0)) && (R9636 != 0 || R9637 = R9641 || (R17 = 0 && R9641 = 0)) && (R9638 != 0 || R9639 = R9641 || (R17 = 0 && R9641 = 0)) && (R9642 != 0 || R9641 = R9643 || (R17 = 0 && R9641 = 0)) && (R9644 != 0 || R9641 = R9645 || (R17 = 0 && R9641 = 0)) && (R18 = 0 || (R9664 = 0 && R9665 = 0)) && (R18 = 0 || (R9668 = 0 && R9669 = 0)) && (R18 = 0 || (R9670 = 0 && R9671 = 0)) && (R18 = 0 || (R9672 = 0 && R9673 = 0)) && (R18 = 0 || (R9676 = 0 && R9677 = 0)) && (R19 = 0 || (R9646 = 0 && R9647 = 0)) && (R19 = 0 || (R9648 = 0 && R9649 = 0)) && (R19 = 0 || (R9650 = 0 && R9651 = 0)) && (R19 = 0 || (R9652 = 0 && R9653 = 0)) && (R19 = 0 || (R9654 = 0 && R9655 = 0)) && (R19 = 0 || (R9656 = 0 && R9657 = 0)) && (R19 = 0 || (R9658 = 0 && R9659 = 0)) && (R19 = 0 || (R9660 = 0 && R9661 = 0)) && (R19 = 0 || (R9662 = 0 && R9663 = 0)) && (R48 + R7711 + R7708 = 0 || (R42 + R72 + R70 = 0 && R43 + R73 + R71 + -1*R8985 + -1*R8983 - R53 = 0)) && (R48 + R7711 + R7708 = 0 || (R46 + R7709 + R7706 = 0 && R47 + R7710 + R7707 + -1*R8985 + -1*R8983 - R53 = 0)) && (R58 + R9413 + R9410 = 0 || (R56 + R9411 + R9408 = 0 && R57 + R9412 + R9409 = 0)) && (R58 + R9413 + R9410 = 0 || (R62 + R9624 + R9622 = 0 && R63 + R9625 + R9623 = 0)) && (R9626 = 0 || (R17 = 0 && R9641 = 0)) && (R9628 = 0 || (R17 = 0 && R9641 = 0)) && (R9630 = 0 || (R17 = 0 && R9641 = 0)) && (R9632 = 0 || (R17 = 0 && R9641 = 0)) && (R9634 = 0 || (R17 = 0 && R9641 = 0)) && (R9636 = 0 || (R17 = 0 && R9641 = 0)) && (R9638 = 0 || (R17 = 0 && R9641 = 0)) && (R9642 = 0 || (R17 = 0 && R9641 = 0)) && (R9644 = 0 || (R17 = 0 && R9641 = 0));
// End of Parikh automata intersection problem
