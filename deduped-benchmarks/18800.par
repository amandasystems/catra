// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R12, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R3890, R3891, R3892, R3893, R3894, R3895, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R6436, R6437, R6438, R6439, R66, R67, R68, R6862, R6863, R6864, R6865, R6866, R6867, R69, R6972, R6973, R6974, R6975, R6976, R6977, R6978, R6979, R6980, R6981, R6982, R6983, R6984, R6985, R6986, R6987, R6988, R6989, R6990, R6991, R6992, R6993, R6994, R6995, R6996, R6997, R6998, R6999, R70, R7000, R7001, R7002, R7003, R7004, R7005, R7006, R7007, R7008, R7009, R7010, R7011, R7012, R7013, R7014, R7015, R7016, R7017, R7018, R7019, R7020, R7021, R7022, R7023, R7024, R7025, R7026, R7027, R7028, R7029, R7030, R7031, R7032, R7033, R7034, R7035, R7036, R7037, R7038, R7039, R7040, R7041, R7042, R7043, R7044, R7045, R7046, R7047, R7048, R7049, R7050, R7051, R7052, R7053, R7054, R7055, R7056, R7057, R7058, R7059, R7060, R7061, R7062, R7063, R7064, R7065, R7066, R7067, R7068, R7069, R7070, R7071, R7072, R7073, R7074, R7075, R71, R72, R73, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [84, 84];
  s0 -> s0 [85, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [84, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 83];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [84, 84];
  s0 -> s1 [85, 65535];
  s1 -> s1 [0, 83];
  s1 -> s2 [84, 84];
  s1 -> s1 [85, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s1 [0, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s1 [0, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R6997 += 1, R19 += 1 };
  s0 -> s0 [0, 65535] { R6996 += 1, R6997 += 1 };
  s1 -> s1 [0, 65535] { R6997 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 83] { R6999 += 1 };
  s0 -> s0 [0, 65535] { R6998 += 1, R6999 += 1 };
  s0 -> s2 [84, 84] { R6999 += 1 };
  s0 -> s3 [84, 84] { R6999 += 1 };
  s0 -> s1 [86, 65535] { R6999 += 1 };
  s1 -> s1 [0, 83] { R6999 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R6999 += 1 };
  s1 -> s3 [84, 84] { R6999 += 1 };
  s1 -> s1 [86, 65535] { R6999 += 1 };
  s2 -> s2 [0, 84] { R6999 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [86, 65535] { R6999 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 83] { R7001 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R7000 += 1, R7001 += 1 };
  s0 -> s2 [84, 84] { R7001 += 1, R38 += 1 };
  s0 -> s3 [84, 84] { R7001 += 1, R38 += 1 };
  s0 -> s1 [85, 65535] { R7001 += 1, R38 += 1 };
  s1 -> s1 [0, 83] { R7001 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R7001 += 1, R38 += 1 };
  s1 -> s3 [84, 84] { R7001 += 1, R38 += 1 };
  s1 -> s1 [85, 65535] { R7001 += 1, R38 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7001 += 1, R38 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 83] { R7003 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R7002 += 1, R7003 += 1 };
  s0 -> s2 [84, 84] { R7003 += 1, R40 += 1 };
  s0 -> s3 [84, 84] { R7003 += 1, R40 += 1 };
  s0 -> s1 [85, 65535] { R7003 += 1, R40 += 1 };
  s1 -> s1 [0, 83] { R7003 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R7003 += 1, R40 += 1 };
  s1 -> s3 [84, 84] { R7003 += 1, R40 += 1 };
  s1 -> s1 [85, 65535] { R7003 += 1, R40 += 1 };
  s2 -> s2 [0, 65535] { R7003 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 83] { R7005 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R7004 += 1, R7005 += 1 };
  s0 -> s2 [84, 84] { R7005 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [84, 84] { R7005 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [85, 65535] { R7005 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 83] { R7005 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R7005 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [84, 84] { R7005 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [85, 65535] { R7005 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535] { R7005 += 1, R42 += 1, R43 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 83] { R7007 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R7006 += 1, R7007 += 1 };
  s0 -> s2 [84, 84] { R7007 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [84, 84] { R7007 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [85, 65535] { R7007 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 83] { R7007 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R7007 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [84, 84] { R7007 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [85, 65535] { R7007 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535] { R7007 += 1, R46 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 83] { R7009 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R7008 += 1, R7009 += 1 };
  s0 -> s2 [84, 84] { R7009 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [84, 84] { R7009 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [85, 65535] { R7009 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 83] { R7009 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R7009 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [84, 84] { R7009 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [85, 65535] { R7009 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535] { R7009 += 1, R52 += 1, R53 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 83] { R7011 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R7010 += 1, R7011 += 1 };
  s0 -> s2 [84, 84] { R7011 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [84, 84] { R7011 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [85, 65535] { R7011 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 83] { R7011 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R7011 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [84, 84] { R7011 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [85, 65535] { R7011 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R7011 += 1, R56 += 1, R57 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 83] { R7013 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R7012 += 1, R7013 += 1 };
  s0 -> s2 [84, 84] { R7013 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [84, 84] { R7013 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [85, 65535] { R7013 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 83] { R7013 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R7013 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [84, 84] { R7013 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [85, 65535] { R7013 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7013 += 1, R62 += 1, R63 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 83] { R7033 += 1 };
  s0 -> s0 [0, 65535] { R7032 += 1, R7033 += 1 };
  s0 -> s2 [84, 84] { R7033 += 1 };
  s0 -> s1 [85, 65535] { R7033 += 1 };
  s1 -> s1 [0, 83] { R7033 += 1 };
  s1 -> s2 [84, 84] { R7033 += 1 };
  s1 -> s1 [85, 65535] { R7033 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R7033 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R7035 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R7034 += 1, R7035 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R7035 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 83] { R7037 += 1 };
  s0 -> s0 [0, 65535] { R7036 += 1, R7037 += 1 };
  s0 -> s2 [0, 65535] { R7037 += 1, R8 += 1 };
  s0 -> s3 [84, 84] { R7037 += 1 };
  s0 -> s1 [85, 65535] { R7037 += 1 };
  s1 -> s1 [0, 83] { R7037 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [84, 84] { R7037 += 1 };
  s1 -> s1 [85, 65535] { R7037 += 1 };
  s2 -> s1 [0, 83] { R7037 += 1 };
  s2 -> s2 [0, 65535] { R7037 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [84, 84] { R7037 += 1 };
  s2 -> s1 [85, 65535] { R7037 += 1 };
  s3 -> s3 [0, 65535] { R7037 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 83] { R7039 += 1, R6977 += 1 };
  s0 -> s2 [0, 65535] { R7039 += 1, R6976 += 1, R6977 += 1 };
  s0 -> s0 [0, 65535] { R7038 += 1, R7039 += 1 };
  s0 -> s1 [85, 65535] { R7039 += 1, R6977 += 1 };
  s1 -> s1 [0, 83] { R7039 += 1, R6977 += 1 };
  s1 -> s1 [0, 65535] { R7039 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [85, 65535] { R7039 += 1, R6977 += 1 };
  s2 -> s1 [0, 83] { R7039 += 1, R6977 += 1 };
  s2 -> s2 [0, 65535] { R7039 += 1, R6976 += 1, R6977 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [85, 65535] { R7039 += 1, R6977 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R7041 += 1, R6979 += 1, R17 += 1 };
  s0 -> s2 [0, 65535] { R7041 += 1, R6978 += 1, R6979 += 1 };
  s0 -> s0 [0, 65535] { R7040 += 1, R7041 += 1 };
  s1 -> s1 [0, 65535] { R7041 += 1, R6979 += 1, R17 += 1 };
  s1 -> s4 [0, 65535] { R7041 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R7041 += 1, R6979 += 1, R17 += 1 };
  s2 -> s2 [0, 65535] { R7041 += 1, R6978 += 1, R6979 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7041 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s0 [0, 65535] { R7042 += 1, R7043 += 1 };
  s0 -> s1 [0, 65535] { R7043 += 1, R6981 += 1 };
  s0 -> s2 [0, 65535] { R7043 += 1, R6980 += 1, R6981 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R7043 += 1 };
  s1 -> s1 [0, 65535] { R7043 += 1, R6981 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R7043 += 1, R6981 += 1 };
  s2 -> s2 [0, 65535] { R7043 += 1, R6980 += 1, R6981 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7043 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_23 {
  init s0;
  s0 -> s0 [0, 65535] { R7044 += 1, R7045 += 1 };
  s0 -> s1 [0, 65535] { R7045 += 1, R6982 += 1, R6983 += 1 };
  s0 -> s2 [0, 65535] { R7045 += 1, R6983 += 1, R67 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R7045 += 1, R6982 += 1, R6983 += 1 };
  s1 -> s2 [0, 65535] { R7045 += 1, R6983 += 1, R67 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R7045 += 1 };
  s2 -> s2 [0, 65535] { R7045 += 1, R6983 += 1, R67 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7045 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 84] { R7047 += 1, R6985 += 1 };
  s0 -> s2 [0, 65535] { R7047 += 1, R6985 += 1, R69 += 1 };
  s0 -> s0 [0, 65535] { R7046 += 1, R7047 += 1 };
  s0 -> s3 [0, 65535] { R7047 += 1, R6984 += 1, R6985 += 1 };
  s0 -> s1 [86, 65535] { R7047 += 1, R6985 += 1 };
  s1 -> s1 [0, 84] { R7047 += 1, R6985 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R7047 += 1 };
  s1 -> s1 [86, 65535] { R7047 += 1, R6985 += 1 };
  s2 -> s1 [0, 84] { R7047 += 1, R6985 += 1 };
  s2 -> s5 [0, 65535] { R7047 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R7047 += 1, R6985 += 1, R69 += 1 };
  s2 -> s1 [86, 65535] { R7047 += 1, R6985 += 1 };
  s3 -> s1 [0, 84] { R7047 += 1, R6985 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R7047 += 1, R6985 += 1, R69 += 1 };
  s3 -> s3 [0, 65535] { R7047 += 1, R6984 += 1, R6985 += 1 };
  s3 -> s1 [86, 65535] { R7047 += 1, R6985 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R7047 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 84] { R7049 += 1, R6987 += 1, R73 += 1 };
  s0 -> s2 [0, 65535] { R7049 += 1, R6986 += 1, R6987 += 1 };
  s0 -> s0 [0, 65535] { R7048 += 1, R7049 += 1 };
  s0 -> s3 [0, 65535] { R7049 += 1, R6987 += 1, R72 += 1, R73 += 1 };
  s0 -> s1 [86, 65535] { R7049 += 1, R6987 += 1, R73 += 1 };
  s1 -> s1 [0, 84] { R7049 += 1, R6987 += 1, R73 += 1 };
  s1 -> s1 [0, 65535] { R7049 += 1, R6987 += 1 };
  s1 -> s4 [0, 65535] { R7049 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [86, 65535] { R7049 += 1, R6987 += 1, R73 += 1 };
  s2 -> s1 [0, 84] { R7049 += 1, R6987 += 1, R73 += 1 };
  s2 -> s2 [0, 65535] { R7049 += 1, R6986 += 1, R6987 += 1 };
  s2 -> s3 [0, 65535] { R7049 += 1, R6987 += 1, R72 += 1, R73 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [86, 65535] { R7049 += 1, R6987 += 1, R73 += 1 };
  s3 -> s1 [0, 84] { R7049 += 1, R6987 += 1, R73 += 1 };
  s3 -> s4 [0, 65535] { R7049 += 1 };
  s3 -> s3 [0, 65535] { R7049 += 1, R6987 += 1, R72 += 1, R73 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [86, 65535] { R7049 += 1, R6987 += 1, R73 += 1 };
  s4 -> s4 [0, 65535] { R7049 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R7051 += 1, R6988 += 1, R6989 += 1 };
  s0 -> s2 [0, 65535] { R7051 += 1, R6989 += 1 };
  s0 -> s3 [0, 65535] { R7051 += 1, R6989 += 1, R3894 += 1, R3895 += 1 };
  s0 -> s0 [0, 65535] { R7050 += 1, R7051 += 1 };
  s1 -> s1 [0, 65535] { R7051 += 1, R6988 += 1, R6989 += 1 };
  s1 -> s2 [0, 65535] { R7051 += 1, R6989 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R7051 += 1, R6989 += 1, R3894 += 1, R3895 += 1 };
  s2 -> s4 [0, 65535] { R7051 += 1 };
  s2 -> s2 [0, 65535] { R7051 += 1, R6989 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s4 [0, 65535] { R7051 += 1 };
  s3 -> s2 [0, 65535] { R7051 += 1, R6989 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R7051 += 1, R6989 += 1, R3894 += 1, R3895 += 1 };
  s4 -> s4 [0, 65535] { R7051 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 85] { R7053 += 1, R6991 += 1, R6439 += 1 };
  s0 -> s0 [0, 65535] { R7052 += 1, R7053 += 1 };
  s0 -> s2 [0, 65535] { R7053 += 1, R6990 += 1, R6991 += 1 };
  s0 -> s3 [90, 90] { R7053 += 1, R6991 += 1, R6439 += 1 };
  s0 -> s1 [91, 65535] { R7053 += 1, R6991 += 1, R6439 += 1 };
  s1 -> s1 [0, 85] { R7053 += 1, R6991 += 1, R6439 += 1 };
  s1 -> s3 [90, 90] { R7053 += 1, R6991 += 1, R6439 += 1 };
  s1 -> s1 [91, 65535] { R7053 += 1, R6991 += 1, R6439 += 1 };
  s2 -> s1 [0, 85] { R7053 += 1, R6991 += 1, R6439 += 1 };
  s2 -> s2 [0, 65535] { R7053 += 1, R6990 += 1, R6991 += 1 };
  s2 -> s3 [90, 90] { R7053 += 1, R6991 += 1, R6439 += 1 };
  s2 -> s1 [91, 65535] { R7053 += 1, R6991 += 1, R6439 += 1 };
  s3 -> s3 [0, 85] { R7053 += 1, R6991 += 1, R6439 += 1 };
  s3 -> s4 [0, 65535] { R7053 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R7053 += 1, R6991 += 1 };
  s3 -> s3 [90, 65535] { R7053 += 1, R6991 += 1, R6439 += 1 };
  s4 -> s4 [0, 65535] { R7053 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R7055 += 1, R6992 += 1, R6993 += 1 };
  s0 -> s0 [0, 65535] { R7054 += 1, R7055 += 1 };
  s0 -> s2 [0, 65535] { R7055 += 1, R6993 += 1, R6866 += 1, R6867 += 1 };
  s0 -> s3 [0, 65535] { R7055 += 1, R6993 += 1 };
  s1 -> s1 [0, 65535] { R7055 += 1, R6992 += 1, R6993 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R7055 += 1, R6993 += 1, R6866 += 1, R6867 += 1 };
  s1 -> s3 [0, 65535] { R7055 += 1, R6993 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R7055 += 1, R6993 += 1, R6866 += 1, R6867 += 1 };
  s2 -> s3 [0, 65535] { R7055 += 1, R6993 += 1 };
  s2 -> s5 [0, 65535] { R7055 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7055 += 1, R6993 += 1 };
  s3 -> s5 [0, 65535] { R7055 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R7055 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 84] { R7057 += 1, R6995 += 1, R6975 += 1 };
  s0 -> s0 [0, 65535] { R7056 += 1, R7057 += 1 };
  s0 -> s2 [0, 65535] { R7057 += 1, R6994 += 1, R6995 += 1 };
  s0 -> s1 [0, 65535] { R7057 += 1, R6995 += 1 };
  s0 -> s3 [85, 85] { R7057 += 1, R6995 += 1, R6975 += 1 };
  s0 -> s4 [85, 85] { R7057 += 1, R6995 += 1, R6975 += 1 };
  s0 -> s1 [91, 65535] { R7057 += 1, R6995 += 1, R6975 += 1 };
  s1 -> s1 [0, 84] { R7057 += 1, R6995 += 1, R6975 += 1 };
  s1 -> s1 [0, 65535] { R7057 += 1, R6995 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R7057 += 1 };
  s1 -> s3 [85, 85] { R7057 += 1, R6995 += 1, R6975 += 1 };
  s1 -> s4 [85, 85] { R7057 += 1, R6995 += 1, R6975 += 1 };
  s1 -> s1 [91, 65535] { R7057 += 1, R6995 += 1, R6975 += 1 };
  s2 -> s1 [0, 84] { R7057 += 1, R6995 += 1, R6975 += 1 };
  s2 -> s2 [0, 65535] { R7057 += 1, R6994 += 1, R6995 += 1 };
  s2 -> s1 [0, 65535] { R7057 += 1, R6995 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [85, 85] { R7057 += 1, R6995 += 1, R6975 += 1 };
  s2 -> s4 [85, 85] { R7057 += 1, R6995 += 1, R6975 += 1 };
  s2 -> s1 [91, 65535] { R7057 += 1, R6995 += 1, R6975 += 1 };
  s3 -> s3 [0, 85] { R7057 += 1, R6995 += 1, R6975 += 1 };
  s3 -> s3 [0, 65535] { R7057 += 1, R6995 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R7057 += 1 };
  s3 -> s3 [91, 65535] { R7057 += 1, R6995 += 1, R6975 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R7057 += 1, R6995 += 1 };
  s4 -> s6 [0, 65535] { R7057 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7057 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R7059 += 1, R7014 += 1, R7015 += 1 };
  s0 -> s0 [0, 65535] { R7058 += 1, R7059 += 1 };
  s0 -> s2 [0, 65535] { R7059 += 1, R7015 += 1, R18 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R7059 += 1, R7014 += 1, R7015 += 1 };
  s1 -> s2 [0, 65535] { R7059 += 1, R7015 += 1, R18 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R7059 += 1 };
  s2 -> s2 [0, 65535] { R7059 += 1, R7015 += 1, R18 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7059 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 83] { R7061 += 1, R7017 += 1 };
  s0 -> s0 [0, 65535] { R7060 += 1, R7061 += 1 };
  s0 -> s2 [0, 65535] { R7061 += 1, R7016 += 1, R7017 += 1 };
  s0 -> s3 [84, 84] { R7061 += 1, R7017 += 1 };
  s0 -> s4 [84, 84] { R7061 += 1, R7017 += 1 };
  s0 -> s5 [85, 85] { R7061 += 1, R7017 += 1 };
  s0 -> s1 [86, 65535] { R7061 += 1, R7017 += 1 };
  s1 -> s1 [0, 83] { R7061 += 1, R7017 += 1 };
  s1 -> s3 [84, 84] { R7061 += 1, R7017 += 1 };
  s1 -> s4 [84, 84] { R7061 += 1, R7017 += 1 };
  s1 -> s5 [85, 85] { R7061 += 1, R7017 += 1 };
  s1 -> s1 [86, 65535] { R7061 += 1, R7017 += 1 };
  s2 -> s1 [0, 83] { R7061 += 1, R7017 += 1 };
  s2 -> s2 [0, 65535] { R7061 += 1, R7016 += 1, R7017 += 1 };
  s2 -> s3 [84, 84] { R7061 += 1, R7017 += 1 };
  s2 -> s4 [84, 84] { R7061 += 1, R7017 += 1 };
  s2 -> s5 [85, 85] { R7061 += 1, R7017 += 1 };
  s2 -> s1 [86, 65535] { R7061 += 1, R7017 += 1 };
  s3 -> s3 [0, 84] { R7061 += 1, R7017 += 1 };
  s3 -> s7 [85, 85] { R7061 += 1, R7017 += 1 };
  s3 -> s3 [86, 65535] { R7061 += 1, R7017 += 1 };
  s5 -> s5 [0, 83] { R7061 += 1, R7017 += 1 };
  s5 -> s5 [0, 65535] { R7061 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [84, 84] { R7061 += 1, R7017 += 1 };
  s5 -> s8 [84, 84] { R7061 += 1, R7017 += 1 };
  s5 -> s5 [85, 65535] { R7061 += 1, R7017 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R7061 += 1, R7017 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s9 [0, 65535] { R7061 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R7061 += 1 };
  s9 -> s6 [0, 65535];
  s9 -> s9 [0, 65535] { R7061 += 1 };
  accepting s8, s5, s9, s6, s7;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 83] { R7063 += 1, R7019 += 1, R66 += 1 };
  s0 -> s2 [0, 65535] { R7063 += 1, R7018 += 1, R7019 += 1 };
  s0 -> s0 [0, 65535] { R7062 += 1, R7063 += 1 };
  s0 -> s3 [84, 84] { R7063 += 1, R7019 += 1, R66 += 1 };
  s0 -> s4 [84, 84] { R7063 += 1, R7019 += 1, R66 += 1 };
  s0 -> s1 [85, 65535] { R7063 += 1, R7019 += 1, R66 += 1 };
  s1 -> s1 [0, 83] { R7063 += 1, R7019 += 1, R66 += 1 };
  s1 -> s1 [0, 65535] { R7063 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [84, 84] { R7063 += 1, R7019 += 1, R66 += 1 };
  s1 -> s4 [84, 84] { R7063 += 1, R7019 += 1, R66 += 1 };
  s1 -> s1 [85, 65535] { R7063 += 1, R7019 += 1, R66 += 1 };
  s2 -> s1 [0, 83] { R7063 += 1, R7019 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R7063 += 1, R7018 += 1, R7019 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [84, 84] { R7063 += 1, R7019 += 1, R66 += 1 };
  s2 -> s4 [84, 84] { R7063 += 1, R7019 += 1, R66 += 1 };
  s2 -> s1 [85, 65535] { R7063 += 1, R7019 += 1, R66 += 1 };
  s3 -> s3 [0, 65535] { R7063 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R7063 += 1, R7019 += 1, R66 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R7063 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7063 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 83] { R7065 += 1, R7021 += 1, R68 += 1 };
  s0 -> s2 [0, 65535] { R7065 += 1, R7020 += 1, R7021 += 1 };
  s0 -> s0 [0, 65535] { R7064 += 1, R7065 += 1 };
  s0 -> s3 [84, 84] { R7065 += 1, R7021 += 1, R68 += 1 };
  s0 -> s4 [84, 84] { R7065 += 1, R7021 += 1, R68 += 1 };
  s0 -> s1 [85, 65535] { R7065 += 1, R7021 += 1, R68 += 1 };
  s1 -> s1 [0, 83] { R7065 += 1, R7021 += 1, R68 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R7065 += 1 };
  s1 -> s3 [84, 84] { R7065 += 1, R7021 += 1, R68 += 1 };
  s1 -> s4 [84, 84] { R7065 += 1, R7021 += 1, R68 += 1 };
  s1 -> s1 [85, 65535] { R7065 += 1, R7021 += 1, R68 += 1 };
  s2 -> s1 [0, 83] { R7065 += 1, R7021 += 1, R68 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R7065 += 1, R7020 += 1, R7021 += 1 };
  s2 -> s3 [84, 84] { R7065 += 1, R7021 += 1, R68 += 1 };
  s2 -> s4 [84, 84] { R7065 += 1, R7021 += 1, R68 += 1 };
  s2 -> s1 [85, 65535] { R7065 += 1, R7021 += 1, R68 += 1 };
  s3 -> s6 [0, 65535] { R7065 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R7065 += 1, R7021 += 1, R68 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R7065 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7065 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 83] { R7067 += 1, R7023 += 1, R70 += 1, R71 += 1 };
  s0 -> s2 [0, 65535] { R7067 += 1, R7022 += 1, R7023 += 1 };
  s0 -> s0 [0, 65535] { R7066 += 1, R7067 += 1 };
  s0 -> s3 [84, 84] { R7067 += 1, R7023 += 1, R70 += 1, R71 += 1 };
  s0 -> s4 [84, 84] { R7067 += 1, R7023 += 1, R70 += 1, R71 += 1 };
  s0 -> s1 [85, 65535] { R7067 += 1, R7023 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 83] { R7067 += 1, R7023 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 65535] { R7067 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [84, 84] { R7067 += 1, R7023 += 1, R70 += 1, R71 += 1 };
  s1 -> s4 [84, 84] { R7067 += 1, R7023 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [85, 65535] { R7067 += 1, R7023 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [0, 83] { R7067 += 1, R7023 += 1, R70 += 1, R71 += 1 };
  s2 -> s2 [0, 65535] { R7067 += 1, R7022 += 1, R7023 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [84, 84] { R7067 += 1, R7023 += 1, R70 += 1, R71 += 1 };
  s2 -> s4 [84, 84] { R7067 += 1, R7023 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [85, 65535] { R7067 += 1, R7023 += 1, R70 += 1, R71 += 1 };
  s3 -> s3 [0, 65535] { R7067 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R7067 += 1, R7023 += 1, R70 += 1, R71 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R7067 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7067 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 83] { R7069 += 1, R7025 += 1, R3891 += 1, R3892 += 1 };
  s0 -> s2 [0, 83] { R7069 += 1, R7025 += 1, R3890 += 1, R3891 += 1 };
  s0 -> s0 [0, 65535] { R7068 += 1, R7069 += 1 };
  s0 -> s3 [0, 65535] { R7069 += 1, R7024 += 1, R7025 += 1 };
  s0 -> s4 [84, 84] { R7069 += 1, R7025 += 1, R3890 += 1, R3891 += 1 };
  s0 -> s5 [84, 84] { R7069 += 1, R7025 += 1, R3891 += 1, R3892 += 1 };
  s0 -> s6 [84, 84] { R7069 += 1, R7025 += 1, R3891 += 1, R3892 += 1 };
  s0 -> s7 [84, 84] { R7069 += 1, R7025 += 1, R3890 += 1, R3891 += 1 };
  s0 -> s1 [85, 65535] { R7069 += 1, R7025 += 1, R3891 += 1, R3892 += 1 };
  s0 -> s2 [85, 65535] { R7069 += 1, R7025 += 1, R3890 += 1, R3891 += 1 };
  s1 -> s1 [0, 83] { R7069 += 1, R7025 += 1, R3891 += 1, R3892 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s1 [0, 65535] { R7069 += 1 };
  s1 -> s5 [84, 84] { R7069 += 1, R7025 += 1, R3891 += 1, R3892 += 1 };
  s1 -> s6 [84, 84] { R7069 += 1, R7025 += 1, R3891 += 1, R3892 += 1 };
  s1 -> s1 [85, 65535] { R7069 += 1, R7025 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s1 [0, 83] { R7069 += 1, R7025 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s2 [0, 83] { R7069 += 1, R7025 += 1, R3890 += 1, R3891 += 1 };
  s2 -> s4 [84, 84] { R7069 += 1, R7025 += 1, R3890 += 1, R3891 += 1 };
  s2 -> s5 [84, 84] { R7069 += 1, R7025 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s6 [84, 84] { R7069 += 1, R7025 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s7 [84, 84] { R7069 += 1, R7025 += 1, R3890 += 1, R3891 += 1 };
  s2 -> s1 [85, 65535] { R7069 += 1, R7025 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s2 [85, 65535] { R7069 += 1, R7025 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s1 [0, 83] { R7069 += 1, R7025 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s2 [0, 83] { R7069 += 1, R7025 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s3 [0, 65535] { R7069 += 1, R7024 += 1, R7025 += 1 };
  s3 -> s4 [84, 84] { R7069 += 1, R7025 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s5 [84, 84] { R7069 += 1, R7025 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s6 [84, 84] { R7069 += 1, R7025 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s7 [84, 84] { R7069 += 1, R7025 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s1 [85, 65535] { R7069 += 1, R7025 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s2 [85, 65535] { R7069 += 1, R7025 += 1, R3890 += 1, R3891 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s5 [0, 65535] { R7069 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s9 [0, 65535] { R7069 += 1 };
  s6 -> s6 [0, 65535] { R7069 += 1, R7025 += 1, R3891 += 1, R3892 += 1 };
  s7 -> s6 [0, 65535] { R7069 += 1, R7025 += 1, R3891 += 1, R3892 += 1 };
  s7 -> s7 [0, 65535] { R7069 += 1, R7025 += 1, R3890 += 1, R3891 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R7069 += 1 };
  accepting s8, s5, s9, s6, s1;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 83] { R7071 += 1, R7027 += 1, R6436 += 1, R6437 += 1 };
  s0 -> s2 [0, 83] { R7071 += 1, R7027 += 1, R6437 += 1 };
  s0 -> s0 [0, 65535] { R7070 += 1, R7071 += 1 };
  s0 -> s3 [0, 65535] { R7071 += 1, R7026 += 1, R7027 += 1 };
  s0 -> s4 [84, 84] { R7071 += 1, R7027 += 1, R6437 += 1 };
  s0 -> s5 [84, 84] { R7071 += 1, R7027 += 1, R6437 += 1 };
  s0 -> s6 [84, 84] { R7071 += 1, R7027 += 1, R6436 += 1, R6437 += 1 };
  s0 -> s7 [84, 84] { R7071 += 1, R7027 += 1, R6436 += 1, R6437 += 1 };
  s0 -> s2 [85, 85] { R7071 += 1, R7027 += 1, R6437 += 1 };
  s0 -> s1 [85, 65535] { R7071 += 1, R7027 += 1, R6436 += 1, R6437 += 1 };
  s0 -> s2 [91, 65535] { R7071 += 1, R7027 += 1, R6437 += 1 };
  s1 -> s1 [0, 83] { R7071 += 1, R7027 += 1, R6436 += 1, R6437 += 1 };
  s1 -> s2 [0, 83] { R7071 += 1, R7027 += 1, R6437 += 1 };
  s1 -> s4 [84, 84] { R7071 += 1, R7027 += 1, R6437 += 1 };
  s1 -> s5 [84, 84] { R7071 += 1, R7027 += 1, R6437 += 1 };
  s1 -> s6 [84, 84] { R7071 += 1, R7027 += 1, R6436 += 1, R6437 += 1 };
  s1 -> s7 [84, 84] { R7071 += 1, R7027 += 1, R6436 += 1, R6437 += 1 };
  s1 -> s2 [85, 85] { R7071 += 1, R7027 += 1, R6437 += 1 };
  s1 -> s1 [85, 65535] { R7071 += 1, R7027 += 1, R6436 += 1, R6437 += 1 };
  s1 -> s2 [91, 65535] { R7071 += 1, R7027 += 1, R6437 += 1 };
  s2 -> s2 [0, 83] { R7071 += 1, R7027 += 1, R6437 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R7071 += 1 };
  s2 -> s4 [84, 84] { R7071 += 1, R7027 += 1, R6437 += 1 };
  s2 -> s5 [84, 84] { R7071 += 1, R7027 += 1, R6437 += 1 };
  s2 -> s2 [85, 85] { R7071 += 1, R7027 += 1, R6437 += 1 };
  s2 -> s2 [91, 65535] { R7071 += 1, R7027 += 1, R6437 += 1 };
  s3 -> s1 [0, 83] { R7071 += 1, R7027 += 1, R6436 += 1, R6437 += 1 };
  s3 -> s2 [0, 83] { R7071 += 1, R7027 += 1, R6437 += 1 };
  s3 -> s3 [0, 65535] { R7071 += 1, R7026 += 1, R7027 += 1 };
  s3 -> s4 [84, 84] { R7071 += 1, R7027 += 1, R6437 += 1 };
  s3 -> s5 [84, 84] { R7071 += 1, R7027 += 1, R6437 += 1 };
  s3 -> s6 [84, 84] { R7071 += 1, R7027 += 1, R6436 += 1, R6437 += 1 };
  s3 -> s7 [84, 84] { R7071 += 1, R7027 += 1, R6436 += 1, R6437 += 1 };
  s3 -> s2 [85, 85] { R7071 += 1, R7027 += 1, R6437 += 1 };
  s3 -> s1 [85, 65535] { R7071 += 1, R7027 += 1, R6436 += 1, R6437 += 1 };
  s3 -> s2 [91, 65535] { R7071 += 1, R7027 += 1, R6437 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s4 [0, 65535] { R7071 += 1 };
  s5 -> s5 [0, 85] { R7071 += 1, R7027 += 1, R6437 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s5 [0, 65535] { R7071 += 1 };
  s5 -> s5 [91, 65535] { R7071 += 1, R7027 += 1, R6437 += 1 };
  s6 -> s5 [0, 85] { R7071 += 1, R7027 += 1, R6437 += 1 };
  s6 -> s6 [0, 65535] { R7071 += 1, R7027 += 1, R6436 += 1, R6437 += 1 };
  s6 -> s5 [91, 65535] { R7071 += 1, R7027 += 1, R6437 += 1 };
  s8 -> s8 [0, 65535];
  accepting s2, s4, s5, s8;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 83] { R7073 += 1, R7029 += 1, R6862 += 1, R6863 += 1 };
  s0 -> s2 [0, 83] { R7073 += 1, R7029 += 1, R6863 += 1, R6864 += 1 };
  s0 -> s0 [0, 65535] { R7072 += 1, R7073 += 1 };
  s0 -> s3 [0, 65535] { R7073 += 1, R7028 += 1, R7029 += 1 };
  s0 -> s4 [84, 84] { R7073 += 1, R7029 += 1, R6863 += 1, R6864 += 1 };
  s0 -> s5 [84, 84] { R7073 += 1, R7029 += 1, R6862 += 1, R6863 += 1 };
  s0 -> s6 [84, 84] { R7073 += 1, R7029 += 1, R6863 += 1, R6864 += 1 };
  s0 -> s7 [84, 84] { R7073 += 1, R7029 += 1, R6862 += 1, R6863 += 1 };
  s0 -> s1 [85, 65535] { R7073 += 1, R7029 += 1, R6862 += 1, R6863 += 1 };
  s0 -> s2 [85, 65535] { R7073 += 1, R7029 += 1, R6863 += 1, R6864 += 1 };
  s1 -> s1 [0, 83] { R7073 += 1, R7029 += 1, R6862 += 1, R6863 += 1 };
  s1 -> s2 [0, 83] { R7073 += 1, R7029 += 1, R6863 += 1, R6864 += 1 };
  s1 -> s4 [84, 84] { R7073 += 1, R7029 += 1, R6863 += 1, R6864 += 1 };
  s1 -> s5 [84, 84] { R7073 += 1, R7029 += 1, R6862 += 1, R6863 += 1 };
  s1 -> s6 [84, 84] { R7073 += 1, R7029 += 1, R6863 += 1, R6864 += 1 };
  s1 -> s7 [84, 84] { R7073 += 1, R7029 += 1, R6862 += 1, R6863 += 1 };
  s1 -> s1 [85, 65535] { R7073 += 1, R7029 += 1, R6862 += 1, R6863 += 1 };
  s1 -> s2 [85, 65535] { R7073 += 1, R7029 += 1, R6863 += 1, R6864 += 1 };
  s2 -> s2 [0, 83] { R7073 += 1, R7029 += 1, R6863 += 1, R6864 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R7073 += 1 };
  s2 -> s4 [84, 84] { R7073 += 1, R7029 += 1, R6863 += 1, R6864 += 1 };
  s2 -> s6 [84, 84] { R7073 += 1, R7029 += 1, R6863 += 1, R6864 += 1 };
  s2 -> s2 [85, 65535] { R7073 += 1, R7029 += 1, R6863 += 1, R6864 += 1 };
  s3 -> s1 [0, 83] { R7073 += 1, R7029 += 1, R6862 += 1, R6863 += 1 };
  s3 -> s2 [0, 83] { R7073 += 1, R7029 += 1, R6863 += 1, R6864 += 1 };
  s3 -> s3 [0, 65535] { R7073 += 1, R7028 += 1, R7029 += 1 };
  s3 -> s4 [84, 84] { R7073 += 1, R7029 += 1, R6863 += 1, R6864 += 1 };
  s3 -> s5 [84, 84] { R7073 += 1, R7029 += 1, R6862 += 1, R6863 += 1 };
  s3 -> s6 [84, 84] { R7073 += 1, R7029 += 1, R6863 += 1, R6864 += 1 };
  s3 -> s7 [84, 84] { R7073 += 1, R7029 += 1, R6862 += 1, R6863 += 1 };
  s3 -> s1 [85, 65535] { R7073 += 1, R7029 += 1, R6862 += 1, R6863 += 1 };
  s3 -> s2 [85, 65535] { R7073 += 1, R7029 += 1, R6863 += 1, R6864 += 1 };
  s4 -> s4 [0, 65535] { R7073 += 1, R7029 += 1, R6863 += 1, R6864 += 1 };
  s4 -> s9 [0, 65535] { R7073 += 1 };
  s4 -> s8 [0, 65535];
  s5 -> s4 [0, 65535] { R7073 += 1, R7029 += 1, R6863 += 1, R6864 += 1 };
  s5 -> s5 [0, 65535] { R7073 += 1, R7029 += 1, R6862 += 1, R6863 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R7073 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R7073 += 1 };
  s9 -> s8 [0, 65535];
  accepting s4, s8, s2, s9, s6;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 83] { R7075 += 1, R7031 += 1, R6972 += 1, R6973 += 1 };
  s0 -> s2 [0, 83] { R7075 += 1, R7031 += 1, R6973 += 1 };
  s0 -> s0 [0, 65535] { R7074 += 1, R7075 += 1 };
  s0 -> s3 [0, 65535] { R7075 += 1, R7030 += 1, R7031 += 1 };
  s0 -> s4 [84, 84] { R7075 += 1, R7031 += 1, R6973 += 1 };
  s0 -> s5 [84, 84] { R7075 += 1, R7031 += 1, R6972 += 1, R6973 += 1 };
  s0 -> s6 [84, 84] { R7075 += 1, R7031 += 1, R6972 += 1, R6973 += 1 };
  s0 -> s7 [84, 84] { R7075 += 1, R7031 += 1, R6973 += 1 };
  s0 -> s1 [85, 65535] { R7075 += 1, R7031 += 1, R6972 += 1, R6973 += 1 };
  s0 -> s2 [91, 65535] { R7075 += 1, R7031 += 1, R6973 += 1 };
  s1 -> s1 [0, 83] { R7075 += 1, R7031 += 1, R6972 += 1, R6973 += 1 };
  s1 -> s2 [0, 83] { R7075 += 1, R7031 += 1, R6973 += 1 };
  s1 -> s4 [84, 84] { R7075 += 1, R7031 += 1, R6973 += 1 };
  s1 -> s5 [84, 84] { R7075 += 1, R7031 += 1, R6972 += 1, R6973 += 1 };
  s1 -> s6 [84, 84] { R7075 += 1, R7031 += 1, R6972 += 1, R6973 += 1 };
  s1 -> s7 [84, 84] { R7075 += 1, R7031 += 1, R6973 += 1 };
  s1 -> s1 [85, 65535] { R7075 += 1, R7031 += 1, R6972 += 1, R6973 += 1 };
  s1 -> s2 [91, 65535] { R7075 += 1, R7031 += 1, R6973 += 1 };
  s2 -> s2 [0, 83] { R7075 += 1, R7031 += 1, R6973 += 1 };
  s2 -> s2 [0, 65535] { R7075 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s4 [84, 84] { R7075 += 1, R7031 += 1 };
  s2 -> s7 [84, 84] { R7075 += 1, R7031 += 1 };
  s2 -> s2 [85, 65535] { R7075 += 1, R7031 += 1 };
  s2 -> s2 [91, 65535] { R7075 += 1, R7031 += 1, R6973 += 1 };
  s3 -> s1 [0, 83] { R7075 += 1, R7031 += 1, R6972 += 1, R6973 += 1 };
  s3 -> s2 [0, 83] { R7075 += 1, R7031 += 1, R6973 += 1 };
  s3 -> s3 [0, 65535] { R7075 += 1, R7030 += 1, R7031 += 1 };
  s3 -> s4 [84, 84] { R7075 += 1, R7031 += 1, R6973 += 1 };
  s3 -> s5 [84, 84] { R7075 += 1, R7031 += 1, R6972 += 1, R6973 += 1 };
  s3 -> s6 [84, 84] { R7075 += 1, R7031 += 1, R6972 += 1, R6973 += 1 };
  s3 -> s7 [84, 84] { R7075 += 1, R7031 += 1, R6973 += 1 };
  s3 -> s1 [85, 65535] { R7075 += 1, R7031 += 1, R6972 += 1, R6973 += 1 };
  s3 -> s2 [91, 65535] { R7075 += 1, R7031 += 1, R6973 += 1 };
  s4 -> s4 [0, 84] { R7075 += 1, R7031 += 1, R6973 += 1 };
  s4 -> s4 [0, 65535] { R7075 += 1, R7031 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s9 [0, 65535] { R7075 += 1 };
  s4 -> s4 [91, 65535] { R7075 += 1, R7031 += 1, R6973 += 1 };
  s5 -> s4 [0, 84] { R7075 += 1, R7031 += 1, R6973 += 1 };
  s5 -> s5 [0, 65535] { R7075 += 1, R7031 += 1, R6972 += 1, R6973 += 1 };
  s5 -> s4 [91, 65535] { R7075 += 1, R7031 += 1, R6973 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R7075 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R7075 += 1 };
  accepting s4, s8, s2, s9, s7;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [116, 116];
  accepting s1;
};
};
synchronised {  // Automata constraining P62
automaton P62_0 {
  init s0;
  s0 -> s1 [117, 117];
  accepting s1;
};
};
constraint R1 = R6991 && R2 = R7075 && R20 - R7075 = -1 && R21 = R7075 && R22 - R7075 = -1 && R23 = R7075 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R6439 + -1*R6437 - R53 = 0 && R52 + R6438 + R6436 = 0 && R6990 = 0 && R7016 = 0 && R7017 = 0 && R7024 = 0 && R7025 = 0 && R7026 = 0 && R7027 = 0 && R7028 = 0 && R7029 = 0 && R7030 = 0 && R7031 = 0 && R7032 = 0 && R7033 = R7075 && R7034 = 0 && R7035 = R7075 && R7036 = 0 && R7037 = R7075 && R7038 = 0 && R7039 = R7075 && R7040 = 0 && R7041 = R7075 && R7042 = 0 && R7043 = R7075 && R7044 = 0 && R7045 = R7075 && R7046 = 0 && R7047 = R7075 && R7048 = 0 && R7049 = R7075 && R7050 = 0 && R7051 = R7075 && R7052 = 0 && R7053 = R7075 && R7054 = 0 && R7055 = R7075 && R7056 = 0 && R7057 = R7075 && R7058 = 0 && R7059 = R7075 && R7060 = 0 && R7061 = R7075 && R7062 = 0 && R7063 = R7075 && R7064 = 0 && R7065 = R7075 && R7066 = 0 && R7067 = R7075 && R7068 = 0 && R7069 = R7075 && R7070 = 0 && R7071 = R7075 && R7072 = 0 && R7073 = R7075 && R7074 = 0 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R6439 + -1*R6437 - R53 < 1 && -1 < R6991 && 0 < R7075 && (R48 + R3895 + R3892 != 0 || ((R42 + R72 + R70 != 0 || R43 + R73 + R71 + -1*R6439 + -1*R6437 - R53 = 0 || R53 + R6439 + R6437 < 1) && (R42 + R72 + R70 = 0 || R53 + R6439 + R6437 < 1))) && (R48 + R3895 + R3892 != 0 || ((R46 + R3893 + R3890 != 0 || R47 + R3894 + R3891 + -1*R6439 + -1*R6437 - R53 = 0 || R53 + R6439 + R6437 < 1) && (R46 + R3893 + R3890 = 0 || R53 + R6439 + R6437 < 1))) && (R6976 != 0 || R6977 = R6991 || (R17 = 0 && R6991 = 0)) && (R6978 != 0 || R6979 = R6991 || (R17 = 0 && R6991 = 0)) && (R6980 != 0 || R6981 = R6991 || (R17 = 0 && R6991 = 0)) && (R6982 != 0 || R6983 = R6991 || (R17 = 0 && R6991 = 0)) && (R6984 != 0 || R6985 = R6991 || (R17 = 0 && R6991 = 0)) && (R6986 != 0 || R6987 = R6991 || (R17 = 0 && R6991 = 0)) && (R6988 != 0 || R6989 = R6991 || (R17 = 0 && R6991 = 0)) && (R6992 != 0 || R6991 = R6993 || (R17 = 0 && R6991 = 0)) && (R6994 != 0 || R6991 = R6995 || (R17 = 0 && R6991 = 0)) && (R18 = 0 || (R7014 = 0 && R7015 = 0)) && (R18 = 0 || (R7018 = 0 && R7019 = 0)) && (R18 = 0 || (R7020 = 0 && R7021 = 0)) && (R18 = 0 || (R7022 = 0 && R7023 = 0)) && (R19 = 0 || (R6996 = 0 && R6997 = 0)) && (R19 = 0 || (R6998 = 0 && R6999 = 0)) && (R19 = 0 || (R7000 = 0 && R7001 = 0)) && (R19 = 0 || (R7002 = 0 && R7003 = 0)) && (R19 = 0 || (R7004 = 0 && R7005 = 0)) && (R19 = 0 || (R7006 = 0 && R7007 = 0)) && (R19 = 0 || (R7008 = 0 && R7009 = 0)) && (R19 = 0 || (R7010 = 0 && R7011 = 0)) && (R19 = 0 || (R7012 = 0 && R7013 = 0)) && (R48 + R3895 + R3892 = 0 || (R42 + R72 + R70 = 0 && R43 + R73 + R71 + -1*R6439 + -1*R6437 - R53 = 0)) && (R48 + R3895 + R3892 = 0 || (R46 + R3893 + R3890 = 0 && R47 + R3894 + R3891 + -1*R6439 + -1*R6437 - R53 = 0)) && (R58 + R6867 + R6864 = 0 || (R56 + R6865 + R6862 = 0 && R57 + R6866 + R6863 = 0)) && (R58 + R6867 + R6864 = 0 || (R62 + R6974 + R6972 = 0 && R63 + R6975 + R6973 = 0)) && (R6976 = 0 || (R17 = 0 && R6991 = 0)) && (R6978 = 0 || (R17 = 0 && R6991 = 0)) && (R6980 = 0 || (R17 = 0 && R6991 = 0)) && (R6982 = 0 || (R17 = 0 && R6991 = 0)) && (R6984 = 0 || (R17 = 0 && R6991 = 0)) && (R6986 = 0 || (R17 = 0 && R6991 = 0)) && (R6988 = 0 || (R17 = 0 && R6991 = 0)) && (R6992 = 0 || (R17 = 0 && R6991 = 0)) && (R6994 = 0 || (R17 = 0 && R6991 = 0));
// End of Parikh automata intersection problem
