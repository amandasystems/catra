// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R100, R101, R102, R103, R104, R105, R106, R107, R108, R109, R110, R111, R112, R113, R114, R115, R116, R117, R12, R13, R2, R3, R4, R5, R6, R66, R67, R68, R69, R7, R70, R71, R72, R73, R74, R75, R76, R77, R78, R79, R8, R80, R81, R82, R83, R84, R85, R86, R87, R88, R89, R9, R90, R91, R92, R93, R94, R95, R96, R97, R98, R99;
synchronised {  // Automata constraining value1
automaton value1_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 60];
  s0 -> s1 [61, 61];
  s0 -> s0 [62, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 65535];
  accepting s1;
};
automaton value1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton value1_2 {
  init s0;
  s0 -> s1 [0, 60] { R13 += 1 };
  s0 -> s0 [0, 65535] { R12 += 1, R13 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535] { R13 += 1 };
  s1 -> s1 [0, 60] { R13 += 1 };
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535] { R13 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value1_3 {
  init s0;
  s0 -> s1 [0, 65535] { R87 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R86 += 1, R87 += 1 };
  s1 -> s1 [0, 65535] { R87 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_4 {
  init s0;
  s0 -> s1 [0, 65535] { R101 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R100 += 1, R101 += 1 };
  s1 -> s1 [0, 65535] { R101 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_5 {
  init s0;
  s0 -> s1 [0, 65535] { R103 += 1, R82 += 1, R83 += 1 };
  s0 -> s0 [0, 65535] { R102 += 1, R103 += 1 };
  s0 -> s2 [10, 10] { R103 += 1, R83 += 1 };
  s1 -> s1 [0, 65535] { R103 += 1, R82 += 1, R83 += 1 };
  s1 -> s2 [10, 10] { R103 += 1, R83 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R103 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value1_6 {
  init s0;
  s0 -> s0 [0, 65535] { R104 += 1, R105 += 1 };
  s0 -> s1 [0, 65535] { R105 += 1, R85 += 1, R9 += 1 };
  s0 -> s2 [0, 65535] { R105 += 1, R84 += 1, R85 += 1 };
  s1 -> s4 [0, 65535] { R105 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R105 += 1, R85 += 1, R9 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R105 += 1, R85 += 1, R9 += 1 };
  s2 -> s2 [0, 65535] { R105 += 1, R84 += 1, R85 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R105 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_7 {
  init s0;
  s0 -> s1 [0, 64] { R107 += 1, R89 += 1 };
  s0 -> s0 [0, 65535] { R106 += 1, R107 += 1 };
  s0 -> s2 [0, 65535] { R107 += 1, R88 += 1, R89 += 1 };
  s0 -> s3 [88, 88] { R107 += 1, R89 += 1 };
  s0 -> s1 [89, 65535] { R107 += 1, R89 += 1 };
  s1 -> s1 [0, 64] { R107 += 1, R89 += 1 };
  s1 -> s3 [88, 88] { R107 += 1, R89 += 1 };
  s1 -> s1 [89, 65535] { R107 += 1, R89 += 1 };
  s2 -> s1 [0, 64] { R107 += 1, R89 += 1 };
  s2 -> s2 [0, 65535] { R107 += 1, R88 += 1, R89 += 1 };
  s2 -> s3 [88, 88] { R107 += 1, R89 += 1 };
  s2 -> s1 [89, 65535] { R107 += 1, R89 += 1 };
  s3 -> s3 [0, 64] { R107 += 1, R89 += 1 };
  s3 -> s3 [0, 65535] { R107 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [88, 65535] { R107 += 1, R89 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton value1_8 {
  init s0;
  s0 -> s0 [0, 65535] { R108 += 1, R109 += 1 };
  s0 -> s1 [0, 65535] { R109 += 1, R91 += 1, R0 += 1 };
  s0 -> s2 [0, 65535] { R109 += 1, R90 += 1, R91 += 1 };
  s1 -> s4 [0, 65535] { R109 += 1 };
  s1 -> s1 [0, 65535] { R109 += 1, R91 += 1, R0 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R109 += 1, R91 += 1, R0 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R109 += 1, R90 += 1, R91 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R109 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_9 {
  init s0;
  s0 -> s1 [0, 8] { R111 += 1, R93 += 1, R67 += 1 };
  s0 -> s2 [0, 65535] { R111 += 1, R92 += 1, R93 += 1 };
  s0 -> s0 [0, 65535] { R110 += 1, R111 += 1 };
  s0 -> s3 [0, 65535] { R111 += 1, R93 += 1, R66 += 1, R67 += 1 };
  s0 -> s4 [9, 13] { R111 += 1, R93 += 1, R67 += 1 };
  s0 -> s1 [14, 31] { R111 += 1, R93 += 1, R67 += 1 };
  s0 -> s4 [32, 32] { R111 += 1, R93 += 1, R67 += 1 };
  s0 -> s1 [33, 65535] { R111 += 1, R93 += 1, R67 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R111 += 1 };
  s1 -> s1 [0, 65535] { R111 += 1, R93 += 1, R67 += 1 };
  s1 -> s7 [0, 65535] { R111 += 1, R93 += 1 };
  s2 -> s1 [0, 8] { R111 += 1, R93 += 1, R67 += 1 };
  s2 -> s2 [0, 65535] { R111 += 1, R92 += 1, R93 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R111 += 1, R93 += 1, R66 += 1, R67 += 1 };
  s2 -> s4 [9, 13] { R111 += 1, R93 += 1, R67 += 1 };
  s2 -> s1 [14, 31] { R111 += 1, R93 += 1, R67 += 1 };
  s2 -> s4 [32, 32] { R111 += 1, R93 += 1, R67 += 1 };
  s2 -> s1 [33, 65535] { R111 += 1, R93 += 1, R67 += 1 };
  s3 -> s1 [0, 8] { R111 += 1, R93 += 1, R67 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R111 += 1 };
  s3 -> s3 [0, 65535] { R111 += 1, R93 += 1, R66 += 1, R67 += 1 };
  s3 -> s4 [9, 13] { R111 += 1, R93 += 1, R67 += 1 };
  s3 -> s1 [14, 31] { R111 += 1, R93 += 1, R67 += 1 };
  s3 -> s4 [32, 32] { R111 += 1, R93 += 1, R67 += 1 };
  s3 -> s1 [33, 65535] { R111 += 1, R93 += 1, R67 += 1 };
  s4 -> s1 [0, 65535] { R111 += 1, R93 += 1, R67 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R111 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R111 += 1 };
  s7 -> s7 [0, 65535] { R111 += 1, R93 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton value1_10 {
  init s0;
  s0 -> s0 [0, 65535] { R112 += 1, R113 += 1 };
  s0 -> s1 [0, 65535] { R113 += 1, R95 += 1, R69 += 1, R5 += 1 };
  s0 -> s2 [0, 65535] { R113 += 1, R95 += 1, R68 += 1, R69 += 1 };
  s0 -> s3 [0, 65535] { R113 += 1, R94 += 1, R95 += 1 };
  s1 -> s1 [0, 65535] { R113 += 1, R95 += 1, R69 += 1, R5 += 1 };
  s1 -> s6 [0, 65535] { R113 += 1, R95 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R113 += 1 };
  s2 -> s1 [0, 65535] { R113 += 1, R95 += 1, R69 += 1, R5 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R113 += 1 };
  s2 -> s2 [0, 65535] { R113 += 1, R95 += 1, R68 += 1, R69 += 1 };
  s3 -> s1 [0, 65535] { R113 += 1, R95 += 1, R69 += 1, R5 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R113 += 1, R95 += 1, R68 += 1, R69 += 1 };
  s3 -> s3 [0, 65535] { R113 += 1, R94 += 1, R95 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R113 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R113 += 1, R95 += 1 };
  s6 -> s5 [0, 65535] { R113 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value1_11 {
  init s0;
  s0 -> s1 [0, 8] { R115 += 1, R97 += 1, R71 += 1 };
  s0 -> s2 [0, 65535] { R115 += 1, R96 += 1, R97 += 1 };
  s0 -> s0 [0, 65535] { R114 += 1, R115 += 1 };
  s0 -> s3 [0, 65535] { R115 += 1, R97 += 1, R70 += 1, R71 += 1 };
  s0 -> s4 [9, 13] { R115 += 1, R97 += 1, R71 += 1 };
  s0 -> s1 [14, 31] { R115 += 1, R97 += 1, R71 += 1 };
  s0 -> s4 [32, 32] { R115 += 1, R97 += 1, R71 += 1 };
  s0 -> s1 [33, 65535] { R115 += 1, R97 += 1, R71 += 1 };
  s1 -> s1 [0, 65535] { R115 += 1, R97 += 1, R71 += 1 };
  s1 -> s7 [0, 65535] { R115 += 1, R97 += 1 };
  s1 -> s5 [0, 65535] { R115 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s1 [0, 8] { R115 += 1, R97 += 1, R71 += 1 };
  s2 -> s2 [0, 65535] { R115 += 1, R96 += 1, R97 += 1 };
  s2 -> s3 [0, 65535] { R115 += 1, R97 += 1, R70 += 1, R71 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s4 [9, 13] { R115 += 1, R97 += 1, R71 += 1 };
  s2 -> s1 [14, 31] { R115 += 1, R97 += 1, R71 += 1 };
  s2 -> s4 [32, 32] { R115 += 1, R97 += 1, R71 += 1 };
  s2 -> s1 [33, 65535] { R115 += 1, R97 += 1, R71 += 1 };
  s3 -> s1 [0, 8] { R115 += 1, R97 += 1, R71 += 1 };
  s3 -> s5 [0, 65535] { R115 += 1 };
  s3 -> s3 [0, 65535] { R115 += 1, R97 += 1, R70 += 1, R71 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s4 [9, 13] { R115 += 1, R97 += 1, R71 += 1 };
  s3 -> s1 [14, 31] { R115 += 1, R97 += 1, R71 += 1 };
  s3 -> s4 [32, 32] { R115 += 1, R97 += 1, R71 += 1 };
  s3 -> s1 [33, 65535] { R115 += 1, R97 += 1, R71 += 1 };
  s4 -> s1 [0, 65535] { R115 += 1, R97 += 1, R71 += 1 };
  s5 -> s5 [0, 65535] { R115 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R115 += 1, R97 += 1 };
  s7 -> s5 [0, 65535] { R115 += 1 };
  s7 -> s6 [0, 65535];
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton value1_12 {
  init s0;
  s0 -> s1 [0, 65535] { R117 += 1, R98 += 1, R99 += 1 };
  s0 -> s2 [0, 65535] { R117 += 1, R99 += 1, R73 += 1, R6 += 1 };
  s0 -> s3 [0, 65535] { R117 += 1, R99 += 1, R72 += 1, R73 += 1 };
  s0 -> s0 [0, 65535] { R116 += 1, R117 += 1 };
  s1 -> s1 [0, 65535] { R117 += 1, R98 += 1, R99 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R117 += 1, R99 += 1, R73 += 1, R6 += 1 };
  s1 -> s3 [0, 65535] { R117 += 1, R99 += 1, R72 += 1, R73 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R117 += 1, R99 += 1, R73 += 1, R6 += 1 };
  s2 -> s6 [0, 65535] { R117 += 1, R99 += 1 };
  s2 -> s5 [0, 65535] { R117 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R117 += 1, R99 += 1, R73 += 1, R6 += 1 };
  s3 -> s3 [0, 65535] { R117 += 1, R99 += 1, R72 += 1, R73 += 1 };
  s3 -> s5 [0, 65535] { R117 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R117 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R117 += 1, R99 += 1 };
  s6 -> s5 [0, 65535] { R117 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
synchronised {  // Automata constraining P22
automaton P22_0 {
  init s0;
  s0 -> s1 [9, 9];
  accepting s1;
};
};
synchronised {  // Automata constraining P21
automaton P21_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s0 [91, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R10 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 8] { R75 += 1 };
  s0 -> s0 [0, 65535] { R74 += 1, R75 += 1 };
  s0 -> s2 [9, 13] { R75 += 1 };
  s0 -> s1 [14, 31] { R75 += 1 };
  s0 -> s2 [32, 32] { R75 += 1 };
  s0 -> s1 [33, 65535] { R75 += 1 };
  s1 -> s1 [0, 65535] { R75 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R75 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_4 {
  init s0;
  s0 -> s0 [0, 65535] { R76 += 1, R77 += 1 };
  s0 -> s1 [0, 65535] { R77 += 1, R7 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R77 += 1, R7 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 8] { R79 += 1 };
  s0 -> s0 [0, 65535] { R78 += 1, R79 += 1 };
  s0 -> s2 [9, 13] { R79 += 1 };
  s0 -> s1 [14, 31] { R79 += 1 };
  s0 -> s2 [32, 32] { R79 += 1 };
  s0 -> s1 [33, 65535] { R79 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R79 += 1 };
  s2 -> s1 [0, 65535] { R79 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_6 {
  init s0;
  s0 -> s0 [0, 65535] { R80 += 1, R81 += 1 };
  s0 -> s1 [0, 65535] { R81 += 1, R8 += 1 };
  s1 -> s1 [0, 65535] { R81 += 1, R8 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
};
constraint R3 = R99 && R4 = R87 && R12 = 0 && R13 = R117 && R82 = 0 && R83 = 1 && R84 = 0 && R85 = 1 && R86 - R117 = 1 && R88 = 1 && R89 = R99 && R90 = 1 && R91 = R99 && R92 = 1 && R93 = R99 && R94 = 1 && R95 = R99 && R96 = 1 && R97 = R99 && R98 = 1 && R100 = 0 && R101 = R117 && R102 = 0 && R103 = R117 && R104 = 0 && R105 = R117 && R106 = 0 && R107 = R117 && R108 = 0 && R109 = R117 && R110 = 0 && R111 = R117 && R112 = 0 && R113 = R117 && R114 = 0 && R115 = R117 && R116 = 0 && R0 != 0 && R1 != 0 && R2 != 0 && R10 < 1 && R117 < R87 && 0 < R99 && -1 < R117 && (R5 != 0 || ((R0 != R67 || R66 - R67 = -1 || R67 < 0) && (R0 = R67 || R0 < 1))) && (R5 != 0 || ((R0 != R69 || R68 - R69 = -1 || R69 < 0) && (R0 = R69 || R0 < 1))) && (R7 != 0 || ((R2 != R75 || R74 - R75 = -1 || R75 < 0) && (R2 = R75 || R2 < 1))) && (R7 != 0 || ((R2 != R77 || R76 - R77 = -1 || R77 < 0) && (R2 = R77 || R2 < 1))) && (R70 != 0 || ((R6 != 0 || ((R0 != R71 || R71 = 1 || R71 < 0) && (R0 = R71 || R71 = 1 || R0 < 1))) && (R6 = 0 || ((R0 != R71 || R71 = 1 || R71 < 0) && (R71 != 1 || -1 < R0) && (R0 = R71 || R71 = 1))))) && (R72 != 0 || ((R6 != 0 || ((R0 != R73 || R73 = 1 || R73 < 0) && (R0 = R73 || R73 = 1 || R0 < 1))) && (R6 = 0 || ((R0 != R73 || R73 = 1 || R73 < 0) && (R73 != 1 || -1 < R0) && (R0 = R73 || R73 = 1))))) && (R78 != 0 || ((R8 != 0 || ((R2 != R79 || R79 = 1 || R79 < 0) && (R2 = R79 || R79 = 1 || R2 < 1))) && (R8 = 0 || ((R2 != R79 || R79 = 1 || R79 < 0) && (R79 != 1 || -1 < R2) && (R2 = R79 || R79 = 1))))) && (R80 != 0 || ((R8 != 0 || ((R2 != R81 || R81 = 1 || R81 < 0) && (R2 = R81 || R81 = 1 || R2 < 1))) && (R8 = 0 || ((R2 != R81 || R81 = 1 || R81 < 0) && (R81 != 1 || -1 < R2) && (R2 = R81 || R81 = 1))))) && (R5 = 0 || (R0 = R67 && R66 - R67 = -1)) && (R5 = 0 || (R0 = R69 && R68 - R69 = -1)) && (R7 = 0 || (R2 = R75 && R74 - R75 = -1)) && (R7 = 0 || (R2 = R77 && R76 - R77 = -1)) && (R70 = 0 || (R6 = 0 && R0 < 0)) && (R72 = 0 || (R6 = 0 && R0 < 0)) && (R78 = 0 || (R8 = 0 && R2 < 0)) && (R80 = 0 || (R8 = 0 && R2 < 0));
// End of Parikh automata intersection problem
