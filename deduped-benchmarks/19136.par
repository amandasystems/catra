// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R100, R101, R102, R103, R104, R105, R106, R107, R108, R109, R110, R111, R112, R113, R114, R115, R116, R117, R118, R119, R120, R121, R122, R123, R124, R125, R126, R127, R128, R129, R13, R130, R131, R132, R133, R134, R135, R136, R137, R138, R139, R14, R140, R141, R142, R143, R144, R145, R146, R147, R148, R149, R15, R150, R151, R152, R153, R154, R155, R156, R157, R158, R159, R16, R160, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R31, R32, R4, R5, R6, R7, R97, R98, R99;
synchronised {  // Automata constraining P27
automaton P27_0 {
  init s0;
  s0 -> s1 [10, 10];
  accepting s1;
};
};
synchronised {  // Automata constraining P48
automaton P48_0 {
  init s0;
  s0 -> s1 [109, 109];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R13 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s0 [0, 65535] { R25 += 1, R26 += 1 };
  s0 -> s1 [12, 12] { R26 += 1 };
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value2_4 {
  init s0;
  s0 -> s0 [0, 65535] { R27 += 1, R28 += 1 };
  s0 -> s1 [0, 65535] { R28 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R28 += 1, R5 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 8] { R30 += 1 };
  s0 -> s0 [0, 65535] { R29 += 1, R30 += 1 };
  s0 -> s2 [9, 13] { R30 += 1 };
  s0 -> s1 [14, 31] { R30 += 1 };
  s0 -> s2 [32, 32] { R30 += 1 };
  s0 -> s1 [33, 65535] { R30 += 1 };
  s1 -> s1 [0, 65535] { R30 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R30 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 65535] { R32 += 1, R6 += 1 };
  s0 -> s0 [0, 65535] { R31 += 1, R32 += 1 };
  s1 -> s1 [0, 65535] { R32 += 1, R6 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 64] { R128 += 1 };
  s0 -> s0 [0, 65535] { R127 += 1, R128 += 1 };
  s0 -> s2 [77, 77] { R128 += 1 };
  s0 -> s1 [78, 65535] { R128 += 1 };
  s1 -> s1 [0, 64] { R128 += 1 };
  s1 -> s2 [77, 77] { R128 += 1 };
  s1 -> s1 [78, 65535] { R128 += 1 };
  s2 -> s2 [0, 64] { R128 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [77, 65535] { R128 += 1 };
  accepting s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R130 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R129 += 1, R130 += 1 };
  s1 -> s1 [0, 65535] { R130 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 76] { R132 += 1 };
  s0 -> s2 [0, 65535] { R132 += 1, R10 += 1 };
  s0 -> s0 [0, 65535] { R131 += 1, R132 += 1 };
  s0 -> s3 [77, 77] { R132 += 1 };
  s0 -> s1 [78, 65535] { R132 += 1 };
  s1 -> s1 [0, 76] { R132 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [77, 77] { R132 += 1 };
  s1 -> s1 [78, 65535] { R132 += 1 };
  s2 -> s1 [0, 76] { R132 += 1 };
  s2 -> s2 [0, 65535] { R132 += 1, R10 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [77, 77] { R132 += 1 };
  s2 -> s1 [78, 65535] { R132 += 1 };
  s3 -> s3 [0, 65535] { R132 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 8] { R134 += 1, R18 += 1 };
  s0 -> s2 [0, 65535] { R134 += 1, R17 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R133 += 1, R134 += 1 };
  s0 -> s3 [9, 13] { R134 += 1, R18 += 1 };
  s0 -> s1 [14, 31] { R134 += 1, R18 += 1 };
  s0 -> s3 [32, 32] { R134 += 1, R18 += 1 };
  s0 -> s1 [33, 65535] { R134 += 1, R18 += 1 };
  s1 -> s1 [0, 65535] { R134 += 1, R18 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R134 += 1 };
  s2 -> s1 [0, 8] { R134 += 1, R18 += 1 };
  s2 -> s2 [0, 65535] { R134 += 1, R17 += 1, R18 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R134 += 1, R18 += 1 };
  s2 -> s1 [14, 31] { R134 += 1, R18 += 1 };
  s2 -> s3 [32, 32] { R134 += 1, R18 += 1 };
  s2 -> s1 [33, 65535] { R134 += 1, R18 += 1 };
  s3 -> s1 [0, 65535] { R134 += 1, R18 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R134 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 65535] { R136 += 1, R20 += 1, R3 += 1 };
  s0 -> s2 [0, 65535] { R136 += 1, R19 += 1, R20 += 1 };
  s0 -> s0 [0, 65535] { R135 += 1, R136 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R136 += 1, R20 += 1, R3 += 1 };
  s1 -> s4 [0, 65535] { R136 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R136 += 1, R20 += 1, R3 += 1 };
  s2 -> s2 [0, 65535] { R136 += 1, R19 += 1, R20 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R136 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 8] { R138 += 1, R22 += 1 };
  s0 -> s0 [0, 65535] { R137 += 1, R138 += 1 };
  s0 -> s2 [0, 65535] { R138 += 1, R21 += 1, R22 += 1 };
  s0 -> s3 [9, 13] { R138 += 1, R22 += 1 };
  s0 -> s1 [14, 31] { R138 += 1, R22 += 1 };
  s0 -> s3 [32, 32] { R138 += 1, R22 += 1 };
  s0 -> s1 [33, 65535] { R138 += 1, R22 += 1 };
  s1 -> s1 [0, 65535] { R138 += 1, R22 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R138 += 1 };
  s2 -> s1 [0, 8] { R138 += 1, R22 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R138 += 1, R21 += 1, R22 += 1 };
  s2 -> s3 [9, 13] { R138 += 1, R22 += 1 };
  s2 -> s1 [14, 31] { R138 += 1, R22 += 1 };
  s2 -> s3 [32, 32] { R138 += 1, R22 += 1 };
  s2 -> s1 [33, 65535] { R138 += 1, R22 += 1 };
  s3 -> s1 [0, 65535] { R138 += 1, R22 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R138 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s0 [0, 65535] { R139 += 1, R140 += 1 };
  s0 -> s1 [0, 65535] { R140 += 1, R23 += 1, R24 += 1 };
  s0 -> s2 [0, 65535] { R140 += 1, R24 += 1, R4 += 1 };
  s1 -> s1 [0, 65535] { R140 += 1, R23 += 1, R24 += 1 };
  s1 -> s2 [0, 65535] { R140 += 1, R24 += 1, R4 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R140 += 1 };
  s2 -> s2 [0, 65535] { R140 += 1, R24 += 1, R4 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R140 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 65535] { R142 += 1, R103 += 1, R104 += 1 };
  s0 -> s2 [0, 65535] { R142 += 1, R104 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R141 += 1, R142 += 1 };
  s1 -> s1 [0, 65535] { R142 += 1, R103 += 1, R104 += 1 };
  s1 -> s2 [0, 65535] { R142 += 1, R104 += 1, R16 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R142 += 1, R104 += 1, R16 += 1 };
  s2 -> s3 [0, 65535] { R142 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R142 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 76] { R144 += 1, R106 += 1 };
  s0 -> s2 [0, 65535] { R144 += 1, R105 += 1, R106 += 1 };
  s0 -> s0 [0, 65535] { R143 += 1, R144 += 1 };
  s0 -> s3 [77, 77] { R144 += 1, R106 += 1 };
  s0 -> s4 [77, 77] { R144 += 1, R106 += 1 };
  s0 -> s1 [86, 65535] { R144 += 1, R106 += 1 };
  s1 -> s1 [0, 76] { R144 += 1, R106 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R144 += 1 };
  s1 -> s3 [77, 77] { R144 += 1, R106 += 1 };
  s1 -> s4 [77, 77] { R144 += 1, R106 += 1 };
  s1 -> s1 [86, 65535] { R144 += 1, R106 += 1 };
  s2 -> s1 [0, 76] { R144 += 1, R106 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R144 += 1, R105 += 1, R106 += 1 };
  s2 -> s3 [77, 77] { R144 += 1, R106 += 1 };
  s2 -> s4 [77, 77] { R144 += 1, R106 += 1 };
  s2 -> s1 [86, 65535] { R144 += 1, R106 += 1 };
  s3 -> s3 [0, 77] { R144 += 1, R106 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R144 += 1 };
  s3 -> s3 [86, 65535] { R144 += 1, R106 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R144 += 1 };
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 76] { R146 += 1, R112 += 1 };
  s0 -> s2 [0, 65535] { R146 += 1, R111 += 1, R112 += 1 };
  s0 -> s0 [0, 65535] { R145 += 1, R146 += 1 };
  s0 -> s3 [77, 77] { R146 += 1, R112 += 1 };
  s0 -> s1 [78, 65535] { R146 += 1, R112 += 1 };
  s1 -> s1 [0, 76] { R146 += 1, R112 += 1 };
  s1 -> s3 [77, 77] { R146 += 1, R112 += 1 };
  s1 -> s1 [78, 65535] { R146 += 1, R112 += 1 };
  s2 -> s1 [0, 76] { R146 += 1, R112 += 1 };
  s2 -> s2 [0, 65535] { R146 += 1, R111 += 1, R112 += 1 };
  s2 -> s3 [77, 77] { R146 += 1, R112 += 1 };
  s2 -> s1 [78, 65535] { R146 += 1, R112 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R146 += 1 };
  s3 -> s3 [0, 65535] { R146 += 1, R112 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R146 += 1 };
  accepting s3, s4, s5;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 65535] { R148 += 1, R114 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R147 += 1, R148 += 1 };
  s0 -> s2 [0, 65535] { R148 += 1, R113 += 1, R114 += 1 };
  s1 -> s1 [0, 65535] { R148 += 1, R114 += 1, R0 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R148 += 1 };
  s2 -> s1 [0, 65535] { R148 += 1, R114 += 1, R0 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R148 += 1, R113 += 1, R114 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R148 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 76] { R150 += 1, R116 += 1 };
  s0 -> s2 [0, 65535] { R150 += 1, R115 += 1, R116 += 1 };
  s0 -> s3 [0, 65535] { R150 += 1, R116 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R149 += 1, R150 += 1 };
  s0 -> s4 [77, 77] { R150 += 1, R116 += 1 };
  s0 -> s1 [78, 65535] { R150 += 1, R116 += 1 };
  s1 -> s1 [0, 76] { R150 += 1, R116 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R150 += 1 };
  s1 -> s4 [77, 77] { R150 += 1, R116 += 1 };
  s1 -> s1 [78, 65535] { R150 += 1, R116 += 1 };
  s2 -> s1 [0, 76] { R150 += 1, R116 += 1 };
  s2 -> s2 [0, 65535] { R150 += 1, R115 += 1, R116 += 1 };
  s2 -> s3 [0, 65535] { R150 += 1, R116 += 1, R7 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [77, 77] { R150 += 1, R116 += 1 };
  s2 -> s1 [78, 65535] { R150 += 1, R116 += 1 };
  s3 -> s1 [0, 76] { R150 += 1, R116 += 1 };
  s3 -> s3 [0, 65535] { R150 += 1, R116 += 1, R7 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R150 += 1 };
  s3 -> s4 [77, 77] { R150 += 1, R116 += 1 };
  s3 -> s1 [78, 65535] { R150 += 1, R116 += 1 };
  s4 -> s4 [0, 65535] { R150 += 1, R116 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R150 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 76] { R152 += 1, R118 += 1, R98 += 1 };
  s0 -> s0 [0, 65535] { R151 += 1, R152 += 1 };
  s0 -> s2 [0, 65535] { R152 += 1, R117 += 1, R118 += 1 };
  s0 -> s3 [0, 65535] { R152 += 1, R118 += 1, R97 += 1, R98 += 1 };
  s0 -> s1 [78, 65535] { R152 += 1, R118 += 1, R98 += 1 };
  s1 -> s1 [0, 76] { R152 += 1, R118 += 1, R98 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R152 += 1, R118 += 1 };
  s1 -> s5 [0, 65535] { R152 += 1 };
  s1 -> s1 [78, 65535] { R152 += 1, R118 += 1, R98 += 1 };
  s2 -> s1 [0, 76] { R152 += 1, R118 += 1, R98 += 1 };
  s2 -> s2 [0, 65535] { R152 += 1, R117 += 1, R118 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R152 += 1, R118 += 1, R97 += 1, R98 += 1 };
  s2 -> s1 [78, 65535] { R152 += 1, R118 += 1, R98 += 1 };
  s3 -> s1 [0, 76] { R152 += 1, R118 += 1, R98 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R152 += 1, R118 += 1, R97 += 1, R98 += 1 };
  s3 -> s5 [0, 65535] { R152 += 1 };
  s3 -> s1 [78, 65535] { R152 += 1, R118 += 1, R98 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R152 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 65535] { R154 += 1, R119 += 1, R120 += 1 };
  s0 -> s2 [0, 65535] { R154 += 1, R120 += 1, R99 += 1, R100 += 1 };
  s0 -> s0 [0, 65535] { R153 += 1, R154 += 1 };
  s0 -> s3 [0, 65535] { R154 += 1, R120 += 1, R100 += 1, R14 += 1 };
  s1 -> s1 [0, 65535] { R154 += 1, R119 += 1, R120 += 1 };
  s1 -> s2 [0, 65535] { R154 += 1, R120 += 1, R99 += 1, R100 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R154 += 1, R120 += 1, R100 += 1, R14 += 1 };
  s2 -> s4 [0, 65535] { R154 += 1 };
  s2 -> s2 [0, 65535] { R154 += 1, R120 += 1, R99 += 1, R100 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R154 += 1, R120 += 1, R100 += 1, R14 += 1 };
  s3 -> s4 [0, 65535] { R154 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R154 += 1, R120 += 1 };
  s3 -> s3 [0, 65535] { R154 += 1, R120 += 1, R100 += 1, R14 += 1 };
  s4 -> s4 [0, 65535] { R154 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R154 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R154 += 1, R120 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 77] { R156 += 1, R122 += 1, R102 += 1 };
  s0 -> s2 [0, 65535] { R156 += 1, R122 += 1, R101 += 1, R102 += 1 };
  s0 -> s3 [0, 65535] { R156 += 1, R121 += 1, R122 += 1 };
  s0 -> s0 [0, 65535] { R155 += 1, R156 += 1 };
  s0 -> s4 [85, 85] { R156 += 1, R122 += 1, R102 += 1 };
  s0 -> s1 [86, 65535] { R156 += 1, R122 += 1, R102 += 1 };
  s1 -> s1 [0, 77] { R156 += 1, R122 += 1, R102 += 1 };
  s1 -> s4 [85, 85] { R156 += 1, R122 += 1, R102 += 1 };
  s1 -> s1 [86, 65535] { R156 += 1, R122 += 1, R102 += 1 };
  s2 -> s1 [0, 77] { R156 += 1, R122 += 1, R102 += 1 };
  s2 -> s2 [0, 65535] { R156 += 1, R122 += 1, R101 += 1, R102 += 1 };
  s2 -> s4 [85, 85] { R156 += 1, R122 += 1, R102 += 1 };
  s2 -> s1 [86, 65535] { R156 += 1, R122 += 1, R102 += 1 };
  s3 -> s1 [0, 77] { R156 += 1, R122 += 1, R102 += 1 };
  s3 -> s2 [0, 65535] { R156 += 1, R122 += 1, R101 += 1, R102 += 1 };
  s3 -> s3 [0, 65535] { R156 += 1, R121 += 1, R122 += 1 };
  s3 -> s4 [85, 85] { R156 += 1, R122 += 1, R102 += 1 };
  s3 -> s1 [86, 65535] { R156 += 1, R122 += 1, R102 += 1 };
  s4 -> s4 [0, 77] { R156 += 1, R122 += 1, R102 += 1 };
  s4 -> s4 [0, 65535] { R156 += 1, R122 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R156 += 1 };
  s4 -> s4 [85, 65535] { R156 += 1, R122 += 1, R102 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R156 += 1 };
  accepting s4, s5, s6;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 65535] { R158 += 1, R123 += 1, R124 += 1 };
  s0 -> s2 [0, 65535] { R158 += 1, R124 += 1, R108 += 1, R15 += 1 };
  s0 -> s0 [0, 65535] { R157 += 1, R158 += 1 };
  s0 -> s3 [0, 65535] { R158 += 1, R124 += 1, R107 += 1, R108 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R158 += 1, R123 += 1, R124 += 1 };
  s1 -> s2 [0, 65535] { R158 += 1, R124 += 1, R108 += 1, R15 += 1 };
  s1 -> s3 [0, 65535] { R158 += 1, R124 += 1, R107 += 1, R108 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R158 += 1, R124 += 1, R108 += 1, R15 += 1 };
  s2 -> s5 [0, 65535] { R158 += 1 };
  s2 -> s6 [0, 65535] { R158 += 1, R124 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R158 += 1, R124 += 1, R108 += 1, R15 += 1 };
  s3 -> s5 [0, 65535] { R158 += 1 };
  s3 -> s3 [0, 65535] { R158 += 1, R124 += 1, R107 += 1, R108 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R158 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R158 += 1 };
  s6 -> s6 [0, 65535] { R158 += 1, R124 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 76] { R160 += 1, R126 += 1, R110 += 1 };
  s0 -> s2 [0, 65535] { R160 += 1, R126 += 1, R109 += 1, R110 += 1 };
  s0 -> s0 [0, 65535] { R159 += 1, R160 += 1 };
  s0 -> s3 [0, 65535] { R160 += 1, R125 += 1, R126 += 1 };
  s0 -> s4 [77, 77] { R160 += 1, R126 += 1, R110 += 1 };
  s0 -> s5 [77, 77] { R160 += 1, R126 += 1, R110 += 1 };
  s0 -> s1 [86, 65535] { R160 += 1, R126 += 1, R110 += 1 };
  s1 -> s1 [0, 76] { R160 += 1, R126 += 1, R110 += 1 };
  s1 -> s1 [0, 65535] { R160 += 1, R126 += 1 };
  s1 -> s6 [0, 65535] { R160 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s4 [77, 77] { R160 += 1, R126 += 1, R110 += 1 };
  s1 -> s5 [77, 77] { R160 += 1, R126 += 1, R110 += 1 };
  s1 -> s1 [86, 65535] { R160 += 1, R126 += 1, R110 += 1 };
  s2 -> s1 [0, 76] { R160 += 1, R126 += 1, R110 += 1 };
  s2 -> s2 [0, 65535] { R160 += 1, R126 += 1, R109 += 1, R110 += 1 };
  s2 -> s6 [0, 65535] { R160 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s4 [77, 77] { R160 += 1, R126 += 1, R110 += 1 };
  s2 -> s5 [77, 77] { R160 += 1, R126 += 1, R110 += 1 };
  s2 -> s1 [86, 65535] { R160 += 1, R126 += 1, R110 += 1 };
  s3 -> s1 [0, 76] { R160 += 1, R126 += 1, R110 += 1 };
  s3 -> s2 [0, 65535] { R160 += 1, R126 += 1, R109 += 1, R110 += 1 };
  s3 -> s3 [0, 65535] { R160 += 1, R125 += 1, R126 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s4 [77, 77] { R160 += 1, R126 += 1, R110 += 1 };
  s3 -> s5 [77, 77] { R160 += 1, R126 += 1, R110 += 1 };
  s3 -> s1 [86, 65535] { R160 += 1, R126 += 1, R110 += 1 };
  s4 -> s4 [0, 77] { R160 += 1, R126 += 1, R110 += 1 };
  s4 -> s4 [0, 65535] { R160 += 1, R126 += 1 };
  s4 -> s6 [0, 65535] { R160 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s4 [86, 65535] { R160 += 1, R126 += 1, R110 += 1 };
  s5 -> s6 [0, 65535] { R160 += 1 };
  s5 -> s7 [0, 65535];
  s5 -> s5 [0, 65535] { R160 += 1, R126 += 1 };
  s6 -> s6 [0, 65535] { R160 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
};
synchronised {  // Automata constraining P26
automaton P26_0 {
  init s0;
  s0 -> s1 [9, 9];
  accepting s1;
};
};
synchronised {  // Automata constraining P25
automaton P25_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
synchronised {  // Automata constraining P29
automaton P29_0 {
  init s0;
  s0 -> s1 [11, 11];
  accepting s1;
};
};
synchronised {  // Automata constraining P28
automaton P28_0 {
  init s0;
  s0 -> s1 [13, 13];
  accepting s1;
};
};
constraint R0 = R102 && R1 = R126 && R2 - R160 = 1 && R17 - R126 = -1 && R18 = R126 && R19 - R126 = -1 && R20 = R126 && R21 = 0 && R22 = 1 && R23 = 0 && R24 = 1 && R25 = R160 && R26 - R160 = 1 && R27 = R160 && R28 - R160 = 1 && R29 = 0 && R30 = 1 && R31 = 0 && R32 = 1 && R101 = 0 && R111 = 0 && R112 = R126 && R113 = 0 && R114 = R126 && R115 = 0 && R116 = R126 && R117 = 0 && R118 = R126 && R119 = 0 && R120 = R126 && R121 = 0 && R122 = R126 && R123 = 0 && R124 = R126 && R125 = 0 && R127 = 0 && R128 = R160 && R129 = 0 && R130 = R160 && R131 = 0 && R132 = R160 && R133 = 0 && R134 = R160 && R135 = 0 && R136 = R160 && R137 = 0 && R138 = R160 && R139 = 0 && R140 = R160 && R141 = 0 && R142 = R160 && R143 = 0 && R144 = R160 && R145 = 0 && R146 = R160 && R147 = 0 && R148 = R160 && R149 = 0 && R150 = R160 && R151 = 0 && R152 = R160 && R153 = 0 && R154 = R160 && R155 = 0 && R156 = R160 && R157 = 0 && R158 = R160 && R159 = 0 && R7 < 1 && R10 < 1 && R13 < 1 && -1 < R102 && 0 < R126 && -1 < R160 && (R97 != 0 || R98 = R102 || (R14 = 0 && R102 = 0)) && (R99 != 0 || R100 = R102 || (R14 = 0 && R102 = 0)) && (R15 = 0 || (R107 = 0 && R108 = 0)) && (R15 = 0 || (R109 = 0 && R110 = 0)) && (R16 = 0 || (R103 = 0 && R104 = 0)) && (R16 = 0 || (R105 = 0 && R106 = 0)) && (R97 = 0 || (R14 = 0 && R102 = 0)) && (R99 = 0 || (R14 = 0 && R102 = 0));
// End of Parikh automata intersection problem
