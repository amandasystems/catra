// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R100, R101, R102, R103, R104, R105, R106, R107, R108, R109, R11, R110, R111, R112, R113, R114, R115, R116, R117, R118, R119, R12, R120, R121, R122, R123, R124, R125, R126, R127, R128, R129, R130, R131, R132, R133, R134, R135, R136, R137, R138, R139, R14, R140, R141, R142, R143, R144, R145, R146, R147, R148, R149, R15, R150, R151, R2, R3, R4, R5, R6, R7, R8, R84, R85, R86, R87, R88, R89, R9, R90, R91, R92, R93, R94, R95, R96, R97, R98, R99;
synchronised {  // Automata constraining value1
automaton value1_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 60];
  s0 -> s1 [61, 61];
  s0 -> s0 [62, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 65535];
  accepting s1;
};
automaton value1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton value1_2 {
  init s0;
  s0 -> s1 [0, 60] { R15 += 1 };
  s0 -> s0 [0, 65535] { R14 += 1, R15 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535] { R15 += 1 };
  s1 -> s1 [0, 60] { R15 += 1 };
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535] { R15 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value1_3 {
  init s0;
  s0 -> s1 [0, 65535] { R125 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R124 += 1, R125 += 1 };
  s1 -> s1 [0, 65535] { R125 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_4 {
  init s0;
  s0 -> s0 [0, 65535] { R126 += 1, R127 += 1 };
  s0 -> s1 [0, 65535] { R127 += 1, R92 += 1, R93 += 1 };
  s0 -> s2 [9, 9] { R127 += 1, R93 += 1 };
  s1 -> s1 [0, 65535] { R127 += 1, R92 += 1, R93 += 1 };
  s1 -> s2 [9, 9] { R127 += 1, R93 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R127 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value1_5 {
  init s0;
  s0 -> s0 [0, 65535] { R128 += 1, R129 += 1 };
  s0 -> s1 [0, 65535] { R129 += 1, R95 += 1, R7 += 1 };
  s0 -> s2 [0, 65535] { R129 += 1, R94 += 1, R95 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R129 += 1, R95 += 1, R7 += 1 };
  s1 -> s4 [0, 65535] { R129 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R129 += 1, R95 += 1, R7 += 1 };
  s2 -> s2 [0, 65535] { R129 += 1, R94 += 1, R95 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R129 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_6 {
  init s0;
  s0 -> s1 [0, 8] { R131 += 1, R97 += 1 };
  s0 -> s2 [0, 65535] { R131 += 1, R96 += 1, R97 += 1 };
  s0 -> s0 [0, 65535] { R130 += 1, R131 += 1 };
  s0 -> s3 [9, 13] { R131 += 1, R97 += 1 };
  s0 -> s1 [14, 31] { R131 += 1, R97 += 1 };
  s0 -> s3 [32, 32] { R131 += 1, R97 += 1 };
  s0 -> s1 [33, 65535] { R131 += 1, R97 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R131 += 1, R97 += 1 };
  s1 -> s5 [0, 65535] { R131 += 1 };
  s2 -> s1 [0, 8] { R131 += 1, R97 += 1 };
  s2 -> s2 [0, 65535] { R131 += 1, R96 += 1, R97 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R131 += 1, R97 += 1 };
  s2 -> s1 [14, 31] { R131 += 1, R97 += 1 };
  s2 -> s3 [32, 32] { R131 += 1, R97 += 1 };
  s2 -> s1 [33, 65535] { R131 += 1, R97 += 1 };
  s3 -> s1 [0, 65535] { R131 += 1, R97 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R131 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value1_7 {
  init s0;
  s0 -> s1 [0, 65535] { R133 += 1, R99 += 1, R8 += 1 };
  s0 -> s2 [0, 65535] { R133 += 1, R98 += 1, R99 += 1 };
  s0 -> s0 [0, 65535] { R132 += 1, R133 += 1 };
  s1 -> s1 [0, 65535] { R133 += 1, R99 += 1, R8 += 1 };
  s1 -> s4 [0, 65535] { R133 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R133 += 1, R99 += 1, R8 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R133 += 1, R98 += 1, R99 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R133 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_8 {
  init s0;
  s0 -> s1 [0, 65535] { R135 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R134 += 1, R135 += 1 };
  s1 -> s1 [0, 65535] { R135 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_9 {
  init s0;
  s0 -> s1 [0, 65535] { R137 += 1, R108 += 1, R109 += 1 };
  s0 -> s0 [0, 65535] { R136 += 1, R137 += 1 };
  s0 -> s2 [32, 32] { R137 += 1, R109 += 1 };
  s1 -> s1 [0, 65535] { R137 += 1, R108 += 1, R109 += 1 };
  s1 -> s2 [32, 32] { R137 += 1, R109 += 1 };
  s2 -> s2 [0, 65535] { R137 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value1_10 {
  init s0;
  s0 -> s1 [0, 65535] { R139 += 1, R110 += 1, R111 += 1 };
  s0 -> s0 [0, 65535] { R138 += 1, R139 += 1 };
  s0 -> s2 [0, 65535] { R139 += 1, R111 += 1, R11 += 1 };
  s1 -> s1 [0, 65535] { R139 += 1, R110 += 1, R111 += 1 };
  s1 -> s2 [0, 65535] { R139 += 1, R111 += 1, R11 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R139 += 1, R111 += 1, R11 += 1 };
  s2 -> s3 [0, 65535] { R139 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R139 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_11 {
  init s0;
  s0 -> s1 [0, 64] { R141 += 1, R113 += 1 };
  s0 -> s0 [0, 65535] { R140 += 1, R141 += 1 };
  s0 -> s2 [0, 65535] { R141 += 1, R112 += 1, R113 += 1 };
  s0 -> s1 [91, 65535] { R141 += 1, R113 += 1 };
  s1 -> s1 [0, 64] { R141 += 1, R113 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R141 += 1 };
  s1 -> s1 [91, 65535] { R141 += 1, R113 += 1 };
  s2 -> s1 [0, 64] { R141 += 1, R113 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R141 += 1, R112 += 1, R113 += 1 };
  s2 -> s1 [91, 65535] { R141 += 1, R113 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value1_12 {
  init s0;
  s0 -> s0 [0, 65535] { R142 += 1, R143 += 1 };
  s0 -> s1 [0, 65535] { R143 += 1, R114 += 1, R115 += 1 };
  s0 -> s2 [0, 65535] { R143 += 1, R115 += 1, R0 += 1 };
  s1 -> s1 [0, 65535] { R143 += 1, R114 += 1, R115 += 1 };
  s1 -> s2 [0, 65535] { R143 += 1, R115 += 1, R0 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R143 += 1, R115 += 1, R0 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R143 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R143 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_13 {
  init s0;
  s0 -> s1 [0, 8] { R145 += 1, R117 += 1, R85 += 1 };
  s0 -> s0 [0, 65535] { R144 += 1, R145 += 1 };
  s0 -> s2 [0, 65535] { R145 += 1, R117 += 1, R84 += 1, R85 += 1 };
  s0 -> s3 [0, 65535] { R145 += 1, R116 += 1, R117 += 1 };
  s0 -> s4 [9, 13] { R145 += 1, R117 += 1, R85 += 1 };
  s0 -> s1 [14, 31] { R145 += 1, R117 += 1, R85 += 1 };
  s0 -> s4 [32, 32] { R145 += 1, R117 += 1, R85 += 1 };
  s0 -> s1 [33, 65535] { R145 += 1, R117 += 1, R85 += 1 };
  s1 -> s1 [0, 65535] { R145 += 1, R117 += 1, R85 += 1 };
  s1 -> s7 [0, 65535] { R145 += 1, R117 += 1 };
  s1 -> s6 [0, 65535] { R145 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 8] { R145 += 1, R117 += 1, R85 += 1 };
  s2 -> s2 [0, 65535] { R145 += 1, R117 += 1, R84 += 1, R85 += 1 };
  s2 -> s6 [0, 65535] { R145 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [9, 13] { R145 += 1, R117 += 1, R85 += 1 };
  s2 -> s1 [14, 31] { R145 += 1, R117 += 1, R85 += 1 };
  s2 -> s4 [32, 32] { R145 += 1, R117 += 1, R85 += 1 };
  s2 -> s1 [33, 65535] { R145 += 1, R117 += 1, R85 += 1 };
  s3 -> s1 [0, 8] { R145 += 1, R117 += 1, R85 += 1 };
  s3 -> s2 [0, 65535] { R145 += 1, R117 += 1, R84 += 1, R85 += 1 };
  s3 -> s3 [0, 65535] { R145 += 1, R116 += 1, R117 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s4 [9, 13] { R145 += 1, R117 += 1, R85 += 1 };
  s3 -> s1 [14, 31] { R145 += 1, R117 += 1, R85 += 1 };
  s3 -> s4 [32, 32] { R145 += 1, R117 += 1, R85 += 1 };
  s3 -> s1 [33, 65535] { R145 += 1, R117 += 1, R85 += 1 };
  s4 -> s1 [0, 65535] { R145 += 1, R117 += 1, R85 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R145 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R145 += 1, R117 += 1 };
  s7 -> s6 [0, 65535] { R145 += 1 };
  s7 -> s5 [0, 65535];
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton value1_14 {
  init s0;
  s0 -> s1 [0, 65535] { R147 += 1, R119 += 1, R86 += 1, R87 += 1 };
  s0 -> s0 [0, 65535] { R146 += 1, R147 += 1 };
  s0 -> s2 [0, 65535] { R147 += 1, R119 += 1, R87 += 1, R5 += 1 };
  s0 -> s3 [0, 65535] { R147 += 1, R118 += 1, R119 += 1 };
  s1 -> s1 [0, 65535] { R147 += 1, R119 += 1, R86 += 1, R87 += 1 };
  s1 -> s6 [0, 65535] { R147 += 1 };
  s1 -> s2 [0, 65535] { R147 += 1, R119 += 1, R87 += 1, R5 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R147 += 1, R119 += 1 };
  s2 -> s6 [0, 65535] { R147 += 1 };
  s2 -> s2 [0, 65535] { R147 += 1, R119 += 1, R87 += 1, R5 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R147 += 1, R119 += 1, R86 += 1, R87 += 1 };
  s3 -> s2 [0, 65535] { R147 += 1, R119 += 1, R87 += 1, R5 += 1 };
  s3 -> s3 [0, 65535] { R147 += 1, R118 += 1, R119 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R147 += 1, R119 += 1 };
  s5 -> s6 [0, 65535] { R147 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R147 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value1_15 {
  init s0;
  s0 -> s1 [0, 8] { R149 += 1, R121 += 1, R89 += 1 };
  s0 -> s2 [0, 65535] { R149 += 1, R120 += 1, R121 += 1 };
  s0 -> s0 [0, 65535] { R148 += 1, R149 += 1 };
  s0 -> s3 [0, 65535] { R149 += 1, R121 += 1, R88 += 1, R89 += 1 };
  s0 -> s4 [9, 13] { R149 += 1, R121 += 1, R89 += 1 };
  s0 -> s1 [14, 31] { R149 += 1, R121 += 1, R89 += 1 };
  s0 -> s4 [32, 32] { R149 += 1, R121 += 1, R89 += 1 };
  s0 -> s1 [33, 65535] { R149 += 1, R121 += 1, R89 += 1 };
  s1 -> s5 [0, 65535] { R149 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R149 += 1, R121 += 1 };
  s1 -> s1 [0, 65535] { R149 += 1, R121 += 1, R89 += 1 };
  s2 -> s1 [0, 8] { R149 += 1, R121 += 1, R89 += 1 };
  s2 -> s2 [0, 65535] { R149 += 1, R120 += 1, R121 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R149 += 1, R121 += 1, R88 += 1, R89 += 1 };
  s2 -> s4 [9, 13] { R149 += 1, R121 += 1, R89 += 1 };
  s2 -> s1 [14, 31] { R149 += 1, R121 += 1, R89 += 1 };
  s2 -> s4 [32, 32] { R149 += 1, R121 += 1, R89 += 1 };
  s2 -> s1 [33, 65535] { R149 += 1, R121 += 1, R89 += 1 };
  s3 -> s1 [0, 8] { R149 += 1, R121 += 1, R89 += 1 };
  s3 -> s5 [0, 65535] { R149 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R149 += 1, R121 += 1, R88 += 1, R89 += 1 };
  s3 -> s4 [9, 13] { R149 += 1, R121 += 1, R89 += 1 };
  s3 -> s1 [14, 31] { R149 += 1, R121 += 1, R89 += 1 };
  s3 -> s4 [32, 32] { R149 += 1, R121 += 1, R89 += 1 };
  s3 -> s1 [33, 65535] { R149 += 1, R121 += 1, R89 += 1 };
  s4 -> s1 [0, 65535] { R149 += 1, R121 += 1, R89 += 1 };
  s5 -> s5 [0, 65535] { R149 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R149 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R149 += 1, R121 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton value1_16 {
  init s0;
  s0 -> s1 [0, 65535] { R151 += 1, R122 += 1, R123 += 1 };
  s0 -> s2 [0, 65535] { R151 += 1, R123 += 1, R91 += 1, R6 += 1 };
  s0 -> s3 [0, 65535] { R151 += 1, R123 += 1, R90 += 1, R91 += 1 };
  s0 -> s0 [0, 65535] { R150 += 1, R151 += 1 };
  s1 -> s1 [0, 65535] { R151 += 1, R122 += 1, R123 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R151 += 1, R123 += 1, R91 += 1, R6 += 1 };
  s1 -> s3 [0, 65535] { R151 += 1, R123 += 1, R90 += 1, R91 += 1 };
  s2 -> s6 [0, 65535] { R151 += 1, R123 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R151 += 1, R123 += 1, R91 += 1, R6 += 1 };
  s2 -> s5 [0, 65535] { R151 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R151 += 1, R123 += 1, R91 += 1, R6 += 1 };
  s3 -> s3 [0, 65535] { R151 += 1, R123 += 1, R90 += 1, R91 += 1 };
  s3 -> s5 [0, 65535] { R151 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R151 += 1 };
  s6 -> s6 [0, 65535] { R151 += 1, R123 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R151 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s0 [91, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 8] { R101 += 1 };
  s0 -> s0 [0, 65535] { R100 += 1, R101 += 1 };
  s0 -> s2 [9, 13] { R101 += 1 };
  s0 -> s1 [14, 31] { R101 += 1 };
  s0 -> s2 [32, 32] { R101 += 1 };
  s0 -> s1 [33, 65535] { R101 += 1 };
  s1 -> s1 [0, 65535] { R101 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R101 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 65535] { R103 += 1, R9 += 1 };
  s0 -> s0 [0, 65535] { R102 += 1, R103 += 1 };
  s1 -> s1 [0, 65535] { R103 += 1, R9 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 8] { R105 += 1 };
  s0 -> s0 [0, 65535] { R104 += 1, R105 += 1 };
  s0 -> s2 [9, 13] { R105 += 1 };
  s0 -> s1 [14, 31] { R105 += 1 };
  s0 -> s2 [32, 32] { R105 += 1 };
  s0 -> s1 [33, 65535] { R105 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R105 += 1 };
  s2 -> s1 [0, 65535] { R105 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 65535] { R107 += 1, R10 += 1 };
  s0 -> s0 [0, 65535] { R106 += 1, R107 += 1 };
  s1 -> s1 [0, 65535] { R107 += 1, R10 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
};
constraint R1 = R93 && R3 = R123 && R4 = R133 && R14 = 0 && R15 = R151 && R92 - R93 = -1 && R108 = 0 && R109 = 1 && R110 = 0 && R111 = 1 && R112 = 1 && R113 = R123 && R114 = 1 && R115 = R123 && R116 = 1 && R117 = R123 && R118 = 1 && R119 = R123 && R120 = 1 && R121 = R123 && R122 = 1 && R124 - R151 = 1 && R125 = R133 && R126 - R151 = 1 && R127 = R133 && R128 - R151 = 1 && R129 = R133 && R130 - R151 = 1 && R131 = R133 && R132 - R151 = 1 && R134 = 0 && R135 = R151 && R136 = 0 && R137 = R151 && R138 = 0 && R139 = R151 && R140 = 0 && R141 = R151 && R142 = 0 && R143 = R151 && R144 = 0 && R145 = R151 && R146 = 0 && R147 = R151 && R148 = 0 && R149 = R151 && R150 = 0 && R0 != 0 && R2 != 0 && R93 != 0 && R12 < 1 && 0 < R123 && R151 < R133 && -1 < R151 && (R5 != 0 || ((R0 != R85 || R84 - R85 = -1 || R85 < 0) && (R0 = R85 || R0 < 1))) && (R5 != 0 || ((R0 != R87 || R86 - R87 = -1 || R87 < 0) && (R0 = R87 || R0 < 1))) && (R9 != 0 || ((R2 != R101 || R100 - R101 = -1 || R101 < 0) && (R2 = R101 || R2 < 1))) && (R9 != 0 || ((R2 != R103 || R102 - R103 = -1 || R103 < 0) && (R2 = R103 || R2 < 1))) && (R88 != 0 || ((R6 != 0 || ((R0 != R89 || R89 = 1 || R89 < 0) && (R0 = R89 || R89 = 1 || R0 < 1))) && (R6 = 0 || ((R0 != R89 || R89 = 1 || R89 < 0) && (R89 != 1 || -1 < R0) && (R0 = R89 || R89 = 1))))) && (R90 != 0 || ((R6 != 0 || ((R0 != R91 || R91 = 1 || R91 < 0) && (R0 = R91 || R91 = 1 || R0 < 1))) && (R6 = 0 || ((R0 != R91 || R91 = 1 || R91 < 0) && (R91 != 1 || -1 < R0) && (R0 = R91 || R91 = 1))))) && (R93 != R95 || R94 - R95 = -1 || (R7 = 0 && R95 < 0)) && (R96 != 0 || ((R8 != 0 || ((R93 != R97 || R97 = 1 || R97 < 0) && (R93 = R97 || R97 = 1 || R93 < 1))) && (R8 = 0 || ((R93 != R97 || R97 = 1 || R97 < 0) && (R97 != 1 || -1 < R93) && (R93 = R97 || R97 = 1))))) && (R98 != 0 || ((R8 != 0 || ((R93 != R99 || R99 = 1 || R99 < 0) && (R93 = R99 || R99 = 1 || R93 < 1))) && (R8 = 0 || ((R93 != R99 || R99 = 1 || R99 < 0) && (R99 != 1 || -1 < R93) && (R93 = R99 || R99 = 1))))) && (R104 != 0 || ((R10 != 0 || ((R2 != R105 || R105 = 1 || R105 < 0) && (R2 = R105 || R105 = 1 || R2 < 1))) && (R10 = 0 || ((R2 != R105 || R105 = 1 || R105 < 0) && (R105 != 1 || -1 < R2) && (R2 = R105 || R105 = 1))))) && (R106 != 0 || ((R10 != 0 || ((R2 != R107 || R107 = 1 || R107 < 0) && (R2 = R107 || R107 = 1 || R2 < 1))) && (R10 = 0 || ((R2 != R107 || R107 = 1 || R107 < 0) && (R107 != 1 || -1 < R2) && (R2 = R107 || R107 = 1))))) && (R5 = 0 || (R0 = R85 && R84 - R85 = -1)) && (R5 = 0 || (R0 = R87 && R86 - R87 = -1)) && (R9 = 0 || (R2 = R101 && R100 - R101 = -1)) && (R9 = 0 || (R2 = R103 && R102 - R103 = -1)) && (R88 = 0 || (R6 = 0 && R0 < 0)) && (R90 = 0 || (R6 = 0 && R0 < 0)) && (R93 = R95 || (R7 = 0 && R93 < 0)) && (R96 = 0 || (R8 = 0 && R93 < 0)) && (R98 = 0 || (R8 = 0 && R93 < 0)) && (R104 = 0 || (R10 = 0 && R2 < 0)) && (R106 = 0 || (R10 = 0 && R2 < 0));
// End of Parikh automata intersection problem
