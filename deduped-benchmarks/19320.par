// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R10, R13, R15, R16, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R261, R262, R263, R264, R27, R28, R29, R3, R30, R31, R32, R337, R338, R339, R340, R341, R342, R343, R344, R345, R346, R347, R348, R349, R350, R351, R352, R353, R354, R355, R356, R357, R358, R359, R360, R361, R362, R363, R364, R365, R366, R367, R368, R369, R37, R370, R371, R372, R373, R374, R375, R376, R377, R378, R379, R38, R380, R381, R382, R383, R384, R385, R386, R387, R388, R389, R39, R390, R391, R392, R393, R394, R395, R396, R397, R398, R399, R4, R40, R400, R401, R402, R403, R404, R405, R406, R407, R408, R5, R6;
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [100, 100];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R13 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s0 [0, 65535] { R25 += 1, R26 += 1 };
  s0 -> s1 [12, 12] { R26 += 1 };
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value2_4 {
  init s0;
  s0 -> s0 [0, 65535] { R27 += 1, R28 += 1 };
  s0 -> s1 [0, 65535] { R28 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R28 += 1, R5 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 8] { R30 += 1 };
  s0 -> s0 [0, 65535] { R29 += 1, R30 += 1 };
  s0 -> s2 [9, 13] { R30 += 1 };
  s0 -> s1 [14, 31] { R30 += 1 };
  s0 -> s2 [32, 32] { R30 += 1 };
  s0 -> s1 [33, 65535] { R30 += 1 };
  s1 -> s1 [0, 65535] { R30 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R30 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_6 {
  init s0;
  s0 -> s0 [0, 65535] { R31 += 1, R32 += 1 };
  s0 -> s1 [0, 65535] { R32 += 1, R6 += 1 };
  s1 -> s1 [0, 65535] { R32 += 1, R6 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 64] { R370 += 1 };
  s0 -> s0 [0, 65535] { R369 += 1, R370 += 1 };
  s0 -> s2 [68, 68] { R370 += 1 };
  s0 -> s1 [69, 65535] { R370 += 1 };
  s1 -> s1 [0, 64] { R370 += 1 };
  s1 -> s2 [68, 68] { R370 += 1 };
  s1 -> s1 [69, 65535] { R370 += 1 };
  s2 -> s2 [0, 64] { R370 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [68, 65535] { R370 += 1 };
  accepting s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R372 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R371 += 1, R372 += 1 };
  s1 -> s1 [0, 65535] { R372 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 67] { R374 += 1 };
  s0 -> s2 [0, 65535] { R374 += 1, R10 += 1 };
  s0 -> s0 [0, 65535] { R373 += 1, R374 += 1 };
  s0 -> s3 [68, 68] { R374 += 1 };
  s0 -> s1 [69, 65535] { R374 += 1 };
  s1 -> s1 [0, 67] { R374 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [68, 68] { R374 += 1 };
  s1 -> s1 [69, 65535] { R374 += 1 };
  s2 -> s1 [0, 67] { R374 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R374 += 1, R10 += 1 };
  s2 -> s3 [68, 68] { R374 += 1 };
  s2 -> s1 [69, 65535] { R374 += 1 };
  s3 -> s3 [0, 65535] { R374 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 8] { R376 += 1, R18 += 1 };
  s0 -> s2 [0, 65535] { R376 += 1, R17 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R375 += 1, R376 += 1 };
  s0 -> s3 [9, 13] { R376 += 1, R18 += 1 };
  s0 -> s1 [14, 31] { R376 += 1, R18 += 1 };
  s0 -> s3 [32, 32] { R376 += 1, R18 += 1 };
  s0 -> s1 [33, 65535] { R376 += 1, R18 += 1 };
  s1 -> s5 [0, 65535] { R376 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R376 += 1, R18 += 1 };
  s2 -> s1 [0, 8] { R376 += 1, R18 += 1 };
  s2 -> s2 [0, 65535] { R376 += 1, R17 += 1, R18 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R376 += 1, R18 += 1 };
  s2 -> s1 [14, 31] { R376 += 1, R18 += 1 };
  s2 -> s3 [32, 32] { R376 += 1, R18 += 1 };
  s2 -> s1 [33, 65535] { R376 += 1, R18 += 1 };
  s3 -> s1 [0, 65535] { R376 += 1, R18 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R376 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s0 [0, 65535] { R377 += 1, R378 += 1 };
  s0 -> s1 [0, 65535] { R378 += 1, R20 += 1, R3 += 1 };
  s0 -> s2 [0, 65535] { R378 += 1, R19 += 1, R20 += 1 };
  s1 -> s1 [0, 65535] { R378 += 1, R20 += 1, R3 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R378 += 1 };
  s2 -> s1 [0, 65535] { R378 += 1, R20 += 1, R3 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R378 += 1, R19 += 1, R20 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R378 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 8] { R380 += 1, R22 += 1 };
  s0 -> s0 [0, 65535] { R379 += 1, R380 += 1 };
  s0 -> s2 [0, 65535] { R380 += 1, R21 += 1, R22 += 1 };
  s0 -> s3 [9, 13] { R380 += 1, R22 += 1 };
  s0 -> s1 [14, 31] { R380 += 1, R22 += 1 };
  s0 -> s3 [32, 32] { R380 += 1, R22 += 1 };
  s0 -> s1 [33, 65535] { R380 += 1, R22 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R380 += 1, R22 += 1 };
  s1 -> s5 [0, 65535] { R380 += 1 };
  s2 -> s1 [0, 8] { R380 += 1, R22 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R380 += 1, R21 += 1, R22 += 1 };
  s2 -> s3 [9, 13] { R380 += 1, R22 += 1 };
  s2 -> s1 [14, 31] { R380 += 1, R22 += 1 };
  s2 -> s3 [32, 32] { R380 += 1, R22 += 1 };
  s2 -> s1 [33, 65535] { R380 += 1, R22 += 1 };
  s3 -> s1 [0, 65535] { R380 += 1, R22 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R380 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 65535] { R382 += 1, R24 += 1, R4 += 1 };
  s0 -> s2 [0, 65535] { R382 += 1, R23 += 1, R24 += 1 };
  s0 -> s0 [0, 65535] { R381 += 1, R382 += 1 };
  s1 -> s1 [0, 65535] { R382 += 1, R24 += 1, R4 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R382 += 1 };
  s2 -> s1 [0, 65535] { R382 += 1, R24 += 1, R4 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R382 += 1, R23 += 1, R24 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R382 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 67] { R384 += 1, R344 += 1 };
  s0 -> s0 [0, 65535] { R383 += 1, R384 += 1 };
  s0 -> s2 [0, 65535] { R384 += 1, R343 += 1, R344 += 1 };
  s0 -> s1 [69, 65535] { R384 += 1, R344 += 1 };
  s1 -> s1 [0, 67] { R384 += 1, R344 += 1 };
  s1 -> s1 [0, 65535] { R384 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [69, 65535] { R384 += 1, R344 += 1 };
  s2 -> s1 [0, 67] { R384 += 1, R344 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R384 += 1, R343 += 1, R344 += 1 };
  s2 -> s1 [69, 65535] { R384 += 1, R344 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 65535] { R386 += 1, R345 += 1, R346 += 1 };
  s0 -> s0 [0, 65535] { R385 += 1, R386 += 1 };
  s0 -> s2 [0, 65535] { R386 += 1, R346 += 1, R15 += 1 };
  s1 -> s1 [0, 65535] { R386 += 1, R345 += 1, R346 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R386 += 1, R346 += 1, R15 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R386 += 1, R346 += 1, R15 += 1 };
  s2 -> s4 [0, 65535] { R386 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R386 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 68] { R388 += 1, R348 += 1 };
  s0 -> s0 [0, 65535] { R387 += 1, R388 += 1 };
  s0 -> s2 [0, 65535] { R388 += 1, R347 += 1, R348 += 1 };
  s0 -> s3 [85, 85] { R388 += 1, R348 += 1 };
  s0 -> s1 [86, 65535] { R388 += 1, R348 += 1 };
  s1 -> s1 [0, 68] { R388 += 1, R348 += 1 };
  s1 -> s3 [85, 85] { R388 += 1, R348 += 1 };
  s1 -> s1 [86, 65535] { R388 += 1, R348 += 1 };
  s2 -> s1 [0, 68] { R388 += 1, R348 += 1 };
  s2 -> s2 [0, 65535] { R388 += 1, R347 += 1, R348 += 1 };
  s2 -> s3 [85, 85] { R388 += 1, R348 += 1 };
  s2 -> s1 [86, 65535] { R388 += 1, R348 += 1 };
  s3 -> s3 [0, 68] { R388 += 1, R348 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R388 += 1 };
  s3 -> s3 [85, 65535] { R388 += 1, R348 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 65535] { R390 += 1, R349 += 1, R350 += 1 };
  s0 -> s0 [0, 65535] { R389 += 1, R390 += 1 };
  s0 -> s2 [0, 65535] { R390 += 1, R350 += 1, R38 += 1 };
  s1 -> s1 [0, 65535] { R390 += 1, R349 += 1, R350 += 1 };
  s1 -> s2 [0, 65535] { R390 += 1, R350 += 1, R38 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R390 += 1, R350 += 1, R38 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R390 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R390 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 84] { R392 += 1, R352 += 1 };
  s0 -> s2 [0, 65535] { R392 += 1, R351 += 1, R352 += 1 };
  s0 -> s0 [0, 65535] { R391 += 1, R392 += 1 };
  s0 -> s3 [0, 65535] { R392 += 1, R352 += 1, R40 += 1 };
  s0 -> s1 [86, 65535] { R392 += 1, R352 += 1 };
  s1 -> s1 [0, 84] { R392 += 1, R352 += 1 };
  s1 -> s1 [0, 65535] { R392 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [86, 65535] { R392 += 1, R352 += 1 };
  s2 -> s1 [0, 84] { R392 += 1, R352 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R392 += 1, R351 += 1, R352 += 1 };
  s2 -> s3 [0, 65535] { R392 += 1, R352 += 1, R40 += 1 };
  s2 -> s1 [86, 65535] { R392 += 1, R352 += 1 };
  s3 -> s1 [0, 84] { R392 += 1, R352 += 1 };
  s3 -> s4 [0, 65535] { R392 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R392 += 1, R352 += 1, R40 += 1 };
  s3 -> s1 [86, 65535] { R392 += 1, R352 += 1 };
  s4 -> s4 [0, 65535] { R392 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 84] { R394 += 1, R354 += 1, R264 += 1 };
  s0 -> s0 [0, 65535] { R393 += 1, R394 += 1 };
  s0 -> s2 [0, 65535] { R394 += 1, R353 += 1, R354 += 1 };
  s0 -> s1 [0, 65535] { R394 += 1, R354 += 1 };
  s0 -> s1 [86, 65535] { R394 += 1, R354 += 1, R264 += 1 };
  s1 -> s1 [0, 84] { R394 += 1, R354 += 1, R264 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R394 += 1, R354 += 1 };
  s1 -> s4 [0, 65535] { R394 += 1 };
  s1 -> s1 [86, 65535] { R394 += 1, R354 += 1, R264 += 1 };
  s2 -> s1 [0, 84] { R394 += 1, R354 += 1, R264 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R394 += 1, R353 += 1, R354 += 1 };
  s2 -> s1 [0, 65535] { R394 += 1, R354 += 1 };
  s2 -> s1 [86, 65535] { R394 += 1, R354 += 1, R264 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R394 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 65535] { R396 += 1, R356 += 1 };
  s0 -> s0 [0, 65535] { R395 += 1, R396 += 1 };
  s0 -> s2 [0, 65535] { R396 += 1, R356 += 1, R341 += 1, R342 += 1 };
  s0 -> s3 [0, 65535] { R396 += 1, R355 += 1, R356 += 1 };
  s1 -> s1 [0, 65535] { R396 += 1, R356 += 1 };
  s1 -> s5 [0, 65535] { R396 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R396 += 1, R356 += 1 };
  s2 -> s5 [0, 65535] { R396 += 1 };
  s2 -> s2 [0, 65535] { R396 += 1, R356 += 1, R341 += 1, R342 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R396 += 1, R356 += 1 };
  s3 -> s2 [0, 65535] { R396 += 1, R356 += 1, R341 += 1, R342 += 1 };
  s3 -> s3 [0, 65535] { R396 += 1, R355 += 1, R356 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R396 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_21 {
  init s0;
  s0 -> s0 [0, 65535] { R397 += 1, R398 += 1 };
  s0 -> s1 [0, 65535] { R398 += 1, R357 += 1, R358 += 1 };
  s0 -> s2 [0, 65535] { R398 += 1, R358 += 1, R16 += 1 };
  s1 -> s1 [0, 65535] { R398 += 1, R357 += 1, R358 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R398 += 1, R358 += 1, R16 += 1 };
  s2 -> s3 [0, 65535] { R398 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R398 += 1, R358 += 1, R16 += 1 };
  s3 -> s3 [0, 65535] { R398 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 67] { R400 += 1, R360 += 1 };
  s0 -> s0 [0, 65535] { R399 += 1, R400 += 1 };
  s0 -> s2 [0, 65535] { R400 += 1, R359 += 1, R360 += 1 };
  s0 -> s3 [68, 68] { R400 += 1, R360 += 1 };
  s0 -> s4 [68, 68] { R400 += 1, R360 += 1 };
  s0 -> s1 [86, 65535] { R400 += 1, R360 += 1 };
  s1 -> s1 [0, 67] { R400 += 1, R360 += 1 };
  s1 -> s1 [0, 65535] { R400 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [68, 68] { R400 += 1, R360 += 1 };
  s1 -> s4 [68, 68] { R400 += 1, R360 += 1 };
  s1 -> s1 [86, 65535] { R400 += 1, R360 += 1 };
  s2 -> s1 [0, 67] { R400 += 1, R360 += 1 };
  s2 -> s2 [0, 65535] { R400 += 1, R359 += 1, R360 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [68, 68] { R400 += 1, R360 += 1 };
  s2 -> s4 [68, 68] { R400 += 1, R360 += 1 };
  s2 -> s1 [86, 65535] { R400 += 1, R360 += 1 };
  s3 -> s3 [0, 65535] { R400 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 68] { R400 += 1, R360 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R400 += 1 };
  s4 -> s4 [86, 65535] { R400 += 1, R360 += 1 };
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 67] { R402 += 1, R362 += 1, R37 += 1 };
  s0 -> s2 [0, 65535] { R402 += 1, R361 += 1, R362 += 1 };
  s0 -> s0 [0, 65535] { R401 += 1, R402 += 1 };
  s0 -> s3 [68, 68] { R402 += 1, R362 += 1, R37 += 1 };
  s0 -> s4 [68, 68] { R402 += 1, R362 += 1, R37 += 1 };
  s0 -> s1 [69, 65535] { R402 += 1, R362 += 1, R37 += 1 };
  s1 -> s1 [0, 67] { R402 += 1, R362 += 1, R37 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R402 += 1 };
  s1 -> s3 [68, 68] { R402 += 1, R362 += 1, R37 += 1 };
  s1 -> s4 [68, 68] { R402 += 1, R362 += 1, R37 += 1 };
  s1 -> s1 [69, 65535] { R402 += 1, R362 += 1, R37 += 1 };
  s2 -> s1 [0, 67] { R402 += 1, R362 += 1, R37 += 1 };
  s2 -> s2 [0, 65535] { R402 += 1, R361 += 1, R362 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [68, 68] { R402 += 1, R362 += 1, R37 += 1 };
  s2 -> s4 [68, 68] { R402 += 1, R362 += 1, R37 += 1 };
  s2 -> s1 [69, 65535] { R402 += 1, R362 += 1, R37 += 1 };
  s3 -> s6 [0, 65535] { R402 += 1 };
  s3 -> s3 [0, 65535] { R402 += 1, R362 += 1, R37 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R402 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R402 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 67] { R404 += 1, R364 += 1, R39 += 1 };
  s0 -> s0 [0, 65535] { R403 += 1, R404 += 1 };
  s0 -> s2 [0, 65535] { R404 += 1, R363 += 1, R364 += 1 };
  s0 -> s3 [68, 68] { R404 += 1, R364 += 1, R39 += 1 };
  s0 -> s4 [68, 68] { R404 += 1, R364 += 1, R39 += 1 };
  s0 -> s1 [69, 65535] { R404 += 1, R364 += 1, R39 += 1 };
  s1 -> s1 [0, 67] { R404 += 1, R364 += 1, R39 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R404 += 1 };
  s1 -> s3 [68, 68] { R404 += 1, R364 += 1, R39 += 1 };
  s1 -> s4 [68, 68] { R404 += 1, R364 += 1, R39 += 1 };
  s1 -> s1 [69, 65535] { R404 += 1, R364 += 1, R39 += 1 };
  s2 -> s1 [0, 67] { R404 += 1, R364 += 1, R39 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R404 += 1, R363 += 1, R364 += 1 };
  s2 -> s3 [68, 68] { R404 += 1, R364 += 1, R39 += 1 };
  s2 -> s4 [68, 68] { R404 += 1, R364 += 1, R39 += 1 };
  s2 -> s1 [69, 65535] { R404 += 1, R364 += 1, R39 += 1 };
  s3 -> s3 [0, 65535] { R404 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R404 += 1, R364 += 1, R39 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R404 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R404 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 67] { R406 += 1, R366 += 1, R262 += 1 };
  s0 -> s2 [0, 67] { R406 += 1, R366 += 1, R261 += 1, R262 += 1 };
  s0 -> s0 [0, 65535] { R405 += 1, R406 += 1 };
  s0 -> s3 [0, 65535] { R406 += 1, R365 += 1, R366 += 1 };
  s0 -> s4 [68, 68] { R406 += 1, R366 += 1, R262 += 1 };
  s0 -> s5 [68, 68] { R406 += 1, R366 += 1, R262 += 1 };
  s0 -> s6 [68, 68] { R406 += 1, R366 += 1, R261 += 1, R262 += 1 };
  s0 -> s7 [68, 68] { R406 += 1, R366 += 1, R261 += 1, R262 += 1 };
  s0 -> s1 [69, 84] { R406 += 1, R366 += 1, R262 += 1 };
  s0 -> s2 [69, 65535] { R406 += 1, R366 += 1, R261 += 1, R262 += 1 };
  s0 -> s1 [86, 65535] { R406 += 1, R366 += 1, R262 += 1 };
  s1 -> s1 [0, 67] { R406 += 1, R366 += 1, R262 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s1 [0, 65535] { R406 += 1 };
  s1 -> s4 [68, 68] { R406 += 1, R366 += 1 };
  s1 -> s5 [68, 68] { R406 += 1, R366 += 1 };
  s1 -> s1 [69, 84] { R406 += 1, R366 += 1, R262 += 1 };
  s1 -> s1 [69, 65535] { R406 += 1, R366 += 1 };
  s1 -> s1 [86, 65535] { R406 += 1, R366 += 1, R262 += 1 };
  s2 -> s1 [0, 67] { R406 += 1, R366 += 1, R262 += 1 };
  s2 -> s2 [0, 67] { R406 += 1, R366 += 1, R261 += 1, R262 += 1 };
  s2 -> s4 [68, 68] { R406 += 1, R366 += 1, R262 += 1 };
  s2 -> s5 [68, 68] { R406 += 1, R366 += 1, R262 += 1 };
  s2 -> s6 [68, 68] { R406 += 1, R366 += 1, R261 += 1, R262 += 1 };
  s2 -> s7 [68, 68] { R406 += 1, R366 += 1, R261 += 1, R262 += 1 };
  s2 -> s1 [69, 84] { R406 += 1, R366 += 1, R262 += 1 };
  s2 -> s2 [69, 65535] { R406 += 1, R366 += 1, R261 += 1, R262 += 1 };
  s2 -> s1 [86, 65535] { R406 += 1, R366 += 1, R262 += 1 };
  s3 -> s1 [0, 67] { R406 += 1, R366 += 1, R262 += 1 };
  s3 -> s2 [0, 67] { R406 += 1, R366 += 1, R261 += 1, R262 += 1 };
  s3 -> s3 [0, 65535] { R406 += 1, R365 += 1, R366 += 1 };
  s3 -> s4 [68, 68] { R406 += 1, R366 += 1, R262 += 1 };
  s3 -> s5 [68, 68] { R406 += 1, R366 += 1, R262 += 1 };
  s3 -> s6 [68, 68] { R406 += 1, R366 += 1, R261 += 1, R262 += 1 };
  s3 -> s7 [68, 68] { R406 += 1, R366 += 1, R261 += 1, R262 += 1 };
  s3 -> s1 [69, 84] { R406 += 1, R366 += 1, R262 += 1 };
  s3 -> s2 [69, 65535] { R406 += 1, R366 += 1, R261 += 1, R262 += 1 };
  s3 -> s1 [86, 65535] { R406 += 1, R366 += 1, R262 += 1 };
  s4 -> s4 [0, 84] { R406 += 1, R366 += 1, R262 += 1 };
  s4 -> s4 [0, 65535] { R406 += 1, R366 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s9 [0, 65535] { R406 += 1 };
  s4 -> s4 [86, 65535] { R406 += 1, R366 += 1, R262 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s5 [0, 65535] { R406 += 1 };
  s7 -> s4 [0, 84] { R406 += 1, R366 += 1, R262 += 1 };
  s7 -> s7 [0, 65535] { R406 += 1, R366 += 1, R261 += 1, R262 += 1 };
  s7 -> s4 [86, 65535] { R406 += 1, R366 += 1, R262 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R406 += 1 };
  accepting s4, s8, s5, s9, s1;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 67] { R408 += 1, R368 += 1, R338 += 1, R339 += 1 };
  s0 -> s2 [0, 67] { R408 += 1, R368 += 1, R337 += 1, R338 += 1 };
  s0 -> s3 [0, 65535] { R408 += 1, R367 += 1, R368 += 1 };
  s0 -> s0 [0, 65535] { R407 += 1, R408 += 1 };
  s0 -> s4 [68, 68] { R408 += 1, R368 += 1, R337 += 1, R338 += 1 };
  s0 -> s5 [68, 68] { R408 += 1, R368 += 1, R338 += 1, R339 += 1 };
  s0 -> s6 [68, 68] { R408 += 1, R368 += 1, R337 += 1, R338 += 1 };
  s0 -> s7 [68, 68] { R408 += 1, R368 += 1, R338 += 1, R339 += 1 };
  s0 -> s1 [69, 65535] { R408 += 1, R368 += 1, R338 += 1, R339 += 1 };
  s0 -> s2 [69, 65535] { R408 += 1, R368 += 1, R337 += 1, R338 += 1 };
  s1 -> s1 [0, 67] { R408 += 1, R368 += 1, R338 += 1, R339 += 1 };
  s1 -> s1 [0, 65535] { R408 += 1 };
  s1 -> s9 [0, 65535];
  s1 -> s5 [68, 68] { R408 += 1, R368 += 1, R338 += 1, R339 += 1 };
  s1 -> s7 [68, 68] { R408 += 1, R368 += 1, R338 += 1, R339 += 1 };
  s1 -> s1 [69, 65535] { R408 += 1, R368 += 1, R338 += 1, R339 += 1 };
  s2 -> s1 [0, 67] { R408 += 1, R368 += 1, R338 += 1, R339 += 1 };
  s2 -> s2 [0, 67] { R408 += 1, R368 += 1, R337 += 1, R338 += 1 };
  s2 -> s4 [68, 68] { R408 += 1, R368 += 1, R337 += 1, R338 += 1 };
  s2 -> s5 [68, 68] { R408 += 1, R368 += 1, R338 += 1, R339 += 1 };
  s2 -> s6 [68, 68] { R408 += 1, R368 += 1, R337 += 1, R338 += 1 };
  s2 -> s7 [68, 68] { R408 += 1, R368 += 1, R338 += 1, R339 += 1 };
  s2 -> s1 [69, 65535] { R408 += 1, R368 += 1, R338 += 1, R339 += 1 };
  s2 -> s2 [69, 65535] { R408 += 1, R368 += 1, R337 += 1, R338 += 1 };
  s3 -> s1 [0, 67] { R408 += 1, R368 += 1, R338 += 1, R339 += 1 };
  s3 -> s2 [0, 67] { R408 += 1, R368 += 1, R337 += 1, R338 += 1 };
  s3 -> s3 [0, 65535] { R408 += 1, R367 += 1, R368 += 1 };
  s3 -> s4 [68, 68] { R408 += 1, R368 += 1, R337 += 1, R338 += 1 };
  s3 -> s5 [68, 68] { R408 += 1, R368 += 1, R338 += 1, R339 += 1 };
  s3 -> s6 [68, 68] { R408 += 1, R368 += 1, R337 += 1, R338 += 1 };
  s3 -> s7 [68, 68] { R408 += 1, R368 += 1, R338 += 1, R339 += 1 };
  s3 -> s1 [69, 65535] { R408 += 1, R368 += 1, R338 += 1, R339 += 1 };
  s3 -> s2 [69, 65535] { R408 += 1, R368 += 1, R337 += 1, R338 += 1 };
  s4 -> s4 [0, 65535] { R408 += 1, R368 += 1, R337 += 1, R338 += 1 };
  s4 -> s7 [0, 65535] { R408 += 1, R368 += 1, R338 += 1, R339 += 1 };
  s5 -> s9 [0, 65535];
  s5 -> s5 [0, 65535] { R408 += 1 };
  s7 -> s8 [0, 65535] { R408 += 1 };
  s7 -> s9 [0, 65535];
  s7 -> s7 [0, 65535] { R408 += 1, R368 += 1, R338 += 1, R339 += 1 };
  s8 -> s8 [0, 65535] { R408 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s8, s5, s9, s1, s7;
};
};
synchronised {  // Automata constraining P30
automaton P30_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
synchronised {  // Automata constraining P31
automaton P31_0 {
  init s0;
  s0 -> s1 [9, 9];
  accepting s1;
};
};
synchronised {  // Automata constraining P33
automaton P33_0 {
  init s0;
  s0 -> s1 [13, 13];
  accepting s1;
};
};
synchronised {  // Automata constraining P32
automaton P32_0 {
  init s0;
  s0 -> s1 [10, 10];
  accepting s1;
};
};
synchronised {  // Automata constraining P34
automaton P34_0 {
  init s0;
  s0 -> s1 [11, 11];
  accepting s1;
};
};
constraint R1 = R356 && R2 - R408 = 1 && R17 - R356 = -1 && R18 = R356 && R19 - R356 = -1 && R20 = R356 && R21 = 0 && R22 = 1 && R23 = 0 && R24 = 1 && R25 = R408 && R26 - R408 = 1 && R27 = R408 && R28 - R408 = 1 && R29 = 0 && R30 = 1 && R31 = 0 && R32 = 1 && R343 = 0 && R344 = R356 && R345 = 0 && R346 = R356 && R347 = 0 && R348 = R356 && R349 = 0 && R350 = R356 && R351 = 0 && R352 = R356 && R353 = 0 && R354 = R356 && R355 = 0 && R365 = 0 && R366 = 0 && R367 = 0 && R368 = 0 && R369 = 0 && R370 = R408 && R371 = 0 && R372 = R408 && R373 = 0 && R374 = R408 && R375 = 0 && R376 = R408 && R377 = 0 && R378 = R408 && R379 = 0 && R380 = R408 && R381 = 0 && R382 = R408 && R383 = 0 && R384 = R408 && R385 = 0 && R386 = R408 && R387 = 0 && R388 = R408 && R389 = 0 && R390 = R408 && R391 = 0 && R392 = R408 && R393 = 0 && R394 = R408 && R395 = 0 && R396 = R408 && R397 = 0 && R398 = R408 && R399 = 0 && R400 = R408 && R401 = 0 && R402 = R408 && R403 = 0 && R404 = R408 && R405 = 0 && R406 = R408 && R407 = 0 && R10 < 1 && R13 < 1 && -1*R38 + -1*R37 < 1 && R40 + R39 < 1 && 0 < R356 && -1 < R408 && (R38 + R37 != 0 || R342 + R339 = 0 || (R263 + R261 = 0 && R264 + R262 = 0)) && (R38 + R37 != 0 || R342 + R339 = 0 || (R340 + R337 = 0 && R341 + R338 = 0)) && (R263 + R261 != 0 || R38 + R37 + -1*R264 + -1*R262 = 0 || R38 + R37 < 1) && (R340 + R337 != 0 || R38 + R37 + -1*R341 + -1*R338 = 0 || R38 + R37 < 1) && (R16 = 0 || (R357 = 0 && R358 = 0)) && (R16 = 0 || (R359 = 0 && R360 = 0)) && (R16 = 0 || (R361 = 0 && R362 = 0)) && (R16 = 0 || (R363 = 0 && R364 = 0)) && (R263 + R261 = 0 || R38 + R37 < 1) && (R340 + R337 = 0 || R38 + R37 < 1);
// End of Parikh automata intersection problem
