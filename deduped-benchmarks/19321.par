// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R10, R13, R15, R16, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R261, R262, R263, R264, R27, R28, R29, R3, R30, R31, R32, R37, R38, R39, R4, R40, R409, R410, R411, R412, R413, R414, R415, R416, R417, R418, R419, R420, R421, R422, R423, R424, R425, R426, R427, R428, R429, R430, R431, R432, R433, R434, R435, R436, R437, R438, R439, R440, R441, R442, R443, R444, R445, R446, R447, R448, R449, R450, R451, R452, R453, R454, R455, R456, R457, R458, R459, R460, R461, R462, R463, R464, R465, R466, R467, R468, R469, R470, R471, R472, R473, R474, R475, R476, R477, R478, R479, R480, R5, R6;
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [100, 100];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R13 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s0 [0, 65535] { R25 += 1, R26 += 1 };
  s0 -> s1 [12, 12] { R26 += 1 };
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value2_4 {
  init s0;
  s0 -> s0 [0, 65535] { R27 += 1, R28 += 1 };
  s0 -> s1 [0, 65535] { R28 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R28 += 1, R5 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 8] { R30 += 1 };
  s0 -> s0 [0, 65535] { R29 += 1, R30 += 1 };
  s0 -> s2 [9, 13] { R30 += 1 };
  s0 -> s1 [14, 31] { R30 += 1 };
  s0 -> s2 [32, 32] { R30 += 1 };
  s0 -> s1 [33, 65535] { R30 += 1 };
  s1 -> s1 [0, 65535] { R30 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R30 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_6 {
  init s0;
  s0 -> s0 [0, 65535] { R31 += 1, R32 += 1 };
  s0 -> s1 [0, 65535] { R32 += 1, R6 += 1 };
  s1 -> s1 [0, 65535] { R32 += 1, R6 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 64] { R442 += 1 };
  s0 -> s0 [0, 65535] { R441 += 1, R442 += 1 };
  s0 -> s2 [68, 68] { R442 += 1 };
  s0 -> s1 [69, 65535] { R442 += 1 };
  s1 -> s1 [0, 64] { R442 += 1 };
  s1 -> s2 [68, 68] { R442 += 1 };
  s1 -> s1 [69, 65535] { R442 += 1 };
  s2 -> s2 [0, 64] { R442 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [68, 65535] { R442 += 1 };
  accepting s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R444 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R443 += 1, R444 += 1 };
  s1 -> s1 [0, 65535] { R444 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 67] { R446 += 1 };
  s0 -> s2 [0, 65535] { R446 += 1, R10 += 1 };
  s0 -> s0 [0, 65535] { R445 += 1, R446 += 1 };
  s0 -> s3 [68, 68] { R446 += 1 };
  s0 -> s1 [69, 65535] { R446 += 1 };
  s1 -> s1 [0, 67] { R446 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [68, 68] { R446 += 1 };
  s1 -> s1 [69, 65535] { R446 += 1 };
  s2 -> s1 [0, 67] { R446 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R446 += 1, R10 += 1 };
  s2 -> s3 [68, 68] { R446 += 1 };
  s2 -> s1 [69, 65535] { R446 += 1 };
  s3 -> s3 [0, 65535] { R446 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 8] { R448 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R447 += 1, R448 += 1 };
  s0 -> s2 [0, 65535] { R448 += 1, R17 += 1, R18 += 1 };
  s0 -> s3 [9, 13] { R448 += 1, R18 += 1 };
  s0 -> s1 [14, 31] { R448 += 1, R18 += 1 };
  s0 -> s3 [32, 32] { R448 += 1, R18 += 1 };
  s0 -> s1 [33, 65535] { R448 += 1, R18 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R448 += 1 };
  s1 -> s1 [0, 65535] { R448 += 1, R18 += 1 };
  s2 -> s1 [0, 8] { R448 += 1, R18 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R448 += 1, R17 += 1, R18 += 1 };
  s2 -> s3 [9, 13] { R448 += 1, R18 += 1 };
  s2 -> s1 [14, 31] { R448 += 1, R18 += 1 };
  s2 -> s3 [32, 32] { R448 += 1, R18 += 1 };
  s2 -> s1 [33, 65535] { R448 += 1, R18 += 1 };
  s3 -> s1 [0, 65535] { R448 += 1, R18 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R448 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 65535] { R450 += 1, R19 += 1, R20 += 1 };
  s0 -> s0 [0, 65535] { R449 += 1, R450 += 1 };
  s0 -> s2 [0, 65535] { R450 += 1, R20 += 1, R3 += 1 };
  s1 -> s1 [0, 65535] { R450 += 1, R19 += 1, R20 += 1 };
  s1 -> s2 [0, 65535] { R450 += 1, R20 += 1, R3 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R450 += 1 };
  s2 -> s2 [0, 65535] { R450 += 1, R20 += 1, R3 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R450 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 8] { R452 += 1, R22 += 1 };
  s0 -> s0 [0, 65535] { R451 += 1, R452 += 1 };
  s0 -> s2 [0, 65535] { R452 += 1, R21 += 1, R22 += 1 };
  s0 -> s3 [9, 13] { R452 += 1, R22 += 1 };
  s0 -> s1 [14, 31] { R452 += 1, R22 += 1 };
  s0 -> s3 [32, 32] { R452 += 1, R22 += 1 };
  s0 -> s1 [33, 65535] { R452 += 1, R22 += 1 };
  s1 -> s5 [0, 65535] { R452 += 1 };
  s1 -> s1 [0, 65535] { R452 += 1, R22 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R452 += 1, R22 += 1 };
  s2 -> s2 [0, 65535] { R452 += 1, R21 += 1, R22 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R452 += 1, R22 += 1 };
  s2 -> s1 [14, 31] { R452 += 1, R22 += 1 };
  s2 -> s3 [32, 32] { R452 += 1, R22 += 1 };
  s2 -> s1 [33, 65535] { R452 += 1, R22 += 1 };
  s3 -> s1 [0, 65535] { R452 += 1, R22 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R452 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s0 [0, 65535] { R453 += 1, R454 += 1 };
  s0 -> s1 [0, 65535] { R454 += 1, R24 += 1, R4 += 1 };
  s0 -> s2 [0, 65535] { R454 += 1, R23 += 1, R24 += 1 };
  s1 -> s4 [0, 65535] { R454 += 1 };
  s1 -> s1 [0, 65535] { R454 += 1, R24 += 1, R4 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R454 += 1, R24 += 1, R4 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R454 += 1, R23 += 1, R24 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R454 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 67] { R456 += 1, R416 += 1 };
  s0 -> s0 [0, 65535] { R455 += 1, R456 += 1 };
  s0 -> s2 [0, 65535] { R456 += 1, R415 += 1, R416 += 1 };
  s0 -> s1 [69, 65535] { R456 += 1, R416 += 1 };
  s1 -> s1 [0, 67] { R456 += 1, R416 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R456 += 1 };
  s1 -> s1 [69, 65535] { R456 += 1, R416 += 1 };
  s2 -> s1 [0, 67] { R456 += 1, R416 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R456 += 1, R415 += 1, R416 += 1 };
  s2 -> s1 [69, 65535] { R456 += 1, R416 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 65535] { R458 += 1, R417 += 1, R418 += 1 };
  s0 -> s2 [0, 65535] { R458 += 1, R418 += 1, R15 += 1 };
  s0 -> s0 [0, 65535] { R457 += 1, R458 += 1 };
  s1 -> s1 [0, 65535] { R458 += 1, R417 += 1, R418 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R458 += 1, R418 += 1, R15 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R458 += 1, R418 += 1, R15 += 1 };
  s2 -> s4 [0, 65535] { R458 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R458 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 68] { R460 += 1, R420 += 1 };
  s0 -> s0 [0, 65535] { R459 += 1, R460 += 1 };
  s0 -> s2 [0, 65535] { R460 += 1, R419 += 1, R420 += 1 };
  s0 -> s3 [85, 85] { R460 += 1, R420 += 1 };
  s0 -> s1 [86, 65535] { R460 += 1, R420 += 1 };
  s1 -> s1 [0, 68] { R460 += 1, R420 += 1 };
  s1 -> s3 [85, 85] { R460 += 1, R420 += 1 };
  s1 -> s1 [86, 65535] { R460 += 1, R420 += 1 };
  s2 -> s1 [0, 68] { R460 += 1, R420 += 1 };
  s2 -> s2 [0, 65535] { R460 += 1, R419 += 1, R420 += 1 };
  s2 -> s3 [85, 85] { R460 += 1, R420 += 1 };
  s2 -> s1 [86, 65535] { R460 += 1, R420 += 1 };
  s3 -> s3 [0, 68] { R460 += 1, R420 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R460 += 1 };
  s3 -> s3 [85, 65535] { R460 += 1, R420 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 65535] { R462 += 1, R421 += 1, R422 += 1 };
  s0 -> s0 [0, 65535] { R461 += 1, R462 += 1 };
  s0 -> s2 [0, 65535] { R462 += 1, R422 += 1, R38 += 1 };
  s1 -> s1 [0, 65535] { R462 += 1, R421 += 1, R422 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R462 += 1, R422 += 1, R38 += 1 };
  s2 -> s3 [0, 65535] { R462 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R462 += 1, R422 += 1, R38 += 1 };
  s3 -> s3 [0, 65535] { R462 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 84] { R464 += 1, R424 += 1 };
  s0 -> s0 [0, 65535] { R463 += 1, R464 += 1 };
  s0 -> s2 [0, 65535] { R464 += 1, R424 += 1, R40 += 1 };
  s0 -> s3 [0, 65535] { R464 += 1, R423 += 1, R424 += 1 };
  s0 -> s1 [86, 65535] { R464 += 1, R424 += 1 };
  s1 -> s1 [0, 84] { R464 += 1, R424 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R464 += 1 };
  s1 -> s1 [86, 65535] { R464 += 1, R424 += 1 };
  s2 -> s1 [0, 84] { R464 += 1, R424 += 1 };
  s2 -> s2 [0, 65535] { R464 += 1, R424 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R464 += 1 };
  s2 -> s1 [86, 65535] { R464 += 1, R424 += 1 };
  s3 -> s1 [0, 84] { R464 += 1, R424 += 1 };
  s3 -> s2 [0, 65535] { R464 += 1, R424 += 1, R40 += 1 };
  s3 -> s3 [0, 65535] { R464 += 1, R423 += 1, R424 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [86, 65535] { R464 += 1, R424 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R464 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 84] { R466 += 1, R426 += 1, R264 += 1 };
  s0 -> s2 [0, 65535] { R466 += 1, R425 += 1, R426 += 1 };
  s0 -> s1 [0, 65535] { R466 += 1, R426 += 1 };
  s0 -> s0 [0, 65535] { R465 += 1, R466 += 1 };
  s0 -> s1 [86, 65535] { R466 += 1, R426 += 1, R264 += 1 };
  s1 -> s1 [0, 84] { R466 += 1, R426 += 1, R264 += 1 };
  s1 -> s4 [0, 65535] { R466 += 1 };
  s1 -> s1 [0, 65535] { R466 += 1, R426 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [86, 65535] { R466 += 1, R426 += 1, R264 += 1 };
  s2 -> s1 [0, 84] { R466 += 1, R426 += 1, R264 += 1 };
  s2 -> s2 [0, 65535] { R466 += 1, R425 += 1, R426 += 1 };
  s2 -> s1 [0, 65535] { R466 += 1, R426 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [86, 65535] { R466 += 1, R426 += 1, R264 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R466 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_20 {
  init s0;
  s0 -> s0 [0, 65535] { R467 += 1, R468 += 1 };
  s0 -> s1 [0, 65535] { R468 += 1, R428 += 1 };
  s0 -> s2 [0, 65535] { R468 += 1, R427 += 1, R428 += 1 };
  s1 -> s1 [0, 65535] { R468 += 1, R428 += 1 };
  s1 -> s4 [0, 65535] { R468 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R468 += 1, R428 += 1 };
  s2 -> s2 [0, 65535] { R468 += 1, R427 += 1, R428 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R468 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_21 {
  init s0;
  s0 -> s0 [0, 65535] { R469 += 1, R470 += 1 };
  s0 -> s1 [0, 65535] { R470 += 1, R429 += 1, R430 += 1 };
  s0 -> s2 [0, 65535] { R470 += 1, R430 += 1, R16 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R470 += 1, R429 += 1, R430 += 1 };
  s1 -> s2 [0, 65535] { R470 += 1, R430 += 1, R16 += 1 };
  s2 -> s3 [0, 65535] { R470 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R470 += 1, R430 += 1, R16 += 1 };
  s3 -> s3 [0, 65535] { R470 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 67] { R472 += 1, R432 += 1 };
  s0 -> s2 [0, 65535] { R472 += 1, R431 += 1, R432 += 1 };
  s0 -> s0 [0, 65535] { R471 += 1, R472 += 1 };
  s0 -> s3 [68, 68] { R472 += 1, R432 += 1 };
  s0 -> s4 [68, 68] { R472 += 1, R432 += 1 };
  s0 -> s1 [86, 65535] { R472 += 1, R432 += 1 };
  s1 -> s1 [0, 67] { R472 += 1, R432 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R472 += 1 };
  s1 -> s3 [68, 68] { R472 += 1, R432 += 1 };
  s1 -> s4 [68, 68] { R472 += 1, R432 += 1 };
  s1 -> s1 [86, 65535] { R472 += 1, R432 += 1 };
  s2 -> s1 [0, 67] { R472 += 1, R432 += 1 };
  s2 -> s2 [0, 65535] { R472 += 1, R431 += 1, R432 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [68, 68] { R472 += 1, R432 += 1 };
  s2 -> s4 [68, 68] { R472 += 1, R432 += 1 };
  s2 -> s1 [86, 65535] { R472 += 1, R432 += 1 };
  s3 -> s3 [0, 68] { R472 += 1, R432 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R472 += 1 };
  s3 -> s3 [86, 65535] { R472 += 1, R432 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R472 += 1 };
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 67] { R474 += 1, R434 += 1, R37 += 1 };
  s0 -> s0 [0, 65535] { R473 += 1, R474 += 1 };
  s0 -> s2 [0, 65535] { R474 += 1, R433 += 1, R434 += 1 };
  s0 -> s3 [68, 68] { R474 += 1, R434 += 1, R37 += 1 };
  s0 -> s4 [68, 68] { R474 += 1, R434 += 1, R37 += 1 };
  s0 -> s1 [69, 65535] { R474 += 1, R434 += 1, R37 += 1 };
  s1 -> s1 [0, 67] { R474 += 1, R434 += 1, R37 += 1 };
  s1 -> s1 [0, 65535] { R474 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [68, 68] { R474 += 1, R434 += 1, R37 += 1 };
  s1 -> s4 [68, 68] { R474 += 1, R434 += 1, R37 += 1 };
  s1 -> s1 [69, 65535] { R474 += 1, R434 += 1, R37 += 1 };
  s2 -> s1 [0, 67] { R474 += 1, R434 += 1, R37 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R474 += 1, R433 += 1, R434 += 1 };
  s2 -> s3 [68, 68] { R474 += 1, R434 += 1, R37 += 1 };
  s2 -> s4 [68, 68] { R474 += 1, R434 += 1, R37 += 1 };
  s2 -> s1 [69, 65535] { R474 += 1, R434 += 1, R37 += 1 };
  s3 -> s3 [0, 65535] { R474 += 1, R434 += 1, R37 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R474 += 1 };
  s4 -> s4 [0, 65535] { R474 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R474 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 67] { R476 += 1, R436 += 1, R39 += 1 };
  s0 -> s2 [0, 65535] { R476 += 1, R435 += 1, R436 += 1 };
  s0 -> s0 [0, 65535] { R475 += 1, R476 += 1 };
  s0 -> s3 [68, 68] { R476 += 1, R436 += 1, R39 += 1 };
  s0 -> s4 [68, 68] { R476 += 1, R436 += 1, R39 += 1 };
  s0 -> s1 [69, 65535] { R476 += 1, R436 += 1, R39 += 1 };
  s1 -> s1 [0, 67] { R476 += 1, R436 += 1, R39 += 1 };
  s1 -> s1 [0, 65535] { R476 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [68, 68] { R476 += 1, R436 += 1, R39 += 1 };
  s1 -> s4 [68, 68] { R476 += 1, R436 += 1, R39 += 1 };
  s1 -> s1 [69, 65535] { R476 += 1, R436 += 1, R39 += 1 };
  s2 -> s1 [0, 67] { R476 += 1, R436 += 1, R39 += 1 };
  s2 -> s2 [0, 65535] { R476 += 1, R435 += 1, R436 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [68, 68] { R476 += 1, R436 += 1, R39 += 1 };
  s2 -> s4 [68, 68] { R476 += 1, R436 += 1, R39 += 1 };
  s2 -> s1 [69, 65535] { R476 += 1, R436 += 1, R39 += 1 };
  s3 -> s6 [0, 65535] { R476 += 1 };
  s3 -> s3 [0, 65535] { R476 += 1, R436 += 1, R39 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R476 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R476 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 67] { R478 += 1, R438 += 1, R261 += 1, R262 += 1 };
  s0 -> s2 [0, 67] { R478 += 1, R438 += 1, R262 += 1 };
  s0 -> s0 [0, 65535] { R477 += 1, R478 += 1 };
  s0 -> s3 [0, 65535] { R478 += 1, R437 += 1, R438 += 1 };
  s0 -> s4 [68, 68] { R478 += 1, R438 += 1, R261 += 1, R262 += 1 };
  s0 -> s5 [68, 68] { R478 += 1, R438 += 1, R262 += 1 };
  s0 -> s6 [68, 68] { R478 += 1, R438 += 1, R262 += 1 };
  s0 -> s7 [68, 68] { R478 += 1, R438 += 1, R261 += 1, R262 += 1 };
  s0 -> s2 [69, 84] { R478 += 1, R438 += 1, R262 += 1 };
  s0 -> s1 [69, 65535] { R478 += 1, R438 += 1, R261 += 1, R262 += 1 };
  s0 -> s2 [86, 65535] { R478 += 1, R438 += 1, R262 += 1 };
  s1 -> s1 [0, 67] { R478 += 1, R438 += 1, R261 += 1, R262 += 1 };
  s1 -> s2 [0, 67] { R478 += 1, R438 += 1, R262 += 1 };
  s1 -> s4 [68, 68] { R478 += 1, R438 += 1, R261 += 1, R262 += 1 };
  s1 -> s5 [68, 68] { R478 += 1, R438 += 1, R262 += 1 };
  s1 -> s6 [68, 68] { R478 += 1, R438 += 1, R262 += 1 };
  s1 -> s7 [68, 68] { R478 += 1, R438 += 1, R261 += 1, R262 += 1 };
  s1 -> s2 [69, 84] { R478 += 1, R438 += 1, R262 += 1 };
  s1 -> s1 [69, 65535] { R478 += 1, R438 += 1, R261 += 1, R262 += 1 };
  s1 -> s2 [86, 65535] { R478 += 1, R438 += 1, R262 += 1 };
  s2 -> s2 [0, 67] { R478 += 1, R438 += 1, R262 += 1 };
  s2 -> s9 [0, 65535];
  s2 -> s2 [0, 65535] { R478 += 1 };
  s2 -> s5 [68, 68] { R478 += 1, R438 += 1 };
  s2 -> s6 [68, 68] { R478 += 1, R438 += 1 };
  s2 -> s2 [69, 84] { R478 += 1, R438 += 1, R262 += 1 };
  s2 -> s2 [69, 65535] { R478 += 1, R438 += 1 };
  s2 -> s2 [86, 65535] { R478 += 1, R438 += 1, R262 += 1 };
  s3 -> s1 [0, 67] { R478 += 1, R438 += 1, R261 += 1, R262 += 1 };
  s3 -> s2 [0, 67] { R478 += 1, R438 += 1, R262 += 1 };
  s3 -> s3 [0, 65535] { R478 += 1, R437 += 1, R438 += 1 };
  s3 -> s4 [68, 68] { R478 += 1, R438 += 1, R261 += 1, R262 += 1 };
  s3 -> s5 [68, 68] { R478 += 1, R438 += 1, R262 += 1 };
  s3 -> s6 [68, 68] { R478 += 1, R438 += 1, R262 += 1 };
  s3 -> s7 [68, 68] { R478 += 1, R438 += 1, R261 += 1, R262 += 1 };
  s3 -> s2 [69, 84] { R478 += 1, R438 += 1, R262 += 1 };
  s3 -> s1 [69, 65535] { R478 += 1, R438 += 1, R261 += 1, R262 += 1 };
  s3 -> s2 [86, 65535] { R478 += 1, R438 += 1, R262 += 1 };
  s5 -> s9 [0, 65535];
  s5 -> s5 [0, 65535] { R478 += 1 };
  s6 -> s6 [0, 84] { R478 += 1, R438 += 1, R262 += 1 };
  s6 -> s8 [0, 65535] { R478 += 1 };
  s6 -> s9 [0, 65535];
  s6 -> s6 [0, 65535] { R478 += 1, R438 += 1 };
  s6 -> s6 [86, 65535] { R478 += 1, R438 += 1, R262 += 1 };
  s7 -> s6 [0, 84] { R478 += 1, R438 += 1, R262 += 1 };
  s7 -> s7 [0, 65535] { R478 += 1, R438 += 1, R261 += 1, R262 += 1 };
  s7 -> s6 [86, 65535] { R478 += 1, R438 += 1, R262 += 1 };
  s8 -> s8 [0, 65535] { R478 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s8, s5, s2, s9, s6;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 67] { R480 += 1, R440 += 1, R409 += 1, R410 += 1 };
  s0 -> s2 [0, 67] { R480 += 1, R440 += 1, R410 += 1, R411 += 1 };
  s0 -> s0 [0, 65535] { R479 += 1, R480 += 1 };
  s0 -> s3 [0, 65535] { R480 += 1, R439 += 1, R440 += 1 };
  s0 -> s4 [68, 68] { R480 += 1, R440 += 1, R410 += 1, R411 += 1 };
  s0 -> s5 [68, 68] { R480 += 1, R440 += 1, R409 += 1, R410 += 1 };
  s0 -> s6 [68, 68] { R480 += 1, R440 += 1, R409 += 1, R410 += 1 };
  s0 -> s7 [68, 68] { R480 += 1, R440 += 1, R410 += 1, R411 += 1 };
  s0 -> s1 [69, 65535] { R480 += 1, R440 += 1, R409 += 1, R410 += 1 };
  s0 -> s2 [69, 65535] { R480 += 1, R440 += 1, R410 += 1, R411 += 1 };
  s1 -> s1 [0, 67] { R480 += 1, R440 += 1, R409 += 1, R410 += 1 };
  s1 -> s2 [0, 67] { R480 += 1, R440 += 1, R410 += 1, R411 += 1 };
  s1 -> s4 [68, 68] { R480 += 1, R440 += 1, R410 += 1, R411 += 1 };
  s1 -> s5 [68, 68] { R480 += 1, R440 += 1, R409 += 1, R410 += 1 };
  s1 -> s6 [68, 68] { R480 += 1, R440 += 1, R409 += 1, R410 += 1 };
  s1 -> s7 [68, 68] { R480 += 1, R440 += 1, R410 += 1, R411 += 1 };
  s1 -> s1 [69, 65535] { R480 += 1, R440 += 1, R409 += 1, R410 += 1 };
  s1 -> s2 [69, 65535] { R480 += 1, R440 += 1, R410 += 1, R411 += 1 };
  s2 -> s2 [0, 67] { R480 += 1, R440 += 1, R410 += 1, R411 += 1 };
  s2 -> s11 [0, 67] { R480 += 1, R440 += 1 };
  s2 -> s4 [68, 68] { R480 += 1, R440 += 1, R410 += 1, R411 += 1 };
  s2 -> s8 [68, 68] { R480 += 1, R440 += 1 };
  s2 -> s7 [68, 68] { R480 += 1, R440 += 1, R410 += 1, R411 += 1 };
  s2 -> s12 [68, 68] { R480 += 1, R440 += 1 };
  s2 -> s2 [69, 65535] { R480 += 1, R440 += 1, R410 += 1, R411 += 1 };
  s2 -> s11 [69, 65535] { R480 += 1, R440 += 1 };
  s3 -> s1 [0, 67] { R480 += 1, R440 += 1, R409 += 1, R410 += 1 };
  s3 -> s2 [0, 67] { R480 += 1, R440 += 1, R410 += 1, R411 += 1 };
  s3 -> s3 [0, 65535] { R480 += 1, R439 += 1, R440 += 1 };
  s3 -> s4 [68, 68] { R480 += 1, R440 += 1, R410 += 1, R411 += 1 };
  s3 -> s5 [68, 68] { R480 += 1, R440 += 1, R409 += 1, R410 += 1 };
  s3 -> s6 [68, 68] { R480 += 1, R440 += 1, R409 += 1, R410 += 1 };
  s3 -> s7 [68, 68] { R480 += 1, R440 += 1, R410 += 1, R411 += 1 };
  s3 -> s1 [69, 65535] { R480 += 1, R440 += 1, R409 += 1, R410 += 1 };
  s3 -> s2 [69, 65535] { R480 += 1, R440 += 1, R410 += 1, R411 += 1 };
  s4 -> s4 [0, 65535] { R480 += 1, R440 += 1, R410 += 1, R411 += 1 };
  s4 -> s8 [0, 65535] { R480 += 1, R440 += 1 };
  s5 -> s4 [0, 65535] { R480 += 1, R440 += 1, R410 += 1, R411 += 1 };
  s5 -> s5 [0, 65535] { R480 += 1, R440 += 1, R409 += 1, R410 += 1 };
  s8 -> s8 [0, 65535] { R480 += 1, R440 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [0, 65535] { R480 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R480 += 1 };
  s11 -> s11 [0, 67] { R480 += 1, R440 += 1 };
  s11 -> s11 [0, 65535] { R480 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s8 [68, 68] { R480 += 1, R440 += 1 };
  s11 -> s12 [68, 68] { R480 += 1, R440 += 1 };
  s11 -> s11 [69, 65535] { R480 += 1, R440 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R480 += 1 };
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining P30
automaton P30_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
synchronised {  // Automata constraining P31
automaton P31_0 {
  init s0;
  s0 -> s1 [9, 9];
  accepting s1;
};
};
synchronised {  // Automata constraining P33
automaton P33_0 {
  init s0;
  s0 -> s1 [13, 13];
  accepting s1;
};
};
synchronised {  // Automata constraining P32
automaton P32_0 {
  init s0;
  s0 -> s1 [10, 10];
  accepting s1;
};
};
synchronised {  // Automata constraining P34
automaton P34_0 {
  init s0;
  s0 -> s1 [11, 11];
  accepting s1;
};
};
constraint R1 = R428 && R2 - R480 = 1 && R17 - R428 = -1 && R18 = R428 && R19 - R428 = -1 && R20 = R428 && R21 = 0 && R22 = 1 && R23 = 0 && R24 = 1 && R25 = R480 && R26 - R480 = 1 && R27 = R480 && R28 - R480 = 1 && R29 = 0 && R30 = 1 && R31 = 0 && R32 = 1 && R415 = 0 && R416 = R428 && R417 = 0 && R418 = R428 && R419 = 0 && R420 = R428 && R421 = 0 && R422 = R428 && R423 = 0 && R424 = R428 && R425 = 0 && R426 = R428 && R427 = 0 && R437 = 0 && R438 = 0 && R439 = 0 && R440 = 0 && R441 = 0 && R442 = R480 && R443 = 0 && R444 = R480 && R445 = 0 && R446 = R480 && R447 = 0 && R448 = R480 && R449 = 0 && R450 = R480 && R451 = 0 && R452 = R480 && R453 = 0 && R454 = R480 && R455 = 0 && R456 = R480 && R457 = 0 && R458 = R480 && R459 = 0 && R460 = R480 && R461 = 0 && R462 = R480 && R463 = 0 && R464 = R480 && R465 = 0 && R466 = R480 && R467 = 0 && R468 = R480 && R469 = 0 && R470 = R480 && R471 = 0 && R472 = R480 && R473 = 0 && R474 = R480 && R475 = 0 && R476 = R480 && R477 = 0 && R478 = R480 && R479 = 0 && R10 < 1 && R13 < 1 && -1*R38 + -1*R37 < 1 && R40 + R39 < 1 && 0 < R428 && -1 < R480 && (R38 + R37 != 0 || R414 + R411 = 0 || (R263 + R261 = 0 && R264 + R262 = 0)) && (R38 + R37 != 0 || R414 + R411 = 0 || (R412 + R409 = 0 && R413 + R410 = 0)) && (R263 + R261 != 0 || R38 + R37 + -1*R264 + -1*R262 = 0 || R38 + R37 < 1) && (R412 + R409 != 0 || R38 + R37 + -1*R413 + -1*R410 = 0 || R38 + R37 < 1) && (R16 = 0 || (R429 = 0 && R430 = 0)) && (R16 = 0 || (R431 = 0 && R432 = 0)) && (R16 = 0 || (R433 = 0 && R434 = 0)) && (R16 = 0 || (R435 = 0 && R436 = 0)) && (R263 + R261 = 0 || R38 + R37 < 1) && (R412 + R409 = 0 || R38 + R37 < 1);
// End of Parikh automata intersection problem
