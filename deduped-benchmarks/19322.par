// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R10, R13, R15, R16, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R31, R32, R4, R485, R486, R487, R488, R489, R490, R491, R492, R5, R565, R566, R567, R568, R569, R570, R571, R572, R573, R574, R575, R576, R577, R578, R579, R580, R581, R582, R583, R584, R585, R586, R587, R588, R589, R590, R591, R592, R593, R594, R595, R596, R597, R598, R599, R6, R600, R601, R602, R603, R604, R605, R606, R607, R608, R609, R610, R611, R612, R613, R614, R615, R616, R617, R618, R619, R620, R621, R622, R623, R624, R625, R626, R627, R628, R629, R630, R631, R632, R633, R634, R635, R636;
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [100, 100];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R13 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s0 [0, 65535] { R25 += 1, R26 += 1 };
  s0 -> s1 [12, 12] { R26 += 1 };
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value2_4 {
  init s0;
  s0 -> s0 [0, 65535] { R27 += 1, R28 += 1 };
  s0 -> s1 [0, 65535] { R28 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R28 += 1, R5 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 8] { R30 += 1 };
  s0 -> s0 [0, 65535] { R29 += 1, R30 += 1 };
  s0 -> s2 [9, 13] { R30 += 1 };
  s0 -> s1 [14, 31] { R30 += 1 };
  s0 -> s2 [32, 32] { R30 += 1 };
  s0 -> s1 [33, 65535] { R30 += 1 };
  s1 -> s1 [0, 65535] { R30 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R30 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_6 {
  init s0;
  s0 -> s0 [0, 65535] { R31 += 1, R32 += 1 };
  s0 -> s1 [0, 65535] { R32 += 1, R6 += 1 };
  s1 -> s1 [0, 65535] { R32 += 1, R6 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 64] { R598 += 1 };
  s0 -> s0 [0, 65535] { R597 += 1, R598 += 1 };
  s0 -> s2 [68, 68] { R598 += 1 };
  s0 -> s1 [69, 65535] { R598 += 1 };
  s1 -> s1 [0, 64] { R598 += 1 };
  s1 -> s2 [68, 68] { R598 += 1 };
  s1 -> s1 [69, 65535] { R598 += 1 };
  s2 -> s2 [0, 64] { R598 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [68, 65535] { R598 += 1 };
  accepting s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R600 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R599 += 1, R600 += 1 };
  s1 -> s1 [0, 65535] { R600 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 67] { R602 += 1 };
  s0 -> s2 [0, 65535] { R602 += 1, R10 += 1 };
  s0 -> s0 [0, 65535] { R601 += 1, R602 += 1 };
  s0 -> s3 [68, 68] { R602 += 1 };
  s0 -> s1 [69, 65535] { R602 += 1 };
  s1 -> s1 [0, 67] { R602 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [68, 68] { R602 += 1 };
  s1 -> s1 [69, 65535] { R602 += 1 };
  s2 -> s1 [0, 67] { R602 += 1 };
  s2 -> s2 [0, 65535] { R602 += 1, R10 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [68, 68] { R602 += 1 };
  s2 -> s1 [69, 65535] { R602 += 1 };
  s3 -> s3 [0, 65535] { R602 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 8] { R604 += 1, R18 += 1 };
  s0 -> s2 [0, 65535] { R604 += 1, R17 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R603 += 1, R604 += 1 };
  s0 -> s3 [9, 13] { R604 += 1, R18 += 1 };
  s0 -> s1 [14, 31] { R604 += 1, R18 += 1 };
  s0 -> s3 [32, 32] { R604 += 1, R18 += 1 };
  s0 -> s1 [33, 65535] { R604 += 1, R18 += 1 };
  s1 -> s5 [0, 65535] { R604 += 1 };
  s1 -> s1 [0, 65535] { R604 += 1, R18 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R604 += 1, R18 += 1 };
  s2 -> s2 [0, 65535] { R604 += 1, R17 += 1, R18 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R604 += 1, R18 += 1 };
  s2 -> s1 [14, 31] { R604 += 1, R18 += 1 };
  s2 -> s3 [32, 32] { R604 += 1, R18 += 1 };
  s2 -> s1 [33, 65535] { R604 += 1, R18 += 1 };
  s3 -> s1 [0, 65535] { R604 += 1, R18 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R604 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 65535] { R606 += 1, R20 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R605 += 1, R606 += 1 };
  s0 -> s2 [0, 65535] { R606 += 1, R19 += 1, R20 += 1 };
  s1 -> s4 [0, 65535] { R606 += 1 };
  s1 -> s1 [0, 65535] { R606 += 1, R20 += 1, R3 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R606 += 1, R20 += 1, R3 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R606 += 1, R19 += 1, R20 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R606 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 8] { R608 += 1, R22 += 1 };
  s0 -> s2 [0, 65535] { R608 += 1, R21 += 1, R22 += 1 };
  s0 -> s0 [0, 65535] { R607 += 1, R608 += 1 };
  s0 -> s3 [9, 13] { R608 += 1, R22 += 1 };
  s0 -> s1 [14, 31] { R608 += 1, R22 += 1 };
  s0 -> s3 [32, 32] { R608 += 1, R22 += 1 };
  s0 -> s1 [33, 65535] { R608 += 1, R22 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R608 += 1 };
  s1 -> s1 [0, 65535] { R608 += 1, R22 += 1 };
  s2 -> s1 [0, 8] { R608 += 1, R22 += 1 };
  s2 -> s2 [0, 65535] { R608 += 1, R21 += 1, R22 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R608 += 1, R22 += 1 };
  s2 -> s1 [14, 31] { R608 += 1, R22 += 1 };
  s2 -> s3 [32, 32] { R608 += 1, R22 += 1 };
  s2 -> s1 [33, 65535] { R608 += 1, R22 += 1 };
  s3 -> s1 [0, 65535] { R608 += 1, R22 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R608 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 65535] { R610 += 1, R24 += 1, R4 += 1 };
  s0 -> s2 [0, 65535] { R610 += 1, R23 += 1, R24 += 1 };
  s0 -> s0 [0, 65535] { R609 += 1, R610 += 1 };
  s1 -> s4 [0, 65535] { R610 += 1 };
  s1 -> s1 [0, 65535] { R610 += 1, R24 += 1, R4 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R610 += 1, R24 += 1, R4 += 1 };
  s2 -> s2 [0, 65535] { R610 += 1, R23 += 1, R24 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R610 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 67] { R612 += 1, R572 += 1 };
  s0 -> s0 [0, 65535] { R611 += 1, R612 += 1 };
  s0 -> s2 [0, 65535] { R612 += 1, R571 += 1, R572 += 1 };
  s0 -> s1 [69, 65535] { R612 += 1, R572 += 1 };
  s1 -> s1 [0, 67] { R612 += 1, R572 += 1 };
  s1 -> s1 [0, 65535] { R612 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [69, 65535] { R612 += 1, R572 += 1 };
  s2 -> s1 [0, 67] { R612 += 1, R572 += 1 };
  s2 -> s2 [0, 65535] { R612 += 1, R571 += 1, R572 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [69, 65535] { R612 += 1, R572 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 65535] { R614 += 1, R573 += 1, R574 += 1 };
  s0 -> s2 [0, 65535] { R614 += 1, R574 += 1, R15 += 1 };
  s0 -> s0 [0, 65535] { R613 += 1, R614 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R614 += 1, R573 += 1, R574 += 1 };
  s1 -> s2 [0, 65535] { R614 += 1, R574 += 1, R15 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R614 += 1, R574 += 1, R15 += 1 };
  s2 -> s4 [0, 65535] { R614 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R614 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 68] { R616 += 1, R576 += 1 };
  s0 -> s0 [0, 65535] { R615 += 1, R616 += 1 };
  s0 -> s2 [0, 65535] { R616 += 1, R575 += 1, R576 += 1 };
  s0 -> s1 [85, 65535] { R616 += 1, R576 += 1 };
  s1 -> s1 [0, 68] { R616 += 1, R576 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R616 += 1 };
  s1 -> s1 [85, 65535] { R616 += 1, R576 += 1 };
  s2 -> s1 [0, 68] { R616 += 1, R576 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R616 += 1, R575 += 1, R576 += 1 };
  s2 -> s1 [85, 65535] { R616 += 1, R576 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 65535] { R618 += 1, R578 += 1, R486 += 1 };
  s0 -> s2 [0, 65535] { R618 += 1, R577 += 1, R578 += 1 };
  s0 -> s0 [0, 65535] { R617 += 1, R618 += 1 };
  s1 -> s1 [0, 65535] { R618 += 1, R578 += 1, R486 += 1 };
  s1 -> s4 [0, 65535] { R618 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R618 += 1, R578 += 1, R486 += 1 };
  s2 -> s2 [0, 65535] { R618 += 1, R577 += 1, R578 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R618 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 84] { R620 += 1, R580 += 1 };
  s0 -> s2 [0, 65535] { R620 += 1, R580 += 1, R488 += 1 };
  s0 -> s3 [0, 65535] { R620 += 1, R579 += 1, R580 += 1 };
  s0 -> s0 [0, 65535] { R619 += 1, R620 += 1 };
  s0 -> s1 [86, 65535] { R620 += 1, R580 += 1 };
  s1 -> s1 [0, 84] { R620 += 1, R580 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R620 += 1 };
  s1 -> s1 [86, 65535] { R620 += 1, R580 += 1 };
  s2 -> s1 [0, 84] { R620 += 1, R580 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R620 += 1, R580 += 1, R488 += 1 };
  s2 -> s5 [0, 65535] { R620 += 1 };
  s2 -> s1 [86, 65535] { R620 += 1, R580 += 1 };
  s3 -> s1 [0, 84] { R620 += 1, R580 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R620 += 1, R580 += 1, R488 += 1 };
  s3 -> s3 [0, 65535] { R620 += 1, R579 += 1, R580 += 1 };
  s3 -> s1 [86, 65535] { R620 += 1, R580 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R620 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 84] { R622 += 1, R582 += 1, R492 += 1 };
  s0 -> s2 [0, 65535] { R622 += 1, R581 += 1, R582 += 1 };
  s0 -> s3 [0, 65535] { R622 += 1, R582 += 1, R491 += 1, R492 += 1 };
  s0 -> s0 [0, 65535] { R621 += 1, R622 += 1 };
  s0 -> s1 [86, 65535] { R622 += 1, R582 += 1, R492 += 1 };
  s1 -> s1 [0, 84] { R622 += 1, R582 += 1, R492 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R622 += 1, R582 += 1 };
  s1 -> s5 [0, 65535] { R622 += 1 };
  s1 -> s1 [86, 65535] { R622 += 1, R582 += 1, R492 += 1 };
  s2 -> s1 [0, 84] { R622 += 1, R582 += 1, R492 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R622 += 1, R581 += 1, R582 += 1 };
  s2 -> s3 [0, 65535] { R622 += 1, R582 += 1, R491 += 1, R492 += 1 };
  s2 -> s1 [86, 65535] { R622 += 1, R582 += 1, R492 += 1 };
  s3 -> s1 [0, 84] { R622 += 1, R582 += 1, R492 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R622 += 1 };
  s3 -> s3 [0, 65535] { R622 += 1, R582 += 1, R491 += 1, R492 += 1 };
  s3 -> s1 [86, 65535] { R622 += 1, R582 += 1, R492 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R622 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 65535] { R624 += 1, R584 += 1, R569 += 1, R570 += 1 };
  s0 -> s0 [0, 65535] { R623 += 1, R624 += 1 };
  s0 -> s2 [0, 65535] { R624 += 1, R584 += 1 };
  s0 -> s3 [0, 65535] { R624 += 1, R583 += 1, R584 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R624 += 1, R584 += 1, R569 += 1, R570 += 1 };
  s1 -> s2 [0, 65535] { R624 += 1, R584 += 1 };
  s1 -> s5 [0, 65535] { R624 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R624 += 1, R584 += 1 };
  s2 -> s5 [0, 65535] { R624 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R624 += 1, R584 += 1, R569 += 1, R570 += 1 };
  s3 -> s2 [0, 65535] { R624 += 1, R584 += 1 };
  s3 -> s3 [0, 65535] { R624 += 1, R583 += 1, R584 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R624 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R626 += 1, R586 += 1, R16 += 1 };
  s0 -> s2 [0, 65535] { R626 += 1, R585 += 1, R586 += 1 };
  s0 -> s0 [0, 65535] { R625 += 1, R626 += 1 };
  s1 -> s4 [0, 65535] { R626 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R626 += 1, R586 += 1, R16 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R626 += 1, R586 += 1, R16 += 1 };
  s2 -> s2 [0, 65535] { R626 += 1, R585 += 1, R586 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R626 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 67] { R628 += 1, R588 += 1 };
  s0 -> s2 [0, 65535] { R628 += 1, R587 += 1, R588 += 1 };
  s0 -> s0 [0, 65535] { R627 += 1, R628 += 1 };
  s0 -> s3 [68, 68] { R628 += 1, R588 += 1 };
  s0 -> s4 [68, 68] { R628 += 1, R588 += 1 };
  s0 -> s5 [85, 85] { R628 += 1, R588 += 1 };
  s0 -> s1 [86, 65535] { R628 += 1, R588 += 1 };
  s1 -> s1 [0, 67] { R628 += 1, R588 += 1 };
  s1 -> s3 [68, 68] { R628 += 1, R588 += 1 };
  s1 -> s4 [68, 68] { R628 += 1, R588 += 1 };
  s1 -> s5 [85, 85] { R628 += 1, R588 += 1 };
  s1 -> s1 [86, 65535] { R628 += 1, R588 += 1 };
  s2 -> s1 [0, 67] { R628 += 1, R588 += 1 };
  s2 -> s2 [0, 65535] { R628 += 1, R587 += 1, R588 += 1 };
  s2 -> s3 [68, 68] { R628 += 1, R588 += 1 };
  s2 -> s4 [68, 68] { R628 += 1, R588 += 1 };
  s2 -> s5 [85, 85] { R628 += 1, R588 += 1 };
  s2 -> s1 [86, 65535] { R628 += 1, R588 += 1 };
  s4 -> s4 [0, 68] { R628 += 1, R588 += 1 };
  s4 -> s7 [85, 85] { R628 += 1, R588 += 1 };
  s4 -> s4 [86, 65535] { R628 += 1, R588 += 1 };
  s5 -> s5 [0, 67] { R628 += 1, R588 += 1 };
  s5 -> s5 [0, 65535] { R628 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [68, 68] { R628 += 1, R588 += 1 };
  s5 -> s8 [68, 68] { R628 += 1, R588 += 1 };
  s5 -> s5 [85, 65535] { R628 += 1, R588 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 68] { R628 += 1, R588 += 1 };
  s7 -> s7 [0, 65535] { R628 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [85, 65535] { R628 += 1, R588 += 1 };
  s8 -> s8 [0, 65535] { R628 += 1 };
  s8 -> s6 [0, 65535];
  accepting s5, s6, s7, s8;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 67] { R630 += 1, R590 += 1, R485 += 1 };
  s0 -> s2 [0, 65535] { R630 += 1, R589 += 1, R590 += 1 };
  s0 -> s0 [0, 65535] { R629 += 1, R630 += 1 };
  s0 -> s3 [68, 68] { R630 += 1, R590 += 1, R485 += 1 };
  s0 -> s4 [68, 68] { R630 += 1, R590 += 1, R485 += 1 };
  s0 -> s1 [69, 65535] { R630 += 1, R590 += 1, R485 += 1 };
  s1 -> s1 [0, 67] { R630 += 1, R590 += 1, R485 += 1 };
  s1 -> s1 [0, 65535] { R630 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [68, 68] { R630 += 1, R590 += 1, R485 += 1 };
  s1 -> s4 [68, 68] { R630 += 1, R590 += 1, R485 += 1 };
  s1 -> s1 [69, 65535] { R630 += 1, R590 += 1, R485 += 1 };
  s2 -> s1 [0, 67] { R630 += 1, R590 += 1, R485 += 1 };
  s2 -> s2 [0, 65535] { R630 += 1, R589 += 1, R590 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [68, 68] { R630 += 1, R590 += 1, R485 += 1 };
  s2 -> s4 [68, 68] { R630 += 1, R590 += 1, R485 += 1 };
  s2 -> s1 [69, 65535] { R630 += 1, R590 += 1, R485 += 1 };
  s3 -> s3 [0, 65535] { R630 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R630 += 1, R590 += 1, R485 += 1 };
  s4 -> s6 [0, 65535] { R630 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R630 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 67] { R632 += 1, R592 += 1, R487 += 1 };
  s0 -> s0 [0, 65535] { R631 += 1, R632 += 1 };
  s0 -> s2 [0, 65535] { R632 += 1, R591 += 1, R592 += 1 };
  s0 -> s3 [68, 68] { R632 += 1, R592 += 1, R487 += 1 };
  s0 -> s4 [68, 68] { R632 += 1, R592 += 1, R487 += 1 };
  s0 -> s1 [69, 65535] { R632 += 1, R592 += 1, R487 += 1 };
  s1 -> s1 [0, 67] { R632 += 1, R592 += 1, R487 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R632 += 1 };
  s1 -> s3 [68, 68] { R632 += 1, R592 += 1, R487 += 1 };
  s1 -> s4 [68, 68] { R632 += 1, R592 += 1, R487 += 1 };
  s1 -> s1 [69, 65535] { R632 += 1, R592 += 1, R487 += 1 };
  s2 -> s1 [0, 67] { R632 += 1, R592 += 1, R487 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R632 += 1, R591 += 1, R592 += 1 };
  s2 -> s3 [68, 68] { R632 += 1, R592 += 1, R487 += 1 };
  s2 -> s4 [68, 68] { R632 += 1, R592 += 1, R487 += 1 };
  s2 -> s1 [69, 65535] { R632 += 1, R592 += 1, R487 += 1 };
  s3 -> s3 [0, 65535] { R632 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R632 += 1, R592 += 1, R487 += 1 };
  s4 -> s5 [0, 65535] { R632 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R632 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 67] { R634 += 1, R594 += 1, R489 += 1, R490 += 1 };
  s0 -> s0 [0, 65535] { R633 += 1, R634 += 1 };
  s0 -> s2 [0, 65535] { R634 += 1, R593 += 1, R594 += 1 };
  s0 -> s3 [68, 68] { R634 += 1, R594 += 1, R489 += 1, R490 += 1 };
  s0 -> s4 [68, 68] { R634 += 1, R594 += 1, R489 += 1, R490 += 1 };
  s0 -> s1 [69, 65535] { R634 += 1, R594 += 1, R489 += 1, R490 += 1 };
  s1 -> s1 [0, 67] { R634 += 1, R594 += 1, R489 += 1, R490 += 1 };
  s1 -> s1 [0, 65535] { R634 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [68, 68] { R634 += 1, R594 += 1, R489 += 1, R490 += 1 };
  s1 -> s4 [68, 68] { R634 += 1, R594 += 1, R489 += 1, R490 += 1 };
  s1 -> s1 [69, 65535] { R634 += 1, R594 += 1, R489 += 1, R490 += 1 };
  s2 -> s1 [0, 67] { R634 += 1, R594 += 1, R489 += 1, R490 += 1 };
  s2 -> s2 [0, 65535] { R634 += 1, R593 += 1, R594 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [68, 68] { R634 += 1, R594 += 1, R489 += 1, R490 += 1 };
  s2 -> s4 [68, 68] { R634 += 1, R594 += 1, R489 += 1, R490 += 1 };
  s2 -> s1 [69, 65535] { R634 += 1, R594 += 1, R489 += 1, R490 += 1 };
  s3 -> s6 [0, 65535] { R634 += 1 };
  s3 -> s3 [0, 65535] { R634 += 1, R594 += 1, R489 += 1, R490 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R634 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R634 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 67] { R636 += 1, R596 += 1, R566 += 1, R567 += 1 };
  s0 -> s2 [0, 67] { R636 += 1, R596 += 1, R565 += 1, R566 += 1 };
  s0 -> s3 [0, 65535] { R636 += 1, R595 += 1, R596 += 1 };
  s0 -> s0 [0, 65535] { R635 += 1, R636 += 1 };
  s0 -> s4 [68, 68] { R636 += 1, R596 += 1, R565 += 1, R566 += 1 };
  s0 -> s5 [68, 68] { R636 += 1, R596 += 1, R565 += 1, R566 += 1 };
  s0 -> s6 [68, 68] { R636 += 1, R596 += 1, R566 += 1, R567 += 1 };
  s0 -> s7 [68, 68] { R636 += 1, R596 += 1, R566 += 1, R567 += 1 };
  s0 -> s1 [69, 65535] { R636 += 1, R596 += 1, R566 += 1, R567 += 1 };
  s0 -> s2 [69, 65535] { R636 += 1, R596 += 1, R565 += 1, R566 += 1 };
  s1 -> s1 [0, 67] { R636 += 1, R596 += 1, R566 += 1, R567 += 1 };
  s1 -> s1 [0, 65535] { R636 += 1 };
  s1 -> s9 [0, 65535];
  s1 -> s6 [68, 68] { R636 += 1, R596 += 1, R566 += 1, R567 += 1 };
  s1 -> s7 [68, 68] { R636 += 1, R596 += 1, R566 += 1, R567 += 1 };
  s1 -> s1 [69, 65535] { R636 += 1, R596 += 1, R566 += 1, R567 += 1 };
  s2 -> s1 [0, 67] { R636 += 1, R596 += 1, R566 += 1, R567 += 1 };
  s2 -> s2 [0, 67] { R636 += 1, R596 += 1, R565 += 1, R566 += 1 };
  s2 -> s4 [68, 68] { R636 += 1, R596 += 1, R565 += 1, R566 += 1 };
  s2 -> s5 [68, 68] { R636 += 1, R596 += 1, R565 += 1, R566 += 1 };
  s2 -> s6 [68, 68] { R636 += 1, R596 += 1, R566 += 1, R567 += 1 };
  s2 -> s7 [68, 68] { R636 += 1, R596 += 1, R566 += 1, R567 += 1 };
  s2 -> s1 [69, 65535] { R636 += 1, R596 += 1, R566 += 1, R567 += 1 };
  s2 -> s2 [69, 65535] { R636 += 1, R596 += 1, R565 += 1, R566 += 1 };
  s3 -> s1 [0, 67] { R636 += 1, R596 += 1, R566 += 1, R567 += 1 };
  s3 -> s2 [0, 67] { R636 += 1, R596 += 1, R565 += 1, R566 += 1 };
  s3 -> s3 [0, 65535] { R636 += 1, R595 += 1, R596 += 1 };
  s3 -> s4 [68, 68] { R636 += 1, R596 += 1, R565 += 1, R566 += 1 };
  s3 -> s5 [68, 68] { R636 += 1, R596 += 1, R565 += 1, R566 += 1 };
  s3 -> s6 [68, 68] { R636 += 1, R596 += 1, R566 += 1, R567 += 1 };
  s3 -> s7 [68, 68] { R636 += 1, R596 += 1, R566 += 1, R567 += 1 };
  s3 -> s1 [69, 65535] { R636 += 1, R596 += 1, R566 += 1, R567 += 1 };
  s3 -> s2 [69, 65535] { R636 += 1, R596 += 1, R565 += 1, R566 += 1 };
  s5 -> s5 [0, 65535] { R636 += 1, R596 += 1, R565 += 1, R566 += 1 };
  s5 -> s7 [0, 65535] { R636 += 1, R596 += 1, R566 += 1, R567 += 1 };
  s6 -> s9 [0, 65535];
  s6 -> s6 [0, 65535] { R636 += 1 };
  s7 -> s8 [0, 65535] { R636 += 1 };
  s7 -> s9 [0, 65535];
  s7 -> s7 [0, 65535] { R636 += 1, R596 += 1, R566 += 1, R567 += 1 };
  s8 -> s8 [0, 65535] { R636 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s8, s9, s6, s1, s7;
};
};
synchronised {  // Automata constraining P30
automaton P30_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
synchronised {  // Automata constraining P31
automaton P31_0 {
  init s0;
  s0 -> s1 [9, 9];
  accepting s1;
};
};
synchronised {  // Automata constraining P33
automaton P33_0 {
  init s0;
  s0 -> s1 [13, 13];
  accepting s1;
};
};
synchronised {  // Automata constraining P32
automaton P32_0 {
  init s0;
  s0 -> s1 [10, 10];
  accepting s1;
};
};
synchronised {  // Automata constraining P34
automaton P34_0 {
  init s0;
  s0 -> s1 [11, 11];
  accepting s1;
};
};
constraint R1 = R584 && R2 - R636 = 1 && R17 - R584 = -1 && R18 = R584 && R19 - R584 = -1 && R20 = R584 && R21 = 0 && R22 = 1 && R23 = 0 && R24 = 1 && R25 = R636 && R26 - R636 = 1 && R27 = R636 && R28 - R636 = 1 && R29 = 0 && R30 = 1 && R31 = 0 && R32 = 1 && R571 = 0 && R572 = R584 && R573 = 0 && R574 = R584 && R575 = 0 && R576 = R584 && R577 = 0 && R578 = R584 && R579 = 0 && R580 = R584 && R581 = 0 && R582 = R584 && R583 = 0 && R587 = 0 && R588 = 0 && R595 = 0 && R596 = 0 && R597 = 0 && R598 = R636 && R599 = 0 && R600 = R636 && R601 = 0 && R602 = R636 && R603 = 0 && R604 = R636 && R605 = 0 && R606 = R636 && R607 = 0 && R608 = R636 && R609 = 0 && R610 = R636 && R611 = 0 && R612 = R636 && R613 = 0 && R614 = R636 && R615 = 0 && R616 = R636 && R617 = 0 && R618 = R636 && R619 = 0 && R620 = R636 && R621 = 0 && R622 = R636 && R623 = 0 && R624 = R636 && R625 = 0 && R626 = R636 && R627 = 0 && R628 = R636 && R629 = 0 && R630 = R636 && R631 = 0 && R632 = R636 && R633 = 0 && R634 = R636 && R635 = 0 && R10 < 1 && R13 < 1 && -1*R486 + -1*R485 < 1 && R488 + R487 < 1 && 0 < R584 && -1 < R636 && (R486 + R485 != 0 || R570 + R567 = 0 || (R491 + R489 = 0 && R492 + R490 = 0)) && (R486 + R485 != 0 || R570 + R567 = 0 || (R568 + R565 = 0 && R569 + R566 = 0)) && (R491 + R489 != 0 || R486 + R485 + -1*R492 + -1*R490 = 0 || R486 + R485 < 1) && (R568 + R565 != 0 || R486 + R485 + -1*R569 + -1*R566 = 0 || R486 + R485 < 1) && (R16 = 0 || (R585 = 0 && R586 = 0)) && (R16 = 0 || (R589 = 0 && R590 = 0)) && (R16 = 0 || (R591 = 0 && R592 = 0)) && (R16 = 0 || (R593 = 0 && R594 = 0)) && (R491 + R489 = 0 || R486 + R485 < 1) && (R568 + R565 = 0 || R486 + R485 < 1);
// End of Parikh automata intersection problem
