// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R10, R13, R15, R16, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R31, R32, R4, R485, R486, R487, R488, R489, R490, R491, R492, R493, R494, R495, R496, R497, R498, R499, R5, R500, R501, R502, R503, R504, R505, R506, R507, R508, R509, R510, R511, R512, R513, R514, R515, R516, R517, R518, R519, R520, R521, R522, R523, R524, R525, R526, R527, R528, R529, R530, R531, R532, R533, R534, R535, R536, R537, R538, R539, R540, R541, R542, R543, R544, R545, R546, R547, R548, R549, R550, R551, R552, R553, R554, R555, R556, R557, R558, R559, R560, R561, R562, R563, R564, R6;
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [100, 100];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R13 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s0 [0, 65535] { R25 += 1, R26 += 1 };
  s0 -> s1 [12, 12] { R26 += 1 };
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value2_4 {
  init s0;
  s0 -> s0 [0, 65535] { R27 += 1, R28 += 1 };
  s0 -> s1 [0, 65535] { R28 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R28 += 1, R5 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 8] { R30 += 1 };
  s0 -> s0 [0, 65535] { R29 += 1, R30 += 1 };
  s0 -> s2 [9, 13] { R30 += 1 };
  s0 -> s1 [14, 31] { R30 += 1 };
  s0 -> s2 [32, 32] { R30 += 1 };
  s0 -> s1 [33, 65535] { R30 += 1 };
  s1 -> s1 [0, 65535] { R30 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R30 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_6 {
  init s0;
  s0 -> s0 [0, 65535] { R31 += 1, R32 += 1 };
  s0 -> s1 [0, 65535] { R32 += 1, R6 += 1 };
  s1 -> s1 [0, 65535] { R32 += 1, R6 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 64] { R526 += 1 };
  s0 -> s0 [0, 65535] { R525 += 1, R526 += 1 };
  s0 -> s2 [68, 68] { R526 += 1 };
  s0 -> s1 [69, 65535] { R526 += 1 };
  s1 -> s1 [0, 64] { R526 += 1 };
  s1 -> s2 [68, 68] { R526 += 1 };
  s1 -> s1 [69, 65535] { R526 += 1 };
  s2 -> s2 [0, 64] { R526 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [68, 65535] { R526 += 1 };
  accepting s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R527 += 1, R528 += 1 };
  s0 -> s1 [0, 65535] { R528 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R528 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 67] { R530 += 1 };
  s0 -> s2 [0, 65535] { R530 += 1, R10 += 1 };
  s0 -> s0 [0, 65535] { R529 += 1, R530 += 1 };
  s0 -> s3 [68, 68] { R530 += 1 };
  s0 -> s1 [69, 65535] { R530 += 1 };
  s1 -> s1 [0, 67] { R530 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [68, 68] { R530 += 1 };
  s1 -> s1 [69, 65535] { R530 += 1 };
  s2 -> s1 [0, 67] { R530 += 1 };
  s2 -> s2 [0, 65535] { R530 += 1, R10 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [68, 68] { R530 += 1 };
  s2 -> s1 [69, 65535] { R530 += 1 };
  s3 -> s3 [0, 65535] { R530 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 8] { R532 += 1, R18 += 1 };
  s0 -> s2 [0, 65535] { R532 += 1, R17 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R531 += 1, R532 += 1 };
  s0 -> s3 [9, 13] { R532 += 1, R18 += 1 };
  s0 -> s1 [14, 31] { R532 += 1, R18 += 1 };
  s0 -> s3 [32, 32] { R532 += 1, R18 += 1 };
  s0 -> s1 [33, 65535] { R532 += 1, R18 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R532 += 1, R18 += 1 };
  s1 -> s5 [0, 65535] { R532 += 1 };
  s2 -> s1 [0, 8] { R532 += 1, R18 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R532 += 1, R17 += 1, R18 += 1 };
  s2 -> s3 [9, 13] { R532 += 1, R18 += 1 };
  s2 -> s1 [14, 31] { R532 += 1, R18 += 1 };
  s2 -> s3 [32, 32] { R532 += 1, R18 += 1 };
  s2 -> s1 [33, 65535] { R532 += 1, R18 += 1 };
  s3 -> s1 [0, 65535] { R532 += 1, R18 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R532 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s0 [0, 65535] { R533 += 1, R534 += 1 };
  s0 -> s1 [0, 65535] { R534 += 1, R19 += 1, R20 += 1 };
  s0 -> s2 [0, 65535] { R534 += 1, R20 += 1, R3 += 1 };
  s1 -> s1 [0, 65535] { R534 += 1, R19 += 1, R20 += 1 };
  s1 -> s2 [0, 65535] { R534 += 1, R20 += 1, R3 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R534 += 1, R20 += 1, R3 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R534 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R534 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 8] { R536 += 1, R22 += 1 };
  s0 -> s2 [0, 65535] { R536 += 1, R21 += 1, R22 += 1 };
  s0 -> s0 [0, 65535] { R535 += 1, R536 += 1 };
  s0 -> s3 [9, 13] { R536 += 1, R22 += 1 };
  s0 -> s1 [14, 31] { R536 += 1, R22 += 1 };
  s0 -> s3 [32, 32] { R536 += 1, R22 += 1 };
  s0 -> s1 [33, 65535] { R536 += 1, R22 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R536 += 1, R22 += 1 };
  s1 -> s5 [0, 65535] { R536 += 1 };
  s2 -> s1 [0, 8] { R536 += 1, R22 += 1 };
  s2 -> s2 [0, 65535] { R536 += 1, R21 += 1, R22 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R536 += 1, R22 += 1 };
  s2 -> s1 [14, 31] { R536 += 1, R22 += 1 };
  s2 -> s3 [32, 32] { R536 += 1, R22 += 1 };
  s2 -> s1 [33, 65535] { R536 += 1, R22 += 1 };
  s3 -> s1 [0, 65535] { R536 += 1, R22 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R536 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 65535] { R538 += 1, R24 += 1, R4 += 1 };
  s0 -> s2 [0, 65535] { R538 += 1, R23 += 1, R24 += 1 };
  s0 -> s0 [0, 65535] { R537 += 1, R538 += 1 };
  s1 -> s1 [0, 65535] { R538 += 1, R24 += 1, R4 += 1 };
  s1 -> s4 [0, 65535] { R538 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R538 += 1, R24 += 1, R4 += 1 };
  s2 -> s2 [0, 65535] { R538 += 1, R23 += 1, R24 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R538 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 67] { R540 += 1, R500 += 1 };
  s0 -> s2 [0, 65535] { R540 += 1, R499 += 1, R500 += 1 };
  s0 -> s0 [0, 65535] { R539 += 1, R540 += 1 };
  s0 -> s1 [69, 65535] { R540 += 1, R500 += 1 };
  s1 -> s1 [0, 67] { R540 += 1, R500 += 1 };
  s1 -> s1 [0, 65535] { R540 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [69, 65535] { R540 += 1, R500 += 1 };
  s2 -> s1 [0, 67] { R540 += 1, R500 += 1 };
  s2 -> s2 [0, 65535] { R540 += 1, R499 += 1, R500 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [69, 65535] { R540 += 1, R500 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 65535] { R542 += 1, R501 += 1, R502 += 1 };
  s0 -> s2 [0, 65535] { R542 += 1, R502 += 1, R15 += 1 };
  s0 -> s0 [0, 65535] { R541 += 1, R542 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R542 += 1, R501 += 1, R502 += 1 };
  s1 -> s2 [0, 65535] { R542 += 1, R502 += 1, R15 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R542 += 1 };
  s2 -> s2 [0, 65535] { R542 += 1, R502 += 1, R15 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R542 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 68] { R544 += 1, R504 += 1 };
  s0 -> s0 [0, 65535] { R543 += 1, R544 += 1 };
  s0 -> s2 [0, 65535] { R544 += 1, R503 += 1, R504 += 1 };
  s0 -> s1 [85, 65535] { R544 += 1, R504 += 1 };
  s1 -> s1 [0, 68] { R544 += 1, R504 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R544 += 1 };
  s1 -> s1 [85, 65535] { R544 += 1, R504 += 1 };
  s2 -> s1 [0, 68] { R544 += 1, R504 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R544 += 1, R503 += 1, R504 += 1 };
  s2 -> s1 [85, 65535] { R544 += 1, R504 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 65535] { R546 += 1, R506 += 1, R486 += 1 };
  s0 -> s0 [0, 65535] { R545 += 1, R546 += 1 };
  s0 -> s2 [0, 65535] { R546 += 1, R505 += 1, R506 += 1 };
  s1 -> s1 [0, 65535] { R546 += 1, R506 += 1, R486 += 1 };
  s1 -> s4 [0, 65535] { R546 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R546 += 1, R506 += 1, R486 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R546 += 1, R505 += 1, R506 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R546 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 84] { R548 += 1, R508 += 1 };
  s0 -> s2 [0, 65535] { R548 += 1, R507 += 1, R508 += 1 };
  s0 -> s0 [0, 65535] { R547 += 1, R548 += 1 };
  s0 -> s3 [0, 65535] { R548 += 1, R508 += 1, R488 += 1 };
  s0 -> s1 [86, 65535] { R548 += 1, R508 += 1 };
  s1 -> s1 [0, 84] { R548 += 1, R508 += 1 };
  s1 -> s1 [0, 65535] { R548 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [86, 65535] { R548 += 1, R508 += 1 };
  s2 -> s1 [0, 84] { R548 += 1, R508 += 1 };
  s2 -> s2 [0, 65535] { R548 += 1, R507 += 1, R508 += 1 };
  s2 -> s3 [0, 65535] { R548 += 1, R508 += 1, R488 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [86, 65535] { R548 += 1, R508 += 1 };
  s3 -> s1 [0, 84] { R548 += 1, R508 += 1 };
  s3 -> s3 [0, 65535] { R548 += 1, R508 += 1, R488 += 1 };
  s3 -> s4 [0, 65535] { R548 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [86, 65535] { R548 += 1, R508 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R548 += 1 };
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 84] { R550 += 1, R510 += 1, R492 += 1 };
  s0 -> s2 [0, 65535] { R550 += 1, R509 += 1, R510 += 1 };
  s0 -> s0 [0, 65535] { R549 += 1, R550 += 1 };
  s0 -> s3 [0, 65535] { R550 += 1, R510 += 1, R491 += 1, R492 += 1 };
  s0 -> s1 [86, 65535] { R550 += 1, R510 += 1, R492 += 1 };
  s1 -> s1 [0, 84] { R550 += 1, R510 += 1, R492 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R550 += 1 };
  s1 -> s1 [0, 65535] { R550 += 1, R510 += 1 };
  s1 -> s1 [86, 65535] { R550 += 1, R510 += 1, R492 += 1 };
  s2 -> s1 [0, 84] { R550 += 1, R510 += 1, R492 += 1 };
  s2 -> s2 [0, 65535] { R550 += 1, R509 += 1, R510 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R550 += 1, R510 += 1, R491 += 1, R492 += 1 };
  s2 -> s1 [86, 65535] { R550 += 1, R510 += 1, R492 += 1 };
  s3 -> s1 [0, 84] { R550 += 1, R510 += 1, R492 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R550 += 1, R510 += 1, R491 += 1, R492 += 1 };
  s3 -> s5 [0, 65535] { R550 += 1 };
  s3 -> s1 [86, 65535] { R550 += 1, R510 += 1, R492 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R550 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 65535] { R552 += 1, R512 += 1, R497 += 1, R498 += 1 };
  s0 -> s2 [0, 65535] { R552 += 1, R511 += 1, R512 += 1 };
  s0 -> s3 [0, 65535] { R552 += 1, R512 += 1, R496 += 1, R497 += 1 };
  s0 -> s0 [0, 65535] { R551 += 1, R552 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R552 += 1 };
  s1 -> s6 [0, 65535] { R552 += 1, R512 += 1 };
  s1 -> s1 [0, 65535] { R552 += 1, R512 += 1, R497 += 1, R498 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R552 += 1, R512 += 1, R497 += 1, R498 += 1 };
  s2 -> s2 [0, 65535] { R552 += 1, R511 += 1, R512 += 1 };
  s2 -> s3 [0, 65535] { R552 += 1, R512 += 1, R496 += 1, R497 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R552 += 1 };
  s3 -> s1 [0, 65535] { R552 += 1, R512 += 1, R497 += 1, R498 += 1 };
  s3 -> s3 [0, 65535] { R552 += 1, R512 += 1, R496 += 1, R497 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R552 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R552 += 1 };
  s6 -> s6 [0, 65535] { R552 += 1, R512 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_21 {
  init s0;
  s0 -> s0 [0, 65535] { R553 += 1, R554 += 1 };
  s0 -> s1 [0, 65535] { R554 += 1, R514 += 1, R16 += 1 };
  s0 -> s2 [0, 65535] { R554 += 1, R513 += 1, R514 += 1 };
  s1 -> s1 [0, 65535] { R554 += 1, R514 += 1, R16 += 1 };
  s1 -> s4 [0, 65535] { R554 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R554 += 1, R514 += 1, R16 += 1 };
  s2 -> s2 [0, 65535] { R554 += 1, R513 += 1, R514 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R554 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 67] { R556 += 1, R516 += 1 };
  s0 -> s2 [0, 65535] { R556 += 1, R515 += 1, R516 += 1 };
  s0 -> s0 [0, 65535] { R555 += 1, R556 += 1 };
  s0 -> s3 [68, 68] { R556 += 1, R516 += 1 };
  s0 -> s4 [68, 68] { R556 += 1, R516 += 1 };
  s0 -> s5 [85, 85] { R556 += 1, R516 += 1 };
  s0 -> s1 [86, 65535] { R556 += 1, R516 += 1 };
  s1 -> s1 [0, 67] { R556 += 1, R516 += 1 };
  s1 -> s3 [68, 68] { R556 += 1, R516 += 1 };
  s1 -> s4 [68, 68] { R556 += 1, R516 += 1 };
  s1 -> s5 [85, 85] { R556 += 1, R516 += 1 };
  s1 -> s1 [86, 65535] { R556 += 1, R516 += 1 };
  s2 -> s1 [0, 67] { R556 += 1, R516 += 1 };
  s2 -> s2 [0, 65535] { R556 += 1, R515 += 1, R516 += 1 };
  s2 -> s3 [68, 68] { R556 += 1, R516 += 1 };
  s2 -> s4 [68, 68] { R556 += 1, R516 += 1 };
  s2 -> s5 [85, 85] { R556 += 1, R516 += 1 };
  s2 -> s1 [86, 65535] { R556 += 1, R516 += 1 };
  s3 -> s3 [0, 68] { R556 += 1, R516 += 1 };
  s3 -> s8 [85, 85] { R556 += 1, R516 += 1 };
  s3 -> s3 [86, 65535] { R556 += 1, R516 += 1 };
  s5 -> s5 [0, 67] { R556 += 1, R516 += 1 };
  s5 -> s5 [0, 65535] { R556 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [68, 68] { R556 += 1, R516 += 1 };
  s5 -> s8 [68, 68] { R556 += 1, R516 += 1 };
  s5 -> s5 [85, 65535] { R556 += 1, R516 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R556 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 68] { R556 += 1, R516 += 1 };
  s8 -> s8 [0, 65535] { R556 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [85, 65535] { R556 += 1, R516 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 67] { R558 += 1, R518 += 1, R485 += 1 };
  s0 -> s2 [0, 65535] { R558 += 1, R517 += 1, R518 += 1 };
  s0 -> s0 [0, 65535] { R557 += 1, R558 += 1 };
  s0 -> s3 [68, 68] { R558 += 1, R518 += 1, R485 += 1 };
  s0 -> s4 [68, 68] { R558 += 1, R518 += 1, R485 += 1 };
  s0 -> s1 [69, 65535] { R558 += 1, R518 += 1, R485 += 1 };
  s1 -> s1 [0, 67] { R558 += 1, R518 += 1, R485 += 1 };
  s1 -> s1 [0, 65535] { R558 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [68, 68] { R558 += 1, R518 += 1, R485 += 1 };
  s1 -> s4 [68, 68] { R558 += 1, R518 += 1, R485 += 1 };
  s1 -> s1 [69, 65535] { R558 += 1, R518 += 1, R485 += 1 };
  s2 -> s1 [0, 67] { R558 += 1, R518 += 1, R485 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R558 += 1, R517 += 1, R518 += 1 };
  s2 -> s3 [68, 68] { R558 += 1, R518 += 1, R485 += 1 };
  s2 -> s4 [68, 68] { R558 += 1, R518 += 1, R485 += 1 };
  s2 -> s1 [69, 65535] { R558 += 1, R518 += 1, R485 += 1 };
  s3 -> s6 [0, 65535] { R558 += 1 };
  s3 -> s3 [0, 65535] { R558 += 1, R518 += 1, R485 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R558 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R558 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 67] { R560 += 1, R520 += 1, R487 += 1 };
  s0 -> s0 [0, 65535] { R559 += 1, R560 += 1 };
  s0 -> s2 [0, 65535] { R560 += 1, R519 += 1, R520 += 1 };
  s0 -> s3 [68, 68] { R560 += 1, R520 += 1, R487 += 1 };
  s0 -> s4 [68, 68] { R560 += 1, R520 += 1, R487 += 1 };
  s0 -> s1 [69, 65535] { R560 += 1, R520 += 1, R487 += 1 };
  s1 -> s1 [0, 67] { R560 += 1, R520 += 1, R487 += 1 };
  s1 -> s1 [0, 65535] { R560 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [68, 68] { R560 += 1, R520 += 1, R487 += 1 };
  s1 -> s4 [68, 68] { R560 += 1, R520 += 1, R487 += 1 };
  s1 -> s1 [69, 65535] { R560 += 1, R520 += 1, R487 += 1 };
  s2 -> s1 [0, 67] { R560 += 1, R520 += 1, R487 += 1 };
  s2 -> s2 [0, 65535] { R560 += 1, R519 += 1, R520 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [68, 68] { R560 += 1, R520 += 1, R487 += 1 };
  s2 -> s4 [68, 68] { R560 += 1, R520 += 1, R487 += 1 };
  s2 -> s1 [69, 65535] { R560 += 1, R520 += 1, R487 += 1 };
  s3 -> s6 [0, 65535] { R560 += 1 };
  s3 -> s3 [0, 65535] { R560 += 1, R520 += 1, R487 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R560 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R560 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 67] { R562 += 1, R522 += 1, R489 += 1, R490 += 1 };
  s0 -> s0 [0, 65535] { R561 += 1, R562 += 1 };
  s0 -> s2 [0, 65535] { R562 += 1, R521 += 1, R522 += 1 };
  s0 -> s3 [68, 68] { R562 += 1, R522 += 1, R489 += 1, R490 += 1 };
  s0 -> s4 [68, 68] { R562 += 1, R522 += 1, R489 += 1, R490 += 1 };
  s0 -> s1 [69, 65535] { R562 += 1, R522 += 1, R489 += 1, R490 += 1 };
  s1 -> s1 [0, 67] { R562 += 1, R522 += 1, R489 += 1, R490 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R562 += 1 };
  s1 -> s3 [68, 68] { R562 += 1, R522 += 1, R489 += 1, R490 += 1 };
  s1 -> s4 [68, 68] { R562 += 1, R522 += 1, R489 += 1, R490 += 1 };
  s1 -> s1 [69, 65535] { R562 += 1, R522 += 1, R489 += 1, R490 += 1 };
  s2 -> s1 [0, 67] { R562 += 1, R522 += 1, R489 += 1, R490 += 1 };
  s2 -> s2 [0, 65535] { R562 += 1, R521 += 1, R522 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [68, 68] { R562 += 1, R522 += 1, R489 += 1, R490 += 1 };
  s2 -> s4 [68, 68] { R562 += 1, R522 += 1, R489 += 1, R490 += 1 };
  s2 -> s1 [69, 65535] { R562 += 1, R522 += 1, R489 += 1, R490 += 1 };
  s3 -> s3 [0, 65535] { R562 += 1, R522 += 1, R489 += 1, R490 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R562 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R562 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R562 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 67] { R564 += 1, R524 += 1, R493 += 1, R494 += 1 };
  s0 -> s2 [0, 65535] { R564 += 1, R523 += 1, R524 += 1 };
  s0 -> s0 [0, 65535] { R563 += 1, R564 += 1 };
  s0 -> s3 [68, 68] { R564 += 1, R524 += 1, R493 += 1, R494 += 1 };
  s0 -> s4 [68, 68] { R564 += 1, R524 += 1, R493 += 1, R494 += 1 };
  s0 -> s1 [69, 65535] { R564 += 1, R524 += 1, R493 += 1, R494 += 1 };
  s1 -> s1 [0, 67] { R564 += 1, R524 += 1, R493 += 1, R494 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R564 += 1 };
  s1 -> s3 [68, 68] { R564 += 1, R524 += 1, R493 += 1, R494 += 1 };
  s1 -> s4 [68, 68] { R564 += 1, R524 += 1, R493 += 1, R494 += 1 };
  s1 -> s1 [69, 65535] { R564 += 1, R524 += 1, R493 += 1, R494 += 1 };
  s2 -> s1 [0, 67] { R564 += 1, R524 += 1, R493 += 1, R494 += 1 };
  s2 -> s2 [0, 65535] { R564 += 1, R523 += 1, R524 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [68, 68] { R564 += 1, R524 += 1, R493 += 1, R494 += 1 };
  s2 -> s4 [68, 68] { R564 += 1, R524 += 1, R493 += 1, R494 += 1 };
  s2 -> s1 [69, 65535] { R564 += 1, R524 += 1, R493 += 1, R494 += 1 };
  s3 -> s6 [0, 65535] { R564 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R564 += 1, R524 += 1, R493 += 1, R494 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R564 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R564 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
synchronised {  // Automata constraining P30
automaton P30_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
synchronised {  // Automata constraining P31
automaton P31_0 {
  init s0;
  s0 -> s1 [9, 9];
  accepting s1;
};
};
synchronised {  // Automata constraining P33
automaton P33_0 {
  init s0;
  s0 -> s1 [13, 13];
  accepting s1;
};
};
synchronised {  // Automata constraining P32
automaton P32_0 {
  init s0;
  s0 -> s1 [10, 10];
  accepting s1;
};
};
synchronised {  // Automata constraining P34
automaton P34_0 {
  init s0;
  s0 -> s1 [11, 11];
  accepting s1;
};
};
constraint R1 = R512 && R2 - R564 = 1 && R17 - R512 = -1 && R18 = R512 && R19 - R512 = -1 && R20 = R512 && R21 = 0 && R22 = 1 && R23 = 0 && R24 = 1 && R25 = R564 && R26 - R564 = 1 && R27 = R564 && R28 - R564 = 1 && R29 = 0 && R30 = 1 && R31 = 0 && R32 = 1 && R499 = 0 && R500 = R512 && R501 = 0 && R502 = R512 && R503 = 0 && R504 = R512 && R505 = 0 && R506 = R512 && R507 = 0 && R508 = R512 && R509 = 0 && R510 = R512 && R511 = 0 && R515 = 0 && R516 = 0 && R525 = 0 && R526 = R564 && R527 = 0 && R528 = R564 && R529 = 0 && R530 = R564 && R531 = 0 && R532 = R564 && R533 = 0 && R534 = R564 && R535 = 0 && R536 = R564 && R537 = 0 && R538 = R564 && R539 = 0 && R540 = R564 && R541 = 0 && R542 = R564 && R543 = 0 && R544 = R564 && R545 = 0 && R546 = R564 && R547 = 0 && R548 = R564 && R549 = 0 && R550 = R564 && R551 = 0 && R552 = R564 && R553 = 0 && R554 = R564 && R555 = 0 && R556 = R564 && R557 = 0 && R558 = R564 && R559 = 0 && R560 = R564 && R561 = 0 && R562 = R564 && R563 = 0 && R10 < 1 && R13 < 1 && -1*R486 + -1*R485 < 1 && R488 + R487 < 1 && 0 < R512 && -1 < R564 && (R486 + R485 != 0 || R498 + R495 = 0 || (R491 + R489 = 0 && R492 + R490 = 0)) && (R486 + R485 != 0 || R498 + R495 = 0 || (R496 + R493 = 0 && R497 + R494 = 0)) && (R491 + R489 != 0 || R486 + R485 + -1*R492 + -1*R490 = 0 || R486 + R485 < 1) && (R496 + R493 != 0 || R486 + R485 + -1*R497 + -1*R494 = 0 || R486 + R485 < 1) && (R16 = 0 || (R513 = 0 && R514 = 0)) && (R16 = 0 || (R517 = 0 && R518 = 0)) && (R16 = 0 || (R519 = 0 && R520 = 0)) && (R16 = 0 || (R521 = 0 && R522 = 0)) && (R16 = 0 || (R523 = 0 && R524 = 0)) && (R491 + R489 = 0 || R486 + R485 < 1) && (R496 + R493 = 0 || R486 + R485 < 1);
// End of Parikh automata intersection problem
