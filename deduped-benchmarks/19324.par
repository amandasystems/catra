// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R10, R13, R15, R16, R17, R18, R189, R19, R190, R191, R192, R193, R194, R195, R196, R197, R198, R199, R2, R20, R200, R201, R202, R203, R204, R205, R206, R207, R208, R209, R21, R210, R211, R212, R213, R214, R215, R216, R217, R218, R219, R22, R220, R221, R222, R223, R224, R225, R226, R227, R228, R229, R23, R230, R231, R232, R233, R234, R235, R236, R237, R238, R239, R24, R240, R241, R242, R243, R244, R245, R246, R247, R248, R249, R25, R250, R251, R252, R253, R254, R255, R256, R257, R258, R259, R26, R260, R27, R28, R29, R3, R30, R31, R32, R37, R38, R39, R4, R40, R41, R42, R43, R44, R5, R6;
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [100, 100];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R13 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s0 [0, 65535] { R25 += 1, R26 += 1 };
  s0 -> s1 [12, 12] { R26 += 1 };
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value2_4 {
  init s0;
  s0 -> s0 [0, 65535] { R27 += 1, R28 += 1 };
  s0 -> s1 [0, 65535] { R28 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R28 += 1, R5 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 8] { R30 += 1 };
  s0 -> s0 [0, 65535] { R29 += 1, R30 += 1 };
  s0 -> s2 [9, 13] { R30 += 1 };
  s0 -> s1 [14, 31] { R30 += 1 };
  s0 -> s2 [32, 32] { R30 += 1 };
  s0 -> s1 [33, 65535] { R30 += 1 };
  s1 -> s1 [0, 65535] { R30 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R30 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_6 {
  init s0;
  s0 -> s0 [0, 65535] { R31 += 1, R32 += 1 };
  s0 -> s1 [0, 65535] { R32 += 1, R6 += 1 };
  s1 -> s1 [0, 65535] { R32 += 1, R6 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 64] { R222 += 1 };
  s0 -> s0 [0, 65535] { R221 += 1, R222 += 1 };
  s0 -> s2 [68, 68] { R222 += 1 };
  s0 -> s1 [69, 65535] { R222 += 1 };
  s1 -> s1 [0, 64] { R222 += 1 };
  s1 -> s2 [68, 68] { R222 += 1 };
  s1 -> s1 [69, 65535] { R222 += 1 };
  s2 -> s2 [0, 64] { R222 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [68, 65535] { R222 += 1 };
  accepting s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R224 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R223 += 1, R224 += 1 };
  s1 -> s1 [0, 65535] { R224 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 67] { R226 += 1 };
  s0 -> s2 [0, 65535] { R226 += 1, R10 += 1 };
  s0 -> s0 [0, 65535] { R225 += 1, R226 += 1 };
  s0 -> s3 [68, 68] { R226 += 1 };
  s0 -> s1 [69, 65535] { R226 += 1 };
  s1 -> s1 [0, 67] { R226 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [68, 68] { R226 += 1 };
  s1 -> s1 [69, 65535] { R226 += 1 };
  s2 -> s1 [0, 67] { R226 += 1 };
  s2 -> s2 [0, 65535] { R226 += 1, R10 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [68, 68] { R226 += 1 };
  s2 -> s1 [69, 65535] { R226 += 1 };
  s3 -> s3 [0, 65535] { R226 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 8] { R228 += 1, R18 += 1 };
  s0 -> s2 [0, 65535] { R228 += 1, R17 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R227 += 1, R228 += 1 };
  s0 -> s3 [9, 13] { R228 += 1, R18 += 1 };
  s0 -> s1 [14, 31] { R228 += 1, R18 += 1 };
  s0 -> s3 [32, 32] { R228 += 1, R18 += 1 };
  s0 -> s1 [33, 65535] { R228 += 1, R18 += 1 };
  s1 -> s1 [0, 65535] { R228 += 1, R18 += 1 };
  s1 -> s5 [0, 65535] { R228 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R228 += 1, R18 += 1 };
  s2 -> s2 [0, 65535] { R228 += 1, R17 += 1, R18 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R228 += 1, R18 += 1 };
  s2 -> s1 [14, 31] { R228 += 1, R18 += 1 };
  s2 -> s3 [32, 32] { R228 += 1, R18 += 1 };
  s2 -> s1 [33, 65535] { R228 += 1, R18 += 1 };
  s3 -> s1 [0, 65535] { R228 += 1, R18 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R228 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s0 [0, 65535] { R229 += 1, R230 += 1 };
  s0 -> s1 [0, 65535] { R230 += 1, R20 += 1, R3 += 1 };
  s0 -> s2 [0, 65535] { R230 += 1, R19 += 1, R20 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R230 += 1 };
  s1 -> s1 [0, 65535] { R230 += 1, R20 += 1, R3 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R230 += 1, R20 += 1, R3 += 1 };
  s2 -> s2 [0, 65535] { R230 += 1, R19 += 1, R20 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R230 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 8] { R232 += 1, R22 += 1 };
  s0 -> s0 [0, 65535] { R231 += 1, R232 += 1 };
  s0 -> s2 [0, 65535] { R232 += 1, R21 += 1, R22 += 1 };
  s0 -> s3 [9, 13] { R232 += 1, R22 += 1 };
  s0 -> s1 [14, 31] { R232 += 1, R22 += 1 };
  s0 -> s3 [32, 32] { R232 += 1, R22 += 1 };
  s0 -> s1 [33, 65535] { R232 += 1, R22 += 1 };
  s1 -> s5 [0, 65535] { R232 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R232 += 1, R22 += 1 };
  s2 -> s1 [0, 8] { R232 += 1, R22 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R232 += 1, R21 += 1, R22 += 1 };
  s2 -> s3 [9, 13] { R232 += 1, R22 += 1 };
  s2 -> s1 [14, 31] { R232 += 1, R22 += 1 };
  s2 -> s3 [32, 32] { R232 += 1, R22 += 1 };
  s2 -> s1 [33, 65535] { R232 += 1, R22 += 1 };
  s3 -> s1 [0, 65535] { R232 += 1, R22 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R232 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s0 [0, 65535] { R233 += 1, R234 += 1 };
  s0 -> s1 [0, 65535] { R234 += 1, R23 += 1, R24 += 1 };
  s0 -> s2 [0, 65535] { R234 += 1, R24 += 1, R4 += 1 };
  s1 -> s1 [0, 65535] { R234 += 1, R23 += 1, R24 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R234 += 1, R24 += 1, R4 += 1 };
  s2 -> s3 [0, 65535] { R234 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R234 += 1, R24 += 1, R4 += 1 };
  s3 -> s3 [0, 65535] { R234 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 67] { R236 += 1, R196 += 1 };
  s0 -> s2 [0, 65535] { R236 += 1, R195 += 1, R196 += 1 };
  s0 -> s0 [0, 65535] { R235 += 1, R236 += 1 };
  s0 -> s1 [69, 65535] { R236 += 1, R196 += 1 };
  s1 -> s1 [0, 67] { R236 += 1, R196 += 1 };
  s1 -> s1 [0, 65535] { R236 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [69, 65535] { R236 += 1, R196 += 1 };
  s2 -> s1 [0, 67] { R236 += 1, R196 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R236 += 1, R195 += 1, R196 += 1 };
  s2 -> s1 [69, 65535] { R236 += 1, R196 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_15 {
  init s0;
  s0 -> s0 [0, 65535] { R237 += 1, R238 += 1 };
  s0 -> s1 [0, 65535] { R238 += 1, R197 += 1, R198 += 1 };
  s0 -> s2 [0, 65535] { R238 += 1, R198 += 1, R15 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R238 += 1, R197 += 1, R198 += 1 };
  s1 -> s2 [0, 65535] { R238 += 1, R198 += 1, R15 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R238 += 1, R198 += 1, R15 += 1 };
  s2 -> s4 [0, 65535] { R238 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R238 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 68] { R240 += 1, R200 += 1 };
  s0 -> s2 [0, 65535] { R240 += 1, R199 += 1, R200 += 1 };
  s0 -> s0 [0, 65535] { R239 += 1, R240 += 1 };
  s0 -> s3 [85, 85] { R240 += 1, R200 += 1 };
  s0 -> s1 [86, 65535] { R240 += 1, R200 += 1 };
  s1 -> s1 [0, 68] { R240 += 1, R200 += 1 };
  s1 -> s3 [85, 85] { R240 += 1, R200 += 1 };
  s1 -> s1 [86, 65535] { R240 += 1, R200 += 1 };
  s2 -> s1 [0, 68] { R240 += 1, R200 += 1 };
  s2 -> s2 [0, 65535] { R240 += 1, R199 += 1, R200 += 1 };
  s2 -> s3 [85, 85] { R240 += 1, R200 += 1 };
  s2 -> s1 [86, 65535] { R240 += 1, R200 += 1 };
  s3 -> s3 [0, 68] { R240 += 1, R200 += 1 };
  s3 -> s3 [0, 65535] { R240 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [85, 65535] { R240 += 1, R200 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 65535] { R242 += 1, R201 += 1, R202 += 1 };
  s0 -> s2 [0, 65535] { R242 += 1, R202 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R241 += 1, R242 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R242 += 1, R201 += 1, R202 += 1 };
  s1 -> s2 [0, 65535] { R242 += 1, R202 += 1, R38 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R242 += 1, R202 += 1, R38 += 1 };
  s2 -> s4 [0, 65535] { R242 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R242 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 84] { R244 += 1, R204 += 1 };
  s0 -> s0 [0, 65535] { R243 += 1, R244 += 1 };
  s0 -> s2 [0, 65535] { R244 += 1, R204 += 1, R40 += 1 };
  s0 -> s3 [0, 65535] { R244 += 1, R203 += 1, R204 += 1 };
  s0 -> s1 [86, 65535] { R244 += 1, R204 += 1 };
  s1 -> s1 [0, 84] { R244 += 1, R204 += 1 };
  s1 -> s1 [0, 65535] { R244 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [86, 65535] { R244 += 1, R204 += 1 };
  s2 -> s1 [0, 84] { R244 += 1, R204 += 1 };
  s2 -> s5 [0, 65535] { R244 += 1 };
  s2 -> s2 [0, 65535] { R244 += 1, R204 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [86, 65535] { R244 += 1, R204 += 1 };
  s3 -> s1 [0, 84] { R244 += 1, R204 += 1 };
  s3 -> s2 [0, 65535] { R244 += 1, R204 += 1, R40 += 1 };
  s3 -> s3 [0, 65535] { R244 += 1, R203 += 1, R204 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [86, 65535] { R244 += 1, R204 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R244 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 84] { R246 += 1, R206 += 1, R44 += 1 };
  s0 -> s2 [0, 65535] { R246 += 1, R206 += 1, R43 += 1, R44 += 1 };
  s0 -> s3 [0, 65535] { R246 += 1, R205 += 1, R206 += 1 };
  s0 -> s0 [0, 65535] { R245 += 1, R246 += 1 };
  s0 -> s1 [86, 65535] { R246 += 1, R206 += 1, R44 += 1 };
  s1 -> s1 [0, 84] { R246 += 1, R206 += 1, R44 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R246 += 1, R206 += 1 };
  s1 -> s5 [0, 65535] { R246 += 1 };
  s1 -> s1 [86, 65535] { R246 += 1, R206 += 1, R44 += 1 };
  s2 -> s1 [0, 84] { R246 += 1, R206 += 1, R44 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R246 += 1, R206 += 1, R43 += 1, R44 += 1 };
  s2 -> s5 [0, 65535] { R246 += 1 };
  s2 -> s1 [86, 65535] { R246 += 1, R206 += 1, R44 += 1 };
  s3 -> s1 [0, 84] { R246 += 1, R206 += 1, R44 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R246 += 1, R206 += 1, R43 += 1, R44 += 1 };
  s3 -> s3 [0, 65535] { R246 += 1, R205 += 1, R206 += 1 };
  s3 -> s1 [86, 65535] { R246 += 1, R206 += 1, R44 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R246 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 65535] { R248 += 1, R208 += 1 };
  s0 -> s0 [0, 65535] { R247 += 1, R248 += 1 };
  s0 -> s2 [0, 65535] { R248 += 1, R207 += 1, R208 += 1 };
  s1 -> s1 [0, 65535] { R248 += 1, R208 += 1 };
  s1 -> s4 [0, 65535] { R248 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R248 += 1, R208 += 1 };
  s2 -> s2 [0, 65535] { R248 += 1, R207 += 1, R208 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R248 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R250 += 1, R210 += 1, R16 += 1 };
  s0 -> s2 [0, 65535] { R250 += 1, R209 += 1, R210 += 1 };
  s0 -> s0 [0, 65535] { R249 += 1, R250 += 1 };
  s1 -> s1 [0, 65535] { R250 += 1, R210 += 1, R16 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R250 += 1 };
  s2 -> s1 [0, 65535] { R250 += 1, R210 += 1, R16 += 1 };
  s2 -> s2 [0, 65535] { R250 += 1, R209 += 1, R210 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R250 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 67] { R252 += 1, R212 += 1 };
  s0 -> s0 [0, 65535] { R251 += 1, R252 += 1 };
  s0 -> s2 [0, 65535] { R252 += 1, R211 += 1, R212 += 1 };
  s0 -> s3 [68, 68] { R252 += 1, R212 += 1 };
  s0 -> s4 [68, 68] { R252 += 1, R212 += 1 };
  s0 -> s1 [86, 65535] { R252 += 1, R212 += 1 };
  s1 -> s1 [0, 67] { R252 += 1, R212 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R252 += 1 };
  s1 -> s3 [68, 68] { R252 += 1, R212 += 1 };
  s1 -> s4 [68, 68] { R252 += 1, R212 += 1 };
  s1 -> s1 [86, 65535] { R252 += 1, R212 += 1 };
  s2 -> s1 [0, 67] { R252 += 1, R212 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R252 += 1, R211 += 1, R212 += 1 };
  s2 -> s3 [68, 68] { R252 += 1, R212 += 1 };
  s2 -> s4 [68, 68] { R252 += 1, R212 += 1 };
  s2 -> s1 [86, 65535] { R252 += 1, R212 += 1 };
  s3 -> s3 [0, 68] { R252 += 1, R212 += 1 };
  s3 -> s3 [0, 65535] { R252 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [86, 65535] { R252 += 1, R212 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R252 += 1 };
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 67] { R254 += 1, R214 += 1, R37 += 1 };
  s0 -> s0 [0, 65535] { R253 += 1, R254 += 1 };
  s0 -> s2 [0, 65535] { R254 += 1, R213 += 1, R214 += 1 };
  s0 -> s3 [68, 68] { R254 += 1, R214 += 1, R37 += 1 };
  s0 -> s4 [68, 68] { R254 += 1, R214 += 1, R37 += 1 };
  s0 -> s1 [69, 65535] { R254 += 1, R214 += 1, R37 += 1 };
  s1 -> s1 [0, 67] { R254 += 1, R214 += 1, R37 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R254 += 1 };
  s1 -> s3 [68, 68] { R254 += 1, R214 += 1, R37 += 1 };
  s1 -> s4 [68, 68] { R254 += 1, R214 += 1, R37 += 1 };
  s1 -> s1 [69, 65535] { R254 += 1, R214 += 1, R37 += 1 };
  s2 -> s1 [0, 67] { R254 += 1, R214 += 1, R37 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R254 += 1, R213 += 1, R214 += 1 };
  s2 -> s3 [68, 68] { R254 += 1, R214 += 1, R37 += 1 };
  s2 -> s4 [68, 68] { R254 += 1, R214 += 1, R37 += 1 };
  s2 -> s1 [69, 65535] { R254 += 1, R214 += 1, R37 += 1 };
  s3 -> s3 [0, 65535] { R254 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R254 += 1, R214 += 1, R37 += 1 };
  s4 -> s6 [0, 65535] { R254 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R254 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 67] { R256 += 1, R216 += 1, R39 += 1 };
  s0 -> s0 [0, 65535] { R255 += 1, R256 += 1 };
  s0 -> s2 [0, 65535] { R256 += 1, R215 += 1, R216 += 1 };
  s0 -> s3 [68, 68] { R256 += 1, R216 += 1, R39 += 1 };
  s0 -> s4 [68, 68] { R256 += 1, R216 += 1, R39 += 1 };
  s0 -> s1 [69, 65535] { R256 += 1, R216 += 1, R39 += 1 };
  s1 -> s1 [0, 67] { R256 += 1, R216 += 1, R39 += 1 };
  s1 -> s1 [0, 65535] { R256 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [68, 68] { R256 += 1, R216 += 1, R39 += 1 };
  s1 -> s4 [68, 68] { R256 += 1, R216 += 1, R39 += 1 };
  s1 -> s1 [69, 65535] { R256 += 1, R216 += 1, R39 += 1 };
  s2 -> s1 [0, 67] { R256 += 1, R216 += 1, R39 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R256 += 1, R215 += 1, R216 += 1 };
  s2 -> s3 [68, 68] { R256 += 1, R216 += 1, R39 += 1 };
  s2 -> s4 [68, 68] { R256 += 1, R216 += 1, R39 += 1 };
  s2 -> s1 [69, 65535] { R256 += 1, R216 += 1, R39 += 1 };
  s3 -> s6 [0, 65535] { R256 += 1 };
  s3 -> s3 [0, 65535] { R256 += 1, R216 += 1, R39 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R256 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R256 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 67] { R258 += 1, R218 += 1, R41 += 1, R42 += 1 };
  s0 -> s0 [0, 65535] { R257 += 1, R258 += 1 };
  s0 -> s2 [0, 65535] { R258 += 1, R217 += 1, R218 += 1 };
  s0 -> s3 [68, 68] { R258 += 1, R218 += 1, R41 += 1, R42 += 1 };
  s0 -> s4 [68, 68] { R258 += 1, R218 += 1, R41 += 1, R42 += 1 };
  s0 -> s1 [69, 65535] { R258 += 1, R218 += 1, R41 += 1, R42 += 1 };
  s1 -> s1 [0, 67] { R258 += 1, R218 += 1, R41 += 1, R42 += 1 };
  s1 -> s1 [0, 65535] { R258 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [68, 68] { R258 += 1, R218 += 1, R41 += 1, R42 += 1 };
  s1 -> s4 [68, 68] { R258 += 1, R218 += 1, R41 += 1, R42 += 1 };
  s1 -> s1 [69, 65535] { R258 += 1, R218 += 1, R41 += 1, R42 += 1 };
  s2 -> s1 [0, 67] { R258 += 1, R218 += 1, R41 += 1, R42 += 1 };
  s2 -> s2 [0, 65535] { R258 += 1, R217 += 1, R218 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [68, 68] { R258 += 1, R218 += 1, R41 += 1, R42 += 1 };
  s2 -> s4 [68, 68] { R258 += 1, R218 += 1, R41 += 1, R42 += 1 };
  s2 -> s1 [69, 65535] { R258 += 1, R218 += 1, R41 += 1, R42 += 1 };
  s3 -> s3 [0, 65535] { R258 += 1, R218 += 1, R41 += 1, R42 += 1 };
  s3 -> s6 [0, 65535] { R258 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R258 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R258 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 67] { R260 += 1, R220 += 1, R190 += 1, R191 += 1 };
  s0 -> s2 [0, 67] { R260 += 1, R220 += 1, R189 += 1, R190 += 1 };
  s0 -> s3 [0, 65535] { R260 += 1, R219 += 1, R220 += 1 };
  s0 -> s0 [0, 65535] { R259 += 1, R260 += 1 };
  s0 -> s4 [68, 68] { R260 += 1, R220 += 1, R189 += 1, R190 += 1 };
  s0 -> s5 [68, 68] { R260 += 1, R220 += 1, R190 += 1, R191 += 1 };
  s0 -> s6 [68, 68] { R260 += 1, R220 += 1, R190 += 1, R191 += 1 };
  s0 -> s7 [68, 68] { R260 += 1, R220 += 1, R189 += 1, R190 += 1 };
  s0 -> s1 [69, 65535] { R260 += 1, R220 += 1, R190 += 1, R191 += 1 };
  s0 -> s2 [69, 65535] { R260 += 1, R220 += 1, R189 += 1, R190 += 1 };
  s1 -> s1 [0, 67] { R260 += 1, R220 += 1, R190 += 1, R191 += 1 };
  s1 -> s11 [0, 67] { R260 += 1, R220 += 1 };
  s1 -> s12 [68, 68] { R260 += 1, R220 += 1 };
  s1 -> s5 [68, 68] { R260 += 1, R220 += 1, R190 += 1, R191 += 1 };
  s1 -> s6 [68, 68] { R260 += 1, R220 += 1, R190 += 1, R191 += 1 };
  s1 -> s8 [68, 68] { R260 += 1, R220 += 1 };
  s1 -> s1 [69, 65535] { R260 += 1, R220 += 1, R190 += 1, R191 += 1 };
  s1 -> s11 [69, 65535] { R260 += 1, R220 += 1 };
  s2 -> s1 [0, 67] { R260 += 1, R220 += 1, R190 += 1, R191 += 1 };
  s2 -> s2 [0, 67] { R260 += 1, R220 += 1, R189 += 1, R190 += 1 };
  s2 -> s4 [68, 68] { R260 += 1, R220 += 1, R189 += 1, R190 += 1 };
  s2 -> s5 [68, 68] { R260 += 1, R220 += 1, R190 += 1, R191 += 1 };
  s2 -> s6 [68, 68] { R260 += 1, R220 += 1, R190 += 1, R191 += 1 };
  s2 -> s7 [68, 68] { R260 += 1, R220 += 1, R189 += 1, R190 += 1 };
  s2 -> s1 [69, 65535] { R260 += 1, R220 += 1, R190 += 1, R191 += 1 };
  s2 -> s2 [69, 65535] { R260 += 1, R220 += 1, R189 += 1, R190 += 1 };
  s3 -> s1 [0, 67] { R260 += 1, R220 += 1, R190 += 1, R191 += 1 };
  s3 -> s2 [0, 67] { R260 += 1, R220 += 1, R189 += 1, R190 += 1 };
  s3 -> s3 [0, 65535] { R260 += 1, R219 += 1, R220 += 1 };
  s3 -> s4 [68, 68] { R260 += 1, R220 += 1, R189 += 1, R190 += 1 };
  s3 -> s5 [68, 68] { R260 += 1, R220 += 1, R190 += 1, R191 += 1 };
  s3 -> s6 [68, 68] { R260 += 1, R220 += 1, R190 += 1, R191 += 1 };
  s3 -> s7 [68, 68] { R260 += 1, R220 += 1, R189 += 1, R190 += 1 };
  s3 -> s1 [69, 65535] { R260 += 1, R220 += 1, R190 += 1, R191 += 1 };
  s3 -> s2 [69, 65535] { R260 += 1, R220 += 1, R189 += 1, R190 += 1 };
  s4 -> s4 [0, 65535] { R260 += 1, R220 += 1, R189 += 1, R190 += 1 };
  s4 -> s6 [0, 65535] { R260 += 1, R220 += 1, R190 += 1, R191 += 1 };
  s6 -> s6 [0, 65535] { R260 += 1, R220 += 1, R190 += 1, R191 += 1 };
  s6 -> s8 [0, 65535] { R260 += 1, R220 += 1 };
  s8 -> s9 [0, 65535] { R260 += 1 };
  s8 -> s10 [0, 65535];
  s8 -> s8 [0, 65535] { R260 += 1, R220 += 1 };
  s9 -> s9 [0, 65535] { R260 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s11 [0, 67] { R260 += 1, R220 += 1 };
  s11 -> s10 [0, 65535];
  s11 -> s11 [0, 65535] { R260 += 1 };
  s11 -> s12 [68, 68] { R260 += 1, R220 += 1 };
  s11 -> s8 [68, 68] { R260 += 1, R220 += 1 };
  s11 -> s11 [69, 65535] { R260 += 1, R220 += 1 };
  s12 -> s12 [0, 65535] { R260 += 1 };
  s12 -> s10 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining P30
automaton P30_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
synchronised {  // Automata constraining P31
automaton P31_0 {
  init s0;
  s0 -> s1 [9, 9];
  accepting s1;
};
};
synchronised {  // Automata constraining P33
automaton P33_0 {
  init s0;
  s0 -> s1 [13, 13];
  accepting s1;
};
};
synchronised {  // Automata constraining P32
automaton P32_0 {
  init s0;
  s0 -> s1 [10, 10];
  accepting s1;
};
};
synchronised {  // Automata constraining P34
automaton P34_0 {
  init s0;
  s0 -> s1 [11, 11];
  accepting s1;
};
};
constraint R1 = R208 && R2 - R260 = 1 && R17 - R208 = -1 && R18 = R208 && R19 - R208 = -1 && R20 = R208 && R21 = 0 && R22 = 1 && R23 = 0 && R24 = 1 && R25 = R260 && R26 - R260 = 1 && R27 = R260 && R28 - R260 = 1 && R29 = 0 && R30 = 1 && R31 = 0 && R32 = 1 && R195 = 0 && R196 = R208 && R197 = 0 && R198 = R208 && R199 = 0 && R200 = R208 && R201 = 0 && R202 = R208 && R203 = 0 && R204 = R208 && R205 = 0 && R206 = R208 && R207 = 0 && R219 = 0 && R220 = 0 && R221 = 0 && R222 = R260 && R223 = 0 && R224 = R260 && R225 = 0 && R226 = R260 && R227 = 0 && R228 = R260 && R229 = 0 && R230 = R260 && R231 = 0 && R232 = R260 && R233 = 0 && R234 = R260 && R235 = 0 && R236 = R260 && R237 = 0 && R238 = R260 && R239 = 0 && R240 = R260 && R241 = 0 && R242 = R260 && R243 = 0 && R244 = R260 && R245 = 0 && R246 = R260 && R247 = 0 && R248 = R260 && R249 = 0 && R250 = R260 && R251 = 0 && R252 = R260 && R253 = 0 && R254 = R260 && R255 = 0 && R256 = R260 && R257 = 0 && R258 = R260 && R259 = 0 && R10 < 1 && R13 < 1 && -1*R38 + -1*R37 < 1 && R40 + R39 < 1 && 0 < R208 && -1 < R260 && (R38 + R37 != 0 || R194 + R191 = 0 || (R43 + R41 = 0 && R44 + R42 = 0)) && (R38 + R37 != 0 || R194 + R191 = 0 || (R192 + R189 = 0 && R193 + R190 = 0)) && (R43 + R41 != 0 || R38 + R37 + -1*R44 + -1*R42 = 0 || R38 + R37 < 1) && (R192 + R189 != 0 || R38 + R37 + -1*R193 + -1*R190 = 0 || R38 + R37 < 1) && (R16 = 0 || (R209 = 0 && R210 = 0)) && (R16 = 0 || (R211 = 0 && R212 = 0)) && (R16 = 0 || (R213 = 0 && R214 = 0)) && (R16 = 0 || (R215 = 0 && R216 = 0)) && (R16 = 0 || (R217 = 0 && R218 = 0)) && (R43 + R41 = 0 || R38 + R37 < 1) && (R192 + R189 = 0 || R38 + R37 < 1);
// End of Parikh automata intersection problem
