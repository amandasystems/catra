// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R10, R13, R15, R16, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R261, R262, R263, R264, R265, R266, R267, R268, R269, R27, R270, R271, R272, R273, R274, R275, R276, R277, R278, R279, R28, R280, R281, R282, R283, R284, R285, R286, R287, R288, R289, R29, R290, R291, R292, R293, R294, R295, R296, R297, R298, R299, R3, R30, R300, R301, R302, R303, R304, R305, R306, R307, R308, R309, R31, R310, R311, R312, R313, R314, R315, R316, R317, R318, R319, R32, R320, R321, R322, R323, R324, R325, R326, R327, R328, R329, R330, R331, R332, R333, R334, R335, R336, R37, R38, R39, R4, R40, R5, R6;
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [100, 100];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R13 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s0 [0, 65535] { R25 += 1, R26 += 1 };
  s0 -> s1 [12, 12] { R26 += 1 };
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value2_4 {
  init s0;
  s0 -> s0 [0, 65535] { R27 += 1, R28 += 1 };
  s0 -> s1 [0, 65535] { R28 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R28 += 1, R5 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 8] { R30 += 1 };
  s0 -> s0 [0, 65535] { R29 += 1, R30 += 1 };
  s0 -> s2 [9, 13] { R30 += 1 };
  s0 -> s1 [14, 31] { R30 += 1 };
  s0 -> s2 [32, 32] { R30 += 1 };
  s0 -> s1 [33, 65535] { R30 += 1 };
  s1 -> s1 [0, 65535] { R30 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R30 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_6 {
  init s0;
  s0 -> s0 [0, 65535] { R31 += 1, R32 += 1 };
  s0 -> s1 [0, 65535] { R32 += 1, R6 += 1 };
  s1 -> s1 [0, 65535] { R32 += 1, R6 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 64] { R298 += 1 };
  s0 -> s0 [0, 65535] { R297 += 1, R298 += 1 };
  s0 -> s2 [68, 68] { R298 += 1 };
  s0 -> s1 [69, 65535] { R298 += 1 };
  s1 -> s1 [0, 64] { R298 += 1 };
  s1 -> s2 [68, 68] { R298 += 1 };
  s1 -> s1 [69, 65535] { R298 += 1 };
  s2 -> s2 [0, 64] { R298 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [68, 65535] { R298 += 1 };
  accepting s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R299 += 1, R300 += 1 };
  s0 -> s1 [0, 65535] { R300 += 1, R1 += 1 };
  s1 -> s1 [0, 65535] { R300 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 67] { R302 += 1 };
  s0 -> s2 [0, 65535] { R302 += 1, R10 += 1 };
  s0 -> s0 [0, 65535] { R301 += 1, R302 += 1 };
  s0 -> s3 [68, 68] { R302 += 1 };
  s0 -> s1 [69, 65535] { R302 += 1 };
  s1 -> s1 [0, 67] { R302 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [68, 68] { R302 += 1 };
  s1 -> s1 [69, 65535] { R302 += 1 };
  s2 -> s1 [0, 67] { R302 += 1 };
  s2 -> s2 [0, 65535] { R302 += 1, R10 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [68, 68] { R302 += 1 };
  s2 -> s1 [69, 65535] { R302 += 1 };
  s3 -> s3 [0, 65535] { R302 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 8] { R304 += 1, R18 += 1 };
  s0 -> s2 [0, 65535] { R304 += 1, R17 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R303 += 1, R304 += 1 };
  s0 -> s3 [9, 13] { R304 += 1, R18 += 1 };
  s0 -> s1 [14, 31] { R304 += 1, R18 += 1 };
  s0 -> s3 [32, 32] { R304 += 1, R18 += 1 };
  s0 -> s1 [33, 65535] { R304 += 1, R18 += 1 };
  s1 -> s5 [0, 65535] { R304 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R304 += 1, R18 += 1 };
  s2 -> s1 [0, 8] { R304 += 1, R18 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R304 += 1, R17 += 1, R18 += 1 };
  s2 -> s3 [9, 13] { R304 += 1, R18 += 1 };
  s2 -> s1 [14, 31] { R304 += 1, R18 += 1 };
  s2 -> s3 [32, 32] { R304 += 1, R18 += 1 };
  s2 -> s1 [33, 65535] { R304 += 1, R18 += 1 };
  s3 -> s1 [0, 65535] { R304 += 1, R18 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R304 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s0 [0, 65535] { R305 += 1, R306 += 1 };
  s0 -> s1 [0, 65535] { R306 += 1, R20 += 1, R3 += 1 };
  s0 -> s2 [0, 65535] { R306 += 1, R19 += 1, R20 += 1 };
  s1 -> s4 [0, 65535] { R306 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R306 += 1, R20 += 1, R3 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R306 += 1, R20 += 1, R3 += 1 };
  s2 -> s2 [0, 65535] { R306 += 1, R19 += 1, R20 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R306 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 8] { R308 += 1, R22 += 1 };
  s0 -> s2 [0, 65535] { R308 += 1, R21 += 1, R22 += 1 };
  s0 -> s0 [0, 65535] { R307 += 1, R308 += 1 };
  s0 -> s3 [9, 13] { R308 += 1, R22 += 1 };
  s0 -> s1 [14, 31] { R308 += 1, R22 += 1 };
  s0 -> s3 [32, 32] { R308 += 1, R22 += 1 };
  s0 -> s1 [33, 65535] { R308 += 1, R22 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R308 += 1, R22 += 1 };
  s1 -> s5 [0, 65535] { R308 += 1 };
  s2 -> s1 [0, 8] { R308 += 1, R22 += 1 };
  s2 -> s2 [0, 65535] { R308 += 1, R21 += 1, R22 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R308 += 1, R22 += 1 };
  s2 -> s1 [14, 31] { R308 += 1, R22 += 1 };
  s2 -> s3 [32, 32] { R308 += 1, R22 += 1 };
  s2 -> s1 [33, 65535] { R308 += 1, R22 += 1 };
  s3 -> s1 [0, 65535] { R308 += 1, R22 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R308 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 65535] { R310 += 1, R23 += 1, R24 += 1 };
  s0 -> s0 [0, 65535] { R309 += 1, R310 += 1 };
  s0 -> s2 [0, 65535] { R310 += 1, R24 += 1, R4 += 1 };
  s1 -> s1 [0, 65535] { R310 += 1, R23 += 1, R24 += 1 };
  s1 -> s2 [0, 65535] { R310 += 1, R24 += 1, R4 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R310 += 1, R24 += 1, R4 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R310 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R310 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 67] { R312 += 1, R272 += 1 };
  s0 -> s0 [0, 65535] { R311 += 1, R312 += 1 };
  s0 -> s2 [0, 65535] { R312 += 1, R271 += 1, R272 += 1 };
  s0 -> s1 [69, 65535] { R312 += 1, R272 += 1 };
  s1 -> s1 [0, 67] { R312 += 1, R272 += 1 };
  s1 -> s1 [0, 65535] { R312 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [69, 65535] { R312 += 1, R272 += 1 };
  s2 -> s1 [0, 67] { R312 += 1, R272 += 1 };
  s2 -> s2 [0, 65535] { R312 += 1, R271 += 1, R272 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [69, 65535] { R312 += 1, R272 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 65535] { R314 += 1, R274 += 1, R15 += 1 };
  s0 -> s2 [0, 65535] { R314 += 1, R273 += 1, R274 += 1 };
  s0 -> s0 [0, 65535] { R313 += 1, R314 += 1 };
  s1 -> s1 [0, 65535] { R314 += 1, R274 += 1, R15 += 1 };
  s1 -> s4 [0, 65535] { R314 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R314 += 1, R274 += 1, R15 += 1 };
  s2 -> s2 [0, 65535] { R314 += 1, R273 += 1, R274 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R314 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 68] { R316 += 1, R276 += 1 };
  s0 -> s0 [0, 65535] { R315 += 1, R316 += 1 };
  s0 -> s2 [0, 65535] { R316 += 1, R275 += 1, R276 += 1 };
  s0 -> s3 [85, 85] { R316 += 1, R276 += 1 };
  s0 -> s1 [86, 65535] { R316 += 1, R276 += 1 };
  s1 -> s1 [0, 68] { R316 += 1, R276 += 1 };
  s1 -> s3 [85, 85] { R316 += 1, R276 += 1 };
  s1 -> s1 [86, 65535] { R316 += 1, R276 += 1 };
  s2 -> s1 [0, 68] { R316 += 1, R276 += 1 };
  s2 -> s2 [0, 65535] { R316 += 1, R275 += 1, R276 += 1 };
  s2 -> s3 [85, 85] { R316 += 1, R276 += 1 };
  s2 -> s1 [86, 65535] { R316 += 1, R276 += 1 };
  s3 -> s3 [0, 68] { R316 += 1, R276 += 1 };
  s3 -> s3 [0, 65535] { R316 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [85, 65535] { R316 += 1, R276 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 65535] { R318 += 1, R277 += 1, R278 += 1 };
  s0 -> s0 [0, 65535] { R317 += 1, R318 += 1 };
  s0 -> s2 [0, 65535] { R318 += 1, R278 += 1, R38 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R318 += 1, R277 += 1, R278 += 1 };
  s1 -> s2 [0, 65535] { R318 += 1, R278 += 1, R38 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R318 += 1 };
  s2 -> s2 [0, 65535] { R318 += 1, R278 += 1, R38 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R318 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 84] { R320 += 1, R280 += 1 };
  s0 -> s2 [0, 65535] { R320 += 1, R280 += 1, R40 += 1 };
  s0 -> s3 [0, 65535] { R320 += 1, R279 += 1, R280 += 1 };
  s0 -> s0 [0, 65535] { R319 += 1, R320 += 1 };
  s0 -> s1 [86, 65535] { R320 += 1, R280 += 1 };
  s1 -> s1 [0, 84] { R320 += 1, R280 += 1 };
  s1 -> s1 [0, 65535] { R320 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [86, 65535] { R320 += 1, R280 += 1 };
  s2 -> s1 [0, 84] { R320 += 1, R280 += 1 };
  s2 -> s2 [0, 65535] { R320 += 1, R280 += 1, R40 += 1 };
  s2 -> s5 [0, 65535] { R320 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [86, 65535] { R320 += 1, R280 += 1 };
  s3 -> s1 [0, 84] { R320 += 1, R280 += 1 };
  s3 -> s2 [0, 65535] { R320 += 1, R280 += 1, R40 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R320 += 1, R279 += 1, R280 += 1 };
  s3 -> s1 [86, 65535] { R320 += 1, R280 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R320 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 84] { R322 += 1, R282 += 1, R264 += 1 };
  s0 -> s1 [0, 65535] { R322 += 1, R282 += 1 };
  s0 -> s0 [0, 65535] { R321 += 1, R322 += 1 };
  s0 -> s2 [0, 65535] { R322 += 1, R281 += 1, R282 += 1 };
  s0 -> s1 [86, 65535] { R322 += 1, R282 += 1, R264 += 1 };
  s1 -> s1 [0, 84] { R322 += 1, R282 += 1, R264 += 1 };
  s1 -> s1 [0, 65535] { R322 += 1, R282 += 1 };
  s1 -> s4 [0, 65535] { R322 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [86, 65535] { R322 += 1, R282 += 1, R264 += 1 };
  s2 -> s1 [0, 84] { R322 += 1, R282 += 1, R264 += 1 };
  s2 -> s1 [0, 65535] { R322 += 1, R282 += 1 };
  s2 -> s2 [0, 65535] { R322 += 1, R281 += 1, R282 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [86, 65535] { R322 += 1, R282 += 1, R264 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R322 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 65535] { R324 += 1, R284 += 1, R269 += 1, R270 += 1 };
  s0 -> s0 [0, 65535] { R323 += 1, R324 += 1 };
  s0 -> s2 [0, 65535] { R324 += 1, R284 += 1, R268 += 1, R269 += 1 };
  s0 -> s3 [0, 65535] { R324 += 1, R283 += 1, R284 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R324 += 1 };
  s1 -> s1 [0, 65535] { R324 += 1, R284 += 1, R269 += 1, R270 += 1 };
  s1 -> s6 [0, 65535] { R324 += 1, R284 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R324 += 1 };
  s2 -> s1 [0, 65535] { R324 += 1, R284 += 1, R269 += 1, R270 += 1 };
  s2 -> s2 [0, 65535] { R324 += 1, R284 += 1, R268 += 1, R269 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R324 += 1, R284 += 1, R269 += 1, R270 += 1 };
  s3 -> s2 [0, 65535] { R324 += 1, R284 += 1, R268 += 1, R269 += 1 };
  s3 -> s3 [0, 65535] { R324 += 1, R283 += 1, R284 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R324 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R324 += 1 };
  s6 -> s6 [0, 65535] { R324 += 1, R284 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_21 {
  init s0;
  s0 -> s0 [0, 65535] { R325 += 1, R326 += 1 };
  s0 -> s1 [0, 65535] { R326 += 1, R285 += 1, R286 += 1 };
  s0 -> s2 [0, 65535] { R326 += 1, R286 += 1, R16 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R326 += 1, R285 += 1, R286 += 1 };
  s1 -> s2 [0, 65535] { R326 += 1, R286 += 1, R16 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R326 += 1 };
  s2 -> s2 [0, 65535] { R326 += 1, R286 += 1, R16 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R326 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 67] { R328 += 1, R288 += 1 };
  s0 -> s0 [0, 65535] { R327 += 1, R328 += 1 };
  s0 -> s2 [0, 65535] { R328 += 1, R287 += 1, R288 += 1 };
  s0 -> s3 [68, 68] { R328 += 1, R288 += 1 };
  s0 -> s4 [68, 68] { R328 += 1, R288 += 1 };
  s0 -> s1 [86, 65535] { R328 += 1, R288 += 1 };
  s1 -> s1 [0, 67] { R328 += 1, R288 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R328 += 1 };
  s1 -> s3 [68, 68] { R328 += 1, R288 += 1 };
  s1 -> s4 [68, 68] { R328 += 1, R288 += 1 };
  s1 -> s1 [86, 65535] { R328 += 1, R288 += 1 };
  s2 -> s1 [0, 67] { R328 += 1, R288 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R328 += 1, R287 += 1, R288 += 1 };
  s2 -> s3 [68, 68] { R328 += 1, R288 += 1 };
  s2 -> s4 [68, 68] { R328 += 1, R288 += 1 };
  s2 -> s1 [86, 65535] { R328 += 1, R288 += 1 };
  s3 -> s3 [0, 68] { R328 += 1, R288 += 1 };
  s3 -> s3 [0, 65535] { R328 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [86, 65535] { R328 += 1, R288 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R328 += 1 };
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 67] { R330 += 1, R290 += 1, R37 += 1 };
  s0 -> s2 [0, 65535] { R330 += 1, R289 += 1, R290 += 1 };
  s0 -> s0 [0, 65535] { R329 += 1, R330 += 1 };
  s0 -> s3 [68, 68] { R330 += 1, R290 += 1, R37 += 1 };
  s0 -> s4 [68, 68] { R330 += 1, R290 += 1, R37 += 1 };
  s0 -> s1 [69, 65535] { R330 += 1, R290 += 1, R37 += 1 };
  s1 -> s1 [0, 67] { R330 += 1, R290 += 1, R37 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R330 += 1 };
  s1 -> s3 [68, 68] { R330 += 1, R290 += 1, R37 += 1 };
  s1 -> s4 [68, 68] { R330 += 1, R290 += 1, R37 += 1 };
  s1 -> s1 [69, 65535] { R330 += 1, R290 += 1, R37 += 1 };
  s2 -> s1 [0, 67] { R330 += 1, R290 += 1, R37 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R330 += 1, R289 += 1, R290 += 1 };
  s2 -> s3 [68, 68] { R330 += 1, R290 += 1, R37 += 1 };
  s2 -> s4 [68, 68] { R330 += 1, R290 += 1, R37 += 1 };
  s2 -> s1 [69, 65535] { R330 += 1, R290 += 1, R37 += 1 };
  s3 -> s3 [0, 65535] { R330 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R330 += 1 };
  s4 -> s4 [0, 65535] { R330 += 1, R290 += 1, R37 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R330 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 67] { R332 += 1, R292 += 1, R39 += 1 };
  s0 -> s2 [0, 65535] { R332 += 1, R291 += 1, R292 += 1 };
  s0 -> s0 [0, 65535] { R331 += 1, R332 += 1 };
  s0 -> s3 [68, 68] { R332 += 1, R292 += 1, R39 += 1 };
  s0 -> s4 [68, 68] { R332 += 1, R292 += 1, R39 += 1 };
  s0 -> s1 [69, 65535] { R332 += 1, R292 += 1, R39 += 1 };
  s1 -> s1 [0, 67] { R332 += 1, R292 += 1, R39 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R332 += 1 };
  s1 -> s3 [68, 68] { R332 += 1, R292 += 1, R39 += 1 };
  s1 -> s4 [68, 68] { R332 += 1, R292 += 1, R39 += 1 };
  s1 -> s1 [69, 65535] { R332 += 1, R292 += 1, R39 += 1 };
  s2 -> s1 [0, 67] { R332 += 1, R292 += 1, R39 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R332 += 1, R291 += 1, R292 += 1 };
  s2 -> s3 [68, 68] { R332 += 1, R292 += 1, R39 += 1 };
  s2 -> s4 [68, 68] { R332 += 1, R292 += 1, R39 += 1 };
  s2 -> s1 [69, 65535] { R332 += 1, R292 += 1, R39 += 1 };
  s3 -> s6 [0, 65535] { R332 += 1 };
  s3 -> s3 [0, 65535] { R332 += 1, R292 += 1, R39 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R332 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R332 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 67] { R334 += 1, R294 += 1, R261 += 1, R262 += 1 };
  s0 -> s2 [0, 67] { R334 += 1, R294 += 1, R262 += 1 };
  s0 -> s3 [0, 65535] { R334 += 1, R293 += 1, R294 += 1 };
  s0 -> s0 [0, 65535] { R333 += 1, R334 += 1 };
  s0 -> s4 [68, 68] { R334 += 1, R294 += 1, R262 += 1 };
  s0 -> s5 [68, 68] { R334 += 1, R294 += 1, R261 += 1, R262 += 1 };
  s0 -> s6 [68, 68] { R334 += 1, R294 += 1, R261 += 1, R262 += 1 };
  s0 -> s7 [68, 68] { R334 += 1, R294 += 1, R262 += 1 };
  s0 -> s2 [69, 84] { R334 += 1, R294 += 1, R262 += 1 };
  s0 -> s1 [69, 65535] { R334 += 1, R294 += 1, R261 += 1, R262 += 1 };
  s0 -> s2 [86, 65535] { R334 += 1, R294 += 1, R262 += 1 };
  s1 -> s1 [0, 67] { R334 += 1, R294 += 1, R261 += 1, R262 += 1 };
  s1 -> s2 [0, 67] { R334 += 1, R294 += 1, R262 += 1 };
  s1 -> s4 [68, 68] { R334 += 1, R294 += 1, R262 += 1 };
  s1 -> s5 [68, 68] { R334 += 1, R294 += 1, R261 += 1, R262 += 1 };
  s1 -> s6 [68, 68] { R334 += 1, R294 += 1, R261 += 1, R262 += 1 };
  s1 -> s7 [68, 68] { R334 += 1, R294 += 1, R262 += 1 };
  s1 -> s2 [69, 84] { R334 += 1, R294 += 1, R262 += 1 };
  s1 -> s1 [69, 65535] { R334 += 1, R294 += 1, R261 += 1, R262 += 1 };
  s1 -> s2 [86, 65535] { R334 += 1, R294 += 1, R262 += 1 };
  s2 -> s2 [0, 67] { R334 += 1, R294 += 1, R262 += 1 };
  s2 -> s2 [0, 65535] { R334 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s4 [68, 68] { R334 += 1, R294 += 1 };
  s2 -> s7 [68, 68] { R334 += 1, R294 += 1 };
  s2 -> s2 [69, 84] { R334 += 1, R294 += 1, R262 += 1 };
  s2 -> s2 [69, 65535] { R334 += 1, R294 += 1 };
  s2 -> s2 [86, 65535] { R334 += 1, R294 += 1, R262 += 1 };
  s3 -> s1 [0, 67] { R334 += 1, R294 += 1, R261 += 1, R262 += 1 };
  s3 -> s2 [0, 67] { R334 += 1, R294 += 1, R262 += 1 };
  s3 -> s3 [0, 65535] { R334 += 1, R293 += 1, R294 += 1 };
  s3 -> s4 [68, 68] { R334 += 1, R294 += 1, R262 += 1 };
  s3 -> s5 [68, 68] { R334 += 1, R294 += 1, R261 += 1, R262 += 1 };
  s3 -> s6 [68, 68] { R334 += 1, R294 += 1, R261 += 1, R262 += 1 };
  s3 -> s7 [68, 68] { R334 += 1, R294 += 1, R262 += 1 };
  s3 -> s2 [69, 84] { R334 += 1, R294 += 1, R262 += 1 };
  s3 -> s1 [69, 65535] { R334 += 1, R294 += 1, R261 += 1, R262 += 1 };
  s3 -> s2 [86, 65535] { R334 += 1, R294 += 1, R262 += 1 };
  s4 -> s4 [0, 65535] { R334 += 1 };
  s4 -> s8 [0, 65535];
  s5 -> s7 [0, 84] { R334 += 1, R294 += 1, R262 += 1 };
  s5 -> s5 [0, 65535] { R334 += 1, R294 += 1, R261 += 1, R262 += 1 };
  s5 -> s7 [86, 65535] { R334 += 1, R294 += 1, R262 += 1 };
  s7 -> s7 [0, 84] { R334 += 1, R294 += 1, R262 += 1 };
  s7 -> s7 [0, 65535] { R334 += 1, R294 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s9 [0, 65535] { R334 += 1 };
  s7 -> s7 [86, 65535] { R334 += 1, R294 += 1, R262 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R334 += 1 };
  accepting s4, s8, s2, s9, s7;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 67] { R336 += 1, R296 += 1, R265 += 1, R266 += 1 };
  s0 -> s2 [0, 65535] { R336 += 1, R295 += 1, R296 += 1 };
  s0 -> s0 [0, 65535] { R335 += 1, R336 += 1 };
  s0 -> s3 [68, 68] { R336 += 1, R296 += 1, R265 += 1, R266 += 1 };
  s0 -> s4 [68, 68] { R336 += 1, R296 += 1, R265 += 1, R266 += 1 };
  s0 -> s1 [69, 65535] { R336 += 1, R296 += 1, R265 += 1, R266 += 1 };
  s1 -> s1 [0, 67] { R336 += 1, R296 += 1, R265 += 1, R266 += 1 };
  s1 -> s1 [0, 65535] { R336 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [68, 68] { R336 += 1, R296 += 1, R265 += 1, R266 += 1 };
  s1 -> s4 [68, 68] { R336 += 1, R296 += 1, R265 += 1, R266 += 1 };
  s1 -> s1 [69, 65535] { R336 += 1, R296 += 1, R265 += 1, R266 += 1 };
  s2 -> s1 [0, 67] { R336 += 1, R296 += 1, R265 += 1, R266 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R336 += 1, R295 += 1, R296 += 1 };
  s2 -> s3 [68, 68] { R336 += 1, R296 += 1, R265 += 1, R266 += 1 };
  s2 -> s4 [68, 68] { R336 += 1, R296 += 1, R265 += 1, R266 += 1 };
  s2 -> s1 [69, 65535] { R336 += 1, R296 += 1, R265 += 1, R266 += 1 };
  s3 -> s3 [0, 65535] { R336 += 1, R296 += 1, R265 += 1, R266 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R336 += 1 };
  s4 -> s4 [0, 65535] { R336 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R336 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
synchronised {  // Automata constraining P30
automaton P30_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
synchronised {  // Automata constraining P31
automaton P31_0 {
  init s0;
  s0 -> s1 [9, 9];
  accepting s1;
};
};
synchronised {  // Automata constraining P33
automaton P33_0 {
  init s0;
  s0 -> s1 [13, 13];
  accepting s1;
};
};
synchronised {  // Automata constraining P32
automaton P32_0 {
  init s0;
  s0 -> s1 [10, 10];
  accepting s1;
};
};
synchronised {  // Automata constraining P34
automaton P34_0 {
  init s0;
  s0 -> s1 [11, 11];
  accepting s1;
};
};
constraint R1 = R284 && R2 - R336 = 1 && R17 - R284 = -1 && R18 = R284 && R19 - R284 = -1 && R20 = R284 && R21 = 0 && R22 = 1 && R23 = 0 && R24 = 1 && R25 = R336 && R26 - R336 = 1 && R27 = R336 && R28 - R336 = 1 && R29 = 0 && R30 = 1 && R31 = 0 && R32 = 1 && R271 = 0 && R272 = R284 && R273 = 0 && R274 = R284 && R275 = 0 && R276 = R284 && R277 = 0 && R278 = R284 && R279 = 0 && R280 = R284 && R281 = 0 && R282 = R284 && R283 = 0 && R293 = 0 && R294 = 0 && R297 = 0 && R298 = R336 && R299 = 0 && R300 = R336 && R301 = 0 && R302 = R336 && R303 = 0 && R304 = R336 && R305 = 0 && R306 = R336 && R307 = 0 && R308 = R336 && R309 = 0 && R310 = R336 && R311 = 0 && R312 = R336 && R313 = 0 && R314 = R336 && R315 = 0 && R316 = R336 && R317 = 0 && R318 = R336 && R319 = 0 && R320 = R336 && R321 = 0 && R322 = R336 && R323 = 0 && R324 = R336 && R325 = 0 && R326 = R336 && R327 = 0 && R328 = R336 && R329 = 0 && R330 = R336 && R331 = 0 && R332 = R336 && R333 = 0 && R334 = R336 && R335 = 0 && R10 < 1 && R13 < 1 && -1*R38 + -1*R37 < 1 && R40 + R39 < 1 && 0 < R284 && -1 < R336 && (R38 + R37 != 0 || R270 + R267 = 0 || (R263 + R261 = 0 && R264 + R262 = 0)) && (R38 + R37 != 0 || R270 + R267 = 0 || (R268 + R265 = 0 && R269 + R266 = 0)) && (R263 + R261 != 0 || R38 + R37 + -1*R264 + -1*R262 = 0 || R38 + R37 < 1) && (R268 + R265 != 0 || R38 + R37 + -1*R269 + -1*R266 = 0 || R38 + R37 < 1) && (R16 = 0 || (R285 = 0 && R286 = 0)) && (R16 = 0 || (R287 = 0 && R288 = 0)) && (R16 = 0 || (R289 = 0 && R290 = 0)) && (R16 = 0 || (R291 = 0 && R292 = 0)) && (R16 = 0 || (R295 = 0 && R296 = 0)) && (R263 + R261 = 0 || R38 + R37 < 1) && (R268 + R265 = 0 || R38 + R37 < 1);
// End of Parikh automata intersection problem
