// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R10, R117, R118, R119, R120, R121, R122, R123, R124, R125, R126, R127, R128, R129, R13, R130, R131, R132, R133, R134, R135, R136, R137, R138, R139, R140, R141, R142, R143, R144, R145, R146, R147, R148, R149, R15, R150, R151, R152, R153, R154, R155, R156, R157, R158, R159, R16, R160, R161, R162, R163, R164, R165, R166, R167, R168, R169, R17, R170, R171, R172, R173, R174, R175, R176, R177, R178, R179, R18, R180, R181, R182, R183, R184, R185, R186, R187, R188, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R31, R32, R37, R38, R39, R4, R40, R41, R42, R43, R44, R5, R6;
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [100, 100];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R13 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s0 [0, 65535] { R25 += 1, R26 += 1 };
  s0 -> s1 [12, 12] { R26 += 1 };
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value2_4 {
  init s0;
  s0 -> s0 [0, 65535] { R27 += 1, R28 += 1 };
  s0 -> s1 [0, 65535] { R28 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R28 += 1, R5 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 8] { R30 += 1 };
  s0 -> s0 [0, 65535] { R29 += 1, R30 += 1 };
  s0 -> s2 [9, 13] { R30 += 1 };
  s0 -> s1 [14, 31] { R30 += 1 };
  s0 -> s2 [32, 32] { R30 += 1 };
  s0 -> s1 [33, 65535] { R30 += 1 };
  s1 -> s1 [0, 65535] { R30 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R30 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_6 {
  init s0;
  s0 -> s0 [0, 65535] { R31 += 1, R32 += 1 };
  s0 -> s1 [0, 65535] { R32 += 1, R6 += 1 };
  s1 -> s1 [0, 65535] { R32 += 1, R6 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 64] { R150 += 1 };
  s0 -> s0 [0, 65535] { R149 += 1, R150 += 1 };
  s0 -> s2 [68, 68] { R150 += 1 };
  s0 -> s1 [69, 65535] { R150 += 1 };
  s1 -> s1 [0, 64] { R150 += 1 };
  s1 -> s2 [68, 68] { R150 += 1 };
  s1 -> s1 [69, 65535] { R150 += 1 };
  s2 -> s2 [0, 64] { R150 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [68, 65535] { R150 += 1 };
  accepting s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R152 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R151 += 1, R152 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R152 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 67] { R154 += 1 };
  s0 -> s2 [0, 65535] { R154 += 1, R10 += 1 };
  s0 -> s0 [0, 65535] { R153 += 1, R154 += 1 };
  s0 -> s3 [68, 68] { R154 += 1 };
  s0 -> s1 [69, 65535] { R154 += 1 };
  s1 -> s1 [0, 67] { R154 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [68, 68] { R154 += 1 };
  s1 -> s1 [69, 65535] { R154 += 1 };
  s2 -> s1 [0, 67] { R154 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R154 += 1, R10 += 1 };
  s2 -> s3 [68, 68] { R154 += 1 };
  s2 -> s1 [69, 65535] { R154 += 1 };
  s3 -> s3 [0, 65535] { R154 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 8] { R156 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R155 += 1, R156 += 1 };
  s0 -> s2 [0, 65535] { R156 += 1, R17 += 1, R18 += 1 };
  s0 -> s3 [9, 13] { R156 += 1, R18 += 1 };
  s0 -> s1 [14, 31] { R156 += 1, R18 += 1 };
  s0 -> s3 [32, 32] { R156 += 1, R18 += 1 };
  s0 -> s1 [33, 65535] { R156 += 1, R18 += 1 };
  s1 -> s1 [0, 65535] { R156 += 1, R18 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R156 += 1 };
  s2 -> s1 [0, 8] { R156 += 1, R18 += 1 };
  s2 -> s2 [0, 65535] { R156 += 1, R17 += 1, R18 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R156 += 1, R18 += 1 };
  s2 -> s1 [14, 31] { R156 += 1, R18 += 1 };
  s2 -> s3 [32, 32] { R156 += 1, R18 += 1 };
  s2 -> s1 [33, 65535] { R156 += 1, R18 += 1 };
  s3 -> s1 [0, 65535] { R156 += 1, R18 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R156 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 65535] { R158 += 1, R19 += 1, R20 += 1 };
  s0 -> s0 [0, 65535] { R157 += 1, R158 += 1 };
  s0 -> s2 [0, 65535] { R158 += 1, R20 += 1, R3 += 1 };
  s1 -> s1 [0, 65535] { R158 += 1, R19 += 1, R20 += 1 };
  s1 -> s2 [0, 65535] { R158 += 1, R20 += 1, R3 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R158 += 1 };
  s2 -> s2 [0, 65535] { R158 += 1, R20 += 1, R3 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R158 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 8] { R160 += 1, R22 += 1 };
  s0 -> s2 [0, 65535] { R160 += 1, R21 += 1, R22 += 1 };
  s0 -> s0 [0, 65535] { R159 += 1, R160 += 1 };
  s0 -> s3 [9, 13] { R160 += 1, R22 += 1 };
  s0 -> s1 [14, 31] { R160 += 1, R22 += 1 };
  s0 -> s3 [32, 32] { R160 += 1, R22 += 1 };
  s0 -> s1 [33, 65535] { R160 += 1, R22 += 1 };
  s1 -> s1 [0, 65535] { R160 += 1, R22 += 1 };
  s1 -> s5 [0, 65535] { R160 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R160 += 1, R22 += 1 };
  s2 -> s2 [0, 65535] { R160 += 1, R21 += 1, R22 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R160 += 1, R22 += 1 };
  s2 -> s1 [14, 31] { R160 += 1, R22 += 1 };
  s2 -> s3 [32, 32] { R160 += 1, R22 += 1 };
  s2 -> s1 [33, 65535] { R160 += 1, R22 += 1 };
  s3 -> s1 [0, 65535] { R160 += 1, R22 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R160 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s0 [0, 65535] { R161 += 1, R162 += 1 };
  s0 -> s1 [0, 65535] { R162 += 1, R23 += 1, R24 += 1 };
  s0 -> s2 [0, 65535] { R162 += 1, R24 += 1, R4 += 1 };
  s1 -> s1 [0, 65535] { R162 += 1, R23 += 1, R24 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R162 += 1, R24 += 1, R4 += 1 };
  s2 -> s3 [0, 65535] { R162 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R162 += 1, R24 += 1, R4 += 1 };
  s3 -> s3 [0, 65535] { R162 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 67] { R164 += 1, R124 += 1 };
  s0 -> s0 [0, 65535] { R163 += 1, R164 += 1 };
  s0 -> s2 [0, 65535] { R164 += 1, R123 += 1, R124 += 1 };
  s0 -> s1 [69, 65535] { R164 += 1, R124 += 1 };
  s1 -> s1 [0, 67] { R164 += 1, R124 += 1 };
  s1 -> s1 [0, 65535] { R164 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [69, 65535] { R164 += 1, R124 += 1 };
  s2 -> s1 [0, 67] { R164 += 1, R124 += 1 };
  s2 -> s2 [0, 65535] { R164 += 1, R123 += 1, R124 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [69, 65535] { R164 += 1, R124 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_15 {
  init s0;
  s0 -> s0 [0, 65535] { R165 += 1, R166 += 1 };
  s0 -> s1 [0, 65535] { R166 += 1, R125 += 1, R126 += 1 };
  s0 -> s2 [0, 65535] { R166 += 1, R126 += 1, R15 += 1 };
  s1 -> s1 [0, 65535] { R166 += 1, R125 += 1, R126 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R166 += 1, R126 += 1, R15 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R166 += 1, R126 += 1, R15 += 1 };
  s2 -> s4 [0, 65535] { R166 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R166 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 68] { R168 += 1, R128 += 1 };
  s0 -> s0 [0, 65535] { R167 += 1, R168 += 1 };
  s0 -> s2 [0, 65535] { R168 += 1, R127 += 1, R128 += 1 };
  s0 -> s3 [85, 85] { R168 += 1, R128 += 1 };
  s0 -> s1 [86, 65535] { R168 += 1, R128 += 1 };
  s1 -> s1 [0, 68] { R168 += 1, R128 += 1 };
  s1 -> s3 [85, 85] { R168 += 1, R128 += 1 };
  s1 -> s1 [86, 65535] { R168 += 1, R128 += 1 };
  s2 -> s1 [0, 68] { R168 += 1, R128 += 1 };
  s2 -> s2 [0, 65535] { R168 += 1, R127 += 1, R128 += 1 };
  s2 -> s3 [85, 85] { R168 += 1, R128 += 1 };
  s2 -> s1 [86, 65535] { R168 += 1, R128 += 1 };
  s3 -> s3 [0, 68] { R168 += 1, R128 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R168 += 1 };
  s3 -> s3 [85, 65535] { R168 += 1, R128 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton value2_17 {
  init s0;
  s0 -> s0 [0, 65535] { R169 += 1, R170 += 1 };
  s0 -> s1 [0, 65535] { R170 += 1, R129 += 1, R130 += 1 };
  s0 -> s2 [0, 65535] { R170 += 1, R130 += 1, R38 += 1 };
  s1 -> s1 [0, 65535] { R170 += 1, R129 += 1, R130 += 1 };
  s1 -> s2 [0, 65535] { R170 += 1, R130 += 1, R38 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R170 += 1 };
  s2 -> s2 [0, 65535] { R170 += 1, R130 += 1, R38 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R170 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 84] { R172 += 1, R132 += 1 };
  s0 -> s2 [0, 65535] { R172 += 1, R132 += 1, R40 += 1 };
  s0 -> s3 [0, 65535] { R172 += 1, R131 += 1, R132 += 1 };
  s0 -> s0 [0, 65535] { R171 += 1, R172 += 1 };
  s0 -> s1 [86, 65535] { R172 += 1, R132 += 1 };
  s1 -> s1 [0, 84] { R172 += 1, R132 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R172 += 1 };
  s1 -> s1 [86, 65535] { R172 += 1, R132 += 1 };
  s2 -> s1 [0, 84] { R172 += 1, R132 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R172 += 1, R132 += 1, R40 += 1 };
  s2 -> s5 [0, 65535] { R172 += 1 };
  s2 -> s1 [86, 65535] { R172 += 1, R132 += 1 };
  s3 -> s1 [0, 84] { R172 += 1, R132 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R172 += 1, R132 += 1, R40 += 1 };
  s3 -> s3 [0, 65535] { R172 += 1, R131 += 1, R132 += 1 };
  s3 -> s1 [86, 65535] { R172 += 1, R132 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R172 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 84] { R174 += 1, R134 += 1, R44 += 1 };
  s0 -> s2 [0, 65535] { R174 += 1, R134 += 1, R43 += 1, R44 += 1 };
  s0 -> s3 [0, 65535] { R174 += 1, R133 += 1, R134 += 1 };
  s0 -> s0 [0, 65535] { R173 += 1, R174 += 1 };
  s0 -> s1 [86, 65535] { R174 += 1, R134 += 1, R44 += 1 };
  s1 -> s1 [0, 84] { R174 += 1, R134 += 1, R44 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R174 += 1, R134 += 1 };
  s1 -> s5 [0, 65535] { R174 += 1 };
  s1 -> s1 [86, 65535] { R174 += 1, R134 += 1, R44 += 1 };
  s2 -> s1 [0, 84] { R174 += 1, R134 += 1, R44 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R174 += 1 };
  s2 -> s2 [0, 65535] { R174 += 1, R134 += 1, R43 += 1, R44 += 1 };
  s2 -> s1 [86, 65535] { R174 += 1, R134 += 1, R44 += 1 };
  s3 -> s1 [0, 84] { R174 += 1, R134 += 1, R44 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R174 += 1, R134 += 1, R43 += 1, R44 += 1 };
  s3 -> s3 [0, 65535] { R174 += 1, R133 += 1, R134 += 1 };
  s3 -> s1 [86, 65535] { R174 += 1, R134 += 1, R44 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R174 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_20 {
  init s0;
  s0 -> s0 [0, 65535] { R175 += 1, R176 += 1 };
  s0 -> s1 [0, 65535] { R176 += 1, R136 += 1, R121 += 1, R122 += 1 };
  s0 -> s2 [0, 65535] { R176 += 1, R136 += 1 };
  s0 -> s3 [0, 65535] { R176 += 1, R135 += 1, R136 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R176 += 1, R136 += 1, R121 += 1, R122 += 1 };
  s1 -> s5 [0, 65535] { R176 += 1 };
  s1 -> s2 [0, 65535] { R176 += 1, R136 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R176 += 1 };
  s2 -> s2 [0, 65535] { R176 += 1, R136 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R176 += 1, R136 += 1, R121 += 1, R122 += 1 };
  s3 -> s2 [0, 65535] { R176 += 1, R136 += 1 };
  s3 -> s3 [0, 65535] { R176 += 1, R135 += 1, R136 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R176 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_21 {
  init s0;
  s0 -> s0 [0, 65535] { R177 += 1, R178 += 1 };
  s0 -> s1 [0, 65535] { R178 += 1, R138 += 1, R16 += 1 };
  s0 -> s2 [0, 65535] { R178 += 1, R137 += 1, R138 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R178 += 1, R138 += 1, R16 += 1 };
  s1 -> s4 [0, 65535] { R178 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R178 += 1, R138 += 1, R16 += 1 };
  s2 -> s2 [0, 65535] { R178 += 1, R137 += 1, R138 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R178 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 67] { R180 += 1, R140 += 1 };
  s0 -> s2 [0, 65535] { R180 += 1, R139 += 1, R140 += 1 };
  s0 -> s0 [0, 65535] { R179 += 1, R180 += 1 };
  s0 -> s3 [68, 68] { R180 += 1, R140 += 1 };
  s0 -> s4 [68, 68] { R180 += 1, R140 += 1 };
  s0 -> s1 [86, 65535] { R180 += 1, R140 += 1 };
  s1 -> s1 [0, 67] { R180 += 1, R140 += 1 };
  s1 -> s1 [0, 65535] { R180 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [68, 68] { R180 += 1, R140 += 1 };
  s1 -> s4 [68, 68] { R180 += 1, R140 += 1 };
  s1 -> s1 [86, 65535] { R180 += 1, R140 += 1 };
  s2 -> s1 [0, 67] { R180 += 1, R140 += 1 };
  s2 -> s2 [0, 65535] { R180 += 1, R139 += 1, R140 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [68, 68] { R180 += 1, R140 += 1 };
  s2 -> s4 [68, 68] { R180 += 1, R140 += 1 };
  s2 -> s1 [86, 65535] { R180 += 1, R140 += 1 };
  s3 -> s3 [0, 68] { R180 += 1, R140 += 1 };
  s3 -> s3 [0, 65535] { R180 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [86, 65535] { R180 += 1, R140 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R180 += 1 };
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 67] { R182 += 1, R142 += 1, R37 += 1 };
  s0 -> s0 [0, 65535] { R181 += 1, R182 += 1 };
  s0 -> s2 [0, 65535] { R182 += 1, R141 += 1, R142 += 1 };
  s0 -> s3 [68, 68] { R182 += 1, R142 += 1, R37 += 1 };
  s0 -> s4 [68, 68] { R182 += 1, R142 += 1, R37 += 1 };
  s0 -> s1 [69, 65535] { R182 += 1, R142 += 1, R37 += 1 };
  s1 -> s1 [0, 67] { R182 += 1, R142 += 1, R37 += 1 };
  s1 -> s1 [0, 65535] { R182 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [68, 68] { R182 += 1, R142 += 1, R37 += 1 };
  s1 -> s4 [68, 68] { R182 += 1, R142 += 1, R37 += 1 };
  s1 -> s1 [69, 65535] { R182 += 1, R142 += 1, R37 += 1 };
  s2 -> s1 [0, 67] { R182 += 1, R142 += 1, R37 += 1 };
  s2 -> s2 [0, 65535] { R182 += 1, R141 += 1, R142 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [68, 68] { R182 += 1, R142 += 1, R37 += 1 };
  s2 -> s4 [68, 68] { R182 += 1, R142 += 1, R37 += 1 };
  s2 -> s1 [69, 65535] { R182 += 1, R142 += 1, R37 += 1 };
  s3 -> s3 [0, 65535] { R182 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R182 += 1 };
  s4 -> s4 [0, 65535] { R182 += 1, R142 += 1, R37 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R182 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 67] { R184 += 1, R144 += 1, R39 += 1 };
  s0 -> s0 [0, 65535] { R183 += 1, R184 += 1 };
  s0 -> s2 [0, 65535] { R184 += 1, R143 += 1, R144 += 1 };
  s0 -> s3 [68, 68] { R184 += 1, R144 += 1, R39 += 1 };
  s0 -> s4 [68, 68] { R184 += 1, R144 += 1, R39 += 1 };
  s0 -> s1 [69, 65535] { R184 += 1, R144 += 1, R39 += 1 };
  s1 -> s1 [0, 67] { R184 += 1, R144 += 1, R39 += 1 };
  s1 -> s1 [0, 65535] { R184 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [68, 68] { R184 += 1, R144 += 1, R39 += 1 };
  s1 -> s4 [68, 68] { R184 += 1, R144 += 1, R39 += 1 };
  s1 -> s1 [69, 65535] { R184 += 1, R144 += 1, R39 += 1 };
  s2 -> s1 [0, 67] { R184 += 1, R144 += 1, R39 += 1 };
  s2 -> s2 [0, 65535] { R184 += 1, R143 += 1, R144 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [68, 68] { R184 += 1, R144 += 1, R39 += 1 };
  s2 -> s4 [68, 68] { R184 += 1, R144 += 1, R39 += 1 };
  s2 -> s1 [69, 65535] { R184 += 1, R144 += 1, R39 += 1 };
  s3 -> s3 [0, 65535] { R184 += 1, R144 += 1, R39 += 1 };
  s3 -> s6 [0, 65535] { R184 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R184 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R184 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 67] { R186 += 1, R146 += 1, R41 += 1, R42 += 1 };
  s0 -> s0 [0, 65535] { R185 += 1, R186 += 1 };
  s0 -> s2 [0, 65535] { R186 += 1, R145 += 1, R146 += 1 };
  s0 -> s3 [68, 68] { R186 += 1, R146 += 1, R41 += 1, R42 += 1 };
  s0 -> s4 [68, 68] { R186 += 1, R146 += 1, R41 += 1, R42 += 1 };
  s0 -> s1 [69, 65535] { R186 += 1, R146 += 1, R41 += 1, R42 += 1 };
  s1 -> s1 [0, 67] { R186 += 1, R146 += 1, R41 += 1, R42 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R186 += 1 };
  s1 -> s3 [68, 68] { R186 += 1, R146 += 1, R41 += 1, R42 += 1 };
  s1 -> s4 [68, 68] { R186 += 1, R146 += 1, R41 += 1, R42 += 1 };
  s1 -> s1 [69, 65535] { R186 += 1, R146 += 1, R41 += 1, R42 += 1 };
  s2 -> s1 [0, 67] { R186 += 1, R146 += 1, R41 += 1, R42 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R186 += 1, R145 += 1, R146 += 1 };
  s2 -> s3 [68, 68] { R186 += 1, R146 += 1, R41 += 1, R42 += 1 };
  s2 -> s4 [68, 68] { R186 += 1, R146 += 1, R41 += 1, R42 += 1 };
  s2 -> s1 [69, 65535] { R186 += 1, R146 += 1, R41 += 1, R42 += 1 };
  s3 -> s3 [0, 65535] { R186 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R186 += 1, R146 += 1, R41 += 1, R42 += 1 };
  s4 -> s6 [0, 65535] { R186 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R186 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 67] { R188 += 1, R148 += 1, R118 += 1, R119 += 1 };
  s0 -> s2 [0, 67] { R188 += 1, R148 += 1, R117 += 1, R118 += 1 };
  s0 -> s0 [0, 65535] { R187 += 1, R188 += 1 };
  s0 -> s3 [0, 65535] { R188 += 1, R147 += 1, R148 += 1 };
  s0 -> s4 [68, 68] { R188 += 1, R148 += 1, R118 += 1, R119 += 1 };
  s0 -> s5 [68, 68] { R188 += 1, R148 += 1, R117 += 1, R118 += 1 };
  s0 -> s6 [68, 68] { R188 += 1, R148 += 1, R118 += 1, R119 += 1 };
  s0 -> s7 [68, 68] { R188 += 1, R148 += 1, R117 += 1, R118 += 1 };
  s0 -> s1 [69, 65535] { R188 += 1, R148 += 1, R118 += 1, R119 += 1 };
  s0 -> s2 [69, 65535] { R188 += 1, R148 += 1, R117 += 1, R118 += 1 };
  s1 -> s1 [0, 67] { R188 += 1, R148 += 1, R118 += 1, R119 += 1 };
  s1 -> s1 [0, 65535] { R188 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s4 [68, 68] { R188 += 1, R148 += 1, R118 += 1, R119 += 1 };
  s1 -> s6 [68, 68] { R188 += 1, R148 += 1, R118 += 1, R119 += 1 };
  s1 -> s1 [69, 65535] { R188 += 1, R148 += 1, R118 += 1, R119 += 1 };
  s2 -> s1 [0, 67] { R188 += 1, R148 += 1, R118 += 1, R119 += 1 };
  s2 -> s2 [0, 67] { R188 += 1, R148 += 1, R117 += 1, R118 += 1 };
  s2 -> s4 [68, 68] { R188 += 1, R148 += 1, R118 += 1, R119 += 1 };
  s2 -> s5 [68, 68] { R188 += 1, R148 += 1, R117 += 1, R118 += 1 };
  s2 -> s6 [68, 68] { R188 += 1, R148 += 1, R118 += 1, R119 += 1 };
  s2 -> s7 [68, 68] { R188 += 1, R148 += 1, R117 += 1, R118 += 1 };
  s2 -> s1 [69, 65535] { R188 += 1, R148 += 1, R118 += 1, R119 += 1 };
  s2 -> s2 [69, 65535] { R188 += 1, R148 += 1, R117 += 1, R118 += 1 };
  s3 -> s1 [0, 67] { R188 += 1, R148 += 1, R118 += 1, R119 += 1 };
  s3 -> s2 [0, 67] { R188 += 1, R148 += 1, R117 += 1, R118 += 1 };
  s3 -> s3 [0, 65535] { R188 += 1, R147 += 1, R148 += 1 };
  s3 -> s4 [68, 68] { R188 += 1, R148 += 1, R118 += 1, R119 += 1 };
  s3 -> s5 [68, 68] { R188 += 1, R148 += 1, R117 += 1, R118 += 1 };
  s3 -> s6 [68, 68] { R188 += 1, R148 += 1, R118 += 1, R119 += 1 };
  s3 -> s7 [68, 68] { R188 += 1, R148 += 1, R117 += 1, R118 += 1 };
  s3 -> s1 [69, 65535] { R188 += 1, R148 += 1, R118 += 1, R119 += 1 };
  s3 -> s2 [69, 65535] { R188 += 1, R148 += 1, R117 += 1, R118 += 1 };
  s4 -> s4 [0, 65535] { R188 += 1, R148 += 1, R118 += 1, R119 += 1 };
  s4 -> s9 [0, 65535] { R188 += 1 };
  s4 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R188 += 1 };
  s6 -> s8 [0, 65535];
  s7 -> s4 [0, 65535] { R188 += 1, R148 += 1, R118 += 1, R119 += 1 };
  s7 -> s7 [0, 65535] { R188 += 1, R148 += 1, R117 += 1, R118 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R188 += 1 };
  s9 -> s8 [0, 65535];
  accepting s4, s8, s9, s6, s1;
};
};
synchronised {  // Automata constraining P30
automaton P30_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
synchronised {  // Automata constraining P31
automaton P31_0 {
  init s0;
  s0 -> s1 [9, 9];
  accepting s1;
};
};
synchronised {  // Automata constraining P33
automaton P33_0 {
  init s0;
  s0 -> s1 [13, 13];
  accepting s1;
};
};
synchronised {  // Automata constraining P32
automaton P32_0 {
  init s0;
  s0 -> s1 [10, 10];
  accepting s1;
};
};
synchronised {  // Automata constraining P34
automaton P34_0 {
  init s0;
  s0 -> s1 [11, 11];
  accepting s1;
};
};
constraint R1 = R136 && R2 - R188 = 1 && R17 - R136 = -1 && R18 = R136 && R19 - R136 = -1 && R20 = R136 && R21 = 0 && R22 = 1 && R23 = 0 && R24 = 1 && R25 = R188 && R26 - R188 = 1 && R27 = R188 && R28 - R188 = 1 && R29 = 0 && R30 = 1 && R31 = 0 && R32 = 1 && R123 = 0 && R124 = R136 && R125 = 0 && R126 = R136 && R127 = 0 && R128 = R136 && R129 = 0 && R130 = R136 && R131 = 0 && R132 = R136 && R133 = 0 && R134 = R136 && R135 = 0 && R147 = 0 && R148 = 0 && R149 = 0 && R150 = R188 && R151 = 0 && R152 = R188 && R153 = 0 && R154 = R188 && R155 = 0 && R156 = R188 && R157 = 0 && R158 = R188 && R159 = 0 && R160 = R188 && R161 = 0 && R162 = R188 && R163 = 0 && R164 = R188 && R165 = 0 && R166 = R188 && R167 = 0 && R168 = R188 && R169 = 0 && R170 = R188 && R171 = 0 && R172 = R188 && R173 = 0 && R174 = R188 && R175 = 0 && R176 = R188 && R177 = 0 && R178 = R188 && R179 = 0 && R180 = R188 && R181 = 0 && R182 = R188 && R183 = 0 && R184 = R188 && R185 = 0 && R186 = R188 && R187 = 0 && R10 < 1 && R13 < 1 && -1*R38 + -1*R37 < 1 && R40 + R39 < 1 && 0 < R136 && -1 < R188 && (R38 + R37 != 0 || R122 + R119 = 0 || (R43 + R41 = 0 && R44 + R42 = 0)) && (R38 + R37 != 0 || R122 + R119 = 0 || (R120 + R117 = 0 && R121 + R118 = 0)) && (R43 + R41 != 0 || R38 + R37 + -1*R44 + -1*R42 = 0 || R38 + R37 < 1) && (R120 + R117 != 0 || R38 + R37 + -1*R121 + -1*R118 = 0 || R38 + R37 < 1) && (R16 = 0 || (R137 = 0 && R138 = 0)) && (R16 = 0 || (R139 = 0 && R140 = 0)) && (R16 = 0 || (R141 = 0 && R142 = 0)) && (R16 = 0 || (R143 = 0 && R144 = 0)) && (R16 = 0 || (R145 = 0 && R146 = 0)) && (R43 + R41 = 0 || R38 + R37 < 1) && (R120 + R117 = 0 || R38 + R37 < 1);
// End of Parikh automata intersection problem
