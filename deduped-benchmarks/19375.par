// Parikh automata intersection problem, generated by OSTRICH+
counter int R1030, R1031, R1032, R1033, R1034, R1035, R1036, R1037, R1038, R1039, R1040, R1041, R1042, R1043, R1044, R1045, R1046, R1047, R1048, R1049, R1050, R1051, R1052, R1053, R1054, R1055, R1056, R1057, R1058, R1059, R1060, R1061, R1062, R1063, R1064, R1065, R1066, R1067, R1068, R1069, R1070, R1071, R1072, R1073, R1074, R1075, R1076, R1077, R1078, R1079, R1080, R1081, R1082, R1083, R1084, R1085, R1086, R1087, R1088, R1089, R1090, R1091, R1092, R1093, R1094, R1095, R11, R12, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R4, R494, R495, R496, R497, R498, R499, R500, R501, R502, R503, R504, R505, R506, R507, R508, R509, R510, R511, R512, R513, R514, R515, R516, R517, R518, R519, R520, R521, R522, R523, R524, R525, R526, R527, R528, R529, R530, R531, R532, R533, R534, R535, R536, R537, R538, R539, R540, R541, R542, R543, R544, R545, R546, R547, R548, R549, R550, R551, R552, R553, R554, R555, R556, R557, R558, R559;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [84, 84];
  s0 -> s0 [85, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [84, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 83];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [84, 84];
  s0 -> s1 [85, 65535];
  s1 -> s1 [0, 83];
  s1 -> s2 [84, 84];
  s1 -> s1 [85, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s1 [0, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s1 [0, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 83] { R1039 += 1 };
  s0 -> s0 [0, 65535] { R1038 += 1, R1039 += 1 };
  s0 -> s1 [85, 65535] { R1039 += 1 };
  s1 -> s1 [0, 83] { R1039 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [85, 65535] { R1039 += 1 };
  accepting s0, s1;
};
automaton value2_9 {
  init s0;
  s0 -> s0 [0, 65535] { R1040 += 1, R1041 += 1 };
  s0 -> s1 [0, 65535] { R1041 += 1, R18 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R1041 += 1, R18 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_10 {
  init s0;
  s0 -> s0 [0, 65535] { R1042 += 1, R1043 += 1 };
  s0 -> s1 [0, 65535] { R1043 += 1 };
  s1 -> s1 [0, 65535] { R1043 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 65535] { R1045 += 1, R495 += 1 };
  s0 -> s0 [0, 65535] { R1044 += 1, R1045 += 1 };
  s1 -> s1 [0, 65535] { R1045 += 1, R495 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 84] { R1047 += 1 };
  s0 -> s0 [0, 65535] { R1046 += 1, R1047 += 1 };
  s0 -> s2 [0, 65535] { R1047 += 1, R497 += 1 };
  s0 -> s1 [86, 65535] { R1047 += 1 };
  s1 -> s1 [0, 84] { R1047 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [86, 65535] { R1047 += 1 };
  s2 -> s1 [0, 84] { R1047 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1047 += 1, R497 += 1 };
  s2 -> s1 [86, 65535] { R1047 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_13 {
  init s0;
  s0 -> s0 [0, 65535] { R1048 += 1, R1049 += 1 };
  s0 -> s1 [0, 65535] { R1049 += 1, R502 += 1, R503 += 1 };
  s0 -> s2 [0, 65535] { R1049 += 1, R501 += 1, R502 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1049 += 1, R502 += 1, R503 += 1 };
  s1 -> s4 [0, 65535] { R1049 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R1049 += 1, R502 += 1, R503 += 1 };
  s2 -> s2 [0, 65535] { R1049 += 1, R501 += 1, R502 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1049 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 84] { R1051 += 1, R507 += 1 };
  s0 -> s0 [0, 65535] { R1050 += 1, R1051 += 1 };
  s0 -> s2 [0, 65535] { R1051 += 1, R506 += 1, R507 += 1 };
  s0 -> s3 [85, 85] { R1051 += 1, R507 += 1 };
  s0 -> s4 [85, 85] { R1051 += 1, R507 += 1 };
  s0 -> s1 [87, 65535] { R1051 += 1, R507 += 1 };
  s1 -> s1 [0, 84] { R1051 += 1, R507 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1051 += 1 };
  s1 -> s3 [85, 85] { R1051 += 1, R507 += 1 };
  s1 -> s4 [85, 85] { R1051 += 1, R507 += 1 };
  s1 -> s1 [87, 65535] { R1051 += 1, R507 += 1 };
  s2 -> s1 [0, 84] { R1051 += 1, R507 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1051 += 1, R506 += 1, R507 += 1 };
  s2 -> s3 [85, 85] { R1051 += 1, R507 += 1 };
  s2 -> s4 [85, 85] { R1051 += 1, R507 += 1 };
  s2 -> s1 [87, 65535] { R1051 += 1, R507 += 1 };
  s3 -> s3 [0, 85] { R1051 += 1, R507 += 1 };
  s3 -> s3 [0, 65535] { R1051 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [87, 65535] { R1051 += 1, R507 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1051 += 1 };
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 84] { R1053 += 1, R511 += 1 };
  s0 -> s2 [0, 65535] { R1053 += 1, R510 += 1, R511 += 1 };
  s0 -> s0 [0, 65535] { R1052 += 1, R1053 += 1 };
  s0 -> s3 [85, 85] { R1053 += 1, R511 += 1 };
  s0 -> s1 [86, 65535] { R1053 += 1, R511 += 1 };
  s1 -> s1 [0, 84] { R1053 += 1, R511 += 1 };
  s1 -> s3 [85, 85] { R1053 += 1, R511 += 1 };
  s1 -> s1 [86, 65535] { R1053 += 1, R511 += 1 };
  s2 -> s1 [0, 84] { R1053 += 1, R511 += 1 };
  s2 -> s2 [0, 65535] { R1053 += 1, R510 += 1, R511 += 1 };
  s2 -> s3 [85, 85] { R1053 += 1, R511 += 1 };
  s2 -> s1 [86, 65535] { R1053 += 1, R511 += 1 };
  s3 -> s3 [0, 65535] { R1053 += 1, R511 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R1053 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1053 += 1 };
  accepting s3, s4, s5;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 65535] { R1055 += 1, R515 += 1, R516 += 1 };
  s0 -> s2 [0, 65535] { R1055 += 1, R516 += 1, R517 += 1 };
  s0 -> s0 [0, 65535] { R1054 += 1, R1055 += 1 };
  s1 -> s1 [0, 65535] { R1055 += 1, R515 += 1, R516 += 1 };
  s1 -> s2 [0, 65535] { R1055 += 1, R516 += 1, R517 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1055 += 1, R516 += 1, R517 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R1055 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1055 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 84] { R1057 += 1, R522 += 1 };
  s0 -> s2 [0, 65535] { R1057 += 1, R521 += 1, R522 += 1 };
  s0 -> s0 [0, 65535] { R1056 += 1, R1057 += 1 };
  s0 -> s3 [0, 65535] { R1057 += 1, R522 += 1, R523 += 1 };
  s0 -> s1 [86, 65535] { R1057 += 1, R522 += 1 };
  s1 -> s1 [0, 84] { R1057 += 1, R522 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R1057 += 1 };
  s1 -> s1 [86, 65535] { R1057 += 1, R522 += 1 };
  s2 -> s1 [0, 84] { R1057 += 1, R522 += 1 };
  s2 -> s2 [0, 65535] { R1057 += 1, R521 += 1, R522 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R1057 += 1, R522 += 1, R523 += 1 };
  s2 -> s1 [86, 65535] { R1057 += 1, R522 += 1 };
  s3 -> s1 [0, 84] { R1057 += 1, R522 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R1057 += 1 };
  s3 -> s3 [0, 65535] { R1057 += 1, R522 += 1, R523 += 1 };
  s3 -> s1 [86, 65535] { R1057 += 1, R522 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1057 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 84] { R1059 += 1, R529 += 1, R531 += 1 };
  s0 -> s2 [0, 65535] { R1059 += 1, R528 += 1, R529 += 1 };
  s0 -> s0 [0, 65535] { R1058 += 1, R1059 += 1 };
  s0 -> s3 [0, 65535] { R1059 += 1, R529 += 1, R530 += 1, R531 += 1 };
  s0 -> s1 [86, 65535] { R1059 += 1, R529 += 1, R531 += 1 };
  s1 -> s1 [0, 84] { R1059 += 1, R529 += 1, R531 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R1059 += 1, R529 += 1 };
  s1 -> s5 [0, 65535] { R1059 += 1 };
  s1 -> s1 [86, 65535] { R1059 += 1, R529 += 1, R531 += 1 };
  s2 -> s1 [0, 84] { R1059 += 1, R529 += 1, R531 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1059 += 1, R528 += 1, R529 += 1 };
  s2 -> s3 [0, 65535] { R1059 += 1, R529 += 1, R530 += 1, R531 += 1 };
  s2 -> s1 [86, 65535] { R1059 += 1, R529 += 1, R531 += 1 };
  s3 -> s1 [0, 84] { R1059 += 1, R529 += 1, R531 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R1059 += 1 };
  s3 -> s3 [0, 65535] { R1059 += 1, R529 += 1, R530 += 1, R531 += 1 };
  s3 -> s1 [86, 65535] { R1059 += 1, R529 += 1, R531 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1059 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_19 {
  init s0;
  s0 -> s0 [0, 65535] { R1060 += 1, R1061 += 1 };
  s0 -> s1 [0, 65535] { R1061 += 1, R538 += 1, R540 += 1, R541 += 1 };
  s0 -> s2 [0, 65535] { R1061 += 1, R537 += 1, R538 += 1 };
  s0 -> s3 [0, 65535] { R1061 += 1, R538 += 1, R539 += 1, R540 += 1 };
  s1 -> s1 [0, 65535] { R1061 += 1, R538 += 1, R540 += 1, R541 += 1 };
  s1 -> s4 [0, 65535] { R1061 += 1 };
  s1 -> s6 [0, 65535] { R1061 += 1, R538 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R1061 += 1, R538 += 1, R540 += 1, R541 += 1 };
  s2 -> s2 [0, 65535] { R1061 += 1, R537 += 1, R538 += 1 };
  s2 -> s3 [0, 65535] { R1061 += 1, R538 += 1, R539 += 1, R540 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s1 [0, 65535] { R1061 += 1, R538 += 1, R540 += 1, R541 += 1 };
  s3 -> s4 [0, 65535] { R1061 += 1 };
  s3 -> s3 [0, 65535] { R1061 += 1, R538 += 1, R539 += 1, R540 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1061 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R1061 += 1 };
  s6 -> s6 [0, 65535] { R1061 += 1, R538 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 65535] { R1063 += 1, R547 += 1, R548 += 1, R549 += 1 };
  s0 -> s2 [0, 65535] { R1063 += 1, R546 += 1, R547 += 1 };
  s0 -> s0 [0, 65535] { R1062 += 1, R1063 += 1 };
  s0 -> s3 [0, 65535] { R1063 += 1, R547 += 1, R549 += 1 };
  s1 -> s1 [0, 65535] { R1063 += 1, R547 += 1, R548 += 1, R549 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R1063 += 1, R547 += 1, R549 += 1 };
  s1 -> s6 [0, 65535] { R1063 += 1 };
  s2 -> s1 [0, 65535] { R1063 += 1, R547 += 1, R548 += 1, R549 += 1 };
  s2 -> s2 [0, 65535] { R1063 += 1, R546 += 1, R547 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R1063 += 1, R547 += 1, R549 += 1 };
  s3 -> s4 [0, 65535] { R1063 += 1, R547 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R1063 += 1, R547 += 1, R549 += 1 };
  s3 -> s6 [0, 65535] { R1063 += 1 };
  s4 -> s4 [0, 65535] { R1063 += 1, R547 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R1063 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1063 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R1065 += 1, R556 += 1, R557 += 1, R558 += 1 };
  s0 -> s2 [0, 65535] { R1065 += 1, R555 += 1, R556 += 1 };
  s0 -> s0 [0, 65535] { R1064 += 1, R1065 += 1 };
  s0 -> s3 [0, 65535] { R1065 += 1, R556 += 1, R558 += 1, R559 += 1 };
  s1 -> s1 [0, 65535] { R1065 += 1, R556 += 1, R557 += 1, R558 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R1065 += 1 };
  s1 -> s3 [0, 65535] { R1065 += 1, R556 += 1, R558 += 1, R559 += 1 };
  s2 -> s1 [0, 65535] { R1065 += 1, R556 += 1, R557 += 1, R558 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1065 += 1, R555 += 1, R556 += 1 };
  s2 -> s3 [0, 65535] { R1065 += 1, R556 += 1, R558 += 1, R559 += 1 };
  s3 -> s4 [0, 65535] { R1065 += 1, R556 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R1065 += 1 };
  s3 -> s3 [0, 65535] { R1065 += 1, R556 += 1, R558 += 1, R559 += 1 };
  s4 -> s4 [0, 65535] { R1065 += 1, R556 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R1065 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1065 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 65535] { R1067 += 1, R1035 += 1 };
  s0 -> s2 [0, 65535] { R1067 += 1, R1035 += 1, R1037 += 1 };
  s0 -> s0 [0, 65535] { R1066 += 1, R1067 += 1 };
  s0 -> s3 [0, 65535] { R1067 += 1 };
  s1 -> s1 [0, 65535] { R1067 += 1, R1035 += 1 };
  s1 -> s3 [0, 65535] { R1067 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R1067 += 1, R1035 += 1 };
  s2 -> s2 [0, 65535] { R1067 += 1, R1035 += 1, R1037 += 1 };
  s2 -> s3 [0, 65535] { R1067 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1067 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_23 {
  init s0;
  s0 -> s0 [0, 65535] { R1068 += 1, R1069 += 1 };
  s0 -> s1 [0, 65535] { R1069 += 1, R19 += 1 };
  s1 -> s1 [0, 65535] { R1069 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 83] { R1071 += 1 };
  s0 -> s0 [0, 65535] { R1070 += 1, R1071 += 1 };
  s0 -> s2 [84, 84] { R1071 += 1 };
  s0 -> s3 [84, 84] { R1071 += 1 };
  s0 -> s4 [85, 85] { R1071 += 1 };
  s0 -> s1 [86, 65535] { R1071 += 1 };
  s1 -> s1 [0, 83] { R1071 += 1 };
  s1 -> s2 [84, 84] { R1071 += 1 };
  s1 -> s3 [84, 84] { R1071 += 1 };
  s1 -> s4 [85, 85] { R1071 += 1 };
  s1 -> s1 [86, 65535] { R1071 += 1 };
  s2 -> s2 [0, 84] { R1071 += 1 };
  s2 -> s6 [85, 85] { R1071 += 1 };
  s2 -> s2 [86, 65535] { R1071 += 1 };
  s4 -> s4 [0, 83] { R1071 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s5 [84, 84] { R1071 += 1 };
  s4 -> s6 [84, 84] { R1071 += 1 };
  s4 -> s4 [85, 65535] { R1071 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s7 [0, 65535];
  s6 -> s6 [0, 65535] { R1071 += 1 };
  s7 -> s7 [0, 65535];
  accepting s4, s5, s6, s7;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 83] { R1073 += 1, R494 += 1 };
  s0 -> s0 [0, 65535] { R1072 += 1, R1073 += 1 };
  s0 -> s2 [84, 84] { R1073 += 1, R494 += 1 };
  s0 -> s3 [84, 84] { R1073 += 1, R494 += 1 };
  s0 -> s1 [85, 65535] { R1073 += 1, R494 += 1 };
  s1 -> s1 [0, 83] { R1073 += 1, R494 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R1073 += 1, R494 += 1 };
  s1 -> s3 [84, 84] { R1073 += 1, R494 += 1 };
  s1 -> s1 [85, 65535] { R1073 += 1, R494 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1073 += 1, R494 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 83] { R1075 += 1, R496 += 1 };
  s0 -> s0 [0, 65535] { R1074 += 1, R1075 += 1 };
  s0 -> s2 [84, 84] { R1075 += 1, R496 += 1 };
  s0 -> s3 [84, 84] { R1075 += 1, R496 += 1 };
  s0 -> s1 [85, 65535] { R1075 += 1, R496 += 1 };
  s1 -> s1 [0, 83] { R1075 += 1, R496 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R1075 += 1, R496 += 1 };
  s1 -> s3 [84, 84] { R1075 += 1, R496 += 1 };
  s1 -> s1 [85, 65535] { R1075 += 1, R496 += 1 };
  s2 -> s2 [0, 65535] { R1075 += 1, R496 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 83] { R1077 += 1, R498 += 1, R499 += 1 };
  s0 -> s0 [0, 65535] { R1076 += 1, R1077 += 1 };
  s0 -> s2 [84, 84] { R1077 += 1, R498 += 1, R499 += 1 };
  s0 -> s3 [84, 84] { R1077 += 1, R498 += 1, R499 += 1 };
  s0 -> s1 [85, 65535] { R1077 += 1, R498 += 1, R499 += 1 };
  s1 -> s1 [0, 83] { R1077 += 1, R498 += 1, R499 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R1077 += 1, R498 += 1, R499 += 1 };
  s1 -> s3 [84, 84] { R1077 += 1, R498 += 1, R499 += 1 };
  s1 -> s1 [85, 65535] { R1077 += 1, R498 += 1, R499 += 1 };
  s2 -> s2 [0, 65535] { R1077 += 1, R498 += 1, R499 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 83] { R1079 += 1, R504 += 1, R505 += 1 };
  s0 -> s0 [0, 65535] { R1078 += 1, R1079 += 1 };
  s0 -> s2 [84, 84] { R1079 += 1, R504 += 1, R505 += 1 };
  s0 -> s3 [84, 84] { R1079 += 1, R504 += 1, R505 += 1 };
  s0 -> s1 [85, 65535] { R1079 += 1, R504 += 1, R505 += 1 };
  s1 -> s1 [0, 83] { R1079 += 1, R504 += 1, R505 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R1079 += 1, R504 += 1, R505 += 1 };
  s1 -> s3 [84, 84] { R1079 += 1, R504 += 1, R505 += 1 };
  s1 -> s1 [85, 65535] { R1079 += 1, R504 += 1, R505 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1079 += 1, R504 += 1, R505 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 83] { R1081 += 1, R508 += 1, R509 += 1 };
  s0 -> s0 [0, 65535] { R1080 += 1, R1081 += 1 };
  s0 -> s2 [84, 84] { R1081 += 1, R508 += 1, R509 += 1 };
  s0 -> s3 [84, 84] { R1081 += 1, R508 += 1, R509 += 1 };
  s0 -> s1 [85, 65535] { R1081 += 1, R508 += 1, R509 += 1 };
  s1 -> s1 [0, 83] { R1081 += 1, R508 += 1, R509 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R1081 += 1, R508 += 1, R509 += 1 };
  s1 -> s3 [84, 84] { R1081 += 1, R508 += 1, R509 += 1 };
  s1 -> s1 [85, 65535] { R1081 += 1, R508 += 1, R509 += 1 };
  s2 -> s2 [0, 65535] { R1081 += 1, R508 += 1, R509 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 83] { R1083 += 1, R512 += 1, R513 += 1 };
  s0 -> s0 [0, 65535] { R1082 += 1, R1083 += 1 };
  s0 -> s2 [84, 84] { R1083 += 1, R512 += 1, R513 += 1 };
  s0 -> s3 [84, 84] { R1083 += 1, R512 += 1, R513 += 1 };
  s0 -> s1 [85, 65535] { R1083 += 1, R512 += 1, R513 += 1 };
  s1 -> s1 [0, 83] { R1083 += 1, R512 += 1, R513 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R1083 += 1, R512 += 1, R513 += 1 };
  s1 -> s3 [84, 84] { R1083 += 1, R512 += 1, R513 += 1 };
  s1 -> s1 [85, 65535] { R1083 += 1, R512 += 1, R513 += 1 };
  s2 -> s2 [0, 65535] { R1083 += 1, R512 += 1, R513 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 83] { R1085 += 1, R518 += 1, R519 += 1 };
  s0 -> s0 [0, 65535] { R1084 += 1, R1085 += 1 };
  s0 -> s2 [84, 84] { R1085 += 1, R518 += 1, R519 += 1 };
  s0 -> s3 [84, 84] { R1085 += 1, R518 += 1, R519 += 1 };
  s0 -> s1 [85, 65535] { R1085 += 1, R518 += 1, R519 += 1 };
  s1 -> s1 [0, 83] { R1085 += 1, R518 += 1, R519 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R1085 += 1, R518 += 1, R519 += 1 };
  s1 -> s3 [84, 84] { R1085 += 1, R518 += 1, R519 += 1 };
  s1 -> s1 [85, 65535] { R1085 += 1, R518 += 1, R519 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1085 += 1, R518 += 1, R519 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 83] { R1087 += 1, R524 += 1, R525 += 1 };
  s0 -> s0 [0, 65535] { R1086 += 1, R1087 += 1 };
  s0 -> s2 [84, 84] { R1087 += 1, R524 += 1, R525 += 1 };
  s0 -> s3 [84, 84] { R1087 += 1, R524 += 1, R525 += 1 };
  s0 -> s1 [85, 65535] { R1087 += 1, R524 += 1, R525 += 1 };
  s1 -> s1 [0, 83] { R1087 += 1, R524 += 1, R525 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R1087 += 1, R524 += 1, R525 += 1 };
  s1 -> s3 [84, 84] { R1087 += 1, R524 += 1, R525 += 1 };
  s1 -> s1 [85, 65535] { R1087 += 1, R524 += 1, R525 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1087 += 1, R524 += 1, R525 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 83] { R1089 += 1, R532 += 1, R533 += 1 };
  s0 -> s0 [0, 65535] { R1088 += 1, R1089 += 1 };
  s0 -> s2 [84, 84] { R1089 += 1, R532 += 1, R533 += 1 };
  s0 -> s3 [84, 84] { R1089 += 1, R532 += 1, R533 += 1 };
  s0 -> s1 [85, 65535] { R1089 += 1, R532 += 1, R533 += 1 };
  s1 -> s1 [0, 83] { R1089 += 1, R532 += 1, R533 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R1089 += 1, R532 += 1, R533 += 1 };
  s1 -> s3 [84, 84] { R1089 += 1, R532 += 1, R533 += 1 };
  s1 -> s1 [85, 65535] { R1089 += 1, R532 += 1, R533 += 1 };
  s2 -> s2 [0, 65535] { R1089 += 1, R532 += 1, R533 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 83] { R1091 += 1, R542 += 1, R543 += 1 };
  s0 -> s0 [0, 65535] { R1090 += 1, R1091 += 1 };
  s0 -> s2 [84, 84] { R1091 += 1, R542 += 1, R543 += 1 };
  s0 -> s3 [84, 84] { R1091 += 1, R542 += 1, R543 += 1 };
  s0 -> s1 [85, 65535] { R1091 += 1, R542 += 1, R543 += 1 };
  s1 -> s1 [0, 83] { R1091 += 1, R542 += 1, R543 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R1091 += 1, R542 += 1, R543 += 1 };
  s1 -> s3 [84, 84] { R1091 += 1, R542 += 1, R543 += 1 };
  s1 -> s1 [85, 65535] { R1091 += 1, R542 += 1, R543 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R1091 += 1, R542 += 1, R543 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 83] { R1093 += 1, R550 += 1, R551 += 1 };
  s0 -> s0 [0, 65535] { R1092 += 1, R1093 += 1 };
  s0 -> s2 [84, 84] { R1093 += 1, R550 += 1, R551 += 1 };
  s0 -> s3 [84, 84] { R1093 += 1, R550 += 1, R551 += 1 };
  s0 -> s1 [85, 65535] { R1093 += 1, R550 += 1, R551 += 1 };
  s1 -> s1 [0, 83] { R1093 += 1, R550 += 1, R551 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R1093 += 1, R550 += 1, R551 += 1 };
  s1 -> s3 [84, 84] { R1093 += 1, R550 += 1, R551 += 1 };
  s1 -> s1 [85, 65535] { R1093 += 1, R550 += 1, R551 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R1093 += 1, R550 += 1, R551 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 83] { R1095 += 1, R1031 += 1, R1033 += 1 };
  s0 -> s2 [0, 83] { R1095 += 1, R1030 += 1, R1031 += 1 };
  s0 -> s3 [0, 83] { R1095 += 1, R1031 += 1, R1032 += 1, R1033 += 1 };
  s0 -> s0 [0, 65535] { R1094 += 1, R1095 += 1 };
  s0 -> s4 [84, 84] { R1095 += 1, R1031 += 1, R1032 += 1, R1033 += 1 };
  s0 -> s5 [84, 84] { R1095 += 1, R1030 += 1, R1031 += 1 };
  s0 -> s6 [84, 84] { R1095 += 1, R1030 += 1, R1031 += 1 };
  s0 -> s7 [84, 84] { R1095 += 1, R1031 += 1, R1032 += 1, R1033 += 1 };
  s0 -> s8 [84, 84] { R1095 += 1, R1031 += 1, R1033 += 1 };
  s0 -> s9 [84, 84] { R1095 += 1, R1031 += 1, R1033 += 1 };
  s0 -> s10 [85, 85] { R1095 += 1, R1031 += 1, R1033 += 1 };
  s0 -> s2 [85, 65535] { R1095 += 1, R1030 += 1, R1031 += 1 };
  s0 -> s3 [85, 65535] { R1095 += 1, R1031 += 1, R1032 += 1, R1033 += 1 };
  s0 -> s11 [86, 86] { R1095 += 1, R1031 += 1, R1033 += 1 };
  s0 -> s1 [87, 65535] { R1095 += 1, R1031 += 1, R1033 += 1 };
  s1 -> s1 [0, 83] { R1095 += 1, R1031 += 1, R1033 += 1 };
  s1 -> s8 [84, 84] { R1095 += 1, R1031 += 1, R1033 += 1 };
  s1 -> s9 [84, 84] { R1095 += 1, R1031 += 1, R1033 += 1 };
  s1 -> s10 [85, 85] { R1095 += 1, R1031 += 1, R1033 += 1 };
  s1 -> s11 [86, 86] { R1095 += 1, R1031 += 1, R1033 += 1 };
  s1 -> s1 [87, 65535] { R1095 += 1, R1031 += 1, R1033 += 1 };
  s2 -> s1 [0, 83] { R1095 += 1, R1031 += 1, R1033 += 1 };
  s2 -> s2 [0, 83] { R1095 += 1, R1030 += 1, R1031 += 1 };
  s2 -> s3 [0, 83] { R1095 += 1, R1031 += 1, R1032 += 1, R1033 += 1 };
  s2 -> s4 [84, 84] { R1095 += 1, R1031 += 1, R1032 += 1, R1033 += 1 };
  s2 -> s5 [84, 84] { R1095 += 1, R1030 += 1, R1031 += 1 };
  s2 -> s6 [84, 84] { R1095 += 1, R1030 += 1, R1031 += 1 };
  s2 -> s7 [84, 84] { R1095 += 1, R1031 += 1, R1032 += 1, R1033 += 1 };
  s2 -> s8 [84, 84] { R1095 += 1, R1031 += 1, R1033 += 1 };
  s2 -> s9 [84, 84] { R1095 += 1, R1031 += 1, R1033 += 1 };
  s2 -> s10 [85, 85] { R1095 += 1, R1031 += 1, R1033 += 1 };
  s2 -> s2 [85, 65535] { R1095 += 1, R1030 += 1, R1031 += 1 };
  s2 -> s3 [85, 65535] { R1095 += 1, R1031 += 1, R1032 += 1, R1033 += 1 };
  s2 -> s11 [86, 86] { R1095 += 1, R1031 += 1, R1033 += 1 };
  s2 -> s1 [87, 65535] { R1095 += 1, R1031 += 1, R1033 += 1 };
  s3 -> s1 [0, 83] { R1095 += 1, R1031 += 1, R1033 += 1 };
  s3 -> s3 [0, 83] { R1095 += 1, R1031 += 1, R1032 += 1, R1033 += 1 };
  s3 -> s4 [84, 84] { R1095 += 1, R1031 += 1, R1032 += 1, R1033 += 1 };
  s3 -> s7 [84, 84] { R1095 += 1, R1031 += 1, R1032 += 1, R1033 += 1 };
  s3 -> s8 [84, 84] { R1095 += 1, R1031 += 1, R1033 += 1 };
  s3 -> s9 [84, 84] { R1095 += 1, R1031 += 1, R1033 += 1 };
  s3 -> s10 [85, 85] { R1095 += 1, R1031 += 1, R1033 += 1 };
  s3 -> s3 [85, 65535] { R1095 += 1, R1031 += 1, R1032 += 1, R1033 += 1 };
  s3 -> s11 [86, 86] { R1095 += 1, R1031 += 1, R1033 += 1 };
  s3 -> s1 [87, 65535] { R1095 += 1, R1031 += 1, R1033 += 1 };
  s4 -> s9 [0, 84] { R1095 += 1, R1031 += 1, R1033 += 1 };
  s4 -> s4 [0, 65535] { R1095 += 1, R1031 += 1, R1032 += 1, R1033 += 1 };
  s4 -> s18 [85, 85] { R1095 += 1, R1031 += 1, R1033 += 1 };
  s4 -> s12 [86, 86] { R1095 += 1, R1031 += 1, R1033 += 1 };
  s4 -> s9 [87, 65535] { R1095 += 1, R1031 += 1, R1033 += 1 };
  s5 -> s9 [0, 84] { R1095 += 1, R1031 += 1, R1033 += 1 };
  s5 -> s4 [0, 65535] { R1095 += 1, R1031 += 1, R1032 += 1, R1033 += 1 };
  s5 -> s5 [0, 65535] { R1095 += 1, R1030 += 1, R1031 += 1 };
  s5 -> s18 [85, 85] { R1095 += 1, R1031 += 1, R1033 += 1 };
  s5 -> s12 [86, 86] { R1095 += 1, R1031 += 1, R1033 += 1 };
  s5 -> s9 [87, 65535] { R1095 += 1, R1031 += 1, R1033 += 1 };
  s9 -> s9 [0, 84] { R1095 += 1, R1031 += 1, R1033 += 1 };
  s9 -> s18 [85, 85] { R1095 += 1, R1031 += 1, R1033 += 1 };
  s9 -> s12 [86, 86] { R1095 += 1, R1031 += 1, R1033 += 1 };
  s9 -> s9 [87, 65535] { R1095 += 1, R1031 += 1, R1033 += 1 };
  s10 -> s10 [0, 83] { R1095 += 1, R1031 += 1, R1033 += 1 };
  s10 -> s18 [84, 84] { R1095 += 1, R1031 += 1, R1033 += 1 };
  s10 -> s19 [84, 84] { R1095 += 1, R1031 += 1, R1033 += 1 };
  s10 -> s10 [85, 85] { R1095 += 1, R1031 += 1, R1033 += 1 };
  s10 -> s14 [86, 86] { R1095 += 1, R1031 += 1, R1033 += 1 };
  s10 -> s10 [87, 65535] { R1095 += 1, R1031 += 1, R1033 += 1 };
  s11 -> s11 [0, 83] { R1095 += 1, R1031 += 1, R1033 += 1 };
  s11 -> s12 [84, 84] { R1095 += 1, R1031 += 1 };
  s11 -> s13 [84, 84] { R1095 += 1, R1031 += 1 };
  s11 -> s14 [85, 85] { R1095 += 1, R1031 += 1, R1033 += 1 };
  s11 -> s11 [85, 65535] { R1095 += 1, R1031 += 1 };
  s11 -> s11 [86, 65535] { R1095 += 1, R1031 += 1, R1033 += 1 };
  s12 -> s12 [0, 84] { R1095 += 1, R1031 += 1, R1033 += 1 };
  s12 -> s12 [0, 65535] { R1095 += 1, R1031 += 1 };
  s12 -> s16 [85, 85] { R1095 += 1, R1031 += 1, R1033 += 1 };
  s12 -> s12 [86, 65535] { R1095 += 1, R1031 += 1, R1033 += 1 };
  s14 -> s14 [0, 83] { R1095 += 1, R1031 += 1, R1033 += 1 };
  s14 -> s14 [0, 65535];
  s14 -> s15 [84, 84] { R1095 += 1, R1031 += 1, R1033 += 1 };
  s14 -> s16 [84, 84] { R1095 += 1, R1031 += 1, R1033 += 1 };
  s14 -> s14 [85, 65535] { R1095 += 1, R1031 += 1, R1033 += 1 };
  s15 -> s15 [0, 65535];
  s16 -> s17 [0, 65535];
  s16 -> s16 [0, 65535] { R1095 += 1, R1031 += 1, R1033 += 1 };
  s17 -> s17 [0, 65535];
  s18 -> s18 [0, 85] { R1095 += 1, R1031 += 1, R1033 += 1 };
  s18 -> s16 [86, 86] { R1095 += 1, R1031 += 1, R1033 += 1 };
  s18 -> s18 [87, 65535] { R1095 += 1, R1031 += 1, R1033 += 1 };
  accepting s14, s15, s16, s17;
};
};
synchronised {  // Automata constraining P4
automaton P4_0 {
  init s0;
  s0 -> s1 [116, 116];
  accepting s1;
};
};
synchronised {  // Automata constraining P59
automaton P59_0 {
  init s0;
  s0 -> s1 [117, 117];
  accepting s1;
};
};
constraint R2 = R1067 && R20 - R1067 = -1 && R21 = R1067 && R22 - R1067 = -1 && R23 = R1067 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R495 + R494 + -1*R1035 + -1*R1031 = 0 && R510 + R508 = 0 && R511 + R509 + -1*R1035 + -1*R1031 = 0 && R1034 + R1030 = 0 && R1036 + R1032 = 0 && R1037 + R1033 = 0 && R1038 = 0 && R1039 = R1067 && R1040 = 0 && R1041 = R1067 && R1042 = 0 && R1043 = R1067 && R1044 = 0 && R1045 = R1067 && R1046 = 0 && R1047 = R1067 && R1048 = 0 && R1049 = R1067 && R1050 = 0 && R1051 = R1067 && R1052 = 0 && R1053 = R1067 && R1054 = 0 && R1055 = R1067 && R1056 = 0 && R1057 = R1067 && R1058 = 0 && R1059 = R1067 && R1060 = 0 && R1061 = R1067 && R1062 = 0 && R1063 = R1067 && R1064 = 0 && R1065 = R1067 && R1066 = 0 && R1070 = 0 && R1071 = 0 && R1094 = 0 && R1095 = 0 && R11 < 1 && R12 < 1 && R497 + R496 < 1 && -1*R517 + -1*R514 < 1 && R523 + R520 < 1 && -1*R1035 + -1*R1031 < 1 && 0 < R1067 && (R515 + R512 != 0 || R516 + R513 + -1*R1035 + -1*R1031 = 0 || R517 + R514 < 1) && (R517 + R514 != 0 || R541 + R536 = 0 || (R530 + R526 = 0 && R531 + R527 = 0)) && (R517 + R514 != 0 || R541 + R536 = 0 || (R539 + R534 = 0 && R540 + R535 = 0)) && (R517 + R514 != 0 || R541 + R536 = 0 || (R548 + R544 = 0 && R549 + R545 = 0)) && (R517 + R514 != 0 || ((R515 + R512 != 0 || R516 + R513 + -1*R1035 + -1*R1031 = 0 || R1035 + R1031 < 1) && (R515 + R512 = 0 || R1035 + R1031 < 1))) && (R521 + R518 != 0 || R522 + R519 + -1*R1035 + -1*R1031 = 0 || (R517 + R514 = 0 && R1035 + R1031 = 0)) && (R528 + R524 != 0 || R529 + R525 + -1*R1035 + -1*R1031 = 0 || (R517 + R514 = 0 && R1035 + R1031 = 0)) && (R530 + R526 != 0 || R517 + R514 + -1*R531 + -1*R527 = 0 || R517 + R514 < 1) && (R537 + R532 != 0 || R538 + R533 + -1*R1035 + -1*R1031 = 0 || (R517 + R514 = 0 && R1035 + R1031 = 0)) && (R539 + R534 != 0 || R517 + R514 + -1*R540 + -1*R535 = 0 || R517 + R514 < 1) && (R546 + R542 != 0 || R547 + R543 + -1*R1035 + -1*R1031 = 0 || (R517 + R514 = 0 && R1035 + R1031 = 0)) && (R548 + R544 != 0 || R517 + R514 + -1*R549 + -1*R545 = 0 || R517 + R514 < 1) && (R555 + R550 != 0 || R556 + R551 + -1*R1035 + -1*R1031 = 0 || (R517 + R514 = 0 && R1035 + R1031 = 0)) && (R19 = 0 || (R1068 = 0 && R1069 = 0)) && (R19 = 0 || (R1072 = 0 && R1073 = 0)) && (R19 = 0 || (R1074 = 0 && R1075 = 0)) && (R19 = 0 || (R1076 = 0 && R1077 = 0)) && (R19 = 0 || (R1078 = 0 && R1079 = 0)) && (R19 = 0 || (R1080 = 0 && R1081 = 0)) && (R19 = 0 || (R1082 = 0 && R1083 = 0)) && (R19 = 0 || (R1084 = 0 && R1085 = 0)) && (R19 = 0 || (R1086 = 0 && R1087 = 0)) && (R19 = 0 || (R1088 = 0 && R1089 = 0)) && (R19 = 0 || (R1090 = 0 && R1091 = 0)) && (R19 = 0 || (R1092 = 0 && R1093 = 0)) && (R503 + R500 = 0 || (R501 + R498 = 0 && R502 + R499 = 0)) && (R503 + R500 = 0 || (R506 + R504 = 0 && R507 + R505 = 0)) && (R515 + R512 = 0 || R517 + R514 < 1) && (R521 + R518 = 0 || (R517 + R514 = 0 && R1035 + R1031 = 0)) && (R528 + R524 = 0 || (R517 + R514 = 0 && R1035 + R1031 = 0)) && (R530 + R526 = 0 || R517 + R514 < 1) && (R537 + R532 = 0 || (R517 + R514 = 0 && R1035 + R1031 = 0)) && (R539 + R534 = 0 || R517 + R514 < 1) && (R546 + R542 = 0 || (R517 + R514 = 0 && R1035 + R1031 = 0)) && (R548 + R544 = 0 || R517 + R514 < 1) && (R555 + R550 = 0 || (R517 + R514 = 0 && R1035 + R1031 = 0)) && (R559 + R554 = 0 || (R557 + R552 = 0 && R558 + R553 = 0));
// End of Parikh automata intersection problem
