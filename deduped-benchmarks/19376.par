// Parikh automata intersection problem, generated by OSTRICH+
counter int R1096, R1097, R1098, R1099, R11, R1100, R1101, R1102, R1103, R1104, R1105, R1106, R1107, R1108, R1109, R1110, R1111, R1112, R1113, R1114, R1115, R1116, R1117, R1118, R1119, R1120, R1121, R1122, R1123, R1124, R1125, R1126, R1127, R1128, R1129, R1130, R1131, R1132, R1133, R1134, R1135, R1136, R1137, R1138, R1139, R1140, R1141, R1142, R1143, R1144, R1145, R1146, R1147, R1148, R1149, R1150, R1151, R1152, R1153, R1154, R1155, R1156, R1157, R1158, R1159, R1160, R1161, R12, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R4, R494, R495, R496, R497, R498, R499, R500, R501, R502, R503, R504, R505, R506, R507, R508, R509, R510, R511, R512, R513, R514, R515, R516, R517, R518, R519, R520, R521, R522, R523, R524, R525, R526, R527, R528, R529, R530, R531, R532, R533, R534, R535, R536, R537, R538, R539, R540, R541, R542, R543, R544, R545, R546, R547, R548, R549, R550, R551, R552, R553, R554, R555, R556, R557, R558, R559;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [84, 84];
  s0 -> s0 [85, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [84, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 83];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [84, 84];
  s0 -> s1 [85, 65535];
  s1 -> s1 [0, 83];
  s1 -> s2 [84, 84];
  s1 -> s1 [85, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s1 [0, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s1 [0, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 83] { R1105 += 1 };
  s0 -> s0 [0, 65535] { R1104 += 1, R1105 += 1 };
  s0 -> s1 [85, 65535] { R1105 += 1 };
  s1 -> s1 [0, 83] { R1105 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [85, 65535] { R1105 += 1 };
  accepting s0, s1;
};
automaton value2_9 {
  init s0;
  s0 -> s0 [0, 65535] { R1106 += 1, R1107 += 1 };
  s0 -> s1 [0, 65535] { R1107 += 1, R18 += 1 };
  s1 -> s1 [0, 65535] { R1107 += 1, R18 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_10 {
  init s0;
  s0 -> s0 [0, 65535] { R1108 += 1, R1109 += 1 };
  s0 -> s1 [0, 65535] { R1109 += 1 };
  s1 -> s1 [0, 65535] { R1109 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 65535] { R1111 += 1, R495 += 1 };
  s0 -> s0 [0, 65535] { R1110 += 1, R1111 += 1 };
  s1 -> s1 [0, 65535] { R1111 += 1, R495 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 84] { R1113 += 1 };
  s0 -> s0 [0, 65535] { R1112 += 1, R1113 += 1 };
  s0 -> s2 [0, 65535] { R1113 += 1, R497 += 1 };
  s0 -> s1 [86, 65535] { R1113 += 1 };
  s1 -> s1 [0, 84] { R1113 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [86, 65535] { R1113 += 1 };
  s2 -> s1 [0, 84] { R1113 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1113 += 1, R497 += 1 };
  s2 -> s1 [86, 65535] { R1113 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 65535] { R1115 += 1, R501 += 1, R502 += 1 };
  s0 -> s2 [0, 65535] { R1115 += 1, R502 += 1, R503 += 1 };
  s0 -> s0 [0, 65535] { R1114 += 1, R1115 += 1 };
  s1 -> s1 [0, 65535] { R1115 += 1, R501 += 1, R502 += 1 };
  s1 -> s2 [0, 65535] { R1115 += 1, R502 += 1, R503 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1115 += 1, R502 += 1, R503 += 1 };
  s2 -> s3 [0, 65535] { R1115 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1115 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 84] { R1117 += 1, R507 += 1 };
  s0 -> s2 [0, 65535] { R1117 += 1, R506 += 1, R507 += 1 };
  s0 -> s0 [0, 65535] { R1116 += 1, R1117 += 1 };
  s0 -> s3 [85, 85] { R1117 += 1, R507 += 1 };
  s0 -> s4 [85, 85] { R1117 += 1, R507 += 1 };
  s0 -> s1 [87, 65535] { R1117 += 1, R507 += 1 };
  s1 -> s1 [0, 84] { R1117 += 1, R507 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1117 += 1 };
  s1 -> s3 [85, 85] { R1117 += 1, R507 += 1 };
  s1 -> s4 [85, 85] { R1117 += 1, R507 += 1 };
  s1 -> s1 [87, 65535] { R1117 += 1, R507 += 1 };
  s2 -> s1 [0, 84] { R1117 += 1, R507 += 1 };
  s2 -> s2 [0, 65535] { R1117 += 1, R506 += 1, R507 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [85, 85] { R1117 += 1, R507 += 1 };
  s2 -> s4 [85, 85] { R1117 += 1, R507 += 1 };
  s2 -> s1 [87, 65535] { R1117 += 1, R507 += 1 };
  s3 -> s3 [0, 65535] { R1117 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 85] { R1117 += 1, R507 += 1 };
  s4 -> s4 [0, 65535] { R1117 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [87, 65535] { R1117 += 1, R507 += 1 };
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 84] { R1119 += 1, R511 += 1 };
  s0 -> s0 [0, 65535] { R1118 += 1, R1119 += 1 };
  s0 -> s2 [0, 65535] { R1119 += 1, R510 += 1, R511 += 1 };
  s0 -> s3 [85, 85] { R1119 += 1, R511 += 1 };
  s0 -> s1 [86, 65535] { R1119 += 1, R511 += 1 };
  s1 -> s1 [0, 84] { R1119 += 1, R511 += 1 };
  s1 -> s3 [85, 85] { R1119 += 1, R511 += 1 };
  s1 -> s1 [86, 65535] { R1119 += 1, R511 += 1 };
  s2 -> s1 [0, 84] { R1119 += 1, R511 += 1 };
  s2 -> s2 [0, 65535] { R1119 += 1, R510 += 1, R511 += 1 };
  s2 -> s3 [85, 85] { R1119 += 1, R511 += 1 };
  s2 -> s1 [86, 65535] { R1119 += 1, R511 += 1 };
  s3 -> s4 [0, 65535] { R1119 += 1 };
  s3 -> s3 [0, 65535] { R1119 += 1, R511 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1119 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 65535] { R1121 += 1, R515 += 1, R516 += 1 };
  s0 -> s2 [0, 65535] { R1121 += 1, R516 += 1, R517 += 1 };
  s0 -> s0 [0, 65535] { R1120 += 1, R1121 += 1 };
  s1 -> s1 [0, 65535] { R1121 += 1, R515 += 1, R516 += 1 };
  s1 -> s2 [0, 65535] { R1121 += 1, R516 += 1, R517 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R1121 += 1 };
  s2 -> s2 [0, 65535] { R1121 += 1, R516 += 1, R517 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1121 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 84] { R1123 += 1, R522 += 1 };
  s0 -> s2 [0, 65535] { R1123 += 1, R521 += 1, R522 += 1 };
  s0 -> s3 [0, 65535] { R1123 += 1, R522 += 1, R523 += 1 };
  s0 -> s0 [0, 65535] { R1122 += 1, R1123 += 1 };
  s0 -> s1 [86, 65535] { R1123 += 1, R522 += 1 };
  s1 -> s1 [0, 84] { R1123 += 1, R522 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1123 += 1 };
  s1 -> s1 [86, 65535] { R1123 += 1, R522 += 1 };
  s2 -> s1 [0, 84] { R1123 += 1, R522 += 1 };
  s2 -> s2 [0, 65535] { R1123 += 1, R521 += 1, R522 += 1 };
  s2 -> s3 [0, 65535] { R1123 += 1, R522 += 1, R523 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [86, 65535] { R1123 += 1, R522 += 1 };
  s3 -> s1 [0, 84] { R1123 += 1, R522 += 1 };
  s3 -> s3 [0, 65535] { R1123 += 1, R522 += 1, R523 += 1 };
  s3 -> s4 [0, 65535] { R1123 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [86, 65535] { R1123 += 1, R522 += 1 };
  s4 -> s4 [0, 65535] { R1123 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 84] { R1125 += 1, R529 += 1, R531 += 1 };
  s0 -> s0 [0, 65535] { R1124 += 1, R1125 += 1 };
  s0 -> s2 [0, 65535] { R1125 += 1, R528 += 1, R529 += 1 };
  s0 -> s3 [0, 65535] { R1125 += 1, R529 += 1, R530 += 1, R531 += 1 };
  s0 -> s1 [86, 65535] { R1125 += 1, R529 += 1, R531 += 1 };
  s1 -> s1 [0, 84] { R1125 += 1, R529 += 1, R531 += 1 };
  s1 -> s1 [0, 65535] { R1125 += 1, R529 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R1125 += 1 };
  s1 -> s1 [86, 65535] { R1125 += 1, R529 += 1, R531 += 1 };
  s2 -> s1 [0, 84] { R1125 += 1, R529 += 1, R531 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1125 += 1, R528 += 1, R529 += 1 };
  s2 -> s3 [0, 65535] { R1125 += 1, R529 += 1, R530 += 1, R531 += 1 };
  s2 -> s1 [86, 65535] { R1125 += 1, R529 += 1, R531 += 1 };
  s3 -> s1 [0, 84] { R1125 += 1, R529 += 1, R531 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1125 += 1, R529 += 1, R530 += 1, R531 += 1 };
  s3 -> s5 [0, 65535] { R1125 += 1 };
  s3 -> s1 [86, 65535] { R1125 += 1, R529 += 1, R531 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1125 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 65535] { R1127 += 1, R538 += 1, R539 += 1, R540 += 1 };
  s0 -> s2 [0, 65535] { R1127 += 1, R538 += 1, R540 += 1, R541 += 1 };
  s0 -> s3 [0, 65535] { R1127 += 1, R537 += 1, R538 += 1 };
  s0 -> s0 [0, 65535] { R1126 += 1, R1127 += 1 };
  s1 -> s1 [0, 65535] { R1127 += 1, R538 += 1, R539 += 1, R540 += 1 };
  s1 -> s2 [0, 65535] { R1127 += 1, R538 += 1, R540 += 1, R541 += 1 };
  s1 -> s5 [0, 65535] { R1127 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1127 += 1, R538 += 1, R540 += 1, R541 += 1 };
  s2 -> s5 [0, 65535] { R1127 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s6 [0, 65535] { R1127 += 1, R538 += 1 };
  s3 -> s1 [0, 65535] { R1127 += 1, R538 += 1, R539 += 1, R540 += 1 };
  s3 -> s2 [0, 65535] { R1127 += 1, R538 += 1, R540 += 1, R541 += 1 };
  s3 -> s3 [0, 65535] { R1127 += 1, R537 += 1, R538 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1127 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R1127 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R1127 += 1, R538 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_20 {
  init s0;
  s0 -> s0 [0, 65535] { R1128 += 1, R1129 += 1 };
  s0 -> s1 [0, 65535] { R1129 += 1, R546 += 1, R547 += 1 };
  s0 -> s2 [0, 65535] { R1129 += 1, R547 += 1, R549 += 1 };
  s0 -> s3 [0, 65535] { R1129 += 1, R547 += 1, R548 += 1, R549 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1129 += 1, R546 += 1, R547 += 1 };
  s1 -> s2 [0, 65535] { R1129 += 1, R547 += 1, R549 += 1 };
  s1 -> s3 [0, 65535] { R1129 += 1, R547 += 1, R548 += 1, R549 += 1 };
  s2 -> s4 [0, 65535] { R1129 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1129 += 1, R547 += 1, R549 += 1 };
  s2 -> s6 [0, 65535] { R1129 += 1, R547 += 1 };
  s3 -> s4 [0, 65535] { R1129 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R1129 += 1, R547 += 1, R549 += 1 };
  s3 -> s3 [0, 65535] { R1129 += 1, R547 += 1, R548 += 1, R549 += 1 };
  s4 -> s4 [0, 65535] { R1129 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R1129 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1129 += 1, R547 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R1131 += 1, R555 += 1, R556 += 1 };
  s0 -> s0 [0, 65535] { R1130 += 1, R1131 += 1 };
  s0 -> s2 [0, 65535] { R1131 += 1, R556 += 1, R558 += 1, R559 += 1 };
  s0 -> s3 [0, 65535] { R1131 += 1, R556 += 1, R557 += 1, R558 += 1 };
  s1 -> s1 [0, 65535] { R1131 += 1, R555 += 1, R556 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s2 [0, 65535] { R1131 += 1, R556 += 1, R558 += 1, R559 += 1 };
  s1 -> s3 [0, 65535] { R1131 += 1, R556 += 1, R557 += 1, R558 += 1 };
  s2 -> s4 [0, 65535] { R1131 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1131 += 1, R556 += 1, R558 += 1, R559 += 1 };
  s2 -> s6 [0, 65535] { R1131 += 1, R556 += 1 };
  s3 -> s4 [0, 65535] { R1131 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R1131 += 1, R556 += 1, R558 += 1, R559 += 1 };
  s3 -> s3 [0, 65535] { R1131 += 1, R556 += 1, R557 += 1, R558 += 1 };
  s4 -> s4 [0, 65535] { R1131 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R1131 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1131 += 1, R556 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 65535] { R1133 += 1 };
  s0 -> s0 [0, 65535] { R1132 += 1, R1133 += 1 };
  s0 -> s2 [0, 65535] { R1133 += 1, R1101 += 1 };
  s1 -> s1 [0, 65535] { R1133 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R1133 += 1 };
  s2 -> s2 [0, 65535] { R1133 += 1, R1101 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s0 [0, 65535] { R1134 += 1, R1135 += 1 };
  s0 -> s1 [0, 65535] { R1135 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R1135 += 1, R19 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 83] { R1137 += 1 };
  s0 -> s0 [0, 65535] { R1136 += 1, R1137 += 1 };
  s0 -> s2 [84, 84] { R1137 += 1 };
  s0 -> s3 [84, 84] { R1137 += 1 };
  s0 -> s4 [85, 85] { R1137 += 1 };
  s0 -> s1 [86, 65535] { R1137 += 1 };
  s1 -> s1 [0, 83] { R1137 += 1 };
  s1 -> s2 [84, 84] { R1137 += 1 };
  s1 -> s3 [84, 84] { R1137 += 1 };
  s1 -> s4 [85, 85] { R1137 += 1 };
  s1 -> s1 [86, 65535] { R1137 += 1 };
  s3 -> s3 [0, 84] { R1137 += 1 };
  s3 -> s6 [85, 85] { R1137 += 1 };
  s3 -> s3 [86, 65535] { R1137 += 1 };
  s4 -> s4 [0, 83] { R1137 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s5 [84, 84] { R1137 += 1 };
  s4 -> s6 [84, 84] { R1137 += 1 };
  s4 -> s4 [85, 65535] { R1137 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s7 [0, 65535];
  s6 -> s6 [0, 65535] { R1137 += 1 };
  s7 -> s7 [0, 65535];
  accepting s4, s5, s6, s7;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 83] { R1139 += 1, R494 += 1 };
  s0 -> s0 [0, 65535] { R1138 += 1, R1139 += 1 };
  s0 -> s2 [84, 84] { R1139 += 1, R494 += 1 };
  s0 -> s3 [84, 84] { R1139 += 1, R494 += 1 };
  s0 -> s1 [85, 65535] { R1139 += 1, R494 += 1 };
  s1 -> s1 [0, 83] { R1139 += 1, R494 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R1139 += 1, R494 += 1 };
  s1 -> s3 [84, 84] { R1139 += 1, R494 += 1 };
  s1 -> s1 [85, 65535] { R1139 += 1, R494 += 1 };
  s2 -> s2 [0, 65535] { R1139 += 1, R494 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 83] { R1141 += 1, R496 += 1 };
  s0 -> s0 [0, 65535] { R1140 += 1, R1141 += 1 };
  s0 -> s2 [84, 84] { R1141 += 1, R496 += 1 };
  s0 -> s3 [84, 84] { R1141 += 1, R496 += 1 };
  s0 -> s1 [85, 65535] { R1141 += 1, R496 += 1 };
  s1 -> s1 [0, 83] { R1141 += 1, R496 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R1141 += 1, R496 += 1 };
  s1 -> s3 [84, 84] { R1141 += 1, R496 += 1 };
  s1 -> s1 [85, 65535] { R1141 += 1, R496 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1141 += 1, R496 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 83] { R1143 += 1, R498 += 1, R499 += 1 };
  s0 -> s0 [0, 65535] { R1142 += 1, R1143 += 1 };
  s0 -> s2 [84, 84] { R1143 += 1, R498 += 1, R499 += 1 };
  s0 -> s3 [84, 84] { R1143 += 1, R498 += 1, R499 += 1 };
  s0 -> s1 [85, 65535] { R1143 += 1, R498 += 1, R499 += 1 };
  s1 -> s1 [0, 83] { R1143 += 1, R498 += 1, R499 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R1143 += 1, R498 += 1, R499 += 1 };
  s1 -> s3 [84, 84] { R1143 += 1, R498 += 1, R499 += 1 };
  s1 -> s1 [85, 65535] { R1143 += 1, R498 += 1, R499 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1143 += 1, R498 += 1, R499 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 83] { R1145 += 1, R504 += 1, R505 += 1 };
  s0 -> s0 [0, 65535] { R1144 += 1, R1145 += 1 };
  s0 -> s2 [84, 84] { R1145 += 1, R504 += 1, R505 += 1 };
  s0 -> s3 [84, 84] { R1145 += 1, R504 += 1, R505 += 1 };
  s0 -> s1 [85, 65535] { R1145 += 1, R504 += 1, R505 += 1 };
  s1 -> s1 [0, 83] { R1145 += 1, R504 += 1, R505 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R1145 += 1, R504 += 1, R505 += 1 };
  s1 -> s3 [84, 84] { R1145 += 1, R504 += 1, R505 += 1 };
  s1 -> s1 [85, 65535] { R1145 += 1, R504 += 1, R505 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1145 += 1, R504 += 1, R505 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 83] { R1147 += 1, R508 += 1, R509 += 1 };
  s0 -> s0 [0, 65535] { R1146 += 1, R1147 += 1 };
  s0 -> s2 [84, 84] { R1147 += 1, R508 += 1, R509 += 1 };
  s0 -> s3 [84, 84] { R1147 += 1, R508 += 1, R509 += 1 };
  s0 -> s1 [85, 65535] { R1147 += 1, R508 += 1, R509 += 1 };
  s1 -> s1 [0, 83] { R1147 += 1, R508 += 1, R509 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R1147 += 1, R508 += 1, R509 += 1 };
  s1 -> s3 [84, 84] { R1147 += 1, R508 += 1, R509 += 1 };
  s1 -> s1 [85, 65535] { R1147 += 1, R508 += 1, R509 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R1147 += 1, R508 += 1, R509 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 83] { R1149 += 1, R512 += 1, R513 += 1 };
  s0 -> s0 [0, 65535] { R1148 += 1, R1149 += 1 };
  s0 -> s2 [84, 84] { R1149 += 1, R512 += 1, R513 += 1 };
  s0 -> s3 [84, 84] { R1149 += 1, R512 += 1, R513 += 1 };
  s0 -> s1 [85, 65535] { R1149 += 1, R512 += 1, R513 += 1 };
  s1 -> s1 [0, 83] { R1149 += 1, R512 += 1, R513 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R1149 += 1, R512 += 1, R513 += 1 };
  s1 -> s3 [84, 84] { R1149 += 1, R512 += 1, R513 += 1 };
  s1 -> s1 [85, 65535] { R1149 += 1, R512 += 1, R513 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1149 += 1, R512 += 1, R513 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 83] { R1151 += 1, R518 += 1, R519 += 1 };
  s0 -> s0 [0, 65535] { R1150 += 1, R1151 += 1 };
  s0 -> s2 [84, 84] { R1151 += 1, R518 += 1, R519 += 1 };
  s0 -> s3 [84, 84] { R1151 += 1, R518 += 1, R519 += 1 };
  s0 -> s1 [85, 65535] { R1151 += 1, R518 += 1, R519 += 1 };
  s1 -> s1 [0, 83] { R1151 += 1, R518 += 1, R519 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R1151 += 1, R518 += 1, R519 += 1 };
  s1 -> s3 [84, 84] { R1151 += 1, R518 += 1, R519 += 1 };
  s1 -> s1 [85, 65535] { R1151 += 1, R518 += 1, R519 += 1 };
  s2 -> s2 [0, 65535] { R1151 += 1, R518 += 1, R519 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 83] { R1153 += 1, R524 += 1, R525 += 1 };
  s0 -> s0 [0, 65535] { R1152 += 1, R1153 += 1 };
  s0 -> s2 [84, 84] { R1153 += 1, R524 += 1, R525 += 1 };
  s0 -> s3 [84, 84] { R1153 += 1, R524 += 1, R525 += 1 };
  s0 -> s1 [85, 65535] { R1153 += 1, R524 += 1, R525 += 1 };
  s1 -> s1 [0, 83] { R1153 += 1, R524 += 1, R525 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R1153 += 1, R524 += 1, R525 += 1 };
  s1 -> s3 [84, 84] { R1153 += 1, R524 += 1, R525 += 1 };
  s1 -> s1 [85, 65535] { R1153 += 1, R524 += 1, R525 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1153 += 1, R524 += 1, R525 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 83] { R1155 += 1, R532 += 1, R533 += 1 };
  s0 -> s0 [0, 65535] { R1154 += 1, R1155 += 1 };
  s0 -> s2 [84, 84] { R1155 += 1, R532 += 1, R533 += 1 };
  s0 -> s3 [84, 84] { R1155 += 1, R532 += 1, R533 += 1 };
  s0 -> s1 [85, 65535] { R1155 += 1, R532 += 1, R533 += 1 };
  s1 -> s1 [0, 83] { R1155 += 1, R532 += 1, R533 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R1155 += 1, R532 += 1, R533 += 1 };
  s1 -> s3 [84, 84] { R1155 += 1, R532 += 1, R533 += 1 };
  s1 -> s1 [85, 65535] { R1155 += 1, R532 += 1, R533 += 1 };
  s2 -> s2 [0, 65535] { R1155 += 1, R532 += 1, R533 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 83] { R1157 += 1, R542 += 1, R543 += 1 };
  s0 -> s0 [0, 65535] { R1156 += 1, R1157 += 1 };
  s0 -> s2 [84, 84] { R1157 += 1, R542 += 1, R543 += 1 };
  s0 -> s3 [84, 84] { R1157 += 1, R542 += 1, R543 += 1 };
  s0 -> s1 [85, 65535] { R1157 += 1, R542 += 1, R543 += 1 };
  s1 -> s1 [0, 83] { R1157 += 1, R542 += 1, R543 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R1157 += 1, R542 += 1, R543 += 1 };
  s1 -> s3 [84, 84] { R1157 += 1, R542 += 1, R543 += 1 };
  s1 -> s1 [85, 65535] { R1157 += 1, R542 += 1, R543 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R1157 += 1, R542 += 1, R543 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 83] { R1159 += 1, R550 += 1, R551 += 1 };
  s0 -> s0 [0, 65535] { R1158 += 1, R1159 += 1 };
  s0 -> s2 [84, 84] { R1159 += 1, R550 += 1, R551 += 1 };
  s0 -> s3 [84, 84] { R1159 += 1, R550 += 1, R551 += 1 };
  s0 -> s1 [85, 65535] { R1159 += 1, R550 += 1, R551 += 1 };
  s1 -> s1 [0, 83] { R1159 += 1, R550 += 1, R551 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R1159 += 1, R550 += 1, R551 += 1 };
  s1 -> s3 [84, 84] { R1159 += 1, R550 += 1, R551 += 1 };
  s1 -> s1 [85, 65535] { R1159 += 1, R550 += 1, R551 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1159 += 1, R550 += 1, R551 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 83] { R1161 += 1, R1097 += 1, R1099 += 1 };
  s0 -> s2 [0, 83] { R1161 += 1, R1097 += 1, R1098 += 1, R1099 += 1 };
  s0 -> s3 [0, 83] { R1161 += 1, R1096 += 1, R1097 += 1 };
  s0 -> s0 [0, 65535] { R1160 += 1, R1161 += 1 };
  s0 -> s4 [84, 84] { R1161 += 1, R1096 += 1, R1097 += 1 };
  s0 -> s5 [84, 84] { R1161 += 1, R1097 += 1, R1098 += 1, R1099 += 1 };
  s0 -> s6 [84, 84] { R1161 += 1, R1097 += 1, R1099 += 1 };
  s0 -> s7 [84, 84] { R1161 += 1, R1096 += 1, R1097 += 1 };
  s0 -> s8 [84, 84] { R1161 += 1, R1097 += 1, R1098 += 1, R1099 += 1 };
  s0 -> s9 [84, 84] { R1161 += 1, R1097 += 1, R1099 += 1 };
  s0 -> s10 [85, 85] { R1161 += 1, R1097 += 1, R1099 += 1 };
  s0 -> s2 [85, 65535] { R1161 += 1, R1097 += 1, R1098 += 1, R1099 += 1 };
  s0 -> s3 [85, 65535] { R1161 += 1, R1096 += 1, R1097 += 1 };
  s0 -> s11 [86, 86] { R1161 += 1, R1097 += 1, R1099 += 1 };
  s0 -> s1 [87, 65535] { R1161 += 1, R1097 += 1, R1099 += 1 };
  s1 -> s1 [0, 83] { R1161 += 1, R1097 += 1, R1099 += 1 };
  s1 -> s6 [84, 84] { R1161 += 1, R1097 += 1, R1099 += 1 };
  s1 -> s9 [84, 84] { R1161 += 1, R1097 += 1, R1099 += 1 };
  s1 -> s10 [85, 85] { R1161 += 1, R1097 += 1, R1099 += 1 };
  s1 -> s11 [86, 86] { R1161 += 1, R1097 += 1, R1099 += 1 };
  s1 -> s1 [87, 65535] { R1161 += 1, R1097 += 1, R1099 += 1 };
  s2 -> s1 [0, 83] { R1161 += 1, R1097 += 1, R1099 += 1 };
  s2 -> s2 [0, 83] { R1161 += 1, R1097 += 1, R1098 += 1, R1099 += 1 };
  s2 -> s5 [84, 84] { R1161 += 1, R1097 += 1, R1098 += 1, R1099 += 1 };
  s2 -> s6 [84, 84] { R1161 += 1, R1097 += 1, R1099 += 1 };
  s2 -> s8 [84, 84] { R1161 += 1, R1097 += 1, R1098 += 1, R1099 += 1 };
  s2 -> s9 [84, 84] { R1161 += 1, R1097 += 1, R1099 += 1 };
  s2 -> s10 [85, 85] { R1161 += 1, R1097 += 1, R1099 += 1 };
  s2 -> s2 [85, 65535] { R1161 += 1, R1097 += 1, R1098 += 1, R1099 += 1 };
  s2 -> s11 [86, 86] { R1161 += 1, R1097 += 1, R1099 += 1 };
  s2 -> s1 [87, 65535] { R1161 += 1, R1097 += 1, R1099 += 1 };
  s3 -> s1 [0, 83] { R1161 += 1, R1097 += 1, R1099 += 1 };
  s3 -> s2 [0, 83] { R1161 += 1, R1097 += 1, R1098 += 1, R1099 += 1 };
  s3 -> s3 [0, 83] { R1161 += 1, R1096 += 1, R1097 += 1 };
  s3 -> s4 [84, 84] { R1161 += 1, R1096 += 1, R1097 += 1 };
  s3 -> s5 [84, 84] { R1161 += 1, R1097 += 1, R1098 += 1, R1099 += 1 };
  s3 -> s6 [84, 84] { R1161 += 1, R1097 += 1, R1099 += 1 };
  s3 -> s7 [84, 84] { R1161 += 1, R1096 += 1, R1097 += 1 };
  s3 -> s8 [84, 84] { R1161 += 1, R1097 += 1, R1098 += 1, R1099 += 1 };
  s3 -> s9 [84, 84] { R1161 += 1, R1097 += 1, R1099 += 1 };
  s3 -> s10 [85, 85] { R1161 += 1, R1097 += 1, R1099 += 1 };
  s3 -> s2 [85, 65535] { R1161 += 1, R1097 += 1, R1098 += 1, R1099 += 1 };
  s3 -> s3 [85, 65535] { R1161 += 1, R1096 += 1, R1097 += 1 };
  s3 -> s11 [86, 86] { R1161 += 1, R1097 += 1, R1099 += 1 };
  s3 -> s1 [87, 65535] { R1161 += 1, R1097 += 1, R1099 += 1 };
  s4 -> s6 [0, 84] { R1161 += 1, R1097 += 1, R1099 += 1 };
  s4 -> s4 [0, 65535] { R1161 += 1, R1096 += 1, R1097 += 1 };
  s4 -> s8 [0, 65535] { R1161 += 1, R1097 += 1, R1098 += 1, R1099 += 1 };
  s4 -> s22 [85, 85] { R1161 += 1, R1097 += 1, R1099 += 1 };
  s4 -> s13 [86, 86] { R1161 += 1, R1097 += 1, R1099 += 1 };
  s4 -> s6 [87, 65535] { R1161 += 1, R1097 += 1, R1099 += 1 };
  s6 -> s6 [0, 84] { R1161 += 1, R1097 += 1, R1099 += 1 };
  s6 -> s22 [85, 85] { R1161 += 1, R1097 += 1, R1099 += 1 };
  s6 -> s13 [86, 86] { R1161 += 1, R1097 += 1, R1099 += 1 };
  s6 -> s6 [87, 65535] { R1161 += 1, R1097 += 1, R1099 += 1 };
  s8 -> s6 [0, 84] { R1161 += 1, R1097 += 1, R1099 += 1 };
  s8 -> s8 [0, 65535] { R1161 += 1, R1097 += 1, R1098 += 1, R1099 += 1 };
  s8 -> s22 [85, 85] { R1161 += 1, R1097 += 1, R1099 += 1 };
  s8 -> s13 [86, 86] { R1161 += 1, R1097 += 1, R1099 += 1 };
  s8 -> s6 [87, 65535] { R1161 += 1, R1097 += 1, R1099 += 1 };
  s10 -> s10 [0, 83] { R1161 += 1, R1097 += 1, R1099 += 1 };
  s10 -> s21 [84, 84] { R1161 += 1, R1097 += 1, R1099 += 1 };
  s10 -> s22 [84, 84] { R1161 += 1, R1097 += 1, R1099 += 1 };
  s10 -> s10 [85, 85] { R1161 += 1, R1097 += 1, R1099 += 1 };
  s10 -> s14 [86, 86] { R1161 += 1, R1097 += 1, R1099 += 1 };
  s10 -> s10 [87, 65535] { R1161 += 1, R1097 += 1, R1099 += 1 };
  s11 -> s11 [0, 83] { R1161 += 1, R1097 += 1, R1099 += 1 };
  s11 -> s12 [84, 84] { R1161 += 1, R1097 += 1 };
  s11 -> s13 [84, 84] { R1161 += 1, R1097 += 1 };
  s11 -> s14 [85, 85] { R1161 += 1, R1097 += 1, R1099 += 1 };
  s11 -> s11 [85, 65535] { R1161 += 1, R1097 += 1 };
  s11 -> s11 [86, 65535] { R1161 += 1, R1097 += 1, R1099 += 1 };
  s13 -> s13 [0, 84] { R1161 += 1, R1097 += 1, R1099 += 1 };
  s13 -> s13 [0, 65535] { R1161 += 1, R1097 += 1 };
  s13 -> s16 [85, 85] { R1161 += 1, R1097 += 1, R1099 += 1 };
  s13 -> s13 [86, 65535] { R1161 += 1, R1097 += 1, R1099 += 1 };
  s14 -> s14 [0, 83] { R1161 += 1, R1097 += 1, R1099 += 1 };
  s14 -> s15 [0, 83] { R1161 += 1, R1097 += 1 };
  s14 -> s16 [84, 84] { R1161 += 1, R1097 += 1, R1099 += 1 };
  s14 -> s17 [84, 84] { R1161 += 1, R1097 += 1 };
  s14 -> s18 [84, 84] { R1161 += 1, R1097 += 1, R1099 += 1 };
  s14 -> s19 [84, 84] { R1161 += 1, R1097 += 1 };
  s14 -> s14 [85, 65535] { R1161 += 1, R1097 += 1, R1099 += 1 };
  s14 -> s15 [85, 65535] { R1161 += 1, R1097 += 1 };
  s15 -> s15 [0, 83] { R1161 += 1, R1097 += 1 };
  s15 -> s15 [0, 65535];
  s15 -> s17 [84, 84] { R1161 += 1, R1097 += 1 };
  s15 -> s19 [84, 84] { R1161 += 1, R1097 += 1 };
  s15 -> s15 [85, 65535] { R1161 += 1, R1097 += 1 };
  s16 -> s16 [0, 65535] { R1161 += 1, R1097 += 1, R1099 += 1 };
  s16 -> s17 [0, 65535] { R1161 += 1, R1097 += 1 };
  s17 -> s17 [0, 65535] { R1161 += 1, R1097 += 1 };
  s17 -> s20 [0, 65535];
  s19 -> s19 [0, 65535];
  s20 -> s20 [0, 65535];
  s22 -> s22 [0, 85] { R1161 += 1, R1097 += 1, R1099 += 1 };
  s22 -> s16 [86, 86] { R1161 += 1, R1097 += 1, R1099 += 1 };
  s22 -> s22 [87, 65535] { R1161 += 1, R1097 += 1, R1099 += 1 };
  accepting s15, s17, s19, s20;
};
};
synchronised {  // Automata constraining P4
automaton P4_0 {
  init s0;
  s0 -> s1 [116, 116];
  accepting s1;
};
};
synchronised {  // Automata constraining P59
automaton P59_0 {
  init s0;
  s0 -> s1 [117, 117];
  accepting s1;
};
};
constraint R2 = R1133 && R20 - R1133 = -1 && R21 = R1133 && R22 - R1133 = -1 && R23 = R1133 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R495 + R494 + -1*R1101 + -1*R1097 = 0 && R510 + R508 = 0 && R511 + R509 + -1*R1101 + -1*R1097 = 0 && R1100 + R1096 = 0 && R1102 + R1098 = 0 && R1103 + R1099 = 0 && R1104 = 0 && R1105 = R1133 && R1106 = 0 && R1107 = R1133 && R1108 = 0 && R1109 = R1133 && R1110 = 0 && R1111 = R1133 && R1112 = 0 && R1113 = R1133 && R1114 = 0 && R1115 = R1133 && R1116 = 0 && R1117 = R1133 && R1118 = 0 && R1119 = R1133 && R1120 = 0 && R1121 = R1133 && R1122 = 0 && R1123 = R1133 && R1124 = 0 && R1125 = R1133 && R1126 = 0 && R1127 = R1133 && R1128 = 0 && R1129 = R1133 && R1130 = 0 && R1131 = R1133 && R1132 = 0 && R1136 = 0 && R1137 = 0 && R1160 = 0 && R1161 = 0 && R11 < 1 && R12 < 1 && R497 + R496 < 1 && -1*R517 + -1*R514 < 1 && R523 + R520 < 1 && -1*R1101 + -1*R1097 < 1 && 0 < R1133 && (R515 + R512 != 0 || R516 + R513 + -1*R1101 + -1*R1097 = 0 || R517 + R514 < 1) && (R517 + R514 != 0 || R541 + R536 = 0 || (R530 + R526 = 0 && R531 + R527 = 0)) && (R517 + R514 != 0 || R541 + R536 = 0 || (R539 + R534 = 0 && R540 + R535 = 0)) && (R517 + R514 != 0 || R541 + R536 = 0 || (R548 + R544 = 0 && R549 + R545 = 0)) && (R517 + R514 != 0 || ((R515 + R512 != 0 || R516 + R513 + -1*R1101 + -1*R1097 = 0 || R1101 + R1097 < 1) && (R515 + R512 = 0 || R1101 + R1097 < 1))) && (R521 + R518 != 0 || R522 + R519 + -1*R1101 + -1*R1097 = 0 || (R517 + R514 = 0 && R1101 + R1097 = 0)) && (R528 + R524 != 0 || R529 + R525 + -1*R1101 + -1*R1097 = 0 || (R517 + R514 = 0 && R1101 + R1097 = 0)) && (R530 + R526 != 0 || R517 + R514 + -1*R531 + -1*R527 = 0 || R517 + R514 < 1) && (R537 + R532 != 0 || R538 + R533 + -1*R1101 + -1*R1097 = 0 || (R517 + R514 = 0 && R1101 + R1097 = 0)) && (R539 + R534 != 0 || R517 + R514 + -1*R540 + -1*R535 = 0 || R517 + R514 < 1) && (R546 + R542 != 0 || R547 + R543 + -1*R1101 + -1*R1097 = 0 || (R517 + R514 = 0 && R1101 + R1097 = 0)) && (R548 + R544 != 0 || R517 + R514 + -1*R549 + -1*R545 = 0 || R517 + R514 < 1) && (R555 + R550 != 0 || R556 + R551 + -1*R1101 + -1*R1097 = 0 || (R517 + R514 = 0 && R1101 + R1097 = 0)) && (R19 = 0 || (R1134 = 0 && R1135 = 0)) && (R19 = 0 || (R1138 = 0 && R1139 = 0)) && (R19 = 0 || (R1140 = 0 && R1141 = 0)) && (R19 = 0 || (R1142 = 0 && R1143 = 0)) && (R19 = 0 || (R1144 = 0 && R1145 = 0)) && (R19 = 0 || (R1146 = 0 && R1147 = 0)) && (R19 = 0 || (R1148 = 0 && R1149 = 0)) && (R19 = 0 || (R1150 = 0 && R1151 = 0)) && (R19 = 0 || (R1152 = 0 && R1153 = 0)) && (R19 = 0 || (R1154 = 0 && R1155 = 0)) && (R19 = 0 || (R1156 = 0 && R1157 = 0)) && (R19 = 0 || (R1158 = 0 && R1159 = 0)) && (R503 + R500 = 0 || (R501 + R498 = 0 && R502 + R499 = 0)) && (R503 + R500 = 0 || (R506 + R504 = 0 && R507 + R505 = 0)) && (R515 + R512 = 0 || R517 + R514 < 1) && (R521 + R518 = 0 || (R517 + R514 = 0 && R1101 + R1097 = 0)) && (R528 + R524 = 0 || (R517 + R514 = 0 && R1101 + R1097 = 0)) && (R530 + R526 = 0 || R517 + R514 < 1) && (R537 + R532 = 0 || (R517 + R514 = 0 && R1101 + R1097 = 0)) && (R539 + R534 = 0 || R517 + R514 < 1) && (R546 + R542 = 0 || (R517 + R514 = 0 && R1101 + R1097 = 0)) && (R548 + R544 = 0 || R517 + R514 < 1) && (R555 + R550 = 0 || (R517 + R514 = 0 && R1101 + R1097 = 0)) && (R559 + R554 = 0 || (R557 + R552 = 0 && R558 + R553 = 0));
// End of Parikh automata intersection problem
