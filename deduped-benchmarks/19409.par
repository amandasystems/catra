// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R11522, R11523, R11524, R11525, R11526, R11527, R11528, R11529, R11530, R11531, R12, R14072, R14073, R14074, R14075, R14498, R14499, R14500, R14501, R14502, R14503, R14608, R14609, R14610, R14611, R14612, R14613, R14614, R14615, R14616, R14617, R14618, R14619, R14620, R14621, R14622, R14623, R14624, R14625, R14626, R14627, R14628, R14629, R14630, R14631, R14632, R14633, R14634, R14635, R14636, R14637, R14638, R14639, R14640, R14641, R14642, R14643, R14644, R14645, R14646, R14647, R14648, R14649, R14650, R14651, R14652, R14653, R14654, R14655, R14656, R14657, R14658, R14659, R14660, R14661, R14662, R14663, R14664, R14665, R14666, R14667, R14668, R14669, R14670, R14671, R14672, R14673, R14674, R14675, R14676, R14677, R14678, R14679, R14680, R14681, R14682, R14683, R14684, R14685, R14686, R14687, R14688, R14689, R14690, R14691, R14692, R14693, R14694, R14695, R14696, R14697, R14698, R14699, R14700, R14701, R14702, R14703, R14704, R14705, R14706, R14707, R14708, R14709, R14710, R14711, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 72];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [73, 73];
  s0 -> s1 [74, 65535];
  s1 -> s1 [0, 72];
  s1 -> s2 [73, 73];
  s1 -> s1 [74, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R21 += 1 };
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R25 += 1 };
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R14632 += 1, R14633 += 1 };
  s0 -> s1 [0, 65535] { R14633 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R14633 += 1, R19 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 72] { R14635 += 1 };
  s0 -> s0 [0, 65535] { R14634 += 1, R14635 += 1 };
  s0 -> s2 [73, 73] { R14635 += 1 };
  s0 -> s3 [73, 73] { R14635 += 1 };
  s0 -> s1 [78, 65535] { R14635 += 1 };
  s1 -> s1 [0, 72] { R14635 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R14635 += 1 };
  s1 -> s3 [73, 73] { R14635 += 1 };
  s1 -> s1 [78, 65535] { R14635 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 73] { R14635 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [78, 65535] { R14635 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 72] { R14637 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R14636 += 1, R14637 += 1 };
  s0 -> s2 [73, 73] { R14637 += 1, R38 += 1 };
  s0 -> s3 [73, 73] { R14637 += 1, R38 += 1 };
  s0 -> s1 [74, 65535] { R14637 += 1, R38 += 1 };
  s1 -> s1 [0, 72] { R14637 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R14637 += 1, R38 += 1 };
  s1 -> s3 [73, 73] { R14637 += 1, R38 += 1 };
  s1 -> s1 [74, 65535] { R14637 += 1, R38 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R14637 += 1, R38 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 72] { R14639 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R14638 += 1, R14639 += 1 };
  s0 -> s2 [73, 73] { R14639 += 1, R40 += 1 };
  s0 -> s3 [73, 73] { R14639 += 1, R40 += 1 };
  s0 -> s1 [74, 65535] { R14639 += 1, R40 += 1 };
  s1 -> s1 [0, 72] { R14639 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R14639 += 1, R40 += 1 };
  s1 -> s3 [73, 73] { R14639 += 1, R40 += 1 };
  s1 -> s1 [74, 65535] { R14639 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R14639 += 1, R40 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 72] { R14641 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R14640 += 1, R14641 += 1 };
  s0 -> s2 [73, 73] { R14641 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [73, 73] { R14641 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [74, 65535] { R14641 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 72] { R14641 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R14641 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [73, 73] { R14641 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [74, 65535] { R14641 += 1, R42 += 1, R43 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R14641 += 1, R42 += 1, R43 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 72] { R14643 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R14642 += 1, R14643 += 1 };
  s0 -> s2 [73, 73] { R14643 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [73, 73] { R14643 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [74, 65535] { R14643 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 72] { R14643 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R14643 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [73, 73] { R14643 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [74, 65535] { R14643 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535] { R14643 += 1, R46 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 72] { R14645 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R14644 += 1, R14645 += 1 };
  s0 -> s2 [73, 73] { R14645 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [73, 73] { R14645 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [74, 65535] { R14645 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 72] { R14645 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R14645 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [73, 73] { R14645 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [74, 65535] { R14645 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535] { R14645 += 1, R52 += 1, R53 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 72] { R14647 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R14646 += 1, R14647 += 1 };
  s0 -> s2 [73, 73] { R14647 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [73, 73] { R14647 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [74, 65535] { R14647 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 72] { R14647 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R14647 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [73, 73] { R14647 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [74, 65535] { R14647 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535] { R14647 += 1, R56 += 1, R57 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 72] { R14649 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R14648 += 1, R14649 += 1 };
  s0 -> s2 [73, 73] { R14649 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [73, 73] { R14649 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [74, 65535] { R14649 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 72] { R14649 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R14649 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [73, 73] { R14649 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [74, 65535] { R14649 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535] { R14649 += 1, R62 += 1, R63 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 72] { R14669 += 1 };
  s0 -> s0 [0, 65535] { R14668 += 1, R14669 += 1 };
  s0 -> s2 [73, 73] { R14669 += 1 };
  s0 -> s1 [74, 65535] { R14669 += 1 };
  s1 -> s1 [0, 72] { R14669 += 1 };
  s1 -> s2 [73, 73] { R14669 += 1 };
  s1 -> s1 [74, 65535] { R14669 += 1 };
  s2 -> s2 [0, 65535] { R14669 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R14671 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R14670 += 1, R14671 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R14671 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 72] { R14673 += 1 };
  s0 -> s2 [0, 65535] { R14673 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R14672 += 1, R14673 += 1 };
  s0 -> s3 [73, 73] { R14673 += 1 };
  s0 -> s1 [74, 65535] { R14673 += 1 };
  s1 -> s1 [0, 72] { R14673 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [73, 73] { R14673 += 1 };
  s1 -> s1 [74, 65535] { R14673 += 1 };
  s2 -> s1 [0, 72] { R14673 += 1 };
  s2 -> s2 [0, 65535] { R14673 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [73, 73] { R14673 += 1 };
  s2 -> s1 [74, 65535] { R14673 += 1 };
  s3 -> s3 [0, 65535] { R14673 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 72] { R14675 += 1, R14613 += 1 };
  s0 -> s0 [0, 65535] { R14674 += 1, R14675 += 1 };
  s0 -> s2 [0, 65535] { R14675 += 1, R14612 += 1, R14613 += 1 };
  s0 -> s1 [74, 65535] { R14675 += 1, R14613 += 1 };
  s1 -> s1 [0, 72] { R14675 += 1, R14613 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R14675 += 1 };
  s1 -> s1 [74, 65535] { R14675 += 1, R14613 += 1 };
  s2 -> s1 [0, 72] { R14675 += 1, R14613 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R14675 += 1, R14612 += 1, R14613 += 1 };
  s2 -> s1 [74, 65535] { R14675 += 1, R14613 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R14677 += 1, R14615 += 1, R17 += 1 };
  s0 -> s0 [0, 65535] { R14676 += 1, R14677 += 1 };
  s0 -> s2 [0, 65535] { R14677 += 1, R14614 += 1, R14615 += 1 };
  s1 -> s1 [0, 65535] { R14677 += 1, R14615 += 1, R17 += 1 };
  s1 -> s4 [0, 65535] { R14677 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R14677 += 1, R14615 += 1, R17 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R14677 += 1, R14614 += 1, R14615 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R14677 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 73] { R14679 += 1, R14617 += 1 };
  s0 -> s2 [0, 65535] { R14679 += 1, R14616 += 1, R14617 += 1 };
  s0 -> s0 [0, 65535] { R14678 += 1, R14679 += 1 };
  s0 -> s1 [77, 65535] { R14679 += 1, R14617 += 1 };
  s1 -> s1 [0, 73] { R14679 += 1, R14617 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R14679 += 1 };
  s1 -> s1 [77, 65535] { R14679 += 1, R14617 += 1 };
  s2 -> s1 [0, 73] { R14679 += 1, R14617 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R14679 += 1, R14616 += 1, R14617 += 1 };
  s2 -> s1 [77, 65535] { R14679 += 1, R14617 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s0 [0, 65535] { R14680 += 1, R14681 += 1 };
  s0 -> s1 [0, 65535] { R14681 += 1, R14619 += 1, R67 += 1 };
  s0 -> s2 [0, 65535] { R14681 += 1, R14618 += 1, R14619 += 1 };
  s1 -> s4 [0, 65535] { R14681 += 1 };
  s1 -> s1 [0, 65535] { R14681 += 1, R14619 += 1, R67 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R14681 += 1, R14619 += 1, R67 += 1 };
  s2 -> s2 [0, 65535] { R14681 += 1, R14618 += 1, R14619 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R14681 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 76] { R14683 += 1, R14621 += 1 };
  s0 -> s2 [0, 65535] { R14683 += 1, R14620 += 1, R14621 += 1 };
  s0 -> s3 [0, 65535] { R14683 += 1, R14621 += 1, R69 += 1 };
  s0 -> s0 [0, 65535] { R14682 += 1, R14683 += 1 };
  s0 -> s1 [78, 65535] { R14683 += 1, R14621 += 1 };
  s1 -> s1 [0, 76] { R14683 += 1, R14621 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R14683 += 1 };
  s1 -> s1 [78, 65535] { R14683 += 1, R14621 += 1 };
  s2 -> s1 [0, 76] { R14683 += 1, R14621 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R14683 += 1, R14620 += 1, R14621 += 1 };
  s2 -> s3 [0, 65535] { R14683 += 1, R14621 += 1, R69 += 1 };
  s2 -> s1 [78, 65535] { R14683 += 1, R14621 += 1 };
  s3 -> s1 [0, 76] { R14683 += 1, R14621 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R14683 += 1, R14621 += 1, R69 += 1 };
  s3 -> s5 [0, 65535] { R14683 += 1 };
  s3 -> s1 [78, 65535] { R14683 += 1, R14621 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R14683 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 76] { R14685 += 1, R14623 += 1, R11525 += 1 };
  s0 -> s1 [0, 65535] { R14685 += 1, R14623 += 1 };
  s0 -> s2 [0, 65535] { R14685 += 1, R14622 += 1, R14623 += 1 };
  s0 -> s0 [0, 65535] { R14684 += 1, R14685 += 1 };
  s0 -> s1 [78, 65535] { R14685 += 1, R14623 += 1, R11525 += 1 };
  s1 -> s1 [0, 76] { R14685 += 1, R14623 += 1, R11525 += 1 };
  s1 -> s1 [0, 65535] { R14685 += 1, R14623 += 1 };
  s1 -> s4 [0, 65535] { R14685 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [78, 65535] { R14685 += 1, R14623 += 1, R11525 += 1 };
  s2 -> s1 [0, 76] { R14685 += 1, R14623 += 1, R11525 += 1 };
  s2 -> s1 [0, 65535] { R14685 += 1, R14623 += 1 };
  s2 -> s2 [0, 65535] { R14685 += 1, R14622 += 1, R14623 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [78, 65535] { R14685 += 1, R14623 += 1, R11525 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R14685 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R14687 += 1, R14624 += 1, R14625 += 1 };
  s0 -> s2 [0, 65535] { R14687 += 1, R14625 += 1, R11529 += 1, R11530 += 1 };
  s0 -> s0 [0, 65535] { R14686 += 1, R14687 += 1 };
  s0 -> s3 [0, 65535] { R14687 += 1, R14625 += 1, R11530 += 1, R11531 += 1 };
  s1 -> s1 [0, 65535] { R14687 += 1, R14624 += 1, R14625 += 1 };
  s1 -> s2 [0, 65535] { R14687 += 1, R14625 += 1, R11529 += 1, R11530 += 1 };
  s1 -> s3 [0, 65535] { R14687 += 1, R14625 += 1, R11530 += 1, R11531 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R14687 += 1, R14625 += 1, R11529 += 1, R11530 += 1 };
  s2 -> s4 [0, 65535] { R14687 += 1 };
  s2 -> s3 [0, 65535] { R14687 += 1, R14625 += 1, R11530 += 1, R11531 += 1 };
  s2 -> s6 [0, 65535];
  s3 -> s4 [0, 65535] { R14687 += 1 };
  s3 -> s3 [0, 65535] { R14687 += 1, R14625 += 1, R11530 += 1, R11531 += 1 };
  s3 -> s5 [0, 65535] { R14687 += 1, R14625 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R14687 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s4 [0, 65535] { R14687 += 1 };
  s5 -> s5 [0, 65535] { R14687 += 1, R14625 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 77] { R14689 += 1, R14627 += 1, R14075 += 1 };
  s0 -> s2 [0, 65535] { R14689 += 1, R14626 += 1, R14627 += 1 };
  s0 -> s0 [0, 65535] { R14688 += 1, R14689 += 1 };
  s0 -> s3 [86, 86] { R14689 += 1, R14627 += 1, R14075 += 1 };
  s0 -> s1 [87, 65535] { R14689 += 1, R14627 += 1, R14075 += 1 };
  s1 -> s1 [0, 77] { R14689 += 1, R14627 += 1, R14075 += 1 };
  s1 -> s3 [86, 86] { R14689 += 1, R14627 += 1, R14075 += 1 };
  s1 -> s1 [87, 65535] { R14689 += 1, R14627 += 1, R14075 += 1 };
  s2 -> s1 [0, 77] { R14689 += 1, R14627 += 1, R14075 += 1 };
  s2 -> s2 [0, 65535] { R14689 += 1, R14626 += 1, R14627 += 1 };
  s2 -> s3 [86, 86] { R14689 += 1, R14627 += 1, R14075 += 1 };
  s2 -> s1 [87, 65535] { R14689 += 1, R14627 += 1, R14075 += 1 };
  s3 -> s3 [0, 77] { R14689 += 1, R14627 += 1, R14075 += 1 };
  s3 -> s3 [0, 65535] { R14689 += 1, R14627 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R14689 += 1 };
  s3 -> s3 [86, 65535] { R14689 += 1, R14627 += 1, R14075 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R14689 += 1 };
  accepting s3, s4, s5;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R14691 += 1, R14629 += 1, R14502 += 1, R14503 += 1 };
  s0 -> s2 [0, 65535] { R14691 += 1, R14629 += 1 };
  s0 -> s0 [0, 65535] { R14690 += 1, R14691 += 1 };
  s0 -> s3 [0, 65535] { R14691 += 1, R14628 += 1, R14629 += 1 };
  s1 -> s1 [0, 65535] { R14691 += 1, R14629 += 1, R14502 += 1, R14503 += 1 };
  s1 -> s2 [0, 65535] { R14691 += 1, R14629 += 1 };
  s1 -> s5 [0, 65535] { R14691 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R14691 += 1, R14629 += 1 };
  s2 -> s5 [0, 65535] { R14691 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R14691 += 1, R14629 += 1, R14502 += 1, R14503 += 1 };
  s3 -> s2 [0, 65535] { R14691 += 1, R14629 += 1 };
  s3 -> s3 [0, 65535] { R14691 += 1, R14628 += 1, R14629 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R14691 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 76] { R14693 += 1, R14631 += 1, R14611 += 1 };
  s0 -> s2 [0, 65535] { R14693 += 1, R14630 += 1, R14631 += 1 };
  s0 -> s0 [0, 65535] { R14692 += 1, R14693 += 1 };
  s0 -> s1 [0, 65535] { R14693 += 1, R14631 += 1 };
  s0 -> s3 [77, 77] { R14693 += 1, R14631 += 1, R14611 += 1 };
  s0 -> s4 [77, 77] { R14693 += 1, R14631 += 1, R14611 += 1 };
  s0 -> s1 [87, 65535] { R14693 += 1, R14631 += 1, R14611 += 1 };
  s1 -> s1 [0, 76] { R14693 += 1, R14631 += 1, R14611 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R14693 += 1 };
  s1 -> s1 [0, 65535] { R14693 += 1, R14631 += 1 };
  s1 -> s3 [77, 77] { R14693 += 1, R14631 += 1, R14611 += 1 };
  s1 -> s4 [77, 77] { R14693 += 1, R14631 += 1, R14611 += 1 };
  s1 -> s1 [87, 65535] { R14693 += 1, R14631 += 1, R14611 += 1 };
  s2 -> s1 [0, 76] { R14693 += 1, R14631 += 1, R14611 += 1 };
  s2 -> s2 [0, 65535] { R14693 += 1, R14630 += 1, R14631 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R14693 += 1, R14631 += 1 };
  s2 -> s3 [77, 77] { R14693 += 1, R14631 += 1, R14611 += 1 };
  s2 -> s4 [77, 77] { R14693 += 1, R14631 += 1, R14611 += 1 };
  s2 -> s1 [87, 65535] { R14693 += 1, R14631 += 1, R14611 += 1 };
  s3 -> s3 [0, 65535] { R14693 += 1, R14631 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R14693 += 1 };
  s4 -> s4 [0, 77] { R14693 += 1, R14631 += 1, R14611 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R14693 += 1 };
  s4 -> s4 [0, 65535] { R14693 += 1, R14631 += 1 };
  s4 -> s4 [87, 65535] { R14693 += 1, R14631 += 1, R14611 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R14693 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s0 [0, 65535] { R14694 += 1, R14695 += 1 };
  s0 -> s1 [0, 65535] { R14695 += 1, R14650 += 1, R14651 += 1 };
  s0 -> s2 [0, 65535] { R14695 += 1, R14651 += 1, R18 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R14695 += 1, R14650 += 1, R14651 += 1 };
  s1 -> s2 [0, 65535] { R14695 += 1, R14651 += 1, R18 += 1 };
  s2 -> s3 [0, 65535] { R14695 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R14695 += 1, R14651 += 1, R18 += 1 };
  s3 -> s3 [0, 65535] { R14695 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 72] { R14697 += 1, R14653 += 1 };
  s0 -> s2 [0, 65535] { R14697 += 1, R14652 += 1, R14653 += 1 };
  s0 -> s0 [0, 65535] { R14696 += 1, R14697 += 1 };
  s0 -> s3 [73, 73] { R14697 += 1, R14653 += 1 };
  s0 -> s4 [73, 73] { R14697 += 1, R14653 += 1 };
  s0 -> s5 [77, 77] { R14697 += 1, R14653 += 1 };
  s0 -> s1 [78, 65535] { R14697 += 1, R14653 += 1 };
  s1 -> s1 [0, 72] { R14697 += 1, R14653 += 1 };
  s1 -> s3 [73, 73] { R14697 += 1, R14653 += 1 };
  s1 -> s4 [73, 73] { R14697 += 1, R14653 += 1 };
  s1 -> s5 [77, 77] { R14697 += 1, R14653 += 1 };
  s1 -> s1 [78, 65535] { R14697 += 1, R14653 += 1 };
  s2 -> s1 [0, 72] { R14697 += 1, R14653 += 1 };
  s2 -> s2 [0, 65535] { R14697 += 1, R14652 += 1, R14653 += 1 };
  s2 -> s3 [73, 73] { R14697 += 1, R14653 += 1 };
  s2 -> s4 [73, 73] { R14697 += 1, R14653 += 1 };
  s2 -> s5 [77, 77] { R14697 += 1, R14653 += 1 };
  s2 -> s1 [78, 65535] { R14697 += 1, R14653 += 1 };
  s4 -> s4 [0, 73] { R14697 += 1, R14653 += 1 };
  s4 -> s7 [77, 77] { R14697 += 1, R14653 += 1 };
  s4 -> s4 [78, 65535] { R14697 += 1, R14653 += 1 };
  s5 -> s5 [0, 72] { R14697 += 1, R14653 += 1 };
  s5 -> s5 [0, 65535] { R14697 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [73, 73] { R14697 += 1, R14653 += 1 };
  s5 -> s8 [73, 73] { R14697 += 1, R14653 += 1 };
  s5 -> s5 [77, 65535] { R14697 += 1, R14653 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 73] { R14697 += 1, R14653 += 1 };
  s7 -> s7 [0, 65535] { R14697 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [77, 65535] { R14697 += 1, R14653 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R14697 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 72] { R14699 += 1, R14655 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R14698 += 1, R14699 += 1 };
  s0 -> s2 [0, 65535] { R14699 += 1, R14654 += 1, R14655 += 1 };
  s0 -> s3 [73, 73] { R14699 += 1, R14655 += 1, R66 += 1 };
  s0 -> s4 [73, 73] { R14699 += 1, R14655 += 1, R66 += 1 };
  s0 -> s1 [74, 65535] { R14699 += 1, R14655 += 1, R66 += 1 };
  s1 -> s1 [0, 72] { R14699 += 1, R14655 += 1, R66 += 1 };
  s1 -> s1 [0, 65535] { R14699 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [73, 73] { R14699 += 1, R14655 += 1, R66 += 1 };
  s1 -> s4 [73, 73] { R14699 += 1, R14655 += 1, R66 += 1 };
  s1 -> s1 [74, 65535] { R14699 += 1, R14655 += 1, R66 += 1 };
  s2 -> s1 [0, 72] { R14699 += 1, R14655 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R14699 += 1, R14654 += 1, R14655 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [73, 73] { R14699 += 1, R14655 += 1, R66 += 1 };
  s2 -> s4 [73, 73] { R14699 += 1, R14655 += 1, R66 += 1 };
  s2 -> s1 [74, 65535] { R14699 += 1, R14655 += 1, R66 += 1 };
  s3 -> s3 [0, 65535] { R14699 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R14699 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R14699 += 1, R14655 += 1, R66 += 1 };
  s5 -> s5 [0, 65535] { R14699 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 72] { R14701 += 1, R14657 += 1, R68 += 1 };
  s0 -> s0 [0, 65535] { R14700 += 1, R14701 += 1 };
  s0 -> s2 [0, 65535] { R14701 += 1, R14656 += 1, R14657 += 1 };
  s0 -> s3 [73, 73] { R14701 += 1, R14657 += 1, R68 += 1 };
  s0 -> s4 [73, 73] { R14701 += 1, R14657 += 1, R68 += 1 };
  s0 -> s1 [74, 65535] { R14701 += 1, R14657 += 1, R68 += 1 };
  s1 -> s1 [0, 72] { R14701 += 1, R14657 += 1, R68 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R14701 += 1 };
  s1 -> s3 [73, 73] { R14701 += 1, R14657 += 1, R68 += 1 };
  s1 -> s4 [73, 73] { R14701 += 1, R14657 += 1, R68 += 1 };
  s1 -> s1 [74, 65535] { R14701 += 1, R14657 += 1, R68 += 1 };
  s2 -> s1 [0, 72] { R14701 += 1, R14657 += 1, R68 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R14701 += 1, R14656 += 1, R14657 += 1 };
  s2 -> s3 [73, 73] { R14701 += 1, R14657 += 1, R68 += 1 };
  s2 -> s4 [73, 73] { R14701 += 1, R14657 += 1, R68 += 1 };
  s2 -> s1 [74, 65535] { R14701 += 1, R14657 += 1, R68 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R14701 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R14701 += 1 };
  s4 -> s4 [0, 65535] { R14701 += 1, R14657 += 1, R68 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R14701 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 72] { R14703 += 1, R14659 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s2 [0, 72] { R14703 += 1, R14659 += 1, R11523 += 1 };
  s0 -> s3 [0, 65535] { R14703 += 1, R14658 += 1, R14659 += 1 };
  s0 -> s0 [0, 65535] { R14702 += 1, R14703 += 1 };
  s0 -> s4 [73, 73] { R14703 += 1, R14659 += 1, R11523 += 1 };
  s0 -> s5 [73, 73] { R14703 += 1, R14659 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s6 [73, 73] { R14703 += 1, R14659 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s7 [73, 73] { R14703 += 1, R14659 += 1, R11523 += 1 };
  s0 -> s2 [74, 76] { R14703 += 1, R14659 += 1, R11523 += 1 };
  s0 -> s1 [74, 65535] { R14703 += 1, R14659 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s2 [78, 65535] { R14703 += 1, R14659 += 1, R11523 += 1 };
  s1 -> s1 [0, 72] { R14703 += 1, R14659 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s2 [0, 72] { R14703 += 1, R14659 += 1, R11523 += 1 };
  s1 -> s4 [73, 73] { R14703 += 1, R14659 += 1, R11523 += 1 };
  s1 -> s5 [73, 73] { R14703 += 1, R14659 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s6 [73, 73] { R14703 += 1, R14659 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s7 [73, 73] { R14703 += 1, R14659 += 1, R11523 += 1 };
  s1 -> s2 [74, 76] { R14703 += 1, R14659 += 1, R11523 += 1 };
  s1 -> s1 [74, 65535] { R14703 += 1, R14659 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s2 [78, 65535] { R14703 += 1, R14659 += 1, R11523 += 1 };
  s2 -> s2 [0, 72] { R14703 += 1, R14659 += 1, R11523 += 1 };
  s2 -> s2 [0, 65535] { R14703 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s4 [73, 73] { R14703 += 1, R14659 += 1 };
  s2 -> s7 [73, 73] { R14703 += 1, R14659 += 1 };
  s2 -> s2 [74, 76] { R14703 += 1, R14659 += 1, R11523 += 1 };
  s2 -> s2 [74, 65535] { R14703 += 1, R14659 += 1 };
  s2 -> s2 [78, 65535] { R14703 += 1, R14659 += 1, R11523 += 1 };
  s3 -> s1 [0, 72] { R14703 += 1, R14659 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s2 [0, 72] { R14703 += 1, R14659 += 1, R11523 += 1 };
  s3 -> s3 [0, 65535] { R14703 += 1, R14658 += 1, R14659 += 1 };
  s3 -> s4 [73, 73] { R14703 += 1, R14659 += 1, R11523 += 1 };
  s3 -> s5 [73, 73] { R14703 += 1, R14659 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s6 [73, 73] { R14703 += 1, R14659 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s7 [73, 73] { R14703 += 1, R14659 += 1, R11523 += 1 };
  s3 -> s2 [74, 76] { R14703 += 1, R14659 += 1, R11523 += 1 };
  s3 -> s1 [74, 65535] { R14703 += 1, R14659 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s2 [78, 65535] { R14703 += 1, R14659 += 1, R11523 += 1 };
  s4 -> s4 [0, 76] { R14703 += 1, R14659 += 1, R11523 += 1 };
  s4 -> s4 [0, 65535] { R14703 += 1, R14659 += 1 };
  s4 -> s9 [0, 65535] { R14703 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s4 [78, 65535] { R14703 += 1, R14659 += 1, R11523 += 1 };
  s5 -> s4 [0, 76] { R14703 += 1, R14659 += 1, R11523 += 1 };
  s5 -> s5 [0, 65535] { R14703 += 1, R14659 += 1, R11522 += 1, R11523 += 1 };
  s5 -> s4 [78, 65535] { R14703 += 1, R14659 += 1, R11523 += 1 };
  s7 -> s7 [0, 65535] { R14703 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R14703 += 1 };
  s9 -> s8 [0, 65535];
  accepting s4, s8, s2, s9, s7;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 72] { R14705 += 1, R14661 += 1, R11526 += 1, R11527 += 1 };
  s0 -> s2 [0, 65535] { R14705 += 1, R14660 += 1, R14661 += 1 };
  s0 -> s0 [0, 65535] { R14704 += 1, R14705 += 1 };
  s0 -> s3 [73, 73] { R14705 += 1, R14661 += 1, R11526 += 1, R11527 += 1 };
  s0 -> s4 [73, 73] { R14705 += 1, R14661 += 1, R11526 += 1, R11527 += 1 };
  s0 -> s1 [74, 65535] { R14705 += 1, R14661 += 1, R11526 += 1, R11527 += 1 };
  s1 -> s1 [0, 72] { R14705 += 1, R14661 += 1, R11526 += 1, R11527 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R14705 += 1 };
  s1 -> s3 [73, 73] { R14705 += 1, R14661 += 1, R11526 += 1, R11527 += 1 };
  s1 -> s4 [73, 73] { R14705 += 1, R14661 += 1, R11526 += 1, R11527 += 1 };
  s1 -> s1 [74, 65535] { R14705 += 1, R14661 += 1, R11526 += 1, R11527 += 1 };
  s2 -> s1 [0, 72] { R14705 += 1, R14661 += 1, R11526 += 1, R11527 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R14705 += 1, R14660 += 1, R14661 += 1 };
  s2 -> s3 [73, 73] { R14705 += 1, R14661 += 1, R11526 += 1, R11527 += 1 };
  s2 -> s4 [73, 73] { R14705 += 1, R14661 += 1, R11526 += 1, R11527 += 1 };
  s2 -> s1 [74, 65535] { R14705 += 1, R14661 += 1, R11526 += 1, R11527 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R14705 += 1 };
  s3 -> s3 [0, 65535] { R14705 += 1, R14661 += 1, R11526 += 1, R11527 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R14705 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R14705 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 72] { R14707 += 1, R14663 += 1, R14073 += 1 };
  s0 -> s2 [0, 72] { R14707 += 1, R14663 += 1, R14072 += 1, R14073 += 1 };
  s0 -> s3 [0, 65535] { R14707 += 1, R14662 += 1, R14663 += 1 };
  s0 -> s0 [0, 65535] { R14706 += 1, R14707 += 1 };
  s0 -> s4 [73, 73] { R14707 += 1, R14663 += 1, R14073 += 1 };
  s0 -> s5 [73, 73] { R14707 += 1, R14663 += 1, R14072 += 1, R14073 += 1 };
  s0 -> s6 [73, 73] { R14707 += 1, R14663 += 1, R14072 += 1, R14073 += 1 };
  s0 -> s7 [73, 73] { R14707 += 1, R14663 += 1, R14073 += 1 };
  s0 -> s1 [74, 77] { R14707 += 1, R14663 += 1, R14073 += 1 };
  s0 -> s2 [74, 65535] { R14707 += 1, R14663 += 1, R14072 += 1, R14073 += 1 };
  s0 -> s1 [87, 65535] { R14707 += 1, R14663 += 1, R14073 += 1 };
  s1 -> s1 [0, 72] { R14707 += 1, R14663 += 1, R14073 += 1 };
  s1 -> s1 [0, 65535] { R14707 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s4 [73, 73] { R14707 += 1, R14663 += 1, R14073 += 1 };
  s1 -> s7 [73, 73] { R14707 += 1, R14663 += 1, R14073 += 1 };
  s1 -> s1 [74, 77] { R14707 += 1, R14663 += 1, R14073 += 1 };
  s1 -> s1 [87, 65535] { R14707 += 1, R14663 += 1, R14073 += 1 };
  s2 -> s1 [0, 72] { R14707 += 1, R14663 += 1, R14073 += 1 };
  s2 -> s2 [0, 72] { R14707 += 1, R14663 += 1, R14072 += 1, R14073 += 1 };
  s2 -> s4 [73, 73] { R14707 += 1, R14663 += 1, R14073 += 1 };
  s2 -> s5 [73, 73] { R14707 += 1, R14663 += 1, R14072 += 1, R14073 += 1 };
  s2 -> s6 [73, 73] { R14707 += 1, R14663 += 1, R14072 += 1, R14073 += 1 };
  s2 -> s7 [73, 73] { R14707 += 1, R14663 += 1, R14073 += 1 };
  s2 -> s1 [74, 77] { R14707 += 1, R14663 += 1, R14073 += 1 };
  s2 -> s2 [74, 65535] { R14707 += 1, R14663 += 1, R14072 += 1, R14073 += 1 };
  s2 -> s1 [87, 65535] { R14707 += 1, R14663 += 1, R14073 += 1 };
  s3 -> s1 [0, 72] { R14707 += 1, R14663 += 1, R14073 += 1 };
  s3 -> s2 [0, 72] { R14707 += 1, R14663 += 1, R14072 += 1, R14073 += 1 };
  s3 -> s3 [0, 65535] { R14707 += 1, R14662 += 1, R14663 += 1 };
  s3 -> s4 [73, 73] { R14707 += 1, R14663 += 1, R14073 += 1 };
  s3 -> s5 [73, 73] { R14707 += 1, R14663 += 1, R14072 += 1, R14073 += 1 };
  s3 -> s6 [73, 73] { R14707 += 1, R14663 += 1, R14072 += 1, R14073 += 1 };
  s3 -> s7 [73, 73] { R14707 += 1, R14663 += 1, R14073 += 1 };
  s3 -> s1 [74, 77] { R14707 += 1, R14663 += 1, R14073 += 1 };
  s3 -> s2 [74, 65535] { R14707 += 1, R14663 += 1, R14072 += 1, R14073 += 1 };
  s3 -> s1 [87, 65535] { R14707 += 1, R14663 += 1, R14073 += 1 };
  s4 -> s4 [0, 77] { R14707 += 1, R14663 += 1, R14073 += 1 };
  s4 -> s4 [0, 65535] { R14707 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s4 [87, 65535] { R14707 += 1, R14663 += 1, R14073 += 1 };
  s6 -> s4 [0, 77] { R14707 += 1, R14663 += 1, R14073 += 1 };
  s6 -> s6 [0, 65535] { R14707 += 1, R14663 += 1, R14072 += 1, R14073 += 1 };
  s6 -> s4 [87, 65535] { R14707 += 1, R14663 += 1, R14073 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R14707 += 1 };
  s8 -> s8 [0, 65535];
  accepting s1, s4, s7, s8;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 72] { R14709 += 1, R14665 += 1, R14498 += 1, R14499 += 1 };
  s0 -> s2 [0, 72] { R14709 += 1, R14665 += 1, R14499 += 1, R14500 += 1 };
  s0 -> s0 [0, 65535] { R14708 += 1, R14709 += 1 };
  s0 -> s3 [0, 65535] { R14709 += 1, R14664 += 1, R14665 += 1 };
  s0 -> s4 [73, 73] { R14709 += 1, R14665 += 1, R14499 += 1, R14500 += 1 };
  s0 -> s5 [73, 73] { R14709 += 1, R14665 += 1, R14499 += 1, R14500 += 1 };
  s0 -> s6 [73, 73] { R14709 += 1, R14665 += 1, R14498 += 1, R14499 += 1 };
  s0 -> s7 [73, 73] { R14709 += 1, R14665 += 1, R14498 += 1, R14499 += 1 };
  s0 -> s1 [74, 65535] { R14709 += 1, R14665 += 1, R14498 += 1, R14499 += 1 };
  s0 -> s2 [74, 65535] { R14709 += 1, R14665 += 1, R14499 += 1, R14500 += 1 };
  s1 -> s1 [0, 72] { R14709 += 1, R14665 += 1, R14498 += 1, R14499 += 1 };
  s1 -> s2 [0, 72] { R14709 += 1, R14665 += 1, R14499 += 1, R14500 += 1 };
  s1 -> s4 [73, 73] { R14709 += 1, R14665 += 1, R14499 += 1, R14500 += 1 };
  s1 -> s5 [73, 73] { R14709 += 1, R14665 += 1, R14499 += 1, R14500 += 1 };
  s1 -> s6 [73, 73] { R14709 += 1, R14665 += 1, R14498 += 1, R14499 += 1 };
  s1 -> s7 [73, 73] { R14709 += 1, R14665 += 1, R14498 += 1, R14499 += 1 };
  s1 -> s1 [74, 65535] { R14709 += 1, R14665 += 1, R14498 += 1, R14499 += 1 };
  s1 -> s2 [74, 65535] { R14709 += 1, R14665 += 1, R14499 += 1, R14500 += 1 };
  s2 -> s2 [0, 72] { R14709 += 1, R14665 += 1, R14499 += 1, R14500 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R14709 += 1 };
  s2 -> s4 [73, 73] { R14709 += 1, R14665 += 1, R14499 += 1, R14500 += 1 };
  s2 -> s5 [73, 73] { R14709 += 1, R14665 += 1, R14499 += 1, R14500 += 1 };
  s2 -> s2 [74, 65535] { R14709 += 1, R14665 += 1, R14499 += 1, R14500 += 1 };
  s3 -> s1 [0, 72] { R14709 += 1, R14665 += 1, R14498 += 1, R14499 += 1 };
  s3 -> s2 [0, 72] { R14709 += 1, R14665 += 1, R14499 += 1, R14500 += 1 };
  s3 -> s3 [0, 65535] { R14709 += 1, R14664 += 1, R14665 += 1 };
  s3 -> s4 [73, 73] { R14709 += 1, R14665 += 1, R14499 += 1, R14500 += 1 };
  s3 -> s5 [73, 73] { R14709 += 1, R14665 += 1, R14499 += 1, R14500 += 1 };
  s3 -> s6 [73, 73] { R14709 += 1, R14665 += 1, R14498 += 1, R14499 += 1 };
  s3 -> s7 [73, 73] { R14709 += 1, R14665 += 1, R14498 += 1, R14499 += 1 };
  s3 -> s1 [74, 65535] { R14709 += 1, R14665 += 1, R14498 += 1, R14499 += 1 };
  s3 -> s2 [74, 65535] { R14709 += 1, R14665 += 1, R14499 += 1, R14500 += 1 };
  s4 -> s4 [0, 65535] { R14709 += 1, R14665 += 1, R14499 += 1, R14500 += 1 };
  s4 -> s9 [0, 65535] { R14709 += 1 };
  s4 -> s8 [0, 65535];
  s5 -> s5 [0, 65535] { R14709 += 1 };
  s5 -> s8 [0, 65535];
  s6 -> s4 [0, 65535] { R14709 += 1, R14665 += 1, R14499 += 1, R14500 += 1 };
  s6 -> s6 [0, 65535] { R14709 += 1, R14665 += 1, R14498 += 1, R14499 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R14709 += 1 };
  s9 -> s8 [0, 65535];
  accepting s4, s8, s5, s2, s9;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 72] { R14711 += 1, R14667 += 1, R14609 += 1 };
  s0 -> s2 [0, 72] { R14711 += 1, R14667 += 1, R14608 += 1, R14609 += 1 };
  s0 -> s3 [0, 65535] { R14711 += 1, R14666 += 1, R14667 += 1 };
  s0 -> s0 [0, 65535] { R14710 += 1, R14711 += 1 };
  s0 -> s4 [73, 73] { R14711 += 1, R14667 += 1, R14609 += 1 };
  s0 -> s5 [73, 73] { R14711 += 1, R14667 += 1, R14609 += 1 };
  s0 -> s6 [73, 73] { R14711 += 1, R14667 += 1, R14608 += 1, R14609 += 1 };
  s0 -> s7 [73, 73] { R14711 += 1, R14667 += 1, R14608 += 1, R14609 += 1 };
  s0 -> s1 [74, 76] { R14711 += 1, R14667 += 1, R14609 += 1 };
  s0 -> s2 [74, 65535] { R14711 += 1, R14667 += 1, R14608 += 1, R14609 += 1 };
  s0 -> s1 [87, 65535] { R14711 += 1, R14667 += 1, R14609 += 1 };
  s1 -> s1 [0, 72] { R14711 += 1, R14667 += 1, R14609 += 1 };
  s1 -> s1 [0, 65535] { R14711 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s4 [73, 73] { R14711 += 1, R14667 += 1 };
  s1 -> s5 [73, 73] { R14711 += 1, R14667 += 1 };
  s1 -> s1 [74, 76] { R14711 += 1, R14667 += 1, R14609 += 1 };
  s1 -> s1 [74, 65535] { R14711 += 1, R14667 += 1 };
  s1 -> s1 [87, 65535] { R14711 += 1, R14667 += 1, R14609 += 1 };
  s2 -> s1 [0, 72] { R14711 += 1, R14667 += 1, R14609 += 1 };
  s2 -> s2 [0, 72] { R14711 += 1, R14667 += 1, R14608 += 1, R14609 += 1 };
  s2 -> s4 [73, 73] { R14711 += 1, R14667 += 1, R14609 += 1 };
  s2 -> s5 [73, 73] { R14711 += 1, R14667 += 1, R14609 += 1 };
  s2 -> s6 [73, 73] { R14711 += 1, R14667 += 1, R14608 += 1, R14609 += 1 };
  s2 -> s7 [73, 73] { R14711 += 1, R14667 += 1, R14608 += 1, R14609 += 1 };
  s2 -> s1 [74, 76] { R14711 += 1, R14667 += 1, R14609 += 1 };
  s2 -> s2 [74, 65535] { R14711 += 1, R14667 += 1, R14608 += 1, R14609 += 1 };
  s2 -> s1 [87, 65535] { R14711 += 1, R14667 += 1, R14609 += 1 };
  s3 -> s1 [0, 72] { R14711 += 1, R14667 += 1, R14609 += 1 };
  s3 -> s2 [0, 72] { R14711 += 1, R14667 += 1, R14608 += 1, R14609 += 1 };
  s3 -> s3 [0, 65535] { R14711 += 1, R14666 += 1, R14667 += 1 };
  s3 -> s4 [73, 73] { R14711 += 1, R14667 += 1, R14609 += 1 };
  s3 -> s5 [73, 73] { R14711 += 1, R14667 += 1, R14609 += 1 };
  s3 -> s6 [73, 73] { R14711 += 1, R14667 += 1, R14608 += 1, R14609 += 1 };
  s3 -> s7 [73, 73] { R14711 += 1, R14667 += 1, R14608 += 1, R14609 += 1 };
  s3 -> s1 [74, 76] { R14711 += 1, R14667 += 1, R14609 += 1 };
  s3 -> s2 [74, 65535] { R14711 += 1, R14667 += 1, R14608 += 1, R14609 += 1 };
  s3 -> s1 [87, 65535] { R14711 += 1, R14667 += 1, R14609 += 1 };
  s4 -> s4 [0, 76] { R14711 += 1, R14667 += 1, R14609 += 1 };
  s4 -> s4 [0, 65535] { R14711 += 1, R14667 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s9 [0, 65535] { R14711 += 1 };
  s4 -> s4 [87, 65535] { R14711 += 1, R14667 += 1, R14609 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s5 [0, 65535] { R14711 += 1 };
  s7 -> s4 [0, 76] { R14711 += 1, R14667 += 1, R14609 += 1 };
  s7 -> s7 [0, 65535] { R14711 += 1, R14667 += 1, R14608 += 1, R14609 += 1 };
  s7 -> s4 [87, 65535] { R14711 += 1, R14667 += 1, R14609 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R14711 += 1 };
  accepting s4, s8, s5, s9, s1;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
synchronised {  // Automata constraining P54
automaton P54_0 {
  init s0;
  s0 -> s1 [109, 109];
  accepting s1;
};
};
constraint R1 = R14627 && R2 = R14711 && R20 - R14711 = -1 && R21 = R14711 && R22 - R14711 = -1 && R23 = R14711 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R14075 + -1*R14073 - R53 = 0 && R52 + R14074 + R14072 = 0 && R14626 = 0 && R14652 = 0 && R14653 = 0 && R14658 = 0 && R14659 = 0 && R14662 = 0 && R14663 = 0 && R14664 = 0 && R14665 = 0 && R14666 = 0 && R14667 = 0 && R14668 = 0 && R14669 = R14711 && R14670 = 0 && R14671 = R14711 && R14672 = 0 && R14673 = R14711 && R14674 = 0 && R14675 = R14711 && R14676 = 0 && R14677 = R14711 && R14678 = 0 && R14679 = R14711 && R14680 = 0 && R14681 = R14711 && R14682 = 0 && R14683 = R14711 && R14684 = 0 && R14685 = R14711 && R14686 = 0 && R14687 = R14711 && R14688 = 0 && R14689 = R14711 && R14690 = 0 && R14691 = R14711 && R14692 = 0 && R14693 = R14711 && R14694 = 0 && R14695 = R14711 && R14696 = 0 && R14697 = R14711 && R14698 = 0 && R14699 = R14711 && R14700 = 0 && R14701 = R14711 && R14702 = 0 && R14703 = R14711 && R14704 = 0 && R14705 = R14711 && R14706 = 0 && R14707 = R14711 && R14708 = 0 && R14709 = R14711 && R14710 = 0 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R14075 + -1*R14073 - R53 < 1 && -1 < R14627 && 0 < R14711 && (R48 + R11531 + R11528 != 0 || ((R42 + R11524 + R11522 != 0 || R43 + R11525 + R11523 + -1*R14075 + -1*R14073 - R53 = 0 || R53 + R14075 + R14073 < 1) && (R42 + R11524 + R11522 = 0 || R53 + R14075 + R14073 < 1))) && (R48 + R11531 + R11528 != 0 || ((R46 + R11529 + R11526 != 0 || R47 + R11530 + R11527 + -1*R14075 + -1*R14073 - R53 = 0 || R53 + R14075 + R14073 < 1) && (R46 + R11529 + R11526 = 0 || R53 + R14075 + R14073 < 1))) && (R14612 != 0 || R14613 = R14627 || (R17 = 0 && R14627 = 0)) && (R14614 != 0 || R14615 = R14627 || (R17 = 0 && R14627 = 0)) && (R14616 != 0 || R14617 = R14627 || (R17 = 0 && R14627 = 0)) && (R14618 != 0 || R14619 = R14627 || (R17 = 0 && R14627 = 0)) && (R14620 != 0 || R14621 = R14627 || (R17 = 0 && R14627 = 0)) && (R14622 != 0 || R14623 = R14627 || (R17 = 0 && R14627 = 0)) && (R14624 != 0 || R14625 = R14627 || (R17 = 0 && R14627 = 0)) && (R14628 != 0 || R14627 = R14629 || (R17 = 0 && R14627 = 0)) && (R14630 != 0 || R14627 = R14631 || (R17 = 0 && R14627 = 0)) && (R18 = 0 || (R14650 = 0 && R14651 = 0)) && (R18 = 0 || (R14654 = 0 && R14655 = 0)) && (R18 = 0 || (R14656 = 0 && R14657 = 0)) && (R18 = 0 || (R14660 = 0 && R14661 = 0)) && (R19 = 0 || (R14632 = 0 && R14633 = 0)) && (R19 = 0 || (R14634 = 0 && R14635 = 0)) && (R19 = 0 || (R14636 = 0 && R14637 = 0)) && (R19 = 0 || (R14638 = 0 && R14639 = 0)) && (R19 = 0 || (R14640 = 0 && R14641 = 0)) && (R19 = 0 || (R14642 = 0 && R14643 = 0)) && (R19 = 0 || (R14644 = 0 && R14645 = 0)) && (R19 = 0 || (R14646 = 0 && R14647 = 0)) && (R19 = 0 || (R14648 = 0 && R14649 = 0)) && (R48 + R11531 + R11528 = 0 || (R42 + R11524 + R11522 = 0 && R43 + R11525 + R11523 + -1*R14075 + -1*R14073 - R53 = 0)) && (R48 + R11531 + R11528 = 0 || (R46 + R11529 + R11526 = 0 && R47 + R11530 + R11527 + -1*R14075 + -1*R14073 - R53 = 0)) && (R58 + R14503 + R14500 = 0 || (R56 + R14501 + R14498 = 0 && R57 + R14502 + R14499 = 0)) && (R58 + R14503 + R14500 = 0 || (R62 + R14610 + R14608 = 0 && R63 + R14611 + R14609 = 0)) && (R14612 = 0 || (R17 = 0 && R14627 = 0)) && (R14614 = 0 || (R17 = 0 && R14627 = 0)) && (R14616 = 0 || (R17 = 0 && R14627 = 0)) && (R14618 = 0 || (R17 = 0 && R14627 = 0)) && (R14620 = 0 || (R17 = 0 && R14627 = 0)) && (R14622 = 0 || (R17 = 0 && R14627 = 0)) && (R14624 = 0 || (R17 = 0 && R14627 = 0)) && (R14628 = 0 || (R17 = 0 && R14627 = 0)) && (R14630 = 0 || (R17 = 0 && R14627 = 0));
// End of Parikh automata intersection problem
