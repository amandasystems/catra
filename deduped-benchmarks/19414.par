// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R12, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R3890, R3891, R3892, R3893, R3894, R3895, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R6436, R6437, R6438, R6439, R66, R67, R68, R69, R70, R71, R72, R7284, R7285, R7286, R7287, R7288, R7289, R7290, R7291, R7292, R7293, R7294, R7295, R7296, R7297, R7298, R7299, R73, R7300, R7301, R7302, R7303, R7304, R7305, R7306, R7307, R7308, R7309, R7310, R7311, R7312, R7313, R7314, R7315, R7316, R7317, R7318, R7319, R7320, R7321, R7322, R7323, R7324, R7325, R7326, R7327, R7328, R7329, R7330, R7331, R7332, R7333, R7334, R7335, R7336, R7337, R7338, R7339, R7340, R7341, R7342, R7343, R7344, R7345, R7346, R7347, R7348, R7349, R7350, R7351, R7352, R7353, R7354, R7355, R7356, R7357, R7358, R7359, R7360, R7361, R7362, R7363, R7364, R7365, R7366, R7367, R7368, R7369, R7370, R7371, R7372, R7373, R7374, R7375, R7376, R7377, R7378, R7379, R7380, R7381, R7382, R7383, R7384, R7385, R7386, R7387, R7388, R7389, R7390, R7391, R7392, R7393, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 72];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [73, 73];
  s0 -> s1 [74, 65535];
  s1 -> s1 [0, 72];
  s1 -> s2 [73, 73];
  s1 -> s1 [74, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R21 += 1 };
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R25 += 1 };
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R7314 += 1, R7315 += 1 };
  s0 -> s1 [0, 65535] { R7315 += 1, R19 += 1 };
  s1 -> s1 [0, 65535] { R7315 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 72] { R7317 += 1 };
  s0 -> s0 [0, 65535] { R7316 += 1, R7317 += 1 };
  s0 -> s2 [73, 73] { R7317 += 1 };
  s0 -> s3 [73, 73] { R7317 += 1 };
  s0 -> s1 [78, 65535] { R7317 += 1 };
  s1 -> s1 [0, 72] { R7317 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R7317 += 1 };
  s1 -> s3 [73, 73] { R7317 += 1 };
  s1 -> s1 [78, 65535] { R7317 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 73] { R7317 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [78, 65535] { R7317 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 72] { R7319 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R7318 += 1, R7319 += 1 };
  s0 -> s2 [73, 73] { R7319 += 1, R38 += 1 };
  s0 -> s3 [73, 73] { R7319 += 1, R38 += 1 };
  s0 -> s1 [74, 65535] { R7319 += 1, R38 += 1 };
  s1 -> s1 [0, 72] { R7319 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R7319 += 1, R38 += 1 };
  s1 -> s3 [73, 73] { R7319 += 1, R38 += 1 };
  s1 -> s1 [74, 65535] { R7319 += 1, R38 += 1 };
  s2 -> s2 [0, 65535] { R7319 += 1, R38 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 72] { R7321 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R7320 += 1, R7321 += 1 };
  s0 -> s2 [73, 73] { R7321 += 1, R40 += 1 };
  s0 -> s3 [73, 73] { R7321 += 1, R40 += 1 };
  s0 -> s1 [74, 65535] { R7321 += 1, R40 += 1 };
  s1 -> s1 [0, 72] { R7321 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R7321 += 1, R40 += 1 };
  s1 -> s3 [73, 73] { R7321 += 1, R40 += 1 };
  s1 -> s1 [74, 65535] { R7321 += 1, R40 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R7321 += 1, R40 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 72] { R7323 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R7322 += 1, R7323 += 1 };
  s0 -> s2 [73, 73] { R7323 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [73, 73] { R7323 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [74, 65535] { R7323 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 72] { R7323 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R7323 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [73, 73] { R7323 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [74, 65535] { R7323 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7323 += 1, R42 += 1, R43 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 72] { R7325 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R7324 += 1, R7325 += 1 };
  s0 -> s2 [73, 73] { R7325 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [73, 73] { R7325 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [74, 65535] { R7325 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 72] { R7325 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R7325 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [73, 73] { R7325 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [74, 65535] { R7325 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535] { R7325 += 1, R46 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 72] { R7327 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R7326 += 1, R7327 += 1 };
  s0 -> s2 [73, 73] { R7327 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [73, 73] { R7327 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [74, 65535] { R7327 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 72] { R7327 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R7327 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [73, 73] { R7327 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [74, 65535] { R7327 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7327 += 1, R52 += 1, R53 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 72] { R7329 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R7328 += 1, R7329 += 1 };
  s0 -> s2 [73, 73] { R7329 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [73, 73] { R7329 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [74, 65535] { R7329 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 72] { R7329 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R7329 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [73, 73] { R7329 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [74, 65535] { R7329 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7329 += 1, R56 += 1, R57 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 72] { R7331 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R7330 += 1, R7331 += 1 };
  s0 -> s2 [73, 73] { R7331 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [73, 73] { R7331 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [74, 65535] { R7331 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 72] { R7331 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R7331 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [73, 73] { R7331 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [74, 65535] { R7331 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R7331 += 1, R62 += 1, R63 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 72] { R7351 += 1 };
  s0 -> s0 [0, 65535] { R7350 += 1, R7351 += 1 };
  s0 -> s2 [73, 73] { R7351 += 1 };
  s0 -> s1 [74, 65535] { R7351 += 1 };
  s1 -> s1 [0, 72] { R7351 += 1 };
  s1 -> s2 [73, 73] { R7351 += 1 };
  s1 -> s1 [74, 65535] { R7351 += 1 };
  s2 -> s2 [0, 65535] { R7351 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R7352 += 1, R7353 += 1 };
  s0 -> s1 [0, 65535] { R7353 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R7353 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 72] { R7355 += 1 };
  s0 -> s0 [0, 65535] { R7354 += 1, R7355 += 1 };
  s0 -> s2 [0, 65535] { R7355 += 1, R8 += 1 };
  s0 -> s3 [73, 73] { R7355 += 1 };
  s0 -> s1 [74, 65535] { R7355 += 1 };
  s1 -> s1 [0, 72] { R7355 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [73, 73] { R7355 += 1 };
  s1 -> s1 [74, 65535] { R7355 += 1 };
  s2 -> s1 [0, 72] { R7355 += 1 };
  s2 -> s2 [0, 65535] { R7355 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [73, 73] { R7355 += 1 };
  s2 -> s1 [74, 65535] { R7355 += 1 };
  s3 -> s3 [0, 65535] { R7355 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 72] { R7357 += 1, R7295 += 1 };
  s0 -> s0 [0, 65535] { R7356 += 1, R7357 += 1 };
  s0 -> s2 [0, 65535] { R7357 += 1, R7294 += 1, R7295 += 1 };
  s0 -> s1 [74, 65535] { R7357 += 1, R7295 += 1 };
  s1 -> s1 [0, 72] { R7357 += 1, R7295 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R7357 += 1 };
  s1 -> s1 [74, 65535] { R7357 += 1, R7295 += 1 };
  s2 -> s1 [0, 72] { R7357 += 1, R7295 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R7357 += 1, R7294 += 1, R7295 += 1 };
  s2 -> s1 [74, 65535] { R7357 += 1, R7295 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R7359 += 1, R7296 += 1, R7297 += 1 };
  s0 -> s0 [0, 65535] { R7358 += 1, R7359 += 1 };
  s0 -> s2 [0, 65535] { R7359 += 1, R7297 += 1, R17 += 1 };
  s1 -> s1 [0, 65535] { R7359 += 1, R7296 += 1, R7297 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R7359 += 1, R7297 += 1, R17 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R7359 += 1 };
  s2 -> s2 [0, 65535] { R7359 += 1, R7297 += 1, R17 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7359 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 73] { R7361 += 1, R7299 += 1 };
  s0 -> s0 [0, 65535] { R7360 += 1, R7361 += 1 };
  s0 -> s2 [0, 65535] { R7361 += 1, R7298 += 1, R7299 += 1 };
  s0 -> s1 [77, 65535] { R7361 += 1, R7299 += 1 };
  s1 -> s1 [0, 73] { R7361 += 1, R7299 += 1 };
  s1 -> s1 [0, 65535] { R7361 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [77, 65535] { R7361 += 1, R7299 += 1 };
  s2 -> s1 [0, 73] { R7361 += 1, R7299 += 1 };
  s2 -> s2 [0, 65535] { R7361 += 1, R7298 += 1, R7299 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [77, 65535] { R7361 += 1, R7299 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R7363 += 1, R7301 += 1, R67 += 1 };
  s0 -> s0 [0, 65535] { R7362 += 1, R7363 += 1 };
  s0 -> s2 [0, 65535] { R7363 += 1, R7300 += 1, R7301 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R7363 += 1 };
  s1 -> s1 [0, 65535] { R7363 += 1, R7301 += 1, R67 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R7363 += 1, R7301 += 1, R67 += 1 };
  s2 -> s2 [0, 65535] { R7363 += 1, R7300 += 1, R7301 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7363 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 76] { R7365 += 1, R7303 += 1 };
  s0 -> s2 [0, 65535] { R7365 += 1, R7303 += 1, R69 += 1 };
  s0 -> s3 [0, 65535] { R7365 += 1, R7302 += 1, R7303 += 1 };
  s0 -> s0 [0, 65535] { R7364 += 1, R7365 += 1 };
  s0 -> s1 [78, 65535] { R7365 += 1, R7303 += 1 };
  s1 -> s1 [0, 76] { R7365 += 1, R7303 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R7365 += 1 };
  s1 -> s1 [78, 65535] { R7365 += 1, R7303 += 1 };
  s2 -> s1 [0, 76] { R7365 += 1, R7303 += 1 };
  s2 -> s2 [0, 65535] { R7365 += 1, R7303 += 1, R69 += 1 };
  s2 -> s5 [0, 65535] { R7365 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [78, 65535] { R7365 += 1, R7303 += 1 };
  s3 -> s1 [0, 76] { R7365 += 1, R7303 += 1 };
  s3 -> s2 [0, 65535] { R7365 += 1, R7303 += 1, R69 += 1 };
  s3 -> s3 [0, 65535] { R7365 += 1, R7302 += 1, R7303 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [78, 65535] { R7365 += 1, R7303 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R7365 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 76] { R7367 += 1, R7305 += 1, R73 += 1 };
  s0 -> s0 [0, 65535] { R7366 += 1, R7367 += 1 };
  s0 -> s2 [0, 65535] { R7367 += 1, R7304 += 1, R7305 += 1 };
  s0 -> s3 [0, 65535] { R7367 += 1, R7305 += 1, R72 += 1, R73 += 1 };
  s0 -> s1 [78, 65535] { R7367 += 1, R7305 += 1, R73 += 1 };
  s1 -> s1 [0, 76] { R7367 += 1, R7305 += 1, R73 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R7367 += 1, R7305 += 1 };
  s1 -> s5 [0, 65535] { R7367 += 1 };
  s1 -> s1 [78, 65535] { R7367 += 1, R7305 += 1, R73 += 1 };
  s2 -> s1 [0, 76] { R7367 += 1, R7305 += 1, R73 += 1 };
  s2 -> s2 [0, 65535] { R7367 += 1, R7304 += 1, R7305 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R7367 += 1, R7305 += 1, R72 += 1, R73 += 1 };
  s2 -> s1 [78, 65535] { R7367 += 1, R7305 += 1, R73 += 1 };
  s3 -> s1 [0, 76] { R7367 += 1, R7305 += 1, R73 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7367 += 1, R7305 += 1, R72 += 1, R73 += 1 };
  s3 -> s5 [0, 65535] { R7367 += 1 };
  s3 -> s1 [78, 65535] { R7367 += 1, R7305 += 1, R73 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R7367 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R7369 += 1, R7307 += 1 };
  s0 -> s2 [0, 65535] { R7369 += 1, R7307 += 1, R3894 += 1, R3895 += 1 };
  s0 -> s3 [0, 65535] { R7369 += 1, R7306 += 1, R7307 += 1 };
  s0 -> s0 [0, 65535] { R7368 += 1, R7369 += 1 };
  s1 -> s1 [0, 65535] { R7369 += 1, R7307 += 1 };
  s1 -> s5 [0, 65535] { R7369 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R7369 += 1, R7307 += 1 };
  s2 -> s5 [0, 65535] { R7369 += 1 };
  s2 -> s2 [0, 65535] { R7369 += 1, R7307 += 1, R3894 += 1, R3895 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R7369 += 1, R7307 += 1 };
  s3 -> s2 [0, 65535] { R7369 += 1, R7307 += 1, R3894 += 1, R3895 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7369 += 1, R7306 += 1, R7307 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R7369 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 77] { R7371 += 1, R7309 += 1, R6439 += 1 };
  s0 -> s2 [0, 65535] { R7371 += 1, R7308 += 1, R7309 += 1 };
  s0 -> s0 [0, 65535] { R7370 += 1, R7371 += 1 };
  s0 -> s3 [86, 86] { R7371 += 1, R7309 += 1, R6439 += 1 };
  s0 -> s1 [87, 65535] { R7371 += 1, R7309 += 1, R6439 += 1 };
  s1 -> s1 [0, 77] { R7371 += 1, R7309 += 1, R6439 += 1 };
  s1 -> s3 [86, 86] { R7371 += 1, R7309 += 1, R6439 += 1 };
  s1 -> s1 [87, 65535] { R7371 += 1, R7309 += 1, R6439 += 1 };
  s2 -> s1 [0, 77] { R7371 += 1, R7309 += 1, R6439 += 1 };
  s2 -> s2 [0, 65535] { R7371 += 1, R7308 += 1, R7309 += 1 };
  s2 -> s3 [86, 86] { R7371 += 1, R7309 += 1, R6439 += 1 };
  s2 -> s1 [87, 65535] { R7371 += 1, R7309 += 1, R6439 += 1 };
  s3 -> s3 [0, 77] { R7371 += 1, R7309 += 1, R6439 += 1 };
  s3 -> s3 [0, 65535] { R7371 += 1, R7309 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R7371 += 1 };
  s3 -> s3 [86, 65535] { R7371 += 1, R7309 += 1, R6439 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R7371 += 1 };
  accepting s3, s4, s5;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R7373 += 1, R7310 += 1, R7311 += 1 };
  s0 -> s2 [0, 65535] { R7373 += 1, R7311 += 1 };
  s0 -> s0 [0, 65535] { R7372 += 1, R7373 += 1 };
  s1 -> s1 [0, 65535] { R7373 += 1, R7310 += 1, R7311 += 1 };
  s1 -> s2 [0, 65535] { R7373 += 1, R7311 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R7373 += 1, R7311 += 1 };
  s2 -> s3 [0, 65535] { R7373 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7373 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 76] { R7375 += 1, R7313 += 1, R7293 += 1 };
  s0 -> s2 [0, 65535] { R7375 += 1, R7312 += 1, R7313 += 1 };
  s0 -> s3 [0, 65535] { R7375 += 1, R7313 += 1, R7292 += 1, R7293 += 1 };
  s0 -> s0 [0, 65535] { R7374 += 1, R7375 += 1 };
  s0 -> s4 [77, 77] { R7375 += 1, R7313 += 1, R7293 += 1 };
  s0 -> s5 [77, 77] { R7375 += 1, R7313 += 1, R7293 += 1 };
  s0 -> s1 [87, 65535] { R7375 += 1, R7313 += 1, R7293 += 1 };
  s1 -> s1 [0, 76] { R7375 += 1, R7313 += 1, R7293 += 1 };
  s1 -> s6 [0, 65535] { R7375 += 1 };
  s1 -> s1 [0, 65535] { R7375 += 1, R7313 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s4 [77, 77] { R7375 += 1, R7313 += 1, R7293 += 1 };
  s1 -> s5 [77, 77] { R7375 += 1, R7313 += 1, R7293 += 1 };
  s1 -> s1 [87, 65535] { R7375 += 1, R7313 += 1, R7293 += 1 };
  s2 -> s1 [0, 76] { R7375 += 1, R7313 += 1, R7293 += 1 };
  s2 -> s2 [0, 65535] { R7375 += 1, R7312 += 1, R7313 += 1 };
  s2 -> s3 [0, 65535] { R7375 += 1, R7313 += 1, R7292 += 1, R7293 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s4 [77, 77] { R7375 += 1, R7313 += 1, R7293 += 1 };
  s2 -> s5 [77, 77] { R7375 += 1, R7313 += 1, R7293 += 1 };
  s2 -> s1 [87, 65535] { R7375 += 1, R7313 += 1, R7293 += 1 };
  s3 -> s1 [0, 76] { R7375 += 1, R7313 += 1, R7293 += 1 };
  s3 -> s6 [0, 65535] { R7375 += 1 };
  s3 -> s3 [0, 65535] { R7375 += 1, R7313 += 1, R7292 += 1, R7293 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s4 [77, 77] { R7375 += 1, R7313 += 1, R7293 += 1 };
  s3 -> s5 [77, 77] { R7375 += 1, R7313 += 1, R7293 += 1 };
  s3 -> s1 [87, 65535] { R7375 += 1, R7313 += 1, R7293 += 1 };
  s4 -> s6 [0, 65535] { R7375 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s4 [0, 65535] { R7375 += 1, R7313 += 1 };
  s5 -> s5 [0, 77] { R7375 += 1, R7313 += 1, R7293 += 1 };
  s5 -> s6 [0, 65535] { R7375 += 1 };
  s5 -> s7 [0, 65535];
  s5 -> s5 [0, 65535] { R7375 += 1, R7313 += 1 };
  s5 -> s5 [87, 65535] { R7375 += 1, R7313 += 1, R7293 += 1 };
  s6 -> s6 [0, 65535] { R7375 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R7377 += 1, R7332 += 1, R7333 += 1 };
  s0 -> s0 [0, 65535] { R7376 += 1, R7377 += 1 };
  s0 -> s2 [0, 65535] { R7377 += 1, R7333 += 1, R18 += 1 };
  s1 -> s1 [0, 65535] { R7377 += 1, R7332 += 1, R7333 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R7377 += 1, R7333 += 1, R18 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R7377 += 1 };
  s2 -> s2 [0, 65535] { R7377 += 1, R7333 += 1, R18 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7377 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 72] { R7379 += 1, R7335 += 1 };
  s0 -> s2 [0, 65535] { R7379 += 1, R7334 += 1, R7335 += 1 };
  s0 -> s0 [0, 65535] { R7378 += 1, R7379 += 1 };
  s0 -> s3 [73, 73] { R7379 += 1, R7335 += 1 };
  s0 -> s4 [73, 73] { R7379 += 1, R7335 += 1 };
  s0 -> s5 [77, 77] { R7379 += 1, R7335 += 1 };
  s0 -> s1 [78, 65535] { R7379 += 1, R7335 += 1 };
  s1 -> s1 [0, 72] { R7379 += 1, R7335 += 1 };
  s1 -> s3 [73, 73] { R7379 += 1, R7335 += 1 };
  s1 -> s4 [73, 73] { R7379 += 1, R7335 += 1 };
  s1 -> s5 [77, 77] { R7379 += 1, R7335 += 1 };
  s1 -> s1 [78, 65535] { R7379 += 1, R7335 += 1 };
  s2 -> s1 [0, 72] { R7379 += 1, R7335 += 1 };
  s2 -> s2 [0, 65535] { R7379 += 1, R7334 += 1, R7335 += 1 };
  s2 -> s3 [73, 73] { R7379 += 1, R7335 += 1 };
  s2 -> s4 [73, 73] { R7379 += 1, R7335 += 1 };
  s2 -> s5 [77, 77] { R7379 += 1, R7335 += 1 };
  s2 -> s1 [78, 65535] { R7379 += 1, R7335 += 1 };
  s4 -> s4 [0, 73] { R7379 += 1, R7335 += 1 };
  s4 -> s8 [77, 77] { R7379 += 1, R7335 += 1 };
  s4 -> s4 [78, 65535] { R7379 += 1, R7335 += 1 };
  s5 -> s5 [0, 72] { R7379 += 1, R7335 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R7379 += 1 };
  s5 -> s7 [73, 73] { R7379 += 1, R7335 += 1 };
  s5 -> s8 [73, 73] { R7379 += 1, R7335 += 1 };
  s5 -> s5 [77, 65535] { R7379 += 1, R7335 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R7379 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 73] { R7379 += 1, R7335 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R7379 += 1 };
  s8 -> s8 [77, 65535] { R7379 += 1, R7335 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 72] { R7381 += 1, R7337 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R7380 += 1, R7381 += 1 };
  s0 -> s2 [0, 65535] { R7381 += 1, R7336 += 1, R7337 += 1 };
  s0 -> s3 [73, 73] { R7381 += 1, R7337 += 1, R66 += 1 };
  s0 -> s4 [73, 73] { R7381 += 1, R7337 += 1, R66 += 1 };
  s0 -> s1 [74, 65535] { R7381 += 1, R7337 += 1, R66 += 1 };
  s1 -> s1 [0, 72] { R7381 += 1, R7337 += 1, R66 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R7381 += 1 };
  s1 -> s3 [73, 73] { R7381 += 1, R7337 += 1, R66 += 1 };
  s1 -> s4 [73, 73] { R7381 += 1, R7337 += 1, R66 += 1 };
  s1 -> s1 [74, 65535] { R7381 += 1, R7337 += 1, R66 += 1 };
  s2 -> s1 [0, 72] { R7381 += 1, R7337 += 1, R66 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R7381 += 1, R7336 += 1, R7337 += 1 };
  s2 -> s3 [73, 73] { R7381 += 1, R7337 += 1, R66 += 1 };
  s2 -> s4 [73, 73] { R7381 += 1, R7337 += 1, R66 += 1 };
  s2 -> s1 [74, 65535] { R7381 += 1, R7337 += 1, R66 += 1 };
  s3 -> s3 [0, 65535] { R7381 += 1, R7337 += 1, R66 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R7381 += 1 };
  s4 -> s4 [0, 65535] { R7381 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7381 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 72] { R7383 += 1, R7339 += 1, R68 += 1 };
  s0 -> s0 [0, 65535] { R7382 += 1, R7383 += 1 };
  s0 -> s2 [0, 65535] { R7383 += 1, R7338 += 1, R7339 += 1 };
  s0 -> s3 [73, 73] { R7383 += 1, R7339 += 1, R68 += 1 };
  s0 -> s4 [73, 73] { R7383 += 1, R7339 += 1, R68 += 1 };
  s0 -> s1 [74, 65535] { R7383 += 1, R7339 += 1, R68 += 1 };
  s1 -> s1 [0, 72] { R7383 += 1, R7339 += 1, R68 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R7383 += 1 };
  s1 -> s3 [73, 73] { R7383 += 1, R7339 += 1, R68 += 1 };
  s1 -> s4 [73, 73] { R7383 += 1, R7339 += 1, R68 += 1 };
  s1 -> s1 [74, 65535] { R7383 += 1, R7339 += 1, R68 += 1 };
  s2 -> s1 [0, 72] { R7383 += 1, R7339 += 1, R68 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R7383 += 1, R7338 += 1, R7339 += 1 };
  s2 -> s3 [73, 73] { R7383 += 1, R7339 += 1, R68 += 1 };
  s2 -> s4 [73, 73] { R7383 += 1, R7339 += 1, R68 += 1 };
  s2 -> s1 [74, 65535] { R7383 += 1, R7339 += 1, R68 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R7383 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R7383 += 1, R7339 += 1, R68 += 1 };
  s4 -> s6 [0, 65535] { R7383 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7383 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 72] { R7385 += 1, R7341 += 1, R70 += 1, R71 += 1 };
  s0 -> s2 [0, 65535] { R7385 += 1, R7340 += 1, R7341 += 1 };
  s0 -> s0 [0, 65535] { R7384 += 1, R7385 += 1 };
  s0 -> s3 [73, 73] { R7385 += 1, R7341 += 1, R70 += 1, R71 += 1 };
  s0 -> s4 [73, 73] { R7385 += 1, R7341 += 1, R70 += 1, R71 += 1 };
  s0 -> s1 [74, 65535] { R7385 += 1, R7341 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 72] { R7385 += 1, R7341 += 1, R70 += 1, R71 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R7385 += 1 };
  s1 -> s3 [73, 73] { R7385 += 1, R7341 += 1, R70 += 1, R71 += 1 };
  s1 -> s4 [73, 73] { R7385 += 1, R7341 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [74, 65535] { R7385 += 1, R7341 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [0, 72] { R7385 += 1, R7341 += 1, R70 += 1, R71 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R7385 += 1, R7340 += 1, R7341 += 1 };
  s2 -> s3 [73, 73] { R7385 += 1, R7341 += 1, R70 += 1, R71 += 1 };
  s2 -> s4 [73, 73] { R7385 += 1, R7341 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [74, 65535] { R7385 += 1, R7341 += 1, R70 += 1, R71 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R7385 += 1, R7341 += 1, R70 += 1, R71 += 1 };
  s3 -> s6 [0, 65535] { R7385 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R7385 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7385 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 72] { R7387 += 1, R7343 += 1, R3891 += 1, R3892 += 1 };
  s0 -> s2 [0, 72] { R7387 += 1, R7343 += 1, R3890 += 1, R3891 += 1 };
  s0 -> s3 [0, 65535] { R7387 += 1, R7342 += 1, R7343 += 1 };
  s0 -> s0 [0, 65535] { R7386 += 1, R7387 += 1 };
  s0 -> s4 [73, 73] { R7387 += 1, R7343 += 1, R3891 += 1, R3892 += 1 };
  s0 -> s5 [73, 73] { R7387 += 1, R7343 += 1, R3891 += 1, R3892 += 1 };
  s0 -> s6 [73, 73] { R7387 += 1, R7343 += 1, R3890 += 1, R3891 += 1 };
  s0 -> s7 [73, 73] { R7387 += 1, R7343 += 1, R3890 += 1, R3891 += 1 };
  s0 -> s1 [74, 65535] { R7387 += 1, R7343 += 1, R3891 += 1, R3892 += 1 };
  s0 -> s2 [74, 65535] { R7387 += 1, R7343 += 1, R3890 += 1, R3891 += 1 };
  s1 -> s1 [0, 72] { R7387 += 1, R7343 += 1, R3891 += 1, R3892 += 1 };
  s1 -> s1 [0, 65535] { R7387 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s4 [73, 73] { R7387 += 1, R7343 += 1, R3891 += 1, R3892 += 1 };
  s1 -> s5 [73, 73] { R7387 += 1, R7343 += 1, R3891 += 1, R3892 += 1 };
  s1 -> s1 [74, 65535] { R7387 += 1, R7343 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s1 [0, 72] { R7387 += 1, R7343 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s2 [0, 72] { R7387 += 1, R7343 += 1, R3890 += 1, R3891 += 1 };
  s2 -> s4 [73, 73] { R7387 += 1, R7343 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s5 [73, 73] { R7387 += 1, R7343 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s6 [73, 73] { R7387 += 1, R7343 += 1, R3890 += 1, R3891 += 1 };
  s2 -> s7 [73, 73] { R7387 += 1, R7343 += 1, R3890 += 1, R3891 += 1 };
  s2 -> s1 [74, 65535] { R7387 += 1, R7343 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s2 [74, 65535] { R7387 += 1, R7343 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s1 [0, 72] { R7387 += 1, R7343 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s2 [0, 72] { R7387 += 1, R7343 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s3 [0, 65535] { R7387 += 1, R7342 += 1, R7343 += 1 };
  s3 -> s4 [73, 73] { R7387 += 1, R7343 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s5 [73, 73] { R7387 += 1, R7343 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s6 [73, 73] { R7387 += 1, R7343 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s7 [73, 73] { R7387 += 1, R7343 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s1 [74, 65535] { R7387 += 1, R7343 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s2 [74, 65535] { R7387 += 1, R7343 += 1, R3890 += 1, R3891 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s4 [0, 65535] { R7387 += 1, R7343 += 1, R3891 += 1, R3892 += 1 };
  s4 -> s9 [0, 65535] { R7387 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s5 [0, 65535] { R7387 += 1 };
  s6 -> s4 [0, 65535] { R7387 += 1, R7343 += 1, R3891 += 1, R3892 += 1 };
  s6 -> s6 [0, 65535] { R7387 += 1, R7343 += 1, R3890 += 1, R3891 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R7387 += 1 };
  accepting s4, s8, s5, s9, s1;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 72] { R7389 += 1, R7345 += 1, R6437 += 1 };
  s0 -> s2 [0, 72] { R7389 += 1, R7345 += 1, R6436 += 1, R6437 += 1 };
  s0 -> s0 [0, 65535] { R7388 += 1, R7389 += 1 };
  s0 -> s3 [0, 65535] { R7389 += 1, R7344 += 1, R7345 += 1 };
  s0 -> s4 [73, 73] { R7389 += 1, R7345 += 1, R6436 += 1, R6437 += 1 };
  s0 -> s5 [73, 73] { R7389 += 1, R7345 += 1, R6436 += 1, R6437 += 1 };
  s0 -> s6 [73, 73] { R7389 += 1, R7345 += 1, R6437 += 1 };
  s0 -> s7 [73, 73] { R7389 += 1, R7345 += 1, R6437 += 1 };
  s0 -> s1 [74, 77] { R7389 += 1, R7345 += 1, R6437 += 1 };
  s0 -> s2 [74, 65535] { R7389 += 1, R7345 += 1, R6436 += 1, R6437 += 1 };
  s0 -> s1 [87, 65535] { R7389 += 1, R7345 += 1, R6437 += 1 };
  s1 -> s1 [0, 72] { R7389 += 1, R7345 += 1, R6437 += 1 };
  s1 -> s1 [0, 65535] { R7389 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s6 [73, 73] { R7389 += 1, R7345 += 1, R6437 += 1 };
  s1 -> s7 [73, 73] { R7389 += 1, R7345 += 1, R6437 += 1 };
  s1 -> s1 [74, 77] { R7389 += 1, R7345 += 1, R6437 += 1 };
  s1 -> s1 [87, 65535] { R7389 += 1, R7345 += 1, R6437 += 1 };
  s2 -> s1 [0, 72] { R7389 += 1, R7345 += 1, R6437 += 1 };
  s2 -> s2 [0, 72] { R7389 += 1, R7345 += 1, R6436 += 1, R6437 += 1 };
  s2 -> s4 [73, 73] { R7389 += 1, R7345 += 1, R6436 += 1, R6437 += 1 };
  s2 -> s5 [73, 73] { R7389 += 1, R7345 += 1, R6436 += 1, R6437 += 1 };
  s2 -> s6 [73, 73] { R7389 += 1, R7345 += 1, R6437 += 1 };
  s2 -> s7 [73, 73] { R7389 += 1, R7345 += 1, R6437 += 1 };
  s2 -> s1 [74, 77] { R7389 += 1, R7345 += 1, R6437 += 1 };
  s2 -> s2 [74, 65535] { R7389 += 1, R7345 += 1, R6436 += 1, R6437 += 1 };
  s2 -> s1 [87, 65535] { R7389 += 1, R7345 += 1, R6437 += 1 };
  s3 -> s1 [0, 72] { R7389 += 1, R7345 += 1, R6437 += 1 };
  s3 -> s2 [0, 72] { R7389 += 1, R7345 += 1, R6436 += 1, R6437 += 1 };
  s3 -> s3 [0, 65535] { R7389 += 1, R7344 += 1, R7345 += 1 };
  s3 -> s4 [73, 73] { R7389 += 1, R7345 += 1, R6436 += 1, R6437 += 1 };
  s3 -> s5 [73, 73] { R7389 += 1, R7345 += 1, R6436 += 1, R6437 += 1 };
  s3 -> s6 [73, 73] { R7389 += 1, R7345 += 1, R6437 += 1 };
  s3 -> s7 [73, 73] { R7389 += 1, R7345 += 1, R6437 += 1 };
  s3 -> s1 [74, 77] { R7389 += 1, R7345 += 1, R6437 += 1 };
  s3 -> s2 [74, 65535] { R7389 += 1, R7345 += 1, R6436 += 1, R6437 += 1 };
  s3 -> s1 [87, 65535] { R7389 += 1, R7345 += 1, R6437 += 1 };
  s5 -> s7 [0, 77] { R7389 += 1, R7345 += 1, R6437 += 1 };
  s5 -> s5 [0, 65535] { R7389 += 1, R7345 += 1, R6436 += 1, R6437 += 1 };
  s5 -> s7 [87, 65535] { R7389 += 1, R7345 += 1, R6437 += 1 };
  s6 -> s6 [0, 65535] { R7389 += 1 };
  s6 -> s8 [0, 65535];
  s7 -> s7 [0, 77] { R7389 += 1, R7345 += 1, R6437 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R7389 += 1 };
  s7 -> s7 [87, 65535] { R7389 += 1, R7345 += 1, R6437 += 1 };
  s8 -> s8 [0, 65535];
  accepting s1, s6, s7, s8;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 72] { R7391 += 1, R7347 += 1, R7285 += 1, R7286 += 1 };
  s0 -> s2 [0, 72] { R7391 += 1, R7347 += 1, R7284 += 1, R7285 += 1 };
  s0 -> s3 [0, 65535] { R7391 += 1, R7346 += 1, R7347 += 1 };
  s0 -> s0 [0, 65535] { R7390 += 1, R7391 += 1 };
  s0 -> s4 [73, 73] { R7391 += 1, R7347 += 1, R7285 += 1, R7286 += 1 };
  s0 -> s5 [73, 73] { R7391 += 1, R7347 += 1, R7284 += 1, R7285 += 1 };
  s0 -> s6 [73, 73] { R7391 += 1, R7347 += 1, R7285 += 1, R7286 += 1 };
  s0 -> s7 [73, 73] { R7391 += 1, R7347 += 1, R7284 += 1, R7285 += 1 };
  s0 -> s1 [74, 65535] { R7391 += 1, R7347 += 1, R7285 += 1, R7286 += 1 };
  s0 -> s2 [74, 65535] { R7391 += 1, R7347 += 1, R7284 += 1, R7285 += 1 };
  s1 -> s1 [0, 72] { R7391 += 1, R7347 += 1, R7285 += 1, R7286 += 1 };
  s1 -> s11 [0, 72] { R7391 += 1, R7347 += 1 };
  s1 -> s12 [73, 73] { R7391 += 1, R7347 += 1 };
  s1 -> s4 [73, 73] { R7391 += 1, R7347 += 1, R7285 += 1, R7286 += 1 };
  s1 -> s8 [73, 73] { R7391 += 1, R7347 += 1 };
  s1 -> s6 [73, 73] { R7391 += 1, R7347 += 1, R7285 += 1, R7286 += 1 };
  s1 -> s1 [74, 65535] { R7391 += 1, R7347 += 1, R7285 += 1, R7286 += 1 };
  s1 -> s11 [74, 65535] { R7391 += 1, R7347 += 1 };
  s2 -> s1 [0, 72] { R7391 += 1, R7347 += 1, R7285 += 1, R7286 += 1 };
  s2 -> s2 [0, 72] { R7391 += 1, R7347 += 1, R7284 += 1, R7285 += 1 };
  s2 -> s4 [73, 73] { R7391 += 1, R7347 += 1, R7285 += 1, R7286 += 1 };
  s2 -> s5 [73, 73] { R7391 += 1, R7347 += 1, R7284 += 1, R7285 += 1 };
  s2 -> s6 [73, 73] { R7391 += 1, R7347 += 1, R7285 += 1, R7286 += 1 };
  s2 -> s7 [73, 73] { R7391 += 1, R7347 += 1, R7284 += 1, R7285 += 1 };
  s2 -> s1 [74, 65535] { R7391 += 1, R7347 += 1, R7285 += 1, R7286 += 1 };
  s2 -> s2 [74, 65535] { R7391 += 1, R7347 += 1, R7284 += 1, R7285 += 1 };
  s3 -> s1 [0, 72] { R7391 += 1, R7347 += 1, R7285 += 1, R7286 += 1 };
  s3 -> s2 [0, 72] { R7391 += 1, R7347 += 1, R7284 += 1, R7285 += 1 };
  s3 -> s3 [0, 65535] { R7391 += 1, R7346 += 1, R7347 += 1 };
  s3 -> s4 [73, 73] { R7391 += 1, R7347 += 1, R7285 += 1, R7286 += 1 };
  s3 -> s5 [73, 73] { R7391 += 1, R7347 += 1, R7284 += 1, R7285 += 1 };
  s3 -> s6 [73, 73] { R7391 += 1, R7347 += 1, R7285 += 1, R7286 += 1 };
  s3 -> s7 [73, 73] { R7391 += 1, R7347 += 1, R7284 += 1, R7285 += 1 };
  s3 -> s1 [74, 65535] { R7391 += 1, R7347 += 1, R7285 += 1, R7286 += 1 };
  s3 -> s2 [74, 65535] { R7391 += 1, R7347 += 1, R7284 += 1, R7285 += 1 };
  s4 -> s4 [0, 65535] { R7391 += 1, R7347 += 1, R7285 += 1, R7286 += 1 };
  s4 -> s8 [0, 65535] { R7391 += 1, R7347 += 1 };
  s5 -> s4 [0, 65535] { R7391 += 1, R7347 += 1, R7285 += 1, R7286 += 1 };
  s5 -> s5 [0, 65535] { R7391 += 1, R7347 += 1, R7284 += 1, R7285 += 1 };
  s8 -> s8 [0, 65535] { R7391 += 1, R7347 += 1 };
  s8 -> s9 [0, 65535] { R7391 += 1 };
  s8 -> s10 [0, 65535];
  s9 -> s9 [0, 65535] { R7391 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s11 [0, 72] { R7391 += 1, R7347 += 1 };
  s11 -> s11 [0, 65535] { R7391 += 1 };
  s11 -> s10 [0, 65535];
  s11 -> s12 [73, 73] { R7391 += 1, R7347 += 1 };
  s11 -> s8 [73, 73] { R7391 += 1, R7347 += 1 };
  s11 -> s11 [74, 65535] { R7391 += 1, R7347 += 1 };
  s12 -> s12 [0, 65535] { R7391 += 1 };
  s12 -> s10 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 72] { R7393 += 1, R7349 += 1, R7290 += 1, R7291 += 1 };
  s0 -> s2 [0, 65535] { R7393 += 1, R7348 += 1, R7349 += 1 };
  s0 -> s0 [0, 65535] { R7392 += 1, R7393 += 1 };
  s0 -> s3 [73, 73] { R7393 += 1, R7349 += 1, R7290 += 1, R7291 += 1 };
  s0 -> s4 [73, 73] { R7393 += 1, R7349 += 1, R7290 += 1, R7291 += 1 };
  s0 -> s1 [74, 65535] { R7393 += 1, R7349 += 1, R7290 += 1, R7291 += 1 };
  s1 -> s1 [0, 72] { R7393 += 1, R7349 += 1, R7290 += 1, R7291 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R7393 += 1 };
  s1 -> s3 [73, 73] { R7393 += 1, R7349 += 1, R7290 += 1, R7291 += 1 };
  s1 -> s4 [73, 73] { R7393 += 1, R7349 += 1, R7290 += 1, R7291 += 1 };
  s1 -> s1 [74, 65535] { R7393 += 1, R7349 += 1, R7290 += 1, R7291 += 1 };
  s2 -> s1 [0, 72] { R7393 += 1, R7349 += 1, R7290 += 1, R7291 += 1 };
  s2 -> s2 [0, 65535] { R7393 += 1, R7348 += 1, R7349 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R7393 += 1, R7349 += 1, R7290 += 1, R7291 += 1 };
  s2 -> s4 [73, 73] { R7393 += 1, R7349 += 1, R7290 += 1, R7291 += 1 };
  s2 -> s1 [74, 65535] { R7393 += 1, R7349 += 1, R7290 += 1, R7291 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R7393 += 1, R7349 += 1, R7290 += 1, R7291 += 1 };
  s3 -> s6 [0, 65535] { R7393 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R7393 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7393 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
synchronised {  // Automata constraining P54
automaton P54_0 {
  init s0;
  s0 -> s1 [109, 109];
  accepting s1;
};
};
constraint R1 = R7309 && R2 = R7393 && R20 - R7393 = -1 && R21 = R7393 && R22 - R7393 = -1 && R23 = R7393 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R6439 + -1*R6437 - R53 = 0 && R52 + R6438 + R6436 = 0 && R7308 = 0 && R7334 = 0 && R7335 = 0 && R7342 = 0 && R7343 = 0 && R7344 = 0 && R7345 = 0 && R7346 = 0 && R7347 = 0 && R7350 = 0 && R7351 = R7393 && R7352 = 0 && R7353 = R7393 && R7354 = 0 && R7355 = R7393 && R7356 = 0 && R7357 = R7393 && R7358 = 0 && R7359 = R7393 && R7360 = 0 && R7361 = R7393 && R7362 = 0 && R7363 = R7393 && R7364 = 0 && R7365 = R7393 && R7366 = 0 && R7367 = R7393 && R7368 = 0 && R7369 = R7393 && R7370 = 0 && R7371 = R7393 && R7372 = 0 && R7373 = R7393 && R7374 = 0 && R7375 = R7393 && R7376 = 0 && R7377 = R7393 && R7378 = 0 && R7379 = R7393 && R7380 = 0 && R7381 = R7393 && R7382 = 0 && R7383 = R7393 && R7384 = 0 && R7385 = R7393 && R7386 = 0 && R7387 = R7393 && R7388 = 0 && R7389 = R7393 && R7390 = 0 && R7391 = R7393 && R7392 = 0 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R6439 + -1*R6437 - R53 < 1 && -1 < R7309 && 0 < R7393 && (R48 + R3895 + R3892 != 0 || ((R42 + R72 + R70 != 0 || R43 + R73 + R71 + -1*R6439 + -1*R6437 - R53 = 0 || R53 + R6439 + R6437 < 1) && (R42 + R72 + R70 = 0 || R53 + R6439 + R6437 < 1))) && (R48 + R3895 + R3892 != 0 || ((R46 + R3893 + R3890 != 0 || R47 + R3894 + R3891 + -1*R6439 + -1*R6437 - R53 = 0 || R53 + R6439 + R6437 < 1) && (R46 + R3893 + R3890 = 0 || R53 + R6439 + R6437 < 1))) && (R7294 != 0 || R7295 = R7309 || (R17 = 0 && R7309 = 0)) && (R7296 != 0 || R7297 = R7309 || (R17 = 0 && R7309 = 0)) && (R7298 != 0 || R7299 = R7309 || (R17 = 0 && R7309 = 0)) && (R7300 != 0 || R7301 = R7309 || (R17 = 0 && R7309 = 0)) && (R7302 != 0 || R7303 = R7309 || (R17 = 0 && R7309 = 0)) && (R7304 != 0 || R7305 = R7309 || (R17 = 0 && R7309 = 0)) && (R7306 != 0 || R7307 = R7309 || (R17 = 0 && R7309 = 0)) && (R7310 != 0 || R7309 = R7311 || (R17 = 0 && R7309 = 0)) && (R7312 != 0 || R7309 = R7313 || (R17 = 0 && R7309 = 0)) && (R18 = 0 || (R7332 = 0 && R7333 = 0)) && (R18 = 0 || (R7336 = 0 && R7337 = 0)) && (R18 = 0 || (R7338 = 0 && R7339 = 0)) && (R18 = 0 || (R7340 = 0 && R7341 = 0)) && (R18 = 0 || (R7348 = 0 && R7349 = 0)) && (R19 = 0 || (R7314 = 0 && R7315 = 0)) && (R19 = 0 || (R7316 = 0 && R7317 = 0)) && (R19 = 0 || (R7318 = 0 && R7319 = 0)) && (R19 = 0 || (R7320 = 0 && R7321 = 0)) && (R19 = 0 || (R7322 = 0 && R7323 = 0)) && (R19 = 0 || (R7324 = 0 && R7325 = 0)) && (R19 = 0 || (R7326 = 0 && R7327 = 0)) && (R19 = 0 || (R7328 = 0 && R7329 = 0)) && (R19 = 0 || (R7330 = 0 && R7331 = 0)) && (R48 + R3895 + R3892 = 0 || (R42 + R72 + R70 = 0 && R43 + R73 + R71 + -1*R6439 + -1*R6437 - R53 = 0)) && (R48 + R3895 + R3892 = 0 || (R46 + R3893 + R3890 = 0 && R47 + R3894 + R3891 + -1*R6439 + -1*R6437 - R53 = 0)) && (R58 + R7289 + R7286 = 0 || (R56 + R7287 + R7284 = 0 && R57 + R7288 + R7285 = 0)) && (R58 + R7289 + R7286 = 0 || (R62 + R7292 + R7290 = 0 && R63 + R7293 + R7291 = 0)) && (R7294 = 0 || (R17 = 0 && R7309 = 0)) && (R7296 = 0 || (R17 = 0 && R7309 = 0)) && (R7298 = 0 || (R17 = 0 && R7309 = 0)) && (R7300 = 0 || (R17 = 0 && R7309 = 0)) && (R7302 = 0 || (R17 = 0 && R7309 = 0)) && (R7304 = 0 || (R17 = 0 && R7309 = 0)) && (R7306 = 0 || (R17 = 0 && R7309 = 0)) && (R7310 = 0 || (R17 = 0 && R7309 = 0)) && (R7312 = 0 || (R17 = 0 && R7309 = 0));
// End of Parikh automata intersection problem
