// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R12, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R70, R71, R72, R73, R7706, R7707, R7708, R7709, R7710, R7711, R7712, R7713, R7714, R7715, R8, R8560, R8561, R8562, R8563, R8564, R8565, R8670, R8671, R8672, R8673, R8674, R8675, R8676, R8677, R8678, R8679, R8680, R8681, R8682, R8683, R8684, R8685, R8686, R8687, R8688, R8689, R8690, R8691, R8692, R8693, R8694, R8695, R8696, R8697, R8698, R8699, R8700, R8701, R8702, R8703, R8704, R8705, R8706, R8707, R8708, R8709, R8710, R8711, R8712, R8713, R8714, R8715, R8716, R8717, R8718, R8719, R8720, R8721, R8722, R8723, R8724, R8725, R8726, R8727, R8728, R8729, R8730, R8731, R8732, R8733, R8734, R8735, R8736, R8737, R8738, R8739, R8740, R8741, R8742, R8743, R8744, R8745, R8746, R8747, R8748, R8749, R8750, R8751, R8752, R8753, R8754, R8755, R8756, R8757, R8758, R8759, R8760, R8761, R8762, R8763, R8764, R8765, R8766, R8767, R8768, R8769, R8770, R8771, R8772, R8773;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 72];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [73, 73];
  s0 -> s1 [74, 65535];
  s1 -> s1 [0, 72];
  s1 -> s2 [73, 73];
  s1 -> s1 [74, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R21 += 1 };
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R25 += 1 };
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R8695 += 1, R19 += 1 };
  s0 -> s0 [0, 65535] { R8694 += 1, R8695 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R8695 += 1, R19 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 72] { R8697 += 1 };
  s0 -> s0 [0, 65535] { R8696 += 1, R8697 += 1 };
  s0 -> s2 [73, 73] { R8697 += 1 };
  s0 -> s3 [73, 73] { R8697 += 1 };
  s0 -> s1 [78, 65535] { R8697 += 1 };
  s1 -> s1 [0, 72] { R8697 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R8697 += 1 };
  s1 -> s3 [73, 73] { R8697 += 1 };
  s1 -> s1 [78, 65535] { R8697 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 73] { R8697 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [78, 65535] { R8697 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 72] { R8699 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R8698 += 1, R8699 += 1 };
  s0 -> s2 [73, 73] { R8699 += 1, R38 += 1 };
  s0 -> s3 [73, 73] { R8699 += 1, R38 += 1 };
  s0 -> s1 [74, 65535] { R8699 += 1, R38 += 1 };
  s1 -> s1 [0, 72] { R8699 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R8699 += 1, R38 += 1 };
  s1 -> s3 [73, 73] { R8699 += 1, R38 += 1 };
  s1 -> s1 [74, 65535] { R8699 += 1, R38 += 1 };
  s2 -> s2 [0, 65535] { R8699 += 1, R38 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 72] { R8701 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R8700 += 1, R8701 += 1 };
  s0 -> s2 [73, 73] { R8701 += 1, R40 += 1 };
  s0 -> s3 [73, 73] { R8701 += 1, R40 += 1 };
  s0 -> s1 [74, 65535] { R8701 += 1, R40 += 1 };
  s1 -> s1 [0, 72] { R8701 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R8701 += 1, R40 += 1 };
  s1 -> s3 [73, 73] { R8701 += 1, R40 += 1 };
  s1 -> s1 [74, 65535] { R8701 += 1, R40 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8701 += 1, R40 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 72] { R8703 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R8702 += 1, R8703 += 1 };
  s0 -> s2 [73, 73] { R8703 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [73, 73] { R8703 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [74, 65535] { R8703 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 72] { R8703 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R8703 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [73, 73] { R8703 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [74, 65535] { R8703 += 1, R42 += 1, R43 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8703 += 1, R42 += 1, R43 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 72] { R8705 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R8704 += 1, R8705 += 1 };
  s0 -> s2 [73, 73] { R8705 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [73, 73] { R8705 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [74, 65535] { R8705 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 72] { R8705 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R8705 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [73, 73] { R8705 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [74, 65535] { R8705 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535] { R8705 += 1, R46 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 72] { R8707 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R8706 += 1, R8707 += 1 };
  s0 -> s2 [73, 73] { R8707 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [73, 73] { R8707 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [74, 65535] { R8707 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 72] { R8707 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R8707 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [73, 73] { R8707 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [74, 65535] { R8707 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8707 += 1, R52 += 1, R53 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 72] { R8709 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R8708 += 1, R8709 += 1 };
  s0 -> s2 [73, 73] { R8709 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [73, 73] { R8709 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [74, 65535] { R8709 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 72] { R8709 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R8709 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [73, 73] { R8709 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [74, 65535] { R8709 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R8709 += 1, R56 += 1, R57 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 72] { R8711 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R8710 += 1, R8711 += 1 };
  s0 -> s2 [73, 73] { R8711 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [73, 73] { R8711 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [74, 65535] { R8711 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 72] { R8711 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R8711 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [73, 73] { R8711 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [74, 65535] { R8711 += 1, R62 += 1, R63 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8711 += 1, R62 += 1, R63 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 72] { R8731 += 1 };
  s0 -> s0 [0, 65535] { R8730 += 1, R8731 += 1 };
  s0 -> s2 [73, 73] { R8731 += 1 };
  s0 -> s1 [74, 65535] { R8731 += 1 };
  s1 -> s1 [0, 72] { R8731 += 1 };
  s1 -> s2 [73, 73] { R8731 += 1 };
  s1 -> s1 [74, 65535] { R8731 += 1 };
  s2 -> s2 [0, 65535] { R8731 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R8733 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R8732 += 1, R8733 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R8733 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 72] { R8735 += 1 };
  s0 -> s0 [0, 65535] { R8734 += 1, R8735 += 1 };
  s0 -> s2 [0, 65535] { R8735 += 1, R8 += 1 };
  s0 -> s3 [73, 73] { R8735 += 1 };
  s0 -> s1 [74, 65535] { R8735 += 1 };
  s1 -> s1 [0, 72] { R8735 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [73, 73] { R8735 += 1 };
  s1 -> s1 [74, 65535] { R8735 += 1 };
  s2 -> s1 [0, 72] { R8735 += 1 };
  s2 -> s2 [0, 65535] { R8735 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [73, 73] { R8735 += 1 };
  s2 -> s1 [74, 65535] { R8735 += 1 };
  s3 -> s3 [0, 65535] { R8735 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 72] { R8737 += 1, R8675 += 1 };
  s0 -> s2 [0, 65535] { R8737 += 1, R8674 += 1, R8675 += 1 };
  s0 -> s0 [0, 65535] { R8736 += 1, R8737 += 1 };
  s0 -> s1 [74, 65535] { R8737 += 1, R8675 += 1 };
  s1 -> s1 [0, 72] { R8737 += 1, R8675 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R8737 += 1 };
  s1 -> s1 [74, 65535] { R8737 += 1, R8675 += 1 };
  s2 -> s1 [0, 72] { R8737 += 1, R8675 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R8737 += 1, R8674 += 1, R8675 += 1 };
  s2 -> s1 [74, 65535] { R8737 += 1, R8675 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s0 [0, 65535] { R8738 += 1, R8739 += 1 };
  s0 -> s1 [0, 65535] { R8739 += 1, R8677 += 1, R17 += 1 };
  s0 -> s2 [0, 65535] { R8739 += 1, R8676 += 1, R8677 += 1 };
  s1 -> s4 [0, 65535] { R8739 += 1 };
  s1 -> s1 [0, 65535] { R8739 += 1, R8677 += 1, R17 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R8739 += 1, R8677 += 1, R17 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R8739 += 1, R8676 += 1, R8677 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8739 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 73] { R8741 += 1, R8679 += 1 };
  s0 -> s0 [0, 65535] { R8740 += 1, R8741 += 1 };
  s0 -> s2 [0, 65535] { R8741 += 1, R8678 += 1, R8679 += 1 };
  s0 -> s1 [77, 65535] { R8741 += 1, R8679 += 1 };
  s1 -> s1 [0, 73] { R8741 += 1, R8679 += 1 };
  s1 -> s1 [0, 65535] { R8741 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [77, 65535] { R8741 += 1, R8679 += 1 };
  s2 -> s1 [0, 73] { R8741 += 1, R8679 += 1 };
  s2 -> s2 [0, 65535] { R8741 += 1, R8678 += 1, R8679 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [77, 65535] { R8741 += 1, R8679 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s0 [0, 65535] { R8742 += 1, R8743 += 1 };
  s0 -> s1 [0, 65535] { R8743 += 1, R8681 += 1, R67 += 1 };
  s0 -> s2 [0, 65535] { R8743 += 1, R8680 += 1, R8681 += 1 };
  s1 -> s4 [0, 65535] { R8743 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R8743 += 1, R8681 += 1, R67 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R8743 += 1, R8681 += 1, R67 += 1 };
  s2 -> s2 [0, 65535] { R8743 += 1, R8680 += 1, R8681 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8743 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 76] { R8745 += 1, R8683 += 1 };
  s0 -> s2 [0, 65535] { R8745 += 1, R8683 += 1, R69 += 1 };
  s0 -> s3 [0, 65535] { R8745 += 1, R8682 += 1, R8683 += 1 };
  s0 -> s0 [0, 65535] { R8744 += 1, R8745 += 1 };
  s0 -> s1 [78, 65535] { R8745 += 1, R8683 += 1 };
  s1 -> s1 [0, 76] { R8745 += 1, R8683 += 1 };
  s1 -> s1 [0, 65535] { R8745 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [78, 65535] { R8745 += 1, R8683 += 1 };
  s2 -> s1 [0, 76] { R8745 += 1, R8683 += 1 };
  s2 -> s2 [0, 65535] { R8745 += 1, R8683 += 1, R69 += 1 };
  s2 -> s5 [0, 65535] { R8745 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [78, 65535] { R8745 += 1, R8683 += 1 };
  s3 -> s1 [0, 76] { R8745 += 1, R8683 += 1 };
  s3 -> s2 [0, 65535] { R8745 += 1, R8683 += 1, R69 += 1 };
  s3 -> s3 [0, 65535] { R8745 += 1, R8682 += 1, R8683 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [78, 65535] { R8745 += 1, R8683 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8745 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 76] { R8747 += 1, R8685 += 1, R73 += 1 };
  s0 -> s2 [0, 65535] { R8747 += 1, R8684 += 1, R8685 += 1 };
  s0 -> s0 [0, 65535] { R8746 += 1, R8747 += 1 };
  s0 -> s3 [0, 65535] { R8747 += 1, R8685 += 1, R72 += 1, R73 += 1 };
  s0 -> s1 [78, 65535] { R8747 += 1, R8685 += 1, R73 += 1 };
  s1 -> s1 [0, 76] { R8747 += 1, R8685 += 1, R73 += 1 };
  s1 -> s1 [0, 65535] { R8747 += 1, R8685 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R8747 += 1 };
  s1 -> s1 [78, 65535] { R8747 += 1, R8685 += 1, R73 += 1 };
  s2 -> s1 [0, 76] { R8747 += 1, R8685 += 1, R73 += 1 };
  s2 -> s2 [0, 65535] { R8747 += 1, R8684 += 1, R8685 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R8747 += 1, R8685 += 1, R72 += 1, R73 += 1 };
  s2 -> s1 [78, 65535] { R8747 += 1, R8685 += 1, R73 += 1 };
  s3 -> s1 [0, 76] { R8747 += 1, R8685 += 1, R73 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R8747 += 1 };
  s3 -> s3 [0, 65535] { R8747 += 1, R8685 += 1, R72 += 1, R73 += 1 };
  s3 -> s1 [78, 65535] { R8747 += 1, R8685 += 1, R73 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8747 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R8749 += 1, R8687 += 1 };
  s0 -> s0 [0, 65535] { R8748 += 1, R8749 += 1 };
  s0 -> s2 [0, 65535] { R8749 += 1, R8686 += 1, R8687 += 1 };
  s1 -> s1 [0, 65535] { R8749 += 1, R8687 += 1 };
  s1 -> s4 [0, 65535] { R8749 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R8749 += 1, R8687 += 1 };
  s2 -> s2 [0, 65535] { R8749 += 1, R8686 += 1, R8687 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8749 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 77] { R8751 += 1, R8689 += 1, R7715 += 1 };
  s0 -> s2 [0, 65535] { R8751 += 1, R8688 += 1, R8689 += 1 };
  s0 -> s0 [0, 65535] { R8750 += 1, R8751 += 1 };
  s0 -> s1 [0, 65535] { R8751 += 1, R8689 += 1 };
  s0 -> s1 [86, 65535] { R8751 += 1, R8689 += 1, R7715 += 1 };
  s1 -> s1 [0, 77] { R8751 += 1, R8689 += 1, R7715 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R8751 += 1 };
  s1 -> s1 [0, 65535] { R8751 += 1, R8689 += 1 };
  s1 -> s1 [86, 65535] { R8751 += 1, R8689 += 1, R7715 += 1 };
  s2 -> s1 [0, 77] { R8751 += 1, R8689 += 1, R7715 += 1 };
  s2 -> s2 [0, 65535] { R8751 += 1, R8688 += 1, R8689 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R8751 += 1, R8689 += 1 };
  s2 -> s1 [86, 65535] { R8751 += 1, R8689 += 1, R7715 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8751 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s0 [0, 65535] { R8752 += 1, R8753 += 1 };
  s0 -> s1 [0, 65535] { R8753 += 1, R8691 += 1 };
  s0 -> s2 [0, 65535] { R8753 += 1, R8690 += 1, R8691 += 1 };
  s1 -> s4 [0, 65535] { R8753 += 1 };
  s1 -> s1 [0, 65535] { R8753 += 1, R8691 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R8753 += 1, R8691 += 1 };
  s2 -> s2 [0, 65535] { R8753 += 1, R8690 += 1, R8691 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8753 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 76] { R8755 += 1, R8693 += 1, R8673 += 1 };
  s0 -> s1 [0, 65535] { R8755 += 1, R8693 += 1 };
  s0 -> s2 [0, 65535] { R8755 += 1, R8692 += 1, R8693 += 1 };
  s0 -> s0 [0, 65535] { R8754 += 1, R8755 += 1 };
  s0 -> s3 [77, 77] { R8755 += 1, R8693 += 1, R8673 += 1 };
  s0 -> s4 [77, 77] { R8755 += 1, R8693 += 1, R8673 += 1 };
  s0 -> s1 [87, 65535] { R8755 += 1, R8693 += 1, R8673 += 1 };
  s1 -> s1 [0, 76] { R8755 += 1, R8693 += 1, R8673 += 1 };
  s1 -> s1 [0, 65535] { R8755 += 1, R8693 += 1 };
  s1 -> s5 [0, 65535] { R8755 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [77, 77] { R8755 += 1, R8693 += 1, R8673 += 1 };
  s1 -> s4 [77, 77] { R8755 += 1, R8693 += 1, R8673 += 1 };
  s1 -> s1 [87, 65535] { R8755 += 1, R8693 += 1, R8673 += 1 };
  s2 -> s1 [0, 76] { R8755 += 1, R8693 += 1, R8673 += 1 };
  s2 -> s1 [0, 65535] { R8755 += 1, R8693 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R8755 += 1, R8692 += 1, R8693 += 1 };
  s2 -> s3 [77, 77] { R8755 += 1, R8693 += 1, R8673 += 1 };
  s2 -> s4 [77, 77] { R8755 += 1, R8693 += 1, R8673 += 1 };
  s2 -> s1 [87, 65535] { R8755 += 1, R8693 += 1, R8673 += 1 };
  s3 -> s5 [0, 65535] { R8755 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R8755 += 1, R8693 += 1 };
  s4 -> s4 [0, 77] { R8755 += 1, R8693 += 1, R8673 += 1 };
  s4 -> s5 [0, 65535] { R8755 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R8755 += 1, R8693 += 1 };
  s4 -> s4 [87, 65535] { R8755 += 1, R8693 += 1, R8673 += 1 };
  s5 -> s5 [0, 65535] { R8755 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R8757 += 1, R8712 += 1, R8713 += 1 };
  s0 -> s0 [0, 65535] { R8756 += 1, R8757 += 1 };
  s0 -> s2 [0, 65535] { R8757 += 1, R8713 += 1, R18 += 1 };
  s1 -> s1 [0, 65535] { R8757 += 1, R8712 += 1, R8713 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R8757 += 1, R8713 += 1, R18 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R8757 += 1, R8713 += 1, R18 += 1 };
  s2 -> s4 [0, 65535] { R8757 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8757 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 72] { R8759 += 1, R8715 += 1 };
  s0 -> s0 [0, 65535] { R8758 += 1, R8759 += 1 };
  s0 -> s2 [0, 65535] { R8759 += 1, R8714 += 1, R8715 += 1 };
  s0 -> s3 [73, 73] { R8759 += 1, R8715 += 1 };
  s0 -> s4 [73, 73] { R8759 += 1, R8715 += 1 };
  s0 -> s5 [77, 77] { R8759 += 1, R8715 += 1 };
  s0 -> s1 [78, 65535] { R8759 += 1, R8715 += 1 };
  s1 -> s1 [0, 72] { R8759 += 1, R8715 += 1 };
  s1 -> s3 [73, 73] { R8759 += 1, R8715 += 1 };
  s1 -> s4 [73, 73] { R8759 += 1, R8715 += 1 };
  s1 -> s5 [77, 77] { R8759 += 1, R8715 += 1 };
  s1 -> s1 [78, 65535] { R8759 += 1, R8715 += 1 };
  s2 -> s1 [0, 72] { R8759 += 1, R8715 += 1 };
  s2 -> s2 [0, 65535] { R8759 += 1, R8714 += 1, R8715 += 1 };
  s2 -> s3 [73, 73] { R8759 += 1, R8715 += 1 };
  s2 -> s4 [73, 73] { R8759 += 1, R8715 += 1 };
  s2 -> s5 [77, 77] { R8759 += 1, R8715 += 1 };
  s2 -> s1 [78, 65535] { R8759 += 1, R8715 += 1 };
  s3 -> s3 [0, 73] { R8759 += 1, R8715 += 1 };
  s3 -> s8 [77, 77] { R8759 += 1, R8715 += 1 };
  s3 -> s3 [78, 65535] { R8759 += 1, R8715 += 1 };
  s5 -> s5 [0, 72] { R8759 += 1, R8715 += 1 };
  s5 -> s5 [0, 65535] { R8759 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [73, 73] { R8759 += 1, R8715 += 1 };
  s5 -> s8 [73, 73] { R8759 += 1, R8715 += 1 };
  s5 -> s5 [77, 65535] { R8759 += 1, R8715 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R8759 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 73] { R8759 += 1, R8715 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R8759 += 1 };
  s8 -> s8 [77, 65535] { R8759 += 1, R8715 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 72] { R8761 += 1, R8717 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R8760 += 1, R8761 += 1 };
  s0 -> s2 [0, 65535] { R8761 += 1, R8716 += 1, R8717 += 1 };
  s0 -> s3 [73, 73] { R8761 += 1, R8717 += 1, R66 += 1 };
  s0 -> s4 [73, 73] { R8761 += 1, R8717 += 1, R66 += 1 };
  s0 -> s1 [74, 65535] { R8761 += 1, R8717 += 1, R66 += 1 };
  s1 -> s1 [0, 72] { R8761 += 1, R8717 += 1, R66 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R8761 += 1 };
  s1 -> s3 [73, 73] { R8761 += 1, R8717 += 1, R66 += 1 };
  s1 -> s4 [73, 73] { R8761 += 1, R8717 += 1, R66 += 1 };
  s1 -> s1 [74, 65535] { R8761 += 1, R8717 += 1, R66 += 1 };
  s2 -> s1 [0, 72] { R8761 += 1, R8717 += 1, R66 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R8761 += 1, R8716 += 1, R8717 += 1 };
  s2 -> s3 [73, 73] { R8761 += 1, R8717 += 1, R66 += 1 };
  s2 -> s4 [73, 73] { R8761 += 1, R8717 += 1, R66 += 1 };
  s2 -> s1 [74, 65535] { R8761 += 1, R8717 += 1, R66 += 1 };
  s3 -> s3 [0, 65535] { R8761 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8761 += 1, R8717 += 1, R66 += 1 };
  s4 -> s6 [0, 65535] { R8761 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8761 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 72] { R8763 += 1, R8719 += 1, R68 += 1 };
  s0 -> s2 [0, 65535] { R8763 += 1, R8718 += 1, R8719 += 1 };
  s0 -> s0 [0, 65535] { R8762 += 1, R8763 += 1 };
  s0 -> s3 [73, 73] { R8763 += 1, R8719 += 1, R68 += 1 };
  s0 -> s4 [73, 73] { R8763 += 1, R8719 += 1, R68 += 1 };
  s0 -> s1 [74, 65535] { R8763 += 1, R8719 += 1, R68 += 1 };
  s1 -> s1 [0, 72] { R8763 += 1, R8719 += 1, R68 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R8763 += 1 };
  s1 -> s3 [73, 73] { R8763 += 1, R8719 += 1, R68 += 1 };
  s1 -> s4 [73, 73] { R8763 += 1, R8719 += 1, R68 += 1 };
  s1 -> s1 [74, 65535] { R8763 += 1, R8719 += 1, R68 += 1 };
  s2 -> s1 [0, 72] { R8763 += 1, R8719 += 1, R68 += 1 };
  s2 -> s2 [0, 65535] { R8763 += 1, R8718 += 1, R8719 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [73, 73] { R8763 += 1, R8719 += 1, R68 += 1 };
  s2 -> s4 [73, 73] { R8763 += 1, R8719 += 1, R68 += 1 };
  s2 -> s1 [74, 65535] { R8763 += 1, R8719 += 1, R68 += 1 };
  s3 -> s3 [0, 65535] { R8763 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R8763 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R8763 += 1, R8719 += 1, R68 += 1 };
  s5 -> s5 [0, 65535] { R8763 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 72] { R8765 += 1, R8721 += 1, R70 += 1, R71 += 1 };
  s0 -> s2 [0, 65535] { R8765 += 1, R8720 += 1, R8721 += 1 };
  s0 -> s0 [0, 65535] { R8764 += 1, R8765 += 1 };
  s0 -> s3 [73, 73] { R8765 += 1, R8721 += 1, R70 += 1, R71 += 1 };
  s0 -> s4 [73, 73] { R8765 += 1, R8721 += 1, R70 += 1, R71 += 1 };
  s0 -> s1 [74, 65535] { R8765 += 1, R8721 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 72] { R8765 += 1, R8721 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 65535] { R8765 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [73, 73] { R8765 += 1, R8721 += 1, R70 += 1, R71 += 1 };
  s1 -> s4 [73, 73] { R8765 += 1, R8721 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [74, 65535] { R8765 += 1, R8721 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [0, 72] { R8765 += 1, R8721 += 1, R70 += 1, R71 += 1 };
  s2 -> s2 [0, 65535] { R8765 += 1, R8720 += 1, R8721 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [73, 73] { R8765 += 1, R8721 += 1, R70 += 1, R71 += 1 };
  s2 -> s4 [73, 73] { R8765 += 1, R8721 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [74, 65535] { R8765 += 1, R8721 += 1, R70 += 1, R71 += 1 };
  s3 -> s3 [0, 65535] { R8765 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R8765 += 1 };
  s4 -> s4 [0, 65535] { R8765 += 1, R8721 += 1, R70 += 1, R71 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R8765 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 72] { R8767 += 1, R8723 += 1, R7707 += 1, R7708 += 1 };
  s0 -> s2 [0, 72] { R8767 += 1, R8723 += 1, R7706 += 1, R7707 += 1 };
  s0 -> s0 [0, 65535] { R8766 += 1, R8767 += 1 };
  s0 -> s3 [0, 65535] { R8767 += 1, R8722 += 1, R8723 += 1 };
  s0 -> s4 [73, 73] { R8767 += 1, R8723 += 1, R7706 += 1, R7707 += 1 };
  s0 -> s5 [73, 73] { R8767 += 1, R8723 += 1, R7707 += 1, R7708 += 1 };
  s0 -> s6 [73, 73] { R8767 += 1, R8723 += 1, R7706 += 1, R7707 += 1 };
  s0 -> s7 [73, 73] { R8767 += 1, R8723 += 1, R7707 += 1, R7708 += 1 };
  s0 -> s1 [74, 65535] { R8767 += 1, R8723 += 1, R7707 += 1, R7708 += 1 };
  s0 -> s2 [74, 65535] { R8767 += 1, R8723 += 1, R7706 += 1, R7707 += 1 };
  s1 -> s11 [0, 72] { R8767 += 1, R8723 += 1 };
  s1 -> s1 [0, 72] { R8767 += 1, R8723 += 1, R7707 += 1, R7708 += 1 };
  s1 -> s5 [73, 73] { R8767 += 1, R8723 += 1, R7707 += 1, R7708 += 1 };
  s1 -> s12 [73, 73] { R8767 += 1, R8723 += 1 };
  s1 -> s8 [73, 73] { R8767 += 1, R8723 += 1 };
  s1 -> s7 [73, 73] { R8767 += 1, R8723 += 1, R7707 += 1, R7708 += 1 };
  s1 -> s11 [74, 65535] { R8767 += 1, R8723 += 1 };
  s1 -> s1 [74, 65535] { R8767 += 1, R8723 += 1, R7707 += 1, R7708 += 1 };
  s2 -> s1 [0, 72] { R8767 += 1, R8723 += 1, R7707 += 1, R7708 += 1 };
  s2 -> s2 [0, 72] { R8767 += 1, R8723 += 1, R7706 += 1, R7707 += 1 };
  s2 -> s4 [73, 73] { R8767 += 1, R8723 += 1, R7706 += 1, R7707 += 1 };
  s2 -> s5 [73, 73] { R8767 += 1, R8723 += 1, R7707 += 1, R7708 += 1 };
  s2 -> s6 [73, 73] { R8767 += 1, R8723 += 1, R7706 += 1, R7707 += 1 };
  s2 -> s7 [73, 73] { R8767 += 1, R8723 += 1, R7707 += 1, R7708 += 1 };
  s2 -> s1 [74, 65535] { R8767 += 1, R8723 += 1, R7707 += 1, R7708 += 1 };
  s2 -> s2 [74, 65535] { R8767 += 1, R8723 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s1 [0, 72] { R8767 += 1, R8723 += 1, R7707 += 1, R7708 += 1 };
  s3 -> s2 [0, 72] { R8767 += 1, R8723 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s3 [0, 65535] { R8767 += 1, R8722 += 1, R8723 += 1 };
  s3 -> s4 [73, 73] { R8767 += 1, R8723 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s5 [73, 73] { R8767 += 1, R8723 += 1, R7707 += 1, R7708 += 1 };
  s3 -> s6 [73, 73] { R8767 += 1, R8723 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s7 [73, 73] { R8767 += 1, R8723 += 1, R7707 += 1, R7708 += 1 };
  s3 -> s1 [74, 65535] { R8767 += 1, R8723 += 1, R7707 += 1, R7708 += 1 };
  s3 -> s2 [74, 65535] { R8767 += 1, R8723 += 1, R7706 += 1, R7707 += 1 };
  s6 -> s6 [0, 65535] { R8767 += 1, R8723 += 1, R7706 += 1, R7707 += 1 };
  s6 -> s7 [0, 65535] { R8767 += 1, R8723 += 1, R7707 += 1, R7708 += 1 };
  s7 -> s8 [0, 65535] { R8767 += 1, R8723 += 1 };
  s7 -> s7 [0, 65535] { R8767 += 1, R8723 += 1, R7707 += 1, R7708 += 1 };
  s8 -> s9 [0, 65535] { R8767 += 1 };
  s8 -> s10 [0, 65535];
  s8 -> s8 [0, 65535] { R8767 += 1, R8723 += 1 };
  s9 -> s9 [0, 65535] { R8767 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s11 [0, 72] { R8767 += 1, R8723 += 1 };
  s11 -> s11 [0, 65535] { R8767 += 1 };
  s11 -> s10 [0, 65535];
  s11 -> s12 [73, 73] { R8767 += 1, R8723 += 1 };
  s11 -> s8 [73, 73] { R8767 += 1, R8723 += 1 };
  s11 -> s11 [74, 65535] { R8767 += 1, R8723 += 1 };
  s12 -> s12 [0, 65535] { R8767 += 1 };
  s12 -> s10 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 72] { R8769 += 1, R8725 += 1, R7713 += 1 };
  s0 -> s2 [0, 72] { R8769 += 1, R8725 += 1, R7712 += 1, R7713 += 1 };
  s0 -> s3 [0, 65535] { R8769 += 1, R8724 += 1, R8725 += 1 };
  s0 -> s0 [0, 65535] { R8768 += 1, R8769 += 1 };
  s0 -> s4 [73, 73] { R8769 += 1, R8725 += 1, R7712 += 1, R7713 += 1 };
  s0 -> s5 [73, 73] { R8769 += 1, R8725 += 1, R7713 += 1 };
  s0 -> s6 [73, 73] { R8769 += 1, R8725 += 1, R7712 += 1, R7713 += 1 };
  s0 -> s7 [73, 73] { R8769 += 1, R8725 += 1, R7713 += 1 };
  s0 -> s1 [74, 77] { R8769 += 1, R8725 += 1, R7713 += 1 };
  s0 -> s2 [74, 65535] { R8769 += 1, R8725 += 1, R7712 += 1, R7713 += 1 };
  s0 -> s8 [86, 86] { R8769 += 1, R8725 += 1, R7713 += 1 };
  s0 -> s1 [87, 65535] { R8769 += 1, R8725 += 1, R7713 += 1 };
  s1 -> s1 [0, 72] { R8769 += 1, R8725 += 1, R7713 += 1 };
  s1 -> s5 [73, 73] { R8769 += 1, R8725 += 1, R7713 += 1 };
  s1 -> s7 [73, 73] { R8769 += 1, R8725 += 1, R7713 += 1 };
  s1 -> s1 [74, 77] { R8769 += 1, R8725 += 1, R7713 += 1 };
  s1 -> s8 [86, 86] { R8769 += 1, R8725 += 1, R7713 += 1 };
  s1 -> s1 [87, 65535] { R8769 += 1, R8725 += 1, R7713 += 1 };
  s2 -> s1 [0, 72] { R8769 += 1, R8725 += 1, R7713 += 1 };
  s2 -> s2 [0, 72] { R8769 += 1, R8725 += 1, R7712 += 1, R7713 += 1 };
  s2 -> s4 [73, 73] { R8769 += 1, R8725 += 1, R7712 += 1, R7713 += 1 };
  s2 -> s5 [73, 73] { R8769 += 1, R8725 += 1, R7713 += 1 };
  s2 -> s6 [73, 73] { R8769 += 1, R8725 += 1, R7712 += 1, R7713 += 1 };
  s2 -> s7 [73, 73] { R8769 += 1, R8725 += 1, R7713 += 1 };
  s2 -> s1 [74, 77] { R8769 += 1, R8725 += 1, R7713 += 1 };
  s2 -> s2 [74, 65535] { R8769 += 1, R8725 += 1, R7712 += 1, R7713 += 1 };
  s2 -> s8 [86, 86] { R8769 += 1, R8725 += 1, R7713 += 1 };
  s2 -> s1 [87, 65535] { R8769 += 1, R8725 += 1, R7713 += 1 };
  s3 -> s1 [0, 72] { R8769 += 1, R8725 += 1, R7713 += 1 };
  s3 -> s2 [0, 72] { R8769 += 1, R8725 += 1, R7712 += 1, R7713 += 1 };
  s3 -> s3 [0, 65535] { R8769 += 1, R8724 += 1, R8725 += 1 };
  s3 -> s4 [73, 73] { R8769 += 1, R8725 += 1, R7712 += 1, R7713 += 1 };
  s3 -> s5 [73, 73] { R8769 += 1, R8725 += 1, R7713 += 1 };
  s3 -> s6 [73, 73] { R8769 += 1, R8725 += 1, R7712 += 1, R7713 += 1 };
  s3 -> s7 [73, 73] { R8769 += 1, R8725 += 1, R7713 += 1 };
  s3 -> s1 [74, 77] { R8769 += 1, R8725 += 1, R7713 += 1 };
  s3 -> s2 [74, 65535] { R8769 += 1, R8725 += 1, R7712 += 1, R7713 += 1 };
  s3 -> s8 [86, 86] { R8769 += 1, R8725 += 1, R7713 += 1 };
  s3 -> s1 [87, 65535] { R8769 += 1, R8725 += 1, R7713 += 1 };
  s4 -> s7 [0, 77] { R8769 += 1, R8725 += 1, R7713 += 1 };
  s4 -> s4 [0, 65535] { R8769 += 1, R8725 += 1, R7712 += 1, R7713 += 1 };
  s4 -> s11 [86, 86] { R8769 += 1, R8725 += 1, R7713 += 1 };
  s4 -> s7 [87, 65535] { R8769 += 1, R8725 += 1, R7713 += 1 };
  s7 -> s7 [0, 77] { R8769 += 1, R8725 += 1, R7713 += 1 };
  s7 -> s11 [86, 86] { R8769 += 1, R8725 += 1, R7713 += 1 };
  s7 -> s7 [87, 65535] { R8769 += 1, R8725 += 1, R7713 += 1 };
  s8 -> s8 [0, 72] { R8769 += 1, R8725 += 1, R7713 += 1 };
  s8 -> s8 [0, 65535] { R8769 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [73, 73] { R8769 += 1, R8725 += 1 };
  s8 -> s11 [73, 73] { R8769 += 1, R8725 += 1 };
  s8 -> s8 [74, 77] { R8769 += 1, R8725 += 1, R7713 += 1 };
  s8 -> s8 [74, 65535] { R8769 += 1, R8725 += 1 };
  s8 -> s8 [86, 65535] { R8769 += 1, R8725 += 1, R7713 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R8769 += 1 };
  s11 -> s11 [0, 77] { R8769 += 1, R8725 += 1, R7713 += 1 };
  s11 -> s12 [0, 65535] { R8769 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R8769 += 1, R8725 += 1 };
  s11 -> s11 [86, 65535] { R8769 += 1, R8725 += 1, R7713 += 1 };
  s12 -> s12 [0, 65535] { R8769 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 72] { R8771 += 1, R8727 += 1, R8560 += 1, R8561 += 1 };
  s0 -> s2 [0, 72] { R8771 += 1, R8727 += 1, R8561 += 1, R8562 += 1 };
  s0 -> s0 [0, 65535] { R8770 += 1, R8771 += 1 };
  s0 -> s3 [0, 65535] { R8771 += 1, R8726 += 1, R8727 += 1 };
  s0 -> s4 [73, 73] { R8771 += 1, R8727 += 1, R8560 += 1, R8561 += 1 };
  s0 -> s5 [73, 73] { R8771 += 1, R8727 += 1, R8561 += 1, R8562 += 1 };
  s0 -> s6 [73, 73] { R8771 += 1, R8727 += 1, R8561 += 1, R8562 += 1 };
  s0 -> s7 [73, 73] { R8771 += 1, R8727 += 1, R8560 += 1, R8561 += 1 };
  s0 -> s1 [74, 65535] { R8771 += 1, R8727 += 1, R8560 += 1, R8561 += 1 };
  s0 -> s2 [74, 65535] { R8771 += 1, R8727 += 1, R8561 += 1, R8562 += 1 };
  s1 -> s1 [0, 72] { R8771 += 1, R8727 += 1, R8560 += 1, R8561 += 1 };
  s1 -> s2 [0, 72] { R8771 += 1, R8727 += 1, R8561 += 1, R8562 += 1 };
  s1 -> s4 [73, 73] { R8771 += 1, R8727 += 1, R8560 += 1, R8561 += 1 };
  s1 -> s5 [73, 73] { R8771 += 1, R8727 += 1, R8561 += 1, R8562 += 1 };
  s1 -> s6 [73, 73] { R8771 += 1, R8727 += 1, R8561 += 1, R8562 += 1 };
  s1 -> s7 [73, 73] { R8771 += 1, R8727 += 1, R8560 += 1, R8561 += 1 };
  s1 -> s1 [74, 65535] { R8771 += 1, R8727 += 1, R8560 += 1, R8561 += 1 };
  s1 -> s2 [74, 65535] { R8771 += 1, R8727 += 1, R8561 += 1, R8562 += 1 };
  s2 -> s2 [0, 72] { R8771 += 1, R8727 += 1, R8561 += 1, R8562 += 1 };
  s2 -> s11 [0, 72] { R8771 += 1, R8727 += 1 };
  s2 -> s12 [73, 73] { R8771 += 1, R8727 += 1 };
  s2 -> s5 [73, 73] { R8771 += 1, R8727 += 1, R8561 += 1, R8562 += 1 };
  s2 -> s6 [73, 73] { R8771 += 1, R8727 += 1, R8561 += 1, R8562 += 1 };
  s2 -> s8 [73, 73] { R8771 += 1, R8727 += 1 };
  s2 -> s2 [74, 65535] { R8771 += 1, R8727 += 1, R8561 += 1, R8562 += 1 };
  s2 -> s11 [74, 65535] { R8771 += 1, R8727 += 1 };
  s3 -> s1 [0, 72] { R8771 += 1, R8727 += 1, R8560 += 1, R8561 += 1 };
  s3 -> s2 [0, 72] { R8771 += 1, R8727 += 1, R8561 += 1, R8562 += 1 };
  s3 -> s3 [0, 65535] { R8771 += 1, R8726 += 1, R8727 += 1 };
  s3 -> s4 [73, 73] { R8771 += 1, R8727 += 1, R8560 += 1, R8561 += 1 };
  s3 -> s5 [73, 73] { R8771 += 1, R8727 += 1, R8561 += 1, R8562 += 1 };
  s3 -> s6 [73, 73] { R8771 += 1, R8727 += 1, R8561 += 1, R8562 += 1 };
  s3 -> s7 [73, 73] { R8771 += 1, R8727 += 1, R8560 += 1, R8561 += 1 };
  s3 -> s1 [74, 65535] { R8771 += 1, R8727 += 1, R8560 += 1, R8561 += 1 };
  s3 -> s2 [74, 65535] { R8771 += 1, R8727 += 1, R8561 += 1, R8562 += 1 };
  s4 -> s4 [0, 65535] { R8771 += 1, R8727 += 1, R8560 += 1, R8561 += 1 };
  s4 -> s5 [0, 65535] { R8771 += 1, R8727 += 1, R8561 += 1, R8562 += 1 };
  s5 -> s5 [0, 65535] { R8771 += 1, R8727 += 1, R8561 += 1, R8562 += 1 };
  s5 -> s8 [0, 65535] { R8771 += 1, R8727 += 1 };
  s8 -> s9 [0, 65535] { R8771 += 1 };
  s8 -> s10 [0, 65535];
  s8 -> s8 [0, 65535] { R8771 += 1, R8727 += 1 };
  s9 -> s9 [0, 65535] { R8771 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s11 [0, 72] { R8771 += 1, R8727 += 1 };
  s11 -> s11 [0, 65535] { R8771 += 1 };
  s11 -> s10 [0, 65535];
  s11 -> s12 [73, 73] { R8771 += 1, R8727 += 1 };
  s11 -> s8 [73, 73] { R8771 += 1, R8727 += 1 };
  s11 -> s11 [74, 65535] { R8771 += 1, R8727 += 1 };
  s12 -> s12 [0, 65535] { R8771 += 1 };
  s12 -> s10 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 72] { R8773 += 1, R8729 += 1, R8670 += 1, R8671 += 1 };
  s0 -> s2 [0, 72] { R8773 += 1, R8729 += 1, R8671 += 1 };
  s0 -> s3 [0, 65535] { R8773 += 1, R8728 += 1, R8729 += 1 };
  s0 -> s0 [0, 65535] { R8772 += 1, R8773 += 1 };
  s0 -> s4 [73, 73] { R8773 += 1, R8729 += 1, R8670 += 1, R8671 += 1 };
  s0 -> s5 [73, 73] { R8773 += 1, R8729 += 1, R8670 += 1, R8671 += 1 };
  s0 -> s6 [73, 73] { R8773 += 1, R8729 += 1, R8671 += 1 };
  s0 -> s7 [73, 73] { R8773 += 1, R8729 += 1, R8671 += 1 };
  s0 -> s2 [74, 76] { R8773 += 1, R8729 += 1, R8671 += 1 };
  s0 -> s1 [74, 65535] { R8773 += 1, R8729 += 1, R8670 += 1, R8671 += 1 };
  s0 -> s2 [87, 65535] { R8773 += 1, R8729 += 1, R8671 += 1 };
  s1 -> s1 [0, 72] { R8773 += 1, R8729 += 1, R8670 += 1, R8671 += 1 };
  s1 -> s2 [0, 72] { R8773 += 1, R8729 += 1, R8671 += 1 };
  s1 -> s4 [73, 73] { R8773 += 1, R8729 += 1, R8670 += 1, R8671 += 1 };
  s1 -> s5 [73, 73] { R8773 += 1, R8729 += 1, R8670 += 1, R8671 += 1 };
  s1 -> s6 [73, 73] { R8773 += 1, R8729 += 1, R8671 += 1 };
  s1 -> s7 [73, 73] { R8773 += 1, R8729 += 1, R8671 += 1 };
  s1 -> s2 [74, 76] { R8773 += 1, R8729 += 1, R8671 += 1 };
  s1 -> s1 [74, 65535] { R8773 += 1, R8729 += 1, R8670 += 1, R8671 += 1 };
  s1 -> s2 [87, 65535] { R8773 += 1, R8729 += 1, R8671 += 1 };
  s2 -> s2 [0, 72] { R8773 += 1, R8729 += 1, R8671 += 1 };
  s2 -> s2 [0, 65535] { R8773 += 1 };
  s2 -> s9 [0, 65535];
  s2 -> s6 [73, 73] { R8773 += 1, R8729 += 1 };
  s2 -> s7 [73, 73] { R8773 += 1, R8729 += 1 };
  s2 -> s2 [74, 76] { R8773 += 1, R8729 += 1, R8671 += 1 };
  s2 -> s2 [74, 65535] { R8773 += 1, R8729 += 1 };
  s2 -> s2 [87, 65535] { R8773 += 1, R8729 += 1, R8671 += 1 };
  s3 -> s1 [0, 72] { R8773 += 1, R8729 += 1, R8670 += 1, R8671 += 1 };
  s3 -> s2 [0, 72] { R8773 += 1, R8729 += 1, R8671 += 1 };
  s3 -> s3 [0, 65535] { R8773 += 1, R8728 += 1, R8729 += 1 };
  s3 -> s4 [73, 73] { R8773 += 1, R8729 += 1, R8670 += 1, R8671 += 1 };
  s3 -> s5 [73, 73] { R8773 += 1, R8729 += 1, R8670 += 1, R8671 += 1 };
  s3 -> s6 [73, 73] { R8773 += 1, R8729 += 1, R8671 += 1 };
  s3 -> s7 [73, 73] { R8773 += 1, R8729 += 1, R8671 += 1 };
  s3 -> s2 [74, 76] { R8773 += 1, R8729 += 1, R8671 += 1 };
  s3 -> s1 [74, 65535] { R8773 += 1, R8729 += 1, R8670 += 1, R8671 += 1 };
  s3 -> s2 [87, 65535] { R8773 += 1, R8729 += 1, R8671 += 1 };
  s5 -> s7 [0, 76] { R8773 += 1, R8729 += 1, R8671 += 1 };
  s5 -> s5 [0, 65535] { R8773 += 1, R8729 += 1, R8670 += 1, R8671 += 1 };
  s5 -> s7 [87, 65535] { R8773 += 1, R8729 += 1, R8671 += 1 };
  s6 -> s9 [0, 65535];
  s6 -> s6 [0, 65535] { R8773 += 1 };
  s7 -> s7 [0, 76] { R8773 += 1, R8729 += 1, R8671 += 1 };
  s7 -> s8 [0, 65535] { R8773 += 1 };
  s7 -> s9 [0, 65535];
  s7 -> s7 [0, 65535] { R8773 += 1, R8729 += 1 };
  s7 -> s7 [87, 65535] { R8773 += 1, R8729 += 1, R8671 += 1 };
  s8 -> s8 [0, 65535] { R8773 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s8, s2, s9, s6, s7;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
synchronised {  // Automata constraining P54
automaton P54_0 {
  init s0;
  s0 -> s1 [109, 109];
  accepting s1;
};
};
constraint R2 = R8773 && R20 - R8773 = -1 && R21 = R8773 && R22 - R8773 = -1 && R23 = R8773 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R7715 + -1*R7713 - R53 = 0 && R52 + R7714 + R7712 = 0 && R8714 = 0 && R8715 = 0 && R8722 = 0 && R8723 = 0 && R8724 = 0 && R8725 = 0 && R8726 = 0 && R8727 = 0 && R8728 = 0 && R8729 = 0 && R8730 = 0 && R8731 = R8773 && R8732 = 0 && R8733 = R8773 && R8734 = 0 && R8735 = R8773 && R8736 = 0 && R8737 = R8773 && R8738 = 0 && R8739 = R8773 && R8740 = 0 && R8741 = R8773 && R8742 = 0 && R8743 = R8773 && R8744 = 0 && R8745 = R8773 && R8746 = 0 && R8747 = R8773 && R8748 = 0 && R8749 = R8773 && R8750 = 0 && R8751 = R8773 && R8752 = 0 && R8753 = R8773 && R8754 = 0 && R8755 = R8773 && R8756 = 0 && R8757 = R8773 && R8758 = 0 && R8759 = R8773 && R8760 = 0 && R8761 = R8773 && R8762 = 0 && R8763 = R8773 && R8764 = 0 && R8765 = R8773 && R8766 = 0 && R8767 = R8773 && R8768 = 0 && R8769 = R8773 && R8770 = 0 && R8771 = R8773 && R8772 = 0 && -1 < R1 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R7715 + -1*R7713 - R53 < 1 && 0 < R8773 && (R1 != 0 || R17 = 0 || (R8674 = 0 && R8675 = 0)) && (R1 != 0 || R17 = 0 || (R8676 = 0 && R8677 = 0)) && (R1 != 0 || R17 = 0 || (R8678 = 0 && R8679 = 0)) && (R1 != 0 || R17 = 0 || (R8680 = 0 && R8681 = 0)) && (R1 != 0 || R17 = 0 || (R8682 = 0 && R8683 = 0)) && (R1 != 0 || R17 = 0 || (R8684 = 0 && R8685 = 0)) && (R1 != 0 || R17 = 0 || (R8686 = 0 && R8687 = 0)) && (R1 != 0 || R17 = 0 || (R8688 = 0 && R8689 = 0)) && (R1 != 0 || R17 = 0 || (R8690 = 0 && R8691 = 0)) && (R1 != 0 || R17 = 0 || (R8692 = 0 && R8693 = 0)) && (R48 + R7711 + R7708 != 0 || ((R42 + R72 + R70 != 0 || R43 + R73 + R71 + -1*R7715 + -1*R7713 - R53 = 0 || R53 + R7715 + R7713 < 1) && (R42 + R72 + R70 = 0 || R53 + R7715 + R7713 < 1))) && (R48 + R7711 + R7708 != 0 || ((R46 + R7709 + R7706 != 0 || R47 + R7710 + R7707 + -1*R7715 + -1*R7713 - R53 = 0 || R53 + R7715 + R7713 < 1) && (R46 + R7709 + R7706 = 0 || R53 + R7715 + R7713 < 1))) && (R8674 != 0 || R1 = R8675 || R1 < 1) && (R8676 != 0 || R1 = R8677 || R1 < 1) && (R8678 != 0 || R1 = R8679 || R1 < 1) && (R8680 != 0 || R1 = R8681 || R1 < 1) && (R8682 != 0 || R1 = R8683 || R1 < 1) && (R8684 != 0 || R1 = R8685 || R1 < 1) && (R8686 != 0 || R1 = R8687 || R1 < 1) && (R8688 != 0 || R1 = R8689 || R1 < 1) && (R8690 != 0 || R1 = R8691 || R1 < 1) && (R8692 != 0 || R1 = R8693 || R1 < 1) && (R18 = 0 || (R8712 = 0 && R8713 = 0)) && (R18 = 0 || (R8716 = 0 && R8717 = 0)) && (R18 = 0 || (R8718 = 0 && R8719 = 0)) && (R18 = 0 || (R8720 = 0 && R8721 = 0)) && (R19 = 0 || (R8694 = 0 && R8695 = 0)) && (R19 = 0 || (R8696 = 0 && R8697 = 0)) && (R19 = 0 || (R8698 = 0 && R8699 = 0)) && (R19 = 0 || (R8700 = 0 && R8701 = 0)) && (R19 = 0 || (R8702 = 0 && R8703 = 0)) && (R19 = 0 || (R8704 = 0 && R8705 = 0)) && (R19 = 0 || (R8706 = 0 && R8707 = 0)) && (R19 = 0 || (R8708 = 0 && R8709 = 0)) && (R19 = 0 || (R8710 = 0 && R8711 = 0)) && (R48 + R7711 + R7708 = 0 || (R42 + R72 + R70 = 0 && R43 + R73 + R71 + -1*R7715 + -1*R7713 - R53 = 0)) && (R48 + R7711 + R7708 = 0 || (R46 + R7709 + R7706 = 0 && R47 + R7710 + R7707 + -1*R7715 + -1*R7713 - R53 = 0)) && (R58 + R8565 + R8562 = 0 || (R56 + R8563 + R8560 = 0 && R57 + R8564 + R8561 = 0)) && (R58 + R8565 + R8562 = 0 || (R62 + R8672 + R8670 = 0 && R63 + R8673 + R8671 = 0)) && (R8674 = 0 || R1 < 1) && (R8676 = 0 || R1 < 1) && (R8678 = 0 || R1 < 1) && (R8680 = 0 || R1 < 1) && (R8682 = 0 || R1 < 1) && (R8684 = 0 || R1 < 1) && (R8686 = 0 || R1 < 1) && (R8688 = 0 || R1 < 1) && (R8690 = 0 || R1 < 1) && (R8692 = 0 || R1 < 1);
// End of Parikh automata intersection problem
