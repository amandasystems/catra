// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R12, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R3890, R3891, R3892, R3893, R3894, R3895, R3896, R3897, R3898, R3899, R4, R40, R42, R43, R46, R47, R4744, R4745, R4746, R4747, R4748, R4749, R48, R4854, R4855, R4856, R4857, R4858, R4859, R4860, R4861, R4862, R4863, R4864, R4865, R4866, R4867, R4868, R4869, R4870, R4871, R4872, R4873, R4874, R4875, R4876, R4877, R4878, R4879, R4880, R4881, R4882, R4883, R4884, R4885, R4886, R4887, R4888, R4889, R4890, R4891, R4892, R4893, R4894, R4895, R4896, R4897, R4898, R4899, R4900, R4901, R4902, R4903, R4904, R4905, R4906, R4907, R4908, R4909, R4910, R4911, R4912, R4913, R4914, R4915, R4916, R4917, R4918, R4919, R4920, R4921, R4922, R4923, R4924, R4925, R4926, R4927, R4928, R4929, R4930, R4931, R4932, R4933, R4934, R4935, R4936, R4937, R4938, R4939, R4940, R4941, R4942, R4943, R4944, R4945, R4946, R4947, R4948, R4949, R4950, R4951, R4952, R4953, R4954, R4955, R4956, R4957, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R70, R71, R72, R73, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 72];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [73, 73];
  s0 -> s1 [74, 65535];
  s1 -> s1 [0, 72];
  s1 -> s2 [73, 73];
  s1 -> s1 [74, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R21 += 1 };
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R25 += 1 };
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R4878 += 1, R4879 += 1 };
  s0 -> s1 [0, 65535] { R4879 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R4879 += 1, R19 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 72] { R4881 += 1 };
  s0 -> s0 [0, 65535] { R4880 += 1, R4881 += 1 };
  s0 -> s2 [73, 73] { R4881 += 1 };
  s0 -> s3 [73, 73] { R4881 += 1 };
  s0 -> s1 [78, 65535] { R4881 += 1 };
  s1 -> s1 [0, 72] { R4881 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R4881 += 1 };
  s1 -> s3 [73, 73] { R4881 += 1 };
  s1 -> s1 [78, 65535] { R4881 += 1 };
  s2 -> s2 [0, 73] { R4881 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [78, 65535] { R4881 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 72] { R4883 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R4882 += 1, R4883 += 1 };
  s0 -> s2 [73, 73] { R4883 += 1, R38 += 1 };
  s0 -> s3 [73, 73] { R4883 += 1, R38 += 1 };
  s0 -> s1 [74, 65535] { R4883 += 1, R38 += 1 };
  s1 -> s1 [0, 72] { R4883 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R4883 += 1, R38 += 1 };
  s1 -> s3 [73, 73] { R4883 += 1, R38 += 1 };
  s1 -> s1 [74, 65535] { R4883 += 1, R38 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R4883 += 1, R38 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 72] { R4885 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R4884 += 1, R4885 += 1 };
  s0 -> s2 [73, 73] { R4885 += 1, R40 += 1 };
  s0 -> s3 [73, 73] { R4885 += 1, R40 += 1 };
  s0 -> s1 [74, 65535] { R4885 += 1, R40 += 1 };
  s1 -> s1 [0, 72] { R4885 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R4885 += 1, R40 += 1 };
  s1 -> s3 [73, 73] { R4885 += 1, R40 += 1 };
  s1 -> s1 [74, 65535] { R4885 += 1, R40 += 1 };
  s2 -> s2 [0, 65535] { R4885 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 72] { R4887 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R4886 += 1, R4887 += 1 };
  s0 -> s2 [73, 73] { R4887 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [73, 73] { R4887 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [74, 65535] { R4887 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 72] { R4887 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R4887 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [73, 73] { R4887 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [74, 65535] { R4887 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535] { R4887 += 1, R42 += 1, R43 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 72] { R4889 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R4888 += 1, R4889 += 1 };
  s0 -> s2 [73, 73] { R4889 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [73, 73] { R4889 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [74, 65535] { R4889 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 72] { R4889 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R4889 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [73, 73] { R4889 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [74, 65535] { R4889 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535] { R4889 += 1, R46 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 72] { R4891 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R4890 += 1, R4891 += 1 };
  s0 -> s2 [73, 73] { R4891 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [73, 73] { R4891 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [74, 65535] { R4891 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 72] { R4891 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R4891 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [73, 73] { R4891 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [74, 65535] { R4891 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R4891 += 1, R52 += 1, R53 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 72] { R4893 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R4892 += 1, R4893 += 1 };
  s0 -> s2 [73, 73] { R4893 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [73, 73] { R4893 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [74, 65535] { R4893 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 72] { R4893 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R4893 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [73, 73] { R4893 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [74, 65535] { R4893 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R4893 += 1, R56 += 1, R57 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 72] { R4895 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R4894 += 1, R4895 += 1 };
  s0 -> s2 [73, 73] { R4895 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [73, 73] { R4895 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [74, 65535] { R4895 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 72] { R4895 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R4895 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [73, 73] { R4895 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [74, 65535] { R4895 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535] { R4895 += 1, R62 += 1, R63 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 72] { R4915 += 1 };
  s0 -> s0 [0, 65535] { R4914 += 1, R4915 += 1 };
  s0 -> s2 [73, 73] { R4915 += 1 };
  s0 -> s1 [74, 65535] { R4915 += 1 };
  s1 -> s1 [0, 72] { R4915 += 1 };
  s1 -> s2 [73, 73] { R4915 += 1 };
  s1 -> s1 [74, 65535] { R4915 += 1 };
  s2 -> s2 [0, 65535] { R4915 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R4916 += 1, R4917 += 1 };
  s0 -> s1 [0, 65535] { R4917 += 1, R1 += 1 };
  s1 -> s1 [0, 65535] { R4917 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 72] { R4919 += 1 };
  s0 -> s2 [0, 65535] { R4919 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R4918 += 1, R4919 += 1 };
  s0 -> s3 [73, 73] { R4919 += 1 };
  s0 -> s1 [74, 65535] { R4919 += 1 };
  s1 -> s1 [0, 72] { R4919 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [73, 73] { R4919 += 1 };
  s1 -> s1 [74, 65535] { R4919 += 1 };
  s2 -> s1 [0, 72] { R4919 += 1 };
  s2 -> s2 [0, 65535] { R4919 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [73, 73] { R4919 += 1 };
  s2 -> s1 [74, 65535] { R4919 += 1 };
  s3 -> s3 [0, 65535] { R4919 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 72] { R4921 += 1, R4859 += 1 };
  s0 -> s0 [0, 65535] { R4920 += 1, R4921 += 1 };
  s0 -> s2 [0, 65535] { R4921 += 1, R4858 += 1, R4859 += 1 };
  s0 -> s1 [74, 65535] { R4921 += 1, R4859 += 1 };
  s1 -> s1 [0, 72] { R4921 += 1, R4859 += 1 };
  s1 -> s1 [0, 65535] { R4921 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [74, 65535] { R4921 += 1, R4859 += 1 };
  s2 -> s1 [0, 72] { R4921 += 1, R4859 += 1 };
  s2 -> s2 [0, 65535] { R4921 += 1, R4858 += 1, R4859 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [74, 65535] { R4921 += 1, R4859 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R4923 += 1, R4861 += 1, R17 += 1 };
  s0 -> s2 [0, 65535] { R4923 += 1, R4860 += 1, R4861 += 1 };
  s0 -> s0 [0, 65535] { R4922 += 1, R4923 += 1 };
  s1 -> s4 [0, 65535] { R4923 += 1 };
  s1 -> s1 [0, 65535] { R4923 += 1, R4861 += 1, R17 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R4923 += 1, R4861 += 1, R17 += 1 };
  s2 -> s2 [0, 65535] { R4923 += 1, R4860 += 1, R4861 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4923 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 73] { R4925 += 1, R4863 += 1 };
  s0 -> s2 [0, 65535] { R4925 += 1, R4862 += 1, R4863 += 1 };
  s0 -> s0 [0, 65535] { R4924 += 1, R4925 += 1 };
  s0 -> s1 [77, 65535] { R4925 += 1, R4863 += 1 };
  s1 -> s1 [0, 73] { R4925 += 1, R4863 += 1 };
  s1 -> s1 [0, 65535] { R4925 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [77, 65535] { R4925 += 1, R4863 += 1 };
  s2 -> s1 [0, 73] { R4925 += 1, R4863 += 1 };
  s2 -> s2 [0, 65535] { R4925 += 1, R4862 += 1, R4863 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [77, 65535] { R4925 += 1, R4863 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s0 [0, 65535] { R4926 += 1, R4927 += 1 };
  s0 -> s1 [0, 65535] { R4927 += 1, R4865 += 1, R67 += 1 };
  s0 -> s2 [0, 65535] { R4927 += 1, R4864 += 1, R4865 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R4927 += 1, R4865 += 1, R67 += 1 };
  s1 -> s4 [0, 65535] { R4927 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R4927 += 1, R4865 += 1, R67 += 1 };
  s2 -> s2 [0, 65535] { R4927 += 1, R4864 += 1, R4865 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4927 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 76] { R4929 += 1, R4867 += 1 };
  s0 -> s2 [0, 65535] { R4929 += 1, R4866 += 1, R4867 += 1 };
  s0 -> s3 [0, 65535] { R4929 += 1, R4867 += 1, R69 += 1 };
  s0 -> s0 [0, 65535] { R4928 += 1, R4929 += 1 };
  s0 -> s1 [78, 65535] { R4929 += 1, R4867 += 1 };
  s1 -> s1 [0, 76] { R4929 += 1, R4867 += 1 };
  s1 -> s1 [0, 65535] { R4929 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [78, 65535] { R4929 += 1, R4867 += 1 };
  s2 -> s1 [0, 76] { R4929 += 1, R4867 += 1 };
  s2 -> s2 [0, 65535] { R4929 += 1, R4866 += 1, R4867 += 1 };
  s2 -> s3 [0, 65535] { R4929 += 1, R4867 += 1, R69 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [78, 65535] { R4929 += 1, R4867 += 1 };
  s3 -> s1 [0, 76] { R4929 += 1, R4867 += 1 };
  s3 -> s4 [0, 65535] { R4929 += 1 };
  s3 -> s3 [0, 65535] { R4929 += 1, R4867 += 1, R69 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [78, 65535] { R4929 += 1, R4867 += 1 };
  s4 -> s4 [0, 65535] { R4929 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 76] { R4931 += 1, R4869 += 1, R73 += 1 };
  s0 -> s2 [0, 65535] { R4931 += 1, R4868 += 1, R4869 += 1 };
  s0 -> s0 [0, 65535] { R4930 += 1, R4931 += 1 };
  s0 -> s3 [0, 65535] { R4931 += 1, R4869 += 1, R72 += 1, R73 += 1 };
  s0 -> s1 [78, 65535] { R4931 += 1, R4869 += 1, R73 += 1 };
  s1 -> s1 [0, 76] { R4931 += 1, R4869 += 1, R73 += 1 };
  s1 -> s1 [0, 65535] { R4931 += 1, R4869 += 1 };
  s1 -> s4 [0, 65535] { R4931 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [78, 65535] { R4931 += 1, R4869 += 1, R73 += 1 };
  s2 -> s1 [0, 76] { R4931 += 1, R4869 += 1, R73 += 1 };
  s2 -> s2 [0, 65535] { R4931 += 1, R4868 += 1, R4869 += 1 };
  s2 -> s3 [0, 65535] { R4931 += 1, R4869 += 1, R72 += 1, R73 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [78, 65535] { R4931 += 1, R4869 += 1, R73 += 1 };
  s3 -> s1 [0, 76] { R4931 += 1, R4869 += 1, R73 += 1 };
  s3 -> s4 [0, 65535] { R4931 += 1 };
  s3 -> s3 [0, 65535] { R4931 += 1, R4869 += 1, R72 += 1, R73 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [78, 65535] { R4931 += 1, R4869 += 1, R73 += 1 };
  s4 -> s4 [0, 65535] { R4931 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R4933 += 1, R4871 += 1, R3894 += 1, R3895 += 1 };
  s0 -> s0 [0, 65535] { R4932 += 1, R4933 += 1 };
  s0 -> s2 [0, 65535] { R4933 += 1, R4870 += 1, R4871 += 1 };
  s0 -> s3 [0, 65535] { R4933 += 1, R4871 += 1 };
  s1 -> s4 [0, 65535] { R4933 += 1 };
  s1 -> s1 [0, 65535] { R4933 += 1, R4871 += 1, R3894 += 1, R3895 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R4933 += 1, R4871 += 1 };
  s2 -> s1 [0, 65535] { R4933 += 1, R4871 += 1, R3894 += 1, R3895 += 1 };
  s2 -> s2 [0, 65535] { R4933 += 1, R4870 += 1, R4871 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R4933 += 1, R4871 += 1 };
  s3 -> s4 [0, 65535] { R4933 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R4933 += 1, R4871 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R4933 += 1 };
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 77] { R4935 += 1, R4873 += 1, R3899 += 1 };
  s0 -> s0 [0, 65535] { R4934 += 1, R4935 += 1 };
  s0 -> s1 [0, 65535] { R4935 += 1, R4873 += 1 };
  s0 -> s2 [0, 65535] { R4935 += 1, R4872 += 1, R4873 += 1 };
  s0 -> s1 [86, 65535] { R4935 += 1, R4873 += 1, R3899 += 1 };
  s1 -> s1 [0, 77] { R4935 += 1, R4873 += 1, R3899 += 1 };
  s1 -> s1 [0, 65535] { R4935 += 1, R4873 += 1 };
  s1 -> s4 [0, 65535] { R4935 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [86, 65535] { R4935 += 1, R4873 += 1, R3899 += 1 };
  s2 -> s1 [0, 77] { R4935 += 1, R4873 += 1, R3899 += 1 };
  s2 -> s1 [0, 65535] { R4935 += 1, R4873 += 1 };
  s2 -> s2 [0, 65535] { R4935 += 1, R4872 += 1, R4873 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [86, 65535] { R4935 += 1, R4873 += 1, R3899 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4935 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s0 [0, 65535] { R4936 += 1, R4937 += 1 };
  s0 -> s1 [0, 65535] { R4937 += 1, R4874 += 1, R4875 += 1 };
  s0 -> s2 [0, 65535] { R4937 += 1, R4875 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R4937 += 1, R4874 += 1, R4875 += 1 };
  s1 -> s2 [0, 65535] { R4937 += 1, R4875 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R4937 += 1 };
  s2 -> s2 [0, 65535] { R4937 += 1, R4875 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4937 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 76] { R4939 += 1, R4877 += 1, R4857 += 1 };
  s0 -> s1 [0, 65535] { R4939 += 1, R4877 += 1 };
  s0 -> s2 [0, 65535] { R4939 += 1, R4876 += 1, R4877 += 1 };
  s0 -> s0 [0, 65535] { R4938 += 1, R4939 += 1 };
  s0 -> s3 [77, 77] { R4939 += 1, R4877 += 1, R4857 += 1 };
  s0 -> s4 [77, 77] { R4939 += 1, R4877 += 1, R4857 += 1 };
  s0 -> s1 [87, 65535] { R4939 += 1, R4877 += 1, R4857 += 1 };
  s1 -> s1 [0, 76] { R4939 += 1, R4877 += 1, R4857 += 1 };
  s1 -> s1 [0, 65535] { R4939 += 1, R4877 += 1 };
  s1 -> s5 [0, 65535] { R4939 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [77, 77] { R4939 += 1, R4877 += 1, R4857 += 1 };
  s1 -> s4 [77, 77] { R4939 += 1, R4877 += 1, R4857 += 1 };
  s1 -> s1 [87, 65535] { R4939 += 1, R4877 += 1, R4857 += 1 };
  s2 -> s1 [0, 76] { R4939 += 1, R4877 += 1, R4857 += 1 };
  s2 -> s1 [0, 65535] { R4939 += 1, R4877 += 1 };
  s2 -> s2 [0, 65535] { R4939 += 1, R4876 += 1, R4877 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [77, 77] { R4939 += 1, R4877 += 1, R4857 += 1 };
  s2 -> s4 [77, 77] { R4939 += 1, R4877 += 1, R4857 += 1 };
  s2 -> s1 [87, 65535] { R4939 += 1, R4877 += 1, R4857 += 1 };
  s3 -> s3 [0, 65535] { R4939 += 1, R4877 += 1 };
  s3 -> s5 [0, 65535] { R4939 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 77] { R4939 += 1, R4877 += 1, R4857 += 1 };
  s4 -> s5 [0, 65535] { R4939 += 1 };
  s4 -> s4 [0, 65535] { R4939 += 1, R4877 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [87, 65535] { R4939 += 1, R4877 += 1, R4857 += 1 };
  s5 -> s5 [0, 65535] { R4939 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R4941 += 1, R4897 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R4940 += 1, R4941 += 1 };
  s0 -> s2 [0, 65535] { R4941 += 1, R4896 += 1, R4897 += 1 };
  s1 -> s4 [0, 65535] { R4941 += 1 };
  s1 -> s1 [0, 65535] { R4941 += 1, R4897 += 1, R18 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R4941 += 1, R4897 += 1, R18 += 1 };
  s2 -> s2 [0, 65535] { R4941 += 1, R4896 += 1, R4897 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4941 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 72] { R4943 += 1, R4899 += 1 };
  s0 -> s0 [0, 65535] { R4942 += 1, R4943 += 1 };
  s0 -> s2 [0, 65535] { R4943 += 1, R4898 += 1, R4899 += 1 };
  s0 -> s3 [73, 73] { R4943 += 1, R4899 += 1 };
  s0 -> s4 [73, 73] { R4943 += 1, R4899 += 1 };
  s0 -> s5 [77, 77] { R4943 += 1, R4899 += 1 };
  s0 -> s1 [78, 65535] { R4943 += 1, R4899 += 1 };
  s1 -> s1 [0, 72] { R4943 += 1, R4899 += 1 };
  s1 -> s3 [73, 73] { R4943 += 1, R4899 += 1 };
  s1 -> s4 [73, 73] { R4943 += 1, R4899 += 1 };
  s1 -> s5 [77, 77] { R4943 += 1, R4899 += 1 };
  s1 -> s1 [78, 65535] { R4943 += 1, R4899 += 1 };
  s2 -> s1 [0, 72] { R4943 += 1, R4899 += 1 };
  s2 -> s2 [0, 65535] { R4943 += 1, R4898 += 1, R4899 += 1 };
  s2 -> s3 [73, 73] { R4943 += 1, R4899 += 1 };
  s2 -> s4 [73, 73] { R4943 += 1, R4899 += 1 };
  s2 -> s5 [77, 77] { R4943 += 1, R4899 += 1 };
  s2 -> s1 [78, 65535] { R4943 += 1, R4899 += 1 };
  s4 -> s4 [0, 73] { R4943 += 1, R4899 += 1 };
  s4 -> s8 [77, 77] { R4943 += 1, R4899 += 1 };
  s4 -> s4 [78, 65535] { R4943 += 1, R4899 += 1 };
  s5 -> s5 [0, 72] { R4943 += 1, R4899 += 1 };
  s5 -> s5 [0, 65535] { R4943 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [73, 73] { R4943 += 1, R4899 += 1 };
  s5 -> s8 [73, 73] { R4943 += 1, R4899 += 1 };
  s5 -> s5 [77, 65535] { R4943 += 1, R4899 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R4943 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 73] { R4943 += 1, R4899 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R4943 += 1 };
  s8 -> s8 [77, 65535] { R4943 += 1, R4899 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 72] { R4945 += 1, R4901 += 1, R66 += 1 };
  s0 -> s2 [0, 65535] { R4945 += 1, R4900 += 1, R4901 += 1 };
  s0 -> s0 [0, 65535] { R4944 += 1, R4945 += 1 };
  s0 -> s3 [73, 73] { R4945 += 1, R4901 += 1, R66 += 1 };
  s0 -> s4 [73, 73] { R4945 += 1, R4901 += 1, R66 += 1 };
  s0 -> s1 [74, 65535] { R4945 += 1, R4901 += 1, R66 += 1 };
  s1 -> s1 [0, 72] { R4945 += 1, R4901 += 1, R66 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R4945 += 1 };
  s1 -> s3 [73, 73] { R4945 += 1, R4901 += 1, R66 += 1 };
  s1 -> s4 [73, 73] { R4945 += 1, R4901 += 1, R66 += 1 };
  s1 -> s1 [74, 65535] { R4945 += 1, R4901 += 1, R66 += 1 };
  s2 -> s1 [0, 72] { R4945 += 1, R4901 += 1, R66 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R4945 += 1, R4900 += 1, R4901 += 1 };
  s2 -> s3 [73, 73] { R4945 += 1, R4901 += 1, R66 += 1 };
  s2 -> s4 [73, 73] { R4945 += 1, R4901 += 1, R66 += 1 };
  s2 -> s1 [74, 65535] { R4945 += 1, R4901 += 1, R66 += 1 };
  s3 -> s3 [0, 65535] { R4945 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R4945 += 1, R4901 += 1, R66 += 1 };
  s4 -> s5 [0, 65535] { R4945 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R4945 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 72] { R4947 += 1, R4903 += 1, R68 += 1 };
  s0 -> s0 [0, 65535] { R4946 += 1, R4947 += 1 };
  s0 -> s2 [0, 65535] { R4947 += 1, R4902 += 1, R4903 += 1 };
  s0 -> s3 [73, 73] { R4947 += 1, R4903 += 1, R68 += 1 };
  s0 -> s4 [73, 73] { R4947 += 1, R4903 += 1, R68 += 1 };
  s0 -> s1 [74, 65535] { R4947 += 1, R4903 += 1, R68 += 1 };
  s1 -> s1 [0, 72] { R4947 += 1, R4903 += 1, R68 += 1 };
  s1 -> s1 [0, 65535] { R4947 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R4947 += 1, R4903 += 1, R68 += 1 };
  s1 -> s4 [73, 73] { R4947 += 1, R4903 += 1, R68 += 1 };
  s1 -> s1 [74, 65535] { R4947 += 1, R4903 += 1, R68 += 1 };
  s2 -> s1 [0, 72] { R4947 += 1, R4903 += 1, R68 += 1 };
  s2 -> s2 [0, 65535] { R4947 += 1, R4902 += 1, R4903 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R4947 += 1, R4903 += 1, R68 += 1 };
  s2 -> s4 [73, 73] { R4947 += 1, R4903 += 1, R68 += 1 };
  s2 -> s1 [74, 65535] { R4947 += 1, R4903 += 1, R68 += 1 };
  s3 -> s3 [0, 65535] { R4947 += 1, R4903 += 1, R68 += 1 };
  s3 -> s6 [0, 65535] { R4947 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R4947 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R4947 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 72] { R4949 += 1, R4905 += 1, R70 += 1, R71 += 1 };
  s0 -> s2 [0, 65535] { R4949 += 1, R4904 += 1, R4905 += 1 };
  s0 -> s0 [0, 65535] { R4948 += 1, R4949 += 1 };
  s0 -> s3 [73, 73] { R4949 += 1, R4905 += 1, R70 += 1, R71 += 1 };
  s0 -> s4 [73, 73] { R4949 += 1, R4905 += 1, R70 += 1, R71 += 1 };
  s0 -> s1 [74, 65535] { R4949 += 1, R4905 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 72] { R4949 += 1, R4905 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 65535] { R4949 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R4949 += 1, R4905 += 1, R70 += 1, R71 += 1 };
  s1 -> s4 [73, 73] { R4949 += 1, R4905 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [74, 65535] { R4949 += 1, R4905 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [0, 72] { R4949 += 1, R4905 += 1, R70 += 1, R71 += 1 };
  s2 -> s2 [0, 65535] { R4949 += 1, R4904 += 1, R4905 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R4949 += 1, R4905 += 1, R70 += 1, R71 += 1 };
  s2 -> s4 [73, 73] { R4949 += 1, R4905 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [74, 65535] { R4949 += 1, R4905 += 1, R70 += 1, R71 += 1 };
  s3 -> s3 [0, 65535] { R4949 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R4949 += 1 };
  s4 -> s4 [0, 65535] { R4949 += 1, R4905 += 1, R70 += 1, R71 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R4949 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 72] { R4951 += 1, R4907 += 1, R3890 += 1, R3891 += 1 };
  s0 -> s2 [0, 72] { R4951 += 1, R4907 += 1, R3891 += 1, R3892 += 1 };
  s0 -> s0 [0, 65535] { R4950 += 1, R4951 += 1 };
  s0 -> s3 [0, 65535] { R4951 += 1, R4906 += 1, R4907 += 1 };
  s0 -> s4 [73, 73] { R4951 += 1, R4907 += 1, R3890 += 1, R3891 += 1 };
  s0 -> s5 [73, 73] { R4951 += 1, R4907 += 1, R3891 += 1, R3892 += 1 };
  s0 -> s6 [73, 73] { R4951 += 1, R4907 += 1, R3891 += 1, R3892 += 1 };
  s0 -> s7 [73, 73] { R4951 += 1, R4907 += 1, R3890 += 1, R3891 += 1 };
  s0 -> s1 [74, 65535] { R4951 += 1, R4907 += 1, R3890 += 1, R3891 += 1 };
  s0 -> s2 [74, 65535] { R4951 += 1, R4907 += 1, R3891 += 1, R3892 += 1 };
  s1 -> s1 [0, 72] { R4951 += 1, R4907 += 1, R3890 += 1, R3891 += 1 };
  s1 -> s2 [0, 72] { R4951 += 1, R4907 += 1, R3891 += 1, R3892 += 1 };
  s1 -> s4 [73, 73] { R4951 += 1, R4907 += 1, R3890 += 1, R3891 += 1 };
  s1 -> s5 [73, 73] { R4951 += 1, R4907 += 1, R3891 += 1, R3892 += 1 };
  s1 -> s6 [73, 73] { R4951 += 1, R4907 += 1, R3891 += 1, R3892 += 1 };
  s1 -> s7 [73, 73] { R4951 += 1, R4907 += 1, R3890 += 1, R3891 += 1 };
  s1 -> s1 [74, 65535] { R4951 += 1, R4907 += 1, R3890 += 1, R3891 += 1 };
  s1 -> s2 [74, 65535] { R4951 += 1, R4907 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s2 [0, 72] { R4951 += 1, R4907 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R4951 += 1 };
  s2 -> s5 [73, 73] { R4951 += 1, R4907 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s6 [73, 73] { R4951 += 1, R4907 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s2 [74, 65535] { R4951 += 1, R4907 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s1 [0, 72] { R4951 += 1, R4907 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s2 [0, 72] { R4951 += 1, R4907 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s3 [0, 65535] { R4951 += 1, R4906 += 1, R4907 += 1 };
  s3 -> s4 [73, 73] { R4951 += 1, R4907 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s5 [73, 73] { R4951 += 1, R4907 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s6 [73, 73] { R4951 += 1, R4907 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s7 [73, 73] { R4951 += 1, R4907 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s1 [74, 65535] { R4951 += 1, R4907 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s2 [74, 65535] { R4951 += 1, R4907 += 1, R3891 += 1, R3892 += 1 };
  s4 -> s4 [0, 65535] { R4951 += 1, R4907 += 1, R3890 += 1, R3891 += 1 };
  s4 -> s5 [0, 65535] { R4951 += 1, R4907 += 1, R3891 += 1, R3892 += 1 };
  s5 -> s9 [0, 65535] { R4951 += 1 };
  s5 -> s5 [0, 65535] { R4951 += 1, R4907 += 1, R3891 += 1, R3892 += 1 };
  s5 -> s8 [0, 65535];
  s6 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R4951 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R4951 += 1 };
  s9 -> s8 [0, 65535];
  accepting s8, s5, s2, s9, s6;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 72] { R4953 += 1, R4909 += 1, R3896 += 1, R3897 += 1 };
  s0 -> s2 [0, 72] { R4953 += 1, R4909 += 1, R3897 += 1 };
  s0 -> s3 [0, 65535] { R4953 += 1, R4908 += 1, R4909 += 1 };
  s0 -> s0 [0, 65535] { R4952 += 1, R4953 += 1 };
  s0 -> s4 [73, 73] { R4953 += 1, R4909 += 1, R3896 += 1, R3897 += 1 };
  s0 -> s5 [73, 73] { R4953 += 1, R4909 += 1, R3896 += 1, R3897 += 1 };
  s0 -> s6 [73, 73] { R4953 += 1, R4909 += 1, R3897 += 1 };
  s0 -> s7 [73, 73] { R4953 += 1, R4909 += 1, R3897 += 1 };
  s0 -> s2 [74, 77] { R4953 += 1, R4909 += 1, R3897 += 1 };
  s0 -> s1 [74, 65535] { R4953 += 1, R4909 += 1, R3896 += 1, R3897 += 1 };
  s0 -> s8 [86, 86] { R4953 += 1, R4909 += 1, R3897 += 1 };
  s0 -> s2 [87, 65535] { R4953 += 1, R4909 += 1, R3897 += 1 };
  s1 -> s1 [0, 72] { R4953 += 1, R4909 += 1, R3896 += 1, R3897 += 1 };
  s1 -> s2 [0, 72] { R4953 += 1, R4909 += 1, R3897 += 1 };
  s1 -> s4 [73, 73] { R4953 += 1, R4909 += 1, R3896 += 1, R3897 += 1 };
  s1 -> s5 [73, 73] { R4953 += 1, R4909 += 1, R3896 += 1, R3897 += 1 };
  s1 -> s6 [73, 73] { R4953 += 1, R4909 += 1, R3897 += 1 };
  s1 -> s7 [73, 73] { R4953 += 1, R4909 += 1, R3897 += 1 };
  s1 -> s2 [74, 77] { R4953 += 1, R4909 += 1, R3897 += 1 };
  s1 -> s1 [74, 65535] { R4953 += 1, R4909 += 1, R3896 += 1, R3897 += 1 };
  s1 -> s8 [86, 86] { R4953 += 1, R4909 += 1, R3897 += 1 };
  s1 -> s2 [87, 65535] { R4953 += 1, R4909 += 1, R3897 += 1 };
  s2 -> s2 [0, 72] { R4953 += 1, R4909 += 1, R3897 += 1 };
  s2 -> s6 [73, 73] { R4953 += 1, R4909 += 1, R3897 += 1 };
  s2 -> s7 [73, 73] { R4953 += 1, R4909 += 1, R3897 += 1 };
  s2 -> s2 [74, 77] { R4953 += 1, R4909 += 1, R3897 += 1 };
  s2 -> s8 [86, 86] { R4953 += 1, R4909 += 1, R3897 += 1 };
  s2 -> s2 [87, 65535] { R4953 += 1, R4909 += 1, R3897 += 1 };
  s3 -> s1 [0, 72] { R4953 += 1, R4909 += 1, R3896 += 1, R3897 += 1 };
  s3 -> s2 [0, 72] { R4953 += 1, R4909 += 1, R3897 += 1 };
  s3 -> s3 [0, 65535] { R4953 += 1, R4908 += 1, R4909 += 1 };
  s3 -> s4 [73, 73] { R4953 += 1, R4909 += 1, R3896 += 1, R3897 += 1 };
  s3 -> s5 [73, 73] { R4953 += 1, R4909 += 1, R3896 += 1, R3897 += 1 };
  s3 -> s6 [73, 73] { R4953 += 1, R4909 += 1, R3897 += 1 };
  s3 -> s7 [73, 73] { R4953 += 1, R4909 += 1, R3897 += 1 };
  s3 -> s2 [74, 77] { R4953 += 1, R4909 += 1, R3897 += 1 };
  s3 -> s1 [74, 65535] { R4953 += 1, R4909 += 1, R3896 += 1, R3897 += 1 };
  s3 -> s8 [86, 86] { R4953 += 1, R4909 += 1, R3897 += 1 };
  s3 -> s2 [87, 65535] { R4953 += 1, R4909 += 1, R3897 += 1 };
  s4 -> s6 [0, 77] { R4953 += 1, R4909 += 1, R3897 += 1 };
  s4 -> s4 [0, 65535] { R4953 += 1, R4909 += 1, R3896 += 1, R3897 += 1 };
  s4 -> s11 [86, 86] { R4953 += 1, R4909 += 1, R3897 += 1 };
  s4 -> s6 [87, 65535] { R4953 += 1, R4909 += 1, R3897 += 1 };
  s6 -> s6 [0, 77] { R4953 += 1, R4909 += 1, R3897 += 1 };
  s6 -> s11 [86, 86] { R4953 += 1, R4909 += 1, R3897 += 1 };
  s6 -> s6 [87, 65535] { R4953 += 1, R4909 += 1, R3897 += 1 };
  s8 -> s8 [0, 72] { R4953 += 1, R4909 += 1, R3897 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R4953 += 1 };
  s8 -> s10 [73, 73] { R4953 += 1, R4909 += 1 };
  s8 -> s11 [73, 73] { R4953 += 1, R4909 += 1 };
  s8 -> s8 [74, 77] { R4953 += 1, R4909 += 1, R3897 += 1 };
  s8 -> s8 [74, 65535] { R4953 += 1, R4909 += 1 };
  s8 -> s8 [86, 65535] { R4953 += 1, R4909 += 1, R3897 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R4953 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s11 [0, 77] { R4953 += 1, R4909 += 1, R3897 += 1 };
  s11 -> s11 [0, 65535] { R4953 += 1, R4909 += 1 };
  s11 -> s12 [0, 65535] { R4953 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [86, 65535] { R4953 += 1, R4909 += 1, R3897 += 1 };
  s12 -> s12 [0, 65535] { R4953 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 72] { R4955 += 1, R4911 += 1, R4744 += 1, R4745 += 1 };
  s0 -> s2 [0, 72] { R4955 += 1, R4911 += 1, R4745 += 1, R4746 += 1 };
  s0 -> s0 [0, 65535] { R4954 += 1, R4955 += 1 };
  s0 -> s3 [0, 65535] { R4955 += 1, R4910 += 1, R4911 += 1 };
  s0 -> s4 [73, 73] { R4955 += 1, R4911 += 1, R4744 += 1, R4745 += 1 };
  s0 -> s5 [73, 73] { R4955 += 1, R4911 += 1, R4745 += 1, R4746 += 1 };
  s0 -> s6 [73, 73] { R4955 += 1, R4911 += 1, R4744 += 1, R4745 += 1 };
  s0 -> s7 [73, 73] { R4955 += 1, R4911 += 1, R4745 += 1, R4746 += 1 };
  s0 -> s1 [74, 65535] { R4955 += 1, R4911 += 1, R4744 += 1, R4745 += 1 };
  s0 -> s2 [74, 65535] { R4955 += 1, R4911 += 1, R4745 += 1, R4746 += 1 };
  s1 -> s1 [0, 72] { R4955 += 1, R4911 += 1, R4744 += 1, R4745 += 1 };
  s1 -> s2 [0, 72] { R4955 += 1, R4911 += 1, R4745 += 1, R4746 += 1 };
  s1 -> s4 [73, 73] { R4955 += 1, R4911 += 1, R4744 += 1, R4745 += 1 };
  s1 -> s5 [73, 73] { R4955 += 1, R4911 += 1, R4745 += 1, R4746 += 1 };
  s1 -> s6 [73, 73] { R4955 += 1, R4911 += 1, R4744 += 1, R4745 += 1 };
  s1 -> s7 [73, 73] { R4955 += 1, R4911 += 1, R4745 += 1, R4746 += 1 };
  s1 -> s1 [74, 65535] { R4955 += 1, R4911 += 1, R4744 += 1, R4745 += 1 };
  s1 -> s2 [74, 65535] { R4955 += 1, R4911 += 1, R4745 += 1, R4746 += 1 };
  s2 -> s11 [0, 72] { R4955 += 1, R4911 += 1 };
  s2 -> s2 [0, 72] { R4955 += 1, R4911 += 1, R4745 += 1, R4746 += 1 };
  s2 -> s5 [73, 73] { R4955 += 1, R4911 += 1, R4745 += 1, R4746 += 1 };
  s2 -> s8 [73, 73] { R4955 += 1, R4911 += 1 };
  s2 -> s7 [73, 73] { R4955 += 1, R4911 += 1, R4745 += 1, R4746 += 1 };
  s2 -> s12 [73, 73] { R4955 += 1, R4911 += 1 };
  s2 -> s11 [74, 65535] { R4955 += 1, R4911 += 1 };
  s2 -> s2 [74, 65535] { R4955 += 1, R4911 += 1, R4745 += 1, R4746 += 1 };
  s3 -> s1 [0, 72] { R4955 += 1, R4911 += 1, R4744 += 1, R4745 += 1 };
  s3 -> s2 [0, 72] { R4955 += 1, R4911 += 1, R4745 += 1, R4746 += 1 };
  s3 -> s3 [0, 65535] { R4955 += 1, R4910 += 1, R4911 += 1 };
  s3 -> s4 [73, 73] { R4955 += 1, R4911 += 1, R4744 += 1, R4745 += 1 };
  s3 -> s5 [73, 73] { R4955 += 1, R4911 += 1, R4745 += 1, R4746 += 1 };
  s3 -> s6 [73, 73] { R4955 += 1, R4911 += 1, R4744 += 1, R4745 += 1 };
  s3 -> s7 [73, 73] { R4955 += 1, R4911 += 1, R4745 += 1, R4746 += 1 };
  s3 -> s1 [74, 65535] { R4955 += 1, R4911 += 1, R4744 += 1, R4745 += 1 };
  s3 -> s2 [74, 65535] { R4955 += 1, R4911 += 1, R4745 += 1, R4746 += 1 };
  s6 -> s6 [0, 65535] { R4955 += 1, R4911 += 1, R4744 += 1, R4745 += 1 };
  s6 -> s7 [0, 65535] { R4955 += 1, R4911 += 1, R4745 += 1, R4746 += 1 };
  s7 -> s8 [0, 65535] { R4955 += 1, R4911 += 1 };
  s7 -> s7 [0, 65535] { R4955 += 1, R4911 += 1, R4745 += 1, R4746 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R4955 += 1, R4911 += 1 };
  s8 -> s10 [0, 65535] { R4955 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R4955 += 1 };
  s11 -> s11 [0, 72] { R4955 += 1, R4911 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R4955 += 1 };
  s11 -> s8 [73, 73] { R4955 += 1, R4911 += 1 };
  s11 -> s12 [73, 73] { R4955 += 1, R4911 += 1 };
  s11 -> s11 [74, 65535] { R4955 += 1, R4911 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R4955 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 72] { R4957 += 1, R4913 += 1, R4855 += 1 };
  s0 -> s2 [0, 72] { R4957 += 1, R4913 += 1, R4854 += 1, R4855 += 1 };
  s0 -> s0 [0, 65535] { R4956 += 1, R4957 += 1 };
  s0 -> s3 [0, 65535] { R4957 += 1, R4912 += 1, R4913 += 1 };
  s0 -> s4 [73, 73] { R4957 += 1, R4913 += 1, R4855 += 1 };
  s0 -> s5 [73, 73] { R4957 += 1, R4913 += 1, R4855 += 1 };
  s0 -> s6 [73, 73] { R4957 += 1, R4913 += 1, R4854 += 1, R4855 += 1 };
  s0 -> s7 [73, 73] { R4957 += 1, R4913 += 1, R4854 += 1, R4855 += 1 };
  s0 -> s1 [74, 76] { R4957 += 1, R4913 += 1, R4855 += 1 };
  s0 -> s2 [74, 65535] { R4957 += 1, R4913 += 1, R4854 += 1, R4855 += 1 };
  s0 -> s1 [87, 65535] { R4957 += 1, R4913 += 1, R4855 += 1 };
  s1 -> s1 [0, 72] { R4957 += 1, R4913 += 1, R4855 += 1 };
  s1 -> s1 [0, 65535] { R4957 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s4 [73, 73] { R4957 += 1, R4913 += 1 };
  s1 -> s5 [73, 73] { R4957 += 1, R4913 += 1 };
  s1 -> s1 [74, 76] { R4957 += 1, R4913 += 1, R4855 += 1 };
  s1 -> s1 [74, 65535] { R4957 += 1, R4913 += 1 };
  s1 -> s1 [87, 65535] { R4957 += 1, R4913 += 1, R4855 += 1 };
  s2 -> s1 [0, 72] { R4957 += 1, R4913 += 1, R4855 += 1 };
  s2 -> s2 [0, 72] { R4957 += 1, R4913 += 1, R4854 += 1, R4855 += 1 };
  s2 -> s4 [73, 73] { R4957 += 1, R4913 += 1, R4855 += 1 };
  s2 -> s5 [73, 73] { R4957 += 1, R4913 += 1, R4855 += 1 };
  s2 -> s6 [73, 73] { R4957 += 1, R4913 += 1, R4854 += 1, R4855 += 1 };
  s2 -> s7 [73, 73] { R4957 += 1, R4913 += 1, R4854 += 1, R4855 += 1 };
  s2 -> s1 [74, 76] { R4957 += 1, R4913 += 1, R4855 += 1 };
  s2 -> s2 [74, 65535] { R4957 += 1, R4913 += 1, R4854 += 1, R4855 += 1 };
  s2 -> s1 [87, 65535] { R4957 += 1, R4913 += 1, R4855 += 1 };
  s3 -> s1 [0, 72] { R4957 += 1, R4913 += 1, R4855 += 1 };
  s3 -> s2 [0, 72] { R4957 += 1, R4913 += 1, R4854 += 1, R4855 += 1 };
  s3 -> s3 [0, 65535] { R4957 += 1, R4912 += 1, R4913 += 1 };
  s3 -> s4 [73, 73] { R4957 += 1, R4913 += 1, R4855 += 1 };
  s3 -> s5 [73, 73] { R4957 += 1, R4913 += 1, R4855 += 1 };
  s3 -> s6 [73, 73] { R4957 += 1, R4913 += 1, R4854 += 1, R4855 += 1 };
  s3 -> s7 [73, 73] { R4957 += 1, R4913 += 1, R4854 += 1, R4855 += 1 };
  s3 -> s1 [74, 76] { R4957 += 1, R4913 += 1, R4855 += 1 };
  s3 -> s2 [74, 65535] { R4957 += 1, R4913 += 1, R4854 += 1, R4855 += 1 };
  s3 -> s1 [87, 65535] { R4957 += 1, R4913 += 1, R4855 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s4 [0, 65535] { R4957 += 1 };
  s5 -> s5 [0, 76] { R4957 += 1, R4913 += 1, R4855 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s9 [0, 65535] { R4957 += 1 };
  s5 -> s5 [0, 65535] { R4957 += 1, R4913 += 1 };
  s5 -> s5 [87, 65535] { R4957 += 1, R4913 += 1, R4855 += 1 };
  s6 -> s5 [0, 76] { R4957 += 1, R4913 += 1, R4855 += 1 };
  s6 -> s6 [0, 65535] { R4957 += 1, R4913 += 1, R4854 += 1, R4855 += 1 };
  s6 -> s5 [87, 65535] { R4957 += 1, R4913 += 1, R4855 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R4957 += 1 };
  accepting s4, s8, s5, s9, s1;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
synchronised {  // Automata constraining P54
automaton P54_0 {
  init s0;
  s0 -> s1 [109, 109];
  accepting s1;
};
};
constraint R2 = R4957 && R20 - R4957 = -1 && R21 = R4957 && R22 - R4957 = -1 && R23 = R4957 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R3899 + -1*R3897 - R53 = 0 && R52 + R3898 + R3896 = 0 && R4898 = 0 && R4899 = 0 && R4906 = 0 && R4907 = 0 && R4908 = 0 && R4909 = 0 && R4910 = 0 && R4911 = 0 && R4912 = 0 && R4913 = 0 && R4914 = 0 && R4915 = R4957 && R4916 = 0 && R4917 = R4957 && R4918 = 0 && R4919 = R4957 && R4920 = 0 && R4921 = R4957 && R4922 = 0 && R4923 = R4957 && R4924 = 0 && R4925 = R4957 && R4926 = 0 && R4927 = R4957 && R4928 = 0 && R4929 = R4957 && R4930 = 0 && R4931 = R4957 && R4932 = 0 && R4933 = R4957 && R4934 = 0 && R4935 = R4957 && R4936 = 0 && R4937 = R4957 && R4938 = 0 && R4939 = R4957 && R4940 = 0 && R4941 = R4957 && R4942 = 0 && R4943 = R4957 && R4944 = 0 && R4945 = R4957 && R4946 = 0 && R4947 = R4957 && R4948 = 0 && R4949 = R4957 && R4950 = 0 && R4951 = R4957 && R4952 = 0 && R4953 = R4957 && R4954 = 0 && R4955 = R4957 && R4956 = 0 && -1 < R1 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R3899 + -1*R3897 - R53 < 1 && 0 < R4957 && (R1 != 0 || R17 = 0 || (R4858 = 0 && R4859 = 0)) && (R1 != 0 || R17 = 0 || (R4860 = 0 && R4861 = 0)) && (R1 != 0 || R17 = 0 || (R4862 = 0 && R4863 = 0)) && (R1 != 0 || R17 = 0 || (R4864 = 0 && R4865 = 0)) && (R1 != 0 || R17 = 0 || (R4866 = 0 && R4867 = 0)) && (R1 != 0 || R17 = 0 || (R4868 = 0 && R4869 = 0)) && (R1 != 0 || R17 = 0 || (R4870 = 0 && R4871 = 0)) && (R1 != 0 || R17 = 0 || (R4872 = 0 && R4873 = 0)) && (R1 != 0 || R17 = 0 || (R4874 = 0 && R4875 = 0)) && (R1 != 0 || R17 = 0 || (R4876 = 0 && R4877 = 0)) && (R48 + R3895 + R3892 != 0 || ((R42 + R72 + R70 != 0 || R43 + R73 + R71 + -1*R3899 + -1*R3897 - R53 = 0 || R53 + R3899 + R3897 < 1) && (R42 + R72 + R70 = 0 || R53 + R3899 + R3897 < 1))) && (R48 + R3895 + R3892 != 0 || ((R46 + R3893 + R3890 != 0 || R47 + R3894 + R3891 + -1*R3899 + -1*R3897 - R53 = 0 || R53 + R3899 + R3897 < 1) && (R46 + R3893 + R3890 = 0 || R53 + R3899 + R3897 < 1))) && (R4858 != 0 || R1 = R4859 || R1 < 1) && (R4860 != 0 || R1 = R4861 || R1 < 1) && (R4862 != 0 || R1 = R4863 || R1 < 1) && (R4864 != 0 || R1 = R4865 || R1 < 1) && (R4866 != 0 || R1 = R4867 || R1 < 1) && (R4868 != 0 || R1 = R4869 || R1 < 1) && (R4870 != 0 || R1 = R4871 || R1 < 1) && (R4872 != 0 || R1 = R4873 || R1 < 1) && (R4874 != 0 || R1 = R4875 || R1 < 1) && (R4876 != 0 || R1 = R4877 || R1 < 1) && (R18 = 0 || (R4896 = 0 && R4897 = 0)) && (R18 = 0 || (R4900 = 0 && R4901 = 0)) && (R18 = 0 || (R4902 = 0 && R4903 = 0)) && (R18 = 0 || (R4904 = 0 && R4905 = 0)) && (R19 = 0 || (R4878 = 0 && R4879 = 0)) && (R19 = 0 || (R4880 = 0 && R4881 = 0)) && (R19 = 0 || (R4882 = 0 && R4883 = 0)) && (R19 = 0 || (R4884 = 0 && R4885 = 0)) && (R19 = 0 || (R4886 = 0 && R4887 = 0)) && (R19 = 0 || (R4888 = 0 && R4889 = 0)) && (R19 = 0 || (R4890 = 0 && R4891 = 0)) && (R19 = 0 || (R4892 = 0 && R4893 = 0)) && (R19 = 0 || (R4894 = 0 && R4895 = 0)) && (R48 + R3895 + R3892 = 0 || (R42 + R72 + R70 = 0 && R43 + R73 + R71 + -1*R3899 + -1*R3897 - R53 = 0)) && (R48 + R3895 + R3892 = 0 || (R46 + R3893 + R3890 = 0 && R47 + R3894 + R3891 + -1*R3899 + -1*R3897 - R53 = 0)) && (R58 + R4749 + R4746 = 0 || (R56 + R4747 + R4744 = 0 && R57 + R4748 + R4745 = 0)) && (R58 + R4749 + R4746 = 0 || (R62 + R4856 + R4854 = 0 && R63 + R4857 + R4855 = 0)) && (R4858 = 0 || R1 < 1) && (R4860 = 0 || R1 < 1) && (R4862 = 0 || R1 < 1) && (R4864 = 0 || R1 < 1) && (R4866 = 0 || R1 < 1) && (R4868 = 0 || R1 < 1) && (R4870 = 0 || R1 < 1) && (R4872 = 0 || R1 < 1) && (R4874 = 0 || R1 < 1) && (R4876 = 0 || R1 < 1);
// End of Parikh automata intersection problem
