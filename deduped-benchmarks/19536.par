// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R12, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R70, R71, R72, R73, R7706, R7707, R7708, R7709, R7710, R7711, R7712, R7713, R7714, R7715, R8, R8138, R8139, R8140, R8141, R8142, R8143, R8248, R8249, R8250, R8251, R8252, R8253, R8254, R8255, R8256, R8257, R8258, R8259, R8260, R8261, R8262, R8263, R8264, R8265, R8266, R8267, R8268, R8269, R8270, R8271, R8272, R8273, R8274, R8275, R8276, R8277, R8278, R8279, R8280, R8281, R8282, R8283, R8284, R8285, R8286, R8287, R8288, R8289, R8290, R8291, R8292, R8293, R8294, R8295, R8296, R8297, R8298, R8299, R8300, R8301, R8302, R8303, R8304, R8305, R8306, R8307, R8308, R8309, R8310, R8311, R8312, R8313, R8314, R8315, R8316, R8317, R8318, R8319, R8320, R8321, R8322, R8323, R8324, R8325, R8326, R8327, R8328, R8329, R8330, R8331, R8332, R8333, R8334, R8335, R8336, R8337, R8338, R8339, R8340, R8341, R8342, R8343, R8344, R8345, R8346, R8347, R8348, R8349, R8350, R8351;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 72];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [73, 73];
  s0 -> s1 [74, 65535];
  s1 -> s1 [0, 72];
  s1 -> s2 [73, 73];
  s1 -> s1 [74, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R21 += 1 };
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R25 += 1 };
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R8272 += 1, R8273 += 1 };
  s0 -> s1 [0, 65535] { R8273 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R8273 += 1, R19 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 72] { R8275 += 1 };
  s0 -> s0 [0, 65535] { R8274 += 1, R8275 += 1 };
  s0 -> s2 [73, 73] { R8275 += 1 };
  s0 -> s3 [73, 73] { R8275 += 1 };
  s0 -> s1 [78, 65535] { R8275 += 1 };
  s1 -> s1 [0, 72] { R8275 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R8275 += 1 };
  s1 -> s3 [73, 73] { R8275 += 1 };
  s1 -> s1 [78, 65535] { R8275 += 1 };
  s2 -> s2 [0, 73] { R8275 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [78, 65535] { R8275 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 72] { R8277 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R8276 += 1, R8277 += 1 };
  s0 -> s2 [73, 73] { R8277 += 1, R38 += 1 };
  s0 -> s3 [73, 73] { R8277 += 1, R38 += 1 };
  s0 -> s1 [74, 65535] { R8277 += 1, R38 += 1 };
  s1 -> s1 [0, 72] { R8277 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R8277 += 1, R38 += 1 };
  s1 -> s3 [73, 73] { R8277 += 1, R38 += 1 };
  s1 -> s1 [74, 65535] { R8277 += 1, R38 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R8277 += 1, R38 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 72] { R8279 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R8278 += 1, R8279 += 1 };
  s0 -> s2 [73, 73] { R8279 += 1, R40 += 1 };
  s0 -> s3 [73, 73] { R8279 += 1, R40 += 1 };
  s0 -> s1 [74, 65535] { R8279 += 1, R40 += 1 };
  s1 -> s1 [0, 72] { R8279 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R8279 += 1, R40 += 1 };
  s1 -> s3 [73, 73] { R8279 += 1, R40 += 1 };
  s1 -> s1 [74, 65535] { R8279 += 1, R40 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8279 += 1, R40 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 72] { R8281 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R8280 += 1, R8281 += 1 };
  s0 -> s2 [73, 73] { R8281 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [73, 73] { R8281 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [74, 65535] { R8281 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 72] { R8281 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R8281 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [73, 73] { R8281 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [74, 65535] { R8281 += 1, R42 += 1, R43 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8281 += 1, R42 += 1, R43 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 72] { R8283 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R8282 += 1, R8283 += 1 };
  s0 -> s2 [73, 73] { R8283 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [73, 73] { R8283 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [74, 65535] { R8283 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 72] { R8283 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R8283 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [73, 73] { R8283 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [74, 65535] { R8283 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8283 += 1, R46 += 1, R47 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 72] { R8285 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R8284 += 1, R8285 += 1 };
  s0 -> s2 [73, 73] { R8285 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [73, 73] { R8285 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [74, 65535] { R8285 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 72] { R8285 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R8285 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [73, 73] { R8285 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [74, 65535] { R8285 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535] { R8285 += 1, R52 += 1, R53 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 72] { R8287 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R8286 += 1, R8287 += 1 };
  s0 -> s2 [73, 73] { R8287 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [73, 73] { R8287 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [74, 65535] { R8287 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 72] { R8287 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R8287 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [73, 73] { R8287 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [74, 65535] { R8287 += 1, R56 += 1, R57 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8287 += 1, R56 += 1, R57 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 72] { R8289 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R8288 += 1, R8289 += 1 };
  s0 -> s2 [73, 73] { R8289 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [73, 73] { R8289 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [74, 65535] { R8289 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 72] { R8289 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R8289 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [73, 73] { R8289 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [74, 65535] { R8289 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8289 += 1, R62 += 1, R63 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 72] { R8309 += 1 };
  s0 -> s0 [0, 65535] { R8308 += 1, R8309 += 1 };
  s0 -> s2 [73, 73] { R8309 += 1 };
  s0 -> s1 [74, 65535] { R8309 += 1 };
  s1 -> s1 [0, 72] { R8309 += 1 };
  s1 -> s2 [73, 73] { R8309 += 1 };
  s1 -> s1 [74, 65535] { R8309 += 1 };
  s2 -> s2 [0, 65535] { R8309 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R8310 += 1, R8311 += 1 };
  s0 -> s1 [0, 65535] { R8311 += 1, R1 += 1 };
  s1 -> s1 [0, 65535] { R8311 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 72] { R8313 += 1 };
  s0 -> s2 [0, 65535] { R8313 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R8312 += 1, R8313 += 1 };
  s0 -> s3 [73, 73] { R8313 += 1 };
  s0 -> s1 [74, 65535] { R8313 += 1 };
  s1 -> s1 [0, 72] { R8313 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [73, 73] { R8313 += 1 };
  s1 -> s1 [74, 65535] { R8313 += 1 };
  s2 -> s1 [0, 72] { R8313 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8313 += 1, R8 += 1 };
  s2 -> s3 [73, 73] { R8313 += 1 };
  s2 -> s1 [74, 65535] { R8313 += 1 };
  s3 -> s3 [0, 65535] { R8313 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 72] { R8315 += 1, R8253 += 1 };
  s0 -> s2 [0, 65535] { R8315 += 1, R8252 += 1, R8253 += 1 };
  s0 -> s0 [0, 65535] { R8314 += 1, R8315 += 1 };
  s0 -> s1 [74, 65535] { R8315 += 1, R8253 += 1 };
  s1 -> s1 [0, 72] { R8315 += 1, R8253 += 1 };
  s1 -> s1 [0, 65535] { R8315 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [74, 65535] { R8315 += 1, R8253 += 1 };
  s2 -> s1 [0, 72] { R8315 += 1, R8253 += 1 };
  s2 -> s2 [0, 65535] { R8315 += 1, R8252 += 1, R8253 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [74, 65535] { R8315 += 1, R8253 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s0 [0, 65535] { R8316 += 1, R8317 += 1 };
  s0 -> s1 [0, 65535] { R8317 += 1, R8255 += 1, R17 += 1 };
  s0 -> s2 [0, 65535] { R8317 += 1, R8254 += 1, R8255 += 1 };
  s1 -> s1 [0, 65535] { R8317 += 1, R8255 += 1, R17 += 1 };
  s1 -> s4 [0, 65535] { R8317 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R8317 += 1, R8255 += 1, R17 += 1 };
  s2 -> s2 [0, 65535] { R8317 += 1, R8254 += 1, R8255 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8317 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 73] { R8319 += 1, R8257 += 1 };
  s0 -> s0 [0, 65535] { R8318 += 1, R8319 += 1 };
  s0 -> s2 [0, 65535] { R8319 += 1, R8256 += 1, R8257 += 1 };
  s0 -> s1 [77, 65535] { R8319 += 1, R8257 += 1 };
  s1 -> s1 [0, 73] { R8319 += 1, R8257 += 1 };
  s1 -> s1 [0, 65535] { R8319 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [77, 65535] { R8319 += 1, R8257 += 1 };
  s2 -> s1 [0, 73] { R8319 += 1, R8257 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R8319 += 1, R8256 += 1, R8257 += 1 };
  s2 -> s1 [77, 65535] { R8319 += 1, R8257 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R8321 += 1, R8258 += 1, R8259 += 1 };
  s0 -> s0 [0, 65535] { R8320 += 1, R8321 += 1 };
  s0 -> s2 [0, 65535] { R8321 += 1, R8259 += 1, R67 += 1 };
  s1 -> s1 [0, 65535] { R8321 += 1, R8258 += 1, R8259 += 1 };
  s1 -> s2 [0, 65535] { R8321 += 1, R8259 += 1, R67 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8321 += 1, R8259 += 1, R67 += 1 };
  s2 -> s3 [0, 65535] { R8321 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8321 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 76] { R8323 += 1, R8261 += 1 };
  s0 -> s2 [0, 65535] { R8323 += 1, R8260 += 1, R8261 += 1 };
  s0 -> s3 [0, 65535] { R8323 += 1, R8261 += 1, R69 += 1 };
  s0 -> s0 [0, 65535] { R8322 += 1, R8323 += 1 };
  s0 -> s1 [78, 65535] { R8323 += 1, R8261 += 1 };
  s1 -> s1 [0, 76] { R8323 += 1, R8261 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R8323 += 1 };
  s1 -> s1 [78, 65535] { R8323 += 1, R8261 += 1 };
  s2 -> s1 [0, 76] { R8323 += 1, R8261 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8323 += 1, R8260 += 1, R8261 += 1 };
  s2 -> s3 [0, 65535] { R8323 += 1, R8261 += 1, R69 += 1 };
  s2 -> s1 [78, 65535] { R8323 += 1, R8261 += 1 };
  s3 -> s1 [0, 76] { R8323 += 1, R8261 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8323 += 1, R8261 += 1, R69 += 1 };
  s3 -> s5 [0, 65535] { R8323 += 1 };
  s3 -> s1 [78, 65535] { R8323 += 1, R8261 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8323 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 76] { R8325 += 1, R8263 += 1, R73 += 1 };
  s0 -> s2 [0, 65535] { R8325 += 1, R8262 += 1, R8263 += 1 };
  s0 -> s3 [0, 65535] { R8325 += 1, R8263 += 1, R72 += 1, R73 += 1 };
  s0 -> s0 [0, 65535] { R8324 += 1, R8325 += 1 };
  s0 -> s1 [78, 65535] { R8325 += 1, R8263 += 1, R73 += 1 };
  s1 -> s1 [0, 76] { R8325 += 1, R8263 += 1, R73 += 1 };
  s1 -> s1 [0, 65535] { R8325 += 1, R8263 += 1 };
  s1 -> s4 [0, 65535] { R8325 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [78, 65535] { R8325 += 1, R8263 += 1, R73 += 1 };
  s2 -> s1 [0, 76] { R8325 += 1, R8263 += 1, R73 += 1 };
  s2 -> s2 [0, 65535] { R8325 += 1, R8262 += 1, R8263 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R8325 += 1, R8263 += 1, R72 += 1, R73 += 1 };
  s2 -> s1 [78, 65535] { R8325 += 1, R8263 += 1, R73 += 1 };
  s3 -> s1 [0, 76] { R8325 += 1, R8263 += 1, R73 += 1 };
  s3 -> s4 [0, 65535] { R8325 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R8325 += 1, R8263 += 1, R72 += 1, R73 += 1 };
  s3 -> s1 [78, 65535] { R8325 += 1, R8263 += 1, R73 += 1 };
  s4 -> s4 [0, 65535] { R8325 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R8327 += 1, R8264 += 1, R8265 += 1 };
  s0 -> s0 [0, 65535] { R8326 += 1, R8327 += 1 };
  s0 -> s2 [0, 65535] { R8327 += 1, R8265 += 1 };
  s1 -> s1 [0, 65535] { R8327 += 1, R8264 += 1, R8265 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R8327 += 1, R8265 += 1 };
  s2 -> s3 [0, 65535] { R8327 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8327 += 1, R8265 += 1 };
  s3 -> s3 [0, 65535] { R8327 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 77] { R8329 += 1, R8267 += 1, R7715 += 1 };
  s0 -> s0 [0, 65535] { R8328 += 1, R8329 += 1 };
  s0 -> s2 [0, 65535] { R8329 += 1, R8266 += 1, R8267 += 1 };
  s0 -> s1 [0, 65535] { R8329 += 1, R8267 += 1 };
  s0 -> s1 [86, 65535] { R8329 += 1, R8267 += 1, R7715 += 1 };
  s1 -> s1 [0, 77] { R8329 += 1, R8267 += 1, R7715 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R8329 += 1, R8267 += 1 };
  s1 -> s4 [0, 65535] { R8329 += 1 };
  s1 -> s1 [86, 65535] { R8329 += 1, R8267 += 1, R7715 += 1 };
  s2 -> s1 [0, 77] { R8329 += 1, R8267 += 1, R7715 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R8329 += 1, R8266 += 1, R8267 += 1 };
  s2 -> s1 [0, 65535] { R8329 += 1, R8267 += 1 };
  s2 -> s1 [86, 65535] { R8329 += 1, R8267 += 1, R7715 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8329 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R8331 += 1, R8268 += 1, R8269 += 1 };
  s0 -> s2 [0, 65535] { R8331 += 1, R8269 += 1, R8142 += 1, R8143 += 1 };
  s0 -> s3 [0, 65535] { R8331 += 1, R8269 += 1 };
  s0 -> s0 [0, 65535] { R8330 += 1, R8331 += 1 };
  s1 -> s1 [0, 65535] { R8331 += 1, R8268 += 1, R8269 += 1 };
  s1 -> s2 [0, 65535] { R8331 += 1, R8269 += 1, R8142 += 1, R8143 += 1 };
  s1 -> s3 [0, 65535] { R8331 += 1, R8269 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8331 += 1, R8269 += 1, R8142 += 1, R8143 += 1 };
  s2 -> s3 [0, 65535] { R8331 += 1, R8269 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R8331 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8331 += 1, R8269 += 1 };
  s3 -> s5 [0, 65535] { R8331 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8331 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 76] { R8333 += 1, R8271 += 1, R8251 += 1 };
  s0 -> s0 [0, 65535] { R8332 += 1, R8333 += 1 };
  s0 -> s1 [0, 65535] { R8333 += 1, R8271 += 1 };
  s0 -> s2 [0, 65535] { R8333 += 1, R8270 += 1, R8271 += 1 };
  s0 -> s3 [77, 77] { R8333 += 1, R8271 += 1, R8251 += 1 };
  s0 -> s4 [77, 77] { R8333 += 1, R8271 += 1, R8251 += 1 };
  s0 -> s1 [87, 65535] { R8333 += 1, R8271 += 1, R8251 += 1 };
  s1 -> s1 [0, 76] { R8333 += 1, R8271 += 1, R8251 += 1 };
  s1 -> s5 [0, 65535] { R8333 += 1 };
  s1 -> s1 [0, 65535] { R8333 += 1, R8271 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [77, 77] { R8333 += 1, R8271 += 1, R8251 += 1 };
  s1 -> s4 [77, 77] { R8333 += 1, R8271 += 1, R8251 += 1 };
  s1 -> s1 [87, 65535] { R8333 += 1, R8271 += 1, R8251 += 1 };
  s2 -> s1 [0, 76] { R8333 += 1, R8271 += 1, R8251 += 1 };
  s2 -> s1 [0, 65535] { R8333 += 1, R8271 += 1 };
  s2 -> s2 [0, 65535] { R8333 += 1, R8270 += 1, R8271 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [77, 77] { R8333 += 1, R8271 += 1, R8251 += 1 };
  s2 -> s4 [77, 77] { R8333 += 1, R8271 += 1, R8251 += 1 };
  s2 -> s1 [87, 65535] { R8333 += 1, R8271 += 1, R8251 += 1 };
  s3 -> s3 [0, 65535] { R8333 += 1, R8271 += 1 };
  s3 -> s5 [0, 65535] { R8333 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 77] { R8333 += 1, R8271 += 1, R8251 += 1 };
  s4 -> s5 [0, 65535] { R8333 += 1 };
  s4 -> s4 [0, 65535] { R8333 += 1, R8271 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [87, 65535] { R8333 += 1, R8271 += 1, R8251 += 1 };
  s5 -> s5 [0, 65535] { R8333 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s0 [0, 65535] { R8334 += 1, R8335 += 1 };
  s0 -> s1 [0, 65535] { R8335 += 1, R8290 += 1, R8291 += 1 };
  s0 -> s2 [0, 65535] { R8335 += 1, R8291 += 1, R18 += 1 };
  s1 -> s1 [0, 65535] { R8335 += 1, R8290 += 1, R8291 += 1 };
  s1 -> s2 [0, 65535] { R8335 += 1, R8291 += 1, R18 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R8335 += 1 };
  s2 -> s2 [0, 65535] { R8335 += 1, R8291 += 1, R18 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8335 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 72] { R8337 += 1, R8293 += 1 };
  s0 -> s0 [0, 65535] { R8336 += 1, R8337 += 1 };
  s0 -> s2 [0, 65535] { R8337 += 1, R8292 += 1, R8293 += 1 };
  s0 -> s3 [73, 73] { R8337 += 1, R8293 += 1 };
  s0 -> s4 [73, 73] { R8337 += 1, R8293 += 1 };
  s0 -> s5 [77, 77] { R8337 += 1, R8293 += 1 };
  s0 -> s1 [78, 65535] { R8337 += 1, R8293 += 1 };
  s1 -> s1 [0, 72] { R8337 += 1, R8293 += 1 };
  s1 -> s3 [73, 73] { R8337 += 1, R8293 += 1 };
  s1 -> s4 [73, 73] { R8337 += 1, R8293 += 1 };
  s1 -> s5 [77, 77] { R8337 += 1, R8293 += 1 };
  s1 -> s1 [78, 65535] { R8337 += 1, R8293 += 1 };
  s2 -> s1 [0, 72] { R8337 += 1, R8293 += 1 };
  s2 -> s2 [0, 65535] { R8337 += 1, R8292 += 1, R8293 += 1 };
  s2 -> s3 [73, 73] { R8337 += 1, R8293 += 1 };
  s2 -> s4 [73, 73] { R8337 += 1, R8293 += 1 };
  s2 -> s5 [77, 77] { R8337 += 1, R8293 += 1 };
  s2 -> s1 [78, 65535] { R8337 += 1, R8293 += 1 };
  s3 -> s3 [0, 73] { R8337 += 1, R8293 += 1 };
  s3 -> s8 [77, 77] { R8337 += 1, R8293 += 1 };
  s3 -> s3 [78, 65535] { R8337 += 1, R8293 += 1 };
  s5 -> s5 [0, 72] { R8337 += 1, R8293 += 1 };
  s5 -> s5 [0, 65535] { R8337 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [73, 73] { R8337 += 1, R8293 += 1 };
  s5 -> s8 [73, 73] { R8337 += 1, R8293 += 1 };
  s5 -> s5 [77, 65535] { R8337 += 1, R8293 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R8337 += 1 };
  s8 -> s8 [0, 73] { R8337 += 1, R8293 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R8337 += 1 };
  s8 -> s8 [77, 65535] { R8337 += 1, R8293 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 72] { R8339 += 1, R8295 += 1, R66 += 1 };
  s0 -> s2 [0, 65535] { R8339 += 1, R8294 += 1, R8295 += 1 };
  s0 -> s0 [0, 65535] { R8338 += 1, R8339 += 1 };
  s0 -> s3 [73, 73] { R8339 += 1, R8295 += 1, R66 += 1 };
  s0 -> s4 [73, 73] { R8339 += 1, R8295 += 1, R66 += 1 };
  s0 -> s1 [74, 65535] { R8339 += 1, R8295 += 1, R66 += 1 };
  s1 -> s1 [0, 72] { R8339 += 1, R8295 += 1, R66 += 1 };
  s1 -> s1 [0, 65535] { R8339 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R8339 += 1, R8295 += 1, R66 += 1 };
  s1 -> s4 [73, 73] { R8339 += 1, R8295 += 1, R66 += 1 };
  s1 -> s1 [74, 65535] { R8339 += 1, R8295 += 1, R66 += 1 };
  s2 -> s1 [0, 72] { R8339 += 1, R8295 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R8339 += 1, R8294 += 1, R8295 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R8339 += 1, R8295 += 1, R66 += 1 };
  s2 -> s4 [73, 73] { R8339 += 1, R8295 += 1, R66 += 1 };
  s2 -> s1 [74, 65535] { R8339 += 1, R8295 += 1, R66 += 1 };
  s3 -> s3 [0, 65535] { R8339 += 1, R8295 += 1, R66 += 1 };
  s3 -> s6 [0, 65535] { R8339 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8339 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8339 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 72] { R8341 += 1, R8297 += 1, R68 += 1 };
  s0 -> s2 [0, 65535] { R8341 += 1, R8296 += 1, R8297 += 1 };
  s0 -> s0 [0, 65535] { R8340 += 1, R8341 += 1 };
  s0 -> s3 [73, 73] { R8341 += 1, R8297 += 1, R68 += 1 };
  s0 -> s4 [73, 73] { R8341 += 1, R8297 += 1, R68 += 1 };
  s0 -> s1 [74, 65535] { R8341 += 1, R8297 += 1, R68 += 1 };
  s1 -> s1 [0, 72] { R8341 += 1, R8297 += 1, R68 += 1 };
  s1 -> s1 [0, 65535] { R8341 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R8341 += 1, R8297 += 1, R68 += 1 };
  s1 -> s4 [73, 73] { R8341 += 1, R8297 += 1, R68 += 1 };
  s1 -> s1 [74, 65535] { R8341 += 1, R8297 += 1, R68 += 1 };
  s2 -> s1 [0, 72] { R8341 += 1, R8297 += 1, R68 += 1 };
  s2 -> s2 [0, 65535] { R8341 += 1, R8296 += 1, R8297 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R8341 += 1, R8297 += 1, R68 += 1 };
  s2 -> s4 [73, 73] { R8341 += 1, R8297 += 1, R68 += 1 };
  s2 -> s1 [74, 65535] { R8341 += 1, R8297 += 1, R68 += 1 };
  s3 -> s3 [0, 65535] { R8341 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R8341 += 1 };
  s4 -> s4 [0, 65535] { R8341 += 1, R8297 += 1, R68 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8341 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 72] { R8343 += 1, R8299 += 1, R70 += 1, R71 += 1 };
  s0 -> s2 [0, 65535] { R8343 += 1, R8298 += 1, R8299 += 1 };
  s0 -> s0 [0, 65535] { R8342 += 1, R8343 += 1 };
  s0 -> s3 [73, 73] { R8343 += 1, R8299 += 1, R70 += 1, R71 += 1 };
  s0 -> s4 [73, 73] { R8343 += 1, R8299 += 1, R70 += 1, R71 += 1 };
  s0 -> s1 [74, 65535] { R8343 += 1, R8299 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 72] { R8343 += 1, R8299 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 65535] { R8343 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R8343 += 1, R8299 += 1, R70 += 1, R71 += 1 };
  s1 -> s4 [73, 73] { R8343 += 1, R8299 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [74, 65535] { R8343 += 1, R8299 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [0, 72] { R8343 += 1, R8299 += 1, R70 += 1, R71 += 1 };
  s2 -> s2 [0, 65535] { R8343 += 1, R8298 += 1, R8299 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R8343 += 1, R8299 += 1, R70 += 1, R71 += 1 };
  s2 -> s4 [73, 73] { R8343 += 1, R8299 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [74, 65535] { R8343 += 1, R8299 += 1, R70 += 1, R71 += 1 };
  s3 -> s3 [0, 65535] { R8343 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8343 += 1, R8299 += 1, R70 += 1, R71 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R8343 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8343 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 72] { R8345 += 1, R8301 += 1, R7706 += 1, R7707 += 1 };
  s0 -> s2 [0, 72] { R8345 += 1, R8301 += 1, R7707 += 1, R7708 += 1 };
  s0 -> s3 [0, 65535] { R8345 += 1, R8300 += 1, R8301 += 1 };
  s0 -> s0 [0, 65535] { R8344 += 1, R8345 += 1 };
  s0 -> s4 [73, 73] { R8345 += 1, R8301 += 1, R7706 += 1, R7707 += 1 };
  s0 -> s5 [73, 73] { R8345 += 1, R8301 += 1, R7707 += 1, R7708 += 1 };
  s0 -> s6 [73, 73] { R8345 += 1, R8301 += 1, R7706 += 1, R7707 += 1 };
  s0 -> s7 [73, 73] { R8345 += 1, R8301 += 1, R7707 += 1, R7708 += 1 };
  s0 -> s1 [74, 65535] { R8345 += 1, R8301 += 1, R7706 += 1, R7707 += 1 };
  s0 -> s2 [74, 65535] { R8345 += 1, R8301 += 1, R7707 += 1, R7708 += 1 };
  s1 -> s1 [0, 72] { R8345 += 1, R8301 += 1, R7706 += 1, R7707 += 1 };
  s1 -> s2 [0, 72] { R8345 += 1, R8301 += 1, R7707 += 1, R7708 += 1 };
  s1 -> s4 [73, 73] { R8345 += 1, R8301 += 1, R7706 += 1, R7707 += 1 };
  s1 -> s5 [73, 73] { R8345 += 1, R8301 += 1, R7707 += 1, R7708 += 1 };
  s1 -> s6 [73, 73] { R8345 += 1, R8301 += 1, R7706 += 1, R7707 += 1 };
  s1 -> s7 [73, 73] { R8345 += 1, R8301 += 1, R7707 += 1, R7708 += 1 };
  s1 -> s1 [74, 65535] { R8345 += 1, R8301 += 1, R7706 += 1, R7707 += 1 };
  s1 -> s2 [74, 65535] { R8345 += 1, R8301 += 1, R7707 += 1, R7708 += 1 };
  s2 -> s11 [0, 72] { R8345 += 1, R8301 += 1 };
  s2 -> s2 [0, 72] { R8345 += 1, R8301 += 1, R7707 += 1, R7708 += 1 };
  s2 -> s5 [73, 73] { R8345 += 1, R8301 += 1, R7707 += 1, R7708 += 1 };
  s2 -> s12 [73, 73] { R8345 += 1, R8301 += 1 };
  s2 -> s8 [73, 73] { R8345 += 1, R8301 += 1 };
  s2 -> s7 [73, 73] { R8345 += 1, R8301 += 1, R7707 += 1, R7708 += 1 };
  s2 -> s11 [74, 65535] { R8345 += 1, R8301 += 1 };
  s2 -> s2 [74, 65535] { R8345 += 1, R8301 += 1, R7707 += 1, R7708 += 1 };
  s3 -> s1 [0, 72] { R8345 += 1, R8301 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s2 [0, 72] { R8345 += 1, R8301 += 1, R7707 += 1, R7708 += 1 };
  s3 -> s3 [0, 65535] { R8345 += 1, R8300 += 1, R8301 += 1 };
  s3 -> s4 [73, 73] { R8345 += 1, R8301 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s5 [73, 73] { R8345 += 1, R8301 += 1, R7707 += 1, R7708 += 1 };
  s3 -> s6 [73, 73] { R8345 += 1, R8301 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s7 [73, 73] { R8345 += 1, R8301 += 1, R7707 += 1, R7708 += 1 };
  s3 -> s1 [74, 65535] { R8345 += 1, R8301 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s2 [74, 65535] { R8345 += 1, R8301 += 1, R7707 += 1, R7708 += 1 };
  s5 -> s5 [0, 65535] { R8345 += 1, R8301 += 1, R7707 += 1, R7708 += 1 };
  s5 -> s8 [0, 65535] { R8345 += 1, R8301 += 1 };
  s6 -> s5 [0, 65535] { R8345 += 1, R8301 += 1, R7707 += 1, R7708 += 1 };
  s6 -> s6 [0, 65535] { R8345 += 1, R8301 += 1, R7706 += 1, R7707 += 1 };
  s8 -> s9 [0, 65535] { R8345 += 1 };
  s8 -> s10 [0, 65535];
  s8 -> s8 [0, 65535] { R8345 += 1, R8301 += 1 };
  s9 -> s9 [0, 65535] { R8345 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s11 [0, 72] { R8345 += 1, R8301 += 1 };
  s11 -> s10 [0, 65535];
  s11 -> s11 [0, 65535] { R8345 += 1 };
  s11 -> s12 [73, 73] { R8345 += 1, R8301 += 1 };
  s11 -> s8 [73, 73] { R8345 += 1, R8301 += 1 };
  s11 -> s11 [74, 65535] { R8345 += 1, R8301 += 1 };
  s12 -> s10 [0, 65535];
  s12 -> s12 [0, 65535] { R8345 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 72] { R8347 += 1, R8303 += 1, R7713 += 1 };
  s0 -> s2 [0, 72] { R8347 += 1, R8303 += 1, R7712 += 1, R7713 += 1 };
  s0 -> s0 [0, 65535] { R8346 += 1, R8347 += 1 };
  s0 -> s3 [0, 65535] { R8347 += 1, R8302 += 1, R8303 += 1 };
  s0 -> s4 [73, 73] { R8347 += 1, R8303 += 1, R7712 += 1, R7713 += 1 };
  s0 -> s5 [73, 73] { R8347 += 1, R8303 += 1, R7713 += 1 };
  s0 -> s6 [73, 73] { R8347 += 1, R8303 += 1, R7713 += 1 };
  s0 -> s7 [73, 73] { R8347 += 1, R8303 += 1, R7712 += 1, R7713 += 1 };
  s0 -> s1 [74, 77] { R8347 += 1, R8303 += 1, R7713 += 1 };
  s0 -> s2 [74, 65535] { R8347 += 1, R8303 += 1, R7712 += 1, R7713 += 1 };
  s0 -> s8 [86, 86] { R8347 += 1, R8303 += 1, R7713 += 1 };
  s0 -> s1 [87, 65535] { R8347 += 1, R8303 += 1, R7713 += 1 };
  s1 -> s1 [0, 72] { R8347 += 1, R8303 += 1, R7713 += 1 };
  s1 -> s5 [73, 73] { R8347 += 1, R8303 += 1, R7713 += 1 };
  s1 -> s6 [73, 73] { R8347 += 1, R8303 += 1, R7713 += 1 };
  s1 -> s1 [74, 77] { R8347 += 1, R8303 += 1, R7713 += 1 };
  s1 -> s8 [86, 86] { R8347 += 1, R8303 += 1, R7713 += 1 };
  s1 -> s1 [87, 65535] { R8347 += 1, R8303 += 1, R7713 += 1 };
  s2 -> s1 [0, 72] { R8347 += 1, R8303 += 1, R7713 += 1 };
  s2 -> s2 [0, 72] { R8347 += 1, R8303 += 1, R7712 += 1, R7713 += 1 };
  s2 -> s4 [73, 73] { R8347 += 1, R8303 += 1, R7712 += 1, R7713 += 1 };
  s2 -> s5 [73, 73] { R8347 += 1, R8303 += 1, R7713 += 1 };
  s2 -> s6 [73, 73] { R8347 += 1, R8303 += 1, R7713 += 1 };
  s2 -> s7 [73, 73] { R8347 += 1, R8303 += 1, R7712 += 1, R7713 += 1 };
  s2 -> s1 [74, 77] { R8347 += 1, R8303 += 1, R7713 += 1 };
  s2 -> s2 [74, 65535] { R8347 += 1, R8303 += 1, R7712 += 1, R7713 += 1 };
  s2 -> s8 [86, 86] { R8347 += 1, R8303 += 1, R7713 += 1 };
  s2 -> s1 [87, 65535] { R8347 += 1, R8303 += 1, R7713 += 1 };
  s3 -> s1 [0, 72] { R8347 += 1, R8303 += 1, R7713 += 1 };
  s3 -> s2 [0, 72] { R8347 += 1, R8303 += 1, R7712 += 1, R7713 += 1 };
  s3 -> s3 [0, 65535] { R8347 += 1, R8302 += 1, R8303 += 1 };
  s3 -> s4 [73, 73] { R8347 += 1, R8303 += 1, R7712 += 1, R7713 += 1 };
  s3 -> s5 [73, 73] { R8347 += 1, R8303 += 1, R7713 += 1 };
  s3 -> s6 [73, 73] { R8347 += 1, R8303 += 1, R7713 += 1 };
  s3 -> s7 [73, 73] { R8347 += 1, R8303 += 1, R7712 += 1, R7713 += 1 };
  s3 -> s1 [74, 77] { R8347 += 1, R8303 += 1, R7713 += 1 };
  s3 -> s2 [74, 65535] { R8347 += 1, R8303 += 1, R7712 += 1, R7713 += 1 };
  s3 -> s8 [86, 86] { R8347 += 1, R8303 += 1, R7713 += 1 };
  s3 -> s1 [87, 65535] { R8347 += 1, R8303 += 1, R7713 += 1 };
  s6 -> s6 [0, 77] { R8347 += 1, R8303 += 1, R7713 += 1 };
  s6 -> s10 [86, 86] { R8347 += 1, R8303 += 1, R7713 += 1 };
  s6 -> s6 [87, 65535] { R8347 += 1, R8303 += 1, R7713 += 1 };
  s7 -> s6 [0, 77] { R8347 += 1, R8303 += 1, R7713 += 1 };
  s7 -> s7 [0, 65535] { R8347 += 1, R8303 += 1, R7712 += 1, R7713 += 1 };
  s7 -> s10 [86, 86] { R8347 += 1, R8303 += 1, R7713 += 1 };
  s7 -> s6 [87, 65535] { R8347 += 1, R8303 += 1, R7713 += 1 };
  s8 -> s8 [0, 72] { R8347 += 1, R8303 += 1, R7713 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R8347 += 1 };
  s8 -> s10 [73, 73] { R8347 += 1, R8303 += 1 };
  s8 -> s11 [73, 73] { R8347 += 1, R8303 += 1 };
  s8 -> s8 [74, 77] { R8347 += 1, R8303 += 1, R7713 += 1 };
  s8 -> s8 [74, 65535] { R8347 += 1, R8303 += 1 };
  s8 -> s8 [86, 65535] { R8347 += 1, R8303 += 1, R7713 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 77] { R8347 += 1, R8303 += 1, R7713 += 1 };
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R8347 += 1, R8303 += 1 };
  s10 -> s12 [0, 65535] { R8347 += 1 };
  s10 -> s10 [86, 65535] { R8347 += 1, R8303 += 1, R7713 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R8347 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R8347 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 72] { R8349 += 1, R8305 += 1, R8138 += 1, R8139 += 1 };
  s0 -> s2 [0, 72] { R8349 += 1, R8305 += 1, R8139 += 1, R8140 += 1 };
  s0 -> s0 [0, 65535] { R8348 += 1, R8349 += 1 };
  s0 -> s3 [0, 65535] { R8349 += 1, R8304 += 1, R8305 += 1 };
  s0 -> s4 [73, 73] { R8349 += 1, R8305 += 1, R8139 += 1, R8140 += 1 };
  s0 -> s5 [73, 73] { R8349 += 1, R8305 += 1, R8139 += 1, R8140 += 1 };
  s0 -> s6 [73, 73] { R8349 += 1, R8305 += 1, R8138 += 1, R8139 += 1 };
  s0 -> s7 [73, 73] { R8349 += 1, R8305 += 1, R8138 += 1, R8139 += 1 };
  s0 -> s1 [74, 65535] { R8349 += 1, R8305 += 1, R8138 += 1, R8139 += 1 };
  s0 -> s2 [74, 65535] { R8349 += 1, R8305 += 1, R8139 += 1, R8140 += 1 };
  s1 -> s1 [0, 72] { R8349 += 1, R8305 += 1, R8138 += 1, R8139 += 1 };
  s1 -> s2 [0, 72] { R8349 += 1, R8305 += 1, R8139 += 1, R8140 += 1 };
  s1 -> s4 [73, 73] { R8349 += 1, R8305 += 1, R8139 += 1, R8140 += 1 };
  s1 -> s5 [73, 73] { R8349 += 1, R8305 += 1, R8139 += 1, R8140 += 1 };
  s1 -> s6 [73, 73] { R8349 += 1, R8305 += 1, R8138 += 1, R8139 += 1 };
  s1 -> s7 [73, 73] { R8349 += 1, R8305 += 1, R8138 += 1, R8139 += 1 };
  s1 -> s1 [74, 65535] { R8349 += 1, R8305 += 1, R8138 += 1, R8139 += 1 };
  s1 -> s2 [74, 65535] { R8349 += 1, R8305 += 1, R8139 += 1, R8140 += 1 };
  s2 -> s2 [0, 72] { R8349 += 1, R8305 += 1, R8139 += 1, R8140 += 1 };
  s2 -> s2 [0, 65535] { R8349 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s4 [73, 73] { R8349 += 1, R8305 += 1, R8139 += 1, R8140 += 1 };
  s2 -> s5 [73, 73] { R8349 += 1, R8305 += 1, R8139 += 1, R8140 += 1 };
  s2 -> s2 [74, 65535] { R8349 += 1, R8305 += 1, R8139 += 1, R8140 += 1 };
  s3 -> s1 [0, 72] { R8349 += 1, R8305 += 1, R8138 += 1, R8139 += 1 };
  s3 -> s2 [0, 72] { R8349 += 1, R8305 += 1, R8139 += 1, R8140 += 1 };
  s3 -> s3 [0, 65535] { R8349 += 1, R8304 += 1, R8305 += 1 };
  s3 -> s4 [73, 73] { R8349 += 1, R8305 += 1, R8139 += 1, R8140 += 1 };
  s3 -> s5 [73, 73] { R8349 += 1, R8305 += 1, R8139 += 1, R8140 += 1 };
  s3 -> s6 [73, 73] { R8349 += 1, R8305 += 1, R8138 += 1, R8139 += 1 };
  s3 -> s7 [73, 73] { R8349 += 1, R8305 += 1, R8138 += 1, R8139 += 1 };
  s3 -> s1 [74, 65535] { R8349 += 1, R8305 += 1, R8138 += 1, R8139 += 1 };
  s3 -> s2 [74, 65535] { R8349 += 1, R8305 += 1, R8139 += 1, R8140 += 1 };
  s4 -> s4 [0, 65535] { R8349 += 1, R8305 += 1, R8139 += 1, R8140 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s9 [0, 65535] { R8349 += 1 };
  s5 -> s5 [0, 65535] { R8349 += 1 };
  s5 -> s8 [0, 65535];
  s7 -> s4 [0, 65535] { R8349 += 1, R8305 += 1, R8139 += 1, R8140 += 1 };
  s7 -> s7 [0, 65535] { R8349 += 1, R8305 += 1, R8138 += 1, R8139 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R8349 += 1 };
  accepting s4, s8, s5, s2, s9;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 72] { R8351 += 1, R8307 += 1, R8248 += 1, R8249 += 1 };
  s0 -> s2 [0, 72] { R8351 += 1, R8307 += 1, R8249 += 1 };
  s0 -> s0 [0, 65535] { R8350 += 1, R8351 += 1 };
  s0 -> s3 [0, 65535] { R8351 += 1, R8306 += 1, R8307 += 1 };
  s0 -> s4 [73, 73] { R8351 += 1, R8307 += 1, R8249 += 1 };
  s0 -> s5 [73, 73] { R8351 += 1, R8307 += 1, R8249 += 1 };
  s0 -> s6 [73, 73] { R8351 += 1, R8307 += 1, R8248 += 1, R8249 += 1 };
  s0 -> s7 [73, 73] { R8351 += 1, R8307 += 1, R8248 += 1, R8249 += 1 };
  s0 -> s2 [74, 76] { R8351 += 1, R8307 += 1, R8249 += 1 };
  s0 -> s1 [74, 65535] { R8351 += 1, R8307 += 1, R8248 += 1, R8249 += 1 };
  s0 -> s2 [87, 65535] { R8351 += 1, R8307 += 1, R8249 += 1 };
  s1 -> s1 [0, 72] { R8351 += 1, R8307 += 1, R8248 += 1, R8249 += 1 };
  s1 -> s2 [0, 72] { R8351 += 1, R8307 += 1, R8249 += 1 };
  s1 -> s4 [73, 73] { R8351 += 1, R8307 += 1, R8249 += 1 };
  s1 -> s5 [73, 73] { R8351 += 1, R8307 += 1, R8249 += 1 };
  s1 -> s6 [73, 73] { R8351 += 1, R8307 += 1, R8248 += 1, R8249 += 1 };
  s1 -> s7 [73, 73] { R8351 += 1, R8307 += 1, R8248 += 1, R8249 += 1 };
  s1 -> s2 [74, 76] { R8351 += 1, R8307 += 1, R8249 += 1 };
  s1 -> s1 [74, 65535] { R8351 += 1, R8307 += 1, R8248 += 1, R8249 += 1 };
  s1 -> s2 [87, 65535] { R8351 += 1, R8307 += 1, R8249 += 1 };
  s2 -> s2 [0, 72] { R8351 += 1, R8307 += 1, R8249 += 1 };
  s2 -> s2 [0, 65535] { R8351 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s4 [73, 73] { R8351 += 1, R8307 += 1 };
  s2 -> s5 [73, 73] { R8351 += 1, R8307 += 1 };
  s2 -> s2 [74, 76] { R8351 += 1, R8307 += 1, R8249 += 1 };
  s2 -> s2 [74, 65535] { R8351 += 1, R8307 += 1 };
  s2 -> s2 [87, 65535] { R8351 += 1, R8307 += 1, R8249 += 1 };
  s3 -> s1 [0, 72] { R8351 += 1, R8307 += 1, R8248 += 1, R8249 += 1 };
  s3 -> s2 [0, 72] { R8351 += 1, R8307 += 1, R8249 += 1 };
  s3 -> s3 [0, 65535] { R8351 += 1, R8306 += 1, R8307 += 1 };
  s3 -> s4 [73, 73] { R8351 += 1, R8307 += 1, R8249 += 1 };
  s3 -> s5 [73, 73] { R8351 += 1, R8307 += 1, R8249 += 1 };
  s3 -> s6 [73, 73] { R8351 += 1, R8307 += 1, R8248 += 1, R8249 += 1 };
  s3 -> s7 [73, 73] { R8351 += 1, R8307 += 1, R8248 += 1, R8249 += 1 };
  s3 -> s2 [74, 76] { R8351 += 1, R8307 += 1, R8249 += 1 };
  s3 -> s1 [74, 65535] { R8351 += 1, R8307 += 1, R8248 += 1, R8249 += 1 };
  s3 -> s2 [87, 65535] { R8351 += 1, R8307 += 1, R8249 += 1 };
  s4 -> s4 [0, 76] { R8351 += 1, R8307 += 1, R8249 += 1 };
  s4 -> s4 [0, 65535] { R8351 += 1, R8307 += 1 };
  s4 -> s9 [0, 65535] { R8351 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s4 [87, 65535] { R8351 += 1, R8307 += 1, R8249 += 1 };
  s5 -> s5 [0, 65535] { R8351 += 1 };
  s5 -> s8 [0, 65535];
  s7 -> s4 [0, 76] { R8351 += 1, R8307 += 1, R8249 += 1 };
  s7 -> s7 [0, 65535] { R8351 += 1, R8307 += 1, R8248 += 1, R8249 += 1 };
  s7 -> s4 [87, 65535] { R8351 += 1, R8307 += 1, R8249 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R8351 += 1 };
  s9 -> s8 [0, 65535];
  accepting s4, s8, s5, s2, s9;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
synchronised {  // Automata constraining P54
automaton P54_0 {
  init s0;
  s0 -> s1 [109, 109];
  accepting s1;
};
};
constraint R2 = R8351 && R20 - R8351 = -1 && R21 = R8351 && R22 - R8351 = -1 && R23 = R8351 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R7715 + -1*R7713 - R53 = 0 && R52 + R7714 + R7712 = 0 && R8292 = 0 && R8293 = 0 && R8300 = 0 && R8301 = 0 && R8302 = 0 && R8303 = 0 && R8304 = 0 && R8305 = 0 && R8306 = 0 && R8307 = 0 && R8308 = 0 && R8309 = R8351 && R8310 = 0 && R8311 = R8351 && R8312 = 0 && R8313 = R8351 && R8314 = 0 && R8315 = R8351 && R8316 = 0 && R8317 = R8351 && R8318 = 0 && R8319 = R8351 && R8320 = 0 && R8321 = R8351 && R8322 = 0 && R8323 = R8351 && R8324 = 0 && R8325 = R8351 && R8326 = 0 && R8327 = R8351 && R8328 = 0 && R8329 = R8351 && R8330 = 0 && R8331 = R8351 && R8332 = 0 && R8333 = R8351 && R8334 = 0 && R8335 = R8351 && R8336 = 0 && R8337 = R8351 && R8338 = 0 && R8339 = R8351 && R8340 = 0 && R8341 = R8351 && R8342 = 0 && R8343 = R8351 && R8344 = 0 && R8345 = R8351 && R8346 = 0 && R8347 = R8351 && R8348 = 0 && R8349 = R8351 && R8350 = 0 && -1 < R1 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R7715 + -1*R7713 - R53 < 1 && 0 < R8351 && (R1 != 0 || R17 = 0 || (R8252 = 0 && R8253 = 0)) && (R1 != 0 || R17 = 0 || (R8254 = 0 && R8255 = 0)) && (R1 != 0 || R17 = 0 || (R8256 = 0 && R8257 = 0)) && (R1 != 0 || R17 = 0 || (R8258 = 0 && R8259 = 0)) && (R1 != 0 || R17 = 0 || (R8260 = 0 && R8261 = 0)) && (R1 != 0 || R17 = 0 || (R8262 = 0 && R8263 = 0)) && (R1 != 0 || R17 = 0 || (R8264 = 0 && R8265 = 0)) && (R1 != 0 || R17 = 0 || (R8266 = 0 && R8267 = 0)) && (R1 != 0 || R17 = 0 || (R8268 = 0 && R8269 = 0)) && (R1 != 0 || R17 = 0 || (R8270 = 0 && R8271 = 0)) && (R48 + R7711 + R7708 != 0 || ((R42 + R72 + R70 != 0 || R43 + R73 + R71 + -1*R7715 + -1*R7713 - R53 = 0 || R53 + R7715 + R7713 < 1) && (R42 + R72 + R70 = 0 || R53 + R7715 + R7713 < 1))) && (R48 + R7711 + R7708 != 0 || ((R46 + R7709 + R7706 != 0 || R47 + R7710 + R7707 + -1*R7715 + -1*R7713 - R53 = 0 || R53 + R7715 + R7713 < 1) && (R46 + R7709 + R7706 = 0 || R53 + R7715 + R7713 < 1))) && (R8252 != 0 || R1 = R8253 || R1 < 1) && (R8254 != 0 || R1 = R8255 || R1 < 1) && (R8256 != 0 || R1 = R8257 || R1 < 1) && (R8258 != 0 || R1 = R8259 || R1 < 1) && (R8260 != 0 || R1 = R8261 || R1 < 1) && (R8262 != 0 || R1 = R8263 || R1 < 1) && (R8264 != 0 || R1 = R8265 || R1 < 1) && (R8266 != 0 || R1 = R8267 || R1 < 1) && (R8268 != 0 || R1 = R8269 || R1 < 1) && (R8270 != 0 || R1 = R8271 || R1 < 1) && (R18 = 0 || (R8290 = 0 && R8291 = 0)) && (R18 = 0 || (R8294 = 0 && R8295 = 0)) && (R18 = 0 || (R8296 = 0 && R8297 = 0)) && (R18 = 0 || (R8298 = 0 && R8299 = 0)) && (R19 = 0 || (R8272 = 0 && R8273 = 0)) && (R19 = 0 || (R8274 = 0 && R8275 = 0)) && (R19 = 0 || (R8276 = 0 && R8277 = 0)) && (R19 = 0 || (R8278 = 0 && R8279 = 0)) && (R19 = 0 || (R8280 = 0 && R8281 = 0)) && (R19 = 0 || (R8282 = 0 && R8283 = 0)) && (R19 = 0 || (R8284 = 0 && R8285 = 0)) && (R19 = 0 || (R8286 = 0 && R8287 = 0)) && (R19 = 0 || (R8288 = 0 && R8289 = 0)) && (R48 + R7711 + R7708 = 0 || (R42 + R72 + R70 = 0 && R43 + R73 + R71 + -1*R7715 + -1*R7713 - R53 = 0)) && (R48 + R7711 + R7708 = 0 || (R46 + R7709 + R7706 = 0 && R47 + R7710 + R7707 + -1*R7715 + -1*R7713 - R53 = 0)) && (R58 + R8143 + R8140 = 0 || (R56 + R8141 + R8138 = 0 && R57 + R8142 + R8139 = 0)) && (R58 + R8143 + R8140 = 0 || (R62 + R8250 + R8248 = 0 && R63 + R8251 + R8249 = 0)) && (R8252 = 0 || R1 < 1) && (R8254 = 0 || R1 < 1) && (R8256 = 0 || R1 < 1) && (R8258 = 0 || R1 < 1) && (R8260 = 0 || R1 < 1) && (R8262 = 0 || R1 < 1) && (R8264 = 0 || R1 < 1) && (R8266 = 0 || R1 < 1) && (R8268 = 0 || R1 < 1) && (R8270 = 0 || R1 < 1);
// End of Parikh automata intersection problem
