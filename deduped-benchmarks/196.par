// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R100, R101, R102, R103, R104, R105, R106, R107, R108, R109, R11, R110, R111, R112, R113, R114, R115, R116, R117, R118, R119, R120, R121, R122, R123, R124, R125, R126, R127, R128, R129, R130, R131, R132, R133, R134, R135, R136, R137, R138, R139, R140, R141, R142, R143, R144, R145, R2, R3, R4, R5, R6, R7, R79, R8, R80, R81, R82, R83, R84, R85, R86, R87, R88, R89, R90, R91, R92, R93, R94, R95, R96, R97, R98, R99;
synchronised {  // Automata constraining P3
automaton P3_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
synchronised {  // Automata constraining P24
automaton P24_0 {
  init s0;
  s0 -> s1 [13, 13];
  accepting s1;
};
};
synchronised {  // Automata constraining P22
automaton P22_0 {
  init s0;
  s0 -> s1 [9, 9];
  accepting s1;
};
};
synchronised {  // Automata constraining value
automaton value_0 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value_1 {
  init s0;
  s0 -> s0 [0, 65535] { R96 += 1, R97 += 1 };
  s0 -> s1 [10, 10] { R97 += 1 };
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value_2 {
  init s0;
  s0 -> s0 [0, 65535] { R98 += 1, R99 += 1 };
  s0 -> s1 [0, 65535] { R99 += 1, R7 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R99 += 1, R7 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value_3 {
  init s0;
  s0 -> s1 [0, 8] { R101 += 1 };
  s0 -> s0 [0, 65535] { R100 += 1, R101 += 1 };
  s0 -> s2 [9, 13] { R101 += 1 };
  s0 -> s1 [14, 31] { R101 += 1 };
  s0 -> s2 [32, 32] { R101 += 1 };
  s0 -> s1 [33, 65535] { R101 += 1 };
  s1 -> s1 [0, 65535] { R101 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R101 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value_4 {
  init s0;
  s0 -> s0 [0, 65535] { R102 += 1, R103 += 1 };
  s0 -> s1 [0, 65535] { R103 += 1, R8 += 1 };
  s1 -> s1 [0, 65535] { R103 += 1, R8 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value_5 {
  init s0;
  s0 -> s1 [0, 31] { R119 += 1 };
  s0 -> s0 [0, 65535] { R118 += 1, R119 += 1 };
  s0 -> s2 [32, 32] { R119 += 1 };
  s0 -> s1 [33, 65535] { R119 += 1 };
  s1 -> s1 [0, 31] { R119 += 1 };
  s1 -> s2 [32, 32] { R119 += 1 };
  s1 -> s1 [33, 65535] { R119 += 1 };
  s2 -> s2 [0, 65535] { R119 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value_6 {
  init s0;
  s0 -> s0 [0, 65535] { R120 += 1, R121 += 1 };
  s0 -> s1 [0, 65535] { R121 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R121 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value_7 {
  init s0;
  s0 -> s1 [0, 31] { R123 += 1, R11 += 1 };
  s0 -> s0 [0, 65535] { R122 += 1, R123 += 1 };
  s0 -> s2 [0, 65535] { R123 += 1, R10 += 1, R11 += 1 };
  s0 -> s3 [32, 32] { R123 += 1 };
  s0 -> s1 [33, 65535] { R123 += 1, R11 += 1 };
  s1 -> s1 [0, 31] { R123 += 1, R11 += 1 };
  s1 -> s3 [32, 32] { R123 += 1 };
  s1 -> s1 [33, 65535] { R123 += 1, R11 += 1 };
  s2 -> s1 [0, 31] { R123 += 1, R11 += 1 };
  s2 -> s2 [0, 65535] { R123 += 1, R10 += 1, R11 += 1 };
  s2 -> s3 [32, 32] { R123 += 1 };
  s2 -> s1 [33, 65535] { R123 += 1, R11 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R123 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton value_8 {
  init s0;
  s0 -> s1 [0, 8] { R125 += 1, R89 += 1 };
  s0 -> s2 [0, 65535] { R125 += 1, R88 += 1, R89 += 1 };
  s0 -> s0 [0, 65535] { R124 += 1, R125 += 1 };
  s0 -> s3 [9, 13] { R125 += 1, R89 += 1 };
  s0 -> s1 [14, 31] { R125 += 1, R89 += 1 };
  s0 -> s3 [32, 32] { R125 += 1, R89 += 1 };
  s0 -> s1 [33, 65535] { R125 += 1, R89 += 1 };
  s1 -> s1 [0, 65535] { R125 += 1, R89 += 1 };
  s1 -> s5 [0, 65535] { R125 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R125 += 1, R89 += 1 };
  s2 -> s2 [0, 65535] { R125 += 1, R88 += 1, R89 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R125 += 1, R89 += 1 };
  s2 -> s1 [14, 31] { R125 += 1, R89 += 1 };
  s2 -> s3 [32, 32] { R125 += 1, R89 += 1 };
  s2 -> s1 [33, 65535] { R125 += 1, R89 += 1 };
  s3 -> s1 [0, 65535] { R125 += 1, R89 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R125 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value_9 {
  init s0;
  s0 -> s1 [0, 65535] { R127 += 1, R91 += 1, R5 += 1 };
  s0 -> s2 [0, 65535] { R127 += 1, R90 += 1, R91 += 1 };
  s0 -> s0 [0, 65535] { R126 += 1, R127 += 1 };
  s1 -> s1 [0, 65535] { R127 += 1, R91 += 1, R5 += 1 };
  s1 -> s4 [0, 65535] { R127 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R127 += 1, R91 += 1, R5 += 1 };
  s2 -> s2 [0, 65535] { R127 += 1, R90 += 1, R91 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R127 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value_10 {
  init s0;
  s0 -> s1 [0, 8] { R129 += 1, R93 += 1 };
  s0 -> s0 [0, 65535] { R128 += 1, R129 += 1 };
  s0 -> s2 [0, 65535] { R129 += 1, R92 += 1, R93 += 1 };
  s0 -> s3 [9, 13] { R129 += 1, R93 += 1 };
  s0 -> s1 [14, 31] { R129 += 1, R93 += 1 };
  s0 -> s3 [32, 32] { R129 += 1, R93 += 1 };
  s0 -> s1 [33, 65535] { R129 += 1, R93 += 1 };
  s1 -> s5 [0, 65535] { R129 += 1 };
  s1 -> s1 [0, 65535] { R129 += 1, R93 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R129 += 1, R93 += 1 };
  s2 -> s2 [0, 65535] { R129 += 1, R92 += 1, R93 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R129 += 1, R93 += 1 };
  s2 -> s1 [14, 31] { R129 += 1, R93 += 1 };
  s2 -> s3 [32, 32] { R129 += 1, R93 += 1 };
  s2 -> s1 [33, 65535] { R129 += 1, R93 += 1 };
  s3 -> s1 [0, 65535] { R129 += 1, R93 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R129 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value_11 {
  init s0;
  s0 -> s1 [0, 65535] { R131 += 1, R94 += 1, R95 += 1 };
  s0 -> s2 [0, 65535] { R131 += 1, R95 += 1, R6 += 1 };
  s0 -> s0 [0, 65535] { R130 += 1, R131 += 1 };
  s1 -> s1 [0, 65535] { R131 += 1, R94 += 1, R95 += 1 };
  s1 -> s2 [0, 65535] { R131 += 1, R95 += 1, R6 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R131 += 1, R95 += 1, R6 += 1 };
  s2 -> s3 [0, 65535] { R131 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R131 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value_12 {
  init s0;
  s0 -> s1 [0, 64] { R133 += 1, R105 += 1 };
  s0 -> s0 [0, 65535] { R132 += 1, R133 += 1 };
  s0 -> s2 [0, 65535] { R133 += 1, R104 += 1, R105 += 1 };
  s0 -> s1 [91, 65535] { R133 += 1, R105 += 1 };
  s1 -> s1 [0, 64] { R133 += 1, R105 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R133 += 1 };
  s1 -> s1 [91, 65535] { R133 += 1, R105 += 1 };
  s2 -> s1 [0, 64] { R133 += 1, R105 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R133 += 1, R104 += 1, R105 += 1 };
  s2 -> s1 [91, 65535] { R133 += 1, R105 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value_13 {
  init s0;
  s0 -> s1 [0, 65535] { R135 += 1, R106 += 1, R107 += 1 };
  s0 -> s2 [0, 65535] { R135 += 1, R107 += 1, R79 += 1 };
  s0 -> s0 [0, 65535] { R134 += 1, R135 += 1 };
  s1 -> s1 [0, 65535] { R135 += 1, R106 += 1, R107 += 1 };
  s1 -> s2 [0, 65535] { R135 += 1, R107 += 1, R79 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R135 += 1, R107 += 1, R79 += 1 };
  s2 -> s3 [0, 65535] { R135 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R135 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value_14 {
  init s0;
  s0 -> s1 [0, 65535] { R137 += 1, R108 += 1, R109 += 1 };
  s0 -> s0 [0, 65535] { R136 += 1, R137 += 1 };
  s0 -> s2 [0, 65535] { R137 += 1, R109 += 1, R0 += 1 };
  s1 -> s1 [0, 65535] { R137 += 1, R108 += 1, R109 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R137 += 1, R109 += 1, R0 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R137 += 1 };
  s2 -> s2 [0, 65535] { R137 += 1, R109 += 1, R0 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R137 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value_15 {
  init s0;
  s0 -> s1 [0, 65535] { R139 += 1, R110 += 1, R111 += 1 };
  s0 -> s0 [0, 65535] { R138 += 1, R139 += 1 };
  s0 -> s2 [0, 65535] { R139 += 1, R111 += 1, R80 += 1, R81 += 1 };
  s0 -> s3 [11, 11] { R139 += 1, R111 += 1, R81 += 1 };
  s1 -> s1 [0, 65535] { R139 += 1, R110 += 1, R111 += 1 };
  s1 -> s2 [0, 65535] { R139 += 1, R111 += 1, R80 += 1, R81 += 1 };
  s1 -> s3 [11, 11] { R139 += 1, R111 += 1, R81 += 1 };
  s2 -> s2 [0, 65535] { R139 += 1, R111 += 1, R80 += 1, R81 += 1 };
  s2 -> s3 [11, 11] { R139 += 1, R111 += 1, R81 += 1 };
  s3 -> s4 [0, 65535] { R139 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R139 += 1, R111 += 1 };
  s4 -> s4 [0, 65535] { R139 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
automaton value_16 {
  init s0;
  s0 -> s1 [0, 65535] { R141 += 1, R112 += 1, R113 += 1 };
  s0 -> s0 [0, 65535] { R140 += 1, R141 += 1 };
  s0 -> s2 [0, 65535] { R141 += 1, R113 += 1, R83 += 1, R3 += 1 };
  s0 -> s3 [0, 65535] { R141 += 1, R113 += 1, R82 += 1, R83 += 1 };
  s1 -> s1 [0, 65535] { R141 += 1, R112 += 1, R113 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s2 [0, 65535] { R141 += 1, R113 += 1, R83 += 1, R3 += 1 };
  s1 -> s3 [0, 65535] { R141 += 1, R113 += 1, R82 += 1, R83 += 1 };
  s2 -> s4 [0, 65535] { R141 += 1 };
  s2 -> s6 [0, 65535] { R141 += 1, R113 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R141 += 1, R113 += 1, R83 += 1, R3 += 1 };
  s3 -> s4 [0, 65535] { R141 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R141 += 1, R113 += 1, R83 += 1, R3 += 1 };
  s3 -> s3 [0, 65535] { R141 += 1, R113 += 1, R82 += 1, R83 += 1 };
  s4 -> s4 [0, 65535] { R141 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R141 += 1 };
  s6 -> s6 [0, 65535] { R141 += 1, R113 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value_17 {
  init s0;
  s0 -> s1 [0, 8] { R143 += 1, R115 += 1, R85 += 1 };
  s0 -> s2 [0, 65535] { R143 += 1, R114 += 1, R115 += 1 };
  s0 -> s0 [0, 65535] { R142 += 1, R143 += 1 };
  s0 -> s3 [0, 65535] { R143 += 1, R115 += 1, R84 += 1, R85 += 1 };
  s0 -> s4 [9, 13] { R143 += 1, R115 += 1, R85 += 1 };
  s0 -> s1 [14, 31] { R143 += 1, R115 += 1, R85 += 1 };
  s0 -> s4 [32, 32] { R143 += 1, R115 += 1, R85 += 1 };
  s0 -> s1 [33, 65535] { R143 += 1, R115 += 1, R85 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R143 += 1, R115 += 1, R85 += 1 };
  s1 -> s6 [0, 65535] { R143 += 1 };
  s1 -> s7 [0, 65535] { R143 += 1, R115 += 1 };
  s2 -> s1 [0, 8] { R143 += 1, R115 += 1, R85 += 1 };
  s2 -> s2 [0, 65535] { R143 += 1, R114 += 1, R115 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R143 += 1, R115 += 1, R84 += 1, R85 += 1 };
  s2 -> s4 [9, 13] { R143 += 1, R115 += 1, R85 += 1 };
  s2 -> s1 [14, 31] { R143 += 1, R115 += 1, R85 += 1 };
  s2 -> s4 [32, 32] { R143 += 1, R115 += 1, R85 += 1 };
  s2 -> s1 [33, 65535] { R143 += 1, R115 += 1, R85 += 1 };
  s3 -> s1 [0, 8] { R143 += 1, R115 += 1, R85 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R143 += 1, R115 += 1, R84 += 1, R85 += 1 };
  s3 -> s6 [0, 65535] { R143 += 1 };
  s3 -> s4 [9, 13] { R143 += 1, R115 += 1, R85 += 1 };
  s3 -> s1 [14, 31] { R143 += 1, R115 += 1, R85 += 1 };
  s3 -> s4 [32, 32] { R143 += 1, R115 += 1, R85 += 1 };
  s3 -> s1 [33, 65535] { R143 += 1, R115 += 1, R85 += 1 };
  s4 -> s1 [0, 65535] { R143 += 1, R115 += 1, R85 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R143 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R143 += 1 };
  s7 -> s7 [0, 65535] { R143 += 1, R115 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton value_18 {
  init s0;
  s0 -> s1 [0, 65535] { R145 += 1, R117 += 1, R86 += 1, R87 += 1 };
  s0 -> s0 [0, 65535] { R144 += 1, R145 += 1 };
  s0 -> s2 [0, 65535] { R145 += 1, R116 += 1, R117 += 1 };
  s0 -> s3 [0, 65535] { R145 += 1, R117 += 1, R87 += 1, R4 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R145 += 1 };
  s1 -> s1 [0, 65535] { R145 += 1, R117 += 1, R86 += 1, R87 += 1 };
  s1 -> s3 [0, 65535] { R145 += 1, R117 += 1, R87 += 1, R4 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R145 += 1, R117 += 1, R86 += 1, R87 += 1 };
  s2 -> s2 [0, 65535] { R145 += 1, R116 += 1, R117 += 1 };
  s2 -> s3 [0, 65535] { R145 += 1, R117 += 1, R87 += 1, R4 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R145 += 1 };
  s3 -> s6 [0, 65535] { R145 += 1, R117 += 1 };
  s3 -> s3 [0, 65535] { R145 += 1, R117 += 1, R87 += 1, R4 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R145 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R145 += 1 };
  s6 -> s6 [0, 65535] { R145 += 1, R117 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R0 = R81 && R1 = R117 && R2 - R145 = 1 && R10 = 0 && R11 - R116 = -1 && R80 - R81 = -1 && R88 - R117 = -1 && R89 = R117 && R90 - R117 = -1 && R91 = R117 && R92 = 0 && R93 = 1 && R94 = 0 && R95 = 1 && R96 = R145 && R97 - R145 = 1 && R98 = R145 && R99 - R145 = 1 && R100 = 0 && R101 = 1 && R102 = 0 && R103 = 1 && R108 = R116 && R109 = R117 && R110 = R116 && R111 = R117 && R112 = R116 && R113 = R117 && R114 = R116 && R115 = R117 && R118 = 0 && R119 = R145 && R120 = 0 && R121 = R145 && R122 = 0 && R123 = R145 && R124 = 0 && R125 = R145 && R126 = 0 && R127 = R145 && R128 = 0 && R129 = R145 && R130 = 0 && R131 = R145 && R132 = 0 && R133 = R145 && R134 = 0 && R135 = R145 && R136 = 0 && R137 = R145 && R138 = 0 && R139 = R145 && R140 = 0 && R141 = R145 && R142 = 0 && R143 = R145 && R144 = 0 && R81 != 0 && R116 - R117 < 1 && 0 < R116 && -1 < R145 && (R81 != R83 || R82 - R83 = -1 || (R3 = 0 && R83 < 0)) && (R84 != 0 || ((R4 != 0 || ((R81 != R85 || R85 = 1 || R85 < 0) && (R81 = R85 || R85 = 1 || R81 < 1))) && (R4 = 0 || ((R81 != R85 || R85 = 1 || R85 < 0) && (R85 != 1 || -1 < R81) && (R81 = R85 || R85 = 1))))) && (R86 != 0 || ((R4 != 0 || ((R81 != R87 || R87 = 1 || R87 < 0) && (R81 = R87 || R87 = 1 || R81 < 1))) && (R4 = 0 || ((R81 != R87 || R87 = 1 || R87 < 0) && (R87 != 1 || -1 < R81) && (R81 = R87 || R87 = 1))))) && (R104 != 0 || R105 - R116 = -1 || (R79 = 0 && R116 = 1)) && (R106 != 0 || R107 - R116 = -1 || (R79 = 0 && R116 = 1)) && (R81 = R83 || (R3 = 0 && R81 < 0)) && (R84 = 0 || (R4 = 0 && R81 < 0)) && (R86 = 0 || (R4 = 0 && R81 < 0)) && (R104 = 0 || (R79 = 0 && R116 = 1)) && (R106 = 0 || (R79 = 0 && R116 = 1));
// End of Parikh automata intersection problem
