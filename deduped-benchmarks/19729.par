// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R12, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R3890, R3891, R3892, R3893, R3894, R3895, R3896, R3897, R3898, R3899, R4, R40, R42, R43, R4322, R4323, R4324, R4325, R4326, R4327, R4328, R4329, R4330, R4331, R4332, R4333, R4334, R4335, R4336, R4337, R4338, R4339, R4340, R4341, R4342, R4343, R4344, R4345, R4346, R4347, R4348, R4349, R4350, R4351, R4352, R4353, R4354, R4355, R4356, R4357, R4358, R4359, R4360, R4361, R4362, R4363, R4364, R4365, R4366, R4367, R4368, R4369, R4370, R4371, R4372, R4373, R4374, R4375, R4376, R4377, R4378, R4379, R4380, R4381, R4382, R4383, R4384, R4385, R4386, R4387, R4388, R4389, R4390, R4391, R4392, R4393, R4394, R4395, R4396, R4397, R4398, R4399, R4400, R4401, R4402, R4403, R4404, R4405, R4406, R4407, R4408, R4409, R4410, R4411, R4412, R4413, R4414, R4415, R4416, R4417, R4418, R4419, R4420, R4421, R4422, R4423, R4424, R4425, R4426, R4427, R4428, R4429, R4430, R4431, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R70, R71, R72, R73, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 72];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [73, 73];
  s0 -> s1 [74, 65535];
  s1 -> s1 [0, 72];
  s1 -> s2 [73, 73];
  s1 -> s1 [74, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R21 += 1 };
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R25 += 1 };
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R4353 += 1, R19 += 1 };
  s0 -> s0 [0, 65535] { R4352 += 1, R4353 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R4353 += 1, R19 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 72] { R4355 += 1 };
  s0 -> s0 [0, 65535] { R4354 += 1, R4355 += 1 };
  s0 -> s2 [73, 73] { R4355 += 1 };
  s0 -> s3 [73, 73] { R4355 += 1 };
  s0 -> s1 [82, 65535] { R4355 += 1 };
  s1 -> s1 [0, 72] { R4355 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R4355 += 1 };
  s1 -> s3 [73, 73] { R4355 += 1 };
  s1 -> s1 [82, 65535] { R4355 += 1 };
  s2 -> s2 [0, 73] { R4355 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [82, 65535] { R4355 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 72] { R4357 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R4356 += 1, R4357 += 1 };
  s0 -> s2 [73, 73] { R4357 += 1, R38 += 1 };
  s0 -> s3 [73, 73] { R4357 += 1, R38 += 1 };
  s0 -> s1 [74, 65535] { R4357 += 1, R38 += 1 };
  s1 -> s1 [0, 72] { R4357 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R4357 += 1, R38 += 1 };
  s1 -> s3 [73, 73] { R4357 += 1, R38 += 1 };
  s1 -> s1 [74, 65535] { R4357 += 1, R38 += 1 };
  s2 -> s2 [0, 65535] { R4357 += 1, R38 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 72] { R4359 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R4358 += 1, R4359 += 1 };
  s0 -> s2 [73, 73] { R4359 += 1, R40 += 1 };
  s0 -> s3 [73, 73] { R4359 += 1, R40 += 1 };
  s0 -> s1 [74, 65535] { R4359 += 1, R40 += 1 };
  s1 -> s1 [0, 72] { R4359 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R4359 += 1, R40 += 1 };
  s1 -> s3 [73, 73] { R4359 += 1, R40 += 1 };
  s1 -> s1 [74, 65535] { R4359 += 1, R40 += 1 };
  s2 -> s2 [0, 65535] { R4359 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 72] { R4361 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R4360 += 1, R4361 += 1 };
  s0 -> s2 [73, 73] { R4361 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [73, 73] { R4361 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [74, 65535] { R4361 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 72] { R4361 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R4361 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [73, 73] { R4361 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [74, 65535] { R4361 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535] { R4361 += 1, R42 += 1, R43 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 72] { R4363 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R4362 += 1, R4363 += 1 };
  s0 -> s2 [73, 73] { R4363 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [73, 73] { R4363 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [74, 65535] { R4363 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 72] { R4363 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R4363 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [73, 73] { R4363 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [74, 65535] { R4363 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R4363 += 1, R46 += 1, R47 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 72] { R4365 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R4364 += 1, R4365 += 1 };
  s0 -> s2 [73, 73] { R4365 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [73, 73] { R4365 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [74, 65535] { R4365 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 72] { R4365 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R4365 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [73, 73] { R4365 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [74, 65535] { R4365 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R4365 += 1, R52 += 1, R53 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 72] { R4367 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R4366 += 1, R4367 += 1 };
  s0 -> s2 [73, 73] { R4367 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [73, 73] { R4367 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [74, 65535] { R4367 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 72] { R4367 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R4367 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [73, 73] { R4367 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [74, 65535] { R4367 += 1, R56 += 1, R57 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R4367 += 1, R56 += 1, R57 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 72] { R4369 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R4368 += 1, R4369 += 1 };
  s0 -> s2 [73, 73] { R4369 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [73, 73] { R4369 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [74, 65535] { R4369 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 72] { R4369 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R4369 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [73, 73] { R4369 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [74, 65535] { R4369 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R4369 += 1, R62 += 1, R63 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 72] { R4389 += 1 };
  s0 -> s0 [0, 65535] { R4388 += 1, R4389 += 1 };
  s0 -> s2 [73, 73] { R4389 += 1 };
  s0 -> s1 [74, 65535] { R4389 += 1 };
  s1 -> s1 [0, 72] { R4389 += 1 };
  s1 -> s2 [73, 73] { R4389 += 1 };
  s1 -> s1 [74, 65535] { R4389 += 1 };
  s2 -> s2 [0, 65535] { R4389 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R4390 += 1, R4391 += 1 };
  s0 -> s1 [0, 65535] { R4391 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R4391 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 72] { R4393 += 1 };
  s0 -> s2 [0, 65535] { R4393 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R4392 += 1, R4393 += 1 };
  s0 -> s3 [73, 73] { R4393 += 1 };
  s0 -> s1 [74, 65535] { R4393 += 1 };
  s1 -> s1 [0, 72] { R4393 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [73, 73] { R4393 += 1 };
  s1 -> s1 [74, 65535] { R4393 += 1 };
  s2 -> s1 [0, 72] { R4393 += 1 };
  s2 -> s2 [0, 65535] { R4393 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [73, 73] { R4393 += 1 };
  s2 -> s1 [74, 65535] { R4393 += 1 };
  s3 -> s3 [0, 65535] { R4393 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 72] { R4395 += 1, R4333 += 1 };
  s0 -> s0 [0, 65535] { R4394 += 1, R4395 += 1 };
  s0 -> s2 [0, 65535] { R4395 += 1, R4332 += 1, R4333 += 1 };
  s0 -> s1 [74, 65535] { R4395 += 1, R4333 += 1 };
  s1 -> s1 [0, 72] { R4395 += 1, R4333 += 1 };
  s1 -> s1 [0, 65535] { R4395 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [74, 65535] { R4395 += 1, R4333 += 1 };
  s2 -> s1 [0, 72] { R4395 += 1, R4333 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R4395 += 1, R4332 += 1, R4333 += 1 };
  s2 -> s1 [74, 65535] { R4395 += 1, R4333 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R4397 += 1, R4335 += 1, R17 += 1 };
  s0 -> s2 [0, 65535] { R4397 += 1, R4334 += 1, R4335 += 1 };
  s0 -> s0 [0, 65535] { R4396 += 1, R4397 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R4397 += 1, R4335 += 1, R17 += 1 };
  s1 -> s4 [0, 65535] { R4397 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R4397 += 1, R4335 += 1, R17 += 1 };
  s2 -> s2 [0, 65535] { R4397 += 1, R4334 += 1, R4335 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4397 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 73] { R4399 += 1, R4337 += 1 };
  s0 -> s2 [0, 65535] { R4399 += 1, R4336 += 1, R4337 += 1 };
  s0 -> s0 [0, 65535] { R4398 += 1, R4399 += 1 };
  s0 -> s1 [81, 65535] { R4399 += 1, R4337 += 1 };
  s1 -> s1 [0, 73] { R4399 += 1, R4337 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R4399 += 1 };
  s1 -> s1 [81, 65535] { R4399 += 1, R4337 += 1 };
  s2 -> s1 [0, 73] { R4399 += 1, R4337 += 1 };
  s2 -> s2 [0, 65535] { R4399 += 1, R4336 += 1, R4337 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [81, 65535] { R4399 += 1, R4337 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R4401 += 1, R4338 += 1, R4339 += 1 };
  s0 -> s2 [0, 65535] { R4401 += 1, R4339 += 1, R67 += 1 };
  s0 -> s0 [0, 65535] { R4400 += 1, R4401 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R4401 += 1, R4338 += 1, R4339 += 1 };
  s1 -> s2 [0, 65535] { R4401 += 1, R4339 += 1, R67 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R4401 += 1 };
  s2 -> s2 [0, 65535] { R4401 += 1, R4339 += 1, R67 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4401 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 80] { R4403 += 1, R4341 += 1 };
  s0 -> s0 [0, 65535] { R4402 += 1, R4403 += 1 };
  s0 -> s2 [0, 65535] { R4403 += 1, R4341 += 1, R69 += 1 };
  s0 -> s3 [0, 65535] { R4403 += 1, R4340 += 1, R4341 += 1 };
  s0 -> s1 [82, 65535] { R4403 += 1, R4341 += 1 };
  s1 -> s1 [0, 80] { R4403 += 1, R4341 += 1 };
  s1 -> s1 [0, 65535] { R4403 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [82, 65535] { R4403 += 1, R4341 += 1 };
  s2 -> s1 [0, 80] { R4403 += 1, R4341 += 1 };
  s2 -> s5 [0, 65535] { R4403 += 1 };
  s2 -> s2 [0, 65535] { R4403 += 1, R4341 += 1, R69 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [82, 65535] { R4403 += 1, R4341 += 1 };
  s3 -> s1 [0, 80] { R4403 += 1, R4341 += 1 };
  s3 -> s2 [0, 65535] { R4403 += 1, R4341 += 1, R69 += 1 };
  s3 -> s3 [0, 65535] { R4403 += 1, R4340 += 1, R4341 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [82, 65535] { R4403 += 1, R4341 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R4403 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 80] { R4405 += 1, R4343 += 1, R73 += 1 };
  s0 -> s2 [0, 65535] { R4405 += 1, R4343 += 1, R72 += 1, R73 += 1 };
  s0 -> s0 [0, 65535] { R4404 += 1, R4405 += 1 };
  s0 -> s3 [0, 65535] { R4405 += 1, R4342 += 1, R4343 += 1 };
  s0 -> s1 [82, 65535] { R4405 += 1, R4343 += 1, R73 += 1 };
  s1 -> s1 [0, 80] { R4405 += 1, R4343 += 1, R73 += 1 };
  s1 -> s1 [0, 65535] { R4405 += 1, R4343 += 1 };
  s1 -> s5 [0, 65535] { R4405 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [82, 65535] { R4405 += 1, R4343 += 1, R73 += 1 };
  s2 -> s1 [0, 80] { R4405 += 1, R4343 += 1, R73 += 1 };
  s2 -> s2 [0, 65535] { R4405 += 1, R4343 += 1, R72 += 1, R73 += 1 };
  s2 -> s5 [0, 65535] { R4405 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [82, 65535] { R4405 += 1, R4343 += 1, R73 += 1 };
  s3 -> s1 [0, 80] { R4405 += 1, R4343 += 1, R73 += 1 };
  s3 -> s2 [0, 65535] { R4405 += 1, R4343 += 1, R72 += 1, R73 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R4405 += 1, R4342 += 1, R4343 += 1 };
  s3 -> s1 [82, 65535] { R4405 += 1, R4343 += 1, R73 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R4405 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R4407 += 1, R4345 += 1 };
  s0 -> s2 [0, 65535] { R4407 += 1, R4345 += 1, R3894 += 1, R3895 += 1 };
  s0 -> s0 [0, 65535] { R4406 += 1, R4407 += 1 };
  s0 -> s3 [0, 65535] { R4407 += 1, R4344 += 1, R4345 += 1 };
  s1 -> s1 [0, 65535] { R4407 += 1, R4345 += 1 };
  s1 -> s5 [0, 65535] { R4407 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R4407 += 1, R4345 += 1 };
  s2 -> s2 [0, 65535] { R4407 += 1, R4345 += 1, R3894 += 1, R3895 += 1 };
  s2 -> s5 [0, 65535] { R4407 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R4407 += 1, R4345 += 1 };
  s3 -> s2 [0, 65535] { R4407 += 1, R4345 += 1, R3894 += 1, R3895 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R4407 += 1, R4344 += 1, R4345 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R4407 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 81] { R4409 += 1, R4347 += 1, R3899 += 1 };
  s0 -> s0 [0, 65535] { R4408 += 1, R4409 += 1 };
  s0 -> s1 [0, 65535] { R4409 += 1, R4347 += 1 };
  s0 -> s2 [0, 65535] { R4409 += 1, R4346 += 1, R4347 += 1 };
  s0 -> s1 [89, 65535] { R4409 += 1, R4347 += 1, R3899 += 1 };
  s1 -> s1 [0, 81] { R4409 += 1, R4347 += 1, R3899 += 1 };
  s1 -> s4 [0, 65535] { R4409 += 1 };
  s1 -> s1 [0, 65535] { R4409 += 1, R4347 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [89, 65535] { R4409 += 1, R4347 += 1, R3899 += 1 };
  s2 -> s1 [0, 81] { R4409 += 1, R4347 += 1, R3899 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R4409 += 1, R4347 += 1 };
  s2 -> s2 [0, 65535] { R4409 += 1, R4346 += 1, R4347 += 1 };
  s2 -> s1 [89, 65535] { R4409 += 1, R4347 += 1, R3899 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4409 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s0 [0, 65535] { R4410 += 1, R4411 += 1 };
  s0 -> s1 [0, 65535] { R4411 += 1, R4349 += 1 };
  s0 -> s2 [0, 65535] { R4411 += 1, R4349 += 1, R4326 += 1, R4327 += 1 };
  s0 -> s3 [0, 65535] { R4411 += 1, R4348 += 1, R4349 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R4411 += 1, R4349 += 1 };
  s1 -> s5 [0, 65535] { R4411 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R4411 += 1, R4349 += 1 };
  s2 -> s2 [0, 65535] { R4411 += 1, R4349 += 1, R4326 += 1, R4327 += 1 };
  s2 -> s5 [0, 65535] { R4411 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R4411 += 1, R4349 += 1 };
  s3 -> s2 [0, 65535] { R4411 += 1, R4349 += 1, R4326 += 1, R4327 += 1 };
  s3 -> s3 [0, 65535] { R4411 += 1, R4348 += 1, R4349 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R4411 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 80] { R4413 += 1, R4351 += 1, R4331 += 1 };
  s0 -> s2 [0, 65535] { R4413 += 1, R4351 += 1, R4330 += 1, R4331 += 1 };
  s0 -> s0 [0, 65535] { R4412 += 1, R4413 += 1 };
  s0 -> s3 [0, 65535] { R4413 += 1, R4350 += 1, R4351 += 1 };
  s0 -> s4 [81, 81] { R4413 += 1, R4351 += 1, R4331 += 1 };
  s0 -> s5 [81, 81] { R4413 += 1, R4351 += 1, R4331 += 1 };
  s0 -> s1 [90, 65535] { R4413 += 1, R4351 += 1, R4331 += 1 };
  s1 -> s1 [0, 80] { R4413 += 1, R4351 += 1, R4331 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R4413 += 1, R4351 += 1 };
  s1 -> s7 [0, 65535] { R4413 += 1 };
  s1 -> s4 [81, 81] { R4413 += 1, R4351 += 1, R4331 += 1 };
  s1 -> s5 [81, 81] { R4413 += 1, R4351 += 1, R4331 += 1 };
  s1 -> s1 [90, 65535] { R4413 += 1, R4351 += 1, R4331 += 1 };
  s2 -> s1 [0, 80] { R4413 += 1, R4351 += 1, R4331 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R4413 += 1, R4351 += 1, R4330 += 1, R4331 += 1 };
  s2 -> s7 [0, 65535] { R4413 += 1 };
  s2 -> s4 [81, 81] { R4413 += 1, R4351 += 1, R4331 += 1 };
  s2 -> s5 [81, 81] { R4413 += 1, R4351 += 1, R4331 += 1 };
  s2 -> s1 [90, 65535] { R4413 += 1, R4351 += 1, R4331 += 1 };
  s3 -> s1 [0, 80] { R4413 += 1, R4351 += 1, R4331 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s2 [0, 65535] { R4413 += 1, R4351 += 1, R4330 += 1, R4331 += 1 };
  s3 -> s3 [0, 65535] { R4413 += 1, R4350 += 1, R4351 += 1 };
  s3 -> s4 [81, 81] { R4413 += 1, R4351 += 1, R4331 += 1 };
  s3 -> s5 [81, 81] { R4413 += 1, R4351 += 1, R4331 += 1 };
  s3 -> s1 [90, 65535] { R4413 += 1, R4351 += 1, R4331 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R4413 += 1, R4351 += 1 };
  s4 -> s7 [0, 65535] { R4413 += 1 };
  s5 -> s5 [0, 81] { R4413 += 1, R4351 += 1, R4331 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R4413 += 1 };
  s5 -> s5 [0, 65535] { R4413 += 1, R4351 += 1 };
  s5 -> s5 [90, 65535] { R4413 += 1, R4351 += 1, R4331 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R4413 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R4415 += 1, R4371 += 1, R18 += 1 };
  s0 -> s2 [0, 65535] { R4415 += 1, R4370 += 1, R4371 += 1 };
  s0 -> s0 [0, 65535] { R4414 += 1, R4415 += 1 };
  s1 -> s1 [0, 65535] { R4415 += 1, R4371 += 1, R18 += 1 };
  s1 -> s4 [0, 65535] { R4415 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R4415 += 1, R4371 += 1, R18 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R4415 += 1, R4370 += 1, R4371 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4415 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 72] { R4417 += 1, R4373 += 1 };
  s0 -> s2 [0, 65535] { R4417 += 1, R4372 += 1, R4373 += 1 };
  s0 -> s0 [0, 65535] { R4416 += 1, R4417 += 1 };
  s0 -> s3 [73, 73] { R4417 += 1, R4373 += 1 };
  s0 -> s4 [73, 73] { R4417 += 1, R4373 += 1 };
  s0 -> s5 [81, 81] { R4417 += 1, R4373 += 1 };
  s0 -> s1 [82, 65535] { R4417 += 1, R4373 += 1 };
  s1 -> s1 [0, 72] { R4417 += 1, R4373 += 1 };
  s1 -> s3 [73, 73] { R4417 += 1, R4373 += 1 };
  s1 -> s4 [73, 73] { R4417 += 1, R4373 += 1 };
  s1 -> s5 [81, 81] { R4417 += 1, R4373 += 1 };
  s1 -> s1 [82, 65535] { R4417 += 1, R4373 += 1 };
  s2 -> s1 [0, 72] { R4417 += 1, R4373 += 1 };
  s2 -> s2 [0, 65535] { R4417 += 1, R4372 += 1, R4373 += 1 };
  s2 -> s3 [73, 73] { R4417 += 1, R4373 += 1 };
  s2 -> s4 [73, 73] { R4417 += 1, R4373 += 1 };
  s2 -> s5 [81, 81] { R4417 += 1, R4373 += 1 };
  s2 -> s1 [82, 65535] { R4417 += 1, R4373 += 1 };
  s3 -> s3 [0, 73] { R4417 += 1, R4373 += 1 };
  s3 -> s8 [81, 81] { R4417 += 1, R4373 += 1 };
  s3 -> s3 [82, 65535] { R4417 += 1, R4373 += 1 };
  s5 -> s5 [0, 72] { R4417 += 1, R4373 += 1 };
  s5 -> s5 [0, 65535] { R4417 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [73, 73] { R4417 += 1, R4373 += 1 };
  s5 -> s8 [73, 73] { R4417 += 1, R4373 += 1 };
  s5 -> s5 [81, 65535] { R4417 += 1, R4373 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R4417 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 73] { R4417 += 1, R4373 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R4417 += 1 };
  s8 -> s8 [81, 65535] { R4417 += 1, R4373 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 72] { R4419 += 1, R4375 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R4418 += 1, R4419 += 1 };
  s0 -> s2 [0, 65535] { R4419 += 1, R4374 += 1, R4375 += 1 };
  s0 -> s3 [73, 73] { R4419 += 1, R4375 += 1, R66 += 1 };
  s0 -> s4 [73, 73] { R4419 += 1, R4375 += 1, R66 += 1 };
  s0 -> s1 [74, 65535] { R4419 += 1, R4375 += 1, R66 += 1 };
  s1 -> s1 [0, 72] { R4419 += 1, R4375 += 1, R66 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R4419 += 1 };
  s1 -> s3 [73, 73] { R4419 += 1, R4375 += 1, R66 += 1 };
  s1 -> s4 [73, 73] { R4419 += 1, R4375 += 1, R66 += 1 };
  s1 -> s1 [74, 65535] { R4419 += 1, R4375 += 1, R66 += 1 };
  s2 -> s1 [0, 72] { R4419 += 1, R4375 += 1, R66 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R4419 += 1, R4374 += 1, R4375 += 1 };
  s2 -> s3 [73, 73] { R4419 += 1, R4375 += 1, R66 += 1 };
  s2 -> s4 [73, 73] { R4419 += 1, R4375 += 1, R66 += 1 };
  s2 -> s1 [74, 65535] { R4419 += 1, R4375 += 1, R66 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R4419 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R4419 += 1, R4375 += 1, R66 += 1 };
  s4 -> s6 [0, 65535] { R4419 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R4419 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 72] { R4421 += 1, R4377 += 1, R68 += 1 };
  s0 -> s2 [0, 65535] { R4421 += 1, R4376 += 1, R4377 += 1 };
  s0 -> s0 [0, 65535] { R4420 += 1, R4421 += 1 };
  s0 -> s3 [73, 73] { R4421 += 1, R4377 += 1, R68 += 1 };
  s0 -> s4 [73, 73] { R4421 += 1, R4377 += 1, R68 += 1 };
  s0 -> s1 [74, 65535] { R4421 += 1, R4377 += 1, R68 += 1 };
  s1 -> s1 [0, 72] { R4421 += 1, R4377 += 1, R68 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R4421 += 1 };
  s1 -> s3 [73, 73] { R4421 += 1, R4377 += 1, R68 += 1 };
  s1 -> s4 [73, 73] { R4421 += 1, R4377 += 1, R68 += 1 };
  s1 -> s1 [74, 65535] { R4421 += 1, R4377 += 1, R68 += 1 };
  s2 -> s1 [0, 72] { R4421 += 1, R4377 += 1, R68 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R4421 += 1, R4376 += 1, R4377 += 1 };
  s2 -> s3 [73, 73] { R4421 += 1, R4377 += 1, R68 += 1 };
  s2 -> s4 [73, 73] { R4421 += 1, R4377 += 1, R68 += 1 };
  s2 -> s1 [74, 65535] { R4421 += 1, R4377 += 1, R68 += 1 };
  s3 -> s3 [0, 65535] { R4421 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R4421 += 1, R4377 += 1, R68 += 1 };
  s4 -> s6 [0, 65535] { R4421 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R4421 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 72] { R4423 += 1, R4379 += 1, R70 += 1, R71 += 1 };
  s0 -> s2 [0, 65535] { R4423 += 1, R4378 += 1, R4379 += 1 };
  s0 -> s0 [0, 65535] { R4422 += 1, R4423 += 1 };
  s0 -> s3 [73, 73] { R4423 += 1, R4379 += 1, R70 += 1, R71 += 1 };
  s0 -> s4 [73, 73] { R4423 += 1, R4379 += 1, R70 += 1, R71 += 1 };
  s0 -> s1 [74, 65535] { R4423 += 1, R4379 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 72] { R4423 += 1, R4379 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 65535] { R4423 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R4423 += 1, R4379 += 1, R70 += 1, R71 += 1 };
  s1 -> s4 [73, 73] { R4423 += 1, R4379 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [74, 65535] { R4423 += 1, R4379 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [0, 72] { R4423 += 1, R4379 += 1, R70 += 1, R71 += 1 };
  s2 -> s2 [0, 65535] { R4423 += 1, R4378 += 1, R4379 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R4423 += 1, R4379 += 1, R70 += 1, R71 += 1 };
  s2 -> s4 [73, 73] { R4423 += 1, R4379 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [74, 65535] { R4423 += 1, R4379 += 1, R70 += 1, R71 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R4423 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R4423 += 1 };
  s4 -> s4 [0, 65535] { R4423 += 1, R4379 += 1, R70 += 1, R71 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R4423 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 72] { R4425 += 1, R4381 += 1, R3890 += 1, R3891 += 1 };
  s0 -> s2 [0, 72] { R4425 += 1, R4381 += 1, R3891 += 1, R3892 += 1 };
  s0 -> s0 [0, 65535] { R4424 += 1, R4425 += 1 };
  s0 -> s3 [0, 65535] { R4425 += 1, R4380 += 1, R4381 += 1 };
  s0 -> s4 [73, 73] { R4425 += 1, R4381 += 1, R3890 += 1, R3891 += 1 };
  s0 -> s5 [73, 73] { R4425 += 1, R4381 += 1, R3891 += 1, R3892 += 1 };
  s0 -> s6 [73, 73] { R4425 += 1, R4381 += 1, R3891 += 1, R3892 += 1 };
  s0 -> s7 [73, 73] { R4425 += 1, R4381 += 1, R3890 += 1, R3891 += 1 };
  s0 -> s1 [74, 65535] { R4425 += 1, R4381 += 1, R3890 += 1, R3891 += 1 };
  s0 -> s2 [74, 65535] { R4425 += 1, R4381 += 1, R3891 += 1, R3892 += 1 };
  s1 -> s1 [0, 72] { R4425 += 1, R4381 += 1, R3890 += 1, R3891 += 1 };
  s1 -> s2 [0, 72] { R4425 += 1, R4381 += 1, R3891 += 1, R3892 += 1 };
  s1 -> s4 [73, 73] { R4425 += 1, R4381 += 1, R3890 += 1, R3891 += 1 };
  s1 -> s5 [73, 73] { R4425 += 1, R4381 += 1, R3891 += 1, R3892 += 1 };
  s1 -> s6 [73, 73] { R4425 += 1, R4381 += 1, R3891 += 1, R3892 += 1 };
  s1 -> s7 [73, 73] { R4425 += 1, R4381 += 1, R3890 += 1, R3891 += 1 };
  s1 -> s1 [74, 65535] { R4425 += 1, R4381 += 1, R3890 += 1, R3891 += 1 };
  s1 -> s2 [74, 65535] { R4425 += 1, R4381 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s2 [0, 72] { R4425 += 1, R4381 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s2 [0, 65535] { R4425 += 1 };
  s2 -> s9 [0, 65535];
  s2 -> s5 [73, 73] { R4425 += 1, R4381 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s6 [73, 73] { R4425 += 1, R4381 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s2 [74, 65535] { R4425 += 1, R4381 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s1 [0, 72] { R4425 += 1, R4381 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s2 [0, 72] { R4425 += 1, R4381 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s3 [0, 65535] { R4425 += 1, R4380 += 1, R4381 += 1 };
  s3 -> s4 [73, 73] { R4425 += 1, R4381 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s5 [73, 73] { R4425 += 1, R4381 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s6 [73, 73] { R4425 += 1, R4381 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s7 [73, 73] { R4425 += 1, R4381 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s1 [74, 65535] { R4425 += 1, R4381 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s2 [74, 65535] { R4425 += 1, R4381 += 1, R3891 += 1, R3892 += 1 };
  s4 -> s4 [0, 65535] { R4425 += 1, R4381 += 1, R3890 += 1, R3891 += 1 };
  s4 -> s6 [0, 65535] { R4425 += 1, R4381 += 1, R3891 += 1, R3892 += 1 };
  s5 -> s5 [0, 65535] { R4425 += 1 };
  s5 -> s9 [0, 65535];
  s6 -> s6 [0, 65535] { R4425 += 1, R4381 += 1, R3891 += 1, R3892 += 1 };
  s6 -> s8 [0, 65535] { R4425 += 1 };
  s6 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R4425 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s8, s5, s2, s9, s6;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 72] { R4427 += 1, R4383 += 1, R3897 += 1 };
  s0 -> s2 [0, 72] { R4427 += 1, R4383 += 1, R3896 += 1, R3897 += 1 };
  s0 -> s0 [0, 65535] { R4426 += 1, R4427 += 1 };
  s0 -> s3 [0, 65535] { R4427 += 1, R4382 += 1, R4383 += 1 };
  s0 -> s4 [73, 73] { R4427 += 1, R4383 += 1, R3897 += 1 };
  s0 -> s5 [73, 73] { R4427 += 1, R4383 += 1, R3897 += 1 };
  s0 -> s6 [73, 73] { R4427 += 1, R4383 += 1, R3896 += 1, R3897 += 1 };
  s0 -> s7 [73, 73] { R4427 += 1, R4383 += 1, R3896 += 1, R3897 += 1 };
  s0 -> s1 [74, 81] { R4427 += 1, R4383 += 1, R3897 += 1 };
  s0 -> s2 [74, 65535] { R4427 += 1, R4383 += 1, R3896 += 1, R3897 += 1 };
  s0 -> s8 [89, 89] { R4427 += 1, R4383 += 1, R3897 += 1 };
  s0 -> s1 [90, 65535] { R4427 += 1, R4383 += 1, R3897 += 1 };
  s1 -> s1 [0, 72] { R4427 += 1, R4383 += 1, R3897 += 1 };
  s1 -> s4 [73, 73] { R4427 += 1, R4383 += 1, R3897 += 1 };
  s1 -> s5 [73, 73] { R4427 += 1, R4383 += 1, R3897 += 1 };
  s1 -> s1 [74, 81] { R4427 += 1, R4383 += 1, R3897 += 1 };
  s1 -> s8 [89, 89] { R4427 += 1, R4383 += 1, R3897 += 1 };
  s1 -> s1 [90, 65535] { R4427 += 1, R4383 += 1, R3897 += 1 };
  s2 -> s1 [0, 72] { R4427 += 1, R4383 += 1, R3897 += 1 };
  s2 -> s2 [0, 72] { R4427 += 1, R4383 += 1, R3896 += 1, R3897 += 1 };
  s2 -> s4 [73, 73] { R4427 += 1, R4383 += 1, R3897 += 1 };
  s2 -> s5 [73, 73] { R4427 += 1, R4383 += 1, R3897 += 1 };
  s2 -> s6 [73, 73] { R4427 += 1, R4383 += 1, R3896 += 1, R3897 += 1 };
  s2 -> s7 [73, 73] { R4427 += 1, R4383 += 1, R3896 += 1, R3897 += 1 };
  s2 -> s1 [74, 81] { R4427 += 1, R4383 += 1, R3897 += 1 };
  s2 -> s2 [74, 65535] { R4427 += 1, R4383 += 1, R3896 += 1, R3897 += 1 };
  s2 -> s8 [89, 89] { R4427 += 1, R4383 += 1, R3897 += 1 };
  s2 -> s1 [90, 65535] { R4427 += 1, R4383 += 1, R3897 += 1 };
  s3 -> s1 [0, 72] { R4427 += 1, R4383 += 1, R3897 += 1 };
  s3 -> s2 [0, 72] { R4427 += 1, R4383 += 1, R3896 += 1, R3897 += 1 };
  s3 -> s3 [0, 65535] { R4427 += 1, R4382 += 1, R4383 += 1 };
  s3 -> s4 [73, 73] { R4427 += 1, R4383 += 1, R3897 += 1 };
  s3 -> s5 [73, 73] { R4427 += 1, R4383 += 1, R3897 += 1 };
  s3 -> s6 [73, 73] { R4427 += 1, R4383 += 1, R3896 += 1, R3897 += 1 };
  s3 -> s7 [73, 73] { R4427 += 1, R4383 += 1, R3896 += 1, R3897 += 1 };
  s3 -> s1 [74, 81] { R4427 += 1, R4383 += 1, R3897 += 1 };
  s3 -> s2 [74, 65535] { R4427 += 1, R4383 += 1, R3896 += 1, R3897 += 1 };
  s3 -> s8 [89, 89] { R4427 += 1, R4383 += 1, R3897 += 1 };
  s3 -> s1 [90, 65535] { R4427 += 1, R4383 += 1, R3897 += 1 };
  s4 -> s4 [0, 81] { R4427 += 1, R4383 += 1, R3897 += 1 };
  s4 -> s10 [89, 89] { R4427 += 1, R4383 += 1, R3897 += 1 };
  s4 -> s4 [90, 65535] { R4427 += 1, R4383 += 1, R3897 += 1 };
  s7 -> s4 [0, 81] { R4427 += 1, R4383 += 1, R3897 += 1 };
  s7 -> s7 [0, 65535] { R4427 += 1, R4383 += 1, R3896 += 1, R3897 += 1 };
  s7 -> s10 [89, 89] { R4427 += 1, R4383 += 1, R3897 += 1 };
  s7 -> s4 [90, 65535] { R4427 += 1, R4383 += 1, R3897 += 1 };
  s8 -> s8 [0, 72] { R4427 += 1, R4383 += 1, R3897 += 1 };
  s8 -> s8 [0, 65535] { R4427 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [73, 73] { R4427 += 1, R4383 += 1 };
  s8 -> s11 [73, 73] { R4427 += 1, R4383 += 1 };
  s8 -> s8 [74, 81] { R4427 += 1, R4383 += 1, R3897 += 1 };
  s8 -> s8 [74, 65535] { R4427 += 1, R4383 += 1 };
  s8 -> s8 [89, 65535] { R4427 += 1, R4383 += 1, R3897 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 81] { R4427 += 1, R4383 += 1, R3897 += 1 };
  s10 -> s12 [0, 65535] { R4427 += 1 };
  s10 -> s10 [0, 65535] { R4427 += 1, R4383 += 1 };
  s10 -> s9 [0, 65535];
  s10 -> s10 [89, 65535] { R4427 += 1, R4383 += 1, R3897 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R4427 += 1 };
  s12 -> s12 [0, 65535] { R4427 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 72] { R4429 += 1, R4385 += 1, R4323 += 1, R4324 += 1 };
  s0 -> s2 [0, 72] { R4429 += 1, R4385 += 1, R4322 += 1, R4323 += 1 };
  s0 -> s0 [0, 65535] { R4428 += 1, R4429 += 1 };
  s0 -> s3 [0, 65535] { R4429 += 1, R4384 += 1, R4385 += 1 };
  s0 -> s4 [73, 73] { R4429 += 1, R4385 += 1, R4322 += 1, R4323 += 1 };
  s0 -> s5 [73, 73] { R4429 += 1, R4385 += 1, R4323 += 1, R4324 += 1 };
  s0 -> s6 [73, 73] { R4429 += 1, R4385 += 1, R4322 += 1, R4323 += 1 };
  s0 -> s7 [73, 73] { R4429 += 1, R4385 += 1, R4323 += 1, R4324 += 1 };
  s0 -> s1 [74, 65535] { R4429 += 1, R4385 += 1, R4323 += 1, R4324 += 1 };
  s0 -> s2 [74, 65535] { R4429 += 1, R4385 += 1, R4322 += 1, R4323 += 1 };
  s1 -> s1 [0, 72] { R4429 += 1, R4385 += 1, R4323 += 1, R4324 += 1 };
  s1 -> s1 [0, 65535] { R4429 += 1 };
  s1 -> s9 [0, 65535];
  s1 -> s5 [73, 73] { R4429 += 1, R4385 += 1, R4323 += 1, R4324 += 1 };
  s1 -> s7 [73, 73] { R4429 += 1, R4385 += 1, R4323 += 1, R4324 += 1 };
  s1 -> s1 [74, 65535] { R4429 += 1, R4385 += 1, R4323 += 1, R4324 += 1 };
  s2 -> s1 [0, 72] { R4429 += 1, R4385 += 1, R4323 += 1, R4324 += 1 };
  s2 -> s2 [0, 72] { R4429 += 1, R4385 += 1, R4322 += 1, R4323 += 1 };
  s2 -> s4 [73, 73] { R4429 += 1, R4385 += 1, R4322 += 1, R4323 += 1 };
  s2 -> s5 [73, 73] { R4429 += 1, R4385 += 1, R4323 += 1, R4324 += 1 };
  s2 -> s6 [73, 73] { R4429 += 1, R4385 += 1, R4322 += 1, R4323 += 1 };
  s2 -> s7 [73, 73] { R4429 += 1, R4385 += 1, R4323 += 1, R4324 += 1 };
  s2 -> s1 [74, 65535] { R4429 += 1, R4385 += 1, R4323 += 1, R4324 += 1 };
  s2 -> s2 [74, 65535] { R4429 += 1, R4385 += 1, R4322 += 1, R4323 += 1 };
  s3 -> s1 [0, 72] { R4429 += 1, R4385 += 1, R4323 += 1, R4324 += 1 };
  s3 -> s2 [0, 72] { R4429 += 1, R4385 += 1, R4322 += 1, R4323 += 1 };
  s3 -> s3 [0, 65535] { R4429 += 1, R4384 += 1, R4385 += 1 };
  s3 -> s4 [73, 73] { R4429 += 1, R4385 += 1, R4322 += 1, R4323 += 1 };
  s3 -> s5 [73, 73] { R4429 += 1, R4385 += 1, R4323 += 1, R4324 += 1 };
  s3 -> s6 [73, 73] { R4429 += 1, R4385 += 1, R4322 += 1, R4323 += 1 };
  s3 -> s7 [73, 73] { R4429 += 1, R4385 += 1, R4323 += 1, R4324 += 1 };
  s3 -> s1 [74, 65535] { R4429 += 1, R4385 += 1, R4323 += 1, R4324 += 1 };
  s3 -> s2 [74, 65535] { R4429 += 1, R4385 += 1, R4322 += 1, R4323 += 1 };
  s5 -> s9 [0, 65535];
  s5 -> s5 [0, 65535] { R4429 += 1 };
  s6 -> s6 [0, 65535] { R4429 += 1, R4385 += 1, R4322 += 1, R4323 += 1 };
  s6 -> s7 [0, 65535] { R4429 += 1, R4385 += 1, R4323 += 1, R4324 += 1 };
  s7 -> s8 [0, 65535] { R4429 += 1 };
  s7 -> s9 [0, 65535];
  s7 -> s7 [0, 65535] { R4429 += 1, R4385 += 1, R4323 += 1, R4324 += 1 };
  s8 -> s8 [0, 65535] { R4429 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s8, s5, s9, s1, s7;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 72] { R4431 += 1, R4387 += 1, R4328 += 1, R4329 += 1 };
  s0 -> s2 [0, 65535] { R4431 += 1, R4386 += 1, R4387 += 1 };
  s0 -> s0 [0, 65535] { R4430 += 1, R4431 += 1 };
  s0 -> s3 [73, 73] { R4431 += 1, R4387 += 1, R4328 += 1, R4329 += 1 };
  s0 -> s4 [73, 73] { R4431 += 1, R4387 += 1, R4328 += 1, R4329 += 1 };
  s0 -> s1 [74, 65535] { R4431 += 1, R4387 += 1, R4328 += 1, R4329 += 1 };
  s1 -> s1 [0, 72] { R4431 += 1, R4387 += 1, R4328 += 1, R4329 += 1 };
  s1 -> s1 [0, 65535] { R4431 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R4431 += 1, R4387 += 1, R4328 += 1, R4329 += 1 };
  s1 -> s4 [73, 73] { R4431 += 1, R4387 += 1, R4328 += 1, R4329 += 1 };
  s1 -> s1 [74, 65535] { R4431 += 1, R4387 += 1, R4328 += 1, R4329 += 1 };
  s2 -> s1 [0, 72] { R4431 += 1, R4387 += 1, R4328 += 1, R4329 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R4431 += 1, R4386 += 1, R4387 += 1 };
  s2 -> s3 [73, 73] { R4431 += 1, R4387 += 1, R4328 += 1, R4329 += 1 };
  s2 -> s4 [73, 73] { R4431 += 1, R4387 += 1, R4328 += 1, R4329 += 1 };
  s2 -> s1 [74, 65535] { R4431 += 1, R4387 += 1, R4328 += 1, R4329 += 1 };
  s3 -> s3 [0, 65535] { R4431 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R4431 += 1 };
  s4 -> s4 [0, 65535] { R4431 += 1, R4387 += 1, R4328 += 1, R4329 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R4431 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [113, 113];
  accepting s1;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
constraint R2 = R4431 && R20 - R4431 = -1 && R21 = R4431 && R22 - R4431 = -1 && R23 = R4431 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R3899 + -1*R3897 - R53 = 0 && R52 + R3898 + R3896 = 0 && R4372 = 0 && R4373 = 0 && R4380 = 0 && R4381 = 0 && R4382 = 0 && R4383 = 0 && R4384 = 0 && R4385 = 0 && R4388 = 0 && R4389 = R4431 && R4390 = 0 && R4391 = R4431 && R4392 = 0 && R4393 = R4431 && R4394 = 0 && R4395 = R4431 && R4396 = 0 && R4397 = R4431 && R4398 = 0 && R4399 = R4431 && R4400 = 0 && R4401 = R4431 && R4402 = 0 && R4403 = R4431 && R4404 = 0 && R4405 = R4431 && R4406 = 0 && R4407 = R4431 && R4408 = 0 && R4409 = R4431 && R4410 = 0 && R4411 = R4431 && R4412 = 0 && R4413 = R4431 && R4414 = 0 && R4415 = R4431 && R4416 = 0 && R4417 = R4431 && R4418 = 0 && R4419 = R4431 && R4420 = 0 && R4421 = R4431 && R4422 = 0 && R4423 = R4431 && R4424 = 0 && R4425 = R4431 && R4426 = 0 && R4427 = R4431 && R4428 = 0 && R4429 = R4431 && R4430 = 0 && -1 < R1 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R3899 + -1*R3897 - R53 < 1 && 0 < R4431 && (R1 != 0 || R17 = 0 || (R4332 = 0 && R4333 = 0)) && (R1 != 0 || R17 = 0 || (R4334 = 0 && R4335 = 0)) && (R1 != 0 || R17 = 0 || (R4336 = 0 && R4337 = 0)) && (R1 != 0 || R17 = 0 || (R4338 = 0 && R4339 = 0)) && (R1 != 0 || R17 = 0 || (R4340 = 0 && R4341 = 0)) && (R1 != 0 || R17 = 0 || (R4342 = 0 && R4343 = 0)) && (R1 != 0 || R17 = 0 || (R4344 = 0 && R4345 = 0)) && (R1 != 0 || R17 = 0 || (R4346 = 0 && R4347 = 0)) && (R1 != 0 || R17 = 0 || (R4348 = 0 && R4349 = 0)) && (R1 != 0 || R17 = 0 || (R4350 = 0 && R4351 = 0)) && (R48 + R3895 + R3892 != 0 || ((R42 + R72 + R70 != 0 || R43 + R73 + R71 + -1*R3899 + -1*R3897 - R53 = 0 || R53 + R3899 + R3897 < 1) && (R42 + R72 + R70 = 0 || R53 + R3899 + R3897 < 1))) && (R48 + R3895 + R3892 != 0 || ((R46 + R3893 + R3890 != 0 || R47 + R3894 + R3891 + -1*R3899 + -1*R3897 - R53 = 0 || R53 + R3899 + R3897 < 1) && (R46 + R3893 + R3890 = 0 || R53 + R3899 + R3897 < 1))) && (R4332 != 0 || R1 = R4333 || R1 < 1) && (R4334 != 0 || R1 = R4335 || R1 < 1) && (R4336 != 0 || R1 = R4337 || R1 < 1) && (R4338 != 0 || R1 = R4339 || R1 < 1) && (R4340 != 0 || R1 = R4341 || R1 < 1) && (R4342 != 0 || R1 = R4343 || R1 < 1) && (R4344 != 0 || R1 = R4345 || R1 < 1) && (R4346 != 0 || R1 = R4347 || R1 < 1) && (R4348 != 0 || R1 = R4349 || R1 < 1) && (R4350 != 0 || R1 = R4351 || R1 < 1) && (R18 = 0 || (R4370 = 0 && R4371 = 0)) && (R18 = 0 || (R4374 = 0 && R4375 = 0)) && (R18 = 0 || (R4376 = 0 && R4377 = 0)) && (R18 = 0 || (R4378 = 0 && R4379 = 0)) && (R18 = 0 || (R4386 = 0 && R4387 = 0)) && (R19 = 0 || (R4352 = 0 && R4353 = 0)) && (R19 = 0 || (R4354 = 0 && R4355 = 0)) && (R19 = 0 || (R4356 = 0 && R4357 = 0)) && (R19 = 0 || (R4358 = 0 && R4359 = 0)) && (R19 = 0 || (R4360 = 0 && R4361 = 0)) && (R19 = 0 || (R4362 = 0 && R4363 = 0)) && (R19 = 0 || (R4364 = 0 && R4365 = 0)) && (R19 = 0 || (R4366 = 0 && R4367 = 0)) && (R19 = 0 || (R4368 = 0 && R4369 = 0)) && (R48 + R3895 + R3892 = 0 || (R42 + R72 + R70 = 0 && R43 + R73 + R71 + -1*R3899 + -1*R3897 - R53 = 0)) && (R48 + R3895 + R3892 = 0 || (R46 + R3893 + R3890 = 0 && R47 + R3894 + R3891 + -1*R3899 + -1*R3897 - R53 = 0)) && (R58 + R4327 + R4324 = 0 || (R56 + R4325 + R4322 = 0 && R57 + R4326 + R4323 = 0)) && (R58 + R4327 + R4324 = 0 || (R62 + R4330 + R4328 = 0 && R63 + R4331 + R4329 = 0)) && (R4332 = 0 || R1 < 1) && (R4334 = 0 || R1 < 1) && (R4336 = 0 || R1 < 1) && (R4338 = 0 || R1 < 1) && (R4340 = 0 || R1 < 1) && (R4342 = 0 || R1 < 1) && (R4344 = 0 || R1 < 1) && (R4346 = 0 || R1 < 1) && (R4348 = 0 || R1 < 1) && (R4350 = 0 || R1 < 1);
// End of Parikh automata intersection problem
