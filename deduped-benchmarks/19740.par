// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R12, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R3890, R3891, R3892, R3893, R3894, R3895, R3896, R3897, R3898, R3899, R4, R40, R42, R43, R4322, R4323, R4324, R4325, R4326, R4327, R46, R4640, R4641, R4642, R4643, R4644, R4645, R4646, R4647, R4648, R4649, R4650, R4651, R4652, R4653, R4654, R4655, R4656, R4657, R4658, R4659, R4660, R4661, R4662, R4663, R4664, R4665, R4666, R4667, R4668, R4669, R4670, R4671, R4672, R4673, R4674, R4675, R4676, R4677, R4678, R4679, R4680, R4681, R4682, R4683, R4684, R4685, R4686, R4687, R4688, R4689, R4690, R4691, R4692, R4693, R4694, R4695, R4696, R4697, R4698, R4699, R47, R4700, R4701, R4702, R4703, R4704, R4705, R4706, R4707, R4708, R4709, R4710, R4711, R4712, R4713, R4714, R4715, R4716, R4717, R4718, R4719, R4720, R4721, R4722, R4723, R4724, R4725, R4726, R4727, R4728, R4729, R4730, R4731, R4732, R4733, R4734, R4735, R4736, R4737, R4738, R4739, R4740, R4741, R4742, R4743, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R70, R71, R72, R73, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 72];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [73, 73];
  s0 -> s1 [74, 65535];
  s1 -> s1 [0, 72];
  s1 -> s2 [73, 73];
  s1 -> s1 [74, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R21 += 1 };
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R25 += 1 };
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R4665 += 1, R19 += 1 };
  s0 -> s0 [0, 65535] { R4664 += 1, R4665 += 1 };
  s1 -> s1 [0, 65535] { R4665 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 72] { R4667 += 1 };
  s0 -> s0 [0, 65535] { R4666 += 1, R4667 += 1 };
  s0 -> s2 [73, 73] { R4667 += 1 };
  s0 -> s3 [73, 73] { R4667 += 1 };
  s0 -> s1 [82, 65535] { R4667 += 1 };
  s1 -> s1 [0, 72] { R4667 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R4667 += 1 };
  s1 -> s3 [73, 73] { R4667 += 1 };
  s1 -> s1 [82, 65535] { R4667 += 1 };
  s2 -> s2 [0, 73] { R4667 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [82, 65535] { R4667 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 72] { R4669 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R4668 += 1, R4669 += 1 };
  s0 -> s2 [73, 73] { R4669 += 1, R38 += 1 };
  s0 -> s3 [73, 73] { R4669 += 1, R38 += 1 };
  s0 -> s1 [74, 65535] { R4669 += 1, R38 += 1 };
  s1 -> s1 [0, 72] { R4669 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R4669 += 1, R38 += 1 };
  s1 -> s3 [73, 73] { R4669 += 1, R38 += 1 };
  s1 -> s1 [74, 65535] { R4669 += 1, R38 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R4669 += 1, R38 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 72] { R4671 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R4670 += 1, R4671 += 1 };
  s0 -> s2 [73, 73] { R4671 += 1, R40 += 1 };
  s0 -> s3 [73, 73] { R4671 += 1, R40 += 1 };
  s0 -> s1 [74, 65535] { R4671 += 1, R40 += 1 };
  s1 -> s1 [0, 72] { R4671 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R4671 += 1, R40 += 1 };
  s1 -> s3 [73, 73] { R4671 += 1, R40 += 1 };
  s1 -> s1 [74, 65535] { R4671 += 1, R40 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R4671 += 1, R40 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 72] { R4673 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R4672 += 1, R4673 += 1 };
  s0 -> s2 [73, 73] { R4673 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [73, 73] { R4673 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [74, 65535] { R4673 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 72] { R4673 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R4673 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [73, 73] { R4673 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [74, 65535] { R4673 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535] { R4673 += 1, R42 += 1, R43 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 72] { R4675 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R4674 += 1, R4675 += 1 };
  s0 -> s2 [73, 73] { R4675 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [73, 73] { R4675 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [74, 65535] { R4675 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 72] { R4675 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R4675 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [73, 73] { R4675 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [74, 65535] { R4675 += 1, R46 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R4675 += 1, R46 += 1, R47 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 72] { R4677 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R4676 += 1, R4677 += 1 };
  s0 -> s2 [73, 73] { R4677 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [73, 73] { R4677 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [74, 65535] { R4677 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 72] { R4677 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R4677 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [73, 73] { R4677 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [74, 65535] { R4677 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R4677 += 1, R52 += 1, R53 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 72] { R4679 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R4678 += 1, R4679 += 1 };
  s0 -> s2 [73, 73] { R4679 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [73, 73] { R4679 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [74, 65535] { R4679 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 72] { R4679 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R4679 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [73, 73] { R4679 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [74, 65535] { R4679 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535] { R4679 += 1, R56 += 1, R57 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 72] { R4681 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R4680 += 1, R4681 += 1 };
  s0 -> s2 [73, 73] { R4681 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [73, 73] { R4681 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [74, 65535] { R4681 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 72] { R4681 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R4681 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [73, 73] { R4681 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [74, 65535] { R4681 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R4681 += 1, R62 += 1, R63 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 72] { R4701 += 1 };
  s0 -> s0 [0, 65535] { R4700 += 1, R4701 += 1 };
  s0 -> s2 [73, 73] { R4701 += 1 };
  s0 -> s1 [74, 65535] { R4701 += 1 };
  s1 -> s1 [0, 72] { R4701 += 1 };
  s1 -> s2 [73, 73] { R4701 += 1 };
  s1 -> s1 [74, 65535] { R4701 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R4701 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R4702 += 1, R4703 += 1 };
  s0 -> s1 [0, 65535] { R4703 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R4703 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 72] { R4705 += 1 };
  s0 -> s2 [0, 65535] { R4705 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R4704 += 1, R4705 += 1 };
  s0 -> s3 [73, 73] { R4705 += 1 };
  s0 -> s1 [74, 65535] { R4705 += 1 };
  s1 -> s1 [0, 72] { R4705 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [73, 73] { R4705 += 1 };
  s1 -> s1 [74, 65535] { R4705 += 1 };
  s2 -> s1 [0, 72] { R4705 += 1 };
  s2 -> s2 [0, 65535] { R4705 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [73, 73] { R4705 += 1 };
  s2 -> s1 [74, 65535] { R4705 += 1 };
  s3 -> s3 [0, 65535] { R4705 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 72] { R4707 += 1, R4645 += 1 };
  s0 -> s2 [0, 65535] { R4707 += 1, R4644 += 1, R4645 += 1 };
  s0 -> s0 [0, 65535] { R4706 += 1, R4707 += 1 };
  s0 -> s1 [74, 65535] { R4707 += 1, R4645 += 1 };
  s1 -> s1 [0, 72] { R4707 += 1, R4645 += 1 };
  s1 -> s1 [0, 65535] { R4707 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [74, 65535] { R4707 += 1, R4645 += 1 };
  s2 -> s1 [0, 72] { R4707 += 1, R4645 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R4707 += 1, R4644 += 1, R4645 += 1 };
  s2 -> s1 [74, 65535] { R4707 += 1, R4645 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s0 [0, 65535] { R4708 += 1, R4709 += 1 };
  s0 -> s1 [0, 65535] { R4709 += 1, R4646 += 1, R4647 += 1 };
  s0 -> s2 [0, 65535] { R4709 += 1, R4647 += 1, R17 += 1 };
  s1 -> s1 [0, 65535] { R4709 += 1, R4646 += 1, R4647 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R4709 += 1, R4647 += 1, R17 += 1 };
  s2 -> s3 [0, 65535] { R4709 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R4709 += 1, R4647 += 1, R17 += 1 };
  s3 -> s3 [0, 65535] { R4709 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 73] { R4711 += 1, R4649 += 1 };
  s0 -> s0 [0, 65535] { R4710 += 1, R4711 += 1 };
  s0 -> s2 [0, 65535] { R4711 += 1, R4648 += 1, R4649 += 1 };
  s0 -> s1 [81, 65535] { R4711 += 1, R4649 += 1 };
  s1 -> s1 [0, 73] { R4711 += 1, R4649 += 1 };
  s1 -> s1 [0, 65535] { R4711 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [81, 65535] { R4711 += 1, R4649 += 1 };
  s2 -> s1 [0, 73] { R4711 += 1, R4649 += 1 };
  s2 -> s2 [0, 65535] { R4711 += 1, R4648 += 1, R4649 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [81, 65535] { R4711 += 1, R4649 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R4713 += 1, R4651 += 1, R67 += 1 };
  s0 -> s0 [0, 65535] { R4712 += 1, R4713 += 1 };
  s0 -> s2 [0, 65535] { R4713 += 1, R4650 += 1, R4651 += 1 };
  s1 -> s1 [0, 65535] { R4713 += 1, R4651 += 1, R67 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R4713 += 1 };
  s2 -> s1 [0, 65535] { R4713 += 1, R4651 += 1, R67 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R4713 += 1, R4650 += 1, R4651 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4713 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 80] { R4715 += 1, R4653 += 1 };
  s0 -> s2 [0, 65535] { R4715 += 1, R4652 += 1, R4653 += 1 };
  s0 -> s3 [0, 65535] { R4715 += 1, R4653 += 1, R69 += 1 };
  s0 -> s0 [0, 65535] { R4714 += 1, R4715 += 1 };
  s0 -> s1 [82, 65535] { R4715 += 1, R4653 += 1 };
  s1 -> s1 [0, 80] { R4715 += 1, R4653 += 1 };
  s1 -> s1 [0, 65535] { R4715 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [82, 65535] { R4715 += 1, R4653 += 1 };
  s2 -> s1 [0, 80] { R4715 += 1, R4653 += 1 };
  s2 -> s2 [0, 65535] { R4715 += 1, R4652 += 1, R4653 += 1 };
  s2 -> s3 [0, 65535] { R4715 += 1, R4653 += 1, R69 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [82, 65535] { R4715 += 1, R4653 += 1 };
  s3 -> s1 [0, 80] { R4715 += 1, R4653 += 1 };
  s3 -> s3 [0, 65535] { R4715 += 1, R4653 += 1, R69 += 1 };
  s3 -> s4 [0, 65535] { R4715 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [82, 65535] { R4715 += 1, R4653 += 1 };
  s4 -> s4 [0, 65535] { R4715 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 80] { R4717 += 1, R4655 += 1, R73 += 1 };
  s0 -> s2 [0, 65535] { R4717 += 1, R4655 += 1, R72 += 1, R73 += 1 };
  s0 -> s3 [0, 65535] { R4717 += 1, R4654 += 1, R4655 += 1 };
  s0 -> s0 [0, 65535] { R4716 += 1, R4717 += 1 };
  s0 -> s1 [82, 65535] { R4717 += 1, R4655 += 1, R73 += 1 };
  s1 -> s1 [0, 80] { R4717 += 1, R4655 += 1, R73 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R4717 += 1, R4655 += 1 };
  s1 -> s5 [0, 65535] { R4717 += 1 };
  s1 -> s1 [82, 65535] { R4717 += 1, R4655 += 1, R73 += 1 };
  s2 -> s1 [0, 80] { R4717 += 1, R4655 += 1, R73 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R4717 += 1, R4655 += 1, R72 += 1, R73 += 1 };
  s2 -> s5 [0, 65535] { R4717 += 1 };
  s2 -> s1 [82, 65535] { R4717 += 1, R4655 += 1, R73 += 1 };
  s3 -> s1 [0, 80] { R4717 += 1, R4655 += 1, R73 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R4717 += 1, R4655 += 1, R72 += 1, R73 += 1 };
  s3 -> s3 [0, 65535] { R4717 += 1, R4654 += 1, R4655 += 1 };
  s3 -> s1 [82, 65535] { R4717 += 1, R4655 += 1, R73 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R4717 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R4719 += 1, R4657 += 1, R3894 += 1, R3895 += 1 };
  s0 -> s2 [0, 65535] { R4719 += 1, R4656 += 1, R4657 += 1 };
  s0 -> s0 [0, 65535] { R4718 += 1, R4719 += 1 };
  s0 -> s3 [0, 65535] { R4719 += 1, R4657 += 1 };
  s1 -> s1 [0, 65535] { R4719 += 1, R4657 += 1, R3894 += 1, R3895 += 1 };
  s1 -> s4 [0, 65535] { R4719 += 1 };
  s1 -> s3 [0, 65535] { R4719 += 1, R4657 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R4719 += 1, R4657 += 1, R3894 += 1, R3895 += 1 };
  s2 -> s2 [0, 65535] { R4719 += 1, R4656 += 1, R4657 += 1 };
  s2 -> s3 [0, 65535] { R4719 += 1, R4657 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s4 [0, 65535] { R4719 += 1 };
  s3 -> s3 [0, 65535] { R4719 += 1, R4657 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R4719 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 81] { R4721 += 1, R4659 += 1, R3899 += 1 };
  s0 -> s1 [0, 65535] { R4721 += 1, R4659 += 1 };
  s0 -> s0 [0, 65535] { R4720 += 1, R4721 += 1 };
  s0 -> s2 [0, 65535] { R4721 += 1, R4658 += 1, R4659 += 1 };
  s0 -> s1 [89, 65535] { R4721 += 1, R4659 += 1, R3899 += 1 };
  s1 -> s1 [0, 81] { R4721 += 1, R4659 += 1, R3899 += 1 };
  s1 -> s4 [0, 65535] { R4721 += 1 };
  s1 -> s1 [0, 65535] { R4721 += 1, R4659 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [89, 65535] { R4721 += 1, R4659 += 1, R3899 += 1 };
  s2 -> s1 [0, 81] { R4721 += 1, R4659 += 1, R3899 += 1 };
  s2 -> s1 [0, 65535] { R4721 += 1, R4659 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R4721 += 1, R4658 += 1, R4659 += 1 };
  s2 -> s1 [89, 65535] { R4721 += 1, R4659 += 1, R3899 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4721 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s0 [0, 65535] { R4722 += 1, R4723 += 1 };
  s0 -> s1 [0, 65535] { R4723 += 1, R4661 += 1, R4326 += 1, R4327 += 1 };
  s0 -> s2 [0, 65535] { R4723 += 1, R4660 += 1, R4661 += 1 };
  s0 -> s3 [0, 65535] { R4723 += 1, R4661 += 1 };
  s1 -> s1 [0, 65535] { R4723 += 1, R4661 += 1, R4326 += 1, R4327 += 1 };
  s1 -> s4 [0, 65535] { R4723 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R4723 += 1, R4661 += 1 };
  s2 -> s1 [0, 65535] { R4723 += 1, R4661 += 1, R4326 += 1, R4327 += 1 };
  s2 -> s2 [0, 65535] { R4723 += 1, R4660 += 1, R4661 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R4723 += 1, R4661 += 1 };
  s3 -> s4 [0, 65535] { R4723 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R4723 += 1, R4661 += 1 };
  s4 -> s4 [0, 65535] { R4723 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 65535] { R4725 += 1, R4662 += 1, R4663 += 1 };
  s0 -> s2 [0, 65535] { R4725 += 1, R4663 += 1 };
  s0 -> s0 [0, 65535] { R4724 += 1, R4725 += 1 };
  s1 -> s1 [0, 65535] { R4725 += 1, R4662 += 1, R4663 += 1 };
  s1 -> s2 [0, 65535] { R4725 += 1, R4663 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R4725 += 1, R4663 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R4725 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4725 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R4727 += 1, R4683 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R4726 += 1, R4727 += 1 };
  s0 -> s2 [0, 65535] { R4727 += 1, R4682 += 1, R4683 += 1 };
  s1 -> s1 [0, 65535] { R4727 += 1, R4683 += 1, R18 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R4727 += 1 };
  s2 -> s1 [0, 65535] { R4727 += 1, R4683 += 1, R18 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R4727 += 1, R4682 += 1, R4683 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4727 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 72] { R4729 += 1, R4685 += 1 };
  s0 -> s0 [0, 65535] { R4728 += 1, R4729 += 1 };
  s0 -> s2 [0, 65535] { R4729 += 1, R4684 += 1, R4685 += 1 };
  s0 -> s3 [73, 73] { R4729 += 1, R4685 += 1 };
  s0 -> s4 [73, 73] { R4729 += 1, R4685 += 1 };
  s0 -> s5 [81, 81] { R4729 += 1, R4685 += 1 };
  s0 -> s1 [82, 65535] { R4729 += 1, R4685 += 1 };
  s1 -> s1 [0, 72] { R4729 += 1, R4685 += 1 };
  s1 -> s3 [73, 73] { R4729 += 1, R4685 += 1 };
  s1 -> s4 [73, 73] { R4729 += 1, R4685 += 1 };
  s1 -> s5 [81, 81] { R4729 += 1, R4685 += 1 };
  s1 -> s1 [82, 65535] { R4729 += 1, R4685 += 1 };
  s2 -> s1 [0, 72] { R4729 += 1, R4685 += 1 };
  s2 -> s2 [0, 65535] { R4729 += 1, R4684 += 1, R4685 += 1 };
  s2 -> s3 [73, 73] { R4729 += 1, R4685 += 1 };
  s2 -> s4 [73, 73] { R4729 += 1, R4685 += 1 };
  s2 -> s5 [81, 81] { R4729 += 1, R4685 += 1 };
  s2 -> s1 [82, 65535] { R4729 += 1, R4685 += 1 };
  s4 -> s4 [0, 73] { R4729 += 1, R4685 += 1 };
  s4 -> s8 [81, 81] { R4729 += 1, R4685 += 1 };
  s4 -> s4 [82, 65535] { R4729 += 1, R4685 += 1 };
  s5 -> s5 [0, 72] { R4729 += 1, R4685 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R4729 += 1 };
  s5 -> s7 [73, 73] { R4729 += 1, R4685 += 1 };
  s5 -> s8 [73, 73] { R4729 += 1, R4685 += 1 };
  s5 -> s5 [81, 65535] { R4729 += 1, R4685 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R4729 += 1 };
  s8 -> s8 [0, 73] { R4729 += 1, R4685 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R4729 += 1 };
  s8 -> s8 [81, 65535] { R4729 += 1, R4685 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 72] { R4731 += 1, R4687 += 1, R66 += 1 };
  s0 -> s2 [0, 65535] { R4731 += 1, R4686 += 1, R4687 += 1 };
  s0 -> s0 [0, 65535] { R4730 += 1, R4731 += 1 };
  s0 -> s3 [73, 73] { R4731 += 1, R4687 += 1, R66 += 1 };
  s0 -> s4 [73, 73] { R4731 += 1, R4687 += 1, R66 += 1 };
  s0 -> s1 [74, 65535] { R4731 += 1, R4687 += 1, R66 += 1 };
  s1 -> s1 [0, 72] { R4731 += 1, R4687 += 1, R66 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R4731 += 1 };
  s1 -> s3 [73, 73] { R4731 += 1, R4687 += 1, R66 += 1 };
  s1 -> s4 [73, 73] { R4731 += 1, R4687 += 1, R66 += 1 };
  s1 -> s1 [74, 65535] { R4731 += 1, R4687 += 1, R66 += 1 };
  s2 -> s1 [0, 72] { R4731 += 1, R4687 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R4731 += 1, R4686 += 1, R4687 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R4731 += 1, R4687 += 1, R66 += 1 };
  s2 -> s4 [73, 73] { R4731 += 1, R4687 += 1, R66 += 1 };
  s2 -> s1 [74, 65535] { R4731 += 1, R4687 += 1, R66 += 1 };
  s3 -> s3 [0, 65535] { R4731 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R4731 += 1 };
  s4 -> s4 [0, 65535] { R4731 += 1, R4687 += 1, R66 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R4731 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 72] { R4733 += 1, R4689 += 1, R68 += 1 };
  s0 -> s0 [0, 65535] { R4732 += 1, R4733 += 1 };
  s0 -> s2 [0, 65535] { R4733 += 1, R4688 += 1, R4689 += 1 };
  s0 -> s3 [73, 73] { R4733 += 1, R4689 += 1, R68 += 1 };
  s0 -> s4 [73, 73] { R4733 += 1, R4689 += 1, R68 += 1 };
  s0 -> s1 [74, 65535] { R4733 += 1, R4689 += 1, R68 += 1 };
  s1 -> s1 [0, 72] { R4733 += 1, R4689 += 1, R68 += 1 };
  s1 -> s1 [0, 65535] { R4733 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R4733 += 1, R4689 += 1, R68 += 1 };
  s1 -> s4 [73, 73] { R4733 += 1, R4689 += 1, R68 += 1 };
  s1 -> s1 [74, 65535] { R4733 += 1, R4689 += 1, R68 += 1 };
  s2 -> s1 [0, 72] { R4733 += 1, R4689 += 1, R68 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R4733 += 1, R4688 += 1, R4689 += 1 };
  s2 -> s3 [73, 73] { R4733 += 1, R4689 += 1, R68 += 1 };
  s2 -> s4 [73, 73] { R4733 += 1, R4689 += 1, R68 += 1 };
  s2 -> s1 [74, 65535] { R4733 += 1, R4689 += 1, R68 += 1 };
  s3 -> s3 [0, 65535] { R4733 += 1, R4689 += 1, R68 += 1 };
  s3 -> s6 [0, 65535] { R4733 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R4733 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R4733 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 72] { R4735 += 1, R4691 += 1, R70 += 1, R71 += 1 };
  s0 -> s2 [0, 65535] { R4735 += 1, R4690 += 1, R4691 += 1 };
  s0 -> s0 [0, 65535] { R4734 += 1, R4735 += 1 };
  s0 -> s3 [73, 73] { R4735 += 1, R4691 += 1, R70 += 1, R71 += 1 };
  s0 -> s4 [73, 73] { R4735 += 1, R4691 += 1, R70 += 1, R71 += 1 };
  s0 -> s1 [74, 65535] { R4735 += 1, R4691 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 72] { R4735 += 1, R4691 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 65535] { R4735 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R4735 += 1, R4691 += 1, R70 += 1, R71 += 1 };
  s1 -> s4 [73, 73] { R4735 += 1, R4691 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [74, 65535] { R4735 += 1, R4691 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [0, 72] { R4735 += 1, R4691 += 1, R70 += 1, R71 += 1 };
  s2 -> s2 [0, 65535] { R4735 += 1, R4690 += 1, R4691 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R4735 += 1, R4691 += 1, R70 += 1, R71 += 1 };
  s2 -> s4 [73, 73] { R4735 += 1, R4691 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [74, 65535] { R4735 += 1, R4691 += 1, R70 += 1, R71 += 1 };
  s3 -> s3 [0, 65535] { R4735 += 1, R4691 += 1, R70 += 1, R71 += 1 };
  s3 -> s6 [0, 65535] { R4735 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R4735 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R4735 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 72] { R4737 += 1, R4693 += 1, R3891 += 1, R3892 += 1 };
  s0 -> s2 [0, 72] { R4737 += 1, R4693 += 1, R3890 += 1, R3891 += 1 };
  s0 -> s3 [0, 65535] { R4737 += 1, R4692 += 1, R4693 += 1 };
  s0 -> s0 [0, 65535] { R4736 += 1, R4737 += 1 };
  s0 -> s4 [73, 73] { R4737 += 1, R4693 += 1, R3891 += 1, R3892 += 1 };
  s0 -> s5 [73, 73] { R4737 += 1, R4693 += 1, R3890 += 1, R3891 += 1 };
  s0 -> s6 [73, 73] { R4737 += 1, R4693 += 1, R3891 += 1, R3892 += 1 };
  s0 -> s7 [73, 73] { R4737 += 1, R4693 += 1, R3890 += 1, R3891 += 1 };
  s0 -> s1 [74, 65535] { R4737 += 1, R4693 += 1, R3891 += 1, R3892 += 1 };
  s0 -> s2 [74, 65535] { R4737 += 1, R4693 += 1, R3890 += 1, R3891 += 1 };
  s1 -> s1 [0, 72] { R4737 += 1, R4693 += 1, R3891 += 1, R3892 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s1 [0, 65535] { R4737 += 1 };
  s1 -> s4 [73, 73] { R4737 += 1, R4693 += 1, R3891 += 1, R3892 += 1 };
  s1 -> s6 [73, 73] { R4737 += 1, R4693 += 1, R3891 += 1, R3892 += 1 };
  s1 -> s1 [74, 65535] { R4737 += 1, R4693 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s1 [0, 72] { R4737 += 1, R4693 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s2 [0, 72] { R4737 += 1, R4693 += 1, R3890 += 1, R3891 += 1 };
  s2 -> s4 [73, 73] { R4737 += 1, R4693 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s5 [73, 73] { R4737 += 1, R4693 += 1, R3890 += 1, R3891 += 1 };
  s2 -> s6 [73, 73] { R4737 += 1, R4693 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s7 [73, 73] { R4737 += 1, R4693 += 1, R3890 += 1, R3891 += 1 };
  s2 -> s1 [74, 65535] { R4737 += 1, R4693 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s2 [74, 65535] { R4737 += 1, R4693 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s1 [0, 72] { R4737 += 1, R4693 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s2 [0, 72] { R4737 += 1, R4693 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s3 [0, 65535] { R4737 += 1, R4692 += 1, R4693 += 1 };
  s3 -> s4 [73, 73] { R4737 += 1, R4693 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s5 [73, 73] { R4737 += 1, R4693 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s6 [73, 73] { R4737 += 1, R4693 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s7 [73, 73] { R4737 += 1, R4693 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s1 [74, 65535] { R4737 += 1, R4693 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s2 [74, 65535] { R4737 += 1, R4693 += 1, R3890 += 1, R3891 += 1 };
  s4 -> s4 [0, 65535] { R4737 += 1, R4693 += 1, R3891 += 1, R3892 += 1 };
  s4 -> s9 [0, 65535] { R4737 += 1 };
  s4 -> s8 [0, 65535];
  s5 -> s4 [0, 65535] { R4737 += 1, R4693 += 1, R3891 += 1, R3892 += 1 };
  s5 -> s5 [0, 65535] { R4737 += 1, R4693 += 1, R3890 += 1, R3891 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R4737 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R4737 += 1 };
  s9 -> s8 [0, 65535];
  accepting s4, s8, s9, s6, s1;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 72] { R4739 += 1, R4695 += 1, R3896 += 1, R3897 += 1 };
  s0 -> s2 [0, 72] { R4739 += 1, R4695 += 1, R3897 += 1 };
  s0 -> s3 [0, 65535] { R4739 += 1, R4694 += 1, R4695 += 1 };
  s0 -> s0 [0, 65535] { R4738 += 1, R4739 += 1 };
  s0 -> s4 [73, 73] { R4739 += 1, R4695 += 1, R3897 += 1 };
  s0 -> s5 [73, 73] { R4739 += 1, R4695 += 1, R3896 += 1, R3897 += 1 };
  s0 -> s6 [73, 73] { R4739 += 1, R4695 += 1, R3897 += 1 };
  s0 -> s7 [73, 73] { R4739 += 1, R4695 += 1, R3896 += 1, R3897 += 1 };
  s0 -> s2 [74, 81] { R4739 += 1, R4695 += 1, R3897 += 1 };
  s0 -> s1 [74, 65535] { R4739 += 1, R4695 += 1, R3896 += 1, R3897 += 1 };
  s0 -> s8 [89, 89] { R4739 += 1, R4695 += 1, R3897 += 1 };
  s0 -> s2 [90, 65535] { R4739 += 1, R4695 += 1, R3897 += 1 };
  s1 -> s1 [0, 72] { R4739 += 1, R4695 += 1, R3896 += 1, R3897 += 1 };
  s1 -> s2 [0, 72] { R4739 += 1, R4695 += 1, R3897 += 1 };
  s1 -> s4 [73, 73] { R4739 += 1, R4695 += 1, R3897 += 1 };
  s1 -> s5 [73, 73] { R4739 += 1, R4695 += 1, R3896 += 1, R3897 += 1 };
  s1 -> s6 [73, 73] { R4739 += 1, R4695 += 1, R3897 += 1 };
  s1 -> s7 [73, 73] { R4739 += 1, R4695 += 1, R3896 += 1, R3897 += 1 };
  s1 -> s2 [74, 81] { R4739 += 1, R4695 += 1, R3897 += 1 };
  s1 -> s1 [74, 65535] { R4739 += 1, R4695 += 1, R3896 += 1, R3897 += 1 };
  s1 -> s8 [89, 89] { R4739 += 1, R4695 += 1, R3897 += 1 };
  s1 -> s2 [90, 65535] { R4739 += 1, R4695 += 1, R3897 += 1 };
  s2 -> s2 [0, 72] { R4739 += 1, R4695 += 1, R3897 += 1 };
  s2 -> s4 [73, 73] { R4739 += 1, R4695 += 1, R3897 += 1 };
  s2 -> s6 [73, 73] { R4739 += 1, R4695 += 1, R3897 += 1 };
  s2 -> s2 [74, 81] { R4739 += 1, R4695 += 1, R3897 += 1 };
  s2 -> s8 [89, 89] { R4739 += 1, R4695 += 1, R3897 += 1 };
  s2 -> s2 [90, 65535] { R4739 += 1, R4695 += 1, R3897 += 1 };
  s3 -> s1 [0, 72] { R4739 += 1, R4695 += 1, R3896 += 1, R3897 += 1 };
  s3 -> s2 [0, 72] { R4739 += 1, R4695 += 1, R3897 += 1 };
  s3 -> s3 [0, 65535] { R4739 += 1, R4694 += 1, R4695 += 1 };
  s3 -> s4 [73, 73] { R4739 += 1, R4695 += 1, R3897 += 1 };
  s3 -> s5 [73, 73] { R4739 += 1, R4695 += 1, R3896 += 1, R3897 += 1 };
  s3 -> s6 [73, 73] { R4739 += 1, R4695 += 1, R3897 += 1 };
  s3 -> s7 [73, 73] { R4739 += 1, R4695 += 1, R3896 += 1, R3897 += 1 };
  s3 -> s2 [74, 81] { R4739 += 1, R4695 += 1, R3897 += 1 };
  s3 -> s1 [74, 65535] { R4739 += 1, R4695 += 1, R3896 += 1, R3897 += 1 };
  s3 -> s8 [89, 89] { R4739 += 1, R4695 += 1, R3897 += 1 };
  s3 -> s2 [90, 65535] { R4739 += 1, R4695 += 1, R3897 += 1 };
  s6 -> s6 [0, 81] { R4739 += 1, R4695 += 1, R3897 += 1 };
  s6 -> s11 [89, 89] { R4739 += 1, R4695 += 1, R3897 += 1 };
  s6 -> s6 [90, 65535] { R4739 += 1, R4695 += 1, R3897 += 1 };
  s7 -> s6 [0, 81] { R4739 += 1, R4695 += 1, R3897 += 1 };
  s7 -> s7 [0, 65535] { R4739 += 1, R4695 += 1, R3896 += 1, R3897 += 1 };
  s7 -> s11 [89, 89] { R4739 += 1, R4695 += 1, R3897 += 1 };
  s7 -> s6 [90, 65535] { R4739 += 1, R4695 += 1, R3897 += 1 };
  s8 -> s8 [0, 72] { R4739 += 1, R4695 += 1, R3897 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R4739 += 1 };
  s8 -> s10 [73, 73] { R4739 += 1, R4695 += 1 };
  s8 -> s11 [73, 73] { R4739 += 1, R4695 += 1 };
  s8 -> s8 [74, 81] { R4739 += 1, R4695 += 1, R3897 += 1 };
  s8 -> s8 [74, 65535] { R4739 += 1, R4695 += 1 };
  s8 -> s8 [89, 65535] { R4739 += 1, R4695 += 1, R3897 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R4739 += 1 };
  s11 -> s11 [0, 81] { R4739 += 1, R4695 += 1, R3897 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s12 [0, 65535] { R4739 += 1 };
  s11 -> s11 [0, 65535] { R4739 += 1, R4695 += 1 };
  s11 -> s11 [89, 65535] { R4739 += 1, R4695 += 1, R3897 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R4739 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 72] { R4741 += 1, R4697 += 1, R4323 += 1, R4324 += 1 };
  s0 -> s2 [0, 72] { R4741 += 1, R4697 += 1, R4322 += 1, R4323 += 1 };
  s0 -> s0 [0, 65535] { R4740 += 1, R4741 += 1 };
  s0 -> s3 [0, 65535] { R4741 += 1, R4696 += 1, R4697 += 1 };
  s0 -> s4 [73, 73] { R4741 += 1, R4697 += 1, R4323 += 1, R4324 += 1 };
  s0 -> s5 [73, 73] { R4741 += 1, R4697 += 1, R4323 += 1, R4324 += 1 };
  s0 -> s6 [73, 73] { R4741 += 1, R4697 += 1, R4322 += 1, R4323 += 1 };
  s0 -> s7 [73, 73] { R4741 += 1, R4697 += 1, R4322 += 1, R4323 += 1 };
  s0 -> s1 [74, 65535] { R4741 += 1, R4697 += 1, R4323 += 1, R4324 += 1 };
  s0 -> s2 [74, 65535] { R4741 += 1, R4697 += 1, R4322 += 1, R4323 += 1 };
  s1 -> s1 [0, 72] { R4741 += 1, R4697 += 1, R4323 += 1, R4324 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s1 [0, 65535] { R4741 += 1 };
  s1 -> s4 [73, 73] { R4741 += 1, R4697 += 1, R4323 += 1, R4324 += 1 };
  s1 -> s5 [73, 73] { R4741 += 1, R4697 += 1, R4323 += 1, R4324 += 1 };
  s1 -> s1 [74, 65535] { R4741 += 1, R4697 += 1, R4323 += 1, R4324 += 1 };
  s2 -> s1 [0, 72] { R4741 += 1, R4697 += 1, R4323 += 1, R4324 += 1 };
  s2 -> s2 [0, 72] { R4741 += 1, R4697 += 1, R4322 += 1, R4323 += 1 };
  s2 -> s4 [73, 73] { R4741 += 1, R4697 += 1, R4323 += 1, R4324 += 1 };
  s2 -> s5 [73, 73] { R4741 += 1, R4697 += 1, R4323 += 1, R4324 += 1 };
  s2 -> s6 [73, 73] { R4741 += 1, R4697 += 1, R4322 += 1, R4323 += 1 };
  s2 -> s7 [73, 73] { R4741 += 1, R4697 += 1, R4322 += 1, R4323 += 1 };
  s2 -> s1 [74, 65535] { R4741 += 1, R4697 += 1, R4323 += 1, R4324 += 1 };
  s2 -> s2 [74, 65535] { R4741 += 1, R4697 += 1, R4322 += 1, R4323 += 1 };
  s3 -> s1 [0, 72] { R4741 += 1, R4697 += 1, R4323 += 1, R4324 += 1 };
  s3 -> s2 [0, 72] { R4741 += 1, R4697 += 1, R4322 += 1, R4323 += 1 };
  s3 -> s3 [0, 65535] { R4741 += 1, R4696 += 1, R4697 += 1 };
  s3 -> s4 [73, 73] { R4741 += 1, R4697 += 1, R4323 += 1, R4324 += 1 };
  s3 -> s5 [73, 73] { R4741 += 1, R4697 += 1, R4323 += 1, R4324 += 1 };
  s3 -> s6 [73, 73] { R4741 += 1, R4697 += 1, R4322 += 1, R4323 += 1 };
  s3 -> s7 [73, 73] { R4741 += 1, R4697 += 1, R4322 += 1, R4323 += 1 };
  s3 -> s1 [74, 65535] { R4741 += 1, R4697 += 1, R4323 += 1, R4324 += 1 };
  s3 -> s2 [74, 65535] { R4741 += 1, R4697 += 1, R4322 += 1, R4323 += 1 };
  s4 -> s4 [0, 65535] { R4741 += 1, R4697 += 1, R4323 += 1, R4324 += 1 };
  s4 -> s9 [0, 65535] { R4741 += 1 };
  s4 -> s8 [0, 65535];
  s5 -> s5 [0, 65535] { R4741 += 1 };
  s5 -> s8 [0, 65535];
  s7 -> s4 [0, 65535] { R4741 += 1, R4697 += 1, R4323 += 1, R4324 += 1 };
  s7 -> s7 [0, 65535] { R4741 += 1, R4697 += 1, R4322 += 1, R4323 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R4741 += 1 };
  s9 -> s8 [0, 65535];
  accepting s4, s8, s5, s9, s1;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 72] { R4743 += 1, R4699 += 1, R4640 += 1, R4641 += 1 };
  s0 -> s2 [0, 72] { R4743 += 1, R4699 += 1, R4641 += 1 };
  s0 -> s3 [0, 65535] { R4743 += 1, R4698 += 1, R4699 += 1 };
  s0 -> s0 [0, 65535] { R4742 += 1, R4743 += 1 };
  s0 -> s4 [73, 73] { R4743 += 1, R4699 += 1, R4641 += 1 };
  s0 -> s5 [73, 73] { R4743 += 1, R4699 += 1, R4640 += 1, R4641 += 1 };
  s0 -> s6 [73, 73] { R4743 += 1, R4699 += 1, R4640 += 1, R4641 += 1 };
  s0 -> s7 [73, 73] { R4743 += 1, R4699 += 1, R4641 += 1 };
  s0 -> s2 [74, 80] { R4743 += 1, R4699 += 1, R4641 += 1 };
  s0 -> s1 [74, 65535] { R4743 += 1, R4699 += 1, R4640 += 1, R4641 += 1 };
  s0 -> s8 [81, 81] { R4743 += 1, R4699 += 1, R4641 += 1 };
  s0 -> s2 [90, 65535] { R4743 += 1, R4699 += 1, R4641 += 1 };
  s1 -> s1 [0, 72] { R4743 += 1, R4699 += 1, R4640 += 1, R4641 += 1 };
  s1 -> s2 [0, 72] { R4743 += 1, R4699 += 1, R4641 += 1 };
  s1 -> s4 [73, 73] { R4743 += 1, R4699 += 1, R4641 += 1 };
  s1 -> s5 [73, 73] { R4743 += 1, R4699 += 1, R4640 += 1, R4641 += 1 };
  s1 -> s6 [73, 73] { R4743 += 1, R4699 += 1, R4640 += 1, R4641 += 1 };
  s1 -> s7 [73, 73] { R4743 += 1, R4699 += 1, R4641 += 1 };
  s1 -> s2 [74, 80] { R4743 += 1, R4699 += 1, R4641 += 1 };
  s1 -> s1 [74, 65535] { R4743 += 1, R4699 += 1, R4640 += 1, R4641 += 1 };
  s1 -> s8 [81, 81] { R4743 += 1, R4699 += 1, R4641 += 1 };
  s1 -> s2 [90, 65535] { R4743 += 1, R4699 += 1, R4641 += 1 };
  s2 -> s2 [0, 72] { R4743 += 1, R4699 += 1, R4641 += 1 };
  s2 -> s4 [73, 73] { R4743 += 1, R4699 += 1 };
  s2 -> s7 [73, 73] { R4743 += 1, R4699 += 1 };
  s2 -> s2 [74, 80] { R4743 += 1, R4699 += 1, R4641 += 1 };
  s2 -> s2 [74, 65535] { R4743 += 1, R4699 += 1 };
  s2 -> s8 [81, 81] { R4743 += 1, R4699 += 1, R4641 += 1 };
  s2 -> s2 [90, 65535] { R4743 += 1, R4699 += 1, R4641 += 1 };
  s3 -> s1 [0, 72] { R4743 += 1, R4699 += 1, R4640 += 1, R4641 += 1 };
  s3 -> s2 [0, 72] { R4743 += 1, R4699 += 1, R4641 += 1 };
  s3 -> s3 [0, 65535] { R4743 += 1, R4698 += 1, R4699 += 1 };
  s3 -> s4 [73, 73] { R4743 += 1, R4699 += 1, R4641 += 1 };
  s3 -> s5 [73, 73] { R4743 += 1, R4699 += 1, R4640 += 1, R4641 += 1 };
  s3 -> s6 [73, 73] { R4743 += 1, R4699 += 1, R4640 += 1, R4641 += 1 };
  s3 -> s7 [73, 73] { R4743 += 1, R4699 += 1, R4641 += 1 };
  s3 -> s2 [74, 80] { R4743 += 1, R4699 += 1, R4641 += 1 };
  s3 -> s1 [74, 65535] { R4743 += 1, R4699 += 1, R4640 += 1, R4641 += 1 };
  s3 -> s8 [81, 81] { R4743 += 1, R4699 += 1, R4641 += 1 };
  s3 -> s2 [90, 65535] { R4743 += 1, R4699 += 1, R4641 += 1 };
  s4 -> s4 [0, 80] { R4743 += 1, R4699 += 1, R4641 += 1 };
  s4 -> s4 [0, 65535] { R4743 += 1, R4699 += 1 };
  s4 -> s10 [81, 81] { R4743 += 1, R4699 += 1, R4641 += 1 };
  s4 -> s4 [90, 65535] { R4743 += 1, R4699 += 1, R4641 += 1 };
  s6 -> s4 [0, 80] { R4743 += 1, R4699 += 1, R4641 += 1 };
  s6 -> s6 [0, 65535] { R4743 += 1, R4699 += 1, R4640 += 1, R4641 += 1 };
  s6 -> s10 [81, 81] { R4743 += 1, R4699 += 1, R4641 += 1 };
  s6 -> s4 [90, 65535] { R4743 += 1, R4699 += 1, R4641 += 1 };
  s8 -> s8 [0, 72] { R4743 += 1, R4699 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R4743 += 1 };
  s8 -> s10 [73, 73] { R4743 += 1, R4699 += 1 };
  s8 -> s11 [73, 73] { R4743 += 1, R4699 += 1 };
  s8 -> s8 [74, 65535] { R4743 += 1, R4699 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R4743 += 1, R4699 += 1 };
  s10 -> s12 [0, 65535] { R4743 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R4743 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R4743 += 1 };
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [113, 113];
  accepting s1;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
constraint R2 = R4743 && R20 - R4743 = -1 && R21 = R4743 && R22 - R4743 = -1 && R23 = R4743 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R3899 + -1*R3897 - R53 = 0 && R52 + R3898 + R3896 = 0 && R4684 = 0 && R4685 = 0 && R4692 = 0 && R4693 = 0 && R4694 = 0 && R4695 = 0 && R4696 = 0 && R4697 = 0 && R4698 = 0 && R4699 = 0 && R4700 = 0 && R4701 = R4743 && R4702 = 0 && R4703 = R4743 && R4704 = 0 && R4705 = R4743 && R4706 = 0 && R4707 = R4743 && R4708 = 0 && R4709 = R4743 && R4710 = 0 && R4711 = R4743 && R4712 = 0 && R4713 = R4743 && R4714 = 0 && R4715 = R4743 && R4716 = 0 && R4717 = R4743 && R4718 = 0 && R4719 = R4743 && R4720 = 0 && R4721 = R4743 && R4722 = 0 && R4723 = R4743 && R4724 = 0 && R4725 = R4743 && R4726 = 0 && R4727 = R4743 && R4728 = 0 && R4729 = R4743 && R4730 = 0 && R4731 = R4743 && R4732 = 0 && R4733 = R4743 && R4734 = 0 && R4735 = R4743 && R4736 = 0 && R4737 = R4743 && R4738 = 0 && R4739 = R4743 && R4740 = 0 && R4741 = R4743 && R4742 = 0 && -1 < R1 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R3899 + -1*R3897 - R53 < 1 && 0 < R4743 && (R1 != 0 || R17 = 0 || (R4644 = 0 && R4645 = 0)) && (R1 != 0 || R17 = 0 || (R4646 = 0 && R4647 = 0)) && (R1 != 0 || R17 = 0 || (R4648 = 0 && R4649 = 0)) && (R1 != 0 || R17 = 0 || (R4650 = 0 && R4651 = 0)) && (R1 != 0 || R17 = 0 || (R4652 = 0 && R4653 = 0)) && (R1 != 0 || R17 = 0 || (R4654 = 0 && R4655 = 0)) && (R1 != 0 || R17 = 0 || (R4656 = 0 && R4657 = 0)) && (R1 != 0 || R17 = 0 || (R4658 = 0 && R4659 = 0)) && (R1 != 0 || R17 = 0 || (R4660 = 0 && R4661 = 0)) && (R1 != 0 || R17 = 0 || (R4662 = 0 && R4663 = 0)) && (R48 + R3895 + R3892 != 0 || ((R42 + R72 + R70 != 0 || R43 + R73 + R71 + -1*R3899 + -1*R3897 - R53 = 0 || R53 + R3899 + R3897 < 1) && (R42 + R72 + R70 = 0 || R53 + R3899 + R3897 < 1))) && (R48 + R3895 + R3892 != 0 || ((R46 + R3893 + R3890 != 0 || R47 + R3894 + R3891 + -1*R3899 + -1*R3897 - R53 = 0 || R53 + R3899 + R3897 < 1) && (R46 + R3893 + R3890 = 0 || R53 + R3899 + R3897 < 1))) && (R4644 != 0 || R1 = R4645 || R1 < 1) && (R4646 != 0 || R1 = R4647 || R1 < 1) && (R4648 != 0 || R1 = R4649 || R1 < 1) && (R4650 != 0 || R1 = R4651 || R1 < 1) && (R4652 != 0 || R1 = R4653 || R1 < 1) && (R4654 != 0 || R1 = R4655 || R1 < 1) && (R4656 != 0 || R1 = R4657 || R1 < 1) && (R4658 != 0 || R1 = R4659 || R1 < 1) && (R4660 != 0 || R1 = R4661 || R1 < 1) && (R4662 != 0 || R1 = R4663 || R1 < 1) && (R18 = 0 || (R4682 = 0 && R4683 = 0)) && (R18 = 0 || (R4686 = 0 && R4687 = 0)) && (R18 = 0 || (R4688 = 0 && R4689 = 0)) && (R18 = 0 || (R4690 = 0 && R4691 = 0)) && (R19 = 0 || (R4664 = 0 && R4665 = 0)) && (R19 = 0 || (R4666 = 0 && R4667 = 0)) && (R19 = 0 || (R4668 = 0 && R4669 = 0)) && (R19 = 0 || (R4670 = 0 && R4671 = 0)) && (R19 = 0 || (R4672 = 0 && R4673 = 0)) && (R19 = 0 || (R4674 = 0 && R4675 = 0)) && (R19 = 0 || (R4676 = 0 && R4677 = 0)) && (R19 = 0 || (R4678 = 0 && R4679 = 0)) && (R19 = 0 || (R4680 = 0 && R4681 = 0)) && (R48 + R3895 + R3892 = 0 || (R42 + R72 + R70 = 0 && R43 + R73 + R71 + -1*R3899 + -1*R3897 - R53 = 0)) && (R48 + R3895 + R3892 = 0 || (R46 + R3893 + R3890 = 0 && R47 + R3894 + R3891 + -1*R3899 + -1*R3897 - R53 = 0)) && (R58 + R4327 + R4324 = 0 || (R56 + R4325 + R4322 = 0 && R57 + R4326 + R4323 = 0)) && (R58 + R4327 + R4324 = 0 || (R62 + R4642 + R4640 = 0 && R63 + R4643 + R4641 = 0)) && (R4644 = 0 || R1 < 1) && (R4646 = 0 || R1 < 1) && (R4648 = 0 || R1 < 1) && (R4650 = 0 || R1 < 1) && (R4652 = 0 || R1 < 1) && (R4654 = 0 || R1 < 1) && (R4656 = 0 || R1 < 1) && (R4658 = 0 || R1 < 1) && (R4660 = 0 || R1 < 1) && (R4662 = 0 || R1 < 1);
// End of Parikh automata intersection problem
