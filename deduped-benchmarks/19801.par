// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R11522, R11523, R11524, R11525, R12, R15342, R15343, R15344, R15345, R15346, R15347, R15348, R15349, R15350, R15351, R16196, R16197, R16198, R16199, R16200, R16201, R16306, R16307, R16308, R16309, R16310, R16311, R16312, R16313, R16314, R16315, R16316, R16317, R16318, R16319, R16320, R16321, R16322, R16323, R16324, R16325, R16326, R16327, R16328, R16329, R16330, R16331, R16332, R16333, R16334, R16335, R16336, R16337, R16338, R16339, R16340, R16341, R16342, R16343, R16344, R16345, R16346, R16347, R16348, R16349, R16350, R16351, R16352, R16353, R16354, R16355, R16356, R16357, R16358, R16359, R16360, R16361, R16362, R16363, R16364, R16365, R16366, R16367, R16368, R16369, R16370, R16371, R16372, R16373, R16374, R16375, R16376, R16377, R16378, R16379, R16380, R16381, R16382, R16383, R16384, R16385, R16386, R16387, R16388, R16389, R16390, R16391, R16392, R16393, R16394, R16395, R16396, R16397, R16398, R16399, R16400, R16401, R16402, R16403, R16404, R16405, R16406, R16407, R16408, R16409, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 72];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [73, 73];
  s0 -> s1 [74, 65535];
  s1 -> s1 [0, 72];
  s1 -> s2 [73, 73];
  s1 -> s1 [74, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R21 += 1 };
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R25 += 1 };
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R16331 += 1, R19 += 1 };
  s0 -> s0 [0, 65535] { R16330 += 1, R16331 += 1 };
  s1 -> s1 [0, 65535] { R16331 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 72] { R16333 += 1 };
  s0 -> s0 [0, 65535] { R16332 += 1, R16333 += 1 };
  s0 -> s2 [73, 73] { R16333 += 1 };
  s0 -> s3 [73, 73] { R16333 += 1 };
  s0 -> s1 [82, 65535] { R16333 += 1 };
  s1 -> s1 [0, 72] { R16333 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R16333 += 1 };
  s1 -> s3 [73, 73] { R16333 += 1 };
  s1 -> s1 [82, 65535] { R16333 += 1 };
  s2 -> s2 [0, 73] { R16333 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [82, 65535] { R16333 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 72] { R16335 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R16334 += 1, R16335 += 1 };
  s0 -> s2 [73, 73] { R16335 += 1, R38 += 1 };
  s0 -> s3 [73, 73] { R16335 += 1, R38 += 1 };
  s0 -> s1 [74, 65535] { R16335 += 1, R38 += 1 };
  s1 -> s1 [0, 72] { R16335 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R16335 += 1, R38 += 1 };
  s1 -> s3 [73, 73] { R16335 += 1, R38 += 1 };
  s1 -> s1 [74, 65535] { R16335 += 1, R38 += 1 };
  s2 -> s2 [0, 65535] { R16335 += 1, R38 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 72] { R16337 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R16336 += 1, R16337 += 1 };
  s0 -> s2 [73, 73] { R16337 += 1, R40 += 1 };
  s0 -> s3 [73, 73] { R16337 += 1, R40 += 1 };
  s0 -> s1 [74, 65535] { R16337 += 1, R40 += 1 };
  s1 -> s1 [0, 72] { R16337 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R16337 += 1, R40 += 1 };
  s1 -> s3 [73, 73] { R16337 += 1, R40 += 1 };
  s1 -> s1 [74, 65535] { R16337 += 1, R40 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R16337 += 1, R40 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 72] { R16339 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R16338 += 1, R16339 += 1 };
  s0 -> s2 [73, 73] { R16339 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [73, 73] { R16339 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [74, 65535] { R16339 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 72] { R16339 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R16339 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [73, 73] { R16339 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [74, 65535] { R16339 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R16339 += 1, R42 += 1, R43 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 72] { R16341 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R16340 += 1, R16341 += 1 };
  s0 -> s2 [73, 73] { R16341 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [73, 73] { R16341 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [74, 65535] { R16341 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 72] { R16341 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R16341 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [73, 73] { R16341 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [74, 65535] { R16341 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535] { R16341 += 1, R46 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 72] { R16343 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R16342 += 1, R16343 += 1 };
  s0 -> s2 [73, 73] { R16343 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [73, 73] { R16343 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [74, 65535] { R16343 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 72] { R16343 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R16343 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [73, 73] { R16343 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [74, 65535] { R16343 += 1, R52 += 1, R53 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R16343 += 1, R52 += 1, R53 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 72] { R16345 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R16344 += 1, R16345 += 1 };
  s0 -> s2 [73, 73] { R16345 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [73, 73] { R16345 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [74, 65535] { R16345 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 72] { R16345 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R16345 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [73, 73] { R16345 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [74, 65535] { R16345 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535] { R16345 += 1, R56 += 1, R57 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 72] { R16347 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R16346 += 1, R16347 += 1 };
  s0 -> s2 [73, 73] { R16347 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [73, 73] { R16347 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [74, 65535] { R16347 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 72] { R16347 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R16347 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [73, 73] { R16347 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [74, 65535] { R16347 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R16347 += 1, R62 += 1, R63 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 72] { R16367 += 1 };
  s0 -> s0 [0, 65535] { R16366 += 1, R16367 += 1 };
  s0 -> s2 [73, 73] { R16367 += 1 };
  s0 -> s1 [74, 65535] { R16367 += 1 };
  s1 -> s1 [0, 72] { R16367 += 1 };
  s1 -> s2 [73, 73] { R16367 += 1 };
  s1 -> s1 [74, 65535] { R16367 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R16367 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R16368 += 1, R16369 += 1 };
  s0 -> s1 [0, 65535] { R16369 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R16369 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 72] { R16371 += 1 };
  s0 -> s2 [0, 65535] { R16371 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R16370 += 1, R16371 += 1 };
  s0 -> s3 [73, 73] { R16371 += 1 };
  s0 -> s1 [74, 65535] { R16371 += 1 };
  s1 -> s1 [0, 72] { R16371 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [73, 73] { R16371 += 1 };
  s1 -> s1 [74, 65535] { R16371 += 1 };
  s2 -> s1 [0, 72] { R16371 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R16371 += 1, R8 += 1 };
  s2 -> s3 [73, 73] { R16371 += 1 };
  s2 -> s1 [74, 65535] { R16371 += 1 };
  s3 -> s3 [0, 65535] { R16371 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 72] { R16373 += 1, R16311 += 1 };
  s0 -> s2 [0, 65535] { R16373 += 1, R16310 += 1, R16311 += 1 };
  s0 -> s0 [0, 65535] { R16372 += 1, R16373 += 1 };
  s0 -> s1 [74, 65535] { R16373 += 1, R16311 += 1 };
  s1 -> s1 [0, 72] { R16373 += 1, R16311 += 1 };
  s1 -> s1 [0, 65535] { R16373 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [74, 65535] { R16373 += 1, R16311 += 1 };
  s2 -> s1 [0, 72] { R16373 += 1, R16311 += 1 };
  s2 -> s2 [0, 65535] { R16373 += 1, R16310 += 1, R16311 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [74, 65535] { R16373 += 1, R16311 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R16375 += 1, R16312 += 1, R16313 += 1 };
  s0 -> s0 [0, 65535] { R16374 += 1, R16375 += 1 };
  s0 -> s2 [0, 65535] { R16375 += 1, R16313 += 1, R17 += 1 };
  s1 -> s1 [0, 65535] { R16375 += 1, R16312 += 1, R16313 += 1 };
  s1 -> s2 [0, 65535] { R16375 += 1, R16313 += 1, R17 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R16375 += 1 };
  s2 -> s2 [0, 65535] { R16375 += 1, R16313 += 1, R17 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R16375 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 73] { R16377 += 1, R16315 += 1 };
  s0 -> s2 [0, 65535] { R16377 += 1, R16314 += 1, R16315 += 1 };
  s0 -> s0 [0, 65535] { R16376 += 1, R16377 += 1 };
  s0 -> s1 [81, 65535] { R16377 += 1, R16315 += 1 };
  s1 -> s1 [0, 73] { R16377 += 1, R16315 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R16377 += 1 };
  s1 -> s1 [81, 65535] { R16377 += 1, R16315 += 1 };
  s2 -> s1 [0, 73] { R16377 += 1, R16315 += 1 };
  s2 -> s2 [0, 65535] { R16377 += 1, R16314 += 1, R16315 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [81, 65535] { R16377 += 1, R16315 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R16379 += 1, R16316 += 1, R16317 += 1 };
  s0 -> s2 [0, 65535] { R16379 += 1, R16317 += 1, R67 += 1 };
  s0 -> s0 [0, 65535] { R16378 += 1, R16379 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R16379 += 1, R16316 += 1, R16317 += 1 };
  s1 -> s2 [0, 65535] { R16379 += 1, R16317 += 1, R67 += 1 };
  s2 -> s3 [0, 65535] { R16379 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R16379 += 1, R16317 += 1, R67 += 1 };
  s3 -> s3 [0, 65535] { R16379 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 80] { R16381 += 1, R16319 += 1 };
  s0 -> s2 [0, 65535] { R16381 += 1, R16318 += 1, R16319 += 1 };
  s0 -> s3 [0, 65535] { R16381 += 1, R16319 += 1, R69 += 1 };
  s0 -> s0 [0, 65535] { R16380 += 1, R16381 += 1 };
  s0 -> s1 [82, 65535] { R16381 += 1, R16319 += 1 };
  s1 -> s1 [0, 80] { R16381 += 1, R16319 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R16381 += 1 };
  s1 -> s1 [82, 65535] { R16381 += 1, R16319 += 1 };
  s2 -> s1 [0, 80] { R16381 += 1, R16319 += 1 };
  s2 -> s2 [0, 65535] { R16381 += 1, R16318 += 1, R16319 += 1 };
  s2 -> s3 [0, 65535] { R16381 += 1, R16319 += 1, R69 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [82, 65535] { R16381 += 1, R16319 += 1 };
  s3 -> s1 [0, 80] { R16381 += 1, R16319 += 1 };
  s3 -> s3 [0, 65535] { R16381 += 1, R16319 += 1, R69 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R16381 += 1 };
  s3 -> s1 [82, 65535] { R16381 += 1, R16319 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R16381 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 80] { R16383 += 1, R16321 += 1, R11525 += 1 };
  s0 -> s1 [0, 65535] { R16383 += 1, R16321 += 1 };
  s0 -> s2 [0, 65535] { R16383 += 1, R16320 += 1, R16321 += 1 };
  s0 -> s0 [0, 65535] { R16382 += 1, R16383 += 1 };
  s0 -> s1 [82, 65535] { R16383 += 1, R16321 += 1, R11525 += 1 };
  s1 -> s1 [0, 80] { R16383 += 1, R16321 += 1, R11525 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R16383 += 1, R16321 += 1 };
  s1 -> s4 [0, 65535] { R16383 += 1 };
  s1 -> s1 [82, 65535] { R16383 += 1, R16321 += 1, R11525 += 1 };
  s2 -> s1 [0, 80] { R16383 += 1, R16321 += 1, R11525 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R16383 += 1, R16321 += 1 };
  s2 -> s2 [0, 65535] { R16383 += 1, R16320 += 1, R16321 += 1 };
  s2 -> s1 [82, 65535] { R16383 += 1, R16321 += 1, R11525 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R16383 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s0 [0, 65535] { R16384 += 1, R16385 += 1 };
  s0 -> s1 [0, 65535] { R16385 += 1, R16323 += 1 };
  s0 -> s2 [0, 65535] { R16385 += 1, R16322 += 1, R16323 += 1 };
  s0 -> s3 [0, 65535] { R16385 += 1, R16323 += 1, R15346 += 1, R15347 += 1 };
  s1 -> s1 [0, 65535] { R16385 += 1, R16323 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R16385 += 1 };
  s2 -> s1 [0, 65535] { R16385 += 1, R16323 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R16385 += 1, R16322 += 1, R16323 += 1 };
  s2 -> s3 [0, 65535] { R16385 += 1, R16323 += 1, R15346 += 1, R15347 += 1 };
  s3 -> s1 [0, 65535] { R16385 += 1, R16323 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R16385 += 1 };
  s3 -> s3 [0, 65535] { R16385 += 1, R16323 += 1, R15346 += 1, R15347 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R16385 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 81] { R16387 += 1, R16325 += 1, R15351 += 1 };
  s0 -> s1 [0, 65535] { R16387 += 1, R16325 += 1 };
  s0 -> s2 [0, 65535] { R16387 += 1, R16324 += 1, R16325 += 1 };
  s0 -> s0 [0, 65535] { R16386 += 1, R16387 += 1 };
  s0 -> s1 [89, 65535] { R16387 += 1, R16325 += 1, R15351 += 1 };
  s1 -> s1 [0, 81] { R16387 += 1, R16325 += 1, R15351 += 1 };
  s1 -> s1 [0, 65535] { R16387 += 1, R16325 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R16387 += 1 };
  s1 -> s1 [89, 65535] { R16387 += 1, R16325 += 1, R15351 += 1 };
  s2 -> s1 [0, 81] { R16387 += 1, R16325 += 1, R15351 += 1 };
  s2 -> s1 [0, 65535] { R16387 += 1, R16325 += 1 };
  s2 -> s2 [0, 65535] { R16387 += 1, R16324 += 1, R16325 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [89, 65535] { R16387 += 1, R16325 += 1, R15351 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R16387 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R16389 += 1, R16327 += 1 };
  s0 -> s2 [0, 65535] { R16389 += 1, R16326 += 1, R16327 += 1 };
  s0 -> s0 [0, 65535] { R16388 += 1, R16389 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R16389 += 1, R16327 += 1 };
  s1 -> s4 [0, 65535] { R16389 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R16389 += 1, R16327 += 1 };
  s2 -> s2 [0, 65535] { R16389 += 1, R16326 += 1, R16327 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R16389 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 80] { R16391 += 1, R16329 += 1, R16309 += 1 };
  s0 -> s1 [0, 65535] { R16391 += 1, R16329 += 1 };
  s0 -> s2 [0, 65535] { R16391 += 1, R16328 += 1, R16329 += 1 };
  s0 -> s0 [0, 65535] { R16390 += 1, R16391 += 1 };
  s0 -> s3 [81, 81] { R16391 += 1, R16329 += 1, R16309 += 1 };
  s0 -> s4 [81, 81] { R16391 += 1, R16329 += 1, R16309 += 1 };
  s0 -> s1 [90, 65535] { R16391 += 1, R16329 += 1, R16309 += 1 };
  s1 -> s1 [0, 80] { R16391 += 1, R16329 += 1, R16309 += 1 };
  s1 -> s1 [0, 65535] { R16391 += 1, R16329 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R16391 += 1 };
  s1 -> s3 [81, 81] { R16391 += 1, R16329 += 1, R16309 += 1 };
  s1 -> s4 [81, 81] { R16391 += 1, R16329 += 1, R16309 += 1 };
  s1 -> s1 [90, 65535] { R16391 += 1, R16329 += 1, R16309 += 1 };
  s2 -> s1 [0, 80] { R16391 += 1, R16329 += 1, R16309 += 1 };
  s2 -> s1 [0, 65535] { R16391 += 1, R16329 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R16391 += 1, R16328 += 1, R16329 += 1 };
  s2 -> s3 [81, 81] { R16391 += 1, R16329 += 1, R16309 += 1 };
  s2 -> s4 [81, 81] { R16391 += 1, R16329 += 1, R16309 += 1 };
  s2 -> s1 [90, 65535] { R16391 += 1, R16329 += 1, R16309 += 1 };
  s3 -> s3 [0, 81] { R16391 += 1, R16329 += 1, R16309 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R16391 += 1, R16329 += 1 };
  s3 -> s6 [0, 65535] { R16391 += 1 };
  s3 -> s3 [90, 65535] { R16391 += 1, R16329 += 1, R16309 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R16391 += 1, R16329 += 1 };
  s4 -> s6 [0, 65535] { R16391 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R16391 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R16393 += 1, R16348 += 1, R16349 += 1 };
  s0 -> s2 [0, 65535] { R16393 += 1, R16349 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R16392 += 1, R16393 += 1 };
  s1 -> s1 [0, 65535] { R16393 += 1, R16348 += 1, R16349 += 1 };
  s1 -> s2 [0, 65535] { R16393 += 1, R16349 += 1, R18 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R16393 += 1 };
  s2 -> s2 [0, 65535] { R16393 += 1, R16349 += 1, R18 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R16393 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 72] { R16395 += 1, R16351 += 1 };
  s0 -> s0 [0, 65535] { R16394 += 1, R16395 += 1 };
  s0 -> s2 [0, 65535] { R16395 += 1, R16350 += 1, R16351 += 1 };
  s0 -> s3 [73, 73] { R16395 += 1, R16351 += 1 };
  s0 -> s4 [73, 73] { R16395 += 1, R16351 += 1 };
  s0 -> s5 [81, 81] { R16395 += 1, R16351 += 1 };
  s0 -> s1 [82, 65535] { R16395 += 1, R16351 += 1 };
  s1 -> s1 [0, 72] { R16395 += 1, R16351 += 1 };
  s1 -> s3 [73, 73] { R16395 += 1, R16351 += 1 };
  s1 -> s4 [73, 73] { R16395 += 1, R16351 += 1 };
  s1 -> s5 [81, 81] { R16395 += 1, R16351 += 1 };
  s1 -> s1 [82, 65535] { R16395 += 1, R16351 += 1 };
  s2 -> s1 [0, 72] { R16395 += 1, R16351 += 1 };
  s2 -> s2 [0, 65535] { R16395 += 1, R16350 += 1, R16351 += 1 };
  s2 -> s3 [73, 73] { R16395 += 1, R16351 += 1 };
  s2 -> s4 [73, 73] { R16395 += 1, R16351 += 1 };
  s2 -> s5 [81, 81] { R16395 += 1, R16351 += 1 };
  s2 -> s1 [82, 65535] { R16395 += 1, R16351 += 1 };
  s4 -> s4 [0, 73] { R16395 += 1, R16351 += 1 };
  s4 -> s8 [81, 81] { R16395 += 1, R16351 += 1 };
  s4 -> s4 [82, 65535] { R16395 += 1, R16351 += 1 };
  s5 -> s5 [0, 72] { R16395 += 1, R16351 += 1 };
  s5 -> s5 [0, 65535] { R16395 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [73, 73] { R16395 += 1, R16351 += 1 };
  s5 -> s8 [73, 73] { R16395 += 1, R16351 += 1 };
  s5 -> s5 [81, 65535] { R16395 += 1, R16351 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R16395 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 73] { R16395 += 1, R16351 += 1 };
  s8 -> s8 [0, 65535] { R16395 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [81, 65535] { R16395 += 1, R16351 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 72] { R16397 += 1, R16353 += 1, R66 += 1 };
  s0 -> s2 [0, 65535] { R16397 += 1, R16352 += 1, R16353 += 1 };
  s0 -> s0 [0, 65535] { R16396 += 1, R16397 += 1 };
  s0 -> s3 [73, 73] { R16397 += 1, R16353 += 1, R66 += 1 };
  s0 -> s4 [73, 73] { R16397 += 1, R16353 += 1, R66 += 1 };
  s0 -> s1 [74, 65535] { R16397 += 1, R16353 += 1, R66 += 1 };
  s1 -> s1 [0, 72] { R16397 += 1, R16353 += 1, R66 += 1 };
  s1 -> s1 [0, 65535] { R16397 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R16397 += 1, R16353 += 1, R66 += 1 };
  s1 -> s4 [73, 73] { R16397 += 1, R16353 += 1, R66 += 1 };
  s1 -> s1 [74, 65535] { R16397 += 1, R16353 += 1, R66 += 1 };
  s2 -> s1 [0, 72] { R16397 += 1, R16353 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R16397 += 1, R16352 += 1, R16353 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R16397 += 1, R16353 += 1, R66 += 1 };
  s2 -> s4 [73, 73] { R16397 += 1, R16353 += 1, R66 += 1 };
  s2 -> s1 [74, 65535] { R16397 += 1, R16353 += 1, R66 += 1 };
  s3 -> s3 [0, 65535] { R16397 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R16397 += 1, R16353 += 1, R66 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R16397 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R16397 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 72] { R16399 += 1, R16355 += 1, R68 += 1 };
  s0 -> s2 [0, 65535] { R16399 += 1, R16354 += 1, R16355 += 1 };
  s0 -> s0 [0, 65535] { R16398 += 1, R16399 += 1 };
  s0 -> s3 [73, 73] { R16399 += 1, R16355 += 1, R68 += 1 };
  s0 -> s4 [73, 73] { R16399 += 1, R16355 += 1, R68 += 1 };
  s0 -> s1 [74, 65535] { R16399 += 1, R16355 += 1, R68 += 1 };
  s1 -> s1 [0, 72] { R16399 += 1, R16355 += 1, R68 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R16399 += 1 };
  s1 -> s3 [73, 73] { R16399 += 1, R16355 += 1, R68 += 1 };
  s1 -> s4 [73, 73] { R16399 += 1, R16355 += 1, R68 += 1 };
  s1 -> s1 [74, 65535] { R16399 += 1, R16355 += 1, R68 += 1 };
  s2 -> s1 [0, 72] { R16399 += 1, R16355 += 1, R68 += 1 };
  s2 -> s2 [0, 65535] { R16399 += 1, R16354 += 1, R16355 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R16399 += 1, R16355 += 1, R68 += 1 };
  s2 -> s4 [73, 73] { R16399 += 1, R16355 += 1, R68 += 1 };
  s2 -> s1 [74, 65535] { R16399 += 1, R16355 += 1, R68 += 1 };
  s3 -> s6 [0, 65535] { R16399 += 1 };
  s3 -> s3 [0, 65535] { R16399 += 1, R16355 += 1, R68 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R16399 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R16399 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 72] { R16401 += 1, R16357 += 1, R11523 += 1 };
  s0 -> s2 [0, 72] { R16401 += 1, R16357 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s0 [0, 65535] { R16400 += 1, R16401 += 1 };
  s0 -> s3 [0, 65535] { R16401 += 1, R16356 += 1, R16357 += 1 };
  s0 -> s4 [73, 73] { R16401 += 1, R16357 += 1, R11523 += 1 };
  s0 -> s5 [73, 73] { R16401 += 1, R16357 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s6 [73, 73] { R16401 += 1, R16357 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s7 [73, 73] { R16401 += 1, R16357 += 1, R11523 += 1 };
  s0 -> s1 [74, 80] { R16401 += 1, R16357 += 1, R11523 += 1 };
  s0 -> s2 [74, 65535] { R16401 += 1, R16357 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s1 [82, 65535] { R16401 += 1, R16357 += 1, R11523 += 1 };
  s1 -> s1 [0, 72] { R16401 += 1, R16357 += 1, R11523 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s1 [0, 65535] { R16401 += 1 };
  s1 -> s4 [73, 73] { R16401 += 1, R16357 += 1 };
  s1 -> s7 [73, 73] { R16401 += 1, R16357 += 1 };
  s1 -> s1 [74, 80] { R16401 += 1, R16357 += 1, R11523 += 1 };
  s1 -> s1 [74, 65535] { R16401 += 1, R16357 += 1 };
  s1 -> s1 [82, 65535] { R16401 += 1, R16357 += 1, R11523 += 1 };
  s2 -> s1 [0, 72] { R16401 += 1, R16357 += 1, R11523 += 1 };
  s2 -> s2 [0, 72] { R16401 += 1, R16357 += 1, R11522 += 1, R11523 += 1 };
  s2 -> s4 [73, 73] { R16401 += 1, R16357 += 1, R11523 += 1 };
  s2 -> s5 [73, 73] { R16401 += 1, R16357 += 1, R11522 += 1, R11523 += 1 };
  s2 -> s6 [73, 73] { R16401 += 1, R16357 += 1, R11522 += 1, R11523 += 1 };
  s2 -> s7 [73, 73] { R16401 += 1, R16357 += 1, R11523 += 1 };
  s2 -> s1 [74, 80] { R16401 += 1, R16357 += 1, R11523 += 1 };
  s2 -> s2 [74, 65535] { R16401 += 1, R16357 += 1, R11522 += 1, R11523 += 1 };
  s2 -> s1 [82, 65535] { R16401 += 1, R16357 += 1, R11523 += 1 };
  s3 -> s1 [0, 72] { R16401 += 1, R16357 += 1, R11523 += 1 };
  s3 -> s2 [0, 72] { R16401 += 1, R16357 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s3 [0, 65535] { R16401 += 1, R16356 += 1, R16357 += 1 };
  s3 -> s4 [73, 73] { R16401 += 1, R16357 += 1, R11523 += 1 };
  s3 -> s5 [73, 73] { R16401 += 1, R16357 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s6 [73, 73] { R16401 += 1, R16357 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s7 [73, 73] { R16401 += 1, R16357 += 1, R11523 += 1 };
  s3 -> s1 [74, 80] { R16401 += 1, R16357 += 1, R11523 += 1 };
  s3 -> s2 [74, 65535] { R16401 += 1, R16357 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s1 [82, 65535] { R16401 += 1, R16357 += 1, R11523 += 1 };
  s4 -> s4 [0, 80] { R16401 += 1, R16357 += 1, R11523 += 1 };
  s4 -> s9 [0, 65535] { R16401 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s4 [0, 65535] { R16401 += 1, R16357 += 1 };
  s4 -> s4 [82, 65535] { R16401 += 1, R16357 += 1, R11523 += 1 };
  s5 -> s4 [0, 80] { R16401 += 1, R16357 += 1, R11523 += 1 };
  s5 -> s5 [0, 65535] { R16401 += 1, R16357 += 1, R11522 += 1, R11523 += 1 };
  s5 -> s4 [82, 65535] { R16401 += 1, R16357 += 1, R11523 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R16401 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R16401 += 1 };
  s9 -> s8 [0, 65535];
  accepting s4, s8, s9, s1, s7;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 72] { R16403 += 1, R16359 += 1, R15342 += 1, R15343 += 1 };
  s0 -> s2 [0, 72] { R16403 += 1, R16359 += 1, R15343 += 1, R15344 += 1 };
  s0 -> s0 [0, 65535] { R16402 += 1, R16403 += 1 };
  s0 -> s3 [0, 65535] { R16403 += 1, R16358 += 1, R16359 += 1 };
  s0 -> s4 [73, 73] { R16403 += 1, R16359 += 1, R15342 += 1, R15343 += 1 };
  s0 -> s5 [73, 73] { R16403 += 1, R16359 += 1, R15343 += 1, R15344 += 1 };
  s0 -> s6 [73, 73] { R16403 += 1, R16359 += 1, R15342 += 1, R15343 += 1 };
  s0 -> s7 [73, 73] { R16403 += 1, R16359 += 1, R15343 += 1, R15344 += 1 };
  s0 -> s1 [74, 65535] { R16403 += 1, R16359 += 1, R15342 += 1, R15343 += 1 };
  s0 -> s2 [74, 65535] { R16403 += 1, R16359 += 1, R15343 += 1, R15344 += 1 };
  s1 -> s1 [0, 72] { R16403 += 1, R16359 += 1, R15342 += 1, R15343 += 1 };
  s1 -> s2 [0, 72] { R16403 += 1, R16359 += 1, R15343 += 1, R15344 += 1 };
  s1 -> s4 [73, 73] { R16403 += 1, R16359 += 1, R15342 += 1, R15343 += 1 };
  s1 -> s5 [73, 73] { R16403 += 1, R16359 += 1, R15343 += 1, R15344 += 1 };
  s1 -> s6 [73, 73] { R16403 += 1, R16359 += 1, R15342 += 1, R15343 += 1 };
  s1 -> s7 [73, 73] { R16403 += 1, R16359 += 1, R15343 += 1, R15344 += 1 };
  s1 -> s1 [74, 65535] { R16403 += 1, R16359 += 1, R15342 += 1, R15343 += 1 };
  s1 -> s2 [74, 65535] { R16403 += 1, R16359 += 1, R15343 += 1, R15344 += 1 };
  s2 -> s2 [0, 72] { R16403 += 1, R16359 += 1, R15343 += 1, R15344 += 1 };
  s2 -> s9 [0, 65535];
  s2 -> s2 [0, 65535] { R16403 += 1 };
  s2 -> s5 [73, 73] { R16403 += 1, R16359 += 1, R15343 += 1, R15344 += 1 };
  s2 -> s7 [73, 73] { R16403 += 1, R16359 += 1, R15343 += 1, R15344 += 1 };
  s2 -> s2 [74, 65535] { R16403 += 1, R16359 += 1, R15343 += 1, R15344 += 1 };
  s3 -> s1 [0, 72] { R16403 += 1, R16359 += 1, R15342 += 1, R15343 += 1 };
  s3 -> s2 [0, 72] { R16403 += 1, R16359 += 1, R15343 += 1, R15344 += 1 };
  s3 -> s3 [0, 65535] { R16403 += 1, R16358 += 1, R16359 += 1 };
  s3 -> s4 [73, 73] { R16403 += 1, R16359 += 1, R15342 += 1, R15343 += 1 };
  s3 -> s5 [73, 73] { R16403 += 1, R16359 += 1, R15343 += 1, R15344 += 1 };
  s3 -> s6 [73, 73] { R16403 += 1, R16359 += 1, R15342 += 1, R15343 += 1 };
  s3 -> s7 [73, 73] { R16403 += 1, R16359 += 1, R15343 += 1, R15344 += 1 };
  s3 -> s1 [74, 65535] { R16403 += 1, R16359 += 1, R15342 += 1, R15343 += 1 };
  s3 -> s2 [74, 65535] { R16403 += 1, R16359 += 1, R15343 += 1, R15344 += 1 };
  s4 -> s4 [0, 65535] { R16403 += 1, R16359 += 1, R15342 += 1, R15343 += 1 };
  s4 -> s7 [0, 65535] { R16403 += 1, R16359 += 1, R15343 += 1, R15344 += 1 };
  s5 -> s5 [0, 65535] { R16403 += 1 };
  s5 -> s9 [0, 65535];
  s7 -> s8 [0, 65535] { R16403 += 1 };
  s7 -> s9 [0, 65535];
  s7 -> s7 [0, 65535] { R16403 += 1, R16359 += 1, R15343 += 1, R15344 += 1 };
  s8 -> s8 [0, 65535] { R16403 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s8, s5, s2, s9, s7;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 72] { R16405 += 1, R16361 += 1, R15348 += 1, R15349 += 1 };
  s0 -> s2 [0, 72] { R16405 += 1, R16361 += 1, R15349 += 1 };
  s0 -> s3 [0, 65535] { R16405 += 1, R16360 += 1, R16361 += 1 };
  s0 -> s0 [0, 65535] { R16404 += 1, R16405 += 1 };
  s0 -> s4 [73, 73] { R16405 += 1, R16361 += 1, R15348 += 1, R15349 += 1 };
  s0 -> s5 [73, 73] { R16405 += 1, R16361 += 1, R15349 += 1 };
  s0 -> s6 [73, 73] { R16405 += 1, R16361 += 1, R15349 += 1 };
  s0 -> s7 [73, 73] { R16405 += 1, R16361 += 1, R15348 += 1, R15349 += 1 };
  s0 -> s2 [74, 81] { R16405 += 1, R16361 += 1, R15349 += 1 };
  s0 -> s1 [74, 65535] { R16405 += 1, R16361 += 1, R15348 += 1, R15349 += 1 };
  s0 -> s8 [89, 89] { R16405 += 1, R16361 += 1, R15349 += 1 };
  s0 -> s2 [90, 65535] { R16405 += 1, R16361 += 1, R15349 += 1 };
  s1 -> s1 [0, 72] { R16405 += 1, R16361 += 1, R15348 += 1, R15349 += 1 };
  s1 -> s2 [0, 72] { R16405 += 1, R16361 += 1, R15349 += 1 };
  s1 -> s4 [73, 73] { R16405 += 1, R16361 += 1, R15348 += 1, R15349 += 1 };
  s1 -> s5 [73, 73] { R16405 += 1, R16361 += 1, R15349 += 1 };
  s1 -> s6 [73, 73] { R16405 += 1, R16361 += 1, R15349 += 1 };
  s1 -> s7 [73, 73] { R16405 += 1, R16361 += 1, R15348 += 1, R15349 += 1 };
  s1 -> s2 [74, 81] { R16405 += 1, R16361 += 1, R15349 += 1 };
  s1 -> s1 [74, 65535] { R16405 += 1, R16361 += 1, R15348 += 1, R15349 += 1 };
  s1 -> s8 [89, 89] { R16405 += 1, R16361 += 1, R15349 += 1 };
  s1 -> s2 [90, 65535] { R16405 += 1, R16361 += 1, R15349 += 1 };
  s2 -> s2 [0, 72] { R16405 += 1, R16361 += 1, R15349 += 1 };
  s2 -> s5 [73, 73] { R16405 += 1, R16361 += 1, R15349 += 1 };
  s2 -> s6 [73, 73] { R16405 += 1, R16361 += 1, R15349 += 1 };
  s2 -> s2 [74, 81] { R16405 += 1, R16361 += 1, R15349 += 1 };
  s2 -> s8 [89, 89] { R16405 += 1, R16361 += 1, R15349 += 1 };
  s2 -> s2 [90, 65535] { R16405 += 1, R16361 += 1, R15349 += 1 };
  s3 -> s1 [0, 72] { R16405 += 1, R16361 += 1, R15348 += 1, R15349 += 1 };
  s3 -> s2 [0, 72] { R16405 += 1, R16361 += 1, R15349 += 1 };
  s3 -> s3 [0, 65535] { R16405 += 1, R16360 += 1, R16361 += 1 };
  s3 -> s4 [73, 73] { R16405 += 1, R16361 += 1, R15348 += 1, R15349 += 1 };
  s3 -> s5 [73, 73] { R16405 += 1, R16361 += 1, R15349 += 1 };
  s3 -> s6 [73, 73] { R16405 += 1, R16361 += 1, R15349 += 1 };
  s3 -> s7 [73, 73] { R16405 += 1, R16361 += 1, R15348 += 1, R15349 += 1 };
  s3 -> s2 [74, 81] { R16405 += 1, R16361 += 1, R15349 += 1 };
  s3 -> s1 [74, 65535] { R16405 += 1, R16361 += 1, R15348 += 1, R15349 += 1 };
  s3 -> s8 [89, 89] { R16405 += 1, R16361 += 1, R15349 += 1 };
  s3 -> s2 [90, 65535] { R16405 += 1, R16361 += 1, R15349 += 1 };
  s5 -> s5 [0, 81] { R16405 += 1, R16361 += 1, R15349 += 1 };
  s5 -> s11 [89, 89] { R16405 += 1, R16361 += 1, R15349 += 1 };
  s5 -> s5 [90, 65535] { R16405 += 1, R16361 += 1, R15349 += 1 };
  s7 -> s5 [0, 81] { R16405 += 1, R16361 += 1, R15349 += 1 };
  s7 -> s7 [0, 65535] { R16405 += 1, R16361 += 1, R15348 += 1, R15349 += 1 };
  s7 -> s11 [89, 89] { R16405 += 1, R16361 += 1, R15349 += 1 };
  s7 -> s5 [90, 65535] { R16405 += 1, R16361 += 1, R15349 += 1 };
  s8 -> s8 [0, 72] { R16405 += 1, R16361 += 1, R15349 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R16405 += 1 };
  s8 -> s10 [73, 73] { R16405 += 1, R16361 += 1 };
  s8 -> s11 [73, 73] { R16405 += 1, R16361 += 1 };
  s8 -> s8 [74, 81] { R16405 += 1, R16361 += 1, R15349 += 1 };
  s8 -> s8 [74, 65535] { R16405 += 1, R16361 += 1 };
  s8 -> s8 [89, 65535] { R16405 += 1, R16361 += 1, R15349 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R16405 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s11 [0, 81] { R16405 += 1, R16361 += 1, R15349 += 1 };
  s11 -> s11 [0, 65535] { R16405 += 1, R16361 += 1 };
  s11 -> s12 [0, 65535] { R16405 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [89, 65535] { R16405 += 1, R16361 += 1, R15349 += 1 };
  s12 -> s12 [0, 65535] { R16405 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 72] { R16407 += 1, R16363 += 1, R16197 += 1, R16198 += 1 };
  s0 -> s2 [0, 72] { R16407 += 1, R16363 += 1, R16196 += 1, R16197 += 1 };
  s0 -> s3 [0, 65535] { R16407 += 1, R16362 += 1, R16363 += 1 };
  s0 -> s0 [0, 65535] { R16406 += 1, R16407 += 1 };
  s0 -> s4 [73, 73] { R16407 += 1, R16363 += 1, R16197 += 1, R16198 += 1 };
  s0 -> s5 [73, 73] { R16407 += 1, R16363 += 1, R16196 += 1, R16197 += 1 };
  s0 -> s6 [73, 73] { R16407 += 1, R16363 += 1, R16197 += 1, R16198 += 1 };
  s0 -> s7 [73, 73] { R16407 += 1, R16363 += 1, R16196 += 1, R16197 += 1 };
  s0 -> s1 [74, 65535] { R16407 += 1, R16363 += 1, R16197 += 1, R16198 += 1 };
  s0 -> s2 [74, 65535] { R16407 += 1, R16363 += 1, R16196 += 1, R16197 += 1 };
  s1 -> s11 [0, 72] { R16407 += 1, R16363 += 1 };
  s1 -> s1 [0, 72] { R16407 += 1, R16363 += 1, R16197 += 1, R16198 += 1 };
  s1 -> s12 [73, 73] { R16407 += 1, R16363 += 1 };
  s1 -> s8 [73, 73] { R16407 += 1, R16363 += 1 };
  s1 -> s4 [73, 73] { R16407 += 1, R16363 += 1, R16197 += 1, R16198 += 1 };
  s1 -> s6 [73, 73] { R16407 += 1, R16363 += 1, R16197 += 1, R16198 += 1 };
  s1 -> s11 [74, 65535] { R16407 += 1, R16363 += 1 };
  s1 -> s1 [74, 65535] { R16407 += 1, R16363 += 1, R16197 += 1, R16198 += 1 };
  s2 -> s1 [0, 72] { R16407 += 1, R16363 += 1, R16197 += 1, R16198 += 1 };
  s2 -> s2 [0, 72] { R16407 += 1, R16363 += 1, R16196 += 1, R16197 += 1 };
  s2 -> s4 [73, 73] { R16407 += 1, R16363 += 1, R16197 += 1, R16198 += 1 };
  s2 -> s5 [73, 73] { R16407 += 1, R16363 += 1, R16196 += 1, R16197 += 1 };
  s2 -> s6 [73, 73] { R16407 += 1, R16363 += 1, R16197 += 1, R16198 += 1 };
  s2 -> s7 [73, 73] { R16407 += 1, R16363 += 1, R16196 += 1, R16197 += 1 };
  s2 -> s1 [74, 65535] { R16407 += 1, R16363 += 1, R16197 += 1, R16198 += 1 };
  s2 -> s2 [74, 65535] { R16407 += 1, R16363 += 1, R16196 += 1, R16197 += 1 };
  s3 -> s1 [0, 72] { R16407 += 1, R16363 += 1, R16197 += 1, R16198 += 1 };
  s3 -> s2 [0, 72] { R16407 += 1, R16363 += 1, R16196 += 1, R16197 += 1 };
  s3 -> s3 [0, 65535] { R16407 += 1, R16362 += 1, R16363 += 1 };
  s3 -> s4 [73, 73] { R16407 += 1, R16363 += 1, R16197 += 1, R16198 += 1 };
  s3 -> s5 [73, 73] { R16407 += 1, R16363 += 1, R16196 += 1, R16197 += 1 };
  s3 -> s6 [73, 73] { R16407 += 1, R16363 += 1, R16197 += 1, R16198 += 1 };
  s3 -> s7 [73, 73] { R16407 += 1, R16363 += 1, R16196 += 1, R16197 += 1 };
  s3 -> s1 [74, 65535] { R16407 += 1, R16363 += 1, R16197 += 1, R16198 += 1 };
  s3 -> s2 [74, 65535] { R16407 += 1, R16363 += 1, R16196 += 1, R16197 += 1 };
  s6 -> s8 [0, 65535] { R16407 += 1, R16363 += 1 };
  s6 -> s6 [0, 65535] { R16407 += 1, R16363 += 1, R16197 += 1, R16198 += 1 };
  s7 -> s6 [0, 65535] { R16407 += 1, R16363 += 1, R16197 += 1, R16198 += 1 };
  s7 -> s7 [0, 65535] { R16407 += 1, R16363 += 1, R16196 += 1, R16197 += 1 };
  s8 -> s8 [0, 65535] { R16407 += 1, R16363 += 1 };
  s8 -> s9 [0, 65535] { R16407 += 1 };
  s8 -> s10 [0, 65535];
  s9 -> s9 [0, 65535] { R16407 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s11 [0, 72] { R16407 += 1, R16363 += 1 };
  s11 -> s11 [0, 65535] { R16407 += 1 };
  s11 -> s10 [0, 65535];
  s11 -> s12 [73, 73] { R16407 += 1, R16363 += 1 };
  s11 -> s8 [73, 73] { R16407 += 1, R16363 += 1 };
  s11 -> s11 [74, 65535] { R16407 += 1, R16363 += 1 };
  s12 -> s12 [0, 65535] { R16407 += 1 };
  s12 -> s10 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 72] { R16409 += 1, R16365 += 1, R16306 += 1, R16307 += 1 };
  s0 -> s2 [0, 72] { R16409 += 1, R16365 += 1, R16307 += 1 };
  s0 -> s0 [0, 65535] { R16408 += 1, R16409 += 1 };
  s0 -> s3 [0, 65535] { R16409 += 1, R16364 += 1, R16365 += 1 };
  s0 -> s4 [73, 73] { R16409 += 1, R16365 += 1, R16307 += 1 };
  s0 -> s5 [73, 73] { R16409 += 1, R16365 += 1, R16307 += 1 };
  s0 -> s6 [73, 73] { R16409 += 1, R16365 += 1, R16306 += 1, R16307 += 1 };
  s0 -> s7 [73, 73] { R16409 += 1, R16365 += 1, R16306 += 1, R16307 += 1 };
  s0 -> s2 [74, 80] { R16409 += 1, R16365 += 1, R16307 += 1 };
  s0 -> s1 [74, 65535] { R16409 += 1, R16365 += 1, R16306 += 1, R16307 += 1 };
  s0 -> s2 [90, 65535] { R16409 += 1, R16365 += 1, R16307 += 1 };
  s1 -> s1 [0, 72] { R16409 += 1, R16365 += 1, R16306 += 1, R16307 += 1 };
  s1 -> s2 [0, 72] { R16409 += 1, R16365 += 1, R16307 += 1 };
  s1 -> s4 [73, 73] { R16409 += 1, R16365 += 1, R16307 += 1 };
  s1 -> s5 [73, 73] { R16409 += 1, R16365 += 1, R16307 += 1 };
  s1 -> s6 [73, 73] { R16409 += 1, R16365 += 1, R16306 += 1, R16307 += 1 };
  s1 -> s7 [73, 73] { R16409 += 1, R16365 += 1, R16306 += 1, R16307 += 1 };
  s1 -> s2 [74, 80] { R16409 += 1, R16365 += 1, R16307 += 1 };
  s1 -> s1 [74, 65535] { R16409 += 1, R16365 += 1, R16306 += 1, R16307 += 1 };
  s1 -> s2 [90, 65535] { R16409 += 1, R16365 += 1, R16307 += 1 };
  s2 -> s2 [0, 72] { R16409 += 1, R16365 += 1, R16307 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R16409 += 1 };
  s2 -> s4 [73, 73] { R16409 += 1, R16365 += 1 };
  s2 -> s5 [73, 73] { R16409 += 1, R16365 += 1 };
  s2 -> s2 [74, 80] { R16409 += 1, R16365 += 1, R16307 += 1 };
  s2 -> s2 [74, 65535] { R16409 += 1, R16365 += 1 };
  s2 -> s2 [90, 65535] { R16409 += 1, R16365 += 1, R16307 += 1 };
  s3 -> s1 [0, 72] { R16409 += 1, R16365 += 1, R16306 += 1, R16307 += 1 };
  s3 -> s2 [0, 72] { R16409 += 1, R16365 += 1, R16307 += 1 };
  s3 -> s3 [0, 65535] { R16409 += 1, R16364 += 1, R16365 += 1 };
  s3 -> s4 [73, 73] { R16409 += 1, R16365 += 1, R16307 += 1 };
  s3 -> s5 [73, 73] { R16409 += 1, R16365 += 1, R16307 += 1 };
  s3 -> s6 [73, 73] { R16409 += 1, R16365 += 1, R16306 += 1, R16307 += 1 };
  s3 -> s7 [73, 73] { R16409 += 1, R16365 += 1, R16306 += 1, R16307 += 1 };
  s3 -> s2 [74, 80] { R16409 += 1, R16365 += 1, R16307 += 1 };
  s3 -> s1 [74, 65535] { R16409 += 1, R16365 += 1, R16306 += 1, R16307 += 1 };
  s3 -> s2 [90, 65535] { R16409 += 1, R16365 += 1, R16307 += 1 };
  s4 -> s4 [0, 80] { R16409 += 1, R16365 += 1, R16307 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s4 [0, 65535] { R16409 += 1, R16365 += 1 };
  s4 -> s9 [0, 65535] { R16409 += 1 };
  s4 -> s4 [90, 65535] { R16409 += 1, R16365 += 1, R16307 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s5 [0, 65535] { R16409 += 1 };
  s7 -> s4 [0, 80] { R16409 += 1, R16365 += 1, R16307 += 1 };
  s7 -> s7 [0, 65535] { R16409 += 1, R16365 += 1, R16306 += 1, R16307 += 1 };
  s7 -> s4 [90, 65535] { R16409 += 1, R16365 += 1, R16307 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R16409 += 1 };
  accepting s4, s8, s5, s2, s9;
};
};
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [113, 113];
  accepting s1;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
constraint R2 = R16409 && R20 - R16409 = -1 && R21 = R16409 && R22 - R16409 = -1 && R23 = R16409 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R15351 + -1*R15349 - R53 = 0 && R52 + R15350 + R15348 = 0 && R16350 = 0 && R16351 = 0 && R16356 = 0 && R16357 = 0 && R16358 = 0 && R16359 = 0 && R16360 = 0 && R16361 = 0 && R16362 = 0 && R16363 = 0 && R16364 = 0 && R16365 = 0 && R16366 = 0 && R16367 = R16409 && R16368 = 0 && R16369 = R16409 && R16370 = 0 && R16371 = R16409 && R16372 = 0 && R16373 = R16409 && R16374 = 0 && R16375 = R16409 && R16376 = 0 && R16377 = R16409 && R16378 = 0 && R16379 = R16409 && R16380 = 0 && R16381 = R16409 && R16382 = 0 && R16383 = R16409 && R16384 = 0 && R16385 = R16409 && R16386 = 0 && R16387 = R16409 && R16388 = 0 && R16389 = R16409 && R16390 = 0 && R16391 = R16409 && R16392 = 0 && R16393 = R16409 && R16394 = 0 && R16395 = R16409 && R16396 = 0 && R16397 = R16409 && R16398 = 0 && R16399 = R16409 && R16400 = 0 && R16401 = R16409 && R16402 = 0 && R16403 = R16409 && R16404 = 0 && R16405 = R16409 && R16406 = 0 && R16407 = R16409 && R16408 = 0 && -1 < R1 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R15351 + -1*R15349 - R53 < 1 && 0 < R16409 && (R1 != 0 || R17 = 0 || (R16310 = 0 && R16311 = 0)) && (R1 != 0 || R17 = 0 || (R16312 = 0 && R16313 = 0)) && (R1 != 0 || R17 = 0 || (R16314 = 0 && R16315 = 0)) && (R1 != 0 || R17 = 0 || (R16316 = 0 && R16317 = 0)) && (R1 != 0 || R17 = 0 || (R16318 = 0 && R16319 = 0)) && (R1 != 0 || R17 = 0 || (R16320 = 0 && R16321 = 0)) && (R1 != 0 || R17 = 0 || (R16322 = 0 && R16323 = 0)) && (R1 != 0 || R17 = 0 || (R16324 = 0 && R16325 = 0)) && (R1 != 0 || R17 = 0 || (R16326 = 0 && R16327 = 0)) && (R1 != 0 || R17 = 0 || (R16328 = 0 && R16329 = 0)) && (R48 + R15347 + R15344 != 0 || ((R42 + R11524 + R11522 != 0 || R43 + R11525 + R11523 + -1*R15351 + -1*R15349 - R53 = 0 || R53 + R15351 + R15349 < 1) && (R42 + R11524 + R11522 = 0 || R53 + R15351 + R15349 < 1))) && (R48 + R15347 + R15344 != 0 || ((R46 + R15345 + R15342 != 0 || R47 + R15346 + R15343 + -1*R15351 + -1*R15349 - R53 = 0 || R53 + R15351 + R15349 < 1) && (R46 + R15345 + R15342 = 0 || R53 + R15351 + R15349 < 1))) && (R16310 != 0 || R1 = R16311 || R1 < 1) && (R16312 != 0 || R1 = R16313 || R1 < 1) && (R16314 != 0 || R1 = R16315 || R1 < 1) && (R16316 != 0 || R1 = R16317 || R1 < 1) && (R16318 != 0 || R1 = R16319 || R1 < 1) && (R16320 != 0 || R1 = R16321 || R1 < 1) && (R16322 != 0 || R1 = R16323 || R1 < 1) && (R16324 != 0 || R1 = R16325 || R1 < 1) && (R16326 != 0 || R1 = R16327 || R1 < 1) && (R16328 != 0 || R1 = R16329 || R1 < 1) && (R18 = 0 || (R16348 = 0 && R16349 = 0)) && (R18 = 0 || (R16352 = 0 && R16353 = 0)) && (R18 = 0 || (R16354 = 0 && R16355 = 0)) && (R19 = 0 || (R16330 = 0 && R16331 = 0)) && (R19 = 0 || (R16332 = 0 && R16333 = 0)) && (R19 = 0 || (R16334 = 0 && R16335 = 0)) && (R19 = 0 || (R16336 = 0 && R16337 = 0)) && (R19 = 0 || (R16338 = 0 && R16339 = 0)) && (R19 = 0 || (R16340 = 0 && R16341 = 0)) && (R19 = 0 || (R16342 = 0 && R16343 = 0)) && (R19 = 0 || (R16344 = 0 && R16345 = 0)) && (R19 = 0 || (R16346 = 0 && R16347 = 0)) && (R48 + R15347 + R15344 = 0 || (R42 + R11524 + R11522 = 0 && R43 + R11525 + R11523 + -1*R15351 + -1*R15349 - R53 = 0)) && (R48 + R15347 + R15344 = 0 || (R46 + R15345 + R15342 = 0 && R47 + R15346 + R15343 + -1*R15351 + -1*R15349 - R53 = 0)) && (R58 + R16201 + R16198 = 0 || (R56 + R16199 + R16196 = 0 && R57 + R16200 + R16197 = 0)) && (R58 + R16201 + R16198 = 0 || (R62 + R16308 + R16306 = 0 && R63 + R16309 + R16307 = 0)) && (R16310 = 0 || R1 < 1) && (R16312 = 0 || R1 < 1) && (R16314 = 0 || R1 < 1) && (R16316 = 0 || R1 < 1) && (R16318 = 0 || R1 < 1) && (R16320 = 0 || R1 < 1) && (R16322 = 0 || R1 < 1) && (R16324 = 0 || R1 < 1) && (R16326 = 0 || R1 < 1) && (R16328 = 0 || R1 < 1);
// End of Parikh automata intersection problem
