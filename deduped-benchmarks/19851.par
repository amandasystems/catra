// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R12, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R298, R299, R3, R300, R301, R302, R303, R304, R305, R306, R307, R308, R309, R310, R311, R312, R313, R314, R315, R316, R317, R318, R319, R320, R321, R322, R323, R324, R325, R326, R327, R328, R329, R330, R331, R332, R333, R334, R335, R336, R337, R338, R339, R340, R341, R342, R343, R344, R345, R346, R347, R348, R349, R350, R351, R352, R353, R354, R355, R356, R357, R358, R359, R360, R361, R362, R363, R364, R365, R366, R367, R368, R369, R370, R371, R372, R373, R374, R375, R376, R377, R378, R379, R38, R380, R381, R382, R383, R384, R385, R386, R387, R388, R389, R390, R391, R392, R393, R394, R395, R396, R397, R398, R399, R4, R40, R400, R401, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R70, R71, R72, R73, R74, R75, R76, R77, R78, R79, R8, R80, R81, R82, R83, R84, R85, R86, R87, R88, R89;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 72];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [73, 73];
  s0 -> s1 [74, 65535];
  s1 -> s1 [0, 72];
  s1 -> s2 [73, 73];
  s1 -> s1 [74, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R21 += 1 };
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R25 += 1 };
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R323 += 1, R19 += 1 };
  s0 -> s0 [0, 65535] { R322 += 1, R323 += 1 };
  s1 -> s1 [0, 65535] { R323 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 72] { R325 += 1 };
  s0 -> s0 [0, 65535] { R324 += 1, R325 += 1 };
  s0 -> s2 [73, 73] { R325 += 1 };
  s0 -> s3 [73, 73] { R325 += 1 };
  s0 -> s1 [82, 65535] { R325 += 1 };
  s1 -> s1 [0, 72] { R325 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R325 += 1 };
  s1 -> s3 [73, 73] { R325 += 1 };
  s1 -> s1 [82, 65535] { R325 += 1 };
  s2 -> s2 [0, 73] { R325 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [82, 65535] { R325 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 72] { R327 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R326 += 1, R327 += 1 };
  s0 -> s2 [73, 73] { R327 += 1, R38 += 1 };
  s0 -> s3 [73, 73] { R327 += 1, R38 += 1 };
  s0 -> s1 [74, 65535] { R327 += 1, R38 += 1 };
  s1 -> s1 [0, 72] { R327 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R327 += 1, R38 += 1 };
  s1 -> s3 [73, 73] { R327 += 1, R38 += 1 };
  s1 -> s1 [74, 65535] { R327 += 1, R38 += 1 };
  s2 -> s2 [0, 65535] { R327 += 1, R38 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 72] { R329 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R328 += 1, R329 += 1 };
  s0 -> s2 [73, 73] { R329 += 1, R40 += 1 };
  s0 -> s3 [73, 73] { R329 += 1, R40 += 1 };
  s0 -> s1 [74, 65535] { R329 += 1, R40 += 1 };
  s1 -> s1 [0, 72] { R329 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R329 += 1, R40 += 1 };
  s1 -> s3 [73, 73] { R329 += 1, R40 += 1 };
  s1 -> s1 [74, 65535] { R329 += 1, R40 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R329 += 1, R40 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 72] { R331 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R330 += 1, R331 += 1 };
  s0 -> s2 [73, 73] { R331 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [73, 73] { R331 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [74, 65535] { R331 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 72] { R331 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R331 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [73, 73] { R331 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [74, 65535] { R331 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R331 += 1, R42 += 1, R43 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 72] { R333 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R332 += 1, R333 += 1 };
  s0 -> s2 [73, 73] { R333 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [73, 73] { R333 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [74, 65535] { R333 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 72] { R333 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R333 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [73, 73] { R333 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [74, 65535] { R333 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R333 += 1, R46 += 1, R47 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 72] { R335 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R334 += 1, R335 += 1 };
  s0 -> s2 [73, 73] { R335 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [73, 73] { R335 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [74, 65535] { R335 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 72] { R335 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R335 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [73, 73] { R335 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [74, 65535] { R335 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R335 += 1, R52 += 1, R53 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 72] { R337 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R336 += 1, R337 += 1 };
  s0 -> s2 [73, 73] { R337 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [73, 73] { R337 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [74, 65535] { R337 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 72] { R337 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R337 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [73, 73] { R337 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [74, 65535] { R337 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R337 += 1, R56 += 1, R57 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 72] { R339 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R338 += 1, R339 += 1 };
  s0 -> s2 [73, 73] { R339 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [73, 73] { R339 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [74, 65535] { R339 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 72] { R339 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R339 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [73, 73] { R339 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [74, 65535] { R339 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535] { R339 += 1, R62 += 1, R63 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 72] { R359 += 1 };
  s0 -> s0 [0, 65535] { R358 += 1, R359 += 1 };
  s0 -> s2 [73, 73] { R359 += 1 };
  s0 -> s1 [74, 65535] { R359 += 1 };
  s1 -> s1 [0, 72] { R359 += 1 };
  s1 -> s2 [73, 73] { R359 += 1 };
  s1 -> s1 [74, 65535] { R359 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R359 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R361 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R360 += 1, R361 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R361 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 72] { R363 += 1 };
  s0 -> s0 [0, 65535] { R362 += 1, R363 += 1 };
  s0 -> s2 [0, 65535] { R363 += 1, R8 += 1 };
  s0 -> s3 [73, 73] { R363 += 1 };
  s0 -> s1 [74, 65535] { R363 += 1 };
  s1 -> s1 [0, 72] { R363 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [73, 73] { R363 += 1 };
  s1 -> s1 [74, 65535] { R363 += 1 };
  s2 -> s1 [0, 72] { R363 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R363 += 1, R8 += 1 };
  s2 -> s3 [73, 73] { R363 += 1 };
  s2 -> s1 [74, 65535] { R363 += 1 };
  s3 -> s3 [0, 65535] { R363 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 72] { R365 += 1, R303 += 1 };
  s0 -> s0 [0, 65535] { R364 += 1, R365 += 1 };
  s0 -> s2 [0, 65535] { R365 += 1, R302 += 1, R303 += 1 };
  s0 -> s1 [74, 65535] { R365 += 1, R303 += 1 };
  s1 -> s1 [0, 72] { R365 += 1, R303 += 1 };
  s1 -> s1 [0, 65535] { R365 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [74, 65535] { R365 += 1, R303 += 1 };
  s2 -> s1 [0, 72] { R365 += 1, R303 += 1 };
  s2 -> s2 [0, 65535] { R365 += 1, R302 += 1, R303 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [74, 65535] { R365 += 1, R303 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R367 += 1, R304 += 1, R305 += 1 };
  s0 -> s0 [0, 65535] { R366 += 1, R367 += 1 };
  s0 -> s2 [0, 65535] { R367 += 1, R305 += 1, R17 += 1 };
  s1 -> s1 [0, 65535] { R367 += 1, R304 += 1, R305 += 1 };
  s1 -> s2 [0, 65535] { R367 += 1, R305 += 1, R17 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R367 += 1, R305 += 1, R17 += 1 };
  s2 -> s3 [0, 65535] { R367 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R367 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 73] { R369 += 1, R307 += 1 };
  s0 -> s2 [0, 65535] { R369 += 1, R306 += 1, R307 += 1 };
  s0 -> s0 [0, 65535] { R368 += 1, R369 += 1 };
  s0 -> s1 [81, 65535] { R369 += 1, R307 += 1 };
  s1 -> s1 [0, 73] { R369 += 1, R307 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R369 += 1 };
  s1 -> s1 [81, 65535] { R369 += 1, R307 += 1 };
  s2 -> s1 [0, 73] { R369 += 1, R307 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R369 += 1, R306 += 1, R307 += 1 };
  s2 -> s1 [81, 65535] { R369 += 1, R307 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R371 += 1, R308 += 1, R309 += 1 };
  s0 -> s2 [0, 65535] { R371 += 1, R309 += 1, R67 += 1 };
  s0 -> s0 [0, 65535] { R370 += 1, R371 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R371 += 1, R308 += 1, R309 += 1 };
  s1 -> s2 [0, 65535] { R371 += 1, R309 += 1, R67 += 1 };
  s2 -> s3 [0, 65535] { R371 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R371 += 1, R309 += 1, R67 += 1 };
  s3 -> s3 [0, 65535] { R371 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 80] { R373 += 1, R311 += 1 };
  s0 -> s2 [0, 65535] { R373 += 1, R310 += 1, R311 += 1 };
  s0 -> s0 [0, 65535] { R372 += 1, R373 += 1 };
  s0 -> s3 [0, 65535] { R373 += 1, R311 += 1, R69 += 1 };
  s0 -> s1 [82, 65535] { R373 += 1, R311 += 1 };
  s1 -> s1 [0, 80] { R373 += 1, R311 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R373 += 1 };
  s1 -> s1 [82, 65535] { R373 += 1, R311 += 1 };
  s2 -> s1 [0, 80] { R373 += 1, R311 += 1 };
  s2 -> s2 [0, 65535] { R373 += 1, R310 += 1, R311 += 1 };
  s2 -> s3 [0, 65535] { R373 += 1, R311 += 1, R69 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [82, 65535] { R373 += 1, R311 += 1 };
  s3 -> s1 [0, 80] { R373 += 1, R311 += 1 };
  s3 -> s4 [0, 65535] { R373 += 1 };
  s3 -> s3 [0, 65535] { R373 += 1, R311 += 1, R69 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [82, 65535] { R373 += 1, R311 += 1 };
  s4 -> s4 [0, 65535] { R373 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 80] { R375 += 1, R313 += 1, R73 += 1 };
  s0 -> s2 [0, 65535] { R375 += 1, R312 += 1, R313 += 1 };
  s0 -> s3 [0, 65535] { R375 += 1, R313 += 1, R72 += 1, R73 += 1 };
  s0 -> s0 [0, 65535] { R374 += 1, R375 += 1 };
  s0 -> s1 [82, 65535] { R375 += 1, R313 += 1, R73 += 1 };
  s1 -> s1 [0, 80] { R375 += 1, R313 += 1, R73 += 1 };
  s1 -> s1 [0, 65535] { R375 += 1, R313 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R375 += 1 };
  s1 -> s1 [82, 65535] { R375 += 1, R313 += 1, R73 += 1 };
  s2 -> s1 [0, 80] { R375 += 1, R313 += 1, R73 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R375 += 1, R312 += 1, R313 += 1 };
  s2 -> s3 [0, 65535] { R375 += 1, R313 += 1, R72 += 1, R73 += 1 };
  s2 -> s1 [82, 65535] { R375 += 1, R313 += 1, R73 += 1 };
  s3 -> s1 [0, 80] { R375 += 1, R313 += 1, R73 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R375 += 1 };
  s3 -> s3 [0, 65535] { R375 += 1, R313 += 1, R72 += 1, R73 += 1 };
  s3 -> s1 [82, 65535] { R375 += 1, R313 += 1, R73 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R375 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R377 += 1, R315 += 1, R78 += 1, R79 += 1 };
  s0 -> s0 [0, 65535] { R376 += 1, R377 += 1 };
  s0 -> s2 [0, 65535] { R377 += 1, R315 += 1, R77 += 1, R78 += 1 };
  s0 -> s3 [0, 65535] { R377 += 1, R314 += 1, R315 += 1 };
  s1 -> s1 [0, 65535] { R377 += 1, R315 += 1, R78 += 1, R79 += 1 };
  s1 -> s5 [0, 65535] { R377 += 1 };
  s1 -> s6 [0, 65535] { R377 += 1, R315 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R377 += 1, R315 += 1, R78 += 1, R79 += 1 };
  s2 -> s5 [0, 65535] { R377 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R377 += 1, R315 += 1, R77 += 1, R78 += 1 };
  s3 -> s1 [0, 65535] { R377 += 1, R315 += 1, R78 += 1, R79 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R377 += 1, R315 += 1, R77 += 1, R78 += 1 };
  s3 -> s3 [0, 65535] { R377 += 1, R314 += 1, R315 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R377 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R377 += 1 };
  s6 -> s6 [0, 65535] { R377 += 1, R315 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 81] { R379 += 1, R317 += 1, R83 += 1 };
  s0 -> s0 [0, 65535] { R378 += 1, R379 += 1 };
  s0 -> s1 [0, 65535] { R379 += 1, R317 += 1 };
  s0 -> s2 [0, 65535] { R379 += 1, R316 += 1, R317 += 1 };
  s0 -> s1 [89, 65535] { R379 += 1, R317 += 1, R83 += 1 };
  s1 -> s1 [0, 81] { R379 += 1, R317 += 1, R83 += 1 };
  s1 -> s1 [0, 65535] { R379 += 1, R317 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R379 += 1 };
  s1 -> s1 [89, 65535] { R379 += 1, R317 += 1, R83 += 1 };
  s2 -> s1 [0, 81] { R379 += 1, R317 += 1, R83 += 1 };
  s2 -> s1 [0, 65535] { R379 += 1, R317 += 1 };
  s2 -> s2 [0, 65535] { R379 += 1, R316 += 1, R317 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [89, 65535] { R379 += 1, R317 += 1, R83 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R379 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R381 += 1, R319 += 1, R87 += 1, R88 += 1 };
  s0 -> s2 [0, 65535] { R381 += 1, R319 += 1, R88 += 1, R89 += 1 };
  s0 -> s3 [0, 65535] { R381 += 1, R318 += 1, R319 += 1 };
  s0 -> s0 [0, 65535] { R380 += 1, R381 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R381 += 1 };
  s1 -> s1 [0, 65535] { R381 += 1, R319 += 1, R87 += 1, R88 += 1 };
  s1 -> s2 [0, 65535] { R381 += 1, R319 += 1, R88 += 1, R89 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R381 += 1 };
  s2 -> s6 [0, 65535] { R381 += 1, R319 += 1 };
  s2 -> s2 [0, 65535] { R381 += 1, R319 += 1, R88 += 1, R89 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R381 += 1, R319 += 1, R87 += 1, R88 += 1 };
  s3 -> s2 [0, 65535] { R381 += 1, R319 += 1, R88 += 1, R89 += 1 };
  s3 -> s3 [0, 65535] { R381 += 1, R318 += 1, R319 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R381 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R381 += 1 };
  s6 -> s6 [0, 65535] { R381 += 1, R319 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 81] { R383 += 1, R321 += 1, R301 += 1 };
  s0 -> s0 [0, 65535] { R382 += 1, R383 += 1 };
  s0 -> s2 [0, 65535] { R383 += 1, R320 += 1, R321 += 1 };
  s0 -> s1 [0, 65535] { R383 += 1, R321 += 1 };
  s0 -> s1 [90, 65535] { R383 += 1, R321 += 1, R301 += 1 };
  s1 -> s1 [0, 81] { R383 += 1, R321 += 1, R301 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R383 += 1 };
  s1 -> s1 [0, 65535] { R383 += 1, R321 += 1 };
  s1 -> s1 [90, 65535] { R383 += 1, R321 += 1, R301 += 1 };
  s2 -> s1 [0, 81] { R383 += 1, R321 += 1, R301 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R383 += 1, R320 += 1, R321 += 1 };
  s2 -> s1 [0, 65535] { R383 += 1, R321 += 1 };
  s2 -> s1 [90, 65535] { R383 += 1, R321 += 1, R301 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R383 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R385 += 1, R340 += 1, R341 += 1 };
  s0 -> s0 [0, 65535] { R384 += 1, R385 += 1 };
  s0 -> s2 [0, 65535] { R385 += 1, R341 += 1, R18 += 1 };
  s1 -> s1 [0, 65535] { R385 += 1, R340 += 1, R341 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R385 += 1, R341 += 1, R18 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R385 += 1 };
  s2 -> s2 [0, 65535] { R385 += 1, R341 += 1, R18 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R385 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 72] { R387 += 1, R343 += 1 };
  s0 -> s0 [0, 65535] { R386 += 1, R387 += 1 };
  s0 -> s2 [0, 65535] { R387 += 1, R342 += 1, R343 += 1 };
  s0 -> s3 [73, 73] { R387 += 1, R343 += 1 };
  s0 -> s4 [73, 73] { R387 += 1, R343 += 1 };
  s0 -> s5 [81, 81] { R387 += 1, R343 += 1 };
  s0 -> s1 [82, 65535] { R387 += 1, R343 += 1 };
  s1 -> s1 [0, 72] { R387 += 1, R343 += 1 };
  s1 -> s3 [73, 73] { R387 += 1, R343 += 1 };
  s1 -> s4 [73, 73] { R387 += 1, R343 += 1 };
  s1 -> s5 [81, 81] { R387 += 1, R343 += 1 };
  s1 -> s1 [82, 65535] { R387 += 1, R343 += 1 };
  s2 -> s1 [0, 72] { R387 += 1, R343 += 1 };
  s2 -> s2 [0, 65535] { R387 += 1, R342 += 1, R343 += 1 };
  s2 -> s3 [73, 73] { R387 += 1, R343 += 1 };
  s2 -> s4 [73, 73] { R387 += 1, R343 += 1 };
  s2 -> s5 [81, 81] { R387 += 1, R343 += 1 };
  s2 -> s1 [82, 65535] { R387 += 1, R343 += 1 };
  s4 -> s4 [0, 73] { R387 += 1, R343 += 1 };
  s4 -> s7 [81, 81] { R387 += 1, R343 += 1 };
  s4 -> s4 [82, 65535] { R387 += 1, R343 += 1 };
  s5 -> s5 [0, 72] { R387 += 1, R343 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R387 += 1 };
  s5 -> s7 [73, 73] { R387 += 1, R343 += 1 };
  s5 -> s8 [73, 73] { R387 += 1, R343 += 1 };
  s5 -> s5 [81, 65535] { R387 += 1, R343 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 73] { R387 += 1, R343 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R387 += 1 };
  s7 -> s7 [81, 65535] { R387 += 1, R343 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R387 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 72] { R389 += 1, R345 += 1, R66 += 1 };
  s0 -> s2 [0, 65535] { R389 += 1, R344 += 1, R345 += 1 };
  s0 -> s0 [0, 65535] { R388 += 1, R389 += 1 };
  s0 -> s3 [73, 73] { R389 += 1, R345 += 1, R66 += 1 };
  s0 -> s4 [73, 73] { R389 += 1, R345 += 1, R66 += 1 };
  s0 -> s1 [74, 65535] { R389 += 1, R345 += 1, R66 += 1 };
  s1 -> s1 [0, 72] { R389 += 1, R345 += 1, R66 += 1 };
  s1 -> s1 [0, 65535] { R389 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R389 += 1, R345 += 1, R66 += 1 };
  s1 -> s4 [73, 73] { R389 += 1, R345 += 1, R66 += 1 };
  s1 -> s1 [74, 65535] { R389 += 1, R345 += 1, R66 += 1 };
  s2 -> s1 [0, 72] { R389 += 1, R345 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R389 += 1, R344 += 1, R345 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R389 += 1, R345 += 1, R66 += 1 };
  s2 -> s4 [73, 73] { R389 += 1, R345 += 1, R66 += 1 };
  s2 -> s1 [74, 65535] { R389 += 1, R345 += 1, R66 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R389 += 1, R345 += 1, R66 += 1 };
  s3 -> s6 [0, 65535] { R389 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R389 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R389 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 72] { R391 += 1, R347 += 1, R68 += 1 };
  s0 -> s0 [0, 65535] { R390 += 1, R391 += 1 };
  s0 -> s2 [0, 65535] { R391 += 1, R346 += 1, R347 += 1 };
  s0 -> s3 [73, 73] { R391 += 1, R347 += 1, R68 += 1 };
  s0 -> s4 [73, 73] { R391 += 1, R347 += 1, R68 += 1 };
  s0 -> s1 [74, 65535] { R391 += 1, R347 += 1, R68 += 1 };
  s1 -> s1 [0, 72] { R391 += 1, R347 += 1, R68 += 1 };
  s1 -> s1 [0, 65535] { R391 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R391 += 1, R347 += 1, R68 += 1 };
  s1 -> s4 [73, 73] { R391 += 1, R347 += 1, R68 += 1 };
  s1 -> s1 [74, 65535] { R391 += 1, R347 += 1, R68 += 1 };
  s2 -> s1 [0, 72] { R391 += 1, R347 += 1, R68 += 1 };
  s2 -> s2 [0, 65535] { R391 += 1, R346 += 1, R347 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R391 += 1, R347 += 1, R68 += 1 };
  s2 -> s4 [73, 73] { R391 += 1, R347 += 1, R68 += 1 };
  s2 -> s1 [74, 65535] { R391 += 1, R347 += 1, R68 += 1 };
  s3 -> s3 [0, 65535] { R391 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R391 += 1, R347 += 1, R68 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R391 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R391 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 72] { R393 += 1, R349 += 1, R70 += 1, R71 += 1 };
  s0 -> s0 [0, 65535] { R392 += 1, R393 += 1 };
  s0 -> s2 [0, 65535] { R393 += 1, R348 += 1, R349 += 1 };
  s0 -> s3 [73, 73] { R393 += 1, R349 += 1, R70 += 1, R71 += 1 };
  s0 -> s4 [73, 73] { R393 += 1, R349 += 1, R70 += 1, R71 += 1 };
  s0 -> s1 [74, 65535] { R393 += 1, R349 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 72] { R393 += 1, R349 += 1, R70 += 1, R71 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R393 += 1 };
  s1 -> s3 [73, 73] { R393 += 1, R349 += 1, R70 += 1, R71 += 1 };
  s1 -> s4 [73, 73] { R393 += 1, R349 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [74, 65535] { R393 += 1, R349 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [0, 72] { R393 += 1, R349 += 1, R70 += 1, R71 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R393 += 1, R348 += 1, R349 += 1 };
  s2 -> s3 [73, 73] { R393 += 1, R349 += 1, R70 += 1, R71 += 1 };
  s2 -> s4 [73, 73] { R393 += 1, R349 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [74, 65535] { R393 += 1, R349 += 1, R70 += 1, R71 += 1 };
  s3 -> s3 [0, 65535] { R393 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R393 += 1, R349 += 1, R70 += 1, R71 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R393 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R393 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 72] { R395 += 1, R351 += 1, R74 += 1, R75 += 1 };
  s0 -> s0 [0, 65535] { R394 += 1, R395 += 1 };
  s0 -> s2 [0, 65535] { R395 += 1, R350 += 1, R351 += 1 };
  s0 -> s3 [73, 73] { R395 += 1, R351 += 1, R74 += 1, R75 += 1 };
  s0 -> s4 [73, 73] { R395 += 1, R351 += 1, R74 += 1, R75 += 1 };
  s0 -> s1 [74, 65535] { R395 += 1, R351 += 1, R74 += 1, R75 += 1 };
  s1 -> s1 [0, 72] { R395 += 1, R351 += 1, R74 += 1, R75 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R395 += 1 };
  s1 -> s3 [73, 73] { R395 += 1, R351 += 1, R74 += 1, R75 += 1 };
  s1 -> s4 [73, 73] { R395 += 1, R351 += 1, R74 += 1, R75 += 1 };
  s1 -> s1 [74, 65535] { R395 += 1, R351 += 1, R74 += 1, R75 += 1 };
  s2 -> s1 [0, 72] { R395 += 1, R351 += 1, R74 += 1, R75 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R395 += 1, R350 += 1, R351 += 1 };
  s2 -> s3 [73, 73] { R395 += 1, R351 += 1, R74 += 1, R75 += 1 };
  s2 -> s4 [73, 73] { R395 += 1, R351 += 1, R74 += 1, R75 += 1 };
  s2 -> s1 [74, 65535] { R395 += 1, R351 += 1, R74 += 1, R75 += 1 };
  s3 -> s3 [0, 65535] { R395 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R395 += 1 };
  s4 -> s4 [0, 65535] { R395 += 1, R351 += 1, R74 += 1, R75 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R395 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 72] { R397 += 1, R353 += 1, R80 += 1, R81 += 1 };
  s0 -> s2 [0, 72] { R397 += 1, R353 += 1, R81 += 1 };
  s0 -> s0 [0, 65535] { R396 += 1, R397 += 1 };
  s0 -> s3 [0, 65535] { R397 += 1, R352 += 1, R353 += 1 };
  s0 -> s4 [73, 73] { R397 += 1, R353 += 1, R80 += 1, R81 += 1 };
  s0 -> s5 [73, 73] { R397 += 1, R353 += 1, R81 += 1 };
  s0 -> s6 [73, 73] { R397 += 1, R353 += 1, R81 += 1 };
  s0 -> s7 [73, 73] { R397 += 1, R353 += 1, R80 += 1, R81 += 1 };
  s0 -> s2 [74, 81] { R397 += 1, R353 += 1, R81 += 1 };
  s0 -> s1 [74, 65535] { R397 += 1, R353 += 1, R80 += 1, R81 += 1 };
  s0 -> s8 [89, 89] { R397 += 1, R353 += 1, R81 += 1 };
  s0 -> s2 [90, 65535] { R397 += 1, R353 += 1, R81 += 1 };
  s1 -> s1 [0, 72] { R397 += 1, R353 += 1, R80 += 1, R81 += 1 };
  s1 -> s2 [0, 72] { R397 += 1, R353 += 1, R81 += 1 };
  s1 -> s4 [73, 73] { R397 += 1, R353 += 1, R80 += 1, R81 += 1 };
  s1 -> s5 [73, 73] { R397 += 1, R353 += 1, R81 += 1 };
  s1 -> s6 [73, 73] { R397 += 1, R353 += 1, R81 += 1 };
  s1 -> s7 [73, 73] { R397 += 1, R353 += 1, R80 += 1, R81 += 1 };
  s1 -> s2 [74, 81] { R397 += 1, R353 += 1, R81 += 1 };
  s1 -> s1 [74, 65535] { R397 += 1, R353 += 1, R80 += 1, R81 += 1 };
  s1 -> s8 [89, 89] { R397 += 1, R353 += 1, R81 += 1 };
  s1 -> s2 [90, 65535] { R397 += 1, R353 += 1, R81 += 1 };
  s2 -> s2 [0, 72] { R397 += 1, R353 += 1, R81 += 1 };
  s2 -> s5 [73, 73] { R397 += 1, R353 += 1, R81 += 1 };
  s2 -> s6 [73, 73] { R397 += 1, R353 += 1, R81 += 1 };
  s2 -> s2 [74, 81] { R397 += 1, R353 += 1, R81 += 1 };
  s2 -> s8 [89, 89] { R397 += 1, R353 += 1, R81 += 1 };
  s2 -> s2 [90, 65535] { R397 += 1, R353 += 1, R81 += 1 };
  s3 -> s1 [0, 72] { R397 += 1, R353 += 1, R80 += 1, R81 += 1 };
  s3 -> s2 [0, 72] { R397 += 1, R353 += 1, R81 += 1 };
  s3 -> s3 [0, 65535] { R397 += 1, R352 += 1, R353 += 1 };
  s3 -> s4 [73, 73] { R397 += 1, R353 += 1, R80 += 1, R81 += 1 };
  s3 -> s5 [73, 73] { R397 += 1, R353 += 1, R81 += 1 };
  s3 -> s6 [73, 73] { R397 += 1, R353 += 1, R81 += 1 };
  s3 -> s7 [73, 73] { R397 += 1, R353 += 1, R80 += 1, R81 += 1 };
  s3 -> s2 [74, 81] { R397 += 1, R353 += 1, R81 += 1 };
  s3 -> s1 [74, 65535] { R397 += 1, R353 += 1, R80 += 1, R81 += 1 };
  s3 -> s8 [89, 89] { R397 += 1, R353 += 1, R81 += 1 };
  s3 -> s2 [90, 65535] { R397 += 1, R353 += 1, R81 += 1 };
  s6 -> s6 [0, 81] { R397 += 1, R353 += 1, R81 += 1 };
  s6 -> s10 [89, 89] { R397 += 1, R353 += 1, R81 += 1 };
  s6 -> s6 [90, 65535] { R397 += 1, R353 += 1, R81 += 1 };
  s7 -> s6 [0, 81] { R397 += 1, R353 += 1, R81 += 1 };
  s7 -> s7 [0, 65535] { R397 += 1, R353 += 1, R80 += 1, R81 += 1 };
  s7 -> s10 [89, 89] { R397 += 1, R353 += 1, R81 += 1 };
  s7 -> s6 [90, 65535] { R397 += 1, R353 += 1, R81 += 1 };
  s8 -> s8 [0, 72] { R397 += 1, R353 += 1, R81 += 1 };
  s8 -> s8 [0, 65535] { R397 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [73, 73] { R397 += 1, R353 += 1 };
  s8 -> s11 [73, 73] { R397 += 1, R353 += 1 };
  s8 -> s8 [74, 81] { R397 += 1, R353 += 1, R81 += 1 };
  s8 -> s8 [74, 65535] { R397 += 1, R353 += 1 };
  s8 -> s8 [89, 65535] { R397 += 1, R353 += 1, R81 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 81] { R397 += 1, R353 += 1, R81 += 1 };
  s10 -> s10 [0, 65535] { R397 += 1, R353 += 1 };
  s10 -> s9 [0, 65535];
  s10 -> s12 [0, 65535] { R397 += 1 };
  s10 -> s10 [89, 65535] { R397 += 1, R353 += 1, R81 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R397 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R397 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 72] { R399 += 1, R355 += 1, R84 += 1, R85 += 1 };
  s0 -> s2 [0, 65535] { R399 += 1, R354 += 1, R355 += 1 };
  s0 -> s0 [0, 65535] { R398 += 1, R399 += 1 };
  s0 -> s3 [73, 73] { R399 += 1, R355 += 1, R84 += 1, R85 += 1 };
  s0 -> s4 [73, 73] { R399 += 1, R355 += 1, R84 += 1, R85 += 1 };
  s0 -> s1 [74, 65535] { R399 += 1, R355 += 1, R84 += 1, R85 += 1 };
  s1 -> s1 [0, 72] { R399 += 1, R355 += 1, R84 += 1, R85 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R399 += 1 };
  s1 -> s3 [73, 73] { R399 += 1, R355 += 1, R84 += 1, R85 += 1 };
  s1 -> s4 [73, 73] { R399 += 1, R355 += 1, R84 += 1, R85 += 1 };
  s1 -> s1 [74, 65535] { R399 += 1, R355 += 1, R84 += 1, R85 += 1 };
  s2 -> s1 [0, 72] { R399 += 1, R355 += 1, R84 += 1, R85 += 1 };
  s2 -> s2 [0, 65535] { R399 += 1, R354 += 1, R355 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R399 += 1, R355 += 1, R84 += 1, R85 += 1 };
  s2 -> s4 [73, 73] { R399 += 1, R355 += 1, R84 += 1, R85 += 1 };
  s2 -> s1 [74, 65535] { R399 += 1, R355 += 1, R84 += 1, R85 += 1 };
  s3 -> s3 [0, 65535] { R399 += 1, R355 += 1, R84 += 1, R85 += 1 };
  s3 -> s6 [0, 65535] { R399 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R399 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R399 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 72] { R401 += 1, R357 += 1, R298 += 1, R299 += 1 };
  s0 -> s2 [0, 72] { R401 += 1, R357 += 1, R299 += 1 };
  s0 -> s0 [0, 65535] { R400 += 1, R401 += 1 };
  s0 -> s3 [0, 65535] { R401 += 1, R356 += 1, R357 += 1 };
  s0 -> s4 [73, 73] { R401 += 1, R357 += 1, R298 += 1, R299 += 1 };
  s0 -> s5 [73, 73] { R401 += 1, R357 += 1, R299 += 1 };
  s0 -> s6 [73, 73] { R401 += 1, R357 += 1, R298 += 1, R299 += 1 };
  s0 -> s7 [73, 73] { R401 += 1, R357 += 1, R299 += 1 };
  s0 -> s2 [74, 80] { R401 += 1, R357 += 1, R299 += 1 };
  s0 -> s1 [74, 65535] { R401 += 1, R357 += 1, R298 += 1, R299 += 1 };
  s0 -> s8 [81, 81] { R401 += 1, R357 += 1, R299 += 1 };
  s0 -> s2 [90, 65535] { R401 += 1, R357 += 1, R299 += 1 };
  s1 -> s1 [0, 72] { R401 += 1, R357 += 1, R298 += 1, R299 += 1 };
  s1 -> s2 [0, 72] { R401 += 1, R357 += 1, R299 += 1 };
  s1 -> s4 [73, 73] { R401 += 1, R357 += 1, R298 += 1, R299 += 1 };
  s1 -> s5 [73, 73] { R401 += 1, R357 += 1, R299 += 1 };
  s1 -> s6 [73, 73] { R401 += 1, R357 += 1, R298 += 1, R299 += 1 };
  s1 -> s7 [73, 73] { R401 += 1, R357 += 1, R299 += 1 };
  s1 -> s2 [74, 80] { R401 += 1, R357 += 1, R299 += 1 };
  s1 -> s1 [74, 65535] { R401 += 1, R357 += 1, R298 += 1, R299 += 1 };
  s1 -> s8 [81, 81] { R401 += 1, R357 += 1, R299 += 1 };
  s1 -> s2 [90, 65535] { R401 += 1, R357 += 1, R299 += 1 };
  s2 -> s2 [0, 72] { R401 += 1, R357 += 1, R299 += 1 };
  s2 -> s5 [73, 73] { R401 += 1, R357 += 1 };
  s2 -> s7 [73, 73] { R401 += 1, R357 += 1 };
  s2 -> s2 [74, 80] { R401 += 1, R357 += 1, R299 += 1 };
  s2 -> s2 [74, 65535] { R401 += 1, R357 += 1 };
  s2 -> s8 [81, 81] { R401 += 1, R357 += 1, R299 += 1 };
  s2 -> s2 [90, 65535] { R401 += 1, R357 += 1, R299 += 1 };
  s3 -> s1 [0, 72] { R401 += 1, R357 += 1, R298 += 1, R299 += 1 };
  s3 -> s2 [0, 72] { R401 += 1, R357 += 1, R299 += 1 };
  s3 -> s3 [0, 65535] { R401 += 1, R356 += 1, R357 += 1 };
  s3 -> s4 [73, 73] { R401 += 1, R357 += 1, R298 += 1, R299 += 1 };
  s3 -> s5 [73, 73] { R401 += 1, R357 += 1, R299 += 1 };
  s3 -> s6 [73, 73] { R401 += 1, R357 += 1, R298 += 1, R299 += 1 };
  s3 -> s7 [73, 73] { R401 += 1, R357 += 1, R299 += 1 };
  s3 -> s2 [74, 80] { R401 += 1, R357 += 1, R299 += 1 };
  s3 -> s1 [74, 65535] { R401 += 1, R357 += 1, R298 += 1, R299 += 1 };
  s3 -> s8 [81, 81] { R401 += 1, R357 += 1, R299 += 1 };
  s3 -> s2 [90, 65535] { R401 += 1, R357 += 1, R299 += 1 };
  s6 -> s7 [0, 80] { R401 += 1, R357 += 1, R299 += 1 };
  s6 -> s6 [0, 65535] { R401 += 1, R357 += 1, R298 += 1, R299 += 1 };
  s6 -> s10 [81, 81] { R401 += 1, R357 += 1, R299 += 1 };
  s6 -> s7 [90, 65535] { R401 += 1, R357 += 1, R299 += 1 };
  s7 -> s7 [0, 80] { R401 += 1, R357 += 1, R299 += 1 };
  s7 -> s7 [0, 65535] { R401 += 1, R357 += 1 };
  s7 -> s10 [81, 81] { R401 += 1, R357 += 1, R299 += 1 };
  s7 -> s7 [90, 65535] { R401 += 1, R357 += 1, R299 += 1 };
  s8 -> s8 [0, 72] { R401 += 1, R357 += 1, R299 += 1 };
  s8 -> s8 [0, 65535] { R401 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [73, 73] { R401 += 1, R357 += 1 };
  s8 -> s11 [73, 73] { R401 += 1, R357 += 1 };
  s8 -> s8 [74, 81] { R401 += 1, R357 += 1, R299 += 1 };
  s8 -> s8 [74, 65535] { R401 += 1, R357 += 1 };
  s8 -> s8 [90, 65535] { R401 += 1, R357 += 1, R299 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 81] { R401 += 1, R357 += 1, R299 += 1 };
  s10 -> s10 [0, 65535] { R401 += 1, R357 += 1 };
  s10 -> s9 [0, 65535];
  s10 -> s12 [0, 65535] { R401 += 1 };
  s10 -> s10 [90, 65535] { R401 += 1, R357 += 1, R299 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R401 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R401 += 1 };
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [113, 113];
  accepting s1;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
constraint R2 = R401 && R20 - R401 = -1 && R21 = R401 && R22 - R401 = -1 && R23 = R401 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R83 + -1*R81 - R53 = 0 && R52 + R82 + R80 = 0 && R342 = 0 && R343 = 0 && R352 = 0 && R353 = 0 && R356 = 0 && R357 = 0 && R358 = 0 && R359 = R401 && R360 = 0 && R361 = R401 && R362 = 0 && R363 = R401 && R364 = 0 && R365 = R401 && R366 = 0 && R367 = R401 && R368 = 0 && R369 = R401 && R370 = 0 && R371 = R401 && R372 = 0 && R373 = R401 && R374 = 0 && R375 = R401 && R376 = 0 && R377 = R401 && R378 = 0 && R379 = R401 && R380 = 0 && R381 = R401 && R382 = 0 && R383 = R401 && R384 = 0 && R385 = R401 && R386 = 0 && R387 = R401 && R388 = 0 && R389 = R401 && R390 = 0 && R391 = R401 && R392 = 0 && R393 = R401 && R394 = 0 && R395 = R401 && R396 = 0 && R397 = R401 && R398 = 0 && R399 = R401 && R400 = 0 && -1 < R1 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R83 + -1*R81 - R53 < 1 && 0 < R401 && (R1 != 0 || R17 = 0 || (R302 = 0 && R303 = 0)) && (R1 != 0 || R17 = 0 || (R304 = 0 && R305 = 0)) && (R1 != 0 || R17 = 0 || (R306 = 0 && R307 = 0)) && (R1 != 0 || R17 = 0 || (R308 = 0 && R309 = 0)) && (R1 != 0 || R17 = 0 || (R310 = 0 && R311 = 0)) && (R1 != 0 || R17 = 0 || (R312 = 0 && R313 = 0)) && (R1 != 0 || R17 = 0 || (R314 = 0 && R315 = 0)) && (R1 != 0 || R17 = 0 || (R316 = 0 && R317 = 0)) && (R1 != 0 || R17 = 0 || (R318 = 0 && R319 = 0)) && (R1 != 0 || R17 = 0 || (R320 = 0 && R321 = 0)) && (R48 + R79 + R76 != 0 || ((R42 + R72 + R70 != 0 || R43 + R73 + R71 + -1*R83 + -1*R81 - R53 = 0 || R53 + R83 + R81 < 1) && (R42 + R72 + R70 = 0 || R53 + R83 + R81 < 1))) && (R48 + R79 + R76 != 0 || ((R46 + R77 + R74 != 0 || R47 + R78 + R75 + -1*R83 + -1*R81 - R53 = 0 || R53 + R83 + R81 < 1) && (R46 + R77 + R74 = 0 || R53 + R83 + R81 < 1))) && (R302 != 0 || R1 = R303 || R1 < 1) && (R304 != 0 || R1 = R305 || R1 < 1) && (R306 != 0 || R1 = R307 || R1 < 1) && (R308 != 0 || R1 = R309 || R1 < 1) && (R310 != 0 || R1 = R311 || R1 < 1) && (R312 != 0 || R1 = R313 || R1 < 1) && (R314 != 0 || R1 = R315 || R1 < 1) && (R316 != 0 || R1 = R317 || R1 < 1) && (R318 != 0 || R1 = R319 || R1 < 1) && (R320 != 0 || R1 = R321 || R1 < 1) && (R18 = 0 || (R340 = 0 && R341 = 0)) && (R18 = 0 || (R344 = 0 && R345 = 0)) && (R18 = 0 || (R346 = 0 && R347 = 0)) && (R18 = 0 || (R348 = 0 && R349 = 0)) && (R18 = 0 || (R350 = 0 && R351 = 0)) && (R18 = 0 || (R354 = 0 && R355 = 0)) && (R19 = 0 || (R322 = 0 && R323 = 0)) && (R19 = 0 || (R324 = 0 && R325 = 0)) && (R19 = 0 || (R326 = 0 && R327 = 0)) && (R19 = 0 || (R328 = 0 && R329 = 0)) && (R19 = 0 || (R330 = 0 && R331 = 0)) && (R19 = 0 || (R332 = 0 && R333 = 0)) && (R19 = 0 || (R334 = 0 && R335 = 0)) && (R19 = 0 || (R336 = 0 && R337 = 0)) && (R19 = 0 || (R338 = 0 && R339 = 0)) && (R48 + R79 + R76 = 0 || (R42 + R72 + R70 = 0 && R43 + R73 + R71 + -1*R83 + -1*R81 - R53 = 0)) && (R48 + R79 + R76 = 0 || (R46 + R77 + R74 = 0 && R47 + R78 + R75 + -1*R83 + -1*R81 - R53 = 0)) && (R58 + R89 + R86 = 0 || (R56 + R87 + R84 = 0 && R57 + R88 + R85 = 0)) && (R58 + R89 + R86 = 0 || (R62 + R300 + R298 = 0 && R63 + R301 + R299 = 0)) && (R302 = 0 || R1 < 1) && (R304 = 0 || R1 < 1) && (R306 = 0 || R1 < 1) && (R308 = 0 || R1 < 1) && (R310 = 0 || R1 < 1) && (R312 = 0 || R1 < 1) && (R314 = 0 || R1 < 1) && (R316 = 0 || R1 < 1) && (R318 = 0 || R1 < 1) && (R320 = 0 || R1 < 1);
// End of Parikh automata intersection problem
