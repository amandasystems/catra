// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R12, R13, R14, R15, R16, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R3, R4, R7, R8, R9;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [70, 70];
  s0 -> s0 [71, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [70, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R0 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R3 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 69];
  s0 -> s0 [0, 65535] { R4 += 1 };
  s0 -> s2 [70, 70];
  s0 -> s1 [71, 65535];
  s1 -> s1 [0, 69];
  s1 -> s2 [70, 70];
  s1 -> s1 [71, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R10 += 1 };
  s0 -> s0 [0, 65535] { R9 += 1, R10 += 1 };
  s0 -> s2 [9, 13] { R10 += 1 };
  s0 -> s1 [14, 31] { R10 += 1 };
  s0 -> s2 [32, 32] { R10 += 1 };
  s0 -> s1 [33, 65535] { R10 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R10 += 1 };
  s2 -> s1 [0, 65535] { R10 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s0 [0, 65535] { R11 += 1, R12 += 1 };
  s0 -> s1 [0, 65535] { R12 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R12 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R14 += 1 };
  s0 -> s0 [0, 65535] { R13 += 1, R14 += 1 };
  s0 -> s2 [9, 13] { R14 += 1 };
  s0 -> s1 [14, 31] { R14 += 1 };
  s0 -> s2 [32, 32] { R14 += 1 };
  s0 -> s1 [33, 65535] { R14 += 1 };
  s1 -> s1 [0, 65535] { R14 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R14 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s0 [0, 65535] { R15 += 1, R16 += 1 };
  s0 -> s1 [0, 65535] { R16 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R16 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 69] { R18 += 1 };
  s0 -> s0 [0, 65535] { R17 += 1, R18 += 1 };
  s0 -> s1 [71, 65535] { R18 += 1 };
  s1 -> s1 [0, 69] { R18 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [71, 65535] { R18 += 1 };
  accepting s0, s1;
};
automaton value2_9 {
  init s0;
  s0 -> s0 [0, 65535] { R19 += 1, R20 += 1 };
  s0 -> s1 [0, 65535] { R20 += 1, R7 += 1 };
  s1 -> s1 [0, 65535] { R20 += 1, R7 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 70] { R22 += 1 };
  s0 -> s0 [0, 65535] { R21 += 1, R22 += 1 };
  s0 -> s2 [76, 76] { R22 += 1 };
  s0 -> s1 [77, 65535] { R22 += 1 };
  s1 -> s1 [0, 70] { R22 += 1 };
  s1 -> s2 [76, 76] { R22 += 1 };
  s1 -> s1 [77, 65535] { R22 += 1 };
  s2 -> s2 [0, 70] { R22 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [76, 65535] { R22 += 1 };
  accepting s2;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 65535] { R24 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R23 += 1, R24 += 1 };
  s1 -> s1 [0, 65535] { R24 += 1, R8 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 69] { R26 += 1 };
  s0 -> s0 [0, 65535] { R25 += 1, R26 += 1 };
  s0 -> s2 [70, 70] { R26 += 1 };
  s0 -> s3 [70, 70] { R26 += 1 };
  s0 -> s1 [77, 65535] { R26 += 1 };
  s1 -> s1 [0, 69] { R26 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R26 += 1 };
  s1 -> s3 [70, 70] { R26 += 1 };
  s1 -> s1 [77, 65535] { R26 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 70] { R26 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [77, 65535] { R26 += 1 };
  accepting s0, s1, s2, s3;
};
};
synchronised {  // Automata constraining P34
automaton P34_0 {
  init s0;
  s0 -> s1 [102, 102];
  accepting s1;
};
};
constraint R0 = R22 && R9 - R22 = -1 && R10 = R22 && R11 - R22 = -1 && R12 = R22 && R13 = 0 && R14 = 1 && R15 = 0 && R16 = 1 && R17 = 0 && R18 = R22 && R19 = 0 && R20 = R22 && R21 = 0 && R3 < 1 && R4 < 1 && 0 < R22 && (R8 = 0 || (R23 = 0 && R24 = 0 && R25 = 0 && R26 = 0));
// End of Parikh automata intersection problem
