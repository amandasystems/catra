// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R1076, R1077, R1078, R1079, R1080, R1081, R1082, R1083, R1084, R1085, R1086, R1087, R1088, R1089, R1090, R1091, R1092, R1093, R1094, R1095, R1096, R1097, R1098, R1099, R1100, R1101, R1102, R1103, R1104, R1105, R1106, R1107, R1108, R1109, R1110, R1111, R1112, R1113, R1114, R1115, R1116, R1117, R1118, R1119, R1120, R1121, R1122, R1123, R1124, R1125, R1126, R1127, R1128, R1129, R1130, R1131, R1132, R1133, R1134, R1135, R1136, R1137, R1138, R1139, R1140, R1141, R1142, R1143, R1144, R1145, R1146, R1147, R12, R14, R15, R16, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R4, R484, R485, R486, R487, R5, R9, R928, R929, R930, R931;
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [100, 100];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s1 [9, 9] { R25 += 1 };
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value2_4 {
  init s0;
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s0 -> s1 [0, 65535] { R27 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R27 += 1, R5 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 64] { R1109 += 1 };
  s0 -> s0 [0, 65535] { R1108 += 1, R1109 += 1 };
  s0 -> s2 [68, 68] { R1109 += 1 };
  s0 -> s1 [69, 65535] { R1109 += 1 };
  s1 -> s1 [0, 64] { R1109 += 1 };
  s1 -> s2 [68, 68] { R1109 += 1 };
  s1 -> s1 [69, 65535] { R1109 += 1 };
  s2 -> s2 [0, 64] { R1109 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [68, 65535] { R1109 += 1 };
  accepting s2;
};
automaton value2_6 {
  init s0;
  s0 -> s0 [0, 65535] { R1110 += 1, R1111 += 1 };
  s0 -> s1 [0, 65535] { R1111 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R1111 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 67] { R1113 += 1 };
  s0 -> s2 [0, 65535] { R1113 += 1, R9 += 1 };
  s0 -> s0 [0, 65535] { R1112 += 1, R1113 += 1 };
  s0 -> s3 [68, 68] { R1113 += 1 };
  s0 -> s1 [69, 65535] { R1113 += 1 };
  s1 -> s1 [0, 67] { R1113 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [68, 68] { R1113 += 1 };
  s1 -> s1 [69, 65535] { R1113 += 1 };
  s2 -> s1 [0, 67] { R1113 += 1 };
  s2 -> s2 [0, 65535] { R1113 += 1, R9 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [68, 68] { R1113 += 1 };
  s2 -> s1 [69, 65535] { R1113 += 1 };
  s3 -> s3 [0, 65535] { R1113 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 8] { R1115 += 1, R17 += 1 };
  s0 -> s0 [0, 65535] { R1114 += 1, R1115 += 1 };
  s0 -> s2 [0, 65535] { R1115 += 1, R16 += 1, R17 += 1 };
  s0 -> s3 [9, 13] { R1115 += 1, R17 += 1 };
  s0 -> s1 [14, 31] { R1115 += 1, R17 += 1 };
  s0 -> s3 [32, 32] { R1115 += 1, R17 += 1 };
  s0 -> s1 [33, 65535] { R1115 += 1, R17 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R1115 += 1, R17 += 1 };
  s1 -> s5 [0, 65535] { R1115 += 1 };
  s2 -> s1 [0, 8] { R1115 += 1, R17 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1115 += 1, R16 += 1, R17 += 1 };
  s2 -> s3 [9, 13] { R1115 += 1, R17 += 1 };
  s2 -> s1 [14, 31] { R1115 += 1, R17 += 1 };
  s2 -> s3 [32, 32] { R1115 += 1, R17 += 1 };
  s2 -> s1 [33, 65535] { R1115 += 1, R17 += 1 };
  s3 -> s1 [0, 65535] { R1115 += 1, R17 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1115 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 65535] { R1117 += 1, R18 += 1, R19 += 1 };
  s0 -> s0 [0, 65535] { R1116 += 1, R1117 += 1 };
  s0 -> s2 [0, 65535] { R1117 += 1, R19 += 1, R3 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1117 += 1, R18 += 1, R19 += 1 };
  s1 -> s2 [0, 65535] { R1117 += 1, R19 += 1, R3 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R1117 += 1 };
  s2 -> s2 [0, 65535] { R1117 += 1, R19 += 1, R3 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1117 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 8] { R1119 += 1, R21 += 1 };
  s0 -> s0 [0, 65535] { R1118 += 1, R1119 += 1 };
  s0 -> s2 [0, 65535] { R1119 += 1, R20 += 1, R21 += 1 };
  s0 -> s3 [9, 13] { R1119 += 1, R21 += 1 };
  s0 -> s1 [14, 31] { R1119 += 1, R21 += 1 };
  s0 -> s3 [32, 32] { R1119 += 1, R21 += 1 };
  s0 -> s1 [33, 65535] { R1119 += 1, R21 += 1 };
  s1 -> s5 [0, 65535] { R1119 += 1 };
  s1 -> s1 [0, 65535] { R1119 += 1, R21 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R1119 += 1, R21 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1119 += 1, R20 += 1, R21 += 1 };
  s2 -> s3 [9, 13] { R1119 += 1, R21 += 1 };
  s2 -> s1 [14, 31] { R1119 += 1, R21 += 1 };
  s2 -> s3 [32, 32] { R1119 += 1, R21 += 1 };
  s2 -> s1 [33, 65535] { R1119 += 1, R21 += 1 };
  s3 -> s1 [0, 65535] { R1119 += 1, R21 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1119 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s0 [0, 65535] { R1120 += 1, R1121 += 1 };
  s0 -> s1 [0, 65535] { R1121 += 1, R23 += 1, R4 += 1 };
  s0 -> s2 [0, 65535] { R1121 += 1, R22 += 1, R23 += 1 };
  s1 -> s4 [0, 65535] { R1121 += 1 };
  s1 -> s1 [0, 65535] { R1121 += 1, R23 += 1, R4 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R1121 += 1, R23 += 1, R4 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1121 += 1, R22 += 1, R23 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1121 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 67] { R1123 += 1, R1083 += 1 };
  s0 -> s0 [0, 65535] { R1122 += 1, R1123 += 1 };
  s0 -> s2 [0, 65535] { R1123 += 1, R1082 += 1, R1083 += 1 };
  s0 -> s1 [69, 65535] { R1123 += 1, R1083 += 1 };
  s1 -> s1 [0, 67] { R1123 += 1, R1083 += 1 };
  s1 -> s1 [0, 65535] { R1123 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [69, 65535] { R1123 += 1, R1083 += 1 };
  s2 -> s1 [0, 67] { R1123 += 1, R1083 += 1 };
  s2 -> s2 [0, 65535] { R1123 += 1, R1082 += 1, R1083 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [69, 65535] { R1123 += 1, R1083 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 65535] { R1125 += 1, R1085 += 1, R14 += 1 };
  s0 -> s0 [0, 65535] { R1124 += 1, R1125 += 1 };
  s0 -> s2 [0, 65535] { R1125 += 1, R1084 += 1, R1085 += 1 };
  s1 -> s1 [0, 65535] { R1125 += 1, R1085 += 1, R14 += 1 };
  s1 -> s4 [0, 65535] { R1125 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R1125 += 1, R1085 += 1, R14 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1125 += 1, R1084 += 1, R1085 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1125 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 68] { R1127 += 1, R1087 += 1 };
  s0 -> s0 [0, 65535] { R1126 += 1, R1127 += 1 };
  s0 -> s2 [0, 65535] { R1127 += 1, R1086 += 1, R1087 += 1 };
  s0 -> s1 [82, 65535] { R1127 += 1, R1087 += 1 };
  s1 -> s1 [0, 68] { R1127 += 1, R1087 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1127 += 1 };
  s1 -> s1 [82, 65535] { R1127 += 1, R1087 += 1 };
  s2 -> s1 [0, 68] { R1127 += 1, R1087 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1127 += 1, R1086 += 1, R1087 += 1 };
  s2 -> s1 [82, 65535] { R1127 += 1, R1087 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 65535] { R1129 += 1, R1088 += 1, R1089 += 1 };
  s0 -> s2 [0, 65535] { R1129 += 1, R1089 += 1, R485 += 1 };
  s0 -> s0 [0, 65535] { R1128 += 1, R1129 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1129 += 1, R1088 += 1, R1089 += 1 };
  s1 -> s2 [0, 65535] { R1129 += 1, R1089 += 1, R485 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R1129 += 1 };
  s2 -> s2 [0, 65535] { R1129 += 1, R1089 += 1, R485 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1129 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 81] { R1131 += 1, R1091 += 1 };
  s0 -> s2 [0, 65535] { R1131 += 1, R1091 += 1, R487 += 1 };
  s0 -> s3 [0, 65535] { R1131 += 1, R1090 += 1, R1091 += 1 };
  s0 -> s0 [0, 65535] { R1130 += 1, R1131 += 1 };
  s0 -> s1 [83, 65535] { R1131 += 1, R1091 += 1 };
  s1 -> s1 [0, 81] { R1131 += 1, R1091 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R1131 += 1 };
  s1 -> s1 [83, 65535] { R1131 += 1, R1091 += 1 };
  s2 -> s1 [0, 81] { R1131 += 1, R1091 += 1 };
  s2 -> s2 [0, 65535] { R1131 += 1, R1091 += 1, R487 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R1131 += 1 };
  s2 -> s1 [83, 65535] { R1131 += 1, R1091 += 1 };
  s3 -> s1 [0, 81] { R1131 += 1, R1091 += 1 };
  s3 -> s2 [0, 65535] { R1131 += 1, R1091 += 1, R487 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1131 += 1, R1090 += 1, R1091 += 1 };
  s3 -> s1 [83, 65535] { R1131 += 1, R1091 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1131 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 65535] { R1133 += 1, R1093 += 1 };
  s0 -> s2 [0, 65535] { R1133 += 1, R1092 += 1, R1093 += 1 };
  s0 -> s0 [0, 65535] { R1132 += 1, R1133 += 1 };
  s0 -> s3 [0, 65535] { R1133 += 1, R1093 += 1, R931 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R1133 += 1, R1093 += 1 };
  s1 -> s5 [0, 65535] { R1133 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R1133 += 1, R1093 += 1 };
  s2 -> s2 [0, 65535] { R1133 += 1, R1092 += 1, R1093 += 1 };
  s2 -> s3 [0, 65535] { R1133 += 1, R1093 += 1, R931 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R1133 += 1, R1093 += 1 };
  s3 -> s3 [0, 65535] { R1133 += 1, R1093 += 1, R931 += 1 };
  s3 -> s5 [0, 65535] { R1133 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1133 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R1134 += 1, R1135 += 1 };
  s0 -> s1 [0, 65535] { R1135 += 1, R1094 += 1, R1095 += 1 };
  s0 -> s2 [0, 65535] { R1135 += 1, R1095 += 1 };
  s1 -> s1 [0, 65535] { R1135 += 1, R1094 += 1, R1095 += 1 };
  s1 -> s2 [0, 65535] { R1135 += 1, R1095 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R1135 += 1 };
  s2 -> s2 [0, 65535] { R1135 += 1, R1095 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1135 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 65535] { R1137 += 1, R1097 += 1, R15 += 1 };
  s0 -> s0 [0, 65535] { R1136 += 1, R1137 += 1 };
  s0 -> s2 [0, 65535] { R1137 += 1, R1096 += 1, R1097 += 1 };
  s1 -> s1 [0, 65535] { R1137 += 1, R1097 += 1, R15 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R1137 += 1 };
  s2 -> s1 [0, 65535] { R1137 += 1, R1097 += 1, R15 += 1 };
  s2 -> s2 [0, 65535] { R1137 += 1, R1096 += 1, R1097 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1137 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 67] { R1139 += 1, R1099 += 1 };
  s0 -> s0 [0, 65535] { R1138 += 1, R1139 += 1 };
  s0 -> s2 [0, 65535] { R1139 += 1, R1098 += 1, R1099 += 1 };
  s0 -> s3 [68, 68] { R1139 += 1, R1099 += 1 };
  s0 -> s4 [68, 68] { R1139 += 1, R1099 += 1 };
  s0 -> s5 [82, 82] { R1139 += 1, R1099 += 1 };
  s0 -> s1 [83, 65535] { R1139 += 1, R1099 += 1 };
  s1 -> s1 [0, 67] { R1139 += 1, R1099 += 1 };
  s1 -> s3 [68, 68] { R1139 += 1, R1099 += 1 };
  s1 -> s4 [68, 68] { R1139 += 1, R1099 += 1 };
  s1 -> s5 [82, 82] { R1139 += 1, R1099 += 1 };
  s1 -> s1 [83, 65535] { R1139 += 1, R1099 += 1 };
  s2 -> s1 [0, 67] { R1139 += 1, R1099 += 1 };
  s2 -> s2 [0, 65535] { R1139 += 1, R1098 += 1, R1099 += 1 };
  s2 -> s3 [68, 68] { R1139 += 1, R1099 += 1 };
  s2 -> s4 [68, 68] { R1139 += 1, R1099 += 1 };
  s2 -> s5 [82, 82] { R1139 += 1, R1099 += 1 };
  s2 -> s1 [83, 65535] { R1139 += 1, R1099 += 1 };
  s3 -> s3 [0, 68] { R1139 += 1, R1099 += 1 };
  s3 -> s7 [82, 82] { R1139 += 1, R1099 += 1 };
  s3 -> s3 [83, 65535] { R1139 += 1, R1099 += 1 };
  s5 -> s5 [0, 67] { R1139 += 1, R1099 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R1139 += 1 };
  s5 -> s7 [68, 68] { R1139 += 1, R1099 += 1 };
  s5 -> s8 [68, 68] { R1139 += 1, R1099 += 1 };
  s5 -> s5 [82, 65535] { R1139 += 1, R1099 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 68] { R1139 += 1, R1099 += 1 };
  s7 -> s7 [0, 65535] { R1139 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [82, 65535] { R1139 += 1, R1099 += 1 };
  s8 -> s8 [0, 65535] { R1139 += 1 };
  s8 -> s6 [0, 65535];
  accepting s5, s6, s7, s8;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 67] { R1141 += 1, R1101 += 1, R484 += 1 };
  s0 -> s0 [0, 65535] { R1140 += 1, R1141 += 1 };
  s0 -> s2 [0, 65535] { R1141 += 1, R1100 += 1, R1101 += 1 };
  s0 -> s3 [68, 68] { R1141 += 1, R1101 += 1, R484 += 1 };
  s0 -> s4 [68, 68] { R1141 += 1, R1101 += 1, R484 += 1 };
  s0 -> s1 [69, 65535] { R1141 += 1, R1101 += 1, R484 += 1 };
  s1 -> s1 [0, 67] { R1141 += 1, R1101 += 1, R484 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1141 += 1 };
  s1 -> s3 [68, 68] { R1141 += 1, R1101 += 1, R484 += 1 };
  s1 -> s4 [68, 68] { R1141 += 1, R1101 += 1, R484 += 1 };
  s1 -> s1 [69, 65535] { R1141 += 1, R1101 += 1, R484 += 1 };
  s2 -> s1 [0, 67] { R1141 += 1, R1101 += 1, R484 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1141 += 1, R1100 += 1, R1101 += 1 };
  s2 -> s3 [68, 68] { R1141 += 1, R1101 += 1, R484 += 1 };
  s2 -> s4 [68, 68] { R1141 += 1, R1101 += 1, R484 += 1 };
  s2 -> s1 [69, 65535] { R1141 += 1, R1101 += 1, R484 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R1141 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R1141 += 1 };
  s4 -> s4 [0, 65535] { R1141 += 1, R1101 += 1, R484 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1141 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 67] { R1143 += 1, R1103 += 1, R486 += 1 };
  s0 -> s2 [0, 65535] { R1143 += 1, R1102 += 1, R1103 += 1 };
  s0 -> s0 [0, 65535] { R1142 += 1, R1143 += 1 };
  s0 -> s3 [68, 68] { R1143 += 1, R1103 += 1, R486 += 1 };
  s0 -> s4 [68, 68] { R1143 += 1, R1103 += 1, R486 += 1 };
  s0 -> s1 [69, 65535] { R1143 += 1, R1103 += 1, R486 += 1 };
  s1 -> s1 [0, 67] { R1143 += 1, R1103 += 1, R486 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1143 += 1 };
  s1 -> s3 [68, 68] { R1143 += 1, R1103 += 1, R486 += 1 };
  s1 -> s4 [68, 68] { R1143 += 1, R1103 += 1, R486 += 1 };
  s1 -> s1 [69, 65535] { R1143 += 1, R1103 += 1, R486 += 1 };
  s2 -> s1 [0, 67] { R1143 += 1, R1103 += 1, R486 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1143 += 1, R1102 += 1, R1103 += 1 };
  s2 -> s3 [68, 68] { R1143 += 1, R1103 += 1, R486 += 1 };
  s2 -> s4 [68, 68] { R1143 += 1, R1103 += 1, R486 += 1 };
  s2 -> s1 [69, 65535] { R1143 += 1, R1103 += 1, R486 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R1143 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1143 += 1, R1103 += 1, R486 += 1 };
  s4 -> s6 [0, 65535] { R1143 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1143 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 67] { R1145 += 1, R1105 += 1, R929 += 1 };
  s0 -> s2 [0, 67] { R1145 += 1, R1105 += 1, R928 += 1, R929 += 1 };
  s0 -> s0 [0, 65535] { R1144 += 1, R1145 += 1 };
  s0 -> s3 [0, 65535] { R1145 += 1, R1104 += 1, R1105 += 1 };
  s0 -> s4 [68, 68] { R1145 += 1, R1105 += 1, R928 += 1, R929 += 1 };
  s0 -> s5 [68, 68] { R1145 += 1, R1105 += 1, R929 += 1 };
  s0 -> s6 [68, 68] { R1145 += 1, R1105 += 1, R929 += 1 };
  s0 -> s7 [68, 68] { R1145 += 1, R1105 += 1, R928 += 1, R929 += 1 };
  s0 -> s1 [69, 81] { R1145 += 1, R1105 += 1, R929 += 1 };
  s0 -> s2 [69, 65535] { R1145 += 1, R1105 += 1, R928 += 1, R929 += 1 };
  s0 -> s8 [82, 82] { R1145 += 1, R1105 += 1, R929 += 1 };
  s0 -> s1 [83, 65535] { R1145 += 1, R1105 += 1, R929 += 1 };
  s1 -> s1 [0, 67] { R1145 += 1, R1105 += 1, R929 += 1 };
  s1 -> s5 [68, 68] { R1145 += 1, R1105 += 1, R929 += 1 };
  s1 -> s6 [68, 68] { R1145 += 1, R1105 += 1, R929 += 1 };
  s1 -> s1 [69, 81] { R1145 += 1, R1105 += 1, R929 += 1 };
  s1 -> s8 [82, 82] { R1145 += 1, R1105 += 1, R929 += 1 };
  s1 -> s1 [83, 65535] { R1145 += 1, R1105 += 1, R929 += 1 };
  s2 -> s1 [0, 67] { R1145 += 1, R1105 += 1, R929 += 1 };
  s2 -> s2 [0, 67] { R1145 += 1, R1105 += 1, R928 += 1, R929 += 1 };
  s2 -> s4 [68, 68] { R1145 += 1, R1105 += 1, R928 += 1, R929 += 1 };
  s2 -> s5 [68, 68] { R1145 += 1, R1105 += 1, R929 += 1 };
  s2 -> s6 [68, 68] { R1145 += 1, R1105 += 1, R929 += 1 };
  s2 -> s7 [68, 68] { R1145 += 1, R1105 += 1, R928 += 1, R929 += 1 };
  s2 -> s1 [69, 81] { R1145 += 1, R1105 += 1, R929 += 1 };
  s2 -> s2 [69, 65535] { R1145 += 1, R1105 += 1, R928 += 1, R929 += 1 };
  s2 -> s8 [82, 82] { R1145 += 1, R1105 += 1, R929 += 1 };
  s2 -> s1 [83, 65535] { R1145 += 1, R1105 += 1, R929 += 1 };
  s3 -> s1 [0, 67] { R1145 += 1, R1105 += 1, R929 += 1 };
  s3 -> s2 [0, 67] { R1145 += 1, R1105 += 1, R928 += 1, R929 += 1 };
  s3 -> s3 [0, 65535] { R1145 += 1, R1104 += 1, R1105 += 1 };
  s3 -> s4 [68, 68] { R1145 += 1, R1105 += 1, R928 += 1, R929 += 1 };
  s3 -> s5 [68, 68] { R1145 += 1, R1105 += 1, R929 += 1 };
  s3 -> s6 [68, 68] { R1145 += 1, R1105 += 1, R929 += 1 };
  s3 -> s7 [68, 68] { R1145 += 1, R1105 += 1, R928 += 1, R929 += 1 };
  s3 -> s1 [69, 81] { R1145 += 1, R1105 += 1, R929 += 1 };
  s3 -> s2 [69, 65535] { R1145 += 1, R1105 += 1, R928 += 1, R929 += 1 };
  s3 -> s8 [82, 82] { R1145 += 1, R1105 += 1, R929 += 1 };
  s3 -> s1 [83, 65535] { R1145 += 1, R1105 += 1, R929 += 1 };
  s4 -> s5 [0, 81] { R1145 += 1, R1105 += 1, R929 += 1 };
  s4 -> s4 [0, 65535] { R1145 += 1, R1105 += 1, R928 += 1, R929 += 1 };
  s4 -> s10 [82, 82] { R1145 += 1, R1105 += 1, R929 += 1 };
  s4 -> s5 [83, 65535] { R1145 += 1, R1105 += 1, R929 += 1 };
  s5 -> s5 [0, 81] { R1145 += 1, R1105 += 1, R929 += 1 };
  s5 -> s10 [82, 82] { R1145 += 1, R1105 += 1, R929 += 1 };
  s5 -> s5 [83, 65535] { R1145 += 1, R1105 += 1, R929 += 1 };
  s8 -> s8 [0, 67] { R1145 += 1, R1105 += 1, R929 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R1145 += 1 };
  s8 -> s10 [68, 68] { R1145 += 1, R1105 += 1, R929 += 1 };
  s8 -> s11 [68, 68] { R1145 += 1, R1105 += 1, R929 += 1 };
  s8 -> s8 [69, 65535] { R1145 += 1, R1105 += 1, R929 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R1145 += 1, R1105 += 1, R929 += 1 };
  s10 -> s9 [0, 65535];
  s10 -> s12 [0, 65535] { R1145 += 1 };
  s11 -> s11 [0, 65535] { R1145 += 1 };
  s11 -> s9 [0, 65535];
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R1145 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 67] { R1147 += 1, R1107 += 1, R1076 += 1, R1077 += 1 };
  s0 -> s2 [0, 67] { R1147 += 1, R1107 += 1, R1077 += 1, R1078 += 1 };
  s0 -> s3 [0, 65535] { R1147 += 1, R1106 += 1, R1107 += 1 };
  s0 -> s0 [0, 65535] { R1146 += 1, R1147 += 1 };
  s0 -> s4 [68, 68] { R1147 += 1, R1107 += 1, R1076 += 1, R1077 += 1 };
  s0 -> s5 [68, 68] { R1147 += 1, R1107 += 1, R1077 += 1, R1078 += 1 };
  s0 -> s6 [68, 68] { R1147 += 1, R1107 += 1, R1076 += 1, R1077 += 1 };
  s0 -> s7 [68, 68] { R1147 += 1, R1107 += 1, R1077 += 1, R1078 += 1 };
  s0 -> s1 [69, 65535] { R1147 += 1, R1107 += 1, R1076 += 1, R1077 += 1 };
  s0 -> s2 [69, 65535] { R1147 += 1, R1107 += 1, R1077 += 1, R1078 += 1 };
  s1 -> s1 [0, 67] { R1147 += 1, R1107 += 1, R1076 += 1, R1077 += 1 };
  s1 -> s2 [0, 67] { R1147 += 1, R1107 += 1, R1077 += 1, R1078 += 1 };
  s1 -> s4 [68, 68] { R1147 += 1, R1107 += 1, R1076 += 1, R1077 += 1 };
  s1 -> s5 [68, 68] { R1147 += 1, R1107 += 1, R1077 += 1, R1078 += 1 };
  s1 -> s6 [68, 68] { R1147 += 1, R1107 += 1, R1076 += 1, R1077 += 1 };
  s1 -> s7 [68, 68] { R1147 += 1, R1107 += 1, R1077 += 1, R1078 += 1 };
  s1 -> s1 [69, 65535] { R1147 += 1, R1107 += 1, R1076 += 1, R1077 += 1 };
  s1 -> s2 [69, 65535] { R1147 += 1, R1107 += 1, R1077 += 1, R1078 += 1 };
  s2 -> s11 [0, 67] { R1147 += 1, R1107 += 1 };
  s2 -> s2 [0, 67] { R1147 += 1, R1107 += 1, R1077 += 1, R1078 += 1 };
  s2 -> s8 [68, 68] { R1147 += 1, R1107 += 1 };
  s2 -> s12 [68, 68] { R1147 += 1, R1107 += 1 };
  s2 -> s5 [68, 68] { R1147 += 1, R1107 += 1, R1077 += 1, R1078 += 1 };
  s2 -> s7 [68, 68] { R1147 += 1, R1107 += 1, R1077 += 1, R1078 += 1 };
  s2 -> s11 [69, 65535] { R1147 += 1, R1107 += 1 };
  s2 -> s2 [69, 65535] { R1147 += 1, R1107 += 1, R1077 += 1, R1078 += 1 };
  s3 -> s1 [0, 67] { R1147 += 1, R1107 += 1, R1076 += 1, R1077 += 1 };
  s3 -> s2 [0, 67] { R1147 += 1, R1107 += 1, R1077 += 1, R1078 += 1 };
  s3 -> s3 [0, 65535] { R1147 += 1, R1106 += 1, R1107 += 1 };
  s3 -> s4 [68, 68] { R1147 += 1, R1107 += 1, R1076 += 1, R1077 += 1 };
  s3 -> s5 [68, 68] { R1147 += 1, R1107 += 1, R1077 += 1, R1078 += 1 };
  s3 -> s6 [68, 68] { R1147 += 1, R1107 += 1, R1076 += 1, R1077 += 1 };
  s3 -> s7 [68, 68] { R1147 += 1, R1107 += 1, R1077 += 1, R1078 += 1 };
  s3 -> s1 [69, 65535] { R1147 += 1, R1107 += 1, R1076 += 1, R1077 += 1 };
  s3 -> s2 [69, 65535] { R1147 += 1, R1107 += 1, R1077 += 1, R1078 += 1 };
  s5 -> s8 [0, 65535] { R1147 += 1, R1107 += 1 };
  s5 -> s5 [0, 65535] { R1147 += 1, R1107 += 1, R1077 += 1, R1078 += 1 };
  s6 -> s5 [0, 65535] { R1147 += 1, R1107 += 1, R1077 += 1, R1078 += 1 };
  s6 -> s6 [0, 65535] { R1147 += 1, R1107 += 1, R1076 += 1, R1077 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R1147 += 1, R1107 += 1 };
  s8 -> s10 [0, 65535] { R1147 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R1147 += 1 };
  s11 -> s11 [0, 67] { R1147 += 1, R1107 += 1 };
  s11 -> s11 [0, 65535] { R1147 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s8 [68, 68] { R1147 += 1, R1107 += 1 };
  s11 -> s12 [68, 68] { R1147 += 1, R1107 += 1 };
  s11 -> s11 [69, 65535] { R1147 += 1, R1107 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R1147 += 1 };
  accepting s12, s8, s9, s10, s11;
};
};
constraint R1 = R1095 && R2 = R1147 && R16 - R1095 = -1 && R17 = R1095 && R18 - R1095 = -1 && R19 = R1095 && R20 = 0 && R21 = 1 && R22 = 0 && R23 = 1 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R485 + R484 + -1*R931 + -1*R929 = 0 && R930 + R928 = 0 && R1082 = 0 && R1083 = R1095 && R1084 = 0 && R1085 = R1095 && R1086 = 0 && R1087 = R1095 && R1088 = 0 && R1089 = R1095 && R1090 = 0 && R1091 = R1095 && R1092 = 0 && R1093 = R1095 && R1094 = 0 && R1098 = 0 && R1099 = 0 && R1104 = 0 && R1105 = 0 && R1106 = 0 && R1107 = 0 && R1108 = 1 && R1109 = R1147 && R1110 = 1 && R1111 = R1147 && R1112 = 1 && R1113 = R1147 && R1114 = 1 && R1115 = R1147 && R1116 = 1 && R1117 = R1147 && R1118 = 1 && R1119 = R1147 && R1120 = 1 && R1121 = R1147 && R1122 = 1 && R1123 = R1147 && R1124 = 1 && R1125 = R1147 && R1126 = 1 && R1127 = R1147 && R1128 = 1 && R1129 = R1147 && R1130 = 1 && R1131 = R1147 && R1132 = 1 && R1133 = R1147 && R1134 = 1 && R1135 = R1147 && R1136 = 1 && R1137 = R1147 && R1138 = 1 && R1139 = R1147 && R1140 = 1 && R1141 = R1147 && R1142 = 1 && R1143 = R1147 && R1144 = 1 && R1145 = R1147 && R1146 = 1 && R9 < 1 && R12 < 1 && R487 + R486 < 1 && -1*R931 + -1*R929 < 1 && 0 < R1095 && 0 < R1147 && (R931 + R929 != 0 || R1081 + R1078 = 0 || (R1079 + R1076 = 0 && R1080 + R1077 = 0)) && (R1079 + R1076 != 0 || R931 + R929 + -1*R1080 + -1*R1077 = 0 || R931 + R929 < 1) && (R15 = 0 || (R1096 = 0 && R1097 = 0)) && (R15 = 0 || (R1100 = 0 && R1101 = 0)) && (R15 = 0 || (R1102 = 0 && R1103 = 0)) && (R1079 + R1076 = 0 || R931 + R929 < 1);
// End of Parikh automata intersection problem
