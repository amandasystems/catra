// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R10044, R10045, R10046, R10047, R10048, R10049, R10050, R10051, R10052, R10053, R10054, R10055, R10056, R10057, R10058, R10059, R10060, R10061, R10062, R10063, R10064, R10065, R10066, R10067, R10068, R10069, R10070, R10071, R10072, R10073, R10074, R10075, R10076, R10077, R10078, R10079, R10080, R10081, R10082, R10083, R10084, R10085, R10086, R10087, R10088, R10089, R10090, R10091, R10092, R10093, R10094, R10095, R10096, R10097, R10098, R10099, R10100, R10101, R10102, R10103, R10104, R10105, R10106, R10107, R10108, R10109, R10110, R10111, R10112, R10113, R10114, R10115, R10116, R10117, R10118, R10119, R10120, R10121, R10122, R10123, R10124, R10125, R10126, R10127, R10128, R10129, R10130, R10131, R10132, R10133, R10134, R10135, R10136, R10137, R10138, R10139, R10140, R10141, R10142, R10143, R10144, R10145, R10146, R10147, R11, R12, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R70, R71, R72, R73, R7706, R7707, R7708, R7709, R7710, R7711, R8, R8982, R8983, R8984, R8985, R9830, R9831, R9832, R9833, R9834, R9835;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 72];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [73, 73];
  s0 -> s1 [74, 65535];
  s1 -> s1 [0, 72];
  s1 -> s2 [73, 73];
  s1 -> s1 [74, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s1 [0, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R25 += 1 };
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R10069 += 1, R19 += 1 };
  s0 -> s0 [0, 65535] { R10068 += 1, R10069 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R10069 += 1, R19 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 72] { R10071 += 1 };
  s0 -> s0 [0, 65535] { R10070 += 1, R10071 += 1 };
  s0 -> s2 [73, 73] { R10071 += 1 };
  s0 -> s3 [73, 73] { R10071 += 1 };
  s0 -> s1 [78, 65535] { R10071 += 1 };
  s1 -> s1 [0, 72] { R10071 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R10071 += 1 };
  s1 -> s3 [73, 73] { R10071 += 1 };
  s1 -> s1 [78, 65535] { R10071 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 73] { R10071 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [78, 65535] { R10071 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 72] { R10073 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R10072 += 1, R10073 += 1 };
  s0 -> s2 [73, 73] { R10073 += 1, R38 += 1 };
  s0 -> s3 [73, 73] { R10073 += 1, R38 += 1 };
  s0 -> s1 [74, 65535] { R10073 += 1, R38 += 1 };
  s1 -> s1 [0, 72] { R10073 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R10073 += 1, R38 += 1 };
  s1 -> s3 [73, 73] { R10073 += 1, R38 += 1 };
  s1 -> s1 [74, 65535] { R10073 += 1, R38 += 1 };
  s2 -> s2 [0, 65535] { R10073 += 1, R38 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 72] { R10075 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R10074 += 1, R10075 += 1 };
  s0 -> s2 [73, 73] { R10075 += 1, R40 += 1 };
  s0 -> s3 [73, 73] { R10075 += 1, R40 += 1 };
  s0 -> s1 [74, 65535] { R10075 += 1, R40 += 1 };
  s1 -> s1 [0, 72] { R10075 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R10075 += 1, R40 += 1 };
  s1 -> s3 [73, 73] { R10075 += 1, R40 += 1 };
  s1 -> s1 [74, 65535] { R10075 += 1, R40 += 1 };
  s2 -> s2 [0, 65535] { R10075 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 72] { R10077 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R10076 += 1, R10077 += 1 };
  s0 -> s2 [73, 73] { R10077 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [73, 73] { R10077 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [74, 65535] { R10077 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 72] { R10077 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R10077 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [73, 73] { R10077 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [74, 65535] { R10077 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535] { R10077 += 1, R42 += 1, R43 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 72] { R10079 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R10078 += 1, R10079 += 1 };
  s0 -> s2 [73, 73] { R10079 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [73, 73] { R10079 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [74, 65535] { R10079 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 72] { R10079 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R10079 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [73, 73] { R10079 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [74, 65535] { R10079 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10079 += 1, R46 += 1, R47 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 72] { R10081 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R10080 += 1, R10081 += 1 };
  s0 -> s2 [73, 73] { R10081 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [73, 73] { R10081 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [74, 65535] { R10081 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 72] { R10081 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R10081 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [73, 73] { R10081 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [74, 65535] { R10081 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10081 += 1, R52 += 1, R53 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 72] { R10083 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R10082 += 1, R10083 += 1 };
  s0 -> s2 [73, 73] { R10083 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [73, 73] { R10083 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [74, 65535] { R10083 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 72] { R10083 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R10083 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [73, 73] { R10083 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [74, 65535] { R10083 += 1, R56 += 1, R57 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10083 += 1, R56 += 1, R57 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 72] { R10085 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R10084 += 1, R10085 += 1 };
  s0 -> s2 [73, 73] { R10085 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [73, 73] { R10085 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [74, 65535] { R10085 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 72] { R10085 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R10085 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [73, 73] { R10085 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [74, 65535] { R10085 += 1, R62 += 1, R63 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10085 += 1, R62 += 1, R63 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 72] { R10105 += 1 };
  s0 -> s0 [0, 65535] { R10104 += 1, R10105 += 1 };
  s0 -> s2 [73, 73] { R10105 += 1 };
  s0 -> s1 [74, 65535] { R10105 += 1 };
  s1 -> s1 [0, 72] { R10105 += 1 };
  s1 -> s2 [73, 73] { R10105 += 1 };
  s1 -> s1 [74, 65535] { R10105 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10105 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R10107 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R10106 += 1, R10107 += 1 };
  s1 -> s1 [0, 65535] { R10107 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 72] { R10109 += 1 };
  s0 -> s2 [0, 65535] { R10109 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R10108 += 1, R10109 += 1 };
  s0 -> s3 [73, 73] { R10109 += 1 };
  s0 -> s1 [74, 65535] { R10109 += 1 };
  s1 -> s1 [0, 72] { R10109 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [73, 73] { R10109 += 1 };
  s1 -> s1 [74, 65535] { R10109 += 1 };
  s2 -> s1 [0, 72] { R10109 += 1 };
  s2 -> s2 [0, 65535] { R10109 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [73, 73] { R10109 += 1 };
  s2 -> s1 [74, 65535] { R10109 += 1 };
  s3 -> s3 [0, 65535] { R10109 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 72] { R10111 += 1, R10049 += 1 };
  s0 -> s2 [0, 65535] { R10111 += 1, R10048 += 1, R10049 += 1 };
  s0 -> s0 [0, 65535] { R10110 += 1, R10111 += 1 };
  s0 -> s1 [74, 65535] { R10111 += 1, R10049 += 1 };
  s1 -> s1 [0, 72] { R10111 += 1, R10049 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R10111 += 1 };
  s1 -> s1 [74, 65535] { R10111 += 1, R10049 += 1 };
  s2 -> s1 [0, 72] { R10111 += 1, R10049 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10111 += 1, R10048 += 1, R10049 += 1 };
  s2 -> s1 [74, 65535] { R10111 += 1, R10049 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R10113 += 1, R10051 += 1, R17 += 1 };
  s0 -> s2 [0, 65535] { R10113 += 1, R10050 += 1, R10051 += 1 };
  s0 -> s0 [0, 65535] { R10112 += 1, R10113 += 1 };
  s1 -> s1 [0, 65535] { R10113 += 1, R10051 += 1, R17 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R10113 += 1 };
  s2 -> s1 [0, 65535] { R10113 += 1, R10051 += 1, R17 += 1 };
  s2 -> s2 [0, 65535] { R10113 += 1, R10050 += 1, R10051 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10113 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 73] { R10115 += 1, R10053 += 1 };
  s0 -> s0 [0, 65535] { R10114 += 1, R10115 += 1 };
  s0 -> s2 [0, 65535] { R10115 += 1, R10052 += 1, R10053 += 1 };
  s0 -> s1 [77, 65535] { R10115 += 1, R10053 += 1 };
  s1 -> s1 [0, 73] { R10115 += 1, R10053 += 1 };
  s1 -> s1 [0, 65535] { R10115 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [77, 65535] { R10115 += 1, R10053 += 1 };
  s2 -> s1 [0, 73] { R10115 += 1, R10053 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10115 += 1, R10052 += 1, R10053 += 1 };
  s2 -> s1 [77, 65535] { R10115 += 1, R10053 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R10117 += 1, R10054 += 1, R10055 += 1 };
  s0 -> s2 [0, 65535] { R10117 += 1, R10055 += 1, R67 += 1 };
  s0 -> s0 [0, 65535] { R10116 += 1, R10117 += 1 };
  s1 -> s1 [0, 65535] { R10117 += 1, R10054 += 1, R10055 += 1 };
  s1 -> s2 [0, 65535] { R10117 += 1, R10055 += 1, R67 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10117 += 1, R10055 += 1, R67 += 1 };
  s2 -> s3 [0, 65535] { R10117 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10117 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 76] { R10119 += 1, R10057 += 1 };
  s0 -> s2 [0, 65535] { R10119 += 1, R10057 += 1, R69 += 1 };
  s0 -> s0 [0, 65535] { R10118 += 1, R10119 += 1 };
  s0 -> s3 [0, 65535] { R10119 += 1, R10056 += 1, R10057 += 1 };
  s0 -> s1 [78, 65535] { R10119 += 1, R10057 += 1 };
  s1 -> s1 [0, 76] { R10119 += 1, R10057 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R10119 += 1 };
  s1 -> s1 [78, 65535] { R10119 += 1, R10057 += 1 };
  s2 -> s1 [0, 76] { R10119 += 1, R10057 += 1 };
  s2 -> s5 [0, 65535] { R10119 += 1 };
  s2 -> s2 [0, 65535] { R10119 += 1, R10057 += 1, R69 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [78, 65535] { R10119 += 1, R10057 += 1 };
  s3 -> s1 [0, 76] { R10119 += 1, R10057 += 1 };
  s3 -> s2 [0, 65535] { R10119 += 1, R10057 += 1, R69 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10119 += 1, R10056 += 1, R10057 += 1 };
  s3 -> s1 [78, 65535] { R10119 += 1, R10057 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10119 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 76] { R10121 += 1, R10059 += 1, R73 += 1 };
  s0 -> s2 [0, 65535] { R10121 += 1, R10059 += 1, R72 += 1, R73 += 1 };
  s0 -> s0 [0, 65535] { R10120 += 1, R10121 += 1 };
  s0 -> s3 [0, 65535] { R10121 += 1, R10058 += 1, R10059 += 1 };
  s0 -> s1 [78, 65535] { R10121 += 1, R10059 += 1, R73 += 1 };
  s1 -> s1 [0, 76] { R10121 += 1, R10059 += 1, R73 += 1 };
  s1 -> s1 [0, 65535] { R10121 += 1, R10059 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R10121 += 1 };
  s1 -> s1 [78, 65535] { R10121 += 1, R10059 += 1, R73 += 1 };
  s2 -> s1 [0, 76] { R10121 += 1, R10059 += 1, R73 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10121 += 1, R10059 += 1, R72 += 1, R73 += 1 };
  s2 -> s5 [0, 65535] { R10121 += 1 };
  s2 -> s1 [78, 65535] { R10121 += 1, R10059 += 1, R73 += 1 };
  s3 -> s1 [0, 76] { R10121 += 1, R10059 += 1, R73 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R10121 += 1, R10059 += 1, R72 += 1, R73 += 1 };
  s3 -> s3 [0, 65535] { R10121 += 1, R10058 += 1, R10059 += 1 };
  s3 -> s1 [78, 65535] { R10121 += 1, R10059 += 1, R73 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10121 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s0 [0, 65535] { R10122 += 1, R10123 += 1 };
  s0 -> s1 [0, 65535] { R10123 += 1, R10061 += 1 };
  s0 -> s2 [0, 65535] { R10123 += 1, R10060 += 1, R10061 += 1 };
  s1 -> s4 [0, 65535] { R10123 += 1 };
  s1 -> s1 [0, 65535] { R10123 += 1, R10061 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10123 += 1, R10061 += 1 };
  s2 -> s2 [0, 65535] { R10123 += 1, R10060 += 1, R10061 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10123 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 77] { R10125 += 1, R10063 += 1, R8985 += 1 };
  s0 -> s2 [0, 65535] { R10125 += 1, R10062 += 1, R10063 += 1 };
  s0 -> s3 [0, 65535] { R10125 += 1, R10063 += 1, R8984 += 1, R8985 += 1 };
  s0 -> s0 [0, 65535] { R10124 += 1, R10125 += 1 };
  s0 -> s4 [81, 81] { R10125 += 1, R10063 += 1, R8985 += 1 };
  s0 -> s1 [82, 65535] { R10125 += 1, R10063 += 1, R8985 += 1 };
  s1 -> s1 [0, 77] { R10125 += 1, R10063 += 1, R8985 += 1 };
  s1 -> s4 [81, 81] { R10125 += 1, R10063 += 1, R8985 += 1 };
  s1 -> s1 [82, 65535] { R10125 += 1, R10063 += 1, R8985 += 1 };
  s2 -> s1 [0, 77] { R10125 += 1, R10063 += 1, R8985 += 1 };
  s2 -> s2 [0, 65535] { R10125 += 1, R10062 += 1, R10063 += 1 };
  s2 -> s3 [0, 65535] { R10125 += 1, R10063 += 1, R8984 += 1, R8985 += 1 };
  s2 -> s4 [81, 81] { R10125 += 1, R10063 += 1, R8985 += 1 };
  s2 -> s1 [82, 65535] { R10125 += 1, R10063 += 1, R8985 += 1 };
  s3 -> s1 [0, 77] { R10125 += 1, R10063 += 1, R8985 += 1 };
  s3 -> s3 [0, 65535] { R10125 += 1, R10063 += 1, R8984 += 1, R8985 += 1 };
  s3 -> s4 [81, 81] { R10125 += 1, R10063 += 1, R8985 += 1 };
  s3 -> s1 [82, 65535] { R10125 += 1, R10063 += 1, R8985 += 1 };
  s4 -> s4 [0, 77] { R10125 += 1, R10063 += 1, R8985 += 1 };
  s4 -> s4 [0, 65535] { R10125 += 1, R10063 += 1 };
  s4 -> s5 [0, 65535] { R10125 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [81, 65535] { R10125 += 1, R10063 += 1, R8985 += 1 };
  s5 -> s5 [0, 65535] { R10125 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s4, s5, s6;
};
automaton value2_28 {
  init s0;
  s0 -> s0 [0, 65535] { R10126 += 1, R10127 += 1 };
  s0 -> s1 [0, 65535] { R10127 += 1, R10065 += 1 };
  s0 -> s2 [0, 65535] { R10127 += 1, R10064 += 1, R10065 += 1 };
  s1 -> s4 [0, 65535] { R10127 += 1 };
  s1 -> s1 [0, 65535] { R10127 += 1, R10065 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10127 += 1, R10065 += 1 };
  s2 -> s2 [0, 65535] { R10127 += 1, R10064 += 1, R10065 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10127 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 77] { R10129 += 1, R10067 += 1, R10047 += 1 };
  s0 -> s1 [0, 65535] { R10129 += 1, R10067 += 1 };
  s0 -> s2 [0, 65535] { R10129 += 1, R10066 += 1, R10067 += 1 };
  s0 -> s0 [0, 65535] { R10128 += 1, R10129 += 1 };
  s0 -> s1 [82, 65535] { R10129 += 1, R10067 += 1, R10047 += 1 };
  s1 -> s1 [0, 77] { R10129 += 1, R10067 += 1, R10047 += 1 };
  s1 -> s1 [0, 65535] { R10129 += 1, R10067 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R10129 += 1 };
  s1 -> s1 [82, 65535] { R10129 += 1, R10067 += 1, R10047 += 1 };
  s2 -> s1 [0, 77] { R10129 += 1, R10067 += 1, R10047 += 1 };
  s2 -> s1 [0, 65535] { R10129 += 1, R10067 += 1 };
  s2 -> s2 [0, 65535] { R10129 += 1, R10066 += 1, R10067 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [82, 65535] { R10129 += 1, R10067 += 1, R10047 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10129 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s0 [0, 65535] { R10130 += 1, R10131 += 1 };
  s0 -> s1 [0, 65535] { R10131 += 1, R10087 += 1, R18 += 1 };
  s0 -> s2 [0, 65535] { R10131 += 1, R10086 += 1, R10087 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R10131 += 1, R10087 += 1, R18 += 1 };
  s1 -> s4 [0, 65535] { R10131 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10131 += 1, R10087 += 1, R18 += 1 };
  s2 -> s2 [0, 65535] { R10131 += 1, R10086 += 1, R10087 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10131 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 72] { R10133 += 1, R10089 += 1 };
  s0 -> s0 [0, 65535] { R10132 += 1, R10133 += 1 };
  s0 -> s2 [0, 65535] { R10133 += 1, R10088 += 1, R10089 += 1 };
  s0 -> s3 [73, 73] { R10133 += 1, R10089 += 1 };
  s0 -> s4 [73, 73] { R10133 += 1, R10089 += 1 };
  s0 -> s5 [77, 77] { R10133 += 1, R10089 += 1 };
  s0 -> s1 [78, 65535] { R10133 += 1, R10089 += 1 };
  s1 -> s1 [0, 72] { R10133 += 1, R10089 += 1 };
  s1 -> s3 [73, 73] { R10133 += 1, R10089 += 1 };
  s1 -> s4 [73, 73] { R10133 += 1, R10089 += 1 };
  s1 -> s5 [77, 77] { R10133 += 1, R10089 += 1 };
  s1 -> s1 [78, 65535] { R10133 += 1, R10089 += 1 };
  s2 -> s1 [0, 72] { R10133 += 1, R10089 += 1 };
  s2 -> s2 [0, 65535] { R10133 += 1, R10088 += 1, R10089 += 1 };
  s2 -> s3 [73, 73] { R10133 += 1, R10089 += 1 };
  s2 -> s4 [73, 73] { R10133 += 1, R10089 += 1 };
  s2 -> s5 [77, 77] { R10133 += 1, R10089 += 1 };
  s2 -> s1 [78, 65535] { R10133 += 1, R10089 += 1 };
  s3 -> s3 [0, 73] { R10133 += 1, R10089 += 1 };
  s3 -> s8 [77, 77] { R10133 += 1, R10089 += 1 };
  s3 -> s3 [78, 65535] { R10133 += 1, R10089 += 1 };
  s5 -> s5 [0, 72] { R10133 += 1, R10089 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R10133 += 1 };
  s5 -> s7 [73, 73] { R10133 += 1, R10089 += 1 };
  s5 -> s8 [73, 73] { R10133 += 1, R10089 += 1 };
  s5 -> s5 [77, 65535] { R10133 += 1, R10089 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R10133 += 1 };
  s8 -> s8 [0, 73] { R10133 += 1, R10089 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R10133 += 1 };
  s8 -> s8 [77, 65535] { R10133 += 1, R10089 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 72] { R10135 += 1, R10091 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R10134 += 1, R10135 += 1 };
  s0 -> s2 [0, 65535] { R10135 += 1, R10090 += 1, R10091 += 1 };
  s0 -> s3 [73, 73] { R10135 += 1, R10091 += 1, R66 += 1 };
  s0 -> s4 [73, 73] { R10135 += 1, R10091 += 1, R66 += 1 };
  s0 -> s1 [74, 65535] { R10135 += 1, R10091 += 1, R66 += 1 };
  s1 -> s1 [0, 72] { R10135 += 1, R10091 += 1, R66 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R10135 += 1 };
  s1 -> s3 [73, 73] { R10135 += 1, R10091 += 1, R66 += 1 };
  s1 -> s4 [73, 73] { R10135 += 1, R10091 += 1, R66 += 1 };
  s1 -> s1 [74, 65535] { R10135 += 1, R10091 += 1, R66 += 1 };
  s2 -> s1 [0, 72] { R10135 += 1, R10091 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R10135 += 1, R10090 += 1, R10091 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [73, 73] { R10135 += 1, R10091 += 1, R66 += 1 };
  s2 -> s4 [73, 73] { R10135 += 1, R10091 += 1, R66 += 1 };
  s2 -> s1 [74, 65535] { R10135 += 1, R10091 += 1, R66 += 1 };
  s3 -> s3 [0, 65535] { R10135 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R10135 += 1, R10091 += 1, R66 += 1 };
  s4 -> s5 [0, 65535] { R10135 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R10135 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 72] { R10137 += 1, R10093 += 1, R68 += 1 };
  s0 -> s2 [0, 65535] { R10137 += 1, R10092 += 1, R10093 += 1 };
  s0 -> s0 [0, 65535] { R10136 += 1, R10137 += 1 };
  s0 -> s3 [73, 73] { R10137 += 1, R10093 += 1, R68 += 1 };
  s0 -> s4 [73, 73] { R10137 += 1, R10093 += 1, R68 += 1 };
  s0 -> s1 [74, 65535] { R10137 += 1, R10093 += 1, R68 += 1 };
  s1 -> s1 [0, 72] { R10137 += 1, R10093 += 1, R68 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10137 += 1 };
  s1 -> s3 [73, 73] { R10137 += 1, R10093 += 1, R68 += 1 };
  s1 -> s4 [73, 73] { R10137 += 1, R10093 += 1, R68 += 1 };
  s1 -> s1 [74, 65535] { R10137 += 1, R10093 += 1, R68 += 1 };
  s2 -> s1 [0, 72] { R10137 += 1, R10093 += 1, R68 += 1 };
  s2 -> s2 [0, 65535] { R10137 += 1, R10092 += 1, R10093 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R10137 += 1, R10093 += 1, R68 += 1 };
  s2 -> s4 [73, 73] { R10137 += 1, R10093 += 1, R68 += 1 };
  s2 -> s1 [74, 65535] { R10137 += 1, R10093 += 1, R68 += 1 };
  s3 -> s6 [0, 65535] { R10137 += 1 };
  s3 -> s3 [0, 65535] { R10137 += 1, R10093 += 1, R68 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10137 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10137 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 72] { R10139 += 1, R10095 += 1, R70 += 1, R71 += 1 };
  s0 -> s0 [0, 65535] { R10138 += 1, R10139 += 1 };
  s0 -> s2 [0, 65535] { R10139 += 1, R10094 += 1, R10095 += 1 };
  s0 -> s3 [73, 73] { R10139 += 1, R10095 += 1, R70 += 1, R71 += 1 };
  s0 -> s4 [73, 73] { R10139 += 1, R10095 += 1, R70 += 1, R71 += 1 };
  s0 -> s1 [74, 65535] { R10139 += 1, R10095 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 72] { R10139 += 1, R10095 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 65535] { R10139 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R10139 += 1, R10095 += 1, R70 += 1, R71 += 1 };
  s1 -> s4 [73, 73] { R10139 += 1, R10095 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [74, 65535] { R10139 += 1, R10095 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [0, 72] { R10139 += 1, R10095 += 1, R70 += 1, R71 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10139 += 1, R10094 += 1, R10095 += 1 };
  s2 -> s3 [73, 73] { R10139 += 1, R10095 += 1, R70 += 1, R71 += 1 };
  s2 -> s4 [73, 73] { R10139 += 1, R10095 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [74, 65535] { R10139 += 1, R10095 += 1, R70 += 1, R71 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10139 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R10139 += 1 };
  s4 -> s4 [0, 65535] { R10139 += 1, R10095 += 1, R70 += 1, R71 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10139 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 72] { R10141 += 1, R10097 += 1, R7707 += 1, R7708 += 1 };
  s0 -> s2 [0, 72] { R10141 += 1, R10097 += 1, R7706 += 1, R7707 += 1 };
  s0 -> s0 [0, 65535] { R10140 += 1, R10141 += 1 };
  s0 -> s3 [0, 65535] { R10141 += 1, R10096 += 1, R10097 += 1 };
  s0 -> s4 [73, 73] { R10141 += 1, R10097 += 1, R7707 += 1, R7708 += 1 };
  s0 -> s5 [73, 73] { R10141 += 1, R10097 += 1, R7706 += 1, R7707 += 1 };
  s0 -> s6 [73, 73] { R10141 += 1, R10097 += 1, R7706 += 1, R7707 += 1 };
  s0 -> s7 [73, 73] { R10141 += 1, R10097 += 1, R7707 += 1, R7708 += 1 };
  s0 -> s1 [74, 65535] { R10141 += 1, R10097 += 1, R7707 += 1, R7708 += 1 };
  s0 -> s2 [74, 65535] { R10141 += 1, R10097 += 1, R7706 += 1, R7707 += 1 };
  s1 -> s11 [0, 72] { R10141 += 1, R10097 += 1 };
  s1 -> s1 [0, 72] { R10141 += 1, R10097 += 1, R7707 += 1, R7708 += 1 };
  s1 -> s4 [73, 73] { R10141 += 1, R10097 += 1, R7707 += 1, R7708 += 1 };
  s1 -> s12 [73, 73] { R10141 += 1, R10097 += 1 };
  s1 -> s8 [73, 73] { R10141 += 1, R10097 += 1 };
  s1 -> s7 [73, 73] { R10141 += 1, R10097 += 1, R7707 += 1, R7708 += 1 };
  s1 -> s11 [74, 65535] { R10141 += 1, R10097 += 1 };
  s1 -> s1 [74, 65535] { R10141 += 1, R10097 += 1, R7707 += 1, R7708 += 1 };
  s2 -> s1 [0, 72] { R10141 += 1, R10097 += 1, R7707 += 1, R7708 += 1 };
  s2 -> s2 [0, 72] { R10141 += 1, R10097 += 1, R7706 += 1, R7707 += 1 };
  s2 -> s4 [73, 73] { R10141 += 1, R10097 += 1, R7707 += 1, R7708 += 1 };
  s2 -> s5 [73, 73] { R10141 += 1, R10097 += 1, R7706 += 1, R7707 += 1 };
  s2 -> s6 [73, 73] { R10141 += 1, R10097 += 1, R7706 += 1, R7707 += 1 };
  s2 -> s7 [73, 73] { R10141 += 1, R10097 += 1, R7707 += 1, R7708 += 1 };
  s2 -> s1 [74, 65535] { R10141 += 1, R10097 += 1, R7707 += 1, R7708 += 1 };
  s2 -> s2 [74, 65535] { R10141 += 1, R10097 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s1 [0, 72] { R10141 += 1, R10097 += 1, R7707 += 1, R7708 += 1 };
  s3 -> s2 [0, 72] { R10141 += 1, R10097 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s3 [0, 65535] { R10141 += 1, R10096 += 1, R10097 += 1 };
  s3 -> s4 [73, 73] { R10141 += 1, R10097 += 1, R7707 += 1, R7708 += 1 };
  s3 -> s5 [73, 73] { R10141 += 1, R10097 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s6 [73, 73] { R10141 += 1, R10097 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s7 [73, 73] { R10141 += 1, R10097 += 1, R7707 += 1, R7708 += 1 };
  s3 -> s1 [74, 65535] { R10141 += 1, R10097 += 1, R7707 += 1, R7708 += 1 };
  s3 -> s2 [74, 65535] { R10141 += 1, R10097 += 1, R7706 += 1, R7707 += 1 };
  s6 -> s6 [0, 65535] { R10141 += 1, R10097 += 1, R7706 += 1, R7707 += 1 };
  s6 -> s7 [0, 65535] { R10141 += 1, R10097 += 1, R7707 += 1, R7708 += 1 };
  s7 -> s8 [0, 65535] { R10141 += 1, R10097 += 1 };
  s7 -> s7 [0, 65535] { R10141 += 1, R10097 += 1, R7707 += 1, R7708 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [0, 65535] { R10141 += 1 };
  s8 -> s8 [0, 65535] { R10141 += 1, R10097 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R10141 += 1 };
  s11 -> s11 [0, 72] { R10141 += 1, R10097 += 1 };
  s11 -> s11 [0, 65535] { R10141 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s12 [73, 73] { R10141 += 1, R10097 += 1 };
  s11 -> s8 [73, 73] { R10141 += 1, R10097 += 1 };
  s11 -> s11 [74, 65535] { R10141 += 1, R10097 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R10141 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 72] { R10143 += 1, R10099 += 1, R8982 += 1, R8983 += 1 };
  s0 -> s2 [0, 65535] { R10143 += 1, R10098 += 1, R10099 += 1 };
  s0 -> s0 [0, 65535] { R10142 += 1, R10143 += 1 };
  s0 -> s3 [73, 73] { R10143 += 1, R10099 += 1, R8982 += 1, R8983 += 1 };
  s0 -> s4 [73, 73] { R10143 += 1, R10099 += 1, R8982 += 1, R8983 += 1 };
  s0 -> s1 [74, 65535] { R10143 += 1, R10099 += 1, R8982 += 1, R8983 += 1 };
  s1 -> s1 [0, 72] { R10143 += 1, R10099 += 1, R8982 += 1, R8983 += 1 };
  s1 -> s1 [0, 65535] { R10143 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [73, 73] { R10143 += 1, R10099 += 1, R8982 += 1, R8983 += 1 };
  s1 -> s4 [73, 73] { R10143 += 1, R10099 += 1, R8982 += 1, R8983 += 1 };
  s1 -> s1 [74, 65535] { R10143 += 1, R10099 += 1, R8982 += 1, R8983 += 1 };
  s2 -> s1 [0, 72] { R10143 += 1, R10099 += 1, R8982 += 1, R8983 += 1 };
  s2 -> s2 [0, 65535] { R10143 += 1, R10098 += 1, R10099 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [73, 73] { R10143 += 1, R10099 += 1, R8982 += 1, R8983 += 1 };
  s2 -> s4 [73, 73] { R10143 += 1, R10099 += 1, R8982 += 1, R8983 += 1 };
  s2 -> s1 [74, 65535] { R10143 += 1, R10099 += 1, R8982 += 1, R8983 += 1 };
  s3 -> s3 [0, 65535] { R10143 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R10143 += 1 };
  s4 -> s4 [0, 65535] { R10143 += 1, R10099 += 1, R8982 += 1, R8983 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R10143 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 72] { R10145 += 1, R10101 += 1, R9831 += 1, R9832 += 1 };
  s0 -> s2 [0, 72] { R10145 += 1, R10101 += 1, R9830 += 1, R9831 += 1 };
  s0 -> s0 [0, 65535] { R10144 += 1, R10145 += 1 };
  s0 -> s3 [0, 65535] { R10145 += 1, R10100 += 1, R10101 += 1 };
  s0 -> s4 [73, 73] { R10145 += 1, R10101 += 1, R9831 += 1, R9832 += 1 };
  s0 -> s5 [73, 73] { R10145 += 1, R10101 += 1, R9830 += 1, R9831 += 1 };
  s0 -> s6 [73, 73] { R10145 += 1, R10101 += 1, R9830 += 1, R9831 += 1 };
  s0 -> s7 [73, 73] { R10145 += 1, R10101 += 1, R9831 += 1, R9832 += 1 };
  s0 -> s1 [74, 65535] { R10145 += 1, R10101 += 1, R9831 += 1, R9832 += 1 };
  s0 -> s2 [74, 65535] { R10145 += 1, R10101 += 1, R9830 += 1, R9831 += 1 };
  s1 -> s1 [0, 72] { R10145 += 1, R10101 += 1, R9831 += 1, R9832 += 1 };
  s1 -> s11 [0, 72] { R10145 += 1, R10101 += 1 };
  s1 -> s12 [73, 73] { R10145 += 1, R10101 += 1 };
  s1 -> s8 [73, 73] { R10145 += 1, R10101 += 1 };
  s1 -> s4 [73, 73] { R10145 += 1, R10101 += 1, R9831 += 1, R9832 += 1 };
  s1 -> s7 [73, 73] { R10145 += 1, R10101 += 1, R9831 += 1, R9832 += 1 };
  s1 -> s1 [74, 65535] { R10145 += 1, R10101 += 1, R9831 += 1, R9832 += 1 };
  s1 -> s11 [74, 65535] { R10145 += 1, R10101 += 1 };
  s2 -> s1 [0, 72] { R10145 += 1, R10101 += 1, R9831 += 1, R9832 += 1 };
  s2 -> s2 [0, 72] { R10145 += 1, R10101 += 1, R9830 += 1, R9831 += 1 };
  s2 -> s4 [73, 73] { R10145 += 1, R10101 += 1, R9831 += 1, R9832 += 1 };
  s2 -> s5 [73, 73] { R10145 += 1, R10101 += 1, R9830 += 1, R9831 += 1 };
  s2 -> s6 [73, 73] { R10145 += 1, R10101 += 1, R9830 += 1, R9831 += 1 };
  s2 -> s7 [73, 73] { R10145 += 1, R10101 += 1, R9831 += 1, R9832 += 1 };
  s2 -> s1 [74, 65535] { R10145 += 1, R10101 += 1, R9831 += 1, R9832 += 1 };
  s2 -> s2 [74, 65535] { R10145 += 1, R10101 += 1, R9830 += 1, R9831 += 1 };
  s3 -> s1 [0, 72] { R10145 += 1, R10101 += 1, R9831 += 1, R9832 += 1 };
  s3 -> s2 [0, 72] { R10145 += 1, R10101 += 1, R9830 += 1, R9831 += 1 };
  s3 -> s3 [0, 65535] { R10145 += 1, R10100 += 1, R10101 += 1 };
  s3 -> s4 [73, 73] { R10145 += 1, R10101 += 1, R9831 += 1, R9832 += 1 };
  s3 -> s5 [73, 73] { R10145 += 1, R10101 += 1, R9830 += 1, R9831 += 1 };
  s3 -> s6 [73, 73] { R10145 += 1, R10101 += 1, R9830 += 1, R9831 += 1 };
  s3 -> s7 [73, 73] { R10145 += 1, R10101 += 1, R9831 += 1, R9832 += 1 };
  s3 -> s1 [74, 65535] { R10145 += 1, R10101 += 1, R9831 += 1, R9832 += 1 };
  s3 -> s2 [74, 65535] { R10145 += 1, R10101 += 1, R9830 += 1, R9831 += 1 };
  s4 -> s8 [0, 65535] { R10145 += 1, R10101 += 1 };
  s4 -> s4 [0, 65535] { R10145 += 1, R10101 += 1, R9831 += 1, R9832 += 1 };
  s5 -> s4 [0, 65535] { R10145 += 1, R10101 += 1, R9831 += 1, R9832 += 1 };
  s5 -> s5 [0, 65535] { R10145 += 1, R10101 += 1, R9830 += 1, R9831 += 1 };
  s8 -> s8 [0, 65535] { R10145 += 1, R10101 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [0, 65535] { R10145 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R10145 += 1 };
  s11 -> s11 [0, 72] { R10145 += 1, R10101 += 1 };
  s11 -> s11 [0, 65535] { R10145 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s12 [73, 73] { R10145 += 1, R10101 += 1 };
  s11 -> s8 [73, 73] { R10145 += 1, R10101 += 1 };
  s11 -> s11 [74, 65535] { R10145 += 1, R10101 += 1 };
  s12 -> s12 [0, 65535] { R10145 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 72] { R10147 += 1, R10103 += 1, R10044 += 1, R10045 += 1 };
  s0 -> s2 [0, 72] { R10147 += 1, R10103 += 1, R10045 += 1 };
  s0 -> s0 [0, 65535] { R10146 += 1, R10147 += 1 };
  s0 -> s3 [0, 65535] { R10147 += 1, R10102 += 1, R10103 += 1 };
  s0 -> s4 [73, 73] { R10147 += 1, R10103 += 1, R10044 += 1, R10045 += 1 };
  s0 -> s5 [73, 73] { R10147 += 1, R10103 += 1, R10045 += 1 };
  s0 -> s6 [73, 73] { R10147 += 1, R10103 += 1, R10045 += 1 };
  s0 -> s7 [73, 73] { R10147 += 1, R10103 += 1, R10044 += 1, R10045 += 1 };
  s0 -> s2 [74, 76] { R10147 += 1, R10103 += 1, R10045 += 1 };
  s0 -> s1 [74, 65535] { R10147 += 1, R10103 += 1, R10044 += 1, R10045 += 1 };
  s0 -> s8 [77, 77] { R10147 += 1, R10103 += 1, R10045 += 1 };
  s0 -> s2 [82, 65535] { R10147 += 1, R10103 += 1, R10045 += 1 };
  s1 -> s1 [0, 72] { R10147 += 1, R10103 += 1, R10044 += 1, R10045 += 1 };
  s1 -> s2 [0, 72] { R10147 += 1, R10103 += 1, R10045 += 1 };
  s1 -> s4 [73, 73] { R10147 += 1, R10103 += 1, R10044 += 1, R10045 += 1 };
  s1 -> s5 [73, 73] { R10147 += 1, R10103 += 1, R10045 += 1 };
  s1 -> s6 [73, 73] { R10147 += 1, R10103 += 1, R10045 += 1 };
  s1 -> s7 [73, 73] { R10147 += 1, R10103 += 1, R10044 += 1, R10045 += 1 };
  s1 -> s2 [74, 76] { R10147 += 1, R10103 += 1, R10045 += 1 };
  s1 -> s1 [74, 65535] { R10147 += 1, R10103 += 1, R10044 += 1, R10045 += 1 };
  s1 -> s8 [77, 77] { R10147 += 1, R10103 += 1, R10045 += 1 };
  s1 -> s2 [82, 65535] { R10147 += 1, R10103 += 1, R10045 += 1 };
  s2 -> s2 [0, 72] { R10147 += 1, R10103 += 1, R10045 += 1 };
  s2 -> s5 [73, 73] { R10147 += 1, R10103 += 1 };
  s2 -> s6 [73, 73] { R10147 += 1, R10103 += 1 };
  s2 -> s2 [74, 76] { R10147 += 1, R10103 += 1, R10045 += 1 };
  s2 -> s2 [74, 65535] { R10147 += 1, R10103 += 1 };
  s2 -> s8 [77, 77] { R10147 += 1, R10103 += 1, R10045 += 1 };
  s2 -> s2 [82, 65535] { R10147 += 1, R10103 += 1, R10045 += 1 };
  s3 -> s1 [0, 72] { R10147 += 1, R10103 += 1, R10044 += 1, R10045 += 1 };
  s3 -> s2 [0, 72] { R10147 += 1, R10103 += 1, R10045 += 1 };
  s3 -> s3 [0, 65535] { R10147 += 1, R10102 += 1, R10103 += 1 };
  s3 -> s4 [73, 73] { R10147 += 1, R10103 += 1, R10044 += 1, R10045 += 1 };
  s3 -> s5 [73, 73] { R10147 += 1, R10103 += 1, R10045 += 1 };
  s3 -> s6 [73, 73] { R10147 += 1, R10103 += 1, R10045 += 1 };
  s3 -> s7 [73, 73] { R10147 += 1, R10103 += 1, R10044 += 1, R10045 += 1 };
  s3 -> s2 [74, 76] { R10147 += 1, R10103 += 1, R10045 += 1 };
  s3 -> s1 [74, 65535] { R10147 += 1, R10103 += 1, R10044 += 1, R10045 += 1 };
  s3 -> s8 [77, 77] { R10147 += 1, R10103 += 1, R10045 += 1 };
  s3 -> s2 [82, 65535] { R10147 += 1, R10103 += 1, R10045 += 1 };
  s4 -> s6 [0, 76] { R10147 += 1, R10103 += 1, R10045 += 1 };
  s4 -> s4 [0, 65535] { R10147 += 1, R10103 += 1, R10044 += 1, R10045 += 1 };
  s4 -> s10 [77, 77] { R10147 += 1, R10103 += 1, R10045 += 1 };
  s4 -> s6 [82, 65535] { R10147 += 1, R10103 += 1, R10045 += 1 };
  s6 -> s6 [0, 76] { R10147 += 1, R10103 += 1, R10045 += 1 };
  s6 -> s6 [0, 65535] { R10147 += 1, R10103 += 1 };
  s6 -> s10 [77, 77] { R10147 += 1, R10103 += 1, R10045 += 1 };
  s6 -> s6 [82, 65535] { R10147 += 1, R10103 += 1, R10045 += 1 };
  s8 -> s8 [0, 72] { R10147 += 1, R10103 += 1, R10045 += 1 };
  s8 -> s8 [0, 65535] { R10147 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [73, 73] { R10147 += 1, R10103 += 1 };
  s8 -> s11 [73, 73] { R10147 += 1, R10103 += 1 };
  s8 -> s8 [74, 77] { R10147 += 1, R10103 += 1, R10045 += 1 };
  s8 -> s8 [74, 65535] { R10147 += 1, R10103 += 1 };
  s8 -> s8 [82, 65535] { R10147 += 1, R10103 += 1, R10045 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 77] { R10147 += 1, R10103 += 1, R10045 += 1 };
  s10 -> s12 [0, 65535] { R10147 += 1 };
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R10147 += 1, R10103 += 1 };
  s10 -> s10 [82, 65535] { R10147 += 1, R10103 += 1, R10045 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R10147 += 1 };
  s12 -> s12 [0, 65535] { R10147 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
synchronised {  // Automata constraining P54
automaton P54_0 {
  init s0;
  s0 -> s1 [109, 109];
  accepting s1;
};
};
constraint R1 = R10063 && R2 = R10147 && R20 - R10147 = -1 && R21 = R10147 && R22 - R10147 = -1 && R23 = R10147 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R8985 + -1*R8983 - R53 = 0 && R52 + R8984 + R8982 = 0 && R10062 = 0 && R10088 = 0 && R10089 = 0 && R10096 = 0 && R10097 = 0 && R10100 = 0 && R10101 = 0 && R10102 = 0 && R10103 = 0 && R10104 = 0 && R10105 = R10147 && R10106 = 0 && R10107 = R10147 && R10108 = 0 && R10109 = R10147 && R10110 = 0 && R10111 = R10147 && R10112 = 0 && R10113 = R10147 && R10114 = 0 && R10115 = R10147 && R10116 = 0 && R10117 = R10147 && R10118 = 0 && R10119 = R10147 && R10120 = 0 && R10121 = R10147 && R10122 = 0 && R10123 = R10147 && R10124 = 0 && R10125 = R10147 && R10126 = 0 && R10127 = R10147 && R10128 = 0 && R10129 = R10147 && R10130 = 0 && R10131 = R10147 && R10132 = 0 && R10133 = R10147 && R10134 = 0 && R10135 = R10147 && R10136 = 0 && R10137 = R10147 && R10138 = 0 && R10139 = R10147 && R10140 = 0 && R10141 = R10147 && R10142 = 0 && R10143 = R10147 && R10144 = 0 && R10145 = R10147 && R10146 = 0 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R8985 + -1*R8983 - R53 < 1 && -1 < R10063 && 0 < R10147 && (R48 + R7711 + R7708 != 0 || ((R42 + R72 + R70 != 0 || R43 + R73 + R71 + -1*R8985 + -1*R8983 - R53 = 0 || R53 + R8985 + R8983 < 1) && (R42 + R72 + R70 = 0 || R53 + R8985 + R8983 < 1))) && (R48 + R7711 + R7708 != 0 || ((R46 + R7709 + R7706 != 0 || R47 + R7710 + R7707 + -1*R8985 + -1*R8983 - R53 = 0 || R53 + R8985 + R8983 < 1) && (R46 + R7709 + R7706 = 0 || R53 + R8985 + R8983 < 1))) && (R10048 != 0 || R10049 = R10063 || (R17 = 0 && R10063 = 0)) && (R10050 != 0 || R10051 = R10063 || (R17 = 0 && R10063 = 0)) && (R10052 != 0 || R10053 = R10063 || (R17 = 0 && R10063 = 0)) && (R10054 != 0 || R10055 = R10063 || (R17 = 0 && R10063 = 0)) && (R10056 != 0 || R10057 = R10063 || (R17 = 0 && R10063 = 0)) && (R10058 != 0 || R10059 = R10063 || (R17 = 0 && R10063 = 0)) && (R10060 != 0 || R10061 = R10063 || (R17 = 0 && R10063 = 0)) && (R10064 != 0 || R10063 = R10065 || (R17 = 0 && R10063 = 0)) && (R10066 != 0 || R10063 = R10067 || (R17 = 0 && R10063 = 0)) && (R18 = 0 || (R10086 = 0 && R10087 = 0)) && (R18 = 0 || (R10090 = 0 && R10091 = 0)) && (R18 = 0 || (R10092 = 0 && R10093 = 0)) && (R18 = 0 || (R10094 = 0 && R10095 = 0)) && (R18 = 0 || (R10098 = 0 && R10099 = 0)) && (R19 = 0 || (R10068 = 0 && R10069 = 0)) && (R19 = 0 || (R10070 = 0 && R10071 = 0)) && (R19 = 0 || (R10072 = 0 && R10073 = 0)) && (R19 = 0 || (R10074 = 0 && R10075 = 0)) && (R19 = 0 || (R10076 = 0 && R10077 = 0)) && (R19 = 0 || (R10078 = 0 && R10079 = 0)) && (R19 = 0 || (R10080 = 0 && R10081 = 0)) && (R19 = 0 || (R10082 = 0 && R10083 = 0)) && (R19 = 0 || (R10084 = 0 && R10085 = 0)) && (R48 + R7711 + R7708 = 0 || (R42 + R72 + R70 = 0 && R43 + R73 + R71 + -1*R8985 + -1*R8983 - R53 = 0)) && (R48 + R7711 + R7708 = 0 || (R46 + R7709 + R7706 = 0 && R47 + R7710 + R7707 + -1*R8985 + -1*R8983 - R53 = 0)) && (R58 + R9835 + R9832 = 0 || (R56 + R9833 + R9830 = 0 && R57 + R9834 + R9831 = 0)) && (R58 + R9835 + R9832 = 0 || (R62 + R10046 + R10044 = 0 && R63 + R10047 + R10045 = 0)) && (R10048 = 0 || (R17 = 0 && R10063 = 0)) && (R10050 = 0 || (R17 = 0 && R10063 = 0)) && (R10052 = 0 || (R17 = 0 && R10063 = 0)) && (R10054 = 0 || (R17 = 0 && R10063 = 0)) && (R10056 = 0 || (R17 = 0 && R10063 = 0)) && (R10058 = 0 || (R17 = 0 && R10063 = 0)) && (R10060 = 0 || (R17 = 0 && R10063 = 0)) && (R10064 = 0 || (R17 = 0 && R10063 = 0)) && (R10066 = 0 || (R17 = 0 && R10063 = 0));
// End of Parikh automata intersection problem
