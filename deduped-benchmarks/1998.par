// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R12, R14, R15, R16, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R4, R484, R485, R486, R487, R488, R489, R490, R491, R492, R493, R494, R495, R496, R497, R498, R499, R5, R500, R501, R502, R503, R504, R505, R506, R507, R508, R509, R510, R511, R512, R513, R514, R515, R516, R517, R518, R519, R520, R521, R522, R523, R524, R525, R526, R527, R528, R529, R530, R531, R532, R533, R534, R535, R536, R537, R538, R539, R540, R541, R542, R543, R544, R545, R546, R547, R548, R549, R550, R551, R552, R553, R554, R555, R556, R557, R558, R559, R560, R561, R562, R563, R9;
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [100, 100];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s1 [9, 9] { R25 += 1 };
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value2_4 {
  init s0;
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s0 -> s1 [0, 65535] { R27 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R27 += 1, R5 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 64] { R525 += 1 };
  s0 -> s0 [0, 65535] { R524 += 1, R525 += 1 };
  s0 -> s2 [68, 68] { R525 += 1 };
  s0 -> s1 [69, 65535] { R525 += 1 };
  s1 -> s1 [0, 64] { R525 += 1 };
  s1 -> s2 [68, 68] { R525 += 1 };
  s1 -> s1 [69, 65535] { R525 += 1 };
  s2 -> s2 [0, 64] { R525 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [68, 65535] { R525 += 1 };
  accepting s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 65535] { R527 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R526 += 1, R527 += 1 };
  s1 -> s1 [0, 65535] { R527 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 67] { R529 += 1 };
  s0 -> s0 [0, 65535] { R528 += 1, R529 += 1 };
  s0 -> s2 [0, 65535] { R529 += 1, R9 += 1 };
  s0 -> s3 [68, 68] { R529 += 1 };
  s0 -> s1 [69, 65535] { R529 += 1 };
  s1 -> s1 [0, 67] { R529 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [68, 68] { R529 += 1 };
  s1 -> s1 [69, 65535] { R529 += 1 };
  s2 -> s1 [0, 67] { R529 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R529 += 1, R9 += 1 };
  s2 -> s3 [68, 68] { R529 += 1 };
  s2 -> s1 [69, 65535] { R529 += 1 };
  s3 -> s3 [0, 65535] { R529 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 8] { R531 += 1, R17 += 1 };
  s0 -> s0 [0, 65535] { R530 += 1, R531 += 1 };
  s0 -> s2 [0, 65535] { R531 += 1, R16 += 1, R17 += 1 };
  s0 -> s3 [9, 13] { R531 += 1, R17 += 1 };
  s0 -> s1 [14, 31] { R531 += 1, R17 += 1 };
  s0 -> s3 [32, 32] { R531 += 1, R17 += 1 };
  s0 -> s1 [33, 65535] { R531 += 1, R17 += 1 };
  s1 -> s1 [0, 65535] { R531 += 1, R17 += 1 };
  s1 -> s5 [0, 65535] { R531 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R531 += 1, R17 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R531 += 1, R16 += 1, R17 += 1 };
  s2 -> s3 [9, 13] { R531 += 1, R17 += 1 };
  s2 -> s1 [14, 31] { R531 += 1, R17 += 1 };
  s2 -> s3 [32, 32] { R531 += 1, R17 += 1 };
  s2 -> s1 [33, 65535] { R531 += 1, R17 += 1 };
  s3 -> s1 [0, 65535] { R531 += 1, R17 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R531 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value2_9 {
  init s0;
  s0 -> s0 [0, 65535] { R532 += 1, R533 += 1 };
  s0 -> s1 [0, 65535] { R533 += 1, R19 += 1, R3 += 1 };
  s0 -> s2 [0, 65535] { R533 += 1, R18 += 1, R19 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R533 += 1 };
  s1 -> s1 [0, 65535] { R533 += 1, R19 += 1, R3 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R533 += 1, R19 += 1, R3 += 1 };
  s2 -> s2 [0, 65535] { R533 += 1, R18 += 1, R19 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R533 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 8] { R535 += 1, R21 += 1 };
  s0 -> s0 [0, 65535] { R534 += 1, R535 += 1 };
  s0 -> s2 [0, 65535] { R535 += 1, R20 += 1, R21 += 1 };
  s0 -> s3 [9, 13] { R535 += 1, R21 += 1 };
  s0 -> s1 [14, 31] { R535 += 1, R21 += 1 };
  s0 -> s3 [32, 32] { R535 += 1, R21 += 1 };
  s0 -> s1 [33, 65535] { R535 += 1, R21 += 1 };
  s1 -> s1 [0, 65535] { R535 += 1, R21 += 1 };
  s1 -> s5 [0, 65535] { R535 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R535 += 1, R21 += 1 };
  s2 -> s2 [0, 65535] { R535 += 1, R20 += 1, R21 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R535 += 1, R21 += 1 };
  s2 -> s1 [14, 31] { R535 += 1, R21 += 1 };
  s2 -> s3 [32, 32] { R535 += 1, R21 += 1 };
  s2 -> s1 [33, 65535] { R535 += 1, R21 += 1 };
  s3 -> s1 [0, 65535] { R535 += 1, R21 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R535 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 65535] { R537 += 1, R23 += 1, R4 += 1 };
  s0 -> s2 [0, 65535] { R537 += 1, R22 += 1, R23 += 1 };
  s0 -> s0 [0, 65535] { R536 += 1, R537 += 1 };
  s1 -> s1 [0, 65535] { R537 += 1, R23 += 1, R4 += 1 };
  s1 -> s4 [0, 65535] { R537 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R537 += 1, R23 += 1, R4 += 1 };
  s2 -> s2 [0, 65535] { R537 += 1, R22 += 1, R23 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R537 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 67] { R539 += 1, R499 += 1 };
  s0 -> s2 [0, 65535] { R539 += 1, R498 += 1, R499 += 1 };
  s0 -> s0 [0, 65535] { R538 += 1, R539 += 1 };
  s0 -> s1 [69, 65535] { R539 += 1, R499 += 1 };
  s1 -> s1 [0, 67] { R539 += 1, R499 += 1 };
  s1 -> s1 [0, 65535] { R539 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [69, 65535] { R539 += 1, R499 += 1 };
  s2 -> s1 [0, 67] { R539 += 1, R499 += 1 };
  s2 -> s2 [0, 65535] { R539 += 1, R498 += 1, R499 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [69, 65535] { R539 += 1, R499 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_13 {
  init s0;
  s0 -> s0 [0, 65535] { R540 += 1, R541 += 1 };
  s0 -> s1 [0, 65535] { R541 += 1, R501 += 1, R14 += 1 };
  s0 -> s2 [0, 65535] { R541 += 1, R500 += 1, R501 += 1 };
  s1 -> s4 [0, 65535] { R541 += 1 };
  s1 -> s1 [0, 65535] { R541 += 1, R501 += 1, R14 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R541 += 1, R501 += 1, R14 += 1 };
  s2 -> s2 [0, 65535] { R541 += 1, R500 += 1, R501 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R541 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 68] { R543 += 1, R503 += 1 };
  s0 -> s0 [0, 65535] { R542 += 1, R543 += 1 };
  s0 -> s2 [0, 65535] { R543 += 1, R502 += 1, R503 += 1 };
  s0 -> s1 [82, 65535] { R543 += 1, R503 += 1 };
  s1 -> s1 [0, 68] { R543 += 1, R503 += 1 };
  s1 -> s1 [0, 65535] { R543 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [82, 65535] { R543 += 1, R503 += 1 };
  s2 -> s1 [0, 68] { R543 += 1, R503 += 1 };
  s2 -> s2 [0, 65535] { R543 += 1, R502 += 1, R503 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [82, 65535] { R543 += 1, R503 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 65535] { R545 += 1, R504 += 1, R505 += 1 };
  s0 -> s0 [0, 65535] { R544 += 1, R545 += 1 };
  s0 -> s2 [0, 65535] { R545 += 1, R505 += 1, R485 += 1 };
  s1 -> s1 [0, 65535] { R545 += 1, R504 += 1, R505 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R545 += 1, R505 += 1, R485 += 1 };
  s2 -> s3 [0, 65535] { R545 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R545 += 1, R505 += 1, R485 += 1 };
  s3 -> s3 [0, 65535] { R545 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 81] { R547 += 1, R507 += 1 };
  s0 -> s2 [0, 65535] { R547 += 1, R507 += 1, R487 += 1 };
  s0 -> s0 [0, 65535] { R546 += 1, R547 += 1 };
  s0 -> s3 [0, 65535] { R547 += 1, R506 += 1, R507 += 1 };
  s0 -> s1 [83, 65535] { R547 += 1, R507 += 1 };
  s1 -> s1 [0, 81] { R547 += 1, R507 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R547 += 1 };
  s1 -> s1 [83, 65535] { R547 += 1, R507 += 1 };
  s2 -> s1 [0, 81] { R547 += 1, R507 += 1 };
  s2 -> s5 [0, 65535] { R547 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R547 += 1, R507 += 1, R487 += 1 };
  s2 -> s1 [83, 65535] { R547 += 1, R507 += 1 };
  s3 -> s1 [0, 81] { R547 += 1, R507 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R547 += 1, R507 += 1, R487 += 1 };
  s3 -> s3 [0, 65535] { R547 += 1, R506 += 1, R507 += 1 };
  s3 -> s1 [83, 65535] { R547 += 1, R507 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R547 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 81] { R549 += 1, R509 += 1, R491 += 1 };
  s0 -> s2 [0, 65535] { R549 += 1, R508 += 1, R509 += 1 };
  s0 -> s0 [0, 65535] { R548 += 1, R549 += 1 };
  s0 -> s3 [0, 65535] { R549 += 1, R509 += 1, R490 += 1, R491 += 1 };
  s0 -> s4 [82, 82] { R549 += 1, R509 += 1, R491 += 1 };
  s0 -> s1 [83, 65535] { R549 += 1, R509 += 1, R491 += 1 };
  s1 -> s1 [0, 81] { R549 += 1, R509 += 1, R491 += 1 };
  s1 -> s4 [82, 82] { R549 += 1, R509 += 1, R491 += 1 };
  s1 -> s1 [83, 65535] { R549 += 1, R509 += 1, R491 += 1 };
  s2 -> s1 [0, 81] { R549 += 1, R509 += 1, R491 += 1 };
  s2 -> s2 [0, 65535] { R549 += 1, R508 += 1, R509 += 1 };
  s2 -> s3 [0, 65535] { R549 += 1, R509 += 1, R490 += 1, R491 += 1 };
  s2 -> s4 [82, 82] { R549 += 1, R509 += 1, R491 += 1 };
  s2 -> s1 [83, 65535] { R549 += 1, R509 += 1, R491 += 1 };
  s3 -> s1 [0, 81] { R549 += 1, R509 += 1, R491 += 1 };
  s3 -> s3 [0, 65535] { R549 += 1, R509 += 1, R490 += 1, R491 += 1 };
  s3 -> s4 [82, 82] { R549 += 1, R509 += 1, R491 += 1 };
  s3 -> s1 [83, 65535] { R549 += 1, R509 += 1, R491 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R549 += 1 };
  s4 -> s7 [0, 65535] { R549 += 1, R509 += 1 };
  s4 -> s4 [0, 65535] { R549 += 1, R509 += 1, R491 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R549 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R549 += 1 };
  s7 -> s7 [0, 65535] { R549 += 1, R509 += 1 };
  accepting s4, s5, s6, s7;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R550 += 1, R551 += 1 };
  s0 -> s1 [0, 65535] { R551 += 1, R510 += 1, R511 += 1 };
  s0 -> s2 [0, 65535] { R551 += 1, R511 += 1, R496 += 1, R497 += 1 };
  s0 -> s3 [0, 65535] { R551 += 1, R511 += 1, R495 += 1, R496 += 1 };
  s1 -> s1 [0, 65535] { R551 += 1, R510 += 1, R511 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s2 [0, 65535] { R551 += 1, R511 += 1, R496 += 1, R497 += 1 };
  s1 -> s3 [0, 65535] { R551 += 1, R511 += 1, R495 += 1, R496 += 1 };
  s2 -> s4 [0, 65535] { R551 += 1 };
  s2 -> s6 [0, 65535] { R551 += 1, R511 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R551 += 1, R511 += 1, R496 += 1, R497 += 1 };
  s3 -> s4 [0, 65535] { R551 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R551 += 1, R511 += 1, R496 += 1, R497 += 1 };
  s3 -> s3 [0, 65535] { R551 += 1, R511 += 1, R495 += 1, R496 += 1 };
  s4 -> s4 [0, 65535] { R551 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R551 += 1 };
  s6 -> s6 [0, 65535] { R551 += 1, R511 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_19 {
  init s0;
  s0 -> s0 [0, 65535] { R552 += 1, R553 += 1 };
  s0 -> s1 [0, 65535] { R553 += 1, R512 += 1, R513 += 1 };
  s0 -> s2 [0, 65535] { R553 += 1, R513 += 1, R15 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R553 += 1, R512 += 1, R513 += 1 };
  s1 -> s2 [0, 65535] { R553 += 1, R513 += 1, R15 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R553 += 1 };
  s2 -> s2 [0, 65535] { R553 += 1, R513 += 1, R15 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R553 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 67] { R555 += 1, R515 += 1 };
  s0 -> s0 [0, 65535] { R554 += 1, R555 += 1 };
  s0 -> s2 [0, 65535] { R555 += 1, R514 += 1, R515 += 1 };
  s0 -> s3 [68, 68] { R555 += 1, R515 += 1 };
  s0 -> s4 [68, 68] { R555 += 1, R515 += 1 };
  s0 -> s5 [82, 82] { R555 += 1, R515 += 1 };
  s0 -> s1 [83, 65535] { R555 += 1, R515 += 1 };
  s1 -> s1 [0, 67] { R555 += 1, R515 += 1 };
  s1 -> s3 [68, 68] { R555 += 1, R515 += 1 };
  s1 -> s4 [68, 68] { R555 += 1, R515 += 1 };
  s1 -> s5 [82, 82] { R555 += 1, R515 += 1 };
  s1 -> s1 [83, 65535] { R555 += 1, R515 += 1 };
  s2 -> s1 [0, 67] { R555 += 1, R515 += 1 };
  s2 -> s2 [0, 65535] { R555 += 1, R514 += 1, R515 += 1 };
  s2 -> s3 [68, 68] { R555 += 1, R515 += 1 };
  s2 -> s4 [68, 68] { R555 += 1, R515 += 1 };
  s2 -> s5 [82, 82] { R555 += 1, R515 += 1 };
  s2 -> s1 [83, 65535] { R555 += 1, R515 += 1 };
  s4 -> s4 [0, 68] { R555 += 1, R515 += 1 };
  s4 -> s8 [82, 82] { R555 += 1, R515 += 1 };
  s4 -> s4 [83, 65535] { R555 += 1, R515 += 1 };
  s5 -> s5 [0, 67] { R555 += 1, R515 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R555 += 1 };
  s5 -> s7 [68, 68] { R555 += 1, R515 += 1 };
  s5 -> s8 [68, 68] { R555 += 1, R515 += 1 };
  s5 -> s5 [82, 65535] { R555 += 1, R515 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R555 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 68] { R555 += 1, R515 += 1 };
  s8 -> s8 [0, 65535] { R555 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [82, 65535] { R555 += 1, R515 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 67] { R557 += 1, R517 += 1, R484 += 1 };
  s0 -> s0 [0, 65535] { R556 += 1, R557 += 1 };
  s0 -> s2 [0, 65535] { R557 += 1, R516 += 1, R517 += 1 };
  s0 -> s3 [68, 68] { R557 += 1, R517 += 1, R484 += 1 };
  s0 -> s4 [68, 68] { R557 += 1, R517 += 1, R484 += 1 };
  s0 -> s1 [69, 65535] { R557 += 1, R517 += 1, R484 += 1 };
  s1 -> s1 [0, 67] { R557 += 1, R517 += 1, R484 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R557 += 1 };
  s1 -> s3 [68, 68] { R557 += 1, R517 += 1, R484 += 1 };
  s1 -> s4 [68, 68] { R557 += 1, R517 += 1, R484 += 1 };
  s1 -> s1 [69, 65535] { R557 += 1, R517 += 1, R484 += 1 };
  s2 -> s1 [0, 67] { R557 += 1, R517 += 1, R484 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R557 += 1, R516 += 1, R517 += 1 };
  s2 -> s3 [68, 68] { R557 += 1, R517 += 1, R484 += 1 };
  s2 -> s4 [68, 68] { R557 += 1, R517 += 1, R484 += 1 };
  s2 -> s1 [69, 65535] { R557 += 1, R517 += 1, R484 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R557 += 1, R517 += 1, R484 += 1 };
  s3 -> s6 [0, 65535] { R557 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R557 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R557 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 67] { R559 += 1, R519 += 1, R486 += 1 };
  s0 -> s0 [0, 65535] { R558 += 1, R559 += 1 };
  s0 -> s2 [0, 65535] { R559 += 1, R518 += 1, R519 += 1 };
  s0 -> s3 [68, 68] { R559 += 1, R519 += 1, R486 += 1 };
  s0 -> s4 [68, 68] { R559 += 1, R519 += 1, R486 += 1 };
  s0 -> s1 [69, 65535] { R559 += 1, R519 += 1, R486 += 1 };
  s1 -> s1 [0, 67] { R559 += 1, R519 += 1, R486 += 1 };
  s1 -> s1 [0, 65535] { R559 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [68, 68] { R559 += 1, R519 += 1, R486 += 1 };
  s1 -> s4 [68, 68] { R559 += 1, R519 += 1, R486 += 1 };
  s1 -> s1 [69, 65535] { R559 += 1, R519 += 1, R486 += 1 };
  s2 -> s1 [0, 67] { R559 += 1, R519 += 1, R486 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R559 += 1, R518 += 1, R519 += 1 };
  s2 -> s3 [68, 68] { R559 += 1, R519 += 1, R486 += 1 };
  s2 -> s4 [68, 68] { R559 += 1, R519 += 1, R486 += 1 };
  s2 -> s1 [69, 65535] { R559 += 1, R519 += 1, R486 += 1 };
  s3 -> s3 [0, 65535] { R559 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R559 += 1 };
  s4 -> s4 [0, 65535] { R559 += 1, R519 += 1, R486 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R559 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 67] { R561 += 1, R521 += 1, R488 += 1, R489 += 1 };
  s0 -> s0 [0, 65535] { R560 += 1, R561 += 1 };
  s0 -> s2 [0, 65535] { R561 += 1, R520 += 1, R521 += 1 };
  s0 -> s3 [68, 68] { R561 += 1, R521 += 1, R488 += 1, R489 += 1 };
  s0 -> s4 [68, 68] { R561 += 1, R521 += 1, R488 += 1, R489 += 1 };
  s0 -> s1 [69, 65535] { R561 += 1, R521 += 1, R488 += 1, R489 += 1 };
  s1 -> s1 [0, 67] { R561 += 1, R521 += 1, R488 += 1, R489 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R561 += 1 };
  s1 -> s3 [68, 68] { R561 += 1, R521 += 1, R488 += 1, R489 += 1 };
  s1 -> s4 [68, 68] { R561 += 1, R521 += 1, R488 += 1, R489 += 1 };
  s1 -> s1 [69, 65535] { R561 += 1, R521 += 1, R488 += 1, R489 += 1 };
  s2 -> s1 [0, 67] { R561 += 1, R521 += 1, R488 += 1, R489 += 1 };
  s2 -> s2 [0, 65535] { R561 += 1, R520 += 1, R521 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [68, 68] { R561 += 1, R521 += 1, R488 += 1, R489 += 1 };
  s2 -> s4 [68, 68] { R561 += 1, R521 += 1, R488 += 1, R489 += 1 };
  s2 -> s1 [69, 65535] { R561 += 1, R521 += 1, R488 += 1, R489 += 1 };
  s3 -> s3 [0, 65535] { R561 += 1, R521 += 1, R488 += 1, R489 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R561 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R561 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R561 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 67] { R563 += 1, R523 += 1, R492 += 1, R493 += 1 };
  s0 -> s0 [0, 65535] { R562 += 1, R563 += 1 };
  s0 -> s2 [0, 65535] { R563 += 1, R522 += 1, R523 += 1 };
  s0 -> s3 [68, 68] { R563 += 1, R523 += 1, R492 += 1, R493 += 1 };
  s0 -> s4 [68, 68] { R563 += 1, R523 += 1, R492 += 1, R493 += 1 };
  s0 -> s1 [69, 65535] { R563 += 1, R523 += 1, R492 += 1, R493 += 1 };
  s1 -> s1 [0, 67] { R563 += 1, R523 += 1, R492 += 1, R493 += 1 };
  s1 -> s1 [0, 65535] { R563 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [68, 68] { R563 += 1, R523 += 1, R492 += 1, R493 += 1 };
  s1 -> s4 [68, 68] { R563 += 1, R523 += 1, R492 += 1, R493 += 1 };
  s1 -> s1 [69, 65535] { R563 += 1, R523 += 1, R492 += 1, R493 += 1 };
  s2 -> s1 [0, 67] { R563 += 1, R523 += 1, R492 += 1, R493 += 1 };
  s2 -> s2 [0, 65535] { R563 += 1, R522 += 1, R523 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [68, 68] { R563 += 1, R523 += 1, R492 += 1, R493 += 1 };
  s2 -> s4 [68, 68] { R563 += 1, R523 += 1, R492 += 1, R493 += 1 };
  s2 -> s1 [69, 65535] { R563 += 1, R523 += 1, R492 += 1, R493 += 1 };
  s3 -> s3 [0, 65535] { R563 += 1, R523 += 1, R492 += 1, R493 += 1 };
  s3 -> s6 [0, 65535] { R563 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R563 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R563 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R1 = R511 && R2 = R563 && R16 - R511 = -1 && R17 = R511 && R18 - R511 = -1 && R19 = R511 && R20 = 0 && R21 = 1 && R22 = 0 && R23 = 1 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R485 + R484 + -1*R491 + -1*R489 = 0 && R490 + R488 = 0 && R498 = 0 && R499 = R511 && R500 = 0 && R501 = R511 && R502 = 0 && R503 = R511 && R504 = 0 && R505 = R511 && R506 = 0 && R507 = R511 && R508 = 0 && R509 = R511 && R510 = 0 && R514 = 0 && R515 = 0 && R524 = 1 && R525 = R563 && R526 = 1 && R527 = R563 && R528 = 1 && R529 = R563 && R530 = 1 && R531 = R563 && R532 = 1 && R533 = R563 && R534 = 1 && R535 = R563 && R536 = 1 && R537 = R563 && R538 = 1 && R539 = R563 && R540 = 1 && R541 = R563 && R542 = 1 && R543 = R563 && R544 = 1 && R545 = R563 && R546 = 1 && R547 = R563 && R548 = 1 && R549 = R563 && R550 = 1 && R551 = R563 && R552 = 1 && R553 = R563 && R554 = 1 && R555 = R563 && R556 = 1 && R557 = R563 && R558 = 1 && R559 = R563 && R560 = 1 && R561 = R563 && R562 = 1 && R9 < 1 && R12 < 1 && R487 + R486 < 1 && -1*R491 + -1*R489 < 1 && 0 < R511 && 0 < R563 && (R491 + R489 != 0 || R497 + R494 = 0 || (R495 + R492 = 0 && R496 + R493 = 0)) && (R495 + R492 != 0 || R491 + R489 + -1*R496 + -1*R493 = 0 || R491 + R489 < 1) && (R15 = 0 || (R512 = 0 && R513 = 0)) && (R15 = 0 || (R516 = 0 && R517 = 0)) && (R15 = 0 || (R518 = 0 && R519 = 0)) && (R15 = 0 || (R520 = 0 && R521 = 0)) && (R15 = 0 || (R522 = 0 && R523 = 0)) && (R495 + R492 = 0 || R491 + R489 < 1);
// End of Parikh automata intersection problem
