// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R12, R14, R15, R16, R17, R18, R184, R185, R186, R187, R188, R189, R19, R190, R191, R192, R193, R194, R195, R196, R197, R198, R199, R2, R20, R200, R201, R202, R203, R204, R205, R206, R207, R208, R209, R21, R210, R211, R212, R213, R214, R215, R216, R217, R218, R219, R22, R220, R221, R222, R223, R224, R225, R226, R227, R228, R229, R23, R230, R231, R232, R233, R234, R235, R236, R237, R238, R239, R24, R240, R241, R242, R243, R244, R245, R246, R247, R248, R249, R25, R250, R251, R252, R253, R254, R255, R26, R27, R3, R32, R33, R34, R35, R36, R37, R38, R39, R4, R5, R9;
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [100, 100];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s1 [9, 9] { R25 += 1 };
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value2_4 {
  init s0;
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s0 -> s1 [0, 65535] { R27 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R27 += 1, R5 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 64] { R217 += 1 };
  s0 -> s0 [0, 65535] { R216 += 1, R217 += 1 };
  s0 -> s2 [68, 68] { R217 += 1 };
  s0 -> s1 [69, 65535] { R217 += 1 };
  s1 -> s1 [0, 64] { R217 += 1 };
  s1 -> s2 [68, 68] { R217 += 1 };
  s1 -> s1 [69, 65535] { R217 += 1 };
  s2 -> s2 [0, 64] { R217 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [68, 65535] { R217 += 1 };
  accepting s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 65535] { R219 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R218 += 1, R219 += 1 };
  s1 -> s1 [0, 65535] { R219 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 67] { R221 += 1 };
  s0 -> s2 [0, 65535] { R221 += 1, R9 += 1 };
  s0 -> s0 [0, 65535] { R220 += 1, R221 += 1 };
  s0 -> s3 [68, 68] { R221 += 1 };
  s0 -> s1 [69, 65535] { R221 += 1 };
  s1 -> s1 [0, 67] { R221 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [68, 68] { R221 += 1 };
  s1 -> s1 [69, 65535] { R221 += 1 };
  s2 -> s1 [0, 67] { R221 += 1 };
  s2 -> s2 [0, 65535] { R221 += 1, R9 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [68, 68] { R221 += 1 };
  s2 -> s1 [69, 65535] { R221 += 1 };
  s3 -> s3 [0, 65535] { R221 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 8] { R223 += 1, R17 += 1 };
  s0 -> s2 [0, 65535] { R223 += 1, R16 += 1, R17 += 1 };
  s0 -> s0 [0, 65535] { R222 += 1, R223 += 1 };
  s0 -> s3 [9, 13] { R223 += 1, R17 += 1 };
  s0 -> s1 [14, 31] { R223 += 1, R17 += 1 };
  s0 -> s3 [32, 32] { R223 += 1, R17 += 1 };
  s0 -> s1 [33, 65535] { R223 += 1, R17 += 1 };
  s1 -> s1 [0, 65535] { R223 += 1, R17 += 1 };
  s1 -> s5 [0, 65535] { R223 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R223 += 1, R17 += 1 };
  s2 -> s2 [0, 65535] { R223 += 1, R16 += 1, R17 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R223 += 1, R17 += 1 };
  s2 -> s1 [14, 31] { R223 += 1, R17 += 1 };
  s2 -> s3 [32, 32] { R223 += 1, R17 += 1 };
  s2 -> s1 [33, 65535] { R223 += 1, R17 += 1 };
  s3 -> s1 [0, 65535] { R223 += 1, R17 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R223 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value2_9 {
  init s0;
  s0 -> s0 [0, 65535] { R224 += 1, R225 += 1 };
  s0 -> s1 [0, 65535] { R225 += 1, R19 += 1, R3 += 1 };
  s0 -> s2 [0, 65535] { R225 += 1, R18 += 1, R19 += 1 };
  s1 -> s4 [0, 65535] { R225 += 1 };
  s1 -> s1 [0, 65535] { R225 += 1, R19 += 1, R3 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R225 += 1, R19 += 1, R3 += 1 };
  s2 -> s2 [0, 65535] { R225 += 1, R18 += 1, R19 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R225 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 8] { R227 += 1, R21 += 1 };
  s0 -> s0 [0, 65535] { R226 += 1, R227 += 1 };
  s0 -> s2 [0, 65535] { R227 += 1, R20 += 1, R21 += 1 };
  s0 -> s3 [9, 13] { R227 += 1, R21 += 1 };
  s0 -> s1 [14, 31] { R227 += 1, R21 += 1 };
  s0 -> s3 [32, 32] { R227 += 1, R21 += 1 };
  s0 -> s1 [33, 65535] { R227 += 1, R21 += 1 };
  s1 -> s1 [0, 65535] { R227 += 1, R21 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R227 += 1 };
  s2 -> s1 [0, 8] { R227 += 1, R21 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R227 += 1, R20 += 1, R21 += 1 };
  s2 -> s3 [9, 13] { R227 += 1, R21 += 1 };
  s2 -> s1 [14, 31] { R227 += 1, R21 += 1 };
  s2 -> s3 [32, 32] { R227 += 1, R21 += 1 };
  s2 -> s1 [33, 65535] { R227 += 1, R21 += 1 };
  s3 -> s1 [0, 65535] { R227 += 1, R21 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R227 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s0 [0, 65535] { R228 += 1, R229 += 1 };
  s0 -> s1 [0, 65535] { R229 += 1, R22 += 1, R23 += 1 };
  s0 -> s2 [0, 65535] { R229 += 1, R23 += 1, R4 += 1 };
  s1 -> s1 [0, 65535] { R229 += 1, R22 += 1, R23 += 1 };
  s1 -> s2 [0, 65535] { R229 += 1, R23 += 1, R4 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R229 += 1, R23 += 1, R4 += 1 };
  s2 -> s3 [0, 65535] { R229 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R229 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 67] { R231 += 1, R191 += 1 };
  s0 -> s2 [0, 65535] { R231 += 1, R190 += 1, R191 += 1 };
  s0 -> s0 [0, 65535] { R230 += 1, R231 += 1 };
  s0 -> s1 [69, 65535] { R231 += 1, R191 += 1 };
  s1 -> s1 [0, 67] { R231 += 1, R191 += 1 };
  s1 -> s1 [0, 65535] { R231 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [69, 65535] { R231 += 1, R191 += 1 };
  s2 -> s1 [0, 67] { R231 += 1, R191 += 1 };
  s2 -> s2 [0, 65535] { R231 += 1, R190 += 1, R191 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [69, 65535] { R231 += 1, R191 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 65535] { R233 += 1, R192 += 1, R193 += 1 };
  s0 -> s0 [0, 65535] { R232 += 1, R233 += 1 };
  s0 -> s2 [0, 65535] { R233 += 1, R193 += 1, R14 += 1 };
  s1 -> s1 [0, 65535] { R233 += 1, R192 += 1, R193 += 1 };
  s1 -> s2 [0, 65535] { R233 += 1, R193 += 1, R14 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R233 += 1, R193 += 1, R14 += 1 };
  s2 -> s3 [0, 65535] { R233 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R233 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 68] { R235 += 1, R195 += 1 };
  s0 -> s0 [0, 65535] { R234 += 1, R235 += 1 };
  s0 -> s2 [0, 65535] { R235 += 1, R194 += 1, R195 += 1 };
  s0 -> s3 [82, 82] { R235 += 1, R195 += 1 };
  s0 -> s1 [83, 65535] { R235 += 1, R195 += 1 };
  s1 -> s1 [0, 68] { R235 += 1, R195 += 1 };
  s1 -> s3 [82, 82] { R235 += 1, R195 += 1 };
  s1 -> s1 [83, 65535] { R235 += 1, R195 += 1 };
  s2 -> s1 [0, 68] { R235 += 1, R195 += 1 };
  s2 -> s2 [0, 65535] { R235 += 1, R194 += 1, R195 += 1 };
  s2 -> s3 [82, 82] { R235 += 1, R195 += 1 };
  s2 -> s1 [83, 65535] { R235 += 1, R195 += 1 };
  s3 -> s3 [0, 68] { R235 += 1, R195 += 1 };
  s3 -> s3 [0, 65535] { R235 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [82, 65535] { R235 += 1, R195 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton value2_15 {
  init s0;
  s0 -> s0 [0, 65535] { R236 += 1, R237 += 1 };
  s0 -> s1 [0, 65535] { R237 += 1, R196 += 1, R197 += 1 };
  s0 -> s2 [0, 65535] { R237 += 1, R197 += 1, R33 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R237 += 1, R196 += 1, R197 += 1 };
  s1 -> s2 [0, 65535] { R237 += 1, R197 += 1, R33 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R237 += 1 };
  s2 -> s2 [0, 65535] { R237 += 1, R197 += 1, R33 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R237 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 81] { R239 += 1, R199 += 1 };
  s0 -> s2 [0, 65535] { R239 += 1, R198 += 1, R199 += 1 };
  s0 -> s3 [0, 65535] { R239 += 1, R199 += 1, R35 += 1 };
  s0 -> s0 [0, 65535] { R238 += 1, R239 += 1 };
  s0 -> s1 [83, 65535] { R239 += 1, R199 += 1 };
  s1 -> s1 [0, 81] { R239 += 1, R199 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R239 += 1 };
  s1 -> s1 [83, 65535] { R239 += 1, R199 += 1 };
  s2 -> s1 [0, 81] { R239 += 1, R199 += 1 };
  s2 -> s2 [0, 65535] { R239 += 1, R198 += 1, R199 += 1 };
  s2 -> s3 [0, 65535] { R239 += 1, R199 += 1, R35 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [83, 65535] { R239 += 1, R199 += 1 };
  s3 -> s1 [0, 81] { R239 += 1, R199 += 1 };
  s3 -> s3 [0, 65535] { R239 += 1, R199 += 1, R35 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R239 += 1 };
  s3 -> s1 [83, 65535] { R239 += 1, R199 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R239 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 81] { R241 += 1, R201 += 1, R39 += 1 };
  s0 -> s2 [0, 65535] { R241 += 1, R200 += 1, R201 += 1 };
  s0 -> s3 [0, 65535] { R241 += 1, R201 += 1, R38 += 1, R39 += 1 };
  s0 -> s0 [0, 65535] { R240 += 1, R241 += 1 };
  s0 -> s4 [82, 82] { R241 += 1, R201 += 1, R39 += 1 };
  s0 -> s1 [83, 65535] { R241 += 1, R201 += 1, R39 += 1 };
  s1 -> s1 [0, 81] { R241 += 1, R201 += 1, R39 += 1 };
  s1 -> s4 [82, 82] { R241 += 1, R201 += 1, R39 += 1 };
  s1 -> s1 [83, 65535] { R241 += 1, R201 += 1, R39 += 1 };
  s2 -> s1 [0, 81] { R241 += 1, R201 += 1, R39 += 1 };
  s2 -> s2 [0, 65535] { R241 += 1, R200 += 1, R201 += 1 };
  s2 -> s3 [0, 65535] { R241 += 1, R201 += 1, R38 += 1, R39 += 1 };
  s2 -> s4 [82, 82] { R241 += 1, R201 += 1, R39 += 1 };
  s2 -> s1 [83, 65535] { R241 += 1, R201 += 1, R39 += 1 };
  s3 -> s1 [0, 81] { R241 += 1, R201 += 1, R39 += 1 };
  s3 -> s3 [0, 65535] { R241 += 1, R201 += 1, R38 += 1, R39 += 1 };
  s3 -> s4 [82, 82] { R241 += 1, R201 += 1, R39 += 1 };
  s3 -> s1 [83, 65535] { R241 += 1, R201 += 1, R39 += 1 };
  s4 -> s5 [0, 65535] { R241 += 1 };
  s4 -> s4 [0, 65535] { R241 += 1, R201 += 1, R39 += 1 };
  s4 -> s6 [0, 65535] { R241 += 1, R201 += 1 };
  s4 -> s7 [0, 65535];
  s5 -> s5 [0, 65535] { R241 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s5 [0, 65535] { R241 += 1 };
  s6 -> s6 [0, 65535] { R241 += 1, R201 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s4, s5, s6, s7;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R242 += 1, R243 += 1 };
  s0 -> s1 [0, 65535] { R243 += 1, R202 += 1, R203 += 1 };
  s0 -> s2 [0, 65535] { R243 += 1, R203 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R243 += 1, R202 += 1, R203 += 1 };
  s1 -> s2 [0, 65535] { R243 += 1, R203 += 1 };
  s2 -> s3 [0, 65535] { R243 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R243 += 1, R203 += 1 };
  s3 -> s3 [0, 65535] { R243 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 65535] { R245 += 1, R205 += 1, R15 += 1 };
  s0 -> s2 [0, 65535] { R245 += 1, R204 += 1, R205 += 1 };
  s0 -> s0 [0, 65535] { R244 += 1, R245 += 1 };
  s1 -> s4 [0, 65535] { R245 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R245 += 1, R205 += 1, R15 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R245 += 1, R205 += 1, R15 += 1 };
  s2 -> s2 [0, 65535] { R245 += 1, R204 += 1, R205 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R245 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 67] { R247 += 1, R207 += 1 };
  s0 -> s0 [0, 65535] { R246 += 1, R247 += 1 };
  s0 -> s2 [0, 65535] { R247 += 1, R206 += 1, R207 += 1 };
  s0 -> s3 [68, 68] { R247 += 1, R207 += 1 };
  s0 -> s4 [68, 68] { R247 += 1, R207 += 1 };
  s0 -> s1 [83, 65535] { R247 += 1, R207 += 1 };
  s1 -> s1 [0, 67] { R247 += 1, R207 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R247 += 1 };
  s1 -> s3 [68, 68] { R247 += 1, R207 += 1 };
  s1 -> s4 [68, 68] { R247 += 1, R207 += 1 };
  s1 -> s1 [83, 65535] { R247 += 1, R207 += 1 };
  s2 -> s1 [0, 67] { R247 += 1, R207 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R247 += 1, R206 += 1, R207 += 1 };
  s2 -> s3 [68, 68] { R247 += 1, R207 += 1 };
  s2 -> s4 [68, 68] { R247 += 1, R207 += 1 };
  s2 -> s1 [83, 65535] { R247 += 1, R207 += 1 };
  s3 -> s3 [0, 65535] { R247 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 68] { R247 += 1, R207 += 1 };
  s4 -> s4 [0, 65535] { R247 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [83, 65535] { R247 += 1, R207 += 1 };
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 67] { R249 += 1, R209 += 1, R32 += 1 };
  s0 -> s2 [0, 65535] { R249 += 1, R208 += 1, R209 += 1 };
  s0 -> s0 [0, 65535] { R248 += 1, R249 += 1 };
  s0 -> s3 [68, 68] { R249 += 1, R209 += 1, R32 += 1 };
  s0 -> s4 [68, 68] { R249 += 1, R209 += 1, R32 += 1 };
  s0 -> s1 [69, 65535] { R249 += 1, R209 += 1, R32 += 1 };
  s1 -> s1 [0, 67] { R249 += 1, R209 += 1, R32 += 1 };
  s1 -> s1 [0, 65535] { R249 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [68, 68] { R249 += 1, R209 += 1, R32 += 1 };
  s1 -> s4 [68, 68] { R249 += 1, R209 += 1, R32 += 1 };
  s1 -> s1 [69, 65535] { R249 += 1, R209 += 1, R32 += 1 };
  s2 -> s1 [0, 67] { R249 += 1, R209 += 1, R32 += 1 };
  s2 -> s2 [0, 65535] { R249 += 1, R208 += 1, R209 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [68, 68] { R249 += 1, R209 += 1, R32 += 1 };
  s2 -> s4 [68, 68] { R249 += 1, R209 += 1, R32 += 1 };
  s2 -> s1 [69, 65535] { R249 += 1, R209 += 1, R32 += 1 };
  s3 -> s3 [0, 65535] { R249 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R249 += 1 };
  s4 -> s4 [0, 65535] { R249 += 1, R209 += 1, R32 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R249 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 67] { R251 += 1, R211 += 1, R34 += 1 };
  s0 -> s0 [0, 65535] { R250 += 1, R251 += 1 };
  s0 -> s2 [0, 65535] { R251 += 1, R210 += 1, R211 += 1 };
  s0 -> s3 [68, 68] { R251 += 1, R211 += 1, R34 += 1 };
  s0 -> s4 [68, 68] { R251 += 1, R211 += 1, R34 += 1 };
  s0 -> s1 [69, 65535] { R251 += 1, R211 += 1, R34 += 1 };
  s1 -> s1 [0, 67] { R251 += 1, R211 += 1, R34 += 1 };
  s1 -> s1 [0, 65535] { R251 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [68, 68] { R251 += 1, R211 += 1, R34 += 1 };
  s1 -> s4 [68, 68] { R251 += 1, R211 += 1, R34 += 1 };
  s1 -> s1 [69, 65535] { R251 += 1, R211 += 1, R34 += 1 };
  s2 -> s1 [0, 67] { R251 += 1, R211 += 1, R34 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R251 += 1, R210 += 1, R211 += 1 };
  s2 -> s3 [68, 68] { R251 += 1, R211 += 1, R34 += 1 };
  s2 -> s4 [68, 68] { R251 += 1, R211 += 1, R34 += 1 };
  s2 -> s1 [69, 65535] { R251 += 1, R211 += 1, R34 += 1 };
  s3 -> s3 [0, 65535] { R251 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R251 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R251 += 1, R211 += 1, R34 += 1 };
  s5 -> s5 [0, 65535] { R251 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 67] { R253 += 1, R213 += 1, R36 += 1, R37 += 1 };
  s0 -> s0 [0, 65535] { R252 += 1, R253 += 1 };
  s0 -> s2 [0, 65535] { R253 += 1, R212 += 1, R213 += 1 };
  s0 -> s3 [68, 68] { R253 += 1, R213 += 1, R36 += 1, R37 += 1 };
  s0 -> s4 [68, 68] { R253 += 1, R213 += 1, R36 += 1, R37 += 1 };
  s0 -> s1 [69, 65535] { R253 += 1, R213 += 1, R36 += 1, R37 += 1 };
  s1 -> s1 [0, 67] { R253 += 1, R213 += 1, R36 += 1, R37 += 1 };
  s1 -> s1 [0, 65535] { R253 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [68, 68] { R253 += 1, R213 += 1, R36 += 1, R37 += 1 };
  s1 -> s4 [68, 68] { R253 += 1, R213 += 1, R36 += 1, R37 += 1 };
  s1 -> s1 [69, 65535] { R253 += 1, R213 += 1, R36 += 1, R37 += 1 };
  s2 -> s1 [0, 67] { R253 += 1, R213 += 1, R36 += 1, R37 += 1 };
  s2 -> s2 [0, 65535] { R253 += 1, R212 += 1, R213 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [68, 68] { R253 += 1, R213 += 1, R36 += 1, R37 += 1 };
  s2 -> s4 [68, 68] { R253 += 1, R213 += 1, R36 += 1, R37 += 1 };
  s2 -> s1 [69, 65535] { R253 += 1, R213 += 1, R36 += 1, R37 += 1 };
  s3 -> s3 [0, 65535] { R253 += 1, R213 += 1, R36 += 1, R37 += 1 };
  s3 -> s6 [0, 65535] { R253 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R253 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R253 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 67] { R255 += 1, R215 += 1, R185 += 1, R186 += 1 };
  s0 -> s2 [0, 67] { R255 += 1, R215 += 1, R184 += 1, R185 += 1 };
  s0 -> s3 [0, 65535] { R255 += 1, R214 += 1, R215 += 1 };
  s0 -> s0 [0, 65535] { R254 += 1, R255 += 1 };
  s0 -> s4 [68, 68] { R255 += 1, R215 += 1, R185 += 1, R186 += 1 };
  s0 -> s5 [68, 68] { R255 += 1, R215 += 1, R184 += 1, R185 += 1 };
  s0 -> s6 [68, 68] { R255 += 1, R215 += 1, R184 += 1, R185 += 1 };
  s0 -> s7 [68, 68] { R255 += 1, R215 += 1, R185 += 1, R186 += 1 };
  s0 -> s1 [69, 65535] { R255 += 1, R215 += 1, R185 += 1, R186 += 1 };
  s0 -> s2 [69, 65535] { R255 += 1, R215 += 1, R184 += 1, R185 += 1 };
  s1 -> s1 [0, 67] { R255 += 1, R215 += 1, R185 += 1, R186 += 1 };
  s1 -> s11 [0, 67] { R255 += 1, R215 += 1 };
  s1 -> s4 [68, 68] { R255 += 1, R215 += 1, R185 += 1, R186 += 1 };
  s1 -> s12 [68, 68] { R255 += 1, R215 += 1 };
  s1 -> s8 [68, 68] { R255 += 1, R215 += 1 };
  s1 -> s7 [68, 68] { R255 += 1, R215 += 1, R185 += 1, R186 += 1 };
  s1 -> s1 [69, 65535] { R255 += 1, R215 += 1, R185 += 1, R186 += 1 };
  s1 -> s11 [69, 65535] { R255 += 1, R215 += 1 };
  s2 -> s1 [0, 67] { R255 += 1, R215 += 1, R185 += 1, R186 += 1 };
  s2 -> s2 [0, 67] { R255 += 1, R215 += 1, R184 += 1, R185 += 1 };
  s2 -> s4 [68, 68] { R255 += 1, R215 += 1, R185 += 1, R186 += 1 };
  s2 -> s5 [68, 68] { R255 += 1, R215 += 1, R184 += 1, R185 += 1 };
  s2 -> s6 [68, 68] { R255 += 1, R215 += 1, R184 += 1, R185 += 1 };
  s2 -> s7 [68, 68] { R255 += 1, R215 += 1, R185 += 1, R186 += 1 };
  s2 -> s1 [69, 65535] { R255 += 1, R215 += 1, R185 += 1, R186 += 1 };
  s2 -> s2 [69, 65535] { R255 += 1, R215 += 1, R184 += 1, R185 += 1 };
  s3 -> s1 [0, 67] { R255 += 1, R215 += 1, R185 += 1, R186 += 1 };
  s3 -> s2 [0, 67] { R255 += 1, R215 += 1, R184 += 1, R185 += 1 };
  s3 -> s3 [0, 65535] { R255 += 1, R214 += 1, R215 += 1 };
  s3 -> s4 [68, 68] { R255 += 1, R215 += 1, R185 += 1, R186 += 1 };
  s3 -> s5 [68, 68] { R255 += 1, R215 += 1, R184 += 1, R185 += 1 };
  s3 -> s6 [68, 68] { R255 += 1, R215 += 1, R184 += 1, R185 += 1 };
  s3 -> s7 [68, 68] { R255 += 1, R215 += 1, R185 += 1, R186 += 1 };
  s3 -> s1 [69, 65535] { R255 += 1, R215 += 1, R185 += 1, R186 += 1 };
  s3 -> s2 [69, 65535] { R255 += 1, R215 += 1, R184 += 1, R185 += 1 };
  s4 -> s4 [0, 65535] { R255 += 1, R215 += 1, R185 += 1, R186 += 1 };
  s4 -> s8 [0, 65535] { R255 += 1, R215 += 1 };
  s6 -> s4 [0, 65535] { R255 += 1, R215 += 1, R185 += 1, R186 += 1 };
  s6 -> s6 [0, 65535] { R255 += 1, R215 += 1, R184 += 1, R185 += 1 };
  s8 -> s9 [0, 65535] { R255 += 1 };
  s8 -> s8 [0, 65535] { R255 += 1, R215 += 1 };
  s8 -> s10 [0, 65535];
  s9 -> s9 [0, 65535] { R255 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s11 [0, 67] { R255 += 1, R215 += 1 };
  s11 -> s11 [0, 65535] { R255 += 1 };
  s11 -> s10 [0, 65535];
  s11 -> s12 [68, 68] { R255 += 1, R215 += 1 };
  s11 -> s8 [68, 68] { R255 += 1, R215 += 1 };
  s11 -> s11 [69, 65535] { R255 += 1, R215 += 1 };
  s12 -> s12 [0, 65535] { R255 += 1 };
  s12 -> s10 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
};
constraint R1 = R203 && R2 = R255 && R16 - R203 = -1 && R17 = R203 && R18 - R203 = -1 && R19 = R203 && R20 = 0 && R21 = 1 && R22 = 0 && R23 = 1 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R33 + R32 + -1*R39 + -1*R37 = 0 && R38 + R36 = 0 && R190 = 0 && R191 = R203 && R192 = 0 && R193 = R203 && R194 = 0 && R195 = R203 && R196 = 0 && R197 = R203 && R198 = 0 && R199 = R203 && R200 = 0 && R201 = R203 && R202 = 0 && R214 = 0 && R215 = 0 && R216 = 1 && R217 = R255 && R218 = 1 && R219 = R255 && R220 = 1 && R221 = R255 && R222 = 1 && R223 = R255 && R224 = 1 && R225 = R255 && R226 = 1 && R227 = R255 && R228 = 1 && R229 = R255 && R230 = 1 && R231 = R255 && R232 = 1 && R233 = R255 && R234 = 1 && R235 = R255 && R236 = 1 && R237 = R255 && R238 = 1 && R239 = R255 && R240 = 1 && R241 = R255 && R242 = 1 && R243 = R255 && R244 = 1 && R245 = R255 && R246 = 1 && R247 = R255 && R248 = 1 && R249 = R255 && R250 = 1 && R251 = R255 && R252 = 1 && R253 = R255 && R254 = 1 && R9 < 1 && R12 < 1 && R35 + R34 < 1 && -1*R39 + -1*R37 < 1 && 0 < R203 && 0 < R255 && (R39 + R37 != 0 || R189 + R186 = 0 || (R187 + R184 = 0 && R188 + R185 = 0)) && (R187 + R184 != 0 || R39 + R37 + -1*R188 + -1*R185 = 0 || R39 + R37 < 1) && (R15 = 0 || (R204 = 0 && R205 = 0)) && (R15 = 0 || (R206 = 0 && R207 = 0)) && (R15 = 0 || (R208 = 0 && R209 = 0)) && (R15 = 0 || (R210 = 0 && R211 = 0)) && (R15 = 0 || (R212 = 0 && R213 = 0)) && (R187 + R184 = 0 || R39 + R37 < 1);
// End of Parikh automata intersection problem
