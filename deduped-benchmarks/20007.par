// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R12, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R2620, R2621, R2622, R2623, R27, R3, R3468, R3469, R3470, R3471, R3472, R3473, R3786, R3787, R3788, R3789, R3790, R3791, R3792, R3793, R3794, R3795, R3796, R3797, R3798, R3799, R38, R3800, R3801, R3802, R3803, R3804, R3805, R3806, R3807, R3808, R3809, R3810, R3811, R3812, R3813, R3814, R3815, R3816, R3817, R3818, R3819, R3820, R3821, R3822, R3823, R3824, R3825, R3826, R3827, R3828, R3829, R3830, R3831, R3832, R3833, R3834, R3835, R3836, R3837, R3838, R3839, R3840, R3841, R3842, R3843, R3844, R3845, R3846, R3847, R3848, R3849, R3850, R3851, R3852, R3853, R3854, R3855, R3856, R3857, R3858, R3859, R3860, R3861, R3862, R3863, R3864, R3865, R3866, R3867, R3868, R3869, R3870, R3871, R3872, R3873, R3874, R3875, R3876, R3877, R3878, R3879, R3880, R3881, R3882, R3883, R3884, R3885, R3886, R3887, R3888, R3889, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R70, R71, R72, R73, R74, R75, R76, R77, R78, R79, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 72];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [73, 73];
  s0 -> s1 [74, 65535];
  s1 -> s1 [0, 72];
  s1 -> s2 [73, 73];
  s1 -> s1 [74, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s1 [0, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R25 += 1 };
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R3810 += 1, R3811 += 1 };
  s0 -> s1 [0, 65535] { R3811 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R3811 += 1, R19 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 72] { R3813 += 1 };
  s0 -> s0 [0, 65535] { R3812 += 1, R3813 += 1 };
  s0 -> s2 [73, 73] { R3813 += 1 };
  s0 -> s3 [73, 73] { R3813 += 1 };
  s0 -> s1 [78, 65535] { R3813 += 1 };
  s1 -> s1 [0, 72] { R3813 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R3813 += 1 };
  s1 -> s3 [73, 73] { R3813 += 1 };
  s1 -> s1 [78, 65535] { R3813 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 73] { R3813 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [78, 65535] { R3813 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 72] { R3815 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R3814 += 1, R3815 += 1 };
  s0 -> s2 [73, 73] { R3815 += 1, R38 += 1 };
  s0 -> s3 [73, 73] { R3815 += 1, R38 += 1 };
  s0 -> s1 [74, 65535] { R3815 += 1, R38 += 1 };
  s1 -> s1 [0, 72] { R3815 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R3815 += 1, R38 += 1 };
  s1 -> s3 [73, 73] { R3815 += 1, R38 += 1 };
  s1 -> s1 [74, 65535] { R3815 += 1, R38 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3815 += 1, R38 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 72] { R3817 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R3816 += 1, R3817 += 1 };
  s0 -> s2 [73, 73] { R3817 += 1, R40 += 1 };
  s0 -> s3 [73, 73] { R3817 += 1, R40 += 1 };
  s0 -> s1 [74, 65535] { R3817 += 1, R40 += 1 };
  s1 -> s1 [0, 72] { R3817 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R3817 += 1, R40 += 1 };
  s1 -> s3 [73, 73] { R3817 += 1, R40 += 1 };
  s1 -> s1 [74, 65535] { R3817 += 1, R40 += 1 };
  s2 -> s2 [0, 65535] { R3817 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 72] { R3819 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R3818 += 1, R3819 += 1 };
  s0 -> s2 [73, 73] { R3819 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [73, 73] { R3819 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [74, 65535] { R3819 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 72] { R3819 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R3819 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [73, 73] { R3819 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [74, 65535] { R3819 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535] { R3819 += 1, R42 += 1, R43 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 72] { R3821 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R3820 += 1, R3821 += 1 };
  s0 -> s2 [73, 73] { R3821 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [73, 73] { R3821 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [74, 65535] { R3821 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 72] { R3821 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R3821 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [73, 73] { R3821 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [74, 65535] { R3821 += 1, R46 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3821 += 1, R46 += 1, R47 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 72] { R3823 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R3822 += 1, R3823 += 1 };
  s0 -> s2 [73, 73] { R3823 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [73, 73] { R3823 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [74, 65535] { R3823 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 72] { R3823 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R3823 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [73, 73] { R3823 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [74, 65535] { R3823 += 1, R52 += 1, R53 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3823 += 1, R52 += 1, R53 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 72] { R3825 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R3824 += 1, R3825 += 1 };
  s0 -> s2 [73, 73] { R3825 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [73, 73] { R3825 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [74, 65535] { R3825 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 72] { R3825 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R3825 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [73, 73] { R3825 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [74, 65535] { R3825 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R3825 += 1, R56 += 1, R57 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 72] { R3827 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R3826 += 1, R3827 += 1 };
  s0 -> s2 [73, 73] { R3827 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [73, 73] { R3827 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [74, 65535] { R3827 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 72] { R3827 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R3827 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [73, 73] { R3827 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [74, 65535] { R3827 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535] { R3827 += 1, R62 += 1, R63 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 72] { R3847 += 1 };
  s0 -> s0 [0, 65535] { R3846 += 1, R3847 += 1 };
  s0 -> s2 [73, 73] { R3847 += 1 };
  s0 -> s1 [74, 65535] { R3847 += 1 };
  s1 -> s1 [0, 72] { R3847 += 1 };
  s1 -> s2 [73, 73] { R3847 += 1 };
  s1 -> s1 [74, 65535] { R3847 += 1 };
  s2 -> s2 [0, 65535] { R3847 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R3849 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R3848 += 1, R3849 += 1 };
  s1 -> s1 [0, 65535] { R3849 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 72] { R3851 += 1 };
  s0 -> s2 [0, 65535] { R3851 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R3850 += 1, R3851 += 1 };
  s0 -> s3 [73, 73] { R3851 += 1 };
  s0 -> s1 [74, 65535] { R3851 += 1 };
  s1 -> s1 [0, 72] { R3851 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [73, 73] { R3851 += 1 };
  s1 -> s1 [74, 65535] { R3851 += 1 };
  s2 -> s1 [0, 72] { R3851 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3851 += 1, R8 += 1 };
  s2 -> s3 [73, 73] { R3851 += 1 };
  s2 -> s1 [74, 65535] { R3851 += 1 };
  s3 -> s3 [0, 65535] { R3851 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 72] { R3853 += 1, R3791 += 1 };
  s0 -> s2 [0, 65535] { R3853 += 1, R3790 += 1, R3791 += 1 };
  s0 -> s0 [0, 65535] { R3852 += 1, R3853 += 1 };
  s0 -> s1 [74, 65535] { R3853 += 1, R3791 += 1 };
  s1 -> s1 [0, 72] { R3853 += 1, R3791 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3853 += 1 };
  s1 -> s1 [74, 65535] { R3853 += 1, R3791 += 1 };
  s2 -> s1 [0, 72] { R3853 += 1, R3791 += 1 };
  s2 -> s2 [0, 65535] { R3853 += 1, R3790 += 1, R3791 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [74, 65535] { R3853 += 1, R3791 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R3855 += 1, R3792 += 1, R3793 += 1 };
  s0 -> s0 [0, 65535] { R3854 += 1, R3855 += 1 };
  s0 -> s2 [0, 65535] { R3855 += 1, R3793 += 1, R17 += 1 };
  s1 -> s1 [0, 65535] { R3855 += 1, R3792 += 1, R3793 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R3855 += 1, R3793 += 1, R17 += 1 };
  s2 -> s3 [0, 65535] { R3855 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3855 += 1, R3793 += 1, R17 += 1 };
  s3 -> s3 [0, 65535] { R3855 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 73] { R3857 += 1, R3795 += 1 };
  s0 -> s0 [0, 65535] { R3856 += 1, R3857 += 1 };
  s0 -> s2 [0, 65535] { R3857 += 1, R3794 += 1, R3795 += 1 };
  s0 -> s1 [77, 65535] { R3857 += 1, R3795 += 1 };
  s1 -> s1 [0, 73] { R3857 += 1, R3795 += 1 };
  s1 -> s1 [0, 65535] { R3857 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [77, 65535] { R3857 += 1, R3795 += 1 };
  s2 -> s1 [0, 73] { R3857 += 1, R3795 += 1 };
  s2 -> s2 [0, 65535] { R3857 += 1, R3794 += 1, R3795 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [77, 65535] { R3857 += 1, R3795 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s0 [0, 65535] { R3858 += 1, R3859 += 1 };
  s0 -> s1 [0, 65535] { R3859 += 1, R3796 += 1, R3797 += 1 };
  s0 -> s2 [0, 65535] { R3859 += 1, R3797 += 1, R67 += 1 };
  s1 -> s1 [0, 65535] { R3859 += 1, R3796 += 1, R3797 += 1 };
  s1 -> s2 [0, 65535] { R3859 += 1, R3797 += 1, R67 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R3859 += 1 };
  s2 -> s2 [0, 65535] { R3859 += 1, R3797 += 1, R67 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3859 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 76] { R3861 += 1, R3799 += 1 };
  s0 -> s2 [0, 65535] { R3861 += 1, R3799 += 1, R69 += 1 };
  s0 -> s0 [0, 65535] { R3860 += 1, R3861 += 1 };
  s0 -> s3 [0, 65535] { R3861 += 1, R3798 += 1, R3799 += 1 };
  s0 -> s1 [78, 65535] { R3861 += 1, R3799 += 1 };
  s1 -> s1 [0, 76] { R3861 += 1, R3799 += 1 };
  s1 -> s1 [0, 65535] { R3861 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [78, 65535] { R3861 += 1, R3799 += 1 };
  s2 -> s1 [0, 76] { R3861 += 1, R3799 += 1 };
  s2 -> s2 [0, 65535] { R3861 += 1, R3799 += 1, R69 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R3861 += 1 };
  s2 -> s1 [78, 65535] { R3861 += 1, R3799 += 1 };
  s3 -> s1 [0, 76] { R3861 += 1, R3799 += 1 };
  s3 -> s2 [0, 65535] { R3861 += 1, R3799 += 1, R69 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3861 += 1, R3798 += 1, R3799 += 1 };
  s3 -> s1 [78, 65535] { R3861 += 1, R3799 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3861 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 76] { R3863 += 1, R3801 += 1, R73 += 1 };
  s0 -> s2 [0, 65535] { R3863 += 1, R3800 += 1, R3801 += 1 };
  s0 -> s3 [0, 65535] { R3863 += 1, R3801 += 1, R72 += 1, R73 += 1 };
  s0 -> s0 [0, 65535] { R3862 += 1, R3863 += 1 };
  s0 -> s1 [78, 65535] { R3863 += 1, R3801 += 1, R73 += 1 };
  s1 -> s1 [0, 76] { R3863 += 1, R3801 += 1, R73 += 1 };
  s1 -> s1 [0, 65535] { R3863 += 1, R3801 += 1 };
  s1 -> s4 [0, 65535] { R3863 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [78, 65535] { R3863 += 1, R3801 += 1, R73 += 1 };
  s2 -> s1 [0, 76] { R3863 += 1, R3801 += 1, R73 += 1 };
  s2 -> s2 [0, 65535] { R3863 += 1, R3800 += 1, R3801 += 1 };
  s2 -> s3 [0, 65535] { R3863 += 1, R3801 += 1, R72 += 1, R73 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [78, 65535] { R3863 += 1, R3801 += 1, R73 += 1 };
  s3 -> s1 [0, 76] { R3863 += 1, R3801 += 1, R73 += 1 };
  s3 -> s4 [0, 65535] { R3863 += 1 };
  s3 -> s3 [0, 65535] { R3863 += 1, R3801 += 1, R72 += 1, R73 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [78, 65535] { R3863 += 1, R3801 += 1, R73 += 1 };
  s4 -> s4 [0, 65535] { R3863 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R3865 += 1, R3803 += 1, R78 += 1, R79 += 1 };
  s0 -> s2 [0, 65535] { R3865 += 1, R3802 += 1, R3803 += 1 };
  s0 -> s3 [0, 65535] { R3865 += 1, R3803 += 1, R77 += 1, R78 += 1 };
  s0 -> s0 [0, 65535] { R3864 += 1, R3865 += 1 };
  s1 -> s1 [0, 65535] { R3865 += 1, R3803 += 1, R78 += 1, R79 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R3865 += 1 };
  s1 -> s6 [0, 65535] { R3865 += 1, R3803 += 1 };
  s2 -> s1 [0, 65535] { R3865 += 1, R3803 += 1, R78 += 1, R79 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3865 += 1, R3802 += 1, R3803 += 1 };
  s2 -> s3 [0, 65535] { R3865 += 1, R3803 += 1, R77 += 1, R78 += 1 };
  s3 -> s1 [0, 65535] { R3865 += 1, R3803 += 1, R78 += 1, R79 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R3865 += 1 };
  s3 -> s3 [0, 65535] { R3865 += 1, R3803 += 1, R77 += 1, R78 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3865 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R3865 += 1 };
  s6 -> s6 [0, 65535] { R3865 += 1, R3803 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 77] { R3867 += 1, R3805 += 1, R2623 += 1 };
  s0 -> s0 [0, 65535] { R3866 += 1, R3867 += 1 };
  s0 -> s2 [0, 65535] { R3867 += 1, R3804 += 1, R3805 += 1 };
  s0 -> s3 [81, 81] { R3867 += 1, R3805 += 1, R2623 += 1 };
  s0 -> s1 [82, 65535] { R3867 += 1, R3805 += 1, R2623 += 1 };
  s1 -> s1 [0, 77] { R3867 += 1, R3805 += 1, R2623 += 1 };
  s1 -> s3 [81, 81] { R3867 += 1, R3805 += 1, R2623 += 1 };
  s1 -> s1 [82, 65535] { R3867 += 1, R3805 += 1, R2623 += 1 };
  s2 -> s1 [0, 77] { R3867 += 1, R3805 += 1, R2623 += 1 };
  s2 -> s2 [0, 65535] { R3867 += 1, R3804 += 1, R3805 += 1 };
  s2 -> s3 [81, 81] { R3867 += 1, R3805 += 1, R2623 += 1 };
  s2 -> s1 [82, 65535] { R3867 += 1, R3805 += 1, R2623 += 1 };
  s3 -> s3 [0, 77] { R3867 += 1, R3805 += 1, R2623 += 1 };
  s3 -> s4 [0, 65535] { R3867 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R3867 += 1, R3805 += 1 };
  s3 -> s3 [81, 65535] { R3867 += 1, R3805 += 1, R2623 += 1 };
  s4 -> s4 [0, 65535] { R3867 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
automaton value2_28 {
  init s0;
  s0 -> s0 [0, 65535] { R3868 += 1, R3869 += 1 };
  s0 -> s1 [0, 65535] { R3869 += 1, R3807 += 1 };
  s0 -> s2 [0, 65535] { R3869 += 1, R3806 += 1, R3807 += 1 };
  s1 -> s4 [0, 65535] { R3869 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3869 += 1, R3807 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3869 += 1, R3807 += 1 };
  s2 -> s2 [0, 65535] { R3869 += 1, R3806 += 1, R3807 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3869 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 65535] { R3871 += 1, R3808 += 1, R3809 += 1 };
  s0 -> s2 [0, 65535] { R3871 += 1, R3809 += 1 };
  s0 -> s0 [0, 65535] { R3870 += 1, R3871 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3871 += 1, R3808 += 1, R3809 += 1 };
  s1 -> s2 [0, 65535] { R3871 += 1, R3809 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R3871 += 1 };
  s2 -> s2 [0, 65535] { R3871 += 1, R3809 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3871 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R3873 += 1, R3829 += 1, R18 += 1 };
  s0 -> s2 [0, 65535] { R3873 += 1, R3828 += 1, R3829 += 1 };
  s0 -> s0 [0, 65535] { R3872 += 1, R3873 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3873 += 1, R3829 += 1, R18 += 1 };
  s1 -> s4 [0, 65535] { R3873 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3873 += 1, R3829 += 1, R18 += 1 };
  s2 -> s2 [0, 65535] { R3873 += 1, R3828 += 1, R3829 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3873 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 72] { R3875 += 1, R3831 += 1 };
  s0 -> s0 [0, 65535] { R3874 += 1, R3875 += 1 };
  s0 -> s2 [0, 65535] { R3875 += 1, R3830 += 1, R3831 += 1 };
  s0 -> s3 [73, 73] { R3875 += 1, R3831 += 1 };
  s0 -> s4 [73, 73] { R3875 += 1, R3831 += 1 };
  s0 -> s5 [77, 77] { R3875 += 1, R3831 += 1 };
  s0 -> s1 [78, 65535] { R3875 += 1, R3831 += 1 };
  s1 -> s1 [0, 72] { R3875 += 1, R3831 += 1 };
  s1 -> s3 [73, 73] { R3875 += 1, R3831 += 1 };
  s1 -> s4 [73, 73] { R3875 += 1, R3831 += 1 };
  s1 -> s5 [77, 77] { R3875 += 1, R3831 += 1 };
  s1 -> s1 [78, 65535] { R3875 += 1, R3831 += 1 };
  s2 -> s1 [0, 72] { R3875 += 1, R3831 += 1 };
  s2 -> s2 [0, 65535] { R3875 += 1, R3830 += 1, R3831 += 1 };
  s2 -> s3 [73, 73] { R3875 += 1, R3831 += 1 };
  s2 -> s4 [73, 73] { R3875 += 1, R3831 += 1 };
  s2 -> s5 [77, 77] { R3875 += 1, R3831 += 1 };
  s2 -> s1 [78, 65535] { R3875 += 1, R3831 += 1 };
  s4 -> s4 [0, 73] { R3875 += 1, R3831 += 1 };
  s4 -> s7 [77, 77] { R3875 += 1, R3831 += 1 };
  s4 -> s4 [78, 65535] { R3875 += 1, R3831 += 1 };
  s5 -> s5 [0, 72] { R3875 += 1, R3831 += 1 };
  s5 -> s5 [0, 65535] { R3875 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [73, 73] { R3875 += 1, R3831 += 1 };
  s5 -> s8 [73, 73] { R3875 += 1, R3831 += 1 };
  s5 -> s5 [77, 65535] { R3875 += 1, R3831 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 73] { R3875 += 1, R3831 += 1 };
  s7 -> s7 [0, 65535] { R3875 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [77, 65535] { R3875 += 1, R3831 += 1 };
  s8 -> s8 [0, 65535] { R3875 += 1 };
  s8 -> s6 [0, 65535];
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 72] { R3877 += 1, R3833 += 1, R66 += 1 };
  s0 -> s2 [0, 65535] { R3877 += 1, R3832 += 1, R3833 += 1 };
  s0 -> s0 [0, 65535] { R3876 += 1, R3877 += 1 };
  s0 -> s3 [73, 73] { R3877 += 1, R3833 += 1, R66 += 1 };
  s0 -> s4 [73, 73] { R3877 += 1, R3833 += 1, R66 += 1 };
  s0 -> s1 [74, 65535] { R3877 += 1, R3833 += 1, R66 += 1 };
  s1 -> s1 [0, 72] { R3877 += 1, R3833 += 1, R66 += 1 };
  s1 -> s1 [0, 65535] { R3877 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [73, 73] { R3877 += 1, R3833 += 1, R66 += 1 };
  s1 -> s4 [73, 73] { R3877 += 1, R3833 += 1, R66 += 1 };
  s1 -> s1 [74, 65535] { R3877 += 1, R3833 += 1, R66 += 1 };
  s2 -> s1 [0, 72] { R3877 += 1, R3833 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R3877 += 1, R3832 += 1, R3833 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [73, 73] { R3877 += 1, R3833 += 1, R66 += 1 };
  s2 -> s4 [73, 73] { R3877 += 1, R3833 += 1, R66 += 1 };
  s2 -> s1 [74, 65535] { R3877 += 1, R3833 += 1, R66 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R3877 += 1 };
  s4 -> s5 [0, 65535] { R3877 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R3877 += 1, R3833 += 1, R66 += 1 };
  s5 -> s5 [0, 65535] { R3877 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 72] { R3879 += 1, R3835 += 1, R68 += 1 };
  s0 -> s0 [0, 65535] { R3878 += 1, R3879 += 1 };
  s0 -> s2 [0, 65535] { R3879 += 1, R3834 += 1, R3835 += 1 };
  s0 -> s3 [73, 73] { R3879 += 1, R3835 += 1, R68 += 1 };
  s0 -> s4 [73, 73] { R3879 += 1, R3835 += 1, R68 += 1 };
  s0 -> s1 [74, 65535] { R3879 += 1, R3835 += 1, R68 += 1 };
  s1 -> s1 [0, 72] { R3879 += 1, R3835 += 1, R68 += 1 };
  s1 -> s1 [0, 65535] { R3879 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [73, 73] { R3879 += 1, R3835 += 1, R68 += 1 };
  s1 -> s4 [73, 73] { R3879 += 1, R3835 += 1, R68 += 1 };
  s1 -> s1 [74, 65535] { R3879 += 1, R3835 += 1, R68 += 1 };
  s2 -> s1 [0, 72] { R3879 += 1, R3835 += 1, R68 += 1 };
  s2 -> s2 [0, 65535] { R3879 += 1, R3834 += 1, R3835 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [73, 73] { R3879 += 1, R3835 += 1, R68 += 1 };
  s2 -> s4 [73, 73] { R3879 += 1, R3835 += 1, R68 += 1 };
  s2 -> s1 [74, 65535] { R3879 += 1, R3835 += 1, R68 += 1 };
  s3 -> s3 [0, 65535] { R3879 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R3879 += 1 };
  s4 -> s4 [0, 65535] { R3879 += 1, R3835 += 1, R68 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R3879 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 72] { R3881 += 1, R3837 += 1, R70 += 1, R71 += 1 };
  s0 -> s2 [0, 65535] { R3881 += 1, R3836 += 1, R3837 += 1 };
  s0 -> s0 [0, 65535] { R3880 += 1, R3881 += 1 };
  s0 -> s3 [73, 73] { R3881 += 1, R3837 += 1, R70 += 1, R71 += 1 };
  s0 -> s4 [73, 73] { R3881 += 1, R3837 += 1, R70 += 1, R71 += 1 };
  s0 -> s1 [74, 65535] { R3881 += 1, R3837 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 72] { R3881 += 1, R3837 += 1, R70 += 1, R71 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3881 += 1 };
  s1 -> s3 [73, 73] { R3881 += 1, R3837 += 1, R70 += 1, R71 += 1 };
  s1 -> s4 [73, 73] { R3881 += 1, R3837 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [74, 65535] { R3881 += 1, R3837 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [0, 72] { R3881 += 1, R3837 += 1, R70 += 1, R71 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3881 += 1, R3836 += 1, R3837 += 1 };
  s2 -> s3 [73, 73] { R3881 += 1, R3837 += 1, R70 += 1, R71 += 1 };
  s2 -> s4 [73, 73] { R3881 += 1, R3837 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [74, 65535] { R3881 += 1, R3837 += 1, R70 += 1, R71 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R3881 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3881 += 1, R3837 += 1, R70 += 1, R71 += 1 };
  s4 -> s6 [0, 65535] { R3881 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3881 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 72] { R3883 += 1, R3839 += 1, R74 += 1, R75 += 1 };
  s0 -> s2 [0, 65535] { R3883 += 1, R3838 += 1, R3839 += 1 };
  s0 -> s0 [0, 65535] { R3882 += 1, R3883 += 1 };
  s0 -> s3 [73, 73] { R3883 += 1, R3839 += 1, R74 += 1, R75 += 1 };
  s0 -> s4 [73, 73] { R3883 += 1, R3839 += 1, R74 += 1, R75 += 1 };
  s0 -> s1 [74, 65535] { R3883 += 1, R3839 += 1, R74 += 1, R75 += 1 };
  s1 -> s1 [0, 72] { R3883 += 1, R3839 += 1, R74 += 1, R75 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3883 += 1 };
  s1 -> s3 [73, 73] { R3883 += 1, R3839 += 1, R74 += 1, R75 += 1 };
  s1 -> s4 [73, 73] { R3883 += 1, R3839 += 1, R74 += 1, R75 += 1 };
  s1 -> s1 [74, 65535] { R3883 += 1, R3839 += 1, R74 += 1, R75 += 1 };
  s2 -> s1 [0, 72] { R3883 += 1, R3839 += 1, R74 += 1, R75 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3883 += 1, R3838 += 1, R3839 += 1 };
  s2 -> s3 [73, 73] { R3883 += 1, R3839 += 1, R74 += 1, R75 += 1 };
  s2 -> s4 [73, 73] { R3883 += 1, R3839 += 1, R74 += 1, R75 += 1 };
  s2 -> s1 [74, 65535] { R3883 += 1, R3839 += 1, R74 += 1, R75 += 1 };
  s3 -> s3 [0, 65535] { R3883 += 1, R3839 += 1, R74 += 1, R75 += 1 };
  s3 -> s6 [0, 65535] { R3883 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3883 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3883 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 72] { R3885 += 1, R3841 += 1, R2620 += 1, R2621 += 1 };
  s0 -> s2 [0, 72] { R3885 += 1, R3841 += 1, R2621 += 1 };
  s0 -> s3 [0, 65535] { R3885 += 1, R3840 += 1, R3841 += 1 };
  s0 -> s0 [0, 65535] { R3884 += 1, R3885 += 1 };
  s0 -> s4 [73, 73] { R3885 += 1, R3841 += 1, R2620 += 1, R2621 += 1 };
  s0 -> s5 [73, 73] { R3885 += 1, R3841 += 1, R2621 += 1 };
  s0 -> s6 [73, 73] { R3885 += 1, R3841 += 1, R2621 += 1 };
  s0 -> s7 [73, 73] { R3885 += 1, R3841 += 1, R2620 += 1, R2621 += 1 };
  s0 -> s2 [74, 77] { R3885 += 1, R3841 += 1, R2621 += 1 };
  s0 -> s1 [74, 65535] { R3885 += 1, R3841 += 1, R2620 += 1, R2621 += 1 };
  s0 -> s2 [82, 65535] { R3885 += 1, R3841 += 1, R2621 += 1 };
  s1 -> s1 [0, 72] { R3885 += 1, R3841 += 1, R2620 += 1, R2621 += 1 };
  s1 -> s2 [0, 72] { R3885 += 1, R3841 += 1, R2621 += 1 };
  s1 -> s4 [73, 73] { R3885 += 1, R3841 += 1, R2620 += 1, R2621 += 1 };
  s1 -> s5 [73, 73] { R3885 += 1, R3841 += 1, R2621 += 1 };
  s1 -> s6 [73, 73] { R3885 += 1, R3841 += 1, R2621 += 1 };
  s1 -> s7 [73, 73] { R3885 += 1, R3841 += 1, R2620 += 1, R2621 += 1 };
  s1 -> s2 [74, 77] { R3885 += 1, R3841 += 1, R2621 += 1 };
  s1 -> s1 [74, 65535] { R3885 += 1, R3841 += 1, R2620 += 1, R2621 += 1 };
  s1 -> s2 [82, 65535] { R3885 += 1, R3841 += 1, R2621 += 1 };
  s2 -> s2 [0, 72] { R3885 += 1, R3841 += 1, R2621 += 1 };
  s2 -> s2 [0, 65535] { R3885 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s5 [73, 73] { R3885 += 1, R3841 += 1, R2621 += 1 };
  s2 -> s6 [73, 73] { R3885 += 1, R3841 += 1, R2621 += 1 };
  s2 -> s2 [74, 77] { R3885 += 1, R3841 += 1, R2621 += 1 };
  s2 -> s2 [82, 65535] { R3885 += 1, R3841 += 1, R2621 += 1 };
  s3 -> s1 [0, 72] { R3885 += 1, R3841 += 1, R2620 += 1, R2621 += 1 };
  s3 -> s2 [0, 72] { R3885 += 1, R3841 += 1, R2621 += 1 };
  s3 -> s3 [0, 65535] { R3885 += 1, R3840 += 1, R3841 += 1 };
  s3 -> s4 [73, 73] { R3885 += 1, R3841 += 1, R2620 += 1, R2621 += 1 };
  s3 -> s5 [73, 73] { R3885 += 1, R3841 += 1, R2621 += 1 };
  s3 -> s6 [73, 73] { R3885 += 1, R3841 += 1, R2621 += 1 };
  s3 -> s7 [73, 73] { R3885 += 1, R3841 += 1, R2620 += 1, R2621 += 1 };
  s3 -> s2 [74, 77] { R3885 += 1, R3841 += 1, R2621 += 1 };
  s3 -> s1 [74, 65535] { R3885 += 1, R3841 += 1, R2620 += 1, R2621 += 1 };
  s3 -> s2 [82, 65535] { R3885 += 1, R3841 += 1, R2621 += 1 };
  s4 -> s6 [0, 77] { R3885 += 1, R3841 += 1, R2621 += 1 };
  s4 -> s4 [0, 65535] { R3885 += 1, R3841 += 1, R2620 += 1, R2621 += 1 };
  s4 -> s6 [82, 65535] { R3885 += 1, R3841 += 1, R2621 += 1 };
  s5 -> s5 [0, 65535] { R3885 += 1 };
  s5 -> s8 [0, 65535];
  s6 -> s6 [0, 77] { R3885 += 1, R3841 += 1, R2621 += 1 };
  s6 -> s6 [0, 65535] { R3885 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [82, 65535] { R3885 += 1, R3841 += 1, R2621 += 1 };
  s8 -> s8 [0, 65535];
  accepting s2, s5, s6, s8;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 72] { R3887 += 1, R3843 += 1, R3469 += 1, R3470 += 1 };
  s0 -> s2 [0, 72] { R3887 += 1, R3843 += 1, R3468 += 1, R3469 += 1 };
  s0 -> s0 [0, 65535] { R3886 += 1, R3887 += 1 };
  s0 -> s3 [0, 65535] { R3887 += 1, R3842 += 1, R3843 += 1 };
  s0 -> s4 [73, 73] { R3887 += 1, R3843 += 1, R3469 += 1, R3470 += 1 };
  s0 -> s5 [73, 73] { R3887 += 1, R3843 += 1, R3468 += 1, R3469 += 1 };
  s0 -> s6 [73, 73] { R3887 += 1, R3843 += 1, R3468 += 1, R3469 += 1 };
  s0 -> s7 [73, 73] { R3887 += 1, R3843 += 1, R3469 += 1, R3470 += 1 };
  s0 -> s1 [74, 65535] { R3887 += 1, R3843 += 1, R3469 += 1, R3470 += 1 };
  s0 -> s2 [74, 65535] { R3887 += 1, R3843 += 1, R3468 += 1, R3469 += 1 };
  s1 -> s11 [0, 72] { R3887 += 1, R3843 += 1 };
  s1 -> s1 [0, 72] { R3887 += 1, R3843 += 1, R3469 += 1, R3470 += 1 };
  s1 -> s8 [73, 73] { R3887 += 1, R3843 += 1 };
  s1 -> s4 [73, 73] { R3887 += 1, R3843 += 1, R3469 += 1, R3470 += 1 };
  s1 -> s12 [73, 73] { R3887 += 1, R3843 += 1 };
  s1 -> s7 [73, 73] { R3887 += 1, R3843 += 1, R3469 += 1, R3470 += 1 };
  s1 -> s11 [74, 65535] { R3887 += 1, R3843 += 1 };
  s1 -> s1 [74, 65535] { R3887 += 1, R3843 += 1, R3469 += 1, R3470 += 1 };
  s2 -> s1 [0, 72] { R3887 += 1, R3843 += 1, R3469 += 1, R3470 += 1 };
  s2 -> s2 [0, 72] { R3887 += 1, R3843 += 1, R3468 += 1, R3469 += 1 };
  s2 -> s4 [73, 73] { R3887 += 1, R3843 += 1, R3469 += 1, R3470 += 1 };
  s2 -> s5 [73, 73] { R3887 += 1, R3843 += 1, R3468 += 1, R3469 += 1 };
  s2 -> s6 [73, 73] { R3887 += 1, R3843 += 1, R3468 += 1, R3469 += 1 };
  s2 -> s7 [73, 73] { R3887 += 1, R3843 += 1, R3469 += 1, R3470 += 1 };
  s2 -> s1 [74, 65535] { R3887 += 1, R3843 += 1, R3469 += 1, R3470 += 1 };
  s2 -> s2 [74, 65535] { R3887 += 1, R3843 += 1, R3468 += 1, R3469 += 1 };
  s3 -> s1 [0, 72] { R3887 += 1, R3843 += 1, R3469 += 1, R3470 += 1 };
  s3 -> s2 [0, 72] { R3887 += 1, R3843 += 1, R3468 += 1, R3469 += 1 };
  s3 -> s3 [0, 65535] { R3887 += 1, R3842 += 1, R3843 += 1 };
  s3 -> s4 [73, 73] { R3887 += 1, R3843 += 1, R3469 += 1, R3470 += 1 };
  s3 -> s5 [73, 73] { R3887 += 1, R3843 += 1, R3468 += 1, R3469 += 1 };
  s3 -> s6 [73, 73] { R3887 += 1, R3843 += 1, R3468 += 1, R3469 += 1 };
  s3 -> s7 [73, 73] { R3887 += 1, R3843 += 1, R3469 += 1, R3470 += 1 };
  s3 -> s1 [74, 65535] { R3887 += 1, R3843 += 1, R3469 += 1, R3470 += 1 };
  s3 -> s2 [74, 65535] { R3887 += 1, R3843 += 1, R3468 += 1, R3469 += 1 };
  s5 -> s5 [0, 65535] { R3887 += 1, R3843 += 1, R3468 += 1, R3469 += 1 };
  s5 -> s7 [0, 65535] { R3887 += 1, R3843 += 1, R3469 += 1, R3470 += 1 };
  s7 -> s8 [0, 65535] { R3887 += 1, R3843 += 1 };
  s7 -> s7 [0, 65535] { R3887 += 1, R3843 += 1, R3469 += 1, R3470 += 1 };
  s8 -> s8 [0, 65535] { R3887 += 1, R3843 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [0, 65535] { R3887 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R3887 += 1 };
  s11 -> s11 [0, 72] { R3887 += 1, R3843 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R3887 += 1 };
  s11 -> s8 [73, 73] { R3887 += 1, R3843 += 1 };
  s11 -> s12 [73, 73] { R3887 += 1, R3843 += 1 };
  s11 -> s11 [74, 65535] { R3887 += 1, R3843 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R3887 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 72] { R3889 += 1, R3845 += 1, R3787 += 1 };
  s0 -> s2 [0, 72] { R3889 += 1, R3845 += 1, R3786 += 1, R3787 += 1 };
  s0 -> s0 [0, 65535] { R3888 += 1, R3889 += 1 };
  s0 -> s3 [0, 65535] { R3889 += 1, R3844 += 1, R3845 += 1 };
  s0 -> s4 [73, 73] { R3889 += 1, R3845 += 1, R3786 += 1, R3787 += 1 };
  s0 -> s5 [73, 73] { R3889 += 1, R3845 += 1, R3787 += 1 };
  s0 -> s6 [73, 73] { R3889 += 1, R3845 += 1, R3787 += 1 };
  s0 -> s7 [73, 73] { R3889 += 1, R3845 += 1, R3786 += 1, R3787 += 1 };
  s0 -> s1 [74, 76] { R3889 += 1, R3845 += 1, R3787 += 1 };
  s0 -> s2 [74, 65535] { R3889 += 1, R3845 += 1, R3786 += 1, R3787 += 1 };
  s0 -> s8 [77, 77] { R3889 += 1, R3845 += 1, R3787 += 1 };
  s0 -> s1 [82, 65535] { R3889 += 1, R3845 += 1, R3787 += 1 };
  s1 -> s1 [0, 72] { R3889 += 1, R3845 += 1, R3787 += 1 };
  s1 -> s5 [73, 73] { R3889 += 1, R3845 += 1 };
  s1 -> s6 [73, 73] { R3889 += 1, R3845 += 1 };
  s1 -> s1 [74, 76] { R3889 += 1, R3845 += 1, R3787 += 1 };
  s1 -> s1 [74, 65535] { R3889 += 1, R3845 += 1 };
  s1 -> s8 [77, 77] { R3889 += 1, R3845 += 1, R3787 += 1 };
  s1 -> s1 [82, 65535] { R3889 += 1, R3845 += 1, R3787 += 1 };
  s2 -> s1 [0, 72] { R3889 += 1, R3845 += 1, R3787 += 1 };
  s2 -> s2 [0, 72] { R3889 += 1, R3845 += 1, R3786 += 1, R3787 += 1 };
  s2 -> s4 [73, 73] { R3889 += 1, R3845 += 1, R3786 += 1, R3787 += 1 };
  s2 -> s5 [73, 73] { R3889 += 1, R3845 += 1, R3787 += 1 };
  s2 -> s6 [73, 73] { R3889 += 1, R3845 += 1, R3787 += 1 };
  s2 -> s7 [73, 73] { R3889 += 1, R3845 += 1, R3786 += 1, R3787 += 1 };
  s2 -> s1 [74, 76] { R3889 += 1, R3845 += 1, R3787 += 1 };
  s2 -> s2 [74, 65535] { R3889 += 1, R3845 += 1, R3786 += 1, R3787 += 1 };
  s2 -> s8 [77, 77] { R3889 += 1, R3845 += 1, R3787 += 1 };
  s2 -> s1 [82, 65535] { R3889 += 1, R3845 += 1, R3787 += 1 };
  s3 -> s1 [0, 72] { R3889 += 1, R3845 += 1, R3787 += 1 };
  s3 -> s2 [0, 72] { R3889 += 1, R3845 += 1, R3786 += 1, R3787 += 1 };
  s3 -> s3 [0, 65535] { R3889 += 1, R3844 += 1, R3845 += 1 };
  s3 -> s4 [73, 73] { R3889 += 1, R3845 += 1, R3786 += 1, R3787 += 1 };
  s3 -> s5 [73, 73] { R3889 += 1, R3845 += 1, R3787 += 1 };
  s3 -> s6 [73, 73] { R3889 += 1, R3845 += 1, R3787 += 1 };
  s3 -> s7 [73, 73] { R3889 += 1, R3845 += 1, R3786 += 1, R3787 += 1 };
  s3 -> s1 [74, 76] { R3889 += 1, R3845 += 1, R3787 += 1 };
  s3 -> s2 [74, 65535] { R3889 += 1, R3845 += 1, R3786 += 1, R3787 += 1 };
  s3 -> s8 [77, 77] { R3889 += 1, R3845 += 1, R3787 += 1 };
  s3 -> s1 [82, 65535] { R3889 += 1, R3845 += 1, R3787 += 1 };
  s5 -> s5 [0, 76] { R3889 += 1, R3845 += 1, R3787 += 1 };
  s5 -> s5 [0, 65535] { R3889 += 1, R3845 += 1 };
  s5 -> s10 [77, 77] { R3889 += 1, R3845 += 1, R3787 += 1 };
  s5 -> s5 [82, 65535] { R3889 += 1, R3845 += 1, R3787 += 1 };
  s7 -> s5 [0, 76] { R3889 += 1, R3845 += 1, R3787 += 1 };
  s7 -> s7 [0, 65535] { R3889 += 1, R3845 += 1, R3786 += 1, R3787 += 1 };
  s7 -> s10 [77, 77] { R3889 += 1, R3845 += 1, R3787 += 1 };
  s7 -> s5 [82, 65535] { R3889 += 1, R3845 += 1, R3787 += 1 };
  s8 -> s8 [0, 72] { R3889 += 1, R3845 += 1 };
  s8 -> s8 [0, 65535] { R3889 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [73, 73] { R3889 += 1, R3845 += 1 };
  s8 -> s11 [73, 73] { R3889 += 1, R3845 += 1 };
  s8 -> s8 [74, 65535] { R3889 += 1, R3845 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s12 [0, 65535] { R3889 += 1 };
  s10 -> s10 [0, 65535] { R3889 += 1, R3845 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R3889 += 1 };
  s11 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R3889 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
synchronised {  // Automata constraining P54
automaton P54_0 {
  init s0;
  s0 -> s1 [109, 109];
  accepting s1;
};
};
constraint R1 = R3805 && R2 = R3889 && R20 - R3889 = -1 && R21 = R3889 && R22 - R3889 = -1 && R23 = R3889 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R2623 + -1*R2621 - R53 = 0 && R52 + R2622 + R2620 = 0 && R3804 = 0 && R3830 = 0 && R3831 = 0 && R3840 = 0 && R3841 = 0 && R3842 = 0 && R3843 = 0 && R3844 = 0 && R3845 = 0 && R3846 = 0 && R3847 = R3889 && R3848 = 0 && R3849 = R3889 && R3850 = 0 && R3851 = R3889 && R3852 = 0 && R3853 = R3889 && R3854 = 0 && R3855 = R3889 && R3856 = 0 && R3857 = R3889 && R3858 = 0 && R3859 = R3889 && R3860 = 0 && R3861 = R3889 && R3862 = 0 && R3863 = R3889 && R3864 = 0 && R3865 = R3889 && R3866 = 0 && R3867 = R3889 && R3868 = 0 && R3869 = R3889 && R3870 = 0 && R3871 = R3889 && R3872 = 0 && R3873 = R3889 && R3874 = 0 && R3875 = R3889 && R3876 = 0 && R3877 = R3889 && R3878 = 0 && R3879 = R3889 && R3880 = 0 && R3881 = R3889 && R3882 = 0 && R3883 = R3889 && R3884 = 0 && R3885 = R3889 && R3886 = 0 && R3887 = R3889 && R3888 = 0 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R2623 + -1*R2621 - R53 < 1 && -1 < R3805 && 0 < R3889 && (R48 + R79 + R76 != 0 || ((R42 + R72 + R70 != 0 || R43 + R73 + R71 + -1*R2623 + -1*R2621 - R53 = 0 || R53 + R2623 + R2621 < 1) && (R42 + R72 + R70 = 0 || R53 + R2623 + R2621 < 1))) && (R48 + R79 + R76 != 0 || ((R46 + R77 + R74 != 0 || R47 + R78 + R75 + -1*R2623 + -1*R2621 - R53 = 0 || R53 + R2623 + R2621 < 1) && (R46 + R77 + R74 = 0 || R53 + R2623 + R2621 < 1))) && (R3790 != 0 || R3791 = R3805 || (R17 = 0 && R3805 = 0)) && (R3792 != 0 || R3793 = R3805 || (R17 = 0 && R3805 = 0)) && (R3794 != 0 || R3795 = R3805 || (R17 = 0 && R3805 = 0)) && (R3796 != 0 || R3797 = R3805 || (R17 = 0 && R3805 = 0)) && (R3798 != 0 || R3799 = R3805 || (R17 = 0 && R3805 = 0)) && (R3800 != 0 || R3801 = R3805 || (R17 = 0 && R3805 = 0)) && (R3802 != 0 || R3803 = R3805 || (R17 = 0 && R3805 = 0)) && (R3806 != 0 || R3805 = R3807 || (R17 = 0 && R3805 = 0)) && (R3808 != 0 || R3805 = R3809 || (R17 = 0 && R3805 = 0)) && (R18 = 0 || (R3828 = 0 && R3829 = 0)) && (R18 = 0 || (R3832 = 0 && R3833 = 0)) && (R18 = 0 || (R3834 = 0 && R3835 = 0)) && (R18 = 0 || (R3836 = 0 && R3837 = 0)) && (R18 = 0 || (R3838 = 0 && R3839 = 0)) && (R19 = 0 || (R3810 = 0 && R3811 = 0)) && (R19 = 0 || (R3812 = 0 && R3813 = 0)) && (R19 = 0 || (R3814 = 0 && R3815 = 0)) && (R19 = 0 || (R3816 = 0 && R3817 = 0)) && (R19 = 0 || (R3818 = 0 && R3819 = 0)) && (R19 = 0 || (R3820 = 0 && R3821 = 0)) && (R19 = 0 || (R3822 = 0 && R3823 = 0)) && (R19 = 0 || (R3824 = 0 && R3825 = 0)) && (R19 = 0 || (R3826 = 0 && R3827 = 0)) && (R48 + R79 + R76 = 0 || (R42 + R72 + R70 = 0 && R43 + R73 + R71 + -1*R2623 + -1*R2621 - R53 = 0)) && (R48 + R79 + R76 = 0 || (R46 + R77 + R74 = 0 && R47 + R78 + R75 + -1*R2623 + -1*R2621 - R53 = 0)) && (R58 + R3473 + R3470 = 0 || (R56 + R3471 + R3468 = 0 && R57 + R3472 + R3469 = 0)) && (R58 + R3473 + R3470 = 0 || (R62 + R3788 + R3786 = 0 && R63 + R3789 + R3787 = 0)) && (R3790 = 0 || (R17 = 0 && R3805 = 0)) && (R3792 = 0 || (R17 = 0 && R3805 = 0)) && (R3794 = 0 || (R17 = 0 && R3805 = 0)) && (R3796 = 0 || (R17 = 0 && R3805 = 0)) && (R3798 = 0 || (R17 = 0 && R3805 = 0)) && (R3800 = 0 || (R17 = 0 && R3805 = 0)) && (R3802 = 0 || (R17 = 0 && R3805 = 0)) && (R3806 = 0 || (R17 = 0 && R3805 = 0)) && (R3808 = 0 || (R17 = 0 && R3805 = 0));
// End of Parikh automata intersection problem
