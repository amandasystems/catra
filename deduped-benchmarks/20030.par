// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R11522, R11523, R11524, R11525, R12, R15342, R15343, R15344, R15345, R15346, R15347, R15348, R15349, R15350, R15351, R15352, R15353, R15354, R15355, R15356, R15357, R15358, R15359, R15360, R15361, R15362, R15363, R15364, R15365, R15366, R15367, R15368, R15369, R15370, R15371, R15372, R15373, R15374, R15375, R15376, R15377, R15378, R15379, R15380, R15381, R15382, R15383, R15384, R15385, R15386, R15387, R15388, R15389, R15390, R15391, R15392, R15393, R15394, R15395, R15396, R15397, R15398, R15399, R15400, R15401, R15402, R15403, R15404, R15405, R15406, R15407, R15408, R15409, R15410, R15411, R15412, R15413, R15414, R15415, R15416, R15417, R15418, R15419, R15420, R15421, R15422, R15423, R15424, R15425, R15426, R15427, R15428, R15429, R15430, R15431, R15432, R15433, R15434, R15435, R15436, R15437, R15438, R15439, R15440, R15441, R15442, R15443, R15444, R15445, R15446, R15447, R15448, R15449, R15450, R15451, R15452, R15453, R15454, R15455, R15456, R15457, R15458, R15459, R15460, R15461, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 72];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [73, 73];
  s0 -> s1 [74, 65535];
  s1 -> s1 [0, 72];
  s1 -> s2 [73, 73];
  s1 -> s1 [74, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s1 [0, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R25 += 1 };
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R15382 += 1, R15383 += 1 };
  s0 -> s1 [0, 65535] { R15383 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R15383 += 1, R19 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 72] { R15385 += 1 };
  s0 -> s0 [0, 65535] { R15384 += 1, R15385 += 1 };
  s0 -> s2 [73, 73] { R15385 += 1 };
  s0 -> s3 [73, 73] { R15385 += 1 };
  s0 -> s1 [78, 65535] { R15385 += 1 };
  s1 -> s1 [0, 72] { R15385 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R15385 += 1 };
  s1 -> s3 [73, 73] { R15385 += 1 };
  s1 -> s1 [78, 65535] { R15385 += 1 };
  s2 -> s2 [0, 73] { R15385 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [78, 65535] { R15385 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 72] { R15387 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R15386 += 1, R15387 += 1 };
  s0 -> s2 [73, 73] { R15387 += 1, R38 += 1 };
  s0 -> s3 [73, 73] { R15387 += 1, R38 += 1 };
  s0 -> s1 [74, 65535] { R15387 += 1, R38 += 1 };
  s1 -> s1 [0, 72] { R15387 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R15387 += 1, R38 += 1 };
  s1 -> s3 [73, 73] { R15387 += 1, R38 += 1 };
  s1 -> s1 [74, 65535] { R15387 += 1, R38 += 1 };
  s2 -> s2 [0, 65535] { R15387 += 1, R38 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 72] { R15389 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R15388 += 1, R15389 += 1 };
  s0 -> s2 [73, 73] { R15389 += 1, R40 += 1 };
  s0 -> s3 [73, 73] { R15389 += 1, R40 += 1 };
  s0 -> s1 [74, 65535] { R15389 += 1, R40 += 1 };
  s1 -> s1 [0, 72] { R15389 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R15389 += 1, R40 += 1 };
  s1 -> s3 [73, 73] { R15389 += 1, R40 += 1 };
  s1 -> s1 [74, 65535] { R15389 += 1, R40 += 1 };
  s2 -> s2 [0, 65535] { R15389 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 72] { R15391 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R15390 += 1, R15391 += 1 };
  s0 -> s2 [73, 73] { R15391 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [73, 73] { R15391 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [74, 65535] { R15391 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 72] { R15391 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R15391 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [73, 73] { R15391 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [74, 65535] { R15391 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535] { R15391 += 1, R42 += 1, R43 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 72] { R15393 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R15392 += 1, R15393 += 1 };
  s0 -> s2 [73, 73] { R15393 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [73, 73] { R15393 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [74, 65535] { R15393 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 72] { R15393 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R15393 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [73, 73] { R15393 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [74, 65535] { R15393 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R15393 += 1, R46 += 1, R47 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 72] { R15395 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R15394 += 1, R15395 += 1 };
  s0 -> s2 [73, 73] { R15395 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [73, 73] { R15395 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [74, 65535] { R15395 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 72] { R15395 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R15395 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [73, 73] { R15395 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [74, 65535] { R15395 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R15395 += 1, R52 += 1, R53 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 72] { R15397 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R15396 += 1, R15397 += 1 };
  s0 -> s2 [73, 73] { R15397 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [73, 73] { R15397 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [74, 65535] { R15397 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 72] { R15397 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R15397 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [73, 73] { R15397 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [74, 65535] { R15397 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535] { R15397 += 1, R56 += 1, R57 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 72] { R15399 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R15398 += 1, R15399 += 1 };
  s0 -> s2 [73, 73] { R15399 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [73, 73] { R15399 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [74, 65535] { R15399 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 72] { R15399 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R15399 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [73, 73] { R15399 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [74, 65535] { R15399 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535] { R15399 += 1, R62 += 1, R63 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 72] { R15419 += 1 };
  s0 -> s0 [0, 65535] { R15418 += 1, R15419 += 1 };
  s0 -> s2 [73, 73] { R15419 += 1 };
  s0 -> s1 [74, 65535] { R15419 += 1 };
  s1 -> s1 [0, 72] { R15419 += 1 };
  s1 -> s2 [73, 73] { R15419 += 1 };
  s1 -> s1 [74, 65535] { R15419 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R15419 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R15420 += 1, R15421 += 1 };
  s0 -> s1 [0, 65535] { R15421 += 1, R1 += 1 };
  s1 -> s1 [0, 65535] { R15421 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 72] { R15423 += 1 };
  s0 -> s2 [0, 65535] { R15423 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R15422 += 1, R15423 += 1 };
  s0 -> s3 [73, 73] { R15423 += 1 };
  s0 -> s1 [74, 65535] { R15423 += 1 };
  s1 -> s1 [0, 72] { R15423 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [73, 73] { R15423 += 1 };
  s1 -> s1 [74, 65535] { R15423 += 1 };
  s2 -> s1 [0, 72] { R15423 += 1 };
  s2 -> s2 [0, 65535] { R15423 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [73, 73] { R15423 += 1 };
  s2 -> s1 [74, 65535] { R15423 += 1 };
  s3 -> s3 [0, 65535] { R15423 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 72] { R15425 += 1, R15363 += 1 };
  s0 -> s2 [0, 65535] { R15425 += 1, R15362 += 1, R15363 += 1 };
  s0 -> s0 [0, 65535] { R15424 += 1, R15425 += 1 };
  s0 -> s1 [74, 65535] { R15425 += 1, R15363 += 1 };
  s1 -> s1 [0, 72] { R15425 += 1, R15363 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R15425 += 1 };
  s1 -> s1 [74, 65535] { R15425 += 1, R15363 += 1 };
  s2 -> s1 [0, 72] { R15425 += 1, R15363 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R15425 += 1, R15362 += 1, R15363 += 1 };
  s2 -> s1 [74, 65535] { R15425 += 1, R15363 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s0 [0, 65535] { R15426 += 1, R15427 += 1 };
  s0 -> s1 [0, 65535] { R15427 += 1, R15364 += 1, R15365 += 1 };
  s0 -> s2 [0, 65535] { R15427 += 1, R15365 += 1, R17 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R15427 += 1, R15364 += 1, R15365 += 1 };
  s1 -> s2 [0, 65535] { R15427 += 1, R15365 += 1, R17 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R15427 += 1 };
  s2 -> s2 [0, 65535] { R15427 += 1, R15365 += 1, R17 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R15427 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 73] { R15429 += 1, R15367 += 1 };
  s0 -> s0 [0, 65535] { R15428 += 1, R15429 += 1 };
  s0 -> s2 [0, 65535] { R15429 += 1, R15366 += 1, R15367 += 1 };
  s0 -> s1 [77, 65535] { R15429 += 1, R15367 += 1 };
  s1 -> s1 [0, 73] { R15429 += 1, R15367 += 1 };
  s1 -> s1 [0, 65535] { R15429 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [77, 65535] { R15429 += 1, R15367 += 1 };
  s2 -> s1 [0, 73] { R15429 += 1, R15367 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R15429 += 1, R15366 += 1, R15367 += 1 };
  s2 -> s1 [77, 65535] { R15429 += 1, R15367 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s0 [0, 65535] { R15430 += 1, R15431 += 1 };
  s0 -> s1 [0, 65535] { R15431 += 1, R15369 += 1, R67 += 1 };
  s0 -> s2 [0, 65535] { R15431 += 1, R15368 += 1, R15369 += 1 };
  s1 -> s1 [0, 65535] { R15431 += 1, R15369 += 1, R67 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R15431 += 1 };
  s2 -> s1 [0, 65535] { R15431 += 1, R15369 += 1, R67 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R15431 += 1, R15368 += 1, R15369 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R15431 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 76] { R15433 += 1, R15371 += 1 };
  s0 -> s0 [0, 65535] { R15432 += 1, R15433 += 1 };
  s0 -> s2 [0, 65535] { R15433 += 1, R15370 += 1, R15371 += 1 };
  s0 -> s3 [0, 65535] { R15433 += 1, R15371 += 1, R69 += 1 };
  s0 -> s1 [78, 65535] { R15433 += 1, R15371 += 1 };
  s1 -> s1 [0, 76] { R15433 += 1, R15371 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R15433 += 1 };
  s1 -> s1 [78, 65535] { R15433 += 1, R15371 += 1 };
  s2 -> s1 [0, 76] { R15433 += 1, R15371 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R15433 += 1, R15370 += 1, R15371 += 1 };
  s2 -> s3 [0, 65535] { R15433 += 1, R15371 += 1, R69 += 1 };
  s2 -> s1 [78, 65535] { R15433 += 1, R15371 += 1 };
  s3 -> s1 [0, 76] { R15433 += 1, R15371 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R15433 += 1 };
  s3 -> s3 [0, 65535] { R15433 += 1, R15371 += 1, R69 += 1 };
  s3 -> s1 [78, 65535] { R15433 += 1, R15371 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R15433 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 76] { R15435 += 1, R15373 += 1, R11525 += 1 };
  s0 -> s0 [0, 65535] { R15434 += 1, R15435 += 1 };
  s0 -> s2 [0, 65535] { R15435 += 1, R15372 += 1, R15373 += 1 };
  s0 -> s1 [0, 65535] { R15435 += 1, R15373 += 1 };
  s0 -> s1 [78, 65535] { R15435 += 1, R15373 += 1, R11525 += 1 };
  s1 -> s1 [0, 76] { R15435 += 1, R15373 += 1, R11525 += 1 };
  s1 -> s4 [0, 65535] { R15435 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R15435 += 1, R15373 += 1 };
  s1 -> s1 [78, 65535] { R15435 += 1, R15373 += 1, R11525 += 1 };
  s2 -> s1 [0, 76] { R15435 += 1, R15373 += 1, R11525 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R15435 += 1, R15372 += 1, R15373 += 1 };
  s2 -> s1 [0, 65535] { R15435 += 1, R15373 += 1 };
  s2 -> s1 [78, 65535] { R15435 += 1, R15373 += 1, R11525 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R15435 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s0 [0, 65535] { R15436 += 1, R15437 += 1 };
  s0 -> s1 [0, 65535] { R15437 += 1, R15374 += 1, R15375 += 1 };
  s0 -> s2 [0, 65535] { R15437 += 1, R15375 += 1, R15346 += 1, R15347 += 1 };
  s0 -> s3 [0, 65535] { R15437 += 1, R15375 += 1 };
  s1 -> s1 [0, 65535] { R15437 += 1, R15374 += 1, R15375 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s2 [0, 65535] { R15437 += 1, R15375 += 1, R15346 += 1, R15347 += 1 };
  s1 -> s3 [0, 65535] { R15437 += 1, R15375 += 1 };
  s2 -> s4 [0, 65535] { R15437 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R15437 += 1, R15375 += 1, R15346 += 1, R15347 += 1 };
  s2 -> s3 [0, 65535] { R15437 += 1, R15375 += 1 };
  s3 -> s4 [0, 65535] { R15437 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R15437 += 1, R15375 += 1 };
  s4 -> s4 [0, 65535] { R15437 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 77] { R15439 += 1, R15377 += 1, R15351 += 1 };
  s0 -> s0 [0, 65535] { R15438 += 1, R15439 += 1 };
  s0 -> s1 [0, 65535] { R15439 += 1, R15377 += 1 };
  s0 -> s2 [0, 65535] { R15439 += 1, R15376 += 1, R15377 += 1 };
  s0 -> s1 [81, 65535] { R15439 += 1, R15377 += 1, R15351 += 1 };
  s1 -> s1 [0, 77] { R15439 += 1, R15377 += 1, R15351 += 1 };
  s1 -> s4 [0, 65535] { R15439 += 1 };
  s1 -> s1 [0, 65535] { R15439 += 1, R15377 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [81, 65535] { R15439 += 1, R15377 += 1, R15351 += 1 };
  s2 -> s1 [0, 77] { R15439 += 1, R15377 += 1, R15351 += 1 };
  s2 -> s1 [0, 65535] { R15439 += 1, R15377 += 1 };
  s2 -> s2 [0, 65535] { R15439 += 1, R15376 += 1, R15377 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [81, 65535] { R15439 += 1, R15377 += 1, R15351 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R15439 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R15441 += 1, R15379 += 1, R15355 += 1, R15356 += 1 };
  s0 -> s2 [0, 65535] { R15441 += 1, R15378 += 1, R15379 += 1 };
  s0 -> s0 [0, 65535] { R15440 += 1, R15441 += 1 };
  s0 -> s3 [0, 65535] { R15441 += 1, R15379 += 1, R15356 += 1, R15357 += 1 };
  s1 -> s1 [0, 65535] { R15441 += 1, R15379 += 1, R15355 += 1, R15356 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R15441 += 1 };
  s1 -> s3 [0, 65535] { R15441 += 1, R15379 += 1, R15356 += 1, R15357 += 1 };
  s2 -> s1 [0, 65535] { R15441 += 1, R15379 += 1, R15355 += 1, R15356 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R15441 += 1, R15378 += 1, R15379 += 1 };
  s2 -> s3 [0, 65535] { R15441 += 1, R15379 += 1, R15356 += 1, R15357 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R15441 += 1, R15379 += 1 };
  s3 -> s6 [0, 65535] { R15441 += 1 };
  s3 -> s3 [0, 65535] { R15441 += 1, R15379 += 1, R15356 += 1, R15357 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R15441 += 1, R15379 += 1 };
  s5 -> s6 [0, 65535] { R15441 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R15441 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 76] { R15443 += 1, R15381 += 1, R15361 += 1 };
  s0 -> s2 [0, 65535] { R15443 += 1, R15381 += 1, R15360 += 1, R15361 += 1 };
  s0 -> s3 [0, 65535] { R15443 += 1, R15380 += 1, R15381 += 1 };
  s0 -> s0 [0, 65535] { R15442 += 1, R15443 += 1 };
  s0 -> s4 [77, 77] { R15443 += 1, R15381 += 1, R15361 += 1 };
  s0 -> s5 [77, 77] { R15443 += 1, R15381 += 1, R15361 += 1 };
  s0 -> s1 [82, 65535] { R15443 += 1, R15381 += 1, R15361 += 1 };
  s1 -> s1 [0, 76] { R15443 += 1, R15381 += 1, R15361 += 1 };
  s1 -> s6 [0, 65535] { R15443 += 1 };
  s1 -> s1 [0, 65535] { R15443 += 1, R15381 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s4 [77, 77] { R15443 += 1, R15381 += 1, R15361 += 1 };
  s1 -> s5 [77, 77] { R15443 += 1, R15381 += 1, R15361 += 1 };
  s1 -> s1 [82, 65535] { R15443 += 1, R15381 += 1, R15361 += 1 };
  s2 -> s1 [0, 76] { R15443 += 1, R15381 += 1, R15361 += 1 };
  s2 -> s2 [0, 65535] { R15443 += 1, R15381 += 1, R15360 += 1, R15361 += 1 };
  s2 -> s6 [0, 65535] { R15443 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s4 [77, 77] { R15443 += 1, R15381 += 1, R15361 += 1 };
  s2 -> s5 [77, 77] { R15443 += 1, R15381 += 1, R15361 += 1 };
  s2 -> s1 [82, 65535] { R15443 += 1, R15381 += 1, R15361 += 1 };
  s3 -> s1 [0, 76] { R15443 += 1, R15381 += 1, R15361 += 1 };
  s3 -> s2 [0, 65535] { R15443 += 1, R15381 += 1, R15360 += 1, R15361 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s3 [0, 65535] { R15443 += 1, R15380 += 1, R15381 += 1 };
  s3 -> s4 [77, 77] { R15443 += 1, R15381 += 1, R15361 += 1 };
  s3 -> s5 [77, 77] { R15443 += 1, R15381 += 1, R15361 += 1 };
  s3 -> s1 [82, 65535] { R15443 += 1, R15381 += 1, R15361 += 1 };
  s4 -> s6 [0, 65535] { R15443 += 1 };
  s4 -> s4 [0, 65535] { R15443 += 1, R15381 += 1 };
  s4 -> s7 [0, 65535];
  s5 -> s5 [0, 77] { R15443 += 1, R15381 += 1, R15361 += 1 };
  s5 -> s6 [0, 65535] { R15443 += 1 };
  s5 -> s5 [0, 65535] { R15443 += 1, R15381 += 1 };
  s5 -> s7 [0, 65535];
  s5 -> s5 [82, 65535] { R15443 += 1, R15381 += 1, R15361 += 1 };
  s6 -> s6 [0, 65535] { R15443 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s0 [0, 65535] { R15444 += 1, R15445 += 1 };
  s0 -> s1 [0, 65535] { R15445 += 1, R15401 += 1, R18 += 1 };
  s0 -> s2 [0, 65535] { R15445 += 1, R15400 += 1, R15401 += 1 };
  s1 -> s4 [0, 65535] { R15445 += 1 };
  s1 -> s1 [0, 65535] { R15445 += 1, R15401 += 1, R18 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R15445 += 1, R15401 += 1, R18 += 1 };
  s2 -> s2 [0, 65535] { R15445 += 1, R15400 += 1, R15401 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R15445 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 72] { R15447 += 1, R15403 += 1 };
  s0 -> s0 [0, 65535] { R15446 += 1, R15447 += 1 };
  s0 -> s2 [0, 65535] { R15447 += 1, R15402 += 1, R15403 += 1 };
  s0 -> s3 [73, 73] { R15447 += 1, R15403 += 1 };
  s0 -> s4 [73, 73] { R15447 += 1, R15403 += 1 };
  s0 -> s5 [77, 77] { R15447 += 1, R15403 += 1 };
  s0 -> s1 [78, 65535] { R15447 += 1, R15403 += 1 };
  s1 -> s1 [0, 72] { R15447 += 1, R15403 += 1 };
  s1 -> s3 [73, 73] { R15447 += 1, R15403 += 1 };
  s1 -> s4 [73, 73] { R15447 += 1, R15403 += 1 };
  s1 -> s5 [77, 77] { R15447 += 1, R15403 += 1 };
  s1 -> s1 [78, 65535] { R15447 += 1, R15403 += 1 };
  s2 -> s1 [0, 72] { R15447 += 1, R15403 += 1 };
  s2 -> s2 [0, 65535] { R15447 += 1, R15402 += 1, R15403 += 1 };
  s2 -> s3 [73, 73] { R15447 += 1, R15403 += 1 };
  s2 -> s4 [73, 73] { R15447 += 1, R15403 += 1 };
  s2 -> s5 [77, 77] { R15447 += 1, R15403 += 1 };
  s2 -> s1 [78, 65535] { R15447 += 1, R15403 += 1 };
  s4 -> s4 [0, 73] { R15447 += 1, R15403 += 1 };
  s4 -> s8 [77, 77] { R15447 += 1, R15403 += 1 };
  s4 -> s4 [78, 65535] { R15447 += 1, R15403 += 1 };
  s5 -> s5 [0, 72] { R15447 += 1, R15403 += 1 };
  s5 -> s5 [0, 65535] { R15447 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [73, 73] { R15447 += 1, R15403 += 1 };
  s5 -> s8 [73, 73] { R15447 += 1, R15403 += 1 };
  s5 -> s5 [77, 65535] { R15447 += 1, R15403 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R15447 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 73] { R15447 += 1, R15403 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R15447 += 1 };
  s8 -> s8 [77, 65535] { R15447 += 1, R15403 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 72] { R15449 += 1, R15405 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R15448 += 1, R15449 += 1 };
  s0 -> s2 [0, 65535] { R15449 += 1, R15404 += 1, R15405 += 1 };
  s0 -> s3 [73, 73] { R15449 += 1, R15405 += 1, R66 += 1 };
  s0 -> s4 [73, 73] { R15449 += 1, R15405 += 1, R66 += 1 };
  s0 -> s1 [74, 65535] { R15449 += 1, R15405 += 1, R66 += 1 };
  s1 -> s1 [0, 72] { R15449 += 1, R15405 += 1, R66 += 1 };
  s1 -> s1 [0, 65535] { R15449 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R15449 += 1, R15405 += 1, R66 += 1 };
  s1 -> s4 [73, 73] { R15449 += 1, R15405 += 1, R66 += 1 };
  s1 -> s1 [74, 65535] { R15449 += 1, R15405 += 1, R66 += 1 };
  s2 -> s1 [0, 72] { R15449 += 1, R15405 += 1, R66 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R15449 += 1, R15404 += 1, R15405 += 1 };
  s2 -> s3 [73, 73] { R15449 += 1, R15405 += 1, R66 += 1 };
  s2 -> s4 [73, 73] { R15449 += 1, R15405 += 1, R66 += 1 };
  s2 -> s1 [74, 65535] { R15449 += 1, R15405 += 1, R66 += 1 };
  s3 -> s6 [0, 65535] { R15449 += 1 };
  s3 -> s3 [0, 65535] { R15449 += 1, R15405 += 1, R66 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R15449 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R15449 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 72] { R15451 += 1, R15407 += 1, R68 += 1 };
  s0 -> s2 [0, 65535] { R15451 += 1, R15406 += 1, R15407 += 1 };
  s0 -> s0 [0, 65535] { R15450 += 1, R15451 += 1 };
  s0 -> s3 [73, 73] { R15451 += 1, R15407 += 1, R68 += 1 };
  s0 -> s4 [73, 73] { R15451 += 1, R15407 += 1, R68 += 1 };
  s0 -> s1 [74, 65535] { R15451 += 1, R15407 += 1, R68 += 1 };
  s1 -> s1 [0, 72] { R15451 += 1, R15407 += 1, R68 += 1 };
  s1 -> s1 [0, 65535] { R15451 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R15451 += 1, R15407 += 1, R68 += 1 };
  s1 -> s4 [73, 73] { R15451 += 1, R15407 += 1, R68 += 1 };
  s1 -> s1 [74, 65535] { R15451 += 1, R15407 += 1, R68 += 1 };
  s2 -> s1 [0, 72] { R15451 += 1, R15407 += 1, R68 += 1 };
  s2 -> s2 [0, 65535] { R15451 += 1, R15406 += 1, R15407 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R15451 += 1, R15407 += 1, R68 += 1 };
  s2 -> s4 [73, 73] { R15451 += 1, R15407 += 1, R68 += 1 };
  s2 -> s1 [74, 65535] { R15451 += 1, R15407 += 1, R68 += 1 };
  s3 -> s6 [0, 65535] { R15451 += 1 };
  s3 -> s3 [0, 65535] { R15451 += 1, R15407 += 1, R68 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R15451 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R15451 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 72] { R15453 += 1, R15409 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s2 [0, 72] { R15453 += 1, R15409 += 1, R11523 += 1 };
  s0 -> s0 [0, 65535] { R15452 += 1, R15453 += 1 };
  s0 -> s3 [0, 65535] { R15453 += 1, R15408 += 1, R15409 += 1 };
  s0 -> s4 [73, 73] { R15453 += 1, R15409 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s5 [73, 73] { R15453 += 1, R15409 += 1, R11523 += 1 };
  s0 -> s6 [73, 73] { R15453 += 1, R15409 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s7 [73, 73] { R15453 += 1, R15409 += 1, R11523 += 1 };
  s0 -> s2 [74, 76] { R15453 += 1, R15409 += 1, R11523 += 1 };
  s0 -> s1 [74, 65535] { R15453 += 1, R15409 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s2 [78, 65535] { R15453 += 1, R15409 += 1, R11523 += 1 };
  s1 -> s1 [0, 72] { R15453 += 1, R15409 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s2 [0, 72] { R15453 += 1, R15409 += 1, R11523 += 1 };
  s1 -> s4 [73, 73] { R15453 += 1, R15409 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s5 [73, 73] { R15453 += 1, R15409 += 1, R11523 += 1 };
  s1 -> s6 [73, 73] { R15453 += 1, R15409 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s7 [73, 73] { R15453 += 1, R15409 += 1, R11523 += 1 };
  s1 -> s2 [74, 76] { R15453 += 1, R15409 += 1, R11523 += 1 };
  s1 -> s1 [74, 65535] { R15453 += 1, R15409 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s2 [78, 65535] { R15453 += 1, R15409 += 1, R11523 += 1 };
  s2 -> s2 [0, 72] { R15453 += 1, R15409 += 1, R11523 += 1 };
  s2 -> s2 [0, 65535] { R15453 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s5 [73, 73] { R15453 += 1, R15409 += 1 };
  s2 -> s7 [73, 73] { R15453 += 1, R15409 += 1 };
  s2 -> s2 [74, 76] { R15453 += 1, R15409 += 1, R11523 += 1 };
  s2 -> s2 [74, 65535] { R15453 += 1, R15409 += 1 };
  s2 -> s2 [78, 65535] { R15453 += 1, R15409 += 1, R11523 += 1 };
  s3 -> s1 [0, 72] { R15453 += 1, R15409 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s2 [0, 72] { R15453 += 1, R15409 += 1, R11523 += 1 };
  s3 -> s3 [0, 65535] { R15453 += 1, R15408 += 1, R15409 += 1 };
  s3 -> s4 [73, 73] { R15453 += 1, R15409 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s5 [73, 73] { R15453 += 1, R15409 += 1, R11523 += 1 };
  s3 -> s6 [73, 73] { R15453 += 1, R15409 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s7 [73, 73] { R15453 += 1, R15409 += 1, R11523 += 1 };
  s3 -> s2 [74, 76] { R15453 += 1, R15409 += 1, R11523 += 1 };
  s3 -> s1 [74, 65535] { R15453 += 1, R15409 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s2 [78, 65535] { R15453 += 1, R15409 += 1, R11523 += 1 };
  s4 -> s5 [0, 76] { R15453 += 1, R15409 += 1, R11523 += 1 };
  s4 -> s4 [0, 65535] { R15453 += 1, R15409 += 1, R11522 += 1, R11523 += 1 };
  s4 -> s5 [78, 65535] { R15453 += 1, R15409 += 1, R11523 += 1 };
  s5 -> s5 [0, 76] { R15453 += 1, R15409 += 1, R11523 += 1 };
  s5 -> s9 [0, 65535] { R15453 += 1 };
  s5 -> s5 [0, 65535] { R15453 += 1, R15409 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s5 [78, 65535] { R15453 += 1, R15409 += 1, R11523 += 1 };
  s7 -> s7 [0, 65535] { R15453 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R15453 += 1 };
  s9 -> s8 [0, 65535];
  accepting s8, s5, s2, s9, s7;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 72] { R15455 += 1, R15411 += 1, R15343 += 1, R15344 += 1 };
  s0 -> s2 [0, 72] { R15455 += 1, R15411 += 1, R15342 += 1, R15343 += 1 };
  s0 -> s0 [0, 65535] { R15454 += 1, R15455 += 1 };
  s0 -> s3 [0, 65535] { R15455 += 1, R15410 += 1, R15411 += 1 };
  s0 -> s4 [73, 73] { R15455 += 1, R15411 += 1, R15342 += 1, R15343 += 1 };
  s0 -> s5 [73, 73] { R15455 += 1, R15411 += 1, R15343 += 1, R15344 += 1 };
  s0 -> s6 [73, 73] { R15455 += 1, R15411 += 1, R15343 += 1, R15344 += 1 };
  s0 -> s7 [73, 73] { R15455 += 1, R15411 += 1, R15342 += 1, R15343 += 1 };
  s0 -> s1 [74, 65535] { R15455 += 1, R15411 += 1, R15343 += 1, R15344 += 1 };
  s0 -> s2 [74, 65535] { R15455 += 1, R15411 += 1, R15342 += 1, R15343 += 1 };
  s1 -> s1 [0, 72] { R15455 += 1, R15411 += 1, R15343 += 1, R15344 += 1 };
  s1 -> s9 [0, 65535];
  s1 -> s1 [0, 65535] { R15455 += 1 };
  s1 -> s5 [73, 73] { R15455 += 1, R15411 += 1, R15343 += 1, R15344 += 1 };
  s1 -> s6 [73, 73] { R15455 += 1, R15411 += 1, R15343 += 1, R15344 += 1 };
  s1 -> s1 [74, 65535] { R15455 += 1, R15411 += 1, R15343 += 1, R15344 += 1 };
  s2 -> s1 [0, 72] { R15455 += 1, R15411 += 1, R15343 += 1, R15344 += 1 };
  s2 -> s2 [0, 72] { R15455 += 1, R15411 += 1, R15342 += 1, R15343 += 1 };
  s2 -> s4 [73, 73] { R15455 += 1, R15411 += 1, R15342 += 1, R15343 += 1 };
  s2 -> s5 [73, 73] { R15455 += 1, R15411 += 1, R15343 += 1, R15344 += 1 };
  s2 -> s6 [73, 73] { R15455 += 1, R15411 += 1, R15343 += 1, R15344 += 1 };
  s2 -> s7 [73, 73] { R15455 += 1, R15411 += 1, R15342 += 1, R15343 += 1 };
  s2 -> s1 [74, 65535] { R15455 += 1, R15411 += 1, R15343 += 1, R15344 += 1 };
  s2 -> s2 [74, 65535] { R15455 += 1, R15411 += 1, R15342 += 1, R15343 += 1 };
  s3 -> s1 [0, 72] { R15455 += 1, R15411 += 1, R15343 += 1, R15344 += 1 };
  s3 -> s2 [0, 72] { R15455 += 1, R15411 += 1, R15342 += 1, R15343 += 1 };
  s3 -> s3 [0, 65535] { R15455 += 1, R15410 += 1, R15411 += 1 };
  s3 -> s4 [73, 73] { R15455 += 1, R15411 += 1, R15342 += 1, R15343 += 1 };
  s3 -> s5 [73, 73] { R15455 += 1, R15411 += 1, R15343 += 1, R15344 += 1 };
  s3 -> s6 [73, 73] { R15455 += 1, R15411 += 1, R15343 += 1, R15344 += 1 };
  s3 -> s7 [73, 73] { R15455 += 1, R15411 += 1, R15342 += 1, R15343 += 1 };
  s3 -> s1 [74, 65535] { R15455 += 1, R15411 += 1, R15343 += 1, R15344 += 1 };
  s3 -> s2 [74, 65535] { R15455 += 1, R15411 += 1, R15342 += 1, R15343 += 1 };
  s4 -> s4 [0, 65535] { R15455 += 1, R15411 += 1, R15342 += 1, R15343 += 1 };
  s4 -> s6 [0, 65535] { R15455 += 1, R15411 += 1, R15343 += 1, R15344 += 1 };
  s5 -> s5 [0, 65535] { R15455 += 1 };
  s5 -> s9 [0, 65535];
  s6 -> s8 [0, 65535] { R15455 += 1 };
  s6 -> s9 [0, 65535];
  s6 -> s6 [0, 65535] { R15455 += 1, R15411 += 1, R15343 += 1, R15344 += 1 };
  s8 -> s8 [0, 65535] { R15455 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s8, s5, s9, s6, s1;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 72] { R15457 += 1, R15413 += 1, R15349 += 1 };
  s0 -> s2 [0, 72] { R15457 += 1, R15413 += 1, R15348 += 1, R15349 += 1 };
  s0 -> s0 [0, 65535] { R15456 += 1, R15457 += 1 };
  s0 -> s3 [0, 65535] { R15457 += 1, R15412 += 1, R15413 += 1 };
  s0 -> s4 [73, 73] { R15457 += 1, R15413 += 1, R15348 += 1, R15349 += 1 };
  s0 -> s5 [73, 73] { R15457 += 1, R15413 += 1, R15349 += 1 };
  s0 -> s6 [73, 73] { R15457 += 1, R15413 += 1, R15348 += 1, R15349 += 1 };
  s0 -> s7 [73, 73] { R15457 += 1, R15413 += 1, R15349 += 1 };
  s0 -> s1 [74, 77] { R15457 += 1, R15413 += 1, R15349 += 1 };
  s0 -> s2 [74, 65535] { R15457 += 1, R15413 += 1, R15348 += 1, R15349 += 1 };
  s0 -> s8 [81, 81] { R15457 += 1, R15413 += 1, R15349 += 1 };
  s0 -> s1 [82, 65535] { R15457 += 1, R15413 += 1, R15349 += 1 };
  s1 -> s1 [0, 72] { R15457 += 1, R15413 += 1, R15349 += 1 };
  s1 -> s5 [73, 73] { R15457 += 1, R15413 += 1, R15349 += 1 };
  s1 -> s7 [73, 73] { R15457 += 1, R15413 += 1, R15349 += 1 };
  s1 -> s1 [74, 77] { R15457 += 1, R15413 += 1, R15349 += 1 };
  s1 -> s8 [81, 81] { R15457 += 1, R15413 += 1, R15349 += 1 };
  s1 -> s1 [82, 65535] { R15457 += 1, R15413 += 1, R15349 += 1 };
  s2 -> s1 [0, 72] { R15457 += 1, R15413 += 1, R15349 += 1 };
  s2 -> s2 [0, 72] { R15457 += 1, R15413 += 1, R15348 += 1, R15349 += 1 };
  s2 -> s4 [73, 73] { R15457 += 1, R15413 += 1, R15348 += 1, R15349 += 1 };
  s2 -> s5 [73, 73] { R15457 += 1, R15413 += 1, R15349 += 1 };
  s2 -> s6 [73, 73] { R15457 += 1, R15413 += 1, R15348 += 1, R15349 += 1 };
  s2 -> s7 [73, 73] { R15457 += 1, R15413 += 1, R15349 += 1 };
  s2 -> s1 [74, 77] { R15457 += 1, R15413 += 1, R15349 += 1 };
  s2 -> s2 [74, 65535] { R15457 += 1, R15413 += 1, R15348 += 1, R15349 += 1 };
  s2 -> s8 [81, 81] { R15457 += 1, R15413 += 1, R15349 += 1 };
  s2 -> s1 [82, 65535] { R15457 += 1, R15413 += 1, R15349 += 1 };
  s3 -> s1 [0, 72] { R15457 += 1, R15413 += 1, R15349 += 1 };
  s3 -> s2 [0, 72] { R15457 += 1, R15413 += 1, R15348 += 1, R15349 += 1 };
  s3 -> s3 [0, 65535] { R15457 += 1, R15412 += 1, R15413 += 1 };
  s3 -> s4 [73, 73] { R15457 += 1, R15413 += 1, R15348 += 1, R15349 += 1 };
  s3 -> s5 [73, 73] { R15457 += 1, R15413 += 1, R15349 += 1 };
  s3 -> s6 [73, 73] { R15457 += 1, R15413 += 1, R15348 += 1, R15349 += 1 };
  s3 -> s7 [73, 73] { R15457 += 1, R15413 += 1, R15349 += 1 };
  s3 -> s1 [74, 77] { R15457 += 1, R15413 += 1, R15349 += 1 };
  s3 -> s2 [74, 65535] { R15457 += 1, R15413 += 1, R15348 += 1, R15349 += 1 };
  s3 -> s8 [81, 81] { R15457 += 1, R15413 += 1, R15349 += 1 };
  s3 -> s1 [82, 65535] { R15457 += 1, R15413 += 1, R15349 += 1 };
  s6 -> s7 [0, 77] { R15457 += 1, R15413 += 1, R15349 += 1 };
  s6 -> s6 [0, 65535] { R15457 += 1, R15413 += 1, R15348 += 1, R15349 += 1 };
  s6 -> s11 [81, 81] { R15457 += 1, R15413 += 1, R15349 += 1 };
  s6 -> s7 [82, 65535] { R15457 += 1, R15413 += 1, R15349 += 1 };
  s7 -> s7 [0, 77] { R15457 += 1, R15413 += 1, R15349 += 1 };
  s7 -> s11 [81, 81] { R15457 += 1, R15413 += 1, R15349 += 1 };
  s7 -> s7 [82, 65535] { R15457 += 1, R15413 += 1, R15349 += 1 };
  s8 -> s8 [0, 72] { R15457 += 1, R15413 += 1, R15349 += 1 };
  s8 -> s8 [0, 65535] { R15457 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [73, 73] { R15457 += 1, R15413 += 1 };
  s8 -> s11 [73, 73] { R15457 += 1, R15413 += 1 };
  s8 -> s8 [74, 77] { R15457 += 1, R15413 += 1, R15349 += 1 };
  s8 -> s8 [74, 65535] { R15457 += 1, R15413 += 1 };
  s8 -> s8 [81, 65535] { R15457 += 1, R15413 += 1, R15349 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R15457 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s11 [0, 77] { R15457 += 1, R15413 += 1, R15349 += 1 };
  s11 -> s12 [0, 65535] { R15457 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R15457 += 1, R15413 += 1 };
  s11 -> s11 [81, 65535] { R15457 += 1, R15413 += 1, R15349 += 1 };
  s12 -> s12 [0, 65535] { R15457 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 72] { R15459 += 1, R15415 += 1, R15352 += 1, R15353 += 1 };
  s0 -> s0 [0, 65535] { R15458 += 1, R15459 += 1 };
  s0 -> s2 [0, 65535] { R15459 += 1, R15414 += 1, R15415 += 1 };
  s0 -> s3 [73, 73] { R15459 += 1, R15415 += 1, R15352 += 1, R15353 += 1 };
  s0 -> s4 [73, 73] { R15459 += 1, R15415 += 1, R15352 += 1, R15353 += 1 };
  s0 -> s1 [74, 65535] { R15459 += 1, R15415 += 1, R15352 += 1, R15353 += 1 };
  s1 -> s1 [0, 72] { R15459 += 1, R15415 += 1, R15352 += 1, R15353 += 1 };
  s1 -> s1 [0, 65535] { R15459 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R15459 += 1, R15415 += 1, R15352 += 1, R15353 += 1 };
  s1 -> s4 [73, 73] { R15459 += 1, R15415 += 1, R15352 += 1, R15353 += 1 };
  s1 -> s1 [74, 65535] { R15459 += 1, R15415 += 1, R15352 += 1, R15353 += 1 };
  s2 -> s1 [0, 72] { R15459 += 1, R15415 += 1, R15352 += 1, R15353 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R15459 += 1, R15414 += 1, R15415 += 1 };
  s2 -> s3 [73, 73] { R15459 += 1, R15415 += 1, R15352 += 1, R15353 += 1 };
  s2 -> s4 [73, 73] { R15459 += 1, R15415 += 1, R15352 += 1, R15353 += 1 };
  s2 -> s1 [74, 65535] { R15459 += 1, R15415 += 1, R15352 += 1, R15353 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R15459 += 1, R15415 += 1, R15352 += 1, R15353 += 1 };
  s3 -> s6 [0, 65535] { R15459 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R15459 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R15459 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 72] { R15461 += 1, R15417 += 1, R15358 += 1, R15359 += 1 };
  s0 -> s0 [0, 65535] { R15460 += 1, R15461 += 1 };
  s0 -> s2 [0, 65535] { R15461 += 1, R15416 += 1, R15417 += 1 };
  s0 -> s3 [73, 73] { R15461 += 1, R15417 += 1, R15358 += 1, R15359 += 1 };
  s0 -> s4 [73, 73] { R15461 += 1, R15417 += 1, R15358 += 1, R15359 += 1 };
  s0 -> s1 [74, 65535] { R15461 += 1, R15417 += 1, R15358 += 1, R15359 += 1 };
  s1 -> s1 [0, 72] { R15461 += 1, R15417 += 1, R15358 += 1, R15359 += 1 };
  s1 -> s1 [0, 65535] { R15461 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R15461 += 1, R15417 += 1, R15358 += 1, R15359 += 1 };
  s1 -> s4 [73, 73] { R15461 += 1, R15417 += 1, R15358 += 1, R15359 += 1 };
  s1 -> s1 [74, 65535] { R15461 += 1, R15417 += 1, R15358 += 1, R15359 += 1 };
  s2 -> s1 [0, 72] { R15461 += 1, R15417 += 1, R15358 += 1, R15359 += 1 };
  s2 -> s2 [0, 65535] { R15461 += 1, R15416 += 1, R15417 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R15461 += 1, R15417 += 1, R15358 += 1, R15359 += 1 };
  s2 -> s4 [73, 73] { R15461 += 1, R15417 += 1, R15358 += 1, R15359 += 1 };
  s2 -> s1 [74, 65535] { R15461 += 1, R15417 += 1, R15358 += 1, R15359 += 1 };
  s3 -> s3 [0, 65535] { R15461 += 1, R15417 += 1, R15358 += 1, R15359 += 1 };
  s3 -> s6 [0, 65535] { R15461 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R15461 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R15461 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
synchronised {  // Automata constraining P54
automaton P54_0 {
  init s0;
  s0 -> s1 [109, 109];
  accepting s1;
};
};
constraint R2 = R15461 && R20 - R15461 = -1 && R21 = R15461 && R22 - R15461 = -1 && R23 = R15461 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R15351 + -1*R15349 - R53 = 0 && R52 + R15350 + R15348 = 0 && R15402 = 0 && R15403 = 0 && R15408 = 0 && R15409 = 0 && R15410 = 0 && R15411 = 0 && R15412 = 0 && R15413 = 0 && R15418 = 0 && R15419 = R15461 && R15420 = 0 && R15421 = R15461 && R15422 = 0 && R15423 = R15461 && R15424 = 0 && R15425 = R15461 && R15426 = 0 && R15427 = R15461 && R15428 = 0 && R15429 = R15461 && R15430 = 0 && R15431 = R15461 && R15432 = 0 && R15433 = R15461 && R15434 = 0 && R15435 = R15461 && R15436 = 0 && R15437 = R15461 && R15438 = 0 && R15439 = R15461 && R15440 = 0 && R15441 = R15461 && R15442 = 0 && R15443 = R15461 && R15444 = 0 && R15445 = R15461 && R15446 = 0 && R15447 = R15461 && R15448 = 0 && R15449 = R15461 && R15450 = 0 && R15451 = R15461 && R15452 = 0 && R15453 = R15461 && R15454 = 0 && R15455 = R15461 && R15456 = 0 && R15457 = R15461 && R15458 = 0 && R15459 = R15461 && R15460 = 0 && -1 < R1 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R15351 + -1*R15349 - R53 < 1 && 0 < R15461 && (R1 != 0 || R17 = 0 || (R15362 = 0 && R15363 = 0)) && (R1 != 0 || R17 = 0 || (R15364 = 0 && R15365 = 0)) && (R1 != 0 || R17 = 0 || (R15366 = 0 && R15367 = 0)) && (R1 != 0 || R17 = 0 || (R15368 = 0 && R15369 = 0)) && (R1 != 0 || R17 = 0 || (R15370 = 0 && R15371 = 0)) && (R1 != 0 || R17 = 0 || (R15372 = 0 && R15373 = 0)) && (R1 != 0 || R17 = 0 || (R15374 = 0 && R15375 = 0)) && (R1 != 0 || R17 = 0 || (R15376 = 0 && R15377 = 0)) && (R1 != 0 || R17 = 0 || (R15378 = 0 && R15379 = 0)) && (R1 != 0 || R17 = 0 || (R15380 = 0 && R15381 = 0)) && (R48 + R15347 + R15344 != 0 || ((R42 + R11524 + R11522 != 0 || R43 + R11525 + R11523 + -1*R15351 + -1*R15349 - R53 = 0 || R53 + R15351 + R15349 < 1) && (R42 + R11524 + R11522 = 0 || R53 + R15351 + R15349 < 1))) && (R48 + R15347 + R15344 != 0 || ((R46 + R15345 + R15342 != 0 || R47 + R15346 + R15343 + -1*R15351 + -1*R15349 - R53 = 0 || R53 + R15351 + R15349 < 1) && (R46 + R15345 + R15342 = 0 || R53 + R15351 + R15349 < 1))) && (R15362 != 0 || R1 = R15363 || R1 < 1) && (R15364 != 0 || R1 = R15365 || R1 < 1) && (R15366 != 0 || R1 = R15367 || R1 < 1) && (R15368 != 0 || R1 = R15369 || R1 < 1) && (R15370 != 0 || R1 = R15371 || R1 < 1) && (R15372 != 0 || R1 = R15373 || R1 < 1) && (R15374 != 0 || R1 = R15375 || R1 < 1) && (R15376 != 0 || R1 = R15377 || R1 < 1) && (R15378 != 0 || R1 = R15379 || R1 < 1) && (R15380 != 0 || R1 = R15381 || R1 < 1) && (R18 = 0 || (R15400 = 0 && R15401 = 0)) && (R18 = 0 || (R15404 = 0 && R15405 = 0)) && (R18 = 0 || (R15406 = 0 && R15407 = 0)) && (R18 = 0 || (R15414 = 0 && R15415 = 0)) && (R18 = 0 || (R15416 = 0 && R15417 = 0)) && (R19 = 0 || (R15382 = 0 && R15383 = 0)) && (R19 = 0 || (R15384 = 0 && R15385 = 0)) && (R19 = 0 || (R15386 = 0 && R15387 = 0)) && (R19 = 0 || (R15388 = 0 && R15389 = 0)) && (R19 = 0 || (R15390 = 0 && R15391 = 0)) && (R19 = 0 || (R15392 = 0 && R15393 = 0)) && (R19 = 0 || (R15394 = 0 && R15395 = 0)) && (R19 = 0 || (R15396 = 0 && R15397 = 0)) && (R19 = 0 || (R15398 = 0 && R15399 = 0)) && (R48 + R15347 + R15344 = 0 || (R42 + R11524 + R11522 = 0 && R43 + R11525 + R11523 + -1*R15351 + -1*R15349 - R53 = 0)) && (R48 + R15347 + R15344 = 0 || (R46 + R15345 + R15342 = 0 && R47 + R15346 + R15343 + -1*R15351 + -1*R15349 - R53 = 0)) && (R58 + R15357 + R15354 = 0 || (R56 + R15355 + R15352 = 0 && R57 + R15356 + R15353 = 0)) && (R58 + R15357 + R15354 = 0 || (R62 + R15360 + R15358 = 0 && R63 + R15361 + R15359 = 0)) && (R15362 = 0 || R1 < 1) && (R15364 = 0 || R1 < 1) && (R15366 = 0 || R1 < 1) && (R15368 = 0 || R1 < 1) && (R15370 = 0 || R1 < 1) && (R15372 = 0 || R1 < 1) && (R15374 = 0 || R1 < 1) && (R15376 = 0 || R1 < 1) && (R15378 = 0 || R1 < 1) && (R15380 = 0 || R1 < 1);
// End of Parikh automata intersection problem
