// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R11522, R11523, R11524, R11525, R12, R15342, R15343, R15344, R15345, R15346, R15347, R16618, R16619, R16620, R16621, R16622, R16623, R16624, R16625, R16626, R16627, R16940, R16941, R16942, R16943, R16944, R16945, R16946, R16947, R16948, R16949, R16950, R16951, R16952, R16953, R16954, R16955, R16956, R16957, R16958, R16959, R16960, R16961, R16962, R16963, R16964, R16965, R16966, R16967, R16968, R16969, R16970, R16971, R16972, R16973, R16974, R16975, R16976, R16977, R16978, R16979, R16980, R16981, R16982, R16983, R16984, R16985, R16986, R16987, R16988, R16989, R16990, R16991, R16992, R16993, R16994, R16995, R16996, R16997, R16998, R16999, R17, R17000, R17001, R17002, R17003, R17004, R17005, R17006, R17007, R17008, R17009, R17010, R17011, R17012, R17013, R17014, R17015, R17016, R17017, R17018, R17019, R17020, R17021, R17022, R17023, R17024, R17025, R17026, R17027, R17028, R17029, R17030, R17031, R17032, R17033, R17034, R17035, R17036, R17037, R17038, R17039, R17040, R17041, R17042, R17043, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 72];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [73, 73];
  s0 -> s1 [74, 65535];
  s1 -> s1 [0, 72];
  s1 -> s2 [73, 73];
  s1 -> s1 [74, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s1 [0, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R25 += 1 };
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R16965 += 1, R19 += 1 };
  s0 -> s0 [0, 65535] { R16964 += 1, R16965 += 1 };
  s1 -> s1 [0, 65535] { R16965 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 72] { R16967 += 1 };
  s0 -> s0 [0, 65535] { R16966 += 1, R16967 += 1 };
  s0 -> s2 [73, 73] { R16967 += 1 };
  s0 -> s3 [73, 73] { R16967 += 1 };
  s0 -> s1 [78, 65535] { R16967 += 1 };
  s1 -> s1 [0, 72] { R16967 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R16967 += 1 };
  s1 -> s3 [73, 73] { R16967 += 1 };
  s1 -> s1 [78, 65535] { R16967 += 1 };
  s2 -> s2 [0, 73] { R16967 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [78, 65535] { R16967 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 72] { R16969 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R16968 += 1, R16969 += 1 };
  s0 -> s2 [73, 73] { R16969 += 1, R38 += 1 };
  s0 -> s3 [73, 73] { R16969 += 1, R38 += 1 };
  s0 -> s1 [74, 65535] { R16969 += 1, R38 += 1 };
  s1 -> s1 [0, 72] { R16969 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R16969 += 1, R38 += 1 };
  s1 -> s3 [73, 73] { R16969 += 1, R38 += 1 };
  s1 -> s1 [74, 65535] { R16969 += 1, R38 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R16969 += 1, R38 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 72] { R16971 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R16970 += 1, R16971 += 1 };
  s0 -> s2 [73, 73] { R16971 += 1, R40 += 1 };
  s0 -> s3 [73, 73] { R16971 += 1, R40 += 1 };
  s0 -> s1 [74, 65535] { R16971 += 1, R40 += 1 };
  s1 -> s1 [0, 72] { R16971 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R16971 += 1, R40 += 1 };
  s1 -> s3 [73, 73] { R16971 += 1, R40 += 1 };
  s1 -> s1 [74, 65535] { R16971 += 1, R40 += 1 };
  s2 -> s2 [0, 65535] { R16971 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 72] { R16973 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R16972 += 1, R16973 += 1 };
  s0 -> s2 [73, 73] { R16973 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [73, 73] { R16973 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [74, 65535] { R16973 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 72] { R16973 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R16973 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [73, 73] { R16973 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [74, 65535] { R16973 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535] { R16973 += 1, R42 += 1, R43 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 72] { R16975 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R16974 += 1, R16975 += 1 };
  s0 -> s2 [73, 73] { R16975 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [73, 73] { R16975 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [74, 65535] { R16975 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 72] { R16975 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R16975 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [73, 73] { R16975 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [74, 65535] { R16975 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R16975 += 1, R46 += 1, R47 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 72] { R16977 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R16976 += 1, R16977 += 1 };
  s0 -> s2 [73, 73] { R16977 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [73, 73] { R16977 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [74, 65535] { R16977 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 72] { R16977 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R16977 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [73, 73] { R16977 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [74, 65535] { R16977 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535] { R16977 += 1, R52 += 1, R53 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 72] { R16979 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R16978 += 1, R16979 += 1 };
  s0 -> s2 [73, 73] { R16979 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [73, 73] { R16979 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [74, 65535] { R16979 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 72] { R16979 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R16979 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [73, 73] { R16979 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [74, 65535] { R16979 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535] { R16979 += 1, R56 += 1, R57 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 72] { R16981 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R16980 += 1, R16981 += 1 };
  s0 -> s2 [73, 73] { R16981 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [73, 73] { R16981 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [74, 65535] { R16981 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 72] { R16981 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R16981 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [73, 73] { R16981 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [74, 65535] { R16981 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R16981 += 1, R62 += 1, R63 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 72] { R17001 += 1 };
  s0 -> s0 [0, 65535] { R17000 += 1, R17001 += 1 };
  s0 -> s2 [73, 73] { R17001 += 1 };
  s0 -> s1 [74, 65535] { R17001 += 1 };
  s1 -> s1 [0, 72] { R17001 += 1 };
  s1 -> s2 [73, 73] { R17001 += 1 };
  s1 -> s1 [74, 65535] { R17001 += 1 };
  s2 -> s2 [0, 65535] { R17001 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R17003 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R17002 += 1, R17003 += 1 };
  s1 -> s1 [0, 65535] { R17003 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 72] { R17005 += 1 };
  s0 -> s0 [0, 65535] { R17004 += 1, R17005 += 1 };
  s0 -> s2 [0, 65535] { R17005 += 1, R8 += 1 };
  s0 -> s3 [73, 73] { R17005 += 1 };
  s0 -> s1 [74, 65535] { R17005 += 1 };
  s1 -> s1 [0, 72] { R17005 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [73, 73] { R17005 += 1 };
  s1 -> s1 [74, 65535] { R17005 += 1 };
  s2 -> s1 [0, 72] { R17005 += 1 };
  s2 -> s2 [0, 65535] { R17005 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [73, 73] { R17005 += 1 };
  s2 -> s1 [74, 65535] { R17005 += 1 };
  s3 -> s3 [0, 65535] { R17005 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 72] { R17007 += 1, R16945 += 1 };
  s0 -> s0 [0, 65535] { R17006 += 1, R17007 += 1 };
  s0 -> s2 [0, 65535] { R17007 += 1, R16944 += 1, R16945 += 1 };
  s0 -> s1 [74, 65535] { R17007 += 1, R16945 += 1 };
  s1 -> s1 [0, 72] { R17007 += 1, R16945 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R17007 += 1 };
  s1 -> s1 [74, 65535] { R17007 += 1, R16945 += 1 };
  s2 -> s1 [0, 72] { R17007 += 1, R16945 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R17007 += 1, R16944 += 1, R16945 += 1 };
  s2 -> s1 [74, 65535] { R17007 += 1, R16945 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s0 [0, 65535] { R17008 += 1, R17009 += 1 };
  s0 -> s1 [0, 65535] { R17009 += 1, R16946 += 1, R16947 += 1 };
  s0 -> s2 [0, 65535] { R17009 += 1, R16947 += 1, R17 += 1 };
  s1 -> s1 [0, 65535] { R17009 += 1, R16946 += 1, R16947 += 1 };
  s1 -> s2 [0, 65535] { R17009 += 1, R16947 += 1, R17 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R17009 += 1 };
  s2 -> s2 [0, 65535] { R17009 += 1, R16947 += 1, R17 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R17009 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 73] { R17011 += 1, R16949 += 1 };
  s0 -> s0 [0, 65535] { R17010 += 1, R17011 += 1 };
  s0 -> s2 [0, 65535] { R17011 += 1, R16948 += 1, R16949 += 1 };
  s0 -> s1 [77, 65535] { R17011 += 1, R16949 += 1 };
  s1 -> s1 [0, 73] { R17011 += 1, R16949 += 1 };
  s1 -> s1 [0, 65535] { R17011 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [77, 65535] { R17011 += 1, R16949 += 1 };
  s2 -> s1 [0, 73] { R17011 += 1, R16949 += 1 };
  s2 -> s2 [0, 65535] { R17011 += 1, R16948 += 1, R16949 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [77, 65535] { R17011 += 1, R16949 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R17013 += 1, R16950 += 1, R16951 += 1 };
  s0 -> s2 [0, 65535] { R17013 += 1, R16951 += 1, R67 += 1 };
  s0 -> s0 [0, 65535] { R17012 += 1, R17013 += 1 };
  s1 -> s1 [0, 65535] { R17013 += 1, R16950 += 1, R16951 += 1 };
  s1 -> s2 [0, 65535] { R17013 += 1, R16951 += 1, R67 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R17013 += 1, R16951 += 1, R67 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R17013 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R17013 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 76] { R17015 += 1, R16953 += 1 };
  s0 -> s2 [0, 65535] { R17015 += 1, R16952 += 1, R16953 += 1 };
  s0 -> s3 [0, 65535] { R17015 += 1, R16953 += 1, R69 += 1 };
  s0 -> s0 [0, 65535] { R17014 += 1, R17015 += 1 };
  s0 -> s1 [78, 65535] { R17015 += 1, R16953 += 1 };
  s1 -> s1 [0, 76] { R17015 += 1, R16953 += 1 };
  s1 -> s1 [0, 65535] { R17015 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [78, 65535] { R17015 += 1, R16953 += 1 };
  s2 -> s1 [0, 76] { R17015 += 1, R16953 += 1 };
  s2 -> s2 [0, 65535] { R17015 += 1, R16952 += 1, R16953 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R17015 += 1, R16953 += 1, R69 += 1 };
  s2 -> s1 [78, 65535] { R17015 += 1, R16953 += 1 };
  s3 -> s1 [0, 76] { R17015 += 1, R16953 += 1 };
  s3 -> s4 [0, 65535] { R17015 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R17015 += 1, R16953 += 1, R69 += 1 };
  s3 -> s1 [78, 65535] { R17015 += 1, R16953 += 1 };
  s4 -> s4 [0, 65535] { R17015 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 76] { R17017 += 1, R16955 += 1, R11525 += 1 };
  s0 -> s2 [0, 65535] { R17017 += 1, R16954 += 1, R16955 += 1 };
  s0 -> s1 [0, 65535] { R17017 += 1, R16955 += 1 };
  s0 -> s0 [0, 65535] { R17016 += 1, R17017 += 1 };
  s0 -> s1 [78, 65535] { R17017 += 1, R16955 += 1, R11525 += 1 };
  s1 -> s1 [0, 76] { R17017 += 1, R16955 += 1, R11525 += 1 };
  s1 -> s1 [0, 65535] { R17017 += 1, R16955 += 1 };
  s1 -> s4 [0, 65535] { R17017 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [78, 65535] { R17017 += 1, R16955 += 1, R11525 += 1 };
  s2 -> s1 [0, 76] { R17017 += 1, R16955 += 1, R11525 += 1 };
  s2 -> s2 [0, 65535] { R17017 += 1, R16954 += 1, R16955 += 1 };
  s2 -> s1 [0, 65535] { R17017 += 1, R16955 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [78, 65535] { R17017 += 1, R16955 += 1, R11525 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R17017 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R17019 += 1, R16956 += 1, R16957 += 1 };
  s0 -> s2 [0, 65535] { R17019 += 1, R16957 += 1, R15346 += 1, R15347 += 1 };
  s0 -> s3 [0, 65535] { R17019 += 1, R16957 += 1 };
  s0 -> s0 [0, 65535] { R17018 += 1, R17019 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R17019 += 1, R16956 += 1, R16957 += 1 };
  s1 -> s2 [0, 65535] { R17019 += 1, R16957 += 1, R15346 += 1, R15347 += 1 };
  s1 -> s3 [0, 65535] { R17019 += 1, R16957 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R17019 += 1, R16957 += 1, R15346 += 1, R15347 += 1 };
  s2 -> s5 [0, 65535] { R17019 += 1 };
  s2 -> s3 [0, 65535] { R17019 += 1, R16957 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R17019 += 1 };
  s3 -> s3 [0, 65535] { R17019 += 1, R16957 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R17019 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 77] { R17021 += 1, R16959 += 1, R16621 += 1 };
  s0 -> s2 [0, 65535] { R17021 += 1, R16958 += 1, R16959 += 1 };
  s0 -> s0 [0, 65535] { R17020 += 1, R17021 += 1 };
  s0 -> s3 [0, 65535] { R17021 += 1, R16959 += 1, R16620 += 1, R16621 += 1 };
  s0 -> s4 [81, 81] { R17021 += 1, R16959 += 1, R16621 += 1 };
  s0 -> s1 [82, 65535] { R17021 += 1, R16959 += 1, R16621 += 1 };
  s1 -> s1 [0, 77] { R17021 += 1, R16959 += 1, R16621 += 1 };
  s1 -> s4 [81, 81] { R17021 += 1, R16959 += 1, R16621 += 1 };
  s1 -> s1 [82, 65535] { R17021 += 1, R16959 += 1, R16621 += 1 };
  s2 -> s1 [0, 77] { R17021 += 1, R16959 += 1, R16621 += 1 };
  s2 -> s2 [0, 65535] { R17021 += 1, R16958 += 1, R16959 += 1 };
  s2 -> s3 [0, 65535] { R17021 += 1, R16959 += 1, R16620 += 1, R16621 += 1 };
  s2 -> s4 [81, 81] { R17021 += 1, R16959 += 1, R16621 += 1 };
  s2 -> s1 [82, 65535] { R17021 += 1, R16959 += 1, R16621 += 1 };
  s3 -> s1 [0, 77] { R17021 += 1, R16959 += 1, R16621 += 1 };
  s3 -> s3 [0, 65535] { R17021 += 1, R16959 += 1, R16620 += 1, R16621 += 1 };
  s3 -> s4 [81, 81] { R17021 += 1, R16959 += 1, R16621 += 1 };
  s3 -> s1 [82, 65535] { R17021 += 1, R16959 += 1, R16621 += 1 };
  s4 -> s4 [0, 77] { R17021 += 1, R16959 += 1, R16621 += 1 };
  s4 -> s5 [0, 65535] { R17021 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R17021 += 1, R16959 += 1 };
  s4 -> s4 [81, 65535] { R17021 += 1, R16959 += 1, R16621 += 1 };
  s5 -> s5 [0, 65535] { R17021 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s4, s5, s6;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R17023 += 1, R16961 += 1, R16625 += 1, R16626 += 1 };
  s0 -> s0 [0, 65535] { R17022 += 1, R17023 += 1 };
  s0 -> s2 [0, 65535] { R17023 += 1, R16960 += 1, R16961 += 1 };
  s0 -> s3 [0, 65535] { R17023 += 1, R16961 += 1, R16626 += 1, R16627 += 1 };
  s1 -> s1 [0, 65535] { R17023 += 1, R16961 += 1, R16625 += 1, R16626 += 1 };
  s1 -> s4 [0, 65535] { R17023 += 1 };
  s1 -> s3 [0, 65535] { R17023 += 1, R16961 += 1, R16626 += 1, R16627 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s1 [0, 65535] { R17023 += 1, R16961 += 1, R16625 += 1, R16626 += 1 };
  s2 -> s2 [0, 65535] { R17023 += 1, R16960 += 1, R16961 += 1 };
  s2 -> s3 [0, 65535] { R17023 += 1, R16961 += 1, R16626 += 1, R16627 += 1 };
  s2 -> s6 [0, 65535];
  s3 -> s4 [0, 65535] { R17023 += 1 };
  s3 -> s3 [0, 65535] { R17023 += 1, R16961 += 1, R16626 += 1, R16627 += 1 };
  s3 -> s5 [0, 65535] { R17023 += 1, R16961 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R17023 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s4 [0, 65535] { R17023 += 1 };
  s5 -> s5 [0, 65535] { R17023 += 1, R16961 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 65535] { R17025 += 1, R16963 += 1 };
  s0 -> s2 [0, 65535] { R17025 += 1, R16962 += 1, R16963 += 1 };
  s0 -> s0 [0, 65535] { R17024 += 1, R17025 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R17025 += 1, R16963 += 1 };
  s1 -> s4 [0, 65535] { R17025 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R17025 += 1, R16963 += 1 };
  s2 -> s2 [0, 65535] { R17025 += 1, R16962 += 1, R16963 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R17025 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R17027 += 1, R16982 += 1, R16983 += 1 };
  s0 -> s0 [0, 65535] { R17026 += 1, R17027 += 1 };
  s0 -> s2 [0, 65535] { R17027 += 1, R16983 += 1, R18 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R17027 += 1, R16982 += 1, R16983 += 1 };
  s1 -> s2 [0, 65535] { R17027 += 1, R16983 += 1, R18 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R17027 += 1, R16983 += 1, R18 += 1 };
  s2 -> s4 [0, 65535] { R17027 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R17027 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 72] { R17029 += 1, R16985 += 1 };
  s0 -> s0 [0, 65535] { R17028 += 1, R17029 += 1 };
  s0 -> s2 [0, 65535] { R17029 += 1, R16984 += 1, R16985 += 1 };
  s0 -> s3 [73, 73] { R17029 += 1, R16985 += 1 };
  s0 -> s4 [73, 73] { R17029 += 1, R16985 += 1 };
  s0 -> s5 [77, 77] { R17029 += 1, R16985 += 1 };
  s0 -> s1 [78, 65535] { R17029 += 1, R16985 += 1 };
  s1 -> s1 [0, 72] { R17029 += 1, R16985 += 1 };
  s1 -> s3 [73, 73] { R17029 += 1, R16985 += 1 };
  s1 -> s4 [73, 73] { R17029 += 1, R16985 += 1 };
  s1 -> s5 [77, 77] { R17029 += 1, R16985 += 1 };
  s1 -> s1 [78, 65535] { R17029 += 1, R16985 += 1 };
  s2 -> s1 [0, 72] { R17029 += 1, R16985 += 1 };
  s2 -> s2 [0, 65535] { R17029 += 1, R16984 += 1, R16985 += 1 };
  s2 -> s3 [73, 73] { R17029 += 1, R16985 += 1 };
  s2 -> s4 [73, 73] { R17029 += 1, R16985 += 1 };
  s2 -> s5 [77, 77] { R17029 += 1, R16985 += 1 };
  s2 -> s1 [78, 65535] { R17029 += 1, R16985 += 1 };
  s3 -> s3 [0, 73] { R17029 += 1, R16985 += 1 };
  s3 -> s8 [77, 77] { R17029 += 1, R16985 += 1 };
  s3 -> s3 [78, 65535] { R17029 += 1, R16985 += 1 };
  s5 -> s5 [0, 72] { R17029 += 1, R16985 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R17029 += 1 };
  s5 -> s7 [73, 73] { R17029 += 1, R16985 += 1 };
  s5 -> s8 [73, 73] { R17029 += 1, R16985 += 1 };
  s5 -> s5 [77, 65535] { R17029 += 1, R16985 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R17029 += 1 };
  s8 -> s8 [0, 73] { R17029 += 1, R16985 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R17029 += 1 };
  s8 -> s8 [77, 65535] { R17029 += 1, R16985 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 72] { R17031 += 1, R16987 += 1, R66 += 1 };
  s0 -> s2 [0, 65535] { R17031 += 1, R16986 += 1, R16987 += 1 };
  s0 -> s0 [0, 65535] { R17030 += 1, R17031 += 1 };
  s0 -> s3 [73, 73] { R17031 += 1, R16987 += 1, R66 += 1 };
  s0 -> s4 [73, 73] { R17031 += 1, R16987 += 1, R66 += 1 };
  s0 -> s1 [74, 65535] { R17031 += 1, R16987 += 1, R66 += 1 };
  s1 -> s1 [0, 72] { R17031 += 1, R16987 += 1, R66 += 1 };
  s1 -> s1 [0, 65535] { R17031 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R17031 += 1, R16987 += 1, R66 += 1 };
  s1 -> s4 [73, 73] { R17031 += 1, R16987 += 1, R66 += 1 };
  s1 -> s1 [74, 65535] { R17031 += 1, R16987 += 1, R66 += 1 };
  s2 -> s1 [0, 72] { R17031 += 1, R16987 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R17031 += 1, R16986 += 1, R16987 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R17031 += 1, R16987 += 1, R66 += 1 };
  s2 -> s4 [73, 73] { R17031 += 1, R16987 += 1, R66 += 1 };
  s2 -> s1 [74, 65535] { R17031 += 1, R16987 += 1, R66 += 1 };
  s3 -> s3 [0, 65535] { R17031 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R17031 += 1, R16987 += 1, R66 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R17031 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R17031 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 72] { R17033 += 1, R16989 += 1, R68 += 1 };
  s0 -> s0 [0, 65535] { R17032 += 1, R17033 += 1 };
  s0 -> s2 [0, 65535] { R17033 += 1, R16988 += 1, R16989 += 1 };
  s0 -> s3 [73, 73] { R17033 += 1, R16989 += 1, R68 += 1 };
  s0 -> s4 [73, 73] { R17033 += 1, R16989 += 1, R68 += 1 };
  s0 -> s1 [74, 65535] { R17033 += 1, R16989 += 1, R68 += 1 };
  s1 -> s1 [0, 72] { R17033 += 1, R16989 += 1, R68 += 1 };
  s1 -> s1 [0, 65535] { R17033 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R17033 += 1, R16989 += 1, R68 += 1 };
  s1 -> s4 [73, 73] { R17033 += 1, R16989 += 1, R68 += 1 };
  s1 -> s1 [74, 65535] { R17033 += 1, R16989 += 1, R68 += 1 };
  s2 -> s1 [0, 72] { R17033 += 1, R16989 += 1, R68 += 1 };
  s2 -> s2 [0, 65535] { R17033 += 1, R16988 += 1, R16989 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R17033 += 1, R16989 += 1, R68 += 1 };
  s2 -> s4 [73, 73] { R17033 += 1, R16989 += 1, R68 += 1 };
  s2 -> s1 [74, 65535] { R17033 += 1, R16989 += 1, R68 += 1 };
  s3 -> s6 [0, 65535] { R17033 += 1 };
  s3 -> s3 [0, 65535] { R17033 += 1, R16989 += 1, R68 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R17033 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R17033 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 72] { R17035 += 1, R16991 += 1, R11523 += 1 };
  s0 -> s2 [0, 72] { R17035 += 1, R16991 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s0 [0, 65535] { R17034 += 1, R17035 += 1 };
  s0 -> s3 [0, 65535] { R17035 += 1, R16990 += 1, R16991 += 1 };
  s0 -> s4 [73, 73] { R17035 += 1, R16991 += 1, R11523 += 1 };
  s0 -> s5 [73, 73] { R17035 += 1, R16991 += 1, R11523 += 1 };
  s0 -> s6 [73, 73] { R17035 += 1, R16991 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s7 [73, 73] { R17035 += 1, R16991 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s1 [74, 76] { R17035 += 1, R16991 += 1, R11523 += 1 };
  s0 -> s2 [74, 65535] { R17035 += 1, R16991 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s1 [78, 65535] { R17035 += 1, R16991 += 1, R11523 += 1 };
  s1 -> s1 [0, 72] { R17035 += 1, R16991 += 1, R11523 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s1 [0, 65535] { R17035 += 1 };
  s1 -> s4 [73, 73] { R17035 += 1, R16991 += 1 };
  s1 -> s5 [73, 73] { R17035 += 1, R16991 += 1 };
  s1 -> s1 [74, 76] { R17035 += 1, R16991 += 1, R11523 += 1 };
  s1 -> s1 [74, 65535] { R17035 += 1, R16991 += 1 };
  s1 -> s1 [78, 65535] { R17035 += 1, R16991 += 1, R11523 += 1 };
  s2 -> s1 [0, 72] { R17035 += 1, R16991 += 1, R11523 += 1 };
  s2 -> s2 [0, 72] { R17035 += 1, R16991 += 1, R11522 += 1, R11523 += 1 };
  s2 -> s4 [73, 73] { R17035 += 1, R16991 += 1, R11523 += 1 };
  s2 -> s5 [73, 73] { R17035 += 1, R16991 += 1, R11523 += 1 };
  s2 -> s6 [73, 73] { R17035 += 1, R16991 += 1, R11522 += 1, R11523 += 1 };
  s2 -> s7 [73, 73] { R17035 += 1, R16991 += 1, R11522 += 1, R11523 += 1 };
  s2 -> s1 [74, 76] { R17035 += 1, R16991 += 1, R11523 += 1 };
  s2 -> s2 [74, 65535] { R17035 += 1, R16991 += 1, R11522 += 1, R11523 += 1 };
  s2 -> s1 [78, 65535] { R17035 += 1, R16991 += 1, R11523 += 1 };
  s3 -> s1 [0, 72] { R17035 += 1, R16991 += 1, R11523 += 1 };
  s3 -> s2 [0, 72] { R17035 += 1, R16991 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s3 [0, 65535] { R17035 += 1, R16990 += 1, R16991 += 1 };
  s3 -> s4 [73, 73] { R17035 += 1, R16991 += 1, R11523 += 1 };
  s3 -> s5 [73, 73] { R17035 += 1, R16991 += 1, R11523 += 1 };
  s3 -> s6 [73, 73] { R17035 += 1, R16991 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s7 [73, 73] { R17035 += 1, R16991 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s1 [74, 76] { R17035 += 1, R16991 += 1, R11523 += 1 };
  s3 -> s2 [74, 65535] { R17035 += 1, R16991 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s1 [78, 65535] { R17035 += 1, R16991 += 1, R11523 += 1 };
  s4 -> s4 [0, 76] { R17035 += 1, R16991 += 1, R11523 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s4 [0, 65535] { R17035 += 1, R16991 += 1 };
  s4 -> s9 [0, 65535] { R17035 += 1 };
  s4 -> s4 [78, 65535] { R17035 += 1, R16991 += 1, R11523 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s5 [0, 65535] { R17035 += 1 };
  s6 -> s4 [0, 76] { R17035 += 1, R16991 += 1, R11523 += 1 };
  s6 -> s6 [0, 65535] { R17035 += 1, R16991 += 1, R11522 += 1, R11523 += 1 };
  s6 -> s4 [78, 65535] { R17035 += 1, R16991 += 1, R11523 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R17035 += 1 };
  accepting s4, s8, s5, s9, s1;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 72] { R17037 += 1, R16993 += 1, R15342 += 1, R15343 += 1 };
  s0 -> s2 [0, 72] { R17037 += 1, R16993 += 1, R15343 += 1, R15344 += 1 };
  s0 -> s0 [0, 65535] { R17036 += 1, R17037 += 1 };
  s0 -> s3 [0, 65535] { R17037 += 1, R16992 += 1, R16993 += 1 };
  s0 -> s4 [73, 73] { R17037 += 1, R16993 += 1, R15343 += 1, R15344 += 1 };
  s0 -> s5 [73, 73] { R17037 += 1, R16993 += 1, R15342 += 1, R15343 += 1 };
  s0 -> s6 [73, 73] { R17037 += 1, R16993 += 1, R15342 += 1, R15343 += 1 };
  s0 -> s7 [73, 73] { R17037 += 1, R16993 += 1, R15343 += 1, R15344 += 1 };
  s0 -> s1 [74, 65535] { R17037 += 1, R16993 += 1, R15342 += 1, R15343 += 1 };
  s0 -> s2 [74, 65535] { R17037 += 1, R16993 += 1, R15343 += 1, R15344 += 1 };
  s1 -> s1 [0, 72] { R17037 += 1, R16993 += 1, R15342 += 1, R15343 += 1 };
  s1 -> s2 [0, 72] { R17037 += 1, R16993 += 1, R15343 += 1, R15344 += 1 };
  s1 -> s4 [73, 73] { R17037 += 1, R16993 += 1, R15343 += 1, R15344 += 1 };
  s1 -> s5 [73, 73] { R17037 += 1, R16993 += 1, R15342 += 1, R15343 += 1 };
  s1 -> s6 [73, 73] { R17037 += 1, R16993 += 1, R15342 += 1, R15343 += 1 };
  s1 -> s7 [73, 73] { R17037 += 1, R16993 += 1, R15343 += 1, R15344 += 1 };
  s1 -> s1 [74, 65535] { R17037 += 1, R16993 += 1, R15342 += 1, R15343 += 1 };
  s1 -> s2 [74, 65535] { R17037 += 1, R16993 += 1, R15343 += 1, R15344 += 1 };
  s2 -> s2 [0, 72] { R17037 += 1, R16993 += 1, R15343 += 1, R15344 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R17037 += 1 };
  s2 -> s4 [73, 73] { R17037 += 1, R16993 += 1, R15343 += 1, R15344 += 1 };
  s2 -> s7 [73, 73] { R17037 += 1, R16993 += 1, R15343 += 1, R15344 += 1 };
  s2 -> s2 [74, 65535] { R17037 += 1, R16993 += 1, R15343 += 1, R15344 += 1 };
  s3 -> s1 [0, 72] { R17037 += 1, R16993 += 1, R15342 += 1, R15343 += 1 };
  s3 -> s2 [0, 72] { R17037 += 1, R16993 += 1, R15343 += 1, R15344 += 1 };
  s3 -> s3 [0, 65535] { R17037 += 1, R16992 += 1, R16993 += 1 };
  s3 -> s4 [73, 73] { R17037 += 1, R16993 += 1, R15343 += 1, R15344 += 1 };
  s3 -> s5 [73, 73] { R17037 += 1, R16993 += 1, R15342 += 1, R15343 += 1 };
  s3 -> s6 [73, 73] { R17037 += 1, R16993 += 1, R15342 += 1, R15343 += 1 };
  s3 -> s7 [73, 73] { R17037 += 1, R16993 += 1, R15343 += 1, R15344 += 1 };
  s3 -> s1 [74, 65535] { R17037 += 1, R16993 += 1, R15342 += 1, R15343 += 1 };
  s3 -> s2 [74, 65535] { R17037 += 1, R16993 += 1, R15343 += 1, R15344 += 1 };
  s4 -> s4 [0, 65535] { R17037 += 1, R16993 += 1, R15343 += 1, R15344 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s9 [0, 65535] { R17037 += 1 };
  s6 -> s4 [0, 65535] { R17037 += 1, R16993 += 1, R15343 += 1, R15344 += 1 };
  s6 -> s6 [0, 65535] { R17037 += 1, R16993 += 1, R15342 += 1, R15343 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R17037 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R17037 += 1 };
  accepting s4, s8, s2, s9, s7;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 72] { R17039 += 1, R16995 += 1, R16618 += 1, R16619 += 1 };
  s0 -> s2 [0, 65535] { R17039 += 1, R16994 += 1, R16995 += 1 };
  s0 -> s0 [0, 65535] { R17038 += 1, R17039 += 1 };
  s0 -> s3 [73, 73] { R17039 += 1, R16995 += 1, R16618 += 1, R16619 += 1 };
  s0 -> s4 [73, 73] { R17039 += 1, R16995 += 1, R16618 += 1, R16619 += 1 };
  s0 -> s1 [74, 65535] { R17039 += 1, R16995 += 1, R16618 += 1, R16619 += 1 };
  s1 -> s1 [0, 72] { R17039 += 1, R16995 += 1, R16618 += 1, R16619 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R17039 += 1 };
  s1 -> s3 [73, 73] { R17039 += 1, R16995 += 1, R16618 += 1, R16619 += 1 };
  s1 -> s4 [73, 73] { R17039 += 1, R16995 += 1, R16618 += 1, R16619 += 1 };
  s1 -> s1 [74, 65535] { R17039 += 1, R16995 += 1, R16618 += 1, R16619 += 1 };
  s2 -> s1 [0, 72] { R17039 += 1, R16995 += 1, R16618 += 1, R16619 += 1 };
  s2 -> s2 [0, 65535] { R17039 += 1, R16994 += 1, R16995 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R17039 += 1, R16995 += 1, R16618 += 1, R16619 += 1 };
  s2 -> s4 [73, 73] { R17039 += 1, R16995 += 1, R16618 += 1, R16619 += 1 };
  s2 -> s1 [74, 65535] { R17039 += 1, R16995 += 1, R16618 += 1, R16619 += 1 };
  s3 -> s3 [0, 65535] { R17039 += 1, R16995 += 1, R16618 += 1, R16619 += 1 };
  s3 -> s6 [0, 65535] { R17039 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R17039 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R17039 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 72] { R17041 += 1, R16997 += 1, R16622 += 1, R16623 += 1 };
  s0 -> s2 [0, 65535] { R17041 += 1, R16996 += 1, R16997 += 1 };
  s0 -> s0 [0, 65535] { R17040 += 1, R17041 += 1 };
  s0 -> s3 [73, 73] { R17041 += 1, R16997 += 1, R16622 += 1, R16623 += 1 };
  s0 -> s4 [73, 73] { R17041 += 1, R16997 += 1, R16622 += 1, R16623 += 1 };
  s0 -> s1 [74, 65535] { R17041 += 1, R16997 += 1, R16622 += 1, R16623 += 1 };
  s1 -> s1 [0, 72] { R17041 += 1, R16997 += 1, R16622 += 1, R16623 += 1 };
  s1 -> s1 [0, 65535] { R17041 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [73, 73] { R17041 += 1, R16997 += 1, R16622 += 1, R16623 += 1 };
  s1 -> s4 [73, 73] { R17041 += 1, R16997 += 1, R16622 += 1, R16623 += 1 };
  s1 -> s1 [74, 65535] { R17041 += 1, R16997 += 1, R16622 += 1, R16623 += 1 };
  s2 -> s1 [0, 72] { R17041 += 1, R16997 += 1, R16622 += 1, R16623 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R17041 += 1, R16996 += 1, R16997 += 1 };
  s2 -> s3 [73, 73] { R17041 += 1, R16997 += 1, R16622 += 1, R16623 += 1 };
  s2 -> s4 [73, 73] { R17041 += 1, R16997 += 1, R16622 += 1, R16623 += 1 };
  s2 -> s1 [74, 65535] { R17041 += 1, R16997 += 1, R16622 += 1, R16623 += 1 };
  s3 -> s3 [0, 65535] { R17041 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R17041 += 1 };
  s4 -> s4 [0, 65535] { R17041 += 1, R16997 += 1, R16622 += 1, R16623 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R17041 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 72] { R17043 += 1, R16999 += 1, R16940 += 1, R16941 += 1 };
  s0 -> s2 [0, 72] { R17043 += 1, R16999 += 1, R16941 += 1 };
  s0 -> s3 [0, 65535] { R17043 += 1, R16998 += 1, R16999 += 1 };
  s0 -> s0 [0, 65535] { R17042 += 1, R17043 += 1 };
  s0 -> s4 [73, 73] { R17043 += 1, R16999 += 1, R16941 += 1 };
  s0 -> s5 [73, 73] { R17043 += 1, R16999 += 1, R16940 += 1, R16941 += 1 };
  s0 -> s6 [73, 73] { R17043 += 1, R16999 += 1, R16940 += 1, R16941 += 1 };
  s0 -> s7 [73, 73] { R17043 += 1, R16999 += 1, R16941 += 1 };
  s0 -> s2 [74, 76] { R17043 += 1, R16999 += 1, R16941 += 1 };
  s0 -> s1 [74, 65535] { R17043 += 1, R16999 += 1, R16940 += 1, R16941 += 1 };
  s0 -> s8 [77, 77] { R17043 += 1, R16999 += 1, R16941 += 1 };
  s0 -> s2 [82, 65535] { R17043 += 1, R16999 += 1, R16941 += 1 };
  s1 -> s1 [0, 72] { R17043 += 1, R16999 += 1, R16940 += 1, R16941 += 1 };
  s1 -> s2 [0, 72] { R17043 += 1, R16999 += 1, R16941 += 1 };
  s1 -> s4 [73, 73] { R17043 += 1, R16999 += 1, R16941 += 1 };
  s1 -> s5 [73, 73] { R17043 += 1, R16999 += 1, R16940 += 1, R16941 += 1 };
  s1 -> s6 [73, 73] { R17043 += 1, R16999 += 1, R16940 += 1, R16941 += 1 };
  s1 -> s7 [73, 73] { R17043 += 1, R16999 += 1, R16941 += 1 };
  s1 -> s2 [74, 76] { R17043 += 1, R16999 += 1, R16941 += 1 };
  s1 -> s1 [74, 65535] { R17043 += 1, R16999 += 1, R16940 += 1, R16941 += 1 };
  s1 -> s8 [77, 77] { R17043 += 1, R16999 += 1, R16941 += 1 };
  s1 -> s2 [82, 65535] { R17043 += 1, R16999 += 1, R16941 += 1 };
  s2 -> s2 [0, 72] { R17043 += 1, R16999 += 1, R16941 += 1 };
  s2 -> s4 [73, 73] { R17043 += 1, R16999 += 1 };
  s2 -> s7 [73, 73] { R17043 += 1, R16999 += 1 };
  s2 -> s2 [74, 76] { R17043 += 1, R16999 += 1, R16941 += 1 };
  s2 -> s2 [74, 65535] { R17043 += 1, R16999 += 1 };
  s2 -> s8 [77, 77] { R17043 += 1, R16999 += 1, R16941 += 1 };
  s2 -> s2 [82, 65535] { R17043 += 1, R16999 += 1, R16941 += 1 };
  s3 -> s1 [0, 72] { R17043 += 1, R16999 += 1, R16940 += 1, R16941 += 1 };
  s3 -> s2 [0, 72] { R17043 += 1, R16999 += 1, R16941 += 1 };
  s3 -> s3 [0, 65535] { R17043 += 1, R16998 += 1, R16999 += 1 };
  s3 -> s4 [73, 73] { R17043 += 1, R16999 += 1, R16941 += 1 };
  s3 -> s5 [73, 73] { R17043 += 1, R16999 += 1, R16940 += 1, R16941 += 1 };
  s3 -> s6 [73, 73] { R17043 += 1, R16999 += 1, R16940 += 1, R16941 += 1 };
  s3 -> s7 [73, 73] { R17043 += 1, R16999 += 1, R16941 += 1 };
  s3 -> s2 [74, 76] { R17043 += 1, R16999 += 1, R16941 += 1 };
  s3 -> s1 [74, 65535] { R17043 += 1, R16999 += 1, R16940 += 1, R16941 += 1 };
  s3 -> s8 [77, 77] { R17043 += 1, R16999 += 1, R16941 += 1 };
  s3 -> s2 [82, 65535] { R17043 += 1, R16999 += 1, R16941 += 1 };
  s5 -> s7 [0, 76] { R17043 += 1, R16999 += 1, R16941 += 1 };
  s5 -> s5 [0, 65535] { R17043 += 1, R16999 += 1, R16940 += 1, R16941 += 1 };
  s5 -> s10 [77, 77] { R17043 += 1, R16999 += 1, R16941 += 1 };
  s5 -> s7 [82, 65535] { R17043 += 1, R16999 += 1, R16941 += 1 };
  s7 -> s7 [0, 76] { R17043 += 1, R16999 += 1, R16941 += 1 };
  s7 -> s7 [0, 65535] { R17043 += 1, R16999 += 1 };
  s7 -> s10 [77, 77] { R17043 += 1, R16999 += 1, R16941 += 1 };
  s7 -> s7 [82, 65535] { R17043 += 1, R16999 += 1, R16941 += 1 };
  s8 -> s8 [0, 72] { R17043 += 1, R16999 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R17043 += 1 };
  s8 -> s10 [73, 73] { R17043 += 1, R16999 += 1 };
  s8 -> s11 [73, 73] { R17043 += 1, R16999 += 1 };
  s8 -> s8 [74, 65535] { R17043 += 1, R16999 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R17043 += 1, R16999 += 1 };
  s10 -> s9 [0, 65535];
  s10 -> s12 [0, 65535] { R17043 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R17043 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R17043 += 1 };
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
synchronised {  // Automata constraining P54
automaton P54_0 {
  init s0;
  s0 -> s1 [109, 109];
  accepting s1;
};
};
constraint R1 = R16959 && R2 = R17043 && R20 - R17043 = -1 && R21 = R17043 && R22 - R17043 = -1 && R23 = R17043 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R16621 + -1*R16619 - R53 = 0 && R52 + R16620 + R16618 = 0 && R16958 = 0 && R16984 = 0 && R16985 = 0 && R16990 = 0 && R16991 = 0 && R16992 = 0 && R16993 = 0 && R16998 = 0 && R16999 = 0 && R17000 = 0 && R17001 = R17043 && R17002 = 0 && R17003 = R17043 && R17004 = 0 && R17005 = R17043 && R17006 = 0 && R17007 = R17043 && R17008 = 0 && R17009 = R17043 && R17010 = 0 && R17011 = R17043 && R17012 = 0 && R17013 = R17043 && R17014 = 0 && R17015 = R17043 && R17016 = 0 && R17017 = R17043 && R17018 = 0 && R17019 = R17043 && R17020 = 0 && R17021 = R17043 && R17022 = 0 && R17023 = R17043 && R17024 = 0 && R17025 = R17043 && R17026 = 0 && R17027 = R17043 && R17028 = 0 && R17029 = R17043 && R17030 = 0 && R17031 = R17043 && R17032 = 0 && R17033 = R17043 && R17034 = 0 && R17035 = R17043 && R17036 = 0 && R17037 = R17043 && R17038 = 0 && R17039 = R17043 && R17040 = 0 && R17041 = R17043 && R17042 = 0 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R16621 + -1*R16619 - R53 < 1 && -1 < R16959 && 0 < R17043 && (R48 + R15347 + R15344 != 0 || ((R42 + R11524 + R11522 != 0 || R43 + R11525 + R11523 + -1*R16621 + -1*R16619 - R53 = 0 || R53 + R16621 + R16619 < 1) && (R42 + R11524 + R11522 = 0 || R53 + R16621 + R16619 < 1))) && (R48 + R15347 + R15344 != 0 || ((R46 + R15345 + R15342 != 0 || R47 + R15346 + R15343 + -1*R16621 + -1*R16619 - R53 = 0 || R53 + R16621 + R16619 < 1) && (R46 + R15345 + R15342 = 0 || R53 + R16621 + R16619 < 1))) && (R16944 != 0 || R16945 = R16959 || (R17 = 0 && R16959 = 0)) && (R16946 != 0 || R16947 = R16959 || (R17 = 0 && R16959 = 0)) && (R16948 != 0 || R16949 = R16959 || (R17 = 0 && R16959 = 0)) && (R16950 != 0 || R16951 = R16959 || (R17 = 0 && R16959 = 0)) && (R16952 != 0 || R16953 = R16959 || (R17 = 0 && R16959 = 0)) && (R16954 != 0 || R16955 = R16959 || (R17 = 0 && R16959 = 0)) && (R16956 != 0 || R16957 = R16959 || (R17 = 0 && R16959 = 0)) && (R16960 != 0 || R16959 = R16961 || (R17 = 0 && R16959 = 0)) && (R16962 != 0 || R16959 = R16963 || (R17 = 0 && R16959 = 0)) && (R18 = 0 || (R16982 = 0 && R16983 = 0)) && (R18 = 0 || (R16986 = 0 && R16987 = 0)) && (R18 = 0 || (R16988 = 0 && R16989 = 0)) && (R18 = 0 || (R16994 = 0 && R16995 = 0)) && (R18 = 0 || (R16996 = 0 && R16997 = 0)) && (R19 = 0 || (R16964 = 0 && R16965 = 0)) && (R19 = 0 || (R16966 = 0 && R16967 = 0)) && (R19 = 0 || (R16968 = 0 && R16969 = 0)) && (R19 = 0 || (R16970 = 0 && R16971 = 0)) && (R19 = 0 || (R16972 = 0 && R16973 = 0)) && (R19 = 0 || (R16974 = 0 && R16975 = 0)) && (R19 = 0 || (R16976 = 0 && R16977 = 0)) && (R19 = 0 || (R16978 = 0 && R16979 = 0)) && (R19 = 0 || (R16980 = 0 && R16981 = 0)) && (R48 + R15347 + R15344 = 0 || (R42 + R11524 + R11522 = 0 && R43 + R11525 + R11523 + -1*R16621 + -1*R16619 - R53 = 0)) && (R48 + R15347 + R15344 = 0 || (R46 + R15345 + R15342 = 0 && R47 + R15346 + R15343 + -1*R16621 + -1*R16619 - R53 = 0)) && (R58 + R16627 + R16624 = 0 || (R56 + R16625 + R16622 = 0 && R57 + R16626 + R16623 = 0)) && (R58 + R16627 + R16624 = 0 || (R62 + R16942 + R16940 = 0 && R63 + R16943 + R16941 = 0)) && (R16944 = 0 || (R17 = 0 && R16959 = 0)) && (R16946 = 0 || (R17 = 0 && R16959 = 0)) && (R16948 = 0 || (R17 = 0 && R16959 = 0)) && (R16950 = 0 || (R17 = 0 && R16959 = 0)) && (R16952 = 0 || (R17 = 0 && R16959 = 0)) && (R16954 = 0 || (R17 = 0 && R16959 = 0)) && (R16956 = 0 || (R17 = 0 && R16959 = 0)) && (R16960 = 0 || (R17 = 0 && R16959 = 0)) && (R16962 = 0 || (R17 = 0 && R16959 = 0));
// End of Parikh automata intersection problem
