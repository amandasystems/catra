// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R12, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R70, R71, R72, R73, R7706, R7707, R7708, R7709, R7710, R7711, R7712, R7713, R7714, R7715, R7716, R7717, R7718, R7719, R7720, R7721, R8, R8034, R8035, R8036, R8037, R8038, R8039, R8040, R8041, R8042, R8043, R8044, R8045, R8046, R8047, R8048, R8049, R8050, R8051, R8052, R8053, R8054, R8055, R8056, R8057, R8058, R8059, R8060, R8061, R8062, R8063, R8064, R8065, R8066, R8067, R8068, R8069, R8070, R8071, R8072, R8073, R8074, R8075, R8076, R8077, R8078, R8079, R8080, R8081, R8082, R8083, R8084, R8085, R8086, R8087, R8088, R8089, R8090, R8091, R8092, R8093, R8094, R8095, R8096, R8097, R8098, R8099, R8100, R8101, R8102, R8103, R8104, R8105, R8106, R8107, R8108, R8109, R8110, R8111, R8112, R8113, R8114, R8115, R8116, R8117, R8118, R8119, R8120, R8121, R8122, R8123, R8124, R8125, R8126, R8127, R8128, R8129, R8130, R8131, R8132, R8133, R8134, R8135, R8136, R8137;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 72];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [73, 73];
  s0 -> s1 [74, 65535];
  s1 -> s1 [0, 72];
  s1 -> s2 [73, 73];
  s1 -> s1 [74, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s1 [0, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R25 += 1 };
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R8058 += 1, R8059 += 1 };
  s0 -> s1 [0, 65535] { R8059 += 1, R19 += 1 };
  s1 -> s1 [0, 65535] { R8059 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 72] { R8061 += 1 };
  s0 -> s0 [0, 65535] { R8060 += 1, R8061 += 1 };
  s0 -> s2 [73, 73] { R8061 += 1 };
  s0 -> s3 [73, 73] { R8061 += 1 };
  s0 -> s1 [78, 65535] { R8061 += 1 };
  s1 -> s1 [0, 72] { R8061 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R8061 += 1 };
  s1 -> s3 [73, 73] { R8061 += 1 };
  s1 -> s1 [78, 65535] { R8061 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 73] { R8061 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [78, 65535] { R8061 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 72] { R8063 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R8062 += 1, R8063 += 1 };
  s0 -> s2 [73, 73] { R8063 += 1, R38 += 1 };
  s0 -> s3 [73, 73] { R8063 += 1, R38 += 1 };
  s0 -> s1 [74, 65535] { R8063 += 1, R38 += 1 };
  s1 -> s1 [0, 72] { R8063 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R8063 += 1, R38 += 1 };
  s1 -> s3 [73, 73] { R8063 += 1, R38 += 1 };
  s1 -> s1 [74, 65535] { R8063 += 1, R38 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8063 += 1, R38 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 72] { R8065 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R8064 += 1, R8065 += 1 };
  s0 -> s2 [73, 73] { R8065 += 1, R40 += 1 };
  s0 -> s3 [73, 73] { R8065 += 1, R40 += 1 };
  s0 -> s1 [74, 65535] { R8065 += 1, R40 += 1 };
  s1 -> s1 [0, 72] { R8065 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R8065 += 1, R40 += 1 };
  s1 -> s3 [73, 73] { R8065 += 1, R40 += 1 };
  s1 -> s1 [74, 65535] { R8065 += 1, R40 += 1 };
  s2 -> s2 [0, 65535] { R8065 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 72] { R8067 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R8066 += 1, R8067 += 1 };
  s0 -> s2 [73, 73] { R8067 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [73, 73] { R8067 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [74, 65535] { R8067 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 72] { R8067 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R8067 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [73, 73] { R8067 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [74, 65535] { R8067 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535] { R8067 += 1, R42 += 1, R43 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 72] { R8069 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R8068 += 1, R8069 += 1 };
  s0 -> s2 [73, 73] { R8069 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [73, 73] { R8069 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [74, 65535] { R8069 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 72] { R8069 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R8069 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [73, 73] { R8069 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [74, 65535] { R8069 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535] { R8069 += 1, R46 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 72] { R8071 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R8070 += 1, R8071 += 1 };
  s0 -> s2 [73, 73] { R8071 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [73, 73] { R8071 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [74, 65535] { R8071 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 72] { R8071 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R8071 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [73, 73] { R8071 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [74, 65535] { R8071 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R8071 += 1, R52 += 1, R53 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 72] { R8073 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R8072 += 1, R8073 += 1 };
  s0 -> s2 [73, 73] { R8073 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [73, 73] { R8073 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [74, 65535] { R8073 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 72] { R8073 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R8073 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [73, 73] { R8073 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [74, 65535] { R8073 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8073 += 1, R56 += 1, R57 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 72] { R8075 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R8074 += 1, R8075 += 1 };
  s0 -> s2 [73, 73] { R8075 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [73, 73] { R8075 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [74, 65535] { R8075 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 72] { R8075 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R8075 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [73, 73] { R8075 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [74, 65535] { R8075 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8075 += 1, R62 += 1, R63 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 72] { R8095 += 1 };
  s0 -> s0 [0, 65535] { R8094 += 1, R8095 += 1 };
  s0 -> s2 [73, 73] { R8095 += 1 };
  s0 -> s1 [74, 65535] { R8095 += 1 };
  s1 -> s1 [0, 72] { R8095 += 1 };
  s1 -> s2 [73, 73] { R8095 += 1 };
  s1 -> s1 [74, 65535] { R8095 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R8095 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R8096 += 1, R8097 += 1 };
  s0 -> s1 [0, 65535] { R8097 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R8097 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 72] { R8099 += 1 };
  s0 -> s2 [0, 65535] { R8099 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R8098 += 1, R8099 += 1 };
  s0 -> s3 [73, 73] { R8099 += 1 };
  s0 -> s1 [74, 65535] { R8099 += 1 };
  s1 -> s1 [0, 72] { R8099 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [73, 73] { R8099 += 1 };
  s1 -> s1 [74, 65535] { R8099 += 1 };
  s2 -> s1 [0, 72] { R8099 += 1 };
  s2 -> s2 [0, 65535] { R8099 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [73, 73] { R8099 += 1 };
  s2 -> s1 [74, 65535] { R8099 += 1 };
  s3 -> s3 [0, 65535] { R8099 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 72] { R8101 += 1, R8039 += 1 };
  s0 -> s0 [0, 65535] { R8100 += 1, R8101 += 1 };
  s0 -> s2 [0, 65535] { R8101 += 1, R8038 += 1, R8039 += 1 };
  s0 -> s1 [74, 65535] { R8101 += 1, R8039 += 1 };
  s1 -> s1 [0, 72] { R8101 += 1, R8039 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R8101 += 1 };
  s1 -> s1 [74, 65535] { R8101 += 1, R8039 += 1 };
  s2 -> s1 [0, 72] { R8101 += 1, R8039 += 1 };
  s2 -> s2 [0, 65535] { R8101 += 1, R8038 += 1, R8039 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [74, 65535] { R8101 += 1, R8039 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s0 [0, 65535] { R8102 += 1, R8103 += 1 };
  s0 -> s1 [0, 65535] { R8103 += 1, R8041 += 1, R17 += 1 };
  s0 -> s2 [0, 65535] { R8103 += 1, R8040 += 1, R8041 += 1 };
  s1 -> s1 [0, 65535] { R8103 += 1, R8041 += 1, R17 += 1 };
  s1 -> s4 [0, 65535] { R8103 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R8103 += 1, R8041 += 1, R17 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R8103 += 1, R8040 += 1, R8041 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8103 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 73] { R8105 += 1, R8043 += 1 };
  s0 -> s2 [0, 65535] { R8105 += 1, R8042 += 1, R8043 += 1 };
  s0 -> s0 [0, 65535] { R8104 += 1, R8105 += 1 };
  s0 -> s1 [77, 65535] { R8105 += 1, R8043 += 1 };
  s1 -> s1 [0, 73] { R8105 += 1, R8043 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R8105 += 1 };
  s1 -> s1 [77, 65535] { R8105 += 1, R8043 += 1 };
  s2 -> s1 [0, 73] { R8105 += 1, R8043 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R8105 += 1, R8042 += 1, R8043 += 1 };
  s2 -> s1 [77, 65535] { R8105 += 1, R8043 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s0 [0, 65535] { R8106 += 1, R8107 += 1 };
  s0 -> s1 [0, 65535] { R8107 += 1, R8044 += 1, R8045 += 1 };
  s0 -> s2 [0, 65535] { R8107 += 1, R8045 += 1, R67 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R8107 += 1, R8044 += 1, R8045 += 1 };
  s1 -> s2 [0, 65535] { R8107 += 1, R8045 += 1, R67 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R8107 += 1 };
  s2 -> s2 [0, 65535] { R8107 += 1, R8045 += 1, R67 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8107 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 76] { R8109 += 1, R8047 += 1 };
  s0 -> s0 [0, 65535] { R8108 += 1, R8109 += 1 };
  s0 -> s2 [0, 65535] { R8109 += 1, R8046 += 1, R8047 += 1 };
  s0 -> s3 [0, 65535] { R8109 += 1, R8047 += 1, R69 += 1 };
  s0 -> s1 [78, 65535] { R8109 += 1, R8047 += 1 };
  s1 -> s1 [0, 76] { R8109 += 1, R8047 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R8109 += 1 };
  s1 -> s1 [78, 65535] { R8109 += 1, R8047 += 1 };
  s2 -> s1 [0, 76] { R8109 += 1, R8047 += 1 };
  s2 -> s2 [0, 65535] { R8109 += 1, R8046 += 1, R8047 += 1 };
  s2 -> s3 [0, 65535] { R8109 += 1, R8047 += 1, R69 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [78, 65535] { R8109 += 1, R8047 += 1 };
  s3 -> s1 [0, 76] { R8109 += 1, R8047 += 1 };
  s3 -> s3 [0, 65535] { R8109 += 1, R8047 += 1, R69 += 1 };
  s3 -> s4 [0, 65535] { R8109 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [78, 65535] { R8109 += 1, R8047 += 1 };
  s4 -> s4 [0, 65535] { R8109 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 76] { R8111 += 1, R8049 += 1, R73 += 1 };
  s0 -> s2 [0, 65535] { R8111 += 1, R8048 += 1, R8049 += 1 };
  s0 -> s3 [0, 65535] { R8111 += 1, R8049 += 1, R72 += 1, R73 += 1 };
  s0 -> s0 [0, 65535] { R8110 += 1, R8111 += 1 };
  s0 -> s1 [78, 65535] { R8111 += 1, R8049 += 1, R73 += 1 };
  s1 -> s1 [0, 76] { R8111 += 1, R8049 += 1, R73 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R8111 += 1 };
  s1 -> s1 [0, 65535] { R8111 += 1, R8049 += 1 };
  s1 -> s1 [78, 65535] { R8111 += 1, R8049 += 1, R73 += 1 };
  s2 -> s1 [0, 76] { R8111 += 1, R8049 += 1, R73 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8111 += 1, R8048 += 1, R8049 += 1 };
  s2 -> s3 [0, 65535] { R8111 += 1, R8049 += 1, R72 += 1, R73 += 1 };
  s2 -> s1 [78, 65535] { R8111 += 1, R8049 += 1, R73 += 1 };
  s3 -> s1 [0, 76] { R8111 += 1, R8049 += 1, R73 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R8111 += 1 };
  s3 -> s3 [0, 65535] { R8111 += 1, R8049 += 1, R72 += 1, R73 += 1 };
  s3 -> s1 [78, 65535] { R8111 += 1, R8049 += 1, R73 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8111 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s0 [0, 65535] { R8112 += 1, R8113 += 1 };
  s0 -> s1 [0, 65535] { R8113 += 1, R8050 += 1, R8051 += 1 };
  s0 -> s2 [0, 65535] { R8113 += 1, R8051 += 1 };
  s1 -> s1 [0, 65535] { R8113 += 1, R8050 += 1, R8051 += 1 };
  s1 -> s2 [0, 65535] { R8113 += 1, R8051 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R8113 += 1 };
  s2 -> s2 [0, 65535] { R8113 += 1, R8051 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8113 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 77] { R8115 += 1, R8053 += 1, R7715 += 1 };
  s0 -> s2 [0, 65535] { R8115 += 1, R8052 += 1, R8053 += 1 };
  s0 -> s1 [0, 65535] { R8115 += 1, R8053 += 1 };
  s0 -> s0 [0, 65535] { R8114 += 1, R8115 += 1 };
  s0 -> s1 [81, 65535] { R8115 += 1, R8053 += 1, R7715 += 1 };
  s1 -> s1 [0, 77] { R8115 += 1, R8053 += 1, R7715 += 1 };
  s1 -> s1 [0, 65535] { R8115 += 1, R8053 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R8115 += 1 };
  s1 -> s1 [81, 65535] { R8115 += 1, R8053 += 1, R7715 += 1 };
  s2 -> s1 [0, 77] { R8115 += 1, R8053 += 1, R7715 += 1 };
  s2 -> s2 [0, 65535] { R8115 += 1, R8052 += 1, R8053 += 1 };
  s2 -> s1 [0, 65535] { R8115 += 1, R8053 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [81, 65535] { R8115 += 1, R8053 += 1, R7715 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8115 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s0 [0, 65535] { R8116 += 1, R8117 += 1 };
  s0 -> s1 [0, 65535] { R8117 += 1, R8054 += 1, R8055 += 1 };
  s0 -> s2 [0, 65535] { R8117 += 1, R8055 += 1, R7719 += 1, R7720 += 1 };
  s0 -> s3 [0, 65535] { R8117 += 1, R8055 += 1, R7720 += 1, R7721 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R8117 += 1, R8054 += 1, R8055 += 1 };
  s1 -> s2 [0, 65535] { R8117 += 1, R8055 += 1, R7719 += 1, R7720 += 1 };
  s1 -> s3 [0, 65535] { R8117 += 1, R8055 += 1, R7720 += 1, R7721 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R8117 += 1 };
  s2 -> s2 [0, 65535] { R8117 += 1, R8055 += 1, R7719 += 1, R7720 += 1 };
  s2 -> s3 [0, 65535] { R8117 += 1, R8055 += 1, R7720 += 1, R7721 += 1 };
  s3 -> s4 [0, 65535] { R8117 += 1, R8055 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R8117 += 1 };
  s3 -> s3 [0, 65535] { R8117 += 1, R8055 += 1, R7720 += 1, R7721 += 1 };
  s4 -> s4 [0, 65535] { R8117 += 1, R8055 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R8117 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8117 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 65535] { R8119 += 1, R8057 += 1 };
  s0 -> s2 [0, 65535] { R8119 += 1, R8056 += 1, R8057 += 1 };
  s0 -> s0 [0, 65535] { R8118 += 1, R8119 += 1 };
  s1 -> s1 [0, 65535] { R8119 += 1, R8057 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R8119 += 1 };
  s2 -> s1 [0, 65535] { R8119 += 1, R8057 += 1 };
  s2 -> s2 [0, 65535] { R8119 += 1, R8056 += 1, R8057 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8119 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s0 [0, 65535] { R8120 += 1, R8121 += 1 };
  s0 -> s1 [0, 65535] { R8121 += 1, R8077 += 1, R18 += 1 };
  s0 -> s2 [0, 65535] { R8121 += 1, R8076 += 1, R8077 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R8121 += 1 };
  s1 -> s1 [0, 65535] { R8121 += 1, R8077 += 1, R18 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R8121 += 1, R8077 += 1, R18 += 1 };
  s2 -> s2 [0, 65535] { R8121 += 1, R8076 += 1, R8077 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8121 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 72] { R8123 += 1, R8079 += 1 };
  s0 -> s2 [0, 65535] { R8123 += 1, R8078 += 1, R8079 += 1 };
  s0 -> s0 [0, 65535] { R8122 += 1, R8123 += 1 };
  s0 -> s3 [73, 73] { R8123 += 1, R8079 += 1 };
  s0 -> s4 [73, 73] { R8123 += 1, R8079 += 1 };
  s0 -> s5 [77, 77] { R8123 += 1, R8079 += 1 };
  s0 -> s1 [78, 65535] { R8123 += 1, R8079 += 1 };
  s1 -> s1 [0, 72] { R8123 += 1, R8079 += 1 };
  s1 -> s3 [73, 73] { R8123 += 1, R8079 += 1 };
  s1 -> s4 [73, 73] { R8123 += 1, R8079 += 1 };
  s1 -> s5 [77, 77] { R8123 += 1, R8079 += 1 };
  s1 -> s1 [78, 65535] { R8123 += 1, R8079 += 1 };
  s2 -> s1 [0, 72] { R8123 += 1, R8079 += 1 };
  s2 -> s2 [0, 65535] { R8123 += 1, R8078 += 1, R8079 += 1 };
  s2 -> s3 [73, 73] { R8123 += 1, R8079 += 1 };
  s2 -> s4 [73, 73] { R8123 += 1, R8079 += 1 };
  s2 -> s5 [77, 77] { R8123 += 1, R8079 += 1 };
  s2 -> s1 [78, 65535] { R8123 += 1, R8079 += 1 };
  s3 -> s3 [0, 73] { R8123 += 1, R8079 += 1 };
  s3 -> s7 [77, 77] { R8123 += 1, R8079 += 1 };
  s3 -> s3 [78, 65535] { R8123 += 1, R8079 += 1 };
  s5 -> s5 [0, 72] { R8123 += 1, R8079 += 1 };
  s5 -> s5 [0, 65535] { R8123 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [73, 73] { R8123 += 1, R8079 += 1 };
  s5 -> s8 [73, 73] { R8123 += 1, R8079 += 1 };
  s5 -> s5 [77, 65535] { R8123 += 1, R8079 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 73] { R8123 += 1, R8079 += 1 };
  s7 -> s7 [0, 65535] { R8123 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [77, 65535] { R8123 += 1, R8079 += 1 };
  s8 -> s8 [0, 65535] { R8123 += 1 };
  s8 -> s6 [0, 65535];
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 72] { R8125 += 1, R8081 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R8124 += 1, R8125 += 1 };
  s0 -> s2 [0, 65535] { R8125 += 1, R8080 += 1, R8081 += 1 };
  s0 -> s3 [73, 73] { R8125 += 1, R8081 += 1, R66 += 1 };
  s0 -> s4 [73, 73] { R8125 += 1, R8081 += 1, R66 += 1 };
  s0 -> s1 [74, 65535] { R8125 += 1, R8081 += 1, R66 += 1 };
  s1 -> s1 [0, 72] { R8125 += 1, R8081 += 1, R66 += 1 };
  s1 -> s1 [0, 65535] { R8125 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R8125 += 1, R8081 += 1, R66 += 1 };
  s1 -> s4 [73, 73] { R8125 += 1, R8081 += 1, R66 += 1 };
  s1 -> s1 [74, 65535] { R8125 += 1, R8081 += 1, R66 += 1 };
  s2 -> s1 [0, 72] { R8125 += 1, R8081 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R8125 += 1, R8080 += 1, R8081 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R8125 += 1, R8081 += 1, R66 += 1 };
  s2 -> s4 [73, 73] { R8125 += 1, R8081 += 1, R66 += 1 };
  s2 -> s1 [74, 65535] { R8125 += 1, R8081 += 1, R66 += 1 };
  s3 -> s6 [0, 65535] { R8125 += 1 };
  s3 -> s3 [0, 65535] { R8125 += 1, R8081 += 1, R66 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8125 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8125 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 72] { R8127 += 1, R8083 += 1, R68 += 1 };
  s0 -> s2 [0, 65535] { R8127 += 1, R8082 += 1, R8083 += 1 };
  s0 -> s0 [0, 65535] { R8126 += 1, R8127 += 1 };
  s0 -> s3 [73, 73] { R8127 += 1, R8083 += 1, R68 += 1 };
  s0 -> s4 [73, 73] { R8127 += 1, R8083 += 1, R68 += 1 };
  s0 -> s1 [74, 65535] { R8127 += 1, R8083 += 1, R68 += 1 };
  s1 -> s1 [0, 72] { R8127 += 1, R8083 += 1, R68 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R8127 += 1 };
  s1 -> s3 [73, 73] { R8127 += 1, R8083 += 1, R68 += 1 };
  s1 -> s4 [73, 73] { R8127 += 1, R8083 += 1, R68 += 1 };
  s1 -> s1 [74, 65535] { R8127 += 1, R8083 += 1, R68 += 1 };
  s2 -> s1 [0, 72] { R8127 += 1, R8083 += 1, R68 += 1 };
  s2 -> s2 [0, 65535] { R8127 += 1, R8082 += 1, R8083 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R8127 += 1, R8083 += 1, R68 += 1 };
  s2 -> s4 [73, 73] { R8127 += 1, R8083 += 1, R68 += 1 };
  s2 -> s1 [74, 65535] { R8127 += 1, R8083 += 1, R68 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R8127 += 1 };
  s3 -> s3 [0, 65535] { R8127 += 1, R8083 += 1, R68 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8127 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8127 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 72] { R8129 += 1, R8085 += 1, R70 += 1, R71 += 1 };
  s0 -> s0 [0, 65535] { R8128 += 1, R8129 += 1 };
  s0 -> s2 [0, 65535] { R8129 += 1, R8084 += 1, R8085 += 1 };
  s0 -> s3 [73, 73] { R8129 += 1, R8085 += 1, R70 += 1, R71 += 1 };
  s0 -> s4 [73, 73] { R8129 += 1, R8085 += 1, R70 += 1, R71 += 1 };
  s0 -> s1 [74, 65535] { R8129 += 1, R8085 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 72] { R8129 += 1, R8085 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 65535] { R8129 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [73, 73] { R8129 += 1, R8085 += 1, R70 += 1, R71 += 1 };
  s1 -> s4 [73, 73] { R8129 += 1, R8085 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [74, 65535] { R8129 += 1, R8085 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [0, 72] { R8129 += 1, R8085 += 1, R70 += 1, R71 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R8129 += 1, R8084 += 1, R8085 += 1 };
  s2 -> s3 [73, 73] { R8129 += 1, R8085 += 1, R70 += 1, R71 += 1 };
  s2 -> s4 [73, 73] { R8129 += 1, R8085 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [74, 65535] { R8129 += 1, R8085 += 1, R70 += 1, R71 += 1 };
  s3 -> s3 [0, 65535] { R8129 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R8129 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R8129 += 1, R8085 += 1, R70 += 1, R71 += 1 };
  s5 -> s5 [0, 65535] { R8129 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 72] { R8131 += 1, R8087 += 1, R7706 += 1, R7707 += 1 };
  s0 -> s2 [0, 72] { R8131 += 1, R8087 += 1, R7707 += 1, R7708 += 1 };
  s0 -> s3 [0, 65535] { R8131 += 1, R8086 += 1, R8087 += 1 };
  s0 -> s0 [0, 65535] { R8130 += 1, R8131 += 1 };
  s0 -> s4 [73, 73] { R8131 += 1, R8087 += 1, R7707 += 1, R7708 += 1 };
  s0 -> s5 [73, 73] { R8131 += 1, R8087 += 1, R7706 += 1, R7707 += 1 };
  s0 -> s6 [73, 73] { R8131 += 1, R8087 += 1, R7707 += 1, R7708 += 1 };
  s0 -> s7 [73, 73] { R8131 += 1, R8087 += 1, R7706 += 1, R7707 += 1 };
  s0 -> s1 [74, 65535] { R8131 += 1, R8087 += 1, R7706 += 1, R7707 += 1 };
  s0 -> s2 [74, 65535] { R8131 += 1, R8087 += 1, R7707 += 1, R7708 += 1 };
  s1 -> s1 [0, 72] { R8131 += 1, R8087 += 1, R7706 += 1, R7707 += 1 };
  s1 -> s2 [0, 72] { R8131 += 1, R8087 += 1, R7707 += 1, R7708 += 1 };
  s1 -> s4 [73, 73] { R8131 += 1, R8087 += 1, R7707 += 1, R7708 += 1 };
  s1 -> s5 [73, 73] { R8131 += 1, R8087 += 1, R7706 += 1, R7707 += 1 };
  s1 -> s6 [73, 73] { R8131 += 1, R8087 += 1, R7707 += 1, R7708 += 1 };
  s1 -> s7 [73, 73] { R8131 += 1, R8087 += 1, R7706 += 1, R7707 += 1 };
  s1 -> s1 [74, 65535] { R8131 += 1, R8087 += 1, R7706 += 1, R7707 += 1 };
  s1 -> s2 [74, 65535] { R8131 += 1, R8087 += 1, R7707 += 1, R7708 += 1 };
  s2 -> s11 [0, 72] { R8131 += 1, R8087 += 1 };
  s2 -> s2 [0, 72] { R8131 += 1, R8087 += 1, R7707 += 1, R7708 += 1 };
  s2 -> s4 [73, 73] { R8131 += 1, R8087 += 1, R7707 += 1, R7708 += 1 };
  s2 -> s12 [73, 73] { R8131 += 1, R8087 += 1 };
  s2 -> s6 [73, 73] { R8131 += 1, R8087 += 1, R7707 += 1, R7708 += 1 };
  s2 -> s8 [73, 73] { R8131 += 1, R8087 += 1 };
  s2 -> s11 [74, 65535] { R8131 += 1, R8087 += 1 };
  s2 -> s2 [74, 65535] { R8131 += 1, R8087 += 1, R7707 += 1, R7708 += 1 };
  s3 -> s1 [0, 72] { R8131 += 1, R8087 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s2 [0, 72] { R8131 += 1, R8087 += 1, R7707 += 1, R7708 += 1 };
  s3 -> s3 [0, 65535] { R8131 += 1, R8086 += 1, R8087 += 1 };
  s3 -> s4 [73, 73] { R8131 += 1, R8087 += 1, R7707 += 1, R7708 += 1 };
  s3 -> s5 [73, 73] { R8131 += 1, R8087 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s6 [73, 73] { R8131 += 1, R8087 += 1, R7707 += 1, R7708 += 1 };
  s3 -> s7 [73, 73] { R8131 += 1, R8087 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s1 [74, 65535] { R8131 += 1, R8087 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s2 [74, 65535] { R8131 += 1, R8087 += 1, R7707 += 1, R7708 += 1 };
  s4 -> s4 [0, 65535] { R8131 += 1, R8087 += 1, R7707 += 1, R7708 += 1 };
  s4 -> s8 [0, 65535] { R8131 += 1, R8087 += 1 };
  s7 -> s4 [0, 65535] { R8131 += 1, R8087 += 1, R7707 += 1, R7708 += 1 };
  s7 -> s7 [0, 65535] { R8131 += 1, R8087 += 1, R7706 += 1, R7707 += 1 };
  s8 -> s9 [0, 65535] { R8131 += 1 };
  s8 -> s10 [0, 65535];
  s8 -> s8 [0, 65535] { R8131 += 1, R8087 += 1 };
  s9 -> s9 [0, 65535] { R8131 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s11 [0, 72] { R8131 += 1, R8087 += 1 };
  s11 -> s10 [0, 65535];
  s11 -> s11 [0, 65535] { R8131 += 1 };
  s11 -> s12 [73, 73] { R8131 += 1, R8087 += 1 };
  s11 -> s8 [73, 73] { R8131 += 1, R8087 += 1 };
  s11 -> s11 [74, 65535] { R8131 += 1, R8087 += 1 };
  s12 -> s10 [0, 65535];
  s12 -> s12 [0, 65535] { R8131 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 72] { R8133 += 1, R8089 += 1, R7712 += 1, R7713 += 1 };
  s0 -> s2 [0, 72] { R8133 += 1, R8089 += 1, R7713 += 1 };
  s0 -> s3 [0, 65535] { R8133 += 1, R8088 += 1, R8089 += 1 };
  s0 -> s0 [0, 65535] { R8132 += 1, R8133 += 1 };
  s0 -> s4 [73, 73] { R8133 += 1, R8089 += 1, R7712 += 1, R7713 += 1 };
  s0 -> s5 [73, 73] { R8133 += 1, R8089 += 1, R7713 += 1 };
  s0 -> s6 [73, 73] { R8133 += 1, R8089 += 1, R7712 += 1, R7713 += 1 };
  s0 -> s7 [73, 73] { R8133 += 1, R8089 += 1, R7713 += 1 };
  s0 -> s2 [74, 77] { R8133 += 1, R8089 += 1, R7713 += 1 };
  s0 -> s1 [74, 65535] { R8133 += 1, R8089 += 1, R7712 += 1, R7713 += 1 };
  s0 -> s8 [81, 81] { R8133 += 1, R8089 += 1, R7713 += 1 };
  s0 -> s2 [82, 65535] { R8133 += 1, R8089 += 1, R7713 += 1 };
  s1 -> s1 [0, 72] { R8133 += 1, R8089 += 1, R7712 += 1, R7713 += 1 };
  s1 -> s2 [0, 72] { R8133 += 1, R8089 += 1, R7713 += 1 };
  s1 -> s4 [73, 73] { R8133 += 1, R8089 += 1, R7712 += 1, R7713 += 1 };
  s1 -> s5 [73, 73] { R8133 += 1, R8089 += 1, R7713 += 1 };
  s1 -> s6 [73, 73] { R8133 += 1, R8089 += 1, R7712 += 1, R7713 += 1 };
  s1 -> s7 [73, 73] { R8133 += 1, R8089 += 1, R7713 += 1 };
  s1 -> s2 [74, 77] { R8133 += 1, R8089 += 1, R7713 += 1 };
  s1 -> s1 [74, 65535] { R8133 += 1, R8089 += 1, R7712 += 1, R7713 += 1 };
  s1 -> s8 [81, 81] { R8133 += 1, R8089 += 1, R7713 += 1 };
  s1 -> s2 [82, 65535] { R8133 += 1, R8089 += 1, R7713 += 1 };
  s2 -> s2 [0, 72] { R8133 += 1, R8089 += 1, R7713 += 1 };
  s2 -> s5 [73, 73] { R8133 += 1, R8089 += 1, R7713 += 1 };
  s2 -> s7 [73, 73] { R8133 += 1, R8089 += 1, R7713 += 1 };
  s2 -> s2 [74, 77] { R8133 += 1, R8089 += 1, R7713 += 1 };
  s2 -> s8 [81, 81] { R8133 += 1, R8089 += 1, R7713 += 1 };
  s2 -> s2 [82, 65535] { R8133 += 1, R8089 += 1, R7713 += 1 };
  s3 -> s1 [0, 72] { R8133 += 1, R8089 += 1, R7712 += 1, R7713 += 1 };
  s3 -> s2 [0, 72] { R8133 += 1, R8089 += 1, R7713 += 1 };
  s3 -> s3 [0, 65535] { R8133 += 1, R8088 += 1, R8089 += 1 };
  s3 -> s4 [73, 73] { R8133 += 1, R8089 += 1, R7712 += 1, R7713 += 1 };
  s3 -> s5 [73, 73] { R8133 += 1, R8089 += 1, R7713 += 1 };
  s3 -> s6 [73, 73] { R8133 += 1, R8089 += 1, R7712 += 1, R7713 += 1 };
  s3 -> s7 [73, 73] { R8133 += 1, R8089 += 1, R7713 += 1 };
  s3 -> s2 [74, 77] { R8133 += 1, R8089 += 1, R7713 += 1 };
  s3 -> s1 [74, 65535] { R8133 += 1, R8089 += 1, R7712 += 1, R7713 += 1 };
  s3 -> s8 [81, 81] { R8133 += 1, R8089 += 1, R7713 += 1 };
  s3 -> s2 [82, 65535] { R8133 += 1, R8089 += 1, R7713 += 1 };
  s4 -> s7 [0, 77] { R8133 += 1, R8089 += 1, R7713 += 1 };
  s4 -> s4 [0, 65535] { R8133 += 1, R8089 += 1, R7712 += 1, R7713 += 1 };
  s4 -> s10 [81, 81] { R8133 += 1, R8089 += 1, R7713 += 1 };
  s4 -> s7 [82, 65535] { R8133 += 1, R8089 += 1, R7713 += 1 };
  s7 -> s7 [0, 77] { R8133 += 1, R8089 += 1, R7713 += 1 };
  s7 -> s10 [81, 81] { R8133 += 1, R8089 += 1, R7713 += 1 };
  s7 -> s7 [82, 65535] { R8133 += 1, R8089 += 1, R7713 += 1 };
  s8 -> s8 [0, 72] { R8133 += 1, R8089 += 1, R7713 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R8133 += 1 };
  s8 -> s10 [73, 73] { R8133 += 1, R8089 += 1 };
  s8 -> s11 [73, 73] { R8133 += 1, R8089 += 1 };
  s8 -> s8 [74, 77] { R8133 += 1, R8089 += 1, R7713 += 1 };
  s8 -> s8 [74, 65535] { R8133 += 1, R8089 += 1 };
  s8 -> s8 [81, 65535] { R8133 += 1, R8089 += 1, R7713 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 77] { R8133 += 1, R8089 += 1, R7713 += 1 };
  s10 -> s9 [0, 65535];
  s10 -> s12 [0, 65535] { R8133 += 1 };
  s10 -> s10 [0, 65535] { R8133 += 1, R8089 += 1 };
  s10 -> s10 [81, 65535] { R8133 += 1, R8089 += 1, R7713 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R8133 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R8133 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 72] { R8135 += 1, R8091 += 1, R7716 += 1, R7717 += 1 };
  s0 -> s2 [0, 65535] { R8135 += 1, R8090 += 1, R8091 += 1 };
  s0 -> s0 [0, 65535] { R8134 += 1, R8135 += 1 };
  s0 -> s3 [73, 73] { R8135 += 1, R8091 += 1, R7716 += 1, R7717 += 1 };
  s0 -> s4 [73, 73] { R8135 += 1, R8091 += 1, R7716 += 1, R7717 += 1 };
  s0 -> s1 [74, 65535] { R8135 += 1, R8091 += 1, R7716 += 1, R7717 += 1 };
  s1 -> s1 [0, 72] { R8135 += 1, R8091 += 1, R7716 += 1, R7717 += 1 };
  s1 -> s1 [0, 65535] { R8135 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R8135 += 1, R8091 += 1, R7716 += 1, R7717 += 1 };
  s1 -> s4 [73, 73] { R8135 += 1, R8091 += 1, R7716 += 1, R7717 += 1 };
  s1 -> s1 [74, 65535] { R8135 += 1, R8091 += 1, R7716 += 1, R7717 += 1 };
  s2 -> s1 [0, 72] { R8135 += 1, R8091 += 1, R7716 += 1, R7717 += 1 };
  s2 -> s2 [0, 65535] { R8135 += 1, R8090 += 1, R8091 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R8135 += 1, R8091 += 1, R7716 += 1, R7717 += 1 };
  s2 -> s4 [73, 73] { R8135 += 1, R8091 += 1, R7716 += 1, R7717 += 1 };
  s2 -> s1 [74, 65535] { R8135 += 1, R8091 += 1, R7716 += 1, R7717 += 1 };
  s3 -> s6 [0, 65535] { R8135 += 1 };
  s3 -> s3 [0, 65535] { R8135 += 1, R8091 += 1, R7716 += 1, R7717 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8135 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8135 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 72] { R8137 += 1, R8093 += 1, R8034 += 1, R8035 += 1 };
  s0 -> s2 [0, 72] { R8137 += 1, R8093 += 1, R8035 += 1 };
  s0 -> s3 [0, 65535] { R8137 += 1, R8092 += 1, R8093 += 1 };
  s0 -> s0 [0, 65535] { R8136 += 1, R8137 += 1 };
  s0 -> s4 [73, 73] { R8137 += 1, R8093 += 1, R8034 += 1, R8035 += 1 };
  s0 -> s5 [73, 73] { R8137 += 1, R8093 += 1, R8035 += 1 };
  s0 -> s6 [73, 73] { R8137 += 1, R8093 += 1, R8034 += 1, R8035 += 1 };
  s0 -> s7 [73, 73] { R8137 += 1, R8093 += 1, R8035 += 1 };
  s0 -> s2 [74, 76] { R8137 += 1, R8093 += 1, R8035 += 1 };
  s0 -> s1 [74, 65535] { R8137 += 1, R8093 += 1, R8034 += 1, R8035 += 1 };
  s0 -> s8 [77, 77] { R8137 += 1, R8093 += 1, R8035 += 1 };
  s0 -> s2 [82, 65535] { R8137 += 1, R8093 += 1, R8035 += 1 };
  s1 -> s1 [0, 72] { R8137 += 1, R8093 += 1, R8034 += 1, R8035 += 1 };
  s1 -> s2 [0, 72] { R8137 += 1, R8093 += 1, R8035 += 1 };
  s1 -> s4 [73, 73] { R8137 += 1, R8093 += 1, R8034 += 1, R8035 += 1 };
  s1 -> s5 [73, 73] { R8137 += 1, R8093 += 1, R8035 += 1 };
  s1 -> s6 [73, 73] { R8137 += 1, R8093 += 1, R8034 += 1, R8035 += 1 };
  s1 -> s7 [73, 73] { R8137 += 1, R8093 += 1, R8035 += 1 };
  s1 -> s2 [74, 76] { R8137 += 1, R8093 += 1, R8035 += 1 };
  s1 -> s1 [74, 65535] { R8137 += 1, R8093 += 1, R8034 += 1, R8035 += 1 };
  s1 -> s8 [77, 77] { R8137 += 1, R8093 += 1, R8035 += 1 };
  s1 -> s2 [82, 65535] { R8137 += 1, R8093 += 1, R8035 += 1 };
  s2 -> s2 [0, 72] { R8137 += 1, R8093 += 1, R8035 += 1 };
  s2 -> s5 [73, 73] { R8137 += 1, R8093 += 1 };
  s2 -> s7 [73, 73] { R8137 += 1, R8093 += 1 };
  s2 -> s2 [74, 76] { R8137 += 1, R8093 += 1, R8035 += 1 };
  s2 -> s2 [74, 65535] { R8137 += 1, R8093 += 1 };
  s2 -> s8 [77, 77] { R8137 += 1, R8093 += 1, R8035 += 1 };
  s2 -> s2 [82, 65535] { R8137 += 1, R8093 += 1, R8035 += 1 };
  s3 -> s1 [0, 72] { R8137 += 1, R8093 += 1, R8034 += 1, R8035 += 1 };
  s3 -> s2 [0, 72] { R8137 += 1, R8093 += 1, R8035 += 1 };
  s3 -> s3 [0, 65535] { R8137 += 1, R8092 += 1, R8093 += 1 };
  s3 -> s4 [73, 73] { R8137 += 1, R8093 += 1, R8034 += 1, R8035 += 1 };
  s3 -> s5 [73, 73] { R8137 += 1, R8093 += 1, R8035 += 1 };
  s3 -> s6 [73, 73] { R8137 += 1, R8093 += 1, R8034 += 1, R8035 += 1 };
  s3 -> s7 [73, 73] { R8137 += 1, R8093 += 1, R8035 += 1 };
  s3 -> s2 [74, 76] { R8137 += 1, R8093 += 1, R8035 += 1 };
  s3 -> s1 [74, 65535] { R8137 += 1, R8093 += 1, R8034 += 1, R8035 += 1 };
  s3 -> s8 [77, 77] { R8137 += 1, R8093 += 1, R8035 += 1 };
  s3 -> s2 [82, 65535] { R8137 += 1, R8093 += 1, R8035 += 1 };
  s4 -> s7 [0, 76] { R8137 += 1, R8093 += 1, R8035 += 1 };
  s4 -> s4 [0, 65535] { R8137 += 1, R8093 += 1, R8034 += 1, R8035 += 1 };
  s4 -> s11 [77, 77] { R8137 += 1, R8093 += 1, R8035 += 1 };
  s4 -> s7 [82, 65535] { R8137 += 1, R8093 += 1, R8035 += 1 };
  s7 -> s7 [0, 76] { R8137 += 1, R8093 += 1, R8035 += 1 };
  s7 -> s7 [0, 65535] { R8137 += 1, R8093 += 1 };
  s7 -> s11 [77, 77] { R8137 += 1, R8093 += 1, R8035 += 1 };
  s7 -> s7 [82, 65535] { R8137 += 1, R8093 += 1, R8035 += 1 };
  s8 -> s8 [0, 72] { R8137 += 1, R8093 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R8137 += 1 };
  s8 -> s10 [73, 73] { R8137 += 1, R8093 += 1 };
  s8 -> s11 [73, 73] { R8137 += 1, R8093 += 1 };
  s8 -> s8 [74, 65535] { R8137 += 1, R8093 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R8137 += 1 };
  s11 -> s12 [0, 65535] { R8137 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R8137 += 1, R8093 += 1 };
  s12 -> s12 [0, 65535] { R8137 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
synchronised {  // Automata constraining P54
automaton P54_0 {
  init s0;
  s0 -> s1 [109, 109];
  accepting s1;
};
};
constraint R2 = R8137 && R20 - R8137 = -1 && R21 = R8137 && R22 - R8137 = -1 && R23 = R8137 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R7715 + -1*R7713 - R53 = 0 && R52 + R7714 + R7712 = 0 && R8078 = 0 && R8079 = 0 && R8086 = 0 && R8087 = 0 && R8088 = 0 && R8089 = 0 && R8092 = 0 && R8093 = 0 && R8094 = 0 && R8095 = R8137 && R8096 = 0 && R8097 = R8137 && R8098 = 0 && R8099 = R8137 && R8100 = 0 && R8101 = R8137 && R8102 = 0 && R8103 = R8137 && R8104 = 0 && R8105 = R8137 && R8106 = 0 && R8107 = R8137 && R8108 = 0 && R8109 = R8137 && R8110 = 0 && R8111 = R8137 && R8112 = 0 && R8113 = R8137 && R8114 = 0 && R8115 = R8137 && R8116 = 0 && R8117 = R8137 && R8118 = 0 && R8119 = R8137 && R8120 = 0 && R8121 = R8137 && R8122 = 0 && R8123 = R8137 && R8124 = 0 && R8125 = R8137 && R8126 = 0 && R8127 = R8137 && R8128 = 0 && R8129 = R8137 && R8130 = 0 && R8131 = R8137 && R8132 = 0 && R8133 = R8137 && R8134 = 0 && R8135 = R8137 && R8136 = 0 && -1 < R1 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R7715 + -1*R7713 - R53 < 1 && 0 < R8137 && (R1 != 0 || R17 = 0 || (R8038 = 0 && R8039 = 0)) && (R1 != 0 || R17 = 0 || (R8040 = 0 && R8041 = 0)) && (R1 != 0 || R17 = 0 || (R8042 = 0 && R8043 = 0)) && (R1 != 0 || R17 = 0 || (R8044 = 0 && R8045 = 0)) && (R1 != 0 || R17 = 0 || (R8046 = 0 && R8047 = 0)) && (R1 != 0 || R17 = 0 || (R8048 = 0 && R8049 = 0)) && (R1 != 0 || R17 = 0 || (R8050 = 0 && R8051 = 0)) && (R1 != 0 || R17 = 0 || (R8052 = 0 && R8053 = 0)) && (R1 != 0 || R17 = 0 || (R8054 = 0 && R8055 = 0)) && (R1 != 0 || R17 = 0 || (R8056 = 0 && R8057 = 0)) && (R48 + R7711 + R7708 != 0 || ((R42 + R72 + R70 != 0 || R43 + R73 + R71 + -1*R7715 + -1*R7713 - R53 = 0 || R53 + R7715 + R7713 < 1) && (R42 + R72 + R70 = 0 || R53 + R7715 + R7713 < 1))) && (R48 + R7711 + R7708 != 0 || ((R46 + R7709 + R7706 != 0 || R47 + R7710 + R7707 + -1*R7715 + -1*R7713 - R53 = 0 || R53 + R7715 + R7713 < 1) && (R46 + R7709 + R7706 = 0 || R53 + R7715 + R7713 < 1))) && (R8038 != 0 || R1 = R8039 || R1 < 1) && (R8040 != 0 || R1 = R8041 || R1 < 1) && (R8042 != 0 || R1 = R8043 || R1 < 1) && (R8044 != 0 || R1 = R8045 || R1 < 1) && (R8046 != 0 || R1 = R8047 || R1 < 1) && (R8048 != 0 || R1 = R8049 || R1 < 1) && (R8050 != 0 || R1 = R8051 || R1 < 1) && (R8052 != 0 || R1 = R8053 || R1 < 1) && (R8054 != 0 || R1 = R8055 || R1 < 1) && (R8056 != 0 || R1 = R8057 || R1 < 1) && (R18 = 0 || (R8076 = 0 && R8077 = 0)) && (R18 = 0 || (R8080 = 0 && R8081 = 0)) && (R18 = 0 || (R8082 = 0 && R8083 = 0)) && (R18 = 0 || (R8084 = 0 && R8085 = 0)) && (R18 = 0 || (R8090 = 0 && R8091 = 0)) && (R19 = 0 || (R8058 = 0 && R8059 = 0)) && (R19 = 0 || (R8060 = 0 && R8061 = 0)) && (R19 = 0 || (R8062 = 0 && R8063 = 0)) && (R19 = 0 || (R8064 = 0 && R8065 = 0)) && (R19 = 0 || (R8066 = 0 && R8067 = 0)) && (R19 = 0 || (R8068 = 0 && R8069 = 0)) && (R19 = 0 || (R8070 = 0 && R8071 = 0)) && (R19 = 0 || (R8072 = 0 && R8073 = 0)) && (R19 = 0 || (R8074 = 0 && R8075 = 0)) && (R48 + R7711 + R7708 = 0 || (R42 + R72 + R70 = 0 && R43 + R73 + R71 + -1*R7715 + -1*R7713 - R53 = 0)) && (R48 + R7711 + R7708 = 0 || (R46 + R7709 + R7706 = 0 && R47 + R7710 + R7707 + -1*R7715 + -1*R7713 - R53 = 0)) && (R58 + R7721 + R7718 = 0 || (R56 + R7719 + R7716 = 0 && R57 + R7720 + R7717 = 0)) && (R58 + R7721 + R7718 = 0 || (R62 + R8036 + R8034 = 0 && R63 + R8037 + R8035 = 0)) && (R8038 = 0 || R1 < 1) && (R8040 = 0 || R1 < 1) && (R8042 = 0 || R1 < 1) && (R8044 = 0 || R1 < 1) && (R8046 = 0 || R1 < 1) && (R8048 = 0 || R1 < 1) && (R8050 = 0 || R1 < 1) && (R8052 = 0 || R1 < 1) && (R8054 = 0 || R1 < 1) && (R8056 = 0 || R1 < 1);
// End of Parikh automata intersection problem
