// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R11522, R11523, R11524, R11525, R11526, R11527, R11528, R11529, R11530, R11531, R11532, R11533, R11534, R11535, R12, R12380, R12381, R12382, R12383, R12384, R12385, R12490, R12491, R12492, R12493, R12494, R12495, R12496, R12497, R12498, R12499, R12500, R12501, R12502, R12503, R12504, R12505, R12506, R12507, R12508, R12509, R12510, R12511, R12512, R12513, R12514, R12515, R12516, R12517, R12518, R12519, R12520, R12521, R12522, R12523, R12524, R12525, R12526, R12527, R12528, R12529, R12530, R12531, R12532, R12533, R12534, R12535, R12536, R12537, R12538, R12539, R12540, R12541, R12542, R12543, R12544, R12545, R12546, R12547, R12548, R12549, R12550, R12551, R12552, R12553, R12554, R12555, R12556, R12557, R12558, R12559, R12560, R12561, R12562, R12563, R12564, R12565, R12566, R12567, R12568, R12569, R12570, R12571, R12572, R12573, R12574, R12575, R12576, R12577, R12578, R12579, R12580, R12581, R12582, R12583, R12584, R12585, R12586, R12587, R12588, R12589, R12590, R12591, R12592, R12593, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 72];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [73, 73];
  s0 -> s1 [74, 65535];
  s1 -> s1 [0, 72];
  s1 -> s2 [73, 73];
  s1 -> s1 [74, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s1 [0, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R25 += 1 };
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R12514 += 1, R12515 += 1 };
  s0 -> s1 [0, 65535] { R12515 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R12515 += 1, R19 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 72] { R12517 += 1 };
  s0 -> s0 [0, 65535] { R12516 += 1, R12517 += 1 };
  s0 -> s2 [73, 73] { R12517 += 1 };
  s0 -> s3 [73, 73] { R12517 += 1 };
  s0 -> s1 [78, 65535] { R12517 += 1 };
  s1 -> s1 [0, 72] { R12517 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R12517 += 1 };
  s1 -> s3 [73, 73] { R12517 += 1 };
  s1 -> s1 [78, 65535] { R12517 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 73] { R12517 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [78, 65535] { R12517 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 72] { R12519 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R12518 += 1, R12519 += 1 };
  s0 -> s2 [73, 73] { R12519 += 1, R38 += 1 };
  s0 -> s3 [73, 73] { R12519 += 1, R38 += 1 };
  s0 -> s1 [74, 65535] { R12519 += 1, R38 += 1 };
  s1 -> s1 [0, 72] { R12519 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R12519 += 1, R38 += 1 };
  s1 -> s3 [73, 73] { R12519 += 1, R38 += 1 };
  s1 -> s1 [74, 65535] { R12519 += 1, R38 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R12519 += 1, R38 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 72] { R12521 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R12520 += 1, R12521 += 1 };
  s0 -> s2 [73, 73] { R12521 += 1, R40 += 1 };
  s0 -> s3 [73, 73] { R12521 += 1, R40 += 1 };
  s0 -> s1 [74, 65535] { R12521 += 1, R40 += 1 };
  s1 -> s1 [0, 72] { R12521 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R12521 += 1, R40 += 1 };
  s1 -> s3 [73, 73] { R12521 += 1, R40 += 1 };
  s1 -> s1 [74, 65535] { R12521 += 1, R40 += 1 };
  s2 -> s2 [0, 65535] { R12521 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 72] { R12523 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R12522 += 1, R12523 += 1 };
  s0 -> s2 [73, 73] { R12523 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [73, 73] { R12523 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [74, 65535] { R12523 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 72] { R12523 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R12523 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [73, 73] { R12523 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [74, 65535] { R12523 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R12523 += 1, R42 += 1, R43 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 72] { R12525 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R12524 += 1, R12525 += 1 };
  s0 -> s2 [73, 73] { R12525 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [73, 73] { R12525 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [74, 65535] { R12525 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 72] { R12525 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R12525 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [73, 73] { R12525 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [74, 65535] { R12525 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R12525 += 1, R46 += 1, R47 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 72] { R12527 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R12526 += 1, R12527 += 1 };
  s0 -> s2 [73, 73] { R12527 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [73, 73] { R12527 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [74, 65535] { R12527 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 72] { R12527 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R12527 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [73, 73] { R12527 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [74, 65535] { R12527 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535] { R12527 += 1, R52 += 1, R53 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 72] { R12529 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R12528 += 1, R12529 += 1 };
  s0 -> s2 [73, 73] { R12529 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [73, 73] { R12529 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [74, 65535] { R12529 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 72] { R12529 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R12529 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [73, 73] { R12529 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [74, 65535] { R12529 += 1, R56 += 1, R57 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R12529 += 1, R56 += 1, R57 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 72] { R12531 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R12530 += 1, R12531 += 1 };
  s0 -> s2 [73, 73] { R12531 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [73, 73] { R12531 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [74, 65535] { R12531 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 72] { R12531 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R12531 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [73, 73] { R12531 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [74, 65535] { R12531 += 1, R62 += 1, R63 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R12531 += 1, R62 += 1, R63 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 72] { R12551 += 1 };
  s0 -> s0 [0, 65535] { R12550 += 1, R12551 += 1 };
  s0 -> s2 [73, 73] { R12551 += 1 };
  s0 -> s1 [74, 65535] { R12551 += 1 };
  s1 -> s1 [0, 72] { R12551 += 1 };
  s1 -> s2 [73, 73] { R12551 += 1 };
  s1 -> s1 [74, 65535] { R12551 += 1 };
  s2 -> s2 [0, 65535] { R12551 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R12553 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R12552 += 1, R12553 += 1 };
  s1 -> s1 [0, 65535] { R12553 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 72] { R12555 += 1 };
  s0 -> s0 [0, 65535] { R12554 += 1, R12555 += 1 };
  s0 -> s2 [0, 65535] { R12555 += 1, R8 += 1 };
  s0 -> s3 [73, 73] { R12555 += 1 };
  s0 -> s1 [74, 65535] { R12555 += 1 };
  s1 -> s1 [0, 72] { R12555 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [73, 73] { R12555 += 1 };
  s1 -> s1 [74, 65535] { R12555 += 1 };
  s2 -> s1 [0, 72] { R12555 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R12555 += 1, R8 += 1 };
  s2 -> s3 [73, 73] { R12555 += 1 };
  s2 -> s1 [74, 65535] { R12555 += 1 };
  s3 -> s3 [0, 65535] { R12555 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 72] { R12557 += 1, R12495 += 1 };
  s0 -> s2 [0, 65535] { R12557 += 1, R12494 += 1, R12495 += 1 };
  s0 -> s0 [0, 65535] { R12556 += 1, R12557 += 1 };
  s0 -> s1 [74, 65535] { R12557 += 1, R12495 += 1 };
  s1 -> s1 [0, 72] { R12557 += 1, R12495 += 1 };
  s1 -> s1 [0, 65535] { R12557 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [74, 65535] { R12557 += 1, R12495 += 1 };
  s2 -> s1 [0, 72] { R12557 += 1, R12495 += 1 };
  s2 -> s2 [0, 65535] { R12557 += 1, R12494 += 1, R12495 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [74, 65535] { R12557 += 1, R12495 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R12559 += 1, R12496 += 1, R12497 += 1 };
  s0 -> s0 [0, 65535] { R12558 += 1, R12559 += 1 };
  s0 -> s2 [0, 65535] { R12559 += 1, R12497 += 1, R17 += 1 };
  s1 -> s1 [0, 65535] { R12559 += 1, R12496 += 1, R12497 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R12559 += 1, R12497 += 1, R17 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R12559 += 1, R12497 += 1, R17 += 1 };
  s2 -> s4 [0, 65535] { R12559 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R12559 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 73] { R12561 += 1, R12499 += 1 };
  s0 -> s0 [0, 65535] { R12560 += 1, R12561 += 1 };
  s0 -> s2 [0, 65535] { R12561 += 1, R12498 += 1, R12499 += 1 };
  s0 -> s1 [77, 65535] { R12561 += 1, R12499 += 1 };
  s1 -> s1 [0, 73] { R12561 += 1, R12499 += 1 };
  s1 -> s1 [0, 65535] { R12561 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [77, 65535] { R12561 += 1, R12499 += 1 };
  s2 -> s1 [0, 73] { R12561 += 1, R12499 += 1 };
  s2 -> s2 [0, 65535] { R12561 += 1, R12498 += 1, R12499 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [77, 65535] { R12561 += 1, R12499 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R12563 += 1, R12500 += 1, R12501 += 1 };
  s0 -> s0 [0, 65535] { R12562 += 1, R12563 += 1 };
  s0 -> s2 [0, 65535] { R12563 += 1, R12501 += 1, R67 += 1 };
  s1 -> s1 [0, 65535] { R12563 += 1, R12500 += 1, R12501 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R12563 += 1, R12501 += 1, R67 += 1 };
  s2 -> s3 [0, 65535] { R12563 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R12563 += 1, R12501 += 1, R67 += 1 };
  s3 -> s3 [0, 65535] { R12563 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 76] { R12565 += 1, R12503 += 1 };
  s0 -> s0 [0, 65535] { R12564 += 1, R12565 += 1 };
  s0 -> s2 [0, 65535] { R12565 += 1, R12503 += 1, R69 += 1 };
  s0 -> s3 [0, 65535] { R12565 += 1, R12502 += 1, R12503 += 1 };
  s0 -> s1 [78, 65535] { R12565 += 1, R12503 += 1 };
  s1 -> s1 [0, 76] { R12565 += 1, R12503 += 1 };
  s1 -> s1 [0, 65535] { R12565 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [78, 65535] { R12565 += 1, R12503 += 1 };
  s2 -> s1 [0, 76] { R12565 += 1, R12503 += 1 };
  s2 -> s5 [0, 65535] { R12565 += 1 };
  s2 -> s2 [0, 65535] { R12565 += 1, R12503 += 1, R69 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [78, 65535] { R12565 += 1, R12503 += 1 };
  s3 -> s1 [0, 76] { R12565 += 1, R12503 += 1 };
  s3 -> s2 [0, 65535] { R12565 += 1, R12503 += 1, R69 += 1 };
  s3 -> s3 [0, 65535] { R12565 += 1, R12502 += 1, R12503 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [78, 65535] { R12565 += 1, R12503 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R12565 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 76] { R12567 += 1, R12505 += 1, R11525 += 1 };
  s0 -> s2 [0, 65535] { R12567 += 1, R12504 += 1, R12505 += 1 };
  s0 -> s1 [0, 65535] { R12567 += 1, R12505 += 1 };
  s0 -> s0 [0, 65535] { R12566 += 1, R12567 += 1 };
  s0 -> s1 [78, 65535] { R12567 += 1, R12505 += 1, R11525 += 1 };
  s1 -> s1 [0, 76] { R12567 += 1, R12505 += 1, R11525 += 1 };
  s1 -> s1 [0, 65535] { R12567 += 1, R12505 += 1 };
  s1 -> s4 [0, 65535] { R12567 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [78, 65535] { R12567 += 1, R12505 += 1, R11525 += 1 };
  s2 -> s1 [0, 76] { R12567 += 1, R12505 += 1, R11525 += 1 };
  s2 -> s2 [0, 65535] { R12567 += 1, R12504 += 1, R12505 += 1 };
  s2 -> s1 [0, 65535] { R12567 += 1, R12505 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [78, 65535] { R12567 += 1, R12505 += 1, R11525 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R12567 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R12569 += 1, R12507 += 1, R11530 += 1, R11531 += 1 };
  s0 -> s0 [0, 65535] { R12568 += 1, R12569 += 1 };
  s0 -> s2 [0, 65535] { R12569 += 1, R12507 += 1, R11529 += 1, R11530 += 1 };
  s0 -> s3 [0, 65535] { R12569 += 1, R12506 += 1, R12507 += 1 };
  s1 -> s1 [0, 65535] { R12569 += 1, R12507 += 1, R11530 += 1, R11531 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R12569 += 1, R12507 += 1 };
  s1 -> s5 [0, 65535] { R12569 += 1 };
  s2 -> s1 [0, 65535] { R12569 += 1, R12507 += 1, R11530 += 1, R11531 += 1 };
  s2 -> s2 [0, 65535] { R12569 += 1, R12507 += 1, R11529 += 1, R11530 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R12569 += 1 };
  s3 -> s1 [0, 65535] { R12569 += 1, R12507 += 1, R11530 += 1, R11531 += 1 };
  s3 -> s2 [0, 65535] { R12569 += 1, R12507 += 1, R11529 += 1, R11530 += 1 };
  s3 -> s3 [0, 65535] { R12569 += 1, R12506 += 1, R12507 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R12569 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R12569 += 1, R12507 += 1 };
  s6 -> s5 [0, 65535] { R12569 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 77] { R12571 += 1, R12509 += 1, R11535 += 1 };
  s0 -> s2 [0, 65535] { R12571 += 1, R12508 += 1, R12509 += 1 };
  s0 -> s1 [0, 65535] { R12571 += 1, R12509 += 1 };
  s0 -> s0 [0, 65535] { R12570 += 1, R12571 += 1 };
  s0 -> s1 [81, 65535] { R12571 += 1, R12509 += 1, R11535 += 1 };
  s1 -> s1 [0, 77] { R12571 += 1, R12509 += 1, R11535 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R12571 += 1 };
  s1 -> s1 [0, 65535] { R12571 += 1, R12509 += 1 };
  s1 -> s1 [81, 65535] { R12571 += 1, R12509 += 1, R11535 += 1 };
  s2 -> s1 [0, 77] { R12571 += 1, R12509 += 1, R11535 += 1 };
  s2 -> s2 [0, 65535] { R12571 += 1, R12508 += 1, R12509 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R12571 += 1, R12509 += 1 };
  s2 -> s1 [81, 65535] { R12571 += 1, R12509 += 1, R11535 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R12571 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R12573 += 1, R12511 += 1 };
  s0 -> s0 [0, 65535] { R12572 += 1, R12573 += 1 };
  s0 -> s2 [0, 65535] { R12573 += 1, R12510 += 1, R12511 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R12573 += 1, R12511 += 1 };
  s1 -> s4 [0, 65535] { R12573 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R12573 += 1, R12511 += 1 };
  s2 -> s2 [0, 65535] { R12573 += 1, R12510 += 1, R12511 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R12573 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 76] { R12575 += 1, R12513 += 1, R12493 += 1 };
  s0 -> s0 [0, 65535] { R12574 += 1, R12575 += 1 };
  s0 -> s1 [0, 65535] { R12575 += 1, R12513 += 1 };
  s0 -> s2 [0, 65535] { R12575 += 1, R12512 += 1, R12513 += 1 };
  s0 -> s3 [77, 77] { R12575 += 1, R12513 += 1, R12493 += 1 };
  s0 -> s4 [77, 77] { R12575 += 1, R12513 += 1, R12493 += 1 };
  s0 -> s1 [82, 65535] { R12575 += 1, R12513 += 1, R12493 += 1 };
  s1 -> s1 [0, 76] { R12575 += 1, R12513 += 1, R12493 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R12575 += 1, R12513 += 1 };
  s1 -> s6 [0, 65535] { R12575 += 1 };
  s1 -> s3 [77, 77] { R12575 += 1, R12513 += 1, R12493 += 1 };
  s1 -> s4 [77, 77] { R12575 += 1, R12513 += 1, R12493 += 1 };
  s1 -> s1 [82, 65535] { R12575 += 1, R12513 += 1, R12493 += 1 };
  s2 -> s1 [0, 76] { R12575 += 1, R12513 += 1, R12493 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R12575 += 1, R12513 += 1 };
  s2 -> s2 [0, 65535] { R12575 += 1, R12512 += 1, R12513 += 1 };
  s2 -> s3 [77, 77] { R12575 += 1, R12513 += 1, R12493 += 1 };
  s2 -> s4 [77, 77] { R12575 += 1, R12513 += 1, R12493 += 1 };
  s2 -> s1 [82, 65535] { R12575 += 1, R12513 += 1, R12493 += 1 };
  s3 -> s3 [0, 77] { R12575 += 1, R12513 += 1, R12493 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R12575 += 1 };
  s3 -> s3 [0, 65535] { R12575 += 1, R12513 += 1 };
  s3 -> s3 [82, 65535] { R12575 += 1, R12513 += 1, R12493 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R12575 += 1 };
  s4 -> s4 [0, 65535] { R12575 += 1, R12513 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R12575 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s0 [0, 65535] { R12576 += 1, R12577 += 1 };
  s0 -> s1 [0, 65535] { R12577 += 1, R12533 += 1, R18 += 1 };
  s0 -> s2 [0, 65535] { R12577 += 1, R12532 += 1, R12533 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R12577 += 1, R12533 += 1, R18 += 1 };
  s1 -> s4 [0, 65535] { R12577 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R12577 += 1, R12533 += 1, R18 += 1 };
  s2 -> s2 [0, 65535] { R12577 += 1, R12532 += 1, R12533 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R12577 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 72] { R12579 += 1, R12535 += 1 };
  s0 -> s0 [0, 65535] { R12578 += 1, R12579 += 1 };
  s0 -> s2 [0, 65535] { R12579 += 1, R12534 += 1, R12535 += 1 };
  s0 -> s3 [73, 73] { R12579 += 1, R12535 += 1 };
  s0 -> s4 [73, 73] { R12579 += 1, R12535 += 1 };
  s0 -> s5 [77, 77] { R12579 += 1, R12535 += 1 };
  s0 -> s1 [78, 65535] { R12579 += 1, R12535 += 1 };
  s1 -> s1 [0, 72] { R12579 += 1, R12535 += 1 };
  s1 -> s3 [73, 73] { R12579 += 1, R12535 += 1 };
  s1 -> s4 [73, 73] { R12579 += 1, R12535 += 1 };
  s1 -> s5 [77, 77] { R12579 += 1, R12535 += 1 };
  s1 -> s1 [78, 65535] { R12579 += 1, R12535 += 1 };
  s2 -> s1 [0, 72] { R12579 += 1, R12535 += 1 };
  s2 -> s2 [0, 65535] { R12579 += 1, R12534 += 1, R12535 += 1 };
  s2 -> s3 [73, 73] { R12579 += 1, R12535 += 1 };
  s2 -> s4 [73, 73] { R12579 += 1, R12535 += 1 };
  s2 -> s5 [77, 77] { R12579 += 1, R12535 += 1 };
  s2 -> s1 [78, 65535] { R12579 += 1, R12535 += 1 };
  s4 -> s4 [0, 73] { R12579 += 1, R12535 += 1 };
  s4 -> s7 [77, 77] { R12579 += 1, R12535 += 1 };
  s4 -> s4 [78, 65535] { R12579 += 1, R12535 += 1 };
  s5 -> s5 [0, 72] { R12579 += 1, R12535 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R12579 += 1 };
  s5 -> s7 [73, 73] { R12579 += 1, R12535 += 1 };
  s5 -> s8 [73, 73] { R12579 += 1, R12535 += 1 };
  s5 -> s5 [77, 65535] { R12579 += 1, R12535 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 73] { R12579 += 1, R12535 += 1 };
  s7 -> s7 [0, 65535] { R12579 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [77, 65535] { R12579 += 1, R12535 += 1 };
  s8 -> s8 [0, 65535] { R12579 += 1 };
  s8 -> s6 [0, 65535];
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 72] { R12581 += 1, R12537 += 1, R66 += 1 };
  s0 -> s2 [0, 65535] { R12581 += 1, R12536 += 1, R12537 += 1 };
  s0 -> s0 [0, 65535] { R12580 += 1, R12581 += 1 };
  s0 -> s3 [73, 73] { R12581 += 1, R12537 += 1, R66 += 1 };
  s0 -> s4 [73, 73] { R12581 += 1, R12537 += 1, R66 += 1 };
  s0 -> s1 [74, 65535] { R12581 += 1, R12537 += 1, R66 += 1 };
  s1 -> s1 [0, 72] { R12581 += 1, R12537 += 1, R66 += 1 };
  s1 -> s1 [0, 65535] { R12581 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [73, 73] { R12581 += 1, R12537 += 1, R66 += 1 };
  s1 -> s4 [73, 73] { R12581 += 1, R12537 += 1, R66 += 1 };
  s1 -> s1 [74, 65535] { R12581 += 1, R12537 += 1, R66 += 1 };
  s2 -> s1 [0, 72] { R12581 += 1, R12537 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R12581 += 1, R12536 += 1, R12537 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [73, 73] { R12581 += 1, R12537 += 1, R66 += 1 };
  s2 -> s4 [73, 73] { R12581 += 1, R12537 += 1, R66 += 1 };
  s2 -> s1 [74, 65535] { R12581 += 1, R12537 += 1, R66 += 1 };
  s3 -> s3 [0, 65535] { R12581 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R12581 += 1, R12537 += 1, R66 += 1 };
  s4 -> s5 [0, 65535] { R12581 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R12581 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 72] { R12583 += 1, R12539 += 1, R68 += 1 };
  s0 -> s0 [0, 65535] { R12582 += 1, R12583 += 1 };
  s0 -> s2 [0, 65535] { R12583 += 1, R12538 += 1, R12539 += 1 };
  s0 -> s3 [73, 73] { R12583 += 1, R12539 += 1, R68 += 1 };
  s0 -> s4 [73, 73] { R12583 += 1, R12539 += 1, R68 += 1 };
  s0 -> s1 [74, 65535] { R12583 += 1, R12539 += 1, R68 += 1 };
  s1 -> s1 [0, 72] { R12583 += 1, R12539 += 1, R68 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R12583 += 1 };
  s1 -> s3 [73, 73] { R12583 += 1, R12539 += 1, R68 += 1 };
  s1 -> s4 [73, 73] { R12583 += 1, R12539 += 1, R68 += 1 };
  s1 -> s1 [74, 65535] { R12583 += 1, R12539 += 1, R68 += 1 };
  s2 -> s1 [0, 72] { R12583 += 1, R12539 += 1, R68 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R12583 += 1, R12538 += 1, R12539 += 1 };
  s2 -> s3 [73, 73] { R12583 += 1, R12539 += 1, R68 += 1 };
  s2 -> s4 [73, 73] { R12583 += 1, R12539 += 1, R68 += 1 };
  s2 -> s1 [74, 65535] { R12583 += 1, R12539 += 1, R68 += 1 };
  s3 -> s6 [0, 65535] { R12583 += 1 };
  s3 -> s3 [0, 65535] { R12583 += 1, R12539 += 1, R68 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R12583 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R12583 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 72] { R12585 += 1, R12541 += 1, R11523 += 1 };
  s0 -> s2 [0, 72] { R12585 += 1, R12541 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s3 [0, 65535] { R12585 += 1, R12540 += 1, R12541 += 1 };
  s0 -> s0 [0, 65535] { R12584 += 1, R12585 += 1 };
  s0 -> s4 [73, 73] { R12585 += 1, R12541 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s5 [73, 73] { R12585 += 1, R12541 += 1, R11523 += 1 };
  s0 -> s6 [73, 73] { R12585 += 1, R12541 += 1, R11523 += 1 };
  s0 -> s7 [73, 73] { R12585 += 1, R12541 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s1 [74, 76] { R12585 += 1, R12541 += 1, R11523 += 1 };
  s0 -> s2 [74, 65535] { R12585 += 1, R12541 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s1 [78, 65535] { R12585 += 1, R12541 += 1, R11523 += 1 };
  s1 -> s1 [0, 72] { R12585 += 1, R12541 += 1, R11523 += 1 };
  s1 -> s1 [0, 65535] { R12585 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s5 [73, 73] { R12585 += 1, R12541 += 1 };
  s1 -> s6 [73, 73] { R12585 += 1, R12541 += 1 };
  s1 -> s1 [74, 76] { R12585 += 1, R12541 += 1, R11523 += 1 };
  s1 -> s1 [74, 65535] { R12585 += 1, R12541 += 1 };
  s1 -> s1 [78, 65535] { R12585 += 1, R12541 += 1, R11523 += 1 };
  s2 -> s1 [0, 72] { R12585 += 1, R12541 += 1, R11523 += 1 };
  s2 -> s2 [0, 72] { R12585 += 1, R12541 += 1, R11522 += 1, R11523 += 1 };
  s2 -> s4 [73, 73] { R12585 += 1, R12541 += 1, R11522 += 1, R11523 += 1 };
  s2 -> s5 [73, 73] { R12585 += 1, R12541 += 1, R11523 += 1 };
  s2 -> s6 [73, 73] { R12585 += 1, R12541 += 1, R11523 += 1 };
  s2 -> s7 [73, 73] { R12585 += 1, R12541 += 1, R11522 += 1, R11523 += 1 };
  s2 -> s1 [74, 76] { R12585 += 1, R12541 += 1, R11523 += 1 };
  s2 -> s2 [74, 65535] { R12585 += 1, R12541 += 1, R11522 += 1, R11523 += 1 };
  s2 -> s1 [78, 65535] { R12585 += 1, R12541 += 1, R11523 += 1 };
  s3 -> s1 [0, 72] { R12585 += 1, R12541 += 1, R11523 += 1 };
  s3 -> s2 [0, 72] { R12585 += 1, R12541 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s3 [0, 65535] { R12585 += 1, R12540 += 1, R12541 += 1 };
  s3 -> s4 [73, 73] { R12585 += 1, R12541 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s5 [73, 73] { R12585 += 1, R12541 += 1, R11523 += 1 };
  s3 -> s6 [73, 73] { R12585 += 1, R12541 += 1, R11523 += 1 };
  s3 -> s7 [73, 73] { R12585 += 1, R12541 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s1 [74, 76] { R12585 += 1, R12541 += 1, R11523 += 1 };
  s3 -> s2 [74, 65535] { R12585 += 1, R12541 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s1 [78, 65535] { R12585 += 1, R12541 += 1, R11523 += 1 };
  s4 -> s6 [0, 76] { R12585 += 1, R12541 += 1, R11523 += 1 };
  s4 -> s4 [0, 65535] { R12585 += 1, R12541 += 1, R11522 += 1, R11523 += 1 };
  s4 -> s6 [78, 65535] { R12585 += 1, R12541 += 1, R11523 += 1 };
  s5 -> s5 [0, 65535] { R12585 += 1 };
  s5 -> s8 [0, 65535];
  s6 -> s6 [0, 76] { R12585 += 1, R12541 += 1, R11523 += 1 };
  s6 -> s6 [0, 65535] { R12585 += 1, R12541 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s9 [0, 65535] { R12585 += 1 };
  s6 -> s6 [78, 65535] { R12585 += 1, R12541 += 1, R11523 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R12585 += 1 };
  accepting s8, s5, s9, s6, s1;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 72] { R12587 += 1, R12543 += 1, R11526 += 1, R11527 += 1 };
  s0 -> s0 [0, 65535] { R12586 += 1, R12587 += 1 };
  s0 -> s2 [0, 65535] { R12587 += 1, R12542 += 1, R12543 += 1 };
  s0 -> s3 [73, 73] { R12587 += 1, R12543 += 1, R11526 += 1, R11527 += 1 };
  s0 -> s4 [73, 73] { R12587 += 1, R12543 += 1, R11526 += 1, R11527 += 1 };
  s0 -> s1 [74, 65535] { R12587 += 1, R12543 += 1, R11526 += 1, R11527 += 1 };
  s1 -> s1 [0, 72] { R12587 += 1, R12543 += 1, R11526 += 1, R11527 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R12587 += 1 };
  s1 -> s3 [73, 73] { R12587 += 1, R12543 += 1, R11526 += 1, R11527 += 1 };
  s1 -> s4 [73, 73] { R12587 += 1, R12543 += 1, R11526 += 1, R11527 += 1 };
  s1 -> s1 [74, 65535] { R12587 += 1, R12543 += 1, R11526 += 1, R11527 += 1 };
  s2 -> s1 [0, 72] { R12587 += 1, R12543 += 1, R11526 += 1, R11527 += 1 };
  s2 -> s2 [0, 65535] { R12587 += 1, R12542 += 1, R12543 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [73, 73] { R12587 += 1, R12543 += 1, R11526 += 1, R11527 += 1 };
  s2 -> s4 [73, 73] { R12587 += 1, R12543 += 1, R11526 += 1, R11527 += 1 };
  s2 -> s1 [74, 65535] { R12587 += 1, R12543 += 1, R11526 += 1, R11527 += 1 };
  s3 -> s3 [0, 65535] { R12587 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R12587 += 1, R12543 += 1, R11526 += 1, R11527 += 1 };
  s4 -> s5 [0, 65535] { R12587 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R12587 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 72] { R12589 += 1, R12545 += 1, R11533 += 1 };
  s0 -> s2 [0, 72] { R12589 += 1, R12545 += 1, R11532 += 1, R11533 += 1 };
  s0 -> s0 [0, 65535] { R12588 += 1, R12589 += 1 };
  s0 -> s3 [0, 65535] { R12589 += 1, R12544 += 1, R12545 += 1 };
  s0 -> s4 [73, 73] { R12589 += 1, R12545 += 1, R11532 += 1, R11533 += 1 };
  s0 -> s5 [73, 73] { R12589 += 1, R12545 += 1, R11532 += 1, R11533 += 1 };
  s0 -> s6 [73, 73] { R12589 += 1, R12545 += 1, R11533 += 1 };
  s0 -> s7 [73, 73] { R12589 += 1, R12545 += 1, R11533 += 1 };
  s0 -> s1 [74, 77] { R12589 += 1, R12545 += 1, R11533 += 1 };
  s0 -> s2 [74, 65535] { R12589 += 1, R12545 += 1, R11532 += 1, R11533 += 1 };
  s0 -> s8 [81, 81] { R12589 += 1, R12545 += 1, R11533 += 1 };
  s0 -> s1 [82, 65535] { R12589 += 1, R12545 += 1, R11533 += 1 };
  s1 -> s1 [0, 72] { R12589 += 1, R12545 += 1, R11533 += 1 };
  s1 -> s6 [73, 73] { R12589 += 1, R12545 += 1, R11533 += 1 };
  s1 -> s7 [73, 73] { R12589 += 1, R12545 += 1, R11533 += 1 };
  s1 -> s1 [74, 77] { R12589 += 1, R12545 += 1, R11533 += 1 };
  s1 -> s8 [81, 81] { R12589 += 1, R12545 += 1, R11533 += 1 };
  s1 -> s1 [82, 65535] { R12589 += 1, R12545 += 1, R11533 += 1 };
  s2 -> s1 [0, 72] { R12589 += 1, R12545 += 1, R11533 += 1 };
  s2 -> s2 [0, 72] { R12589 += 1, R12545 += 1, R11532 += 1, R11533 += 1 };
  s2 -> s4 [73, 73] { R12589 += 1, R12545 += 1, R11532 += 1, R11533 += 1 };
  s2 -> s5 [73, 73] { R12589 += 1, R12545 += 1, R11532 += 1, R11533 += 1 };
  s2 -> s6 [73, 73] { R12589 += 1, R12545 += 1, R11533 += 1 };
  s2 -> s7 [73, 73] { R12589 += 1, R12545 += 1, R11533 += 1 };
  s2 -> s1 [74, 77] { R12589 += 1, R12545 += 1, R11533 += 1 };
  s2 -> s2 [74, 65535] { R12589 += 1, R12545 += 1, R11532 += 1, R11533 += 1 };
  s2 -> s8 [81, 81] { R12589 += 1, R12545 += 1, R11533 += 1 };
  s2 -> s1 [82, 65535] { R12589 += 1, R12545 += 1, R11533 += 1 };
  s3 -> s1 [0, 72] { R12589 += 1, R12545 += 1, R11533 += 1 };
  s3 -> s2 [0, 72] { R12589 += 1, R12545 += 1, R11532 += 1, R11533 += 1 };
  s3 -> s3 [0, 65535] { R12589 += 1, R12544 += 1, R12545 += 1 };
  s3 -> s4 [73, 73] { R12589 += 1, R12545 += 1, R11532 += 1, R11533 += 1 };
  s3 -> s5 [73, 73] { R12589 += 1, R12545 += 1, R11532 += 1, R11533 += 1 };
  s3 -> s6 [73, 73] { R12589 += 1, R12545 += 1, R11533 += 1 };
  s3 -> s7 [73, 73] { R12589 += 1, R12545 += 1, R11533 += 1 };
  s3 -> s1 [74, 77] { R12589 += 1, R12545 += 1, R11533 += 1 };
  s3 -> s2 [74, 65535] { R12589 += 1, R12545 += 1, R11532 += 1, R11533 += 1 };
  s3 -> s8 [81, 81] { R12589 += 1, R12545 += 1, R11533 += 1 };
  s3 -> s1 [82, 65535] { R12589 += 1, R12545 += 1, R11533 += 1 };
  s5 -> s6 [0, 77] { R12589 += 1, R12545 += 1, R11533 += 1 };
  s5 -> s5 [0, 65535] { R12589 += 1, R12545 += 1, R11532 += 1, R11533 += 1 };
  s5 -> s10 [81, 81] { R12589 += 1, R12545 += 1, R11533 += 1 };
  s5 -> s6 [82, 65535] { R12589 += 1, R12545 += 1, R11533 += 1 };
  s6 -> s6 [0, 77] { R12589 += 1, R12545 += 1, R11533 += 1 };
  s6 -> s10 [81, 81] { R12589 += 1, R12545 += 1, R11533 += 1 };
  s6 -> s6 [82, 65535] { R12589 += 1, R12545 += 1, R11533 += 1 };
  s8 -> s8 [0, 72] { R12589 += 1, R12545 += 1, R11533 += 1 };
  s8 -> s8 [0, 65535] { R12589 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [73, 73] { R12589 += 1, R12545 += 1 };
  s8 -> s11 [73, 73] { R12589 += 1, R12545 += 1 };
  s8 -> s8 [74, 77] { R12589 += 1, R12545 += 1, R11533 += 1 };
  s8 -> s8 [74, 65535] { R12589 += 1, R12545 += 1 };
  s8 -> s8 [81, 65535] { R12589 += 1, R12545 += 1, R11533 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 77] { R12589 += 1, R12545 += 1, R11533 += 1 };
  s10 -> s10 [0, 65535] { R12589 += 1, R12545 += 1 };
  s10 -> s12 [0, 65535] { R12589 += 1 };
  s10 -> s9 [0, 65535];
  s10 -> s10 [81, 65535] { R12589 += 1, R12545 += 1, R11533 += 1 };
  s11 -> s11 [0, 65535] { R12589 += 1 };
  s11 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R12589 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 72] { R12591 += 1, R12547 += 1, R12380 += 1, R12381 += 1 };
  s0 -> s2 [0, 72] { R12591 += 1, R12547 += 1, R12381 += 1, R12382 += 1 };
  s0 -> s3 [0, 65535] { R12591 += 1, R12546 += 1, R12547 += 1 };
  s0 -> s0 [0, 65535] { R12590 += 1, R12591 += 1 };
  s0 -> s4 [73, 73] { R12591 += 1, R12547 += 1, R12381 += 1, R12382 += 1 };
  s0 -> s5 [73, 73] { R12591 += 1, R12547 += 1, R12381 += 1, R12382 += 1 };
  s0 -> s6 [73, 73] { R12591 += 1, R12547 += 1, R12380 += 1, R12381 += 1 };
  s0 -> s7 [73, 73] { R12591 += 1, R12547 += 1, R12380 += 1, R12381 += 1 };
  s0 -> s1 [74, 65535] { R12591 += 1, R12547 += 1, R12380 += 1, R12381 += 1 };
  s0 -> s2 [74, 65535] { R12591 += 1, R12547 += 1, R12381 += 1, R12382 += 1 };
  s1 -> s1 [0, 72] { R12591 += 1, R12547 += 1, R12380 += 1, R12381 += 1 };
  s1 -> s2 [0, 72] { R12591 += 1, R12547 += 1, R12381 += 1, R12382 += 1 };
  s1 -> s4 [73, 73] { R12591 += 1, R12547 += 1, R12381 += 1, R12382 += 1 };
  s1 -> s5 [73, 73] { R12591 += 1, R12547 += 1, R12381 += 1, R12382 += 1 };
  s1 -> s6 [73, 73] { R12591 += 1, R12547 += 1, R12380 += 1, R12381 += 1 };
  s1 -> s7 [73, 73] { R12591 += 1, R12547 += 1, R12380 += 1, R12381 += 1 };
  s1 -> s1 [74, 65535] { R12591 += 1, R12547 += 1, R12380 += 1, R12381 += 1 };
  s1 -> s2 [74, 65535] { R12591 += 1, R12547 += 1, R12381 += 1, R12382 += 1 };
  s2 -> s11 [0, 72] { R12591 += 1, R12547 += 1 };
  s2 -> s2 [0, 72] { R12591 += 1, R12547 += 1, R12381 += 1, R12382 += 1 };
  s2 -> s4 [73, 73] { R12591 += 1, R12547 += 1, R12381 += 1, R12382 += 1 };
  s2 -> s5 [73, 73] { R12591 += 1, R12547 += 1, R12381 += 1, R12382 += 1 };
  s2 -> s12 [73, 73] { R12591 += 1, R12547 += 1 };
  s2 -> s8 [73, 73] { R12591 += 1, R12547 += 1 };
  s2 -> s11 [74, 65535] { R12591 += 1, R12547 += 1 };
  s2 -> s2 [74, 65535] { R12591 += 1, R12547 += 1, R12381 += 1, R12382 += 1 };
  s3 -> s1 [0, 72] { R12591 += 1, R12547 += 1, R12380 += 1, R12381 += 1 };
  s3 -> s2 [0, 72] { R12591 += 1, R12547 += 1, R12381 += 1, R12382 += 1 };
  s3 -> s3 [0, 65535] { R12591 += 1, R12546 += 1, R12547 += 1 };
  s3 -> s4 [73, 73] { R12591 += 1, R12547 += 1, R12381 += 1, R12382 += 1 };
  s3 -> s5 [73, 73] { R12591 += 1, R12547 += 1, R12381 += 1, R12382 += 1 };
  s3 -> s6 [73, 73] { R12591 += 1, R12547 += 1, R12380 += 1, R12381 += 1 };
  s3 -> s7 [73, 73] { R12591 += 1, R12547 += 1, R12380 += 1, R12381 += 1 };
  s3 -> s1 [74, 65535] { R12591 += 1, R12547 += 1, R12380 += 1, R12381 += 1 };
  s3 -> s2 [74, 65535] { R12591 += 1, R12547 += 1, R12381 += 1, R12382 += 1 };
  s5 -> s5 [0, 65535] { R12591 += 1, R12547 += 1, R12381 += 1, R12382 += 1 };
  s5 -> s8 [0, 65535] { R12591 += 1, R12547 += 1 };
  s7 -> s5 [0, 65535] { R12591 += 1, R12547 += 1, R12381 += 1, R12382 += 1 };
  s7 -> s7 [0, 65535] { R12591 += 1, R12547 += 1, R12380 += 1, R12381 += 1 };
  s8 -> s9 [0, 65535] { R12591 += 1 };
  s8 -> s8 [0, 65535] { R12591 += 1, R12547 += 1 };
  s8 -> s10 [0, 65535];
  s9 -> s9 [0, 65535] { R12591 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s11 [0, 72] { R12591 += 1, R12547 += 1 };
  s11 -> s11 [0, 65535] { R12591 += 1 };
  s11 -> s10 [0, 65535];
  s11 -> s12 [73, 73] { R12591 += 1, R12547 += 1 };
  s11 -> s8 [73, 73] { R12591 += 1, R12547 += 1 };
  s11 -> s11 [74, 65535] { R12591 += 1, R12547 += 1 };
  s12 -> s12 [0, 65535] { R12591 += 1 };
  s12 -> s10 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 72] { R12593 += 1, R12549 += 1, R12491 += 1 };
  s0 -> s2 [0, 72] { R12593 += 1, R12549 += 1, R12490 += 1, R12491 += 1 };
  s0 -> s3 [0, 65535] { R12593 += 1, R12548 += 1, R12549 += 1 };
  s0 -> s0 [0, 65535] { R12592 += 1, R12593 += 1 };
  s0 -> s4 [73, 73] { R12593 += 1, R12549 += 1, R12491 += 1 };
  s0 -> s5 [73, 73] { R12593 += 1, R12549 += 1, R12490 += 1, R12491 += 1 };
  s0 -> s6 [73, 73] { R12593 += 1, R12549 += 1, R12491 += 1 };
  s0 -> s7 [73, 73] { R12593 += 1, R12549 += 1, R12490 += 1, R12491 += 1 };
  s0 -> s1 [74, 76] { R12593 += 1, R12549 += 1, R12491 += 1 };
  s0 -> s2 [74, 65535] { R12593 += 1, R12549 += 1, R12490 += 1, R12491 += 1 };
  s0 -> s1 [82, 65535] { R12593 += 1, R12549 += 1, R12491 += 1 };
  s1 -> s1 [0, 72] { R12593 += 1, R12549 += 1, R12491 += 1 };
  s1 -> s1 [0, 65535] { R12593 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s4 [73, 73] { R12593 += 1, R12549 += 1 };
  s1 -> s6 [73, 73] { R12593 += 1, R12549 += 1 };
  s1 -> s1 [74, 76] { R12593 += 1, R12549 += 1, R12491 += 1 };
  s1 -> s1 [74, 65535] { R12593 += 1, R12549 += 1 };
  s1 -> s1 [82, 65535] { R12593 += 1, R12549 += 1, R12491 += 1 };
  s2 -> s1 [0, 72] { R12593 += 1, R12549 += 1, R12491 += 1 };
  s2 -> s2 [0, 72] { R12593 += 1, R12549 += 1, R12490 += 1, R12491 += 1 };
  s2 -> s4 [73, 73] { R12593 += 1, R12549 += 1, R12491 += 1 };
  s2 -> s5 [73, 73] { R12593 += 1, R12549 += 1, R12490 += 1, R12491 += 1 };
  s2 -> s6 [73, 73] { R12593 += 1, R12549 += 1, R12491 += 1 };
  s2 -> s7 [73, 73] { R12593 += 1, R12549 += 1, R12490 += 1, R12491 += 1 };
  s2 -> s1 [74, 76] { R12593 += 1, R12549 += 1, R12491 += 1 };
  s2 -> s2 [74, 65535] { R12593 += 1, R12549 += 1, R12490 += 1, R12491 += 1 };
  s2 -> s1 [82, 65535] { R12593 += 1, R12549 += 1, R12491 += 1 };
  s3 -> s1 [0, 72] { R12593 += 1, R12549 += 1, R12491 += 1 };
  s3 -> s2 [0, 72] { R12593 += 1, R12549 += 1, R12490 += 1, R12491 += 1 };
  s3 -> s3 [0, 65535] { R12593 += 1, R12548 += 1, R12549 += 1 };
  s3 -> s4 [73, 73] { R12593 += 1, R12549 += 1, R12491 += 1 };
  s3 -> s5 [73, 73] { R12593 += 1, R12549 += 1, R12490 += 1, R12491 += 1 };
  s3 -> s6 [73, 73] { R12593 += 1, R12549 += 1, R12491 += 1 };
  s3 -> s7 [73, 73] { R12593 += 1, R12549 += 1, R12490 += 1, R12491 += 1 };
  s3 -> s1 [74, 76] { R12593 += 1, R12549 += 1, R12491 += 1 };
  s3 -> s2 [74, 65535] { R12593 += 1, R12549 += 1, R12490 += 1, R12491 += 1 };
  s3 -> s1 [82, 65535] { R12593 += 1, R12549 += 1, R12491 += 1 };
  s4 -> s4 [0, 76] { R12593 += 1, R12549 += 1, R12491 += 1 };
  s4 -> s4 [0, 65535] { R12593 += 1, R12549 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s9 [0, 65535] { R12593 += 1 };
  s4 -> s4 [82, 65535] { R12593 += 1, R12549 += 1, R12491 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R12593 += 1 };
  s7 -> s4 [0, 76] { R12593 += 1, R12549 += 1, R12491 += 1 };
  s7 -> s7 [0, 65535] { R12593 += 1, R12549 += 1, R12490 += 1, R12491 += 1 };
  s7 -> s4 [82, 65535] { R12593 += 1, R12549 += 1, R12491 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R12593 += 1 };
  accepting s4, s8, s9, s6, s1;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
synchronised {  // Automata constraining P54
automaton P54_0 {
  init s0;
  s0 -> s1 [109, 109];
  accepting s1;
};
};
constraint R2 = R12593 && R20 - R12593 = -1 && R21 = R12593 && R22 - R12593 = -1 && R23 = R12593 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R11535 + -1*R11533 - R53 = 0 && R52 + R11534 + R11532 = 0 && R12534 = 0 && R12535 = 0 && R12540 = 0 && R12541 = 0 && R12544 = 0 && R12545 = 0 && R12546 = 0 && R12547 = 0 && R12548 = 0 && R12549 = 0 && R12550 = 0 && R12551 = R12593 && R12552 = 0 && R12553 = R12593 && R12554 = 0 && R12555 = R12593 && R12556 = 0 && R12557 = R12593 && R12558 = 0 && R12559 = R12593 && R12560 = 0 && R12561 = R12593 && R12562 = 0 && R12563 = R12593 && R12564 = 0 && R12565 = R12593 && R12566 = 0 && R12567 = R12593 && R12568 = 0 && R12569 = R12593 && R12570 = 0 && R12571 = R12593 && R12572 = 0 && R12573 = R12593 && R12574 = 0 && R12575 = R12593 && R12576 = 0 && R12577 = R12593 && R12578 = 0 && R12579 = R12593 && R12580 = 0 && R12581 = R12593 && R12582 = 0 && R12583 = R12593 && R12584 = 0 && R12585 = R12593 && R12586 = 0 && R12587 = R12593 && R12588 = 0 && R12589 = R12593 && R12590 = 0 && R12591 = R12593 && R12592 = 0 && -1 < R1 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R11535 + -1*R11533 - R53 < 1 && 0 < R12593 && (R1 != 0 || R17 = 0 || (R12494 = 0 && R12495 = 0)) && (R1 != 0 || R17 = 0 || (R12496 = 0 && R12497 = 0)) && (R1 != 0 || R17 = 0 || (R12498 = 0 && R12499 = 0)) && (R1 != 0 || R17 = 0 || (R12500 = 0 && R12501 = 0)) && (R1 != 0 || R17 = 0 || (R12502 = 0 && R12503 = 0)) && (R1 != 0 || R17 = 0 || (R12504 = 0 && R12505 = 0)) && (R1 != 0 || R17 = 0 || (R12506 = 0 && R12507 = 0)) && (R1 != 0 || R17 = 0 || (R12508 = 0 && R12509 = 0)) && (R1 != 0 || R17 = 0 || (R12510 = 0 && R12511 = 0)) && (R1 != 0 || R17 = 0 || (R12512 = 0 && R12513 = 0)) && (R48 + R11531 + R11528 != 0 || ((R42 + R11524 + R11522 != 0 || R43 + R11525 + R11523 + -1*R11535 + -1*R11533 - R53 = 0 || R53 + R11535 + R11533 < 1) && (R42 + R11524 + R11522 = 0 || R53 + R11535 + R11533 < 1))) && (R48 + R11531 + R11528 != 0 || ((R46 + R11529 + R11526 != 0 || R47 + R11530 + R11527 + -1*R11535 + -1*R11533 - R53 = 0 || R53 + R11535 + R11533 < 1) && (R46 + R11529 + R11526 = 0 || R53 + R11535 + R11533 < 1))) && (R12494 != 0 || R1 = R12495 || R1 < 1) && (R12496 != 0 || R1 = R12497 || R1 < 1) && (R12498 != 0 || R1 = R12499 || R1 < 1) && (R12500 != 0 || R1 = R12501 || R1 < 1) && (R12502 != 0 || R1 = R12503 || R1 < 1) && (R12504 != 0 || R1 = R12505 || R1 < 1) && (R12506 != 0 || R1 = R12507 || R1 < 1) && (R12508 != 0 || R1 = R12509 || R1 < 1) && (R12510 != 0 || R1 = R12511 || R1 < 1) && (R12512 != 0 || R1 = R12513 || R1 < 1) && (R18 = 0 || (R12532 = 0 && R12533 = 0)) && (R18 = 0 || (R12536 = 0 && R12537 = 0)) && (R18 = 0 || (R12538 = 0 && R12539 = 0)) && (R18 = 0 || (R12542 = 0 && R12543 = 0)) && (R19 = 0 || (R12514 = 0 && R12515 = 0)) && (R19 = 0 || (R12516 = 0 && R12517 = 0)) && (R19 = 0 || (R12518 = 0 && R12519 = 0)) && (R19 = 0 || (R12520 = 0 && R12521 = 0)) && (R19 = 0 || (R12522 = 0 && R12523 = 0)) && (R19 = 0 || (R12524 = 0 && R12525 = 0)) && (R19 = 0 || (R12526 = 0 && R12527 = 0)) && (R19 = 0 || (R12528 = 0 && R12529 = 0)) && (R19 = 0 || (R12530 = 0 && R12531 = 0)) && (R48 + R11531 + R11528 = 0 || (R42 + R11524 + R11522 = 0 && R43 + R11525 + R11523 + -1*R11535 + -1*R11533 - R53 = 0)) && (R48 + R11531 + R11528 = 0 || (R46 + R11529 + R11526 = 0 && R47 + R11530 + R11527 + -1*R11535 + -1*R11533 - R53 = 0)) && (R58 + R12385 + R12382 = 0 || (R56 + R12383 + R12380 = 0 && R57 + R12384 + R12381 = 0)) && (R58 + R12385 + R12382 = 0 || (R62 + R12492 + R12490 = 0 && R63 + R12493 + R12491 = 0)) && (R12494 = 0 || R1 < 1) && (R12496 = 0 || R1 < 1) && (R12498 = 0 || R1 < 1) && (R12500 = 0 || R1 < 1) && (R12502 = 0 || R1 < 1) && (R12504 = 0 || R1 < 1) && (R12506 = 0 || R1 < 1) && (R12508 = 0 || R1 < 1) && (R12510 = 0 || R1 < 1) && (R12512 = 0 || R1 < 1);
// End of Parikh automata intersection problem
