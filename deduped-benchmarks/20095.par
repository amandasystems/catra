// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R12, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R4, R40, R402, R403, R404, R405, R406, R407, R408, R409, R410, R411, R412, R413, R414, R415, R416, R417, R418, R419, R42, R420, R421, R422, R423, R424, R425, R426, R427, R428, R429, R43, R430, R431, R432, R433, R434, R435, R436, R437, R438, R439, R440, R441, R442, R443, R444, R445, R446, R447, R448, R449, R450, R451, R452, R453, R454, R455, R456, R457, R458, R459, R46, R460, R461, R462, R463, R464, R465, R466, R467, R468, R469, R47, R470, R471, R472, R473, R474, R475, R476, R477, R478, R479, R48, R480, R481, R482, R483, R484, R485, R486, R487, R488, R489, R490, R491, R492, R493, R494, R495, R496, R497, R498, R499, R500, R501, R502, R503, R504, R505, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R70, R71, R72, R73, R74, R75, R76, R77, R78, R79, R8, R80, R81, R82, R83, R84, R85, R86, R87, R88, R89;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 72];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [73, 73];
  s0 -> s1 [74, 65535];
  s1 -> s1 [0, 72];
  s1 -> s2 [73, 73];
  s1 -> s1 [74, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s1 [0, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R25 += 1 };
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R426 += 1, R427 += 1 };
  s0 -> s1 [0, 65535] { R427 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R427 += 1, R19 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 72] { R429 += 1 };
  s0 -> s0 [0, 65535] { R428 += 1, R429 += 1 };
  s0 -> s2 [73, 73] { R429 += 1 };
  s0 -> s3 [73, 73] { R429 += 1 };
  s0 -> s1 [78, 65535] { R429 += 1 };
  s1 -> s1 [0, 72] { R429 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R429 += 1 };
  s1 -> s3 [73, 73] { R429 += 1 };
  s1 -> s1 [78, 65535] { R429 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 73] { R429 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [78, 65535] { R429 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 72] { R431 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R430 += 1, R431 += 1 };
  s0 -> s2 [73, 73] { R431 += 1, R38 += 1 };
  s0 -> s3 [73, 73] { R431 += 1, R38 += 1 };
  s0 -> s1 [74, 65535] { R431 += 1, R38 += 1 };
  s1 -> s1 [0, 72] { R431 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R431 += 1, R38 += 1 };
  s1 -> s3 [73, 73] { R431 += 1, R38 += 1 };
  s1 -> s1 [74, 65535] { R431 += 1, R38 += 1 };
  s2 -> s2 [0, 65535] { R431 += 1, R38 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 72] { R433 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R432 += 1, R433 += 1 };
  s0 -> s2 [73, 73] { R433 += 1, R40 += 1 };
  s0 -> s3 [73, 73] { R433 += 1, R40 += 1 };
  s0 -> s1 [74, 65535] { R433 += 1, R40 += 1 };
  s1 -> s1 [0, 72] { R433 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R433 += 1, R40 += 1 };
  s1 -> s3 [73, 73] { R433 += 1, R40 += 1 };
  s1 -> s1 [74, 65535] { R433 += 1, R40 += 1 };
  s2 -> s2 [0, 65535] { R433 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 72] { R435 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R434 += 1, R435 += 1 };
  s0 -> s2 [73, 73] { R435 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [73, 73] { R435 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [74, 65535] { R435 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 72] { R435 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R435 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [73, 73] { R435 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [74, 65535] { R435 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535] { R435 += 1, R42 += 1, R43 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 72] { R437 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R436 += 1, R437 += 1 };
  s0 -> s2 [73, 73] { R437 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [73, 73] { R437 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [74, 65535] { R437 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 72] { R437 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R437 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [73, 73] { R437 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [74, 65535] { R437 += 1, R46 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R437 += 1, R46 += 1, R47 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 72] { R439 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R438 += 1, R439 += 1 };
  s0 -> s2 [73, 73] { R439 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [73, 73] { R439 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [74, 65535] { R439 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 72] { R439 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R439 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [73, 73] { R439 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [74, 65535] { R439 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R439 += 1, R52 += 1, R53 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 72] { R441 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R440 += 1, R441 += 1 };
  s0 -> s2 [73, 73] { R441 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [73, 73] { R441 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [74, 65535] { R441 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 72] { R441 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R441 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [73, 73] { R441 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [74, 65535] { R441 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535] { R441 += 1, R56 += 1, R57 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 72] { R443 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R442 += 1, R443 += 1 };
  s0 -> s2 [73, 73] { R443 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [73, 73] { R443 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [74, 65535] { R443 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 72] { R443 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R443 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [73, 73] { R443 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [74, 65535] { R443 += 1, R62 += 1, R63 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R443 += 1, R62 += 1, R63 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 72] { R463 += 1 };
  s0 -> s0 [0, 65535] { R462 += 1, R463 += 1 };
  s0 -> s2 [73, 73] { R463 += 1 };
  s0 -> s1 [74, 65535] { R463 += 1 };
  s1 -> s1 [0, 72] { R463 += 1 };
  s1 -> s2 [73, 73] { R463 += 1 };
  s1 -> s1 [74, 65535] { R463 += 1 };
  s2 -> s2 [0, 65535] { R463 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R464 += 1, R465 += 1 };
  s0 -> s1 [0, 65535] { R465 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R465 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 72] { R467 += 1 };
  s0 -> s0 [0, 65535] { R466 += 1, R467 += 1 };
  s0 -> s2 [0, 65535] { R467 += 1, R8 += 1 };
  s0 -> s3 [73, 73] { R467 += 1 };
  s0 -> s1 [74, 65535] { R467 += 1 };
  s1 -> s1 [0, 72] { R467 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [73, 73] { R467 += 1 };
  s1 -> s1 [74, 65535] { R467 += 1 };
  s2 -> s1 [0, 72] { R467 += 1 };
  s2 -> s2 [0, 65535] { R467 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [73, 73] { R467 += 1 };
  s2 -> s1 [74, 65535] { R467 += 1 };
  s3 -> s3 [0, 65535] { R467 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 72] { R469 += 1, R407 += 1 };
  s0 -> s2 [0, 65535] { R469 += 1, R406 += 1, R407 += 1 };
  s0 -> s0 [0, 65535] { R468 += 1, R469 += 1 };
  s0 -> s1 [74, 65535] { R469 += 1, R407 += 1 };
  s1 -> s1 [0, 72] { R469 += 1, R407 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R469 += 1 };
  s1 -> s1 [74, 65535] { R469 += 1, R407 += 1 };
  s2 -> s1 [0, 72] { R469 += 1, R407 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R469 += 1, R406 += 1, R407 += 1 };
  s2 -> s1 [74, 65535] { R469 += 1, R407 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R471 += 1, R408 += 1, R409 += 1 };
  s0 -> s0 [0, 65535] { R470 += 1, R471 += 1 };
  s0 -> s2 [0, 65535] { R471 += 1, R409 += 1, R17 += 1 };
  s1 -> s1 [0, 65535] { R471 += 1, R408 += 1, R409 += 1 };
  s1 -> s2 [0, 65535] { R471 += 1, R409 += 1, R17 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R471 += 1, R409 += 1, R17 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R471 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R471 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 73] { R473 += 1, R411 += 1 };
  s0 -> s2 [0, 65535] { R473 += 1, R410 += 1, R411 += 1 };
  s0 -> s0 [0, 65535] { R472 += 1, R473 += 1 };
  s0 -> s1 [77, 65535] { R473 += 1, R411 += 1 };
  s1 -> s1 [0, 73] { R473 += 1, R411 += 1 };
  s1 -> s1 [0, 65535] { R473 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [77, 65535] { R473 += 1, R411 += 1 };
  s2 -> s1 [0, 73] { R473 += 1, R411 += 1 };
  s2 -> s2 [0, 65535] { R473 += 1, R410 += 1, R411 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [77, 65535] { R473 += 1, R411 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s0 [0, 65535] { R474 += 1, R475 += 1 };
  s0 -> s1 [0, 65535] { R475 += 1, R413 += 1, R67 += 1 };
  s0 -> s2 [0, 65535] { R475 += 1, R412 += 1, R413 += 1 };
  s1 -> s4 [0, 65535] { R475 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R475 += 1, R413 += 1, R67 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R475 += 1, R413 += 1, R67 += 1 };
  s2 -> s2 [0, 65535] { R475 += 1, R412 += 1, R413 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R475 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 76] { R477 += 1, R415 += 1 };
  s0 -> s2 [0, 65535] { R477 += 1, R414 += 1, R415 += 1 };
  s0 -> s3 [0, 65535] { R477 += 1, R415 += 1, R69 += 1 };
  s0 -> s0 [0, 65535] { R476 += 1, R477 += 1 };
  s0 -> s1 [78, 65535] { R477 += 1, R415 += 1 };
  s1 -> s1 [0, 76] { R477 += 1, R415 += 1 };
  s1 -> s1 [0, 65535] { R477 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [78, 65535] { R477 += 1, R415 += 1 };
  s2 -> s1 [0, 76] { R477 += 1, R415 += 1 };
  s2 -> s2 [0, 65535] { R477 += 1, R414 += 1, R415 += 1 };
  s2 -> s3 [0, 65535] { R477 += 1, R415 += 1, R69 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [78, 65535] { R477 += 1, R415 += 1 };
  s3 -> s1 [0, 76] { R477 += 1, R415 += 1 };
  s3 -> s3 [0, 65535] { R477 += 1, R415 += 1, R69 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R477 += 1 };
  s3 -> s1 [78, 65535] { R477 += 1, R415 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R477 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 76] { R479 += 1, R417 += 1, R73 += 1 };
  s0 -> s2 [0, 65535] { R479 += 1, R417 += 1, R72 += 1, R73 += 1 };
  s0 -> s0 [0, 65535] { R478 += 1, R479 += 1 };
  s0 -> s3 [0, 65535] { R479 += 1, R416 += 1, R417 += 1 };
  s0 -> s1 [78, 65535] { R479 += 1, R417 += 1, R73 += 1 };
  s1 -> s1 [0, 76] { R479 += 1, R417 += 1, R73 += 1 };
  s1 -> s5 [0, 65535] { R479 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R479 += 1, R417 += 1 };
  s1 -> s1 [78, 65535] { R479 += 1, R417 += 1, R73 += 1 };
  s2 -> s1 [0, 76] { R479 += 1, R417 += 1, R73 += 1 };
  s2 -> s2 [0, 65535] { R479 += 1, R417 += 1, R72 += 1, R73 += 1 };
  s2 -> s5 [0, 65535] { R479 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [78, 65535] { R479 += 1, R417 += 1, R73 += 1 };
  s3 -> s1 [0, 76] { R479 += 1, R417 += 1, R73 += 1 };
  s3 -> s2 [0, 65535] { R479 += 1, R417 += 1, R72 += 1, R73 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R479 += 1, R416 += 1, R417 += 1 };
  s3 -> s1 [78, 65535] { R479 += 1, R417 += 1, R73 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R479 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R481 += 1, R419 += 1, R77 += 1, R78 += 1 };
  s0 -> s2 [0, 65535] { R481 += 1, R418 += 1, R419 += 1 };
  s0 -> s3 [0, 65535] { R481 += 1, R419 += 1, R78 += 1, R79 += 1 };
  s0 -> s0 [0, 65535] { R480 += 1, R481 += 1 };
  s1 -> s1 [0, 65535] { R481 += 1, R419 += 1, R77 += 1, R78 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R481 += 1 };
  s1 -> s3 [0, 65535] { R481 += 1, R419 += 1, R78 += 1, R79 += 1 };
  s2 -> s1 [0, 65535] { R481 += 1, R419 += 1, R77 += 1, R78 += 1 };
  s2 -> s2 [0, 65535] { R481 += 1, R418 += 1, R419 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R481 += 1, R419 += 1, R78 += 1, R79 += 1 };
  s3 -> s4 [0, 65535] { R481 += 1, R419 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R481 += 1 };
  s3 -> s3 [0, 65535] { R481 += 1, R419 += 1, R78 += 1, R79 += 1 };
  s4 -> s4 [0, 65535] { R481 += 1, R419 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R481 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R481 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 77] { R483 += 1, R421 += 1, R83 += 1 };
  s0 -> s1 [0, 65535] { R483 += 1, R421 += 1 };
  s0 -> s0 [0, 65535] { R482 += 1, R483 += 1 };
  s0 -> s2 [0, 65535] { R483 += 1, R420 += 1, R421 += 1 };
  s0 -> s1 [81, 65535] { R483 += 1, R421 += 1, R83 += 1 };
  s1 -> s1 [0, 77] { R483 += 1, R421 += 1, R83 += 1 };
  s1 -> s4 [0, 65535] { R483 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R483 += 1, R421 += 1 };
  s1 -> s1 [81, 65535] { R483 += 1, R421 += 1, R83 += 1 };
  s2 -> s1 [0, 77] { R483 += 1, R421 += 1, R83 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R483 += 1, R421 += 1 };
  s2 -> s2 [0, 65535] { R483 += 1, R420 += 1, R421 += 1 };
  s2 -> s1 [81, 65535] { R483 += 1, R421 += 1, R83 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R483 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R485 += 1, R423 += 1, R88 += 1, R89 += 1 };
  s0 -> s2 [0, 65535] { R485 += 1, R423 += 1, R87 += 1, R88 += 1 };
  s0 -> s0 [0, 65535] { R484 += 1, R485 += 1 };
  s0 -> s3 [0, 65535] { R485 += 1, R422 += 1, R423 += 1 };
  s1 -> s6 [0, 65535] { R485 += 1, R423 += 1 };
  s1 -> s1 [0, 65535] { R485 += 1, R423 += 1, R88 += 1, R89 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R485 += 1 };
  s2 -> s1 [0, 65535] { R485 += 1, R423 += 1, R88 += 1, R89 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R485 += 1, R423 += 1, R87 += 1, R88 += 1 };
  s2 -> s5 [0, 65535] { R485 += 1 };
  s3 -> s1 [0, 65535] { R485 += 1, R423 += 1, R88 += 1, R89 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R485 += 1, R423 += 1, R87 += 1, R88 += 1 };
  s3 -> s3 [0, 65535] { R485 += 1, R422 += 1, R423 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R485 += 1 };
  s6 -> s6 [0, 65535] { R485 += 1, R423 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R485 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s0 [0, 65535] { R486 += 1, R487 += 1 };
  s0 -> s1 [0, 65535] { R487 += 1, R425 += 1 };
  s0 -> s2 [0, 65535] { R487 += 1, R424 += 1, R425 += 1 };
  s1 -> s1 [0, 65535] { R487 += 1, R425 += 1 };
  s1 -> s4 [0, 65535] { R487 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R487 += 1, R425 += 1 };
  s2 -> s2 [0, 65535] { R487 += 1, R424 += 1, R425 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R487 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R489 += 1, R444 += 1, R445 += 1 };
  s0 -> s0 [0, 65535] { R488 += 1, R489 += 1 };
  s0 -> s2 [0, 65535] { R489 += 1, R445 += 1, R18 += 1 };
  s1 -> s1 [0, 65535] { R489 += 1, R444 += 1, R445 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R489 += 1, R445 += 1, R18 += 1 };
  s2 -> s3 [0, 65535] { R489 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R489 += 1, R445 += 1, R18 += 1 };
  s3 -> s3 [0, 65535] { R489 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 72] { R491 += 1, R447 += 1 };
  s0 -> s0 [0, 65535] { R490 += 1, R491 += 1 };
  s0 -> s2 [0, 65535] { R491 += 1, R446 += 1, R447 += 1 };
  s0 -> s3 [73, 73] { R491 += 1, R447 += 1 };
  s0 -> s4 [73, 73] { R491 += 1, R447 += 1 };
  s0 -> s5 [77, 77] { R491 += 1, R447 += 1 };
  s0 -> s1 [78, 65535] { R491 += 1, R447 += 1 };
  s1 -> s1 [0, 72] { R491 += 1, R447 += 1 };
  s1 -> s3 [73, 73] { R491 += 1, R447 += 1 };
  s1 -> s4 [73, 73] { R491 += 1, R447 += 1 };
  s1 -> s5 [77, 77] { R491 += 1, R447 += 1 };
  s1 -> s1 [78, 65535] { R491 += 1, R447 += 1 };
  s2 -> s1 [0, 72] { R491 += 1, R447 += 1 };
  s2 -> s2 [0, 65535] { R491 += 1, R446 += 1, R447 += 1 };
  s2 -> s3 [73, 73] { R491 += 1, R447 += 1 };
  s2 -> s4 [73, 73] { R491 += 1, R447 += 1 };
  s2 -> s5 [77, 77] { R491 += 1, R447 += 1 };
  s2 -> s1 [78, 65535] { R491 += 1, R447 += 1 };
  s3 -> s3 [0, 73] { R491 += 1, R447 += 1 };
  s3 -> s7 [77, 77] { R491 += 1, R447 += 1 };
  s3 -> s3 [78, 65535] { R491 += 1, R447 += 1 };
  s5 -> s5 [0, 72] { R491 += 1, R447 += 1 };
  s5 -> s5 [0, 65535] { R491 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [73, 73] { R491 += 1, R447 += 1 };
  s5 -> s8 [73, 73] { R491 += 1, R447 += 1 };
  s5 -> s5 [77, 65535] { R491 += 1, R447 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 73] { R491 += 1, R447 += 1 };
  s7 -> s7 [0, 65535] { R491 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [77, 65535] { R491 += 1, R447 += 1 };
  s8 -> s8 [0, 65535] { R491 += 1 };
  s8 -> s6 [0, 65535];
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 72] { R493 += 1, R449 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R492 += 1, R493 += 1 };
  s0 -> s2 [0, 65535] { R493 += 1, R448 += 1, R449 += 1 };
  s0 -> s3 [73, 73] { R493 += 1, R449 += 1, R66 += 1 };
  s0 -> s4 [73, 73] { R493 += 1, R449 += 1, R66 += 1 };
  s0 -> s1 [74, 65535] { R493 += 1, R449 += 1, R66 += 1 };
  s1 -> s1 [0, 72] { R493 += 1, R449 += 1, R66 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R493 += 1 };
  s1 -> s3 [73, 73] { R493 += 1, R449 += 1, R66 += 1 };
  s1 -> s4 [73, 73] { R493 += 1, R449 += 1, R66 += 1 };
  s1 -> s1 [74, 65535] { R493 += 1, R449 += 1, R66 += 1 };
  s2 -> s1 [0, 72] { R493 += 1, R449 += 1, R66 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R493 += 1, R448 += 1, R449 += 1 };
  s2 -> s3 [73, 73] { R493 += 1, R449 += 1, R66 += 1 };
  s2 -> s4 [73, 73] { R493 += 1, R449 += 1, R66 += 1 };
  s2 -> s1 [74, 65535] { R493 += 1, R449 += 1, R66 += 1 };
  s3 -> s3 [0, 65535] { R493 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R493 += 1, R449 += 1, R66 += 1 };
  s4 -> s6 [0, 65535] { R493 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R493 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 72] { R495 += 1, R451 += 1, R68 += 1 };
  s0 -> s0 [0, 65535] { R494 += 1, R495 += 1 };
  s0 -> s2 [0, 65535] { R495 += 1, R450 += 1, R451 += 1 };
  s0 -> s3 [73, 73] { R495 += 1, R451 += 1, R68 += 1 };
  s0 -> s4 [73, 73] { R495 += 1, R451 += 1, R68 += 1 };
  s0 -> s1 [74, 65535] { R495 += 1, R451 += 1, R68 += 1 };
  s1 -> s1 [0, 72] { R495 += 1, R451 += 1, R68 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R495 += 1 };
  s1 -> s3 [73, 73] { R495 += 1, R451 += 1, R68 += 1 };
  s1 -> s4 [73, 73] { R495 += 1, R451 += 1, R68 += 1 };
  s1 -> s1 [74, 65535] { R495 += 1, R451 += 1, R68 += 1 };
  s2 -> s1 [0, 72] { R495 += 1, R451 += 1, R68 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R495 += 1, R450 += 1, R451 += 1 };
  s2 -> s3 [73, 73] { R495 += 1, R451 += 1, R68 += 1 };
  s2 -> s4 [73, 73] { R495 += 1, R451 += 1, R68 += 1 };
  s2 -> s1 [74, 65535] { R495 += 1, R451 += 1, R68 += 1 };
  s3 -> s6 [0, 65535] { R495 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R495 += 1, R451 += 1, R68 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R495 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R495 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 72] { R497 += 1, R453 += 1, R70 += 1, R71 += 1 };
  s0 -> s2 [0, 65535] { R497 += 1, R452 += 1, R453 += 1 };
  s0 -> s0 [0, 65535] { R496 += 1, R497 += 1 };
  s0 -> s3 [73, 73] { R497 += 1, R453 += 1, R70 += 1, R71 += 1 };
  s0 -> s4 [73, 73] { R497 += 1, R453 += 1, R70 += 1, R71 += 1 };
  s0 -> s1 [74, 65535] { R497 += 1, R453 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 72] { R497 += 1, R453 += 1, R70 += 1, R71 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R497 += 1 };
  s1 -> s3 [73, 73] { R497 += 1, R453 += 1, R70 += 1, R71 += 1 };
  s1 -> s4 [73, 73] { R497 += 1, R453 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [74, 65535] { R497 += 1, R453 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [0, 72] { R497 += 1, R453 += 1, R70 += 1, R71 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R497 += 1, R452 += 1, R453 += 1 };
  s2 -> s3 [73, 73] { R497 += 1, R453 += 1, R70 += 1, R71 += 1 };
  s2 -> s4 [73, 73] { R497 += 1, R453 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [74, 65535] { R497 += 1, R453 += 1, R70 += 1, R71 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R497 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R497 += 1 };
  s4 -> s4 [0, 65535] { R497 += 1, R453 += 1, R70 += 1, R71 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R497 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 72] { R499 += 1, R455 += 1, R74 += 1, R75 += 1 };
  s0 -> s2 [0, 65535] { R499 += 1, R454 += 1, R455 += 1 };
  s0 -> s0 [0, 65535] { R498 += 1, R499 += 1 };
  s0 -> s3 [73, 73] { R499 += 1, R455 += 1, R74 += 1, R75 += 1 };
  s0 -> s4 [73, 73] { R499 += 1, R455 += 1, R74 += 1, R75 += 1 };
  s0 -> s1 [74, 65535] { R499 += 1, R455 += 1, R74 += 1, R75 += 1 };
  s1 -> s1 [0, 72] { R499 += 1, R455 += 1, R74 += 1, R75 += 1 };
  s1 -> s1 [0, 65535] { R499 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R499 += 1, R455 += 1, R74 += 1, R75 += 1 };
  s1 -> s4 [73, 73] { R499 += 1, R455 += 1, R74 += 1, R75 += 1 };
  s1 -> s1 [74, 65535] { R499 += 1, R455 += 1, R74 += 1, R75 += 1 };
  s2 -> s1 [0, 72] { R499 += 1, R455 += 1, R74 += 1, R75 += 1 };
  s2 -> s2 [0, 65535] { R499 += 1, R454 += 1, R455 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R499 += 1, R455 += 1, R74 += 1, R75 += 1 };
  s2 -> s4 [73, 73] { R499 += 1, R455 += 1, R74 += 1, R75 += 1 };
  s2 -> s1 [74, 65535] { R499 += 1, R455 += 1, R74 += 1, R75 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R499 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R499 += 1, R455 += 1, R74 += 1, R75 += 1 };
  s4 -> s6 [0, 65535] { R499 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R499 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 72] { R501 += 1, R457 += 1, R80 += 1, R81 += 1 };
  s0 -> s2 [0, 72] { R501 += 1, R457 += 1, R81 += 1 };
  s0 -> s0 [0, 65535] { R500 += 1, R501 += 1 };
  s0 -> s3 [0, 65535] { R501 += 1, R456 += 1, R457 += 1 };
  s0 -> s4 [73, 73] { R501 += 1, R457 += 1, R80 += 1, R81 += 1 };
  s0 -> s5 [73, 73] { R501 += 1, R457 += 1, R81 += 1 };
  s0 -> s6 [73, 73] { R501 += 1, R457 += 1, R80 += 1, R81 += 1 };
  s0 -> s7 [73, 73] { R501 += 1, R457 += 1, R81 += 1 };
  s0 -> s2 [74, 77] { R501 += 1, R457 += 1, R81 += 1 };
  s0 -> s1 [74, 65535] { R501 += 1, R457 += 1, R80 += 1, R81 += 1 };
  s0 -> s8 [81, 81] { R501 += 1, R457 += 1, R81 += 1 };
  s0 -> s2 [82, 65535] { R501 += 1, R457 += 1, R81 += 1 };
  s1 -> s1 [0, 72] { R501 += 1, R457 += 1, R80 += 1, R81 += 1 };
  s1 -> s2 [0, 72] { R501 += 1, R457 += 1, R81 += 1 };
  s1 -> s4 [73, 73] { R501 += 1, R457 += 1, R80 += 1, R81 += 1 };
  s1 -> s5 [73, 73] { R501 += 1, R457 += 1, R81 += 1 };
  s1 -> s6 [73, 73] { R501 += 1, R457 += 1, R80 += 1, R81 += 1 };
  s1 -> s7 [73, 73] { R501 += 1, R457 += 1, R81 += 1 };
  s1 -> s2 [74, 77] { R501 += 1, R457 += 1, R81 += 1 };
  s1 -> s1 [74, 65535] { R501 += 1, R457 += 1, R80 += 1, R81 += 1 };
  s1 -> s8 [81, 81] { R501 += 1, R457 += 1, R81 += 1 };
  s1 -> s2 [82, 65535] { R501 += 1, R457 += 1, R81 += 1 };
  s2 -> s2 [0, 72] { R501 += 1, R457 += 1, R81 += 1 };
  s2 -> s5 [73, 73] { R501 += 1, R457 += 1, R81 += 1 };
  s2 -> s7 [73, 73] { R501 += 1, R457 += 1, R81 += 1 };
  s2 -> s2 [74, 77] { R501 += 1, R457 += 1, R81 += 1 };
  s2 -> s8 [81, 81] { R501 += 1, R457 += 1, R81 += 1 };
  s2 -> s2 [82, 65535] { R501 += 1, R457 += 1, R81 += 1 };
  s3 -> s1 [0, 72] { R501 += 1, R457 += 1, R80 += 1, R81 += 1 };
  s3 -> s2 [0, 72] { R501 += 1, R457 += 1, R81 += 1 };
  s3 -> s3 [0, 65535] { R501 += 1, R456 += 1, R457 += 1 };
  s3 -> s4 [73, 73] { R501 += 1, R457 += 1, R80 += 1, R81 += 1 };
  s3 -> s5 [73, 73] { R501 += 1, R457 += 1, R81 += 1 };
  s3 -> s6 [73, 73] { R501 += 1, R457 += 1, R80 += 1, R81 += 1 };
  s3 -> s7 [73, 73] { R501 += 1, R457 += 1, R81 += 1 };
  s3 -> s2 [74, 77] { R501 += 1, R457 += 1, R81 += 1 };
  s3 -> s1 [74, 65535] { R501 += 1, R457 += 1, R80 += 1, R81 += 1 };
  s3 -> s8 [81, 81] { R501 += 1, R457 += 1, R81 += 1 };
  s3 -> s2 [82, 65535] { R501 += 1, R457 += 1, R81 += 1 };
  s4 -> s5 [0, 77] { R501 += 1, R457 += 1, R81 += 1 };
  s4 -> s4 [0, 65535] { R501 += 1, R457 += 1, R80 += 1, R81 += 1 };
  s4 -> s11 [81, 81] { R501 += 1, R457 += 1, R81 += 1 };
  s4 -> s5 [82, 65535] { R501 += 1, R457 += 1, R81 += 1 };
  s5 -> s5 [0, 77] { R501 += 1, R457 += 1, R81 += 1 };
  s5 -> s11 [81, 81] { R501 += 1, R457 += 1, R81 += 1 };
  s5 -> s5 [82, 65535] { R501 += 1, R457 += 1, R81 += 1 };
  s8 -> s8 [0, 72] { R501 += 1, R457 += 1, R81 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R501 += 1 };
  s8 -> s10 [73, 73] { R501 += 1, R457 += 1 };
  s8 -> s11 [73, 73] { R501 += 1, R457 += 1 };
  s8 -> s8 [74, 77] { R501 += 1, R457 += 1, R81 += 1 };
  s8 -> s8 [74, 65535] { R501 += 1, R457 += 1 };
  s8 -> s8 [81, 65535] { R501 += 1, R457 += 1, R81 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R501 += 1 };
  s11 -> s11 [0, 77] { R501 += 1, R457 += 1, R81 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s12 [0, 65535] { R501 += 1 };
  s11 -> s11 [0, 65535] { R501 += 1, R457 += 1 };
  s11 -> s11 [81, 65535] { R501 += 1, R457 += 1, R81 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R501 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 72] { R503 += 1, R459 += 1, R84 += 1, R85 += 1 };
  s0 -> s0 [0, 65535] { R502 += 1, R503 += 1 };
  s0 -> s2 [0, 65535] { R503 += 1, R458 += 1, R459 += 1 };
  s0 -> s3 [73, 73] { R503 += 1, R459 += 1, R84 += 1, R85 += 1 };
  s0 -> s4 [73, 73] { R503 += 1, R459 += 1, R84 += 1, R85 += 1 };
  s0 -> s1 [74, 65535] { R503 += 1, R459 += 1, R84 += 1, R85 += 1 };
  s1 -> s1 [0, 72] { R503 += 1, R459 += 1, R84 += 1, R85 += 1 };
  s1 -> s1 [0, 65535] { R503 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R503 += 1, R459 += 1, R84 += 1, R85 += 1 };
  s1 -> s4 [73, 73] { R503 += 1, R459 += 1, R84 += 1, R85 += 1 };
  s1 -> s1 [74, 65535] { R503 += 1, R459 += 1, R84 += 1, R85 += 1 };
  s2 -> s1 [0, 72] { R503 += 1, R459 += 1, R84 += 1, R85 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R503 += 1, R458 += 1, R459 += 1 };
  s2 -> s3 [73, 73] { R503 += 1, R459 += 1, R84 += 1, R85 += 1 };
  s2 -> s4 [73, 73] { R503 += 1, R459 += 1, R84 += 1, R85 += 1 };
  s2 -> s1 [74, 65535] { R503 += 1, R459 += 1, R84 += 1, R85 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R503 += 1, R459 += 1, R84 += 1, R85 += 1 };
  s3 -> s6 [0, 65535] { R503 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R503 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R503 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 72] { R505 += 1, R461 += 1, R402 += 1, R403 += 1 };
  s0 -> s2 [0, 72] { R505 += 1, R461 += 1, R403 += 1 };
  s0 -> s3 [0, 65535] { R505 += 1, R460 += 1, R461 += 1 };
  s0 -> s0 [0, 65535] { R504 += 1, R505 += 1 };
  s0 -> s4 [73, 73] { R505 += 1, R461 += 1, R402 += 1, R403 += 1 };
  s0 -> s5 [73, 73] { R505 += 1, R461 += 1, R402 += 1, R403 += 1 };
  s0 -> s6 [73, 73] { R505 += 1, R461 += 1, R403 += 1 };
  s0 -> s7 [73, 73] { R505 += 1, R461 += 1, R403 += 1 };
  s0 -> s2 [74, 76] { R505 += 1, R461 += 1, R403 += 1 };
  s0 -> s1 [74, 65535] { R505 += 1, R461 += 1, R402 += 1, R403 += 1 };
  s0 -> s8 [77, 77] { R505 += 1, R461 += 1, R403 += 1 };
  s0 -> s2 [82, 65535] { R505 += 1, R461 += 1, R403 += 1 };
  s1 -> s1 [0, 72] { R505 += 1, R461 += 1, R402 += 1, R403 += 1 };
  s1 -> s2 [0, 72] { R505 += 1, R461 += 1, R403 += 1 };
  s1 -> s4 [73, 73] { R505 += 1, R461 += 1, R402 += 1, R403 += 1 };
  s1 -> s5 [73, 73] { R505 += 1, R461 += 1, R402 += 1, R403 += 1 };
  s1 -> s6 [73, 73] { R505 += 1, R461 += 1, R403 += 1 };
  s1 -> s7 [73, 73] { R505 += 1, R461 += 1, R403 += 1 };
  s1 -> s2 [74, 76] { R505 += 1, R461 += 1, R403 += 1 };
  s1 -> s1 [74, 65535] { R505 += 1, R461 += 1, R402 += 1, R403 += 1 };
  s1 -> s8 [77, 77] { R505 += 1, R461 += 1, R403 += 1 };
  s1 -> s2 [82, 65535] { R505 += 1, R461 += 1, R403 += 1 };
  s2 -> s2 [0, 72] { R505 += 1, R461 += 1, R403 += 1 };
  s2 -> s6 [73, 73] { R505 += 1, R461 += 1 };
  s2 -> s7 [73, 73] { R505 += 1, R461 += 1 };
  s2 -> s2 [74, 76] { R505 += 1, R461 += 1, R403 += 1 };
  s2 -> s2 [74, 65535] { R505 += 1, R461 += 1 };
  s2 -> s8 [77, 77] { R505 += 1, R461 += 1, R403 += 1 };
  s2 -> s2 [82, 65535] { R505 += 1, R461 += 1, R403 += 1 };
  s3 -> s1 [0, 72] { R505 += 1, R461 += 1, R402 += 1, R403 += 1 };
  s3 -> s2 [0, 72] { R505 += 1, R461 += 1, R403 += 1 };
  s3 -> s3 [0, 65535] { R505 += 1, R460 += 1, R461 += 1 };
  s3 -> s4 [73, 73] { R505 += 1, R461 += 1, R402 += 1, R403 += 1 };
  s3 -> s5 [73, 73] { R505 += 1, R461 += 1, R402 += 1, R403 += 1 };
  s3 -> s6 [73, 73] { R505 += 1, R461 += 1, R403 += 1 };
  s3 -> s7 [73, 73] { R505 += 1, R461 += 1, R403 += 1 };
  s3 -> s2 [74, 76] { R505 += 1, R461 += 1, R403 += 1 };
  s3 -> s1 [74, 65535] { R505 += 1, R461 += 1, R402 += 1, R403 += 1 };
  s3 -> s8 [77, 77] { R505 += 1, R461 += 1, R403 += 1 };
  s3 -> s2 [82, 65535] { R505 += 1, R461 += 1, R403 += 1 };
  s5 -> s7 [0, 76] { R505 += 1, R461 += 1, R403 += 1 };
  s5 -> s5 [0, 65535] { R505 += 1, R461 += 1, R402 += 1, R403 += 1 };
  s5 -> s11 [77, 77] { R505 += 1, R461 += 1, R403 += 1 };
  s5 -> s7 [82, 65535] { R505 += 1, R461 += 1, R403 += 1 };
  s7 -> s7 [0, 76] { R505 += 1, R461 += 1, R403 += 1 };
  s7 -> s7 [0, 65535] { R505 += 1, R461 += 1 };
  s7 -> s11 [77, 77] { R505 += 1, R461 += 1, R403 += 1 };
  s7 -> s7 [82, 65535] { R505 += 1, R461 += 1, R403 += 1 };
  s8 -> s8 [0, 72] { R505 += 1, R461 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R505 += 1 };
  s8 -> s10 [73, 73] { R505 += 1, R461 += 1 };
  s8 -> s11 [73, 73] { R505 += 1, R461 += 1 };
  s8 -> s8 [74, 65535] { R505 += 1, R461 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R505 += 1 };
  s11 -> s12 [0, 65535] { R505 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R505 += 1, R461 += 1 };
  s12 -> s12 [0, 65535] { R505 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
synchronised {  // Automata constraining P54
automaton P54_0 {
  init s0;
  s0 -> s1 [109, 109];
  accepting s1;
};
};
constraint R2 = R505 && R20 - R505 = -1 && R21 = R505 && R22 - R505 = -1 && R23 = R505 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R83 + -1*R81 - R53 = 0 && R52 + R82 + R80 = 0 && R446 = 0 && R447 = 0 && R456 = 0 && R457 = 0 && R460 = 0 && R461 = 0 && R462 = 0 && R463 = R505 && R464 = 0 && R465 = R505 && R466 = 0 && R467 = R505 && R468 = 0 && R469 = R505 && R470 = 0 && R471 = R505 && R472 = 0 && R473 = R505 && R474 = 0 && R475 = R505 && R476 = 0 && R477 = R505 && R478 = 0 && R479 = R505 && R480 = 0 && R481 = R505 && R482 = 0 && R483 = R505 && R484 = 0 && R485 = R505 && R486 = 0 && R487 = R505 && R488 = 0 && R489 = R505 && R490 = 0 && R491 = R505 && R492 = 0 && R493 = R505 && R494 = 0 && R495 = R505 && R496 = 0 && R497 = R505 && R498 = 0 && R499 = R505 && R500 = 0 && R501 = R505 && R502 = 0 && R503 = R505 && R504 = 0 && -1 < R1 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R83 + -1*R81 - R53 < 1 && 0 < R505 && (R1 != 0 || R17 = 0 || (R406 = 0 && R407 = 0)) && (R1 != 0 || R17 = 0 || (R408 = 0 && R409 = 0)) && (R1 != 0 || R17 = 0 || (R410 = 0 && R411 = 0)) && (R1 != 0 || R17 = 0 || (R412 = 0 && R413 = 0)) && (R1 != 0 || R17 = 0 || (R414 = 0 && R415 = 0)) && (R1 != 0 || R17 = 0 || (R416 = 0 && R417 = 0)) && (R1 != 0 || R17 = 0 || (R418 = 0 && R419 = 0)) && (R1 != 0 || R17 = 0 || (R420 = 0 && R421 = 0)) && (R1 != 0 || R17 = 0 || (R422 = 0 && R423 = 0)) && (R1 != 0 || R17 = 0 || (R424 = 0 && R425 = 0)) && (R48 + R79 + R76 != 0 || ((R42 + R72 + R70 != 0 || R43 + R73 + R71 + -1*R83 + -1*R81 - R53 = 0 || R53 + R83 + R81 < 1) && (R42 + R72 + R70 = 0 || R53 + R83 + R81 < 1))) && (R48 + R79 + R76 != 0 || ((R46 + R77 + R74 != 0 || R47 + R78 + R75 + -1*R83 + -1*R81 - R53 = 0 || R53 + R83 + R81 < 1) && (R46 + R77 + R74 = 0 || R53 + R83 + R81 < 1))) && (R406 != 0 || R1 = R407 || R1 < 1) && (R408 != 0 || R1 = R409 || R1 < 1) && (R410 != 0 || R1 = R411 || R1 < 1) && (R412 != 0 || R1 = R413 || R1 < 1) && (R414 != 0 || R1 = R415 || R1 < 1) && (R416 != 0 || R1 = R417 || R1 < 1) && (R418 != 0 || R1 = R419 || R1 < 1) && (R420 != 0 || R1 = R421 || R1 < 1) && (R422 != 0 || R1 = R423 || R1 < 1) && (R424 != 0 || R1 = R425 || R1 < 1) && (R18 = 0 || (R444 = 0 && R445 = 0)) && (R18 = 0 || (R448 = 0 && R449 = 0)) && (R18 = 0 || (R450 = 0 && R451 = 0)) && (R18 = 0 || (R452 = 0 && R453 = 0)) && (R18 = 0 || (R454 = 0 && R455 = 0)) && (R18 = 0 || (R458 = 0 && R459 = 0)) && (R19 = 0 || (R426 = 0 && R427 = 0)) && (R19 = 0 || (R428 = 0 && R429 = 0)) && (R19 = 0 || (R430 = 0 && R431 = 0)) && (R19 = 0 || (R432 = 0 && R433 = 0)) && (R19 = 0 || (R434 = 0 && R435 = 0)) && (R19 = 0 || (R436 = 0 && R437 = 0)) && (R19 = 0 || (R438 = 0 && R439 = 0)) && (R19 = 0 || (R440 = 0 && R441 = 0)) && (R19 = 0 || (R442 = 0 && R443 = 0)) && (R48 + R79 + R76 = 0 || (R42 + R72 + R70 = 0 && R43 + R73 + R71 + -1*R83 + -1*R81 - R53 = 0)) && (R48 + R79 + R76 = 0 || (R46 + R77 + R74 = 0 && R47 + R78 + R75 + -1*R83 + -1*R81 - R53 = 0)) && (R58 + R89 + R86 = 0 || (R56 + R87 + R84 = 0 && R57 + R88 + R85 = 0)) && (R58 + R89 + R86 = 0 || (R62 + R404 + R402 = 0 && R63 + R405 + R403 = 0)) && (R406 = 0 || R1 < 1) && (R408 = 0 || R1 < 1) && (R410 = 0 || R1 < 1) && (R412 = 0 || R1 < 1) && (R414 = 0 || R1 < 1) && (R416 = 0 || R1 < 1) && (R418 = 0 || R1 < 1) && (R420 = 0 || R1 < 1) && (R422 = 0 || R1 < 1) && (R424 = 0 || R1 < 1);
// End of Parikh automata intersection problem
