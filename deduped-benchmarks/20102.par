// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R12, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R3890, R3891, R3892, R3893, R3894, R3895, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R6436, R6437, R6438, R6439, R66, R67, R68, R69, R70, R71, R72, R7284, R7285, R7286, R7287, R7288, R7289, R73, R7498, R7499, R7500, R7501, R7502, R7503, R7504, R7505, R7506, R7507, R7508, R7509, R7510, R7511, R7512, R7513, R7514, R7515, R7516, R7517, R7518, R7519, R7520, R7521, R7522, R7523, R7524, R7525, R7526, R7527, R7528, R7529, R7530, R7531, R7532, R7533, R7534, R7535, R7536, R7537, R7538, R7539, R7540, R7541, R7542, R7543, R7544, R7545, R7546, R7547, R7548, R7549, R7550, R7551, R7552, R7553, R7554, R7555, R7556, R7557, R7558, R7559, R7560, R7561, R7562, R7563, R7564, R7565, R7566, R7567, R7568, R7569, R7570, R7571, R7572, R7573, R7574, R7575, R7576, R7577, R7578, R7579, R7580, R7581, R7582, R7583, R7584, R7585, R7586, R7587, R7588, R7589, R7590, R7591, R7592, R7593, R7594, R7595, R7596, R7597, R7598, R7599, R7600, R7601, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 72];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [73, 73];
  s0 -> s1 [74, 65535];
  s1 -> s1 [0, 72];
  s1 -> s2 [73, 73];
  s1 -> s1 [74, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s1 [0, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R25 += 1 };
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R7523 += 1, R19 += 1 };
  s0 -> s0 [0, 65535] { R7522 += 1, R7523 += 1 };
  s1 -> s1 [0, 65535] { R7523 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 72] { R7525 += 1 };
  s0 -> s0 [0, 65535] { R7524 += 1, R7525 += 1 };
  s0 -> s2 [73, 73] { R7525 += 1 };
  s0 -> s3 [73, 73] { R7525 += 1 };
  s0 -> s1 [78, 65535] { R7525 += 1 };
  s1 -> s1 [0, 72] { R7525 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R7525 += 1 };
  s1 -> s3 [73, 73] { R7525 += 1 };
  s1 -> s1 [78, 65535] { R7525 += 1 };
  s2 -> s2 [0, 73] { R7525 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [78, 65535] { R7525 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 72] { R7527 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R7526 += 1, R7527 += 1 };
  s0 -> s2 [73, 73] { R7527 += 1, R38 += 1 };
  s0 -> s3 [73, 73] { R7527 += 1, R38 += 1 };
  s0 -> s1 [74, 65535] { R7527 += 1, R38 += 1 };
  s1 -> s1 [0, 72] { R7527 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R7527 += 1, R38 += 1 };
  s1 -> s3 [73, 73] { R7527 += 1, R38 += 1 };
  s1 -> s1 [74, 65535] { R7527 += 1, R38 += 1 };
  s2 -> s2 [0, 65535] { R7527 += 1, R38 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 72] { R7529 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R7528 += 1, R7529 += 1 };
  s0 -> s2 [73, 73] { R7529 += 1, R40 += 1 };
  s0 -> s3 [73, 73] { R7529 += 1, R40 += 1 };
  s0 -> s1 [74, 65535] { R7529 += 1, R40 += 1 };
  s1 -> s1 [0, 72] { R7529 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R7529 += 1, R40 += 1 };
  s1 -> s3 [73, 73] { R7529 += 1, R40 += 1 };
  s1 -> s1 [74, 65535] { R7529 += 1, R40 += 1 };
  s2 -> s2 [0, 65535] { R7529 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 72] { R7531 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R7530 += 1, R7531 += 1 };
  s0 -> s2 [73, 73] { R7531 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [73, 73] { R7531 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [74, 65535] { R7531 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 72] { R7531 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R7531 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [73, 73] { R7531 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [74, 65535] { R7531 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7531 += 1, R42 += 1, R43 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 72] { R7533 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R7532 += 1, R7533 += 1 };
  s0 -> s2 [73, 73] { R7533 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [73, 73] { R7533 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [74, 65535] { R7533 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 72] { R7533 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R7533 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [73, 73] { R7533 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [74, 65535] { R7533 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7533 += 1, R46 += 1, R47 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 72] { R7535 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R7534 += 1, R7535 += 1 };
  s0 -> s2 [73, 73] { R7535 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [73, 73] { R7535 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [74, 65535] { R7535 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 72] { R7535 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R7535 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [73, 73] { R7535 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [74, 65535] { R7535 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7535 += 1, R52 += 1, R53 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 72] { R7537 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R7536 += 1, R7537 += 1 };
  s0 -> s2 [73, 73] { R7537 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [73, 73] { R7537 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [74, 65535] { R7537 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 72] { R7537 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R7537 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [73, 73] { R7537 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [74, 65535] { R7537 += 1, R56 += 1, R57 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R7537 += 1, R56 += 1, R57 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 72] { R7539 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R7538 += 1, R7539 += 1 };
  s0 -> s2 [73, 73] { R7539 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [73, 73] { R7539 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [74, 65535] { R7539 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 72] { R7539 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R7539 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [73, 73] { R7539 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [74, 65535] { R7539 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535] { R7539 += 1, R62 += 1, R63 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 72] { R7559 += 1 };
  s0 -> s0 [0, 65535] { R7558 += 1, R7559 += 1 };
  s0 -> s2 [73, 73] { R7559 += 1 };
  s0 -> s1 [74, 65535] { R7559 += 1 };
  s1 -> s1 [0, 72] { R7559 += 1 };
  s1 -> s2 [73, 73] { R7559 += 1 };
  s1 -> s1 [74, 65535] { R7559 += 1 };
  s2 -> s2 [0, 65535] { R7559 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R7560 += 1, R7561 += 1 };
  s0 -> s1 [0, 65535] { R7561 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R7561 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 72] { R7563 += 1 };
  s0 -> s0 [0, 65535] { R7562 += 1, R7563 += 1 };
  s0 -> s2 [0, 65535] { R7563 += 1, R8 += 1 };
  s0 -> s3 [73, 73] { R7563 += 1 };
  s0 -> s1 [74, 65535] { R7563 += 1 };
  s1 -> s1 [0, 72] { R7563 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [73, 73] { R7563 += 1 };
  s1 -> s1 [74, 65535] { R7563 += 1 };
  s2 -> s1 [0, 72] { R7563 += 1 };
  s2 -> s2 [0, 65535] { R7563 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [73, 73] { R7563 += 1 };
  s2 -> s1 [74, 65535] { R7563 += 1 };
  s3 -> s3 [0, 65535] { R7563 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 72] { R7565 += 1, R7503 += 1 };
  s0 -> s2 [0, 65535] { R7565 += 1, R7502 += 1, R7503 += 1 };
  s0 -> s0 [0, 65535] { R7564 += 1, R7565 += 1 };
  s0 -> s1 [74, 65535] { R7565 += 1, R7503 += 1 };
  s1 -> s1 [0, 72] { R7565 += 1, R7503 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R7565 += 1 };
  s1 -> s1 [74, 65535] { R7565 += 1, R7503 += 1 };
  s2 -> s1 [0, 72] { R7565 += 1, R7503 += 1 };
  s2 -> s2 [0, 65535] { R7565 += 1, R7502 += 1, R7503 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [74, 65535] { R7565 += 1, R7503 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s0 [0, 65535] { R7566 += 1, R7567 += 1 };
  s0 -> s1 [0, 65535] { R7567 += 1, R7505 += 1, R17 += 1 };
  s0 -> s2 [0, 65535] { R7567 += 1, R7504 += 1, R7505 += 1 };
  s1 -> s4 [0, 65535] { R7567 += 1 };
  s1 -> s1 [0, 65535] { R7567 += 1, R7505 += 1, R17 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R7567 += 1, R7505 += 1, R17 += 1 };
  s2 -> s2 [0, 65535] { R7567 += 1, R7504 += 1, R7505 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7567 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 73] { R7569 += 1, R7507 += 1 };
  s0 -> s0 [0, 65535] { R7568 += 1, R7569 += 1 };
  s0 -> s2 [0, 65535] { R7569 += 1, R7506 += 1, R7507 += 1 };
  s0 -> s1 [77, 65535] { R7569 += 1, R7507 += 1 };
  s1 -> s1 [0, 73] { R7569 += 1, R7507 += 1 };
  s1 -> s1 [0, 65535] { R7569 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [77, 65535] { R7569 += 1, R7507 += 1 };
  s2 -> s1 [0, 73] { R7569 += 1, R7507 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R7569 += 1, R7506 += 1, R7507 += 1 };
  s2 -> s1 [77, 65535] { R7569 += 1, R7507 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R7571 += 1, R7509 += 1, R67 += 1 };
  s0 -> s0 [0, 65535] { R7570 += 1, R7571 += 1 };
  s0 -> s2 [0, 65535] { R7571 += 1, R7508 += 1, R7509 += 1 };
  s1 -> s4 [0, 65535] { R7571 += 1 };
  s1 -> s1 [0, 65535] { R7571 += 1, R7509 += 1, R67 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R7571 += 1, R7509 += 1, R67 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R7571 += 1, R7508 += 1, R7509 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7571 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 76] { R7573 += 1, R7511 += 1 };
  s0 -> s2 [0, 65535] { R7573 += 1, R7510 += 1, R7511 += 1 };
  s0 -> s3 [0, 65535] { R7573 += 1, R7511 += 1, R69 += 1 };
  s0 -> s0 [0, 65535] { R7572 += 1, R7573 += 1 };
  s0 -> s1 [78, 65535] { R7573 += 1, R7511 += 1 };
  s1 -> s1 [0, 76] { R7573 += 1, R7511 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R7573 += 1 };
  s1 -> s1 [78, 65535] { R7573 += 1, R7511 += 1 };
  s2 -> s1 [0, 76] { R7573 += 1, R7511 += 1 };
  s2 -> s2 [0, 65535] { R7573 += 1, R7510 += 1, R7511 += 1 };
  s2 -> s3 [0, 65535] { R7573 += 1, R7511 += 1, R69 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [78, 65535] { R7573 += 1, R7511 += 1 };
  s3 -> s1 [0, 76] { R7573 += 1, R7511 += 1 };
  s3 -> s3 [0, 65535] { R7573 += 1, R7511 += 1, R69 += 1 };
  s3 -> s4 [0, 65535] { R7573 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [78, 65535] { R7573 += 1, R7511 += 1 };
  s4 -> s4 [0, 65535] { R7573 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 76] { R7575 += 1, R7513 += 1, R73 += 1 };
  s0 -> s2 [0, 65535] { R7575 += 1, R7513 += 1, R72 += 1, R73 += 1 };
  s0 -> s0 [0, 65535] { R7574 += 1, R7575 += 1 };
  s0 -> s3 [0, 65535] { R7575 += 1, R7512 += 1, R7513 += 1 };
  s0 -> s1 [78, 65535] { R7575 += 1, R7513 += 1, R73 += 1 };
  s1 -> s1 [0, 76] { R7575 += 1, R7513 += 1, R73 += 1 };
  s1 -> s5 [0, 65535] { R7575 += 1 };
  s1 -> s1 [0, 65535] { R7575 += 1, R7513 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [78, 65535] { R7575 += 1, R7513 += 1, R73 += 1 };
  s2 -> s1 [0, 76] { R7575 += 1, R7513 += 1, R73 += 1 };
  s2 -> s5 [0, 65535] { R7575 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R7575 += 1, R7513 += 1, R72 += 1, R73 += 1 };
  s2 -> s1 [78, 65535] { R7575 += 1, R7513 += 1, R73 += 1 };
  s3 -> s1 [0, 76] { R7575 += 1, R7513 += 1, R73 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R7575 += 1, R7513 += 1, R72 += 1, R73 += 1 };
  s3 -> s3 [0, 65535] { R7575 += 1, R7512 += 1, R7513 += 1 };
  s3 -> s1 [78, 65535] { R7575 += 1, R7513 += 1, R73 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R7575 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R7577 += 1, R7514 += 1, R7515 += 1 };
  s0 -> s2 [0, 65535] { R7577 += 1, R7515 += 1, R3894 += 1, R3895 += 1 };
  s0 -> s3 [0, 65535] { R7577 += 1, R7515 += 1 };
  s0 -> s0 [0, 65535] { R7576 += 1, R7577 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R7577 += 1, R7514 += 1, R7515 += 1 };
  s1 -> s2 [0, 65535] { R7577 += 1, R7515 += 1, R3894 += 1, R3895 += 1 };
  s1 -> s3 [0, 65535] { R7577 += 1, R7515 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R7577 += 1 };
  s2 -> s2 [0, 65535] { R7577 += 1, R7515 += 1, R3894 += 1, R3895 += 1 };
  s2 -> s3 [0, 65535] { R7577 += 1, R7515 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R7577 += 1 };
  s3 -> s3 [0, 65535] { R7577 += 1, R7515 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R7577 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 77] { R7579 += 1, R7517 += 1, R6439 += 1 };
  s0 -> s2 [0, 65535] { R7579 += 1, R7516 += 1, R7517 += 1 };
  s0 -> s0 [0, 65535] { R7578 += 1, R7579 += 1 };
  s0 -> s3 [81, 81] { R7579 += 1, R7517 += 1, R6439 += 1 };
  s0 -> s1 [82, 65535] { R7579 += 1, R7517 += 1, R6439 += 1 };
  s1 -> s1 [0, 77] { R7579 += 1, R7517 += 1, R6439 += 1 };
  s1 -> s3 [81, 81] { R7579 += 1, R7517 += 1, R6439 += 1 };
  s1 -> s1 [82, 65535] { R7579 += 1, R7517 += 1, R6439 += 1 };
  s2 -> s1 [0, 77] { R7579 += 1, R7517 += 1, R6439 += 1 };
  s2 -> s2 [0, 65535] { R7579 += 1, R7516 += 1, R7517 += 1 };
  s2 -> s3 [81, 81] { R7579 += 1, R7517 += 1, R6439 += 1 };
  s2 -> s1 [82, 65535] { R7579 += 1, R7517 += 1, R6439 += 1 };
  s3 -> s3 [0, 77] { R7579 += 1, R7517 += 1, R6439 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7579 += 1, R7517 += 1 };
  s3 -> s5 [0, 65535] { R7579 += 1 };
  s3 -> s3 [81, 65535] { R7579 += 1, R7517 += 1, R6439 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R7579 += 1 };
  accepting s3, s4, s5;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R7581 += 1, R7519 += 1 };
  s0 -> s0 [0, 65535] { R7580 += 1, R7581 += 1 };
  s0 -> s2 [0, 65535] { R7581 += 1, R7518 += 1, R7519 += 1 };
  s1 -> s1 [0, 65535] { R7581 += 1, R7519 += 1 };
  s1 -> s4 [0, 65535] { R7581 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R7581 += 1, R7519 += 1 };
  s2 -> s2 [0, 65535] { R7581 += 1, R7518 += 1, R7519 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7581 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 77] { R7583 += 1, R7521 += 1, R7501 += 1 };
  s0 -> s1 [0, 65535] { R7583 += 1, R7521 += 1 };
  s0 -> s2 [0, 65535] { R7583 += 1, R7520 += 1, R7521 += 1 };
  s0 -> s0 [0, 65535] { R7582 += 1, R7583 += 1 };
  s0 -> s1 [82, 65535] { R7583 += 1, R7521 += 1, R7501 += 1 };
  s1 -> s1 [0, 77] { R7583 += 1, R7521 += 1, R7501 += 1 };
  s1 -> s1 [0, 65535] { R7583 += 1, R7521 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R7583 += 1 };
  s1 -> s1 [82, 65535] { R7583 += 1, R7521 += 1, R7501 += 1 };
  s2 -> s1 [0, 77] { R7583 += 1, R7521 += 1, R7501 += 1 };
  s2 -> s1 [0, 65535] { R7583 += 1, R7521 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R7583 += 1, R7520 += 1, R7521 += 1 };
  s2 -> s1 [82, 65535] { R7583 += 1, R7521 += 1, R7501 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7583 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s0 [0, 65535] { R7584 += 1, R7585 += 1 };
  s0 -> s1 [0, 65535] { R7585 += 1, R7540 += 1, R7541 += 1 };
  s0 -> s2 [0, 65535] { R7585 += 1, R7541 += 1, R18 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R7585 += 1, R7540 += 1, R7541 += 1 };
  s1 -> s2 [0, 65535] { R7585 += 1, R7541 += 1, R18 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R7585 += 1, R7541 += 1, R18 += 1 };
  s2 -> s4 [0, 65535] { R7585 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7585 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 72] { R7587 += 1, R7543 += 1 };
  s0 -> s2 [0, 65535] { R7587 += 1, R7542 += 1, R7543 += 1 };
  s0 -> s0 [0, 65535] { R7586 += 1, R7587 += 1 };
  s0 -> s3 [73, 73] { R7587 += 1, R7543 += 1 };
  s0 -> s4 [73, 73] { R7587 += 1, R7543 += 1 };
  s0 -> s5 [77, 77] { R7587 += 1, R7543 += 1 };
  s0 -> s1 [78, 65535] { R7587 += 1, R7543 += 1 };
  s1 -> s1 [0, 72] { R7587 += 1, R7543 += 1 };
  s1 -> s3 [73, 73] { R7587 += 1, R7543 += 1 };
  s1 -> s4 [73, 73] { R7587 += 1, R7543 += 1 };
  s1 -> s5 [77, 77] { R7587 += 1, R7543 += 1 };
  s1 -> s1 [78, 65535] { R7587 += 1, R7543 += 1 };
  s2 -> s1 [0, 72] { R7587 += 1, R7543 += 1 };
  s2 -> s2 [0, 65535] { R7587 += 1, R7542 += 1, R7543 += 1 };
  s2 -> s3 [73, 73] { R7587 += 1, R7543 += 1 };
  s2 -> s4 [73, 73] { R7587 += 1, R7543 += 1 };
  s2 -> s5 [77, 77] { R7587 += 1, R7543 += 1 };
  s2 -> s1 [78, 65535] { R7587 += 1, R7543 += 1 };
  s4 -> s4 [0, 73] { R7587 += 1, R7543 += 1 };
  s4 -> s7 [77, 77] { R7587 += 1, R7543 += 1 };
  s4 -> s4 [78, 65535] { R7587 += 1, R7543 += 1 };
  s5 -> s5 [0, 72] { R7587 += 1, R7543 += 1 };
  s5 -> s5 [0, 65535] { R7587 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [73, 73] { R7587 += 1, R7543 += 1 };
  s5 -> s8 [73, 73] { R7587 += 1, R7543 += 1 };
  s5 -> s5 [77, 65535] { R7587 += 1, R7543 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 73] { R7587 += 1, R7543 += 1 };
  s7 -> s7 [0, 65535] { R7587 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [77, 65535] { R7587 += 1, R7543 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R7587 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 72] { R7589 += 1, R7545 += 1, R66 += 1 };
  s0 -> s2 [0, 65535] { R7589 += 1, R7544 += 1, R7545 += 1 };
  s0 -> s0 [0, 65535] { R7588 += 1, R7589 += 1 };
  s0 -> s3 [73, 73] { R7589 += 1, R7545 += 1, R66 += 1 };
  s0 -> s4 [73, 73] { R7589 += 1, R7545 += 1, R66 += 1 };
  s0 -> s1 [74, 65535] { R7589 += 1, R7545 += 1, R66 += 1 };
  s1 -> s1 [0, 72] { R7589 += 1, R7545 += 1, R66 += 1 };
  s1 -> s1 [0, 65535] { R7589 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [73, 73] { R7589 += 1, R7545 += 1, R66 += 1 };
  s1 -> s4 [73, 73] { R7589 += 1, R7545 += 1, R66 += 1 };
  s1 -> s1 [74, 65535] { R7589 += 1, R7545 += 1, R66 += 1 };
  s2 -> s1 [0, 72] { R7589 += 1, R7545 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R7589 += 1, R7544 += 1, R7545 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [73, 73] { R7589 += 1, R7545 += 1, R66 += 1 };
  s2 -> s4 [73, 73] { R7589 += 1, R7545 += 1, R66 += 1 };
  s2 -> s1 [74, 65535] { R7589 += 1, R7545 += 1, R66 += 1 };
  s3 -> s3 [0, 65535] { R7589 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R7589 += 1, R7545 += 1, R66 += 1 };
  s4 -> s5 [0, 65535] { R7589 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R7589 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 72] { R7591 += 1, R7547 += 1, R68 += 1 };
  s0 -> s0 [0, 65535] { R7590 += 1, R7591 += 1 };
  s0 -> s2 [0, 65535] { R7591 += 1, R7546 += 1, R7547 += 1 };
  s0 -> s3 [73, 73] { R7591 += 1, R7547 += 1, R68 += 1 };
  s0 -> s4 [73, 73] { R7591 += 1, R7547 += 1, R68 += 1 };
  s0 -> s1 [74, 65535] { R7591 += 1, R7547 += 1, R68 += 1 };
  s1 -> s1 [0, 72] { R7591 += 1, R7547 += 1, R68 += 1 };
  s1 -> s1 [0, 65535] { R7591 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R7591 += 1, R7547 += 1, R68 += 1 };
  s1 -> s4 [73, 73] { R7591 += 1, R7547 += 1, R68 += 1 };
  s1 -> s1 [74, 65535] { R7591 += 1, R7547 += 1, R68 += 1 };
  s2 -> s1 [0, 72] { R7591 += 1, R7547 += 1, R68 += 1 };
  s2 -> s2 [0, 65535] { R7591 += 1, R7546 += 1, R7547 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R7591 += 1, R7547 += 1, R68 += 1 };
  s2 -> s4 [73, 73] { R7591 += 1, R7547 += 1, R68 += 1 };
  s2 -> s1 [74, 65535] { R7591 += 1, R7547 += 1, R68 += 1 };
  s3 -> s3 [0, 65535] { R7591 += 1, R7547 += 1, R68 += 1 };
  s3 -> s6 [0, 65535] { R7591 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R7591 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7591 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 72] { R7593 += 1, R7549 += 1, R70 += 1, R71 += 1 };
  s0 -> s2 [0, 65535] { R7593 += 1, R7548 += 1, R7549 += 1 };
  s0 -> s0 [0, 65535] { R7592 += 1, R7593 += 1 };
  s0 -> s3 [73, 73] { R7593 += 1, R7549 += 1, R70 += 1, R71 += 1 };
  s0 -> s4 [73, 73] { R7593 += 1, R7549 += 1, R70 += 1, R71 += 1 };
  s0 -> s1 [74, 65535] { R7593 += 1, R7549 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 72] { R7593 += 1, R7549 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 65535] { R7593 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [73, 73] { R7593 += 1, R7549 += 1, R70 += 1, R71 += 1 };
  s1 -> s4 [73, 73] { R7593 += 1, R7549 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [74, 65535] { R7593 += 1, R7549 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [0, 72] { R7593 += 1, R7549 += 1, R70 += 1, R71 += 1 };
  s2 -> s2 [0, 65535] { R7593 += 1, R7548 += 1, R7549 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [73, 73] { R7593 += 1, R7549 += 1, R70 += 1, R71 += 1 };
  s2 -> s4 [73, 73] { R7593 += 1, R7549 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [74, 65535] { R7593 += 1, R7549 += 1, R70 += 1, R71 += 1 };
  s3 -> s3 [0, 65535] { R7593 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R7593 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R7593 += 1, R7549 += 1, R70 += 1, R71 += 1 };
  s5 -> s5 [0, 65535] { R7593 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 72] { R7595 += 1, R7551 += 1, R3890 += 1, R3891 += 1 };
  s0 -> s2 [0, 72] { R7595 += 1, R7551 += 1, R3891 += 1, R3892 += 1 };
  s0 -> s0 [0, 65535] { R7594 += 1, R7595 += 1 };
  s0 -> s3 [0, 65535] { R7595 += 1, R7550 += 1, R7551 += 1 };
  s0 -> s4 [73, 73] { R7595 += 1, R7551 += 1, R3891 += 1, R3892 += 1 };
  s0 -> s5 [73, 73] { R7595 += 1, R7551 += 1, R3890 += 1, R3891 += 1 };
  s0 -> s6 [73, 73] { R7595 += 1, R7551 += 1, R3890 += 1, R3891 += 1 };
  s0 -> s7 [73, 73] { R7595 += 1, R7551 += 1, R3891 += 1, R3892 += 1 };
  s0 -> s1 [74, 65535] { R7595 += 1, R7551 += 1, R3890 += 1, R3891 += 1 };
  s0 -> s2 [74, 65535] { R7595 += 1, R7551 += 1, R3891 += 1, R3892 += 1 };
  s1 -> s1 [0, 72] { R7595 += 1, R7551 += 1, R3890 += 1, R3891 += 1 };
  s1 -> s2 [0, 72] { R7595 += 1, R7551 += 1, R3891 += 1, R3892 += 1 };
  s1 -> s4 [73, 73] { R7595 += 1, R7551 += 1, R3891 += 1, R3892 += 1 };
  s1 -> s5 [73, 73] { R7595 += 1, R7551 += 1, R3890 += 1, R3891 += 1 };
  s1 -> s6 [73, 73] { R7595 += 1, R7551 += 1, R3890 += 1, R3891 += 1 };
  s1 -> s7 [73, 73] { R7595 += 1, R7551 += 1, R3891 += 1, R3892 += 1 };
  s1 -> s1 [74, 65535] { R7595 += 1, R7551 += 1, R3890 += 1, R3891 += 1 };
  s1 -> s2 [74, 65535] { R7595 += 1, R7551 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s2 [0, 72] { R7595 += 1, R7551 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s2 [0, 65535] { R7595 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s4 [73, 73] { R7595 += 1, R7551 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s7 [73, 73] { R7595 += 1, R7551 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s2 [74, 65535] { R7595 += 1, R7551 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s1 [0, 72] { R7595 += 1, R7551 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s2 [0, 72] { R7595 += 1, R7551 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s3 [0, 65535] { R7595 += 1, R7550 += 1, R7551 += 1 };
  s3 -> s4 [73, 73] { R7595 += 1, R7551 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s5 [73, 73] { R7595 += 1, R7551 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s6 [73, 73] { R7595 += 1, R7551 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s7 [73, 73] { R7595 += 1, R7551 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s1 [74, 65535] { R7595 += 1, R7551 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s2 [74, 65535] { R7595 += 1, R7551 += 1, R3891 += 1, R3892 += 1 };
  s4 -> s4 [0, 65535] { R7595 += 1, R7551 += 1, R3891 += 1, R3892 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s9 [0, 65535] { R7595 += 1 };
  s5 -> s4 [0, 65535] { R7595 += 1, R7551 += 1, R3891 += 1, R3892 += 1 };
  s5 -> s5 [0, 65535] { R7595 += 1, R7551 += 1, R3890 += 1, R3891 += 1 };
  s7 -> s7 [0, 65535] { R7595 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R7595 += 1 };
  accepting s4, s8, s2, s9, s7;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 72] { R7597 += 1, R7553 += 1, R6437 += 1 };
  s0 -> s2 [0, 72] { R7597 += 1, R7553 += 1, R6436 += 1, R6437 += 1 };
  s0 -> s3 [0, 65535] { R7597 += 1, R7552 += 1, R7553 += 1 };
  s0 -> s0 [0, 65535] { R7596 += 1, R7597 += 1 };
  s0 -> s4 [73, 73] { R7597 += 1, R7553 += 1, R6437 += 1 };
  s0 -> s5 [73, 73] { R7597 += 1, R7553 += 1, R6437 += 1 };
  s0 -> s6 [73, 73] { R7597 += 1, R7553 += 1, R6436 += 1, R6437 += 1 };
  s0 -> s7 [73, 73] { R7597 += 1, R7553 += 1, R6436 += 1, R6437 += 1 };
  s0 -> s1 [74, 77] { R7597 += 1, R7553 += 1, R6437 += 1 };
  s0 -> s2 [74, 65535] { R7597 += 1, R7553 += 1, R6436 += 1, R6437 += 1 };
  s0 -> s1 [82, 65535] { R7597 += 1, R7553 += 1, R6437 += 1 };
  s1 -> s1 [0, 72] { R7597 += 1, R7553 += 1, R6437 += 1 };
  s1 -> s1 [0, 65535] { R7597 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s4 [73, 73] { R7597 += 1, R7553 += 1, R6437 += 1 };
  s1 -> s5 [73, 73] { R7597 += 1, R7553 += 1, R6437 += 1 };
  s1 -> s1 [74, 77] { R7597 += 1, R7553 += 1, R6437 += 1 };
  s1 -> s1 [82, 65535] { R7597 += 1, R7553 += 1, R6437 += 1 };
  s2 -> s1 [0, 72] { R7597 += 1, R7553 += 1, R6437 += 1 };
  s2 -> s2 [0, 72] { R7597 += 1, R7553 += 1, R6436 += 1, R6437 += 1 };
  s2 -> s4 [73, 73] { R7597 += 1, R7553 += 1, R6437 += 1 };
  s2 -> s5 [73, 73] { R7597 += 1, R7553 += 1, R6437 += 1 };
  s2 -> s6 [73, 73] { R7597 += 1, R7553 += 1, R6436 += 1, R6437 += 1 };
  s2 -> s7 [73, 73] { R7597 += 1, R7553 += 1, R6436 += 1, R6437 += 1 };
  s2 -> s1 [74, 77] { R7597 += 1, R7553 += 1, R6437 += 1 };
  s2 -> s2 [74, 65535] { R7597 += 1, R7553 += 1, R6436 += 1, R6437 += 1 };
  s2 -> s1 [82, 65535] { R7597 += 1, R7553 += 1, R6437 += 1 };
  s3 -> s1 [0, 72] { R7597 += 1, R7553 += 1, R6437 += 1 };
  s3 -> s2 [0, 72] { R7597 += 1, R7553 += 1, R6436 += 1, R6437 += 1 };
  s3 -> s3 [0, 65535] { R7597 += 1, R7552 += 1, R7553 += 1 };
  s3 -> s4 [73, 73] { R7597 += 1, R7553 += 1, R6437 += 1 };
  s3 -> s5 [73, 73] { R7597 += 1, R7553 += 1, R6437 += 1 };
  s3 -> s6 [73, 73] { R7597 += 1, R7553 += 1, R6436 += 1, R6437 += 1 };
  s3 -> s7 [73, 73] { R7597 += 1, R7553 += 1, R6436 += 1, R6437 += 1 };
  s3 -> s1 [74, 77] { R7597 += 1, R7553 += 1, R6437 += 1 };
  s3 -> s2 [74, 65535] { R7597 += 1, R7553 += 1, R6436 += 1, R6437 += 1 };
  s3 -> s1 [82, 65535] { R7597 += 1, R7553 += 1, R6437 += 1 };
  s4 -> s4 [0, 65535] { R7597 += 1 };
  s4 -> s8 [0, 65535];
  s5 -> s5 [0, 77] { R7597 += 1, R7553 += 1, R6437 += 1 };
  s5 -> s5 [0, 65535] { R7597 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s5 [82, 65535] { R7597 += 1, R7553 += 1, R6437 += 1 };
  s7 -> s5 [0, 77] { R7597 += 1, R7553 += 1, R6437 += 1 };
  s7 -> s7 [0, 65535] { R7597 += 1, R7553 += 1, R6436 += 1, R6437 += 1 };
  s7 -> s5 [82, 65535] { R7597 += 1, R7553 += 1, R6437 += 1 };
  s8 -> s8 [0, 65535];
  accepting s1, s4, s5, s8;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 72] { R7599 += 1, R7555 += 1, R7284 += 1, R7285 += 1 };
  s0 -> s2 [0, 72] { R7599 += 1, R7555 += 1, R7285 += 1, R7286 += 1 };
  s0 -> s0 [0, 65535] { R7598 += 1, R7599 += 1 };
  s0 -> s3 [0, 65535] { R7599 += 1, R7554 += 1, R7555 += 1 };
  s0 -> s4 [73, 73] { R7599 += 1, R7555 += 1, R7285 += 1, R7286 += 1 };
  s0 -> s5 [73, 73] { R7599 += 1, R7555 += 1, R7284 += 1, R7285 += 1 };
  s0 -> s6 [73, 73] { R7599 += 1, R7555 += 1, R7284 += 1, R7285 += 1 };
  s0 -> s7 [73, 73] { R7599 += 1, R7555 += 1, R7285 += 1, R7286 += 1 };
  s0 -> s1 [74, 65535] { R7599 += 1, R7555 += 1, R7284 += 1, R7285 += 1 };
  s0 -> s2 [74, 65535] { R7599 += 1, R7555 += 1, R7285 += 1, R7286 += 1 };
  s1 -> s1 [0, 72] { R7599 += 1, R7555 += 1, R7284 += 1, R7285 += 1 };
  s1 -> s2 [0, 72] { R7599 += 1, R7555 += 1, R7285 += 1, R7286 += 1 };
  s1 -> s4 [73, 73] { R7599 += 1, R7555 += 1, R7285 += 1, R7286 += 1 };
  s1 -> s5 [73, 73] { R7599 += 1, R7555 += 1, R7284 += 1, R7285 += 1 };
  s1 -> s6 [73, 73] { R7599 += 1, R7555 += 1, R7284 += 1, R7285 += 1 };
  s1 -> s7 [73, 73] { R7599 += 1, R7555 += 1, R7285 += 1, R7286 += 1 };
  s1 -> s1 [74, 65535] { R7599 += 1, R7555 += 1, R7284 += 1, R7285 += 1 };
  s1 -> s2 [74, 65535] { R7599 += 1, R7555 += 1, R7285 += 1, R7286 += 1 };
  s2 -> s11 [0, 72] { R7599 += 1, R7555 += 1 };
  s2 -> s2 [0, 72] { R7599 += 1, R7555 += 1, R7285 += 1, R7286 += 1 };
  s2 -> s12 [73, 73] { R7599 += 1, R7555 += 1 };
  s2 -> s8 [73, 73] { R7599 += 1, R7555 += 1 };
  s2 -> s4 [73, 73] { R7599 += 1, R7555 += 1, R7285 += 1, R7286 += 1 };
  s2 -> s7 [73, 73] { R7599 += 1, R7555 += 1, R7285 += 1, R7286 += 1 };
  s2 -> s11 [74, 65535] { R7599 += 1, R7555 += 1 };
  s2 -> s2 [74, 65535] { R7599 += 1, R7555 += 1, R7285 += 1, R7286 += 1 };
  s3 -> s1 [0, 72] { R7599 += 1, R7555 += 1, R7284 += 1, R7285 += 1 };
  s3 -> s2 [0, 72] { R7599 += 1, R7555 += 1, R7285 += 1, R7286 += 1 };
  s3 -> s3 [0, 65535] { R7599 += 1, R7554 += 1, R7555 += 1 };
  s3 -> s4 [73, 73] { R7599 += 1, R7555 += 1, R7285 += 1, R7286 += 1 };
  s3 -> s5 [73, 73] { R7599 += 1, R7555 += 1, R7284 += 1, R7285 += 1 };
  s3 -> s6 [73, 73] { R7599 += 1, R7555 += 1, R7284 += 1, R7285 += 1 };
  s3 -> s7 [73, 73] { R7599 += 1, R7555 += 1, R7285 += 1, R7286 += 1 };
  s3 -> s1 [74, 65535] { R7599 += 1, R7555 += 1, R7284 += 1, R7285 += 1 };
  s3 -> s2 [74, 65535] { R7599 += 1, R7555 += 1, R7285 += 1, R7286 += 1 };
  s4 -> s8 [0, 65535] { R7599 += 1, R7555 += 1 };
  s4 -> s4 [0, 65535] { R7599 += 1, R7555 += 1, R7285 += 1, R7286 += 1 };
  s5 -> s4 [0, 65535] { R7599 += 1, R7555 += 1, R7285 += 1, R7286 += 1 };
  s5 -> s5 [0, 65535] { R7599 += 1, R7555 += 1, R7284 += 1, R7285 += 1 };
  s8 -> s8 [0, 65535] { R7599 += 1, R7555 += 1 };
  s8 -> s9 [0, 65535] { R7599 += 1 };
  s8 -> s10 [0, 65535];
  s9 -> s9 [0, 65535] { R7599 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s11 [0, 72] { R7599 += 1, R7555 += 1 };
  s11 -> s11 [0, 65535] { R7599 += 1 };
  s11 -> s10 [0, 65535];
  s11 -> s12 [73, 73] { R7599 += 1, R7555 += 1 };
  s11 -> s8 [73, 73] { R7599 += 1, R7555 += 1 };
  s11 -> s11 [74, 65535] { R7599 += 1, R7555 += 1 };
  s12 -> s12 [0, 65535] { R7599 += 1 };
  s12 -> s10 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 72] { R7601 += 1, R7557 += 1, R7499 += 1 };
  s0 -> s2 [0, 72] { R7601 += 1, R7557 += 1, R7498 += 1, R7499 += 1 };
  s0 -> s0 [0, 65535] { R7600 += 1, R7601 += 1 };
  s0 -> s3 [0, 65535] { R7601 += 1, R7556 += 1, R7557 += 1 };
  s0 -> s4 [73, 73] { R7601 += 1, R7557 += 1, R7499 += 1 };
  s0 -> s5 [73, 73] { R7601 += 1, R7557 += 1, R7498 += 1, R7499 += 1 };
  s0 -> s6 [73, 73] { R7601 += 1, R7557 += 1, R7499 += 1 };
  s0 -> s7 [73, 73] { R7601 += 1, R7557 += 1, R7498 += 1, R7499 += 1 };
  s0 -> s1 [74, 76] { R7601 += 1, R7557 += 1, R7499 += 1 };
  s0 -> s2 [74, 65535] { R7601 += 1, R7557 += 1, R7498 += 1, R7499 += 1 };
  s0 -> s8 [77, 77] { R7601 += 1, R7557 += 1, R7499 += 1 };
  s0 -> s1 [82, 65535] { R7601 += 1, R7557 += 1, R7499 += 1 };
  s1 -> s1 [0, 72] { R7601 += 1, R7557 += 1, R7499 += 1 };
  s1 -> s4 [73, 73] { R7601 += 1, R7557 += 1 };
  s1 -> s6 [73, 73] { R7601 += 1, R7557 += 1 };
  s1 -> s1 [74, 76] { R7601 += 1, R7557 += 1, R7499 += 1 };
  s1 -> s1 [74, 65535] { R7601 += 1, R7557 += 1 };
  s1 -> s8 [77, 77] { R7601 += 1, R7557 += 1, R7499 += 1 };
  s1 -> s1 [82, 65535] { R7601 += 1, R7557 += 1, R7499 += 1 };
  s2 -> s1 [0, 72] { R7601 += 1, R7557 += 1, R7499 += 1 };
  s2 -> s2 [0, 72] { R7601 += 1, R7557 += 1, R7498 += 1, R7499 += 1 };
  s2 -> s4 [73, 73] { R7601 += 1, R7557 += 1, R7499 += 1 };
  s2 -> s5 [73, 73] { R7601 += 1, R7557 += 1, R7498 += 1, R7499 += 1 };
  s2 -> s6 [73, 73] { R7601 += 1, R7557 += 1, R7499 += 1 };
  s2 -> s7 [73, 73] { R7601 += 1, R7557 += 1, R7498 += 1, R7499 += 1 };
  s2 -> s1 [74, 76] { R7601 += 1, R7557 += 1, R7499 += 1 };
  s2 -> s2 [74, 65535] { R7601 += 1, R7557 += 1, R7498 += 1, R7499 += 1 };
  s2 -> s8 [77, 77] { R7601 += 1, R7557 += 1, R7499 += 1 };
  s2 -> s1 [82, 65535] { R7601 += 1, R7557 += 1, R7499 += 1 };
  s3 -> s1 [0, 72] { R7601 += 1, R7557 += 1, R7499 += 1 };
  s3 -> s2 [0, 72] { R7601 += 1, R7557 += 1, R7498 += 1, R7499 += 1 };
  s3 -> s3 [0, 65535] { R7601 += 1, R7556 += 1, R7557 += 1 };
  s3 -> s4 [73, 73] { R7601 += 1, R7557 += 1, R7499 += 1 };
  s3 -> s5 [73, 73] { R7601 += 1, R7557 += 1, R7498 += 1, R7499 += 1 };
  s3 -> s6 [73, 73] { R7601 += 1, R7557 += 1, R7499 += 1 };
  s3 -> s7 [73, 73] { R7601 += 1, R7557 += 1, R7498 += 1, R7499 += 1 };
  s3 -> s1 [74, 76] { R7601 += 1, R7557 += 1, R7499 += 1 };
  s3 -> s2 [74, 65535] { R7601 += 1, R7557 += 1, R7498 += 1, R7499 += 1 };
  s3 -> s8 [77, 77] { R7601 += 1, R7557 += 1, R7499 += 1 };
  s3 -> s1 [82, 65535] { R7601 += 1, R7557 += 1, R7499 += 1 };
  s4 -> s4 [0, 76] { R7601 += 1, R7557 += 1, R7499 += 1 };
  s4 -> s4 [0, 65535] { R7601 += 1, R7557 += 1 };
  s4 -> s11 [77, 77] { R7601 += 1, R7557 += 1, R7499 += 1 };
  s4 -> s4 [82, 65535] { R7601 += 1, R7557 += 1, R7499 += 1 };
  s7 -> s4 [0, 76] { R7601 += 1, R7557 += 1, R7499 += 1 };
  s7 -> s7 [0, 65535] { R7601 += 1, R7557 += 1, R7498 += 1, R7499 += 1 };
  s7 -> s11 [77, 77] { R7601 += 1, R7557 += 1, R7499 += 1 };
  s7 -> s4 [82, 65535] { R7601 += 1, R7557 += 1, R7499 += 1 };
  s8 -> s8 [0, 72] { R7601 += 1, R7557 += 1, R7499 += 1 };
  s8 -> s8 [0, 65535] { R7601 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [73, 73] { R7601 += 1, R7557 += 1 };
  s8 -> s11 [73, 73] { R7601 += 1, R7557 += 1 };
  s8 -> s8 [74, 77] { R7601 += 1, R7557 += 1, R7499 += 1 };
  s8 -> s8 [74, 65535] { R7601 += 1, R7557 += 1 };
  s8 -> s8 [82, 65535] { R7601 += 1, R7557 += 1, R7499 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R7601 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s11 [0, 77] { R7601 += 1, R7557 += 1, R7499 += 1 };
  s11 -> s12 [0, 65535] { R7601 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R7601 += 1, R7557 += 1 };
  s11 -> s11 [82, 65535] { R7601 += 1, R7557 += 1, R7499 += 1 };
  s12 -> s12 [0, 65535] { R7601 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
synchronised {  // Automata constraining P54
automaton P54_0 {
  init s0;
  s0 -> s1 [109, 109];
  accepting s1;
};
};
constraint R1 = R7517 && R2 = R7601 && R20 - R7601 = -1 && R21 = R7601 && R22 - R7601 = -1 && R23 = R7601 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R6439 + -1*R6437 - R53 = 0 && R52 + R6438 + R6436 = 0 && R7516 = 0 && R7542 = 0 && R7543 = 0 && R7550 = 0 && R7551 = 0 && R7552 = 0 && R7553 = 0 && R7554 = 0 && R7555 = 0 && R7556 = 0 && R7557 = 0 && R7558 = 0 && R7559 = R7601 && R7560 = 0 && R7561 = R7601 && R7562 = 0 && R7563 = R7601 && R7564 = 0 && R7565 = R7601 && R7566 = 0 && R7567 = R7601 && R7568 = 0 && R7569 = R7601 && R7570 = 0 && R7571 = R7601 && R7572 = 0 && R7573 = R7601 && R7574 = 0 && R7575 = R7601 && R7576 = 0 && R7577 = R7601 && R7578 = 0 && R7579 = R7601 && R7580 = 0 && R7581 = R7601 && R7582 = 0 && R7583 = R7601 && R7584 = 0 && R7585 = R7601 && R7586 = 0 && R7587 = R7601 && R7588 = 0 && R7589 = R7601 && R7590 = 0 && R7591 = R7601 && R7592 = 0 && R7593 = R7601 && R7594 = 0 && R7595 = R7601 && R7596 = 0 && R7597 = R7601 && R7598 = 0 && R7599 = R7601 && R7600 = 0 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R6439 + -1*R6437 - R53 < 1 && -1 < R7517 && 0 < R7601 && (R48 + R3895 + R3892 != 0 || ((R42 + R72 + R70 != 0 || R43 + R73 + R71 + -1*R6439 + -1*R6437 - R53 = 0 || R53 + R6439 + R6437 < 1) && (R42 + R72 + R70 = 0 || R53 + R6439 + R6437 < 1))) && (R48 + R3895 + R3892 != 0 || ((R46 + R3893 + R3890 != 0 || R47 + R3894 + R3891 + -1*R6439 + -1*R6437 - R53 = 0 || R53 + R6439 + R6437 < 1) && (R46 + R3893 + R3890 = 0 || R53 + R6439 + R6437 < 1))) && (R7502 != 0 || R7503 = R7517 || (R17 = 0 && R7517 = 0)) && (R7504 != 0 || R7505 = R7517 || (R17 = 0 && R7517 = 0)) && (R7506 != 0 || R7507 = R7517 || (R17 = 0 && R7517 = 0)) && (R7508 != 0 || R7509 = R7517 || (R17 = 0 && R7517 = 0)) && (R7510 != 0 || R7511 = R7517 || (R17 = 0 && R7517 = 0)) && (R7512 != 0 || R7513 = R7517 || (R17 = 0 && R7517 = 0)) && (R7514 != 0 || R7515 = R7517 || (R17 = 0 && R7517 = 0)) && (R7518 != 0 || R7517 = R7519 || (R17 = 0 && R7517 = 0)) && (R7520 != 0 || R7517 = R7521 || (R17 = 0 && R7517 = 0)) && (R18 = 0 || (R7540 = 0 && R7541 = 0)) && (R18 = 0 || (R7544 = 0 && R7545 = 0)) && (R18 = 0 || (R7546 = 0 && R7547 = 0)) && (R18 = 0 || (R7548 = 0 && R7549 = 0)) && (R19 = 0 || (R7522 = 0 && R7523 = 0)) && (R19 = 0 || (R7524 = 0 && R7525 = 0)) && (R19 = 0 || (R7526 = 0 && R7527 = 0)) && (R19 = 0 || (R7528 = 0 && R7529 = 0)) && (R19 = 0 || (R7530 = 0 && R7531 = 0)) && (R19 = 0 || (R7532 = 0 && R7533 = 0)) && (R19 = 0 || (R7534 = 0 && R7535 = 0)) && (R19 = 0 || (R7536 = 0 && R7537 = 0)) && (R19 = 0 || (R7538 = 0 && R7539 = 0)) && (R48 + R3895 + R3892 = 0 || (R42 + R72 + R70 = 0 && R43 + R73 + R71 + -1*R6439 + -1*R6437 - R53 = 0)) && (R48 + R3895 + R3892 = 0 || (R46 + R3893 + R3890 = 0 && R47 + R3894 + R3891 + -1*R6439 + -1*R6437 - R53 = 0)) && (R58 + R7289 + R7286 = 0 || (R56 + R7287 + R7284 = 0 && R57 + R7288 + R7285 = 0)) && (R58 + R7289 + R7286 = 0 || (R62 + R7500 + R7498 = 0 && R63 + R7501 + R7499 = 0)) && (R7502 = 0 || (R17 = 0 && R7517 = 0)) && (R7504 = 0 || (R17 = 0 && R7517 = 0)) && (R7506 = 0 || (R17 = 0 && R7517 = 0)) && (R7508 = 0 || (R17 = 0 && R7517 = 0)) && (R7510 = 0 || (R17 = 0 && R7517 = 0)) && (R7512 = 0 || (R17 = 0 && R7517 = 0)) && (R7514 = 0 || (R17 = 0 && R7517 = 0)) && (R7518 = 0 || (R17 = 0 && R7517 = 0)) && (R7520 = 0 || (R17 = 0 && R7517 = 0));
// End of Parikh automata intersection problem
