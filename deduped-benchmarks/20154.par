// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R12, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R3890, R3891, R3892, R3893, R3894, R3895, R4, R40, R42, R43, R46, R47, R48, R5166, R5167, R5168, R5169, R52, R53, R5592, R5593, R5594, R5595, R5596, R5597, R56, R57, R58, R5910, R5911, R5912, R5913, R5914, R5915, R5916, R5917, R5918, R5919, R5920, R5921, R5922, R5923, R5924, R5925, R5926, R5927, R5928, R5929, R5930, R5931, R5932, R5933, R5934, R5935, R5936, R5937, R5938, R5939, R5940, R5941, R5942, R5943, R5944, R5945, R5946, R5947, R5948, R5949, R5950, R5951, R5952, R5953, R5954, R5955, R5956, R5957, R5958, R5959, R5960, R5961, R5962, R5963, R5964, R5965, R5966, R5967, R5968, R5969, R5970, R5971, R5972, R5973, R5974, R5975, R5976, R5977, R5978, R5979, R5980, R5981, R5982, R5983, R5984, R5985, R5986, R5987, R5988, R5989, R5990, R5991, R5992, R5993, R5994, R5995, R5996, R5997, R5998, R5999, R6000, R6001, R6002, R6003, R6004, R6005, R6006, R6007, R6008, R6009, R6010, R6011, R6012, R6013, R62, R63, R66, R67, R68, R69, R70, R71, R72, R73, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [81, 81];
  s0 -> s0 [82, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [81, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 80];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [81, 81];
  s0 -> s1 [82, 65535];
  s1 -> s1 [0, 80];
  s1 -> s2 [81, 81];
  s1 -> s1 [82, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s1 [0, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R25 += 1 };
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R5934 += 1, R5935 += 1 };
  s0 -> s1 [0, 65535] { R5935 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R5935 += 1, R19 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 80] { R5937 += 1 };
  s0 -> s0 [0, 65535] { R5936 += 1, R5937 += 1 };
  s0 -> s2 [81, 81] { R5937 += 1 };
  s0 -> s3 [81, 81] { R5937 += 1 };
  s0 -> s1 [83, 65535] { R5937 += 1 };
  s1 -> s1 [0, 80] { R5937 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R5937 += 1 };
  s1 -> s3 [81, 81] { R5937 += 1 };
  s1 -> s1 [83, 65535] { R5937 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 81] { R5937 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [83, 65535] { R5937 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 80] { R5939 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R5938 += 1, R5939 += 1 };
  s0 -> s2 [81, 81] { R5939 += 1, R38 += 1 };
  s0 -> s3 [81, 81] { R5939 += 1, R38 += 1 };
  s0 -> s1 [82, 65535] { R5939 += 1, R38 += 1 };
  s1 -> s1 [0, 80] { R5939 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R5939 += 1, R38 += 1 };
  s1 -> s3 [81, 81] { R5939 += 1, R38 += 1 };
  s1 -> s1 [82, 65535] { R5939 += 1, R38 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R5939 += 1, R38 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 80] { R5941 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R5940 += 1, R5941 += 1 };
  s0 -> s2 [81, 81] { R5941 += 1, R40 += 1 };
  s0 -> s3 [81, 81] { R5941 += 1, R40 += 1 };
  s0 -> s1 [82, 65535] { R5941 += 1, R40 += 1 };
  s1 -> s1 [0, 80] { R5941 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R5941 += 1, R40 += 1 };
  s1 -> s3 [81, 81] { R5941 += 1, R40 += 1 };
  s1 -> s1 [82, 65535] { R5941 += 1, R40 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R5941 += 1, R40 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 80] { R5943 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R5942 += 1, R5943 += 1 };
  s0 -> s2 [81, 81] { R5943 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [81, 81] { R5943 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [82, 65535] { R5943 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 80] { R5943 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R5943 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [81, 81] { R5943 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [82, 65535] { R5943 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R5943 += 1, R42 += 1, R43 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 80] { R5945 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R5944 += 1, R5945 += 1 };
  s0 -> s2 [81, 81] { R5945 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [81, 81] { R5945 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [82, 65535] { R5945 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 80] { R5945 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R5945 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [81, 81] { R5945 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [82, 65535] { R5945 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R5945 += 1, R46 += 1, R47 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 80] { R5947 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R5946 += 1, R5947 += 1 };
  s0 -> s2 [81, 81] { R5947 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [81, 81] { R5947 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [82, 65535] { R5947 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 80] { R5947 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R5947 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [81, 81] { R5947 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [82, 65535] { R5947 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R5947 += 1, R52 += 1, R53 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 80] { R5949 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R5948 += 1, R5949 += 1 };
  s0 -> s2 [81, 81] { R5949 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [81, 81] { R5949 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [82, 65535] { R5949 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 80] { R5949 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R5949 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [81, 81] { R5949 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [82, 65535] { R5949 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535] { R5949 += 1, R56 += 1, R57 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 80] { R5951 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R5950 += 1, R5951 += 1 };
  s0 -> s2 [81, 81] { R5951 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [81, 81] { R5951 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [82, 65535] { R5951 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 80] { R5951 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R5951 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [81, 81] { R5951 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [82, 65535] { R5951 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535] { R5951 += 1, R62 += 1, R63 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 80] { R5971 += 1 };
  s0 -> s0 [0, 65535] { R5970 += 1, R5971 += 1 };
  s0 -> s2 [81, 81] { R5971 += 1 };
  s0 -> s1 [82, 65535] { R5971 += 1 };
  s1 -> s1 [0, 80] { R5971 += 1 };
  s1 -> s2 [81, 81] { R5971 += 1 };
  s1 -> s1 [82, 65535] { R5971 += 1 };
  s2 -> s2 [0, 65535] { R5971 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R5972 += 1, R5973 += 1 };
  s0 -> s1 [0, 65535] { R5973 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R5973 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 80] { R5975 += 1 };
  s0 -> s0 [0, 65535] { R5974 += 1, R5975 += 1 };
  s0 -> s2 [0, 65535] { R5975 += 1, R8 += 1 };
  s0 -> s3 [81, 81] { R5975 += 1 };
  s0 -> s1 [82, 65535] { R5975 += 1 };
  s1 -> s1 [0, 80] { R5975 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [81, 81] { R5975 += 1 };
  s1 -> s1 [82, 65535] { R5975 += 1 };
  s2 -> s1 [0, 80] { R5975 += 1 };
  s2 -> s2 [0, 65535] { R5975 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [81, 81] { R5975 += 1 };
  s2 -> s1 [82, 65535] { R5975 += 1 };
  s3 -> s3 [0, 65535] { R5975 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 80] { R5977 += 1, R5915 += 1 };
  s0 -> s2 [0, 65535] { R5977 += 1, R5914 += 1, R5915 += 1 };
  s0 -> s0 [0, 65535] { R5976 += 1, R5977 += 1 };
  s0 -> s1 [82, 65535] { R5977 += 1, R5915 += 1 };
  s1 -> s1 [0, 80] { R5977 += 1, R5915 += 1 };
  s1 -> s1 [0, 65535] { R5977 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [82, 65535] { R5977 += 1, R5915 += 1 };
  s2 -> s1 [0, 80] { R5977 += 1, R5915 += 1 };
  s2 -> s2 [0, 65535] { R5977 += 1, R5914 += 1, R5915 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [82, 65535] { R5977 += 1, R5915 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R5979 += 1, R5917 += 1, R17 += 1 };
  s0 -> s0 [0, 65535] { R5978 += 1, R5979 += 1 };
  s0 -> s2 [0, 65535] { R5979 += 1, R5916 += 1, R5917 += 1 };
  s1 -> s1 [0, 65535] { R5979 += 1, R5917 += 1, R17 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R5979 += 1 };
  s2 -> s1 [0, 65535] { R5979 += 1, R5917 += 1, R17 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R5979 += 1, R5916 += 1, R5917 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R5979 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s0 [0, 65535] { R5980 += 1, R5981 += 1 };
  s0 -> s1 [0, 65535] { R5981 += 1, R5918 += 1, R5919 += 1 };
  s0 -> s2 [0, 65535] { R5981 += 1, R5919 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R5981 += 1, R5918 += 1, R5919 += 1 };
  s1 -> s2 [0, 65535] { R5981 += 1, R5919 += 1 };
  s2 -> s3 [0, 65535] { R5981 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R5981 += 1, R5919 += 1 };
  s3 -> s3 [0, 65535] { R5981 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R5983 += 1, R5920 += 1, R5921 += 1 };
  s0 -> s0 [0, 65535] { R5982 += 1, R5983 += 1 };
  s0 -> s2 [0, 65535] { R5983 += 1, R5921 += 1, R67 += 1 };
  s1 -> s1 [0, 65535] { R5983 += 1, R5920 += 1, R5921 += 1 };
  s1 -> s2 [0, 65535] { R5983 += 1, R5921 += 1, R67 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R5983 += 1 };
  s2 -> s2 [0, 65535] { R5983 += 1, R5921 += 1, R67 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R5983 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 81] { R5985 += 1, R5923 += 1 };
  s0 -> s2 [0, 65535] { R5985 += 1, R5923 += 1, R69 += 1 };
  s0 -> s0 [0, 65535] { R5984 += 1, R5985 += 1 };
  s0 -> s3 [0, 65535] { R5985 += 1, R5922 += 1, R5923 += 1 };
  s0 -> s1 [83, 65535] { R5985 += 1, R5923 += 1 };
  s1 -> s1 [0, 81] { R5985 += 1, R5923 += 1 };
  s1 -> s1 [0, 65535] { R5985 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [83, 65535] { R5985 += 1, R5923 += 1 };
  s2 -> s1 [0, 81] { R5985 += 1, R5923 += 1 };
  s2 -> s5 [0, 65535] { R5985 += 1 };
  s2 -> s2 [0, 65535] { R5985 += 1, R5923 += 1, R69 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [83, 65535] { R5985 += 1, R5923 += 1 };
  s3 -> s1 [0, 81] { R5985 += 1, R5923 += 1 };
  s3 -> s2 [0, 65535] { R5985 += 1, R5923 += 1, R69 += 1 };
  s3 -> s3 [0, 65535] { R5985 += 1, R5922 += 1, R5923 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [83, 65535] { R5985 += 1, R5923 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R5985 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 81] { R5987 += 1, R5925 += 1, R73 += 1 };
  s0 -> s2 [0, 65535] { R5987 += 1, R5925 += 1, R72 += 1, R73 += 1 };
  s0 -> s3 [0, 65535] { R5987 += 1, R5924 += 1, R5925 += 1 };
  s0 -> s0 [0, 65535] { R5986 += 1, R5987 += 1 };
  s0 -> s1 [83, 65535] { R5987 += 1, R5925 += 1, R73 += 1 };
  s1 -> s1 [0, 81] { R5987 += 1, R5925 += 1, R73 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R5987 += 1 };
  s1 -> s1 [0, 65535] { R5987 += 1, R5925 += 1 };
  s1 -> s1 [83, 65535] { R5987 += 1, R5925 += 1, R73 += 1 };
  s2 -> s1 [0, 81] { R5987 += 1, R5925 += 1, R73 += 1 };
  s2 -> s2 [0, 65535] { R5987 += 1, R5925 += 1, R72 += 1, R73 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R5987 += 1 };
  s2 -> s1 [83, 65535] { R5987 += 1, R5925 += 1, R73 += 1 };
  s3 -> s1 [0, 81] { R5987 += 1, R5925 += 1, R73 += 1 };
  s3 -> s2 [0, 65535] { R5987 += 1, R5925 += 1, R72 += 1, R73 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R5987 += 1, R5924 += 1, R5925 += 1 };
  s3 -> s1 [83, 65535] { R5987 += 1, R5925 += 1, R73 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R5987 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R5989 += 1, R5927 += 1, R3894 += 1, R3895 += 1 };
  s0 -> s0 [0, 65535] { R5988 += 1, R5989 += 1 };
  s0 -> s2 [0, 65535] { R5989 += 1, R5927 += 1 };
  s0 -> s3 [0, 65535] { R5989 += 1, R5926 += 1, R5927 += 1 };
  s1 -> s5 [0, 65535] { R5989 += 1 };
  s1 -> s1 [0, 65535] { R5989 += 1, R5927 += 1, R3894 += 1, R3895 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R5989 += 1, R5927 += 1 };
  s2 -> s5 [0, 65535] { R5989 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R5989 += 1, R5927 += 1 };
  s3 -> s1 [0, 65535] { R5989 += 1, R5927 += 1, R3894 += 1, R3895 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R5989 += 1, R5927 += 1 };
  s3 -> s3 [0, 65535] { R5989 += 1, R5926 += 1, R5927 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R5989 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 82] { R5991 += 1, R5929 += 1, R5169 += 1 };
  s0 -> s0 [0, 65535] { R5990 += 1, R5991 += 1 };
  s0 -> s2 [0, 65535] { R5991 += 1, R5928 += 1, R5929 += 1 };
  s0 -> s3 [90, 90] { R5991 += 1, R5929 += 1, R5169 += 1 };
  s0 -> s1 [91, 65535] { R5991 += 1, R5929 += 1, R5169 += 1 };
  s1 -> s1 [0, 82] { R5991 += 1, R5929 += 1, R5169 += 1 };
  s1 -> s3 [90, 90] { R5991 += 1, R5929 += 1, R5169 += 1 };
  s1 -> s1 [91, 65535] { R5991 += 1, R5929 += 1, R5169 += 1 };
  s2 -> s1 [0, 82] { R5991 += 1, R5929 += 1, R5169 += 1 };
  s2 -> s2 [0, 65535] { R5991 += 1, R5928 += 1, R5929 += 1 };
  s2 -> s3 [90, 90] { R5991 += 1, R5929 += 1, R5169 += 1 };
  s2 -> s1 [91, 65535] { R5991 += 1, R5929 += 1, R5169 += 1 };
  s3 -> s3 [0, 82] { R5991 += 1, R5929 += 1, R5169 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R5991 += 1 };
  s3 -> s3 [0, 65535] { R5991 += 1, R5929 += 1 };
  s3 -> s3 [90, 65535] { R5991 += 1, R5929 += 1, R5169 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R5991 += 1 };
  accepting s3, s4, s5;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R5993 += 1, R5931 += 1, R5596 += 1, R5597 += 1 };
  s0 -> s2 [0, 65535] { R5993 += 1, R5930 += 1, R5931 += 1 };
  s0 -> s3 [0, 65535] { R5993 += 1, R5931 += 1 };
  s0 -> s0 [0, 65535] { R5992 += 1, R5993 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R5993 += 1, R5931 += 1, R5596 += 1, R5597 += 1 };
  s1 -> s3 [0, 65535] { R5993 += 1, R5931 += 1 };
  s1 -> s5 [0, 65535] { R5993 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R5993 += 1, R5931 += 1, R5596 += 1, R5597 += 1 };
  s2 -> s2 [0, 65535] { R5993 += 1, R5930 += 1, R5931 += 1 };
  s2 -> s3 [0, 65535] { R5993 += 1, R5931 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R5993 += 1, R5931 += 1 };
  s3 -> s5 [0, 65535] { R5993 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R5993 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 65535] { R5995 += 1, R5933 += 1 };
  s0 -> s2 [0, 65535] { R5995 += 1, R5932 += 1, R5933 += 1 };
  s0 -> s0 [0, 65535] { R5994 += 1, R5995 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R5995 += 1 };
  s1 -> s1 [0, 65535] { R5995 += 1, R5933 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R5995 += 1, R5933 += 1 };
  s2 -> s2 [0, 65535] { R5995 += 1, R5932 += 1, R5933 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R5995 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s0 [0, 65535] { R5996 += 1, R5997 += 1 };
  s0 -> s1 [0, 65535] { R5997 += 1, R5953 += 1, R18 += 1 };
  s0 -> s2 [0, 65535] { R5997 += 1, R5952 += 1, R5953 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R5997 += 1, R5953 += 1, R18 += 1 };
  s1 -> s4 [0, 65535] { R5997 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R5997 += 1, R5953 += 1, R18 += 1 };
  s2 -> s2 [0, 65535] { R5997 += 1, R5952 += 1, R5953 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R5997 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 80] { R5999 += 1, R5955 += 1 };
  s0 -> s2 [0, 65535] { R5999 += 1, R5954 += 1, R5955 += 1 };
  s0 -> s0 [0, 65535] { R5998 += 1, R5999 += 1 };
  s0 -> s3 [81, 81] { R5999 += 1, R5955 += 1 };
  s0 -> s4 [81, 81] { R5999 += 1, R5955 += 1 };
  s0 -> s5 [82, 82] { R5999 += 1, R5955 += 1 };
  s0 -> s1 [83, 65535] { R5999 += 1, R5955 += 1 };
  s1 -> s1 [0, 80] { R5999 += 1, R5955 += 1 };
  s1 -> s3 [81, 81] { R5999 += 1, R5955 += 1 };
  s1 -> s4 [81, 81] { R5999 += 1, R5955 += 1 };
  s1 -> s5 [82, 82] { R5999 += 1, R5955 += 1 };
  s1 -> s1 [83, 65535] { R5999 += 1, R5955 += 1 };
  s2 -> s1 [0, 80] { R5999 += 1, R5955 += 1 };
  s2 -> s2 [0, 65535] { R5999 += 1, R5954 += 1, R5955 += 1 };
  s2 -> s3 [81, 81] { R5999 += 1, R5955 += 1 };
  s2 -> s4 [81, 81] { R5999 += 1, R5955 += 1 };
  s2 -> s5 [82, 82] { R5999 += 1, R5955 += 1 };
  s2 -> s1 [83, 65535] { R5999 += 1, R5955 += 1 };
  s3 -> s3 [0, 81] { R5999 += 1, R5955 += 1 };
  s3 -> s8 [82, 82] { R5999 += 1, R5955 += 1 };
  s3 -> s3 [83, 65535] { R5999 += 1, R5955 += 1 };
  s5 -> s5 [0, 80] { R5999 += 1, R5955 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R5999 += 1 };
  s5 -> s7 [81, 81] { R5999 += 1, R5955 += 1 };
  s5 -> s8 [81, 81] { R5999 += 1, R5955 += 1 };
  s5 -> s5 [82, 65535] { R5999 += 1, R5955 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R5999 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s9 [0, 65535] { R5999 += 1 };
  s8 -> s8 [0, 65535] { R5999 += 1, R5955 += 1 };
  s8 -> s6 [0, 65535];
  s9 -> s9 [0, 65535] { R5999 += 1 };
  s9 -> s6 [0, 65535];
  accepting s8, s5, s9, s6, s7;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 80] { R6001 += 1, R5957 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R6000 += 1, R6001 += 1 };
  s0 -> s2 [0, 65535] { R6001 += 1, R5956 += 1, R5957 += 1 };
  s0 -> s3 [81, 81] { R6001 += 1, R5957 += 1, R66 += 1 };
  s0 -> s4 [81, 81] { R6001 += 1, R5957 += 1, R66 += 1 };
  s0 -> s1 [82, 65535] { R6001 += 1, R5957 += 1, R66 += 1 };
  s1 -> s1 [0, 80] { R6001 += 1, R5957 += 1, R66 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R6001 += 1 };
  s1 -> s3 [81, 81] { R6001 += 1, R5957 += 1, R66 += 1 };
  s1 -> s4 [81, 81] { R6001 += 1, R5957 += 1, R66 += 1 };
  s1 -> s1 [82, 65535] { R6001 += 1, R5957 += 1, R66 += 1 };
  s2 -> s1 [0, 80] { R6001 += 1, R5957 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R6001 += 1, R5956 += 1, R5957 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [81, 81] { R6001 += 1, R5957 += 1, R66 += 1 };
  s2 -> s4 [81, 81] { R6001 += 1, R5957 += 1, R66 += 1 };
  s2 -> s1 [82, 65535] { R6001 += 1, R5957 += 1, R66 += 1 };
  s3 -> s3 [0, 65535] { R6001 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R6001 += 1 };
  s4 -> s4 [0, 65535] { R6001 += 1, R5957 += 1, R66 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R6001 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 80] { R6003 += 1, R5959 += 1, R68 += 1 };
  s0 -> s0 [0, 65535] { R6002 += 1, R6003 += 1 };
  s0 -> s2 [0, 65535] { R6003 += 1, R5958 += 1, R5959 += 1 };
  s0 -> s3 [81, 81] { R6003 += 1, R5959 += 1, R68 += 1 };
  s0 -> s4 [81, 81] { R6003 += 1, R5959 += 1, R68 += 1 };
  s0 -> s1 [82, 65535] { R6003 += 1, R5959 += 1, R68 += 1 };
  s1 -> s1 [0, 80] { R6003 += 1, R5959 += 1, R68 += 1 };
  s1 -> s1 [0, 65535] { R6003 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [81, 81] { R6003 += 1, R5959 += 1, R68 += 1 };
  s1 -> s4 [81, 81] { R6003 += 1, R5959 += 1, R68 += 1 };
  s1 -> s1 [82, 65535] { R6003 += 1, R5959 += 1, R68 += 1 };
  s2 -> s1 [0, 80] { R6003 += 1, R5959 += 1, R68 += 1 };
  s2 -> s2 [0, 65535] { R6003 += 1, R5958 += 1, R5959 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [81, 81] { R6003 += 1, R5959 += 1, R68 += 1 };
  s2 -> s4 [81, 81] { R6003 += 1, R5959 += 1, R68 += 1 };
  s2 -> s1 [82, 65535] { R6003 += 1, R5959 += 1, R68 += 1 };
  s3 -> s3 [0, 65535] { R6003 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R6003 += 1, R5959 += 1, R68 += 1 };
  s4 -> s5 [0, 65535] { R6003 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R6003 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 80] { R6005 += 1, R5961 += 1, R70 += 1, R71 += 1 };
  s0 -> s2 [0, 65535] { R6005 += 1, R5960 += 1, R5961 += 1 };
  s0 -> s0 [0, 65535] { R6004 += 1, R6005 += 1 };
  s0 -> s3 [81, 81] { R6005 += 1, R5961 += 1, R70 += 1, R71 += 1 };
  s0 -> s4 [81, 81] { R6005 += 1, R5961 += 1, R70 += 1, R71 += 1 };
  s0 -> s1 [82, 65535] { R6005 += 1, R5961 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 80] { R6005 += 1, R5961 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 65535] { R6005 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [81, 81] { R6005 += 1, R5961 += 1, R70 += 1, R71 += 1 };
  s1 -> s4 [81, 81] { R6005 += 1, R5961 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [82, 65535] { R6005 += 1, R5961 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [0, 80] { R6005 += 1, R5961 += 1, R70 += 1, R71 += 1 };
  s2 -> s2 [0, 65535] { R6005 += 1, R5960 += 1, R5961 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [81, 81] { R6005 += 1, R5961 += 1, R70 += 1, R71 += 1 };
  s2 -> s4 [81, 81] { R6005 += 1, R5961 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [82, 65535] { R6005 += 1, R5961 += 1, R70 += 1, R71 += 1 };
  s3 -> s6 [0, 65535] { R6005 += 1 };
  s3 -> s3 [0, 65535] { R6005 += 1, R5961 += 1, R70 += 1, R71 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R6005 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6005 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 80] { R6007 += 1, R5963 += 1, R3891 += 1, R3892 += 1 };
  s0 -> s2 [0, 80] { R6007 += 1, R5963 += 1, R3890 += 1, R3891 += 1 };
  s0 -> s3 [0, 65535] { R6007 += 1, R5962 += 1, R5963 += 1 };
  s0 -> s0 [0, 65535] { R6006 += 1, R6007 += 1 };
  s0 -> s4 [81, 81] { R6007 += 1, R5963 += 1, R3890 += 1, R3891 += 1 };
  s0 -> s5 [81, 81] { R6007 += 1, R5963 += 1, R3890 += 1, R3891 += 1 };
  s0 -> s6 [81, 81] { R6007 += 1, R5963 += 1, R3891 += 1, R3892 += 1 };
  s0 -> s7 [81, 81] { R6007 += 1, R5963 += 1, R3891 += 1, R3892 += 1 };
  s0 -> s1 [82, 65535] { R6007 += 1, R5963 += 1, R3891 += 1, R3892 += 1 };
  s0 -> s2 [82, 65535] { R6007 += 1, R5963 += 1, R3890 += 1, R3891 += 1 };
  s1 -> s1 [0, 80] { R6007 += 1, R5963 += 1, R3891 += 1, R3892 += 1 };
  s1 -> s1 [0, 65535] { R6007 += 1 };
  s1 -> s9 [0, 65535];
  s1 -> s6 [81, 81] { R6007 += 1, R5963 += 1, R3891 += 1, R3892 += 1 };
  s1 -> s7 [81, 81] { R6007 += 1, R5963 += 1, R3891 += 1, R3892 += 1 };
  s1 -> s1 [82, 65535] { R6007 += 1, R5963 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s1 [0, 80] { R6007 += 1, R5963 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s2 [0, 80] { R6007 += 1, R5963 += 1, R3890 += 1, R3891 += 1 };
  s2 -> s4 [81, 81] { R6007 += 1, R5963 += 1, R3890 += 1, R3891 += 1 };
  s2 -> s5 [81, 81] { R6007 += 1, R5963 += 1, R3890 += 1, R3891 += 1 };
  s2 -> s6 [81, 81] { R6007 += 1, R5963 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s7 [81, 81] { R6007 += 1, R5963 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s1 [82, 65535] { R6007 += 1, R5963 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s2 [82, 65535] { R6007 += 1, R5963 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s1 [0, 80] { R6007 += 1, R5963 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s2 [0, 80] { R6007 += 1, R5963 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s3 [0, 65535] { R6007 += 1, R5962 += 1, R5963 += 1 };
  s3 -> s4 [81, 81] { R6007 += 1, R5963 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s5 [81, 81] { R6007 += 1, R5963 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s6 [81, 81] { R6007 += 1, R5963 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s7 [81, 81] { R6007 += 1, R5963 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s1 [82, 65535] { R6007 += 1, R5963 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s2 [82, 65535] { R6007 += 1, R5963 += 1, R3890 += 1, R3891 += 1 };
  s5 -> s5 [0, 65535] { R6007 += 1, R5963 += 1, R3890 += 1, R3891 += 1 };
  s5 -> s7 [0, 65535] { R6007 += 1, R5963 += 1, R3891 += 1, R3892 += 1 };
  s6 -> s6 [0, 65535] { R6007 += 1 };
  s6 -> s9 [0, 65535];
  s7 -> s7 [0, 65535] { R6007 += 1, R5963 += 1, R3891 += 1, R3892 += 1 };
  s7 -> s8 [0, 65535] { R6007 += 1 };
  s7 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R6007 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s8, s9, s6, s1, s7;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 80] { R6009 += 1, R5965 += 1, R5167 += 1 };
  s0 -> s2 [0, 80] { R6009 += 1, R5965 += 1, R5166 += 1, R5167 += 1 };
  s0 -> s3 [0, 65535] { R6009 += 1, R5964 += 1, R5965 += 1 };
  s0 -> s0 [0, 65535] { R6008 += 1, R6009 += 1 };
  s0 -> s4 [81, 81] { R6009 += 1, R5965 += 1, R5166 += 1, R5167 += 1 };
  s0 -> s5 [81, 81] { R6009 += 1, R5965 += 1, R5166 += 1, R5167 += 1 };
  s0 -> s6 [81, 81] { R6009 += 1, R5965 += 1, R5167 += 1 };
  s0 -> s7 [81, 81] { R6009 += 1, R5965 += 1, R5167 += 1 };
  s0 -> s1 [82, 82] { R6009 += 1, R5965 += 1, R5167 += 1 };
  s0 -> s2 [82, 65535] { R6009 += 1, R5965 += 1, R5166 += 1, R5167 += 1 };
  s0 -> s1 [91, 65535] { R6009 += 1, R5965 += 1, R5167 += 1 };
  s1 -> s1 [0, 80] { R6009 += 1, R5965 += 1, R5167 += 1 };
  s1 -> s1 [0, 65535] { R6009 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s6 [81, 81] { R6009 += 1, R5965 += 1, R5167 += 1 };
  s1 -> s7 [81, 81] { R6009 += 1, R5965 += 1, R5167 += 1 };
  s1 -> s1 [82, 82] { R6009 += 1, R5965 += 1, R5167 += 1 };
  s1 -> s1 [91, 65535] { R6009 += 1, R5965 += 1, R5167 += 1 };
  s2 -> s1 [0, 80] { R6009 += 1, R5965 += 1, R5167 += 1 };
  s2 -> s2 [0, 80] { R6009 += 1, R5965 += 1, R5166 += 1, R5167 += 1 };
  s2 -> s4 [81, 81] { R6009 += 1, R5965 += 1, R5166 += 1, R5167 += 1 };
  s2 -> s5 [81, 81] { R6009 += 1, R5965 += 1, R5166 += 1, R5167 += 1 };
  s2 -> s6 [81, 81] { R6009 += 1, R5965 += 1, R5167 += 1 };
  s2 -> s7 [81, 81] { R6009 += 1, R5965 += 1, R5167 += 1 };
  s2 -> s1 [82, 82] { R6009 += 1, R5965 += 1, R5167 += 1 };
  s2 -> s2 [82, 65535] { R6009 += 1, R5965 += 1, R5166 += 1, R5167 += 1 };
  s2 -> s1 [91, 65535] { R6009 += 1, R5965 += 1, R5167 += 1 };
  s3 -> s1 [0, 80] { R6009 += 1, R5965 += 1, R5167 += 1 };
  s3 -> s2 [0, 80] { R6009 += 1, R5965 += 1, R5166 += 1, R5167 += 1 };
  s3 -> s3 [0, 65535] { R6009 += 1, R5964 += 1, R5965 += 1 };
  s3 -> s4 [81, 81] { R6009 += 1, R5965 += 1, R5166 += 1, R5167 += 1 };
  s3 -> s5 [81, 81] { R6009 += 1, R5965 += 1, R5166 += 1, R5167 += 1 };
  s3 -> s6 [81, 81] { R6009 += 1, R5965 += 1, R5167 += 1 };
  s3 -> s7 [81, 81] { R6009 += 1, R5965 += 1, R5167 += 1 };
  s3 -> s1 [82, 82] { R6009 += 1, R5965 += 1, R5167 += 1 };
  s3 -> s2 [82, 65535] { R6009 += 1, R5965 += 1, R5166 += 1, R5167 += 1 };
  s3 -> s1 [91, 65535] { R6009 += 1, R5965 += 1, R5167 += 1 };
  s4 -> s6 [0, 82] { R6009 += 1, R5965 += 1, R5167 += 1 };
  s4 -> s4 [0, 65535] { R6009 += 1, R5965 += 1, R5166 += 1, R5167 += 1 };
  s4 -> s6 [91, 65535] { R6009 += 1, R5965 += 1, R5167 += 1 };
  s6 -> s6 [0, 82] { R6009 += 1, R5965 += 1, R5167 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R6009 += 1 };
  s6 -> s6 [91, 65535] { R6009 += 1, R5965 += 1, R5167 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R6009 += 1 };
  s8 -> s8 [0, 65535];
  accepting s1, s6, s7, s8;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 80] { R6011 += 1, R5967 += 1, R5593 += 1, R5594 += 1 };
  s0 -> s2 [0, 80] { R6011 += 1, R5967 += 1, R5592 += 1, R5593 += 1 };
  s0 -> s0 [0, 65535] { R6010 += 1, R6011 += 1 };
  s0 -> s3 [0, 65535] { R6011 += 1, R5966 += 1, R5967 += 1 };
  s0 -> s4 [81, 81] { R6011 += 1, R5967 += 1, R5592 += 1, R5593 += 1 };
  s0 -> s5 [81, 81] { R6011 += 1, R5967 += 1, R5593 += 1, R5594 += 1 };
  s0 -> s6 [81, 81] { R6011 += 1, R5967 += 1, R5592 += 1, R5593 += 1 };
  s0 -> s7 [81, 81] { R6011 += 1, R5967 += 1, R5593 += 1, R5594 += 1 };
  s0 -> s1 [82, 65535] { R6011 += 1, R5967 += 1, R5593 += 1, R5594 += 1 };
  s0 -> s2 [82, 65535] { R6011 += 1, R5967 += 1, R5592 += 1, R5593 += 1 };
  s1 -> s1 [0, 80] { R6011 += 1, R5967 += 1, R5593 += 1, R5594 += 1 };
  s1 -> s1 [0, 65535] { R6011 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s5 [81, 81] { R6011 += 1, R5967 += 1, R5593 += 1, R5594 += 1 };
  s1 -> s7 [81, 81] { R6011 += 1, R5967 += 1, R5593 += 1, R5594 += 1 };
  s1 -> s1 [82, 65535] { R6011 += 1, R5967 += 1, R5593 += 1, R5594 += 1 };
  s2 -> s1 [0, 80] { R6011 += 1, R5967 += 1, R5593 += 1, R5594 += 1 };
  s2 -> s2 [0, 80] { R6011 += 1, R5967 += 1, R5592 += 1, R5593 += 1 };
  s2 -> s4 [81, 81] { R6011 += 1, R5967 += 1, R5592 += 1, R5593 += 1 };
  s2 -> s5 [81, 81] { R6011 += 1, R5967 += 1, R5593 += 1, R5594 += 1 };
  s2 -> s6 [81, 81] { R6011 += 1, R5967 += 1, R5592 += 1, R5593 += 1 };
  s2 -> s7 [81, 81] { R6011 += 1, R5967 += 1, R5593 += 1, R5594 += 1 };
  s2 -> s1 [82, 65535] { R6011 += 1, R5967 += 1, R5593 += 1, R5594 += 1 };
  s2 -> s2 [82, 65535] { R6011 += 1, R5967 += 1, R5592 += 1, R5593 += 1 };
  s3 -> s1 [0, 80] { R6011 += 1, R5967 += 1, R5593 += 1, R5594 += 1 };
  s3 -> s2 [0, 80] { R6011 += 1, R5967 += 1, R5592 += 1, R5593 += 1 };
  s3 -> s3 [0, 65535] { R6011 += 1, R5966 += 1, R5967 += 1 };
  s3 -> s4 [81, 81] { R6011 += 1, R5967 += 1, R5592 += 1, R5593 += 1 };
  s3 -> s5 [81, 81] { R6011 += 1, R5967 += 1, R5593 += 1, R5594 += 1 };
  s3 -> s6 [81, 81] { R6011 += 1, R5967 += 1, R5592 += 1, R5593 += 1 };
  s3 -> s7 [81, 81] { R6011 += 1, R5967 += 1, R5593 += 1, R5594 += 1 };
  s3 -> s1 [82, 65535] { R6011 += 1, R5967 += 1, R5593 += 1, R5594 += 1 };
  s3 -> s2 [82, 65535] { R6011 += 1, R5967 += 1, R5592 += 1, R5593 += 1 };
  s5 -> s5 [0, 65535] { R6011 += 1, R5967 += 1, R5593 += 1, R5594 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s9 [0, 65535] { R6011 += 1 };
  s6 -> s5 [0, 65535] { R6011 += 1, R5967 += 1, R5593 += 1, R5594 += 1 };
  s6 -> s6 [0, 65535] { R6011 += 1, R5967 += 1, R5592 += 1, R5593 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R6011 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R6011 += 1 };
  accepting s8, s5, s9, s1, s7;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 80] { R6013 += 1, R5969 += 1, R5911 += 1 };
  s0 -> s2 [0, 80] { R6013 += 1, R5969 += 1, R5910 += 1, R5911 += 1 };
  s0 -> s3 [0, 65535] { R6013 += 1, R5968 += 1, R5969 += 1 };
  s0 -> s0 [0, 65535] { R6012 += 1, R6013 += 1 };
  s0 -> s4 [81, 81] { R6013 += 1, R5969 += 1, R5911 += 1 };
  s0 -> s5 [81, 81] { R6013 += 1, R5969 += 1, R5910 += 1, R5911 += 1 };
  s0 -> s6 [81, 81] { R6013 += 1, R5969 += 1, R5910 += 1, R5911 += 1 };
  s0 -> s7 [81, 81] { R6013 += 1, R5969 += 1, R5911 += 1 };
  s0 -> s8 [82, 82] { R6013 += 1, R5969 += 1, R5911 += 1 };
  s0 -> s2 [82, 65535] { R6013 += 1, R5969 += 1, R5910 += 1, R5911 += 1 };
  s0 -> s1 [91, 65535] { R6013 += 1, R5969 += 1, R5911 += 1 };
  s1 -> s1 [0, 80] { R6013 += 1, R5969 += 1, R5911 += 1 };
  s1 -> s4 [81, 81] { R6013 += 1, R5969 += 1 };
  s1 -> s7 [81, 81] { R6013 += 1, R5969 += 1 };
  s1 -> s8 [82, 82] { R6013 += 1, R5969 += 1, R5911 += 1 };
  s1 -> s1 [82, 65535] { R6013 += 1, R5969 += 1 };
  s1 -> s1 [91, 65535] { R6013 += 1, R5969 += 1, R5911 += 1 };
  s2 -> s1 [0, 80] { R6013 += 1, R5969 += 1, R5911 += 1 };
  s2 -> s2 [0, 80] { R6013 += 1, R5969 += 1, R5910 += 1, R5911 += 1 };
  s2 -> s4 [81, 81] { R6013 += 1, R5969 += 1, R5911 += 1 };
  s2 -> s5 [81, 81] { R6013 += 1, R5969 += 1, R5910 += 1, R5911 += 1 };
  s2 -> s6 [81, 81] { R6013 += 1, R5969 += 1, R5910 += 1, R5911 += 1 };
  s2 -> s7 [81, 81] { R6013 += 1, R5969 += 1, R5911 += 1 };
  s2 -> s8 [82, 82] { R6013 += 1, R5969 += 1, R5911 += 1 };
  s2 -> s2 [82, 65535] { R6013 += 1, R5969 += 1, R5910 += 1, R5911 += 1 };
  s2 -> s1 [91, 65535] { R6013 += 1, R5969 += 1, R5911 += 1 };
  s3 -> s1 [0, 80] { R6013 += 1, R5969 += 1, R5911 += 1 };
  s3 -> s2 [0, 80] { R6013 += 1, R5969 += 1, R5910 += 1, R5911 += 1 };
  s3 -> s3 [0, 65535] { R6013 += 1, R5968 += 1, R5969 += 1 };
  s3 -> s4 [81, 81] { R6013 += 1, R5969 += 1, R5911 += 1 };
  s3 -> s5 [81, 81] { R6013 += 1, R5969 += 1, R5910 += 1, R5911 += 1 };
  s3 -> s6 [81, 81] { R6013 += 1, R5969 += 1, R5910 += 1, R5911 += 1 };
  s3 -> s7 [81, 81] { R6013 += 1, R5969 += 1, R5911 += 1 };
  s3 -> s8 [82, 82] { R6013 += 1, R5969 += 1, R5911 += 1 };
  s3 -> s2 [82, 65535] { R6013 += 1, R5969 += 1, R5910 += 1, R5911 += 1 };
  s3 -> s1 [91, 65535] { R6013 += 1, R5969 += 1, R5911 += 1 };
  s4 -> s4 [0, 81] { R6013 += 1, R5969 += 1, R5911 += 1 };
  s4 -> s4 [0, 65535] { R6013 += 1, R5969 += 1 };
  s4 -> s10 [82, 82] { R6013 += 1, R5969 += 1, R5911 += 1 };
  s4 -> s4 [91, 65535] { R6013 += 1, R5969 += 1, R5911 += 1 };
  s6 -> s4 [0, 81] { R6013 += 1, R5969 += 1, R5911 += 1 };
  s6 -> s6 [0, 65535] { R6013 += 1, R5969 += 1, R5910 += 1, R5911 += 1 };
  s6 -> s10 [82, 82] { R6013 += 1, R5969 += 1, R5911 += 1 };
  s6 -> s4 [91, 65535] { R6013 += 1, R5969 += 1, R5911 += 1 };
  s8 -> s8 [0, 80] { R6013 += 1, R5969 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R6013 += 1 };
  s8 -> s10 [81, 81] { R6013 += 1, R5969 += 1 };
  s8 -> s11 [81, 81] { R6013 += 1, R5969 += 1 };
  s8 -> s8 [82, 65535] { R6013 += 1, R5969 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R6013 += 1, R5969 += 1 };
  s10 -> s12 [0, 65535] { R6013 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R6013 += 1 };
  s11 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R6013 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [113, 113];
  accepting s1;
};
};
synchronised {  // Automata constraining c1
automaton c1_0 {
  init s0;
  s0 -> s1 [114, 114];
  accepting s1;
};
};
constraint R1 = R5929 && R2 = R6013 && R20 - R6013 = -1 && R21 = R6013 && R22 - R6013 = -1 && R23 = R6013 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R5169 + -1*R5167 - R53 = 0 && R52 + R5168 + R5166 = 0 && R5928 = 0 && R5954 = 0 && R5955 = 0 && R5962 = 0 && R5963 = 0 && R5964 = 0 && R5965 = 0 && R5966 = 0 && R5967 = 0 && R5968 = 0 && R5969 = 0 && R5970 = 0 && R5971 = R6013 && R5972 = 0 && R5973 = R6013 && R5974 = 0 && R5975 = R6013 && R5976 = 0 && R5977 = R6013 && R5978 = 0 && R5979 = R6013 && R5980 = 0 && R5981 = R6013 && R5982 = 0 && R5983 = R6013 && R5984 = 0 && R5985 = R6013 && R5986 = 0 && R5987 = R6013 && R5988 = 0 && R5989 = R6013 && R5990 = 0 && R5991 = R6013 && R5992 = 0 && R5993 = R6013 && R5994 = 0 && R5995 = R6013 && R5996 = 0 && R5997 = R6013 && R5998 = 0 && R5999 = R6013 && R6000 = 0 && R6001 = R6013 && R6002 = 0 && R6003 = R6013 && R6004 = 0 && R6005 = R6013 && R6006 = 0 && R6007 = R6013 && R6008 = 0 && R6009 = R6013 && R6010 = 0 && R6011 = R6013 && R6012 = 0 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R5169 + -1*R5167 - R53 < 1 && -1 < R5929 && 0 < R6013 && (R48 + R3895 + R3892 != 0 || ((R42 + R72 + R70 != 0 || R43 + R73 + R71 + -1*R5169 + -1*R5167 - R53 = 0 || R53 + R5169 + R5167 < 1) && (R42 + R72 + R70 = 0 || R53 + R5169 + R5167 < 1))) && (R48 + R3895 + R3892 != 0 || ((R46 + R3893 + R3890 != 0 || R47 + R3894 + R3891 + -1*R5169 + -1*R5167 - R53 = 0 || R53 + R5169 + R5167 < 1) && (R46 + R3893 + R3890 = 0 || R53 + R5169 + R5167 < 1))) && (R5914 != 0 || R5915 = R5929 || (R17 = 0 && R5929 = 0)) && (R5916 != 0 || R5917 = R5929 || (R17 = 0 && R5929 = 0)) && (R5918 != 0 || R5919 = R5929 || (R17 = 0 && R5929 = 0)) && (R5920 != 0 || R5921 = R5929 || (R17 = 0 && R5929 = 0)) && (R5922 != 0 || R5923 = R5929 || (R17 = 0 && R5929 = 0)) && (R5924 != 0 || R5925 = R5929 || (R17 = 0 && R5929 = 0)) && (R5926 != 0 || R5927 = R5929 || (R17 = 0 && R5929 = 0)) && (R5930 != 0 || R5929 = R5931 || (R17 = 0 && R5929 = 0)) && (R5932 != 0 || R5929 = R5933 || (R17 = 0 && R5929 = 0)) && (R18 = 0 || (R5952 = 0 && R5953 = 0)) && (R18 = 0 || (R5956 = 0 && R5957 = 0)) && (R18 = 0 || (R5958 = 0 && R5959 = 0)) && (R18 = 0 || (R5960 = 0 && R5961 = 0)) && (R19 = 0 || (R5934 = 0 && R5935 = 0)) && (R19 = 0 || (R5936 = 0 && R5937 = 0)) && (R19 = 0 || (R5938 = 0 && R5939 = 0)) && (R19 = 0 || (R5940 = 0 && R5941 = 0)) && (R19 = 0 || (R5942 = 0 && R5943 = 0)) && (R19 = 0 || (R5944 = 0 && R5945 = 0)) && (R19 = 0 || (R5946 = 0 && R5947 = 0)) && (R19 = 0 || (R5948 = 0 && R5949 = 0)) && (R19 = 0 || (R5950 = 0 && R5951 = 0)) && (R48 + R3895 + R3892 = 0 || (R42 + R72 + R70 = 0 && R43 + R73 + R71 + -1*R5169 + -1*R5167 - R53 = 0)) && (R48 + R3895 + R3892 = 0 || (R46 + R3893 + R3890 = 0 && R47 + R3894 + R3891 + -1*R5169 + -1*R5167 - R53 = 0)) && (R58 + R5597 + R5594 = 0 || (R56 + R5595 + R5592 = 0 && R57 + R5596 + R5593 = 0)) && (R58 + R5597 + R5594 = 0 || (R62 + R5912 + R5910 = 0 && R63 + R5913 + R5911 = 0)) && (R5914 = 0 || (R17 = 0 && R5929 = 0)) && (R5916 = 0 || (R17 = 0 && R5929 = 0)) && (R5918 = 0 || (R17 = 0 && R5929 = 0)) && (R5920 = 0 || (R17 = 0 && R5929 = 0)) && (R5922 = 0 || (R17 = 0 && R5929 = 0)) && (R5924 = 0 || (R17 = 0 && R5929 = 0)) && (R5926 = 0 || (R17 = 0 && R5929 = 0)) && (R5930 = 0 || (R17 = 0 && R5929 = 0)) && (R5932 = 0 || (R17 = 0 && R5929 = 0));
// End of Parikh automata intersection problem
