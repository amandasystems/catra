// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R10148, R10149, R10150, R10151, R10152, R10153, R10154, R10155, R10156, R10157, R10158, R10159, R10160, R10161, R10162, R10163, R10164, R10165, R10166, R10167, R10168, R10169, R10170, R10171, R10172, R10173, R10174, R10175, R10176, R10177, R10178, R10179, R10180, R10181, R10182, R10183, R10184, R10185, R10186, R10187, R10188, R10189, R10190, R10191, R10192, R10193, R10194, R10195, R10196, R10197, R10198, R10199, R10200, R10201, R10202, R10203, R10204, R10205, R10206, R10207, R10208, R10209, R10210, R10211, R10212, R10213, R10214, R10215, R10216, R10217, R10218, R10219, R10220, R10221, R10222, R10223, R10224, R10225, R10226, R10227, R10228, R10229, R10230, R10231, R10232, R10233, R10234, R10235, R10236, R10237, R10238, R10239, R10240, R10241, R10242, R10243, R10244, R10245, R10246, R10247, R10248, R10249, R10250, R10251, R11, R12, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R70, R71, R72, R73, R7706, R7707, R7708, R7709, R7710, R7711, R8, R8982, R8983, R8984, R8985, R9830, R9831, R9832, R9833, R9834, R9835;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [81, 81];
  s0 -> s0 [82, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [81, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 80];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [81, 81];
  s0 -> s1 [82, 65535];
  s1 -> s1 [0, 80];
  s1 -> s2 [81, 81];
  s1 -> s1 [82, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s1 [0, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R25 += 1 };
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R10173 += 1, R19 += 1 };
  s0 -> s0 [0, 65535] { R10172 += 1, R10173 += 1 };
  s1 -> s1 [0, 65535] { R10173 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 80] { R10175 += 1 };
  s0 -> s0 [0, 65535] { R10174 += 1, R10175 += 1 };
  s0 -> s2 [81, 81] { R10175 += 1 };
  s0 -> s3 [81, 81] { R10175 += 1 };
  s0 -> s1 [83, 65535] { R10175 += 1 };
  s1 -> s1 [0, 80] { R10175 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R10175 += 1 };
  s1 -> s3 [81, 81] { R10175 += 1 };
  s1 -> s1 [83, 65535] { R10175 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 81] { R10175 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [83, 65535] { R10175 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 80] { R10177 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R10176 += 1, R10177 += 1 };
  s0 -> s2 [81, 81] { R10177 += 1, R38 += 1 };
  s0 -> s3 [81, 81] { R10177 += 1, R38 += 1 };
  s0 -> s1 [82, 65535] { R10177 += 1, R38 += 1 };
  s1 -> s1 [0, 80] { R10177 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R10177 += 1, R38 += 1 };
  s1 -> s3 [81, 81] { R10177 += 1, R38 += 1 };
  s1 -> s1 [82, 65535] { R10177 += 1, R38 += 1 };
  s2 -> s2 [0, 65535] { R10177 += 1, R38 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 80] { R10179 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R10178 += 1, R10179 += 1 };
  s0 -> s2 [81, 81] { R10179 += 1, R40 += 1 };
  s0 -> s3 [81, 81] { R10179 += 1, R40 += 1 };
  s0 -> s1 [82, 65535] { R10179 += 1, R40 += 1 };
  s1 -> s1 [0, 80] { R10179 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R10179 += 1, R40 += 1 };
  s1 -> s3 [81, 81] { R10179 += 1, R40 += 1 };
  s1 -> s1 [82, 65535] { R10179 += 1, R40 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10179 += 1, R40 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 80] { R10181 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R10180 += 1, R10181 += 1 };
  s0 -> s2 [81, 81] { R10181 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [81, 81] { R10181 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [82, 65535] { R10181 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 80] { R10181 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R10181 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [81, 81] { R10181 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [82, 65535] { R10181 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10181 += 1, R42 += 1, R43 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 80] { R10183 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R10182 += 1, R10183 += 1 };
  s0 -> s2 [81, 81] { R10183 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [81, 81] { R10183 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [82, 65535] { R10183 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 80] { R10183 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R10183 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [81, 81] { R10183 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [82, 65535] { R10183 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535] { R10183 += 1, R46 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 80] { R10185 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R10184 += 1, R10185 += 1 };
  s0 -> s2 [81, 81] { R10185 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [81, 81] { R10185 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [82, 65535] { R10185 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 80] { R10185 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R10185 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [81, 81] { R10185 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [82, 65535] { R10185 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535] { R10185 += 1, R52 += 1, R53 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 80] { R10187 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R10186 += 1, R10187 += 1 };
  s0 -> s2 [81, 81] { R10187 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [81, 81] { R10187 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [82, 65535] { R10187 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 80] { R10187 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R10187 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [81, 81] { R10187 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [82, 65535] { R10187 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535] { R10187 += 1, R56 += 1, R57 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 80] { R10189 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R10188 += 1, R10189 += 1 };
  s0 -> s2 [81, 81] { R10189 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [81, 81] { R10189 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [82, 65535] { R10189 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 80] { R10189 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R10189 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [81, 81] { R10189 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [82, 65535] { R10189 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10189 += 1, R62 += 1, R63 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 80] { R10209 += 1 };
  s0 -> s0 [0, 65535] { R10208 += 1, R10209 += 1 };
  s0 -> s2 [81, 81] { R10209 += 1 };
  s0 -> s1 [82, 65535] { R10209 += 1 };
  s1 -> s1 [0, 80] { R10209 += 1 };
  s1 -> s2 [81, 81] { R10209 += 1 };
  s1 -> s1 [82, 65535] { R10209 += 1 };
  s2 -> s2 [0, 65535] { R10209 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R10210 += 1, R10211 += 1 };
  s0 -> s1 [0, 65535] { R10211 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R10211 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 80] { R10213 += 1 };
  s0 -> s2 [0, 65535] { R10213 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R10212 += 1, R10213 += 1 };
  s0 -> s3 [81, 81] { R10213 += 1 };
  s0 -> s1 [82, 65535] { R10213 += 1 };
  s1 -> s1 [0, 80] { R10213 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [81, 81] { R10213 += 1 };
  s1 -> s1 [82, 65535] { R10213 += 1 };
  s2 -> s1 [0, 80] { R10213 += 1 };
  s2 -> s2 [0, 65535] { R10213 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [81, 81] { R10213 += 1 };
  s2 -> s1 [82, 65535] { R10213 += 1 };
  s3 -> s3 [0, 65535] { R10213 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 80] { R10215 += 1, R10153 += 1 };
  s0 -> s2 [0, 65535] { R10215 += 1, R10152 += 1, R10153 += 1 };
  s0 -> s0 [0, 65535] { R10214 += 1, R10215 += 1 };
  s0 -> s1 [82, 65535] { R10215 += 1, R10153 += 1 };
  s1 -> s1 [0, 80] { R10215 += 1, R10153 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R10215 += 1 };
  s1 -> s1 [82, 65535] { R10215 += 1, R10153 += 1 };
  s2 -> s1 [0, 80] { R10215 += 1, R10153 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10215 += 1, R10152 += 1, R10153 += 1 };
  s2 -> s1 [82, 65535] { R10215 += 1, R10153 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s0 [0, 65535] { R10216 += 1, R10217 += 1 };
  s0 -> s1 [0, 65535] { R10217 += 1, R10155 += 1, R17 += 1 };
  s0 -> s2 [0, 65535] { R10217 += 1, R10154 += 1, R10155 += 1 };
  s1 -> s4 [0, 65535] { R10217 += 1 };
  s1 -> s1 [0, 65535] { R10217 += 1, R10155 += 1, R17 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10217 += 1, R10155 += 1, R17 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10217 += 1, R10154 += 1, R10155 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10217 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s0 [0, 65535] { R10218 += 1, R10219 += 1 };
  s0 -> s1 [0, 65535] { R10219 += 1, R10156 += 1, R10157 += 1 };
  s0 -> s2 [0, 65535] { R10219 += 1, R10157 += 1 };
  s1 -> s1 [0, 65535] { R10219 += 1, R10156 += 1, R10157 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R10219 += 1, R10157 += 1 };
  s2 -> s3 [0, 65535] { R10219 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10219 += 1, R10157 += 1 };
  s3 -> s3 [0, 65535] { R10219 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R10221 += 1, R10159 += 1, R67 += 1 };
  s0 -> s2 [0, 65535] { R10221 += 1, R10158 += 1, R10159 += 1 };
  s0 -> s0 [0, 65535] { R10220 += 1, R10221 += 1 };
  s1 -> s4 [0, 65535] { R10221 += 1 };
  s1 -> s1 [0, 65535] { R10221 += 1, R10159 += 1, R67 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10221 += 1, R10159 += 1, R67 += 1 };
  s2 -> s2 [0, 65535] { R10221 += 1, R10158 += 1, R10159 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10221 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 81] { R10223 += 1, R10161 += 1 };
  s0 -> s0 [0, 65535] { R10222 += 1, R10223 += 1 };
  s0 -> s2 [0, 65535] { R10223 += 1, R10161 += 1, R69 += 1 };
  s0 -> s3 [0, 65535] { R10223 += 1, R10160 += 1, R10161 += 1 };
  s0 -> s1 [83, 65535] { R10223 += 1, R10161 += 1 };
  s1 -> s1 [0, 81] { R10223 += 1, R10161 += 1 };
  s1 -> s1 [0, 65535] { R10223 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [83, 65535] { R10223 += 1, R10161 += 1 };
  s2 -> s1 [0, 81] { R10223 += 1, R10161 += 1 };
  s2 -> s5 [0, 65535] { R10223 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10223 += 1, R10161 += 1, R69 += 1 };
  s2 -> s1 [83, 65535] { R10223 += 1, R10161 += 1 };
  s3 -> s1 [0, 81] { R10223 += 1, R10161 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R10223 += 1, R10161 += 1, R69 += 1 };
  s3 -> s3 [0, 65535] { R10223 += 1, R10160 += 1, R10161 += 1 };
  s3 -> s1 [83, 65535] { R10223 += 1, R10161 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10223 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 81] { R10225 += 1, R10163 += 1, R73 += 1 };
  s0 -> s2 [0, 65535] { R10225 += 1, R10162 += 1, R10163 += 1 };
  s0 -> s0 [0, 65535] { R10224 += 1, R10225 += 1 };
  s0 -> s3 [0, 65535] { R10225 += 1, R10163 += 1, R72 += 1, R73 += 1 };
  s0 -> s1 [83, 65535] { R10225 += 1, R10163 += 1, R73 += 1 };
  s1 -> s1 [0, 81] { R10225 += 1, R10163 += 1, R73 += 1 };
  s1 -> s1 [0, 65535] { R10225 += 1, R10163 += 1 };
  s1 -> s4 [0, 65535] { R10225 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [83, 65535] { R10225 += 1, R10163 += 1, R73 += 1 };
  s2 -> s1 [0, 81] { R10225 += 1, R10163 += 1, R73 += 1 };
  s2 -> s2 [0, 65535] { R10225 += 1, R10162 += 1, R10163 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R10225 += 1, R10163 += 1, R72 += 1, R73 += 1 };
  s2 -> s1 [83, 65535] { R10225 += 1, R10163 += 1, R73 += 1 };
  s3 -> s1 [0, 81] { R10225 += 1, R10163 += 1, R73 += 1 };
  s3 -> s4 [0, 65535] { R10225 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10225 += 1, R10163 += 1, R72 += 1, R73 += 1 };
  s3 -> s1 [83, 65535] { R10225 += 1, R10163 += 1, R73 += 1 };
  s4 -> s4 [0, 65535] { R10225 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R10227 += 1, R10165 += 1 };
  s0 -> s0 [0, 65535] { R10226 += 1, R10227 += 1 };
  s0 -> s2 [0, 65535] { R10227 += 1, R10164 += 1, R10165 += 1 };
  s1 -> s1 [0, 65535] { R10227 += 1, R10165 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R10227 += 1 };
  s2 -> s1 [0, 65535] { R10227 += 1, R10165 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10227 += 1, R10164 += 1, R10165 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10227 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 82] { R10229 += 1, R10167 += 1, R8985 += 1 };
  s0 -> s0 [0, 65535] { R10228 += 1, R10229 += 1 };
  s0 -> s2 [0, 65535] { R10229 += 1, R10166 += 1, R10167 += 1 };
  s0 -> s3 [90, 90] { R10229 += 1, R10167 += 1, R8985 += 1 };
  s0 -> s1 [91, 65535] { R10229 += 1, R10167 += 1, R8985 += 1 };
  s1 -> s1 [0, 82] { R10229 += 1, R10167 += 1, R8985 += 1 };
  s1 -> s3 [90, 90] { R10229 += 1, R10167 += 1, R8985 += 1 };
  s1 -> s1 [91, 65535] { R10229 += 1, R10167 += 1, R8985 += 1 };
  s2 -> s1 [0, 82] { R10229 += 1, R10167 += 1, R8985 += 1 };
  s2 -> s2 [0, 65535] { R10229 += 1, R10166 += 1, R10167 += 1 };
  s2 -> s3 [90, 90] { R10229 += 1, R10167 += 1, R8985 += 1 };
  s2 -> s1 [91, 65535] { R10229 += 1, R10167 += 1, R8985 += 1 };
  s3 -> s3 [0, 82] { R10229 += 1, R10167 += 1, R8985 += 1 };
  s3 -> s4 [0, 65535] { R10229 += 1 };
  s3 -> s3 [0, 65535] { R10229 += 1, R10167 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [90, 65535] { R10229 += 1, R10167 += 1, R8985 += 1 };
  s4 -> s4 [0, 65535] { R10229 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
automaton value2_28 {
  init s0;
  s0 -> s0 [0, 65535] { R10230 += 1, R10231 += 1 };
  s0 -> s1 [0, 65535] { R10231 += 1, R10168 += 1, R10169 += 1 };
  s0 -> s2 [0, 65535] { R10231 += 1, R10169 += 1 };
  s1 -> s1 [0, 65535] { R10231 += 1, R10168 += 1, R10169 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R10231 += 1, R10169 += 1 };
  s2 -> s3 [0, 65535] { R10231 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10231 += 1, R10169 += 1 };
  s3 -> s3 [0, 65535] { R10231 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s0 [0, 65535] { R10232 += 1, R10233 += 1 };
  s0 -> s1 [0, 65535] { R10233 += 1, R10171 += 1 };
  s0 -> s2 [0, 65535] { R10233 += 1, R10170 += 1, R10171 += 1 };
  s1 -> s4 [0, 65535] { R10233 += 1 };
  s1 -> s1 [0, 65535] { R10233 += 1, R10171 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10233 += 1, R10171 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10233 += 1, R10170 += 1, R10171 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10233 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s0 [0, 65535] { R10234 += 1, R10235 += 1 };
  s0 -> s1 [0, 65535] { R10235 += 1, R10190 += 1, R10191 += 1 };
  s0 -> s2 [0, 65535] { R10235 += 1, R10191 += 1, R18 += 1 };
  s1 -> s1 [0, 65535] { R10235 += 1, R10190 += 1, R10191 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R10235 += 1, R10191 += 1, R18 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10235 += 1, R10191 += 1, R18 += 1 };
  s2 -> s4 [0, 65535] { R10235 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10235 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 80] { R10237 += 1, R10193 += 1 };
  s0 -> s2 [0, 65535] { R10237 += 1, R10192 += 1, R10193 += 1 };
  s0 -> s0 [0, 65535] { R10236 += 1, R10237 += 1 };
  s0 -> s3 [81, 81] { R10237 += 1, R10193 += 1 };
  s0 -> s4 [81, 81] { R10237 += 1, R10193 += 1 };
  s0 -> s5 [82, 82] { R10237 += 1, R10193 += 1 };
  s0 -> s1 [83, 65535] { R10237 += 1, R10193 += 1 };
  s1 -> s1 [0, 80] { R10237 += 1, R10193 += 1 };
  s1 -> s3 [81, 81] { R10237 += 1, R10193 += 1 };
  s1 -> s4 [81, 81] { R10237 += 1, R10193 += 1 };
  s1 -> s5 [82, 82] { R10237 += 1, R10193 += 1 };
  s1 -> s1 [83, 65535] { R10237 += 1, R10193 += 1 };
  s2 -> s1 [0, 80] { R10237 += 1, R10193 += 1 };
  s2 -> s2 [0, 65535] { R10237 += 1, R10192 += 1, R10193 += 1 };
  s2 -> s3 [81, 81] { R10237 += 1, R10193 += 1 };
  s2 -> s4 [81, 81] { R10237 += 1, R10193 += 1 };
  s2 -> s5 [82, 82] { R10237 += 1, R10193 += 1 };
  s2 -> s1 [83, 65535] { R10237 += 1, R10193 += 1 };
  s4 -> s4 [0, 81] { R10237 += 1, R10193 += 1 };
  s4 -> s7 [82, 82] { R10237 += 1, R10193 += 1 };
  s4 -> s4 [83, 65535] { R10237 += 1, R10193 += 1 };
  s5 -> s5 [0, 80] { R10237 += 1, R10193 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R10237 += 1 };
  s5 -> s7 [81, 81] { R10237 += 1, R10193 += 1 };
  s5 -> s8 [81, 81] { R10237 += 1, R10193 += 1 };
  s5 -> s5 [82, 65535] { R10237 += 1, R10193 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R10237 += 1, R10193 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s9 [0, 65535] { R10237 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R10237 += 1 };
  s9 -> s6 [0, 65535];
  s9 -> s9 [0, 65535] { R10237 += 1 };
  accepting s8, s5, s9, s6, s7;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 80] { R10239 += 1, R10195 += 1, R66 += 1 };
  s0 -> s2 [0, 65535] { R10239 += 1, R10194 += 1, R10195 += 1 };
  s0 -> s0 [0, 65535] { R10238 += 1, R10239 += 1 };
  s0 -> s3 [81, 81] { R10239 += 1, R10195 += 1, R66 += 1 };
  s0 -> s4 [81, 81] { R10239 += 1, R10195 += 1, R66 += 1 };
  s0 -> s1 [82, 65535] { R10239 += 1, R10195 += 1, R66 += 1 };
  s1 -> s1 [0, 80] { R10239 += 1, R10195 += 1, R66 += 1 };
  s1 -> s1 [0, 65535] { R10239 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [81, 81] { R10239 += 1, R10195 += 1, R66 += 1 };
  s1 -> s4 [81, 81] { R10239 += 1, R10195 += 1, R66 += 1 };
  s1 -> s1 [82, 65535] { R10239 += 1, R10195 += 1, R66 += 1 };
  s2 -> s1 [0, 80] { R10239 += 1, R10195 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R10239 += 1, R10194 += 1, R10195 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [81, 81] { R10239 += 1, R10195 += 1, R66 += 1 };
  s2 -> s4 [81, 81] { R10239 += 1, R10195 += 1, R66 += 1 };
  s2 -> s1 [82, 65535] { R10239 += 1, R10195 += 1, R66 += 1 };
  s3 -> s3 [0, 65535] { R10239 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R10239 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R10239 += 1, R10195 += 1, R66 += 1 };
  s5 -> s5 [0, 65535] { R10239 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 80] { R10241 += 1, R10197 += 1, R68 += 1 };
  s0 -> s2 [0, 65535] { R10241 += 1, R10196 += 1, R10197 += 1 };
  s0 -> s0 [0, 65535] { R10240 += 1, R10241 += 1 };
  s0 -> s3 [81, 81] { R10241 += 1, R10197 += 1, R68 += 1 };
  s0 -> s4 [81, 81] { R10241 += 1, R10197 += 1, R68 += 1 };
  s0 -> s1 [82, 65535] { R10241 += 1, R10197 += 1, R68 += 1 };
  s1 -> s1 [0, 80] { R10241 += 1, R10197 += 1, R68 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R10241 += 1 };
  s1 -> s3 [81, 81] { R10241 += 1, R10197 += 1, R68 += 1 };
  s1 -> s4 [81, 81] { R10241 += 1, R10197 += 1, R68 += 1 };
  s1 -> s1 [82, 65535] { R10241 += 1, R10197 += 1, R68 += 1 };
  s2 -> s1 [0, 80] { R10241 += 1, R10197 += 1, R68 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R10241 += 1, R10196 += 1, R10197 += 1 };
  s2 -> s3 [81, 81] { R10241 += 1, R10197 += 1, R68 += 1 };
  s2 -> s4 [81, 81] { R10241 += 1, R10197 += 1, R68 += 1 };
  s2 -> s1 [82, 65535] { R10241 += 1, R10197 += 1, R68 += 1 };
  s3 -> s3 [0, 65535] { R10241 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R10241 += 1 };
  s4 -> s4 [0, 65535] { R10241 += 1, R10197 += 1, R68 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R10241 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 80] { R10243 += 1, R10199 += 1, R70 += 1, R71 += 1 };
  s0 -> s2 [0, 65535] { R10243 += 1, R10198 += 1, R10199 += 1 };
  s0 -> s0 [0, 65535] { R10242 += 1, R10243 += 1 };
  s0 -> s3 [81, 81] { R10243 += 1, R10199 += 1, R70 += 1, R71 += 1 };
  s0 -> s4 [81, 81] { R10243 += 1, R10199 += 1, R70 += 1, R71 += 1 };
  s0 -> s1 [82, 65535] { R10243 += 1, R10199 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 80] { R10243 += 1, R10199 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 65535] { R10243 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [81, 81] { R10243 += 1, R10199 += 1, R70 += 1, R71 += 1 };
  s1 -> s4 [81, 81] { R10243 += 1, R10199 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [82, 65535] { R10243 += 1, R10199 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [0, 80] { R10243 += 1, R10199 += 1, R70 += 1, R71 += 1 };
  s2 -> s2 [0, 65535] { R10243 += 1, R10198 += 1, R10199 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [81, 81] { R10243 += 1, R10199 += 1, R70 += 1, R71 += 1 };
  s2 -> s4 [81, 81] { R10243 += 1, R10199 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [82, 65535] { R10243 += 1, R10199 += 1, R70 += 1, R71 += 1 };
  s3 -> s3 [0, 65535] { R10243 += 1, R10199 += 1, R70 += 1, R71 += 1 };
  s3 -> s6 [0, 65535] { R10243 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10243 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10243 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 80] { R10245 += 1, R10201 += 1, R7706 += 1, R7707 += 1 };
  s0 -> s2 [0, 80] { R10245 += 1, R10201 += 1, R7707 += 1, R7708 += 1 };
  s0 -> s3 [0, 65535] { R10245 += 1, R10200 += 1, R10201 += 1 };
  s0 -> s0 [0, 65535] { R10244 += 1, R10245 += 1 };
  s0 -> s4 [81, 81] { R10245 += 1, R10201 += 1, R7706 += 1, R7707 += 1 };
  s0 -> s5 [81, 81] { R10245 += 1, R10201 += 1, R7707 += 1, R7708 += 1 };
  s0 -> s6 [81, 81] { R10245 += 1, R10201 += 1, R7706 += 1, R7707 += 1 };
  s0 -> s7 [81, 81] { R10245 += 1, R10201 += 1, R7707 += 1, R7708 += 1 };
  s0 -> s1 [82, 65535] { R10245 += 1, R10201 += 1, R7706 += 1, R7707 += 1 };
  s0 -> s2 [82, 65535] { R10245 += 1, R10201 += 1, R7707 += 1, R7708 += 1 };
  s1 -> s1 [0, 80] { R10245 += 1, R10201 += 1, R7706 += 1, R7707 += 1 };
  s1 -> s2 [0, 80] { R10245 += 1, R10201 += 1, R7707 += 1, R7708 += 1 };
  s1 -> s4 [81, 81] { R10245 += 1, R10201 += 1, R7706 += 1, R7707 += 1 };
  s1 -> s5 [81, 81] { R10245 += 1, R10201 += 1, R7707 += 1, R7708 += 1 };
  s1 -> s6 [81, 81] { R10245 += 1, R10201 += 1, R7706 += 1, R7707 += 1 };
  s1 -> s7 [81, 81] { R10245 += 1, R10201 += 1, R7707 += 1, R7708 += 1 };
  s1 -> s1 [82, 65535] { R10245 += 1, R10201 += 1, R7706 += 1, R7707 += 1 };
  s1 -> s2 [82, 65535] { R10245 += 1, R10201 += 1, R7707 += 1, R7708 += 1 };
  s2 -> s11 [0, 80] { R10245 += 1, R10201 += 1 };
  s2 -> s2 [0, 80] { R10245 += 1, R10201 += 1, R7707 += 1, R7708 += 1 };
  s2 -> s12 [81, 81] { R10245 += 1, R10201 += 1 };
  s2 -> s5 [81, 81] { R10245 += 1, R10201 += 1, R7707 += 1, R7708 += 1 };
  s2 -> s7 [81, 81] { R10245 += 1, R10201 += 1, R7707 += 1, R7708 += 1 };
  s2 -> s8 [81, 81] { R10245 += 1, R10201 += 1 };
  s2 -> s11 [82, 65535] { R10245 += 1, R10201 += 1 };
  s2 -> s2 [82, 65535] { R10245 += 1, R10201 += 1, R7707 += 1, R7708 += 1 };
  s3 -> s1 [0, 80] { R10245 += 1, R10201 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s2 [0, 80] { R10245 += 1, R10201 += 1, R7707 += 1, R7708 += 1 };
  s3 -> s3 [0, 65535] { R10245 += 1, R10200 += 1, R10201 += 1 };
  s3 -> s4 [81, 81] { R10245 += 1, R10201 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s5 [81, 81] { R10245 += 1, R10201 += 1, R7707 += 1, R7708 += 1 };
  s3 -> s6 [81, 81] { R10245 += 1, R10201 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s7 [81, 81] { R10245 += 1, R10201 += 1, R7707 += 1, R7708 += 1 };
  s3 -> s1 [82, 65535] { R10245 += 1, R10201 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s2 [82, 65535] { R10245 += 1, R10201 += 1, R7707 += 1, R7708 += 1 };
  s5 -> s5 [0, 65535] { R10245 += 1, R10201 += 1, R7707 += 1, R7708 += 1 };
  s5 -> s8 [0, 65535] { R10245 += 1, R10201 += 1 };
  s6 -> s5 [0, 65535] { R10245 += 1, R10201 += 1, R7707 += 1, R7708 += 1 };
  s6 -> s6 [0, 65535] { R10245 += 1, R10201 += 1, R7706 += 1, R7707 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [0, 65535] { R10245 += 1 };
  s8 -> s8 [0, 65535] { R10245 += 1, R10201 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R10245 += 1 };
  s11 -> s11 [0, 80] { R10245 += 1, R10201 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R10245 += 1 };
  s11 -> s12 [81, 81] { R10245 += 1, R10201 += 1 };
  s11 -> s8 [81, 81] { R10245 += 1, R10201 += 1 };
  s11 -> s11 [82, 65535] { R10245 += 1, R10201 += 1 };
  s12 -> s12 [0, 65535] { R10245 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 80] { R10247 += 1, R10203 += 1, R8982 += 1, R8983 += 1 };
  s0 -> s2 [0, 80] { R10247 += 1, R10203 += 1, R8983 += 1 };
  s0 -> s0 [0, 65535] { R10246 += 1, R10247 += 1 };
  s0 -> s3 [0, 65535] { R10247 += 1, R10202 += 1, R10203 += 1 };
  s0 -> s4 [81, 81] { R10247 += 1, R10203 += 1, R8982 += 1, R8983 += 1 };
  s0 -> s5 [81, 81] { R10247 += 1, R10203 += 1, R8982 += 1, R8983 += 1 };
  s0 -> s6 [81, 81] { R10247 += 1, R10203 += 1, R8983 += 1 };
  s0 -> s7 [81, 81] { R10247 += 1, R10203 += 1, R8983 += 1 };
  s0 -> s2 [82, 82] { R10247 += 1, R10203 += 1, R8983 += 1 };
  s0 -> s1 [82, 65535] { R10247 += 1, R10203 += 1, R8982 += 1, R8983 += 1 };
  s0 -> s2 [91, 65535] { R10247 += 1, R10203 += 1, R8983 += 1 };
  s1 -> s1 [0, 80] { R10247 += 1, R10203 += 1, R8982 += 1, R8983 += 1 };
  s1 -> s2 [0, 80] { R10247 += 1, R10203 += 1, R8983 += 1 };
  s1 -> s4 [81, 81] { R10247 += 1, R10203 += 1, R8982 += 1, R8983 += 1 };
  s1 -> s5 [81, 81] { R10247 += 1, R10203 += 1, R8982 += 1, R8983 += 1 };
  s1 -> s6 [81, 81] { R10247 += 1, R10203 += 1, R8983 += 1 };
  s1 -> s7 [81, 81] { R10247 += 1, R10203 += 1, R8983 += 1 };
  s1 -> s2 [82, 82] { R10247 += 1, R10203 += 1, R8983 += 1 };
  s1 -> s1 [82, 65535] { R10247 += 1, R10203 += 1, R8982 += 1, R8983 += 1 };
  s1 -> s2 [91, 65535] { R10247 += 1, R10203 += 1, R8983 += 1 };
  s2 -> s2 [0, 80] { R10247 += 1, R10203 += 1, R8983 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R10247 += 1 };
  s2 -> s6 [81, 81] { R10247 += 1, R10203 += 1, R8983 += 1 };
  s2 -> s7 [81, 81] { R10247 += 1, R10203 += 1, R8983 += 1 };
  s2 -> s2 [82, 82] { R10247 += 1, R10203 += 1, R8983 += 1 };
  s2 -> s2 [91, 65535] { R10247 += 1, R10203 += 1, R8983 += 1 };
  s3 -> s1 [0, 80] { R10247 += 1, R10203 += 1, R8982 += 1, R8983 += 1 };
  s3 -> s2 [0, 80] { R10247 += 1, R10203 += 1, R8983 += 1 };
  s3 -> s3 [0, 65535] { R10247 += 1, R10202 += 1, R10203 += 1 };
  s3 -> s4 [81, 81] { R10247 += 1, R10203 += 1, R8982 += 1, R8983 += 1 };
  s3 -> s5 [81, 81] { R10247 += 1, R10203 += 1, R8982 += 1, R8983 += 1 };
  s3 -> s6 [81, 81] { R10247 += 1, R10203 += 1, R8983 += 1 };
  s3 -> s7 [81, 81] { R10247 += 1, R10203 += 1, R8983 += 1 };
  s3 -> s2 [82, 82] { R10247 += 1, R10203 += 1, R8983 += 1 };
  s3 -> s1 [82, 65535] { R10247 += 1, R10203 += 1, R8982 += 1, R8983 += 1 };
  s3 -> s2 [91, 65535] { R10247 += 1, R10203 += 1, R8983 += 1 };
  s5 -> s6 [0, 82] { R10247 += 1, R10203 += 1, R8983 += 1 };
  s5 -> s5 [0, 65535] { R10247 += 1, R10203 += 1, R8982 += 1, R8983 += 1 };
  s5 -> s6 [91, 65535] { R10247 += 1, R10203 += 1, R8983 += 1 };
  s6 -> s6 [0, 82] { R10247 += 1, R10203 += 1, R8983 += 1 };
  s6 -> s6 [0, 65535] { R10247 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [91, 65535] { R10247 += 1, R10203 += 1, R8983 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R10247 += 1 };
  s8 -> s8 [0, 65535];
  accepting s2, s6, s7, s8;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 80] { R10249 += 1, R10205 += 1, R9831 += 1, R9832 += 1 };
  s0 -> s2 [0, 80] { R10249 += 1, R10205 += 1, R9830 += 1, R9831 += 1 };
  s0 -> s0 [0, 65535] { R10248 += 1, R10249 += 1 };
  s0 -> s3 [0, 65535] { R10249 += 1, R10204 += 1, R10205 += 1 };
  s0 -> s4 [81, 81] { R10249 += 1, R10205 += 1, R9830 += 1, R9831 += 1 };
  s0 -> s5 [81, 81] { R10249 += 1, R10205 += 1, R9830 += 1, R9831 += 1 };
  s0 -> s6 [81, 81] { R10249 += 1, R10205 += 1, R9831 += 1, R9832 += 1 };
  s0 -> s7 [81, 81] { R10249 += 1, R10205 += 1, R9831 += 1, R9832 += 1 };
  s0 -> s1 [82, 65535] { R10249 += 1, R10205 += 1, R9831 += 1, R9832 += 1 };
  s0 -> s2 [82, 65535] { R10249 += 1, R10205 += 1, R9830 += 1, R9831 += 1 };
  s1 -> s11 [0, 80] { R10249 += 1, R10205 += 1 };
  s1 -> s1 [0, 80] { R10249 += 1, R10205 += 1, R9831 += 1, R9832 += 1 };
  s1 -> s8 [81, 81] { R10249 += 1, R10205 += 1 };
  s1 -> s6 [81, 81] { R10249 += 1, R10205 += 1, R9831 += 1, R9832 += 1 };
  s1 -> s12 [81, 81] { R10249 += 1, R10205 += 1 };
  s1 -> s7 [81, 81] { R10249 += 1, R10205 += 1, R9831 += 1, R9832 += 1 };
  s1 -> s11 [82, 65535] { R10249 += 1, R10205 += 1 };
  s1 -> s1 [82, 65535] { R10249 += 1, R10205 += 1, R9831 += 1, R9832 += 1 };
  s2 -> s1 [0, 80] { R10249 += 1, R10205 += 1, R9831 += 1, R9832 += 1 };
  s2 -> s2 [0, 80] { R10249 += 1, R10205 += 1, R9830 += 1, R9831 += 1 };
  s2 -> s4 [81, 81] { R10249 += 1, R10205 += 1, R9830 += 1, R9831 += 1 };
  s2 -> s5 [81, 81] { R10249 += 1, R10205 += 1, R9830 += 1, R9831 += 1 };
  s2 -> s6 [81, 81] { R10249 += 1, R10205 += 1, R9831 += 1, R9832 += 1 };
  s2 -> s7 [81, 81] { R10249 += 1, R10205 += 1, R9831 += 1, R9832 += 1 };
  s2 -> s1 [82, 65535] { R10249 += 1, R10205 += 1, R9831 += 1, R9832 += 1 };
  s2 -> s2 [82, 65535] { R10249 += 1, R10205 += 1, R9830 += 1, R9831 += 1 };
  s3 -> s1 [0, 80] { R10249 += 1, R10205 += 1, R9831 += 1, R9832 += 1 };
  s3 -> s2 [0, 80] { R10249 += 1, R10205 += 1, R9830 += 1, R9831 += 1 };
  s3 -> s3 [0, 65535] { R10249 += 1, R10204 += 1, R10205 += 1 };
  s3 -> s4 [81, 81] { R10249 += 1, R10205 += 1, R9830 += 1, R9831 += 1 };
  s3 -> s5 [81, 81] { R10249 += 1, R10205 += 1, R9830 += 1, R9831 += 1 };
  s3 -> s6 [81, 81] { R10249 += 1, R10205 += 1, R9831 += 1, R9832 += 1 };
  s3 -> s7 [81, 81] { R10249 += 1, R10205 += 1, R9831 += 1, R9832 += 1 };
  s3 -> s1 [82, 65535] { R10249 += 1, R10205 += 1, R9831 += 1, R9832 += 1 };
  s3 -> s2 [82, 65535] { R10249 += 1, R10205 += 1, R9830 += 1, R9831 += 1 };
  s4 -> s4 [0, 65535] { R10249 += 1, R10205 += 1, R9830 += 1, R9831 += 1 };
  s4 -> s6 [0, 65535] { R10249 += 1, R10205 += 1, R9831 += 1, R9832 += 1 };
  s6 -> s8 [0, 65535] { R10249 += 1, R10205 += 1 };
  s6 -> s6 [0, 65535] { R10249 += 1, R10205 += 1, R9831 += 1, R9832 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R10249 += 1, R10205 += 1 };
  s8 -> s10 [0, 65535] { R10249 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R10249 += 1 };
  s11 -> s11 [0, 80] { R10249 += 1, R10205 += 1 };
  s11 -> s11 [0, 65535] { R10249 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s8 [81, 81] { R10249 += 1, R10205 += 1 };
  s11 -> s12 [81, 81] { R10249 += 1, R10205 += 1 };
  s11 -> s11 [82, 65535] { R10249 += 1, R10205 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R10249 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 80] { R10251 += 1, R10207 += 1, R10149 += 1 };
  s0 -> s2 [0, 80] { R10251 += 1, R10207 += 1, R10148 += 1, R10149 += 1 };
  s0 -> s0 [0, 65535] { R10250 += 1, R10251 += 1 };
  s0 -> s3 [0, 65535] { R10251 += 1, R10206 += 1, R10207 += 1 };
  s0 -> s4 [81, 81] { R10251 += 1, R10207 += 1, R10148 += 1, R10149 += 1 };
  s0 -> s5 [81, 81] { R10251 += 1, R10207 += 1, R10148 += 1, R10149 += 1 };
  s0 -> s6 [81, 81] { R10251 += 1, R10207 += 1, R10149 += 1 };
  s0 -> s7 [81, 81] { R10251 += 1, R10207 += 1, R10149 += 1 };
  s0 -> s8 [82, 82] { R10251 += 1, R10207 += 1, R10149 += 1 };
  s0 -> s2 [82, 65535] { R10251 += 1, R10207 += 1, R10148 += 1, R10149 += 1 };
  s0 -> s1 [91, 65535] { R10251 += 1, R10207 += 1, R10149 += 1 };
  s1 -> s1 [0, 80] { R10251 += 1, R10207 += 1, R10149 += 1 };
  s1 -> s6 [81, 81] { R10251 += 1, R10207 += 1 };
  s1 -> s7 [81, 81] { R10251 += 1, R10207 += 1 };
  s1 -> s8 [82, 82] { R10251 += 1, R10207 += 1, R10149 += 1 };
  s1 -> s1 [82, 65535] { R10251 += 1, R10207 += 1 };
  s1 -> s1 [91, 65535] { R10251 += 1, R10207 += 1, R10149 += 1 };
  s2 -> s1 [0, 80] { R10251 += 1, R10207 += 1, R10149 += 1 };
  s2 -> s2 [0, 80] { R10251 += 1, R10207 += 1, R10148 += 1, R10149 += 1 };
  s2 -> s4 [81, 81] { R10251 += 1, R10207 += 1, R10148 += 1, R10149 += 1 };
  s2 -> s5 [81, 81] { R10251 += 1, R10207 += 1, R10148 += 1, R10149 += 1 };
  s2 -> s6 [81, 81] { R10251 += 1, R10207 += 1, R10149 += 1 };
  s2 -> s7 [81, 81] { R10251 += 1, R10207 += 1, R10149 += 1 };
  s2 -> s8 [82, 82] { R10251 += 1, R10207 += 1, R10149 += 1 };
  s2 -> s2 [82, 65535] { R10251 += 1, R10207 += 1, R10148 += 1, R10149 += 1 };
  s2 -> s1 [91, 65535] { R10251 += 1, R10207 += 1, R10149 += 1 };
  s3 -> s1 [0, 80] { R10251 += 1, R10207 += 1, R10149 += 1 };
  s3 -> s2 [0, 80] { R10251 += 1, R10207 += 1, R10148 += 1, R10149 += 1 };
  s3 -> s3 [0, 65535] { R10251 += 1, R10206 += 1, R10207 += 1 };
  s3 -> s4 [81, 81] { R10251 += 1, R10207 += 1, R10148 += 1, R10149 += 1 };
  s3 -> s5 [81, 81] { R10251 += 1, R10207 += 1, R10148 += 1, R10149 += 1 };
  s3 -> s6 [81, 81] { R10251 += 1, R10207 += 1, R10149 += 1 };
  s3 -> s7 [81, 81] { R10251 += 1, R10207 += 1, R10149 += 1 };
  s3 -> s8 [82, 82] { R10251 += 1, R10207 += 1, R10149 += 1 };
  s3 -> s2 [82, 65535] { R10251 += 1, R10207 += 1, R10148 += 1, R10149 += 1 };
  s3 -> s1 [91, 65535] { R10251 += 1, R10207 += 1, R10149 += 1 };
  s4 -> s7 [0, 81] { R10251 += 1, R10207 += 1, R10149 += 1 };
  s4 -> s4 [0, 65535] { R10251 += 1, R10207 += 1, R10148 += 1, R10149 += 1 };
  s4 -> s10 [82, 82] { R10251 += 1, R10207 += 1, R10149 += 1 };
  s4 -> s7 [91, 65535] { R10251 += 1, R10207 += 1, R10149 += 1 };
  s7 -> s7 [0, 81] { R10251 += 1, R10207 += 1, R10149 += 1 };
  s7 -> s7 [0, 65535] { R10251 += 1, R10207 += 1 };
  s7 -> s10 [82, 82] { R10251 += 1, R10207 += 1, R10149 += 1 };
  s7 -> s7 [91, 65535] { R10251 += 1, R10207 += 1, R10149 += 1 };
  s8 -> s8 [0, 80] { R10251 += 1, R10207 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R10251 += 1 };
  s8 -> s10 [81, 81] { R10251 += 1, R10207 += 1 };
  s8 -> s11 [81, 81] { R10251 += 1, R10207 += 1 };
  s8 -> s8 [82, 65535] { R10251 += 1, R10207 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R10251 += 1, R10207 += 1 };
  s10 -> s12 [0, 65535] { R10251 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R10251 += 1 };
  s12 -> s12 [0, 65535] { R10251 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [113, 113];
  accepting s1;
};
};
synchronised {  // Automata constraining c1
automaton c1_0 {
  init s0;
  s0 -> s1 [114, 114];
  accepting s1;
};
};
constraint R1 = R10167 && R2 = R10251 && R20 - R10251 = -1 && R21 = R10251 && R22 - R10251 = -1 && R23 = R10251 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R8985 + -1*R8983 - R53 = 0 && R52 + R8984 + R8982 = 0 && R10166 = 0 && R10192 = 0 && R10193 = 0 && R10200 = 0 && R10201 = 0 && R10202 = 0 && R10203 = 0 && R10204 = 0 && R10205 = 0 && R10206 = 0 && R10207 = 0 && R10208 = 0 && R10209 = R10251 && R10210 = 0 && R10211 = R10251 && R10212 = 0 && R10213 = R10251 && R10214 = 0 && R10215 = R10251 && R10216 = 0 && R10217 = R10251 && R10218 = 0 && R10219 = R10251 && R10220 = 0 && R10221 = R10251 && R10222 = 0 && R10223 = R10251 && R10224 = 0 && R10225 = R10251 && R10226 = 0 && R10227 = R10251 && R10228 = 0 && R10229 = R10251 && R10230 = 0 && R10231 = R10251 && R10232 = 0 && R10233 = R10251 && R10234 = 0 && R10235 = R10251 && R10236 = 0 && R10237 = R10251 && R10238 = 0 && R10239 = R10251 && R10240 = 0 && R10241 = R10251 && R10242 = 0 && R10243 = R10251 && R10244 = 0 && R10245 = R10251 && R10246 = 0 && R10247 = R10251 && R10248 = 0 && R10249 = R10251 && R10250 = 0 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R8985 + -1*R8983 - R53 < 1 && -1 < R10167 && 0 < R10251 && (R48 + R7711 + R7708 != 0 || ((R42 + R72 + R70 != 0 || R43 + R73 + R71 + -1*R8985 + -1*R8983 - R53 = 0 || R53 + R8985 + R8983 < 1) && (R42 + R72 + R70 = 0 || R53 + R8985 + R8983 < 1))) && (R48 + R7711 + R7708 != 0 || ((R46 + R7709 + R7706 != 0 || R47 + R7710 + R7707 + -1*R8985 + -1*R8983 - R53 = 0 || R53 + R8985 + R8983 < 1) && (R46 + R7709 + R7706 = 0 || R53 + R8985 + R8983 < 1))) && (R10152 != 0 || R10153 = R10167 || (R17 = 0 && R10167 = 0)) && (R10154 != 0 || R10155 = R10167 || (R17 = 0 && R10167 = 0)) && (R10156 != 0 || R10157 = R10167 || (R17 = 0 && R10167 = 0)) && (R10158 != 0 || R10159 = R10167 || (R17 = 0 && R10167 = 0)) && (R10160 != 0 || R10161 = R10167 || (R17 = 0 && R10167 = 0)) && (R10162 != 0 || R10163 = R10167 || (R17 = 0 && R10167 = 0)) && (R10164 != 0 || R10165 = R10167 || (R17 = 0 && R10167 = 0)) && (R10168 != 0 || R10167 = R10169 || (R17 = 0 && R10167 = 0)) && (R10170 != 0 || R10167 = R10171 || (R17 = 0 && R10167 = 0)) && (R18 = 0 || (R10190 = 0 && R10191 = 0)) && (R18 = 0 || (R10194 = 0 && R10195 = 0)) && (R18 = 0 || (R10196 = 0 && R10197 = 0)) && (R18 = 0 || (R10198 = 0 && R10199 = 0)) && (R19 = 0 || (R10172 = 0 && R10173 = 0)) && (R19 = 0 || (R10174 = 0 && R10175 = 0)) && (R19 = 0 || (R10176 = 0 && R10177 = 0)) && (R19 = 0 || (R10178 = 0 && R10179 = 0)) && (R19 = 0 || (R10180 = 0 && R10181 = 0)) && (R19 = 0 || (R10182 = 0 && R10183 = 0)) && (R19 = 0 || (R10184 = 0 && R10185 = 0)) && (R19 = 0 || (R10186 = 0 && R10187 = 0)) && (R19 = 0 || (R10188 = 0 && R10189 = 0)) && (R48 + R7711 + R7708 = 0 || (R42 + R72 + R70 = 0 && R43 + R73 + R71 + -1*R8985 + -1*R8983 - R53 = 0)) && (R48 + R7711 + R7708 = 0 || (R46 + R7709 + R7706 = 0 && R47 + R7710 + R7707 + -1*R8985 + -1*R8983 - R53 = 0)) && (R58 + R9835 + R9832 = 0 || (R56 + R9833 + R9830 = 0 && R57 + R9834 + R9831 = 0)) && (R58 + R9835 + R9832 = 0 || (R62 + R10150 + R10148 = 0 && R63 + R10151 + R10149 = 0)) && (R10152 = 0 || (R17 = 0 && R10167 = 0)) && (R10154 = 0 || (R17 = 0 && R10167 = 0)) && (R10156 = 0 || (R17 = 0 && R10167 = 0)) && (R10158 = 0 || (R17 = 0 && R10167 = 0)) && (R10160 = 0 || (R17 = 0 && R10167 = 0)) && (R10162 = 0 || (R17 = 0 && R10167 = 0)) && (R10164 = 0 || (R17 = 0 && R10167 = 0)) && (R10168 = 0 || (R17 = 0 && R10167 = 0)) && (R10170 = 0 || (R17 = 0 && R10167 = 0));
// End of Parikh automata intersection problem
