// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R11522, R11523, R11524, R11525, R11526, R11527, R11528, R11529, R11530, R11531, R12, R12802, R12803, R12804, R12805, R13228, R13229, R13230, R13231, R13232, R13233, R13338, R13339, R13340, R13341, R13342, R13343, R13344, R13345, R13346, R13347, R13348, R13349, R13350, R13351, R13352, R13353, R13354, R13355, R13356, R13357, R13358, R13359, R13360, R13361, R13362, R13363, R13364, R13365, R13366, R13367, R13368, R13369, R13370, R13371, R13372, R13373, R13374, R13375, R13376, R13377, R13378, R13379, R13380, R13381, R13382, R13383, R13384, R13385, R13386, R13387, R13388, R13389, R13390, R13391, R13392, R13393, R13394, R13395, R13396, R13397, R13398, R13399, R13400, R13401, R13402, R13403, R13404, R13405, R13406, R13407, R13408, R13409, R13410, R13411, R13412, R13413, R13414, R13415, R13416, R13417, R13418, R13419, R13420, R13421, R13422, R13423, R13424, R13425, R13426, R13427, R13428, R13429, R13430, R13431, R13432, R13433, R13434, R13435, R13436, R13437, R13438, R13439, R13440, R13441, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [81, 81];
  s0 -> s0 [82, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [81, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 80];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [81, 81];
  s0 -> s1 [82, 65535];
  s1 -> s1 [0, 80];
  s1 -> s2 [81, 81];
  s1 -> s1 [82, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s1 [0, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R25 += 1 };
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R13363 += 1, R19 += 1 };
  s0 -> s0 [0, 65535] { R13362 += 1, R13363 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R13363 += 1, R19 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 80] { R13365 += 1 };
  s0 -> s0 [0, 65535] { R13364 += 1, R13365 += 1 };
  s0 -> s2 [81, 81] { R13365 += 1 };
  s0 -> s3 [81, 81] { R13365 += 1 };
  s0 -> s1 [83, 65535] { R13365 += 1 };
  s1 -> s1 [0, 80] { R13365 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R13365 += 1 };
  s1 -> s3 [81, 81] { R13365 += 1 };
  s1 -> s1 [83, 65535] { R13365 += 1 };
  s2 -> s2 [0, 81] { R13365 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [83, 65535] { R13365 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 80] { R13367 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R13366 += 1, R13367 += 1 };
  s0 -> s2 [81, 81] { R13367 += 1, R38 += 1 };
  s0 -> s3 [81, 81] { R13367 += 1, R38 += 1 };
  s0 -> s1 [82, 65535] { R13367 += 1, R38 += 1 };
  s1 -> s1 [0, 80] { R13367 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R13367 += 1, R38 += 1 };
  s1 -> s3 [81, 81] { R13367 += 1, R38 += 1 };
  s1 -> s1 [82, 65535] { R13367 += 1, R38 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R13367 += 1, R38 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 80] { R13369 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R13368 += 1, R13369 += 1 };
  s0 -> s2 [81, 81] { R13369 += 1, R40 += 1 };
  s0 -> s3 [81, 81] { R13369 += 1, R40 += 1 };
  s0 -> s1 [82, 65535] { R13369 += 1, R40 += 1 };
  s1 -> s1 [0, 80] { R13369 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R13369 += 1, R40 += 1 };
  s1 -> s3 [81, 81] { R13369 += 1, R40 += 1 };
  s1 -> s1 [82, 65535] { R13369 += 1, R40 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R13369 += 1, R40 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 80] { R13371 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R13370 += 1, R13371 += 1 };
  s0 -> s2 [81, 81] { R13371 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [81, 81] { R13371 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [82, 65535] { R13371 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 80] { R13371 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R13371 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [81, 81] { R13371 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [82, 65535] { R13371 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R13371 += 1, R42 += 1, R43 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 80] { R13373 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R13372 += 1, R13373 += 1 };
  s0 -> s2 [81, 81] { R13373 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [81, 81] { R13373 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [82, 65535] { R13373 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 80] { R13373 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R13373 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [81, 81] { R13373 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [82, 65535] { R13373 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535] { R13373 += 1, R46 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 80] { R13375 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R13374 += 1, R13375 += 1 };
  s0 -> s2 [81, 81] { R13375 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [81, 81] { R13375 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [82, 65535] { R13375 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 80] { R13375 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R13375 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [81, 81] { R13375 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [82, 65535] { R13375 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R13375 += 1, R52 += 1, R53 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 80] { R13377 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R13376 += 1, R13377 += 1 };
  s0 -> s2 [81, 81] { R13377 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [81, 81] { R13377 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [82, 65535] { R13377 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 80] { R13377 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R13377 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [81, 81] { R13377 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [82, 65535] { R13377 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R13377 += 1, R56 += 1, R57 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 80] { R13379 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R13378 += 1, R13379 += 1 };
  s0 -> s2 [81, 81] { R13379 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [81, 81] { R13379 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [82, 65535] { R13379 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 80] { R13379 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R13379 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [81, 81] { R13379 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [82, 65535] { R13379 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R13379 += 1, R62 += 1, R63 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 80] { R13399 += 1 };
  s0 -> s0 [0, 65535] { R13398 += 1, R13399 += 1 };
  s0 -> s2 [81, 81] { R13399 += 1 };
  s0 -> s1 [82, 65535] { R13399 += 1 };
  s1 -> s1 [0, 80] { R13399 += 1 };
  s1 -> s2 [81, 81] { R13399 += 1 };
  s1 -> s1 [82, 65535] { R13399 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R13399 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R13401 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R13400 += 1, R13401 += 1 };
  s1 -> s1 [0, 65535] { R13401 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 80] { R13403 += 1 };
  s0 -> s0 [0, 65535] { R13402 += 1, R13403 += 1 };
  s0 -> s2 [0, 65535] { R13403 += 1, R8 += 1 };
  s0 -> s3 [81, 81] { R13403 += 1 };
  s0 -> s1 [82, 65535] { R13403 += 1 };
  s1 -> s1 [0, 80] { R13403 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [81, 81] { R13403 += 1 };
  s1 -> s1 [82, 65535] { R13403 += 1 };
  s2 -> s1 [0, 80] { R13403 += 1 };
  s2 -> s2 [0, 65535] { R13403 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [81, 81] { R13403 += 1 };
  s2 -> s1 [82, 65535] { R13403 += 1 };
  s3 -> s3 [0, 65535] { R13403 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 80] { R13405 += 1, R13343 += 1 };
  s0 -> s2 [0, 65535] { R13405 += 1, R13342 += 1, R13343 += 1 };
  s0 -> s0 [0, 65535] { R13404 += 1, R13405 += 1 };
  s0 -> s1 [82, 65535] { R13405 += 1, R13343 += 1 };
  s1 -> s1 [0, 80] { R13405 += 1, R13343 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R13405 += 1 };
  s1 -> s1 [82, 65535] { R13405 += 1, R13343 += 1 };
  s2 -> s1 [0, 80] { R13405 += 1, R13343 += 1 };
  s2 -> s2 [0, 65535] { R13405 += 1, R13342 += 1, R13343 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [82, 65535] { R13405 += 1, R13343 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s0 [0, 65535] { R13406 += 1, R13407 += 1 };
  s0 -> s1 [0, 65535] { R13407 += 1, R13345 += 1, R17 += 1 };
  s0 -> s2 [0, 65535] { R13407 += 1, R13344 += 1, R13345 += 1 };
  s1 -> s4 [0, 65535] { R13407 += 1 };
  s1 -> s1 [0, 65535] { R13407 += 1, R13345 += 1, R17 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R13407 += 1, R13345 += 1, R17 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R13407 += 1, R13344 += 1, R13345 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R13407 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 65535] { R13409 += 1, R13346 += 1, R13347 += 1 };
  s0 -> s2 [0, 65535] { R13409 += 1, R13347 += 1 };
  s0 -> s0 [0, 65535] { R13408 += 1, R13409 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R13409 += 1, R13346 += 1, R13347 += 1 };
  s1 -> s2 [0, 65535] { R13409 += 1, R13347 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R13409 += 1 };
  s2 -> s2 [0, 65535] { R13409 += 1, R13347 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R13409 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R13411 += 1, R13348 += 1, R13349 += 1 };
  s0 -> s2 [0, 65535] { R13411 += 1, R13349 += 1, R67 += 1 };
  s0 -> s0 [0, 65535] { R13410 += 1, R13411 += 1 };
  s1 -> s1 [0, 65535] { R13411 += 1, R13348 += 1, R13349 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R13411 += 1, R13349 += 1, R67 += 1 };
  s2 -> s3 [0, 65535] { R13411 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R13411 += 1, R13349 += 1, R67 += 1 };
  s3 -> s3 [0, 65535] { R13411 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 81] { R13413 += 1, R13351 += 1 };
  s0 -> s2 [0, 65535] { R13413 += 1, R13351 += 1, R69 += 1 };
  s0 -> s3 [0, 65535] { R13413 += 1, R13350 += 1, R13351 += 1 };
  s0 -> s0 [0, 65535] { R13412 += 1, R13413 += 1 };
  s0 -> s1 [83, 65535] { R13413 += 1, R13351 += 1 };
  s1 -> s1 [0, 81] { R13413 += 1, R13351 += 1 };
  s1 -> s1 [0, 65535] { R13413 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [83, 65535] { R13413 += 1, R13351 += 1 };
  s2 -> s1 [0, 81] { R13413 += 1, R13351 += 1 };
  s2 -> s2 [0, 65535] { R13413 += 1, R13351 += 1, R69 += 1 };
  s2 -> s5 [0, 65535] { R13413 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [83, 65535] { R13413 += 1, R13351 += 1 };
  s3 -> s1 [0, 81] { R13413 += 1, R13351 += 1 };
  s3 -> s2 [0, 65535] { R13413 += 1, R13351 += 1, R69 += 1 };
  s3 -> s3 [0, 65535] { R13413 += 1, R13350 += 1, R13351 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [83, 65535] { R13413 += 1, R13351 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R13413 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 81] { R13415 += 1, R13353 += 1, R11525 += 1 };
  s0 -> s2 [0, 65535] { R13415 += 1, R13352 += 1, R13353 += 1 };
  s0 -> s0 [0, 65535] { R13414 += 1, R13415 += 1 };
  s0 -> s1 [0, 65535] { R13415 += 1, R13353 += 1 };
  s0 -> s1 [83, 65535] { R13415 += 1, R13353 += 1, R11525 += 1 };
  s1 -> s1 [0, 81] { R13415 += 1, R13353 += 1, R11525 += 1 };
  s1 -> s4 [0, 65535] { R13415 += 1 };
  s1 -> s1 [0, 65535] { R13415 += 1, R13353 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [83, 65535] { R13415 += 1, R13353 += 1, R11525 += 1 };
  s2 -> s1 [0, 81] { R13415 += 1, R13353 += 1, R11525 += 1 };
  s2 -> s2 [0, 65535] { R13415 += 1, R13352 += 1, R13353 += 1 };
  s2 -> s1 [0, 65535] { R13415 += 1, R13353 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [83, 65535] { R13415 += 1, R13353 += 1, R11525 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R13415 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R13417 += 1, R13354 += 1, R13355 += 1 };
  s0 -> s2 [0, 65535] { R13417 += 1, R13355 += 1, R11529 += 1, R11530 += 1 };
  s0 -> s3 [0, 65535] { R13417 += 1, R13355 += 1, R11530 += 1, R11531 += 1 };
  s0 -> s0 [0, 65535] { R13416 += 1, R13417 += 1 };
  s1 -> s1 [0, 65535] { R13417 += 1, R13354 += 1, R13355 += 1 };
  s1 -> s2 [0, 65535] { R13417 += 1, R13355 += 1, R11529 += 1, R11530 += 1 };
  s1 -> s3 [0, 65535] { R13417 += 1, R13355 += 1, R11530 += 1, R11531 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R13417 += 1, R13355 += 1, R11529 += 1, R11530 += 1 };
  s2 -> s3 [0, 65535] { R13417 += 1, R13355 += 1, R11530 += 1, R11531 += 1 };
  s2 -> s5 [0, 65535] { R13417 += 1 };
  s2 -> s6 [0, 65535];
  s3 -> s4 [0, 65535] { R13417 += 1, R13355 += 1 };
  s3 -> s3 [0, 65535] { R13417 += 1, R13355 += 1, R11530 += 1, R11531 += 1 };
  s3 -> s5 [0, 65535] { R13417 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R13417 += 1, R13355 += 1 };
  s4 -> s5 [0, 65535] { R13417 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R13417 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 82] { R13419 += 1, R13357 += 1, R12805 += 1 };
  s0 -> s2 [0, 65535] { R13419 += 1, R13356 += 1, R13357 += 1 };
  s0 -> s0 [0, 65535] { R13418 += 1, R13419 += 1 };
  s0 -> s3 [90, 90] { R13419 += 1, R13357 += 1, R12805 += 1 };
  s0 -> s1 [91, 65535] { R13419 += 1, R13357 += 1, R12805 += 1 };
  s1 -> s1 [0, 82] { R13419 += 1, R13357 += 1, R12805 += 1 };
  s1 -> s3 [90, 90] { R13419 += 1, R13357 += 1, R12805 += 1 };
  s1 -> s1 [91, 65535] { R13419 += 1, R13357 += 1, R12805 += 1 };
  s2 -> s1 [0, 82] { R13419 += 1, R13357 += 1, R12805 += 1 };
  s2 -> s2 [0, 65535] { R13419 += 1, R13356 += 1, R13357 += 1 };
  s2 -> s3 [90, 90] { R13419 += 1, R13357 += 1, R12805 += 1 };
  s2 -> s1 [91, 65535] { R13419 += 1, R13357 += 1, R12805 += 1 };
  s3 -> s3 [0, 82] { R13419 += 1, R13357 += 1, R12805 += 1 };
  s3 -> s3 [0, 65535] { R13419 += 1, R13357 += 1 };
  s3 -> s4 [0, 65535] { R13419 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [90, 65535] { R13419 += 1, R13357 += 1, R12805 += 1 };
  s4 -> s4 [0, 65535] { R13419 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R13421 += 1, R13358 += 1, R13359 += 1 };
  s0 -> s0 [0, 65535] { R13420 += 1, R13421 += 1 };
  s0 -> s2 [0, 65535] { R13421 += 1, R13359 += 1, R13232 += 1, R13233 += 1 };
  s0 -> s3 [0, 65535] { R13421 += 1, R13359 += 1 };
  s1 -> s1 [0, 65535] { R13421 += 1, R13358 += 1, R13359 += 1 };
  s1 -> s2 [0, 65535] { R13421 += 1, R13359 += 1, R13232 += 1, R13233 += 1 };
  s1 -> s3 [0, 65535] { R13421 += 1, R13359 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s4 [0, 65535] { R13421 += 1 };
  s2 -> s2 [0, 65535] { R13421 += 1, R13359 += 1, R13232 += 1, R13233 += 1 };
  s2 -> s3 [0, 65535] { R13421 += 1, R13359 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s4 [0, 65535] { R13421 += 1 };
  s3 -> s3 [0, 65535] { R13421 += 1, R13359 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R13421 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 81] { R13423 += 1, R13361 += 1, R13341 += 1 };
  s0 -> s2 [0, 65535] { R13423 += 1, R13360 += 1, R13361 += 1 };
  s0 -> s0 [0, 65535] { R13422 += 1, R13423 += 1 };
  s0 -> s1 [0, 65535] { R13423 += 1, R13361 += 1 };
  s0 -> s3 [82, 82] { R13423 += 1, R13361 += 1, R13341 += 1 };
  s0 -> s4 [82, 82] { R13423 += 1, R13361 += 1, R13341 += 1 };
  s0 -> s1 [91, 65535] { R13423 += 1, R13361 += 1, R13341 += 1 };
  s1 -> s1 [0, 81] { R13423 += 1, R13361 += 1, R13341 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R13423 += 1 };
  s1 -> s1 [0, 65535] { R13423 += 1, R13361 += 1 };
  s1 -> s3 [82, 82] { R13423 += 1, R13361 += 1, R13341 += 1 };
  s1 -> s4 [82, 82] { R13423 += 1, R13361 += 1, R13341 += 1 };
  s1 -> s1 [91, 65535] { R13423 += 1, R13361 += 1, R13341 += 1 };
  s2 -> s1 [0, 81] { R13423 += 1, R13361 += 1, R13341 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R13423 += 1, R13360 += 1, R13361 += 1 };
  s2 -> s1 [0, 65535] { R13423 += 1, R13361 += 1 };
  s2 -> s3 [82, 82] { R13423 += 1, R13361 += 1, R13341 += 1 };
  s2 -> s4 [82, 82] { R13423 += 1, R13361 += 1, R13341 += 1 };
  s2 -> s1 [91, 65535] { R13423 += 1, R13361 += 1, R13341 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R13423 += 1, R13361 += 1 };
  s3 -> s6 [0, 65535] { R13423 += 1 };
  s4 -> s4 [0, 82] { R13423 += 1, R13361 += 1, R13341 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R13423 += 1 };
  s4 -> s4 [0, 65535] { R13423 += 1, R13361 += 1 };
  s4 -> s4 [91, 65535] { R13423 += 1, R13361 += 1, R13341 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R13423 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s0 [0, 65535] { R13424 += 1, R13425 += 1 };
  s0 -> s1 [0, 65535] { R13425 += 1, R13381 += 1, R18 += 1 };
  s0 -> s2 [0, 65535] { R13425 += 1, R13380 += 1, R13381 += 1 };
  s1 -> s1 [0, 65535] { R13425 += 1, R13381 += 1, R18 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R13425 += 1 };
  s2 -> s1 [0, 65535] { R13425 += 1, R13381 += 1, R18 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R13425 += 1, R13380 += 1, R13381 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R13425 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 80] { R13427 += 1, R13383 += 1 };
  s0 -> s2 [0, 65535] { R13427 += 1, R13382 += 1, R13383 += 1 };
  s0 -> s0 [0, 65535] { R13426 += 1, R13427 += 1 };
  s0 -> s3 [81, 81] { R13427 += 1, R13383 += 1 };
  s0 -> s4 [81, 81] { R13427 += 1, R13383 += 1 };
  s0 -> s5 [82, 82] { R13427 += 1, R13383 += 1 };
  s0 -> s1 [83, 65535] { R13427 += 1, R13383 += 1 };
  s1 -> s1 [0, 80] { R13427 += 1, R13383 += 1 };
  s1 -> s3 [81, 81] { R13427 += 1, R13383 += 1 };
  s1 -> s4 [81, 81] { R13427 += 1, R13383 += 1 };
  s1 -> s5 [82, 82] { R13427 += 1, R13383 += 1 };
  s1 -> s1 [83, 65535] { R13427 += 1, R13383 += 1 };
  s2 -> s1 [0, 80] { R13427 += 1, R13383 += 1 };
  s2 -> s2 [0, 65535] { R13427 += 1, R13382 += 1, R13383 += 1 };
  s2 -> s3 [81, 81] { R13427 += 1, R13383 += 1 };
  s2 -> s4 [81, 81] { R13427 += 1, R13383 += 1 };
  s2 -> s5 [82, 82] { R13427 += 1, R13383 += 1 };
  s2 -> s1 [83, 65535] { R13427 += 1, R13383 += 1 };
  s4 -> s4 [0, 81] { R13427 += 1, R13383 += 1 };
  s4 -> s7 [82, 82] { R13427 += 1, R13383 += 1 };
  s4 -> s4 [83, 65535] { R13427 += 1, R13383 += 1 };
  s5 -> s5 [0, 80] { R13427 += 1, R13383 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R13427 += 1 };
  s5 -> s7 [81, 81] { R13427 += 1, R13383 += 1 };
  s5 -> s8 [81, 81] { R13427 += 1, R13383 += 1 };
  s5 -> s5 [82, 65535] { R13427 += 1, R13383 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s9 [0, 65535] { R13427 += 1 };
  s7 -> s7 [0, 65535] { R13427 += 1, R13383 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R13427 += 1 };
  s9 -> s6 [0, 65535];
  s9 -> s9 [0, 65535] { R13427 += 1 };
  accepting s8, s5, s9, s6, s7;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 80] { R13429 += 1, R13385 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R13428 += 1, R13429 += 1 };
  s0 -> s2 [0, 65535] { R13429 += 1, R13384 += 1, R13385 += 1 };
  s0 -> s3 [81, 81] { R13429 += 1, R13385 += 1, R66 += 1 };
  s0 -> s4 [81, 81] { R13429 += 1, R13385 += 1, R66 += 1 };
  s0 -> s1 [82, 65535] { R13429 += 1, R13385 += 1, R66 += 1 };
  s1 -> s1 [0, 80] { R13429 += 1, R13385 += 1, R66 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R13429 += 1 };
  s1 -> s3 [81, 81] { R13429 += 1, R13385 += 1, R66 += 1 };
  s1 -> s4 [81, 81] { R13429 += 1, R13385 += 1, R66 += 1 };
  s1 -> s1 [82, 65535] { R13429 += 1, R13385 += 1, R66 += 1 };
  s2 -> s1 [0, 80] { R13429 += 1, R13385 += 1, R66 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R13429 += 1, R13384 += 1, R13385 += 1 };
  s2 -> s3 [81, 81] { R13429 += 1, R13385 += 1, R66 += 1 };
  s2 -> s4 [81, 81] { R13429 += 1, R13385 += 1, R66 += 1 };
  s2 -> s1 [82, 65535] { R13429 += 1, R13385 += 1, R66 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R13429 += 1 };
  s3 -> s3 [0, 65535] { R13429 += 1, R13385 += 1, R66 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R13429 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R13429 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 80] { R13431 += 1, R13387 += 1, R68 += 1 };
  s0 -> s0 [0, 65535] { R13430 += 1, R13431 += 1 };
  s0 -> s2 [0, 65535] { R13431 += 1, R13386 += 1, R13387 += 1 };
  s0 -> s3 [81, 81] { R13431 += 1, R13387 += 1, R68 += 1 };
  s0 -> s4 [81, 81] { R13431 += 1, R13387 += 1, R68 += 1 };
  s0 -> s1 [82, 65535] { R13431 += 1, R13387 += 1, R68 += 1 };
  s1 -> s1 [0, 80] { R13431 += 1, R13387 += 1, R68 += 1 };
  s1 -> s1 [0, 65535] { R13431 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [81, 81] { R13431 += 1, R13387 += 1, R68 += 1 };
  s1 -> s4 [81, 81] { R13431 += 1, R13387 += 1, R68 += 1 };
  s1 -> s1 [82, 65535] { R13431 += 1, R13387 += 1, R68 += 1 };
  s2 -> s1 [0, 80] { R13431 += 1, R13387 += 1, R68 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R13431 += 1, R13386 += 1, R13387 += 1 };
  s2 -> s3 [81, 81] { R13431 += 1, R13387 += 1, R68 += 1 };
  s2 -> s4 [81, 81] { R13431 += 1, R13387 += 1, R68 += 1 };
  s2 -> s1 [82, 65535] { R13431 += 1, R13387 += 1, R68 += 1 };
  s3 -> s3 [0, 65535] { R13431 += 1, R13387 += 1, R68 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R13431 += 1 };
  s4 -> s4 [0, 65535] { R13431 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R13431 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 80] { R13433 += 1, R13389 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s2 [0, 80] { R13433 += 1, R13389 += 1, R11523 += 1 };
  s0 -> s0 [0, 65535] { R13432 += 1, R13433 += 1 };
  s0 -> s3 [0, 65535] { R13433 += 1, R13388 += 1, R13389 += 1 };
  s0 -> s4 [81, 81] { R13433 += 1, R13389 += 1, R11523 += 1 };
  s0 -> s5 [81, 81] { R13433 += 1, R13389 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s6 [81, 81] { R13433 += 1, R13389 += 1, R11523 += 1 };
  s0 -> s7 [81, 81] { R13433 += 1, R13389 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s1 [82, 65535] { R13433 += 1, R13389 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s2 [83, 65535] { R13433 += 1, R13389 += 1, R11523 += 1 };
  s1 -> s1 [0, 80] { R13433 += 1, R13389 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s2 [0, 80] { R13433 += 1, R13389 += 1, R11523 += 1 };
  s1 -> s4 [81, 81] { R13433 += 1, R13389 += 1, R11523 += 1 };
  s1 -> s5 [81, 81] { R13433 += 1, R13389 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s6 [81, 81] { R13433 += 1, R13389 += 1, R11523 += 1 };
  s1 -> s7 [81, 81] { R13433 += 1, R13389 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s1 [82, 65535] { R13433 += 1, R13389 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s2 [83, 65535] { R13433 += 1, R13389 += 1, R11523 += 1 };
  s2 -> s2 [0, 80] { R13433 += 1, R13389 += 1, R11523 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R13433 += 1 };
  s2 -> s4 [81, 81] { R13433 += 1, R13389 += 1 };
  s2 -> s6 [81, 81] { R13433 += 1, R13389 += 1 };
  s2 -> s2 [82, 65535] { R13433 += 1, R13389 += 1 };
  s2 -> s2 [83, 65535] { R13433 += 1, R13389 += 1, R11523 += 1 };
  s3 -> s1 [0, 80] { R13433 += 1, R13389 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s2 [0, 80] { R13433 += 1, R13389 += 1, R11523 += 1 };
  s3 -> s3 [0, 65535] { R13433 += 1, R13388 += 1, R13389 += 1 };
  s3 -> s4 [81, 81] { R13433 += 1, R13389 += 1, R11523 += 1 };
  s3 -> s5 [81, 81] { R13433 += 1, R13389 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s6 [81, 81] { R13433 += 1, R13389 += 1, R11523 += 1 };
  s3 -> s7 [81, 81] { R13433 += 1, R13389 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s1 [82, 65535] { R13433 += 1, R13389 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s2 [83, 65535] { R13433 += 1, R13389 += 1, R11523 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s4 [0, 65535] { R13433 += 1 };
  s5 -> s6 [0, 81] { R13433 += 1, R13389 += 1, R11523 += 1 };
  s5 -> s5 [0, 65535] { R13433 += 1, R13389 += 1, R11522 += 1, R11523 += 1 };
  s5 -> s6 [83, 65535] { R13433 += 1, R13389 += 1, R11523 += 1 };
  s6 -> s6 [0, 81] { R13433 += 1, R13389 += 1, R11523 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s9 [0, 65535] { R13433 += 1 };
  s6 -> s6 [0, 65535] { R13433 += 1, R13389 += 1 };
  s6 -> s6 [83, 65535] { R13433 += 1, R13389 += 1, R11523 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R13433 += 1 };
  accepting s4, s8, s2, s9, s6;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 80] { R13435 += 1, R13391 += 1, R11526 += 1, R11527 += 1 };
  s0 -> s0 [0, 65535] { R13434 += 1, R13435 += 1 };
  s0 -> s2 [0, 65535] { R13435 += 1, R13390 += 1, R13391 += 1 };
  s0 -> s3 [81, 81] { R13435 += 1, R13391 += 1, R11526 += 1, R11527 += 1 };
  s0 -> s4 [81, 81] { R13435 += 1, R13391 += 1, R11526 += 1, R11527 += 1 };
  s0 -> s1 [82, 65535] { R13435 += 1, R13391 += 1, R11526 += 1, R11527 += 1 };
  s1 -> s1 [0, 80] { R13435 += 1, R13391 += 1, R11526 += 1, R11527 += 1 };
  s1 -> s1 [0, 65535] { R13435 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [81, 81] { R13435 += 1, R13391 += 1, R11526 += 1, R11527 += 1 };
  s1 -> s4 [81, 81] { R13435 += 1, R13391 += 1, R11526 += 1, R11527 += 1 };
  s1 -> s1 [82, 65535] { R13435 += 1, R13391 += 1, R11526 += 1, R11527 += 1 };
  s2 -> s1 [0, 80] { R13435 += 1, R13391 += 1, R11526 += 1, R11527 += 1 };
  s2 -> s2 [0, 65535] { R13435 += 1, R13390 += 1, R13391 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [81, 81] { R13435 += 1, R13391 += 1, R11526 += 1, R11527 += 1 };
  s2 -> s4 [81, 81] { R13435 += 1, R13391 += 1, R11526 += 1, R11527 += 1 };
  s2 -> s1 [82, 65535] { R13435 += 1, R13391 += 1, R11526 += 1, R11527 += 1 };
  s3 -> s3 [0, 65535] { R13435 += 1, R13391 += 1, R11526 += 1, R11527 += 1 };
  s3 -> s6 [0, 65535] { R13435 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R13435 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R13435 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 80] { R13437 += 1, R13393 += 1, R12802 += 1, R12803 += 1 };
  s0 -> s2 [0, 80] { R13437 += 1, R13393 += 1, R12803 += 1 };
  s0 -> s0 [0, 65535] { R13436 += 1, R13437 += 1 };
  s0 -> s3 [0, 65535] { R13437 += 1, R13392 += 1, R13393 += 1 };
  s0 -> s4 [81, 81] { R13437 += 1, R13393 += 1, R12802 += 1, R12803 += 1 };
  s0 -> s5 [81, 81] { R13437 += 1, R13393 += 1, R12803 += 1 };
  s0 -> s6 [81, 81] { R13437 += 1, R13393 += 1, R12803 += 1 };
  s0 -> s7 [81, 81] { R13437 += 1, R13393 += 1, R12802 += 1, R12803 += 1 };
  s0 -> s2 [82, 82] { R13437 += 1, R13393 += 1, R12803 += 1 };
  s0 -> s1 [82, 65535] { R13437 += 1, R13393 += 1, R12802 += 1, R12803 += 1 };
  s0 -> s2 [91, 65535] { R13437 += 1, R13393 += 1, R12803 += 1 };
  s1 -> s1 [0, 80] { R13437 += 1, R13393 += 1, R12802 += 1, R12803 += 1 };
  s1 -> s2 [0, 80] { R13437 += 1, R13393 += 1, R12803 += 1 };
  s1 -> s4 [81, 81] { R13437 += 1, R13393 += 1, R12802 += 1, R12803 += 1 };
  s1 -> s5 [81, 81] { R13437 += 1, R13393 += 1, R12803 += 1 };
  s1 -> s6 [81, 81] { R13437 += 1, R13393 += 1, R12803 += 1 };
  s1 -> s7 [81, 81] { R13437 += 1, R13393 += 1, R12802 += 1, R12803 += 1 };
  s1 -> s2 [82, 82] { R13437 += 1, R13393 += 1, R12803 += 1 };
  s1 -> s1 [82, 65535] { R13437 += 1, R13393 += 1, R12802 += 1, R12803 += 1 };
  s1 -> s2 [91, 65535] { R13437 += 1, R13393 += 1, R12803 += 1 };
  s2 -> s2 [0, 80] { R13437 += 1, R13393 += 1, R12803 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R13437 += 1 };
  s2 -> s5 [81, 81] { R13437 += 1, R13393 += 1, R12803 += 1 };
  s2 -> s6 [81, 81] { R13437 += 1, R13393 += 1, R12803 += 1 };
  s2 -> s2 [82, 82] { R13437 += 1, R13393 += 1, R12803 += 1 };
  s2 -> s2 [91, 65535] { R13437 += 1, R13393 += 1, R12803 += 1 };
  s3 -> s1 [0, 80] { R13437 += 1, R13393 += 1, R12802 += 1, R12803 += 1 };
  s3 -> s2 [0, 80] { R13437 += 1, R13393 += 1, R12803 += 1 };
  s3 -> s3 [0, 65535] { R13437 += 1, R13392 += 1, R13393 += 1 };
  s3 -> s4 [81, 81] { R13437 += 1, R13393 += 1, R12802 += 1, R12803 += 1 };
  s3 -> s5 [81, 81] { R13437 += 1, R13393 += 1, R12803 += 1 };
  s3 -> s6 [81, 81] { R13437 += 1, R13393 += 1, R12803 += 1 };
  s3 -> s7 [81, 81] { R13437 += 1, R13393 += 1, R12802 += 1, R12803 += 1 };
  s3 -> s2 [82, 82] { R13437 += 1, R13393 += 1, R12803 += 1 };
  s3 -> s1 [82, 65535] { R13437 += 1, R13393 += 1, R12802 += 1, R12803 += 1 };
  s3 -> s2 [91, 65535] { R13437 += 1, R13393 += 1, R12803 += 1 };
  s5 -> s5 [0, 82] { R13437 += 1, R13393 += 1, R12803 += 1 };
  s5 -> s5 [0, 65535] { R13437 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s5 [91, 65535] { R13437 += 1, R13393 += 1, R12803 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R13437 += 1 };
  s7 -> s5 [0, 82] { R13437 += 1, R13393 += 1, R12803 += 1 };
  s7 -> s7 [0, 65535] { R13437 += 1, R13393 += 1, R12802 += 1, R12803 += 1 };
  s7 -> s5 [91, 65535] { R13437 += 1, R13393 += 1, R12803 += 1 };
  s8 -> s8 [0, 65535];
  accepting s2, s5, s6, s8;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 80] { R13439 += 1, R13395 += 1, R13228 += 1, R13229 += 1 };
  s0 -> s2 [0, 80] { R13439 += 1, R13395 += 1, R13229 += 1, R13230 += 1 };
  s0 -> s3 [0, 65535] { R13439 += 1, R13394 += 1, R13395 += 1 };
  s0 -> s0 [0, 65535] { R13438 += 1, R13439 += 1 };
  s0 -> s4 [81, 81] { R13439 += 1, R13395 += 1, R13229 += 1, R13230 += 1 };
  s0 -> s5 [81, 81] { R13439 += 1, R13395 += 1, R13229 += 1, R13230 += 1 };
  s0 -> s6 [81, 81] { R13439 += 1, R13395 += 1, R13228 += 1, R13229 += 1 };
  s0 -> s7 [81, 81] { R13439 += 1, R13395 += 1, R13228 += 1, R13229 += 1 };
  s0 -> s1 [82, 65535] { R13439 += 1, R13395 += 1, R13228 += 1, R13229 += 1 };
  s0 -> s2 [82, 65535] { R13439 += 1, R13395 += 1, R13229 += 1, R13230 += 1 };
  s1 -> s1 [0, 80] { R13439 += 1, R13395 += 1, R13228 += 1, R13229 += 1 };
  s1 -> s2 [0, 80] { R13439 += 1, R13395 += 1, R13229 += 1, R13230 += 1 };
  s1 -> s4 [81, 81] { R13439 += 1, R13395 += 1, R13229 += 1, R13230 += 1 };
  s1 -> s5 [81, 81] { R13439 += 1, R13395 += 1, R13229 += 1, R13230 += 1 };
  s1 -> s6 [81, 81] { R13439 += 1, R13395 += 1, R13228 += 1, R13229 += 1 };
  s1 -> s7 [81, 81] { R13439 += 1, R13395 += 1, R13228 += 1, R13229 += 1 };
  s1 -> s1 [82, 65535] { R13439 += 1, R13395 += 1, R13228 += 1, R13229 += 1 };
  s1 -> s2 [82, 65535] { R13439 += 1, R13395 += 1, R13229 += 1, R13230 += 1 };
  s2 -> s2 [0, 80] { R13439 += 1, R13395 += 1, R13229 += 1, R13230 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R13439 += 1 };
  s2 -> s4 [81, 81] { R13439 += 1, R13395 += 1, R13229 += 1, R13230 += 1 };
  s2 -> s5 [81, 81] { R13439 += 1, R13395 += 1, R13229 += 1, R13230 += 1 };
  s2 -> s2 [82, 65535] { R13439 += 1, R13395 += 1, R13229 += 1, R13230 += 1 };
  s3 -> s1 [0, 80] { R13439 += 1, R13395 += 1, R13228 += 1, R13229 += 1 };
  s3 -> s2 [0, 80] { R13439 += 1, R13395 += 1, R13229 += 1, R13230 += 1 };
  s3 -> s3 [0, 65535] { R13439 += 1, R13394 += 1, R13395 += 1 };
  s3 -> s4 [81, 81] { R13439 += 1, R13395 += 1, R13229 += 1, R13230 += 1 };
  s3 -> s5 [81, 81] { R13439 += 1, R13395 += 1, R13229 += 1, R13230 += 1 };
  s3 -> s6 [81, 81] { R13439 += 1, R13395 += 1, R13228 += 1, R13229 += 1 };
  s3 -> s7 [81, 81] { R13439 += 1, R13395 += 1, R13228 += 1, R13229 += 1 };
  s3 -> s1 [82, 65535] { R13439 += 1, R13395 += 1, R13228 += 1, R13229 += 1 };
  s3 -> s2 [82, 65535] { R13439 += 1, R13395 += 1, R13229 += 1, R13230 += 1 };
  s4 -> s4 [0, 65535] { R13439 += 1, R13395 += 1, R13229 += 1, R13230 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s9 [0, 65535] { R13439 += 1 };
  s5 -> s5 [0, 65535] { R13439 += 1 };
  s5 -> s8 [0, 65535];
  s6 -> s4 [0, 65535] { R13439 += 1, R13395 += 1, R13229 += 1, R13230 += 1 };
  s6 -> s6 [0, 65535] { R13439 += 1, R13395 += 1, R13228 += 1, R13229 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R13439 += 1 };
  accepting s4, s8, s5, s2, s9;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 80] { R13441 += 1, R13397 += 1, R13338 += 1, R13339 += 1 };
  s0 -> s2 [0, 80] { R13441 += 1, R13397 += 1, R13339 += 1 };
  s0 -> s3 [0, 65535] { R13441 += 1, R13396 += 1, R13397 += 1 };
  s0 -> s0 [0, 65535] { R13440 += 1, R13441 += 1 };
  s0 -> s4 [81, 81] { R13441 += 1, R13397 += 1, R13339 += 1 };
  s0 -> s5 [81, 81] { R13441 += 1, R13397 += 1, R13339 += 1 };
  s0 -> s6 [81, 81] { R13441 += 1, R13397 += 1, R13338 += 1, R13339 += 1 };
  s0 -> s7 [81, 81] { R13441 += 1, R13397 += 1, R13338 += 1, R13339 += 1 };
  s0 -> s1 [82, 65535] { R13441 += 1, R13397 += 1, R13338 += 1, R13339 += 1 };
  s0 -> s2 [91, 65535] { R13441 += 1, R13397 += 1, R13339 += 1 };
  s1 -> s1 [0, 80] { R13441 += 1, R13397 += 1, R13338 += 1, R13339 += 1 };
  s1 -> s2 [0, 80] { R13441 += 1, R13397 += 1, R13339 += 1 };
  s1 -> s4 [81, 81] { R13441 += 1, R13397 += 1, R13339 += 1 };
  s1 -> s5 [81, 81] { R13441 += 1, R13397 += 1, R13339 += 1 };
  s1 -> s6 [81, 81] { R13441 += 1, R13397 += 1, R13338 += 1, R13339 += 1 };
  s1 -> s7 [81, 81] { R13441 += 1, R13397 += 1, R13338 += 1, R13339 += 1 };
  s1 -> s1 [82, 65535] { R13441 += 1, R13397 += 1, R13338 += 1, R13339 += 1 };
  s1 -> s2 [91, 65535] { R13441 += 1, R13397 += 1, R13339 += 1 };
  s2 -> s2 [0, 80] { R13441 += 1, R13397 += 1, R13339 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R13441 += 1 };
  s2 -> s4 [81, 81] { R13441 += 1, R13397 += 1 };
  s2 -> s5 [81, 81] { R13441 += 1, R13397 += 1 };
  s2 -> s2 [82, 65535] { R13441 += 1, R13397 += 1 };
  s2 -> s2 [91, 65535] { R13441 += 1, R13397 += 1, R13339 += 1 };
  s3 -> s1 [0, 80] { R13441 += 1, R13397 += 1, R13338 += 1, R13339 += 1 };
  s3 -> s2 [0, 80] { R13441 += 1, R13397 += 1, R13339 += 1 };
  s3 -> s3 [0, 65535] { R13441 += 1, R13396 += 1, R13397 += 1 };
  s3 -> s4 [81, 81] { R13441 += 1, R13397 += 1, R13339 += 1 };
  s3 -> s5 [81, 81] { R13441 += 1, R13397 += 1, R13339 += 1 };
  s3 -> s6 [81, 81] { R13441 += 1, R13397 += 1, R13338 += 1, R13339 += 1 };
  s3 -> s7 [81, 81] { R13441 += 1, R13397 += 1, R13338 += 1, R13339 += 1 };
  s3 -> s1 [82, 65535] { R13441 += 1, R13397 += 1, R13338 += 1, R13339 += 1 };
  s3 -> s2 [91, 65535] { R13441 += 1, R13397 += 1, R13339 += 1 };
  s4 -> s4 [0, 81] { R13441 += 1, R13397 += 1, R13339 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s4 [0, 65535] { R13441 += 1, R13397 += 1 };
  s4 -> s9 [0, 65535] { R13441 += 1 };
  s4 -> s4 [91, 65535] { R13441 += 1, R13397 += 1, R13339 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s5 [0, 65535] { R13441 += 1 };
  s7 -> s4 [0, 81] { R13441 += 1, R13397 += 1, R13339 += 1 };
  s7 -> s7 [0, 65535] { R13441 += 1, R13397 += 1, R13338 += 1, R13339 += 1 };
  s7 -> s4 [91, 65535] { R13441 += 1, R13397 += 1, R13339 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R13441 += 1 };
  accepting s4, s8, s5, s2, s9;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [113, 113];
  accepting s1;
};
};
synchronised {  // Automata constraining c1
automaton c1_0 {
  init s0;
  s0 -> s1 [114, 114];
  accepting s1;
};
};
constraint R1 = R13357 && R2 = R13441 && R20 - R13441 = -1 && R21 = R13441 && R22 - R13441 = -1 && R23 = R13441 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R12805 + -1*R12803 - R53 = 0 && R52 + R12804 + R12802 = 0 && R13356 = 0 && R13382 = 0 && R13383 = 0 && R13388 = 0 && R13389 = 0 && R13392 = 0 && R13393 = 0 && R13394 = 0 && R13395 = 0 && R13396 = 0 && R13397 = 0 && R13398 = 0 && R13399 = R13441 && R13400 = 0 && R13401 = R13441 && R13402 = 0 && R13403 = R13441 && R13404 = 0 && R13405 = R13441 && R13406 = 0 && R13407 = R13441 && R13408 = 0 && R13409 = R13441 && R13410 = 0 && R13411 = R13441 && R13412 = 0 && R13413 = R13441 && R13414 = 0 && R13415 = R13441 && R13416 = 0 && R13417 = R13441 && R13418 = 0 && R13419 = R13441 && R13420 = 0 && R13421 = R13441 && R13422 = 0 && R13423 = R13441 && R13424 = 0 && R13425 = R13441 && R13426 = 0 && R13427 = R13441 && R13428 = 0 && R13429 = R13441 && R13430 = 0 && R13431 = R13441 && R13432 = 0 && R13433 = R13441 && R13434 = 0 && R13435 = R13441 && R13436 = 0 && R13437 = R13441 && R13438 = 0 && R13439 = R13441 && R13440 = 0 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R12805 + -1*R12803 - R53 < 1 && -1 < R13357 && 0 < R13441 && (R48 + R11531 + R11528 != 0 || ((R42 + R11524 + R11522 != 0 || R43 + R11525 + R11523 + -1*R12805 + -1*R12803 - R53 = 0 || R53 + R12805 + R12803 < 1) && (R42 + R11524 + R11522 = 0 || R53 + R12805 + R12803 < 1))) && (R48 + R11531 + R11528 != 0 || ((R46 + R11529 + R11526 != 0 || R47 + R11530 + R11527 + -1*R12805 + -1*R12803 - R53 = 0 || R53 + R12805 + R12803 < 1) && (R46 + R11529 + R11526 = 0 || R53 + R12805 + R12803 < 1))) && (R13342 != 0 || R13343 = R13357 || (R17 = 0 && R13357 = 0)) && (R13344 != 0 || R13345 = R13357 || (R17 = 0 && R13357 = 0)) && (R13346 != 0 || R13347 = R13357 || (R17 = 0 && R13357 = 0)) && (R13348 != 0 || R13349 = R13357 || (R17 = 0 && R13357 = 0)) && (R13350 != 0 || R13351 = R13357 || (R17 = 0 && R13357 = 0)) && (R13352 != 0 || R13353 = R13357 || (R17 = 0 && R13357 = 0)) && (R13354 != 0 || R13355 = R13357 || (R17 = 0 && R13357 = 0)) && (R13358 != 0 || R13357 = R13359 || (R17 = 0 && R13357 = 0)) && (R13360 != 0 || R13357 = R13361 || (R17 = 0 && R13357 = 0)) && (R18 = 0 || (R13380 = 0 && R13381 = 0)) && (R18 = 0 || (R13384 = 0 && R13385 = 0)) && (R18 = 0 || (R13386 = 0 && R13387 = 0)) && (R18 = 0 || (R13390 = 0 && R13391 = 0)) && (R19 = 0 || (R13362 = 0 && R13363 = 0)) && (R19 = 0 || (R13364 = 0 && R13365 = 0)) && (R19 = 0 || (R13366 = 0 && R13367 = 0)) && (R19 = 0 || (R13368 = 0 && R13369 = 0)) && (R19 = 0 || (R13370 = 0 && R13371 = 0)) && (R19 = 0 || (R13372 = 0 && R13373 = 0)) && (R19 = 0 || (R13374 = 0 && R13375 = 0)) && (R19 = 0 || (R13376 = 0 && R13377 = 0)) && (R19 = 0 || (R13378 = 0 && R13379 = 0)) && (R48 + R11531 + R11528 = 0 || (R42 + R11524 + R11522 = 0 && R43 + R11525 + R11523 + -1*R12805 + -1*R12803 - R53 = 0)) && (R48 + R11531 + R11528 = 0 || (R46 + R11529 + R11526 = 0 && R47 + R11530 + R11527 + -1*R12805 + -1*R12803 - R53 = 0)) && (R58 + R13233 + R13230 = 0 || (R56 + R13231 + R13228 = 0 && R57 + R13232 + R13229 = 0)) && (R58 + R13233 + R13230 = 0 || (R62 + R13340 + R13338 = 0 && R63 + R13341 + R13339 = 0)) && (R13342 = 0 || (R17 = 0 && R13357 = 0)) && (R13344 = 0 || (R17 = 0 && R13357 = 0)) && (R13346 = 0 || (R17 = 0 && R13357 = 0)) && (R13348 = 0 || (R17 = 0 && R13357 = 0)) && (R13350 = 0 || (R17 = 0 && R13357 = 0)) && (R13352 = 0 || (R17 = 0 && R13357 = 0)) && (R13354 = 0 || (R17 = 0 && R13357 = 0)) && (R13358 = 0 || (R17 = 0 && R13357 = 0)) && (R13360 = 0 || (R17 = 0 && R13357 = 0));
// End of Parikh automata intersection problem
