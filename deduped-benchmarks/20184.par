// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R12, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R70, R71, R72, R73, R7706, R7707, R7708, R7709, R7710, R7711, R8, R8982, R8983, R8984, R8985, R8986, R8987, R8988, R8989, R8990, R8991, R9096, R9097, R9098, R9099, R9100, R9101, R9102, R9103, R9104, R9105, R9106, R9107, R9108, R9109, R9110, R9111, R9112, R9113, R9114, R9115, R9116, R9117, R9118, R9119, R9120, R9121, R9122, R9123, R9124, R9125, R9126, R9127, R9128, R9129, R9130, R9131, R9132, R9133, R9134, R9135, R9136, R9137, R9138, R9139, R9140, R9141, R9142, R9143, R9144, R9145, R9146, R9147, R9148, R9149, R9150, R9151, R9152, R9153, R9154, R9155, R9156, R9157, R9158, R9159, R9160, R9161, R9162, R9163, R9164, R9165, R9166, R9167, R9168, R9169, R9170, R9171, R9172, R9173, R9174, R9175, R9176, R9177, R9178, R9179, R9180, R9181, R9182, R9183, R9184, R9185, R9186, R9187, R9188, R9189, R9190, R9191, R9192, R9193, R9194, R9195, R9196, R9197, R9198, R9199;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [81, 81];
  s0 -> s0 [82, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [81, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 80];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [81, 81];
  s0 -> s1 [82, 65535];
  s1 -> s1 [0, 80];
  s1 -> s2 [81, 81];
  s1 -> s1 [82, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s1 [0, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R25 += 1 };
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R9121 += 1, R19 += 1 };
  s0 -> s0 [0, 65535] { R9120 += 1, R9121 += 1 };
  s1 -> s1 [0, 65535] { R9121 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 80] { R9123 += 1 };
  s0 -> s0 [0, 65535] { R9122 += 1, R9123 += 1 };
  s0 -> s2 [81, 81] { R9123 += 1 };
  s0 -> s3 [81, 81] { R9123 += 1 };
  s0 -> s1 [83, 65535] { R9123 += 1 };
  s1 -> s1 [0, 80] { R9123 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R9123 += 1 };
  s1 -> s3 [81, 81] { R9123 += 1 };
  s1 -> s1 [83, 65535] { R9123 += 1 };
  s2 -> s2 [0, 81] { R9123 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [83, 65535] { R9123 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 80] { R9125 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R9124 += 1, R9125 += 1 };
  s0 -> s2 [81, 81] { R9125 += 1, R38 += 1 };
  s0 -> s3 [81, 81] { R9125 += 1, R38 += 1 };
  s0 -> s1 [82, 65535] { R9125 += 1, R38 += 1 };
  s1 -> s1 [0, 80] { R9125 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R9125 += 1, R38 += 1 };
  s1 -> s3 [81, 81] { R9125 += 1, R38 += 1 };
  s1 -> s1 [82, 65535] { R9125 += 1, R38 += 1 };
  s2 -> s2 [0, 65535] { R9125 += 1, R38 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 80] { R9127 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R9126 += 1, R9127 += 1 };
  s0 -> s2 [81, 81] { R9127 += 1, R40 += 1 };
  s0 -> s3 [81, 81] { R9127 += 1, R40 += 1 };
  s0 -> s1 [82, 65535] { R9127 += 1, R40 += 1 };
  s1 -> s1 [0, 80] { R9127 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R9127 += 1, R40 += 1 };
  s1 -> s3 [81, 81] { R9127 += 1, R40 += 1 };
  s1 -> s1 [82, 65535] { R9127 += 1, R40 += 1 };
  s2 -> s2 [0, 65535] { R9127 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 80] { R9129 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R9128 += 1, R9129 += 1 };
  s0 -> s2 [81, 81] { R9129 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [81, 81] { R9129 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [82, 65535] { R9129 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 80] { R9129 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R9129 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [81, 81] { R9129 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [82, 65535] { R9129 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R9129 += 1, R42 += 1, R43 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 80] { R9131 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R9130 += 1, R9131 += 1 };
  s0 -> s2 [81, 81] { R9131 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [81, 81] { R9131 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [82, 65535] { R9131 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 80] { R9131 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R9131 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [81, 81] { R9131 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [82, 65535] { R9131 += 1, R46 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R9131 += 1, R46 += 1, R47 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 80] { R9133 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R9132 += 1, R9133 += 1 };
  s0 -> s2 [81, 81] { R9133 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [81, 81] { R9133 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [82, 65535] { R9133 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 80] { R9133 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R9133 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [81, 81] { R9133 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [82, 65535] { R9133 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R9133 += 1, R52 += 1, R53 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 80] { R9135 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R9134 += 1, R9135 += 1 };
  s0 -> s2 [81, 81] { R9135 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [81, 81] { R9135 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [82, 65535] { R9135 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 80] { R9135 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R9135 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [81, 81] { R9135 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [82, 65535] { R9135 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R9135 += 1, R56 += 1, R57 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 80] { R9137 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R9136 += 1, R9137 += 1 };
  s0 -> s2 [81, 81] { R9137 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [81, 81] { R9137 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [82, 65535] { R9137 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 80] { R9137 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R9137 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [81, 81] { R9137 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [82, 65535] { R9137 += 1, R62 += 1, R63 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R9137 += 1, R62 += 1, R63 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 80] { R9157 += 1 };
  s0 -> s0 [0, 65535] { R9156 += 1, R9157 += 1 };
  s0 -> s2 [81, 81] { R9157 += 1 };
  s0 -> s1 [82, 65535] { R9157 += 1 };
  s1 -> s1 [0, 80] { R9157 += 1 };
  s1 -> s2 [81, 81] { R9157 += 1 };
  s1 -> s1 [82, 65535] { R9157 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R9157 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R9158 += 1, R9159 += 1 };
  s0 -> s1 [0, 65535] { R9159 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R9159 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 80] { R9161 += 1 };
  s0 -> s0 [0, 65535] { R9160 += 1, R9161 += 1 };
  s0 -> s2 [0, 65535] { R9161 += 1, R8 += 1 };
  s0 -> s3 [81, 81] { R9161 += 1 };
  s0 -> s1 [82, 65535] { R9161 += 1 };
  s1 -> s1 [0, 80] { R9161 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [81, 81] { R9161 += 1 };
  s1 -> s1 [82, 65535] { R9161 += 1 };
  s2 -> s1 [0, 80] { R9161 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R9161 += 1, R8 += 1 };
  s2 -> s3 [81, 81] { R9161 += 1 };
  s2 -> s1 [82, 65535] { R9161 += 1 };
  s3 -> s3 [0, 65535] { R9161 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 80] { R9163 += 1, R9101 += 1 };
  s0 -> s0 [0, 65535] { R9162 += 1, R9163 += 1 };
  s0 -> s2 [0, 65535] { R9163 += 1, R9100 += 1, R9101 += 1 };
  s0 -> s1 [82, 65535] { R9163 += 1, R9101 += 1 };
  s1 -> s1 [0, 80] { R9163 += 1, R9101 += 1 };
  s1 -> s1 [0, 65535] { R9163 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [82, 65535] { R9163 += 1, R9101 += 1 };
  s2 -> s1 [0, 80] { R9163 += 1, R9101 += 1 };
  s2 -> s2 [0, 65535] { R9163 += 1, R9100 += 1, R9101 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [82, 65535] { R9163 += 1, R9101 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R9165 += 1, R9102 += 1, R9103 += 1 };
  s0 -> s0 [0, 65535] { R9164 += 1, R9165 += 1 };
  s0 -> s2 [0, 65535] { R9165 += 1, R9103 += 1, R17 += 1 };
  s1 -> s1 [0, 65535] { R9165 += 1, R9102 += 1, R9103 += 1 };
  s1 -> s2 [0, 65535] { R9165 += 1, R9103 += 1, R17 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R9165 += 1 };
  s2 -> s2 [0, 65535] { R9165 += 1, R9103 += 1, R17 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R9165 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s0 [0, 65535] { R9166 += 1, R9167 += 1 };
  s0 -> s1 [0, 65535] { R9167 += 1, R9104 += 1, R9105 += 1 };
  s0 -> s2 [0, 65535] { R9167 += 1, R9105 += 1 };
  s1 -> s1 [0, 65535] { R9167 += 1, R9104 += 1, R9105 += 1 };
  s1 -> s2 [0, 65535] { R9167 += 1, R9105 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R9167 += 1, R9105 += 1 };
  s2 -> s3 [0, 65535] { R9167 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R9167 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R9169 += 1, R9107 += 1, R67 += 1 };
  s0 -> s0 [0, 65535] { R9168 += 1, R9169 += 1 };
  s0 -> s2 [0, 65535] { R9169 += 1, R9106 += 1, R9107 += 1 };
  s1 -> s4 [0, 65535] { R9169 += 1 };
  s1 -> s1 [0, 65535] { R9169 += 1, R9107 += 1, R67 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R9169 += 1, R9107 += 1, R67 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R9169 += 1, R9106 += 1, R9107 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R9169 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 81] { R9171 += 1, R9109 += 1 };
  s0 -> s2 [0, 65535] { R9171 += 1, R9109 += 1, R69 += 1 };
  s0 -> s3 [0, 65535] { R9171 += 1, R9108 += 1, R9109 += 1 };
  s0 -> s0 [0, 65535] { R9170 += 1, R9171 += 1 };
  s0 -> s1 [83, 65535] { R9171 += 1, R9109 += 1 };
  s1 -> s1 [0, 81] { R9171 += 1, R9109 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R9171 += 1 };
  s1 -> s1 [83, 65535] { R9171 += 1, R9109 += 1 };
  s2 -> s1 [0, 81] { R9171 += 1, R9109 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R9171 += 1, R9109 += 1, R69 += 1 };
  s2 -> s5 [0, 65535] { R9171 += 1 };
  s2 -> s1 [83, 65535] { R9171 += 1, R9109 += 1 };
  s3 -> s1 [0, 81] { R9171 += 1, R9109 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R9171 += 1, R9109 += 1, R69 += 1 };
  s3 -> s3 [0, 65535] { R9171 += 1, R9108 += 1, R9109 += 1 };
  s3 -> s1 [83, 65535] { R9171 += 1, R9109 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R9171 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 81] { R9173 += 1, R9111 += 1, R73 += 1 };
  s0 -> s2 [0, 65535] { R9173 += 1, R9110 += 1, R9111 += 1 };
  s0 -> s0 [0, 65535] { R9172 += 1, R9173 += 1 };
  s0 -> s3 [0, 65535] { R9173 += 1, R9111 += 1, R72 += 1, R73 += 1 };
  s0 -> s1 [83, 65535] { R9173 += 1, R9111 += 1, R73 += 1 };
  s1 -> s1 [0, 81] { R9173 += 1, R9111 += 1, R73 += 1 };
  s1 -> s1 [0, 65535] { R9173 += 1, R9111 += 1 };
  s1 -> s4 [0, 65535] { R9173 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [83, 65535] { R9173 += 1, R9111 += 1, R73 += 1 };
  s2 -> s1 [0, 81] { R9173 += 1, R9111 += 1, R73 += 1 };
  s2 -> s2 [0, 65535] { R9173 += 1, R9110 += 1, R9111 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R9173 += 1, R9111 += 1, R72 += 1, R73 += 1 };
  s2 -> s1 [83, 65535] { R9173 += 1, R9111 += 1, R73 += 1 };
  s3 -> s1 [0, 81] { R9173 += 1, R9111 += 1, R73 += 1 };
  s3 -> s4 [0, 65535] { R9173 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R9173 += 1, R9111 += 1, R72 += 1, R73 += 1 };
  s3 -> s1 [83, 65535] { R9173 += 1, R9111 += 1, R73 += 1 };
  s4 -> s4 [0, 65535] { R9173 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s0 [0, 65535] { R9174 += 1, R9175 += 1 };
  s0 -> s1 [0, 65535] { R9175 += 1, R9113 += 1 };
  s0 -> s2 [0, 65535] { R9175 += 1, R9112 += 1, R9113 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R9175 += 1, R9113 += 1 };
  s1 -> s4 [0, 65535] { R9175 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R9175 += 1, R9113 += 1 };
  s2 -> s2 [0, 65535] { R9175 += 1, R9112 += 1, R9113 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R9175 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 82] { R9177 += 1, R9115 += 1, R8985 += 1 };
  s0 -> s2 [0, 65535] { R9177 += 1, R9114 += 1, R9115 += 1 };
  s0 -> s0 [0, 65535] { R9176 += 1, R9177 += 1 };
  s0 -> s3 [90, 90] { R9177 += 1, R9115 += 1, R8985 += 1 };
  s0 -> s1 [91, 65535] { R9177 += 1, R9115 += 1, R8985 += 1 };
  s1 -> s1 [0, 82] { R9177 += 1, R9115 += 1, R8985 += 1 };
  s1 -> s3 [90, 90] { R9177 += 1, R9115 += 1, R8985 += 1 };
  s1 -> s1 [91, 65535] { R9177 += 1, R9115 += 1, R8985 += 1 };
  s2 -> s1 [0, 82] { R9177 += 1, R9115 += 1, R8985 += 1 };
  s2 -> s2 [0, 65535] { R9177 += 1, R9114 += 1, R9115 += 1 };
  s2 -> s3 [90, 90] { R9177 += 1, R9115 += 1, R8985 += 1 };
  s2 -> s1 [91, 65535] { R9177 += 1, R9115 += 1, R8985 += 1 };
  s3 -> s3 [0, 82] { R9177 += 1, R9115 += 1, R8985 += 1 };
  s3 -> s4 [0, 65535] { R9177 += 1 };
  s3 -> s3 [0, 65535] { R9177 += 1, R9115 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [90, 65535] { R9177 += 1, R9115 += 1, R8985 += 1 };
  s4 -> s4 [0, 65535] { R9177 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R9179 += 1, R9117 += 1, R8990 += 1, R8991 += 1 };
  s0 -> s0 [0, 65535] { R9178 += 1, R9179 += 1 };
  s0 -> s2 [0, 65535] { R9179 += 1, R9117 += 1, R8989 += 1, R8990 += 1 };
  s0 -> s3 [0, 65535] { R9179 += 1, R9116 += 1, R9117 += 1 };
  s1 -> s5 [0, 65535] { R9179 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R9179 += 1, R9117 += 1, R8990 += 1, R8991 += 1 };
  s1 -> s6 [0, 65535] { R9179 += 1, R9117 += 1 };
  s2 -> s5 [0, 65535] { R9179 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R9179 += 1, R9117 += 1, R8990 += 1, R8991 += 1 };
  s2 -> s2 [0, 65535] { R9179 += 1, R9117 += 1, R8989 += 1, R8990 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R9179 += 1, R9117 += 1, R8990 += 1, R8991 += 1 };
  s3 -> s2 [0, 65535] { R9179 += 1, R9117 += 1, R8989 += 1, R8990 += 1 };
  s3 -> s3 [0, 65535] { R9179 += 1, R9116 += 1, R9117 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R9179 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R9179 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R9179 += 1, R9117 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 81] { R9181 += 1, R9119 += 1, R9099 += 1 };
  s0 -> s0 [0, 65535] { R9180 += 1, R9181 += 1 };
  s0 -> s1 [0, 65535] { R9181 += 1, R9119 += 1 };
  s0 -> s2 [0, 65535] { R9181 += 1, R9118 += 1, R9119 += 1 };
  s0 -> s3 [82, 82] { R9181 += 1, R9119 += 1, R9099 += 1 };
  s0 -> s4 [82, 82] { R9181 += 1, R9119 += 1, R9099 += 1 };
  s0 -> s1 [91, 65535] { R9181 += 1, R9119 += 1, R9099 += 1 };
  s1 -> s1 [0, 81] { R9181 += 1, R9119 += 1, R9099 += 1 };
  s1 -> s1 [0, 65535] { R9181 += 1, R9119 += 1 };
  s1 -> s5 [0, 65535] { R9181 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [82, 82] { R9181 += 1, R9119 += 1, R9099 += 1 };
  s1 -> s4 [82, 82] { R9181 += 1, R9119 += 1, R9099 += 1 };
  s1 -> s1 [91, 65535] { R9181 += 1, R9119 += 1, R9099 += 1 };
  s2 -> s1 [0, 81] { R9181 += 1, R9119 += 1, R9099 += 1 };
  s2 -> s1 [0, 65535] { R9181 += 1, R9119 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R9181 += 1, R9118 += 1, R9119 += 1 };
  s2 -> s3 [82, 82] { R9181 += 1, R9119 += 1, R9099 += 1 };
  s2 -> s4 [82, 82] { R9181 += 1, R9119 += 1, R9099 += 1 };
  s2 -> s1 [91, 65535] { R9181 += 1, R9119 += 1, R9099 += 1 };
  s3 -> s3 [0, 82] { R9181 += 1, R9119 += 1, R9099 += 1 };
  s3 -> s3 [0, 65535] { R9181 += 1, R9119 += 1 };
  s3 -> s5 [0, 65535] { R9181 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [91, 65535] { R9181 += 1, R9119 += 1, R9099 += 1 };
  s4 -> s4 [0, 65535] { R9181 += 1, R9119 += 1 };
  s4 -> s5 [0, 65535] { R9181 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R9181 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R9183 += 1, R9138 += 1, R9139 += 1 };
  s0 -> s0 [0, 65535] { R9182 += 1, R9183 += 1 };
  s0 -> s2 [0, 65535] { R9183 += 1, R9139 += 1, R18 += 1 };
  s1 -> s1 [0, 65535] { R9183 += 1, R9138 += 1, R9139 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R9183 += 1, R9139 += 1, R18 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R9183 += 1, R9139 += 1, R18 += 1 };
  s2 -> s4 [0, 65535] { R9183 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R9183 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 80] { R9185 += 1, R9141 += 1 };
  s0 -> s0 [0, 65535] { R9184 += 1, R9185 += 1 };
  s0 -> s2 [0, 65535] { R9185 += 1, R9140 += 1, R9141 += 1 };
  s0 -> s3 [81, 81] { R9185 += 1, R9141 += 1 };
  s0 -> s4 [81, 81] { R9185 += 1, R9141 += 1 };
  s0 -> s5 [82, 82] { R9185 += 1, R9141 += 1 };
  s0 -> s1 [83, 65535] { R9185 += 1, R9141 += 1 };
  s1 -> s1 [0, 80] { R9185 += 1, R9141 += 1 };
  s1 -> s3 [81, 81] { R9185 += 1, R9141 += 1 };
  s1 -> s4 [81, 81] { R9185 += 1, R9141 += 1 };
  s1 -> s5 [82, 82] { R9185 += 1, R9141 += 1 };
  s1 -> s1 [83, 65535] { R9185 += 1, R9141 += 1 };
  s2 -> s1 [0, 80] { R9185 += 1, R9141 += 1 };
  s2 -> s2 [0, 65535] { R9185 += 1, R9140 += 1, R9141 += 1 };
  s2 -> s3 [81, 81] { R9185 += 1, R9141 += 1 };
  s2 -> s4 [81, 81] { R9185 += 1, R9141 += 1 };
  s2 -> s5 [82, 82] { R9185 += 1, R9141 += 1 };
  s2 -> s1 [83, 65535] { R9185 += 1, R9141 += 1 };
  s3 -> s3 [0, 81] { R9185 += 1, R9141 += 1 };
  s3 -> s8 [82, 82] { R9185 += 1, R9141 += 1 };
  s3 -> s3 [83, 65535] { R9185 += 1, R9141 += 1 };
  s5 -> s5 [0, 80] { R9185 += 1, R9141 += 1 };
  s5 -> s5 [0, 65535] { R9185 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [81, 81] { R9185 += 1, R9141 += 1 };
  s5 -> s8 [81, 81] { R9185 += 1, R9141 += 1 };
  s5 -> s5 [82, 65535] { R9185 += 1, R9141 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R9185 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s6 [0, 65535];
  s8 -> s9 [0, 65535] { R9185 += 1 };
  s8 -> s8 [0, 65535] { R9185 += 1, R9141 += 1 };
  s9 -> s6 [0, 65535];
  s9 -> s9 [0, 65535] { R9185 += 1 };
  accepting s8, s5, s9, s6, s7;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 80] { R9187 += 1, R9143 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R9186 += 1, R9187 += 1 };
  s0 -> s2 [0, 65535] { R9187 += 1, R9142 += 1, R9143 += 1 };
  s0 -> s3 [81, 81] { R9187 += 1, R9143 += 1, R66 += 1 };
  s0 -> s4 [81, 81] { R9187 += 1, R9143 += 1, R66 += 1 };
  s0 -> s1 [82, 65535] { R9187 += 1, R9143 += 1, R66 += 1 };
  s1 -> s1 [0, 80] { R9187 += 1, R9143 += 1, R66 += 1 };
  s1 -> s1 [0, 65535] { R9187 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [81, 81] { R9187 += 1, R9143 += 1, R66 += 1 };
  s1 -> s4 [81, 81] { R9187 += 1, R9143 += 1, R66 += 1 };
  s1 -> s1 [82, 65535] { R9187 += 1, R9143 += 1, R66 += 1 };
  s2 -> s1 [0, 80] { R9187 += 1, R9143 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R9187 += 1, R9142 += 1, R9143 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [81, 81] { R9187 += 1, R9143 += 1, R66 += 1 };
  s2 -> s4 [81, 81] { R9187 += 1, R9143 += 1, R66 += 1 };
  s2 -> s1 [82, 65535] { R9187 += 1, R9143 += 1, R66 += 1 };
  s3 -> s3 [0, 65535] { R9187 += 1, R9143 += 1, R66 += 1 };
  s3 -> s6 [0, 65535] { R9187 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R9187 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9187 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 80] { R9189 += 1, R9145 += 1, R68 += 1 };
  s0 -> s2 [0, 65535] { R9189 += 1, R9144 += 1, R9145 += 1 };
  s0 -> s0 [0, 65535] { R9188 += 1, R9189 += 1 };
  s0 -> s3 [81, 81] { R9189 += 1, R9145 += 1, R68 += 1 };
  s0 -> s4 [81, 81] { R9189 += 1, R9145 += 1, R68 += 1 };
  s0 -> s1 [82, 65535] { R9189 += 1, R9145 += 1, R68 += 1 };
  s1 -> s1 [0, 80] { R9189 += 1, R9145 += 1, R68 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R9189 += 1 };
  s1 -> s3 [81, 81] { R9189 += 1, R9145 += 1, R68 += 1 };
  s1 -> s4 [81, 81] { R9189 += 1, R9145 += 1, R68 += 1 };
  s1 -> s1 [82, 65535] { R9189 += 1, R9145 += 1, R68 += 1 };
  s2 -> s1 [0, 80] { R9189 += 1, R9145 += 1, R68 += 1 };
  s2 -> s2 [0, 65535] { R9189 += 1, R9144 += 1, R9145 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [81, 81] { R9189 += 1, R9145 += 1, R68 += 1 };
  s2 -> s4 [81, 81] { R9189 += 1, R9145 += 1, R68 += 1 };
  s2 -> s1 [82, 65535] { R9189 += 1, R9145 += 1, R68 += 1 };
  s3 -> s3 [0, 65535] { R9189 += 1, R9145 += 1, R68 += 1 };
  s3 -> s6 [0, 65535] { R9189 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R9189 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9189 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 80] { R9191 += 1, R9147 += 1, R70 += 1, R71 += 1 };
  s0 -> s2 [0, 65535] { R9191 += 1, R9146 += 1, R9147 += 1 };
  s0 -> s0 [0, 65535] { R9190 += 1, R9191 += 1 };
  s0 -> s3 [81, 81] { R9191 += 1, R9147 += 1, R70 += 1, R71 += 1 };
  s0 -> s4 [81, 81] { R9191 += 1, R9147 += 1, R70 += 1, R71 += 1 };
  s0 -> s1 [82, 65535] { R9191 += 1, R9147 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 80] { R9191 += 1, R9147 += 1, R70 += 1, R71 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R9191 += 1 };
  s1 -> s3 [81, 81] { R9191 += 1, R9147 += 1, R70 += 1, R71 += 1 };
  s1 -> s4 [81, 81] { R9191 += 1, R9147 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [82, 65535] { R9191 += 1, R9147 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [0, 80] { R9191 += 1, R9147 += 1, R70 += 1, R71 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R9191 += 1, R9146 += 1, R9147 += 1 };
  s2 -> s3 [81, 81] { R9191 += 1, R9147 += 1, R70 += 1, R71 += 1 };
  s2 -> s4 [81, 81] { R9191 += 1, R9147 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [82, 65535] { R9191 += 1, R9147 += 1, R70 += 1, R71 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R9191 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R9191 += 1, R9147 += 1, R70 += 1, R71 += 1 };
  s4 -> s6 [0, 65535] { R9191 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9191 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 80] { R9193 += 1, R9149 += 1, R7707 += 1, R7708 += 1 };
  s0 -> s2 [0, 80] { R9193 += 1, R9149 += 1, R7706 += 1, R7707 += 1 };
  s0 -> s3 [0, 65535] { R9193 += 1, R9148 += 1, R9149 += 1 };
  s0 -> s0 [0, 65535] { R9192 += 1, R9193 += 1 };
  s0 -> s4 [81, 81] { R9193 += 1, R9149 += 1, R7707 += 1, R7708 += 1 };
  s0 -> s5 [81, 81] { R9193 += 1, R9149 += 1, R7706 += 1, R7707 += 1 };
  s0 -> s6 [81, 81] { R9193 += 1, R9149 += 1, R7707 += 1, R7708 += 1 };
  s0 -> s7 [81, 81] { R9193 += 1, R9149 += 1, R7706 += 1, R7707 += 1 };
  s0 -> s1 [82, 65535] { R9193 += 1, R9149 += 1, R7707 += 1, R7708 += 1 };
  s0 -> s2 [82, 65535] { R9193 += 1, R9149 += 1, R7706 += 1, R7707 += 1 };
  s1 -> s1 [0, 80] { R9193 += 1, R9149 += 1, R7707 += 1, R7708 += 1 };
  s1 -> s11 [0, 80] { R9193 += 1, R9149 += 1 };
  s1 -> s4 [81, 81] { R9193 += 1, R9149 += 1, R7707 += 1, R7708 += 1 };
  s1 -> s8 [81, 81] { R9193 += 1, R9149 += 1 };
  s1 -> s6 [81, 81] { R9193 += 1, R9149 += 1, R7707 += 1, R7708 += 1 };
  s1 -> s12 [81, 81] { R9193 += 1, R9149 += 1 };
  s1 -> s1 [82, 65535] { R9193 += 1, R9149 += 1, R7707 += 1, R7708 += 1 };
  s1 -> s11 [82, 65535] { R9193 += 1, R9149 += 1 };
  s2 -> s1 [0, 80] { R9193 += 1, R9149 += 1, R7707 += 1, R7708 += 1 };
  s2 -> s2 [0, 80] { R9193 += 1, R9149 += 1, R7706 += 1, R7707 += 1 };
  s2 -> s4 [81, 81] { R9193 += 1, R9149 += 1, R7707 += 1, R7708 += 1 };
  s2 -> s5 [81, 81] { R9193 += 1, R9149 += 1, R7706 += 1, R7707 += 1 };
  s2 -> s6 [81, 81] { R9193 += 1, R9149 += 1, R7707 += 1, R7708 += 1 };
  s2 -> s7 [81, 81] { R9193 += 1, R9149 += 1, R7706 += 1, R7707 += 1 };
  s2 -> s1 [82, 65535] { R9193 += 1, R9149 += 1, R7707 += 1, R7708 += 1 };
  s2 -> s2 [82, 65535] { R9193 += 1, R9149 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s1 [0, 80] { R9193 += 1, R9149 += 1, R7707 += 1, R7708 += 1 };
  s3 -> s2 [0, 80] { R9193 += 1, R9149 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s3 [0, 65535] { R9193 += 1, R9148 += 1, R9149 += 1 };
  s3 -> s4 [81, 81] { R9193 += 1, R9149 += 1, R7707 += 1, R7708 += 1 };
  s3 -> s5 [81, 81] { R9193 += 1, R9149 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s6 [81, 81] { R9193 += 1, R9149 += 1, R7707 += 1, R7708 += 1 };
  s3 -> s7 [81, 81] { R9193 += 1, R9149 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s1 [82, 65535] { R9193 += 1, R9149 += 1, R7707 += 1, R7708 += 1 };
  s3 -> s2 [82, 65535] { R9193 += 1, R9149 += 1, R7706 += 1, R7707 += 1 };
  s6 -> s8 [0, 65535] { R9193 += 1, R9149 += 1 };
  s6 -> s6 [0, 65535] { R9193 += 1, R9149 += 1, R7707 += 1, R7708 += 1 };
  s7 -> s6 [0, 65535] { R9193 += 1, R9149 += 1, R7707 += 1, R7708 += 1 };
  s7 -> s7 [0, 65535] { R9193 += 1, R9149 += 1, R7706 += 1, R7707 += 1 };
  s8 -> s8 [0, 65535] { R9193 += 1, R9149 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [0, 65535] { R9193 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R9193 += 1 };
  s11 -> s11 [0, 80] { R9193 += 1, R9149 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R9193 += 1 };
  s11 -> s8 [81, 81] { R9193 += 1, R9149 += 1 };
  s11 -> s12 [81, 81] { R9193 += 1, R9149 += 1 };
  s11 -> s11 [82, 65535] { R9193 += 1, R9149 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R9193 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 80] { R9195 += 1, R9151 += 1, R8983 += 1 };
  s0 -> s2 [0, 80] { R9195 += 1, R9151 += 1, R8982 += 1, R8983 += 1 };
  s0 -> s0 [0, 65535] { R9194 += 1, R9195 += 1 };
  s0 -> s3 [0, 65535] { R9195 += 1, R9150 += 1, R9151 += 1 };
  s0 -> s4 [81, 81] { R9195 += 1, R9151 += 1, R8982 += 1, R8983 += 1 };
  s0 -> s5 [81, 81] { R9195 += 1, R9151 += 1, R8982 += 1, R8983 += 1 };
  s0 -> s6 [81, 81] { R9195 += 1, R9151 += 1, R8983 += 1 };
  s0 -> s7 [81, 81] { R9195 += 1, R9151 += 1, R8983 += 1 };
  s0 -> s1 [82, 82] { R9195 += 1, R9151 += 1, R8983 += 1 };
  s0 -> s2 [82, 65535] { R9195 += 1, R9151 += 1, R8982 += 1, R8983 += 1 };
  s0 -> s1 [91, 65535] { R9195 += 1, R9151 += 1, R8983 += 1 };
  s1 -> s1 [0, 80] { R9195 += 1, R9151 += 1, R8983 += 1 };
  s1 -> s1 [0, 65535] { R9195 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s6 [81, 81] { R9195 += 1, R9151 += 1, R8983 += 1 };
  s1 -> s7 [81, 81] { R9195 += 1, R9151 += 1, R8983 += 1 };
  s1 -> s1 [82, 82] { R9195 += 1, R9151 += 1, R8983 += 1 };
  s1 -> s1 [91, 65535] { R9195 += 1, R9151 += 1, R8983 += 1 };
  s2 -> s1 [0, 80] { R9195 += 1, R9151 += 1, R8983 += 1 };
  s2 -> s2 [0, 80] { R9195 += 1, R9151 += 1, R8982 += 1, R8983 += 1 };
  s2 -> s4 [81, 81] { R9195 += 1, R9151 += 1, R8982 += 1, R8983 += 1 };
  s2 -> s5 [81, 81] { R9195 += 1, R9151 += 1, R8982 += 1, R8983 += 1 };
  s2 -> s6 [81, 81] { R9195 += 1, R9151 += 1, R8983 += 1 };
  s2 -> s7 [81, 81] { R9195 += 1, R9151 += 1, R8983 += 1 };
  s2 -> s1 [82, 82] { R9195 += 1, R9151 += 1, R8983 += 1 };
  s2 -> s2 [82, 65535] { R9195 += 1, R9151 += 1, R8982 += 1, R8983 += 1 };
  s2 -> s1 [91, 65535] { R9195 += 1, R9151 += 1, R8983 += 1 };
  s3 -> s1 [0, 80] { R9195 += 1, R9151 += 1, R8983 += 1 };
  s3 -> s2 [0, 80] { R9195 += 1, R9151 += 1, R8982 += 1, R8983 += 1 };
  s3 -> s3 [0, 65535] { R9195 += 1, R9150 += 1, R9151 += 1 };
  s3 -> s4 [81, 81] { R9195 += 1, R9151 += 1, R8982 += 1, R8983 += 1 };
  s3 -> s5 [81, 81] { R9195 += 1, R9151 += 1, R8982 += 1, R8983 += 1 };
  s3 -> s6 [81, 81] { R9195 += 1, R9151 += 1, R8983 += 1 };
  s3 -> s7 [81, 81] { R9195 += 1, R9151 += 1, R8983 += 1 };
  s3 -> s1 [82, 82] { R9195 += 1, R9151 += 1, R8983 += 1 };
  s3 -> s2 [82, 65535] { R9195 += 1, R9151 += 1, R8982 += 1, R8983 += 1 };
  s3 -> s1 [91, 65535] { R9195 += 1, R9151 += 1, R8983 += 1 };
  s4 -> s6 [0, 82] { R9195 += 1, R9151 += 1, R8983 += 1 };
  s4 -> s4 [0, 65535] { R9195 += 1, R9151 += 1, R8982 += 1, R8983 += 1 };
  s4 -> s6 [91, 65535] { R9195 += 1, R9151 += 1, R8983 += 1 };
  s6 -> s6 [0, 82] { R9195 += 1, R9151 += 1, R8983 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R9195 += 1 };
  s6 -> s6 [91, 65535] { R9195 += 1, R9151 += 1, R8983 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R9195 += 1 };
  s8 -> s8 [0, 65535];
  accepting s1, s6, s7, s8;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 80] { R9197 += 1, R9153 += 1, R8986 += 1, R8987 += 1 };
  s0 -> s0 [0, 65535] { R9196 += 1, R9197 += 1 };
  s0 -> s2 [0, 65535] { R9197 += 1, R9152 += 1, R9153 += 1 };
  s0 -> s3 [81, 81] { R9197 += 1, R9153 += 1, R8986 += 1, R8987 += 1 };
  s0 -> s4 [81, 81] { R9197 += 1, R9153 += 1, R8986 += 1, R8987 += 1 };
  s0 -> s1 [82, 65535] { R9197 += 1, R9153 += 1, R8986 += 1, R8987 += 1 };
  s1 -> s1 [0, 80] { R9197 += 1, R9153 += 1, R8986 += 1, R8987 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R9197 += 1 };
  s1 -> s3 [81, 81] { R9197 += 1, R9153 += 1, R8986 += 1, R8987 += 1 };
  s1 -> s4 [81, 81] { R9197 += 1, R9153 += 1, R8986 += 1, R8987 += 1 };
  s1 -> s1 [82, 65535] { R9197 += 1, R9153 += 1, R8986 += 1, R8987 += 1 };
  s2 -> s1 [0, 80] { R9197 += 1, R9153 += 1, R8986 += 1, R8987 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R9197 += 1, R9152 += 1, R9153 += 1 };
  s2 -> s3 [81, 81] { R9197 += 1, R9153 += 1, R8986 += 1, R8987 += 1 };
  s2 -> s4 [81, 81] { R9197 += 1, R9153 += 1, R8986 += 1, R8987 += 1 };
  s2 -> s1 [82, 65535] { R9197 += 1, R9153 += 1, R8986 += 1, R8987 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R9197 += 1, R9153 += 1, R8986 += 1, R8987 += 1 };
  s3 -> s6 [0, 65535] { R9197 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R9197 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9197 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 80] { R9199 += 1, R9155 += 1, R9096 += 1, R9097 += 1 };
  s0 -> s2 [0, 80] { R9199 += 1, R9155 += 1, R9097 += 1 };
  s0 -> s3 [0, 65535] { R9199 += 1, R9154 += 1, R9155 += 1 };
  s0 -> s0 [0, 65535] { R9198 += 1, R9199 += 1 };
  s0 -> s4 [81, 81] { R9199 += 1, R9155 += 1, R9096 += 1, R9097 += 1 };
  s0 -> s5 [81, 81] { R9199 += 1, R9155 += 1, R9097 += 1 };
  s0 -> s6 [81, 81] { R9199 += 1, R9155 += 1, R9097 += 1 };
  s0 -> s7 [81, 81] { R9199 += 1, R9155 += 1, R9096 += 1, R9097 += 1 };
  s0 -> s1 [82, 65535] { R9199 += 1, R9155 += 1, R9096 += 1, R9097 += 1 };
  s0 -> s2 [91, 65535] { R9199 += 1, R9155 += 1, R9097 += 1 };
  s1 -> s1 [0, 80] { R9199 += 1, R9155 += 1, R9096 += 1, R9097 += 1 };
  s1 -> s2 [0, 80] { R9199 += 1, R9155 += 1, R9097 += 1 };
  s1 -> s4 [81, 81] { R9199 += 1, R9155 += 1, R9096 += 1, R9097 += 1 };
  s1 -> s5 [81, 81] { R9199 += 1, R9155 += 1, R9097 += 1 };
  s1 -> s6 [81, 81] { R9199 += 1, R9155 += 1, R9097 += 1 };
  s1 -> s7 [81, 81] { R9199 += 1, R9155 += 1, R9096 += 1, R9097 += 1 };
  s1 -> s1 [82, 65535] { R9199 += 1, R9155 += 1, R9096 += 1, R9097 += 1 };
  s1 -> s2 [91, 65535] { R9199 += 1, R9155 += 1, R9097 += 1 };
  s2 -> s2 [0, 80] { R9199 += 1, R9155 += 1, R9097 += 1 };
  s2 -> s2 [0, 65535] { R9199 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s5 [81, 81] { R9199 += 1, R9155 += 1 };
  s2 -> s6 [81, 81] { R9199 += 1, R9155 += 1 };
  s2 -> s2 [82, 65535] { R9199 += 1, R9155 += 1 };
  s2 -> s2 [91, 65535] { R9199 += 1, R9155 += 1, R9097 += 1 };
  s3 -> s1 [0, 80] { R9199 += 1, R9155 += 1, R9096 += 1, R9097 += 1 };
  s3 -> s2 [0, 80] { R9199 += 1, R9155 += 1, R9097 += 1 };
  s3 -> s3 [0, 65535] { R9199 += 1, R9154 += 1, R9155 += 1 };
  s3 -> s4 [81, 81] { R9199 += 1, R9155 += 1, R9096 += 1, R9097 += 1 };
  s3 -> s5 [81, 81] { R9199 += 1, R9155 += 1, R9097 += 1 };
  s3 -> s6 [81, 81] { R9199 += 1, R9155 += 1, R9097 += 1 };
  s3 -> s7 [81, 81] { R9199 += 1, R9155 += 1, R9096 += 1, R9097 += 1 };
  s3 -> s1 [82, 65535] { R9199 += 1, R9155 += 1, R9096 += 1, R9097 += 1 };
  s3 -> s2 [91, 65535] { R9199 += 1, R9155 += 1, R9097 += 1 };
  s4 -> s5 [0, 81] { R9199 += 1, R9155 += 1, R9097 += 1 };
  s4 -> s4 [0, 65535] { R9199 += 1, R9155 += 1, R9096 += 1, R9097 += 1 };
  s4 -> s5 [91, 65535] { R9199 += 1, R9155 += 1, R9097 += 1 };
  s5 -> s5 [0, 81] { R9199 += 1, R9155 += 1, R9097 += 1 };
  s5 -> s5 [0, 65535] { R9199 += 1, R9155 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s9 [0, 65535] { R9199 += 1 };
  s5 -> s5 [91, 65535] { R9199 += 1, R9155 += 1, R9097 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R9199 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R9199 += 1 };
  accepting s8, s5, s2, s9, s6;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [113, 113];
  accepting s1;
};
};
synchronised {  // Automata constraining c1
automaton c1_0 {
  init s0;
  s0 -> s1 [114, 114];
  accepting s1;
};
};
constraint R1 = R9115 && R2 = R9199 && R20 - R9199 = -1 && R21 = R9199 && R22 - R9199 = -1 && R23 = R9199 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R8985 + -1*R8983 - R53 = 0 && R52 + R8984 + R8982 = 0 && R9114 = 0 && R9140 = 0 && R9141 = 0 && R9148 = 0 && R9149 = 0 && R9150 = 0 && R9151 = 0 && R9154 = 0 && R9155 = 0 && R9156 = 0 && R9157 = R9199 && R9158 = 0 && R9159 = R9199 && R9160 = 0 && R9161 = R9199 && R9162 = 0 && R9163 = R9199 && R9164 = 0 && R9165 = R9199 && R9166 = 0 && R9167 = R9199 && R9168 = 0 && R9169 = R9199 && R9170 = 0 && R9171 = R9199 && R9172 = 0 && R9173 = R9199 && R9174 = 0 && R9175 = R9199 && R9176 = 0 && R9177 = R9199 && R9178 = 0 && R9179 = R9199 && R9180 = 0 && R9181 = R9199 && R9182 = 0 && R9183 = R9199 && R9184 = 0 && R9185 = R9199 && R9186 = 0 && R9187 = R9199 && R9188 = 0 && R9189 = R9199 && R9190 = 0 && R9191 = R9199 && R9192 = 0 && R9193 = R9199 && R9194 = 0 && R9195 = R9199 && R9196 = 0 && R9197 = R9199 && R9198 = 0 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R8985 + -1*R8983 - R53 < 1 && -1 < R9115 && 0 < R9199 && (R48 + R7711 + R7708 != 0 || ((R42 + R72 + R70 != 0 || R43 + R73 + R71 + -1*R8985 + -1*R8983 - R53 = 0 || R53 + R8985 + R8983 < 1) && (R42 + R72 + R70 = 0 || R53 + R8985 + R8983 < 1))) && (R48 + R7711 + R7708 != 0 || ((R46 + R7709 + R7706 != 0 || R47 + R7710 + R7707 + -1*R8985 + -1*R8983 - R53 = 0 || R53 + R8985 + R8983 < 1) && (R46 + R7709 + R7706 = 0 || R53 + R8985 + R8983 < 1))) && (R9100 != 0 || R9101 = R9115 || (R17 = 0 && R9115 = 0)) && (R9102 != 0 || R9103 = R9115 || (R17 = 0 && R9115 = 0)) && (R9104 != 0 || R9105 = R9115 || (R17 = 0 && R9115 = 0)) && (R9106 != 0 || R9107 = R9115 || (R17 = 0 && R9115 = 0)) && (R9108 != 0 || R9109 = R9115 || (R17 = 0 && R9115 = 0)) && (R9110 != 0 || R9111 = R9115 || (R17 = 0 && R9115 = 0)) && (R9112 != 0 || R9113 = R9115 || (R17 = 0 && R9115 = 0)) && (R9116 != 0 || R9115 = R9117 || (R17 = 0 && R9115 = 0)) && (R9118 != 0 || R9115 = R9119 || (R17 = 0 && R9115 = 0)) && (R18 = 0 || (R9138 = 0 && R9139 = 0)) && (R18 = 0 || (R9142 = 0 && R9143 = 0)) && (R18 = 0 || (R9144 = 0 && R9145 = 0)) && (R18 = 0 || (R9146 = 0 && R9147 = 0)) && (R18 = 0 || (R9152 = 0 && R9153 = 0)) && (R19 = 0 || (R9120 = 0 && R9121 = 0)) && (R19 = 0 || (R9122 = 0 && R9123 = 0)) && (R19 = 0 || (R9124 = 0 && R9125 = 0)) && (R19 = 0 || (R9126 = 0 && R9127 = 0)) && (R19 = 0 || (R9128 = 0 && R9129 = 0)) && (R19 = 0 || (R9130 = 0 && R9131 = 0)) && (R19 = 0 || (R9132 = 0 && R9133 = 0)) && (R19 = 0 || (R9134 = 0 && R9135 = 0)) && (R19 = 0 || (R9136 = 0 && R9137 = 0)) && (R48 + R7711 + R7708 = 0 || (R42 + R72 + R70 = 0 && R43 + R73 + R71 + -1*R8985 + -1*R8983 - R53 = 0)) && (R48 + R7711 + R7708 = 0 || (R46 + R7709 + R7706 = 0 && R47 + R7710 + R7707 + -1*R8985 + -1*R8983 - R53 = 0)) && (R58 + R8991 + R8988 = 0 || (R56 + R8989 + R8986 = 0 && R57 + R8990 + R8987 = 0)) && (R58 + R8991 + R8988 = 0 || (R62 + R9098 + R9096 = 0 && R63 + R9099 + R9097 = 0)) && (R9100 = 0 || (R17 = 0 && R9115 = 0)) && (R9102 = 0 || (R17 = 0 && R9115 = 0)) && (R9104 = 0 || (R17 = 0 && R9115 = 0)) && (R9106 = 0 || (R17 = 0 && R9115 = 0)) && (R9108 = 0 || (R17 = 0 && R9115 = 0)) && (R9110 = 0 || (R17 = 0 && R9115 = 0)) && (R9112 = 0 || (R17 = 0 && R9115 = 0)) && (R9116 = 0 || (R17 = 0 && R9115 = 0)) && (R9118 = 0 || (R17 = 0 && R9115 = 0));
// End of Parikh automata intersection problem
