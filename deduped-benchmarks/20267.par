// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R11522, R11523, R11524, R11525, R12, R15342, R15343, R15344, R15345, R15346, R15347, R17, R17888, R17889, R17890, R17891, R17892, R17893, R17894, R17895, R17896, R17897, R18, R18210, R18211, R18212, R18213, R18214, R18215, R18216, R18217, R18218, R18219, R18220, R18221, R18222, R18223, R18224, R18225, R18226, R18227, R18228, R18229, R18230, R18231, R18232, R18233, R18234, R18235, R18236, R18237, R18238, R18239, R18240, R18241, R18242, R18243, R18244, R18245, R18246, R18247, R18248, R18249, R18250, R18251, R18252, R18253, R18254, R18255, R18256, R18257, R18258, R18259, R18260, R18261, R18262, R18263, R18264, R18265, R18266, R18267, R18268, R18269, R18270, R18271, R18272, R18273, R18274, R18275, R18276, R18277, R18278, R18279, R18280, R18281, R18282, R18283, R18284, R18285, R18286, R18287, R18288, R18289, R18290, R18291, R18292, R18293, R18294, R18295, R18296, R18297, R18298, R18299, R18300, R18301, R18302, R18303, R18304, R18305, R18306, R18307, R18308, R18309, R18310, R18311, R18312, R18313, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [81, 81];
  s0 -> s0 [82, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [81, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 80];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [81, 81];
  s0 -> s1 [82, 65535];
  s1 -> s1 [0, 80];
  s1 -> s2 [81, 81];
  s1 -> s1 [82, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s1 [0, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R25 += 1 };
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R18235 += 1, R19 += 1 };
  s0 -> s0 [0, 65535] { R18234 += 1, R18235 += 1 };
  s1 -> s1 [0, 65535] { R18235 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 80] { R18237 += 1 };
  s0 -> s0 [0, 65535] { R18236 += 1, R18237 += 1 };
  s0 -> s2 [81, 81] { R18237 += 1 };
  s0 -> s3 [81, 81] { R18237 += 1 };
  s0 -> s1 [83, 65535] { R18237 += 1 };
  s1 -> s1 [0, 80] { R18237 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R18237 += 1 };
  s1 -> s3 [81, 81] { R18237 += 1 };
  s1 -> s1 [83, 65535] { R18237 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 81] { R18237 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [83, 65535] { R18237 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 80] { R18239 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R18238 += 1, R18239 += 1 };
  s0 -> s2 [81, 81] { R18239 += 1, R38 += 1 };
  s0 -> s3 [81, 81] { R18239 += 1, R38 += 1 };
  s0 -> s1 [82, 65535] { R18239 += 1, R38 += 1 };
  s1 -> s1 [0, 80] { R18239 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R18239 += 1, R38 += 1 };
  s1 -> s3 [81, 81] { R18239 += 1, R38 += 1 };
  s1 -> s1 [82, 65535] { R18239 += 1, R38 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R18239 += 1, R38 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 80] { R18241 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R18240 += 1, R18241 += 1 };
  s0 -> s2 [81, 81] { R18241 += 1, R40 += 1 };
  s0 -> s3 [81, 81] { R18241 += 1, R40 += 1 };
  s0 -> s1 [82, 65535] { R18241 += 1, R40 += 1 };
  s1 -> s1 [0, 80] { R18241 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R18241 += 1, R40 += 1 };
  s1 -> s3 [81, 81] { R18241 += 1, R40 += 1 };
  s1 -> s1 [82, 65535] { R18241 += 1, R40 += 1 };
  s2 -> s2 [0, 65535] { R18241 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 80] { R18243 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R18242 += 1, R18243 += 1 };
  s0 -> s2 [81, 81] { R18243 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [81, 81] { R18243 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [82, 65535] { R18243 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 80] { R18243 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R18243 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [81, 81] { R18243 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [82, 65535] { R18243 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535] { R18243 += 1, R42 += 1, R43 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 80] { R18245 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R18244 += 1, R18245 += 1 };
  s0 -> s2 [81, 81] { R18245 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [81, 81] { R18245 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [82, 65535] { R18245 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 80] { R18245 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R18245 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [81, 81] { R18245 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [82, 65535] { R18245 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R18245 += 1, R46 += 1, R47 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 80] { R18247 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R18246 += 1, R18247 += 1 };
  s0 -> s2 [81, 81] { R18247 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [81, 81] { R18247 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [82, 65535] { R18247 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 80] { R18247 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R18247 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [81, 81] { R18247 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [82, 65535] { R18247 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535] { R18247 += 1, R52 += 1, R53 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 80] { R18249 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R18248 += 1, R18249 += 1 };
  s0 -> s2 [81, 81] { R18249 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [81, 81] { R18249 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [82, 65535] { R18249 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 80] { R18249 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R18249 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [81, 81] { R18249 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [82, 65535] { R18249 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R18249 += 1, R56 += 1, R57 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 80] { R18251 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R18250 += 1, R18251 += 1 };
  s0 -> s2 [81, 81] { R18251 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [81, 81] { R18251 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [82, 65535] { R18251 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 80] { R18251 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R18251 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [81, 81] { R18251 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [82, 65535] { R18251 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535] { R18251 += 1, R62 += 1, R63 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 80] { R18271 += 1 };
  s0 -> s0 [0, 65535] { R18270 += 1, R18271 += 1 };
  s0 -> s2 [81, 81] { R18271 += 1 };
  s0 -> s1 [82, 65535] { R18271 += 1 };
  s1 -> s1 [0, 80] { R18271 += 1 };
  s1 -> s2 [81, 81] { R18271 += 1 };
  s1 -> s1 [82, 65535] { R18271 += 1 };
  s2 -> s2 [0, 65535] { R18271 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R18272 += 1, R18273 += 1 };
  s0 -> s1 [0, 65535] { R18273 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R18273 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 80] { R18275 += 1 };
  s0 -> s2 [0, 65535] { R18275 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R18274 += 1, R18275 += 1 };
  s0 -> s3 [81, 81] { R18275 += 1 };
  s0 -> s1 [82, 65535] { R18275 += 1 };
  s1 -> s1 [0, 80] { R18275 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [81, 81] { R18275 += 1 };
  s1 -> s1 [82, 65535] { R18275 += 1 };
  s2 -> s1 [0, 80] { R18275 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R18275 += 1, R8 += 1 };
  s2 -> s3 [81, 81] { R18275 += 1 };
  s2 -> s1 [82, 65535] { R18275 += 1 };
  s3 -> s3 [0, 65535] { R18275 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 80] { R18277 += 1, R18215 += 1 };
  s0 -> s2 [0, 65535] { R18277 += 1, R18214 += 1, R18215 += 1 };
  s0 -> s0 [0, 65535] { R18276 += 1, R18277 += 1 };
  s0 -> s1 [82, 65535] { R18277 += 1, R18215 += 1 };
  s1 -> s1 [0, 80] { R18277 += 1, R18215 += 1 };
  s1 -> s1 [0, 65535] { R18277 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [82, 65535] { R18277 += 1, R18215 += 1 };
  s2 -> s1 [0, 80] { R18277 += 1, R18215 += 1 };
  s2 -> s2 [0, 65535] { R18277 += 1, R18214 += 1, R18215 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [82, 65535] { R18277 += 1, R18215 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R18279 += 1, R18216 += 1, R18217 += 1 };
  s0 -> s0 [0, 65535] { R18278 += 1, R18279 += 1 };
  s0 -> s2 [0, 65535] { R18279 += 1, R18217 += 1, R17 += 1 };
  s1 -> s1 [0, 65535] { R18279 += 1, R18216 += 1, R18217 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R18279 += 1, R18217 += 1, R17 += 1 };
  s2 -> s3 [0, 65535] { R18279 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R18279 += 1, R18217 += 1, R17 += 1 };
  s3 -> s3 [0, 65535] { R18279 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s0 [0, 65535] { R18280 += 1, R18281 += 1 };
  s0 -> s1 [0, 65535] { R18281 += 1, R18218 += 1, R18219 += 1 };
  s0 -> s2 [0, 65535] { R18281 += 1, R18219 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R18281 += 1, R18218 += 1, R18219 += 1 };
  s1 -> s2 [0, 65535] { R18281 += 1, R18219 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R18281 += 1 };
  s2 -> s2 [0, 65535] { R18281 += 1, R18219 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R18281 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R18283 += 1, R18221 += 1, R67 += 1 };
  s0 -> s2 [0, 65535] { R18283 += 1, R18220 += 1, R18221 += 1 };
  s0 -> s0 [0, 65535] { R18282 += 1, R18283 += 1 };
  s1 -> s1 [0, 65535] { R18283 += 1, R18221 += 1, R67 += 1 };
  s1 -> s4 [0, 65535] { R18283 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R18283 += 1, R18221 += 1, R67 += 1 };
  s2 -> s2 [0, 65535] { R18283 += 1, R18220 += 1, R18221 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R18283 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 81] { R18285 += 1, R18223 += 1 };
  s0 -> s2 [0, 65535] { R18285 += 1, R18223 += 1, R69 += 1 };
  s0 -> s0 [0, 65535] { R18284 += 1, R18285 += 1 };
  s0 -> s3 [0, 65535] { R18285 += 1, R18222 += 1, R18223 += 1 };
  s0 -> s1 [83, 65535] { R18285 += 1, R18223 += 1 };
  s1 -> s1 [0, 81] { R18285 += 1, R18223 += 1 };
  s1 -> s1 [0, 65535] { R18285 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [83, 65535] { R18285 += 1, R18223 += 1 };
  s2 -> s1 [0, 81] { R18285 += 1, R18223 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R18285 += 1, R18223 += 1, R69 += 1 };
  s2 -> s5 [0, 65535] { R18285 += 1 };
  s2 -> s1 [83, 65535] { R18285 += 1, R18223 += 1 };
  s3 -> s1 [0, 81] { R18285 += 1, R18223 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R18285 += 1, R18223 += 1, R69 += 1 };
  s3 -> s3 [0, 65535] { R18285 += 1, R18222 += 1, R18223 += 1 };
  s3 -> s1 [83, 65535] { R18285 += 1, R18223 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R18285 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 81] { R18287 += 1, R18225 += 1, R11525 += 1 };
  s0 -> s1 [0, 65535] { R18287 += 1, R18225 += 1 };
  s0 -> s2 [0, 65535] { R18287 += 1, R18224 += 1, R18225 += 1 };
  s0 -> s0 [0, 65535] { R18286 += 1, R18287 += 1 };
  s0 -> s1 [83, 65535] { R18287 += 1, R18225 += 1, R11525 += 1 };
  s1 -> s1 [0, 81] { R18287 += 1, R18225 += 1, R11525 += 1 };
  s1 -> s1 [0, 65535] { R18287 += 1, R18225 += 1 };
  s1 -> s4 [0, 65535] { R18287 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [83, 65535] { R18287 += 1, R18225 += 1, R11525 += 1 };
  s2 -> s1 [0, 81] { R18287 += 1, R18225 += 1, R11525 += 1 };
  s2 -> s1 [0, 65535] { R18287 += 1, R18225 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R18287 += 1, R18224 += 1, R18225 += 1 };
  s2 -> s1 [83, 65535] { R18287 += 1, R18225 += 1, R11525 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R18287 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R18289 += 1, R18226 += 1, R18227 += 1 };
  s0 -> s0 [0, 65535] { R18288 += 1, R18289 += 1 };
  s0 -> s2 [0, 65535] { R18289 += 1, R18227 += 1, R15346 += 1, R15347 += 1 };
  s0 -> s3 [0, 65535] { R18289 += 1, R18227 += 1 };
  s1 -> s1 [0, 65535] { R18289 += 1, R18226 += 1, R18227 += 1 };
  s1 -> s2 [0, 65535] { R18289 += 1, R18227 += 1, R15346 += 1, R15347 += 1 };
  s1 -> s3 [0, 65535] { R18289 += 1, R18227 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R18289 += 1, R18227 += 1, R15346 += 1, R15347 += 1 };
  s2 -> s3 [0, 65535] { R18289 += 1, R18227 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R18289 += 1 };
  s3 -> s3 [0, 65535] { R18289 += 1, R18227 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R18289 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R18289 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 82] { R18291 += 1, R18229 += 1, R17891 += 1 };
  s0 -> s2 [0, 65535] { R18291 += 1, R18229 += 1, R17890 += 1, R17891 += 1 };
  s0 -> s0 [0, 65535] { R18290 += 1, R18291 += 1 };
  s0 -> s3 [0, 65535] { R18291 += 1, R18228 += 1, R18229 += 1 };
  s0 -> s4 [90, 90] { R18291 += 1, R18229 += 1, R17891 += 1 };
  s0 -> s1 [91, 65535] { R18291 += 1, R18229 += 1, R17891 += 1 };
  s1 -> s1 [0, 82] { R18291 += 1, R18229 += 1, R17891 += 1 };
  s1 -> s4 [90, 90] { R18291 += 1, R18229 += 1, R17891 += 1 };
  s1 -> s1 [91, 65535] { R18291 += 1, R18229 += 1, R17891 += 1 };
  s2 -> s1 [0, 82] { R18291 += 1, R18229 += 1, R17891 += 1 };
  s2 -> s2 [0, 65535] { R18291 += 1, R18229 += 1, R17890 += 1, R17891 += 1 };
  s2 -> s4 [90, 90] { R18291 += 1, R18229 += 1, R17891 += 1 };
  s2 -> s1 [91, 65535] { R18291 += 1, R18229 += 1, R17891 += 1 };
  s3 -> s1 [0, 82] { R18291 += 1, R18229 += 1, R17891 += 1 };
  s3 -> s2 [0, 65535] { R18291 += 1, R18229 += 1, R17890 += 1, R17891 += 1 };
  s3 -> s3 [0, 65535] { R18291 += 1, R18228 += 1, R18229 += 1 };
  s3 -> s4 [90, 90] { R18291 += 1, R18229 += 1, R17891 += 1 };
  s3 -> s1 [91, 65535] { R18291 += 1, R18229 += 1, R17891 += 1 };
  s4 -> s4 [0, 82] { R18291 += 1, R18229 += 1, R17891 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R18291 += 1 };
  s4 -> s4 [0, 65535] { R18291 += 1, R18229 += 1 };
  s4 -> s4 [90, 65535] { R18291 += 1, R18229 += 1, R17891 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R18291 += 1 };
  accepting s4, s5, s6;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R18293 += 1, R18231 += 1, R17896 += 1, R17897 += 1 };
  s0 -> s0 [0, 65535] { R18292 += 1, R18293 += 1 };
  s0 -> s2 [0, 65535] { R18293 += 1, R18231 += 1, R17895 += 1, R17896 += 1 };
  s0 -> s3 [0, 65535] { R18293 += 1, R18230 += 1, R18231 += 1 };
  s1 -> s1 [0, 65535] { R18293 += 1, R18231 += 1, R17896 += 1, R17897 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R18293 += 1 };
  s1 -> s6 [0, 65535] { R18293 += 1, R18231 += 1 };
  s2 -> s1 [0, 65535] { R18293 += 1, R18231 += 1, R17896 += 1, R17897 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R18293 += 1, R18231 += 1, R17895 += 1, R17896 += 1 };
  s2 -> s5 [0, 65535] { R18293 += 1 };
  s3 -> s1 [0, 65535] { R18293 += 1, R18231 += 1, R17896 += 1, R17897 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R18293 += 1, R18231 += 1, R17895 += 1, R17896 += 1 };
  s3 -> s3 [0, 65535] { R18293 += 1, R18230 += 1, R18231 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R18293 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R18293 += 1 };
  s6 -> s6 [0, 65535] { R18293 += 1, R18231 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 65535] { R18295 += 1, R18232 += 1, R18233 += 1 };
  s0 -> s0 [0, 65535] { R18294 += 1, R18295 += 1 };
  s0 -> s2 [0, 65535] { R18295 += 1, R18233 += 1 };
  s1 -> s1 [0, 65535] { R18295 += 1, R18232 += 1, R18233 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R18295 += 1, R18233 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R18295 += 1 };
  s2 -> s2 [0, 65535] { R18295 += 1, R18233 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R18295 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R18297 += 1, R18252 += 1, R18253 += 1 };
  s0 -> s2 [0, 65535] { R18297 += 1, R18253 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R18296 += 1, R18297 += 1 };
  s1 -> s1 [0, 65535] { R18297 += 1, R18252 += 1, R18253 += 1 };
  s1 -> s2 [0, 65535] { R18297 += 1, R18253 += 1, R18 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R18297 += 1, R18253 += 1, R18 += 1 };
  s2 -> s3 [0, 65535] { R18297 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R18297 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 80] { R18299 += 1, R18255 += 1 };
  s0 -> s2 [0, 65535] { R18299 += 1, R18254 += 1, R18255 += 1 };
  s0 -> s0 [0, 65535] { R18298 += 1, R18299 += 1 };
  s0 -> s3 [81, 81] { R18299 += 1, R18255 += 1 };
  s0 -> s4 [81, 81] { R18299 += 1, R18255 += 1 };
  s0 -> s5 [82, 82] { R18299 += 1, R18255 += 1 };
  s0 -> s1 [83, 65535] { R18299 += 1, R18255 += 1 };
  s1 -> s1 [0, 80] { R18299 += 1, R18255 += 1 };
  s1 -> s3 [81, 81] { R18299 += 1, R18255 += 1 };
  s1 -> s4 [81, 81] { R18299 += 1, R18255 += 1 };
  s1 -> s5 [82, 82] { R18299 += 1, R18255 += 1 };
  s1 -> s1 [83, 65535] { R18299 += 1, R18255 += 1 };
  s2 -> s1 [0, 80] { R18299 += 1, R18255 += 1 };
  s2 -> s2 [0, 65535] { R18299 += 1, R18254 += 1, R18255 += 1 };
  s2 -> s3 [81, 81] { R18299 += 1, R18255 += 1 };
  s2 -> s4 [81, 81] { R18299 += 1, R18255 += 1 };
  s2 -> s5 [82, 82] { R18299 += 1, R18255 += 1 };
  s2 -> s1 [83, 65535] { R18299 += 1, R18255 += 1 };
  s4 -> s4 [0, 81] { R18299 += 1, R18255 += 1 };
  s4 -> s8 [82, 82] { R18299 += 1, R18255 += 1 };
  s4 -> s4 [83, 65535] { R18299 += 1, R18255 += 1 };
  s5 -> s5 [0, 80] { R18299 += 1, R18255 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R18299 += 1 };
  s5 -> s7 [81, 81] { R18299 += 1, R18255 += 1 };
  s5 -> s8 [81, 81] { R18299 += 1, R18255 += 1 };
  s5 -> s5 [82, 65535] { R18299 += 1, R18255 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R18299 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R18299 += 1, R18255 += 1 };
  s8 -> s9 [0, 65535] { R18299 += 1 };
  s9 -> s6 [0, 65535];
  s9 -> s9 [0, 65535] { R18299 += 1 };
  accepting s8, s5, s9, s6, s7;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 80] { R18301 += 1, R18257 += 1, R66 += 1 };
  s0 -> s2 [0, 65535] { R18301 += 1, R18256 += 1, R18257 += 1 };
  s0 -> s0 [0, 65535] { R18300 += 1, R18301 += 1 };
  s0 -> s3 [81, 81] { R18301 += 1, R18257 += 1, R66 += 1 };
  s0 -> s4 [81, 81] { R18301 += 1, R18257 += 1, R66 += 1 };
  s0 -> s1 [82, 65535] { R18301 += 1, R18257 += 1, R66 += 1 };
  s1 -> s1 [0, 80] { R18301 += 1, R18257 += 1, R66 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R18301 += 1 };
  s1 -> s3 [81, 81] { R18301 += 1, R18257 += 1, R66 += 1 };
  s1 -> s4 [81, 81] { R18301 += 1, R18257 += 1, R66 += 1 };
  s1 -> s1 [82, 65535] { R18301 += 1, R18257 += 1, R66 += 1 };
  s2 -> s1 [0, 80] { R18301 += 1, R18257 += 1, R66 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R18301 += 1, R18256 += 1, R18257 += 1 };
  s2 -> s3 [81, 81] { R18301 += 1, R18257 += 1, R66 += 1 };
  s2 -> s4 [81, 81] { R18301 += 1, R18257 += 1, R66 += 1 };
  s2 -> s1 [82, 65535] { R18301 += 1, R18257 += 1, R66 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R18301 += 1 };
  s3 -> s3 [0, 65535] { R18301 += 1, R18257 += 1, R66 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R18301 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R18301 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 80] { R18303 += 1, R18259 += 1, R68 += 1 };
  s0 -> s2 [0, 65535] { R18303 += 1, R18258 += 1, R18259 += 1 };
  s0 -> s0 [0, 65535] { R18302 += 1, R18303 += 1 };
  s0 -> s3 [81, 81] { R18303 += 1, R18259 += 1, R68 += 1 };
  s0 -> s4 [81, 81] { R18303 += 1, R18259 += 1, R68 += 1 };
  s0 -> s1 [82, 65535] { R18303 += 1, R18259 += 1, R68 += 1 };
  s1 -> s1 [0, 80] { R18303 += 1, R18259 += 1, R68 += 1 };
  s1 -> s1 [0, 65535] { R18303 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [81, 81] { R18303 += 1, R18259 += 1, R68 += 1 };
  s1 -> s4 [81, 81] { R18303 += 1, R18259 += 1, R68 += 1 };
  s1 -> s1 [82, 65535] { R18303 += 1, R18259 += 1, R68 += 1 };
  s2 -> s1 [0, 80] { R18303 += 1, R18259 += 1, R68 += 1 };
  s2 -> s2 [0, 65535] { R18303 += 1, R18258 += 1, R18259 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [81, 81] { R18303 += 1, R18259 += 1, R68 += 1 };
  s2 -> s4 [81, 81] { R18303 += 1, R18259 += 1, R68 += 1 };
  s2 -> s1 [82, 65535] { R18303 += 1, R18259 += 1, R68 += 1 };
  s3 -> s3 [0, 65535] { R18303 += 1, R18259 += 1, R68 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R18303 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R18303 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R18303 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 80] { R18305 += 1, R18261 += 1, R11523 += 1 };
  s0 -> s2 [0, 80] { R18305 += 1, R18261 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s3 [0, 65535] { R18305 += 1, R18260 += 1, R18261 += 1 };
  s0 -> s0 [0, 65535] { R18304 += 1, R18305 += 1 };
  s0 -> s4 [81, 81] { R18305 += 1, R18261 += 1, R11523 += 1 };
  s0 -> s5 [81, 81] { R18305 += 1, R18261 += 1, R11523 += 1 };
  s0 -> s6 [81, 81] { R18305 += 1, R18261 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s7 [81, 81] { R18305 += 1, R18261 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s2 [82, 65535] { R18305 += 1, R18261 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s1 [83, 65535] { R18305 += 1, R18261 += 1, R11523 += 1 };
  s1 -> s1 [0, 80] { R18305 += 1, R18261 += 1, R11523 += 1 };
  s1 -> s9 [0, 65535];
  s1 -> s1 [0, 65535] { R18305 += 1 };
  s1 -> s4 [81, 81] { R18305 += 1, R18261 += 1 };
  s1 -> s5 [81, 81] { R18305 += 1, R18261 += 1 };
  s1 -> s1 [82, 65535] { R18305 += 1, R18261 += 1 };
  s1 -> s1 [83, 65535] { R18305 += 1, R18261 += 1, R11523 += 1 };
  s2 -> s1 [0, 80] { R18305 += 1, R18261 += 1, R11523 += 1 };
  s2 -> s2 [0, 80] { R18305 += 1, R18261 += 1, R11522 += 1, R11523 += 1 };
  s2 -> s4 [81, 81] { R18305 += 1, R18261 += 1, R11523 += 1 };
  s2 -> s5 [81, 81] { R18305 += 1, R18261 += 1, R11523 += 1 };
  s2 -> s6 [81, 81] { R18305 += 1, R18261 += 1, R11522 += 1, R11523 += 1 };
  s2 -> s7 [81, 81] { R18305 += 1, R18261 += 1, R11522 += 1, R11523 += 1 };
  s2 -> s2 [82, 65535] { R18305 += 1, R18261 += 1, R11522 += 1, R11523 += 1 };
  s2 -> s1 [83, 65535] { R18305 += 1, R18261 += 1, R11523 += 1 };
  s3 -> s1 [0, 80] { R18305 += 1, R18261 += 1, R11523 += 1 };
  s3 -> s2 [0, 80] { R18305 += 1, R18261 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s3 [0, 65535] { R18305 += 1, R18260 += 1, R18261 += 1 };
  s3 -> s4 [81, 81] { R18305 += 1, R18261 += 1, R11523 += 1 };
  s3 -> s5 [81, 81] { R18305 += 1, R18261 += 1, R11523 += 1 };
  s3 -> s6 [81, 81] { R18305 += 1, R18261 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s7 [81, 81] { R18305 += 1, R18261 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s2 [82, 65535] { R18305 += 1, R18261 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s1 [83, 65535] { R18305 += 1, R18261 += 1, R11523 += 1 };
  s4 -> s4 [0, 65535] { R18305 += 1 };
  s4 -> s9 [0, 65535];
  s5 -> s5 [0, 81] { R18305 += 1, R18261 += 1, R11523 += 1 };
  s5 -> s5 [0, 65535] { R18305 += 1, R18261 += 1 };
  s5 -> s8 [0, 65535] { R18305 += 1 };
  s5 -> s9 [0, 65535];
  s5 -> s5 [83, 65535] { R18305 += 1, R18261 += 1, R11523 += 1 };
  s6 -> s5 [0, 81] { R18305 += 1, R18261 += 1, R11523 += 1 };
  s6 -> s6 [0, 65535] { R18305 += 1, R18261 += 1, R11522 += 1, R11523 += 1 };
  s6 -> s5 [83, 65535] { R18305 += 1, R18261 += 1, R11523 += 1 };
  s8 -> s8 [0, 65535] { R18305 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s4, s8, s5, s9, s1;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 80] { R18307 += 1, R18263 += 1, R15343 += 1, R15344 += 1 };
  s0 -> s2 [0, 80] { R18307 += 1, R18263 += 1, R15342 += 1, R15343 += 1 };
  s0 -> s3 [0, 65535] { R18307 += 1, R18262 += 1, R18263 += 1 };
  s0 -> s0 [0, 65535] { R18306 += 1, R18307 += 1 };
  s0 -> s4 [81, 81] { R18307 += 1, R18263 += 1, R15343 += 1, R15344 += 1 };
  s0 -> s5 [81, 81] { R18307 += 1, R18263 += 1, R15343 += 1, R15344 += 1 };
  s0 -> s6 [81, 81] { R18307 += 1, R18263 += 1, R15342 += 1, R15343 += 1 };
  s0 -> s7 [81, 81] { R18307 += 1, R18263 += 1, R15342 += 1, R15343 += 1 };
  s0 -> s1 [82, 65535] { R18307 += 1, R18263 += 1, R15343 += 1, R15344 += 1 };
  s0 -> s2 [82, 65535] { R18307 += 1, R18263 += 1, R15342 += 1, R15343 += 1 };
  s1 -> s1 [0, 80] { R18307 += 1, R18263 += 1, R15343 += 1, R15344 += 1 };
  s1 -> s1 [0, 65535] { R18307 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s4 [81, 81] { R18307 += 1, R18263 += 1, R15343 += 1, R15344 += 1 };
  s1 -> s5 [81, 81] { R18307 += 1, R18263 += 1, R15343 += 1, R15344 += 1 };
  s1 -> s1 [82, 65535] { R18307 += 1, R18263 += 1, R15343 += 1, R15344 += 1 };
  s2 -> s1 [0, 80] { R18307 += 1, R18263 += 1, R15343 += 1, R15344 += 1 };
  s2 -> s2 [0, 80] { R18307 += 1, R18263 += 1, R15342 += 1, R15343 += 1 };
  s2 -> s4 [81, 81] { R18307 += 1, R18263 += 1, R15343 += 1, R15344 += 1 };
  s2 -> s5 [81, 81] { R18307 += 1, R18263 += 1, R15343 += 1, R15344 += 1 };
  s2 -> s6 [81, 81] { R18307 += 1, R18263 += 1, R15342 += 1, R15343 += 1 };
  s2 -> s7 [81, 81] { R18307 += 1, R18263 += 1, R15342 += 1, R15343 += 1 };
  s2 -> s1 [82, 65535] { R18307 += 1, R18263 += 1, R15343 += 1, R15344 += 1 };
  s2 -> s2 [82, 65535] { R18307 += 1, R18263 += 1, R15342 += 1, R15343 += 1 };
  s3 -> s1 [0, 80] { R18307 += 1, R18263 += 1, R15343 += 1, R15344 += 1 };
  s3 -> s2 [0, 80] { R18307 += 1, R18263 += 1, R15342 += 1, R15343 += 1 };
  s3 -> s3 [0, 65535] { R18307 += 1, R18262 += 1, R18263 += 1 };
  s3 -> s4 [81, 81] { R18307 += 1, R18263 += 1, R15343 += 1, R15344 += 1 };
  s3 -> s5 [81, 81] { R18307 += 1, R18263 += 1, R15343 += 1, R15344 += 1 };
  s3 -> s6 [81, 81] { R18307 += 1, R18263 += 1, R15342 += 1, R15343 += 1 };
  s3 -> s7 [81, 81] { R18307 += 1, R18263 += 1, R15342 += 1, R15343 += 1 };
  s3 -> s1 [82, 65535] { R18307 += 1, R18263 += 1, R15343 += 1, R15344 += 1 };
  s3 -> s2 [82, 65535] { R18307 += 1, R18263 += 1, R15342 += 1, R15343 += 1 };
  s4 -> s4 [0, 65535] { R18307 += 1 };
  s4 -> s8 [0, 65535];
  s5 -> s5 [0, 65535] { R18307 += 1, R18263 += 1, R15343 += 1, R15344 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s9 [0, 65535] { R18307 += 1 };
  s6 -> s5 [0, 65535] { R18307 += 1, R18263 += 1, R15343 += 1, R15344 += 1 };
  s6 -> s6 [0, 65535] { R18307 += 1, R18263 += 1, R15342 += 1, R15343 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R18307 += 1 };
  accepting s4, s8, s5, s9, s1;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 80] { R18309 += 1, R18265 += 1, R17888 += 1, R17889 += 1 };
  s0 -> s2 [0, 65535] { R18309 += 1, R18264 += 1, R18265 += 1 };
  s0 -> s0 [0, 65535] { R18308 += 1, R18309 += 1 };
  s0 -> s3 [81, 81] { R18309 += 1, R18265 += 1, R17888 += 1, R17889 += 1 };
  s0 -> s4 [81, 81] { R18309 += 1, R18265 += 1, R17888 += 1, R17889 += 1 };
  s0 -> s1 [82, 65535] { R18309 += 1, R18265 += 1, R17888 += 1, R17889 += 1 };
  s1 -> s1 [0, 80] { R18309 += 1, R18265 += 1, R17888 += 1, R17889 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R18309 += 1 };
  s1 -> s3 [81, 81] { R18309 += 1, R18265 += 1, R17888 += 1, R17889 += 1 };
  s1 -> s4 [81, 81] { R18309 += 1, R18265 += 1, R17888 += 1, R17889 += 1 };
  s1 -> s1 [82, 65535] { R18309 += 1, R18265 += 1, R17888 += 1, R17889 += 1 };
  s2 -> s1 [0, 80] { R18309 += 1, R18265 += 1, R17888 += 1, R17889 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R18309 += 1, R18264 += 1, R18265 += 1 };
  s2 -> s3 [81, 81] { R18309 += 1, R18265 += 1, R17888 += 1, R17889 += 1 };
  s2 -> s4 [81, 81] { R18309 += 1, R18265 += 1, R17888 += 1, R17889 += 1 };
  s2 -> s1 [82, 65535] { R18309 += 1, R18265 += 1, R17888 += 1, R17889 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R18309 += 1, R18265 += 1, R17888 += 1, R17889 += 1 };
  s3 -> s6 [0, 65535] { R18309 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R18309 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R18309 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 80] { R18311 += 1, R18267 += 1, R17892 += 1, R17893 += 1 };
  s0 -> s2 [0, 65535] { R18311 += 1, R18266 += 1, R18267 += 1 };
  s0 -> s0 [0, 65535] { R18310 += 1, R18311 += 1 };
  s0 -> s3 [81, 81] { R18311 += 1, R18267 += 1, R17892 += 1, R17893 += 1 };
  s0 -> s4 [81, 81] { R18311 += 1, R18267 += 1, R17892 += 1, R17893 += 1 };
  s0 -> s1 [82, 65535] { R18311 += 1, R18267 += 1, R17892 += 1, R17893 += 1 };
  s1 -> s1 [0, 80] { R18311 += 1, R18267 += 1, R17892 += 1, R17893 += 1 };
  s1 -> s1 [0, 65535] { R18311 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [81, 81] { R18311 += 1, R18267 += 1, R17892 += 1, R17893 += 1 };
  s1 -> s4 [81, 81] { R18311 += 1, R18267 += 1, R17892 += 1, R17893 += 1 };
  s1 -> s1 [82, 65535] { R18311 += 1, R18267 += 1, R17892 += 1, R17893 += 1 };
  s2 -> s1 [0, 80] { R18311 += 1, R18267 += 1, R17892 += 1, R17893 += 1 };
  s2 -> s2 [0, 65535] { R18311 += 1, R18266 += 1, R18267 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [81, 81] { R18311 += 1, R18267 += 1, R17892 += 1, R17893 += 1 };
  s2 -> s4 [81, 81] { R18311 += 1, R18267 += 1, R17892 += 1, R17893 += 1 };
  s2 -> s1 [82, 65535] { R18311 += 1, R18267 += 1, R17892 += 1, R17893 += 1 };
  s3 -> s3 [0, 65535] { R18311 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R18311 += 1, R18267 += 1, R17892 += 1, R17893 += 1 };
  s4 -> s5 [0, 65535] { R18311 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R18311 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 80] { R18313 += 1, R18269 += 1, R18210 += 1, R18211 += 1 };
  s0 -> s2 [0, 80] { R18313 += 1, R18269 += 1, R18211 += 1 };
  s0 -> s3 [0, 65535] { R18313 += 1, R18268 += 1, R18269 += 1 };
  s0 -> s0 [0, 65535] { R18312 += 1, R18313 += 1 };
  s0 -> s4 [81, 81] { R18313 += 1, R18269 += 1, R18210 += 1, R18211 += 1 };
  s0 -> s5 [81, 81] { R18313 += 1, R18269 += 1, R18211 += 1 };
  s0 -> s6 [81, 81] { R18313 += 1, R18269 += 1, R18210 += 1, R18211 += 1 };
  s0 -> s7 [81, 81] { R18313 += 1, R18269 += 1, R18211 += 1 };
  s0 -> s8 [82, 82] { R18313 += 1, R18269 += 1, R18211 += 1 };
  s0 -> s1 [82, 65535] { R18313 += 1, R18269 += 1, R18210 += 1, R18211 += 1 };
  s0 -> s2 [91, 65535] { R18313 += 1, R18269 += 1, R18211 += 1 };
  s1 -> s1 [0, 80] { R18313 += 1, R18269 += 1, R18210 += 1, R18211 += 1 };
  s1 -> s2 [0, 80] { R18313 += 1, R18269 += 1, R18211 += 1 };
  s1 -> s4 [81, 81] { R18313 += 1, R18269 += 1, R18210 += 1, R18211 += 1 };
  s1 -> s5 [81, 81] { R18313 += 1, R18269 += 1, R18211 += 1 };
  s1 -> s6 [81, 81] { R18313 += 1, R18269 += 1, R18210 += 1, R18211 += 1 };
  s1 -> s7 [81, 81] { R18313 += 1, R18269 += 1, R18211 += 1 };
  s1 -> s8 [82, 82] { R18313 += 1, R18269 += 1, R18211 += 1 };
  s1 -> s1 [82, 65535] { R18313 += 1, R18269 += 1, R18210 += 1, R18211 += 1 };
  s1 -> s2 [91, 65535] { R18313 += 1, R18269 += 1, R18211 += 1 };
  s2 -> s2 [0, 80] { R18313 += 1, R18269 += 1, R18211 += 1 };
  s2 -> s5 [81, 81] { R18313 += 1, R18269 += 1 };
  s2 -> s7 [81, 81] { R18313 += 1, R18269 += 1 };
  s2 -> s8 [82, 82] { R18313 += 1, R18269 += 1, R18211 += 1 };
  s2 -> s2 [82, 65535] { R18313 += 1, R18269 += 1 };
  s2 -> s2 [91, 65535] { R18313 += 1, R18269 += 1, R18211 += 1 };
  s3 -> s1 [0, 80] { R18313 += 1, R18269 += 1, R18210 += 1, R18211 += 1 };
  s3 -> s2 [0, 80] { R18313 += 1, R18269 += 1, R18211 += 1 };
  s3 -> s3 [0, 65535] { R18313 += 1, R18268 += 1, R18269 += 1 };
  s3 -> s4 [81, 81] { R18313 += 1, R18269 += 1, R18210 += 1, R18211 += 1 };
  s3 -> s5 [81, 81] { R18313 += 1, R18269 += 1, R18211 += 1 };
  s3 -> s6 [81, 81] { R18313 += 1, R18269 += 1, R18210 += 1, R18211 += 1 };
  s3 -> s7 [81, 81] { R18313 += 1, R18269 += 1, R18211 += 1 };
  s3 -> s8 [82, 82] { R18313 += 1, R18269 += 1, R18211 += 1 };
  s3 -> s1 [82, 65535] { R18313 += 1, R18269 += 1, R18210 += 1, R18211 += 1 };
  s3 -> s2 [91, 65535] { R18313 += 1, R18269 += 1, R18211 += 1 };
  s5 -> s5 [0, 81] { R18313 += 1, R18269 += 1, R18211 += 1 };
  s5 -> s5 [0, 65535] { R18313 += 1, R18269 += 1 };
  s5 -> s11 [82, 82] { R18313 += 1, R18269 += 1, R18211 += 1 };
  s5 -> s5 [91, 65535] { R18313 += 1, R18269 += 1, R18211 += 1 };
  s6 -> s5 [0, 81] { R18313 += 1, R18269 += 1, R18211 += 1 };
  s6 -> s6 [0, 65535] { R18313 += 1, R18269 += 1, R18210 += 1, R18211 += 1 };
  s6 -> s11 [82, 82] { R18313 += 1, R18269 += 1, R18211 += 1 };
  s6 -> s5 [91, 65535] { R18313 += 1, R18269 += 1, R18211 += 1 };
  s8 -> s8 [0, 80] { R18313 += 1, R18269 += 1 };
  s8 -> s8 [0, 65535] { R18313 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [81, 81] { R18313 += 1, R18269 += 1 };
  s8 -> s11 [81, 81] { R18313 += 1, R18269 += 1 };
  s8 -> s8 [82, 65535] { R18313 += 1, R18269 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R18313 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s12 [0, 65535] { R18313 += 1 };
  s11 -> s11 [0, 65535] { R18313 += 1, R18269 += 1 };
  s11 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R18313 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [113, 113];
  accepting s1;
};
};
synchronised {  // Automata constraining c1
automaton c1_0 {
  init s0;
  s0 -> s1 [114, 114];
  accepting s1;
};
};
constraint R1 = R18229 && R2 = R18313 && R20 - R18313 = -1 && R21 = R18313 && R22 - R18313 = -1 && R23 = R18313 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R17891 + -1*R17889 - R53 = 0 && R52 + R17890 + R17888 = 0 && R18228 = 0 && R18254 = 0 && R18255 = 0 && R18260 = 0 && R18261 = 0 && R18262 = 0 && R18263 = 0 && R18268 = 0 && R18269 = 0 && R18270 = 0 && R18271 = R18313 && R18272 = 0 && R18273 = R18313 && R18274 = 0 && R18275 = R18313 && R18276 = 0 && R18277 = R18313 && R18278 = 0 && R18279 = R18313 && R18280 = 0 && R18281 = R18313 && R18282 = 0 && R18283 = R18313 && R18284 = 0 && R18285 = R18313 && R18286 = 0 && R18287 = R18313 && R18288 = 0 && R18289 = R18313 && R18290 = 0 && R18291 = R18313 && R18292 = 0 && R18293 = R18313 && R18294 = 0 && R18295 = R18313 && R18296 = 0 && R18297 = R18313 && R18298 = 0 && R18299 = R18313 && R18300 = 0 && R18301 = R18313 && R18302 = 0 && R18303 = R18313 && R18304 = 0 && R18305 = R18313 && R18306 = 0 && R18307 = R18313 && R18308 = 0 && R18309 = R18313 && R18310 = 0 && R18311 = R18313 && R18312 = 0 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R17891 + -1*R17889 - R53 < 1 && -1 < R18229 && 0 < R18313 && (R48 + R15347 + R15344 != 0 || ((R42 + R11524 + R11522 != 0 || R43 + R11525 + R11523 + -1*R17891 + -1*R17889 - R53 = 0 || R53 + R17891 + R17889 < 1) && (R42 + R11524 + R11522 = 0 || R53 + R17891 + R17889 < 1))) && (R48 + R15347 + R15344 != 0 || ((R46 + R15345 + R15342 != 0 || R47 + R15346 + R15343 + -1*R17891 + -1*R17889 - R53 = 0 || R53 + R17891 + R17889 < 1) && (R46 + R15345 + R15342 = 0 || R53 + R17891 + R17889 < 1))) && (R18214 != 0 || R18215 = R18229 || (R17 = 0 && R18229 = 0)) && (R18216 != 0 || R18217 = R18229 || (R17 = 0 && R18229 = 0)) && (R18218 != 0 || R18219 = R18229 || (R17 = 0 && R18229 = 0)) && (R18220 != 0 || R18221 = R18229 || (R17 = 0 && R18229 = 0)) && (R18222 != 0 || R18223 = R18229 || (R17 = 0 && R18229 = 0)) && (R18224 != 0 || R18225 = R18229 || (R17 = 0 && R18229 = 0)) && (R18226 != 0 || R18227 = R18229 || (R17 = 0 && R18229 = 0)) && (R18230 != 0 || R18229 = R18231 || (R17 = 0 && R18229 = 0)) && (R18232 != 0 || R18229 = R18233 || (R17 = 0 && R18229 = 0)) && (R18 = 0 || (R18252 = 0 && R18253 = 0)) && (R18 = 0 || (R18256 = 0 && R18257 = 0)) && (R18 = 0 || (R18258 = 0 && R18259 = 0)) && (R18 = 0 || (R18264 = 0 && R18265 = 0)) && (R18 = 0 || (R18266 = 0 && R18267 = 0)) && (R19 = 0 || (R18234 = 0 && R18235 = 0)) && (R19 = 0 || (R18236 = 0 && R18237 = 0)) && (R19 = 0 || (R18238 = 0 && R18239 = 0)) && (R19 = 0 || (R18240 = 0 && R18241 = 0)) && (R19 = 0 || (R18242 = 0 && R18243 = 0)) && (R19 = 0 || (R18244 = 0 && R18245 = 0)) && (R19 = 0 || (R18246 = 0 && R18247 = 0)) && (R19 = 0 || (R18248 = 0 && R18249 = 0)) && (R19 = 0 || (R18250 = 0 && R18251 = 0)) && (R48 + R15347 + R15344 = 0 || (R42 + R11524 + R11522 = 0 && R43 + R11525 + R11523 + -1*R17891 + -1*R17889 - R53 = 0)) && (R48 + R15347 + R15344 = 0 || (R46 + R15345 + R15342 = 0 && R47 + R15346 + R15343 + -1*R17891 + -1*R17889 - R53 = 0)) && (R58 + R17897 + R17894 = 0 || (R56 + R17895 + R17892 = 0 && R57 + R17896 + R17893 = 0)) && (R58 + R17897 + R17894 = 0 || (R62 + R18212 + R18210 = 0 && R63 + R18213 + R18211 = 0)) && (R18214 = 0 || (R17 = 0 && R18229 = 0)) && (R18216 = 0 || (R17 = 0 && R18229 = 0)) && (R18218 = 0 || (R17 = 0 && R18229 = 0)) && (R18220 = 0 || (R17 = 0 && R18229 = 0)) && (R18222 = 0 || (R17 = 0 && R18229 = 0)) && (R18224 = 0 || (R17 = 0 && R18229 = 0)) && (R18226 = 0 || (R17 = 0 && R18229 = 0)) && (R18230 = 0 || (R17 = 0 && R18229 = 0)) && (R18232 = 0 || (R17 = 0 && R18229 = 0));
// End of Parikh automata intersection problem
