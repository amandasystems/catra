// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R11522, R11523, R11524, R11525, R11526, R11527, R11528, R11529, R11530, R11531, R11532, R11533, R11534, R11535, R11958, R11959, R11960, R11961, R11962, R11963, R12, R12068, R12069, R12070, R12071, R12072, R12073, R12074, R12075, R12076, R12077, R12078, R12079, R12080, R12081, R12082, R12083, R12084, R12085, R12086, R12087, R12088, R12089, R12090, R12091, R12092, R12093, R12094, R12095, R12096, R12097, R12098, R12099, R12100, R12101, R12102, R12103, R12104, R12105, R12106, R12107, R12108, R12109, R12110, R12111, R12112, R12113, R12114, R12115, R12116, R12117, R12118, R12119, R12120, R12121, R12122, R12123, R12124, R12125, R12126, R12127, R12128, R12129, R12130, R12131, R12132, R12133, R12134, R12135, R12136, R12137, R12138, R12139, R12140, R12141, R12142, R12143, R12144, R12145, R12146, R12147, R12148, R12149, R12150, R12151, R12152, R12153, R12154, R12155, R12156, R12157, R12158, R12159, R12160, R12161, R12162, R12163, R12164, R12165, R12166, R12167, R12168, R12169, R12170, R12171, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [81, 81];
  s0 -> s0 [82, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [81, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 80];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [81, 81];
  s0 -> s1 [82, 65535];
  s1 -> s1 [0, 80];
  s1 -> s2 [81, 81];
  s1 -> s1 [82, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s1 [0, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R25 += 1 };
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R12093 += 1, R19 += 1 };
  s0 -> s0 [0, 65535] { R12092 += 1, R12093 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R12093 += 1, R19 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 80] { R12095 += 1 };
  s0 -> s0 [0, 65535] { R12094 += 1, R12095 += 1 };
  s0 -> s2 [81, 81] { R12095 += 1 };
  s0 -> s3 [81, 81] { R12095 += 1 };
  s0 -> s1 [83, 65535] { R12095 += 1 };
  s1 -> s1 [0, 80] { R12095 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R12095 += 1 };
  s1 -> s3 [81, 81] { R12095 += 1 };
  s1 -> s1 [83, 65535] { R12095 += 1 };
  s2 -> s2 [0, 81] { R12095 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [83, 65535] { R12095 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 80] { R12097 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R12096 += 1, R12097 += 1 };
  s0 -> s2 [81, 81] { R12097 += 1, R38 += 1 };
  s0 -> s3 [81, 81] { R12097 += 1, R38 += 1 };
  s0 -> s1 [82, 65535] { R12097 += 1, R38 += 1 };
  s1 -> s1 [0, 80] { R12097 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R12097 += 1, R38 += 1 };
  s1 -> s3 [81, 81] { R12097 += 1, R38 += 1 };
  s1 -> s1 [82, 65535] { R12097 += 1, R38 += 1 };
  s2 -> s2 [0, 65535] { R12097 += 1, R38 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 80] { R12099 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R12098 += 1, R12099 += 1 };
  s0 -> s2 [81, 81] { R12099 += 1, R40 += 1 };
  s0 -> s3 [81, 81] { R12099 += 1, R40 += 1 };
  s0 -> s1 [82, 65535] { R12099 += 1, R40 += 1 };
  s1 -> s1 [0, 80] { R12099 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R12099 += 1, R40 += 1 };
  s1 -> s3 [81, 81] { R12099 += 1, R40 += 1 };
  s1 -> s1 [82, 65535] { R12099 += 1, R40 += 1 };
  s2 -> s2 [0, 65535] { R12099 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 80] { R12101 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R12100 += 1, R12101 += 1 };
  s0 -> s2 [81, 81] { R12101 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [81, 81] { R12101 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [82, 65535] { R12101 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 80] { R12101 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R12101 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [81, 81] { R12101 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [82, 65535] { R12101 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R12101 += 1, R42 += 1, R43 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 80] { R12103 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R12102 += 1, R12103 += 1 };
  s0 -> s2 [81, 81] { R12103 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [81, 81] { R12103 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [82, 65535] { R12103 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 80] { R12103 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R12103 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [81, 81] { R12103 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [82, 65535] { R12103 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R12103 += 1, R46 += 1, R47 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 80] { R12105 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R12104 += 1, R12105 += 1 };
  s0 -> s2 [81, 81] { R12105 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [81, 81] { R12105 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [82, 65535] { R12105 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 80] { R12105 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R12105 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [81, 81] { R12105 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [82, 65535] { R12105 += 1, R52 += 1, R53 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R12105 += 1, R52 += 1, R53 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 80] { R12107 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R12106 += 1, R12107 += 1 };
  s0 -> s2 [81, 81] { R12107 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [81, 81] { R12107 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [82, 65535] { R12107 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 80] { R12107 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R12107 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [81, 81] { R12107 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [82, 65535] { R12107 += 1, R56 += 1, R57 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R12107 += 1, R56 += 1, R57 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 80] { R12109 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R12108 += 1, R12109 += 1 };
  s0 -> s2 [81, 81] { R12109 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [81, 81] { R12109 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [82, 65535] { R12109 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 80] { R12109 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R12109 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [81, 81] { R12109 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [82, 65535] { R12109 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R12109 += 1, R62 += 1, R63 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 80] { R12129 += 1 };
  s0 -> s0 [0, 65535] { R12128 += 1, R12129 += 1 };
  s0 -> s2 [81, 81] { R12129 += 1 };
  s0 -> s1 [82, 65535] { R12129 += 1 };
  s1 -> s1 [0, 80] { R12129 += 1 };
  s1 -> s2 [81, 81] { R12129 += 1 };
  s1 -> s1 [82, 65535] { R12129 += 1 };
  s2 -> s2 [0, 65535] { R12129 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R12131 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R12130 += 1, R12131 += 1 };
  s1 -> s1 [0, 65535] { R12131 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 80] { R12133 += 1 };
  s0 -> s2 [0, 65535] { R12133 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R12132 += 1, R12133 += 1 };
  s0 -> s3 [81, 81] { R12133 += 1 };
  s0 -> s1 [82, 65535] { R12133 += 1 };
  s1 -> s1 [0, 80] { R12133 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [81, 81] { R12133 += 1 };
  s1 -> s1 [82, 65535] { R12133 += 1 };
  s2 -> s1 [0, 80] { R12133 += 1 };
  s2 -> s2 [0, 65535] { R12133 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [81, 81] { R12133 += 1 };
  s2 -> s1 [82, 65535] { R12133 += 1 };
  s3 -> s3 [0, 65535] { R12133 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 80] { R12135 += 1, R12073 += 1 };
  s0 -> s0 [0, 65535] { R12134 += 1, R12135 += 1 };
  s0 -> s2 [0, 65535] { R12135 += 1, R12072 += 1, R12073 += 1 };
  s0 -> s1 [82, 65535] { R12135 += 1, R12073 += 1 };
  s1 -> s1 [0, 80] { R12135 += 1, R12073 += 1 };
  s1 -> s1 [0, 65535] { R12135 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [82, 65535] { R12135 += 1, R12073 += 1 };
  s2 -> s1 [0, 80] { R12135 += 1, R12073 += 1 };
  s2 -> s2 [0, 65535] { R12135 += 1, R12072 += 1, R12073 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [82, 65535] { R12135 += 1, R12073 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R12137 += 1, R12074 += 1, R12075 += 1 };
  s0 -> s0 [0, 65535] { R12136 += 1, R12137 += 1 };
  s0 -> s2 [0, 65535] { R12137 += 1, R12075 += 1, R17 += 1 };
  s1 -> s1 [0, 65535] { R12137 += 1, R12074 += 1, R12075 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R12137 += 1, R12075 += 1, R17 += 1 };
  s2 -> s3 [0, 65535] { R12137 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R12137 += 1, R12075 += 1, R17 += 1 };
  s3 -> s3 [0, 65535] { R12137 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s0 [0, 65535] { R12138 += 1, R12139 += 1 };
  s0 -> s1 [0, 65535] { R12139 += 1, R12077 += 1 };
  s0 -> s2 [0, 65535] { R12139 += 1, R12076 += 1, R12077 += 1 };
  s1 -> s4 [0, 65535] { R12139 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R12139 += 1, R12077 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R12139 += 1, R12077 += 1 };
  s2 -> s2 [0, 65535] { R12139 += 1, R12076 += 1, R12077 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R12139 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_23 {
  init s0;
  s0 -> s0 [0, 65535] { R12140 += 1, R12141 += 1 };
  s0 -> s1 [0, 65535] { R12141 += 1, R12079 += 1, R67 += 1 };
  s0 -> s2 [0, 65535] { R12141 += 1, R12078 += 1, R12079 += 1 };
  s1 -> s1 [0, 65535] { R12141 += 1, R12079 += 1, R67 += 1 };
  s1 -> s4 [0, 65535] { R12141 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R12141 += 1, R12079 += 1, R67 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R12141 += 1, R12078 += 1, R12079 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R12141 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 81] { R12143 += 1, R12081 += 1 };
  s0 -> s0 [0, 65535] { R12142 += 1, R12143 += 1 };
  s0 -> s2 [0, 65535] { R12143 += 1, R12080 += 1, R12081 += 1 };
  s0 -> s3 [0, 65535] { R12143 += 1, R12081 += 1, R69 += 1 };
  s0 -> s1 [83, 65535] { R12143 += 1, R12081 += 1 };
  s1 -> s1 [0, 81] { R12143 += 1, R12081 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R12143 += 1 };
  s1 -> s1 [83, 65535] { R12143 += 1, R12081 += 1 };
  s2 -> s1 [0, 81] { R12143 += 1, R12081 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R12143 += 1, R12080 += 1, R12081 += 1 };
  s2 -> s3 [0, 65535] { R12143 += 1, R12081 += 1, R69 += 1 };
  s2 -> s1 [83, 65535] { R12143 += 1, R12081 += 1 };
  s3 -> s1 [0, 81] { R12143 += 1, R12081 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R12143 += 1 };
  s3 -> s3 [0, 65535] { R12143 += 1, R12081 += 1, R69 += 1 };
  s3 -> s1 [83, 65535] { R12143 += 1, R12081 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R12143 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 81] { R12145 += 1, R12083 += 1, R11525 += 1 };
  s0 -> s2 [0, 65535] { R12145 += 1, R12082 += 1, R12083 += 1 };
  s0 -> s0 [0, 65535] { R12144 += 1, R12145 += 1 };
  s0 -> s1 [0, 65535] { R12145 += 1, R12083 += 1 };
  s0 -> s1 [83, 65535] { R12145 += 1, R12083 += 1, R11525 += 1 };
  s1 -> s1 [0, 81] { R12145 += 1, R12083 += 1, R11525 += 1 };
  s1 -> s4 [0, 65535] { R12145 += 1 };
  s1 -> s1 [0, 65535] { R12145 += 1, R12083 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [83, 65535] { R12145 += 1, R12083 += 1, R11525 += 1 };
  s2 -> s1 [0, 81] { R12145 += 1, R12083 += 1, R11525 += 1 };
  s2 -> s2 [0, 65535] { R12145 += 1, R12082 += 1, R12083 += 1 };
  s2 -> s1 [0, 65535] { R12145 += 1, R12083 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [83, 65535] { R12145 += 1, R12083 += 1, R11525 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R12145 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s0 [0, 65535] { R12146 += 1, R12147 += 1 };
  s0 -> s1 [0, 65535] { R12147 += 1, R12084 += 1, R12085 += 1 };
  s0 -> s2 [0, 65535] { R12147 += 1, R12085 += 1, R11529 += 1, R11530 += 1 };
  s0 -> s3 [0, 65535] { R12147 += 1, R12085 += 1, R11530 += 1, R11531 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R12147 += 1, R12084 += 1, R12085 += 1 };
  s1 -> s2 [0, 65535] { R12147 += 1, R12085 += 1, R11529 += 1, R11530 += 1 };
  s1 -> s3 [0, 65535] { R12147 += 1, R12085 += 1, R11530 += 1, R11531 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R12147 += 1 };
  s2 -> s2 [0, 65535] { R12147 += 1, R12085 += 1, R11529 += 1, R11530 += 1 };
  s2 -> s3 [0, 65535] { R12147 += 1, R12085 += 1, R11530 += 1, R11531 += 1 };
  s3 -> s4 [0, 65535] { R12147 += 1, R12085 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R12147 += 1 };
  s3 -> s3 [0, 65535] { R12147 += 1, R12085 += 1, R11530 += 1, R11531 += 1 };
  s4 -> s4 [0, 65535] { R12147 += 1, R12085 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R12147 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R12147 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 82] { R12149 += 1, R12087 += 1, R11535 += 1 };
  s0 -> s0 [0, 65535] { R12148 += 1, R12149 += 1 };
  s0 -> s1 [0, 65535] { R12149 += 1, R12087 += 1 };
  s0 -> s2 [0, 65535] { R12149 += 1, R12086 += 1, R12087 += 1 };
  s0 -> s1 [90, 65535] { R12149 += 1, R12087 += 1, R11535 += 1 };
  s1 -> s1 [0, 82] { R12149 += 1, R12087 += 1, R11535 += 1 };
  s1 -> s1 [0, 65535] { R12149 += 1, R12087 += 1 };
  s1 -> s4 [0, 65535] { R12149 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [90, 65535] { R12149 += 1, R12087 += 1, R11535 += 1 };
  s2 -> s1 [0, 82] { R12149 += 1, R12087 += 1, R11535 += 1 };
  s2 -> s1 [0, 65535] { R12149 += 1, R12087 += 1 };
  s2 -> s2 [0, 65535] { R12149 += 1, R12086 += 1, R12087 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [90, 65535] { R12149 += 1, R12087 += 1, R11535 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R12149 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R12151 += 1, R12089 += 1 };
  s0 -> s2 [0, 65535] { R12151 += 1, R12088 += 1, R12089 += 1 };
  s0 -> s3 [0, 65535] { R12151 += 1, R12089 += 1, R11962 += 1, R11963 += 1 };
  s0 -> s0 [0, 65535] { R12150 += 1, R12151 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R12151 += 1, R12089 += 1 };
  s1 -> s5 [0, 65535] { R12151 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R12151 += 1, R12089 += 1 };
  s2 -> s2 [0, 65535] { R12151 += 1, R12088 += 1, R12089 += 1 };
  s2 -> s3 [0, 65535] { R12151 += 1, R12089 += 1, R11962 += 1, R11963 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R12151 += 1, R12089 += 1 };
  s3 -> s3 [0, 65535] { R12151 += 1, R12089 += 1, R11962 += 1, R11963 += 1 };
  s3 -> s5 [0, 65535] { R12151 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R12151 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 81] { R12153 += 1, R12091 += 1, R12071 += 1 };
  s0 -> s1 [0, 65535] { R12153 += 1, R12091 += 1 };
  s0 -> s0 [0, 65535] { R12152 += 1, R12153 += 1 };
  s0 -> s2 [0, 65535] { R12153 += 1, R12090 += 1, R12091 += 1 };
  s0 -> s3 [82, 82] { R12153 += 1, R12091 += 1, R12071 += 1 };
  s0 -> s4 [82, 82] { R12153 += 1, R12091 += 1, R12071 += 1 };
  s0 -> s1 [91, 65535] { R12153 += 1, R12091 += 1, R12071 += 1 };
  s1 -> s1 [0, 81] { R12153 += 1, R12091 += 1, R12071 += 1 };
  s1 -> s1 [0, 65535] { R12153 += 1, R12091 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R12153 += 1 };
  s1 -> s3 [82, 82] { R12153 += 1, R12091 += 1, R12071 += 1 };
  s1 -> s4 [82, 82] { R12153 += 1, R12091 += 1, R12071 += 1 };
  s1 -> s1 [91, 65535] { R12153 += 1, R12091 += 1, R12071 += 1 };
  s2 -> s1 [0, 81] { R12153 += 1, R12091 += 1, R12071 += 1 };
  s2 -> s1 [0, 65535] { R12153 += 1, R12091 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R12153 += 1, R12090 += 1, R12091 += 1 };
  s2 -> s3 [82, 82] { R12153 += 1, R12091 += 1, R12071 += 1 };
  s2 -> s4 [82, 82] { R12153 += 1, R12091 += 1, R12071 += 1 };
  s2 -> s1 [91, 65535] { R12153 += 1, R12091 += 1, R12071 += 1 };
  s3 -> s3 [0, 82] { R12153 += 1, R12091 += 1, R12071 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R12153 += 1 };
  s3 -> s3 [0, 65535] { R12153 += 1, R12091 += 1 };
  s3 -> s3 [91, 65535] { R12153 += 1, R12091 += 1, R12071 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R12153 += 1 };
  s4 -> s4 [0, 65535] { R12153 += 1, R12091 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R12153 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R12155 += 1, R12110 += 1, R12111 += 1 };
  s0 -> s2 [0, 65535] { R12155 += 1, R12111 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R12154 += 1, R12155 += 1 };
  s1 -> s1 [0, 65535] { R12155 += 1, R12110 += 1, R12111 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R12155 += 1, R12111 += 1, R18 += 1 };
  s2 -> s3 [0, 65535] { R12155 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R12155 += 1, R12111 += 1, R18 += 1 };
  s3 -> s3 [0, 65535] { R12155 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 80] { R12157 += 1, R12113 += 1 };
  s0 -> s2 [0, 65535] { R12157 += 1, R12112 += 1, R12113 += 1 };
  s0 -> s0 [0, 65535] { R12156 += 1, R12157 += 1 };
  s0 -> s3 [81, 81] { R12157 += 1, R12113 += 1 };
  s0 -> s4 [81, 81] { R12157 += 1, R12113 += 1 };
  s0 -> s5 [82, 82] { R12157 += 1, R12113 += 1 };
  s0 -> s1 [83, 65535] { R12157 += 1, R12113 += 1 };
  s1 -> s1 [0, 80] { R12157 += 1, R12113 += 1 };
  s1 -> s3 [81, 81] { R12157 += 1, R12113 += 1 };
  s1 -> s4 [81, 81] { R12157 += 1, R12113 += 1 };
  s1 -> s5 [82, 82] { R12157 += 1, R12113 += 1 };
  s1 -> s1 [83, 65535] { R12157 += 1, R12113 += 1 };
  s2 -> s1 [0, 80] { R12157 += 1, R12113 += 1 };
  s2 -> s2 [0, 65535] { R12157 += 1, R12112 += 1, R12113 += 1 };
  s2 -> s3 [81, 81] { R12157 += 1, R12113 += 1 };
  s2 -> s4 [81, 81] { R12157 += 1, R12113 += 1 };
  s2 -> s5 [82, 82] { R12157 += 1, R12113 += 1 };
  s2 -> s1 [83, 65535] { R12157 += 1, R12113 += 1 };
  s3 -> s3 [0, 81] { R12157 += 1, R12113 += 1 };
  s3 -> s8 [82, 82] { R12157 += 1, R12113 += 1 };
  s3 -> s3 [83, 65535] { R12157 += 1, R12113 += 1 };
  s5 -> s5 [0, 80] { R12157 += 1, R12113 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R12157 += 1 };
  s5 -> s7 [81, 81] { R12157 += 1, R12113 += 1 };
  s5 -> s8 [81, 81] { R12157 += 1, R12113 += 1 };
  s5 -> s5 [82, 65535] { R12157 += 1, R12113 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R12157 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R12157 += 1, R12113 += 1 };
  s8 -> s9 [0, 65535] { R12157 += 1 };
  s9 -> s6 [0, 65535];
  s9 -> s9 [0, 65535] { R12157 += 1 };
  accepting s8, s5, s9, s6, s7;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 80] { R12159 += 1, R12115 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R12158 += 1, R12159 += 1 };
  s0 -> s2 [0, 65535] { R12159 += 1, R12114 += 1, R12115 += 1 };
  s0 -> s3 [81, 81] { R12159 += 1, R12115 += 1, R66 += 1 };
  s0 -> s4 [81, 81] { R12159 += 1, R12115 += 1, R66 += 1 };
  s0 -> s1 [82, 65535] { R12159 += 1, R12115 += 1, R66 += 1 };
  s1 -> s1 [0, 80] { R12159 += 1, R12115 += 1, R66 += 1 };
  s1 -> s1 [0, 65535] { R12159 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [81, 81] { R12159 += 1, R12115 += 1, R66 += 1 };
  s1 -> s4 [81, 81] { R12159 += 1, R12115 += 1, R66 += 1 };
  s1 -> s1 [82, 65535] { R12159 += 1, R12115 += 1, R66 += 1 };
  s2 -> s1 [0, 80] { R12159 += 1, R12115 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R12159 += 1, R12114 += 1, R12115 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [81, 81] { R12159 += 1, R12115 += 1, R66 += 1 };
  s2 -> s4 [81, 81] { R12159 += 1, R12115 += 1, R66 += 1 };
  s2 -> s1 [82, 65535] { R12159 += 1, R12115 += 1, R66 += 1 };
  s3 -> s3 [0, 65535] { R12159 += 1, R12115 += 1, R66 += 1 };
  s3 -> s6 [0, 65535] { R12159 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R12159 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R12159 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 80] { R12161 += 1, R12117 += 1, R68 += 1 };
  s0 -> s2 [0, 65535] { R12161 += 1, R12116 += 1, R12117 += 1 };
  s0 -> s0 [0, 65535] { R12160 += 1, R12161 += 1 };
  s0 -> s3 [81, 81] { R12161 += 1, R12117 += 1, R68 += 1 };
  s0 -> s4 [81, 81] { R12161 += 1, R12117 += 1, R68 += 1 };
  s0 -> s1 [82, 65535] { R12161 += 1, R12117 += 1, R68 += 1 };
  s1 -> s1 [0, 80] { R12161 += 1, R12117 += 1, R68 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R12161 += 1 };
  s1 -> s3 [81, 81] { R12161 += 1, R12117 += 1, R68 += 1 };
  s1 -> s4 [81, 81] { R12161 += 1, R12117 += 1, R68 += 1 };
  s1 -> s1 [82, 65535] { R12161 += 1, R12117 += 1, R68 += 1 };
  s2 -> s1 [0, 80] { R12161 += 1, R12117 += 1, R68 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R12161 += 1, R12116 += 1, R12117 += 1 };
  s2 -> s3 [81, 81] { R12161 += 1, R12117 += 1, R68 += 1 };
  s2 -> s4 [81, 81] { R12161 += 1, R12117 += 1, R68 += 1 };
  s2 -> s1 [82, 65535] { R12161 += 1, R12117 += 1, R68 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R12161 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R12161 += 1 };
  s4 -> s4 [0, 65535] { R12161 += 1, R12117 += 1, R68 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R12161 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 80] { R12163 += 1, R12119 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s2 [0, 80] { R12163 += 1, R12119 += 1, R11523 += 1 };
  s0 -> s0 [0, 65535] { R12162 += 1, R12163 += 1 };
  s0 -> s3 [0, 65535] { R12163 += 1, R12118 += 1, R12119 += 1 };
  s0 -> s4 [81, 81] { R12163 += 1, R12119 += 1, R11523 += 1 };
  s0 -> s5 [81, 81] { R12163 += 1, R12119 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s6 [81, 81] { R12163 += 1, R12119 += 1, R11523 += 1 };
  s0 -> s7 [81, 81] { R12163 += 1, R12119 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s1 [82, 65535] { R12163 += 1, R12119 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s2 [83, 65535] { R12163 += 1, R12119 += 1, R11523 += 1 };
  s1 -> s1 [0, 80] { R12163 += 1, R12119 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s2 [0, 80] { R12163 += 1, R12119 += 1, R11523 += 1 };
  s1 -> s4 [81, 81] { R12163 += 1, R12119 += 1, R11523 += 1 };
  s1 -> s5 [81, 81] { R12163 += 1, R12119 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s6 [81, 81] { R12163 += 1, R12119 += 1, R11523 += 1 };
  s1 -> s7 [81, 81] { R12163 += 1, R12119 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s1 [82, 65535] { R12163 += 1, R12119 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s2 [83, 65535] { R12163 += 1, R12119 += 1, R11523 += 1 };
  s2 -> s2 [0, 80] { R12163 += 1, R12119 += 1, R11523 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R12163 += 1 };
  s2 -> s4 [81, 81] { R12163 += 1, R12119 += 1 };
  s2 -> s6 [81, 81] { R12163 += 1, R12119 += 1 };
  s2 -> s2 [82, 65535] { R12163 += 1, R12119 += 1 };
  s2 -> s2 [83, 65535] { R12163 += 1, R12119 += 1, R11523 += 1 };
  s3 -> s1 [0, 80] { R12163 += 1, R12119 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s2 [0, 80] { R12163 += 1, R12119 += 1, R11523 += 1 };
  s3 -> s3 [0, 65535] { R12163 += 1, R12118 += 1, R12119 += 1 };
  s3 -> s4 [81, 81] { R12163 += 1, R12119 += 1, R11523 += 1 };
  s3 -> s5 [81, 81] { R12163 += 1, R12119 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s6 [81, 81] { R12163 += 1, R12119 += 1, R11523 += 1 };
  s3 -> s7 [81, 81] { R12163 += 1, R12119 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s1 [82, 65535] { R12163 += 1, R12119 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s2 [83, 65535] { R12163 += 1, R12119 += 1, R11523 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s4 [0, 65535] { R12163 += 1 };
  s6 -> s6 [0, 81] { R12163 += 1, R12119 += 1, R11523 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s9 [0, 65535] { R12163 += 1 };
  s6 -> s6 [0, 65535] { R12163 += 1, R12119 += 1 };
  s6 -> s6 [83, 65535] { R12163 += 1, R12119 += 1, R11523 += 1 };
  s7 -> s6 [0, 81] { R12163 += 1, R12119 += 1, R11523 += 1 };
  s7 -> s7 [0, 65535] { R12163 += 1, R12119 += 1, R11522 += 1, R11523 += 1 };
  s7 -> s6 [83, 65535] { R12163 += 1, R12119 += 1, R11523 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R12163 += 1 };
  accepting s4, s8, s2, s9, s6;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 80] { R12165 += 1, R12121 += 1, R11526 += 1, R11527 += 1 };
  s0 -> s0 [0, 65535] { R12164 += 1, R12165 += 1 };
  s0 -> s2 [0, 65535] { R12165 += 1, R12120 += 1, R12121 += 1 };
  s0 -> s3 [81, 81] { R12165 += 1, R12121 += 1, R11526 += 1, R11527 += 1 };
  s0 -> s4 [81, 81] { R12165 += 1, R12121 += 1, R11526 += 1, R11527 += 1 };
  s0 -> s1 [82, 65535] { R12165 += 1, R12121 += 1, R11526 += 1, R11527 += 1 };
  s1 -> s1 [0, 80] { R12165 += 1, R12121 += 1, R11526 += 1, R11527 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R12165 += 1 };
  s1 -> s3 [81, 81] { R12165 += 1, R12121 += 1, R11526 += 1, R11527 += 1 };
  s1 -> s4 [81, 81] { R12165 += 1, R12121 += 1, R11526 += 1, R11527 += 1 };
  s1 -> s1 [82, 65535] { R12165 += 1, R12121 += 1, R11526 += 1, R11527 += 1 };
  s2 -> s1 [0, 80] { R12165 += 1, R12121 += 1, R11526 += 1, R11527 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R12165 += 1, R12120 += 1, R12121 += 1 };
  s2 -> s3 [81, 81] { R12165 += 1, R12121 += 1, R11526 += 1, R11527 += 1 };
  s2 -> s4 [81, 81] { R12165 += 1, R12121 += 1, R11526 += 1, R11527 += 1 };
  s2 -> s1 [82, 65535] { R12165 += 1, R12121 += 1, R11526 += 1, R11527 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R12165 += 1, R12121 += 1, R11526 += 1, R11527 += 1 };
  s3 -> s6 [0, 65535] { R12165 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R12165 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R12165 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 80] { R12167 += 1, R12123 += 1, R11532 += 1, R11533 += 1 };
  s0 -> s2 [0, 80] { R12167 += 1, R12123 += 1, R11533 += 1 };
  s0 -> s0 [0, 65535] { R12166 += 1, R12167 += 1 };
  s0 -> s3 [0, 65535] { R12167 += 1, R12122 += 1, R12123 += 1 };
  s0 -> s4 [81, 81] { R12167 += 1, R12123 += 1, R11533 += 1 };
  s0 -> s5 [81, 81] { R12167 += 1, R12123 += 1, R11533 += 1 };
  s0 -> s6 [81, 81] { R12167 += 1, R12123 += 1, R11532 += 1, R11533 += 1 };
  s0 -> s7 [81, 81] { R12167 += 1, R12123 += 1, R11532 += 1, R11533 += 1 };
  s0 -> s2 [82, 82] { R12167 += 1, R12123 += 1, R11533 += 1 };
  s0 -> s1 [82, 65535] { R12167 += 1, R12123 += 1, R11532 += 1, R11533 += 1 };
  s0 -> s8 [90, 90] { R12167 += 1, R12123 += 1, R11533 += 1 };
  s0 -> s2 [91, 65535] { R12167 += 1, R12123 += 1, R11533 += 1 };
  s1 -> s1 [0, 80] { R12167 += 1, R12123 += 1, R11532 += 1, R11533 += 1 };
  s1 -> s2 [0, 80] { R12167 += 1, R12123 += 1, R11533 += 1 };
  s1 -> s4 [81, 81] { R12167 += 1, R12123 += 1, R11533 += 1 };
  s1 -> s5 [81, 81] { R12167 += 1, R12123 += 1, R11533 += 1 };
  s1 -> s6 [81, 81] { R12167 += 1, R12123 += 1, R11532 += 1, R11533 += 1 };
  s1 -> s7 [81, 81] { R12167 += 1, R12123 += 1, R11532 += 1, R11533 += 1 };
  s1 -> s2 [82, 82] { R12167 += 1, R12123 += 1, R11533 += 1 };
  s1 -> s1 [82, 65535] { R12167 += 1, R12123 += 1, R11532 += 1, R11533 += 1 };
  s1 -> s8 [90, 90] { R12167 += 1, R12123 += 1, R11533 += 1 };
  s1 -> s2 [91, 65535] { R12167 += 1, R12123 += 1, R11533 += 1 };
  s2 -> s2 [0, 80] { R12167 += 1, R12123 += 1, R11533 += 1 };
  s2 -> s4 [81, 81] { R12167 += 1, R12123 += 1, R11533 += 1 };
  s2 -> s5 [81, 81] { R12167 += 1, R12123 += 1, R11533 += 1 };
  s2 -> s2 [82, 82] { R12167 += 1, R12123 += 1, R11533 += 1 };
  s2 -> s8 [90, 90] { R12167 += 1, R12123 += 1, R11533 += 1 };
  s2 -> s2 [91, 65535] { R12167 += 1, R12123 += 1, R11533 += 1 };
  s3 -> s1 [0, 80] { R12167 += 1, R12123 += 1, R11532 += 1, R11533 += 1 };
  s3 -> s2 [0, 80] { R12167 += 1, R12123 += 1, R11533 += 1 };
  s3 -> s3 [0, 65535] { R12167 += 1, R12122 += 1, R12123 += 1 };
  s3 -> s4 [81, 81] { R12167 += 1, R12123 += 1, R11533 += 1 };
  s3 -> s5 [81, 81] { R12167 += 1, R12123 += 1, R11533 += 1 };
  s3 -> s6 [81, 81] { R12167 += 1, R12123 += 1, R11532 += 1, R11533 += 1 };
  s3 -> s7 [81, 81] { R12167 += 1, R12123 += 1, R11532 += 1, R11533 += 1 };
  s3 -> s2 [82, 82] { R12167 += 1, R12123 += 1, R11533 += 1 };
  s3 -> s1 [82, 65535] { R12167 += 1, R12123 += 1, R11532 += 1, R11533 += 1 };
  s3 -> s8 [90, 90] { R12167 += 1, R12123 += 1, R11533 += 1 };
  s3 -> s2 [91, 65535] { R12167 += 1, R12123 += 1, R11533 += 1 };
  s5 -> s5 [0, 82] { R12167 += 1, R12123 += 1, R11533 += 1 };
  s5 -> s10 [90, 90] { R12167 += 1, R12123 += 1, R11533 += 1 };
  s5 -> s5 [91, 65535] { R12167 += 1, R12123 += 1, R11533 += 1 };
  s6 -> s5 [0, 82] { R12167 += 1, R12123 += 1, R11533 += 1 };
  s6 -> s6 [0, 65535] { R12167 += 1, R12123 += 1, R11532 += 1, R11533 += 1 };
  s6 -> s10 [90, 90] { R12167 += 1, R12123 += 1, R11533 += 1 };
  s6 -> s5 [91, 65535] { R12167 += 1, R12123 += 1, R11533 += 1 };
  s8 -> s8 [0, 80] { R12167 += 1, R12123 += 1, R11533 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R12167 += 1 };
  s8 -> s10 [81, 81] { R12167 += 1, R12123 += 1 };
  s8 -> s11 [81, 81] { R12167 += 1, R12123 += 1 };
  s8 -> s8 [82, 82] { R12167 += 1, R12123 += 1, R11533 += 1 };
  s8 -> s8 [82, 65535] { R12167 += 1, R12123 += 1 };
  s8 -> s8 [90, 65535] { R12167 += 1, R12123 += 1, R11533 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 82] { R12167 += 1, R12123 += 1, R11533 += 1 };
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R12167 += 1, R12123 += 1 };
  s10 -> s12 [0, 65535] { R12167 += 1 };
  s10 -> s10 [90, 65535] { R12167 += 1, R12123 += 1, R11533 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R12167 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R12167 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 80] { R12169 += 1, R12125 += 1, R11958 += 1, R11959 += 1 };
  s0 -> s2 [0, 80] { R12169 += 1, R12125 += 1, R11959 += 1, R11960 += 1 };
  s0 -> s0 [0, 65535] { R12168 += 1, R12169 += 1 };
  s0 -> s3 [0, 65535] { R12169 += 1, R12124 += 1, R12125 += 1 };
  s0 -> s4 [81, 81] { R12169 += 1, R12125 += 1, R11959 += 1, R11960 += 1 };
  s0 -> s5 [81, 81] { R12169 += 1, R12125 += 1, R11959 += 1, R11960 += 1 };
  s0 -> s6 [81, 81] { R12169 += 1, R12125 += 1, R11958 += 1, R11959 += 1 };
  s0 -> s7 [81, 81] { R12169 += 1, R12125 += 1, R11958 += 1, R11959 += 1 };
  s0 -> s1 [82, 65535] { R12169 += 1, R12125 += 1, R11958 += 1, R11959 += 1 };
  s0 -> s2 [82, 65535] { R12169 += 1, R12125 += 1, R11959 += 1, R11960 += 1 };
  s1 -> s1 [0, 80] { R12169 += 1, R12125 += 1, R11958 += 1, R11959 += 1 };
  s1 -> s2 [0, 80] { R12169 += 1, R12125 += 1, R11959 += 1, R11960 += 1 };
  s1 -> s4 [81, 81] { R12169 += 1, R12125 += 1, R11959 += 1, R11960 += 1 };
  s1 -> s5 [81, 81] { R12169 += 1, R12125 += 1, R11959 += 1, R11960 += 1 };
  s1 -> s6 [81, 81] { R12169 += 1, R12125 += 1, R11958 += 1, R11959 += 1 };
  s1 -> s7 [81, 81] { R12169 += 1, R12125 += 1, R11958 += 1, R11959 += 1 };
  s1 -> s1 [82, 65535] { R12169 += 1, R12125 += 1, R11958 += 1, R11959 += 1 };
  s1 -> s2 [82, 65535] { R12169 += 1, R12125 += 1, R11959 += 1, R11960 += 1 };
  s2 -> s2 [0, 80] { R12169 += 1, R12125 += 1, R11959 += 1, R11960 += 1 };
  s2 -> s2 [0, 65535] { R12169 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s4 [81, 81] { R12169 += 1, R12125 += 1, R11959 += 1, R11960 += 1 };
  s2 -> s5 [81, 81] { R12169 += 1, R12125 += 1, R11959 += 1, R11960 += 1 };
  s2 -> s2 [82, 65535] { R12169 += 1, R12125 += 1, R11959 += 1, R11960 += 1 };
  s3 -> s1 [0, 80] { R12169 += 1, R12125 += 1, R11958 += 1, R11959 += 1 };
  s3 -> s2 [0, 80] { R12169 += 1, R12125 += 1, R11959 += 1, R11960 += 1 };
  s3 -> s3 [0, 65535] { R12169 += 1, R12124 += 1, R12125 += 1 };
  s3 -> s4 [81, 81] { R12169 += 1, R12125 += 1, R11959 += 1, R11960 += 1 };
  s3 -> s5 [81, 81] { R12169 += 1, R12125 += 1, R11959 += 1, R11960 += 1 };
  s3 -> s6 [81, 81] { R12169 += 1, R12125 += 1, R11958 += 1, R11959 += 1 };
  s3 -> s7 [81, 81] { R12169 += 1, R12125 += 1, R11958 += 1, R11959 += 1 };
  s3 -> s1 [82, 65535] { R12169 += 1, R12125 += 1, R11958 += 1, R11959 += 1 };
  s3 -> s2 [82, 65535] { R12169 += 1, R12125 += 1, R11959 += 1, R11960 += 1 };
  s4 -> s4 [0, 65535] { R12169 += 1, R12125 += 1, R11959 += 1, R11960 += 1 };
  s4 -> s9 [0, 65535] { R12169 += 1 };
  s4 -> s8 [0, 65535];
  s5 -> s5 [0, 65535] { R12169 += 1 };
  s5 -> s8 [0, 65535];
  s6 -> s4 [0, 65535] { R12169 += 1, R12125 += 1, R11959 += 1, R11960 += 1 };
  s6 -> s6 [0, 65535] { R12169 += 1, R12125 += 1, R11958 += 1, R11959 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R12169 += 1 };
  s9 -> s8 [0, 65535];
  accepting s4, s8, s5, s2, s9;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 80] { R12171 += 1, R12127 += 1, R12069 += 1 };
  s0 -> s2 [0, 80] { R12171 += 1, R12127 += 1, R12068 += 1, R12069 += 1 };
  s0 -> s3 [0, 65535] { R12171 += 1, R12126 += 1, R12127 += 1 };
  s0 -> s0 [0, 65535] { R12170 += 1, R12171 += 1 };
  s0 -> s4 [81, 81] { R12171 += 1, R12127 += 1, R12068 += 1, R12069 += 1 };
  s0 -> s5 [81, 81] { R12171 += 1, R12127 += 1, R12069 += 1 };
  s0 -> s6 [81, 81] { R12171 += 1, R12127 += 1, R12069 += 1 };
  s0 -> s7 [81, 81] { R12171 += 1, R12127 += 1, R12068 += 1, R12069 += 1 };
  s0 -> s2 [82, 65535] { R12171 += 1, R12127 += 1, R12068 += 1, R12069 += 1 };
  s0 -> s1 [91, 65535] { R12171 += 1, R12127 += 1, R12069 += 1 };
  s1 -> s1 [0, 80] { R12171 += 1, R12127 += 1, R12069 += 1 };
  s1 -> s1 [0, 65535] { R12171 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s5 [81, 81] { R12171 += 1, R12127 += 1 };
  s1 -> s6 [81, 81] { R12171 += 1, R12127 += 1 };
  s1 -> s1 [82, 65535] { R12171 += 1, R12127 += 1 };
  s1 -> s1 [91, 65535] { R12171 += 1, R12127 += 1, R12069 += 1 };
  s2 -> s1 [0, 80] { R12171 += 1, R12127 += 1, R12069 += 1 };
  s2 -> s2 [0, 80] { R12171 += 1, R12127 += 1, R12068 += 1, R12069 += 1 };
  s2 -> s4 [81, 81] { R12171 += 1, R12127 += 1, R12068 += 1, R12069 += 1 };
  s2 -> s5 [81, 81] { R12171 += 1, R12127 += 1, R12069 += 1 };
  s2 -> s6 [81, 81] { R12171 += 1, R12127 += 1, R12069 += 1 };
  s2 -> s7 [81, 81] { R12171 += 1, R12127 += 1, R12068 += 1, R12069 += 1 };
  s2 -> s2 [82, 65535] { R12171 += 1, R12127 += 1, R12068 += 1, R12069 += 1 };
  s2 -> s1 [91, 65535] { R12171 += 1, R12127 += 1, R12069 += 1 };
  s3 -> s1 [0, 80] { R12171 += 1, R12127 += 1, R12069 += 1 };
  s3 -> s2 [0, 80] { R12171 += 1, R12127 += 1, R12068 += 1, R12069 += 1 };
  s3 -> s3 [0, 65535] { R12171 += 1, R12126 += 1, R12127 += 1 };
  s3 -> s4 [81, 81] { R12171 += 1, R12127 += 1, R12068 += 1, R12069 += 1 };
  s3 -> s5 [81, 81] { R12171 += 1, R12127 += 1, R12069 += 1 };
  s3 -> s6 [81, 81] { R12171 += 1, R12127 += 1, R12069 += 1 };
  s3 -> s7 [81, 81] { R12171 += 1, R12127 += 1, R12068 += 1, R12069 += 1 };
  s3 -> s2 [82, 65535] { R12171 += 1, R12127 += 1, R12068 += 1, R12069 += 1 };
  s3 -> s1 [91, 65535] { R12171 += 1, R12127 += 1, R12069 += 1 };
  s4 -> s6 [0, 81] { R12171 += 1, R12127 += 1, R12069 += 1 };
  s4 -> s4 [0, 65535] { R12171 += 1, R12127 += 1, R12068 += 1, R12069 += 1 };
  s4 -> s6 [91, 65535] { R12171 += 1, R12127 += 1, R12069 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s5 [0, 65535] { R12171 += 1 };
  s6 -> s6 [0, 81] { R12171 += 1, R12127 += 1, R12069 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R12171 += 1, R12127 += 1 };
  s6 -> s9 [0, 65535] { R12171 += 1 };
  s6 -> s6 [91, 65535] { R12171 += 1, R12127 += 1, R12069 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R12171 += 1 };
  accepting s8, s5, s9, s6, s1;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [113, 113];
  accepting s1;
};
};
synchronised {  // Automata constraining c1
automaton c1_0 {
  init s0;
  s0 -> s1 [114, 114];
  accepting s1;
};
};
constraint R2 = R12171 && R20 - R12171 = -1 && R21 = R12171 && R22 - R12171 = -1 && R23 = R12171 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R11535 + -1*R11533 - R53 = 0 && R52 + R11534 + R11532 = 0 && R12112 = 0 && R12113 = 0 && R12118 = 0 && R12119 = 0 && R12122 = 0 && R12123 = 0 && R12124 = 0 && R12125 = 0 && R12126 = 0 && R12127 = 0 && R12128 = 0 && R12129 = R12171 && R12130 = 0 && R12131 = R12171 && R12132 = 0 && R12133 = R12171 && R12134 = 0 && R12135 = R12171 && R12136 = 0 && R12137 = R12171 && R12138 = 0 && R12139 = R12171 && R12140 = 0 && R12141 = R12171 && R12142 = 0 && R12143 = R12171 && R12144 = 0 && R12145 = R12171 && R12146 = 0 && R12147 = R12171 && R12148 = 0 && R12149 = R12171 && R12150 = 0 && R12151 = R12171 && R12152 = 0 && R12153 = R12171 && R12154 = 0 && R12155 = R12171 && R12156 = 0 && R12157 = R12171 && R12158 = 0 && R12159 = R12171 && R12160 = 0 && R12161 = R12171 && R12162 = 0 && R12163 = R12171 && R12164 = 0 && R12165 = R12171 && R12166 = 0 && R12167 = R12171 && R12168 = 0 && R12169 = R12171 && R12170 = 0 && -1 < R1 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R11535 + -1*R11533 - R53 < 1 && 0 < R12171 && (R1 != 0 || R17 = 0 || (R12072 = 0 && R12073 = 0)) && (R1 != 0 || R17 = 0 || (R12074 = 0 && R12075 = 0)) && (R1 != 0 || R17 = 0 || (R12076 = 0 && R12077 = 0)) && (R1 != 0 || R17 = 0 || (R12078 = 0 && R12079 = 0)) && (R1 != 0 || R17 = 0 || (R12080 = 0 && R12081 = 0)) && (R1 != 0 || R17 = 0 || (R12082 = 0 && R12083 = 0)) && (R1 != 0 || R17 = 0 || (R12084 = 0 && R12085 = 0)) && (R1 != 0 || R17 = 0 || (R12086 = 0 && R12087 = 0)) && (R1 != 0 || R17 = 0 || (R12088 = 0 && R12089 = 0)) && (R1 != 0 || R17 = 0 || (R12090 = 0 && R12091 = 0)) && (R48 + R11531 + R11528 != 0 || ((R42 + R11524 + R11522 != 0 || R43 + R11525 + R11523 + -1*R11535 + -1*R11533 - R53 = 0 || R53 + R11535 + R11533 < 1) && (R42 + R11524 + R11522 = 0 || R53 + R11535 + R11533 < 1))) && (R48 + R11531 + R11528 != 0 || ((R46 + R11529 + R11526 != 0 || R47 + R11530 + R11527 + -1*R11535 + -1*R11533 - R53 = 0 || R53 + R11535 + R11533 < 1) && (R46 + R11529 + R11526 = 0 || R53 + R11535 + R11533 < 1))) && (R12072 != 0 || R1 = R12073 || R1 < 1) && (R12074 != 0 || R1 = R12075 || R1 < 1) && (R12076 != 0 || R1 = R12077 || R1 < 1) && (R12078 != 0 || R1 = R12079 || R1 < 1) && (R12080 != 0 || R1 = R12081 || R1 < 1) && (R12082 != 0 || R1 = R12083 || R1 < 1) && (R12084 != 0 || R1 = R12085 || R1 < 1) && (R12086 != 0 || R1 = R12087 || R1 < 1) && (R12088 != 0 || R1 = R12089 || R1 < 1) && (R12090 != 0 || R1 = R12091 || R1 < 1) && (R18 = 0 || (R12110 = 0 && R12111 = 0)) && (R18 = 0 || (R12114 = 0 && R12115 = 0)) && (R18 = 0 || (R12116 = 0 && R12117 = 0)) && (R18 = 0 || (R12120 = 0 && R12121 = 0)) && (R19 = 0 || (R12092 = 0 && R12093 = 0)) && (R19 = 0 || (R12094 = 0 && R12095 = 0)) && (R19 = 0 || (R12096 = 0 && R12097 = 0)) && (R19 = 0 || (R12098 = 0 && R12099 = 0)) && (R19 = 0 || (R12100 = 0 && R12101 = 0)) && (R19 = 0 || (R12102 = 0 && R12103 = 0)) && (R19 = 0 || (R12104 = 0 && R12105 = 0)) && (R19 = 0 || (R12106 = 0 && R12107 = 0)) && (R19 = 0 || (R12108 = 0 && R12109 = 0)) && (R48 + R11531 + R11528 = 0 || (R42 + R11524 + R11522 = 0 && R43 + R11525 + R11523 + -1*R11535 + -1*R11533 - R53 = 0)) && (R48 + R11531 + R11528 = 0 || (R46 + R11529 + R11526 = 0 && R47 + R11530 + R11527 + -1*R11535 + -1*R11533 - R53 = 0)) && (R58 + R11963 + R11960 = 0 || (R56 + R11961 + R11958 = 0 && R57 + R11962 + R11959 = 0)) && (R58 + R11963 + R11960 = 0 || (R62 + R12070 + R12068 = 0 && R63 + R12071 + R12069 = 0)) && (R12072 = 0 || R1 < 1) && (R12074 = 0 || R1 < 1) && (R12076 = 0 || R1 < 1) && (R12078 = 0 || R1 < 1) && (R12080 = 0 || R1 < 1) && (R12082 = 0 || R1 < 1) && (R12084 = 0 || R1 < 1) && (R12086 = 0 || R1 < 1) && (R12088 = 0 || R1 < 1) && (R12090 = 0 || R1 < 1);
// End of Parikh automata intersection problem
