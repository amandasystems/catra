// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R11522, R11523, R11524, R11525, R11526, R11527, R11528, R11529, R11530, R11531, R12, R14072, R14073, R14074, R14075, R14076, R14077, R14078, R14079, R14080, R14081, R14186, R14187, R14188, R14189, R14190, R14191, R14192, R14193, R14194, R14195, R14196, R14197, R14198, R14199, R14200, R14201, R14202, R14203, R14204, R14205, R14206, R14207, R14208, R14209, R14210, R14211, R14212, R14213, R14214, R14215, R14216, R14217, R14218, R14219, R14220, R14221, R14222, R14223, R14224, R14225, R14226, R14227, R14228, R14229, R14230, R14231, R14232, R14233, R14234, R14235, R14236, R14237, R14238, R14239, R14240, R14241, R14242, R14243, R14244, R14245, R14246, R14247, R14248, R14249, R14250, R14251, R14252, R14253, R14254, R14255, R14256, R14257, R14258, R14259, R14260, R14261, R14262, R14263, R14264, R14265, R14266, R14267, R14268, R14269, R14270, R14271, R14272, R14273, R14274, R14275, R14276, R14277, R14278, R14279, R14280, R14281, R14282, R14283, R14284, R14285, R14286, R14287, R14288, R14289, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 72];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [73, 73];
  s0 -> s1 [74, 65535];
  s1 -> s1 [0, 72];
  s1 -> s2 [73, 73];
  s1 -> s1 [74, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s1 [0, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R25 += 1 };
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R14210 += 1, R14211 += 1 };
  s0 -> s1 [0, 65535] { R14211 += 1, R19 += 1 };
  s1 -> s1 [0, 65535] { R14211 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 72] { R14213 += 1 };
  s0 -> s0 [0, 65535] { R14212 += 1, R14213 += 1 };
  s0 -> s2 [73, 73] { R14213 += 1 };
  s0 -> s3 [73, 73] { R14213 += 1 };
  s0 -> s1 [82, 65535] { R14213 += 1 };
  s1 -> s1 [0, 72] { R14213 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R14213 += 1 };
  s1 -> s3 [73, 73] { R14213 += 1 };
  s1 -> s1 [82, 65535] { R14213 += 1 };
  s2 -> s2 [0, 73] { R14213 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [82, 65535] { R14213 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 72] { R14215 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R14214 += 1, R14215 += 1 };
  s0 -> s2 [73, 73] { R14215 += 1, R38 += 1 };
  s0 -> s3 [73, 73] { R14215 += 1, R38 += 1 };
  s0 -> s1 [74, 65535] { R14215 += 1, R38 += 1 };
  s1 -> s1 [0, 72] { R14215 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R14215 += 1, R38 += 1 };
  s1 -> s3 [73, 73] { R14215 += 1, R38 += 1 };
  s1 -> s1 [74, 65535] { R14215 += 1, R38 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R14215 += 1, R38 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 72] { R14217 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R14216 += 1, R14217 += 1 };
  s0 -> s2 [73, 73] { R14217 += 1, R40 += 1 };
  s0 -> s3 [73, 73] { R14217 += 1, R40 += 1 };
  s0 -> s1 [74, 65535] { R14217 += 1, R40 += 1 };
  s1 -> s1 [0, 72] { R14217 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R14217 += 1, R40 += 1 };
  s1 -> s3 [73, 73] { R14217 += 1, R40 += 1 };
  s1 -> s1 [74, 65535] { R14217 += 1, R40 += 1 };
  s2 -> s2 [0, 65535] { R14217 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 72] { R14219 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R14218 += 1, R14219 += 1 };
  s0 -> s2 [73, 73] { R14219 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [73, 73] { R14219 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [74, 65535] { R14219 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 72] { R14219 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R14219 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [73, 73] { R14219 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [74, 65535] { R14219 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R14219 += 1, R42 += 1, R43 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 72] { R14221 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R14220 += 1, R14221 += 1 };
  s0 -> s2 [73, 73] { R14221 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [73, 73] { R14221 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [74, 65535] { R14221 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 72] { R14221 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R14221 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [73, 73] { R14221 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [74, 65535] { R14221 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R14221 += 1, R46 += 1, R47 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 72] { R14223 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R14222 += 1, R14223 += 1 };
  s0 -> s2 [73, 73] { R14223 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [73, 73] { R14223 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [74, 65535] { R14223 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 72] { R14223 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R14223 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [73, 73] { R14223 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [74, 65535] { R14223 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535] { R14223 += 1, R52 += 1, R53 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 72] { R14225 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R14224 += 1, R14225 += 1 };
  s0 -> s2 [73, 73] { R14225 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [73, 73] { R14225 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [74, 65535] { R14225 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 72] { R14225 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R14225 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [73, 73] { R14225 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [74, 65535] { R14225 += 1, R56 += 1, R57 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R14225 += 1, R56 += 1, R57 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 72] { R14227 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R14226 += 1, R14227 += 1 };
  s0 -> s2 [73, 73] { R14227 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [73, 73] { R14227 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [74, 65535] { R14227 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 72] { R14227 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R14227 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [73, 73] { R14227 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [74, 65535] { R14227 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R14227 += 1, R62 += 1, R63 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 72] { R14247 += 1 };
  s0 -> s0 [0, 65535] { R14246 += 1, R14247 += 1 };
  s0 -> s2 [73, 73] { R14247 += 1 };
  s0 -> s1 [74, 65535] { R14247 += 1 };
  s1 -> s1 [0, 72] { R14247 += 1 };
  s1 -> s2 [73, 73] { R14247 += 1 };
  s1 -> s1 [74, 65535] { R14247 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R14247 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R14249 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R14248 += 1, R14249 += 1 };
  s1 -> s1 [0, 65535] { R14249 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 72] { R14251 += 1 };
  s0 -> s2 [0, 65535] { R14251 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R14250 += 1, R14251 += 1 };
  s0 -> s3 [73, 73] { R14251 += 1 };
  s0 -> s1 [74, 65535] { R14251 += 1 };
  s1 -> s1 [0, 72] { R14251 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [73, 73] { R14251 += 1 };
  s1 -> s1 [74, 65535] { R14251 += 1 };
  s2 -> s1 [0, 72] { R14251 += 1 };
  s2 -> s2 [0, 65535] { R14251 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [73, 73] { R14251 += 1 };
  s2 -> s1 [74, 65535] { R14251 += 1 };
  s3 -> s3 [0, 65535] { R14251 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 72] { R14253 += 1, R14191 += 1 };
  s0 -> s0 [0, 65535] { R14252 += 1, R14253 += 1 };
  s0 -> s2 [0, 65535] { R14253 += 1, R14190 += 1, R14191 += 1 };
  s0 -> s1 [74, 65535] { R14253 += 1, R14191 += 1 };
  s1 -> s1 [0, 72] { R14253 += 1, R14191 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R14253 += 1 };
  s1 -> s1 [74, 65535] { R14253 += 1, R14191 += 1 };
  s2 -> s1 [0, 72] { R14253 += 1, R14191 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R14253 += 1, R14190 += 1, R14191 += 1 };
  s2 -> s1 [74, 65535] { R14253 += 1, R14191 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R14255 += 1, R14192 += 1, R14193 += 1 };
  s0 -> s2 [0, 65535] { R14255 += 1, R14193 += 1, R17 += 1 };
  s0 -> s0 [0, 65535] { R14254 += 1, R14255 += 1 };
  s1 -> s1 [0, 65535] { R14255 += 1, R14192 += 1, R14193 += 1 };
  s1 -> s2 [0, 65535] { R14255 += 1, R14193 += 1, R17 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R14255 += 1 };
  s2 -> s2 [0, 65535] { R14255 += 1, R14193 += 1, R17 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R14255 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 73] { R14257 += 1, R14195 += 1 };
  s0 -> s0 [0, 65535] { R14256 += 1, R14257 += 1 };
  s0 -> s2 [0, 65535] { R14257 += 1, R14194 += 1, R14195 += 1 };
  s0 -> s1 [81, 65535] { R14257 += 1, R14195 += 1 };
  s1 -> s1 [0, 73] { R14257 += 1, R14195 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R14257 += 1 };
  s1 -> s1 [81, 65535] { R14257 += 1, R14195 += 1 };
  s2 -> s1 [0, 73] { R14257 += 1, R14195 += 1 };
  s2 -> s2 [0, 65535] { R14257 += 1, R14194 += 1, R14195 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [81, 65535] { R14257 += 1, R14195 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R14259 += 1, R14197 += 1, R67 += 1 };
  s0 -> s2 [0, 65535] { R14259 += 1, R14196 += 1, R14197 += 1 };
  s0 -> s0 [0, 65535] { R14258 += 1, R14259 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R14259 += 1, R14197 += 1, R67 += 1 };
  s1 -> s4 [0, 65535] { R14259 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R14259 += 1, R14197 += 1, R67 += 1 };
  s2 -> s2 [0, 65535] { R14259 += 1, R14196 += 1, R14197 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R14259 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 80] { R14261 += 1, R14199 += 1 };
  s0 -> s2 [0, 65535] { R14261 += 1, R14198 += 1, R14199 += 1 };
  s0 -> s0 [0, 65535] { R14260 += 1, R14261 += 1 };
  s0 -> s3 [0, 65535] { R14261 += 1, R14199 += 1, R69 += 1 };
  s0 -> s1 [82, 65535] { R14261 += 1, R14199 += 1 };
  s1 -> s1 [0, 80] { R14261 += 1, R14199 += 1 };
  s1 -> s1 [0, 65535] { R14261 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [82, 65535] { R14261 += 1, R14199 += 1 };
  s2 -> s1 [0, 80] { R14261 += 1, R14199 += 1 };
  s2 -> s2 [0, 65535] { R14261 += 1, R14198 += 1, R14199 += 1 };
  s2 -> s3 [0, 65535] { R14261 += 1, R14199 += 1, R69 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [82, 65535] { R14261 += 1, R14199 += 1 };
  s3 -> s1 [0, 80] { R14261 += 1, R14199 += 1 };
  s3 -> s4 [0, 65535] { R14261 += 1 };
  s3 -> s3 [0, 65535] { R14261 += 1, R14199 += 1, R69 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [82, 65535] { R14261 += 1, R14199 += 1 };
  s4 -> s4 [0, 65535] { R14261 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 80] { R14263 += 1, R14201 += 1, R11525 += 1 };
  s0 -> s0 [0, 65535] { R14262 += 1, R14263 += 1 };
  s0 -> s2 [0, 65535] { R14263 += 1, R14200 += 1, R14201 += 1 };
  s0 -> s1 [0, 65535] { R14263 += 1, R14201 += 1 };
  s0 -> s1 [82, 65535] { R14263 += 1, R14201 += 1, R11525 += 1 };
  s1 -> s1 [0, 80] { R14263 += 1, R14201 += 1, R11525 += 1 };
  s1 -> s4 [0, 65535] { R14263 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R14263 += 1, R14201 += 1 };
  s1 -> s1 [82, 65535] { R14263 += 1, R14201 += 1, R11525 += 1 };
  s2 -> s1 [0, 80] { R14263 += 1, R14201 += 1, R11525 += 1 };
  s2 -> s2 [0, 65535] { R14263 += 1, R14200 += 1, R14201 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R14263 += 1, R14201 += 1 };
  s2 -> s1 [82, 65535] { R14263 += 1, R14201 += 1, R11525 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R14263 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s0 [0, 65535] { R14264 += 1, R14265 += 1 };
  s0 -> s1 [0, 65535] { R14265 += 1, R14203 += 1, R11530 += 1, R11531 += 1 };
  s0 -> s2 [0, 65535] { R14265 += 1, R14202 += 1, R14203 += 1 };
  s0 -> s3 [0, 65535] { R14265 += 1, R14203 += 1, R11529 += 1, R11530 += 1 };
  s1 -> s1 [0, 65535] { R14265 += 1, R14203 += 1, R11530 += 1, R11531 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R14265 += 1 };
  s1 -> s6 [0, 65535] { R14265 += 1, R14203 += 1 };
  s2 -> s1 [0, 65535] { R14265 += 1, R14203 += 1, R11530 += 1, R11531 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R14265 += 1, R14202 += 1, R14203 += 1 };
  s2 -> s3 [0, 65535] { R14265 += 1, R14203 += 1, R11529 += 1, R11530 += 1 };
  s3 -> s1 [0, 65535] { R14265 += 1, R14203 += 1, R11530 += 1, R11531 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R14265 += 1, R14203 += 1, R11529 += 1, R11530 += 1 };
  s3 -> s5 [0, 65535] { R14265 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R14265 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R14265 += 1 };
  s6 -> s6 [0, 65535] { R14265 += 1, R14203 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 81] { R14267 += 1, R14205 += 1, R14075 += 1 };
  s0 -> s0 [0, 65535] { R14266 += 1, R14267 += 1 };
  s0 -> s2 [0, 65535] { R14267 += 1, R14204 += 1, R14205 += 1 };
  s0 -> s3 [0, 65535] { R14267 += 1, R14205 += 1, R14074 += 1, R14075 += 1 };
  s0 -> s4 [86, 86] { R14267 += 1, R14205 += 1, R14075 += 1 };
  s0 -> s1 [87, 65535] { R14267 += 1, R14205 += 1, R14075 += 1 };
  s1 -> s1 [0, 81] { R14267 += 1, R14205 += 1, R14075 += 1 };
  s1 -> s4 [86, 86] { R14267 += 1, R14205 += 1, R14075 += 1 };
  s1 -> s1 [87, 65535] { R14267 += 1, R14205 += 1, R14075 += 1 };
  s2 -> s1 [0, 81] { R14267 += 1, R14205 += 1, R14075 += 1 };
  s2 -> s2 [0, 65535] { R14267 += 1, R14204 += 1, R14205 += 1 };
  s2 -> s3 [0, 65535] { R14267 += 1, R14205 += 1, R14074 += 1, R14075 += 1 };
  s2 -> s4 [86, 86] { R14267 += 1, R14205 += 1, R14075 += 1 };
  s2 -> s1 [87, 65535] { R14267 += 1, R14205 += 1, R14075 += 1 };
  s3 -> s1 [0, 81] { R14267 += 1, R14205 += 1, R14075 += 1 };
  s3 -> s3 [0, 65535] { R14267 += 1, R14205 += 1, R14074 += 1, R14075 += 1 };
  s3 -> s4 [86, 86] { R14267 += 1, R14205 += 1, R14075 += 1 };
  s3 -> s1 [87, 65535] { R14267 += 1, R14205 += 1, R14075 += 1 };
  s4 -> s4 [0, 81] { R14267 += 1, R14205 += 1, R14075 += 1 };
  s4 -> s4 [0, 65535] { R14267 += 1, R14205 += 1 };
  s4 -> s5 [0, 65535] { R14267 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [86, 65535] { R14267 += 1, R14205 += 1, R14075 += 1 };
  s5 -> s5 [0, 65535] { R14267 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s4, s5, s6;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R14269 += 1, R14206 += 1, R14207 += 1 };
  s0 -> s2 [0, 65535] { R14269 += 1, R14207 += 1, R14080 += 1, R14081 += 1 };
  s0 -> s3 [0, 65535] { R14269 += 1, R14207 += 1, R14079 += 1, R14080 += 1 };
  s0 -> s0 [0, 65535] { R14268 += 1, R14269 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R14269 += 1, R14206 += 1, R14207 += 1 };
  s1 -> s2 [0, 65535] { R14269 += 1, R14207 += 1, R14080 += 1, R14081 += 1 };
  s1 -> s3 [0, 65535] { R14269 += 1, R14207 += 1, R14079 += 1, R14080 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R14269 += 1, R14207 += 1, R14080 += 1, R14081 += 1 };
  s2 -> s5 [0, 65535] { R14269 += 1 };
  s2 -> s6 [0, 65535] { R14269 += 1, R14207 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R14269 += 1, R14207 += 1, R14080 += 1, R14081 += 1 };
  s3 -> s5 [0, 65535] { R14269 += 1 };
  s3 -> s3 [0, 65535] { R14269 += 1, R14207 += 1, R14079 += 1, R14080 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R14269 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R14269 += 1 };
  s6 -> s6 [0, 65535] { R14269 += 1, R14207 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 80] { R14271 += 1, R14209 += 1, R14189 += 1 };
  s0 -> s2 [0, 65535] { R14271 += 1, R14208 += 1, R14209 += 1 };
  s0 -> s1 [0, 65535] { R14271 += 1, R14209 += 1 };
  s0 -> s0 [0, 65535] { R14270 += 1, R14271 += 1 };
  s0 -> s3 [81, 81] { R14271 += 1, R14209 += 1, R14189 += 1 };
  s0 -> s4 [81, 81] { R14271 += 1, R14209 += 1, R14189 += 1 };
  s0 -> s1 [87, 65535] { R14271 += 1, R14209 += 1, R14189 += 1 };
  s1 -> s1 [0, 80] { R14271 += 1, R14209 += 1, R14189 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R14271 += 1 };
  s1 -> s1 [0, 65535] { R14271 += 1, R14209 += 1 };
  s1 -> s3 [81, 81] { R14271 += 1, R14209 += 1, R14189 += 1 };
  s1 -> s4 [81, 81] { R14271 += 1, R14209 += 1, R14189 += 1 };
  s1 -> s1 [87, 65535] { R14271 += 1, R14209 += 1, R14189 += 1 };
  s2 -> s1 [0, 80] { R14271 += 1, R14209 += 1, R14189 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R14271 += 1, R14208 += 1, R14209 += 1 };
  s2 -> s1 [0, 65535] { R14271 += 1, R14209 += 1 };
  s2 -> s3 [81, 81] { R14271 += 1, R14209 += 1, R14189 += 1 };
  s2 -> s4 [81, 81] { R14271 += 1, R14209 += 1, R14189 += 1 };
  s2 -> s1 [87, 65535] { R14271 += 1, R14209 += 1, R14189 += 1 };
  s3 -> s3 [0, 81] { R14271 += 1, R14209 += 1, R14189 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R14271 += 1, R14209 += 1 };
  s3 -> s6 [0, 65535] { R14271 += 1 };
  s3 -> s3 [87, 65535] { R14271 += 1, R14209 += 1, R14189 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R14271 += 1, R14209 += 1 };
  s4 -> s6 [0, 65535] { R14271 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R14271 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R14273 += 1, R14229 += 1, R18 += 1 };
  s0 -> s2 [0, 65535] { R14273 += 1, R14228 += 1, R14229 += 1 };
  s0 -> s0 [0, 65535] { R14272 += 1, R14273 += 1 };
  s1 -> s4 [0, 65535] { R14273 += 1 };
  s1 -> s1 [0, 65535] { R14273 += 1, R14229 += 1, R18 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R14273 += 1, R14229 += 1, R18 += 1 };
  s2 -> s2 [0, 65535] { R14273 += 1, R14228 += 1, R14229 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R14273 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 72] { R14275 += 1, R14231 += 1 };
  s0 -> s0 [0, 65535] { R14274 += 1, R14275 += 1 };
  s0 -> s2 [0, 65535] { R14275 += 1, R14230 += 1, R14231 += 1 };
  s0 -> s3 [73, 73] { R14275 += 1, R14231 += 1 };
  s0 -> s4 [73, 73] { R14275 += 1, R14231 += 1 };
  s0 -> s5 [81, 81] { R14275 += 1, R14231 += 1 };
  s0 -> s1 [82, 65535] { R14275 += 1, R14231 += 1 };
  s1 -> s1 [0, 72] { R14275 += 1, R14231 += 1 };
  s1 -> s3 [73, 73] { R14275 += 1, R14231 += 1 };
  s1 -> s4 [73, 73] { R14275 += 1, R14231 += 1 };
  s1 -> s5 [81, 81] { R14275 += 1, R14231 += 1 };
  s1 -> s1 [82, 65535] { R14275 += 1, R14231 += 1 };
  s2 -> s1 [0, 72] { R14275 += 1, R14231 += 1 };
  s2 -> s2 [0, 65535] { R14275 += 1, R14230 += 1, R14231 += 1 };
  s2 -> s3 [73, 73] { R14275 += 1, R14231 += 1 };
  s2 -> s4 [73, 73] { R14275 += 1, R14231 += 1 };
  s2 -> s5 [81, 81] { R14275 += 1, R14231 += 1 };
  s2 -> s1 [82, 65535] { R14275 += 1, R14231 += 1 };
  s4 -> s4 [0, 73] { R14275 += 1, R14231 += 1 };
  s4 -> s8 [81, 81] { R14275 += 1, R14231 += 1 };
  s4 -> s4 [82, 65535] { R14275 += 1, R14231 += 1 };
  s5 -> s5 [0, 72] { R14275 += 1, R14231 += 1 };
  s5 -> s5 [0, 65535] { R14275 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [73, 73] { R14275 += 1, R14231 += 1 };
  s5 -> s8 [73, 73] { R14275 += 1, R14231 += 1 };
  s5 -> s5 [81, 65535] { R14275 += 1, R14231 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R14275 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 73] { R14275 += 1, R14231 += 1 };
  s8 -> s8 [0, 65535] { R14275 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [81, 65535] { R14275 += 1, R14231 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 72] { R14277 += 1, R14233 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R14276 += 1, R14277 += 1 };
  s0 -> s2 [0, 65535] { R14277 += 1, R14232 += 1, R14233 += 1 };
  s0 -> s3 [73, 73] { R14277 += 1, R14233 += 1, R66 += 1 };
  s0 -> s4 [73, 73] { R14277 += 1, R14233 += 1, R66 += 1 };
  s0 -> s1 [74, 65535] { R14277 += 1, R14233 += 1, R66 += 1 };
  s1 -> s1 [0, 72] { R14277 += 1, R14233 += 1, R66 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R14277 += 1 };
  s1 -> s3 [73, 73] { R14277 += 1, R14233 += 1, R66 += 1 };
  s1 -> s4 [73, 73] { R14277 += 1, R14233 += 1, R66 += 1 };
  s1 -> s1 [74, 65535] { R14277 += 1, R14233 += 1, R66 += 1 };
  s2 -> s1 [0, 72] { R14277 += 1, R14233 += 1, R66 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R14277 += 1, R14232 += 1, R14233 += 1 };
  s2 -> s3 [73, 73] { R14277 += 1, R14233 += 1, R66 += 1 };
  s2 -> s4 [73, 73] { R14277 += 1, R14233 += 1, R66 += 1 };
  s2 -> s1 [74, 65535] { R14277 += 1, R14233 += 1, R66 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R14277 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R14277 += 1 };
  s4 -> s4 [0, 65535] { R14277 += 1, R14233 += 1, R66 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R14277 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 72] { R14279 += 1, R14235 += 1, R68 += 1 };
  s0 -> s0 [0, 65535] { R14278 += 1, R14279 += 1 };
  s0 -> s2 [0, 65535] { R14279 += 1, R14234 += 1, R14235 += 1 };
  s0 -> s3 [73, 73] { R14279 += 1, R14235 += 1, R68 += 1 };
  s0 -> s4 [73, 73] { R14279 += 1, R14235 += 1, R68 += 1 };
  s0 -> s1 [74, 65535] { R14279 += 1, R14235 += 1, R68 += 1 };
  s1 -> s1 [0, 72] { R14279 += 1, R14235 += 1, R68 += 1 };
  s1 -> s1 [0, 65535] { R14279 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R14279 += 1, R14235 += 1, R68 += 1 };
  s1 -> s4 [73, 73] { R14279 += 1, R14235 += 1, R68 += 1 };
  s1 -> s1 [74, 65535] { R14279 += 1, R14235 += 1, R68 += 1 };
  s2 -> s1 [0, 72] { R14279 += 1, R14235 += 1, R68 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R14279 += 1, R14234 += 1, R14235 += 1 };
  s2 -> s3 [73, 73] { R14279 += 1, R14235 += 1, R68 += 1 };
  s2 -> s4 [73, 73] { R14279 += 1, R14235 += 1, R68 += 1 };
  s2 -> s1 [74, 65535] { R14279 += 1, R14235 += 1, R68 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R14279 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R14279 += 1, R14235 += 1, R68 += 1 };
  s4 -> s6 [0, 65535] { R14279 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R14279 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 72] { R14281 += 1, R14237 += 1, R11523 += 1 };
  s0 -> s2 [0, 72] { R14281 += 1, R14237 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s0 [0, 65535] { R14280 += 1, R14281 += 1 };
  s0 -> s3 [0, 65535] { R14281 += 1, R14236 += 1, R14237 += 1 };
  s0 -> s4 [73, 73] { R14281 += 1, R14237 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s5 [73, 73] { R14281 += 1, R14237 += 1, R11523 += 1 };
  s0 -> s6 [73, 73] { R14281 += 1, R14237 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s7 [73, 73] { R14281 += 1, R14237 += 1, R11523 += 1 };
  s0 -> s1 [74, 80] { R14281 += 1, R14237 += 1, R11523 += 1 };
  s0 -> s2 [74, 65535] { R14281 += 1, R14237 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s1 [82, 65535] { R14281 += 1, R14237 += 1, R11523 += 1 };
  s1 -> s1 [0, 72] { R14281 += 1, R14237 += 1, R11523 += 1 };
  s1 -> s1 [0, 65535] { R14281 += 1 };
  s1 -> s9 [0, 65535];
  s1 -> s5 [73, 73] { R14281 += 1, R14237 += 1 };
  s1 -> s7 [73, 73] { R14281 += 1, R14237 += 1 };
  s1 -> s1 [74, 80] { R14281 += 1, R14237 += 1, R11523 += 1 };
  s1 -> s1 [74, 65535] { R14281 += 1, R14237 += 1 };
  s1 -> s1 [82, 65535] { R14281 += 1, R14237 += 1, R11523 += 1 };
  s2 -> s1 [0, 72] { R14281 += 1, R14237 += 1, R11523 += 1 };
  s2 -> s2 [0, 72] { R14281 += 1, R14237 += 1, R11522 += 1, R11523 += 1 };
  s2 -> s4 [73, 73] { R14281 += 1, R14237 += 1, R11522 += 1, R11523 += 1 };
  s2 -> s5 [73, 73] { R14281 += 1, R14237 += 1, R11523 += 1 };
  s2 -> s6 [73, 73] { R14281 += 1, R14237 += 1, R11522 += 1, R11523 += 1 };
  s2 -> s7 [73, 73] { R14281 += 1, R14237 += 1, R11523 += 1 };
  s2 -> s1 [74, 80] { R14281 += 1, R14237 += 1, R11523 += 1 };
  s2 -> s2 [74, 65535] { R14281 += 1, R14237 += 1, R11522 += 1, R11523 += 1 };
  s2 -> s1 [82, 65535] { R14281 += 1, R14237 += 1, R11523 += 1 };
  s3 -> s1 [0, 72] { R14281 += 1, R14237 += 1, R11523 += 1 };
  s3 -> s2 [0, 72] { R14281 += 1, R14237 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s3 [0, 65535] { R14281 += 1, R14236 += 1, R14237 += 1 };
  s3 -> s4 [73, 73] { R14281 += 1, R14237 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s5 [73, 73] { R14281 += 1, R14237 += 1, R11523 += 1 };
  s3 -> s6 [73, 73] { R14281 += 1, R14237 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s7 [73, 73] { R14281 += 1, R14237 += 1, R11523 += 1 };
  s3 -> s1 [74, 80] { R14281 += 1, R14237 += 1, R11523 += 1 };
  s3 -> s2 [74, 65535] { R14281 += 1, R14237 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s1 [82, 65535] { R14281 += 1, R14237 += 1, R11523 += 1 };
  s5 -> s5 [0, 65535] { R14281 += 1 };
  s5 -> s9 [0, 65535];
  s6 -> s7 [0, 80] { R14281 += 1, R14237 += 1, R11523 += 1 };
  s6 -> s6 [0, 65535] { R14281 += 1, R14237 += 1, R11522 += 1, R11523 += 1 };
  s6 -> s7 [82, 65535] { R14281 += 1, R14237 += 1, R11523 += 1 };
  s7 -> s7 [0, 80] { R14281 += 1, R14237 += 1, R11523 += 1 };
  s7 -> s8 [0, 65535] { R14281 += 1 };
  s7 -> s7 [0, 65535] { R14281 += 1, R14237 += 1 };
  s7 -> s9 [0, 65535];
  s7 -> s7 [82, 65535] { R14281 += 1, R14237 += 1, R11523 += 1 };
  s8 -> s8 [0, 65535] { R14281 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s8, s5, s9, s1, s7;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 72] { R14283 += 1, R14239 += 1, R11526 += 1, R11527 += 1 };
  s0 -> s2 [0, 65535] { R14283 += 1, R14238 += 1, R14239 += 1 };
  s0 -> s0 [0, 65535] { R14282 += 1, R14283 += 1 };
  s0 -> s3 [73, 73] { R14283 += 1, R14239 += 1, R11526 += 1, R11527 += 1 };
  s0 -> s4 [73, 73] { R14283 += 1, R14239 += 1, R11526 += 1, R11527 += 1 };
  s0 -> s1 [74, 65535] { R14283 += 1, R14239 += 1, R11526 += 1, R11527 += 1 };
  s1 -> s1 [0, 72] { R14283 += 1, R14239 += 1, R11526 += 1, R11527 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R14283 += 1 };
  s1 -> s3 [73, 73] { R14283 += 1, R14239 += 1, R11526 += 1, R11527 += 1 };
  s1 -> s4 [73, 73] { R14283 += 1, R14239 += 1, R11526 += 1, R11527 += 1 };
  s1 -> s1 [74, 65535] { R14283 += 1, R14239 += 1, R11526 += 1, R11527 += 1 };
  s2 -> s1 [0, 72] { R14283 += 1, R14239 += 1, R11526 += 1, R11527 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R14283 += 1, R14238 += 1, R14239 += 1 };
  s2 -> s3 [73, 73] { R14283 += 1, R14239 += 1, R11526 += 1, R11527 += 1 };
  s2 -> s4 [73, 73] { R14283 += 1, R14239 += 1, R11526 += 1, R11527 += 1 };
  s2 -> s1 [74, 65535] { R14283 += 1, R14239 += 1, R11526 += 1, R11527 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R14283 += 1 };
  s3 -> s3 [0, 65535] { R14283 += 1, R14239 += 1, R11526 += 1, R11527 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R14283 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R14283 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 72] { R14285 += 1, R14241 += 1, R14072 += 1, R14073 += 1 };
  s0 -> s2 [0, 65535] { R14285 += 1, R14240 += 1, R14241 += 1 };
  s0 -> s0 [0, 65535] { R14284 += 1, R14285 += 1 };
  s0 -> s3 [73, 73] { R14285 += 1, R14241 += 1, R14072 += 1, R14073 += 1 };
  s0 -> s4 [73, 73] { R14285 += 1, R14241 += 1, R14072 += 1, R14073 += 1 };
  s0 -> s1 [74, 65535] { R14285 += 1, R14241 += 1, R14072 += 1, R14073 += 1 };
  s1 -> s1 [0, 72] { R14285 += 1, R14241 += 1, R14072 += 1, R14073 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R14285 += 1 };
  s1 -> s3 [73, 73] { R14285 += 1, R14241 += 1, R14072 += 1, R14073 += 1 };
  s1 -> s4 [73, 73] { R14285 += 1, R14241 += 1, R14072 += 1, R14073 += 1 };
  s1 -> s1 [74, 65535] { R14285 += 1, R14241 += 1, R14072 += 1, R14073 += 1 };
  s2 -> s1 [0, 72] { R14285 += 1, R14241 += 1, R14072 += 1, R14073 += 1 };
  s2 -> s2 [0, 65535] { R14285 += 1, R14240 += 1, R14241 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R14285 += 1, R14241 += 1, R14072 += 1, R14073 += 1 };
  s2 -> s4 [73, 73] { R14285 += 1, R14241 += 1, R14072 += 1, R14073 += 1 };
  s2 -> s1 [74, 65535] { R14285 += 1, R14241 += 1, R14072 += 1, R14073 += 1 };
  s3 -> s3 [0, 65535] { R14285 += 1, R14241 += 1, R14072 += 1, R14073 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R14285 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R14285 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R14285 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 72] { R14287 += 1, R14243 += 1, R14076 += 1, R14077 += 1 };
  s0 -> s0 [0, 65535] { R14286 += 1, R14287 += 1 };
  s0 -> s2 [0, 65535] { R14287 += 1, R14242 += 1, R14243 += 1 };
  s0 -> s3 [73, 73] { R14287 += 1, R14243 += 1, R14076 += 1, R14077 += 1 };
  s0 -> s4 [73, 73] { R14287 += 1, R14243 += 1, R14076 += 1, R14077 += 1 };
  s0 -> s1 [74, 65535] { R14287 += 1, R14243 += 1, R14076 += 1, R14077 += 1 };
  s1 -> s1 [0, 72] { R14287 += 1, R14243 += 1, R14076 += 1, R14077 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R14287 += 1 };
  s1 -> s3 [73, 73] { R14287 += 1, R14243 += 1, R14076 += 1, R14077 += 1 };
  s1 -> s4 [73, 73] { R14287 += 1, R14243 += 1, R14076 += 1, R14077 += 1 };
  s1 -> s1 [74, 65535] { R14287 += 1, R14243 += 1, R14076 += 1, R14077 += 1 };
  s2 -> s1 [0, 72] { R14287 += 1, R14243 += 1, R14076 += 1, R14077 += 1 };
  s2 -> s2 [0, 65535] { R14287 += 1, R14242 += 1, R14243 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R14287 += 1, R14243 += 1, R14076 += 1, R14077 += 1 };
  s2 -> s4 [73, 73] { R14287 += 1, R14243 += 1, R14076 += 1, R14077 += 1 };
  s2 -> s1 [74, 65535] { R14287 += 1, R14243 += 1, R14076 += 1, R14077 += 1 };
  s3 -> s3 [0, 65535] { R14287 += 1, R14243 += 1, R14076 += 1, R14077 += 1 };
  s3 -> s6 [0, 65535] { R14287 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R14287 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R14287 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 72] { R14289 += 1, R14245 += 1, R14187 += 1 };
  s0 -> s2 [0, 72] { R14289 += 1, R14245 += 1, R14186 += 1, R14187 += 1 };
  s0 -> s3 [0, 65535] { R14289 += 1, R14244 += 1, R14245 += 1 };
  s0 -> s0 [0, 65535] { R14288 += 1, R14289 += 1 };
  s0 -> s4 [73, 73] { R14289 += 1, R14245 += 1, R14187 += 1 };
  s0 -> s5 [73, 73] { R14289 += 1, R14245 += 1, R14186 += 1, R14187 += 1 };
  s0 -> s6 [73, 73] { R14289 += 1, R14245 += 1, R14186 += 1, R14187 += 1 };
  s0 -> s7 [73, 73] { R14289 += 1, R14245 += 1, R14187 += 1 };
  s0 -> s1 [74, 80] { R14289 += 1, R14245 += 1, R14187 += 1 };
  s0 -> s2 [74, 65535] { R14289 += 1, R14245 += 1, R14186 += 1, R14187 += 1 };
  s0 -> s1 [87, 65535] { R14289 += 1, R14245 += 1, R14187 += 1 };
  s1 -> s1 [0, 72] { R14289 += 1, R14245 += 1, R14187 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s1 [0, 65535] { R14289 += 1 };
  s1 -> s4 [73, 73] { R14289 += 1, R14245 += 1 };
  s1 -> s7 [73, 73] { R14289 += 1, R14245 += 1 };
  s1 -> s1 [74, 80] { R14289 += 1, R14245 += 1, R14187 += 1 };
  s1 -> s1 [74, 65535] { R14289 += 1, R14245 += 1 };
  s1 -> s1 [87, 65535] { R14289 += 1, R14245 += 1, R14187 += 1 };
  s2 -> s1 [0, 72] { R14289 += 1, R14245 += 1, R14187 += 1 };
  s2 -> s2 [0, 72] { R14289 += 1, R14245 += 1, R14186 += 1, R14187 += 1 };
  s2 -> s4 [73, 73] { R14289 += 1, R14245 += 1, R14187 += 1 };
  s2 -> s5 [73, 73] { R14289 += 1, R14245 += 1, R14186 += 1, R14187 += 1 };
  s2 -> s6 [73, 73] { R14289 += 1, R14245 += 1, R14186 += 1, R14187 += 1 };
  s2 -> s7 [73, 73] { R14289 += 1, R14245 += 1, R14187 += 1 };
  s2 -> s1 [74, 80] { R14289 += 1, R14245 += 1, R14187 += 1 };
  s2 -> s2 [74, 65535] { R14289 += 1, R14245 += 1, R14186 += 1, R14187 += 1 };
  s2 -> s1 [87, 65535] { R14289 += 1, R14245 += 1, R14187 += 1 };
  s3 -> s1 [0, 72] { R14289 += 1, R14245 += 1, R14187 += 1 };
  s3 -> s2 [0, 72] { R14289 += 1, R14245 += 1, R14186 += 1, R14187 += 1 };
  s3 -> s3 [0, 65535] { R14289 += 1, R14244 += 1, R14245 += 1 };
  s3 -> s4 [73, 73] { R14289 += 1, R14245 += 1, R14187 += 1 };
  s3 -> s5 [73, 73] { R14289 += 1, R14245 += 1, R14186 += 1, R14187 += 1 };
  s3 -> s6 [73, 73] { R14289 += 1, R14245 += 1, R14186 += 1, R14187 += 1 };
  s3 -> s7 [73, 73] { R14289 += 1, R14245 += 1, R14187 += 1 };
  s3 -> s1 [74, 80] { R14289 += 1, R14245 += 1, R14187 += 1 };
  s3 -> s2 [74, 65535] { R14289 += 1, R14245 += 1, R14186 += 1, R14187 += 1 };
  s3 -> s1 [87, 65535] { R14289 += 1, R14245 += 1, R14187 += 1 };
  s4 -> s4 [0, 65535] { R14289 += 1 };
  s4 -> s8 [0, 65535];
  s5 -> s7 [0, 80] { R14289 += 1, R14245 += 1, R14187 += 1 };
  s5 -> s5 [0, 65535] { R14289 += 1, R14245 += 1, R14186 += 1, R14187 += 1 };
  s5 -> s7 [87, 65535] { R14289 += 1, R14245 += 1, R14187 += 1 };
  s7 -> s7 [0, 80] { R14289 += 1, R14245 += 1, R14187 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s9 [0, 65535] { R14289 += 1 };
  s7 -> s7 [0, 65535] { R14289 += 1, R14245 += 1 };
  s7 -> s7 [87, 65535] { R14289 += 1, R14245 += 1, R14187 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R14289 += 1 };
  accepting s4, s8, s9, s1, s7;
};
};
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [113, 113];
  accepting s1;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
constraint R1 = R14205 && R2 = R14289 && R20 - R14289 = -1 && R21 = R14289 && R22 - R14289 = -1 && R23 = R14289 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R14075 + -1*R14073 - R53 = 0 && R52 + R14074 + R14072 = 0 && R14204 = 0 && R14230 = 0 && R14231 = 0 && R14236 = 0 && R14237 = 0 && R14244 = 0 && R14245 = 0 && R14246 = 0 && R14247 = R14289 && R14248 = 0 && R14249 = R14289 && R14250 = 0 && R14251 = R14289 && R14252 = 0 && R14253 = R14289 && R14254 = 0 && R14255 = R14289 && R14256 = 0 && R14257 = R14289 && R14258 = 0 && R14259 = R14289 && R14260 = 0 && R14261 = R14289 && R14262 = 0 && R14263 = R14289 && R14264 = 0 && R14265 = R14289 && R14266 = 0 && R14267 = R14289 && R14268 = 0 && R14269 = R14289 && R14270 = 0 && R14271 = R14289 && R14272 = 0 && R14273 = R14289 && R14274 = 0 && R14275 = R14289 && R14276 = 0 && R14277 = R14289 && R14278 = 0 && R14279 = R14289 && R14280 = 0 && R14281 = R14289 && R14282 = 0 && R14283 = R14289 && R14284 = 0 && R14285 = R14289 && R14286 = 0 && R14287 = R14289 && R14288 = 0 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R14075 + -1*R14073 - R53 < 1 && -1 < R14205 && 0 < R14289 && (R48 + R11531 + R11528 != 0 || ((R42 + R11524 + R11522 != 0 || R43 + R11525 + R11523 + -1*R14075 + -1*R14073 - R53 = 0 || R53 + R14075 + R14073 < 1) && (R42 + R11524 + R11522 = 0 || R53 + R14075 + R14073 < 1))) && (R48 + R11531 + R11528 != 0 || ((R46 + R11529 + R11526 != 0 || R47 + R11530 + R11527 + -1*R14075 + -1*R14073 - R53 = 0 || R53 + R14075 + R14073 < 1) && (R46 + R11529 + R11526 = 0 || R53 + R14075 + R14073 < 1))) && (R14190 != 0 || R14191 = R14205 || (R17 = 0 && R14205 = 0)) && (R14192 != 0 || R14193 = R14205 || (R17 = 0 && R14205 = 0)) && (R14194 != 0 || R14195 = R14205 || (R17 = 0 && R14205 = 0)) && (R14196 != 0 || R14197 = R14205 || (R17 = 0 && R14205 = 0)) && (R14198 != 0 || R14199 = R14205 || (R17 = 0 && R14205 = 0)) && (R14200 != 0 || R14201 = R14205 || (R17 = 0 && R14205 = 0)) && (R14202 != 0 || R14203 = R14205 || (R17 = 0 && R14205 = 0)) && (R14206 != 0 || R14205 = R14207 || (R17 = 0 && R14205 = 0)) && (R14208 != 0 || R14205 = R14209 || (R17 = 0 && R14205 = 0)) && (R18 = 0 || (R14228 = 0 && R14229 = 0)) && (R18 = 0 || (R14232 = 0 && R14233 = 0)) && (R18 = 0 || (R14234 = 0 && R14235 = 0)) && (R18 = 0 || (R14238 = 0 && R14239 = 0)) && (R18 = 0 || (R14240 = 0 && R14241 = 0)) && (R18 = 0 || (R14242 = 0 && R14243 = 0)) && (R19 = 0 || (R14210 = 0 && R14211 = 0)) && (R19 = 0 || (R14212 = 0 && R14213 = 0)) && (R19 = 0 || (R14214 = 0 && R14215 = 0)) && (R19 = 0 || (R14216 = 0 && R14217 = 0)) && (R19 = 0 || (R14218 = 0 && R14219 = 0)) && (R19 = 0 || (R14220 = 0 && R14221 = 0)) && (R19 = 0 || (R14222 = 0 && R14223 = 0)) && (R19 = 0 || (R14224 = 0 && R14225 = 0)) && (R19 = 0 || (R14226 = 0 && R14227 = 0)) && (R48 + R11531 + R11528 = 0 || (R42 + R11524 + R11522 = 0 && R43 + R11525 + R11523 + -1*R14075 + -1*R14073 - R53 = 0)) && (R48 + R11531 + R11528 = 0 || (R46 + R11529 + R11526 = 0 && R47 + R11530 + R11527 + -1*R14075 + -1*R14073 - R53 = 0)) && (R58 + R14081 + R14078 = 0 || (R56 + R14079 + R14076 = 0 && R57 + R14080 + R14077 = 0)) && (R58 + R14081 + R14078 = 0 || (R62 + R14188 + R14186 = 0 && R63 + R14189 + R14187 = 0)) && (R14190 = 0 || (R17 = 0 && R14205 = 0)) && (R14192 = 0 || (R17 = 0 && R14205 = 0)) && (R14194 = 0 || (R17 = 0 && R14205 = 0)) && (R14196 = 0 || (R17 = 0 && R14205 = 0)) && (R14198 = 0 || (R17 = 0 && R14205 = 0)) && (R14200 = 0 || (R17 = 0 && R14205 = 0)) && (R14202 = 0 || (R17 = 0 && R14205 = 0)) && (R14206 = 0 || (R17 = 0 && R14205 = 0)) && (R14208 = 0 || (R17 = 0 && R14205 = 0));
// End of Parikh automata intersection problem
