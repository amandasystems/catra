// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R11522, R11523, R11524, R11525, R12, R15342, R15343, R15344, R15345, R15346, R15347, R15348, R15349, R15350, R15351, R15774, R15775, R15776, R15777, R15778, R15779, R15988, R15989, R15990, R15991, R15992, R15993, R15994, R15995, R15996, R15997, R15998, R15999, R16000, R16001, R16002, R16003, R16004, R16005, R16006, R16007, R16008, R16009, R16010, R16011, R16012, R16013, R16014, R16015, R16016, R16017, R16018, R16019, R16020, R16021, R16022, R16023, R16024, R16025, R16026, R16027, R16028, R16029, R16030, R16031, R16032, R16033, R16034, R16035, R16036, R16037, R16038, R16039, R16040, R16041, R16042, R16043, R16044, R16045, R16046, R16047, R16048, R16049, R16050, R16051, R16052, R16053, R16054, R16055, R16056, R16057, R16058, R16059, R16060, R16061, R16062, R16063, R16064, R16065, R16066, R16067, R16068, R16069, R16070, R16071, R16072, R16073, R16074, R16075, R16076, R16077, R16078, R16079, R16080, R16081, R16082, R16083, R16084, R16085, R16086, R16087, R16088, R16089, R16090, R16091, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 72];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [73, 73];
  s0 -> s1 [74, 65535];
  s1 -> s1 [0, 72];
  s1 -> s2 [73, 73];
  s1 -> s1 [74, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s1 [0, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R25 += 1 };
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R16012 += 1, R16013 += 1 };
  s0 -> s1 [0, 65535] { R16013 += 1, R19 += 1 };
  s1 -> s1 [0, 65535] { R16013 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 72] { R16015 += 1 };
  s0 -> s0 [0, 65535] { R16014 += 1, R16015 += 1 };
  s0 -> s2 [73, 73] { R16015 += 1 };
  s0 -> s3 [73, 73] { R16015 += 1 };
  s0 -> s1 [82, 65535] { R16015 += 1 };
  s1 -> s1 [0, 72] { R16015 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R16015 += 1 };
  s1 -> s3 [73, 73] { R16015 += 1 };
  s1 -> s1 [82, 65535] { R16015 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 73] { R16015 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [82, 65535] { R16015 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 72] { R16017 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R16016 += 1, R16017 += 1 };
  s0 -> s2 [73, 73] { R16017 += 1, R38 += 1 };
  s0 -> s3 [73, 73] { R16017 += 1, R38 += 1 };
  s0 -> s1 [74, 65535] { R16017 += 1, R38 += 1 };
  s1 -> s1 [0, 72] { R16017 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R16017 += 1, R38 += 1 };
  s1 -> s3 [73, 73] { R16017 += 1, R38 += 1 };
  s1 -> s1 [74, 65535] { R16017 += 1, R38 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R16017 += 1, R38 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 72] { R16019 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R16018 += 1, R16019 += 1 };
  s0 -> s2 [73, 73] { R16019 += 1, R40 += 1 };
  s0 -> s3 [73, 73] { R16019 += 1, R40 += 1 };
  s0 -> s1 [74, 65535] { R16019 += 1, R40 += 1 };
  s1 -> s1 [0, 72] { R16019 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R16019 += 1, R40 += 1 };
  s1 -> s3 [73, 73] { R16019 += 1, R40 += 1 };
  s1 -> s1 [74, 65535] { R16019 += 1, R40 += 1 };
  s2 -> s2 [0, 65535] { R16019 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 72] { R16021 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R16020 += 1, R16021 += 1 };
  s0 -> s2 [73, 73] { R16021 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [73, 73] { R16021 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [74, 65535] { R16021 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 72] { R16021 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R16021 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [73, 73] { R16021 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [74, 65535] { R16021 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535] { R16021 += 1, R42 += 1, R43 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 72] { R16023 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R16022 += 1, R16023 += 1 };
  s0 -> s2 [73, 73] { R16023 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [73, 73] { R16023 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [74, 65535] { R16023 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 72] { R16023 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R16023 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [73, 73] { R16023 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [74, 65535] { R16023 += 1, R46 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R16023 += 1, R46 += 1, R47 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 72] { R16025 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R16024 += 1, R16025 += 1 };
  s0 -> s2 [73, 73] { R16025 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [73, 73] { R16025 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [74, 65535] { R16025 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 72] { R16025 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R16025 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [73, 73] { R16025 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [74, 65535] { R16025 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535] { R16025 += 1, R52 += 1, R53 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 72] { R16027 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R16026 += 1, R16027 += 1 };
  s0 -> s2 [73, 73] { R16027 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [73, 73] { R16027 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [74, 65535] { R16027 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 72] { R16027 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R16027 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [73, 73] { R16027 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [74, 65535] { R16027 += 1, R56 += 1, R57 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R16027 += 1, R56 += 1, R57 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 72] { R16029 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R16028 += 1, R16029 += 1 };
  s0 -> s2 [73, 73] { R16029 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [73, 73] { R16029 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [74, 65535] { R16029 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 72] { R16029 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R16029 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [73, 73] { R16029 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [74, 65535] { R16029 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535] { R16029 += 1, R62 += 1, R63 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 72] { R16049 += 1 };
  s0 -> s0 [0, 65535] { R16048 += 1, R16049 += 1 };
  s0 -> s2 [73, 73] { R16049 += 1 };
  s0 -> s1 [74, 65535] { R16049 += 1 };
  s1 -> s1 [0, 72] { R16049 += 1 };
  s1 -> s2 [73, 73] { R16049 += 1 };
  s1 -> s1 [74, 65535] { R16049 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R16049 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R16051 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R16050 += 1, R16051 += 1 };
  s1 -> s1 [0, 65535] { R16051 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 72] { R16053 += 1 };
  s0 -> s2 [0, 65535] { R16053 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R16052 += 1, R16053 += 1 };
  s0 -> s3 [73, 73] { R16053 += 1 };
  s0 -> s1 [74, 65535] { R16053 += 1 };
  s1 -> s1 [0, 72] { R16053 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [73, 73] { R16053 += 1 };
  s1 -> s1 [74, 65535] { R16053 += 1 };
  s2 -> s1 [0, 72] { R16053 += 1 };
  s2 -> s2 [0, 65535] { R16053 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [73, 73] { R16053 += 1 };
  s2 -> s1 [74, 65535] { R16053 += 1 };
  s3 -> s3 [0, 65535] { R16053 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 72] { R16055 += 1, R15993 += 1 };
  s0 -> s0 [0, 65535] { R16054 += 1, R16055 += 1 };
  s0 -> s2 [0, 65535] { R16055 += 1, R15992 += 1, R15993 += 1 };
  s0 -> s1 [74, 65535] { R16055 += 1, R15993 += 1 };
  s1 -> s1 [0, 72] { R16055 += 1, R15993 += 1 };
  s1 -> s1 [0, 65535] { R16055 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [74, 65535] { R16055 += 1, R15993 += 1 };
  s2 -> s1 [0, 72] { R16055 += 1, R15993 += 1 };
  s2 -> s2 [0, 65535] { R16055 += 1, R15992 += 1, R15993 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [74, 65535] { R16055 += 1, R15993 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R16057 += 1, R15994 += 1, R15995 += 1 };
  s0 -> s2 [0, 65535] { R16057 += 1, R15995 += 1, R17 += 1 };
  s0 -> s0 [0, 65535] { R16056 += 1, R16057 += 1 };
  s1 -> s1 [0, 65535] { R16057 += 1, R15994 += 1, R15995 += 1 };
  s1 -> s2 [0, 65535] { R16057 += 1, R15995 += 1, R17 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R16057 += 1, R15995 += 1, R17 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R16057 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R16057 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 73] { R16059 += 1, R15997 += 1 };
  s0 -> s2 [0, 65535] { R16059 += 1, R15996 += 1, R15997 += 1 };
  s0 -> s0 [0, 65535] { R16058 += 1, R16059 += 1 };
  s0 -> s1 [81, 65535] { R16059 += 1, R15997 += 1 };
  s1 -> s1 [0, 73] { R16059 += 1, R15997 += 1 };
  s1 -> s1 [0, 65535] { R16059 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [81, 65535] { R16059 += 1, R15997 += 1 };
  s2 -> s1 [0, 73] { R16059 += 1, R15997 += 1 };
  s2 -> s2 [0, 65535] { R16059 += 1, R15996 += 1, R15997 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [81, 65535] { R16059 += 1, R15997 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s0 [0, 65535] { R16060 += 1, R16061 += 1 };
  s0 -> s1 [0, 65535] { R16061 += 1, R15999 += 1, R67 += 1 };
  s0 -> s2 [0, 65535] { R16061 += 1, R15998 += 1, R15999 += 1 };
  s1 -> s4 [0, 65535] { R16061 += 1 };
  s1 -> s1 [0, 65535] { R16061 += 1, R15999 += 1, R67 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R16061 += 1, R15999 += 1, R67 += 1 };
  s2 -> s2 [0, 65535] { R16061 += 1, R15998 += 1, R15999 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R16061 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 80] { R16063 += 1, R16001 += 1 };
  s0 -> s2 [0, 65535] { R16063 += 1, R16001 += 1, R69 += 1 };
  s0 -> s3 [0, 65535] { R16063 += 1, R16000 += 1, R16001 += 1 };
  s0 -> s0 [0, 65535] { R16062 += 1, R16063 += 1 };
  s0 -> s1 [82, 65535] { R16063 += 1, R16001 += 1 };
  s1 -> s1 [0, 80] { R16063 += 1, R16001 += 1 };
  s1 -> s1 [0, 65535] { R16063 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [82, 65535] { R16063 += 1, R16001 += 1 };
  s2 -> s1 [0, 80] { R16063 += 1, R16001 += 1 };
  s2 -> s5 [0, 65535] { R16063 += 1 };
  s2 -> s2 [0, 65535] { R16063 += 1, R16001 += 1, R69 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [82, 65535] { R16063 += 1, R16001 += 1 };
  s3 -> s1 [0, 80] { R16063 += 1, R16001 += 1 };
  s3 -> s2 [0, 65535] { R16063 += 1, R16001 += 1, R69 += 1 };
  s3 -> s3 [0, 65535] { R16063 += 1, R16000 += 1, R16001 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [82, 65535] { R16063 += 1, R16001 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R16063 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 80] { R16065 += 1, R16003 += 1, R11525 += 1 };
  s0 -> s2 [0, 65535] { R16065 += 1, R16002 += 1, R16003 += 1 };
  s0 -> s0 [0, 65535] { R16064 += 1, R16065 += 1 };
  s0 -> s1 [0, 65535] { R16065 += 1, R16003 += 1 };
  s0 -> s1 [82, 65535] { R16065 += 1, R16003 += 1, R11525 += 1 };
  s1 -> s1 [0, 80] { R16065 += 1, R16003 += 1, R11525 += 1 };
  s1 -> s4 [0, 65535] { R16065 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R16065 += 1, R16003 += 1 };
  s1 -> s1 [82, 65535] { R16065 += 1, R16003 += 1, R11525 += 1 };
  s2 -> s1 [0, 80] { R16065 += 1, R16003 += 1, R11525 += 1 };
  s2 -> s2 [0, 65535] { R16065 += 1, R16002 += 1, R16003 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R16065 += 1, R16003 += 1 };
  s2 -> s1 [82, 65535] { R16065 += 1, R16003 += 1, R11525 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R16065 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s0 [0, 65535] { R16066 += 1, R16067 += 1 };
  s0 -> s1 [0, 65535] { R16067 += 1, R16005 += 1 };
  s0 -> s2 [0, 65535] { R16067 += 1, R16004 += 1, R16005 += 1 };
  s0 -> s3 [0, 65535] { R16067 += 1, R16005 += 1, R15346 += 1, R15347 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R16067 += 1, R16005 += 1 };
  s1 -> s5 [0, 65535] { R16067 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R16067 += 1, R16005 += 1 };
  s2 -> s2 [0, 65535] { R16067 += 1, R16004 += 1, R16005 += 1 };
  s2 -> s3 [0, 65535] { R16067 += 1, R16005 += 1, R15346 += 1, R15347 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R16067 += 1, R16005 += 1 };
  s3 -> s3 [0, 65535] { R16067 += 1, R16005 += 1, R15346 += 1, R15347 += 1 };
  s3 -> s5 [0, 65535] { R16067 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R16067 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 81] { R16069 += 1, R16007 += 1, R15351 += 1 };
  s0 -> s1 [0, 65535] { R16069 += 1, R16007 += 1 };
  s0 -> s2 [0, 65535] { R16069 += 1, R16006 += 1, R16007 += 1 };
  s0 -> s0 [0, 65535] { R16068 += 1, R16069 += 1 };
  s0 -> s1 [86, 65535] { R16069 += 1, R16007 += 1, R15351 += 1 };
  s1 -> s1 [0, 81] { R16069 += 1, R16007 += 1, R15351 += 1 };
  s1 -> s4 [0, 65535] { R16069 += 1 };
  s1 -> s1 [0, 65535] { R16069 += 1, R16007 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [86, 65535] { R16069 += 1, R16007 += 1, R15351 += 1 };
  s2 -> s1 [0, 81] { R16069 += 1, R16007 += 1, R15351 += 1 };
  s2 -> s1 [0, 65535] { R16069 += 1, R16007 += 1 };
  s2 -> s2 [0, 65535] { R16069 += 1, R16006 += 1, R16007 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [86, 65535] { R16069 += 1, R16007 += 1, R15351 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R16069 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s0 [0, 65535] { R16070 += 1, R16071 += 1 };
  s0 -> s1 [0, 65535] { R16071 += 1, R16009 += 1 };
  s0 -> s2 [0, 65535] { R16071 += 1, R16008 += 1, R16009 += 1 };
  s0 -> s3 [0, 65535] { R16071 += 1, R16009 += 1, R15778 += 1, R15779 += 1 };
  s1 -> s1 [0, 65535] { R16071 += 1, R16009 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R16071 += 1 };
  s2 -> s1 [0, 65535] { R16071 += 1, R16009 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R16071 += 1, R16008 += 1, R16009 += 1 };
  s2 -> s3 [0, 65535] { R16071 += 1, R16009 += 1, R15778 += 1, R15779 += 1 };
  s3 -> s1 [0, 65535] { R16071 += 1, R16009 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R16071 += 1 };
  s3 -> s3 [0, 65535] { R16071 += 1, R16009 += 1, R15778 += 1, R15779 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R16071 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 81] { R16073 += 1, R16011 += 1, R15991 += 1 };
  s0 -> s0 [0, 65535] { R16072 += 1, R16073 += 1 };
  s0 -> s2 [0, 65535] { R16073 += 1, R16010 += 1, R16011 += 1 };
  s0 -> s1 [0, 65535] { R16073 += 1, R16011 += 1 };
  s0 -> s1 [87, 65535] { R16073 += 1, R16011 += 1, R15991 += 1 };
  s1 -> s1 [0, 81] { R16073 += 1, R16011 += 1, R15991 += 1 };
  s1 -> s4 [0, 65535] { R16073 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R16073 += 1, R16011 += 1 };
  s1 -> s1 [87, 65535] { R16073 += 1, R16011 += 1, R15991 += 1 };
  s2 -> s1 [0, 81] { R16073 += 1, R16011 += 1, R15991 += 1 };
  s2 -> s2 [0, 65535] { R16073 += 1, R16010 += 1, R16011 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R16073 += 1, R16011 += 1 };
  s2 -> s1 [87, 65535] { R16073 += 1, R16011 += 1, R15991 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R16073 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R16075 += 1, R16030 += 1, R16031 += 1 };
  s0 -> s2 [0, 65535] { R16075 += 1, R16031 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R16074 += 1, R16075 += 1 };
  s1 -> s1 [0, 65535] { R16075 += 1, R16030 += 1, R16031 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R16075 += 1, R16031 += 1, R18 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R16075 += 1 };
  s2 -> s2 [0, 65535] { R16075 += 1, R16031 += 1, R18 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R16075 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 72] { R16077 += 1, R16033 += 1 };
  s0 -> s2 [0, 65535] { R16077 += 1, R16032 += 1, R16033 += 1 };
  s0 -> s0 [0, 65535] { R16076 += 1, R16077 += 1 };
  s0 -> s3 [73, 73] { R16077 += 1, R16033 += 1 };
  s0 -> s4 [73, 73] { R16077 += 1, R16033 += 1 };
  s0 -> s5 [81, 81] { R16077 += 1, R16033 += 1 };
  s0 -> s1 [82, 65535] { R16077 += 1, R16033 += 1 };
  s1 -> s1 [0, 72] { R16077 += 1, R16033 += 1 };
  s1 -> s3 [73, 73] { R16077 += 1, R16033 += 1 };
  s1 -> s4 [73, 73] { R16077 += 1, R16033 += 1 };
  s1 -> s5 [81, 81] { R16077 += 1, R16033 += 1 };
  s1 -> s1 [82, 65535] { R16077 += 1, R16033 += 1 };
  s2 -> s1 [0, 72] { R16077 += 1, R16033 += 1 };
  s2 -> s2 [0, 65535] { R16077 += 1, R16032 += 1, R16033 += 1 };
  s2 -> s3 [73, 73] { R16077 += 1, R16033 += 1 };
  s2 -> s4 [73, 73] { R16077 += 1, R16033 += 1 };
  s2 -> s5 [81, 81] { R16077 += 1, R16033 += 1 };
  s2 -> s1 [82, 65535] { R16077 += 1, R16033 += 1 };
  s3 -> s3 [0, 73] { R16077 += 1, R16033 += 1 };
  s3 -> s7 [81, 81] { R16077 += 1, R16033 += 1 };
  s3 -> s3 [82, 65535] { R16077 += 1, R16033 += 1 };
  s5 -> s5 [0, 72] { R16077 += 1, R16033 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R16077 += 1 };
  s5 -> s7 [73, 73] { R16077 += 1, R16033 += 1 };
  s5 -> s8 [73, 73] { R16077 += 1, R16033 += 1 };
  s5 -> s5 [81, 65535] { R16077 += 1, R16033 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 73] { R16077 += 1, R16033 += 1 };
  s7 -> s7 [0, 65535] { R16077 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [81, 65535] { R16077 += 1, R16033 += 1 };
  s8 -> s8 [0, 65535] { R16077 += 1 };
  s8 -> s6 [0, 65535];
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 72] { R16079 += 1, R16035 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R16078 += 1, R16079 += 1 };
  s0 -> s2 [0, 65535] { R16079 += 1, R16034 += 1, R16035 += 1 };
  s0 -> s3 [73, 73] { R16079 += 1, R16035 += 1, R66 += 1 };
  s0 -> s4 [73, 73] { R16079 += 1, R16035 += 1, R66 += 1 };
  s0 -> s1 [74, 65535] { R16079 += 1, R16035 += 1, R66 += 1 };
  s1 -> s1 [0, 72] { R16079 += 1, R16035 += 1, R66 += 1 };
  s1 -> s1 [0, 65535] { R16079 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [73, 73] { R16079 += 1, R16035 += 1, R66 += 1 };
  s1 -> s4 [73, 73] { R16079 += 1, R16035 += 1, R66 += 1 };
  s1 -> s1 [74, 65535] { R16079 += 1, R16035 += 1, R66 += 1 };
  s2 -> s1 [0, 72] { R16079 += 1, R16035 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R16079 += 1, R16034 += 1, R16035 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [73, 73] { R16079 += 1, R16035 += 1, R66 += 1 };
  s2 -> s4 [73, 73] { R16079 += 1, R16035 += 1, R66 += 1 };
  s2 -> s1 [74, 65535] { R16079 += 1, R16035 += 1, R66 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R16079 += 1 };
  s4 -> s5 [0, 65535] { R16079 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R16079 += 1, R16035 += 1, R66 += 1 };
  s5 -> s5 [0, 65535] { R16079 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 72] { R16081 += 1, R16037 += 1, R68 += 1 };
  s0 -> s0 [0, 65535] { R16080 += 1, R16081 += 1 };
  s0 -> s2 [0, 65535] { R16081 += 1, R16036 += 1, R16037 += 1 };
  s0 -> s3 [73, 73] { R16081 += 1, R16037 += 1, R68 += 1 };
  s0 -> s4 [73, 73] { R16081 += 1, R16037 += 1, R68 += 1 };
  s0 -> s1 [74, 65535] { R16081 += 1, R16037 += 1, R68 += 1 };
  s1 -> s1 [0, 72] { R16081 += 1, R16037 += 1, R68 += 1 };
  s1 -> s1 [0, 65535] { R16081 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R16081 += 1, R16037 += 1, R68 += 1 };
  s1 -> s4 [73, 73] { R16081 += 1, R16037 += 1, R68 += 1 };
  s1 -> s1 [74, 65535] { R16081 += 1, R16037 += 1, R68 += 1 };
  s2 -> s1 [0, 72] { R16081 += 1, R16037 += 1, R68 += 1 };
  s2 -> s2 [0, 65535] { R16081 += 1, R16036 += 1, R16037 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R16081 += 1, R16037 += 1, R68 += 1 };
  s2 -> s4 [73, 73] { R16081 += 1, R16037 += 1, R68 += 1 };
  s2 -> s1 [74, 65535] { R16081 += 1, R16037 += 1, R68 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R16081 += 1 };
  s3 -> s3 [0, 65535] { R16081 += 1, R16037 += 1, R68 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R16081 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R16081 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 72] { R16083 += 1, R16039 += 1, R11523 += 1 };
  s0 -> s2 [0, 72] { R16083 += 1, R16039 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s3 [0, 65535] { R16083 += 1, R16038 += 1, R16039 += 1 };
  s0 -> s0 [0, 65535] { R16082 += 1, R16083 += 1 };
  s0 -> s4 [73, 73] { R16083 += 1, R16039 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s5 [73, 73] { R16083 += 1, R16039 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s6 [73, 73] { R16083 += 1, R16039 += 1, R11523 += 1 };
  s0 -> s7 [73, 73] { R16083 += 1, R16039 += 1, R11523 += 1 };
  s0 -> s1 [74, 80] { R16083 += 1, R16039 += 1, R11523 += 1 };
  s0 -> s2 [74, 65535] { R16083 += 1, R16039 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s1 [82, 65535] { R16083 += 1, R16039 += 1, R11523 += 1 };
  s1 -> s1 [0, 72] { R16083 += 1, R16039 += 1, R11523 += 1 };
  s1 -> s1 [0, 65535] { R16083 += 1 };
  s1 -> s9 [0, 65535];
  s1 -> s6 [73, 73] { R16083 += 1, R16039 += 1 };
  s1 -> s7 [73, 73] { R16083 += 1, R16039 += 1 };
  s1 -> s1 [74, 80] { R16083 += 1, R16039 += 1, R11523 += 1 };
  s1 -> s1 [74, 65535] { R16083 += 1, R16039 += 1 };
  s1 -> s1 [82, 65535] { R16083 += 1, R16039 += 1, R11523 += 1 };
  s2 -> s1 [0, 72] { R16083 += 1, R16039 += 1, R11523 += 1 };
  s2 -> s2 [0, 72] { R16083 += 1, R16039 += 1, R11522 += 1, R11523 += 1 };
  s2 -> s4 [73, 73] { R16083 += 1, R16039 += 1, R11522 += 1, R11523 += 1 };
  s2 -> s5 [73, 73] { R16083 += 1, R16039 += 1, R11522 += 1, R11523 += 1 };
  s2 -> s6 [73, 73] { R16083 += 1, R16039 += 1, R11523 += 1 };
  s2 -> s7 [73, 73] { R16083 += 1, R16039 += 1, R11523 += 1 };
  s2 -> s1 [74, 80] { R16083 += 1, R16039 += 1, R11523 += 1 };
  s2 -> s2 [74, 65535] { R16083 += 1, R16039 += 1, R11522 += 1, R11523 += 1 };
  s2 -> s1 [82, 65535] { R16083 += 1, R16039 += 1, R11523 += 1 };
  s3 -> s1 [0, 72] { R16083 += 1, R16039 += 1, R11523 += 1 };
  s3 -> s2 [0, 72] { R16083 += 1, R16039 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s3 [0, 65535] { R16083 += 1, R16038 += 1, R16039 += 1 };
  s3 -> s4 [73, 73] { R16083 += 1, R16039 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s5 [73, 73] { R16083 += 1, R16039 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s6 [73, 73] { R16083 += 1, R16039 += 1, R11523 += 1 };
  s3 -> s7 [73, 73] { R16083 += 1, R16039 += 1, R11523 += 1 };
  s3 -> s1 [74, 80] { R16083 += 1, R16039 += 1, R11523 += 1 };
  s3 -> s2 [74, 65535] { R16083 += 1, R16039 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s1 [82, 65535] { R16083 += 1, R16039 += 1, R11523 += 1 };
  s4 -> s7 [0, 80] { R16083 += 1, R16039 += 1, R11523 += 1 };
  s4 -> s4 [0, 65535] { R16083 += 1, R16039 += 1, R11522 += 1, R11523 += 1 };
  s4 -> s7 [82, 65535] { R16083 += 1, R16039 += 1, R11523 += 1 };
  s6 -> s9 [0, 65535];
  s6 -> s6 [0, 65535] { R16083 += 1 };
  s7 -> s7 [0, 80] { R16083 += 1, R16039 += 1, R11523 += 1 };
  s7 -> s8 [0, 65535] { R16083 += 1 };
  s7 -> s9 [0, 65535];
  s7 -> s7 [0, 65535] { R16083 += 1, R16039 += 1 };
  s7 -> s7 [82, 65535] { R16083 += 1, R16039 += 1, R11523 += 1 };
  s8 -> s8 [0, 65535] { R16083 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s8, s9, s6, s1, s7;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 72] { R16085 += 1, R16041 += 1, R15342 += 1, R15343 += 1 };
  s0 -> s2 [0, 72] { R16085 += 1, R16041 += 1, R15343 += 1, R15344 += 1 };
  s0 -> s0 [0, 65535] { R16084 += 1, R16085 += 1 };
  s0 -> s3 [0, 65535] { R16085 += 1, R16040 += 1, R16041 += 1 };
  s0 -> s4 [73, 73] { R16085 += 1, R16041 += 1, R15342 += 1, R15343 += 1 };
  s0 -> s5 [73, 73] { R16085 += 1, R16041 += 1, R15343 += 1, R15344 += 1 };
  s0 -> s6 [73, 73] { R16085 += 1, R16041 += 1, R15342 += 1, R15343 += 1 };
  s0 -> s7 [73, 73] { R16085 += 1, R16041 += 1, R15343 += 1, R15344 += 1 };
  s0 -> s1 [74, 65535] { R16085 += 1, R16041 += 1, R15342 += 1, R15343 += 1 };
  s0 -> s2 [74, 65535] { R16085 += 1, R16041 += 1, R15343 += 1, R15344 += 1 };
  s1 -> s1 [0, 72] { R16085 += 1, R16041 += 1, R15342 += 1, R15343 += 1 };
  s1 -> s2 [0, 72] { R16085 += 1, R16041 += 1, R15343 += 1, R15344 += 1 };
  s1 -> s4 [73, 73] { R16085 += 1, R16041 += 1, R15342 += 1, R15343 += 1 };
  s1 -> s5 [73, 73] { R16085 += 1, R16041 += 1, R15343 += 1, R15344 += 1 };
  s1 -> s6 [73, 73] { R16085 += 1, R16041 += 1, R15342 += 1, R15343 += 1 };
  s1 -> s7 [73, 73] { R16085 += 1, R16041 += 1, R15343 += 1, R15344 += 1 };
  s1 -> s1 [74, 65535] { R16085 += 1, R16041 += 1, R15342 += 1, R15343 += 1 };
  s1 -> s2 [74, 65535] { R16085 += 1, R16041 += 1, R15343 += 1, R15344 += 1 };
  s2 -> s2 [0, 72] { R16085 += 1, R16041 += 1, R15343 += 1, R15344 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R16085 += 1 };
  s2 -> s5 [73, 73] { R16085 += 1, R16041 += 1, R15343 += 1, R15344 += 1 };
  s2 -> s7 [73, 73] { R16085 += 1, R16041 += 1, R15343 += 1, R15344 += 1 };
  s2 -> s2 [74, 65535] { R16085 += 1, R16041 += 1, R15343 += 1, R15344 += 1 };
  s3 -> s1 [0, 72] { R16085 += 1, R16041 += 1, R15342 += 1, R15343 += 1 };
  s3 -> s2 [0, 72] { R16085 += 1, R16041 += 1, R15343 += 1, R15344 += 1 };
  s3 -> s3 [0, 65535] { R16085 += 1, R16040 += 1, R16041 += 1 };
  s3 -> s4 [73, 73] { R16085 += 1, R16041 += 1, R15342 += 1, R15343 += 1 };
  s3 -> s5 [73, 73] { R16085 += 1, R16041 += 1, R15343 += 1, R15344 += 1 };
  s3 -> s6 [73, 73] { R16085 += 1, R16041 += 1, R15342 += 1, R15343 += 1 };
  s3 -> s7 [73, 73] { R16085 += 1, R16041 += 1, R15343 += 1, R15344 += 1 };
  s3 -> s1 [74, 65535] { R16085 += 1, R16041 += 1, R15342 += 1, R15343 += 1 };
  s3 -> s2 [74, 65535] { R16085 += 1, R16041 += 1, R15343 += 1, R15344 += 1 };
  s5 -> s5 [0, 65535] { R16085 += 1, R16041 += 1, R15343 += 1, R15344 += 1 };
  s5 -> s9 [0, 65535] { R16085 += 1 };
  s5 -> s8 [0, 65535];
  s6 -> s5 [0, 65535] { R16085 += 1, R16041 += 1, R15343 += 1, R15344 += 1 };
  s6 -> s6 [0, 65535] { R16085 += 1, R16041 += 1, R15342 += 1, R15343 += 1 };
  s7 -> s7 [0, 65535] { R16085 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R16085 += 1 };
  s9 -> s8 [0, 65535];
  accepting s8, s5, s2, s9, s7;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 72] { R16087 += 1, R16043 += 1, R15349 += 1 };
  s0 -> s2 [0, 72] { R16087 += 1, R16043 += 1, R15348 += 1, R15349 += 1 };
  s0 -> s3 [0, 65535] { R16087 += 1, R16042 += 1, R16043 += 1 };
  s0 -> s0 [0, 65535] { R16086 += 1, R16087 += 1 };
  s0 -> s4 [73, 73] { R16087 += 1, R16043 += 1, R15348 += 1, R15349 += 1 };
  s0 -> s5 [73, 73] { R16087 += 1, R16043 += 1, R15349 += 1 };
  s0 -> s6 [73, 73] { R16087 += 1, R16043 += 1, R15348 += 1, R15349 += 1 };
  s0 -> s7 [73, 73] { R16087 += 1, R16043 += 1, R15349 += 1 };
  s0 -> s1 [74, 81] { R16087 += 1, R16043 += 1, R15349 += 1 };
  s0 -> s2 [74, 65535] { R16087 += 1, R16043 += 1, R15348 += 1, R15349 += 1 };
  s0 -> s8 [86, 86] { R16087 += 1, R16043 += 1, R15349 += 1 };
  s0 -> s1 [87, 65535] { R16087 += 1, R16043 += 1, R15349 += 1 };
  s1 -> s1 [0, 72] { R16087 += 1, R16043 += 1, R15349 += 1 };
  s1 -> s5 [73, 73] { R16087 += 1, R16043 += 1, R15349 += 1 };
  s1 -> s7 [73, 73] { R16087 += 1, R16043 += 1, R15349 += 1 };
  s1 -> s1 [74, 81] { R16087 += 1, R16043 += 1, R15349 += 1 };
  s1 -> s8 [86, 86] { R16087 += 1, R16043 += 1, R15349 += 1 };
  s1 -> s1 [87, 65535] { R16087 += 1, R16043 += 1, R15349 += 1 };
  s2 -> s1 [0, 72] { R16087 += 1, R16043 += 1, R15349 += 1 };
  s2 -> s2 [0, 72] { R16087 += 1, R16043 += 1, R15348 += 1, R15349 += 1 };
  s2 -> s4 [73, 73] { R16087 += 1, R16043 += 1, R15348 += 1, R15349 += 1 };
  s2 -> s5 [73, 73] { R16087 += 1, R16043 += 1, R15349 += 1 };
  s2 -> s6 [73, 73] { R16087 += 1, R16043 += 1, R15348 += 1, R15349 += 1 };
  s2 -> s7 [73, 73] { R16087 += 1, R16043 += 1, R15349 += 1 };
  s2 -> s1 [74, 81] { R16087 += 1, R16043 += 1, R15349 += 1 };
  s2 -> s2 [74, 65535] { R16087 += 1, R16043 += 1, R15348 += 1, R15349 += 1 };
  s2 -> s8 [86, 86] { R16087 += 1, R16043 += 1, R15349 += 1 };
  s2 -> s1 [87, 65535] { R16087 += 1, R16043 += 1, R15349 += 1 };
  s3 -> s1 [0, 72] { R16087 += 1, R16043 += 1, R15349 += 1 };
  s3 -> s2 [0, 72] { R16087 += 1, R16043 += 1, R15348 += 1, R15349 += 1 };
  s3 -> s3 [0, 65535] { R16087 += 1, R16042 += 1, R16043 += 1 };
  s3 -> s4 [73, 73] { R16087 += 1, R16043 += 1, R15348 += 1, R15349 += 1 };
  s3 -> s5 [73, 73] { R16087 += 1, R16043 += 1, R15349 += 1 };
  s3 -> s6 [73, 73] { R16087 += 1, R16043 += 1, R15348 += 1, R15349 += 1 };
  s3 -> s7 [73, 73] { R16087 += 1, R16043 += 1, R15349 += 1 };
  s3 -> s1 [74, 81] { R16087 += 1, R16043 += 1, R15349 += 1 };
  s3 -> s2 [74, 65535] { R16087 += 1, R16043 += 1, R15348 += 1, R15349 += 1 };
  s3 -> s8 [86, 86] { R16087 += 1, R16043 += 1, R15349 += 1 };
  s3 -> s1 [87, 65535] { R16087 += 1, R16043 += 1, R15349 += 1 };
  s6 -> s7 [0, 81] { R16087 += 1, R16043 += 1, R15349 += 1 };
  s6 -> s6 [0, 65535] { R16087 += 1, R16043 += 1, R15348 += 1, R15349 += 1 };
  s6 -> s11 [86, 86] { R16087 += 1, R16043 += 1, R15349 += 1 };
  s6 -> s7 [87, 65535] { R16087 += 1, R16043 += 1, R15349 += 1 };
  s7 -> s7 [0, 81] { R16087 += 1, R16043 += 1, R15349 += 1 };
  s7 -> s11 [86, 86] { R16087 += 1, R16043 += 1, R15349 += 1 };
  s7 -> s7 [87, 65535] { R16087 += 1, R16043 += 1, R15349 += 1 };
  s8 -> s8 [0, 72] { R16087 += 1, R16043 += 1, R15349 += 1 };
  s8 -> s8 [0, 65535] { R16087 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [73, 73] { R16087 += 1, R16043 += 1 };
  s8 -> s11 [73, 73] { R16087 += 1, R16043 += 1 };
  s8 -> s8 [74, 81] { R16087 += 1, R16043 += 1, R15349 += 1 };
  s8 -> s8 [74, 65535] { R16087 += 1, R16043 += 1 };
  s8 -> s8 [86, 65535] { R16087 += 1, R16043 += 1, R15349 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R16087 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s11 [0, 81] { R16087 += 1, R16043 += 1, R15349 += 1 };
  s11 -> s12 [0, 65535] { R16087 += 1 };
  s11 -> s11 [0, 65535] { R16087 += 1, R16043 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [86, 65535] { R16087 += 1, R16043 += 1, R15349 += 1 };
  s12 -> s12 [0, 65535] { R16087 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 72] { R16089 += 1, R16045 += 1, R15774 += 1, R15775 += 1 };
  s0 -> s2 [0, 72] { R16089 += 1, R16045 += 1, R15775 += 1, R15776 += 1 };
  s0 -> s3 [0, 65535] { R16089 += 1, R16044 += 1, R16045 += 1 };
  s0 -> s0 [0, 65535] { R16088 += 1, R16089 += 1 };
  s0 -> s4 [73, 73] { R16089 += 1, R16045 += 1, R15774 += 1, R15775 += 1 };
  s0 -> s5 [73, 73] { R16089 += 1, R16045 += 1, R15775 += 1, R15776 += 1 };
  s0 -> s6 [73, 73] { R16089 += 1, R16045 += 1, R15774 += 1, R15775 += 1 };
  s0 -> s7 [73, 73] { R16089 += 1, R16045 += 1, R15775 += 1, R15776 += 1 };
  s0 -> s1 [74, 65535] { R16089 += 1, R16045 += 1, R15774 += 1, R15775 += 1 };
  s0 -> s2 [74, 65535] { R16089 += 1, R16045 += 1, R15775 += 1, R15776 += 1 };
  s1 -> s1 [0, 72] { R16089 += 1, R16045 += 1, R15774 += 1, R15775 += 1 };
  s1 -> s2 [0, 72] { R16089 += 1, R16045 += 1, R15775 += 1, R15776 += 1 };
  s1 -> s4 [73, 73] { R16089 += 1, R16045 += 1, R15774 += 1, R15775 += 1 };
  s1 -> s5 [73, 73] { R16089 += 1, R16045 += 1, R15775 += 1, R15776 += 1 };
  s1 -> s6 [73, 73] { R16089 += 1, R16045 += 1, R15774 += 1, R15775 += 1 };
  s1 -> s7 [73, 73] { R16089 += 1, R16045 += 1, R15775 += 1, R15776 += 1 };
  s1 -> s1 [74, 65535] { R16089 += 1, R16045 += 1, R15774 += 1, R15775 += 1 };
  s1 -> s2 [74, 65535] { R16089 += 1, R16045 += 1, R15775 += 1, R15776 += 1 };
  s2 -> s2 [0, 72] { R16089 += 1, R16045 += 1, R15775 += 1, R15776 += 1 };
  s2 -> s9 [0, 65535];
  s2 -> s2 [0, 65535] { R16089 += 1 };
  s2 -> s5 [73, 73] { R16089 += 1, R16045 += 1, R15775 += 1, R15776 += 1 };
  s2 -> s7 [73, 73] { R16089 += 1, R16045 += 1, R15775 += 1, R15776 += 1 };
  s2 -> s2 [74, 65535] { R16089 += 1, R16045 += 1, R15775 += 1, R15776 += 1 };
  s3 -> s1 [0, 72] { R16089 += 1, R16045 += 1, R15774 += 1, R15775 += 1 };
  s3 -> s2 [0, 72] { R16089 += 1, R16045 += 1, R15775 += 1, R15776 += 1 };
  s3 -> s3 [0, 65535] { R16089 += 1, R16044 += 1, R16045 += 1 };
  s3 -> s4 [73, 73] { R16089 += 1, R16045 += 1, R15774 += 1, R15775 += 1 };
  s3 -> s5 [73, 73] { R16089 += 1, R16045 += 1, R15775 += 1, R15776 += 1 };
  s3 -> s6 [73, 73] { R16089 += 1, R16045 += 1, R15774 += 1, R15775 += 1 };
  s3 -> s7 [73, 73] { R16089 += 1, R16045 += 1, R15775 += 1, R15776 += 1 };
  s3 -> s1 [74, 65535] { R16089 += 1, R16045 += 1, R15774 += 1, R15775 += 1 };
  s3 -> s2 [74, 65535] { R16089 += 1, R16045 += 1, R15775 += 1, R15776 += 1 };
  s4 -> s4 [0, 65535] { R16089 += 1, R16045 += 1, R15774 += 1, R15775 += 1 };
  s4 -> s7 [0, 65535] { R16089 += 1, R16045 += 1, R15775 += 1, R15776 += 1 };
  s5 -> s9 [0, 65535];
  s5 -> s5 [0, 65535] { R16089 += 1 };
  s7 -> s8 [0, 65535] { R16089 += 1 };
  s7 -> s9 [0, 65535];
  s7 -> s7 [0, 65535] { R16089 += 1, R16045 += 1, R15775 += 1, R15776 += 1 };
  s8 -> s8 [0, 65535] { R16089 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s8, s5, s2, s9, s7;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 72] { R16091 += 1, R16047 += 1, R15989 += 1 };
  s0 -> s2 [0, 72] { R16091 += 1, R16047 += 1, R15988 += 1, R15989 += 1 };
  s0 -> s0 [0, 65535] { R16090 += 1, R16091 += 1 };
  s0 -> s3 [0, 65535] { R16091 += 1, R16046 += 1, R16047 += 1 };
  s0 -> s4 [73, 73] { R16091 += 1, R16047 += 1, R15989 += 1 };
  s0 -> s5 [73, 73] { R16091 += 1, R16047 += 1, R15988 += 1, R15989 += 1 };
  s0 -> s6 [73, 73] { R16091 += 1, R16047 += 1, R15988 += 1, R15989 += 1 };
  s0 -> s7 [73, 73] { R16091 += 1, R16047 += 1, R15989 += 1 };
  s0 -> s1 [74, 80] { R16091 += 1, R16047 += 1, R15989 += 1 };
  s0 -> s2 [74, 65535] { R16091 += 1, R16047 += 1, R15988 += 1, R15989 += 1 };
  s0 -> s8 [81, 81] { R16091 += 1, R16047 += 1, R15989 += 1 };
  s0 -> s1 [87, 65535] { R16091 += 1, R16047 += 1, R15989 += 1 };
  s1 -> s1 [0, 72] { R16091 += 1, R16047 += 1, R15989 += 1 };
  s1 -> s4 [73, 73] { R16091 += 1, R16047 += 1 };
  s1 -> s7 [73, 73] { R16091 += 1, R16047 += 1 };
  s1 -> s1 [74, 80] { R16091 += 1, R16047 += 1, R15989 += 1 };
  s1 -> s1 [74, 65535] { R16091 += 1, R16047 += 1 };
  s1 -> s8 [81, 81] { R16091 += 1, R16047 += 1, R15989 += 1 };
  s1 -> s1 [87, 65535] { R16091 += 1, R16047 += 1, R15989 += 1 };
  s2 -> s1 [0, 72] { R16091 += 1, R16047 += 1, R15989 += 1 };
  s2 -> s2 [0, 72] { R16091 += 1, R16047 += 1, R15988 += 1, R15989 += 1 };
  s2 -> s4 [73, 73] { R16091 += 1, R16047 += 1, R15989 += 1 };
  s2 -> s5 [73, 73] { R16091 += 1, R16047 += 1, R15988 += 1, R15989 += 1 };
  s2 -> s6 [73, 73] { R16091 += 1, R16047 += 1, R15988 += 1, R15989 += 1 };
  s2 -> s7 [73, 73] { R16091 += 1, R16047 += 1, R15989 += 1 };
  s2 -> s1 [74, 80] { R16091 += 1, R16047 += 1, R15989 += 1 };
  s2 -> s2 [74, 65535] { R16091 += 1, R16047 += 1, R15988 += 1, R15989 += 1 };
  s2 -> s8 [81, 81] { R16091 += 1, R16047 += 1, R15989 += 1 };
  s2 -> s1 [87, 65535] { R16091 += 1, R16047 += 1, R15989 += 1 };
  s3 -> s1 [0, 72] { R16091 += 1, R16047 += 1, R15989 += 1 };
  s3 -> s2 [0, 72] { R16091 += 1, R16047 += 1, R15988 += 1, R15989 += 1 };
  s3 -> s3 [0, 65535] { R16091 += 1, R16046 += 1, R16047 += 1 };
  s3 -> s4 [73, 73] { R16091 += 1, R16047 += 1, R15989 += 1 };
  s3 -> s5 [73, 73] { R16091 += 1, R16047 += 1, R15988 += 1, R15989 += 1 };
  s3 -> s6 [73, 73] { R16091 += 1, R16047 += 1, R15988 += 1, R15989 += 1 };
  s3 -> s7 [73, 73] { R16091 += 1, R16047 += 1, R15989 += 1 };
  s3 -> s1 [74, 80] { R16091 += 1, R16047 += 1, R15989 += 1 };
  s3 -> s2 [74, 65535] { R16091 += 1, R16047 += 1, R15988 += 1, R15989 += 1 };
  s3 -> s8 [81, 81] { R16091 += 1, R16047 += 1, R15989 += 1 };
  s3 -> s1 [87, 65535] { R16091 += 1, R16047 += 1, R15989 += 1 };
  s4 -> s4 [0, 80] { R16091 += 1, R16047 += 1, R15989 += 1 };
  s4 -> s4 [0, 65535] { R16091 += 1, R16047 += 1 };
  s4 -> s11 [81, 81] { R16091 += 1, R16047 += 1, R15989 += 1 };
  s4 -> s4 [87, 65535] { R16091 += 1, R16047 += 1, R15989 += 1 };
  s5 -> s4 [0, 80] { R16091 += 1, R16047 += 1, R15989 += 1 };
  s5 -> s5 [0, 65535] { R16091 += 1, R16047 += 1, R15988 += 1, R15989 += 1 };
  s5 -> s11 [81, 81] { R16091 += 1, R16047 += 1, R15989 += 1 };
  s5 -> s4 [87, 65535] { R16091 += 1, R16047 += 1, R15989 += 1 };
  s8 -> s8 [0, 72] { R16091 += 1, R16047 += 1, R15989 += 1 };
  s8 -> s8 [0, 65535] { R16091 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [73, 73] { R16091 += 1, R16047 += 1 };
  s8 -> s11 [73, 73] { R16091 += 1, R16047 += 1 };
  s8 -> s8 [74, 81] { R16091 += 1, R16047 += 1, R15989 += 1 };
  s8 -> s8 [74, 65535] { R16091 += 1, R16047 += 1 };
  s8 -> s8 [87, 65535] { R16091 += 1, R16047 += 1, R15989 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R16091 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s11 [0, 81] { R16091 += 1, R16047 += 1, R15989 += 1 };
  s11 -> s11 [0, 65535] { R16091 += 1, R16047 += 1 };
  s11 -> s12 [0, 65535] { R16091 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [87, 65535] { R16091 += 1, R16047 += 1, R15989 += 1 };
  s12 -> s12 [0, 65535] { R16091 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [113, 113];
  accepting s1;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
constraint R2 = R16091 && R20 - R16091 = -1 && R21 = R16091 && R22 - R16091 = -1 && R23 = R16091 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R15351 + -1*R15349 - R53 = 0 && R52 + R15350 + R15348 = 0 && R16032 = 0 && R16033 = 0 && R16038 = 0 && R16039 = 0 && R16040 = 0 && R16041 = 0 && R16042 = 0 && R16043 = 0 && R16044 = 0 && R16045 = 0 && R16046 = 0 && R16047 = 0 && R16048 = 0 && R16049 = R16091 && R16050 = 0 && R16051 = R16091 && R16052 = 0 && R16053 = R16091 && R16054 = 0 && R16055 = R16091 && R16056 = 0 && R16057 = R16091 && R16058 = 0 && R16059 = R16091 && R16060 = 0 && R16061 = R16091 && R16062 = 0 && R16063 = R16091 && R16064 = 0 && R16065 = R16091 && R16066 = 0 && R16067 = R16091 && R16068 = 0 && R16069 = R16091 && R16070 = 0 && R16071 = R16091 && R16072 = 0 && R16073 = R16091 && R16074 = 0 && R16075 = R16091 && R16076 = 0 && R16077 = R16091 && R16078 = 0 && R16079 = R16091 && R16080 = 0 && R16081 = R16091 && R16082 = 0 && R16083 = R16091 && R16084 = 0 && R16085 = R16091 && R16086 = 0 && R16087 = R16091 && R16088 = 0 && R16089 = R16091 && R16090 = 0 && -1 < R1 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R15351 + -1*R15349 - R53 < 1 && 0 < R16091 && (R1 != 0 || R17 = 0 || (R15992 = 0 && R15993 = 0)) && (R1 != 0 || R17 = 0 || (R15994 = 0 && R15995 = 0)) && (R1 != 0 || R17 = 0 || (R15996 = 0 && R15997 = 0)) && (R1 != 0 || R17 = 0 || (R15998 = 0 && R15999 = 0)) && (R1 != 0 || R17 = 0 || (R16000 = 0 && R16001 = 0)) && (R1 != 0 || R17 = 0 || (R16002 = 0 && R16003 = 0)) && (R1 != 0 || R17 = 0 || (R16004 = 0 && R16005 = 0)) && (R1 != 0 || R17 = 0 || (R16006 = 0 && R16007 = 0)) && (R1 != 0 || R17 = 0 || (R16008 = 0 && R16009 = 0)) && (R1 != 0 || R17 = 0 || (R16010 = 0 && R16011 = 0)) && (R48 + R15347 + R15344 != 0 || ((R42 + R11524 + R11522 != 0 || R43 + R11525 + R11523 + -1*R15351 + -1*R15349 - R53 = 0 || R53 + R15351 + R15349 < 1) && (R42 + R11524 + R11522 = 0 || R53 + R15351 + R15349 < 1))) && (R48 + R15347 + R15344 != 0 || ((R46 + R15345 + R15342 != 0 || R47 + R15346 + R15343 + -1*R15351 + -1*R15349 - R53 = 0 || R53 + R15351 + R15349 < 1) && (R46 + R15345 + R15342 = 0 || R53 + R15351 + R15349 < 1))) && (R15992 != 0 || R1 = R15993 || R1 < 1) && (R15994 != 0 || R1 = R15995 || R1 < 1) && (R15996 != 0 || R1 = R15997 || R1 < 1) && (R15998 != 0 || R1 = R15999 || R1 < 1) && (R16000 != 0 || R1 = R16001 || R1 < 1) && (R16002 != 0 || R1 = R16003 || R1 < 1) && (R16004 != 0 || R1 = R16005 || R1 < 1) && (R16006 != 0 || R1 = R16007 || R1 < 1) && (R16008 != 0 || R1 = R16009 || R1 < 1) && (R16010 != 0 || R1 = R16011 || R1 < 1) && (R18 = 0 || (R16030 = 0 && R16031 = 0)) && (R18 = 0 || (R16034 = 0 && R16035 = 0)) && (R18 = 0 || (R16036 = 0 && R16037 = 0)) && (R19 = 0 || (R16012 = 0 && R16013 = 0)) && (R19 = 0 || (R16014 = 0 && R16015 = 0)) && (R19 = 0 || (R16016 = 0 && R16017 = 0)) && (R19 = 0 || (R16018 = 0 && R16019 = 0)) && (R19 = 0 || (R16020 = 0 && R16021 = 0)) && (R19 = 0 || (R16022 = 0 && R16023 = 0)) && (R19 = 0 || (R16024 = 0 && R16025 = 0)) && (R19 = 0 || (R16026 = 0 && R16027 = 0)) && (R19 = 0 || (R16028 = 0 && R16029 = 0)) && (R48 + R15347 + R15344 = 0 || (R42 + R11524 + R11522 = 0 && R43 + R11525 + R11523 + -1*R15351 + -1*R15349 - R53 = 0)) && (R48 + R15347 + R15344 = 0 || (R46 + R15345 + R15342 = 0 && R47 + R15346 + R15343 + -1*R15351 + -1*R15349 - R53 = 0)) && (R58 + R15779 + R15776 = 0 || (R56 + R15777 + R15774 = 0 && R57 + R15778 + R15775 = 0)) && (R58 + R15779 + R15776 = 0 || (R62 + R15990 + R15988 = 0 && R63 + R15991 + R15989 = 0)) && (R15992 = 0 || R1 < 1) && (R15994 = 0 || R1 < 1) && (R15996 = 0 || R1 < 1) && (R15998 = 0 || R1 < 1) && (R16000 = 0 || R1 < 1) && (R16002 = 0 || R1 < 1) && (R16004 = 0 || R1 < 1) && (R16006 = 0 || R1 < 1) && (R16008 = 0 || R1 < 1) && (R16010 = 0 || R1 < 1);
// End of Parikh automata intersection problem
