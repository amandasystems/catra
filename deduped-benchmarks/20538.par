// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R12, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R3890, R3891, R3892, R3893, R3894, R3895, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R6436, R6437, R6438, R6439, R6440, R6441, R6442, R6443, R6444, R6445, R6550, R6551, R6552, R6553, R6554, R6555, R6556, R6557, R6558, R6559, R6560, R6561, R6562, R6563, R6564, R6565, R6566, R6567, R6568, R6569, R6570, R6571, R6572, R6573, R6574, R6575, R6576, R6577, R6578, R6579, R6580, R6581, R6582, R6583, R6584, R6585, R6586, R6587, R6588, R6589, R6590, R6591, R6592, R6593, R6594, R6595, R6596, R6597, R6598, R6599, R66, R6600, R6601, R6602, R6603, R6604, R6605, R6606, R6607, R6608, R6609, R6610, R6611, R6612, R6613, R6614, R6615, R6616, R6617, R6618, R6619, R6620, R6621, R6622, R6623, R6624, R6625, R6626, R6627, R6628, R6629, R6630, R6631, R6632, R6633, R6634, R6635, R6636, R6637, R6638, R6639, R6640, R6641, R6642, R6643, R6644, R6645, R6646, R6647, R6648, R6649, R6650, R6651, R6652, R6653, R67, R68, R69, R70, R71, R72, R73, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 72];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [73, 73];
  s0 -> s1 [74, 65535];
  s1 -> s1 [0, 72];
  s1 -> s2 [73, 73];
  s1 -> s1 [74, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s1 [0, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R25 += 1 };
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R6575 += 1, R19 += 1 };
  s0 -> s0 [0, 65535] { R6574 += 1, R6575 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R6575 += 1, R19 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 72] { R6577 += 1 };
  s0 -> s0 [0, 65535] { R6576 += 1, R6577 += 1 };
  s0 -> s2 [73, 73] { R6577 += 1 };
  s0 -> s3 [73, 73] { R6577 += 1 };
  s0 -> s1 [82, 65535] { R6577 += 1 };
  s1 -> s1 [0, 72] { R6577 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R6577 += 1 };
  s1 -> s3 [73, 73] { R6577 += 1 };
  s1 -> s1 [82, 65535] { R6577 += 1 };
  s2 -> s2 [0, 73] { R6577 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [82, 65535] { R6577 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 72] { R6579 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R6578 += 1, R6579 += 1 };
  s0 -> s2 [73, 73] { R6579 += 1, R38 += 1 };
  s0 -> s3 [73, 73] { R6579 += 1, R38 += 1 };
  s0 -> s1 [74, 65535] { R6579 += 1, R38 += 1 };
  s1 -> s1 [0, 72] { R6579 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R6579 += 1, R38 += 1 };
  s1 -> s3 [73, 73] { R6579 += 1, R38 += 1 };
  s1 -> s1 [74, 65535] { R6579 += 1, R38 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R6579 += 1, R38 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 72] { R6581 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R6580 += 1, R6581 += 1 };
  s0 -> s2 [73, 73] { R6581 += 1, R40 += 1 };
  s0 -> s3 [73, 73] { R6581 += 1, R40 += 1 };
  s0 -> s1 [74, 65535] { R6581 += 1, R40 += 1 };
  s1 -> s1 [0, 72] { R6581 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R6581 += 1, R40 += 1 };
  s1 -> s3 [73, 73] { R6581 += 1, R40 += 1 };
  s1 -> s1 [74, 65535] { R6581 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R6581 += 1, R40 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 72] { R6583 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R6582 += 1, R6583 += 1 };
  s0 -> s2 [73, 73] { R6583 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [73, 73] { R6583 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [74, 65535] { R6583 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 72] { R6583 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R6583 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [73, 73] { R6583 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [74, 65535] { R6583 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535] { R6583 += 1, R42 += 1, R43 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 72] { R6585 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R6584 += 1, R6585 += 1 };
  s0 -> s2 [73, 73] { R6585 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [73, 73] { R6585 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [74, 65535] { R6585 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 72] { R6585 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R6585 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [73, 73] { R6585 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [74, 65535] { R6585 += 1, R46 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R6585 += 1, R46 += 1, R47 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 72] { R6587 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R6586 += 1, R6587 += 1 };
  s0 -> s2 [73, 73] { R6587 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [73, 73] { R6587 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [74, 65535] { R6587 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 72] { R6587 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R6587 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [73, 73] { R6587 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [74, 65535] { R6587 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535] { R6587 += 1, R52 += 1, R53 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 72] { R6589 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R6588 += 1, R6589 += 1 };
  s0 -> s2 [73, 73] { R6589 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [73, 73] { R6589 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [74, 65535] { R6589 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 72] { R6589 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R6589 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [73, 73] { R6589 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [74, 65535] { R6589 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R6589 += 1, R56 += 1, R57 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 72] { R6591 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R6590 += 1, R6591 += 1 };
  s0 -> s2 [73, 73] { R6591 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [73, 73] { R6591 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [74, 65535] { R6591 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 72] { R6591 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R6591 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [73, 73] { R6591 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [74, 65535] { R6591 += 1, R62 += 1, R63 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R6591 += 1, R62 += 1, R63 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 72] { R6611 += 1 };
  s0 -> s0 [0, 65535] { R6610 += 1, R6611 += 1 };
  s0 -> s2 [73, 73] { R6611 += 1 };
  s0 -> s1 [74, 65535] { R6611 += 1 };
  s1 -> s1 [0, 72] { R6611 += 1 };
  s1 -> s2 [73, 73] { R6611 += 1 };
  s1 -> s1 [74, 65535] { R6611 += 1 };
  s2 -> s2 [0, 65535] { R6611 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R6613 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R6612 += 1, R6613 += 1 };
  s1 -> s1 [0, 65535] { R6613 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 72] { R6615 += 1 };
  s0 -> s0 [0, 65535] { R6614 += 1, R6615 += 1 };
  s0 -> s2 [0, 65535] { R6615 += 1, R8 += 1 };
  s0 -> s3 [73, 73] { R6615 += 1 };
  s0 -> s1 [74, 65535] { R6615 += 1 };
  s1 -> s1 [0, 72] { R6615 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [73, 73] { R6615 += 1 };
  s1 -> s1 [74, 65535] { R6615 += 1 };
  s2 -> s1 [0, 72] { R6615 += 1 };
  s2 -> s2 [0, 65535] { R6615 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [73, 73] { R6615 += 1 };
  s2 -> s1 [74, 65535] { R6615 += 1 };
  s3 -> s3 [0, 65535] { R6615 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 72] { R6617 += 1, R6555 += 1 };
  s0 -> s2 [0, 65535] { R6617 += 1, R6554 += 1, R6555 += 1 };
  s0 -> s0 [0, 65535] { R6616 += 1, R6617 += 1 };
  s0 -> s1 [74, 65535] { R6617 += 1, R6555 += 1 };
  s1 -> s1 [0, 72] { R6617 += 1, R6555 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R6617 += 1 };
  s1 -> s1 [74, 65535] { R6617 += 1, R6555 += 1 };
  s2 -> s1 [0, 72] { R6617 += 1, R6555 += 1 };
  s2 -> s2 [0, 65535] { R6617 += 1, R6554 += 1, R6555 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [74, 65535] { R6617 += 1, R6555 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s0 [0, 65535] { R6618 += 1, R6619 += 1 };
  s0 -> s1 [0, 65535] { R6619 += 1, R6557 += 1, R17 += 1 };
  s0 -> s2 [0, 65535] { R6619 += 1, R6556 += 1, R6557 += 1 };
  s1 -> s4 [0, 65535] { R6619 += 1 };
  s1 -> s1 [0, 65535] { R6619 += 1, R6557 += 1, R17 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R6619 += 1, R6557 += 1, R17 += 1 };
  s2 -> s2 [0, 65535] { R6619 += 1, R6556 += 1, R6557 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R6619 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 73] { R6621 += 1, R6559 += 1 };
  s0 -> s0 [0, 65535] { R6620 += 1, R6621 += 1 };
  s0 -> s2 [0, 65535] { R6621 += 1, R6558 += 1, R6559 += 1 };
  s0 -> s1 [81, 65535] { R6621 += 1, R6559 += 1 };
  s1 -> s1 [0, 73] { R6621 += 1, R6559 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R6621 += 1 };
  s1 -> s1 [81, 65535] { R6621 += 1, R6559 += 1 };
  s2 -> s1 [0, 73] { R6621 += 1, R6559 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R6621 += 1, R6558 += 1, R6559 += 1 };
  s2 -> s1 [81, 65535] { R6621 += 1, R6559 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R6623 += 1, R6561 += 1, R67 += 1 };
  s0 -> s0 [0, 65535] { R6622 += 1, R6623 += 1 };
  s0 -> s2 [0, 65535] { R6623 += 1, R6560 += 1, R6561 += 1 };
  s1 -> s4 [0, 65535] { R6623 += 1 };
  s1 -> s1 [0, 65535] { R6623 += 1, R6561 += 1, R67 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R6623 += 1, R6561 += 1, R67 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R6623 += 1, R6560 += 1, R6561 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R6623 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 80] { R6625 += 1, R6563 += 1 };
  s0 -> s2 [0, 65535] { R6625 += 1, R6563 += 1, R69 += 1 };
  s0 -> s0 [0, 65535] { R6624 += 1, R6625 += 1 };
  s0 -> s3 [0, 65535] { R6625 += 1, R6562 += 1, R6563 += 1 };
  s0 -> s1 [82, 65535] { R6625 += 1, R6563 += 1 };
  s1 -> s1 [0, 80] { R6625 += 1, R6563 += 1 };
  s1 -> s1 [0, 65535] { R6625 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [82, 65535] { R6625 += 1, R6563 += 1 };
  s2 -> s1 [0, 80] { R6625 += 1, R6563 += 1 };
  s2 -> s5 [0, 65535] { R6625 += 1 };
  s2 -> s2 [0, 65535] { R6625 += 1, R6563 += 1, R69 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [82, 65535] { R6625 += 1, R6563 += 1 };
  s3 -> s1 [0, 80] { R6625 += 1, R6563 += 1 };
  s3 -> s2 [0, 65535] { R6625 += 1, R6563 += 1, R69 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R6625 += 1, R6562 += 1, R6563 += 1 };
  s3 -> s1 [82, 65535] { R6625 += 1, R6563 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R6625 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 80] { R6627 += 1, R6565 += 1, R73 += 1 };
  s0 -> s2 [0, 65535] { R6627 += 1, R6565 += 1, R72 += 1, R73 += 1 };
  s0 -> s3 [0, 65535] { R6627 += 1, R6564 += 1, R6565 += 1 };
  s0 -> s0 [0, 65535] { R6626 += 1, R6627 += 1 };
  s0 -> s1 [82, 65535] { R6627 += 1, R6565 += 1, R73 += 1 };
  s1 -> s1 [0, 80] { R6627 += 1, R6565 += 1, R73 += 1 };
  s1 -> s1 [0, 65535] { R6627 += 1, R6565 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R6627 += 1 };
  s1 -> s1 [82, 65535] { R6627 += 1, R6565 += 1, R73 += 1 };
  s2 -> s1 [0, 80] { R6627 += 1, R6565 += 1, R73 += 1 };
  s2 -> s2 [0, 65535] { R6627 += 1, R6565 += 1, R72 += 1, R73 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R6627 += 1 };
  s2 -> s1 [82, 65535] { R6627 += 1, R6565 += 1, R73 += 1 };
  s3 -> s1 [0, 80] { R6627 += 1, R6565 += 1, R73 += 1 };
  s3 -> s2 [0, 65535] { R6627 += 1, R6565 += 1, R72 += 1, R73 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R6627 += 1, R6564 += 1, R6565 += 1 };
  s3 -> s1 [82, 65535] { R6627 += 1, R6565 += 1, R73 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R6627 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R6629 += 1, R6567 += 1 };
  s0 -> s2 [0, 65535] { R6629 += 1, R6566 += 1, R6567 += 1 };
  s0 -> s0 [0, 65535] { R6628 += 1, R6629 += 1 };
  s0 -> s3 [0, 65535] { R6629 += 1, R6567 += 1, R3894 += 1, R3895 += 1 };
  s1 -> s1 [0, 65535] { R6629 += 1, R6567 += 1 };
  s1 -> s4 [0, 65535] { R6629 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R6629 += 1, R6567 += 1 };
  s2 -> s2 [0, 65535] { R6629 += 1, R6566 += 1, R6567 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R6629 += 1, R6567 += 1, R3894 += 1, R3895 += 1 };
  s3 -> s1 [0, 65535] { R6629 += 1, R6567 += 1 };
  s3 -> s4 [0, 65535] { R6629 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R6629 += 1, R6567 += 1, R3894 += 1, R3895 += 1 };
  s4 -> s4 [0, 65535] { R6629 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 81] { R6631 += 1, R6569 += 1, R6439 += 1 };
  s0 -> s2 [0, 65535] { R6631 += 1, R6568 += 1, R6569 += 1 };
  s0 -> s0 [0, 65535] { R6630 += 1, R6631 += 1 };
  s0 -> s3 [0, 65535] { R6631 += 1, R6569 += 1, R6438 += 1, R6439 += 1 };
  s0 -> s4 [86, 86] { R6631 += 1, R6569 += 1, R6439 += 1 };
  s0 -> s1 [87, 65535] { R6631 += 1, R6569 += 1, R6439 += 1 };
  s1 -> s1 [0, 81] { R6631 += 1, R6569 += 1, R6439 += 1 };
  s1 -> s4 [86, 86] { R6631 += 1, R6569 += 1, R6439 += 1 };
  s1 -> s1 [87, 65535] { R6631 += 1, R6569 += 1, R6439 += 1 };
  s2 -> s1 [0, 81] { R6631 += 1, R6569 += 1, R6439 += 1 };
  s2 -> s2 [0, 65535] { R6631 += 1, R6568 += 1, R6569 += 1 };
  s2 -> s3 [0, 65535] { R6631 += 1, R6569 += 1, R6438 += 1, R6439 += 1 };
  s2 -> s4 [86, 86] { R6631 += 1, R6569 += 1, R6439 += 1 };
  s2 -> s1 [87, 65535] { R6631 += 1, R6569 += 1, R6439 += 1 };
  s3 -> s1 [0, 81] { R6631 += 1, R6569 += 1, R6439 += 1 };
  s3 -> s3 [0, 65535] { R6631 += 1, R6569 += 1, R6438 += 1, R6439 += 1 };
  s3 -> s4 [86, 86] { R6631 += 1, R6569 += 1, R6439 += 1 };
  s3 -> s1 [87, 65535] { R6631 += 1, R6569 += 1, R6439 += 1 };
  s4 -> s4 [0, 81] { R6631 += 1, R6569 += 1, R6439 += 1 };
  s4 -> s5 [0, 65535] { R6631 += 1 };
  s4 -> s4 [0, 65535] { R6631 += 1, R6569 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [86, 65535] { R6631 += 1, R6569 += 1, R6439 += 1 };
  s5 -> s5 [0, 65535] { R6631 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s4, s5, s6;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R6633 += 1, R6571 += 1, R6444 += 1, R6445 += 1 };
  s0 -> s0 [0, 65535] { R6632 += 1, R6633 += 1 };
  s0 -> s2 [0, 65535] { R6633 += 1, R6570 += 1, R6571 += 1 };
  s0 -> s3 [0, 65535] { R6633 += 1, R6571 += 1, R6443 += 1, R6444 += 1 };
  s1 -> s1 [0, 65535] { R6633 += 1, R6571 += 1, R6444 += 1, R6445 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R6633 += 1 };
  s1 -> s6 [0, 65535] { R6633 += 1, R6571 += 1 };
  s2 -> s1 [0, 65535] { R6633 += 1, R6571 += 1, R6444 += 1, R6445 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R6633 += 1, R6570 += 1, R6571 += 1 };
  s2 -> s3 [0, 65535] { R6633 += 1, R6571 += 1, R6443 += 1, R6444 += 1 };
  s3 -> s1 [0, 65535] { R6633 += 1, R6571 += 1, R6444 += 1, R6445 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R6633 += 1, R6571 += 1, R6443 += 1, R6444 += 1 };
  s3 -> s5 [0, 65535] { R6633 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R6633 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R6633 += 1 };
  s6 -> s6 [0, 65535] { R6633 += 1, R6571 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 80] { R6635 += 1, R6573 += 1, R6553 += 1 };
  s0 -> s1 [0, 65535] { R6635 += 1, R6573 += 1 };
  s0 -> s2 [0, 65535] { R6635 += 1, R6572 += 1, R6573 += 1 };
  s0 -> s0 [0, 65535] { R6634 += 1, R6635 += 1 };
  s0 -> s3 [81, 81] { R6635 += 1, R6573 += 1, R6553 += 1 };
  s0 -> s4 [81, 81] { R6635 += 1, R6573 += 1, R6553 += 1 };
  s0 -> s1 [87, 65535] { R6635 += 1, R6573 += 1, R6553 += 1 };
  s1 -> s1 [0, 80] { R6635 += 1, R6573 += 1, R6553 += 1 };
  s1 -> s1 [0, 65535] { R6635 += 1, R6573 += 1 };
  s1 -> s5 [0, 65535] { R6635 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [81, 81] { R6635 += 1, R6573 += 1, R6553 += 1 };
  s1 -> s4 [81, 81] { R6635 += 1, R6573 += 1, R6553 += 1 };
  s1 -> s1 [87, 65535] { R6635 += 1, R6573 += 1, R6553 += 1 };
  s2 -> s1 [0, 80] { R6635 += 1, R6573 += 1, R6553 += 1 };
  s2 -> s1 [0, 65535] { R6635 += 1, R6573 += 1 };
  s2 -> s2 [0, 65535] { R6635 += 1, R6572 += 1, R6573 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [81, 81] { R6635 += 1, R6573 += 1, R6553 += 1 };
  s2 -> s4 [81, 81] { R6635 += 1, R6573 += 1, R6553 += 1 };
  s2 -> s1 [87, 65535] { R6635 += 1, R6573 += 1, R6553 += 1 };
  s3 -> s3 [0, 81] { R6635 += 1, R6573 += 1, R6553 += 1 };
  s3 -> s3 [0, 65535] { R6635 += 1, R6573 += 1 };
  s3 -> s5 [0, 65535] { R6635 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [87, 65535] { R6635 += 1, R6573 += 1, R6553 += 1 };
  s4 -> s4 [0, 65535] { R6635 += 1, R6573 += 1 };
  s4 -> s5 [0, 65535] { R6635 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R6635 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R6637 += 1, R6593 += 1, R18 += 1 };
  s0 -> s2 [0, 65535] { R6637 += 1, R6592 += 1, R6593 += 1 };
  s0 -> s0 [0, 65535] { R6636 += 1, R6637 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R6637 += 1, R6593 += 1, R18 += 1 };
  s1 -> s4 [0, 65535] { R6637 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R6637 += 1, R6593 += 1, R18 += 1 };
  s2 -> s2 [0, 65535] { R6637 += 1, R6592 += 1, R6593 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R6637 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 72] { R6639 += 1, R6595 += 1 };
  s0 -> s0 [0, 65535] { R6638 += 1, R6639 += 1 };
  s0 -> s2 [0, 65535] { R6639 += 1, R6594 += 1, R6595 += 1 };
  s0 -> s3 [73, 73] { R6639 += 1, R6595 += 1 };
  s0 -> s4 [73, 73] { R6639 += 1, R6595 += 1 };
  s0 -> s5 [81, 81] { R6639 += 1, R6595 += 1 };
  s0 -> s1 [82, 65535] { R6639 += 1, R6595 += 1 };
  s1 -> s1 [0, 72] { R6639 += 1, R6595 += 1 };
  s1 -> s3 [73, 73] { R6639 += 1, R6595 += 1 };
  s1 -> s4 [73, 73] { R6639 += 1, R6595 += 1 };
  s1 -> s5 [81, 81] { R6639 += 1, R6595 += 1 };
  s1 -> s1 [82, 65535] { R6639 += 1, R6595 += 1 };
  s2 -> s1 [0, 72] { R6639 += 1, R6595 += 1 };
  s2 -> s2 [0, 65535] { R6639 += 1, R6594 += 1, R6595 += 1 };
  s2 -> s3 [73, 73] { R6639 += 1, R6595 += 1 };
  s2 -> s4 [73, 73] { R6639 += 1, R6595 += 1 };
  s2 -> s5 [81, 81] { R6639 += 1, R6595 += 1 };
  s2 -> s1 [82, 65535] { R6639 += 1, R6595 += 1 };
  s4 -> s4 [0, 73] { R6639 += 1, R6595 += 1 };
  s4 -> s8 [81, 81] { R6639 += 1, R6595 += 1 };
  s4 -> s4 [82, 65535] { R6639 += 1, R6595 += 1 };
  s5 -> s5 [0, 72] { R6639 += 1, R6595 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R6639 += 1 };
  s5 -> s7 [73, 73] { R6639 += 1, R6595 += 1 };
  s5 -> s8 [73, 73] { R6639 += 1, R6595 += 1 };
  s5 -> s5 [81, 65535] { R6639 += 1, R6595 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R6639 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 73] { R6639 += 1, R6595 += 1 };
  s8 -> s8 [0, 65535] { R6639 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [81, 65535] { R6639 += 1, R6595 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 72] { R6641 += 1, R6597 += 1, R66 += 1 };
  s0 -> s2 [0, 65535] { R6641 += 1, R6596 += 1, R6597 += 1 };
  s0 -> s0 [0, 65535] { R6640 += 1, R6641 += 1 };
  s0 -> s3 [73, 73] { R6641 += 1, R6597 += 1, R66 += 1 };
  s0 -> s4 [73, 73] { R6641 += 1, R6597 += 1, R66 += 1 };
  s0 -> s1 [74, 65535] { R6641 += 1, R6597 += 1, R66 += 1 };
  s1 -> s1 [0, 72] { R6641 += 1, R6597 += 1, R66 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R6641 += 1 };
  s1 -> s3 [73, 73] { R6641 += 1, R6597 += 1, R66 += 1 };
  s1 -> s4 [73, 73] { R6641 += 1, R6597 += 1, R66 += 1 };
  s1 -> s1 [74, 65535] { R6641 += 1, R6597 += 1, R66 += 1 };
  s2 -> s1 [0, 72] { R6641 += 1, R6597 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R6641 += 1, R6596 += 1, R6597 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R6641 += 1, R6597 += 1, R66 += 1 };
  s2 -> s4 [73, 73] { R6641 += 1, R6597 += 1, R66 += 1 };
  s2 -> s1 [74, 65535] { R6641 += 1, R6597 += 1, R66 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R6641 += 1 };
  s3 -> s3 [0, 65535] { R6641 += 1, R6597 += 1, R66 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R6641 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6641 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 72] { R6643 += 1, R6599 += 1, R68 += 1 };
  s0 -> s0 [0, 65535] { R6642 += 1, R6643 += 1 };
  s0 -> s2 [0, 65535] { R6643 += 1, R6598 += 1, R6599 += 1 };
  s0 -> s3 [73, 73] { R6643 += 1, R6599 += 1, R68 += 1 };
  s0 -> s4 [73, 73] { R6643 += 1, R6599 += 1, R68 += 1 };
  s0 -> s1 [74, 65535] { R6643 += 1, R6599 += 1, R68 += 1 };
  s1 -> s1 [0, 72] { R6643 += 1, R6599 += 1, R68 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R6643 += 1 };
  s1 -> s3 [73, 73] { R6643 += 1, R6599 += 1, R68 += 1 };
  s1 -> s4 [73, 73] { R6643 += 1, R6599 += 1, R68 += 1 };
  s1 -> s1 [74, 65535] { R6643 += 1, R6599 += 1, R68 += 1 };
  s2 -> s1 [0, 72] { R6643 += 1, R6599 += 1, R68 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R6643 += 1, R6598 += 1, R6599 += 1 };
  s2 -> s3 [73, 73] { R6643 += 1, R6599 += 1, R68 += 1 };
  s2 -> s4 [73, 73] { R6643 += 1, R6599 += 1, R68 += 1 };
  s2 -> s1 [74, 65535] { R6643 += 1, R6599 += 1, R68 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R6643 += 1 };
  s3 -> s3 [0, 65535] { R6643 += 1, R6599 += 1, R68 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R6643 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6643 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 72] { R6645 += 1, R6601 += 1, R70 += 1, R71 += 1 };
  s0 -> s2 [0, 65535] { R6645 += 1, R6600 += 1, R6601 += 1 };
  s0 -> s0 [0, 65535] { R6644 += 1, R6645 += 1 };
  s0 -> s3 [73, 73] { R6645 += 1, R6601 += 1, R70 += 1, R71 += 1 };
  s0 -> s4 [73, 73] { R6645 += 1, R6601 += 1, R70 += 1, R71 += 1 };
  s0 -> s1 [74, 65535] { R6645 += 1, R6601 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 72] { R6645 += 1, R6601 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 65535] { R6645 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R6645 += 1, R6601 += 1, R70 += 1, R71 += 1 };
  s1 -> s4 [73, 73] { R6645 += 1, R6601 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [74, 65535] { R6645 += 1, R6601 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [0, 72] { R6645 += 1, R6601 += 1, R70 += 1, R71 += 1 };
  s2 -> s2 [0, 65535] { R6645 += 1, R6600 += 1, R6601 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R6645 += 1, R6601 += 1, R70 += 1, R71 += 1 };
  s2 -> s4 [73, 73] { R6645 += 1, R6601 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [74, 65535] { R6645 += 1, R6601 += 1, R70 += 1, R71 += 1 };
  s3 -> s3 [0, 65535] { R6645 += 1, R6601 += 1, R70 += 1, R71 += 1 };
  s3 -> s6 [0, 65535] { R6645 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R6645 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6645 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 72] { R6647 += 1, R6603 += 1, R3890 += 1, R3891 += 1 };
  s0 -> s2 [0, 72] { R6647 += 1, R6603 += 1, R3891 += 1, R3892 += 1 };
  s0 -> s3 [0, 65535] { R6647 += 1, R6602 += 1, R6603 += 1 };
  s0 -> s0 [0, 65535] { R6646 += 1, R6647 += 1 };
  s0 -> s4 [73, 73] { R6647 += 1, R6603 += 1, R3890 += 1, R3891 += 1 };
  s0 -> s5 [73, 73] { R6647 += 1, R6603 += 1, R3891 += 1, R3892 += 1 };
  s0 -> s6 [73, 73] { R6647 += 1, R6603 += 1, R3890 += 1, R3891 += 1 };
  s0 -> s7 [73, 73] { R6647 += 1, R6603 += 1, R3891 += 1, R3892 += 1 };
  s0 -> s1 [74, 65535] { R6647 += 1, R6603 += 1, R3890 += 1, R3891 += 1 };
  s0 -> s2 [74, 65535] { R6647 += 1, R6603 += 1, R3891 += 1, R3892 += 1 };
  s1 -> s1 [0, 72] { R6647 += 1, R6603 += 1, R3890 += 1, R3891 += 1 };
  s1 -> s2 [0, 72] { R6647 += 1, R6603 += 1, R3891 += 1, R3892 += 1 };
  s1 -> s4 [73, 73] { R6647 += 1, R6603 += 1, R3890 += 1, R3891 += 1 };
  s1 -> s5 [73, 73] { R6647 += 1, R6603 += 1, R3891 += 1, R3892 += 1 };
  s1 -> s6 [73, 73] { R6647 += 1, R6603 += 1, R3890 += 1, R3891 += 1 };
  s1 -> s7 [73, 73] { R6647 += 1, R6603 += 1, R3891 += 1, R3892 += 1 };
  s1 -> s1 [74, 65535] { R6647 += 1, R6603 += 1, R3890 += 1, R3891 += 1 };
  s1 -> s2 [74, 65535] { R6647 += 1, R6603 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s2 [0, 72] { R6647 += 1, R6603 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R6647 += 1 };
  s2 -> s5 [73, 73] { R6647 += 1, R6603 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s7 [73, 73] { R6647 += 1, R6603 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s2 [74, 65535] { R6647 += 1, R6603 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s1 [0, 72] { R6647 += 1, R6603 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s2 [0, 72] { R6647 += 1, R6603 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s3 [0, 65535] { R6647 += 1, R6602 += 1, R6603 += 1 };
  s3 -> s4 [73, 73] { R6647 += 1, R6603 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s5 [73, 73] { R6647 += 1, R6603 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s6 [73, 73] { R6647 += 1, R6603 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s7 [73, 73] { R6647 += 1, R6603 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s1 [74, 65535] { R6647 += 1, R6603 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s2 [74, 65535] { R6647 += 1, R6603 += 1, R3891 += 1, R3892 += 1 };
  s5 -> s5 [0, 65535] { R6647 += 1, R6603 += 1, R3891 += 1, R3892 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s9 [0, 65535] { R6647 += 1 };
  s6 -> s5 [0, 65535] { R6647 += 1, R6603 += 1, R3891 += 1, R3892 += 1 };
  s6 -> s6 [0, 65535] { R6647 += 1, R6603 += 1, R3890 += 1, R3891 += 1 };
  s7 -> s7 [0, 65535] { R6647 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R6647 += 1 };
  accepting s8, s5, s2, s9, s7;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 72] { R6649 += 1, R6605 += 1, R6436 += 1, R6437 += 1 };
  s0 -> s0 [0, 65535] { R6648 += 1, R6649 += 1 };
  s0 -> s2 [0, 65535] { R6649 += 1, R6604 += 1, R6605 += 1 };
  s0 -> s3 [73, 73] { R6649 += 1, R6605 += 1, R6436 += 1, R6437 += 1 };
  s0 -> s4 [73, 73] { R6649 += 1, R6605 += 1, R6436 += 1, R6437 += 1 };
  s0 -> s1 [74, 65535] { R6649 += 1, R6605 += 1, R6436 += 1, R6437 += 1 };
  s1 -> s1 [0, 72] { R6649 += 1, R6605 += 1, R6436 += 1, R6437 += 1 };
  s1 -> s1 [0, 65535] { R6649 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [73, 73] { R6649 += 1, R6605 += 1, R6436 += 1, R6437 += 1 };
  s1 -> s4 [73, 73] { R6649 += 1, R6605 += 1, R6436 += 1, R6437 += 1 };
  s1 -> s1 [74, 65535] { R6649 += 1, R6605 += 1, R6436 += 1, R6437 += 1 };
  s2 -> s1 [0, 72] { R6649 += 1, R6605 += 1, R6436 += 1, R6437 += 1 };
  s2 -> s2 [0, 65535] { R6649 += 1, R6604 += 1, R6605 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [73, 73] { R6649 += 1, R6605 += 1, R6436 += 1, R6437 += 1 };
  s2 -> s4 [73, 73] { R6649 += 1, R6605 += 1, R6436 += 1, R6437 += 1 };
  s2 -> s1 [74, 65535] { R6649 += 1, R6605 += 1, R6436 += 1, R6437 += 1 };
  s3 -> s3 [0, 65535] { R6649 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R6649 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R6649 += 1, R6605 += 1, R6436 += 1, R6437 += 1 };
  s5 -> s5 [0, 65535] { R6649 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 72] { R6651 += 1, R6607 += 1, R6440 += 1, R6441 += 1 };
  s0 -> s0 [0, 65535] { R6650 += 1, R6651 += 1 };
  s0 -> s2 [0, 65535] { R6651 += 1, R6606 += 1, R6607 += 1 };
  s0 -> s3 [73, 73] { R6651 += 1, R6607 += 1, R6440 += 1, R6441 += 1 };
  s0 -> s4 [73, 73] { R6651 += 1, R6607 += 1, R6440 += 1, R6441 += 1 };
  s0 -> s1 [74, 65535] { R6651 += 1, R6607 += 1, R6440 += 1, R6441 += 1 };
  s1 -> s1 [0, 72] { R6651 += 1, R6607 += 1, R6440 += 1, R6441 += 1 };
  s1 -> s1 [0, 65535] { R6651 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [73, 73] { R6651 += 1, R6607 += 1, R6440 += 1, R6441 += 1 };
  s1 -> s4 [73, 73] { R6651 += 1, R6607 += 1, R6440 += 1, R6441 += 1 };
  s1 -> s1 [74, 65535] { R6651 += 1, R6607 += 1, R6440 += 1, R6441 += 1 };
  s2 -> s1 [0, 72] { R6651 += 1, R6607 += 1, R6440 += 1, R6441 += 1 };
  s2 -> s2 [0, 65535] { R6651 += 1, R6606 += 1, R6607 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [73, 73] { R6651 += 1, R6607 += 1, R6440 += 1, R6441 += 1 };
  s2 -> s4 [73, 73] { R6651 += 1, R6607 += 1, R6440 += 1, R6441 += 1 };
  s2 -> s1 [74, 65535] { R6651 += 1, R6607 += 1, R6440 += 1, R6441 += 1 };
  s3 -> s3 [0, 65535] { R6651 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R6651 += 1 };
  s4 -> s4 [0, 65535] { R6651 += 1, R6607 += 1, R6440 += 1, R6441 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R6651 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 72] { R6653 += 1, R6609 += 1, R6551 += 1 };
  s0 -> s2 [0, 72] { R6653 += 1, R6609 += 1, R6550 += 1, R6551 += 1 };
  s0 -> s3 [0, 65535] { R6653 += 1, R6608 += 1, R6609 += 1 };
  s0 -> s0 [0, 65535] { R6652 += 1, R6653 += 1 };
  s0 -> s4 [73, 73] { R6653 += 1, R6609 += 1, R6550 += 1, R6551 += 1 };
  s0 -> s5 [73, 73] { R6653 += 1, R6609 += 1, R6551 += 1 };
  s0 -> s6 [73, 73] { R6653 += 1, R6609 += 1, R6551 += 1 };
  s0 -> s7 [73, 73] { R6653 += 1, R6609 += 1, R6550 += 1, R6551 += 1 };
  s0 -> s1 [74, 80] { R6653 += 1, R6609 += 1, R6551 += 1 };
  s0 -> s2 [74, 65535] { R6653 += 1, R6609 += 1, R6550 += 1, R6551 += 1 };
  s0 -> s1 [87, 65535] { R6653 += 1, R6609 += 1, R6551 += 1 };
  s1 -> s1 [0, 72] { R6653 += 1, R6609 += 1, R6551 += 1 };
  s1 -> s1 [0, 65535] { R6653 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s5 [73, 73] { R6653 += 1, R6609 += 1 };
  s1 -> s6 [73, 73] { R6653 += 1, R6609 += 1 };
  s1 -> s1 [74, 80] { R6653 += 1, R6609 += 1, R6551 += 1 };
  s1 -> s1 [74, 65535] { R6653 += 1, R6609 += 1 };
  s1 -> s1 [87, 65535] { R6653 += 1, R6609 += 1, R6551 += 1 };
  s2 -> s1 [0, 72] { R6653 += 1, R6609 += 1, R6551 += 1 };
  s2 -> s2 [0, 72] { R6653 += 1, R6609 += 1, R6550 += 1, R6551 += 1 };
  s2 -> s4 [73, 73] { R6653 += 1, R6609 += 1, R6550 += 1, R6551 += 1 };
  s2 -> s5 [73, 73] { R6653 += 1, R6609 += 1, R6551 += 1 };
  s2 -> s6 [73, 73] { R6653 += 1, R6609 += 1, R6551 += 1 };
  s2 -> s7 [73, 73] { R6653 += 1, R6609 += 1, R6550 += 1, R6551 += 1 };
  s2 -> s1 [74, 80] { R6653 += 1, R6609 += 1, R6551 += 1 };
  s2 -> s2 [74, 65535] { R6653 += 1, R6609 += 1, R6550 += 1, R6551 += 1 };
  s2 -> s1 [87, 65535] { R6653 += 1, R6609 += 1, R6551 += 1 };
  s3 -> s1 [0, 72] { R6653 += 1, R6609 += 1, R6551 += 1 };
  s3 -> s2 [0, 72] { R6653 += 1, R6609 += 1, R6550 += 1, R6551 += 1 };
  s3 -> s3 [0, 65535] { R6653 += 1, R6608 += 1, R6609 += 1 };
  s3 -> s4 [73, 73] { R6653 += 1, R6609 += 1, R6550 += 1, R6551 += 1 };
  s3 -> s5 [73, 73] { R6653 += 1, R6609 += 1, R6551 += 1 };
  s3 -> s6 [73, 73] { R6653 += 1, R6609 += 1, R6551 += 1 };
  s3 -> s7 [73, 73] { R6653 += 1, R6609 += 1, R6550 += 1, R6551 += 1 };
  s3 -> s1 [74, 80] { R6653 += 1, R6609 += 1, R6551 += 1 };
  s3 -> s2 [74, 65535] { R6653 += 1, R6609 += 1, R6550 += 1, R6551 += 1 };
  s3 -> s1 [87, 65535] { R6653 += 1, R6609 += 1, R6551 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s5 [0, 65535] { R6653 += 1 };
  s6 -> s6 [0, 80] { R6653 += 1, R6609 += 1, R6551 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s9 [0, 65535] { R6653 += 1 };
  s6 -> s6 [0, 65535] { R6653 += 1, R6609 += 1 };
  s6 -> s6 [87, 65535] { R6653 += 1, R6609 += 1, R6551 += 1 };
  s7 -> s6 [0, 80] { R6653 += 1, R6609 += 1, R6551 += 1 };
  s7 -> s7 [0, 65535] { R6653 += 1, R6609 += 1, R6550 += 1, R6551 += 1 };
  s7 -> s6 [87, 65535] { R6653 += 1, R6609 += 1, R6551 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R6653 += 1 };
  accepting s8, s5, s9, s6, s1;
};
};
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [113, 113];
  accepting s1;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
constraint R1 = R6569 && R2 = R6653 && R20 - R6653 = -1 && R21 = R6653 && R22 - R6653 = -1 && R23 = R6653 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R6439 + -1*R6437 - R53 = 0 && R52 + R6438 + R6436 = 0 && R6568 = 0 && R6594 = 0 && R6595 = 0 && R6602 = 0 && R6603 = 0 && R6608 = 0 && R6609 = 0 && R6610 = 0 && R6611 = R6653 && R6612 = 0 && R6613 = R6653 && R6614 = 0 && R6615 = R6653 && R6616 = 0 && R6617 = R6653 && R6618 = 0 && R6619 = R6653 && R6620 = 0 && R6621 = R6653 && R6622 = 0 && R6623 = R6653 && R6624 = 0 && R6625 = R6653 && R6626 = 0 && R6627 = R6653 && R6628 = 0 && R6629 = R6653 && R6630 = 0 && R6631 = R6653 && R6632 = 0 && R6633 = R6653 && R6634 = 0 && R6635 = R6653 && R6636 = 0 && R6637 = R6653 && R6638 = 0 && R6639 = R6653 && R6640 = 0 && R6641 = R6653 && R6642 = 0 && R6643 = R6653 && R6644 = 0 && R6645 = R6653 && R6646 = 0 && R6647 = R6653 && R6648 = 0 && R6649 = R6653 && R6650 = 0 && R6651 = R6653 && R6652 = 0 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R6439 + -1*R6437 - R53 < 1 && -1 < R6569 && 0 < R6653 && (R48 + R3895 + R3892 != 0 || ((R42 + R72 + R70 != 0 || R43 + R73 + R71 + -1*R6439 + -1*R6437 - R53 = 0 || R53 + R6439 + R6437 < 1) && (R42 + R72 + R70 = 0 || R53 + R6439 + R6437 < 1))) && (R48 + R3895 + R3892 != 0 || ((R46 + R3893 + R3890 != 0 || R47 + R3894 + R3891 + -1*R6439 + -1*R6437 - R53 = 0 || R53 + R6439 + R6437 < 1) && (R46 + R3893 + R3890 = 0 || R53 + R6439 + R6437 < 1))) && (R6554 != 0 || R6555 = R6569 || (R17 = 0 && R6569 = 0)) && (R6556 != 0 || R6557 = R6569 || (R17 = 0 && R6569 = 0)) && (R6558 != 0 || R6559 = R6569 || (R17 = 0 && R6569 = 0)) && (R6560 != 0 || R6561 = R6569 || (R17 = 0 && R6569 = 0)) && (R6562 != 0 || R6563 = R6569 || (R17 = 0 && R6569 = 0)) && (R6564 != 0 || R6565 = R6569 || (R17 = 0 && R6569 = 0)) && (R6566 != 0 || R6567 = R6569 || (R17 = 0 && R6569 = 0)) && (R6570 != 0 || R6569 = R6571 || (R17 = 0 && R6569 = 0)) && (R6572 != 0 || R6569 = R6573 || (R17 = 0 && R6569 = 0)) && (R18 = 0 || (R6592 = 0 && R6593 = 0)) && (R18 = 0 || (R6596 = 0 && R6597 = 0)) && (R18 = 0 || (R6598 = 0 && R6599 = 0)) && (R18 = 0 || (R6600 = 0 && R6601 = 0)) && (R18 = 0 || (R6604 = 0 && R6605 = 0)) && (R18 = 0 || (R6606 = 0 && R6607 = 0)) && (R19 = 0 || (R6574 = 0 && R6575 = 0)) && (R19 = 0 || (R6576 = 0 && R6577 = 0)) && (R19 = 0 || (R6578 = 0 && R6579 = 0)) && (R19 = 0 || (R6580 = 0 && R6581 = 0)) && (R19 = 0 || (R6582 = 0 && R6583 = 0)) && (R19 = 0 || (R6584 = 0 && R6585 = 0)) && (R19 = 0 || (R6586 = 0 && R6587 = 0)) && (R19 = 0 || (R6588 = 0 && R6589 = 0)) && (R19 = 0 || (R6590 = 0 && R6591 = 0)) && (R48 + R3895 + R3892 = 0 || (R42 + R72 + R70 = 0 && R43 + R73 + R71 + -1*R6439 + -1*R6437 - R53 = 0)) && (R48 + R3895 + R3892 = 0 || (R46 + R3893 + R3890 = 0 && R47 + R3894 + R3891 + -1*R6439 + -1*R6437 - R53 = 0)) && (R58 + R6445 + R6442 = 0 || (R56 + R6443 + R6440 = 0 && R57 + R6444 + R6441 = 0)) && (R58 + R6445 + R6442 = 0 || (R62 + R6552 + R6550 = 0 && R63 + R6553 + R6551 = 0)) && (R6554 = 0 || (R17 = 0 && R6569 = 0)) && (R6556 = 0 || (R17 = 0 && R6569 = 0)) && (R6558 = 0 || (R17 = 0 && R6569 = 0)) && (R6560 = 0 || (R17 = 0 && R6569 = 0)) && (R6562 = 0 || (R17 = 0 && R6569 = 0)) && (R6564 = 0 || (R17 = 0 && R6569 = 0)) && (R6566 = 0 || (R17 = 0 && R6569 = 0)) && (R6570 = 0 || (R17 = 0 && R6569 = 0)) && (R6572 = 0 || (R17 = 0 && R6569 = 0));
// End of Parikh automata intersection problem
