// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R12, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R3890, R3891, R3892, R3893, R3894, R3895, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R6436, R6437, R6438, R6439, R66, R67, R68, R6862, R6863, R6864, R6865, R6866, R6867, R69, R70, R7076, R7077, R7078, R7079, R7080, R7081, R7082, R7083, R7084, R7085, R7086, R7087, R7088, R7089, R7090, R7091, R7092, R7093, R7094, R7095, R7096, R7097, R7098, R7099, R71, R7100, R7101, R7102, R7103, R7104, R7105, R7106, R7107, R7108, R7109, R7110, R7111, R7112, R7113, R7114, R7115, R7116, R7117, R7118, R7119, R7120, R7121, R7122, R7123, R7124, R7125, R7126, R7127, R7128, R7129, R7130, R7131, R7132, R7133, R7134, R7135, R7136, R7137, R7138, R7139, R7140, R7141, R7142, R7143, R7144, R7145, R7146, R7147, R7148, R7149, R7150, R7151, R7152, R7153, R7154, R7155, R7156, R7157, R7158, R7159, R7160, R7161, R7162, R7163, R7164, R7165, R7166, R7167, R7168, R7169, R7170, R7171, R7172, R7173, R7174, R7175, R7176, R7177, R7178, R7179, R72, R73, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 72];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [73, 73];
  s0 -> s1 [74, 65535];
  s1 -> s1 [0, 72];
  s1 -> s2 [73, 73];
  s1 -> s1 [74, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s1 [0, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R25 += 1 };
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R7101 += 1, R19 += 1 };
  s0 -> s0 [0, 65535] { R7100 += 1, R7101 += 1 };
  s1 -> s1 [0, 65535] { R7101 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 72] { R7103 += 1 };
  s0 -> s0 [0, 65535] { R7102 += 1, R7103 += 1 };
  s0 -> s2 [73, 73] { R7103 += 1 };
  s0 -> s3 [73, 73] { R7103 += 1 };
  s0 -> s1 [82, 65535] { R7103 += 1 };
  s1 -> s1 [0, 72] { R7103 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R7103 += 1 };
  s1 -> s3 [73, 73] { R7103 += 1 };
  s1 -> s1 [82, 65535] { R7103 += 1 };
  s2 -> s2 [0, 73] { R7103 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [82, 65535] { R7103 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 72] { R7105 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R7104 += 1, R7105 += 1 };
  s0 -> s2 [73, 73] { R7105 += 1, R38 += 1 };
  s0 -> s3 [73, 73] { R7105 += 1, R38 += 1 };
  s0 -> s1 [74, 65535] { R7105 += 1, R38 += 1 };
  s1 -> s1 [0, 72] { R7105 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R7105 += 1, R38 += 1 };
  s1 -> s3 [73, 73] { R7105 += 1, R38 += 1 };
  s1 -> s1 [74, 65535] { R7105 += 1, R38 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R7105 += 1, R38 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 72] { R7107 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R7106 += 1, R7107 += 1 };
  s0 -> s2 [73, 73] { R7107 += 1, R40 += 1 };
  s0 -> s3 [73, 73] { R7107 += 1, R40 += 1 };
  s0 -> s1 [74, 65535] { R7107 += 1, R40 += 1 };
  s1 -> s1 [0, 72] { R7107 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R7107 += 1, R40 += 1 };
  s1 -> s3 [73, 73] { R7107 += 1, R40 += 1 };
  s1 -> s1 [74, 65535] { R7107 += 1, R40 += 1 };
  s2 -> s2 [0, 65535] { R7107 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 72] { R7109 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R7108 += 1, R7109 += 1 };
  s0 -> s2 [73, 73] { R7109 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [73, 73] { R7109 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [74, 65535] { R7109 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 72] { R7109 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R7109 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [73, 73] { R7109 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [74, 65535] { R7109 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535] { R7109 += 1, R42 += 1, R43 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 72] { R7111 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R7110 += 1, R7111 += 1 };
  s0 -> s2 [73, 73] { R7111 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [73, 73] { R7111 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [74, 65535] { R7111 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 72] { R7111 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R7111 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [73, 73] { R7111 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [74, 65535] { R7111 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7111 += 1, R46 += 1, R47 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 72] { R7113 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R7112 += 1, R7113 += 1 };
  s0 -> s2 [73, 73] { R7113 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [73, 73] { R7113 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [74, 65535] { R7113 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 72] { R7113 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R7113 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [73, 73] { R7113 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [74, 65535] { R7113 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R7113 += 1, R52 += 1, R53 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 72] { R7115 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R7114 += 1, R7115 += 1 };
  s0 -> s2 [73, 73] { R7115 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [73, 73] { R7115 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [74, 65535] { R7115 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 72] { R7115 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R7115 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [73, 73] { R7115 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [74, 65535] { R7115 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R7115 += 1, R56 += 1, R57 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 72] { R7117 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R7116 += 1, R7117 += 1 };
  s0 -> s2 [73, 73] { R7117 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [73, 73] { R7117 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [74, 65535] { R7117 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 72] { R7117 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R7117 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [73, 73] { R7117 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [74, 65535] { R7117 += 1, R62 += 1, R63 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R7117 += 1, R62 += 1, R63 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 72] { R7137 += 1 };
  s0 -> s0 [0, 65535] { R7136 += 1, R7137 += 1 };
  s0 -> s2 [73, 73] { R7137 += 1 };
  s0 -> s1 [74, 65535] { R7137 += 1 };
  s1 -> s1 [0, 72] { R7137 += 1 };
  s1 -> s2 [73, 73] { R7137 += 1 };
  s1 -> s1 [74, 65535] { R7137 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R7137 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R7139 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R7138 += 1, R7139 += 1 };
  s1 -> s1 [0, 65535] { R7139 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 72] { R7141 += 1 };
  s0 -> s0 [0, 65535] { R7140 += 1, R7141 += 1 };
  s0 -> s2 [0, 65535] { R7141 += 1, R8 += 1 };
  s0 -> s3 [73, 73] { R7141 += 1 };
  s0 -> s1 [74, 65535] { R7141 += 1 };
  s1 -> s1 [0, 72] { R7141 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [73, 73] { R7141 += 1 };
  s1 -> s1 [74, 65535] { R7141 += 1 };
  s2 -> s1 [0, 72] { R7141 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R7141 += 1, R8 += 1 };
  s2 -> s3 [73, 73] { R7141 += 1 };
  s2 -> s1 [74, 65535] { R7141 += 1 };
  s3 -> s3 [0, 65535] { R7141 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 72] { R7143 += 1, R7081 += 1 };
  s0 -> s0 [0, 65535] { R7142 += 1, R7143 += 1 };
  s0 -> s2 [0, 65535] { R7143 += 1, R7080 += 1, R7081 += 1 };
  s0 -> s1 [74, 65535] { R7143 += 1, R7081 += 1 };
  s1 -> s1 [0, 72] { R7143 += 1, R7081 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R7143 += 1 };
  s1 -> s1 [74, 65535] { R7143 += 1, R7081 += 1 };
  s2 -> s1 [0, 72] { R7143 += 1, R7081 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R7143 += 1, R7080 += 1, R7081 += 1 };
  s2 -> s1 [74, 65535] { R7143 += 1, R7081 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R7145 += 1, R7083 += 1, R17 += 1 };
  s0 -> s2 [0, 65535] { R7145 += 1, R7082 += 1, R7083 += 1 };
  s0 -> s0 [0, 65535] { R7144 += 1, R7145 += 1 };
  s1 -> s1 [0, 65535] { R7145 += 1, R7083 += 1, R17 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R7145 += 1 };
  s2 -> s1 [0, 65535] { R7145 += 1, R7083 += 1, R17 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R7145 += 1, R7082 += 1, R7083 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7145 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 73] { R7147 += 1, R7085 += 1 };
  s0 -> s0 [0, 65535] { R7146 += 1, R7147 += 1 };
  s0 -> s2 [0, 65535] { R7147 += 1, R7084 += 1, R7085 += 1 };
  s0 -> s1 [81, 65535] { R7147 += 1, R7085 += 1 };
  s1 -> s1 [0, 73] { R7147 += 1, R7085 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R7147 += 1 };
  s1 -> s1 [81, 65535] { R7147 += 1, R7085 += 1 };
  s2 -> s1 [0, 73] { R7147 += 1, R7085 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R7147 += 1, R7084 += 1, R7085 += 1 };
  s2 -> s1 [81, 65535] { R7147 += 1, R7085 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s0 [0, 65535] { R7148 += 1, R7149 += 1 };
  s0 -> s1 [0, 65535] { R7149 += 1, R7087 += 1, R67 += 1 };
  s0 -> s2 [0, 65535] { R7149 += 1, R7086 += 1, R7087 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R7149 += 1 };
  s1 -> s1 [0, 65535] { R7149 += 1, R7087 += 1, R67 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R7149 += 1, R7087 += 1, R67 += 1 };
  s2 -> s2 [0, 65535] { R7149 += 1, R7086 += 1, R7087 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7149 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 80] { R7151 += 1, R7089 += 1 };
  s0 -> s0 [0, 65535] { R7150 += 1, R7151 += 1 };
  s0 -> s2 [0, 65535] { R7151 += 1, R7089 += 1, R69 += 1 };
  s0 -> s3 [0, 65535] { R7151 += 1, R7088 += 1, R7089 += 1 };
  s0 -> s1 [82, 65535] { R7151 += 1, R7089 += 1 };
  s1 -> s1 [0, 80] { R7151 += 1, R7089 += 1 };
  s1 -> s1 [0, 65535] { R7151 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [82, 65535] { R7151 += 1, R7089 += 1 };
  s2 -> s1 [0, 80] { R7151 += 1, R7089 += 1 };
  s2 -> s2 [0, 65535] { R7151 += 1, R7089 += 1, R69 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R7151 += 1 };
  s2 -> s1 [82, 65535] { R7151 += 1, R7089 += 1 };
  s3 -> s1 [0, 80] { R7151 += 1, R7089 += 1 };
  s3 -> s2 [0, 65535] { R7151 += 1, R7089 += 1, R69 += 1 };
  s3 -> s3 [0, 65535] { R7151 += 1, R7088 += 1, R7089 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [82, 65535] { R7151 += 1, R7089 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R7151 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 80] { R7153 += 1, R7091 += 1, R73 += 1 };
  s0 -> s2 [0, 65535] { R7153 += 1, R7091 += 1, R72 += 1, R73 += 1 };
  s0 -> s3 [0, 65535] { R7153 += 1, R7090 += 1, R7091 += 1 };
  s0 -> s0 [0, 65535] { R7152 += 1, R7153 += 1 };
  s0 -> s1 [82, 65535] { R7153 += 1, R7091 += 1, R73 += 1 };
  s1 -> s1 [0, 80] { R7153 += 1, R7091 += 1, R73 += 1 };
  s1 -> s5 [0, 65535] { R7153 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R7153 += 1, R7091 += 1 };
  s1 -> s1 [82, 65535] { R7153 += 1, R7091 += 1, R73 += 1 };
  s2 -> s1 [0, 80] { R7153 += 1, R7091 += 1, R73 += 1 };
  s2 -> s5 [0, 65535] { R7153 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R7153 += 1, R7091 += 1, R72 += 1, R73 += 1 };
  s2 -> s1 [82, 65535] { R7153 += 1, R7091 += 1, R73 += 1 };
  s3 -> s1 [0, 80] { R7153 += 1, R7091 += 1, R73 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R7153 += 1, R7091 += 1, R72 += 1, R73 += 1 };
  s3 -> s3 [0, 65535] { R7153 += 1, R7090 += 1, R7091 += 1 };
  s3 -> s1 [82, 65535] { R7153 += 1, R7091 += 1, R73 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R7153 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R7155 += 1, R7092 += 1, R7093 += 1 };
  s0 -> s2 [0, 65535] { R7155 += 1, R7093 += 1 };
  s0 -> s0 [0, 65535] { R7154 += 1, R7155 += 1 };
  s0 -> s3 [0, 65535] { R7155 += 1, R7093 += 1, R3894 += 1, R3895 += 1 };
  s1 -> s1 [0, 65535] { R7155 += 1, R7092 += 1, R7093 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s2 [0, 65535] { R7155 += 1, R7093 += 1 };
  s1 -> s3 [0, 65535] { R7155 += 1, R7093 += 1, R3894 += 1, R3895 += 1 };
  s2 -> s4 [0, 65535] { R7155 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R7155 += 1, R7093 += 1 };
  s3 -> s4 [0, 65535] { R7155 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R7155 += 1, R7093 += 1 };
  s3 -> s3 [0, 65535] { R7155 += 1, R7093 += 1, R3894 += 1, R3895 += 1 };
  s4 -> s4 [0, 65535] { R7155 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 81] { R7157 += 1, R7095 += 1, R6439 += 1 };
  s0 -> s0 [0, 65535] { R7156 += 1, R7157 += 1 };
  s0 -> s2 [0, 65535] { R7157 += 1, R7094 += 1, R7095 += 1 };
  s0 -> s3 [0, 65535] { R7157 += 1, R7095 += 1, R6438 += 1, R6439 += 1 };
  s0 -> s4 [86, 86] { R7157 += 1, R7095 += 1, R6439 += 1 };
  s0 -> s1 [87, 65535] { R7157 += 1, R7095 += 1, R6439 += 1 };
  s1 -> s1 [0, 81] { R7157 += 1, R7095 += 1, R6439 += 1 };
  s1 -> s4 [86, 86] { R7157 += 1, R7095 += 1, R6439 += 1 };
  s1 -> s1 [87, 65535] { R7157 += 1, R7095 += 1, R6439 += 1 };
  s2 -> s1 [0, 81] { R7157 += 1, R7095 += 1, R6439 += 1 };
  s2 -> s2 [0, 65535] { R7157 += 1, R7094 += 1, R7095 += 1 };
  s2 -> s3 [0, 65535] { R7157 += 1, R7095 += 1, R6438 += 1, R6439 += 1 };
  s2 -> s4 [86, 86] { R7157 += 1, R7095 += 1, R6439 += 1 };
  s2 -> s1 [87, 65535] { R7157 += 1, R7095 += 1, R6439 += 1 };
  s3 -> s1 [0, 81] { R7157 += 1, R7095 += 1, R6439 += 1 };
  s3 -> s3 [0, 65535] { R7157 += 1, R7095 += 1, R6438 += 1, R6439 += 1 };
  s3 -> s4 [86, 86] { R7157 += 1, R7095 += 1, R6439 += 1 };
  s3 -> s1 [87, 65535] { R7157 += 1, R7095 += 1, R6439 += 1 };
  s4 -> s4 [0, 81] { R7157 += 1, R7095 += 1, R6439 += 1 };
  s4 -> s5 [0, 65535] { R7157 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R7157 += 1, R7095 += 1 };
  s4 -> s4 [86, 65535] { R7157 += 1, R7095 += 1, R6439 += 1 };
  s5 -> s5 [0, 65535] { R7157 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s4, s5, s6;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R7159 += 1, R7097 += 1 };
  s0 -> s2 [0, 65535] { R7159 += 1, R7096 += 1, R7097 += 1 };
  s0 -> s0 [0, 65535] { R7158 += 1, R7159 += 1 };
  s0 -> s3 [0, 65535] { R7159 += 1, R7097 += 1, R6866 += 1, R6867 += 1 };
  s1 -> s1 [0, 65535] { R7159 += 1, R7097 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R7159 += 1 };
  s2 -> s1 [0, 65535] { R7159 += 1, R7097 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R7159 += 1, R7096 += 1, R7097 += 1 };
  s2 -> s3 [0, 65535] { R7159 += 1, R7097 += 1, R6866 += 1, R6867 += 1 };
  s3 -> s1 [0, 65535] { R7159 += 1, R7097 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7159 += 1, R7097 += 1, R6866 += 1, R6867 += 1 };
  s3 -> s5 [0, 65535] { R7159 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R7159 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 81] { R7161 += 1, R7099 += 1, R7079 += 1 };
  s0 -> s1 [0, 65535] { R7161 += 1, R7099 += 1 };
  s0 -> s0 [0, 65535] { R7160 += 1, R7161 += 1 };
  s0 -> s2 [0, 65535] { R7161 += 1, R7098 += 1, R7099 += 1 };
  s0 -> s1 [87, 65535] { R7161 += 1, R7099 += 1, R7079 += 1 };
  s1 -> s1 [0, 81] { R7161 += 1, R7099 += 1, R7079 += 1 };
  s1 -> s1 [0, 65535] { R7161 += 1, R7099 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R7161 += 1 };
  s1 -> s1 [87, 65535] { R7161 += 1, R7099 += 1, R7079 += 1 };
  s2 -> s1 [0, 81] { R7161 += 1, R7099 += 1, R7079 += 1 };
  s2 -> s1 [0, 65535] { R7161 += 1, R7099 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R7161 += 1, R7098 += 1, R7099 += 1 };
  s2 -> s1 [87, 65535] { R7161 += 1, R7099 += 1, R7079 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7161 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R7163 += 1, R7119 += 1, R18 += 1 };
  s0 -> s2 [0, 65535] { R7163 += 1, R7118 += 1, R7119 += 1 };
  s0 -> s0 [0, 65535] { R7162 += 1, R7163 += 1 };
  s1 -> s1 [0, 65535] { R7163 += 1, R7119 += 1, R18 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R7163 += 1 };
  s2 -> s1 [0, 65535] { R7163 += 1, R7119 += 1, R18 += 1 };
  s2 -> s2 [0, 65535] { R7163 += 1, R7118 += 1, R7119 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7163 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 72] { R7165 += 1, R7121 += 1 };
  s0 -> s2 [0, 65535] { R7165 += 1, R7120 += 1, R7121 += 1 };
  s0 -> s0 [0, 65535] { R7164 += 1, R7165 += 1 };
  s0 -> s3 [73, 73] { R7165 += 1, R7121 += 1 };
  s0 -> s4 [73, 73] { R7165 += 1, R7121 += 1 };
  s0 -> s5 [81, 81] { R7165 += 1, R7121 += 1 };
  s0 -> s1 [82, 65535] { R7165 += 1, R7121 += 1 };
  s1 -> s1 [0, 72] { R7165 += 1, R7121 += 1 };
  s1 -> s3 [73, 73] { R7165 += 1, R7121 += 1 };
  s1 -> s4 [73, 73] { R7165 += 1, R7121 += 1 };
  s1 -> s5 [81, 81] { R7165 += 1, R7121 += 1 };
  s1 -> s1 [82, 65535] { R7165 += 1, R7121 += 1 };
  s2 -> s1 [0, 72] { R7165 += 1, R7121 += 1 };
  s2 -> s2 [0, 65535] { R7165 += 1, R7120 += 1, R7121 += 1 };
  s2 -> s3 [73, 73] { R7165 += 1, R7121 += 1 };
  s2 -> s4 [73, 73] { R7165 += 1, R7121 += 1 };
  s2 -> s5 [81, 81] { R7165 += 1, R7121 += 1 };
  s2 -> s1 [82, 65535] { R7165 += 1, R7121 += 1 };
  s3 -> s3 [0, 73] { R7165 += 1, R7121 += 1 };
  s3 -> s7 [81, 81] { R7165 += 1, R7121 += 1 };
  s3 -> s3 [82, 65535] { R7165 += 1, R7121 += 1 };
  s5 -> s5 [0, 72] { R7165 += 1, R7121 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R7165 += 1 };
  s5 -> s7 [73, 73] { R7165 += 1, R7121 += 1 };
  s5 -> s8 [73, 73] { R7165 += 1, R7121 += 1 };
  s5 -> s5 [81, 65535] { R7165 += 1, R7121 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 73] { R7165 += 1, R7121 += 1 };
  s7 -> s7 [0, 65535] { R7165 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [81, 65535] { R7165 += 1, R7121 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R7165 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 72] { R7167 += 1, R7123 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R7166 += 1, R7167 += 1 };
  s0 -> s2 [0, 65535] { R7167 += 1, R7122 += 1, R7123 += 1 };
  s0 -> s3 [73, 73] { R7167 += 1, R7123 += 1, R66 += 1 };
  s0 -> s4 [73, 73] { R7167 += 1, R7123 += 1, R66 += 1 };
  s0 -> s1 [74, 65535] { R7167 += 1, R7123 += 1, R66 += 1 };
  s1 -> s1 [0, 72] { R7167 += 1, R7123 += 1, R66 += 1 };
  s1 -> s1 [0, 65535] { R7167 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R7167 += 1, R7123 += 1, R66 += 1 };
  s1 -> s4 [73, 73] { R7167 += 1, R7123 += 1, R66 += 1 };
  s1 -> s1 [74, 65535] { R7167 += 1, R7123 += 1, R66 += 1 };
  s2 -> s1 [0, 72] { R7167 += 1, R7123 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R7167 += 1, R7122 += 1, R7123 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R7167 += 1, R7123 += 1, R66 += 1 };
  s2 -> s4 [73, 73] { R7167 += 1, R7123 += 1, R66 += 1 };
  s2 -> s1 [74, 65535] { R7167 += 1, R7123 += 1, R66 += 1 };
  s3 -> s3 [0, 65535] { R7167 += 1, R7123 += 1, R66 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R7167 += 1 };
  s4 -> s4 [0, 65535] { R7167 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7167 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 72] { R7169 += 1, R7125 += 1, R68 += 1 };
  s0 -> s2 [0, 65535] { R7169 += 1, R7124 += 1, R7125 += 1 };
  s0 -> s0 [0, 65535] { R7168 += 1, R7169 += 1 };
  s0 -> s3 [73, 73] { R7169 += 1, R7125 += 1, R68 += 1 };
  s0 -> s4 [73, 73] { R7169 += 1, R7125 += 1, R68 += 1 };
  s0 -> s1 [74, 65535] { R7169 += 1, R7125 += 1, R68 += 1 };
  s1 -> s1 [0, 72] { R7169 += 1, R7125 += 1, R68 += 1 };
  s1 -> s1 [0, 65535] { R7169 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [73, 73] { R7169 += 1, R7125 += 1, R68 += 1 };
  s1 -> s4 [73, 73] { R7169 += 1, R7125 += 1, R68 += 1 };
  s1 -> s1 [74, 65535] { R7169 += 1, R7125 += 1, R68 += 1 };
  s2 -> s1 [0, 72] { R7169 += 1, R7125 += 1, R68 += 1 };
  s2 -> s2 [0, 65535] { R7169 += 1, R7124 += 1, R7125 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [73, 73] { R7169 += 1, R7125 += 1, R68 += 1 };
  s2 -> s4 [73, 73] { R7169 += 1, R7125 += 1, R68 += 1 };
  s2 -> s1 [74, 65535] { R7169 += 1, R7125 += 1, R68 += 1 };
  s3 -> s3 [0, 65535] { R7169 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R7169 += 1, R7125 += 1, R68 += 1 };
  s4 -> s5 [0, 65535] { R7169 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R7169 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 72] { R7171 += 1, R7127 += 1, R70 += 1, R71 += 1 };
  s0 -> s2 [0, 65535] { R7171 += 1, R7126 += 1, R7127 += 1 };
  s0 -> s0 [0, 65535] { R7170 += 1, R7171 += 1 };
  s0 -> s3 [73, 73] { R7171 += 1, R7127 += 1, R70 += 1, R71 += 1 };
  s0 -> s4 [73, 73] { R7171 += 1, R7127 += 1, R70 += 1, R71 += 1 };
  s0 -> s1 [74, 65535] { R7171 += 1, R7127 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 72] { R7171 += 1, R7127 += 1, R70 += 1, R71 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R7171 += 1 };
  s1 -> s3 [73, 73] { R7171 += 1, R7127 += 1, R70 += 1, R71 += 1 };
  s1 -> s4 [73, 73] { R7171 += 1, R7127 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [74, 65535] { R7171 += 1, R7127 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [0, 72] { R7171 += 1, R7127 += 1, R70 += 1, R71 += 1 };
  s2 -> s2 [0, 65535] { R7171 += 1, R7126 += 1, R7127 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R7171 += 1, R7127 += 1, R70 += 1, R71 += 1 };
  s2 -> s4 [73, 73] { R7171 += 1, R7127 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [74, 65535] { R7171 += 1, R7127 += 1, R70 += 1, R71 += 1 };
  s3 -> s3 [0, 65535] { R7171 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R7171 += 1 };
  s4 -> s4 [0, 65535] { R7171 += 1, R7127 += 1, R70 += 1, R71 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7171 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 72] { R7173 += 1, R7129 += 1, R3890 += 1, R3891 += 1 };
  s0 -> s2 [0, 72] { R7173 += 1, R7129 += 1, R3891 += 1, R3892 += 1 };
  s0 -> s0 [0, 65535] { R7172 += 1, R7173 += 1 };
  s0 -> s3 [0, 65535] { R7173 += 1, R7128 += 1, R7129 += 1 };
  s0 -> s4 [73, 73] { R7173 += 1, R7129 += 1, R3891 += 1, R3892 += 1 };
  s0 -> s5 [73, 73] { R7173 += 1, R7129 += 1, R3890 += 1, R3891 += 1 };
  s0 -> s6 [73, 73] { R7173 += 1, R7129 += 1, R3890 += 1, R3891 += 1 };
  s0 -> s7 [73, 73] { R7173 += 1, R7129 += 1, R3891 += 1, R3892 += 1 };
  s0 -> s1 [74, 65535] { R7173 += 1, R7129 += 1, R3890 += 1, R3891 += 1 };
  s0 -> s2 [74, 65535] { R7173 += 1, R7129 += 1, R3891 += 1, R3892 += 1 };
  s1 -> s1 [0, 72] { R7173 += 1, R7129 += 1, R3890 += 1, R3891 += 1 };
  s1 -> s2 [0, 72] { R7173 += 1, R7129 += 1, R3891 += 1, R3892 += 1 };
  s1 -> s4 [73, 73] { R7173 += 1, R7129 += 1, R3891 += 1, R3892 += 1 };
  s1 -> s5 [73, 73] { R7173 += 1, R7129 += 1, R3890 += 1, R3891 += 1 };
  s1 -> s6 [73, 73] { R7173 += 1, R7129 += 1, R3890 += 1, R3891 += 1 };
  s1 -> s7 [73, 73] { R7173 += 1, R7129 += 1, R3891 += 1, R3892 += 1 };
  s1 -> s1 [74, 65535] { R7173 += 1, R7129 += 1, R3890 += 1, R3891 += 1 };
  s1 -> s2 [74, 65535] { R7173 += 1, R7129 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s2 [0, 72] { R7173 += 1, R7129 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s2 [0, 65535] { R7173 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s4 [73, 73] { R7173 += 1, R7129 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s7 [73, 73] { R7173 += 1, R7129 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s2 [74, 65535] { R7173 += 1, R7129 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s1 [0, 72] { R7173 += 1, R7129 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s2 [0, 72] { R7173 += 1, R7129 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s3 [0, 65535] { R7173 += 1, R7128 += 1, R7129 += 1 };
  s3 -> s4 [73, 73] { R7173 += 1, R7129 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s5 [73, 73] { R7173 += 1, R7129 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s6 [73, 73] { R7173 += 1, R7129 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s7 [73, 73] { R7173 += 1, R7129 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s1 [74, 65535] { R7173 += 1, R7129 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s2 [74, 65535] { R7173 += 1, R7129 += 1, R3891 += 1, R3892 += 1 };
  s4 -> s4 [0, 65535] { R7173 += 1, R7129 += 1, R3891 += 1, R3892 += 1 };
  s4 -> s9 [0, 65535] { R7173 += 1 };
  s4 -> s8 [0, 65535];
  s5 -> s4 [0, 65535] { R7173 += 1, R7129 += 1, R3891 += 1, R3892 += 1 };
  s5 -> s5 [0, 65535] { R7173 += 1, R7129 += 1, R3890 += 1, R3891 += 1 };
  s7 -> s7 [0, 65535] { R7173 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R7173 += 1 };
  s9 -> s8 [0, 65535];
  accepting s4, s8, s2, s9, s7;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 72] { R7175 += 1, R7131 += 1, R6436 += 1, R6437 += 1 };
  s0 -> s2 [0, 65535] { R7175 += 1, R7130 += 1, R7131 += 1 };
  s0 -> s0 [0, 65535] { R7174 += 1, R7175 += 1 };
  s0 -> s3 [73, 73] { R7175 += 1, R7131 += 1, R6436 += 1, R6437 += 1 };
  s0 -> s4 [73, 73] { R7175 += 1, R7131 += 1, R6436 += 1, R6437 += 1 };
  s0 -> s1 [74, 65535] { R7175 += 1, R7131 += 1, R6436 += 1, R6437 += 1 };
  s1 -> s1 [0, 72] { R7175 += 1, R7131 += 1, R6436 += 1, R6437 += 1 };
  s1 -> s1 [0, 65535] { R7175 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R7175 += 1, R7131 += 1, R6436 += 1, R6437 += 1 };
  s1 -> s4 [73, 73] { R7175 += 1, R7131 += 1, R6436 += 1, R6437 += 1 };
  s1 -> s1 [74, 65535] { R7175 += 1, R7131 += 1, R6436 += 1, R6437 += 1 };
  s2 -> s1 [0, 72] { R7175 += 1, R7131 += 1, R6436 += 1, R6437 += 1 };
  s2 -> s2 [0, 65535] { R7175 += 1, R7130 += 1, R7131 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R7175 += 1, R7131 += 1, R6436 += 1, R6437 += 1 };
  s2 -> s4 [73, 73] { R7175 += 1, R7131 += 1, R6436 += 1, R6437 += 1 };
  s2 -> s1 [74, 65535] { R7175 += 1, R7131 += 1, R6436 += 1, R6437 += 1 };
  s3 -> s3 [0, 65535] { R7175 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R7175 += 1 };
  s4 -> s4 [0, 65535] { R7175 += 1, R7131 += 1, R6436 += 1, R6437 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7175 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 72] { R7177 += 1, R7133 += 1, R6863 += 1, R6864 += 1 };
  s0 -> s2 [0, 72] { R7177 += 1, R7133 += 1, R6862 += 1, R6863 += 1 };
  s0 -> s0 [0, 65535] { R7176 += 1, R7177 += 1 };
  s0 -> s3 [0, 65535] { R7177 += 1, R7132 += 1, R7133 += 1 };
  s0 -> s4 [73, 73] { R7177 += 1, R7133 += 1, R6862 += 1, R6863 += 1 };
  s0 -> s5 [73, 73] { R7177 += 1, R7133 += 1, R6862 += 1, R6863 += 1 };
  s0 -> s6 [73, 73] { R7177 += 1, R7133 += 1, R6863 += 1, R6864 += 1 };
  s0 -> s7 [73, 73] { R7177 += 1, R7133 += 1, R6863 += 1, R6864 += 1 };
  s0 -> s1 [74, 65535] { R7177 += 1, R7133 += 1, R6863 += 1, R6864 += 1 };
  s0 -> s2 [74, 65535] { R7177 += 1, R7133 += 1, R6862 += 1, R6863 += 1 };
  s1 -> s1 [0, 72] { R7177 += 1, R7133 += 1, R6863 += 1, R6864 += 1 };
  s1 -> s1 [0, 65535] { R7177 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s6 [73, 73] { R7177 += 1, R7133 += 1, R6863 += 1, R6864 += 1 };
  s1 -> s7 [73, 73] { R7177 += 1, R7133 += 1, R6863 += 1, R6864 += 1 };
  s1 -> s1 [74, 65535] { R7177 += 1, R7133 += 1, R6863 += 1, R6864 += 1 };
  s2 -> s1 [0, 72] { R7177 += 1, R7133 += 1, R6863 += 1, R6864 += 1 };
  s2 -> s2 [0, 72] { R7177 += 1, R7133 += 1, R6862 += 1, R6863 += 1 };
  s2 -> s4 [73, 73] { R7177 += 1, R7133 += 1, R6862 += 1, R6863 += 1 };
  s2 -> s5 [73, 73] { R7177 += 1, R7133 += 1, R6862 += 1, R6863 += 1 };
  s2 -> s6 [73, 73] { R7177 += 1, R7133 += 1, R6863 += 1, R6864 += 1 };
  s2 -> s7 [73, 73] { R7177 += 1, R7133 += 1, R6863 += 1, R6864 += 1 };
  s2 -> s1 [74, 65535] { R7177 += 1, R7133 += 1, R6863 += 1, R6864 += 1 };
  s2 -> s2 [74, 65535] { R7177 += 1, R7133 += 1, R6862 += 1, R6863 += 1 };
  s3 -> s1 [0, 72] { R7177 += 1, R7133 += 1, R6863 += 1, R6864 += 1 };
  s3 -> s2 [0, 72] { R7177 += 1, R7133 += 1, R6862 += 1, R6863 += 1 };
  s3 -> s3 [0, 65535] { R7177 += 1, R7132 += 1, R7133 += 1 };
  s3 -> s4 [73, 73] { R7177 += 1, R7133 += 1, R6862 += 1, R6863 += 1 };
  s3 -> s5 [73, 73] { R7177 += 1, R7133 += 1, R6862 += 1, R6863 += 1 };
  s3 -> s6 [73, 73] { R7177 += 1, R7133 += 1, R6863 += 1, R6864 += 1 };
  s3 -> s7 [73, 73] { R7177 += 1, R7133 += 1, R6863 += 1, R6864 += 1 };
  s3 -> s1 [74, 65535] { R7177 += 1, R7133 += 1, R6863 += 1, R6864 += 1 };
  s3 -> s2 [74, 65535] { R7177 += 1, R7133 += 1, R6862 += 1, R6863 += 1 };
  s5 -> s5 [0, 65535] { R7177 += 1, R7133 += 1, R6862 += 1, R6863 += 1 };
  s5 -> s6 [0, 65535] { R7177 += 1, R7133 += 1, R6863 += 1, R6864 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s9 [0, 65535] { R7177 += 1 };
  s6 -> s6 [0, 65535] { R7177 += 1, R7133 += 1, R6863 += 1, R6864 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R7177 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R7177 += 1 };
  accepting s8, s9, s6, s1, s7;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 72] { R7179 += 1, R7135 += 1, R7077 += 1 };
  s0 -> s2 [0, 72] { R7179 += 1, R7135 += 1, R7076 += 1, R7077 += 1 };
  s0 -> s3 [0, 65535] { R7179 += 1, R7134 += 1, R7135 += 1 };
  s0 -> s0 [0, 65535] { R7178 += 1, R7179 += 1 };
  s0 -> s4 [73, 73] { R7179 += 1, R7135 += 1, R7076 += 1, R7077 += 1 };
  s0 -> s5 [73, 73] { R7179 += 1, R7135 += 1, R7077 += 1 };
  s0 -> s6 [73, 73] { R7179 += 1, R7135 += 1, R7077 += 1 };
  s0 -> s7 [73, 73] { R7179 += 1, R7135 += 1, R7076 += 1, R7077 += 1 };
  s0 -> s1 [74, 80] { R7179 += 1, R7135 += 1, R7077 += 1 };
  s0 -> s2 [74, 65535] { R7179 += 1, R7135 += 1, R7076 += 1, R7077 += 1 };
  s0 -> s8 [81, 81] { R7179 += 1, R7135 += 1, R7077 += 1 };
  s0 -> s1 [87, 65535] { R7179 += 1, R7135 += 1, R7077 += 1 };
  s1 -> s1 [0, 72] { R7179 += 1, R7135 += 1, R7077 += 1 };
  s1 -> s5 [73, 73] { R7179 += 1, R7135 += 1 };
  s1 -> s6 [73, 73] { R7179 += 1, R7135 += 1 };
  s1 -> s1 [74, 80] { R7179 += 1, R7135 += 1, R7077 += 1 };
  s1 -> s1 [74, 65535] { R7179 += 1, R7135 += 1 };
  s1 -> s8 [81, 81] { R7179 += 1, R7135 += 1, R7077 += 1 };
  s1 -> s1 [87, 65535] { R7179 += 1, R7135 += 1, R7077 += 1 };
  s2 -> s1 [0, 72] { R7179 += 1, R7135 += 1, R7077 += 1 };
  s2 -> s2 [0, 72] { R7179 += 1, R7135 += 1, R7076 += 1, R7077 += 1 };
  s2 -> s4 [73, 73] { R7179 += 1, R7135 += 1, R7076 += 1, R7077 += 1 };
  s2 -> s5 [73, 73] { R7179 += 1, R7135 += 1, R7077 += 1 };
  s2 -> s6 [73, 73] { R7179 += 1, R7135 += 1, R7077 += 1 };
  s2 -> s7 [73, 73] { R7179 += 1, R7135 += 1, R7076 += 1, R7077 += 1 };
  s2 -> s1 [74, 80] { R7179 += 1, R7135 += 1, R7077 += 1 };
  s2 -> s2 [74, 65535] { R7179 += 1, R7135 += 1, R7076 += 1, R7077 += 1 };
  s2 -> s8 [81, 81] { R7179 += 1, R7135 += 1, R7077 += 1 };
  s2 -> s1 [87, 65535] { R7179 += 1, R7135 += 1, R7077 += 1 };
  s3 -> s1 [0, 72] { R7179 += 1, R7135 += 1, R7077 += 1 };
  s3 -> s2 [0, 72] { R7179 += 1, R7135 += 1, R7076 += 1, R7077 += 1 };
  s3 -> s3 [0, 65535] { R7179 += 1, R7134 += 1, R7135 += 1 };
  s3 -> s4 [73, 73] { R7179 += 1, R7135 += 1, R7076 += 1, R7077 += 1 };
  s3 -> s5 [73, 73] { R7179 += 1, R7135 += 1, R7077 += 1 };
  s3 -> s6 [73, 73] { R7179 += 1, R7135 += 1, R7077 += 1 };
  s3 -> s7 [73, 73] { R7179 += 1, R7135 += 1, R7076 += 1, R7077 += 1 };
  s3 -> s1 [74, 80] { R7179 += 1, R7135 += 1, R7077 += 1 };
  s3 -> s2 [74, 65535] { R7179 += 1, R7135 += 1, R7076 += 1, R7077 += 1 };
  s3 -> s8 [81, 81] { R7179 += 1, R7135 += 1, R7077 += 1 };
  s3 -> s1 [87, 65535] { R7179 += 1, R7135 += 1, R7077 += 1 };
  s4 -> s6 [0, 80] { R7179 += 1, R7135 += 1, R7077 += 1 };
  s4 -> s4 [0, 65535] { R7179 += 1, R7135 += 1, R7076 += 1, R7077 += 1 };
  s4 -> s11 [81, 81] { R7179 += 1, R7135 += 1, R7077 += 1 };
  s4 -> s6 [87, 65535] { R7179 += 1, R7135 += 1, R7077 += 1 };
  s6 -> s6 [0, 80] { R7179 += 1, R7135 += 1, R7077 += 1 };
  s6 -> s6 [0, 65535] { R7179 += 1, R7135 += 1 };
  s6 -> s11 [81, 81] { R7179 += 1, R7135 += 1, R7077 += 1 };
  s6 -> s6 [87, 65535] { R7179 += 1, R7135 += 1, R7077 += 1 };
  s8 -> s8 [0, 72] { R7179 += 1, R7135 += 1, R7077 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R7179 += 1 };
  s8 -> s10 [73, 73] { R7179 += 1, R7135 += 1 };
  s8 -> s11 [73, 73] { R7179 += 1, R7135 += 1 };
  s8 -> s8 [74, 81] { R7179 += 1, R7135 += 1, R7077 += 1 };
  s8 -> s8 [74, 65535] { R7179 += 1, R7135 += 1 };
  s8 -> s8 [87, 65535] { R7179 += 1, R7135 += 1, R7077 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R7179 += 1 };
  s11 -> s11 [0, 81] { R7179 += 1, R7135 += 1, R7077 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R7179 += 1, R7135 += 1 };
  s11 -> s12 [0, 65535] { R7179 += 1 };
  s11 -> s11 [87, 65535] { R7179 += 1, R7135 += 1, R7077 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R7179 += 1 };
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [113, 113];
  accepting s1;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
constraint R1 = R7095 && R2 = R7179 && R20 - R7179 = -1 && R21 = R7179 && R22 - R7179 = -1 && R23 = R7179 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R6439 + -1*R6437 - R53 = 0 && R52 + R6438 + R6436 = 0 && R7094 = 0 && R7120 = 0 && R7121 = 0 && R7128 = 0 && R7129 = 0 && R7132 = 0 && R7133 = 0 && R7134 = 0 && R7135 = 0 && R7136 = 0 && R7137 = R7179 && R7138 = 0 && R7139 = R7179 && R7140 = 0 && R7141 = R7179 && R7142 = 0 && R7143 = R7179 && R7144 = 0 && R7145 = R7179 && R7146 = 0 && R7147 = R7179 && R7148 = 0 && R7149 = R7179 && R7150 = 0 && R7151 = R7179 && R7152 = 0 && R7153 = R7179 && R7154 = 0 && R7155 = R7179 && R7156 = 0 && R7157 = R7179 && R7158 = 0 && R7159 = R7179 && R7160 = 0 && R7161 = R7179 && R7162 = 0 && R7163 = R7179 && R7164 = 0 && R7165 = R7179 && R7166 = 0 && R7167 = R7179 && R7168 = 0 && R7169 = R7179 && R7170 = 0 && R7171 = R7179 && R7172 = 0 && R7173 = R7179 && R7174 = 0 && R7175 = R7179 && R7176 = 0 && R7177 = R7179 && R7178 = 0 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R6439 + -1*R6437 - R53 < 1 && -1 < R7095 && 0 < R7179 && (R48 + R3895 + R3892 != 0 || ((R42 + R72 + R70 != 0 || R43 + R73 + R71 + -1*R6439 + -1*R6437 - R53 = 0 || R53 + R6439 + R6437 < 1) && (R42 + R72 + R70 = 0 || R53 + R6439 + R6437 < 1))) && (R48 + R3895 + R3892 != 0 || ((R46 + R3893 + R3890 != 0 || R47 + R3894 + R3891 + -1*R6439 + -1*R6437 - R53 = 0 || R53 + R6439 + R6437 < 1) && (R46 + R3893 + R3890 = 0 || R53 + R6439 + R6437 < 1))) && (R7080 != 0 || R7081 = R7095 || (R17 = 0 && R7095 = 0)) && (R7082 != 0 || R7083 = R7095 || (R17 = 0 && R7095 = 0)) && (R7084 != 0 || R7085 = R7095 || (R17 = 0 && R7095 = 0)) && (R7086 != 0 || R7087 = R7095 || (R17 = 0 && R7095 = 0)) && (R7088 != 0 || R7089 = R7095 || (R17 = 0 && R7095 = 0)) && (R7090 != 0 || R7091 = R7095 || (R17 = 0 && R7095 = 0)) && (R7092 != 0 || R7093 = R7095 || (R17 = 0 && R7095 = 0)) && (R7096 != 0 || R7095 = R7097 || (R17 = 0 && R7095 = 0)) && (R7098 != 0 || R7095 = R7099 || (R17 = 0 && R7095 = 0)) && (R18 = 0 || (R7118 = 0 && R7119 = 0)) && (R18 = 0 || (R7122 = 0 && R7123 = 0)) && (R18 = 0 || (R7124 = 0 && R7125 = 0)) && (R18 = 0 || (R7126 = 0 && R7127 = 0)) && (R18 = 0 || (R7130 = 0 && R7131 = 0)) && (R19 = 0 || (R7100 = 0 && R7101 = 0)) && (R19 = 0 || (R7102 = 0 && R7103 = 0)) && (R19 = 0 || (R7104 = 0 && R7105 = 0)) && (R19 = 0 || (R7106 = 0 && R7107 = 0)) && (R19 = 0 || (R7108 = 0 && R7109 = 0)) && (R19 = 0 || (R7110 = 0 && R7111 = 0)) && (R19 = 0 || (R7112 = 0 && R7113 = 0)) && (R19 = 0 || (R7114 = 0 && R7115 = 0)) && (R19 = 0 || (R7116 = 0 && R7117 = 0)) && (R48 + R3895 + R3892 = 0 || (R42 + R72 + R70 = 0 && R43 + R73 + R71 + -1*R6439 + -1*R6437 - R53 = 0)) && (R48 + R3895 + R3892 = 0 || (R46 + R3893 + R3890 = 0 && R47 + R3894 + R3891 + -1*R6439 + -1*R6437 - R53 = 0)) && (R58 + R6867 + R6864 = 0 || (R56 + R6865 + R6862 = 0 && R57 + R6866 + R6863 = 0)) && (R58 + R6867 + R6864 = 0 || (R62 + R7078 + R7076 = 0 && R63 + R7079 + R7077 = 0)) && (R7080 = 0 || (R17 = 0 && R7095 = 0)) && (R7082 = 0 || (R17 = 0 && R7095 = 0)) && (R7084 = 0 || (R17 = 0 && R7095 = 0)) && (R7086 = 0 || (R17 = 0 && R7095 = 0)) && (R7088 = 0 || (R17 = 0 && R7095 = 0)) && (R7090 = 0 || (R17 = 0 && R7095 = 0)) && (R7092 = 0 || (R17 = 0 && R7095 = 0)) && (R7096 = 0 || (R17 = 0 && R7095 = 0)) && (R7098 = 0 || (R17 = 0 && R7095 = 0));
// End of Parikh automata intersection problem
