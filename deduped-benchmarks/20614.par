// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R11522, R11523, R11524, R11525, R11526, R11527, R11528, R11529, R11530, R11531, R11532, R11533, R11534, R11535, R11536, R11537, R11538, R11539, R11540, R11541, R11646, R11647, R11648, R11649, R11650, R11651, R11652, R11653, R11654, R11655, R11656, R11657, R11658, R11659, R11660, R11661, R11662, R11663, R11664, R11665, R11666, R11667, R11668, R11669, R11670, R11671, R11672, R11673, R11674, R11675, R11676, R11677, R11678, R11679, R11680, R11681, R11682, R11683, R11684, R11685, R11686, R11687, R11688, R11689, R11690, R11691, R11692, R11693, R11694, R11695, R11696, R11697, R11698, R11699, R11700, R11701, R11702, R11703, R11704, R11705, R11706, R11707, R11708, R11709, R11710, R11711, R11712, R11713, R11714, R11715, R11716, R11717, R11718, R11719, R11720, R11721, R11722, R11723, R11724, R11725, R11726, R11727, R11728, R11729, R11730, R11731, R11732, R11733, R11734, R11735, R11736, R11737, R11738, R11739, R11740, R11741, R11742, R11743, R11744, R11745, R11746, R11747, R11748, R11749, R12, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [84, 84];
  s0 -> s0 [85, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [84, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 83];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [84, 84];
  s0 -> s1 [85, 65535];
  s1 -> s1 [0, 83];
  s1 -> s2 [84, 84];
  s1 -> s1 [85, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R21 += 1 };
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s1 [0, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R11670 += 1, R11671 += 1 };
  s0 -> s1 [0, 65535] { R11671 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R11671 += 1, R19 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 83] { R11673 += 1 };
  s0 -> s0 [0, 65535] { R11672 += 1, R11673 += 1 };
  s0 -> s2 [84, 84] { R11673 += 1 };
  s0 -> s3 [84, 84] { R11673 += 1 };
  s0 -> s1 [86, 65535] { R11673 += 1 };
  s1 -> s1 [0, 83] { R11673 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R11673 += 1 };
  s1 -> s3 [84, 84] { R11673 += 1 };
  s1 -> s1 [86, 65535] { R11673 += 1 };
  s2 -> s2 [0, 84] { R11673 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [86, 65535] { R11673 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 83] { R11675 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R11674 += 1, R11675 += 1 };
  s0 -> s2 [84, 84] { R11675 += 1, R38 += 1 };
  s0 -> s3 [84, 84] { R11675 += 1, R38 += 1 };
  s0 -> s1 [85, 65535] { R11675 += 1, R38 += 1 };
  s1 -> s1 [0, 83] { R11675 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R11675 += 1, R38 += 1 };
  s1 -> s3 [84, 84] { R11675 += 1, R38 += 1 };
  s1 -> s1 [85, 65535] { R11675 += 1, R38 += 1 };
  s2 -> s2 [0, 65535] { R11675 += 1, R38 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 83] { R11677 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R11676 += 1, R11677 += 1 };
  s0 -> s2 [84, 84] { R11677 += 1, R40 += 1 };
  s0 -> s3 [84, 84] { R11677 += 1, R40 += 1 };
  s0 -> s1 [85, 65535] { R11677 += 1, R40 += 1 };
  s1 -> s1 [0, 83] { R11677 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R11677 += 1, R40 += 1 };
  s1 -> s3 [84, 84] { R11677 += 1, R40 += 1 };
  s1 -> s1 [85, 65535] { R11677 += 1, R40 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R11677 += 1, R40 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 83] { R11679 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R11678 += 1, R11679 += 1 };
  s0 -> s2 [84, 84] { R11679 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [84, 84] { R11679 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [85, 65535] { R11679 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 83] { R11679 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R11679 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [84, 84] { R11679 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [85, 65535] { R11679 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535] { R11679 += 1, R42 += 1, R43 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 83] { R11681 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R11680 += 1, R11681 += 1 };
  s0 -> s2 [84, 84] { R11681 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [84, 84] { R11681 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [85, 65535] { R11681 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 83] { R11681 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R11681 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [84, 84] { R11681 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [85, 65535] { R11681 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R11681 += 1, R46 += 1, R47 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 83] { R11683 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R11682 += 1, R11683 += 1 };
  s0 -> s2 [84, 84] { R11683 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [84, 84] { R11683 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [85, 65535] { R11683 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 83] { R11683 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R11683 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [84, 84] { R11683 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [85, 65535] { R11683 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R11683 += 1, R52 += 1, R53 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 83] { R11685 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R11684 += 1, R11685 += 1 };
  s0 -> s2 [84, 84] { R11685 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [84, 84] { R11685 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [85, 65535] { R11685 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 83] { R11685 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R11685 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [84, 84] { R11685 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [85, 65535] { R11685 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R11685 += 1, R56 += 1, R57 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 83] { R11687 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R11686 += 1, R11687 += 1 };
  s0 -> s2 [84, 84] { R11687 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [84, 84] { R11687 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [85, 65535] { R11687 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 83] { R11687 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R11687 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [84, 84] { R11687 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [85, 65535] { R11687 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535] { R11687 += 1, R62 += 1, R63 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 83] { R11707 += 1 };
  s0 -> s0 [0, 65535] { R11706 += 1, R11707 += 1 };
  s0 -> s2 [84, 84] { R11707 += 1 };
  s0 -> s1 [85, 65535] { R11707 += 1 };
  s1 -> s1 [0, 83] { R11707 += 1 };
  s1 -> s2 [84, 84] { R11707 += 1 };
  s1 -> s1 [85, 65535] { R11707 += 1 };
  s2 -> s2 [0, 65535] { R11707 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R11709 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R11708 += 1, R11709 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R11709 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 83] { R11711 += 1 };
  s0 -> s2 [0, 65535] { R11711 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R11710 += 1, R11711 += 1 };
  s0 -> s3 [84, 84] { R11711 += 1 };
  s0 -> s1 [85, 65535] { R11711 += 1 };
  s1 -> s1 [0, 83] { R11711 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [84, 84] { R11711 += 1 };
  s1 -> s1 [85, 65535] { R11711 += 1 };
  s2 -> s1 [0, 83] { R11711 += 1 };
  s2 -> s2 [0, 65535] { R11711 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [84, 84] { R11711 += 1 };
  s2 -> s1 [85, 65535] { R11711 += 1 };
  s3 -> s3 [0, 65535] { R11711 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 83] { R11713 += 1, R11651 += 1 };
  s0 -> s2 [0, 65535] { R11713 += 1, R11650 += 1, R11651 += 1 };
  s0 -> s0 [0, 65535] { R11712 += 1, R11713 += 1 };
  s0 -> s1 [85, 65535] { R11713 += 1, R11651 += 1 };
  s1 -> s1 [0, 83] { R11713 += 1, R11651 += 1 };
  s1 -> s1 [0, 65535] { R11713 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [85, 65535] { R11713 += 1, R11651 += 1 };
  s2 -> s1 [0, 83] { R11713 += 1, R11651 += 1 };
  s2 -> s2 [0, 65535] { R11713 += 1, R11650 += 1, R11651 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [85, 65535] { R11713 += 1, R11651 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R11715 += 1, R11653 += 1, R17 += 1 };
  s0 -> s0 [0, 65535] { R11714 += 1, R11715 += 1 };
  s0 -> s2 [0, 65535] { R11715 += 1, R11652 += 1, R11653 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R11715 += 1, R11653 += 1, R17 += 1 };
  s1 -> s4 [0, 65535] { R11715 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R11715 += 1, R11653 += 1, R17 += 1 };
  s2 -> s2 [0, 65535] { R11715 += 1, R11652 += 1, R11653 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R11715 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 65535] { R11717 += 1, R11655 += 1 };
  s0 -> s0 [0, 65535] { R11716 += 1, R11717 += 1 };
  s0 -> s2 [0, 65535] { R11717 += 1, R11654 += 1, R11655 += 1 };
  s1 -> s4 [0, 65535] { R11717 += 1 };
  s1 -> s1 [0, 65535] { R11717 += 1, R11655 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R11717 += 1, R11655 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R11717 += 1, R11654 += 1, R11655 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R11717 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R11719 += 1, R11657 += 1, R67 += 1 };
  s0 -> s2 [0, 65535] { R11719 += 1, R11656 += 1, R11657 += 1 };
  s0 -> s0 [0, 65535] { R11718 += 1, R11719 += 1 };
  s1 -> s1 [0, 65535] { R11719 += 1, R11657 += 1, R67 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R11719 += 1 };
  s2 -> s1 [0, 65535] { R11719 += 1, R11657 += 1, R67 += 1 };
  s2 -> s2 [0, 65535] { R11719 += 1, R11656 += 1, R11657 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R11719 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 84] { R11721 += 1, R11659 += 1 };
  s0 -> s2 [0, 65535] { R11721 += 1, R11658 += 1, R11659 += 1 };
  s0 -> s0 [0, 65535] { R11720 += 1, R11721 += 1 };
  s0 -> s3 [0, 65535] { R11721 += 1, R11659 += 1, R69 += 1 };
  s0 -> s1 [86, 65535] { R11721 += 1, R11659 += 1 };
  s1 -> s1 [0, 84] { R11721 += 1, R11659 += 1 };
  s1 -> s1 [0, 65535] { R11721 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [86, 65535] { R11721 += 1, R11659 += 1 };
  s2 -> s1 [0, 84] { R11721 += 1, R11659 += 1 };
  s2 -> s2 [0, 65535] { R11721 += 1, R11658 += 1, R11659 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R11721 += 1, R11659 += 1, R69 += 1 };
  s2 -> s1 [86, 65535] { R11721 += 1, R11659 += 1 };
  s3 -> s1 [0, 84] { R11721 += 1, R11659 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R11721 += 1, R11659 += 1, R69 += 1 };
  s3 -> s5 [0, 65535] { R11721 += 1 };
  s3 -> s1 [86, 65535] { R11721 += 1, R11659 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R11721 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 84] { R11723 += 1, R11661 += 1, R11525 += 1 };
  s0 -> s0 [0, 65535] { R11722 += 1, R11723 += 1 };
  s0 -> s2 [0, 65535] { R11723 += 1, R11660 += 1, R11661 += 1 };
  s0 -> s1 [0, 65535] { R11723 += 1, R11661 += 1 };
  s0 -> s1 [86, 65535] { R11723 += 1, R11661 += 1, R11525 += 1 };
  s1 -> s1 [0, 84] { R11723 += 1, R11661 += 1, R11525 += 1 };
  s1 -> s4 [0, 65535] { R11723 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R11723 += 1, R11661 += 1 };
  s1 -> s1 [86, 65535] { R11723 += 1, R11661 += 1, R11525 += 1 };
  s2 -> s1 [0, 84] { R11723 += 1, R11661 += 1, R11525 += 1 };
  s2 -> s2 [0, 65535] { R11723 += 1, R11660 += 1, R11661 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R11723 += 1, R11661 += 1 };
  s2 -> s1 [86, 65535] { R11723 += 1, R11661 += 1, R11525 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R11723 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s0 [0, 65535] { R11724 += 1, R11725 += 1 };
  s0 -> s1 [0, 65535] { R11725 += 1, R11663 += 1, R11529 += 1, R11530 += 1 };
  s0 -> s2 [0, 65535] { R11725 += 1, R11662 += 1, R11663 += 1 };
  s0 -> s3 [0, 65535] { R11725 += 1, R11663 += 1, R11530 += 1, R11531 += 1 };
  s1 -> s4 [0, 65535] { R11725 += 1 };
  s1 -> s1 [0, 65535] { R11725 += 1, R11663 += 1, R11529 += 1, R11530 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [0, 65535] { R11725 += 1, R11663 += 1, R11530 += 1, R11531 += 1 };
  s2 -> s1 [0, 65535] { R11725 += 1, R11663 += 1, R11529 += 1, R11530 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R11725 += 1, R11662 += 1, R11663 += 1 };
  s2 -> s3 [0, 65535] { R11725 += 1, R11663 += 1, R11530 += 1, R11531 += 1 };
  s3 -> s4 [0, 65535] { R11725 += 1 };
  s3 -> s5 [0, 65535] { R11725 += 1, R11663 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R11725 += 1, R11663 += 1, R11530 += 1, R11531 += 1 };
  s4 -> s4 [0, 65535] { R11725 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s4 [0, 65535] { R11725 += 1 };
  s5 -> s5 [0, 65535] { R11725 += 1, R11663 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 85] { R11727 += 1, R11665 += 1, R11535 += 1 };
  s0 -> s0 [0, 65535] { R11726 += 1, R11727 += 1 };
  s0 -> s1 [0, 65535] { R11727 += 1, R11665 += 1 };
  s0 -> s2 [0, 65535] { R11727 += 1, R11664 += 1, R11665 += 1 };
  s0 -> s1 [87, 65535] { R11727 += 1, R11665 += 1, R11535 += 1 };
  s1 -> s1 [0, 85] { R11727 += 1, R11665 += 1, R11535 += 1 };
  s1 -> s4 [0, 65535] { R11727 += 1 };
  s1 -> s1 [0, 65535] { R11727 += 1, R11665 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [87, 65535] { R11727 += 1, R11665 += 1, R11535 += 1 };
  s2 -> s1 [0, 85] { R11727 += 1, R11665 += 1, R11535 += 1 };
  s2 -> s1 [0, 65535] { R11727 += 1, R11665 += 1 };
  s2 -> s2 [0, 65535] { R11727 += 1, R11664 += 1, R11665 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [87, 65535] { R11727 += 1, R11665 += 1, R11535 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R11727 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R11729 += 1, R11667 += 1, R11540 += 1, R11541 += 1 };
  s0 -> s2 [0, 65535] { R11729 += 1, R11666 += 1, R11667 += 1 };
  s0 -> s0 [0, 65535] { R11728 += 1, R11729 += 1 };
  s0 -> s3 [0, 65535] { R11729 += 1, R11667 += 1, R11539 += 1, R11540 += 1 };
  s1 -> s1 [0, 65535] { R11729 += 1, R11667 += 1, R11540 += 1, R11541 += 1 };
  s1 -> s6 [0, 65535] { R11729 += 1, R11667 += 1 };
  s1 -> s4 [0, 65535] { R11729 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R11729 += 1, R11667 += 1, R11540 += 1, R11541 += 1 };
  s2 -> s2 [0, 65535] { R11729 += 1, R11666 += 1, R11667 += 1 };
  s2 -> s3 [0, 65535] { R11729 += 1, R11667 += 1, R11539 += 1, R11540 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s1 [0, 65535] { R11729 += 1, R11667 += 1, R11540 += 1, R11541 += 1 };
  s3 -> s4 [0, 65535] { R11729 += 1 };
  s3 -> s3 [0, 65535] { R11729 += 1, R11667 += 1, R11539 += 1, R11540 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R11729 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R11729 += 1, R11667 += 1 };
  s6 -> s4 [0, 65535] { R11729 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 84] { R11731 += 1, R11669 += 1, R11649 += 1 };
  s0 -> s1 [0, 65535] { R11731 += 1, R11669 += 1 };
  s0 -> s2 [0, 65535] { R11731 += 1, R11668 += 1, R11669 += 1 };
  s0 -> s0 [0, 65535] { R11730 += 1, R11731 += 1 };
  s0 -> s3 [85, 85] { R11731 += 1, R11669 += 1, R11649 += 1 };
  s0 -> s4 [85, 85] { R11731 += 1, R11669 += 1, R11649 += 1 };
  s0 -> s1 [88, 65535] { R11731 += 1, R11669 += 1, R11649 += 1 };
  s1 -> s1 [0, 84] { R11731 += 1, R11669 += 1, R11649 += 1 };
  s1 -> s1 [0, 65535] { R11731 += 1, R11669 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R11731 += 1 };
  s1 -> s3 [85, 85] { R11731 += 1, R11669 += 1, R11649 += 1 };
  s1 -> s4 [85, 85] { R11731 += 1, R11669 += 1, R11649 += 1 };
  s1 -> s1 [88, 65535] { R11731 += 1, R11669 += 1, R11649 += 1 };
  s2 -> s1 [0, 84] { R11731 += 1, R11669 += 1, R11649 += 1 };
  s2 -> s1 [0, 65535] { R11731 += 1, R11669 += 1 };
  s2 -> s2 [0, 65535] { R11731 += 1, R11668 += 1, R11669 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [85, 85] { R11731 += 1, R11669 += 1, R11649 += 1 };
  s2 -> s4 [85, 85] { R11731 += 1, R11669 += 1, R11649 += 1 };
  s2 -> s1 [88, 65535] { R11731 += 1, R11669 += 1, R11649 += 1 };
  s3 -> s3 [0, 65535] { R11731 += 1, R11669 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R11731 += 1 };
  s4 -> s4 [0, 85] { R11731 += 1, R11669 += 1, R11649 += 1 };
  s4 -> s4 [0, 65535] { R11731 += 1, R11669 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R11731 += 1 };
  s4 -> s4 [88, 65535] { R11731 += 1, R11669 += 1, R11649 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R11731 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s0 [0, 65535] { R11732 += 1, R11733 += 1 };
  s0 -> s1 [0, 65535] { R11733 += 1, R11688 += 1, R11689 += 1 };
  s0 -> s2 [0, 65535] { R11733 += 1, R11689 += 1, R18 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R11733 += 1, R11688 += 1, R11689 += 1 };
  s1 -> s2 [0, 65535] { R11733 += 1, R11689 += 1, R18 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R11733 += 1, R11689 += 1, R18 += 1 };
  s2 -> s4 [0, 65535] { R11733 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R11733 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 83] { R11735 += 1, R11691 += 1 };
  s0 -> s0 [0, 65535] { R11734 += 1, R11735 += 1 };
  s0 -> s2 [0, 65535] { R11735 += 1, R11690 += 1, R11691 += 1 };
  s0 -> s3 [84, 84] { R11735 += 1, R11691 += 1 };
  s0 -> s4 [84, 84] { R11735 += 1, R11691 += 1 };
  s0 -> s5 [85, 85] { R11735 += 1, R11691 += 1 };
  s0 -> s1 [86, 65535] { R11735 += 1, R11691 += 1 };
  s1 -> s1 [0, 83] { R11735 += 1, R11691 += 1 };
  s1 -> s3 [84, 84] { R11735 += 1, R11691 += 1 };
  s1 -> s4 [84, 84] { R11735 += 1, R11691 += 1 };
  s1 -> s5 [85, 85] { R11735 += 1, R11691 += 1 };
  s1 -> s1 [86, 65535] { R11735 += 1, R11691 += 1 };
  s2 -> s1 [0, 83] { R11735 += 1, R11691 += 1 };
  s2 -> s2 [0, 65535] { R11735 += 1, R11690 += 1, R11691 += 1 };
  s2 -> s3 [84, 84] { R11735 += 1, R11691 += 1 };
  s2 -> s4 [84, 84] { R11735 += 1, R11691 += 1 };
  s2 -> s5 [85, 85] { R11735 += 1, R11691 += 1 };
  s2 -> s1 [86, 65535] { R11735 += 1, R11691 += 1 };
  s3 -> s3 [0, 84] { R11735 += 1, R11691 += 1 };
  s3 -> s7 [85, 85] { R11735 += 1, R11691 += 1 };
  s3 -> s3 [86, 65535] { R11735 += 1, R11691 += 1 };
  s5 -> s5 [0, 83] { R11735 += 1, R11691 += 1 };
  s5 -> s5 [0, 65535] { R11735 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [84, 84] { R11735 += 1, R11691 += 1 };
  s5 -> s8 [84, 84] { R11735 += 1, R11691 += 1 };
  s5 -> s5 [85, 65535] { R11735 += 1, R11691 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R11735 += 1, R11691 += 1 };
  s7 -> s9 [0, 65535] { R11735 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R11735 += 1 };
  s8 -> s6 [0, 65535];
  s9 -> s9 [0, 65535] { R11735 += 1 };
  s9 -> s6 [0, 65535];
  accepting s8, s5, s9, s6, s7;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 83] { R11737 += 1, R11693 += 1, R66 += 1 };
  s0 -> s2 [0, 65535] { R11737 += 1, R11692 += 1, R11693 += 1 };
  s0 -> s0 [0, 65535] { R11736 += 1, R11737 += 1 };
  s0 -> s3 [84, 84] { R11737 += 1, R11693 += 1, R66 += 1 };
  s0 -> s4 [84, 84] { R11737 += 1, R11693 += 1, R66 += 1 };
  s0 -> s1 [85, 65535] { R11737 += 1, R11693 += 1, R66 += 1 };
  s1 -> s1 [0, 83] { R11737 += 1, R11693 += 1, R66 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R11737 += 1 };
  s1 -> s3 [84, 84] { R11737 += 1, R11693 += 1, R66 += 1 };
  s1 -> s4 [84, 84] { R11737 += 1, R11693 += 1, R66 += 1 };
  s1 -> s1 [85, 65535] { R11737 += 1, R11693 += 1, R66 += 1 };
  s2 -> s1 [0, 83] { R11737 += 1, R11693 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R11737 += 1, R11692 += 1, R11693 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [84, 84] { R11737 += 1, R11693 += 1, R66 += 1 };
  s2 -> s4 [84, 84] { R11737 += 1, R11693 += 1, R66 += 1 };
  s2 -> s1 [85, 65535] { R11737 += 1, R11693 += 1, R66 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R11737 += 1 };
  s3 -> s3 [0, 65535] { R11737 += 1, R11693 += 1, R66 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R11737 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R11737 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 83] { R11739 += 1, R11695 += 1, R68 += 1 };
  s0 -> s0 [0, 65535] { R11738 += 1, R11739 += 1 };
  s0 -> s2 [0, 65535] { R11739 += 1, R11694 += 1, R11695 += 1 };
  s0 -> s3 [84, 84] { R11739 += 1, R11695 += 1, R68 += 1 };
  s0 -> s4 [84, 84] { R11739 += 1, R11695 += 1, R68 += 1 };
  s0 -> s1 [85, 65535] { R11739 += 1, R11695 += 1, R68 += 1 };
  s1 -> s1 [0, 83] { R11739 += 1, R11695 += 1, R68 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R11739 += 1 };
  s1 -> s3 [84, 84] { R11739 += 1, R11695 += 1, R68 += 1 };
  s1 -> s4 [84, 84] { R11739 += 1, R11695 += 1, R68 += 1 };
  s1 -> s1 [85, 65535] { R11739 += 1, R11695 += 1, R68 += 1 };
  s2 -> s1 [0, 83] { R11739 += 1, R11695 += 1, R68 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R11739 += 1, R11694 += 1, R11695 += 1 };
  s2 -> s3 [84, 84] { R11739 += 1, R11695 += 1, R68 += 1 };
  s2 -> s4 [84, 84] { R11739 += 1, R11695 += 1, R68 += 1 };
  s2 -> s1 [85, 65535] { R11739 += 1, R11695 += 1, R68 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R11739 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R11739 += 1, R11695 += 1, R68 += 1 };
  s4 -> s6 [0, 65535] { R11739 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R11739 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 83] { R11741 += 1, R11697 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s2 [0, 83] { R11741 += 1, R11697 += 1, R11523 += 1 };
  s0 -> s0 [0, 65535] { R11740 += 1, R11741 += 1 };
  s0 -> s3 [0, 65535] { R11741 += 1, R11696 += 1, R11697 += 1 };
  s0 -> s4 [84, 84] { R11741 += 1, R11697 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s5 [84, 84] { R11741 += 1, R11697 += 1, R11523 += 1 };
  s0 -> s6 [84, 84] { R11741 += 1, R11697 += 1, R11523 += 1 };
  s0 -> s7 [84, 84] { R11741 += 1, R11697 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s1 [85, 65535] { R11741 += 1, R11697 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s2 [86, 65535] { R11741 += 1, R11697 += 1, R11523 += 1 };
  s1 -> s1 [0, 83] { R11741 += 1, R11697 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s2 [0, 83] { R11741 += 1, R11697 += 1, R11523 += 1 };
  s1 -> s4 [84, 84] { R11741 += 1, R11697 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s5 [84, 84] { R11741 += 1, R11697 += 1, R11523 += 1 };
  s1 -> s6 [84, 84] { R11741 += 1, R11697 += 1, R11523 += 1 };
  s1 -> s7 [84, 84] { R11741 += 1, R11697 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s1 [85, 65535] { R11741 += 1, R11697 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s2 [86, 65535] { R11741 += 1, R11697 += 1, R11523 += 1 };
  s2 -> s2 [0, 83] { R11741 += 1, R11697 += 1, R11523 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R11741 += 1 };
  s2 -> s5 [84, 84] { R11741 += 1, R11697 += 1 };
  s2 -> s6 [84, 84] { R11741 += 1, R11697 += 1 };
  s2 -> s2 [85, 65535] { R11741 += 1, R11697 += 1 };
  s2 -> s2 [86, 65535] { R11741 += 1, R11697 += 1, R11523 += 1 };
  s3 -> s1 [0, 83] { R11741 += 1, R11697 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s2 [0, 83] { R11741 += 1, R11697 += 1, R11523 += 1 };
  s3 -> s3 [0, 65535] { R11741 += 1, R11696 += 1, R11697 += 1 };
  s3 -> s4 [84, 84] { R11741 += 1, R11697 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s5 [84, 84] { R11741 += 1, R11697 += 1, R11523 += 1 };
  s3 -> s6 [84, 84] { R11741 += 1, R11697 += 1, R11523 += 1 };
  s3 -> s7 [84, 84] { R11741 += 1, R11697 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s1 [85, 65535] { R11741 += 1, R11697 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s2 [86, 65535] { R11741 += 1, R11697 += 1, R11523 += 1 };
  s4 -> s6 [0, 84] { R11741 += 1, R11697 += 1, R11523 += 1 };
  s4 -> s4 [0, 65535] { R11741 += 1, R11697 += 1, R11522 += 1, R11523 += 1 };
  s4 -> s6 [86, 65535] { R11741 += 1, R11697 += 1, R11523 += 1 };
  s5 -> s5 [0, 65535] { R11741 += 1 };
  s5 -> s8 [0, 65535];
  s6 -> s6 [0, 84] { R11741 += 1, R11697 += 1, R11523 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s9 [0, 65535] { R11741 += 1 };
  s6 -> s6 [0, 65535] { R11741 += 1, R11697 += 1 };
  s6 -> s6 [86, 65535] { R11741 += 1, R11697 += 1, R11523 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R11741 += 1 };
  accepting s8, s5, s2, s9, s6;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 83] { R11743 += 1, R11699 += 1, R11526 += 1, R11527 += 1 };
  s0 -> s0 [0, 65535] { R11742 += 1, R11743 += 1 };
  s0 -> s2 [0, 65535] { R11743 += 1, R11698 += 1, R11699 += 1 };
  s0 -> s3 [84, 84] { R11743 += 1, R11699 += 1, R11526 += 1, R11527 += 1 };
  s0 -> s4 [84, 84] { R11743 += 1, R11699 += 1, R11526 += 1, R11527 += 1 };
  s0 -> s1 [85, 65535] { R11743 += 1, R11699 += 1, R11526 += 1, R11527 += 1 };
  s1 -> s1 [0, 83] { R11743 += 1, R11699 += 1, R11526 += 1, R11527 += 1 };
  s1 -> s1 [0, 65535] { R11743 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [84, 84] { R11743 += 1, R11699 += 1, R11526 += 1, R11527 += 1 };
  s1 -> s4 [84, 84] { R11743 += 1, R11699 += 1, R11526 += 1, R11527 += 1 };
  s1 -> s1 [85, 65535] { R11743 += 1, R11699 += 1, R11526 += 1, R11527 += 1 };
  s2 -> s1 [0, 83] { R11743 += 1, R11699 += 1, R11526 += 1, R11527 += 1 };
  s2 -> s2 [0, 65535] { R11743 += 1, R11698 += 1, R11699 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [84, 84] { R11743 += 1, R11699 += 1, R11526 += 1, R11527 += 1 };
  s2 -> s4 [84, 84] { R11743 += 1, R11699 += 1, R11526 += 1, R11527 += 1 };
  s2 -> s1 [85, 65535] { R11743 += 1, R11699 += 1, R11526 += 1, R11527 += 1 };
  s3 -> s3 [0, 65535] { R11743 += 1, R11699 += 1, R11526 += 1, R11527 += 1 };
  s3 -> s6 [0, 65535] { R11743 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R11743 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R11743 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 83] { R11745 += 1, R11701 += 1, R11533 += 1 };
  s0 -> s2 [0, 83] { R11745 += 1, R11701 += 1, R11532 += 1, R11533 += 1 };
  s0 -> s0 [0, 65535] { R11744 += 1, R11745 += 1 };
  s0 -> s3 [0, 65535] { R11745 += 1, R11700 += 1, R11701 += 1 };
  s0 -> s4 [84, 84] { R11745 += 1, R11701 += 1, R11532 += 1, R11533 += 1 };
  s0 -> s5 [84, 84] { R11745 += 1, R11701 += 1, R11532 += 1, R11533 += 1 };
  s0 -> s6 [84, 84] { R11745 += 1, R11701 += 1, R11533 += 1 };
  s0 -> s7 [84, 84] { R11745 += 1, R11701 += 1, R11533 += 1 };
  s0 -> s1 [85, 85] { R11745 += 1, R11701 += 1, R11533 += 1 };
  s0 -> s2 [85, 65535] { R11745 += 1, R11701 += 1, R11532 += 1, R11533 += 1 };
  s0 -> s8 [87, 87] { R11745 += 1, R11701 += 1, R11533 += 1 };
  s0 -> s1 [88, 65535] { R11745 += 1, R11701 += 1, R11533 += 1 };
  s1 -> s1 [0, 83] { R11745 += 1, R11701 += 1, R11533 += 1 };
  s1 -> s6 [84, 84] { R11745 += 1, R11701 += 1, R11533 += 1 };
  s1 -> s7 [84, 84] { R11745 += 1, R11701 += 1, R11533 += 1 };
  s1 -> s1 [85, 85] { R11745 += 1, R11701 += 1, R11533 += 1 };
  s1 -> s8 [87, 87] { R11745 += 1, R11701 += 1, R11533 += 1 };
  s1 -> s1 [88, 65535] { R11745 += 1, R11701 += 1, R11533 += 1 };
  s2 -> s1 [0, 83] { R11745 += 1, R11701 += 1, R11533 += 1 };
  s2 -> s2 [0, 83] { R11745 += 1, R11701 += 1, R11532 += 1, R11533 += 1 };
  s2 -> s4 [84, 84] { R11745 += 1, R11701 += 1, R11532 += 1, R11533 += 1 };
  s2 -> s5 [84, 84] { R11745 += 1, R11701 += 1, R11532 += 1, R11533 += 1 };
  s2 -> s6 [84, 84] { R11745 += 1, R11701 += 1, R11533 += 1 };
  s2 -> s7 [84, 84] { R11745 += 1, R11701 += 1, R11533 += 1 };
  s2 -> s1 [85, 85] { R11745 += 1, R11701 += 1, R11533 += 1 };
  s2 -> s2 [85, 65535] { R11745 += 1, R11701 += 1, R11532 += 1, R11533 += 1 };
  s2 -> s8 [87, 87] { R11745 += 1, R11701 += 1, R11533 += 1 };
  s2 -> s1 [88, 65535] { R11745 += 1, R11701 += 1, R11533 += 1 };
  s3 -> s1 [0, 83] { R11745 += 1, R11701 += 1, R11533 += 1 };
  s3 -> s2 [0, 83] { R11745 += 1, R11701 += 1, R11532 += 1, R11533 += 1 };
  s3 -> s3 [0, 65535] { R11745 += 1, R11700 += 1, R11701 += 1 };
  s3 -> s4 [84, 84] { R11745 += 1, R11701 += 1, R11532 += 1, R11533 += 1 };
  s3 -> s5 [84, 84] { R11745 += 1, R11701 += 1, R11532 += 1, R11533 += 1 };
  s3 -> s6 [84, 84] { R11745 += 1, R11701 += 1, R11533 += 1 };
  s3 -> s7 [84, 84] { R11745 += 1, R11701 += 1, R11533 += 1 };
  s3 -> s1 [85, 85] { R11745 += 1, R11701 += 1, R11533 += 1 };
  s3 -> s2 [85, 65535] { R11745 += 1, R11701 += 1, R11532 += 1, R11533 += 1 };
  s3 -> s8 [87, 87] { R11745 += 1, R11701 += 1, R11533 += 1 };
  s3 -> s1 [88, 65535] { R11745 += 1, R11701 += 1, R11533 += 1 };
  s4 -> s6 [0, 85] { R11745 += 1, R11701 += 1, R11533 += 1 };
  s4 -> s4 [0, 65535] { R11745 += 1, R11701 += 1, R11532 += 1, R11533 += 1 };
  s4 -> s11 [87, 87] { R11745 += 1, R11701 += 1, R11533 += 1 };
  s4 -> s6 [88, 65535] { R11745 += 1, R11701 += 1, R11533 += 1 };
  s6 -> s6 [0, 85] { R11745 += 1, R11701 += 1, R11533 += 1 };
  s6 -> s11 [87, 87] { R11745 += 1, R11701 += 1, R11533 += 1 };
  s6 -> s6 [88, 65535] { R11745 += 1, R11701 += 1, R11533 += 1 };
  s8 -> s8 [0, 83] { R11745 += 1, R11701 += 1, R11533 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R11745 += 1 };
  s8 -> s10 [84, 84] { R11745 += 1, R11701 += 1 };
  s8 -> s11 [84, 84] { R11745 += 1, R11701 += 1 };
  s8 -> s8 [85, 85] { R11745 += 1, R11701 += 1, R11533 += 1 };
  s8 -> s8 [85, 65535] { R11745 += 1, R11701 += 1 };
  s8 -> s8 [87, 65535] { R11745 += 1, R11701 += 1, R11533 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R11745 += 1 };
  s11 -> s11 [0, 85] { R11745 += 1, R11701 += 1, R11533 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R11745 += 1, R11701 += 1 };
  s11 -> s12 [0, 65535] { R11745 += 1 };
  s11 -> s11 [87, 65535] { R11745 += 1, R11701 += 1, R11533 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R11745 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 83] { R11747 += 1, R11703 += 1, R11536 += 1, R11537 += 1 };
  s0 -> s0 [0, 65535] { R11746 += 1, R11747 += 1 };
  s0 -> s2 [0, 65535] { R11747 += 1, R11702 += 1, R11703 += 1 };
  s0 -> s3 [84, 84] { R11747 += 1, R11703 += 1, R11536 += 1, R11537 += 1 };
  s0 -> s4 [84, 84] { R11747 += 1, R11703 += 1, R11536 += 1, R11537 += 1 };
  s0 -> s1 [85, 65535] { R11747 += 1, R11703 += 1, R11536 += 1, R11537 += 1 };
  s1 -> s1 [0, 83] { R11747 += 1, R11703 += 1, R11536 += 1, R11537 += 1 };
  s1 -> s1 [0, 65535] { R11747 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [84, 84] { R11747 += 1, R11703 += 1, R11536 += 1, R11537 += 1 };
  s1 -> s4 [84, 84] { R11747 += 1, R11703 += 1, R11536 += 1, R11537 += 1 };
  s1 -> s1 [85, 65535] { R11747 += 1, R11703 += 1, R11536 += 1, R11537 += 1 };
  s2 -> s1 [0, 83] { R11747 += 1, R11703 += 1, R11536 += 1, R11537 += 1 };
  s2 -> s2 [0, 65535] { R11747 += 1, R11702 += 1, R11703 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [84, 84] { R11747 += 1, R11703 += 1, R11536 += 1, R11537 += 1 };
  s2 -> s4 [84, 84] { R11747 += 1, R11703 += 1, R11536 += 1, R11537 += 1 };
  s2 -> s1 [85, 65535] { R11747 += 1, R11703 += 1, R11536 += 1, R11537 += 1 };
  s3 -> s6 [0, 65535] { R11747 += 1 };
  s3 -> s3 [0, 65535] { R11747 += 1, R11703 += 1, R11536 += 1, R11537 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R11747 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R11747 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 83] { R11749 += 1, R11705 += 1, R11647 += 1 };
  s0 -> s2 [0, 83] { R11749 += 1, R11705 += 1, R11646 += 1, R11647 += 1 };
  s0 -> s3 [0, 65535] { R11749 += 1, R11704 += 1, R11705 += 1 };
  s0 -> s0 [0, 65535] { R11748 += 1, R11749 += 1 };
  s0 -> s4 [84, 84] { R11749 += 1, R11705 += 1, R11646 += 1, R11647 += 1 };
  s0 -> s5 [84, 84] { R11749 += 1, R11705 += 1, R11647 += 1 };
  s0 -> s6 [84, 84] { R11749 += 1, R11705 += 1, R11646 += 1, R11647 += 1 };
  s0 -> s7 [84, 84] { R11749 += 1, R11705 += 1, R11647 += 1 };
  s0 -> s2 [85, 65535] { R11749 += 1, R11705 += 1, R11646 += 1, R11647 += 1 };
  s0 -> s1 [88, 65535] { R11749 += 1, R11705 += 1, R11647 += 1 };
  s1 -> s1 [0, 83] { R11749 += 1, R11705 += 1, R11647 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s1 [0, 65535] { R11749 += 1 };
  s1 -> s5 [84, 84] { R11749 += 1, R11705 += 1 };
  s1 -> s7 [84, 84] { R11749 += 1, R11705 += 1 };
  s1 -> s1 [85, 65535] { R11749 += 1, R11705 += 1 };
  s1 -> s1 [88, 65535] { R11749 += 1, R11705 += 1, R11647 += 1 };
  s2 -> s1 [0, 83] { R11749 += 1, R11705 += 1, R11647 += 1 };
  s2 -> s2 [0, 83] { R11749 += 1, R11705 += 1, R11646 += 1, R11647 += 1 };
  s2 -> s4 [84, 84] { R11749 += 1, R11705 += 1, R11646 += 1, R11647 += 1 };
  s2 -> s5 [84, 84] { R11749 += 1, R11705 += 1, R11647 += 1 };
  s2 -> s6 [84, 84] { R11749 += 1, R11705 += 1, R11646 += 1, R11647 += 1 };
  s2 -> s7 [84, 84] { R11749 += 1, R11705 += 1, R11647 += 1 };
  s2 -> s2 [85, 65535] { R11749 += 1, R11705 += 1, R11646 += 1, R11647 += 1 };
  s2 -> s1 [88, 65535] { R11749 += 1, R11705 += 1, R11647 += 1 };
  s3 -> s1 [0, 83] { R11749 += 1, R11705 += 1, R11647 += 1 };
  s3 -> s2 [0, 83] { R11749 += 1, R11705 += 1, R11646 += 1, R11647 += 1 };
  s3 -> s3 [0, 65535] { R11749 += 1, R11704 += 1, R11705 += 1 };
  s3 -> s4 [84, 84] { R11749 += 1, R11705 += 1, R11646 += 1, R11647 += 1 };
  s3 -> s5 [84, 84] { R11749 += 1, R11705 += 1, R11647 += 1 };
  s3 -> s6 [84, 84] { R11749 += 1, R11705 += 1, R11646 += 1, R11647 += 1 };
  s3 -> s7 [84, 84] { R11749 += 1, R11705 += 1, R11647 += 1 };
  s3 -> s2 [85, 65535] { R11749 += 1, R11705 += 1, R11646 += 1, R11647 += 1 };
  s3 -> s1 [88, 65535] { R11749 += 1, R11705 += 1, R11647 += 1 };
  s4 -> s5 [0, 84] { R11749 += 1, R11705 += 1, R11647 += 1 };
  s4 -> s4 [0, 65535] { R11749 += 1, R11705 += 1, R11646 += 1, R11647 += 1 };
  s4 -> s5 [88, 65535] { R11749 += 1, R11705 += 1, R11647 += 1 };
  s5 -> s5 [0, 84] { R11749 += 1, R11705 += 1, R11647 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s5 [0, 65535] { R11749 += 1, R11705 += 1 };
  s5 -> s9 [0, 65535] { R11749 += 1 };
  s5 -> s5 [88, 65535] { R11749 += 1, R11705 += 1, R11647 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R11749 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R11749 += 1 };
  accepting s8, s5, s9, s1, s7;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [116, 116];
  accepting s1;
};
};
synchronised {  // Automata constraining P62
automaton P62_0 {
  init s0;
  s0 -> s1 [117, 117];
  accepting s1;
};
};
constraint R2 = R11749 && R20 - R11749 = -1 && R21 = R11749 && R22 - R11749 = -1 && R23 = R11749 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R11535 + -1*R11533 - R53 = 0 && R52 + R11534 + R11532 = 0 && R11690 = 0 && R11691 = 0 && R11696 = 0 && R11697 = 0 && R11700 = 0 && R11701 = 0 && R11704 = 0 && R11705 = 0 && R11706 = 0 && R11707 = R11749 && R11708 = 0 && R11709 = R11749 && R11710 = 0 && R11711 = R11749 && R11712 = 0 && R11713 = R11749 && R11714 = 0 && R11715 = R11749 && R11716 = 0 && R11717 = R11749 && R11718 = 0 && R11719 = R11749 && R11720 = 0 && R11721 = R11749 && R11722 = 0 && R11723 = R11749 && R11724 = 0 && R11725 = R11749 && R11726 = 0 && R11727 = R11749 && R11728 = 0 && R11729 = R11749 && R11730 = 0 && R11731 = R11749 && R11732 = 0 && R11733 = R11749 && R11734 = 0 && R11735 = R11749 && R11736 = 0 && R11737 = R11749 && R11738 = 0 && R11739 = R11749 && R11740 = 0 && R11741 = R11749 && R11742 = 0 && R11743 = R11749 && R11744 = 0 && R11745 = R11749 && R11746 = 0 && R11747 = R11749 && R11748 = 0 && -1 < R1 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R11535 + -1*R11533 - R53 < 1 && 0 < R11749 && (R1 != 0 || R17 = 0 || (R11650 = 0 && R11651 = 0)) && (R1 != 0 || R17 = 0 || (R11652 = 0 && R11653 = 0)) && (R1 != 0 || R17 = 0 || (R11654 = 0 && R11655 = 0)) && (R1 != 0 || R17 = 0 || (R11656 = 0 && R11657 = 0)) && (R1 != 0 || R17 = 0 || (R11658 = 0 && R11659 = 0)) && (R1 != 0 || R17 = 0 || (R11660 = 0 && R11661 = 0)) && (R1 != 0 || R17 = 0 || (R11662 = 0 && R11663 = 0)) && (R1 != 0 || R17 = 0 || (R11664 = 0 && R11665 = 0)) && (R1 != 0 || R17 = 0 || (R11666 = 0 && R11667 = 0)) && (R1 != 0 || R17 = 0 || (R11668 = 0 && R11669 = 0)) && (R48 + R11531 + R11528 != 0 || ((R42 + R11524 + R11522 != 0 || R43 + R11525 + R11523 + -1*R11535 + -1*R11533 - R53 = 0 || R53 + R11535 + R11533 < 1) && (R42 + R11524 + R11522 = 0 || R53 + R11535 + R11533 < 1))) && (R48 + R11531 + R11528 != 0 || ((R46 + R11529 + R11526 != 0 || R47 + R11530 + R11527 + -1*R11535 + -1*R11533 - R53 = 0 || R53 + R11535 + R11533 < 1) && (R46 + R11529 + R11526 = 0 || R53 + R11535 + R11533 < 1))) && (R11650 != 0 || R1 = R11651 || R1 < 1) && (R11652 != 0 || R1 = R11653 || R1 < 1) && (R11654 != 0 || R1 = R11655 || R1 < 1) && (R11656 != 0 || R1 = R11657 || R1 < 1) && (R11658 != 0 || R1 = R11659 || R1 < 1) && (R11660 != 0 || R1 = R11661 || R1 < 1) && (R11662 != 0 || R1 = R11663 || R1 < 1) && (R11664 != 0 || R1 = R11665 || R1 < 1) && (R11666 != 0 || R1 = R11667 || R1 < 1) && (R11668 != 0 || R1 = R11669 || R1 < 1) && (R18 = 0 || (R11688 = 0 && R11689 = 0)) && (R18 = 0 || (R11692 = 0 && R11693 = 0)) && (R18 = 0 || (R11694 = 0 && R11695 = 0)) && (R18 = 0 || (R11698 = 0 && R11699 = 0)) && (R18 = 0 || (R11702 = 0 && R11703 = 0)) && (R19 = 0 || (R11670 = 0 && R11671 = 0)) && (R19 = 0 || (R11672 = 0 && R11673 = 0)) && (R19 = 0 || (R11674 = 0 && R11675 = 0)) && (R19 = 0 || (R11676 = 0 && R11677 = 0)) && (R19 = 0 || (R11678 = 0 && R11679 = 0)) && (R19 = 0 || (R11680 = 0 && R11681 = 0)) && (R19 = 0 || (R11682 = 0 && R11683 = 0)) && (R19 = 0 || (R11684 = 0 && R11685 = 0)) && (R19 = 0 || (R11686 = 0 && R11687 = 0)) && (R48 + R11531 + R11528 = 0 || (R42 + R11524 + R11522 = 0 && R43 + R11525 + R11523 + -1*R11535 + -1*R11533 - R53 = 0)) && (R48 + R11531 + R11528 = 0 || (R46 + R11529 + R11526 = 0 && R47 + R11530 + R11527 + -1*R11535 + -1*R11533 - R53 = 0)) && (R58 + R11541 + R11538 = 0 || (R56 + R11539 + R11536 = 0 && R57 + R11540 + R11537 = 0)) && (R58 + R11541 + R11538 = 0 || (R62 + R11648 + R11646 = 0 && R63 + R11649 + R11647 = 0)) && (R11650 = 0 || R1 < 1) && (R11652 = 0 || R1 < 1) && (R11654 = 0 || R1 < 1) && (R11656 = 0 || R1 < 1) && (R11658 = 0 || R1 < 1) && (R11660 = 0 || R1 < 1) && (R11662 = 0 || R1 < 1) && (R11664 = 0 || R1 < 1) && (R11666 = 0 || R1 < 1) && (R11668 = 0 || R1 < 1);
// End of Parikh automata intersection problem
