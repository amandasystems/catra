// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R11522, R11523, R11524, R11525, R12, R15342, R15343, R15344, R15345, R15346, R15347, R17, R17888, R17889, R17890, R17891, R17892, R17893, R17894, R17895, R17896, R17897, R17898, R17899, R17900, R17901, R17902, R17903, R17904, R17905, R17906, R17907, R17908, R17909, R17910, R17911, R17912, R17913, R17914, R17915, R17916, R17917, R17918, R17919, R17920, R17921, R17922, R17923, R17924, R17925, R17926, R17927, R17928, R17929, R17930, R17931, R17932, R17933, R17934, R17935, R17936, R17937, R17938, R17939, R17940, R17941, R17942, R17943, R17944, R17945, R17946, R17947, R17948, R17949, R17950, R17951, R17952, R17953, R17954, R17955, R17956, R17957, R17958, R17959, R17960, R17961, R17962, R17963, R17964, R17965, R17966, R17967, R17968, R17969, R17970, R17971, R17972, R17973, R17974, R17975, R17976, R17977, R17978, R17979, R17980, R17981, R17982, R17983, R17984, R17985, R17986, R17987, R17988, R17989, R17990, R17991, R17992, R17993, R17994, R17995, R17996, R17997, R17998, R17999, R18, R18000, R18001, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [84, 84];
  s0 -> s0 [85, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [84, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 83];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [84, 84];
  s0 -> s1 [85, 65535];
  s1 -> s1 [0, 83];
  s1 -> s2 [84, 84];
  s1 -> s1 [85, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R21 += 1 };
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s1 [0, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R17923 += 1, R19 += 1 };
  s0 -> s0 [0, 65535] { R17922 += 1, R17923 += 1 };
  s1 -> s1 [0, 65535] { R17923 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 83] { R17925 += 1 };
  s0 -> s0 [0, 65535] { R17924 += 1, R17925 += 1 };
  s0 -> s2 [84, 84] { R17925 += 1 };
  s0 -> s3 [84, 84] { R17925 += 1 };
  s0 -> s1 [86, 65535] { R17925 += 1 };
  s1 -> s1 [0, 83] { R17925 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R17925 += 1 };
  s1 -> s3 [84, 84] { R17925 += 1 };
  s1 -> s1 [86, 65535] { R17925 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 84] { R17925 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [86, 65535] { R17925 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 83] { R17927 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R17926 += 1, R17927 += 1 };
  s0 -> s2 [84, 84] { R17927 += 1, R38 += 1 };
  s0 -> s3 [84, 84] { R17927 += 1, R38 += 1 };
  s0 -> s1 [85, 65535] { R17927 += 1, R38 += 1 };
  s1 -> s1 [0, 83] { R17927 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R17927 += 1, R38 += 1 };
  s1 -> s3 [84, 84] { R17927 += 1, R38 += 1 };
  s1 -> s1 [85, 65535] { R17927 += 1, R38 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R17927 += 1, R38 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 83] { R17929 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R17928 += 1, R17929 += 1 };
  s0 -> s2 [84, 84] { R17929 += 1, R40 += 1 };
  s0 -> s3 [84, 84] { R17929 += 1, R40 += 1 };
  s0 -> s1 [85, 65535] { R17929 += 1, R40 += 1 };
  s1 -> s1 [0, 83] { R17929 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R17929 += 1, R40 += 1 };
  s1 -> s3 [84, 84] { R17929 += 1, R40 += 1 };
  s1 -> s1 [85, 65535] { R17929 += 1, R40 += 1 };
  s2 -> s2 [0, 65535] { R17929 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 83] { R17931 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R17930 += 1, R17931 += 1 };
  s0 -> s2 [84, 84] { R17931 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [84, 84] { R17931 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [85, 65535] { R17931 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 83] { R17931 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R17931 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [84, 84] { R17931 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [85, 65535] { R17931 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535] { R17931 += 1, R42 += 1, R43 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 83] { R17933 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R17932 += 1, R17933 += 1 };
  s0 -> s2 [84, 84] { R17933 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [84, 84] { R17933 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [85, 65535] { R17933 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 83] { R17933 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R17933 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [84, 84] { R17933 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [85, 65535] { R17933 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R17933 += 1, R46 += 1, R47 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 83] { R17935 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R17934 += 1, R17935 += 1 };
  s0 -> s2 [84, 84] { R17935 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [84, 84] { R17935 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [85, 65535] { R17935 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 83] { R17935 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R17935 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [84, 84] { R17935 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [85, 65535] { R17935 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535] { R17935 += 1, R52 += 1, R53 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 83] { R17937 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R17936 += 1, R17937 += 1 };
  s0 -> s2 [84, 84] { R17937 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [84, 84] { R17937 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [85, 65535] { R17937 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 83] { R17937 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R17937 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [84, 84] { R17937 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [85, 65535] { R17937 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R17937 += 1, R56 += 1, R57 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 83] { R17939 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R17938 += 1, R17939 += 1 };
  s0 -> s2 [84, 84] { R17939 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [84, 84] { R17939 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [85, 65535] { R17939 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 83] { R17939 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R17939 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [84, 84] { R17939 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [85, 65535] { R17939 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535] { R17939 += 1, R62 += 1, R63 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 83] { R17959 += 1 };
  s0 -> s0 [0, 65535] { R17958 += 1, R17959 += 1 };
  s0 -> s2 [84, 84] { R17959 += 1 };
  s0 -> s1 [85, 65535] { R17959 += 1 };
  s1 -> s1 [0, 83] { R17959 += 1 };
  s1 -> s2 [84, 84] { R17959 += 1 };
  s1 -> s1 [85, 65535] { R17959 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R17959 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R17961 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R17960 += 1, R17961 += 1 };
  s1 -> s1 [0, 65535] { R17961 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 83] { R17963 += 1 };
  s0 -> s0 [0, 65535] { R17962 += 1, R17963 += 1 };
  s0 -> s2 [0, 65535] { R17963 += 1, R8 += 1 };
  s0 -> s3 [84, 84] { R17963 += 1 };
  s0 -> s1 [85, 65535] { R17963 += 1 };
  s1 -> s1 [0, 83] { R17963 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [84, 84] { R17963 += 1 };
  s1 -> s1 [85, 65535] { R17963 += 1 };
  s2 -> s1 [0, 83] { R17963 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R17963 += 1, R8 += 1 };
  s2 -> s3 [84, 84] { R17963 += 1 };
  s2 -> s1 [85, 65535] { R17963 += 1 };
  s3 -> s3 [0, 65535] { R17963 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 83] { R17965 += 1, R17903 += 1 };
  s0 -> s0 [0, 65535] { R17964 += 1, R17965 += 1 };
  s0 -> s2 [0, 65535] { R17965 += 1, R17902 += 1, R17903 += 1 };
  s0 -> s1 [85, 65535] { R17965 += 1, R17903 += 1 };
  s1 -> s1 [0, 83] { R17965 += 1, R17903 += 1 };
  s1 -> s1 [0, 65535] { R17965 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [85, 65535] { R17965 += 1, R17903 += 1 };
  s2 -> s1 [0, 83] { R17965 += 1, R17903 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R17965 += 1, R17902 += 1, R17903 += 1 };
  s2 -> s1 [85, 65535] { R17965 += 1, R17903 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s0 [0, 65535] { R17966 += 1, R17967 += 1 };
  s0 -> s1 [0, 65535] { R17967 += 1, R17904 += 1, R17905 += 1 };
  s0 -> s2 [0, 65535] { R17967 += 1, R17905 += 1, R17 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R17967 += 1, R17904 += 1, R17905 += 1 };
  s1 -> s2 [0, 65535] { R17967 += 1, R17905 += 1, R17 += 1 };
  s2 -> s3 [0, 65535] { R17967 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R17967 += 1, R17905 += 1, R17 += 1 };
  s3 -> s3 [0, 65535] { R17967 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s0 [0, 65535] { R17968 += 1, R17969 += 1 };
  s0 -> s1 [0, 65535] { R17969 += 1, R17906 += 1, R17907 += 1 };
  s0 -> s2 [0, 65535] { R17969 += 1, R17907 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R17969 += 1, R17906 += 1, R17907 += 1 };
  s1 -> s2 [0, 65535] { R17969 += 1, R17907 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R17969 += 1, R17907 += 1 };
  s2 -> s4 [0, 65535] { R17969 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R17969 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R17971 += 1, R17909 += 1, R67 += 1 };
  s0 -> s0 [0, 65535] { R17970 += 1, R17971 += 1 };
  s0 -> s2 [0, 65535] { R17971 += 1, R17908 += 1, R17909 += 1 };
  s1 -> s1 [0, 65535] { R17971 += 1, R17909 += 1, R67 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R17971 += 1 };
  s2 -> s1 [0, 65535] { R17971 += 1, R17909 += 1, R67 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R17971 += 1, R17908 += 1, R17909 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R17971 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 84] { R17973 += 1, R17911 += 1 };
  s0 -> s2 [0, 65535] { R17973 += 1, R17911 += 1, R69 += 1 };
  s0 -> s0 [0, 65535] { R17972 += 1, R17973 += 1 };
  s0 -> s3 [0, 65535] { R17973 += 1, R17910 += 1, R17911 += 1 };
  s0 -> s1 [86, 65535] { R17973 += 1, R17911 += 1 };
  s1 -> s1 [0, 84] { R17973 += 1, R17911 += 1 };
  s1 -> s1 [0, 65535] { R17973 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [86, 65535] { R17973 += 1, R17911 += 1 };
  s2 -> s1 [0, 84] { R17973 += 1, R17911 += 1 };
  s2 -> s2 [0, 65535] { R17973 += 1, R17911 += 1, R69 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R17973 += 1 };
  s2 -> s1 [86, 65535] { R17973 += 1, R17911 += 1 };
  s3 -> s1 [0, 84] { R17973 += 1, R17911 += 1 };
  s3 -> s2 [0, 65535] { R17973 += 1, R17911 += 1, R69 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R17973 += 1, R17910 += 1, R17911 += 1 };
  s3 -> s1 [86, 65535] { R17973 += 1, R17911 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R17973 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 84] { R17975 += 1, R17913 += 1, R11525 += 1 };
  s0 -> s2 [0, 65535] { R17975 += 1, R17912 += 1, R17913 += 1 };
  s0 -> s1 [0, 65535] { R17975 += 1, R17913 += 1 };
  s0 -> s0 [0, 65535] { R17974 += 1, R17975 += 1 };
  s0 -> s1 [86, 65535] { R17975 += 1, R17913 += 1, R11525 += 1 };
  s1 -> s1 [0, 84] { R17975 += 1, R17913 += 1, R11525 += 1 };
  s1 -> s1 [0, 65535] { R17975 += 1, R17913 += 1 };
  s1 -> s4 [0, 65535] { R17975 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [86, 65535] { R17975 += 1, R17913 += 1, R11525 += 1 };
  s2 -> s1 [0, 84] { R17975 += 1, R17913 += 1, R11525 += 1 };
  s2 -> s2 [0, 65535] { R17975 += 1, R17912 += 1, R17913 += 1 };
  s2 -> s1 [0, 65535] { R17975 += 1, R17913 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [86, 65535] { R17975 += 1, R17913 += 1, R11525 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R17975 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s0 [0, 65535] { R17976 += 1, R17977 += 1 };
  s0 -> s1 [0, 65535] { R17977 += 1, R17914 += 1, R17915 += 1 };
  s0 -> s2 [0, 65535] { R17977 += 1, R17915 += 1, R15346 += 1, R15347 += 1 };
  s0 -> s3 [0, 65535] { R17977 += 1, R17915 += 1 };
  s1 -> s1 [0, 65535] { R17977 += 1, R17914 += 1, R17915 += 1 };
  s1 -> s2 [0, 65535] { R17977 += 1, R17915 += 1, R15346 += 1, R15347 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R17977 += 1, R17915 += 1 };
  s2 -> s4 [0, 65535] { R17977 += 1 };
  s2 -> s2 [0, 65535] { R17977 += 1, R17915 += 1, R15346 += 1, R15347 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R17977 += 1, R17915 += 1 };
  s3 -> s4 [0, 65535] { R17977 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R17977 += 1, R17915 += 1 };
  s4 -> s4 [0, 65535] { R17977 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 85] { R17979 += 1, R17917 += 1, R17891 += 1 };
  s0 -> s2 [0, 65535] { R17979 += 1, R17917 += 1, R17890 += 1, R17891 += 1 };
  s0 -> s0 [0, 65535] { R17978 += 1, R17979 += 1 };
  s0 -> s3 [0, 65535] { R17979 += 1, R17916 += 1, R17917 += 1 };
  s0 -> s4 [87, 87] { R17979 += 1, R17917 += 1, R17891 += 1 };
  s0 -> s1 [88, 65535] { R17979 += 1, R17917 += 1, R17891 += 1 };
  s1 -> s1 [0, 85] { R17979 += 1, R17917 += 1, R17891 += 1 };
  s1 -> s4 [87, 87] { R17979 += 1, R17917 += 1, R17891 += 1 };
  s1 -> s1 [88, 65535] { R17979 += 1, R17917 += 1, R17891 += 1 };
  s2 -> s1 [0, 85] { R17979 += 1, R17917 += 1, R17891 += 1 };
  s2 -> s2 [0, 65535] { R17979 += 1, R17917 += 1, R17890 += 1, R17891 += 1 };
  s2 -> s4 [87, 87] { R17979 += 1, R17917 += 1, R17891 += 1 };
  s2 -> s1 [88, 65535] { R17979 += 1, R17917 += 1, R17891 += 1 };
  s3 -> s1 [0, 85] { R17979 += 1, R17917 += 1, R17891 += 1 };
  s3 -> s2 [0, 65535] { R17979 += 1, R17917 += 1, R17890 += 1, R17891 += 1 };
  s3 -> s3 [0, 65535] { R17979 += 1, R17916 += 1, R17917 += 1 };
  s3 -> s4 [87, 87] { R17979 += 1, R17917 += 1, R17891 += 1 };
  s3 -> s1 [88, 65535] { R17979 += 1, R17917 += 1, R17891 += 1 };
  s4 -> s4 [0, 85] { R17979 += 1, R17917 += 1, R17891 += 1 };
  s4 -> s4 [0, 65535] { R17979 += 1, R17917 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R17979 += 1 };
  s4 -> s4 [87, 65535] { R17979 += 1, R17917 += 1, R17891 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R17979 += 1 };
  accepting s4, s5, s6;
};
automaton value2_28 {
  init s0;
  s0 -> s0 [0, 65535] { R17980 += 1, R17981 += 1 };
  s0 -> s1 [0, 65535] { R17981 += 1, R17919 += 1, R17895 += 1, R17896 += 1 };
  s0 -> s2 [0, 65535] { R17981 += 1, R17919 += 1, R17896 += 1, R17897 += 1 };
  s0 -> s3 [0, 65535] { R17981 += 1, R17918 += 1, R17919 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R17981 += 1 };
  s1 -> s1 [0, 65535] { R17981 += 1, R17919 += 1, R17895 += 1, R17896 += 1 };
  s1 -> s2 [0, 65535] { R17981 += 1, R17919 += 1, R17896 += 1, R17897 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R17981 += 1 };
  s2 -> s2 [0, 65535] { R17981 += 1, R17919 += 1, R17896 += 1, R17897 += 1 };
  s2 -> s6 [0, 65535] { R17981 += 1, R17919 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R17981 += 1, R17919 += 1, R17895 += 1, R17896 += 1 };
  s3 -> s2 [0, 65535] { R17981 += 1, R17919 += 1, R17896 += 1, R17897 += 1 };
  s3 -> s3 [0, 65535] { R17981 += 1, R17918 += 1, R17919 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R17981 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R17981 += 1 };
  s6 -> s6 [0, 65535] { R17981 += 1, R17919 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 84] { R17983 += 1, R17921 += 1, R17901 += 1 };
  s0 -> s0 [0, 65535] { R17982 += 1, R17983 += 1 };
  s0 -> s2 [0, 65535] { R17983 += 1, R17920 += 1, R17921 += 1 };
  s0 -> s3 [0, 65535] { R17983 += 1, R17921 += 1, R17900 += 1, R17901 += 1 };
  s0 -> s4 [85, 85] { R17983 += 1, R17921 += 1, R17901 += 1 };
  s0 -> s5 [85, 85] { R17983 += 1, R17921 += 1, R17901 += 1 };
  s0 -> s1 [88, 65535] { R17983 += 1, R17921 += 1, R17901 += 1 };
  s1 -> s1 [0, 84] { R17983 += 1, R17921 += 1, R17901 += 1 };
  s1 -> s6 [0, 65535] { R17983 += 1 };
  s1 -> s1 [0, 65535] { R17983 += 1, R17921 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s4 [85, 85] { R17983 += 1, R17921 += 1, R17901 += 1 };
  s1 -> s5 [85, 85] { R17983 += 1, R17921 += 1, R17901 += 1 };
  s1 -> s1 [88, 65535] { R17983 += 1, R17921 += 1, R17901 += 1 };
  s2 -> s1 [0, 84] { R17983 += 1, R17921 += 1, R17901 += 1 };
  s2 -> s2 [0, 65535] { R17983 += 1, R17920 += 1, R17921 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s3 [0, 65535] { R17983 += 1, R17921 += 1, R17900 += 1, R17901 += 1 };
  s2 -> s4 [85, 85] { R17983 += 1, R17921 += 1, R17901 += 1 };
  s2 -> s5 [85, 85] { R17983 += 1, R17921 += 1, R17901 += 1 };
  s2 -> s1 [88, 65535] { R17983 += 1, R17921 += 1, R17901 += 1 };
  s3 -> s1 [0, 84] { R17983 += 1, R17921 += 1, R17901 += 1 };
  s3 -> s6 [0, 65535] { R17983 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s3 [0, 65535] { R17983 += 1, R17921 += 1, R17900 += 1, R17901 += 1 };
  s3 -> s4 [85, 85] { R17983 += 1, R17921 += 1, R17901 += 1 };
  s3 -> s5 [85, 85] { R17983 += 1, R17921 += 1, R17901 += 1 };
  s3 -> s1 [88, 65535] { R17983 += 1, R17921 += 1, R17901 += 1 };
  s4 -> s4 [0, 85] { R17983 += 1, R17921 += 1, R17901 += 1 };
  s4 -> s4 [0, 65535] { R17983 += 1, R17921 += 1 };
  s4 -> s6 [0, 65535] { R17983 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s4 [88, 65535] { R17983 += 1, R17921 += 1, R17901 += 1 };
  s5 -> s6 [0, 65535] { R17983 += 1 };
  s5 -> s7 [0, 65535];
  s5 -> s5 [0, 65535] { R17983 += 1, R17921 += 1 };
  s6 -> s6 [0, 65535] { R17983 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s0 [0, 65535] { R17984 += 1, R17985 += 1 };
  s0 -> s1 [0, 65535] { R17985 += 1, R17941 += 1, R18 += 1 };
  s0 -> s2 [0, 65535] { R17985 += 1, R17940 += 1, R17941 += 1 };
  s1 -> s1 [0, 65535] { R17985 += 1, R17941 += 1, R18 += 1 };
  s1 -> s4 [0, 65535] { R17985 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R17985 += 1, R17941 += 1, R18 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R17985 += 1, R17940 += 1, R17941 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R17985 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 83] { R17987 += 1, R17943 += 1 };
  s0 -> s0 [0, 65535] { R17986 += 1, R17987 += 1 };
  s0 -> s2 [0, 65535] { R17987 += 1, R17942 += 1, R17943 += 1 };
  s0 -> s3 [84, 84] { R17987 += 1, R17943 += 1 };
  s0 -> s4 [84, 84] { R17987 += 1, R17943 += 1 };
  s0 -> s5 [85, 85] { R17987 += 1, R17943 += 1 };
  s0 -> s1 [86, 65535] { R17987 += 1, R17943 += 1 };
  s1 -> s1 [0, 83] { R17987 += 1, R17943 += 1 };
  s1 -> s3 [84, 84] { R17987 += 1, R17943 += 1 };
  s1 -> s4 [84, 84] { R17987 += 1, R17943 += 1 };
  s1 -> s5 [85, 85] { R17987 += 1, R17943 += 1 };
  s1 -> s1 [86, 65535] { R17987 += 1, R17943 += 1 };
  s2 -> s1 [0, 83] { R17987 += 1, R17943 += 1 };
  s2 -> s2 [0, 65535] { R17987 += 1, R17942 += 1, R17943 += 1 };
  s2 -> s3 [84, 84] { R17987 += 1, R17943 += 1 };
  s2 -> s4 [84, 84] { R17987 += 1, R17943 += 1 };
  s2 -> s5 [85, 85] { R17987 += 1, R17943 += 1 };
  s2 -> s1 [86, 65535] { R17987 += 1, R17943 += 1 };
  s4 -> s4 [0, 84] { R17987 += 1, R17943 += 1 };
  s4 -> s8 [85, 85] { R17987 += 1, R17943 += 1 };
  s4 -> s4 [86, 65535] { R17987 += 1, R17943 += 1 };
  s5 -> s5 [0, 83] { R17987 += 1, R17943 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R17987 += 1 };
  s5 -> s7 [84, 84] { R17987 += 1, R17943 += 1 };
  s5 -> s8 [84, 84] { R17987 += 1, R17943 += 1 };
  s5 -> s5 [85, 65535] { R17987 += 1, R17943 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R17987 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s9 [0, 65535] { R17987 += 1 };
  s8 -> s8 [0, 65535] { R17987 += 1, R17943 += 1 };
  s8 -> s6 [0, 65535];
  s9 -> s9 [0, 65535] { R17987 += 1 };
  s9 -> s6 [0, 65535];
  accepting s8, s5, s9, s6, s7;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 83] { R17989 += 1, R17945 += 1, R66 += 1 };
  s0 -> s2 [0, 65535] { R17989 += 1, R17944 += 1, R17945 += 1 };
  s0 -> s0 [0, 65535] { R17988 += 1, R17989 += 1 };
  s0 -> s3 [84, 84] { R17989 += 1, R17945 += 1, R66 += 1 };
  s0 -> s4 [84, 84] { R17989 += 1, R17945 += 1, R66 += 1 };
  s0 -> s1 [85, 65535] { R17989 += 1, R17945 += 1, R66 += 1 };
  s1 -> s1 [0, 83] { R17989 += 1, R17945 += 1, R66 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R17989 += 1 };
  s1 -> s3 [84, 84] { R17989 += 1, R17945 += 1, R66 += 1 };
  s1 -> s4 [84, 84] { R17989 += 1, R17945 += 1, R66 += 1 };
  s1 -> s1 [85, 65535] { R17989 += 1, R17945 += 1, R66 += 1 };
  s2 -> s1 [0, 83] { R17989 += 1, R17945 += 1, R66 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R17989 += 1, R17944 += 1, R17945 += 1 };
  s2 -> s3 [84, 84] { R17989 += 1, R17945 += 1, R66 += 1 };
  s2 -> s4 [84, 84] { R17989 += 1, R17945 += 1, R66 += 1 };
  s2 -> s1 [85, 65535] { R17989 += 1, R17945 += 1, R66 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R17989 += 1 };
  s3 -> s3 [0, 65535] { R17989 += 1, R17945 += 1, R66 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R17989 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R17989 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 83] { R17991 += 1, R17947 += 1, R68 += 1 };
  s0 -> s0 [0, 65535] { R17990 += 1, R17991 += 1 };
  s0 -> s2 [0, 65535] { R17991 += 1, R17946 += 1, R17947 += 1 };
  s0 -> s3 [84, 84] { R17991 += 1, R17947 += 1, R68 += 1 };
  s0 -> s4 [84, 84] { R17991 += 1, R17947 += 1, R68 += 1 };
  s0 -> s1 [85, 65535] { R17991 += 1, R17947 += 1, R68 += 1 };
  s1 -> s1 [0, 83] { R17991 += 1, R17947 += 1, R68 += 1 };
  s1 -> s1 [0, 65535] { R17991 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [84, 84] { R17991 += 1, R17947 += 1, R68 += 1 };
  s1 -> s4 [84, 84] { R17991 += 1, R17947 += 1, R68 += 1 };
  s1 -> s1 [85, 65535] { R17991 += 1, R17947 += 1, R68 += 1 };
  s2 -> s1 [0, 83] { R17991 += 1, R17947 += 1, R68 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R17991 += 1, R17946 += 1, R17947 += 1 };
  s2 -> s3 [84, 84] { R17991 += 1, R17947 += 1, R68 += 1 };
  s2 -> s4 [84, 84] { R17991 += 1, R17947 += 1, R68 += 1 };
  s2 -> s1 [85, 65535] { R17991 += 1, R17947 += 1, R68 += 1 };
  s3 -> s3 [0, 65535] { R17991 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R17991 += 1, R17947 += 1, R68 += 1 };
  s4 -> s5 [0, 65535] { R17991 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R17991 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 83] { R17993 += 1, R17949 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s2 [0, 83] { R17993 += 1, R17949 += 1, R11523 += 1 };
  s0 -> s3 [0, 65535] { R17993 += 1, R17948 += 1, R17949 += 1 };
  s0 -> s0 [0, 65535] { R17992 += 1, R17993 += 1 };
  s0 -> s4 [84, 84] { R17993 += 1, R17949 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s5 [84, 84] { R17993 += 1, R17949 += 1, R11523 += 1 };
  s0 -> s6 [84, 84] { R17993 += 1, R17949 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s7 [84, 84] { R17993 += 1, R17949 += 1, R11523 += 1 };
  s0 -> s1 [85, 65535] { R17993 += 1, R17949 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s2 [86, 65535] { R17993 += 1, R17949 += 1, R11523 += 1 };
  s1 -> s1 [0, 83] { R17993 += 1, R17949 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s2 [0, 83] { R17993 += 1, R17949 += 1, R11523 += 1 };
  s1 -> s4 [84, 84] { R17993 += 1, R17949 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s5 [84, 84] { R17993 += 1, R17949 += 1, R11523 += 1 };
  s1 -> s6 [84, 84] { R17993 += 1, R17949 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s7 [84, 84] { R17993 += 1, R17949 += 1, R11523 += 1 };
  s1 -> s1 [85, 65535] { R17993 += 1, R17949 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s2 [86, 65535] { R17993 += 1, R17949 += 1, R11523 += 1 };
  s2 -> s2 [0, 83] { R17993 += 1, R17949 += 1, R11523 += 1 };
  s2 -> s9 [0, 65535];
  s2 -> s2 [0, 65535] { R17993 += 1 };
  s2 -> s5 [84, 84] { R17993 += 1, R17949 += 1 };
  s2 -> s7 [84, 84] { R17993 += 1, R17949 += 1 };
  s2 -> s2 [85, 65535] { R17993 += 1, R17949 += 1 };
  s2 -> s2 [86, 65535] { R17993 += 1, R17949 += 1, R11523 += 1 };
  s3 -> s1 [0, 83] { R17993 += 1, R17949 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s2 [0, 83] { R17993 += 1, R17949 += 1, R11523 += 1 };
  s3 -> s3 [0, 65535] { R17993 += 1, R17948 += 1, R17949 += 1 };
  s3 -> s4 [84, 84] { R17993 += 1, R17949 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s5 [84, 84] { R17993 += 1, R17949 += 1, R11523 += 1 };
  s3 -> s6 [84, 84] { R17993 += 1, R17949 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s7 [84, 84] { R17993 += 1, R17949 += 1, R11523 += 1 };
  s3 -> s1 [85, 65535] { R17993 += 1, R17949 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s2 [86, 65535] { R17993 += 1, R17949 += 1, R11523 += 1 };
  s4 -> s7 [0, 84] { R17993 += 1, R17949 += 1, R11523 += 1 };
  s4 -> s4 [0, 65535] { R17993 += 1, R17949 += 1, R11522 += 1, R11523 += 1 };
  s4 -> s7 [86, 65535] { R17993 += 1, R17949 += 1, R11523 += 1 };
  s5 -> s9 [0, 65535];
  s5 -> s5 [0, 65535] { R17993 += 1 };
  s7 -> s7 [0, 84] { R17993 += 1, R17949 += 1, R11523 += 1 };
  s7 -> s8 [0, 65535] { R17993 += 1 };
  s7 -> s9 [0, 65535];
  s7 -> s7 [0, 65535] { R17993 += 1, R17949 += 1 };
  s7 -> s7 [86, 65535] { R17993 += 1, R17949 += 1, R11523 += 1 };
  s8 -> s8 [0, 65535] { R17993 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s8, s5, s2, s9, s7;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 83] { R17995 += 1, R17951 += 1, R15343 += 1, R15344 += 1 };
  s0 -> s2 [0, 83] { R17995 += 1, R17951 += 1, R15342 += 1, R15343 += 1 };
  s0 -> s3 [0, 65535] { R17995 += 1, R17950 += 1, R17951 += 1 };
  s0 -> s0 [0, 65535] { R17994 += 1, R17995 += 1 };
  s0 -> s4 [84, 84] { R17995 += 1, R17951 += 1, R15342 += 1, R15343 += 1 };
  s0 -> s5 [84, 84] { R17995 += 1, R17951 += 1, R15342 += 1, R15343 += 1 };
  s0 -> s6 [84, 84] { R17995 += 1, R17951 += 1, R15343 += 1, R15344 += 1 };
  s0 -> s7 [84, 84] { R17995 += 1, R17951 += 1, R15343 += 1, R15344 += 1 };
  s0 -> s1 [85, 65535] { R17995 += 1, R17951 += 1, R15343 += 1, R15344 += 1 };
  s0 -> s2 [85, 65535] { R17995 += 1, R17951 += 1, R15342 += 1, R15343 += 1 };
  s1 -> s1 [0, 83] { R17995 += 1, R17951 += 1, R15343 += 1, R15344 += 1 };
  s1 -> s1 [0, 65535] { R17995 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s6 [84, 84] { R17995 += 1, R17951 += 1, R15343 += 1, R15344 += 1 };
  s1 -> s7 [84, 84] { R17995 += 1, R17951 += 1, R15343 += 1, R15344 += 1 };
  s1 -> s1 [85, 65535] { R17995 += 1, R17951 += 1, R15343 += 1, R15344 += 1 };
  s2 -> s1 [0, 83] { R17995 += 1, R17951 += 1, R15343 += 1, R15344 += 1 };
  s2 -> s2 [0, 83] { R17995 += 1, R17951 += 1, R15342 += 1, R15343 += 1 };
  s2 -> s4 [84, 84] { R17995 += 1, R17951 += 1, R15342 += 1, R15343 += 1 };
  s2 -> s5 [84, 84] { R17995 += 1, R17951 += 1, R15342 += 1, R15343 += 1 };
  s2 -> s6 [84, 84] { R17995 += 1, R17951 += 1, R15343 += 1, R15344 += 1 };
  s2 -> s7 [84, 84] { R17995 += 1, R17951 += 1, R15343 += 1, R15344 += 1 };
  s2 -> s1 [85, 65535] { R17995 += 1, R17951 += 1, R15343 += 1, R15344 += 1 };
  s2 -> s2 [85, 65535] { R17995 += 1, R17951 += 1, R15342 += 1, R15343 += 1 };
  s3 -> s1 [0, 83] { R17995 += 1, R17951 += 1, R15343 += 1, R15344 += 1 };
  s3 -> s2 [0, 83] { R17995 += 1, R17951 += 1, R15342 += 1, R15343 += 1 };
  s3 -> s3 [0, 65535] { R17995 += 1, R17950 += 1, R17951 += 1 };
  s3 -> s4 [84, 84] { R17995 += 1, R17951 += 1, R15342 += 1, R15343 += 1 };
  s3 -> s5 [84, 84] { R17995 += 1, R17951 += 1, R15342 += 1, R15343 += 1 };
  s3 -> s6 [84, 84] { R17995 += 1, R17951 += 1, R15343 += 1, R15344 += 1 };
  s3 -> s7 [84, 84] { R17995 += 1, R17951 += 1, R15343 += 1, R15344 += 1 };
  s3 -> s1 [85, 65535] { R17995 += 1, R17951 += 1, R15343 += 1, R15344 += 1 };
  s3 -> s2 [85, 65535] { R17995 += 1, R17951 += 1, R15342 += 1, R15343 += 1 };
  s5 -> s5 [0, 65535] { R17995 += 1, R17951 += 1, R15342 += 1, R15343 += 1 };
  s5 -> s6 [0, 65535] { R17995 += 1, R17951 += 1, R15343 += 1, R15344 += 1 };
  s6 -> s6 [0, 65535] { R17995 += 1, R17951 += 1, R15343 += 1, R15344 += 1 };
  s6 -> s9 [0, 65535] { R17995 += 1 };
  s6 -> s8 [0, 65535];
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R17995 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R17995 += 1 };
  s9 -> s8 [0, 65535];
  accepting s8, s9, s6, s1, s7;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 83] { R17997 += 1, R17953 += 1, R17888 += 1, R17889 += 1 };
  s0 -> s2 [0, 65535] { R17997 += 1, R17952 += 1, R17953 += 1 };
  s0 -> s0 [0, 65535] { R17996 += 1, R17997 += 1 };
  s0 -> s3 [84, 84] { R17997 += 1, R17953 += 1, R17888 += 1, R17889 += 1 };
  s0 -> s4 [84, 84] { R17997 += 1, R17953 += 1, R17888 += 1, R17889 += 1 };
  s0 -> s1 [85, 65535] { R17997 += 1, R17953 += 1, R17888 += 1, R17889 += 1 };
  s1 -> s1 [0, 83] { R17997 += 1, R17953 += 1, R17888 += 1, R17889 += 1 };
  s1 -> s1 [0, 65535] { R17997 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [84, 84] { R17997 += 1, R17953 += 1, R17888 += 1, R17889 += 1 };
  s1 -> s4 [84, 84] { R17997 += 1, R17953 += 1, R17888 += 1, R17889 += 1 };
  s1 -> s1 [85, 65535] { R17997 += 1, R17953 += 1, R17888 += 1, R17889 += 1 };
  s2 -> s1 [0, 83] { R17997 += 1, R17953 += 1, R17888 += 1, R17889 += 1 };
  s2 -> s2 [0, 65535] { R17997 += 1, R17952 += 1, R17953 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [84, 84] { R17997 += 1, R17953 += 1, R17888 += 1, R17889 += 1 };
  s2 -> s4 [84, 84] { R17997 += 1, R17953 += 1, R17888 += 1, R17889 += 1 };
  s2 -> s1 [85, 65535] { R17997 += 1, R17953 += 1, R17888 += 1, R17889 += 1 };
  s3 -> s3 [0, 65535] { R17997 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R17997 += 1, R17953 += 1, R17888 += 1, R17889 += 1 };
  s4 -> s5 [0, 65535] { R17997 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R17997 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 83] { R17999 += 1, R17955 += 1, R17892 += 1, R17893 += 1 };
  s0 -> s0 [0, 65535] { R17998 += 1, R17999 += 1 };
  s0 -> s2 [0, 65535] { R17999 += 1, R17954 += 1, R17955 += 1 };
  s0 -> s3 [84, 84] { R17999 += 1, R17955 += 1, R17892 += 1, R17893 += 1 };
  s0 -> s4 [84, 84] { R17999 += 1, R17955 += 1, R17892 += 1, R17893 += 1 };
  s0 -> s1 [85, 65535] { R17999 += 1, R17955 += 1, R17892 += 1, R17893 += 1 };
  s1 -> s1 [0, 83] { R17999 += 1, R17955 += 1, R17892 += 1, R17893 += 1 };
  s1 -> s1 [0, 65535] { R17999 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [84, 84] { R17999 += 1, R17955 += 1, R17892 += 1, R17893 += 1 };
  s1 -> s4 [84, 84] { R17999 += 1, R17955 += 1, R17892 += 1, R17893 += 1 };
  s1 -> s1 [85, 65535] { R17999 += 1, R17955 += 1, R17892 += 1, R17893 += 1 };
  s2 -> s1 [0, 83] { R17999 += 1, R17955 += 1, R17892 += 1, R17893 += 1 };
  s2 -> s2 [0, 65535] { R17999 += 1, R17954 += 1, R17955 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [84, 84] { R17999 += 1, R17955 += 1, R17892 += 1, R17893 += 1 };
  s2 -> s4 [84, 84] { R17999 += 1, R17955 += 1, R17892 += 1, R17893 += 1 };
  s2 -> s1 [85, 65535] { R17999 += 1, R17955 += 1, R17892 += 1, R17893 += 1 };
  s3 -> s3 [0, 65535] { R17999 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R17999 += 1, R17955 += 1, R17892 += 1, R17893 += 1 };
  s4 -> s5 [0, 65535] { R17999 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R17999 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 83] { R18001 += 1, R17957 += 1, R17898 += 1, R17899 += 1 };
  s0 -> s2 [0, 65535] { R18001 += 1, R17956 += 1, R17957 += 1 };
  s0 -> s0 [0, 65535] { R18000 += 1, R18001 += 1 };
  s0 -> s3 [84, 84] { R18001 += 1, R17957 += 1, R17898 += 1, R17899 += 1 };
  s0 -> s4 [84, 84] { R18001 += 1, R17957 += 1, R17898 += 1, R17899 += 1 };
  s0 -> s1 [85, 65535] { R18001 += 1, R17957 += 1, R17898 += 1, R17899 += 1 };
  s1 -> s1 [0, 83] { R18001 += 1, R17957 += 1, R17898 += 1, R17899 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R18001 += 1 };
  s1 -> s3 [84, 84] { R18001 += 1, R17957 += 1, R17898 += 1, R17899 += 1 };
  s1 -> s4 [84, 84] { R18001 += 1, R17957 += 1, R17898 += 1, R17899 += 1 };
  s1 -> s1 [85, 65535] { R18001 += 1, R17957 += 1, R17898 += 1, R17899 += 1 };
  s2 -> s1 [0, 83] { R18001 += 1, R17957 += 1, R17898 += 1, R17899 += 1 };
  s2 -> s2 [0, 65535] { R18001 += 1, R17956 += 1, R17957 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [84, 84] { R18001 += 1, R17957 += 1, R17898 += 1, R17899 += 1 };
  s2 -> s4 [84, 84] { R18001 += 1, R17957 += 1, R17898 += 1, R17899 += 1 };
  s2 -> s1 [85, 65535] { R18001 += 1, R17957 += 1, R17898 += 1, R17899 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R18001 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R18001 += 1, R17957 += 1, R17898 += 1, R17899 += 1 };
  s4 -> s6 [0, 65535] { R18001 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R18001 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [116, 116];
  accepting s1;
};
};
synchronised {  // Automata constraining P62
automaton P62_0 {
  init s0;
  s0 -> s1 [117, 117];
  accepting s1;
};
};
constraint R1 = R17917 && R2 = R18001 && R20 - R18001 = -1 && R21 = R18001 && R22 - R18001 = -1 && R23 = R18001 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R17891 + -1*R17889 - R53 = 0 && R52 + R17890 + R17888 = 0 && R17916 = 0 && R17942 = 0 && R17943 = 0 && R17948 = 0 && R17949 = 0 && R17950 = 0 && R17951 = 0 && R17958 = 0 && R17959 = R18001 && R17960 = 0 && R17961 = R18001 && R17962 = 0 && R17963 = R18001 && R17964 = 0 && R17965 = R18001 && R17966 = 0 && R17967 = R18001 && R17968 = 0 && R17969 = R18001 && R17970 = 0 && R17971 = R18001 && R17972 = 0 && R17973 = R18001 && R17974 = 0 && R17975 = R18001 && R17976 = 0 && R17977 = R18001 && R17978 = 0 && R17979 = R18001 && R17980 = 0 && R17981 = R18001 && R17982 = 0 && R17983 = R18001 && R17984 = 0 && R17985 = R18001 && R17986 = 0 && R17987 = R18001 && R17988 = 0 && R17989 = R18001 && R17990 = 0 && R17991 = R18001 && R17992 = 0 && R17993 = R18001 && R17994 = 0 && R17995 = R18001 && R17996 = 0 && R17997 = R18001 && R17998 = 0 && R17999 = R18001 && R18000 = 0 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R17891 + -1*R17889 - R53 < 1 && -1 < R17917 && 0 < R18001 && (R48 + R15347 + R15344 != 0 || ((R42 + R11524 + R11522 != 0 || R43 + R11525 + R11523 + -1*R17891 + -1*R17889 - R53 = 0 || R53 + R17891 + R17889 < 1) && (R42 + R11524 + R11522 = 0 || R53 + R17891 + R17889 < 1))) && (R48 + R15347 + R15344 != 0 || ((R46 + R15345 + R15342 != 0 || R47 + R15346 + R15343 + -1*R17891 + -1*R17889 - R53 = 0 || R53 + R17891 + R17889 < 1) && (R46 + R15345 + R15342 = 0 || R53 + R17891 + R17889 < 1))) && (R17902 != 0 || R17903 = R17917 || (R17 = 0 && R17917 = 0)) && (R17904 != 0 || R17905 = R17917 || (R17 = 0 && R17917 = 0)) && (R17906 != 0 || R17907 = R17917 || (R17 = 0 && R17917 = 0)) && (R17908 != 0 || R17909 = R17917 || (R17 = 0 && R17917 = 0)) && (R17910 != 0 || R17911 = R17917 || (R17 = 0 && R17917 = 0)) && (R17912 != 0 || R17913 = R17917 || (R17 = 0 && R17917 = 0)) && (R17914 != 0 || R17915 = R17917 || (R17 = 0 && R17917 = 0)) && (R17918 != 0 || R17917 = R17919 || (R17 = 0 && R17917 = 0)) && (R17920 != 0 || R17917 = R17921 || (R17 = 0 && R17917 = 0)) && (R18 = 0 || (R17940 = 0 && R17941 = 0)) && (R18 = 0 || (R17944 = 0 && R17945 = 0)) && (R18 = 0 || (R17946 = 0 && R17947 = 0)) && (R18 = 0 || (R17952 = 0 && R17953 = 0)) && (R18 = 0 || (R17954 = 0 && R17955 = 0)) && (R18 = 0 || (R17956 = 0 && R17957 = 0)) && (R19 = 0 || (R17922 = 0 && R17923 = 0)) && (R19 = 0 || (R17924 = 0 && R17925 = 0)) && (R19 = 0 || (R17926 = 0 && R17927 = 0)) && (R19 = 0 || (R17928 = 0 && R17929 = 0)) && (R19 = 0 || (R17930 = 0 && R17931 = 0)) && (R19 = 0 || (R17932 = 0 && R17933 = 0)) && (R19 = 0 || (R17934 = 0 && R17935 = 0)) && (R19 = 0 || (R17936 = 0 && R17937 = 0)) && (R19 = 0 || (R17938 = 0 && R17939 = 0)) && (R48 + R15347 + R15344 = 0 || (R42 + R11524 + R11522 = 0 && R43 + R11525 + R11523 + -1*R17891 + -1*R17889 - R53 = 0)) && (R48 + R15347 + R15344 = 0 || (R46 + R15345 + R15342 = 0 && R47 + R15346 + R15343 + -1*R17891 + -1*R17889 - R53 = 0)) && (R58 + R17897 + R17894 = 0 || (R56 + R17895 + R17892 = 0 && R57 + R17896 + R17893 = 0)) && (R58 + R17897 + R17894 = 0 || (R62 + R17900 + R17898 = 0 && R63 + R17901 + R17899 = 0)) && (R17902 = 0 || (R17 = 0 && R17917 = 0)) && (R17904 = 0 || (R17 = 0 && R17917 = 0)) && (R17906 = 0 || (R17 = 0 && R17917 = 0)) && (R17908 = 0 || (R17 = 0 && R17917 = 0)) && (R17910 = 0 || (R17 = 0 && R17917 = 0)) && (R17912 = 0 || (R17 = 0 && R17917 = 0)) && (R17914 = 0 || (R17 = 0 && R17917 = 0)) && (R17918 = 0 || (R17 = 0 && R17917 = 0)) && (R17920 = 0 || (R17 = 0 && R17917 = 0));
// End of Parikh automata intersection problem
