// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R12, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R2620, R2621, R2622, R2623, R27, R3, R3468, R3469, R3470, R3471, R3472, R3473, R3474, R3475, R3476, R3477, R3478, R3479, R3480, R3481, R3482, R3483, R3484, R3485, R3486, R3487, R3488, R3489, R3490, R3491, R3492, R3493, R3494, R3495, R3496, R3497, R3498, R3499, R3500, R3501, R3502, R3503, R3504, R3505, R3506, R3507, R3508, R3509, R3510, R3511, R3512, R3513, R3514, R3515, R3516, R3517, R3518, R3519, R3520, R3521, R3522, R3523, R3524, R3525, R3526, R3527, R3528, R3529, R3530, R3531, R3532, R3533, R3534, R3535, R3536, R3537, R3538, R3539, R3540, R3541, R3542, R3543, R3544, R3545, R3546, R3547, R3548, R3549, R3550, R3551, R3552, R3553, R3554, R3555, R3556, R3557, R3558, R3559, R3560, R3561, R3562, R3563, R3564, R3565, R3566, R3567, R3568, R3569, R3570, R3571, R3572, R3573, R3574, R3575, R3576, R3577, R38, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R70, R71, R72, R73, R74, R75, R76, R77, R78, R79, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [84, 84];
  s0 -> s0 [85, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [84, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 83];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [84, 84];
  s0 -> s1 [85, 65535];
  s1 -> s1 [0, 83];
  s1 -> s2 [84, 84];
  s1 -> s1 [85, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R21 += 1 };
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s1 [0, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R3498 += 1, R3499 += 1 };
  s0 -> s1 [0, 65535] { R3499 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R3499 += 1, R19 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 83] { R3501 += 1 };
  s0 -> s0 [0, 65535] { R3500 += 1, R3501 += 1 };
  s0 -> s2 [84, 84] { R3501 += 1 };
  s0 -> s3 [84, 84] { R3501 += 1 };
  s0 -> s1 [86, 65535] { R3501 += 1 };
  s1 -> s1 [0, 83] { R3501 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R3501 += 1 };
  s1 -> s3 [84, 84] { R3501 += 1 };
  s1 -> s1 [86, 65535] { R3501 += 1 };
  s2 -> s2 [0, 84] { R3501 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [86, 65535] { R3501 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 83] { R3503 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R3502 += 1, R3503 += 1 };
  s0 -> s2 [84, 84] { R3503 += 1, R38 += 1 };
  s0 -> s3 [84, 84] { R3503 += 1, R38 += 1 };
  s0 -> s1 [85, 65535] { R3503 += 1, R38 += 1 };
  s1 -> s1 [0, 83] { R3503 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R3503 += 1, R38 += 1 };
  s1 -> s3 [84, 84] { R3503 += 1, R38 += 1 };
  s1 -> s1 [85, 65535] { R3503 += 1, R38 += 1 };
  s2 -> s2 [0, 65535] { R3503 += 1, R38 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 83] { R3505 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R3504 += 1, R3505 += 1 };
  s0 -> s2 [84, 84] { R3505 += 1, R40 += 1 };
  s0 -> s3 [84, 84] { R3505 += 1, R40 += 1 };
  s0 -> s1 [85, 65535] { R3505 += 1, R40 += 1 };
  s1 -> s1 [0, 83] { R3505 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R3505 += 1, R40 += 1 };
  s1 -> s3 [84, 84] { R3505 += 1, R40 += 1 };
  s1 -> s1 [85, 65535] { R3505 += 1, R40 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R3505 += 1, R40 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 83] { R3507 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R3506 += 1, R3507 += 1 };
  s0 -> s2 [84, 84] { R3507 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [84, 84] { R3507 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [85, 65535] { R3507 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 83] { R3507 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R3507 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [84, 84] { R3507 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [85, 65535] { R3507 += 1, R42 += 1, R43 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3507 += 1, R42 += 1, R43 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 83] { R3509 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R3508 += 1, R3509 += 1 };
  s0 -> s2 [84, 84] { R3509 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [84, 84] { R3509 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [85, 65535] { R3509 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 83] { R3509 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R3509 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [84, 84] { R3509 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [85, 65535] { R3509 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535] { R3509 += 1, R46 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 83] { R3511 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R3510 += 1, R3511 += 1 };
  s0 -> s2 [84, 84] { R3511 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [84, 84] { R3511 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [85, 65535] { R3511 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 83] { R3511 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R3511 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [84, 84] { R3511 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [85, 65535] { R3511 += 1, R52 += 1, R53 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3511 += 1, R52 += 1, R53 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 83] { R3513 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R3512 += 1, R3513 += 1 };
  s0 -> s2 [84, 84] { R3513 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [84, 84] { R3513 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [85, 65535] { R3513 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 83] { R3513 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R3513 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [84, 84] { R3513 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [85, 65535] { R3513 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3513 += 1, R56 += 1, R57 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 83] { R3515 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R3514 += 1, R3515 += 1 };
  s0 -> s2 [84, 84] { R3515 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [84, 84] { R3515 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [85, 65535] { R3515 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 83] { R3515 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R3515 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [84, 84] { R3515 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [85, 65535] { R3515 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535] { R3515 += 1, R62 += 1, R63 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 83] { R3535 += 1 };
  s0 -> s0 [0, 65535] { R3534 += 1, R3535 += 1 };
  s0 -> s2 [84, 84] { R3535 += 1 };
  s0 -> s1 [85, 65535] { R3535 += 1 };
  s1 -> s1 [0, 83] { R3535 += 1 };
  s1 -> s2 [84, 84] { R3535 += 1 };
  s1 -> s1 [85, 65535] { R3535 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3535 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R3536 += 1, R3537 += 1 };
  s0 -> s1 [0, 65535] { R3537 += 1, R1 += 1 };
  s1 -> s1 [0, 65535] { R3537 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 83] { R3539 += 1 };
  s0 -> s2 [0, 65535] { R3539 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R3538 += 1, R3539 += 1 };
  s0 -> s3 [84, 84] { R3539 += 1 };
  s0 -> s1 [85, 65535] { R3539 += 1 };
  s1 -> s1 [0, 83] { R3539 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [84, 84] { R3539 += 1 };
  s1 -> s1 [85, 65535] { R3539 += 1 };
  s2 -> s1 [0, 83] { R3539 += 1 };
  s2 -> s2 [0, 65535] { R3539 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [84, 84] { R3539 += 1 };
  s2 -> s1 [85, 65535] { R3539 += 1 };
  s3 -> s3 [0, 65535] { R3539 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 83] { R3541 += 1, R3479 += 1 };
  s0 -> s0 [0, 65535] { R3540 += 1, R3541 += 1 };
  s0 -> s2 [0, 65535] { R3541 += 1, R3478 += 1, R3479 += 1 };
  s0 -> s1 [85, 65535] { R3541 += 1, R3479 += 1 };
  s1 -> s1 [0, 83] { R3541 += 1, R3479 += 1 };
  s1 -> s1 [0, 65535] { R3541 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [85, 65535] { R3541 += 1, R3479 += 1 };
  s2 -> s1 [0, 83] { R3541 += 1, R3479 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3541 += 1, R3478 += 1, R3479 += 1 };
  s2 -> s1 [85, 65535] { R3541 += 1, R3479 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R3543 += 1, R3480 += 1, R3481 += 1 };
  s0 -> s2 [0, 65535] { R3543 += 1, R3481 += 1, R17 += 1 };
  s0 -> s0 [0, 65535] { R3542 += 1, R3543 += 1 };
  s1 -> s1 [0, 65535] { R3543 += 1, R3480 += 1, R3481 += 1 };
  s1 -> s2 [0, 65535] { R3543 += 1, R3481 += 1, R17 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3543 += 1, R3481 += 1, R17 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R3543 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3543 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 65535] { R3545 += 1, R3483 += 1 };
  s0 -> s0 [0, 65535] { R3544 += 1, R3545 += 1 };
  s0 -> s2 [0, 65535] { R3545 += 1, R3482 += 1, R3483 += 1 };
  s1 -> s4 [0, 65535] { R3545 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3545 += 1, R3483 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3545 += 1, R3483 += 1 };
  s2 -> s2 [0, 65535] { R3545 += 1, R3482 += 1, R3483 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3545 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_23 {
  init s0;
  s0 -> s0 [0, 65535] { R3546 += 1, R3547 += 1 };
  s0 -> s1 [0, 65535] { R3547 += 1, R3484 += 1, R3485 += 1 };
  s0 -> s2 [0, 65535] { R3547 += 1, R3485 += 1, R67 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3547 += 1, R3484 += 1, R3485 += 1 };
  s1 -> s2 [0, 65535] { R3547 += 1, R3485 += 1, R67 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3547 += 1, R3485 += 1, R67 += 1 };
  s2 -> s4 [0, 65535] { R3547 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3547 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 84] { R3549 += 1, R3487 += 1 };
  s0 -> s0 [0, 65535] { R3548 += 1, R3549 += 1 };
  s0 -> s2 [0, 65535] { R3549 += 1, R3486 += 1, R3487 += 1 };
  s0 -> s3 [0, 65535] { R3549 += 1, R3487 += 1, R69 += 1 };
  s0 -> s1 [86, 65535] { R3549 += 1, R3487 += 1 };
  s1 -> s1 [0, 84] { R3549 += 1, R3487 += 1 };
  s1 -> s1 [0, 65535] { R3549 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [86, 65535] { R3549 += 1, R3487 += 1 };
  s2 -> s1 [0, 84] { R3549 += 1, R3487 += 1 };
  s2 -> s2 [0, 65535] { R3549 += 1, R3486 += 1, R3487 += 1 };
  s2 -> s3 [0, 65535] { R3549 += 1, R3487 += 1, R69 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [86, 65535] { R3549 += 1, R3487 += 1 };
  s3 -> s1 [0, 84] { R3549 += 1, R3487 += 1 };
  s3 -> s4 [0, 65535] { R3549 += 1 };
  s3 -> s3 [0, 65535] { R3549 += 1, R3487 += 1, R69 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [86, 65535] { R3549 += 1, R3487 += 1 };
  s4 -> s4 [0, 65535] { R3549 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 84] { R3551 += 1, R3489 += 1, R73 += 1 };
  s0 -> s2 [0, 65535] { R3551 += 1, R3489 += 1, R72 += 1, R73 += 1 };
  s0 -> s3 [0, 65535] { R3551 += 1, R3488 += 1, R3489 += 1 };
  s0 -> s0 [0, 65535] { R3550 += 1, R3551 += 1 };
  s0 -> s1 [86, 65535] { R3551 += 1, R3489 += 1, R73 += 1 };
  s1 -> s1 [0, 84] { R3551 += 1, R3489 += 1, R73 += 1 };
  s1 -> s1 [0, 65535] { R3551 += 1, R3489 += 1 };
  s1 -> s5 [0, 65535] { R3551 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [86, 65535] { R3551 += 1, R3489 += 1, R73 += 1 };
  s2 -> s1 [0, 84] { R3551 += 1, R3489 += 1, R73 += 1 };
  s2 -> s2 [0, 65535] { R3551 += 1, R3489 += 1, R72 += 1, R73 += 1 };
  s2 -> s5 [0, 65535] { R3551 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [86, 65535] { R3551 += 1, R3489 += 1, R73 += 1 };
  s3 -> s1 [0, 84] { R3551 += 1, R3489 += 1, R73 += 1 };
  s3 -> s2 [0, 65535] { R3551 += 1, R3489 += 1, R72 += 1, R73 += 1 };
  s3 -> s3 [0, 65535] { R3551 += 1, R3488 += 1, R3489 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [86, 65535] { R3551 += 1, R3489 += 1, R73 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3551 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R3553 += 1, R3491 += 1, R77 += 1, R78 += 1 };
  s0 -> s0 [0, 65535] { R3552 += 1, R3553 += 1 };
  s0 -> s2 [0, 65535] { R3553 += 1, R3491 += 1, R78 += 1, R79 += 1 };
  s0 -> s3 [0, 65535] { R3553 += 1, R3490 += 1, R3491 += 1 };
  s1 -> s1 [0, 65535] { R3553 += 1, R3491 += 1, R77 += 1, R78 += 1 };
  s1 -> s5 [0, 65535] { R3553 += 1 };
  s1 -> s2 [0, 65535] { R3553 += 1, R3491 += 1, R78 += 1, R79 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R3553 += 1 };
  s2 -> s6 [0, 65535] { R3553 += 1, R3491 += 1 };
  s2 -> s2 [0, 65535] { R3553 += 1, R3491 += 1, R78 += 1, R79 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R3553 += 1, R3491 += 1, R77 += 1, R78 += 1 };
  s3 -> s2 [0, 65535] { R3553 += 1, R3491 += 1, R78 += 1, R79 += 1 };
  s3 -> s3 [0, 65535] { R3553 += 1, R3490 += 1, R3491 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3553 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R3553 += 1 };
  s6 -> s6 [0, 65535] { R3553 += 1, R3491 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 85] { R3555 += 1, R3493 += 1, R2623 += 1 };
  s0 -> s2 [0, 65535] { R3555 += 1, R3492 += 1, R3493 += 1 };
  s0 -> s3 [0, 65535] { R3555 += 1, R3493 += 1, R2622 += 1, R2623 += 1 };
  s0 -> s0 [0, 65535] { R3554 += 1, R3555 += 1 };
  s0 -> s4 [87, 87] { R3555 += 1, R3493 += 1, R2623 += 1 };
  s0 -> s1 [88, 65535] { R3555 += 1, R3493 += 1, R2623 += 1 };
  s1 -> s1 [0, 85] { R3555 += 1, R3493 += 1, R2623 += 1 };
  s1 -> s4 [87, 87] { R3555 += 1, R3493 += 1, R2623 += 1 };
  s1 -> s1 [88, 65535] { R3555 += 1, R3493 += 1, R2623 += 1 };
  s2 -> s1 [0, 85] { R3555 += 1, R3493 += 1, R2623 += 1 };
  s2 -> s2 [0, 65535] { R3555 += 1, R3492 += 1, R3493 += 1 };
  s2 -> s3 [0, 65535] { R3555 += 1, R3493 += 1, R2622 += 1, R2623 += 1 };
  s2 -> s4 [87, 87] { R3555 += 1, R3493 += 1, R2623 += 1 };
  s2 -> s1 [88, 65535] { R3555 += 1, R3493 += 1, R2623 += 1 };
  s3 -> s1 [0, 85] { R3555 += 1, R3493 += 1, R2623 += 1 };
  s3 -> s3 [0, 65535] { R3555 += 1, R3493 += 1, R2622 += 1, R2623 += 1 };
  s3 -> s4 [87, 87] { R3555 += 1, R3493 += 1, R2623 += 1 };
  s3 -> s1 [88, 65535] { R3555 += 1, R3493 += 1, R2623 += 1 };
  s4 -> s4 [0, 85] { R3555 += 1, R3493 += 1, R2623 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R3555 += 1 };
  s4 -> s4 [0, 65535] { R3555 += 1, R3493 += 1 };
  s4 -> s4 [87, 65535] { R3555 += 1, R3493 += 1, R2623 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3555 += 1 };
  accepting s4, s5, s6;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R3557 += 1, R3494 += 1, R3495 += 1 };
  s0 -> s0 [0, 65535] { R3556 += 1, R3557 += 1 };
  s0 -> s2 [0, 65535] { R3557 += 1, R3495 += 1 };
  s1 -> s1 [0, 65535] { R3557 += 1, R3494 += 1, R3495 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R3557 += 1, R3495 += 1 };
  s2 -> s3 [0, 65535] { R3557 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3557 += 1, R3495 += 1 };
  s3 -> s3 [0, 65535] { R3557 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 84] { R3559 += 1, R3497 += 1, R3477 += 1 };
  s0 -> s0 [0, 65535] { R3558 += 1, R3559 += 1 };
  s0 -> s2 [0, 65535] { R3559 += 1, R3497 += 1, R3476 += 1, R3477 += 1 };
  s0 -> s3 [0, 65535] { R3559 += 1, R3496 += 1, R3497 += 1 };
  s0 -> s4 [85, 85] { R3559 += 1, R3497 += 1, R3477 += 1 };
  s0 -> s5 [85, 85] { R3559 += 1, R3497 += 1, R3477 += 1 };
  s0 -> s1 [88, 65535] { R3559 += 1, R3497 += 1, R3477 += 1 };
  s1 -> s1 [0, 84] { R3559 += 1, R3497 += 1, R3477 += 1 };
  s1 -> s1 [0, 65535] { R3559 += 1, R3497 += 1 };
  s1 -> s6 [0, 65535] { R3559 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s4 [85, 85] { R3559 += 1, R3497 += 1, R3477 += 1 };
  s1 -> s5 [85, 85] { R3559 += 1, R3497 += 1, R3477 += 1 };
  s1 -> s1 [88, 65535] { R3559 += 1, R3497 += 1, R3477 += 1 };
  s2 -> s1 [0, 84] { R3559 += 1, R3497 += 1, R3477 += 1 };
  s2 -> s6 [0, 65535] { R3559 += 1 };
  s2 -> s2 [0, 65535] { R3559 += 1, R3497 += 1, R3476 += 1, R3477 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s4 [85, 85] { R3559 += 1, R3497 += 1, R3477 += 1 };
  s2 -> s5 [85, 85] { R3559 += 1, R3497 += 1, R3477 += 1 };
  s2 -> s1 [88, 65535] { R3559 += 1, R3497 += 1, R3477 += 1 };
  s3 -> s1 [0, 84] { R3559 += 1, R3497 += 1, R3477 += 1 };
  s3 -> s2 [0, 65535] { R3559 += 1, R3497 += 1, R3476 += 1, R3477 += 1 };
  s3 -> s3 [0, 65535] { R3559 += 1, R3496 += 1, R3497 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s4 [85, 85] { R3559 += 1, R3497 += 1, R3477 += 1 };
  s3 -> s5 [85, 85] { R3559 += 1, R3497 += 1, R3477 += 1 };
  s3 -> s1 [88, 65535] { R3559 += 1, R3497 += 1, R3477 += 1 };
  s4 -> s4 [0, 65535] { R3559 += 1, R3497 += 1 };
  s4 -> s6 [0, 65535] { R3559 += 1 };
  s4 -> s7 [0, 65535];
  s5 -> s5 [0, 85] { R3559 += 1, R3497 += 1, R3477 += 1 };
  s5 -> s6 [0, 65535] { R3559 += 1 };
  s5 -> s5 [0, 65535] { R3559 += 1, R3497 += 1 };
  s5 -> s7 [0, 65535];
  s5 -> s5 [88, 65535] { R3559 += 1, R3497 += 1, R3477 += 1 };
  s6 -> s6 [0, 65535] { R3559 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s0 [0, 65535] { R3560 += 1, R3561 += 1 };
  s0 -> s1 [0, 65535] { R3561 += 1, R3517 += 1, R18 += 1 };
  s0 -> s2 [0, 65535] { R3561 += 1, R3516 += 1, R3517 += 1 };
  s1 -> s4 [0, 65535] { R3561 += 1 };
  s1 -> s1 [0, 65535] { R3561 += 1, R3517 += 1, R18 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3561 += 1, R3517 += 1, R18 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3561 += 1, R3516 += 1, R3517 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3561 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 83] { R3563 += 1, R3519 += 1 };
  s0 -> s2 [0, 65535] { R3563 += 1, R3518 += 1, R3519 += 1 };
  s0 -> s0 [0, 65535] { R3562 += 1, R3563 += 1 };
  s0 -> s3 [84, 84] { R3563 += 1, R3519 += 1 };
  s0 -> s4 [84, 84] { R3563 += 1, R3519 += 1 };
  s0 -> s5 [85, 85] { R3563 += 1, R3519 += 1 };
  s0 -> s1 [86, 65535] { R3563 += 1, R3519 += 1 };
  s1 -> s1 [0, 83] { R3563 += 1, R3519 += 1 };
  s1 -> s3 [84, 84] { R3563 += 1, R3519 += 1 };
  s1 -> s4 [84, 84] { R3563 += 1, R3519 += 1 };
  s1 -> s5 [85, 85] { R3563 += 1, R3519 += 1 };
  s1 -> s1 [86, 65535] { R3563 += 1, R3519 += 1 };
  s2 -> s1 [0, 83] { R3563 += 1, R3519 += 1 };
  s2 -> s2 [0, 65535] { R3563 += 1, R3518 += 1, R3519 += 1 };
  s2 -> s3 [84, 84] { R3563 += 1, R3519 += 1 };
  s2 -> s4 [84, 84] { R3563 += 1, R3519 += 1 };
  s2 -> s5 [85, 85] { R3563 += 1, R3519 += 1 };
  s2 -> s1 [86, 65535] { R3563 += 1, R3519 += 1 };
  s3 -> s3 [0, 84] { R3563 += 1, R3519 += 1 };
  s3 -> s7 [85, 85] { R3563 += 1, R3519 += 1 };
  s3 -> s3 [86, 65535] { R3563 += 1, R3519 += 1 };
  s5 -> s5 [0, 83] { R3563 += 1, R3519 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R3563 += 1 };
  s5 -> s7 [84, 84] { R3563 += 1, R3519 += 1 };
  s5 -> s8 [84, 84] { R3563 += 1, R3519 += 1 };
  s5 -> s5 [85, 65535] { R3563 += 1, R3519 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R3563 += 1, R3519 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s9 [0, 65535] { R3563 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R3563 += 1 };
  s9 -> s6 [0, 65535];
  s9 -> s9 [0, 65535] { R3563 += 1 };
  accepting s8, s5, s9, s6, s7;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 83] { R3565 += 1, R3521 += 1, R66 += 1 };
  s0 -> s2 [0, 65535] { R3565 += 1, R3520 += 1, R3521 += 1 };
  s0 -> s0 [0, 65535] { R3564 += 1, R3565 += 1 };
  s0 -> s3 [84, 84] { R3565 += 1, R3521 += 1, R66 += 1 };
  s0 -> s4 [84, 84] { R3565 += 1, R3521 += 1, R66 += 1 };
  s0 -> s1 [85, 65535] { R3565 += 1, R3521 += 1, R66 += 1 };
  s1 -> s1 [0, 83] { R3565 += 1, R3521 += 1, R66 += 1 };
  s1 -> s1 [0, 65535] { R3565 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [84, 84] { R3565 += 1, R3521 += 1, R66 += 1 };
  s1 -> s4 [84, 84] { R3565 += 1, R3521 += 1, R66 += 1 };
  s1 -> s1 [85, 65535] { R3565 += 1, R3521 += 1, R66 += 1 };
  s2 -> s1 [0, 83] { R3565 += 1, R3521 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R3565 += 1, R3520 += 1, R3521 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [84, 84] { R3565 += 1, R3521 += 1, R66 += 1 };
  s2 -> s4 [84, 84] { R3565 += 1, R3521 += 1, R66 += 1 };
  s2 -> s1 [85, 65535] { R3565 += 1, R3521 += 1, R66 += 1 };
  s3 -> s3 [0, 65535] { R3565 += 1, R3521 += 1, R66 += 1 };
  s3 -> s6 [0, 65535] { R3565 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3565 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3565 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 83] { R3567 += 1, R3523 += 1, R68 += 1 };
  s0 -> s0 [0, 65535] { R3566 += 1, R3567 += 1 };
  s0 -> s2 [0, 65535] { R3567 += 1, R3522 += 1, R3523 += 1 };
  s0 -> s3 [84, 84] { R3567 += 1, R3523 += 1, R68 += 1 };
  s0 -> s4 [84, 84] { R3567 += 1, R3523 += 1, R68 += 1 };
  s0 -> s1 [85, 65535] { R3567 += 1, R3523 += 1, R68 += 1 };
  s1 -> s1 [0, 83] { R3567 += 1, R3523 += 1, R68 += 1 };
  s1 -> s1 [0, 65535] { R3567 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [84, 84] { R3567 += 1, R3523 += 1, R68 += 1 };
  s1 -> s4 [84, 84] { R3567 += 1, R3523 += 1, R68 += 1 };
  s1 -> s1 [85, 65535] { R3567 += 1, R3523 += 1, R68 += 1 };
  s2 -> s1 [0, 83] { R3567 += 1, R3523 += 1, R68 += 1 };
  s2 -> s2 [0, 65535] { R3567 += 1, R3522 += 1, R3523 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [84, 84] { R3567 += 1, R3523 += 1, R68 += 1 };
  s2 -> s4 [84, 84] { R3567 += 1, R3523 += 1, R68 += 1 };
  s2 -> s1 [85, 65535] { R3567 += 1, R3523 += 1, R68 += 1 };
  s3 -> s6 [0, 65535] { R3567 += 1 };
  s3 -> s3 [0, 65535] { R3567 += 1, R3523 += 1, R68 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3567 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3567 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 83] { R3569 += 1, R3525 += 1, R70 += 1, R71 += 1 };
  s0 -> s0 [0, 65535] { R3568 += 1, R3569 += 1 };
  s0 -> s2 [0, 65535] { R3569 += 1, R3524 += 1, R3525 += 1 };
  s0 -> s3 [84, 84] { R3569 += 1, R3525 += 1, R70 += 1, R71 += 1 };
  s0 -> s4 [84, 84] { R3569 += 1, R3525 += 1, R70 += 1, R71 += 1 };
  s0 -> s1 [85, 65535] { R3569 += 1, R3525 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 83] { R3569 += 1, R3525 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 65535] { R3569 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [84, 84] { R3569 += 1, R3525 += 1, R70 += 1, R71 += 1 };
  s1 -> s4 [84, 84] { R3569 += 1, R3525 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [85, 65535] { R3569 += 1, R3525 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [0, 83] { R3569 += 1, R3525 += 1, R70 += 1, R71 += 1 };
  s2 -> s2 [0, 65535] { R3569 += 1, R3524 += 1, R3525 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [84, 84] { R3569 += 1, R3525 += 1, R70 += 1, R71 += 1 };
  s2 -> s4 [84, 84] { R3569 += 1, R3525 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [85, 65535] { R3569 += 1, R3525 += 1, R70 += 1, R71 += 1 };
  s3 -> s3 [0, 65535] { R3569 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R3569 += 1, R3525 += 1, R70 += 1, R71 += 1 };
  s4 -> s5 [0, 65535] { R3569 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R3569 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 83] { R3571 += 1, R3527 += 1, R74 += 1, R75 += 1 };
  s0 -> s2 [0, 65535] { R3571 += 1, R3526 += 1, R3527 += 1 };
  s0 -> s0 [0, 65535] { R3570 += 1, R3571 += 1 };
  s0 -> s3 [84, 84] { R3571 += 1, R3527 += 1, R74 += 1, R75 += 1 };
  s0 -> s4 [84, 84] { R3571 += 1, R3527 += 1, R74 += 1, R75 += 1 };
  s0 -> s1 [85, 65535] { R3571 += 1, R3527 += 1, R74 += 1, R75 += 1 };
  s1 -> s1 [0, 83] { R3571 += 1, R3527 += 1, R74 += 1, R75 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R3571 += 1 };
  s1 -> s3 [84, 84] { R3571 += 1, R3527 += 1, R74 += 1, R75 += 1 };
  s1 -> s4 [84, 84] { R3571 += 1, R3527 += 1, R74 += 1, R75 += 1 };
  s1 -> s1 [85, 65535] { R3571 += 1, R3527 += 1, R74 += 1, R75 += 1 };
  s2 -> s1 [0, 83] { R3571 += 1, R3527 += 1, R74 += 1, R75 += 1 };
  s2 -> s2 [0, 65535] { R3571 += 1, R3526 += 1, R3527 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [84, 84] { R3571 += 1, R3527 += 1, R74 += 1, R75 += 1 };
  s2 -> s4 [84, 84] { R3571 += 1, R3527 += 1, R74 += 1, R75 += 1 };
  s2 -> s1 [85, 65535] { R3571 += 1, R3527 += 1, R74 += 1, R75 += 1 };
  s3 -> s3 [0, 65535] { R3571 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R3571 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R3571 += 1, R3527 += 1, R74 += 1, R75 += 1 };
  s5 -> s5 [0, 65535] { R3571 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 83] { R3573 += 1, R3529 += 1, R2620 += 1, R2621 += 1 };
  s0 -> s2 [0, 65535] { R3573 += 1, R3528 += 1, R3529 += 1 };
  s0 -> s0 [0, 65535] { R3572 += 1, R3573 += 1 };
  s0 -> s3 [84, 84] { R3573 += 1, R3529 += 1, R2620 += 1, R2621 += 1 };
  s0 -> s4 [84, 84] { R3573 += 1, R3529 += 1, R2620 += 1, R2621 += 1 };
  s0 -> s1 [85, 65535] { R3573 += 1, R3529 += 1, R2620 += 1, R2621 += 1 };
  s1 -> s1 [0, 83] { R3573 += 1, R3529 += 1, R2620 += 1, R2621 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R3573 += 1 };
  s1 -> s3 [84, 84] { R3573 += 1, R3529 += 1, R2620 += 1, R2621 += 1 };
  s1 -> s4 [84, 84] { R3573 += 1, R3529 += 1, R2620 += 1, R2621 += 1 };
  s1 -> s1 [85, 65535] { R3573 += 1, R3529 += 1, R2620 += 1, R2621 += 1 };
  s2 -> s1 [0, 83] { R3573 += 1, R3529 += 1, R2620 += 1, R2621 += 1 };
  s2 -> s2 [0, 65535] { R3573 += 1, R3528 += 1, R3529 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [84, 84] { R3573 += 1, R3529 += 1, R2620 += 1, R2621 += 1 };
  s2 -> s4 [84, 84] { R3573 += 1, R3529 += 1, R2620 += 1, R2621 += 1 };
  s2 -> s1 [85, 65535] { R3573 += 1, R3529 += 1, R2620 += 1, R2621 += 1 };
  s3 -> s3 [0, 65535] { R3573 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R3573 += 1, R3529 += 1, R2620 += 1, R2621 += 1 };
  s4 -> s5 [0, 65535] { R3573 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R3573 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 83] { R3575 += 1, R3531 += 1, R3469 += 1, R3470 += 1 };
  s0 -> s2 [0, 83] { R3575 += 1, R3531 += 1, R3468 += 1, R3469 += 1 };
  s0 -> s3 [0, 65535] { R3575 += 1, R3530 += 1, R3531 += 1 };
  s0 -> s0 [0, 65535] { R3574 += 1, R3575 += 1 };
  s0 -> s4 [84, 84] { R3575 += 1, R3531 += 1, R3468 += 1, R3469 += 1 };
  s0 -> s5 [84, 84] { R3575 += 1, R3531 += 1, R3468 += 1, R3469 += 1 };
  s0 -> s6 [84, 84] { R3575 += 1, R3531 += 1, R3469 += 1, R3470 += 1 };
  s0 -> s7 [84, 84] { R3575 += 1, R3531 += 1, R3469 += 1, R3470 += 1 };
  s0 -> s1 [85, 65535] { R3575 += 1, R3531 += 1, R3469 += 1, R3470 += 1 };
  s0 -> s2 [85, 65535] { R3575 += 1, R3531 += 1, R3468 += 1, R3469 += 1 };
  s1 -> s11 [0, 83] { R3575 += 1, R3531 += 1 };
  s1 -> s1 [0, 83] { R3575 += 1, R3531 += 1, R3469 += 1, R3470 += 1 };
  s1 -> s12 [84, 84] { R3575 += 1, R3531 += 1 };
  s1 -> s6 [84, 84] { R3575 += 1, R3531 += 1, R3469 += 1, R3470 += 1 };
  s1 -> s8 [84, 84] { R3575 += 1, R3531 += 1 };
  s1 -> s7 [84, 84] { R3575 += 1, R3531 += 1, R3469 += 1, R3470 += 1 };
  s1 -> s11 [85, 65535] { R3575 += 1, R3531 += 1 };
  s1 -> s1 [85, 65535] { R3575 += 1, R3531 += 1, R3469 += 1, R3470 += 1 };
  s2 -> s1 [0, 83] { R3575 += 1, R3531 += 1, R3469 += 1, R3470 += 1 };
  s2 -> s2 [0, 83] { R3575 += 1, R3531 += 1, R3468 += 1, R3469 += 1 };
  s2 -> s4 [84, 84] { R3575 += 1, R3531 += 1, R3468 += 1, R3469 += 1 };
  s2 -> s5 [84, 84] { R3575 += 1, R3531 += 1, R3468 += 1, R3469 += 1 };
  s2 -> s6 [84, 84] { R3575 += 1, R3531 += 1, R3469 += 1, R3470 += 1 };
  s2 -> s7 [84, 84] { R3575 += 1, R3531 += 1, R3469 += 1, R3470 += 1 };
  s2 -> s1 [85, 65535] { R3575 += 1, R3531 += 1, R3469 += 1, R3470 += 1 };
  s2 -> s2 [85, 65535] { R3575 += 1, R3531 += 1, R3468 += 1, R3469 += 1 };
  s3 -> s1 [0, 83] { R3575 += 1, R3531 += 1, R3469 += 1, R3470 += 1 };
  s3 -> s2 [0, 83] { R3575 += 1, R3531 += 1, R3468 += 1, R3469 += 1 };
  s3 -> s3 [0, 65535] { R3575 += 1, R3530 += 1, R3531 += 1 };
  s3 -> s4 [84, 84] { R3575 += 1, R3531 += 1, R3468 += 1, R3469 += 1 };
  s3 -> s5 [84, 84] { R3575 += 1, R3531 += 1, R3468 += 1, R3469 += 1 };
  s3 -> s6 [84, 84] { R3575 += 1, R3531 += 1, R3469 += 1, R3470 += 1 };
  s3 -> s7 [84, 84] { R3575 += 1, R3531 += 1, R3469 += 1, R3470 += 1 };
  s3 -> s1 [85, 65535] { R3575 += 1, R3531 += 1, R3469 += 1, R3470 += 1 };
  s3 -> s2 [85, 65535] { R3575 += 1, R3531 += 1, R3468 += 1, R3469 += 1 };
  s5 -> s5 [0, 65535] { R3575 += 1, R3531 += 1, R3468 += 1, R3469 += 1 };
  s5 -> s6 [0, 65535] { R3575 += 1, R3531 += 1, R3469 += 1, R3470 += 1 };
  s6 -> s6 [0, 65535] { R3575 += 1, R3531 += 1, R3469 += 1, R3470 += 1 };
  s6 -> s8 [0, 65535] { R3575 += 1, R3531 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R3575 += 1, R3531 += 1 };
  s8 -> s10 [0, 65535] { R3575 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R3575 += 1 };
  s11 -> s11 [0, 83] { R3575 += 1, R3531 += 1 };
  s11 -> s11 [0, 65535] { R3575 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s12 [84, 84] { R3575 += 1, R3531 += 1 };
  s11 -> s8 [84, 84] { R3575 += 1, R3531 += 1 };
  s11 -> s11 [85, 65535] { R3575 += 1, R3531 += 1 };
  s12 -> s12 [0, 65535] { R3575 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 83] { R3577 += 1, R3533 += 1, R3474 += 1, R3475 += 1 };
  s0 -> s2 [0, 65535] { R3577 += 1, R3532 += 1, R3533 += 1 };
  s0 -> s0 [0, 65535] { R3576 += 1, R3577 += 1 };
  s0 -> s3 [84, 84] { R3577 += 1, R3533 += 1, R3474 += 1, R3475 += 1 };
  s0 -> s4 [84, 84] { R3577 += 1, R3533 += 1, R3474 += 1, R3475 += 1 };
  s0 -> s1 [85, 65535] { R3577 += 1, R3533 += 1, R3474 += 1, R3475 += 1 };
  s1 -> s1 [0, 83] { R3577 += 1, R3533 += 1, R3474 += 1, R3475 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3577 += 1 };
  s1 -> s3 [84, 84] { R3577 += 1, R3533 += 1, R3474 += 1, R3475 += 1 };
  s1 -> s4 [84, 84] { R3577 += 1, R3533 += 1, R3474 += 1, R3475 += 1 };
  s1 -> s1 [85, 65535] { R3577 += 1, R3533 += 1, R3474 += 1, R3475 += 1 };
  s2 -> s1 [0, 83] { R3577 += 1, R3533 += 1, R3474 += 1, R3475 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3577 += 1, R3532 += 1, R3533 += 1 };
  s2 -> s3 [84, 84] { R3577 += 1, R3533 += 1, R3474 += 1, R3475 += 1 };
  s2 -> s4 [84, 84] { R3577 += 1, R3533 += 1, R3474 += 1, R3475 += 1 };
  s2 -> s1 [85, 65535] { R3577 += 1, R3533 += 1, R3474 += 1, R3475 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R3577 += 1 };
  s3 -> s3 [0, 65535] { R3577 += 1, R3533 += 1, R3474 += 1, R3475 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3577 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3577 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [116, 116];
  accepting s1;
};
};
synchronised {  // Automata constraining P62
automaton P62_0 {
  init s0;
  s0 -> s1 [117, 117];
  accepting s1;
};
};
constraint R1 = R3493 && R2 = R3577 && R20 - R3577 = -1 && R21 = R3577 && R22 - R3577 = -1 && R23 = R3577 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R2623 + -1*R2621 - R53 = 0 && R52 + R2622 + R2620 = 0 && R3492 = 0 && R3518 = 0 && R3519 = 0 && R3530 = 0 && R3531 = 0 && R3534 = 0 && R3535 = R3577 && R3536 = 0 && R3537 = R3577 && R3538 = 0 && R3539 = R3577 && R3540 = 0 && R3541 = R3577 && R3542 = 0 && R3543 = R3577 && R3544 = 0 && R3545 = R3577 && R3546 = 0 && R3547 = R3577 && R3548 = 0 && R3549 = R3577 && R3550 = 0 && R3551 = R3577 && R3552 = 0 && R3553 = R3577 && R3554 = 0 && R3555 = R3577 && R3556 = 0 && R3557 = R3577 && R3558 = 0 && R3559 = R3577 && R3560 = 0 && R3561 = R3577 && R3562 = 0 && R3563 = R3577 && R3564 = 0 && R3565 = R3577 && R3566 = 0 && R3567 = R3577 && R3568 = 0 && R3569 = R3577 && R3570 = 0 && R3571 = R3577 && R3572 = 0 && R3573 = R3577 && R3574 = 0 && R3575 = R3577 && R3576 = 0 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R2623 + -1*R2621 - R53 < 1 && -1 < R3493 && 0 < R3577 && (R48 + R79 + R76 != 0 || ((R42 + R72 + R70 != 0 || R43 + R73 + R71 + -1*R2623 + -1*R2621 - R53 = 0 || R53 + R2623 + R2621 < 1) && (R42 + R72 + R70 = 0 || R53 + R2623 + R2621 < 1))) && (R48 + R79 + R76 != 0 || ((R46 + R77 + R74 != 0 || R47 + R78 + R75 + -1*R2623 + -1*R2621 - R53 = 0 || R53 + R2623 + R2621 < 1) && (R46 + R77 + R74 = 0 || R53 + R2623 + R2621 < 1))) && (R3478 != 0 || R3479 = R3493 || (R17 = 0 && R3493 = 0)) && (R3480 != 0 || R3481 = R3493 || (R17 = 0 && R3493 = 0)) && (R3482 != 0 || R3483 = R3493 || (R17 = 0 && R3493 = 0)) && (R3484 != 0 || R3485 = R3493 || (R17 = 0 && R3493 = 0)) && (R3486 != 0 || R3487 = R3493 || (R17 = 0 && R3493 = 0)) && (R3488 != 0 || R3489 = R3493 || (R17 = 0 && R3493 = 0)) && (R3490 != 0 || R3491 = R3493 || (R17 = 0 && R3493 = 0)) && (R3494 != 0 || R3493 = R3495 || (R17 = 0 && R3493 = 0)) && (R3496 != 0 || R3493 = R3497 || (R17 = 0 && R3493 = 0)) && (R18 = 0 || (R3516 = 0 && R3517 = 0)) && (R18 = 0 || (R3520 = 0 && R3521 = 0)) && (R18 = 0 || (R3522 = 0 && R3523 = 0)) && (R18 = 0 || (R3524 = 0 && R3525 = 0)) && (R18 = 0 || (R3526 = 0 && R3527 = 0)) && (R18 = 0 || (R3528 = 0 && R3529 = 0)) && (R18 = 0 || (R3532 = 0 && R3533 = 0)) && (R19 = 0 || (R3498 = 0 && R3499 = 0)) && (R19 = 0 || (R3500 = 0 && R3501 = 0)) && (R19 = 0 || (R3502 = 0 && R3503 = 0)) && (R19 = 0 || (R3504 = 0 && R3505 = 0)) && (R19 = 0 || (R3506 = 0 && R3507 = 0)) && (R19 = 0 || (R3508 = 0 && R3509 = 0)) && (R19 = 0 || (R3510 = 0 && R3511 = 0)) && (R19 = 0 || (R3512 = 0 && R3513 = 0)) && (R19 = 0 || (R3514 = 0 && R3515 = 0)) && (R48 + R79 + R76 = 0 || (R42 + R72 + R70 = 0 && R43 + R73 + R71 + -1*R2623 + -1*R2621 - R53 = 0)) && (R48 + R79 + R76 = 0 || (R46 + R77 + R74 = 0 && R47 + R78 + R75 + -1*R2623 + -1*R2621 - R53 = 0)) && (R58 + R3473 + R3470 = 0 || (R56 + R3471 + R3468 = 0 && R57 + R3472 + R3469 = 0)) && (R58 + R3473 + R3470 = 0 || (R62 + R3476 + R3474 = 0 && R63 + R3477 + R3475 = 0)) && (R3478 = 0 || (R17 = 0 && R3493 = 0)) && (R3480 = 0 || (R17 = 0 && R3493 = 0)) && (R3482 = 0 || (R17 = 0 && R3493 = 0)) && (R3484 = 0 || (R17 = 0 && R3493 = 0)) && (R3486 = 0 || (R17 = 0 && R3493 = 0)) && (R3488 = 0 || (R17 = 0 && R3493 = 0)) && (R3490 = 0 || (R17 = 0 && R3493 = 0)) && (R3494 = 0 || (R17 = 0 && R3493 = 0)) && (R3496 = 0 || (R17 = 0 && R3493 = 0));
// End of Parikh automata intersection problem
