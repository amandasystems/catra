// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R10252, R10253, R10254, R10255, R10678, R10679, R10680, R10681, R10682, R10683, R10684, R10685, R10686, R10687, R10688, R10689, R10690, R10691, R10692, R10693, R10694, R10695, R10696, R10697, R10698, R10699, R10700, R10701, R10702, R10703, R10704, R10705, R10706, R10707, R10708, R10709, R10710, R10711, R10712, R10713, R10714, R10715, R10716, R10717, R10718, R10719, R10720, R10721, R10722, R10723, R10724, R10725, R10726, R10727, R10728, R10729, R10730, R10731, R10732, R10733, R10734, R10735, R10736, R10737, R10738, R10739, R10740, R10741, R10742, R10743, R10744, R10745, R10746, R10747, R10748, R10749, R10750, R10751, R10752, R10753, R10754, R10755, R10756, R10757, R10758, R10759, R10760, R10761, R10762, R10763, R10764, R10765, R10766, R10767, R10768, R10769, R10770, R10771, R10772, R10773, R10774, R10775, R10776, R10777, R10778, R10779, R10780, R10781, R10782, R10783, R10784, R10785, R10786, R10787, R11, R12, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R70, R71, R72, R73, R7706, R7707, R7708, R7709, R7710, R7711, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [84, 84];
  s0 -> s0 [85, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [84, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 83];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [84, 84];
  s0 -> s1 [85, 65535];
  s1 -> s1 [0, 83];
  s1 -> s2 [84, 84];
  s1 -> s1 [85, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R21 += 1 };
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s1 [0, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R10709 += 1, R19 += 1 };
  s0 -> s0 [0, 65535] { R10708 += 1, R10709 += 1 };
  s1 -> s1 [0, 65535] { R10709 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 83] { R10711 += 1 };
  s0 -> s0 [0, 65535] { R10710 += 1, R10711 += 1 };
  s0 -> s2 [84, 84] { R10711 += 1 };
  s0 -> s3 [84, 84] { R10711 += 1 };
  s0 -> s1 [86, 65535] { R10711 += 1 };
  s1 -> s1 [0, 83] { R10711 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R10711 += 1 };
  s1 -> s3 [84, 84] { R10711 += 1 };
  s1 -> s1 [86, 65535] { R10711 += 1 };
  s2 -> s2 [0, 84] { R10711 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [86, 65535] { R10711 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 83] { R10713 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R10712 += 1, R10713 += 1 };
  s0 -> s2 [84, 84] { R10713 += 1, R38 += 1 };
  s0 -> s3 [84, 84] { R10713 += 1, R38 += 1 };
  s0 -> s1 [85, 65535] { R10713 += 1, R38 += 1 };
  s1 -> s1 [0, 83] { R10713 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R10713 += 1, R38 += 1 };
  s1 -> s3 [84, 84] { R10713 += 1, R38 += 1 };
  s1 -> s1 [85, 65535] { R10713 += 1, R38 += 1 };
  s2 -> s2 [0, 65535] { R10713 += 1, R38 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 83] { R10715 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R10714 += 1, R10715 += 1 };
  s0 -> s2 [84, 84] { R10715 += 1, R40 += 1 };
  s0 -> s3 [84, 84] { R10715 += 1, R40 += 1 };
  s0 -> s1 [85, 65535] { R10715 += 1, R40 += 1 };
  s1 -> s1 [0, 83] { R10715 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R10715 += 1, R40 += 1 };
  s1 -> s3 [84, 84] { R10715 += 1, R40 += 1 };
  s1 -> s1 [85, 65535] { R10715 += 1, R40 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10715 += 1, R40 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 83] { R10717 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R10716 += 1, R10717 += 1 };
  s0 -> s2 [84, 84] { R10717 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [84, 84] { R10717 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [85, 65535] { R10717 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 83] { R10717 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R10717 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [84, 84] { R10717 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [85, 65535] { R10717 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10717 += 1, R42 += 1, R43 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 83] { R10719 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R10718 += 1, R10719 += 1 };
  s0 -> s2 [84, 84] { R10719 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [84, 84] { R10719 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [85, 65535] { R10719 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 83] { R10719 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R10719 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [84, 84] { R10719 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [85, 65535] { R10719 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535] { R10719 += 1, R46 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 83] { R10721 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R10720 += 1, R10721 += 1 };
  s0 -> s2 [84, 84] { R10721 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [84, 84] { R10721 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [85, 65535] { R10721 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 83] { R10721 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R10721 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [84, 84] { R10721 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [85, 65535] { R10721 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10721 += 1, R52 += 1, R53 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 83] { R10723 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R10722 += 1, R10723 += 1 };
  s0 -> s2 [84, 84] { R10723 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [84, 84] { R10723 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [85, 65535] { R10723 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 83] { R10723 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R10723 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [84, 84] { R10723 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [85, 65535] { R10723 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535] { R10723 += 1, R56 += 1, R57 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 83] { R10725 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R10724 += 1, R10725 += 1 };
  s0 -> s2 [84, 84] { R10725 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [84, 84] { R10725 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [85, 65535] { R10725 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 83] { R10725 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [84, 84] { R10725 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [84, 84] { R10725 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [85, 65535] { R10725 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R10725 += 1, R62 += 1, R63 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 83] { R10745 += 1 };
  s0 -> s0 [0, 65535] { R10744 += 1, R10745 += 1 };
  s0 -> s2 [84, 84] { R10745 += 1 };
  s0 -> s1 [85, 65535] { R10745 += 1 };
  s1 -> s1 [0, 83] { R10745 += 1 };
  s1 -> s2 [84, 84] { R10745 += 1 };
  s1 -> s1 [85, 65535] { R10745 += 1 };
  s2 -> s2 [0, 65535] { R10745 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R10747 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R10746 += 1, R10747 += 1 };
  s1 -> s1 [0, 65535] { R10747 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 83] { R10749 += 1 };
  s0 -> s2 [0, 65535] { R10749 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R10748 += 1, R10749 += 1 };
  s0 -> s3 [84, 84] { R10749 += 1 };
  s0 -> s1 [85, 65535] { R10749 += 1 };
  s1 -> s1 [0, 83] { R10749 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [84, 84] { R10749 += 1 };
  s1 -> s1 [85, 65535] { R10749 += 1 };
  s2 -> s1 [0, 83] { R10749 += 1 };
  s2 -> s2 [0, 65535] { R10749 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [84, 84] { R10749 += 1 };
  s2 -> s1 [85, 65535] { R10749 += 1 };
  s3 -> s3 [0, 65535] { R10749 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 83] { R10751 += 1, R10689 += 1 };
  s0 -> s0 [0, 65535] { R10750 += 1, R10751 += 1 };
  s0 -> s2 [0, 65535] { R10751 += 1, R10688 += 1, R10689 += 1 };
  s0 -> s1 [85, 65535] { R10751 += 1, R10689 += 1 };
  s1 -> s1 [0, 83] { R10751 += 1, R10689 += 1 };
  s1 -> s1 [0, 65535] { R10751 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [85, 65535] { R10751 += 1, R10689 += 1 };
  s2 -> s1 [0, 83] { R10751 += 1, R10689 += 1 };
  s2 -> s2 [0, 65535] { R10751 += 1, R10688 += 1, R10689 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [85, 65535] { R10751 += 1, R10689 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s0 [0, 65535] { R10752 += 1, R10753 += 1 };
  s0 -> s1 [0, 65535] { R10753 += 1, R10690 += 1, R10691 += 1 };
  s0 -> s2 [0, 65535] { R10753 += 1, R10691 += 1, R17 += 1 };
  s1 -> s1 [0, 65535] { R10753 += 1, R10690 += 1, R10691 += 1 };
  s1 -> s2 [0, 65535] { R10753 += 1, R10691 += 1, R17 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10753 += 1, R10691 += 1, R17 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R10753 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10753 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 65535] { R10755 += 1, R10693 += 1 };
  s0 -> s0 [0, 65535] { R10754 += 1, R10755 += 1 };
  s0 -> s2 [0, 65535] { R10755 += 1, R10692 += 1, R10693 += 1 };
  s1 -> s4 [0, 65535] { R10755 += 1 };
  s1 -> s1 [0, 65535] { R10755 += 1, R10693 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10755 += 1, R10693 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10755 += 1, R10692 += 1, R10693 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10755 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_23 {
  init s0;
  s0 -> s0 [0, 65535] { R10756 += 1, R10757 += 1 };
  s0 -> s1 [0, 65535] { R10757 += 1, R10694 += 1, R10695 += 1 };
  s0 -> s2 [0, 65535] { R10757 += 1, R10695 += 1, R67 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R10757 += 1, R10694 += 1, R10695 += 1 };
  s1 -> s2 [0, 65535] { R10757 += 1, R10695 += 1, R67 += 1 };
  s2 -> s3 [0, 65535] { R10757 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10757 += 1, R10695 += 1, R67 += 1 };
  s3 -> s3 [0, 65535] { R10757 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 84] { R10759 += 1, R10697 += 1 };
  s0 -> s2 [0, 65535] { R10759 += 1, R10696 += 1, R10697 += 1 };
  s0 -> s3 [0, 65535] { R10759 += 1, R10697 += 1, R69 += 1 };
  s0 -> s0 [0, 65535] { R10758 += 1, R10759 += 1 };
  s0 -> s1 [86, 65535] { R10759 += 1, R10697 += 1 };
  s1 -> s1 [0, 84] { R10759 += 1, R10697 += 1 };
  s1 -> s1 [0, 65535] { R10759 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [86, 65535] { R10759 += 1, R10697 += 1 };
  s2 -> s1 [0, 84] { R10759 += 1, R10697 += 1 };
  s2 -> s2 [0, 65535] { R10759 += 1, R10696 += 1, R10697 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R10759 += 1, R10697 += 1, R69 += 1 };
  s2 -> s1 [86, 65535] { R10759 += 1, R10697 += 1 };
  s3 -> s1 [0, 84] { R10759 += 1, R10697 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R10759 += 1 };
  s3 -> s3 [0, 65535] { R10759 += 1, R10697 += 1, R69 += 1 };
  s3 -> s1 [86, 65535] { R10759 += 1, R10697 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10759 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 84] { R10761 += 1, R10699 += 1, R73 += 1 };
  s0 -> s2 [0, 65535] { R10761 += 1, R10698 += 1, R10699 += 1 };
  s0 -> s3 [0, 65535] { R10761 += 1, R10699 += 1, R72 += 1, R73 += 1 };
  s0 -> s0 [0, 65535] { R10760 += 1, R10761 += 1 };
  s0 -> s1 [86, 65535] { R10761 += 1, R10699 += 1, R73 += 1 };
  s1 -> s1 [0, 84] { R10761 += 1, R10699 += 1, R73 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R10761 += 1 };
  s1 -> s1 [0, 65535] { R10761 += 1, R10699 += 1 };
  s1 -> s1 [86, 65535] { R10761 += 1, R10699 += 1, R73 += 1 };
  s2 -> s1 [0, 84] { R10761 += 1, R10699 += 1, R73 += 1 };
  s2 -> s2 [0, 65535] { R10761 += 1, R10698 += 1, R10699 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R10761 += 1, R10699 += 1, R72 += 1, R73 += 1 };
  s2 -> s1 [86, 65535] { R10761 += 1, R10699 += 1, R73 += 1 };
  s3 -> s1 [0, 84] { R10761 += 1, R10699 += 1, R73 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R10761 += 1 };
  s3 -> s3 [0, 65535] { R10761 += 1, R10699 += 1, R72 += 1, R73 += 1 };
  s3 -> s1 [86, 65535] { R10761 += 1, R10699 += 1, R73 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10761 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R10763 += 1, R10701 += 1 };
  s0 -> s2 [0, 65535] { R10763 += 1, R10700 += 1, R10701 += 1 };
  s0 -> s0 [0, 65535] { R10762 += 1, R10763 += 1 };
  s1 -> s1 [0, 65535] { R10763 += 1, R10701 += 1 };
  s1 -> s4 [0, 65535] { R10763 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10763 += 1, R10701 += 1 };
  s2 -> s2 [0, 65535] { R10763 += 1, R10700 += 1, R10701 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10763 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 85] { R10765 += 1, R10703 += 1, R10255 += 1 };
  s0 -> s2 [0, 65535] { R10765 += 1, R10702 += 1, R10703 += 1 };
  s0 -> s3 [0, 65535] { R10765 += 1, R10703 += 1, R10254 += 1, R10255 += 1 };
  s0 -> s0 [0, 65535] { R10764 += 1, R10765 += 1 };
  s0 -> s4 [87, 87] { R10765 += 1, R10703 += 1, R10255 += 1 };
  s0 -> s1 [88, 65535] { R10765 += 1, R10703 += 1, R10255 += 1 };
  s1 -> s1 [0, 85] { R10765 += 1, R10703 += 1, R10255 += 1 };
  s1 -> s4 [87, 87] { R10765 += 1, R10703 += 1, R10255 += 1 };
  s1 -> s1 [88, 65535] { R10765 += 1, R10703 += 1, R10255 += 1 };
  s2 -> s1 [0, 85] { R10765 += 1, R10703 += 1, R10255 += 1 };
  s2 -> s2 [0, 65535] { R10765 += 1, R10702 += 1, R10703 += 1 };
  s2 -> s3 [0, 65535] { R10765 += 1, R10703 += 1, R10254 += 1, R10255 += 1 };
  s2 -> s4 [87, 87] { R10765 += 1, R10703 += 1, R10255 += 1 };
  s2 -> s1 [88, 65535] { R10765 += 1, R10703 += 1, R10255 += 1 };
  s3 -> s1 [0, 85] { R10765 += 1, R10703 += 1, R10255 += 1 };
  s3 -> s3 [0, 65535] { R10765 += 1, R10703 += 1, R10254 += 1, R10255 += 1 };
  s3 -> s4 [87, 87] { R10765 += 1, R10703 += 1, R10255 += 1 };
  s3 -> s1 [88, 65535] { R10765 += 1, R10703 += 1, R10255 += 1 };
  s4 -> s4 [0, 85] { R10765 += 1, R10703 += 1, R10255 += 1 };
  s4 -> s5 [0, 65535] { R10765 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R10765 += 1, R10703 += 1 };
  s4 -> s4 [87, 65535] { R10765 += 1, R10703 += 1, R10255 += 1 };
  s5 -> s5 [0, 65535] { R10765 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s4, s5, s6;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R10767 += 1, R10705 += 1 };
  s0 -> s0 [0, 65535] { R10766 += 1, R10767 += 1 };
  s0 -> s2 [0, 65535] { R10767 += 1, R10704 += 1, R10705 += 1 };
  s0 -> s3 [0, 65535] { R10767 += 1, R10705 += 1, R10682 += 1, R10683 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R10767 += 1, R10705 += 1 };
  s1 -> s5 [0, 65535] { R10767 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R10767 += 1, R10705 += 1 };
  s2 -> s2 [0, 65535] { R10767 += 1, R10704 += 1, R10705 += 1 };
  s2 -> s3 [0, 65535] { R10767 += 1, R10705 += 1, R10682 += 1, R10683 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R10767 += 1, R10705 += 1 };
  s3 -> s3 [0, 65535] { R10767 += 1, R10705 += 1, R10682 += 1, R10683 += 1 };
  s3 -> s5 [0, 65535] { R10767 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10767 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 84] { R10769 += 1, R10707 += 1, R10687 += 1 };
  s0 -> s2 [0, 65535] { R10769 += 1, R10707 += 1, R10686 += 1, R10687 += 1 };
  s0 -> s3 [0, 65535] { R10769 += 1, R10706 += 1, R10707 += 1 };
  s0 -> s0 [0, 65535] { R10768 += 1, R10769 += 1 };
  s0 -> s4 [85, 85] { R10769 += 1, R10707 += 1, R10687 += 1 };
  s0 -> s5 [85, 85] { R10769 += 1, R10707 += 1, R10687 += 1 };
  s0 -> s1 [88, 65535] { R10769 += 1, R10707 += 1, R10687 += 1 };
  s1 -> s1 [0, 84] { R10769 += 1, R10707 += 1, R10687 += 1 };
  s1 -> s6 [0, 65535] { R10769 += 1 };
  s1 -> s1 [0, 65535] { R10769 += 1, R10707 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s4 [85, 85] { R10769 += 1, R10707 += 1, R10687 += 1 };
  s1 -> s5 [85, 85] { R10769 += 1, R10707 += 1, R10687 += 1 };
  s1 -> s1 [88, 65535] { R10769 += 1, R10707 += 1, R10687 += 1 };
  s2 -> s1 [0, 84] { R10769 += 1, R10707 += 1, R10687 += 1 };
  s2 -> s6 [0, 65535] { R10769 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s2 [0, 65535] { R10769 += 1, R10707 += 1, R10686 += 1, R10687 += 1 };
  s2 -> s4 [85, 85] { R10769 += 1, R10707 += 1, R10687 += 1 };
  s2 -> s5 [85, 85] { R10769 += 1, R10707 += 1, R10687 += 1 };
  s2 -> s1 [88, 65535] { R10769 += 1, R10707 += 1, R10687 += 1 };
  s3 -> s1 [0, 84] { R10769 += 1, R10707 += 1, R10687 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s2 [0, 65535] { R10769 += 1, R10707 += 1, R10686 += 1, R10687 += 1 };
  s3 -> s3 [0, 65535] { R10769 += 1, R10706 += 1, R10707 += 1 };
  s3 -> s4 [85, 85] { R10769 += 1, R10707 += 1, R10687 += 1 };
  s3 -> s5 [85, 85] { R10769 += 1, R10707 += 1, R10687 += 1 };
  s3 -> s1 [88, 65535] { R10769 += 1, R10707 += 1, R10687 += 1 };
  s4 -> s6 [0, 65535] { R10769 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s4 [0, 65535] { R10769 += 1, R10707 += 1 };
  s5 -> s5 [0, 85] { R10769 += 1, R10707 += 1, R10687 += 1 };
  s5 -> s6 [0, 65535] { R10769 += 1 };
  s5 -> s7 [0, 65535];
  s5 -> s5 [0, 65535] { R10769 += 1, R10707 += 1 };
  s5 -> s5 [88, 65535] { R10769 += 1, R10707 += 1, R10687 += 1 };
  s6 -> s6 [0, 65535] { R10769 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R10771 += 1, R10727 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R10770 += 1, R10771 += 1 };
  s0 -> s2 [0, 65535] { R10771 += 1, R10726 += 1, R10727 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R10771 += 1, R10727 += 1, R18 += 1 };
  s1 -> s4 [0, 65535] { R10771 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10771 += 1, R10727 += 1, R18 += 1 };
  s2 -> s2 [0, 65535] { R10771 += 1, R10726 += 1, R10727 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10771 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 83] { R10773 += 1, R10729 += 1 };
  s0 -> s0 [0, 65535] { R10772 += 1, R10773 += 1 };
  s0 -> s2 [0, 65535] { R10773 += 1, R10728 += 1, R10729 += 1 };
  s0 -> s3 [84, 84] { R10773 += 1, R10729 += 1 };
  s0 -> s4 [84, 84] { R10773 += 1, R10729 += 1 };
  s0 -> s5 [85, 85] { R10773 += 1, R10729 += 1 };
  s0 -> s1 [86, 65535] { R10773 += 1, R10729 += 1 };
  s1 -> s1 [0, 83] { R10773 += 1, R10729 += 1 };
  s1 -> s3 [84, 84] { R10773 += 1, R10729 += 1 };
  s1 -> s4 [84, 84] { R10773 += 1, R10729 += 1 };
  s1 -> s5 [85, 85] { R10773 += 1, R10729 += 1 };
  s1 -> s1 [86, 65535] { R10773 += 1, R10729 += 1 };
  s2 -> s1 [0, 83] { R10773 += 1, R10729 += 1 };
  s2 -> s2 [0, 65535] { R10773 += 1, R10728 += 1, R10729 += 1 };
  s2 -> s3 [84, 84] { R10773 += 1, R10729 += 1 };
  s2 -> s4 [84, 84] { R10773 += 1, R10729 += 1 };
  s2 -> s5 [85, 85] { R10773 += 1, R10729 += 1 };
  s2 -> s1 [86, 65535] { R10773 += 1, R10729 += 1 };
  s4 -> s4 [0, 84] { R10773 += 1, R10729 += 1 };
  s4 -> s7 [85, 85] { R10773 += 1, R10729 += 1 };
  s4 -> s4 [86, 65535] { R10773 += 1, R10729 += 1 };
  s5 -> s5 [0, 83] { R10773 += 1, R10729 += 1 };
  s5 -> s5 [0, 65535] { R10773 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [84, 84] { R10773 += 1, R10729 += 1 };
  s5 -> s8 [84, 84] { R10773 += 1, R10729 += 1 };
  s5 -> s5 [85, 65535] { R10773 += 1, R10729 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R10773 += 1, R10729 += 1 };
  s7 -> s9 [0, 65535] { R10773 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R10773 += 1 };
  s8 -> s6 [0, 65535];
  s9 -> s9 [0, 65535] { R10773 += 1 };
  s9 -> s6 [0, 65535];
  accepting s8, s5, s9, s6, s7;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 83] { R10775 += 1, R10731 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R10774 += 1, R10775 += 1 };
  s0 -> s2 [0, 65535] { R10775 += 1, R10730 += 1, R10731 += 1 };
  s0 -> s3 [84, 84] { R10775 += 1, R10731 += 1, R66 += 1 };
  s0 -> s4 [84, 84] { R10775 += 1, R10731 += 1, R66 += 1 };
  s0 -> s1 [85, 65535] { R10775 += 1, R10731 += 1, R66 += 1 };
  s1 -> s1 [0, 83] { R10775 += 1, R10731 += 1, R66 += 1 };
  s1 -> s1 [0, 65535] { R10775 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [84, 84] { R10775 += 1, R10731 += 1, R66 += 1 };
  s1 -> s4 [84, 84] { R10775 += 1, R10731 += 1, R66 += 1 };
  s1 -> s1 [85, 65535] { R10775 += 1, R10731 += 1, R66 += 1 };
  s2 -> s1 [0, 83] { R10775 += 1, R10731 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R10775 += 1, R10730 += 1, R10731 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [84, 84] { R10775 += 1, R10731 += 1, R66 += 1 };
  s2 -> s4 [84, 84] { R10775 += 1, R10731 += 1, R66 += 1 };
  s2 -> s1 [85, 65535] { R10775 += 1, R10731 += 1, R66 += 1 };
  s3 -> s3 [0, 65535] { R10775 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R10775 += 1 };
  s4 -> s4 [0, 65535] { R10775 += 1, R10731 += 1, R66 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R10775 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 83] { R10777 += 1, R10733 += 1, R68 += 1 };
  s0 -> s2 [0, 65535] { R10777 += 1, R10732 += 1, R10733 += 1 };
  s0 -> s0 [0, 65535] { R10776 += 1, R10777 += 1 };
  s0 -> s3 [84, 84] { R10777 += 1, R10733 += 1, R68 += 1 };
  s0 -> s4 [84, 84] { R10777 += 1, R10733 += 1, R68 += 1 };
  s0 -> s1 [85, 65535] { R10777 += 1, R10733 += 1, R68 += 1 };
  s1 -> s1 [0, 83] { R10777 += 1, R10733 += 1, R68 += 1 };
  s1 -> s1 [0, 65535] { R10777 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [84, 84] { R10777 += 1, R10733 += 1, R68 += 1 };
  s1 -> s4 [84, 84] { R10777 += 1, R10733 += 1, R68 += 1 };
  s1 -> s1 [85, 65535] { R10777 += 1, R10733 += 1, R68 += 1 };
  s2 -> s1 [0, 83] { R10777 += 1, R10733 += 1, R68 += 1 };
  s2 -> s2 [0, 65535] { R10777 += 1, R10732 += 1, R10733 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [84, 84] { R10777 += 1, R10733 += 1, R68 += 1 };
  s2 -> s4 [84, 84] { R10777 += 1, R10733 += 1, R68 += 1 };
  s2 -> s1 [85, 65535] { R10777 += 1, R10733 += 1, R68 += 1 };
  s3 -> s3 [0, 65535] { R10777 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R10777 += 1 };
  s4 -> s4 [0, 65535] { R10777 += 1, R10733 += 1, R68 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R10777 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 83] { R10779 += 1, R10735 += 1, R70 += 1, R71 += 1 };
  s0 -> s0 [0, 65535] { R10778 += 1, R10779 += 1 };
  s0 -> s2 [0, 65535] { R10779 += 1, R10734 += 1, R10735 += 1 };
  s0 -> s3 [84, 84] { R10779 += 1, R10735 += 1, R70 += 1, R71 += 1 };
  s0 -> s4 [84, 84] { R10779 += 1, R10735 += 1, R70 += 1, R71 += 1 };
  s0 -> s1 [85, 65535] { R10779 += 1, R10735 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 83] { R10779 += 1, R10735 += 1, R70 += 1, R71 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10779 += 1 };
  s1 -> s3 [84, 84] { R10779 += 1, R10735 += 1, R70 += 1, R71 += 1 };
  s1 -> s4 [84, 84] { R10779 += 1, R10735 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [85, 65535] { R10779 += 1, R10735 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [0, 83] { R10779 += 1, R10735 += 1, R70 += 1, R71 += 1 };
  s2 -> s2 [0, 65535] { R10779 += 1, R10734 += 1, R10735 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [84, 84] { R10779 += 1, R10735 += 1, R70 += 1, R71 += 1 };
  s2 -> s4 [84, 84] { R10779 += 1, R10735 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [85, 65535] { R10779 += 1, R10735 += 1, R70 += 1, R71 += 1 };
  s3 -> s6 [0, 65535] { R10779 += 1 };
  s3 -> s3 [0, 65535] { R10779 += 1, R10735 += 1, R70 += 1, R71 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10779 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10779 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 83] { R10781 += 1, R10737 += 1, R7707 += 1, R7708 += 1 };
  s0 -> s2 [0, 83] { R10781 += 1, R10737 += 1, R7706 += 1, R7707 += 1 };
  s0 -> s3 [0, 65535] { R10781 += 1, R10736 += 1, R10737 += 1 };
  s0 -> s0 [0, 65535] { R10780 += 1, R10781 += 1 };
  s0 -> s4 [84, 84] { R10781 += 1, R10737 += 1, R7707 += 1, R7708 += 1 };
  s0 -> s5 [84, 84] { R10781 += 1, R10737 += 1, R7707 += 1, R7708 += 1 };
  s0 -> s6 [84, 84] { R10781 += 1, R10737 += 1, R7706 += 1, R7707 += 1 };
  s0 -> s7 [84, 84] { R10781 += 1, R10737 += 1, R7706 += 1, R7707 += 1 };
  s0 -> s1 [85, 65535] { R10781 += 1, R10737 += 1, R7707 += 1, R7708 += 1 };
  s0 -> s2 [85, 65535] { R10781 += 1, R10737 += 1, R7706 += 1, R7707 += 1 };
  s1 -> s11 [0, 83] { R10781 += 1, R10737 += 1 };
  s1 -> s1 [0, 83] { R10781 += 1, R10737 += 1, R7707 += 1, R7708 += 1 };
  s1 -> s4 [84, 84] { R10781 += 1, R10737 += 1, R7707 += 1, R7708 += 1 };
  s1 -> s8 [84, 84] { R10781 += 1, R10737 += 1 };
  s1 -> s5 [84, 84] { R10781 += 1, R10737 += 1, R7707 += 1, R7708 += 1 };
  s1 -> s12 [84, 84] { R10781 += 1, R10737 += 1 };
  s1 -> s11 [85, 65535] { R10781 += 1, R10737 += 1 };
  s1 -> s1 [85, 65535] { R10781 += 1, R10737 += 1, R7707 += 1, R7708 += 1 };
  s2 -> s1 [0, 83] { R10781 += 1, R10737 += 1, R7707 += 1, R7708 += 1 };
  s2 -> s2 [0, 83] { R10781 += 1, R10737 += 1, R7706 += 1, R7707 += 1 };
  s2 -> s4 [84, 84] { R10781 += 1, R10737 += 1, R7707 += 1, R7708 += 1 };
  s2 -> s5 [84, 84] { R10781 += 1, R10737 += 1, R7707 += 1, R7708 += 1 };
  s2 -> s6 [84, 84] { R10781 += 1, R10737 += 1, R7706 += 1, R7707 += 1 };
  s2 -> s7 [84, 84] { R10781 += 1, R10737 += 1, R7706 += 1, R7707 += 1 };
  s2 -> s1 [85, 65535] { R10781 += 1, R10737 += 1, R7707 += 1, R7708 += 1 };
  s2 -> s2 [85, 65535] { R10781 += 1, R10737 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s1 [0, 83] { R10781 += 1, R10737 += 1, R7707 += 1, R7708 += 1 };
  s3 -> s2 [0, 83] { R10781 += 1, R10737 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s3 [0, 65535] { R10781 += 1, R10736 += 1, R10737 += 1 };
  s3 -> s4 [84, 84] { R10781 += 1, R10737 += 1, R7707 += 1, R7708 += 1 };
  s3 -> s5 [84, 84] { R10781 += 1, R10737 += 1, R7707 += 1, R7708 += 1 };
  s3 -> s6 [84, 84] { R10781 += 1, R10737 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s7 [84, 84] { R10781 += 1, R10737 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s1 [85, 65535] { R10781 += 1, R10737 += 1, R7707 += 1, R7708 += 1 };
  s3 -> s2 [85, 65535] { R10781 += 1, R10737 += 1, R7706 += 1, R7707 += 1 };
  s4 -> s4 [0, 65535] { R10781 += 1, R10737 += 1, R7707 += 1, R7708 += 1 };
  s4 -> s8 [0, 65535] { R10781 += 1, R10737 += 1 };
  s7 -> s4 [0, 65535] { R10781 += 1, R10737 += 1, R7707 += 1, R7708 += 1 };
  s7 -> s7 [0, 65535] { R10781 += 1, R10737 += 1, R7706 += 1, R7707 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R10781 += 1, R10737 += 1 };
  s8 -> s10 [0, 65535] { R10781 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R10781 += 1 };
  s11 -> s11 [0, 83] { R10781 += 1, R10737 += 1 };
  s11 -> s11 [0, 65535] { R10781 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s8 [84, 84] { R10781 += 1, R10737 += 1 };
  s11 -> s12 [84, 84] { R10781 += 1, R10737 += 1 };
  s11 -> s11 [85, 65535] { R10781 += 1, R10737 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R10781 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 83] { R10783 += 1, R10739 += 1, R10252 += 1, R10253 += 1 };
  s0 -> s0 [0, 65535] { R10782 += 1, R10783 += 1 };
  s0 -> s2 [0, 65535] { R10783 += 1, R10738 += 1, R10739 += 1 };
  s0 -> s3 [84, 84] { R10783 += 1, R10739 += 1, R10252 += 1, R10253 += 1 };
  s0 -> s4 [84, 84] { R10783 += 1, R10739 += 1, R10252 += 1, R10253 += 1 };
  s0 -> s1 [85, 65535] { R10783 += 1, R10739 += 1, R10252 += 1, R10253 += 1 };
  s1 -> s1 [0, 83] { R10783 += 1, R10739 += 1, R10252 += 1, R10253 += 1 };
  s1 -> s1 [0, 65535] { R10783 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [84, 84] { R10783 += 1, R10739 += 1, R10252 += 1, R10253 += 1 };
  s1 -> s4 [84, 84] { R10783 += 1, R10739 += 1, R10252 += 1, R10253 += 1 };
  s1 -> s1 [85, 65535] { R10783 += 1, R10739 += 1, R10252 += 1, R10253 += 1 };
  s2 -> s1 [0, 83] { R10783 += 1, R10739 += 1, R10252 += 1, R10253 += 1 };
  s2 -> s2 [0, 65535] { R10783 += 1, R10738 += 1, R10739 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [84, 84] { R10783 += 1, R10739 += 1, R10252 += 1, R10253 += 1 };
  s2 -> s4 [84, 84] { R10783 += 1, R10739 += 1, R10252 += 1, R10253 += 1 };
  s2 -> s1 [85, 65535] { R10783 += 1, R10739 += 1, R10252 += 1, R10253 += 1 };
  s3 -> s3 [0, 65535] { R10783 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R10783 += 1, R10739 += 1, R10252 += 1, R10253 += 1 };
  s4 -> s5 [0, 65535] { R10783 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R10783 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 83] { R10785 += 1, R10741 += 1, R10679 += 1, R10680 += 1 };
  s0 -> s2 [0, 83] { R10785 += 1, R10741 += 1, R10678 += 1, R10679 += 1 };
  s0 -> s3 [0, 65535] { R10785 += 1, R10740 += 1, R10741 += 1 };
  s0 -> s0 [0, 65535] { R10784 += 1, R10785 += 1 };
  s0 -> s4 [84, 84] { R10785 += 1, R10741 += 1, R10679 += 1, R10680 += 1 };
  s0 -> s5 [84, 84] { R10785 += 1, R10741 += 1, R10679 += 1, R10680 += 1 };
  s0 -> s6 [84, 84] { R10785 += 1, R10741 += 1, R10678 += 1, R10679 += 1 };
  s0 -> s7 [84, 84] { R10785 += 1, R10741 += 1, R10678 += 1, R10679 += 1 };
  s0 -> s1 [85, 65535] { R10785 += 1, R10741 += 1, R10679 += 1, R10680 += 1 };
  s0 -> s2 [85, 65535] { R10785 += 1, R10741 += 1, R10678 += 1, R10679 += 1 };
  s1 -> s1 [0, 83] { R10785 += 1, R10741 += 1, R10679 += 1, R10680 += 1 };
  s1 -> s1 [0, 65535] { R10785 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s4 [84, 84] { R10785 += 1, R10741 += 1, R10679 += 1, R10680 += 1 };
  s1 -> s5 [84, 84] { R10785 += 1, R10741 += 1, R10679 += 1, R10680 += 1 };
  s1 -> s1 [85, 65535] { R10785 += 1, R10741 += 1, R10679 += 1, R10680 += 1 };
  s2 -> s1 [0, 83] { R10785 += 1, R10741 += 1, R10679 += 1, R10680 += 1 };
  s2 -> s2 [0, 83] { R10785 += 1, R10741 += 1, R10678 += 1, R10679 += 1 };
  s2 -> s4 [84, 84] { R10785 += 1, R10741 += 1, R10679 += 1, R10680 += 1 };
  s2 -> s5 [84, 84] { R10785 += 1, R10741 += 1, R10679 += 1, R10680 += 1 };
  s2 -> s6 [84, 84] { R10785 += 1, R10741 += 1, R10678 += 1, R10679 += 1 };
  s2 -> s7 [84, 84] { R10785 += 1, R10741 += 1, R10678 += 1, R10679 += 1 };
  s2 -> s1 [85, 65535] { R10785 += 1, R10741 += 1, R10679 += 1, R10680 += 1 };
  s2 -> s2 [85, 65535] { R10785 += 1, R10741 += 1, R10678 += 1, R10679 += 1 };
  s3 -> s1 [0, 83] { R10785 += 1, R10741 += 1, R10679 += 1, R10680 += 1 };
  s3 -> s2 [0, 83] { R10785 += 1, R10741 += 1, R10678 += 1, R10679 += 1 };
  s3 -> s3 [0, 65535] { R10785 += 1, R10740 += 1, R10741 += 1 };
  s3 -> s4 [84, 84] { R10785 += 1, R10741 += 1, R10679 += 1, R10680 += 1 };
  s3 -> s5 [84, 84] { R10785 += 1, R10741 += 1, R10679 += 1, R10680 += 1 };
  s3 -> s6 [84, 84] { R10785 += 1, R10741 += 1, R10678 += 1, R10679 += 1 };
  s3 -> s7 [84, 84] { R10785 += 1, R10741 += 1, R10678 += 1, R10679 += 1 };
  s3 -> s1 [85, 65535] { R10785 += 1, R10741 += 1, R10679 += 1, R10680 += 1 };
  s3 -> s2 [85, 65535] { R10785 += 1, R10741 += 1, R10678 += 1, R10679 += 1 };
  s4 -> s4 [0, 65535] { R10785 += 1, R10741 += 1, R10679 += 1, R10680 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s9 [0, 65535] { R10785 += 1 };
  s5 -> s5 [0, 65535] { R10785 += 1 };
  s5 -> s8 [0, 65535];
  s6 -> s4 [0, 65535] { R10785 += 1, R10741 += 1, R10679 += 1, R10680 += 1 };
  s6 -> s6 [0, 65535] { R10785 += 1, R10741 += 1, R10678 += 1, R10679 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R10785 += 1 };
  accepting s4, s8, s5, s9, s1;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 83] { R10787 += 1, R10743 += 1, R10684 += 1, R10685 += 1 };
  s0 -> s2 [0, 65535] { R10787 += 1, R10742 += 1, R10743 += 1 };
  s0 -> s0 [0, 65535] { R10786 += 1, R10787 += 1 };
  s0 -> s3 [84, 84] { R10787 += 1, R10743 += 1, R10684 += 1, R10685 += 1 };
  s0 -> s4 [84, 84] { R10787 += 1, R10743 += 1, R10684 += 1, R10685 += 1 };
  s0 -> s1 [85, 65535] { R10787 += 1, R10743 += 1, R10684 += 1, R10685 += 1 };
  s1 -> s1 [0, 83] { R10787 += 1, R10743 += 1, R10684 += 1, R10685 += 1 };
  s1 -> s1 [0, 65535] { R10787 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [84, 84] { R10787 += 1, R10743 += 1, R10684 += 1, R10685 += 1 };
  s1 -> s4 [84, 84] { R10787 += 1, R10743 += 1, R10684 += 1, R10685 += 1 };
  s1 -> s1 [85, 65535] { R10787 += 1, R10743 += 1, R10684 += 1, R10685 += 1 };
  s2 -> s1 [0, 83] { R10787 += 1, R10743 += 1, R10684 += 1, R10685 += 1 };
  s2 -> s2 [0, 65535] { R10787 += 1, R10742 += 1, R10743 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [84, 84] { R10787 += 1, R10743 += 1, R10684 += 1, R10685 += 1 };
  s2 -> s4 [84, 84] { R10787 += 1, R10743 += 1, R10684 += 1, R10685 += 1 };
  s2 -> s1 [85, 65535] { R10787 += 1, R10743 += 1, R10684 += 1, R10685 += 1 };
  s3 -> s3 [0, 65535] { R10787 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R10787 += 1 };
  s4 -> s4 [0, 65535] { R10787 += 1, R10743 += 1, R10684 += 1, R10685 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R10787 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [116, 116];
  accepting s1;
};
};
synchronised {  // Automata constraining P62
automaton P62_0 {
  init s0;
  s0 -> s1 [117, 117];
  accepting s1;
};
};
constraint R1 = R10703 && R2 = R10787 && R20 - R10787 = -1 && R21 = R10787 && R22 - R10787 = -1 && R23 = R10787 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R10255 + -1*R10253 - R53 = 0 && R52 + R10254 + R10252 = 0 && R10702 = 0 && R10728 = 0 && R10729 = 0 && R10736 = 0 && R10737 = 0 && R10740 = 0 && R10741 = 0 && R10744 = 0 && R10745 = R10787 && R10746 = 0 && R10747 = R10787 && R10748 = 0 && R10749 = R10787 && R10750 = 0 && R10751 = R10787 && R10752 = 0 && R10753 = R10787 && R10754 = 0 && R10755 = R10787 && R10756 = 0 && R10757 = R10787 && R10758 = 0 && R10759 = R10787 && R10760 = 0 && R10761 = R10787 && R10762 = 0 && R10763 = R10787 && R10764 = 0 && R10765 = R10787 && R10766 = 0 && R10767 = R10787 && R10768 = 0 && R10769 = R10787 && R10770 = 0 && R10771 = R10787 && R10772 = 0 && R10773 = R10787 && R10774 = 0 && R10775 = R10787 && R10776 = 0 && R10777 = R10787 && R10778 = 0 && R10779 = R10787 && R10780 = 0 && R10781 = R10787 && R10782 = 0 && R10783 = R10787 && R10784 = 0 && R10785 = R10787 && R10786 = 0 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R10255 + -1*R10253 - R53 < 1 && -1 < R10703 && 0 < R10787 && (R48 + R7711 + R7708 != 0 || ((R42 + R72 + R70 != 0 || R43 + R73 + R71 + -1*R10255 + -1*R10253 - R53 = 0 || R53 + R10255 + R10253 < 1) && (R42 + R72 + R70 = 0 || R53 + R10255 + R10253 < 1))) && (R48 + R7711 + R7708 != 0 || ((R46 + R7709 + R7706 != 0 || R47 + R7710 + R7707 + -1*R10255 + -1*R10253 - R53 = 0 || R53 + R10255 + R10253 < 1) && (R46 + R7709 + R7706 = 0 || R53 + R10255 + R10253 < 1))) && (R10688 != 0 || R10689 = R10703 || (R17 = 0 && R10703 = 0)) && (R10690 != 0 || R10691 = R10703 || (R17 = 0 && R10703 = 0)) && (R10692 != 0 || R10693 = R10703 || (R17 = 0 && R10703 = 0)) && (R10694 != 0 || R10695 = R10703 || (R17 = 0 && R10703 = 0)) && (R10696 != 0 || R10697 = R10703 || (R17 = 0 && R10703 = 0)) && (R10698 != 0 || R10699 = R10703 || (R17 = 0 && R10703 = 0)) && (R10700 != 0 || R10701 = R10703 || (R17 = 0 && R10703 = 0)) && (R10704 != 0 || R10703 = R10705 || (R17 = 0 && R10703 = 0)) && (R10706 != 0 || R10703 = R10707 || (R17 = 0 && R10703 = 0)) && (R18 = 0 || (R10726 = 0 && R10727 = 0)) && (R18 = 0 || (R10730 = 0 && R10731 = 0)) && (R18 = 0 || (R10732 = 0 && R10733 = 0)) && (R18 = 0 || (R10734 = 0 && R10735 = 0)) && (R18 = 0 || (R10738 = 0 && R10739 = 0)) && (R18 = 0 || (R10742 = 0 && R10743 = 0)) && (R19 = 0 || (R10708 = 0 && R10709 = 0)) && (R19 = 0 || (R10710 = 0 && R10711 = 0)) && (R19 = 0 || (R10712 = 0 && R10713 = 0)) && (R19 = 0 || (R10714 = 0 && R10715 = 0)) && (R19 = 0 || (R10716 = 0 && R10717 = 0)) && (R19 = 0 || (R10718 = 0 && R10719 = 0)) && (R19 = 0 || (R10720 = 0 && R10721 = 0)) && (R19 = 0 || (R10722 = 0 && R10723 = 0)) && (R19 = 0 || (R10724 = 0 && R10725 = 0)) && (R48 + R7711 + R7708 = 0 || (R42 + R72 + R70 = 0 && R43 + R73 + R71 + -1*R10255 + -1*R10253 - R53 = 0)) && (R48 + R7711 + R7708 = 0 || (R46 + R7709 + R7706 = 0 && R47 + R7710 + R7707 + -1*R10255 + -1*R10253 - R53 = 0)) && (R58 + R10683 + R10680 = 0 || (R56 + R10681 + R10678 = 0 && R57 + R10682 + R10679 = 0)) && (R58 + R10683 + R10680 = 0 || (R62 + R10686 + R10684 = 0 && R63 + R10687 + R10685 = 0)) && (R10688 = 0 || (R17 = 0 && R10703 = 0)) && (R10690 = 0 || (R17 = 0 && R10703 = 0)) && (R10692 = 0 || (R17 = 0 && R10703 = 0)) && (R10694 = 0 || (R17 = 0 && R10703 = 0)) && (R10696 = 0 || (R17 = 0 && R10703 = 0)) && (R10698 = 0 || (R17 = 0 && R10703 = 0)) && (R10700 = 0 || (R17 = 0 && R10703 = 0)) && (R10704 = 0 || (R17 = 0 && R10703 = 0)) && (R10706 = 0 || (R17 = 0 && R10703 = 0));
// End of Parikh automata intersection problem
