// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R12, R1350, R1351, R1352, R1353, R17, R18, R19, R2, R20, R21, R2198, R2199, R22, R2200, R2201, R2202, R2203, R23, R24, R25, R2516, R2517, R2518, R2519, R2520, R2521, R2522, R2523, R2524, R2525, R2526, R2527, R2528, R2529, R2530, R2531, R2532, R2533, R2534, R2535, R2536, R2537, R2538, R2539, R2540, R2541, R2542, R2543, R2544, R2545, R2546, R2547, R2548, R2549, R2550, R2551, R2552, R2553, R2554, R2555, R2556, R2557, R2558, R2559, R2560, R2561, R2562, R2563, R2564, R2565, R2566, R2567, R2568, R2569, R2570, R2571, R2572, R2573, R2574, R2575, R2576, R2577, R2578, R2579, R2580, R2581, R2582, R2583, R2584, R2585, R2586, R2587, R2588, R2589, R2590, R2591, R2592, R2593, R2594, R2595, R2596, R2597, R2598, R2599, R26, R2600, R2601, R2602, R2603, R2604, R2605, R2606, R2607, R2608, R2609, R2610, R2611, R2612, R2613, R2614, R2615, R2616, R2617, R2618, R2619, R27, R3, R38, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R70, R71, R72, R73, R74, R75, R76, R77, R78, R79, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 72];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [73, 73];
  s0 -> s1 [74, 65535];
  s1 -> s1 [0, 72];
  s1 -> s2 [73, 73];
  s1 -> s1 [74, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s1 [0, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R25 += 1 };
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R2540 += 1, R2541 += 1 };
  s0 -> s1 [0, 65535] { R2541 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R2541 += 1, R19 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 72] { R2543 += 1 };
  s0 -> s0 [0, 65535] { R2542 += 1, R2543 += 1 };
  s0 -> s2 [73, 73] { R2543 += 1 };
  s0 -> s3 [73, 73] { R2543 += 1 };
  s0 -> s1 [82, 65535] { R2543 += 1 };
  s1 -> s1 [0, 72] { R2543 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R2543 += 1 };
  s1 -> s3 [73, 73] { R2543 += 1 };
  s1 -> s1 [82, 65535] { R2543 += 1 };
  s2 -> s2 [0, 73] { R2543 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [82, 65535] { R2543 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 72] { R2545 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R2544 += 1, R2545 += 1 };
  s0 -> s2 [73, 73] { R2545 += 1, R38 += 1 };
  s0 -> s3 [73, 73] { R2545 += 1, R38 += 1 };
  s0 -> s1 [74, 65535] { R2545 += 1, R38 += 1 };
  s1 -> s1 [0, 72] { R2545 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R2545 += 1, R38 += 1 };
  s1 -> s3 [73, 73] { R2545 += 1, R38 += 1 };
  s1 -> s1 [74, 65535] { R2545 += 1, R38 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R2545 += 1, R38 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 72] { R2547 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R2546 += 1, R2547 += 1 };
  s0 -> s2 [73, 73] { R2547 += 1, R40 += 1 };
  s0 -> s3 [73, 73] { R2547 += 1, R40 += 1 };
  s0 -> s1 [74, 65535] { R2547 += 1, R40 += 1 };
  s1 -> s1 [0, 72] { R2547 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R2547 += 1, R40 += 1 };
  s1 -> s3 [73, 73] { R2547 += 1, R40 += 1 };
  s1 -> s1 [74, 65535] { R2547 += 1, R40 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2547 += 1, R40 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 72] { R2549 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R2548 += 1, R2549 += 1 };
  s0 -> s2 [73, 73] { R2549 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [73, 73] { R2549 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [74, 65535] { R2549 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 72] { R2549 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R2549 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [73, 73] { R2549 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [74, 65535] { R2549 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2549 += 1, R42 += 1, R43 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 72] { R2551 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R2550 += 1, R2551 += 1 };
  s0 -> s2 [73, 73] { R2551 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [73, 73] { R2551 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [74, 65535] { R2551 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 72] { R2551 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R2551 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [73, 73] { R2551 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [74, 65535] { R2551 += 1, R46 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2551 += 1, R46 += 1, R47 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 72] { R2553 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R2552 += 1, R2553 += 1 };
  s0 -> s2 [73, 73] { R2553 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [73, 73] { R2553 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [74, 65535] { R2553 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 72] { R2553 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R2553 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [73, 73] { R2553 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [74, 65535] { R2553 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2553 += 1, R52 += 1, R53 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 72] { R2555 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R2554 += 1, R2555 += 1 };
  s0 -> s2 [73, 73] { R2555 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [73, 73] { R2555 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [74, 65535] { R2555 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 72] { R2555 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R2555 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [73, 73] { R2555 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [74, 65535] { R2555 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535] { R2555 += 1, R56 += 1, R57 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 72] { R2557 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R2556 += 1, R2557 += 1 };
  s0 -> s2 [73, 73] { R2557 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [73, 73] { R2557 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [74, 65535] { R2557 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 72] { R2557 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R2557 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [73, 73] { R2557 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [74, 65535] { R2557 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2557 += 1, R62 += 1, R63 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 72] { R2577 += 1 };
  s0 -> s0 [0, 65535] { R2576 += 1, R2577 += 1 };
  s0 -> s2 [73, 73] { R2577 += 1 };
  s0 -> s1 [74, 65535] { R2577 += 1 };
  s1 -> s1 [0, 72] { R2577 += 1 };
  s1 -> s2 [73, 73] { R2577 += 1 };
  s1 -> s1 [74, 65535] { R2577 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R2577 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R2578 += 1, R2579 += 1 };
  s0 -> s1 [0, 65535] { R2579 += 1, R1 += 1 };
  s1 -> s1 [0, 65535] { R2579 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 72] { R2581 += 1 };
  s0 -> s2 [0, 65535] { R2581 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R2580 += 1, R2581 += 1 };
  s0 -> s3 [73, 73] { R2581 += 1 };
  s0 -> s1 [74, 65535] { R2581 += 1 };
  s1 -> s1 [0, 72] { R2581 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [73, 73] { R2581 += 1 };
  s1 -> s1 [74, 65535] { R2581 += 1 };
  s2 -> s1 [0, 72] { R2581 += 1 };
  s2 -> s2 [0, 65535] { R2581 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [73, 73] { R2581 += 1 };
  s2 -> s1 [74, 65535] { R2581 += 1 };
  s3 -> s3 [0, 65535] { R2581 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 72] { R2583 += 1, R2521 += 1 };
  s0 -> s2 [0, 65535] { R2583 += 1, R2520 += 1, R2521 += 1 };
  s0 -> s0 [0, 65535] { R2582 += 1, R2583 += 1 };
  s0 -> s1 [74, 65535] { R2583 += 1, R2521 += 1 };
  s1 -> s1 [0, 72] { R2583 += 1, R2521 += 1 };
  s1 -> s1 [0, 65535] { R2583 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [74, 65535] { R2583 += 1, R2521 += 1 };
  s2 -> s1 [0, 72] { R2583 += 1, R2521 += 1 };
  s2 -> s2 [0, 65535] { R2583 += 1, R2520 += 1, R2521 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [74, 65535] { R2583 += 1, R2521 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R2585 += 1, R2522 += 1, R2523 += 1 };
  s0 -> s0 [0, 65535] { R2584 += 1, R2585 += 1 };
  s0 -> s2 [0, 65535] { R2585 += 1, R2523 += 1, R17 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R2585 += 1, R2522 += 1, R2523 += 1 };
  s1 -> s2 [0, 65535] { R2585 += 1, R2523 += 1, R17 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R2585 += 1 };
  s2 -> s2 [0, 65535] { R2585 += 1, R2523 += 1, R17 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2585 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 73] { R2587 += 1, R2525 += 1 };
  s0 -> s0 [0, 65535] { R2586 += 1, R2587 += 1 };
  s0 -> s2 [0, 65535] { R2587 += 1, R2524 += 1, R2525 += 1 };
  s0 -> s1 [81, 65535] { R2587 += 1, R2525 += 1 };
  s1 -> s1 [0, 73] { R2587 += 1, R2525 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R2587 += 1 };
  s1 -> s1 [81, 65535] { R2587 += 1, R2525 += 1 };
  s2 -> s1 [0, 73] { R2587 += 1, R2525 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R2587 += 1, R2524 += 1, R2525 += 1 };
  s2 -> s1 [81, 65535] { R2587 += 1, R2525 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R2589 += 1, R2527 += 1, R67 += 1 };
  s0 -> s0 [0, 65535] { R2588 += 1, R2589 += 1 };
  s0 -> s2 [0, 65535] { R2589 += 1, R2526 += 1, R2527 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R2589 += 1 };
  s1 -> s1 [0, 65535] { R2589 += 1, R2527 += 1, R67 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R2589 += 1, R2527 += 1, R67 += 1 };
  s2 -> s2 [0, 65535] { R2589 += 1, R2526 += 1, R2527 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2589 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 80] { R2591 += 1, R2529 += 1 };
  s0 -> s2 [0, 65535] { R2591 += 1, R2528 += 1, R2529 += 1 };
  s0 -> s3 [0, 65535] { R2591 += 1, R2529 += 1, R69 += 1 };
  s0 -> s0 [0, 65535] { R2590 += 1, R2591 += 1 };
  s0 -> s1 [82, 65535] { R2591 += 1, R2529 += 1 };
  s1 -> s1 [0, 80] { R2591 += 1, R2529 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R2591 += 1 };
  s1 -> s1 [82, 65535] { R2591 += 1, R2529 += 1 };
  s2 -> s1 [0, 80] { R2591 += 1, R2529 += 1 };
  s2 -> s2 [0, 65535] { R2591 += 1, R2528 += 1, R2529 += 1 };
  s2 -> s3 [0, 65535] { R2591 += 1, R2529 += 1, R69 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [82, 65535] { R2591 += 1, R2529 += 1 };
  s3 -> s1 [0, 80] { R2591 += 1, R2529 += 1 };
  s3 -> s3 [0, 65535] { R2591 += 1, R2529 += 1, R69 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R2591 += 1 };
  s3 -> s1 [82, 65535] { R2591 += 1, R2529 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2591 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 80] { R2593 += 1, R2531 += 1, R73 += 1 };
  s0 -> s0 [0, 65535] { R2592 += 1, R2593 += 1 };
  s0 -> s2 [0, 65535] { R2593 += 1, R2530 += 1, R2531 += 1 };
  s0 -> s3 [0, 65535] { R2593 += 1, R2531 += 1, R72 += 1, R73 += 1 };
  s0 -> s1 [82, 65535] { R2593 += 1, R2531 += 1, R73 += 1 };
  s1 -> s1 [0, 80] { R2593 += 1, R2531 += 1, R73 += 1 };
  s1 -> s4 [0, 65535] { R2593 += 1 };
  s1 -> s1 [0, 65535] { R2593 += 1, R2531 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [82, 65535] { R2593 += 1, R2531 += 1, R73 += 1 };
  s2 -> s1 [0, 80] { R2593 += 1, R2531 += 1, R73 += 1 };
  s2 -> s2 [0, 65535] { R2593 += 1, R2530 += 1, R2531 += 1 };
  s2 -> s3 [0, 65535] { R2593 += 1, R2531 += 1, R72 += 1, R73 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [82, 65535] { R2593 += 1, R2531 += 1, R73 += 1 };
  s3 -> s1 [0, 80] { R2593 += 1, R2531 += 1, R73 += 1 };
  s3 -> s3 [0, 65535] { R2593 += 1, R2531 += 1, R72 += 1, R73 += 1 };
  s3 -> s4 [0, 65535] { R2593 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [82, 65535] { R2593 += 1, R2531 += 1, R73 += 1 };
  s4 -> s4 [0, 65535] { R2593 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R2595 += 1, R2532 += 1, R2533 += 1 };
  s0 -> s2 [0, 65535] { R2595 += 1, R2533 += 1, R78 += 1, R79 += 1 };
  s0 -> s0 [0, 65535] { R2594 += 1, R2595 += 1 };
  s0 -> s3 [0, 65535] { R2595 += 1, R2533 += 1, R77 += 1, R78 += 1 };
  s1 -> s1 [0, 65535] { R2595 += 1, R2532 += 1, R2533 += 1 };
  s1 -> s2 [0, 65535] { R2595 += 1, R2533 += 1, R78 += 1, R79 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s3 [0, 65535] { R2595 += 1, R2533 += 1, R77 += 1, R78 += 1 };
  s2 -> s2 [0, 65535] { R2595 += 1, R2533 += 1, R78 += 1, R79 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s6 [0, 65535] { R2595 += 1, R2533 += 1 };
  s2 -> s5 [0, 65535] { R2595 += 1 };
  s3 -> s2 [0, 65535] { R2595 += 1, R2533 += 1, R78 += 1, R79 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2595 += 1, R2533 += 1, R77 += 1, R78 += 1 };
  s3 -> s5 [0, 65535] { R2595 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2595 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R2595 += 1, R2533 += 1 };
  s6 -> s5 [0, 65535] { R2595 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 81] { R2597 += 1, R2535 += 1, R1353 += 1 };
  s0 -> s2 [0, 65535] { R2597 += 1, R2534 += 1, R2535 += 1 };
  s0 -> s3 [0, 65535] { R2597 += 1, R2535 += 1, R1352 += 1, R1353 += 1 };
  s0 -> s0 [0, 65535] { R2596 += 1, R2597 += 1 };
  s0 -> s4 [85, 85] { R2597 += 1, R2535 += 1, R1353 += 1 };
  s0 -> s1 [86, 65535] { R2597 += 1, R2535 += 1, R1353 += 1 };
  s1 -> s1 [0, 81] { R2597 += 1, R2535 += 1, R1353 += 1 };
  s1 -> s4 [85, 85] { R2597 += 1, R2535 += 1, R1353 += 1 };
  s1 -> s1 [86, 65535] { R2597 += 1, R2535 += 1, R1353 += 1 };
  s2 -> s1 [0, 81] { R2597 += 1, R2535 += 1, R1353 += 1 };
  s2 -> s2 [0, 65535] { R2597 += 1, R2534 += 1, R2535 += 1 };
  s2 -> s3 [0, 65535] { R2597 += 1, R2535 += 1, R1352 += 1, R1353 += 1 };
  s2 -> s4 [85, 85] { R2597 += 1, R2535 += 1, R1353 += 1 };
  s2 -> s1 [86, 65535] { R2597 += 1, R2535 += 1, R1353 += 1 };
  s3 -> s1 [0, 81] { R2597 += 1, R2535 += 1, R1353 += 1 };
  s3 -> s3 [0, 65535] { R2597 += 1, R2535 += 1, R1352 += 1, R1353 += 1 };
  s3 -> s4 [85, 85] { R2597 += 1, R2535 += 1, R1353 += 1 };
  s3 -> s1 [86, 65535] { R2597 += 1, R2535 += 1, R1353 += 1 };
  s4 -> s4 [0, 81] { R2597 += 1, R2535 += 1, R1353 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R2597 += 1 };
  s4 -> s4 [0, 65535] { R2597 += 1, R2535 += 1 };
  s4 -> s4 [85, 65535] { R2597 += 1, R2535 += 1, R1353 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2597 += 1 };
  accepting s4, s5, s6;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R2599 += 1, R2536 += 1, R2537 += 1 };
  s0 -> s2 [0, 65535] { R2599 += 1, R2537 += 1 };
  s0 -> s0 [0, 65535] { R2598 += 1, R2599 += 1 };
  s1 -> s1 [0, 65535] { R2599 += 1, R2536 += 1, R2537 += 1 };
  s1 -> s2 [0, 65535] { R2599 += 1, R2537 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R2599 += 1, R2537 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R2599 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2599 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 81] { R2601 += 1, R2539 += 1, R2519 += 1 };
  s0 -> s0 [0, 65535] { R2600 += 1, R2601 += 1 };
  s0 -> s1 [0, 65535] { R2601 += 1, R2539 += 1 };
  s0 -> s2 [0, 65535] { R2601 += 1, R2538 += 1, R2539 += 1 };
  s0 -> s1 [86, 65535] { R2601 += 1, R2539 += 1, R2519 += 1 };
  s1 -> s1 [0, 81] { R2601 += 1, R2539 += 1, R2519 += 1 };
  s1 -> s4 [0, 65535] { R2601 += 1 };
  s1 -> s1 [0, 65535] { R2601 += 1, R2539 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [86, 65535] { R2601 += 1, R2539 += 1, R2519 += 1 };
  s2 -> s1 [0, 81] { R2601 += 1, R2539 += 1, R2519 += 1 };
  s2 -> s1 [0, 65535] { R2601 += 1, R2539 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R2601 += 1, R2538 += 1, R2539 += 1 };
  s2 -> s1 [86, 65535] { R2601 += 1, R2539 += 1, R2519 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2601 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R2603 += 1, R2559 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R2602 += 1, R2603 += 1 };
  s0 -> s2 [0, 65535] { R2603 += 1, R2558 += 1, R2559 += 1 };
  s1 -> s1 [0, 65535] { R2603 += 1, R2559 += 1, R18 += 1 };
  s1 -> s4 [0, 65535] { R2603 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R2603 += 1, R2559 += 1, R18 += 1 };
  s2 -> s2 [0, 65535] { R2603 += 1, R2558 += 1, R2559 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2603 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 72] { R2605 += 1, R2561 += 1 };
  s0 -> s0 [0, 65535] { R2604 += 1, R2605 += 1 };
  s0 -> s2 [0, 65535] { R2605 += 1, R2560 += 1, R2561 += 1 };
  s0 -> s3 [73, 73] { R2605 += 1, R2561 += 1 };
  s0 -> s4 [73, 73] { R2605 += 1, R2561 += 1 };
  s0 -> s5 [81, 81] { R2605 += 1, R2561 += 1 };
  s0 -> s1 [82, 65535] { R2605 += 1, R2561 += 1 };
  s1 -> s1 [0, 72] { R2605 += 1, R2561 += 1 };
  s1 -> s3 [73, 73] { R2605 += 1, R2561 += 1 };
  s1 -> s4 [73, 73] { R2605 += 1, R2561 += 1 };
  s1 -> s5 [81, 81] { R2605 += 1, R2561 += 1 };
  s1 -> s1 [82, 65535] { R2605 += 1, R2561 += 1 };
  s2 -> s1 [0, 72] { R2605 += 1, R2561 += 1 };
  s2 -> s2 [0, 65535] { R2605 += 1, R2560 += 1, R2561 += 1 };
  s2 -> s3 [73, 73] { R2605 += 1, R2561 += 1 };
  s2 -> s4 [73, 73] { R2605 += 1, R2561 += 1 };
  s2 -> s5 [81, 81] { R2605 += 1, R2561 += 1 };
  s2 -> s1 [82, 65535] { R2605 += 1, R2561 += 1 };
  s4 -> s4 [0, 73] { R2605 += 1, R2561 += 1 };
  s4 -> s8 [81, 81] { R2605 += 1, R2561 += 1 };
  s4 -> s4 [82, 65535] { R2605 += 1, R2561 += 1 };
  s5 -> s5 [0, 72] { R2605 += 1, R2561 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R2605 += 1 };
  s5 -> s7 [73, 73] { R2605 += 1, R2561 += 1 };
  s5 -> s8 [73, 73] { R2605 += 1, R2561 += 1 };
  s5 -> s5 [81, 65535] { R2605 += 1, R2561 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R2605 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 73] { R2605 += 1, R2561 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R2605 += 1 };
  s8 -> s8 [81, 65535] { R2605 += 1, R2561 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 72] { R2607 += 1, R2563 += 1, R66 += 1 };
  s0 -> s2 [0, 65535] { R2607 += 1, R2562 += 1, R2563 += 1 };
  s0 -> s0 [0, 65535] { R2606 += 1, R2607 += 1 };
  s0 -> s3 [73, 73] { R2607 += 1, R2563 += 1, R66 += 1 };
  s0 -> s4 [73, 73] { R2607 += 1, R2563 += 1, R66 += 1 };
  s0 -> s1 [74, 65535] { R2607 += 1, R2563 += 1, R66 += 1 };
  s1 -> s1 [0, 72] { R2607 += 1, R2563 += 1, R66 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R2607 += 1 };
  s1 -> s3 [73, 73] { R2607 += 1, R2563 += 1, R66 += 1 };
  s1 -> s4 [73, 73] { R2607 += 1, R2563 += 1, R66 += 1 };
  s1 -> s1 [74, 65535] { R2607 += 1, R2563 += 1, R66 += 1 };
  s2 -> s1 [0, 72] { R2607 += 1, R2563 += 1, R66 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2607 += 1, R2562 += 1, R2563 += 1 };
  s2 -> s3 [73, 73] { R2607 += 1, R2563 += 1, R66 += 1 };
  s2 -> s4 [73, 73] { R2607 += 1, R2563 += 1, R66 += 1 };
  s2 -> s1 [74, 65535] { R2607 += 1, R2563 += 1, R66 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R2607 += 1, R2563 += 1, R66 += 1 };
  s3 -> s6 [0, 65535] { R2607 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2607 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2607 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 72] { R2609 += 1, R2565 += 1, R68 += 1 };
  s0 -> s2 [0, 65535] { R2609 += 1, R2564 += 1, R2565 += 1 };
  s0 -> s0 [0, 65535] { R2608 += 1, R2609 += 1 };
  s0 -> s3 [73, 73] { R2609 += 1, R2565 += 1, R68 += 1 };
  s0 -> s4 [73, 73] { R2609 += 1, R2565 += 1, R68 += 1 };
  s0 -> s1 [74, 65535] { R2609 += 1, R2565 += 1, R68 += 1 };
  s1 -> s1 [0, 72] { R2609 += 1, R2565 += 1, R68 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R2609 += 1 };
  s1 -> s3 [73, 73] { R2609 += 1, R2565 += 1, R68 += 1 };
  s1 -> s4 [73, 73] { R2609 += 1, R2565 += 1, R68 += 1 };
  s1 -> s1 [74, 65535] { R2609 += 1, R2565 += 1, R68 += 1 };
  s2 -> s1 [0, 72] { R2609 += 1, R2565 += 1, R68 += 1 };
  s2 -> s2 [0, 65535] { R2609 += 1, R2564 += 1, R2565 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R2609 += 1, R2565 += 1, R68 += 1 };
  s2 -> s4 [73, 73] { R2609 += 1, R2565 += 1, R68 += 1 };
  s2 -> s1 [74, 65535] { R2609 += 1, R2565 += 1, R68 += 1 };
  s3 -> s6 [0, 65535] { R2609 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R2609 += 1, R2565 += 1, R68 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2609 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2609 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 72] { R2611 += 1, R2567 += 1, R70 += 1, R71 += 1 };
  s0 -> s0 [0, 65535] { R2610 += 1, R2611 += 1 };
  s0 -> s2 [0, 65535] { R2611 += 1, R2566 += 1, R2567 += 1 };
  s0 -> s3 [73, 73] { R2611 += 1, R2567 += 1, R70 += 1, R71 += 1 };
  s0 -> s4 [73, 73] { R2611 += 1, R2567 += 1, R70 += 1, R71 += 1 };
  s0 -> s1 [74, 65535] { R2611 += 1, R2567 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 72] { R2611 += 1, R2567 += 1, R70 += 1, R71 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R2611 += 1 };
  s1 -> s3 [73, 73] { R2611 += 1, R2567 += 1, R70 += 1, R71 += 1 };
  s1 -> s4 [73, 73] { R2611 += 1, R2567 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [74, 65535] { R2611 += 1, R2567 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [0, 72] { R2611 += 1, R2567 += 1, R70 += 1, R71 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2611 += 1, R2566 += 1, R2567 += 1 };
  s2 -> s3 [73, 73] { R2611 += 1, R2567 += 1, R70 += 1, R71 += 1 };
  s2 -> s4 [73, 73] { R2611 += 1, R2567 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [74, 65535] { R2611 += 1, R2567 += 1, R70 += 1, R71 += 1 };
  s3 -> s3 [0, 65535] { R2611 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2611 += 1, R2567 += 1, R70 += 1, R71 += 1 };
  s4 -> s6 [0, 65535] { R2611 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2611 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 72] { R2613 += 1, R2569 += 1, R74 += 1, R75 += 1 };
  s0 -> s2 [0, 65535] { R2613 += 1, R2568 += 1, R2569 += 1 };
  s0 -> s0 [0, 65535] { R2612 += 1, R2613 += 1 };
  s0 -> s3 [73, 73] { R2613 += 1, R2569 += 1, R74 += 1, R75 += 1 };
  s0 -> s4 [73, 73] { R2613 += 1, R2569 += 1, R74 += 1, R75 += 1 };
  s0 -> s1 [74, 65535] { R2613 += 1, R2569 += 1, R74 += 1, R75 += 1 };
  s1 -> s1 [0, 72] { R2613 += 1, R2569 += 1, R74 += 1, R75 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R2613 += 1 };
  s1 -> s3 [73, 73] { R2613 += 1, R2569 += 1, R74 += 1, R75 += 1 };
  s1 -> s4 [73, 73] { R2613 += 1, R2569 += 1, R74 += 1, R75 += 1 };
  s1 -> s1 [74, 65535] { R2613 += 1, R2569 += 1, R74 += 1, R75 += 1 };
  s2 -> s1 [0, 72] { R2613 += 1, R2569 += 1, R74 += 1, R75 += 1 };
  s2 -> s2 [0, 65535] { R2613 += 1, R2568 += 1, R2569 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R2613 += 1, R2569 += 1, R74 += 1, R75 += 1 };
  s2 -> s4 [73, 73] { R2613 += 1, R2569 += 1, R74 += 1, R75 += 1 };
  s2 -> s1 [74, 65535] { R2613 += 1, R2569 += 1, R74 += 1, R75 += 1 };
  s3 -> s3 [0, 65535] { R2613 += 1, R2569 += 1, R74 += 1, R75 += 1 };
  s3 -> s6 [0, 65535] { R2613 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2613 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2613 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 72] { R2615 += 1, R2571 += 1, R1350 += 1, R1351 += 1 };
  s0 -> s0 [0, 65535] { R2614 += 1, R2615 += 1 };
  s0 -> s2 [0, 65535] { R2615 += 1, R2570 += 1, R2571 += 1 };
  s0 -> s3 [73, 73] { R2615 += 1, R2571 += 1, R1350 += 1, R1351 += 1 };
  s0 -> s4 [73, 73] { R2615 += 1, R2571 += 1, R1350 += 1, R1351 += 1 };
  s0 -> s1 [74, 65535] { R2615 += 1, R2571 += 1, R1350 += 1, R1351 += 1 };
  s1 -> s1 [0, 72] { R2615 += 1, R2571 += 1, R1350 += 1, R1351 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R2615 += 1 };
  s1 -> s3 [73, 73] { R2615 += 1, R2571 += 1, R1350 += 1, R1351 += 1 };
  s1 -> s4 [73, 73] { R2615 += 1, R2571 += 1, R1350 += 1, R1351 += 1 };
  s1 -> s1 [74, 65535] { R2615 += 1, R2571 += 1, R1350 += 1, R1351 += 1 };
  s2 -> s1 [0, 72] { R2615 += 1, R2571 += 1, R1350 += 1, R1351 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2615 += 1, R2570 += 1, R2571 += 1 };
  s2 -> s3 [73, 73] { R2615 += 1, R2571 += 1, R1350 += 1, R1351 += 1 };
  s2 -> s4 [73, 73] { R2615 += 1, R2571 += 1, R1350 += 1, R1351 += 1 };
  s2 -> s1 [74, 65535] { R2615 += 1, R2571 += 1, R1350 += 1, R1351 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R2615 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2615 += 1, R2571 += 1, R1350 += 1, R1351 += 1 };
  s4 -> s6 [0, 65535] { R2615 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2615 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 72] { R2617 += 1, R2573 += 1, R2198 += 1, R2199 += 1 };
  s0 -> s2 [0, 72] { R2617 += 1, R2573 += 1, R2199 += 1, R2200 += 1 };
  s0 -> s3 [0, 65535] { R2617 += 1, R2572 += 1, R2573 += 1 };
  s0 -> s0 [0, 65535] { R2616 += 1, R2617 += 1 };
  s0 -> s4 [73, 73] { R2617 += 1, R2573 += 1, R2199 += 1, R2200 += 1 };
  s0 -> s5 [73, 73] { R2617 += 1, R2573 += 1, R2199 += 1, R2200 += 1 };
  s0 -> s6 [73, 73] { R2617 += 1, R2573 += 1, R2198 += 1, R2199 += 1 };
  s0 -> s7 [73, 73] { R2617 += 1, R2573 += 1, R2198 += 1, R2199 += 1 };
  s0 -> s1 [74, 65535] { R2617 += 1, R2573 += 1, R2198 += 1, R2199 += 1 };
  s0 -> s2 [74, 65535] { R2617 += 1, R2573 += 1, R2199 += 1, R2200 += 1 };
  s1 -> s1 [0, 72] { R2617 += 1, R2573 += 1, R2198 += 1, R2199 += 1 };
  s1 -> s2 [0, 72] { R2617 += 1, R2573 += 1, R2199 += 1, R2200 += 1 };
  s1 -> s4 [73, 73] { R2617 += 1, R2573 += 1, R2199 += 1, R2200 += 1 };
  s1 -> s5 [73, 73] { R2617 += 1, R2573 += 1, R2199 += 1, R2200 += 1 };
  s1 -> s6 [73, 73] { R2617 += 1, R2573 += 1, R2198 += 1, R2199 += 1 };
  s1 -> s7 [73, 73] { R2617 += 1, R2573 += 1, R2198 += 1, R2199 += 1 };
  s1 -> s1 [74, 65535] { R2617 += 1, R2573 += 1, R2198 += 1, R2199 += 1 };
  s1 -> s2 [74, 65535] { R2617 += 1, R2573 += 1, R2199 += 1, R2200 += 1 };
  s2 -> s11 [0, 72] { R2617 += 1, R2573 += 1 };
  s2 -> s2 [0, 72] { R2617 += 1, R2573 += 1, R2199 += 1, R2200 += 1 };
  s2 -> s4 [73, 73] { R2617 += 1, R2573 += 1, R2199 += 1, R2200 += 1 };
  s2 -> s5 [73, 73] { R2617 += 1, R2573 += 1, R2199 += 1, R2200 += 1 };
  s2 -> s12 [73, 73] { R2617 += 1, R2573 += 1 };
  s2 -> s8 [73, 73] { R2617 += 1, R2573 += 1 };
  s2 -> s11 [74, 65535] { R2617 += 1, R2573 += 1 };
  s2 -> s2 [74, 65535] { R2617 += 1, R2573 += 1, R2199 += 1, R2200 += 1 };
  s3 -> s1 [0, 72] { R2617 += 1, R2573 += 1, R2198 += 1, R2199 += 1 };
  s3 -> s2 [0, 72] { R2617 += 1, R2573 += 1, R2199 += 1, R2200 += 1 };
  s3 -> s3 [0, 65535] { R2617 += 1, R2572 += 1, R2573 += 1 };
  s3 -> s4 [73, 73] { R2617 += 1, R2573 += 1, R2199 += 1, R2200 += 1 };
  s3 -> s5 [73, 73] { R2617 += 1, R2573 += 1, R2199 += 1, R2200 += 1 };
  s3 -> s6 [73, 73] { R2617 += 1, R2573 += 1, R2198 += 1, R2199 += 1 };
  s3 -> s7 [73, 73] { R2617 += 1, R2573 += 1, R2198 += 1, R2199 += 1 };
  s3 -> s1 [74, 65535] { R2617 += 1, R2573 += 1, R2198 += 1, R2199 += 1 };
  s3 -> s2 [74, 65535] { R2617 += 1, R2573 += 1, R2199 += 1, R2200 += 1 };
  s4 -> s4 [0, 65535] { R2617 += 1, R2573 += 1, R2199 += 1, R2200 += 1 };
  s4 -> s8 [0, 65535] { R2617 += 1, R2573 += 1 };
  s6 -> s4 [0, 65535] { R2617 += 1, R2573 += 1, R2199 += 1, R2200 += 1 };
  s6 -> s6 [0, 65535] { R2617 += 1, R2573 += 1, R2198 += 1, R2199 += 1 };
  s8 -> s9 [0, 65535] { R2617 += 1 };
  s8 -> s8 [0, 65535] { R2617 += 1, R2573 += 1 };
  s8 -> s10 [0, 65535];
  s9 -> s9 [0, 65535] { R2617 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s11 [0, 72] { R2617 += 1, R2573 += 1 };
  s11 -> s11 [0, 65535] { R2617 += 1 };
  s11 -> s10 [0, 65535];
  s11 -> s12 [73, 73] { R2617 += 1, R2573 += 1 };
  s11 -> s8 [73, 73] { R2617 += 1, R2573 += 1 };
  s11 -> s11 [74, 65535] { R2617 += 1, R2573 += 1 };
  s12 -> s12 [0, 65535] { R2617 += 1 };
  s12 -> s10 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 72] { R2619 += 1, R2575 += 1, R2517 += 1 };
  s0 -> s2 [0, 72] { R2619 += 1, R2575 += 1, R2516 += 1, R2517 += 1 };
  s0 -> s0 [0, 65535] { R2618 += 1, R2619 += 1 };
  s0 -> s3 [0, 65535] { R2619 += 1, R2574 += 1, R2575 += 1 };
  s0 -> s4 [73, 73] { R2619 += 1, R2575 += 1, R2516 += 1, R2517 += 1 };
  s0 -> s5 [73, 73] { R2619 += 1, R2575 += 1, R2516 += 1, R2517 += 1 };
  s0 -> s6 [73, 73] { R2619 += 1, R2575 += 1, R2517 += 1 };
  s0 -> s7 [73, 73] { R2619 += 1, R2575 += 1, R2517 += 1 };
  s0 -> s1 [74, 80] { R2619 += 1, R2575 += 1, R2517 += 1 };
  s0 -> s2 [74, 65535] { R2619 += 1, R2575 += 1, R2516 += 1, R2517 += 1 };
  s0 -> s8 [81, 81] { R2619 += 1, R2575 += 1, R2517 += 1 };
  s0 -> s1 [86, 65535] { R2619 += 1, R2575 += 1, R2517 += 1 };
  s1 -> s1 [0, 72] { R2619 += 1, R2575 += 1, R2517 += 1 };
  s1 -> s6 [73, 73] { R2619 += 1, R2575 += 1 };
  s1 -> s7 [73, 73] { R2619 += 1, R2575 += 1 };
  s1 -> s1 [74, 80] { R2619 += 1, R2575 += 1, R2517 += 1 };
  s1 -> s1 [74, 65535] { R2619 += 1, R2575 += 1 };
  s1 -> s8 [81, 81] { R2619 += 1, R2575 += 1, R2517 += 1 };
  s1 -> s1 [86, 65535] { R2619 += 1, R2575 += 1, R2517 += 1 };
  s2 -> s1 [0, 72] { R2619 += 1, R2575 += 1, R2517 += 1 };
  s2 -> s2 [0, 72] { R2619 += 1, R2575 += 1, R2516 += 1, R2517 += 1 };
  s2 -> s4 [73, 73] { R2619 += 1, R2575 += 1, R2516 += 1, R2517 += 1 };
  s2 -> s5 [73, 73] { R2619 += 1, R2575 += 1, R2516 += 1, R2517 += 1 };
  s2 -> s6 [73, 73] { R2619 += 1, R2575 += 1, R2517 += 1 };
  s2 -> s7 [73, 73] { R2619 += 1, R2575 += 1, R2517 += 1 };
  s2 -> s1 [74, 80] { R2619 += 1, R2575 += 1, R2517 += 1 };
  s2 -> s2 [74, 65535] { R2619 += 1, R2575 += 1, R2516 += 1, R2517 += 1 };
  s2 -> s8 [81, 81] { R2619 += 1, R2575 += 1, R2517 += 1 };
  s2 -> s1 [86, 65535] { R2619 += 1, R2575 += 1, R2517 += 1 };
  s3 -> s1 [0, 72] { R2619 += 1, R2575 += 1, R2517 += 1 };
  s3 -> s2 [0, 72] { R2619 += 1, R2575 += 1, R2516 += 1, R2517 += 1 };
  s3 -> s3 [0, 65535] { R2619 += 1, R2574 += 1, R2575 += 1 };
  s3 -> s4 [73, 73] { R2619 += 1, R2575 += 1, R2516 += 1, R2517 += 1 };
  s3 -> s5 [73, 73] { R2619 += 1, R2575 += 1, R2516 += 1, R2517 += 1 };
  s3 -> s6 [73, 73] { R2619 += 1, R2575 += 1, R2517 += 1 };
  s3 -> s7 [73, 73] { R2619 += 1, R2575 += 1, R2517 += 1 };
  s3 -> s1 [74, 80] { R2619 += 1, R2575 += 1, R2517 += 1 };
  s3 -> s2 [74, 65535] { R2619 += 1, R2575 += 1, R2516 += 1, R2517 += 1 };
  s3 -> s8 [81, 81] { R2619 += 1, R2575 += 1, R2517 += 1 };
  s3 -> s1 [86, 65535] { R2619 += 1, R2575 += 1, R2517 += 1 };
  s5 -> s7 [0, 80] { R2619 += 1, R2575 += 1, R2517 += 1 };
  s5 -> s5 [0, 65535] { R2619 += 1, R2575 += 1, R2516 += 1, R2517 += 1 };
  s5 -> s10 [81, 81] { R2619 += 1, R2575 += 1, R2517 += 1 };
  s5 -> s7 [86, 65535] { R2619 += 1, R2575 += 1, R2517 += 1 };
  s7 -> s7 [0, 80] { R2619 += 1, R2575 += 1, R2517 += 1 };
  s7 -> s7 [0, 65535] { R2619 += 1, R2575 += 1 };
  s7 -> s10 [81, 81] { R2619 += 1, R2575 += 1, R2517 += 1 };
  s7 -> s7 [86, 65535] { R2619 += 1, R2575 += 1, R2517 += 1 };
  s8 -> s8 [0, 72] { R2619 += 1, R2575 += 1, R2517 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R2619 += 1 };
  s8 -> s10 [73, 73] { R2619 += 1, R2575 += 1 };
  s8 -> s11 [73, 73] { R2619 += 1, R2575 += 1 };
  s8 -> s8 [74, 81] { R2619 += 1, R2575 += 1, R2517 += 1 };
  s8 -> s8 [74, 65535] { R2619 += 1, R2575 += 1 };
  s8 -> s8 [86, 65535] { R2619 += 1, R2575 += 1, R2517 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 81] { R2619 += 1, R2575 += 1, R2517 += 1 };
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R2619 += 1, R2575 += 1 };
  s10 -> s12 [0, 65535] { R2619 += 1 };
  s10 -> s10 [86, 65535] { R2619 += 1, R2575 += 1, R2517 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R2619 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R2619 += 1 };
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [113, 113];
  accepting s1;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
constraint R1 = R2535 && R2 = R2619 && R20 - R2619 = -1 && R21 = R2619 && R22 - R2619 = -1 && R23 = R2619 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R1353 + -1*R1351 - R53 = 0 && R52 + R1352 + R1350 = 0 && R2534 = 0 && R2560 = 0 && R2561 = 0 && R2572 = 0 && R2573 = 0 && R2574 = 0 && R2575 = 0 && R2576 = 0 && R2577 = R2619 && R2578 = 0 && R2579 = R2619 && R2580 = 0 && R2581 = R2619 && R2582 = 0 && R2583 = R2619 && R2584 = 0 && R2585 = R2619 && R2586 = 0 && R2587 = R2619 && R2588 = 0 && R2589 = R2619 && R2590 = 0 && R2591 = R2619 && R2592 = 0 && R2593 = R2619 && R2594 = 0 && R2595 = R2619 && R2596 = 0 && R2597 = R2619 && R2598 = 0 && R2599 = R2619 && R2600 = 0 && R2601 = R2619 && R2602 = 0 && R2603 = R2619 && R2604 = 0 && R2605 = R2619 && R2606 = 0 && R2607 = R2619 && R2608 = 0 && R2609 = R2619 && R2610 = 0 && R2611 = R2619 && R2612 = 0 && R2613 = R2619 && R2614 = 0 && R2615 = R2619 && R2616 = 0 && R2617 = R2619 && R2618 = 0 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R1353 + -1*R1351 - R53 < 1 && -1 < R2535 && 0 < R2619 && (R48 + R79 + R76 != 0 || ((R42 + R72 + R70 != 0 || R43 + R73 + R71 + -1*R1353 + -1*R1351 - R53 = 0 || R53 + R1353 + R1351 < 1) && (R42 + R72 + R70 = 0 || R53 + R1353 + R1351 < 1))) && (R48 + R79 + R76 != 0 || ((R46 + R77 + R74 != 0 || R47 + R78 + R75 + -1*R1353 + -1*R1351 - R53 = 0 || R53 + R1353 + R1351 < 1) && (R46 + R77 + R74 = 0 || R53 + R1353 + R1351 < 1))) && (R2520 != 0 || R2521 = R2535 || (R17 = 0 && R2535 = 0)) && (R2522 != 0 || R2523 = R2535 || (R17 = 0 && R2535 = 0)) && (R2524 != 0 || R2525 = R2535 || (R17 = 0 && R2535 = 0)) && (R2526 != 0 || R2527 = R2535 || (R17 = 0 && R2535 = 0)) && (R2528 != 0 || R2529 = R2535 || (R17 = 0 && R2535 = 0)) && (R2530 != 0 || R2531 = R2535 || (R17 = 0 && R2535 = 0)) && (R2532 != 0 || R2533 = R2535 || (R17 = 0 && R2535 = 0)) && (R2536 != 0 || R2535 = R2537 || (R17 = 0 && R2535 = 0)) && (R2538 != 0 || R2535 = R2539 || (R17 = 0 && R2535 = 0)) && (R18 = 0 || (R2558 = 0 && R2559 = 0)) && (R18 = 0 || (R2562 = 0 && R2563 = 0)) && (R18 = 0 || (R2564 = 0 && R2565 = 0)) && (R18 = 0 || (R2566 = 0 && R2567 = 0)) && (R18 = 0 || (R2568 = 0 && R2569 = 0)) && (R18 = 0 || (R2570 = 0 && R2571 = 0)) && (R19 = 0 || (R2540 = 0 && R2541 = 0)) && (R19 = 0 || (R2542 = 0 && R2543 = 0)) && (R19 = 0 || (R2544 = 0 && R2545 = 0)) && (R19 = 0 || (R2546 = 0 && R2547 = 0)) && (R19 = 0 || (R2548 = 0 && R2549 = 0)) && (R19 = 0 || (R2550 = 0 && R2551 = 0)) && (R19 = 0 || (R2552 = 0 && R2553 = 0)) && (R19 = 0 || (R2554 = 0 && R2555 = 0)) && (R19 = 0 || (R2556 = 0 && R2557 = 0)) && (R48 + R79 + R76 = 0 || (R42 + R72 + R70 = 0 && R43 + R73 + R71 + -1*R1353 + -1*R1351 - R53 = 0)) && (R48 + R79 + R76 = 0 || (R46 + R77 + R74 = 0 && R47 + R78 + R75 + -1*R1353 + -1*R1351 - R53 = 0)) && (R58 + R2203 + R2200 = 0 || (R56 + R2201 + R2198 = 0 && R57 + R2202 + R2199 = 0)) && (R58 + R2203 + R2200 = 0 || (R62 + R2518 + R2516 = 0 && R63 + R2519 + R2517 = 0)) && (R2520 = 0 || (R17 = 0 && R2535 = 0)) && (R2522 = 0 || (R17 = 0 && R2535 = 0)) && (R2524 = 0 || (R17 = 0 && R2535 = 0)) && (R2526 = 0 || (R17 = 0 && R2535 = 0)) && (R2528 = 0 || (R17 = 0 && R2535 = 0)) && (R2530 = 0 || (R17 = 0 && R2535 = 0)) && (R2532 = 0 || (R17 = 0 && R2535 = 0)) && (R2536 = 0 || (R17 = 0 && R2535 = 0)) && (R2538 = 0 || (R17 = 0 && R2535 = 0));
// End of Parikh automata intersection problem
