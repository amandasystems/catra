// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R12, R1350, R1351, R1352, R1353, R1354, R1355, R1356, R1357, R1358, R1359, R1568, R1569, R1570, R1571, R1572, R1573, R1574, R1575, R1576, R1577, R1578, R1579, R1580, R1581, R1582, R1583, R1584, R1585, R1586, R1587, R1588, R1589, R1590, R1591, R1592, R1593, R1594, R1595, R1596, R1597, R1598, R1599, R1600, R1601, R1602, R1603, R1604, R1605, R1606, R1607, R1608, R1609, R1610, R1611, R1612, R1613, R1614, R1615, R1616, R1617, R1618, R1619, R1620, R1621, R1622, R1623, R1624, R1625, R1626, R1627, R1628, R1629, R1630, R1631, R1632, R1633, R1634, R1635, R1636, R1637, R1638, R1639, R1640, R1641, R1642, R1643, R1644, R1645, R1646, R1647, R1648, R1649, R1650, R1651, R1652, R1653, R1654, R1655, R1656, R1657, R1658, R1659, R1660, R1661, R1662, R1663, R1664, R1665, R1666, R1667, R1668, R1669, R1670, R1671, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R70, R71, R72, R73, R74, R75, R76, R77, R78, R79, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 72];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [73, 73];
  s0 -> s1 [74, 65535];
  s1 -> s1 [0, 72];
  s1 -> s2 [73, 73];
  s1 -> s1 [74, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s1 [0, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R25 += 1 };
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R1593 += 1, R19 += 1 };
  s0 -> s0 [0, 65535] { R1592 += 1, R1593 += 1 };
  s1 -> s1 [0, 65535] { R1593 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 72] { R1595 += 1 };
  s0 -> s0 [0, 65535] { R1594 += 1, R1595 += 1 };
  s0 -> s2 [73, 73] { R1595 += 1 };
  s0 -> s3 [73, 73] { R1595 += 1 };
  s0 -> s1 [82, 65535] { R1595 += 1 };
  s1 -> s1 [0, 72] { R1595 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R1595 += 1 };
  s1 -> s3 [73, 73] { R1595 += 1 };
  s1 -> s1 [82, 65535] { R1595 += 1 };
  s2 -> s2 [0, 73] { R1595 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [82, 65535] { R1595 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 72] { R1597 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R1596 += 1, R1597 += 1 };
  s0 -> s2 [73, 73] { R1597 += 1, R38 += 1 };
  s0 -> s3 [73, 73] { R1597 += 1, R38 += 1 };
  s0 -> s1 [74, 65535] { R1597 += 1, R38 += 1 };
  s1 -> s1 [0, 72] { R1597 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R1597 += 1, R38 += 1 };
  s1 -> s3 [73, 73] { R1597 += 1, R38 += 1 };
  s1 -> s1 [74, 65535] { R1597 += 1, R38 += 1 };
  s2 -> s2 [0, 65535] { R1597 += 1, R38 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 72] { R1599 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R1598 += 1, R1599 += 1 };
  s0 -> s2 [73, 73] { R1599 += 1, R40 += 1 };
  s0 -> s3 [73, 73] { R1599 += 1, R40 += 1 };
  s0 -> s1 [74, 65535] { R1599 += 1, R40 += 1 };
  s1 -> s1 [0, 72] { R1599 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R1599 += 1, R40 += 1 };
  s1 -> s3 [73, 73] { R1599 += 1, R40 += 1 };
  s1 -> s1 [74, 65535] { R1599 += 1, R40 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1599 += 1, R40 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 72] { R1601 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R1600 += 1, R1601 += 1 };
  s0 -> s2 [73, 73] { R1601 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [73, 73] { R1601 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [74, 65535] { R1601 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 72] { R1601 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R1601 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [73, 73] { R1601 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [74, 65535] { R1601 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535] { R1601 += 1, R42 += 1, R43 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 72] { R1603 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R1602 += 1, R1603 += 1 };
  s0 -> s2 [73, 73] { R1603 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [73, 73] { R1603 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [74, 65535] { R1603 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 72] { R1603 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R1603 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [73, 73] { R1603 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [74, 65535] { R1603 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R1603 += 1, R46 += 1, R47 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 72] { R1605 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R1604 += 1, R1605 += 1 };
  s0 -> s2 [73, 73] { R1605 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [73, 73] { R1605 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [74, 65535] { R1605 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 72] { R1605 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R1605 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [73, 73] { R1605 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [74, 65535] { R1605 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1605 += 1, R52 += 1, R53 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 72] { R1607 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R1606 += 1, R1607 += 1 };
  s0 -> s2 [73, 73] { R1607 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [73, 73] { R1607 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [74, 65535] { R1607 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 72] { R1607 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R1607 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [73, 73] { R1607 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [74, 65535] { R1607 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1607 += 1, R56 += 1, R57 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 72] { R1609 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R1608 += 1, R1609 += 1 };
  s0 -> s2 [73, 73] { R1609 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [73, 73] { R1609 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [74, 65535] { R1609 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 72] { R1609 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R1609 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [73, 73] { R1609 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [74, 65535] { R1609 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1609 += 1, R62 += 1, R63 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 72] { R1629 += 1 };
  s0 -> s0 [0, 65535] { R1628 += 1, R1629 += 1 };
  s0 -> s2 [73, 73] { R1629 += 1 };
  s0 -> s1 [74, 65535] { R1629 += 1 };
  s1 -> s1 [0, 72] { R1629 += 1 };
  s1 -> s2 [73, 73] { R1629 += 1 };
  s1 -> s1 [74, 65535] { R1629 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1629 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R1630 += 1, R1631 += 1 };
  s0 -> s1 [0, 65535] { R1631 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R1631 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 72] { R1633 += 1 };
  s0 -> s2 [0, 65535] { R1633 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R1632 += 1, R1633 += 1 };
  s0 -> s3 [73, 73] { R1633 += 1 };
  s0 -> s1 [74, 65535] { R1633 += 1 };
  s1 -> s1 [0, 72] { R1633 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [73, 73] { R1633 += 1 };
  s1 -> s1 [74, 65535] { R1633 += 1 };
  s2 -> s1 [0, 72] { R1633 += 1 };
  s2 -> s2 [0, 65535] { R1633 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [73, 73] { R1633 += 1 };
  s2 -> s1 [74, 65535] { R1633 += 1 };
  s3 -> s3 [0, 65535] { R1633 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 72] { R1635 += 1, R1573 += 1 };
  s0 -> s2 [0, 65535] { R1635 += 1, R1572 += 1, R1573 += 1 };
  s0 -> s0 [0, 65535] { R1634 += 1, R1635 += 1 };
  s0 -> s1 [74, 65535] { R1635 += 1, R1573 += 1 };
  s1 -> s1 [0, 72] { R1635 += 1, R1573 += 1 };
  s1 -> s1 [0, 65535] { R1635 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [74, 65535] { R1635 += 1, R1573 += 1 };
  s2 -> s1 [0, 72] { R1635 += 1, R1573 += 1 };
  s2 -> s2 [0, 65535] { R1635 += 1, R1572 += 1, R1573 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [74, 65535] { R1635 += 1, R1573 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R1637 += 1, R1574 += 1, R1575 += 1 };
  s0 -> s2 [0, 65535] { R1637 += 1, R1575 += 1, R17 += 1 };
  s0 -> s0 [0, 65535] { R1636 += 1, R1637 += 1 };
  s1 -> s1 [0, 65535] { R1637 += 1, R1574 += 1, R1575 += 1 };
  s1 -> s2 [0, 65535] { R1637 += 1, R1575 += 1, R17 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R1637 += 1 };
  s2 -> s2 [0, 65535] { R1637 += 1, R1575 += 1, R17 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1637 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 73] { R1639 += 1, R1577 += 1 };
  s0 -> s0 [0, 65535] { R1638 += 1, R1639 += 1 };
  s0 -> s2 [0, 65535] { R1639 += 1, R1576 += 1, R1577 += 1 };
  s0 -> s1 [81, 65535] { R1639 += 1, R1577 += 1 };
  s1 -> s1 [0, 73] { R1639 += 1, R1577 += 1 };
  s1 -> s1 [0, 65535] { R1639 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [81, 65535] { R1639 += 1, R1577 += 1 };
  s2 -> s1 [0, 73] { R1639 += 1, R1577 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1639 += 1, R1576 += 1, R1577 += 1 };
  s2 -> s1 [81, 65535] { R1639 += 1, R1577 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R1641 += 1, R1578 += 1, R1579 += 1 };
  s0 -> s2 [0, 65535] { R1641 += 1, R1579 += 1, R67 += 1 };
  s0 -> s0 [0, 65535] { R1640 += 1, R1641 += 1 };
  s1 -> s1 [0, 65535] { R1641 += 1, R1578 += 1, R1579 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R1641 += 1, R1579 += 1, R67 += 1 };
  s2 -> s3 [0, 65535] { R1641 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1641 += 1, R1579 += 1, R67 += 1 };
  s3 -> s3 [0, 65535] { R1641 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 80] { R1643 += 1, R1581 += 1 };
  s0 -> s2 [0, 65535] { R1643 += 1, R1580 += 1, R1581 += 1 };
  s0 -> s3 [0, 65535] { R1643 += 1, R1581 += 1, R69 += 1 };
  s0 -> s0 [0, 65535] { R1642 += 1, R1643 += 1 };
  s0 -> s1 [82, 65535] { R1643 += 1, R1581 += 1 };
  s1 -> s1 [0, 80] { R1643 += 1, R1581 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1643 += 1 };
  s1 -> s1 [82, 65535] { R1643 += 1, R1581 += 1 };
  s2 -> s1 [0, 80] { R1643 += 1, R1581 += 1 };
  s2 -> s2 [0, 65535] { R1643 += 1, R1580 += 1, R1581 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R1643 += 1, R1581 += 1, R69 += 1 };
  s2 -> s1 [82, 65535] { R1643 += 1, R1581 += 1 };
  s3 -> s1 [0, 80] { R1643 += 1, R1581 += 1 };
  s3 -> s4 [0, 65535] { R1643 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R1643 += 1, R1581 += 1, R69 += 1 };
  s3 -> s1 [82, 65535] { R1643 += 1, R1581 += 1 };
  s4 -> s4 [0, 65535] { R1643 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 80] { R1645 += 1, R1583 += 1, R73 += 1 };
  s0 -> s2 [0, 65535] { R1645 += 1, R1583 += 1, R72 += 1, R73 += 1 };
  s0 -> s3 [0, 65535] { R1645 += 1, R1582 += 1, R1583 += 1 };
  s0 -> s0 [0, 65535] { R1644 += 1, R1645 += 1 };
  s0 -> s1 [82, 65535] { R1645 += 1, R1583 += 1, R73 += 1 };
  s1 -> s1 [0, 80] { R1645 += 1, R1583 += 1, R73 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R1645 += 1, R1583 += 1 };
  s1 -> s5 [0, 65535] { R1645 += 1 };
  s1 -> s1 [82, 65535] { R1645 += 1, R1583 += 1, R73 += 1 };
  s2 -> s1 [0, 80] { R1645 += 1, R1583 += 1, R73 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R1645 += 1 };
  s2 -> s2 [0, 65535] { R1645 += 1, R1583 += 1, R72 += 1, R73 += 1 };
  s2 -> s1 [82, 65535] { R1645 += 1, R1583 += 1, R73 += 1 };
  s3 -> s1 [0, 80] { R1645 += 1, R1583 += 1, R73 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R1645 += 1, R1583 += 1, R72 += 1, R73 += 1 };
  s3 -> s3 [0, 65535] { R1645 += 1, R1582 += 1, R1583 += 1 };
  s3 -> s1 [82, 65535] { R1645 += 1, R1583 += 1, R73 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1645 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s0 [0, 65535] { R1646 += 1, R1647 += 1 };
  s0 -> s1 [0, 65535] { R1647 += 1, R1584 += 1, R1585 += 1 };
  s0 -> s2 [0, 65535] { R1647 += 1, R1585 += 1, R78 += 1, R79 += 1 };
  s0 -> s3 [0, 65535] { R1647 += 1, R1585 += 1, R77 += 1, R78 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1647 += 1, R1584 += 1, R1585 += 1 };
  s1 -> s2 [0, 65535] { R1647 += 1, R1585 += 1, R78 += 1, R79 += 1 };
  s1 -> s3 [0, 65535] { R1647 += 1, R1585 += 1, R77 += 1, R78 += 1 };
  s2 -> s4 [0, 65535] { R1647 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1647 += 1, R1585 += 1, R78 += 1, R79 += 1 };
  s2 -> s6 [0, 65535] { R1647 += 1, R1585 += 1 };
  s3 -> s4 [0, 65535] { R1647 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R1647 += 1, R1585 += 1, R78 += 1, R79 += 1 };
  s3 -> s3 [0, 65535] { R1647 += 1, R1585 += 1, R77 += 1, R78 += 1 };
  s4 -> s4 [0, 65535] { R1647 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R1647 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1647 += 1, R1585 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 81] { R1649 += 1, R1587 += 1, R1353 += 1 };
  s0 -> s0 [0, 65535] { R1648 += 1, R1649 += 1 };
  s0 -> s2 [0, 65535] { R1649 += 1, R1586 += 1, R1587 += 1 };
  s0 -> s3 [0, 65535] { R1649 += 1, R1587 += 1, R1352 += 1, R1353 += 1 };
  s0 -> s4 [85, 85] { R1649 += 1, R1587 += 1, R1353 += 1 };
  s0 -> s1 [86, 65535] { R1649 += 1, R1587 += 1, R1353 += 1 };
  s1 -> s1 [0, 81] { R1649 += 1, R1587 += 1, R1353 += 1 };
  s1 -> s4 [85, 85] { R1649 += 1, R1587 += 1, R1353 += 1 };
  s1 -> s1 [86, 65535] { R1649 += 1, R1587 += 1, R1353 += 1 };
  s2 -> s1 [0, 81] { R1649 += 1, R1587 += 1, R1353 += 1 };
  s2 -> s2 [0, 65535] { R1649 += 1, R1586 += 1, R1587 += 1 };
  s2 -> s3 [0, 65535] { R1649 += 1, R1587 += 1, R1352 += 1, R1353 += 1 };
  s2 -> s4 [85, 85] { R1649 += 1, R1587 += 1, R1353 += 1 };
  s2 -> s1 [86, 65535] { R1649 += 1, R1587 += 1, R1353 += 1 };
  s3 -> s1 [0, 81] { R1649 += 1, R1587 += 1, R1353 += 1 };
  s3 -> s3 [0, 65535] { R1649 += 1, R1587 += 1, R1352 += 1, R1353 += 1 };
  s3 -> s4 [85, 85] { R1649 += 1, R1587 += 1, R1353 += 1 };
  s3 -> s1 [86, 65535] { R1649 += 1, R1587 += 1, R1353 += 1 };
  s4 -> s4 [0, 81] { R1649 += 1, R1587 += 1, R1353 += 1 };
  s4 -> s4 [0, 65535] { R1649 += 1, R1587 += 1 };
  s4 -> s5 [0, 65535] { R1649 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [85, 65535] { R1649 += 1, R1587 += 1, R1353 += 1 };
  s5 -> s5 [0, 65535] { R1649 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s4, s5, s6;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R1651 += 1, R1589 += 1, R1357 += 1, R1358 += 1 };
  s0 -> s2 [0, 65535] { R1651 += 1, R1589 += 1, R1358 += 1, R1359 += 1 };
  s0 -> s3 [0, 65535] { R1651 += 1, R1588 += 1, R1589 += 1 };
  s0 -> s0 [0, 65535] { R1650 += 1, R1651 += 1 };
  s1 -> s1 [0, 65535] { R1651 += 1, R1589 += 1, R1357 += 1, R1358 += 1 };
  s1 -> s2 [0, 65535] { R1651 += 1, R1589 += 1, R1358 += 1, R1359 += 1 };
  s1 -> s6 [0, 65535] { R1651 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1651 += 1, R1589 += 1, R1358 += 1, R1359 += 1 };
  s2 -> s5 [0, 65535] { R1651 += 1, R1589 += 1 };
  s2 -> s6 [0, 65535] { R1651 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R1651 += 1, R1589 += 1, R1357 += 1, R1358 += 1 };
  s3 -> s2 [0, 65535] { R1651 += 1, R1589 += 1, R1358 += 1, R1359 += 1 };
  s3 -> s3 [0, 65535] { R1651 += 1, R1588 += 1, R1589 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1651 += 1, R1589 += 1 };
  s5 -> s6 [0, 65535] { R1651 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R1651 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 65535] { R1653 += 1, R1590 += 1, R1591 += 1 };
  s0 -> s2 [0, 65535] { R1653 += 1, R1591 += 1 };
  s0 -> s0 [0, 65535] { R1652 += 1, R1653 += 1 };
  s1 -> s1 [0, 65535] { R1653 += 1, R1590 += 1, R1591 += 1 };
  s1 -> s2 [0, 65535] { R1653 += 1, R1591 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1653 += 1, R1591 += 1 };
  s2 -> s3 [0, 65535] { R1653 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1653 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s0 [0, 65535] { R1654 += 1, R1655 += 1 };
  s0 -> s1 [0, 65535] { R1655 += 1, R1610 += 1, R1611 += 1 };
  s0 -> s2 [0, 65535] { R1655 += 1, R1611 += 1, R18 += 1 };
  s1 -> s1 [0, 65535] { R1655 += 1, R1610 += 1, R1611 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R1655 += 1, R1611 += 1, R18 += 1 };
  s2 -> s3 [0, 65535] { R1655 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1655 += 1, R1611 += 1, R18 += 1 };
  s3 -> s3 [0, 65535] { R1655 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 72] { R1657 += 1, R1613 += 1 };
  s0 -> s0 [0, 65535] { R1656 += 1, R1657 += 1 };
  s0 -> s2 [0, 65535] { R1657 += 1, R1612 += 1, R1613 += 1 };
  s0 -> s3 [73, 73] { R1657 += 1, R1613 += 1 };
  s0 -> s4 [73, 73] { R1657 += 1, R1613 += 1 };
  s0 -> s5 [81, 81] { R1657 += 1, R1613 += 1 };
  s0 -> s1 [82, 65535] { R1657 += 1, R1613 += 1 };
  s1 -> s1 [0, 72] { R1657 += 1, R1613 += 1 };
  s1 -> s3 [73, 73] { R1657 += 1, R1613 += 1 };
  s1 -> s4 [73, 73] { R1657 += 1, R1613 += 1 };
  s1 -> s5 [81, 81] { R1657 += 1, R1613 += 1 };
  s1 -> s1 [82, 65535] { R1657 += 1, R1613 += 1 };
  s2 -> s1 [0, 72] { R1657 += 1, R1613 += 1 };
  s2 -> s2 [0, 65535] { R1657 += 1, R1612 += 1, R1613 += 1 };
  s2 -> s3 [73, 73] { R1657 += 1, R1613 += 1 };
  s2 -> s4 [73, 73] { R1657 += 1, R1613 += 1 };
  s2 -> s5 [81, 81] { R1657 += 1, R1613 += 1 };
  s2 -> s1 [82, 65535] { R1657 += 1, R1613 += 1 };
  s3 -> s3 [0, 73] { R1657 += 1, R1613 += 1 };
  s3 -> s8 [81, 81] { R1657 += 1, R1613 += 1 };
  s3 -> s3 [82, 65535] { R1657 += 1, R1613 += 1 };
  s5 -> s5 [0, 72] { R1657 += 1, R1613 += 1 };
  s5 -> s5 [0, 65535] { R1657 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [73, 73] { R1657 += 1, R1613 += 1 };
  s5 -> s8 [73, 73] { R1657 += 1, R1613 += 1 };
  s5 -> s5 [81, 65535] { R1657 += 1, R1613 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R1657 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 73] { R1657 += 1, R1613 += 1 };
  s8 -> s8 [0, 65535] { R1657 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [81, 65535] { R1657 += 1, R1613 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 72] { R1659 += 1, R1615 += 1, R66 += 1 };
  s0 -> s2 [0, 65535] { R1659 += 1, R1614 += 1, R1615 += 1 };
  s0 -> s0 [0, 65535] { R1658 += 1, R1659 += 1 };
  s0 -> s3 [73, 73] { R1659 += 1, R1615 += 1, R66 += 1 };
  s0 -> s4 [73, 73] { R1659 += 1, R1615 += 1, R66 += 1 };
  s0 -> s1 [74, 65535] { R1659 += 1, R1615 += 1, R66 += 1 };
  s1 -> s1 [0, 72] { R1659 += 1, R1615 += 1, R66 += 1 };
  s1 -> s1 [0, 65535] { R1659 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R1659 += 1, R1615 += 1, R66 += 1 };
  s1 -> s4 [73, 73] { R1659 += 1, R1615 += 1, R66 += 1 };
  s1 -> s1 [74, 65535] { R1659 += 1, R1615 += 1, R66 += 1 };
  s2 -> s1 [0, 72] { R1659 += 1, R1615 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R1659 += 1, R1614 += 1, R1615 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R1659 += 1, R1615 += 1, R66 += 1 };
  s2 -> s4 [73, 73] { R1659 += 1, R1615 += 1, R66 += 1 };
  s2 -> s1 [74, 65535] { R1659 += 1, R1615 += 1, R66 += 1 };
  s3 -> s3 [0, 65535] { R1659 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1659 += 1, R1615 += 1, R66 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R1659 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1659 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 72] { R1661 += 1, R1617 += 1, R68 += 1 };
  s0 -> s0 [0, 65535] { R1660 += 1, R1661 += 1 };
  s0 -> s2 [0, 65535] { R1661 += 1, R1616 += 1, R1617 += 1 };
  s0 -> s3 [73, 73] { R1661 += 1, R1617 += 1, R68 += 1 };
  s0 -> s4 [73, 73] { R1661 += 1, R1617 += 1, R68 += 1 };
  s0 -> s1 [74, 65535] { R1661 += 1, R1617 += 1, R68 += 1 };
  s1 -> s1 [0, 72] { R1661 += 1, R1617 += 1, R68 += 1 };
  s1 -> s1 [0, 65535] { R1661 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R1661 += 1, R1617 += 1, R68 += 1 };
  s1 -> s4 [73, 73] { R1661 += 1, R1617 += 1, R68 += 1 };
  s1 -> s1 [74, 65535] { R1661 += 1, R1617 += 1, R68 += 1 };
  s2 -> s1 [0, 72] { R1661 += 1, R1617 += 1, R68 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1661 += 1, R1616 += 1, R1617 += 1 };
  s2 -> s3 [73, 73] { R1661 += 1, R1617 += 1, R68 += 1 };
  s2 -> s4 [73, 73] { R1661 += 1, R1617 += 1, R68 += 1 };
  s2 -> s1 [74, 65535] { R1661 += 1, R1617 += 1, R68 += 1 };
  s3 -> s3 [0, 65535] { R1661 += 1, R1617 += 1, R68 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R1661 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1661 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1661 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 72] { R1663 += 1, R1619 += 1, R70 += 1, R71 += 1 };
  s0 -> s2 [0, 65535] { R1663 += 1, R1618 += 1, R1619 += 1 };
  s0 -> s0 [0, 65535] { R1662 += 1, R1663 += 1 };
  s0 -> s3 [73, 73] { R1663 += 1, R1619 += 1, R70 += 1, R71 += 1 };
  s0 -> s4 [73, 73] { R1663 += 1, R1619 += 1, R70 += 1, R71 += 1 };
  s0 -> s1 [74, 65535] { R1663 += 1, R1619 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 72] { R1663 += 1, R1619 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 65535] { R1663 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R1663 += 1, R1619 += 1, R70 += 1, R71 += 1 };
  s1 -> s4 [73, 73] { R1663 += 1, R1619 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [74, 65535] { R1663 += 1, R1619 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [0, 72] { R1663 += 1, R1619 += 1, R70 += 1, R71 += 1 };
  s2 -> s2 [0, 65535] { R1663 += 1, R1618 += 1, R1619 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R1663 += 1, R1619 += 1, R70 += 1, R71 += 1 };
  s2 -> s4 [73, 73] { R1663 += 1, R1619 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [74, 65535] { R1663 += 1, R1619 += 1, R70 += 1, R71 += 1 };
  s3 -> s3 [0, 65535] { R1663 += 1, R1619 += 1, R70 += 1, R71 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R1663 += 1 };
  s4 -> s4 [0, 65535] { R1663 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1663 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 72] { R1665 += 1, R1621 += 1, R74 += 1, R75 += 1 };
  s0 -> s0 [0, 65535] { R1664 += 1, R1665 += 1 };
  s0 -> s2 [0, 65535] { R1665 += 1, R1620 += 1, R1621 += 1 };
  s0 -> s3 [73, 73] { R1665 += 1, R1621 += 1, R74 += 1, R75 += 1 };
  s0 -> s4 [73, 73] { R1665 += 1, R1621 += 1, R74 += 1, R75 += 1 };
  s0 -> s1 [74, 65535] { R1665 += 1, R1621 += 1, R74 += 1, R75 += 1 };
  s1 -> s1 [0, 72] { R1665 += 1, R1621 += 1, R74 += 1, R75 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1665 += 1 };
  s1 -> s3 [73, 73] { R1665 += 1, R1621 += 1, R74 += 1, R75 += 1 };
  s1 -> s4 [73, 73] { R1665 += 1, R1621 += 1, R74 += 1, R75 += 1 };
  s1 -> s1 [74, 65535] { R1665 += 1, R1621 += 1, R74 += 1, R75 += 1 };
  s2 -> s1 [0, 72] { R1665 += 1, R1621 += 1, R74 += 1, R75 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1665 += 1, R1620 += 1, R1621 += 1 };
  s2 -> s3 [73, 73] { R1665 += 1, R1621 += 1, R74 += 1, R75 += 1 };
  s2 -> s4 [73, 73] { R1665 += 1, R1621 += 1, R74 += 1, R75 += 1 };
  s2 -> s1 [74, 65535] { R1665 += 1, R1621 += 1, R74 += 1, R75 += 1 };
  s3 -> s3 [0, 65535] { R1665 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1665 += 1, R1621 += 1, R74 += 1, R75 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R1665 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1665 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 72] { R1667 += 1, R1623 += 1, R1350 += 1, R1351 += 1 };
  s0 -> s0 [0, 65535] { R1666 += 1, R1667 += 1 };
  s0 -> s2 [0, 65535] { R1667 += 1, R1622 += 1, R1623 += 1 };
  s0 -> s3 [73, 73] { R1667 += 1, R1623 += 1, R1350 += 1, R1351 += 1 };
  s0 -> s4 [73, 73] { R1667 += 1, R1623 += 1, R1350 += 1, R1351 += 1 };
  s0 -> s1 [74, 65535] { R1667 += 1, R1623 += 1, R1350 += 1, R1351 += 1 };
  s1 -> s1 [0, 72] { R1667 += 1, R1623 += 1, R1350 += 1, R1351 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1667 += 1 };
  s1 -> s3 [73, 73] { R1667 += 1, R1623 += 1, R1350 += 1, R1351 += 1 };
  s1 -> s4 [73, 73] { R1667 += 1, R1623 += 1, R1350 += 1, R1351 += 1 };
  s1 -> s1 [74, 65535] { R1667 += 1, R1623 += 1, R1350 += 1, R1351 += 1 };
  s2 -> s1 [0, 72] { R1667 += 1, R1623 += 1, R1350 += 1, R1351 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1667 += 1, R1622 += 1, R1623 += 1 };
  s2 -> s3 [73, 73] { R1667 += 1, R1623 += 1, R1350 += 1, R1351 += 1 };
  s2 -> s4 [73, 73] { R1667 += 1, R1623 += 1, R1350 += 1, R1351 += 1 };
  s2 -> s1 [74, 65535] { R1667 += 1, R1623 += 1, R1350 += 1, R1351 += 1 };
  s3 -> s3 [0, 65535] { R1667 += 1, R1623 += 1, R1350 += 1, R1351 += 1 };
  s3 -> s6 [0, 65535] { R1667 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1667 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1667 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 72] { R1669 += 1, R1625 += 1, R1354 += 1, R1355 += 1 };
  s0 -> s2 [0, 65535] { R1669 += 1, R1624 += 1, R1625 += 1 };
  s0 -> s0 [0, 65535] { R1668 += 1, R1669 += 1 };
  s0 -> s3 [73, 73] { R1669 += 1, R1625 += 1, R1354 += 1, R1355 += 1 };
  s0 -> s4 [73, 73] { R1669 += 1, R1625 += 1, R1354 += 1, R1355 += 1 };
  s0 -> s1 [74, 65535] { R1669 += 1, R1625 += 1, R1354 += 1, R1355 += 1 };
  s1 -> s1 [0, 72] { R1669 += 1, R1625 += 1, R1354 += 1, R1355 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1669 += 1 };
  s1 -> s3 [73, 73] { R1669 += 1, R1625 += 1, R1354 += 1, R1355 += 1 };
  s1 -> s4 [73, 73] { R1669 += 1, R1625 += 1, R1354 += 1, R1355 += 1 };
  s1 -> s1 [74, 65535] { R1669 += 1, R1625 += 1, R1354 += 1, R1355 += 1 };
  s2 -> s1 [0, 72] { R1669 += 1, R1625 += 1, R1354 += 1, R1355 += 1 };
  s2 -> s2 [0, 65535] { R1669 += 1, R1624 += 1, R1625 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R1669 += 1, R1625 += 1, R1354 += 1, R1355 += 1 };
  s2 -> s4 [73, 73] { R1669 += 1, R1625 += 1, R1354 += 1, R1355 += 1 };
  s2 -> s1 [74, 65535] { R1669 += 1, R1625 += 1, R1354 += 1, R1355 += 1 };
  s3 -> s3 [0, 65535] { R1669 += 1, R1625 += 1, R1354 += 1, R1355 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R1669 += 1 };
  s4 -> s4 [0, 65535] { R1669 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1669 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 72] { R1671 += 1, R1627 += 1, R1568 += 1, R1569 += 1 };
  s0 -> s2 [0, 72] { R1671 += 1, R1627 += 1, R1569 += 1 };
  s0 -> s0 [0, 65535] { R1670 += 1, R1671 += 1 };
  s0 -> s3 [0, 65535] { R1671 += 1, R1626 += 1, R1627 += 1 };
  s0 -> s4 [73, 73] { R1671 += 1, R1627 += 1, R1568 += 1, R1569 += 1 };
  s0 -> s5 [73, 73] { R1671 += 1, R1627 += 1, R1568 += 1, R1569 += 1 };
  s0 -> s6 [73, 73] { R1671 += 1, R1627 += 1, R1569 += 1 };
  s0 -> s7 [73, 73] { R1671 += 1, R1627 += 1, R1569 += 1 };
  s0 -> s2 [74, 80] { R1671 += 1, R1627 += 1, R1569 += 1 };
  s0 -> s1 [74, 65535] { R1671 += 1, R1627 += 1, R1568 += 1, R1569 += 1 };
  s0 -> s8 [81, 81] { R1671 += 1, R1627 += 1, R1569 += 1 };
  s0 -> s2 [86, 65535] { R1671 += 1, R1627 += 1, R1569 += 1 };
  s1 -> s1 [0, 72] { R1671 += 1, R1627 += 1, R1568 += 1, R1569 += 1 };
  s1 -> s2 [0, 72] { R1671 += 1, R1627 += 1, R1569 += 1 };
  s1 -> s4 [73, 73] { R1671 += 1, R1627 += 1, R1568 += 1, R1569 += 1 };
  s1 -> s5 [73, 73] { R1671 += 1, R1627 += 1, R1568 += 1, R1569 += 1 };
  s1 -> s6 [73, 73] { R1671 += 1, R1627 += 1, R1569 += 1 };
  s1 -> s7 [73, 73] { R1671 += 1, R1627 += 1, R1569 += 1 };
  s1 -> s2 [74, 80] { R1671 += 1, R1627 += 1, R1569 += 1 };
  s1 -> s1 [74, 65535] { R1671 += 1, R1627 += 1, R1568 += 1, R1569 += 1 };
  s1 -> s8 [81, 81] { R1671 += 1, R1627 += 1, R1569 += 1 };
  s1 -> s2 [86, 65535] { R1671 += 1, R1627 += 1, R1569 += 1 };
  s2 -> s2 [0, 72] { R1671 += 1, R1627 += 1, R1569 += 1 };
  s2 -> s6 [73, 73] { R1671 += 1, R1627 += 1 };
  s2 -> s7 [73, 73] { R1671 += 1, R1627 += 1 };
  s2 -> s2 [74, 80] { R1671 += 1, R1627 += 1, R1569 += 1 };
  s2 -> s2 [74, 65535] { R1671 += 1, R1627 += 1 };
  s2 -> s8 [81, 81] { R1671 += 1, R1627 += 1, R1569 += 1 };
  s2 -> s2 [86, 65535] { R1671 += 1, R1627 += 1, R1569 += 1 };
  s3 -> s1 [0, 72] { R1671 += 1, R1627 += 1, R1568 += 1, R1569 += 1 };
  s3 -> s2 [0, 72] { R1671 += 1, R1627 += 1, R1569 += 1 };
  s3 -> s3 [0, 65535] { R1671 += 1, R1626 += 1, R1627 += 1 };
  s3 -> s4 [73, 73] { R1671 += 1, R1627 += 1, R1568 += 1, R1569 += 1 };
  s3 -> s5 [73, 73] { R1671 += 1, R1627 += 1, R1568 += 1, R1569 += 1 };
  s3 -> s6 [73, 73] { R1671 += 1, R1627 += 1, R1569 += 1 };
  s3 -> s7 [73, 73] { R1671 += 1, R1627 += 1, R1569 += 1 };
  s3 -> s2 [74, 80] { R1671 += 1, R1627 += 1, R1569 += 1 };
  s3 -> s1 [74, 65535] { R1671 += 1, R1627 += 1, R1568 += 1, R1569 += 1 };
  s3 -> s8 [81, 81] { R1671 += 1, R1627 += 1, R1569 += 1 };
  s3 -> s2 [86, 65535] { R1671 += 1, R1627 += 1, R1569 += 1 };
  s4 -> s7 [0, 80] { R1671 += 1, R1627 += 1, R1569 += 1 };
  s4 -> s4 [0, 65535] { R1671 += 1, R1627 += 1, R1568 += 1, R1569 += 1 };
  s4 -> s10 [81, 81] { R1671 += 1, R1627 += 1, R1569 += 1 };
  s4 -> s7 [86, 65535] { R1671 += 1, R1627 += 1, R1569 += 1 };
  s7 -> s7 [0, 80] { R1671 += 1, R1627 += 1, R1569 += 1 };
  s7 -> s7 [0, 65535] { R1671 += 1, R1627 += 1 };
  s7 -> s10 [81, 81] { R1671 += 1, R1627 += 1, R1569 += 1 };
  s7 -> s7 [86, 65535] { R1671 += 1, R1627 += 1, R1569 += 1 };
  s8 -> s8 [0, 72] { R1671 += 1, R1627 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R1671 += 1 };
  s8 -> s10 [73, 73] { R1671 += 1, R1627 += 1 };
  s8 -> s11 [73, 73] { R1671 += 1, R1627 += 1 };
  s8 -> s8 [74, 65535] { R1671 += 1, R1627 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s12 [0, 65535] { R1671 += 1 };
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R1671 += 1, R1627 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R1671 += 1 };
  s12 -> s12 [0, 65535] { R1671 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [113, 113];
  accepting s1;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
constraint R1 = R1587 && R2 = R1671 && R20 - R1671 = -1 && R21 = R1671 && R22 - R1671 = -1 && R23 = R1671 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R1353 + -1*R1351 - R53 = 0 && R52 + R1352 + R1350 = 0 && R1586 = 0 && R1612 = 0 && R1613 = 0 && R1626 = 0 && R1627 = 0 && R1628 = 0 && R1629 = R1671 && R1630 = 0 && R1631 = R1671 && R1632 = 0 && R1633 = R1671 && R1634 = 0 && R1635 = R1671 && R1636 = 0 && R1637 = R1671 && R1638 = 0 && R1639 = R1671 && R1640 = 0 && R1641 = R1671 && R1642 = 0 && R1643 = R1671 && R1644 = 0 && R1645 = R1671 && R1646 = 0 && R1647 = R1671 && R1648 = 0 && R1649 = R1671 && R1650 = 0 && R1651 = R1671 && R1652 = 0 && R1653 = R1671 && R1654 = 0 && R1655 = R1671 && R1656 = 0 && R1657 = R1671 && R1658 = 0 && R1659 = R1671 && R1660 = 0 && R1661 = R1671 && R1662 = 0 && R1663 = R1671 && R1664 = 0 && R1665 = R1671 && R1666 = 0 && R1667 = R1671 && R1668 = 0 && R1669 = R1671 && R1670 = 0 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R1353 + -1*R1351 - R53 < 1 && -1 < R1587 && 0 < R1671 && (R48 + R79 + R76 != 0 || ((R42 + R72 + R70 != 0 || R43 + R73 + R71 + -1*R1353 + -1*R1351 - R53 = 0 || R53 + R1353 + R1351 < 1) && (R42 + R72 + R70 = 0 || R53 + R1353 + R1351 < 1))) && (R48 + R79 + R76 != 0 || ((R46 + R77 + R74 != 0 || R47 + R78 + R75 + -1*R1353 + -1*R1351 - R53 = 0 || R53 + R1353 + R1351 < 1) && (R46 + R77 + R74 = 0 || R53 + R1353 + R1351 < 1))) && (R1572 != 0 || R1573 = R1587 || (R17 = 0 && R1587 = 0)) && (R1574 != 0 || R1575 = R1587 || (R17 = 0 && R1587 = 0)) && (R1576 != 0 || R1577 = R1587 || (R17 = 0 && R1587 = 0)) && (R1578 != 0 || R1579 = R1587 || (R17 = 0 && R1587 = 0)) && (R1580 != 0 || R1581 = R1587 || (R17 = 0 && R1587 = 0)) && (R1582 != 0 || R1583 = R1587 || (R17 = 0 && R1587 = 0)) && (R1584 != 0 || R1585 = R1587 || (R17 = 0 && R1587 = 0)) && (R1588 != 0 || R1587 = R1589 || (R17 = 0 && R1587 = 0)) && (R1590 != 0 || R1587 = R1591 || (R17 = 0 && R1587 = 0)) && (R18 = 0 || (R1610 = 0 && R1611 = 0)) && (R18 = 0 || (R1614 = 0 && R1615 = 0)) && (R18 = 0 || (R1616 = 0 && R1617 = 0)) && (R18 = 0 || (R1618 = 0 && R1619 = 0)) && (R18 = 0 || (R1620 = 0 && R1621 = 0)) && (R18 = 0 || (R1622 = 0 && R1623 = 0)) && (R18 = 0 || (R1624 = 0 && R1625 = 0)) && (R19 = 0 || (R1592 = 0 && R1593 = 0)) && (R19 = 0 || (R1594 = 0 && R1595 = 0)) && (R19 = 0 || (R1596 = 0 && R1597 = 0)) && (R19 = 0 || (R1598 = 0 && R1599 = 0)) && (R19 = 0 || (R1600 = 0 && R1601 = 0)) && (R19 = 0 || (R1602 = 0 && R1603 = 0)) && (R19 = 0 || (R1604 = 0 && R1605 = 0)) && (R19 = 0 || (R1606 = 0 && R1607 = 0)) && (R19 = 0 || (R1608 = 0 && R1609 = 0)) && (R48 + R79 + R76 = 0 || (R42 + R72 + R70 = 0 && R43 + R73 + R71 + -1*R1353 + -1*R1351 - R53 = 0)) && (R48 + R79 + R76 = 0 || (R46 + R77 + R74 = 0 && R47 + R78 + R75 + -1*R1353 + -1*R1351 - R53 = 0)) && (R58 + R1359 + R1356 = 0 || (R56 + R1357 + R1354 = 0 && R57 + R1358 + R1355 = 0)) && (R58 + R1359 + R1356 = 0 || (R62 + R1570 + R1568 = 0 && R63 + R1571 + R1569 = 0)) && (R1572 = 0 || (R17 = 0 && R1587 = 0)) && (R1574 = 0 || (R17 = 0 && R1587 = 0)) && (R1576 = 0 || (R17 = 0 && R1587 = 0)) && (R1578 = 0 || (R17 = 0 && R1587 = 0)) && (R1580 = 0 || (R17 = 0 && R1587 = 0)) && (R1582 = 0 || (R17 = 0 && R1587 = 0)) && (R1584 = 0 || (R17 = 0 && R1587 = 0)) && (R1588 = 0 || (R17 = 0 && R1587 = 0)) && (R1590 = 0 || (R17 = 0 && R1587 = 0));
// End of Parikh automata intersection problem
