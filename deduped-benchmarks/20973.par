// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R2, R28, R29, R3, R30, R31, R32, R33, R34, R35, R36, R37, R38, R39, R4, R40, R41, R42, R43, R44, R45, R5, R6, R8, R9;
synchronised {  // Automata constraining P19
automaton P19_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
synchronised {  // Automata constraining P21
automaton P21_0 {
  init s0;
  s0 -> s1 [10, 10];
  accepting s1;
};
};
synchronised {  // Automata constraining value1
automaton value1_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 60];
  s0 -> s1 [61, 61];
  s0 -> s0 [62, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 65535];
  accepting s1;
};
automaton value1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value1_2 {
  init s0;
  s0 -> s1 [0, 60] { R9 += 1 };
  s0 -> s0 [0, 65535] { R8 += 1, R9 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535] { R9 += 1 };
  s1 -> s1 [0, 60] { R9 += 1 };
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535] { R9 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value1_3 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
automaton value1_4 {
  init s0;
  s0 -> s0 [0, 65535] { R40 += 1, R41 += 1 };
  s0 -> s1 [0, 65535] { R41 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R41 += 1, R0 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_5 {
  init s0;
  s0 -> s0 [0, 65535] { R42 += 1, R43 += 1 };
  s0 -> s1 [0, 65535] { R43 += 1, R28 += 1, R29 += 1 };
  s0 -> s2 [13, 13] { R43 += 1, R29 += 1 };
  s1 -> s1 [0, 65535] { R43 += 1, R28 += 1, R29 += 1 };
  s1 -> s2 [13, 13] { R43 += 1, R29 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R43 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value1_6 {
  init s0;
  s0 -> s1 [0, 65535] { R45 += 1, R30 += 1, R31 += 1 };
  s0 -> s0 [0, 65535] { R44 += 1, R45 += 1 };
  s0 -> s2 [0, 65535] { R45 += 1, R31 += 1, R3 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R45 += 1, R30 += 1, R31 += 1 };
  s1 -> s2 [0, 65535] { R45 += 1, R31 += 1, R3 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R45 += 1, R31 += 1, R3 += 1 };
  s2 -> s4 [0, 65535] { R45 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R45 += 1 };
  accepting s3, s4, s2, s1, s0;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s0 [91, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R6 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 8] { R33 += 1 };
  s0 -> s0 [0, 65535] { R32 += 1, R33 += 1 };
  s0 -> s2 [9, 13] { R33 += 1 };
  s0 -> s1 [14, 31] { R33 += 1 };
  s0 -> s2 [32, 32] { R33 += 1 };
  s0 -> s1 [33, 65535] { R33 += 1 };
  s1 -> s1 [0, 65535] { R33 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R33 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_4 {
  init s0;
  s0 -> s0 [0, 65535] { R34 += 1, R35 += 1 };
  s0 -> s1 [0, 65535] { R35 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R35 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 8] { R37 += 1 };
  s0 -> s0 [0, 65535] { R36 += 1, R37 += 1 };
  s0 -> s2 [9, 13] { R37 += 1 };
  s0 -> s1 [14, 31] { R37 += 1 };
  s0 -> s2 [32, 32] { R37 += 1 };
  s0 -> s1 [33, 65535] { R37 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R37 += 1 };
  s2 -> s1 [0, 65535] { R37 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 65535] { R39 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R38 += 1, R39 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R39 += 1, R5 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
};
synchronised {  // Automata constraining P20
automaton P20_0 {
  init s0;
  s0 -> s1 [9, 9];
  accepting s1;
};
};
constraint R2 - R45 = 1 && R8 = 0 && R9 = R45 && R28 = 0 && R40 = 0 && R41 = R45 && R42 = 0 && R43 = R45 && R44 = 0 && R0 != 0 && R1 != 0 && R6 < 1 && -1 < R45 && (R0 != R29 || R29 = 1 || R29 < 0) && (R4 != 0 || ((R1 != R33 || R32 - R33 = -1 || R33 < 0) && (R1 = R33 || R1 < 1))) && (R4 != 0 || ((R1 != R35 || R34 - R35 = -1 || R35 < 0) && (R1 = R35 || R1 < 1))) && (R29 != 1 || -1 < R0) && (R30 != 0 || ((R3 != 0 || ((R0 != R31 || R31 = 1 || R31 < 0) && (R0 = R31 || R31 = 1 || R0 < 1))) && (R3 = 0 || ((R0 != R31 || R31 = 1 || R31 < 0) && (R31 != 1 || -1 < R0) && (R0 = R31 || R31 = 1))))) && (R36 != 0 || ((R5 != 0 || ((R1 != R37 || R37 = 1 || R37 < 0) && (R1 = R37 || R37 = 1 || R1 < 1))) && (R5 = 0 || ((R1 != R37 || R37 = 1 || R37 < 0) && (R37 != 1 || -1 < R1) && (R1 = R37 || R37 = 1))))) && (R38 != 0 || ((R5 != 0 || ((R1 != R39 || R39 = 1 || R39 < 0) && (R1 = R39 || R39 = 1 || R1 < 1))) && (R5 = 0 || ((R1 != R39 || R39 = 1 || R39 < 0) && (R39 != 1 || -1 < R1) && (R1 = R39 || R39 = 1))))) && (R0 = R29 || R29 = 1) && (R4 = 0 || (R1 = R33 && R32 - R33 = -1)) && (R4 = 0 || (R1 = R35 && R34 - R35 = -1)) && (R30 = 0 || (R3 = 0 && R0 < 0)) && (R36 = 0 || (R5 = 0 && R1 < 0)) && (R38 = 0 || (R5 = 0 && R1 < 0));
// End of Parikh automata intersection problem
