// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R100, R101, R102, R103, R104, R105, R106, R107, R108, R109, R11, R110, R111, R112, R113, R114, R115, R116, R117, R118, R119, R12, R120, R121, R122, R123, R124, R125, R126, R127, R128, R129, R130, R131, R132, R133, R134, R135, R136, R137, R138, R139, R140, R141, R142, R143, R144, R145, R146, R15, R16, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R3, R4, R5, R8, R87, R88, R89, R90, R91, R92, R93, R94, R95, R96, R97, R98, R99;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [69, 69];
  s0 -> s0 [70, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [69, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 68];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [69, 69];
  s0 -> s1 [70, 65535];
  s1 -> s1 [0, 68];
  s1 -> s2 [69, 69];
  s1 -> s1 [70, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R20 += 1 };
  s0 -> s0 [0, 65535] { R19 += 1, R20 += 1 };
  s0 -> s2 [9, 13] { R20 += 1 };
  s0 -> s1 [14, 31] { R20 += 1 };
  s0 -> s2 [32, 32] { R20 += 1 };
  s0 -> s1 [33, 65535] { R20 += 1 };
  s1 -> s1 [0, 65535] { R20 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R20 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R22 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R21 += 1, R22 += 1 };
  s1 -> s1 [0, 65535] { R22 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R24 += 1 };
  s0 -> s0 [0, 65535] { R23 += 1, R24 += 1 };
  s0 -> s2 [9, 13] { R24 += 1 };
  s0 -> s1 [14, 31] { R24 += 1 };
  s0 -> s2 [32, 32] { R24 += 1 };
  s0 -> s1 [33, 65535] { R24 += 1 };
  s1 -> s1 [0, 65535] { R24 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R24 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s0 [0, 65535] { R25 += 1, R26 += 1 };
  s0 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R87 += 1, R88 += 1 };
  s0 -> s1 [0, 65535] { R88 += 1, R18 += 1 };
  s1 -> s1 [0, 65535] { R88 += 1, R18 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 68] { R90 += 1 };
  s0 -> s0 [0, 65535] { R89 += 1, R90 += 1 };
  s0 -> s2 [69, 69] { R90 += 1 };
  s0 -> s3 [69, 69] { R90 += 1 };
  s0 -> s1 [79, 65535] { R90 += 1 };
  s1 -> s1 [0, 68] { R90 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [69, 69] { R90 += 1 };
  s1 -> s3 [69, 69] { R90 += 1 };
  s1 -> s1 [79, 65535] { R90 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 69] { R90 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [79, 65535] { R90 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 68] { R122 += 1 };
  s0 -> s0 [0, 65535] { R121 += 1, R122 += 1 };
  s0 -> s2 [69, 69] { R122 += 1 };
  s0 -> s1 [70, 65535] { R122 += 1 };
  s1 -> s1 [0, 68] { R122 += 1 };
  s1 -> s2 [69, 69] { R122 += 1 };
  s1 -> s1 [70, 65535] { R122 += 1 };
  s2 -> s2 [0, 65535] { R122 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 65535] { R124 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R123 += 1, R124 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R124 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 68] { R126 += 1 };
  s0 -> s2 [0, 65535] { R126 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R125 += 1, R126 += 1 };
  s0 -> s3 [69, 69] { R126 += 1 };
  s0 -> s1 [70, 65535] { R126 += 1 };
  s1 -> s1 [0, 68] { R126 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [69, 69] { R126 += 1 };
  s1 -> s1 [70, 65535] { R126 += 1 };
  s2 -> s1 [0, 68] { R126 += 1 };
  s2 -> s2 [0, 65535] { R126 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [69, 69] { R126 += 1 };
  s2 -> s1 [70, 65535] { R126 += 1 };
  s3 -> s3 [0, 65535] { R126 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_13 {
  init s0;
  s0 -> s0 [0, 65535] { R127 += 1, R128 += 1 };
  s0 -> s1 [0, 65535] { R128 += 1, R98 += 1, R17 += 1 };
  s0 -> s2 [0, 65535] { R128 += 1, R97 += 1, R98 += 1 };
  s1 -> s1 [0, 65535] { R128 += 1, R98 += 1, R17 += 1 };
  s1 -> s4 [0, 65535] { R128 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R128 += 1, R98 += 1, R17 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R128 += 1, R97 += 1, R98 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R128 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 68] { R130 += 1, R100 += 1 };
  s0 -> s0 [0, 65535] { R129 += 1, R130 += 1 };
  s0 -> s2 [0, 65535] { R130 += 1, R99 += 1, R100 += 1 };
  s0 -> s3 [69, 69] { R130 += 1, R100 += 1 };
  s0 -> s4 [69, 69] { R130 += 1, R100 += 1 };
  s0 -> s1 [79, 65535] { R130 += 1, R100 += 1 };
  s1 -> s1 [0, 68] { R130 += 1, R100 += 1 };
  s1 -> s1 [0, 65535] { R130 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [69, 69] { R130 += 1, R100 += 1 };
  s1 -> s4 [69, 69] { R130 += 1, R100 += 1 };
  s1 -> s1 [79, 65535] { R130 += 1, R100 += 1 };
  s2 -> s1 [0, 68] { R130 += 1, R100 += 1 };
  s2 -> s2 [0, 65535] { R130 += 1, R99 += 1, R100 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [69, 69] { R130 += 1, R100 += 1 };
  s2 -> s4 [69, 69] { R130 += 1, R100 += 1 };
  s2 -> s1 [79, 65535] { R130 += 1, R100 += 1 };
  s3 -> s3 [0, 69] { R130 += 1, R100 += 1 };
  s3 -> s3 [0, 65535] { R130 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [79, 65535] { R130 += 1, R100 += 1 };
  s4 -> s4 [0, 65535] { R130 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 68] { R132 += 1, R106 += 1 };
  s0 -> s0 [0, 65535] { R131 += 1, R132 += 1 };
  s0 -> s2 [0, 65535] { R132 += 1, R105 += 1, R106 += 1 };
  s0 -> s3 [69, 69] { R132 += 1, R106 += 1 };
  s0 -> s1 [70, 65535] { R132 += 1, R106 += 1 };
  s1 -> s1 [0, 68] { R132 += 1, R106 += 1 };
  s1 -> s3 [69, 69] { R132 += 1, R106 += 1 };
  s1 -> s1 [70, 65535] { R132 += 1, R106 += 1 };
  s2 -> s1 [0, 68] { R132 += 1, R106 += 1 };
  s2 -> s2 [0, 65535] { R132 += 1, R105 += 1, R106 += 1 };
  s2 -> s3 [69, 69] { R132 += 1, R106 += 1 };
  s2 -> s1 [70, 65535] { R132 += 1, R106 += 1 };
  s3 -> s3 [0, 65535] { R132 += 1, R106 += 1 };
  s3 -> s4 [0, 65535] { R132 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R132 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
automaton value2_16 {
  init s0;
  s0 -> s0 [0, 65535] { R133 += 1, R134 += 1 };
  s0 -> s1 [0, 65535] { R134 += 1, R107 += 1, R108 += 1 };
  s0 -> s2 [0, 65535] { R134 += 1, R108 += 1, R0 += 1 };
  s1 -> s1 [0, 65535] { R134 += 1, R107 += 1, R108 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R134 += 1, R108 += 1, R0 += 1 };
  s2 -> s3 [0, 65535] { R134 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R134 += 1, R108 += 1, R0 += 1 };
  s3 -> s3 [0, 65535] { R134 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 68] { R136 += 1, R110 += 1 };
  s0 -> s2 [0, 65535] { R136 += 1, R109 += 1, R110 += 1 };
  s0 -> s3 [0, 65535] { R136 += 1, R110 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R135 += 1, R136 += 1 };
  s0 -> s4 [69, 69] { R136 += 1, R110 += 1 };
  s0 -> s1 [70, 65535] { R136 += 1, R110 += 1 };
  s1 -> s1 [0, 68] { R136 += 1, R110 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R136 += 1 };
  s1 -> s4 [69, 69] { R136 += 1, R110 += 1 };
  s1 -> s1 [70, 65535] { R136 += 1, R110 += 1 };
  s2 -> s1 [0, 68] { R136 += 1, R110 += 1 };
  s2 -> s2 [0, 65535] { R136 += 1, R109 += 1, R110 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R136 += 1, R110 += 1, R5 += 1 };
  s2 -> s4 [69, 69] { R136 += 1, R110 += 1 };
  s2 -> s1 [70, 65535] { R136 += 1, R110 += 1 };
  s3 -> s1 [0, 68] { R136 += 1, R110 += 1 };
  s3 -> s5 [0, 65535] { R136 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R136 += 1, R110 += 1, R5 += 1 };
  s3 -> s4 [69, 69] { R136 += 1, R110 += 1 };
  s3 -> s1 [70, 65535] { R136 += 1, R110 += 1 };
  s4 -> s4 [0, 65535] { R136 += 1, R110 += 1 };
  s5 -> s5 [0, 65535] { R136 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 68] { R138 += 1, R112 += 1, R92 += 1 };
  s0 -> s2 [0, 65535] { R138 += 1, R111 += 1, R112 += 1 };
  s0 -> s3 [0, 65535] { R138 += 1, R112 += 1, R91 += 1, R92 += 1 };
  s0 -> s0 [0, 65535] { R137 += 1, R138 += 1 };
  s0 -> s1 [70, 65535] { R138 += 1, R112 += 1, R92 += 1 };
  s1 -> s1 [0, 68] { R138 += 1, R112 += 1, R92 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R138 += 1 };
  s1 -> s1 [0, 65535] { R138 += 1, R112 += 1 };
  s1 -> s1 [70, 65535] { R138 += 1, R112 += 1, R92 += 1 };
  s2 -> s1 [0, 68] { R138 += 1, R112 += 1, R92 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R138 += 1, R111 += 1, R112 += 1 };
  s2 -> s3 [0, 65535] { R138 += 1, R112 += 1, R91 += 1, R92 += 1 };
  s2 -> s1 [70, 65535] { R138 += 1, R112 += 1, R92 += 1 };
  s3 -> s1 [0, 68] { R138 += 1, R112 += 1, R92 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R138 += 1 };
  s3 -> s3 [0, 65535] { R138 += 1, R112 += 1, R91 += 1, R92 += 1 };
  s3 -> s1 [70, 65535] { R138 += 1, R112 += 1, R92 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R138 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_19 {
  init s0;
  s0 -> s0 [0, 65535] { R139 += 1, R140 += 1 };
  s0 -> s1 [0, 65535] { R140 += 1, R114 += 1, R93 += 1, R94 += 1 };
  s0 -> s2 [0, 65535] { R140 += 1, R113 += 1, R114 += 1 };
  s0 -> s3 [0, 65535] { R140 += 1, R114 += 1, R94 += 1, R15 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R140 += 1 };
  s1 -> s1 [0, 65535] { R140 += 1, R114 += 1, R93 += 1, R94 += 1 };
  s1 -> s3 [0, 65535] { R140 += 1, R114 += 1, R94 += 1, R15 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R140 += 1, R114 += 1, R93 += 1, R94 += 1 };
  s2 -> s2 [0, 65535] { R140 += 1, R113 += 1, R114 += 1 };
  s2 -> s3 [0, 65535] { R140 += 1, R114 += 1, R94 += 1, R15 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R140 += 1 };
  s3 -> s6 [0, 65535] { R140 += 1, R114 += 1 };
  s3 -> s3 [0, 65535] { R140 += 1, R114 += 1, R94 += 1, R15 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R140 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R140 += 1 };
  s6 -> s6 [0, 65535] { R140 += 1, R114 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 69] { R142 += 1, R116 += 1, R96 += 1 };
  s0 -> s2 [0, 65535] { R142 += 1, R116 += 1, R95 += 1, R96 += 1 };
  s0 -> s3 [0, 65535] { R142 += 1, R115 += 1, R116 += 1 };
  s0 -> s0 [0, 65535] { R141 += 1, R142 += 1 };
  s0 -> s1 [78, 65535] { R142 += 1, R116 += 1, R96 += 1 };
  s1 -> s1 [0, 69] { R142 += 1, R116 += 1, R96 += 1 };
  s1 -> s1 [0, 65535] { R142 += 1, R116 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R142 += 1 };
  s1 -> s1 [78, 65535] { R142 += 1, R116 += 1, R96 += 1 };
  s2 -> s1 [0, 69] { R142 += 1, R116 += 1, R96 += 1 };
  s2 -> s2 [0, 65535] { R142 += 1, R116 += 1, R95 += 1, R96 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R142 += 1 };
  s2 -> s1 [78, 65535] { R142 += 1, R116 += 1, R96 += 1 };
  s3 -> s1 [0, 69] { R142 += 1, R116 += 1, R96 += 1 };
  s3 -> s2 [0, 65535] { R142 += 1, R116 += 1, R95 += 1, R96 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R142 += 1, R115 += 1, R116 += 1 };
  s3 -> s1 [78, 65535] { R142 += 1, R116 += 1, R96 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R142 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R144 += 1, R118 += 1, R102 += 1, R16 += 1 };
  s0 -> s2 [0, 65535] { R144 += 1, R118 += 1, R101 += 1, R102 += 1 };
  s0 -> s3 [0, 65535] { R144 += 1, R117 += 1, R118 += 1 };
  s0 -> s0 [0, 65535] { R143 += 1, R144 += 1 };
  s1 -> s1 [0, 65535] { R144 += 1, R118 += 1, R102 += 1, R16 += 1 };
  s1 -> s6 [0, 65535] { R144 += 1, R118 += 1 };
  s1 -> s5 [0, 65535] { R144 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R144 += 1, R118 += 1, R102 += 1, R16 += 1 };
  s2 -> s2 [0, 65535] { R144 += 1, R118 += 1, R101 += 1, R102 += 1 };
  s2 -> s5 [0, 65535] { R144 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R144 += 1, R118 += 1, R102 += 1, R16 += 1 };
  s3 -> s2 [0, 65535] { R144 += 1, R118 += 1, R101 += 1, R102 += 1 };
  s3 -> s3 [0, 65535] { R144 += 1, R117 += 1, R118 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R144 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R144 += 1, R118 += 1 };
  s6 -> s5 [0, 65535] { R144 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 68] { R146 += 1, R120 += 1, R104 += 1 };
  s0 -> s2 [0, 65535] { R146 += 1, R119 += 1, R120 += 1 };
  s0 -> s3 [0, 65535] { R146 += 1, R120 += 1, R103 += 1, R104 += 1 };
  s0 -> s0 [0, 65535] { R145 += 1, R146 += 1 };
  s0 -> s4 [69, 69] { R146 += 1, R120 += 1, R104 += 1 };
  s0 -> s5 [69, 69] { R146 += 1, R120 += 1, R104 += 1 };
  s0 -> s6 [78, 78] { R146 += 1, R120 += 1, R104 += 1 };
  s0 -> s1 [79, 65535] { R146 += 1, R120 += 1, R104 += 1 };
  s1 -> s1 [0, 68] { R146 += 1, R120 += 1, R104 += 1 };
  s1 -> s4 [69, 69] { R146 += 1, R120 += 1, R104 += 1 };
  s1 -> s5 [69, 69] { R146 += 1, R120 += 1, R104 += 1 };
  s1 -> s6 [78, 78] { R146 += 1, R120 += 1, R104 += 1 };
  s1 -> s1 [79, 65535] { R146 += 1, R120 += 1, R104 += 1 };
  s2 -> s1 [0, 68] { R146 += 1, R120 += 1, R104 += 1 };
  s2 -> s2 [0, 65535] { R146 += 1, R119 += 1, R120 += 1 };
  s2 -> s3 [0, 65535] { R146 += 1, R120 += 1, R103 += 1, R104 += 1 };
  s2 -> s4 [69, 69] { R146 += 1, R120 += 1, R104 += 1 };
  s2 -> s5 [69, 69] { R146 += 1, R120 += 1, R104 += 1 };
  s2 -> s6 [78, 78] { R146 += 1, R120 += 1, R104 += 1 };
  s2 -> s1 [79, 65535] { R146 += 1, R120 += 1, R104 += 1 };
  s3 -> s1 [0, 68] { R146 += 1, R120 += 1, R104 += 1 };
  s3 -> s3 [0, 65535] { R146 += 1, R120 += 1, R103 += 1, R104 += 1 };
  s3 -> s4 [69, 69] { R146 += 1, R120 += 1, R104 += 1 };
  s3 -> s5 [69, 69] { R146 += 1, R120 += 1, R104 += 1 };
  s3 -> s6 [78, 78] { R146 += 1, R120 += 1, R104 += 1 };
  s3 -> s1 [79, 65535] { R146 += 1, R120 += 1, R104 += 1 };
  s4 -> s4 [0, 69] { R146 += 1, R120 += 1, R104 += 1 };
  s4 -> s10 [78, 78] { R146 += 1, R120 += 1, R104 += 1 };
  s4 -> s4 [79, 65535] { R146 += 1, R120 += 1, R104 += 1 };
  s6 -> s6 [0, 68] { R146 += 1, R120 += 1, R104 += 1 };
  s6 -> s6 [0, 65535] { R146 += 1, R120 += 1 };
  s6 -> s7 [0, 65535] { R146 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s9 [69, 69] { R146 += 1, R120 += 1, R104 += 1 };
  s6 -> s10 [69, 69] { R146 += 1, R120 += 1, R104 += 1 };
  s6 -> s6 [78, 65535] { R146 += 1, R120 += 1, R104 += 1 };
  s7 -> s7 [0, 65535] { R146 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R146 += 1, R120 += 1 };
  s9 -> s7 [0, 65535] { R146 += 1 };
  s9 -> s8 [0, 65535];
  s10 -> s10 [0, 69] { R146 += 1, R120 += 1, R104 += 1 };
  s10 -> s10 [0, 65535] { R146 += 1, R120 += 1 };
  s10 -> s7 [0, 65535] { R146 += 1 };
  s10 -> s8 [0, 65535];
  s10 -> s10 [78, 65535] { R146 += 1, R120 += 1, R104 += 1 };
  accepting s8, s9, s6, s7, s10;
};
};
synchronised {  // Automata constraining c7
automaton c7_0 {
  init s0;
  s0 -> s1 [101, 101];
  accepting s1;
};
};
constraint R1 = R120 && R2 = R146 && R19 - R146 = -1 && R20 = R146 && R21 - R146 = -1 && R22 = R146 && R23 = 0 && R24 = 1 && R25 = 0 && R26 = 1 && R103 = 0 && R104 = 0 && R105 = 0 && R106 = R120 && R119 = 0 && R121 = 0 && R122 = R146 && R123 = 0 && R124 = R146 && R125 = 0 && R126 = R146 && R127 = 0 && R128 = R146 && R129 = 0 && R130 = R146 && R131 = 0 && R132 = R146 && R133 = 0 && R134 = R146 && R135 = 0 && R136 = R146 && R137 = 0 && R138 = R146 && R139 = 0 && R140 = R146 && R141 = 0 && R142 = R146 && R143 = 0 && R144 = R146 && R145 = 0 && -1 < R0 && R5 < 1 && R8 < 1 && R11 < 1 && R12 < 1 && -1 < R120 && 0 < R146 && (R0 != 0 || R15 = 0 || (R91 = 0 && R92 = 0)) && (R0 != 0 || R15 = 0 || (R93 = 0 && R94 = 0)) && (R0 != 0 || R15 = 0 || (R95 = 0 && R96 = 0)) && (R91 != 0 || R0 = R92 || R0 < 1) && (R93 != 0 || R0 = R94 || R0 < 1) && (R95 != 0 || R0 = R96 || R0 < 1) && (R107 != 0 || R108 = R120 || (R0 = 0 && R120 = 0)) && (R109 != 0 || R110 = R120 || (R0 = 0 && R120 = 0)) && (R111 != 0 || R112 = R120 || (R0 = 0 && R120 = 0)) && (R113 != 0 || R114 = R120 || (R0 = 0 && R120 = 0)) && (R115 != 0 || R116 = R120 || (R0 = 0 && R120 = 0)) && (R117 != 0 || R118 = R120 || (R0 = 0 && R120 = 0)) && (R16 = 0 || (R101 = 0 && R102 = 0)) && (R17 = 0 || (R97 = 0 && R98 = 0)) && (R17 = 0 || (R99 = 0 && R100 = 0)) && (R18 = 0 || (R87 = 0 && R88 = 0)) && (R18 = 0 || (R89 = 0 && R90 = 0)) && (R91 = 0 || R0 < 1) && (R93 = 0 || R0 < 1) && (R95 = 0 || R0 < 1) && (R107 = 0 || (R0 = 0 && R120 = 0)) && (R109 = 0 || (R0 = 0 && R120 = 0)) && (R111 = 0 || (R0 = 0 && R120 = 0)) && (R113 = 0 || (R0 = 0 && R120 = 0)) && (R115 = 0 || (R0 = 0 && R120 = 0)) && (R117 = 0 || (R0 = 0 && R120 = 0));
// End of Parikh automata intersection problem
