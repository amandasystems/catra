// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R12, R13, R2, R3, R4, R5, R6, R7, R8, R9;
synchronised {  // Automata constraining value1
automaton value1_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 65535];
  accepting s0;
};
automaton value1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R0 += 1 };
  accepting s0;
};
automaton value1_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R4 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s0 [91, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R5 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 8] { R7 += 1 };
  s0 -> s0 [0, 65535] { R6 += 1, R7 += 1 };
  s0 -> s2 [9, 13] { R7 += 1 };
  s0 -> s1 [14, 31] { R7 += 1 };
  s0 -> s2 [32, 32] { R7 += 1 };
  s0 -> s1 [33, 65535] { R7 += 1 };
  s1 -> s1 [0, 65535] { R7 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R7 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_4 {
  init s0;
  s0 -> s0 [0, 65535] { R8 += 1, R9 += 1 };
  s0 -> s1 [0, 65535] { R9 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R9 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 8] { R11 += 1 };
  s0 -> s0 [0, 65535] { R10 += 1, R11 += 1 };
  s0 -> s2 [9, 13] { R11 += 1 };
  s0 -> s1 [14, 31] { R11 += 1 };
  s0 -> s2 [32, 32] { R11 += 1 };
  s0 -> s1 [33, 65535] { R11 += 1 };
  s1 -> s1 [0, 65535] { R11 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R11 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_6 {
  init s0;
  s0 -> s0 [0, 65535] { R12 += 1, R13 += 1 };
  s0 -> s1 [0, 65535] { R13 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R13 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
};
constraint R0 != 0 && R1 != 0 && R4 < 1 && R5 < 1 && (R2 != 0 || ((R1 != R7 || R6 - R7 = -1 || R7 < 0) && (R1 = R7 || R1 < 1))) && (R2 != 0 || ((R1 != R9 || R8 - R9 = -1 || R9 < 0) && (R1 = R9 || R1 < 1))) && (R3 != 0 || ((R10 != 0 || ((R12 != 0 || ((R1 != R11 || R11 = 1 || R11 < 0) && (R1 != R13 || R13 = 1 || R13 < 0) && (R1 = R11 || R11 = 1 || R1 < 1) && (R1 = R13 || R13 = 1 || R1 < 1))) && (R12 = 0 || R1 < 1))) && (R10 = 0 || R1 < 1))) && (R2 = 0 || (R1 = R7 && R6 - R7 = -1)) && (R2 = 0 || (R1 = R9 && R8 - R9 = -1)) && (R3 = 0 || (R10 = 0 && R12 = 0 && (R1 != R11 || R11 = 1 || R11 < 0) && (R1 != R13 || R13 = 1 || R13 < 0) && (R11 != 1 || -1 < R1) && (R13 != 1 || -1 < R1) && (R1 = R11 || R11 = 1) && (R1 = R13 || R13 = 1)));
// End of Parikh automata intersection problem
