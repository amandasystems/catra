// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R12, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R3890, R3891, R3892, R3893, R3894, R3895, R4, R40, R42, R43, R46, R47, R48, R5166, R5167, R5168, R5169, R52, R53, R56, R57, R58, R6014, R6015, R6016, R6017, R6018, R6019, R6020, R6021, R6022, R6023, R6024, R6025, R6026, R6027, R6028, R6029, R6030, R6031, R6032, R6033, R6034, R6035, R6036, R6037, R6038, R6039, R6040, R6041, R6042, R6043, R6044, R6045, R6046, R6047, R6048, R6049, R6050, R6051, R6052, R6053, R6054, R6055, R6056, R6057, R6058, R6059, R6060, R6061, R6062, R6063, R6064, R6065, R6066, R6067, R6068, R6069, R6070, R6071, R6072, R6073, R6074, R6075, R6076, R6077, R6078, R6079, R6080, R6081, R6082, R6083, R6084, R6085, R6086, R6087, R6088, R6089, R6090, R6091, R6092, R6093, R6094, R6095, R6096, R6097, R6098, R6099, R6100, R6101, R6102, R6103, R6104, R6105, R6106, R6107, R6108, R6109, R6110, R6111, R6112, R6113, R6114, R6115, R6116, R6117, R6118, R6119, R6120, R6121, R6122, R6123, R62, R63, R66, R67, R68, R69, R70, R71, R72, R73, R8;
synchronised {  // Automata constraining P64
automaton P64_0 {
  init s0;
  s0 -> s1 [119, 119];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [75, 75];
  s0 -> s0 [76, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [75, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 74];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [75, 75];
  s0 -> s1 [76, 65535];
  s1 -> s1 [0, 74];
  s1 -> s2 [75, 75];
  s1 -> s1 [76, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s1 [0, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s1 [0, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R6045 += 1, R19 += 1 };
  s0 -> s0 [0, 65535] { R6044 += 1, R6045 += 1 };
  s1 -> s1 [0, 65535] { R6045 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 74] { R6047 += 1 };
  s0 -> s0 [0, 65535] { R6046 += 1, R6047 += 1 };
  s0 -> s2 [75, 75] { R6047 += 1 };
  s0 -> s3 [75, 75] { R6047 += 1 };
  s0 -> s1 [88, 65535] { R6047 += 1 };
  s1 -> s1 [0, 74] { R6047 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R6047 += 1 };
  s1 -> s3 [75, 75] { R6047 += 1 };
  s1 -> s1 [88, 65535] { R6047 += 1 };
  s2 -> s2 [0, 75] { R6047 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [88, 65535] { R6047 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 74] { R6049 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R6048 += 1, R6049 += 1 };
  s0 -> s2 [75, 75] { R6049 += 1, R38 += 1 };
  s0 -> s3 [75, 75] { R6049 += 1, R38 += 1 };
  s0 -> s1 [76, 65535] { R6049 += 1, R38 += 1 };
  s1 -> s1 [0, 74] { R6049 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R6049 += 1, R38 += 1 };
  s1 -> s3 [75, 75] { R6049 += 1, R38 += 1 };
  s1 -> s1 [76, 65535] { R6049 += 1, R38 += 1 };
  s2 -> s2 [0, 65535] { R6049 += 1, R38 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 74] { R6051 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R6050 += 1, R6051 += 1 };
  s0 -> s2 [75, 75] { R6051 += 1, R40 += 1 };
  s0 -> s3 [75, 75] { R6051 += 1, R40 += 1 };
  s0 -> s1 [76, 65535] { R6051 += 1, R40 += 1 };
  s1 -> s1 [0, 74] { R6051 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R6051 += 1, R40 += 1 };
  s1 -> s3 [75, 75] { R6051 += 1, R40 += 1 };
  s1 -> s1 [76, 65535] { R6051 += 1, R40 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R6051 += 1, R40 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 74] { R6053 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R6052 += 1, R6053 += 1 };
  s0 -> s2 [75, 75] { R6053 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [75, 75] { R6053 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [76, 65535] { R6053 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 74] { R6053 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R6053 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [75, 75] { R6053 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [76, 65535] { R6053 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R6053 += 1, R42 += 1, R43 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 74] { R6055 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R6054 += 1, R6055 += 1 };
  s0 -> s2 [75, 75] { R6055 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [75, 75] { R6055 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [76, 65535] { R6055 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 74] { R6055 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R6055 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [75, 75] { R6055 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [76, 65535] { R6055 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R6055 += 1, R46 += 1, R47 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 74] { R6057 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R6056 += 1, R6057 += 1 };
  s0 -> s2 [75, 75] { R6057 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [75, 75] { R6057 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [76, 65535] { R6057 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 74] { R6057 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R6057 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [75, 75] { R6057 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [76, 65535] { R6057 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R6057 += 1, R52 += 1, R53 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 74] { R6059 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R6058 += 1, R6059 += 1 };
  s0 -> s2 [75, 75] { R6059 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [75, 75] { R6059 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [76, 65535] { R6059 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 74] { R6059 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R6059 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [75, 75] { R6059 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [76, 65535] { R6059 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R6059 += 1, R56 += 1, R57 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 74] { R6061 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R6060 += 1, R6061 += 1 };
  s0 -> s2 [75, 75] { R6061 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [75, 75] { R6061 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [76, 65535] { R6061 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 74] { R6061 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R6061 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [75, 75] { R6061 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [76, 65535] { R6061 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R6061 += 1, R62 += 1, R63 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 74] { R6081 += 1 };
  s0 -> s0 [0, 65535] { R6080 += 1, R6081 += 1 };
  s0 -> s2 [75, 75] { R6081 += 1 };
  s0 -> s1 [76, 65535] { R6081 += 1 };
  s1 -> s1 [0, 74] { R6081 += 1 };
  s1 -> s2 [75, 75] { R6081 += 1 };
  s1 -> s1 [76, 65535] { R6081 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R6081 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R6082 += 1, R6083 += 1 };
  s0 -> s1 [0, 65535] { R6083 += 1, R1 += 1 };
  s1 -> s1 [0, 65535] { R6083 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 74] { R6085 += 1 };
  s0 -> s2 [0, 65535] { R6085 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R6084 += 1, R6085 += 1 };
  s0 -> s3 [75, 75] { R6085 += 1 };
  s0 -> s1 [76, 65535] { R6085 += 1 };
  s1 -> s1 [0, 74] { R6085 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [75, 75] { R6085 += 1 };
  s1 -> s1 [76, 65535] { R6085 += 1 };
  s2 -> s1 [0, 74] { R6085 += 1 };
  s2 -> s2 [0, 65535] { R6085 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [75, 75] { R6085 += 1 };
  s2 -> s1 [76, 65535] { R6085 += 1 };
  s3 -> s3 [0, 65535] { R6085 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 74] { R6087 += 1, R6025 += 1 };
  s0 -> s2 [0, 65535] { R6087 += 1, R6024 += 1, R6025 += 1 };
  s0 -> s0 [0, 65535] { R6086 += 1, R6087 += 1 };
  s0 -> s1 [76, 65535] { R6087 += 1, R6025 += 1 };
  s1 -> s1 [0, 74] { R6087 += 1, R6025 += 1 };
  s1 -> s1 [0, 65535] { R6087 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [76, 65535] { R6087 += 1, R6025 += 1 };
  s2 -> s1 [0, 74] { R6087 += 1, R6025 += 1 };
  s2 -> s2 [0, 65535] { R6087 += 1, R6024 += 1, R6025 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [76, 65535] { R6087 += 1, R6025 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R6089 += 1, R6026 += 1, R6027 += 1 };
  s0 -> s0 [0, 65535] { R6088 += 1, R6089 += 1 };
  s0 -> s2 [0, 65535] { R6089 += 1, R6027 += 1, R17 += 1 };
  s1 -> s1 [0, 65535] { R6089 += 1, R6026 += 1, R6027 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R6089 += 1, R6027 += 1, R17 += 1 };
  s2 -> s3 [0, 65535] { R6089 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R6089 += 1, R6027 += 1, R17 += 1 };
  s3 -> s3 [0, 65535] { R6089 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 75] { R6091 += 1, R6029 += 1 };
  s0 -> s2 [0, 65535] { R6091 += 1, R6028 += 1, R6029 += 1 };
  s0 -> s0 [0, 65535] { R6090 += 1, R6091 += 1 };
  s0 -> s1 [87, 65535] { R6091 += 1, R6029 += 1 };
  s1 -> s1 [0, 75] { R6091 += 1, R6029 += 1 };
  s1 -> s1 [0, 65535] { R6091 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [87, 65535] { R6091 += 1, R6029 += 1 };
  s2 -> s1 [0, 75] { R6091 += 1, R6029 += 1 };
  s2 -> s2 [0, 65535] { R6091 += 1, R6028 += 1, R6029 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [87, 65535] { R6091 += 1, R6029 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R6093 += 1, R6031 += 1, R67 += 1 };
  s0 -> s2 [0, 65535] { R6093 += 1, R6030 += 1, R6031 += 1 };
  s0 -> s0 [0, 65535] { R6092 += 1, R6093 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R6093 += 1, R6031 += 1, R67 += 1 };
  s1 -> s4 [0, 65535] { R6093 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R6093 += 1, R6031 += 1, R67 += 1 };
  s2 -> s2 [0, 65535] { R6093 += 1, R6030 += 1, R6031 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R6093 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 86] { R6095 += 1, R6033 += 1 };
  s0 -> s2 [0, 65535] { R6095 += 1, R6032 += 1, R6033 += 1 };
  s0 -> s0 [0, 65535] { R6094 += 1, R6095 += 1 };
  s0 -> s3 [0, 65535] { R6095 += 1, R6033 += 1, R69 += 1 };
  s0 -> s1 [88, 65535] { R6095 += 1, R6033 += 1 };
  s1 -> s1 [0, 86] { R6095 += 1, R6033 += 1 };
  s1 -> s1 [0, 65535] { R6095 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [88, 65535] { R6095 += 1, R6033 += 1 };
  s2 -> s1 [0, 86] { R6095 += 1, R6033 += 1 };
  s2 -> s2 [0, 65535] { R6095 += 1, R6032 += 1, R6033 += 1 };
  s2 -> s3 [0, 65535] { R6095 += 1, R6033 += 1, R69 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [88, 65535] { R6095 += 1, R6033 += 1 };
  s3 -> s1 [0, 86] { R6095 += 1, R6033 += 1 };
  s3 -> s3 [0, 65535] { R6095 += 1, R6033 += 1, R69 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R6095 += 1 };
  s3 -> s1 [88, 65535] { R6095 += 1, R6033 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R6095 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 86] { R6097 += 1, R6035 += 1, R73 += 1 };
  s0 -> s0 [0, 65535] { R6096 += 1, R6097 += 1 };
  s0 -> s2 [0, 65535] { R6097 += 1, R6034 += 1, R6035 += 1 };
  s0 -> s3 [0, 65535] { R6097 += 1, R6035 += 1, R72 += 1, R73 += 1 };
  s0 -> s1 [88, 65535] { R6097 += 1, R6035 += 1, R73 += 1 };
  s1 -> s1 [0, 86] { R6097 += 1, R6035 += 1, R73 += 1 };
  s1 -> s1 [0, 65535] { R6097 += 1, R6035 += 1 };
  s1 -> s4 [0, 65535] { R6097 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [88, 65535] { R6097 += 1, R6035 += 1, R73 += 1 };
  s2 -> s1 [0, 86] { R6097 += 1, R6035 += 1, R73 += 1 };
  s2 -> s2 [0, 65535] { R6097 += 1, R6034 += 1, R6035 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R6097 += 1, R6035 += 1, R72 += 1, R73 += 1 };
  s2 -> s1 [88, 65535] { R6097 += 1, R6035 += 1, R73 += 1 };
  s3 -> s1 [0, 86] { R6097 += 1, R6035 += 1, R73 += 1 };
  s3 -> s4 [0, 65535] { R6097 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R6097 += 1, R6035 += 1, R72 += 1, R73 += 1 };
  s3 -> s1 [88, 65535] { R6097 += 1, R6035 += 1, R73 += 1 };
  s4 -> s4 [0, 65535] { R6097 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R6099 += 1, R6037 += 1 };
  s0 -> s0 [0, 65535] { R6098 += 1, R6099 += 1 };
  s0 -> s2 [0, 65535] { R6099 += 1, R6036 += 1, R6037 += 1 };
  s0 -> s3 [0, 65535] { R6099 += 1, R6037 += 1, R3894 += 1, R3895 += 1 };
  s1 -> s4 [0, 65535] { R6099 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R6099 += 1, R6037 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R6099 += 1, R6037 += 1 };
  s2 -> s2 [0, 65535] { R6099 += 1, R6036 += 1, R6037 += 1 };
  s2 -> s3 [0, 65535] { R6099 += 1, R6037 += 1, R3894 += 1, R3895 += 1 };
  s3 -> s4 [0, 65535] { R6099 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [0, 65535] { R6099 += 1, R6037 += 1 };
  s3 -> s3 [0, 65535] { R6099 += 1, R6037 += 1, R3894 += 1, R3895 += 1 };
  s4 -> s4 [0, 65535] { R6099 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 87] { R6101 += 1, R6039 += 1, R5169 += 1 };
  s0 -> s0 [0, 65535] { R6100 += 1, R6101 += 1 };
  s0 -> s2 [0, 65535] { R6101 += 1, R6038 += 1, R6039 += 1 };
  s0 -> s3 [89, 89] { R6101 += 1, R6039 += 1, R5169 += 1 };
  s0 -> s1 [90, 65535] { R6101 += 1, R6039 += 1, R5169 += 1 };
  s1 -> s1 [0, 87] { R6101 += 1, R6039 += 1, R5169 += 1 };
  s1 -> s3 [89, 89] { R6101 += 1, R6039 += 1, R5169 += 1 };
  s1 -> s1 [90, 65535] { R6101 += 1, R6039 += 1, R5169 += 1 };
  s2 -> s1 [0, 87] { R6101 += 1, R6039 += 1, R5169 += 1 };
  s2 -> s2 [0, 65535] { R6101 += 1, R6038 += 1, R6039 += 1 };
  s2 -> s3 [89, 89] { R6101 += 1, R6039 += 1, R5169 += 1 };
  s2 -> s1 [90, 65535] { R6101 += 1, R6039 += 1, R5169 += 1 };
  s3 -> s3 [0, 87] { R6101 += 1, R6039 += 1, R5169 += 1 };
  s3 -> s3 [0, 65535] { R6101 += 1, R6039 += 1 };
  s3 -> s4 [0, 65535] { R6101 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [89, 65535] { R6101 += 1, R6039 += 1, R5169 += 1 };
  s4 -> s4 [0, 65535] { R6101 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R6103 += 1, R6040 += 1, R6041 += 1 };
  s0 -> s0 [0, 65535] { R6102 += 1, R6103 += 1 };
  s0 -> s2 [0, 65535] { R6103 += 1, R6041 += 1 };
  s1 -> s1 [0, 65535] { R6103 += 1, R6040 += 1, R6041 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R6103 += 1, R6041 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R6103 += 1, R6041 += 1 };
  s2 -> s4 [0, 65535] { R6103 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R6103 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 86] { R6105 += 1, R6043 += 1, R6023 += 1 };
  s0 -> s2 [0, 65535] { R6105 += 1, R6043 += 1, R6022 += 1, R6023 += 1 };
  s0 -> s0 [0, 65535] { R6104 += 1, R6105 += 1 };
  s0 -> s3 [0, 65535] { R6105 += 1, R6042 += 1, R6043 += 1 };
  s0 -> s4 [87, 87] { R6105 += 1, R6043 += 1, R6023 += 1 };
  s0 -> s5 [87, 87] { R6105 += 1, R6043 += 1, R6023 += 1 };
  s0 -> s1 [90, 65535] { R6105 += 1, R6043 += 1, R6023 += 1 };
  s1 -> s1 [0, 86] { R6105 += 1, R6043 += 1, R6023 += 1 };
  s1 -> s1 [0, 65535] { R6105 += 1, R6043 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R6105 += 1 };
  s1 -> s4 [87, 87] { R6105 += 1, R6043 += 1, R6023 += 1 };
  s1 -> s5 [87, 87] { R6105 += 1, R6043 += 1, R6023 += 1 };
  s1 -> s1 [90, 65535] { R6105 += 1, R6043 += 1, R6023 += 1 };
  s2 -> s1 [0, 86] { R6105 += 1, R6043 += 1, R6023 += 1 };
  s2 -> s2 [0, 65535] { R6105 += 1, R6043 += 1, R6022 += 1, R6023 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s7 [0, 65535] { R6105 += 1 };
  s2 -> s4 [87, 87] { R6105 += 1, R6043 += 1, R6023 += 1 };
  s2 -> s5 [87, 87] { R6105 += 1, R6043 += 1, R6023 += 1 };
  s2 -> s1 [90, 65535] { R6105 += 1, R6043 += 1, R6023 += 1 };
  s3 -> s1 [0, 86] { R6105 += 1, R6043 += 1, R6023 += 1 };
  s3 -> s2 [0, 65535] { R6105 += 1, R6043 += 1, R6022 += 1, R6023 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R6105 += 1, R6042 += 1, R6043 += 1 };
  s3 -> s4 [87, 87] { R6105 += 1, R6043 += 1, R6023 += 1 };
  s3 -> s5 [87, 87] { R6105 += 1, R6043 += 1, R6023 += 1 };
  s3 -> s1 [90, 65535] { R6105 += 1, R6043 += 1, R6023 += 1 };
  s4 -> s4 [0, 65535] { R6105 += 1, R6043 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R6105 += 1 };
  s5 -> s5 [0, 87] { R6105 += 1, R6043 += 1, R6023 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R6105 += 1 };
  s5 -> s5 [0, 65535] { R6105 += 1, R6043 += 1 };
  s5 -> s5 [90, 65535] { R6105 += 1, R6043 += 1, R6023 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R6105 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s0 [0, 65535] { R6106 += 1, R6107 += 1 };
  s0 -> s1 [0, 65535] { R6107 += 1, R6062 += 1, R6063 += 1 };
  s0 -> s2 [0, 65535] { R6107 += 1, R6063 += 1, R18 += 1 };
  s1 -> s1 [0, 65535] { R6107 += 1, R6062 += 1, R6063 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R6107 += 1, R6063 += 1, R18 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R6107 += 1 };
  s2 -> s2 [0, 65535] { R6107 += 1, R6063 += 1, R18 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R6107 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 74] { R6109 += 1, R6065 += 1 };
  s0 -> s0 [0, 65535] { R6108 += 1, R6109 += 1 };
  s0 -> s2 [0, 65535] { R6109 += 1, R6064 += 1, R6065 += 1 };
  s0 -> s3 [75, 75] { R6109 += 1, R6065 += 1 };
  s0 -> s4 [75, 75] { R6109 += 1, R6065 += 1 };
  s0 -> s5 [87, 87] { R6109 += 1, R6065 += 1 };
  s0 -> s1 [88, 65535] { R6109 += 1, R6065 += 1 };
  s1 -> s1 [0, 74] { R6109 += 1, R6065 += 1 };
  s1 -> s3 [75, 75] { R6109 += 1, R6065 += 1 };
  s1 -> s4 [75, 75] { R6109 += 1, R6065 += 1 };
  s1 -> s5 [87, 87] { R6109 += 1, R6065 += 1 };
  s1 -> s1 [88, 65535] { R6109 += 1, R6065 += 1 };
  s2 -> s1 [0, 74] { R6109 += 1, R6065 += 1 };
  s2 -> s2 [0, 65535] { R6109 += 1, R6064 += 1, R6065 += 1 };
  s2 -> s3 [75, 75] { R6109 += 1, R6065 += 1 };
  s2 -> s4 [75, 75] { R6109 += 1, R6065 += 1 };
  s2 -> s5 [87, 87] { R6109 += 1, R6065 += 1 };
  s2 -> s1 [88, 65535] { R6109 += 1, R6065 += 1 };
  s3 -> s3 [0, 75] { R6109 += 1, R6065 += 1 };
  s3 -> s7 [87, 87] { R6109 += 1, R6065 += 1 };
  s3 -> s3 [88, 65535] { R6109 += 1, R6065 += 1 };
  s5 -> s5 [0, 74] { R6109 += 1, R6065 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R6109 += 1 };
  s5 -> s7 [75, 75] { R6109 += 1, R6065 += 1 };
  s5 -> s8 [75, 75] { R6109 += 1, R6065 += 1 };
  s5 -> s5 [87, 65535] { R6109 += 1, R6065 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 75] { R6109 += 1, R6065 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R6109 += 1 };
  s7 -> s7 [87, 65535] { R6109 += 1, R6065 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R6109 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 74] { R6111 += 1, R6067 += 1, R66 += 1 };
  s0 -> s2 [0, 65535] { R6111 += 1, R6066 += 1, R6067 += 1 };
  s0 -> s0 [0, 65535] { R6110 += 1, R6111 += 1 };
  s0 -> s3 [75, 75] { R6111 += 1, R6067 += 1, R66 += 1 };
  s0 -> s4 [75, 75] { R6111 += 1, R6067 += 1, R66 += 1 };
  s0 -> s1 [76, 65535] { R6111 += 1, R6067 += 1, R66 += 1 };
  s1 -> s1 [0, 74] { R6111 += 1, R6067 += 1, R66 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R6111 += 1 };
  s1 -> s3 [75, 75] { R6111 += 1, R6067 += 1, R66 += 1 };
  s1 -> s4 [75, 75] { R6111 += 1, R6067 += 1, R66 += 1 };
  s1 -> s1 [76, 65535] { R6111 += 1, R6067 += 1, R66 += 1 };
  s2 -> s1 [0, 74] { R6111 += 1, R6067 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R6111 += 1, R6066 += 1, R6067 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [75, 75] { R6111 += 1, R6067 += 1, R66 += 1 };
  s2 -> s4 [75, 75] { R6111 += 1, R6067 += 1, R66 += 1 };
  s2 -> s1 [76, 65535] { R6111 += 1, R6067 += 1, R66 += 1 };
  s3 -> s3 [0, 65535] { R6111 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R6111 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R6111 += 1, R6067 += 1, R66 += 1 };
  s5 -> s5 [0, 65535] { R6111 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 74] { R6113 += 1, R6069 += 1, R68 += 1 };
  s0 -> s0 [0, 65535] { R6112 += 1, R6113 += 1 };
  s0 -> s2 [0, 65535] { R6113 += 1, R6068 += 1, R6069 += 1 };
  s0 -> s3 [75, 75] { R6113 += 1, R6069 += 1, R68 += 1 };
  s0 -> s4 [75, 75] { R6113 += 1, R6069 += 1, R68 += 1 };
  s0 -> s1 [76, 65535] { R6113 += 1, R6069 += 1, R68 += 1 };
  s1 -> s1 [0, 74] { R6113 += 1, R6069 += 1, R68 += 1 };
  s1 -> s1 [0, 65535] { R6113 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [75, 75] { R6113 += 1, R6069 += 1, R68 += 1 };
  s1 -> s4 [75, 75] { R6113 += 1, R6069 += 1, R68 += 1 };
  s1 -> s1 [76, 65535] { R6113 += 1, R6069 += 1, R68 += 1 };
  s2 -> s1 [0, 74] { R6113 += 1, R6069 += 1, R68 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R6113 += 1, R6068 += 1, R6069 += 1 };
  s2 -> s3 [75, 75] { R6113 += 1, R6069 += 1, R68 += 1 };
  s2 -> s4 [75, 75] { R6113 += 1, R6069 += 1, R68 += 1 };
  s2 -> s1 [76, 65535] { R6113 += 1, R6069 += 1, R68 += 1 };
  s3 -> s3 [0, 65535] { R6113 += 1, R6069 += 1, R68 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R6113 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R6113 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6113 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 74] { R6115 += 1, R6071 += 1, R70 += 1, R71 += 1 };
  s0 -> s2 [0, 65535] { R6115 += 1, R6070 += 1, R6071 += 1 };
  s0 -> s0 [0, 65535] { R6114 += 1, R6115 += 1 };
  s0 -> s3 [75, 75] { R6115 += 1, R6071 += 1, R70 += 1, R71 += 1 };
  s0 -> s4 [75, 75] { R6115 += 1, R6071 += 1, R70 += 1, R71 += 1 };
  s0 -> s1 [76, 65535] { R6115 += 1, R6071 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 74] { R6115 += 1, R6071 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 65535] { R6115 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [75, 75] { R6115 += 1, R6071 += 1, R70 += 1, R71 += 1 };
  s1 -> s4 [75, 75] { R6115 += 1, R6071 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [76, 65535] { R6115 += 1, R6071 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [0, 74] { R6115 += 1, R6071 += 1, R70 += 1, R71 += 1 };
  s2 -> s2 [0, 65535] { R6115 += 1, R6070 += 1, R6071 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [75, 75] { R6115 += 1, R6071 += 1, R70 += 1, R71 += 1 };
  s2 -> s4 [75, 75] { R6115 += 1, R6071 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [76, 65535] { R6115 += 1, R6071 += 1, R70 += 1, R71 += 1 };
  s3 -> s3 [0, 65535] { R6115 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R6115 += 1 };
  s4 -> s4 [0, 65535] { R6115 += 1, R6071 += 1, R70 += 1, R71 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R6115 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 74] { R6117 += 1, R6073 += 1, R3890 += 1, R3891 += 1 };
  s0 -> s2 [0, 74] { R6117 += 1, R6073 += 1, R3891 += 1, R3892 += 1 };
  s0 -> s3 [0, 65535] { R6117 += 1, R6072 += 1, R6073 += 1 };
  s0 -> s0 [0, 65535] { R6116 += 1, R6117 += 1 };
  s0 -> s4 [75, 75] { R6117 += 1, R6073 += 1, R3891 += 1, R3892 += 1 };
  s0 -> s5 [75, 75] { R6117 += 1, R6073 += 1, R3890 += 1, R3891 += 1 };
  s0 -> s6 [75, 75] { R6117 += 1, R6073 += 1, R3891 += 1, R3892 += 1 };
  s0 -> s7 [75, 75] { R6117 += 1, R6073 += 1, R3890 += 1, R3891 += 1 };
  s0 -> s1 [76, 65535] { R6117 += 1, R6073 += 1, R3890 += 1, R3891 += 1 };
  s0 -> s2 [76, 65535] { R6117 += 1, R6073 += 1, R3891 += 1, R3892 += 1 };
  s1 -> s1 [0, 74] { R6117 += 1, R6073 += 1, R3890 += 1, R3891 += 1 };
  s1 -> s2 [0, 74] { R6117 += 1, R6073 += 1, R3891 += 1, R3892 += 1 };
  s1 -> s4 [75, 75] { R6117 += 1, R6073 += 1, R3891 += 1, R3892 += 1 };
  s1 -> s5 [75, 75] { R6117 += 1, R6073 += 1, R3890 += 1, R3891 += 1 };
  s1 -> s6 [75, 75] { R6117 += 1, R6073 += 1, R3891 += 1, R3892 += 1 };
  s1 -> s7 [75, 75] { R6117 += 1, R6073 += 1, R3890 += 1, R3891 += 1 };
  s1 -> s1 [76, 65535] { R6117 += 1, R6073 += 1, R3890 += 1, R3891 += 1 };
  s1 -> s2 [76, 65535] { R6117 += 1, R6073 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s2 [0, 74] { R6117 += 1, R6073 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R6117 += 1 };
  s2 -> s4 [75, 75] { R6117 += 1, R6073 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s6 [75, 75] { R6117 += 1, R6073 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s2 [76, 65535] { R6117 += 1, R6073 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s1 [0, 74] { R6117 += 1, R6073 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s2 [0, 74] { R6117 += 1, R6073 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s3 [0, 65535] { R6117 += 1, R6072 += 1, R6073 += 1 };
  s3 -> s4 [75, 75] { R6117 += 1, R6073 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s5 [75, 75] { R6117 += 1, R6073 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s6 [75, 75] { R6117 += 1, R6073 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s7 [75, 75] { R6117 += 1, R6073 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s1 [76, 65535] { R6117 += 1, R6073 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s2 [76, 65535] { R6117 += 1, R6073 += 1, R3891 += 1, R3892 += 1 };
  s4 -> s4 [0, 65535] { R6117 += 1 };
  s4 -> s8 [0, 65535];
  s6 -> s8 [0, 65535];
  s6 -> s9 [0, 65535] { R6117 += 1 };
  s6 -> s6 [0, 65535] { R6117 += 1, R6073 += 1, R3891 += 1, R3892 += 1 };
  s7 -> s6 [0, 65535] { R6117 += 1, R6073 += 1, R3891 += 1, R3892 += 1 };
  s7 -> s7 [0, 65535] { R6117 += 1, R6073 += 1, R3890 += 1, R3891 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R6117 += 1 };
  accepting s4, s8, s2, s9, s6;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 74] { R6119 += 1, R6075 += 1, R5166 += 1, R5167 += 1 };
  s0 -> s2 [0, 74] { R6119 += 1, R6075 += 1, R5167 += 1 };
  s0 -> s3 [0, 65535] { R6119 += 1, R6074 += 1, R6075 += 1 };
  s0 -> s0 [0, 65535] { R6118 += 1, R6119 += 1 };
  s0 -> s4 [75, 75] { R6119 += 1, R6075 += 1, R5167 += 1 };
  s0 -> s5 [75, 75] { R6119 += 1, R6075 += 1, R5166 += 1, R5167 += 1 };
  s0 -> s6 [75, 75] { R6119 += 1, R6075 += 1, R5166 += 1, R5167 += 1 };
  s0 -> s7 [75, 75] { R6119 += 1, R6075 += 1, R5167 += 1 };
  s0 -> s2 [76, 87] { R6119 += 1, R6075 += 1, R5167 += 1 };
  s0 -> s1 [76, 65535] { R6119 += 1, R6075 += 1, R5166 += 1, R5167 += 1 };
  s0 -> s2 [90, 65535] { R6119 += 1, R6075 += 1, R5167 += 1 };
  s1 -> s1 [0, 74] { R6119 += 1, R6075 += 1, R5166 += 1, R5167 += 1 };
  s1 -> s2 [0, 74] { R6119 += 1, R6075 += 1, R5167 += 1 };
  s1 -> s4 [75, 75] { R6119 += 1, R6075 += 1, R5167 += 1 };
  s1 -> s5 [75, 75] { R6119 += 1, R6075 += 1, R5166 += 1, R5167 += 1 };
  s1 -> s6 [75, 75] { R6119 += 1, R6075 += 1, R5166 += 1, R5167 += 1 };
  s1 -> s7 [75, 75] { R6119 += 1, R6075 += 1, R5167 += 1 };
  s1 -> s2 [76, 87] { R6119 += 1, R6075 += 1, R5167 += 1 };
  s1 -> s1 [76, 65535] { R6119 += 1, R6075 += 1, R5166 += 1, R5167 += 1 };
  s1 -> s2 [90, 65535] { R6119 += 1, R6075 += 1, R5167 += 1 };
  s2 -> s2 [0, 74] { R6119 += 1, R6075 += 1, R5167 += 1 };
  s2 -> s2 [0, 65535] { R6119 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s4 [75, 75] { R6119 += 1, R6075 += 1, R5167 += 1 };
  s2 -> s7 [75, 75] { R6119 += 1, R6075 += 1, R5167 += 1 };
  s2 -> s2 [76, 87] { R6119 += 1, R6075 += 1, R5167 += 1 };
  s2 -> s2 [90, 65535] { R6119 += 1, R6075 += 1, R5167 += 1 };
  s3 -> s1 [0, 74] { R6119 += 1, R6075 += 1, R5166 += 1, R5167 += 1 };
  s3 -> s2 [0, 74] { R6119 += 1, R6075 += 1, R5167 += 1 };
  s3 -> s3 [0, 65535] { R6119 += 1, R6074 += 1, R6075 += 1 };
  s3 -> s4 [75, 75] { R6119 += 1, R6075 += 1, R5167 += 1 };
  s3 -> s5 [75, 75] { R6119 += 1, R6075 += 1, R5166 += 1, R5167 += 1 };
  s3 -> s6 [75, 75] { R6119 += 1, R6075 += 1, R5166 += 1, R5167 += 1 };
  s3 -> s7 [75, 75] { R6119 += 1, R6075 += 1, R5167 += 1 };
  s3 -> s2 [76, 87] { R6119 += 1, R6075 += 1, R5167 += 1 };
  s3 -> s1 [76, 65535] { R6119 += 1, R6075 += 1, R5166 += 1, R5167 += 1 };
  s3 -> s2 [90, 65535] { R6119 += 1, R6075 += 1, R5167 += 1 };
  s4 -> s4 [0, 87] { R6119 += 1, R6075 += 1, R5167 += 1 };
  s4 -> s4 [0, 65535] { R6119 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s4 [90, 65535] { R6119 += 1, R6075 += 1, R5167 += 1 };
  s6 -> s4 [0, 87] { R6119 += 1, R6075 += 1, R5167 += 1 };
  s6 -> s6 [0, 65535] { R6119 += 1, R6075 += 1, R5166 += 1, R5167 += 1 };
  s6 -> s4 [90, 65535] { R6119 += 1, R6075 += 1, R5167 += 1 };
  s7 -> s7 [0, 65535] { R6119 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  accepting s2, s4, s7, s8;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 74] { R6121 += 1, R6077 += 1, R6014 += 1, R6015 += 1 };
  s0 -> s2 [0, 74] { R6121 += 1, R6077 += 1, R6015 += 1, R6016 += 1 };
  s0 -> s3 [0, 65535] { R6121 += 1, R6076 += 1, R6077 += 1 };
  s0 -> s0 [0, 65535] { R6120 += 1, R6121 += 1 };
  s0 -> s4 [75, 75] { R6121 += 1, R6077 += 1, R6015 += 1, R6016 += 1 };
  s0 -> s5 [75, 75] { R6121 += 1, R6077 += 1, R6014 += 1, R6015 += 1 };
  s0 -> s6 [75, 75] { R6121 += 1, R6077 += 1, R6015 += 1, R6016 += 1 };
  s0 -> s7 [75, 75] { R6121 += 1, R6077 += 1, R6014 += 1, R6015 += 1 };
  s0 -> s1 [76, 65535] { R6121 += 1, R6077 += 1, R6014 += 1, R6015 += 1 };
  s0 -> s2 [76, 65535] { R6121 += 1, R6077 += 1, R6015 += 1, R6016 += 1 };
  s1 -> s1 [0, 74] { R6121 += 1, R6077 += 1, R6014 += 1, R6015 += 1 };
  s1 -> s2 [0, 74] { R6121 += 1, R6077 += 1, R6015 += 1, R6016 += 1 };
  s1 -> s4 [75, 75] { R6121 += 1, R6077 += 1, R6015 += 1, R6016 += 1 };
  s1 -> s5 [75, 75] { R6121 += 1, R6077 += 1, R6014 += 1, R6015 += 1 };
  s1 -> s6 [75, 75] { R6121 += 1, R6077 += 1, R6015 += 1, R6016 += 1 };
  s1 -> s7 [75, 75] { R6121 += 1, R6077 += 1, R6014 += 1, R6015 += 1 };
  s1 -> s1 [76, 65535] { R6121 += 1, R6077 += 1, R6014 += 1, R6015 += 1 };
  s1 -> s2 [76, 65535] { R6121 += 1, R6077 += 1, R6015 += 1, R6016 += 1 };
  s2 -> s11 [0, 74] { R6121 += 1, R6077 += 1 };
  s2 -> s2 [0, 74] { R6121 += 1, R6077 += 1, R6015 += 1, R6016 += 1 };
  s2 -> s4 [75, 75] { R6121 += 1, R6077 += 1, R6015 += 1, R6016 += 1 };
  s2 -> s12 [75, 75] { R6121 += 1, R6077 += 1 };
  s2 -> s6 [75, 75] { R6121 += 1, R6077 += 1, R6015 += 1, R6016 += 1 };
  s2 -> s8 [75, 75] { R6121 += 1, R6077 += 1 };
  s2 -> s11 [76, 65535] { R6121 += 1, R6077 += 1 };
  s2 -> s2 [76, 65535] { R6121 += 1, R6077 += 1, R6015 += 1, R6016 += 1 };
  s3 -> s1 [0, 74] { R6121 += 1, R6077 += 1, R6014 += 1, R6015 += 1 };
  s3 -> s2 [0, 74] { R6121 += 1, R6077 += 1, R6015 += 1, R6016 += 1 };
  s3 -> s3 [0, 65535] { R6121 += 1, R6076 += 1, R6077 += 1 };
  s3 -> s4 [75, 75] { R6121 += 1, R6077 += 1, R6015 += 1, R6016 += 1 };
  s3 -> s5 [75, 75] { R6121 += 1, R6077 += 1, R6014 += 1, R6015 += 1 };
  s3 -> s6 [75, 75] { R6121 += 1, R6077 += 1, R6015 += 1, R6016 += 1 };
  s3 -> s7 [75, 75] { R6121 += 1, R6077 += 1, R6014 += 1, R6015 += 1 };
  s3 -> s1 [76, 65535] { R6121 += 1, R6077 += 1, R6014 += 1, R6015 += 1 };
  s3 -> s2 [76, 65535] { R6121 += 1, R6077 += 1, R6015 += 1, R6016 += 1 };
  s5 -> s5 [0, 65535] { R6121 += 1, R6077 += 1, R6014 += 1, R6015 += 1 };
  s5 -> s6 [0, 65535] { R6121 += 1, R6077 += 1, R6015 += 1, R6016 += 1 };
  s6 -> s6 [0, 65535] { R6121 += 1, R6077 += 1, R6015 += 1, R6016 += 1 };
  s6 -> s8 [0, 65535] { R6121 += 1, R6077 += 1 };
  s8 -> s8 [0, 65535] { R6121 += 1, R6077 += 1 };
  s8 -> s9 [0, 65535] { R6121 += 1 };
  s8 -> s10 [0, 65535];
  s9 -> s9 [0, 65535] { R6121 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s11 [0, 74] { R6121 += 1, R6077 += 1 };
  s11 -> s11 [0, 65535] { R6121 += 1 };
  s11 -> s10 [0, 65535];
  s11 -> s12 [75, 75] { R6121 += 1, R6077 += 1 };
  s11 -> s8 [75, 75] { R6121 += 1, R6077 += 1 };
  s11 -> s11 [76, 65535] { R6121 += 1, R6077 += 1 };
  s12 -> s12 [0, 65535] { R6121 += 1 };
  s12 -> s10 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 74] { R6123 += 1, R6079 += 1, R6020 += 1, R6021 += 1 };
  s0 -> s2 [0, 65535] { R6123 += 1, R6078 += 1, R6079 += 1 };
  s0 -> s0 [0, 65535] { R6122 += 1, R6123 += 1 };
  s0 -> s3 [75, 75] { R6123 += 1, R6079 += 1, R6020 += 1, R6021 += 1 };
  s0 -> s4 [75, 75] { R6123 += 1, R6079 += 1, R6020 += 1, R6021 += 1 };
  s0 -> s1 [76, 65535] { R6123 += 1, R6079 += 1, R6020 += 1, R6021 += 1 };
  s1 -> s1 [0, 74] { R6123 += 1, R6079 += 1, R6020 += 1, R6021 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R6123 += 1 };
  s1 -> s3 [75, 75] { R6123 += 1, R6079 += 1, R6020 += 1, R6021 += 1 };
  s1 -> s4 [75, 75] { R6123 += 1, R6079 += 1, R6020 += 1, R6021 += 1 };
  s1 -> s1 [76, 65535] { R6123 += 1, R6079 += 1, R6020 += 1, R6021 += 1 };
  s2 -> s1 [0, 74] { R6123 += 1, R6079 += 1, R6020 += 1, R6021 += 1 };
  s2 -> s2 [0, 65535] { R6123 += 1, R6078 += 1, R6079 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [75, 75] { R6123 += 1, R6079 += 1, R6020 += 1, R6021 += 1 };
  s2 -> s4 [75, 75] { R6123 += 1, R6079 += 1, R6020 += 1, R6021 += 1 };
  s2 -> s1 [76, 65535] { R6123 += 1, R6079 += 1, R6020 += 1, R6021 += 1 };
  s3 -> s3 [0, 65535] { R6123 += 1, R6079 += 1, R6020 += 1, R6021 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R6123 += 1 };
  s4 -> s4 [0, 65535] { R6123 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6123 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [107, 107];
  accepting s1;
};
};
constraint R1 = R6039 && R2 = R6123 && R20 - R6123 = -1 && R21 = R6123 && R22 - R6123 = -1 && R23 = R6123 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R5169 + -1*R5167 - R53 = 0 && R52 + R5168 + R5166 = 0 && R6038 = 0 && R6064 = 0 && R6065 = 0 && R6072 = 0 && R6073 = 0 && R6074 = 0 && R6075 = 0 && R6076 = 0 && R6077 = 0 && R6080 = 0 && R6081 = R6123 && R6082 = 0 && R6083 = R6123 && R6084 = 0 && R6085 = R6123 && R6086 = 0 && R6087 = R6123 && R6088 = 0 && R6089 = R6123 && R6090 = 0 && R6091 = R6123 && R6092 = 0 && R6093 = R6123 && R6094 = 0 && R6095 = R6123 && R6096 = 0 && R6097 = R6123 && R6098 = 0 && R6099 = R6123 && R6100 = 0 && R6101 = R6123 && R6102 = 0 && R6103 = R6123 && R6104 = 0 && R6105 = R6123 && R6106 = 0 && R6107 = R6123 && R6108 = 0 && R6109 = R6123 && R6110 = 0 && R6111 = R6123 && R6112 = 0 && R6113 = R6123 && R6114 = 0 && R6115 = R6123 && R6116 = 0 && R6117 = R6123 && R6118 = 0 && R6119 = R6123 && R6120 = 0 && R6121 = R6123 && R6122 = 0 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R5169 + -1*R5167 - R53 < 1 && -1 < R6039 && 0 < R6123 && (R48 + R3895 + R3892 != 0 || ((R42 + R72 + R70 != 0 || R43 + R73 + R71 + -1*R5169 + -1*R5167 - R53 = 0 || R53 + R5169 + R5167 < 1) && (R42 + R72 + R70 = 0 || R53 + R5169 + R5167 < 1))) && (R48 + R3895 + R3892 != 0 || ((R46 + R3893 + R3890 != 0 || R47 + R3894 + R3891 + -1*R5169 + -1*R5167 - R53 = 0 || R53 + R5169 + R5167 < 1) && (R46 + R3893 + R3890 = 0 || R53 + R5169 + R5167 < 1))) && (R6024 != 0 || R6025 = R6039 || (R17 = 0 && R6039 = 0)) && (R6026 != 0 || R6027 = R6039 || (R17 = 0 && R6039 = 0)) && (R6028 != 0 || R6029 = R6039 || (R17 = 0 && R6039 = 0)) && (R6030 != 0 || R6031 = R6039 || (R17 = 0 && R6039 = 0)) && (R6032 != 0 || R6033 = R6039 || (R17 = 0 && R6039 = 0)) && (R6034 != 0 || R6035 = R6039 || (R17 = 0 && R6039 = 0)) && (R6036 != 0 || R6037 = R6039 || (R17 = 0 && R6039 = 0)) && (R6040 != 0 || R6039 = R6041 || (R17 = 0 && R6039 = 0)) && (R6042 != 0 || R6039 = R6043 || (R17 = 0 && R6039 = 0)) && (R18 = 0 || (R6062 = 0 && R6063 = 0)) && (R18 = 0 || (R6066 = 0 && R6067 = 0)) && (R18 = 0 || (R6068 = 0 && R6069 = 0)) && (R18 = 0 || (R6070 = 0 && R6071 = 0)) && (R18 = 0 || (R6078 = 0 && R6079 = 0)) && (R19 = 0 || (R6044 = 0 && R6045 = 0)) && (R19 = 0 || (R6046 = 0 && R6047 = 0)) && (R19 = 0 || (R6048 = 0 && R6049 = 0)) && (R19 = 0 || (R6050 = 0 && R6051 = 0)) && (R19 = 0 || (R6052 = 0 && R6053 = 0)) && (R19 = 0 || (R6054 = 0 && R6055 = 0)) && (R19 = 0 || (R6056 = 0 && R6057 = 0)) && (R19 = 0 || (R6058 = 0 && R6059 = 0)) && (R19 = 0 || (R6060 = 0 && R6061 = 0)) && (R48 + R3895 + R3892 = 0 || (R42 + R72 + R70 = 0 && R43 + R73 + R71 + -1*R5169 + -1*R5167 - R53 = 0)) && (R48 + R3895 + R3892 = 0 || (R46 + R3893 + R3890 = 0 && R47 + R3894 + R3891 + -1*R5169 + -1*R5167 - R53 = 0)) && (R58 + R6019 + R6016 = 0 || (R56 + R6017 + R6014 = 0 && R57 + R6018 + R6015 = 0)) && (R58 + R6019 + R6016 = 0 || (R62 + R6022 + R6020 = 0 && R63 + R6023 + R6021 = 0)) && (R6024 = 0 || (R17 = 0 && R6039 = 0)) && (R6026 = 0 || (R17 = 0 && R6039 = 0)) && (R6028 = 0 || (R17 = 0 && R6039 = 0)) && (R6030 = 0 || (R17 = 0 && R6039 = 0)) && (R6032 = 0 || (R17 = 0 && R6039 = 0)) && (R6034 = 0 || (R17 = 0 && R6039 = 0)) && (R6036 = 0 || (R17 = 0 && R6039 = 0)) && (R6040 = 0 || (R17 = 0 && R6039 = 0)) && (R6042 = 0 || (R17 = 0 && R6039 = 0));
// End of Parikh automata intersection problem
