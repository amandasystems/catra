// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R11522, R11523, R11524, R11525, R11526, R11527, R11528, R11529, R11530, R11531, R12, R12802, R12803, R12804, R12805, R13228, R13229, R13230, R13231, R13232, R13233, R13442, R13443, R13444, R13445, R13446, R13447, R13448, R13449, R13450, R13451, R13452, R13453, R13454, R13455, R13456, R13457, R13458, R13459, R13460, R13461, R13462, R13463, R13464, R13465, R13466, R13467, R13468, R13469, R13470, R13471, R13472, R13473, R13474, R13475, R13476, R13477, R13478, R13479, R13480, R13481, R13482, R13483, R13484, R13485, R13486, R13487, R13488, R13489, R13490, R13491, R13492, R13493, R13494, R13495, R13496, R13497, R13498, R13499, R13500, R13501, R13502, R13503, R13504, R13505, R13506, R13507, R13508, R13509, R13510, R13511, R13512, R13513, R13514, R13515, R13516, R13517, R13518, R13519, R13520, R13521, R13522, R13523, R13524, R13525, R13526, R13527, R13528, R13529, R13530, R13531, R13532, R13533, R13534, R13535, R13536, R13537, R13538, R13539, R13540, R13541, R13542, R13543, R13544, R13545, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R8;
synchronised {  // Automata constraining P64
automaton P64_0 {
  init s0;
  s0 -> s1 [119, 119];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [75, 75];
  s0 -> s0 [76, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [75, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 74];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [75, 75];
  s0 -> s1 [76, 65535];
  s1 -> s1 [0, 74];
  s1 -> s2 [75, 75];
  s1 -> s1 [76, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s1 [0, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s1 [0, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R13466 += 1, R13467 += 1 };
  s0 -> s1 [0, 65535] { R13467 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R13467 += 1, R19 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 74] { R13469 += 1 };
  s0 -> s0 [0, 65535] { R13468 += 1, R13469 += 1 };
  s0 -> s2 [75, 75] { R13469 += 1 };
  s0 -> s3 [75, 75] { R13469 += 1 };
  s0 -> s1 [88, 65535] { R13469 += 1 };
  s1 -> s1 [0, 74] { R13469 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R13469 += 1 };
  s1 -> s3 [75, 75] { R13469 += 1 };
  s1 -> s1 [88, 65535] { R13469 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 75] { R13469 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [88, 65535] { R13469 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 74] { R13471 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R13470 += 1, R13471 += 1 };
  s0 -> s2 [75, 75] { R13471 += 1, R38 += 1 };
  s0 -> s3 [75, 75] { R13471 += 1, R38 += 1 };
  s0 -> s1 [76, 65535] { R13471 += 1, R38 += 1 };
  s1 -> s1 [0, 74] { R13471 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R13471 += 1, R38 += 1 };
  s1 -> s3 [75, 75] { R13471 += 1, R38 += 1 };
  s1 -> s1 [76, 65535] { R13471 += 1, R38 += 1 };
  s2 -> s2 [0, 65535] { R13471 += 1, R38 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 74] { R13473 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R13472 += 1, R13473 += 1 };
  s0 -> s2 [75, 75] { R13473 += 1, R40 += 1 };
  s0 -> s3 [75, 75] { R13473 += 1, R40 += 1 };
  s0 -> s1 [76, 65535] { R13473 += 1, R40 += 1 };
  s1 -> s1 [0, 74] { R13473 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R13473 += 1, R40 += 1 };
  s1 -> s3 [75, 75] { R13473 += 1, R40 += 1 };
  s1 -> s1 [76, 65535] { R13473 += 1, R40 += 1 };
  s2 -> s2 [0, 65535] { R13473 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 74] { R13475 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R13474 += 1, R13475 += 1 };
  s0 -> s2 [75, 75] { R13475 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [75, 75] { R13475 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [76, 65535] { R13475 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 74] { R13475 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R13475 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [75, 75] { R13475 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [76, 65535] { R13475 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535] { R13475 += 1, R42 += 1, R43 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 74] { R13477 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R13476 += 1, R13477 += 1 };
  s0 -> s2 [75, 75] { R13477 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [75, 75] { R13477 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [76, 65535] { R13477 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 74] { R13477 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R13477 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [75, 75] { R13477 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [76, 65535] { R13477 += 1, R46 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R13477 += 1, R46 += 1, R47 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 74] { R13479 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R13478 += 1, R13479 += 1 };
  s0 -> s2 [75, 75] { R13479 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [75, 75] { R13479 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [76, 65535] { R13479 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 74] { R13479 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R13479 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [75, 75] { R13479 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [76, 65535] { R13479 += 1, R52 += 1, R53 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R13479 += 1, R52 += 1, R53 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 74] { R13481 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R13480 += 1, R13481 += 1 };
  s0 -> s2 [75, 75] { R13481 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [75, 75] { R13481 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [76, 65535] { R13481 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 74] { R13481 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R13481 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [75, 75] { R13481 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [76, 65535] { R13481 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R13481 += 1, R56 += 1, R57 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 74] { R13483 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R13482 += 1, R13483 += 1 };
  s0 -> s2 [75, 75] { R13483 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [75, 75] { R13483 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [76, 65535] { R13483 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 74] { R13483 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R13483 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [75, 75] { R13483 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [76, 65535] { R13483 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535] { R13483 += 1, R62 += 1, R63 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 74] { R13503 += 1 };
  s0 -> s0 [0, 65535] { R13502 += 1, R13503 += 1 };
  s0 -> s2 [75, 75] { R13503 += 1 };
  s0 -> s1 [76, 65535] { R13503 += 1 };
  s1 -> s1 [0, 74] { R13503 += 1 };
  s1 -> s2 [75, 75] { R13503 += 1 };
  s1 -> s1 [76, 65535] { R13503 += 1 };
  s2 -> s2 [0, 65535] { R13503 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R13505 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R13504 += 1, R13505 += 1 };
  s1 -> s1 [0, 65535] { R13505 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 74] { R13507 += 1 };
  s0 -> s0 [0, 65535] { R13506 += 1, R13507 += 1 };
  s0 -> s2 [0, 65535] { R13507 += 1, R8 += 1 };
  s0 -> s3 [75, 75] { R13507 += 1 };
  s0 -> s1 [76, 65535] { R13507 += 1 };
  s1 -> s1 [0, 74] { R13507 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [75, 75] { R13507 += 1 };
  s1 -> s1 [76, 65535] { R13507 += 1 };
  s2 -> s1 [0, 74] { R13507 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R13507 += 1, R8 += 1 };
  s2 -> s3 [75, 75] { R13507 += 1 };
  s2 -> s1 [76, 65535] { R13507 += 1 };
  s3 -> s3 [0, 65535] { R13507 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 74] { R13509 += 1, R13447 += 1 };
  s0 -> s0 [0, 65535] { R13508 += 1, R13509 += 1 };
  s0 -> s2 [0, 65535] { R13509 += 1, R13446 += 1, R13447 += 1 };
  s0 -> s1 [76, 65535] { R13509 += 1, R13447 += 1 };
  s1 -> s1 [0, 74] { R13509 += 1, R13447 += 1 };
  s1 -> s1 [0, 65535] { R13509 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [76, 65535] { R13509 += 1, R13447 += 1 };
  s2 -> s1 [0, 74] { R13509 += 1, R13447 += 1 };
  s2 -> s2 [0, 65535] { R13509 += 1, R13446 += 1, R13447 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [76, 65535] { R13509 += 1, R13447 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R13511 += 1, R13449 += 1, R17 += 1 };
  s0 -> s0 [0, 65535] { R13510 += 1, R13511 += 1 };
  s0 -> s2 [0, 65535] { R13511 += 1, R13448 += 1, R13449 += 1 };
  s1 -> s1 [0, 65535] { R13511 += 1, R13449 += 1, R17 += 1 };
  s1 -> s4 [0, 65535] { R13511 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R13511 += 1, R13449 += 1, R17 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R13511 += 1, R13448 += 1, R13449 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R13511 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 75] { R13513 += 1, R13451 += 1 };
  s0 -> s0 [0, 65535] { R13512 += 1, R13513 += 1 };
  s0 -> s2 [0, 65535] { R13513 += 1, R13450 += 1, R13451 += 1 };
  s0 -> s1 [87, 65535] { R13513 += 1, R13451 += 1 };
  s1 -> s1 [0, 75] { R13513 += 1, R13451 += 1 };
  s1 -> s1 [0, 65535] { R13513 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [87, 65535] { R13513 += 1, R13451 += 1 };
  s2 -> s1 [0, 75] { R13513 += 1, R13451 += 1 };
  s2 -> s2 [0, 65535] { R13513 += 1, R13450 += 1, R13451 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [87, 65535] { R13513 += 1, R13451 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s0 [0, 65535] { R13514 += 1, R13515 += 1 };
  s0 -> s1 [0, 65535] { R13515 += 1, R13452 += 1, R13453 += 1 };
  s0 -> s2 [0, 65535] { R13515 += 1, R13453 += 1, R67 += 1 };
  s1 -> s1 [0, 65535] { R13515 += 1, R13452 += 1, R13453 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R13515 += 1, R13453 += 1, R67 += 1 };
  s2 -> s3 [0, 65535] { R13515 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R13515 += 1, R13453 += 1, R67 += 1 };
  s3 -> s3 [0, 65535] { R13515 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 86] { R13517 += 1, R13455 += 1 };
  s0 -> s2 [0, 65535] { R13517 += 1, R13455 += 1, R69 += 1 };
  s0 -> s3 [0, 65535] { R13517 += 1, R13454 += 1, R13455 += 1 };
  s0 -> s0 [0, 65535] { R13516 += 1, R13517 += 1 };
  s0 -> s1 [88, 65535] { R13517 += 1, R13455 += 1 };
  s1 -> s1 [0, 86] { R13517 += 1, R13455 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R13517 += 1 };
  s1 -> s1 [88, 65535] { R13517 += 1, R13455 += 1 };
  s2 -> s1 [0, 86] { R13517 += 1, R13455 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R13517 += 1 };
  s2 -> s2 [0, 65535] { R13517 += 1, R13455 += 1, R69 += 1 };
  s2 -> s1 [88, 65535] { R13517 += 1, R13455 += 1 };
  s3 -> s1 [0, 86] { R13517 += 1, R13455 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R13517 += 1, R13455 += 1, R69 += 1 };
  s3 -> s3 [0, 65535] { R13517 += 1, R13454 += 1, R13455 += 1 };
  s3 -> s1 [88, 65535] { R13517 += 1, R13455 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R13517 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 86] { R13519 += 1, R13457 += 1, R11525 += 1 };
  s0 -> s1 [0, 65535] { R13519 += 1, R13457 += 1 };
  s0 -> s2 [0, 65535] { R13519 += 1, R13456 += 1, R13457 += 1 };
  s0 -> s0 [0, 65535] { R13518 += 1, R13519 += 1 };
  s0 -> s1 [88, 65535] { R13519 += 1, R13457 += 1, R11525 += 1 };
  s1 -> s1 [0, 86] { R13519 += 1, R13457 += 1, R11525 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R13519 += 1, R13457 += 1 };
  s1 -> s4 [0, 65535] { R13519 += 1 };
  s1 -> s1 [88, 65535] { R13519 += 1, R13457 += 1, R11525 += 1 };
  s2 -> s1 [0, 86] { R13519 += 1, R13457 += 1, R11525 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R13519 += 1, R13457 += 1 };
  s2 -> s2 [0, 65535] { R13519 += 1, R13456 += 1, R13457 += 1 };
  s2 -> s1 [88, 65535] { R13519 += 1, R13457 += 1, R11525 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R13519 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R13521 += 1, R13459 += 1, R11530 += 1, R11531 += 1 };
  s0 -> s2 [0, 65535] { R13521 += 1, R13458 += 1, R13459 += 1 };
  s0 -> s0 [0, 65535] { R13520 += 1, R13521 += 1 };
  s0 -> s3 [0, 65535] { R13521 += 1, R13459 += 1, R11529 += 1, R11530 += 1 };
  s1 -> s1 [0, 65535] { R13521 += 1, R13459 += 1, R11530 += 1, R11531 += 1 };
  s1 -> s4 [0, 65535] { R13521 += 1 };
  s1 -> s6 [0, 65535] { R13521 += 1, R13459 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R13521 += 1, R13459 += 1, R11530 += 1, R11531 += 1 };
  s2 -> s2 [0, 65535] { R13521 += 1, R13458 += 1, R13459 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R13521 += 1, R13459 += 1, R11529 += 1, R11530 += 1 };
  s3 -> s1 [0, 65535] { R13521 += 1, R13459 += 1, R11530 += 1, R11531 += 1 };
  s3 -> s4 [0, 65535] { R13521 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R13521 += 1, R13459 += 1, R11529 += 1, R11530 += 1 };
  s4 -> s4 [0, 65535] { R13521 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R13521 += 1 };
  s6 -> s6 [0, 65535] { R13521 += 1, R13459 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 87] { R13523 += 1, R13461 += 1, R12805 += 1 };
  s0 -> s0 [0, 65535] { R13522 += 1, R13523 += 1 };
  s0 -> s2 [0, 65535] { R13523 += 1, R13460 += 1, R13461 += 1 };
  s0 -> s3 [89, 89] { R13523 += 1, R13461 += 1, R12805 += 1 };
  s0 -> s1 [90, 65535] { R13523 += 1, R13461 += 1, R12805 += 1 };
  s1 -> s1 [0, 87] { R13523 += 1, R13461 += 1, R12805 += 1 };
  s1 -> s3 [89, 89] { R13523 += 1, R13461 += 1, R12805 += 1 };
  s1 -> s1 [90, 65535] { R13523 += 1, R13461 += 1, R12805 += 1 };
  s2 -> s1 [0, 87] { R13523 += 1, R13461 += 1, R12805 += 1 };
  s2 -> s2 [0, 65535] { R13523 += 1, R13460 += 1, R13461 += 1 };
  s2 -> s3 [89, 89] { R13523 += 1, R13461 += 1, R12805 += 1 };
  s2 -> s1 [90, 65535] { R13523 += 1, R13461 += 1, R12805 += 1 };
  s3 -> s3 [0, 87] { R13523 += 1, R13461 += 1, R12805 += 1 };
  s3 -> s4 [0, 65535] { R13523 += 1 };
  s3 -> s3 [0, 65535] { R13523 += 1, R13461 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [89, 65535] { R13523 += 1, R13461 += 1, R12805 += 1 };
  s4 -> s4 [0, 65535] { R13523 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R13525 += 1, R13462 += 1, R13463 += 1 };
  s0 -> s2 [0, 65535] { R13525 += 1, R13463 += 1 };
  s0 -> s0 [0, 65535] { R13524 += 1, R13525 += 1 };
  s0 -> s3 [0, 65535] { R13525 += 1, R13463 += 1, R13232 += 1, R13233 += 1 };
  s1 -> s1 [0, 65535] { R13525 += 1, R13462 += 1, R13463 += 1 };
  s1 -> s2 [0, 65535] { R13525 += 1, R13463 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R13525 += 1, R13463 += 1, R13232 += 1, R13233 += 1 };
  s2 -> s4 [0, 65535] { R13525 += 1 };
  s2 -> s2 [0, 65535] { R13525 += 1, R13463 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s4 [0, 65535] { R13525 += 1 };
  s3 -> s2 [0, 65535] { R13525 += 1, R13463 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R13525 += 1, R13463 += 1, R13232 += 1, R13233 += 1 };
  s4 -> s4 [0, 65535] { R13525 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 87] { R13527 += 1, R13465 += 1, R13445 += 1 };
  s0 -> s1 [0, 65535] { R13527 += 1, R13465 += 1 };
  s0 -> s0 [0, 65535] { R13526 += 1, R13527 += 1 };
  s0 -> s2 [0, 65535] { R13527 += 1, R13464 += 1, R13465 += 1 };
  s0 -> s1 [90, 65535] { R13527 += 1, R13465 += 1, R13445 += 1 };
  s1 -> s1 [0, 87] { R13527 += 1, R13465 += 1, R13445 += 1 };
  s1 -> s4 [0, 65535] { R13527 += 1 };
  s1 -> s1 [0, 65535] { R13527 += 1, R13465 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [90, 65535] { R13527 += 1, R13465 += 1, R13445 += 1 };
  s2 -> s1 [0, 87] { R13527 += 1, R13465 += 1, R13445 += 1 };
  s2 -> s1 [0, 65535] { R13527 += 1, R13465 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R13527 += 1, R13464 += 1, R13465 += 1 };
  s2 -> s1 [90, 65535] { R13527 += 1, R13465 += 1, R13445 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R13527 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R13529 += 1, R13485 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R13528 += 1, R13529 += 1 };
  s0 -> s2 [0, 65535] { R13529 += 1, R13484 += 1, R13485 += 1 };
  s1 -> s1 [0, 65535] { R13529 += 1, R13485 += 1, R18 += 1 };
  s1 -> s4 [0, 65535] { R13529 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R13529 += 1, R13485 += 1, R18 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R13529 += 1, R13484 += 1, R13485 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R13529 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 74] { R13531 += 1, R13487 += 1 };
  s0 -> s0 [0, 65535] { R13530 += 1, R13531 += 1 };
  s0 -> s2 [0, 65535] { R13531 += 1, R13486 += 1, R13487 += 1 };
  s0 -> s3 [75, 75] { R13531 += 1, R13487 += 1 };
  s0 -> s4 [75, 75] { R13531 += 1, R13487 += 1 };
  s0 -> s5 [87, 87] { R13531 += 1, R13487 += 1 };
  s0 -> s1 [88, 65535] { R13531 += 1, R13487 += 1 };
  s1 -> s1 [0, 74] { R13531 += 1, R13487 += 1 };
  s1 -> s3 [75, 75] { R13531 += 1, R13487 += 1 };
  s1 -> s4 [75, 75] { R13531 += 1, R13487 += 1 };
  s1 -> s5 [87, 87] { R13531 += 1, R13487 += 1 };
  s1 -> s1 [88, 65535] { R13531 += 1, R13487 += 1 };
  s2 -> s1 [0, 74] { R13531 += 1, R13487 += 1 };
  s2 -> s2 [0, 65535] { R13531 += 1, R13486 += 1, R13487 += 1 };
  s2 -> s3 [75, 75] { R13531 += 1, R13487 += 1 };
  s2 -> s4 [75, 75] { R13531 += 1, R13487 += 1 };
  s2 -> s5 [87, 87] { R13531 += 1, R13487 += 1 };
  s2 -> s1 [88, 65535] { R13531 += 1, R13487 += 1 };
  s4 -> s4 [0, 75] { R13531 += 1, R13487 += 1 };
  s4 -> s8 [87, 87] { R13531 += 1, R13487 += 1 };
  s4 -> s4 [88, 65535] { R13531 += 1, R13487 += 1 };
  s5 -> s5 [0, 74] { R13531 += 1, R13487 += 1 };
  s5 -> s5 [0, 65535] { R13531 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [75, 75] { R13531 += 1, R13487 += 1 };
  s5 -> s8 [75, 75] { R13531 += 1, R13487 += 1 };
  s5 -> s5 [87, 65535] { R13531 += 1, R13487 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R13531 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 75] { R13531 += 1, R13487 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R13531 += 1 };
  s8 -> s8 [87, 65535] { R13531 += 1, R13487 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 74] { R13533 += 1, R13489 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R13532 += 1, R13533 += 1 };
  s0 -> s2 [0, 65535] { R13533 += 1, R13488 += 1, R13489 += 1 };
  s0 -> s3 [75, 75] { R13533 += 1, R13489 += 1, R66 += 1 };
  s0 -> s4 [75, 75] { R13533 += 1, R13489 += 1, R66 += 1 };
  s0 -> s1 [76, 65535] { R13533 += 1, R13489 += 1, R66 += 1 };
  s1 -> s1 [0, 74] { R13533 += 1, R13489 += 1, R66 += 1 };
  s1 -> s1 [0, 65535] { R13533 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [75, 75] { R13533 += 1, R13489 += 1, R66 += 1 };
  s1 -> s4 [75, 75] { R13533 += 1, R13489 += 1, R66 += 1 };
  s1 -> s1 [76, 65535] { R13533 += 1, R13489 += 1, R66 += 1 };
  s2 -> s1 [0, 74] { R13533 += 1, R13489 += 1, R66 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R13533 += 1, R13488 += 1, R13489 += 1 };
  s2 -> s3 [75, 75] { R13533 += 1, R13489 += 1, R66 += 1 };
  s2 -> s4 [75, 75] { R13533 += 1, R13489 += 1, R66 += 1 };
  s2 -> s1 [76, 65535] { R13533 += 1, R13489 += 1, R66 += 1 };
  s3 -> s3 [0, 65535] { R13533 += 1, R13489 += 1, R66 += 1 };
  s3 -> s6 [0, 65535] { R13533 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R13533 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R13533 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 74] { R13535 += 1, R13491 += 1, R68 += 1 };
  s0 -> s0 [0, 65535] { R13534 += 1, R13535 += 1 };
  s0 -> s2 [0, 65535] { R13535 += 1, R13490 += 1, R13491 += 1 };
  s0 -> s3 [75, 75] { R13535 += 1, R13491 += 1, R68 += 1 };
  s0 -> s4 [75, 75] { R13535 += 1, R13491 += 1, R68 += 1 };
  s0 -> s1 [76, 65535] { R13535 += 1, R13491 += 1, R68 += 1 };
  s1 -> s1 [0, 74] { R13535 += 1, R13491 += 1, R68 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R13535 += 1 };
  s1 -> s3 [75, 75] { R13535 += 1, R13491 += 1, R68 += 1 };
  s1 -> s4 [75, 75] { R13535 += 1, R13491 += 1, R68 += 1 };
  s1 -> s1 [76, 65535] { R13535 += 1, R13491 += 1, R68 += 1 };
  s2 -> s1 [0, 74] { R13535 += 1, R13491 += 1, R68 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R13535 += 1, R13490 += 1, R13491 += 1 };
  s2 -> s3 [75, 75] { R13535 += 1, R13491 += 1, R68 += 1 };
  s2 -> s4 [75, 75] { R13535 += 1, R13491 += 1, R68 += 1 };
  s2 -> s1 [76, 65535] { R13535 += 1, R13491 += 1, R68 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R13535 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R13535 += 1 };
  s4 -> s4 [0, 65535] { R13535 += 1, R13491 += 1, R68 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R13535 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 74] { R13537 += 1, R13493 += 1, R11523 += 1 };
  s0 -> s2 [0, 74] { R13537 += 1, R13493 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s3 [0, 65535] { R13537 += 1, R13492 += 1, R13493 += 1 };
  s0 -> s0 [0, 65535] { R13536 += 1, R13537 += 1 };
  s0 -> s4 [75, 75] { R13537 += 1, R13493 += 1, R11523 += 1 };
  s0 -> s5 [75, 75] { R13537 += 1, R13493 += 1, R11523 += 1 };
  s0 -> s6 [75, 75] { R13537 += 1, R13493 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s7 [75, 75] { R13537 += 1, R13493 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s1 [76, 86] { R13537 += 1, R13493 += 1, R11523 += 1 };
  s0 -> s2 [76, 65535] { R13537 += 1, R13493 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s1 [88, 65535] { R13537 += 1, R13493 += 1, R11523 += 1 };
  s1 -> s1 [0, 74] { R13537 += 1, R13493 += 1, R11523 += 1 };
  s1 -> s1 [0, 65535] { R13537 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s4 [75, 75] { R13537 += 1, R13493 += 1 };
  s1 -> s5 [75, 75] { R13537 += 1, R13493 += 1 };
  s1 -> s1 [76, 86] { R13537 += 1, R13493 += 1, R11523 += 1 };
  s1 -> s1 [76, 65535] { R13537 += 1, R13493 += 1 };
  s1 -> s1 [88, 65535] { R13537 += 1, R13493 += 1, R11523 += 1 };
  s2 -> s1 [0, 74] { R13537 += 1, R13493 += 1, R11523 += 1 };
  s2 -> s2 [0, 74] { R13537 += 1, R13493 += 1, R11522 += 1, R11523 += 1 };
  s2 -> s4 [75, 75] { R13537 += 1, R13493 += 1, R11523 += 1 };
  s2 -> s5 [75, 75] { R13537 += 1, R13493 += 1, R11523 += 1 };
  s2 -> s6 [75, 75] { R13537 += 1, R13493 += 1, R11522 += 1, R11523 += 1 };
  s2 -> s7 [75, 75] { R13537 += 1, R13493 += 1, R11522 += 1, R11523 += 1 };
  s2 -> s1 [76, 86] { R13537 += 1, R13493 += 1, R11523 += 1 };
  s2 -> s2 [76, 65535] { R13537 += 1, R13493 += 1, R11522 += 1, R11523 += 1 };
  s2 -> s1 [88, 65535] { R13537 += 1, R13493 += 1, R11523 += 1 };
  s3 -> s1 [0, 74] { R13537 += 1, R13493 += 1, R11523 += 1 };
  s3 -> s2 [0, 74] { R13537 += 1, R13493 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s3 [0, 65535] { R13537 += 1, R13492 += 1, R13493 += 1 };
  s3 -> s4 [75, 75] { R13537 += 1, R13493 += 1, R11523 += 1 };
  s3 -> s5 [75, 75] { R13537 += 1, R13493 += 1, R11523 += 1 };
  s3 -> s6 [75, 75] { R13537 += 1, R13493 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s7 [75, 75] { R13537 += 1, R13493 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s1 [76, 86] { R13537 += 1, R13493 += 1, R11523 += 1 };
  s3 -> s2 [76, 65535] { R13537 += 1, R13493 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s1 [88, 65535] { R13537 += 1, R13493 += 1, R11523 += 1 };
  s4 -> s4 [0, 86] { R13537 += 1, R13493 += 1, R11523 += 1 };
  s4 -> s4 [0, 65535] { R13537 += 1, R13493 += 1 };
  s4 -> s9 [0, 65535] { R13537 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s4 [88, 65535] { R13537 += 1, R13493 += 1, R11523 += 1 };
  s5 -> s5 [0, 65535] { R13537 += 1 };
  s5 -> s8 [0, 65535];
  s6 -> s4 [0, 86] { R13537 += 1, R13493 += 1, R11523 += 1 };
  s6 -> s6 [0, 65535] { R13537 += 1, R13493 += 1, R11522 += 1, R11523 += 1 };
  s6 -> s4 [88, 65535] { R13537 += 1, R13493 += 1, R11523 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R13537 += 1 };
  s9 -> s8 [0, 65535];
  accepting s4, s8, s5, s9, s1;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 74] { R13539 += 1, R13495 += 1, R11526 += 1, R11527 += 1 };
  s0 -> s0 [0, 65535] { R13538 += 1, R13539 += 1 };
  s0 -> s2 [0, 65535] { R13539 += 1, R13494 += 1, R13495 += 1 };
  s0 -> s3 [75, 75] { R13539 += 1, R13495 += 1, R11526 += 1, R11527 += 1 };
  s0 -> s4 [75, 75] { R13539 += 1, R13495 += 1, R11526 += 1, R11527 += 1 };
  s0 -> s1 [76, 65535] { R13539 += 1, R13495 += 1, R11526 += 1, R11527 += 1 };
  s1 -> s1 [0, 74] { R13539 += 1, R13495 += 1, R11526 += 1, R11527 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R13539 += 1 };
  s1 -> s3 [75, 75] { R13539 += 1, R13495 += 1, R11526 += 1, R11527 += 1 };
  s1 -> s4 [75, 75] { R13539 += 1, R13495 += 1, R11526 += 1, R11527 += 1 };
  s1 -> s1 [76, 65535] { R13539 += 1, R13495 += 1, R11526 += 1, R11527 += 1 };
  s2 -> s1 [0, 74] { R13539 += 1, R13495 += 1, R11526 += 1, R11527 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R13539 += 1, R13494 += 1, R13495 += 1 };
  s2 -> s3 [75, 75] { R13539 += 1, R13495 += 1, R11526 += 1, R11527 += 1 };
  s2 -> s4 [75, 75] { R13539 += 1, R13495 += 1, R11526 += 1, R11527 += 1 };
  s2 -> s1 [76, 65535] { R13539 += 1, R13495 += 1, R11526 += 1, R11527 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R13539 += 1, R13495 += 1, R11526 += 1, R11527 += 1 };
  s3 -> s6 [0, 65535] { R13539 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R13539 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R13539 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 74] { R13541 += 1, R13497 += 1, R12803 += 1 };
  s0 -> s2 [0, 74] { R13541 += 1, R13497 += 1, R12802 += 1, R12803 += 1 };
  s0 -> s0 [0, 65535] { R13540 += 1, R13541 += 1 };
  s0 -> s3 [0, 65535] { R13541 += 1, R13496 += 1, R13497 += 1 };
  s0 -> s4 [75, 75] { R13541 += 1, R13497 += 1, R12803 += 1 };
  s0 -> s5 [75, 75] { R13541 += 1, R13497 += 1, R12803 += 1 };
  s0 -> s6 [75, 75] { R13541 += 1, R13497 += 1, R12802 += 1, R12803 += 1 };
  s0 -> s7 [75, 75] { R13541 += 1, R13497 += 1, R12802 += 1, R12803 += 1 };
  s0 -> s1 [76, 87] { R13541 += 1, R13497 += 1, R12803 += 1 };
  s0 -> s2 [76, 65535] { R13541 += 1, R13497 += 1, R12802 += 1, R12803 += 1 };
  s0 -> s1 [90, 65535] { R13541 += 1, R13497 += 1, R12803 += 1 };
  s1 -> s1 [0, 74] { R13541 += 1, R13497 += 1, R12803 += 1 };
  s1 -> s1 [0, 65535] { R13541 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s4 [75, 75] { R13541 += 1, R13497 += 1, R12803 += 1 };
  s1 -> s5 [75, 75] { R13541 += 1, R13497 += 1, R12803 += 1 };
  s1 -> s1 [76, 87] { R13541 += 1, R13497 += 1, R12803 += 1 };
  s1 -> s1 [90, 65535] { R13541 += 1, R13497 += 1, R12803 += 1 };
  s2 -> s1 [0, 74] { R13541 += 1, R13497 += 1, R12803 += 1 };
  s2 -> s2 [0, 74] { R13541 += 1, R13497 += 1, R12802 += 1, R12803 += 1 };
  s2 -> s4 [75, 75] { R13541 += 1, R13497 += 1, R12803 += 1 };
  s2 -> s5 [75, 75] { R13541 += 1, R13497 += 1, R12803 += 1 };
  s2 -> s6 [75, 75] { R13541 += 1, R13497 += 1, R12802 += 1, R12803 += 1 };
  s2 -> s7 [75, 75] { R13541 += 1, R13497 += 1, R12802 += 1, R12803 += 1 };
  s2 -> s1 [76, 87] { R13541 += 1, R13497 += 1, R12803 += 1 };
  s2 -> s2 [76, 65535] { R13541 += 1, R13497 += 1, R12802 += 1, R12803 += 1 };
  s2 -> s1 [90, 65535] { R13541 += 1, R13497 += 1, R12803 += 1 };
  s3 -> s1 [0, 74] { R13541 += 1, R13497 += 1, R12803 += 1 };
  s3 -> s2 [0, 74] { R13541 += 1, R13497 += 1, R12802 += 1, R12803 += 1 };
  s3 -> s3 [0, 65535] { R13541 += 1, R13496 += 1, R13497 += 1 };
  s3 -> s4 [75, 75] { R13541 += 1, R13497 += 1, R12803 += 1 };
  s3 -> s5 [75, 75] { R13541 += 1, R13497 += 1, R12803 += 1 };
  s3 -> s6 [75, 75] { R13541 += 1, R13497 += 1, R12802 += 1, R12803 += 1 };
  s3 -> s7 [75, 75] { R13541 += 1, R13497 += 1, R12802 += 1, R12803 += 1 };
  s3 -> s1 [76, 87] { R13541 += 1, R13497 += 1, R12803 += 1 };
  s3 -> s2 [76, 65535] { R13541 += 1, R13497 += 1, R12802 += 1, R12803 += 1 };
  s3 -> s1 [90, 65535] { R13541 += 1, R13497 += 1, R12803 += 1 };
  s4 -> s4 [0, 87] { R13541 += 1, R13497 += 1, R12803 += 1 };
  s4 -> s4 [0, 65535] { R13541 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s4 [90, 65535] { R13541 += 1, R13497 += 1, R12803 += 1 };
  s5 -> s5 [0, 65535] { R13541 += 1 };
  s5 -> s8 [0, 65535];
  s6 -> s4 [0, 87] { R13541 += 1, R13497 += 1, R12803 += 1 };
  s6 -> s6 [0, 65535] { R13541 += 1, R13497 += 1, R12802 += 1, R12803 += 1 };
  s6 -> s4 [90, 65535] { R13541 += 1, R13497 += 1, R12803 += 1 };
  s8 -> s8 [0, 65535];
  accepting s1, s4, s5, s8;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 74] { R13543 += 1, R13499 += 1, R13228 += 1, R13229 += 1 };
  s0 -> s2 [0, 74] { R13543 += 1, R13499 += 1, R13229 += 1, R13230 += 1 };
  s0 -> s0 [0, 65535] { R13542 += 1, R13543 += 1 };
  s0 -> s3 [0, 65535] { R13543 += 1, R13498 += 1, R13499 += 1 };
  s0 -> s4 [75, 75] { R13543 += 1, R13499 += 1, R13228 += 1, R13229 += 1 };
  s0 -> s5 [75, 75] { R13543 += 1, R13499 += 1, R13228 += 1, R13229 += 1 };
  s0 -> s6 [75, 75] { R13543 += 1, R13499 += 1, R13229 += 1, R13230 += 1 };
  s0 -> s7 [75, 75] { R13543 += 1, R13499 += 1, R13229 += 1, R13230 += 1 };
  s0 -> s1 [76, 65535] { R13543 += 1, R13499 += 1, R13228 += 1, R13229 += 1 };
  s0 -> s2 [76, 65535] { R13543 += 1, R13499 += 1, R13229 += 1, R13230 += 1 };
  s1 -> s1 [0, 74] { R13543 += 1, R13499 += 1, R13228 += 1, R13229 += 1 };
  s1 -> s2 [0, 74] { R13543 += 1, R13499 += 1, R13229 += 1, R13230 += 1 };
  s1 -> s4 [75, 75] { R13543 += 1, R13499 += 1, R13228 += 1, R13229 += 1 };
  s1 -> s5 [75, 75] { R13543 += 1, R13499 += 1, R13228 += 1, R13229 += 1 };
  s1 -> s6 [75, 75] { R13543 += 1, R13499 += 1, R13229 += 1, R13230 += 1 };
  s1 -> s7 [75, 75] { R13543 += 1, R13499 += 1, R13229 += 1, R13230 += 1 };
  s1 -> s1 [76, 65535] { R13543 += 1, R13499 += 1, R13228 += 1, R13229 += 1 };
  s1 -> s2 [76, 65535] { R13543 += 1, R13499 += 1, R13229 += 1, R13230 += 1 };
  s2 -> s2 [0, 74] { R13543 += 1, R13499 += 1, R13229 += 1, R13230 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R13543 += 1 };
  s2 -> s6 [75, 75] { R13543 += 1, R13499 += 1, R13229 += 1, R13230 += 1 };
  s2 -> s7 [75, 75] { R13543 += 1, R13499 += 1, R13229 += 1, R13230 += 1 };
  s2 -> s2 [76, 65535] { R13543 += 1, R13499 += 1, R13229 += 1, R13230 += 1 };
  s3 -> s1 [0, 74] { R13543 += 1, R13499 += 1, R13228 += 1, R13229 += 1 };
  s3 -> s2 [0, 74] { R13543 += 1, R13499 += 1, R13229 += 1, R13230 += 1 };
  s3 -> s3 [0, 65535] { R13543 += 1, R13498 += 1, R13499 += 1 };
  s3 -> s4 [75, 75] { R13543 += 1, R13499 += 1, R13228 += 1, R13229 += 1 };
  s3 -> s5 [75, 75] { R13543 += 1, R13499 += 1, R13228 += 1, R13229 += 1 };
  s3 -> s6 [75, 75] { R13543 += 1, R13499 += 1, R13229 += 1, R13230 += 1 };
  s3 -> s7 [75, 75] { R13543 += 1, R13499 += 1, R13229 += 1, R13230 += 1 };
  s3 -> s1 [76, 65535] { R13543 += 1, R13499 += 1, R13228 += 1, R13229 += 1 };
  s3 -> s2 [76, 65535] { R13543 += 1, R13499 += 1, R13229 += 1, R13230 += 1 };
  s4 -> s4 [0, 65535] { R13543 += 1, R13499 += 1, R13228 += 1, R13229 += 1 };
  s4 -> s6 [0, 65535] { R13543 += 1, R13499 += 1, R13229 += 1, R13230 += 1 };
  s6 -> s9 [0, 65535] { R13543 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R13543 += 1, R13499 += 1, R13229 += 1, R13230 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R13543 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R13543 += 1 };
  s9 -> s8 [0, 65535];
  accepting s8, s2, s9, s6, s7;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 74] { R13545 += 1, R13501 += 1, R13442 += 1, R13443 += 1 };
  s0 -> s2 [0, 74] { R13545 += 1, R13501 += 1, R13443 += 1 };
  s0 -> s0 [0, 65535] { R13544 += 1, R13545 += 1 };
  s0 -> s3 [0, 65535] { R13545 += 1, R13500 += 1, R13501 += 1 };
  s0 -> s4 [75, 75] { R13545 += 1, R13501 += 1, R13442 += 1, R13443 += 1 };
  s0 -> s5 [75, 75] { R13545 += 1, R13501 += 1, R13443 += 1 };
  s0 -> s6 [75, 75] { R13545 += 1, R13501 += 1, R13442 += 1, R13443 += 1 };
  s0 -> s7 [75, 75] { R13545 += 1, R13501 += 1, R13443 += 1 };
  s0 -> s2 [76, 86] { R13545 += 1, R13501 += 1, R13443 += 1 };
  s0 -> s1 [76, 65535] { R13545 += 1, R13501 += 1, R13442 += 1, R13443 += 1 };
  s0 -> s8 [87, 87] { R13545 += 1, R13501 += 1, R13443 += 1 };
  s0 -> s2 [90, 65535] { R13545 += 1, R13501 += 1, R13443 += 1 };
  s1 -> s1 [0, 74] { R13545 += 1, R13501 += 1, R13442 += 1, R13443 += 1 };
  s1 -> s2 [0, 74] { R13545 += 1, R13501 += 1, R13443 += 1 };
  s1 -> s4 [75, 75] { R13545 += 1, R13501 += 1, R13442 += 1, R13443 += 1 };
  s1 -> s5 [75, 75] { R13545 += 1, R13501 += 1, R13443 += 1 };
  s1 -> s6 [75, 75] { R13545 += 1, R13501 += 1, R13442 += 1, R13443 += 1 };
  s1 -> s7 [75, 75] { R13545 += 1, R13501 += 1, R13443 += 1 };
  s1 -> s2 [76, 86] { R13545 += 1, R13501 += 1, R13443 += 1 };
  s1 -> s1 [76, 65535] { R13545 += 1, R13501 += 1, R13442 += 1, R13443 += 1 };
  s1 -> s8 [87, 87] { R13545 += 1, R13501 += 1, R13443 += 1 };
  s1 -> s2 [90, 65535] { R13545 += 1, R13501 += 1, R13443 += 1 };
  s2 -> s2 [0, 74] { R13545 += 1, R13501 += 1, R13443 += 1 };
  s2 -> s5 [75, 75] { R13545 += 1, R13501 += 1 };
  s2 -> s7 [75, 75] { R13545 += 1, R13501 += 1 };
  s2 -> s2 [76, 86] { R13545 += 1, R13501 += 1, R13443 += 1 };
  s2 -> s2 [76, 65535] { R13545 += 1, R13501 += 1 };
  s2 -> s8 [87, 87] { R13545 += 1, R13501 += 1, R13443 += 1 };
  s2 -> s2 [90, 65535] { R13545 += 1, R13501 += 1, R13443 += 1 };
  s3 -> s1 [0, 74] { R13545 += 1, R13501 += 1, R13442 += 1, R13443 += 1 };
  s3 -> s2 [0, 74] { R13545 += 1, R13501 += 1, R13443 += 1 };
  s3 -> s3 [0, 65535] { R13545 += 1, R13500 += 1, R13501 += 1 };
  s3 -> s4 [75, 75] { R13545 += 1, R13501 += 1, R13442 += 1, R13443 += 1 };
  s3 -> s5 [75, 75] { R13545 += 1, R13501 += 1, R13443 += 1 };
  s3 -> s6 [75, 75] { R13545 += 1, R13501 += 1, R13442 += 1, R13443 += 1 };
  s3 -> s7 [75, 75] { R13545 += 1, R13501 += 1, R13443 += 1 };
  s3 -> s2 [76, 86] { R13545 += 1, R13501 += 1, R13443 += 1 };
  s3 -> s1 [76, 65535] { R13545 += 1, R13501 += 1, R13442 += 1, R13443 += 1 };
  s3 -> s8 [87, 87] { R13545 += 1, R13501 += 1, R13443 += 1 };
  s3 -> s2 [90, 65535] { R13545 += 1, R13501 += 1, R13443 += 1 };
  s4 -> s7 [0, 86] { R13545 += 1, R13501 += 1, R13443 += 1 };
  s4 -> s4 [0, 65535] { R13545 += 1, R13501 += 1, R13442 += 1, R13443 += 1 };
  s4 -> s11 [87, 87] { R13545 += 1, R13501 += 1, R13443 += 1 };
  s4 -> s7 [90, 65535] { R13545 += 1, R13501 += 1, R13443 += 1 };
  s7 -> s7 [0, 86] { R13545 += 1, R13501 += 1, R13443 += 1 };
  s7 -> s7 [0, 65535] { R13545 += 1, R13501 += 1 };
  s7 -> s11 [87, 87] { R13545 += 1, R13501 += 1, R13443 += 1 };
  s7 -> s7 [90, 65535] { R13545 += 1, R13501 += 1, R13443 += 1 };
  s8 -> s8 [0, 74] { R13545 += 1, R13501 += 1, R13443 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R13545 += 1 };
  s8 -> s10 [75, 75] { R13545 += 1, R13501 += 1 };
  s8 -> s11 [75, 75] { R13545 += 1, R13501 += 1 };
  s8 -> s8 [76, 87] { R13545 += 1, R13501 += 1, R13443 += 1 };
  s8 -> s8 [76, 65535] { R13545 += 1, R13501 += 1 };
  s8 -> s8 [90, 65535] { R13545 += 1, R13501 += 1, R13443 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R13545 += 1 };
  s11 -> s11 [0, 87] { R13545 += 1, R13501 += 1, R13443 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s12 [0, 65535] { R13545 += 1 };
  s11 -> s11 [0, 65535] { R13545 += 1, R13501 += 1 };
  s11 -> s11 [90, 65535] { R13545 += 1, R13501 += 1, R13443 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R13545 += 1 };
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [107, 107];
  accepting s1;
};
};
constraint R1 = R13461 && R2 = R13545 && R20 - R13545 = -1 && R21 = R13545 && R22 - R13545 = -1 && R23 = R13545 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R12805 + -1*R12803 - R53 = 0 && R52 + R12804 + R12802 = 0 && R13460 = 0 && R13486 = 0 && R13487 = 0 && R13492 = 0 && R13493 = 0 && R13496 = 0 && R13497 = 0 && R13498 = 0 && R13499 = 0 && R13500 = 0 && R13501 = 0 && R13502 = 0 && R13503 = R13545 && R13504 = 0 && R13505 = R13545 && R13506 = 0 && R13507 = R13545 && R13508 = 0 && R13509 = R13545 && R13510 = 0 && R13511 = R13545 && R13512 = 0 && R13513 = R13545 && R13514 = 0 && R13515 = R13545 && R13516 = 0 && R13517 = R13545 && R13518 = 0 && R13519 = R13545 && R13520 = 0 && R13521 = R13545 && R13522 = 0 && R13523 = R13545 && R13524 = 0 && R13525 = R13545 && R13526 = 0 && R13527 = R13545 && R13528 = 0 && R13529 = R13545 && R13530 = 0 && R13531 = R13545 && R13532 = 0 && R13533 = R13545 && R13534 = 0 && R13535 = R13545 && R13536 = 0 && R13537 = R13545 && R13538 = 0 && R13539 = R13545 && R13540 = 0 && R13541 = R13545 && R13542 = 0 && R13543 = R13545 && R13544 = 0 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R12805 + -1*R12803 - R53 < 1 && -1 < R13461 && 0 < R13545 && (R48 + R11531 + R11528 != 0 || ((R42 + R11524 + R11522 != 0 || R43 + R11525 + R11523 + -1*R12805 + -1*R12803 - R53 = 0 || R53 + R12805 + R12803 < 1) && (R42 + R11524 + R11522 = 0 || R53 + R12805 + R12803 < 1))) && (R48 + R11531 + R11528 != 0 || ((R46 + R11529 + R11526 != 0 || R47 + R11530 + R11527 + -1*R12805 + -1*R12803 - R53 = 0 || R53 + R12805 + R12803 < 1) && (R46 + R11529 + R11526 = 0 || R53 + R12805 + R12803 < 1))) && (R13446 != 0 || R13447 = R13461 || (R17 = 0 && R13461 = 0)) && (R13448 != 0 || R13449 = R13461 || (R17 = 0 && R13461 = 0)) && (R13450 != 0 || R13451 = R13461 || (R17 = 0 && R13461 = 0)) && (R13452 != 0 || R13453 = R13461 || (R17 = 0 && R13461 = 0)) && (R13454 != 0 || R13455 = R13461 || (R17 = 0 && R13461 = 0)) && (R13456 != 0 || R13457 = R13461 || (R17 = 0 && R13461 = 0)) && (R13458 != 0 || R13459 = R13461 || (R17 = 0 && R13461 = 0)) && (R13462 != 0 || R13461 = R13463 || (R17 = 0 && R13461 = 0)) && (R13464 != 0 || R13461 = R13465 || (R17 = 0 && R13461 = 0)) && (R18 = 0 || (R13484 = 0 && R13485 = 0)) && (R18 = 0 || (R13488 = 0 && R13489 = 0)) && (R18 = 0 || (R13490 = 0 && R13491 = 0)) && (R18 = 0 || (R13494 = 0 && R13495 = 0)) && (R19 = 0 || (R13466 = 0 && R13467 = 0)) && (R19 = 0 || (R13468 = 0 && R13469 = 0)) && (R19 = 0 || (R13470 = 0 && R13471 = 0)) && (R19 = 0 || (R13472 = 0 && R13473 = 0)) && (R19 = 0 || (R13474 = 0 && R13475 = 0)) && (R19 = 0 || (R13476 = 0 && R13477 = 0)) && (R19 = 0 || (R13478 = 0 && R13479 = 0)) && (R19 = 0 || (R13480 = 0 && R13481 = 0)) && (R19 = 0 || (R13482 = 0 && R13483 = 0)) && (R48 + R11531 + R11528 = 0 || (R42 + R11524 + R11522 = 0 && R43 + R11525 + R11523 + -1*R12805 + -1*R12803 - R53 = 0)) && (R48 + R11531 + R11528 = 0 || (R46 + R11529 + R11526 = 0 && R47 + R11530 + R11527 + -1*R12805 + -1*R12803 - R53 = 0)) && (R58 + R13233 + R13230 = 0 || (R56 + R13231 + R13228 = 0 && R57 + R13232 + R13229 = 0)) && (R58 + R13233 + R13230 = 0 || (R62 + R13444 + R13442 = 0 && R63 + R13445 + R13443 = 0)) && (R13446 = 0 || (R17 = 0 && R13461 = 0)) && (R13448 = 0 || (R17 = 0 && R13461 = 0)) && (R13450 = 0 || (R17 = 0 && R13461 = 0)) && (R13452 = 0 || (R17 = 0 && R13461 = 0)) && (R13454 = 0 || (R17 = 0 && R13461 = 0)) && (R13456 = 0 || (R17 = 0 && R13461 = 0)) && (R13458 = 0 || (R17 = 0 && R13461 = 0)) && (R13462 = 0 || (R17 = 0 && R13461 = 0)) && (R13464 = 0 || (R17 = 0 && R13461 = 0));
// End of Parikh automata intersection problem
