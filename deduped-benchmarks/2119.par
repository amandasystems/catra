// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R100, R101, R102, R103, R104, R105, R106, R107, R108, R109, R110, R111, R12, R14, R15, R16, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R32, R33, R34, R35, R36, R37, R38, R39, R4, R40, R41, R42, R43, R44, R45, R46, R47, R48, R49, R5, R50, R51, R52, R53, R54, R55, R56, R57, R58, R59, R60, R61, R62, R63, R64, R65, R66, R67, R68, R69, R70, R71, R72, R73, R74, R75, R76, R77, R78, R79, R80, R81, R82, R83, R84, R85, R86, R87, R88, R89, R9, R90, R91, R92, R93, R94, R95, R96, R97, R98, R99;
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [100, 100];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s1 [13, 13] { R25 += 1 };
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 65535] { R27 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s1 -> s1 [0, 65535] { R27 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 64] { R73 += 1 };
  s0 -> s0 [0, 65535] { R72 += 1, R73 += 1 };
  s0 -> s2 [68, 68] { R73 += 1 };
  s0 -> s1 [69, 65535] { R73 += 1 };
  s1 -> s1 [0, 64] { R73 += 1 };
  s1 -> s2 [68, 68] { R73 += 1 };
  s1 -> s1 [69, 65535] { R73 += 1 };
  s2 -> s2 [0, 64] { R73 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [68, 65535] { R73 += 1 };
  accepting s2;
};
automaton value2_6 {
  init s0;
  s0 -> s0 [0, 65535] { R74 += 1, R75 += 1 };
  s0 -> s1 [0, 65535] { R75 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R75 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 67] { R77 += 1 };
  s0 -> s0 [0, 65535] { R76 += 1, R77 += 1 };
  s0 -> s2 [0, 65535] { R77 += 1, R9 += 1 };
  s0 -> s3 [68, 68] { R77 += 1 };
  s0 -> s1 [69, 65535] { R77 += 1 };
  s1 -> s1 [0, 67] { R77 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [68, 68] { R77 += 1 };
  s1 -> s1 [69, 65535] { R77 += 1 };
  s2 -> s1 [0, 67] { R77 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R77 += 1, R9 += 1 };
  s2 -> s3 [68, 68] { R77 += 1 };
  s2 -> s1 [69, 65535] { R77 += 1 };
  s3 -> s3 [0, 65535] { R77 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 8] { R79 += 1, R17 += 1 };
  s0 -> s2 [0, 65535] { R79 += 1, R16 += 1, R17 += 1 };
  s0 -> s0 [0, 65535] { R78 += 1, R79 += 1 };
  s0 -> s3 [9, 13] { R79 += 1, R17 += 1 };
  s0 -> s1 [14, 31] { R79 += 1, R17 += 1 };
  s0 -> s3 [32, 32] { R79 += 1, R17 += 1 };
  s0 -> s1 [33, 65535] { R79 += 1, R17 += 1 };
  s1 -> s1 [0, 65535] { R79 += 1, R17 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R79 += 1 };
  s2 -> s1 [0, 8] { R79 += 1, R17 += 1 };
  s2 -> s2 [0, 65535] { R79 += 1, R16 += 1, R17 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R79 += 1, R17 += 1 };
  s2 -> s1 [14, 31] { R79 += 1, R17 += 1 };
  s2 -> s3 [32, 32] { R79 += 1, R17 += 1 };
  s2 -> s1 [33, 65535] { R79 += 1, R17 += 1 };
  s3 -> s1 [0, 65535] { R79 += 1, R17 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R79 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 65535] { R81 += 1, R18 += 1, R19 += 1 };
  s0 -> s2 [0, 65535] { R81 += 1, R19 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R80 += 1, R81 += 1 };
  s1 -> s1 [0, 65535] { R81 += 1, R18 += 1, R19 += 1 };
  s1 -> s2 [0, 65535] { R81 += 1, R19 += 1, R3 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R81 += 1, R19 += 1, R3 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R81 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R81 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 8] { R83 += 1, R21 += 1 };
  s0 -> s2 [0, 65535] { R83 += 1, R20 += 1, R21 += 1 };
  s0 -> s0 [0, 65535] { R82 += 1, R83 += 1 };
  s0 -> s3 [9, 13] { R83 += 1, R21 += 1 };
  s0 -> s1 [14, 31] { R83 += 1, R21 += 1 };
  s0 -> s3 [32, 32] { R83 += 1, R21 += 1 };
  s0 -> s1 [33, 65535] { R83 += 1, R21 += 1 };
  s1 -> s1 [0, 65535] { R83 += 1, R21 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R83 += 1 };
  s2 -> s1 [0, 8] { R83 += 1, R21 += 1 };
  s2 -> s2 [0, 65535] { R83 += 1, R20 += 1, R21 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R83 += 1, R21 += 1 };
  s2 -> s1 [14, 31] { R83 += 1, R21 += 1 };
  s2 -> s3 [32, 32] { R83 += 1, R21 += 1 };
  s2 -> s1 [33, 65535] { R83 += 1, R21 += 1 };
  s3 -> s1 [0, 65535] { R83 += 1, R21 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R83 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 65535] { R85 += 1, R23 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R84 += 1, R85 += 1 };
  s0 -> s2 [0, 65535] { R85 += 1, R22 += 1, R23 += 1 };
  s1 -> s4 [0, 65535] { R85 += 1 };
  s1 -> s1 [0, 65535] { R85 += 1, R23 += 1, R4 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R85 += 1, R23 += 1, R4 += 1 };
  s2 -> s2 [0, 65535] { R85 += 1, R22 += 1, R23 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R85 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 67] { R87 += 1, R47 += 1 };
  s0 -> s2 [0, 65535] { R87 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R86 += 1, R87 += 1 };
  s0 -> s1 [69, 65535] { R87 += 1, R47 += 1 };
  s1 -> s1 [0, 67] { R87 += 1, R47 += 1 };
  s1 -> s1 [0, 65535] { R87 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [69, 65535] { R87 += 1, R47 += 1 };
  s2 -> s1 [0, 67] { R87 += 1, R47 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R87 += 1, R46 += 1, R47 += 1 };
  s2 -> s1 [69, 65535] { R87 += 1, R47 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 65535] { R89 += 1, R48 += 1, R49 += 1 };
  s0 -> s2 [0, 65535] { R89 += 1, R49 += 1, R14 += 1 };
  s0 -> s0 [0, 65535] { R88 += 1, R89 += 1 };
  s1 -> s1 [0, 65535] { R89 += 1, R48 += 1, R49 += 1 };
  s1 -> s2 [0, 65535] { R89 += 1, R49 += 1, R14 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R89 += 1 };
  s2 -> s2 [0, 65535] { R89 += 1, R49 += 1, R14 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R89 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 68] { R91 += 1, R51 += 1 };
  s0 -> s0 [0, 65535] { R90 += 1, R91 += 1 };
  s0 -> s2 [0, 65535] { R91 += 1, R50 += 1, R51 += 1 };
  s0 -> s3 [82, 82] { R91 += 1, R51 += 1 };
  s0 -> s1 [83, 65535] { R91 += 1, R51 += 1 };
  s1 -> s1 [0, 68] { R91 += 1, R51 += 1 };
  s1 -> s3 [82, 82] { R91 += 1, R51 += 1 };
  s1 -> s1 [83, 65535] { R91 += 1, R51 += 1 };
  s2 -> s1 [0, 68] { R91 += 1, R51 += 1 };
  s2 -> s2 [0, 65535] { R91 += 1, R50 += 1, R51 += 1 };
  s2 -> s3 [82, 82] { R91 += 1, R51 += 1 };
  s2 -> s1 [83, 65535] { R91 += 1, R51 += 1 };
  s3 -> s3 [0, 68] { R91 += 1, R51 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R91 += 1 };
  s3 -> s3 [82, 65535] { R91 += 1, R51 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 65535] { R93 += 1, R53 += 1, R33 += 1 };
  s0 -> s2 [0, 65535] { R93 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R92 += 1, R93 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R93 += 1 };
  s1 -> s1 [0, 65535] { R93 += 1, R53 += 1, R33 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R93 += 1, R53 += 1, R33 += 1 };
  s2 -> s2 [0, 65535] { R93 += 1, R52 += 1, R53 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R93 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 81] { R95 += 1, R55 += 1 };
  s0 -> s2 [0, 65535] { R95 += 1, R55 += 1, R35 += 1 };
  s0 -> s0 [0, 65535] { R94 += 1, R95 += 1 };
  s0 -> s3 [0, 65535] { R95 += 1, R54 += 1, R55 += 1 };
  s0 -> s1 [83, 65535] { R95 += 1, R55 += 1 };
  s1 -> s1 [0, 81] { R95 += 1, R55 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R95 += 1 };
  s1 -> s1 [83, 65535] { R95 += 1, R55 += 1 };
  s2 -> s1 [0, 81] { R95 += 1, R55 += 1 };
  s2 -> s2 [0, 65535] { R95 += 1, R55 += 1, R35 += 1 };
  s2 -> s5 [0, 65535] { R95 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [83, 65535] { R95 += 1, R55 += 1 };
  s3 -> s1 [0, 81] { R95 += 1, R55 += 1 };
  s3 -> s2 [0, 65535] { R95 += 1, R55 += 1, R35 += 1 };
  s3 -> s3 [0, 65535] { R95 += 1, R54 += 1, R55 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [83, 65535] { R95 += 1, R55 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R95 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 81] { R97 += 1, R57 += 1, R39 += 1 };
  s0 -> s2 [0, 65535] { R97 += 1, R57 += 1, R38 += 1, R39 += 1 };
  s0 -> s0 [0, 65535] { R96 += 1, R97 += 1 };
  s0 -> s3 [0, 65535] { R97 += 1, R56 += 1, R57 += 1 };
  s0 -> s4 [82, 82] { R97 += 1, R57 += 1, R39 += 1 };
  s0 -> s1 [83, 65535] { R97 += 1, R57 += 1, R39 += 1 };
  s1 -> s1 [0, 81] { R97 += 1, R57 += 1, R39 += 1 };
  s1 -> s4 [82, 82] { R97 += 1, R57 += 1, R39 += 1 };
  s1 -> s1 [83, 65535] { R97 += 1, R57 += 1, R39 += 1 };
  s2 -> s1 [0, 81] { R97 += 1, R57 += 1, R39 += 1 };
  s2 -> s2 [0, 65535] { R97 += 1, R57 += 1, R38 += 1, R39 += 1 };
  s2 -> s4 [82, 82] { R97 += 1, R57 += 1, R39 += 1 };
  s2 -> s1 [83, 65535] { R97 += 1, R57 += 1, R39 += 1 };
  s3 -> s1 [0, 81] { R97 += 1, R57 += 1, R39 += 1 };
  s3 -> s2 [0, 65535] { R97 += 1, R57 += 1, R38 += 1, R39 += 1 };
  s3 -> s3 [0, 65535] { R97 += 1, R56 += 1, R57 += 1 };
  s3 -> s4 [82, 82] { R97 += 1, R57 += 1, R39 += 1 };
  s3 -> s1 [83, 65535] { R97 += 1, R57 += 1, R39 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R97 += 1, R57 += 1, R39 += 1 };
  s4 -> s6 [0, 65535] { R97 += 1, R57 += 1 };
  s4 -> s7 [0, 65535] { R97 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R97 += 1, R57 += 1 };
  s6 -> s7 [0, 65535] { R97 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R97 += 1 };
  accepting s4, s5, s6, s7;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R99 += 1, R59 += 1, R44 += 1, R45 += 1 };
  s0 -> s2 [0, 65535] { R99 += 1, R59 += 1, R43 += 1, R44 += 1 };
  s0 -> s0 [0, 65535] { R98 += 1, R99 += 1 };
  s0 -> s3 [0, 65535] { R99 += 1, R58 += 1, R59 += 1 };
  s1 -> s1 [0, 65535] { R99 += 1, R59 += 1, R44 += 1, R45 += 1 };
  s1 -> s6 [0, 65535] { R99 += 1, R59 += 1 };
  s1 -> s5 [0, 65535] { R99 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R99 += 1, R59 += 1, R44 += 1, R45 += 1 };
  s2 -> s5 [0, 65535] { R99 += 1 };
  s2 -> s2 [0, 65535] { R99 += 1, R59 += 1, R43 += 1, R44 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R99 += 1, R59 += 1, R44 += 1, R45 += 1 };
  s3 -> s2 [0, 65535] { R99 += 1, R59 += 1, R43 += 1, R44 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R99 += 1, R58 += 1, R59 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R99 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R99 += 1, R59 += 1 };
  s6 -> s5 [0, 65535] { R99 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 65535] { R101 += 1, R61 += 1, R15 += 1 };
  s0 -> s0 [0, 65535] { R100 += 1, R101 += 1 };
  s0 -> s2 [0, 65535] { R101 += 1, R60 += 1, R61 += 1 };
  s1 -> s1 [0, 65535] { R101 += 1, R61 += 1, R15 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R101 += 1 };
  s2 -> s1 [0, 65535] { R101 += 1, R61 += 1, R15 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R101 += 1, R60 += 1, R61 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R101 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 67] { R103 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R102 += 1, R103 += 1 };
  s0 -> s2 [0, 65535] { R103 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [68, 68] { R103 += 1, R63 += 1 };
  s0 -> s4 [68, 68] { R103 += 1, R63 += 1 };
  s0 -> s1 [83, 65535] { R103 += 1, R63 += 1 };
  s1 -> s1 [0, 67] { R103 += 1, R63 += 1 };
  s1 -> s1 [0, 65535] { R103 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [68, 68] { R103 += 1, R63 += 1 };
  s1 -> s4 [68, 68] { R103 += 1, R63 += 1 };
  s1 -> s1 [83, 65535] { R103 += 1, R63 += 1 };
  s2 -> s1 [0, 67] { R103 += 1, R63 += 1 };
  s2 -> s2 [0, 65535] { R103 += 1, R62 += 1, R63 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [68, 68] { R103 += 1, R63 += 1 };
  s2 -> s4 [68, 68] { R103 += 1, R63 += 1 };
  s2 -> s1 [83, 65535] { R103 += 1, R63 += 1 };
  s3 -> s3 [0, 65535] { R103 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 68] { R103 += 1, R63 += 1 };
  s4 -> s4 [0, 65535] { R103 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [83, 65535] { R103 += 1, R63 += 1 };
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 67] { R105 += 1, R65 += 1, R32 += 1 };
  s0 -> s0 [0, 65535] { R104 += 1, R105 += 1 };
  s0 -> s2 [0, 65535] { R105 += 1, R64 += 1, R65 += 1 };
  s0 -> s3 [68, 68] { R105 += 1, R65 += 1, R32 += 1 };
  s0 -> s4 [68, 68] { R105 += 1, R65 += 1, R32 += 1 };
  s0 -> s1 [69, 65535] { R105 += 1, R65 += 1, R32 += 1 };
  s1 -> s1 [0, 67] { R105 += 1, R65 += 1, R32 += 1 };
  s1 -> s1 [0, 65535] { R105 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [68, 68] { R105 += 1, R65 += 1, R32 += 1 };
  s1 -> s4 [68, 68] { R105 += 1, R65 += 1, R32 += 1 };
  s1 -> s1 [69, 65535] { R105 += 1, R65 += 1, R32 += 1 };
  s2 -> s1 [0, 67] { R105 += 1, R65 += 1, R32 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R105 += 1, R64 += 1, R65 += 1 };
  s2 -> s3 [68, 68] { R105 += 1, R65 += 1, R32 += 1 };
  s2 -> s4 [68, 68] { R105 += 1, R65 += 1, R32 += 1 };
  s2 -> s1 [69, 65535] { R105 += 1, R65 += 1, R32 += 1 };
  s3 -> s6 [0, 65535] { R105 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R105 += 1, R65 += 1, R32 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R105 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R105 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 67] { R107 += 1, R67 += 1, R34 += 1 };
  s0 -> s2 [0, 65535] { R107 += 1, R66 += 1, R67 += 1 };
  s0 -> s0 [0, 65535] { R106 += 1, R107 += 1 };
  s0 -> s3 [68, 68] { R107 += 1, R67 += 1, R34 += 1 };
  s0 -> s4 [68, 68] { R107 += 1, R67 += 1, R34 += 1 };
  s0 -> s1 [69, 65535] { R107 += 1, R67 += 1, R34 += 1 };
  s1 -> s1 [0, 67] { R107 += 1, R67 += 1, R34 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R107 += 1 };
  s1 -> s3 [68, 68] { R107 += 1, R67 += 1, R34 += 1 };
  s1 -> s4 [68, 68] { R107 += 1, R67 += 1, R34 += 1 };
  s1 -> s1 [69, 65535] { R107 += 1, R67 += 1, R34 += 1 };
  s2 -> s1 [0, 67] { R107 += 1, R67 += 1, R34 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R107 += 1, R66 += 1, R67 += 1 };
  s2 -> s3 [68, 68] { R107 += 1, R67 += 1, R34 += 1 };
  s2 -> s4 [68, 68] { R107 += 1, R67 += 1, R34 += 1 };
  s2 -> s1 [69, 65535] { R107 += 1, R67 += 1, R34 += 1 };
  s3 -> s6 [0, 65535] { R107 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R107 += 1, R67 += 1, R34 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R107 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R107 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 67] { R109 += 1, R69 += 1, R36 += 1, R37 += 1 };
  s0 -> s0 [0, 65535] { R108 += 1, R109 += 1 };
  s0 -> s2 [0, 65535] { R109 += 1, R68 += 1, R69 += 1 };
  s0 -> s3 [68, 68] { R109 += 1, R69 += 1, R36 += 1, R37 += 1 };
  s0 -> s4 [68, 68] { R109 += 1, R69 += 1, R36 += 1, R37 += 1 };
  s0 -> s1 [69, 65535] { R109 += 1, R69 += 1, R36 += 1, R37 += 1 };
  s1 -> s1 [0, 67] { R109 += 1, R69 += 1, R36 += 1, R37 += 1 };
  s1 -> s1 [0, 65535] { R109 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [68, 68] { R109 += 1, R69 += 1, R36 += 1, R37 += 1 };
  s1 -> s4 [68, 68] { R109 += 1, R69 += 1, R36 += 1, R37 += 1 };
  s1 -> s1 [69, 65535] { R109 += 1, R69 += 1, R36 += 1, R37 += 1 };
  s2 -> s1 [0, 67] { R109 += 1, R69 += 1, R36 += 1, R37 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R109 += 1, R68 += 1, R69 += 1 };
  s2 -> s3 [68, 68] { R109 += 1, R69 += 1, R36 += 1, R37 += 1 };
  s2 -> s4 [68, 68] { R109 += 1, R69 += 1, R36 += 1, R37 += 1 };
  s2 -> s1 [69, 65535] { R109 += 1, R69 += 1, R36 += 1, R37 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R109 += 1 };
  s4 -> s5 [0, 65535] { R109 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R109 += 1, R69 += 1, R36 += 1, R37 += 1 };
  s5 -> s5 [0, 65535] { R109 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 67] { R111 += 1, R71 += 1, R40 += 1, R41 += 1 };
  s0 -> s2 [0, 65535] { R111 += 1, R70 += 1, R71 += 1 };
  s0 -> s0 [0, 65535] { R110 += 1, R111 += 1 };
  s0 -> s3 [68, 68] { R111 += 1, R71 += 1, R40 += 1, R41 += 1 };
  s0 -> s4 [68, 68] { R111 += 1, R71 += 1, R40 += 1, R41 += 1 };
  s0 -> s1 [69, 65535] { R111 += 1, R71 += 1, R40 += 1, R41 += 1 };
  s1 -> s1 [0, 67] { R111 += 1, R71 += 1, R40 += 1, R41 += 1 };
  s1 -> s1 [0, 65535] { R111 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [68, 68] { R111 += 1, R71 += 1, R40 += 1, R41 += 1 };
  s1 -> s4 [68, 68] { R111 += 1, R71 += 1, R40 += 1, R41 += 1 };
  s1 -> s1 [69, 65535] { R111 += 1, R71 += 1, R40 += 1, R41 += 1 };
  s2 -> s1 [0, 67] { R111 += 1, R71 += 1, R40 += 1, R41 += 1 };
  s2 -> s2 [0, 65535] { R111 += 1, R70 += 1, R71 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [68, 68] { R111 += 1, R71 += 1, R40 += 1, R41 += 1 };
  s2 -> s4 [68, 68] { R111 += 1, R71 += 1, R40 += 1, R41 += 1 };
  s2 -> s1 [69, 65535] { R111 += 1, R71 += 1, R40 += 1, R41 += 1 };
  s3 -> s6 [0, 65535] { R111 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R111 += 1, R71 += 1, R40 += 1, R41 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R111 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R111 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R1 = R59 && R2 = R111 && R16 - R59 = -1 && R17 = R59 && R18 - R59 = -1 && R19 = R59 && R20 = 0 && R21 = 1 && R22 = 0 && R23 = 1 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R33 + R32 + -1*R39 + -1*R37 = 0 && R38 + R36 = 0 && R46 = 0 && R47 = R59 && R48 = 0 && R49 = R59 && R50 = 0 && R51 = R59 && R52 = 0 && R53 = R59 && R54 = 0 && R55 = R59 && R56 = 0 && R57 = R59 && R58 = 0 && R72 = 1 && R73 = R111 && R74 = 1 && R75 = R111 && R76 = 1 && R77 = R111 && R78 = 1 && R79 = R111 && R80 = 1 && R81 = R111 && R82 = 1 && R83 = R111 && R84 = 1 && R85 = R111 && R86 = 1 && R87 = R111 && R88 = 1 && R89 = R111 && R90 = 1 && R91 = R111 && R92 = 1 && R93 = R111 && R94 = 1 && R95 = R111 && R96 = 1 && R97 = R111 && R98 = 1 && R99 = R111 && R100 = 1 && R101 = R111 && R102 = 1 && R103 = R111 && R104 = 1 && R105 = R111 && R106 = 1 && R107 = R111 && R108 = 1 && R109 = R111 && R110 = 1 && R9 < 1 && R12 < 1 && R35 + R34 < 1 && -1*R39 + -1*R37 < 1 && 0 < R59 && 0 < R111 && (R39 + R37 != 0 || R45 + R42 = 0 || (R43 + R40 = 0 && R44 + R41 = 0)) && (R43 + R40 != 0 || R39 + R37 + -1*R44 + -1*R41 = 0 || R39 + R37 < 1) && (R15 = 0 || (R60 = 0 && R61 = 0)) && (R15 = 0 || (R62 = 0 && R63 = 0)) && (R15 = 0 || (R64 = 0 && R65 = 0)) && (R15 = 0 || (R66 = 0 && R67 = 0)) && (R15 = 0 || (R68 = 0 && R69 = 0)) && (R15 = 0 || (R70 = 0 && R71 = 0)) && (R43 + R40 = 0 || R39 + R37 < 1);
// End of Parikh automata intersection problem
