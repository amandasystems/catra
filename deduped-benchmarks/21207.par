// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R12, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R2620, R2621, R2622, R2623, R27, R3, R3468, R3469, R3470, R3471, R3472, R3473, R3578, R3579, R3580, R3581, R3582, R3583, R3584, R3585, R3586, R3587, R3588, R3589, R3590, R3591, R3592, R3593, R3594, R3595, R3596, R3597, R3598, R3599, R3600, R3601, R3602, R3603, R3604, R3605, R3606, R3607, R3608, R3609, R3610, R3611, R3612, R3613, R3614, R3615, R3616, R3617, R3618, R3619, R3620, R3621, R3622, R3623, R3624, R3625, R3626, R3627, R3628, R3629, R3630, R3631, R3632, R3633, R3634, R3635, R3636, R3637, R3638, R3639, R3640, R3641, R3642, R3643, R3644, R3645, R3646, R3647, R3648, R3649, R3650, R3651, R3652, R3653, R3654, R3655, R3656, R3657, R3658, R3659, R3660, R3661, R3662, R3663, R3664, R3665, R3666, R3667, R3668, R3669, R3670, R3671, R3672, R3673, R3674, R3675, R3676, R3677, R3678, R3679, R3680, R3681, R38, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R70, R71, R72, R73, R74, R75, R76, R77, R78, R79, R8;
synchronised {  // Automata constraining P64
automaton P64_0 {
  init s0;
  s0 -> s1 [119, 119];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [75, 75];
  s0 -> s0 [76, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [75, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 74];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [75, 75];
  s0 -> s1 [76, 65535];
  s1 -> s1 [0, 74];
  s1 -> s2 [75, 75];
  s1 -> s1 [76, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s1 [0, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s1 [0, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R3603 += 1, R19 += 1 };
  s0 -> s0 [0, 65535] { R3602 += 1, R3603 += 1 };
  s1 -> s1 [0, 65535] { R3603 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 74] { R3605 += 1 };
  s0 -> s0 [0, 65535] { R3604 += 1, R3605 += 1 };
  s0 -> s2 [75, 75] { R3605 += 1 };
  s0 -> s3 [75, 75] { R3605 += 1 };
  s0 -> s1 [88, 65535] { R3605 += 1 };
  s1 -> s1 [0, 74] { R3605 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R3605 += 1 };
  s1 -> s3 [75, 75] { R3605 += 1 };
  s1 -> s1 [88, 65535] { R3605 += 1 };
  s2 -> s2 [0, 75] { R3605 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [88, 65535] { R3605 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 74] { R3607 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R3606 += 1, R3607 += 1 };
  s0 -> s2 [75, 75] { R3607 += 1, R38 += 1 };
  s0 -> s3 [75, 75] { R3607 += 1, R38 += 1 };
  s0 -> s1 [76, 65535] { R3607 += 1, R38 += 1 };
  s1 -> s1 [0, 74] { R3607 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R3607 += 1, R38 += 1 };
  s1 -> s3 [75, 75] { R3607 += 1, R38 += 1 };
  s1 -> s1 [76, 65535] { R3607 += 1, R38 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3607 += 1, R38 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 74] { R3609 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R3608 += 1, R3609 += 1 };
  s0 -> s2 [75, 75] { R3609 += 1, R40 += 1 };
  s0 -> s3 [75, 75] { R3609 += 1, R40 += 1 };
  s0 -> s1 [76, 65535] { R3609 += 1, R40 += 1 };
  s1 -> s1 [0, 74] { R3609 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R3609 += 1, R40 += 1 };
  s1 -> s3 [75, 75] { R3609 += 1, R40 += 1 };
  s1 -> s1 [76, 65535] { R3609 += 1, R40 += 1 };
  s2 -> s2 [0, 65535] { R3609 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 74] { R3611 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R3610 += 1, R3611 += 1 };
  s0 -> s2 [75, 75] { R3611 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [75, 75] { R3611 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [76, 65535] { R3611 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 74] { R3611 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R3611 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [75, 75] { R3611 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [76, 65535] { R3611 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3611 += 1, R42 += 1, R43 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 74] { R3613 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R3612 += 1, R3613 += 1 };
  s0 -> s2 [75, 75] { R3613 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [75, 75] { R3613 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [76, 65535] { R3613 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 74] { R3613 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R3613 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [75, 75] { R3613 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [76, 65535] { R3613 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3613 += 1, R46 += 1, R47 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 74] { R3615 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R3614 += 1, R3615 += 1 };
  s0 -> s2 [75, 75] { R3615 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [75, 75] { R3615 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [76, 65535] { R3615 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 74] { R3615 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R3615 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [75, 75] { R3615 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [76, 65535] { R3615 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535] { R3615 += 1, R52 += 1, R53 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 74] { R3617 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R3616 += 1, R3617 += 1 };
  s0 -> s2 [75, 75] { R3617 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [75, 75] { R3617 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [76, 65535] { R3617 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 74] { R3617 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R3617 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [75, 75] { R3617 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [76, 65535] { R3617 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535] { R3617 += 1, R56 += 1, R57 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 74] { R3619 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R3618 += 1, R3619 += 1 };
  s0 -> s2 [75, 75] { R3619 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [75, 75] { R3619 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [76, 65535] { R3619 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 74] { R3619 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R3619 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [75, 75] { R3619 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [76, 65535] { R3619 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3619 += 1, R62 += 1, R63 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 74] { R3639 += 1 };
  s0 -> s0 [0, 65535] { R3638 += 1, R3639 += 1 };
  s0 -> s2 [75, 75] { R3639 += 1 };
  s0 -> s1 [76, 65535] { R3639 += 1 };
  s1 -> s1 [0, 74] { R3639 += 1 };
  s1 -> s2 [75, 75] { R3639 += 1 };
  s1 -> s1 [76, 65535] { R3639 += 1 };
  s2 -> s2 [0, 65535] { R3639 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R3641 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R3640 += 1, R3641 += 1 };
  s1 -> s1 [0, 65535] { R3641 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 74] { R3643 += 1 };
  s0 -> s2 [0, 65535] { R3643 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R3642 += 1, R3643 += 1 };
  s0 -> s3 [75, 75] { R3643 += 1 };
  s0 -> s1 [76, 65535] { R3643 += 1 };
  s1 -> s1 [0, 74] { R3643 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [75, 75] { R3643 += 1 };
  s1 -> s1 [76, 65535] { R3643 += 1 };
  s2 -> s1 [0, 74] { R3643 += 1 };
  s2 -> s2 [0, 65535] { R3643 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [75, 75] { R3643 += 1 };
  s2 -> s1 [76, 65535] { R3643 += 1 };
  s3 -> s3 [0, 65535] { R3643 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 74] { R3645 += 1, R3583 += 1 };
  s0 -> s2 [0, 65535] { R3645 += 1, R3582 += 1, R3583 += 1 };
  s0 -> s0 [0, 65535] { R3644 += 1, R3645 += 1 };
  s0 -> s1 [76, 65535] { R3645 += 1, R3583 += 1 };
  s1 -> s1 [0, 74] { R3645 += 1, R3583 += 1 };
  s1 -> s1 [0, 65535] { R3645 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [76, 65535] { R3645 += 1, R3583 += 1 };
  s2 -> s1 [0, 74] { R3645 += 1, R3583 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3645 += 1, R3582 += 1, R3583 += 1 };
  s2 -> s1 [76, 65535] { R3645 += 1, R3583 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R3647 += 1, R3585 += 1, R17 += 1 };
  s0 -> s0 [0, 65535] { R3646 += 1, R3647 += 1 };
  s0 -> s2 [0, 65535] { R3647 += 1, R3584 += 1, R3585 += 1 };
  s1 -> s4 [0, 65535] { R3647 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3647 += 1, R3585 += 1, R17 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3647 += 1, R3585 += 1, R17 += 1 };
  s2 -> s2 [0, 65535] { R3647 += 1, R3584 += 1, R3585 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3647 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 75] { R3649 += 1, R3587 += 1 };
  s0 -> s2 [0, 65535] { R3649 += 1, R3586 += 1, R3587 += 1 };
  s0 -> s0 [0, 65535] { R3648 += 1, R3649 += 1 };
  s0 -> s1 [87, 65535] { R3649 += 1, R3587 += 1 };
  s1 -> s1 [0, 75] { R3649 += 1, R3587 += 1 };
  s1 -> s1 [0, 65535] { R3649 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [87, 65535] { R3649 += 1, R3587 += 1 };
  s2 -> s1 [0, 75] { R3649 += 1, R3587 += 1 };
  s2 -> s2 [0, 65535] { R3649 += 1, R3586 += 1, R3587 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [87, 65535] { R3649 += 1, R3587 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R3651 += 1, R3588 += 1, R3589 += 1 };
  s0 -> s0 [0, 65535] { R3650 += 1, R3651 += 1 };
  s0 -> s2 [0, 65535] { R3651 += 1, R3589 += 1, R67 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3651 += 1, R3588 += 1, R3589 += 1 };
  s1 -> s2 [0, 65535] { R3651 += 1, R3589 += 1, R67 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3651 += 1, R3589 += 1, R67 += 1 };
  s2 -> s4 [0, 65535] { R3651 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3651 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 86] { R3653 += 1, R3591 += 1 };
  s0 -> s2 [0, 65535] { R3653 += 1, R3591 += 1, R69 += 1 };
  s0 -> s0 [0, 65535] { R3652 += 1, R3653 += 1 };
  s0 -> s3 [0, 65535] { R3653 += 1, R3590 += 1, R3591 += 1 };
  s0 -> s1 [88, 65535] { R3653 += 1, R3591 += 1 };
  s1 -> s1 [0, 86] { R3653 += 1, R3591 += 1 };
  s1 -> s1 [0, 65535] { R3653 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [88, 65535] { R3653 += 1, R3591 += 1 };
  s2 -> s1 [0, 86] { R3653 += 1, R3591 += 1 };
  s2 -> s2 [0, 65535] { R3653 += 1, R3591 += 1, R69 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R3653 += 1 };
  s2 -> s1 [88, 65535] { R3653 += 1, R3591 += 1 };
  s3 -> s1 [0, 86] { R3653 += 1, R3591 += 1 };
  s3 -> s2 [0, 65535] { R3653 += 1, R3591 += 1, R69 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3653 += 1, R3590 += 1, R3591 += 1 };
  s3 -> s1 [88, 65535] { R3653 += 1, R3591 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3653 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 86] { R3655 += 1, R3593 += 1, R73 += 1 };
  s0 -> s2 [0, 65535] { R3655 += 1, R3593 += 1, R72 += 1, R73 += 1 };
  s0 -> s3 [0, 65535] { R3655 += 1, R3592 += 1, R3593 += 1 };
  s0 -> s0 [0, 65535] { R3654 += 1, R3655 += 1 };
  s0 -> s1 [88, 65535] { R3655 += 1, R3593 += 1, R73 += 1 };
  s1 -> s1 [0, 86] { R3655 += 1, R3593 += 1, R73 += 1 };
  s1 -> s1 [0, 65535] { R3655 += 1, R3593 += 1 };
  s1 -> s5 [0, 65535] { R3655 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [88, 65535] { R3655 += 1, R3593 += 1, R73 += 1 };
  s2 -> s1 [0, 86] { R3655 += 1, R3593 += 1, R73 += 1 };
  s2 -> s2 [0, 65535] { R3655 += 1, R3593 += 1, R72 += 1, R73 += 1 };
  s2 -> s5 [0, 65535] { R3655 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [88, 65535] { R3655 += 1, R3593 += 1, R73 += 1 };
  s3 -> s1 [0, 86] { R3655 += 1, R3593 += 1, R73 += 1 };
  s3 -> s2 [0, 65535] { R3655 += 1, R3593 += 1, R72 += 1, R73 += 1 };
  s3 -> s3 [0, 65535] { R3655 += 1, R3592 += 1, R3593 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [88, 65535] { R3655 += 1, R3593 += 1, R73 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3655 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R3657 += 1, R3594 += 1, R3595 += 1 };
  s0 -> s2 [0, 65535] { R3657 += 1, R3595 += 1, R77 += 1, R78 += 1 };
  s0 -> s3 [0, 65535] { R3657 += 1, R3595 += 1, R78 += 1, R79 += 1 };
  s0 -> s0 [0, 65535] { R3656 += 1, R3657 += 1 };
  s1 -> s1 [0, 65535] { R3657 += 1, R3594 += 1, R3595 += 1 };
  s1 -> s2 [0, 65535] { R3657 += 1, R3595 += 1, R77 += 1, R78 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [0, 65535] { R3657 += 1, R3595 += 1, R78 += 1, R79 += 1 };
  s2 -> s2 [0, 65535] { R3657 += 1, R3595 += 1, R77 += 1, R78 += 1 };
  s2 -> s5 [0, 65535] { R3657 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R3657 += 1, R3595 += 1, R78 += 1, R79 += 1 };
  s3 -> s4 [0, 65535] { R3657 += 1, R3595 += 1 };
  s3 -> s5 [0, 65535] { R3657 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R3657 += 1, R3595 += 1, R78 += 1, R79 += 1 };
  s4 -> s4 [0, 65535] { R3657 += 1, R3595 += 1 };
  s4 -> s5 [0, 65535] { R3657 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R3657 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 87] { R3659 += 1, R3597 += 1, R2623 += 1 };
  s0 -> s2 [0, 65535] { R3659 += 1, R3597 += 1, R2622 += 1, R2623 += 1 };
  s0 -> s3 [0, 65535] { R3659 += 1, R3596 += 1, R3597 += 1 };
  s0 -> s0 [0, 65535] { R3658 += 1, R3659 += 1 };
  s0 -> s4 [89, 89] { R3659 += 1, R3597 += 1, R2623 += 1 };
  s0 -> s1 [90, 65535] { R3659 += 1, R3597 += 1, R2623 += 1 };
  s1 -> s1 [0, 87] { R3659 += 1, R3597 += 1, R2623 += 1 };
  s1 -> s4 [89, 89] { R3659 += 1, R3597 += 1, R2623 += 1 };
  s1 -> s1 [90, 65535] { R3659 += 1, R3597 += 1, R2623 += 1 };
  s2 -> s1 [0, 87] { R3659 += 1, R3597 += 1, R2623 += 1 };
  s2 -> s2 [0, 65535] { R3659 += 1, R3597 += 1, R2622 += 1, R2623 += 1 };
  s2 -> s4 [89, 89] { R3659 += 1, R3597 += 1, R2623 += 1 };
  s2 -> s1 [90, 65535] { R3659 += 1, R3597 += 1, R2623 += 1 };
  s3 -> s1 [0, 87] { R3659 += 1, R3597 += 1, R2623 += 1 };
  s3 -> s2 [0, 65535] { R3659 += 1, R3597 += 1, R2622 += 1, R2623 += 1 };
  s3 -> s3 [0, 65535] { R3659 += 1, R3596 += 1, R3597 += 1 };
  s3 -> s4 [89, 89] { R3659 += 1, R3597 += 1, R2623 += 1 };
  s3 -> s1 [90, 65535] { R3659 += 1, R3597 += 1, R2623 += 1 };
  s4 -> s4 [0, 87] { R3659 += 1, R3597 += 1, R2623 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R3659 += 1 };
  s4 -> s4 [0, 65535] { R3659 += 1, R3597 += 1 };
  s4 -> s4 [89, 65535] { R3659 += 1, R3597 += 1, R2623 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3659 += 1 };
  accepting s4, s5, s6;
};
automaton value2_28 {
  init s0;
  s0 -> s0 [0, 65535] { R3660 += 1, R3661 += 1 };
  s0 -> s1 [0, 65535] { R3661 += 1, R3599 += 1 };
  s0 -> s2 [0, 65535] { R3661 += 1, R3598 += 1, R3599 += 1 };
  s1 -> s1 [0, 65535] { R3661 += 1, R3599 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R3661 += 1 };
  s2 -> s1 [0, 65535] { R3661 += 1, R3599 += 1 };
  s2 -> s2 [0, 65535] { R3661 += 1, R3598 += 1, R3599 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3661 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 86] { R3663 += 1, R3601 += 1, R3581 += 1 };
  s0 -> s2 [0, 65535] { R3663 += 1, R3600 += 1, R3601 += 1 };
  s0 -> s0 [0, 65535] { R3662 += 1, R3663 += 1 };
  s0 -> s1 [0, 65535] { R3663 += 1, R3601 += 1 };
  s0 -> s3 [87, 87] { R3663 += 1, R3601 += 1, R3581 += 1 };
  s0 -> s4 [87, 87] { R3663 += 1, R3601 += 1, R3581 += 1 };
  s0 -> s1 [90, 65535] { R3663 += 1, R3601 += 1, R3581 += 1 };
  s1 -> s1 [0, 86] { R3663 += 1, R3601 += 1, R3581 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R3663 += 1 };
  s1 -> s1 [0, 65535] { R3663 += 1, R3601 += 1 };
  s1 -> s3 [87, 87] { R3663 += 1, R3601 += 1, R3581 += 1 };
  s1 -> s4 [87, 87] { R3663 += 1, R3601 += 1, R3581 += 1 };
  s1 -> s1 [90, 65535] { R3663 += 1, R3601 += 1, R3581 += 1 };
  s2 -> s1 [0, 86] { R3663 += 1, R3601 += 1, R3581 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3663 += 1, R3600 += 1, R3601 += 1 };
  s2 -> s1 [0, 65535] { R3663 += 1, R3601 += 1 };
  s2 -> s3 [87, 87] { R3663 += 1, R3601 += 1, R3581 += 1 };
  s2 -> s4 [87, 87] { R3663 += 1, R3601 += 1, R3581 += 1 };
  s2 -> s1 [90, 65535] { R3663 += 1, R3601 += 1, R3581 += 1 };
  s3 -> s3 [0, 87] { R3663 += 1, R3601 += 1, R3581 += 1 };
  s3 -> s3 [0, 65535] { R3663 += 1, R3601 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R3663 += 1 };
  s3 -> s3 [90, 65535] { R3663 += 1, R3601 += 1, R3581 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R3663 += 1 };
  s4 -> s4 [0, 65535] { R3663 += 1, R3601 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3663 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s0 [0, 65535] { R3664 += 1, R3665 += 1 };
  s0 -> s1 [0, 65535] { R3665 += 1, R3620 += 1, R3621 += 1 };
  s0 -> s2 [0, 65535] { R3665 += 1, R3621 += 1, R18 += 1 };
  s1 -> s1 [0, 65535] { R3665 += 1, R3620 += 1, R3621 += 1 };
  s1 -> s2 [0, 65535] { R3665 += 1, R3621 += 1, R18 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R3665 += 1 };
  s2 -> s2 [0, 65535] { R3665 += 1, R3621 += 1, R18 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3665 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 74] { R3667 += 1, R3623 += 1 };
  s0 -> s0 [0, 65535] { R3666 += 1, R3667 += 1 };
  s0 -> s2 [0, 65535] { R3667 += 1, R3622 += 1, R3623 += 1 };
  s0 -> s3 [75, 75] { R3667 += 1, R3623 += 1 };
  s0 -> s4 [75, 75] { R3667 += 1, R3623 += 1 };
  s0 -> s5 [87, 87] { R3667 += 1, R3623 += 1 };
  s0 -> s1 [88, 65535] { R3667 += 1, R3623 += 1 };
  s1 -> s1 [0, 74] { R3667 += 1, R3623 += 1 };
  s1 -> s3 [75, 75] { R3667 += 1, R3623 += 1 };
  s1 -> s4 [75, 75] { R3667 += 1, R3623 += 1 };
  s1 -> s5 [87, 87] { R3667 += 1, R3623 += 1 };
  s1 -> s1 [88, 65535] { R3667 += 1, R3623 += 1 };
  s2 -> s1 [0, 74] { R3667 += 1, R3623 += 1 };
  s2 -> s2 [0, 65535] { R3667 += 1, R3622 += 1, R3623 += 1 };
  s2 -> s3 [75, 75] { R3667 += 1, R3623 += 1 };
  s2 -> s4 [75, 75] { R3667 += 1, R3623 += 1 };
  s2 -> s5 [87, 87] { R3667 += 1, R3623 += 1 };
  s2 -> s1 [88, 65535] { R3667 += 1, R3623 += 1 };
  s4 -> s4 [0, 75] { R3667 += 1, R3623 += 1 };
  s4 -> s8 [87, 87] { R3667 += 1, R3623 += 1 };
  s4 -> s4 [88, 65535] { R3667 += 1, R3623 += 1 };
  s5 -> s5 [0, 74] { R3667 += 1, R3623 += 1 };
  s5 -> s5 [0, 65535] { R3667 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [75, 75] { R3667 += 1, R3623 += 1 };
  s5 -> s8 [75, 75] { R3667 += 1, R3623 += 1 };
  s5 -> s5 [87, 65535] { R3667 += 1, R3623 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R3667 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 75] { R3667 += 1, R3623 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R3667 += 1 };
  s8 -> s8 [87, 65535] { R3667 += 1, R3623 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 74] { R3669 += 1, R3625 += 1, R66 += 1 };
  s0 -> s2 [0, 65535] { R3669 += 1, R3624 += 1, R3625 += 1 };
  s0 -> s0 [0, 65535] { R3668 += 1, R3669 += 1 };
  s0 -> s3 [75, 75] { R3669 += 1, R3625 += 1, R66 += 1 };
  s0 -> s4 [75, 75] { R3669 += 1, R3625 += 1, R66 += 1 };
  s0 -> s1 [76, 65535] { R3669 += 1, R3625 += 1, R66 += 1 };
  s1 -> s1 [0, 74] { R3669 += 1, R3625 += 1, R66 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3669 += 1 };
  s1 -> s3 [75, 75] { R3669 += 1, R3625 += 1, R66 += 1 };
  s1 -> s4 [75, 75] { R3669 += 1, R3625 += 1, R66 += 1 };
  s1 -> s1 [76, 65535] { R3669 += 1, R3625 += 1, R66 += 1 };
  s2 -> s1 [0, 74] { R3669 += 1, R3625 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R3669 += 1, R3624 += 1, R3625 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [75, 75] { R3669 += 1, R3625 += 1, R66 += 1 };
  s2 -> s4 [75, 75] { R3669 += 1, R3625 += 1, R66 += 1 };
  s2 -> s1 [76, 65535] { R3669 += 1, R3625 += 1, R66 += 1 };
  s3 -> s3 [0, 65535] { R3669 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3669 += 1, R3625 += 1, R66 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R3669 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3669 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 74] { R3671 += 1, R3627 += 1, R68 += 1 };
  s0 -> s2 [0, 65535] { R3671 += 1, R3626 += 1, R3627 += 1 };
  s0 -> s0 [0, 65535] { R3670 += 1, R3671 += 1 };
  s0 -> s3 [75, 75] { R3671 += 1, R3627 += 1, R68 += 1 };
  s0 -> s4 [75, 75] { R3671 += 1, R3627 += 1, R68 += 1 };
  s0 -> s1 [76, 65535] { R3671 += 1, R3627 += 1, R68 += 1 };
  s1 -> s1 [0, 74] { R3671 += 1, R3627 += 1, R68 += 1 };
  s1 -> s1 [0, 65535] { R3671 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [75, 75] { R3671 += 1, R3627 += 1, R68 += 1 };
  s1 -> s4 [75, 75] { R3671 += 1, R3627 += 1, R68 += 1 };
  s1 -> s1 [76, 65535] { R3671 += 1, R3627 += 1, R68 += 1 };
  s2 -> s1 [0, 74] { R3671 += 1, R3627 += 1, R68 += 1 };
  s2 -> s2 [0, 65535] { R3671 += 1, R3626 += 1, R3627 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [75, 75] { R3671 += 1, R3627 += 1, R68 += 1 };
  s2 -> s4 [75, 75] { R3671 += 1, R3627 += 1, R68 += 1 };
  s2 -> s1 [76, 65535] { R3671 += 1, R3627 += 1, R68 += 1 };
  s3 -> s3 [0, 65535] { R3671 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R3671 += 1 };
  s4 -> s4 [0, 65535] { R3671 += 1, R3627 += 1, R68 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R3671 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 74] { R3673 += 1, R3629 += 1, R70 += 1, R71 += 1 };
  s0 -> s2 [0, 65535] { R3673 += 1, R3628 += 1, R3629 += 1 };
  s0 -> s0 [0, 65535] { R3672 += 1, R3673 += 1 };
  s0 -> s3 [75, 75] { R3673 += 1, R3629 += 1, R70 += 1, R71 += 1 };
  s0 -> s4 [75, 75] { R3673 += 1, R3629 += 1, R70 += 1, R71 += 1 };
  s0 -> s1 [76, 65535] { R3673 += 1, R3629 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 74] { R3673 += 1, R3629 += 1, R70 += 1, R71 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3673 += 1 };
  s1 -> s3 [75, 75] { R3673 += 1, R3629 += 1, R70 += 1, R71 += 1 };
  s1 -> s4 [75, 75] { R3673 += 1, R3629 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [76, 65535] { R3673 += 1, R3629 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [0, 74] { R3673 += 1, R3629 += 1, R70 += 1, R71 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3673 += 1, R3628 += 1, R3629 += 1 };
  s2 -> s3 [75, 75] { R3673 += 1, R3629 += 1, R70 += 1, R71 += 1 };
  s2 -> s4 [75, 75] { R3673 += 1, R3629 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [76, 65535] { R3673 += 1, R3629 += 1, R70 += 1, R71 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R3673 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3673 += 1, R3629 += 1, R70 += 1, R71 += 1 };
  s4 -> s6 [0, 65535] { R3673 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3673 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 74] { R3675 += 1, R3631 += 1, R74 += 1, R75 += 1 };
  s0 -> s2 [0, 65535] { R3675 += 1, R3630 += 1, R3631 += 1 };
  s0 -> s0 [0, 65535] { R3674 += 1, R3675 += 1 };
  s0 -> s3 [75, 75] { R3675 += 1, R3631 += 1, R74 += 1, R75 += 1 };
  s0 -> s4 [75, 75] { R3675 += 1, R3631 += 1, R74 += 1, R75 += 1 };
  s0 -> s1 [76, 65535] { R3675 += 1, R3631 += 1, R74 += 1, R75 += 1 };
  s1 -> s1 [0, 74] { R3675 += 1, R3631 += 1, R74 += 1, R75 += 1 };
  s1 -> s1 [0, 65535] { R3675 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [75, 75] { R3675 += 1, R3631 += 1, R74 += 1, R75 += 1 };
  s1 -> s4 [75, 75] { R3675 += 1, R3631 += 1, R74 += 1, R75 += 1 };
  s1 -> s1 [76, 65535] { R3675 += 1, R3631 += 1, R74 += 1, R75 += 1 };
  s2 -> s1 [0, 74] { R3675 += 1, R3631 += 1, R74 += 1, R75 += 1 };
  s2 -> s2 [0, 65535] { R3675 += 1, R3630 += 1, R3631 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [75, 75] { R3675 += 1, R3631 += 1, R74 += 1, R75 += 1 };
  s2 -> s4 [75, 75] { R3675 += 1, R3631 += 1, R74 += 1, R75 += 1 };
  s2 -> s1 [76, 65535] { R3675 += 1, R3631 += 1, R74 += 1, R75 += 1 };
  s3 -> s3 [0, 65535] { R3675 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3675 += 1, R3631 += 1, R74 += 1, R75 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R3675 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3675 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 74] { R3677 += 1, R3633 += 1, R2620 += 1, R2621 += 1 };
  s0 -> s2 [0, 65535] { R3677 += 1, R3632 += 1, R3633 += 1 };
  s0 -> s0 [0, 65535] { R3676 += 1, R3677 += 1 };
  s0 -> s3 [75, 75] { R3677 += 1, R3633 += 1, R2620 += 1, R2621 += 1 };
  s0 -> s4 [75, 75] { R3677 += 1, R3633 += 1, R2620 += 1, R2621 += 1 };
  s0 -> s1 [76, 65535] { R3677 += 1, R3633 += 1, R2620 += 1, R2621 += 1 };
  s1 -> s1 [0, 74] { R3677 += 1, R3633 += 1, R2620 += 1, R2621 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3677 += 1 };
  s1 -> s3 [75, 75] { R3677 += 1, R3633 += 1, R2620 += 1, R2621 += 1 };
  s1 -> s4 [75, 75] { R3677 += 1, R3633 += 1, R2620 += 1, R2621 += 1 };
  s1 -> s1 [76, 65535] { R3677 += 1, R3633 += 1, R2620 += 1, R2621 += 1 };
  s2 -> s1 [0, 74] { R3677 += 1, R3633 += 1, R2620 += 1, R2621 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3677 += 1, R3632 += 1, R3633 += 1 };
  s2 -> s3 [75, 75] { R3677 += 1, R3633 += 1, R2620 += 1, R2621 += 1 };
  s2 -> s4 [75, 75] { R3677 += 1, R3633 += 1, R2620 += 1, R2621 += 1 };
  s2 -> s1 [76, 65535] { R3677 += 1, R3633 += 1, R2620 += 1, R2621 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R3677 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R3677 += 1 };
  s4 -> s4 [0, 65535] { R3677 += 1, R3633 += 1, R2620 += 1, R2621 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3677 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 74] { R3679 += 1, R3635 += 1, R3469 += 1, R3470 += 1 };
  s0 -> s2 [0, 74] { R3679 += 1, R3635 += 1, R3468 += 1, R3469 += 1 };
  s0 -> s3 [0, 65535] { R3679 += 1, R3634 += 1, R3635 += 1 };
  s0 -> s0 [0, 65535] { R3678 += 1, R3679 += 1 };
  s0 -> s4 [75, 75] { R3679 += 1, R3635 += 1, R3468 += 1, R3469 += 1 };
  s0 -> s5 [75, 75] { R3679 += 1, R3635 += 1, R3469 += 1, R3470 += 1 };
  s0 -> s6 [75, 75] { R3679 += 1, R3635 += 1, R3468 += 1, R3469 += 1 };
  s0 -> s7 [75, 75] { R3679 += 1, R3635 += 1, R3469 += 1, R3470 += 1 };
  s0 -> s1 [76, 65535] { R3679 += 1, R3635 += 1, R3469 += 1, R3470 += 1 };
  s0 -> s2 [76, 65535] { R3679 += 1, R3635 += 1, R3468 += 1, R3469 += 1 };
  s1 -> s1 [0, 74] { R3679 += 1, R3635 += 1, R3469 += 1, R3470 += 1 };
  s1 -> s11 [0, 74] { R3679 += 1, R3635 += 1 };
  s1 -> s8 [75, 75] { R3679 += 1, R3635 += 1 };
  s1 -> s5 [75, 75] { R3679 += 1, R3635 += 1, R3469 += 1, R3470 += 1 };
  s1 -> s12 [75, 75] { R3679 += 1, R3635 += 1 };
  s1 -> s7 [75, 75] { R3679 += 1, R3635 += 1, R3469 += 1, R3470 += 1 };
  s1 -> s1 [76, 65535] { R3679 += 1, R3635 += 1, R3469 += 1, R3470 += 1 };
  s1 -> s11 [76, 65535] { R3679 += 1, R3635 += 1 };
  s2 -> s1 [0, 74] { R3679 += 1, R3635 += 1, R3469 += 1, R3470 += 1 };
  s2 -> s2 [0, 74] { R3679 += 1, R3635 += 1, R3468 += 1, R3469 += 1 };
  s2 -> s4 [75, 75] { R3679 += 1, R3635 += 1, R3468 += 1, R3469 += 1 };
  s2 -> s5 [75, 75] { R3679 += 1, R3635 += 1, R3469 += 1, R3470 += 1 };
  s2 -> s6 [75, 75] { R3679 += 1, R3635 += 1, R3468 += 1, R3469 += 1 };
  s2 -> s7 [75, 75] { R3679 += 1, R3635 += 1, R3469 += 1, R3470 += 1 };
  s2 -> s1 [76, 65535] { R3679 += 1, R3635 += 1, R3469 += 1, R3470 += 1 };
  s2 -> s2 [76, 65535] { R3679 += 1, R3635 += 1, R3468 += 1, R3469 += 1 };
  s3 -> s1 [0, 74] { R3679 += 1, R3635 += 1, R3469 += 1, R3470 += 1 };
  s3 -> s2 [0, 74] { R3679 += 1, R3635 += 1, R3468 += 1, R3469 += 1 };
  s3 -> s3 [0, 65535] { R3679 += 1, R3634 += 1, R3635 += 1 };
  s3 -> s4 [75, 75] { R3679 += 1, R3635 += 1, R3468 += 1, R3469 += 1 };
  s3 -> s5 [75, 75] { R3679 += 1, R3635 += 1, R3469 += 1, R3470 += 1 };
  s3 -> s6 [75, 75] { R3679 += 1, R3635 += 1, R3468 += 1, R3469 += 1 };
  s3 -> s7 [75, 75] { R3679 += 1, R3635 += 1, R3469 += 1, R3470 += 1 };
  s3 -> s1 [76, 65535] { R3679 += 1, R3635 += 1, R3469 += 1, R3470 += 1 };
  s3 -> s2 [76, 65535] { R3679 += 1, R3635 += 1, R3468 += 1, R3469 += 1 };
  s4 -> s4 [0, 65535] { R3679 += 1, R3635 += 1, R3468 += 1, R3469 += 1 };
  s4 -> s5 [0, 65535] { R3679 += 1, R3635 += 1, R3469 += 1, R3470 += 1 };
  s5 -> s8 [0, 65535] { R3679 += 1, R3635 += 1 };
  s5 -> s5 [0, 65535] { R3679 += 1, R3635 += 1, R3469 += 1, R3470 += 1 };
  s8 -> s9 [0, 65535] { R3679 += 1 };
  s8 -> s8 [0, 65535] { R3679 += 1, R3635 += 1 };
  s8 -> s10 [0, 65535];
  s9 -> s9 [0, 65535] { R3679 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s11 [0, 74] { R3679 += 1, R3635 += 1 };
  s11 -> s10 [0, 65535];
  s11 -> s11 [0, 65535] { R3679 += 1 };
  s11 -> s8 [75, 75] { R3679 += 1, R3635 += 1 };
  s11 -> s12 [75, 75] { R3679 += 1, R3635 += 1 };
  s11 -> s11 [76, 65535] { R3679 += 1, R3635 += 1 };
  s12 -> s10 [0, 65535];
  s12 -> s12 [0, 65535] { R3679 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 74] { R3681 += 1, R3637 += 1, R3579 += 1 };
  s0 -> s2 [0, 74] { R3681 += 1, R3637 += 1, R3578 += 1, R3579 += 1 };
  s0 -> s3 [0, 65535] { R3681 += 1, R3636 += 1, R3637 += 1 };
  s0 -> s0 [0, 65535] { R3680 += 1, R3681 += 1 };
  s0 -> s4 [75, 75] { R3681 += 1, R3637 += 1, R3579 += 1 };
  s0 -> s5 [75, 75] { R3681 += 1, R3637 += 1, R3578 += 1, R3579 += 1 };
  s0 -> s6 [75, 75] { R3681 += 1, R3637 += 1, R3579 += 1 };
  s0 -> s7 [75, 75] { R3681 += 1, R3637 += 1, R3578 += 1, R3579 += 1 };
  s0 -> s1 [76, 86] { R3681 += 1, R3637 += 1, R3579 += 1 };
  s0 -> s2 [76, 65535] { R3681 += 1, R3637 += 1, R3578 += 1, R3579 += 1 };
  s0 -> s1 [90, 65535] { R3681 += 1, R3637 += 1, R3579 += 1 };
  s1 -> s1 [0, 74] { R3681 += 1, R3637 += 1, R3579 += 1 };
  s1 -> s9 [0, 65535];
  s1 -> s1 [0, 65535] { R3681 += 1 };
  s1 -> s4 [75, 75] { R3681 += 1, R3637 += 1 };
  s1 -> s6 [75, 75] { R3681 += 1, R3637 += 1 };
  s1 -> s1 [76, 86] { R3681 += 1, R3637 += 1, R3579 += 1 };
  s1 -> s1 [76, 65535] { R3681 += 1, R3637 += 1 };
  s1 -> s1 [90, 65535] { R3681 += 1, R3637 += 1, R3579 += 1 };
  s2 -> s1 [0, 74] { R3681 += 1, R3637 += 1, R3579 += 1 };
  s2 -> s2 [0, 74] { R3681 += 1, R3637 += 1, R3578 += 1, R3579 += 1 };
  s2 -> s4 [75, 75] { R3681 += 1, R3637 += 1, R3579 += 1 };
  s2 -> s5 [75, 75] { R3681 += 1, R3637 += 1, R3578 += 1, R3579 += 1 };
  s2 -> s6 [75, 75] { R3681 += 1, R3637 += 1, R3579 += 1 };
  s2 -> s7 [75, 75] { R3681 += 1, R3637 += 1, R3578 += 1, R3579 += 1 };
  s2 -> s1 [76, 86] { R3681 += 1, R3637 += 1, R3579 += 1 };
  s2 -> s2 [76, 65535] { R3681 += 1, R3637 += 1, R3578 += 1, R3579 += 1 };
  s2 -> s1 [90, 65535] { R3681 += 1, R3637 += 1, R3579 += 1 };
  s3 -> s1 [0, 74] { R3681 += 1, R3637 += 1, R3579 += 1 };
  s3 -> s2 [0, 74] { R3681 += 1, R3637 += 1, R3578 += 1, R3579 += 1 };
  s3 -> s3 [0, 65535] { R3681 += 1, R3636 += 1, R3637 += 1 };
  s3 -> s4 [75, 75] { R3681 += 1, R3637 += 1, R3579 += 1 };
  s3 -> s5 [75, 75] { R3681 += 1, R3637 += 1, R3578 += 1, R3579 += 1 };
  s3 -> s6 [75, 75] { R3681 += 1, R3637 += 1, R3579 += 1 };
  s3 -> s7 [75, 75] { R3681 += 1, R3637 += 1, R3578 += 1, R3579 += 1 };
  s3 -> s1 [76, 86] { R3681 += 1, R3637 += 1, R3579 += 1 };
  s3 -> s2 [76, 65535] { R3681 += 1, R3637 += 1, R3578 += 1, R3579 += 1 };
  s3 -> s1 [90, 65535] { R3681 += 1, R3637 += 1, R3579 += 1 };
  s4 -> s4 [0, 65535] { R3681 += 1 };
  s4 -> s9 [0, 65535];
  s5 -> s6 [0, 86] { R3681 += 1, R3637 += 1, R3579 += 1 };
  s5 -> s5 [0, 65535] { R3681 += 1, R3637 += 1, R3578 += 1, R3579 += 1 };
  s5 -> s6 [90, 65535] { R3681 += 1, R3637 += 1, R3579 += 1 };
  s6 -> s6 [0, 86] { R3681 += 1, R3637 += 1, R3579 += 1 };
  s6 -> s8 [0, 65535] { R3681 += 1 };
  s6 -> s9 [0, 65535];
  s6 -> s6 [0, 65535] { R3681 += 1, R3637 += 1 };
  s6 -> s6 [90, 65535] { R3681 += 1, R3637 += 1, R3579 += 1 };
  s8 -> s8 [0, 65535] { R3681 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s4, s8, s9, s6, s1;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [107, 107];
  accepting s1;
};
};
constraint R1 = R3597 && R2 = R3681 && R20 - R3681 = -1 && R21 = R3681 && R22 - R3681 = -1 && R23 = R3681 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R2623 + -1*R2621 - R53 = 0 && R52 + R2622 + R2620 = 0 && R3596 = 0 && R3622 = 0 && R3623 = 0 && R3634 = 0 && R3635 = 0 && R3636 = 0 && R3637 = 0 && R3638 = 0 && R3639 = R3681 && R3640 = 0 && R3641 = R3681 && R3642 = 0 && R3643 = R3681 && R3644 = 0 && R3645 = R3681 && R3646 = 0 && R3647 = R3681 && R3648 = 0 && R3649 = R3681 && R3650 = 0 && R3651 = R3681 && R3652 = 0 && R3653 = R3681 && R3654 = 0 && R3655 = R3681 && R3656 = 0 && R3657 = R3681 && R3658 = 0 && R3659 = R3681 && R3660 = 0 && R3661 = R3681 && R3662 = 0 && R3663 = R3681 && R3664 = 0 && R3665 = R3681 && R3666 = 0 && R3667 = R3681 && R3668 = 0 && R3669 = R3681 && R3670 = 0 && R3671 = R3681 && R3672 = 0 && R3673 = R3681 && R3674 = 0 && R3675 = R3681 && R3676 = 0 && R3677 = R3681 && R3678 = 0 && R3679 = R3681 && R3680 = 0 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R2623 + -1*R2621 - R53 < 1 && -1 < R3597 && 0 < R3681 && (R48 + R79 + R76 != 0 || ((R42 + R72 + R70 != 0 || R43 + R73 + R71 + -1*R2623 + -1*R2621 - R53 = 0 || R53 + R2623 + R2621 < 1) && (R42 + R72 + R70 = 0 || R53 + R2623 + R2621 < 1))) && (R48 + R79 + R76 != 0 || ((R46 + R77 + R74 != 0 || R47 + R78 + R75 + -1*R2623 + -1*R2621 - R53 = 0 || R53 + R2623 + R2621 < 1) && (R46 + R77 + R74 = 0 || R53 + R2623 + R2621 < 1))) && (R3582 != 0 || R3583 = R3597 || (R17 = 0 && R3597 = 0)) && (R3584 != 0 || R3585 = R3597 || (R17 = 0 && R3597 = 0)) && (R3586 != 0 || R3587 = R3597 || (R17 = 0 && R3597 = 0)) && (R3588 != 0 || R3589 = R3597 || (R17 = 0 && R3597 = 0)) && (R3590 != 0 || R3591 = R3597 || (R17 = 0 && R3597 = 0)) && (R3592 != 0 || R3593 = R3597 || (R17 = 0 && R3597 = 0)) && (R3594 != 0 || R3595 = R3597 || (R17 = 0 && R3597 = 0)) && (R3598 != 0 || R3597 = R3599 || (R17 = 0 && R3597 = 0)) && (R3600 != 0 || R3597 = R3601 || (R17 = 0 && R3597 = 0)) && (R18 = 0 || (R3620 = 0 && R3621 = 0)) && (R18 = 0 || (R3624 = 0 && R3625 = 0)) && (R18 = 0 || (R3626 = 0 && R3627 = 0)) && (R18 = 0 || (R3628 = 0 && R3629 = 0)) && (R18 = 0 || (R3630 = 0 && R3631 = 0)) && (R18 = 0 || (R3632 = 0 && R3633 = 0)) && (R19 = 0 || (R3602 = 0 && R3603 = 0)) && (R19 = 0 || (R3604 = 0 && R3605 = 0)) && (R19 = 0 || (R3606 = 0 && R3607 = 0)) && (R19 = 0 || (R3608 = 0 && R3609 = 0)) && (R19 = 0 || (R3610 = 0 && R3611 = 0)) && (R19 = 0 || (R3612 = 0 && R3613 = 0)) && (R19 = 0 || (R3614 = 0 && R3615 = 0)) && (R19 = 0 || (R3616 = 0 && R3617 = 0)) && (R19 = 0 || (R3618 = 0 && R3619 = 0)) && (R48 + R79 + R76 = 0 || (R42 + R72 + R70 = 0 && R43 + R73 + R71 + -1*R2623 + -1*R2621 - R53 = 0)) && (R48 + R79 + R76 = 0 || (R46 + R77 + R74 = 0 && R47 + R78 + R75 + -1*R2623 + -1*R2621 - R53 = 0)) && (R58 + R3473 + R3470 = 0 || (R56 + R3471 + R3468 = 0 && R57 + R3472 + R3469 = 0)) && (R58 + R3473 + R3470 = 0 || (R62 + R3580 + R3578 = 0 && R63 + R3581 + R3579 = 0)) && (R3582 = 0 || (R17 = 0 && R3597 = 0)) && (R3584 = 0 || (R17 = 0 && R3597 = 0)) && (R3586 = 0 || (R17 = 0 && R3597 = 0)) && (R3588 = 0 || (R17 = 0 && R3597 = 0)) && (R3590 = 0 || (R17 = 0 && R3597 = 0)) && (R3592 = 0 || (R17 = 0 && R3597 = 0)) && (R3594 = 0 || (R17 = 0 && R3597 = 0)) && (R3598 = 0 || (R17 = 0 && R3597 = 0)) && (R3600 = 0 || (R17 = 0 && R3597 = 0));
// End of Parikh automata intersection problem
