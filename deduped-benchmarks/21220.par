// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R12, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R2620, R2621, R2622, R2623, R27, R3, R3046, R3047, R3048, R3049, R3050, R3051, R3052, R3053, R3054, R3055, R3056, R3057, R3058, R3059, R3060, R3061, R3062, R3063, R3064, R3065, R3066, R3067, R3068, R3069, R3070, R3071, R3072, R3073, R3074, R3075, R3076, R3077, R3078, R3079, R3080, R3081, R3082, R3083, R3084, R3085, R3086, R3087, R3088, R3089, R3090, R3091, R3092, R3093, R3094, R3095, R3096, R3097, R3098, R3099, R3100, R3101, R3102, R3103, R3104, R3105, R3106, R3107, R3108, R3109, R3110, R3111, R3112, R3113, R3114, R3115, R3116, R3117, R3118, R3119, R3120, R3121, R3122, R3123, R3124, R3125, R3126, R3127, R3128, R3129, R3130, R3131, R3132, R3133, R3134, R3135, R3136, R3137, R3138, R3139, R3140, R3141, R3142, R3143, R3144, R3145, R3146, R3147, R3148, R3149, R3150, R3151, R3152, R3153, R3154, R3155, R38, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R70, R71, R72, R73, R74, R75, R76, R77, R78, R79, R8;
synchronised {  // Automata constraining P64
automaton P64_0 {
  init s0;
  s0 -> s1 [119, 119];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [75, 75];
  s0 -> s0 [76, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [75, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 74];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [75, 75];
  s0 -> s1 [76, 65535];
  s1 -> s1 [0, 74];
  s1 -> s2 [75, 75];
  s1 -> s1 [76, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s1 [0, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s1 [0, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R3077 += 1, R19 += 1 };
  s0 -> s0 [0, 65535] { R3076 += 1, R3077 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R3077 += 1, R19 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 74] { R3079 += 1 };
  s0 -> s0 [0, 65535] { R3078 += 1, R3079 += 1 };
  s0 -> s2 [75, 75] { R3079 += 1 };
  s0 -> s3 [75, 75] { R3079 += 1 };
  s0 -> s1 [88, 65535] { R3079 += 1 };
  s1 -> s1 [0, 74] { R3079 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R3079 += 1 };
  s1 -> s3 [75, 75] { R3079 += 1 };
  s1 -> s1 [88, 65535] { R3079 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 75] { R3079 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [88, 65535] { R3079 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 74] { R3081 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R3080 += 1, R3081 += 1 };
  s0 -> s2 [75, 75] { R3081 += 1, R38 += 1 };
  s0 -> s3 [75, 75] { R3081 += 1, R38 += 1 };
  s0 -> s1 [76, 65535] { R3081 += 1, R38 += 1 };
  s1 -> s1 [0, 74] { R3081 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R3081 += 1, R38 += 1 };
  s1 -> s3 [75, 75] { R3081 += 1, R38 += 1 };
  s1 -> s1 [76, 65535] { R3081 += 1, R38 += 1 };
  s2 -> s2 [0, 65535] { R3081 += 1, R38 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 74] { R3083 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R3082 += 1, R3083 += 1 };
  s0 -> s2 [75, 75] { R3083 += 1, R40 += 1 };
  s0 -> s3 [75, 75] { R3083 += 1, R40 += 1 };
  s0 -> s1 [76, 65535] { R3083 += 1, R40 += 1 };
  s1 -> s1 [0, 74] { R3083 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R3083 += 1, R40 += 1 };
  s1 -> s3 [75, 75] { R3083 += 1, R40 += 1 };
  s1 -> s1 [76, 65535] { R3083 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3083 += 1, R40 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 74] { R3085 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R3084 += 1, R3085 += 1 };
  s0 -> s2 [75, 75] { R3085 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [75, 75] { R3085 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [76, 65535] { R3085 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 74] { R3085 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R3085 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [75, 75] { R3085 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [76, 65535] { R3085 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535] { R3085 += 1, R42 += 1, R43 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 74] { R3087 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R3086 += 1, R3087 += 1 };
  s0 -> s2 [75, 75] { R3087 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [75, 75] { R3087 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [76, 65535] { R3087 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 74] { R3087 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R3087 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [75, 75] { R3087 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [76, 65535] { R3087 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535] { R3087 += 1, R46 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 74] { R3089 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R3088 += 1, R3089 += 1 };
  s0 -> s2 [75, 75] { R3089 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [75, 75] { R3089 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [76, 65535] { R3089 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 74] { R3089 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R3089 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [75, 75] { R3089 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [76, 65535] { R3089 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535] { R3089 += 1, R52 += 1, R53 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 74] { R3091 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R3090 += 1, R3091 += 1 };
  s0 -> s2 [75, 75] { R3091 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [75, 75] { R3091 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [76, 65535] { R3091 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 74] { R3091 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R3091 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [75, 75] { R3091 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [76, 65535] { R3091 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3091 += 1, R56 += 1, R57 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 74] { R3093 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R3092 += 1, R3093 += 1 };
  s0 -> s2 [75, 75] { R3093 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [75, 75] { R3093 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [76, 65535] { R3093 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 74] { R3093 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R3093 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [75, 75] { R3093 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [76, 65535] { R3093 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3093 += 1, R62 += 1, R63 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 74] { R3113 += 1 };
  s0 -> s0 [0, 65535] { R3112 += 1, R3113 += 1 };
  s0 -> s2 [75, 75] { R3113 += 1 };
  s0 -> s1 [76, 65535] { R3113 += 1 };
  s1 -> s1 [0, 74] { R3113 += 1 };
  s1 -> s2 [75, 75] { R3113 += 1 };
  s1 -> s1 [76, 65535] { R3113 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3113 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R3115 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R3114 += 1, R3115 += 1 };
  s1 -> s1 [0, 65535] { R3115 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 74] { R3117 += 1 };
  s0 -> s2 [0, 65535] { R3117 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R3116 += 1, R3117 += 1 };
  s0 -> s3 [75, 75] { R3117 += 1 };
  s0 -> s1 [76, 65535] { R3117 += 1 };
  s1 -> s1 [0, 74] { R3117 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [75, 75] { R3117 += 1 };
  s1 -> s1 [76, 65535] { R3117 += 1 };
  s2 -> s1 [0, 74] { R3117 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3117 += 1, R8 += 1 };
  s2 -> s3 [75, 75] { R3117 += 1 };
  s2 -> s1 [76, 65535] { R3117 += 1 };
  s3 -> s3 [0, 65535] { R3117 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 74] { R3119 += 1, R3057 += 1 };
  s0 -> s2 [0, 65535] { R3119 += 1, R3056 += 1, R3057 += 1 };
  s0 -> s0 [0, 65535] { R3118 += 1, R3119 += 1 };
  s0 -> s1 [76, 65535] { R3119 += 1, R3057 += 1 };
  s1 -> s1 [0, 74] { R3119 += 1, R3057 += 1 };
  s1 -> s1 [0, 65535] { R3119 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [76, 65535] { R3119 += 1, R3057 += 1 };
  s2 -> s1 [0, 74] { R3119 += 1, R3057 += 1 };
  s2 -> s2 [0, 65535] { R3119 += 1, R3056 += 1, R3057 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [76, 65535] { R3119 += 1, R3057 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R3121 += 1, R3058 += 1, R3059 += 1 };
  s0 -> s2 [0, 65535] { R3121 += 1, R3059 += 1, R17 += 1 };
  s0 -> s0 [0, 65535] { R3120 += 1, R3121 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3121 += 1, R3058 += 1, R3059 += 1 };
  s1 -> s2 [0, 65535] { R3121 += 1, R3059 += 1, R17 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R3121 += 1 };
  s2 -> s2 [0, 65535] { R3121 += 1, R3059 += 1, R17 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3121 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 75] { R3123 += 1, R3061 += 1 };
  s0 -> s2 [0, 65535] { R3123 += 1, R3060 += 1, R3061 += 1 };
  s0 -> s0 [0, 65535] { R3122 += 1, R3123 += 1 };
  s0 -> s1 [87, 65535] { R3123 += 1, R3061 += 1 };
  s1 -> s1 [0, 75] { R3123 += 1, R3061 += 1 };
  s1 -> s1 [0, 65535] { R3123 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [87, 65535] { R3123 += 1, R3061 += 1 };
  s2 -> s1 [0, 75] { R3123 += 1, R3061 += 1 };
  s2 -> s2 [0, 65535] { R3123 += 1, R3060 += 1, R3061 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [87, 65535] { R3123 += 1, R3061 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s0 [0, 65535] { R3124 += 1, R3125 += 1 };
  s0 -> s1 [0, 65535] { R3125 += 1, R3063 += 1, R67 += 1 };
  s0 -> s2 [0, 65535] { R3125 += 1, R3062 += 1, R3063 += 1 };
  s1 -> s1 [0, 65535] { R3125 += 1, R3063 += 1, R67 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R3125 += 1 };
  s2 -> s1 [0, 65535] { R3125 += 1, R3063 += 1, R67 += 1 };
  s2 -> s2 [0, 65535] { R3125 += 1, R3062 += 1, R3063 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3125 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 86] { R3127 += 1, R3065 += 1 };
  s0 -> s0 [0, 65535] { R3126 += 1, R3127 += 1 };
  s0 -> s2 [0, 65535] { R3127 += 1, R3065 += 1, R69 += 1 };
  s0 -> s3 [0, 65535] { R3127 += 1, R3064 += 1, R3065 += 1 };
  s0 -> s1 [88, 65535] { R3127 += 1, R3065 += 1 };
  s1 -> s1 [0, 86] { R3127 += 1, R3065 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R3127 += 1 };
  s1 -> s1 [88, 65535] { R3127 += 1, R3065 += 1 };
  s2 -> s1 [0, 86] { R3127 += 1, R3065 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R3127 += 1 };
  s2 -> s2 [0, 65535] { R3127 += 1, R3065 += 1, R69 += 1 };
  s2 -> s1 [88, 65535] { R3127 += 1, R3065 += 1 };
  s3 -> s1 [0, 86] { R3127 += 1, R3065 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R3127 += 1, R3065 += 1, R69 += 1 };
  s3 -> s3 [0, 65535] { R3127 += 1, R3064 += 1, R3065 += 1 };
  s3 -> s1 [88, 65535] { R3127 += 1, R3065 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3127 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 86] { R3129 += 1, R3067 += 1, R73 += 1 };
  s0 -> s2 [0, 65535] { R3129 += 1, R3066 += 1, R3067 += 1 };
  s0 -> s3 [0, 65535] { R3129 += 1, R3067 += 1, R72 += 1, R73 += 1 };
  s0 -> s0 [0, 65535] { R3128 += 1, R3129 += 1 };
  s0 -> s1 [88, 65535] { R3129 += 1, R3067 += 1, R73 += 1 };
  s1 -> s1 [0, 86] { R3129 += 1, R3067 += 1, R73 += 1 };
  s1 -> s1 [0, 65535] { R3129 += 1, R3067 += 1 };
  s1 -> s4 [0, 65535] { R3129 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [88, 65535] { R3129 += 1, R3067 += 1, R73 += 1 };
  s2 -> s1 [0, 86] { R3129 += 1, R3067 += 1, R73 += 1 };
  s2 -> s2 [0, 65535] { R3129 += 1, R3066 += 1, R3067 += 1 };
  s2 -> s3 [0, 65535] { R3129 += 1, R3067 += 1, R72 += 1, R73 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [88, 65535] { R3129 += 1, R3067 += 1, R73 += 1 };
  s3 -> s1 [0, 86] { R3129 += 1, R3067 += 1, R73 += 1 };
  s3 -> s4 [0, 65535] { R3129 += 1 };
  s3 -> s3 [0, 65535] { R3129 += 1, R3067 += 1, R72 += 1, R73 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [88, 65535] { R3129 += 1, R3067 += 1, R73 += 1 };
  s4 -> s4 [0, 65535] { R3129 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s0 [0, 65535] { R3130 += 1, R3131 += 1 };
  s0 -> s1 [0, 65535] { R3131 += 1, R3069 += 1, R77 += 1, R78 += 1 };
  s0 -> s2 [0, 65535] { R3131 += 1, R3069 += 1, R78 += 1, R79 += 1 };
  s0 -> s3 [0, 65535] { R3131 += 1, R3068 += 1, R3069 += 1 };
  s1 -> s5 [0, 65535] { R3131 += 1 };
  s1 -> s1 [0, 65535] { R3131 += 1, R3069 += 1, R77 += 1, R78 += 1 };
  s1 -> s2 [0, 65535] { R3131 += 1, R3069 += 1, R78 += 1, R79 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R3131 += 1 };
  s2 -> s6 [0, 65535] { R3131 += 1, R3069 += 1 };
  s2 -> s2 [0, 65535] { R3131 += 1, R3069 += 1, R78 += 1, R79 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R3131 += 1, R3069 += 1, R77 += 1, R78 += 1 };
  s3 -> s2 [0, 65535] { R3131 += 1, R3069 += 1, R78 += 1, R79 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3131 += 1, R3068 += 1, R3069 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3131 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R3131 += 1 };
  s6 -> s6 [0, 65535] { R3131 += 1, R3069 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 87] { R3133 += 1, R3071 += 1, R2623 += 1 };
  s0 -> s2 [0, 65535] { R3133 += 1, R3070 += 1, R3071 += 1 };
  s0 -> s3 [0, 65535] { R3133 += 1, R3071 += 1, R2622 += 1, R2623 += 1 };
  s0 -> s0 [0, 65535] { R3132 += 1, R3133 += 1 };
  s0 -> s4 [89, 89] { R3133 += 1, R3071 += 1, R2623 += 1 };
  s0 -> s1 [90, 65535] { R3133 += 1, R3071 += 1, R2623 += 1 };
  s1 -> s1 [0, 87] { R3133 += 1, R3071 += 1, R2623 += 1 };
  s1 -> s4 [89, 89] { R3133 += 1, R3071 += 1, R2623 += 1 };
  s1 -> s1 [90, 65535] { R3133 += 1, R3071 += 1, R2623 += 1 };
  s2 -> s1 [0, 87] { R3133 += 1, R3071 += 1, R2623 += 1 };
  s2 -> s2 [0, 65535] { R3133 += 1, R3070 += 1, R3071 += 1 };
  s2 -> s3 [0, 65535] { R3133 += 1, R3071 += 1, R2622 += 1, R2623 += 1 };
  s2 -> s4 [89, 89] { R3133 += 1, R3071 += 1, R2623 += 1 };
  s2 -> s1 [90, 65535] { R3133 += 1, R3071 += 1, R2623 += 1 };
  s3 -> s1 [0, 87] { R3133 += 1, R3071 += 1, R2623 += 1 };
  s3 -> s3 [0, 65535] { R3133 += 1, R3071 += 1, R2622 += 1, R2623 += 1 };
  s3 -> s4 [89, 89] { R3133 += 1, R3071 += 1, R2623 += 1 };
  s3 -> s1 [90, 65535] { R3133 += 1, R3071 += 1, R2623 += 1 };
  s4 -> s4 [0, 87] { R3133 += 1, R3071 += 1, R2623 += 1 };
  s4 -> s4 [0, 65535] { R3133 += 1, R3071 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R3133 += 1 };
  s4 -> s4 [89, 65535] { R3133 += 1, R3071 += 1, R2623 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3133 += 1 };
  accepting s4, s5, s6;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R3135 += 1, R3073 += 1 };
  s0 -> s2 [0, 65535] { R3135 += 1, R3073 += 1, R3050 += 1, R3051 += 1 };
  s0 -> s0 [0, 65535] { R3134 += 1, R3135 += 1 };
  s0 -> s3 [0, 65535] { R3135 += 1, R3072 += 1, R3073 += 1 };
  s1 -> s1 [0, 65535] { R3135 += 1, R3073 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R3135 += 1 };
  s2 -> s1 [0, 65535] { R3135 += 1, R3073 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3135 += 1, R3073 += 1, R3050 += 1, R3051 += 1 };
  s2 -> s5 [0, 65535] { R3135 += 1 };
  s3 -> s1 [0, 65535] { R3135 += 1, R3073 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R3135 += 1, R3073 += 1, R3050 += 1, R3051 += 1 };
  s3 -> s3 [0, 65535] { R3135 += 1, R3072 += 1, R3073 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3135 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 86] { R3137 += 1, R3075 += 1, R3055 += 1 };
  s0 -> s0 [0, 65535] { R3136 += 1, R3137 += 1 };
  s0 -> s2 [0, 65535] { R3137 += 1, R3075 += 1, R3054 += 1, R3055 += 1 };
  s0 -> s3 [0, 65535] { R3137 += 1, R3074 += 1, R3075 += 1 };
  s0 -> s4 [87, 87] { R3137 += 1, R3075 += 1, R3055 += 1 };
  s0 -> s5 [87, 87] { R3137 += 1, R3075 += 1, R3055 += 1 };
  s0 -> s1 [90, 65535] { R3137 += 1, R3075 += 1, R3055 += 1 };
  s1 -> s1 [0, 86] { R3137 += 1, R3075 += 1, R3055 += 1 };
  s1 -> s1 [0, 65535] { R3137 += 1, R3075 += 1 };
  s1 -> s6 [0, 65535] { R3137 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s4 [87, 87] { R3137 += 1, R3075 += 1, R3055 += 1 };
  s1 -> s5 [87, 87] { R3137 += 1, R3075 += 1, R3055 += 1 };
  s1 -> s1 [90, 65535] { R3137 += 1, R3075 += 1, R3055 += 1 };
  s2 -> s1 [0, 86] { R3137 += 1, R3075 += 1, R3055 += 1 };
  s2 -> s2 [0, 65535] { R3137 += 1, R3075 += 1, R3054 += 1, R3055 += 1 };
  s2 -> s6 [0, 65535] { R3137 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s4 [87, 87] { R3137 += 1, R3075 += 1, R3055 += 1 };
  s2 -> s5 [87, 87] { R3137 += 1, R3075 += 1, R3055 += 1 };
  s2 -> s1 [90, 65535] { R3137 += 1, R3075 += 1, R3055 += 1 };
  s3 -> s1 [0, 86] { R3137 += 1, R3075 += 1, R3055 += 1 };
  s3 -> s2 [0, 65535] { R3137 += 1, R3075 += 1, R3054 += 1, R3055 += 1 };
  s3 -> s3 [0, 65535] { R3137 += 1, R3074 += 1, R3075 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s4 [87, 87] { R3137 += 1, R3075 += 1, R3055 += 1 };
  s3 -> s5 [87, 87] { R3137 += 1, R3075 += 1, R3055 += 1 };
  s3 -> s1 [90, 65535] { R3137 += 1, R3075 += 1, R3055 += 1 };
  s4 -> s4 [0, 65535] { R3137 += 1, R3075 += 1 };
  s4 -> s6 [0, 65535] { R3137 += 1 };
  s4 -> s7 [0, 65535];
  s5 -> s5 [0, 87] { R3137 += 1, R3075 += 1, R3055 += 1 };
  s5 -> s6 [0, 65535] { R3137 += 1 };
  s5 -> s7 [0, 65535];
  s5 -> s5 [0, 65535] { R3137 += 1, R3075 += 1 };
  s5 -> s5 [90, 65535] { R3137 += 1, R3075 += 1, R3055 += 1 };
  s6 -> s6 [0, 65535] { R3137 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s0 [0, 65535] { R3138 += 1, R3139 += 1 };
  s0 -> s1 [0, 65535] { R3139 += 1, R3094 += 1, R3095 += 1 };
  s0 -> s2 [0, 65535] { R3139 += 1, R3095 += 1, R18 += 1 };
  s1 -> s1 [0, 65535] { R3139 += 1, R3094 += 1, R3095 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R3139 += 1, R3095 += 1, R18 += 1 };
  s2 -> s3 [0, 65535] { R3139 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3139 += 1, R3095 += 1, R18 += 1 };
  s3 -> s3 [0, 65535] { R3139 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 74] { R3141 += 1, R3097 += 1 };
  s0 -> s2 [0, 65535] { R3141 += 1, R3096 += 1, R3097 += 1 };
  s0 -> s0 [0, 65535] { R3140 += 1, R3141 += 1 };
  s0 -> s3 [75, 75] { R3141 += 1, R3097 += 1 };
  s0 -> s4 [75, 75] { R3141 += 1, R3097 += 1 };
  s0 -> s5 [87, 87] { R3141 += 1, R3097 += 1 };
  s0 -> s1 [88, 65535] { R3141 += 1, R3097 += 1 };
  s1 -> s1 [0, 74] { R3141 += 1, R3097 += 1 };
  s1 -> s3 [75, 75] { R3141 += 1, R3097 += 1 };
  s1 -> s4 [75, 75] { R3141 += 1, R3097 += 1 };
  s1 -> s5 [87, 87] { R3141 += 1, R3097 += 1 };
  s1 -> s1 [88, 65535] { R3141 += 1, R3097 += 1 };
  s2 -> s1 [0, 74] { R3141 += 1, R3097 += 1 };
  s2 -> s2 [0, 65535] { R3141 += 1, R3096 += 1, R3097 += 1 };
  s2 -> s3 [75, 75] { R3141 += 1, R3097 += 1 };
  s2 -> s4 [75, 75] { R3141 += 1, R3097 += 1 };
  s2 -> s5 [87, 87] { R3141 += 1, R3097 += 1 };
  s2 -> s1 [88, 65535] { R3141 += 1, R3097 += 1 };
  s4 -> s4 [0, 75] { R3141 += 1, R3097 += 1 };
  s4 -> s7 [87, 87] { R3141 += 1, R3097 += 1 };
  s4 -> s4 [88, 65535] { R3141 += 1, R3097 += 1 };
  s5 -> s5 [0, 74] { R3141 += 1, R3097 += 1 };
  s5 -> s5 [0, 65535] { R3141 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [75, 75] { R3141 += 1, R3097 += 1 };
  s5 -> s8 [75, 75] { R3141 += 1, R3097 += 1 };
  s5 -> s5 [87, 65535] { R3141 += 1, R3097 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 75] { R3141 += 1, R3097 += 1 };
  s7 -> s7 [0, 65535] { R3141 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [87, 65535] { R3141 += 1, R3097 += 1 };
  s8 -> s8 [0, 65535] { R3141 += 1 };
  s8 -> s6 [0, 65535];
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 74] { R3143 += 1, R3099 += 1, R66 += 1 };
  s0 -> s2 [0, 65535] { R3143 += 1, R3098 += 1, R3099 += 1 };
  s0 -> s0 [0, 65535] { R3142 += 1, R3143 += 1 };
  s0 -> s3 [75, 75] { R3143 += 1, R3099 += 1, R66 += 1 };
  s0 -> s4 [75, 75] { R3143 += 1, R3099 += 1, R66 += 1 };
  s0 -> s1 [76, 65535] { R3143 += 1, R3099 += 1, R66 += 1 };
  s1 -> s1 [0, 74] { R3143 += 1, R3099 += 1, R66 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3143 += 1 };
  s1 -> s3 [75, 75] { R3143 += 1, R3099 += 1, R66 += 1 };
  s1 -> s4 [75, 75] { R3143 += 1, R3099 += 1, R66 += 1 };
  s1 -> s1 [76, 65535] { R3143 += 1, R3099 += 1, R66 += 1 };
  s2 -> s1 [0, 74] { R3143 += 1, R3099 += 1, R66 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3143 += 1, R3098 += 1, R3099 += 1 };
  s2 -> s3 [75, 75] { R3143 += 1, R3099 += 1, R66 += 1 };
  s2 -> s4 [75, 75] { R3143 += 1, R3099 += 1, R66 += 1 };
  s2 -> s1 [76, 65535] { R3143 += 1, R3099 += 1, R66 += 1 };
  s3 -> s3 [0, 65535] { R3143 += 1, R3099 += 1, R66 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R3143 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3143 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3143 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 74] { R3145 += 1, R3101 += 1, R68 += 1 };
  s0 -> s0 [0, 65535] { R3144 += 1, R3145 += 1 };
  s0 -> s2 [0, 65535] { R3145 += 1, R3100 += 1, R3101 += 1 };
  s0 -> s3 [75, 75] { R3145 += 1, R3101 += 1, R68 += 1 };
  s0 -> s4 [75, 75] { R3145 += 1, R3101 += 1, R68 += 1 };
  s0 -> s1 [76, 65535] { R3145 += 1, R3101 += 1, R68 += 1 };
  s1 -> s1 [0, 74] { R3145 += 1, R3101 += 1, R68 += 1 };
  s1 -> s1 [0, 65535] { R3145 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [75, 75] { R3145 += 1, R3101 += 1, R68 += 1 };
  s1 -> s4 [75, 75] { R3145 += 1, R3101 += 1, R68 += 1 };
  s1 -> s1 [76, 65535] { R3145 += 1, R3101 += 1, R68 += 1 };
  s2 -> s1 [0, 74] { R3145 += 1, R3101 += 1, R68 += 1 };
  s2 -> s2 [0, 65535] { R3145 += 1, R3100 += 1, R3101 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [75, 75] { R3145 += 1, R3101 += 1, R68 += 1 };
  s2 -> s4 [75, 75] { R3145 += 1, R3101 += 1, R68 += 1 };
  s2 -> s1 [76, 65535] { R3145 += 1, R3101 += 1, R68 += 1 };
  s3 -> s3 [0, 65535] { R3145 += 1, R3101 += 1, R68 += 1 };
  s3 -> s6 [0, 65535] { R3145 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3145 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3145 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 74] { R3147 += 1, R3103 += 1, R70 += 1, R71 += 1 };
  s0 -> s2 [0, 65535] { R3147 += 1, R3102 += 1, R3103 += 1 };
  s0 -> s0 [0, 65535] { R3146 += 1, R3147 += 1 };
  s0 -> s3 [75, 75] { R3147 += 1, R3103 += 1, R70 += 1, R71 += 1 };
  s0 -> s4 [75, 75] { R3147 += 1, R3103 += 1, R70 += 1, R71 += 1 };
  s0 -> s1 [76, 65535] { R3147 += 1, R3103 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 74] { R3147 += 1, R3103 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 65535] { R3147 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [75, 75] { R3147 += 1, R3103 += 1, R70 += 1, R71 += 1 };
  s1 -> s4 [75, 75] { R3147 += 1, R3103 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [76, 65535] { R3147 += 1, R3103 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [0, 74] { R3147 += 1, R3103 += 1, R70 += 1, R71 += 1 };
  s2 -> s2 [0, 65535] { R3147 += 1, R3102 += 1, R3103 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [75, 75] { R3147 += 1, R3103 += 1, R70 += 1, R71 += 1 };
  s2 -> s4 [75, 75] { R3147 += 1, R3103 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [76, 65535] { R3147 += 1, R3103 += 1, R70 += 1, R71 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R3147 += 1 };
  s3 -> s3 [0, 65535] { R3147 += 1, R3103 += 1, R70 += 1, R71 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3147 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3147 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 74] { R3149 += 1, R3105 += 1, R74 += 1, R75 += 1 };
  s0 -> s2 [0, 65535] { R3149 += 1, R3104 += 1, R3105 += 1 };
  s0 -> s0 [0, 65535] { R3148 += 1, R3149 += 1 };
  s0 -> s3 [75, 75] { R3149 += 1, R3105 += 1, R74 += 1, R75 += 1 };
  s0 -> s4 [75, 75] { R3149 += 1, R3105 += 1, R74 += 1, R75 += 1 };
  s0 -> s1 [76, 65535] { R3149 += 1, R3105 += 1, R74 += 1, R75 += 1 };
  s1 -> s1 [0, 74] { R3149 += 1, R3105 += 1, R74 += 1, R75 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3149 += 1 };
  s1 -> s3 [75, 75] { R3149 += 1, R3105 += 1, R74 += 1, R75 += 1 };
  s1 -> s4 [75, 75] { R3149 += 1, R3105 += 1, R74 += 1, R75 += 1 };
  s1 -> s1 [76, 65535] { R3149 += 1, R3105 += 1, R74 += 1, R75 += 1 };
  s2 -> s1 [0, 74] { R3149 += 1, R3105 += 1, R74 += 1, R75 += 1 };
  s2 -> s2 [0, 65535] { R3149 += 1, R3104 += 1, R3105 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [75, 75] { R3149 += 1, R3105 += 1, R74 += 1, R75 += 1 };
  s2 -> s4 [75, 75] { R3149 += 1, R3105 += 1, R74 += 1, R75 += 1 };
  s2 -> s1 [76, 65535] { R3149 += 1, R3105 += 1, R74 += 1, R75 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R3149 += 1, R3105 += 1, R74 += 1, R75 += 1 };
  s3 -> s6 [0, 65535] { R3149 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3149 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3149 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 74] { R3151 += 1, R3107 += 1, R2620 += 1, R2621 += 1 };
  s0 -> s2 [0, 65535] { R3151 += 1, R3106 += 1, R3107 += 1 };
  s0 -> s0 [0, 65535] { R3150 += 1, R3151 += 1 };
  s0 -> s3 [75, 75] { R3151 += 1, R3107 += 1, R2620 += 1, R2621 += 1 };
  s0 -> s4 [75, 75] { R3151 += 1, R3107 += 1, R2620 += 1, R2621 += 1 };
  s0 -> s1 [76, 65535] { R3151 += 1, R3107 += 1, R2620 += 1, R2621 += 1 };
  s1 -> s1 [0, 74] { R3151 += 1, R3107 += 1, R2620 += 1, R2621 += 1 };
  s1 -> s1 [0, 65535] { R3151 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [75, 75] { R3151 += 1, R3107 += 1, R2620 += 1, R2621 += 1 };
  s1 -> s4 [75, 75] { R3151 += 1, R3107 += 1, R2620 += 1, R2621 += 1 };
  s1 -> s1 [76, 65535] { R3151 += 1, R3107 += 1, R2620 += 1, R2621 += 1 };
  s2 -> s1 [0, 74] { R3151 += 1, R3107 += 1, R2620 += 1, R2621 += 1 };
  s2 -> s2 [0, 65535] { R3151 += 1, R3106 += 1, R3107 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [75, 75] { R3151 += 1, R3107 += 1, R2620 += 1, R2621 += 1 };
  s2 -> s4 [75, 75] { R3151 += 1, R3107 += 1, R2620 += 1, R2621 += 1 };
  s2 -> s1 [76, 65535] { R3151 += 1, R3107 += 1, R2620 += 1, R2621 += 1 };
  s3 -> s3 [0, 65535] { R3151 += 1, R3107 += 1, R2620 += 1, R2621 += 1 };
  s3 -> s6 [0, 65535] { R3151 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3151 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3151 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 74] { R3153 += 1, R3109 += 1, R3046 += 1, R3047 += 1 };
  s0 -> s2 [0, 74] { R3153 += 1, R3109 += 1, R3047 += 1, R3048 += 1 };
  s0 -> s0 [0, 65535] { R3152 += 1, R3153 += 1 };
  s0 -> s3 [0, 65535] { R3153 += 1, R3108 += 1, R3109 += 1 };
  s0 -> s4 [75, 75] { R3153 += 1, R3109 += 1, R3047 += 1, R3048 += 1 };
  s0 -> s5 [75, 75] { R3153 += 1, R3109 += 1, R3046 += 1, R3047 += 1 };
  s0 -> s6 [75, 75] { R3153 += 1, R3109 += 1, R3046 += 1, R3047 += 1 };
  s0 -> s7 [75, 75] { R3153 += 1, R3109 += 1, R3047 += 1, R3048 += 1 };
  s0 -> s1 [76, 65535] { R3153 += 1, R3109 += 1, R3046 += 1, R3047 += 1 };
  s0 -> s2 [76, 65535] { R3153 += 1, R3109 += 1, R3047 += 1, R3048 += 1 };
  s1 -> s1 [0, 74] { R3153 += 1, R3109 += 1, R3046 += 1, R3047 += 1 };
  s1 -> s2 [0, 74] { R3153 += 1, R3109 += 1, R3047 += 1, R3048 += 1 };
  s1 -> s4 [75, 75] { R3153 += 1, R3109 += 1, R3047 += 1, R3048 += 1 };
  s1 -> s5 [75, 75] { R3153 += 1, R3109 += 1, R3046 += 1, R3047 += 1 };
  s1 -> s6 [75, 75] { R3153 += 1, R3109 += 1, R3046 += 1, R3047 += 1 };
  s1 -> s7 [75, 75] { R3153 += 1, R3109 += 1, R3047 += 1, R3048 += 1 };
  s1 -> s1 [76, 65535] { R3153 += 1, R3109 += 1, R3046 += 1, R3047 += 1 };
  s1 -> s2 [76, 65535] { R3153 += 1, R3109 += 1, R3047 += 1, R3048 += 1 };
  s2 -> s2 [0, 74] { R3153 += 1, R3109 += 1, R3047 += 1, R3048 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R3153 += 1 };
  s2 -> s4 [75, 75] { R3153 += 1, R3109 += 1, R3047 += 1, R3048 += 1 };
  s2 -> s7 [75, 75] { R3153 += 1, R3109 += 1, R3047 += 1, R3048 += 1 };
  s2 -> s2 [76, 65535] { R3153 += 1, R3109 += 1, R3047 += 1, R3048 += 1 };
  s3 -> s1 [0, 74] { R3153 += 1, R3109 += 1, R3046 += 1, R3047 += 1 };
  s3 -> s2 [0, 74] { R3153 += 1, R3109 += 1, R3047 += 1, R3048 += 1 };
  s3 -> s3 [0, 65535] { R3153 += 1, R3108 += 1, R3109 += 1 };
  s3 -> s4 [75, 75] { R3153 += 1, R3109 += 1, R3047 += 1, R3048 += 1 };
  s3 -> s5 [75, 75] { R3153 += 1, R3109 += 1, R3046 += 1, R3047 += 1 };
  s3 -> s6 [75, 75] { R3153 += 1, R3109 += 1, R3046 += 1, R3047 += 1 };
  s3 -> s7 [75, 75] { R3153 += 1, R3109 += 1, R3047 += 1, R3048 += 1 };
  s3 -> s1 [76, 65535] { R3153 += 1, R3109 += 1, R3046 += 1, R3047 += 1 };
  s3 -> s2 [76, 65535] { R3153 += 1, R3109 += 1, R3047 += 1, R3048 += 1 };
  s4 -> s4 [0, 65535] { R3153 += 1, R3109 += 1, R3047 += 1, R3048 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s9 [0, 65535] { R3153 += 1 };
  s5 -> s4 [0, 65535] { R3153 += 1, R3109 += 1, R3047 += 1, R3048 += 1 };
  s5 -> s5 [0, 65535] { R3153 += 1, R3109 += 1, R3046 += 1, R3047 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R3153 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R3153 += 1 };
  accepting s4, s8, s2, s9, s7;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 74] { R3155 += 1, R3111 += 1, R3052 += 1, R3053 += 1 };
  s0 -> s2 [0, 65535] { R3155 += 1, R3110 += 1, R3111 += 1 };
  s0 -> s0 [0, 65535] { R3154 += 1, R3155 += 1 };
  s0 -> s3 [75, 75] { R3155 += 1, R3111 += 1, R3052 += 1, R3053 += 1 };
  s0 -> s4 [75, 75] { R3155 += 1, R3111 += 1, R3052 += 1, R3053 += 1 };
  s0 -> s1 [76, 65535] { R3155 += 1, R3111 += 1, R3052 += 1, R3053 += 1 };
  s1 -> s1 [0, 74] { R3155 += 1, R3111 += 1, R3052 += 1, R3053 += 1 };
  s1 -> s1 [0, 65535] { R3155 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [75, 75] { R3155 += 1, R3111 += 1, R3052 += 1, R3053 += 1 };
  s1 -> s4 [75, 75] { R3155 += 1, R3111 += 1, R3052 += 1, R3053 += 1 };
  s1 -> s1 [76, 65535] { R3155 += 1, R3111 += 1, R3052 += 1, R3053 += 1 };
  s2 -> s1 [0, 74] { R3155 += 1, R3111 += 1, R3052 += 1, R3053 += 1 };
  s2 -> s2 [0, 65535] { R3155 += 1, R3110 += 1, R3111 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [75, 75] { R3155 += 1, R3111 += 1, R3052 += 1, R3053 += 1 };
  s2 -> s4 [75, 75] { R3155 += 1, R3111 += 1, R3052 += 1, R3053 += 1 };
  s2 -> s1 [76, 65535] { R3155 += 1, R3111 += 1, R3052 += 1, R3053 += 1 };
  s3 -> s6 [0, 65535] { R3155 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R3155 += 1, R3111 += 1, R3052 += 1, R3053 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3155 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3155 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [107, 107];
  accepting s1;
};
};
constraint R1 = R3071 && R2 = R3155 && R20 - R3155 = -1 && R21 = R3155 && R22 - R3155 = -1 && R23 = R3155 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R2623 + -1*R2621 - R53 = 0 && R52 + R2622 + R2620 = 0 && R3070 = 0 && R3096 = 0 && R3097 = 0 && R3108 = 0 && R3109 = 0 && R3112 = 0 && R3113 = R3155 && R3114 = 0 && R3115 = R3155 && R3116 = 0 && R3117 = R3155 && R3118 = 0 && R3119 = R3155 && R3120 = 0 && R3121 = R3155 && R3122 = 0 && R3123 = R3155 && R3124 = 0 && R3125 = R3155 && R3126 = 0 && R3127 = R3155 && R3128 = 0 && R3129 = R3155 && R3130 = 0 && R3131 = R3155 && R3132 = 0 && R3133 = R3155 && R3134 = 0 && R3135 = R3155 && R3136 = 0 && R3137 = R3155 && R3138 = 0 && R3139 = R3155 && R3140 = 0 && R3141 = R3155 && R3142 = 0 && R3143 = R3155 && R3144 = 0 && R3145 = R3155 && R3146 = 0 && R3147 = R3155 && R3148 = 0 && R3149 = R3155 && R3150 = 0 && R3151 = R3155 && R3152 = 0 && R3153 = R3155 && R3154 = 0 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R2623 + -1*R2621 - R53 < 1 && -1 < R3071 && 0 < R3155 && (R48 + R79 + R76 != 0 || ((R42 + R72 + R70 != 0 || R43 + R73 + R71 + -1*R2623 + -1*R2621 - R53 = 0 || R53 + R2623 + R2621 < 1) && (R42 + R72 + R70 = 0 || R53 + R2623 + R2621 < 1))) && (R48 + R79 + R76 != 0 || ((R46 + R77 + R74 != 0 || R47 + R78 + R75 + -1*R2623 + -1*R2621 - R53 = 0 || R53 + R2623 + R2621 < 1) && (R46 + R77 + R74 = 0 || R53 + R2623 + R2621 < 1))) && (R3056 != 0 || R3057 = R3071 || (R17 = 0 && R3071 = 0)) && (R3058 != 0 || R3059 = R3071 || (R17 = 0 && R3071 = 0)) && (R3060 != 0 || R3061 = R3071 || (R17 = 0 && R3071 = 0)) && (R3062 != 0 || R3063 = R3071 || (R17 = 0 && R3071 = 0)) && (R3064 != 0 || R3065 = R3071 || (R17 = 0 && R3071 = 0)) && (R3066 != 0 || R3067 = R3071 || (R17 = 0 && R3071 = 0)) && (R3068 != 0 || R3069 = R3071 || (R17 = 0 && R3071 = 0)) && (R3072 != 0 || R3071 = R3073 || (R17 = 0 && R3071 = 0)) && (R3074 != 0 || R3071 = R3075 || (R17 = 0 && R3071 = 0)) && (R18 = 0 || (R3094 = 0 && R3095 = 0)) && (R18 = 0 || (R3098 = 0 && R3099 = 0)) && (R18 = 0 || (R3100 = 0 && R3101 = 0)) && (R18 = 0 || (R3102 = 0 && R3103 = 0)) && (R18 = 0 || (R3104 = 0 && R3105 = 0)) && (R18 = 0 || (R3106 = 0 && R3107 = 0)) && (R18 = 0 || (R3110 = 0 && R3111 = 0)) && (R19 = 0 || (R3076 = 0 && R3077 = 0)) && (R19 = 0 || (R3078 = 0 && R3079 = 0)) && (R19 = 0 || (R3080 = 0 && R3081 = 0)) && (R19 = 0 || (R3082 = 0 && R3083 = 0)) && (R19 = 0 || (R3084 = 0 && R3085 = 0)) && (R19 = 0 || (R3086 = 0 && R3087 = 0)) && (R19 = 0 || (R3088 = 0 && R3089 = 0)) && (R19 = 0 || (R3090 = 0 && R3091 = 0)) && (R19 = 0 || (R3092 = 0 && R3093 = 0)) && (R48 + R79 + R76 = 0 || (R42 + R72 + R70 = 0 && R43 + R73 + R71 + -1*R2623 + -1*R2621 - R53 = 0)) && (R48 + R79 + R76 = 0 || (R46 + R77 + R74 = 0 && R47 + R78 + R75 + -1*R2623 + -1*R2621 - R53 = 0)) && (R58 + R3051 + R3048 = 0 || (R56 + R3049 + R3046 = 0 && R57 + R3050 + R3047 = 0)) && (R58 + R3051 + R3048 = 0 || (R62 + R3054 + R3052 = 0 && R63 + R3055 + R3053 = 0)) && (R3056 = 0 || (R17 = 0 && R3071 = 0)) && (R3058 = 0 || (R17 = 0 && R3071 = 0)) && (R3060 = 0 || (R17 = 0 && R3071 = 0)) && (R3062 = 0 || (R17 = 0 && R3071 = 0)) && (R3064 = 0 || (R17 = 0 && R3071 = 0)) && (R3066 = 0 || (R17 = 0 && R3071 = 0)) && (R3068 = 0 || (R17 = 0 && R3071 = 0)) && (R3072 = 0 || (R17 = 0 && R3071 = 0)) && (R3074 = 0 || (R17 = 0 && R3071 = 0));
// End of Parikh automata intersection problem
