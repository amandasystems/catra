// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R12, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R4, R40, R42, R43, R46, R47, R48, R506, R507, R508, R509, R510, R511, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R70, R71, R72, R73, R74, R75, R76, R77, R78, R79, R8, R80, R81, R82, R824, R825, R826, R827, R828, R829, R83, R830, R831, R832, R833, R834, R835, R836, R837, R838, R839, R840, R841, R842, R843, R844, R845, R846, R847, R848, R849, R850, R851, R852, R853, R854, R855, R856, R857, R858, R859, R860, R861, R862, R863, R864, R865, R866, R867, R868, R869, R870, R871, R872, R873, R874, R875, R876, R877, R878, R879, R880, R881, R882, R883, R884, R885, R886, R887, R888, R889, R890, R891, R892, R893, R894, R895, R896, R897, R898, R899, R900, R901, R902, R903, R904, R905, R906, R907, R908, R909, R910, R911, R912, R913, R914, R915, R916, R917, R918, R919, R920, R921, R922, R923, R924, R925, R926, R927;
synchronised {  // Automata constraining P64
automaton P64_0 {
  init s0;
  s0 -> s1 [119, 119];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [75, 75];
  s0 -> s0 [76, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [75, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 74];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [75, 75];
  s0 -> s1 [76, 65535];
  s1 -> s1 [0, 74];
  s1 -> s2 [75, 75];
  s1 -> s1 [76, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s1 [0, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s1 [0, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R849 += 1, R19 += 1 };
  s0 -> s0 [0, 65535] { R848 += 1, R849 += 1 };
  s1 -> s1 [0, 65535] { R849 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 74] { R851 += 1 };
  s0 -> s0 [0, 65535] { R850 += 1, R851 += 1 };
  s0 -> s2 [75, 75] { R851 += 1 };
  s0 -> s3 [75, 75] { R851 += 1 };
  s0 -> s1 [88, 65535] { R851 += 1 };
  s1 -> s1 [0, 74] { R851 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R851 += 1 };
  s1 -> s3 [75, 75] { R851 += 1 };
  s1 -> s1 [88, 65535] { R851 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 75] { R851 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [88, 65535] { R851 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 74] { R853 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R852 += 1, R853 += 1 };
  s0 -> s2 [75, 75] { R853 += 1, R38 += 1 };
  s0 -> s3 [75, 75] { R853 += 1, R38 += 1 };
  s0 -> s1 [76, 65535] { R853 += 1, R38 += 1 };
  s1 -> s1 [0, 74] { R853 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R853 += 1, R38 += 1 };
  s1 -> s3 [75, 75] { R853 += 1, R38 += 1 };
  s1 -> s1 [76, 65535] { R853 += 1, R38 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R853 += 1, R38 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 74] { R855 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R854 += 1, R855 += 1 };
  s0 -> s2 [75, 75] { R855 += 1, R40 += 1 };
  s0 -> s3 [75, 75] { R855 += 1, R40 += 1 };
  s0 -> s1 [76, 65535] { R855 += 1, R40 += 1 };
  s1 -> s1 [0, 74] { R855 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R855 += 1, R40 += 1 };
  s1 -> s3 [75, 75] { R855 += 1, R40 += 1 };
  s1 -> s1 [76, 65535] { R855 += 1, R40 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R855 += 1, R40 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 74] { R857 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R856 += 1, R857 += 1 };
  s0 -> s2 [75, 75] { R857 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [75, 75] { R857 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [76, 65535] { R857 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 74] { R857 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R857 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [75, 75] { R857 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [76, 65535] { R857 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R857 += 1, R42 += 1, R43 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 74] { R859 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R858 += 1, R859 += 1 };
  s0 -> s2 [75, 75] { R859 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [75, 75] { R859 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [76, 65535] { R859 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 74] { R859 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R859 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [75, 75] { R859 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [76, 65535] { R859 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R859 += 1, R46 += 1, R47 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 74] { R861 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R860 += 1, R861 += 1 };
  s0 -> s2 [75, 75] { R861 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [75, 75] { R861 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [76, 65535] { R861 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 74] { R861 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R861 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [75, 75] { R861 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [76, 65535] { R861 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R861 += 1, R52 += 1, R53 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 74] { R863 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R862 += 1, R863 += 1 };
  s0 -> s2 [75, 75] { R863 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [75, 75] { R863 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [76, 65535] { R863 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 74] { R863 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R863 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [75, 75] { R863 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [76, 65535] { R863 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535] { R863 += 1, R56 += 1, R57 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 74] { R865 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R864 += 1, R865 += 1 };
  s0 -> s2 [75, 75] { R865 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [75, 75] { R865 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [76, 65535] { R865 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 74] { R865 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R865 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [75, 75] { R865 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [76, 65535] { R865 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R865 += 1, R62 += 1, R63 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 74] { R885 += 1 };
  s0 -> s0 [0, 65535] { R884 += 1, R885 += 1 };
  s0 -> s2 [75, 75] { R885 += 1 };
  s0 -> s1 [76, 65535] { R885 += 1 };
  s1 -> s1 [0, 74] { R885 += 1 };
  s1 -> s2 [75, 75] { R885 += 1 };
  s1 -> s1 [76, 65535] { R885 += 1 };
  s2 -> s2 [0, 65535] { R885 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R886 += 1, R887 += 1 };
  s0 -> s1 [0, 65535] { R887 += 1, R1 += 1 };
  s1 -> s1 [0, 65535] { R887 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 74] { R889 += 1 };
  s0 -> s2 [0, 65535] { R889 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R888 += 1, R889 += 1 };
  s0 -> s3 [75, 75] { R889 += 1 };
  s0 -> s1 [76, 65535] { R889 += 1 };
  s1 -> s1 [0, 74] { R889 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [75, 75] { R889 += 1 };
  s1 -> s1 [76, 65535] { R889 += 1 };
  s2 -> s1 [0, 74] { R889 += 1 };
  s2 -> s2 [0, 65535] { R889 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [75, 75] { R889 += 1 };
  s2 -> s1 [76, 65535] { R889 += 1 };
  s3 -> s3 [0, 65535] { R889 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 74] { R891 += 1, R829 += 1 };
  s0 -> s2 [0, 65535] { R891 += 1, R828 += 1, R829 += 1 };
  s0 -> s0 [0, 65535] { R890 += 1, R891 += 1 };
  s0 -> s1 [76, 65535] { R891 += 1, R829 += 1 };
  s1 -> s1 [0, 74] { R891 += 1, R829 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R891 += 1 };
  s1 -> s1 [76, 65535] { R891 += 1, R829 += 1 };
  s2 -> s1 [0, 74] { R891 += 1, R829 += 1 };
  s2 -> s2 [0, 65535] { R891 += 1, R828 += 1, R829 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [76, 65535] { R891 += 1, R829 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s0 [0, 65535] { R892 += 1, R893 += 1 };
  s0 -> s1 [0, 65535] { R893 += 1, R831 += 1, R17 += 1 };
  s0 -> s2 [0, 65535] { R893 += 1, R830 += 1, R831 += 1 };
  s1 -> s1 [0, 65535] { R893 += 1, R831 += 1, R17 += 1 };
  s1 -> s4 [0, 65535] { R893 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R893 += 1, R831 += 1, R17 += 1 };
  s2 -> s2 [0, 65535] { R893 += 1, R830 += 1, R831 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R893 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 75] { R895 += 1, R833 += 1 };
  s0 -> s0 [0, 65535] { R894 += 1, R895 += 1 };
  s0 -> s2 [0, 65535] { R895 += 1, R832 += 1, R833 += 1 };
  s0 -> s1 [87, 65535] { R895 += 1, R833 += 1 };
  s1 -> s1 [0, 75] { R895 += 1, R833 += 1 };
  s1 -> s1 [0, 65535] { R895 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [87, 65535] { R895 += 1, R833 += 1 };
  s2 -> s1 [0, 75] { R895 += 1, R833 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R895 += 1, R832 += 1, R833 += 1 };
  s2 -> s1 [87, 65535] { R895 += 1, R833 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R897 += 1, R835 += 1, R67 += 1 };
  s0 -> s2 [0, 65535] { R897 += 1, R834 += 1, R835 += 1 };
  s0 -> s0 [0, 65535] { R896 += 1, R897 += 1 };
  s1 -> s1 [0, 65535] { R897 += 1, R835 += 1, R67 += 1 };
  s1 -> s4 [0, 65535] { R897 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R897 += 1, R835 += 1, R67 += 1 };
  s2 -> s2 [0, 65535] { R897 += 1, R834 += 1, R835 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R897 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 86] { R899 += 1, R837 += 1 };
  s0 -> s2 [0, 65535] { R899 += 1, R836 += 1, R837 += 1 };
  s0 -> s3 [0, 65535] { R899 += 1, R837 += 1, R69 += 1 };
  s0 -> s0 [0, 65535] { R898 += 1, R899 += 1 };
  s0 -> s1 [88, 65535] { R899 += 1, R837 += 1 };
  s1 -> s1 [0, 86] { R899 += 1, R837 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R899 += 1 };
  s1 -> s1 [88, 65535] { R899 += 1, R837 += 1 };
  s2 -> s1 [0, 86] { R899 += 1, R837 += 1 };
  s2 -> s2 [0, 65535] { R899 += 1, R836 += 1, R837 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R899 += 1, R837 += 1, R69 += 1 };
  s2 -> s1 [88, 65535] { R899 += 1, R837 += 1 };
  s3 -> s1 [0, 86] { R899 += 1, R837 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R899 += 1 };
  s3 -> s3 [0, 65535] { R899 += 1, R837 += 1, R69 += 1 };
  s3 -> s1 [88, 65535] { R899 += 1, R837 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R899 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 86] { R901 += 1, R839 += 1, R73 += 1 };
  s0 -> s2 [0, 65535] { R901 += 1, R838 += 1, R839 += 1 };
  s0 -> s3 [0, 65535] { R901 += 1, R839 += 1, R72 += 1, R73 += 1 };
  s0 -> s0 [0, 65535] { R900 += 1, R901 += 1 };
  s0 -> s1 [88, 65535] { R901 += 1, R839 += 1, R73 += 1 };
  s1 -> s1 [0, 86] { R901 += 1, R839 += 1, R73 += 1 };
  s1 -> s4 [0, 65535] { R901 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R901 += 1, R839 += 1 };
  s1 -> s1 [88, 65535] { R901 += 1, R839 += 1, R73 += 1 };
  s2 -> s1 [0, 86] { R901 += 1, R839 += 1, R73 += 1 };
  s2 -> s2 [0, 65535] { R901 += 1, R838 += 1, R839 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R901 += 1, R839 += 1, R72 += 1, R73 += 1 };
  s2 -> s1 [88, 65535] { R901 += 1, R839 += 1, R73 += 1 };
  s3 -> s1 [0, 86] { R901 += 1, R839 += 1, R73 += 1 };
  s3 -> s4 [0, 65535] { R901 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R901 += 1, R839 += 1, R72 += 1, R73 += 1 };
  s3 -> s1 [88, 65535] { R901 += 1, R839 += 1, R73 += 1 };
  s4 -> s4 [0, 65535] { R901 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R903 += 1, R841 += 1, R78 += 1, R79 += 1 };
  s0 -> s2 [0, 65535] { R903 += 1, R841 += 1, R77 += 1, R78 += 1 };
  s0 -> s3 [0, 65535] { R903 += 1, R840 += 1, R841 += 1 };
  s0 -> s0 [0, 65535] { R902 += 1, R903 += 1 };
  s1 -> s1 [0, 65535] { R903 += 1, R841 += 1, R78 += 1, R79 += 1 };
  s1 -> s5 [0, 65535] { R903 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R903 += 1, R841 += 1 };
  s2 -> s1 [0, 65535] { R903 += 1, R841 += 1, R78 += 1, R79 += 1 };
  s2 -> s2 [0, 65535] { R903 += 1, R841 += 1, R77 += 1, R78 += 1 };
  s2 -> s5 [0, 65535] { R903 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R903 += 1, R841 += 1, R78 += 1, R79 += 1 };
  s3 -> s2 [0, 65535] { R903 += 1, R841 += 1, R77 += 1, R78 += 1 };
  s3 -> s3 [0, 65535] { R903 += 1, R840 += 1, R841 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R903 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R903 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R903 += 1, R841 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 87] { R905 += 1, R843 += 1, R83 += 1 };
  s0 -> s1 [0, 65535] { R905 += 1, R843 += 1 };
  s0 -> s0 [0, 65535] { R904 += 1, R905 += 1 };
  s0 -> s2 [0, 65535] { R905 += 1, R842 += 1, R843 += 1 };
  s0 -> s1 [89, 65535] { R905 += 1, R843 += 1, R83 += 1 };
  s1 -> s1 [0, 87] { R905 += 1, R843 += 1, R83 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R905 += 1 };
  s1 -> s1 [0, 65535] { R905 += 1, R843 += 1 };
  s1 -> s1 [89, 65535] { R905 += 1, R843 += 1, R83 += 1 };
  s2 -> s1 [0, 87] { R905 += 1, R843 += 1, R83 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R905 += 1, R843 += 1 };
  s2 -> s2 [0, 65535] { R905 += 1, R842 += 1, R843 += 1 };
  s2 -> s1 [89, 65535] { R905 += 1, R843 += 1, R83 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R905 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R907 += 1, R845 += 1 };
  s0 -> s2 [0, 65535] { R907 += 1, R845 += 1, R510 += 1, R511 += 1 };
  s0 -> s3 [0, 65535] { R907 += 1, R844 += 1, R845 += 1 };
  s0 -> s0 [0, 65535] { R906 += 1, R907 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R907 += 1, R845 += 1 };
  s1 -> s5 [0, 65535] { R907 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R907 += 1, R845 += 1 };
  s2 -> s2 [0, 65535] { R907 += 1, R845 += 1, R510 += 1, R511 += 1 };
  s2 -> s5 [0, 65535] { R907 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R907 += 1, R845 += 1 };
  s3 -> s2 [0, 65535] { R907 += 1, R845 += 1, R510 += 1, R511 += 1 };
  s3 -> s3 [0, 65535] { R907 += 1, R844 += 1, R845 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R907 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s0 [0, 65535] { R908 += 1, R909 += 1 };
  s0 -> s1 [0, 65535] { R909 += 1, R847 += 1 };
  s0 -> s2 [0, 65535] { R909 += 1, R846 += 1, R847 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R909 += 1, R847 += 1 };
  s1 -> s4 [0, 65535] { R909 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R909 += 1, R847 += 1 };
  s2 -> s2 [0, 65535] { R909 += 1, R846 += 1, R847 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R909 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R911 += 1, R866 += 1, R867 += 1 };
  s0 -> s2 [0, 65535] { R911 += 1, R867 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R910 += 1, R911 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R911 += 1, R866 += 1, R867 += 1 };
  s1 -> s2 [0, 65535] { R911 += 1, R867 += 1, R18 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R911 += 1 };
  s2 -> s2 [0, 65535] { R911 += 1, R867 += 1, R18 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R911 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 74] { R913 += 1, R869 += 1 };
  s0 -> s2 [0, 65535] { R913 += 1, R868 += 1, R869 += 1 };
  s0 -> s0 [0, 65535] { R912 += 1, R913 += 1 };
  s0 -> s3 [75, 75] { R913 += 1, R869 += 1 };
  s0 -> s4 [75, 75] { R913 += 1, R869 += 1 };
  s0 -> s5 [87, 87] { R913 += 1, R869 += 1 };
  s0 -> s1 [88, 65535] { R913 += 1, R869 += 1 };
  s1 -> s1 [0, 74] { R913 += 1, R869 += 1 };
  s1 -> s3 [75, 75] { R913 += 1, R869 += 1 };
  s1 -> s4 [75, 75] { R913 += 1, R869 += 1 };
  s1 -> s5 [87, 87] { R913 += 1, R869 += 1 };
  s1 -> s1 [88, 65535] { R913 += 1, R869 += 1 };
  s2 -> s1 [0, 74] { R913 += 1, R869 += 1 };
  s2 -> s2 [0, 65535] { R913 += 1, R868 += 1, R869 += 1 };
  s2 -> s3 [75, 75] { R913 += 1, R869 += 1 };
  s2 -> s4 [75, 75] { R913 += 1, R869 += 1 };
  s2 -> s5 [87, 87] { R913 += 1, R869 += 1 };
  s2 -> s1 [88, 65535] { R913 += 1, R869 += 1 };
  s4 -> s4 [0, 75] { R913 += 1, R869 += 1 };
  s4 -> s8 [87, 87] { R913 += 1, R869 += 1 };
  s4 -> s4 [88, 65535] { R913 += 1, R869 += 1 };
  s5 -> s5 [0, 74] { R913 += 1, R869 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R913 += 1 };
  s5 -> s7 [75, 75] { R913 += 1, R869 += 1 };
  s5 -> s8 [75, 75] { R913 += 1, R869 += 1 };
  s5 -> s5 [87, 65535] { R913 += 1, R869 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R913 += 1 };
  s8 -> s8 [0, 75] { R913 += 1, R869 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R913 += 1 };
  s8 -> s8 [87, 65535] { R913 += 1, R869 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 74] { R915 += 1, R871 += 1, R66 += 1 };
  s0 -> s2 [0, 65535] { R915 += 1, R870 += 1, R871 += 1 };
  s0 -> s0 [0, 65535] { R914 += 1, R915 += 1 };
  s0 -> s3 [75, 75] { R915 += 1, R871 += 1, R66 += 1 };
  s0 -> s4 [75, 75] { R915 += 1, R871 += 1, R66 += 1 };
  s0 -> s1 [76, 65535] { R915 += 1, R871 += 1, R66 += 1 };
  s1 -> s1 [0, 74] { R915 += 1, R871 += 1, R66 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R915 += 1 };
  s1 -> s3 [75, 75] { R915 += 1, R871 += 1, R66 += 1 };
  s1 -> s4 [75, 75] { R915 += 1, R871 += 1, R66 += 1 };
  s1 -> s1 [76, 65535] { R915 += 1, R871 += 1, R66 += 1 };
  s2 -> s1 [0, 74] { R915 += 1, R871 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R915 += 1, R870 += 1, R871 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [75, 75] { R915 += 1, R871 += 1, R66 += 1 };
  s2 -> s4 [75, 75] { R915 += 1, R871 += 1, R66 += 1 };
  s2 -> s1 [76, 65535] { R915 += 1, R871 += 1, R66 += 1 };
  s3 -> s3 [0, 65535] { R915 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R915 += 1, R871 += 1, R66 += 1 };
  s4 -> s6 [0, 65535] { R915 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R915 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 74] { R917 += 1, R873 += 1, R68 += 1 };
  s0 -> s2 [0, 65535] { R917 += 1, R872 += 1, R873 += 1 };
  s0 -> s0 [0, 65535] { R916 += 1, R917 += 1 };
  s0 -> s3 [75, 75] { R917 += 1, R873 += 1, R68 += 1 };
  s0 -> s4 [75, 75] { R917 += 1, R873 += 1, R68 += 1 };
  s0 -> s1 [76, 65535] { R917 += 1, R873 += 1, R68 += 1 };
  s1 -> s1 [0, 74] { R917 += 1, R873 += 1, R68 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R917 += 1 };
  s1 -> s3 [75, 75] { R917 += 1, R873 += 1, R68 += 1 };
  s1 -> s4 [75, 75] { R917 += 1, R873 += 1, R68 += 1 };
  s1 -> s1 [76, 65535] { R917 += 1, R873 += 1, R68 += 1 };
  s2 -> s1 [0, 74] { R917 += 1, R873 += 1, R68 += 1 };
  s2 -> s2 [0, 65535] { R917 += 1, R872 += 1, R873 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [75, 75] { R917 += 1, R873 += 1, R68 += 1 };
  s2 -> s4 [75, 75] { R917 += 1, R873 += 1, R68 += 1 };
  s2 -> s1 [76, 65535] { R917 += 1, R873 += 1, R68 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R917 += 1, R873 += 1, R68 += 1 };
  s3 -> s6 [0, 65535] { R917 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R917 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R917 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 74] { R919 += 1, R875 += 1, R70 += 1, R71 += 1 };
  s0 -> s2 [0, 65535] { R919 += 1, R874 += 1, R875 += 1 };
  s0 -> s0 [0, 65535] { R918 += 1, R919 += 1 };
  s0 -> s3 [75, 75] { R919 += 1, R875 += 1, R70 += 1, R71 += 1 };
  s0 -> s4 [75, 75] { R919 += 1, R875 += 1, R70 += 1, R71 += 1 };
  s0 -> s1 [76, 65535] { R919 += 1, R875 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 74] { R919 += 1, R875 += 1, R70 += 1, R71 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R919 += 1 };
  s1 -> s3 [75, 75] { R919 += 1, R875 += 1, R70 += 1, R71 += 1 };
  s1 -> s4 [75, 75] { R919 += 1, R875 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [76, 65535] { R919 += 1, R875 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [0, 74] { R919 += 1, R875 += 1, R70 += 1, R71 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R919 += 1, R874 += 1, R875 += 1 };
  s2 -> s3 [75, 75] { R919 += 1, R875 += 1, R70 += 1, R71 += 1 };
  s2 -> s4 [75, 75] { R919 += 1, R875 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [76, 65535] { R919 += 1, R875 += 1, R70 += 1, R71 += 1 };
  s3 -> s3 [0, 65535] { R919 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R919 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R919 += 1, R875 += 1, R70 += 1, R71 += 1 };
  s5 -> s5 [0, 65535] { R919 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 74] { R921 += 1, R877 += 1, R74 += 1, R75 += 1 };
  s0 -> s2 [0, 65535] { R921 += 1, R876 += 1, R877 += 1 };
  s0 -> s0 [0, 65535] { R920 += 1, R921 += 1 };
  s0 -> s3 [75, 75] { R921 += 1, R877 += 1, R74 += 1, R75 += 1 };
  s0 -> s4 [75, 75] { R921 += 1, R877 += 1, R74 += 1, R75 += 1 };
  s0 -> s1 [76, 65535] { R921 += 1, R877 += 1, R74 += 1, R75 += 1 };
  s1 -> s1 [0, 74] { R921 += 1, R877 += 1, R74 += 1, R75 += 1 };
  s1 -> s1 [0, 65535] { R921 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [75, 75] { R921 += 1, R877 += 1, R74 += 1, R75 += 1 };
  s1 -> s4 [75, 75] { R921 += 1, R877 += 1, R74 += 1, R75 += 1 };
  s1 -> s1 [76, 65535] { R921 += 1, R877 += 1, R74 += 1, R75 += 1 };
  s2 -> s1 [0, 74] { R921 += 1, R877 += 1, R74 += 1, R75 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R921 += 1, R876 += 1, R877 += 1 };
  s2 -> s3 [75, 75] { R921 += 1, R877 += 1, R74 += 1, R75 += 1 };
  s2 -> s4 [75, 75] { R921 += 1, R877 += 1, R74 += 1, R75 += 1 };
  s2 -> s1 [76, 65535] { R921 += 1, R877 += 1, R74 += 1, R75 += 1 };
  s3 -> s6 [0, 65535] { R921 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R921 += 1, R877 += 1, R74 += 1, R75 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R921 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R921 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 74] { R923 += 1, R879 += 1, R81 += 1 };
  s0 -> s2 [0, 74] { R923 += 1, R879 += 1, R80 += 1, R81 += 1 };
  s0 -> s0 [0, 65535] { R922 += 1, R923 += 1 };
  s0 -> s3 [0, 65535] { R923 += 1, R878 += 1, R879 += 1 };
  s0 -> s4 [75, 75] { R923 += 1, R879 += 1, R80 += 1, R81 += 1 };
  s0 -> s5 [75, 75] { R923 += 1, R879 += 1, R81 += 1 };
  s0 -> s6 [75, 75] { R923 += 1, R879 += 1, R80 += 1, R81 += 1 };
  s0 -> s7 [75, 75] { R923 += 1, R879 += 1, R81 += 1 };
  s0 -> s1 [76, 87] { R923 += 1, R879 += 1, R81 += 1 };
  s0 -> s2 [76, 65535] { R923 += 1, R879 += 1, R80 += 1, R81 += 1 };
  s0 -> s8 [89, 89] { R923 += 1, R879 += 1, R81 += 1 };
  s0 -> s1 [90, 65535] { R923 += 1, R879 += 1, R81 += 1 };
  s1 -> s1 [0, 74] { R923 += 1, R879 += 1, R81 += 1 };
  s1 -> s5 [75, 75] { R923 += 1, R879 += 1, R81 += 1 };
  s1 -> s7 [75, 75] { R923 += 1, R879 += 1, R81 += 1 };
  s1 -> s1 [76, 87] { R923 += 1, R879 += 1, R81 += 1 };
  s1 -> s8 [89, 89] { R923 += 1, R879 += 1, R81 += 1 };
  s1 -> s1 [90, 65535] { R923 += 1, R879 += 1, R81 += 1 };
  s2 -> s1 [0, 74] { R923 += 1, R879 += 1, R81 += 1 };
  s2 -> s2 [0, 74] { R923 += 1, R879 += 1, R80 += 1, R81 += 1 };
  s2 -> s4 [75, 75] { R923 += 1, R879 += 1, R80 += 1, R81 += 1 };
  s2 -> s5 [75, 75] { R923 += 1, R879 += 1, R81 += 1 };
  s2 -> s6 [75, 75] { R923 += 1, R879 += 1, R80 += 1, R81 += 1 };
  s2 -> s7 [75, 75] { R923 += 1, R879 += 1, R81 += 1 };
  s2 -> s1 [76, 87] { R923 += 1, R879 += 1, R81 += 1 };
  s2 -> s2 [76, 65535] { R923 += 1, R879 += 1, R80 += 1, R81 += 1 };
  s2 -> s8 [89, 89] { R923 += 1, R879 += 1, R81 += 1 };
  s2 -> s1 [90, 65535] { R923 += 1, R879 += 1, R81 += 1 };
  s3 -> s1 [0, 74] { R923 += 1, R879 += 1, R81 += 1 };
  s3 -> s2 [0, 74] { R923 += 1, R879 += 1, R80 += 1, R81 += 1 };
  s3 -> s3 [0, 65535] { R923 += 1, R878 += 1, R879 += 1 };
  s3 -> s4 [75, 75] { R923 += 1, R879 += 1, R80 += 1, R81 += 1 };
  s3 -> s5 [75, 75] { R923 += 1, R879 += 1, R81 += 1 };
  s3 -> s6 [75, 75] { R923 += 1, R879 += 1, R80 += 1, R81 += 1 };
  s3 -> s7 [75, 75] { R923 += 1, R879 += 1, R81 += 1 };
  s3 -> s1 [76, 87] { R923 += 1, R879 += 1, R81 += 1 };
  s3 -> s2 [76, 65535] { R923 += 1, R879 += 1, R80 += 1, R81 += 1 };
  s3 -> s8 [89, 89] { R923 += 1, R879 += 1, R81 += 1 };
  s3 -> s1 [90, 65535] { R923 += 1, R879 += 1, R81 += 1 };
  s6 -> s7 [0, 87] { R923 += 1, R879 += 1, R81 += 1 };
  s6 -> s6 [0, 65535] { R923 += 1, R879 += 1, R80 += 1, R81 += 1 };
  s6 -> s11 [89, 89] { R923 += 1, R879 += 1, R81 += 1 };
  s6 -> s7 [90, 65535] { R923 += 1, R879 += 1, R81 += 1 };
  s7 -> s7 [0, 87] { R923 += 1, R879 += 1, R81 += 1 };
  s7 -> s11 [89, 89] { R923 += 1, R879 += 1, R81 += 1 };
  s7 -> s7 [90, 65535] { R923 += 1, R879 += 1, R81 += 1 };
  s8 -> s8 [0, 74] { R923 += 1, R879 += 1, R81 += 1 };
  s8 -> s8 [0, 65535] { R923 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [75, 75] { R923 += 1, R879 += 1 };
  s8 -> s11 [75, 75] { R923 += 1, R879 += 1 };
  s8 -> s8 [76, 87] { R923 += 1, R879 += 1, R81 += 1 };
  s8 -> s8 [76, 65535] { R923 += 1, R879 += 1 };
  s8 -> s8 [89, 65535] { R923 += 1, R879 += 1, R81 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R923 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s11 [0, 87] { R923 += 1, R879 += 1, R81 += 1 };
  s11 -> s12 [0, 65535] { R923 += 1 };
  s11 -> s11 [0, 65535] { R923 += 1, R879 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [89, 65535] { R923 += 1, R879 += 1, R81 += 1 };
  s12 -> s12 [0, 65535] { R923 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 74] { R925 += 1, R881 += 1, R507 += 1, R508 += 1 };
  s0 -> s2 [0, 74] { R925 += 1, R881 += 1, R506 += 1, R507 += 1 };
  s0 -> s0 [0, 65535] { R924 += 1, R925 += 1 };
  s0 -> s3 [0, 65535] { R925 += 1, R880 += 1, R881 += 1 };
  s0 -> s4 [75, 75] { R925 += 1, R881 += 1, R507 += 1, R508 += 1 };
  s0 -> s5 [75, 75] { R925 += 1, R881 += 1, R506 += 1, R507 += 1 };
  s0 -> s6 [75, 75] { R925 += 1, R881 += 1, R506 += 1, R507 += 1 };
  s0 -> s7 [75, 75] { R925 += 1, R881 += 1, R507 += 1, R508 += 1 };
  s0 -> s1 [76, 65535] { R925 += 1, R881 += 1, R507 += 1, R508 += 1 };
  s0 -> s2 [76, 65535] { R925 += 1, R881 += 1, R506 += 1, R507 += 1 };
  s1 -> s1 [0, 74] { R925 += 1, R881 += 1, R507 += 1, R508 += 1 };
  s1 -> s1 [0, 65535] { R925 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s4 [75, 75] { R925 += 1, R881 += 1, R507 += 1, R508 += 1 };
  s1 -> s7 [75, 75] { R925 += 1, R881 += 1, R507 += 1, R508 += 1 };
  s1 -> s1 [76, 65535] { R925 += 1, R881 += 1, R507 += 1, R508 += 1 };
  s2 -> s1 [0, 74] { R925 += 1, R881 += 1, R507 += 1, R508 += 1 };
  s2 -> s2 [0, 74] { R925 += 1, R881 += 1, R506 += 1, R507 += 1 };
  s2 -> s4 [75, 75] { R925 += 1, R881 += 1, R507 += 1, R508 += 1 };
  s2 -> s5 [75, 75] { R925 += 1, R881 += 1, R506 += 1, R507 += 1 };
  s2 -> s6 [75, 75] { R925 += 1, R881 += 1, R506 += 1, R507 += 1 };
  s2 -> s7 [75, 75] { R925 += 1, R881 += 1, R507 += 1, R508 += 1 };
  s2 -> s1 [76, 65535] { R925 += 1, R881 += 1, R507 += 1, R508 += 1 };
  s2 -> s2 [76, 65535] { R925 += 1, R881 += 1, R506 += 1, R507 += 1 };
  s3 -> s1 [0, 74] { R925 += 1, R881 += 1, R507 += 1, R508 += 1 };
  s3 -> s2 [0, 74] { R925 += 1, R881 += 1, R506 += 1, R507 += 1 };
  s3 -> s3 [0, 65535] { R925 += 1, R880 += 1, R881 += 1 };
  s3 -> s4 [75, 75] { R925 += 1, R881 += 1, R507 += 1, R508 += 1 };
  s3 -> s5 [75, 75] { R925 += 1, R881 += 1, R506 += 1, R507 += 1 };
  s3 -> s6 [75, 75] { R925 += 1, R881 += 1, R506 += 1, R507 += 1 };
  s3 -> s7 [75, 75] { R925 += 1, R881 += 1, R507 += 1, R508 += 1 };
  s3 -> s1 [76, 65535] { R925 += 1, R881 += 1, R507 += 1, R508 += 1 };
  s3 -> s2 [76, 65535] { R925 += 1, R881 += 1, R506 += 1, R507 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s4 [0, 65535] { R925 += 1, R881 += 1, R507 += 1, R508 += 1 };
  s4 -> s9 [0, 65535] { R925 += 1 };
  s5 -> s4 [0, 65535] { R925 += 1, R881 += 1, R507 += 1, R508 += 1 };
  s5 -> s5 [0, 65535] { R925 += 1, R881 += 1, R506 += 1, R507 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R925 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R925 += 1 };
  accepting s4, s8, s9, s1, s7;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 74] { R927 += 1, R883 += 1, R825 += 1 };
  s0 -> s2 [0, 74] { R927 += 1, R883 += 1, R824 += 1, R825 += 1 };
  s0 -> s0 [0, 65535] { R926 += 1, R927 += 1 };
  s0 -> s3 [0, 65535] { R927 += 1, R882 += 1, R883 += 1 };
  s0 -> s4 [75, 75] { R927 += 1, R883 += 1, R824 += 1, R825 += 1 };
  s0 -> s5 [75, 75] { R927 += 1, R883 += 1, R825 += 1 };
  s0 -> s6 [75, 75] { R927 += 1, R883 += 1, R825 += 1 };
  s0 -> s7 [75, 75] { R927 += 1, R883 += 1, R824 += 1, R825 += 1 };
  s0 -> s1 [76, 86] { R927 += 1, R883 += 1, R825 += 1 };
  s0 -> s2 [76, 65535] { R927 += 1, R883 += 1, R824 += 1, R825 += 1 };
  s0 -> s8 [87, 87] { R927 += 1, R883 += 1, R825 += 1 };
  s0 -> s1 [90, 65535] { R927 += 1, R883 += 1, R825 += 1 };
  s1 -> s1 [0, 74] { R927 += 1, R883 += 1, R825 += 1 };
  s1 -> s5 [75, 75] { R927 += 1, R883 += 1 };
  s1 -> s6 [75, 75] { R927 += 1, R883 += 1 };
  s1 -> s1 [76, 86] { R927 += 1, R883 += 1, R825 += 1 };
  s1 -> s1 [76, 65535] { R927 += 1, R883 += 1 };
  s1 -> s8 [87, 87] { R927 += 1, R883 += 1, R825 += 1 };
  s1 -> s1 [90, 65535] { R927 += 1, R883 += 1, R825 += 1 };
  s2 -> s1 [0, 74] { R927 += 1, R883 += 1, R825 += 1 };
  s2 -> s2 [0, 74] { R927 += 1, R883 += 1, R824 += 1, R825 += 1 };
  s2 -> s4 [75, 75] { R927 += 1, R883 += 1, R824 += 1, R825 += 1 };
  s2 -> s5 [75, 75] { R927 += 1, R883 += 1, R825 += 1 };
  s2 -> s6 [75, 75] { R927 += 1, R883 += 1, R825 += 1 };
  s2 -> s7 [75, 75] { R927 += 1, R883 += 1, R824 += 1, R825 += 1 };
  s2 -> s1 [76, 86] { R927 += 1, R883 += 1, R825 += 1 };
  s2 -> s2 [76, 65535] { R927 += 1, R883 += 1, R824 += 1, R825 += 1 };
  s2 -> s8 [87, 87] { R927 += 1, R883 += 1, R825 += 1 };
  s2 -> s1 [90, 65535] { R927 += 1, R883 += 1, R825 += 1 };
  s3 -> s1 [0, 74] { R927 += 1, R883 += 1, R825 += 1 };
  s3 -> s2 [0, 74] { R927 += 1, R883 += 1, R824 += 1, R825 += 1 };
  s3 -> s3 [0, 65535] { R927 += 1, R882 += 1, R883 += 1 };
  s3 -> s4 [75, 75] { R927 += 1, R883 += 1, R824 += 1, R825 += 1 };
  s3 -> s5 [75, 75] { R927 += 1, R883 += 1, R825 += 1 };
  s3 -> s6 [75, 75] { R927 += 1, R883 += 1, R825 += 1 };
  s3 -> s7 [75, 75] { R927 += 1, R883 += 1, R824 += 1, R825 += 1 };
  s3 -> s1 [76, 86] { R927 += 1, R883 += 1, R825 += 1 };
  s3 -> s2 [76, 65535] { R927 += 1, R883 += 1, R824 += 1, R825 += 1 };
  s3 -> s8 [87, 87] { R927 += 1, R883 += 1, R825 += 1 };
  s3 -> s1 [90, 65535] { R927 += 1, R883 += 1, R825 += 1 };
  s4 -> s6 [0, 86] { R927 += 1, R883 += 1, R825 += 1 };
  s4 -> s4 [0, 65535] { R927 += 1, R883 += 1, R824 += 1, R825 += 1 };
  s4 -> s11 [87, 87] { R927 += 1, R883 += 1, R825 += 1 };
  s4 -> s6 [90, 65535] { R927 += 1, R883 += 1, R825 += 1 };
  s6 -> s6 [0, 86] { R927 += 1, R883 += 1, R825 += 1 };
  s6 -> s6 [0, 65535] { R927 += 1, R883 += 1 };
  s6 -> s11 [87, 87] { R927 += 1, R883 += 1, R825 += 1 };
  s6 -> s6 [90, 65535] { R927 += 1, R883 += 1, R825 += 1 };
  s8 -> s8 [0, 74] { R927 += 1, R883 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R927 += 1 };
  s8 -> s10 [75, 75] { R927 += 1, R883 += 1 };
  s8 -> s11 [75, 75] { R927 += 1, R883 += 1 };
  s8 -> s8 [76, 65535] { R927 += 1, R883 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R927 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s9 [0, 65535];
  s11 -> s12 [0, 65535] { R927 += 1 };
  s11 -> s11 [0, 65535] { R927 += 1, R883 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R927 += 1 };
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [107, 107];
  accepting s1;
};
};
constraint R2 = R927 && R20 - R927 = -1 && R21 = R927 && R22 - R927 = -1 && R23 = R927 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R83 + -1*R81 - R53 = 0 && R52 + R82 + R80 = 0 && R868 = 0 && R869 = 0 && R878 = 0 && R879 = 0 && R880 = 0 && R881 = 0 && R882 = 0 && R883 = 0 && R884 = 0 && R885 = R927 && R886 = 0 && R887 = R927 && R888 = 0 && R889 = R927 && R890 = 0 && R891 = R927 && R892 = 0 && R893 = R927 && R894 = 0 && R895 = R927 && R896 = 0 && R897 = R927 && R898 = 0 && R899 = R927 && R900 = 0 && R901 = R927 && R902 = 0 && R903 = R927 && R904 = 0 && R905 = R927 && R906 = 0 && R907 = R927 && R908 = 0 && R909 = R927 && R910 = 0 && R911 = R927 && R912 = 0 && R913 = R927 && R914 = 0 && R915 = R927 && R916 = 0 && R917 = R927 && R918 = 0 && R919 = R927 && R920 = 0 && R921 = R927 && R922 = 0 && R923 = R927 && R924 = 0 && R925 = R927 && R926 = 0 && -1 < R1 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R83 + -1*R81 - R53 < 1 && 0 < R927 && (R1 != 0 || R17 = 0 || (R828 = 0 && R829 = 0)) && (R1 != 0 || R17 = 0 || (R830 = 0 && R831 = 0)) && (R1 != 0 || R17 = 0 || (R832 = 0 && R833 = 0)) && (R1 != 0 || R17 = 0 || (R834 = 0 && R835 = 0)) && (R1 != 0 || R17 = 0 || (R836 = 0 && R837 = 0)) && (R1 != 0 || R17 = 0 || (R838 = 0 && R839 = 0)) && (R1 != 0 || R17 = 0 || (R840 = 0 && R841 = 0)) && (R1 != 0 || R17 = 0 || (R842 = 0 && R843 = 0)) && (R1 != 0 || R17 = 0 || (R844 = 0 && R845 = 0)) && (R1 != 0 || R17 = 0 || (R846 = 0 && R847 = 0)) && (R48 + R79 + R76 != 0 || ((R42 + R72 + R70 != 0 || R43 + R73 + R71 + -1*R83 + -1*R81 - R53 = 0 || R53 + R83 + R81 < 1) && (R42 + R72 + R70 = 0 || R53 + R83 + R81 < 1))) && (R48 + R79 + R76 != 0 || ((R46 + R77 + R74 != 0 || R47 + R78 + R75 + -1*R83 + -1*R81 - R53 = 0 || R53 + R83 + R81 < 1) && (R46 + R77 + R74 = 0 || R53 + R83 + R81 < 1))) && (R828 != 0 || R1 = R829 || R1 < 1) && (R830 != 0 || R1 = R831 || R1 < 1) && (R832 != 0 || R1 = R833 || R1 < 1) && (R834 != 0 || R1 = R835 || R1 < 1) && (R836 != 0 || R1 = R837 || R1 < 1) && (R838 != 0 || R1 = R839 || R1 < 1) && (R840 != 0 || R1 = R841 || R1 < 1) && (R842 != 0 || R1 = R843 || R1 < 1) && (R844 != 0 || R1 = R845 || R1 < 1) && (R846 != 0 || R1 = R847 || R1 < 1) && (R18 = 0 || (R866 = 0 && R867 = 0)) && (R18 = 0 || (R870 = 0 && R871 = 0)) && (R18 = 0 || (R872 = 0 && R873 = 0)) && (R18 = 0 || (R874 = 0 && R875 = 0)) && (R18 = 0 || (R876 = 0 && R877 = 0)) && (R19 = 0 || (R848 = 0 && R849 = 0)) && (R19 = 0 || (R850 = 0 && R851 = 0)) && (R19 = 0 || (R852 = 0 && R853 = 0)) && (R19 = 0 || (R854 = 0 && R855 = 0)) && (R19 = 0 || (R856 = 0 && R857 = 0)) && (R19 = 0 || (R858 = 0 && R859 = 0)) && (R19 = 0 || (R860 = 0 && R861 = 0)) && (R19 = 0 || (R862 = 0 && R863 = 0)) && (R19 = 0 || (R864 = 0 && R865 = 0)) && (R48 + R79 + R76 = 0 || (R42 + R72 + R70 = 0 && R43 + R73 + R71 + -1*R83 + -1*R81 - R53 = 0)) && (R48 + R79 + R76 = 0 || (R46 + R77 + R74 = 0 && R47 + R78 + R75 + -1*R83 + -1*R81 - R53 = 0)) && (R58 + R511 + R508 = 0 || (R56 + R509 + R506 = 0 && R57 + R510 + R507 = 0)) && (R58 + R511 + R508 = 0 || (R62 + R826 + R824 = 0 && R63 + R827 + R825 = 0)) && (R828 = 0 || R1 < 1) && (R830 = 0 || R1 < 1) && (R832 = 0 || R1 < 1) && (R834 = 0 || R1 < 1) && (R836 = 0 || R1 < 1) && (R838 = 0 || R1 < 1) && (R840 = 0 || R1 < 1) && (R842 = 0 || R1 < 1) && (R844 = 0 || R1 < 1) && (R846 = 0 || R1 < 1);
// End of Parikh automata intersection problem
