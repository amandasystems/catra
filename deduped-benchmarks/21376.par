// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R12, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R2620, R2621, R2622, R2623, R27, R3, R3046, R3047, R3048, R3049, R3050, R3051, R3364, R3365, R3366, R3367, R3368, R3369, R3370, R3371, R3372, R3373, R3374, R3375, R3376, R3377, R3378, R3379, R3380, R3381, R3382, R3383, R3384, R3385, R3386, R3387, R3388, R3389, R3390, R3391, R3392, R3393, R3394, R3395, R3396, R3397, R3398, R3399, R3400, R3401, R3402, R3403, R3404, R3405, R3406, R3407, R3408, R3409, R3410, R3411, R3412, R3413, R3414, R3415, R3416, R3417, R3418, R3419, R3420, R3421, R3422, R3423, R3424, R3425, R3426, R3427, R3428, R3429, R3430, R3431, R3432, R3433, R3434, R3435, R3436, R3437, R3438, R3439, R3440, R3441, R3442, R3443, R3444, R3445, R3446, R3447, R3448, R3449, R3450, R3451, R3452, R3453, R3454, R3455, R3456, R3457, R3458, R3459, R3460, R3461, R3462, R3463, R3464, R3465, R3466, R3467, R38, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R70, R71, R72, R73, R74, R75, R76, R77, R78, R79, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 72];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [73, 73];
  s0 -> s1 [74, 65535];
  s1 -> s1 [0, 72];
  s1 -> s2 [73, 73];
  s1 -> s1 [74, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s1 [0, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s1 [0, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R3389 += 1, R19 += 1 };
  s0 -> s0 [0, 65535] { R3388 += 1, R3389 += 1 };
  s1 -> s1 [0, 65535] { R3389 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 72] { R3391 += 1 };
  s0 -> s0 [0, 65535] { R3390 += 1, R3391 += 1 };
  s0 -> s2 [73, 73] { R3391 += 1 };
  s0 -> s3 [73, 73] { R3391 += 1 };
  s0 -> s1 [78, 65535] { R3391 += 1 };
  s1 -> s1 [0, 72] { R3391 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R3391 += 1 };
  s1 -> s3 [73, 73] { R3391 += 1 };
  s1 -> s1 [78, 65535] { R3391 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 73] { R3391 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [78, 65535] { R3391 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 72] { R3393 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R3392 += 1, R3393 += 1 };
  s0 -> s2 [73, 73] { R3393 += 1, R38 += 1 };
  s0 -> s3 [73, 73] { R3393 += 1, R38 += 1 };
  s0 -> s1 [74, 65535] { R3393 += 1, R38 += 1 };
  s1 -> s1 [0, 72] { R3393 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R3393 += 1, R38 += 1 };
  s1 -> s3 [73, 73] { R3393 += 1, R38 += 1 };
  s1 -> s1 [74, 65535] { R3393 += 1, R38 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3393 += 1, R38 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 72] { R3395 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R3394 += 1, R3395 += 1 };
  s0 -> s2 [73, 73] { R3395 += 1, R40 += 1 };
  s0 -> s3 [73, 73] { R3395 += 1, R40 += 1 };
  s0 -> s1 [74, 65535] { R3395 += 1, R40 += 1 };
  s1 -> s1 [0, 72] { R3395 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R3395 += 1, R40 += 1 };
  s1 -> s3 [73, 73] { R3395 += 1, R40 += 1 };
  s1 -> s1 [74, 65535] { R3395 += 1, R40 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3395 += 1, R40 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 72] { R3397 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R3396 += 1, R3397 += 1 };
  s0 -> s2 [73, 73] { R3397 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [73, 73] { R3397 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [74, 65535] { R3397 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 72] { R3397 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R3397 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [73, 73] { R3397 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [74, 65535] { R3397 += 1, R42 += 1, R43 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3397 += 1, R42 += 1, R43 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 72] { R3399 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R3398 += 1, R3399 += 1 };
  s0 -> s2 [73, 73] { R3399 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [73, 73] { R3399 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [74, 65535] { R3399 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 72] { R3399 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R3399 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [73, 73] { R3399 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [74, 65535] { R3399 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3399 += 1, R46 += 1, R47 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 72] { R3401 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R3400 += 1, R3401 += 1 };
  s0 -> s2 [73, 73] { R3401 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [73, 73] { R3401 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [74, 65535] { R3401 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 72] { R3401 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R3401 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [73, 73] { R3401 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [74, 65535] { R3401 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535] { R3401 += 1, R52 += 1, R53 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 72] { R3403 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R3402 += 1, R3403 += 1 };
  s0 -> s2 [73, 73] { R3403 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [73, 73] { R3403 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [74, 65535] { R3403 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 72] { R3403 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R3403 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [73, 73] { R3403 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [74, 65535] { R3403 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3403 += 1, R56 += 1, R57 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 72] { R3405 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R3404 += 1, R3405 += 1 };
  s0 -> s2 [73, 73] { R3405 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [73, 73] { R3405 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [74, 65535] { R3405 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 72] { R3405 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R3405 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [73, 73] { R3405 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [74, 65535] { R3405 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535] { R3405 += 1, R62 += 1, R63 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 72] { R3425 += 1 };
  s0 -> s0 [0, 65535] { R3424 += 1, R3425 += 1 };
  s0 -> s2 [73, 73] { R3425 += 1 };
  s0 -> s1 [74, 65535] { R3425 += 1 };
  s1 -> s1 [0, 72] { R3425 += 1 };
  s1 -> s2 [73, 73] { R3425 += 1 };
  s1 -> s1 [74, 65535] { R3425 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3425 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R3426 += 1, R3427 += 1 };
  s0 -> s1 [0, 65535] { R3427 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R3427 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 72] { R3429 += 1 };
  s0 -> s0 [0, 65535] { R3428 += 1, R3429 += 1 };
  s0 -> s2 [0, 65535] { R3429 += 1, R8 += 1 };
  s0 -> s3 [73, 73] { R3429 += 1 };
  s0 -> s1 [74, 65535] { R3429 += 1 };
  s1 -> s1 [0, 72] { R3429 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [73, 73] { R3429 += 1 };
  s1 -> s1 [74, 65535] { R3429 += 1 };
  s2 -> s1 [0, 72] { R3429 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3429 += 1, R8 += 1 };
  s2 -> s3 [73, 73] { R3429 += 1 };
  s2 -> s1 [74, 65535] { R3429 += 1 };
  s3 -> s3 [0, 65535] { R3429 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 72] { R3431 += 1, R3369 += 1 };
  s0 -> s0 [0, 65535] { R3430 += 1, R3431 += 1 };
  s0 -> s2 [0, 65535] { R3431 += 1, R3368 += 1, R3369 += 1 };
  s0 -> s1 [74, 65535] { R3431 += 1, R3369 += 1 };
  s1 -> s1 [0, 72] { R3431 += 1, R3369 += 1 };
  s1 -> s1 [0, 65535] { R3431 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [74, 65535] { R3431 += 1, R3369 += 1 };
  s2 -> s1 [0, 72] { R3431 += 1, R3369 += 1 };
  s2 -> s2 [0, 65535] { R3431 += 1, R3368 += 1, R3369 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [74, 65535] { R3431 += 1, R3369 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R3433 += 1, R3370 += 1, R3371 += 1 };
  s0 -> s2 [0, 65535] { R3433 += 1, R3371 += 1, R17 += 1 };
  s0 -> s0 [0, 65535] { R3432 += 1, R3433 += 1 };
  s1 -> s1 [0, 65535] { R3433 += 1, R3370 += 1, R3371 += 1 };
  s1 -> s2 [0, 65535] { R3433 += 1, R3371 += 1, R17 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3433 += 1, R3371 += 1, R17 += 1 };
  s2 -> s3 [0, 65535] { R3433 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3433 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 73] { R3435 += 1, R3373 += 1 };
  s0 -> s0 [0, 65535] { R3434 += 1, R3435 += 1 };
  s0 -> s2 [0, 65535] { R3435 += 1, R3372 += 1, R3373 += 1 };
  s0 -> s1 [77, 65535] { R3435 += 1, R3373 += 1 };
  s1 -> s1 [0, 73] { R3435 += 1, R3373 += 1 };
  s1 -> s1 [0, 65535] { R3435 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [77, 65535] { R3435 += 1, R3373 += 1 };
  s2 -> s1 [0, 73] { R3435 += 1, R3373 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3435 += 1, R3372 += 1, R3373 += 1 };
  s2 -> s1 [77, 65535] { R3435 += 1, R3373 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R3437 += 1, R3375 += 1, R67 += 1 };
  s0 -> s0 [0, 65535] { R3436 += 1, R3437 += 1 };
  s0 -> s2 [0, 65535] { R3437 += 1, R3374 += 1, R3375 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R3437 += 1 };
  s1 -> s1 [0, 65535] { R3437 += 1, R3375 += 1, R67 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3437 += 1, R3375 += 1, R67 += 1 };
  s2 -> s2 [0, 65535] { R3437 += 1, R3374 += 1, R3375 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3437 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 76] { R3439 += 1, R3377 += 1 };
  s0 -> s0 [0, 65535] { R3438 += 1, R3439 += 1 };
  s0 -> s2 [0, 65535] { R3439 += 1, R3376 += 1, R3377 += 1 };
  s0 -> s3 [0, 65535] { R3439 += 1, R3377 += 1, R69 += 1 };
  s0 -> s1 [78, 65535] { R3439 += 1, R3377 += 1 };
  s1 -> s1 [0, 76] { R3439 += 1, R3377 += 1 };
  s1 -> s1 [0, 65535] { R3439 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [78, 65535] { R3439 += 1, R3377 += 1 };
  s2 -> s1 [0, 76] { R3439 += 1, R3377 += 1 };
  s2 -> s2 [0, 65535] { R3439 += 1, R3376 += 1, R3377 += 1 };
  s2 -> s3 [0, 65535] { R3439 += 1, R3377 += 1, R69 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [78, 65535] { R3439 += 1, R3377 += 1 };
  s3 -> s1 [0, 76] { R3439 += 1, R3377 += 1 };
  s3 -> s3 [0, 65535] { R3439 += 1, R3377 += 1, R69 += 1 };
  s3 -> s4 [0, 65535] { R3439 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [78, 65535] { R3439 += 1, R3377 += 1 };
  s4 -> s4 [0, 65535] { R3439 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 76] { R3441 += 1, R3379 += 1, R73 += 1 };
  s0 -> s2 [0, 65535] { R3441 += 1, R3378 += 1, R3379 += 1 };
  s0 -> s0 [0, 65535] { R3440 += 1, R3441 += 1 };
  s0 -> s3 [0, 65535] { R3441 += 1, R3379 += 1, R72 += 1, R73 += 1 };
  s0 -> s1 [78, 65535] { R3441 += 1, R3379 += 1, R73 += 1 };
  s1 -> s1 [0, 76] { R3441 += 1, R3379 += 1, R73 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R3441 += 1, R3379 += 1 };
  s1 -> s5 [0, 65535] { R3441 += 1 };
  s1 -> s1 [78, 65535] { R3441 += 1, R3379 += 1, R73 += 1 };
  s2 -> s1 [0, 76] { R3441 += 1, R3379 += 1, R73 += 1 };
  s2 -> s2 [0, 65535] { R3441 += 1, R3378 += 1, R3379 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R3441 += 1, R3379 += 1, R72 += 1, R73 += 1 };
  s2 -> s1 [78, 65535] { R3441 += 1, R3379 += 1, R73 += 1 };
  s3 -> s1 [0, 76] { R3441 += 1, R3379 += 1, R73 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3441 += 1, R3379 += 1, R72 += 1, R73 += 1 };
  s3 -> s5 [0, 65535] { R3441 += 1 };
  s3 -> s1 [78, 65535] { R3441 += 1, R3379 += 1, R73 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3441 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s0 [0, 65535] { R3442 += 1, R3443 += 1 };
  s0 -> s1 [0, 65535] { R3443 += 1, R3381 += 1, R78 += 1, R79 += 1 };
  s0 -> s2 [0, 65535] { R3443 += 1, R3381 += 1, R77 += 1, R78 += 1 };
  s0 -> s3 [0, 65535] { R3443 += 1, R3380 += 1, R3381 += 1 };
  s1 -> s6 [0, 65535] { R3443 += 1, R3381 += 1 };
  s1 -> s5 [0, 65535] { R3443 += 1 };
  s1 -> s1 [0, 65535] { R3443 += 1, R3381 += 1, R78 += 1, R79 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R3443 += 1 };
  s2 -> s1 [0, 65535] { R3443 += 1, R3381 += 1, R78 += 1, R79 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3443 += 1, R3381 += 1, R77 += 1, R78 += 1 };
  s3 -> s1 [0, 65535] { R3443 += 1, R3381 += 1, R78 += 1, R79 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R3443 += 1, R3381 += 1, R77 += 1, R78 += 1 };
  s3 -> s3 [0, 65535] { R3443 += 1, R3380 += 1, R3381 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3443 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R3443 += 1, R3381 += 1 };
  s6 -> s5 [0, 65535] { R3443 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 77] { R3445 += 1, R3383 += 1, R2623 += 1 };
  s0 -> s0 [0, 65535] { R3444 += 1, R3445 += 1 };
  s0 -> s2 [0, 65535] { R3445 += 1, R3382 += 1, R3383 += 1 };
  s0 -> s3 [0, 65535] { R3445 += 1, R3383 += 1, R2622 += 1, R2623 += 1 };
  s0 -> s4 [82, 82] { R3445 += 1, R3383 += 1, R2623 += 1 };
  s0 -> s1 [83, 65535] { R3445 += 1, R3383 += 1, R2623 += 1 };
  s1 -> s1 [0, 77] { R3445 += 1, R3383 += 1, R2623 += 1 };
  s1 -> s4 [82, 82] { R3445 += 1, R3383 += 1, R2623 += 1 };
  s1 -> s1 [83, 65535] { R3445 += 1, R3383 += 1, R2623 += 1 };
  s2 -> s1 [0, 77] { R3445 += 1, R3383 += 1, R2623 += 1 };
  s2 -> s2 [0, 65535] { R3445 += 1, R3382 += 1, R3383 += 1 };
  s2 -> s3 [0, 65535] { R3445 += 1, R3383 += 1, R2622 += 1, R2623 += 1 };
  s2 -> s4 [82, 82] { R3445 += 1, R3383 += 1, R2623 += 1 };
  s2 -> s1 [83, 65535] { R3445 += 1, R3383 += 1, R2623 += 1 };
  s3 -> s1 [0, 77] { R3445 += 1, R3383 += 1, R2623 += 1 };
  s3 -> s3 [0, 65535] { R3445 += 1, R3383 += 1, R2622 += 1, R2623 += 1 };
  s3 -> s4 [82, 82] { R3445 += 1, R3383 += 1, R2623 += 1 };
  s3 -> s1 [83, 65535] { R3445 += 1, R3383 += 1, R2623 += 1 };
  s4 -> s4 [0, 77] { R3445 += 1, R3383 += 1, R2623 += 1 };
  s4 -> s5 [0, 65535] { R3445 += 1 };
  s4 -> s4 [0, 65535] { R3445 += 1, R3383 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [82, 65535] { R3445 += 1, R3383 += 1, R2623 += 1 };
  s5 -> s5 [0, 65535] { R3445 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s4, s5, s6;
};
automaton value2_28 {
  init s0;
  s0 -> s0 [0, 65535] { R3446 += 1, R3447 += 1 };
  s0 -> s1 [0, 65535] { R3447 += 1, R3385 += 1, R3050 += 1, R3051 += 1 };
  s0 -> s2 [0, 65535] { R3447 += 1, R3384 += 1, R3385 += 1 };
  s0 -> s3 [0, 65535] { R3447 += 1, R3385 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R3447 += 1, R3385 += 1, R3050 += 1, R3051 += 1 };
  s1 -> s5 [0, 65535] { R3447 += 1 };
  s1 -> s3 [0, 65535] { R3447 += 1, R3385 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R3447 += 1, R3385 += 1, R3050 += 1, R3051 += 1 };
  s2 -> s2 [0, 65535] { R3447 += 1, R3384 += 1, R3385 += 1 };
  s2 -> s3 [0, 65535] { R3447 += 1, R3385 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R3447 += 1 };
  s3 -> s3 [0, 65535] { R3447 += 1, R3385 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3447 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 77] { R3449 += 1, R3387 += 1, R3367 += 1 };
  s0 -> s2 [0, 65535] { R3449 += 1, R3386 += 1, R3387 += 1 };
  s0 -> s0 [0, 65535] { R3448 += 1, R3449 += 1 };
  s0 -> s1 [0, 65535] { R3449 += 1, R3387 += 1 };
  s0 -> s1 [83, 65535] { R3449 += 1, R3387 += 1, R3367 += 1 };
  s1 -> s1 [0, 77] { R3449 += 1, R3387 += 1, R3367 += 1 };
  s1 -> s4 [0, 65535] { R3449 += 1 };
  s1 -> s1 [0, 65535] { R3449 += 1, R3387 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [83, 65535] { R3449 += 1, R3387 += 1, R3367 += 1 };
  s2 -> s1 [0, 77] { R3449 += 1, R3387 += 1, R3367 += 1 };
  s2 -> s2 [0, 65535] { R3449 += 1, R3386 += 1, R3387 += 1 };
  s2 -> s1 [0, 65535] { R3449 += 1, R3387 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [83, 65535] { R3449 += 1, R3387 += 1, R3367 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3449 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s0 [0, 65535] { R3450 += 1, R3451 += 1 };
  s0 -> s1 [0, 65535] { R3451 += 1, R3406 += 1, R3407 += 1 };
  s0 -> s2 [0, 65535] { R3451 += 1, R3407 += 1, R18 += 1 };
  s1 -> s1 [0, 65535] { R3451 += 1, R3406 += 1, R3407 += 1 };
  s1 -> s2 [0, 65535] { R3451 += 1, R3407 += 1, R18 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3451 += 1, R3407 += 1, R18 += 1 };
  s2 -> s3 [0, 65535] { R3451 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3451 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 72] { R3453 += 1, R3409 += 1 };
  s0 -> s2 [0, 65535] { R3453 += 1, R3408 += 1, R3409 += 1 };
  s0 -> s0 [0, 65535] { R3452 += 1, R3453 += 1 };
  s0 -> s3 [73, 73] { R3453 += 1, R3409 += 1 };
  s0 -> s4 [73, 73] { R3453 += 1, R3409 += 1 };
  s0 -> s5 [77, 77] { R3453 += 1, R3409 += 1 };
  s0 -> s1 [78, 65535] { R3453 += 1, R3409 += 1 };
  s1 -> s1 [0, 72] { R3453 += 1, R3409 += 1 };
  s1 -> s3 [73, 73] { R3453 += 1, R3409 += 1 };
  s1 -> s4 [73, 73] { R3453 += 1, R3409 += 1 };
  s1 -> s5 [77, 77] { R3453 += 1, R3409 += 1 };
  s1 -> s1 [78, 65535] { R3453 += 1, R3409 += 1 };
  s2 -> s1 [0, 72] { R3453 += 1, R3409 += 1 };
  s2 -> s2 [0, 65535] { R3453 += 1, R3408 += 1, R3409 += 1 };
  s2 -> s3 [73, 73] { R3453 += 1, R3409 += 1 };
  s2 -> s4 [73, 73] { R3453 += 1, R3409 += 1 };
  s2 -> s5 [77, 77] { R3453 += 1, R3409 += 1 };
  s2 -> s1 [78, 65535] { R3453 += 1, R3409 += 1 };
  s3 -> s3 [0, 73] { R3453 += 1, R3409 += 1 };
  s3 -> s8 [77, 77] { R3453 += 1, R3409 += 1 };
  s3 -> s3 [78, 65535] { R3453 += 1, R3409 += 1 };
  s5 -> s5 [0, 72] { R3453 += 1, R3409 += 1 };
  s5 -> s5 [0, 65535] { R3453 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [73, 73] { R3453 += 1, R3409 += 1 };
  s5 -> s8 [73, 73] { R3453 += 1, R3409 += 1 };
  s5 -> s5 [77, 65535] { R3453 += 1, R3409 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R3453 += 1 };
  s8 -> s8 [0, 73] { R3453 += 1, R3409 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R3453 += 1 };
  s8 -> s8 [77, 65535] { R3453 += 1, R3409 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 72] { R3455 += 1, R3411 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R3454 += 1, R3455 += 1 };
  s0 -> s2 [0, 65535] { R3455 += 1, R3410 += 1, R3411 += 1 };
  s0 -> s3 [73, 73] { R3455 += 1, R3411 += 1, R66 += 1 };
  s0 -> s4 [73, 73] { R3455 += 1, R3411 += 1, R66 += 1 };
  s0 -> s1 [74, 65535] { R3455 += 1, R3411 += 1, R66 += 1 };
  s1 -> s1 [0, 72] { R3455 += 1, R3411 += 1, R66 += 1 };
  s1 -> s1 [0, 65535] { R3455 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R3455 += 1, R3411 += 1, R66 += 1 };
  s1 -> s4 [73, 73] { R3455 += 1, R3411 += 1, R66 += 1 };
  s1 -> s1 [74, 65535] { R3455 += 1, R3411 += 1, R66 += 1 };
  s2 -> s1 [0, 72] { R3455 += 1, R3411 += 1, R66 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3455 += 1, R3410 += 1, R3411 += 1 };
  s2 -> s3 [73, 73] { R3455 += 1, R3411 += 1, R66 += 1 };
  s2 -> s4 [73, 73] { R3455 += 1, R3411 += 1, R66 += 1 };
  s2 -> s1 [74, 65535] { R3455 += 1, R3411 += 1, R66 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R3455 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3455 += 1, R3411 += 1, R66 += 1 };
  s4 -> s6 [0, 65535] { R3455 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3455 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 72] { R3457 += 1, R3413 += 1, R68 += 1 };
  s0 -> s2 [0, 65535] { R3457 += 1, R3412 += 1, R3413 += 1 };
  s0 -> s0 [0, 65535] { R3456 += 1, R3457 += 1 };
  s0 -> s3 [73, 73] { R3457 += 1, R3413 += 1, R68 += 1 };
  s0 -> s4 [73, 73] { R3457 += 1, R3413 += 1, R68 += 1 };
  s0 -> s1 [74, 65535] { R3457 += 1, R3413 += 1, R68 += 1 };
  s1 -> s1 [0, 72] { R3457 += 1, R3413 += 1, R68 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3457 += 1 };
  s1 -> s3 [73, 73] { R3457 += 1, R3413 += 1, R68 += 1 };
  s1 -> s4 [73, 73] { R3457 += 1, R3413 += 1, R68 += 1 };
  s1 -> s1 [74, 65535] { R3457 += 1, R3413 += 1, R68 += 1 };
  s2 -> s1 [0, 72] { R3457 += 1, R3413 += 1, R68 += 1 };
  s2 -> s2 [0, 65535] { R3457 += 1, R3412 += 1, R3413 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R3457 += 1, R3413 += 1, R68 += 1 };
  s2 -> s4 [73, 73] { R3457 += 1, R3413 += 1, R68 += 1 };
  s2 -> s1 [74, 65535] { R3457 += 1, R3413 += 1, R68 += 1 };
  s3 -> s3 [0, 65535] { R3457 += 1, R3413 += 1, R68 += 1 };
  s3 -> s6 [0, 65535] { R3457 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3457 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3457 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 72] { R3459 += 1, R3415 += 1, R70 += 1, R71 += 1 };
  s0 -> s2 [0, 65535] { R3459 += 1, R3414 += 1, R3415 += 1 };
  s0 -> s0 [0, 65535] { R3458 += 1, R3459 += 1 };
  s0 -> s3 [73, 73] { R3459 += 1, R3415 += 1, R70 += 1, R71 += 1 };
  s0 -> s4 [73, 73] { R3459 += 1, R3415 += 1, R70 += 1, R71 += 1 };
  s0 -> s1 [74, 65535] { R3459 += 1, R3415 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 72] { R3459 += 1, R3415 += 1, R70 += 1, R71 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3459 += 1 };
  s1 -> s3 [73, 73] { R3459 += 1, R3415 += 1, R70 += 1, R71 += 1 };
  s1 -> s4 [73, 73] { R3459 += 1, R3415 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [74, 65535] { R3459 += 1, R3415 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [0, 72] { R3459 += 1, R3415 += 1, R70 += 1, R71 += 1 };
  s2 -> s2 [0, 65535] { R3459 += 1, R3414 += 1, R3415 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R3459 += 1, R3415 += 1, R70 += 1, R71 += 1 };
  s2 -> s4 [73, 73] { R3459 += 1, R3415 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [74, 65535] { R3459 += 1, R3415 += 1, R70 += 1, R71 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R3459 += 1, R3415 += 1, R70 += 1, R71 += 1 };
  s3 -> s6 [0, 65535] { R3459 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3459 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3459 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 72] { R3461 += 1, R3417 += 1, R74 += 1, R75 += 1 };
  s0 -> s0 [0, 65535] { R3460 += 1, R3461 += 1 };
  s0 -> s2 [0, 65535] { R3461 += 1, R3416 += 1, R3417 += 1 };
  s0 -> s3 [73, 73] { R3461 += 1, R3417 += 1, R74 += 1, R75 += 1 };
  s0 -> s4 [73, 73] { R3461 += 1, R3417 += 1, R74 += 1, R75 += 1 };
  s0 -> s1 [74, 65535] { R3461 += 1, R3417 += 1, R74 += 1, R75 += 1 };
  s1 -> s1 [0, 72] { R3461 += 1, R3417 += 1, R74 += 1, R75 += 1 };
  s1 -> s1 [0, 65535] { R3461 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R3461 += 1, R3417 += 1, R74 += 1, R75 += 1 };
  s1 -> s4 [73, 73] { R3461 += 1, R3417 += 1, R74 += 1, R75 += 1 };
  s1 -> s1 [74, 65535] { R3461 += 1, R3417 += 1, R74 += 1, R75 += 1 };
  s2 -> s1 [0, 72] { R3461 += 1, R3417 += 1, R74 += 1, R75 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3461 += 1, R3416 += 1, R3417 += 1 };
  s2 -> s3 [73, 73] { R3461 += 1, R3417 += 1, R74 += 1, R75 += 1 };
  s2 -> s4 [73, 73] { R3461 += 1, R3417 += 1, R74 += 1, R75 += 1 };
  s2 -> s1 [74, 65535] { R3461 += 1, R3417 += 1, R74 += 1, R75 += 1 };
  s3 -> s3 [0, 65535] { R3461 += 1, R3417 += 1, R74 += 1, R75 += 1 };
  s3 -> s6 [0, 65535] { R3461 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3461 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3461 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 72] { R3463 += 1, R3419 += 1, R2620 += 1, R2621 += 1 };
  s0 -> s0 [0, 65535] { R3462 += 1, R3463 += 1 };
  s0 -> s2 [0, 65535] { R3463 += 1, R3418 += 1, R3419 += 1 };
  s0 -> s3 [73, 73] { R3463 += 1, R3419 += 1, R2620 += 1, R2621 += 1 };
  s0 -> s4 [73, 73] { R3463 += 1, R3419 += 1, R2620 += 1, R2621 += 1 };
  s0 -> s1 [74, 65535] { R3463 += 1, R3419 += 1, R2620 += 1, R2621 += 1 };
  s1 -> s1 [0, 72] { R3463 += 1, R3419 += 1, R2620 += 1, R2621 += 1 };
  s1 -> s1 [0, 65535] { R3463 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R3463 += 1, R3419 += 1, R2620 += 1, R2621 += 1 };
  s1 -> s4 [73, 73] { R3463 += 1, R3419 += 1, R2620 += 1, R2621 += 1 };
  s1 -> s1 [74, 65535] { R3463 += 1, R3419 += 1, R2620 += 1, R2621 += 1 };
  s2 -> s1 [0, 72] { R3463 += 1, R3419 += 1, R2620 += 1, R2621 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3463 += 1, R3418 += 1, R3419 += 1 };
  s2 -> s3 [73, 73] { R3463 += 1, R3419 += 1, R2620 += 1, R2621 += 1 };
  s2 -> s4 [73, 73] { R3463 += 1, R3419 += 1, R2620 += 1, R2621 += 1 };
  s2 -> s1 [74, 65535] { R3463 += 1, R3419 += 1, R2620 += 1, R2621 += 1 };
  s3 -> s3 [0, 65535] { R3463 += 1, R3419 += 1, R2620 += 1, R2621 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R3463 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3463 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3463 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 72] { R3465 += 1, R3421 += 1, R3047 += 1, R3048 += 1 };
  s0 -> s2 [0, 72] { R3465 += 1, R3421 += 1, R3046 += 1, R3047 += 1 };
  s0 -> s3 [0, 65535] { R3465 += 1, R3420 += 1, R3421 += 1 };
  s0 -> s0 [0, 65535] { R3464 += 1, R3465 += 1 };
  s0 -> s4 [73, 73] { R3465 += 1, R3421 += 1, R3046 += 1, R3047 += 1 };
  s0 -> s5 [73, 73] { R3465 += 1, R3421 += 1, R3046 += 1, R3047 += 1 };
  s0 -> s6 [73, 73] { R3465 += 1, R3421 += 1, R3047 += 1, R3048 += 1 };
  s0 -> s7 [73, 73] { R3465 += 1, R3421 += 1, R3047 += 1, R3048 += 1 };
  s0 -> s1 [74, 65535] { R3465 += 1, R3421 += 1, R3047 += 1, R3048 += 1 };
  s0 -> s2 [74, 65535] { R3465 += 1, R3421 += 1, R3046 += 1, R3047 += 1 };
  s1 -> s1 [0, 72] { R3465 += 1, R3421 += 1, R3047 += 1, R3048 += 1 };
  s1 -> s1 [0, 65535] { R3465 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s6 [73, 73] { R3465 += 1, R3421 += 1, R3047 += 1, R3048 += 1 };
  s1 -> s7 [73, 73] { R3465 += 1, R3421 += 1, R3047 += 1, R3048 += 1 };
  s1 -> s1 [74, 65535] { R3465 += 1, R3421 += 1, R3047 += 1, R3048 += 1 };
  s2 -> s1 [0, 72] { R3465 += 1, R3421 += 1, R3047 += 1, R3048 += 1 };
  s2 -> s2 [0, 72] { R3465 += 1, R3421 += 1, R3046 += 1, R3047 += 1 };
  s2 -> s4 [73, 73] { R3465 += 1, R3421 += 1, R3046 += 1, R3047 += 1 };
  s2 -> s5 [73, 73] { R3465 += 1, R3421 += 1, R3046 += 1, R3047 += 1 };
  s2 -> s6 [73, 73] { R3465 += 1, R3421 += 1, R3047 += 1, R3048 += 1 };
  s2 -> s7 [73, 73] { R3465 += 1, R3421 += 1, R3047 += 1, R3048 += 1 };
  s2 -> s1 [74, 65535] { R3465 += 1, R3421 += 1, R3047 += 1, R3048 += 1 };
  s2 -> s2 [74, 65535] { R3465 += 1, R3421 += 1, R3046 += 1, R3047 += 1 };
  s3 -> s1 [0, 72] { R3465 += 1, R3421 += 1, R3047 += 1, R3048 += 1 };
  s3 -> s2 [0, 72] { R3465 += 1, R3421 += 1, R3046 += 1, R3047 += 1 };
  s3 -> s3 [0, 65535] { R3465 += 1, R3420 += 1, R3421 += 1 };
  s3 -> s4 [73, 73] { R3465 += 1, R3421 += 1, R3046 += 1, R3047 += 1 };
  s3 -> s5 [73, 73] { R3465 += 1, R3421 += 1, R3046 += 1, R3047 += 1 };
  s3 -> s6 [73, 73] { R3465 += 1, R3421 += 1, R3047 += 1, R3048 += 1 };
  s3 -> s7 [73, 73] { R3465 += 1, R3421 += 1, R3047 += 1, R3048 += 1 };
  s3 -> s1 [74, 65535] { R3465 += 1, R3421 += 1, R3047 += 1, R3048 += 1 };
  s3 -> s2 [74, 65535] { R3465 += 1, R3421 += 1, R3046 += 1, R3047 += 1 };
  s4 -> s4 [0, 65535] { R3465 += 1, R3421 += 1, R3046 += 1, R3047 += 1 };
  s4 -> s6 [0, 65535] { R3465 += 1, R3421 += 1, R3047 += 1, R3048 += 1 };
  s6 -> s9 [0, 65535] { R3465 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R3465 += 1, R3421 += 1, R3047 += 1, R3048 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R3465 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R3465 += 1 };
  s9 -> s8 [0, 65535];
  accepting s8, s9, s6, s1, s7;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 72] { R3467 += 1, R3423 += 1, R3364 += 1, R3365 += 1 };
  s0 -> s2 [0, 72] { R3467 += 1, R3423 += 1, R3365 += 1 };
  s0 -> s3 [0, 65535] { R3467 += 1, R3422 += 1, R3423 += 1 };
  s0 -> s0 [0, 65535] { R3466 += 1, R3467 += 1 };
  s0 -> s4 [73, 73] { R3467 += 1, R3423 += 1, R3364 += 1, R3365 += 1 };
  s0 -> s5 [73, 73] { R3467 += 1, R3423 += 1, R3365 += 1 };
  s0 -> s6 [73, 73] { R3467 += 1, R3423 += 1, R3365 += 1 };
  s0 -> s7 [73, 73] { R3467 += 1, R3423 += 1, R3364 += 1, R3365 += 1 };
  s0 -> s2 [74, 76] { R3467 += 1, R3423 += 1, R3365 += 1 };
  s0 -> s1 [74, 65535] { R3467 += 1, R3423 += 1, R3364 += 1, R3365 += 1 };
  s0 -> s8 [77, 77] { R3467 += 1, R3423 += 1, R3365 += 1 };
  s0 -> s2 [83, 65535] { R3467 += 1, R3423 += 1, R3365 += 1 };
  s1 -> s1 [0, 72] { R3467 += 1, R3423 += 1, R3364 += 1, R3365 += 1 };
  s1 -> s2 [0, 72] { R3467 += 1, R3423 += 1, R3365 += 1 };
  s1 -> s4 [73, 73] { R3467 += 1, R3423 += 1, R3364 += 1, R3365 += 1 };
  s1 -> s5 [73, 73] { R3467 += 1, R3423 += 1, R3365 += 1 };
  s1 -> s6 [73, 73] { R3467 += 1, R3423 += 1, R3365 += 1 };
  s1 -> s7 [73, 73] { R3467 += 1, R3423 += 1, R3364 += 1, R3365 += 1 };
  s1 -> s2 [74, 76] { R3467 += 1, R3423 += 1, R3365 += 1 };
  s1 -> s1 [74, 65535] { R3467 += 1, R3423 += 1, R3364 += 1, R3365 += 1 };
  s1 -> s8 [77, 77] { R3467 += 1, R3423 += 1, R3365 += 1 };
  s1 -> s2 [83, 65535] { R3467 += 1, R3423 += 1, R3365 += 1 };
  s2 -> s2 [0, 72] { R3467 += 1, R3423 += 1, R3365 += 1 };
  s2 -> s5 [73, 73] { R3467 += 1, R3423 += 1 };
  s2 -> s6 [73, 73] { R3467 += 1, R3423 += 1 };
  s2 -> s2 [74, 76] { R3467 += 1, R3423 += 1, R3365 += 1 };
  s2 -> s2 [74, 65535] { R3467 += 1, R3423 += 1 };
  s2 -> s8 [77, 77] { R3467 += 1, R3423 += 1, R3365 += 1 };
  s2 -> s2 [83, 65535] { R3467 += 1, R3423 += 1, R3365 += 1 };
  s3 -> s1 [0, 72] { R3467 += 1, R3423 += 1, R3364 += 1, R3365 += 1 };
  s3 -> s2 [0, 72] { R3467 += 1, R3423 += 1, R3365 += 1 };
  s3 -> s3 [0, 65535] { R3467 += 1, R3422 += 1, R3423 += 1 };
  s3 -> s4 [73, 73] { R3467 += 1, R3423 += 1, R3364 += 1, R3365 += 1 };
  s3 -> s5 [73, 73] { R3467 += 1, R3423 += 1, R3365 += 1 };
  s3 -> s6 [73, 73] { R3467 += 1, R3423 += 1, R3365 += 1 };
  s3 -> s7 [73, 73] { R3467 += 1, R3423 += 1, R3364 += 1, R3365 += 1 };
  s3 -> s2 [74, 76] { R3467 += 1, R3423 += 1, R3365 += 1 };
  s3 -> s1 [74, 65535] { R3467 += 1, R3423 += 1, R3364 += 1, R3365 += 1 };
  s3 -> s8 [77, 77] { R3467 += 1, R3423 += 1, R3365 += 1 };
  s3 -> s2 [83, 65535] { R3467 += 1, R3423 += 1, R3365 += 1 };
  s4 -> s6 [0, 76] { R3467 += 1, R3423 += 1, R3365 += 1 };
  s4 -> s4 [0, 65535] { R3467 += 1, R3423 += 1, R3364 += 1, R3365 += 1 };
  s4 -> s11 [77, 77] { R3467 += 1, R3423 += 1, R3365 += 1 };
  s4 -> s6 [83, 65535] { R3467 += 1, R3423 += 1, R3365 += 1 };
  s6 -> s6 [0, 76] { R3467 += 1, R3423 += 1, R3365 += 1 };
  s6 -> s6 [0, 65535] { R3467 += 1, R3423 += 1 };
  s6 -> s11 [77, 77] { R3467 += 1, R3423 += 1, R3365 += 1 };
  s6 -> s6 [83, 65535] { R3467 += 1, R3423 += 1, R3365 += 1 };
  s8 -> s8 [0, 72] { R3467 += 1, R3423 += 1, R3365 += 1 };
  s8 -> s8 [0, 65535] { R3467 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [73, 73] { R3467 += 1, R3423 += 1 };
  s8 -> s11 [73, 73] { R3467 += 1, R3423 += 1 };
  s8 -> s8 [74, 77] { R3467 += 1, R3423 += 1, R3365 += 1 };
  s8 -> s8 [74, 65535] { R3467 += 1, R3423 += 1 };
  s8 -> s8 [83, 65535] { R3467 += 1, R3423 += 1, R3365 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R3467 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s11 [0, 77] { R3467 += 1, R3423 += 1, R3365 += 1 };
  s11 -> s12 [0, 65535] { R3467 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R3467 += 1, R3423 += 1 };
  s11 -> s11 [83, 65535] { R3467 += 1, R3423 += 1, R3365 += 1 };
  s12 -> s12 [0, 65535] { R3467 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
synchronised {  // Automata constraining P54
automaton P54_0 {
  init s0;
  s0 -> s1 [109, 109];
  accepting s1;
};
};
constraint R1 = R3383 && R2 = R3467 && R20 - R3467 = -1 && R21 = R3467 && R22 - R3467 = -1 && R23 = R3467 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R2623 + -1*R2621 - R53 = 0 && R52 + R2622 + R2620 = 0 && R3382 = 0 && R3408 = 0 && R3409 = 0 && R3420 = 0 && R3421 = 0 && R3422 = 0 && R3423 = 0 && R3424 = 0 && R3425 = R3467 && R3426 = 0 && R3427 = R3467 && R3428 = 0 && R3429 = R3467 && R3430 = 0 && R3431 = R3467 && R3432 = 0 && R3433 = R3467 && R3434 = 0 && R3435 = R3467 && R3436 = 0 && R3437 = R3467 && R3438 = 0 && R3439 = R3467 && R3440 = 0 && R3441 = R3467 && R3442 = 0 && R3443 = R3467 && R3444 = 0 && R3445 = R3467 && R3446 = 0 && R3447 = R3467 && R3448 = 0 && R3449 = R3467 && R3450 = 0 && R3451 = R3467 && R3452 = 0 && R3453 = R3467 && R3454 = 0 && R3455 = R3467 && R3456 = 0 && R3457 = R3467 && R3458 = 0 && R3459 = R3467 && R3460 = 0 && R3461 = R3467 && R3462 = 0 && R3463 = R3467 && R3464 = 0 && R3465 = R3467 && R3466 = 0 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R2623 + -1*R2621 - R53 < 1 && -1 < R3383 && 0 < R3467 && (R48 + R79 + R76 != 0 || ((R42 + R72 + R70 != 0 || R43 + R73 + R71 + -1*R2623 + -1*R2621 - R53 = 0 || R53 + R2623 + R2621 < 1) && (R42 + R72 + R70 = 0 || R53 + R2623 + R2621 < 1))) && (R48 + R79 + R76 != 0 || ((R46 + R77 + R74 != 0 || R47 + R78 + R75 + -1*R2623 + -1*R2621 - R53 = 0 || R53 + R2623 + R2621 < 1) && (R46 + R77 + R74 = 0 || R53 + R2623 + R2621 < 1))) && (R3368 != 0 || R3369 = R3383 || (R17 = 0 && R3383 = 0)) && (R3370 != 0 || R3371 = R3383 || (R17 = 0 && R3383 = 0)) && (R3372 != 0 || R3373 = R3383 || (R17 = 0 && R3383 = 0)) && (R3374 != 0 || R3375 = R3383 || (R17 = 0 && R3383 = 0)) && (R3376 != 0 || R3377 = R3383 || (R17 = 0 && R3383 = 0)) && (R3378 != 0 || R3379 = R3383 || (R17 = 0 && R3383 = 0)) && (R3380 != 0 || R3381 = R3383 || (R17 = 0 && R3383 = 0)) && (R3384 != 0 || R3383 = R3385 || (R17 = 0 && R3383 = 0)) && (R3386 != 0 || R3383 = R3387 || (R17 = 0 && R3383 = 0)) && (R18 = 0 || (R3406 = 0 && R3407 = 0)) && (R18 = 0 || (R3410 = 0 && R3411 = 0)) && (R18 = 0 || (R3412 = 0 && R3413 = 0)) && (R18 = 0 || (R3414 = 0 && R3415 = 0)) && (R18 = 0 || (R3416 = 0 && R3417 = 0)) && (R18 = 0 || (R3418 = 0 && R3419 = 0)) && (R19 = 0 || (R3388 = 0 && R3389 = 0)) && (R19 = 0 || (R3390 = 0 && R3391 = 0)) && (R19 = 0 || (R3392 = 0 && R3393 = 0)) && (R19 = 0 || (R3394 = 0 && R3395 = 0)) && (R19 = 0 || (R3396 = 0 && R3397 = 0)) && (R19 = 0 || (R3398 = 0 && R3399 = 0)) && (R19 = 0 || (R3400 = 0 && R3401 = 0)) && (R19 = 0 || (R3402 = 0 && R3403 = 0)) && (R19 = 0 || (R3404 = 0 && R3405 = 0)) && (R48 + R79 + R76 = 0 || (R42 + R72 + R70 = 0 && R43 + R73 + R71 + -1*R2623 + -1*R2621 - R53 = 0)) && (R48 + R79 + R76 = 0 || (R46 + R77 + R74 = 0 && R47 + R78 + R75 + -1*R2623 + -1*R2621 - R53 = 0)) && (R58 + R3051 + R3048 = 0 || (R56 + R3049 + R3046 = 0 && R57 + R3050 + R3047 = 0)) && (R58 + R3051 + R3048 = 0 || (R62 + R3366 + R3364 = 0 && R63 + R3367 + R3365 = 0)) && (R3368 = 0 || (R17 = 0 && R3383 = 0)) && (R3370 = 0 || (R17 = 0 && R3383 = 0)) && (R3372 = 0 || (R17 = 0 && R3383 = 0)) && (R3374 = 0 || (R17 = 0 && R3383 = 0)) && (R3376 = 0 || (R17 = 0 && R3383 = 0)) && (R3378 = 0 || (R17 = 0 && R3383 = 0)) && (R3380 = 0 || (R17 = 0 && R3383 = 0)) && (R3384 = 0 || (R17 = 0 && R3383 = 0)) && (R3386 = 0 || (R17 = 0 && R3383 = 0));
// End of Parikh automata intersection problem
