// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R11522, R11523, R11524, R11525, R12, R15342, R15343, R15344, R15345, R15346, R15347, R15348, R15349, R15350, R15351, R15774, R15775, R15776, R15777, R15778, R15779, R15780, R15781, R15782, R15783, R15784, R15785, R15786, R15787, R15788, R15789, R15790, R15791, R15792, R15793, R15794, R15795, R15796, R15797, R15798, R15799, R15800, R15801, R15802, R15803, R15804, R15805, R15806, R15807, R15808, R15809, R15810, R15811, R15812, R15813, R15814, R15815, R15816, R15817, R15818, R15819, R15820, R15821, R15822, R15823, R15824, R15825, R15826, R15827, R15828, R15829, R15830, R15831, R15832, R15833, R15834, R15835, R15836, R15837, R15838, R15839, R15840, R15841, R15842, R15843, R15844, R15845, R15846, R15847, R15848, R15849, R15850, R15851, R15852, R15853, R15854, R15855, R15856, R15857, R15858, R15859, R15860, R15861, R15862, R15863, R15864, R15865, R15866, R15867, R15868, R15869, R15870, R15871, R15872, R15873, R15874, R15875, R15876, R15877, R15878, R15879, R15880, R15881, R15882, R15883, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 72];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [73, 73];
  s0 -> s1 [74, 65535];
  s1 -> s1 [0, 72];
  s1 -> s2 [73, 73];
  s1 -> s1 [74, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s1 [0, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s1 [0, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R15804 += 1, R15805 += 1 };
  s0 -> s1 [0, 65535] { R15805 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R15805 += 1, R19 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 72] { R15807 += 1 };
  s0 -> s0 [0, 65535] { R15806 += 1, R15807 += 1 };
  s0 -> s2 [73, 73] { R15807 += 1 };
  s0 -> s3 [73, 73] { R15807 += 1 };
  s0 -> s1 [78, 65535] { R15807 += 1 };
  s1 -> s1 [0, 72] { R15807 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R15807 += 1 };
  s1 -> s3 [73, 73] { R15807 += 1 };
  s1 -> s1 [78, 65535] { R15807 += 1 };
  s2 -> s2 [0, 73] { R15807 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [78, 65535] { R15807 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 72] { R15809 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R15808 += 1, R15809 += 1 };
  s0 -> s2 [73, 73] { R15809 += 1, R38 += 1 };
  s0 -> s3 [73, 73] { R15809 += 1, R38 += 1 };
  s0 -> s1 [74, 65535] { R15809 += 1, R38 += 1 };
  s1 -> s1 [0, 72] { R15809 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R15809 += 1, R38 += 1 };
  s1 -> s3 [73, 73] { R15809 += 1, R38 += 1 };
  s1 -> s1 [74, 65535] { R15809 += 1, R38 += 1 };
  s2 -> s2 [0, 65535] { R15809 += 1, R38 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 72] { R15811 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R15810 += 1, R15811 += 1 };
  s0 -> s2 [73, 73] { R15811 += 1, R40 += 1 };
  s0 -> s3 [73, 73] { R15811 += 1, R40 += 1 };
  s0 -> s1 [74, 65535] { R15811 += 1, R40 += 1 };
  s1 -> s1 [0, 72] { R15811 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R15811 += 1, R40 += 1 };
  s1 -> s3 [73, 73] { R15811 += 1, R40 += 1 };
  s1 -> s1 [74, 65535] { R15811 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R15811 += 1, R40 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 72] { R15813 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R15812 += 1, R15813 += 1 };
  s0 -> s2 [73, 73] { R15813 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [73, 73] { R15813 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [74, 65535] { R15813 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 72] { R15813 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R15813 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [73, 73] { R15813 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [74, 65535] { R15813 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R15813 += 1, R42 += 1, R43 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 72] { R15815 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R15814 += 1, R15815 += 1 };
  s0 -> s2 [73, 73] { R15815 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [73, 73] { R15815 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [74, 65535] { R15815 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 72] { R15815 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R15815 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [73, 73] { R15815 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [74, 65535] { R15815 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535] { R15815 += 1, R46 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 72] { R15817 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R15816 += 1, R15817 += 1 };
  s0 -> s2 [73, 73] { R15817 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [73, 73] { R15817 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [74, 65535] { R15817 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 72] { R15817 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R15817 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [73, 73] { R15817 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [74, 65535] { R15817 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535] { R15817 += 1, R52 += 1, R53 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 72] { R15819 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R15818 += 1, R15819 += 1 };
  s0 -> s2 [73, 73] { R15819 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [73, 73] { R15819 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [74, 65535] { R15819 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 72] { R15819 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R15819 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [73, 73] { R15819 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [74, 65535] { R15819 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535] { R15819 += 1, R56 += 1, R57 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 72] { R15821 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R15820 += 1, R15821 += 1 };
  s0 -> s2 [73, 73] { R15821 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [73, 73] { R15821 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [74, 65535] { R15821 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 72] { R15821 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R15821 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [73, 73] { R15821 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [74, 65535] { R15821 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535] { R15821 += 1, R62 += 1, R63 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 72] { R15841 += 1 };
  s0 -> s0 [0, 65535] { R15840 += 1, R15841 += 1 };
  s0 -> s2 [73, 73] { R15841 += 1 };
  s0 -> s1 [74, 65535] { R15841 += 1 };
  s1 -> s1 [0, 72] { R15841 += 1 };
  s1 -> s2 [73, 73] { R15841 += 1 };
  s1 -> s1 [74, 65535] { R15841 += 1 };
  s2 -> s2 [0, 65535] { R15841 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R15842 += 1, R15843 += 1 };
  s0 -> s1 [0, 65535] { R15843 += 1, R1 += 1 };
  s1 -> s1 [0, 65535] { R15843 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 72] { R15845 += 1 };
  s0 -> s0 [0, 65535] { R15844 += 1, R15845 += 1 };
  s0 -> s2 [0, 65535] { R15845 += 1, R8 += 1 };
  s0 -> s3 [73, 73] { R15845 += 1 };
  s0 -> s1 [74, 65535] { R15845 += 1 };
  s1 -> s1 [0, 72] { R15845 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [73, 73] { R15845 += 1 };
  s1 -> s1 [74, 65535] { R15845 += 1 };
  s2 -> s1 [0, 72] { R15845 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R15845 += 1, R8 += 1 };
  s2 -> s3 [73, 73] { R15845 += 1 };
  s2 -> s1 [74, 65535] { R15845 += 1 };
  s3 -> s3 [0, 65535] { R15845 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 72] { R15847 += 1, R15785 += 1 };
  s0 -> s2 [0, 65535] { R15847 += 1, R15784 += 1, R15785 += 1 };
  s0 -> s0 [0, 65535] { R15846 += 1, R15847 += 1 };
  s0 -> s1 [74, 65535] { R15847 += 1, R15785 += 1 };
  s1 -> s1 [0, 72] { R15847 += 1, R15785 += 1 };
  s1 -> s1 [0, 65535] { R15847 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [74, 65535] { R15847 += 1, R15785 += 1 };
  s2 -> s1 [0, 72] { R15847 += 1, R15785 += 1 };
  s2 -> s2 [0, 65535] { R15847 += 1, R15784 += 1, R15785 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [74, 65535] { R15847 += 1, R15785 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R15849 += 1, R15787 += 1, R17 += 1 };
  s0 -> s0 [0, 65535] { R15848 += 1, R15849 += 1 };
  s0 -> s2 [0, 65535] { R15849 += 1, R15786 += 1, R15787 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R15849 += 1, R15787 += 1, R17 += 1 };
  s1 -> s4 [0, 65535] { R15849 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R15849 += 1, R15787 += 1, R17 += 1 };
  s2 -> s2 [0, 65535] { R15849 += 1, R15786 += 1, R15787 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R15849 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 73] { R15851 += 1, R15789 += 1 };
  s0 -> s0 [0, 65535] { R15850 += 1, R15851 += 1 };
  s0 -> s2 [0, 65535] { R15851 += 1, R15788 += 1, R15789 += 1 };
  s0 -> s1 [77, 65535] { R15851 += 1, R15789 += 1 };
  s1 -> s1 [0, 73] { R15851 += 1, R15789 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R15851 += 1 };
  s1 -> s1 [77, 65535] { R15851 += 1, R15789 += 1 };
  s2 -> s1 [0, 73] { R15851 += 1, R15789 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R15851 += 1, R15788 += 1, R15789 += 1 };
  s2 -> s1 [77, 65535] { R15851 += 1, R15789 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R15853 += 1, R15790 += 1, R15791 += 1 };
  s0 -> s2 [0, 65535] { R15853 += 1, R15791 += 1, R67 += 1 };
  s0 -> s0 [0, 65535] { R15852 += 1, R15853 += 1 };
  s1 -> s1 [0, 65535] { R15853 += 1, R15790 += 1, R15791 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R15853 += 1, R15791 += 1, R67 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R15853 += 1 };
  s2 -> s2 [0, 65535] { R15853 += 1, R15791 += 1, R67 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R15853 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 76] { R15855 += 1, R15793 += 1 };
  s0 -> s2 [0, 65535] { R15855 += 1, R15792 += 1, R15793 += 1 };
  s0 -> s0 [0, 65535] { R15854 += 1, R15855 += 1 };
  s0 -> s3 [0, 65535] { R15855 += 1, R15793 += 1, R69 += 1 };
  s0 -> s1 [78, 65535] { R15855 += 1, R15793 += 1 };
  s1 -> s1 [0, 76] { R15855 += 1, R15793 += 1 };
  s1 -> s1 [0, 65535] { R15855 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [78, 65535] { R15855 += 1, R15793 += 1 };
  s2 -> s1 [0, 76] { R15855 += 1, R15793 += 1 };
  s2 -> s2 [0, 65535] { R15855 += 1, R15792 += 1, R15793 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R15855 += 1, R15793 += 1, R69 += 1 };
  s2 -> s1 [78, 65535] { R15855 += 1, R15793 += 1 };
  s3 -> s1 [0, 76] { R15855 += 1, R15793 += 1 };
  s3 -> s4 [0, 65535] { R15855 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R15855 += 1, R15793 += 1, R69 += 1 };
  s3 -> s1 [78, 65535] { R15855 += 1, R15793 += 1 };
  s4 -> s4 [0, 65535] { R15855 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 76] { R15857 += 1, R15795 += 1, R11525 += 1 };
  s0 -> s1 [0, 65535] { R15857 += 1, R15795 += 1 };
  s0 -> s0 [0, 65535] { R15856 += 1, R15857 += 1 };
  s0 -> s2 [0, 65535] { R15857 += 1, R15794 += 1, R15795 += 1 };
  s0 -> s1 [78, 65535] { R15857 += 1, R15795 += 1, R11525 += 1 };
  s1 -> s1 [0, 76] { R15857 += 1, R15795 += 1, R11525 += 1 };
  s1 -> s1 [0, 65535] { R15857 += 1, R15795 += 1 };
  s1 -> s4 [0, 65535] { R15857 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [78, 65535] { R15857 += 1, R15795 += 1, R11525 += 1 };
  s2 -> s1 [0, 76] { R15857 += 1, R15795 += 1, R11525 += 1 };
  s2 -> s1 [0, 65535] { R15857 += 1, R15795 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R15857 += 1, R15794 += 1, R15795 += 1 };
  s2 -> s1 [78, 65535] { R15857 += 1, R15795 += 1, R11525 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R15857 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R15859 += 1, R15796 += 1, R15797 += 1 };
  s0 -> s0 [0, 65535] { R15858 += 1, R15859 += 1 };
  s0 -> s2 [0, 65535] { R15859 += 1, R15797 += 1 };
  s0 -> s3 [0, 65535] { R15859 += 1, R15797 += 1, R15346 += 1, R15347 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R15859 += 1, R15796 += 1, R15797 += 1 };
  s1 -> s2 [0, 65535] { R15859 += 1, R15797 += 1 };
  s1 -> s3 [0, 65535] { R15859 += 1, R15797 += 1, R15346 += 1, R15347 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R15859 += 1 };
  s2 -> s2 [0, 65535] { R15859 += 1, R15797 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R15859 += 1 };
  s3 -> s2 [0, 65535] { R15859 += 1, R15797 += 1 };
  s3 -> s3 [0, 65535] { R15859 += 1, R15797 += 1, R15346 += 1, R15347 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R15859 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 77] { R15861 += 1, R15799 += 1, R15351 += 1 };
  s0 -> s0 [0, 65535] { R15860 += 1, R15861 += 1 };
  s0 -> s2 [0, 65535] { R15861 += 1, R15798 += 1, R15799 += 1 };
  s0 -> s1 [0, 65535] { R15861 += 1, R15799 += 1 };
  s0 -> s1 [82, 65535] { R15861 += 1, R15799 += 1, R15351 += 1 };
  s1 -> s1 [0, 77] { R15861 += 1, R15799 += 1, R15351 += 1 };
  s1 -> s4 [0, 65535] { R15861 += 1 };
  s1 -> s1 [0, 65535] { R15861 += 1, R15799 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [82, 65535] { R15861 += 1, R15799 += 1, R15351 += 1 };
  s2 -> s1 [0, 77] { R15861 += 1, R15799 += 1, R15351 += 1 };
  s2 -> s2 [0, 65535] { R15861 += 1, R15798 += 1, R15799 += 1 };
  s2 -> s1 [0, 65535] { R15861 += 1, R15799 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [82, 65535] { R15861 += 1, R15799 += 1, R15351 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R15861 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R15863 += 1, R15801 += 1, R15778 += 1, R15779 += 1 };
  s0 -> s2 [0, 65535] { R15863 += 1, R15801 += 1 };
  s0 -> s3 [0, 65535] { R15863 += 1, R15800 += 1, R15801 += 1 };
  s0 -> s0 [0, 65535] { R15862 += 1, R15863 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R15863 += 1, R15801 += 1, R15778 += 1, R15779 += 1 };
  s1 -> s5 [0, 65535] { R15863 += 1 };
  s1 -> s2 [0, 65535] { R15863 += 1, R15801 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R15863 += 1 };
  s2 -> s2 [0, 65535] { R15863 += 1, R15801 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R15863 += 1, R15801 += 1, R15778 += 1, R15779 += 1 };
  s3 -> s2 [0, 65535] { R15863 += 1, R15801 += 1 };
  s3 -> s3 [0, 65535] { R15863 += 1, R15800 += 1, R15801 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R15863 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 76] { R15865 += 1, R15803 += 1, R15783 += 1 };
  s0 -> s2 [0, 65535] { R15865 += 1, R15802 += 1, R15803 += 1 };
  s0 -> s3 [0, 65535] { R15865 += 1, R15803 += 1, R15782 += 1, R15783 += 1 };
  s0 -> s0 [0, 65535] { R15864 += 1, R15865 += 1 };
  s0 -> s4 [77, 77] { R15865 += 1, R15803 += 1, R15783 += 1 };
  s0 -> s5 [77, 77] { R15865 += 1, R15803 += 1, R15783 += 1 };
  s0 -> s1 [83, 65535] { R15865 += 1, R15803 += 1, R15783 += 1 };
  s1 -> s1 [0, 76] { R15865 += 1, R15803 += 1, R15783 += 1 };
  s1 -> s1 [0, 65535] { R15865 += 1, R15803 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R15865 += 1 };
  s1 -> s4 [77, 77] { R15865 += 1, R15803 += 1, R15783 += 1 };
  s1 -> s5 [77, 77] { R15865 += 1, R15803 += 1, R15783 += 1 };
  s1 -> s1 [83, 65535] { R15865 += 1, R15803 += 1, R15783 += 1 };
  s2 -> s1 [0, 76] { R15865 += 1, R15803 += 1, R15783 += 1 };
  s2 -> s2 [0, 65535] { R15865 += 1, R15802 += 1, R15803 += 1 };
  s2 -> s3 [0, 65535] { R15865 += 1, R15803 += 1, R15782 += 1, R15783 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s4 [77, 77] { R15865 += 1, R15803 += 1, R15783 += 1 };
  s2 -> s5 [77, 77] { R15865 += 1, R15803 += 1, R15783 += 1 };
  s2 -> s1 [83, 65535] { R15865 += 1, R15803 += 1, R15783 += 1 };
  s3 -> s1 [0, 76] { R15865 += 1, R15803 += 1, R15783 += 1 };
  s3 -> s3 [0, 65535] { R15865 += 1, R15803 += 1, R15782 += 1, R15783 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s7 [0, 65535] { R15865 += 1 };
  s3 -> s4 [77, 77] { R15865 += 1, R15803 += 1, R15783 += 1 };
  s3 -> s5 [77, 77] { R15865 += 1, R15803 += 1, R15783 += 1 };
  s3 -> s1 [83, 65535] { R15865 += 1, R15803 += 1, R15783 += 1 };
  s4 -> s4 [0, 65535] { R15865 += 1, R15803 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R15865 += 1 };
  s5 -> s5 [0, 77] { R15865 += 1, R15803 += 1, R15783 += 1 };
  s5 -> s5 [0, 65535] { R15865 += 1, R15803 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R15865 += 1 };
  s5 -> s5 [83, 65535] { R15865 += 1, R15803 += 1, R15783 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R15865 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R15867 += 1, R15822 += 1, R15823 += 1 };
  s0 -> s0 [0, 65535] { R15866 += 1, R15867 += 1 };
  s0 -> s2 [0, 65535] { R15867 += 1, R15823 += 1, R18 += 1 };
  s1 -> s1 [0, 65535] { R15867 += 1, R15822 += 1, R15823 += 1 };
  s1 -> s2 [0, 65535] { R15867 += 1, R15823 += 1, R18 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R15867 += 1, R15823 += 1, R18 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R15867 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R15867 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 72] { R15869 += 1, R15825 += 1 };
  s0 -> s0 [0, 65535] { R15868 += 1, R15869 += 1 };
  s0 -> s2 [0, 65535] { R15869 += 1, R15824 += 1, R15825 += 1 };
  s0 -> s3 [73, 73] { R15869 += 1, R15825 += 1 };
  s0 -> s4 [73, 73] { R15869 += 1, R15825 += 1 };
  s0 -> s5 [77, 77] { R15869 += 1, R15825 += 1 };
  s0 -> s1 [78, 65535] { R15869 += 1, R15825 += 1 };
  s1 -> s1 [0, 72] { R15869 += 1, R15825 += 1 };
  s1 -> s3 [73, 73] { R15869 += 1, R15825 += 1 };
  s1 -> s4 [73, 73] { R15869 += 1, R15825 += 1 };
  s1 -> s5 [77, 77] { R15869 += 1, R15825 += 1 };
  s1 -> s1 [78, 65535] { R15869 += 1, R15825 += 1 };
  s2 -> s1 [0, 72] { R15869 += 1, R15825 += 1 };
  s2 -> s2 [0, 65535] { R15869 += 1, R15824 += 1, R15825 += 1 };
  s2 -> s3 [73, 73] { R15869 += 1, R15825 += 1 };
  s2 -> s4 [73, 73] { R15869 += 1, R15825 += 1 };
  s2 -> s5 [77, 77] { R15869 += 1, R15825 += 1 };
  s2 -> s1 [78, 65535] { R15869 += 1, R15825 += 1 };
  s3 -> s3 [0, 73] { R15869 += 1, R15825 += 1 };
  s3 -> s8 [77, 77] { R15869 += 1, R15825 += 1 };
  s3 -> s3 [78, 65535] { R15869 += 1, R15825 += 1 };
  s5 -> s5 [0, 72] { R15869 += 1, R15825 += 1 };
  s5 -> s5 [0, 65535] { R15869 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [73, 73] { R15869 += 1, R15825 += 1 };
  s5 -> s8 [73, 73] { R15869 += 1, R15825 += 1 };
  s5 -> s5 [77, 65535] { R15869 += 1, R15825 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R15869 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 73] { R15869 += 1, R15825 += 1 };
  s8 -> s8 [0, 65535] { R15869 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [77, 65535] { R15869 += 1, R15825 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 72] { R15871 += 1, R15827 += 1, R66 += 1 };
  s0 -> s2 [0, 65535] { R15871 += 1, R15826 += 1, R15827 += 1 };
  s0 -> s0 [0, 65535] { R15870 += 1, R15871 += 1 };
  s0 -> s3 [73, 73] { R15871 += 1, R15827 += 1, R66 += 1 };
  s0 -> s4 [73, 73] { R15871 += 1, R15827 += 1, R66 += 1 };
  s0 -> s1 [74, 65535] { R15871 += 1, R15827 += 1, R66 += 1 };
  s1 -> s1 [0, 72] { R15871 += 1, R15827 += 1, R66 += 1 };
  s1 -> s1 [0, 65535] { R15871 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R15871 += 1, R15827 += 1, R66 += 1 };
  s1 -> s4 [73, 73] { R15871 += 1, R15827 += 1, R66 += 1 };
  s1 -> s1 [74, 65535] { R15871 += 1, R15827 += 1, R66 += 1 };
  s2 -> s1 [0, 72] { R15871 += 1, R15827 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R15871 += 1, R15826 += 1, R15827 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R15871 += 1, R15827 += 1, R66 += 1 };
  s2 -> s4 [73, 73] { R15871 += 1, R15827 += 1, R66 += 1 };
  s2 -> s1 [74, 65535] { R15871 += 1, R15827 += 1, R66 += 1 };
  s3 -> s3 [0, 65535] { R15871 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R15871 += 1, R15827 += 1, R66 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R15871 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R15871 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 72] { R15873 += 1, R15829 += 1, R68 += 1 };
  s0 -> s0 [0, 65535] { R15872 += 1, R15873 += 1 };
  s0 -> s2 [0, 65535] { R15873 += 1, R15828 += 1, R15829 += 1 };
  s0 -> s3 [73, 73] { R15873 += 1, R15829 += 1, R68 += 1 };
  s0 -> s4 [73, 73] { R15873 += 1, R15829 += 1, R68 += 1 };
  s0 -> s1 [74, 65535] { R15873 += 1, R15829 += 1, R68 += 1 };
  s1 -> s1 [0, 72] { R15873 += 1, R15829 += 1, R68 += 1 };
  s1 -> s1 [0, 65535] { R15873 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R15873 += 1, R15829 += 1, R68 += 1 };
  s1 -> s4 [73, 73] { R15873 += 1, R15829 += 1, R68 += 1 };
  s1 -> s1 [74, 65535] { R15873 += 1, R15829 += 1, R68 += 1 };
  s2 -> s1 [0, 72] { R15873 += 1, R15829 += 1, R68 += 1 };
  s2 -> s2 [0, 65535] { R15873 += 1, R15828 += 1, R15829 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R15873 += 1, R15829 += 1, R68 += 1 };
  s2 -> s4 [73, 73] { R15873 += 1, R15829 += 1, R68 += 1 };
  s2 -> s1 [74, 65535] { R15873 += 1, R15829 += 1, R68 += 1 };
  s3 -> s3 [0, 65535] { R15873 += 1, R15829 += 1, R68 += 1 };
  s3 -> s6 [0, 65535] { R15873 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R15873 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R15873 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 72] { R15875 += 1, R15831 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s2 [0, 72] { R15875 += 1, R15831 += 1, R11523 += 1 };
  s0 -> s0 [0, 65535] { R15874 += 1, R15875 += 1 };
  s0 -> s3 [0, 65535] { R15875 += 1, R15830 += 1, R15831 += 1 };
  s0 -> s4 [73, 73] { R15875 += 1, R15831 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s5 [73, 73] { R15875 += 1, R15831 += 1, R11523 += 1 };
  s0 -> s6 [73, 73] { R15875 += 1, R15831 += 1, R11523 += 1 };
  s0 -> s7 [73, 73] { R15875 += 1, R15831 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s2 [74, 76] { R15875 += 1, R15831 += 1, R11523 += 1 };
  s0 -> s1 [74, 65535] { R15875 += 1, R15831 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s2 [78, 65535] { R15875 += 1, R15831 += 1, R11523 += 1 };
  s1 -> s1 [0, 72] { R15875 += 1, R15831 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s2 [0, 72] { R15875 += 1, R15831 += 1, R11523 += 1 };
  s1 -> s4 [73, 73] { R15875 += 1, R15831 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s5 [73, 73] { R15875 += 1, R15831 += 1, R11523 += 1 };
  s1 -> s6 [73, 73] { R15875 += 1, R15831 += 1, R11523 += 1 };
  s1 -> s7 [73, 73] { R15875 += 1, R15831 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s2 [74, 76] { R15875 += 1, R15831 += 1, R11523 += 1 };
  s1 -> s1 [74, 65535] { R15875 += 1, R15831 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s2 [78, 65535] { R15875 += 1, R15831 += 1, R11523 += 1 };
  s2 -> s2 [0, 72] { R15875 += 1, R15831 += 1, R11523 += 1 };
  s2 -> s2 [0, 65535] { R15875 += 1 };
  s2 -> s9 [0, 65535];
  s2 -> s5 [73, 73] { R15875 += 1, R15831 += 1 };
  s2 -> s6 [73, 73] { R15875 += 1, R15831 += 1 };
  s2 -> s2 [74, 76] { R15875 += 1, R15831 += 1, R11523 += 1 };
  s2 -> s2 [74, 65535] { R15875 += 1, R15831 += 1 };
  s2 -> s2 [78, 65535] { R15875 += 1, R15831 += 1, R11523 += 1 };
  s3 -> s1 [0, 72] { R15875 += 1, R15831 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s2 [0, 72] { R15875 += 1, R15831 += 1, R11523 += 1 };
  s3 -> s3 [0, 65535] { R15875 += 1, R15830 += 1, R15831 += 1 };
  s3 -> s4 [73, 73] { R15875 += 1, R15831 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s5 [73, 73] { R15875 += 1, R15831 += 1, R11523 += 1 };
  s3 -> s6 [73, 73] { R15875 += 1, R15831 += 1, R11523 += 1 };
  s3 -> s7 [73, 73] { R15875 += 1, R15831 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s2 [74, 76] { R15875 += 1, R15831 += 1, R11523 += 1 };
  s3 -> s1 [74, 65535] { R15875 += 1, R15831 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s2 [78, 65535] { R15875 += 1, R15831 += 1, R11523 += 1 };
  s5 -> s5 [0, 65535] { R15875 += 1 };
  s5 -> s9 [0, 65535];
  s6 -> s6 [0, 76] { R15875 += 1, R15831 += 1, R11523 += 1 };
  s6 -> s8 [0, 65535] { R15875 += 1 };
  s6 -> s6 [0, 65535] { R15875 += 1, R15831 += 1 };
  s6 -> s9 [0, 65535];
  s6 -> s6 [78, 65535] { R15875 += 1, R15831 += 1, R11523 += 1 };
  s7 -> s6 [0, 76] { R15875 += 1, R15831 += 1, R11523 += 1 };
  s7 -> s7 [0, 65535] { R15875 += 1, R15831 += 1, R11522 += 1, R11523 += 1 };
  s7 -> s6 [78, 65535] { R15875 += 1, R15831 += 1, R11523 += 1 };
  s8 -> s8 [0, 65535] { R15875 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s8, s5, s2, s9, s6;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 72] { R15877 += 1, R15833 += 1, R15343 += 1, R15344 += 1 };
  s0 -> s2 [0, 72] { R15877 += 1, R15833 += 1, R15342 += 1, R15343 += 1 };
  s0 -> s3 [0, 65535] { R15877 += 1, R15832 += 1, R15833 += 1 };
  s0 -> s0 [0, 65535] { R15876 += 1, R15877 += 1 };
  s0 -> s4 [73, 73] { R15877 += 1, R15833 += 1, R15343 += 1, R15344 += 1 };
  s0 -> s5 [73, 73] { R15877 += 1, R15833 += 1, R15342 += 1, R15343 += 1 };
  s0 -> s6 [73, 73] { R15877 += 1, R15833 += 1, R15343 += 1, R15344 += 1 };
  s0 -> s7 [73, 73] { R15877 += 1, R15833 += 1, R15342 += 1, R15343 += 1 };
  s0 -> s1 [74, 65535] { R15877 += 1, R15833 += 1, R15343 += 1, R15344 += 1 };
  s0 -> s2 [74, 65535] { R15877 += 1, R15833 += 1, R15342 += 1, R15343 += 1 };
  s1 -> s1 [0, 72] { R15877 += 1, R15833 += 1, R15343 += 1, R15344 += 1 };
  s1 -> s1 [0, 65535] { R15877 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s4 [73, 73] { R15877 += 1, R15833 += 1, R15343 += 1, R15344 += 1 };
  s1 -> s6 [73, 73] { R15877 += 1, R15833 += 1, R15343 += 1, R15344 += 1 };
  s1 -> s1 [74, 65535] { R15877 += 1, R15833 += 1, R15343 += 1, R15344 += 1 };
  s2 -> s1 [0, 72] { R15877 += 1, R15833 += 1, R15343 += 1, R15344 += 1 };
  s2 -> s2 [0, 72] { R15877 += 1, R15833 += 1, R15342 += 1, R15343 += 1 };
  s2 -> s4 [73, 73] { R15877 += 1, R15833 += 1, R15343 += 1, R15344 += 1 };
  s2 -> s5 [73, 73] { R15877 += 1, R15833 += 1, R15342 += 1, R15343 += 1 };
  s2 -> s6 [73, 73] { R15877 += 1, R15833 += 1, R15343 += 1, R15344 += 1 };
  s2 -> s7 [73, 73] { R15877 += 1, R15833 += 1, R15342 += 1, R15343 += 1 };
  s2 -> s1 [74, 65535] { R15877 += 1, R15833 += 1, R15343 += 1, R15344 += 1 };
  s2 -> s2 [74, 65535] { R15877 += 1, R15833 += 1, R15342 += 1, R15343 += 1 };
  s3 -> s1 [0, 72] { R15877 += 1, R15833 += 1, R15343 += 1, R15344 += 1 };
  s3 -> s2 [0, 72] { R15877 += 1, R15833 += 1, R15342 += 1, R15343 += 1 };
  s3 -> s3 [0, 65535] { R15877 += 1, R15832 += 1, R15833 += 1 };
  s3 -> s4 [73, 73] { R15877 += 1, R15833 += 1, R15343 += 1, R15344 += 1 };
  s3 -> s5 [73, 73] { R15877 += 1, R15833 += 1, R15342 += 1, R15343 += 1 };
  s3 -> s6 [73, 73] { R15877 += 1, R15833 += 1, R15343 += 1, R15344 += 1 };
  s3 -> s7 [73, 73] { R15877 += 1, R15833 += 1, R15342 += 1, R15343 += 1 };
  s3 -> s1 [74, 65535] { R15877 += 1, R15833 += 1, R15343 += 1, R15344 += 1 };
  s3 -> s2 [74, 65535] { R15877 += 1, R15833 += 1, R15342 += 1, R15343 += 1 };
  s4 -> s4 [0, 65535] { R15877 += 1, R15833 += 1, R15343 += 1, R15344 += 1 };
  s4 -> s9 [0, 65535] { R15877 += 1 };
  s4 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R15877 += 1 };
  s6 -> s8 [0, 65535];
  s7 -> s4 [0, 65535] { R15877 += 1, R15833 += 1, R15343 += 1, R15344 += 1 };
  s7 -> s7 [0, 65535] { R15877 += 1, R15833 += 1, R15342 += 1, R15343 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R15877 += 1 };
  s9 -> s8 [0, 65535];
  accepting s4, s8, s9, s6, s1;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 72] { R15879 += 1, R15835 += 1, R15348 += 1, R15349 += 1 };
  s0 -> s2 [0, 72] { R15879 += 1, R15835 += 1, R15349 += 1 };
  s0 -> s0 [0, 65535] { R15878 += 1, R15879 += 1 };
  s0 -> s3 [0, 65535] { R15879 += 1, R15834 += 1, R15835 += 1 };
  s0 -> s4 [73, 73] { R15879 += 1, R15835 += 1, R15349 += 1 };
  s0 -> s5 [73, 73] { R15879 += 1, R15835 += 1, R15349 += 1 };
  s0 -> s6 [73, 73] { R15879 += 1, R15835 += 1, R15348 += 1, R15349 += 1 };
  s0 -> s7 [73, 73] { R15879 += 1, R15835 += 1, R15348 += 1, R15349 += 1 };
  s0 -> s2 [74, 77] { R15879 += 1, R15835 += 1, R15349 += 1 };
  s0 -> s1 [74, 65535] { R15879 += 1, R15835 += 1, R15348 += 1, R15349 += 1 };
  s0 -> s8 [82, 82] { R15879 += 1, R15835 += 1, R15349 += 1 };
  s0 -> s2 [83, 65535] { R15879 += 1, R15835 += 1, R15349 += 1 };
  s1 -> s1 [0, 72] { R15879 += 1, R15835 += 1, R15348 += 1, R15349 += 1 };
  s1 -> s2 [0, 72] { R15879 += 1, R15835 += 1, R15349 += 1 };
  s1 -> s4 [73, 73] { R15879 += 1, R15835 += 1, R15349 += 1 };
  s1 -> s5 [73, 73] { R15879 += 1, R15835 += 1, R15349 += 1 };
  s1 -> s6 [73, 73] { R15879 += 1, R15835 += 1, R15348 += 1, R15349 += 1 };
  s1 -> s7 [73, 73] { R15879 += 1, R15835 += 1, R15348 += 1, R15349 += 1 };
  s1 -> s2 [74, 77] { R15879 += 1, R15835 += 1, R15349 += 1 };
  s1 -> s1 [74, 65535] { R15879 += 1, R15835 += 1, R15348 += 1, R15349 += 1 };
  s1 -> s8 [82, 82] { R15879 += 1, R15835 += 1, R15349 += 1 };
  s1 -> s2 [83, 65535] { R15879 += 1, R15835 += 1, R15349 += 1 };
  s2 -> s2 [0, 72] { R15879 += 1, R15835 += 1, R15349 += 1 };
  s2 -> s4 [73, 73] { R15879 += 1, R15835 += 1, R15349 += 1 };
  s2 -> s5 [73, 73] { R15879 += 1, R15835 += 1, R15349 += 1 };
  s2 -> s2 [74, 77] { R15879 += 1, R15835 += 1, R15349 += 1 };
  s2 -> s8 [82, 82] { R15879 += 1, R15835 += 1, R15349 += 1 };
  s2 -> s2 [83, 65535] { R15879 += 1, R15835 += 1, R15349 += 1 };
  s3 -> s1 [0, 72] { R15879 += 1, R15835 += 1, R15348 += 1, R15349 += 1 };
  s3 -> s2 [0, 72] { R15879 += 1, R15835 += 1, R15349 += 1 };
  s3 -> s3 [0, 65535] { R15879 += 1, R15834 += 1, R15835 += 1 };
  s3 -> s4 [73, 73] { R15879 += 1, R15835 += 1, R15349 += 1 };
  s3 -> s5 [73, 73] { R15879 += 1, R15835 += 1, R15349 += 1 };
  s3 -> s6 [73, 73] { R15879 += 1, R15835 += 1, R15348 += 1, R15349 += 1 };
  s3 -> s7 [73, 73] { R15879 += 1, R15835 += 1, R15348 += 1, R15349 += 1 };
  s3 -> s2 [74, 77] { R15879 += 1, R15835 += 1, R15349 += 1 };
  s3 -> s1 [74, 65535] { R15879 += 1, R15835 += 1, R15348 += 1, R15349 += 1 };
  s3 -> s8 [82, 82] { R15879 += 1, R15835 += 1, R15349 += 1 };
  s3 -> s2 [83, 65535] { R15879 += 1, R15835 += 1, R15349 += 1 };
  s4 -> s4 [0, 77] { R15879 += 1, R15835 += 1, R15349 += 1 };
  s4 -> s10 [82, 82] { R15879 += 1, R15835 += 1, R15349 += 1 };
  s4 -> s4 [83, 65535] { R15879 += 1, R15835 += 1, R15349 += 1 };
  s7 -> s4 [0, 77] { R15879 += 1, R15835 += 1, R15349 += 1 };
  s7 -> s7 [0, 65535] { R15879 += 1, R15835 += 1, R15348 += 1, R15349 += 1 };
  s7 -> s10 [82, 82] { R15879 += 1, R15835 += 1, R15349 += 1 };
  s7 -> s4 [83, 65535] { R15879 += 1, R15835 += 1, R15349 += 1 };
  s8 -> s8 [0, 72] { R15879 += 1, R15835 += 1, R15349 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R15879 += 1 };
  s8 -> s10 [73, 73] { R15879 += 1, R15835 += 1 };
  s8 -> s11 [73, 73] { R15879 += 1, R15835 += 1 };
  s8 -> s8 [74, 77] { R15879 += 1, R15835 += 1, R15349 += 1 };
  s8 -> s8 [74, 65535] { R15879 += 1, R15835 += 1 };
  s8 -> s8 [82, 65535] { R15879 += 1, R15835 += 1, R15349 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 77] { R15879 += 1, R15835 += 1, R15349 += 1 };
  s10 -> s12 [0, 65535] { R15879 += 1 };
  s10 -> s10 [0, 65535] { R15879 += 1, R15835 += 1 };
  s10 -> s9 [0, 65535];
  s10 -> s10 [82, 65535] { R15879 += 1, R15835 += 1, R15349 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R15879 += 1 };
  s12 -> s12 [0, 65535] { R15879 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 72] { R15881 += 1, R15837 += 1, R15775 += 1, R15776 += 1 };
  s0 -> s2 [0, 72] { R15881 += 1, R15837 += 1, R15774 += 1, R15775 += 1 };
  s0 -> s0 [0, 65535] { R15880 += 1, R15881 += 1 };
  s0 -> s3 [0, 65535] { R15881 += 1, R15836 += 1, R15837 += 1 };
  s0 -> s4 [73, 73] { R15881 += 1, R15837 += 1, R15775 += 1, R15776 += 1 };
  s0 -> s5 [73, 73] { R15881 += 1, R15837 += 1, R15774 += 1, R15775 += 1 };
  s0 -> s6 [73, 73] { R15881 += 1, R15837 += 1, R15774 += 1, R15775 += 1 };
  s0 -> s7 [73, 73] { R15881 += 1, R15837 += 1, R15775 += 1, R15776 += 1 };
  s0 -> s1 [74, 65535] { R15881 += 1, R15837 += 1, R15775 += 1, R15776 += 1 };
  s0 -> s2 [74, 65535] { R15881 += 1, R15837 += 1, R15774 += 1, R15775 += 1 };
  s1 -> s1 [0, 72] { R15881 += 1, R15837 += 1, R15775 += 1, R15776 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s1 [0, 65535] { R15881 += 1 };
  s1 -> s4 [73, 73] { R15881 += 1, R15837 += 1, R15775 += 1, R15776 += 1 };
  s1 -> s7 [73, 73] { R15881 += 1, R15837 += 1, R15775 += 1, R15776 += 1 };
  s1 -> s1 [74, 65535] { R15881 += 1, R15837 += 1, R15775 += 1, R15776 += 1 };
  s2 -> s1 [0, 72] { R15881 += 1, R15837 += 1, R15775 += 1, R15776 += 1 };
  s2 -> s2 [0, 72] { R15881 += 1, R15837 += 1, R15774 += 1, R15775 += 1 };
  s2 -> s4 [73, 73] { R15881 += 1, R15837 += 1, R15775 += 1, R15776 += 1 };
  s2 -> s5 [73, 73] { R15881 += 1, R15837 += 1, R15774 += 1, R15775 += 1 };
  s2 -> s6 [73, 73] { R15881 += 1, R15837 += 1, R15774 += 1, R15775 += 1 };
  s2 -> s7 [73, 73] { R15881 += 1, R15837 += 1, R15775 += 1, R15776 += 1 };
  s2 -> s1 [74, 65535] { R15881 += 1, R15837 += 1, R15775 += 1, R15776 += 1 };
  s2 -> s2 [74, 65535] { R15881 += 1, R15837 += 1, R15774 += 1, R15775 += 1 };
  s3 -> s1 [0, 72] { R15881 += 1, R15837 += 1, R15775 += 1, R15776 += 1 };
  s3 -> s2 [0, 72] { R15881 += 1, R15837 += 1, R15774 += 1, R15775 += 1 };
  s3 -> s3 [0, 65535] { R15881 += 1, R15836 += 1, R15837 += 1 };
  s3 -> s4 [73, 73] { R15881 += 1, R15837 += 1, R15775 += 1, R15776 += 1 };
  s3 -> s5 [73, 73] { R15881 += 1, R15837 += 1, R15774 += 1, R15775 += 1 };
  s3 -> s6 [73, 73] { R15881 += 1, R15837 += 1, R15774 += 1, R15775 += 1 };
  s3 -> s7 [73, 73] { R15881 += 1, R15837 += 1, R15775 += 1, R15776 += 1 };
  s3 -> s1 [74, 65535] { R15881 += 1, R15837 += 1, R15775 += 1, R15776 += 1 };
  s3 -> s2 [74, 65535] { R15881 += 1, R15837 += 1, R15774 += 1, R15775 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s4 [0, 65535] { R15881 += 1 };
  s6 -> s6 [0, 65535] { R15881 += 1, R15837 += 1, R15774 += 1, R15775 += 1 };
  s6 -> s7 [0, 65535] { R15881 += 1, R15837 += 1, R15775 += 1, R15776 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s9 [0, 65535] { R15881 += 1 };
  s7 -> s7 [0, 65535] { R15881 += 1, R15837 += 1, R15775 += 1, R15776 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R15881 += 1 };
  accepting s4, s8, s9, s1, s7;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 72] { R15883 += 1, R15839 += 1, R15780 += 1, R15781 += 1 };
  s0 -> s0 [0, 65535] { R15882 += 1, R15883 += 1 };
  s0 -> s2 [0, 65535] { R15883 += 1, R15838 += 1, R15839 += 1 };
  s0 -> s3 [73, 73] { R15883 += 1, R15839 += 1, R15780 += 1, R15781 += 1 };
  s0 -> s4 [73, 73] { R15883 += 1, R15839 += 1, R15780 += 1, R15781 += 1 };
  s0 -> s1 [74, 65535] { R15883 += 1, R15839 += 1, R15780 += 1, R15781 += 1 };
  s1 -> s1 [0, 72] { R15883 += 1, R15839 += 1, R15780 += 1, R15781 += 1 };
  s1 -> s1 [0, 65535] { R15883 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R15883 += 1, R15839 += 1, R15780 += 1, R15781 += 1 };
  s1 -> s4 [73, 73] { R15883 += 1, R15839 += 1, R15780 += 1, R15781 += 1 };
  s1 -> s1 [74, 65535] { R15883 += 1, R15839 += 1, R15780 += 1, R15781 += 1 };
  s2 -> s1 [0, 72] { R15883 += 1, R15839 += 1, R15780 += 1, R15781 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R15883 += 1, R15838 += 1, R15839 += 1 };
  s2 -> s3 [73, 73] { R15883 += 1, R15839 += 1, R15780 += 1, R15781 += 1 };
  s2 -> s4 [73, 73] { R15883 += 1, R15839 += 1, R15780 += 1, R15781 += 1 };
  s2 -> s1 [74, 65535] { R15883 += 1, R15839 += 1, R15780 += 1, R15781 += 1 };
  s3 -> s3 [0, 65535] { R15883 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R15883 += 1 };
  s4 -> s4 [0, 65535] { R15883 += 1, R15839 += 1, R15780 += 1, R15781 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R15883 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
synchronised {  // Automata constraining P54
automaton P54_0 {
  init s0;
  s0 -> s1 [109, 109];
  accepting s1;
};
};
constraint R2 = R15883 && R20 - R15883 = -1 && R21 = R15883 && R22 - R15883 = -1 && R23 = R15883 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R15351 + -1*R15349 - R53 = 0 && R52 + R15350 + R15348 = 0 && R15824 = 0 && R15825 = 0 && R15830 = 0 && R15831 = 0 && R15832 = 0 && R15833 = 0 && R15834 = 0 && R15835 = 0 && R15836 = 0 && R15837 = 0 && R15840 = 0 && R15841 = R15883 && R15842 = 0 && R15843 = R15883 && R15844 = 0 && R15845 = R15883 && R15846 = 0 && R15847 = R15883 && R15848 = 0 && R15849 = R15883 && R15850 = 0 && R15851 = R15883 && R15852 = 0 && R15853 = R15883 && R15854 = 0 && R15855 = R15883 && R15856 = 0 && R15857 = R15883 && R15858 = 0 && R15859 = R15883 && R15860 = 0 && R15861 = R15883 && R15862 = 0 && R15863 = R15883 && R15864 = 0 && R15865 = R15883 && R15866 = 0 && R15867 = R15883 && R15868 = 0 && R15869 = R15883 && R15870 = 0 && R15871 = R15883 && R15872 = 0 && R15873 = R15883 && R15874 = 0 && R15875 = R15883 && R15876 = 0 && R15877 = R15883 && R15878 = 0 && R15879 = R15883 && R15880 = 0 && R15881 = R15883 && R15882 = 0 && -1 < R1 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R15351 + -1*R15349 - R53 < 1 && 0 < R15883 && (R1 != 0 || R17 = 0 || (R15784 = 0 && R15785 = 0)) && (R1 != 0 || R17 = 0 || (R15786 = 0 && R15787 = 0)) && (R1 != 0 || R17 = 0 || (R15788 = 0 && R15789 = 0)) && (R1 != 0 || R17 = 0 || (R15790 = 0 && R15791 = 0)) && (R1 != 0 || R17 = 0 || (R15792 = 0 && R15793 = 0)) && (R1 != 0 || R17 = 0 || (R15794 = 0 && R15795 = 0)) && (R1 != 0 || R17 = 0 || (R15796 = 0 && R15797 = 0)) && (R1 != 0 || R17 = 0 || (R15798 = 0 && R15799 = 0)) && (R1 != 0 || R17 = 0 || (R15800 = 0 && R15801 = 0)) && (R1 != 0 || R17 = 0 || (R15802 = 0 && R15803 = 0)) && (R48 + R15347 + R15344 != 0 || ((R42 + R11524 + R11522 != 0 || R43 + R11525 + R11523 + -1*R15351 + -1*R15349 - R53 = 0 || R53 + R15351 + R15349 < 1) && (R42 + R11524 + R11522 = 0 || R53 + R15351 + R15349 < 1))) && (R48 + R15347 + R15344 != 0 || ((R46 + R15345 + R15342 != 0 || R47 + R15346 + R15343 + -1*R15351 + -1*R15349 - R53 = 0 || R53 + R15351 + R15349 < 1) && (R46 + R15345 + R15342 = 0 || R53 + R15351 + R15349 < 1))) && (R15784 != 0 || R1 = R15785 || R1 < 1) && (R15786 != 0 || R1 = R15787 || R1 < 1) && (R15788 != 0 || R1 = R15789 || R1 < 1) && (R15790 != 0 || R1 = R15791 || R1 < 1) && (R15792 != 0 || R1 = R15793 || R1 < 1) && (R15794 != 0 || R1 = R15795 || R1 < 1) && (R15796 != 0 || R1 = R15797 || R1 < 1) && (R15798 != 0 || R1 = R15799 || R1 < 1) && (R15800 != 0 || R1 = R15801 || R1 < 1) && (R15802 != 0 || R1 = R15803 || R1 < 1) && (R18 = 0 || (R15822 = 0 && R15823 = 0)) && (R18 = 0 || (R15826 = 0 && R15827 = 0)) && (R18 = 0 || (R15828 = 0 && R15829 = 0)) && (R18 = 0 || (R15838 = 0 && R15839 = 0)) && (R19 = 0 || (R15804 = 0 && R15805 = 0)) && (R19 = 0 || (R15806 = 0 && R15807 = 0)) && (R19 = 0 || (R15808 = 0 && R15809 = 0)) && (R19 = 0 || (R15810 = 0 && R15811 = 0)) && (R19 = 0 || (R15812 = 0 && R15813 = 0)) && (R19 = 0 || (R15814 = 0 && R15815 = 0)) && (R19 = 0 || (R15816 = 0 && R15817 = 0)) && (R19 = 0 || (R15818 = 0 && R15819 = 0)) && (R19 = 0 || (R15820 = 0 && R15821 = 0)) && (R48 + R15347 + R15344 = 0 || (R42 + R11524 + R11522 = 0 && R43 + R11525 + R11523 + -1*R15351 + -1*R15349 - R53 = 0)) && (R48 + R15347 + R15344 = 0 || (R46 + R15345 + R15342 = 0 && R47 + R15346 + R15343 + -1*R15351 + -1*R15349 - R53 = 0)) && (R58 + R15779 + R15776 = 0 || (R56 + R15777 + R15774 = 0 && R57 + R15778 + R15775 = 0)) && (R58 + R15779 + R15776 = 0 || (R62 + R15782 + R15780 = 0 && R63 + R15783 + R15781 = 0)) && (R15784 = 0 || R1 < 1) && (R15786 = 0 || R1 < 1) && (R15788 = 0 || R1 < 1) && (R15790 = 0 || R1 < 1) && (R15792 = 0 || R1 < 1) && (R15794 = 0 || R1 < 1) && (R15796 = 0 || R1 < 1) && (R15798 = 0 || R1 < 1) && (R15800 = 0 || R1 < 1) && (R15802 = 0 || R1 < 1);
// End of Parikh automata intersection problem
