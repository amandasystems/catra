// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R12, R15332, R15333, R15334, R15335, R15336, R15337, R15338, R15339, R15340, R15341, R17, R17882, R17883, R17884, R17885, R17886, R17887, R17888, R17889, R17890, R17891, R17892, R17893, R17894, R17895, R17896, R17897, R17898, R17899, R17900, R17901, R17902, R17903, R17904, R17905, R17906, R17907, R17908, R17909, R17910, R17911, R17912, R17913, R17914, R17915, R17916, R17917, R17918, R17919, R17920, R17921, R17922, R17923, R17924, R17925, R17926, R17927, R17928, R17929, R17930, R17931, R17932, R17933, R17934, R17935, R17936, R17937, R17938, R17939, R17940, R17941, R17942, R17943, R17944, R17945, R17946, R17947, R17948, R17949, R17950, R17951, R17952, R17953, R17954, R17955, R17956, R17957, R17958, R17959, R17960, R17961, R17962, R17963, R17964, R17965, R17966, R17967, R17968, R17969, R17970, R17971, R17972, R17973, R17974, R17975, R17976, R17977, R17978, R17979, R17980, R17981, R17982, R17983, R17984, R17985, R17986, R17987, R17988, R17989, R17990, R17991, R17992, R17993, R17994, R17995, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 72];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [73, 73];
  s0 -> s1 [74, 65535];
  s1 -> s1 [0, 72];
  s1 -> s2 [73, 73];
  s1 -> s1 [74, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s1 [0, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R25 += 1 };
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R17916 += 1, R17917 += 1 };
  s0 -> s1 [0, 65535] { R17917 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R17917 += 1, R19 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 72] { R17919 += 1 };
  s0 -> s0 [0, 65535] { R17918 += 1, R17919 += 1 };
  s0 -> s2 [73, 73] { R17919 += 1 };
  s0 -> s3 [73, 73] { R17919 += 1 };
  s0 -> s1 [78, 65535] { R17919 += 1 };
  s1 -> s1 [0, 72] { R17919 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R17919 += 1 };
  s1 -> s3 [73, 73] { R17919 += 1 };
  s1 -> s1 [78, 65535] { R17919 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 73] { R17919 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [78, 65535] { R17919 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 72] { R17921 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R17920 += 1, R17921 += 1 };
  s0 -> s2 [73, 73] { R17921 += 1, R38 += 1 };
  s0 -> s3 [73, 73] { R17921 += 1, R38 += 1 };
  s0 -> s1 [74, 65535] { R17921 += 1, R38 += 1 };
  s1 -> s1 [0, 72] { R17921 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R17921 += 1, R38 += 1 };
  s1 -> s3 [73, 73] { R17921 += 1, R38 += 1 };
  s1 -> s1 [74, 65535] { R17921 += 1, R38 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R17921 += 1, R38 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 72] { R17923 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R17922 += 1, R17923 += 1 };
  s0 -> s2 [73, 73] { R17923 += 1, R40 += 1 };
  s0 -> s3 [73, 73] { R17923 += 1, R40 += 1 };
  s0 -> s1 [74, 65535] { R17923 += 1, R40 += 1 };
  s1 -> s1 [0, 72] { R17923 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R17923 += 1, R40 += 1 };
  s1 -> s3 [73, 73] { R17923 += 1, R40 += 1 };
  s1 -> s1 [74, 65535] { R17923 += 1, R40 += 1 };
  s2 -> s2 [0, 65535] { R17923 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 72] { R17925 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R17924 += 1, R17925 += 1 };
  s0 -> s2 [73, 73] { R17925 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [73, 73] { R17925 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [74, 65535] { R17925 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 72] { R17925 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R17925 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [73, 73] { R17925 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [74, 65535] { R17925 += 1, R42 += 1, R43 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R17925 += 1, R42 += 1, R43 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 72] { R17927 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R17926 += 1, R17927 += 1 };
  s0 -> s2 [73, 73] { R17927 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [73, 73] { R17927 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [74, 65535] { R17927 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 72] { R17927 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R17927 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [73, 73] { R17927 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [74, 65535] { R17927 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535] { R17927 += 1, R46 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 72] { R17929 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R17928 += 1, R17929 += 1 };
  s0 -> s2 [73, 73] { R17929 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [73, 73] { R17929 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [74, 65535] { R17929 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 72] { R17929 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R17929 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [73, 73] { R17929 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [74, 65535] { R17929 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R17929 += 1, R52 += 1, R53 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 72] { R17931 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R17930 += 1, R17931 += 1 };
  s0 -> s2 [73, 73] { R17931 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [73, 73] { R17931 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [74, 65535] { R17931 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 72] { R17931 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R17931 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [73, 73] { R17931 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [74, 65535] { R17931 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R17931 += 1, R56 += 1, R57 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 72] { R17933 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R17932 += 1, R17933 += 1 };
  s0 -> s2 [73, 73] { R17933 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [73, 73] { R17933 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [74, 65535] { R17933 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 72] { R17933 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R17933 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [73, 73] { R17933 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [74, 65535] { R17933 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R17933 += 1, R62 += 1, R63 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 72] { R17953 += 1 };
  s0 -> s0 [0, 65535] { R17952 += 1, R17953 += 1 };
  s0 -> s2 [73, 73] { R17953 += 1 };
  s0 -> s1 [74, 65535] { R17953 += 1 };
  s1 -> s1 [0, 72] { R17953 += 1 };
  s1 -> s2 [73, 73] { R17953 += 1 };
  s1 -> s1 [74, 65535] { R17953 += 1 };
  s2 -> s2 [0, 65535] { R17953 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R17954 += 1, R17955 += 1 };
  s0 -> s1 [0, 65535] { R17955 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R17955 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 72] { R17957 += 1 };
  s0 -> s2 [0, 65535] { R17957 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R17956 += 1, R17957 += 1 };
  s0 -> s3 [73, 73] { R17957 += 1 };
  s0 -> s1 [74, 65535] { R17957 += 1 };
  s1 -> s1 [0, 72] { R17957 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [73, 73] { R17957 += 1 };
  s1 -> s1 [74, 65535] { R17957 += 1 };
  s2 -> s1 [0, 72] { R17957 += 1 };
  s2 -> s2 [0, 65535] { R17957 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [73, 73] { R17957 += 1 };
  s2 -> s1 [74, 65535] { R17957 += 1 };
  s3 -> s3 [0, 65535] { R17957 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 72] { R17959 += 1, R17897 += 1 };
  s0 -> s0 [0, 65535] { R17958 += 1, R17959 += 1 };
  s0 -> s2 [0, 65535] { R17959 += 1, R17896 += 1, R17897 += 1 };
  s0 -> s1 [74, 65535] { R17959 += 1, R17897 += 1 };
  s1 -> s1 [0, 72] { R17959 += 1, R17897 += 1 };
  s1 -> s1 [0, 65535] { R17959 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [74, 65535] { R17959 += 1, R17897 += 1 };
  s2 -> s1 [0, 72] { R17959 += 1, R17897 += 1 };
  s2 -> s2 [0, 65535] { R17959 += 1, R17896 += 1, R17897 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [74, 65535] { R17959 += 1, R17897 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R17961 += 1, R17899 += 1, R17 += 1 };
  s0 -> s2 [0, 65535] { R17961 += 1, R17898 += 1, R17899 += 1 };
  s0 -> s0 [0, 65535] { R17960 += 1, R17961 += 1 };
  s1 -> s1 [0, 65535] { R17961 += 1, R17899 += 1, R17 += 1 };
  s1 -> s4 [0, 65535] { R17961 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R17961 += 1, R17899 += 1, R17 += 1 };
  s2 -> s2 [0, 65535] { R17961 += 1, R17898 += 1, R17899 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R17961 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 73] { R17963 += 1, R17901 += 1 };
  s0 -> s2 [0, 65535] { R17963 += 1, R17900 += 1, R17901 += 1 };
  s0 -> s0 [0, 65535] { R17962 += 1, R17963 += 1 };
  s0 -> s1 [77, 65535] { R17963 += 1, R17901 += 1 };
  s1 -> s1 [0, 73] { R17963 += 1, R17901 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R17963 += 1 };
  s1 -> s1 [77, 65535] { R17963 += 1, R17901 += 1 };
  s2 -> s1 [0, 73] { R17963 += 1, R17901 += 1 };
  s2 -> s2 [0, 65535] { R17963 += 1, R17900 += 1, R17901 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [77, 65535] { R17963 += 1, R17901 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R17965 += 1, R17902 += 1, R17903 += 1 };
  s0 -> s0 [0, 65535] { R17964 += 1, R17965 += 1 };
  s0 -> s2 [0, 65535] { R17965 += 1, R17903 += 1, R67 += 1 };
  s1 -> s1 [0, 65535] { R17965 += 1, R17902 += 1, R17903 += 1 };
  s1 -> s2 [0, 65535] { R17965 += 1, R17903 += 1, R67 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R17965 += 1, R17903 += 1, R67 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R17965 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R17965 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 76] { R17967 += 1, R17905 += 1 };
  s0 -> s2 [0, 65535] { R17967 += 1, R17905 += 1, R69 += 1 };
  s0 -> s3 [0, 65535] { R17967 += 1, R17904 += 1, R17905 += 1 };
  s0 -> s0 [0, 65535] { R17966 += 1, R17967 += 1 };
  s0 -> s1 [78, 65535] { R17967 += 1, R17905 += 1 };
  s1 -> s1 [0, 76] { R17967 += 1, R17905 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R17967 += 1 };
  s1 -> s1 [78, 65535] { R17967 += 1, R17905 += 1 };
  s2 -> s1 [0, 76] { R17967 += 1, R17905 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R17967 += 1, R17905 += 1, R69 += 1 };
  s2 -> s5 [0, 65535] { R17967 += 1 };
  s2 -> s1 [78, 65535] { R17967 += 1, R17905 += 1 };
  s3 -> s1 [0, 76] { R17967 += 1, R17905 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R17967 += 1, R17905 += 1, R69 += 1 };
  s3 -> s3 [0, 65535] { R17967 += 1, R17904 += 1, R17905 += 1 };
  s3 -> s1 [78, 65535] { R17967 += 1, R17905 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R17967 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 76] { R17969 += 1, R17907 += 1, R15335 += 1 };
  s0 -> s2 [0, 65535] { R17969 += 1, R17906 += 1, R17907 += 1 };
  s0 -> s0 [0, 65535] { R17968 += 1, R17969 += 1 };
  s0 -> s1 [0, 65535] { R17969 += 1, R17907 += 1 };
  s0 -> s1 [78, 65535] { R17969 += 1, R17907 += 1, R15335 += 1 };
  s1 -> s1 [0, 76] { R17969 += 1, R17907 += 1, R15335 += 1 };
  s1 -> s1 [0, 65535] { R17969 += 1, R17907 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R17969 += 1 };
  s1 -> s1 [78, 65535] { R17969 += 1, R17907 += 1, R15335 += 1 };
  s2 -> s1 [0, 76] { R17969 += 1, R17907 += 1, R15335 += 1 };
  s2 -> s2 [0, 65535] { R17969 += 1, R17906 += 1, R17907 += 1 };
  s2 -> s1 [0, 65535] { R17969 += 1, R17907 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [78, 65535] { R17969 += 1, R17907 += 1, R15335 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R17969 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R17971 += 1, R17908 += 1, R17909 += 1 };
  s0 -> s2 [0, 65535] { R17971 += 1, R17909 += 1, R15339 += 1, R15340 += 1 };
  s0 -> s0 [0, 65535] { R17970 += 1, R17971 += 1 };
  s0 -> s3 [0, 65535] { R17971 += 1, R17909 += 1, R15340 += 1, R15341 += 1 };
  s1 -> s1 [0, 65535] { R17971 += 1, R17908 += 1, R17909 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s2 [0, 65535] { R17971 += 1, R17909 += 1, R15339 += 1, R15340 += 1 };
  s1 -> s3 [0, 65535] { R17971 += 1, R17909 += 1, R15340 += 1, R15341 += 1 };
  s2 -> s4 [0, 65535] { R17971 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R17971 += 1, R17909 += 1, R15339 += 1, R15340 += 1 };
  s2 -> s3 [0, 65535] { R17971 += 1, R17909 += 1, R15340 += 1, R15341 += 1 };
  s3 -> s4 [0, 65535] { R17971 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R17971 += 1, R17909 += 1, R15340 += 1, R15341 += 1 };
  s3 -> s6 [0, 65535] { R17971 += 1, R17909 += 1 };
  s4 -> s4 [0, 65535] { R17971 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R17971 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R17971 += 1, R17909 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 77] { R17973 += 1, R17911 += 1, R17885 += 1 };
  s0 -> s2 [0, 65535] { R17973 += 1, R17910 += 1, R17911 += 1 };
  s0 -> s0 [0, 65535] { R17972 += 1, R17973 += 1 };
  s0 -> s3 [78, 78] { R17973 += 1, R17911 += 1, R17885 += 1 };
  s0 -> s1 [79, 65535] { R17973 += 1, R17911 += 1, R17885 += 1 };
  s1 -> s1 [0, 77] { R17973 += 1, R17911 += 1, R17885 += 1 };
  s1 -> s3 [78, 78] { R17973 += 1, R17911 += 1, R17885 += 1 };
  s1 -> s1 [79, 65535] { R17973 += 1, R17911 += 1, R17885 += 1 };
  s2 -> s1 [0, 77] { R17973 += 1, R17911 += 1, R17885 += 1 };
  s2 -> s2 [0, 65535] { R17973 += 1, R17910 += 1, R17911 += 1 };
  s2 -> s3 [78, 78] { R17973 += 1, R17911 += 1, R17885 += 1 };
  s2 -> s1 [79, 65535] { R17973 += 1, R17911 += 1, R17885 += 1 };
  s3 -> s4 [0, 65535] { R17973 += 1 };
  s3 -> s5 [0, 65535] { R17973 += 1, R17911 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R17973 += 1, R17911 += 1, R17885 += 1 };
  s4 -> s4 [0, 65535] { R17973 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s4 [0, 65535] { R17973 += 1 };
  s5 -> s5 [0, 65535] { R17973 += 1, R17911 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s6;
};
automaton value2_28 {
  init s0;
  s0 -> s0 [0, 65535] { R17974 += 1, R17975 += 1 };
  s0 -> s1 [0, 65535] { R17975 += 1, R17913 += 1, R17889 += 1, R17890 += 1 };
  s0 -> s2 [0, 65535] { R17975 += 1, R17913 += 1, R17890 += 1, R17891 += 1 };
  s0 -> s3 [0, 65535] { R17975 += 1, R17912 += 1, R17913 += 1 };
  s1 -> s6 [0, 65535] { R17975 += 1 };
  s1 -> s1 [0, 65535] { R17975 += 1, R17913 += 1, R17889 += 1, R17890 += 1 };
  s1 -> s2 [0, 65535] { R17975 += 1, R17913 += 1, R17890 += 1, R17891 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R17975 += 1, R17913 += 1 };
  s2 -> s6 [0, 65535] { R17975 += 1 };
  s2 -> s2 [0, 65535] { R17975 += 1, R17913 += 1, R17890 += 1, R17891 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R17975 += 1, R17913 += 1, R17889 += 1, R17890 += 1 };
  s3 -> s2 [0, 65535] { R17975 += 1, R17913 += 1, R17890 += 1, R17891 += 1 };
  s3 -> s3 [0, 65535] { R17975 += 1, R17912 += 1, R17913 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R17975 += 1, R17913 += 1 };
  s5 -> s6 [0, 65535] { R17975 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R17975 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 76] { R17977 += 1, R17915 += 1, R17895 += 1 };
  s0 -> s2 [0, 65535] { R17977 += 1, R17915 += 1, R17894 += 1, R17895 += 1 };
  s0 -> s0 [0, 65535] { R17976 += 1, R17977 += 1 };
  s0 -> s3 [0, 65535] { R17977 += 1, R17914 += 1, R17915 += 1 };
  s0 -> s4 [77, 77] { R17977 += 1, R17915 += 1, R17895 += 1 };
  s0 -> s5 [77, 77] { R17977 += 1, R17915 += 1, R17895 += 1 };
  s0 -> s1 [79, 65535] { R17977 += 1, R17915 += 1, R17895 += 1 };
  s1 -> s1 [0, 76] { R17977 += 1, R17915 += 1, R17895 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R17977 += 1, R17915 += 1 };
  s1 -> s7 [0, 65535] { R17977 += 1 };
  s1 -> s4 [77, 77] { R17977 += 1, R17915 += 1, R17895 += 1 };
  s1 -> s5 [77, 77] { R17977 += 1, R17915 += 1, R17895 += 1 };
  s1 -> s1 [79, 65535] { R17977 += 1, R17915 += 1, R17895 += 1 };
  s2 -> s1 [0, 76] { R17977 += 1, R17915 += 1, R17895 += 1 };
  s2 -> s2 [0, 65535] { R17977 += 1, R17915 += 1, R17894 += 1, R17895 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s7 [0, 65535] { R17977 += 1 };
  s2 -> s4 [77, 77] { R17977 += 1, R17915 += 1, R17895 += 1 };
  s2 -> s5 [77, 77] { R17977 += 1, R17915 += 1, R17895 += 1 };
  s2 -> s1 [79, 65535] { R17977 += 1, R17915 += 1, R17895 += 1 };
  s3 -> s1 [0, 76] { R17977 += 1, R17915 += 1, R17895 += 1 };
  s3 -> s2 [0, 65535] { R17977 += 1, R17915 += 1, R17894 += 1, R17895 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R17977 += 1, R17914 += 1, R17915 += 1 };
  s3 -> s4 [77, 77] { R17977 += 1, R17915 += 1, R17895 += 1 };
  s3 -> s5 [77, 77] { R17977 += 1, R17915 += 1, R17895 += 1 };
  s3 -> s1 [79, 65535] { R17977 += 1, R17915 += 1, R17895 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R17977 += 1, R17915 += 1 };
  s4 -> s7 [0, 65535] { R17977 += 1 };
  s5 -> s5 [0, 77] { R17977 += 1, R17915 += 1, R17895 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R17977 += 1 };
  s5 -> s5 [0, 65535] { R17977 += 1, R17915 += 1 };
  s5 -> s5 [79, 65535] { R17977 += 1, R17915 += 1, R17895 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R17977 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s0 [0, 65535] { R17978 += 1, R17979 += 1 };
  s0 -> s1 [0, 65535] { R17979 += 1, R17935 += 1, R18 += 1 };
  s0 -> s2 [0, 65535] { R17979 += 1, R17934 += 1, R17935 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R17979 += 1, R17935 += 1, R18 += 1 };
  s1 -> s4 [0, 65535] { R17979 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R17979 += 1, R17935 += 1, R18 += 1 };
  s2 -> s2 [0, 65535] { R17979 += 1, R17934 += 1, R17935 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R17979 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 72] { R17981 += 1, R17937 += 1 };
  s0 -> s0 [0, 65535] { R17980 += 1, R17981 += 1 };
  s0 -> s2 [0, 65535] { R17981 += 1, R17936 += 1, R17937 += 1 };
  s0 -> s3 [73, 73] { R17981 += 1, R17937 += 1 };
  s0 -> s4 [73, 73] { R17981 += 1, R17937 += 1 };
  s0 -> s5 [77, 77] { R17981 += 1, R17937 += 1 };
  s0 -> s1 [78, 65535] { R17981 += 1, R17937 += 1 };
  s1 -> s1 [0, 72] { R17981 += 1, R17937 += 1 };
  s1 -> s3 [73, 73] { R17981 += 1, R17937 += 1 };
  s1 -> s4 [73, 73] { R17981 += 1, R17937 += 1 };
  s1 -> s5 [77, 77] { R17981 += 1, R17937 += 1 };
  s1 -> s1 [78, 65535] { R17981 += 1, R17937 += 1 };
  s2 -> s1 [0, 72] { R17981 += 1, R17937 += 1 };
  s2 -> s2 [0, 65535] { R17981 += 1, R17936 += 1, R17937 += 1 };
  s2 -> s3 [73, 73] { R17981 += 1, R17937 += 1 };
  s2 -> s4 [73, 73] { R17981 += 1, R17937 += 1 };
  s2 -> s5 [77, 77] { R17981 += 1, R17937 += 1 };
  s2 -> s1 [78, 65535] { R17981 += 1, R17937 += 1 };
  s4 -> s4 [0, 73] { R17981 += 1, R17937 += 1 };
  s4 -> s7 [77, 77] { R17981 += 1, R17937 += 1 };
  s4 -> s4 [78, 65535] { R17981 += 1, R17937 += 1 };
  s5 -> s5 [0, 72] { R17981 += 1, R17937 += 1 };
  s5 -> s5 [0, 65535] { R17981 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [73, 73] { R17981 += 1, R17937 += 1 };
  s5 -> s8 [73, 73] { R17981 += 1, R17937 += 1 };
  s5 -> s5 [77, 65535] { R17981 += 1, R17937 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 73] { R17981 += 1, R17937 += 1 };
  s7 -> s7 [0, 65535] { R17981 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [77, 65535] { R17981 += 1, R17937 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R17981 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 72] { R17983 += 1, R17939 += 1, R66 += 1 };
  s0 -> s2 [0, 65535] { R17983 += 1, R17938 += 1, R17939 += 1 };
  s0 -> s0 [0, 65535] { R17982 += 1, R17983 += 1 };
  s0 -> s3 [73, 73] { R17983 += 1, R17939 += 1, R66 += 1 };
  s0 -> s4 [73, 73] { R17983 += 1, R17939 += 1, R66 += 1 };
  s0 -> s1 [74, 65535] { R17983 += 1, R17939 += 1, R66 += 1 };
  s1 -> s1 [0, 72] { R17983 += 1, R17939 += 1, R66 += 1 };
  s1 -> s1 [0, 65535] { R17983 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R17983 += 1, R17939 += 1, R66 += 1 };
  s1 -> s4 [73, 73] { R17983 += 1, R17939 += 1, R66 += 1 };
  s1 -> s1 [74, 65535] { R17983 += 1, R17939 += 1, R66 += 1 };
  s2 -> s1 [0, 72] { R17983 += 1, R17939 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R17983 += 1, R17938 += 1, R17939 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R17983 += 1, R17939 += 1, R66 += 1 };
  s2 -> s4 [73, 73] { R17983 += 1, R17939 += 1, R66 += 1 };
  s2 -> s1 [74, 65535] { R17983 += 1, R17939 += 1, R66 += 1 };
  s3 -> s6 [0, 65535] { R17983 += 1 };
  s3 -> s3 [0, 65535] { R17983 += 1, R17939 += 1, R66 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R17983 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R17983 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 72] { R17985 += 1, R17941 += 1, R68 += 1 };
  s0 -> s0 [0, 65535] { R17984 += 1, R17985 += 1 };
  s0 -> s2 [0, 65535] { R17985 += 1, R17940 += 1, R17941 += 1 };
  s0 -> s3 [73, 73] { R17985 += 1, R17941 += 1, R68 += 1 };
  s0 -> s4 [73, 73] { R17985 += 1, R17941 += 1, R68 += 1 };
  s0 -> s1 [74, 65535] { R17985 += 1, R17941 += 1, R68 += 1 };
  s1 -> s1 [0, 72] { R17985 += 1, R17941 += 1, R68 += 1 };
  s1 -> s1 [0, 65535] { R17985 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [73, 73] { R17985 += 1, R17941 += 1, R68 += 1 };
  s1 -> s4 [73, 73] { R17985 += 1, R17941 += 1, R68 += 1 };
  s1 -> s1 [74, 65535] { R17985 += 1, R17941 += 1, R68 += 1 };
  s2 -> s1 [0, 72] { R17985 += 1, R17941 += 1, R68 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R17985 += 1, R17940 += 1, R17941 += 1 };
  s2 -> s3 [73, 73] { R17985 += 1, R17941 += 1, R68 += 1 };
  s2 -> s4 [73, 73] { R17985 += 1, R17941 += 1, R68 += 1 };
  s2 -> s1 [74, 65535] { R17985 += 1, R17941 += 1, R68 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R17985 += 1 };
  s4 -> s5 [0, 65535] { R17985 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R17985 += 1, R17941 += 1, R68 += 1 };
  s5 -> s5 [0, 65535] { R17985 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 72] { R17987 += 1, R17943 += 1, R15333 += 1 };
  s0 -> s2 [0, 72] { R17987 += 1, R17943 += 1, R15332 += 1, R15333 += 1 };
  s0 -> s3 [0, 65535] { R17987 += 1, R17942 += 1, R17943 += 1 };
  s0 -> s0 [0, 65535] { R17986 += 1, R17987 += 1 };
  s0 -> s4 [73, 73] { R17987 += 1, R17943 += 1, R15332 += 1, R15333 += 1 };
  s0 -> s5 [73, 73] { R17987 += 1, R17943 += 1, R15332 += 1, R15333 += 1 };
  s0 -> s6 [73, 73] { R17987 += 1, R17943 += 1, R15333 += 1 };
  s0 -> s7 [73, 73] { R17987 += 1, R17943 += 1, R15333 += 1 };
  s0 -> s1 [74, 76] { R17987 += 1, R17943 += 1, R15333 += 1 };
  s0 -> s2 [74, 65535] { R17987 += 1, R17943 += 1, R15332 += 1, R15333 += 1 };
  s0 -> s1 [78, 65535] { R17987 += 1, R17943 += 1, R15333 += 1 };
  s1 -> s1 [0, 72] { R17987 += 1, R17943 += 1, R15333 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s1 [0, 65535] { R17987 += 1 };
  s1 -> s6 [73, 73] { R17987 += 1, R17943 += 1 };
  s1 -> s7 [73, 73] { R17987 += 1, R17943 += 1 };
  s1 -> s1 [74, 76] { R17987 += 1, R17943 += 1, R15333 += 1 };
  s1 -> s1 [74, 65535] { R17987 += 1, R17943 += 1 };
  s1 -> s1 [78, 65535] { R17987 += 1, R17943 += 1, R15333 += 1 };
  s2 -> s1 [0, 72] { R17987 += 1, R17943 += 1, R15333 += 1 };
  s2 -> s2 [0, 72] { R17987 += 1, R17943 += 1, R15332 += 1, R15333 += 1 };
  s2 -> s4 [73, 73] { R17987 += 1, R17943 += 1, R15332 += 1, R15333 += 1 };
  s2 -> s5 [73, 73] { R17987 += 1, R17943 += 1, R15332 += 1, R15333 += 1 };
  s2 -> s6 [73, 73] { R17987 += 1, R17943 += 1, R15333 += 1 };
  s2 -> s7 [73, 73] { R17987 += 1, R17943 += 1, R15333 += 1 };
  s2 -> s1 [74, 76] { R17987 += 1, R17943 += 1, R15333 += 1 };
  s2 -> s2 [74, 65535] { R17987 += 1, R17943 += 1, R15332 += 1, R15333 += 1 };
  s2 -> s1 [78, 65535] { R17987 += 1, R17943 += 1, R15333 += 1 };
  s3 -> s1 [0, 72] { R17987 += 1, R17943 += 1, R15333 += 1 };
  s3 -> s2 [0, 72] { R17987 += 1, R17943 += 1, R15332 += 1, R15333 += 1 };
  s3 -> s3 [0, 65535] { R17987 += 1, R17942 += 1, R17943 += 1 };
  s3 -> s4 [73, 73] { R17987 += 1, R17943 += 1, R15332 += 1, R15333 += 1 };
  s3 -> s5 [73, 73] { R17987 += 1, R17943 += 1, R15332 += 1, R15333 += 1 };
  s3 -> s6 [73, 73] { R17987 += 1, R17943 += 1, R15333 += 1 };
  s3 -> s7 [73, 73] { R17987 += 1, R17943 += 1, R15333 += 1 };
  s3 -> s1 [74, 76] { R17987 += 1, R17943 += 1, R15333 += 1 };
  s3 -> s2 [74, 65535] { R17987 += 1, R17943 += 1, R15332 += 1, R15333 += 1 };
  s3 -> s1 [78, 65535] { R17987 += 1, R17943 += 1, R15333 += 1 };
  s5 -> s6 [0, 76] { R17987 += 1, R17943 += 1, R15333 += 1 };
  s5 -> s5 [0, 65535] { R17987 += 1, R17943 += 1, R15332 += 1, R15333 += 1 };
  s5 -> s6 [78, 65535] { R17987 += 1, R17943 += 1, R15333 += 1 };
  s6 -> s6 [0, 76] { R17987 += 1, R17943 += 1, R15333 += 1 };
  s6 -> s9 [0, 65535] { R17987 += 1 };
  s6 -> s6 [0, 65535] { R17987 += 1, R17943 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [78, 65535] { R17987 += 1, R17943 += 1, R15333 += 1 };
  s7 -> s7 [0, 65535] { R17987 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R17987 += 1 };
  s9 -> s8 [0, 65535];
  accepting s8, s9, s6, s1, s7;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 72] { R17989 += 1, R17945 += 1, R15336 += 1, R15337 += 1 };
  s0 -> s2 [0, 65535] { R17989 += 1, R17944 += 1, R17945 += 1 };
  s0 -> s0 [0, 65535] { R17988 += 1, R17989 += 1 };
  s0 -> s3 [73, 73] { R17989 += 1, R17945 += 1, R15336 += 1, R15337 += 1 };
  s0 -> s4 [73, 73] { R17989 += 1, R17945 += 1, R15336 += 1, R15337 += 1 };
  s0 -> s1 [74, 65535] { R17989 += 1, R17945 += 1, R15336 += 1, R15337 += 1 };
  s1 -> s1 [0, 72] { R17989 += 1, R17945 += 1, R15336 += 1, R15337 += 1 };
  s1 -> s1 [0, 65535] { R17989 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R17989 += 1, R17945 += 1, R15336 += 1, R15337 += 1 };
  s1 -> s4 [73, 73] { R17989 += 1, R17945 += 1, R15336 += 1, R15337 += 1 };
  s1 -> s1 [74, 65535] { R17989 += 1, R17945 += 1, R15336 += 1, R15337 += 1 };
  s2 -> s1 [0, 72] { R17989 += 1, R17945 += 1, R15336 += 1, R15337 += 1 };
  s2 -> s2 [0, 65535] { R17989 += 1, R17944 += 1, R17945 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R17989 += 1, R17945 += 1, R15336 += 1, R15337 += 1 };
  s2 -> s4 [73, 73] { R17989 += 1, R17945 += 1, R15336 += 1, R15337 += 1 };
  s2 -> s1 [74, 65535] { R17989 += 1, R17945 += 1, R15336 += 1, R15337 += 1 };
  s3 -> s3 [0, 65535] { R17989 += 1, R17945 += 1, R15336 += 1, R15337 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R17989 += 1 };
  s4 -> s4 [0, 65535] { R17989 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R17989 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 72] { R17991 += 1, R17947 += 1, R17883 += 1 };
  s0 -> s2 [0, 72] { R17991 += 1, R17947 += 1, R17882 += 1, R17883 += 1 };
  s0 -> s3 [0, 65535] { R17991 += 1, R17946 += 1, R17947 += 1 };
  s0 -> s0 [0, 65535] { R17990 += 1, R17991 += 1 };
  s0 -> s4 [73, 73] { R17991 += 1, R17947 += 1, R17882 += 1, R17883 += 1 };
  s0 -> s5 [73, 73] { R17991 += 1, R17947 += 1, R17882 += 1, R17883 += 1 };
  s0 -> s6 [73, 73] { R17991 += 1, R17947 += 1, R17883 += 1 };
  s0 -> s7 [73, 73] { R17991 += 1, R17947 += 1, R17883 += 1 };
  s0 -> s1 [74, 77] { R17991 += 1, R17947 += 1, R17883 += 1 };
  s0 -> s2 [74, 65535] { R17991 += 1, R17947 += 1, R17882 += 1, R17883 += 1 };
  s0 -> s1 [79, 65535] { R17991 += 1, R17947 += 1, R17883 += 1 };
  s1 -> s1 [0, 72] { R17991 += 1, R17947 += 1, R17883 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s1 [0, 65535] { R17991 += 1 };
  s1 -> s6 [73, 73] { R17991 += 1, R17947 += 1, R17883 += 1 };
  s1 -> s7 [73, 73] { R17991 += 1, R17947 += 1, R17883 += 1 };
  s1 -> s1 [74, 77] { R17991 += 1, R17947 += 1, R17883 += 1 };
  s1 -> s1 [79, 65535] { R17991 += 1, R17947 += 1, R17883 += 1 };
  s2 -> s1 [0, 72] { R17991 += 1, R17947 += 1, R17883 += 1 };
  s2 -> s2 [0, 72] { R17991 += 1, R17947 += 1, R17882 += 1, R17883 += 1 };
  s2 -> s4 [73, 73] { R17991 += 1, R17947 += 1, R17882 += 1, R17883 += 1 };
  s2 -> s5 [73, 73] { R17991 += 1, R17947 += 1, R17882 += 1, R17883 += 1 };
  s2 -> s6 [73, 73] { R17991 += 1, R17947 += 1, R17883 += 1 };
  s2 -> s7 [73, 73] { R17991 += 1, R17947 += 1, R17883 += 1 };
  s2 -> s1 [74, 77] { R17991 += 1, R17947 += 1, R17883 += 1 };
  s2 -> s2 [74, 65535] { R17991 += 1, R17947 += 1, R17882 += 1, R17883 += 1 };
  s2 -> s1 [79, 65535] { R17991 += 1, R17947 += 1, R17883 += 1 };
  s3 -> s1 [0, 72] { R17991 += 1, R17947 += 1, R17883 += 1 };
  s3 -> s2 [0, 72] { R17991 += 1, R17947 += 1, R17882 += 1, R17883 += 1 };
  s3 -> s3 [0, 65535] { R17991 += 1, R17946 += 1, R17947 += 1 };
  s3 -> s4 [73, 73] { R17991 += 1, R17947 += 1, R17882 += 1, R17883 += 1 };
  s3 -> s5 [73, 73] { R17991 += 1, R17947 += 1, R17882 += 1, R17883 += 1 };
  s3 -> s6 [73, 73] { R17991 += 1, R17947 += 1, R17883 += 1 };
  s3 -> s7 [73, 73] { R17991 += 1, R17947 += 1, R17883 += 1 };
  s3 -> s1 [74, 77] { R17991 += 1, R17947 += 1, R17883 += 1 };
  s3 -> s2 [74, 65535] { R17991 += 1, R17947 += 1, R17882 += 1, R17883 += 1 };
  s3 -> s1 [79, 65535] { R17991 += 1, R17947 += 1, R17883 += 1 };
  s5 -> s7 [0, 77] { R17991 += 1, R17947 += 1, R17883 += 1 };
  s5 -> s5 [0, 65535] { R17991 += 1, R17947 += 1, R17882 += 1, R17883 += 1 };
  s5 -> s7 [79, 65535] { R17991 += 1, R17947 += 1, R17883 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R17991 += 1 };
  s7 -> s7 [0, 77] { R17991 += 1, R17947 += 1, R17883 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R17991 += 1 };
  s7 -> s7 [79, 65535] { R17991 += 1, R17947 += 1, R17883 += 1 };
  s8 -> s8 [0, 65535];
  accepting s1, s6, s7, s8;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 72] { R17993 += 1, R17949 += 1, R17886 += 1, R17887 += 1 };
  s0 -> s0 [0, 65535] { R17992 += 1, R17993 += 1 };
  s0 -> s2 [0, 65535] { R17993 += 1, R17948 += 1, R17949 += 1 };
  s0 -> s3 [73, 73] { R17993 += 1, R17949 += 1, R17886 += 1, R17887 += 1 };
  s0 -> s4 [73, 73] { R17993 += 1, R17949 += 1, R17886 += 1, R17887 += 1 };
  s0 -> s1 [74, 65535] { R17993 += 1, R17949 += 1, R17886 += 1, R17887 += 1 };
  s1 -> s1 [0, 72] { R17993 += 1, R17949 += 1, R17886 += 1, R17887 += 1 };
  s1 -> s1 [0, 65535] { R17993 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R17993 += 1, R17949 += 1, R17886 += 1, R17887 += 1 };
  s1 -> s4 [73, 73] { R17993 += 1, R17949 += 1, R17886 += 1, R17887 += 1 };
  s1 -> s1 [74, 65535] { R17993 += 1, R17949 += 1, R17886 += 1, R17887 += 1 };
  s2 -> s1 [0, 72] { R17993 += 1, R17949 += 1, R17886 += 1, R17887 += 1 };
  s2 -> s2 [0, 65535] { R17993 += 1, R17948 += 1, R17949 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R17993 += 1, R17949 += 1, R17886 += 1, R17887 += 1 };
  s2 -> s4 [73, 73] { R17993 += 1, R17949 += 1, R17886 += 1, R17887 += 1 };
  s2 -> s1 [74, 65535] { R17993 += 1, R17949 += 1, R17886 += 1, R17887 += 1 };
  s3 -> s3 [0, 65535] { R17993 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R17993 += 1, R17949 += 1, R17886 += 1, R17887 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R17993 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R17993 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 72] { R17995 += 1, R17951 += 1, R17892 += 1, R17893 += 1 };
  s0 -> s0 [0, 65535] { R17994 += 1, R17995 += 1 };
  s0 -> s2 [0, 65535] { R17995 += 1, R17950 += 1, R17951 += 1 };
  s0 -> s3 [73, 73] { R17995 += 1, R17951 += 1, R17892 += 1, R17893 += 1 };
  s0 -> s4 [73, 73] { R17995 += 1, R17951 += 1, R17892 += 1, R17893 += 1 };
  s0 -> s1 [74, 65535] { R17995 += 1, R17951 += 1, R17892 += 1, R17893 += 1 };
  s1 -> s1 [0, 72] { R17995 += 1, R17951 += 1, R17892 += 1, R17893 += 1 };
  s1 -> s1 [0, 65535] { R17995 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R17995 += 1, R17951 += 1, R17892 += 1, R17893 += 1 };
  s1 -> s4 [73, 73] { R17995 += 1, R17951 += 1, R17892 += 1, R17893 += 1 };
  s1 -> s1 [74, 65535] { R17995 += 1, R17951 += 1, R17892 += 1, R17893 += 1 };
  s2 -> s1 [0, 72] { R17995 += 1, R17951 += 1, R17892 += 1, R17893 += 1 };
  s2 -> s2 [0, 65535] { R17995 += 1, R17950 += 1, R17951 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R17995 += 1, R17951 += 1, R17892 += 1, R17893 += 1 };
  s2 -> s4 [73, 73] { R17995 += 1, R17951 += 1, R17892 += 1, R17893 += 1 };
  s2 -> s1 [74, 65535] { R17995 += 1, R17951 += 1, R17892 += 1, R17893 += 1 };
  s3 -> s3 [0, 65535] { R17995 += 1, R17951 += 1, R17892 += 1, R17893 += 1 };
  s3 -> s6 [0, 65535] { R17995 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R17995 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R17995 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
synchronised {  // Automata constraining P54
automaton P54_0 {
  init s0;
  s0 -> s1 [109, 109];
  accepting s1;
};
};
constraint R1 = R17911 && R2 = R17995 && R20 - R17995 = -1 && R21 = R17995 && R22 - R17995 = -1 && R23 = R17995 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R17885 + -1*R17883 - R53 = 0 && R52 + R17884 + R17882 = 0 && R17910 = 0 && R17936 = 0 && R17937 = 0 && R17942 = 0 && R17943 = 0 && R17946 = 0 && R17947 = 0 && R17952 = 0 && R17953 = R17995 && R17954 = 0 && R17955 = R17995 && R17956 = 0 && R17957 = R17995 && R17958 = 0 && R17959 = R17995 && R17960 = 0 && R17961 = R17995 && R17962 = 0 && R17963 = R17995 && R17964 = 0 && R17965 = R17995 && R17966 = 0 && R17967 = R17995 && R17968 = 0 && R17969 = R17995 && R17970 = 0 && R17971 = R17995 && R17972 = 0 && R17973 = R17995 && R17974 = 0 && R17975 = R17995 && R17976 = 0 && R17977 = R17995 && R17978 = 0 && R17979 = R17995 && R17980 = 0 && R17981 = R17995 && R17982 = 0 && R17983 = R17995 && R17984 = 0 && R17985 = R17995 && R17986 = 0 && R17987 = R17995 && R17988 = 0 && R17989 = R17995 && R17990 = 0 && R17991 = R17995 && R17992 = 0 && R17993 = R17995 && R17994 = 0 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R17885 + -1*R17883 - R53 < 1 && -1 < R17911 && 0 < R17995 && (R48 + R15341 + R15338 != 0 || ((R42 + R15334 + R15332 != 0 || R43 + R15335 + R15333 + -1*R17885 + -1*R17883 - R53 = 0 || R53 + R17885 + R17883 < 1) && (R42 + R15334 + R15332 = 0 || R53 + R17885 + R17883 < 1))) && (R48 + R15341 + R15338 != 0 || ((R46 + R15339 + R15336 != 0 || R47 + R15340 + R15337 + -1*R17885 + -1*R17883 - R53 = 0 || R53 + R17885 + R17883 < 1) && (R46 + R15339 + R15336 = 0 || R53 + R17885 + R17883 < 1))) && (R17896 != 0 || R17897 = R17911 || (R17 = 0 && R17911 = 0)) && (R17898 != 0 || R17899 = R17911 || (R17 = 0 && R17911 = 0)) && (R17900 != 0 || R17901 = R17911 || (R17 = 0 && R17911 = 0)) && (R17902 != 0 || R17903 = R17911 || (R17 = 0 && R17911 = 0)) && (R17904 != 0 || R17905 = R17911 || (R17 = 0 && R17911 = 0)) && (R17906 != 0 || R17907 = R17911 || (R17 = 0 && R17911 = 0)) && (R17908 != 0 || R17909 = R17911 || (R17 = 0 && R17911 = 0)) && (R17912 != 0 || R17911 = R17913 || (R17 = 0 && R17911 = 0)) && (R17914 != 0 || R17911 = R17915 || (R17 = 0 && R17911 = 0)) && (R18 = 0 || (R17934 = 0 && R17935 = 0)) && (R18 = 0 || (R17938 = 0 && R17939 = 0)) && (R18 = 0 || (R17940 = 0 && R17941 = 0)) && (R18 = 0 || (R17944 = 0 && R17945 = 0)) && (R18 = 0 || (R17948 = 0 && R17949 = 0)) && (R18 = 0 || (R17950 = 0 && R17951 = 0)) && (R19 = 0 || (R17916 = 0 && R17917 = 0)) && (R19 = 0 || (R17918 = 0 && R17919 = 0)) && (R19 = 0 || (R17920 = 0 && R17921 = 0)) && (R19 = 0 || (R17922 = 0 && R17923 = 0)) && (R19 = 0 || (R17924 = 0 && R17925 = 0)) && (R19 = 0 || (R17926 = 0 && R17927 = 0)) && (R19 = 0 || (R17928 = 0 && R17929 = 0)) && (R19 = 0 || (R17930 = 0 && R17931 = 0)) && (R19 = 0 || (R17932 = 0 && R17933 = 0)) && (R48 + R15341 + R15338 = 0 || (R42 + R15334 + R15332 = 0 && R43 + R15335 + R15333 + -1*R17885 + -1*R17883 - R53 = 0)) && (R48 + R15341 + R15338 = 0 || (R46 + R15339 + R15336 = 0 && R47 + R15340 + R15337 + -1*R17885 + -1*R17883 - R53 = 0)) && (R58 + R17891 + R17888 = 0 || (R56 + R17889 + R17886 = 0 && R57 + R17890 + R17887 = 0)) && (R58 + R17891 + R17888 = 0 || (R62 + R17894 + R17892 = 0 && R63 + R17895 + R17893 = 0)) && (R17896 = 0 || (R17 = 0 && R17911 = 0)) && (R17898 = 0 || (R17 = 0 && R17911 = 0)) && (R17900 = 0 || (R17 = 0 && R17911 = 0)) && (R17902 = 0 || (R17 = 0 && R17911 = 0)) && (R17904 = 0 || (R17 = 0 && R17911 = 0)) && (R17906 = 0 || (R17 = 0 && R17911 = 0)) && (R17908 = 0 || (R17 = 0 && R17911 = 0)) && (R17912 = 0 || (R17 = 0 && R17911 = 0)) && (R17914 = 0 || (R17 = 0 && R17911 = 0));
// End of Parikh automata intersection problem
