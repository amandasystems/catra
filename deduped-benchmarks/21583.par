// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R12, R15332, R15333, R15334, R15335, R15336, R15337, R15338, R15339, R15340, R15341, R15342, R15343, R15344, R15345, R15768, R15769, R15770, R15771, R15772, R15773, R16086, R16087, R16088, R16089, R16090, R16091, R16092, R16093, R16094, R16095, R16096, R16097, R16098, R16099, R16100, R16101, R16102, R16103, R16104, R16105, R16106, R16107, R16108, R16109, R16110, R16111, R16112, R16113, R16114, R16115, R16116, R16117, R16118, R16119, R16120, R16121, R16122, R16123, R16124, R16125, R16126, R16127, R16128, R16129, R16130, R16131, R16132, R16133, R16134, R16135, R16136, R16137, R16138, R16139, R16140, R16141, R16142, R16143, R16144, R16145, R16146, R16147, R16148, R16149, R16150, R16151, R16152, R16153, R16154, R16155, R16156, R16157, R16158, R16159, R16160, R16161, R16162, R16163, R16164, R16165, R16166, R16167, R16168, R16169, R16170, R16171, R16172, R16173, R16174, R16175, R16176, R16177, R16178, R16179, R16180, R16181, R16182, R16183, R16184, R16185, R16186, R16187, R16188, R16189, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 72];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [73, 73];
  s0 -> s1 [74, 65535];
  s1 -> s1 [0, 72];
  s1 -> s2 [73, 73];
  s1 -> s1 [74, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s1 [0, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R25 += 1 };
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R16110 += 1, R16111 += 1 };
  s0 -> s1 [0, 65535] { R16111 += 1, R19 += 1 };
  s1 -> s1 [0, 65535] { R16111 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 72] { R16113 += 1 };
  s0 -> s0 [0, 65535] { R16112 += 1, R16113 += 1 };
  s0 -> s2 [73, 73] { R16113 += 1 };
  s0 -> s3 [73, 73] { R16113 += 1 };
  s0 -> s1 [78, 65535] { R16113 += 1 };
  s1 -> s1 [0, 72] { R16113 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R16113 += 1 };
  s1 -> s3 [73, 73] { R16113 += 1 };
  s1 -> s1 [78, 65535] { R16113 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 73] { R16113 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [78, 65535] { R16113 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 72] { R16115 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R16114 += 1, R16115 += 1 };
  s0 -> s2 [73, 73] { R16115 += 1, R38 += 1 };
  s0 -> s3 [73, 73] { R16115 += 1, R38 += 1 };
  s0 -> s1 [74, 65535] { R16115 += 1, R38 += 1 };
  s1 -> s1 [0, 72] { R16115 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R16115 += 1, R38 += 1 };
  s1 -> s3 [73, 73] { R16115 += 1, R38 += 1 };
  s1 -> s1 [74, 65535] { R16115 += 1, R38 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R16115 += 1, R38 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 72] { R16117 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R16116 += 1, R16117 += 1 };
  s0 -> s2 [73, 73] { R16117 += 1, R40 += 1 };
  s0 -> s3 [73, 73] { R16117 += 1, R40 += 1 };
  s0 -> s1 [74, 65535] { R16117 += 1, R40 += 1 };
  s1 -> s1 [0, 72] { R16117 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R16117 += 1, R40 += 1 };
  s1 -> s3 [73, 73] { R16117 += 1, R40 += 1 };
  s1 -> s1 [74, 65535] { R16117 += 1, R40 += 1 };
  s2 -> s2 [0, 65535] { R16117 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 72] { R16119 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R16118 += 1, R16119 += 1 };
  s0 -> s2 [73, 73] { R16119 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [73, 73] { R16119 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [74, 65535] { R16119 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 72] { R16119 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R16119 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [73, 73] { R16119 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [74, 65535] { R16119 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R16119 += 1, R42 += 1, R43 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 72] { R16121 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R16120 += 1, R16121 += 1 };
  s0 -> s2 [73, 73] { R16121 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [73, 73] { R16121 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [74, 65535] { R16121 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 72] { R16121 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R16121 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [73, 73] { R16121 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [74, 65535] { R16121 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535] { R16121 += 1, R46 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 72] { R16123 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R16122 += 1, R16123 += 1 };
  s0 -> s2 [73, 73] { R16123 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [73, 73] { R16123 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [74, 65535] { R16123 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 72] { R16123 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R16123 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [73, 73] { R16123 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [74, 65535] { R16123 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R16123 += 1, R52 += 1, R53 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 72] { R16125 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R16124 += 1, R16125 += 1 };
  s0 -> s2 [73, 73] { R16125 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [73, 73] { R16125 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [74, 65535] { R16125 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 72] { R16125 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R16125 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [73, 73] { R16125 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [74, 65535] { R16125 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535] { R16125 += 1, R56 += 1, R57 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 72] { R16127 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R16126 += 1, R16127 += 1 };
  s0 -> s2 [73, 73] { R16127 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [73, 73] { R16127 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [74, 65535] { R16127 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 72] { R16127 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R16127 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [73, 73] { R16127 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [74, 65535] { R16127 += 1, R62 += 1, R63 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R16127 += 1, R62 += 1, R63 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 72] { R16147 += 1 };
  s0 -> s0 [0, 65535] { R16146 += 1, R16147 += 1 };
  s0 -> s2 [73, 73] { R16147 += 1 };
  s0 -> s1 [74, 65535] { R16147 += 1 };
  s1 -> s1 [0, 72] { R16147 += 1 };
  s1 -> s2 [73, 73] { R16147 += 1 };
  s1 -> s1 [74, 65535] { R16147 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R16147 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R16148 += 1, R16149 += 1 };
  s0 -> s1 [0, 65535] { R16149 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R16149 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 72] { R16151 += 1 };
  s0 -> s0 [0, 65535] { R16150 += 1, R16151 += 1 };
  s0 -> s2 [0, 65535] { R16151 += 1, R8 += 1 };
  s0 -> s3 [73, 73] { R16151 += 1 };
  s0 -> s1 [74, 65535] { R16151 += 1 };
  s1 -> s1 [0, 72] { R16151 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [73, 73] { R16151 += 1 };
  s1 -> s1 [74, 65535] { R16151 += 1 };
  s2 -> s1 [0, 72] { R16151 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R16151 += 1, R8 += 1 };
  s2 -> s3 [73, 73] { R16151 += 1 };
  s2 -> s1 [74, 65535] { R16151 += 1 };
  s3 -> s3 [0, 65535] { R16151 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 72] { R16153 += 1, R16091 += 1 };
  s0 -> s0 [0, 65535] { R16152 += 1, R16153 += 1 };
  s0 -> s2 [0, 65535] { R16153 += 1, R16090 += 1, R16091 += 1 };
  s0 -> s1 [74, 65535] { R16153 += 1, R16091 += 1 };
  s1 -> s1 [0, 72] { R16153 += 1, R16091 += 1 };
  s1 -> s1 [0, 65535] { R16153 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [74, 65535] { R16153 += 1, R16091 += 1 };
  s2 -> s1 [0, 72] { R16153 += 1, R16091 += 1 };
  s2 -> s2 [0, 65535] { R16153 += 1, R16090 += 1, R16091 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [74, 65535] { R16153 += 1, R16091 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R16155 += 1, R16093 += 1, R17 += 1 };
  s0 -> s0 [0, 65535] { R16154 += 1, R16155 += 1 };
  s0 -> s2 [0, 65535] { R16155 += 1, R16092 += 1, R16093 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R16155 += 1, R16093 += 1, R17 += 1 };
  s1 -> s4 [0, 65535] { R16155 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R16155 += 1, R16093 += 1, R17 += 1 };
  s2 -> s2 [0, 65535] { R16155 += 1, R16092 += 1, R16093 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R16155 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 73] { R16157 += 1, R16095 += 1 };
  s0 -> s2 [0, 65535] { R16157 += 1, R16094 += 1, R16095 += 1 };
  s0 -> s0 [0, 65535] { R16156 += 1, R16157 += 1 };
  s0 -> s1 [77, 65535] { R16157 += 1, R16095 += 1 };
  s1 -> s1 [0, 73] { R16157 += 1, R16095 += 1 };
  s1 -> s1 [0, 65535] { R16157 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [77, 65535] { R16157 += 1, R16095 += 1 };
  s2 -> s1 [0, 73] { R16157 += 1, R16095 += 1 };
  s2 -> s2 [0, 65535] { R16157 += 1, R16094 += 1, R16095 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [77, 65535] { R16157 += 1, R16095 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s0 [0, 65535] { R16158 += 1, R16159 += 1 };
  s0 -> s1 [0, 65535] { R16159 += 1, R16097 += 1, R67 += 1 };
  s0 -> s2 [0, 65535] { R16159 += 1, R16096 += 1, R16097 += 1 };
  s1 -> s1 [0, 65535] { R16159 += 1, R16097 += 1, R67 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R16159 += 1 };
  s2 -> s1 [0, 65535] { R16159 += 1, R16097 += 1, R67 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R16159 += 1, R16096 += 1, R16097 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R16159 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 76] { R16161 += 1, R16099 += 1 };
  s0 -> s2 [0, 65535] { R16161 += 1, R16098 += 1, R16099 += 1 };
  s0 -> s3 [0, 65535] { R16161 += 1, R16099 += 1, R69 += 1 };
  s0 -> s0 [0, 65535] { R16160 += 1, R16161 += 1 };
  s0 -> s1 [78, 65535] { R16161 += 1, R16099 += 1 };
  s1 -> s1 [0, 76] { R16161 += 1, R16099 += 1 };
  s1 -> s1 [0, 65535] { R16161 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [78, 65535] { R16161 += 1, R16099 += 1 };
  s2 -> s1 [0, 76] { R16161 += 1, R16099 += 1 };
  s2 -> s2 [0, 65535] { R16161 += 1, R16098 += 1, R16099 += 1 };
  s2 -> s3 [0, 65535] { R16161 += 1, R16099 += 1, R69 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [78, 65535] { R16161 += 1, R16099 += 1 };
  s3 -> s1 [0, 76] { R16161 += 1, R16099 += 1 };
  s3 -> s4 [0, 65535] { R16161 += 1 };
  s3 -> s3 [0, 65535] { R16161 += 1, R16099 += 1, R69 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [78, 65535] { R16161 += 1, R16099 += 1 };
  s4 -> s4 [0, 65535] { R16161 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 76] { R16163 += 1, R16101 += 1, R15335 += 1 };
  s0 -> s2 [0, 65535] { R16163 += 1, R16100 += 1, R16101 += 1 };
  s0 -> s0 [0, 65535] { R16162 += 1, R16163 += 1 };
  s0 -> s1 [0, 65535] { R16163 += 1, R16101 += 1 };
  s0 -> s1 [78, 65535] { R16163 += 1, R16101 += 1, R15335 += 1 };
  s1 -> s1 [0, 76] { R16163 += 1, R16101 += 1, R15335 += 1 };
  s1 -> s4 [0, 65535] { R16163 += 1 };
  s1 -> s1 [0, 65535] { R16163 += 1, R16101 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [78, 65535] { R16163 += 1, R16101 += 1, R15335 += 1 };
  s2 -> s1 [0, 76] { R16163 += 1, R16101 += 1, R15335 += 1 };
  s2 -> s2 [0, 65535] { R16163 += 1, R16100 += 1, R16101 += 1 };
  s2 -> s1 [0, 65535] { R16163 += 1, R16101 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [78, 65535] { R16163 += 1, R16101 += 1, R15335 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R16163 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R16165 += 1, R16102 += 1, R16103 += 1 };
  s0 -> s0 [0, 65535] { R16164 += 1, R16165 += 1 };
  s0 -> s2 [0, 65535] { R16165 += 1, R16103 += 1, R15339 += 1, R15340 += 1 };
  s0 -> s3 [0, 65535] { R16165 += 1, R16103 += 1, R15340 += 1, R15341 += 1 };
  s1 -> s1 [0, 65535] { R16165 += 1, R16102 += 1, R16103 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R16165 += 1, R16103 += 1, R15339 += 1, R15340 += 1 };
  s1 -> s3 [0, 65535] { R16165 += 1, R16103 += 1, R15340 += 1, R15341 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s6 [0, 65535] { R16165 += 1 };
  s2 -> s2 [0, 65535] { R16165 += 1, R16103 += 1, R15339 += 1, R15340 += 1 };
  s2 -> s3 [0, 65535] { R16165 += 1, R16103 += 1, R15340 += 1, R15341 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R16165 += 1, R16103 += 1 };
  s3 -> s6 [0, 65535] { R16165 += 1 };
  s3 -> s3 [0, 65535] { R16165 += 1, R16103 += 1, R15340 += 1, R15341 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R16165 += 1, R16103 += 1 };
  s5 -> s6 [0, 65535] { R16165 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R16165 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 65535] { R16167 += 1, R16104 += 1, R16105 += 1 };
  s0 -> s2 [0, 65535] { R16167 += 1, R16105 += 1 };
  s0 -> s0 [0, 65535] { R16166 += 1, R16167 += 1 };
  s0 -> s3 [0, 65535] { R16167 += 1, R16105 += 1, R15345 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R16167 += 1, R16104 += 1, R16105 += 1 };
  s1 -> s2 [0, 65535] { R16167 += 1, R16105 += 1 };
  s1 -> s3 [0, 65535] { R16167 += 1, R16105 += 1, R15345 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R16167 += 1, R16105 += 1 };
  s2 -> s5 [0, 65535] { R16167 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R16167 += 1, R16105 += 1 };
  s3 -> s3 [0, 65535] { R16167 += 1, R16105 += 1, R15345 += 1 };
  s3 -> s5 [0, 65535] { R16167 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R16167 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s0 [0, 65535] { R16168 += 1, R16169 += 1 };
  s0 -> s1 [0, 65535] { R16169 += 1, R16107 += 1 };
  s0 -> s2 [0, 65535] { R16169 += 1, R16106 += 1, R16107 += 1 };
  s0 -> s3 [0, 65535] { R16169 += 1, R16107 += 1, R15772 += 1, R15773 += 1 };
  s1 -> s1 [0, 65535] { R16169 += 1, R16107 += 1 };
  s1 -> s4 [0, 65535] { R16169 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R16169 += 1, R16107 += 1 };
  s2 -> s2 [0, 65535] { R16169 += 1, R16106 += 1, R16107 += 1 };
  s2 -> s3 [0, 65535] { R16169 += 1, R16107 += 1, R15772 += 1, R15773 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s1 [0, 65535] { R16169 += 1, R16107 += 1 };
  s3 -> s4 [0, 65535] { R16169 += 1 };
  s3 -> s3 [0, 65535] { R16169 += 1, R16107 += 1, R15772 += 1, R15773 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R16169 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s0 [0, 65535] { R16170 += 1, R16171 += 1 };
  s0 -> s1 [0, 65535] { R16171 += 1, R16108 += 1, R16109 += 1 };
  s0 -> s2 [0, 65535] { R16171 += 1, R16109 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R16171 += 1, R16108 += 1, R16109 += 1 };
  s1 -> s2 [0, 65535] { R16171 += 1, R16109 += 1 };
  s2 -> s3 [0, 65535] { R16171 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R16171 += 1, R16109 += 1 };
  s3 -> s3 [0, 65535] { R16171 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R16173 += 1, R16128 += 1, R16129 += 1 };
  s0 -> s0 [0, 65535] { R16172 += 1, R16173 += 1 };
  s0 -> s2 [0, 65535] { R16173 += 1, R16129 += 1, R18 += 1 };
  s1 -> s1 [0, 65535] { R16173 += 1, R16128 += 1, R16129 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R16173 += 1, R16129 += 1, R18 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R16173 += 1 };
  s2 -> s2 [0, 65535] { R16173 += 1, R16129 += 1, R18 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R16173 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 72] { R16175 += 1, R16131 += 1 };
  s0 -> s2 [0, 65535] { R16175 += 1, R16130 += 1, R16131 += 1 };
  s0 -> s0 [0, 65535] { R16174 += 1, R16175 += 1 };
  s0 -> s3 [73, 73] { R16175 += 1, R16131 += 1 };
  s0 -> s4 [73, 73] { R16175 += 1, R16131 += 1 };
  s0 -> s5 [77, 77] { R16175 += 1, R16131 += 1 };
  s0 -> s1 [78, 65535] { R16175 += 1, R16131 += 1 };
  s1 -> s1 [0, 72] { R16175 += 1, R16131 += 1 };
  s1 -> s3 [73, 73] { R16175 += 1, R16131 += 1 };
  s1 -> s4 [73, 73] { R16175 += 1, R16131 += 1 };
  s1 -> s5 [77, 77] { R16175 += 1, R16131 += 1 };
  s1 -> s1 [78, 65535] { R16175 += 1, R16131 += 1 };
  s2 -> s1 [0, 72] { R16175 += 1, R16131 += 1 };
  s2 -> s2 [0, 65535] { R16175 += 1, R16130 += 1, R16131 += 1 };
  s2 -> s3 [73, 73] { R16175 += 1, R16131 += 1 };
  s2 -> s4 [73, 73] { R16175 += 1, R16131 += 1 };
  s2 -> s5 [77, 77] { R16175 += 1, R16131 += 1 };
  s2 -> s1 [78, 65535] { R16175 += 1, R16131 += 1 };
  s3 -> s3 [0, 73] { R16175 += 1, R16131 += 1 };
  s3 -> s7 [77, 77] { R16175 += 1, R16131 += 1 };
  s3 -> s3 [78, 65535] { R16175 += 1, R16131 += 1 };
  s5 -> s5 [0, 72] { R16175 += 1, R16131 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R16175 += 1 };
  s5 -> s7 [73, 73] { R16175 += 1, R16131 += 1 };
  s5 -> s8 [73, 73] { R16175 += 1, R16131 += 1 };
  s5 -> s5 [77, 65535] { R16175 += 1, R16131 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 73] { R16175 += 1, R16131 += 1 };
  s7 -> s7 [0, 65535] { R16175 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [77, 65535] { R16175 += 1, R16131 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R16175 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 72] { R16177 += 1, R16133 += 1, R66 += 1 };
  s0 -> s2 [0, 65535] { R16177 += 1, R16132 += 1, R16133 += 1 };
  s0 -> s0 [0, 65535] { R16176 += 1, R16177 += 1 };
  s0 -> s3 [73, 73] { R16177 += 1, R16133 += 1, R66 += 1 };
  s0 -> s4 [73, 73] { R16177 += 1, R16133 += 1, R66 += 1 };
  s0 -> s1 [74, 65535] { R16177 += 1, R16133 += 1, R66 += 1 };
  s1 -> s1 [0, 72] { R16177 += 1, R16133 += 1, R66 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R16177 += 1 };
  s1 -> s3 [73, 73] { R16177 += 1, R16133 += 1, R66 += 1 };
  s1 -> s4 [73, 73] { R16177 += 1, R16133 += 1, R66 += 1 };
  s1 -> s1 [74, 65535] { R16177 += 1, R16133 += 1, R66 += 1 };
  s2 -> s1 [0, 72] { R16177 += 1, R16133 += 1, R66 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R16177 += 1, R16132 += 1, R16133 += 1 };
  s2 -> s3 [73, 73] { R16177 += 1, R16133 += 1, R66 += 1 };
  s2 -> s4 [73, 73] { R16177 += 1, R16133 += 1, R66 += 1 };
  s2 -> s1 [74, 65535] { R16177 += 1, R16133 += 1, R66 += 1 };
  s3 -> s3 [0, 65535] { R16177 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R16177 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R16177 += 1, R16133 += 1, R66 += 1 };
  s5 -> s5 [0, 65535] { R16177 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 72] { R16179 += 1, R16135 += 1, R68 += 1 };
  s0 -> s0 [0, 65535] { R16178 += 1, R16179 += 1 };
  s0 -> s2 [0, 65535] { R16179 += 1, R16134 += 1, R16135 += 1 };
  s0 -> s3 [73, 73] { R16179 += 1, R16135 += 1, R68 += 1 };
  s0 -> s4 [73, 73] { R16179 += 1, R16135 += 1, R68 += 1 };
  s0 -> s1 [74, 65535] { R16179 += 1, R16135 += 1, R68 += 1 };
  s1 -> s1 [0, 72] { R16179 += 1, R16135 += 1, R68 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R16179 += 1 };
  s1 -> s3 [73, 73] { R16179 += 1, R16135 += 1, R68 += 1 };
  s1 -> s4 [73, 73] { R16179 += 1, R16135 += 1, R68 += 1 };
  s1 -> s1 [74, 65535] { R16179 += 1, R16135 += 1, R68 += 1 };
  s2 -> s1 [0, 72] { R16179 += 1, R16135 += 1, R68 += 1 };
  s2 -> s2 [0, 65535] { R16179 += 1, R16134 += 1, R16135 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R16179 += 1, R16135 += 1, R68 += 1 };
  s2 -> s4 [73, 73] { R16179 += 1, R16135 += 1, R68 += 1 };
  s2 -> s1 [74, 65535] { R16179 += 1, R16135 += 1, R68 += 1 };
  s3 -> s6 [0, 65535] { R16179 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R16179 += 1, R16135 += 1, R68 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R16179 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R16179 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 72] { R16181 += 1, R16137 += 1, R15333 += 1 };
  s0 -> s2 [0, 72] { R16181 += 1, R16137 += 1, R15332 += 1, R15333 += 1 };
  s0 -> s0 [0, 65535] { R16180 += 1, R16181 += 1 };
  s0 -> s3 [0, 65535] { R16181 += 1, R16136 += 1, R16137 += 1 };
  s0 -> s4 [73, 73] { R16181 += 1, R16137 += 1, R15332 += 1, R15333 += 1 };
  s0 -> s5 [73, 73] { R16181 += 1, R16137 += 1, R15332 += 1, R15333 += 1 };
  s0 -> s6 [73, 73] { R16181 += 1, R16137 += 1, R15333 += 1 };
  s0 -> s7 [73, 73] { R16181 += 1, R16137 += 1, R15333 += 1 };
  s0 -> s1 [74, 76] { R16181 += 1, R16137 += 1, R15333 += 1 };
  s0 -> s2 [74, 65535] { R16181 += 1, R16137 += 1, R15332 += 1, R15333 += 1 };
  s0 -> s1 [78, 65535] { R16181 += 1, R16137 += 1, R15333 += 1 };
  s1 -> s1 [0, 72] { R16181 += 1, R16137 += 1, R15333 += 1 };
  s1 -> s1 [0, 65535] { R16181 += 1 };
  s1 -> s9 [0, 65535];
  s1 -> s6 [73, 73] { R16181 += 1, R16137 += 1 };
  s1 -> s7 [73, 73] { R16181 += 1, R16137 += 1 };
  s1 -> s1 [74, 76] { R16181 += 1, R16137 += 1, R15333 += 1 };
  s1 -> s1 [74, 65535] { R16181 += 1, R16137 += 1 };
  s1 -> s1 [78, 65535] { R16181 += 1, R16137 += 1, R15333 += 1 };
  s2 -> s1 [0, 72] { R16181 += 1, R16137 += 1, R15333 += 1 };
  s2 -> s2 [0, 72] { R16181 += 1, R16137 += 1, R15332 += 1, R15333 += 1 };
  s2 -> s4 [73, 73] { R16181 += 1, R16137 += 1, R15332 += 1, R15333 += 1 };
  s2 -> s5 [73, 73] { R16181 += 1, R16137 += 1, R15332 += 1, R15333 += 1 };
  s2 -> s6 [73, 73] { R16181 += 1, R16137 += 1, R15333 += 1 };
  s2 -> s7 [73, 73] { R16181 += 1, R16137 += 1, R15333 += 1 };
  s2 -> s1 [74, 76] { R16181 += 1, R16137 += 1, R15333 += 1 };
  s2 -> s2 [74, 65535] { R16181 += 1, R16137 += 1, R15332 += 1, R15333 += 1 };
  s2 -> s1 [78, 65535] { R16181 += 1, R16137 += 1, R15333 += 1 };
  s3 -> s1 [0, 72] { R16181 += 1, R16137 += 1, R15333 += 1 };
  s3 -> s2 [0, 72] { R16181 += 1, R16137 += 1, R15332 += 1, R15333 += 1 };
  s3 -> s3 [0, 65535] { R16181 += 1, R16136 += 1, R16137 += 1 };
  s3 -> s4 [73, 73] { R16181 += 1, R16137 += 1, R15332 += 1, R15333 += 1 };
  s3 -> s5 [73, 73] { R16181 += 1, R16137 += 1, R15332 += 1, R15333 += 1 };
  s3 -> s6 [73, 73] { R16181 += 1, R16137 += 1, R15333 += 1 };
  s3 -> s7 [73, 73] { R16181 += 1, R16137 += 1, R15333 += 1 };
  s3 -> s1 [74, 76] { R16181 += 1, R16137 += 1, R15333 += 1 };
  s3 -> s2 [74, 65535] { R16181 += 1, R16137 += 1, R15332 += 1, R15333 += 1 };
  s3 -> s1 [78, 65535] { R16181 += 1, R16137 += 1, R15333 += 1 };
  s5 -> s7 [0, 76] { R16181 += 1, R16137 += 1, R15333 += 1 };
  s5 -> s5 [0, 65535] { R16181 += 1, R16137 += 1, R15332 += 1, R15333 += 1 };
  s5 -> s7 [78, 65535] { R16181 += 1, R16137 += 1, R15333 += 1 };
  s6 -> s6 [0, 65535] { R16181 += 1 };
  s6 -> s9 [0, 65535];
  s7 -> s7 [0, 76] { R16181 += 1, R16137 += 1, R15333 += 1 };
  s7 -> s8 [0, 65535] { R16181 += 1 };
  s7 -> s9 [0, 65535];
  s7 -> s7 [0, 65535] { R16181 += 1, R16137 += 1 };
  s7 -> s7 [78, 65535] { R16181 += 1, R16137 += 1, R15333 += 1 };
  s8 -> s8 [0, 65535] { R16181 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s8, s9, s6, s1, s7;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 72] { R16183 += 1, R16139 += 1, R15336 += 1, R15337 += 1 };
  s0 -> s2 [0, 65535] { R16183 += 1, R16138 += 1, R16139 += 1 };
  s0 -> s0 [0, 65535] { R16182 += 1, R16183 += 1 };
  s0 -> s3 [73, 73] { R16183 += 1, R16139 += 1, R15336 += 1, R15337 += 1 };
  s0 -> s4 [73, 73] { R16183 += 1, R16139 += 1, R15336 += 1, R15337 += 1 };
  s0 -> s1 [74, 65535] { R16183 += 1, R16139 += 1, R15336 += 1, R15337 += 1 };
  s1 -> s1 [0, 72] { R16183 += 1, R16139 += 1, R15336 += 1, R15337 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R16183 += 1 };
  s1 -> s3 [73, 73] { R16183 += 1, R16139 += 1, R15336 += 1, R15337 += 1 };
  s1 -> s4 [73, 73] { R16183 += 1, R16139 += 1, R15336 += 1, R15337 += 1 };
  s1 -> s1 [74, 65535] { R16183 += 1, R16139 += 1, R15336 += 1, R15337 += 1 };
  s2 -> s1 [0, 72] { R16183 += 1, R16139 += 1, R15336 += 1, R15337 += 1 };
  s2 -> s2 [0, 65535] { R16183 += 1, R16138 += 1, R16139 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R16183 += 1, R16139 += 1, R15336 += 1, R15337 += 1 };
  s2 -> s4 [73, 73] { R16183 += 1, R16139 += 1, R15336 += 1, R15337 += 1 };
  s2 -> s1 [74, 65535] { R16183 += 1, R16139 += 1, R15336 += 1, R15337 += 1 };
  s3 -> s3 [0, 65535] { R16183 += 1, R16139 += 1, R15336 += 1, R15337 += 1 };
  s3 -> s6 [0, 65535] { R16183 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R16183 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R16183 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 72] { R16185 += 1, R16141 += 1, R15343 += 1 };
  s0 -> s2 [0, 72] { R16185 += 1, R16141 += 1, R15342 += 1, R15343 += 1 };
  s0 -> s0 [0, 65535] { R16184 += 1, R16185 += 1 };
  s0 -> s3 [0, 65535] { R16185 += 1, R16140 += 1, R16141 += 1 };
  s0 -> s4 [73, 73] { R16185 += 1, R16141 += 1, R15342 += 1, R15343 += 1 };
  s0 -> s5 [73, 73] { R16185 += 1, R16141 += 1, R15343 += 1 };
  s0 -> s6 [73, 73] { R16185 += 1, R16141 += 1, R15342 += 1, R15343 += 1 };
  s0 -> s7 [73, 73] { R16185 += 1, R16141 += 1, R15343 += 1 };
  s0 -> s1 [74, 77] { R16185 += 1, R16141 += 1, R15343 += 1 };
  s0 -> s2 [74, 65535] { R16185 += 1, R16141 += 1, R15342 += 1, R15343 += 1 };
  s0 -> s8 [78, 78] { R16185 += 1, R16141 += 1, R15343 += 1 };
  s0 -> s1 [79, 65535] { R16185 += 1, R16141 += 1, R15343 += 1 };
  s1 -> s1 [0, 72] { R16185 += 1, R16141 += 1, R15343 += 1 };
  s1 -> s5 [73, 73] { R16185 += 1, R16141 += 1, R15343 += 1 };
  s1 -> s7 [73, 73] { R16185 += 1, R16141 += 1, R15343 += 1 };
  s1 -> s1 [74, 77] { R16185 += 1, R16141 += 1, R15343 += 1 };
  s1 -> s8 [78, 78] { R16185 += 1, R16141 += 1, R15343 += 1 };
  s1 -> s1 [79, 65535] { R16185 += 1, R16141 += 1, R15343 += 1 };
  s2 -> s1 [0, 72] { R16185 += 1, R16141 += 1, R15343 += 1 };
  s2 -> s2 [0, 72] { R16185 += 1, R16141 += 1, R15342 += 1, R15343 += 1 };
  s2 -> s4 [73, 73] { R16185 += 1, R16141 += 1, R15342 += 1, R15343 += 1 };
  s2 -> s5 [73, 73] { R16185 += 1, R16141 += 1, R15343 += 1 };
  s2 -> s6 [73, 73] { R16185 += 1, R16141 += 1, R15342 += 1, R15343 += 1 };
  s2 -> s7 [73, 73] { R16185 += 1, R16141 += 1, R15343 += 1 };
  s2 -> s1 [74, 77] { R16185 += 1, R16141 += 1, R15343 += 1 };
  s2 -> s2 [74, 65535] { R16185 += 1, R16141 += 1, R15342 += 1, R15343 += 1 };
  s2 -> s8 [78, 78] { R16185 += 1, R16141 += 1, R15343 += 1 };
  s2 -> s1 [79, 65535] { R16185 += 1, R16141 += 1, R15343 += 1 };
  s3 -> s1 [0, 72] { R16185 += 1, R16141 += 1, R15343 += 1 };
  s3 -> s2 [0, 72] { R16185 += 1, R16141 += 1, R15342 += 1, R15343 += 1 };
  s3 -> s3 [0, 65535] { R16185 += 1, R16140 += 1, R16141 += 1 };
  s3 -> s4 [73, 73] { R16185 += 1, R16141 += 1, R15342 += 1, R15343 += 1 };
  s3 -> s5 [73, 73] { R16185 += 1, R16141 += 1, R15343 += 1 };
  s3 -> s6 [73, 73] { R16185 += 1, R16141 += 1, R15342 += 1, R15343 += 1 };
  s3 -> s7 [73, 73] { R16185 += 1, R16141 += 1, R15343 += 1 };
  s3 -> s1 [74, 77] { R16185 += 1, R16141 += 1, R15343 += 1 };
  s3 -> s2 [74, 65535] { R16185 += 1, R16141 += 1, R15342 += 1, R15343 += 1 };
  s3 -> s8 [78, 78] { R16185 += 1, R16141 += 1, R15343 += 1 };
  s3 -> s1 [79, 65535] { R16185 += 1, R16141 += 1, R15343 += 1 };
  s4 -> s7 [0, 77] { R16185 += 1, R16141 += 1, R15343 += 1 };
  s4 -> s4 [0, 65535] { R16185 += 1, R16141 += 1, R15342 += 1, R15343 += 1 };
  s4 -> s10 [78, 78] { R16185 += 1, R16141 += 1, R15343 += 1 };
  s4 -> s7 [79, 65535] { R16185 += 1, R16141 += 1, R15343 += 1 };
  s7 -> s7 [0, 77] { R16185 += 1, R16141 += 1, R15343 += 1 };
  s7 -> s10 [78, 78] { R16185 += 1, R16141 += 1, R15343 += 1 };
  s7 -> s7 [79, 65535] { R16185 += 1, R16141 += 1, R15343 += 1 };
  s8 -> s8 [0, 72] { R16185 += 1, R16141 += 1, R15343 += 1 };
  s8 -> s8 [0, 65535] { R16185 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [73, 73] { R16185 += 1, R16141 += 1, R15343 += 1 };
  s8 -> s11 [73, 73] { R16185 += 1, R16141 += 1, R15343 += 1 };
  s8 -> s8 [74, 65535] { R16185 += 1, R16141 += 1, R15343 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R16185 += 1, R16141 += 1, R15343 += 1 };
  s10 -> s9 [0, 65535];
  s10 -> s12 [0, 65535] { R16185 += 1 };
  s11 -> s11 [0, 65535] { R16185 += 1 };
  s11 -> s9 [0, 65535];
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R16185 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 72] { R16187 += 1, R16143 += 1, R15769 += 1, R15770 += 1 };
  s0 -> s2 [0, 72] { R16187 += 1, R16143 += 1, R15768 += 1, R15769 += 1 };
  s0 -> s3 [0, 65535] { R16187 += 1, R16142 += 1, R16143 += 1 };
  s0 -> s0 [0, 65535] { R16186 += 1, R16187 += 1 };
  s0 -> s4 [73, 73] { R16187 += 1, R16143 += 1, R15768 += 1, R15769 += 1 };
  s0 -> s5 [73, 73] { R16187 += 1, R16143 += 1, R15768 += 1, R15769 += 1 };
  s0 -> s6 [73, 73] { R16187 += 1, R16143 += 1, R15769 += 1, R15770 += 1 };
  s0 -> s7 [73, 73] { R16187 += 1, R16143 += 1, R15769 += 1, R15770 += 1 };
  s0 -> s1 [74, 65535] { R16187 += 1, R16143 += 1, R15769 += 1, R15770 += 1 };
  s0 -> s2 [74, 65535] { R16187 += 1, R16143 += 1, R15768 += 1, R15769 += 1 };
  s1 -> s1 [0, 72] { R16187 += 1, R16143 += 1, R15769 += 1, R15770 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s1 [0, 65535] { R16187 += 1 };
  s1 -> s6 [73, 73] { R16187 += 1, R16143 += 1, R15769 += 1, R15770 += 1 };
  s1 -> s7 [73, 73] { R16187 += 1, R16143 += 1, R15769 += 1, R15770 += 1 };
  s1 -> s1 [74, 65535] { R16187 += 1, R16143 += 1, R15769 += 1, R15770 += 1 };
  s2 -> s1 [0, 72] { R16187 += 1, R16143 += 1, R15769 += 1, R15770 += 1 };
  s2 -> s2 [0, 72] { R16187 += 1, R16143 += 1, R15768 += 1, R15769 += 1 };
  s2 -> s4 [73, 73] { R16187 += 1, R16143 += 1, R15768 += 1, R15769 += 1 };
  s2 -> s5 [73, 73] { R16187 += 1, R16143 += 1, R15768 += 1, R15769 += 1 };
  s2 -> s6 [73, 73] { R16187 += 1, R16143 += 1, R15769 += 1, R15770 += 1 };
  s2 -> s7 [73, 73] { R16187 += 1, R16143 += 1, R15769 += 1, R15770 += 1 };
  s2 -> s1 [74, 65535] { R16187 += 1, R16143 += 1, R15769 += 1, R15770 += 1 };
  s2 -> s2 [74, 65535] { R16187 += 1, R16143 += 1, R15768 += 1, R15769 += 1 };
  s3 -> s1 [0, 72] { R16187 += 1, R16143 += 1, R15769 += 1, R15770 += 1 };
  s3 -> s2 [0, 72] { R16187 += 1, R16143 += 1, R15768 += 1, R15769 += 1 };
  s3 -> s3 [0, 65535] { R16187 += 1, R16142 += 1, R16143 += 1 };
  s3 -> s4 [73, 73] { R16187 += 1, R16143 += 1, R15768 += 1, R15769 += 1 };
  s3 -> s5 [73, 73] { R16187 += 1, R16143 += 1, R15768 += 1, R15769 += 1 };
  s3 -> s6 [73, 73] { R16187 += 1, R16143 += 1, R15769 += 1, R15770 += 1 };
  s3 -> s7 [73, 73] { R16187 += 1, R16143 += 1, R15769 += 1, R15770 += 1 };
  s3 -> s1 [74, 65535] { R16187 += 1, R16143 += 1, R15769 += 1, R15770 += 1 };
  s3 -> s2 [74, 65535] { R16187 += 1, R16143 += 1, R15768 += 1, R15769 += 1 };
  s5 -> s5 [0, 65535] { R16187 += 1, R16143 += 1, R15768 += 1, R15769 += 1 };
  s5 -> s6 [0, 65535] { R16187 += 1, R16143 += 1, R15769 += 1, R15770 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s9 [0, 65535] { R16187 += 1 };
  s6 -> s6 [0, 65535] { R16187 += 1, R16143 += 1, R15769 += 1, R15770 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R16187 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R16187 += 1 };
  accepting s8, s9, s6, s1, s7;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 72] { R16189 += 1, R16145 += 1, R16086 += 1, R16087 += 1 };
  s0 -> s2 [0, 72] { R16189 += 1, R16145 += 1, R16087 += 1 };
  s0 -> s3 [0, 65535] { R16189 += 1, R16144 += 1, R16145 += 1 };
  s0 -> s0 [0, 65535] { R16188 += 1, R16189 += 1 };
  s0 -> s4 [73, 73] { R16189 += 1, R16145 += 1, R16086 += 1, R16087 += 1 };
  s0 -> s5 [73, 73] { R16189 += 1, R16145 += 1, R16086 += 1, R16087 += 1 };
  s0 -> s6 [73, 73] { R16189 += 1, R16145 += 1, R16087 += 1 };
  s0 -> s7 [73, 73] { R16189 += 1, R16145 += 1, R16087 += 1 };
  s0 -> s2 [74, 76] { R16189 += 1, R16145 += 1, R16087 += 1 };
  s0 -> s1 [74, 65535] { R16189 += 1, R16145 += 1, R16086 += 1, R16087 += 1 };
  s0 -> s8 [77, 77] { R16189 += 1, R16145 += 1, R16087 += 1 };
  s0 -> s2 [79, 65535] { R16189 += 1, R16145 += 1, R16087 += 1 };
  s1 -> s1 [0, 72] { R16189 += 1, R16145 += 1, R16086 += 1, R16087 += 1 };
  s1 -> s2 [0, 72] { R16189 += 1, R16145 += 1, R16087 += 1 };
  s1 -> s4 [73, 73] { R16189 += 1, R16145 += 1, R16086 += 1, R16087 += 1 };
  s1 -> s5 [73, 73] { R16189 += 1, R16145 += 1, R16086 += 1, R16087 += 1 };
  s1 -> s6 [73, 73] { R16189 += 1, R16145 += 1, R16087 += 1 };
  s1 -> s7 [73, 73] { R16189 += 1, R16145 += 1, R16087 += 1 };
  s1 -> s2 [74, 76] { R16189 += 1, R16145 += 1, R16087 += 1 };
  s1 -> s1 [74, 65535] { R16189 += 1, R16145 += 1, R16086 += 1, R16087 += 1 };
  s1 -> s8 [77, 77] { R16189 += 1, R16145 += 1, R16087 += 1 };
  s1 -> s2 [79, 65535] { R16189 += 1, R16145 += 1, R16087 += 1 };
  s2 -> s2 [0, 72] { R16189 += 1, R16145 += 1, R16087 += 1 };
  s2 -> s6 [73, 73] { R16189 += 1, R16145 += 1 };
  s2 -> s7 [73, 73] { R16189 += 1, R16145 += 1 };
  s2 -> s2 [74, 76] { R16189 += 1, R16145 += 1, R16087 += 1 };
  s2 -> s2 [74, 65535] { R16189 += 1, R16145 += 1 };
  s2 -> s8 [77, 77] { R16189 += 1, R16145 += 1, R16087 += 1 };
  s2 -> s2 [79, 65535] { R16189 += 1, R16145 += 1, R16087 += 1 };
  s3 -> s1 [0, 72] { R16189 += 1, R16145 += 1, R16086 += 1, R16087 += 1 };
  s3 -> s2 [0, 72] { R16189 += 1, R16145 += 1, R16087 += 1 };
  s3 -> s3 [0, 65535] { R16189 += 1, R16144 += 1, R16145 += 1 };
  s3 -> s4 [73, 73] { R16189 += 1, R16145 += 1, R16086 += 1, R16087 += 1 };
  s3 -> s5 [73, 73] { R16189 += 1, R16145 += 1, R16086 += 1, R16087 += 1 };
  s3 -> s6 [73, 73] { R16189 += 1, R16145 += 1, R16087 += 1 };
  s3 -> s7 [73, 73] { R16189 += 1, R16145 += 1, R16087 += 1 };
  s3 -> s2 [74, 76] { R16189 += 1, R16145 += 1, R16087 += 1 };
  s3 -> s1 [74, 65535] { R16189 += 1, R16145 += 1, R16086 += 1, R16087 += 1 };
  s3 -> s8 [77, 77] { R16189 += 1, R16145 += 1, R16087 += 1 };
  s3 -> s2 [79, 65535] { R16189 += 1, R16145 += 1, R16087 += 1 };
  s4 -> s6 [0, 76] { R16189 += 1, R16145 += 1, R16087 += 1 };
  s4 -> s4 [0, 65535] { R16189 += 1, R16145 += 1, R16086 += 1, R16087 += 1 };
  s4 -> s11 [77, 77] { R16189 += 1, R16145 += 1, R16087 += 1 };
  s4 -> s6 [79, 65535] { R16189 += 1, R16145 += 1, R16087 += 1 };
  s6 -> s6 [0, 76] { R16189 += 1, R16145 += 1, R16087 += 1 };
  s6 -> s6 [0, 65535] { R16189 += 1, R16145 += 1 };
  s6 -> s11 [77, 77] { R16189 += 1, R16145 += 1, R16087 += 1 };
  s6 -> s6 [79, 65535] { R16189 += 1, R16145 += 1, R16087 += 1 };
  s8 -> s8 [0, 72] { R16189 += 1, R16145 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R16189 += 1 };
  s8 -> s10 [73, 73] { R16189 += 1, R16145 += 1 };
  s8 -> s11 [73, 73] { R16189 += 1, R16145 += 1 };
  s8 -> s8 [74, 65535] { R16189 += 1, R16145 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R16189 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R16189 += 1, R16145 += 1 };
  s11 -> s12 [0, 65535] { R16189 += 1 };
  s11 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R16189 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
synchronised {  // Automata constraining P54
automaton P54_0 {
  init s0;
  s0 -> s1 [109, 109];
  accepting s1;
};
};
constraint R2 = R16189 && R20 - R16189 = -1 && R21 = R16189 && R22 - R16189 = -1 && R23 = R16189 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R15345 + -1*R15343 - R53 = 0 && R52 + R15344 + R15342 = 0 && R16130 = 0 && R16131 = 0 && R16136 = 0 && R16137 = 0 && R16140 = 0 && R16141 = 0 && R16142 = 0 && R16143 = 0 && R16144 = 0 && R16145 = 0 && R16146 = 0 && R16147 = R16189 && R16148 = 0 && R16149 = R16189 && R16150 = 0 && R16151 = R16189 && R16152 = 0 && R16153 = R16189 && R16154 = 0 && R16155 = R16189 && R16156 = 0 && R16157 = R16189 && R16158 = 0 && R16159 = R16189 && R16160 = 0 && R16161 = R16189 && R16162 = 0 && R16163 = R16189 && R16164 = 0 && R16165 = R16189 && R16166 = 0 && R16167 = R16189 && R16168 = 0 && R16169 = R16189 && R16170 = 0 && R16171 = R16189 && R16172 = 0 && R16173 = R16189 && R16174 = 0 && R16175 = R16189 && R16176 = 0 && R16177 = R16189 && R16178 = 0 && R16179 = R16189 && R16180 = 0 && R16181 = R16189 && R16182 = 0 && R16183 = R16189 && R16184 = 0 && R16185 = R16189 && R16186 = 0 && R16187 = R16189 && R16188 = 0 && -1 < R1 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R15345 + -1*R15343 - R53 < 1 && 0 < R16189 && (R1 != 0 || R17 = 0 || (R16090 = 0 && R16091 = 0)) && (R1 != 0 || R17 = 0 || (R16092 = 0 && R16093 = 0)) && (R1 != 0 || R17 = 0 || (R16094 = 0 && R16095 = 0)) && (R1 != 0 || R17 = 0 || (R16096 = 0 && R16097 = 0)) && (R1 != 0 || R17 = 0 || (R16098 = 0 && R16099 = 0)) && (R1 != 0 || R17 = 0 || (R16100 = 0 && R16101 = 0)) && (R1 != 0 || R17 = 0 || (R16102 = 0 && R16103 = 0)) && (R1 != 0 || R17 = 0 || (R16104 = 0 && R16105 = 0)) && (R1 != 0 || R17 = 0 || (R16106 = 0 && R16107 = 0)) && (R1 != 0 || R17 = 0 || (R16108 = 0 && R16109 = 0)) && (R48 + R15341 + R15338 != 0 || ((R42 + R15334 + R15332 != 0 || R43 + R15335 + R15333 + -1*R15345 + -1*R15343 - R53 = 0 || R53 + R15345 + R15343 < 1) && (R42 + R15334 + R15332 = 0 || R53 + R15345 + R15343 < 1))) && (R48 + R15341 + R15338 != 0 || ((R46 + R15339 + R15336 != 0 || R47 + R15340 + R15337 + -1*R15345 + -1*R15343 - R53 = 0 || R53 + R15345 + R15343 < 1) && (R46 + R15339 + R15336 = 0 || R53 + R15345 + R15343 < 1))) && (R16090 != 0 || R1 = R16091 || R1 < 1) && (R16092 != 0 || R1 = R16093 || R1 < 1) && (R16094 != 0 || R1 = R16095 || R1 < 1) && (R16096 != 0 || R1 = R16097 || R1 < 1) && (R16098 != 0 || R1 = R16099 || R1 < 1) && (R16100 != 0 || R1 = R16101 || R1 < 1) && (R16102 != 0 || R1 = R16103 || R1 < 1) && (R16104 != 0 || R1 = R16105 || R1 < 1) && (R16106 != 0 || R1 = R16107 || R1 < 1) && (R16108 != 0 || R1 = R16109 || R1 < 1) && (R18 = 0 || (R16128 = 0 && R16129 = 0)) && (R18 = 0 || (R16132 = 0 && R16133 = 0)) && (R18 = 0 || (R16134 = 0 && R16135 = 0)) && (R18 = 0 || (R16138 = 0 && R16139 = 0)) && (R19 = 0 || (R16110 = 0 && R16111 = 0)) && (R19 = 0 || (R16112 = 0 && R16113 = 0)) && (R19 = 0 || (R16114 = 0 && R16115 = 0)) && (R19 = 0 || (R16116 = 0 && R16117 = 0)) && (R19 = 0 || (R16118 = 0 && R16119 = 0)) && (R19 = 0 || (R16120 = 0 && R16121 = 0)) && (R19 = 0 || (R16122 = 0 && R16123 = 0)) && (R19 = 0 || (R16124 = 0 && R16125 = 0)) && (R19 = 0 || (R16126 = 0 && R16127 = 0)) && (R48 + R15341 + R15338 = 0 || (R42 + R15334 + R15332 = 0 && R43 + R15335 + R15333 + -1*R15345 + -1*R15343 - R53 = 0)) && (R48 + R15341 + R15338 = 0 || (R46 + R15339 + R15336 = 0 && R47 + R15340 + R15337 + -1*R15345 + -1*R15343 - R53 = 0)) && (R58 + R15773 + R15770 = 0 || (R56 + R15771 + R15768 = 0 && R57 + R15772 + R15769 = 0)) && (R58 + R15773 + R15770 = 0 || (R62 + R16088 + R16086 = 0 && R63 + R16089 + R16087 = 0)) && (R16090 = 0 || R1 < 1) && (R16092 = 0 || R1 < 1) && (R16094 = 0 || R1 < 1) && (R16096 = 0 || R1 < 1) && (R16098 = 0 || R1 < 1) && (R16100 = 0 || R1 < 1) && (R16102 = 0 || R1 < 1) && (R16104 = 0 || R1 < 1) && (R16106 = 0 || R1 < 1) && (R16108 = 0 || R1 < 1);
// End of Parikh automata intersection problem
