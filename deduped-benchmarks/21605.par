// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R12, R1350, R1351, R1352, R1353, R1354, R1355, R1356, R1357, R1358, R1359, R1672, R1673, R1674, R1675, R1676, R1677, R1678, R1679, R1680, R1681, R1682, R1683, R1684, R1685, R1686, R1687, R1688, R1689, R1690, R1691, R1692, R1693, R1694, R1695, R1696, R1697, R1698, R1699, R17, R1700, R1701, R1702, R1703, R1704, R1705, R1706, R1707, R1708, R1709, R1710, R1711, R1712, R1713, R1714, R1715, R1716, R1717, R1718, R1719, R1720, R1721, R1722, R1723, R1724, R1725, R1726, R1727, R1728, R1729, R1730, R1731, R1732, R1733, R1734, R1735, R1736, R1737, R1738, R1739, R1740, R1741, R1742, R1743, R1744, R1745, R1746, R1747, R1748, R1749, R1750, R1751, R1752, R1753, R1754, R1755, R1756, R1757, R1758, R1759, R1760, R1761, R1762, R1763, R1764, R1765, R1766, R1767, R1768, R1769, R1770, R1771, R1772, R1773, R1774, R1775, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R70, R71, R72, R73, R74, R75, R76, R77, R78, R79, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 72];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [73, 73];
  s0 -> s1 [74, 65535];
  s1 -> s1 [0, 72];
  s1 -> s2 [73, 73];
  s1 -> s1 [74, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s1 [0, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R25 += 1 };
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R1696 += 1, R1697 += 1 };
  s0 -> s1 [0, 65535] { R1697 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R1697 += 1, R19 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 72] { R1699 += 1 };
  s0 -> s0 [0, 65535] { R1698 += 1, R1699 += 1 };
  s0 -> s2 [73, 73] { R1699 += 1 };
  s0 -> s3 [73, 73] { R1699 += 1 };
  s0 -> s1 [78, 65535] { R1699 += 1 };
  s1 -> s1 [0, 72] { R1699 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R1699 += 1 };
  s1 -> s3 [73, 73] { R1699 += 1 };
  s1 -> s1 [78, 65535] { R1699 += 1 };
  s2 -> s2 [0, 73] { R1699 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [78, 65535] { R1699 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 72] { R1701 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R1700 += 1, R1701 += 1 };
  s0 -> s2 [73, 73] { R1701 += 1, R38 += 1 };
  s0 -> s3 [73, 73] { R1701 += 1, R38 += 1 };
  s0 -> s1 [74, 65535] { R1701 += 1, R38 += 1 };
  s1 -> s1 [0, 72] { R1701 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R1701 += 1, R38 += 1 };
  s1 -> s3 [73, 73] { R1701 += 1, R38 += 1 };
  s1 -> s1 [74, 65535] { R1701 += 1, R38 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1701 += 1, R38 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 72] { R1703 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R1702 += 1, R1703 += 1 };
  s0 -> s2 [73, 73] { R1703 += 1, R40 += 1 };
  s0 -> s3 [73, 73] { R1703 += 1, R40 += 1 };
  s0 -> s1 [74, 65535] { R1703 += 1, R40 += 1 };
  s1 -> s1 [0, 72] { R1703 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R1703 += 1, R40 += 1 };
  s1 -> s3 [73, 73] { R1703 += 1, R40 += 1 };
  s1 -> s1 [74, 65535] { R1703 += 1, R40 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1703 += 1, R40 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 72] { R1705 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R1704 += 1, R1705 += 1 };
  s0 -> s2 [73, 73] { R1705 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [73, 73] { R1705 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [74, 65535] { R1705 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 72] { R1705 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R1705 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [73, 73] { R1705 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [74, 65535] { R1705 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1705 += 1, R42 += 1, R43 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 72] { R1707 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R1706 += 1, R1707 += 1 };
  s0 -> s2 [73, 73] { R1707 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [73, 73] { R1707 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [74, 65535] { R1707 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 72] { R1707 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R1707 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [73, 73] { R1707 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [74, 65535] { R1707 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1707 += 1, R46 += 1, R47 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 72] { R1709 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R1708 += 1, R1709 += 1 };
  s0 -> s2 [73, 73] { R1709 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [73, 73] { R1709 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [74, 65535] { R1709 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 72] { R1709 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R1709 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [73, 73] { R1709 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [74, 65535] { R1709 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535] { R1709 += 1, R52 += 1, R53 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 72] { R1711 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R1710 += 1, R1711 += 1 };
  s0 -> s2 [73, 73] { R1711 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [73, 73] { R1711 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [74, 65535] { R1711 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 72] { R1711 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R1711 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [73, 73] { R1711 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [74, 65535] { R1711 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535] { R1711 += 1, R56 += 1, R57 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 72] { R1713 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R1712 += 1, R1713 += 1 };
  s0 -> s2 [73, 73] { R1713 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [73, 73] { R1713 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [74, 65535] { R1713 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 72] { R1713 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R1713 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [73, 73] { R1713 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [74, 65535] { R1713 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1713 += 1, R62 += 1, R63 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 72] { R1733 += 1 };
  s0 -> s0 [0, 65535] { R1732 += 1, R1733 += 1 };
  s0 -> s2 [73, 73] { R1733 += 1 };
  s0 -> s1 [74, 65535] { R1733 += 1 };
  s1 -> s1 [0, 72] { R1733 += 1 };
  s1 -> s2 [73, 73] { R1733 += 1 };
  s1 -> s1 [74, 65535] { R1733 += 1 };
  s2 -> s2 [0, 65535] { R1733 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R1734 += 1, R1735 += 1 };
  s0 -> s1 [0, 65535] { R1735 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R1735 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 72] { R1737 += 1 };
  s0 -> s2 [0, 65535] { R1737 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R1736 += 1, R1737 += 1 };
  s0 -> s3 [73, 73] { R1737 += 1 };
  s0 -> s1 [74, 65535] { R1737 += 1 };
  s1 -> s1 [0, 72] { R1737 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [73, 73] { R1737 += 1 };
  s1 -> s1 [74, 65535] { R1737 += 1 };
  s2 -> s1 [0, 72] { R1737 += 1 };
  s2 -> s2 [0, 65535] { R1737 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [73, 73] { R1737 += 1 };
  s2 -> s1 [74, 65535] { R1737 += 1 };
  s3 -> s3 [0, 65535] { R1737 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 72] { R1739 += 1, R1677 += 1 };
  s0 -> s0 [0, 65535] { R1738 += 1, R1739 += 1 };
  s0 -> s2 [0, 65535] { R1739 += 1, R1676 += 1, R1677 += 1 };
  s0 -> s1 [74, 65535] { R1739 += 1, R1677 += 1 };
  s1 -> s1 [0, 72] { R1739 += 1, R1677 += 1 };
  s1 -> s1 [0, 65535] { R1739 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [74, 65535] { R1739 += 1, R1677 += 1 };
  s2 -> s1 [0, 72] { R1739 += 1, R1677 += 1 };
  s2 -> s2 [0, 65535] { R1739 += 1, R1676 += 1, R1677 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [74, 65535] { R1739 += 1, R1677 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s0 [0, 65535] { R1740 += 1, R1741 += 1 };
  s0 -> s1 [0, 65535] { R1741 += 1, R1678 += 1, R1679 += 1 };
  s0 -> s2 [0, 65535] { R1741 += 1, R1679 += 1, R17 += 1 };
  s1 -> s1 [0, 65535] { R1741 += 1, R1678 += 1, R1679 += 1 };
  s1 -> s2 [0, 65535] { R1741 += 1, R1679 += 1, R17 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R1741 += 1 };
  s2 -> s2 [0, 65535] { R1741 += 1, R1679 += 1, R17 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1741 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 73] { R1743 += 1, R1681 += 1 };
  s0 -> s2 [0, 65535] { R1743 += 1, R1680 += 1, R1681 += 1 };
  s0 -> s0 [0, 65535] { R1742 += 1, R1743 += 1 };
  s0 -> s1 [77, 65535] { R1743 += 1, R1681 += 1 };
  s1 -> s1 [0, 73] { R1743 += 1, R1681 += 1 };
  s1 -> s1 [0, 65535] { R1743 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [77, 65535] { R1743 += 1, R1681 += 1 };
  s2 -> s1 [0, 73] { R1743 += 1, R1681 += 1 };
  s2 -> s2 [0, 65535] { R1743 += 1, R1680 += 1, R1681 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [77, 65535] { R1743 += 1, R1681 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R1745 += 1, R1682 += 1, R1683 += 1 };
  s0 -> s0 [0, 65535] { R1744 += 1, R1745 += 1 };
  s0 -> s2 [0, 65535] { R1745 += 1, R1683 += 1, R67 += 1 };
  s1 -> s1 [0, 65535] { R1745 += 1, R1682 += 1, R1683 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R1745 += 1, R1683 += 1, R67 += 1 };
  s2 -> s3 [0, 65535] { R1745 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1745 += 1, R1683 += 1, R67 += 1 };
  s3 -> s3 [0, 65535] { R1745 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 76] { R1747 += 1, R1685 += 1 };
  s0 -> s2 [0, 65535] { R1747 += 1, R1684 += 1, R1685 += 1 };
  s0 -> s3 [0, 65535] { R1747 += 1, R1685 += 1, R69 += 1 };
  s0 -> s0 [0, 65535] { R1746 += 1, R1747 += 1 };
  s0 -> s1 [78, 65535] { R1747 += 1, R1685 += 1 };
  s1 -> s1 [0, 76] { R1747 += 1, R1685 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1747 += 1 };
  s1 -> s1 [78, 65535] { R1747 += 1, R1685 += 1 };
  s2 -> s1 [0, 76] { R1747 += 1, R1685 += 1 };
  s2 -> s2 [0, 65535] { R1747 += 1, R1684 += 1, R1685 += 1 };
  s2 -> s3 [0, 65535] { R1747 += 1, R1685 += 1, R69 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [78, 65535] { R1747 += 1, R1685 += 1 };
  s3 -> s1 [0, 76] { R1747 += 1, R1685 += 1 };
  s3 -> s4 [0, 65535] { R1747 += 1 };
  s3 -> s3 [0, 65535] { R1747 += 1, R1685 += 1, R69 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [78, 65535] { R1747 += 1, R1685 += 1 };
  s4 -> s4 [0, 65535] { R1747 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 76] { R1749 += 1, R1687 += 1, R73 += 1 };
  s0 -> s2 [0, 65535] { R1749 += 1, R1686 += 1, R1687 += 1 };
  s0 -> s0 [0, 65535] { R1748 += 1, R1749 += 1 };
  s0 -> s3 [0, 65535] { R1749 += 1, R1687 += 1, R72 += 1, R73 += 1 };
  s0 -> s1 [78, 65535] { R1749 += 1, R1687 += 1, R73 += 1 };
  s1 -> s1 [0, 76] { R1749 += 1, R1687 += 1, R73 += 1 };
  s1 -> s1 [0, 65535] { R1749 += 1, R1687 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R1749 += 1 };
  s1 -> s1 [78, 65535] { R1749 += 1, R1687 += 1, R73 += 1 };
  s2 -> s1 [0, 76] { R1749 += 1, R1687 += 1, R73 += 1 };
  s2 -> s2 [0, 65535] { R1749 += 1, R1686 += 1, R1687 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R1749 += 1, R1687 += 1, R72 += 1, R73 += 1 };
  s2 -> s1 [78, 65535] { R1749 += 1, R1687 += 1, R73 += 1 };
  s3 -> s1 [0, 76] { R1749 += 1, R1687 += 1, R73 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R1749 += 1 };
  s3 -> s3 [0, 65535] { R1749 += 1, R1687 += 1, R72 += 1, R73 += 1 };
  s3 -> s1 [78, 65535] { R1749 += 1, R1687 += 1, R73 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1749 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R1751 += 1, R1689 += 1, R77 += 1, R78 += 1 };
  s0 -> s0 [0, 65535] { R1750 += 1, R1751 += 1 };
  s0 -> s2 [0, 65535] { R1751 += 1, R1688 += 1, R1689 += 1 };
  s0 -> s3 [0, 65535] { R1751 += 1, R1689 += 1, R78 += 1, R79 += 1 };
  s1 -> s1 [0, 65535] { R1751 += 1, R1689 += 1, R77 += 1, R78 += 1 };
  s1 -> s4 [0, 65535] { R1751 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [0, 65535] { R1751 += 1, R1689 += 1, R78 += 1, R79 += 1 };
  s2 -> s1 [0, 65535] { R1751 += 1, R1689 += 1, R77 += 1, R78 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R1751 += 1, R1688 += 1, R1689 += 1 };
  s2 -> s3 [0, 65535] { R1751 += 1, R1689 += 1, R78 += 1, R79 += 1 };
  s3 -> s4 [0, 65535] { R1751 += 1 };
  s3 -> s5 [0, 65535] { R1751 += 1, R1689 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R1751 += 1, R1689 += 1, R78 += 1, R79 += 1 };
  s4 -> s4 [0, 65535] { R1751 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s4 [0, 65535] { R1751 += 1 };
  s5 -> s5 [0, 65535] { R1751 += 1, R1689 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 65535] { R1753 += 1, R1691 += 1 };
  s0 -> s0 [0, 65535] { R1752 += 1, R1753 += 1 };
  s0 -> s2 [0, 65535] { R1753 += 1, R1690 += 1, R1691 += 1 };
  s1 -> s1 [0, 65535] { R1753 += 1, R1691 += 1 };
  s1 -> s4 [0, 65535] { R1753 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R1753 += 1, R1691 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1753 += 1, R1690 += 1, R1691 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1753 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R1755 += 1, R1692 += 1, R1693 += 1 };
  s0 -> s0 [0, 65535] { R1754 += 1, R1755 += 1 };
  s0 -> s2 [0, 65535] { R1755 += 1, R1693 += 1, R1358 += 1, R1359 += 1 };
  s0 -> s3 [0, 65535] { R1755 += 1, R1693 += 1, R1357 += 1, R1358 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1755 += 1, R1692 += 1, R1693 += 1 };
  s1 -> s2 [0, 65535] { R1755 += 1, R1693 += 1, R1358 += 1, R1359 += 1 };
  s1 -> s3 [0, 65535] { R1755 += 1, R1693 += 1, R1357 += 1, R1358 += 1 };
  s2 -> s4 [0, 65535] { R1755 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R1755 += 1, R1693 += 1 };
  s2 -> s2 [0, 65535] { R1755 += 1, R1693 += 1, R1358 += 1, R1359 += 1 };
  s3 -> s4 [0, 65535] { R1755 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R1755 += 1, R1693 += 1, R1358 += 1, R1359 += 1 };
  s3 -> s3 [0, 65535] { R1755 += 1, R1693 += 1, R1357 += 1, R1358 += 1 };
  s4 -> s4 [0, 65535] { R1755 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R1755 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1755 += 1, R1693 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 65535] { R1757 += 1, R1694 += 1, R1695 += 1 };
  s0 -> s0 [0, 65535] { R1756 += 1, R1757 += 1 };
  s0 -> s2 [0, 65535] { R1757 += 1, R1695 += 1 };
  s1 -> s1 [0, 65535] { R1757 += 1, R1694 += 1, R1695 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R1757 += 1, R1695 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R1757 += 1 };
  s2 -> s2 [0, 65535] { R1757 += 1, R1695 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1757 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R1759 += 1, R1715 += 1, R18 += 1 };
  s0 -> s2 [0, 65535] { R1759 += 1, R1714 += 1, R1715 += 1 };
  s0 -> s0 [0, 65535] { R1758 += 1, R1759 += 1 };
  s1 -> s1 [0, 65535] { R1759 += 1, R1715 += 1, R18 += 1 };
  s1 -> s4 [0, 65535] { R1759 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R1759 += 1, R1715 += 1, R18 += 1 };
  s2 -> s2 [0, 65535] { R1759 += 1, R1714 += 1, R1715 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1759 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 72] { R1761 += 1, R1717 += 1 };
  s0 -> s2 [0, 65535] { R1761 += 1, R1716 += 1, R1717 += 1 };
  s0 -> s0 [0, 65535] { R1760 += 1, R1761 += 1 };
  s0 -> s3 [73, 73] { R1761 += 1, R1717 += 1 };
  s0 -> s4 [73, 73] { R1761 += 1, R1717 += 1 };
  s0 -> s5 [77, 77] { R1761 += 1, R1717 += 1 };
  s0 -> s1 [78, 65535] { R1761 += 1, R1717 += 1 };
  s1 -> s1 [0, 72] { R1761 += 1, R1717 += 1 };
  s1 -> s3 [73, 73] { R1761 += 1, R1717 += 1 };
  s1 -> s4 [73, 73] { R1761 += 1, R1717 += 1 };
  s1 -> s5 [77, 77] { R1761 += 1, R1717 += 1 };
  s1 -> s1 [78, 65535] { R1761 += 1, R1717 += 1 };
  s2 -> s1 [0, 72] { R1761 += 1, R1717 += 1 };
  s2 -> s2 [0, 65535] { R1761 += 1, R1716 += 1, R1717 += 1 };
  s2 -> s3 [73, 73] { R1761 += 1, R1717 += 1 };
  s2 -> s4 [73, 73] { R1761 += 1, R1717 += 1 };
  s2 -> s5 [77, 77] { R1761 += 1, R1717 += 1 };
  s2 -> s1 [78, 65535] { R1761 += 1, R1717 += 1 };
  s4 -> s4 [0, 73] { R1761 += 1, R1717 += 1 };
  s4 -> s7 [77, 77] { R1761 += 1, R1717 += 1 };
  s4 -> s4 [78, 65535] { R1761 += 1, R1717 += 1 };
  s5 -> s5 [0, 72] { R1761 += 1, R1717 += 1 };
  s5 -> s5 [0, 65535] { R1761 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [73, 73] { R1761 += 1, R1717 += 1 };
  s5 -> s8 [73, 73] { R1761 += 1, R1717 += 1 };
  s5 -> s5 [77, 65535] { R1761 += 1, R1717 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 73] { R1761 += 1, R1717 += 1 };
  s7 -> s7 [0, 65535] { R1761 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [77, 65535] { R1761 += 1, R1717 += 1 };
  s8 -> s8 [0, 65535] { R1761 += 1 };
  s8 -> s6 [0, 65535];
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 72] { R1763 += 1, R1719 += 1, R66 += 1 };
  s0 -> s2 [0, 65535] { R1763 += 1, R1718 += 1, R1719 += 1 };
  s0 -> s0 [0, 65535] { R1762 += 1, R1763 += 1 };
  s0 -> s3 [73, 73] { R1763 += 1, R1719 += 1, R66 += 1 };
  s0 -> s4 [73, 73] { R1763 += 1, R1719 += 1, R66 += 1 };
  s0 -> s1 [74, 65535] { R1763 += 1, R1719 += 1, R66 += 1 };
  s1 -> s1 [0, 72] { R1763 += 1, R1719 += 1, R66 += 1 };
  s1 -> s1 [0, 65535] { R1763 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [73, 73] { R1763 += 1, R1719 += 1, R66 += 1 };
  s1 -> s4 [73, 73] { R1763 += 1, R1719 += 1, R66 += 1 };
  s1 -> s1 [74, 65535] { R1763 += 1, R1719 += 1, R66 += 1 };
  s2 -> s1 [0, 72] { R1763 += 1, R1719 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R1763 += 1, R1718 += 1, R1719 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [73, 73] { R1763 += 1, R1719 += 1, R66 += 1 };
  s2 -> s4 [73, 73] { R1763 += 1, R1719 += 1, R66 += 1 };
  s2 -> s1 [74, 65535] { R1763 += 1, R1719 += 1, R66 += 1 };
  s3 -> s3 [0, 65535] { R1763 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R1763 += 1 };
  s4 -> s4 [0, 65535] { R1763 += 1, R1719 += 1, R66 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R1763 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 72] { R1765 += 1, R1721 += 1, R68 += 1 };
  s0 -> s2 [0, 65535] { R1765 += 1, R1720 += 1, R1721 += 1 };
  s0 -> s0 [0, 65535] { R1764 += 1, R1765 += 1 };
  s0 -> s3 [73, 73] { R1765 += 1, R1721 += 1, R68 += 1 };
  s0 -> s4 [73, 73] { R1765 += 1, R1721 += 1, R68 += 1 };
  s0 -> s1 [74, 65535] { R1765 += 1, R1721 += 1, R68 += 1 };
  s1 -> s1 [0, 72] { R1765 += 1, R1721 += 1, R68 += 1 };
  s1 -> s1 [0, 65535] { R1765 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [73, 73] { R1765 += 1, R1721 += 1, R68 += 1 };
  s1 -> s4 [73, 73] { R1765 += 1, R1721 += 1, R68 += 1 };
  s1 -> s1 [74, 65535] { R1765 += 1, R1721 += 1, R68 += 1 };
  s2 -> s1 [0, 72] { R1765 += 1, R1721 += 1, R68 += 1 };
  s2 -> s2 [0, 65535] { R1765 += 1, R1720 += 1, R1721 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [73, 73] { R1765 += 1, R1721 += 1, R68 += 1 };
  s2 -> s4 [73, 73] { R1765 += 1, R1721 += 1, R68 += 1 };
  s2 -> s1 [74, 65535] { R1765 += 1, R1721 += 1, R68 += 1 };
  s3 -> s3 [0, 65535] { R1765 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R1765 += 1 };
  s4 -> s4 [0, 65535] { R1765 += 1, R1721 += 1, R68 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R1765 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 72] { R1767 += 1, R1723 += 1, R70 += 1, R71 += 1 };
  s0 -> s0 [0, 65535] { R1766 += 1, R1767 += 1 };
  s0 -> s2 [0, 65535] { R1767 += 1, R1722 += 1, R1723 += 1 };
  s0 -> s3 [73, 73] { R1767 += 1, R1723 += 1, R70 += 1, R71 += 1 };
  s0 -> s4 [73, 73] { R1767 += 1, R1723 += 1, R70 += 1, R71 += 1 };
  s0 -> s1 [74, 65535] { R1767 += 1, R1723 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 72] { R1767 += 1, R1723 += 1, R70 += 1, R71 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1767 += 1 };
  s1 -> s3 [73, 73] { R1767 += 1, R1723 += 1, R70 += 1, R71 += 1 };
  s1 -> s4 [73, 73] { R1767 += 1, R1723 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [74, 65535] { R1767 += 1, R1723 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [0, 72] { R1767 += 1, R1723 += 1, R70 += 1, R71 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1767 += 1, R1722 += 1, R1723 += 1 };
  s2 -> s3 [73, 73] { R1767 += 1, R1723 += 1, R70 += 1, R71 += 1 };
  s2 -> s4 [73, 73] { R1767 += 1, R1723 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [74, 65535] { R1767 += 1, R1723 += 1, R70 += 1, R71 += 1 };
  s3 -> s3 [0, 65535] { R1767 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1767 += 1, R1723 += 1, R70 += 1, R71 += 1 };
  s4 -> s6 [0, 65535] { R1767 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1767 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 72] { R1769 += 1, R1725 += 1, R74 += 1, R75 += 1 };
  s0 -> s0 [0, 65535] { R1768 += 1, R1769 += 1 };
  s0 -> s2 [0, 65535] { R1769 += 1, R1724 += 1, R1725 += 1 };
  s0 -> s3 [73, 73] { R1769 += 1, R1725 += 1, R74 += 1, R75 += 1 };
  s0 -> s4 [73, 73] { R1769 += 1, R1725 += 1, R74 += 1, R75 += 1 };
  s0 -> s1 [74, 65535] { R1769 += 1, R1725 += 1, R74 += 1, R75 += 1 };
  s1 -> s1 [0, 72] { R1769 += 1, R1725 += 1, R74 += 1, R75 += 1 };
  s1 -> s1 [0, 65535] { R1769 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R1769 += 1, R1725 += 1, R74 += 1, R75 += 1 };
  s1 -> s4 [73, 73] { R1769 += 1, R1725 += 1, R74 += 1, R75 += 1 };
  s1 -> s1 [74, 65535] { R1769 += 1, R1725 += 1, R74 += 1, R75 += 1 };
  s2 -> s1 [0, 72] { R1769 += 1, R1725 += 1, R74 += 1, R75 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1769 += 1, R1724 += 1, R1725 += 1 };
  s2 -> s3 [73, 73] { R1769 += 1, R1725 += 1, R74 += 1, R75 += 1 };
  s2 -> s4 [73, 73] { R1769 += 1, R1725 += 1, R74 += 1, R75 += 1 };
  s2 -> s1 [74, 65535] { R1769 += 1, R1725 += 1, R74 += 1, R75 += 1 };
  s3 -> s6 [0, 65535] { R1769 += 1 };
  s3 -> s3 [0, 65535] { R1769 += 1, R1725 += 1, R74 += 1, R75 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1769 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1769 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 72] { R1771 += 1, R1727 += 1, R1350 += 1, R1351 += 1 };
  s0 -> s2 [0, 72] { R1771 += 1, R1727 += 1, R1351 += 1 };
  s0 -> s3 [0, 65535] { R1771 += 1, R1726 += 1, R1727 += 1 };
  s0 -> s0 [0, 65535] { R1770 += 1, R1771 += 1 };
  s0 -> s4 [73, 73] { R1771 += 1, R1727 += 1, R1350 += 1, R1351 += 1 };
  s0 -> s5 [73, 73] { R1771 += 1, R1727 += 1, R1351 += 1 };
  s0 -> s6 [73, 73] { R1771 += 1, R1727 += 1, R1350 += 1, R1351 += 1 };
  s0 -> s7 [73, 73] { R1771 += 1, R1727 += 1, R1351 += 1 };
  s0 -> s2 [74, 77] { R1771 += 1, R1727 += 1, R1351 += 1 };
  s0 -> s1 [74, 65535] { R1771 += 1, R1727 += 1, R1350 += 1, R1351 += 1 };
  s0 -> s8 [78, 78] { R1771 += 1, R1727 += 1, R1351 += 1 };
  s0 -> s2 [79, 65535] { R1771 += 1, R1727 += 1, R1351 += 1 };
  s1 -> s1 [0, 72] { R1771 += 1, R1727 += 1, R1350 += 1, R1351 += 1 };
  s1 -> s2 [0, 72] { R1771 += 1, R1727 += 1, R1351 += 1 };
  s1 -> s4 [73, 73] { R1771 += 1, R1727 += 1, R1350 += 1, R1351 += 1 };
  s1 -> s5 [73, 73] { R1771 += 1, R1727 += 1, R1351 += 1 };
  s1 -> s6 [73, 73] { R1771 += 1, R1727 += 1, R1350 += 1, R1351 += 1 };
  s1 -> s7 [73, 73] { R1771 += 1, R1727 += 1, R1351 += 1 };
  s1 -> s2 [74, 77] { R1771 += 1, R1727 += 1, R1351 += 1 };
  s1 -> s1 [74, 65535] { R1771 += 1, R1727 += 1, R1350 += 1, R1351 += 1 };
  s1 -> s8 [78, 78] { R1771 += 1, R1727 += 1, R1351 += 1 };
  s1 -> s2 [79, 65535] { R1771 += 1, R1727 += 1, R1351 += 1 };
  s2 -> s2 [0, 72] { R1771 += 1, R1727 += 1, R1351 += 1 };
  s2 -> s5 [73, 73] { R1771 += 1, R1727 += 1, R1351 += 1 };
  s2 -> s7 [73, 73] { R1771 += 1, R1727 += 1, R1351 += 1 };
  s2 -> s2 [74, 77] { R1771 += 1, R1727 += 1, R1351 += 1 };
  s2 -> s8 [78, 78] { R1771 += 1, R1727 += 1, R1351 += 1 };
  s2 -> s2 [79, 65535] { R1771 += 1, R1727 += 1, R1351 += 1 };
  s3 -> s1 [0, 72] { R1771 += 1, R1727 += 1, R1350 += 1, R1351 += 1 };
  s3 -> s2 [0, 72] { R1771 += 1, R1727 += 1, R1351 += 1 };
  s3 -> s3 [0, 65535] { R1771 += 1, R1726 += 1, R1727 += 1 };
  s3 -> s4 [73, 73] { R1771 += 1, R1727 += 1, R1350 += 1, R1351 += 1 };
  s3 -> s5 [73, 73] { R1771 += 1, R1727 += 1, R1351 += 1 };
  s3 -> s6 [73, 73] { R1771 += 1, R1727 += 1, R1350 += 1, R1351 += 1 };
  s3 -> s7 [73, 73] { R1771 += 1, R1727 += 1, R1351 += 1 };
  s3 -> s2 [74, 77] { R1771 += 1, R1727 += 1, R1351 += 1 };
  s3 -> s1 [74, 65535] { R1771 += 1, R1727 += 1, R1350 += 1, R1351 += 1 };
  s3 -> s8 [78, 78] { R1771 += 1, R1727 += 1, R1351 += 1 };
  s3 -> s2 [79, 65535] { R1771 += 1, R1727 += 1, R1351 += 1 };
  s6 -> s7 [0, 77] { R1771 += 1, R1727 += 1, R1351 += 1 };
  s6 -> s6 [0, 65535] { R1771 += 1, R1727 += 1, R1350 += 1, R1351 += 1 };
  s6 -> s11 [78, 78] { R1771 += 1, R1727 += 1, R1351 += 1 };
  s6 -> s7 [79, 65535] { R1771 += 1, R1727 += 1, R1351 += 1 };
  s7 -> s7 [0, 77] { R1771 += 1, R1727 += 1, R1351 += 1 };
  s7 -> s11 [78, 78] { R1771 += 1, R1727 += 1, R1351 += 1 };
  s7 -> s7 [79, 65535] { R1771 += 1, R1727 += 1, R1351 += 1 };
  s8 -> s9 [0, 72] { R1771 += 1, R1727 += 1 };
  s8 -> s8 [0, 72] { R1771 += 1, R1727 += 1, R1351 += 1 };
  s8 -> s10 [73, 73] { R1771 += 1, R1727 += 1 };
  s8 -> s11 [73, 73] { R1771 += 1, R1727 += 1, R1351 += 1 };
  s8 -> s12 [73, 73] { R1771 += 1, R1727 += 1, R1351 += 1 };
  s8 -> s13 [73, 73] { R1771 += 1, R1727 += 1 };
  s8 -> s9 [74, 65535] { R1771 += 1, R1727 += 1 };
  s8 -> s8 [74, 65535] { R1771 += 1, R1727 += 1, R1351 += 1 };
  s9 -> s9 [0, 72] { R1771 += 1, R1727 += 1 };
  s9 -> s9 [0, 65535] { R1771 += 1 };
  s9 -> s14 [0, 65535];
  s9 -> s10 [73, 73] { R1771 += 1, R1727 += 1 };
  s9 -> s13 [73, 73] { R1771 += 1, R1727 += 1 };
  s9 -> s9 [74, 65535] { R1771 += 1, R1727 += 1 };
  s10 -> s10 [0, 65535] { R1771 += 1, R1727 += 1 };
  s10 -> s15 [0, 65535] { R1771 += 1 };
  s10 -> s14 [0, 65535];
  s11 -> s10 [0, 65535] { R1771 += 1, R1727 += 1 };
  s11 -> s11 [0, 65535] { R1771 += 1, R1727 += 1, R1351 += 1 };
  s13 -> s14 [0, 65535];
  s13 -> s13 [0, 65535] { R1771 += 1 };
  s14 -> s14 [0, 65535];
  s15 -> s15 [0, 65535] { R1771 += 1 };
  s15 -> s14 [0, 65535];
  accepting s13, s9, s14, s15, s10;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 72] { R1773 += 1, R1729 += 1, R1354 += 1, R1355 += 1 };
  s0 -> s0 [0, 65535] { R1772 += 1, R1773 += 1 };
  s0 -> s2 [0, 65535] { R1773 += 1, R1728 += 1, R1729 += 1 };
  s0 -> s3 [73, 73] { R1773 += 1, R1729 += 1, R1354 += 1, R1355 += 1 };
  s0 -> s4 [73, 73] { R1773 += 1, R1729 += 1, R1354 += 1, R1355 += 1 };
  s0 -> s1 [74, 65535] { R1773 += 1, R1729 += 1, R1354 += 1, R1355 += 1 };
  s1 -> s1 [0, 72] { R1773 += 1, R1729 += 1, R1354 += 1, R1355 += 1 };
  s1 -> s1 [0, 65535] { R1773 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R1773 += 1, R1729 += 1, R1354 += 1, R1355 += 1 };
  s1 -> s4 [73, 73] { R1773 += 1, R1729 += 1, R1354 += 1, R1355 += 1 };
  s1 -> s1 [74, 65535] { R1773 += 1, R1729 += 1, R1354 += 1, R1355 += 1 };
  s2 -> s1 [0, 72] { R1773 += 1, R1729 += 1, R1354 += 1, R1355 += 1 };
  s2 -> s2 [0, 65535] { R1773 += 1, R1728 += 1, R1729 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R1773 += 1, R1729 += 1, R1354 += 1, R1355 += 1 };
  s2 -> s4 [73, 73] { R1773 += 1, R1729 += 1, R1354 += 1, R1355 += 1 };
  s2 -> s1 [74, 65535] { R1773 += 1, R1729 += 1, R1354 += 1, R1355 += 1 };
  s3 -> s3 [0, 65535] { R1773 += 1, R1729 += 1, R1354 += 1, R1355 += 1 };
  s3 -> s6 [0, 65535] { R1773 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1773 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1773 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 72] { R1775 += 1, R1731 += 1, R1673 += 1 };
  s0 -> s2 [0, 72] { R1775 += 1, R1731 += 1, R1672 += 1, R1673 += 1 };
  s0 -> s3 [0, 65535] { R1775 += 1, R1730 += 1, R1731 += 1 };
  s0 -> s0 [0, 65535] { R1774 += 1, R1775 += 1 };
  s0 -> s4 [73, 73] { R1775 += 1, R1731 += 1, R1672 += 1, R1673 += 1 };
  s0 -> s5 [73, 73] { R1775 += 1, R1731 += 1, R1673 += 1 };
  s0 -> s6 [73, 73] { R1775 += 1, R1731 += 1, R1672 += 1, R1673 += 1 };
  s0 -> s7 [73, 73] { R1775 += 1, R1731 += 1, R1673 += 1 };
  s0 -> s1 [74, 76] { R1775 += 1, R1731 += 1, R1673 += 1 };
  s0 -> s2 [74, 65535] { R1775 += 1, R1731 += 1, R1672 += 1, R1673 += 1 };
  s0 -> s8 [77, 77] { R1775 += 1, R1731 += 1, R1673 += 1 };
  s0 -> s1 [79, 65535] { R1775 += 1, R1731 += 1, R1673 += 1 };
  s1 -> s1 [0, 72] { R1775 += 1, R1731 += 1, R1673 += 1 };
  s1 -> s5 [73, 73] { R1775 += 1, R1731 += 1 };
  s1 -> s7 [73, 73] { R1775 += 1, R1731 += 1 };
  s1 -> s1 [74, 76] { R1775 += 1, R1731 += 1, R1673 += 1 };
  s1 -> s1 [74, 65535] { R1775 += 1, R1731 += 1 };
  s1 -> s8 [77, 77] { R1775 += 1, R1731 += 1, R1673 += 1 };
  s1 -> s1 [79, 65535] { R1775 += 1, R1731 += 1, R1673 += 1 };
  s2 -> s1 [0, 72] { R1775 += 1, R1731 += 1, R1673 += 1 };
  s2 -> s2 [0, 72] { R1775 += 1, R1731 += 1, R1672 += 1, R1673 += 1 };
  s2 -> s4 [73, 73] { R1775 += 1, R1731 += 1, R1672 += 1, R1673 += 1 };
  s2 -> s5 [73, 73] { R1775 += 1, R1731 += 1, R1673 += 1 };
  s2 -> s6 [73, 73] { R1775 += 1, R1731 += 1, R1672 += 1, R1673 += 1 };
  s2 -> s7 [73, 73] { R1775 += 1, R1731 += 1, R1673 += 1 };
  s2 -> s1 [74, 76] { R1775 += 1, R1731 += 1, R1673 += 1 };
  s2 -> s2 [74, 65535] { R1775 += 1, R1731 += 1, R1672 += 1, R1673 += 1 };
  s2 -> s8 [77, 77] { R1775 += 1, R1731 += 1, R1673 += 1 };
  s2 -> s1 [79, 65535] { R1775 += 1, R1731 += 1, R1673 += 1 };
  s3 -> s1 [0, 72] { R1775 += 1, R1731 += 1, R1673 += 1 };
  s3 -> s2 [0, 72] { R1775 += 1, R1731 += 1, R1672 += 1, R1673 += 1 };
  s3 -> s3 [0, 65535] { R1775 += 1, R1730 += 1, R1731 += 1 };
  s3 -> s4 [73, 73] { R1775 += 1, R1731 += 1, R1672 += 1, R1673 += 1 };
  s3 -> s5 [73, 73] { R1775 += 1, R1731 += 1, R1673 += 1 };
  s3 -> s6 [73, 73] { R1775 += 1, R1731 += 1, R1672 += 1, R1673 += 1 };
  s3 -> s7 [73, 73] { R1775 += 1, R1731 += 1, R1673 += 1 };
  s3 -> s1 [74, 76] { R1775 += 1, R1731 += 1, R1673 += 1 };
  s3 -> s2 [74, 65535] { R1775 += 1, R1731 += 1, R1672 += 1, R1673 += 1 };
  s3 -> s8 [77, 77] { R1775 += 1, R1731 += 1, R1673 += 1 };
  s3 -> s1 [79, 65535] { R1775 += 1, R1731 += 1, R1673 += 1 };
  s6 -> s7 [0, 76] { R1775 += 1, R1731 += 1, R1673 += 1 };
  s6 -> s6 [0, 65535] { R1775 += 1, R1731 += 1, R1672 += 1, R1673 += 1 };
  s6 -> s11 [77, 77] { R1775 += 1, R1731 += 1, R1673 += 1 };
  s6 -> s7 [79, 65535] { R1775 += 1, R1731 += 1, R1673 += 1 };
  s7 -> s7 [0, 76] { R1775 += 1, R1731 += 1, R1673 += 1 };
  s7 -> s7 [0, 65535] { R1775 += 1, R1731 += 1 };
  s7 -> s11 [77, 77] { R1775 += 1, R1731 += 1, R1673 += 1 };
  s7 -> s7 [79, 65535] { R1775 += 1, R1731 += 1, R1673 += 1 };
  s8 -> s8 [0, 72] { R1775 += 1, R1731 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R1775 += 1 };
  s8 -> s10 [73, 73] { R1775 += 1, R1731 += 1 };
  s8 -> s11 [73, 73] { R1775 += 1, R1731 += 1 };
  s8 -> s8 [74, 65535] { R1775 += 1, R1731 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R1775 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s12 [0, 65535] { R1775 += 1 };
  s11 -> s11 [0, 65535] { R1775 += 1, R1731 += 1 };
  s11 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R1775 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
synchronised {  // Automata constraining P54
automaton P54_0 {
  init s0;
  s0 -> s1 [109, 109];
  accepting s1;
};
};
constraint R2 = R1775 && R20 - R1775 = -1 && R21 = R1775 && R22 - R1775 = -1 && R23 = R1775 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R1353 + -1*R1351 - R53 = 0 && R52 + R1352 + R1350 = 0 && R1716 = 0 && R1717 = 0 && R1726 = 0 && R1727 = 0 && R1730 = 0 && R1731 = 0 && R1732 = 0 && R1733 = R1775 && R1734 = 0 && R1735 = R1775 && R1736 = 0 && R1737 = R1775 && R1738 = 0 && R1739 = R1775 && R1740 = 0 && R1741 = R1775 && R1742 = 0 && R1743 = R1775 && R1744 = 0 && R1745 = R1775 && R1746 = 0 && R1747 = R1775 && R1748 = 0 && R1749 = R1775 && R1750 = 0 && R1751 = R1775 && R1752 = 0 && R1753 = R1775 && R1754 = 0 && R1755 = R1775 && R1756 = 0 && R1757 = R1775 && R1758 = 0 && R1759 = R1775 && R1760 = 0 && R1761 = R1775 && R1762 = 0 && R1763 = R1775 && R1764 = 0 && R1765 = R1775 && R1766 = 0 && R1767 = R1775 && R1768 = 0 && R1769 = R1775 && R1770 = 0 && R1771 = R1775 && R1772 = 0 && R1773 = R1775 && R1774 = 0 && -1 < R1 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R1353 + -1*R1351 - R53 < 1 && 0 < R1775 && (R1 != 0 || R17 = 0 || (R1676 = 0 && R1677 = 0)) && (R1 != 0 || R17 = 0 || (R1678 = 0 && R1679 = 0)) && (R1 != 0 || R17 = 0 || (R1680 = 0 && R1681 = 0)) && (R1 != 0 || R17 = 0 || (R1682 = 0 && R1683 = 0)) && (R1 != 0 || R17 = 0 || (R1684 = 0 && R1685 = 0)) && (R1 != 0 || R17 = 0 || (R1686 = 0 && R1687 = 0)) && (R1 != 0 || R17 = 0 || (R1688 = 0 && R1689 = 0)) && (R1 != 0 || R17 = 0 || (R1690 = 0 && R1691 = 0)) && (R1 != 0 || R17 = 0 || (R1692 = 0 && R1693 = 0)) && (R1 != 0 || R17 = 0 || (R1694 = 0 && R1695 = 0)) && (R48 + R79 + R76 != 0 || ((R42 + R72 + R70 != 0 || R43 + R73 + R71 + -1*R1353 + -1*R1351 - R53 = 0 || R53 + R1353 + R1351 < 1) && (R42 + R72 + R70 = 0 || R53 + R1353 + R1351 < 1))) && (R48 + R79 + R76 != 0 || ((R46 + R77 + R74 != 0 || R47 + R78 + R75 + -1*R1353 + -1*R1351 - R53 = 0 || R53 + R1353 + R1351 < 1) && (R46 + R77 + R74 = 0 || R53 + R1353 + R1351 < 1))) && (R1676 != 0 || R1 = R1677 || R1 < 1) && (R1678 != 0 || R1 = R1679 || R1 < 1) && (R1680 != 0 || R1 = R1681 || R1 < 1) && (R1682 != 0 || R1 = R1683 || R1 < 1) && (R1684 != 0 || R1 = R1685 || R1 < 1) && (R1686 != 0 || R1 = R1687 || R1 < 1) && (R1688 != 0 || R1 = R1689 || R1 < 1) && (R1690 != 0 || R1 = R1691 || R1 < 1) && (R1692 != 0 || R1 = R1693 || R1 < 1) && (R1694 != 0 || R1 = R1695 || R1 < 1) && (R18 = 0 || (R1714 = 0 && R1715 = 0)) && (R18 = 0 || (R1718 = 0 && R1719 = 0)) && (R18 = 0 || (R1720 = 0 && R1721 = 0)) && (R18 = 0 || (R1722 = 0 && R1723 = 0)) && (R18 = 0 || (R1724 = 0 && R1725 = 0)) && (R18 = 0 || (R1728 = 0 && R1729 = 0)) && (R19 = 0 || (R1696 = 0 && R1697 = 0)) && (R19 = 0 || (R1698 = 0 && R1699 = 0)) && (R19 = 0 || (R1700 = 0 && R1701 = 0)) && (R19 = 0 || (R1702 = 0 && R1703 = 0)) && (R19 = 0 || (R1704 = 0 && R1705 = 0)) && (R19 = 0 || (R1706 = 0 && R1707 = 0)) && (R19 = 0 || (R1708 = 0 && R1709 = 0)) && (R19 = 0 || (R1710 = 0 && R1711 = 0)) && (R19 = 0 || (R1712 = 0 && R1713 = 0)) && (R48 + R79 + R76 = 0 || (R42 + R72 + R70 = 0 && R43 + R73 + R71 + -1*R1353 + -1*R1351 - R53 = 0)) && (R48 + R79 + R76 = 0 || (R46 + R77 + R74 = 0 && R47 + R78 + R75 + -1*R1353 + -1*R1351 - R53 = 0)) && (R58 + R1359 + R1356 = 0 || (R56 + R1357 + R1354 = 0 && R57 + R1358 + R1355 = 0)) && (R58 + R1359 + R1356 = 0 || (R62 + R1674 + R1672 = 0 && R63 + R1675 + R1673 = 0)) && (R1676 = 0 || R1 < 1) && (R1678 = 0 || R1 < 1) && (R1680 = 0 || R1 < 1) && (R1682 = 0 || R1 < 1) && (R1684 = 0 || R1 < 1) && (R1686 = 0 || R1 < 1) && (R1688 = 0 || R1 < 1) && (R1690 = 0 || R1 < 1) && (R1692 = 0 || R1 < 1) && (R1694 = 0 || R1 < 1);
// End of Parikh automata intersection problem
