// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R12, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R4, R40, R42, R43, R46, R47, R48, R5160, R5161, R5162, R5163, R5164, R5165, R5166, R5167, R5168, R5169, R5170, R5171, R5172, R5173, R5174, R5175, R5176, R5177, R5178, R5179, R5180, R5181, R5182, R5183, R5184, R5185, R5186, R5187, R5188, R5189, R5190, R5191, R5192, R5193, R5194, R5195, R5196, R5197, R5198, R5199, R52, R5200, R5201, R5202, R5203, R5204, R5205, R5206, R5207, R5208, R5209, R5210, R5211, R5212, R5213, R5214, R5215, R5216, R5217, R5218, R5219, R5220, R5221, R5222, R5223, R5224, R5225, R5226, R5227, R5228, R5229, R5230, R5231, R5232, R5233, R5234, R5235, R5236, R5237, R5238, R5239, R5240, R5241, R5242, R5243, R5244, R5245, R5246, R5247, R5248, R5249, R5250, R5251, R5252, R5253, R5254, R5255, R5256, R5257, R5258, R5259, R5260, R5261, R5262, R5263, R5264, R5265, R5266, R5267, R5268, R5269, R5270, R5271, R5272, R5273, R5274, R5275, R5276, R5277, R5278, R5279, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R70, R71, R72, R73, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 72];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [73, 73];
  s0 -> s1 [74, 65535];
  s1 -> s1 [0, 72];
  s1 -> s2 [73, 73];
  s1 -> s1 [74, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s1 [0, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R25 += 1 };
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R5201 += 1, R19 += 1 };
  s0 -> s0 [0, 65535] { R5200 += 1, R5201 += 1 };
  s1 -> s1 [0, 65535] { R5201 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 72] { R5203 += 1 };
  s0 -> s0 [0, 65535] { R5202 += 1, R5203 += 1 };
  s0 -> s2 [73, 73] { R5203 += 1 };
  s0 -> s3 [73, 73] { R5203 += 1 };
  s0 -> s1 [78, 65535] { R5203 += 1 };
  s1 -> s1 [0, 72] { R5203 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R5203 += 1 };
  s1 -> s3 [73, 73] { R5203 += 1 };
  s1 -> s1 [78, 65535] { R5203 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 73] { R5203 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [78, 65535] { R5203 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 72] { R5205 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R5204 += 1, R5205 += 1 };
  s0 -> s2 [73, 73] { R5205 += 1, R38 += 1 };
  s0 -> s3 [73, 73] { R5205 += 1, R38 += 1 };
  s0 -> s1 [74, 65535] { R5205 += 1, R38 += 1 };
  s1 -> s1 [0, 72] { R5205 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R5205 += 1, R38 += 1 };
  s1 -> s3 [73, 73] { R5205 += 1, R38 += 1 };
  s1 -> s1 [74, 65535] { R5205 += 1, R38 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R5205 += 1, R38 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 72] { R5207 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R5206 += 1, R5207 += 1 };
  s0 -> s2 [73, 73] { R5207 += 1, R40 += 1 };
  s0 -> s3 [73, 73] { R5207 += 1, R40 += 1 };
  s0 -> s1 [74, 65535] { R5207 += 1, R40 += 1 };
  s1 -> s1 [0, 72] { R5207 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R5207 += 1, R40 += 1 };
  s1 -> s3 [73, 73] { R5207 += 1, R40 += 1 };
  s1 -> s1 [74, 65535] { R5207 += 1, R40 += 1 };
  s2 -> s2 [0, 65535] { R5207 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 72] { R5209 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R5208 += 1, R5209 += 1 };
  s0 -> s2 [73, 73] { R5209 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [73, 73] { R5209 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [74, 65535] { R5209 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 72] { R5209 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R5209 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [73, 73] { R5209 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [74, 65535] { R5209 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535] { R5209 += 1, R42 += 1, R43 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 72] { R5211 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R5210 += 1, R5211 += 1 };
  s0 -> s2 [73, 73] { R5211 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [73, 73] { R5211 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [74, 65535] { R5211 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 72] { R5211 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R5211 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [73, 73] { R5211 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [74, 65535] { R5211 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R5211 += 1, R46 += 1, R47 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 72] { R5213 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R5212 += 1, R5213 += 1 };
  s0 -> s2 [73, 73] { R5213 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [73, 73] { R5213 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [74, 65535] { R5213 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 72] { R5213 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R5213 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [73, 73] { R5213 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [74, 65535] { R5213 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R5213 += 1, R52 += 1, R53 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 72] { R5215 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R5214 += 1, R5215 += 1 };
  s0 -> s2 [73, 73] { R5215 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [73, 73] { R5215 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [74, 65535] { R5215 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 72] { R5215 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R5215 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [73, 73] { R5215 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [74, 65535] { R5215 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535] { R5215 += 1, R56 += 1, R57 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 72] { R5217 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R5216 += 1, R5217 += 1 };
  s0 -> s2 [73, 73] { R5217 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [73, 73] { R5217 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [74, 65535] { R5217 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 72] { R5217 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R5217 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [73, 73] { R5217 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [74, 65535] { R5217 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R5217 += 1, R62 += 1, R63 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 72] { R5237 += 1 };
  s0 -> s0 [0, 65535] { R5236 += 1, R5237 += 1 };
  s0 -> s2 [73, 73] { R5237 += 1 };
  s0 -> s1 [74, 65535] { R5237 += 1 };
  s1 -> s1 [0, 72] { R5237 += 1 };
  s1 -> s2 [73, 73] { R5237 += 1 };
  s1 -> s1 [74, 65535] { R5237 += 1 };
  s2 -> s2 [0, 65535] { R5237 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R5238 += 1, R5239 += 1 };
  s0 -> s1 [0, 65535] { R5239 += 1, R1 += 1 };
  s1 -> s1 [0, 65535] { R5239 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 72] { R5241 += 1 };
  s0 -> s2 [0, 65535] { R5241 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R5240 += 1, R5241 += 1 };
  s0 -> s3 [73, 73] { R5241 += 1 };
  s0 -> s1 [74, 65535] { R5241 += 1 };
  s1 -> s1 [0, 72] { R5241 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [73, 73] { R5241 += 1 };
  s1 -> s1 [74, 65535] { R5241 += 1 };
  s2 -> s1 [0, 72] { R5241 += 1 };
  s2 -> s2 [0, 65535] { R5241 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [73, 73] { R5241 += 1 };
  s2 -> s1 [74, 65535] { R5241 += 1 };
  s3 -> s3 [0, 65535] { R5241 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 72] { R5243 += 1, R5181 += 1 };
  s0 -> s2 [0, 65535] { R5243 += 1, R5180 += 1, R5181 += 1 };
  s0 -> s0 [0, 65535] { R5242 += 1, R5243 += 1 };
  s0 -> s1 [74, 65535] { R5243 += 1, R5181 += 1 };
  s1 -> s1 [0, 72] { R5243 += 1, R5181 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R5243 += 1 };
  s1 -> s1 [74, 65535] { R5243 += 1, R5181 += 1 };
  s2 -> s1 [0, 72] { R5243 += 1, R5181 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R5243 += 1, R5180 += 1, R5181 += 1 };
  s2 -> s1 [74, 65535] { R5243 += 1, R5181 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s0 [0, 65535] { R5244 += 1, R5245 += 1 };
  s0 -> s1 [0, 65535] { R5245 += 1, R5182 += 1, R5183 += 1 };
  s0 -> s2 [0, 65535] { R5245 += 1, R5183 += 1, R17 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R5245 += 1, R5182 += 1, R5183 += 1 };
  s1 -> s2 [0, 65535] { R5245 += 1, R5183 += 1, R17 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R5245 += 1 };
  s2 -> s2 [0, 65535] { R5245 += 1, R5183 += 1, R17 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R5245 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 73] { R5247 += 1, R5185 += 1 };
  s0 -> s0 [0, 65535] { R5246 += 1, R5247 += 1 };
  s0 -> s2 [0, 65535] { R5247 += 1, R5184 += 1, R5185 += 1 };
  s0 -> s1 [77, 65535] { R5247 += 1, R5185 += 1 };
  s1 -> s1 [0, 73] { R5247 += 1, R5185 += 1 };
  s1 -> s1 [0, 65535] { R5247 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [77, 65535] { R5247 += 1, R5185 += 1 };
  s2 -> s1 [0, 73] { R5247 += 1, R5185 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R5247 += 1, R5184 += 1, R5185 += 1 };
  s2 -> s1 [77, 65535] { R5247 += 1, R5185 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s0 [0, 65535] { R5248 += 1, R5249 += 1 };
  s0 -> s1 [0, 65535] { R5249 += 1, R5187 += 1, R67 += 1 };
  s0 -> s2 [0, 65535] { R5249 += 1, R5186 += 1, R5187 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R5249 += 1 };
  s1 -> s1 [0, 65535] { R5249 += 1, R5187 += 1, R67 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R5249 += 1, R5187 += 1, R67 += 1 };
  s2 -> s2 [0, 65535] { R5249 += 1, R5186 += 1, R5187 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R5249 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 76] { R5251 += 1, R5189 += 1 };
  s0 -> s2 [0, 65535] { R5251 += 1, R5189 += 1, R69 += 1 };
  s0 -> s0 [0, 65535] { R5250 += 1, R5251 += 1 };
  s0 -> s3 [0, 65535] { R5251 += 1, R5188 += 1, R5189 += 1 };
  s0 -> s1 [78, 65535] { R5251 += 1, R5189 += 1 };
  s1 -> s1 [0, 76] { R5251 += 1, R5189 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R5251 += 1 };
  s1 -> s1 [78, 65535] { R5251 += 1, R5189 += 1 };
  s2 -> s1 [0, 76] { R5251 += 1, R5189 += 1 };
  s2 -> s2 [0, 65535] { R5251 += 1, R5189 += 1, R69 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R5251 += 1 };
  s2 -> s1 [78, 65535] { R5251 += 1, R5189 += 1 };
  s3 -> s1 [0, 76] { R5251 += 1, R5189 += 1 };
  s3 -> s2 [0, 65535] { R5251 += 1, R5189 += 1, R69 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R5251 += 1, R5188 += 1, R5189 += 1 };
  s3 -> s1 [78, 65535] { R5251 += 1, R5189 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R5251 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 76] { R5253 += 1, R5191 += 1, R73 += 1 };
  s0 -> s2 [0, 65535] { R5253 += 1, R5191 += 1, R72 += 1, R73 += 1 };
  s0 -> s3 [0, 65535] { R5253 += 1, R5190 += 1, R5191 += 1 };
  s0 -> s0 [0, 65535] { R5252 += 1, R5253 += 1 };
  s0 -> s1 [78, 65535] { R5253 += 1, R5191 += 1, R73 += 1 };
  s1 -> s1 [0, 76] { R5253 += 1, R5191 += 1, R73 += 1 };
  s1 -> s5 [0, 65535] { R5253 += 1 };
  s1 -> s1 [0, 65535] { R5253 += 1, R5191 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [78, 65535] { R5253 += 1, R5191 += 1, R73 += 1 };
  s2 -> s1 [0, 76] { R5253 += 1, R5191 += 1, R73 += 1 };
  s2 -> s5 [0, 65535] { R5253 += 1 };
  s2 -> s2 [0, 65535] { R5253 += 1, R5191 += 1, R72 += 1, R73 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [78, 65535] { R5253 += 1, R5191 += 1, R73 += 1 };
  s3 -> s1 [0, 76] { R5253 += 1, R5191 += 1, R73 += 1 };
  s3 -> s2 [0, 65535] { R5253 += 1, R5191 += 1, R72 += 1, R73 += 1 };
  s3 -> s3 [0, 65535] { R5253 += 1, R5190 += 1, R5191 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [78, 65535] { R5253 += 1, R5191 += 1, R73 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R5253 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R5255 += 1, R5192 += 1, R5193 += 1 };
  s0 -> s2 [0, 65535] { R5255 += 1, R5193 += 1, R5164 += 1, R5165 += 1 };
  s0 -> s3 [0, 65535] { R5255 += 1, R5193 += 1 };
  s0 -> s0 [0, 65535] { R5254 += 1, R5255 += 1 };
  s1 -> s1 [0, 65535] { R5255 += 1, R5192 += 1, R5193 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s2 [0, 65535] { R5255 += 1, R5193 += 1, R5164 += 1, R5165 += 1 };
  s1 -> s3 [0, 65535] { R5255 += 1, R5193 += 1 };
  s2 -> s4 [0, 65535] { R5255 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R5255 += 1, R5193 += 1, R5164 += 1, R5165 += 1 };
  s2 -> s3 [0, 65535] { R5255 += 1, R5193 += 1 };
  s3 -> s4 [0, 65535] { R5255 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R5255 += 1, R5193 += 1 };
  s4 -> s4 [0, 65535] { R5255 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 65535] { R5257 += 1, R5195 += 1 };
  s0 -> s2 [0, 65535] { R5257 += 1, R5194 += 1, R5195 += 1 };
  s0 -> s3 [0, 65535] { R5257 += 1, R5195 += 1, R5169 += 1 };
  s0 -> s0 [0, 65535] { R5256 += 1, R5257 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R5257 += 1 };
  s1 -> s1 [0, 65535] { R5257 += 1, R5195 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R5257 += 1, R5195 += 1 };
  s2 -> s2 [0, 65535] { R5257 += 1, R5194 += 1, R5195 += 1 };
  s2 -> s3 [0, 65535] { R5257 += 1, R5195 += 1, R5169 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R5257 += 1 };
  s3 -> s1 [0, 65535] { R5257 += 1, R5195 += 1 };
  s3 -> s3 [0, 65535] { R5257 += 1, R5195 += 1, R5169 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R5257 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R5259 += 1, R5197 += 1, R5173 += 1, R5174 += 1 };
  s0 -> s2 [0, 65535] { R5259 += 1, R5197 += 1, R5174 += 1, R5175 += 1 };
  s0 -> s0 [0, 65535] { R5258 += 1, R5259 += 1 };
  s0 -> s3 [0, 65535] { R5259 += 1, R5196 += 1, R5197 += 1 };
  s1 -> s1 [0, 65535] { R5259 += 1, R5197 += 1, R5173 += 1, R5174 += 1 };
  s1 -> s2 [0, 65535] { R5259 += 1, R5197 += 1, R5174 += 1, R5175 += 1 };
  s1 -> s5 [0, 65535] { R5259 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R5259 += 1, R5197 += 1, R5174 += 1, R5175 += 1 };
  s2 -> s5 [0, 65535] { R5259 += 1 };
  s2 -> s6 [0, 65535] { R5259 += 1, R5197 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R5259 += 1, R5197 += 1, R5173 += 1, R5174 += 1 };
  s3 -> s2 [0, 65535] { R5259 += 1, R5197 += 1, R5174 += 1, R5175 += 1 };
  s3 -> s3 [0, 65535] { R5259 += 1, R5196 += 1, R5197 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R5259 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R5259 += 1 };
  s6 -> s6 [0, 65535] { R5259 += 1, R5197 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 76] { R5261 += 1, R5199 += 1, R5179 += 1 };
  s0 -> s0 [0, 65535] { R5260 += 1, R5261 += 1 };
  s0 -> s2 [0, 65535] { R5261 += 1, R5199 += 1, R5178 += 1, R5179 += 1 };
  s0 -> s3 [0, 65535] { R5261 += 1, R5198 += 1, R5199 += 1 };
  s0 -> s4 [77, 77] { R5261 += 1, R5199 += 1, R5179 += 1 };
  s0 -> s5 [77, 77] { R5261 += 1, R5199 += 1, R5179 += 1 };
  s0 -> s1 [79, 65535] { R5261 += 1, R5199 += 1, R5179 += 1 };
  s1 -> s1 [0, 76] { R5261 += 1, R5199 += 1, R5179 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R5261 += 1, R5199 += 1 };
  s1 -> s7 [0, 65535] { R5261 += 1 };
  s1 -> s4 [77, 77] { R5261 += 1, R5199 += 1, R5179 += 1 };
  s1 -> s5 [77, 77] { R5261 += 1, R5199 += 1, R5179 += 1 };
  s1 -> s1 [79, 65535] { R5261 += 1, R5199 += 1, R5179 += 1 };
  s2 -> s1 [0, 76] { R5261 += 1, R5199 += 1, R5179 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R5261 += 1, R5199 += 1, R5178 += 1, R5179 += 1 };
  s2 -> s7 [0, 65535] { R5261 += 1 };
  s2 -> s4 [77, 77] { R5261 += 1, R5199 += 1, R5179 += 1 };
  s2 -> s5 [77, 77] { R5261 += 1, R5199 += 1, R5179 += 1 };
  s2 -> s1 [79, 65535] { R5261 += 1, R5199 += 1, R5179 += 1 };
  s3 -> s1 [0, 76] { R5261 += 1, R5199 += 1, R5179 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s2 [0, 65535] { R5261 += 1, R5199 += 1, R5178 += 1, R5179 += 1 };
  s3 -> s3 [0, 65535] { R5261 += 1, R5198 += 1, R5199 += 1 };
  s3 -> s4 [77, 77] { R5261 += 1, R5199 += 1, R5179 += 1 };
  s3 -> s5 [77, 77] { R5261 += 1, R5199 += 1, R5179 += 1 };
  s3 -> s1 [79, 65535] { R5261 += 1, R5199 += 1, R5179 += 1 };
  s4 -> s4 [0, 77] { R5261 += 1, R5199 += 1, R5179 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R5261 += 1, R5199 += 1 };
  s4 -> s7 [0, 65535] { R5261 += 1 };
  s4 -> s4 [79, 65535] { R5261 += 1, R5199 += 1, R5179 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R5261 += 1, R5199 += 1 };
  s5 -> s7 [0, 65535] { R5261 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R5261 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R5263 += 1, R5218 += 1, R5219 += 1 };
  s0 -> s2 [0, 65535] { R5263 += 1, R5219 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R5262 += 1, R5263 += 1 };
  s1 -> s1 [0, 65535] { R5263 += 1, R5218 += 1, R5219 += 1 };
  s1 -> s2 [0, 65535] { R5263 += 1, R5219 += 1, R18 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R5263 += 1, R5219 += 1, R18 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R5263 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R5263 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 72] { R5265 += 1, R5221 += 1 };
  s0 -> s0 [0, 65535] { R5264 += 1, R5265 += 1 };
  s0 -> s2 [0, 65535] { R5265 += 1, R5220 += 1, R5221 += 1 };
  s0 -> s3 [73, 73] { R5265 += 1, R5221 += 1 };
  s0 -> s4 [73, 73] { R5265 += 1, R5221 += 1 };
  s0 -> s5 [77, 77] { R5265 += 1, R5221 += 1 };
  s0 -> s1 [78, 65535] { R5265 += 1, R5221 += 1 };
  s1 -> s1 [0, 72] { R5265 += 1, R5221 += 1 };
  s1 -> s3 [73, 73] { R5265 += 1, R5221 += 1 };
  s1 -> s4 [73, 73] { R5265 += 1, R5221 += 1 };
  s1 -> s5 [77, 77] { R5265 += 1, R5221 += 1 };
  s1 -> s1 [78, 65535] { R5265 += 1, R5221 += 1 };
  s2 -> s1 [0, 72] { R5265 += 1, R5221 += 1 };
  s2 -> s2 [0, 65535] { R5265 += 1, R5220 += 1, R5221 += 1 };
  s2 -> s3 [73, 73] { R5265 += 1, R5221 += 1 };
  s2 -> s4 [73, 73] { R5265 += 1, R5221 += 1 };
  s2 -> s5 [77, 77] { R5265 += 1, R5221 += 1 };
  s2 -> s1 [78, 65535] { R5265 += 1, R5221 += 1 };
  s4 -> s4 [0, 73] { R5265 += 1, R5221 += 1 };
  s4 -> s7 [77, 77] { R5265 += 1, R5221 += 1 };
  s4 -> s4 [78, 65535] { R5265 += 1, R5221 += 1 };
  s5 -> s5 [0, 72] { R5265 += 1, R5221 += 1 };
  s5 -> s5 [0, 65535] { R5265 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [73, 73] { R5265 += 1, R5221 += 1 };
  s5 -> s8 [73, 73] { R5265 += 1, R5221 += 1 };
  s5 -> s5 [77, 65535] { R5265 += 1, R5221 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 73] { R5265 += 1, R5221 += 1 };
  s7 -> s7 [0, 65535] { R5265 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [77, 65535] { R5265 += 1, R5221 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R5265 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 72] { R5267 += 1, R5223 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R5266 += 1, R5267 += 1 };
  s0 -> s2 [0, 65535] { R5267 += 1, R5222 += 1, R5223 += 1 };
  s0 -> s3 [73, 73] { R5267 += 1, R5223 += 1, R66 += 1 };
  s0 -> s4 [73, 73] { R5267 += 1, R5223 += 1, R66 += 1 };
  s0 -> s1 [74, 65535] { R5267 += 1, R5223 += 1, R66 += 1 };
  s1 -> s1 [0, 72] { R5267 += 1, R5223 += 1, R66 += 1 };
  s1 -> s1 [0, 65535] { R5267 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R5267 += 1, R5223 += 1, R66 += 1 };
  s1 -> s4 [73, 73] { R5267 += 1, R5223 += 1, R66 += 1 };
  s1 -> s1 [74, 65535] { R5267 += 1, R5223 += 1, R66 += 1 };
  s2 -> s1 [0, 72] { R5267 += 1, R5223 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R5267 += 1, R5222 += 1, R5223 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R5267 += 1, R5223 += 1, R66 += 1 };
  s2 -> s4 [73, 73] { R5267 += 1, R5223 += 1, R66 += 1 };
  s2 -> s1 [74, 65535] { R5267 += 1, R5223 += 1, R66 += 1 };
  s3 -> s6 [0, 65535] { R5267 += 1 };
  s3 -> s3 [0, 65535] { R5267 += 1, R5223 += 1, R66 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R5267 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R5267 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 72] { R5269 += 1, R5225 += 1, R68 += 1 };
  s0 -> s0 [0, 65535] { R5268 += 1, R5269 += 1 };
  s0 -> s2 [0, 65535] { R5269 += 1, R5224 += 1, R5225 += 1 };
  s0 -> s3 [73, 73] { R5269 += 1, R5225 += 1, R68 += 1 };
  s0 -> s4 [73, 73] { R5269 += 1, R5225 += 1, R68 += 1 };
  s0 -> s1 [74, 65535] { R5269 += 1, R5225 += 1, R68 += 1 };
  s1 -> s1 [0, 72] { R5269 += 1, R5225 += 1, R68 += 1 };
  s1 -> s1 [0, 65535] { R5269 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R5269 += 1, R5225 += 1, R68 += 1 };
  s1 -> s4 [73, 73] { R5269 += 1, R5225 += 1, R68 += 1 };
  s1 -> s1 [74, 65535] { R5269 += 1, R5225 += 1, R68 += 1 };
  s2 -> s1 [0, 72] { R5269 += 1, R5225 += 1, R68 += 1 };
  s2 -> s2 [0, 65535] { R5269 += 1, R5224 += 1, R5225 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R5269 += 1, R5225 += 1, R68 += 1 };
  s2 -> s4 [73, 73] { R5269 += 1, R5225 += 1, R68 += 1 };
  s2 -> s1 [74, 65535] { R5269 += 1, R5225 += 1, R68 += 1 };
  s3 -> s3 [0, 65535] { R5269 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R5269 += 1, R5225 += 1, R68 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R5269 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R5269 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 72] { R5271 += 1, R5227 += 1, R70 += 1, R71 += 1 };
  s0 -> s2 [0, 65535] { R5271 += 1, R5226 += 1, R5227 += 1 };
  s0 -> s0 [0, 65535] { R5270 += 1, R5271 += 1 };
  s0 -> s3 [73, 73] { R5271 += 1, R5227 += 1, R70 += 1, R71 += 1 };
  s0 -> s4 [73, 73] { R5271 += 1, R5227 += 1, R70 += 1, R71 += 1 };
  s0 -> s1 [74, 65535] { R5271 += 1, R5227 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 72] { R5271 += 1, R5227 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 65535] { R5271 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R5271 += 1, R5227 += 1, R70 += 1, R71 += 1 };
  s1 -> s4 [73, 73] { R5271 += 1, R5227 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [74, 65535] { R5271 += 1, R5227 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [0, 72] { R5271 += 1, R5227 += 1, R70 += 1, R71 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R5271 += 1, R5226 += 1, R5227 += 1 };
  s2 -> s3 [73, 73] { R5271 += 1, R5227 += 1, R70 += 1, R71 += 1 };
  s2 -> s4 [73, 73] { R5271 += 1, R5227 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [74, 65535] { R5271 += 1, R5227 += 1, R70 += 1, R71 += 1 };
  s3 -> s3 [0, 65535] { R5271 += 1, R5227 += 1, R70 += 1, R71 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R5271 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R5271 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R5271 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 72] { R5273 += 1, R5229 += 1, R5161 += 1, R5162 += 1 };
  s0 -> s2 [0, 72] { R5273 += 1, R5229 += 1, R5160 += 1, R5161 += 1 };
  s0 -> s3 [0, 65535] { R5273 += 1, R5228 += 1, R5229 += 1 };
  s0 -> s0 [0, 65535] { R5272 += 1, R5273 += 1 };
  s0 -> s4 [73, 73] { R5273 += 1, R5229 += 1, R5160 += 1, R5161 += 1 };
  s0 -> s5 [73, 73] { R5273 += 1, R5229 += 1, R5161 += 1, R5162 += 1 };
  s0 -> s6 [73, 73] { R5273 += 1, R5229 += 1, R5160 += 1, R5161 += 1 };
  s0 -> s7 [73, 73] { R5273 += 1, R5229 += 1, R5161 += 1, R5162 += 1 };
  s0 -> s1 [74, 65535] { R5273 += 1, R5229 += 1, R5161 += 1, R5162 += 1 };
  s0 -> s2 [74, 65535] { R5273 += 1, R5229 += 1, R5160 += 1, R5161 += 1 };
  s1 -> s1 [0, 72] { R5273 += 1, R5229 += 1, R5161 += 1, R5162 += 1 };
  s1 -> s1 [0, 65535] { R5273 += 1 };
  s1 -> s9 [0, 65535];
  s1 -> s5 [73, 73] { R5273 += 1, R5229 += 1, R5161 += 1, R5162 += 1 };
  s1 -> s7 [73, 73] { R5273 += 1, R5229 += 1, R5161 += 1, R5162 += 1 };
  s1 -> s1 [74, 65535] { R5273 += 1, R5229 += 1, R5161 += 1, R5162 += 1 };
  s2 -> s1 [0, 72] { R5273 += 1, R5229 += 1, R5161 += 1, R5162 += 1 };
  s2 -> s2 [0, 72] { R5273 += 1, R5229 += 1, R5160 += 1, R5161 += 1 };
  s2 -> s4 [73, 73] { R5273 += 1, R5229 += 1, R5160 += 1, R5161 += 1 };
  s2 -> s5 [73, 73] { R5273 += 1, R5229 += 1, R5161 += 1, R5162 += 1 };
  s2 -> s6 [73, 73] { R5273 += 1, R5229 += 1, R5160 += 1, R5161 += 1 };
  s2 -> s7 [73, 73] { R5273 += 1, R5229 += 1, R5161 += 1, R5162 += 1 };
  s2 -> s1 [74, 65535] { R5273 += 1, R5229 += 1, R5161 += 1, R5162 += 1 };
  s2 -> s2 [74, 65535] { R5273 += 1, R5229 += 1, R5160 += 1, R5161 += 1 };
  s3 -> s1 [0, 72] { R5273 += 1, R5229 += 1, R5161 += 1, R5162 += 1 };
  s3 -> s2 [0, 72] { R5273 += 1, R5229 += 1, R5160 += 1, R5161 += 1 };
  s3 -> s3 [0, 65535] { R5273 += 1, R5228 += 1, R5229 += 1 };
  s3 -> s4 [73, 73] { R5273 += 1, R5229 += 1, R5160 += 1, R5161 += 1 };
  s3 -> s5 [73, 73] { R5273 += 1, R5229 += 1, R5161 += 1, R5162 += 1 };
  s3 -> s6 [73, 73] { R5273 += 1, R5229 += 1, R5160 += 1, R5161 += 1 };
  s3 -> s7 [73, 73] { R5273 += 1, R5229 += 1, R5161 += 1, R5162 += 1 };
  s3 -> s1 [74, 65535] { R5273 += 1, R5229 += 1, R5161 += 1, R5162 += 1 };
  s3 -> s2 [74, 65535] { R5273 += 1, R5229 += 1, R5160 += 1, R5161 += 1 };
  s5 -> s5 [0, 65535] { R5273 += 1 };
  s5 -> s9 [0, 65535];
  s6 -> s6 [0, 65535] { R5273 += 1, R5229 += 1, R5160 += 1, R5161 += 1 };
  s6 -> s7 [0, 65535] { R5273 += 1, R5229 += 1, R5161 += 1, R5162 += 1 };
  s7 -> s8 [0, 65535] { R5273 += 1 };
  s7 -> s7 [0, 65535] { R5273 += 1, R5229 += 1, R5161 += 1, R5162 += 1 };
  s7 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R5273 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s8, s5, s9, s1, s7;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 72] { R5275 += 1, R5231 += 1, R5167 += 1 };
  s0 -> s2 [0, 72] { R5275 += 1, R5231 += 1, R5166 += 1, R5167 += 1 };
  s0 -> s0 [0, 65535] { R5274 += 1, R5275 += 1 };
  s0 -> s3 [0, 65535] { R5275 += 1, R5230 += 1, R5231 += 1 };
  s0 -> s4 [73, 73] { R5275 += 1, R5231 += 1, R5167 += 1 };
  s0 -> s5 [73, 73] { R5275 += 1, R5231 += 1, R5166 += 1, R5167 += 1 };
  s0 -> s6 [73, 73] { R5275 += 1, R5231 += 1, R5166 += 1, R5167 += 1 };
  s0 -> s7 [73, 73] { R5275 += 1, R5231 += 1, R5167 += 1 };
  s0 -> s1 [74, 77] { R5275 += 1, R5231 += 1, R5167 += 1 };
  s0 -> s2 [74, 65535] { R5275 += 1, R5231 += 1, R5166 += 1, R5167 += 1 };
  s0 -> s8 [78, 78] { R5275 += 1, R5231 += 1, R5167 += 1 };
  s0 -> s1 [79, 65535] { R5275 += 1, R5231 += 1, R5167 += 1 };
  s1 -> s1 [0, 72] { R5275 += 1, R5231 += 1, R5167 += 1 };
  s1 -> s4 [73, 73] { R5275 += 1, R5231 += 1, R5167 += 1 };
  s1 -> s7 [73, 73] { R5275 += 1, R5231 += 1, R5167 += 1 };
  s1 -> s1 [74, 77] { R5275 += 1, R5231 += 1, R5167 += 1 };
  s1 -> s8 [78, 78] { R5275 += 1, R5231 += 1, R5167 += 1 };
  s1 -> s1 [79, 65535] { R5275 += 1, R5231 += 1, R5167 += 1 };
  s2 -> s1 [0, 72] { R5275 += 1, R5231 += 1, R5167 += 1 };
  s2 -> s2 [0, 72] { R5275 += 1, R5231 += 1, R5166 += 1, R5167 += 1 };
  s2 -> s4 [73, 73] { R5275 += 1, R5231 += 1, R5167 += 1 };
  s2 -> s5 [73, 73] { R5275 += 1, R5231 += 1, R5166 += 1, R5167 += 1 };
  s2 -> s6 [73, 73] { R5275 += 1, R5231 += 1, R5166 += 1, R5167 += 1 };
  s2 -> s7 [73, 73] { R5275 += 1, R5231 += 1, R5167 += 1 };
  s2 -> s1 [74, 77] { R5275 += 1, R5231 += 1, R5167 += 1 };
  s2 -> s2 [74, 65535] { R5275 += 1, R5231 += 1, R5166 += 1, R5167 += 1 };
  s2 -> s8 [78, 78] { R5275 += 1, R5231 += 1, R5167 += 1 };
  s2 -> s1 [79, 65535] { R5275 += 1, R5231 += 1, R5167 += 1 };
  s3 -> s1 [0, 72] { R5275 += 1, R5231 += 1, R5167 += 1 };
  s3 -> s2 [0, 72] { R5275 += 1, R5231 += 1, R5166 += 1, R5167 += 1 };
  s3 -> s3 [0, 65535] { R5275 += 1, R5230 += 1, R5231 += 1 };
  s3 -> s4 [73, 73] { R5275 += 1, R5231 += 1, R5167 += 1 };
  s3 -> s5 [73, 73] { R5275 += 1, R5231 += 1, R5166 += 1, R5167 += 1 };
  s3 -> s6 [73, 73] { R5275 += 1, R5231 += 1, R5166 += 1, R5167 += 1 };
  s3 -> s7 [73, 73] { R5275 += 1, R5231 += 1, R5167 += 1 };
  s3 -> s1 [74, 77] { R5275 += 1, R5231 += 1, R5167 += 1 };
  s3 -> s2 [74, 65535] { R5275 += 1, R5231 += 1, R5166 += 1, R5167 += 1 };
  s3 -> s8 [78, 78] { R5275 += 1, R5231 += 1, R5167 += 1 };
  s3 -> s1 [79, 65535] { R5275 += 1, R5231 += 1, R5167 += 1 };
  s4 -> s4 [0, 77] { R5275 += 1, R5231 += 1, R5167 += 1 };
  s4 -> s11 [78, 78] { R5275 += 1, R5231 += 1, R5167 += 1 };
  s4 -> s4 [79, 65535] { R5275 += 1, R5231 += 1, R5167 += 1 };
  s6 -> s4 [0, 77] { R5275 += 1, R5231 += 1, R5167 += 1 };
  s6 -> s6 [0, 65535] { R5275 += 1, R5231 += 1, R5166 += 1, R5167 += 1 };
  s6 -> s11 [78, 78] { R5275 += 1, R5231 += 1, R5167 += 1 };
  s6 -> s4 [79, 65535] { R5275 += 1, R5231 += 1, R5167 += 1 };
  s8 -> s8 [0, 72] { R5275 += 1, R5231 += 1, R5167 += 1 };
  s8 -> s8 [0, 65535] { R5275 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [73, 73] { R5275 += 1, R5231 += 1, R5167 += 1 };
  s8 -> s11 [73, 73] { R5275 += 1, R5231 += 1, R5167 += 1 };
  s8 -> s8 [74, 65535] { R5275 += 1, R5231 += 1, R5167 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R5275 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s12 [0, 65535] { R5275 += 1 };
  s11 -> s11 [0, 65535] { R5275 += 1, R5231 += 1, R5167 += 1 };
  s11 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R5275 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 72] { R5277 += 1, R5233 += 1, R5170 += 1, R5171 += 1 };
  s0 -> s0 [0, 65535] { R5276 += 1, R5277 += 1 };
  s0 -> s2 [0, 65535] { R5277 += 1, R5232 += 1, R5233 += 1 };
  s0 -> s3 [73, 73] { R5277 += 1, R5233 += 1, R5170 += 1, R5171 += 1 };
  s0 -> s4 [73, 73] { R5277 += 1, R5233 += 1, R5170 += 1, R5171 += 1 };
  s0 -> s1 [74, 65535] { R5277 += 1, R5233 += 1, R5170 += 1, R5171 += 1 };
  s1 -> s1 [0, 72] { R5277 += 1, R5233 += 1, R5170 += 1, R5171 += 1 };
  s1 -> s1 [0, 65535] { R5277 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [73, 73] { R5277 += 1, R5233 += 1, R5170 += 1, R5171 += 1 };
  s1 -> s4 [73, 73] { R5277 += 1, R5233 += 1, R5170 += 1, R5171 += 1 };
  s1 -> s1 [74, 65535] { R5277 += 1, R5233 += 1, R5170 += 1, R5171 += 1 };
  s2 -> s1 [0, 72] { R5277 += 1, R5233 += 1, R5170 += 1, R5171 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R5277 += 1, R5232 += 1, R5233 += 1 };
  s2 -> s3 [73, 73] { R5277 += 1, R5233 += 1, R5170 += 1, R5171 += 1 };
  s2 -> s4 [73, 73] { R5277 += 1, R5233 += 1, R5170 += 1, R5171 += 1 };
  s2 -> s1 [74, 65535] { R5277 += 1, R5233 += 1, R5170 += 1, R5171 += 1 };
  s3 -> s3 [0, 65535] { R5277 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R5277 += 1 };
  s4 -> s4 [0, 65535] { R5277 += 1, R5233 += 1, R5170 += 1, R5171 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R5277 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 72] { R5279 += 1, R5235 += 1, R5176 += 1, R5177 += 1 };
  s0 -> s0 [0, 65535] { R5278 += 1, R5279 += 1 };
  s0 -> s2 [0, 65535] { R5279 += 1, R5234 += 1, R5235 += 1 };
  s0 -> s3 [73, 73] { R5279 += 1, R5235 += 1, R5176 += 1, R5177 += 1 };
  s0 -> s4 [73, 73] { R5279 += 1, R5235 += 1, R5176 += 1, R5177 += 1 };
  s0 -> s1 [74, 65535] { R5279 += 1, R5235 += 1, R5176 += 1, R5177 += 1 };
  s1 -> s1 [0, 72] { R5279 += 1, R5235 += 1, R5176 += 1, R5177 += 1 };
  s1 -> s1 [0, 65535] { R5279 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R5279 += 1, R5235 += 1, R5176 += 1, R5177 += 1 };
  s1 -> s4 [73, 73] { R5279 += 1, R5235 += 1, R5176 += 1, R5177 += 1 };
  s1 -> s1 [74, 65535] { R5279 += 1, R5235 += 1, R5176 += 1, R5177 += 1 };
  s2 -> s1 [0, 72] { R5279 += 1, R5235 += 1, R5176 += 1, R5177 += 1 };
  s2 -> s2 [0, 65535] { R5279 += 1, R5234 += 1, R5235 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R5279 += 1, R5235 += 1, R5176 += 1, R5177 += 1 };
  s2 -> s4 [73, 73] { R5279 += 1, R5235 += 1, R5176 += 1, R5177 += 1 };
  s2 -> s1 [74, 65535] { R5279 += 1, R5235 += 1, R5176 += 1, R5177 += 1 };
  s3 -> s3 [0, 65535] { R5279 += 1, R5235 += 1, R5176 += 1, R5177 += 1 };
  s3 -> s6 [0, 65535] { R5279 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R5279 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R5279 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
synchronised {  // Automata constraining P54
automaton P54_0 {
  init s0;
  s0 -> s1 [109, 109];
  accepting s1;
};
};
constraint R2 = R5279 && R20 - R5279 = -1 && R21 = R5279 && R22 - R5279 = -1 && R23 = R5279 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R5169 + -1*R5167 - R53 = 0 && R52 + R5168 + R5166 = 0 && R5220 = 0 && R5221 = 0 && R5228 = 0 && R5229 = 0 && R5230 = 0 && R5231 = 0 && R5236 = 0 && R5237 = R5279 && R5238 = 0 && R5239 = R5279 && R5240 = 0 && R5241 = R5279 && R5242 = 0 && R5243 = R5279 && R5244 = 0 && R5245 = R5279 && R5246 = 0 && R5247 = R5279 && R5248 = 0 && R5249 = R5279 && R5250 = 0 && R5251 = R5279 && R5252 = 0 && R5253 = R5279 && R5254 = 0 && R5255 = R5279 && R5256 = 0 && R5257 = R5279 && R5258 = 0 && R5259 = R5279 && R5260 = 0 && R5261 = R5279 && R5262 = 0 && R5263 = R5279 && R5264 = 0 && R5265 = R5279 && R5266 = 0 && R5267 = R5279 && R5268 = 0 && R5269 = R5279 && R5270 = 0 && R5271 = R5279 && R5272 = 0 && R5273 = R5279 && R5274 = 0 && R5275 = R5279 && R5276 = 0 && R5277 = R5279 && R5278 = 0 && -1 < R1 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R5169 + -1*R5167 - R53 < 1 && 0 < R5279 && (R1 != 0 || R17 = 0 || (R5180 = 0 && R5181 = 0)) && (R1 != 0 || R17 = 0 || (R5182 = 0 && R5183 = 0)) && (R1 != 0 || R17 = 0 || (R5184 = 0 && R5185 = 0)) && (R1 != 0 || R17 = 0 || (R5186 = 0 && R5187 = 0)) && (R1 != 0 || R17 = 0 || (R5188 = 0 && R5189 = 0)) && (R1 != 0 || R17 = 0 || (R5190 = 0 && R5191 = 0)) && (R1 != 0 || R17 = 0 || (R5192 = 0 && R5193 = 0)) && (R1 != 0 || R17 = 0 || (R5194 = 0 && R5195 = 0)) && (R1 != 0 || R17 = 0 || (R5196 = 0 && R5197 = 0)) && (R1 != 0 || R17 = 0 || (R5198 = 0 && R5199 = 0)) && (R48 + R5165 + R5162 != 0 || ((R42 + R72 + R70 != 0 || R43 + R73 + R71 + -1*R5169 + -1*R5167 - R53 = 0 || R53 + R5169 + R5167 < 1) && (R42 + R72 + R70 = 0 || R53 + R5169 + R5167 < 1))) && (R48 + R5165 + R5162 != 0 || ((R46 + R5163 + R5160 != 0 || R47 + R5164 + R5161 + -1*R5169 + -1*R5167 - R53 = 0 || R53 + R5169 + R5167 < 1) && (R46 + R5163 + R5160 = 0 || R53 + R5169 + R5167 < 1))) && (R5180 != 0 || R1 = R5181 || R1 < 1) && (R5182 != 0 || R1 = R5183 || R1 < 1) && (R5184 != 0 || R1 = R5185 || R1 < 1) && (R5186 != 0 || R1 = R5187 || R1 < 1) && (R5188 != 0 || R1 = R5189 || R1 < 1) && (R5190 != 0 || R1 = R5191 || R1 < 1) && (R5192 != 0 || R1 = R5193 || R1 < 1) && (R5194 != 0 || R1 = R5195 || R1 < 1) && (R5196 != 0 || R1 = R5197 || R1 < 1) && (R5198 != 0 || R1 = R5199 || R1 < 1) && (R18 = 0 || (R5218 = 0 && R5219 = 0)) && (R18 = 0 || (R5222 = 0 && R5223 = 0)) && (R18 = 0 || (R5224 = 0 && R5225 = 0)) && (R18 = 0 || (R5226 = 0 && R5227 = 0)) && (R18 = 0 || (R5232 = 0 && R5233 = 0)) && (R18 = 0 || (R5234 = 0 && R5235 = 0)) && (R19 = 0 || (R5200 = 0 && R5201 = 0)) && (R19 = 0 || (R5202 = 0 && R5203 = 0)) && (R19 = 0 || (R5204 = 0 && R5205 = 0)) && (R19 = 0 || (R5206 = 0 && R5207 = 0)) && (R19 = 0 || (R5208 = 0 && R5209 = 0)) && (R19 = 0 || (R5210 = 0 && R5211 = 0)) && (R19 = 0 || (R5212 = 0 && R5213 = 0)) && (R19 = 0 || (R5214 = 0 && R5215 = 0)) && (R19 = 0 || (R5216 = 0 && R5217 = 0)) && (R48 + R5165 + R5162 = 0 || (R42 + R72 + R70 = 0 && R43 + R73 + R71 + -1*R5169 + -1*R5167 - R53 = 0)) && (R48 + R5165 + R5162 = 0 || (R46 + R5163 + R5160 = 0 && R47 + R5164 + R5161 + -1*R5169 + -1*R5167 - R53 = 0)) && (R58 + R5175 + R5172 = 0 || (R56 + R5173 + R5170 = 0 && R57 + R5174 + R5171 = 0)) && (R58 + R5175 + R5172 = 0 || (R62 + R5178 + R5176 = 0 && R63 + R5179 + R5177 = 0)) && (R5180 = 0 || R1 < 1) && (R5182 = 0 || R1 < 1) && (R5184 = 0 || R1 < 1) && (R5186 = 0 || R1 < 1) && (R5188 = 0 || R1 < 1) && (R5190 = 0 || R1 < 1) && (R5192 = 0 || R1 < 1) && (R5194 = 0 || R1 < 1) && (R5196 = 0 || R1 < 1) && (R5198 = 0 || R1 < 1);
// End of Parikh automata intersection problem
