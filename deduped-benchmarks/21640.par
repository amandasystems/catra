// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R12, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R4, R40, R42, R43, R46, R47, R48, R5160, R5161, R5162, R5163, R5164, R5165, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R70, R71, R72, R73, R8, R8976, R8977, R8978, R8979, R9402, R9403, R9404, R9405, R9406, R9407, R9408, R9409, R9410, R9411, R9412, R9413, R9414, R9415, R9416, R9417, R9418, R9419, R9420, R9421, R9422, R9423, R9424, R9425, R9426, R9427, R9428, R9429, R9430, R9431, R9432, R9433, R9434, R9435, R9436, R9437, R9438, R9439, R9440, R9441, R9442, R9443, R9444, R9445, R9446, R9447, R9448, R9449, R9450, R9451, R9452, R9453, R9454, R9455, R9456, R9457, R9458, R9459, R9460, R9461, R9462, R9463, R9464, R9465, R9466, R9467, R9468, R9469, R9470, R9471, R9472, R9473, R9474, R9475, R9476, R9477, R9478, R9479, R9480, R9481, R9482, R9483, R9484, R9485, R9486, R9487, R9488, R9489, R9490, R9491, R9492, R9493, R9494, R9495, R9496, R9497, R9498, R9499, R9500, R9501, R9502, R9503, R9504, R9505, R9506, R9507, R9508, R9509, R9510, R9511;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 72];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [73, 73];
  s0 -> s1 [74, 65535];
  s1 -> s1 [0, 72];
  s1 -> s2 [73, 73];
  s1 -> s1 [74, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s1 [0, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R25 += 1 };
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R9433 += 1, R19 += 1 };
  s0 -> s0 [0, 65535] { R9432 += 1, R9433 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R9433 += 1, R19 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 72] { R9435 += 1 };
  s0 -> s0 [0, 65535] { R9434 += 1, R9435 += 1 };
  s0 -> s2 [73, 73] { R9435 += 1 };
  s0 -> s3 [73, 73] { R9435 += 1 };
  s0 -> s1 [78, 65535] { R9435 += 1 };
  s1 -> s1 [0, 72] { R9435 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R9435 += 1 };
  s1 -> s3 [73, 73] { R9435 += 1 };
  s1 -> s1 [78, 65535] { R9435 += 1 };
  s2 -> s2 [0, 73] { R9435 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [78, 65535] { R9435 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 72] { R9437 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R9436 += 1, R9437 += 1 };
  s0 -> s2 [73, 73] { R9437 += 1, R38 += 1 };
  s0 -> s3 [73, 73] { R9437 += 1, R38 += 1 };
  s0 -> s1 [74, 65535] { R9437 += 1, R38 += 1 };
  s1 -> s1 [0, 72] { R9437 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R9437 += 1, R38 += 1 };
  s1 -> s3 [73, 73] { R9437 += 1, R38 += 1 };
  s1 -> s1 [74, 65535] { R9437 += 1, R38 += 1 };
  s2 -> s2 [0, 65535] { R9437 += 1, R38 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 72] { R9439 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R9438 += 1, R9439 += 1 };
  s0 -> s2 [73, 73] { R9439 += 1, R40 += 1 };
  s0 -> s3 [73, 73] { R9439 += 1, R40 += 1 };
  s0 -> s1 [74, 65535] { R9439 += 1, R40 += 1 };
  s1 -> s1 [0, 72] { R9439 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R9439 += 1, R40 += 1 };
  s1 -> s3 [73, 73] { R9439 += 1, R40 += 1 };
  s1 -> s1 [74, 65535] { R9439 += 1, R40 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R9439 += 1, R40 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 72] { R9441 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R9440 += 1, R9441 += 1 };
  s0 -> s2 [73, 73] { R9441 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [73, 73] { R9441 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [74, 65535] { R9441 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 72] { R9441 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R9441 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [73, 73] { R9441 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [74, 65535] { R9441 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R9441 += 1, R42 += 1, R43 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 72] { R9443 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R9442 += 1, R9443 += 1 };
  s0 -> s2 [73, 73] { R9443 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [73, 73] { R9443 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [74, 65535] { R9443 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 72] { R9443 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R9443 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [73, 73] { R9443 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [74, 65535] { R9443 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R9443 += 1, R46 += 1, R47 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 72] { R9445 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R9444 += 1, R9445 += 1 };
  s0 -> s2 [73, 73] { R9445 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [73, 73] { R9445 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [74, 65535] { R9445 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 72] { R9445 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R9445 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [73, 73] { R9445 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [74, 65535] { R9445 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535] { R9445 += 1, R52 += 1, R53 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 72] { R9447 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R9446 += 1, R9447 += 1 };
  s0 -> s2 [73, 73] { R9447 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [73, 73] { R9447 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [74, 65535] { R9447 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 72] { R9447 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R9447 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [73, 73] { R9447 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [74, 65535] { R9447 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535] { R9447 += 1, R56 += 1, R57 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 72] { R9449 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R9448 += 1, R9449 += 1 };
  s0 -> s2 [73, 73] { R9449 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [73, 73] { R9449 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [74, 65535] { R9449 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 72] { R9449 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R9449 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [73, 73] { R9449 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [74, 65535] { R9449 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R9449 += 1, R62 += 1, R63 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 72] { R9469 += 1 };
  s0 -> s0 [0, 65535] { R9468 += 1, R9469 += 1 };
  s0 -> s2 [73, 73] { R9469 += 1 };
  s0 -> s1 [74, 65535] { R9469 += 1 };
  s1 -> s1 [0, 72] { R9469 += 1 };
  s1 -> s2 [73, 73] { R9469 += 1 };
  s1 -> s1 [74, 65535] { R9469 += 1 };
  s2 -> s2 [0, 65535] { R9469 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R9471 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R9470 += 1, R9471 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R9471 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 72] { R9473 += 1 };
  s0 -> s0 [0, 65535] { R9472 += 1, R9473 += 1 };
  s0 -> s2 [0, 65535] { R9473 += 1, R8 += 1 };
  s0 -> s3 [73, 73] { R9473 += 1 };
  s0 -> s1 [74, 65535] { R9473 += 1 };
  s1 -> s1 [0, 72] { R9473 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [73, 73] { R9473 += 1 };
  s1 -> s1 [74, 65535] { R9473 += 1 };
  s2 -> s1 [0, 72] { R9473 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R9473 += 1, R8 += 1 };
  s2 -> s3 [73, 73] { R9473 += 1 };
  s2 -> s1 [74, 65535] { R9473 += 1 };
  s3 -> s3 [0, 65535] { R9473 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 72] { R9475 += 1, R9413 += 1 };
  s0 -> s0 [0, 65535] { R9474 += 1, R9475 += 1 };
  s0 -> s2 [0, 65535] { R9475 += 1, R9412 += 1, R9413 += 1 };
  s0 -> s1 [74, 65535] { R9475 += 1, R9413 += 1 };
  s1 -> s1 [0, 72] { R9475 += 1, R9413 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R9475 += 1 };
  s1 -> s1 [74, 65535] { R9475 += 1, R9413 += 1 };
  s2 -> s1 [0, 72] { R9475 += 1, R9413 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R9475 += 1, R9412 += 1, R9413 += 1 };
  s2 -> s1 [74, 65535] { R9475 += 1, R9413 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s0 [0, 65535] { R9476 += 1, R9477 += 1 };
  s0 -> s1 [0, 65535] { R9477 += 1, R9415 += 1, R17 += 1 };
  s0 -> s2 [0, 65535] { R9477 += 1, R9414 += 1, R9415 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R9477 += 1, R9415 += 1, R17 += 1 };
  s1 -> s4 [0, 65535] { R9477 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R9477 += 1, R9415 += 1, R17 += 1 };
  s2 -> s2 [0, 65535] { R9477 += 1, R9414 += 1, R9415 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R9477 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 73] { R9479 += 1, R9417 += 1 };
  s0 -> s2 [0, 65535] { R9479 += 1, R9416 += 1, R9417 += 1 };
  s0 -> s0 [0, 65535] { R9478 += 1, R9479 += 1 };
  s0 -> s1 [77, 65535] { R9479 += 1, R9417 += 1 };
  s1 -> s1 [0, 73] { R9479 += 1, R9417 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R9479 += 1 };
  s1 -> s1 [77, 65535] { R9479 += 1, R9417 += 1 };
  s2 -> s1 [0, 73] { R9479 += 1, R9417 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R9479 += 1, R9416 += 1, R9417 += 1 };
  s2 -> s1 [77, 65535] { R9479 += 1, R9417 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s0 [0, 65535] { R9480 += 1, R9481 += 1 };
  s0 -> s1 [0, 65535] { R9481 += 1, R9418 += 1, R9419 += 1 };
  s0 -> s2 [0, 65535] { R9481 += 1, R9419 += 1, R67 += 1 };
  s1 -> s1 [0, 65535] { R9481 += 1, R9418 += 1, R9419 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R9481 += 1, R9419 += 1, R67 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R9481 += 1 };
  s2 -> s2 [0, 65535] { R9481 += 1, R9419 += 1, R67 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R9481 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 76] { R9483 += 1, R9421 += 1 };
  s0 -> s2 [0, 65535] { R9483 += 1, R9421 += 1, R69 += 1 };
  s0 -> s0 [0, 65535] { R9482 += 1, R9483 += 1 };
  s0 -> s3 [0, 65535] { R9483 += 1, R9420 += 1, R9421 += 1 };
  s0 -> s1 [78, 65535] { R9483 += 1, R9421 += 1 };
  s1 -> s1 [0, 76] { R9483 += 1, R9421 += 1 };
  s1 -> s1 [0, 65535] { R9483 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [78, 65535] { R9483 += 1, R9421 += 1 };
  s2 -> s1 [0, 76] { R9483 += 1, R9421 += 1 };
  s2 -> s2 [0, 65535] { R9483 += 1, R9421 += 1, R69 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R9483 += 1 };
  s2 -> s1 [78, 65535] { R9483 += 1, R9421 += 1 };
  s3 -> s1 [0, 76] { R9483 += 1, R9421 += 1 };
  s3 -> s2 [0, 65535] { R9483 += 1, R9421 += 1, R69 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R9483 += 1, R9420 += 1, R9421 += 1 };
  s3 -> s1 [78, 65535] { R9483 += 1, R9421 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R9483 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 76] { R9485 += 1, R9423 += 1, R73 += 1 };
  s0 -> s2 [0, 65535] { R9485 += 1, R9423 += 1, R72 += 1, R73 += 1 };
  s0 -> s0 [0, 65535] { R9484 += 1, R9485 += 1 };
  s0 -> s3 [0, 65535] { R9485 += 1, R9422 += 1, R9423 += 1 };
  s0 -> s1 [78, 65535] { R9485 += 1, R9423 += 1, R73 += 1 };
  s1 -> s1 [0, 76] { R9485 += 1, R9423 += 1, R73 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R9485 += 1 };
  s1 -> s1 [0, 65535] { R9485 += 1, R9423 += 1 };
  s1 -> s1 [78, 65535] { R9485 += 1, R9423 += 1, R73 += 1 };
  s2 -> s1 [0, 76] { R9485 += 1, R9423 += 1, R73 += 1 };
  s2 -> s2 [0, 65535] { R9485 += 1, R9423 += 1, R72 += 1, R73 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R9485 += 1 };
  s2 -> s1 [78, 65535] { R9485 += 1, R9423 += 1, R73 += 1 };
  s3 -> s1 [0, 76] { R9485 += 1, R9423 += 1, R73 += 1 };
  s3 -> s2 [0, 65535] { R9485 += 1, R9423 += 1, R72 += 1, R73 += 1 };
  s3 -> s3 [0, 65535] { R9485 += 1, R9422 += 1, R9423 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [78, 65535] { R9485 += 1, R9423 += 1, R73 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R9485 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R9487 += 1, R9425 += 1, R5164 += 1, R5165 += 1 };
  s0 -> s2 [0, 65535] { R9487 += 1, R9424 += 1, R9425 += 1 };
  s0 -> s3 [0, 65535] { R9487 += 1, R9425 += 1 };
  s0 -> s0 [0, 65535] { R9486 += 1, R9487 += 1 };
  s1 -> s4 [0, 65535] { R9487 += 1 };
  s1 -> s1 [0, 65535] { R9487 += 1, R9425 += 1, R5164 += 1, R5165 += 1 };
  s1 -> s3 [0, 65535] { R9487 += 1, R9425 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R9487 += 1, R9425 += 1, R5164 += 1, R5165 += 1 };
  s2 -> s2 [0, 65535] { R9487 += 1, R9424 += 1, R9425 += 1 };
  s2 -> s3 [0, 65535] { R9487 += 1, R9425 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s4 [0, 65535] { R9487 += 1 };
  s3 -> s3 [0, 65535] { R9487 += 1, R9425 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R9487 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 77] { R9489 += 1, R9427 += 1, R8979 += 1 };
  s0 -> s0 [0, 65535] { R9488 += 1, R9489 += 1 };
  s0 -> s2 [0, 65535] { R9489 += 1, R9426 += 1, R9427 += 1 };
  s0 -> s3 [0, 65535] { R9489 += 1, R9427 += 1, R8978 += 1, R8979 += 1 };
  s0 -> s4 [78, 78] { R9489 += 1, R9427 += 1, R8979 += 1 };
  s0 -> s1 [79, 65535] { R9489 += 1, R9427 += 1, R8979 += 1 };
  s1 -> s1 [0, 77] { R9489 += 1, R9427 += 1, R8979 += 1 };
  s1 -> s4 [78, 78] { R9489 += 1, R9427 += 1, R8979 += 1 };
  s1 -> s1 [79, 65535] { R9489 += 1, R9427 += 1, R8979 += 1 };
  s2 -> s1 [0, 77] { R9489 += 1, R9427 += 1, R8979 += 1 };
  s2 -> s2 [0, 65535] { R9489 += 1, R9426 += 1, R9427 += 1 };
  s2 -> s3 [0, 65535] { R9489 += 1, R9427 += 1, R8978 += 1, R8979 += 1 };
  s2 -> s4 [78, 78] { R9489 += 1, R9427 += 1, R8979 += 1 };
  s2 -> s1 [79, 65535] { R9489 += 1, R9427 += 1, R8979 += 1 };
  s3 -> s1 [0, 77] { R9489 += 1, R9427 += 1, R8979 += 1 };
  s3 -> s3 [0, 65535] { R9489 += 1, R9427 += 1, R8978 += 1, R8979 += 1 };
  s3 -> s4 [78, 78] { R9489 += 1, R9427 += 1, R8979 += 1 };
  s3 -> s1 [79, 65535] { R9489 += 1, R9427 += 1, R8979 += 1 };
  s4 -> s4 [0, 65535] { R9489 += 1, R9427 += 1, R8979 += 1 };
  s4 -> s5 [0, 65535] { R9489 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R9489 += 1, R9427 += 1 };
  s5 -> s5 [0, 65535] { R9489 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R9489 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R9489 += 1, R9427 += 1 };
  accepting s4, s5, s6, s7;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R9491 += 1, R9428 += 1, R9429 += 1 };
  s0 -> s0 [0, 65535] { R9490 += 1, R9491 += 1 };
  s0 -> s2 [0, 65535] { R9491 += 1, R9429 += 1, R9406 += 1, R9407 += 1 };
  s0 -> s3 [0, 65535] { R9491 += 1, R9429 += 1 };
  s1 -> s1 [0, 65535] { R9491 += 1, R9428 += 1, R9429 += 1 };
  s1 -> s2 [0, 65535] { R9491 += 1, R9429 += 1, R9406 += 1, R9407 += 1 };
  s1 -> s3 [0, 65535] { R9491 += 1, R9429 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R9491 += 1, R9429 += 1, R9406 += 1, R9407 += 1 };
  s2 -> s3 [0, 65535] { R9491 += 1, R9429 += 1 };
  s2 -> s4 [0, 65535] { R9491 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R9491 += 1, R9429 += 1 };
  s3 -> s4 [0, 65535] { R9491 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R9491 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 76] { R9493 += 1, R9431 += 1, R9411 += 1 };
  s0 -> s2 [0, 65535] { R9493 += 1, R9431 += 1, R9410 += 1, R9411 += 1 };
  s0 -> s0 [0, 65535] { R9492 += 1, R9493 += 1 };
  s0 -> s3 [0, 65535] { R9493 += 1, R9430 += 1, R9431 += 1 };
  s0 -> s4 [77, 77] { R9493 += 1, R9431 += 1, R9411 += 1 };
  s0 -> s5 [77, 77] { R9493 += 1, R9431 += 1, R9411 += 1 };
  s0 -> s1 [79, 65535] { R9493 += 1, R9431 += 1, R9411 += 1 };
  s1 -> s1 [0, 76] { R9493 += 1, R9431 += 1, R9411 += 1 };
  s1 -> s1 [0, 65535] { R9493 += 1, R9431 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R9493 += 1 };
  s1 -> s4 [77, 77] { R9493 += 1, R9431 += 1, R9411 += 1 };
  s1 -> s5 [77, 77] { R9493 += 1, R9431 += 1, R9411 += 1 };
  s1 -> s1 [79, 65535] { R9493 += 1, R9431 += 1, R9411 += 1 };
  s2 -> s1 [0, 76] { R9493 += 1, R9431 += 1, R9411 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R9493 += 1, R9431 += 1, R9410 += 1, R9411 += 1 };
  s2 -> s7 [0, 65535] { R9493 += 1 };
  s2 -> s4 [77, 77] { R9493 += 1, R9431 += 1, R9411 += 1 };
  s2 -> s5 [77, 77] { R9493 += 1, R9431 += 1, R9411 += 1 };
  s2 -> s1 [79, 65535] { R9493 += 1, R9431 += 1, R9411 += 1 };
  s3 -> s1 [0, 76] { R9493 += 1, R9431 += 1, R9411 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s2 [0, 65535] { R9493 += 1, R9431 += 1, R9410 += 1, R9411 += 1 };
  s3 -> s3 [0, 65535] { R9493 += 1, R9430 += 1, R9431 += 1 };
  s3 -> s4 [77, 77] { R9493 += 1, R9431 += 1, R9411 += 1 };
  s3 -> s5 [77, 77] { R9493 += 1, R9431 += 1, R9411 += 1 };
  s3 -> s1 [79, 65535] { R9493 += 1, R9431 += 1, R9411 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R9493 += 1 };
  s4 -> s4 [0, 65535] { R9493 += 1, R9431 += 1 };
  s5 -> s5 [0, 77] { R9493 += 1, R9431 += 1, R9411 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R9493 += 1 };
  s5 -> s5 [0, 65535] { R9493 += 1, R9431 += 1 };
  s5 -> s5 [79, 65535] { R9493 += 1, R9431 += 1, R9411 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R9493 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R9495 += 1, R9450 += 1, R9451 += 1 };
  s0 -> s2 [0, 65535] { R9495 += 1, R9451 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R9494 += 1, R9495 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R9495 += 1, R9450 += 1, R9451 += 1 };
  s1 -> s2 [0, 65535] { R9495 += 1, R9451 += 1, R18 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R9495 += 1 };
  s2 -> s2 [0, 65535] { R9495 += 1, R9451 += 1, R18 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R9495 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 72] { R9497 += 1, R9453 += 1 };
  s0 -> s0 [0, 65535] { R9496 += 1, R9497 += 1 };
  s0 -> s2 [0, 65535] { R9497 += 1, R9452 += 1, R9453 += 1 };
  s0 -> s3 [73, 73] { R9497 += 1, R9453 += 1 };
  s0 -> s4 [73, 73] { R9497 += 1, R9453 += 1 };
  s0 -> s5 [77, 77] { R9497 += 1, R9453 += 1 };
  s0 -> s1 [78, 65535] { R9497 += 1, R9453 += 1 };
  s1 -> s1 [0, 72] { R9497 += 1, R9453 += 1 };
  s1 -> s3 [73, 73] { R9497 += 1, R9453 += 1 };
  s1 -> s4 [73, 73] { R9497 += 1, R9453 += 1 };
  s1 -> s5 [77, 77] { R9497 += 1, R9453 += 1 };
  s1 -> s1 [78, 65535] { R9497 += 1, R9453 += 1 };
  s2 -> s1 [0, 72] { R9497 += 1, R9453 += 1 };
  s2 -> s2 [0, 65535] { R9497 += 1, R9452 += 1, R9453 += 1 };
  s2 -> s3 [73, 73] { R9497 += 1, R9453 += 1 };
  s2 -> s4 [73, 73] { R9497 += 1, R9453 += 1 };
  s2 -> s5 [77, 77] { R9497 += 1, R9453 += 1 };
  s2 -> s1 [78, 65535] { R9497 += 1, R9453 += 1 };
  s3 -> s3 [0, 73] { R9497 += 1, R9453 += 1 };
  s3 -> s8 [77, 77] { R9497 += 1, R9453 += 1 };
  s3 -> s3 [78, 65535] { R9497 += 1, R9453 += 1 };
  s5 -> s5 [0, 72] { R9497 += 1, R9453 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R9497 += 1 };
  s5 -> s7 [73, 73] { R9497 += 1, R9453 += 1 };
  s5 -> s8 [73, 73] { R9497 += 1, R9453 += 1 };
  s5 -> s5 [77, 65535] { R9497 += 1, R9453 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R9497 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 73] { R9497 += 1, R9453 += 1 };
  s8 -> s8 [0, 65535] { R9497 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [77, 65535] { R9497 += 1, R9453 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 72] { R9499 += 1, R9455 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R9498 += 1, R9499 += 1 };
  s0 -> s2 [0, 65535] { R9499 += 1, R9454 += 1, R9455 += 1 };
  s0 -> s3 [73, 73] { R9499 += 1, R9455 += 1, R66 += 1 };
  s0 -> s4 [73, 73] { R9499 += 1, R9455 += 1, R66 += 1 };
  s0 -> s1 [74, 65535] { R9499 += 1, R9455 += 1, R66 += 1 };
  s1 -> s1 [0, 72] { R9499 += 1, R9455 += 1, R66 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R9499 += 1 };
  s1 -> s3 [73, 73] { R9499 += 1, R9455 += 1, R66 += 1 };
  s1 -> s4 [73, 73] { R9499 += 1, R9455 += 1, R66 += 1 };
  s1 -> s1 [74, 65535] { R9499 += 1, R9455 += 1, R66 += 1 };
  s2 -> s1 [0, 72] { R9499 += 1, R9455 += 1, R66 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R9499 += 1, R9454 += 1, R9455 += 1 };
  s2 -> s3 [73, 73] { R9499 += 1, R9455 += 1, R66 += 1 };
  s2 -> s4 [73, 73] { R9499 += 1, R9455 += 1, R66 += 1 };
  s2 -> s1 [74, 65535] { R9499 += 1, R9455 += 1, R66 += 1 };
  s3 -> s3 [0, 65535] { R9499 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R9499 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R9499 += 1, R9455 += 1, R66 += 1 };
  s5 -> s5 [0, 65535] { R9499 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 72] { R9501 += 1, R9457 += 1, R68 += 1 };
  s0 -> s0 [0, 65535] { R9500 += 1, R9501 += 1 };
  s0 -> s2 [0, 65535] { R9501 += 1, R9456 += 1, R9457 += 1 };
  s0 -> s3 [73, 73] { R9501 += 1, R9457 += 1, R68 += 1 };
  s0 -> s4 [73, 73] { R9501 += 1, R9457 += 1, R68 += 1 };
  s0 -> s1 [74, 65535] { R9501 += 1, R9457 += 1, R68 += 1 };
  s1 -> s1 [0, 72] { R9501 += 1, R9457 += 1, R68 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R9501 += 1 };
  s1 -> s3 [73, 73] { R9501 += 1, R9457 += 1, R68 += 1 };
  s1 -> s4 [73, 73] { R9501 += 1, R9457 += 1, R68 += 1 };
  s1 -> s1 [74, 65535] { R9501 += 1, R9457 += 1, R68 += 1 };
  s2 -> s1 [0, 72] { R9501 += 1, R9457 += 1, R68 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R9501 += 1, R9456 += 1, R9457 += 1 };
  s2 -> s3 [73, 73] { R9501 += 1, R9457 += 1, R68 += 1 };
  s2 -> s4 [73, 73] { R9501 += 1, R9457 += 1, R68 += 1 };
  s2 -> s1 [74, 65535] { R9501 += 1, R9457 += 1, R68 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R9501 += 1 };
  s3 -> s3 [0, 65535] { R9501 += 1, R9457 += 1, R68 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R9501 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9501 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 72] { R9503 += 1, R9459 += 1, R70 += 1, R71 += 1 };
  s0 -> s0 [0, 65535] { R9502 += 1, R9503 += 1 };
  s0 -> s2 [0, 65535] { R9503 += 1, R9458 += 1, R9459 += 1 };
  s0 -> s3 [73, 73] { R9503 += 1, R9459 += 1, R70 += 1, R71 += 1 };
  s0 -> s4 [73, 73] { R9503 += 1, R9459 += 1, R70 += 1, R71 += 1 };
  s0 -> s1 [74, 65535] { R9503 += 1, R9459 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 72] { R9503 += 1, R9459 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 65535] { R9503 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [73, 73] { R9503 += 1, R9459 += 1, R70 += 1, R71 += 1 };
  s1 -> s4 [73, 73] { R9503 += 1, R9459 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [74, 65535] { R9503 += 1, R9459 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [0, 72] { R9503 += 1, R9459 += 1, R70 += 1, R71 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R9503 += 1, R9458 += 1, R9459 += 1 };
  s2 -> s3 [73, 73] { R9503 += 1, R9459 += 1, R70 += 1, R71 += 1 };
  s2 -> s4 [73, 73] { R9503 += 1, R9459 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [74, 65535] { R9503 += 1, R9459 += 1, R70 += 1, R71 += 1 };
  s3 -> s3 [0, 65535] { R9503 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R9503 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R9503 += 1, R9459 += 1, R70 += 1, R71 += 1 };
  s5 -> s5 [0, 65535] { R9503 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 72] { R9505 += 1, R9461 += 1, R5160 += 1, R5161 += 1 };
  s0 -> s2 [0, 72] { R9505 += 1, R9461 += 1, R5161 += 1, R5162 += 1 };
  s0 -> s3 [0, 65535] { R9505 += 1, R9460 += 1, R9461 += 1 };
  s0 -> s0 [0, 65535] { R9504 += 1, R9505 += 1 };
  s0 -> s4 [73, 73] { R9505 += 1, R9461 += 1, R5161 += 1, R5162 += 1 };
  s0 -> s5 [73, 73] { R9505 += 1, R9461 += 1, R5160 += 1, R5161 += 1 };
  s0 -> s6 [73, 73] { R9505 += 1, R9461 += 1, R5161 += 1, R5162 += 1 };
  s0 -> s7 [73, 73] { R9505 += 1, R9461 += 1, R5160 += 1, R5161 += 1 };
  s0 -> s1 [74, 65535] { R9505 += 1, R9461 += 1, R5160 += 1, R5161 += 1 };
  s0 -> s2 [74, 65535] { R9505 += 1, R9461 += 1, R5161 += 1, R5162 += 1 };
  s1 -> s1 [0, 72] { R9505 += 1, R9461 += 1, R5160 += 1, R5161 += 1 };
  s1 -> s2 [0, 72] { R9505 += 1, R9461 += 1, R5161 += 1, R5162 += 1 };
  s1 -> s4 [73, 73] { R9505 += 1, R9461 += 1, R5161 += 1, R5162 += 1 };
  s1 -> s5 [73, 73] { R9505 += 1, R9461 += 1, R5160 += 1, R5161 += 1 };
  s1 -> s6 [73, 73] { R9505 += 1, R9461 += 1, R5161 += 1, R5162 += 1 };
  s1 -> s7 [73, 73] { R9505 += 1, R9461 += 1, R5160 += 1, R5161 += 1 };
  s1 -> s1 [74, 65535] { R9505 += 1, R9461 += 1, R5160 += 1, R5161 += 1 };
  s1 -> s2 [74, 65535] { R9505 += 1, R9461 += 1, R5161 += 1, R5162 += 1 };
  s2 -> s2 [0, 72] { R9505 += 1, R9461 += 1, R5161 += 1, R5162 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R9505 += 1 };
  s2 -> s4 [73, 73] { R9505 += 1, R9461 += 1, R5161 += 1, R5162 += 1 };
  s2 -> s6 [73, 73] { R9505 += 1, R9461 += 1, R5161 += 1, R5162 += 1 };
  s2 -> s2 [74, 65535] { R9505 += 1, R9461 += 1, R5161 += 1, R5162 += 1 };
  s3 -> s1 [0, 72] { R9505 += 1, R9461 += 1, R5160 += 1, R5161 += 1 };
  s3 -> s2 [0, 72] { R9505 += 1, R9461 += 1, R5161 += 1, R5162 += 1 };
  s3 -> s3 [0, 65535] { R9505 += 1, R9460 += 1, R9461 += 1 };
  s3 -> s4 [73, 73] { R9505 += 1, R9461 += 1, R5161 += 1, R5162 += 1 };
  s3 -> s5 [73, 73] { R9505 += 1, R9461 += 1, R5160 += 1, R5161 += 1 };
  s3 -> s6 [73, 73] { R9505 += 1, R9461 += 1, R5161 += 1, R5162 += 1 };
  s3 -> s7 [73, 73] { R9505 += 1, R9461 += 1, R5160 += 1, R5161 += 1 };
  s3 -> s1 [74, 65535] { R9505 += 1, R9461 += 1, R5160 += 1, R5161 += 1 };
  s3 -> s2 [74, 65535] { R9505 += 1, R9461 += 1, R5161 += 1, R5162 += 1 };
  s4 -> s4 [0, 65535] { R9505 += 1 };
  s4 -> s8 [0, 65535];
  s5 -> s5 [0, 65535] { R9505 += 1, R9461 += 1, R5160 += 1, R5161 += 1 };
  s5 -> s6 [0, 65535] { R9505 += 1, R9461 += 1, R5161 += 1, R5162 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s9 [0, 65535] { R9505 += 1 };
  s6 -> s6 [0, 65535] { R9505 += 1, R9461 += 1, R5161 += 1, R5162 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R9505 += 1 };
  accepting s4, s8, s2, s9, s6;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 72] { R9507 += 1, R9463 += 1, R8976 += 1, R8977 += 1 };
  s0 -> s2 [0, 65535] { R9507 += 1, R9462 += 1, R9463 += 1 };
  s0 -> s0 [0, 65535] { R9506 += 1, R9507 += 1 };
  s0 -> s3 [73, 73] { R9507 += 1, R9463 += 1, R8976 += 1, R8977 += 1 };
  s0 -> s4 [73, 73] { R9507 += 1, R9463 += 1, R8976 += 1, R8977 += 1 };
  s0 -> s1 [74, 65535] { R9507 += 1, R9463 += 1, R8976 += 1, R8977 += 1 };
  s1 -> s1 [0, 72] { R9507 += 1, R9463 += 1, R8976 += 1, R8977 += 1 };
  s1 -> s1 [0, 65535] { R9507 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [73, 73] { R9507 += 1, R9463 += 1, R8976 += 1, R8977 += 1 };
  s1 -> s4 [73, 73] { R9507 += 1, R9463 += 1, R8976 += 1, R8977 += 1 };
  s1 -> s1 [74, 65535] { R9507 += 1, R9463 += 1, R8976 += 1, R8977 += 1 };
  s2 -> s1 [0, 72] { R9507 += 1, R9463 += 1, R8976 += 1, R8977 += 1 };
  s2 -> s2 [0, 65535] { R9507 += 1, R9462 += 1, R9463 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [73, 73] { R9507 += 1, R9463 += 1, R8976 += 1, R8977 += 1 };
  s2 -> s4 [73, 73] { R9507 += 1, R9463 += 1, R8976 += 1, R8977 += 1 };
  s2 -> s1 [74, 65535] { R9507 += 1, R9463 += 1, R8976 += 1, R8977 += 1 };
  s3 -> s3 [0, 65535] { R9507 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R9507 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R9507 += 1, R9463 += 1, R8976 += 1, R8977 += 1 };
  s5 -> s5 [0, 65535] { R9507 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 72] { R9509 += 1, R9465 += 1, R9402 += 1, R9403 += 1 };
  s0 -> s2 [0, 72] { R9509 += 1, R9465 += 1, R9403 += 1, R9404 += 1 };
  s0 -> s3 [0, 65535] { R9509 += 1, R9464 += 1, R9465 += 1 };
  s0 -> s0 [0, 65535] { R9508 += 1, R9509 += 1 };
  s0 -> s4 [73, 73] { R9509 += 1, R9465 += 1, R9403 += 1, R9404 += 1 };
  s0 -> s5 [73, 73] { R9509 += 1, R9465 += 1, R9402 += 1, R9403 += 1 };
  s0 -> s6 [73, 73] { R9509 += 1, R9465 += 1, R9402 += 1, R9403 += 1 };
  s0 -> s7 [73, 73] { R9509 += 1, R9465 += 1, R9403 += 1, R9404 += 1 };
  s0 -> s1 [74, 65535] { R9509 += 1, R9465 += 1, R9402 += 1, R9403 += 1 };
  s0 -> s2 [74, 65535] { R9509 += 1, R9465 += 1, R9403 += 1, R9404 += 1 };
  s1 -> s1 [0, 72] { R9509 += 1, R9465 += 1, R9402 += 1, R9403 += 1 };
  s1 -> s2 [0, 72] { R9509 += 1, R9465 += 1, R9403 += 1, R9404 += 1 };
  s1 -> s4 [73, 73] { R9509 += 1, R9465 += 1, R9403 += 1, R9404 += 1 };
  s1 -> s5 [73, 73] { R9509 += 1, R9465 += 1, R9402 += 1, R9403 += 1 };
  s1 -> s6 [73, 73] { R9509 += 1, R9465 += 1, R9402 += 1, R9403 += 1 };
  s1 -> s7 [73, 73] { R9509 += 1, R9465 += 1, R9403 += 1, R9404 += 1 };
  s1 -> s1 [74, 65535] { R9509 += 1, R9465 += 1, R9402 += 1, R9403 += 1 };
  s1 -> s2 [74, 65535] { R9509 += 1, R9465 += 1, R9403 += 1, R9404 += 1 };
  s2 -> s2 [0, 72] { R9509 += 1, R9465 += 1, R9403 += 1, R9404 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R9509 += 1 };
  s2 -> s4 [73, 73] { R9509 += 1, R9465 += 1, R9403 += 1, R9404 += 1 };
  s2 -> s7 [73, 73] { R9509 += 1, R9465 += 1, R9403 += 1, R9404 += 1 };
  s2 -> s2 [74, 65535] { R9509 += 1, R9465 += 1, R9403 += 1, R9404 += 1 };
  s3 -> s1 [0, 72] { R9509 += 1, R9465 += 1, R9402 += 1, R9403 += 1 };
  s3 -> s2 [0, 72] { R9509 += 1, R9465 += 1, R9403 += 1, R9404 += 1 };
  s3 -> s3 [0, 65535] { R9509 += 1, R9464 += 1, R9465 += 1 };
  s3 -> s4 [73, 73] { R9509 += 1, R9465 += 1, R9403 += 1, R9404 += 1 };
  s3 -> s5 [73, 73] { R9509 += 1, R9465 += 1, R9402 += 1, R9403 += 1 };
  s3 -> s6 [73, 73] { R9509 += 1, R9465 += 1, R9402 += 1, R9403 += 1 };
  s3 -> s7 [73, 73] { R9509 += 1, R9465 += 1, R9403 += 1, R9404 += 1 };
  s3 -> s1 [74, 65535] { R9509 += 1, R9465 += 1, R9402 += 1, R9403 += 1 };
  s3 -> s2 [74, 65535] { R9509 += 1, R9465 += 1, R9403 += 1, R9404 += 1 };
  s4 -> s4 [0, 65535] { R9509 += 1, R9465 += 1, R9403 += 1, R9404 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s9 [0, 65535] { R9509 += 1 };
  s6 -> s4 [0, 65535] { R9509 += 1, R9465 += 1, R9403 += 1, R9404 += 1 };
  s6 -> s6 [0, 65535] { R9509 += 1, R9465 += 1, R9402 += 1, R9403 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R9509 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R9509 += 1 };
  accepting s4, s8, s2, s9, s7;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 72] { R9511 += 1, R9467 += 1, R9408 += 1, R9409 += 1 };
  s0 -> s0 [0, 65535] { R9510 += 1, R9511 += 1 };
  s0 -> s2 [0, 65535] { R9511 += 1, R9466 += 1, R9467 += 1 };
  s0 -> s3 [73, 73] { R9511 += 1, R9467 += 1, R9408 += 1, R9409 += 1 };
  s0 -> s4 [73, 73] { R9511 += 1, R9467 += 1, R9408 += 1, R9409 += 1 };
  s0 -> s1 [74, 65535] { R9511 += 1, R9467 += 1, R9408 += 1, R9409 += 1 };
  s1 -> s1 [0, 72] { R9511 += 1, R9467 += 1, R9408 += 1, R9409 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R9511 += 1 };
  s1 -> s3 [73, 73] { R9511 += 1, R9467 += 1, R9408 += 1, R9409 += 1 };
  s1 -> s4 [73, 73] { R9511 += 1, R9467 += 1, R9408 += 1, R9409 += 1 };
  s1 -> s1 [74, 65535] { R9511 += 1, R9467 += 1, R9408 += 1, R9409 += 1 };
  s2 -> s1 [0, 72] { R9511 += 1, R9467 += 1, R9408 += 1, R9409 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R9511 += 1, R9466 += 1, R9467 += 1 };
  s2 -> s3 [73, 73] { R9511 += 1, R9467 += 1, R9408 += 1, R9409 += 1 };
  s2 -> s4 [73, 73] { R9511 += 1, R9467 += 1, R9408 += 1, R9409 += 1 };
  s2 -> s1 [74, 65535] { R9511 += 1, R9467 += 1, R9408 += 1, R9409 += 1 };
  s3 -> s3 [0, 65535] { R9511 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R9511 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R9511 += 1, R9467 += 1, R9408 += 1, R9409 += 1 };
  s5 -> s5 [0, 65535] { R9511 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
synchronised {  // Automata constraining P54
automaton P54_0 {
  init s0;
  s0 -> s1 [109, 109];
  accepting s1;
};
};
constraint R1 = R9427 && R2 = R9511 && R20 - R9511 = -1 && R21 = R9511 && R22 - R9511 = -1 && R23 = R9511 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R8979 + -1*R8977 - R53 = 0 && R52 + R8978 + R8976 = 0 && R9426 = 0 && R9452 = 0 && R9453 = 0 && R9460 = 0 && R9461 = 0 && R9464 = 0 && R9465 = 0 && R9468 = 0 && R9469 = R9511 && R9470 = 0 && R9471 = R9511 && R9472 = 0 && R9473 = R9511 && R9474 = 0 && R9475 = R9511 && R9476 = 0 && R9477 = R9511 && R9478 = 0 && R9479 = R9511 && R9480 = 0 && R9481 = R9511 && R9482 = 0 && R9483 = R9511 && R9484 = 0 && R9485 = R9511 && R9486 = 0 && R9487 = R9511 && R9488 = 0 && R9489 = R9511 && R9490 = 0 && R9491 = R9511 && R9492 = 0 && R9493 = R9511 && R9494 = 0 && R9495 = R9511 && R9496 = 0 && R9497 = R9511 && R9498 = 0 && R9499 = R9511 && R9500 = 0 && R9501 = R9511 && R9502 = 0 && R9503 = R9511 && R9504 = 0 && R9505 = R9511 && R9506 = 0 && R9507 = R9511 && R9508 = 0 && R9509 = R9511 && R9510 = 0 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R8979 + -1*R8977 - R53 < 1 && -1 < R9427 && 0 < R9511 && (R48 + R5165 + R5162 != 0 || ((R42 + R72 + R70 != 0 || R43 + R73 + R71 + -1*R8979 + -1*R8977 - R53 = 0 || R53 + R8979 + R8977 < 1) && (R42 + R72 + R70 = 0 || R53 + R8979 + R8977 < 1))) && (R48 + R5165 + R5162 != 0 || ((R46 + R5163 + R5160 != 0 || R47 + R5164 + R5161 + -1*R8979 + -1*R8977 - R53 = 0 || R53 + R8979 + R8977 < 1) && (R46 + R5163 + R5160 = 0 || R53 + R8979 + R8977 < 1))) && (R9412 != 0 || R9413 = R9427 || (R17 = 0 && R9427 = 0)) && (R9414 != 0 || R9415 = R9427 || (R17 = 0 && R9427 = 0)) && (R9416 != 0 || R9417 = R9427 || (R17 = 0 && R9427 = 0)) && (R9418 != 0 || R9419 = R9427 || (R17 = 0 && R9427 = 0)) && (R9420 != 0 || R9421 = R9427 || (R17 = 0 && R9427 = 0)) && (R9422 != 0 || R9423 = R9427 || (R17 = 0 && R9427 = 0)) && (R9424 != 0 || R9425 = R9427 || (R17 = 0 && R9427 = 0)) && (R9428 != 0 || R9427 = R9429 || (R17 = 0 && R9427 = 0)) && (R9430 != 0 || R9427 = R9431 || (R17 = 0 && R9427 = 0)) && (R18 = 0 || (R9450 = 0 && R9451 = 0)) && (R18 = 0 || (R9454 = 0 && R9455 = 0)) && (R18 = 0 || (R9456 = 0 && R9457 = 0)) && (R18 = 0 || (R9458 = 0 && R9459 = 0)) && (R18 = 0 || (R9462 = 0 && R9463 = 0)) && (R18 = 0 || (R9466 = 0 && R9467 = 0)) && (R19 = 0 || (R9432 = 0 && R9433 = 0)) && (R19 = 0 || (R9434 = 0 && R9435 = 0)) && (R19 = 0 || (R9436 = 0 && R9437 = 0)) && (R19 = 0 || (R9438 = 0 && R9439 = 0)) && (R19 = 0 || (R9440 = 0 && R9441 = 0)) && (R19 = 0 || (R9442 = 0 && R9443 = 0)) && (R19 = 0 || (R9444 = 0 && R9445 = 0)) && (R19 = 0 || (R9446 = 0 && R9447 = 0)) && (R19 = 0 || (R9448 = 0 && R9449 = 0)) && (R48 + R5165 + R5162 = 0 || (R42 + R72 + R70 = 0 && R43 + R73 + R71 + -1*R8979 + -1*R8977 - R53 = 0)) && (R48 + R5165 + R5162 = 0 || (R46 + R5163 + R5160 = 0 && R47 + R5164 + R5161 + -1*R8979 + -1*R8977 - R53 = 0)) && (R58 + R9407 + R9404 = 0 || (R56 + R9405 + R9402 = 0 && R57 + R9406 + R9403 = 0)) && (R58 + R9407 + R9404 = 0 || (R62 + R9410 + R9408 = 0 && R63 + R9411 + R9409 = 0)) && (R9412 = 0 || (R17 = 0 && R9427 = 0)) && (R9414 = 0 || (R17 = 0 && R9427 = 0)) && (R9416 = 0 || (R17 = 0 && R9427 = 0)) && (R9418 = 0 || (R17 = 0 && R9427 = 0)) && (R9420 = 0 || (R17 = 0 && R9427 = 0)) && (R9422 = 0 || (R17 = 0 && R9427 = 0)) && (R9424 = 0 || (R17 = 0 && R9427 = 0)) && (R9428 = 0 || (R17 = 0 && R9427 = 0)) && (R9430 = 0 || (R17 = 0 && R9427 = 0));
// End of Parikh automata intersection problem
