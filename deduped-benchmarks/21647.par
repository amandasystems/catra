// Parikh automata intersection problem, generated by OSTRICH+
counter int
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 72];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [73, 73];
  s0 -> s1 [74, 65535];
  s1 -> s1 [0, 72];
  s1 -> s2 [73, 73];
  s1 -> s1 [74, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s1 [0, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R25 += 1 };
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R12187 += 1, R19 += 1 };
  s0 -> s0 [0, 65535] { R12186 += 1, R12187 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R12187 += 1, R19 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 72] { R12189 += 1 };
  s0 -> s0 [0, 65535] { R12188 += 1, R12189 += 1 };
  s0 -> s2 [73, 73] { R12189 += 1 };
  s0 -> s3 [73, 73] { R12189 += 1 };
  s0 -> s1 [78, 65535] { R12189 += 1 };
  s1 -> s1 [0, 72] { R12189 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R12189 += 1 };
  s1 -> s3 [73, 73] { R12189 += 1 };
  s1 -> s1 [78, 65535] { R12189 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 73] { R12189 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [78, 65535] { R12189 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 72] { R12191 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R12190 += 1, R12191 += 1 };
  s0 -> s2 [73, 73] { R12191 += 1, R38 += 1 };
  s0 -> s3 [73, 73] { R12191 += 1, R38 += 1 };
  s0 -> s1 [74, 65535] { R12191 += 1, R38 += 1 };
  s1 -> s1 [0, 72] { R12191 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R12191 += 1, R38 += 1 };
  s1 -> s3 [73, 73] { R12191 += 1, R38 += 1 };
  s1 -> s1 [74, 65535] { R12191 += 1, R38 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R12191 += 1, R38 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 72] { R12193 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R12192 += 1, R12193 += 1 };
  s0 -> s2 [73, 73] { R12193 += 1, R40 += 1 };
  s0 -> s3 [73, 73] { R12193 += 1, R40 += 1 };
  s0 -> s1 [74, 65535] { R12193 += 1, R40 += 1 };
  s1 -> s1 [0, 72] { R12193 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R12193 += 1, R40 += 1 };
  s1 -> s3 [73, 73] { R12193 += 1, R40 += 1 };
  s1 -> s1 [74, 65535] { R12193 += 1, R40 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R12193 += 1, R40 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 72] { R12195 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R12194 += 1, R12195 += 1 };
  s0 -> s2 [73, 73] { R12195 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [73, 73] { R12195 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [74, 65535] { R12195 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 72] { R12195 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R12195 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [73, 73] { R12195 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [74, 65535] { R12195 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R12195 += 1, R42 += 1, R43 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 72] { R12197 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R12196 += 1, R12197 += 1 };
  s0 -> s2 [73, 73] { R12197 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [73, 73] { R12197 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [74, 65535] { R12197 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 72] { R12197 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R12197 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [73, 73] { R12197 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [74, 65535] { R12197 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R12197 += 1, R46 += 1, R47 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 72] { R12199 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R12198 += 1, R12199 += 1 };
  s0 -> s2 [73, 73] { R12199 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [73, 73] { R12199 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [74, 65535] { R12199 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 72] { R12199 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R12199 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [73, 73] { R12199 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [74, 65535] { R12199 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R12199 += 1, R52 += 1, R53 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 72] { R12201 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R12200 += 1, R12201 += 1 };
  s0 -> s2 [73, 73] { R12201 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [73, 73] { R12201 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [74, 65535] { R12201 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 72] { R12201 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R12201 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [73, 73] { R12201 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [74, 65535] { R12201 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535] { R12201 += 1, R56 += 1, R57 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 72] { R12203 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R12202 += 1, R12203 += 1 };
  s0 -> s2 [73, 73] { R12203 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [73, 73] { R12203 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [74, 65535] { R12203 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 72] { R12203 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R12203 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [73, 73] { R12203 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [74, 65535] { R12203 += 1, R62 += 1, R63 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R12203 += 1, R62 += 1, R63 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 72] { R12223 += 1 };
  s0 -> s0 [0, 65535] { R12222 += 1, R12223 += 1 };
  s0 -> s2 [73, 73] { R12223 += 1 };
  s0 -> s1 [74, 65535] { R12223 += 1 };
  s1 -> s1 [0, 72] { R12223 += 1 };
  s1 -> s2 [73, 73] { R12223 += 1 };
  s1 -> s1 [74, 65535] { R12223 += 1 };
  s2 -> s2 [0, 65535] { R12223 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R12225 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R12224 += 1, R12225 += 1 };
  s1 -> s1 [0, 65535] { R12225 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 72] { R12227 += 1 };
  s0 -> s2 [0, 65535] { R12227 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R12226 += 1, R12227 += 1 };
  s0 -> s3 [73, 73] { R12227 += 1 };
  s0 -> s1 [74, 65535] { R12227 += 1 };
  s1 -> s1 [0, 72] { R12227 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [73, 73] { R12227 += 1 };
  s1 -> s1 [74, 65535] { R12227 += 1 };
  s2 -> s1 [0, 72] { R12227 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R12227 += 1, R8 += 1 };
  s2 -> s3 [73, 73] { R12227 += 1 };
  s2 -> s1 [74, 65535] { R12227 += 1 };
  s3 -> s3 [0, 65535] { R12227 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 72] { R12229 += 1, R12167 += 1 };
  s0 -> s0 [0, 65535] { R12228 += 1, R12229 += 1 };
  s0 -> s2 [0, 65535] { R12229 += 1, R12166 += 1, R12167 += 1 };
  s0 -> s1 [74, 65535] { R12229 += 1, R12167 += 1 };
  s1 -> s1 [0, 72] { R12229 += 1, R12167 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R12229 += 1 };
  s1 -> s1 [74, 65535] { R12229 += 1, R12167 += 1 };
  s2 -> s1 [0, 72] { R12229 += 1, R12167 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R12229 += 1, R12166 += 1, R12167 += 1 };
  s2 -> s1 [74, 65535] { R12229 += 1, R12167 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R12231 += 1, R12169 += 1, R17 += 1 };
  s0 -> s2 [0, 65535] { R12231 += 1, R12168 += 1, R12169 += 1 };
  s0 -> s0 [0, 65535] { R12230 += 1, R12231 += 1 };
  s1 -> s1 [0, 65535] { R12231 += 1, R12169 += 1, R17 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R12231 += 1 };
  s2 -> s1 [0, 65535] { R12231 += 1, R12169 += 1, R17 += 1 };
  s2 -> s2 [0, 65535] { R12231 += 1, R12168 += 1, R12169 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R12231 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 73] { R12233 += 1, R12171 += 1 };
  s0 -> s2 [0, 65535] { R12233 += 1, R12170 += 1, R12171 += 1 };
  s0 -> s0 [0, 65535] { R12232 += 1, R12233 += 1 };
  s0 -> s1 [77, 65535] { R12233 += 1, R12171 += 1 };
  s1 -> s1 [0, 73] { R12233 += 1, R12171 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R12233 += 1 };
  s1 -> s1 [77, 65535] { R12233 += 1, R12171 += 1 };
  s2 -> s1 [0, 73] { R12233 += 1, R12171 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R12233 += 1, R12170 += 1, R12171 += 1 };
  s2 -> s1 [77, 65535] { R12233 += 1, R12171 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s0 [0, 65535] { R12234 += 1, R12235 += 1 };
  s0 -> s1 [0, 65535] { R12235 += 1, R12172 += 1, R12173 += 1 };
  s0 -> s2 [0, 65535] { R12235 += 1, R12173 += 1, R67 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R12235 += 1, R12172 += 1, R12173 += 1 };
  s1 -> s2 [0, 65535] { R12235 += 1, R12173 += 1, R67 += 1 };
  s2 -> s3 [0, 65535] { R12235 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R12235 += 1, R12173 += 1, R67 += 1 };
  s3 -> s3 [0, 65535] { R12235 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 76] { R12237 += 1, R12175 += 1 };
  s0 -> s0 [0, 65535] { R12236 += 1, R12237 += 1 };
  s0 -> s2 [0, 65535] { R12237 += 1, R12175 += 1, R69 += 1 };
  s0 -> s3 [0, 65535] { R12237 += 1, R12174 += 1, R12175 += 1 };
  s0 -> s1 [78, 65535] { R12237 += 1, R12175 += 1 };
  s1 -> s1 [0, 76] { R12237 += 1, R12175 += 1 };
  s1 -> s1 [0, 65535] { R12237 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [78, 65535] { R12237 += 1, R12175 += 1 };
  s2 -> s1 [0, 76] { R12237 += 1, R12175 += 1 };
  s2 -> s2 [0, 65535] { R12237 += 1, R12175 += 1, R69 += 1 };
  s2 -> s5 [0, 65535] { R12237 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [78, 65535] { R12237 += 1, R12175 += 1 };
  s3 -> s1 [0, 76] { R12237 += 1, R12175 += 1 };
  s3 -> s2 [0, 65535] { R12237 += 1, R12175 += 1, R69 += 1 };
  s3 -> s3 [0, 65535] { R12237 += 1, R12174 += 1, R12175 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [78, 65535] { R12237 += 1, R12175 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R12237 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 76] { R12239 += 1, R12177 += 1, R73 += 1 };
  s0 -> s2 [0, 65535] { R12239 += 1, R12176 += 1, R12177 += 1 };
  s0 -> s0 [0, 65535] { R12238 += 1, R12239 += 1 };
  s0 -> s3 [0, 65535] { R12239 += 1, R12177 += 1, R72 += 1, R73 += 1 };
  s0 -> s1 [78, 65535] { R12239 += 1, R12177 += 1, R73 += 1 };
  s1 -> s1 [0, 76] { R12239 += 1, R12177 += 1, R73 += 1 };
  s1 -> s1 [0, 65535] { R12239 += 1, R12177 += 1 };
  s1 -> s4 [0, 65535] { R12239 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [78, 65535] { R12239 += 1, R12177 += 1, R73 += 1 };
  s2 -> s1 [0, 76] { R12239 += 1, R12177 += 1, R73 += 1 };
  s2 -> s2 [0, 65535] { R12239 += 1, R12176 += 1, R12177 += 1 };
  s2 -> s3 [0, 65535] { R12239 += 1, R12177 += 1, R72 += 1, R73 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [78, 65535] { R12239 += 1, R12177 += 1, R73 += 1 };
  s3 -> s1 [0, 76] { R12239 += 1, R12177 += 1, R73 += 1 };
  s3 -> s4 [0, 65535] { R12239 += 1 };
  s3 -> s3 [0, 65535] { R12239 += 1, R12177 += 1, R72 += 1, R73 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [78, 65535] { R12239 += 1, R12177 += 1, R73 += 1 };
  s4 -> s4 [0, 65535] { R12239 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R12241 += 1, R12178 += 1, R12179 += 1 };
  s0 -> s2 [0, 65535] { R12241 += 1, R12179 += 1 };
  s0 -> s0 [0, 65535] { R12240 += 1, R12241 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R12241 += 1, R12178 += 1, R12179 += 1 };
  s1 -> s2 [0, 65535] { R12241 += 1, R12179 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R12241 += 1 };
  s2 -> s2 [0, 65535] { R12241 += 1, R12179 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R12241 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s0 [0, 65535] { R12242 += 1, R12243 += 1 };
  s0 -> s1 [0, 65535] { R12243 += 1, R12181 += 1 };
  s0 -> s2 [0, 65535] { R12243 += 1, R12180 += 1, R12181 += 1 };
  s1 -> s1 [0, 65535] { R12243 += 1, R12181 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R12243 += 1 };
  s2 -> s1 [0, 65535] { R12243 += 1, R12181 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R12243 += 1, R12180 += 1, R12181 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R12243 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R12245 += 1, R12182 += 1, R12183 += 1 };
  s0 -> s0 [0, 65535] { R12244 += 1, R12245 += 1 };
  s0 -> s2 [0, 65535] { R12245 += 1, R12183 += 1, R11952 += 1, R11953 += 1 };
  s0 -> s3 [0, 65535] { R12245 += 1, R12183 += 1 };
  s1 -> s1 [0, 65535] { R12245 += 1, R12182 += 1, R12183 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R12245 += 1, R12183 += 1, R11952 += 1, R11953 += 1 };
  s1 -> s3 [0, 65535] { R12245 += 1, R12183 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R12245 += 1 };
  s2 -> s2 [0, 65535] { R12245 += 1, R12183 += 1, R11952 += 1, R11953 += 1 };
  s2 -> s3 [0, 65535] { R12245 += 1, R12183 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R12245 += 1 };
  s3 -> s3 [0, 65535] { R12245 += 1, R12183 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R12245 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 77] { R12247 += 1, R12185 += 1, R12165 += 1 };
  s0 -> s2 [0, 65535] { R12247 += 1, R12184 += 1, R12185 += 1 };
  s0 -> s1 [0, 65535] { R12247 += 1, R12185 += 1 };
  s0 -> s0 [0, 65535] { R12246 += 1, R12247 += 1 };
  s0 -> s1 [79, 65535] { R12247 += 1, R12185 += 1, R12165 += 1 };
  s1 -> s1 [0, 77] { R12247 += 1, R12185 += 1, R12165 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R12247 += 1 };
  s1 -> s1 [0, 65535] { R12247 += 1, R12185 += 1 };
  s1 -> s1 [79, 65535] { R12247 += 1, R12185 += 1, R12165 += 1 };
  s2 -> s1 [0, 77] { R12247 += 1, R12185 += 1, R12165 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R12247 += 1, R12184 += 1, R12185 += 1 };
  s2 -> s1 [0, 65535] { R12247 += 1, R12185 += 1 };
  s2 -> s1 [79, 65535] { R12247 += 1, R12185 += 1, R12165 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R12247 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R12249 += 1, R12204 += 1, R12205 += 1 };
  s0 -> s0 [0, 65535] { R12248 += 1, R12249 += 1 };
  s0 -> s2 [0, 65535] { R12249 += 1, R12205 += 1, R18 += 1 };
  s1 -> s1 [0, 65535] { R12249 += 1, R12204 += 1, R12205 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R12249 += 1, R12205 += 1, R18 += 1 };
  s2 -> s3 [0, 65535] { R12249 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R12249 += 1, R12205 += 1, R18 += 1 };
  s3 -> s3 [0, 65535] { R12249 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 72] { R12251 += 1, R12207 += 1 };
  s0 -> s2 [0, 65535] { R12251 += 1, R12206 += 1, R12207 += 1 };
  s0 -> s0 [0, 65535] { R12250 += 1, R12251 += 1 };
  s0 -> s3 [73, 73] { R12251 += 1, R12207 += 1 };
  s0 -> s4 [73, 73] { R12251 += 1, R12207 += 1 };
  s0 -> s5 [77, 77] { R12251 += 1, R12207 += 1 };
  s0 -> s1 [78, 65535] { R12251 += 1, R12207 += 1 };
  s1 -> s1 [0, 72] { R12251 += 1, R12207 += 1 };
  s1 -> s3 [73, 73] { R12251 += 1, R12207 += 1 };
  s1 -> s4 [73, 73] { R12251 += 1, R12207 += 1 };
  s1 -> s5 [77, 77] { R12251 += 1, R12207 += 1 };
  s1 -> s1 [78, 65535] { R12251 += 1, R12207 += 1 };
  s2 -> s1 [0, 72] { R12251 += 1, R12207 += 1 };
  s2 -> s2 [0, 65535] { R12251 += 1, R12206 += 1, R12207 += 1 };
  s2 -> s3 [73, 73] { R12251 += 1, R12207 += 1 };
  s2 -> s4 [73, 73] { R12251 += 1, R12207 += 1 };
  s2 -> s5 [77, 77] { R12251 += 1, R12207 += 1 };
  s2 -> s1 [78, 65535] { R12251 += 1, R12207 += 1 };
  s3 -> s3 [0, 73] { R12251 += 1, R12207 += 1 };
  s3 -> s7 [77, 77] { R12251 += 1, R12207 += 1 };
  s3 -> s3 [78, 65535] { R12251 += 1, R12207 += 1 };
  s5 -> s5 [0, 72] { R12251 += 1, R12207 += 1 };
  s5 -> s5 [0, 65535] { R12251 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [73, 73] { R12251 += 1, R12207 += 1 };
  s5 -> s8 [73, 73] { R12251 += 1, R12207 += 1 };
  s5 -> s5 [77, 65535] { R12251 += 1, R12207 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 73] { R12251 += 1, R12207 += 1 };
  s7 -> s7 [0, 65535] { R12251 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [77, 65535] { R12251 += 1, R12207 += 1 };
  s8 -> s8 [0, 65535] { R12251 += 1 };
  s8 -> s6 [0, 65535];
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 72] { R12253 += 1, R12209 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R12252 += 1, R12253 += 1 };
  s0 -> s2 [0, 65535] { R12253 += 1, R12208 += 1, R12209 += 1 };
  s0 -> s3 [73, 73] { R12253 += 1, R12209 += 1, R66 += 1 };
  s0 -> s4 [73, 73] { R12253 += 1, R12209 += 1, R66 += 1 };
  s0 -> s1 [74, 65535] { R12253 += 1, R12209 += 1, R66 += 1 };
  s1 -> s1 [0, 72] { R12253 += 1, R12209 += 1, R66 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R12253 += 1 };
  s1 -> s3 [73, 73] { R12253 += 1, R12209 += 1, R66 += 1 };
  s1 -> s4 [73, 73] { R12253 += 1, R12209 += 1, R66 += 1 };
  s1 -> s1 [74, 65535] { R12253 += 1, R12209 += 1, R66 += 1 };
  s2 -> s1 [0, 72] { R12253 += 1, R12209 += 1, R66 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R12253 += 1, R12208 += 1, R12209 += 1 };
  s2 -> s3 [73, 73] { R12253 += 1, R12209 += 1, R66 += 1 };
  s2 -> s4 [73, 73] { R12253 += 1, R12209 += 1, R66 += 1 };
  s2 -> s1 [74, 65535] { R12253 += 1, R12209 += 1, R66 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R12253 += 1 };
  s4 -> s5 [0, 65535] { R12253 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R12253 += 1, R12209 += 1, R66 += 1 };
  s5 -> s5 [0, 65535] { R12253 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 72] { R12255 += 1, R12211 += 1, R68 += 1 };
  s0 -> s0 [0, 65535] { R12254 += 1, R12255 += 1 };
  s0 -> s2 [0, 65535] { R12255 += 1, R12210 += 1, R12211 += 1 };
  s0 -> s3 [73, 73] { R12255 += 1, R12211 += 1, R68 += 1 };
  s0 -> s4 [73, 73] { R12255 += 1, R12211 += 1, R68 += 1 };
  s0 -> s1 [74, 65535] { R12255 += 1, R12211 += 1, R68 += 1 };
  s1 -> s1 [0, 72] { R12255 += 1, R12211 += 1, R68 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R12255 += 1 };
  s1 -> s3 [73, 73] { R12255 += 1, R12211 += 1, R68 += 1 };
  s1 -> s4 [73, 73] { R12255 += 1, R12211 += 1, R68 += 1 };
  s1 -> s1 [74, 65535] { R12255 += 1, R12211 += 1, R68 += 1 };
  s2 -> s1 [0, 72] { R12255 += 1, R12211 += 1, R68 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R12255 += 1, R12210 += 1, R12211 += 1 };
  s2 -> s3 [73, 73] { R12255 += 1, R12211 += 1, R68 += 1 };
  s2 -> s4 [73, 73] { R12255 += 1, R12211 += 1, R68 += 1 };
  s2 -> s1 [74, 65535] { R12255 += 1, R12211 += 1, R68 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R12255 += 1, R12211 += 1, R68 += 1 };
  s3 -> s6 [0, 65535] { R12255 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R12255 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R12255 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 72] { R12257 += 1, R12213 += 1, R70 += 1, R71 += 1 };
  s0 -> s0 [0, 65535] { R12256 += 1, R12257 += 1 };
  s0 -> s2 [0, 65535] { R12257 += 1, R12212 += 1, R12213 += 1 };
  s0 -> s3 [73, 73] { R12257 += 1, R12213 += 1, R70 += 1, R71 += 1 };
  s0 -> s4 [73, 73] { R12257 += 1, R12213 += 1, R70 += 1, R71 += 1 };
  s0 -> s1 [74, 65535] { R12257 += 1, R12213 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 72] { R12257 += 1, R12213 += 1, R70 += 1, R71 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R12257 += 1 };
  s1 -> s3 [73, 73] { R12257 += 1, R12213 += 1, R70 += 1, R71 += 1 };
  s1 -> s4 [73, 73] { R12257 += 1, R12213 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [74, 65535] { R12257 += 1, R12213 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [0, 72] { R12257 += 1, R12213 += 1, R70 += 1, R71 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R12257 += 1, R12212 += 1, R12213 += 1 };
  s2 -> s3 [73, 73] { R12257 += 1, R12213 += 1, R70 += 1, R71 += 1 };
  s2 -> s4 [73, 73] { R12257 += 1, R12213 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [74, 65535] { R12257 += 1, R12213 += 1, R70 += 1, R71 += 1 };
  s3 -> s3 [0, 65535] { R12257 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R12257 += 1 };
  s4 -> s4 [0, 65535] { R12257 += 1, R12213 += 1, R70 += 1, R71 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R12257 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 72] { R12259 += 1, R12215 += 1, R10247 += 1, R10248 += 1 };
  s0 -> s2 [0, 72] { R12259 += 1, R12215 += 1, R10246 += 1, R10247 += 1 };
  s0 -> s3 [0, 65535] { R12259 += 1, R12214 += 1, R12215 += 1 };
  s0 -> s0 [0, 65535] { R12258 += 1, R12259 += 1 };
  s0 -> s4 [73, 73] { R12259 += 1, R12215 += 1, R10246 += 1, R10247 += 1 };
  s0 -> s5 [73, 73] { R12259 += 1, R12215 += 1, R10247 += 1, R10248 += 1 };
  s0 -> s6 [73, 73] { R12259 += 1, R12215 += 1, R10247 += 1, R10248 += 1 };
  s0 -> s7 [73, 73] { R12259 += 1, R12215 += 1, R10246 += 1, R10247 += 1 };
  s0 -> s1 [74, 65535] { R12259 += 1, R12215 += 1, R10247 += 1, R10248 += 1 };
  s0 -> s2 [74, 65535] { R12259 += 1, R12215 += 1, R10246 += 1, R10247 += 1 };
  s1 -> s1 [0, 72] { R12259 += 1, R12215 += 1, R10247 += 1, R10248 += 1 };
  s1 -> s11 [0, 72] { R12259 += 1, R12215 += 1 };
  s1 -> s5 [73, 73] { R12259 += 1, R12215 += 1, R10247 += 1, R10248 += 1 };
  s1 -> s6 [73, 73] { R12259 += 1, R12215 += 1, R10247 += 1, R10248 += 1 };
  s1 -> s8 [73, 73] { R12259 += 1, R12215 += 1 };
  s1 -> s12 [73, 73] { R12259 += 1, R12215 += 1 };
  s1 -> s1 [74, 65535] { R12259 += 1, R12215 += 1, R10247 += 1, R10248 += 1 };
  s1 -> s11 [74, 65535] { R12259 += 1, R12215 += 1 };
  s2 -> s1 [0, 72] { R12259 += 1, R12215 += 1, R10247 += 1, R10248 += 1 };
  s2 -> s2 [0, 72] { R12259 += 1, R12215 += 1, R10246 += 1, R10247 += 1 };
  s2 -> s4 [73, 73] { R12259 += 1, R12215 += 1, R10246 += 1, R10247 += 1 };
  s2 -> s5 [73, 73] { R12259 += 1, R12215 += 1, R10247 += 1, R10248 += 1 };
  s2 -> s6 [73, 73] { R12259 += 1, R12215 += 1, R10247 += 1, R10248 += 1 };
  s2 -> s7 [73, 73] { R12259 += 1, R12215 += 1, R10246 += 1, R10247 += 1 };
  s2 -> s1 [74, 65535] { R12259 += 1, R12215 += 1, R10247 += 1, R10248 += 1 };
  s2 -> s2 [74, 65535] { R12259 += 1, R12215 += 1, R10246 += 1, R10247 += 1 };
  s3 -> s1 [0, 72] { R12259 += 1, R12215 += 1, R10247 += 1, R10248 += 1 };
  s3 -> s2 [0, 72] { R12259 += 1, R12215 += 1, R10246 += 1, R10247 += 1 };
  s3 -> s3 [0, 65535] { R12259 += 1, R12214 += 1, R12215 += 1 };
  s3 -> s4 [73, 73] { R12259 += 1, R12215 += 1, R10246 += 1, R10247 += 1 };
  s3 -> s5 [73, 73] { R12259 += 1, R12215 += 1, R10247 += 1, R10248 += 1 };
  s3 -> s6 [73, 73] { R12259 += 1, R12215 += 1, R10247 += 1, R10248 += 1 };
  s3 -> s7 [73, 73] { R12259 += 1, R12215 += 1, R10246 += 1, R10247 += 1 };
  s3 -> s1 [74, 65535] { R12259 += 1, R12215 += 1, R10247 += 1, R10248 += 1 };
  s3 -> s2 [74, 65535] { R12259 += 1, R12215 += 1, R10246 += 1, R10247 += 1 };
  s4 -> s4 [0, 65535] { R12259 += 1, R12215 += 1, R10246 += 1, R10247 += 1 };
  s4 -> s6 [0, 65535] { R12259 += 1, R12215 += 1, R10247 += 1, R10248 += 1 };
  s6 -> s6 [0, 65535] { R12259 += 1, R12215 += 1, R10247 += 1, R10248 += 1 };
  s6 -> s8 [0, 65535] { R12259 += 1, R12215 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [0, 65535] { R12259 += 1 };
  s8 -> s8 [0, 65535] { R12259 += 1, R12215 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R12259 += 1 };
  s11 -> s11 [0, 72] { R12259 += 1, R12215 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R12259 += 1 };
  s11 -> s8 [73, 73] { R12259 += 1, R12215 += 1 };
  s11 -> s12 [73, 73] { R12259 += 1, R12215 += 1 };
  s11 -> s11 [74, 65535] { R12259 += 1, R12215 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R12259 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 72] { R12261 += 1, R12217 += 1, R11523 += 1 };
  s0 -> s2 [0, 72] { R12261 += 1, R12217 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s0 [0, 65535] { R12260 += 1, R12261 += 1 };
  s0 -> s3 [0, 65535] { R12261 += 1, R12216 += 1, R12217 += 1 };
  s0 -> s4 [73, 73] { R12261 += 1, R12217 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s5 [73, 73] { R12261 += 1, R12217 += 1, R11523 += 1 };
  s0 -> s6 [73, 73] { R12261 += 1, R12217 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s7 [73, 73] { R12261 += 1, R12217 += 1, R11523 += 1 };
  s0 -> s1 [74, 77] { R12261 += 1, R12217 += 1, R11523 += 1 };
  s0 -> s2 [74, 65535] { R12261 += 1, R12217 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s8 [78, 78] { R12261 += 1, R12217 += 1, R11523 += 1 };
  s0 -> s1 [79, 65535] { R12261 += 1, R12217 += 1, R11523 += 1 };
  s1 -> s1 [0, 72] { R12261 += 1, R12217 += 1, R11523 += 1 };
  s1 -> s5 [73, 73] { R12261 += 1, R12217 += 1, R11523 += 1 };
  s1 -> s7 [73, 73] { R12261 += 1, R12217 += 1, R11523 += 1 };
  s1 -> s1 [74, 77] { R12261 += 1, R12217 += 1, R11523 += 1 };
  s1 -> s8 [78, 78] { R12261 += 1, R12217 += 1, R11523 += 1 };
  s1 -> s1 [79, 65535] { R12261 += 1, R12217 += 1, R11523 += 1 };
  s2 -> s1 [0, 72] { R12261 += 1, R12217 += 1, R11523 += 1 };
  s2 -> s2 [0, 72] { R12261 += 1, R12217 += 1, R11522 += 1, R11523 += 1 };
  s2 -> s4 [73, 73] { R12261 += 1, R12217 += 1, R11522 += 1, R11523 += 1 };
  s2 -> s5 [73, 73] { R12261 += 1, R12217 += 1, R11523 += 1 };
  s2 -> s6 [73, 73] { R12261 += 1, R12217 += 1, R11522 += 1, R11523 += 1 };
  s2 -> s7 [73, 73] { R12261 += 1, R12217 += 1, R11523 += 1 };
  s2 -> s1 [74, 77] { R12261 += 1, R12217 += 1, R11523 += 1 };
  s2 -> s2 [74, 65535] { R12261 += 1, R12217 += 1, R11522 += 1, R11523 += 1 };
  s2 -> s8 [78, 78] { R12261 += 1, R12217 += 1, R11523 += 1 };
  s2 -> s1 [79, 65535] { R12261 += 1, R12217 += 1, R11523 += 1 };
  s3 -> s1 [0, 72] { R12261 += 1, R12217 += 1, R11523 += 1 };
  s3 -> s2 [0, 72] { R12261 += 1, R12217 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s3 [0, 65535] { R12261 += 1, R12216 += 1, R12217 += 1 };
  s3 -> s4 [73, 73] { R12261 += 1, R12217 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s5 [73, 73] { R12261 += 1, R12217 += 1, R11523 += 1 };
  s3 -> s6 [73, 73] { R12261 += 1, R12217 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s7 [73, 73] { R12261 += 1, R12217 += 1, R11523 += 1 };
  s3 -> s1 [74, 77] { R12261 += 1, R12217 += 1, R11523 += 1 };
  s3 -> s2 [74, 65535] { R12261 += 1, R12217 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s8 [78, 78] { R12261 += 1, R12217 += 1, R11523 += 1 };
  s3 -> s1 [79, 65535] { R12261 += 1, R12217 += 1, R11523 += 1 };
  s6 -> s7 [0, 77] { R12261 += 1, R12217 += 1, R11523 += 1 };
  s6 -> s6 [0, 65535] { R12261 += 1, R12217 += 1, R11522 += 1, R11523 += 1 };
  s6 -> s12 [78, 78] { R12261 += 1, R12217 += 1, R11523 += 1 };
  s6 -> s7 [79, 65535] { R12261 += 1, R12217 += 1, R11523 += 1 };
  s7 -> s7 [0, 77] { R12261 += 1, R12217 += 1, R11523 += 1 };
  s7 -> s12 [78, 78] { R12261 += 1, R12217 += 1, R11523 += 1 };
  s7 -> s7 [79, 65535] { R12261 += 1, R12217 += 1, R11523 += 1 };
  s8 -> s8 [0, 72] { R12261 += 1, R12217 += 1, R11523 += 1 };
  s8 -> s9 [0, 72] { R12261 += 1, R12217 += 1 };
  s8 -> s10 [73, 73] { R12261 += 1, R12217 += 1 };
  s8 -> s11 [73, 73] { R12261 += 1, R12217 += 1, R11523 += 1 };
  s8 -> s12 [73, 73] { R12261 += 1, R12217 += 1, R11523 += 1 };
  s8 -> s13 [73, 73] { R12261 += 1, R12217 += 1 };
  s8 -> s8 [74, 65535] { R12261 += 1, R12217 += 1, R11523 += 1 };
  s8 -> s9 [74, 65535] { R12261 += 1, R12217 += 1 };
  s9 -> s9 [0, 72] { R12261 += 1, R12217 += 1 };
  s9 -> s14 [0, 65535];
  s9 -> s9 [0, 65535] { R12261 += 1 };
  s9 -> s10 [73, 73] { R12261 += 1, R12217 += 1 };
  s9 -> s13 [73, 73] { R12261 += 1, R12217 += 1 };
  s9 -> s9 [74, 65535] { R12261 += 1, R12217 += 1 };
  s10 -> s10 [0, 65535] { R12261 += 1 };
  s10 -> s14 [0, 65535];
  s12 -> s12 [0, 65535] { R12261 += 1, R12217 += 1, R11523 += 1 };
  s12 -> s13 [0, 65535] { R12261 += 1, R12217 += 1 };
  s13 -> s14 [0, 65535];
  s13 -> s15 [0, 65535] { R12261 += 1 };
  s13 -> s13 [0, 65535] { R12261 += 1, R12217 += 1 };
  s14 -> s14 [0, 65535];
  s15 -> s14 [0, 65535];
  s15 -> s15 [0, 65535] { R12261 += 1 };
  accepting s13, s9, s14, s15, s10;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 72] { R12263 += 1, R12219 += 1, R11949 += 1, R11950 += 1 };
  s0 -> s2 [0, 72] { R12263 += 1, R12219 += 1, R11948 += 1, R11949 += 1 };
  s0 -> s3 [0, 65535] { R12263 += 1, R12218 += 1, R12219 += 1 };
  s0 -> s0 [0, 65535] { R12262 += 1, R12263 += 1 };
  s0 -> s4 [73, 73] { R12263 += 1, R12219 += 1, R11949 += 1, R11950 += 1 };
  s0 -> s5 [73, 73] { R12263 += 1, R12219 += 1, R11949 += 1, R11950 += 1 };
  s0 -> s6 [73, 73] { R12263 += 1, R12219 += 1, R11948 += 1, R11949 += 1 };
  s0 -> s7 [73, 73] { R12263 += 1, R12219 += 1, R11948 += 1, R11949 += 1 };
  s0 -> s1 [74, 65535] { R12263 += 1, R12219 += 1, R11949 += 1, R11950 += 1 };
  s0 -> s2 [74, 65535] { R12263 += 1, R12219 += 1, R11948 += 1, R11949 += 1 };
  s1 -> s1 [0, 72] { R12263 += 1, R12219 += 1, R11949 += 1, R11950 += 1 };
  s1 -> s1 [0, 65535] { R12263 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s4 [73, 73] { R12263 += 1, R12219 += 1, R11949 += 1, R11950 += 1 };
  s1 -> s5 [73, 73] { R12263 += 1, R12219 += 1, R11949 += 1, R11950 += 1 };
  s1 -> s1 [74, 65535] { R12263 += 1, R12219 += 1, R11949 += 1, R11950 += 1 };
  s2 -> s1 [0, 72] { R12263 += 1, R12219 += 1, R11949 += 1, R11950 += 1 };
  s2 -> s2 [0, 72] { R12263 += 1, R12219 += 1, R11948 += 1, R11949 += 1 };
  s2 -> s4 [73, 73] { R12263 += 1, R12219 += 1, R11949 += 1, R11950 += 1 };
  s2 -> s5 [73, 73] { R12263 += 1, R12219 += 1, R11949 += 1, R11950 += 1 };
  s2 -> s6 [73, 73] { R12263 += 1, R12219 += 1, R11948 += 1, R11949 += 1 };
  s2 -> s7 [73, 73] { R12263 += 1, R12219 += 1, R11948 += 1, R11949 += 1 };
  s2 -> s1 [74, 65535] { R12263 += 1, R12219 += 1, R11949 += 1, R11950 += 1 };
  s2 -> s2 [74, 65535] { R12263 += 1, R12219 += 1, R11948 += 1, R11949 += 1 };
  s3 -> s1 [0, 72] { R12263 += 1, R12219 += 1, R11949 += 1, R11950 += 1 };
  s3 -> s2 [0, 72] { R12263 += 1, R12219 += 1, R11948 += 1, R11949 += 1 };
  s3 -> s3 [0, 65535] { R12263 += 1, R12218 += 1, R12219 += 1 };
  s3 -> s4 [73, 73] { R12263 += 1, R12219 += 1, R11949 += 1, R11950 += 1 };
  s3 -> s5 [73, 73] { R12263 += 1, R12219 += 1, R11949 += 1, R11950 += 1 };
  s3 -> s6 [73, 73] { R12263 += 1, R12219 += 1, R11948 += 1, R11949 += 1 };
  s3 -> s7 [73, 73] { R12263 += 1, R12219 += 1, R11948 += 1, R11949 += 1 };
  s3 -> s1 [74, 65535] { R12263 += 1, R12219 += 1, R11949 += 1, R11950 += 1 };
  s3 -> s2 [74, 65535] { R12263 += 1, R12219 += 1, R11948 += 1, R11949 += 1 };
  s4 -> s4 [0, 65535] { R12263 += 1, R12219 += 1, R11949 += 1, R11950 += 1 };
  s4 -> s9 [0, 65535] { R12263 += 1 };
  s4 -> s8 [0, 65535];
  s5 -> s5 [0, 65535] { R12263 += 1 };
  s5 -> s8 [0, 65535];
  s7 -> s4 [0, 65535] { R12263 += 1, R12219 += 1, R11949 += 1, R11950 += 1 };
  s7 -> s7 [0, 65535] { R12263 += 1, R12219 += 1, R11948 += 1, R11949 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R12263 += 1 };
  s9 -> s8 [0, 65535];
  accepting s4, s8, s5, s9, s1;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 72] { R12265 += 1, R12221 += 1, R12163 += 1 };
  s0 -> s2 [0, 72] { R12265 += 1, R12221 += 1, R12162 += 1, R12163 += 1 };
  s0 -> s0 [0, 65535] { R12264 += 1, R12265 += 1 };
  s0 -> s3 [0, 65535] { R12265 += 1, R12220 += 1, R12221 += 1 };
  s0 -> s4 [73, 73] { R12265 += 1, R12221 += 1, R12163 += 1 };
  s0 -> s5 [73, 73] { R12265 += 1, R12221 += 1, R12162 += 1, R12163 += 1 };
  s0 -> s6 [73, 73] { R12265 += 1, R12221 += 1, R12162 += 1, R12163 += 1 };
  s0 -> s7 [73, 73] { R12265 += 1, R12221 += 1, R12163 += 1 };
  s0 -> s1 [74, 76] { R12265 += 1, R12221 += 1, R12163 += 1 };
  s0 -> s2 [74, 65535] { R12265 += 1, R12221 += 1, R12162 += 1, R12163 += 1 };
  s0 -> s8 [77, 77] { R12265 += 1, R12221 += 1, R12163 += 1 };
  s0 -> s1 [79, 65535] { R12265 += 1, R12221 += 1, R12163 += 1 };
  s1 -> s1 [0, 72] { R12265 += 1, R12221 += 1, R12163 += 1 };
  s1 -> s4 [73, 73] { R12265 += 1, R12221 += 1 };
  s1 -> s7 [73, 73] { R12265 += 1, R12221 += 1 };
  s1 -> s1 [74, 76] { R12265 += 1, R12221 += 1, R12163 += 1 };
  s1 -> s1 [74, 65535] { R12265 += 1, R12221 += 1 };
  s1 -> s8 [77, 77] { R12265 += 1, R12221 += 1, R12163 += 1 };
  s1 -> s1 [79, 65535] { R12265 += 1, R12221 += 1, R12163 += 1 };
  s2 -> s1 [0, 72] { R12265 += 1, R12221 += 1, R12163 += 1 };
  s2 -> s2 [0, 72] { R12265 += 1, R12221 += 1, R12162 += 1, R12163 += 1 };
  s2 -> s4 [73, 73] { R12265 += 1, R12221 += 1, R12163 += 1 };
  s2 -> s5 [73, 73] { R12265 += 1, R12221 += 1, R12162 += 1, R12163 += 1 };
  s2 -> s6 [73, 73] { R12265 += 1, R12221 += 1, R12162 += 1, R12163 += 1 };
  s2 -> s7 [73, 73] { R12265 += 1, R12221 += 1, R12163 += 1 };
  s2 -> s1 [74, 76] { R12265 += 1, R12221 += 1, R12163 += 1 };
  s2 -> s2 [74, 65535] { R12265 += 1, R12221 += 1, R12162 += 1, R12163 += 1 };
  s2 -> s8 [77, 77] { R12265 += 1, R12221 += 1, R12163 += 1 };
  s2 -> s1 [79, 65535] { R12265 += 1, R12221 += 1, R12163 += 1 };
  s3 -> s1 [0, 72] { R12265 += 1, R12221 += 1, R12163 += 1 };
  s3 -> s2 [0, 72] { R12265 += 1, R12221 += 1, R12162 += 1, R12163 += 1 };
  s3 -> s3 [0, 65535] { R12265 += 1, R12220 += 1, R12221 += 1 };
  s3 -> s4 [73, 73] { R12265 += 1, R12221 += 1, R12163 += 1 };
  s3 -> s5 [73, 73] { R12265 += 1, R12221 += 1, R12162 += 1, R12163 += 1 };
  s3 -> s6 [73, 73] { R12265 += 1, R12221 += 1, R12162 += 1, R12163 += 1 };
  s3 -> s7 [73, 73] { R12265 += 1, R12221 += 1, R12163 += 1 };
  s3 -> s1 [74, 76] { R12265 += 1, R12221 += 1, R12163 += 1 };
  s3 -> s2 [74, 65535] { R12265 += 1, R12221 += 1, R12162 += 1, R12163 += 1 };
  s3 -> s8 [77, 77] { R12265 += 1, R12221 += 1, R12163 += 1 };
  s3 -> s1 [79, 65535] { R12265 += 1, R12221 += 1, R12163 += 1 };
  s6 -> s7 [0, 76] { R12265 += 1, R12221 += 1, R12163 += 1 };
  s6 -> s6 [0, 65535] { R12265 += 1, R12221 += 1, R12162 += 1, R12163 += 1 };
  s6 -> s11 [77, 77] { R12265 += 1, R12221 += 1, R12163 += 1 };
  s6 -> s7 [79, 65535] { R12265 += 1, R12221 += 1, R12163 += 1 };
  s7 -> s7 [0, 76] { R12265 += 1, R12221 += 1, R12163 += 1 };
  s7 -> s7 [0, 65535] { R12265 += 1, R12221 += 1 };
  s7 -> s11 [77, 77] { R12265 += 1, R12221 += 1, R12163 += 1 };
  s7 -> s7 [79, 65535] { R12265 += 1, R12221 += 1, R12163 += 1 };
  s8 -> s8 [0, 72] { R12265 += 1, R12221 += 1, R12163 += 1 };
  s8 -> s8 [0, 65535] { R12265 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [73, 73] { R12265 += 1, R12221 += 1 };
  s8 -> s11 [73, 73] { R12265 += 1, R12221 += 1 };
  s8 -> s8 [74, 77] { R12265 += 1, R12221 += 1, R12163 += 1 };
  s8 -> s8 [74, 65535] { R12265 += 1, R12221 += 1 };
  s8 -> s8 [79, 65535] { R12265 += 1, R12221 += 1, R12163 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R12265 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s11 [0, 77] { R12265 += 1, R12221 += 1, R12163 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s12 [0, 65535] { R12265 += 1 };
  s11 -> s11 [0, 65535] { R12265 += 1, R12221 += 1 };
  s11 -> s11 [79, 65535] { R12265 += 1, R12221 += 1, R12163 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R12265 += 1 };
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
synchronised {  // Automata constraining P54
automaton P54_0 {
  init s0;
  s0 -> s1 [109, 109];
  accepting s1;
};
};
constraint R2 = R12265 && R20 - R12265 = -1 && R21 = R12265 && R22 - R12265 = -1 && R23 = R12265 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R11525 + -1*R11523 - R53 = 0 && R52 + R11524 + R11522 = 0 && R12206 = 0 && R12207 = 0 && R12214 = 0 && R12215 = 0 && R12216 = 0 && R12217 = 0 && R12218 = 0 && R12219 = 0 && R12220 = 0 && R12221 = 0 && R12222 = 0 && R12223 = R12265 && R12224 = 0 && R12225 = R12265 && R12226 = 0 && R12227 = R12265 && R12228 = 0 && R12229 = R12265 && R12230 = 0 && R12231 = R12265 && R12232 = 0 && R12233 = R12265 && R12234 = 0 && R12235 = R12265 && R12236 = 0 && R12237 = R12265 && R12238 = 0 && R12239 = R12265 && R12240 = 0 && R12241 = R12265 && R12242 = 0 && R12243 = R12265 && R12244 = 0 && R12245 = R12265 && R12246 = 0 && R12247 = R12265 && R12248 = 0 && R12249 = R12265 && R12250 = 0 && R12251 = R12265 && R12252 = 0 && R12253 = R12265 && R12254 = 0 && R12255 = R12265 && R12256 = 0 && R12257 = R12265 && R12258 = 0 && R12259 = R12265 && R12260 = 0 && R12261 = R12265 && R12262 = 0 && R12263 = R12265 && R12264 = 0 && -1 < R1 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R11525 + -1*R11523 - R53 < 1 && 0 < R12265 && (R1 != 0 || R17 = 0 || (R12166 = 0 && R12167 = 0)) && (R1 != 0 || R17 = 0 || (R12168 = 0 && R12169 = 0)) && (R1 != 0 || R17 = 0 || (R12170 = 0 && R12171 = 0)) && (R1 != 0 || R17 = 0 || (R12172 = 0 && R12173 = 0)) && (R1 != 0 || R17 = 0 || (R12174 = 0 && R12175 = 0)) && (R1 != 0 || R17 = 0 || (R12176 = 0 && R12177 = 0)) && (R1 != 0 || R17 = 0 || (R12178 = 0 && R12179 = 0)) && (R1 != 0 || R17 = 0 || (R12180 = 0 && R12181 = 0)) && (R1 != 0 || R17 = 0 || (R12182 = 0 && R12183 = 0)) && (R1 != 0 || R17 = 0 || (R12184 = 0 && R12185 = 0)) && (R48 + R10251 + R10248 != 0 || ((R42 + R72 + R70 != 0 || R43 + R73 + R71 + -1*R11525 + -1*R11523 - R53 = 0 || R53 + R11525 + R11523 < 1) && (R42 + R72 + R70 = 0 || R53 + R11525 + R11523 < 1))) && (R48 + R10251 + R10248 != 0 || ((R46 + R10249 + R10246 != 0 || R47 + R10250 + R10247 + -1*R11525 + -1*R11523 - R53 = 0 || R53 + R11525 + R11523 < 1) && (R46 + R10249 + R10246 = 0 || R53 + R11525 + R11523 < 1))) && (R12166 != 0 || R1 = R12167 || R1 < 1) && (R12168 != 0 || R1 = R12169 || R1 < 1) && (R12170 != 0 || R1 = R12171 || R1 < 1) && (R12172 != 0 || R1 = R12173 || R1 < 1) && (R12174 != 0 || R1 = R12175 || R1 < 1) && (R12176 != 0 || R1 = R12177 || R1 < 1) && (R12178 != 0 || R1 = R12179 || R1 < 1) && (R12180 != 0 || R1 = R12181 || R1 < 1) && (R12182 != 0 || R1 = R12183 || R1 < 1) && (R12184 != 0 || R1 = R12185 || R1 < 1) && (R18 = 0 || (R12204 = 0 && R12205 = 0)) && (R18 = 0 || (R12208 = 0 && R12209 = 0)) && (R18 = 0 || (R12210 = 0 && R12211 = 0)) && (R18 = 0 || (R12212 = 0 && R12213 = 0)) && (R19 = 0 || (R12186 = 0 && R12187 = 0)) && (R19 = 0 || (R12188 = 0 && R12189 = 0)) && (R19 = 0 || (R12190 = 0 && R12191 = 0)) && (R19 = 0 || (R12192 = 0 && R12193 = 0)) && (R19 = 0 || (R12194 = 0 && R12195 = 0)) && (R19 = 0 || (R12196 = 0 && R12197 = 0)) && (R19 = 0 || (R12198 = 0 && R12199 = 0)) && (R19 = 0 || (R12200 = 0 && R12201 = 0)) && (R19 = 0 || (R12202 = 0 && R12203 = 0)) && (R48 + R10251 + R10248 = 0 || (R42 + R72 + R70 = 0 && R43 + R73 + R71 + -1*R11525 + -1*R11523 - R53 = 0)) && (R48 + R10251 + R10248 = 0 || (R46 + R10249 + R10246 = 0 && R47 + R10250 + R10247 + -1*R11525 + -1*R11523 - R53 = 0)) && (R58 + R11953 + R11950 = 0 || (R56 + R11951 + R11948 = 0 && R57 + R11952 + R11949 = 0)) && (R58 + R11953 + R11950 = 0 || (R62 + R12164 + R12162 = 0 && R63 + R12165 + R12163 = 0)) && (R12166 = 0 || R1 < 1) && (R12168 = 0 || R1 < 1) && (R12170 = 0 || R1 < 1) && (R12172 = 0 || R1 < 1) && (R12174 = 0 || R1 < 1) && (R12176 = 0 || R1 < 1) && (R12178 = 0 || R1 < 1) && (R12180 = 0 || R1 < 1) && (R12182 = 0 || R1 < 1) && (R12184 = 0 || R1 < 1);
// End of Parikh automata intersection problem
