// Parikh automata intersection problem, generated by OSTRICH+
counter int
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 72];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [73, 73];
  s0 -> s1 [74, 65535];
  s1 -> s1 [0, 72];
  s1 -> s2 [73, 73];
  s1 -> s1 [74, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s1 [0, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R25 += 1 };
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R13671 += 1, R19 += 1 };
  s0 -> s0 [0, 65535] { R13670 += 1, R13671 += 1 };
  s1 -> s1 [0, 65535] { R13671 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 72] { R13673 += 1 };
  s0 -> s0 [0, 65535] { R13672 += 1, R13673 += 1 };
  s0 -> s2 [73, 73] { R13673 += 1 };
  s0 -> s3 [73, 73] { R13673 += 1 };
  s0 -> s1 [78, 65535] { R13673 += 1 };
  s1 -> s1 [0, 72] { R13673 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R13673 += 1 };
  s1 -> s3 [73, 73] { R13673 += 1 };
  s1 -> s1 [78, 65535] { R13673 += 1 };
  s2 -> s2 [0, 73] { R13673 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [78, 65535] { R13673 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 72] { R13675 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R13674 += 1, R13675 += 1 };
  s0 -> s2 [73, 73] { R13675 += 1, R38 += 1 };
  s0 -> s3 [73, 73] { R13675 += 1, R38 += 1 };
  s0 -> s1 [74, 65535] { R13675 += 1, R38 += 1 };
  s1 -> s1 [0, 72] { R13675 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R13675 += 1, R38 += 1 };
  s1 -> s3 [73, 73] { R13675 += 1, R38 += 1 };
  s1 -> s1 [74, 65535] { R13675 += 1, R38 += 1 };
  s2 -> s2 [0, 65535] { R13675 += 1, R38 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 72] { R13677 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R13676 += 1, R13677 += 1 };
  s0 -> s2 [73, 73] { R13677 += 1, R40 += 1 };
  s0 -> s3 [73, 73] { R13677 += 1, R40 += 1 };
  s0 -> s1 [74, 65535] { R13677 += 1, R40 += 1 };
  s1 -> s1 [0, 72] { R13677 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R13677 += 1, R40 += 1 };
  s1 -> s3 [73, 73] { R13677 += 1, R40 += 1 };
  s1 -> s1 [74, 65535] { R13677 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R13677 += 1, R40 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 72] { R13679 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R13678 += 1, R13679 += 1 };
  s0 -> s2 [73, 73] { R13679 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [73, 73] { R13679 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [74, 65535] { R13679 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 72] { R13679 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R13679 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [73, 73] { R13679 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [74, 65535] { R13679 += 1, R42 += 1, R43 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R13679 += 1, R42 += 1, R43 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 72] { R13681 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R13680 += 1, R13681 += 1 };
  s0 -> s2 [73, 73] { R13681 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [73, 73] { R13681 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [74, 65535] { R13681 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 72] { R13681 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R13681 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [73, 73] { R13681 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [74, 65535] { R13681 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535] { R13681 += 1, R46 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 72] { R13683 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R13682 += 1, R13683 += 1 };
  s0 -> s2 [73, 73] { R13683 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [73, 73] { R13683 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [74, 65535] { R13683 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 72] { R13683 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R13683 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [73, 73] { R13683 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [74, 65535] { R13683 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535] { R13683 += 1, R52 += 1, R53 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 72] { R13685 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R13684 += 1, R13685 += 1 };
  s0 -> s2 [73, 73] { R13685 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [73, 73] { R13685 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [74, 65535] { R13685 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 72] { R13685 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R13685 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [73, 73] { R13685 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [74, 65535] { R13685 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535] { R13685 += 1, R56 += 1, R57 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 72] { R13687 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R13686 += 1, R13687 += 1 };
  s0 -> s2 [73, 73] { R13687 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [73, 73] { R13687 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [74, 65535] { R13687 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 72] { R13687 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R13687 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [73, 73] { R13687 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [74, 65535] { R13687 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535] { R13687 += 1, R62 += 1, R63 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 72] { R13707 += 1 };
  s0 -> s0 [0, 65535] { R13706 += 1, R13707 += 1 };
  s0 -> s2 [73, 73] { R13707 += 1 };
  s0 -> s1 [74, 65535] { R13707 += 1 };
  s1 -> s1 [0, 72] { R13707 += 1 };
  s1 -> s2 [73, 73] { R13707 += 1 };
  s1 -> s1 [74, 65535] { R13707 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R13707 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R13708 += 1, R13709 += 1 };
  s0 -> s1 [0, 65535] { R13709 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R13709 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 72] { R13711 += 1 };
  s0 -> s2 [0, 65535] { R13711 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R13710 += 1, R13711 += 1 };
  s0 -> s3 [73, 73] { R13711 += 1 };
  s0 -> s1 [74, 65535] { R13711 += 1 };
  s1 -> s1 [0, 72] { R13711 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [73, 73] { R13711 += 1 };
  s1 -> s1 [74, 65535] { R13711 += 1 };
  s2 -> s1 [0, 72] { R13711 += 1 };
  s2 -> s2 [0, 65535] { R13711 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [73, 73] { R13711 += 1 };
  s2 -> s1 [74, 65535] { R13711 += 1 };
  s3 -> s3 [0, 65535] { R13711 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 72] { R13713 += 1, R13651 += 1 };
  s0 -> s2 [0, 65535] { R13713 += 1, R13650 += 1, R13651 += 1 };
  s0 -> s0 [0, 65535] { R13712 += 1, R13713 += 1 };
  s0 -> s1 [74, 65535] { R13713 += 1, R13651 += 1 };
  s1 -> s1 [0, 72] { R13713 += 1, R13651 += 1 };
  s1 -> s1 [0, 65535] { R13713 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [74, 65535] { R13713 += 1, R13651 += 1 };
  s2 -> s1 [0, 72] { R13713 += 1, R13651 += 1 };
  s2 -> s2 [0, 65535] { R13713 += 1, R13650 += 1, R13651 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [74, 65535] { R13713 += 1, R13651 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R13715 += 1, R13653 += 1, R17 += 1 };
  s0 -> s0 [0, 65535] { R13714 += 1, R13715 += 1 };
  s0 -> s2 [0, 65535] { R13715 += 1, R13652 += 1, R13653 += 1 };
  s1 -> s1 [0, 65535] { R13715 += 1, R13653 += 1, R17 += 1 };
  s1 -> s4 [0, 65535] { R13715 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R13715 += 1, R13653 += 1, R17 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R13715 += 1, R13652 += 1, R13653 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R13715 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 73] { R13717 += 1, R13655 += 1 };
  s0 -> s0 [0, 65535] { R13716 += 1, R13717 += 1 };
  s0 -> s2 [0, 65535] { R13717 += 1, R13654 += 1, R13655 += 1 };
  s0 -> s1 [77, 65535] { R13717 += 1, R13655 += 1 };
  s1 -> s1 [0, 73] { R13717 += 1, R13655 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R13717 += 1 };
  s1 -> s1 [77, 65535] { R13717 += 1, R13655 += 1 };
  s2 -> s1 [0, 73] { R13717 += 1, R13655 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R13717 += 1, R13654 += 1, R13655 += 1 };
  s2 -> s1 [77, 65535] { R13717 += 1, R13655 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s0 [0, 65535] { R13718 += 1, R13719 += 1 };
  s0 -> s1 [0, 65535] { R13719 += 1, R13656 += 1, R13657 += 1 };
  s0 -> s2 [0, 65535] { R13719 += 1, R13657 += 1, R67 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R13719 += 1, R13656 += 1, R13657 += 1 };
  s1 -> s2 [0, 65535] { R13719 += 1, R13657 += 1, R67 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R13719 += 1 };
  s2 -> s2 [0, 65535] { R13719 += 1, R13657 += 1, R67 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R13719 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 76] { R13721 += 1, R13659 += 1 };
  s0 -> s2 [0, 65535] { R13721 += 1, R13658 += 1, R13659 += 1 };
  s0 -> s0 [0, 65535] { R13720 += 1, R13721 += 1 };
  s0 -> s3 [0, 65535] { R13721 += 1, R13659 += 1, R69 += 1 };
  s0 -> s1 [78, 65535] { R13721 += 1, R13659 += 1 };
  s1 -> s1 [0, 76] { R13721 += 1, R13659 += 1 };
  s1 -> s1 [0, 65535] { R13721 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [78, 65535] { R13721 += 1, R13659 += 1 };
  s2 -> s1 [0, 76] { R13721 += 1, R13659 += 1 };
  s2 -> s2 [0, 65535] { R13721 += 1, R13658 += 1, R13659 += 1 };
  s2 -> s3 [0, 65535] { R13721 += 1, R13659 += 1, R69 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [78, 65535] { R13721 += 1, R13659 += 1 };
  s3 -> s1 [0, 76] { R13721 += 1, R13659 += 1 };
  s3 -> s3 [0, 65535] { R13721 += 1, R13659 += 1, R69 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R13721 += 1 };
  s3 -> s1 [78, 65535] { R13721 += 1, R13659 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R13721 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 76] { R13723 += 1, R13661 += 1, R73 += 1 };
  s0 -> s2 [0, 65535] { R13723 += 1, R13660 += 1, R13661 += 1 };
  s0 -> s0 [0, 65535] { R13722 += 1, R13723 += 1 };
  s0 -> s3 [0, 65535] { R13723 += 1, R13661 += 1, R72 += 1, R73 += 1 };
  s0 -> s1 [78, 65535] { R13723 += 1, R13661 += 1, R73 += 1 };
  s1 -> s1 [0, 76] { R13723 += 1, R13661 += 1, R73 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R13723 += 1 };
  s1 -> s1 [0, 65535] { R13723 += 1, R13661 += 1 };
  s1 -> s1 [78, 65535] { R13723 += 1, R13661 += 1, R73 += 1 };
  s2 -> s1 [0, 76] { R13723 += 1, R13661 += 1, R73 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R13723 += 1, R13660 += 1, R13661 += 1 };
  s2 -> s3 [0, 65535] { R13723 += 1, R13661 += 1, R72 += 1, R73 += 1 };
  s2 -> s1 [78, 65535] { R13723 += 1, R13661 += 1, R73 += 1 };
  s3 -> s1 [0, 76] { R13723 += 1, R13661 += 1, R73 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R13723 += 1, R13661 += 1, R72 += 1, R73 += 1 };
  s3 -> s5 [0, 65535] { R13723 += 1 };
  s3 -> s1 [78, 65535] { R13723 += 1, R13661 += 1, R73 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R13723 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s0 [0, 65535] { R13724 += 1, R13725 += 1 };
  s0 -> s1 [0, 65535] { R13725 += 1, R13663 += 1 };
  s0 -> s2 [0, 65535] { R13725 += 1, R13662 += 1, R13663 += 1 };
  s1 -> s1 [0, 65535] { R13725 += 1, R13663 += 1 };
  s1 -> s4 [0, 65535] { R13725 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R13725 += 1, R13663 += 1 };
  s2 -> s2 [0, 65535] { R13725 += 1, R13662 += 1, R13663 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R13725 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 77] { R13727 += 1, R13665 += 1, R12795 += 1 };
  s0 -> s0 [0, 65535] { R13726 += 1, R13727 += 1 };
  s0 -> s2 [0, 65535] { R13727 += 1, R13664 += 1, R13665 += 1 };
  s0 -> s3 [78, 78] { R13727 += 1, R13665 += 1, R12795 += 1 };
  s0 -> s1 [79, 65535] { R13727 += 1, R13665 += 1, R12795 += 1 };
  s1 -> s1 [0, 77] { R13727 += 1, R13665 += 1, R12795 += 1 };
  s1 -> s3 [78, 78] { R13727 += 1, R13665 += 1, R12795 += 1 };
  s1 -> s1 [79, 65535] { R13727 += 1, R13665 += 1, R12795 += 1 };
  s2 -> s1 [0, 77] { R13727 += 1, R13665 += 1, R12795 += 1 };
  s2 -> s2 [0, 65535] { R13727 += 1, R13664 += 1, R13665 += 1 };
  s2 -> s3 [78, 78] { R13727 += 1, R13665 += 1, R12795 += 1 };
  s2 -> s1 [79, 65535] { R13727 += 1, R13665 += 1, R12795 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R13727 += 1 };
  s3 -> s6 [0, 65535] { R13727 += 1, R13665 += 1 };
  s3 -> s3 [0, 65535] { R13727 += 1, R13665 += 1, R12795 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R13727 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R13727 += 1 };
  s6 -> s6 [0, 65535] { R13727 += 1, R13665 += 1 };
  accepting s3, s4, s5, s6;
};
automaton value2_28 {
  init s0;
  s0 -> s0 [0, 65535] { R13728 += 1, R13729 += 1 };
  s0 -> s1 [0, 65535] { R13729 += 1, R13667 += 1 };
  s0 -> s2 [0, 65535] { R13729 += 1, R13666 += 1, R13667 += 1 };
  s1 -> s4 [0, 65535] { R13729 += 1 };
  s1 -> s1 [0, 65535] { R13729 += 1, R13667 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R13729 += 1, R13667 += 1 };
  s2 -> s2 [0, 65535] { R13729 += 1, R13666 += 1, R13667 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R13729 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 76] { R13731 += 1, R13669 += 1, R13649 += 1 };
  s0 -> s0 [0, 65535] { R13730 += 1, R13731 += 1 };
  s0 -> s2 [0, 65535] { R13731 += 1, R13669 += 1, R13648 += 1, R13649 += 1 };
  s0 -> s3 [0, 65535] { R13731 += 1, R13668 += 1, R13669 += 1 };
  s0 -> s4 [77, 77] { R13731 += 1, R13669 += 1, R13649 += 1 };
  s0 -> s5 [77, 77] { R13731 += 1, R13669 += 1, R13649 += 1 };
  s0 -> s1 [79, 65535] { R13731 += 1, R13669 += 1, R13649 += 1 };
  s1 -> s1 [0, 76] { R13731 += 1, R13669 += 1, R13649 += 1 };
  s1 -> s1 [0, 65535] { R13731 += 1, R13669 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R13731 += 1 };
  s1 -> s4 [77, 77] { R13731 += 1, R13669 += 1, R13649 += 1 };
  s1 -> s5 [77, 77] { R13731 += 1, R13669 += 1, R13649 += 1 };
  s1 -> s1 [79, 65535] { R13731 += 1, R13669 += 1, R13649 += 1 };
  s2 -> s1 [0, 76] { R13731 += 1, R13669 += 1, R13649 += 1 };
  s2 -> s2 [0, 65535] { R13731 += 1, R13669 += 1, R13648 += 1, R13649 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s7 [0, 65535] { R13731 += 1 };
  s2 -> s4 [77, 77] { R13731 += 1, R13669 += 1, R13649 += 1 };
  s2 -> s5 [77, 77] { R13731 += 1, R13669 += 1, R13649 += 1 };
  s2 -> s1 [79, 65535] { R13731 += 1, R13669 += 1, R13649 += 1 };
  s3 -> s1 [0, 76] { R13731 += 1, R13669 += 1, R13649 += 1 };
  s3 -> s2 [0, 65535] { R13731 += 1, R13669 += 1, R13648 += 1, R13649 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R13731 += 1, R13668 += 1, R13669 += 1 };
  s3 -> s4 [77, 77] { R13731 += 1, R13669 += 1, R13649 += 1 };
  s3 -> s5 [77, 77] { R13731 += 1, R13669 += 1, R13649 += 1 };
  s3 -> s1 [79, 65535] { R13731 += 1, R13669 += 1, R13649 += 1 };
  s4 -> s4 [0, 77] { R13731 += 1, R13669 += 1, R13649 += 1 };
  s4 -> s4 [0, 65535] { R13731 += 1, R13669 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R13731 += 1 };
  s4 -> s4 [79, 65535] { R13731 += 1, R13669 += 1, R13649 += 1 };
  s5 -> s5 [0, 65535] { R13731 += 1, R13669 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R13731 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R13731 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R13733 += 1, R13689 += 1, R18 += 1 };
  s0 -> s2 [0, 65535] { R13733 += 1, R13688 += 1, R13689 += 1 };
  s0 -> s0 [0, 65535] { R13732 += 1, R13733 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R13733 += 1, R13689 += 1, R18 += 1 };
  s1 -> s4 [0, 65535] { R13733 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R13733 += 1, R13689 += 1, R18 += 1 };
  s2 -> s2 [0, 65535] { R13733 += 1, R13688 += 1, R13689 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R13733 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 72] { R13735 += 1, R13691 += 1 };
  s0 -> s2 [0, 65535] { R13735 += 1, R13690 += 1, R13691 += 1 };
  s0 -> s0 [0, 65535] { R13734 += 1, R13735 += 1 };
  s0 -> s3 [73, 73] { R13735 += 1, R13691 += 1 };
  s0 -> s4 [73, 73] { R13735 += 1, R13691 += 1 };
  s0 -> s5 [77, 77] { R13735 += 1, R13691 += 1 };
  s0 -> s1 [78, 65535] { R13735 += 1, R13691 += 1 };
  s1 -> s1 [0, 72] { R13735 += 1, R13691 += 1 };
  s1 -> s3 [73, 73] { R13735 += 1, R13691 += 1 };
  s1 -> s4 [73, 73] { R13735 += 1, R13691 += 1 };
  s1 -> s5 [77, 77] { R13735 += 1, R13691 += 1 };
  s1 -> s1 [78, 65535] { R13735 += 1, R13691 += 1 };
  s2 -> s1 [0, 72] { R13735 += 1, R13691 += 1 };
  s2 -> s2 [0, 65535] { R13735 += 1, R13690 += 1, R13691 += 1 };
  s2 -> s3 [73, 73] { R13735 += 1, R13691 += 1 };
  s2 -> s4 [73, 73] { R13735 += 1, R13691 += 1 };
  s2 -> s5 [77, 77] { R13735 += 1, R13691 += 1 };
  s2 -> s1 [78, 65535] { R13735 += 1, R13691 += 1 };
  s3 -> s3 [0, 73] { R13735 += 1, R13691 += 1 };
  s3 -> s7 [77, 77] { R13735 += 1, R13691 += 1 };
  s3 -> s3 [78, 65535] { R13735 += 1, R13691 += 1 };
  s5 -> s5 [0, 72] { R13735 += 1, R13691 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R13735 += 1 };
  s5 -> s7 [73, 73] { R13735 += 1, R13691 += 1 };
  s5 -> s8 [73, 73] { R13735 += 1, R13691 += 1 };
  s5 -> s5 [77, 65535] { R13735 += 1, R13691 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 73] { R13735 += 1, R13691 += 1 };
  s7 -> s7 [0, 65535] { R13735 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [77, 65535] { R13735 += 1, R13691 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R13735 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 72] { R13737 += 1, R13693 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R13736 += 1, R13737 += 1 };
  s0 -> s2 [0, 65535] { R13737 += 1, R13692 += 1, R13693 += 1 };
  s0 -> s3 [73, 73] { R13737 += 1, R13693 += 1, R66 += 1 };
  s0 -> s4 [73, 73] { R13737 += 1, R13693 += 1, R66 += 1 };
  s0 -> s1 [74, 65535] { R13737 += 1, R13693 += 1, R66 += 1 };
  s1 -> s1 [0, 72] { R13737 += 1, R13693 += 1, R66 += 1 };
  s1 -> s1 [0, 65535] { R13737 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R13737 += 1, R13693 += 1, R66 += 1 };
  s1 -> s4 [73, 73] { R13737 += 1, R13693 += 1, R66 += 1 };
  s1 -> s1 [74, 65535] { R13737 += 1, R13693 += 1, R66 += 1 };
  s2 -> s1 [0, 72] { R13737 += 1, R13693 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R13737 += 1, R13692 += 1, R13693 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R13737 += 1, R13693 += 1, R66 += 1 };
  s2 -> s4 [73, 73] { R13737 += 1, R13693 += 1, R66 += 1 };
  s2 -> s1 [74, 65535] { R13737 += 1, R13693 += 1, R66 += 1 };
  s3 -> s3 [0, 65535] { R13737 += 1, R13693 += 1, R66 += 1 };
  s3 -> s6 [0, 65535] { R13737 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R13737 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R13737 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 72] { R13739 += 1, R13695 += 1, R68 += 1 };
  s0 -> s0 [0, 65535] { R13738 += 1, R13739 += 1 };
  s0 -> s2 [0, 65535] { R13739 += 1, R13694 += 1, R13695 += 1 };
  s0 -> s3 [73, 73] { R13739 += 1, R13695 += 1, R68 += 1 };
  s0 -> s4 [73, 73] { R13739 += 1, R13695 += 1, R68 += 1 };
  s0 -> s1 [74, 65535] { R13739 += 1, R13695 += 1, R68 += 1 };
  s1 -> s1 [0, 72] { R13739 += 1, R13695 += 1, R68 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R13739 += 1 };
  s1 -> s3 [73, 73] { R13739 += 1, R13695 += 1, R68 += 1 };
  s1 -> s4 [73, 73] { R13739 += 1, R13695 += 1, R68 += 1 };
  s1 -> s1 [74, 65535] { R13739 += 1, R13695 += 1, R68 += 1 };
  s2 -> s1 [0, 72] { R13739 += 1, R13695 += 1, R68 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R13739 += 1, R13694 += 1, R13695 += 1 };
  s2 -> s3 [73, 73] { R13739 += 1, R13695 += 1, R68 += 1 };
  s2 -> s4 [73, 73] { R13739 += 1, R13695 += 1, R68 += 1 };
  s2 -> s1 [74, 65535] { R13739 += 1, R13695 += 1, R68 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R13739 += 1, R13695 += 1, R68 += 1 };
  s3 -> s6 [0, 65535] { R13739 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R13739 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R13739 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 72] { R13741 += 1, R13697 += 1, R70 += 1, R71 += 1 };
  s0 -> s0 [0, 65535] { R13740 += 1, R13741 += 1 };
  s0 -> s2 [0, 65535] { R13741 += 1, R13696 += 1, R13697 += 1 };
  s0 -> s3 [73, 73] { R13741 += 1, R13697 += 1, R70 += 1, R71 += 1 };
  s0 -> s4 [73, 73] { R13741 += 1, R13697 += 1, R70 += 1, R71 += 1 };
  s0 -> s1 [74, 65535] { R13741 += 1, R13697 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 72] { R13741 += 1, R13697 += 1, R70 += 1, R71 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R13741 += 1 };
  s1 -> s3 [73, 73] { R13741 += 1, R13697 += 1, R70 += 1, R71 += 1 };
  s1 -> s4 [73, 73] { R13741 += 1, R13697 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [74, 65535] { R13741 += 1, R13697 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [0, 72] { R13741 += 1, R13697 += 1, R70 += 1, R71 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R13741 += 1, R13696 += 1, R13697 += 1 };
  s2 -> s3 [73, 73] { R13741 += 1, R13697 += 1, R70 += 1, R71 += 1 };
  s2 -> s4 [73, 73] { R13741 += 1, R13697 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [74, 65535] { R13741 += 1, R13697 += 1, R70 += 1, R71 += 1 };
  s3 -> s6 [0, 65535] { R13741 += 1 };
  s3 -> s3 [0, 65535] { R13741 += 1, R13697 += 1, R70 += 1, R71 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R13741 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R13741 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 72] { R13743 += 1, R13699 += 1, R10247 += 1, R10248 += 1 };
  s0 -> s2 [0, 72] { R13743 += 1, R13699 += 1, R10246 += 1, R10247 += 1 };
  s0 -> s3 [0, 65535] { R13743 += 1, R13698 += 1, R13699 += 1 };
  s0 -> s0 [0, 65535] { R13742 += 1, R13743 += 1 };
  s0 -> s4 [73, 73] { R13743 += 1, R13699 += 1, R10246 += 1, R10247 += 1 };
  s0 -> s5 [73, 73] { R13743 += 1, R13699 += 1, R10246 += 1, R10247 += 1 };
  s0 -> s6 [73, 73] { R13743 += 1, R13699 += 1, R10247 += 1, R10248 += 1 };
  s0 -> s7 [73, 73] { R13743 += 1, R13699 += 1, R10247 += 1, R10248 += 1 };
  s0 -> s1 [74, 65535] { R13743 += 1, R13699 += 1, R10247 += 1, R10248 += 1 };
  s0 -> s2 [74, 65535] { R13743 += 1, R13699 += 1, R10246 += 1, R10247 += 1 };
  s1 -> s1 [0, 72] { R13743 += 1, R13699 += 1, R10247 += 1, R10248 += 1 };
  s1 -> s11 [0, 72] { R13743 += 1, R13699 += 1 };
  s1 -> s12 [73, 73] { R13743 += 1, R13699 += 1 };
  s1 -> s6 [73, 73] { R13743 += 1, R13699 += 1, R10247 += 1, R10248 += 1 };
  s1 -> s7 [73, 73] { R13743 += 1, R13699 += 1, R10247 += 1, R10248 += 1 };
  s1 -> s8 [73, 73] { R13743 += 1, R13699 += 1 };
  s1 -> s1 [74, 65535] { R13743 += 1, R13699 += 1, R10247 += 1, R10248 += 1 };
  s1 -> s11 [74, 65535] { R13743 += 1, R13699 += 1 };
  s2 -> s1 [0, 72] { R13743 += 1, R13699 += 1, R10247 += 1, R10248 += 1 };
  s2 -> s2 [0, 72] { R13743 += 1, R13699 += 1, R10246 += 1, R10247 += 1 };
  s2 -> s4 [73, 73] { R13743 += 1, R13699 += 1, R10246 += 1, R10247 += 1 };
  s2 -> s5 [73, 73] { R13743 += 1, R13699 += 1, R10246 += 1, R10247 += 1 };
  s2 -> s6 [73, 73] { R13743 += 1, R13699 += 1, R10247 += 1, R10248 += 1 };
  s2 -> s7 [73, 73] { R13743 += 1, R13699 += 1, R10247 += 1, R10248 += 1 };
  s2 -> s1 [74, 65535] { R13743 += 1, R13699 += 1, R10247 += 1, R10248 += 1 };
  s2 -> s2 [74, 65535] { R13743 += 1, R13699 += 1, R10246 += 1, R10247 += 1 };
  s3 -> s1 [0, 72] { R13743 += 1, R13699 += 1, R10247 += 1, R10248 += 1 };
  s3 -> s2 [0, 72] { R13743 += 1, R13699 += 1, R10246 += 1, R10247 += 1 };
  s3 -> s3 [0, 65535] { R13743 += 1, R13698 += 1, R13699 += 1 };
  s3 -> s4 [73, 73] { R13743 += 1, R13699 += 1, R10246 += 1, R10247 += 1 };
  s3 -> s5 [73, 73] { R13743 += 1, R13699 += 1, R10246 += 1, R10247 += 1 };
  s3 -> s6 [73, 73] { R13743 += 1, R13699 += 1, R10247 += 1, R10248 += 1 };
  s3 -> s7 [73, 73] { R13743 += 1, R13699 += 1, R10247 += 1, R10248 += 1 };
  s3 -> s1 [74, 65535] { R13743 += 1, R13699 += 1, R10247 += 1, R10248 += 1 };
  s3 -> s2 [74, 65535] { R13743 += 1, R13699 += 1, R10246 += 1, R10247 += 1 };
  s4 -> s4 [0, 65535] { R13743 += 1, R13699 += 1, R10246 += 1, R10247 += 1 };
  s4 -> s6 [0, 65535] { R13743 += 1, R13699 += 1, R10247 += 1, R10248 += 1 };
  s6 -> s6 [0, 65535] { R13743 += 1, R13699 += 1, R10247 += 1, R10248 += 1 };
  s6 -> s8 [0, 65535] { R13743 += 1, R13699 += 1 };
  s8 -> s9 [0, 65535] { R13743 += 1 };
  s8 -> s10 [0, 65535];
  s8 -> s8 [0, 65535] { R13743 += 1, R13699 += 1 };
  s9 -> s9 [0, 65535] { R13743 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s11 [0, 72] { R13743 += 1, R13699 += 1 };
  s11 -> s10 [0, 65535];
  s11 -> s11 [0, 65535] { R13743 += 1 };
  s11 -> s12 [73, 73] { R13743 += 1, R13699 += 1 };
  s11 -> s8 [73, 73] { R13743 += 1, R13699 += 1 };
  s11 -> s11 [74, 65535] { R13743 += 1, R13699 += 1 };
  s12 -> s10 [0, 65535];
  s12 -> s12 [0, 65535] { R13743 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 72] { R13745 += 1, R13701 += 1, R12792 += 1, R12793 += 1 };
  s0 -> s2 [0, 72] { R13745 += 1, R13701 += 1, R12793 += 1 };
  s0 -> s0 [0, 65535] { R13744 += 1, R13745 += 1 };
  s0 -> s3 [0, 65535] { R13745 += 1, R13700 += 1, R13701 += 1 };
  s0 -> s4 [73, 73] { R13745 += 1, R13701 += 1, R12793 += 1 };
  s0 -> s5 [73, 73] { R13745 += 1, R13701 += 1, R12793 += 1 };
  s0 -> s6 [73, 73] { R13745 += 1, R13701 += 1, R12792 += 1, R12793 += 1 };
  s0 -> s7 [73, 73] { R13745 += 1, R13701 += 1, R12792 += 1, R12793 += 1 };
  s0 -> s2 [74, 77] { R13745 += 1, R13701 += 1, R12793 += 1 };
  s0 -> s1 [74, 65535] { R13745 += 1, R13701 += 1, R12792 += 1, R12793 += 1 };
  s0 -> s2 [79, 65535] { R13745 += 1, R13701 += 1, R12793 += 1 };
  s1 -> s1 [0, 72] { R13745 += 1, R13701 += 1, R12792 += 1, R12793 += 1 };
  s1 -> s2 [0, 72] { R13745 += 1, R13701 += 1, R12793 += 1 };
  s1 -> s4 [73, 73] { R13745 += 1, R13701 += 1, R12793 += 1 };
  s1 -> s5 [73, 73] { R13745 += 1, R13701 += 1, R12793 += 1 };
  s1 -> s6 [73, 73] { R13745 += 1, R13701 += 1, R12792 += 1, R12793 += 1 };
  s1 -> s7 [73, 73] { R13745 += 1, R13701 += 1, R12792 += 1, R12793 += 1 };
  s1 -> s2 [74, 77] { R13745 += 1, R13701 += 1, R12793 += 1 };
  s1 -> s1 [74, 65535] { R13745 += 1, R13701 += 1, R12792 += 1, R12793 += 1 };
  s1 -> s2 [79, 65535] { R13745 += 1, R13701 += 1, R12793 += 1 };
  s2 -> s2 [0, 72] { R13745 += 1, R13701 += 1, R12793 += 1 };
  s2 -> s2 [0, 65535] { R13745 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s4 [73, 73] { R13745 += 1, R13701 += 1, R12793 += 1 };
  s2 -> s5 [73, 73] { R13745 += 1, R13701 += 1, R12793 += 1 };
  s2 -> s2 [74, 77] { R13745 += 1, R13701 += 1, R12793 += 1 };
  s2 -> s2 [79, 65535] { R13745 += 1, R13701 += 1, R12793 += 1 };
  s3 -> s1 [0, 72] { R13745 += 1, R13701 += 1, R12792 += 1, R12793 += 1 };
  s3 -> s2 [0, 72] { R13745 += 1, R13701 += 1, R12793 += 1 };
  s3 -> s3 [0, 65535] { R13745 += 1, R13700 += 1, R13701 += 1 };
  s3 -> s4 [73, 73] { R13745 += 1, R13701 += 1, R12793 += 1 };
  s3 -> s5 [73, 73] { R13745 += 1, R13701 += 1, R12793 += 1 };
  s3 -> s6 [73, 73] { R13745 += 1, R13701 += 1, R12792 += 1, R12793 += 1 };
  s3 -> s7 [73, 73] { R13745 += 1, R13701 += 1, R12792 += 1, R12793 += 1 };
  s3 -> s2 [74, 77] { R13745 += 1, R13701 += 1, R12793 += 1 };
  s3 -> s1 [74, 65535] { R13745 += 1, R13701 += 1, R12792 += 1, R12793 += 1 };
  s3 -> s2 [79, 65535] { R13745 += 1, R13701 += 1, R12793 += 1 };
  s4 -> s4 [0, 77] { R13745 += 1, R13701 += 1, R12793 += 1 };
  s4 -> s4 [0, 65535] { R13745 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s4 [79, 65535] { R13745 += 1, R13701 += 1, R12793 += 1 };
  s5 -> s5 [0, 65535] { R13745 += 1 };
  s5 -> s8 [0, 65535];
  s6 -> s4 [0, 77] { R13745 += 1, R13701 += 1, R12793 += 1 };
  s6 -> s6 [0, 65535] { R13745 += 1, R13701 += 1, R12792 += 1, R12793 += 1 };
  s6 -> s4 [79, 65535] { R13745 += 1, R13701 += 1, R12793 += 1 };
  s8 -> s8 [0, 65535];
  accepting s2, s4, s5, s8;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 72] { R13747 += 1, R13703 += 1, R13641 += 1, R13642 += 1 };
  s0 -> s2 [0, 72] { R13747 += 1, R13703 += 1, R13640 += 1, R13641 += 1 };
  s0 -> s3 [0, 65535] { R13747 += 1, R13702 += 1, R13703 += 1 };
  s0 -> s0 [0, 65535] { R13746 += 1, R13747 += 1 };
  s0 -> s4 [73, 73] { R13747 += 1, R13703 += 1, R13641 += 1, R13642 += 1 };
  s0 -> s5 [73, 73] { R13747 += 1, R13703 += 1, R13640 += 1, R13641 += 1 };
  s0 -> s6 [73, 73] { R13747 += 1, R13703 += 1, R13641 += 1, R13642 += 1 };
  s0 -> s7 [73, 73] { R13747 += 1, R13703 += 1, R13640 += 1, R13641 += 1 };
  s0 -> s1 [74, 65535] { R13747 += 1, R13703 += 1, R13641 += 1, R13642 += 1 };
  s0 -> s2 [74, 65535] { R13747 += 1, R13703 += 1, R13640 += 1, R13641 += 1 };
  s1 -> s1 [0, 72] { R13747 += 1, R13703 += 1, R13641 += 1, R13642 += 1 };
  s1 -> s11 [0, 72] { R13747 += 1, R13703 += 1 };
  s1 -> s8 [73, 73] { R13747 += 1, R13703 += 1 };
  s1 -> s4 [73, 73] { R13747 += 1, R13703 += 1, R13641 += 1, R13642 += 1 };
  s1 -> s12 [73, 73] { R13747 += 1, R13703 += 1 };
  s1 -> s6 [73, 73] { R13747 += 1, R13703 += 1, R13641 += 1, R13642 += 1 };
  s1 -> s1 [74, 65535] { R13747 += 1, R13703 += 1, R13641 += 1, R13642 += 1 };
  s1 -> s11 [74, 65535] { R13747 += 1, R13703 += 1 };
  s2 -> s1 [0, 72] { R13747 += 1, R13703 += 1, R13641 += 1, R13642 += 1 };
  s2 -> s2 [0, 72] { R13747 += 1, R13703 += 1, R13640 += 1, R13641 += 1 };
  s2 -> s4 [73, 73] { R13747 += 1, R13703 += 1, R13641 += 1, R13642 += 1 };
  s2 -> s5 [73, 73] { R13747 += 1, R13703 += 1, R13640 += 1, R13641 += 1 };
  s2 -> s6 [73, 73] { R13747 += 1, R13703 += 1, R13641 += 1, R13642 += 1 };
  s2 -> s7 [73, 73] { R13747 += 1, R13703 += 1, R13640 += 1, R13641 += 1 };
  s2 -> s1 [74, 65535] { R13747 += 1, R13703 += 1, R13641 += 1, R13642 += 1 };
  s2 -> s2 [74, 65535] { R13747 += 1, R13703 += 1, R13640 += 1, R13641 += 1 };
  s3 -> s1 [0, 72] { R13747 += 1, R13703 += 1, R13641 += 1, R13642 += 1 };
  s3 -> s2 [0, 72] { R13747 += 1, R13703 += 1, R13640 += 1, R13641 += 1 };
  s3 -> s3 [0, 65535] { R13747 += 1, R13702 += 1, R13703 += 1 };
  s3 -> s4 [73, 73] { R13747 += 1, R13703 += 1, R13641 += 1, R13642 += 1 };
  s3 -> s5 [73, 73] { R13747 += 1, R13703 += 1, R13640 += 1, R13641 += 1 };
  s3 -> s6 [73, 73] { R13747 += 1, R13703 += 1, R13641 += 1, R13642 += 1 };
  s3 -> s7 [73, 73] { R13747 += 1, R13703 += 1, R13640 += 1, R13641 += 1 };
  s3 -> s1 [74, 65535] { R13747 += 1, R13703 += 1, R13641 += 1, R13642 += 1 };
  s3 -> s2 [74, 65535] { R13747 += 1, R13703 += 1, R13640 += 1, R13641 += 1 };
  s6 -> s8 [0, 65535] { R13747 += 1, R13703 += 1 };
  s6 -> s6 [0, 65535] { R13747 += 1, R13703 += 1, R13641 += 1, R13642 += 1 };
  s7 -> s6 [0, 65535] { R13747 += 1, R13703 += 1, R13641 += 1, R13642 += 1 };
  s7 -> s7 [0, 65535] { R13747 += 1, R13703 += 1, R13640 += 1, R13641 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R13747 += 1, R13703 += 1 };
  s8 -> s10 [0, 65535] { R13747 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R13747 += 1 };
  s11 -> s11 [0, 72] { R13747 += 1, R13703 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R13747 += 1 };
  s11 -> s8 [73, 73] { R13747 += 1, R13703 += 1 };
  s11 -> s12 [73, 73] { R13747 += 1, R13703 += 1 };
  s11 -> s11 [74, 65535] { R13747 += 1, R13703 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R13747 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 72] { R13749 += 1, R13705 += 1, R13646 += 1, R13647 += 1 };
  s0 -> s2 [0, 65535] { R13749 += 1, R13704 += 1, R13705 += 1 };
  s0 -> s0 [0, 65535] { R13748 += 1, R13749 += 1 };
  s0 -> s3 [73, 73] { R13749 += 1, R13705 += 1, R13646 += 1, R13647 += 1 };
  s0 -> s4 [73, 73] { R13749 += 1, R13705 += 1, R13646 += 1, R13647 += 1 };
  s0 -> s1 [74, 65535] { R13749 += 1, R13705 += 1, R13646 += 1, R13647 += 1 };
  s1 -> s1 [0, 72] { R13749 += 1, R13705 += 1, R13646 += 1, R13647 += 1 };
  s1 -> s1 [0, 65535] { R13749 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R13749 += 1, R13705 += 1, R13646 += 1, R13647 += 1 };
  s1 -> s4 [73, 73] { R13749 += 1, R13705 += 1, R13646 += 1, R13647 += 1 };
  s1 -> s1 [74, 65535] { R13749 += 1, R13705 += 1, R13646 += 1, R13647 += 1 };
  s2 -> s1 [0, 72] { R13749 += 1, R13705 += 1, R13646 += 1, R13647 += 1 };
  s2 -> s2 [0, 65535] { R13749 += 1, R13704 += 1, R13705 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R13749 += 1, R13705 += 1, R13646 += 1, R13647 += 1 };
  s2 -> s4 [73, 73] { R13749 += 1, R13705 += 1, R13646 += 1, R13647 += 1 };
  s2 -> s1 [74, 65535] { R13749 += 1, R13705 += 1, R13646 += 1, R13647 += 1 };
  s3 -> s3 [0, 65535] { R13749 += 1, R13705 += 1, R13646 += 1, R13647 += 1 };
  s3 -> s6 [0, 65535] { R13749 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R13749 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R13749 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
synchronised {  // Automata constraining P54
automaton P54_0 {
  init s0;
  s0 -> s1 [109, 109];
  accepting s1;
};
};
constraint R1 = R13665 && R2 = R13749 && R20 - R13749 = -1 && R21 = R13749 && R22 - R13749 = -1 && R23 = R13749 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R12795 + -1*R12793 - R53 = 0 && R52 + R12794 + R12792 = 0 && R13664 = 0 && R13690 = 0 && R13691 = 0 && R13698 = 0 && R13699 = 0 && R13700 = 0 && R13701 = 0 && R13702 = 0 && R13703 = 0 && R13706 = 0 && R13707 = R13749 && R13708 = 0 && R13709 = R13749 && R13710 = 0 && R13711 = R13749 && R13712 = 0 && R13713 = R13749 && R13714 = 0 && R13715 = R13749 && R13716 = 0 && R13717 = R13749 && R13718 = 0 && R13719 = R13749 && R13720 = 0 && R13721 = R13749 && R13722 = 0 && R13723 = R13749 && R13724 = 0 && R13725 = R13749 && R13726 = 0 && R13727 = R13749 && R13728 = 0 && R13729 = R13749 && R13730 = 0 && R13731 = R13749 && R13732 = 0 && R13733 = R13749 && R13734 = 0 && R13735 = R13749 && R13736 = 0 && R13737 = R13749 && R13738 = 0 && R13739 = R13749 && R13740 = 0 && R13741 = R13749 && R13742 = 0 && R13743 = R13749 && R13744 = 0 && R13745 = R13749 && R13746 = 0 && R13747 = R13749 && R13748 = 0 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R12795 + -1*R12793 - R53 < 1 && -1 < R13665 && 0 < R13749 && (R48 + R10251 + R10248 != 0 || ((R42 + R72 + R70 != 0 || R43 + R73 + R71 + -1*R12795 + -1*R12793 - R53 = 0 || R53 + R12795 + R12793 < 1) && (R42 + R72 + R70 = 0 || R53 + R12795 + R12793 < 1))) && (R48 + R10251 + R10248 != 0 || ((R46 + R10249 + R10246 != 0 || R47 + R10250 + R10247 + -1*R12795 + -1*R12793 - R53 = 0 || R53 + R12795 + R12793 < 1) && (R46 + R10249 + R10246 = 0 || R53 + R12795 + R12793 < 1))) && (R13650 != 0 || R13651 = R13665 || (R17 = 0 && R13665 = 0)) && (R13652 != 0 || R13653 = R13665 || (R17 = 0 && R13665 = 0)) && (R13654 != 0 || R13655 = R13665 || (R17 = 0 && R13665 = 0)) && (R13656 != 0 || R13657 = R13665 || (R17 = 0 && R13665 = 0)) && (R13658 != 0 || R13659 = R13665 || (R17 = 0 && R13665 = 0)) && (R13660 != 0 || R13661 = R13665 || (R17 = 0 && R13665 = 0)) && (R13662 != 0 || R13663 = R13665 || (R17 = 0 && R13665 = 0)) && (R13666 != 0 || R13665 = R13667 || (R17 = 0 && R13665 = 0)) && (R13668 != 0 || R13665 = R13669 || (R17 = 0 && R13665 = 0)) && (R18 = 0 || (R13688 = 0 && R13689 = 0)) && (R18 = 0 || (R13692 = 0 && R13693 = 0)) && (R18 = 0 || (R13694 = 0 && R13695 = 0)) && (R18 = 0 || (R13696 = 0 && R13697 = 0)) && (R18 = 0 || (R13704 = 0 && R13705 = 0)) && (R19 = 0 || (R13670 = 0 && R13671 = 0)) && (R19 = 0 || (R13672 = 0 && R13673 = 0)) && (R19 = 0 || (R13674 = 0 && R13675 = 0)) && (R19 = 0 || (R13676 = 0 && R13677 = 0)) && (R19 = 0 || (R13678 = 0 && R13679 = 0)) && (R19 = 0 || (R13680 = 0 && R13681 = 0)) && (R19 = 0 || (R13682 = 0 && R13683 = 0)) && (R19 = 0 || (R13684 = 0 && R13685 = 0)) && (R19 = 0 || (R13686 = 0 && R13687 = 0)) && (R48 + R10251 + R10248 = 0 || (R42 + R72 + R70 = 0 && R43 + R73 + R71 + -1*R12795 + -1*R12793 - R53 = 0)) && (R48 + R10251 + R10248 = 0 || (R46 + R10249 + R10246 = 0 && R47 + R10250 + R10247 + -1*R12795 + -1*R12793 - R53 = 0)) && (R58 + R13645 + R13642 = 0 || (R56 + R13643 + R13640 = 0 && R57 + R13644 + R13641 = 0)) && (R58 + R13645 + R13642 = 0 || (R62 + R13648 + R13646 = 0 && R63 + R13649 + R13647 = 0)) && (R13650 = 0 || (R17 = 0 && R13665 = 0)) && (R13652 = 0 || (R17 = 0 && R13665 = 0)) && (R13654 = 0 || (R17 = 0 && R13665 = 0)) && (R13656 = 0 || (R17 = 0 && R13665 = 0)) && (R13658 = 0 || (R17 = 0 && R13665 = 0)) && (R13660 = 0 || (R17 = 0 && R13665 = 0)) && (R13662 = 0 || (R17 = 0 && R13665 = 0)) && (R13666 = 0 || (R17 = 0 && R13665 = 0)) && (R13668 = 0 || (R17 = 0 && R13665 = 0));
// End of Parikh automata intersection problem
