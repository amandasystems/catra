// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R12, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R4, R40, R42, R43, R46, R47, R48, R506, R507, R508, R509, R510, R511, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R70, R71, R72, R720, R721, R722, R723, R724, R725, R726, R727, R728, R729, R73, R730, R731, R732, R733, R734, R735, R736, R737, R738, R739, R74, R740, R741, R742, R743, R744, R745, R746, R747, R748, R749, R75, R750, R751, R752, R753, R754, R755, R756, R757, R758, R759, R76, R760, R761, R762, R763, R764, R765, R766, R767, R768, R769, R77, R770, R771, R772, R773, R774, R775, R776, R777, R778, R779, R78, R780, R781, R782, R783, R784, R785, R786, R787, R788, R789, R79, R790, R791, R792, R793, R794, R795, R796, R797, R798, R799, R8, R80, R800, R801, R802, R803, R804, R805, R806, R807, R808, R809, R81, R810, R811, R812, R813, R814, R815, R816, R817, R818, R819, R82, R820, R821, R822, R823, R83;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 72];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [73, 73];
  s0 -> s1 [74, 65535];
  s1 -> s1 [0, 72];
  s1 -> s2 [73, 73];
  s1 -> s1 [74, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s1 [0, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R25 += 1 };
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R744 += 1, R745 += 1 };
  s0 -> s1 [0, 65535] { R745 += 1, R19 += 1 };
  s1 -> s1 [0, 65535] { R745 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 72] { R747 += 1 };
  s0 -> s0 [0, 65535] { R746 += 1, R747 += 1 };
  s0 -> s2 [73, 73] { R747 += 1 };
  s0 -> s3 [73, 73] { R747 += 1 };
  s0 -> s1 [78, 65535] { R747 += 1 };
  s1 -> s1 [0, 72] { R747 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R747 += 1 };
  s1 -> s3 [73, 73] { R747 += 1 };
  s1 -> s1 [78, 65535] { R747 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 73] { R747 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [78, 65535] { R747 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 72] { R749 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R748 += 1, R749 += 1 };
  s0 -> s2 [73, 73] { R749 += 1, R38 += 1 };
  s0 -> s3 [73, 73] { R749 += 1, R38 += 1 };
  s0 -> s1 [74, 65535] { R749 += 1, R38 += 1 };
  s1 -> s1 [0, 72] { R749 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R749 += 1, R38 += 1 };
  s1 -> s3 [73, 73] { R749 += 1, R38 += 1 };
  s1 -> s1 [74, 65535] { R749 += 1, R38 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R749 += 1, R38 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 72] { R751 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R750 += 1, R751 += 1 };
  s0 -> s2 [73, 73] { R751 += 1, R40 += 1 };
  s0 -> s3 [73, 73] { R751 += 1, R40 += 1 };
  s0 -> s1 [74, 65535] { R751 += 1, R40 += 1 };
  s1 -> s1 [0, 72] { R751 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R751 += 1, R40 += 1 };
  s1 -> s3 [73, 73] { R751 += 1, R40 += 1 };
  s1 -> s1 [74, 65535] { R751 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R751 += 1, R40 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 72] { R753 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R752 += 1, R753 += 1 };
  s0 -> s2 [73, 73] { R753 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [73, 73] { R753 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [74, 65535] { R753 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 72] { R753 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R753 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [73, 73] { R753 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [74, 65535] { R753 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R753 += 1, R42 += 1, R43 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 72] { R755 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R754 += 1, R755 += 1 };
  s0 -> s2 [73, 73] { R755 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [73, 73] { R755 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [74, 65535] { R755 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 72] { R755 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R755 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [73, 73] { R755 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [74, 65535] { R755 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R755 += 1, R46 += 1, R47 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 72] { R757 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R756 += 1, R757 += 1 };
  s0 -> s2 [73, 73] { R757 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [73, 73] { R757 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [74, 65535] { R757 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 72] { R757 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R757 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [73, 73] { R757 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [74, 65535] { R757 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535] { R757 += 1, R52 += 1, R53 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 72] { R759 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R758 += 1, R759 += 1 };
  s0 -> s2 [73, 73] { R759 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [73, 73] { R759 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [74, 65535] { R759 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 72] { R759 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R759 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [73, 73] { R759 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [74, 65535] { R759 += 1, R56 += 1, R57 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R759 += 1, R56 += 1, R57 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 72] { R761 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R760 += 1, R761 += 1 };
  s0 -> s2 [73, 73] { R761 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [73, 73] { R761 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [74, 65535] { R761 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 72] { R761 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R761 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [73, 73] { R761 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [74, 65535] { R761 += 1, R62 += 1, R63 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R761 += 1, R62 += 1, R63 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 72] { R781 += 1 };
  s0 -> s0 [0, 65535] { R780 += 1, R781 += 1 };
  s0 -> s2 [73, 73] { R781 += 1 };
  s0 -> s1 [74, 65535] { R781 += 1 };
  s1 -> s1 [0, 72] { R781 += 1 };
  s1 -> s2 [73, 73] { R781 += 1 };
  s1 -> s1 [74, 65535] { R781 += 1 };
  s2 -> s2 [0, 65535] { R781 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R783 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R782 += 1, R783 += 1 };
  s1 -> s1 [0, 65535] { R783 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 72] { R785 += 1 };
  s0 -> s0 [0, 65535] { R784 += 1, R785 += 1 };
  s0 -> s2 [0, 65535] { R785 += 1, R8 += 1 };
  s0 -> s3 [73, 73] { R785 += 1 };
  s0 -> s1 [74, 65535] { R785 += 1 };
  s1 -> s1 [0, 72] { R785 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [73, 73] { R785 += 1 };
  s1 -> s1 [74, 65535] { R785 += 1 };
  s2 -> s1 [0, 72] { R785 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R785 += 1, R8 += 1 };
  s2 -> s3 [73, 73] { R785 += 1 };
  s2 -> s1 [74, 65535] { R785 += 1 };
  s3 -> s3 [0, 65535] { R785 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 72] { R787 += 1, R725 += 1 };
  s0 -> s2 [0, 65535] { R787 += 1, R724 += 1, R725 += 1 };
  s0 -> s0 [0, 65535] { R786 += 1, R787 += 1 };
  s0 -> s1 [74, 65535] { R787 += 1, R725 += 1 };
  s1 -> s1 [0, 72] { R787 += 1, R725 += 1 };
  s1 -> s1 [0, 65535] { R787 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [74, 65535] { R787 += 1, R725 += 1 };
  s2 -> s1 [0, 72] { R787 += 1, R725 += 1 };
  s2 -> s2 [0, 65535] { R787 += 1, R724 += 1, R725 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [74, 65535] { R787 += 1, R725 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s0 [0, 65535] { R788 += 1, R789 += 1 };
  s0 -> s1 [0, 65535] { R789 += 1, R726 += 1, R727 += 1 };
  s0 -> s2 [0, 65535] { R789 += 1, R727 += 1, R17 += 1 };
  s1 -> s1 [0, 65535] { R789 += 1, R726 += 1, R727 += 1 };
  s1 -> s2 [0, 65535] { R789 += 1, R727 += 1, R17 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R789 += 1 };
  s2 -> s2 [0, 65535] { R789 += 1, R727 += 1, R17 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R789 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 73] { R791 += 1, R729 += 1 };
  s0 -> s0 [0, 65535] { R790 += 1, R791 += 1 };
  s0 -> s2 [0, 65535] { R791 += 1, R728 += 1, R729 += 1 };
  s0 -> s1 [77, 65535] { R791 += 1, R729 += 1 };
  s1 -> s1 [0, 73] { R791 += 1, R729 += 1 };
  s1 -> s1 [0, 65535] { R791 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [77, 65535] { R791 += 1, R729 += 1 };
  s2 -> s1 [0, 73] { R791 += 1, R729 += 1 };
  s2 -> s2 [0, 65535] { R791 += 1, R728 += 1, R729 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [77, 65535] { R791 += 1, R729 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R793 += 1, R730 += 1, R731 += 1 };
  s0 -> s0 [0, 65535] { R792 += 1, R793 += 1 };
  s0 -> s2 [0, 65535] { R793 += 1, R731 += 1, R67 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R793 += 1, R730 += 1, R731 += 1 };
  s1 -> s2 [0, 65535] { R793 += 1, R731 += 1, R67 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R793 += 1 };
  s2 -> s2 [0, 65535] { R793 += 1, R731 += 1, R67 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R793 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 76] { R795 += 1, R733 += 1 };
  s0 -> s0 [0, 65535] { R794 += 1, R795 += 1 };
  s0 -> s2 [0, 65535] { R795 += 1, R732 += 1, R733 += 1 };
  s0 -> s3 [0, 65535] { R795 += 1, R733 += 1, R69 += 1 };
  s0 -> s1 [78, 65535] { R795 += 1, R733 += 1 };
  s1 -> s1 [0, 76] { R795 += 1, R733 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R795 += 1 };
  s1 -> s1 [78, 65535] { R795 += 1, R733 += 1 };
  s2 -> s1 [0, 76] { R795 += 1, R733 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R795 += 1, R732 += 1, R733 += 1 };
  s2 -> s3 [0, 65535] { R795 += 1, R733 += 1, R69 += 1 };
  s2 -> s1 [78, 65535] { R795 += 1, R733 += 1 };
  s3 -> s1 [0, 76] { R795 += 1, R733 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R795 += 1 };
  s3 -> s3 [0, 65535] { R795 += 1, R733 += 1, R69 += 1 };
  s3 -> s1 [78, 65535] { R795 += 1, R733 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R795 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 76] { R797 += 1, R735 += 1, R73 += 1 };
  s0 -> s2 [0, 65535] { R797 += 1, R734 += 1, R735 += 1 };
  s0 -> s0 [0, 65535] { R796 += 1, R797 += 1 };
  s0 -> s3 [0, 65535] { R797 += 1, R735 += 1, R72 += 1, R73 += 1 };
  s0 -> s1 [78, 65535] { R797 += 1, R735 += 1, R73 += 1 };
  s1 -> s1 [0, 76] { R797 += 1, R735 += 1, R73 += 1 };
  s1 -> s1 [0, 65535] { R797 += 1, R735 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R797 += 1 };
  s1 -> s1 [78, 65535] { R797 += 1, R735 += 1, R73 += 1 };
  s2 -> s1 [0, 76] { R797 += 1, R735 += 1, R73 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R797 += 1, R734 += 1, R735 += 1 };
  s2 -> s3 [0, 65535] { R797 += 1, R735 += 1, R72 += 1, R73 += 1 };
  s2 -> s1 [78, 65535] { R797 += 1, R735 += 1, R73 += 1 };
  s3 -> s1 [0, 76] { R797 += 1, R735 += 1, R73 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R797 += 1, R735 += 1, R72 += 1, R73 += 1 };
  s3 -> s5 [0, 65535] { R797 += 1 };
  s3 -> s1 [78, 65535] { R797 += 1, R735 += 1, R73 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R797 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s0 [0, 65535] { R798 += 1, R799 += 1 };
  s0 -> s1 [0, 65535] { R799 += 1, R737 += 1, R77 += 1, R78 += 1 };
  s0 -> s2 [0, 65535] { R799 += 1, R737 += 1, R78 += 1, R79 += 1 };
  s0 -> s3 [0, 65535] { R799 += 1, R736 += 1, R737 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R799 += 1, R737 += 1, R77 += 1, R78 += 1 };
  s1 -> s2 [0, 65535] { R799 += 1, R737 += 1, R78 += 1, R79 += 1 };
  s1 -> s6 [0, 65535] { R799 += 1 };
  s2 -> s5 [0, 65535] { R799 += 1, R737 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R799 += 1, R737 += 1, R78 += 1, R79 += 1 };
  s2 -> s6 [0, 65535] { R799 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R799 += 1, R737 += 1, R77 += 1, R78 += 1 };
  s3 -> s2 [0, 65535] { R799 += 1, R737 += 1, R78 += 1, R79 += 1 };
  s3 -> s3 [0, 65535] { R799 += 1, R736 += 1, R737 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R799 += 1, R737 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s6 [0, 65535] { R799 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R799 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 65535] { R801 += 1, R739 += 1, R83 += 1 };
  s0 -> s0 [0, 65535] { R800 += 1, R801 += 1 };
  s0 -> s2 [0, 65535] { R801 += 1, R739 += 1 };
  s0 -> s3 [0, 65535] { R801 += 1, R738 += 1, R739 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R801 += 1 };
  s1 -> s1 [0, 65535] { R801 += 1, R739 += 1, R83 += 1 };
  s1 -> s2 [0, 65535] { R801 += 1, R739 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R801 += 1 };
  s2 -> s2 [0, 65535] { R801 += 1, R739 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R801 += 1, R739 += 1, R83 += 1 };
  s3 -> s2 [0, 65535] { R801 += 1, R739 += 1 };
  s3 -> s3 [0, 65535] { R801 += 1, R738 += 1, R739 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R801 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R803 += 1, R740 += 1, R741 += 1 };
  s0 -> s0 [0, 65535] { R802 += 1, R803 += 1 };
  s0 -> s2 [0, 65535] { R803 += 1, R741 += 1 };
  s0 -> s3 [0, 65535] { R803 += 1, R741 += 1, R510 += 1, R511 += 1 };
  s1 -> s1 [0, 65535] { R803 += 1, R740 += 1, R741 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s2 [0, 65535] { R803 += 1, R741 += 1 };
  s1 -> s3 [0, 65535] { R803 += 1, R741 += 1, R510 += 1, R511 += 1 };
  s2 -> s4 [0, 65535] { R803 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R803 += 1, R741 += 1 };
  s3 -> s4 [0, 65535] { R803 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R803 += 1, R741 += 1 };
  s3 -> s3 [0, 65535] { R803 += 1, R741 += 1, R510 += 1, R511 += 1 };
  s4 -> s4 [0, 65535] { R803 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 77] { R805 += 1, R743 += 1, R723 += 1 };
  s0 -> s1 [0, 65535] { R805 += 1, R743 += 1 };
  s0 -> s2 [0, 65535] { R805 += 1, R742 += 1, R743 += 1 };
  s0 -> s0 [0, 65535] { R804 += 1, R805 += 1 };
  s0 -> s1 [79, 65535] { R805 += 1, R743 += 1, R723 += 1 };
  s1 -> s1 [0, 77] { R805 += 1, R743 += 1, R723 += 1 };
  s1 -> s1 [0, 65535] { R805 += 1, R743 += 1 };
  s1 -> s4 [0, 65535] { R805 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [79, 65535] { R805 += 1, R743 += 1, R723 += 1 };
  s2 -> s1 [0, 77] { R805 += 1, R743 += 1, R723 += 1 };
  s2 -> s1 [0, 65535] { R805 += 1, R743 += 1 };
  s2 -> s2 [0, 65535] { R805 += 1, R742 += 1, R743 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [79, 65535] { R805 += 1, R743 += 1, R723 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R805 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R807 += 1, R763 += 1, R18 += 1 };
  s0 -> s2 [0, 65535] { R807 += 1, R762 += 1, R763 += 1 };
  s0 -> s0 [0, 65535] { R806 += 1, R807 += 1 };
  s1 -> s1 [0, 65535] { R807 += 1, R763 += 1, R18 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R807 += 1 };
  s2 -> s1 [0, 65535] { R807 += 1, R763 += 1, R18 += 1 };
  s2 -> s2 [0, 65535] { R807 += 1, R762 += 1, R763 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R807 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 72] { R809 += 1, R765 += 1 };
  s0 -> s2 [0, 65535] { R809 += 1, R764 += 1, R765 += 1 };
  s0 -> s0 [0, 65535] { R808 += 1, R809 += 1 };
  s0 -> s3 [73, 73] { R809 += 1, R765 += 1 };
  s0 -> s4 [73, 73] { R809 += 1, R765 += 1 };
  s0 -> s5 [77, 77] { R809 += 1, R765 += 1 };
  s0 -> s1 [78, 65535] { R809 += 1, R765 += 1 };
  s1 -> s1 [0, 72] { R809 += 1, R765 += 1 };
  s1 -> s3 [73, 73] { R809 += 1, R765 += 1 };
  s1 -> s4 [73, 73] { R809 += 1, R765 += 1 };
  s1 -> s5 [77, 77] { R809 += 1, R765 += 1 };
  s1 -> s1 [78, 65535] { R809 += 1, R765 += 1 };
  s2 -> s1 [0, 72] { R809 += 1, R765 += 1 };
  s2 -> s2 [0, 65535] { R809 += 1, R764 += 1, R765 += 1 };
  s2 -> s3 [73, 73] { R809 += 1, R765 += 1 };
  s2 -> s4 [73, 73] { R809 += 1, R765 += 1 };
  s2 -> s5 [77, 77] { R809 += 1, R765 += 1 };
  s2 -> s1 [78, 65535] { R809 += 1, R765 += 1 };
  s3 -> s3 [0, 73] { R809 += 1, R765 += 1 };
  s3 -> s8 [77, 77] { R809 += 1, R765 += 1 };
  s3 -> s3 [78, 65535] { R809 += 1, R765 += 1 };
  s5 -> s5 [0, 72] { R809 += 1, R765 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R809 += 1 };
  s5 -> s7 [73, 73] { R809 += 1, R765 += 1 };
  s5 -> s8 [73, 73] { R809 += 1, R765 += 1 };
  s5 -> s5 [77, 65535] { R809 += 1, R765 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R809 += 1 };
  s8 -> s8 [0, 73] { R809 += 1, R765 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R809 += 1 };
  s8 -> s8 [77, 65535] { R809 += 1, R765 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 72] { R811 += 1, R767 += 1, R66 += 1 };
  s0 -> s2 [0, 65535] { R811 += 1, R766 += 1, R767 += 1 };
  s0 -> s0 [0, 65535] { R810 += 1, R811 += 1 };
  s0 -> s3 [73, 73] { R811 += 1, R767 += 1, R66 += 1 };
  s0 -> s4 [73, 73] { R811 += 1, R767 += 1, R66 += 1 };
  s0 -> s1 [74, 65535] { R811 += 1, R767 += 1, R66 += 1 };
  s1 -> s1 [0, 72] { R811 += 1, R767 += 1, R66 += 1 };
  s1 -> s1 [0, 65535] { R811 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [73, 73] { R811 += 1, R767 += 1, R66 += 1 };
  s1 -> s4 [73, 73] { R811 += 1, R767 += 1, R66 += 1 };
  s1 -> s1 [74, 65535] { R811 += 1, R767 += 1, R66 += 1 };
  s2 -> s1 [0, 72] { R811 += 1, R767 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R811 += 1, R766 += 1, R767 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [73, 73] { R811 += 1, R767 += 1, R66 += 1 };
  s2 -> s4 [73, 73] { R811 += 1, R767 += 1, R66 += 1 };
  s2 -> s1 [74, 65535] { R811 += 1, R767 += 1, R66 += 1 };
  s3 -> s3 [0, 65535] { R811 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R811 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R811 += 1, R767 += 1, R66 += 1 };
  s5 -> s5 [0, 65535] { R811 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 72] { R813 += 1, R769 += 1, R68 += 1 };
  s0 -> s2 [0, 65535] { R813 += 1, R768 += 1, R769 += 1 };
  s0 -> s0 [0, 65535] { R812 += 1, R813 += 1 };
  s0 -> s3 [73, 73] { R813 += 1, R769 += 1, R68 += 1 };
  s0 -> s4 [73, 73] { R813 += 1, R769 += 1, R68 += 1 };
  s0 -> s1 [74, 65535] { R813 += 1, R769 += 1, R68 += 1 };
  s1 -> s1 [0, 72] { R813 += 1, R769 += 1, R68 += 1 };
  s1 -> s1 [0, 65535] { R813 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [73, 73] { R813 += 1, R769 += 1, R68 += 1 };
  s1 -> s4 [73, 73] { R813 += 1, R769 += 1, R68 += 1 };
  s1 -> s1 [74, 65535] { R813 += 1, R769 += 1, R68 += 1 };
  s2 -> s1 [0, 72] { R813 += 1, R769 += 1, R68 += 1 };
  s2 -> s2 [0, 65535] { R813 += 1, R768 += 1, R769 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [73, 73] { R813 += 1, R769 += 1, R68 += 1 };
  s2 -> s4 [73, 73] { R813 += 1, R769 += 1, R68 += 1 };
  s2 -> s1 [74, 65535] { R813 += 1, R769 += 1, R68 += 1 };
  s3 -> s3 [0, 65535] { R813 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R813 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R813 += 1, R769 += 1, R68 += 1 };
  s5 -> s5 [0, 65535] { R813 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 72] { R815 += 1, R771 += 1, R70 += 1, R71 += 1 };
  s0 -> s0 [0, 65535] { R814 += 1, R815 += 1 };
  s0 -> s2 [0, 65535] { R815 += 1, R770 += 1, R771 += 1 };
  s0 -> s3 [73, 73] { R815 += 1, R771 += 1, R70 += 1, R71 += 1 };
  s0 -> s4 [73, 73] { R815 += 1, R771 += 1, R70 += 1, R71 += 1 };
  s0 -> s1 [74, 65535] { R815 += 1, R771 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 72] { R815 += 1, R771 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 65535] { R815 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [73, 73] { R815 += 1, R771 += 1, R70 += 1, R71 += 1 };
  s1 -> s4 [73, 73] { R815 += 1, R771 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [74, 65535] { R815 += 1, R771 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [0, 72] { R815 += 1, R771 += 1, R70 += 1, R71 += 1 };
  s2 -> s2 [0, 65535] { R815 += 1, R770 += 1, R771 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [73, 73] { R815 += 1, R771 += 1, R70 += 1, R71 += 1 };
  s2 -> s4 [73, 73] { R815 += 1, R771 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [74, 65535] { R815 += 1, R771 += 1, R70 += 1, R71 += 1 };
  s3 -> s3 [0, 65535] { R815 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R815 += 1, R771 += 1, R70 += 1, R71 += 1 };
  s4 -> s5 [0, 65535] { R815 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R815 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 72] { R817 += 1, R773 += 1, R74 += 1, R75 += 1 };
  s0 -> s2 [0, 65535] { R817 += 1, R772 += 1, R773 += 1 };
  s0 -> s0 [0, 65535] { R816 += 1, R817 += 1 };
  s0 -> s3 [73, 73] { R817 += 1, R773 += 1, R74 += 1, R75 += 1 };
  s0 -> s4 [73, 73] { R817 += 1, R773 += 1, R74 += 1, R75 += 1 };
  s0 -> s1 [74, 65535] { R817 += 1, R773 += 1, R74 += 1, R75 += 1 };
  s1 -> s1 [0, 72] { R817 += 1, R773 += 1, R74 += 1, R75 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R817 += 1 };
  s1 -> s3 [73, 73] { R817 += 1, R773 += 1, R74 += 1, R75 += 1 };
  s1 -> s4 [73, 73] { R817 += 1, R773 += 1, R74 += 1, R75 += 1 };
  s1 -> s1 [74, 65535] { R817 += 1, R773 += 1, R74 += 1, R75 += 1 };
  s2 -> s1 [0, 72] { R817 += 1, R773 += 1, R74 += 1, R75 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R817 += 1, R772 += 1, R773 += 1 };
  s2 -> s3 [73, 73] { R817 += 1, R773 += 1, R74 += 1, R75 += 1 };
  s2 -> s4 [73, 73] { R817 += 1, R773 += 1, R74 += 1, R75 += 1 };
  s2 -> s1 [74, 65535] { R817 += 1, R773 += 1, R74 += 1, R75 += 1 };
  s3 -> s6 [0, 65535] { R817 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R817 += 1, R773 += 1, R74 += 1, R75 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R817 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R817 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 72] { R819 += 1, R775 += 1, R81 += 1 };
  s0 -> s2 [0, 72] { R819 += 1, R775 += 1, R80 += 1, R81 += 1 };
  s0 -> s3 [0, 65535] { R819 += 1, R774 += 1, R775 += 1 };
  s0 -> s0 [0, 65535] { R818 += 1, R819 += 1 };
  s0 -> s4 [73, 73] { R819 += 1, R775 += 1, R81 += 1 };
  s0 -> s5 [73, 73] { R819 += 1, R775 += 1, R80 += 1, R81 += 1 };
  s0 -> s6 [73, 73] { R819 += 1, R775 += 1, R80 += 1, R81 += 1 };
  s0 -> s7 [73, 73] { R819 += 1, R775 += 1, R81 += 1 };
  s0 -> s1 [74, 77] { R819 += 1, R775 += 1, R81 += 1 };
  s0 -> s2 [74, 65535] { R819 += 1, R775 += 1, R80 += 1, R81 += 1 };
  s0 -> s8 [78, 78] { R819 += 1, R775 += 1, R81 += 1 };
  s0 -> s1 [79, 65535] { R819 += 1, R775 += 1, R81 += 1 };
  s1 -> s1 [0, 72] { R819 += 1, R775 += 1, R81 += 1 };
  s1 -> s4 [73, 73] { R819 += 1, R775 += 1, R81 += 1 };
  s1 -> s7 [73, 73] { R819 += 1, R775 += 1, R81 += 1 };
  s1 -> s1 [74, 77] { R819 += 1, R775 += 1, R81 += 1 };
  s1 -> s8 [78, 78] { R819 += 1, R775 += 1, R81 += 1 };
  s1 -> s1 [79, 65535] { R819 += 1, R775 += 1, R81 += 1 };
  s2 -> s1 [0, 72] { R819 += 1, R775 += 1, R81 += 1 };
  s2 -> s2 [0, 72] { R819 += 1, R775 += 1, R80 += 1, R81 += 1 };
  s2 -> s4 [73, 73] { R819 += 1, R775 += 1, R81 += 1 };
  s2 -> s5 [73, 73] { R819 += 1, R775 += 1, R80 += 1, R81 += 1 };
  s2 -> s6 [73, 73] { R819 += 1, R775 += 1, R80 += 1, R81 += 1 };
  s2 -> s7 [73, 73] { R819 += 1, R775 += 1, R81 += 1 };
  s2 -> s1 [74, 77] { R819 += 1, R775 += 1, R81 += 1 };
  s2 -> s2 [74, 65535] { R819 += 1, R775 += 1, R80 += 1, R81 += 1 };
  s2 -> s8 [78, 78] { R819 += 1, R775 += 1, R81 += 1 };
  s2 -> s1 [79, 65535] { R819 += 1, R775 += 1, R81 += 1 };
  s3 -> s1 [0, 72] { R819 += 1, R775 += 1, R81 += 1 };
  s3 -> s2 [0, 72] { R819 += 1, R775 += 1, R80 += 1, R81 += 1 };
  s3 -> s3 [0, 65535] { R819 += 1, R774 += 1, R775 += 1 };
  s3 -> s4 [73, 73] { R819 += 1, R775 += 1, R81 += 1 };
  s3 -> s5 [73, 73] { R819 += 1, R775 += 1, R80 += 1, R81 += 1 };
  s3 -> s6 [73, 73] { R819 += 1, R775 += 1, R80 += 1, R81 += 1 };
  s3 -> s7 [73, 73] { R819 += 1, R775 += 1, R81 += 1 };
  s3 -> s1 [74, 77] { R819 += 1, R775 += 1, R81 += 1 };
  s3 -> s2 [74, 65535] { R819 += 1, R775 += 1, R80 += 1, R81 += 1 };
  s3 -> s8 [78, 78] { R819 += 1, R775 += 1, R81 += 1 };
  s3 -> s1 [79, 65535] { R819 += 1, R775 += 1, R81 += 1 };
  s5 -> s7 [0, 77] { R819 += 1, R775 += 1, R81 += 1 };
  s5 -> s5 [0, 65535] { R819 += 1, R775 += 1, R80 += 1, R81 += 1 };
  s5 -> s11 [78, 78] { R819 += 1, R775 += 1, R81 += 1 };
  s5 -> s7 [79, 65535] { R819 += 1, R775 += 1, R81 += 1 };
  s7 -> s7 [0, 77] { R819 += 1, R775 += 1, R81 += 1 };
  s7 -> s11 [78, 78] { R819 += 1, R775 += 1, R81 += 1 };
  s7 -> s7 [79, 65535] { R819 += 1, R775 += 1, R81 += 1 };
  s8 -> s8 [0, 72] { R819 += 1, R775 += 1, R81 += 1 };
  s8 -> s8 [0, 65535] { R819 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [73, 73] { R819 += 1, R775 += 1, R81 += 1 };
  s8 -> s11 [73, 73] { R819 += 1, R775 += 1, R81 += 1 };
  s8 -> s8 [74, 65535] { R819 += 1, R775 += 1, R81 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R819 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R819 += 1, R775 += 1, R81 += 1 };
  s11 -> s12 [0, 65535] { R819 += 1 };
  s11 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R819 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 72] { R821 += 1, R777 += 1, R507 += 1, R508 += 1 };
  s0 -> s2 [0, 72] { R821 += 1, R777 += 1, R506 += 1, R507 += 1 };
  s0 -> s0 [0, 65535] { R820 += 1, R821 += 1 };
  s0 -> s3 [0, 65535] { R821 += 1, R776 += 1, R777 += 1 };
  s0 -> s4 [73, 73] { R821 += 1, R777 += 1, R506 += 1, R507 += 1 };
  s0 -> s5 [73, 73] { R821 += 1, R777 += 1, R507 += 1, R508 += 1 };
  s0 -> s6 [73, 73] { R821 += 1, R777 += 1, R506 += 1, R507 += 1 };
  s0 -> s7 [73, 73] { R821 += 1, R777 += 1, R507 += 1, R508 += 1 };
  s0 -> s1 [74, 65535] { R821 += 1, R777 += 1, R507 += 1, R508 += 1 };
  s0 -> s2 [74, 65535] { R821 += 1, R777 += 1, R506 += 1, R507 += 1 };
  s1 -> s1 [0, 72] { R821 += 1, R777 += 1, R507 += 1, R508 += 1 };
  s1 -> s1 [0, 65535] { R821 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s5 [73, 73] { R821 += 1, R777 += 1, R507 += 1, R508 += 1 };
  s1 -> s7 [73, 73] { R821 += 1, R777 += 1, R507 += 1, R508 += 1 };
  s1 -> s1 [74, 65535] { R821 += 1, R777 += 1, R507 += 1, R508 += 1 };
  s2 -> s1 [0, 72] { R821 += 1, R777 += 1, R507 += 1, R508 += 1 };
  s2 -> s2 [0, 72] { R821 += 1, R777 += 1, R506 += 1, R507 += 1 };
  s2 -> s4 [73, 73] { R821 += 1, R777 += 1, R506 += 1, R507 += 1 };
  s2 -> s5 [73, 73] { R821 += 1, R777 += 1, R507 += 1, R508 += 1 };
  s2 -> s6 [73, 73] { R821 += 1, R777 += 1, R506 += 1, R507 += 1 };
  s2 -> s7 [73, 73] { R821 += 1, R777 += 1, R507 += 1, R508 += 1 };
  s2 -> s1 [74, 65535] { R821 += 1, R777 += 1, R507 += 1, R508 += 1 };
  s2 -> s2 [74, 65535] { R821 += 1, R777 += 1, R506 += 1, R507 += 1 };
  s3 -> s1 [0, 72] { R821 += 1, R777 += 1, R507 += 1, R508 += 1 };
  s3 -> s2 [0, 72] { R821 += 1, R777 += 1, R506 += 1, R507 += 1 };
  s3 -> s3 [0, 65535] { R821 += 1, R776 += 1, R777 += 1 };
  s3 -> s4 [73, 73] { R821 += 1, R777 += 1, R506 += 1, R507 += 1 };
  s3 -> s5 [73, 73] { R821 += 1, R777 += 1, R507 += 1, R508 += 1 };
  s3 -> s6 [73, 73] { R821 += 1, R777 += 1, R506 += 1, R507 += 1 };
  s3 -> s7 [73, 73] { R821 += 1, R777 += 1, R507 += 1, R508 += 1 };
  s3 -> s1 [74, 65535] { R821 += 1, R777 += 1, R507 += 1, R508 += 1 };
  s3 -> s2 [74, 65535] { R821 += 1, R777 += 1, R506 += 1, R507 += 1 };
  s4 -> s4 [0, 65535] { R821 += 1, R777 += 1, R506 += 1, R507 += 1 };
  s4 -> s5 [0, 65535] { R821 += 1, R777 += 1, R507 += 1, R508 += 1 };
  s5 -> s5 [0, 65535] { R821 += 1, R777 += 1, R507 += 1, R508 += 1 };
  s5 -> s9 [0, 65535] { R821 += 1 };
  s5 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R821 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R821 += 1 };
  s9 -> s8 [0, 65535];
  accepting s8, s5, s9, s1, s7;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 72] { R823 += 1, R779 += 1, R720 += 1, R721 += 1 };
  s0 -> s2 [0, 72] { R823 += 1, R779 += 1, R721 += 1 };
  s0 -> s3 [0, 65535] { R823 += 1, R778 += 1, R779 += 1 };
  s0 -> s0 [0, 65535] { R822 += 1, R823 += 1 };
  s0 -> s4 [73, 73] { R823 += 1, R779 += 1, R721 += 1 };
  s0 -> s5 [73, 73] { R823 += 1, R779 += 1, R721 += 1 };
  s0 -> s6 [73, 73] { R823 += 1, R779 += 1, R720 += 1, R721 += 1 };
  s0 -> s7 [73, 73] { R823 += 1, R779 += 1, R720 += 1, R721 += 1 };
  s0 -> s2 [74, 76] { R823 += 1, R779 += 1, R721 += 1 };
  s0 -> s1 [74, 65535] { R823 += 1, R779 += 1, R720 += 1, R721 += 1 };
  s0 -> s8 [77, 77] { R823 += 1, R779 += 1, R721 += 1 };
  s0 -> s2 [79, 65535] { R823 += 1, R779 += 1, R721 += 1 };
  s1 -> s1 [0, 72] { R823 += 1, R779 += 1, R720 += 1, R721 += 1 };
  s1 -> s2 [0, 72] { R823 += 1, R779 += 1, R721 += 1 };
  s1 -> s4 [73, 73] { R823 += 1, R779 += 1, R721 += 1 };
  s1 -> s5 [73, 73] { R823 += 1, R779 += 1, R721 += 1 };
  s1 -> s6 [73, 73] { R823 += 1, R779 += 1, R720 += 1, R721 += 1 };
  s1 -> s7 [73, 73] { R823 += 1, R779 += 1, R720 += 1, R721 += 1 };
  s1 -> s2 [74, 76] { R823 += 1, R779 += 1, R721 += 1 };
  s1 -> s1 [74, 65535] { R823 += 1, R779 += 1, R720 += 1, R721 += 1 };
  s1 -> s8 [77, 77] { R823 += 1, R779 += 1, R721 += 1 };
  s1 -> s2 [79, 65535] { R823 += 1, R779 += 1, R721 += 1 };
  s2 -> s2 [0, 72] { R823 += 1, R779 += 1, R721 += 1 };
  s2 -> s4 [73, 73] { R823 += 1, R779 += 1 };
  s2 -> s5 [73, 73] { R823 += 1, R779 += 1 };
  s2 -> s2 [74, 76] { R823 += 1, R779 += 1, R721 += 1 };
  s2 -> s2 [74, 65535] { R823 += 1, R779 += 1 };
  s2 -> s8 [77, 77] { R823 += 1, R779 += 1, R721 += 1 };
  s2 -> s2 [79, 65535] { R823 += 1, R779 += 1, R721 += 1 };
  s3 -> s1 [0, 72] { R823 += 1, R779 += 1, R720 += 1, R721 += 1 };
  s3 -> s2 [0, 72] { R823 += 1, R779 += 1, R721 += 1 };
  s3 -> s3 [0, 65535] { R823 += 1, R778 += 1, R779 += 1 };
  s3 -> s4 [73, 73] { R823 += 1, R779 += 1, R721 += 1 };
  s3 -> s5 [73, 73] { R823 += 1, R779 += 1, R721 += 1 };
  s3 -> s6 [73, 73] { R823 += 1, R779 += 1, R720 += 1, R721 += 1 };
  s3 -> s7 [73, 73] { R823 += 1, R779 += 1, R720 += 1, R721 += 1 };
  s3 -> s2 [74, 76] { R823 += 1, R779 += 1, R721 += 1 };
  s3 -> s1 [74, 65535] { R823 += 1, R779 += 1, R720 += 1, R721 += 1 };
  s3 -> s8 [77, 77] { R823 += 1, R779 += 1, R721 += 1 };
  s3 -> s2 [79, 65535] { R823 += 1, R779 += 1, R721 += 1 };
  s4 -> s4 [0, 76] { R823 += 1, R779 += 1, R721 += 1 };
  s4 -> s4 [0, 65535] { R823 += 1, R779 += 1 };
  s4 -> s10 [77, 77] { R823 += 1, R779 += 1, R721 += 1 };
  s4 -> s4 [79, 65535] { R823 += 1, R779 += 1, R721 += 1 };
  s7 -> s4 [0, 76] { R823 += 1, R779 += 1, R721 += 1 };
  s7 -> s7 [0, 65535] { R823 += 1, R779 += 1, R720 += 1, R721 += 1 };
  s7 -> s10 [77, 77] { R823 += 1, R779 += 1, R721 += 1 };
  s7 -> s4 [79, 65535] { R823 += 1, R779 += 1, R721 += 1 };
  s8 -> s8 [0, 72] { R823 += 1, R779 += 1, R721 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R823 += 1 };
  s8 -> s10 [73, 73] { R823 += 1, R779 += 1 };
  s8 -> s11 [73, 73] { R823 += 1, R779 += 1 };
  s8 -> s8 [74, 77] { R823 += 1, R779 += 1, R721 += 1 };
  s8 -> s8 [74, 65535] { R823 += 1, R779 += 1 };
  s8 -> s8 [79, 65535] { R823 += 1, R779 += 1, R721 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 77] { R823 += 1, R779 += 1, R721 += 1 };
  s10 -> s10 [0, 65535] { R823 += 1, R779 += 1 };
  s10 -> s9 [0, 65535];
  s10 -> s12 [0, 65535] { R823 += 1 };
  s10 -> s10 [79, 65535] { R823 += 1, R779 += 1, R721 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R823 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R823 += 1 };
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
synchronised {  // Automata constraining P54
automaton P54_0 {
  init s0;
  s0 -> s1 [109, 109];
  accepting s1;
};
};
constraint R2 = R823 && R20 - R823 = -1 && R21 = R823 && R22 - R823 = -1 && R23 = R823 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R83 + -1*R81 - R53 = 0 && R52 + R82 + R80 = 0 && R764 = 0 && R765 = 0 && R774 = 0 && R775 = 0 && R776 = 0 && R777 = 0 && R778 = 0 && R779 = 0 && R780 = 0 && R781 = R823 && R782 = 0 && R783 = R823 && R784 = 0 && R785 = R823 && R786 = 0 && R787 = R823 && R788 = 0 && R789 = R823 && R790 = 0 && R791 = R823 && R792 = 0 && R793 = R823 && R794 = 0 && R795 = R823 && R796 = 0 && R797 = R823 && R798 = 0 && R799 = R823 && R800 = 0 && R801 = R823 && R802 = 0 && R803 = R823 && R804 = 0 && R805 = R823 && R806 = 0 && R807 = R823 && R808 = 0 && R809 = R823 && R810 = 0 && R811 = R823 && R812 = 0 && R813 = R823 && R814 = 0 && R815 = R823 && R816 = 0 && R817 = R823 && R818 = 0 && R819 = R823 && R820 = 0 && R821 = R823 && R822 = 0 && -1 < R1 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R83 + -1*R81 - R53 < 1 && 0 < R823 && (R1 != 0 || R17 = 0 || (R724 = 0 && R725 = 0)) && (R1 != 0 || R17 = 0 || (R726 = 0 && R727 = 0)) && (R1 != 0 || R17 = 0 || (R728 = 0 && R729 = 0)) && (R1 != 0 || R17 = 0 || (R730 = 0 && R731 = 0)) && (R1 != 0 || R17 = 0 || (R732 = 0 && R733 = 0)) && (R1 != 0 || R17 = 0 || (R734 = 0 && R735 = 0)) && (R1 != 0 || R17 = 0 || (R736 = 0 && R737 = 0)) && (R1 != 0 || R17 = 0 || (R738 = 0 && R739 = 0)) && (R1 != 0 || R17 = 0 || (R740 = 0 && R741 = 0)) && (R1 != 0 || R17 = 0 || (R742 = 0 && R743 = 0)) && (R48 + R79 + R76 != 0 || ((R42 + R72 + R70 != 0 || R43 + R73 + R71 + -1*R83 + -1*R81 - R53 = 0 || R53 + R83 + R81 < 1) && (R42 + R72 + R70 = 0 || R53 + R83 + R81 < 1))) && (R48 + R79 + R76 != 0 || ((R46 + R77 + R74 != 0 || R47 + R78 + R75 + -1*R83 + -1*R81 - R53 = 0 || R53 + R83 + R81 < 1) && (R46 + R77 + R74 = 0 || R53 + R83 + R81 < 1))) && (R724 != 0 || R1 = R725 || R1 < 1) && (R726 != 0 || R1 = R727 || R1 < 1) && (R728 != 0 || R1 = R729 || R1 < 1) && (R730 != 0 || R1 = R731 || R1 < 1) && (R732 != 0 || R1 = R733 || R1 < 1) && (R734 != 0 || R1 = R735 || R1 < 1) && (R736 != 0 || R1 = R737 || R1 < 1) && (R738 != 0 || R1 = R739 || R1 < 1) && (R740 != 0 || R1 = R741 || R1 < 1) && (R742 != 0 || R1 = R743 || R1 < 1) && (R18 = 0 || (R762 = 0 && R763 = 0)) && (R18 = 0 || (R766 = 0 && R767 = 0)) && (R18 = 0 || (R768 = 0 && R769 = 0)) && (R18 = 0 || (R770 = 0 && R771 = 0)) && (R18 = 0 || (R772 = 0 && R773 = 0)) && (R19 = 0 || (R744 = 0 && R745 = 0)) && (R19 = 0 || (R746 = 0 && R747 = 0)) && (R19 = 0 || (R748 = 0 && R749 = 0)) && (R19 = 0 || (R750 = 0 && R751 = 0)) && (R19 = 0 || (R752 = 0 && R753 = 0)) && (R19 = 0 || (R754 = 0 && R755 = 0)) && (R19 = 0 || (R756 = 0 && R757 = 0)) && (R19 = 0 || (R758 = 0 && R759 = 0)) && (R19 = 0 || (R760 = 0 && R761 = 0)) && (R48 + R79 + R76 = 0 || (R42 + R72 + R70 = 0 && R43 + R73 + R71 + -1*R83 + -1*R81 - R53 = 0)) && (R48 + R79 + R76 = 0 || (R46 + R77 + R74 = 0 && R47 + R78 + R75 + -1*R83 + -1*R81 - R53 = 0)) && (R58 + R511 + R508 = 0 || (R56 + R509 + R506 = 0 && R57 + R510 + R507 = 0)) && (R58 + R511 + R508 = 0 || (R62 + R722 + R720 = 0 && R63 + R723 + R721 = 0)) && (R724 = 0 || R1 < 1) && (R726 = 0 || R1 < 1) && (R728 = 0 || R1 < 1) && (R730 = 0 || R1 < 1) && (R732 = 0 || R1 < 1) && (R734 = 0 || R1 < 1) && (R736 = 0 || R1 < 1) && (R738 = 0 || R1 < 1) && (R740 = 0 || R1 < 1) && (R742 = 0 || R1 < 1);
// End of Parikh automata intersection problem
