// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R12, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R4, R40, R42, R43, R46, R47, R48, R5160, R5161, R5162, R5163, R5164, R5165, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R70, R71, R72, R73, R7706, R7707, R7708, R7709, R7710, R7711, R7712, R7713, R7714, R7715, R7820, R7821, R7822, R7823, R7824, R7825, R7826, R7827, R7828, R7829, R7830, R7831, R7832, R7833, R7834, R7835, R7836, R7837, R7838, R7839, R7840, R7841, R7842, R7843, R7844, R7845, R7846, R7847, R7848, R7849, R7850, R7851, R7852, R7853, R7854, R7855, R7856, R7857, R7858, R7859, R7860, R7861, R7862, R7863, R7864, R7865, R7866, R7867, R7868, R7869, R7870, R7871, R7872, R7873, R7874, R7875, R7876, R7877, R7878, R7879, R7880, R7881, R7882, R7883, R7884, R7885, R7886, R7887, R7888, R7889, R7890, R7891, R7892, R7893, R7894, R7895, R7896, R7897, R7898, R7899, R7900, R7901, R7902, R7903, R7904, R7905, R7906, R7907, R7908, R7909, R7910, R7911, R7912, R7913, R7914, R7915, R7916, R7917, R7918, R7919, R7920, R7921, R7922, R7923, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 72];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [73, 73];
  s0 -> s1 [74, 65535];
  s1 -> s1 [0, 72];
  s1 -> s2 [73, 73];
  s1 -> s1 [74, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s1 [0, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R25 += 1 };
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R7845 += 1, R19 += 1 };
  s0 -> s0 [0, 65535] { R7844 += 1, R7845 += 1 };
  s1 -> s1 [0, 65535] { R7845 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 72] { R7847 += 1 };
  s0 -> s0 [0, 65535] { R7846 += 1, R7847 += 1 };
  s0 -> s2 [73, 73] { R7847 += 1 };
  s0 -> s3 [73, 73] { R7847 += 1 };
  s0 -> s1 [78, 65535] { R7847 += 1 };
  s1 -> s1 [0, 72] { R7847 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R7847 += 1 };
  s1 -> s3 [73, 73] { R7847 += 1 };
  s1 -> s1 [78, 65535] { R7847 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 73] { R7847 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [78, 65535] { R7847 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 72] { R7849 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R7848 += 1, R7849 += 1 };
  s0 -> s2 [73, 73] { R7849 += 1, R38 += 1 };
  s0 -> s3 [73, 73] { R7849 += 1, R38 += 1 };
  s0 -> s1 [74, 65535] { R7849 += 1, R38 += 1 };
  s1 -> s1 [0, 72] { R7849 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R7849 += 1, R38 += 1 };
  s1 -> s3 [73, 73] { R7849 += 1, R38 += 1 };
  s1 -> s1 [74, 65535] { R7849 += 1, R38 += 1 };
  s2 -> s2 [0, 65535] { R7849 += 1, R38 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 72] { R7851 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R7850 += 1, R7851 += 1 };
  s0 -> s2 [73, 73] { R7851 += 1, R40 += 1 };
  s0 -> s3 [73, 73] { R7851 += 1, R40 += 1 };
  s0 -> s1 [74, 65535] { R7851 += 1, R40 += 1 };
  s1 -> s1 [0, 72] { R7851 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R7851 += 1, R40 += 1 };
  s1 -> s3 [73, 73] { R7851 += 1, R40 += 1 };
  s1 -> s1 [74, 65535] { R7851 += 1, R40 += 1 };
  s2 -> s2 [0, 65535] { R7851 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 72] { R7853 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R7852 += 1, R7853 += 1 };
  s0 -> s2 [73, 73] { R7853 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [73, 73] { R7853 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [74, 65535] { R7853 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 72] { R7853 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R7853 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [73, 73] { R7853 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [74, 65535] { R7853 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7853 += 1, R42 += 1, R43 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 72] { R7855 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R7854 += 1, R7855 += 1 };
  s0 -> s2 [73, 73] { R7855 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [73, 73] { R7855 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [74, 65535] { R7855 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 72] { R7855 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R7855 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [73, 73] { R7855 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [74, 65535] { R7855 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535] { R7855 += 1, R46 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 72] { R7857 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R7856 += 1, R7857 += 1 };
  s0 -> s2 [73, 73] { R7857 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [73, 73] { R7857 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [74, 65535] { R7857 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 72] { R7857 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R7857 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [73, 73] { R7857 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [74, 65535] { R7857 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7857 += 1, R52 += 1, R53 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 72] { R7859 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R7858 += 1, R7859 += 1 };
  s0 -> s2 [73, 73] { R7859 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [73, 73] { R7859 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [74, 65535] { R7859 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 72] { R7859 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R7859 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [73, 73] { R7859 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [74, 65535] { R7859 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535] { R7859 += 1, R56 += 1, R57 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 72] { R7861 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R7860 += 1, R7861 += 1 };
  s0 -> s2 [73, 73] { R7861 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [73, 73] { R7861 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [74, 65535] { R7861 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 72] { R7861 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R7861 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [73, 73] { R7861 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [74, 65535] { R7861 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7861 += 1, R62 += 1, R63 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 72] { R7881 += 1 };
  s0 -> s0 [0, 65535] { R7880 += 1, R7881 += 1 };
  s0 -> s2 [73, 73] { R7881 += 1 };
  s0 -> s1 [74, 65535] { R7881 += 1 };
  s1 -> s1 [0, 72] { R7881 += 1 };
  s1 -> s2 [73, 73] { R7881 += 1 };
  s1 -> s1 [74, 65535] { R7881 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R7881 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R7882 += 1, R7883 += 1 };
  s0 -> s1 [0, 65535] { R7883 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R7883 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 72] { R7885 += 1 };
  s0 -> s2 [0, 65535] { R7885 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R7884 += 1, R7885 += 1 };
  s0 -> s3 [73, 73] { R7885 += 1 };
  s0 -> s1 [74, 65535] { R7885 += 1 };
  s1 -> s1 [0, 72] { R7885 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [73, 73] { R7885 += 1 };
  s1 -> s1 [74, 65535] { R7885 += 1 };
  s2 -> s1 [0, 72] { R7885 += 1 };
  s2 -> s2 [0, 65535] { R7885 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [73, 73] { R7885 += 1 };
  s2 -> s1 [74, 65535] { R7885 += 1 };
  s3 -> s3 [0, 65535] { R7885 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 72] { R7887 += 1, R7825 += 1 };
  s0 -> s0 [0, 65535] { R7886 += 1, R7887 += 1 };
  s0 -> s2 [0, 65535] { R7887 += 1, R7824 += 1, R7825 += 1 };
  s0 -> s1 [74, 65535] { R7887 += 1, R7825 += 1 };
  s1 -> s1 [0, 72] { R7887 += 1, R7825 += 1 };
  s1 -> s1 [0, 65535] { R7887 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [74, 65535] { R7887 += 1, R7825 += 1 };
  s2 -> s1 [0, 72] { R7887 += 1, R7825 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R7887 += 1, R7824 += 1, R7825 += 1 };
  s2 -> s1 [74, 65535] { R7887 += 1, R7825 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R7889 += 1, R7827 += 1, R17 += 1 };
  s0 -> s2 [0, 65535] { R7889 += 1, R7826 += 1, R7827 += 1 };
  s0 -> s0 [0, 65535] { R7888 += 1, R7889 += 1 };
  s1 -> s4 [0, 65535] { R7889 += 1 };
  s1 -> s1 [0, 65535] { R7889 += 1, R7827 += 1, R17 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R7889 += 1, R7827 += 1, R17 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R7889 += 1, R7826 += 1, R7827 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7889 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 73] { R7891 += 1, R7829 += 1 };
  s0 -> s0 [0, 65535] { R7890 += 1, R7891 += 1 };
  s0 -> s2 [0, 65535] { R7891 += 1, R7828 += 1, R7829 += 1 };
  s0 -> s1 [77, 65535] { R7891 += 1, R7829 += 1 };
  s1 -> s1 [0, 73] { R7891 += 1, R7829 += 1 };
  s1 -> s1 [0, 65535] { R7891 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [77, 65535] { R7891 += 1, R7829 += 1 };
  s2 -> s1 [0, 73] { R7891 += 1, R7829 += 1 };
  s2 -> s2 [0, 65535] { R7891 += 1, R7828 += 1, R7829 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [77, 65535] { R7891 += 1, R7829 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R7893 += 1, R7830 += 1, R7831 += 1 };
  s0 -> s2 [0, 65535] { R7893 += 1, R7831 += 1, R67 += 1 };
  s0 -> s0 [0, 65535] { R7892 += 1, R7893 += 1 };
  s1 -> s1 [0, 65535] { R7893 += 1, R7830 += 1, R7831 += 1 };
  s1 -> s2 [0, 65535] { R7893 += 1, R7831 += 1, R67 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R7893 += 1, R7831 += 1, R67 += 1 };
  s2 -> s3 [0, 65535] { R7893 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7893 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 76] { R7895 += 1, R7833 += 1 };
  s0 -> s2 [0, 65535] { R7895 += 1, R7832 += 1, R7833 += 1 };
  s0 -> s3 [0, 65535] { R7895 += 1, R7833 += 1, R69 += 1 };
  s0 -> s0 [0, 65535] { R7894 += 1, R7895 += 1 };
  s0 -> s1 [78, 65535] { R7895 += 1, R7833 += 1 };
  s1 -> s1 [0, 76] { R7895 += 1, R7833 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R7895 += 1 };
  s1 -> s1 [78, 65535] { R7895 += 1, R7833 += 1 };
  s2 -> s1 [0, 76] { R7895 += 1, R7833 += 1 };
  s2 -> s2 [0, 65535] { R7895 += 1, R7832 += 1, R7833 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R7895 += 1, R7833 += 1, R69 += 1 };
  s2 -> s1 [78, 65535] { R7895 += 1, R7833 += 1 };
  s3 -> s1 [0, 76] { R7895 += 1, R7833 += 1 };
  s3 -> s4 [0, 65535] { R7895 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R7895 += 1, R7833 += 1, R69 += 1 };
  s3 -> s1 [78, 65535] { R7895 += 1, R7833 += 1 };
  s4 -> s4 [0, 65535] { R7895 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 76] { R7897 += 1, R7835 += 1, R73 += 1 };
  s0 -> s0 [0, 65535] { R7896 += 1, R7897 += 1 };
  s0 -> s2 [0, 65535] { R7897 += 1, R7835 += 1, R72 += 1, R73 += 1 };
  s0 -> s3 [0, 65535] { R7897 += 1, R7834 += 1, R7835 += 1 };
  s0 -> s1 [78, 65535] { R7897 += 1, R7835 += 1, R73 += 1 };
  s1 -> s1 [0, 76] { R7897 += 1, R7835 += 1, R73 += 1 };
  s1 -> s1 [0, 65535] { R7897 += 1, R7835 += 1 };
  s1 -> s5 [0, 65535] { R7897 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [78, 65535] { R7897 += 1, R7835 += 1, R73 += 1 };
  s2 -> s1 [0, 76] { R7897 += 1, R7835 += 1, R73 += 1 };
  s2 -> s2 [0, 65535] { R7897 += 1, R7835 += 1, R72 += 1, R73 += 1 };
  s2 -> s5 [0, 65535] { R7897 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [78, 65535] { R7897 += 1, R7835 += 1, R73 += 1 };
  s3 -> s1 [0, 76] { R7897 += 1, R7835 += 1, R73 += 1 };
  s3 -> s2 [0, 65535] { R7897 += 1, R7835 += 1, R72 += 1, R73 += 1 };
  s3 -> s3 [0, 65535] { R7897 += 1, R7834 += 1, R7835 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [78, 65535] { R7897 += 1, R7835 += 1, R73 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R7897 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R7899 += 1, R7837 += 1 };
  s0 -> s0 [0, 65535] { R7898 += 1, R7899 += 1 };
  s0 -> s2 [0, 65535] { R7899 += 1, R7836 += 1, R7837 += 1 };
  s0 -> s3 [0, 65535] { R7899 += 1, R7837 += 1, R5164 += 1, R5165 += 1 };
  s1 -> s1 [0, 65535] { R7899 += 1, R7837 += 1 };
  s1 -> s5 [0, 65535] { R7899 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R7899 += 1, R7837 += 1 };
  s2 -> s2 [0, 65535] { R7899 += 1, R7836 += 1, R7837 += 1 };
  s2 -> s3 [0, 65535] { R7899 += 1, R7837 += 1, R5164 += 1, R5165 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R7899 += 1, R7837 += 1 };
  s3 -> s5 [0, 65535] { R7899 += 1 };
  s3 -> s3 [0, 65535] { R7899 += 1, R7837 += 1, R5164 += 1, R5165 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R7899 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 77] { R7901 += 1, R7839 += 1, R7709 += 1 };
  s0 -> s2 [0, 65535] { R7901 += 1, R7838 += 1, R7839 += 1 };
  s0 -> s0 [0, 65535] { R7900 += 1, R7901 += 1 };
  s0 -> s3 [78, 78] { R7901 += 1, R7839 += 1, R7709 += 1 };
  s0 -> s1 [79, 65535] { R7901 += 1, R7839 += 1, R7709 += 1 };
  s1 -> s1 [0, 77] { R7901 += 1, R7839 += 1, R7709 += 1 };
  s1 -> s3 [78, 78] { R7901 += 1, R7839 += 1, R7709 += 1 };
  s1 -> s1 [79, 65535] { R7901 += 1, R7839 += 1, R7709 += 1 };
  s2 -> s1 [0, 77] { R7901 += 1, R7839 += 1, R7709 += 1 };
  s2 -> s2 [0, 65535] { R7901 += 1, R7838 += 1, R7839 += 1 };
  s2 -> s3 [78, 78] { R7901 += 1, R7839 += 1, R7709 += 1 };
  s2 -> s1 [79, 65535] { R7901 += 1, R7839 += 1, R7709 += 1 };
  s3 -> s4 [0, 65535] { R7901 += 1 };
  s3 -> s3 [0, 65535] { R7901 += 1, R7839 += 1, R7709 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R7901 += 1, R7839 += 1 };
  s4 -> s4 [0, 65535] { R7901 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R7901 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7901 += 1, R7839 += 1 };
  accepting s3, s4, s5, s6;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R7903 += 1, R7841 += 1, R7713 += 1, R7714 += 1 };
  s0 -> s2 [0, 65535] { R7903 += 1, R7840 += 1, R7841 += 1 };
  s0 -> s3 [0, 65535] { R7903 += 1, R7841 += 1, R7714 += 1, R7715 += 1 };
  s0 -> s0 [0, 65535] { R7902 += 1, R7903 += 1 };
  s1 -> s1 [0, 65535] { R7903 += 1, R7841 += 1, R7713 += 1, R7714 += 1 };
  s1 -> s3 [0, 65535] { R7903 += 1, R7841 += 1, R7714 += 1, R7715 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R7903 += 1 };
  s2 -> s1 [0, 65535] { R7903 += 1, R7841 += 1, R7713 += 1, R7714 += 1 };
  s2 -> s2 [0, 65535] { R7903 += 1, R7840 += 1, R7841 += 1 };
  s2 -> s3 [0, 65535] { R7903 += 1, R7841 += 1, R7714 += 1, R7715 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R7903 += 1, R7841 += 1, R7714 += 1, R7715 += 1 };
  s3 -> s4 [0, 65535] { R7903 += 1, R7841 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R7903 += 1 };
  s4 -> s4 [0, 65535] { R7903 += 1, R7841 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R7903 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7903 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 76] { R7905 += 1, R7843 += 1, R7823 += 1 };
  s0 -> s0 [0, 65535] { R7904 += 1, R7905 += 1 };
  s0 -> s2 [0, 65535] { R7905 += 1, R7842 += 1, R7843 += 1 };
  s0 -> s1 [0, 65535] { R7905 += 1, R7843 += 1 };
  s0 -> s3 [77, 77] { R7905 += 1, R7843 += 1, R7823 += 1 };
  s0 -> s4 [77, 77] { R7905 += 1, R7843 += 1, R7823 += 1 };
  s0 -> s1 [79, 65535] { R7905 += 1, R7843 += 1, R7823 += 1 };
  s1 -> s1 [0, 76] { R7905 += 1, R7843 += 1, R7823 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R7905 += 1 };
  s1 -> s1 [0, 65535] { R7905 += 1, R7843 += 1 };
  s1 -> s3 [77, 77] { R7905 += 1, R7843 += 1, R7823 += 1 };
  s1 -> s4 [77, 77] { R7905 += 1, R7843 += 1, R7823 += 1 };
  s1 -> s1 [79, 65535] { R7905 += 1, R7843 += 1, R7823 += 1 };
  s2 -> s1 [0, 76] { R7905 += 1, R7843 += 1, R7823 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R7905 += 1, R7842 += 1, R7843 += 1 };
  s2 -> s1 [0, 65535] { R7905 += 1, R7843 += 1 };
  s2 -> s3 [77, 77] { R7905 += 1, R7843 += 1, R7823 += 1 };
  s2 -> s4 [77, 77] { R7905 += 1, R7843 += 1, R7823 += 1 };
  s2 -> s1 [79, 65535] { R7905 += 1, R7843 += 1, R7823 += 1 };
  s3 -> s3 [0, 77] { R7905 += 1, R7843 += 1, R7823 += 1 };
  s3 -> s3 [0, 65535] { R7905 += 1, R7843 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R7905 += 1 };
  s3 -> s3 [79, 65535] { R7905 += 1, R7843 += 1, R7823 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R7905 += 1, R7843 += 1 };
  s4 -> s6 [0, 65535] { R7905 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7905 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s0 [0, 65535] { R7906 += 1, R7907 += 1 };
  s0 -> s1 [0, 65535] { R7907 += 1, R7862 += 1, R7863 += 1 };
  s0 -> s2 [0, 65535] { R7907 += 1, R7863 += 1, R18 += 1 };
  s1 -> s1 [0, 65535] { R7907 += 1, R7862 += 1, R7863 += 1 };
  s1 -> s2 [0, 65535] { R7907 += 1, R7863 += 1, R18 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R7907 += 1 };
  s2 -> s2 [0, 65535] { R7907 += 1, R7863 += 1, R18 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7907 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 72] { R7909 += 1, R7865 += 1 };
  s0 -> s2 [0, 65535] { R7909 += 1, R7864 += 1, R7865 += 1 };
  s0 -> s0 [0, 65535] { R7908 += 1, R7909 += 1 };
  s0 -> s3 [73, 73] { R7909 += 1, R7865 += 1 };
  s0 -> s4 [73, 73] { R7909 += 1, R7865 += 1 };
  s0 -> s5 [77, 77] { R7909 += 1, R7865 += 1 };
  s0 -> s1 [78, 65535] { R7909 += 1, R7865 += 1 };
  s1 -> s1 [0, 72] { R7909 += 1, R7865 += 1 };
  s1 -> s3 [73, 73] { R7909 += 1, R7865 += 1 };
  s1 -> s4 [73, 73] { R7909 += 1, R7865 += 1 };
  s1 -> s5 [77, 77] { R7909 += 1, R7865 += 1 };
  s1 -> s1 [78, 65535] { R7909 += 1, R7865 += 1 };
  s2 -> s1 [0, 72] { R7909 += 1, R7865 += 1 };
  s2 -> s2 [0, 65535] { R7909 += 1, R7864 += 1, R7865 += 1 };
  s2 -> s3 [73, 73] { R7909 += 1, R7865 += 1 };
  s2 -> s4 [73, 73] { R7909 += 1, R7865 += 1 };
  s2 -> s5 [77, 77] { R7909 += 1, R7865 += 1 };
  s2 -> s1 [78, 65535] { R7909 += 1, R7865 += 1 };
  s3 -> s3 [0, 73] { R7909 += 1, R7865 += 1 };
  s3 -> s7 [77, 77] { R7909 += 1, R7865 += 1 };
  s3 -> s3 [78, 65535] { R7909 += 1, R7865 += 1 };
  s5 -> s5 [0, 72] { R7909 += 1, R7865 += 1 };
  s5 -> s5 [0, 65535] { R7909 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [73, 73] { R7909 += 1, R7865 += 1 };
  s5 -> s8 [73, 73] { R7909 += 1, R7865 += 1 };
  s5 -> s5 [77, 65535] { R7909 += 1, R7865 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 73] { R7909 += 1, R7865 += 1 };
  s7 -> s7 [0, 65535] { R7909 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [77, 65535] { R7909 += 1, R7865 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R7909 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 72] { R7911 += 1, R7867 += 1, R66 += 1 };
  s0 -> s2 [0, 65535] { R7911 += 1, R7866 += 1, R7867 += 1 };
  s0 -> s0 [0, 65535] { R7910 += 1, R7911 += 1 };
  s0 -> s3 [73, 73] { R7911 += 1, R7867 += 1, R66 += 1 };
  s0 -> s4 [73, 73] { R7911 += 1, R7867 += 1, R66 += 1 };
  s0 -> s1 [74, 65535] { R7911 += 1, R7867 += 1, R66 += 1 };
  s1 -> s1 [0, 72] { R7911 += 1, R7867 += 1, R66 += 1 };
  s1 -> s1 [0, 65535] { R7911 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R7911 += 1, R7867 += 1, R66 += 1 };
  s1 -> s4 [73, 73] { R7911 += 1, R7867 += 1, R66 += 1 };
  s1 -> s1 [74, 65535] { R7911 += 1, R7867 += 1, R66 += 1 };
  s2 -> s1 [0, 72] { R7911 += 1, R7867 += 1, R66 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R7911 += 1, R7866 += 1, R7867 += 1 };
  s2 -> s3 [73, 73] { R7911 += 1, R7867 += 1, R66 += 1 };
  s2 -> s4 [73, 73] { R7911 += 1, R7867 += 1, R66 += 1 };
  s2 -> s1 [74, 65535] { R7911 += 1, R7867 += 1, R66 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R7911 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R7911 += 1, R7867 += 1, R66 += 1 };
  s4 -> s6 [0, 65535] { R7911 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7911 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 72] { R7913 += 1, R7869 += 1, R68 += 1 };
  s0 -> s2 [0, 65535] { R7913 += 1, R7868 += 1, R7869 += 1 };
  s0 -> s0 [0, 65535] { R7912 += 1, R7913 += 1 };
  s0 -> s3 [73, 73] { R7913 += 1, R7869 += 1, R68 += 1 };
  s0 -> s4 [73, 73] { R7913 += 1, R7869 += 1, R68 += 1 };
  s0 -> s1 [74, 65535] { R7913 += 1, R7869 += 1, R68 += 1 };
  s1 -> s1 [0, 72] { R7913 += 1, R7869 += 1, R68 += 1 };
  s1 -> s1 [0, 65535] { R7913 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R7913 += 1, R7869 += 1, R68 += 1 };
  s1 -> s4 [73, 73] { R7913 += 1, R7869 += 1, R68 += 1 };
  s1 -> s1 [74, 65535] { R7913 += 1, R7869 += 1, R68 += 1 };
  s2 -> s1 [0, 72] { R7913 += 1, R7869 += 1, R68 += 1 };
  s2 -> s2 [0, 65535] { R7913 += 1, R7868 += 1, R7869 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R7913 += 1, R7869 += 1, R68 += 1 };
  s2 -> s4 [73, 73] { R7913 += 1, R7869 += 1, R68 += 1 };
  s2 -> s1 [74, 65535] { R7913 += 1, R7869 += 1, R68 += 1 };
  s3 -> s3 [0, 65535] { R7913 += 1, R7869 += 1, R68 += 1 };
  s3 -> s6 [0, 65535] { R7913 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R7913 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7913 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 72] { R7915 += 1, R7871 += 1, R70 += 1, R71 += 1 };
  s0 -> s0 [0, 65535] { R7914 += 1, R7915 += 1 };
  s0 -> s2 [0, 65535] { R7915 += 1, R7870 += 1, R7871 += 1 };
  s0 -> s3 [73, 73] { R7915 += 1, R7871 += 1, R70 += 1, R71 += 1 };
  s0 -> s4 [73, 73] { R7915 += 1, R7871 += 1, R70 += 1, R71 += 1 };
  s0 -> s1 [74, 65535] { R7915 += 1, R7871 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 72] { R7915 += 1, R7871 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 65535] { R7915 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R7915 += 1, R7871 += 1, R70 += 1, R71 += 1 };
  s1 -> s4 [73, 73] { R7915 += 1, R7871 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [74, 65535] { R7915 += 1, R7871 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [0, 72] { R7915 += 1, R7871 += 1, R70 += 1, R71 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R7915 += 1, R7870 += 1, R7871 += 1 };
  s2 -> s3 [73, 73] { R7915 += 1, R7871 += 1, R70 += 1, R71 += 1 };
  s2 -> s4 [73, 73] { R7915 += 1, R7871 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [74, 65535] { R7915 += 1, R7871 += 1, R70 += 1, R71 += 1 };
  s3 -> s3 [0, 65535] { R7915 += 1, R7871 += 1, R70 += 1, R71 += 1 };
  s3 -> s6 [0, 65535] { R7915 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R7915 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7915 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 72] { R7917 += 1, R7873 += 1, R5160 += 1, R5161 += 1 };
  s0 -> s2 [0, 72] { R7917 += 1, R7873 += 1, R5161 += 1, R5162 += 1 };
  s0 -> s0 [0, 65535] { R7916 += 1, R7917 += 1 };
  s0 -> s3 [0, 65535] { R7917 += 1, R7872 += 1, R7873 += 1 };
  s0 -> s4 [73, 73] { R7917 += 1, R7873 += 1, R5161 += 1, R5162 += 1 };
  s0 -> s5 [73, 73] { R7917 += 1, R7873 += 1, R5160 += 1, R5161 += 1 };
  s0 -> s6 [73, 73] { R7917 += 1, R7873 += 1, R5161 += 1, R5162 += 1 };
  s0 -> s7 [73, 73] { R7917 += 1, R7873 += 1, R5160 += 1, R5161 += 1 };
  s0 -> s1 [74, 65535] { R7917 += 1, R7873 += 1, R5160 += 1, R5161 += 1 };
  s0 -> s2 [74, 65535] { R7917 += 1, R7873 += 1, R5161 += 1, R5162 += 1 };
  s1 -> s1 [0, 72] { R7917 += 1, R7873 += 1, R5160 += 1, R5161 += 1 };
  s1 -> s2 [0, 72] { R7917 += 1, R7873 += 1, R5161 += 1, R5162 += 1 };
  s1 -> s4 [73, 73] { R7917 += 1, R7873 += 1, R5161 += 1, R5162 += 1 };
  s1 -> s5 [73, 73] { R7917 += 1, R7873 += 1, R5160 += 1, R5161 += 1 };
  s1 -> s6 [73, 73] { R7917 += 1, R7873 += 1, R5161 += 1, R5162 += 1 };
  s1 -> s7 [73, 73] { R7917 += 1, R7873 += 1, R5160 += 1, R5161 += 1 };
  s1 -> s1 [74, 65535] { R7917 += 1, R7873 += 1, R5160 += 1, R5161 += 1 };
  s1 -> s2 [74, 65535] { R7917 += 1, R7873 += 1, R5161 += 1, R5162 += 1 };
  s2 -> s2 [0, 72] { R7917 += 1, R7873 += 1, R5161 += 1, R5162 += 1 };
  s2 -> s2 [0, 65535] { R7917 += 1 };
  s2 -> s9 [0, 65535];
  s2 -> s4 [73, 73] { R7917 += 1, R7873 += 1, R5161 += 1, R5162 += 1 };
  s2 -> s6 [73, 73] { R7917 += 1, R7873 += 1, R5161 += 1, R5162 += 1 };
  s2 -> s2 [74, 65535] { R7917 += 1, R7873 += 1, R5161 += 1, R5162 += 1 };
  s3 -> s1 [0, 72] { R7917 += 1, R7873 += 1, R5160 += 1, R5161 += 1 };
  s3 -> s2 [0, 72] { R7917 += 1, R7873 += 1, R5161 += 1, R5162 += 1 };
  s3 -> s3 [0, 65535] { R7917 += 1, R7872 += 1, R7873 += 1 };
  s3 -> s4 [73, 73] { R7917 += 1, R7873 += 1, R5161 += 1, R5162 += 1 };
  s3 -> s5 [73, 73] { R7917 += 1, R7873 += 1, R5160 += 1, R5161 += 1 };
  s3 -> s6 [73, 73] { R7917 += 1, R7873 += 1, R5161 += 1, R5162 += 1 };
  s3 -> s7 [73, 73] { R7917 += 1, R7873 += 1, R5160 += 1, R5161 += 1 };
  s3 -> s1 [74, 65535] { R7917 += 1, R7873 += 1, R5160 += 1, R5161 += 1 };
  s3 -> s2 [74, 65535] { R7917 += 1, R7873 += 1, R5161 += 1, R5162 += 1 };
  s4 -> s4 [0, 65535] { R7917 += 1 };
  s4 -> s9 [0, 65535];
  s5 -> s5 [0, 65535] { R7917 += 1, R7873 += 1, R5160 += 1, R5161 += 1 };
  s5 -> s6 [0, 65535] { R7917 += 1, R7873 += 1, R5161 += 1, R5162 += 1 };
  s6 -> s8 [0, 65535] { R7917 += 1 };
  s6 -> s6 [0, 65535] { R7917 += 1, R7873 += 1, R5161 += 1, R5162 += 1 };
  s6 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R7917 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s4, s8, s2, s9, s6;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 72] { R7919 += 1, R7875 += 1, R7707 += 1 };
  s0 -> s2 [0, 72] { R7919 += 1, R7875 += 1, R7706 += 1, R7707 += 1 };
  s0 -> s3 [0, 65535] { R7919 += 1, R7874 += 1, R7875 += 1 };
  s0 -> s0 [0, 65535] { R7918 += 1, R7919 += 1 };
  s0 -> s4 [73, 73] { R7919 += 1, R7875 += 1, R7707 += 1 };
  s0 -> s5 [73, 73] { R7919 += 1, R7875 += 1, R7707 += 1 };
  s0 -> s6 [73, 73] { R7919 += 1, R7875 += 1, R7706 += 1, R7707 += 1 };
  s0 -> s7 [73, 73] { R7919 += 1, R7875 += 1, R7706 += 1, R7707 += 1 };
  s0 -> s1 [74, 77] { R7919 += 1, R7875 += 1, R7707 += 1 };
  s0 -> s2 [74, 65535] { R7919 += 1, R7875 += 1, R7706 += 1, R7707 += 1 };
  s0 -> s1 [79, 65535] { R7919 += 1, R7875 += 1, R7707 += 1 };
  s1 -> s1 [0, 72] { R7919 += 1, R7875 += 1, R7707 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s1 [0, 65535] { R7919 += 1 };
  s1 -> s4 [73, 73] { R7919 += 1, R7875 += 1, R7707 += 1 };
  s1 -> s5 [73, 73] { R7919 += 1, R7875 += 1, R7707 += 1 };
  s1 -> s1 [74, 77] { R7919 += 1, R7875 += 1, R7707 += 1 };
  s1 -> s1 [79, 65535] { R7919 += 1, R7875 += 1, R7707 += 1 };
  s2 -> s1 [0, 72] { R7919 += 1, R7875 += 1, R7707 += 1 };
  s2 -> s2 [0, 72] { R7919 += 1, R7875 += 1, R7706 += 1, R7707 += 1 };
  s2 -> s4 [73, 73] { R7919 += 1, R7875 += 1, R7707 += 1 };
  s2 -> s5 [73, 73] { R7919 += 1, R7875 += 1, R7707 += 1 };
  s2 -> s6 [73, 73] { R7919 += 1, R7875 += 1, R7706 += 1, R7707 += 1 };
  s2 -> s7 [73, 73] { R7919 += 1, R7875 += 1, R7706 += 1, R7707 += 1 };
  s2 -> s1 [74, 77] { R7919 += 1, R7875 += 1, R7707 += 1 };
  s2 -> s2 [74, 65535] { R7919 += 1, R7875 += 1, R7706 += 1, R7707 += 1 };
  s2 -> s1 [79, 65535] { R7919 += 1, R7875 += 1, R7707 += 1 };
  s3 -> s1 [0, 72] { R7919 += 1, R7875 += 1, R7707 += 1 };
  s3 -> s2 [0, 72] { R7919 += 1, R7875 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s3 [0, 65535] { R7919 += 1, R7874 += 1, R7875 += 1 };
  s3 -> s4 [73, 73] { R7919 += 1, R7875 += 1, R7707 += 1 };
  s3 -> s5 [73, 73] { R7919 += 1, R7875 += 1, R7707 += 1 };
  s3 -> s6 [73, 73] { R7919 += 1, R7875 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s7 [73, 73] { R7919 += 1, R7875 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s1 [74, 77] { R7919 += 1, R7875 += 1, R7707 += 1 };
  s3 -> s2 [74, 65535] { R7919 += 1, R7875 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s1 [79, 65535] { R7919 += 1, R7875 += 1, R7707 += 1 };
  s4 -> s4 [0, 77] { R7919 += 1, R7875 += 1, R7707 += 1 };
  s4 -> s4 [0, 65535] { R7919 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s4 [79, 65535] { R7919 += 1, R7875 += 1, R7707 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s5 [0, 65535] { R7919 += 1 };
  s7 -> s4 [0, 77] { R7919 += 1, R7875 += 1, R7707 += 1 };
  s7 -> s7 [0, 65535] { R7919 += 1, R7875 += 1, R7706 += 1, R7707 += 1 };
  s7 -> s4 [79, 65535] { R7919 += 1, R7875 += 1, R7707 += 1 };
  s8 -> s8 [0, 65535];
  accepting s1, s4, s5, s8;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 72] { R7921 += 1, R7877 += 1, R7710 += 1, R7711 += 1 };
  s0 -> s2 [0, 65535] { R7921 += 1, R7876 += 1, R7877 += 1 };
  s0 -> s0 [0, 65535] { R7920 += 1, R7921 += 1 };
  s0 -> s3 [73, 73] { R7921 += 1, R7877 += 1, R7710 += 1, R7711 += 1 };
  s0 -> s4 [73, 73] { R7921 += 1, R7877 += 1, R7710 += 1, R7711 += 1 };
  s0 -> s1 [74, 65535] { R7921 += 1, R7877 += 1, R7710 += 1, R7711 += 1 };
  s1 -> s1 [0, 72] { R7921 += 1, R7877 += 1, R7710 += 1, R7711 += 1 };
  s1 -> s1 [0, 65535] { R7921 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [73, 73] { R7921 += 1, R7877 += 1, R7710 += 1, R7711 += 1 };
  s1 -> s4 [73, 73] { R7921 += 1, R7877 += 1, R7710 += 1, R7711 += 1 };
  s1 -> s1 [74, 65535] { R7921 += 1, R7877 += 1, R7710 += 1, R7711 += 1 };
  s2 -> s1 [0, 72] { R7921 += 1, R7877 += 1, R7710 += 1, R7711 += 1 };
  s2 -> s2 [0, 65535] { R7921 += 1, R7876 += 1, R7877 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [73, 73] { R7921 += 1, R7877 += 1, R7710 += 1, R7711 += 1 };
  s2 -> s4 [73, 73] { R7921 += 1, R7877 += 1, R7710 += 1, R7711 += 1 };
  s2 -> s1 [74, 65535] { R7921 += 1, R7877 += 1, R7710 += 1, R7711 += 1 };
  s3 -> s3 [0, 65535] { R7921 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R7921 += 1 };
  s4 -> s4 [0, 65535] { R7921 += 1, R7877 += 1, R7710 += 1, R7711 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R7921 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 72] { R7923 += 1, R7879 += 1, R7821 += 1 };
  s0 -> s2 [0, 72] { R7923 += 1, R7879 += 1, R7820 += 1, R7821 += 1 };
  s0 -> s3 [0, 65535] { R7923 += 1, R7878 += 1, R7879 += 1 };
  s0 -> s0 [0, 65535] { R7922 += 1, R7923 += 1 };
  s0 -> s4 [73, 73] { R7923 += 1, R7879 += 1, R7820 += 1, R7821 += 1 };
  s0 -> s5 [73, 73] { R7923 += 1, R7879 += 1, R7821 += 1 };
  s0 -> s6 [73, 73] { R7923 += 1, R7879 += 1, R7821 += 1 };
  s0 -> s7 [73, 73] { R7923 += 1, R7879 += 1, R7820 += 1, R7821 += 1 };
  s0 -> s1 [74, 76] { R7923 += 1, R7879 += 1, R7821 += 1 };
  s0 -> s2 [74, 65535] { R7923 += 1, R7879 += 1, R7820 += 1, R7821 += 1 };
  s0 -> s1 [79, 65535] { R7923 += 1, R7879 += 1, R7821 += 1 };
  s1 -> s1 [0, 72] { R7923 += 1, R7879 += 1, R7821 += 1 };
  s1 -> s1 [0, 65535] { R7923 += 1 };
  s1 -> s9 [0, 65535];
  s1 -> s5 [73, 73] { R7923 += 1, R7879 += 1 };
  s1 -> s6 [73, 73] { R7923 += 1, R7879 += 1 };
  s1 -> s1 [74, 76] { R7923 += 1, R7879 += 1, R7821 += 1 };
  s1 -> s1 [74, 65535] { R7923 += 1, R7879 += 1 };
  s1 -> s1 [79, 65535] { R7923 += 1, R7879 += 1, R7821 += 1 };
  s2 -> s1 [0, 72] { R7923 += 1, R7879 += 1, R7821 += 1 };
  s2 -> s2 [0, 72] { R7923 += 1, R7879 += 1, R7820 += 1, R7821 += 1 };
  s2 -> s4 [73, 73] { R7923 += 1, R7879 += 1, R7820 += 1, R7821 += 1 };
  s2 -> s5 [73, 73] { R7923 += 1, R7879 += 1, R7821 += 1 };
  s2 -> s6 [73, 73] { R7923 += 1, R7879 += 1, R7821 += 1 };
  s2 -> s7 [73, 73] { R7923 += 1, R7879 += 1, R7820 += 1, R7821 += 1 };
  s2 -> s1 [74, 76] { R7923 += 1, R7879 += 1, R7821 += 1 };
  s2 -> s2 [74, 65535] { R7923 += 1, R7879 += 1, R7820 += 1, R7821 += 1 };
  s2 -> s1 [79, 65535] { R7923 += 1, R7879 += 1, R7821 += 1 };
  s3 -> s1 [0, 72] { R7923 += 1, R7879 += 1, R7821 += 1 };
  s3 -> s2 [0, 72] { R7923 += 1, R7879 += 1, R7820 += 1, R7821 += 1 };
  s3 -> s3 [0, 65535] { R7923 += 1, R7878 += 1, R7879 += 1 };
  s3 -> s4 [73, 73] { R7923 += 1, R7879 += 1, R7820 += 1, R7821 += 1 };
  s3 -> s5 [73, 73] { R7923 += 1, R7879 += 1, R7821 += 1 };
  s3 -> s6 [73, 73] { R7923 += 1, R7879 += 1, R7821 += 1 };
  s3 -> s7 [73, 73] { R7923 += 1, R7879 += 1, R7820 += 1, R7821 += 1 };
  s3 -> s1 [74, 76] { R7923 += 1, R7879 += 1, R7821 += 1 };
  s3 -> s2 [74, 65535] { R7923 += 1, R7879 += 1, R7820 += 1, R7821 += 1 };
  s3 -> s1 [79, 65535] { R7923 += 1, R7879 += 1, R7821 += 1 };
  s5 -> s5 [0, 65535] { R7923 += 1 };
  s5 -> s9 [0, 65535];
  s6 -> s6 [0, 76] { R7923 += 1, R7879 += 1, R7821 += 1 };
  s6 -> s6 [0, 65535] { R7923 += 1, R7879 += 1 };
  s6 -> s8 [0, 65535] { R7923 += 1 };
  s6 -> s9 [0, 65535];
  s6 -> s6 [79, 65535] { R7923 += 1, R7879 += 1, R7821 += 1 };
  s7 -> s6 [0, 76] { R7923 += 1, R7879 += 1, R7821 += 1 };
  s7 -> s7 [0, 65535] { R7923 += 1, R7879 += 1, R7820 += 1, R7821 += 1 };
  s7 -> s6 [79, 65535] { R7923 += 1, R7879 += 1, R7821 += 1 };
  s8 -> s8 [0, 65535] { R7923 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s8, s5, s9, s6, s1;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
synchronised {  // Automata constraining P54
automaton P54_0 {
  init s0;
  s0 -> s1 [109, 109];
  accepting s1;
};
};
constraint R1 = R7839 && R2 = R7923 && R20 - R7923 = -1 && R21 = R7923 && R22 - R7923 = -1 && R23 = R7923 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R7709 + -1*R7707 - R53 = 0 && R52 + R7708 + R7706 = 0 && R7838 = 0 && R7864 = 0 && R7865 = 0 && R7872 = 0 && R7873 = 0 && R7874 = 0 && R7875 = 0 && R7878 = 0 && R7879 = 0 && R7880 = 0 && R7881 = R7923 && R7882 = 0 && R7883 = R7923 && R7884 = 0 && R7885 = R7923 && R7886 = 0 && R7887 = R7923 && R7888 = 0 && R7889 = R7923 && R7890 = 0 && R7891 = R7923 && R7892 = 0 && R7893 = R7923 && R7894 = 0 && R7895 = R7923 && R7896 = 0 && R7897 = R7923 && R7898 = 0 && R7899 = R7923 && R7900 = 0 && R7901 = R7923 && R7902 = 0 && R7903 = R7923 && R7904 = 0 && R7905 = R7923 && R7906 = 0 && R7907 = R7923 && R7908 = 0 && R7909 = R7923 && R7910 = 0 && R7911 = R7923 && R7912 = 0 && R7913 = R7923 && R7914 = 0 && R7915 = R7923 && R7916 = 0 && R7917 = R7923 && R7918 = 0 && R7919 = R7923 && R7920 = 0 && R7921 = R7923 && R7922 = 0 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R7709 + -1*R7707 - R53 < 1 && -1 < R7839 && 0 < R7923 && (R48 + R5165 + R5162 != 0 || ((R42 + R72 + R70 != 0 || R43 + R73 + R71 + -1*R7709 + -1*R7707 - R53 = 0 || R53 + R7709 + R7707 < 1) && (R42 + R72 + R70 = 0 || R53 + R7709 + R7707 < 1))) && (R48 + R5165 + R5162 != 0 || ((R46 + R5163 + R5160 != 0 || R47 + R5164 + R5161 + -1*R7709 + -1*R7707 - R53 = 0 || R53 + R7709 + R7707 < 1) && (R46 + R5163 + R5160 = 0 || R53 + R7709 + R7707 < 1))) && (R7824 != 0 || R7825 = R7839 || (R17 = 0 && R7839 = 0)) && (R7826 != 0 || R7827 = R7839 || (R17 = 0 && R7839 = 0)) && (R7828 != 0 || R7829 = R7839 || (R17 = 0 && R7839 = 0)) && (R7830 != 0 || R7831 = R7839 || (R17 = 0 && R7839 = 0)) && (R7832 != 0 || R7833 = R7839 || (R17 = 0 && R7839 = 0)) && (R7834 != 0 || R7835 = R7839 || (R17 = 0 && R7839 = 0)) && (R7836 != 0 || R7837 = R7839 || (R17 = 0 && R7839 = 0)) && (R7840 != 0 || R7839 = R7841 || (R17 = 0 && R7839 = 0)) && (R7842 != 0 || R7839 = R7843 || (R17 = 0 && R7839 = 0)) && (R18 = 0 || (R7862 = 0 && R7863 = 0)) && (R18 = 0 || (R7866 = 0 && R7867 = 0)) && (R18 = 0 || (R7868 = 0 && R7869 = 0)) && (R18 = 0 || (R7870 = 0 && R7871 = 0)) && (R18 = 0 || (R7876 = 0 && R7877 = 0)) && (R19 = 0 || (R7844 = 0 && R7845 = 0)) && (R19 = 0 || (R7846 = 0 && R7847 = 0)) && (R19 = 0 || (R7848 = 0 && R7849 = 0)) && (R19 = 0 || (R7850 = 0 && R7851 = 0)) && (R19 = 0 || (R7852 = 0 && R7853 = 0)) && (R19 = 0 || (R7854 = 0 && R7855 = 0)) && (R19 = 0 || (R7856 = 0 && R7857 = 0)) && (R19 = 0 || (R7858 = 0 && R7859 = 0)) && (R19 = 0 || (R7860 = 0 && R7861 = 0)) && (R48 + R5165 + R5162 = 0 || (R42 + R72 + R70 = 0 && R43 + R73 + R71 + -1*R7709 + -1*R7707 - R53 = 0)) && (R48 + R5165 + R5162 = 0 || (R46 + R5163 + R5160 = 0 && R47 + R5164 + R5161 + -1*R7709 + -1*R7707 - R53 = 0)) && (R58 + R7715 + R7712 = 0 || (R56 + R7713 + R7710 = 0 && R57 + R7714 + R7711 = 0)) && (R58 + R7715 + R7712 = 0 || (R62 + R7822 + R7820 = 0 && R63 + R7823 + R7821 = 0)) && (R7824 = 0 || (R17 = 0 && R7839 = 0)) && (R7826 = 0 || (R17 = 0 && R7839 = 0)) && (R7828 = 0 || (R17 = 0 && R7839 = 0)) && (R7830 = 0 || (R17 = 0 && R7839 = 0)) && (R7832 = 0 || (R17 = 0 && R7839 = 0)) && (R7834 = 0 || (R17 = 0 && R7839 = 0)) && (R7836 = 0 || (R17 = 0 && R7839 = 0)) && (R7840 = 0 || (R17 = 0 && R7839 = 0)) && (R7842 = 0 || (R17 = 0 && R7839 = 0));
// End of Parikh automata intersection problem
