// Parikh automata intersection problem, generated by OSTRICH+
counter int R100, R101, R102, R103, R104, R105, R106, R107, R108, R109, R11, R110, R111, R112, R113, R114, R115, R116, R117, R118, R119, R12, R120, R121, R122, R123, R124, R125, R126, R127, R128, R129, R130, R131, R132, R133, R134, R135, R136, R137, R138, R139, R140, R141, R142, R143, R144, R145, R146, R147, R148, R149, R150, R151, R152, R153, R154, R155, R156, R157, R158, R159, R160, R161, R162, R163, R164, R165, R166, R167, R168, R169, R170, R171, R172, R173, R174, R175, R176, R177, R178, R179, R18, R180, R181, R182, R183, R184, R185, R186, R187, R188, R189, R19, R190, R191, R192, R193, R194, R195, R196, R197, R198, R199, R2, R20, R200, R201, R202, R203, R204, R205, R206, R207, R208, R209, R21, R210, R211, R212, R213, R214, R215, R216, R217, R218, R219, R22, R220, R221, R222, R223, R224, R225, R226, R227, R228, R229, R23, R24, R25, R26, R27, R3, R4, R72, R73, R74, R75, R76, R77, R78, R79, R80, R81, R82, R83, R84, R85, R86, R87, R88, R89, R90, R91, R92, R93, R94, R95, R96, R97, R98, R99;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [65, 65];
  s0 -> s0 [66, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 64];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [65, 65];
  s0 -> s1 [66, 65535];
  s1 -> s1 [0, 64];
  s1 -> s2 [65, 65];
  s1 -> s1 [66, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s1 [0, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R25 += 1 };
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 64] { R161 += 1 };
  s0 -> s0 [0, 65535] { R160 += 1, R161 += 1 };
  s0 -> s1 [66, 65535] { R161 += 1 };
  s1 -> s1 [0, 64] { R161 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [66, 65535] { R161 += 1 };
  accepting s0, s1;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 65535] { R163 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R162 += 1, R163 += 1 };
  s1 -> s1 [0, 65535] { R163 += 1, R18 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 65] { R165 += 1 };
  s0 -> s0 [0, 65535] { R164 += 1, R165 += 1 };
  s0 -> s2 [68, 68] { R165 += 1 };
  s0 -> s1 [69, 65535] { R165 += 1 };
  s1 -> s1 [0, 65] { R165 += 1 };
  s1 -> s2 [68, 68] { R165 += 1 };
  s1 -> s1 [69, 65535] { R165 += 1 };
  s2 -> s2 [0, 65] { R165 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [68, 65535] { R165 += 1 };
  accepting s2;
};
automaton value2_11 {
  init s0;
  s0 -> s0 [0, 65535] { R166 += 1, R167 += 1 };
  s0 -> s1 [0, 65535] { R167 += 1, R73 += 1 };
  s1 -> s1 [0, 65535] { R167 += 1, R73 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 67] { R169 += 1 };
  s0 -> s2 [0, 65535] { R169 += 1, R75 += 1 };
  s0 -> s0 [0, 65535] { R168 += 1, R169 += 1 };
  s0 -> s1 [69, 65535] { R169 += 1 };
  s1 -> s1 [0, 67] { R169 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [69, 65535] { R169 += 1 };
  s2 -> s1 [0, 67] { R169 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R169 += 1, R75 += 1 };
  s2 -> s1 [69, 65535] { R169 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 67] { R171 += 1, R79 += 1 };
  s0 -> s2 [0, 65535] { R171 += 1, R78 += 1, R79 += 1 };
  s0 -> s0 [0, 65535] { R170 += 1, R171 += 1 };
  s0 -> s1 [69, 65535] { R171 += 1, R79 += 1 };
  s1 -> s1 [0, 67] { R171 += 1, R79 += 1 };
  s1 -> s1 [0, 65535] { R171 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [69, 65535] { R171 += 1, R79 += 1 };
  s2 -> s1 [0, 67] { R171 += 1, R79 += 1 };
  s2 -> s2 [0, 65535] { R171 += 1, R78 += 1, R79 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [69, 65535] { R171 += 1, R79 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 65535] { R173 += 1, R83 += 1, R84 += 1 };
  s0 -> s2 [0, 65535] { R173 += 1, R84 += 1, R85 += 1 };
  s0 -> s0 [0, 65535] { R172 += 1, R173 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R173 += 1, R83 += 1, R84 += 1 };
  s1 -> s2 [0, 65535] { R173 += 1, R84 += 1, R85 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R173 += 1 };
  s2 -> s2 [0, 65535] { R173 += 1, R84 += 1, R85 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R173 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 68] { R175 += 1, R89 += 1 };
  s0 -> s0 [0, 65535] { R174 += 1, R175 += 1 };
  s0 -> s2 [0, 65535] { R175 += 1, R88 += 1, R89 += 1 };
  s0 -> s3 [74, 74] { R175 += 1, R89 += 1 };
  s0 -> s1 [75, 65535] { R175 += 1, R89 += 1 };
  s1 -> s1 [0, 68] { R175 += 1, R89 += 1 };
  s1 -> s3 [74, 74] { R175 += 1, R89 += 1 };
  s1 -> s1 [75, 65535] { R175 += 1, R89 += 1 };
  s2 -> s1 [0, 68] { R175 += 1, R89 += 1 };
  s2 -> s2 [0, 65535] { R175 += 1, R88 += 1, R89 += 1 };
  s2 -> s3 [74, 74] { R175 += 1, R89 += 1 };
  s2 -> s1 [75, 65535] { R175 += 1, R89 += 1 };
  s3 -> s3 [0, 68] { R175 += 1, R89 += 1 };
  s3 -> s3 [0, 65535] { R175 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [74, 65535] { R175 += 1, R89 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 65535] { R177 += 1, R94 += 1, R95 += 1 };
  s0 -> s0 [0, 65535] { R176 += 1, R177 += 1 };
  s0 -> s2 [0, 65535] { R177 += 1, R93 += 1, R94 += 1 };
  s1 -> s1 [0, 65535] { R177 += 1, R94 += 1, R95 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R177 += 1 };
  s2 -> s1 [0, 65535] { R177 += 1, R94 += 1, R95 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R177 += 1, R93 += 1, R94 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R177 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 73] { R179 += 1, R100 += 1 };
  s0 -> s2 [0, 65535] { R179 += 1, R100 += 1, R101 += 1 };
  s0 -> s3 [0, 65535] { R179 += 1, R99 += 1, R100 += 1 };
  s0 -> s0 [0, 65535] { R178 += 1, R179 += 1 };
  s0 -> s1 [75, 65535] { R179 += 1, R100 += 1 };
  s1 -> s1 [0, 73] { R179 += 1, R100 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R179 += 1 };
  s1 -> s1 [75, 65535] { R179 += 1, R100 += 1 };
  s2 -> s1 [0, 73] { R179 += 1, R100 += 1 };
  s2 -> s2 [0, 65535] { R179 += 1, R100 += 1, R101 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R179 += 1 };
  s2 -> s1 [75, 65535] { R179 += 1, R100 += 1 };
  s3 -> s1 [0, 73] { R179 += 1, R100 += 1 };
  s3 -> s2 [0, 65535] { R179 += 1, R100 += 1, R101 += 1 };
  s3 -> s3 [0, 65535] { R179 += 1, R99 += 1, R100 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [75, 65535] { R179 += 1, R100 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R179 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 73] { R181 += 1, R107 += 1, R109 += 1 };
  s0 -> s0 [0, 65535] { R180 += 1, R181 += 1 };
  s0 -> s2 [0, 65535] { R181 += 1, R106 += 1, R107 += 1 };
  s0 -> s3 [0, 65535] { R181 += 1, R107 += 1, R108 += 1, R109 += 1 };
  s0 -> s4 [74, 74] { R181 += 1, R107 += 1, R109 += 1 };
  s0 -> s1 [75, 65535] { R181 += 1, R107 += 1, R109 += 1 };
  s1 -> s1 [0, 73] { R181 += 1, R107 += 1, R109 += 1 };
  s1 -> s4 [74, 74] { R181 += 1, R107 += 1, R109 += 1 };
  s1 -> s1 [75, 65535] { R181 += 1, R107 += 1, R109 += 1 };
  s2 -> s1 [0, 73] { R181 += 1, R107 += 1, R109 += 1 };
  s2 -> s2 [0, 65535] { R181 += 1, R106 += 1, R107 += 1 };
  s2 -> s3 [0, 65535] { R181 += 1, R107 += 1, R108 += 1, R109 += 1 };
  s2 -> s4 [74, 74] { R181 += 1, R107 += 1, R109 += 1 };
  s2 -> s1 [75, 65535] { R181 += 1, R107 += 1, R109 += 1 };
  s3 -> s1 [0, 73] { R181 += 1, R107 += 1, R109 += 1 };
  s3 -> s3 [0, 65535] { R181 += 1, R107 += 1, R108 += 1, R109 += 1 };
  s3 -> s4 [74, 74] { R181 += 1, R107 += 1, R109 += 1 };
  s3 -> s1 [75, 65535] { R181 += 1, R107 += 1, R109 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R181 += 1, R107 += 1 };
  s4 -> s4 [0, 65535] { R181 += 1, R107 += 1, R109 += 1 };
  s4 -> s7 [0, 65535] { R181 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R181 += 1, R107 += 1 };
  s6 -> s7 [0, 65535] { R181 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R181 += 1 };
  accepting s4, s5, s6, s7;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 65535] { R183 += 1, R115 += 1, R116 += 1 };
  s0 -> s2 [0, 65535] { R183 += 1, R116 += 1, R117 += 1, R118 += 1 };
  s0 -> s3 [0, 65535] { R183 += 1, R116 += 1, R118 += 1, R119 += 1 };
  s0 -> s0 [0, 65535] { R182 += 1, R183 += 1 };
  s1 -> s1 [0, 65535] { R183 += 1, R115 += 1, R116 += 1 };
  s1 -> s2 [0, 65535] { R183 += 1, R116 += 1, R117 += 1, R118 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R183 += 1, R116 += 1, R118 += 1, R119 += 1 };
  s2 -> s2 [0, 65535] { R183 += 1, R116 += 1, R117 += 1, R118 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R183 += 1, R116 += 1, R118 += 1, R119 += 1 };
  s2 -> s6 [0, 65535] { R183 += 1 };
  s3 -> s4 [0, 65535] { R183 += 1, R116 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R183 += 1, R116 += 1, R118 += 1, R119 += 1 };
  s3 -> s6 [0, 65535] { R183 += 1 };
  s4 -> s4 [0, 65535] { R183 += 1, R116 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R183 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R183 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 65535] { R185 += 1, R124 += 1, R125 += 1 };
  s0 -> s0 [0, 65535] { R184 += 1, R185 += 1 };
  s0 -> s2 [0, 65535] { R185 += 1, R123 += 1, R124 += 1 };
  s1 -> s1 [0, 65535] { R185 += 1, R124 += 1, R125 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R185 += 1 };
  s2 -> s1 [0, 65535] { R185 += 1, R124 += 1, R125 += 1 };
  s2 -> s2 [0, 65535] { R185 += 1, R123 += 1, R124 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R185 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 67] { R187 += 1, R129 += 1 };
  s0 -> s2 [0, 65535] { R187 += 1, R128 += 1, R129 += 1 };
  s0 -> s0 [0, 65535] { R186 += 1, R187 += 1 };
  s0 -> s3 [68, 68] { R187 += 1, R129 += 1 };
  s0 -> s4 [68, 68] { R187 += 1, R129 += 1 };
  s0 -> s1 [75, 65535] { R187 += 1, R129 += 1 };
  s1 -> s1 [0, 67] { R187 += 1, R129 += 1 };
  s1 -> s1 [0, 65535] { R187 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [68, 68] { R187 += 1, R129 += 1 };
  s1 -> s4 [68, 68] { R187 += 1, R129 += 1 };
  s1 -> s1 [75, 65535] { R187 += 1, R129 += 1 };
  s2 -> s1 [0, 67] { R187 += 1, R129 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R187 += 1, R128 += 1, R129 += 1 };
  s2 -> s3 [68, 68] { R187 += 1, R129 += 1 };
  s2 -> s4 [68, 68] { R187 += 1, R129 += 1 };
  s2 -> s1 [75, 65535] { R187 += 1, R129 += 1 };
  s3 -> s3 [0, 65535] { R187 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 68] { R187 += 1, R129 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R187 += 1 };
  s4 -> s4 [75, 65535] { R187 += 1, R129 += 1 };
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 67] { R189 += 1, R134 += 1, R135 += 1 };
  s0 -> s2 [0, 65535] { R189 += 1, R133 += 1, R134 += 1 };
  s0 -> s0 [0, 65535] { R188 += 1, R189 += 1 };
  s0 -> s3 [68, 68] { R189 += 1, R134 += 1, R135 += 1 };
  s0 -> s4 [68, 68] { R189 += 1, R134 += 1, R135 += 1 };
  s0 -> s1 [69, 65535] { R189 += 1, R134 += 1, R135 += 1 };
  s1 -> s1 [0, 67] { R189 += 1, R134 += 1, R135 += 1 };
  s1 -> s1 [0, 65535] { R189 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [68, 68] { R189 += 1, R134 += 1, R135 += 1 };
  s1 -> s4 [68, 68] { R189 += 1, R134 += 1, R135 += 1 };
  s1 -> s1 [69, 65535] { R189 += 1, R134 += 1, R135 += 1 };
  s2 -> s1 [0, 67] { R189 += 1, R134 += 1, R135 += 1 };
  s2 -> s2 [0, 65535] { R189 += 1, R133 += 1, R134 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [68, 68] { R189 += 1, R134 += 1, R135 += 1 };
  s2 -> s4 [68, 68] { R189 += 1, R134 += 1, R135 += 1 };
  s2 -> s1 [69, 65535] { R189 += 1, R134 += 1, R135 += 1 };
  s3 -> s3 [0, 65535] { R189 += 1, R134 += 1, R135 += 1 };
  s3 -> s6 [0, 65535] { R189 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R189 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R189 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 67] { R191 += 1, R140 += 1, R141 += 1 };
  s0 -> s2 [0, 65535] { R191 += 1, R139 += 1, R140 += 1 };
  s0 -> s0 [0, 65535] { R190 += 1, R191 += 1 };
  s0 -> s3 [68, 68] { R191 += 1, R140 += 1, R141 += 1 };
  s0 -> s4 [68, 68] { R191 += 1, R140 += 1, R141 += 1 };
  s0 -> s1 [69, 65535] { R191 += 1, R140 += 1, R141 += 1 };
  s1 -> s1 [0, 67] { R191 += 1, R140 += 1, R141 += 1 };
  s1 -> s1 [0, 65535] { R191 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [68, 68] { R191 += 1, R140 += 1, R141 += 1 };
  s1 -> s4 [68, 68] { R191 += 1, R140 += 1, R141 += 1 };
  s1 -> s1 [69, 65535] { R191 += 1, R140 += 1, R141 += 1 };
  s2 -> s1 [0, 67] { R191 += 1, R140 += 1, R141 += 1 };
  s2 -> s2 [0, 65535] { R191 += 1, R139 += 1, R140 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [68, 68] { R191 += 1, R140 += 1, R141 += 1 };
  s2 -> s4 [68, 68] { R191 += 1, R140 += 1, R141 += 1 };
  s2 -> s1 [69, 65535] { R191 += 1, R140 += 1, R141 += 1 };
  s3 -> s3 [0, 65535] { R191 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R191 += 1 };
  s4 -> s4 [0, 65535] { R191 += 1, R140 += 1, R141 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R191 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 67] { R193 += 1, R147 += 1, R148 += 1, R149 += 1 };
  s0 -> s0 [0, 65535] { R192 += 1, R193 += 1 };
  s0 -> s2 [0, 65535] { R193 += 1, R146 += 1, R147 += 1 };
  s0 -> s3 [68, 68] { R193 += 1, R147 += 1, R148 += 1, R149 += 1 };
  s0 -> s4 [68, 68] { R193 += 1, R147 += 1, R148 += 1, R149 += 1 };
  s0 -> s1 [69, 65535] { R193 += 1, R147 += 1, R148 += 1, R149 += 1 };
  s1 -> s1 [0, 67] { R193 += 1, R147 += 1, R148 += 1, R149 += 1 };
  s1 -> s1 [0, 65535] { R193 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [68, 68] { R193 += 1, R147 += 1, R148 += 1, R149 += 1 };
  s1 -> s4 [68, 68] { R193 += 1, R147 += 1, R148 += 1, R149 += 1 };
  s1 -> s1 [69, 65535] { R193 += 1, R147 += 1, R148 += 1, R149 += 1 };
  s2 -> s1 [0, 67] { R193 += 1, R147 += 1, R148 += 1, R149 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R193 += 1, R146 += 1, R147 += 1 };
  s2 -> s3 [68, 68] { R193 += 1, R147 += 1, R148 += 1, R149 += 1 };
  s2 -> s4 [68, 68] { R193 += 1, R147 += 1, R148 += 1, R149 += 1 };
  s2 -> s1 [69, 65535] { R193 += 1, R147 += 1, R148 += 1, R149 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R193 += 1 };
  s3 -> s3 [0, 65535] { R193 += 1, R147 += 1, R148 += 1, R149 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R193 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R193 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 67] { R195 += 1, R156 += 1, R157 += 1, R158 += 1 };
  s0 -> s0 [0, 65535] { R194 += 1, R195 += 1 };
  s0 -> s2 [0, 65535] { R195 += 1, R155 += 1, R156 += 1 };
  s0 -> s3 [68, 68] { R195 += 1, R156 += 1, R157 += 1, R158 += 1 };
  s0 -> s4 [68, 68] { R195 += 1, R156 += 1, R157 += 1, R158 += 1 };
  s0 -> s1 [69, 65535] { R195 += 1, R156 += 1, R157 += 1, R158 += 1 };
  s1 -> s1 [0, 67] { R195 += 1, R156 += 1, R157 += 1, R158 += 1 };
  s1 -> s1 [0, 65535] { R195 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [68, 68] { R195 += 1, R156 += 1, R157 += 1, R158 += 1 };
  s1 -> s4 [68, 68] { R195 += 1, R156 += 1, R157 += 1, R158 += 1 };
  s1 -> s1 [69, 65535] { R195 += 1, R156 += 1, R157 += 1, R158 += 1 };
  s2 -> s1 [0, 67] { R195 += 1, R156 += 1, R157 += 1, R158 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R195 += 1, R155 += 1, R156 += 1 };
  s2 -> s3 [68, 68] { R195 += 1, R156 += 1, R157 += 1, R158 += 1 };
  s2 -> s4 [68, 68] { R195 += 1, R156 += 1, R157 += 1, R158 += 1 };
  s2 -> s1 [69, 65535] { R195 += 1, R156 += 1, R157 += 1, R158 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R195 += 1, R156 += 1, R157 += 1, R158 += 1 };
  s3 -> s6 [0, 65535] { R195 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R195 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R195 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R197 += 1, R19 += 1 };
  s0 -> s0 [0, 65535] { R196 += 1, R197 += 1 };
  s1 -> s1 [0, 65535] { R197 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 64] { R199 += 1 };
  s0 -> s0 [0, 65535] { R198 += 1, R199 += 1 };
  s0 -> s2 [65, 65] { R199 += 1 };
  s0 -> s3 [65, 65] { R199 += 1 };
  s0 -> s1 [69, 65535] { R199 += 1 };
  s1 -> s1 [0, 64] { R199 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R199 += 1 };
  s1 -> s3 [65, 65] { R199 += 1 };
  s1 -> s1 [69, 65535] { R199 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65] { R199 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [69, 65535] { R199 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 64] { R201 += 1, R72 += 1 };
  s0 -> s0 [0, 65535] { R200 += 1, R201 += 1 };
  s0 -> s2 [65, 65] { R201 += 1, R72 += 1 };
  s0 -> s3 [65, 65] { R201 += 1, R72 += 1 };
  s0 -> s1 [66, 65535] { R201 += 1, R72 += 1 };
  s1 -> s1 [0, 64] { R201 += 1, R72 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R201 += 1, R72 += 1 };
  s1 -> s3 [65, 65] { R201 += 1, R72 += 1 };
  s1 -> s1 [66, 65535] { R201 += 1, R72 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R201 += 1, R72 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 64] { R203 += 1, R74 += 1 };
  s0 -> s0 [0, 65535] { R202 += 1, R203 += 1 };
  s0 -> s2 [65, 65] { R203 += 1, R74 += 1 };
  s0 -> s3 [65, 65] { R203 += 1, R74 += 1 };
  s0 -> s1 [66, 65535] { R203 += 1, R74 += 1 };
  s1 -> s1 [0, 64] { R203 += 1, R74 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R203 += 1, R74 += 1 };
  s1 -> s3 [65, 65] { R203 += 1, R74 += 1 };
  s1 -> s1 [66, 65535] { R203 += 1, R74 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R203 += 1, R74 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 64] { R205 += 1, R76 += 1, R77 += 1 };
  s0 -> s0 [0, 65535] { R204 += 1, R205 += 1 };
  s0 -> s2 [65, 65] { R205 += 1, R76 += 1, R77 += 1 };
  s0 -> s3 [65, 65] { R205 += 1, R76 += 1, R77 += 1 };
  s0 -> s1 [66, 65535] { R205 += 1, R76 += 1, R77 += 1 };
  s1 -> s1 [0, 64] { R205 += 1, R76 += 1, R77 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R205 += 1, R76 += 1, R77 += 1 };
  s1 -> s3 [65, 65] { R205 += 1, R76 += 1, R77 += 1 };
  s1 -> s1 [66, 65535] { R205 += 1, R76 += 1, R77 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R205 += 1, R76 += 1, R77 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 64] { R207 += 1, R80 += 1, R81 += 1 };
  s0 -> s0 [0, 65535] { R206 += 1, R207 += 1 };
  s0 -> s2 [65, 65] { R207 += 1, R80 += 1, R81 += 1 };
  s0 -> s3 [65, 65] { R207 += 1, R80 += 1, R81 += 1 };
  s0 -> s1 [66, 65535] { R207 += 1, R80 += 1, R81 += 1 };
  s1 -> s1 [0, 64] { R207 += 1, R80 += 1, R81 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R207 += 1, R80 += 1, R81 += 1 };
  s1 -> s3 [65, 65] { R207 += 1, R80 += 1, R81 += 1 };
  s1 -> s1 [66, 65535] { R207 += 1, R80 += 1, R81 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R207 += 1, R80 += 1, R81 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 64] { R209 += 1, R86 += 1, R87 += 1 };
  s0 -> s0 [0, 65535] { R208 += 1, R209 += 1 };
  s0 -> s2 [65, 65] { R209 += 1, R86 += 1, R87 += 1 };
  s0 -> s3 [65, 65] { R209 += 1, R86 += 1, R87 += 1 };
  s0 -> s1 [66, 65535] { R209 += 1, R86 += 1, R87 += 1 };
  s1 -> s1 [0, 64] { R209 += 1, R86 += 1, R87 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R209 += 1, R86 += 1, R87 += 1 };
  s1 -> s3 [65, 65] { R209 += 1, R86 += 1, R87 += 1 };
  s1 -> s1 [66, 65535] { R209 += 1, R86 += 1, R87 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R209 += 1, R86 += 1, R87 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 64] { R211 += 1, R90 += 1, R91 += 1 };
  s0 -> s0 [0, 65535] { R210 += 1, R211 += 1 };
  s0 -> s2 [65, 65] { R211 += 1, R90 += 1, R91 += 1 };
  s0 -> s3 [65, 65] { R211 += 1, R90 += 1, R91 += 1 };
  s0 -> s1 [66, 65535] { R211 += 1, R90 += 1, R91 += 1 };
  s1 -> s1 [0, 64] { R211 += 1, R90 += 1, R91 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R211 += 1, R90 += 1, R91 += 1 };
  s1 -> s3 [65, 65] { R211 += 1, R90 += 1, R91 += 1 };
  s1 -> s1 [66, 65535] { R211 += 1, R90 += 1, R91 += 1 };
  s2 -> s2 [0, 65535] { R211 += 1, R90 += 1, R91 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 64] { R213 += 1, R96 += 1, R97 += 1 };
  s0 -> s0 [0, 65535] { R212 += 1, R213 += 1 };
  s0 -> s2 [65, 65] { R213 += 1, R96 += 1, R97 += 1 };
  s0 -> s3 [65, 65] { R213 += 1, R96 += 1, R97 += 1 };
  s0 -> s1 [66, 65535] { R213 += 1, R96 += 1, R97 += 1 };
  s1 -> s1 [0, 64] { R213 += 1, R96 += 1, R97 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R213 += 1, R96 += 1, R97 += 1 };
  s1 -> s3 [65, 65] { R213 += 1, R96 += 1, R97 += 1 };
  s1 -> s1 [66, 65535] { R213 += 1, R96 += 1, R97 += 1 };
  s2 -> s2 [0, 65535] { R213 += 1, R96 += 1, R97 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 64] { R215 += 1, R102 += 1, R103 += 1 };
  s0 -> s0 [0, 65535] { R214 += 1, R215 += 1 };
  s0 -> s2 [65, 65] { R215 += 1, R102 += 1, R103 += 1 };
  s0 -> s3 [65, 65] { R215 += 1, R102 += 1, R103 += 1 };
  s0 -> s1 [66, 65535] { R215 += 1, R102 += 1, R103 += 1 };
  s1 -> s1 [0, 64] { R215 += 1, R102 += 1, R103 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R215 += 1, R102 += 1, R103 += 1 };
  s1 -> s3 [65, 65] { R215 += 1, R102 += 1, R103 += 1 };
  s1 -> s1 [66, 65535] { R215 += 1, R102 += 1, R103 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R215 += 1, R102 += 1, R103 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 64] { R217 += 1, R110 += 1, R111 += 1 };
  s0 -> s0 [0, 65535] { R216 += 1, R217 += 1 };
  s0 -> s2 [65, 65] { R217 += 1, R110 += 1, R111 += 1 };
  s0 -> s3 [65, 65] { R217 += 1, R110 += 1, R111 += 1 };
  s0 -> s1 [66, 65535] { R217 += 1, R110 += 1, R111 += 1 };
  s1 -> s1 [0, 64] { R217 += 1, R110 += 1, R111 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R217 += 1, R110 += 1, R111 += 1 };
  s1 -> s3 [65, 65] { R217 += 1, R110 += 1, R111 += 1 };
  s1 -> s1 [66, 65535] { R217 += 1, R110 += 1, R111 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R217 += 1, R110 += 1, R111 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 64] { R219 += 1, R120 += 1, R121 += 1 };
  s0 -> s0 [0, 65535] { R218 += 1, R219 += 1 };
  s0 -> s2 [65, 65] { R219 += 1, R120 += 1, R121 += 1 };
  s0 -> s3 [65, 65] { R219 += 1, R120 += 1, R121 += 1 };
  s0 -> s1 [66, 65535] { R219 += 1, R120 += 1, R121 += 1 };
  s1 -> s1 [0, 64] { R219 += 1, R120 += 1, R121 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R219 += 1, R120 += 1, R121 += 1 };
  s1 -> s3 [65, 65] { R219 += 1, R120 += 1, R121 += 1 };
  s1 -> s1 [66, 65535] { R219 += 1, R120 += 1, R121 += 1 };
  s2 -> s2 [0, 65535] { R219 += 1, R120 += 1, R121 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 64] { R221 += 1, R126 += 1, R127 += 1 };
  s0 -> s0 [0, 65535] { R220 += 1, R221 += 1 };
  s0 -> s2 [65, 65] { R221 += 1, R126 += 1, R127 += 1 };
  s0 -> s3 [65, 65] { R221 += 1, R126 += 1, R127 += 1 };
  s0 -> s1 [66, 65535] { R221 += 1, R126 += 1, R127 += 1 };
  s1 -> s1 [0, 64] { R221 += 1, R126 += 1, R127 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R221 += 1, R126 += 1, R127 += 1 };
  s1 -> s3 [65, 65] { R221 += 1, R126 += 1, R127 += 1 };
  s1 -> s1 [66, 65535] { R221 += 1, R126 += 1, R127 += 1 };
  s2 -> s2 [0, 65535] { R221 += 1, R126 += 1, R127 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_39 {
  init s0;
  s0 -> s1 [0, 64] { R223 += 1, R130 += 1, R131 += 1 };
  s0 -> s0 [0, 65535] { R222 += 1, R223 += 1 };
  s0 -> s2 [65, 65] { R223 += 1, R130 += 1, R131 += 1 };
  s0 -> s3 [65, 65] { R223 += 1, R130 += 1, R131 += 1 };
  s0 -> s1 [66, 65535] { R223 += 1, R130 += 1, R131 += 1 };
  s1 -> s1 [0, 64] { R223 += 1, R130 += 1, R131 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R223 += 1, R130 += 1, R131 += 1 };
  s1 -> s3 [65, 65] { R223 += 1, R130 += 1, R131 += 1 };
  s1 -> s1 [66, 65535] { R223 += 1, R130 += 1, R131 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R223 += 1, R130 += 1, R131 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_40 {
  init s0;
  s0 -> s1 [0, 64] { R225 += 1, R136 += 1, R137 += 1 };
  s0 -> s0 [0, 65535] { R224 += 1, R225 += 1 };
  s0 -> s2 [65, 65] { R225 += 1, R136 += 1, R137 += 1 };
  s0 -> s3 [65, 65] { R225 += 1, R136 += 1, R137 += 1 };
  s0 -> s1 [66, 65535] { R225 += 1, R136 += 1, R137 += 1 };
  s1 -> s1 [0, 64] { R225 += 1, R136 += 1, R137 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R225 += 1, R136 += 1, R137 += 1 };
  s1 -> s3 [65, 65] { R225 += 1, R136 += 1, R137 += 1 };
  s1 -> s1 [66, 65535] { R225 += 1, R136 += 1, R137 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R225 += 1, R136 += 1, R137 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_41 {
  init s0;
  s0 -> s1 [0, 64] { R227 += 1, R142 += 1, R143 += 1 };
  s0 -> s0 [0, 65535] { R226 += 1, R227 += 1 };
  s0 -> s2 [65, 65] { R227 += 1, R142 += 1, R143 += 1 };
  s0 -> s3 [65, 65] { R227 += 1, R142 += 1, R143 += 1 };
  s0 -> s1 [66, 65535] { R227 += 1, R142 += 1, R143 += 1 };
  s1 -> s1 [0, 64] { R227 += 1, R142 += 1, R143 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R227 += 1, R142 += 1, R143 += 1 };
  s1 -> s3 [65, 65] { R227 += 1, R142 += 1, R143 += 1 };
  s1 -> s1 [66, 65535] { R227 += 1, R142 += 1, R143 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R227 += 1, R142 += 1, R143 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_42 {
  init s0;
  s0 -> s1 [0, 64] { R229 += 1, R150 += 1, R151 += 1 };
  s0 -> s0 [0, 65535] { R228 += 1, R229 += 1 };
  s0 -> s2 [65, 65] { R229 += 1, R150 += 1, R151 += 1 };
  s0 -> s3 [65, 65] { R229 += 1, R150 += 1, R151 += 1 };
  s0 -> s1 [66, 65535] { R229 += 1, R150 += 1, R151 += 1 };
  s1 -> s1 [0, 64] { R229 += 1, R150 += 1, R151 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R229 += 1, R150 += 1, R151 += 1 };
  s1 -> s3 [65, 65] { R229 += 1, R150 += 1, R151 += 1 };
  s1 -> s1 [66, 65535] { R229 += 1, R150 += 1, R151 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R229 += 1, R150 += 1, R151 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
};
synchronised {  // Automata constraining P4
automaton P4_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining P12
automaton P12_0 {
  init s0;
  s0 -> s1 [100, 100];
  accepting s1;
};
};
constraint R2 = R195 && R20 - R195 = -1 && R21 = R195 && R22 - R195 = -1 && R23 = R195 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R73 + R72 + -1*R107 + -1*R103 = 0 && R88 + R86 = 0 && R89 + R87 + -1*R107 + -1*R103 = 0 && R95 + R92 + R135 + R132 + -1*R149 + -1*R145 - R105 - R109 = 0 && R106 + R102 = 0 && R108 + R104 + R148 + R144 = 0 && R160 = 0 && R161 = R195 && R162 = 0 && R163 = R195 && R164 = 0 && R165 = R195 && R166 = 0 && R167 = R195 && R168 = 0 && R169 = R195 && R170 = 0 && R171 = R195 && R172 = 0 && R173 = R195 && R174 = 0 && R175 = R195 && R176 = 0 && R177 = R195 && R178 = 0 && R179 = R195 && R180 = 0 && R181 = R195 && R182 = 0 && R183 = R195 && R184 = 0 && R185 = R195 && R186 = 0 && R187 = R195 && R188 = 0 && R189 = R195 && R190 = 0 && R191 = R195 && R192 = 0 && R193 = R195 && R194 = 0 && R11 < 1 && R12 < 1 && R75 + R74 < 1 && R101 + R98 + R141 + R138 < 1 && -1*R107 + -1*R103 < 1 && -1*R149 + -1*R145 - R105 - R109 < 1 && 0 < R195 && (R85 + R82 != 0 || ((R78 + R76 != 0 || R79 + R77 + -1*R107 + -1*R103 = 0 || R107 + R103 < 1) && (R78 + R76 = 0 || R107 + R103 < 1))) && (R85 + R82 != 0 || ((R83 + R80 != 0 || R84 + R81 + -1*R107 + -1*R103 = 0 || R107 + R103 < 1) && (R83 + R80 = 0 || R107 + R103 < 1))) && (R93 + R90 != 0 || R94 + R91 + -1*R107 + -1*R103 = 0 || (R85 + R82 = 0 && R107 + R103 = 0)) && (R99 + R96 != 0 || R100 + R97 + -1*R107 + -1*R103 = 0 || (R85 + R82 = 0 && R107 + R103 = 0)) && (R109 + R105 + R149 + R145 != 0 || R119 + R114 + R159 + R154 = 0 || (R117 + R112 + R157 + R152 = 0 && R118 + R113 + R158 + R153 = 0)) && (R115 + R110 != 0 || R107 + R103 + -1*R116 + -1*R111 = 0 || (R85 + R82 = 0 && R107 + R103 = 0)) && (R117 + R112 + R157 + R152 != 0 || R109 + R105 + R149 + R145 + -1*R158 + -1*R153 - R113 - R118 = 0 || R109 + R105 + R149 + R145 < 1) && (R19 = 0 || (R196 = 0 && R197 = 0 && R198 = 0 && R199 = 0 && R200 = 0 && R201 = 0 && R202 = 0 && R203 = 0 && R204 = 0 && R205 = 0 && R206 = 0 && R207 = 0 && R208 = 0 && R209 = 0 && R210 = 0 && R211 = 0 && R212 = 0 && R213 = 0 && R214 = 0 && R215 = 0 && R216 = 0 && R217 = 0 && R218 = 0 && R219 = 0 && R220 = 0 && R221 = 0 && R222 = 0 && R223 = 0 && R224 = 0 && R225 = 0 && R226 = 0 && R227 = 0 && R228 = 0 && R229 = 0)) && (R85 + R82 = 0 || (R78 + R76 = 0 && R79 + R77 + -1*R107 + -1*R103 = 0)) && (R85 + R82 = 0 || (R83 + R80 = 0 && R84 + R81 + -1*R107 + -1*R103 = 0)) && (R93 + R90 = 0 || (R85 + R82 = 0 && R107 + R103 = 0)) && (R99 + R96 = 0 || (R85 + R82 = 0 && R107 + R103 = 0)) && (R115 + R110 = 0 || (R85 + R82 = 0 && R107 + R103 = 0)) && (R117 + R112 + R157 + R152 = 0 || R109 + R105 + R149 + R145 < 1) && (R125 + R122 = 0 || (R123 + R120 = 0 && R124 + R121 = 0)) && (R125 + R122 = 0 || (R128 + R126 = 0 && R129 + R127 = 0)) && (R125 + R122 = 0 || (R133 + R130 = 0 && R134 + R131 = 0)) && (R125 + R122 = 0 || (R139 + R136 = 0 && R140 + R137 = 0)) && (R125 + R122 = 0 || (R146 + R142 = 0 && R147 + R143 = 0)) && (R125 + R122 = 0 || (R155 + R150 = 0 && R156 + R151 = 0));
// End of Parikh automata intersection problem
