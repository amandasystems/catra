// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R11522, R11523, R11524, R11525, R11526, R11527, R11528, R11529, R11530, R11531, R12, R14072, R14073, R14074, R14075, R14076, R14077, R14078, R14079, R14080, R14081, R14290, R14291, R14292, R14293, R14294, R14295, R14296, R14297, R14298, R14299, R14300, R14301, R14302, R14303, R14304, R14305, R14306, R14307, R14308, R14309, R14310, R14311, R14312, R14313, R14314, R14315, R14316, R14317, R14318, R14319, R14320, R14321, R14322, R14323, R14324, R14325, R14326, R14327, R14328, R14329, R14330, R14331, R14332, R14333, R14334, R14335, R14336, R14337, R14338, R14339, R14340, R14341, R14342, R14343, R14344, R14345, R14346, R14347, R14348, R14349, R14350, R14351, R14352, R14353, R14354, R14355, R14356, R14357, R14358, R14359, R14360, R14361, R14362, R14363, R14364, R14365, R14366, R14367, R14368, R14369, R14370, R14371, R14372, R14373, R14374, R14375, R14376, R14377, R14378, R14379, R14380, R14381, R14382, R14383, R14384, R14385, R14386, R14387, R14388, R14389, R14390, R14391, R14392, R14393, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [76, 76];
  s0 -> s0 [77, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [76, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 75];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [76, 76];
  s0 -> s1 [77, 65535];
  s1 -> s1 [0, 75];
  s1 -> s2 [76, 76];
  s1 -> s1 [77, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s1 [0, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s1 [0, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R14315 += 1, R19 += 1 };
  s0 -> s0 [0, 65535] { R14314 += 1, R14315 += 1 };
  s1 -> s1 [0, 65535] { R14315 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 75] { R14317 += 1 };
  s0 -> s0 [0, 65535] { R14316 += 1, R14317 += 1 };
  s0 -> s2 [76, 76] { R14317 += 1 };
  s0 -> s3 [76, 76] { R14317 += 1 };
  s0 -> s1 [88, 65535] { R14317 += 1 };
  s1 -> s1 [0, 75] { R14317 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [76, 76] { R14317 += 1 };
  s1 -> s3 [76, 76] { R14317 += 1 };
  s1 -> s1 [88, 65535] { R14317 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 76] { R14317 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [88, 65535] { R14317 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 75] { R14319 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R14318 += 1, R14319 += 1 };
  s0 -> s2 [76, 76] { R14319 += 1, R38 += 1 };
  s0 -> s3 [76, 76] { R14319 += 1, R38 += 1 };
  s0 -> s1 [77, 65535] { R14319 += 1, R38 += 1 };
  s1 -> s1 [0, 75] { R14319 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [76, 76] { R14319 += 1, R38 += 1 };
  s1 -> s3 [76, 76] { R14319 += 1, R38 += 1 };
  s1 -> s1 [77, 65535] { R14319 += 1, R38 += 1 };
  s2 -> s2 [0, 65535] { R14319 += 1, R38 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 75] { R14321 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R14320 += 1, R14321 += 1 };
  s0 -> s2 [76, 76] { R14321 += 1, R40 += 1 };
  s0 -> s3 [76, 76] { R14321 += 1, R40 += 1 };
  s0 -> s1 [77, 65535] { R14321 += 1, R40 += 1 };
  s1 -> s1 [0, 75] { R14321 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [76, 76] { R14321 += 1, R40 += 1 };
  s1 -> s3 [76, 76] { R14321 += 1, R40 += 1 };
  s1 -> s1 [77, 65535] { R14321 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R14321 += 1, R40 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 75] { R14323 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R14322 += 1, R14323 += 1 };
  s0 -> s2 [76, 76] { R14323 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [76, 76] { R14323 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [77, 65535] { R14323 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 75] { R14323 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [76, 76] { R14323 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [76, 76] { R14323 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [77, 65535] { R14323 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535] { R14323 += 1, R42 += 1, R43 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 75] { R14325 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R14324 += 1, R14325 += 1 };
  s0 -> s2 [76, 76] { R14325 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [76, 76] { R14325 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [77, 65535] { R14325 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 75] { R14325 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [76, 76] { R14325 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [76, 76] { R14325 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [77, 65535] { R14325 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R14325 += 1, R46 += 1, R47 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 75] { R14327 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R14326 += 1, R14327 += 1 };
  s0 -> s2 [76, 76] { R14327 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [76, 76] { R14327 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [77, 65535] { R14327 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 75] { R14327 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [76, 76] { R14327 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [76, 76] { R14327 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [77, 65535] { R14327 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535] { R14327 += 1, R52 += 1, R53 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 75] { R14329 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R14328 += 1, R14329 += 1 };
  s0 -> s2 [76, 76] { R14329 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [76, 76] { R14329 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [77, 65535] { R14329 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 75] { R14329 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [76, 76] { R14329 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [76, 76] { R14329 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [77, 65535] { R14329 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R14329 += 1, R56 += 1, R57 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 75] { R14331 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R14330 += 1, R14331 += 1 };
  s0 -> s2 [76, 76] { R14331 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [76, 76] { R14331 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [77, 65535] { R14331 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 75] { R14331 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [76, 76] { R14331 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [76, 76] { R14331 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [77, 65535] { R14331 += 1, R62 += 1, R63 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R14331 += 1, R62 += 1, R63 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 75] { R14351 += 1 };
  s0 -> s0 [0, 65535] { R14350 += 1, R14351 += 1 };
  s0 -> s2 [76, 76] { R14351 += 1 };
  s0 -> s1 [77, 65535] { R14351 += 1 };
  s1 -> s1 [0, 75] { R14351 += 1 };
  s1 -> s2 [76, 76] { R14351 += 1 };
  s1 -> s1 [77, 65535] { R14351 += 1 };
  s2 -> s2 [0, 65535] { R14351 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R14353 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R14352 += 1, R14353 += 1 };
  s1 -> s1 [0, 65535] { R14353 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 75] { R14355 += 1 };
  s0 -> s0 [0, 65535] { R14354 += 1, R14355 += 1 };
  s0 -> s2 [0, 65535] { R14355 += 1, R8 += 1 };
  s0 -> s3 [76, 76] { R14355 += 1 };
  s0 -> s1 [77, 65535] { R14355 += 1 };
  s1 -> s1 [0, 75] { R14355 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [76, 76] { R14355 += 1 };
  s1 -> s1 [77, 65535] { R14355 += 1 };
  s2 -> s1 [0, 75] { R14355 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R14355 += 1, R8 += 1 };
  s2 -> s3 [76, 76] { R14355 += 1 };
  s2 -> s1 [77, 65535] { R14355 += 1 };
  s3 -> s3 [0, 65535] { R14355 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 75] { R14357 += 1, R14295 += 1 };
  s0 -> s2 [0, 65535] { R14357 += 1, R14294 += 1, R14295 += 1 };
  s0 -> s0 [0, 65535] { R14356 += 1, R14357 += 1 };
  s0 -> s1 [77, 65535] { R14357 += 1, R14295 += 1 };
  s1 -> s1 [0, 75] { R14357 += 1, R14295 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R14357 += 1 };
  s1 -> s1 [77, 65535] { R14357 += 1, R14295 += 1 };
  s2 -> s1 [0, 75] { R14357 += 1, R14295 += 1 };
  s2 -> s2 [0, 65535] { R14357 += 1, R14294 += 1, R14295 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [77, 65535] { R14357 += 1, R14295 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R14359 += 1, R14297 += 1, R17 += 1 };
  s0 -> s0 [0, 65535] { R14358 += 1, R14359 += 1 };
  s0 -> s2 [0, 65535] { R14359 += 1, R14296 += 1, R14297 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R14359 += 1, R14297 += 1, R17 += 1 };
  s1 -> s4 [0, 65535] { R14359 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R14359 += 1, R14297 += 1, R17 += 1 };
  s2 -> s2 [0, 65535] { R14359 += 1, R14296 += 1, R14297 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R14359 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 76] { R14361 += 1, R14299 += 1 };
  s0 -> s2 [0, 65535] { R14361 += 1, R14298 += 1, R14299 += 1 };
  s0 -> s0 [0, 65535] { R14360 += 1, R14361 += 1 };
  s0 -> s1 [87, 65535] { R14361 += 1, R14299 += 1 };
  s1 -> s1 [0, 76] { R14361 += 1, R14299 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R14361 += 1 };
  s1 -> s1 [87, 65535] { R14361 += 1, R14299 += 1 };
  s2 -> s1 [0, 76] { R14361 += 1, R14299 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R14361 += 1, R14298 += 1, R14299 += 1 };
  s2 -> s1 [87, 65535] { R14361 += 1, R14299 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s0 [0, 65535] { R14362 += 1, R14363 += 1 };
  s0 -> s1 [0, 65535] { R14363 += 1, R14301 += 1, R67 += 1 };
  s0 -> s2 [0, 65535] { R14363 += 1, R14300 += 1, R14301 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R14363 += 1 };
  s1 -> s1 [0, 65535] { R14363 += 1, R14301 += 1, R67 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R14363 += 1, R14301 += 1, R67 += 1 };
  s2 -> s2 [0, 65535] { R14363 += 1, R14300 += 1, R14301 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R14363 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 86] { R14365 += 1, R14303 += 1 };
  s0 -> s2 [0, 65535] { R14365 += 1, R14302 += 1, R14303 += 1 };
  s0 -> s3 [0, 65535] { R14365 += 1, R14303 += 1, R69 += 1 };
  s0 -> s0 [0, 65535] { R14364 += 1, R14365 += 1 };
  s0 -> s1 [88, 65535] { R14365 += 1, R14303 += 1 };
  s1 -> s1 [0, 86] { R14365 += 1, R14303 += 1 };
  s1 -> s1 [0, 65535] { R14365 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [88, 65535] { R14365 += 1, R14303 += 1 };
  s2 -> s1 [0, 86] { R14365 += 1, R14303 += 1 };
  s2 -> s2 [0, 65535] { R14365 += 1, R14302 += 1, R14303 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R14365 += 1, R14303 += 1, R69 += 1 };
  s2 -> s1 [88, 65535] { R14365 += 1, R14303 += 1 };
  s3 -> s1 [0, 86] { R14365 += 1, R14303 += 1 };
  s3 -> s4 [0, 65535] { R14365 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R14365 += 1, R14303 += 1, R69 += 1 };
  s3 -> s1 [88, 65535] { R14365 += 1, R14303 += 1 };
  s4 -> s4 [0, 65535] { R14365 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 86] { R14367 += 1, R14305 += 1, R11525 += 1 };
  s0 -> s0 [0, 65535] { R14366 += 1, R14367 += 1 };
  s0 -> s1 [0, 65535] { R14367 += 1, R14305 += 1 };
  s0 -> s2 [0, 65535] { R14367 += 1, R14304 += 1, R14305 += 1 };
  s0 -> s1 [88, 65535] { R14367 += 1, R14305 += 1, R11525 += 1 };
  s1 -> s1 [0, 86] { R14367 += 1, R14305 += 1, R11525 += 1 };
  s1 -> s4 [0, 65535] { R14367 += 1 };
  s1 -> s1 [0, 65535] { R14367 += 1, R14305 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [88, 65535] { R14367 += 1, R14305 += 1, R11525 += 1 };
  s2 -> s1 [0, 86] { R14367 += 1, R14305 += 1, R11525 += 1 };
  s2 -> s1 [0, 65535] { R14367 += 1, R14305 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R14367 += 1, R14304 += 1, R14305 += 1 };
  s2 -> s1 [88, 65535] { R14367 += 1, R14305 += 1, R11525 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R14367 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R14369 += 1, R14307 += 1, R11529 += 1, R11530 += 1 };
  s0 -> s0 [0, 65535] { R14368 += 1, R14369 += 1 };
  s0 -> s2 [0, 65535] { R14369 += 1, R14306 += 1, R14307 += 1 };
  s0 -> s3 [0, 65535] { R14369 += 1, R14307 += 1, R11530 += 1, R11531 += 1 };
  s1 -> s4 [0, 65535] { R14369 += 1 };
  s1 -> s1 [0, 65535] { R14369 += 1, R14307 += 1, R11529 += 1, R11530 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R14369 += 1, R14307 += 1, R11530 += 1, R11531 += 1 };
  s2 -> s1 [0, 65535] { R14369 += 1, R14307 += 1, R11529 += 1, R11530 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R14369 += 1, R14306 += 1, R14307 += 1 };
  s2 -> s3 [0, 65535] { R14369 += 1, R14307 += 1, R11530 += 1, R11531 += 1 };
  s3 -> s4 [0, 65535] { R14369 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R14369 += 1, R14307 += 1, R11530 += 1, R11531 += 1 };
  s3 -> s6 [0, 65535] { R14369 += 1, R14307 += 1 };
  s4 -> s4 [0, 65535] { R14369 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R14369 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R14369 += 1, R14307 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 87] { R14371 += 1, R14309 += 1, R14075 += 1 };
  s0 -> s2 [0, 65535] { R14371 += 1, R14309 += 1, R14074 += 1, R14075 += 1 };
  s0 -> s0 [0, 65535] { R14370 += 1, R14371 += 1 };
  s0 -> s3 [0, 65535] { R14371 += 1, R14308 += 1, R14309 += 1 };
  s0 -> s4 [90, 90] { R14371 += 1, R14309 += 1, R14075 += 1 };
  s0 -> s1 [91, 65535] { R14371 += 1, R14309 += 1, R14075 += 1 };
  s1 -> s1 [0, 87] { R14371 += 1, R14309 += 1, R14075 += 1 };
  s1 -> s4 [90, 90] { R14371 += 1, R14309 += 1, R14075 += 1 };
  s1 -> s1 [91, 65535] { R14371 += 1, R14309 += 1, R14075 += 1 };
  s2 -> s1 [0, 87] { R14371 += 1, R14309 += 1, R14075 += 1 };
  s2 -> s2 [0, 65535] { R14371 += 1, R14309 += 1, R14074 += 1, R14075 += 1 };
  s2 -> s4 [90, 90] { R14371 += 1, R14309 += 1, R14075 += 1 };
  s2 -> s1 [91, 65535] { R14371 += 1, R14309 += 1, R14075 += 1 };
  s3 -> s1 [0, 87] { R14371 += 1, R14309 += 1, R14075 += 1 };
  s3 -> s2 [0, 65535] { R14371 += 1, R14309 += 1, R14074 += 1, R14075 += 1 };
  s3 -> s3 [0, 65535] { R14371 += 1, R14308 += 1, R14309 += 1 };
  s3 -> s4 [90, 90] { R14371 += 1, R14309 += 1, R14075 += 1 };
  s3 -> s1 [91, 65535] { R14371 += 1, R14309 += 1, R14075 += 1 };
  s4 -> s4 [0, 87] { R14371 += 1, R14309 += 1, R14075 += 1 };
  s4 -> s4 [0, 65535] { R14371 += 1, R14309 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R14371 += 1 };
  s4 -> s4 [90, 65535] { R14371 += 1, R14309 += 1, R14075 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R14371 += 1 };
  accepting s4, s5, s6;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R14373 += 1, R14310 += 1, R14311 += 1 };
  s0 -> s0 [0, 65535] { R14372 += 1, R14373 += 1 };
  s0 -> s2 [0, 65535] { R14373 += 1, R14311 += 1, R14080 += 1, R14081 += 1 };
  s0 -> s3 [0, 65535] { R14373 += 1, R14311 += 1, R14079 += 1, R14080 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R14373 += 1, R14310 += 1, R14311 += 1 };
  s1 -> s2 [0, 65535] { R14373 += 1, R14311 += 1, R14080 += 1, R14081 += 1 };
  s1 -> s3 [0, 65535] { R14373 += 1, R14311 += 1, R14079 += 1, R14080 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R14373 += 1 };
  s2 -> s6 [0, 65535] { R14373 += 1, R14311 += 1 };
  s2 -> s2 [0, 65535] { R14373 += 1, R14311 += 1, R14080 += 1, R14081 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R14373 += 1 };
  s3 -> s2 [0, 65535] { R14373 += 1, R14311 += 1, R14080 += 1, R14081 += 1 };
  s3 -> s3 [0, 65535] { R14373 += 1, R14311 += 1, R14079 += 1, R14080 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R14373 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R14373 += 1 };
  s6 -> s6 [0, 65535] { R14373 += 1, R14311 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 65535] { R14375 += 1, R14313 += 1 };
  s0 -> s2 [0, 65535] { R14375 += 1, R14312 += 1, R14313 += 1 };
  s0 -> s0 [0, 65535] { R14374 += 1, R14375 += 1 };
  s1 -> s1 [0, 65535] { R14375 += 1, R14313 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R14375 += 1 };
  s2 -> s1 [0, 65535] { R14375 += 1, R14313 += 1 };
  s2 -> s2 [0, 65535] { R14375 += 1, R14312 += 1, R14313 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R14375 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R14377 += 1, R14333 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R14376 += 1, R14377 += 1 };
  s0 -> s2 [0, 65535] { R14377 += 1, R14332 += 1, R14333 += 1 };
  s1 -> s1 [0, 65535] { R14377 += 1, R14333 += 1, R18 += 1 };
  s1 -> s4 [0, 65535] { R14377 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R14377 += 1, R14333 += 1, R18 += 1 };
  s2 -> s2 [0, 65535] { R14377 += 1, R14332 += 1, R14333 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R14377 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 75] { R14379 += 1, R14335 += 1 };
  s0 -> s0 [0, 65535] { R14378 += 1, R14379 += 1 };
  s0 -> s2 [0, 65535] { R14379 += 1, R14334 += 1, R14335 += 1 };
  s0 -> s3 [76, 76] { R14379 += 1, R14335 += 1 };
  s0 -> s4 [76, 76] { R14379 += 1, R14335 += 1 };
  s0 -> s5 [87, 87] { R14379 += 1, R14335 += 1 };
  s0 -> s1 [88, 65535] { R14379 += 1, R14335 += 1 };
  s1 -> s1 [0, 75] { R14379 += 1, R14335 += 1 };
  s1 -> s3 [76, 76] { R14379 += 1, R14335 += 1 };
  s1 -> s4 [76, 76] { R14379 += 1, R14335 += 1 };
  s1 -> s5 [87, 87] { R14379 += 1, R14335 += 1 };
  s1 -> s1 [88, 65535] { R14379 += 1, R14335 += 1 };
  s2 -> s1 [0, 75] { R14379 += 1, R14335 += 1 };
  s2 -> s2 [0, 65535] { R14379 += 1, R14334 += 1, R14335 += 1 };
  s2 -> s3 [76, 76] { R14379 += 1, R14335 += 1 };
  s2 -> s4 [76, 76] { R14379 += 1, R14335 += 1 };
  s2 -> s5 [87, 87] { R14379 += 1, R14335 += 1 };
  s2 -> s1 [88, 65535] { R14379 += 1, R14335 += 1 };
  s3 -> s3 [0, 76] { R14379 += 1, R14335 += 1 };
  s3 -> s7 [87, 87] { R14379 += 1, R14335 += 1 };
  s3 -> s3 [88, 65535] { R14379 += 1, R14335 += 1 };
  s5 -> s5 [0, 75] { R14379 += 1, R14335 += 1 };
  s5 -> s5 [0, 65535] { R14379 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [76, 76] { R14379 += 1, R14335 += 1 };
  s5 -> s8 [76, 76] { R14379 += 1, R14335 += 1 };
  s5 -> s5 [87, 65535] { R14379 += 1, R14335 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 76] { R14379 += 1, R14335 += 1 };
  s7 -> s7 [0, 65535] { R14379 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [87, 65535] { R14379 += 1, R14335 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R14379 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 75] { R14381 += 1, R14337 += 1, R66 += 1 };
  s0 -> s2 [0, 65535] { R14381 += 1, R14336 += 1, R14337 += 1 };
  s0 -> s0 [0, 65535] { R14380 += 1, R14381 += 1 };
  s0 -> s3 [76, 76] { R14381 += 1, R14337 += 1, R66 += 1 };
  s0 -> s4 [76, 76] { R14381 += 1, R14337 += 1, R66 += 1 };
  s0 -> s1 [77, 65535] { R14381 += 1, R14337 += 1, R66 += 1 };
  s1 -> s1 [0, 75] { R14381 += 1, R14337 += 1, R66 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R14381 += 1 };
  s1 -> s3 [76, 76] { R14381 += 1, R14337 += 1, R66 += 1 };
  s1 -> s4 [76, 76] { R14381 += 1, R14337 += 1, R66 += 1 };
  s1 -> s1 [77, 65535] { R14381 += 1, R14337 += 1, R66 += 1 };
  s2 -> s1 [0, 75] { R14381 += 1, R14337 += 1, R66 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R14381 += 1, R14336 += 1, R14337 += 1 };
  s2 -> s3 [76, 76] { R14381 += 1, R14337 += 1, R66 += 1 };
  s2 -> s4 [76, 76] { R14381 += 1, R14337 += 1, R66 += 1 };
  s2 -> s1 [77, 65535] { R14381 += 1, R14337 += 1, R66 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R14381 += 1, R14337 += 1, R66 += 1 };
  s3 -> s6 [0, 65535] { R14381 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R14381 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R14381 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 75] { R14383 += 1, R14339 += 1, R68 += 1 };
  s0 -> s0 [0, 65535] { R14382 += 1, R14383 += 1 };
  s0 -> s2 [0, 65535] { R14383 += 1, R14338 += 1, R14339 += 1 };
  s0 -> s3 [76, 76] { R14383 += 1, R14339 += 1, R68 += 1 };
  s0 -> s4 [76, 76] { R14383 += 1, R14339 += 1, R68 += 1 };
  s0 -> s1 [77, 65535] { R14383 += 1, R14339 += 1, R68 += 1 };
  s1 -> s1 [0, 75] { R14383 += 1, R14339 += 1, R68 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R14383 += 1 };
  s1 -> s3 [76, 76] { R14383 += 1, R14339 += 1, R68 += 1 };
  s1 -> s4 [76, 76] { R14383 += 1, R14339 += 1, R68 += 1 };
  s1 -> s1 [77, 65535] { R14383 += 1, R14339 += 1, R68 += 1 };
  s2 -> s1 [0, 75] { R14383 += 1, R14339 += 1, R68 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R14383 += 1, R14338 += 1, R14339 += 1 };
  s2 -> s3 [76, 76] { R14383 += 1, R14339 += 1, R68 += 1 };
  s2 -> s4 [76, 76] { R14383 += 1, R14339 += 1, R68 += 1 };
  s2 -> s1 [77, 65535] { R14383 += 1, R14339 += 1, R68 += 1 };
  s3 -> s3 [0, 65535] { R14383 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R14383 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R14383 += 1, R14339 += 1, R68 += 1 };
  s5 -> s5 [0, 65535] { R14383 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 75] { R14385 += 1, R14341 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s2 [0, 75] { R14385 += 1, R14341 += 1, R11523 += 1 };
  s0 -> s0 [0, 65535] { R14384 += 1, R14385 += 1 };
  s0 -> s3 [0, 65535] { R14385 += 1, R14340 += 1, R14341 += 1 };
  s0 -> s4 [76, 76] { R14385 += 1, R14341 += 1, R11523 += 1 };
  s0 -> s5 [76, 76] { R14385 += 1, R14341 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s6 [76, 76] { R14385 += 1, R14341 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s7 [76, 76] { R14385 += 1, R14341 += 1, R11523 += 1 };
  s0 -> s2 [77, 86] { R14385 += 1, R14341 += 1, R11523 += 1 };
  s0 -> s1 [77, 65535] { R14385 += 1, R14341 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s2 [88, 65535] { R14385 += 1, R14341 += 1, R11523 += 1 };
  s1 -> s1 [0, 75] { R14385 += 1, R14341 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s2 [0, 75] { R14385 += 1, R14341 += 1, R11523 += 1 };
  s1 -> s4 [76, 76] { R14385 += 1, R14341 += 1, R11523 += 1 };
  s1 -> s5 [76, 76] { R14385 += 1, R14341 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s6 [76, 76] { R14385 += 1, R14341 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s7 [76, 76] { R14385 += 1, R14341 += 1, R11523 += 1 };
  s1 -> s2 [77, 86] { R14385 += 1, R14341 += 1, R11523 += 1 };
  s1 -> s1 [77, 65535] { R14385 += 1, R14341 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s2 [88, 65535] { R14385 += 1, R14341 += 1, R11523 += 1 };
  s2 -> s2 [0, 75] { R14385 += 1, R14341 += 1, R11523 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R14385 += 1 };
  s2 -> s4 [76, 76] { R14385 += 1, R14341 += 1 };
  s2 -> s7 [76, 76] { R14385 += 1, R14341 += 1 };
  s2 -> s2 [77, 86] { R14385 += 1, R14341 += 1, R11523 += 1 };
  s2 -> s2 [77, 65535] { R14385 += 1, R14341 += 1 };
  s2 -> s2 [88, 65535] { R14385 += 1, R14341 += 1, R11523 += 1 };
  s3 -> s1 [0, 75] { R14385 += 1, R14341 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s2 [0, 75] { R14385 += 1, R14341 += 1, R11523 += 1 };
  s3 -> s3 [0, 65535] { R14385 += 1, R14340 += 1, R14341 += 1 };
  s3 -> s4 [76, 76] { R14385 += 1, R14341 += 1, R11523 += 1 };
  s3 -> s5 [76, 76] { R14385 += 1, R14341 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s6 [76, 76] { R14385 += 1, R14341 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s7 [76, 76] { R14385 += 1, R14341 += 1, R11523 += 1 };
  s3 -> s2 [77, 86] { R14385 += 1, R14341 += 1, R11523 += 1 };
  s3 -> s1 [77, 65535] { R14385 += 1, R14341 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s2 [88, 65535] { R14385 += 1, R14341 += 1, R11523 += 1 };
  s4 -> s4 [0, 86] { R14385 += 1, R14341 += 1, R11523 += 1 };
  s4 -> s4 [0, 65535] { R14385 += 1, R14341 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s9 [0, 65535] { R14385 += 1 };
  s4 -> s4 [88, 65535] { R14385 += 1, R14341 += 1, R11523 += 1 };
  s5 -> s4 [0, 86] { R14385 += 1, R14341 += 1, R11523 += 1 };
  s5 -> s5 [0, 65535] { R14385 += 1, R14341 += 1, R11522 += 1, R11523 += 1 };
  s5 -> s4 [88, 65535] { R14385 += 1, R14341 += 1, R11523 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R14385 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R14385 += 1 };
  accepting s4, s8, s2, s9, s7;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 75] { R14387 += 1, R14343 += 1, R11526 += 1, R11527 += 1 };
  s0 -> s2 [0, 65535] { R14387 += 1, R14342 += 1, R14343 += 1 };
  s0 -> s0 [0, 65535] { R14386 += 1, R14387 += 1 };
  s0 -> s3 [76, 76] { R14387 += 1, R14343 += 1, R11526 += 1, R11527 += 1 };
  s0 -> s4 [76, 76] { R14387 += 1, R14343 += 1, R11526 += 1, R11527 += 1 };
  s0 -> s1 [77, 65535] { R14387 += 1, R14343 += 1, R11526 += 1, R11527 += 1 };
  s1 -> s1 [0, 75] { R14387 += 1, R14343 += 1, R11526 += 1, R11527 += 1 };
  s1 -> s1 [0, 65535] { R14387 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [76, 76] { R14387 += 1, R14343 += 1, R11526 += 1, R11527 += 1 };
  s1 -> s4 [76, 76] { R14387 += 1, R14343 += 1, R11526 += 1, R11527 += 1 };
  s1 -> s1 [77, 65535] { R14387 += 1, R14343 += 1, R11526 += 1, R11527 += 1 };
  s2 -> s1 [0, 75] { R14387 += 1, R14343 += 1, R11526 += 1, R11527 += 1 };
  s2 -> s2 [0, 65535] { R14387 += 1, R14342 += 1, R14343 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [76, 76] { R14387 += 1, R14343 += 1, R11526 += 1, R11527 += 1 };
  s2 -> s4 [76, 76] { R14387 += 1, R14343 += 1, R11526 += 1, R11527 += 1 };
  s2 -> s1 [77, 65535] { R14387 += 1, R14343 += 1, R11526 += 1, R11527 += 1 };
  s3 -> s3 [0, 65535] { R14387 += 1, R14343 += 1, R11526 += 1, R11527 += 1 };
  s3 -> s6 [0, 65535] { R14387 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R14387 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R14387 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 75] { R14389 += 1, R14345 += 1, R14072 += 1, R14073 += 1 };
  s0 -> s0 [0, 65535] { R14388 += 1, R14389 += 1 };
  s0 -> s2 [0, 65535] { R14389 += 1, R14344 += 1, R14345 += 1 };
  s0 -> s3 [76, 76] { R14389 += 1, R14345 += 1, R14072 += 1, R14073 += 1 };
  s0 -> s4 [76, 76] { R14389 += 1, R14345 += 1, R14072 += 1, R14073 += 1 };
  s0 -> s1 [77, 65535] { R14389 += 1, R14345 += 1, R14072 += 1, R14073 += 1 };
  s1 -> s1 [0, 75] { R14389 += 1, R14345 += 1, R14072 += 1, R14073 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R14389 += 1 };
  s1 -> s3 [76, 76] { R14389 += 1, R14345 += 1, R14072 += 1, R14073 += 1 };
  s1 -> s4 [76, 76] { R14389 += 1, R14345 += 1, R14072 += 1, R14073 += 1 };
  s1 -> s1 [77, 65535] { R14389 += 1, R14345 += 1, R14072 += 1, R14073 += 1 };
  s2 -> s1 [0, 75] { R14389 += 1, R14345 += 1, R14072 += 1, R14073 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R14389 += 1, R14344 += 1, R14345 += 1 };
  s2 -> s3 [76, 76] { R14389 += 1, R14345 += 1, R14072 += 1, R14073 += 1 };
  s2 -> s4 [76, 76] { R14389 += 1, R14345 += 1, R14072 += 1, R14073 += 1 };
  s2 -> s1 [77, 65535] { R14389 += 1, R14345 += 1, R14072 += 1, R14073 += 1 };
  s3 -> s3 [0, 65535] { R14389 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R14389 += 1 };
  s4 -> s4 [0, 65535] { R14389 += 1, R14345 += 1, R14072 += 1, R14073 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R14389 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 75] { R14391 += 1, R14347 += 1, R14076 += 1, R14077 += 1 };
  s0 -> s0 [0, 65535] { R14390 += 1, R14391 += 1 };
  s0 -> s2 [0, 65535] { R14391 += 1, R14346 += 1, R14347 += 1 };
  s0 -> s3 [76, 76] { R14391 += 1, R14347 += 1, R14076 += 1, R14077 += 1 };
  s0 -> s4 [76, 76] { R14391 += 1, R14347 += 1, R14076 += 1, R14077 += 1 };
  s0 -> s1 [77, 65535] { R14391 += 1, R14347 += 1, R14076 += 1, R14077 += 1 };
  s1 -> s1 [0, 75] { R14391 += 1, R14347 += 1, R14076 += 1, R14077 += 1 };
  s1 -> s1 [0, 65535] { R14391 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [76, 76] { R14391 += 1, R14347 += 1, R14076 += 1, R14077 += 1 };
  s1 -> s4 [76, 76] { R14391 += 1, R14347 += 1, R14076 += 1, R14077 += 1 };
  s1 -> s1 [77, 65535] { R14391 += 1, R14347 += 1, R14076 += 1, R14077 += 1 };
  s2 -> s1 [0, 75] { R14391 += 1, R14347 += 1, R14076 += 1, R14077 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R14391 += 1, R14346 += 1, R14347 += 1 };
  s2 -> s3 [76, 76] { R14391 += 1, R14347 += 1, R14076 += 1, R14077 += 1 };
  s2 -> s4 [76, 76] { R14391 += 1, R14347 += 1, R14076 += 1, R14077 += 1 };
  s2 -> s1 [77, 65535] { R14391 += 1, R14347 += 1, R14076 += 1, R14077 += 1 };
  s3 -> s3 [0, 65535] { R14391 += 1, R14347 += 1, R14076 += 1, R14077 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R14391 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R14391 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R14391 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 75] { R14393 += 1, R14349 += 1, R14290 += 1, R14291 += 1 };
  s0 -> s2 [0, 75] { R14393 += 1, R14349 += 1, R14291 += 1 };
  s0 -> s3 [0, 65535] { R14393 += 1, R14348 += 1, R14349 += 1 };
  s0 -> s0 [0, 65535] { R14392 += 1, R14393 += 1 };
  s0 -> s4 [76, 76] { R14393 += 1, R14349 += 1, R14291 += 1 };
  s0 -> s5 [76, 76] { R14393 += 1, R14349 += 1, R14291 += 1 };
  s0 -> s6 [76, 76] { R14393 += 1, R14349 += 1, R14290 += 1, R14291 += 1 };
  s0 -> s7 [76, 76] { R14393 += 1, R14349 += 1, R14290 += 1, R14291 += 1 };
  s0 -> s2 [77, 86] { R14393 += 1, R14349 += 1, R14291 += 1 };
  s0 -> s1 [77, 65535] { R14393 += 1, R14349 += 1, R14290 += 1, R14291 += 1 };
  s0 -> s8 [87, 87] { R14393 += 1, R14349 += 1, R14291 += 1 };
  s0 -> s2 [91, 65535] { R14393 += 1, R14349 += 1, R14291 += 1 };
  s1 -> s1 [0, 75] { R14393 += 1, R14349 += 1, R14290 += 1, R14291 += 1 };
  s1 -> s2 [0, 75] { R14393 += 1, R14349 += 1, R14291 += 1 };
  s1 -> s4 [76, 76] { R14393 += 1, R14349 += 1, R14291 += 1 };
  s1 -> s5 [76, 76] { R14393 += 1, R14349 += 1, R14291 += 1 };
  s1 -> s6 [76, 76] { R14393 += 1, R14349 += 1, R14290 += 1, R14291 += 1 };
  s1 -> s7 [76, 76] { R14393 += 1, R14349 += 1, R14290 += 1, R14291 += 1 };
  s1 -> s2 [77, 86] { R14393 += 1, R14349 += 1, R14291 += 1 };
  s1 -> s1 [77, 65535] { R14393 += 1, R14349 += 1, R14290 += 1, R14291 += 1 };
  s1 -> s8 [87, 87] { R14393 += 1, R14349 += 1, R14291 += 1 };
  s1 -> s2 [91, 65535] { R14393 += 1, R14349 += 1, R14291 += 1 };
  s2 -> s2 [0, 75] { R14393 += 1, R14349 += 1, R14291 += 1 };
  s2 -> s4 [76, 76] { R14393 += 1, R14349 += 1 };
  s2 -> s5 [76, 76] { R14393 += 1, R14349 += 1 };
  s2 -> s2 [77, 86] { R14393 += 1, R14349 += 1, R14291 += 1 };
  s2 -> s2 [77, 65535] { R14393 += 1, R14349 += 1 };
  s2 -> s8 [87, 87] { R14393 += 1, R14349 += 1, R14291 += 1 };
  s2 -> s2 [91, 65535] { R14393 += 1, R14349 += 1, R14291 += 1 };
  s3 -> s1 [0, 75] { R14393 += 1, R14349 += 1, R14290 += 1, R14291 += 1 };
  s3 -> s2 [0, 75] { R14393 += 1, R14349 += 1, R14291 += 1 };
  s3 -> s3 [0, 65535] { R14393 += 1, R14348 += 1, R14349 += 1 };
  s3 -> s4 [76, 76] { R14393 += 1, R14349 += 1, R14291 += 1 };
  s3 -> s5 [76, 76] { R14393 += 1, R14349 += 1, R14291 += 1 };
  s3 -> s6 [76, 76] { R14393 += 1, R14349 += 1, R14290 += 1, R14291 += 1 };
  s3 -> s7 [76, 76] { R14393 += 1, R14349 += 1, R14290 += 1, R14291 += 1 };
  s3 -> s2 [77, 86] { R14393 += 1, R14349 += 1, R14291 += 1 };
  s3 -> s1 [77, 65535] { R14393 += 1, R14349 += 1, R14290 += 1, R14291 += 1 };
  s3 -> s8 [87, 87] { R14393 += 1, R14349 += 1, R14291 += 1 };
  s3 -> s2 [91, 65535] { R14393 += 1, R14349 += 1, R14291 += 1 };
  s5 -> s5 [0, 86] { R14393 += 1, R14349 += 1, R14291 += 1 };
  s5 -> s5 [0, 65535] { R14393 += 1, R14349 += 1 };
  s5 -> s11 [87, 87] { R14393 += 1, R14349 += 1, R14291 += 1 };
  s5 -> s5 [91, 65535] { R14393 += 1, R14349 += 1, R14291 += 1 };
  s6 -> s5 [0, 86] { R14393 += 1, R14349 += 1, R14291 += 1 };
  s6 -> s6 [0, 65535] { R14393 += 1, R14349 += 1, R14290 += 1, R14291 += 1 };
  s6 -> s11 [87, 87] { R14393 += 1, R14349 += 1, R14291 += 1 };
  s6 -> s5 [91, 65535] { R14393 += 1, R14349 += 1, R14291 += 1 };
  s8 -> s8 [0, 75] { R14393 += 1, R14349 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R14393 += 1 };
  s8 -> s10 [76, 76] { R14393 += 1, R14349 += 1 };
  s8 -> s11 [76, 76] { R14393 += 1, R14349 += 1 };
  s8 -> s8 [77, 65535] { R14393 += 1, R14349 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R14393 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R14393 += 1, R14349 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s12 [0, 65535] { R14393 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R14393 += 1 };
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining P63
automaton P63_0 {
  init s0;
  s0 -> s1 [119, 119];
  accepting s1;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [108, 108];
  accepting s1;
};
};
constraint R1 = R14309 && R2 = R14393 && R20 - R14393 = -1 && R21 = R14393 && R22 - R14393 = -1 && R23 = R14393 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R14075 + -1*R14073 - R53 = 0 && R52 + R14074 + R14072 = 0 && R14308 = 0 && R14334 = 0 && R14335 = 0 && R14340 = 0 && R14341 = 0 && R14348 = 0 && R14349 = 0 && R14350 = 0 && R14351 = R14393 && R14352 = 0 && R14353 = R14393 && R14354 = 0 && R14355 = R14393 && R14356 = 0 && R14357 = R14393 && R14358 = 0 && R14359 = R14393 && R14360 = 0 && R14361 = R14393 && R14362 = 0 && R14363 = R14393 && R14364 = 0 && R14365 = R14393 && R14366 = 0 && R14367 = R14393 && R14368 = 0 && R14369 = R14393 && R14370 = 0 && R14371 = R14393 && R14372 = 0 && R14373 = R14393 && R14374 = 0 && R14375 = R14393 && R14376 = 0 && R14377 = R14393 && R14378 = 0 && R14379 = R14393 && R14380 = 0 && R14381 = R14393 && R14382 = 0 && R14383 = R14393 && R14384 = 0 && R14385 = R14393 && R14386 = 0 && R14387 = R14393 && R14388 = 0 && R14389 = R14393 && R14390 = 0 && R14391 = R14393 && R14392 = 0 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R14075 + -1*R14073 - R53 < 1 && -1 < R14309 && 0 < R14393 && (R48 + R11531 + R11528 != 0 || ((R42 + R11524 + R11522 != 0 || R43 + R11525 + R11523 + -1*R14075 + -1*R14073 - R53 = 0 || R53 + R14075 + R14073 < 1) && (R42 + R11524 + R11522 = 0 || R53 + R14075 + R14073 < 1))) && (R48 + R11531 + R11528 != 0 || ((R46 + R11529 + R11526 != 0 || R47 + R11530 + R11527 + -1*R14075 + -1*R14073 - R53 = 0 || R53 + R14075 + R14073 < 1) && (R46 + R11529 + R11526 = 0 || R53 + R14075 + R14073 < 1))) && (R14294 != 0 || R14295 = R14309 || (R17 = 0 && R14309 = 0)) && (R14296 != 0 || R14297 = R14309 || (R17 = 0 && R14309 = 0)) && (R14298 != 0 || R14299 = R14309 || (R17 = 0 && R14309 = 0)) && (R14300 != 0 || R14301 = R14309 || (R17 = 0 && R14309 = 0)) && (R14302 != 0 || R14303 = R14309 || (R17 = 0 && R14309 = 0)) && (R14304 != 0 || R14305 = R14309 || (R17 = 0 && R14309 = 0)) && (R14306 != 0 || R14307 = R14309 || (R17 = 0 && R14309 = 0)) && (R14310 != 0 || R14309 = R14311 || (R17 = 0 && R14309 = 0)) && (R14312 != 0 || R14309 = R14313 || (R17 = 0 && R14309 = 0)) && (R18 = 0 || (R14332 = 0 && R14333 = 0)) && (R18 = 0 || (R14336 = 0 && R14337 = 0)) && (R18 = 0 || (R14338 = 0 && R14339 = 0)) && (R18 = 0 || (R14342 = 0 && R14343 = 0)) && (R18 = 0 || (R14344 = 0 && R14345 = 0)) && (R18 = 0 || (R14346 = 0 && R14347 = 0)) && (R19 = 0 || (R14314 = 0 && R14315 = 0)) && (R19 = 0 || (R14316 = 0 && R14317 = 0)) && (R19 = 0 || (R14318 = 0 && R14319 = 0)) && (R19 = 0 || (R14320 = 0 && R14321 = 0)) && (R19 = 0 || (R14322 = 0 && R14323 = 0)) && (R19 = 0 || (R14324 = 0 && R14325 = 0)) && (R19 = 0 || (R14326 = 0 && R14327 = 0)) && (R19 = 0 || (R14328 = 0 && R14329 = 0)) && (R19 = 0 || (R14330 = 0 && R14331 = 0)) && (R48 + R11531 + R11528 = 0 || (R42 + R11524 + R11522 = 0 && R43 + R11525 + R11523 + -1*R14075 + -1*R14073 - R53 = 0)) && (R48 + R11531 + R11528 = 0 || (R46 + R11529 + R11526 = 0 && R47 + R11530 + R11527 + -1*R14075 + -1*R14073 - R53 = 0)) && (R58 + R14081 + R14078 = 0 || (R56 + R14079 + R14076 = 0 && R57 + R14080 + R14077 = 0)) && (R58 + R14081 + R14078 = 0 || (R62 + R14292 + R14290 = 0 && R63 + R14293 + R14291 = 0)) && (R14294 = 0 || (R17 = 0 && R14309 = 0)) && (R14296 = 0 || (R17 = 0 && R14309 = 0)) && (R14298 = 0 || (R17 = 0 && R14309 = 0)) && (R14300 = 0 || (R17 = 0 && R14309 = 0)) && (R14302 = 0 || (R17 = 0 && R14309 = 0)) && (R14304 = 0 || (R17 = 0 && R14309 = 0)) && (R14306 = 0 || (R17 = 0 && R14309 = 0)) && (R14310 = 0 || (R17 = 0 && R14309 = 0)) && (R14312 = 0 || (R17 = 0 && R14309 = 0));
// End of Parikh automata intersection problem
