// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R11522, R11523, R11524, R11525, R12, R17, R18, R19, R19158, R19159, R19160, R19161, R19162, R19163, R19164, R19165, R19166, R19167, R19168, R19169, R19170, R19171, R19172, R19173, R19382, R19383, R19384, R19385, R19386, R19387, R19388, R19389, R19390, R19391, R19392, R19393, R19394, R19395, R19396, R19397, R19398, R19399, R19400, R19401, R19402, R19403, R19404, R19405, R19406, R19407, R19408, R19409, R19410, R19411, R19412, R19413, R19414, R19415, R19416, R19417, R19418, R19419, R19420, R19421, R19422, R19423, R19424, R19425, R19426, R19427, R19428, R19429, R19430, R19431, R19432, R19433, R19434, R19435, R19436, R19437, R19438, R19439, R19440, R19441, R19442, R19443, R19444, R19445, R19446, R19447, R19448, R19449, R19450, R19451, R19452, R19453, R19454, R19455, R19456, R19457, R19458, R19459, R19460, R19461, R19462, R19463, R19464, R19465, R19466, R19467, R19468, R19469, R19470, R19471, R19472, R19473, R19474, R19475, R19476, R19477, R19478, R19479, R19480, R19481, R19482, R19483, R19484, R19485, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [76, 76];
  s0 -> s0 [77, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [76, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 75];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [76, 76];
  s0 -> s1 [77, 65535];
  s1 -> s1 [0, 75];
  s1 -> s2 [76, 76];
  s1 -> s1 [77, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s1 [0, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s1 [0, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R19406 += 1, R19407 += 1 };
  s0 -> s1 [0, 65535] { R19407 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R19407 += 1, R19 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 75] { R19409 += 1 };
  s0 -> s0 [0, 65535] { R19408 += 1, R19409 += 1 };
  s0 -> s2 [76, 76] { R19409 += 1 };
  s0 -> s3 [76, 76] { R19409 += 1 };
  s0 -> s1 [88, 65535] { R19409 += 1 };
  s1 -> s1 [0, 75] { R19409 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [76, 76] { R19409 += 1 };
  s1 -> s3 [76, 76] { R19409 += 1 };
  s1 -> s1 [88, 65535] { R19409 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 76] { R19409 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [88, 65535] { R19409 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 75] { R19411 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R19410 += 1, R19411 += 1 };
  s0 -> s2 [76, 76] { R19411 += 1, R38 += 1 };
  s0 -> s3 [76, 76] { R19411 += 1, R38 += 1 };
  s0 -> s1 [77, 65535] { R19411 += 1, R38 += 1 };
  s1 -> s1 [0, 75] { R19411 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [76, 76] { R19411 += 1, R38 += 1 };
  s1 -> s3 [76, 76] { R19411 += 1, R38 += 1 };
  s1 -> s1 [77, 65535] { R19411 += 1, R38 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R19411 += 1, R38 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 75] { R19413 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R19412 += 1, R19413 += 1 };
  s0 -> s2 [76, 76] { R19413 += 1, R40 += 1 };
  s0 -> s3 [76, 76] { R19413 += 1, R40 += 1 };
  s0 -> s1 [77, 65535] { R19413 += 1, R40 += 1 };
  s1 -> s1 [0, 75] { R19413 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [76, 76] { R19413 += 1, R40 += 1 };
  s1 -> s3 [76, 76] { R19413 += 1, R40 += 1 };
  s1 -> s1 [77, 65535] { R19413 += 1, R40 += 1 };
  s2 -> s2 [0, 65535] { R19413 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 75] { R19415 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R19414 += 1, R19415 += 1 };
  s0 -> s2 [76, 76] { R19415 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [76, 76] { R19415 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [77, 65535] { R19415 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 75] { R19415 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [76, 76] { R19415 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [76, 76] { R19415 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [77, 65535] { R19415 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R19415 += 1, R42 += 1, R43 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 75] { R19417 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R19416 += 1, R19417 += 1 };
  s0 -> s2 [76, 76] { R19417 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [76, 76] { R19417 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [77, 65535] { R19417 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 75] { R19417 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [76, 76] { R19417 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [76, 76] { R19417 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [77, 65535] { R19417 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R19417 += 1, R46 += 1, R47 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 75] { R19419 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R19418 += 1, R19419 += 1 };
  s0 -> s2 [76, 76] { R19419 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [76, 76] { R19419 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [77, 65535] { R19419 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 75] { R19419 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [76, 76] { R19419 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [76, 76] { R19419 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [77, 65535] { R19419 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535] { R19419 += 1, R52 += 1, R53 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 75] { R19421 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R19420 += 1, R19421 += 1 };
  s0 -> s2 [76, 76] { R19421 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [76, 76] { R19421 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [77, 65535] { R19421 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 75] { R19421 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [76, 76] { R19421 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [76, 76] { R19421 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [77, 65535] { R19421 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R19421 += 1, R56 += 1, R57 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 75] { R19423 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R19422 += 1, R19423 += 1 };
  s0 -> s2 [76, 76] { R19423 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [76, 76] { R19423 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [77, 65535] { R19423 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 75] { R19423 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [76, 76] { R19423 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [76, 76] { R19423 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [77, 65535] { R19423 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535] { R19423 += 1, R62 += 1, R63 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 75] { R19443 += 1 };
  s0 -> s0 [0, 65535] { R19442 += 1, R19443 += 1 };
  s0 -> s2 [76, 76] { R19443 += 1 };
  s0 -> s1 [77, 65535] { R19443 += 1 };
  s1 -> s1 [0, 75] { R19443 += 1 };
  s1 -> s2 [76, 76] { R19443 += 1 };
  s1 -> s1 [77, 65535] { R19443 += 1 };
  s2 -> s2 [0, 65535] { R19443 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R19445 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R19444 += 1, R19445 += 1 };
  s1 -> s1 [0, 65535] { R19445 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 75] { R19447 += 1 };
  s0 -> s0 [0, 65535] { R19446 += 1, R19447 += 1 };
  s0 -> s2 [0, 65535] { R19447 += 1, R8 += 1 };
  s0 -> s3 [76, 76] { R19447 += 1 };
  s0 -> s1 [77, 65535] { R19447 += 1 };
  s1 -> s1 [0, 75] { R19447 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [76, 76] { R19447 += 1 };
  s1 -> s1 [77, 65535] { R19447 += 1 };
  s2 -> s1 [0, 75] { R19447 += 1 };
  s2 -> s2 [0, 65535] { R19447 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [76, 76] { R19447 += 1 };
  s2 -> s1 [77, 65535] { R19447 += 1 };
  s3 -> s3 [0, 65535] { R19447 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 75] { R19449 += 1, R19387 += 1 };
  s0 -> s2 [0, 65535] { R19449 += 1, R19386 += 1, R19387 += 1 };
  s0 -> s0 [0, 65535] { R19448 += 1, R19449 += 1 };
  s0 -> s1 [77, 65535] { R19449 += 1, R19387 += 1 };
  s1 -> s1 [0, 75] { R19449 += 1, R19387 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R19449 += 1 };
  s1 -> s1 [77, 65535] { R19449 += 1, R19387 += 1 };
  s2 -> s1 [0, 75] { R19449 += 1, R19387 += 1 };
  s2 -> s2 [0, 65535] { R19449 += 1, R19386 += 1, R19387 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [77, 65535] { R19449 += 1, R19387 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R19451 += 1, R19388 += 1, R19389 += 1 };
  s0 -> s0 [0, 65535] { R19450 += 1, R19451 += 1 };
  s0 -> s2 [0, 65535] { R19451 += 1, R19389 += 1, R17 += 1 };
  s1 -> s1 [0, 65535] { R19451 += 1, R19388 += 1, R19389 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R19451 += 1, R19389 += 1, R17 += 1 };
  s2 -> s3 [0, 65535] { R19451 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R19451 += 1, R19389 += 1, R17 += 1 };
  s3 -> s3 [0, 65535] { R19451 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 76] { R19453 += 1, R19391 += 1 };
  s0 -> s2 [0, 65535] { R19453 += 1, R19390 += 1, R19391 += 1 };
  s0 -> s0 [0, 65535] { R19452 += 1, R19453 += 1 };
  s0 -> s1 [87, 65535] { R19453 += 1, R19391 += 1 };
  s1 -> s1 [0, 76] { R19453 += 1, R19391 += 1 };
  s1 -> s1 [0, 65535] { R19453 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [87, 65535] { R19453 += 1, R19391 += 1 };
  s2 -> s1 [0, 76] { R19453 += 1, R19391 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R19453 += 1, R19390 += 1, R19391 += 1 };
  s2 -> s1 [87, 65535] { R19453 += 1, R19391 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R19455 += 1, R19392 += 1, R19393 += 1 };
  s0 -> s2 [0, 65535] { R19455 += 1, R19393 += 1, R67 += 1 };
  s0 -> s0 [0, 65535] { R19454 += 1, R19455 += 1 };
  s1 -> s1 [0, 65535] { R19455 += 1, R19392 += 1, R19393 += 1 };
  s1 -> s2 [0, 65535] { R19455 += 1, R19393 += 1, R67 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R19455 += 1, R19393 += 1, R67 += 1 };
  s2 -> s3 [0, 65535] { R19455 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R19455 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 86] { R19457 += 1, R19395 += 1 };
  s0 -> s2 [0, 65535] { R19457 += 1, R19394 += 1, R19395 += 1 };
  s0 -> s3 [0, 65535] { R19457 += 1, R19395 += 1, R69 += 1 };
  s0 -> s0 [0, 65535] { R19456 += 1, R19457 += 1 };
  s0 -> s1 [88, 65535] { R19457 += 1, R19395 += 1 };
  s1 -> s1 [0, 86] { R19457 += 1, R19395 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R19457 += 1 };
  s1 -> s1 [88, 65535] { R19457 += 1, R19395 += 1 };
  s2 -> s1 [0, 86] { R19457 += 1, R19395 += 1 };
  s2 -> s2 [0, 65535] { R19457 += 1, R19394 += 1, R19395 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R19457 += 1, R19395 += 1, R69 += 1 };
  s2 -> s1 [88, 65535] { R19457 += 1, R19395 += 1 };
  s3 -> s1 [0, 86] { R19457 += 1, R19395 += 1 };
  s3 -> s4 [0, 65535] { R19457 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R19457 += 1, R19395 += 1, R69 += 1 };
  s3 -> s1 [88, 65535] { R19457 += 1, R19395 += 1 };
  s4 -> s4 [0, 65535] { R19457 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 86] { R19459 += 1, R19397 += 1, R11525 += 1 };
  s0 -> s0 [0, 65535] { R19458 += 1, R19459 += 1 };
  s0 -> s2 [0, 65535] { R19459 += 1, R19396 += 1, R19397 += 1 };
  s0 -> s1 [0, 65535] { R19459 += 1, R19397 += 1 };
  s0 -> s1 [88, 65535] { R19459 += 1, R19397 += 1, R11525 += 1 };
  s1 -> s1 [0, 86] { R19459 += 1, R19397 += 1, R11525 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R19459 += 1 };
  s1 -> s1 [0, 65535] { R19459 += 1, R19397 += 1 };
  s1 -> s1 [88, 65535] { R19459 += 1, R19397 += 1, R11525 += 1 };
  s2 -> s1 [0, 86] { R19459 += 1, R19397 += 1, R11525 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R19459 += 1, R19396 += 1, R19397 += 1 };
  s2 -> s1 [0, 65535] { R19459 += 1, R19397 += 1 };
  s2 -> s1 [88, 65535] { R19459 += 1, R19397 += 1, R11525 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R19459 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R19461 += 1, R19399 += 1 };
  s0 -> s2 [0, 65535] { R19461 += 1, R19398 += 1, R19399 += 1 };
  s0 -> s0 [0, 65535] { R19460 += 1, R19461 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R19461 += 1, R19399 += 1 };
  s1 -> s4 [0, 65535] { R19461 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R19461 += 1, R19399 += 1 };
  s2 -> s2 [0, 65535] { R19461 += 1, R19398 += 1, R19399 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R19461 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 87] { R19463 += 1, R19401 += 1, R19167 += 1 };
  s0 -> s0 [0, 65535] { R19462 += 1, R19463 += 1 };
  s0 -> s1 [0, 65535] { R19463 += 1, R19401 += 1 };
  s0 -> s2 [0, 65535] { R19463 += 1, R19400 += 1, R19401 += 1 };
  s0 -> s1 [90, 65535] { R19463 += 1, R19401 += 1, R19167 += 1 };
  s1 -> s1 [0, 87] { R19463 += 1, R19401 += 1, R19167 += 1 };
  s1 -> s4 [0, 65535] { R19463 += 1 };
  s1 -> s1 [0, 65535] { R19463 += 1, R19401 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [90, 65535] { R19463 += 1, R19401 += 1, R19167 += 1 };
  s2 -> s1 [0, 87] { R19463 += 1, R19401 += 1, R19167 += 1 };
  s2 -> s1 [0, 65535] { R19463 += 1, R19401 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R19463 += 1, R19400 += 1, R19401 += 1 };
  s2 -> s1 [90, 65535] { R19463 += 1, R19401 += 1, R19167 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R19463 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R19465 += 1, R19403 += 1, R19172 += 1, R19173 += 1 };
  s0 -> s0 [0, 65535] { R19464 += 1, R19465 += 1 };
  s0 -> s2 [0, 65535] { R19465 += 1, R19403 += 1, R19171 += 1, R19172 += 1 };
  s0 -> s3 [0, 65535] { R19465 += 1, R19402 += 1, R19403 += 1 };
  s1 -> s1 [0, 65535] { R19465 += 1, R19403 += 1, R19172 += 1, R19173 += 1 };
  s1 -> s5 [0, 65535] { R19465 += 1 };
  s1 -> s6 [0, 65535] { R19465 += 1, R19403 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R19465 += 1, R19403 += 1, R19172 += 1, R19173 += 1 };
  s2 -> s5 [0, 65535] { R19465 += 1 };
  s2 -> s2 [0, 65535] { R19465 += 1, R19403 += 1, R19171 += 1, R19172 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R19465 += 1, R19403 += 1, R19172 += 1, R19173 += 1 };
  s3 -> s2 [0, 65535] { R19465 += 1, R19403 += 1, R19171 += 1, R19172 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R19465 += 1, R19402 += 1, R19403 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R19465 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R19465 += 1 };
  s6 -> s6 [0, 65535] { R19465 += 1, R19403 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 65535] { R19467 += 1, R19405 += 1 };
  s0 -> s0 [0, 65535] { R19466 += 1, R19467 += 1 };
  s0 -> s2 [0, 65535] { R19467 += 1, R19404 += 1, R19405 += 1 };
  s1 -> s4 [0, 65535] { R19467 += 1 };
  s1 -> s1 [0, 65535] { R19467 += 1, R19405 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R19467 += 1, R19405 += 1 };
  s2 -> s2 [0, 65535] { R19467 += 1, R19404 += 1, R19405 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R19467 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R19469 += 1, R19425 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R19468 += 1, R19469 += 1 };
  s0 -> s2 [0, 65535] { R19469 += 1, R19424 += 1, R19425 += 1 };
  s1 -> s1 [0, 65535] { R19469 += 1, R19425 += 1, R18 += 1 };
  s1 -> s4 [0, 65535] { R19469 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R19469 += 1, R19425 += 1, R18 += 1 };
  s2 -> s2 [0, 65535] { R19469 += 1, R19424 += 1, R19425 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R19469 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 75] { R19471 += 1, R19427 += 1 };
  s0 -> s0 [0, 65535] { R19470 += 1, R19471 += 1 };
  s0 -> s2 [0, 65535] { R19471 += 1, R19426 += 1, R19427 += 1 };
  s0 -> s3 [76, 76] { R19471 += 1, R19427 += 1 };
  s0 -> s4 [76, 76] { R19471 += 1, R19427 += 1 };
  s0 -> s5 [87, 87] { R19471 += 1, R19427 += 1 };
  s0 -> s1 [88, 65535] { R19471 += 1, R19427 += 1 };
  s1 -> s1 [0, 75] { R19471 += 1, R19427 += 1 };
  s1 -> s3 [76, 76] { R19471 += 1, R19427 += 1 };
  s1 -> s4 [76, 76] { R19471 += 1, R19427 += 1 };
  s1 -> s5 [87, 87] { R19471 += 1, R19427 += 1 };
  s1 -> s1 [88, 65535] { R19471 += 1, R19427 += 1 };
  s2 -> s1 [0, 75] { R19471 += 1, R19427 += 1 };
  s2 -> s2 [0, 65535] { R19471 += 1, R19426 += 1, R19427 += 1 };
  s2 -> s3 [76, 76] { R19471 += 1, R19427 += 1 };
  s2 -> s4 [76, 76] { R19471 += 1, R19427 += 1 };
  s2 -> s5 [87, 87] { R19471 += 1, R19427 += 1 };
  s2 -> s1 [88, 65535] { R19471 += 1, R19427 += 1 };
  s4 -> s4 [0, 76] { R19471 += 1, R19427 += 1 };
  s4 -> s8 [87, 87] { R19471 += 1, R19427 += 1 };
  s4 -> s4 [88, 65535] { R19471 += 1, R19427 += 1 };
  s5 -> s5 [0, 75] { R19471 += 1, R19427 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R19471 += 1 };
  s5 -> s7 [76, 76] { R19471 += 1, R19427 += 1 };
  s5 -> s8 [76, 76] { R19471 += 1, R19427 += 1 };
  s5 -> s5 [87, 65535] { R19471 += 1, R19427 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R19471 += 1 };
  s8 -> s8 [0, 76] { R19471 += 1, R19427 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R19471 += 1 };
  s8 -> s8 [87, 65535] { R19471 += 1, R19427 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 75] { R19473 += 1, R19429 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R19472 += 1, R19473 += 1 };
  s0 -> s2 [0, 65535] { R19473 += 1, R19428 += 1, R19429 += 1 };
  s0 -> s3 [76, 76] { R19473 += 1, R19429 += 1, R66 += 1 };
  s0 -> s4 [76, 76] { R19473 += 1, R19429 += 1, R66 += 1 };
  s0 -> s1 [77, 65535] { R19473 += 1, R19429 += 1, R66 += 1 };
  s1 -> s1 [0, 75] { R19473 += 1, R19429 += 1, R66 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R19473 += 1 };
  s1 -> s3 [76, 76] { R19473 += 1, R19429 += 1, R66 += 1 };
  s1 -> s4 [76, 76] { R19473 += 1, R19429 += 1, R66 += 1 };
  s1 -> s1 [77, 65535] { R19473 += 1, R19429 += 1, R66 += 1 };
  s2 -> s1 [0, 75] { R19473 += 1, R19429 += 1, R66 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R19473 += 1, R19428 += 1, R19429 += 1 };
  s2 -> s3 [76, 76] { R19473 += 1, R19429 += 1, R66 += 1 };
  s2 -> s4 [76, 76] { R19473 += 1, R19429 += 1, R66 += 1 };
  s2 -> s1 [77, 65535] { R19473 += 1, R19429 += 1, R66 += 1 };
  s3 -> s3 [0, 65535] { R19473 += 1, R19429 += 1, R66 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R19473 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R19473 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R19473 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 75] { R19475 += 1, R19431 += 1, R68 += 1 };
  s0 -> s2 [0, 65535] { R19475 += 1, R19430 += 1, R19431 += 1 };
  s0 -> s0 [0, 65535] { R19474 += 1, R19475 += 1 };
  s0 -> s3 [76, 76] { R19475 += 1, R19431 += 1, R68 += 1 };
  s0 -> s4 [76, 76] { R19475 += 1, R19431 += 1, R68 += 1 };
  s0 -> s1 [77, 65535] { R19475 += 1, R19431 += 1, R68 += 1 };
  s1 -> s1 [0, 75] { R19475 += 1, R19431 += 1, R68 += 1 };
  s1 -> s1 [0, 65535] { R19475 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [76, 76] { R19475 += 1, R19431 += 1, R68 += 1 };
  s1 -> s4 [76, 76] { R19475 += 1, R19431 += 1, R68 += 1 };
  s1 -> s1 [77, 65535] { R19475 += 1, R19431 += 1, R68 += 1 };
  s2 -> s1 [0, 75] { R19475 += 1, R19431 += 1, R68 += 1 };
  s2 -> s2 [0, 65535] { R19475 += 1, R19430 += 1, R19431 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [76, 76] { R19475 += 1, R19431 += 1, R68 += 1 };
  s2 -> s4 [76, 76] { R19475 += 1, R19431 += 1, R68 += 1 };
  s2 -> s1 [77, 65535] { R19475 += 1, R19431 += 1, R68 += 1 };
  s3 -> s3 [0, 65535] { R19475 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R19475 += 1 };
  s4 -> s4 [0, 65535] { R19475 += 1, R19431 += 1, R68 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R19475 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 75] { R19477 += 1, R19433 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s2 [0, 75] { R19477 += 1, R19433 += 1, R11523 += 1 };
  s0 -> s3 [0, 65535] { R19477 += 1, R19432 += 1, R19433 += 1 };
  s0 -> s0 [0, 65535] { R19476 += 1, R19477 += 1 };
  s0 -> s4 [76, 76] { R19477 += 1, R19433 += 1, R11523 += 1 };
  s0 -> s5 [76, 76] { R19477 += 1, R19433 += 1, R11523 += 1 };
  s0 -> s6 [76, 76] { R19477 += 1, R19433 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s7 [76, 76] { R19477 += 1, R19433 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s2 [77, 86] { R19477 += 1, R19433 += 1, R11523 += 1 };
  s0 -> s1 [77, 65535] { R19477 += 1, R19433 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s2 [88, 65535] { R19477 += 1, R19433 += 1, R11523 += 1 };
  s1 -> s1 [0, 75] { R19477 += 1, R19433 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s2 [0, 75] { R19477 += 1, R19433 += 1, R11523 += 1 };
  s1 -> s4 [76, 76] { R19477 += 1, R19433 += 1, R11523 += 1 };
  s1 -> s5 [76, 76] { R19477 += 1, R19433 += 1, R11523 += 1 };
  s1 -> s6 [76, 76] { R19477 += 1, R19433 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s7 [76, 76] { R19477 += 1, R19433 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s2 [77, 86] { R19477 += 1, R19433 += 1, R11523 += 1 };
  s1 -> s1 [77, 65535] { R19477 += 1, R19433 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s2 [88, 65535] { R19477 += 1, R19433 += 1, R11523 += 1 };
  s2 -> s2 [0, 75] { R19477 += 1, R19433 += 1, R11523 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R19477 += 1 };
  s2 -> s4 [76, 76] { R19477 += 1, R19433 += 1 };
  s2 -> s5 [76, 76] { R19477 += 1, R19433 += 1 };
  s2 -> s2 [77, 86] { R19477 += 1, R19433 += 1, R11523 += 1 };
  s2 -> s2 [77, 65535] { R19477 += 1, R19433 += 1 };
  s2 -> s2 [88, 65535] { R19477 += 1, R19433 += 1, R11523 += 1 };
  s3 -> s1 [0, 75] { R19477 += 1, R19433 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s2 [0, 75] { R19477 += 1, R19433 += 1, R11523 += 1 };
  s3 -> s3 [0, 65535] { R19477 += 1, R19432 += 1, R19433 += 1 };
  s3 -> s4 [76, 76] { R19477 += 1, R19433 += 1, R11523 += 1 };
  s3 -> s5 [76, 76] { R19477 += 1, R19433 += 1, R11523 += 1 };
  s3 -> s6 [76, 76] { R19477 += 1, R19433 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s7 [76, 76] { R19477 += 1, R19433 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s2 [77, 86] { R19477 += 1, R19433 += 1, R11523 += 1 };
  s3 -> s1 [77, 65535] { R19477 += 1, R19433 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s2 [88, 65535] { R19477 += 1, R19433 += 1, R11523 += 1 };
  s4 -> s4 [0, 86] { R19477 += 1, R19433 += 1, R11523 += 1 };
  s4 -> s9 [0, 65535] { R19477 += 1 };
  s4 -> s4 [0, 65535] { R19477 += 1, R19433 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s4 [88, 65535] { R19477 += 1, R19433 += 1, R11523 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s5 [0, 65535] { R19477 += 1 };
  s6 -> s4 [0, 86] { R19477 += 1, R19433 += 1, R11523 += 1 };
  s6 -> s6 [0, 65535] { R19477 += 1, R19433 += 1, R11522 += 1, R11523 += 1 };
  s6 -> s4 [88, 65535] { R19477 += 1, R19433 += 1, R11523 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R19477 += 1 };
  s9 -> s8 [0, 65535];
  accepting s4, s8, s5, s2, s9;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 75] { R19479 += 1, R19435 += 1, R19158 += 1, R19159 += 1 };
  s0 -> s2 [0, 75] { R19479 += 1, R19435 += 1, R19159 += 1, R19160 += 1 };
  s0 -> s0 [0, 65535] { R19478 += 1, R19479 += 1 };
  s0 -> s3 [0, 65535] { R19479 += 1, R19434 += 1, R19435 += 1 };
  s0 -> s4 [76, 76] { R19479 += 1, R19435 += 1, R19159 += 1, R19160 += 1 };
  s0 -> s5 [76, 76] { R19479 += 1, R19435 += 1, R19158 += 1, R19159 += 1 };
  s0 -> s6 [76, 76] { R19479 += 1, R19435 += 1, R19159 += 1, R19160 += 1 };
  s0 -> s7 [76, 76] { R19479 += 1, R19435 += 1, R19158 += 1, R19159 += 1 };
  s0 -> s1 [77, 65535] { R19479 += 1, R19435 += 1, R19158 += 1, R19159 += 1 };
  s0 -> s2 [77, 65535] { R19479 += 1, R19435 += 1, R19159 += 1, R19160 += 1 };
  s1 -> s1 [0, 75] { R19479 += 1, R19435 += 1, R19158 += 1, R19159 += 1 };
  s1 -> s2 [0, 75] { R19479 += 1, R19435 += 1, R19159 += 1, R19160 += 1 };
  s1 -> s4 [76, 76] { R19479 += 1, R19435 += 1, R19159 += 1, R19160 += 1 };
  s1 -> s5 [76, 76] { R19479 += 1, R19435 += 1, R19158 += 1, R19159 += 1 };
  s1 -> s6 [76, 76] { R19479 += 1, R19435 += 1, R19159 += 1, R19160 += 1 };
  s1 -> s7 [76, 76] { R19479 += 1, R19435 += 1, R19158 += 1, R19159 += 1 };
  s1 -> s1 [77, 65535] { R19479 += 1, R19435 += 1, R19158 += 1, R19159 += 1 };
  s1 -> s2 [77, 65535] { R19479 += 1, R19435 += 1, R19159 += 1, R19160 += 1 };
  s2 -> s11 [0, 75] { R19479 += 1, R19435 += 1 };
  s2 -> s2 [0, 75] { R19479 += 1, R19435 += 1, R19159 += 1, R19160 += 1 };
  s2 -> s8 [76, 76] { R19479 += 1, R19435 += 1 };
  s2 -> s4 [76, 76] { R19479 += 1, R19435 += 1, R19159 += 1, R19160 += 1 };
  s2 -> s6 [76, 76] { R19479 += 1, R19435 += 1, R19159 += 1, R19160 += 1 };
  s2 -> s12 [76, 76] { R19479 += 1, R19435 += 1 };
  s2 -> s11 [77, 65535] { R19479 += 1, R19435 += 1 };
  s2 -> s2 [77, 65535] { R19479 += 1, R19435 += 1, R19159 += 1, R19160 += 1 };
  s3 -> s1 [0, 75] { R19479 += 1, R19435 += 1, R19158 += 1, R19159 += 1 };
  s3 -> s2 [0, 75] { R19479 += 1, R19435 += 1, R19159 += 1, R19160 += 1 };
  s3 -> s3 [0, 65535] { R19479 += 1, R19434 += 1, R19435 += 1 };
  s3 -> s4 [76, 76] { R19479 += 1, R19435 += 1, R19159 += 1, R19160 += 1 };
  s3 -> s5 [76, 76] { R19479 += 1, R19435 += 1, R19158 += 1, R19159 += 1 };
  s3 -> s6 [76, 76] { R19479 += 1, R19435 += 1, R19159 += 1, R19160 += 1 };
  s3 -> s7 [76, 76] { R19479 += 1, R19435 += 1, R19158 += 1, R19159 += 1 };
  s3 -> s1 [77, 65535] { R19479 += 1, R19435 += 1, R19158 += 1, R19159 += 1 };
  s3 -> s2 [77, 65535] { R19479 += 1, R19435 += 1, R19159 += 1, R19160 += 1 };
  s5 -> s5 [0, 65535] { R19479 += 1, R19435 += 1, R19158 += 1, R19159 += 1 };
  s5 -> s6 [0, 65535] { R19479 += 1, R19435 += 1, R19159 += 1, R19160 += 1 };
  s6 -> s8 [0, 65535] { R19479 += 1, R19435 += 1 };
  s6 -> s6 [0, 65535] { R19479 += 1, R19435 += 1, R19159 += 1, R19160 += 1 };
  s8 -> s8 [0, 65535] { R19479 += 1, R19435 += 1 };
  s8 -> s9 [0, 65535] { R19479 += 1 };
  s8 -> s10 [0, 65535];
  s9 -> s9 [0, 65535] { R19479 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s11 [0, 75] { R19479 += 1, R19435 += 1 };
  s11 -> s11 [0, 65535] { R19479 += 1 };
  s11 -> s10 [0, 65535];
  s11 -> s8 [76, 76] { R19479 += 1, R19435 += 1 };
  s11 -> s12 [76, 76] { R19479 += 1, R19435 += 1 };
  s11 -> s11 [77, 65535] { R19479 += 1, R19435 += 1 };
  s12 -> s10 [0, 65535];
  s12 -> s12 [0, 65535] { R19479 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 75] { R19481 += 1, R19437 += 1, R19164 += 1, R19165 += 1 };
  s0 -> s2 [0, 75] { R19481 += 1, R19437 += 1, R19165 += 1 };
  s0 -> s3 [0, 65535] { R19481 += 1, R19436 += 1, R19437 += 1 };
  s0 -> s0 [0, 65535] { R19480 += 1, R19481 += 1 };
  s0 -> s4 [76, 76] { R19481 += 1, R19437 += 1, R19164 += 1, R19165 += 1 };
  s0 -> s5 [76, 76] { R19481 += 1, R19437 += 1, R19164 += 1, R19165 += 1 };
  s0 -> s6 [76, 76] { R19481 += 1, R19437 += 1, R19165 += 1 };
  s0 -> s7 [76, 76] { R19481 += 1, R19437 += 1, R19165 += 1 };
  s0 -> s2 [77, 87] { R19481 += 1, R19437 += 1, R19165 += 1 };
  s0 -> s1 [77, 65535] { R19481 += 1, R19437 += 1, R19164 += 1, R19165 += 1 };
  s0 -> s8 [90, 90] { R19481 += 1, R19437 += 1, R19165 += 1 };
  s0 -> s2 [91, 65535] { R19481 += 1, R19437 += 1, R19165 += 1 };
  s1 -> s1 [0, 75] { R19481 += 1, R19437 += 1, R19164 += 1, R19165 += 1 };
  s1 -> s2 [0, 75] { R19481 += 1, R19437 += 1, R19165 += 1 };
  s1 -> s4 [76, 76] { R19481 += 1, R19437 += 1, R19164 += 1, R19165 += 1 };
  s1 -> s5 [76, 76] { R19481 += 1, R19437 += 1, R19164 += 1, R19165 += 1 };
  s1 -> s6 [76, 76] { R19481 += 1, R19437 += 1, R19165 += 1 };
  s1 -> s7 [76, 76] { R19481 += 1, R19437 += 1, R19165 += 1 };
  s1 -> s2 [77, 87] { R19481 += 1, R19437 += 1, R19165 += 1 };
  s1 -> s1 [77, 65535] { R19481 += 1, R19437 += 1, R19164 += 1, R19165 += 1 };
  s1 -> s8 [90, 90] { R19481 += 1, R19437 += 1, R19165 += 1 };
  s1 -> s2 [91, 65535] { R19481 += 1, R19437 += 1, R19165 += 1 };
  s2 -> s2 [0, 75] { R19481 += 1, R19437 += 1, R19165 += 1 };
  s2 -> s6 [76, 76] { R19481 += 1, R19437 += 1, R19165 += 1 };
  s2 -> s7 [76, 76] { R19481 += 1, R19437 += 1, R19165 += 1 };
  s2 -> s2 [77, 87] { R19481 += 1, R19437 += 1, R19165 += 1 };
  s2 -> s8 [90, 90] { R19481 += 1, R19437 += 1, R19165 += 1 };
  s2 -> s2 [91, 65535] { R19481 += 1, R19437 += 1, R19165 += 1 };
  s3 -> s1 [0, 75] { R19481 += 1, R19437 += 1, R19164 += 1, R19165 += 1 };
  s3 -> s2 [0, 75] { R19481 += 1, R19437 += 1, R19165 += 1 };
  s3 -> s3 [0, 65535] { R19481 += 1, R19436 += 1, R19437 += 1 };
  s3 -> s4 [76, 76] { R19481 += 1, R19437 += 1, R19164 += 1, R19165 += 1 };
  s3 -> s5 [76, 76] { R19481 += 1, R19437 += 1, R19164 += 1, R19165 += 1 };
  s3 -> s6 [76, 76] { R19481 += 1, R19437 += 1, R19165 += 1 };
  s3 -> s7 [76, 76] { R19481 += 1, R19437 += 1, R19165 += 1 };
  s3 -> s2 [77, 87] { R19481 += 1, R19437 += 1, R19165 += 1 };
  s3 -> s1 [77, 65535] { R19481 += 1, R19437 += 1, R19164 += 1, R19165 += 1 };
  s3 -> s8 [90, 90] { R19481 += 1, R19437 += 1, R19165 += 1 };
  s3 -> s2 [91, 65535] { R19481 += 1, R19437 += 1, R19165 += 1 };
  s4 -> s6 [0, 87] { R19481 += 1, R19437 += 1, R19165 += 1 };
  s4 -> s4 [0, 65535] { R19481 += 1, R19437 += 1, R19164 += 1, R19165 += 1 };
  s4 -> s11 [90, 90] { R19481 += 1, R19437 += 1, R19165 += 1 };
  s4 -> s6 [91, 65535] { R19481 += 1, R19437 += 1, R19165 += 1 };
  s6 -> s6 [0, 87] { R19481 += 1, R19437 += 1, R19165 += 1 };
  s6 -> s11 [90, 90] { R19481 += 1, R19437 += 1, R19165 += 1 };
  s6 -> s6 [91, 65535] { R19481 += 1, R19437 += 1, R19165 += 1 };
  s8 -> s8 [0, 75] { R19481 += 1, R19437 += 1, R19165 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R19481 += 1 };
  s8 -> s10 [76, 76] { R19481 += 1, R19437 += 1 };
  s8 -> s11 [76, 76] { R19481 += 1, R19437 += 1 };
  s8 -> s8 [77, 87] { R19481 += 1, R19437 += 1, R19165 += 1 };
  s8 -> s8 [77, 65535] { R19481 += 1, R19437 += 1 };
  s8 -> s8 [90, 65535] { R19481 += 1, R19437 += 1, R19165 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R19481 += 1 };
  s11 -> s11 [0, 87] { R19481 += 1, R19437 += 1, R19165 += 1 };
  s11 -> s12 [0, 65535] { R19481 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R19481 += 1, R19437 += 1 };
  s11 -> s11 [90, 65535] { R19481 += 1, R19437 += 1, R19165 += 1 };
  s12 -> s12 [0, 65535] { R19481 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 75] { R19483 += 1, R19439 += 1, R19168 += 1, R19169 += 1 };
  s0 -> s0 [0, 65535] { R19482 += 1, R19483 += 1 };
  s0 -> s2 [0, 65535] { R19483 += 1, R19438 += 1, R19439 += 1 };
  s0 -> s3 [76, 76] { R19483 += 1, R19439 += 1, R19168 += 1, R19169 += 1 };
  s0 -> s4 [76, 76] { R19483 += 1, R19439 += 1, R19168 += 1, R19169 += 1 };
  s0 -> s1 [77, 65535] { R19483 += 1, R19439 += 1, R19168 += 1, R19169 += 1 };
  s1 -> s1 [0, 75] { R19483 += 1, R19439 += 1, R19168 += 1, R19169 += 1 };
  s1 -> s1 [0, 65535] { R19483 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [76, 76] { R19483 += 1, R19439 += 1, R19168 += 1, R19169 += 1 };
  s1 -> s4 [76, 76] { R19483 += 1, R19439 += 1, R19168 += 1, R19169 += 1 };
  s1 -> s1 [77, 65535] { R19483 += 1, R19439 += 1, R19168 += 1, R19169 += 1 };
  s2 -> s1 [0, 75] { R19483 += 1, R19439 += 1, R19168 += 1, R19169 += 1 };
  s2 -> s2 [0, 65535] { R19483 += 1, R19438 += 1, R19439 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [76, 76] { R19483 += 1, R19439 += 1, R19168 += 1, R19169 += 1 };
  s2 -> s4 [76, 76] { R19483 += 1, R19439 += 1, R19168 += 1, R19169 += 1 };
  s2 -> s1 [77, 65535] { R19483 += 1, R19439 += 1, R19168 += 1, R19169 += 1 };
  s3 -> s3 [0, 65535] { R19483 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R19483 += 1 };
  s4 -> s4 [0, 65535] { R19483 += 1, R19439 += 1, R19168 += 1, R19169 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R19483 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 75] { R19485 += 1, R19441 += 1, R19383 += 1 };
  s0 -> s2 [0, 75] { R19485 += 1, R19441 += 1, R19382 += 1, R19383 += 1 };
  s0 -> s0 [0, 65535] { R19484 += 1, R19485 += 1 };
  s0 -> s3 [0, 65535] { R19485 += 1, R19440 += 1, R19441 += 1 };
  s0 -> s4 [76, 76] { R19485 += 1, R19441 += 1, R19382 += 1, R19383 += 1 };
  s0 -> s5 [76, 76] { R19485 += 1, R19441 += 1, R19383 += 1 };
  s0 -> s6 [76, 76] { R19485 += 1, R19441 += 1, R19383 += 1 };
  s0 -> s7 [76, 76] { R19485 += 1, R19441 += 1, R19382 += 1, R19383 += 1 };
  s0 -> s1 [77, 86] { R19485 += 1, R19441 += 1, R19383 += 1 };
  s0 -> s2 [77, 65535] { R19485 += 1, R19441 += 1, R19382 += 1, R19383 += 1 };
  s0 -> s8 [87, 87] { R19485 += 1, R19441 += 1, R19383 += 1 };
  s0 -> s1 [91, 65535] { R19485 += 1, R19441 += 1, R19383 += 1 };
  s1 -> s1 [0, 75] { R19485 += 1, R19441 += 1, R19383 += 1 };
  s1 -> s5 [76, 76] { R19485 += 1, R19441 += 1 };
  s1 -> s6 [76, 76] { R19485 += 1, R19441 += 1 };
  s1 -> s1 [77, 86] { R19485 += 1, R19441 += 1, R19383 += 1 };
  s1 -> s1 [77, 65535] { R19485 += 1, R19441 += 1 };
  s1 -> s8 [87, 87] { R19485 += 1, R19441 += 1, R19383 += 1 };
  s1 -> s1 [91, 65535] { R19485 += 1, R19441 += 1, R19383 += 1 };
  s2 -> s1 [0, 75] { R19485 += 1, R19441 += 1, R19383 += 1 };
  s2 -> s2 [0, 75] { R19485 += 1, R19441 += 1, R19382 += 1, R19383 += 1 };
  s2 -> s4 [76, 76] { R19485 += 1, R19441 += 1, R19382 += 1, R19383 += 1 };
  s2 -> s5 [76, 76] { R19485 += 1, R19441 += 1, R19383 += 1 };
  s2 -> s6 [76, 76] { R19485 += 1, R19441 += 1, R19383 += 1 };
  s2 -> s7 [76, 76] { R19485 += 1, R19441 += 1, R19382 += 1, R19383 += 1 };
  s2 -> s1 [77, 86] { R19485 += 1, R19441 += 1, R19383 += 1 };
  s2 -> s2 [77, 65535] { R19485 += 1, R19441 += 1, R19382 += 1, R19383 += 1 };
  s2 -> s8 [87, 87] { R19485 += 1, R19441 += 1, R19383 += 1 };
  s2 -> s1 [91, 65535] { R19485 += 1, R19441 += 1, R19383 += 1 };
  s3 -> s1 [0, 75] { R19485 += 1, R19441 += 1, R19383 += 1 };
  s3 -> s2 [0, 75] { R19485 += 1, R19441 += 1, R19382 += 1, R19383 += 1 };
  s3 -> s3 [0, 65535] { R19485 += 1, R19440 += 1, R19441 += 1 };
  s3 -> s4 [76, 76] { R19485 += 1, R19441 += 1, R19382 += 1, R19383 += 1 };
  s3 -> s5 [76, 76] { R19485 += 1, R19441 += 1, R19383 += 1 };
  s3 -> s6 [76, 76] { R19485 += 1, R19441 += 1, R19383 += 1 };
  s3 -> s7 [76, 76] { R19485 += 1, R19441 += 1, R19382 += 1, R19383 += 1 };
  s3 -> s1 [77, 86] { R19485 += 1, R19441 += 1, R19383 += 1 };
  s3 -> s2 [77, 65535] { R19485 += 1, R19441 += 1, R19382 += 1, R19383 += 1 };
  s3 -> s8 [87, 87] { R19485 += 1, R19441 += 1, R19383 += 1 };
  s3 -> s1 [91, 65535] { R19485 += 1, R19441 += 1, R19383 += 1 };
  s4 -> s5 [0, 86] { R19485 += 1, R19441 += 1, R19383 += 1 };
  s4 -> s4 [0, 65535] { R19485 += 1, R19441 += 1, R19382 += 1, R19383 += 1 };
  s4 -> s10 [87, 87] { R19485 += 1, R19441 += 1, R19383 += 1 };
  s4 -> s5 [91, 65535] { R19485 += 1, R19441 += 1, R19383 += 1 };
  s5 -> s5 [0, 86] { R19485 += 1, R19441 += 1, R19383 += 1 };
  s5 -> s5 [0, 65535] { R19485 += 1, R19441 += 1 };
  s5 -> s10 [87, 87] { R19485 += 1, R19441 += 1, R19383 += 1 };
  s5 -> s5 [91, 65535] { R19485 += 1, R19441 += 1, R19383 += 1 };
  s8 -> s8 [0, 75] { R19485 += 1, R19441 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R19485 += 1 };
  s8 -> s10 [76, 76] { R19485 += 1, R19441 += 1 };
  s8 -> s11 [76, 76] { R19485 += 1, R19441 += 1 };
  s8 -> s8 [77, 65535] { R19485 += 1, R19441 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s12 [0, 65535] { R19485 += 1 };
  s10 -> s10 [0, 65535] { R19485 += 1, R19441 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R19485 += 1 };
  s12 -> s12 [0, 65535] { R19485 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining P63
automaton P63_0 {
  init s0;
  s0 -> s1 [119, 119];
  accepting s1;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [108, 108];
  accepting s1;
};
};
constraint R2 = R19485 && R20 - R19485 = -1 && R21 = R19485 && R22 - R19485 = -1 && R23 = R19485 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R19167 + -1*R19165 - R53 = 0 && R52 + R19166 + R19164 = 0 && R19426 = 0 && R19427 = 0 && R19432 = 0 && R19433 = 0 && R19434 = 0 && R19435 = 0 && R19436 = 0 && R19437 = 0 && R19440 = 0 && R19441 = 0 && R19442 = 0 && R19443 = R19485 && R19444 = 0 && R19445 = R19485 && R19446 = 0 && R19447 = R19485 && R19448 = 0 && R19449 = R19485 && R19450 = 0 && R19451 = R19485 && R19452 = 0 && R19453 = R19485 && R19454 = 0 && R19455 = R19485 && R19456 = 0 && R19457 = R19485 && R19458 = 0 && R19459 = R19485 && R19460 = 0 && R19461 = R19485 && R19462 = 0 && R19463 = R19485 && R19464 = 0 && R19465 = R19485 && R19466 = 0 && R19467 = R19485 && R19468 = 0 && R19469 = R19485 && R19470 = 0 && R19471 = R19485 && R19472 = 0 && R19473 = R19485 && R19474 = 0 && R19475 = R19485 && R19476 = 0 && R19477 = R19485 && R19478 = 0 && R19479 = R19485 && R19480 = 0 && R19481 = R19485 && R19482 = 0 && R19483 = R19485 && R19484 = 0 && -1 < R1 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R19167 + -1*R19165 - R53 < 1 && 0 < R19485 && (R1 != 0 || R17 = 0 || (R19386 = 0 && R19387 = 0)) && (R1 != 0 || R17 = 0 || (R19388 = 0 && R19389 = 0)) && (R1 != 0 || R17 = 0 || (R19390 = 0 && R19391 = 0)) && (R1 != 0 || R17 = 0 || (R19392 = 0 && R19393 = 0)) && (R1 != 0 || R17 = 0 || (R19394 = 0 && R19395 = 0)) && (R1 != 0 || R17 = 0 || (R19396 = 0 && R19397 = 0)) && (R1 != 0 || R17 = 0 || (R19398 = 0 && R19399 = 0)) && (R1 != 0 || R17 = 0 || (R19400 = 0 && R19401 = 0)) && (R1 != 0 || R17 = 0 || (R19402 = 0 && R19403 = 0)) && (R1 != 0 || R17 = 0 || (R19404 = 0 && R19405 = 0)) && (R48 + R19163 + R19160 != 0 || ((R42 + R11524 + R11522 != 0 || R43 + R11525 + R11523 + -1*R19167 + -1*R19165 - R53 = 0 || R53 + R19167 + R19165 < 1) && (R42 + R11524 + R11522 = 0 || R53 + R19167 + R19165 < 1))) && (R48 + R19163 + R19160 != 0 || ((R46 + R19161 + R19158 != 0 || R47 + R19162 + R19159 + -1*R19167 + -1*R19165 - R53 = 0 || R53 + R19167 + R19165 < 1) && (R46 + R19161 + R19158 = 0 || R53 + R19167 + R19165 < 1))) && (R19386 != 0 || R1 = R19387 || R1 < 1) && (R19388 != 0 || R1 = R19389 || R1 < 1) && (R19390 != 0 || R1 = R19391 || R1 < 1) && (R19392 != 0 || R1 = R19393 || R1 < 1) && (R19394 != 0 || R1 = R19395 || R1 < 1) && (R19396 != 0 || R1 = R19397 || R1 < 1) && (R19398 != 0 || R1 = R19399 || R1 < 1) && (R19400 != 0 || R1 = R19401 || R1 < 1) && (R19402 != 0 || R1 = R19403 || R1 < 1) && (R19404 != 0 || R1 = R19405 || R1 < 1) && (R18 = 0 || (R19424 = 0 && R19425 = 0)) && (R18 = 0 || (R19428 = 0 && R19429 = 0)) && (R18 = 0 || (R19430 = 0 && R19431 = 0)) && (R18 = 0 || (R19438 = 0 && R19439 = 0)) && (R19 = 0 || (R19406 = 0 && R19407 = 0)) && (R19 = 0 || (R19408 = 0 && R19409 = 0)) && (R19 = 0 || (R19410 = 0 && R19411 = 0)) && (R19 = 0 || (R19412 = 0 && R19413 = 0)) && (R19 = 0 || (R19414 = 0 && R19415 = 0)) && (R19 = 0 || (R19416 = 0 && R19417 = 0)) && (R19 = 0 || (R19418 = 0 && R19419 = 0)) && (R19 = 0 || (R19420 = 0 && R19421 = 0)) && (R19 = 0 || (R19422 = 0 && R19423 = 0)) && (R48 + R19163 + R19160 = 0 || (R42 + R11524 + R11522 = 0 && R43 + R11525 + R11523 + -1*R19167 + -1*R19165 - R53 = 0)) && (R48 + R19163 + R19160 = 0 || (R46 + R19161 + R19158 = 0 && R47 + R19162 + R19159 + -1*R19167 + -1*R19165 - R53 = 0)) && (R58 + R19173 + R19170 = 0 || (R56 + R19171 + R19168 = 0 && R57 + R19172 + R19169 = 0)) && (R58 + R19173 + R19170 = 0 || (R62 + R19384 + R19382 = 0 && R63 + R19385 + R19383 = 0)) && (R19386 = 0 || R1 < 1) && (R19388 = 0 || R1 < 1) && (R19390 = 0 || R1 < 1) && (R19392 = 0 || R1 < 1) && (R19394 = 0 || R1 < 1) && (R19396 = 0 || R1 < 1) && (R19398 = 0 || R1 < 1) && (R19400 = 0 || R1 < 1) && (R19402 = 0 || R1 < 1) && (R19404 = 0 || R1 < 1);
// End of Parikh automata intersection problem
