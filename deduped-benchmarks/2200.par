// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R121, R122, R177, R178, R179, R180, R181, R182, R183, R184, R185, R186, R187, R188, R189, R190, R191, R192, R193, R194, R195, R196, R197, R198, R199, R2, R200, R201, R202, R203, R204, R205, R206, R207, R208, R209, R210, R211, R212, R213, R214, R215, R216, R217, R218, R219, R220, R221, R222, R223, R224, R225, R226, R227, R228, R229, R230, R3, R4, R5, R7, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 60];
  s0 -> s1 [61, 61];
  s0 -> s0 [62, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60] { R122 += 1 };
  s0 -> s0 [0, 65535] { R121 += 1, R122 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535] { R122 += 1 };
  s1 -> s1 [0, 60] { R122 += 1 };
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535] { R122 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value2_3 {
  init s0;
  s0 -> s0 [0, 65535] { R197 += 1, R198 += 1 };
  s0 -> s1 [0, 65535] { R198 += 1, R0 += 1 };
  s1 -> s1 [0, 65535] { R198 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_4 {
  init s0;
  s0 -> s0 [0, 65535] { R199 += 1, R200 += 1 };
  s0 -> s1 [0, 65535] { R200 += 1, R179 += 1, R180 += 1 };
  s0 -> s2 [32, 32] { R200 += 1, R180 += 1 };
  s1 -> s1 [0, 65535] { R200 += 1, R179 += 1, R180 += 1 };
  s1 -> s2 [32, 32] { R200 += 1, R180 += 1 };
  s2 -> s2 [0, 65535] { R200 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s0 [0, 65535] { R201 += 1, R202 += 1 };
  s0 -> s1 [0, 65535] { R202 += 1, R181 += 1, R182 += 1 };
  s0 -> s2 [0, 65535] { R202 += 1, R182 += 1, R3 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R202 += 1, R181 += 1, R182 += 1 };
  s1 -> s2 [0, 65535] { R202 += 1, R182 += 1, R3 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R202 += 1 };
  s2 -> s2 [0, 65535] { R202 += 1, R182 += 1, R3 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R202 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 64] { R208 += 1 };
  s0 -> s0 [0, 65535] { R207 += 1, R208 += 1 };
  s0 -> s2 [67, 67] { R208 += 1 };
  s0 -> s1 [68, 65535] { R208 += 1 };
  s1 -> s1 [0, 64] { R208 += 1 };
  s1 -> s2 [67, 67] { R208 += 1 };
  s1 -> s1 [68, 65535] { R208 += 1 };
  s2 -> s2 [0, 64] { R208 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [67, 65535] { R208 += 1 };
  accepting s2;
};
automaton value2_7 {
  init s0;
  s0 -> s0 [0, 65535] { R209 += 1, R210 += 1 };
  s0 -> s1 [0, 65535] { R210 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R210 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 66] { R212 += 1, R8 += 1 };
  s0 -> s2 [0, 65535] { R212 += 1, R7 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R211 += 1, R212 += 1 };
  s0 -> s3 [67, 67] { R212 += 1 };
  s0 -> s1 [68, 65535] { R212 += 1, R8 += 1 };
  s1 -> s1 [0, 66] { R212 += 1, R8 += 1 };
  s1 -> s3 [67, 67] { R212 += 1 };
  s1 -> s1 [68, 65535] { R212 += 1, R8 += 1 };
  s2 -> s1 [0, 66] { R212 += 1, R8 += 1 };
  s2 -> s2 [0, 65535] { R212 += 1, R7 += 1, R8 += 1 };
  s2 -> s3 [67, 67] { R212 += 1 };
  s2 -> s1 [68, 65535] { R212 += 1, R8 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R212 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 8] { R214 += 1, R184 += 1 };
  s0 -> s0 [0, 65535] { R213 += 1, R214 += 1 };
  s0 -> s2 [0, 65535] { R214 += 1, R183 += 1, R184 += 1 };
  s0 -> s3 [9, 13] { R214 += 1, R184 += 1 };
  s0 -> s1 [14, 31] { R214 += 1, R184 += 1 };
  s0 -> s3 [32, 32] { R214 += 1, R184 += 1 };
  s0 -> s1 [33, 65535] { R214 += 1, R184 += 1 };
  s1 -> s1 [0, 65535] { R214 += 1, R184 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R214 += 1 };
  s2 -> s1 [0, 8] { R214 += 1, R184 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R214 += 1, R183 += 1, R184 += 1 };
  s2 -> s3 [9, 13] { R214 += 1, R184 += 1 };
  s2 -> s1 [14, 31] { R214 += 1, R184 += 1 };
  s2 -> s3 [32, 32] { R214 += 1, R184 += 1 };
  s2 -> s1 [33, 65535] { R214 += 1, R184 += 1 };
  s3 -> s1 [0, 65535] { R214 += 1, R184 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R214 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 65535] { R216 += 1, R186 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R215 += 1, R216 += 1 };
  s0 -> s2 [0, 65535] { R216 += 1, R185 += 1, R186 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R216 += 1 };
  s1 -> s1 [0, 65535] { R216 += 1, R186 += 1, R4 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R216 += 1, R186 += 1, R4 += 1 };
  s2 -> s2 [0, 65535] { R216 += 1, R185 += 1, R186 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R216 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 8] { R218 += 1, R188 += 1 };
  s0 -> s0 [0, 65535] { R217 += 1, R218 += 1 };
  s0 -> s2 [0, 65535] { R218 += 1, R187 += 1, R188 += 1 };
  s0 -> s3 [9, 13] { R218 += 1, R188 += 1 };
  s0 -> s1 [14, 31] { R218 += 1, R188 += 1 };
  s0 -> s3 [32, 32] { R218 += 1, R188 += 1 };
  s0 -> s1 [33, 65535] { R218 += 1, R188 += 1 };
  s1 -> s5 [0, 65535] { R218 += 1 };
  s1 -> s1 [0, 65535] { R218 += 1, R188 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R218 += 1, R188 += 1 };
  s2 -> s2 [0, 65535] { R218 += 1, R187 += 1, R188 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R218 += 1, R188 += 1 };
  s2 -> s1 [14, 31] { R218 += 1, R188 += 1 };
  s2 -> s3 [32, 32] { R218 += 1, R188 += 1 };
  s2 -> s1 [33, 65535] { R218 += 1, R188 += 1 };
  s3 -> s1 [0, 65535] { R218 += 1, R188 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R218 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s0 [0, 65535] { R219 += 1, R220 += 1 };
  s0 -> s1 [0, 65535] { R220 += 1, R189 += 1, R190 += 1 };
  s0 -> s2 [0, 65535] { R220 += 1, R190 += 1, R5 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R220 += 1, R189 += 1, R190 += 1 };
  s1 -> s2 [0, 65535] { R220 += 1, R190 += 1, R5 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R220 += 1, R190 += 1, R5 += 1 };
  s2 -> s4 [0, 65535] { R220 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R220 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 66] { R222 += 1, R192 += 1 };
  s0 -> s0 [0, 65535] { R221 += 1, R222 += 1 };
  s0 -> s2 [0, 65535] { R222 += 1, R191 += 1, R192 += 1 };
  s0 -> s1 [68, 65535] { R222 += 1, R192 += 1 };
  s1 -> s1 [0, 66] { R222 += 1, R192 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R222 += 1 };
  s1 -> s1 [68, 65535] { R222 += 1, R192 += 1 };
  s2 -> s1 [0, 66] { R222 += 1, R192 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R222 += 1, R191 += 1, R192 += 1 };
  s2 -> s1 [68, 65535] { R222 += 1, R192 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 65535] { R224 += 1, R194 += 1, R177 += 1 };
  s0 -> s0 [0, 65535] { R223 += 1, R224 += 1 };
  s0 -> s2 [0, 65535] { R224 += 1, R193 += 1, R194 += 1 };
  s1 -> s1 [0, 65535] { R224 += 1, R194 += 1, R177 += 1 };
  s1 -> s4 [0, 65535] { R224 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R224 += 1, R194 += 1, R177 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R224 += 1, R193 += 1, R194 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R224 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 67] { R226 += 1, R196 += 1 };
  s0 -> s2 [0, 65535] { R226 += 1, R195 += 1, R196 += 1 };
  s0 -> s0 [0, 65535] { R225 += 1, R226 += 1 };
  s0 -> s1 [91, 65535] { R226 += 1, R196 += 1 };
  s1 -> s1 [0, 67] { R226 += 1, R196 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R226 += 1 };
  s1 -> s1 [91, 65535] { R226 += 1, R196 += 1 };
  s2 -> s1 [0, 67] { R226 += 1, R196 += 1 };
  s2 -> s2 [0, 65535] { R226 += 1, R195 += 1, R196 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [91, 65535] { R226 += 1, R196 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 65535] { R228 += 1, R203 += 1, R204 += 1 };
  s0 -> s2 [0, 65535] { R228 += 1, R204 += 1, R178 += 1 };
  s0 -> s0 [0, 65535] { R227 += 1, R228 += 1 };
  s1 -> s1 [0, 65535] { R228 += 1, R203 += 1, R204 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R228 += 1, R204 += 1, R178 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R228 += 1, R204 += 1, R178 += 1 };
  s2 -> s4 [0, 65535] { R228 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R228 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 66] { R230 += 1, R206 += 1 };
  s0 -> s0 [0, 65535] { R229 += 1, R230 += 1 };
  s0 -> s2 [0, 65535] { R230 += 1, R205 += 1, R206 += 1 };
  s0 -> s3 [67, 67] { R230 += 1, R206 += 1 };
  s0 -> s4 [67, 67] { R230 += 1, R206 += 1 };
  s0 -> s1 [91, 65535] { R230 += 1, R206 += 1 };
  s1 -> s1 [0, 66] { R230 += 1, R206 += 1 };
  s1 -> s1 [0, 65535] { R230 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [67, 67] { R230 += 1, R206 += 1 };
  s1 -> s4 [67, 67] { R230 += 1, R206 += 1 };
  s1 -> s1 [91, 65535] { R230 += 1, R206 += 1 };
  s2 -> s1 [0, 66] { R230 += 1, R206 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R230 += 1, R205 += 1, R206 += 1 };
  s2 -> s3 [67, 67] { R230 += 1, R206 += 1 };
  s2 -> s4 [67, 67] { R230 += 1, R206 += 1 };
  s2 -> s1 [91, 65535] { R230 += 1, R206 += 1 };
  s3 -> s3 [0, 65535] { R230 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 67] { R230 += 1, R206 += 1 };
  s4 -> s4 [0, 65535] { R230 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [91, 65535] { R230 += 1, R206 += 1 };
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
};
synchronised {  // Automata constraining c5
automaton c5_0 {
  init s0;
  s0 -> s1 [99, 99];
  accepting s1;
};
};
constraint R1 = R186 && R2 = R202 && R7 = 0 && R121 = 0 && R122 = R230 && R179 = 0 && R183 - R186 = -1 && R184 = R186 && R185 - R186 = -1 && R187 = 0 && R188 = 1 && R189 = 0 && R190 = 1 && R197 - R230 = 1 && R198 = R202 && R199 - R230 = 1 && R200 = R202 && R201 - R230 = 1 && R207 = 0 && R208 = R230 && R209 = 0 && R210 = R230 && R211 = 0 && R212 = R230 && R213 = 0 && R214 = R230 && R215 = 0 && R216 = R230 && R217 = 0 && R218 = R230 && R219 = 0 && R220 = R230 && R221 = 0 && R222 = R230 && R223 = 0 && R224 = R230 && R225 = 0 && R226 = R230 && R227 = 0 && R228 = R230 && R229 = 0 && R0 != 0 && R8 < R186 && -2 < R8 && 0 < R186 && R230 < R202 && -1 < R230 && (R0 != R180 || R180 = 1 || R180 < 0) && (R178 != 0 || ((R203 != 0 || R8 - R204 = -1 || R8 < 0) && (R203 = 0 || R8 < 0))) && (R178 != 0 || ((R205 != 0 || R8 - R206 = -1 || R8 < 0) && (R205 = 0 || R8 < 0))) && (R180 != 1 || -1 < R0) && (R181 != 0 || ((R3 != 0 || ((R0 != R182 || R182 = 1 || R182 < 0) && (R0 = R182 || R182 = 1 || R0 < 1))) && (R3 = 0 || ((R0 != R182 || R182 = 1 || R182 < 0) && (R182 != 1 || -1 < R0) && (R0 = R182 || R182 = 1))))) && (R186 != R192 || R8 - R191 = -1 || ((R177 != 0 || R192 - R8 < 2) && (R177 = 0 || R192 - R8 < 1 || R192 < 1))) && (R186 != R194 || R8 - R193 = -1 || ((R177 != 0 || R194 - R8 < 2) && (R177 = 0 || R194 - R8 < 1 || R194 < 1))) && (R186 != R196 || R8 - R195 = -1 || ((R177 != 0 || R196 - R8 < 2) && (R177 = 0 || R196 - R8 < 1 || R196 < 1))) && (R0 = R180 || R180 = 1) && (R178 = 0 || (R8 - R204 = -1 && R203 = 0)) && (R178 = 0 || (R8 - R206 = -1 && R205 = 0)) && (R181 = 0 || (R3 = 0 && R0 < 0)) && (R186 = R192 || (R8 - R186 = -1 && R177 = 0)) && (R186 = R194 || (R8 - R186 = -1 && R177 = 0)) && (R186 = R196 || (R8 - R186 = -1 && R177 = 0));
// End of Parikh automata intersection problem
