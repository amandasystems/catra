// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R11522, R11523, R11524, R11525, R12, R15342, R15343, R15344, R15345, R15346, R15347, R17, R17888, R17889, R17890, R17891, R18, R18736, R18737, R18738, R18739, R18740, R18741, R18742, R18743, R18744, R18745, R18746, R18747, R18748, R18749, R18750, R18751, R18752, R18753, R18754, R18755, R18756, R18757, R18758, R18759, R18760, R18761, R18762, R18763, R18764, R18765, R18766, R18767, R18768, R18769, R18770, R18771, R18772, R18773, R18774, R18775, R18776, R18777, R18778, R18779, R18780, R18781, R18782, R18783, R18784, R18785, R18786, R18787, R18788, R18789, R18790, R18791, R18792, R18793, R18794, R18795, R18796, R18797, R18798, R18799, R18800, R18801, R18802, R18803, R18804, R18805, R18806, R18807, R18808, R18809, R18810, R18811, R18812, R18813, R18814, R18815, R18816, R18817, R18818, R18819, R18820, R18821, R18822, R18823, R18824, R18825, R18826, R18827, R18828, R18829, R18830, R18831, R18832, R18833, R18834, R18835, R18836, R18837, R18838, R18839, R18840, R18841, R18842, R18843, R18844, R18845, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [76, 76];
  s0 -> s0 [77, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [76, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 75];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [76, 76];
  s0 -> s1 [77, 65535];
  s1 -> s1 [0, 75];
  s1 -> s2 [76, 76];
  s1 -> s1 [77, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s1 [0, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s1 [0, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R18766 += 1, R18767 += 1 };
  s0 -> s1 [0, 65535] { R18767 += 1, R19 += 1 };
  s1 -> s1 [0, 65535] { R18767 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 75] { R18769 += 1 };
  s0 -> s0 [0, 65535] { R18768 += 1, R18769 += 1 };
  s0 -> s2 [76, 76] { R18769 += 1 };
  s0 -> s3 [76, 76] { R18769 += 1 };
  s0 -> s1 [88, 65535] { R18769 += 1 };
  s1 -> s1 [0, 75] { R18769 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [76, 76] { R18769 += 1 };
  s1 -> s3 [76, 76] { R18769 += 1 };
  s1 -> s1 [88, 65535] { R18769 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 76] { R18769 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [88, 65535] { R18769 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 75] { R18771 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R18770 += 1, R18771 += 1 };
  s0 -> s2 [76, 76] { R18771 += 1, R38 += 1 };
  s0 -> s3 [76, 76] { R18771 += 1, R38 += 1 };
  s0 -> s1 [77, 65535] { R18771 += 1, R38 += 1 };
  s1 -> s1 [0, 75] { R18771 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [76, 76] { R18771 += 1, R38 += 1 };
  s1 -> s3 [76, 76] { R18771 += 1, R38 += 1 };
  s1 -> s1 [77, 65535] { R18771 += 1, R38 += 1 };
  s2 -> s2 [0, 65535] { R18771 += 1, R38 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 75] { R18773 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R18772 += 1, R18773 += 1 };
  s0 -> s2 [76, 76] { R18773 += 1, R40 += 1 };
  s0 -> s3 [76, 76] { R18773 += 1, R40 += 1 };
  s0 -> s1 [77, 65535] { R18773 += 1, R40 += 1 };
  s1 -> s1 [0, 75] { R18773 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [76, 76] { R18773 += 1, R40 += 1 };
  s1 -> s3 [76, 76] { R18773 += 1, R40 += 1 };
  s1 -> s1 [77, 65535] { R18773 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R18773 += 1, R40 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 75] { R18775 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R18774 += 1, R18775 += 1 };
  s0 -> s2 [76, 76] { R18775 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [76, 76] { R18775 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [77, 65535] { R18775 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 75] { R18775 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [76, 76] { R18775 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [76, 76] { R18775 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [77, 65535] { R18775 += 1, R42 += 1, R43 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R18775 += 1, R42 += 1, R43 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 75] { R18777 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R18776 += 1, R18777 += 1 };
  s0 -> s2 [76, 76] { R18777 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [76, 76] { R18777 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [77, 65535] { R18777 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 75] { R18777 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [76, 76] { R18777 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [76, 76] { R18777 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [77, 65535] { R18777 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R18777 += 1, R46 += 1, R47 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 75] { R18779 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R18778 += 1, R18779 += 1 };
  s0 -> s2 [76, 76] { R18779 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [76, 76] { R18779 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [77, 65535] { R18779 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 75] { R18779 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [76, 76] { R18779 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [76, 76] { R18779 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [77, 65535] { R18779 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R18779 += 1, R52 += 1, R53 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 75] { R18781 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R18780 += 1, R18781 += 1 };
  s0 -> s2 [76, 76] { R18781 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [76, 76] { R18781 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [77, 65535] { R18781 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 75] { R18781 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [76, 76] { R18781 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [76, 76] { R18781 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [77, 65535] { R18781 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R18781 += 1, R56 += 1, R57 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 75] { R18783 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R18782 += 1, R18783 += 1 };
  s0 -> s2 [76, 76] { R18783 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [76, 76] { R18783 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [77, 65535] { R18783 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 75] { R18783 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [76, 76] { R18783 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [76, 76] { R18783 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [77, 65535] { R18783 += 1, R62 += 1, R63 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R18783 += 1, R62 += 1, R63 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 75] { R18803 += 1 };
  s0 -> s0 [0, 65535] { R18802 += 1, R18803 += 1 };
  s0 -> s2 [76, 76] { R18803 += 1 };
  s0 -> s1 [77, 65535] { R18803 += 1 };
  s1 -> s1 [0, 75] { R18803 += 1 };
  s1 -> s2 [76, 76] { R18803 += 1 };
  s1 -> s1 [77, 65535] { R18803 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R18803 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R18805 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R18804 += 1, R18805 += 1 };
  s1 -> s1 [0, 65535] { R18805 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 75] { R18807 += 1 };
  s0 -> s0 [0, 65535] { R18806 += 1, R18807 += 1 };
  s0 -> s2 [0, 65535] { R18807 += 1, R8 += 1 };
  s0 -> s3 [76, 76] { R18807 += 1 };
  s0 -> s1 [77, 65535] { R18807 += 1 };
  s1 -> s1 [0, 75] { R18807 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [76, 76] { R18807 += 1 };
  s1 -> s1 [77, 65535] { R18807 += 1 };
  s2 -> s1 [0, 75] { R18807 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R18807 += 1, R8 += 1 };
  s2 -> s3 [76, 76] { R18807 += 1 };
  s2 -> s1 [77, 65535] { R18807 += 1 };
  s3 -> s3 [0, 65535] { R18807 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 75] { R18809 += 1, R18747 += 1 };
  s0 -> s2 [0, 65535] { R18809 += 1, R18746 += 1, R18747 += 1 };
  s0 -> s0 [0, 65535] { R18808 += 1, R18809 += 1 };
  s0 -> s1 [77, 65535] { R18809 += 1, R18747 += 1 };
  s1 -> s1 [0, 75] { R18809 += 1, R18747 += 1 };
  s1 -> s1 [0, 65535] { R18809 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [77, 65535] { R18809 += 1, R18747 += 1 };
  s2 -> s1 [0, 75] { R18809 += 1, R18747 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R18809 += 1, R18746 += 1, R18747 += 1 };
  s2 -> s1 [77, 65535] { R18809 += 1, R18747 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s0 [0, 65535] { R18810 += 1, R18811 += 1 };
  s0 -> s1 [0, 65535] { R18811 += 1, R18749 += 1, R17 += 1 };
  s0 -> s2 [0, 65535] { R18811 += 1, R18748 += 1, R18749 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R18811 += 1 };
  s1 -> s1 [0, 65535] { R18811 += 1, R18749 += 1, R17 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R18811 += 1, R18749 += 1, R17 += 1 };
  s2 -> s2 [0, 65535] { R18811 += 1, R18748 += 1, R18749 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R18811 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 76] { R18813 += 1, R18751 += 1 };
  s0 -> s0 [0, 65535] { R18812 += 1, R18813 += 1 };
  s0 -> s2 [0, 65535] { R18813 += 1, R18750 += 1, R18751 += 1 };
  s0 -> s1 [87, 65535] { R18813 += 1, R18751 += 1 };
  s1 -> s1 [0, 76] { R18813 += 1, R18751 += 1 };
  s1 -> s1 [0, 65535] { R18813 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [87, 65535] { R18813 += 1, R18751 += 1 };
  s2 -> s1 [0, 76] { R18813 += 1, R18751 += 1 };
  s2 -> s2 [0, 65535] { R18813 += 1, R18750 += 1, R18751 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [87, 65535] { R18813 += 1, R18751 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R18815 += 1, R18753 += 1, R67 += 1 };
  s0 -> s2 [0, 65535] { R18815 += 1, R18752 += 1, R18753 += 1 };
  s0 -> s0 [0, 65535] { R18814 += 1, R18815 += 1 };
  s1 -> s1 [0, 65535] { R18815 += 1, R18753 += 1, R67 += 1 };
  s1 -> s4 [0, 65535] { R18815 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R18815 += 1, R18753 += 1, R67 += 1 };
  s2 -> s2 [0, 65535] { R18815 += 1, R18752 += 1, R18753 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R18815 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 86] { R18817 += 1, R18755 += 1 };
  s0 -> s2 [0, 65535] { R18817 += 1, R18755 += 1, R69 += 1 };
  s0 -> s0 [0, 65535] { R18816 += 1, R18817 += 1 };
  s0 -> s3 [0, 65535] { R18817 += 1, R18754 += 1, R18755 += 1 };
  s0 -> s1 [88, 65535] { R18817 += 1, R18755 += 1 };
  s1 -> s1 [0, 86] { R18817 += 1, R18755 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R18817 += 1 };
  s1 -> s1 [88, 65535] { R18817 += 1, R18755 += 1 };
  s2 -> s1 [0, 86] { R18817 += 1, R18755 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R18817 += 1, R18755 += 1, R69 += 1 };
  s2 -> s5 [0, 65535] { R18817 += 1 };
  s2 -> s1 [88, 65535] { R18817 += 1, R18755 += 1 };
  s3 -> s1 [0, 86] { R18817 += 1, R18755 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R18817 += 1, R18755 += 1, R69 += 1 };
  s3 -> s3 [0, 65535] { R18817 += 1, R18754 += 1, R18755 += 1 };
  s3 -> s1 [88, 65535] { R18817 += 1, R18755 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R18817 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 86] { R18819 += 1, R18757 += 1, R11525 += 1 };
  s0 -> s0 [0, 65535] { R18818 += 1, R18819 += 1 };
  s0 -> s1 [0, 65535] { R18819 += 1, R18757 += 1 };
  s0 -> s2 [0, 65535] { R18819 += 1, R18756 += 1, R18757 += 1 };
  s0 -> s1 [88, 65535] { R18819 += 1, R18757 += 1, R11525 += 1 };
  s1 -> s1 [0, 86] { R18819 += 1, R18757 += 1, R11525 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R18819 += 1, R18757 += 1 };
  s1 -> s4 [0, 65535] { R18819 += 1 };
  s1 -> s1 [88, 65535] { R18819 += 1, R18757 += 1, R11525 += 1 };
  s2 -> s1 [0, 86] { R18819 += 1, R18757 += 1, R11525 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R18819 += 1, R18757 += 1 };
  s2 -> s2 [0, 65535] { R18819 += 1, R18756 += 1, R18757 += 1 };
  s2 -> s1 [88, 65535] { R18819 += 1, R18757 += 1, R11525 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R18819 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R18821 += 1, R18759 += 1, R15346 += 1, R15347 += 1 };
  s0 -> s2 [0, 65535] { R18821 += 1, R18758 += 1, R18759 += 1 };
  s0 -> s0 [0, 65535] { R18820 += 1, R18821 += 1 };
  s0 -> s3 [0, 65535] { R18821 += 1, R18759 += 1 };
  s1 -> s1 [0, 65535] { R18821 += 1, R18759 += 1, R15346 += 1, R15347 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s3 [0, 65535] { R18821 += 1, R18759 += 1 };
  s1 -> s5 [0, 65535] { R18821 += 1 };
  s2 -> s1 [0, 65535] { R18821 += 1, R18759 += 1, R15346 += 1, R15347 += 1 };
  s2 -> s2 [0, 65535] { R18821 += 1, R18758 += 1, R18759 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R18821 += 1, R18759 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R18821 += 1, R18759 += 1 };
  s3 -> s5 [0, 65535] { R18821 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R18821 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 87] { R18823 += 1, R18761 += 1, R17891 += 1 };
  s0 -> s0 [0, 65535] { R18822 += 1, R18823 += 1 };
  s0 -> s2 [0, 65535] { R18823 += 1, R18760 += 1, R18761 += 1 };
  s0 -> s3 [0, 65535] { R18823 += 1, R18761 += 1, R17890 += 1, R17891 += 1 };
  s0 -> s4 [90, 90] { R18823 += 1, R18761 += 1, R17891 += 1 };
  s0 -> s1 [91, 65535] { R18823 += 1, R18761 += 1, R17891 += 1 };
  s1 -> s1 [0, 87] { R18823 += 1, R18761 += 1, R17891 += 1 };
  s1 -> s4 [90, 90] { R18823 += 1, R18761 += 1, R17891 += 1 };
  s1 -> s1 [91, 65535] { R18823 += 1, R18761 += 1, R17891 += 1 };
  s2 -> s1 [0, 87] { R18823 += 1, R18761 += 1, R17891 += 1 };
  s2 -> s2 [0, 65535] { R18823 += 1, R18760 += 1, R18761 += 1 };
  s2 -> s3 [0, 65535] { R18823 += 1, R18761 += 1, R17890 += 1, R17891 += 1 };
  s2 -> s4 [90, 90] { R18823 += 1, R18761 += 1, R17891 += 1 };
  s2 -> s1 [91, 65535] { R18823 += 1, R18761 += 1, R17891 += 1 };
  s3 -> s1 [0, 87] { R18823 += 1, R18761 += 1, R17891 += 1 };
  s3 -> s3 [0, 65535] { R18823 += 1, R18761 += 1, R17890 += 1, R17891 += 1 };
  s3 -> s4 [90, 90] { R18823 += 1, R18761 += 1, R17891 += 1 };
  s3 -> s1 [91, 65535] { R18823 += 1, R18761 += 1, R17891 += 1 };
  s4 -> s4 [0, 87] { R18823 += 1, R18761 += 1, R17891 += 1 };
  s4 -> s4 [0, 65535] { R18823 += 1, R18761 += 1 };
  s4 -> s5 [0, 65535] { R18823 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [90, 65535] { R18823 += 1, R18761 += 1, R17891 += 1 };
  s5 -> s5 [0, 65535] { R18823 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s4, s5, s6;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R18825 += 1, R18763 += 1 };
  s0 -> s2 [0, 65535] { R18825 += 1, R18762 += 1, R18763 += 1 };
  s0 -> s0 [0, 65535] { R18824 += 1, R18825 += 1 };
  s1 -> s1 [0, 65535] { R18825 += 1, R18763 += 1 };
  s1 -> s4 [0, 65535] { R18825 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R18825 += 1, R18763 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R18825 += 1, R18762 += 1, R18763 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R18825 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 86] { R18827 += 1, R18765 += 1, R18745 += 1 };
  s0 -> s2 [0, 65535] { R18827 += 1, R18764 += 1, R18765 += 1 };
  s0 -> s3 [0, 65535] { R18827 += 1, R18765 += 1, R18744 += 1, R18745 += 1 };
  s0 -> s0 [0, 65535] { R18826 += 1, R18827 += 1 };
  s0 -> s4 [87, 87] { R18827 += 1, R18765 += 1, R18745 += 1 };
  s0 -> s5 [87, 87] { R18827 += 1, R18765 += 1, R18745 += 1 };
  s0 -> s1 [91, 65535] { R18827 += 1, R18765 += 1, R18745 += 1 };
  s1 -> s1 [0, 86] { R18827 += 1, R18765 += 1, R18745 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R18827 += 1, R18765 += 1 };
  s1 -> s7 [0, 65535] { R18827 += 1 };
  s1 -> s4 [87, 87] { R18827 += 1, R18765 += 1, R18745 += 1 };
  s1 -> s5 [87, 87] { R18827 += 1, R18765 += 1, R18745 += 1 };
  s1 -> s1 [91, 65535] { R18827 += 1, R18765 += 1, R18745 += 1 };
  s2 -> s1 [0, 86] { R18827 += 1, R18765 += 1, R18745 += 1 };
  s2 -> s2 [0, 65535] { R18827 += 1, R18764 += 1, R18765 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R18827 += 1, R18765 += 1, R18744 += 1, R18745 += 1 };
  s2 -> s4 [87, 87] { R18827 += 1, R18765 += 1, R18745 += 1 };
  s2 -> s5 [87, 87] { R18827 += 1, R18765 += 1, R18745 += 1 };
  s2 -> s1 [91, 65535] { R18827 += 1, R18765 += 1, R18745 += 1 };
  s3 -> s1 [0, 86] { R18827 += 1, R18765 += 1, R18745 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s7 [0, 65535] { R18827 += 1 };
  s3 -> s3 [0, 65535] { R18827 += 1, R18765 += 1, R18744 += 1, R18745 += 1 };
  s3 -> s4 [87, 87] { R18827 += 1, R18765 += 1, R18745 += 1 };
  s3 -> s5 [87, 87] { R18827 += 1, R18765 += 1, R18745 += 1 };
  s3 -> s1 [91, 65535] { R18827 += 1, R18765 += 1, R18745 += 1 };
  s4 -> s4 [0, 87] { R18827 += 1, R18765 += 1, R18745 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R18827 += 1 };
  s4 -> s4 [0, 65535] { R18827 += 1, R18765 += 1 };
  s4 -> s4 [91, 65535] { R18827 += 1, R18765 += 1, R18745 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R18827 += 1 };
  s5 -> s5 [0, 65535] { R18827 += 1, R18765 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R18827 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R18829 += 1, R18784 += 1, R18785 += 1 };
  s0 -> s0 [0, 65535] { R18828 += 1, R18829 += 1 };
  s0 -> s2 [0, 65535] { R18829 += 1, R18785 += 1, R18 += 1 };
  s1 -> s1 [0, 65535] { R18829 += 1, R18784 += 1, R18785 += 1 };
  s1 -> s2 [0, 65535] { R18829 += 1, R18785 += 1, R18 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R18829 += 1 };
  s2 -> s2 [0, 65535] { R18829 += 1, R18785 += 1, R18 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R18829 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 75] { R18831 += 1, R18787 += 1 };
  s0 -> s0 [0, 65535] { R18830 += 1, R18831 += 1 };
  s0 -> s2 [0, 65535] { R18831 += 1, R18786 += 1, R18787 += 1 };
  s0 -> s3 [76, 76] { R18831 += 1, R18787 += 1 };
  s0 -> s4 [76, 76] { R18831 += 1, R18787 += 1 };
  s0 -> s5 [87, 87] { R18831 += 1, R18787 += 1 };
  s0 -> s1 [88, 65535] { R18831 += 1, R18787 += 1 };
  s1 -> s1 [0, 75] { R18831 += 1, R18787 += 1 };
  s1 -> s3 [76, 76] { R18831 += 1, R18787 += 1 };
  s1 -> s4 [76, 76] { R18831 += 1, R18787 += 1 };
  s1 -> s5 [87, 87] { R18831 += 1, R18787 += 1 };
  s1 -> s1 [88, 65535] { R18831 += 1, R18787 += 1 };
  s2 -> s1 [0, 75] { R18831 += 1, R18787 += 1 };
  s2 -> s2 [0, 65535] { R18831 += 1, R18786 += 1, R18787 += 1 };
  s2 -> s3 [76, 76] { R18831 += 1, R18787 += 1 };
  s2 -> s4 [76, 76] { R18831 += 1, R18787 += 1 };
  s2 -> s5 [87, 87] { R18831 += 1, R18787 += 1 };
  s2 -> s1 [88, 65535] { R18831 += 1, R18787 += 1 };
  s4 -> s4 [0, 76] { R18831 += 1, R18787 += 1 };
  s4 -> s7 [87, 87] { R18831 += 1, R18787 += 1 };
  s4 -> s4 [88, 65535] { R18831 += 1, R18787 += 1 };
  s5 -> s5 [0, 75] { R18831 += 1, R18787 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R18831 += 1 };
  s5 -> s7 [76, 76] { R18831 += 1, R18787 += 1 };
  s5 -> s8 [76, 76] { R18831 += 1, R18787 += 1 };
  s5 -> s5 [87, 65535] { R18831 += 1, R18787 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 76] { R18831 += 1, R18787 += 1 };
  s7 -> s7 [0, 65535] { R18831 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [87, 65535] { R18831 += 1, R18787 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R18831 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 75] { R18833 += 1, R18789 += 1, R66 += 1 };
  s0 -> s2 [0, 65535] { R18833 += 1, R18788 += 1, R18789 += 1 };
  s0 -> s0 [0, 65535] { R18832 += 1, R18833 += 1 };
  s0 -> s3 [76, 76] { R18833 += 1, R18789 += 1, R66 += 1 };
  s0 -> s4 [76, 76] { R18833 += 1, R18789 += 1, R66 += 1 };
  s0 -> s1 [77, 65535] { R18833 += 1, R18789 += 1, R66 += 1 };
  s1 -> s1 [0, 75] { R18833 += 1, R18789 += 1, R66 += 1 };
  s1 -> s1 [0, 65535] { R18833 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [76, 76] { R18833 += 1, R18789 += 1, R66 += 1 };
  s1 -> s4 [76, 76] { R18833 += 1, R18789 += 1, R66 += 1 };
  s1 -> s1 [77, 65535] { R18833 += 1, R18789 += 1, R66 += 1 };
  s2 -> s1 [0, 75] { R18833 += 1, R18789 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R18833 += 1, R18788 += 1, R18789 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [76, 76] { R18833 += 1, R18789 += 1, R66 += 1 };
  s2 -> s4 [76, 76] { R18833 += 1, R18789 += 1, R66 += 1 };
  s2 -> s1 [77, 65535] { R18833 += 1, R18789 += 1, R66 += 1 };
  s3 -> s6 [0, 65535] { R18833 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R18833 += 1, R18789 += 1, R66 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R18833 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R18833 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 75] { R18835 += 1, R18791 += 1, R68 += 1 };
  s0 -> s2 [0, 65535] { R18835 += 1, R18790 += 1, R18791 += 1 };
  s0 -> s0 [0, 65535] { R18834 += 1, R18835 += 1 };
  s0 -> s3 [76, 76] { R18835 += 1, R18791 += 1, R68 += 1 };
  s0 -> s4 [76, 76] { R18835 += 1, R18791 += 1, R68 += 1 };
  s0 -> s1 [77, 65535] { R18835 += 1, R18791 += 1, R68 += 1 };
  s1 -> s1 [0, 75] { R18835 += 1, R18791 += 1, R68 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R18835 += 1 };
  s1 -> s3 [76, 76] { R18835 += 1, R18791 += 1, R68 += 1 };
  s1 -> s4 [76, 76] { R18835 += 1, R18791 += 1, R68 += 1 };
  s1 -> s1 [77, 65535] { R18835 += 1, R18791 += 1, R68 += 1 };
  s2 -> s1 [0, 75] { R18835 += 1, R18791 += 1, R68 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R18835 += 1, R18790 += 1, R18791 += 1 };
  s2 -> s3 [76, 76] { R18835 += 1, R18791 += 1, R68 += 1 };
  s2 -> s4 [76, 76] { R18835 += 1, R18791 += 1, R68 += 1 };
  s2 -> s1 [77, 65535] { R18835 += 1, R18791 += 1, R68 += 1 };
  s3 -> s3 [0, 65535] { R18835 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R18835 += 1, R18791 += 1, R68 += 1 };
  s4 -> s6 [0, 65535] { R18835 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R18835 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 75] { R18837 += 1, R18793 += 1, R11523 += 1 };
  s0 -> s2 [0, 75] { R18837 += 1, R18793 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s0 [0, 65535] { R18836 += 1, R18837 += 1 };
  s0 -> s3 [0, 65535] { R18837 += 1, R18792 += 1, R18793 += 1 };
  s0 -> s4 [76, 76] { R18837 += 1, R18793 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s5 [76, 76] { R18837 += 1, R18793 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s6 [76, 76] { R18837 += 1, R18793 += 1, R11523 += 1 };
  s0 -> s7 [76, 76] { R18837 += 1, R18793 += 1, R11523 += 1 };
  s0 -> s1 [77, 86] { R18837 += 1, R18793 += 1, R11523 += 1 };
  s0 -> s2 [77, 65535] { R18837 += 1, R18793 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s1 [88, 65535] { R18837 += 1, R18793 += 1, R11523 += 1 };
  s1 -> s1 [0, 75] { R18837 += 1, R18793 += 1, R11523 += 1 };
  s1 -> s1 [0, 65535] { R18837 += 1 };
  s1 -> s9 [0, 65535];
  s1 -> s6 [76, 76] { R18837 += 1, R18793 += 1 };
  s1 -> s7 [76, 76] { R18837 += 1, R18793 += 1 };
  s1 -> s1 [77, 86] { R18837 += 1, R18793 += 1, R11523 += 1 };
  s1 -> s1 [77, 65535] { R18837 += 1, R18793 += 1 };
  s1 -> s1 [88, 65535] { R18837 += 1, R18793 += 1, R11523 += 1 };
  s2 -> s1 [0, 75] { R18837 += 1, R18793 += 1, R11523 += 1 };
  s2 -> s2 [0, 75] { R18837 += 1, R18793 += 1, R11522 += 1, R11523 += 1 };
  s2 -> s4 [76, 76] { R18837 += 1, R18793 += 1, R11522 += 1, R11523 += 1 };
  s2 -> s5 [76, 76] { R18837 += 1, R18793 += 1, R11522 += 1, R11523 += 1 };
  s2 -> s6 [76, 76] { R18837 += 1, R18793 += 1, R11523 += 1 };
  s2 -> s7 [76, 76] { R18837 += 1, R18793 += 1, R11523 += 1 };
  s2 -> s1 [77, 86] { R18837 += 1, R18793 += 1, R11523 += 1 };
  s2 -> s2 [77, 65535] { R18837 += 1, R18793 += 1, R11522 += 1, R11523 += 1 };
  s2 -> s1 [88, 65535] { R18837 += 1, R18793 += 1, R11523 += 1 };
  s3 -> s1 [0, 75] { R18837 += 1, R18793 += 1, R11523 += 1 };
  s3 -> s2 [0, 75] { R18837 += 1, R18793 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s3 [0, 65535] { R18837 += 1, R18792 += 1, R18793 += 1 };
  s3 -> s4 [76, 76] { R18837 += 1, R18793 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s5 [76, 76] { R18837 += 1, R18793 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s6 [76, 76] { R18837 += 1, R18793 += 1, R11523 += 1 };
  s3 -> s7 [76, 76] { R18837 += 1, R18793 += 1, R11523 += 1 };
  s3 -> s1 [77, 86] { R18837 += 1, R18793 += 1, R11523 += 1 };
  s3 -> s2 [77, 65535] { R18837 += 1, R18793 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s1 [88, 65535] { R18837 += 1, R18793 += 1, R11523 += 1 };
  s5 -> s7 [0, 86] { R18837 += 1, R18793 += 1, R11523 += 1 };
  s5 -> s5 [0, 65535] { R18837 += 1, R18793 += 1, R11522 += 1, R11523 += 1 };
  s5 -> s7 [88, 65535] { R18837 += 1, R18793 += 1, R11523 += 1 };
  s6 -> s6 [0, 65535] { R18837 += 1 };
  s6 -> s9 [0, 65535];
  s7 -> s7 [0, 86] { R18837 += 1, R18793 += 1, R11523 += 1 };
  s7 -> s7 [0, 65535] { R18837 += 1, R18793 += 1 };
  s7 -> s8 [0, 65535] { R18837 += 1 };
  s7 -> s9 [0, 65535];
  s7 -> s7 [88, 65535] { R18837 += 1, R18793 += 1, R11523 += 1 };
  s8 -> s8 [0, 65535] { R18837 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s8, s9, s6, s1, s7;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 75] { R18839 += 1, R18795 += 1, R15342 += 1, R15343 += 1 };
  s0 -> s2 [0, 75] { R18839 += 1, R18795 += 1, R15343 += 1, R15344 += 1 };
  s0 -> s0 [0, 65535] { R18838 += 1, R18839 += 1 };
  s0 -> s3 [0, 65535] { R18839 += 1, R18794 += 1, R18795 += 1 };
  s0 -> s4 [76, 76] { R18839 += 1, R18795 += 1, R15342 += 1, R15343 += 1 };
  s0 -> s5 [76, 76] { R18839 += 1, R18795 += 1, R15342 += 1, R15343 += 1 };
  s0 -> s6 [76, 76] { R18839 += 1, R18795 += 1, R15343 += 1, R15344 += 1 };
  s0 -> s7 [76, 76] { R18839 += 1, R18795 += 1, R15343 += 1, R15344 += 1 };
  s0 -> s1 [77, 65535] { R18839 += 1, R18795 += 1, R15342 += 1, R15343 += 1 };
  s0 -> s2 [77, 65535] { R18839 += 1, R18795 += 1, R15343 += 1, R15344 += 1 };
  s1 -> s1 [0, 75] { R18839 += 1, R18795 += 1, R15342 += 1, R15343 += 1 };
  s1 -> s2 [0, 75] { R18839 += 1, R18795 += 1, R15343 += 1, R15344 += 1 };
  s1 -> s4 [76, 76] { R18839 += 1, R18795 += 1, R15342 += 1, R15343 += 1 };
  s1 -> s5 [76, 76] { R18839 += 1, R18795 += 1, R15342 += 1, R15343 += 1 };
  s1 -> s6 [76, 76] { R18839 += 1, R18795 += 1, R15343 += 1, R15344 += 1 };
  s1 -> s7 [76, 76] { R18839 += 1, R18795 += 1, R15343 += 1, R15344 += 1 };
  s1 -> s1 [77, 65535] { R18839 += 1, R18795 += 1, R15342 += 1, R15343 += 1 };
  s1 -> s2 [77, 65535] { R18839 += 1, R18795 += 1, R15343 += 1, R15344 += 1 };
  s2 -> s2 [0, 75] { R18839 += 1, R18795 += 1, R15343 += 1, R15344 += 1 };
  s2 -> s2 [0, 65535] { R18839 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s6 [76, 76] { R18839 += 1, R18795 += 1, R15343 += 1, R15344 += 1 };
  s2 -> s7 [76, 76] { R18839 += 1, R18795 += 1, R15343 += 1, R15344 += 1 };
  s2 -> s2 [77, 65535] { R18839 += 1, R18795 += 1, R15343 += 1, R15344 += 1 };
  s3 -> s1 [0, 75] { R18839 += 1, R18795 += 1, R15342 += 1, R15343 += 1 };
  s3 -> s2 [0, 75] { R18839 += 1, R18795 += 1, R15343 += 1, R15344 += 1 };
  s3 -> s3 [0, 65535] { R18839 += 1, R18794 += 1, R18795 += 1 };
  s3 -> s4 [76, 76] { R18839 += 1, R18795 += 1, R15342 += 1, R15343 += 1 };
  s3 -> s5 [76, 76] { R18839 += 1, R18795 += 1, R15342 += 1, R15343 += 1 };
  s3 -> s6 [76, 76] { R18839 += 1, R18795 += 1, R15343 += 1, R15344 += 1 };
  s3 -> s7 [76, 76] { R18839 += 1, R18795 += 1, R15343 += 1, R15344 += 1 };
  s3 -> s1 [77, 65535] { R18839 += 1, R18795 += 1, R15342 += 1, R15343 += 1 };
  s3 -> s2 [77, 65535] { R18839 += 1, R18795 += 1, R15343 += 1, R15344 += 1 };
  s5 -> s5 [0, 65535] { R18839 += 1, R18795 += 1, R15342 += 1, R15343 += 1 };
  s5 -> s6 [0, 65535] { R18839 += 1, R18795 += 1, R15343 += 1, R15344 += 1 };
  s6 -> s9 [0, 65535] { R18839 += 1 };
  s6 -> s6 [0, 65535] { R18839 += 1, R18795 += 1, R15343 += 1, R15344 += 1 };
  s6 -> s8 [0, 65535];
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R18839 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R18839 += 1 };
  s9 -> s8 [0, 65535];
  accepting s8, s2, s9, s6, s7;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 75] { R18841 += 1, R18797 += 1, R17888 += 1, R17889 += 1 };
  s0 -> s2 [0, 65535] { R18841 += 1, R18796 += 1, R18797 += 1 };
  s0 -> s0 [0, 65535] { R18840 += 1, R18841 += 1 };
  s0 -> s3 [76, 76] { R18841 += 1, R18797 += 1, R17888 += 1, R17889 += 1 };
  s0 -> s4 [76, 76] { R18841 += 1, R18797 += 1, R17888 += 1, R17889 += 1 };
  s0 -> s1 [77, 65535] { R18841 += 1, R18797 += 1, R17888 += 1, R17889 += 1 };
  s1 -> s1 [0, 75] { R18841 += 1, R18797 += 1, R17888 += 1, R17889 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R18841 += 1 };
  s1 -> s3 [76, 76] { R18841 += 1, R18797 += 1, R17888 += 1, R17889 += 1 };
  s1 -> s4 [76, 76] { R18841 += 1, R18797 += 1, R17888 += 1, R17889 += 1 };
  s1 -> s1 [77, 65535] { R18841 += 1, R18797 += 1, R17888 += 1, R17889 += 1 };
  s2 -> s1 [0, 75] { R18841 += 1, R18797 += 1, R17888 += 1, R17889 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R18841 += 1, R18796 += 1, R18797 += 1 };
  s2 -> s3 [76, 76] { R18841 += 1, R18797 += 1, R17888 += 1, R17889 += 1 };
  s2 -> s4 [76, 76] { R18841 += 1, R18797 += 1, R17888 += 1, R17889 += 1 };
  s2 -> s1 [77, 65535] { R18841 += 1, R18797 += 1, R17888 += 1, R17889 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R18841 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R18841 += 1 };
  s4 -> s4 [0, 65535] { R18841 += 1, R18797 += 1, R17888 += 1, R17889 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R18841 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 75] { R18843 += 1, R18799 += 1, R18736 += 1, R18737 += 1 };
  s0 -> s2 [0, 75] { R18843 += 1, R18799 += 1, R18737 += 1, R18738 += 1 };
  s0 -> s3 [0, 65535] { R18843 += 1, R18798 += 1, R18799 += 1 };
  s0 -> s0 [0, 65535] { R18842 += 1, R18843 += 1 };
  s0 -> s4 [76, 76] { R18843 += 1, R18799 += 1, R18736 += 1, R18737 += 1 };
  s0 -> s5 [76, 76] { R18843 += 1, R18799 += 1, R18737 += 1, R18738 += 1 };
  s0 -> s6 [76, 76] { R18843 += 1, R18799 += 1, R18736 += 1, R18737 += 1 };
  s0 -> s7 [76, 76] { R18843 += 1, R18799 += 1, R18737 += 1, R18738 += 1 };
  s0 -> s1 [77, 65535] { R18843 += 1, R18799 += 1, R18736 += 1, R18737 += 1 };
  s0 -> s2 [77, 65535] { R18843 += 1, R18799 += 1, R18737 += 1, R18738 += 1 };
  s1 -> s1 [0, 75] { R18843 += 1, R18799 += 1, R18736 += 1, R18737 += 1 };
  s1 -> s2 [0, 75] { R18843 += 1, R18799 += 1, R18737 += 1, R18738 += 1 };
  s1 -> s4 [76, 76] { R18843 += 1, R18799 += 1, R18736 += 1, R18737 += 1 };
  s1 -> s5 [76, 76] { R18843 += 1, R18799 += 1, R18737 += 1, R18738 += 1 };
  s1 -> s6 [76, 76] { R18843 += 1, R18799 += 1, R18736 += 1, R18737 += 1 };
  s1 -> s7 [76, 76] { R18843 += 1, R18799 += 1, R18737 += 1, R18738 += 1 };
  s1 -> s1 [77, 65535] { R18843 += 1, R18799 += 1, R18736 += 1, R18737 += 1 };
  s1 -> s2 [77, 65535] { R18843 += 1, R18799 += 1, R18737 += 1, R18738 += 1 };
  s2 -> s11 [0, 75] { R18843 += 1, R18799 += 1 };
  s2 -> s2 [0, 75] { R18843 += 1, R18799 += 1, R18737 += 1, R18738 += 1 };
  s2 -> s5 [76, 76] { R18843 += 1, R18799 += 1, R18737 += 1, R18738 += 1 };
  s2 -> s12 [76, 76] { R18843 += 1, R18799 += 1 };
  s2 -> s7 [76, 76] { R18843 += 1, R18799 += 1, R18737 += 1, R18738 += 1 };
  s2 -> s8 [76, 76] { R18843 += 1, R18799 += 1 };
  s2 -> s11 [77, 65535] { R18843 += 1, R18799 += 1 };
  s2 -> s2 [77, 65535] { R18843 += 1, R18799 += 1, R18737 += 1, R18738 += 1 };
  s3 -> s1 [0, 75] { R18843 += 1, R18799 += 1, R18736 += 1, R18737 += 1 };
  s3 -> s2 [0, 75] { R18843 += 1, R18799 += 1, R18737 += 1, R18738 += 1 };
  s3 -> s3 [0, 65535] { R18843 += 1, R18798 += 1, R18799 += 1 };
  s3 -> s4 [76, 76] { R18843 += 1, R18799 += 1, R18736 += 1, R18737 += 1 };
  s3 -> s5 [76, 76] { R18843 += 1, R18799 += 1, R18737 += 1, R18738 += 1 };
  s3 -> s6 [76, 76] { R18843 += 1, R18799 += 1, R18736 += 1, R18737 += 1 };
  s3 -> s7 [76, 76] { R18843 += 1, R18799 += 1, R18737 += 1, R18738 += 1 };
  s3 -> s1 [77, 65535] { R18843 += 1, R18799 += 1, R18736 += 1, R18737 += 1 };
  s3 -> s2 [77, 65535] { R18843 += 1, R18799 += 1, R18737 += 1, R18738 += 1 };
  s6 -> s6 [0, 65535] { R18843 += 1, R18799 += 1, R18736 += 1, R18737 += 1 };
  s6 -> s7 [0, 65535] { R18843 += 1, R18799 += 1, R18737 += 1, R18738 += 1 };
  s7 -> s7 [0, 65535] { R18843 += 1, R18799 += 1, R18737 += 1, R18738 += 1 };
  s7 -> s8 [0, 65535] { R18843 += 1, R18799 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [0, 65535] { R18843 += 1 };
  s8 -> s8 [0, 65535] { R18843 += 1, R18799 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R18843 += 1 };
  s11 -> s11 [0, 75] { R18843 += 1, R18799 += 1 };
  s11 -> s11 [0, 65535] { R18843 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s12 [76, 76] { R18843 += 1, R18799 += 1 };
  s11 -> s8 [76, 76] { R18843 += 1, R18799 += 1 };
  s11 -> s11 [77, 65535] { R18843 += 1, R18799 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R18843 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 75] { R18845 += 1, R18801 += 1, R18742 += 1, R18743 += 1 };
  s0 -> s2 [0, 65535] { R18845 += 1, R18800 += 1, R18801 += 1 };
  s0 -> s0 [0, 65535] { R18844 += 1, R18845 += 1 };
  s0 -> s3 [76, 76] { R18845 += 1, R18801 += 1, R18742 += 1, R18743 += 1 };
  s0 -> s4 [76, 76] { R18845 += 1, R18801 += 1, R18742 += 1, R18743 += 1 };
  s0 -> s1 [77, 65535] { R18845 += 1, R18801 += 1, R18742 += 1, R18743 += 1 };
  s1 -> s1 [0, 75] { R18845 += 1, R18801 += 1, R18742 += 1, R18743 += 1 };
  s1 -> s1 [0, 65535] { R18845 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [76, 76] { R18845 += 1, R18801 += 1, R18742 += 1, R18743 += 1 };
  s1 -> s4 [76, 76] { R18845 += 1, R18801 += 1, R18742 += 1, R18743 += 1 };
  s1 -> s1 [77, 65535] { R18845 += 1, R18801 += 1, R18742 += 1, R18743 += 1 };
  s2 -> s1 [0, 75] { R18845 += 1, R18801 += 1, R18742 += 1, R18743 += 1 };
  s2 -> s2 [0, 65535] { R18845 += 1, R18800 += 1, R18801 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [76, 76] { R18845 += 1, R18801 += 1, R18742 += 1, R18743 += 1 };
  s2 -> s4 [76, 76] { R18845 += 1, R18801 += 1, R18742 += 1, R18743 += 1 };
  s2 -> s1 [77, 65535] { R18845 += 1, R18801 += 1, R18742 += 1, R18743 += 1 };
  s3 -> s3 [0, 65535] { R18845 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R18845 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R18845 += 1, R18801 += 1, R18742 += 1, R18743 += 1 };
  s5 -> s5 [0, 65535] { R18845 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
synchronised {  // Automata constraining P63
automaton P63_0 {
  init s0;
  s0 -> s1 [119, 119];
  accepting s1;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [108, 108];
  accepting s1;
};
};
constraint R1 = R18761 && R2 = R18845 && R20 - R18845 = -1 && R21 = R18845 && R22 - R18845 = -1 && R23 = R18845 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R17891 + -1*R17889 - R53 = 0 && R52 + R17890 + R17888 = 0 && R18760 = 0 && R18786 = 0 && R18787 = 0 && R18792 = 0 && R18793 = 0 && R18794 = 0 && R18795 = 0 && R18798 = 0 && R18799 = 0 && R18802 = 0 && R18803 = R18845 && R18804 = 0 && R18805 = R18845 && R18806 = 0 && R18807 = R18845 && R18808 = 0 && R18809 = R18845 && R18810 = 0 && R18811 = R18845 && R18812 = 0 && R18813 = R18845 && R18814 = 0 && R18815 = R18845 && R18816 = 0 && R18817 = R18845 && R18818 = 0 && R18819 = R18845 && R18820 = 0 && R18821 = R18845 && R18822 = 0 && R18823 = R18845 && R18824 = 0 && R18825 = R18845 && R18826 = 0 && R18827 = R18845 && R18828 = 0 && R18829 = R18845 && R18830 = 0 && R18831 = R18845 && R18832 = 0 && R18833 = R18845 && R18834 = 0 && R18835 = R18845 && R18836 = 0 && R18837 = R18845 && R18838 = 0 && R18839 = R18845 && R18840 = 0 && R18841 = R18845 && R18842 = 0 && R18843 = R18845 && R18844 = 0 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R17891 + -1*R17889 - R53 < 1 && -1 < R18761 && 0 < R18845 && (R48 + R15347 + R15344 != 0 || ((R42 + R11524 + R11522 != 0 || R43 + R11525 + R11523 + -1*R17891 + -1*R17889 - R53 = 0 || R53 + R17891 + R17889 < 1) && (R42 + R11524 + R11522 = 0 || R53 + R17891 + R17889 < 1))) && (R48 + R15347 + R15344 != 0 || ((R46 + R15345 + R15342 != 0 || R47 + R15346 + R15343 + -1*R17891 + -1*R17889 - R53 = 0 || R53 + R17891 + R17889 < 1) && (R46 + R15345 + R15342 = 0 || R53 + R17891 + R17889 < 1))) && (R18746 != 0 || R18747 = R18761 || (R17 = 0 && R18761 = 0)) && (R18748 != 0 || R18749 = R18761 || (R17 = 0 && R18761 = 0)) && (R18750 != 0 || R18751 = R18761 || (R17 = 0 && R18761 = 0)) && (R18752 != 0 || R18753 = R18761 || (R17 = 0 && R18761 = 0)) && (R18754 != 0 || R18755 = R18761 || (R17 = 0 && R18761 = 0)) && (R18756 != 0 || R18757 = R18761 || (R17 = 0 && R18761 = 0)) && (R18758 != 0 || R18759 = R18761 || (R17 = 0 && R18761 = 0)) && (R18762 != 0 || R18761 = R18763 || (R17 = 0 && R18761 = 0)) && (R18764 != 0 || R18761 = R18765 || (R17 = 0 && R18761 = 0)) && (R18 = 0 || (R18784 = 0 && R18785 = 0)) && (R18 = 0 || (R18788 = 0 && R18789 = 0)) && (R18 = 0 || (R18790 = 0 && R18791 = 0)) && (R18 = 0 || (R18796 = 0 && R18797 = 0)) && (R18 = 0 || (R18800 = 0 && R18801 = 0)) && (R19 = 0 || (R18766 = 0 && R18767 = 0)) && (R19 = 0 || (R18768 = 0 && R18769 = 0)) && (R19 = 0 || (R18770 = 0 && R18771 = 0)) && (R19 = 0 || (R18772 = 0 && R18773 = 0)) && (R19 = 0 || (R18774 = 0 && R18775 = 0)) && (R19 = 0 || (R18776 = 0 && R18777 = 0)) && (R19 = 0 || (R18778 = 0 && R18779 = 0)) && (R19 = 0 || (R18780 = 0 && R18781 = 0)) && (R19 = 0 || (R18782 = 0 && R18783 = 0)) && (R48 + R15347 + R15344 = 0 || (R42 + R11524 + R11522 = 0 && R43 + R11525 + R11523 + -1*R17891 + -1*R17889 - R53 = 0)) && (R48 + R15347 + R15344 = 0 || (R46 + R15345 + R15342 = 0 && R47 + R15346 + R15343 + -1*R17891 + -1*R17889 - R53 = 0)) && (R58 + R18741 + R18738 = 0 || (R56 + R18739 + R18736 = 0 && R57 + R18740 + R18737 = 0)) && (R58 + R18741 + R18738 = 0 || (R62 + R18744 + R18742 = 0 && R63 + R18745 + R18743 = 0)) && (R18746 = 0 || (R17 = 0 && R18761 = 0)) && (R18748 = 0 || (R17 = 0 && R18761 = 0)) && (R18750 = 0 || (R17 = 0 && R18761 = 0)) && (R18752 = 0 || (R17 = 0 && R18761 = 0)) && (R18754 = 0 || (R17 = 0 && R18761 = 0)) && (R18756 = 0 || (R17 = 0 && R18761 = 0)) && (R18758 = 0 || (R17 = 0 && R18761 = 0)) && (R18762 = 0 || (R17 = 0 && R18761 = 0)) && (R18764 = 0 || (R17 = 0 && R18761 = 0));
// End of Parikh automata intersection problem
