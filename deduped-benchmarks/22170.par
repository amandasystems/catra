// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R11522, R11523, R11524, R11525, R11526, R11527, R11528, R11529, R11530, R11531, R12, R12802, R12803, R12804, R12805, R13650, R13651, R13652, R13653, R13654, R13655, R13968, R13969, R13970, R13971, R13972, R13973, R13974, R13975, R13976, R13977, R13978, R13979, R13980, R13981, R13982, R13983, R13984, R13985, R13986, R13987, R13988, R13989, R13990, R13991, R13992, R13993, R13994, R13995, R13996, R13997, R13998, R13999, R14000, R14001, R14002, R14003, R14004, R14005, R14006, R14007, R14008, R14009, R14010, R14011, R14012, R14013, R14014, R14015, R14016, R14017, R14018, R14019, R14020, R14021, R14022, R14023, R14024, R14025, R14026, R14027, R14028, R14029, R14030, R14031, R14032, R14033, R14034, R14035, R14036, R14037, R14038, R14039, R14040, R14041, R14042, R14043, R14044, R14045, R14046, R14047, R14048, R14049, R14050, R14051, R14052, R14053, R14054, R14055, R14056, R14057, R14058, R14059, R14060, R14061, R14062, R14063, R14064, R14065, R14066, R14067, R14068, R14069, R14070, R14071, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [81, 81];
  s0 -> s0 [82, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [81, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 80];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [81, 81];
  s0 -> s1 [82, 65535];
  s1 -> s1 [0, 80];
  s1 -> s2 [81, 81];
  s1 -> s1 [82, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R21 += 1 };
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R25 += 1 };
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R13992 += 1, R13993 += 1 };
  s0 -> s1 [0, 65535] { R13993 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R13993 += 1, R19 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 80] { R13995 += 1 };
  s0 -> s0 [0, 65535] { R13994 += 1, R13995 += 1 };
  s0 -> s2 [81, 81] { R13995 += 1 };
  s0 -> s3 [81, 81] { R13995 += 1 };
  s0 -> s1 [83, 65535] { R13995 += 1 };
  s1 -> s1 [0, 80] { R13995 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R13995 += 1 };
  s1 -> s3 [81, 81] { R13995 += 1 };
  s1 -> s1 [83, 65535] { R13995 += 1 };
  s2 -> s2 [0, 81] { R13995 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [83, 65535] { R13995 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 80] { R13997 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R13996 += 1, R13997 += 1 };
  s0 -> s2 [81, 81] { R13997 += 1, R38 += 1 };
  s0 -> s3 [81, 81] { R13997 += 1, R38 += 1 };
  s0 -> s1 [82, 65535] { R13997 += 1, R38 += 1 };
  s1 -> s1 [0, 80] { R13997 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R13997 += 1, R38 += 1 };
  s1 -> s3 [81, 81] { R13997 += 1, R38 += 1 };
  s1 -> s1 [82, 65535] { R13997 += 1, R38 += 1 };
  s2 -> s2 [0, 65535] { R13997 += 1, R38 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 80] { R13999 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R13998 += 1, R13999 += 1 };
  s0 -> s2 [81, 81] { R13999 += 1, R40 += 1 };
  s0 -> s3 [81, 81] { R13999 += 1, R40 += 1 };
  s0 -> s1 [82, 65535] { R13999 += 1, R40 += 1 };
  s1 -> s1 [0, 80] { R13999 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R13999 += 1, R40 += 1 };
  s1 -> s3 [81, 81] { R13999 += 1, R40 += 1 };
  s1 -> s1 [82, 65535] { R13999 += 1, R40 += 1 };
  s2 -> s2 [0, 65535] { R13999 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 80] { R14001 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R14000 += 1, R14001 += 1 };
  s0 -> s2 [81, 81] { R14001 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [81, 81] { R14001 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [82, 65535] { R14001 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 80] { R14001 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R14001 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [81, 81] { R14001 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [82, 65535] { R14001 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535] { R14001 += 1, R42 += 1, R43 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 80] { R14003 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R14002 += 1, R14003 += 1 };
  s0 -> s2 [81, 81] { R14003 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [81, 81] { R14003 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [82, 65535] { R14003 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 80] { R14003 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R14003 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [81, 81] { R14003 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [82, 65535] { R14003 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R14003 += 1, R46 += 1, R47 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 80] { R14005 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R14004 += 1, R14005 += 1 };
  s0 -> s2 [81, 81] { R14005 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [81, 81] { R14005 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [82, 65535] { R14005 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 80] { R14005 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R14005 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [81, 81] { R14005 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [82, 65535] { R14005 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R14005 += 1, R52 += 1, R53 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 80] { R14007 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R14006 += 1, R14007 += 1 };
  s0 -> s2 [81, 81] { R14007 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [81, 81] { R14007 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [82, 65535] { R14007 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 80] { R14007 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R14007 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [81, 81] { R14007 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [82, 65535] { R14007 += 1, R56 += 1, R57 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R14007 += 1, R56 += 1, R57 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 80] { R14009 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R14008 += 1, R14009 += 1 };
  s0 -> s2 [81, 81] { R14009 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [81, 81] { R14009 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [82, 65535] { R14009 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 80] { R14009 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R14009 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [81, 81] { R14009 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [82, 65535] { R14009 += 1, R62 += 1, R63 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R14009 += 1, R62 += 1, R63 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 80] { R14029 += 1 };
  s0 -> s0 [0, 65535] { R14028 += 1, R14029 += 1 };
  s0 -> s2 [81, 81] { R14029 += 1 };
  s0 -> s1 [82, 65535] { R14029 += 1 };
  s1 -> s1 [0, 80] { R14029 += 1 };
  s1 -> s2 [81, 81] { R14029 += 1 };
  s1 -> s1 [82, 65535] { R14029 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R14029 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R14031 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R14030 += 1, R14031 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R14031 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 80] { R14033 += 1 };
  s0 -> s0 [0, 65535] { R14032 += 1, R14033 += 1 };
  s0 -> s2 [0, 65535] { R14033 += 1, R8 += 1 };
  s0 -> s3 [81, 81] { R14033 += 1 };
  s0 -> s1 [82, 65535] { R14033 += 1 };
  s1 -> s1 [0, 80] { R14033 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [81, 81] { R14033 += 1 };
  s1 -> s1 [82, 65535] { R14033 += 1 };
  s2 -> s1 [0, 80] { R14033 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R14033 += 1, R8 += 1 };
  s2 -> s3 [81, 81] { R14033 += 1 };
  s2 -> s1 [82, 65535] { R14033 += 1 };
  s3 -> s3 [0, 65535] { R14033 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 80] { R14035 += 1, R13973 += 1 };
  s0 -> s0 [0, 65535] { R14034 += 1, R14035 += 1 };
  s0 -> s2 [0, 65535] { R14035 += 1, R13972 += 1, R13973 += 1 };
  s0 -> s1 [82, 65535] { R14035 += 1, R13973 += 1 };
  s1 -> s1 [0, 80] { R14035 += 1, R13973 += 1 };
  s1 -> s1 [0, 65535] { R14035 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [82, 65535] { R14035 += 1, R13973 += 1 };
  s2 -> s1 [0, 80] { R14035 += 1, R13973 += 1 };
  s2 -> s2 [0, 65535] { R14035 += 1, R13972 += 1, R13973 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [82, 65535] { R14035 += 1, R13973 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R14037 += 1, R13975 += 1, R17 += 1 };
  s0 -> s2 [0, 65535] { R14037 += 1, R13974 += 1, R13975 += 1 };
  s0 -> s0 [0, 65535] { R14036 += 1, R14037 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R14037 += 1, R13975 += 1, R17 += 1 };
  s1 -> s4 [0, 65535] { R14037 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R14037 += 1, R13975 += 1, R17 += 1 };
  s2 -> s2 [0, 65535] { R14037 += 1, R13974 += 1, R13975 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R14037 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 65535] { R14039 += 1, R13977 += 1 };
  s0 -> s2 [0, 65535] { R14039 += 1, R13976 += 1, R13977 += 1 };
  s0 -> s0 [0, 65535] { R14038 += 1, R14039 += 1 };
  s1 -> s1 [0, 65535] { R14039 += 1, R13977 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R14039 += 1 };
  s2 -> s1 [0, 65535] { R14039 += 1, R13977 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R14039 += 1, R13976 += 1, R13977 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R14039 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R14041 += 1, R13979 += 1, R67 += 1 };
  s0 -> s0 [0, 65535] { R14040 += 1, R14041 += 1 };
  s0 -> s2 [0, 65535] { R14041 += 1, R13978 += 1, R13979 += 1 };
  s1 -> s1 [0, 65535] { R14041 += 1, R13979 += 1, R67 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R14041 += 1 };
  s2 -> s1 [0, 65535] { R14041 += 1, R13979 += 1, R67 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R14041 += 1, R13978 += 1, R13979 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R14041 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 81] { R14043 += 1, R13981 += 1 };
  s0 -> s0 [0, 65535] { R14042 += 1, R14043 += 1 };
  s0 -> s2 [0, 65535] { R14043 += 1, R13980 += 1, R13981 += 1 };
  s0 -> s3 [0, 65535] { R14043 += 1, R13981 += 1, R69 += 1 };
  s0 -> s1 [83, 65535] { R14043 += 1, R13981 += 1 };
  s1 -> s1 [0, 81] { R14043 += 1, R13981 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R14043 += 1 };
  s1 -> s1 [83, 65535] { R14043 += 1, R13981 += 1 };
  s2 -> s1 [0, 81] { R14043 += 1, R13981 += 1 };
  s2 -> s2 [0, 65535] { R14043 += 1, R13980 += 1, R13981 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R14043 += 1, R13981 += 1, R69 += 1 };
  s2 -> s1 [83, 65535] { R14043 += 1, R13981 += 1 };
  s3 -> s1 [0, 81] { R14043 += 1, R13981 += 1 };
  s3 -> s4 [0, 65535] { R14043 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R14043 += 1, R13981 += 1, R69 += 1 };
  s3 -> s1 [83, 65535] { R14043 += 1, R13981 += 1 };
  s4 -> s4 [0, 65535] { R14043 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 81] { R14045 += 1, R13983 += 1, R11525 += 1 };
  s0 -> s0 [0, 65535] { R14044 += 1, R14045 += 1 };
  s0 -> s2 [0, 65535] { R14045 += 1, R13982 += 1, R13983 += 1 };
  s0 -> s1 [0, 65535] { R14045 += 1, R13983 += 1 };
  s0 -> s1 [83, 65535] { R14045 += 1, R13983 += 1, R11525 += 1 };
  s1 -> s1 [0, 81] { R14045 += 1, R13983 += 1, R11525 += 1 };
  s1 -> s1 [0, 65535] { R14045 += 1, R13983 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R14045 += 1 };
  s1 -> s1 [83, 65535] { R14045 += 1, R13983 += 1, R11525 += 1 };
  s2 -> s1 [0, 81] { R14045 += 1, R13983 += 1, R11525 += 1 };
  s2 -> s2 [0, 65535] { R14045 += 1, R13982 += 1, R13983 += 1 };
  s2 -> s1 [0, 65535] { R14045 += 1, R13983 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [83, 65535] { R14045 += 1, R13983 += 1, R11525 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R14045 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R14047 += 1, R13984 += 1, R13985 += 1 };
  s0 -> s0 [0, 65535] { R14046 += 1, R14047 += 1 };
  s0 -> s2 [0, 65535] { R14047 += 1, R13985 += 1, R11529 += 1, R11530 += 1 };
  s0 -> s3 [0, 65535] { R14047 += 1, R13985 += 1, R11530 += 1, R11531 += 1 };
  s1 -> s1 [0, 65535] { R14047 += 1, R13984 += 1, R13985 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R14047 += 1, R13985 += 1, R11529 += 1, R11530 += 1 };
  s1 -> s3 [0, 65535] { R14047 += 1, R13985 += 1, R11530 += 1, R11531 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R14047 += 1, R13985 += 1, R11529 += 1, R11530 += 1 };
  s2 -> s6 [0, 65535] { R14047 += 1 };
  s2 -> s3 [0, 65535] { R14047 += 1, R13985 += 1, R11530 += 1, R11531 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R14047 += 1, R13985 += 1 };
  s3 -> s6 [0, 65535] { R14047 += 1 };
  s3 -> s3 [0, 65535] { R14047 += 1, R13985 += 1, R11530 += 1, R11531 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R14047 += 1, R13985 += 1 };
  s5 -> s6 [0, 65535] { R14047 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R14047 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 82] { R14049 += 1, R13987 += 1, R12805 += 1 };
  s0 -> s2 [0, 65535] { R14049 += 1, R13986 += 1, R13987 += 1 };
  s0 -> s0 [0, 65535] { R14048 += 1, R14049 += 1 };
  s0 -> s3 [0, 65535] { R14049 += 1, R13987 += 1, R12804 += 1, R12805 += 1 };
  s0 -> s4 [89, 89] { R14049 += 1, R13987 += 1, R12805 += 1 };
  s0 -> s1 [90, 65535] { R14049 += 1, R13987 += 1, R12805 += 1 };
  s1 -> s1 [0, 82] { R14049 += 1, R13987 += 1, R12805 += 1 };
  s1 -> s4 [89, 89] { R14049 += 1, R13987 += 1, R12805 += 1 };
  s1 -> s1 [90, 65535] { R14049 += 1, R13987 += 1, R12805 += 1 };
  s2 -> s1 [0, 82] { R14049 += 1, R13987 += 1, R12805 += 1 };
  s2 -> s2 [0, 65535] { R14049 += 1, R13986 += 1, R13987 += 1 };
  s2 -> s3 [0, 65535] { R14049 += 1, R13987 += 1, R12804 += 1, R12805 += 1 };
  s2 -> s4 [89, 89] { R14049 += 1, R13987 += 1, R12805 += 1 };
  s2 -> s1 [90, 65535] { R14049 += 1, R13987 += 1, R12805 += 1 };
  s3 -> s1 [0, 82] { R14049 += 1, R13987 += 1, R12805 += 1 };
  s3 -> s3 [0, 65535] { R14049 += 1, R13987 += 1, R12804 += 1, R12805 += 1 };
  s3 -> s4 [89, 89] { R14049 += 1, R13987 += 1, R12805 += 1 };
  s3 -> s1 [90, 65535] { R14049 += 1, R13987 += 1, R12805 += 1 };
  s4 -> s4 [0, 82] { R14049 += 1, R13987 += 1, R12805 += 1 };
  s4 -> s5 [0, 65535] { R14049 += 1 };
  s4 -> s4 [0, 65535] { R14049 += 1, R13987 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [89, 65535] { R14049 += 1, R13987 += 1, R12805 += 1 };
  s5 -> s5 [0, 65535] { R14049 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s4, s5, s6;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R14051 += 1, R13989 += 1 };
  s0 -> s2 [0, 65535] { R14051 += 1, R13988 += 1, R13989 += 1 };
  s0 -> s0 [0, 65535] { R14050 += 1, R14051 += 1 };
  s1 -> s1 [0, 65535] { R14051 += 1, R13989 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R14051 += 1 };
  s2 -> s1 [0, 65535] { R14051 += 1, R13989 += 1 };
  s2 -> s2 [0, 65535] { R14051 += 1, R13988 += 1, R13989 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R14051 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 82] { R14053 += 1, R13991 += 1, R13971 += 1 };
  s0 -> s0 [0, 65535] { R14052 += 1, R14053 += 1 };
  s0 -> s1 [0, 65535] { R14053 += 1, R13991 += 1 };
  s0 -> s2 [0, 65535] { R14053 += 1, R13990 += 1, R13991 += 1 };
  s0 -> s1 [90, 65535] { R14053 += 1, R13991 += 1, R13971 += 1 };
  s1 -> s1 [0, 82] { R14053 += 1, R13991 += 1, R13971 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R14053 += 1, R13991 += 1 };
  s1 -> s4 [0, 65535] { R14053 += 1 };
  s1 -> s1 [90, 65535] { R14053 += 1, R13991 += 1, R13971 += 1 };
  s2 -> s1 [0, 82] { R14053 += 1, R13991 += 1, R13971 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R14053 += 1, R13991 += 1 };
  s2 -> s2 [0, 65535] { R14053 += 1, R13990 += 1, R13991 += 1 };
  s2 -> s1 [90, 65535] { R14053 += 1, R13991 += 1, R13971 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R14053 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s0 [0, 65535] { R14054 += 1, R14055 += 1 };
  s0 -> s1 [0, 65535] { R14055 += 1, R14010 += 1, R14011 += 1 };
  s0 -> s2 [0, 65535] { R14055 += 1, R14011 += 1, R18 += 1 };
  s1 -> s1 [0, 65535] { R14055 += 1, R14010 += 1, R14011 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R14055 += 1, R14011 += 1, R18 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R14055 += 1, R14011 += 1, R18 += 1 };
  s2 -> s4 [0, 65535] { R14055 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R14055 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 80] { R14057 += 1, R14013 += 1 };
  s0 -> s0 [0, 65535] { R14056 += 1, R14057 += 1 };
  s0 -> s2 [0, 65535] { R14057 += 1, R14012 += 1, R14013 += 1 };
  s0 -> s3 [81, 81] { R14057 += 1, R14013 += 1 };
  s0 -> s4 [81, 81] { R14057 += 1, R14013 += 1 };
  s0 -> s5 [82, 82] { R14057 += 1, R14013 += 1 };
  s0 -> s1 [83, 65535] { R14057 += 1, R14013 += 1 };
  s1 -> s1 [0, 80] { R14057 += 1, R14013 += 1 };
  s1 -> s3 [81, 81] { R14057 += 1, R14013 += 1 };
  s1 -> s4 [81, 81] { R14057 += 1, R14013 += 1 };
  s1 -> s5 [82, 82] { R14057 += 1, R14013 += 1 };
  s1 -> s1 [83, 65535] { R14057 += 1, R14013 += 1 };
  s2 -> s1 [0, 80] { R14057 += 1, R14013 += 1 };
  s2 -> s2 [0, 65535] { R14057 += 1, R14012 += 1, R14013 += 1 };
  s2 -> s3 [81, 81] { R14057 += 1, R14013 += 1 };
  s2 -> s4 [81, 81] { R14057 += 1, R14013 += 1 };
  s2 -> s5 [82, 82] { R14057 += 1, R14013 += 1 };
  s2 -> s1 [83, 65535] { R14057 += 1, R14013 += 1 };
  s4 -> s4 [0, 81] { R14057 += 1, R14013 += 1 };
  s4 -> s8 [82, 82] { R14057 += 1, R14013 += 1 };
  s4 -> s4 [83, 65535] { R14057 += 1, R14013 += 1 };
  s5 -> s5 [0, 80] { R14057 += 1, R14013 += 1 };
  s5 -> s5 [0, 65535] { R14057 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [81, 81] { R14057 += 1, R14013 += 1 };
  s5 -> s8 [81, 81] { R14057 += 1, R14013 += 1 };
  s5 -> s5 [82, 65535] { R14057 += 1, R14013 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R14057 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R14057 += 1, R14013 += 1 };
  s8 -> s9 [0, 65535] { R14057 += 1 };
  s8 -> s6 [0, 65535];
  s9 -> s9 [0, 65535] { R14057 += 1 };
  s9 -> s6 [0, 65535];
  accepting s8, s5, s9, s6, s7;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 80] { R14059 += 1, R14015 += 1, R66 += 1 };
  s0 -> s2 [0, 65535] { R14059 += 1, R14014 += 1, R14015 += 1 };
  s0 -> s0 [0, 65535] { R14058 += 1, R14059 += 1 };
  s0 -> s3 [81, 81] { R14059 += 1, R14015 += 1, R66 += 1 };
  s0 -> s4 [81, 81] { R14059 += 1, R14015 += 1, R66 += 1 };
  s0 -> s1 [82, 65535] { R14059 += 1, R14015 += 1, R66 += 1 };
  s1 -> s1 [0, 80] { R14059 += 1, R14015 += 1, R66 += 1 };
  s1 -> s1 [0, 65535] { R14059 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [81, 81] { R14059 += 1, R14015 += 1, R66 += 1 };
  s1 -> s4 [81, 81] { R14059 += 1, R14015 += 1, R66 += 1 };
  s1 -> s1 [82, 65535] { R14059 += 1, R14015 += 1, R66 += 1 };
  s2 -> s1 [0, 80] { R14059 += 1, R14015 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R14059 += 1, R14014 += 1, R14015 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [81, 81] { R14059 += 1, R14015 += 1, R66 += 1 };
  s2 -> s4 [81, 81] { R14059 += 1, R14015 += 1, R66 += 1 };
  s2 -> s1 [82, 65535] { R14059 += 1, R14015 += 1, R66 += 1 };
  s3 -> s3 [0, 65535] { R14059 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R14059 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R14059 += 1, R14015 += 1, R66 += 1 };
  s5 -> s5 [0, 65535] { R14059 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 80] { R14061 += 1, R14017 += 1, R68 += 1 };
  s0 -> s0 [0, 65535] { R14060 += 1, R14061 += 1 };
  s0 -> s2 [0, 65535] { R14061 += 1, R14016 += 1, R14017 += 1 };
  s0 -> s3 [81, 81] { R14061 += 1, R14017 += 1, R68 += 1 };
  s0 -> s4 [81, 81] { R14061 += 1, R14017 += 1, R68 += 1 };
  s0 -> s1 [82, 65535] { R14061 += 1, R14017 += 1, R68 += 1 };
  s1 -> s1 [0, 80] { R14061 += 1, R14017 += 1, R68 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R14061 += 1 };
  s1 -> s3 [81, 81] { R14061 += 1, R14017 += 1, R68 += 1 };
  s1 -> s4 [81, 81] { R14061 += 1, R14017 += 1, R68 += 1 };
  s1 -> s1 [82, 65535] { R14061 += 1, R14017 += 1, R68 += 1 };
  s2 -> s1 [0, 80] { R14061 += 1, R14017 += 1, R68 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R14061 += 1, R14016 += 1, R14017 += 1 };
  s2 -> s3 [81, 81] { R14061 += 1, R14017 += 1, R68 += 1 };
  s2 -> s4 [81, 81] { R14061 += 1, R14017 += 1, R68 += 1 };
  s2 -> s1 [82, 65535] { R14061 += 1, R14017 += 1, R68 += 1 };
  s3 -> s3 [0, 65535] { R14061 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R14061 += 1, R14017 += 1, R68 += 1 };
  s4 -> s6 [0, 65535] { R14061 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R14061 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 80] { R14063 += 1, R14019 += 1, R11523 += 1 };
  s0 -> s2 [0, 80] { R14063 += 1, R14019 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s0 [0, 65535] { R14062 += 1, R14063 += 1 };
  s0 -> s3 [0, 65535] { R14063 += 1, R14018 += 1, R14019 += 1 };
  s0 -> s4 [81, 81] { R14063 += 1, R14019 += 1, R11523 += 1 };
  s0 -> s5 [81, 81] { R14063 += 1, R14019 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s6 [81, 81] { R14063 += 1, R14019 += 1, R11523 += 1 };
  s0 -> s7 [81, 81] { R14063 += 1, R14019 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s2 [82, 65535] { R14063 += 1, R14019 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s1 [83, 65535] { R14063 += 1, R14019 += 1, R11523 += 1 };
  s1 -> s1 [0, 80] { R14063 += 1, R14019 += 1, R11523 += 1 };
  s1 -> s1 [0, 65535] { R14063 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s4 [81, 81] { R14063 += 1, R14019 += 1 };
  s1 -> s6 [81, 81] { R14063 += 1, R14019 += 1 };
  s1 -> s1 [82, 65535] { R14063 += 1, R14019 += 1 };
  s1 -> s1 [83, 65535] { R14063 += 1, R14019 += 1, R11523 += 1 };
  s2 -> s1 [0, 80] { R14063 += 1, R14019 += 1, R11523 += 1 };
  s2 -> s2 [0, 80] { R14063 += 1, R14019 += 1, R11522 += 1, R11523 += 1 };
  s2 -> s4 [81, 81] { R14063 += 1, R14019 += 1, R11523 += 1 };
  s2 -> s5 [81, 81] { R14063 += 1, R14019 += 1, R11522 += 1, R11523 += 1 };
  s2 -> s6 [81, 81] { R14063 += 1, R14019 += 1, R11523 += 1 };
  s2 -> s7 [81, 81] { R14063 += 1, R14019 += 1, R11522 += 1, R11523 += 1 };
  s2 -> s2 [82, 65535] { R14063 += 1, R14019 += 1, R11522 += 1, R11523 += 1 };
  s2 -> s1 [83, 65535] { R14063 += 1, R14019 += 1, R11523 += 1 };
  s3 -> s1 [0, 80] { R14063 += 1, R14019 += 1, R11523 += 1 };
  s3 -> s2 [0, 80] { R14063 += 1, R14019 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s3 [0, 65535] { R14063 += 1, R14018 += 1, R14019 += 1 };
  s3 -> s4 [81, 81] { R14063 += 1, R14019 += 1, R11523 += 1 };
  s3 -> s5 [81, 81] { R14063 += 1, R14019 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s6 [81, 81] { R14063 += 1, R14019 += 1, R11523 += 1 };
  s3 -> s7 [81, 81] { R14063 += 1, R14019 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s2 [82, 65535] { R14063 += 1, R14019 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s1 [83, 65535] { R14063 += 1, R14019 += 1, R11523 += 1 };
  s4 -> s4 [0, 65535] { R14063 += 1 };
  s4 -> s8 [0, 65535];
  s5 -> s6 [0, 81] { R14063 += 1, R14019 += 1, R11523 += 1 };
  s5 -> s5 [0, 65535] { R14063 += 1, R14019 += 1, R11522 += 1, R11523 += 1 };
  s5 -> s6 [83, 65535] { R14063 += 1, R14019 += 1, R11523 += 1 };
  s6 -> s6 [0, 81] { R14063 += 1, R14019 += 1, R11523 += 1 };
  s6 -> s6 [0, 65535] { R14063 += 1, R14019 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s9 [0, 65535] { R14063 += 1 };
  s6 -> s6 [83, 65535] { R14063 += 1, R14019 += 1, R11523 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R14063 += 1 };
  accepting s4, s8, s9, s6, s1;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 80] { R14065 += 1, R14021 += 1, R11526 += 1, R11527 += 1 };
  s0 -> s0 [0, 65535] { R14064 += 1, R14065 += 1 };
  s0 -> s2 [0, 65535] { R14065 += 1, R14020 += 1, R14021 += 1 };
  s0 -> s3 [81, 81] { R14065 += 1, R14021 += 1, R11526 += 1, R11527 += 1 };
  s0 -> s4 [81, 81] { R14065 += 1, R14021 += 1, R11526 += 1, R11527 += 1 };
  s0 -> s1 [82, 65535] { R14065 += 1, R14021 += 1, R11526 += 1, R11527 += 1 };
  s1 -> s1 [0, 80] { R14065 += 1, R14021 += 1, R11526 += 1, R11527 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R14065 += 1 };
  s1 -> s3 [81, 81] { R14065 += 1, R14021 += 1, R11526 += 1, R11527 += 1 };
  s1 -> s4 [81, 81] { R14065 += 1, R14021 += 1, R11526 += 1, R11527 += 1 };
  s1 -> s1 [82, 65535] { R14065 += 1, R14021 += 1, R11526 += 1, R11527 += 1 };
  s2 -> s1 [0, 80] { R14065 += 1, R14021 += 1, R11526 += 1, R11527 += 1 };
  s2 -> s2 [0, 65535] { R14065 += 1, R14020 += 1, R14021 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [81, 81] { R14065 += 1, R14021 += 1, R11526 += 1, R11527 += 1 };
  s2 -> s4 [81, 81] { R14065 += 1, R14021 += 1, R11526 += 1, R11527 += 1 };
  s2 -> s1 [82, 65535] { R14065 += 1, R14021 += 1, R11526 += 1, R11527 += 1 };
  s3 -> s3 [0, 65535] { R14065 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R14065 += 1, R14021 += 1, R11526 += 1, R11527 += 1 };
  s4 -> s6 [0, 65535] { R14065 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R14065 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 80] { R14067 += 1, R14023 += 1, R12802 += 1, R12803 += 1 };
  s0 -> s2 [0, 65535] { R14067 += 1, R14022 += 1, R14023 += 1 };
  s0 -> s0 [0, 65535] { R14066 += 1, R14067 += 1 };
  s0 -> s3 [81, 81] { R14067 += 1, R14023 += 1, R12802 += 1, R12803 += 1 };
  s0 -> s4 [81, 81] { R14067 += 1, R14023 += 1, R12802 += 1, R12803 += 1 };
  s0 -> s1 [82, 65535] { R14067 += 1, R14023 += 1, R12802 += 1, R12803 += 1 };
  s1 -> s1 [0, 80] { R14067 += 1, R14023 += 1, R12802 += 1, R12803 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R14067 += 1 };
  s1 -> s3 [81, 81] { R14067 += 1, R14023 += 1, R12802 += 1, R12803 += 1 };
  s1 -> s4 [81, 81] { R14067 += 1, R14023 += 1, R12802 += 1, R12803 += 1 };
  s1 -> s1 [82, 65535] { R14067 += 1, R14023 += 1, R12802 += 1, R12803 += 1 };
  s2 -> s1 [0, 80] { R14067 += 1, R14023 += 1, R12802 += 1, R12803 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R14067 += 1, R14022 += 1, R14023 += 1 };
  s2 -> s3 [81, 81] { R14067 += 1, R14023 += 1, R12802 += 1, R12803 += 1 };
  s2 -> s4 [81, 81] { R14067 += 1, R14023 += 1, R12802 += 1, R12803 += 1 };
  s2 -> s1 [82, 65535] { R14067 += 1, R14023 += 1, R12802 += 1, R12803 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R14067 += 1 };
  s3 -> s3 [0, 65535] { R14067 += 1, R14023 += 1, R12802 += 1, R12803 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R14067 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R14067 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 80] { R14069 += 1, R14025 += 1, R13651 += 1, R13652 += 1 };
  s0 -> s2 [0, 80] { R14069 += 1, R14025 += 1, R13650 += 1, R13651 += 1 };
  s0 -> s3 [0, 65535] { R14069 += 1, R14024 += 1, R14025 += 1 };
  s0 -> s0 [0, 65535] { R14068 += 1, R14069 += 1 };
  s0 -> s4 [81, 81] { R14069 += 1, R14025 += 1, R13650 += 1, R13651 += 1 };
  s0 -> s5 [81, 81] { R14069 += 1, R14025 += 1, R13650 += 1, R13651 += 1 };
  s0 -> s6 [81, 81] { R14069 += 1, R14025 += 1, R13651 += 1, R13652 += 1 };
  s0 -> s7 [81, 81] { R14069 += 1, R14025 += 1, R13651 += 1, R13652 += 1 };
  s0 -> s1 [82, 65535] { R14069 += 1, R14025 += 1, R13651 += 1, R13652 += 1 };
  s0 -> s2 [82, 65535] { R14069 += 1, R14025 += 1, R13650 += 1, R13651 += 1 };
  s1 -> s1 [0, 80] { R14069 += 1, R14025 += 1, R13651 += 1, R13652 += 1 };
  s1 -> s11 [0, 80] { R14069 += 1, R14025 += 1 };
  s1 -> s6 [81, 81] { R14069 += 1, R14025 += 1, R13651 += 1, R13652 += 1 };
  s1 -> s8 [81, 81] { R14069 += 1, R14025 += 1 };
  s1 -> s7 [81, 81] { R14069 += 1, R14025 += 1, R13651 += 1, R13652 += 1 };
  s1 -> s12 [81, 81] { R14069 += 1, R14025 += 1 };
  s1 -> s1 [82, 65535] { R14069 += 1, R14025 += 1, R13651 += 1, R13652 += 1 };
  s1 -> s11 [82, 65535] { R14069 += 1, R14025 += 1 };
  s2 -> s1 [0, 80] { R14069 += 1, R14025 += 1, R13651 += 1, R13652 += 1 };
  s2 -> s2 [0, 80] { R14069 += 1, R14025 += 1, R13650 += 1, R13651 += 1 };
  s2 -> s4 [81, 81] { R14069 += 1, R14025 += 1, R13650 += 1, R13651 += 1 };
  s2 -> s5 [81, 81] { R14069 += 1, R14025 += 1, R13650 += 1, R13651 += 1 };
  s2 -> s6 [81, 81] { R14069 += 1, R14025 += 1, R13651 += 1, R13652 += 1 };
  s2 -> s7 [81, 81] { R14069 += 1, R14025 += 1, R13651 += 1, R13652 += 1 };
  s2 -> s1 [82, 65535] { R14069 += 1, R14025 += 1, R13651 += 1, R13652 += 1 };
  s2 -> s2 [82, 65535] { R14069 += 1, R14025 += 1, R13650 += 1, R13651 += 1 };
  s3 -> s1 [0, 80] { R14069 += 1, R14025 += 1, R13651 += 1, R13652 += 1 };
  s3 -> s2 [0, 80] { R14069 += 1, R14025 += 1, R13650 += 1, R13651 += 1 };
  s3 -> s3 [0, 65535] { R14069 += 1, R14024 += 1, R14025 += 1 };
  s3 -> s4 [81, 81] { R14069 += 1, R14025 += 1, R13650 += 1, R13651 += 1 };
  s3 -> s5 [81, 81] { R14069 += 1, R14025 += 1, R13650 += 1, R13651 += 1 };
  s3 -> s6 [81, 81] { R14069 += 1, R14025 += 1, R13651 += 1, R13652 += 1 };
  s3 -> s7 [81, 81] { R14069 += 1, R14025 += 1, R13651 += 1, R13652 += 1 };
  s3 -> s1 [82, 65535] { R14069 += 1, R14025 += 1, R13651 += 1, R13652 += 1 };
  s3 -> s2 [82, 65535] { R14069 += 1, R14025 += 1, R13650 += 1, R13651 += 1 };
  s5 -> s5 [0, 65535] { R14069 += 1, R14025 += 1, R13650 += 1, R13651 += 1 };
  s5 -> s6 [0, 65535] { R14069 += 1, R14025 += 1, R13651 += 1, R13652 += 1 };
  s6 -> s6 [0, 65535] { R14069 += 1, R14025 += 1, R13651 += 1, R13652 += 1 };
  s6 -> s8 [0, 65535] { R14069 += 1, R14025 += 1 };
  s8 -> s9 [0, 65535] { R14069 += 1 };
  s8 -> s8 [0, 65535] { R14069 += 1, R14025 += 1 };
  s8 -> s10 [0, 65535];
  s9 -> s9 [0, 65535] { R14069 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s11 [0, 80] { R14069 += 1, R14025 += 1 };
  s11 -> s11 [0, 65535] { R14069 += 1 };
  s11 -> s10 [0, 65535];
  s11 -> s8 [81, 81] { R14069 += 1, R14025 += 1 };
  s11 -> s12 [81, 81] { R14069 += 1, R14025 += 1 };
  s11 -> s11 [82, 65535] { R14069 += 1, R14025 += 1 };
  s12 -> s10 [0, 65535];
  s12 -> s12 [0, 65535] { R14069 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 80] { R14071 += 1, R14027 += 1, R13969 += 1 };
  s0 -> s2 [0, 80] { R14071 += 1, R14027 += 1, R13968 += 1, R13969 += 1 };
  s0 -> s0 [0, 65535] { R14070 += 1, R14071 += 1 };
  s0 -> s3 [0, 65535] { R14071 += 1, R14026 += 1, R14027 += 1 };
  s0 -> s4 [81, 81] { R14071 += 1, R14027 += 1, R13968 += 1, R13969 += 1 };
  s0 -> s5 [81, 81] { R14071 += 1, R14027 += 1, R13969 += 1 };
  s0 -> s6 [81, 81] { R14071 += 1, R14027 += 1, R13968 += 1, R13969 += 1 };
  s0 -> s7 [81, 81] { R14071 += 1, R14027 += 1, R13969 += 1 };
  s0 -> s8 [82, 82] { R14071 += 1, R14027 += 1, R13969 += 1 };
  s0 -> s2 [82, 65535] { R14071 += 1, R14027 += 1, R13968 += 1, R13969 += 1 };
  s0 -> s1 [90, 65535] { R14071 += 1, R14027 += 1, R13969 += 1 };
  s1 -> s1 [0, 80] { R14071 += 1, R14027 += 1, R13969 += 1 };
  s1 -> s5 [81, 81] { R14071 += 1, R14027 += 1 };
  s1 -> s7 [81, 81] { R14071 += 1, R14027 += 1 };
  s1 -> s8 [82, 82] { R14071 += 1, R14027 += 1, R13969 += 1 };
  s1 -> s1 [82, 65535] { R14071 += 1, R14027 += 1 };
  s1 -> s1 [90, 65535] { R14071 += 1, R14027 += 1, R13969 += 1 };
  s2 -> s1 [0, 80] { R14071 += 1, R14027 += 1, R13969 += 1 };
  s2 -> s2 [0, 80] { R14071 += 1, R14027 += 1, R13968 += 1, R13969 += 1 };
  s2 -> s4 [81, 81] { R14071 += 1, R14027 += 1, R13968 += 1, R13969 += 1 };
  s2 -> s5 [81, 81] { R14071 += 1, R14027 += 1, R13969 += 1 };
  s2 -> s6 [81, 81] { R14071 += 1, R14027 += 1, R13968 += 1, R13969 += 1 };
  s2 -> s7 [81, 81] { R14071 += 1, R14027 += 1, R13969 += 1 };
  s2 -> s8 [82, 82] { R14071 += 1, R14027 += 1, R13969 += 1 };
  s2 -> s2 [82, 65535] { R14071 += 1, R14027 += 1, R13968 += 1, R13969 += 1 };
  s2 -> s1 [90, 65535] { R14071 += 1, R14027 += 1, R13969 += 1 };
  s3 -> s1 [0, 80] { R14071 += 1, R14027 += 1, R13969 += 1 };
  s3 -> s2 [0, 80] { R14071 += 1, R14027 += 1, R13968 += 1, R13969 += 1 };
  s3 -> s3 [0, 65535] { R14071 += 1, R14026 += 1, R14027 += 1 };
  s3 -> s4 [81, 81] { R14071 += 1, R14027 += 1, R13968 += 1, R13969 += 1 };
  s3 -> s5 [81, 81] { R14071 += 1, R14027 += 1, R13969 += 1 };
  s3 -> s6 [81, 81] { R14071 += 1, R14027 += 1, R13968 += 1, R13969 += 1 };
  s3 -> s7 [81, 81] { R14071 += 1, R14027 += 1, R13969 += 1 };
  s3 -> s8 [82, 82] { R14071 += 1, R14027 += 1, R13969 += 1 };
  s3 -> s2 [82, 65535] { R14071 += 1, R14027 += 1, R13968 += 1, R13969 += 1 };
  s3 -> s1 [90, 65535] { R14071 += 1, R14027 += 1, R13969 += 1 };
  s5 -> s5 [0, 81] { R14071 += 1, R14027 += 1, R13969 += 1 };
  s5 -> s5 [0, 65535] { R14071 += 1, R14027 += 1 };
  s5 -> s11 [82, 82] { R14071 += 1, R14027 += 1, R13969 += 1 };
  s5 -> s5 [90, 65535] { R14071 += 1, R14027 += 1, R13969 += 1 };
  s6 -> s5 [0, 81] { R14071 += 1, R14027 += 1, R13969 += 1 };
  s6 -> s6 [0, 65535] { R14071 += 1, R14027 += 1, R13968 += 1, R13969 += 1 };
  s6 -> s11 [82, 82] { R14071 += 1, R14027 += 1, R13969 += 1 };
  s6 -> s5 [90, 65535] { R14071 += 1, R14027 += 1, R13969 += 1 };
  s8 -> s8 [0, 80] { R14071 += 1, R14027 += 1, R13969 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R14071 += 1 };
  s8 -> s10 [81, 81] { R14071 += 1, R14027 += 1 };
  s8 -> s11 [81, 81] { R14071 += 1, R14027 += 1 };
  s8 -> s8 [82, 82] { R14071 += 1, R14027 += 1, R13969 += 1 };
  s8 -> s8 [82, 65535] { R14071 += 1, R14027 += 1 };
  s8 -> s8 [90, 65535] { R14071 += 1, R14027 += 1, R13969 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R14071 += 1 };
  s11 -> s11 [0, 82] { R14071 += 1, R14027 += 1, R13969 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R14071 += 1, R14027 += 1 };
  s11 -> s12 [0, 65535] { R14071 += 1 };
  s11 -> s11 [90, 65535] { R14071 += 1, R14027 += 1, R13969 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R14071 += 1 };
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [113, 113];
  accepting s1;
};
};
synchronised {  // Automata constraining c1
automaton c1_0 {
  init s0;
  s0 -> s1 [114, 114];
  accepting s1;
};
};
constraint R1 = R13987 && R2 = R14071 && R20 - R14071 = -1 && R21 = R14071 && R22 - R14071 = -1 && R23 = R14071 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R12805 + -1*R12803 - R53 = 0 && R52 + R12804 + R12802 = 0 && R13986 = 0 && R14012 = 0 && R14013 = 0 && R14018 = 0 && R14019 = 0 && R14024 = 0 && R14025 = 0 && R14026 = 0 && R14027 = 0 && R14028 = 0 && R14029 = R14071 && R14030 = 0 && R14031 = R14071 && R14032 = 0 && R14033 = R14071 && R14034 = 0 && R14035 = R14071 && R14036 = 0 && R14037 = R14071 && R14038 = 0 && R14039 = R14071 && R14040 = 0 && R14041 = R14071 && R14042 = 0 && R14043 = R14071 && R14044 = 0 && R14045 = R14071 && R14046 = 0 && R14047 = R14071 && R14048 = 0 && R14049 = R14071 && R14050 = 0 && R14051 = R14071 && R14052 = 0 && R14053 = R14071 && R14054 = 0 && R14055 = R14071 && R14056 = 0 && R14057 = R14071 && R14058 = 0 && R14059 = R14071 && R14060 = 0 && R14061 = R14071 && R14062 = 0 && R14063 = R14071 && R14064 = 0 && R14065 = R14071 && R14066 = 0 && R14067 = R14071 && R14068 = 0 && R14069 = R14071 && R14070 = 0 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R12805 + -1*R12803 - R53 < 1 && -1 < R13987 && 0 < R14071 && (R48 + R11531 + R11528 != 0 || ((R42 + R11524 + R11522 != 0 || R43 + R11525 + R11523 + -1*R12805 + -1*R12803 - R53 = 0 || R53 + R12805 + R12803 < 1) && (R42 + R11524 + R11522 = 0 || R53 + R12805 + R12803 < 1))) && (R48 + R11531 + R11528 != 0 || ((R46 + R11529 + R11526 != 0 || R47 + R11530 + R11527 + -1*R12805 + -1*R12803 - R53 = 0 || R53 + R12805 + R12803 < 1) && (R46 + R11529 + R11526 = 0 || R53 + R12805 + R12803 < 1))) && (R13972 != 0 || R13973 = R13987 || (R17 = 0 && R13987 = 0)) && (R13974 != 0 || R13975 = R13987 || (R17 = 0 && R13987 = 0)) && (R13976 != 0 || R13977 = R13987 || (R17 = 0 && R13987 = 0)) && (R13978 != 0 || R13979 = R13987 || (R17 = 0 && R13987 = 0)) && (R13980 != 0 || R13981 = R13987 || (R17 = 0 && R13987 = 0)) && (R13982 != 0 || R13983 = R13987 || (R17 = 0 && R13987 = 0)) && (R13984 != 0 || R13985 = R13987 || (R17 = 0 && R13987 = 0)) && (R13988 != 0 || R13987 = R13989 || (R17 = 0 && R13987 = 0)) && (R13990 != 0 || R13987 = R13991 || (R17 = 0 && R13987 = 0)) && (R18 = 0 || (R14010 = 0 && R14011 = 0)) && (R18 = 0 || (R14014 = 0 && R14015 = 0)) && (R18 = 0 || (R14016 = 0 && R14017 = 0)) && (R18 = 0 || (R14020 = 0 && R14021 = 0)) && (R18 = 0 || (R14022 = 0 && R14023 = 0)) && (R19 = 0 || (R13992 = 0 && R13993 = 0)) && (R19 = 0 || (R13994 = 0 && R13995 = 0)) && (R19 = 0 || (R13996 = 0 && R13997 = 0)) && (R19 = 0 || (R13998 = 0 && R13999 = 0)) && (R19 = 0 || (R14000 = 0 && R14001 = 0)) && (R19 = 0 || (R14002 = 0 && R14003 = 0)) && (R19 = 0 || (R14004 = 0 && R14005 = 0)) && (R19 = 0 || (R14006 = 0 && R14007 = 0)) && (R19 = 0 || (R14008 = 0 && R14009 = 0)) && (R48 + R11531 + R11528 = 0 || (R42 + R11524 + R11522 = 0 && R43 + R11525 + R11523 + -1*R12805 + -1*R12803 - R53 = 0)) && (R48 + R11531 + R11528 = 0 || (R46 + R11529 + R11526 = 0 && R47 + R11530 + R11527 + -1*R12805 + -1*R12803 - R53 = 0)) && (R58 + R13655 + R13652 = 0 || (R56 + R13653 + R13650 = 0 && R57 + R13654 + R13651 = 0)) && (R58 + R13655 + R13652 = 0 || (R62 + R13970 + R13968 = 0 && R63 + R13971 + R13969 = 0)) && (R13972 = 0 || (R17 = 0 && R13987 = 0)) && (R13974 = 0 || (R17 = 0 && R13987 = 0)) && (R13976 = 0 || (R17 = 0 && R13987 = 0)) && (R13978 = 0 || (R17 = 0 && R13987 = 0)) && (R13980 = 0 || (R17 = 0 && R13987 = 0)) && (R13982 = 0 || (R17 = 0 && R13987 = 0)) && (R13984 = 0 || (R17 = 0 && R13987 = 0)) && (R13988 = 0 || (R17 = 0 && R13987 = 0)) && (R13990 = 0 || (R17 = 0 && R13987 = 0));
// End of Parikh automata intersection problem
