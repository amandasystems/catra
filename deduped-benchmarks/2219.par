// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R14, R18, R19, R2, R254, R255, R258, R259, R260, R261, R262, R263, R264, R265, R266, R267, R268, R269, R270, R271, R272, R273, R274, R275, R276, R277, R278, R279, R280, R281, R282, R283, R284, R285, R286, R287, R288, R289, R290, R291, R292, R293, R294, R295, R296, R297, R298, R299, R3, R300, R301, R302, R303, R304, R305, R306, R307, R308, R309, R310, R311, R312, R313, R314, R315, R316, R317, R318, R319, R320, R321, R322, R323, R324, R325, R326, R327, R328, R329, R330, R331, R332, R333, R334, R335, R336, R337, R338, R339, R340, R341, R342, R343, R344, R345, R346, R347, R348, R349, R350, R351, R352, R353, R354, R355, R356, R357, R358, R359, R360, R361, R362, R363, R364, R365, R366, R367, R368, R369, R370, R371, R372, R4, R5, R6, R7, R8, R9;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [70, 70];
  s0 -> s0 [71, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [70, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R254 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 69];
  s0 -> s0 [0, 65535] { R255 += 1 };
  s0 -> s2 [70, 70];
  s0 -> s1 [71, 65535];
  s1 -> s1 [0, 69];
  s1 -> s2 [70, 70];
  s1 -> s1 [71, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R280 += 1 };
  s0 -> s0 [0, 65535] { R279 += 1, R280 += 1 };
  s0 -> s2 [9, 13] { R280 += 1 };
  s0 -> s1 [14, 31] { R280 += 1 };
  s0 -> s2 [32, 32] { R280 += 1 };
  s0 -> s1 [33, 65535] { R280 += 1 };
  s1 -> s1 [0, 65535] { R280 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R280 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R282 += 1, R9 += 1 };
  s0 -> s0 [0, 65535] { R281 += 1, R282 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R282 += 1, R9 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R284 += 1 };
  s0 -> s0 [0, 65535] { R283 += 1, R284 += 1 };
  s0 -> s2 [9, 13] { R284 += 1 };
  s0 -> s1 [14, 31] { R284 += 1 };
  s0 -> s2 [32, 32] { R284 += 1 };
  s0 -> s1 [33, 65535] { R284 += 1 };
  s1 -> s1 [0, 65535] { R284 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R284 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s0 [0, 65535] { R285 += 1, R286 += 1 };
  s0 -> s1 [0, 65535] { R286 += 1, R10 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R286 += 1, R10 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 69] { R300 += 1 };
  s0 -> s0 [0, 65535] { R299 += 1, R300 += 1 };
  s0 -> s1 [71, 65535] { R300 += 1 };
  s1 -> s1 [0, 69] { R300 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [71, 65535] { R300 += 1 };
  accepting s0, s1;
};
automaton value2_9 {
  init s0;
  s0 -> s0 [0, 65535] { R301 += 1, R302 += 1 };
  s0 -> s1 [0, 65535] { R302 += 1, R261 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R302 += 1, R261 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 70] { R304 += 1 };
  s0 -> s0 [0, 65535] { R303 += 1, R304 += 1 };
  s0 -> s1 [91, 65535] { R304 += 1 };
  s1 -> s1 [0, 70] { R304 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [91, 65535] { R304 += 1 };
  accepting s0, s1;
};
automaton value2_11 {
  init s0;
  s0 -> s0 [0, 65535] { R315 += 1, R316 += 1 };
  s0 -> s1 [0, 65535] { R316 += 1, R262 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R316 += 1, R262 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 69] { R318 += 1 };
  s0 -> s0 [0, 65535] { R317 += 1, R318 += 1 };
  s0 -> s2 [70, 70] { R318 += 1 };
  s0 -> s3 [70, 70] { R318 += 1 };
  s0 -> s1 [91, 65535] { R318 += 1 };
  s1 -> s1 [0, 69] { R318 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R318 += 1 };
  s1 -> s3 [70, 70] { R318 += 1 };
  s1 -> s1 [91, 65535] { R318 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 70] { R318 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [91, 65535] { R318 += 1 };
  accepting s0, s1, s2, s3;
};
};
synchronised {  // Automata constraining P71
automaton P71_0 {
  init s0;
  s0 -> s1 [98, 98];
  accepting s1;
};
};
synchronised {  // Automata constraining P42
automaton P42_0 {
  init s0;
  s0 -> s1 [102, 102];
  accepting s1;
};
};
synchronised {  // Automata constraining value1
automaton value1_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 60];
  s0 -> s1 [61, 61];
  s0 -> s0 [62, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 65535];
  accepting s1;
};
automaton value1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value1_2 {
  init s0;
  s0 -> s1 [0, 60] { R19 += 1 };
  s0 -> s0 [0, 65535] { R18 += 1, R19 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535] { R19 += 1 };
  s1 -> s1 [0, 60] { R19 += 1 };
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535] { R19 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value1_3 {
  init s0;
  s0 -> s1 [0, 64] { R288 += 1 };
  s0 -> s0 [0, 65535] { R287 += 1, R288 += 1 };
  s0 -> s2 [86, 86] { R288 += 1 };
  s0 -> s1 [87, 65535] { R288 += 1 };
  s1 -> s1 [0, 64] { R288 += 1 };
  s1 -> s2 [86, 86] { R288 += 1 };
  s1 -> s1 [87, 65535] { R288 += 1 };
  s2 -> s2 [0, 64] { R288 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [86, 65535] { R288 += 1 };
  accepting s2;
};
automaton value1_4 {
  init s0;
  s0 -> s1 [0, 65535] { R290 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R289 += 1, R290 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R290 += 1, R0 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_5 {
  init s0;
  s0 -> s1 [0, 8] { R292 += 1, R264 += 1 };
  s0 -> s0 [0, 65535] { R291 += 1, R292 += 1 };
  s0 -> s2 [0, 65535] { R292 += 1, R263 += 1, R264 += 1 };
  s0 -> s3 [9, 13] { R292 += 1, R264 += 1 };
  s0 -> s1 [14, 31] { R292 += 1, R264 += 1 };
  s0 -> s3 [32, 32] { R292 += 1, R264 += 1 };
  s0 -> s1 [33, 65535] { R292 += 1, R264 += 1 };
  s1 -> s5 [0, 65535] { R292 += 1 };
  s1 -> s1 [0, 65535] { R292 += 1, R264 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R292 += 1, R264 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R292 += 1, R263 += 1, R264 += 1 };
  s2 -> s3 [9, 13] { R292 += 1, R264 += 1 };
  s2 -> s1 [14, 31] { R292 += 1, R264 += 1 };
  s2 -> s3 [32, 32] { R292 += 1, R264 += 1 };
  s2 -> s1 [33, 65535] { R292 += 1, R264 += 1 };
  s3 -> s1 [0, 65535] { R292 += 1, R264 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R292 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value1_6 {
  init s0;
  s0 -> s1 [0, 65535] { R294 += 1, R266 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R293 += 1, R294 += 1 };
  s0 -> s2 [0, 65535] { R294 += 1, R265 += 1, R266 += 1 };
  s1 -> s4 [0, 65535] { R294 += 1 };
  s1 -> s1 [0, 65535] { R294 += 1, R266 += 1, R5 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R294 += 1, R266 += 1, R5 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R294 += 1, R265 += 1, R266 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R294 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_7 {
  init s0;
  s0 -> s1 [0, 8] { R296 += 1, R268 += 1 };
  s0 -> s2 [0, 65535] { R296 += 1, R267 += 1, R268 += 1 };
  s0 -> s0 [0, 65535] { R295 += 1, R296 += 1 };
  s0 -> s3 [9, 13] { R296 += 1, R268 += 1 };
  s0 -> s1 [14, 31] { R296 += 1, R268 += 1 };
  s0 -> s3 [32, 32] { R296 += 1, R268 += 1 };
  s0 -> s1 [33, 65535] { R296 += 1, R268 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R296 += 1, R268 += 1 };
  s1 -> s5 [0, 65535] { R296 += 1 };
  s2 -> s1 [0, 8] { R296 += 1, R268 += 1 };
  s2 -> s2 [0, 65535] { R296 += 1, R267 += 1, R268 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R296 += 1, R268 += 1 };
  s2 -> s1 [14, 31] { R296 += 1, R268 += 1 };
  s2 -> s3 [32, 32] { R296 += 1, R268 += 1 };
  s2 -> s1 [33, 65535] { R296 += 1, R268 += 1 };
  s3 -> s1 [0, 65535] { R296 += 1, R268 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R296 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value1_8 {
  init s0;
  s0 -> s0 [0, 65535] { R297 += 1, R298 += 1 };
  s0 -> s1 [0, 65535] { R298 += 1, R269 += 1, R270 += 1 };
  s0 -> s2 [0, 65535] { R298 += 1, R270 += 1, R6 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R298 += 1, R269 += 1, R270 += 1 };
  s1 -> s2 [0, 65535] { R298 += 1, R270 += 1, R6 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R298 += 1, R270 += 1, R6 += 1 };
  s2 -> s4 [0, 65535] { R298 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R298 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_9 {
  init s0;
  s0 -> s1 [0, 64] { R340 += 1 };
  s0 -> s0 [0, 65535] { R339 += 1, R340 += 1 };
  s0 -> s2 [66, 66] { R340 += 1 };
  s0 -> s1 [67, 65535] { R340 += 1 };
  s1 -> s1 [0, 64] { R340 += 1 };
  s1 -> s2 [66, 66] { R340 += 1 };
  s1 -> s1 [67, 65535] { R340 += 1 };
  s2 -> s2 [0, 64] { R340 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [66, 65535] { R340 += 1 };
  accepting s2;
};
automaton value1_10 {
  init s0;
  s0 -> s0 [0, 65535] { R341 += 1, R342 += 1 };
  s0 -> s1 [0, 65535] { R342 += 1, R2 += 1 };
  s1 -> s1 [0, 65535] { R342 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_11 {
  init s0;
  s0 -> s1 [0, 65] { R344 += 1 };
  s0 -> s0 [0, 65535] { R343 += 1, R344 += 1 };
  s0 -> s2 [0, 65535] { R344 += 1, R14 += 1 };
  s0 -> s3 [66, 66] { R344 += 1 };
  s0 -> s1 [67, 65535] { R344 += 1 };
  s1 -> s1 [0, 65] { R344 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [66, 66] { R344 += 1 };
  s1 -> s1 [67, 65535] { R344 += 1 };
  s2 -> s1 [0, 65] { R344 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R344 += 1, R14 += 1 };
  s2 -> s3 [66, 66] { R344 += 1 };
  s2 -> s1 [67, 65535] { R344 += 1 };
  s3 -> s3 [0, 65535] { R344 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value1_12 {
  init s0;
  s0 -> s1 [0, 8] { R346 += 1, R272 += 1 };
  s0 -> s0 [0, 65535] { R345 += 1, R346 += 1 };
  s0 -> s2 [0, 65535] { R346 += 1, R271 += 1, R272 += 1 };
  s0 -> s3 [9, 13] { R346 += 1, R272 += 1 };
  s0 -> s1 [14, 31] { R346 += 1, R272 += 1 };
  s0 -> s3 [32, 32] { R346 += 1, R272 += 1 };
  s0 -> s1 [33, 65535] { R346 += 1, R272 += 1 };
  s1 -> s5 [0, 65535] { R346 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R346 += 1, R272 += 1 };
  s2 -> s1 [0, 8] { R346 += 1, R272 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R346 += 1, R271 += 1, R272 += 1 };
  s2 -> s3 [9, 13] { R346 += 1, R272 += 1 };
  s2 -> s1 [14, 31] { R346 += 1, R272 += 1 };
  s2 -> s3 [32, 32] { R346 += 1, R272 += 1 };
  s2 -> s1 [33, 65535] { R346 += 1, R272 += 1 };
  s3 -> s1 [0, 65535] { R346 += 1, R272 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R346 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value1_13 {
  init s0;
  s0 -> s0 [0, 65535] { R347 += 1, R348 += 1 };
  s0 -> s1 [0, 65535] { R348 += 1, R274 += 1, R7 += 1 };
  s0 -> s2 [0, 65535] { R348 += 1, R273 += 1, R274 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R348 += 1 };
  s1 -> s1 [0, 65535] { R348 += 1, R274 += 1, R7 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R348 += 1, R274 += 1, R7 += 1 };
  s2 -> s2 [0, 65535] { R348 += 1, R273 += 1, R274 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R348 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_14 {
  init s0;
  s0 -> s1 [0, 8] { R350 += 1, R276 += 1 };
  s0 -> s0 [0, 65535] { R349 += 1, R350 += 1 };
  s0 -> s2 [0, 65535] { R350 += 1, R275 += 1, R276 += 1 };
  s0 -> s3 [9, 13] { R350 += 1, R276 += 1 };
  s0 -> s1 [14, 31] { R350 += 1, R276 += 1 };
  s0 -> s3 [32, 32] { R350 += 1, R276 += 1 };
  s0 -> s1 [33, 65535] { R350 += 1, R276 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R350 += 1, R276 += 1 };
  s1 -> s5 [0, 65535] { R350 += 1 };
  s2 -> s1 [0, 8] { R350 += 1, R276 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R350 += 1, R275 += 1, R276 += 1 };
  s2 -> s3 [9, 13] { R350 += 1, R276 += 1 };
  s2 -> s1 [14, 31] { R350 += 1, R276 += 1 };
  s2 -> s3 [32, 32] { R350 += 1, R276 += 1 };
  s2 -> s1 [33, 65535] { R350 += 1, R276 += 1 };
  s3 -> s1 [0, 65535] { R350 += 1, R276 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R350 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value1_15 {
  init s0;
  s0 -> s0 [0, 65535] { R351 += 1, R352 += 1 };
  s0 -> s1 [0, 65535] { R352 += 1, R278 += 1, R8 += 1 };
  s0 -> s2 [0, 65535] { R352 += 1, R277 += 1, R278 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R352 += 1 };
  s1 -> s1 [0, 65535] { R352 += 1, R278 += 1, R8 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R352 += 1, R278 += 1, R8 += 1 };
  s2 -> s2 [0, 65535] { R352 += 1, R277 += 1, R278 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R352 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_16 {
  init s0;
  s0 -> s1 [0, 65535] { R354 += 1, R311 += 1, R312 += 1 };
  s0 -> s2 [0, 65535] { R354 += 1, R312 += 1, R260 += 1 };
  s0 -> s0 [0, 65535] { R353 += 1, R354 += 1 };
  s1 -> s1 [0, 65535] { R354 += 1, R311 += 1, R312 += 1 };
  s1 -> s2 [0, 65535] { R354 += 1, R312 += 1, R260 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R354 += 1 };
  s2 -> s2 [0, 65535] { R354 += 1, R312 += 1, R260 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R354 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_17 {
  init s0;
  s0 -> s1 [0, 65] { R356 += 1, R314 += 1 };
  s0 -> s0 [0, 65535] { R355 += 1, R356 += 1 };
  s0 -> s2 [0, 65535] { R356 += 1, R313 += 1, R314 += 1 };
  s0 -> s3 [66, 66] { R356 += 1, R314 += 1 };
  s0 -> s4 [66, 66] { R356 += 1, R314 += 1 };
  s0 -> s1 [91, 65535] { R356 += 1, R314 += 1 };
  s1 -> s1 [0, 65] { R356 += 1, R314 += 1 };
  s1 -> s1 [0, 65535] { R356 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [66, 66] { R356 += 1, R314 += 1 };
  s1 -> s4 [66, 66] { R356 += 1, R314 += 1 };
  s1 -> s1 [91, 65535] { R356 += 1, R314 += 1 };
  s2 -> s1 [0, 65] { R356 += 1, R314 += 1 };
  s2 -> s2 [0, 65535] { R356 += 1, R313 += 1, R314 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [66, 66] { R356 += 1, R314 += 1 };
  s2 -> s4 [66, 66] { R356 += 1, R314 += 1 };
  s2 -> s1 [91, 65535] { R356 += 1, R314 += 1 };
  s3 -> s3 [0, 66] { R356 += 1, R314 += 1 };
  s3 -> s3 [0, 65535] { R356 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [91, 65535] { R356 += 1, R314 += 1 };
  s4 -> s4 [0, 65535] { R356 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value1_18 {
  init s0;
  s0 -> s1 [0, 65] { R358 += 1, R324 += 1 };
  s0 -> s2 [0, 65535] { R358 += 1, R323 += 1, R324 += 1 };
  s0 -> s0 [0, 65535] { R357 += 1, R358 += 1 };
  s0 -> s3 [66, 66] { R358 += 1, R324 += 1 };
  s0 -> s1 [67, 65535] { R358 += 1, R324 += 1 };
  s1 -> s1 [0, 65] { R358 += 1, R324 += 1 };
  s1 -> s3 [66, 66] { R358 += 1, R324 += 1 };
  s1 -> s1 [67, 65535] { R358 += 1, R324 += 1 };
  s2 -> s1 [0, 65] { R358 += 1, R324 += 1 };
  s2 -> s2 [0, 65535] { R358 += 1, R323 += 1, R324 += 1 };
  s2 -> s3 [66, 66] { R358 += 1, R324 += 1 };
  s2 -> s1 [67, 65535] { R358 += 1, R324 += 1 };
  s3 -> s3 [0, 65535] { R358 += 1, R324 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R358 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R358 += 1 };
  accepting s3, s4, s5;
};
automaton value1_19 {
  init s0;
  s0 -> s1 [0, 65535] { R360 += 1, R325 += 1, R326 += 1 };
  s0 -> s2 [0, 65535] { R360 += 1, R326 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R359 += 1, R360 += 1 };
  s1 -> s1 [0, 65535] { R360 += 1, R325 += 1, R326 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R360 += 1, R326 += 1, R1 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R360 += 1 };
  s2 -> s2 [0, 65535] { R360 += 1, R326 += 1, R1 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R360 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_20 {
  init s0;
  s0 -> s1 [0, 65] { R362 += 1, R328 += 1 };
  s0 -> s2 [0, 65535] { R362 += 1, R328 += 1, R11 += 1 };
  s0 -> s0 [0, 65535] { R361 += 1, R362 += 1 };
  s0 -> s3 [0, 65535] { R362 += 1, R327 += 1, R328 += 1 };
  s0 -> s4 [66, 66] { R362 += 1, R328 += 1 };
  s0 -> s1 [67, 65535] { R362 += 1, R328 += 1 };
  s1 -> s1 [0, 65] { R362 += 1, R328 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R362 += 1 };
  s1 -> s4 [66, 66] { R362 += 1, R328 += 1 };
  s1 -> s1 [67, 65535] { R362 += 1, R328 += 1 };
  s2 -> s1 [0, 65] { R362 += 1, R328 += 1 };
  s2 -> s2 [0, 65535] { R362 += 1, R328 += 1, R11 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R362 += 1 };
  s2 -> s4 [66, 66] { R362 += 1, R328 += 1 };
  s2 -> s1 [67, 65535] { R362 += 1, R328 += 1 };
  s3 -> s1 [0, 65] { R362 += 1, R328 += 1 };
  s3 -> s2 [0, 65535] { R362 += 1, R328 += 1, R11 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R362 += 1, R327 += 1, R328 += 1 };
  s3 -> s4 [66, 66] { R362 += 1, R328 += 1 };
  s3 -> s1 [67, 65535] { R362 += 1, R328 += 1 };
  s4 -> s4 [0, 65535] { R362 += 1, R328 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R362 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton value1_21 {
  init s0;
  s0 -> s1 [0, 65] { R364 += 1, R330 += 1, R306 += 1 };
  s0 -> s2 [0, 65535] { R364 += 1, R329 += 1, R330 += 1 };
  s0 -> s0 [0, 65535] { R363 += 1, R364 += 1 };
  s0 -> s3 [0, 65535] { R364 += 1, R330 += 1, R305 += 1, R306 += 1 };
  s0 -> s1 [67, 65535] { R364 += 1, R330 += 1, R306 += 1 };
  s1 -> s1 [0, 65] { R364 += 1, R330 += 1, R306 += 1 };
  s1 -> s1 [0, 65535] { R364 += 1, R330 += 1 };
  s1 -> s4 [0, 65535] { R364 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [67, 65535] { R364 += 1, R330 += 1, R306 += 1 };
  s2 -> s1 [0, 65] { R364 += 1, R330 += 1, R306 += 1 };
  s2 -> s2 [0, 65535] { R364 += 1, R329 += 1, R330 += 1 };
  s2 -> s3 [0, 65535] { R364 += 1, R330 += 1, R305 += 1, R306 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [67, 65535] { R364 += 1, R330 += 1, R306 += 1 };
  s3 -> s1 [0, 65] { R364 += 1, R330 += 1, R306 += 1 };
  s3 -> s4 [0, 65535] { R364 += 1 };
  s3 -> s3 [0, 65535] { R364 += 1, R330 += 1, R305 += 1, R306 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [67, 65535] { R364 += 1, R330 += 1, R306 += 1 };
  s4 -> s4 [0, 65535] { R364 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value1_22 {
  init s0;
  s0 -> s1 [0, 65535] { R366 += 1, R332 += 1, R308 += 1, R258 += 1 };
  s0 -> s2 [0, 65535] { R366 += 1, R332 += 1, R307 += 1, R308 += 1 };
  s0 -> s3 [0, 65535] { R366 += 1, R331 += 1, R332 += 1 };
  s0 -> s0 [0, 65535] { R365 += 1, R366 += 1 };
  s1 -> s5 [0, 65535] { R366 += 1 };
  s1 -> s1 [0, 65535] { R366 += 1, R332 += 1, R308 += 1, R258 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R366 += 1, R332 += 1 };
  s2 -> s5 [0, 65535] { R366 += 1 };
  s2 -> s1 [0, 65535] { R366 += 1, R332 += 1, R308 += 1, R258 += 1 };
  s2 -> s2 [0, 65535] { R366 += 1, R332 += 1, R307 += 1, R308 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R366 += 1, R332 += 1, R308 += 1, R258 += 1 };
  s3 -> s2 [0, 65535] { R366 += 1, R332 += 1, R307 += 1, R308 += 1 };
  s3 -> s3 [0, 65535] { R366 += 1, R331 += 1, R332 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R366 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R366 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R366 += 1, R332 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value1_23 {
  init s0;
  s0 -> s1 [0, 66] { R368 += 1, R334 += 1, R310 += 1 };
  s0 -> s2 [0, 65535] { R368 += 1, R334 += 1, R309 += 1, R310 += 1 };
  s0 -> s3 [0, 65535] { R368 += 1, R333 += 1, R334 += 1 };
  s0 -> s0 [0, 65535] { R367 += 1, R368 += 1 };
  s0 -> s1 [91, 65535] { R368 += 1, R334 += 1, R310 += 1 };
  s1 -> s1 [0, 66] { R368 += 1, R334 += 1, R310 += 1 };
  s1 -> s1 [0, 65535] { R368 += 1, R334 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R368 += 1 };
  s1 -> s1 [91, 65535] { R368 += 1, R334 += 1, R310 += 1 };
  s2 -> s1 [0, 66] { R368 += 1, R334 += 1, R310 += 1 };
  s2 -> s2 [0, 65535] { R368 += 1, R334 += 1, R309 += 1, R310 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R368 += 1 };
  s2 -> s1 [91, 65535] { R368 += 1, R334 += 1, R310 += 1 };
  s3 -> s1 [0, 66] { R368 += 1, R334 += 1, R310 += 1 };
  s3 -> s2 [0, 65535] { R368 += 1, R334 += 1, R309 += 1, R310 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R368 += 1, R333 += 1, R334 += 1 };
  s3 -> s1 [91, 65535] { R368 += 1, R334 += 1, R310 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R368 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value1_24 {
  init s0;
  s0 -> s1 [0, 65535] { R370 += 1, R336 += 1, R320 += 1, R259 += 1 };
  s0 -> s2 [0, 65535] { R370 += 1, R336 += 1, R319 += 1, R320 += 1 };
  s0 -> s3 [0, 65535] { R370 += 1, R335 += 1, R336 += 1 };
  s0 -> s0 [0, 65535] { R369 += 1, R370 += 1 };
  s1 -> s1 [0, 65535] { R370 += 1, R336 += 1, R320 += 1, R259 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R370 += 1, R336 += 1 };
  s1 -> s5 [0, 65535] { R370 += 1 };
  s2 -> s1 [0, 65535] { R370 += 1, R336 += 1, R320 += 1, R259 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R370 += 1, R336 += 1, R319 += 1, R320 += 1 };
  s2 -> s5 [0, 65535] { R370 += 1 };
  s3 -> s1 [0, 65535] { R370 += 1, R336 += 1, R320 += 1, R259 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R370 += 1, R336 += 1, R319 += 1, R320 += 1 };
  s3 -> s3 [0, 65535] { R370 += 1, R335 += 1, R336 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R370 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R370 += 1, R336 += 1 };
  s6 -> s5 [0, 65535] { R370 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value1_25 {
  init s0;
  s0 -> s1 [0, 65] { R372 += 1, R338 += 1, R322 += 1 };
  s0 -> s0 [0, 65535] { R371 += 1, R372 += 1 };
  s0 -> s2 [0, 65535] { R372 += 1, R338 += 1, R321 += 1, R322 += 1 };
  s0 -> s3 [0, 65535] { R372 += 1, R337 += 1, R338 += 1 };
  s0 -> s4 [66, 66] { R372 += 1, R338 += 1, R322 += 1 };
  s0 -> s5 [66, 66] { R372 += 1, R338 += 1, R322 += 1 };
  s0 -> s1 [91, 65535] { R372 += 1, R338 += 1, R322 += 1 };
  s1 -> s1 [0, 65] { R372 += 1, R338 += 1, R322 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R372 += 1 };
  s1 -> s1 [0, 65535] { R372 += 1, R338 += 1 };
  s1 -> s4 [66, 66] { R372 += 1, R338 += 1, R322 += 1 };
  s1 -> s5 [66, 66] { R372 += 1, R338 += 1, R322 += 1 };
  s1 -> s1 [91, 65535] { R372 += 1, R338 += 1, R322 += 1 };
  s2 -> s1 [0, 65] { R372 += 1, R338 += 1, R322 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R372 += 1, R338 += 1, R321 += 1, R322 += 1 };
  s2 -> s7 [0, 65535] { R372 += 1 };
  s2 -> s4 [66, 66] { R372 += 1, R338 += 1, R322 += 1 };
  s2 -> s5 [66, 66] { R372 += 1, R338 += 1, R322 += 1 };
  s2 -> s1 [91, 65535] { R372 += 1, R338 += 1, R322 += 1 };
  s3 -> s1 [0, 65] { R372 += 1, R338 += 1, R322 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s2 [0, 65535] { R372 += 1, R338 += 1, R321 += 1, R322 += 1 };
  s3 -> s3 [0, 65535] { R372 += 1, R337 += 1, R338 += 1 };
  s3 -> s4 [66, 66] { R372 += 1, R338 += 1, R322 += 1 };
  s3 -> s5 [66, 66] { R372 += 1, R338 += 1, R322 += 1 };
  s3 -> s1 [91, 65535] { R372 += 1, R338 += 1, R322 += 1 };
  s4 -> s4 [0, 66] { R372 += 1, R338 += 1, R322 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R372 += 1, R338 += 1 };
  s4 -> s7 [0, 65535] { R372 += 1 };
  s4 -> s4 [91, 65535] { R372 += 1, R338 += 1, R322 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R372 += 1 };
  s5 -> s5 [0, 65535] { R372 += 1, R338 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R372 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
};
constraint R2 = R338 && R3 = R298 && R4 = R304 && R18 = 0 && R19 = R372 && R271 - R338 = -1 && R272 = R338 && R273 - R338 = -1 && R274 = R338 && R275 = 0 && R276 = 1 && R277 = 0 && R278 = 1 && R279 - R304 = -1 && R280 = R304 && R281 - R304 = -1 && R282 = R304 && R283 = 0 && R284 = 1 && R285 = 0 && R286 = 1 && R287 - R372 = 1 && R288 = R298 && R289 - R372 = 1 && R290 = R298 && R291 - R372 = 1 && R292 = R298 && R293 - R372 = 1 && R294 = R298 && R295 - R372 = 1 && R296 = R298 && R297 - R372 = 1 && R299 = 0 && R300 = R304 && R301 = 0 && R302 = R304 && R303 = 0 && R323 = 0 && R324 = R338 && R325 = 0 && R326 = R338 && R327 = 0 && R328 = R338 && R329 = 0 && R330 = R338 && R331 = 0 && R332 = R338 && R333 = 0 && R334 = R338 && R335 = 0 && R336 = R338 && R337 = 0 && R339 = 0 && R340 = R372 && R341 = 0 && R342 = R372 && R343 = 0 && R344 = R372 && R345 = 0 && R346 = R372 && R347 = 0 && R348 = R372 && R349 = 0 && R350 = R372 && R351 = 0 && R352 = R372 && R353 = 0 && R354 = R372 && R355 = 0 && R356 = R372 && R357 = 0 && R358 = R372 && R359 = 0 && R360 = R372 && R361 = 0 && R362 = R372 && R363 = 0 && R364 = R372 && R365 = 0 && R366 = R372 && R367 = 0 && R368 = R372 && R369 = 0 && R370 = R372 && R371 = 0 && R0 != 0 && -1 < R1 && R11 < 1 && R14 < 1 && R254 < 1 && R255 < 1 && R372 < R298 && 0 < R304 && 0 < R338 && -1 < R372 && (R1 != 0 || R258 = 0 || (R305 = 0 && R306 = 0)) && (R1 != 0 || R258 = 0 || (R307 = 0 && R308 = 0)) && (R1 != 0 || R258 = 0 || (R309 = 0 && R310 = 0)) && (R5 != 0 || ((R0 != R264 || R263 - R264 = -1 || R264 < 0) && (R0 = R264 || R0 < 1))) && (R5 != 0 || ((R0 != R266 || R265 - R266 = -1 || R266 < 0) && (R0 = R266 || R0 < 1))) && (R267 != 0 || ((R6 != 0 || ((R0 != R268 || R268 = 1 || R268 < 0) && (R0 = R268 || R268 = 1 || R0 < 1))) && (R6 = 0 || ((R0 != R268 || R268 = 1 || R268 < 0) && (R268 != 1 || -1 < R0) && (R0 = R268 || R268 = 1))))) && (R269 != 0 || ((R6 != 0 || ((R0 != R270 || R270 = 1 || R270 < 0) && (R0 = R270 || R270 = 1 || R0 < 1))) && (R6 = 0 || ((R0 != R270 || R270 = 1 || R270 < 0) && (R270 != 1 || -1 < R0) && (R0 = R270 || R270 = 1))))) && (R305 != 0 || R1 = R306 || R1 < 1) && (R307 != 0 || R1 = R308 || R1 < 1) && (R309 != 0 || R1 = R310 || R1 < 1) && (R5 = 0 || (R0 = R264 && R263 - R264 = -1)) && (R5 = 0 || (R0 = R266 && R265 - R266 = -1)) && (R259 = 0 || (R319 = 0 && R320 = 0)) && (R259 = 0 || (R321 = 0 && R322 = 0)) && (R260 = 0 || (R311 = 0 && R312 = 0)) && (R260 = 0 || (R313 = 0 && R314 = 0)) && (R262 = 0 || (R315 = 0 && R316 = 0)) && (R262 = 0 || (R317 = 0 && R318 = 0)) && (R267 = 0 || (R6 = 0 && R0 < 0)) && (R269 = 0 || (R6 = 0 && R0 < 0)) && (R305 = 0 || R1 < 1) && (R307 = 0 || R1 < 1) && (R309 = 0 || R1 < 1);
// End of Parikh automata intersection problem
