// Parikh automata intersection problem, generated by OSTRICH+
counter int R1000, R1001, R1002, R1003, R1004, R1005, R1006, R1007, R1008, R1009, R1010, R1011, R1012, R1013, R1014, R1015, R1016, R1017, R1018, R1019, R1020, R1021, R11, R12, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R4, R486, R487, R488, R489, R490, R491, R492, R493, R494, R495, R496, R497, R498, R499, R500, R501, R502, R503, R504, R505, R506, R507, R508, R509, R510, R511, R512, R513, R514, R515, R516, R517, R518, R519, R520, R521, R522, R523, R524, R525, R526, R527, R528, R529, R530, R531, R532, R533, R534, R535, R536, R537, R538, R539, R540, R541, R542, R543, R544, R545, R546, R547, R548, R549, R550, R551, R956, R957, R958, R959, R960, R961, R962, R963, R964, R965, R966, R967, R968, R969, R970, R971, R972, R973, R974, R975, R976, R977, R978, R979, R980, R981, R982, R983, R984, R985, R986, R987, R988, R989, R990, R991, R992, R993, R994, R995, R996, R997, R998, R999;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 72];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [73, 73];
  s0 -> s1 [74, 65535];
  s1 -> s1 [0, 72];
  s1 -> s2 [73, 73];
  s1 -> s1 [74, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R21 += 1 };
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R25 += 1 };
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 72] { R965 += 1 };
  s0 -> s0 [0, 65535] { R964 += 1, R965 += 1 };
  s0 -> s1 [74, 65535] { R965 += 1 };
  s1 -> s1 [0, 72] { R965 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [74, 65535] { R965 += 1 };
  accepting s0, s1;
};
automaton value2_9 {
  init s0;
  s0 -> s0 [0, 65535] { R966 += 1, R967 += 1 };
  s0 -> s1 [0, 65535] { R967 += 1, R18 += 1 };
  s1 -> s1 [0, 65535] { R967 += 1, R18 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_10 {
  init s0;
  s0 -> s0 [0, 65535] { R968 += 1, R969 += 1 };
  s0 -> s1 [0, 65535] { R969 += 1 };
  s1 -> s1 [0, 65535] { R969 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_11 {
  init s0;
  s0 -> s0 [0, 65535] { R970 += 1, R971 += 1 };
  s0 -> s1 [0, 65535] { R971 += 1, R487 += 1 };
  s1 -> s1 [0, 65535] { R971 += 1, R487 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 73] { R973 += 1 };
  s0 -> s2 [0, 65535] { R973 += 1, R489 += 1 };
  s0 -> s0 [0, 65535] { R972 += 1, R973 += 1 };
  s0 -> s1 [75, 65535] { R973 += 1 };
  s1 -> s1 [0, 73] { R973 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [75, 65535] { R973 += 1 };
  s2 -> s1 [0, 73] { R973 += 1 };
  s2 -> s2 [0, 65535] { R973 += 1, R489 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [75, 65535] { R973 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_13 {
  init s0;
  s0 -> s0 [0, 65535] { R974 += 1, R975 += 1 };
  s0 -> s1 [0, 65535] { R975 += 1, R493 += 1, R494 += 1 };
  s0 -> s2 [0, 65535] { R975 += 1, R494 += 1, R495 += 1 };
  s1 -> s1 [0, 65535] { R975 += 1, R493 += 1, R494 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R975 += 1, R494 += 1, R495 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R975 += 1, R494 += 1, R495 += 1 };
  s2 -> s4 [0, 65535] { R975 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R975 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 73] { R977 += 1, R499 += 1 };
  s0 -> s0 [0, 65535] { R976 += 1, R977 += 1 };
  s0 -> s2 [0, 65535] { R977 += 1, R498 += 1, R499 += 1 };
  s0 -> s3 [74, 74] { R977 += 1, R499 += 1 };
  s0 -> s4 [74, 74] { R977 += 1, R499 += 1 };
  s0 -> s1 [77, 65535] { R977 += 1, R499 += 1 };
  s1 -> s1 [0, 73] { R977 += 1, R499 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R977 += 1 };
  s1 -> s3 [74, 74] { R977 += 1, R499 += 1 };
  s1 -> s4 [74, 74] { R977 += 1, R499 += 1 };
  s1 -> s1 [77, 65535] { R977 += 1, R499 += 1 };
  s2 -> s1 [0, 73] { R977 += 1, R499 += 1 };
  s2 -> s2 [0, 65535] { R977 += 1, R498 += 1, R499 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [74, 74] { R977 += 1, R499 += 1 };
  s2 -> s4 [74, 74] { R977 += 1, R499 += 1 };
  s2 -> s1 [77, 65535] { R977 += 1, R499 += 1 };
  s3 -> s3 [0, 65535] { R977 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 74] { R977 += 1, R499 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R977 += 1 };
  s4 -> s4 [77, 65535] { R977 += 1, R499 += 1 };
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 73] { R979 += 1, R503 += 1 };
  s0 -> s0 [0, 65535] { R978 += 1, R979 += 1 };
  s0 -> s2 [0, 65535] { R979 += 1, R502 += 1, R503 += 1 };
  s0 -> s3 [74, 74] { R979 += 1, R503 += 1 };
  s0 -> s1 [75, 65535] { R979 += 1, R503 += 1 };
  s1 -> s1 [0, 73] { R979 += 1, R503 += 1 };
  s1 -> s3 [74, 74] { R979 += 1, R503 += 1 };
  s1 -> s1 [75, 65535] { R979 += 1, R503 += 1 };
  s2 -> s1 [0, 73] { R979 += 1, R503 += 1 };
  s2 -> s2 [0, 65535] { R979 += 1, R502 += 1, R503 += 1 };
  s2 -> s3 [74, 74] { R979 += 1, R503 += 1 };
  s2 -> s1 [75, 65535] { R979 += 1, R503 += 1 };
  s3 -> s4 [0, 65535] { R979 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R979 += 1, R503 += 1 };
  s4 -> s4 [0, 65535] { R979 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 65535] { R981 += 1, R508 += 1, R509 += 1 };
  s0 -> s0 [0, 65535] { R980 += 1, R981 += 1 };
  s0 -> s2 [0, 65535] { R981 += 1, R507 += 1, R508 += 1 };
  s1 -> s4 [0, 65535] { R981 += 1 };
  s1 -> s1 [0, 65535] { R981 += 1, R508 += 1, R509 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R981 += 1, R508 += 1, R509 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R981 += 1, R507 += 1, R508 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R981 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 73] { R983 += 1, R514 += 1 };
  s0 -> s2 [0, 65535] { R983 += 1, R514 += 1, R515 += 1 };
  s0 -> s3 [0, 65535] { R983 += 1, R513 += 1, R514 += 1 };
  s0 -> s0 [0, 65535] { R982 += 1, R983 += 1 };
  s0 -> s1 [75, 65535] { R983 += 1, R514 += 1 };
  s1 -> s1 [0, 73] { R983 += 1, R514 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R983 += 1 };
  s1 -> s1 [75, 65535] { R983 += 1, R514 += 1 };
  s2 -> s1 [0, 73] { R983 += 1, R514 += 1 };
  s2 -> s5 [0, 65535] { R983 += 1 };
  s2 -> s2 [0, 65535] { R983 += 1, R514 += 1, R515 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [75, 65535] { R983 += 1, R514 += 1 };
  s3 -> s1 [0, 73] { R983 += 1, R514 += 1 };
  s3 -> s2 [0, 65535] { R983 += 1, R514 += 1, R515 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R983 += 1, R513 += 1, R514 += 1 };
  s3 -> s1 [75, 65535] { R983 += 1, R514 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R983 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 73] { R985 += 1, R521 += 1, R523 += 1 };
  s0 -> s0 [0, 65535] { R984 += 1, R985 += 1 };
  s0 -> s2 [0, 65535] { R985 += 1, R520 += 1, R521 += 1 };
  s0 -> s3 [0, 65535] { R985 += 1, R521 += 1, R522 += 1, R523 += 1 };
  s0 -> s1 [75, 65535] { R985 += 1, R521 += 1, R523 += 1 };
  s1 -> s1 [0, 73] { R985 += 1, R521 += 1, R523 += 1 };
  s1 -> s4 [0, 65535] { R985 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R985 += 1, R521 += 1 };
  s1 -> s1 [75, 65535] { R985 += 1, R521 += 1, R523 += 1 };
  s2 -> s1 [0, 73] { R985 += 1, R521 += 1, R523 += 1 };
  s2 -> s2 [0, 65535] { R985 += 1, R520 += 1, R521 += 1 };
  s2 -> s3 [0, 65535] { R985 += 1, R521 += 1, R522 += 1, R523 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [75, 65535] { R985 += 1, R521 += 1, R523 += 1 };
  s3 -> s1 [0, 73] { R985 += 1, R521 += 1, R523 += 1 };
  s3 -> s4 [0, 65535] { R985 += 1 };
  s3 -> s3 [0, 65535] { R985 += 1, R521 += 1, R522 += 1, R523 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [75, 65535] { R985 += 1, R521 += 1, R523 += 1 };
  s4 -> s4 [0, 65535] { R985 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_19 {
  init s0;
  s0 -> s0 [0, 65535] { R986 += 1, R987 += 1 };
  s0 -> s1 [0, 65535] { R987 += 1, R529 += 1, R530 += 1 };
  s0 -> s2 [0, 65535] { R987 += 1, R530 += 1, R531 += 1, R532 += 1 };
  s0 -> s3 [0, 65535] { R987 += 1, R530 += 1, R532 += 1, R533 += 1 };
  s1 -> s1 [0, 65535] { R987 += 1, R529 += 1, R530 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s2 [0, 65535] { R987 += 1, R530 += 1, R531 += 1, R532 += 1 };
  s1 -> s3 [0, 65535] { R987 += 1, R530 += 1, R532 += 1, R533 += 1 };
  s2 -> s5 [0, 65535] { R987 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R987 += 1, R530 += 1, R531 += 1, R532 += 1 };
  s2 -> s3 [0, 65535] { R987 += 1, R530 += 1, R532 += 1, R533 += 1 };
  s3 -> s4 [0, 65535] { R987 += 1, R530 += 1 };
  s3 -> s5 [0, 65535] { R987 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R987 += 1, R530 += 1, R532 += 1, R533 += 1 };
  s4 -> s4 [0, 65535] { R987 += 1, R530 += 1 };
  s4 -> s5 [0, 65535] { R987 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R987 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 74] { R989 += 1, R539 += 1, R541 += 1 };
  s0 -> s2 [0, 65535] { R989 += 1, R539 += 1, R540 += 1, R541 += 1 };
  s0 -> s3 [0, 65535] { R989 += 1, R538 += 1, R539 += 1 };
  s0 -> s0 [0, 65535] { R988 += 1, R989 += 1 };
  s0 -> s1 [76, 65535] { R989 += 1, R539 += 1, R541 += 1 };
  s1 -> s1 [0, 74] { R989 += 1, R539 += 1, R541 += 1 };
  s1 -> s1 [0, 65535] { R989 += 1, R539 += 1 };
  s1 -> s5 [0, 65535] { R989 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [76, 65535] { R989 += 1, R539 += 1, R541 += 1 };
  s2 -> s1 [0, 74] { R989 += 1, R539 += 1, R541 += 1 };
  s2 -> s2 [0, 65535] { R989 += 1, R539 += 1, R540 += 1, R541 += 1 };
  s2 -> s5 [0, 65535] { R989 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [76, 65535] { R989 += 1, R539 += 1, R541 += 1 };
  s3 -> s1 [0, 74] { R989 += 1, R539 += 1, R541 += 1 };
  s3 -> s2 [0, 65535] { R989 += 1, R539 += 1, R540 += 1, R541 += 1 };
  s3 -> s3 [0, 65535] { R989 += 1, R538 += 1, R539 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [76, 65535] { R989 += 1, R539 += 1, R541 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R989 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R991 += 1, R547 += 1, R548 += 1 };
  s0 -> s2 [0, 65535] { R991 += 1, R548 += 1, R549 += 1, R550 += 1 };
  s0 -> s0 [0, 65535] { R990 += 1, R991 += 1 };
  s0 -> s3 [0, 65535] { R991 += 1, R548 += 1, R550 += 1, R551 += 1 };
  s1 -> s1 [0, 65535] { R991 += 1, R547 += 1, R548 += 1 };
  s1 -> s2 [0, 65535] { R991 += 1, R548 += 1, R549 += 1, R550 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R991 += 1, R548 += 1, R550 += 1, R551 += 1 };
  s2 -> s2 [0, 65535] { R991 += 1, R548 += 1, R549 += 1, R550 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R991 += 1 };
  s2 -> s3 [0, 65535] { R991 += 1, R548 += 1, R550 += 1, R551 += 1 };
  s3 -> s4 [0, 65535] { R991 += 1, R548 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R991 += 1 };
  s3 -> s3 [0, 65535] { R991 += 1, R548 += 1, R550 += 1, R551 += 1 };
  s4 -> s4 [0, 65535] { R991 += 1, R548 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R991 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R991 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 65535] { R993 += 1, R961 += 1 };
  s0 -> s2 [0, 65535] { R993 += 1 };
  s0 -> s0 [0, 65535] { R992 += 1, R993 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R993 += 1, R961 += 1 };
  s1 -> s2 [0, 65535] { R993 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R993 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R995 += 1, R19 += 1 };
  s0 -> s0 [0, 65535] { R994 += 1, R995 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R995 += 1, R19 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 72] { R997 += 1 };
  s0 -> s0 [0, 65535] { R996 += 1, R997 += 1 };
  s0 -> s2 [73, 73] { R997 += 1 };
  s0 -> s3 [73, 73] { R997 += 1 };
  s0 -> s4 [74, 74] { R997 += 1 };
  s0 -> s1 [75, 65535] { R997 += 1 };
  s1 -> s1 [0, 72] { R997 += 1 };
  s1 -> s2 [73, 73] { R997 += 1 };
  s1 -> s3 [73, 73] { R997 += 1 };
  s1 -> s4 [74, 74] { R997 += 1 };
  s1 -> s1 [75, 65535] { R997 += 1 };
  s2 -> s2 [0, 73] { R997 += 1 };
  s2 -> s5 [74, 74] { R997 += 1 };
  s2 -> s2 [75, 65535] { R997 += 1 };
  s4 -> s4 [0, 72] { R997 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s5 [73, 73] { R997 += 1 };
  s4 -> s6 [73, 73] { R997 += 1 };
  s4 -> s4 [74, 65535] { R997 += 1 };
  s5 -> s5 [0, 65535] { R997 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s4, s5, s6, s7;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 72] { R999 += 1, R486 += 1 };
  s0 -> s0 [0, 65535] { R998 += 1, R999 += 1 };
  s0 -> s2 [73, 73] { R999 += 1, R486 += 1 };
  s0 -> s3 [73, 73] { R999 += 1, R486 += 1 };
  s0 -> s1 [74, 65535] { R999 += 1, R486 += 1 };
  s1 -> s1 [0, 72] { R999 += 1, R486 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R999 += 1, R486 += 1 };
  s1 -> s3 [73, 73] { R999 += 1, R486 += 1 };
  s1 -> s1 [74, 65535] { R999 += 1, R486 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R999 += 1, R486 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 72] { R1001 += 1, R488 += 1 };
  s0 -> s0 [0, 65535] { R1000 += 1, R1001 += 1 };
  s0 -> s2 [73, 73] { R1001 += 1, R488 += 1 };
  s0 -> s3 [73, 73] { R1001 += 1, R488 += 1 };
  s0 -> s1 [74, 65535] { R1001 += 1, R488 += 1 };
  s1 -> s1 [0, 72] { R1001 += 1, R488 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R1001 += 1, R488 += 1 };
  s1 -> s3 [73, 73] { R1001 += 1, R488 += 1 };
  s1 -> s1 [74, 65535] { R1001 += 1, R488 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1001 += 1, R488 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 72] { R1003 += 1, R490 += 1, R491 += 1 };
  s0 -> s0 [0, 65535] { R1002 += 1, R1003 += 1 };
  s0 -> s2 [73, 73] { R1003 += 1, R490 += 1, R491 += 1 };
  s0 -> s3 [73, 73] { R1003 += 1, R490 += 1, R491 += 1 };
  s0 -> s1 [74, 65535] { R1003 += 1, R490 += 1, R491 += 1 };
  s1 -> s1 [0, 72] { R1003 += 1, R490 += 1, R491 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R1003 += 1, R490 += 1, R491 += 1 };
  s1 -> s3 [73, 73] { R1003 += 1, R490 += 1, R491 += 1 };
  s1 -> s1 [74, 65535] { R1003 += 1, R490 += 1, R491 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R1003 += 1, R490 += 1, R491 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 72] { R1005 += 1, R496 += 1, R497 += 1 };
  s0 -> s0 [0, 65535] { R1004 += 1, R1005 += 1 };
  s0 -> s2 [73, 73] { R1005 += 1, R496 += 1, R497 += 1 };
  s0 -> s3 [73, 73] { R1005 += 1, R496 += 1, R497 += 1 };
  s0 -> s1 [74, 65535] { R1005 += 1, R496 += 1, R497 += 1 };
  s1 -> s1 [0, 72] { R1005 += 1, R496 += 1, R497 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R1005 += 1, R496 += 1, R497 += 1 };
  s1 -> s3 [73, 73] { R1005 += 1, R496 += 1, R497 += 1 };
  s1 -> s1 [74, 65535] { R1005 += 1, R496 += 1, R497 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1005 += 1, R496 += 1, R497 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 72] { R1007 += 1, R500 += 1, R501 += 1 };
  s0 -> s0 [0, 65535] { R1006 += 1, R1007 += 1 };
  s0 -> s2 [73, 73] { R1007 += 1, R500 += 1, R501 += 1 };
  s0 -> s3 [73, 73] { R1007 += 1, R500 += 1, R501 += 1 };
  s0 -> s1 [74, 65535] { R1007 += 1, R500 += 1, R501 += 1 };
  s1 -> s1 [0, 72] { R1007 += 1, R500 += 1, R501 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R1007 += 1, R500 += 1, R501 += 1 };
  s1 -> s3 [73, 73] { R1007 += 1, R500 += 1, R501 += 1 };
  s1 -> s1 [74, 65535] { R1007 += 1, R500 += 1, R501 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R1007 += 1, R500 += 1, R501 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 72] { R1009 += 1, R504 += 1, R505 += 1 };
  s0 -> s0 [0, 65535] { R1008 += 1, R1009 += 1 };
  s0 -> s2 [73, 73] { R1009 += 1, R504 += 1, R505 += 1 };
  s0 -> s3 [73, 73] { R1009 += 1, R504 += 1, R505 += 1 };
  s0 -> s1 [74, 65535] { R1009 += 1, R504 += 1, R505 += 1 };
  s1 -> s1 [0, 72] { R1009 += 1, R504 += 1, R505 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R1009 += 1, R504 += 1, R505 += 1 };
  s1 -> s3 [73, 73] { R1009 += 1, R504 += 1, R505 += 1 };
  s1 -> s1 [74, 65535] { R1009 += 1, R504 += 1, R505 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1009 += 1, R504 += 1, R505 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 72] { R1011 += 1, R510 += 1, R511 += 1 };
  s0 -> s0 [0, 65535] { R1010 += 1, R1011 += 1 };
  s0 -> s2 [73, 73] { R1011 += 1, R510 += 1, R511 += 1 };
  s0 -> s3 [73, 73] { R1011 += 1, R510 += 1, R511 += 1 };
  s0 -> s1 [74, 65535] { R1011 += 1, R510 += 1, R511 += 1 };
  s1 -> s1 [0, 72] { R1011 += 1, R510 += 1, R511 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R1011 += 1, R510 += 1, R511 += 1 };
  s1 -> s3 [73, 73] { R1011 += 1, R510 += 1, R511 += 1 };
  s1 -> s1 [74, 65535] { R1011 += 1, R510 += 1, R511 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R1011 += 1, R510 += 1, R511 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 72] { R1013 += 1, R516 += 1, R517 += 1 };
  s0 -> s0 [0, 65535] { R1012 += 1, R1013 += 1 };
  s0 -> s2 [73, 73] { R1013 += 1, R516 += 1, R517 += 1 };
  s0 -> s3 [73, 73] { R1013 += 1, R516 += 1, R517 += 1 };
  s0 -> s1 [74, 65535] { R1013 += 1, R516 += 1, R517 += 1 };
  s1 -> s1 [0, 72] { R1013 += 1, R516 += 1, R517 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R1013 += 1, R516 += 1, R517 += 1 };
  s1 -> s3 [73, 73] { R1013 += 1, R516 += 1, R517 += 1 };
  s1 -> s1 [74, 65535] { R1013 += 1, R516 += 1, R517 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R1013 += 1, R516 += 1, R517 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 72] { R1015 += 1, R524 += 1, R525 += 1 };
  s0 -> s0 [0, 65535] { R1014 += 1, R1015 += 1 };
  s0 -> s2 [73, 73] { R1015 += 1, R524 += 1, R525 += 1 };
  s0 -> s3 [73, 73] { R1015 += 1, R524 += 1, R525 += 1 };
  s0 -> s1 [74, 65535] { R1015 += 1, R524 += 1, R525 += 1 };
  s1 -> s1 [0, 72] { R1015 += 1, R524 += 1, R525 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R1015 += 1, R524 += 1, R525 += 1 };
  s1 -> s3 [73, 73] { R1015 += 1, R524 += 1, R525 += 1 };
  s1 -> s1 [74, 65535] { R1015 += 1, R524 += 1, R525 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1015 += 1, R524 += 1, R525 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 72] { R1017 += 1, R534 += 1, R535 += 1 };
  s0 -> s0 [0, 65535] { R1016 += 1, R1017 += 1 };
  s0 -> s2 [73, 73] { R1017 += 1, R534 += 1, R535 += 1 };
  s0 -> s3 [73, 73] { R1017 += 1, R534 += 1, R535 += 1 };
  s0 -> s1 [74, 65535] { R1017 += 1, R534 += 1, R535 += 1 };
  s1 -> s1 [0, 72] { R1017 += 1, R534 += 1, R535 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R1017 += 1, R534 += 1, R535 += 1 };
  s1 -> s3 [73, 73] { R1017 += 1, R534 += 1, R535 += 1 };
  s1 -> s1 [74, 65535] { R1017 += 1, R534 += 1, R535 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1017 += 1, R534 += 1, R535 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 72] { R1019 += 1, R542 += 1, R543 += 1 };
  s0 -> s0 [0, 65535] { R1018 += 1, R1019 += 1 };
  s0 -> s2 [73, 73] { R1019 += 1, R542 += 1, R543 += 1 };
  s0 -> s3 [73, 73] { R1019 += 1, R542 += 1, R543 += 1 };
  s0 -> s1 [74, 65535] { R1019 += 1, R542 += 1, R543 += 1 };
  s1 -> s1 [0, 72] { R1019 += 1, R542 += 1, R543 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R1019 += 1, R542 += 1, R543 += 1 };
  s1 -> s3 [73, 73] { R1019 += 1, R542 += 1, R543 += 1 };
  s1 -> s1 [74, 65535] { R1019 += 1, R542 += 1, R543 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1019 += 1, R542 += 1, R543 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 72] { R1021 += 1, R956 += 1, R957 += 1 };
  s0 -> s2 [0, 72] { R1021 += 1, R957 += 1, R959 += 1 };
  s0 -> s3 [0, 72] { R1021 += 1, R957 += 1, R958 += 1, R959 += 1 };
  s0 -> s0 [0, 65535] { R1020 += 1, R1021 += 1 };
  s0 -> s4 [73, 73] { R1021 += 1, R957 += 1, R959 += 1 };
  s0 -> s5 [73, 73] { R1021 += 1, R956 += 1, R957 += 1 };
  s0 -> s6 [73, 73] { R1021 += 1, R956 += 1, R957 += 1 };
  s0 -> s7 [73, 73] { R1021 += 1, R957 += 1, R959 += 1 };
  s0 -> s8 [73, 73] { R1021 += 1, R957 += 1, R958 += 1, R959 += 1 };
  s0 -> s9 [73, 73] { R1021 += 1, R957 += 1, R958 += 1, R959 += 1 };
  s0 -> s1 [74, 65535] { R1021 += 1, R956 += 1, R957 += 1 };
  s0 -> s3 [74, 65535] { R1021 += 1, R957 += 1, R958 += 1, R959 += 1 };
  s0 -> s10 [76, 76] { R1021 += 1, R957 += 1, R959 += 1 };
  s0 -> s2 [77, 65535] { R1021 += 1, R957 += 1, R959 += 1 };
  s1 -> s1 [0, 72] { R1021 += 1, R956 += 1, R957 += 1 };
  s1 -> s2 [0, 72] { R1021 += 1, R957 += 1, R959 += 1 };
  s1 -> s3 [0, 72] { R1021 += 1, R957 += 1, R958 += 1, R959 += 1 };
  s1 -> s4 [73, 73] { R1021 += 1, R957 += 1, R959 += 1 };
  s1 -> s5 [73, 73] { R1021 += 1, R956 += 1, R957 += 1 };
  s1 -> s6 [73, 73] { R1021 += 1, R956 += 1, R957 += 1 };
  s1 -> s7 [73, 73] { R1021 += 1, R957 += 1, R959 += 1 };
  s1 -> s8 [73, 73] { R1021 += 1, R957 += 1, R958 += 1, R959 += 1 };
  s1 -> s9 [73, 73] { R1021 += 1, R957 += 1, R958 += 1, R959 += 1 };
  s1 -> s1 [74, 65535] { R1021 += 1, R956 += 1, R957 += 1 };
  s1 -> s3 [74, 65535] { R1021 += 1, R957 += 1, R958 += 1, R959 += 1 };
  s1 -> s10 [76, 76] { R1021 += 1, R957 += 1, R959 += 1 };
  s1 -> s2 [77, 65535] { R1021 += 1, R957 += 1, R959 += 1 };
  s2 -> s2 [0, 72] { R1021 += 1, R957 += 1, R959 += 1 };
  s2 -> s4 [73, 73] { R1021 += 1, R957 += 1, R959 += 1 };
  s2 -> s7 [73, 73] { R1021 += 1, R957 += 1, R959 += 1 };
  s2 -> s10 [76, 76] { R1021 += 1, R957 += 1, R959 += 1 };
  s2 -> s2 [77, 65535] { R1021 += 1, R957 += 1, R959 += 1 };
  s3 -> s2 [0, 72] { R1021 += 1, R957 += 1, R959 += 1 };
  s3 -> s3 [0, 72] { R1021 += 1, R957 += 1, R958 += 1, R959 += 1 };
  s3 -> s4 [73, 73] { R1021 += 1, R957 += 1, R959 += 1 };
  s3 -> s7 [73, 73] { R1021 += 1, R957 += 1, R959 += 1 };
  s3 -> s8 [73, 73] { R1021 += 1, R957 += 1, R958 += 1, R959 += 1 };
  s3 -> s9 [73, 73] { R1021 += 1, R957 += 1, R958 += 1, R959 += 1 };
  s3 -> s3 [74, 65535] { R1021 += 1, R957 += 1, R958 += 1, R959 += 1 };
  s3 -> s10 [76, 76] { R1021 += 1, R957 += 1, R959 += 1 };
  s3 -> s2 [77, 65535] { R1021 += 1, R957 += 1, R959 += 1 };
  s4 -> s4 [0, 73] { R1021 += 1, R957 += 1, R959 += 1 };
  s4 -> s11 [76, 76] { R1021 += 1, R957 += 1, R959 += 1 };
  s4 -> s4 [77, 65535] { R1021 += 1, R957 += 1, R959 += 1 };
  s5 -> s4 [0, 73] { R1021 += 1, R957 += 1, R959 += 1 };
  s5 -> s5 [0, 65535] { R1021 += 1, R956 += 1, R957 += 1 };
  s5 -> s8 [0, 65535] { R1021 += 1, R957 += 1, R958 += 1, R959 += 1 };
  s5 -> s11 [76, 76] { R1021 += 1, R957 += 1, R959 += 1 };
  s5 -> s4 [77, 65535] { R1021 += 1, R957 += 1, R959 += 1 };
  s8 -> s4 [0, 73] { R1021 += 1, R957 += 1, R959 += 1 };
  s8 -> s8 [0, 65535] { R1021 += 1, R957 += 1, R958 += 1, R959 += 1 };
  s8 -> s11 [76, 76] { R1021 += 1, R957 += 1, R959 += 1 };
  s8 -> s4 [77, 65535] { R1021 += 1, R957 += 1, R959 += 1 };
  s10 -> s10 [0, 72] { R1021 += 1, R957 += 1, R959 += 1 };
  s10 -> s11 [73, 73] { R1021 += 1, R957 += 1 };
  s10 -> s12 [73, 73] { R1021 += 1, R957 += 1 };
  s10 -> s13 [74, 74] { R1021 += 1, R957 += 1, R959 += 1 };
  s10 -> s10 [74, 65535] { R1021 += 1, R957 += 1 };
  s10 -> s10 [76, 65535] { R1021 += 1, R957 += 1, R959 += 1 };
  s11 -> s11 [0, 73] { R1021 += 1, R957 += 1, R959 += 1 };
  s11 -> s11 [0, 65535] { R1021 += 1, R957 += 1 };
  s11 -> s15 [74, 74] { R1021 += 1, R957 += 1, R959 += 1 };
  s11 -> s11 [76, 65535] { R1021 += 1, R957 += 1, R959 += 1 };
  s13 -> s13 [0, 72] { R1021 += 1, R957 += 1 };
  s13 -> s13 [0, 65535];
  s13 -> s14 [73, 73] { R1021 += 1, R957 += 1 };
  s13 -> s15 [73, 73] { R1021 += 1, R957 += 1 };
  s13 -> s13 [74, 65535] { R1021 += 1, R957 += 1 };
  s14 -> s14 [0, 65535];
  s15 -> s15 [0, 65535] { R1021 += 1, R957 += 1 };
  s15 -> s16 [0, 65535];
  s16 -> s16 [0, 65535];
  accepting s13, s14, s15, s16;
};
};
synchronised {  // Automata constraining P4
automaton P4_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
synchronised {  // Automata constraining P48
automaton P48_0 {
  init s0;
  s0 -> s1 [106, 106];
  accepting s1;
};
};
constraint R2 = R993 && R20 - R993 = -1 && R21 = R993 && R22 - R993 = -1 && R23 = R993 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R487 + R486 + -1*R961 + -1*R957 = 0 && R502 + R500 = 0 && R503 + R501 + -1*R961 + -1*R957 = 0 && R960 + R956 = 0 && R962 + R958 = 0 && R963 + R959 = 0 && R964 = 0 && R965 = R993 && R966 = 0 && R967 = R993 && R968 = 0 && R969 = R993 && R970 = 0 && R971 = R993 && R972 = 0 && R973 = R993 && R974 = 0 && R975 = R993 && R976 = 0 && R977 = R993 && R978 = 0 && R979 = R993 && R980 = 0 && R981 = R993 && R982 = 0 && R983 = R993 && R984 = 0 && R985 = R993 && R986 = 0 && R987 = R993 && R988 = 0 && R989 = R993 && R990 = 0 && R991 = R993 && R992 = 0 && R996 = 0 && R997 = 0 && R1020 = 0 && R1021 = 0 && R11 < 1 && R12 < 1 && R489 + R488 < 1 && -1*R509 + -1*R506 < 1 && R515 + R512 < 1 && -1*R961 + -1*R957 < 1 && 0 < R993 && (R507 + R504 != 0 || R508 + R505 + -1*R961 + -1*R957 = 0 || R509 + R506 < 1) && (R509 + R506 != 0 || R533 + R528 = 0 || (R522 + R518 = 0 && R523 + R519 = 0)) && (R509 + R506 != 0 || R533 + R528 = 0 || (R531 + R526 = 0 && R532 + R527 = 0)) && (R509 + R506 != 0 || R533 + R528 = 0 || (R540 + R536 = 0 && R541 + R537 = 0)) && (R509 + R506 != 0 || ((R507 + R504 != 0 || R508 + R505 + -1*R961 + -1*R957 = 0 || R961 + R957 < 1) && (R507 + R504 = 0 || R961 + R957 < 1))) && (R513 + R510 != 0 || R514 + R511 + -1*R961 + -1*R957 = 0 || (R509 + R506 = 0 && R961 + R957 = 0)) && (R520 + R516 != 0 || R521 + R517 + -1*R961 + -1*R957 = 0 || (R509 + R506 = 0 && R961 + R957 = 0)) && (R522 + R518 != 0 || R509 + R506 + -1*R523 + -1*R519 = 0 || R509 + R506 < 1) && (R529 + R524 != 0 || R530 + R525 + -1*R961 + -1*R957 = 0 || (R509 + R506 = 0 && R961 + R957 = 0)) && (R531 + R526 != 0 || R509 + R506 + -1*R532 + -1*R527 = 0 || R509 + R506 < 1) && (R538 + R534 != 0 || R539 + R535 + -1*R961 + -1*R957 = 0 || (R509 + R506 = 0 && R961 + R957 = 0)) && (R540 + R536 != 0 || R509 + R506 + -1*R541 + -1*R537 = 0 || R509 + R506 < 1) && (R547 + R542 != 0 || R548 + R543 + -1*R961 + -1*R957 = 0 || (R509 + R506 = 0 && R961 + R957 = 0)) && (R19 = 0 || (R994 = 0 && R995 = 0)) && (R19 = 0 || (R998 = 0 && R999 = 0)) && (R19 = 0 || (R1000 = 0 && R1001 = 0)) && (R19 = 0 || (R1002 = 0 && R1003 = 0)) && (R19 = 0 || (R1004 = 0 && R1005 = 0)) && (R19 = 0 || (R1006 = 0 && R1007 = 0)) && (R19 = 0 || (R1008 = 0 && R1009 = 0)) && (R19 = 0 || (R1010 = 0 && R1011 = 0)) && (R19 = 0 || (R1012 = 0 && R1013 = 0)) && (R19 = 0 || (R1014 = 0 && R1015 = 0)) && (R19 = 0 || (R1016 = 0 && R1017 = 0)) && (R19 = 0 || (R1018 = 0 && R1019 = 0)) && (R495 + R492 = 0 || (R493 + R490 = 0 && R494 + R491 = 0)) && (R495 + R492 = 0 || (R498 + R496 = 0 && R499 + R497 = 0)) && (R507 + R504 = 0 || R509 + R506 < 1) && (R513 + R510 = 0 || (R509 + R506 = 0 && R961 + R957 = 0)) && (R520 + R516 = 0 || (R509 + R506 = 0 && R961 + R957 = 0)) && (R522 + R518 = 0 || R509 + R506 < 1) && (R529 + R524 = 0 || (R509 + R506 = 0 && R961 + R957 = 0)) && (R531 + R526 = 0 || R509 + R506 < 1) && (R538 + R534 = 0 || (R509 + R506 = 0 && R961 + R957 = 0)) && (R540 + R536 = 0 || R509 + R506 < 1) && (R547 + R542 = 0 || (R509 + R506 = 0 && R961 + R957 = 0)) && (R551 + R546 = 0 || (R549 + R544 = 0 && R550 + R545 = 0));
// End of Parikh automata intersection problem
