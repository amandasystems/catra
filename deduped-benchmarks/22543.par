// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R10246, R10247, R10248, R10249, R10250, R10251, R11, R12, R14062, R14063, R14064, R14065, R14066, R14067, R14068, R14069, R14070, R14071, R14072, R14073, R14074, R14075, R14076, R14077, R14078, R14079, R14080, R14081, R14082, R14083, R14084, R14085, R14086, R14087, R14088, R14089, R14090, R14091, R14092, R14093, R14094, R14095, R14096, R14097, R14098, R14099, R14100, R14101, R14102, R14103, R14104, R14105, R14106, R14107, R14108, R14109, R14110, R14111, R14112, R14113, R14114, R14115, R14116, R14117, R14118, R14119, R14120, R14121, R14122, R14123, R14124, R14125, R14126, R14127, R14128, R14129, R14130, R14131, R14132, R14133, R14134, R14135, R14136, R14137, R14138, R14139, R14140, R14141, R14142, R14143, R14144, R14145, R14146, R14147, R14148, R14149, R14150, R14151, R14152, R14153, R14154, R14155, R14156, R14157, R14158, R14159, R14160, R14161, R14162, R14163, R14164, R14165, R14166, R14167, R14168, R14169, R14170, R14171, R14172, R14173, R14174, R14175, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R70, R71, R72, R73, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [81, 81];
  s0 -> s0 [82, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [81, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 80];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [81, 81];
  s0 -> s1 [82, 65535];
  s1 -> s1 [0, 80];
  s1 -> s2 [81, 81];
  s1 -> s1 [82, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s1 [0, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s1 [0, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R14096 += 1, R14097 += 1 };
  s0 -> s1 [0, 65535] { R14097 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R14097 += 1, R19 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 80] { R14099 += 1 };
  s0 -> s0 [0, 65535] { R14098 += 1, R14099 += 1 };
  s0 -> s2 [81, 81] { R14099 += 1 };
  s0 -> s3 [81, 81] { R14099 += 1 };
  s0 -> s1 [83, 65535] { R14099 += 1 };
  s1 -> s1 [0, 80] { R14099 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R14099 += 1 };
  s1 -> s3 [81, 81] { R14099 += 1 };
  s1 -> s1 [83, 65535] { R14099 += 1 };
  s2 -> s2 [0, 81] { R14099 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [83, 65535] { R14099 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 80] { R14101 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R14100 += 1, R14101 += 1 };
  s0 -> s2 [81, 81] { R14101 += 1, R38 += 1 };
  s0 -> s3 [81, 81] { R14101 += 1, R38 += 1 };
  s0 -> s1 [82, 65535] { R14101 += 1, R38 += 1 };
  s1 -> s1 [0, 80] { R14101 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R14101 += 1, R38 += 1 };
  s1 -> s3 [81, 81] { R14101 += 1, R38 += 1 };
  s1 -> s1 [82, 65535] { R14101 += 1, R38 += 1 };
  s2 -> s2 [0, 65535] { R14101 += 1, R38 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 80] { R14103 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R14102 += 1, R14103 += 1 };
  s0 -> s2 [81, 81] { R14103 += 1, R40 += 1 };
  s0 -> s3 [81, 81] { R14103 += 1, R40 += 1 };
  s0 -> s1 [82, 65535] { R14103 += 1, R40 += 1 };
  s1 -> s1 [0, 80] { R14103 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R14103 += 1, R40 += 1 };
  s1 -> s3 [81, 81] { R14103 += 1, R40 += 1 };
  s1 -> s1 [82, 65535] { R14103 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R14103 += 1, R40 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 80] { R14105 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R14104 += 1, R14105 += 1 };
  s0 -> s2 [81, 81] { R14105 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [81, 81] { R14105 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [82, 65535] { R14105 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 80] { R14105 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R14105 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [81, 81] { R14105 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [82, 65535] { R14105 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R14105 += 1, R42 += 1, R43 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 80] { R14107 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R14106 += 1, R14107 += 1 };
  s0 -> s2 [81, 81] { R14107 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [81, 81] { R14107 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [82, 65535] { R14107 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 80] { R14107 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R14107 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [81, 81] { R14107 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [82, 65535] { R14107 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R14107 += 1, R46 += 1, R47 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 80] { R14109 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R14108 += 1, R14109 += 1 };
  s0 -> s2 [81, 81] { R14109 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [81, 81] { R14109 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [82, 65535] { R14109 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 80] { R14109 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R14109 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [81, 81] { R14109 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [82, 65535] { R14109 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R14109 += 1, R52 += 1, R53 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 80] { R14111 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R14110 += 1, R14111 += 1 };
  s0 -> s2 [81, 81] { R14111 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [81, 81] { R14111 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [82, 65535] { R14111 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 80] { R14111 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R14111 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [81, 81] { R14111 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [82, 65535] { R14111 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535] { R14111 += 1, R56 += 1, R57 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 80] { R14113 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R14112 += 1, R14113 += 1 };
  s0 -> s2 [81, 81] { R14113 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [81, 81] { R14113 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [82, 65535] { R14113 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 80] { R14113 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R14113 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [81, 81] { R14113 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [82, 65535] { R14113 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R14113 += 1, R62 += 1, R63 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 80] { R14133 += 1 };
  s0 -> s0 [0, 65535] { R14132 += 1, R14133 += 1 };
  s0 -> s2 [81, 81] { R14133 += 1 };
  s0 -> s1 [82, 65535] { R14133 += 1 };
  s1 -> s1 [0, 80] { R14133 += 1 };
  s1 -> s2 [81, 81] { R14133 += 1 };
  s1 -> s1 [82, 65535] { R14133 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R14133 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R14134 += 1, R14135 += 1 };
  s0 -> s1 [0, 65535] { R14135 += 1, R1 += 1 };
  s1 -> s1 [0, 65535] { R14135 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 80] { R14137 += 1 };
  s0 -> s0 [0, 65535] { R14136 += 1, R14137 += 1 };
  s0 -> s2 [0, 65535] { R14137 += 1, R8 += 1 };
  s0 -> s3 [81, 81] { R14137 += 1 };
  s0 -> s1 [82, 65535] { R14137 += 1 };
  s1 -> s1 [0, 80] { R14137 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [81, 81] { R14137 += 1 };
  s1 -> s1 [82, 65535] { R14137 += 1 };
  s2 -> s1 [0, 80] { R14137 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R14137 += 1, R8 += 1 };
  s2 -> s3 [81, 81] { R14137 += 1 };
  s2 -> s1 [82, 65535] { R14137 += 1 };
  s3 -> s3 [0, 65535] { R14137 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 80] { R14139 += 1, R14077 += 1 };
  s0 -> s0 [0, 65535] { R14138 += 1, R14139 += 1 };
  s0 -> s2 [0, 65535] { R14139 += 1, R14076 += 1, R14077 += 1 };
  s0 -> s1 [82, 65535] { R14139 += 1, R14077 += 1 };
  s1 -> s1 [0, 80] { R14139 += 1, R14077 += 1 };
  s1 -> s1 [0, 65535] { R14139 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [82, 65535] { R14139 += 1, R14077 += 1 };
  s2 -> s1 [0, 80] { R14139 += 1, R14077 += 1 };
  s2 -> s2 [0, 65535] { R14139 += 1, R14076 += 1, R14077 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [82, 65535] { R14139 += 1, R14077 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s0 [0, 65535] { R14140 += 1, R14141 += 1 };
  s0 -> s1 [0, 65535] { R14141 += 1, R14079 += 1, R17 += 1 };
  s0 -> s2 [0, 65535] { R14141 += 1, R14078 += 1, R14079 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R14141 += 1 };
  s1 -> s1 [0, 65535] { R14141 += 1, R14079 += 1, R17 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R14141 += 1, R14079 += 1, R17 += 1 };
  s2 -> s2 [0, 65535] { R14141 += 1, R14078 += 1, R14079 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R14141 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 65535] { R14143 += 1, R14081 += 1 };
  s0 -> s0 [0, 65535] { R14142 += 1, R14143 += 1 };
  s0 -> s2 [0, 65535] { R14143 += 1, R14080 += 1, R14081 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R14143 += 1, R14081 += 1 };
  s1 -> s4 [0, 65535] { R14143 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R14143 += 1, R14081 += 1 };
  s2 -> s2 [0, 65535] { R14143 += 1, R14080 += 1, R14081 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R14143 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_23 {
  init s0;
  s0 -> s0 [0, 65535] { R14144 += 1, R14145 += 1 };
  s0 -> s1 [0, 65535] { R14145 += 1, R14083 += 1, R67 += 1 };
  s0 -> s2 [0, 65535] { R14145 += 1, R14082 += 1, R14083 += 1 };
  s1 -> s4 [0, 65535] { R14145 += 1 };
  s1 -> s1 [0, 65535] { R14145 += 1, R14083 += 1, R67 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R14145 += 1, R14083 += 1, R67 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R14145 += 1, R14082 += 1, R14083 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R14145 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 81] { R14147 += 1, R14085 += 1 };
  s0 -> s2 [0, 65535] { R14147 += 1, R14084 += 1, R14085 += 1 };
  s0 -> s3 [0, 65535] { R14147 += 1, R14085 += 1, R69 += 1 };
  s0 -> s0 [0, 65535] { R14146 += 1, R14147 += 1 };
  s0 -> s1 [83, 65535] { R14147 += 1, R14085 += 1 };
  s1 -> s1 [0, 81] { R14147 += 1, R14085 += 1 };
  s1 -> s1 [0, 65535] { R14147 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [83, 65535] { R14147 += 1, R14085 += 1 };
  s2 -> s1 [0, 81] { R14147 += 1, R14085 += 1 };
  s2 -> s2 [0, 65535] { R14147 += 1, R14084 += 1, R14085 += 1 };
  s2 -> s3 [0, 65535] { R14147 += 1, R14085 += 1, R69 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [83, 65535] { R14147 += 1, R14085 += 1 };
  s3 -> s1 [0, 81] { R14147 += 1, R14085 += 1 };
  s3 -> s4 [0, 65535] { R14147 += 1 };
  s3 -> s3 [0, 65535] { R14147 += 1, R14085 += 1, R69 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [83, 65535] { R14147 += 1, R14085 += 1 };
  s4 -> s4 [0, 65535] { R14147 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 81] { R14149 += 1, R14087 += 1, R73 += 1 };
  s0 -> s0 [0, 65535] { R14148 += 1, R14149 += 1 };
  s0 -> s2 [0, 65535] { R14149 += 1, R14087 += 1, R72 += 1, R73 += 1 };
  s0 -> s3 [0, 65535] { R14149 += 1, R14086 += 1, R14087 += 1 };
  s0 -> s1 [83, 65535] { R14149 += 1, R14087 += 1, R73 += 1 };
  s1 -> s1 [0, 81] { R14149 += 1, R14087 += 1, R73 += 1 };
  s1 -> s1 [0, 65535] { R14149 += 1, R14087 += 1 };
  s1 -> s5 [0, 65535] { R14149 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [83, 65535] { R14149 += 1, R14087 += 1, R73 += 1 };
  s2 -> s1 [0, 81] { R14149 += 1, R14087 += 1, R73 += 1 };
  s2 -> s2 [0, 65535] { R14149 += 1, R14087 += 1, R72 += 1, R73 += 1 };
  s2 -> s5 [0, 65535] { R14149 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [83, 65535] { R14149 += 1, R14087 += 1, R73 += 1 };
  s3 -> s1 [0, 81] { R14149 += 1, R14087 += 1, R73 += 1 };
  s3 -> s2 [0, 65535] { R14149 += 1, R14087 += 1, R72 += 1, R73 += 1 };
  s3 -> s3 [0, 65535] { R14149 += 1, R14086 += 1, R14087 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [83, 65535] { R14149 += 1, R14087 += 1, R73 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R14149 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R14151 += 1, R14089 += 1 };
  s0 -> s2 [0, 65535] { R14151 += 1, R14088 += 1, R14089 += 1 };
  s0 -> s0 [0, 65535] { R14150 += 1, R14151 += 1 };
  s1 -> s1 [0, 65535] { R14151 += 1, R14089 += 1 };
  s1 -> s4 [0, 65535] { R14151 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R14151 += 1, R14089 += 1 };
  s2 -> s2 [0, 65535] { R14151 += 1, R14088 += 1, R14089 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R14151 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 82] { R14153 += 1, R14091 += 1, R14065 += 1 };
  s0 -> s0 [0, 65535] { R14152 += 1, R14153 += 1 };
  s0 -> s2 [0, 65535] { R14153 += 1, R14090 += 1, R14091 += 1 };
  s0 -> s3 [0, 65535] { R14153 += 1, R14091 += 1, R14064 += 1, R14065 += 1 };
  s0 -> s4 [83, 83] { R14153 += 1, R14091 += 1, R14065 += 1 };
  s0 -> s1 [84, 65535] { R14153 += 1, R14091 += 1, R14065 += 1 };
  s1 -> s1 [0, 82] { R14153 += 1, R14091 += 1, R14065 += 1 };
  s1 -> s4 [83, 83] { R14153 += 1, R14091 += 1, R14065 += 1 };
  s1 -> s1 [84, 65535] { R14153 += 1, R14091 += 1, R14065 += 1 };
  s2 -> s1 [0, 82] { R14153 += 1, R14091 += 1, R14065 += 1 };
  s2 -> s2 [0, 65535] { R14153 += 1, R14090 += 1, R14091 += 1 };
  s2 -> s3 [0, 65535] { R14153 += 1, R14091 += 1, R14064 += 1, R14065 += 1 };
  s2 -> s4 [83, 83] { R14153 += 1, R14091 += 1, R14065 += 1 };
  s2 -> s1 [84, 65535] { R14153 += 1, R14091 += 1, R14065 += 1 };
  s3 -> s1 [0, 82] { R14153 += 1, R14091 += 1, R14065 += 1 };
  s3 -> s3 [0, 65535] { R14153 += 1, R14091 += 1, R14064 += 1, R14065 += 1 };
  s3 -> s4 [83, 83] { R14153 += 1, R14091 += 1, R14065 += 1 };
  s3 -> s1 [84, 65535] { R14153 += 1, R14091 += 1, R14065 += 1 };
  s4 -> s5 [0, 65535] { R14153 += 1 };
  s4 -> s4 [0, 65535] { R14153 += 1, R14091 += 1, R14065 += 1 };
  s4 -> s6 [0, 65535] { R14153 += 1, R14091 += 1 };
  s4 -> s7 [0, 65535];
  s5 -> s5 [0, 65535] { R14153 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s5 [0, 65535] { R14153 += 1 };
  s6 -> s6 [0, 65535] { R14153 += 1, R14091 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s4, s5, s6, s7;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R14155 += 1, R14093 += 1, R14070 += 1, R14071 += 1 };
  s0 -> s2 [0, 65535] { R14155 += 1, R14093 += 1, R14069 += 1, R14070 += 1 };
  s0 -> s0 [0, 65535] { R14154 += 1, R14155 += 1 };
  s0 -> s3 [0, 65535] { R14155 += 1, R14092 += 1, R14093 += 1 };
  s1 -> s6 [0, 65535] { R14155 += 1, R14093 += 1 };
  s1 -> s1 [0, 65535] { R14155 += 1, R14093 += 1, R14070 += 1, R14071 += 1 };
  s1 -> s5 [0, 65535] { R14155 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R14155 += 1, R14093 += 1, R14070 += 1, R14071 += 1 };
  s2 -> s5 [0, 65535] { R14155 += 1 };
  s2 -> s2 [0, 65535] { R14155 += 1, R14093 += 1, R14069 += 1, R14070 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R14155 += 1, R14093 += 1, R14070 += 1, R14071 += 1 };
  s3 -> s2 [0, 65535] { R14155 += 1, R14093 += 1, R14069 += 1, R14070 += 1 };
  s3 -> s3 [0, 65535] { R14155 += 1, R14092 += 1, R14093 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R14155 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R14155 += 1, R14093 += 1 };
  s6 -> s5 [0, 65535] { R14155 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 81] { R14157 += 1, R14095 += 1, R14075 += 1 };
  s0 -> s2 [0, 65535] { R14157 += 1, R14094 += 1, R14095 += 1 };
  s0 -> s3 [0, 65535] { R14157 += 1, R14095 += 1, R14074 += 1, R14075 += 1 };
  s0 -> s0 [0, 65535] { R14156 += 1, R14157 += 1 };
  s0 -> s4 [82, 82] { R14157 += 1, R14095 += 1, R14075 += 1 };
  s0 -> s5 [82, 82] { R14157 += 1, R14095 += 1, R14075 += 1 };
  s0 -> s1 [84, 65535] { R14157 += 1, R14095 += 1, R14075 += 1 };
  s1 -> s1 [0, 81] { R14157 += 1, R14095 += 1, R14075 += 1 };
  s1 -> s1 [0, 65535] { R14157 += 1, R14095 += 1 };
  s1 -> s6 [0, 65535] { R14157 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s4 [82, 82] { R14157 += 1, R14095 += 1, R14075 += 1 };
  s1 -> s5 [82, 82] { R14157 += 1, R14095 += 1, R14075 += 1 };
  s1 -> s1 [84, 65535] { R14157 += 1, R14095 += 1, R14075 += 1 };
  s2 -> s1 [0, 81] { R14157 += 1, R14095 += 1, R14075 += 1 };
  s2 -> s2 [0, 65535] { R14157 += 1, R14094 += 1, R14095 += 1 };
  s2 -> s3 [0, 65535] { R14157 += 1, R14095 += 1, R14074 += 1, R14075 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s4 [82, 82] { R14157 += 1, R14095 += 1, R14075 += 1 };
  s2 -> s5 [82, 82] { R14157 += 1, R14095 += 1, R14075 += 1 };
  s2 -> s1 [84, 65535] { R14157 += 1, R14095 += 1, R14075 += 1 };
  s3 -> s1 [0, 81] { R14157 += 1, R14095 += 1, R14075 += 1 };
  s3 -> s3 [0, 65535] { R14157 += 1, R14095 += 1, R14074 += 1, R14075 += 1 };
  s3 -> s6 [0, 65535] { R14157 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s4 [82, 82] { R14157 += 1, R14095 += 1, R14075 += 1 };
  s3 -> s5 [82, 82] { R14157 += 1, R14095 += 1, R14075 += 1 };
  s3 -> s1 [84, 65535] { R14157 += 1, R14095 += 1, R14075 += 1 };
  s4 -> s4 [0, 65535] { R14157 += 1, R14095 += 1 };
  s4 -> s6 [0, 65535] { R14157 += 1 };
  s4 -> s7 [0, 65535];
  s5 -> s5 [0, 82] { R14157 += 1, R14095 += 1, R14075 += 1 };
  s5 -> s5 [0, 65535] { R14157 += 1, R14095 += 1 };
  s5 -> s6 [0, 65535] { R14157 += 1 };
  s5 -> s7 [0, 65535];
  s5 -> s5 [84, 65535] { R14157 += 1, R14095 += 1, R14075 += 1 };
  s6 -> s6 [0, 65535] { R14157 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R14159 += 1, R14115 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R14158 += 1, R14159 += 1 };
  s0 -> s2 [0, 65535] { R14159 += 1, R14114 += 1, R14115 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R14159 += 1, R14115 += 1, R18 += 1 };
  s1 -> s4 [0, 65535] { R14159 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R14159 += 1, R14115 += 1, R18 += 1 };
  s2 -> s2 [0, 65535] { R14159 += 1, R14114 += 1, R14115 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R14159 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 80] { R14161 += 1, R14117 += 1 };
  s0 -> s0 [0, 65535] { R14160 += 1, R14161 += 1 };
  s0 -> s2 [0, 65535] { R14161 += 1, R14116 += 1, R14117 += 1 };
  s0 -> s3 [81, 81] { R14161 += 1, R14117 += 1 };
  s0 -> s4 [81, 81] { R14161 += 1, R14117 += 1 };
  s0 -> s5 [82, 82] { R14161 += 1, R14117 += 1 };
  s0 -> s1 [83, 65535] { R14161 += 1, R14117 += 1 };
  s1 -> s1 [0, 80] { R14161 += 1, R14117 += 1 };
  s1 -> s3 [81, 81] { R14161 += 1, R14117 += 1 };
  s1 -> s4 [81, 81] { R14161 += 1, R14117 += 1 };
  s1 -> s5 [82, 82] { R14161 += 1, R14117 += 1 };
  s1 -> s1 [83, 65535] { R14161 += 1, R14117 += 1 };
  s2 -> s1 [0, 80] { R14161 += 1, R14117 += 1 };
  s2 -> s2 [0, 65535] { R14161 += 1, R14116 += 1, R14117 += 1 };
  s2 -> s3 [81, 81] { R14161 += 1, R14117 += 1 };
  s2 -> s4 [81, 81] { R14161 += 1, R14117 += 1 };
  s2 -> s5 [82, 82] { R14161 += 1, R14117 += 1 };
  s2 -> s1 [83, 65535] { R14161 += 1, R14117 += 1 };
  s4 -> s4 [0, 81] { R14161 += 1, R14117 += 1 };
  s4 -> s7 [82, 82] { R14161 += 1, R14117 += 1 };
  s4 -> s4 [83, 65535] { R14161 += 1, R14117 += 1 };
  s5 -> s5 [0, 80] { R14161 += 1, R14117 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R14161 += 1 };
  s5 -> s7 [81, 81] { R14161 += 1, R14117 += 1 };
  s5 -> s8 [81, 81] { R14161 += 1, R14117 += 1 };
  s5 -> s5 [82, 65535] { R14161 += 1, R14117 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s9 [0, 65535] { R14161 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R14161 += 1, R14117 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R14161 += 1 };
  s9 -> s9 [0, 65535] { R14161 += 1 };
  s9 -> s6 [0, 65535];
  accepting s8, s5, s9, s6, s7;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 80] { R14163 += 1, R14119 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R14162 += 1, R14163 += 1 };
  s0 -> s2 [0, 65535] { R14163 += 1, R14118 += 1, R14119 += 1 };
  s0 -> s3 [81, 81] { R14163 += 1, R14119 += 1, R66 += 1 };
  s0 -> s4 [81, 81] { R14163 += 1, R14119 += 1, R66 += 1 };
  s0 -> s1 [82, 65535] { R14163 += 1, R14119 += 1, R66 += 1 };
  s1 -> s1 [0, 80] { R14163 += 1, R14119 += 1, R66 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R14163 += 1 };
  s1 -> s3 [81, 81] { R14163 += 1, R14119 += 1, R66 += 1 };
  s1 -> s4 [81, 81] { R14163 += 1, R14119 += 1, R66 += 1 };
  s1 -> s1 [82, 65535] { R14163 += 1, R14119 += 1, R66 += 1 };
  s2 -> s1 [0, 80] { R14163 += 1, R14119 += 1, R66 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R14163 += 1, R14118 += 1, R14119 += 1 };
  s2 -> s3 [81, 81] { R14163 += 1, R14119 += 1, R66 += 1 };
  s2 -> s4 [81, 81] { R14163 += 1, R14119 += 1, R66 += 1 };
  s2 -> s1 [82, 65535] { R14163 += 1, R14119 += 1, R66 += 1 };
  s3 -> s3 [0, 65535] { R14163 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R14163 += 1, R14119 += 1, R66 += 1 };
  s4 -> s6 [0, 65535] { R14163 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R14163 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 80] { R14165 += 1, R14121 += 1, R68 += 1 };
  s0 -> s0 [0, 65535] { R14164 += 1, R14165 += 1 };
  s0 -> s2 [0, 65535] { R14165 += 1, R14120 += 1, R14121 += 1 };
  s0 -> s3 [81, 81] { R14165 += 1, R14121 += 1, R68 += 1 };
  s0 -> s4 [81, 81] { R14165 += 1, R14121 += 1, R68 += 1 };
  s0 -> s1 [82, 65535] { R14165 += 1, R14121 += 1, R68 += 1 };
  s1 -> s1 [0, 80] { R14165 += 1, R14121 += 1, R68 += 1 };
  s1 -> s1 [0, 65535] { R14165 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [81, 81] { R14165 += 1, R14121 += 1, R68 += 1 };
  s1 -> s4 [81, 81] { R14165 += 1, R14121 += 1, R68 += 1 };
  s1 -> s1 [82, 65535] { R14165 += 1, R14121 += 1, R68 += 1 };
  s2 -> s1 [0, 80] { R14165 += 1, R14121 += 1, R68 += 1 };
  s2 -> s2 [0, 65535] { R14165 += 1, R14120 += 1, R14121 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [81, 81] { R14165 += 1, R14121 += 1, R68 += 1 };
  s2 -> s4 [81, 81] { R14165 += 1, R14121 += 1, R68 += 1 };
  s2 -> s1 [82, 65535] { R14165 += 1, R14121 += 1, R68 += 1 };
  s3 -> s3 [0, 65535] { R14165 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R14165 += 1, R14121 += 1, R68 += 1 };
  s4 -> s5 [0, 65535] { R14165 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R14165 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 80] { R14167 += 1, R14123 += 1, R70 += 1, R71 += 1 };
  s0 -> s2 [0, 65535] { R14167 += 1, R14122 += 1, R14123 += 1 };
  s0 -> s0 [0, 65535] { R14166 += 1, R14167 += 1 };
  s0 -> s3 [81, 81] { R14167 += 1, R14123 += 1, R70 += 1, R71 += 1 };
  s0 -> s4 [81, 81] { R14167 += 1, R14123 += 1, R70 += 1, R71 += 1 };
  s0 -> s1 [82, 65535] { R14167 += 1, R14123 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 80] { R14167 += 1, R14123 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 65535] { R14167 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [81, 81] { R14167 += 1, R14123 += 1, R70 += 1, R71 += 1 };
  s1 -> s4 [81, 81] { R14167 += 1, R14123 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [82, 65535] { R14167 += 1, R14123 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [0, 80] { R14167 += 1, R14123 += 1, R70 += 1, R71 += 1 };
  s2 -> s2 [0, 65535] { R14167 += 1, R14122 += 1, R14123 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [81, 81] { R14167 += 1, R14123 += 1, R70 += 1, R71 += 1 };
  s2 -> s4 [81, 81] { R14167 += 1, R14123 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [82, 65535] { R14167 += 1, R14123 += 1, R70 += 1, R71 += 1 };
  s3 -> s3 [0, 65535] { R14167 += 1, R14123 += 1, R70 += 1, R71 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R14167 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R14167 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R14167 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 80] { R14169 += 1, R14125 += 1, R10246 += 1, R10247 += 1 };
  s0 -> s2 [0, 80] { R14169 += 1, R14125 += 1, R10247 += 1, R10248 += 1 };
  s0 -> s0 [0, 65535] { R14168 += 1, R14169 += 1 };
  s0 -> s3 [0, 65535] { R14169 += 1, R14124 += 1, R14125 += 1 };
  s0 -> s4 [81, 81] { R14169 += 1, R14125 += 1, R10247 += 1, R10248 += 1 };
  s0 -> s5 [81, 81] { R14169 += 1, R14125 += 1, R10247 += 1, R10248 += 1 };
  s0 -> s6 [81, 81] { R14169 += 1, R14125 += 1, R10246 += 1, R10247 += 1 };
  s0 -> s7 [81, 81] { R14169 += 1, R14125 += 1, R10246 += 1, R10247 += 1 };
  s0 -> s1 [82, 65535] { R14169 += 1, R14125 += 1, R10246 += 1, R10247 += 1 };
  s0 -> s2 [82, 65535] { R14169 += 1, R14125 += 1, R10247 += 1, R10248 += 1 };
  s1 -> s1 [0, 80] { R14169 += 1, R14125 += 1, R10246 += 1, R10247 += 1 };
  s1 -> s2 [0, 80] { R14169 += 1, R14125 += 1, R10247 += 1, R10248 += 1 };
  s1 -> s4 [81, 81] { R14169 += 1, R14125 += 1, R10247 += 1, R10248 += 1 };
  s1 -> s5 [81, 81] { R14169 += 1, R14125 += 1, R10247 += 1, R10248 += 1 };
  s1 -> s6 [81, 81] { R14169 += 1, R14125 += 1, R10246 += 1, R10247 += 1 };
  s1 -> s7 [81, 81] { R14169 += 1, R14125 += 1, R10246 += 1, R10247 += 1 };
  s1 -> s1 [82, 65535] { R14169 += 1, R14125 += 1, R10246 += 1, R10247 += 1 };
  s1 -> s2 [82, 65535] { R14169 += 1, R14125 += 1, R10247 += 1, R10248 += 1 };
  s2 -> s11 [0, 80] { R14169 += 1, R14125 += 1 };
  s2 -> s2 [0, 80] { R14169 += 1, R14125 += 1, R10247 += 1, R10248 += 1 };
  s2 -> s4 [81, 81] { R14169 += 1, R14125 += 1, R10247 += 1, R10248 += 1 };
  s2 -> s5 [81, 81] { R14169 += 1, R14125 += 1, R10247 += 1, R10248 += 1 };
  s2 -> s8 [81, 81] { R14169 += 1, R14125 += 1 };
  s2 -> s12 [81, 81] { R14169 += 1, R14125 += 1 };
  s2 -> s11 [82, 65535] { R14169 += 1, R14125 += 1 };
  s2 -> s2 [82, 65535] { R14169 += 1, R14125 += 1, R10247 += 1, R10248 += 1 };
  s3 -> s1 [0, 80] { R14169 += 1, R14125 += 1, R10246 += 1, R10247 += 1 };
  s3 -> s2 [0, 80] { R14169 += 1, R14125 += 1, R10247 += 1, R10248 += 1 };
  s3 -> s3 [0, 65535] { R14169 += 1, R14124 += 1, R14125 += 1 };
  s3 -> s4 [81, 81] { R14169 += 1, R14125 += 1, R10247 += 1, R10248 += 1 };
  s3 -> s5 [81, 81] { R14169 += 1, R14125 += 1, R10247 += 1, R10248 += 1 };
  s3 -> s6 [81, 81] { R14169 += 1, R14125 += 1, R10246 += 1, R10247 += 1 };
  s3 -> s7 [81, 81] { R14169 += 1, R14125 += 1, R10246 += 1, R10247 += 1 };
  s3 -> s1 [82, 65535] { R14169 += 1, R14125 += 1, R10246 += 1, R10247 += 1 };
  s3 -> s2 [82, 65535] { R14169 += 1, R14125 += 1, R10247 += 1, R10248 += 1 };
  s5 -> s5 [0, 65535] { R14169 += 1, R14125 += 1, R10247 += 1, R10248 += 1 };
  s5 -> s8 [0, 65535] { R14169 += 1, R14125 += 1 };
  s7 -> s5 [0, 65535] { R14169 += 1, R14125 += 1, R10247 += 1, R10248 += 1 };
  s7 -> s7 [0, 65535] { R14169 += 1, R14125 += 1, R10246 += 1, R10247 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R14169 += 1, R14125 += 1 };
  s8 -> s10 [0, 65535] { R14169 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R14169 += 1 };
  s11 -> s11 [0, 80] { R14169 += 1, R14125 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R14169 += 1 };
  s11 -> s8 [81, 81] { R14169 += 1, R14125 += 1 };
  s11 -> s12 [81, 81] { R14169 += 1, R14125 += 1 };
  s11 -> s11 [82, 65535] { R14169 += 1, R14125 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R14169 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 80] { R14171 += 1, R14127 += 1, R14062 += 1, R14063 += 1 };
  s0 -> s2 [0, 65535] { R14171 += 1, R14126 += 1, R14127 += 1 };
  s0 -> s0 [0, 65535] { R14170 += 1, R14171 += 1 };
  s0 -> s3 [81, 81] { R14171 += 1, R14127 += 1, R14062 += 1, R14063 += 1 };
  s0 -> s4 [81, 81] { R14171 += 1, R14127 += 1, R14062 += 1, R14063 += 1 };
  s0 -> s1 [82, 65535] { R14171 += 1, R14127 += 1, R14062 += 1, R14063 += 1 };
  s1 -> s1 [0, 80] { R14171 += 1, R14127 += 1, R14062 += 1, R14063 += 1 };
  s1 -> s1 [0, 65535] { R14171 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [81, 81] { R14171 += 1, R14127 += 1, R14062 += 1, R14063 += 1 };
  s1 -> s4 [81, 81] { R14171 += 1, R14127 += 1, R14062 += 1, R14063 += 1 };
  s1 -> s1 [82, 65535] { R14171 += 1, R14127 += 1, R14062 += 1, R14063 += 1 };
  s2 -> s1 [0, 80] { R14171 += 1, R14127 += 1, R14062 += 1, R14063 += 1 };
  s2 -> s2 [0, 65535] { R14171 += 1, R14126 += 1, R14127 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [81, 81] { R14171 += 1, R14127 += 1, R14062 += 1, R14063 += 1 };
  s2 -> s4 [81, 81] { R14171 += 1, R14127 += 1, R14062 += 1, R14063 += 1 };
  s2 -> s1 [82, 65535] { R14171 += 1, R14127 += 1, R14062 += 1, R14063 += 1 };
  s3 -> s3 [0, 65535] { R14171 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R14171 += 1 };
  s4 -> s4 [0, 65535] { R14171 += 1, R14127 += 1, R14062 += 1, R14063 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R14171 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 80] { R14173 += 1, R14129 += 1, R14066 += 1, R14067 += 1 };
  s0 -> s0 [0, 65535] { R14172 += 1, R14173 += 1 };
  s0 -> s2 [0, 65535] { R14173 += 1, R14128 += 1, R14129 += 1 };
  s0 -> s3 [81, 81] { R14173 += 1, R14129 += 1, R14066 += 1, R14067 += 1 };
  s0 -> s4 [81, 81] { R14173 += 1, R14129 += 1, R14066 += 1, R14067 += 1 };
  s0 -> s1 [82, 65535] { R14173 += 1, R14129 += 1, R14066 += 1, R14067 += 1 };
  s1 -> s1 [0, 80] { R14173 += 1, R14129 += 1, R14066 += 1, R14067 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R14173 += 1 };
  s1 -> s3 [81, 81] { R14173 += 1, R14129 += 1, R14066 += 1, R14067 += 1 };
  s1 -> s4 [81, 81] { R14173 += 1, R14129 += 1, R14066 += 1, R14067 += 1 };
  s1 -> s1 [82, 65535] { R14173 += 1, R14129 += 1, R14066 += 1, R14067 += 1 };
  s2 -> s1 [0, 80] { R14173 += 1, R14129 += 1, R14066 += 1, R14067 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R14173 += 1, R14128 += 1, R14129 += 1 };
  s2 -> s3 [81, 81] { R14173 += 1, R14129 += 1, R14066 += 1, R14067 += 1 };
  s2 -> s4 [81, 81] { R14173 += 1, R14129 += 1, R14066 += 1, R14067 += 1 };
  s2 -> s1 [82, 65535] { R14173 += 1, R14129 += 1, R14066 += 1, R14067 += 1 };
  s3 -> s6 [0, 65535] { R14173 += 1 };
  s3 -> s3 [0, 65535] { R14173 += 1, R14129 += 1, R14066 += 1, R14067 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R14173 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R14173 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 80] { R14175 += 1, R14131 += 1, R14072 += 1, R14073 += 1 };
  s0 -> s0 [0, 65535] { R14174 += 1, R14175 += 1 };
  s0 -> s2 [0, 65535] { R14175 += 1, R14130 += 1, R14131 += 1 };
  s0 -> s3 [81, 81] { R14175 += 1, R14131 += 1, R14072 += 1, R14073 += 1 };
  s0 -> s4 [81, 81] { R14175 += 1, R14131 += 1, R14072 += 1, R14073 += 1 };
  s0 -> s1 [82, 65535] { R14175 += 1, R14131 += 1, R14072 += 1, R14073 += 1 };
  s1 -> s1 [0, 80] { R14175 += 1, R14131 += 1, R14072 += 1, R14073 += 1 };
  s1 -> s1 [0, 65535] { R14175 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [81, 81] { R14175 += 1, R14131 += 1, R14072 += 1, R14073 += 1 };
  s1 -> s4 [81, 81] { R14175 += 1, R14131 += 1, R14072 += 1, R14073 += 1 };
  s1 -> s1 [82, 65535] { R14175 += 1, R14131 += 1, R14072 += 1, R14073 += 1 };
  s2 -> s1 [0, 80] { R14175 += 1, R14131 += 1, R14072 += 1, R14073 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R14175 += 1, R14130 += 1, R14131 += 1 };
  s2 -> s3 [81, 81] { R14175 += 1, R14131 += 1, R14072 += 1, R14073 += 1 };
  s2 -> s4 [81, 81] { R14175 += 1, R14131 += 1, R14072 += 1, R14073 += 1 };
  s2 -> s1 [82, 65535] { R14175 += 1, R14131 += 1, R14072 += 1, R14073 += 1 };
  s3 -> s6 [0, 65535] { R14175 += 1 };
  s3 -> s3 [0, 65535] { R14175 += 1, R14131 += 1, R14072 += 1, R14073 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R14175 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R14175 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [113, 113];
  accepting s1;
};
};
synchronised {  // Automata constraining c1
automaton c1_0 {
  init s0;
  s0 -> s1 [114, 114];
  accepting s1;
};
};
constraint R1 = R14091 && R2 = R14175 && R20 - R14175 = -1 && R21 = R14175 && R22 - R14175 = -1 && R23 = R14175 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R14065 + -1*R14063 - R53 = 0 && R52 + R14064 + R14062 = 0 && R14090 = 0 && R14116 = 0 && R14117 = 0 && R14124 = 0 && R14125 = 0 && R14132 = 0 && R14133 = R14175 && R14134 = 0 && R14135 = R14175 && R14136 = 0 && R14137 = R14175 && R14138 = 0 && R14139 = R14175 && R14140 = 0 && R14141 = R14175 && R14142 = 0 && R14143 = R14175 && R14144 = 0 && R14145 = R14175 && R14146 = 0 && R14147 = R14175 && R14148 = 0 && R14149 = R14175 && R14150 = 0 && R14151 = R14175 && R14152 = 0 && R14153 = R14175 && R14154 = 0 && R14155 = R14175 && R14156 = 0 && R14157 = R14175 && R14158 = 0 && R14159 = R14175 && R14160 = 0 && R14161 = R14175 && R14162 = 0 && R14163 = R14175 && R14164 = 0 && R14165 = R14175 && R14166 = 0 && R14167 = R14175 && R14168 = 0 && R14169 = R14175 && R14170 = 0 && R14171 = R14175 && R14172 = 0 && R14173 = R14175 && R14174 = 0 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R14065 + -1*R14063 - R53 < 1 && -1 < R14091 && 0 < R14175 && (R48 + R10251 + R10248 != 0 || ((R42 + R72 + R70 != 0 || R43 + R73 + R71 + -1*R14065 + -1*R14063 - R53 = 0 || R53 + R14065 + R14063 < 1) && (R42 + R72 + R70 = 0 || R53 + R14065 + R14063 < 1))) && (R48 + R10251 + R10248 != 0 || ((R46 + R10249 + R10246 != 0 || R47 + R10250 + R10247 + -1*R14065 + -1*R14063 - R53 = 0 || R53 + R14065 + R14063 < 1) && (R46 + R10249 + R10246 = 0 || R53 + R14065 + R14063 < 1))) && (R14076 != 0 || R14077 = R14091 || (R17 = 0 && R14091 = 0)) && (R14078 != 0 || R14079 = R14091 || (R17 = 0 && R14091 = 0)) && (R14080 != 0 || R14081 = R14091 || (R17 = 0 && R14091 = 0)) && (R14082 != 0 || R14083 = R14091 || (R17 = 0 && R14091 = 0)) && (R14084 != 0 || R14085 = R14091 || (R17 = 0 && R14091 = 0)) && (R14086 != 0 || R14087 = R14091 || (R17 = 0 && R14091 = 0)) && (R14088 != 0 || R14089 = R14091 || (R17 = 0 && R14091 = 0)) && (R14092 != 0 || R14091 = R14093 || (R17 = 0 && R14091 = 0)) && (R14094 != 0 || R14091 = R14095 || (R17 = 0 && R14091 = 0)) && (R18 = 0 || (R14114 = 0 && R14115 = 0)) && (R18 = 0 || (R14118 = 0 && R14119 = 0)) && (R18 = 0 || (R14120 = 0 && R14121 = 0)) && (R18 = 0 || (R14122 = 0 && R14123 = 0)) && (R18 = 0 || (R14126 = 0 && R14127 = 0)) && (R18 = 0 || (R14128 = 0 && R14129 = 0)) && (R18 = 0 || (R14130 = 0 && R14131 = 0)) && (R19 = 0 || (R14096 = 0 && R14097 = 0)) && (R19 = 0 || (R14098 = 0 && R14099 = 0)) && (R19 = 0 || (R14100 = 0 && R14101 = 0)) && (R19 = 0 || (R14102 = 0 && R14103 = 0)) && (R19 = 0 || (R14104 = 0 && R14105 = 0)) && (R19 = 0 || (R14106 = 0 && R14107 = 0)) && (R19 = 0 || (R14108 = 0 && R14109 = 0)) && (R19 = 0 || (R14110 = 0 && R14111 = 0)) && (R19 = 0 || (R14112 = 0 && R14113 = 0)) && (R48 + R10251 + R10248 = 0 || (R42 + R72 + R70 = 0 && R43 + R73 + R71 + -1*R14065 + -1*R14063 - R53 = 0)) && (R48 + R10251 + R10248 = 0 || (R46 + R10249 + R10246 = 0 && R47 + R10250 + R10247 + -1*R14065 + -1*R14063 - R53 = 0)) && (R58 + R14071 + R14068 = 0 || (R56 + R14069 + R14066 = 0 && R57 + R14070 + R14067 = 0)) && (R58 + R14071 + R14068 = 0 || (R62 + R14074 + R14072 = 0 && R63 + R14075 + R14073 = 0)) && (R14076 = 0 || (R17 = 0 && R14091 = 0)) && (R14078 = 0 || (R17 = 0 && R14091 = 0)) && (R14080 = 0 || (R17 = 0 && R14091 = 0)) && (R14082 = 0 || (R17 = 0 && R14091 = 0)) && (R14084 = 0 || (R17 = 0 && R14091 = 0)) && (R14086 = 0 || (R17 = 0 && R14091 = 0)) && (R14088 = 0 || (R17 = 0 && R14091 = 0)) && (R14092 = 0 || (R17 = 0 && R14091 = 0)) && (R14094 = 0 || (R17 = 0 && R14091 = 0));
// End of Parikh automata intersection problem
