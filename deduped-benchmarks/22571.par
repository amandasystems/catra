// Parikh automata intersection problem, generated by OSTRICH+
counter int
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [81, 81];
  s0 -> s0 [82, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [81, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 80];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [81, 81];
  s0 -> s1 [82, 65535];
  s1 -> s1 [0, 80];
  s1 -> s2 [81, 81];
  s1 -> s1 [82, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s1 [0, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s1 [0, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R15148 += 1, R15149 += 1 };
  s0 -> s1 [0, 65535] { R15149 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R15149 += 1, R19 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 80] { R15151 += 1 };
  s0 -> s0 [0, 65535] { R15150 += 1, R15151 += 1 };
  s0 -> s2 [81, 81] { R15151 += 1 };
  s0 -> s3 [81, 81] { R15151 += 1 };
  s0 -> s1 [83, 65535] { R15151 += 1 };
  s1 -> s1 [0, 80] { R15151 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R15151 += 1 };
  s1 -> s3 [81, 81] { R15151 += 1 };
  s1 -> s1 [83, 65535] { R15151 += 1 };
  s2 -> s2 [0, 81] { R15151 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [83, 65535] { R15151 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 80] { R15153 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R15152 += 1, R15153 += 1 };
  s0 -> s2 [81, 81] { R15153 += 1, R38 += 1 };
  s0 -> s3 [81, 81] { R15153 += 1, R38 += 1 };
  s0 -> s1 [82, 65535] { R15153 += 1, R38 += 1 };
  s1 -> s1 [0, 80] { R15153 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R15153 += 1, R38 += 1 };
  s1 -> s3 [81, 81] { R15153 += 1, R38 += 1 };
  s1 -> s1 [82, 65535] { R15153 += 1, R38 += 1 };
  s2 -> s2 [0, 65535] { R15153 += 1, R38 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 80] { R15155 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R15154 += 1, R15155 += 1 };
  s0 -> s2 [81, 81] { R15155 += 1, R40 += 1 };
  s0 -> s3 [81, 81] { R15155 += 1, R40 += 1 };
  s0 -> s1 [82, 65535] { R15155 += 1, R40 += 1 };
  s1 -> s1 [0, 80] { R15155 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R15155 += 1, R40 += 1 };
  s1 -> s3 [81, 81] { R15155 += 1, R40 += 1 };
  s1 -> s1 [82, 65535] { R15155 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R15155 += 1, R40 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 80] { R15157 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R15156 += 1, R15157 += 1 };
  s0 -> s2 [81, 81] { R15157 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [81, 81] { R15157 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [82, 65535] { R15157 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 80] { R15157 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R15157 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [81, 81] { R15157 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [82, 65535] { R15157 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535] { R15157 += 1, R42 += 1, R43 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 80] { R15159 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R15158 += 1, R15159 += 1 };
  s0 -> s2 [81, 81] { R15159 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [81, 81] { R15159 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [82, 65535] { R15159 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 80] { R15159 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R15159 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [81, 81] { R15159 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [82, 65535] { R15159 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R15159 += 1, R46 += 1, R47 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 80] { R15161 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R15160 += 1, R15161 += 1 };
  s0 -> s2 [81, 81] { R15161 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [81, 81] { R15161 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [82, 65535] { R15161 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 80] { R15161 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R15161 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [81, 81] { R15161 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [82, 65535] { R15161 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R15161 += 1, R52 += 1, R53 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 80] { R15163 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R15162 += 1, R15163 += 1 };
  s0 -> s2 [81, 81] { R15163 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [81, 81] { R15163 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [82, 65535] { R15163 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 80] { R15163 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R15163 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [81, 81] { R15163 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [82, 65535] { R15163 += 1, R56 += 1, R57 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R15163 += 1, R56 += 1, R57 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 80] { R15165 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R15164 += 1, R15165 += 1 };
  s0 -> s2 [81, 81] { R15165 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [81, 81] { R15165 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [82, 65535] { R15165 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 80] { R15165 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [81, 81] { R15165 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [81, 81] { R15165 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [82, 65535] { R15165 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535] { R15165 += 1, R62 += 1, R63 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 80] { R15185 += 1 };
  s0 -> s0 [0, 65535] { R15184 += 1, R15185 += 1 };
  s0 -> s2 [81, 81] { R15185 += 1 };
  s0 -> s1 [82, 65535] { R15185 += 1 };
  s1 -> s1 [0, 80] { R15185 += 1 };
  s1 -> s2 [81, 81] { R15185 += 1 };
  s1 -> s1 [82, 65535] { R15185 += 1 };
  s2 -> s2 [0, 65535] { R15185 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R15186 += 1, R15187 += 1 };
  s0 -> s1 [0, 65535] { R15187 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R15187 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 80] { R15189 += 1 };
  s0 -> s2 [0, 65535] { R15189 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R15188 += 1, R15189 += 1 };
  s0 -> s3 [81, 81] { R15189 += 1 };
  s0 -> s1 [82, 65535] { R15189 += 1 };
  s1 -> s1 [0, 80] { R15189 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [81, 81] { R15189 += 1 };
  s1 -> s1 [82, 65535] { R15189 += 1 };
  s2 -> s1 [0, 80] { R15189 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R15189 += 1, R8 += 1 };
  s2 -> s3 [81, 81] { R15189 += 1 };
  s2 -> s1 [82, 65535] { R15189 += 1 };
  s3 -> s3 [0, 65535] { R15189 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 80] { R15191 += 1, R15129 += 1 };
  s0 -> s2 [0, 65535] { R15191 += 1, R15128 += 1, R15129 += 1 };
  s0 -> s0 [0, 65535] { R15190 += 1, R15191 += 1 };
  s0 -> s1 [82, 65535] { R15191 += 1, R15129 += 1 };
  s1 -> s1 [0, 80] { R15191 += 1, R15129 += 1 };
  s1 -> s1 [0, 65535] { R15191 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [82, 65535] { R15191 += 1, R15129 += 1 };
  s2 -> s1 [0, 80] { R15191 += 1, R15129 += 1 };
  s2 -> s2 [0, 65535] { R15191 += 1, R15128 += 1, R15129 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [82, 65535] { R15191 += 1, R15129 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s0 [0, 65535] { R15192 += 1, R15193 += 1 };
  s0 -> s1 [0, 65535] { R15193 += 1, R15130 += 1, R15131 += 1 };
  s0 -> s2 [0, 65535] { R15193 += 1, R15131 += 1, R17 += 1 };
  s1 -> s1 [0, 65535] { R15193 += 1, R15130 += 1, R15131 += 1 };
  s1 -> s2 [0, 65535] { R15193 += 1, R15131 += 1, R17 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R15193 += 1, R15131 += 1, R17 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R15193 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R15193 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s0 [0, 65535] { R15194 += 1, R15195 += 1 };
  s0 -> s1 [0, 65535] { R15195 += 1, R15132 += 1, R15133 += 1 };
  s0 -> s2 [0, 65535] { R15195 += 1, R15133 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R15195 += 1, R15132 += 1, R15133 += 1 };
  s1 -> s2 [0, 65535] { R15195 += 1, R15133 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R15195 += 1 };
  s2 -> s2 [0, 65535] { R15195 += 1, R15133 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R15195 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_23 {
  init s0;
  s0 -> s0 [0, 65535] { R15196 += 1, R15197 += 1 };
  s0 -> s1 [0, 65535] { R15197 += 1, R15134 += 1, R15135 += 1 };
  s0 -> s2 [0, 65535] { R15197 += 1, R15135 += 1, R67 += 1 };
  s1 -> s1 [0, 65535] { R15197 += 1, R15134 += 1, R15135 += 1 };
  s1 -> s2 [0, 65535] { R15197 += 1, R15135 += 1, R67 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R15197 += 1, R15135 += 1, R67 += 1 };
  s2 -> s3 [0, 65535] { R15197 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R15197 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 81] { R15199 += 1, R15137 += 1 };
  s0 -> s2 [0, 65535] { R15199 += 1, R15137 += 1, R69 += 1 };
  s0 -> s3 [0, 65535] { R15199 += 1, R15136 += 1, R15137 += 1 };
  s0 -> s0 [0, 65535] { R15198 += 1, R15199 += 1 };
  s0 -> s1 [83, 65535] { R15199 += 1, R15137 += 1 };
  s1 -> s1 [0, 81] { R15199 += 1, R15137 += 1 };
  s1 -> s1 [0, 65535] { R15199 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [83, 65535] { R15199 += 1, R15137 += 1 };
  s2 -> s1 [0, 81] { R15199 += 1, R15137 += 1 };
  s2 -> s2 [0, 65535] { R15199 += 1, R15137 += 1, R69 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R15199 += 1 };
  s2 -> s1 [83, 65535] { R15199 += 1, R15137 += 1 };
  s3 -> s1 [0, 81] { R15199 += 1, R15137 += 1 };
  s3 -> s2 [0, 65535] { R15199 += 1, R15137 += 1, R69 += 1 };
  s3 -> s3 [0, 65535] { R15199 += 1, R15136 += 1, R15137 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [83, 65535] { R15199 += 1, R15137 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R15199 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 81] { R15201 += 1, R15139 += 1, R73 += 1 };
  s0 -> s2 [0, 65535] { R15201 += 1, R15138 += 1, R15139 += 1 };
  s0 -> s0 [0, 65535] { R15200 += 1, R15201 += 1 };
  s0 -> s3 [0, 65535] { R15201 += 1, R15139 += 1, R72 += 1, R73 += 1 };
  s0 -> s1 [83, 65535] { R15201 += 1, R15139 += 1, R73 += 1 };
  s1 -> s1 [0, 81] { R15201 += 1, R15139 += 1, R73 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R15201 += 1 };
  s1 -> s1 [0, 65535] { R15201 += 1, R15139 += 1 };
  s1 -> s1 [83, 65535] { R15201 += 1, R15139 += 1, R73 += 1 };
  s2 -> s1 [0, 81] { R15201 += 1, R15139 += 1, R73 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R15201 += 1, R15138 += 1, R15139 += 1 };
  s2 -> s3 [0, 65535] { R15201 += 1, R15139 += 1, R72 += 1, R73 += 1 };
  s2 -> s1 [83, 65535] { R15201 += 1, R15139 += 1, R73 += 1 };
  s3 -> s1 [0, 81] { R15201 += 1, R15139 += 1, R73 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R15201 += 1 };
  s3 -> s3 [0, 65535] { R15201 += 1, R15139 += 1, R72 += 1, R73 += 1 };
  s3 -> s1 [83, 65535] { R15201 += 1, R15139 += 1, R73 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R15201 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R15203 += 1, R15140 += 1, R15141 += 1 };
  s0 -> s0 [0, 65535] { R15202 += 1, R15203 += 1 };
  s0 -> s2 [0, 65535] { R15203 += 1, R15141 += 1 };
  s1 -> s1 [0, 65535] { R15203 += 1, R15140 += 1, R15141 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R15203 += 1, R15141 += 1 };
  s2 -> s3 [0, 65535] { R15203 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R15203 += 1, R15141 += 1 };
  s3 -> s3 [0, 65535] { R15203 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 82] { R15205 += 1, R15143 += 1, R14065 += 1 };
  s0 -> s2 [0, 65535] { R15205 += 1, R15143 += 1, R14064 += 1, R14065 += 1 };
  s0 -> s3 [0, 65535] { R15205 += 1, R15142 += 1, R15143 += 1 };
  s0 -> s0 [0, 65535] { R15204 += 1, R15205 += 1 };
  s0 -> s4 [83, 83] { R15205 += 1, R15143 += 1, R14065 += 1 };
  s0 -> s1 [84, 65535] { R15205 += 1, R15143 += 1, R14065 += 1 };
  s1 -> s1 [0, 82] { R15205 += 1, R15143 += 1, R14065 += 1 };
  s1 -> s4 [83, 83] { R15205 += 1, R15143 += 1, R14065 += 1 };
  s1 -> s1 [84, 65535] { R15205 += 1, R15143 += 1, R14065 += 1 };
  s2 -> s1 [0, 82] { R15205 += 1, R15143 += 1, R14065 += 1 };
  s2 -> s2 [0, 65535] { R15205 += 1, R15143 += 1, R14064 += 1, R14065 += 1 };
  s2 -> s4 [83, 83] { R15205 += 1, R15143 += 1, R14065 += 1 };
  s2 -> s1 [84, 65535] { R15205 += 1, R15143 += 1, R14065 += 1 };
  s3 -> s1 [0, 82] { R15205 += 1, R15143 += 1, R14065 += 1 };
  s3 -> s2 [0, 65535] { R15205 += 1, R15143 += 1, R14064 += 1, R14065 += 1 };
  s3 -> s3 [0, 65535] { R15205 += 1, R15142 += 1, R15143 += 1 };
  s3 -> s4 [83, 83] { R15205 += 1, R15143 += 1, R14065 += 1 };
  s3 -> s1 [84, 65535] { R15205 += 1, R15143 += 1, R14065 += 1 };
  s4 -> s5 [0, 65535] { R15205 += 1 };
  s4 -> s6 [0, 65535] { R15205 += 1, R15143 += 1 };
  s4 -> s4 [0, 65535] { R15205 += 1, R15143 += 1, R14065 += 1 };
  s4 -> s7 [0, 65535];
  s5 -> s5 [0, 65535] { R15205 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s5 [0, 65535] { R15205 += 1 };
  s6 -> s6 [0, 65535] { R15205 += 1, R15143 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s4, s5, s6, s7;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R15207 += 1, R15145 += 1 };
  s0 -> s0 [0, 65535] { R15206 += 1, R15207 += 1 };
  s0 -> s2 [0, 65535] { R15207 += 1, R15144 += 1, R15145 += 1 };
  s1 -> s1 [0, 65535] { R15207 += 1, R15145 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R15207 += 1 };
  s2 -> s1 [0, 65535] { R15207 += 1, R15145 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R15207 += 1, R15144 += 1, R15145 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R15207 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 82] { R15209 += 1, R15147 += 1, R15127 += 1 };
  s0 -> s0 [0, 65535] { R15208 += 1, R15209 += 1 };
  s0 -> s1 [0, 65535] { R15209 += 1, R15147 += 1 };
  s0 -> s2 [0, 65535] { R15209 += 1, R15146 += 1, R15147 += 1 };
  s0 -> s1 [84, 65535] { R15209 += 1, R15147 += 1, R15127 += 1 };
  s1 -> s1 [0, 82] { R15209 += 1, R15147 += 1, R15127 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R15209 += 1 };
  s1 -> s1 [0, 65535] { R15209 += 1, R15147 += 1 };
  s1 -> s1 [84, 65535] { R15209 += 1, R15147 += 1, R15127 += 1 };
  s2 -> s1 [0, 82] { R15209 += 1, R15147 += 1, R15127 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R15209 += 1, R15147 += 1 };
  s2 -> s2 [0, 65535] { R15209 += 1, R15146 += 1, R15147 += 1 };
  s2 -> s1 [84, 65535] { R15209 += 1, R15147 += 1, R15127 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R15209 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R15211 += 1, R15166 += 1, R15167 += 1 };
  s0 -> s2 [0, 65535] { R15211 += 1, R15167 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R15210 += 1, R15211 += 1 };
  s1 -> s1 [0, 65535] { R15211 += 1, R15166 += 1, R15167 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R15211 += 1, R15167 += 1, R18 += 1 };
  s2 -> s3 [0, 65535] { R15211 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R15211 += 1, R15167 += 1, R18 += 1 };
  s3 -> s3 [0, 65535] { R15211 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 80] { R15213 += 1, R15169 += 1 };
  s0 -> s2 [0, 65535] { R15213 += 1, R15168 += 1, R15169 += 1 };
  s0 -> s0 [0, 65535] { R15212 += 1, R15213 += 1 };
  s0 -> s3 [81, 81] { R15213 += 1, R15169 += 1 };
  s0 -> s4 [81, 81] { R15213 += 1, R15169 += 1 };
  s0 -> s5 [82, 82] { R15213 += 1, R15169 += 1 };
  s0 -> s1 [83, 65535] { R15213 += 1, R15169 += 1 };
  s1 -> s1 [0, 80] { R15213 += 1, R15169 += 1 };
  s1 -> s3 [81, 81] { R15213 += 1, R15169 += 1 };
  s1 -> s4 [81, 81] { R15213 += 1, R15169 += 1 };
  s1 -> s5 [82, 82] { R15213 += 1, R15169 += 1 };
  s1 -> s1 [83, 65535] { R15213 += 1, R15169 += 1 };
  s2 -> s1 [0, 80] { R15213 += 1, R15169 += 1 };
  s2 -> s2 [0, 65535] { R15213 += 1, R15168 += 1, R15169 += 1 };
  s2 -> s3 [81, 81] { R15213 += 1, R15169 += 1 };
  s2 -> s4 [81, 81] { R15213 += 1, R15169 += 1 };
  s2 -> s5 [82, 82] { R15213 += 1, R15169 += 1 };
  s2 -> s1 [83, 65535] { R15213 += 1, R15169 += 1 };
  s4 -> s4 [0, 81] { R15213 += 1, R15169 += 1 };
  s4 -> s8 [82, 82] { R15213 += 1, R15169 += 1 };
  s4 -> s4 [83, 65535] { R15213 += 1, R15169 += 1 };
  s5 -> s5 [0, 80] { R15213 += 1, R15169 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R15213 += 1 };
  s5 -> s7 [81, 81] { R15213 += 1, R15169 += 1 };
  s5 -> s8 [81, 81] { R15213 += 1, R15169 += 1 };
  s5 -> s5 [82, 65535] { R15213 += 1, R15169 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R15213 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R15213 += 1, R15169 += 1 };
  s8 -> s9 [0, 65535] { R15213 += 1 };
  s9 -> s6 [0, 65535];
  s9 -> s9 [0, 65535] { R15213 += 1 };
  accepting s8, s5, s9, s6, s7;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 80] { R15215 += 1, R15171 += 1, R66 += 1 };
  s0 -> s2 [0, 65535] { R15215 += 1, R15170 += 1, R15171 += 1 };
  s0 -> s0 [0, 65535] { R15214 += 1, R15215 += 1 };
  s0 -> s3 [81, 81] { R15215 += 1, R15171 += 1, R66 += 1 };
  s0 -> s4 [81, 81] { R15215 += 1, R15171 += 1, R66 += 1 };
  s0 -> s1 [82, 65535] { R15215 += 1, R15171 += 1, R66 += 1 };
  s1 -> s1 [0, 80] { R15215 += 1, R15171 += 1, R66 += 1 };
  s1 -> s1 [0, 65535] { R15215 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [81, 81] { R15215 += 1, R15171 += 1, R66 += 1 };
  s1 -> s4 [81, 81] { R15215 += 1, R15171 += 1, R66 += 1 };
  s1 -> s1 [82, 65535] { R15215 += 1, R15171 += 1, R66 += 1 };
  s2 -> s1 [0, 80] { R15215 += 1, R15171 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R15215 += 1, R15170 += 1, R15171 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [81, 81] { R15215 += 1, R15171 += 1, R66 += 1 };
  s2 -> s4 [81, 81] { R15215 += 1, R15171 += 1, R66 += 1 };
  s2 -> s1 [82, 65535] { R15215 += 1, R15171 += 1, R66 += 1 };
  s3 -> s3 [0, 65535] { R15215 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R15215 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R15215 += 1, R15171 += 1, R66 += 1 };
  s5 -> s5 [0, 65535] { R15215 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 80] { R15217 += 1, R15173 += 1, R68 += 1 };
  s0 -> s2 [0, 65535] { R15217 += 1, R15172 += 1, R15173 += 1 };
  s0 -> s0 [0, 65535] { R15216 += 1, R15217 += 1 };
  s0 -> s3 [81, 81] { R15217 += 1, R15173 += 1, R68 += 1 };
  s0 -> s4 [81, 81] { R15217 += 1, R15173 += 1, R68 += 1 };
  s0 -> s1 [82, 65535] { R15217 += 1, R15173 += 1, R68 += 1 };
  s1 -> s1 [0, 80] { R15217 += 1, R15173 += 1, R68 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R15217 += 1 };
  s1 -> s3 [81, 81] { R15217 += 1, R15173 += 1, R68 += 1 };
  s1 -> s4 [81, 81] { R15217 += 1, R15173 += 1, R68 += 1 };
  s1 -> s1 [82, 65535] { R15217 += 1, R15173 += 1, R68 += 1 };
  s2 -> s1 [0, 80] { R15217 += 1, R15173 += 1, R68 += 1 };
  s2 -> s2 [0, 65535] { R15217 += 1, R15172 += 1, R15173 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [81, 81] { R15217 += 1, R15173 += 1, R68 += 1 };
  s2 -> s4 [81, 81] { R15217 += 1, R15173 += 1, R68 += 1 };
  s2 -> s1 [82, 65535] { R15217 += 1, R15173 += 1, R68 += 1 };
  s3 -> s3 [0, 65535] { R15217 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R15217 += 1, R15173 += 1, R68 += 1 };
  s4 -> s5 [0, 65535] { R15217 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R15217 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 80] { R15219 += 1, R15175 += 1, R70 += 1, R71 += 1 };
  s0 -> s2 [0, 65535] { R15219 += 1, R15174 += 1, R15175 += 1 };
  s0 -> s0 [0, 65535] { R15218 += 1, R15219 += 1 };
  s0 -> s3 [81, 81] { R15219 += 1, R15175 += 1, R70 += 1, R71 += 1 };
  s0 -> s4 [81, 81] { R15219 += 1, R15175 += 1, R70 += 1, R71 += 1 };
  s0 -> s1 [82, 65535] { R15219 += 1, R15175 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 80] { R15219 += 1, R15175 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 65535] { R15219 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [81, 81] { R15219 += 1, R15175 += 1, R70 += 1, R71 += 1 };
  s1 -> s4 [81, 81] { R15219 += 1, R15175 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [82, 65535] { R15219 += 1, R15175 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [0, 80] { R15219 += 1, R15175 += 1, R70 += 1, R71 += 1 };
  s2 -> s2 [0, 65535] { R15219 += 1, R15174 += 1, R15175 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [81, 81] { R15219 += 1, R15175 += 1, R70 += 1, R71 += 1 };
  s2 -> s4 [81, 81] { R15219 += 1, R15175 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [82, 65535] { R15219 += 1, R15175 += 1, R70 += 1, R71 += 1 };
  s3 -> s3 [0, 65535] { R15219 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R15219 += 1, R15175 += 1, R70 += 1, R71 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R15219 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R15219 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 80] { R15221 += 1, R15177 += 1, R10247 += 1, R10248 += 1 };
  s0 -> s2 [0, 80] { R15221 += 1, R15177 += 1, R10246 += 1, R10247 += 1 };
  s0 -> s0 [0, 65535] { R15220 += 1, R15221 += 1 };
  s0 -> s3 [0, 65535] { R15221 += 1, R15176 += 1, R15177 += 1 };
  s0 -> s4 [81, 81] { R15221 += 1, R15177 += 1, R10247 += 1, R10248 += 1 };
  s0 -> s5 [81, 81] { R15221 += 1, R15177 += 1, R10246 += 1, R10247 += 1 };
  s0 -> s6 [81, 81] { R15221 += 1, R15177 += 1, R10247 += 1, R10248 += 1 };
  s0 -> s7 [81, 81] { R15221 += 1, R15177 += 1, R10246 += 1, R10247 += 1 };
  s0 -> s1 [82, 65535] { R15221 += 1, R15177 += 1, R10247 += 1, R10248 += 1 };
  s0 -> s2 [82, 65535] { R15221 += 1, R15177 += 1, R10246 += 1, R10247 += 1 };
  s1 -> s1 [0, 80] { R15221 += 1, R15177 += 1, R10247 += 1, R10248 += 1 };
  s1 -> s11 [0, 80] { R15221 += 1, R15177 += 1 };
  s1 -> s4 [81, 81] { R15221 += 1, R15177 += 1, R10247 += 1, R10248 += 1 };
  s1 -> s12 [81, 81] { R15221 += 1, R15177 += 1 };
  s1 -> s6 [81, 81] { R15221 += 1, R15177 += 1, R10247 += 1, R10248 += 1 };
  s1 -> s8 [81, 81] { R15221 += 1, R15177 += 1 };
  s1 -> s1 [82, 65535] { R15221 += 1, R15177 += 1, R10247 += 1, R10248 += 1 };
  s1 -> s11 [82, 65535] { R15221 += 1, R15177 += 1 };
  s2 -> s1 [0, 80] { R15221 += 1, R15177 += 1, R10247 += 1, R10248 += 1 };
  s2 -> s2 [0, 80] { R15221 += 1, R15177 += 1, R10246 += 1, R10247 += 1 };
  s2 -> s4 [81, 81] { R15221 += 1, R15177 += 1, R10247 += 1, R10248 += 1 };
  s2 -> s5 [81, 81] { R15221 += 1, R15177 += 1, R10246 += 1, R10247 += 1 };
  s2 -> s6 [81, 81] { R15221 += 1, R15177 += 1, R10247 += 1, R10248 += 1 };
  s2 -> s7 [81, 81] { R15221 += 1, R15177 += 1, R10246 += 1, R10247 += 1 };
  s2 -> s1 [82, 65535] { R15221 += 1, R15177 += 1, R10247 += 1, R10248 += 1 };
  s2 -> s2 [82, 65535] { R15221 += 1, R15177 += 1, R10246 += 1, R10247 += 1 };
  s3 -> s1 [0, 80] { R15221 += 1, R15177 += 1, R10247 += 1, R10248 += 1 };
  s3 -> s2 [0, 80] { R15221 += 1, R15177 += 1, R10246 += 1, R10247 += 1 };
  s3 -> s3 [0, 65535] { R15221 += 1, R15176 += 1, R15177 += 1 };
  s3 -> s4 [81, 81] { R15221 += 1, R15177 += 1, R10247 += 1, R10248 += 1 };
  s3 -> s5 [81, 81] { R15221 += 1, R15177 += 1, R10246 += 1, R10247 += 1 };
  s3 -> s6 [81, 81] { R15221 += 1, R15177 += 1, R10247 += 1, R10248 += 1 };
  s3 -> s7 [81, 81] { R15221 += 1, R15177 += 1, R10246 += 1, R10247 += 1 };
  s3 -> s1 [82, 65535] { R15221 += 1, R15177 += 1, R10247 += 1, R10248 += 1 };
  s3 -> s2 [82, 65535] { R15221 += 1, R15177 += 1, R10246 += 1, R10247 += 1 };
  s4 -> s4 [0, 65535] { R15221 += 1, R15177 += 1, R10247 += 1, R10248 += 1 };
  s4 -> s8 [0, 65535] { R15221 += 1, R15177 += 1 };
  s7 -> s4 [0, 65535] { R15221 += 1, R15177 += 1, R10247 += 1, R10248 += 1 };
  s7 -> s7 [0, 65535] { R15221 += 1, R15177 += 1, R10246 += 1, R10247 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R15221 += 1, R15177 += 1 };
  s8 -> s10 [0, 65535] { R15221 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R15221 += 1 };
  s11 -> s11 [0, 80] { R15221 += 1, R15177 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R15221 += 1 };
  s11 -> s12 [81, 81] { R15221 += 1, R15177 += 1 };
  s11 -> s8 [81, 81] { R15221 += 1, R15177 += 1 };
  s11 -> s11 [82, 65535] { R15221 += 1, R15177 += 1 };
  s12 -> s12 [0, 65535] { R15221 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 80] { R15223 += 1, R15179 += 1, R14062 += 1, R14063 += 1 };
  s0 -> s2 [0, 65535] { R15223 += 1, R15178 += 1, R15179 += 1 };
  s0 -> s0 [0, 65535] { R15222 += 1, R15223 += 1 };
  s0 -> s3 [81, 81] { R15223 += 1, R15179 += 1, R14062 += 1, R14063 += 1 };
  s0 -> s4 [81, 81] { R15223 += 1, R15179 += 1, R14062 += 1, R14063 += 1 };
  s0 -> s1 [82, 65535] { R15223 += 1, R15179 += 1, R14062 += 1, R14063 += 1 };
  s1 -> s1 [0, 80] { R15223 += 1, R15179 += 1, R14062 += 1, R14063 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R15223 += 1 };
  s1 -> s3 [81, 81] { R15223 += 1, R15179 += 1, R14062 += 1, R14063 += 1 };
  s1 -> s4 [81, 81] { R15223 += 1, R15179 += 1, R14062 += 1, R14063 += 1 };
  s1 -> s1 [82, 65535] { R15223 += 1, R15179 += 1, R14062 += 1, R14063 += 1 };
  s2 -> s1 [0, 80] { R15223 += 1, R15179 += 1, R14062 += 1, R14063 += 1 };
  s2 -> s2 [0, 65535] { R15223 += 1, R15178 += 1, R15179 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [81, 81] { R15223 += 1, R15179 += 1, R14062 += 1, R14063 += 1 };
  s2 -> s4 [81, 81] { R15223 += 1, R15179 += 1, R14062 += 1, R14063 += 1 };
  s2 -> s1 [82, 65535] { R15223 += 1, R15179 += 1, R14062 += 1, R14063 += 1 };
  s3 -> s3 [0, 65535] { R15223 += 1, R15179 += 1, R14062 += 1, R14063 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R15223 += 1 };
  s4 -> s4 [0, 65535] { R15223 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R15223 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 80] { R15225 += 1, R15181 += 1, R14910 += 1, R14911 += 1 };
  s0 -> s2 [0, 80] { R15225 += 1, R15181 += 1, R14911 += 1, R14912 += 1 };
  s0 -> s0 [0, 65535] { R15224 += 1, R15225 += 1 };
  s0 -> s3 [0, 65535] { R15225 += 1, R15180 += 1, R15181 += 1 };
  s0 -> s4 [81, 81] { R15225 += 1, R15181 += 1, R14910 += 1, R14911 += 1 };
  s0 -> s5 [81, 81] { R15225 += 1, R15181 += 1, R14911 += 1, R14912 += 1 };
  s0 -> s6 [81, 81] { R15225 += 1, R15181 += 1, R14910 += 1, R14911 += 1 };
  s0 -> s7 [81, 81] { R15225 += 1, R15181 += 1, R14911 += 1, R14912 += 1 };
  s0 -> s1 [82, 65535] { R15225 += 1, R15181 += 1, R14910 += 1, R14911 += 1 };
  s0 -> s2 [82, 65535] { R15225 += 1, R15181 += 1, R14911 += 1, R14912 += 1 };
  s1 -> s1 [0, 80] { R15225 += 1, R15181 += 1, R14910 += 1, R14911 += 1 };
  s1 -> s2 [0, 80] { R15225 += 1, R15181 += 1, R14911 += 1, R14912 += 1 };
  s1 -> s4 [81, 81] { R15225 += 1, R15181 += 1, R14910 += 1, R14911 += 1 };
  s1 -> s5 [81, 81] { R15225 += 1, R15181 += 1, R14911 += 1, R14912 += 1 };
  s1 -> s6 [81, 81] { R15225 += 1, R15181 += 1, R14910 += 1, R14911 += 1 };
  s1 -> s7 [81, 81] { R15225 += 1, R15181 += 1, R14911 += 1, R14912 += 1 };
  s1 -> s1 [82, 65535] { R15225 += 1, R15181 += 1, R14910 += 1, R14911 += 1 };
  s1 -> s2 [82, 65535] { R15225 += 1, R15181 += 1, R14911 += 1, R14912 += 1 };
  s2 -> s2 [0, 80] { R15225 += 1, R15181 += 1, R14911 += 1, R14912 += 1 };
  s2 -> s11 [0, 80] { R15225 += 1, R15181 += 1 };
  s2 -> s5 [81, 81] { R15225 += 1, R15181 += 1, R14911 += 1, R14912 += 1 };
  s2 -> s8 [81, 81] { R15225 += 1, R15181 += 1 };
  s2 -> s7 [81, 81] { R15225 += 1, R15181 += 1, R14911 += 1, R14912 += 1 };
  s2 -> s12 [81, 81] { R15225 += 1, R15181 += 1 };
  s2 -> s2 [82, 65535] { R15225 += 1, R15181 += 1, R14911 += 1, R14912 += 1 };
  s2 -> s11 [82, 65535] { R15225 += 1, R15181 += 1 };
  s3 -> s1 [0, 80] { R15225 += 1, R15181 += 1, R14910 += 1, R14911 += 1 };
  s3 -> s2 [0, 80] { R15225 += 1, R15181 += 1, R14911 += 1, R14912 += 1 };
  s3 -> s3 [0, 65535] { R15225 += 1, R15180 += 1, R15181 += 1 };
  s3 -> s4 [81, 81] { R15225 += 1, R15181 += 1, R14910 += 1, R14911 += 1 };
  s3 -> s5 [81, 81] { R15225 += 1, R15181 += 1, R14911 += 1, R14912 += 1 };
  s3 -> s6 [81, 81] { R15225 += 1, R15181 += 1, R14910 += 1, R14911 += 1 };
  s3 -> s7 [81, 81] { R15225 += 1, R15181 += 1, R14911 += 1, R14912 += 1 };
  s3 -> s1 [82, 65535] { R15225 += 1, R15181 += 1, R14910 += 1, R14911 += 1 };
  s3 -> s2 [82, 65535] { R15225 += 1, R15181 += 1, R14911 += 1, R14912 += 1 };
  s5 -> s5 [0, 65535] { R15225 += 1, R15181 += 1, R14911 += 1, R14912 += 1 };
  s5 -> s8 [0, 65535] { R15225 += 1, R15181 += 1 };
  s6 -> s5 [0, 65535] { R15225 += 1, R15181 += 1, R14911 += 1, R14912 += 1 };
  s6 -> s6 [0, 65535] { R15225 += 1, R15181 += 1, R14910 += 1, R14911 += 1 };
  s8 -> s8 [0, 65535] { R15225 += 1, R15181 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [0, 65535] { R15225 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R15225 += 1 };
  s11 -> s11 [0, 80] { R15225 += 1, R15181 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R15225 += 1 };
  s11 -> s8 [81, 81] { R15225 += 1, R15181 += 1 };
  s11 -> s12 [81, 81] { R15225 += 1, R15181 += 1 };
  s11 -> s11 [82, 65535] { R15225 += 1, R15181 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R15225 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 80] { R15227 += 1, R15183 += 1, R15124 += 1, R15125 += 1 };
  s0 -> s2 [0, 80] { R15227 += 1, R15183 += 1, R15125 += 1 };
  s0 -> s0 [0, 65535] { R15226 += 1, R15227 += 1 };
  s0 -> s3 [0, 65535] { R15227 += 1, R15182 += 1, R15183 += 1 };
  s0 -> s4 [81, 81] { R15227 += 1, R15183 += 1, R15124 += 1, R15125 += 1 };
  s0 -> s5 [81, 81] { R15227 += 1, R15183 += 1, R15125 += 1 };
  s0 -> s6 [81, 81] { R15227 += 1, R15183 += 1, R15124 += 1, R15125 += 1 };
  s0 -> s7 [81, 81] { R15227 += 1, R15183 += 1, R15125 += 1 };
  s0 -> s8 [82, 82] { R15227 += 1, R15183 += 1, R15125 += 1 };
  s0 -> s1 [82, 65535] { R15227 += 1, R15183 += 1, R15124 += 1, R15125 += 1 };
  s0 -> s2 [84, 65535] { R15227 += 1, R15183 += 1, R15125 += 1 };
  s1 -> s1 [0, 80] { R15227 += 1, R15183 += 1, R15124 += 1, R15125 += 1 };
  s1 -> s2 [0, 80] { R15227 += 1, R15183 += 1, R15125 += 1 };
  s1 -> s4 [81, 81] { R15227 += 1, R15183 += 1, R15124 += 1, R15125 += 1 };
  s1 -> s5 [81, 81] { R15227 += 1, R15183 += 1, R15125 += 1 };
  s1 -> s6 [81, 81] { R15227 += 1, R15183 += 1, R15124 += 1, R15125 += 1 };
  s1 -> s7 [81, 81] { R15227 += 1, R15183 += 1, R15125 += 1 };
  s1 -> s8 [82, 82] { R15227 += 1, R15183 += 1, R15125 += 1 };
  s1 -> s1 [82, 65535] { R15227 += 1, R15183 += 1, R15124 += 1, R15125 += 1 };
  s1 -> s2 [84, 65535] { R15227 += 1, R15183 += 1, R15125 += 1 };
  s2 -> s2 [0, 80] { R15227 += 1, R15183 += 1, R15125 += 1 };
  s2 -> s5 [81, 81] { R15227 += 1, R15183 += 1 };
  s2 -> s7 [81, 81] { R15227 += 1, R15183 += 1 };
  s2 -> s8 [82, 82] { R15227 += 1, R15183 += 1, R15125 += 1 };
  s2 -> s2 [82, 65535] { R15227 += 1, R15183 += 1 };
  s2 -> s2 [84, 65535] { R15227 += 1, R15183 += 1, R15125 += 1 };
  s3 -> s1 [0, 80] { R15227 += 1, R15183 += 1, R15124 += 1, R15125 += 1 };
  s3 -> s2 [0, 80] { R15227 += 1, R15183 += 1, R15125 += 1 };
  s3 -> s3 [0, 65535] { R15227 += 1, R15182 += 1, R15183 += 1 };
  s3 -> s4 [81, 81] { R15227 += 1, R15183 += 1, R15124 += 1, R15125 += 1 };
  s3 -> s5 [81, 81] { R15227 += 1, R15183 += 1, R15125 += 1 };
  s3 -> s6 [81, 81] { R15227 += 1, R15183 += 1, R15124 += 1, R15125 += 1 };
  s3 -> s7 [81, 81] { R15227 += 1, R15183 += 1, R15125 += 1 };
  s3 -> s8 [82, 82] { R15227 += 1, R15183 += 1, R15125 += 1 };
  s3 -> s1 [82, 65535] { R15227 += 1, R15183 += 1, R15124 += 1, R15125 += 1 };
  s3 -> s2 [84, 65535] { R15227 += 1, R15183 += 1, R15125 += 1 };
  s6 -> s7 [0, 81] { R15227 += 1, R15183 += 1, R15125 += 1 };
  s6 -> s6 [0, 65535] { R15227 += 1, R15183 += 1, R15124 += 1, R15125 += 1 };
  s6 -> s10 [82, 82] { R15227 += 1, R15183 += 1, R15125 += 1 };
  s6 -> s7 [84, 65535] { R15227 += 1, R15183 += 1, R15125 += 1 };
  s7 -> s7 [0, 81] { R15227 += 1, R15183 += 1, R15125 += 1 };
  s7 -> s7 [0, 65535] { R15227 += 1, R15183 += 1 };
  s7 -> s10 [82, 82] { R15227 += 1, R15183 += 1, R15125 += 1 };
  s7 -> s7 [84, 65535] { R15227 += 1, R15183 += 1, R15125 += 1 };
  s8 -> s8 [0, 80] { R15227 += 1, R15183 += 1, R15125 += 1 };
  s8 -> s8 [0, 65535] { R15227 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [81, 81] { R15227 += 1, R15183 += 1 };
  s8 -> s11 [81, 81] { R15227 += 1, R15183 += 1 };
  s8 -> s8 [82, 82] { R15227 += 1, R15183 += 1, R15125 += 1 };
  s8 -> s8 [82, 65535] { R15227 += 1, R15183 += 1 };
  s8 -> s8 [84, 65535] { R15227 += 1, R15183 += 1, R15125 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 82] { R15227 += 1, R15183 += 1, R15125 += 1 };
  s10 -> s10 [0, 65535] { R15227 += 1, R15183 += 1 };
  s10 -> s12 [0, 65535] { R15227 += 1 };
  s10 -> s9 [0, 65535];
  s10 -> s10 [84, 65535] { R15227 += 1, R15183 += 1, R15125 += 1 };
  s11 -> s11 [0, 65535] { R15227 += 1 };
  s11 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R15227 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [113, 113];
  accepting s1;
};
};
synchronised {  // Automata constraining c1
automaton c1_0 {
  init s0;
  s0 -> s1 [114, 114];
  accepting s1;
};
};
constraint R1 = R15143 && R2 = R15227 && R20 - R15227 = -1 && R21 = R15227 && R22 - R15227 = -1 && R23 = R15227 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R14065 + -1*R14063 - R53 = 0 && R52 + R14064 + R14062 = 0 && R15142 = 0 && R15168 = 0 && R15169 = 0 && R15176 = 0 && R15177 = 0 && R15180 = 0 && R15181 = 0 && R15182 = 0 && R15183 = 0 && R15184 = 0 && R15185 = R15227 && R15186 = 0 && R15187 = R15227 && R15188 = 0 && R15189 = R15227 && R15190 = 0 && R15191 = R15227 && R15192 = 0 && R15193 = R15227 && R15194 = 0 && R15195 = R15227 && R15196 = 0 && R15197 = R15227 && R15198 = 0 && R15199 = R15227 && R15200 = 0 && R15201 = R15227 && R15202 = 0 && R15203 = R15227 && R15204 = 0 && R15205 = R15227 && R15206 = 0 && R15207 = R15227 && R15208 = 0 && R15209 = R15227 && R15210 = 0 && R15211 = R15227 && R15212 = 0 && R15213 = R15227 && R15214 = 0 && R15215 = R15227 && R15216 = 0 && R15217 = R15227 && R15218 = 0 && R15219 = R15227 && R15220 = 0 && R15221 = R15227 && R15222 = 0 && R15223 = R15227 && R15224 = 0 && R15225 = R15227 && R15226 = 0 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R14065 + -1*R14063 - R53 < 1 && -1 < R15143 && 0 < R15227 && (R48 + R10251 + R10248 != 0 || ((R42 + R72 + R70 != 0 || R43 + R73 + R71 + -1*R14065 + -1*R14063 - R53 = 0 || R53 + R14065 + R14063 < 1) && (R42 + R72 + R70 = 0 || R53 + R14065 + R14063 < 1))) && (R48 + R10251 + R10248 != 0 || ((R46 + R10249 + R10246 != 0 || R47 + R10250 + R10247 + -1*R14065 + -1*R14063 - R53 = 0 || R53 + R14065 + R14063 < 1) && (R46 + R10249 + R10246 = 0 || R53 + R14065 + R14063 < 1))) && (R15128 != 0 || R15129 = R15143 || (R17 = 0 && R15143 = 0)) && (R15130 != 0 || R15131 = R15143 || (R17 = 0 && R15143 = 0)) && (R15132 != 0 || R15133 = R15143 || (R17 = 0 && R15143 = 0)) && (R15134 != 0 || R15135 = R15143 || (R17 = 0 && R15143 = 0)) && (R15136 != 0 || R15137 = R15143 || (R17 = 0 && R15143 = 0)) && (R15138 != 0 || R15139 = R15143 || (R17 = 0 && R15143 = 0)) && (R15140 != 0 || R15141 = R15143 || (R17 = 0 && R15143 = 0)) && (R15144 != 0 || R15143 = R15145 || (R17 = 0 && R15143 = 0)) && (R15146 != 0 || R15143 = R15147 || (R17 = 0 && R15143 = 0)) && (R18 = 0 || (R15166 = 0 && R15167 = 0)) && (R18 = 0 || (R15170 = 0 && R15171 = 0)) && (R18 = 0 || (R15172 = 0 && R15173 = 0)) && (R18 = 0 || (R15174 = 0 && R15175 = 0)) && (R18 = 0 || (R15178 = 0 && R15179 = 0)) && (R19 = 0 || (R15148 = 0 && R15149 = 0)) && (R19 = 0 || (R15150 = 0 && R15151 = 0)) && (R19 = 0 || (R15152 = 0 && R15153 = 0)) && (R19 = 0 || (R15154 = 0 && R15155 = 0)) && (R19 = 0 || (R15156 = 0 && R15157 = 0)) && (R19 = 0 || (R15158 = 0 && R15159 = 0)) && (R19 = 0 || (R15160 = 0 && R15161 = 0)) && (R19 = 0 || (R15162 = 0 && R15163 = 0)) && (R19 = 0 || (R15164 = 0 && R15165 = 0)) && (R48 + R10251 + R10248 = 0 || (R42 + R72 + R70 = 0 && R43 + R73 + R71 + -1*R14065 + -1*R14063 - R53 = 0)) && (R48 + R10251 + R10248 = 0 || (R46 + R10249 + R10246 = 0 && R47 + R10250 + R10247 + -1*R14065 + -1*R14063 - R53 = 0)) && (R58 + R14915 + R14912 = 0 || (R56 + R14913 + R14910 = 0 && R57 + R14914 + R14911 = 0)) && (R58 + R14915 + R14912 = 0 || (R62 + R15126 + R15124 = 0 && R63 + R15127 + R15125 = 0)) && (R15128 = 0 || (R17 = 0 && R15143 = 0)) && (R15130 = 0 || (R17 = 0 && R15143 = 0)) && (R15132 = 0 || (R17 = 0 && R15143 = 0)) && (R15134 = 0 || (R17 = 0 && R15143 = 0)) && (R15136 = 0 || (R17 = 0 && R15143 = 0)) && (R15138 = 0 || (R17 = 0 && R15143 = 0)) && (R15140 = 0 || (R17 = 0 && R15143 = 0)) && (R15144 = 0 || (R17 = 0 && R15143 = 0)) && (R15146 = 0 || (R17 = 0 && R15143 = 0));
// End of Parikh automata intersection problem
