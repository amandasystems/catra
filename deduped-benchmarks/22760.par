// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R11522, R11523, R11524, R11525, R12, R15342, R15343, R15344, R15345, R15346, R15347, R15348, R15349, R15350, R15351, R16196, R16197, R16198, R16199, R16200, R16201, R16202, R16203, R16204, R16205, R16206, R16207, R16208, R16209, R16210, R16211, R16212, R16213, R16214, R16215, R16216, R16217, R16218, R16219, R16220, R16221, R16222, R16223, R16224, R16225, R16226, R16227, R16228, R16229, R16230, R16231, R16232, R16233, R16234, R16235, R16236, R16237, R16238, R16239, R16240, R16241, R16242, R16243, R16244, R16245, R16246, R16247, R16248, R16249, R16250, R16251, R16252, R16253, R16254, R16255, R16256, R16257, R16258, R16259, R16260, R16261, R16262, R16263, R16264, R16265, R16266, R16267, R16268, R16269, R16270, R16271, R16272, R16273, R16274, R16275, R16276, R16277, R16278, R16279, R16280, R16281, R16282, R16283, R16284, R16285, R16286, R16287, R16288, R16289, R16290, R16291, R16292, R16293, R16294, R16295, R16296, R16297, R16298, R16299, R16300, R16301, R16302, R16303, R16304, R16305, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 72];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [73, 73];
  s0 -> s1 [74, 65535];
  s1 -> s1 [0, 72];
  s1 -> s2 [73, 73];
  s1 -> s1 [74, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R21 += 1 };
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R25 += 1 };
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R16226 += 1, R16227 += 1 };
  s0 -> s1 [0, 65535] { R16227 += 1, R19 += 1 };
  s1 -> s1 [0, 65535] { R16227 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 72] { R16229 += 1 };
  s0 -> s0 [0, 65535] { R16228 += 1, R16229 += 1 };
  s0 -> s2 [73, 73] { R16229 += 1 };
  s0 -> s3 [73, 73] { R16229 += 1 };
  s0 -> s1 [78, 65535] { R16229 += 1 };
  s1 -> s1 [0, 72] { R16229 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R16229 += 1 };
  s1 -> s3 [73, 73] { R16229 += 1 };
  s1 -> s1 [78, 65535] { R16229 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 73] { R16229 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [78, 65535] { R16229 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 72] { R16231 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R16230 += 1, R16231 += 1 };
  s0 -> s2 [73, 73] { R16231 += 1, R38 += 1 };
  s0 -> s3 [73, 73] { R16231 += 1, R38 += 1 };
  s0 -> s1 [74, 65535] { R16231 += 1, R38 += 1 };
  s1 -> s1 [0, 72] { R16231 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R16231 += 1, R38 += 1 };
  s1 -> s3 [73, 73] { R16231 += 1, R38 += 1 };
  s1 -> s1 [74, 65535] { R16231 += 1, R38 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R16231 += 1, R38 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 72] { R16233 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R16232 += 1, R16233 += 1 };
  s0 -> s2 [73, 73] { R16233 += 1, R40 += 1 };
  s0 -> s3 [73, 73] { R16233 += 1, R40 += 1 };
  s0 -> s1 [74, 65535] { R16233 += 1, R40 += 1 };
  s1 -> s1 [0, 72] { R16233 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R16233 += 1, R40 += 1 };
  s1 -> s3 [73, 73] { R16233 += 1, R40 += 1 };
  s1 -> s1 [74, 65535] { R16233 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R16233 += 1, R40 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 72] { R16235 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R16234 += 1, R16235 += 1 };
  s0 -> s2 [73, 73] { R16235 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [73, 73] { R16235 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [74, 65535] { R16235 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 72] { R16235 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R16235 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [73, 73] { R16235 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [74, 65535] { R16235 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535] { R16235 += 1, R42 += 1, R43 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 72] { R16237 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R16236 += 1, R16237 += 1 };
  s0 -> s2 [73, 73] { R16237 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [73, 73] { R16237 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [74, 65535] { R16237 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 72] { R16237 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R16237 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [73, 73] { R16237 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [74, 65535] { R16237 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535] { R16237 += 1, R46 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 72] { R16239 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R16238 += 1, R16239 += 1 };
  s0 -> s2 [73, 73] { R16239 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [73, 73] { R16239 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [74, 65535] { R16239 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 72] { R16239 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R16239 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [73, 73] { R16239 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [74, 65535] { R16239 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R16239 += 1, R52 += 1, R53 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 72] { R16241 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R16240 += 1, R16241 += 1 };
  s0 -> s2 [73, 73] { R16241 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [73, 73] { R16241 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [74, 65535] { R16241 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 72] { R16241 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R16241 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [73, 73] { R16241 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [74, 65535] { R16241 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535] { R16241 += 1, R56 += 1, R57 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 72] { R16243 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R16242 += 1, R16243 += 1 };
  s0 -> s2 [73, 73] { R16243 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [73, 73] { R16243 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [74, 65535] { R16243 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 72] { R16243 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R16243 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [73, 73] { R16243 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [74, 65535] { R16243 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535] { R16243 += 1, R62 += 1, R63 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 72] { R16263 += 1 };
  s0 -> s0 [0, 65535] { R16262 += 1, R16263 += 1 };
  s0 -> s2 [73, 73] { R16263 += 1 };
  s0 -> s1 [74, 65535] { R16263 += 1 };
  s1 -> s1 [0, 72] { R16263 += 1 };
  s1 -> s2 [73, 73] { R16263 += 1 };
  s1 -> s1 [74, 65535] { R16263 += 1 };
  s2 -> s2 [0, 65535] { R16263 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R16264 += 1, R16265 += 1 };
  s0 -> s1 [0, 65535] { R16265 += 1, R1 += 1 };
  s1 -> s1 [0, 65535] { R16265 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 72] { R16267 += 1 };
  s0 -> s2 [0, 65535] { R16267 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R16266 += 1, R16267 += 1 };
  s0 -> s3 [73, 73] { R16267 += 1 };
  s0 -> s1 [74, 65535] { R16267 += 1 };
  s1 -> s1 [0, 72] { R16267 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [73, 73] { R16267 += 1 };
  s1 -> s1 [74, 65535] { R16267 += 1 };
  s2 -> s1 [0, 72] { R16267 += 1 };
  s2 -> s2 [0, 65535] { R16267 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [73, 73] { R16267 += 1 };
  s2 -> s1 [74, 65535] { R16267 += 1 };
  s3 -> s3 [0, 65535] { R16267 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 72] { R16269 += 1, R16207 += 1 };
  s0 -> s0 [0, 65535] { R16268 += 1, R16269 += 1 };
  s0 -> s2 [0, 65535] { R16269 += 1, R16206 += 1, R16207 += 1 };
  s0 -> s1 [74, 65535] { R16269 += 1, R16207 += 1 };
  s1 -> s1 [0, 72] { R16269 += 1, R16207 += 1 };
  s1 -> s1 [0, 65535] { R16269 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [74, 65535] { R16269 += 1, R16207 += 1 };
  s2 -> s1 [0, 72] { R16269 += 1, R16207 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R16269 += 1, R16206 += 1, R16207 += 1 };
  s2 -> s1 [74, 65535] { R16269 += 1, R16207 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s0 [0, 65535] { R16270 += 1, R16271 += 1 };
  s0 -> s1 [0, 65535] { R16271 += 1, R16209 += 1, R17 += 1 };
  s0 -> s2 [0, 65535] { R16271 += 1, R16208 += 1, R16209 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R16271 += 1, R16209 += 1, R17 += 1 };
  s1 -> s4 [0, 65535] { R16271 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R16271 += 1, R16209 += 1, R17 += 1 };
  s2 -> s2 [0, 65535] { R16271 += 1, R16208 += 1, R16209 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R16271 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 73] { R16273 += 1, R16211 += 1 };
  s0 -> s0 [0, 65535] { R16272 += 1, R16273 += 1 };
  s0 -> s2 [0, 65535] { R16273 += 1, R16210 += 1, R16211 += 1 };
  s0 -> s1 [77, 65535] { R16273 += 1, R16211 += 1 };
  s1 -> s1 [0, 73] { R16273 += 1, R16211 += 1 };
  s1 -> s1 [0, 65535] { R16273 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [77, 65535] { R16273 += 1, R16211 += 1 };
  s2 -> s1 [0, 73] { R16273 += 1, R16211 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R16273 += 1, R16210 += 1, R16211 += 1 };
  s2 -> s1 [77, 65535] { R16273 += 1, R16211 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R16275 += 1, R16213 += 1, R67 += 1 };
  s0 -> s0 [0, 65535] { R16274 += 1, R16275 += 1 };
  s0 -> s2 [0, 65535] { R16275 += 1, R16212 += 1, R16213 += 1 };
  s1 -> s1 [0, 65535] { R16275 += 1, R16213 += 1, R67 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R16275 += 1 };
  s2 -> s1 [0, 65535] { R16275 += 1, R16213 += 1, R67 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R16275 += 1, R16212 += 1, R16213 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R16275 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 76] { R16277 += 1, R16215 += 1 };
  s0 -> s2 [0, 65535] { R16277 += 1, R16214 += 1, R16215 += 1 };
  s0 -> s3 [0, 65535] { R16277 += 1, R16215 += 1, R69 += 1 };
  s0 -> s0 [0, 65535] { R16276 += 1, R16277 += 1 };
  s0 -> s1 [78, 65535] { R16277 += 1, R16215 += 1 };
  s1 -> s1 [0, 76] { R16277 += 1, R16215 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R16277 += 1 };
  s1 -> s1 [78, 65535] { R16277 += 1, R16215 += 1 };
  s2 -> s1 [0, 76] { R16277 += 1, R16215 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R16277 += 1, R16214 += 1, R16215 += 1 };
  s2 -> s3 [0, 65535] { R16277 += 1, R16215 += 1, R69 += 1 };
  s2 -> s1 [78, 65535] { R16277 += 1, R16215 += 1 };
  s3 -> s1 [0, 76] { R16277 += 1, R16215 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R16277 += 1, R16215 += 1, R69 += 1 };
  s3 -> s5 [0, 65535] { R16277 += 1 };
  s3 -> s1 [78, 65535] { R16277 += 1, R16215 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R16277 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 76] { R16279 += 1, R16217 += 1, R11525 += 1 };
  s0 -> s0 [0, 65535] { R16278 += 1, R16279 += 1 };
  s0 -> s1 [0, 65535] { R16279 += 1, R16217 += 1 };
  s0 -> s2 [0, 65535] { R16279 += 1, R16216 += 1, R16217 += 1 };
  s0 -> s1 [78, 65535] { R16279 += 1, R16217 += 1, R11525 += 1 };
  s1 -> s1 [0, 76] { R16279 += 1, R16217 += 1, R11525 += 1 };
  s1 -> s1 [0, 65535] { R16279 += 1, R16217 += 1 };
  s1 -> s4 [0, 65535] { R16279 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [78, 65535] { R16279 += 1, R16217 += 1, R11525 += 1 };
  s2 -> s1 [0, 76] { R16279 += 1, R16217 += 1, R11525 += 1 };
  s2 -> s1 [0, 65535] { R16279 += 1, R16217 += 1 };
  s2 -> s2 [0, 65535] { R16279 += 1, R16216 += 1, R16217 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [78, 65535] { R16279 += 1, R16217 += 1, R11525 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R16279 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R16281 += 1, R16218 += 1, R16219 += 1 };
  s0 -> s0 [0, 65535] { R16280 += 1, R16281 += 1 };
  s0 -> s2 [0, 65535] { R16281 += 1, R16219 += 1, R15346 += 1, R15347 += 1 };
  s0 -> s3 [0, 65535] { R16281 += 1, R16219 += 1 };
  s1 -> s1 [0, 65535] { R16281 += 1, R16218 += 1, R16219 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R16281 += 1, R16219 += 1, R15346 += 1, R15347 += 1 };
  s1 -> s3 [0, 65535] { R16281 += 1, R16219 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R16281 += 1, R16219 += 1, R15346 += 1, R15347 += 1 };
  s2 -> s5 [0, 65535] { R16281 += 1 };
  s2 -> s3 [0, 65535] { R16281 += 1, R16219 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R16281 += 1 };
  s3 -> s3 [0, 65535] { R16281 += 1, R16219 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R16281 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 77] { R16283 += 1, R16221 += 1, R15351 += 1 };
  s0 -> s1 [0, 65535] { R16283 += 1, R16221 += 1 };
  s0 -> s2 [0, 65535] { R16283 += 1, R16220 += 1, R16221 += 1 };
  s0 -> s0 [0, 65535] { R16282 += 1, R16283 += 1 };
  s0 -> s1 [90, 65535] { R16283 += 1, R16221 += 1, R15351 += 1 };
  s1 -> s1 [0, 77] { R16283 += 1, R16221 += 1, R15351 += 1 };
  s1 -> s1 [0, 65535] { R16283 += 1, R16221 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R16283 += 1 };
  s1 -> s1 [90, 65535] { R16283 += 1, R16221 += 1, R15351 += 1 };
  s2 -> s1 [0, 77] { R16283 += 1, R16221 += 1, R15351 += 1 };
  s2 -> s1 [0, 65535] { R16283 += 1, R16221 += 1 };
  s2 -> s2 [0, 65535] { R16283 += 1, R16220 += 1, R16221 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [90, 65535] { R16283 += 1, R16221 += 1, R15351 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R16283 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R16285 += 1, R16222 += 1, R16223 += 1 };
  s0 -> s0 [0, 65535] { R16284 += 1, R16285 += 1 };
  s0 -> s2 [0, 65535] { R16285 += 1, R16223 += 1 };
  s1 -> s1 [0, 65535] { R16285 += 1, R16222 += 1, R16223 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R16285 += 1, R16223 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R16285 += 1, R16223 += 1 };
  s2 -> s4 [0, 65535] { R16285 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R16285 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 76] { R16287 += 1, R16225 += 1, R16205 += 1 };
  s0 -> s2 [0, 65535] { R16287 += 1, R16225 += 1, R16204 += 1, R16205 += 1 };
  s0 -> s0 [0, 65535] { R16286 += 1, R16287 += 1 };
  s0 -> s3 [0, 65535] { R16287 += 1, R16224 += 1, R16225 += 1 };
  s0 -> s4 [77, 77] { R16287 += 1, R16225 += 1, R16205 += 1 };
  s0 -> s5 [77, 77] { R16287 += 1, R16225 += 1, R16205 += 1 };
  s0 -> s1 [91, 65535] { R16287 += 1, R16225 += 1, R16205 += 1 };
  s1 -> s1 [0, 76] { R16287 += 1, R16225 += 1, R16205 += 1 };
  s1 -> s6 [0, 65535] { R16287 += 1 };
  s1 -> s1 [0, 65535] { R16287 += 1, R16225 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s4 [77, 77] { R16287 += 1, R16225 += 1, R16205 += 1 };
  s1 -> s5 [77, 77] { R16287 += 1, R16225 += 1, R16205 += 1 };
  s1 -> s1 [91, 65535] { R16287 += 1, R16225 += 1, R16205 += 1 };
  s2 -> s1 [0, 76] { R16287 += 1, R16225 += 1, R16205 += 1 };
  s2 -> s2 [0, 65535] { R16287 += 1, R16225 += 1, R16204 += 1, R16205 += 1 };
  s2 -> s6 [0, 65535] { R16287 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s4 [77, 77] { R16287 += 1, R16225 += 1, R16205 += 1 };
  s2 -> s5 [77, 77] { R16287 += 1, R16225 += 1, R16205 += 1 };
  s2 -> s1 [91, 65535] { R16287 += 1, R16225 += 1, R16205 += 1 };
  s3 -> s1 [0, 76] { R16287 += 1, R16225 += 1, R16205 += 1 };
  s3 -> s2 [0, 65535] { R16287 += 1, R16225 += 1, R16204 += 1, R16205 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s3 [0, 65535] { R16287 += 1, R16224 += 1, R16225 += 1 };
  s3 -> s4 [77, 77] { R16287 += 1, R16225 += 1, R16205 += 1 };
  s3 -> s5 [77, 77] { R16287 += 1, R16225 += 1, R16205 += 1 };
  s3 -> s1 [91, 65535] { R16287 += 1, R16225 += 1, R16205 += 1 };
  s4 -> s4 [0, 77] { R16287 += 1, R16225 += 1, R16205 += 1 };
  s4 -> s4 [0, 65535] { R16287 += 1, R16225 += 1 };
  s4 -> s6 [0, 65535] { R16287 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s4 [91, 65535] { R16287 += 1, R16225 += 1, R16205 += 1 };
  s5 -> s6 [0, 65535] { R16287 += 1 };
  s5 -> s5 [0, 65535] { R16287 += 1, R16225 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s6 [0, 65535] { R16287 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s0 [0, 65535] { R16288 += 1, R16289 += 1 };
  s0 -> s1 [0, 65535] { R16289 += 1, R16244 += 1, R16245 += 1 };
  s0 -> s2 [0, 65535] { R16289 += 1, R16245 += 1, R18 += 1 };
  s1 -> s1 [0, 65535] { R16289 += 1, R16244 += 1, R16245 += 1 };
  s1 -> s2 [0, 65535] { R16289 += 1, R16245 += 1, R18 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R16289 += 1 };
  s2 -> s2 [0, 65535] { R16289 += 1, R16245 += 1, R18 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R16289 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 72] { R16291 += 1, R16247 += 1 };
  s0 -> s0 [0, 65535] { R16290 += 1, R16291 += 1 };
  s0 -> s2 [0, 65535] { R16291 += 1, R16246 += 1, R16247 += 1 };
  s0 -> s3 [73, 73] { R16291 += 1, R16247 += 1 };
  s0 -> s4 [73, 73] { R16291 += 1, R16247 += 1 };
  s0 -> s5 [77, 77] { R16291 += 1, R16247 += 1 };
  s0 -> s1 [78, 65535] { R16291 += 1, R16247 += 1 };
  s1 -> s1 [0, 72] { R16291 += 1, R16247 += 1 };
  s1 -> s3 [73, 73] { R16291 += 1, R16247 += 1 };
  s1 -> s4 [73, 73] { R16291 += 1, R16247 += 1 };
  s1 -> s5 [77, 77] { R16291 += 1, R16247 += 1 };
  s1 -> s1 [78, 65535] { R16291 += 1, R16247 += 1 };
  s2 -> s1 [0, 72] { R16291 += 1, R16247 += 1 };
  s2 -> s2 [0, 65535] { R16291 += 1, R16246 += 1, R16247 += 1 };
  s2 -> s3 [73, 73] { R16291 += 1, R16247 += 1 };
  s2 -> s4 [73, 73] { R16291 += 1, R16247 += 1 };
  s2 -> s5 [77, 77] { R16291 += 1, R16247 += 1 };
  s2 -> s1 [78, 65535] { R16291 += 1, R16247 += 1 };
  s4 -> s4 [0, 73] { R16291 += 1, R16247 += 1 };
  s4 -> s7 [77, 77] { R16291 += 1, R16247 += 1 };
  s4 -> s4 [78, 65535] { R16291 += 1, R16247 += 1 };
  s5 -> s5 [0, 72] { R16291 += 1, R16247 += 1 };
  s5 -> s5 [0, 65535] { R16291 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [73, 73] { R16291 += 1, R16247 += 1 };
  s5 -> s8 [73, 73] { R16291 += 1, R16247 += 1 };
  s5 -> s5 [77, 65535] { R16291 += 1, R16247 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 73] { R16291 += 1, R16247 += 1 };
  s7 -> s7 [0, 65535] { R16291 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [77, 65535] { R16291 += 1, R16247 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R16291 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 72] { R16293 += 1, R16249 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R16292 += 1, R16293 += 1 };
  s0 -> s2 [0, 65535] { R16293 += 1, R16248 += 1, R16249 += 1 };
  s0 -> s3 [73, 73] { R16293 += 1, R16249 += 1, R66 += 1 };
  s0 -> s4 [73, 73] { R16293 += 1, R16249 += 1, R66 += 1 };
  s0 -> s1 [74, 65535] { R16293 += 1, R16249 += 1, R66 += 1 };
  s1 -> s1 [0, 72] { R16293 += 1, R16249 += 1, R66 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R16293 += 1 };
  s1 -> s3 [73, 73] { R16293 += 1, R16249 += 1, R66 += 1 };
  s1 -> s4 [73, 73] { R16293 += 1, R16249 += 1, R66 += 1 };
  s1 -> s1 [74, 65535] { R16293 += 1, R16249 += 1, R66 += 1 };
  s2 -> s1 [0, 72] { R16293 += 1, R16249 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R16293 += 1, R16248 += 1, R16249 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R16293 += 1, R16249 += 1, R66 += 1 };
  s2 -> s4 [73, 73] { R16293 += 1, R16249 += 1, R66 += 1 };
  s2 -> s1 [74, 65535] { R16293 += 1, R16249 += 1, R66 += 1 };
  s3 -> s3 [0, 65535] { R16293 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R16293 += 1, R16249 += 1, R66 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R16293 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R16293 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 72] { R16295 += 1, R16251 += 1, R68 += 1 };
  s0 -> s0 [0, 65535] { R16294 += 1, R16295 += 1 };
  s0 -> s2 [0, 65535] { R16295 += 1, R16250 += 1, R16251 += 1 };
  s0 -> s3 [73, 73] { R16295 += 1, R16251 += 1, R68 += 1 };
  s0 -> s4 [73, 73] { R16295 += 1, R16251 += 1, R68 += 1 };
  s0 -> s1 [74, 65535] { R16295 += 1, R16251 += 1, R68 += 1 };
  s1 -> s1 [0, 72] { R16295 += 1, R16251 += 1, R68 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R16295 += 1 };
  s1 -> s3 [73, 73] { R16295 += 1, R16251 += 1, R68 += 1 };
  s1 -> s4 [73, 73] { R16295 += 1, R16251 += 1, R68 += 1 };
  s1 -> s1 [74, 65535] { R16295 += 1, R16251 += 1, R68 += 1 };
  s2 -> s1 [0, 72] { R16295 += 1, R16251 += 1, R68 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R16295 += 1, R16250 += 1, R16251 += 1 };
  s2 -> s3 [73, 73] { R16295 += 1, R16251 += 1, R68 += 1 };
  s2 -> s4 [73, 73] { R16295 += 1, R16251 += 1, R68 += 1 };
  s2 -> s1 [74, 65535] { R16295 += 1, R16251 += 1, R68 += 1 };
  s3 -> s6 [0, 65535] { R16295 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R16295 += 1, R16251 += 1, R68 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R16295 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R16295 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 72] { R16297 += 1, R16253 += 1, R11523 += 1 };
  s0 -> s2 [0, 72] { R16297 += 1, R16253 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s0 [0, 65535] { R16296 += 1, R16297 += 1 };
  s0 -> s3 [0, 65535] { R16297 += 1, R16252 += 1, R16253 += 1 };
  s0 -> s4 [73, 73] { R16297 += 1, R16253 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s5 [73, 73] { R16297 += 1, R16253 += 1, R11523 += 1 };
  s0 -> s6 [73, 73] { R16297 += 1, R16253 += 1, R11523 += 1 };
  s0 -> s7 [73, 73] { R16297 += 1, R16253 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s1 [74, 76] { R16297 += 1, R16253 += 1, R11523 += 1 };
  s0 -> s2 [74, 65535] { R16297 += 1, R16253 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s1 [78, 65535] { R16297 += 1, R16253 += 1, R11523 += 1 };
  s1 -> s1 [0, 72] { R16297 += 1, R16253 += 1, R11523 += 1 };
  s1 -> s1 [0, 65535] { R16297 += 1 };
  s1 -> s9 [0, 65535];
  s1 -> s5 [73, 73] { R16297 += 1, R16253 += 1 };
  s1 -> s6 [73, 73] { R16297 += 1, R16253 += 1 };
  s1 -> s1 [74, 76] { R16297 += 1, R16253 += 1, R11523 += 1 };
  s1 -> s1 [74, 65535] { R16297 += 1, R16253 += 1 };
  s1 -> s1 [78, 65535] { R16297 += 1, R16253 += 1, R11523 += 1 };
  s2 -> s1 [0, 72] { R16297 += 1, R16253 += 1, R11523 += 1 };
  s2 -> s2 [0, 72] { R16297 += 1, R16253 += 1, R11522 += 1, R11523 += 1 };
  s2 -> s4 [73, 73] { R16297 += 1, R16253 += 1, R11522 += 1, R11523 += 1 };
  s2 -> s5 [73, 73] { R16297 += 1, R16253 += 1, R11523 += 1 };
  s2 -> s6 [73, 73] { R16297 += 1, R16253 += 1, R11523 += 1 };
  s2 -> s7 [73, 73] { R16297 += 1, R16253 += 1, R11522 += 1, R11523 += 1 };
  s2 -> s1 [74, 76] { R16297 += 1, R16253 += 1, R11523 += 1 };
  s2 -> s2 [74, 65535] { R16297 += 1, R16253 += 1, R11522 += 1, R11523 += 1 };
  s2 -> s1 [78, 65535] { R16297 += 1, R16253 += 1, R11523 += 1 };
  s3 -> s1 [0, 72] { R16297 += 1, R16253 += 1, R11523 += 1 };
  s3 -> s2 [0, 72] { R16297 += 1, R16253 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s3 [0, 65535] { R16297 += 1, R16252 += 1, R16253 += 1 };
  s3 -> s4 [73, 73] { R16297 += 1, R16253 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s5 [73, 73] { R16297 += 1, R16253 += 1, R11523 += 1 };
  s3 -> s6 [73, 73] { R16297 += 1, R16253 += 1, R11523 += 1 };
  s3 -> s7 [73, 73] { R16297 += 1, R16253 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s1 [74, 76] { R16297 += 1, R16253 += 1, R11523 += 1 };
  s3 -> s2 [74, 65535] { R16297 += 1, R16253 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s1 [78, 65535] { R16297 += 1, R16253 += 1, R11523 += 1 };
  s5 -> s5 [0, 65535] { R16297 += 1 };
  s5 -> s9 [0, 65535];
  s6 -> s6 [0, 76] { R16297 += 1, R16253 += 1, R11523 += 1 };
  s6 -> s8 [0, 65535] { R16297 += 1 };
  s6 -> s6 [0, 65535] { R16297 += 1, R16253 += 1 };
  s6 -> s9 [0, 65535];
  s6 -> s6 [78, 65535] { R16297 += 1, R16253 += 1, R11523 += 1 };
  s7 -> s6 [0, 76] { R16297 += 1, R16253 += 1, R11523 += 1 };
  s7 -> s7 [0, 65535] { R16297 += 1, R16253 += 1, R11522 += 1, R11523 += 1 };
  s7 -> s6 [78, 65535] { R16297 += 1, R16253 += 1, R11523 += 1 };
  s8 -> s8 [0, 65535] { R16297 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s8, s5, s9, s6, s1;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 72] { R16299 += 1, R16255 += 1, R15342 += 1, R15343 += 1 };
  s0 -> s2 [0, 72] { R16299 += 1, R16255 += 1, R15343 += 1, R15344 += 1 };
  s0 -> s0 [0, 65535] { R16298 += 1, R16299 += 1 };
  s0 -> s3 [0, 65535] { R16299 += 1, R16254 += 1, R16255 += 1 };
  s0 -> s4 [73, 73] { R16299 += 1, R16255 += 1, R15343 += 1, R15344 += 1 };
  s0 -> s5 [73, 73] { R16299 += 1, R16255 += 1, R15342 += 1, R15343 += 1 };
  s0 -> s6 [73, 73] { R16299 += 1, R16255 += 1, R15343 += 1, R15344 += 1 };
  s0 -> s7 [73, 73] { R16299 += 1, R16255 += 1, R15342 += 1, R15343 += 1 };
  s0 -> s1 [74, 65535] { R16299 += 1, R16255 += 1, R15342 += 1, R15343 += 1 };
  s0 -> s2 [74, 65535] { R16299 += 1, R16255 += 1, R15343 += 1, R15344 += 1 };
  s1 -> s1 [0, 72] { R16299 += 1, R16255 += 1, R15342 += 1, R15343 += 1 };
  s1 -> s2 [0, 72] { R16299 += 1, R16255 += 1, R15343 += 1, R15344 += 1 };
  s1 -> s4 [73, 73] { R16299 += 1, R16255 += 1, R15343 += 1, R15344 += 1 };
  s1 -> s5 [73, 73] { R16299 += 1, R16255 += 1, R15342 += 1, R15343 += 1 };
  s1 -> s6 [73, 73] { R16299 += 1, R16255 += 1, R15343 += 1, R15344 += 1 };
  s1 -> s7 [73, 73] { R16299 += 1, R16255 += 1, R15342 += 1, R15343 += 1 };
  s1 -> s1 [74, 65535] { R16299 += 1, R16255 += 1, R15342 += 1, R15343 += 1 };
  s1 -> s2 [74, 65535] { R16299 += 1, R16255 += 1, R15343 += 1, R15344 += 1 };
  s2 -> s2 [0, 72] { R16299 += 1, R16255 += 1, R15343 += 1, R15344 += 1 };
  s2 -> s2 [0, 65535] { R16299 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s4 [73, 73] { R16299 += 1, R16255 += 1, R15343 += 1, R15344 += 1 };
  s2 -> s6 [73, 73] { R16299 += 1, R16255 += 1, R15343 += 1, R15344 += 1 };
  s2 -> s2 [74, 65535] { R16299 += 1, R16255 += 1, R15343 += 1, R15344 += 1 };
  s3 -> s1 [0, 72] { R16299 += 1, R16255 += 1, R15342 += 1, R15343 += 1 };
  s3 -> s2 [0, 72] { R16299 += 1, R16255 += 1, R15343 += 1, R15344 += 1 };
  s3 -> s3 [0, 65535] { R16299 += 1, R16254 += 1, R16255 += 1 };
  s3 -> s4 [73, 73] { R16299 += 1, R16255 += 1, R15343 += 1, R15344 += 1 };
  s3 -> s5 [73, 73] { R16299 += 1, R16255 += 1, R15342 += 1, R15343 += 1 };
  s3 -> s6 [73, 73] { R16299 += 1, R16255 += 1, R15343 += 1, R15344 += 1 };
  s3 -> s7 [73, 73] { R16299 += 1, R16255 += 1, R15342 += 1, R15343 += 1 };
  s3 -> s1 [74, 65535] { R16299 += 1, R16255 += 1, R15342 += 1, R15343 += 1 };
  s3 -> s2 [74, 65535] { R16299 += 1, R16255 += 1, R15343 += 1, R15344 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s4 [0, 65535] { R16299 += 1 };
  s5 -> s5 [0, 65535] { R16299 += 1, R16255 += 1, R15342 += 1, R15343 += 1 };
  s5 -> s6 [0, 65535] { R16299 += 1, R16255 += 1, R15343 += 1, R15344 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s9 [0, 65535] { R16299 += 1 };
  s6 -> s6 [0, 65535] { R16299 += 1, R16255 += 1, R15343 += 1, R15344 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R16299 += 1 };
  accepting s4, s8, s2, s9, s6;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 72] { R16301 += 1, R16257 += 1, R15348 += 1, R15349 += 1 };
  s0 -> s2 [0, 72] { R16301 += 1, R16257 += 1, R15349 += 1 };
  s0 -> s0 [0, 65535] { R16300 += 1, R16301 += 1 };
  s0 -> s3 [0, 65535] { R16301 += 1, R16256 += 1, R16257 += 1 };
  s0 -> s4 [73, 73] { R16301 += 1, R16257 += 1, R15349 += 1 };
  s0 -> s5 [73, 73] { R16301 += 1, R16257 += 1, R15349 += 1 };
  s0 -> s6 [73, 73] { R16301 += 1, R16257 += 1, R15348 += 1, R15349 += 1 };
  s0 -> s7 [73, 73] { R16301 += 1, R16257 += 1, R15348 += 1, R15349 += 1 };
  s0 -> s2 [74, 77] { R16301 += 1, R16257 += 1, R15349 += 1 };
  s0 -> s1 [74, 65535] { R16301 += 1, R16257 += 1, R15348 += 1, R15349 += 1 };
  s0 -> s8 [90, 90] { R16301 += 1, R16257 += 1, R15349 += 1 };
  s0 -> s2 [91, 65535] { R16301 += 1, R16257 += 1, R15349 += 1 };
  s1 -> s1 [0, 72] { R16301 += 1, R16257 += 1, R15348 += 1, R15349 += 1 };
  s1 -> s2 [0, 72] { R16301 += 1, R16257 += 1, R15349 += 1 };
  s1 -> s4 [73, 73] { R16301 += 1, R16257 += 1, R15349 += 1 };
  s1 -> s5 [73, 73] { R16301 += 1, R16257 += 1, R15349 += 1 };
  s1 -> s6 [73, 73] { R16301 += 1, R16257 += 1, R15348 += 1, R15349 += 1 };
  s1 -> s7 [73, 73] { R16301 += 1, R16257 += 1, R15348 += 1, R15349 += 1 };
  s1 -> s2 [74, 77] { R16301 += 1, R16257 += 1, R15349 += 1 };
  s1 -> s1 [74, 65535] { R16301 += 1, R16257 += 1, R15348 += 1, R15349 += 1 };
  s1 -> s8 [90, 90] { R16301 += 1, R16257 += 1, R15349 += 1 };
  s1 -> s2 [91, 65535] { R16301 += 1, R16257 += 1, R15349 += 1 };
  s2 -> s2 [0, 72] { R16301 += 1, R16257 += 1, R15349 += 1 };
  s2 -> s4 [73, 73] { R16301 += 1, R16257 += 1, R15349 += 1 };
  s2 -> s5 [73, 73] { R16301 += 1, R16257 += 1, R15349 += 1 };
  s2 -> s2 [74, 77] { R16301 += 1, R16257 += 1, R15349 += 1 };
  s2 -> s8 [90, 90] { R16301 += 1, R16257 += 1, R15349 += 1 };
  s2 -> s2 [91, 65535] { R16301 += 1, R16257 += 1, R15349 += 1 };
  s3 -> s1 [0, 72] { R16301 += 1, R16257 += 1, R15348 += 1, R15349 += 1 };
  s3 -> s2 [0, 72] { R16301 += 1, R16257 += 1, R15349 += 1 };
  s3 -> s3 [0, 65535] { R16301 += 1, R16256 += 1, R16257 += 1 };
  s3 -> s4 [73, 73] { R16301 += 1, R16257 += 1, R15349 += 1 };
  s3 -> s5 [73, 73] { R16301 += 1, R16257 += 1, R15349 += 1 };
  s3 -> s6 [73, 73] { R16301 += 1, R16257 += 1, R15348 += 1, R15349 += 1 };
  s3 -> s7 [73, 73] { R16301 += 1, R16257 += 1, R15348 += 1, R15349 += 1 };
  s3 -> s2 [74, 77] { R16301 += 1, R16257 += 1, R15349 += 1 };
  s3 -> s1 [74, 65535] { R16301 += 1, R16257 += 1, R15348 += 1, R15349 += 1 };
  s3 -> s8 [90, 90] { R16301 += 1, R16257 += 1, R15349 += 1 };
  s3 -> s2 [91, 65535] { R16301 += 1, R16257 += 1, R15349 += 1 };
  s5 -> s5 [0, 77] { R16301 += 1, R16257 += 1, R15349 += 1 };
  s5 -> s11 [90, 90] { R16301 += 1, R16257 += 1, R15349 += 1 };
  s5 -> s5 [91, 65535] { R16301 += 1, R16257 += 1, R15349 += 1 };
  s7 -> s5 [0, 77] { R16301 += 1, R16257 += 1, R15349 += 1 };
  s7 -> s7 [0, 65535] { R16301 += 1, R16257 += 1, R15348 += 1, R15349 += 1 };
  s7 -> s11 [90, 90] { R16301 += 1, R16257 += 1, R15349 += 1 };
  s7 -> s5 [91, 65535] { R16301 += 1, R16257 += 1, R15349 += 1 };
  s8 -> s8 [0, 72] { R16301 += 1, R16257 += 1, R15349 += 1 };
  s8 -> s8 [0, 65535] { R16301 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [73, 73] { R16301 += 1, R16257 += 1 };
  s8 -> s11 [73, 73] { R16301 += 1, R16257 += 1 };
  s8 -> s8 [74, 77] { R16301 += 1, R16257 += 1, R15349 += 1 };
  s8 -> s8 [74, 65535] { R16301 += 1, R16257 += 1 };
  s8 -> s8 [90, 65535] { R16301 += 1, R16257 += 1, R15349 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R16301 += 1 };
  s11 -> s11 [0, 77] { R16301 += 1, R16257 += 1, R15349 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s12 [0, 65535] { R16301 += 1 };
  s11 -> s11 [0, 65535] { R16301 += 1, R16257 += 1 };
  s11 -> s11 [90, 65535] { R16301 += 1, R16257 += 1, R15349 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R16301 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 72] { R16303 += 1, R16259 += 1, R16197 += 1, R16198 += 1 };
  s0 -> s2 [0, 72] { R16303 += 1, R16259 += 1, R16196 += 1, R16197 += 1 };
  s0 -> s3 [0, 65535] { R16303 += 1, R16258 += 1, R16259 += 1 };
  s0 -> s0 [0, 65535] { R16302 += 1, R16303 += 1 };
  s0 -> s4 [73, 73] { R16303 += 1, R16259 += 1, R16196 += 1, R16197 += 1 };
  s0 -> s5 [73, 73] { R16303 += 1, R16259 += 1, R16197 += 1, R16198 += 1 };
  s0 -> s6 [73, 73] { R16303 += 1, R16259 += 1, R16197 += 1, R16198 += 1 };
  s0 -> s7 [73, 73] { R16303 += 1, R16259 += 1, R16196 += 1, R16197 += 1 };
  s0 -> s1 [74, 65535] { R16303 += 1, R16259 += 1, R16197 += 1, R16198 += 1 };
  s0 -> s2 [74, 65535] { R16303 += 1, R16259 += 1, R16196 += 1, R16197 += 1 };
  s1 -> s1 [0, 72] { R16303 += 1, R16259 += 1, R16197 += 1, R16198 += 1 };
  s1 -> s11 [0, 72] { R16303 += 1, R16259 += 1 };
  s1 -> s12 [73, 73] { R16303 += 1, R16259 += 1 };
  s1 -> s5 [73, 73] { R16303 += 1, R16259 += 1, R16197 += 1, R16198 += 1 };
  s1 -> s6 [73, 73] { R16303 += 1, R16259 += 1, R16197 += 1, R16198 += 1 };
  s1 -> s8 [73, 73] { R16303 += 1, R16259 += 1 };
  s1 -> s1 [74, 65535] { R16303 += 1, R16259 += 1, R16197 += 1, R16198 += 1 };
  s1 -> s11 [74, 65535] { R16303 += 1, R16259 += 1 };
  s2 -> s1 [0, 72] { R16303 += 1, R16259 += 1, R16197 += 1, R16198 += 1 };
  s2 -> s2 [0, 72] { R16303 += 1, R16259 += 1, R16196 += 1, R16197 += 1 };
  s2 -> s4 [73, 73] { R16303 += 1, R16259 += 1, R16196 += 1, R16197 += 1 };
  s2 -> s5 [73, 73] { R16303 += 1, R16259 += 1, R16197 += 1, R16198 += 1 };
  s2 -> s6 [73, 73] { R16303 += 1, R16259 += 1, R16197 += 1, R16198 += 1 };
  s2 -> s7 [73, 73] { R16303 += 1, R16259 += 1, R16196 += 1, R16197 += 1 };
  s2 -> s1 [74, 65535] { R16303 += 1, R16259 += 1, R16197 += 1, R16198 += 1 };
  s2 -> s2 [74, 65535] { R16303 += 1, R16259 += 1, R16196 += 1, R16197 += 1 };
  s3 -> s1 [0, 72] { R16303 += 1, R16259 += 1, R16197 += 1, R16198 += 1 };
  s3 -> s2 [0, 72] { R16303 += 1, R16259 += 1, R16196 += 1, R16197 += 1 };
  s3 -> s3 [0, 65535] { R16303 += 1, R16258 += 1, R16259 += 1 };
  s3 -> s4 [73, 73] { R16303 += 1, R16259 += 1, R16196 += 1, R16197 += 1 };
  s3 -> s5 [73, 73] { R16303 += 1, R16259 += 1, R16197 += 1, R16198 += 1 };
  s3 -> s6 [73, 73] { R16303 += 1, R16259 += 1, R16197 += 1, R16198 += 1 };
  s3 -> s7 [73, 73] { R16303 += 1, R16259 += 1, R16196 += 1, R16197 += 1 };
  s3 -> s1 [74, 65535] { R16303 += 1, R16259 += 1, R16197 += 1, R16198 += 1 };
  s3 -> s2 [74, 65535] { R16303 += 1, R16259 += 1, R16196 += 1, R16197 += 1 };
  s6 -> s6 [0, 65535] { R16303 += 1, R16259 += 1, R16197 += 1, R16198 += 1 };
  s6 -> s8 [0, 65535] { R16303 += 1, R16259 += 1 };
  s7 -> s6 [0, 65535] { R16303 += 1, R16259 += 1, R16197 += 1, R16198 += 1 };
  s7 -> s7 [0, 65535] { R16303 += 1, R16259 += 1, R16196 += 1, R16197 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [0, 65535] { R16303 += 1 };
  s8 -> s8 [0, 65535] { R16303 += 1, R16259 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R16303 += 1 };
  s11 -> s11 [0, 72] { R16303 += 1, R16259 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R16303 += 1 };
  s11 -> s12 [73, 73] { R16303 += 1, R16259 += 1 };
  s11 -> s8 [73, 73] { R16303 += 1, R16259 += 1 };
  s11 -> s11 [74, 65535] { R16303 += 1, R16259 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R16303 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 72] { R16305 += 1, R16261 += 1, R16202 += 1, R16203 += 1 };
  s0 -> s0 [0, 65535] { R16304 += 1, R16305 += 1 };
  s0 -> s2 [0, 65535] { R16305 += 1, R16260 += 1, R16261 += 1 };
  s0 -> s3 [73, 73] { R16305 += 1, R16261 += 1, R16202 += 1, R16203 += 1 };
  s0 -> s4 [73, 73] { R16305 += 1, R16261 += 1, R16202 += 1, R16203 += 1 };
  s0 -> s1 [74, 65535] { R16305 += 1, R16261 += 1, R16202 += 1, R16203 += 1 };
  s1 -> s1 [0, 72] { R16305 += 1, R16261 += 1, R16202 += 1, R16203 += 1 };
  s1 -> s1 [0, 65535] { R16305 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [73, 73] { R16305 += 1, R16261 += 1, R16202 += 1, R16203 += 1 };
  s1 -> s4 [73, 73] { R16305 += 1, R16261 += 1, R16202 += 1, R16203 += 1 };
  s1 -> s1 [74, 65535] { R16305 += 1, R16261 += 1, R16202 += 1, R16203 += 1 };
  s2 -> s1 [0, 72] { R16305 += 1, R16261 += 1, R16202 += 1, R16203 += 1 };
  s2 -> s2 [0, 65535] { R16305 += 1, R16260 += 1, R16261 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [73, 73] { R16305 += 1, R16261 += 1, R16202 += 1, R16203 += 1 };
  s2 -> s4 [73, 73] { R16305 += 1, R16261 += 1, R16202 += 1, R16203 += 1 };
  s2 -> s1 [74, 65535] { R16305 += 1, R16261 += 1, R16202 += 1, R16203 += 1 };
  s3 -> s3 [0, 65535] { R16305 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R16305 += 1, R16261 += 1, R16202 += 1, R16203 += 1 };
  s4 -> s5 [0, 65535] { R16305 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R16305 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
synchronised {  // Automata constraining P54
automaton P54_0 {
  init s0;
  s0 -> s1 [109, 109];
  accepting s1;
};
};
constraint R2 = R16305 && R20 - R16305 = -1 && R21 = R16305 && R22 - R16305 = -1 && R23 = R16305 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R15351 + -1*R15349 - R53 = 0 && R52 + R15350 + R15348 = 0 && R16246 = 0 && R16247 = 0 && R16252 = 0 && R16253 = 0 && R16254 = 0 && R16255 = 0 && R16256 = 0 && R16257 = 0 && R16258 = 0 && R16259 = 0 && R16262 = 0 && R16263 = R16305 && R16264 = 0 && R16265 = R16305 && R16266 = 0 && R16267 = R16305 && R16268 = 0 && R16269 = R16305 && R16270 = 0 && R16271 = R16305 && R16272 = 0 && R16273 = R16305 && R16274 = 0 && R16275 = R16305 && R16276 = 0 && R16277 = R16305 && R16278 = 0 && R16279 = R16305 && R16280 = 0 && R16281 = R16305 && R16282 = 0 && R16283 = R16305 && R16284 = 0 && R16285 = R16305 && R16286 = 0 && R16287 = R16305 && R16288 = 0 && R16289 = R16305 && R16290 = 0 && R16291 = R16305 && R16292 = 0 && R16293 = R16305 && R16294 = 0 && R16295 = R16305 && R16296 = 0 && R16297 = R16305 && R16298 = 0 && R16299 = R16305 && R16300 = 0 && R16301 = R16305 && R16302 = 0 && R16303 = R16305 && R16304 = 0 && -1 < R1 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R15351 + -1*R15349 - R53 < 1 && 0 < R16305 && (R1 != 0 || R17 = 0 || (R16206 = 0 && R16207 = 0)) && (R1 != 0 || R17 = 0 || (R16208 = 0 && R16209 = 0)) && (R1 != 0 || R17 = 0 || (R16210 = 0 && R16211 = 0)) && (R1 != 0 || R17 = 0 || (R16212 = 0 && R16213 = 0)) && (R1 != 0 || R17 = 0 || (R16214 = 0 && R16215 = 0)) && (R1 != 0 || R17 = 0 || (R16216 = 0 && R16217 = 0)) && (R1 != 0 || R17 = 0 || (R16218 = 0 && R16219 = 0)) && (R1 != 0 || R17 = 0 || (R16220 = 0 && R16221 = 0)) && (R1 != 0 || R17 = 0 || (R16222 = 0 && R16223 = 0)) && (R1 != 0 || R17 = 0 || (R16224 = 0 && R16225 = 0)) && (R48 + R15347 + R15344 != 0 || ((R42 + R11524 + R11522 != 0 || R43 + R11525 + R11523 + -1*R15351 + -1*R15349 - R53 = 0 || R53 + R15351 + R15349 < 1) && (R42 + R11524 + R11522 = 0 || R53 + R15351 + R15349 < 1))) && (R48 + R15347 + R15344 != 0 || ((R46 + R15345 + R15342 != 0 || R47 + R15346 + R15343 + -1*R15351 + -1*R15349 - R53 = 0 || R53 + R15351 + R15349 < 1) && (R46 + R15345 + R15342 = 0 || R53 + R15351 + R15349 < 1))) && (R16206 != 0 || R1 = R16207 || R1 < 1) && (R16208 != 0 || R1 = R16209 || R1 < 1) && (R16210 != 0 || R1 = R16211 || R1 < 1) && (R16212 != 0 || R1 = R16213 || R1 < 1) && (R16214 != 0 || R1 = R16215 || R1 < 1) && (R16216 != 0 || R1 = R16217 || R1 < 1) && (R16218 != 0 || R1 = R16219 || R1 < 1) && (R16220 != 0 || R1 = R16221 || R1 < 1) && (R16222 != 0 || R1 = R16223 || R1 < 1) && (R16224 != 0 || R1 = R16225 || R1 < 1) && (R18 = 0 || (R16244 = 0 && R16245 = 0)) && (R18 = 0 || (R16248 = 0 && R16249 = 0)) && (R18 = 0 || (R16250 = 0 && R16251 = 0)) && (R18 = 0 || (R16260 = 0 && R16261 = 0)) && (R19 = 0 || (R16226 = 0 && R16227 = 0)) && (R19 = 0 || (R16228 = 0 && R16229 = 0)) && (R19 = 0 || (R16230 = 0 && R16231 = 0)) && (R19 = 0 || (R16232 = 0 && R16233 = 0)) && (R19 = 0 || (R16234 = 0 && R16235 = 0)) && (R19 = 0 || (R16236 = 0 && R16237 = 0)) && (R19 = 0 || (R16238 = 0 && R16239 = 0)) && (R19 = 0 || (R16240 = 0 && R16241 = 0)) && (R19 = 0 || (R16242 = 0 && R16243 = 0)) && (R48 + R15347 + R15344 = 0 || (R42 + R11524 + R11522 = 0 && R43 + R11525 + R11523 + -1*R15351 + -1*R15349 - R53 = 0)) && (R48 + R15347 + R15344 = 0 || (R46 + R15345 + R15342 = 0 && R47 + R15346 + R15343 + -1*R15351 + -1*R15349 - R53 = 0)) && (R58 + R16201 + R16198 = 0 || (R56 + R16199 + R16196 = 0 && R57 + R16200 + R16197 = 0)) && (R58 + R16201 + R16198 = 0 || (R62 + R16204 + R16202 = 0 && R63 + R16205 + R16203 = 0)) && (R16206 = 0 || R1 < 1) && (R16208 = 0 || R1 < 1) && (R16210 = 0 || R1 < 1) && (R16212 = 0 || R1 < 1) && (R16214 = 0 || R1 < 1) && (R16216 = 0 || R1 < 1) && (R16218 = 0 || R1 < 1) && (R16220 = 0 || R1 < 1) && (R16222 = 0 || R1 < 1) && (R16224 = 0 || R1 < 1);
// End of Parikh automata intersection problem
