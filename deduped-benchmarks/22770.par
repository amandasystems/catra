// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R11522, R11523, R11524, R11525, R12, R17, R18, R19, R19158, R19159, R19160, R19161, R19162, R19163, R19164, R19165, R19166, R19167, R19590, R19591, R19592, R19593, R19594, R19595, R19596, R19597, R19598, R19599, R19600, R19601, R19602, R19603, R19604, R19605, R19606, R19607, R19608, R19609, R19610, R19611, R19612, R19613, R19614, R19615, R19616, R19617, R19618, R19619, R19620, R19621, R19622, R19623, R19624, R19625, R19626, R19627, R19628, R19629, R19630, R19631, R19632, R19633, R19634, R19635, R19636, R19637, R19638, R19639, R19640, R19641, R19642, R19643, R19644, R19645, R19646, R19647, R19648, R19649, R19650, R19651, R19652, R19653, R19654, R19655, R19656, R19657, R19658, R19659, R19660, R19661, R19662, R19663, R19664, R19665, R19666, R19667, R19668, R19669, R19670, R19671, R19672, R19673, R19674, R19675, R19676, R19677, R19678, R19679, R19680, R19681, R19682, R19683, R19684, R19685, R19686, R19687, R19688, R19689, R19690, R19691, R19692, R19693, R19694, R19695, R19696, R19697, R19698, R19699, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 72];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [73, 73];
  s0 -> s1 [74, 65535];
  s1 -> s1 [0, 72];
  s1 -> s2 [73, 73];
  s1 -> s1 [74, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R21 += 1 };
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R25 += 1 };
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R19620 += 1, R19621 += 1 };
  s0 -> s1 [0, 65535] { R19621 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R19621 += 1, R19 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 72] { R19623 += 1 };
  s0 -> s0 [0, 65535] { R19622 += 1, R19623 += 1 };
  s0 -> s2 [73, 73] { R19623 += 1 };
  s0 -> s3 [73, 73] { R19623 += 1 };
  s0 -> s1 [78, 65535] { R19623 += 1 };
  s1 -> s1 [0, 72] { R19623 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R19623 += 1 };
  s1 -> s3 [73, 73] { R19623 += 1 };
  s1 -> s1 [78, 65535] { R19623 += 1 };
  s2 -> s2 [0, 73] { R19623 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [78, 65535] { R19623 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 72] { R19625 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R19624 += 1, R19625 += 1 };
  s0 -> s2 [73, 73] { R19625 += 1, R38 += 1 };
  s0 -> s3 [73, 73] { R19625 += 1, R38 += 1 };
  s0 -> s1 [74, 65535] { R19625 += 1, R38 += 1 };
  s1 -> s1 [0, 72] { R19625 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R19625 += 1, R38 += 1 };
  s1 -> s3 [73, 73] { R19625 += 1, R38 += 1 };
  s1 -> s1 [74, 65535] { R19625 += 1, R38 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R19625 += 1, R38 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 72] { R19627 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R19626 += 1, R19627 += 1 };
  s0 -> s2 [73, 73] { R19627 += 1, R40 += 1 };
  s0 -> s3 [73, 73] { R19627 += 1, R40 += 1 };
  s0 -> s1 [74, 65535] { R19627 += 1, R40 += 1 };
  s1 -> s1 [0, 72] { R19627 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R19627 += 1, R40 += 1 };
  s1 -> s3 [73, 73] { R19627 += 1, R40 += 1 };
  s1 -> s1 [74, 65535] { R19627 += 1, R40 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R19627 += 1, R40 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 72] { R19629 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R19628 += 1, R19629 += 1 };
  s0 -> s2 [73, 73] { R19629 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [73, 73] { R19629 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [74, 65535] { R19629 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 72] { R19629 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R19629 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [73, 73] { R19629 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [74, 65535] { R19629 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535] { R19629 += 1, R42 += 1, R43 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 72] { R19631 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R19630 += 1, R19631 += 1 };
  s0 -> s2 [73, 73] { R19631 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [73, 73] { R19631 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [74, 65535] { R19631 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 72] { R19631 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R19631 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [73, 73] { R19631 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [74, 65535] { R19631 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535] { R19631 += 1, R46 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 72] { R19633 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R19632 += 1, R19633 += 1 };
  s0 -> s2 [73, 73] { R19633 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [73, 73] { R19633 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [74, 65535] { R19633 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 72] { R19633 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R19633 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [73, 73] { R19633 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [74, 65535] { R19633 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535] { R19633 += 1, R52 += 1, R53 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 72] { R19635 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R19634 += 1, R19635 += 1 };
  s0 -> s2 [73, 73] { R19635 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [73, 73] { R19635 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [74, 65535] { R19635 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 72] { R19635 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R19635 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [73, 73] { R19635 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [74, 65535] { R19635 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R19635 += 1, R56 += 1, R57 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 72] { R19637 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R19636 += 1, R19637 += 1 };
  s0 -> s2 [73, 73] { R19637 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [73, 73] { R19637 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [74, 65535] { R19637 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 72] { R19637 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R19637 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [73, 73] { R19637 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [74, 65535] { R19637 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535] { R19637 += 1, R62 += 1, R63 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 72] { R19657 += 1 };
  s0 -> s0 [0, 65535] { R19656 += 1, R19657 += 1 };
  s0 -> s2 [73, 73] { R19657 += 1 };
  s0 -> s1 [74, 65535] { R19657 += 1 };
  s1 -> s1 [0, 72] { R19657 += 1 };
  s1 -> s2 [73, 73] { R19657 += 1 };
  s1 -> s1 [74, 65535] { R19657 += 1 };
  s2 -> s2 [0, 65535] { R19657 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R19658 += 1, R19659 += 1 };
  s0 -> s1 [0, 65535] { R19659 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R19659 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 72] { R19661 += 1 };
  s0 -> s2 [0, 65535] { R19661 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R19660 += 1, R19661 += 1 };
  s0 -> s3 [73, 73] { R19661 += 1 };
  s0 -> s1 [74, 65535] { R19661 += 1 };
  s1 -> s1 [0, 72] { R19661 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [73, 73] { R19661 += 1 };
  s1 -> s1 [74, 65535] { R19661 += 1 };
  s2 -> s1 [0, 72] { R19661 += 1 };
  s2 -> s2 [0, 65535] { R19661 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [73, 73] { R19661 += 1 };
  s2 -> s1 [74, 65535] { R19661 += 1 };
  s3 -> s3 [0, 65535] { R19661 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 72] { R19663 += 1, R19601 += 1 };
  s0 -> s2 [0, 65535] { R19663 += 1, R19600 += 1, R19601 += 1 };
  s0 -> s0 [0, 65535] { R19662 += 1, R19663 += 1 };
  s0 -> s1 [74, 65535] { R19663 += 1, R19601 += 1 };
  s1 -> s1 [0, 72] { R19663 += 1, R19601 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R19663 += 1 };
  s1 -> s1 [74, 65535] { R19663 += 1, R19601 += 1 };
  s2 -> s1 [0, 72] { R19663 += 1, R19601 += 1 };
  s2 -> s2 [0, 65535] { R19663 += 1, R19600 += 1, R19601 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [74, 65535] { R19663 += 1, R19601 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s0 [0, 65535] { R19664 += 1, R19665 += 1 };
  s0 -> s1 [0, 65535] { R19665 += 1, R19602 += 1, R19603 += 1 };
  s0 -> s2 [0, 65535] { R19665 += 1, R19603 += 1, R17 += 1 };
  s1 -> s1 [0, 65535] { R19665 += 1, R19602 += 1, R19603 += 1 };
  s1 -> s2 [0, 65535] { R19665 += 1, R19603 += 1, R17 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R19665 += 1 };
  s2 -> s2 [0, 65535] { R19665 += 1, R19603 += 1, R17 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R19665 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 73] { R19667 += 1, R19605 += 1 };
  s0 -> s2 [0, 65535] { R19667 += 1, R19604 += 1, R19605 += 1 };
  s0 -> s0 [0, 65535] { R19666 += 1, R19667 += 1 };
  s0 -> s1 [77, 65535] { R19667 += 1, R19605 += 1 };
  s1 -> s1 [0, 73] { R19667 += 1, R19605 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R19667 += 1 };
  s1 -> s1 [77, 65535] { R19667 += 1, R19605 += 1 };
  s2 -> s1 [0, 73] { R19667 += 1, R19605 += 1 };
  s2 -> s2 [0, 65535] { R19667 += 1, R19604 += 1, R19605 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [77, 65535] { R19667 += 1, R19605 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R19669 += 1, R19607 += 1, R67 += 1 };
  s0 -> s2 [0, 65535] { R19669 += 1, R19606 += 1, R19607 += 1 };
  s0 -> s0 [0, 65535] { R19668 += 1, R19669 += 1 };
  s1 -> s1 [0, 65535] { R19669 += 1, R19607 += 1, R67 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R19669 += 1 };
  s2 -> s1 [0, 65535] { R19669 += 1, R19607 += 1, R67 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R19669 += 1, R19606 += 1, R19607 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R19669 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 76] { R19671 += 1, R19609 += 1 };
  s0 -> s0 [0, 65535] { R19670 += 1, R19671 += 1 };
  s0 -> s2 [0, 65535] { R19671 += 1, R19609 += 1, R69 += 1 };
  s0 -> s3 [0, 65535] { R19671 += 1, R19608 += 1, R19609 += 1 };
  s0 -> s1 [78, 65535] { R19671 += 1, R19609 += 1 };
  s1 -> s1 [0, 76] { R19671 += 1, R19609 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R19671 += 1 };
  s1 -> s1 [78, 65535] { R19671 += 1, R19609 += 1 };
  s2 -> s1 [0, 76] { R19671 += 1, R19609 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R19671 += 1, R19609 += 1, R69 += 1 };
  s2 -> s5 [0, 65535] { R19671 += 1 };
  s2 -> s1 [78, 65535] { R19671 += 1, R19609 += 1 };
  s3 -> s1 [0, 76] { R19671 += 1, R19609 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R19671 += 1, R19609 += 1, R69 += 1 };
  s3 -> s3 [0, 65535] { R19671 += 1, R19608 += 1, R19609 += 1 };
  s3 -> s1 [78, 65535] { R19671 += 1, R19609 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R19671 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 76] { R19673 += 1, R19611 += 1, R11525 += 1 };
  s0 -> s1 [0, 65535] { R19673 += 1, R19611 += 1 };
  s0 -> s2 [0, 65535] { R19673 += 1, R19610 += 1, R19611 += 1 };
  s0 -> s0 [0, 65535] { R19672 += 1, R19673 += 1 };
  s0 -> s1 [78, 65535] { R19673 += 1, R19611 += 1, R11525 += 1 };
  s1 -> s1 [0, 76] { R19673 += 1, R19611 += 1, R11525 += 1 };
  s1 -> s1 [0, 65535] { R19673 += 1, R19611 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R19673 += 1 };
  s1 -> s1 [78, 65535] { R19673 += 1, R19611 += 1, R11525 += 1 };
  s2 -> s1 [0, 76] { R19673 += 1, R19611 += 1, R11525 += 1 };
  s2 -> s1 [0, 65535] { R19673 += 1, R19611 += 1 };
  s2 -> s2 [0, 65535] { R19673 += 1, R19610 += 1, R19611 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [78, 65535] { R19673 += 1, R19611 += 1, R11525 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R19673 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s0 [0, 65535] { R19674 += 1, R19675 += 1 };
  s0 -> s1 [0, 65535] { R19675 += 1, R19613 += 1 };
  s0 -> s2 [0, 65535] { R19675 += 1, R19612 += 1, R19613 += 1 };
  s1 -> s4 [0, 65535] { R19675 += 1 };
  s1 -> s1 [0, 65535] { R19675 += 1, R19613 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R19675 += 1, R19613 += 1 };
  s2 -> s2 [0, 65535] { R19675 += 1, R19612 += 1, R19613 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R19675 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 77] { R19677 += 1, R19615 += 1, R19167 += 1 };
  s0 -> s0 [0, 65535] { R19676 += 1, R19677 += 1 };
  s0 -> s2 [0, 65535] { R19677 += 1, R19614 += 1, R19615 += 1 };
  s0 -> s1 [0, 65535] { R19677 += 1, R19615 += 1 };
  s0 -> s1 [90, 65535] { R19677 += 1, R19615 += 1, R19167 += 1 };
  s1 -> s1 [0, 77] { R19677 += 1, R19615 += 1, R19167 += 1 };
  s1 -> s4 [0, 65535] { R19677 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R19677 += 1, R19615 += 1 };
  s1 -> s1 [90, 65535] { R19677 += 1, R19615 += 1, R19167 += 1 };
  s2 -> s1 [0, 77] { R19677 += 1, R19615 += 1, R19167 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R19677 += 1, R19614 += 1, R19615 += 1 };
  s2 -> s1 [0, 65535] { R19677 += 1, R19615 += 1 };
  s2 -> s1 [90, 65535] { R19677 += 1, R19615 += 1, R19167 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R19677 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s0 [0, 65535] { R19678 += 1, R19679 += 1 };
  s0 -> s1 [0, 65535] { R19679 += 1, R19616 += 1, R19617 += 1 };
  s0 -> s2 [0, 65535] { R19679 += 1, R19617 += 1, R19594 += 1, R19595 += 1 };
  s0 -> s3 [0, 65535] { R19679 += 1, R19617 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R19679 += 1, R19616 += 1, R19617 += 1 };
  s1 -> s2 [0, 65535] { R19679 += 1, R19617 += 1, R19594 += 1, R19595 += 1 };
  s1 -> s3 [0, 65535] { R19679 += 1, R19617 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R19679 += 1, R19617 += 1, R19594 += 1, R19595 += 1 };
  s2 -> s3 [0, 65535] { R19679 += 1, R19617 += 1 };
  s2 -> s5 [0, 65535] { R19679 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R19679 += 1, R19617 += 1 };
  s3 -> s5 [0, 65535] { R19679 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R19679 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 76] { R19681 += 1, R19619 += 1, R19599 += 1 };
  s0 -> s2 [0, 65535] { R19681 += 1, R19618 += 1, R19619 += 1 };
  s0 -> s3 [0, 65535] { R19681 += 1, R19619 += 1, R19598 += 1, R19599 += 1 };
  s0 -> s0 [0, 65535] { R19680 += 1, R19681 += 1 };
  s0 -> s4 [77, 77] { R19681 += 1, R19619 += 1, R19599 += 1 };
  s0 -> s5 [77, 77] { R19681 += 1, R19619 += 1, R19599 += 1 };
  s0 -> s1 [91, 65535] { R19681 += 1, R19619 += 1, R19599 += 1 };
  s1 -> s1 [0, 76] { R19681 += 1, R19619 += 1, R19599 += 1 };
  s1 -> s1 [0, 65535] { R19681 += 1, R19619 += 1 };
  s1 -> s6 [0, 65535] { R19681 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s4 [77, 77] { R19681 += 1, R19619 += 1, R19599 += 1 };
  s1 -> s5 [77, 77] { R19681 += 1, R19619 += 1, R19599 += 1 };
  s1 -> s1 [91, 65535] { R19681 += 1, R19619 += 1, R19599 += 1 };
  s2 -> s1 [0, 76] { R19681 += 1, R19619 += 1, R19599 += 1 };
  s2 -> s2 [0, 65535] { R19681 += 1, R19618 += 1, R19619 += 1 };
  s2 -> s3 [0, 65535] { R19681 += 1, R19619 += 1, R19598 += 1, R19599 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s4 [77, 77] { R19681 += 1, R19619 += 1, R19599 += 1 };
  s2 -> s5 [77, 77] { R19681 += 1, R19619 += 1, R19599 += 1 };
  s2 -> s1 [91, 65535] { R19681 += 1, R19619 += 1, R19599 += 1 };
  s3 -> s1 [0, 76] { R19681 += 1, R19619 += 1, R19599 += 1 };
  s3 -> s6 [0, 65535] { R19681 += 1 };
  s3 -> s3 [0, 65535] { R19681 += 1, R19619 += 1, R19598 += 1, R19599 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s4 [77, 77] { R19681 += 1, R19619 += 1, R19599 += 1 };
  s3 -> s5 [77, 77] { R19681 += 1, R19619 += 1, R19599 += 1 };
  s3 -> s1 [91, 65535] { R19681 += 1, R19619 += 1, R19599 += 1 };
  s4 -> s4 [0, 65535] { R19681 += 1, R19619 += 1 };
  s4 -> s6 [0, 65535] { R19681 += 1 };
  s4 -> s7 [0, 65535];
  s5 -> s5 [0, 77] { R19681 += 1, R19619 += 1, R19599 += 1 };
  s5 -> s6 [0, 65535] { R19681 += 1 };
  s5 -> s5 [0, 65535] { R19681 += 1, R19619 += 1 };
  s5 -> s7 [0, 65535];
  s5 -> s5 [91, 65535] { R19681 += 1, R19619 += 1, R19599 += 1 };
  s6 -> s6 [0, 65535] { R19681 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R19683 += 1, R19638 += 1, R19639 += 1 };
  s0 -> s0 [0, 65535] { R19682 += 1, R19683 += 1 };
  s0 -> s2 [0, 65535] { R19683 += 1, R19639 += 1, R18 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R19683 += 1, R19638 += 1, R19639 += 1 };
  s1 -> s2 [0, 65535] { R19683 += 1, R19639 += 1, R18 += 1 };
  s2 -> s3 [0, 65535] { R19683 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R19683 += 1, R19639 += 1, R18 += 1 };
  s3 -> s3 [0, 65535] { R19683 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 72] { R19685 += 1, R19641 += 1 };
  s0 -> s0 [0, 65535] { R19684 += 1, R19685 += 1 };
  s0 -> s2 [0, 65535] { R19685 += 1, R19640 += 1, R19641 += 1 };
  s0 -> s3 [73, 73] { R19685 += 1, R19641 += 1 };
  s0 -> s4 [73, 73] { R19685 += 1, R19641 += 1 };
  s0 -> s5 [77, 77] { R19685 += 1, R19641 += 1 };
  s0 -> s1 [78, 65535] { R19685 += 1, R19641 += 1 };
  s1 -> s1 [0, 72] { R19685 += 1, R19641 += 1 };
  s1 -> s3 [73, 73] { R19685 += 1, R19641 += 1 };
  s1 -> s4 [73, 73] { R19685 += 1, R19641 += 1 };
  s1 -> s5 [77, 77] { R19685 += 1, R19641 += 1 };
  s1 -> s1 [78, 65535] { R19685 += 1, R19641 += 1 };
  s2 -> s1 [0, 72] { R19685 += 1, R19641 += 1 };
  s2 -> s2 [0, 65535] { R19685 += 1, R19640 += 1, R19641 += 1 };
  s2 -> s3 [73, 73] { R19685 += 1, R19641 += 1 };
  s2 -> s4 [73, 73] { R19685 += 1, R19641 += 1 };
  s2 -> s5 [77, 77] { R19685 += 1, R19641 += 1 };
  s2 -> s1 [78, 65535] { R19685 += 1, R19641 += 1 };
  s3 -> s3 [0, 73] { R19685 += 1, R19641 += 1 };
  s3 -> s8 [77, 77] { R19685 += 1, R19641 += 1 };
  s3 -> s3 [78, 65535] { R19685 += 1, R19641 += 1 };
  s5 -> s5 [0, 72] { R19685 += 1, R19641 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R19685 += 1 };
  s5 -> s7 [73, 73] { R19685 += 1, R19641 += 1 };
  s5 -> s8 [73, 73] { R19685 += 1, R19641 += 1 };
  s5 -> s5 [77, 65535] { R19685 += 1, R19641 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R19685 += 1 };
  s8 -> s8 [0, 73] { R19685 += 1, R19641 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R19685 += 1 };
  s8 -> s8 [77, 65535] { R19685 += 1, R19641 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 72] { R19687 += 1, R19643 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R19686 += 1, R19687 += 1 };
  s0 -> s2 [0, 65535] { R19687 += 1, R19642 += 1, R19643 += 1 };
  s0 -> s3 [73, 73] { R19687 += 1, R19643 += 1, R66 += 1 };
  s0 -> s4 [73, 73] { R19687 += 1, R19643 += 1, R66 += 1 };
  s0 -> s1 [74, 65535] { R19687 += 1, R19643 += 1, R66 += 1 };
  s1 -> s1 [0, 72] { R19687 += 1, R19643 += 1, R66 += 1 };
  s1 -> s1 [0, 65535] { R19687 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [73, 73] { R19687 += 1, R19643 += 1, R66 += 1 };
  s1 -> s4 [73, 73] { R19687 += 1, R19643 += 1, R66 += 1 };
  s1 -> s1 [74, 65535] { R19687 += 1, R19643 += 1, R66 += 1 };
  s2 -> s1 [0, 72] { R19687 += 1, R19643 += 1, R66 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R19687 += 1, R19642 += 1, R19643 += 1 };
  s2 -> s3 [73, 73] { R19687 += 1, R19643 += 1, R66 += 1 };
  s2 -> s4 [73, 73] { R19687 += 1, R19643 += 1, R66 += 1 };
  s2 -> s1 [74, 65535] { R19687 += 1, R19643 += 1, R66 += 1 };
  s3 -> s3 [0, 65535] { R19687 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R19687 += 1, R19643 += 1, R66 += 1 };
  s4 -> s5 [0, 65535] { R19687 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R19687 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 72] { R19689 += 1, R19645 += 1, R68 += 1 };
  s0 -> s2 [0, 65535] { R19689 += 1, R19644 += 1, R19645 += 1 };
  s0 -> s0 [0, 65535] { R19688 += 1, R19689 += 1 };
  s0 -> s3 [73, 73] { R19689 += 1, R19645 += 1, R68 += 1 };
  s0 -> s4 [73, 73] { R19689 += 1, R19645 += 1, R68 += 1 };
  s0 -> s1 [74, 65535] { R19689 += 1, R19645 += 1, R68 += 1 };
  s1 -> s1 [0, 72] { R19689 += 1, R19645 += 1, R68 += 1 };
  s1 -> s1 [0, 65535] { R19689 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R19689 += 1, R19645 += 1, R68 += 1 };
  s1 -> s4 [73, 73] { R19689 += 1, R19645 += 1, R68 += 1 };
  s1 -> s1 [74, 65535] { R19689 += 1, R19645 += 1, R68 += 1 };
  s2 -> s1 [0, 72] { R19689 += 1, R19645 += 1, R68 += 1 };
  s2 -> s2 [0, 65535] { R19689 += 1, R19644 += 1, R19645 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R19689 += 1, R19645 += 1, R68 += 1 };
  s2 -> s4 [73, 73] { R19689 += 1, R19645 += 1, R68 += 1 };
  s2 -> s1 [74, 65535] { R19689 += 1, R19645 += 1, R68 += 1 };
  s3 -> s3 [0, 65535] { R19689 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R19689 += 1, R19645 += 1, R68 += 1 };
  s4 -> s6 [0, 65535] { R19689 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R19689 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 72] { R19691 += 1, R19647 += 1, R11523 += 1 };
  s0 -> s2 [0, 72] { R19691 += 1, R19647 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s0 [0, 65535] { R19690 += 1, R19691 += 1 };
  s0 -> s3 [0, 65535] { R19691 += 1, R19646 += 1, R19647 += 1 };
  s0 -> s4 [73, 73] { R19691 += 1, R19647 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s5 [73, 73] { R19691 += 1, R19647 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s6 [73, 73] { R19691 += 1, R19647 += 1, R11523 += 1 };
  s0 -> s7 [73, 73] { R19691 += 1, R19647 += 1, R11523 += 1 };
  s0 -> s1 [74, 76] { R19691 += 1, R19647 += 1, R11523 += 1 };
  s0 -> s2 [74, 65535] { R19691 += 1, R19647 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s1 [78, 65535] { R19691 += 1, R19647 += 1, R11523 += 1 };
  s1 -> s1 [0, 72] { R19691 += 1, R19647 += 1, R11523 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s1 [0, 65535] { R19691 += 1 };
  s1 -> s6 [73, 73] { R19691 += 1, R19647 += 1 };
  s1 -> s7 [73, 73] { R19691 += 1, R19647 += 1 };
  s1 -> s1 [74, 76] { R19691 += 1, R19647 += 1, R11523 += 1 };
  s1 -> s1 [74, 65535] { R19691 += 1, R19647 += 1 };
  s1 -> s1 [78, 65535] { R19691 += 1, R19647 += 1, R11523 += 1 };
  s2 -> s1 [0, 72] { R19691 += 1, R19647 += 1, R11523 += 1 };
  s2 -> s2 [0, 72] { R19691 += 1, R19647 += 1, R11522 += 1, R11523 += 1 };
  s2 -> s4 [73, 73] { R19691 += 1, R19647 += 1, R11522 += 1, R11523 += 1 };
  s2 -> s5 [73, 73] { R19691 += 1, R19647 += 1, R11522 += 1, R11523 += 1 };
  s2 -> s6 [73, 73] { R19691 += 1, R19647 += 1, R11523 += 1 };
  s2 -> s7 [73, 73] { R19691 += 1, R19647 += 1, R11523 += 1 };
  s2 -> s1 [74, 76] { R19691 += 1, R19647 += 1, R11523 += 1 };
  s2 -> s2 [74, 65535] { R19691 += 1, R19647 += 1, R11522 += 1, R11523 += 1 };
  s2 -> s1 [78, 65535] { R19691 += 1, R19647 += 1, R11523 += 1 };
  s3 -> s1 [0, 72] { R19691 += 1, R19647 += 1, R11523 += 1 };
  s3 -> s2 [0, 72] { R19691 += 1, R19647 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s3 [0, 65535] { R19691 += 1, R19646 += 1, R19647 += 1 };
  s3 -> s4 [73, 73] { R19691 += 1, R19647 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s5 [73, 73] { R19691 += 1, R19647 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s6 [73, 73] { R19691 += 1, R19647 += 1, R11523 += 1 };
  s3 -> s7 [73, 73] { R19691 += 1, R19647 += 1, R11523 += 1 };
  s3 -> s1 [74, 76] { R19691 += 1, R19647 += 1, R11523 += 1 };
  s3 -> s2 [74, 65535] { R19691 += 1, R19647 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s1 [78, 65535] { R19691 += 1, R19647 += 1, R11523 += 1 };
  s5 -> s6 [0, 76] { R19691 += 1, R19647 += 1, R11523 += 1 };
  s5 -> s5 [0, 65535] { R19691 += 1, R19647 += 1, R11522 += 1, R11523 += 1 };
  s5 -> s6 [78, 65535] { R19691 += 1, R19647 += 1, R11523 += 1 };
  s6 -> s6 [0, 76] { R19691 += 1, R19647 += 1, R11523 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R19691 += 1, R19647 += 1 };
  s6 -> s9 [0, 65535] { R19691 += 1 };
  s6 -> s6 [78, 65535] { R19691 += 1, R19647 += 1, R11523 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R19691 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R19691 += 1 };
  accepting s8, s9, s6, s1, s7;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 72] { R19693 += 1, R19649 += 1, R19159 += 1, R19160 += 1 };
  s0 -> s2 [0, 72] { R19693 += 1, R19649 += 1, R19158 += 1, R19159 += 1 };
  s0 -> s3 [0, 65535] { R19693 += 1, R19648 += 1, R19649 += 1 };
  s0 -> s0 [0, 65535] { R19692 += 1, R19693 += 1 };
  s0 -> s4 [73, 73] { R19693 += 1, R19649 += 1, R19159 += 1, R19160 += 1 };
  s0 -> s5 [73, 73] { R19693 += 1, R19649 += 1, R19159 += 1, R19160 += 1 };
  s0 -> s6 [73, 73] { R19693 += 1, R19649 += 1, R19158 += 1, R19159 += 1 };
  s0 -> s7 [73, 73] { R19693 += 1, R19649 += 1, R19158 += 1, R19159 += 1 };
  s0 -> s1 [74, 65535] { R19693 += 1, R19649 += 1, R19159 += 1, R19160 += 1 };
  s0 -> s2 [74, 65535] { R19693 += 1, R19649 += 1, R19158 += 1, R19159 += 1 };
  s1 -> s1 [0, 72] { R19693 += 1, R19649 += 1, R19159 += 1, R19160 += 1 };
  s1 -> s11 [0, 72] { R19693 += 1, R19649 += 1 };
  s1 -> s4 [73, 73] { R19693 += 1, R19649 += 1, R19159 += 1, R19160 += 1 };
  s1 -> s5 [73, 73] { R19693 += 1, R19649 += 1, R19159 += 1, R19160 += 1 };
  s1 -> s8 [73, 73] { R19693 += 1, R19649 += 1 };
  s1 -> s12 [73, 73] { R19693 += 1, R19649 += 1 };
  s1 -> s1 [74, 65535] { R19693 += 1, R19649 += 1, R19159 += 1, R19160 += 1 };
  s1 -> s11 [74, 65535] { R19693 += 1, R19649 += 1 };
  s2 -> s1 [0, 72] { R19693 += 1, R19649 += 1, R19159 += 1, R19160 += 1 };
  s2 -> s2 [0, 72] { R19693 += 1, R19649 += 1, R19158 += 1, R19159 += 1 };
  s2 -> s4 [73, 73] { R19693 += 1, R19649 += 1, R19159 += 1, R19160 += 1 };
  s2 -> s5 [73, 73] { R19693 += 1, R19649 += 1, R19159 += 1, R19160 += 1 };
  s2 -> s6 [73, 73] { R19693 += 1, R19649 += 1, R19158 += 1, R19159 += 1 };
  s2 -> s7 [73, 73] { R19693 += 1, R19649 += 1, R19158 += 1, R19159 += 1 };
  s2 -> s1 [74, 65535] { R19693 += 1, R19649 += 1, R19159 += 1, R19160 += 1 };
  s2 -> s2 [74, 65535] { R19693 += 1, R19649 += 1, R19158 += 1, R19159 += 1 };
  s3 -> s1 [0, 72] { R19693 += 1, R19649 += 1, R19159 += 1, R19160 += 1 };
  s3 -> s2 [0, 72] { R19693 += 1, R19649 += 1, R19158 += 1, R19159 += 1 };
  s3 -> s3 [0, 65535] { R19693 += 1, R19648 += 1, R19649 += 1 };
  s3 -> s4 [73, 73] { R19693 += 1, R19649 += 1, R19159 += 1, R19160 += 1 };
  s3 -> s5 [73, 73] { R19693 += 1, R19649 += 1, R19159 += 1, R19160 += 1 };
  s3 -> s6 [73, 73] { R19693 += 1, R19649 += 1, R19158 += 1, R19159 += 1 };
  s3 -> s7 [73, 73] { R19693 += 1, R19649 += 1, R19158 += 1, R19159 += 1 };
  s3 -> s1 [74, 65535] { R19693 += 1, R19649 += 1, R19159 += 1, R19160 += 1 };
  s3 -> s2 [74, 65535] { R19693 += 1, R19649 += 1, R19158 += 1, R19159 += 1 };
  s5 -> s5 [0, 65535] { R19693 += 1, R19649 += 1, R19159 += 1, R19160 += 1 };
  s5 -> s8 [0, 65535] { R19693 += 1, R19649 += 1 };
  s6 -> s5 [0, 65535] { R19693 += 1, R19649 += 1, R19159 += 1, R19160 += 1 };
  s6 -> s6 [0, 65535] { R19693 += 1, R19649 += 1, R19158 += 1, R19159 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R19693 += 1, R19649 += 1 };
  s8 -> s10 [0, 65535] { R19693 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R19693 += 1 };
  s11 -> s11 [0, 72] { R19693 += 1, R19649 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R19693 += 1 };
  s11 -> s8 [73, 73] { R19693 += 1, R19649 += 1 };
  s11 -> s12 [73, 73] { R19693 += 1, R19649 += 1 };
  s11 -> s11 [74, 65535] { R19693 += 1, R19649 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R19693 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 72] { R19695 += 1, R19651 += 1, R19165 += 1 };
  s0 -> s2 [0, 72] { R19695 += 1, R19651 += 1, R19164 += 1, R19165 += 1 };
  s0 -> s0 [0, 65535] { R19694 += 1, R19695 += 1 };
  s0 -> s3 [0, 65535] { R19695 += 1, R19650 += 1, R19651 += 1 };
  s0 -> s4 [73, 73] { R19695 += 1, R19651 += 1, R19165 += 1 };
  s0 -> s5 [73, 73] { R19695 += 1, R19651 += 1, R19165 += 1 };
  s0 -> s6 [73, 73] { R19695 += 1, R19651 += 1, R19164 += 1, R19165 += 1 };
  s0 -> s7 [73, 73] { R19695 += 1, R19651 += 1, R19164 += 1, R19165 += 1 };
  s0 -> s1 [74, 77] { R19695 += 1, R19651 += 1, R19165 += 1 };
  s0 -> s2 [74, 65535] { R19695 += 1, R19651 += 1, R19164 += 1, R19165 += 1 };
  s0 -> s8 [90, 90] { R19695 += 1, R19651 += 1, R19165 += 1 };
  s0 -> s1 [91, 65535] { R19695 += 1, R19651 += 1, R19165 += 1 };
  s1 -> s1 [0, 72] { R19695 += 1, R19651 += 1, R19165 += 1 };
  s1 -> s4 [73, 73] { R19695 += 1, R19651 += 1, R19165 += 1 };
  s1 -> s5 [73, 73] { R19695 += 1, R19651 += 1, R19165 += 1 };
  s1 -> s1 [74, 77] { R19695 += 1, R19651 += 1, R19165 += 1 };
  s1 -> s8 [90, 90] { R19695 += 1, R19651 += 1, R19165 += 1 };
  s1 -> s1 [91, 65535] { R19695 += 1, R19651 += 1, R19165 += 1 };
  s2 -> s1 [0, 72] { R19695 += 1, R19651 += 1, R19165 += 1 };
  s2 -> s2 [0, 72] { R19695 += 1, R19651 += 1, R19164 += 1, R19165 += 1 };
  s2 -> s4 [73, 73] { R19695 += 1, R19651 += 1, R19165 += 1 };
  s2 -> s5 [73, 73] { R19695 += 1, R19651 += 1, R19165 += 1 };
  s2 -> s6 [73, 73] { R19695 += 1, R19651 += 1, R19164 += 1, R19165 += 1 };
  s2 -> s7 [73, 73] { R19695 += 1, R19651 += 1, R19164 += 1, R19165 += 1 };
  s2 -> s1 [74, 77] { R19695 += 1, R19651 += 1, R19165 += 1 };
  s2 -> s2 [74, 65535] { R19695 += 1, R19651 += 1, R19164 += 1, R19165 += 1 };
  s2 -> s8 [90, 90] { R19695 += 1, R19651 += 1, R19165 += 1 };
  s2 -> s1 [91, 65535] { R19695 += 1, R19651 += 1, R19165 += 1 };
  s3 -> s1 [0, 72] { R19695 += 1, R19651 += 1, R19165 += 1 };
  s3 -> s2 [0, 72] { R19695 += 1, R19651 += 1, R19164 += 1, R19165 += 1 };
  s3 -> s3 [0, 65535] { R19695 += 1, R19650 += 1, R19651 += 1 };
  s3 -> s4 [73, 73] { R19695 += 1, R19651 += 1, R19165 += 1 };
  s3 -> s5 [73, 73] { R19695 += 1, R19651 += 1, R19165 += 1 };
  s3 -> s6 [73, 73] { R19695 += 1, R19651 += 1, R19164 += 1, R19165 += 1 };
  s3 -> s7 [73, 73] { R19695 += 1, R19651 += 1, R19164 += 1, R19165 += 1 };
  s3 -> s1 [74, 77] { R19695 += 1, R19651 += 1, R19165 += 1 };
  s3 -> s2 [74, 65535] { R19695 += 1, R19651 += 1, R19164 += 1, R19165 += 1 };
  s3 -> s8 [90, 90] { R19695 += 1, R19651 += 1, R19165 += 1 };
  s3 -> s1 [91, 65535] { R19695 += 1, R19651 += 1, R19165 += 1 };
  s4 -> s4 [0, 77] { R19695 += 1, R19651 += 1, R19165 += 1 };
  s4 -> s10 [90, 90] { R19695 += 1, R19651 += 1, R19165 += 1 };
  s4 -> s4 [91, 65535] { R19695 += 1, R19651 += 1, R19165 += 1 };
  s7 -> s4 [0, 77] { R19695 += 1, R19651 += 1, R19165 += 1 };
  s7 -> s7 [0, 65535] { R19695 += 1, R19651 += 1, R19164 += 1, R19165 += 1 };
  s7 -> s10 [90, 90] { R19695 += 1, R19651 += 1, R19165 += 1 };
  s7 -> s4 [91, 65535] { R19695 += 1, R19651 += 1, R19165 += 1 };
  s8 -> s8 [0, 72] { R19695 += 1, R19651 += 1, R19165 += 1 };
  s8 -> s8 [0, 65535] { R19695 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [73, 73] { R19695 += 1, R19651 += 1 };
  s8 -> s11 [73, 73] { R19695 += 1, R19651 += 1 };
  s8 -> s8 [74, 77] { R19695 += 1, R19651 += 1, R19165 += 1 };
  s8 -> s8 [74, 65535] { R19695 += 1, R19651 += 1 };
  s8 -> s8 [90, 65535] { R19695 += 1, R19651 += 1, R19165 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 77] { R19695 += 1, R19651 += 1, R19165 += 1 };
  s10 -> s12 [0, 65535] { R19695 += 1 };
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R19695 += 1, R19651 += 1 };
  s10 -> s10 [90, 65535] { R19695 += 1, R19651 += 1, R19165 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R19695 += 1 };
  s12 -> s12 [0, 65535] { R19695 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 72] { R19697 += 1, R19653 += 1, R19591 += 1, R19592 += 1 };
  s0 -> s2 [0, 72] { R19697 += 1, R19653 += 1, R19590 += 1, R19591 += 1 };
  s0 -> s3 [0, 65535] { R19697 += 1, R19652 += 1, R19653 += 1 };
  s0 -> s0 [0, 65535] { R19696 += 1, R19697 += 1 };
  s0 -> s4 [73, 73] { R19697 += 1, R19653 += 1, R19590 += 1, R19591 += 1 };
  s0 -> s5 [73, 73] { R19697 += 1, R19653 += 1, R19591 += 1, R19592 += 1 };
  s0 -> s6 [73, 73] { R19697 += 1, R19653 += 1, R19590 += 1, R19591 += 1 };
  s0 -> s7 [73, 73] { R19697 += 1, R19653 += 1, R19591 += 1, R19592 += 1 };
  s0 -> s1 [74, 65535] { R19697 += 1, R19653 += 1, R19591 += 1, R19592 += 1 };
  s0 -> s2 [74, 65535] { R19697 += 1, R19653 += 1, R19590 += 1, R19591 += 1 };
  s1 -> s1 [0, 72] { R19697 += 1, R19653 += 1, R19591 += 1, R19592 += 1 };
  s1 -> s1 [0, 65535] { R19697 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s5 [73, 73] { R19697 += 1, R19653 += 1, R19591 += 1, R19592 += 1 };
  s1 -> s7 [73, 73] { R19697 += 1, R19653 += 1, R19591 += 1, R19592 += 1 };
  s1 -> s1 [74, 65535] { R19697 += 1, R19653 += 1, R19591 += 1, R19592 += 1 };
  s2 -> s1 [0, 72] { R19697 += 1, R19653 += 1, R19591 += 1, R19592 += 1 };
  s2 -> s2 [0, 72] { R19697 += 1, R19653 += 1, R19590 += 1, R19591 += 1 };
  s2 -> s4 [73, 73] { R19697 += 1, R19653 += 1, R19590 += 1, R19591 += 1 };
  s2 -> s5 [73, 73] { R19697 += 1, R19653 += 1, R19591 += 1, R19592 += 1 };
  s2 -> s6 [73, 73] { R19697 += 1, R19653 += 1, R19590 += 1, R19591 += 1 };
  s2 -> s7 [73, 73] { R19697 += 1, R19653 += 1, R19591 += 1, R19592 += 1 };
  s2 -> s1 [74, 65535] { R19697 += 1, R19653 += 1, R19591 += 1, R19592 += 1 };
  s2 -> s2 [74, 65535] { R19697 += 1, R19653 += 1, R19590 += 1, R19591 += 1 };
  s3 -> s1 [0, 72] { R19697 += 1, R19653 += 1, R19591 += 1, R19592 += 1 };
  s3 -> s2 [0, 72] { R19697 += 1, R19653 += 1, R19590 += 1, R19591 += 1 };
  s3 -> s3 [0, 65535] { R19697 += 1, R19652 += 1, R19653 += 1 };
  s3 -> s4 [73, 73] { R19697 += 1, R19653 += 1, R19590 += 1, R19591 += 1 };
  s3 -> s5 [73, 73] { R19697 += 1, R19653 += 1, R19591 += 1, R19592 += 1 };
  s3 -> s6 [73, 73] { R19697 += 1, R19653 += 1, R19590 += 1, R19591 += 1 };
  s3 -> s7 [73, 73] { R19697 += 1, R19653 += 1, R19591 += 1, R19592 += 1 };
  s3 -> s1 [74, 65535] { R19697 += 1, R19653 += 1, R19591 += 1, R19592 += 1 };
  s3 -> s2 [74, 65535] { R19697 += 1, R19653 += 1, R19590 += 1, R19591 += 1 };
  s4 -> s4 [0, 65535] { R19697 += 1, R19653 += 1, R19590 += 1, R19591 += 1 };
  s4 -> s7 [0, 65535] { R19697 += 1, R19653 += 1, R19591 += 1, R19592 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s5 [0, 65535] { R19697 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s9 [0, 65535] { R19697 += 1 };
  s7 -> s7 [0, 65535] { R19697 += 1, R19653 += 1, R19591 += 1, R19592 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R19697 += 1 };
  accepting s8, s5, s9, s1, s7;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 72] { R19699 += 1, R19655 += 1, R19596 += 1, R19597 += 1 };
  s0 -> s2 [0, 65535] { R19699 += 1, R19654 += 1, R19655 += 1 };
  s0 -> s0 [0, 65535] { R19698 += 1, R19699 += 1 };
  s0 -> s3 [73, 73] { R19699 += 1, R19655 += 1, R19596 += 1, R19597 += 1 };
  s0 -> s4 [73, 73] { R19699 += 1, R19655 += 1, R19596 += 1, R19597 += 1 };
  s0 -> s1 [74, 65535] { R19699 += 1, R19655 += 1, R19596 += 1, R19597 += 1 };
  s1 -> s1 [0, 72] { R19699 += 1, R19655 += 1, R19596 += 1, R19597 += 1 };
  s1 -> s1 [0, 65535] { R19699 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [73, 73] { R19699 += 1, R19655 += 1, R19596 += 1, R19597 += 1 };
  s1 -> s4 [73, 73] { R19699 += 1, R19655 += 1, R19596 += 1, R19597 += 1 };
  s1 -> s1 [74, 65535] { R19699 += 1, R19655 += 1, R19596 += 1, R19597 += 1 };
  s2 -> s1 [0, 72] { R19699 += 1, R19655 += 1, R19596 += 1, R19597 += 1 };
  s2 -> s2 [0, 65535] { R19699 += 1, R19654 += 1, R19655 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [73, 73] { R19699 += 1, R19655 += 1, R19596 += 1, R19597 += 1 };
  s2 -> s4 [73, 73] { R19699 += 1, R19655 += 1, R19596 += 1, R19597 += 1 };
  s2 -> s1 [74, 65535] { R19699 += 1, R19655 += 1, R19596 += 1, R19597 += 1 };
  s3 -> s3 [0, 65535] { R19699 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R19699 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R19699 += 1, R19655 += 1, R19596 += 1, R19597 += 1 };
  s5 -> s5 [0, 65535] { R19699 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
synchronised {  // Automata constraining P54
automaton P54_0 {
  init s0;
  s0 -> s1 [109, 109];
  accepting s1;
};
};
constraint R2 = R19699 && R20 - R19699 = -1 && R21 = R19699 && R22 - R19699 = -1 && R23 = R19699 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R19167 + -1*R19165 - R53 = 0 && R52 + R19166 + R19164 = 0 && R19640 = 0 && R19641 = 0 && R19646 = 0 && R19647 = 0 && R19648 = 0 && R19649 = 0 && R19650 = 0 && R19651 = 0 && R19652 = 0 && R19653 = 0 && R19656 = 0 && R19657 = R19699 && R19658 = 0 && R19659 = R19699 && R19660 = 0 && R19661 = R19699 && R19662 = 0 && R19663 = R19699 && R19664 = 0 && R19665 = R19699 && R19666 = 0 && R19667 = R19699 && R19668 = 0 && R19669 = R19699 && R19670 = 0 && R19671 = R19699 && R19672 = 0 && R19673 = R19699 && R19674 = 0 && R19675 = R19699 && R19676 = 0 && R19677 = R19699 && R19678 = 0 && R19679 = R19699 && R19680 = 0 && R19681 = R19699 && R19682 = 0 && R19683 = R19699 && R19684 = 0 && R19685 = R19699 && R19686 = 0 && R19687 = R19699 && R19688 = 0 && R19689 = R19699 && R19690 = 0 && R19691 = R19699 && R19692 = 0 && R19693 = R19699 && R19694 = 0 && R19695 = R19699 && R19696 = 0 && R19697 = R19699 && R19698 = 0 && -1 < R1 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R19167 + -1*R19165 - R53 < 1 && 0 < R19699 && (R1 != 0 || R17 = 0 || (R19600 = 0 && R19601 = 0)) && (R1 != 0 || R17 = 0 || (R19602 = 0 && R19603 = 0)) && (R1 != 0 || R17 = 0 || (R19604 = 0 && R19605 = 0)) && (R1 != 0 || R17 = 0 || (R19606 = 0 && R19607 = 0)) && (R1 != 0 || R17 = 0 || (R19608 = 0 && R19609 = 0)) && (R1 != 0 || R17 = 0 || (R19610 = 0 && R19611 = 0)) && (R1 != 0 || R17 = 0 || (R19612 = 0 && R19613 = 0)) && (R1 != 0 || R17 = 0 || (R19614 = 0 && R19615 = 0)) && (R1 != 0 || R17 = 0 || (R19616 = 0 && R19617 = 0)) && (R1 != 0 || R17 = 0 || (R19618 = 0 && R19619 = 0)) && (R48 + R19163 + R19160 != 0 || ((R42 + R11524 + R11522 != 0 || R43 + R11525 + R11523 + -1*R19167 + -1*R19165 - R53 = 0 || R53 + R19167 + R19165 < 1) && (R42 + R11524 + R11522 = 0 || R53 + R19167 + R19165 < 1))) && (R48 + R19163 + R19160 != 0 || ((R46 + R19161 + R19158 != 0 || R47 + R19162 + R19159 + -1*R19167 + -1*R19165 - R53 = 0 || R53 + R19167 + R19165 < 1) && (R46 + R19161 + R19158 = 0 || R53 + R19167 + R19165 < 1))) && (R19600 != 0 || R1 = R19601 || R1 < 1) && (R19602 != 0 || R1 = R19603 || R1 < 1) && (R19604 != 0 || R1 = R19605 || R1 < 1) && (R19606 != 0 || R1 = R19607 || R1 < 1) && (R19608 != 0 || R1 = R19609 || R1 < 1) && (R19610 != 0 || R1 = R19611 || R1 < 1) && (R19612 != 0 || R1 = R19613 || R1 < 1) && (R19614 != 0 || R1 = R19615 || R1 < 1) && (R19616 != 0 || R1 = R19617 || R1 < 1) && (R19618 != 0 || R1 = R19619 || R1 < 1) && (R18 = 0 || (R19638 = 0 && R19639 = 0)) && (R18 = 0 || (R19642 = 0 && R19643 = 0)) && (R18 = 0 || (R19644 = 0 && R19645 = 0)) && (R18 = 0 || (R19654 = 0 && R19655 = 0)) && (R19 = 0 || (R19620 = 0 && R19621 = 0)) && (R19 = 0 || (R19622 = 0 && R19623 = 0)) && (R19 = 0 || (R19624 = 0 && R19625 = 0)) && (R19 = 0 || (R19626 = 0 && R19627 = 0)) && (R19 = 0 || (R19628 = 0 && R19629 = 0)) && (R19 = 0 || (R19630 = 0 && R19631 = 0)) && (R19 = 0 || (R19632 = 0 && R19633 = 0)) && (R19 = 0 || (R19634 = 0 && R19635 = 0)) && (R19 = 0 || (R19636 = 0 && R19637 = 0)) && (R48 + R19163 + R19160 = 0 || (R42 + R11524 + R11522 = 0 && R43 + R11525 + R11523 + -1*R19167 + -1*R19165 - R53 = 0)) && (R48 + R19163 + R19160 = 0 || (R46 + R19161 + R19158 = 0 && R47 + R19162 + R19159 + -1*R19167 + -1*R19165 - R53 = 0)) && (R58 + R19595 + R19592 = 0 || (R56 + R19593 + R19590 = 0 && R57 + R19594 + R19591 = 0)) && (R58 + R19595 + R19592 = 0 || (R62 + R19598 + R19596 = 0 && R63 + R19599 + R19597 = 0)) && (R19600 = 0 || R1 < 1) && (R19602 = 0 || R1 < 1) && (R19604 = 0 || R1 < 1) && (R19606 = 0 || R1 < 1) && (R19608 = 0 || R1 < 1) && (R19610 = 0 || R1 < 1) && (R19612 = 0 || R1 < 1) && (R19614 = 0 || R1 < 1) && (R19616 = 0 || R1 < 1) && (R19618 = 0 || R1 < 1);
// End of Parikh automata intersection problem
