// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R11522, R11523, R11524, R11525, R12, R17, R18, R19, R19158, R19159, R19160, R19161, R19162, R19163, R19164, R19165, R19166, R19167, R2, R20, R20012, R20013, R20014, R20015, R20016, R20017, R20122, R20123, R20124, R20125, R20126, R20127, R20128, R20129, R20130, R20131, R20132, R20133, R20134, R20135, R20136, R20137, R20138, R20139, R20140, R20141, R20142, R20143, R20144, R20145, R20146, R20147, R20148, R20149, R20150, R20151, R20152, R20153, R20154, R20155, R20156, R20157, R20158, R20159, R20160, R20161, R20162, R20163, R20164, R20165, R20166, R20167, R20168, R20169, R20170, R20171, R20172, R20173, R20174, R20175, R20176, R20177, R20178, R20179, R20180, R20181, R20182, R20183, R20184, R20185, R20186, R20187, R20188, R20189, R20190, R20191, R20192, R20193, R20194, R20195, R20196, R20197, R20198, R20199, R20200, R20201, R20202, R20203, R20204, R20205, R20206, R20207, R20208, R20209, R20210, R20211, R20212, R20213, R20214, R20215, R20216, R20217, R20218, R20219, R20220, R20221, R20222, R20223, R20224, R20225, R21, R22, R23, R24, R25, R26, R27, R3, R38, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 72];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [73, 73];
  s0 -> s1 [74, 65535];
  s1 -> s1 [0, 72];
  s1 -> s2 [73, 73];
  s1 -> s1 [74, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R21 += 1 };
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R25 += 1 };
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R20147 += 1, R19 += 1 };
  s0 -> s0 [0, 65535] { R20146 += 1, R20147 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R20147 += 1, R19 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 72] { R20149 += 1 };
  s0 -> s0 [0, 65535] { R20148 += 1, R20149 += 1 };
  s0 -> s2 [73, 73] { R20149 += 1 };
  s0 -> s3 [73, 73] { R20149 += 1 };
  s0 -> s1 [78, 65535] { R20149 += 1 };
  s1 -> s1 [0, 72] { R20149 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R20149 += 1 };
  s1 -> s3 [73, 73] { R20149 += 1 };
  s1 -> s1 [78, 65535] { R20149 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 73] { R20149 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [78, 65535] { R20149 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 72] { R20151 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R20150 += 1, R20151 += 1 };
  s0 -> s2 [73, 73] { R20151 += 1, R38 += 1 };
  s0 -> s3 [73, 73] { R20151 += 1, R38 += 1 };
  s0 -> s1 [74, 65535] { R20151 += 1, R38 += 1 };
  s1 -> s1 [0, 72] { R20151 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R20151 += 1, R38 += 1 };
  s1 -> s3 [73, 73] { R20151 += 1, R38 += 1 };
  s1 -> s1 [74, 65535] { R20151 += 1, R38 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R20151 += 1, R38 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 72] { R20153 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R20152 += 1, R20153 += 1 };
  s0 -> s2 [73, 73] { R20153 += 1, R40 += 1 };
  s0 -> s3 [73, 73] { R20153 += 1, R40 += 1 };
  s0 -> s1 [74, 65535] { R20153 += 1, R40 += 1 };
  s1 -> s1 [0, 72] { R20153 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R20153 += 1, R40 += 1 };
  s1 -> s3 [73, 73] { R20153 += 1, R40 += 1 };
  s1 -> s1 [74, 65535] { R20153 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R20153 += 1, R40 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 72] { R20155 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R20154 += 1, R20155 += 1 };
  s0 -> s2 [73, 73] { R20155 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [73, 73] { R20155 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [74, 65535] { R20155 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 72] { R20155 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R20155 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [73, 73] { R20155 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [74, 65535] { R20155 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R20155 += 1, R42 += 1, R43 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 72] { R20157 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R20156 += 1, R20157 += 1 };
  s0 -> s2 [73, 73] { R20157 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [73, 73] { R20157 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [74, 65535] { R20157 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 72] { R20157 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R20157 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [73, 73] { R20157 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [74, 65535] { R20157 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535] { R20157 += 1, R46 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 72] { R20159 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R20158 += 1, R20159 += 1 };
  s0 -> s2 [73, 73] { R20159 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [73, 73] { R20159 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [74, 65535] { R20159 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 72] { R20159 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R20159 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [73, 73] { R20159 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [74, 65535] { R20159 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R20159 += 1, R52 += 1, R53 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 72] { R20161 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R20160 += 1, R20161 += 1 };
  s0 -> s2 [73, 73] { R20161 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [73, 73] { R20161 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [74, 65535] { R20161 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 72] { R20161 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R20161 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [73, 73] { R20161 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [74, 65535] { R20161 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R20161 += 1, R56 += 1, R57 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 72] { R20163 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R20162 += 1, R20163 += 1 };
  s0 -> s2 [73, 73] { R20163 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [73, 73] { R20163 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [74, 65535] { R20163 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 72] { R20163 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R20163 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [73, 73] { R20163 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [74, 65535] { R20163 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R20163 += 1, R62 += 1, R63 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 72] { R20183 += 1 };
  s0 -> s0 [0, 65535] { R20182 += 1, R20183 += 1 };
  s0 -> s2 [73, 73] { R20183 += 1 };
  s0 -> s1 [74, 65535] { R20183 += 1 };
  s1 -> s1 [0, 72] { R20183 += 1 };
  s1 -> s2 [73, 73] { R20183 += 1 };
  s1 -> s1 [74, 65535] { R20183 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R20183 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R20184 += 1, R20185 += 1 };
  s0 -> s1 [0, 65535] { R20185 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R20185 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 72] { R20187 += 1 };
  s0 -> s0 [0, 65535] { R20186 += 1, R20187 += 1 };
  s0 -> s2 [0, 65535] { R20187 += 1, R8 += 1 };
  s0 -> s3 [73, 73] { R20187 += 1 };
  s0 -> s1 [74, 65535] { R20187 += 1 };
  s1 -> s1 [0, 72] { R20187 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [73, 73] { R20187 += 1 };
  s1 -> s1 [74, 65535] { R20187 += 1 };
  s2 -> s1 [0, 72] { R20187 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R20187 += 1, R8 += 1 };
  s2 -> s3 [73, 73] { R20187 += 1 };
  s2 -> s1 [74, 65535] { R20187 += 1 };
  s3 -> s3 [0, 65535] { R20187 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 72] { R20189 += 1, R20127 += 1 };
  s0 -> s0 [0, 65535] { R20188 += 1, R20189 += 1 };
  s0 -> s2 [0, 65535] { R20189 += 1, R20126 += 1, R20127 += 1 };
  s0 -> s1 [74, 65535] { R20189 += 1, R20127 += 1 };
  s1 -> s1 [0, 72] { R20189 += 1, R20127 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R20189 += 1 };
  s1 -> s1 [74, 65535] { R20189 += 1, R20127 += 1 };
  s2 -> s1 [0, 72] { R20189 += 1, R20127 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R20189 += 1, R20126 += 1, R20127 += 1 };
  s2 -> s1 [74, 65535] { R20189 += 1, R20127 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R20191 += 1, R20128 += 1, R20129 += 1 };
  s0 -> s2 [0, 65535] { R20191 += 1, R20129 += 1, R17 += 1 };
  s0 -> s0 [0, 65535] { R20190 += 1, R20191 += 1 };
  s1 -> s1 [0, 65535] { R20191 += 1, R20128 += 1, R20129 += 1 };
  s1 -> s2 [0, 65535] { R20191 += 1, R20129 += 1, R17 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R20191 += 1, R20129 += 1, R17 += 1 };
  s2 -> s3 [0, 65535] { R20191 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R20191 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 73] { R20193 += 1, R20131 += 1 };
  s0 -> s0 [0, 65535] { R20192 += 1, R20193 += 1 };
  s0 -> s2 [0, 65535] { R20193 += 1, R20130 += 1, R20131 += 1 };
  s0 -> s1 [77, 65535] { R20193 += 1, R20131 += 1 };
  s1 -> s1 [0, 73] { R20193 += 1, R20131 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R20193 += 1 };
  s1 -> s1 [77, 65535] { R20193 += 1, R20131 += 1 };
  s2 -> s1 [0, 73] { R20193 += 1, R20131 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R20193 += 1, R20130 += 1, R20131 += 1 };
  s2 -> s1 [77, 65535] { R20193 += 1, R20131 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s0 [0, 65535] { R20194 += 1, R20195 += 1 };
  s0 -> s1 [0, 65535] { R20195 += 1, R20133 += 1, R67 += 1 };
  s0 -> s2 [0, 65535] { R20195 += 1, R20132 += 1, R20133 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R20195 += 1 };
  s1 -> s1 [0, 65535] { R20195 += 1, R20133 += 1, R67 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R20195 += 1, R20133 += 1, R67 += 1 };
  s2 -> s2 [0, 65535] { R20195 += 1, R20132 += 1, R20133 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R20195 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 76] { R20197 += 1, R20135 += 1 };
  s0 -> s2 [0, 65535] { R20197 += 1, R20134 += 1, R20135 += 1 };
  s0 -> s3 [0, 65535] { R20197 += 1, R20135 += 1, R69 += 1 };
  s0 -> s0 [0, 65535] { R20196 += 1, R20197 += 1 };
  s0 -> s1 [78, 65535] { R20197 += 1, R20135 += 1 };
  s1 -> s1 [0, 76] { R20197 += 1, R20135 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R20197 += 1 };
  s1 -> s1 [78, 65535] { R20197 += 1, R20135 += 1 };
  s2 -> s1 [0, 76] { R20197 += 1, R20135 += 1 };
  s2 -> s2 [0, 65535] { R20197 += 1, R20134 += 1, R20135 += 1 };
  s2 -> s3 [0, 65535] { R20197 += 1, R20135 += 1, R69 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [78, 65535] { R20197 += 1, R20135 += 1 };
  s3 -> s1 [0, 76] { R20197 += 1, R20135 += 1 };
  s3 -> s3 [0, 65535] { R20197 += 1, R20135 += 1, R69 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R20197 += 1 };
  s3 -> s1 [78, 65535] { R20197 += 1, R20135 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R20197 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 76] { R20199 += 1, R20137 += 1, R11525 += 1 };
  s0 -> s0 [0, 65535] { R20198 += 1, R20199 += 1 };
  s0 -> s2 [0, 65535] { R20199 += 1, R20136 += 1, R20137 += 1 };
  s0 -> s1 [0, 65535] { R20199 += 1, R20137 += 1 };
  s0 -> s1 [78, 65535] { R20199 += 1, R20137 += 1, R11525 += 1 };
  s1 -> s1 [0, 76] { R20199 += 1, R20137 += 1, R11525 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R20199 += 1, R20137 += 1 };
  s1 -> s4 [0, 65535] { R20199 += 1 };
  s1 -> s1 [78, 65535] { R20199 += 1, R20137 += 1, R11525 += 1 };
  s2 -> s1 [0, 76] { R20199 += 1, R20137 += 1, R11525 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R20199 += 1, R20136 += 1, R20137 += 1 };
  s2 -> s1 [0, 65535] { R20199 += 1, R20137 += 1 };
  s2 -> s1 [78, 65535] { R20199 += 1, R20137 += 1, R11525 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R20199 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R20201 += 1, R20138 += 1, R20139 += 1 };
  s0 -> s0 [0, 65535] { R20200 += 1, R20201 += 1 };
  s0 -> s2 [0, 65535] { R20201 += 1, R20139 += 1 };
  s1 -> s1 [0, 65535] { R20201 += 1, R20138 += 1, R20139 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R20201 += 1, R20139 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R20201 += 1 };
  s2 -> s2 [0, 65535] { R20201 += 1, R20139 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R20201 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 77] { R20203 += 1, R20141 += 1, R19167 += 1 };
  s0 -> s2 [0, 65535] { R20203 += 1, R20140 += 1, R20141 += 1 };
  s0 -> s1 [0, 65535] { R20203 += 1, R20141 += 1 };
  s0 -> s0 [0, 65535] { R20202 += 1, R20203 += 1 };
  s0 -> s1 [90, 65535] { R20203 += 1, R20141 += 1, R19167 += 1 };
  s1 -> s1 [0, 77] { R20203 += 1, R20141 += 1, R19167 += 1 };
  s1 -> s1 [0, 65535] { R20203 += 1, R20141 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R20203 += 1 };
  s1 -> s1 [90, 65535] { R20203 += 1, R20141 += 1, R19167 += 1 };
  s2 -> s1 [0, 77] { R20203 += 1, R20141 += 1, R19167 += 1 };
  s2 -> s2 [0, 65535] { R20203 += 1, R20140 += 1, R20141 += 1 };
  s2 -> s1 [0, 65535] { R20203 += 1, R20141 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [90, 65535] { R20203 += 1, R20141 += 1, R19167 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R20203 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R20205 += 1, R20142 += 1, R20143 += 1 };
  s0 -> s0 [0, 65535] { R20204 += 1, R20205 += 1 };
  s0 -> s2 [0, 65535] { R20205 += 1, R20143 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R20205 += 1, R20142 += 1, R20143 += 1 };
  s1 -> s2 [0, 65535] { R20205 += 1, R20143 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R20205 += 1 };
  s2 -> s2 [0, 65535] { R20205 += 1, R20143 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R20205 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 76] { R20207 += 1, R20145 += 1, R20125 += 1 };
  s0 -> s2 [0, 65535] { R20207 += 1, R20144 += 1, R20145 += 1 };
  s0 -> s1 [0, 65535] { R20207 += 1, R20145 += 1 };
  s0 -> s0 [0, 65535] { R20206 += 1, R20207 += 1 };
  s0 -> s3 [77, 77] { R20207 += 1, R20145 += 1, R20125 += 1 };
  s0 -> s4 [77, 77] { R20207 += 1, R20145 += 1, R20125 += 1 };
  s0 -> s1 [91, 65535] { R20207 += 1, R20145 += 1, R20125 += 1 };
  s1 -> s1 [0, 76] { R20207 += 1, R20145 += 1, R20125 += 1 };
  s1 -> s5 [0, 65535] { R20207 += 1 };
  s1 -> s1 [0, 65535] { R20207 += 1, R20145 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [77, 77] { R20207 += 1, R20145 += 1, R20125 += 1 };
  s1 -> s4 [77, 77] { R20207 += 1, R20145 += 1, R20125 += 1 };
  s1 -> s1 [91, 65535] { R20207 += 1, R20145 += 1, R20125 += 1 };
  s2 -> s1 [0, 76] { R20207 += 1, R20145 += 1, R20125 += 1 };
  s2 -> s2 [0, 65535] { R20207 += 1, R20144 += 1, R20145 += 1 };
  s2 -> s1 [0, 65535] { R20207 += 1, R20145 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [77, 77] { R20207 += 1, R20145 += 1, R20125 += 1 };
  s2 -> s4 [77, 77] { R20207 += 1, R20145 += 1, R20125 += 1 };
  s2 -> s1 [91, 65535] { R20207 += 1, R20145 += 1, R20125 += 1 };
  s3 -> s3 [0, 77] { R20207 += 1, R20145 += 1, R20125 += 1 };
  s3 -> s5 [0, 65535] { R20207 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R20207 += 1, R20145 += 1 };
  s3 -> s3 [91, 65535] { R20207 += 1, R20145 += 1, R20125 += 1 };
  s4 -> s5 [0, 65535] { R20207 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R20207 += 1, R20145 += 1 };
  s5 -> s5 [0, 65535] { R20207 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R20209 += 1, R20165 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R20208 += 1, R20209 += 1 };
  s0 -> s2 [0, 65535] { R20209 += 1, R20164 += 1, R20165 += 1 };
  s1 -> s1 [0, 65535] { R20209 += 1, R20165 += 1, R18 += 1 };
  s1 -> s4 [0, 65535] { R20209 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R20209 += 1, R20165 += 1, R18 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R20209 += 1, R20164 += 1, R20165 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R20209 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 72] { R20211 += 1, R20167 += 1 };
  s0 -> s2 [0, 65535] { R20211 += 1, R20166 += 1, R20167 += 1 };
  s0 -> s0 [0, 65535] { R20210 += 1, R20211 += 1 };
  s0 -> s3 [73, 73] { R20211 += 1, R20167 += 1 };
  s0 -> s4 [73, 73] { R20211 += 1, R20167 += 1 };
  s0 -> s5 [77, 77] { R20211 += 1, R20167 += 1 };
  s0 -> s1 [78, 65535] { R20211 += 1, R20167 += 1 };
  s1 -> s1 [0, 72] { R20211 += 1, R20167 += 1 };
  s1 -> s3 [73, 73] { R20211 += 1, R20167 += 1 };
  s1 -> s4 [73, 73] { R20211 += 1, R20167 += 1 };
  s1 -> s5 [77, 77] { R20211 += 1, R20167 += 1 };
  s1 -> s1 [78, 65535] { R20211 += 1, R20167 += 1 };
  s2 -> s1 [0, 72] { R20211 += 1, R20167 += 1 };
  s2 -> s2 [0, 65535] { R20211 += 1, R20166 += 1, R20167 += 1 };
  s2 -> s3 [73, 73] { R20211 += 1, R20167 += 1 };
  s2 -> s4 [73, 73] { R20211 += 1, R20167 += 1 };
  s2 -> s5 [77, 77] { R20211 += 1, R20167 += 1 };
  s2 -> s1 [78, 65535] { R20211 += 1, R20167 += 1 };
  s3 -> s3 [0, 73] { R20211 += 1, R20167 += 1 };
  s3 -> s8 [77, 77] { R20211 += 1, R20167 += 1 };
  s3 -> s3 [78, 65535] { R20211 += 1, R20167 += 1 };
  s5 -> s5 [0, 72] { R20211 += 1, R20167 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R20211 += 1 };
  s5 -> s7 [73, 73] { R20211 += 1, R20167 += 1 };
  s5 -> s8 [73, 73] { R20211 += 1, R20167 += 1 };
  s5 -> s5 [77, 65535] { R20211 += 1, R20167 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R20211 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 73] { R20211 += 1, R20167 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R20211 += 1 };
  s8 -> s8 [77, 65535] { R20211 += 1, R20167 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 72] { R20213 += 1, R20169 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R20212 += 1, R20213 += 1 };
  s0 -> s2 [0, 65535] { R20213 += 1, R20168 += 1, R20169 += 1 };
  s0 -> s3 [73, 73] { R20213 += 1, R20169 += 1, R66 += 1 };
  s0 -> s4 [73, 73] { R20213 += 1, R20169 += 1, R66 += 1 };
  s0 -> s1 [74, 65535] { R20213 += 1, R20169 += 1, R66 += 1 };
  s1 -> s1 [0, 72] { R20213 += 1, R20169 += 1, R66 += 1 };
  s1 -> s1 [0, 65535] { R20213 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R20213 += 1, R20169 += 1, R66 += 1 };
  s1 -> s4 [73, 73] { R20213 += 1, R20169 += 1, R66 += 1 };
  s1 -> s1 [74, 65535] { R20213 += 1, R20169 += 1, R66 += 1 };
  s2 -> s1 [0, 72] { R20213 += 1, R20169 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R20213 += 1, R20168 += 1, R20169 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R20213 += 1, R20169 += 1, R66 += 1 };
  s2 -> s4 [73, 73] { R20213 += 1, R20169 += 1, R66 += 1 };
  s2 -> s1 [74, 65535] { R20213 += 1, R20169 += 1, R66 += 1 };
  s3 -> s3 [0, 65535] { R20213 += 1, R20169 += 1, R66 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R20213 += 1 };
  s4 -> s4 [0, 65535] { R20213 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R20213 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 72] { R20215 += 1, R20171 += 1, R68 += 1 };
  s0 -> s0 [0, 65535] { R20214 += 1, R20215 += 1 };
  s0 -> s2 [0, 65535] { R20215 += 1, R20170 += 1, R20171 += 1 };
  s0 -> s3 [73, 73] { R20215 += 1, R20171 += 1, R68 += 1 };
  s0 -> s4 [73, 73] { R20215 += 1, R20171 += 1, R68 += 1 };
  s0 -> s1 [74, 65535] { R20215 += 1, R20171 += 1, R68 += 1 };
  s1 -> s1 [0, 72] { R20215 += 1, R20171 += 1, R68 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R20215 += 1 };
  s1 -> s3 [73, 73] { R20215 += 1, R20171 += 1, R68 += 1 };
  s1 -> s4 [73, 73] { R20215 += 1, R20171 += 1, R68 += 1 };
  s1 -> s1 [74, 65535] { R20215 += 1, R20171 += 1, R68 += 1 };
  s2 -> s1 [0, 72] { R20215 += 1, R20171 += 1, R68 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R20215 += 1, R20170 += 1, R20171 += 1 };
  s2 -> s3 [73, 73] { R20215 += 1, R20171 += 1, R68 += 1 };
  s2 -> s4 [73, 73] { R20215 += 1, R20171 += 1, R68 += 1 };
  s2 -> s1 [74, 65535] { R20215 += 1, R20171 += 1, R68 += 1 };
  s3 -> s3 [0, 65535] { R20215 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R20215 += 1 };
  s4 -> s4 [0, 65535] { R20215 += 1, R20171 += 1, R68 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R20215 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 72] { R20217 += 1, R20173 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s2 [0, 72] { R20217 += 1, R20173 += 1, R11523 += 1 };
  s0 -> s0 [0, 65535] { R20216 += 1, R20217 += 1 };
  s0 -> s3 [0, 65535] { R20217 += 1, R20172 += 1, R20173 += 1 };
  s0 -> s4 [73, 73] { R20217 += 1, R20173 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s5 [73, 73] { R20217 += 1, R20173 += 1, R11523 += 1 };
  s0 -> s6 [73, 73] { R20217 += 1, R20173 += 1, R11523 += 1 };
  s0 -> s7 [73, 73] { R20217 += 1, R20173 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s2 [74, 76] { R20217 += 1, R20173 += 1, R11523 += 1 };
  s0 -> s1 [74, 65535] { R20217 += 1, R20173 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s2 [78, 65535] { R20217 += 1, R20173 += 1, R11523 += 1 };
  s1 -> s1 [0, 72] { R20217 += 1, R20173 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s2 [0, 72] { R20217 += 1, R20173 += 1, R11523 += 1 };
  s1 -> s4 [73, 73] { R20217 += 1, R20173 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s5 [73, 73] { R20217 += 1, R20173 += 1, R11523 += 1 };
  s1 -> s6 [73, 73] { R20217 += 1, R20173 += 1, R11523 += 1 };
  s1 -> s7 [73, 73] { R20217 += 1, R20173 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s2 [74, 76] { R20217 += 1, R20173 += 1, R11523 += 1 };
  s1 -> s1 [74, 65535] { R20217 += 1, R20173 += 1, R11522 += 1, R11523 += 1 };
  s1 -> s2 [78, 65535] { R20217 += 1, R20173 += 1, R11523 += 1 };
  s2 -> s2 [0, 72] { R20217 += 1, R20173 += 1, R11523 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R20217 += 1 };
  s2 -> s5 [73, 73] { R20217 += 1, R20173 += 1 };
  s2 -> s6 [73, 73] { R20217 += 1, R20173 += 1 };
  s2 -> s2 [74, 76] { R20217 += 1, R20173 += 1, R11523 += 1 };
  s2 -> s2 [74, 65535] { R20217 += 1, R20173 += 1 };
  s2 -> s2 [78, 65535] { R20217 += 1, R20173 += 1, R11523 += 1 };
  s3 -> s1 [0, 72] { R20217 += 1, R20173 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s2 [0, 72] { R20217 += 1, R20173 += 1, R11523 += 1 };
  s3 -> s3 [0, 65535] { R20217 += 1, R20172 += 1, R20173 += 1 };
  s3 -> s4 [73, 73] { R20217 += 1, R20173 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s5 [73, 73] { R20217 += 1, R20173 += 1, R11523 += 1 };
  s3 -> s6 [73, 73] { R20217 += 1, R20173 += 1, R11523 += 1 };
  s3 -> s7 [73, 73] { R20217 += 1, R20173 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s2 [74, 76] { R20217 += 1, R20173 += 1, R11523 += 1 };
  s3 -> s1 [74, 65535] { R20217 += 1, R20173 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s2 [78, 65535] { R20217 += 1, R20173 += 1, R11523 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s5 [0, 65535] { R20217 += 1 };
  s6 -> s6 [0, 76] { R20217 += 1, R20173 += 1, R11523 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s9 [0, 65535] { R20217 += 1 };
  s6 -> s6 [0, 65535] { R20217 += 1, R20173 += 1 };
  s6 -> s6 [78, 65535] { R20217 += 1, R20173 += 1, R11523 += 1 };
  s7 -> s6 [0, 76] { R20217 += 1, R20173 += 1, R11523 += 1 };
  s7 -> s7 [0, 65535] { R20217 += 1, R20173 += 1, R11522 += 1, R11523 += 1 };
  s7 -> s6 [78, 65535] { R20217 += 1, R20173 += 1, R11523 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R20217 += 1 };
  accepting s8, s5, s2, s9, s6;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 72] { R20219 += 1, R20175 += 1, R19159 += 1, R19160 += 1 };
  s0 -> s2 [0, 72] { R20219 += 1, R20175 += 1, R19158 += 1, R19159 += 1 };
  s0 -> s0 [0, 65535] { R20218 += 1, R20219 += 1 };
  s0 -> s3 [0, 65535] { R20219 += 1, R20174 += 1, R20175 += 1 };
  s0 -> s4 [73, 73] { R20219 += 1, R20175 += 1, R19159 += 1, R19160 += 1 };
  s0 -> s5 [73, 73] { R20219 += 1, R20175 += 1, R19158 += 1, R19159 += 1 };
  s0 -> s6 [73, 73] { R20219 += 1, R20175 += 1, R19159 += 1, R19160 += 1 };
  s0 -> s7 [73, 73] { R20219 += 1, R20175 += 1, R19158 += 1, R19159 += 1 };
  s0 -> s1 [74, 65535] { R20219 += 1, R20175 += 1, R19159 += 1, R19160 += 1 };
  s0 -> s2 [74, 65535] { R20219 += 1, R20175 += 1, R19158 += 1, R19159 += 1 };
  s1 -> s1 [0, 72] { R20219 += 1, R20175 += 1, R19159 += 1, R19160 += 1 };
  s1 -> s11 [0, 72] { R20219 += 1, R20175 += 1 };
  s1 -> s4 [73, 73] { R20219 += 1, R20175 += 1, R19159 += 1, R19160 += 1 };
  s1 -> s8 [73, 73] { R20219 += 1, R20175 += 1 };
  s1 -> s12 [73, 73] { R20219 += 1, R20175 += 1 };
  s1 -> s6 [73, 73] { R20219 += 1, R20175 += 1, R19159 += 1, R19160 += 1 };
  s1 -> s1 [74, 65535] { R20219 += 1, R20175 += 1, R19159 += 1, R19160 += 1 };
  s1 -> s11 [74, 65535] { R20219 += 1, R20175 += 1 };
  s2 -> s1 [0, 72] { R20219 += 1, R20175 += 1, R19159 += 1, R19160 += 1 };
  s2 -> s2 [0, 72] { R20219 += 1, R20175 += 1, R19158 += 1, R19159 += 1 };
  s2 -> s4 [73, 73] { R20219 += 1, R20175 += 1, R19159 += 1, R19160 += 1 };
  s2 -> s5 [73, 73] { R20219 += 1, R20175 += 1, R19158 += 1, R19159 += 1 };
  s2 -> s6 [73, 73] { R20219 += 1, R20175 += 1, R19159 += 1, R19160 += 1 };
  s2 -> s7 [73, 73] { R20219 += 1, R20175 += 1, R19158 += 1, R19159 += 1 };
  s2 -> s1 [74, 65535] { R20219 += 1, R20175 += 1, R19159 += 1, R19160 += 1 };
  s2 -> s2 [74, 65535] { R20219 += 1, R20175 += 1, R19158 += 1, R19159 += 1 };
  s3 -> s1 [0, 72] { R20219 += 1, R20175 += 1, R19159 += 1, R19160 += 1 };
  s3 -> s2 [0, 72] { R20219 += 1, R20175 += 1, R19158 += 1, R19159 += 1 };
  s3 -> s3 [0, 65535] { R20219 += 1, R20174 += 1, R20175 += 1 };
  s3 -> s4 [73, 73] { R20219 += 1, R20175 += 1, R19159 += 1, R19160 += 1 };
  s3 -> s5 [73, 73] { R20219 += 1, R20175 += 1, R19158 += 1, R19159 += 1 };
  s3 -> s6 [73, 73] { R20219 += 1, R20175 += 1, R19159 += 1, R19160 += 1 };
  s3 -> s7 [73, 73] { R20219 += 1, R20175 += 1, R19158 += 1, R19159 += 1 };
  s3 -> s1 [74, 65535] { R20219 += 1, R20175 += 1, R19159 += 1, R19160 += 1 };
  s3 -> s2 [74, 65535] { R20219 += 1, R20175 += 1, R19158 += 1, R19159 += 1 };
  s4 -> s4 [0, 65535] { R20219 += 1, R20175 += 1, R19159 += 1, R19160 += 1 };
  s4 -> s8 [0, 65535] { R20219 += 1, R20175 += 1 };
  s7 -> s4 [0, 65535] { R20219 += 1, R20175 += 1, R19159 += 1, R19160 += 1 };
  s7 -> s7 [0, 65535] { R20219 += 1, R20175 += 1, R19158 += 1, R19159 += 1 };
  s8 -> s8 [0, 65535] { R20219 += 1, R20175 += 1 };
  s8 -> s9 [0, 65535] { R20219 += 1 };
  s8 -> s10 [0, 65535];
  s9 -> s9 [0, 65535] { R20219 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s11 [0, 72] { R20219 += 1, R20175 += 1 };
  s11 -> s11 [0, 65535] { R20219 += 1 };
  s11 -> s10 [0, 65535];
  s11 -> s8 [73, 73] { R20219 += 1, R20175 += 1 };
  s11 -> s12 [73, 73] { R20219 += 1, R20175 += 1 };
  s11 -> s11 [74, 65535] { R20219 += 1, R20175 += 1 };
  s12 -> s12 [0, 65535] { R20219 += 1 };
  s12 -> s10 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 72] { R20221 += 1, R20177 += 1, R19165 += 1 };
  s0 -> s2 [0, 72] { R20221 += 1, R20177 += 1, R19164 += 1, R19165 += 1 };
  s0 -> s0 [0, 65535] { R20220 += 1, R20221 += 1 };
  s0 -> s3 [0, 65535] { R20221 += 1, R20176 += 1, R20177 += 1 };
  s0 -> s4 [73, 73] { R20221 += 1, R20177 += 1, R19165 += 1 };
  s0 -> s5 [73, 73] { R20221 += 1, R20177 += 1, R19165 += 1 };
  s0 -> s6 [73, 73] { R20221 += 1, R20177 += 1, R19164 += 1, R19165 += 1 };
  s0 -> s7 [73, 73] { R20221 += 1, R20177 += 1, R19164 += 1, R19165 += 1 };
  s0 -> s1 [74, 77] { R20221 += 1, R20177 += 1, R19165 += 1 };
  s0 -> s2 [74, 65535] { R20221 += 1, R20177 += 1, R19164 += 1, R19165 += 1 };
  s0 -> s8 [90, 90] { R20221 += 1, R20177 += 1, R19165 += 1 };
  s0 -> s1 [91, 65535] { R20221 += 1, R20177 += 1, R19165 += 1 };
  s1 -> s1 [0, 72] { R20221 += 1, R20177 += 1, R19165 += 1 };
  s1 -> s4 [73, 73] { R20221 += 1, R20177 += 1, R19165 += 1 };
  s1 -> s5 [73, 73] { R20221 += 1, R20177 += 1, R19165 += 1 };
  s1 -> s1 [74, 77] { R20221 += 1, R20177 += 1, R19165 += 1 };
  s1 -> s8 [90, 90] { R20221 += 1, R20177 += 1, R19165 += 1 };
  s1 -> s1 [91, 65535] { R20221 += 1, R20177 += 1, R19165 += 1 };
  s2 -> s1 [0, 72] { R20221 += 1, R20177 += 1, R19165 += 1 };
  s2 -> s2 [0, 72] { R20221 += 1, R20177 += 1, R19164 += 1, R19165 += 1 };
  s2 -> s4 [73, 73] { R20221 += 1, R20177 += 1, R19165 += 1 };
  s2 -> s5 [73, 73] { R20221 += 1, R20177 += 1, R19165 += 1 };
  s2 -> s6 [73, 73] { R20221 += 1, R20177 += 1, R19164 += 1, R19165 += 1 };
  s2 -> s7 [73, 73] { R20221 += 1, R20177 += 1, R19164 += 1, R19165 += 1 };
  s2 -> s1 [74, 77] { R20221 += 1, R20177 += 1, R19165 += 1 };
  s2 -> s2 [74, 65535] { R20221 += 1, R20177 += 1, R19164 += 1, R19165 += 1 };
  s2 -> s8 [90, 90] { R20221 += 1, R20177 += 1, R19165 += 1 };
  s2 -> s1 [91, 65535] { R20221 += 1, R20177 += 1, R19165 += 1 };
  s3 -> s1 [0, 72] { R20221 += 1, R20177 += 1, R19165 += 1 };
  s3 -> s2 [0, 72] { R20221 += 1, R20177 += 1, R19164 += 1, R19165 += 1 };
  s3 -> s3 [0, 65535] { R20221 += 1, R20176 += 1, R20177 += 1 };
  s3 -> s4 [73, 73] { R20221 += 1, R20177 += 1, R19165 += 1 };
  s3 -> s5 [73, 73] { R20221 += 1, R20177 += 1, R19165 += 1 };
  s3 -> s6 [73, 73] { R20221 += 1, R20177 += 1, R19164 += 1, R19165 += 1 };
  s3 -> s7 [73, 73] { R20221 += 1, R20177 += 1, R19164 += 1, R19165 += 1 };
  s3 -> s1 [74, 77] { R20221 += 1, R20177 += 1, R19165 += 1 };
  s3 -> s2 [74, 65535] { R20221 += 1, R20177 += 1, R19164 += 1, R19165 += 1 };
  s3 -> s8 [90, 90] { R20221 += 1, R20177 += 1, R19165 += 1 };
  s3 -> s1 [91, 65535] { R20221 += 1, R20177 += 1, R19165 += 1 };
  s5 -> s5 [0, 77] { R20221 += 1, R20177 += 1, R19165 += 1 };
  s5 -> s10 [90, 90] { R20221 += 1, R20177 += 1, R19165 += 1 };
  s5 -> s5 [91, 65535] { R20221 += 1, R20177 += 1, R19165 += 1 };
  s7 -> s5 [0, 77] { R20221 += 1, R20177 += 1, R19165 += 1 };
  s7 -> s7 [0, 65535] { R20221 += 1, R20177 += 1, R19164 += 1, R19165 += 1 };
  s7 -> s10 [90, 90] { R20221 += 1, R20177 += 1, R19165 += 1 };
  s7 -> s5 [91, 65535] { R20221 += 1, R20177 += 1, R19165 += 1 };
  s8 -> s8 [0, 72] { R20221 += 1, R20177 += 1, R19165 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R20221 += 1 };
  s8 -> s10 [73, 73] { R20221 += 1, R20177 += 1 };
  s8 -> s11 [73, 73] { R20221 += 1, R20177 += 1 };
  s8 -> s8 [74, 77] { R20221 += 1, R20177 += 1, R19165 += 1 };
  s8 -> s8 [74, 65535] { R20221 += 1, R20177 += 1 };
  s8 -> s8 [90, 65535] { R20221 += 1, R20177 += 1, R19165 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 77] { R20221 += 1, R20177 += 1, R19165 += 1 };
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R20221 += 1, R20177 += 1 };
  s10 -> s12 [0, 65535] { R20221 += 1 };
  s10 -> s10 [90, 65535] { R20221 += 1, R20177 += 1, R19165 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R20221 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R20221 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 72] { R20223 += 1, R20179 += 1, R20012 += 1, R20013 += 1 };
  s0 -> s2 [0, 72] { R20223 += 1, R20179 += 1, R20013 += 1, R20014 += 1 };
  s0 -> s0 [0, 65535] { R20222 += 1, R20223 += 1 };
  s0 -> s3 [0, 65535] { R20223 += 1, R20178 += 1, R20179 += 1 };
  s0 -> s4 [73, 73] { R20223 += 1, R20179 += 1, R20012 += 1, R20013 += 1 };
  s0 -> s5 [73, 73] { R20223 += 1, R20179 += 1, R20012 += 1, R20013 += 1 };
  s0 -> s6 [73, 73] { R20223 += 1, R20179 += 1, R20013 += 1, R20014 += 1 };
  s0 -> s7 [73, 73] { R20223 += 1, R20179 += 1, R20013 += 1, R20014 += 1 };
  s0 -> s1 [74, 65535] { R20223 += 1, R20179 += 1, R20012 += 1, R20013 += 1 };
  s0 -> s2 [74, 65535] { R20223 += 1, R20179 += 1, R20013 += 1, R20014 += 1 };
  s1 -> s1 [0, 72] { R20223 += 1, R20179 += 1, R20012 += 1, R20013 += 1 };
  s1 -> s2 [0, 72] { R20223 += 1, R20179 += 1, R20013 += 1, R20014 += 1 };
  s1 -> s4 [73, 73] { R20223 += 1, R20179 += 1, R20012 += 1, R20013 += 1 };
  s1 -> s5 [73, 73] { R20223 += 1, R20179 += 1, R20012 += 1, R20013 += 1 };
  s1 -> s6 [73, 73] { R20223 += 1, R20179 += 1, R20013 += 1, R20014 += 1 };
  s1 -> s7 [73, 73] { R20223 += 1, R20179 += 1, R20013 += 1, R20014 += 1 };
  s1 -> s1 [74, 65535] { R20223 += 1, R20179 += 1, R20012 += 1, R20013 += 1 };
  s1 -> s2 [74, 65535] { R20223 += 1, R20179 += 1, R20013 += 1, R20014 += 1 };
  s2 -> s11 [0, 72] { R20223 += 1, R20179 += 1 };
  s2 -> s2 [0, 72] { R20223 += 1, R20179 += 1, R20013 += 1, R20014 += 1 };
  s2 -> s12 [73, 73] { R20223 += 1, R20179 += 1 };
  s2 -> s8 [73, 73] { R20223 += 1, R20179 += 1 };
  s2 -> s6 [73, 73] { R20223 += 1, R20179 += 1, R20013 += 1, R20014 += 1 };
  s2 -> s7 [73, 73] { R20223 += 1, R20179 += 1, R20013 += 1, R20014 += 1 };
  s2 -> s11 [74, 65535] { R20223 += 1, R20179 += 1 };
  s2 -> s2 [74, 65535] { R20223 += 1, R20179 += 1, R20013 += 1, R20014 += 1 };
  s3 -> s1 [0, 72] { R20223 += 1, R20179 += 1, R20012 += 1, R20013 += 1 };
  s3 -> s2 [0, 72] { R20223 += 1, R20179 += 1, R20013 += 1, R20014 += 1 };
  s3 -> s3 [0, 65535] { R20223 += 1, R20178 += 1, R20179 += 1 };
  s3 -> s4 [73, 73] { R20223 += 1, R20179 += 1, R20012 += 1, R20013 += 1 };
  s3 -> s5 [73, 73] { R20223 += 1, R20179 += 1, R20012 += 1, R20013 += 1 };
  s3 -> s6 [73, 73] { R20223 += 1, R20179 += 1, R20013 += 1, R20014 += 1 };
  s3 -> s7 [73, 73] { R20223 += 1, R20179 += 1, R20013 += 1, R20014 += 1 };
  s3 -> s1 [74, 65535] { R20223 += 1, R20179 += 1, R20012 += 1, R20013 += 1 };
  s3 -> s2 [74, 65535] { R20223 += 1, R20179 += 1, R20013 += 1, R20014 += 1 };
  s5 -> s5 [0, 65535] { R20223 += 1, R20179 += 1, R20012 += 1, R20013 += 1 };
  s5 -> s6 [0, 65535] { R20223 += 1, R20179 += 1, R20013 += 1, R20014 += 1 };
  s6 -> s8 [0, 65535] { R20223 += 1, R20179 += 1 };
  s6 -> s6 [0, 65535] { R20223 += 1, R20179 += 1, R20013 += 1, R20014 += 1 };
  s8 -> s9 [0, 65535] { R20223 += 1 };
  s8 -> s8 [0, 65535] { R20223 += 1, R20179 += 1 };
  s8 -> s10 [0, 65535];
  s9 -> s9 [0, 65535] { R20223 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s11 [0, 72] { R20223 += 1, R20179 += 1 };
  s11 -> s11 [0, 65535] { R20223 += 1 };
  s11 -> s10 [0, 65535];
  s11 -> s12 [73, 73] { R20223 += 1, R20179 += 1 };
  s11 -> s8 [73, 73] { R20223 += 1, R20179 += 1 };
  s11 -> s11 [74, 65535] { R20223 += 1, R20179 += 1 };
  s12 -> s12 [0, 65535] { R20223 += 1 };
  s12 -> s10 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 72] { R20225 += 1, R20181 += 1, R20123 += 1 };
  s0 -> s2 [0, 72] { R20225 += 1, R20181 += 1, R20122 += 1, R20123 += 1 };
  s0 -> s3 [0, 65535] { R20225 += 1, R20180 += 1, R20181 += 1 };
  s0 -> s0 [0, 65535] { R20224 += 1, R20225 += 1 };
  s0 -> s4 [73, 73] { R20225 += 1, R20181 += 1, R20122 += 1, R20123 += 1 };
  s0 -> s5 [73, 73] { R20225 += 1, R20181 += 1, R20122 += 1, R20123 += 1 };
  s0 -> s6 [73, 73] { R20225 += 1, R20181 += 1, R20123 += 1 };
  s0 -> s7 [73, 73] { R20225 += 1, R20181 += 1, R20123 += 1 };
  s0 -> s1 [74, 76] { R20225 += 1, R20181 += 1, R20123 += 1 };
  s0 -> s2 [74, 65535] { R20225 += 1, R20181 += 1, R20122 += 1, R20123 += 1 };
  s0 -> s1 [91, 65535] { R20225 += 1, R20181 += 1, R20123 += 1 };
  s1 -> s1 [0, 72] { R20225 += 1, R20181 += 1, R20123 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s1 [0, 65535] { R20225 += 1 };
  s1 -> s6 [73, 73] { R20225 += 1, R20181 += 1 };
  s1 -> s7 [73, 73] { R20225 += 1, R20181 += 1 };
  s1 -> s1 [74, 76] { R20225 += 1, R20181 += 1, R20123 += 1 };
  s1 -> s1 [74, 65535] { R20225 += 1, R20181 += 1 };
  s1 -> s1 [91, 65535] { R20225 += 1, R20181 += 1, R20123 += 1 };
  s2 -> s1 [0, 72] { R20225 += 1, R20181 += 1, R20123 += 1 };
  s2 -> s2 [0, 72] { R20225 += 1, R20181 += 1, R20122 += 1, R20123 += 1 };
  s2 -> s4 [73, 73] { R20225 += 1, R20181 += 1, R20122 += 1, R20123 += 1 };
  s2 -> s5 [73, 73] { R20225 += 1, R20181 += 1, R20122 += 1, R20123 += 1 };
  s2 -> s6 [73, 73] { R20225 += 1, R20181 += 1, R20123 += 1 };
  s2 -> s7 [73, 73] { R20225 += 1, R20181 += 1, R20123 += 1 };
  s2 -> s1 [74, 76] { R20225 += 1, R20181 += 1, R20123 += 1 };
  s2 -> s2 [74, 65535] { R20225 += 1, R20181 += 1, R20122 += 1, R20123 += 1 };
  s2 -> s1 [91, 65535] { R20225 += 1, R20181 += 1, R20123 += 1 };
  s3 -> s1 [0, 72] { R20225 += 1, R20181 += 1, R20123 += 1 };
  s3 -> s2 [0, 72] { R20225 += 1, R20181 += 1, R20122 += 1, R20123 += 1 };
  s3 -> s3 [0, 65535] { R20225 += 1, R20180 += 1, R20181 += 1 };
  s3 -> s4 [73, 73] { R20225 += 1, R20181 += 1, R20122 += 1, R20123 += 1 };
  s3 -> s5 [73, 73] { R20225 += 1, R20181 += 1, R20122 += 1, R20123 += 1 };
  s3 -> s6 [73, 73] { R20225 += 1, R20181 += 1, R20123 += 1 };
  s3 -> s7 [73, 73] { R20225 += 1, R20181 += 1, R20123 += 1 };
  s3 -> s1 [74, 76] { R20225 += 1, R20181 += 1, R20123 += 1 };
  s3 -> s2 [74, 65535] { R20225 += 1, R20181 += 1, R20122 += 1, R20123 += 1 };
  s3 -> s1 [91, 65535] { R20225 += 1, R20181 += 1, R20123 += 1 };
  s5 -> s6 [0, 76] { R20225 += 1, R20181 += 1, R20123 += 1 };
  s5 -> s5 [0, 65535] { R20225 += 1, R20181 += 1, R20122 += 1, R20123 += 1 };
  s5 -> s6 [91, 65535] { R20225 += 1, R20181 += 1, R20123 += 1 };
  s6 -> s6 [0, 76] { R20225 += 1, R20181 += 1, R20123 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R20225 += 1, R20181 += 1 };
  s6 -> s9 [0, 65535] { R20225 += 1 };
  s6 -> s6 [91, 65535] { R20225 += 1, R20181 += 1, R20123 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R20225 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R20225 += 1 };
  accepting s8, s9, s6, s1, s7;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
synchronised {  // Automata constraining P54
automaton P54_0 {
  init s0;
  s0 -> s1 [109, 109];
  accepting s1;
};
};
