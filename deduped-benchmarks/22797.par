// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R11522, R11523, R11524, R11525, R12, R17, R18, R19, R19158, R19159, R19160, R19161, R19162, R19163, R19164, R19165, R19166, R19167, R2, R20, R20012, R20013, R20014, R20015, R20016, R20017, R20018, R20019, R20020, R20021, R20022, R20023, R20024, R20025, R20026, R20027, R20028, R20029, R20030, R20031, R20032, R20033, R20034, R20035, R20036, R20037, R20038, R20039, R20040, R20041, R20042, R20043, R20044, R20045, R20046, R20047, R20048, R20049, R20050, R20051, R20052, R20053, R20054, R20055, R20056, R20057, R20058, R20059, R20060, R20061, R20062, R20063, R20064, R20065, R20066, R20067, R20068, R20069, R20070, R20071, R20072, R20073, R20074, R20075, R20076, R20077, R20078, R20079, R20080, R20081, R20082, R20083, R20084, R20085, R20086, R20087, R20088, R20089, R20090, R20091, R20092, R20093, R20094, R20095, R20096, R20097, R20098, R20099, R20100, R20101, R20102, R20103, R20104, R20105, R20106, R20107, R20108, R20109, R20110, R20111, R20112, R20113, R20114, R20115, R20116, R20117, R20118, R20119, R20120, R20121, R21, R22, R23, R24, R25, R26, R27, R3, R38, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 72];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [73, 73];
  s0 -> s1 [74, 65535];
  s1 -> s1 [0, 72];
  s1 -> s2 [73, 73];
  s1 -> s1 [74, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R21 += 1 };
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R25 += 1 };
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R20043 += 1, R19 += 1 };
  s0 -> s0 [0, 65535] { R20042 += 1, R20043 += 1 };
  s1 -> s1 [0, 65535] { R20043 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 72] { R20045 += 1 };
  s0 -> s0 [0, 65535] { R20044 += 1, R20045 += 1 };
  s0 -> s2 [73, 73] { R20045 += 1 };
  s0 -> s3 [73, 73] { R20045 += 1 };
  s0 -> s1 [78, 65535] { R20045 += 1 };
  s1 -> s1 [0, 72] { R20045 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R20045 += 1 };
  s1 -> s3 [73, 73] { R20045 += 1 };
  s1 -> s1 [78, 65535] { R20045 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 73] { R20045 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [78, 65535] { R20045 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 72] { R20047 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R20046 += 1, R20047 += 1 };
  s0 -> s2 [73, 73] { R20047 += 1, R38 += 1 };
  s0 -> s3 [73, 73] { R20047 += 1, R38 += 1 };
  s0 -> s1 [74, 65535] { R20047 += 1, R38 += 1 };
  s1 -> s1 [0, 72] { R20047 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R20047 += 1, R38 += 1 };
  s1 -> s3 [73, 73] { R20047 += 1, R38 += 1 };
  s1 -> s1 [74, 65535] { R20047 += 1, R38 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R20047 += 1, R38 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 72] { R20049 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R20048 += 1, R20049 += 1 };
  s0 -> s2 [73, 73] { R20049 += 1, R40 += 1 };
  s0 -> s3 [73, 73] { R20049 += 1, R40 += 1 };
  s0 -> s1 [74, 65535] { R20049 += 1, R40 += 1 };
  s1 -> s1 [0, 72] { R20049 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R20049 += 1, R40 += 1 };
  s1 -> s3 [73, 73] { R20049 += 1, R40 += 1 };
  s1 -> s1 [74, 65535] { R20049 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R20049 += 1, R40 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 72] { R20051 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R20050 += 1, R20051 += 1 };
  s0 -> s2 [73, 73] { R20051 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [73, 73] { R20051 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [74, 65535] { R20051 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 72] { R20051 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R20051 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [73, 73] { R20051 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [74, 65535] { R20051 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535] { R20051 += 1, R42 += 1, R43 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 72] { R20053 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R20052 += 1, R20053 += 1 };
  s0 -> s2 [73, 73] { R20053 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [73, 73] { R20053 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [74, 65535] { R20053 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 72] { R20053 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R20053 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [73, 73] { R20053 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [74, 65535] { R20053 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535] { R20053 += 1, R46 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 72] { R20055 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R20054 += 1, R20055 += 1 };
  s0 -> s2 [73, 73] { R20055 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [73, 73] { R20055 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [74, 65535] { R20055 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 72] { R20055 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R20055 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [73, 73] { R20055 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [74, 65535] { R20055 += 1, R52 += 1, R53 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R20055 += 1, R52 += 1, R53 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 72] { R20057 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R20056 += 1, R20057 += 1 };
  s0 -> s2 [73, 73] { R20057 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [73, 73] { R20057 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [74, 65535] { R20057 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 72] { R20057 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R20057 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [73, 73] { R20057 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [74, 65535] { R20057 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R20057 += 1, R56 += 1, R57 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 72] { R20059 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R20058 += 1, R20059 += 1 };
  s0 -> s2 [73, 73] { R20059 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [73, 73] { R20059 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [74, 65535] { R20059 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 72] { R20059 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R20059 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [73, 73] { R20059 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [74, 65535] { R20059 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R20059 += 1, R62 += 1, R63 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 72] { R20079 += 1 };
  s0 -> s0 [0, 65535] { R20078 += 1, R20079 += 1 };
  s0 -> s2 [73, 73] { R20079 += 1 };
  s0 -> s1 [74, 65535] { R20079 += 1 };
  s1 -> s1 [0, 72] { R20079 += 1 };
  s1 -> s2 [73, 73] { R20079 += 1 };
  s1 -> s1 [74, 65535] { R20079 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R20079 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R20081 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R20080 += 1, R20081 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R20081 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 72] { R20083 += 1 };
  s0 -> s2 [0, 65535] { R20083 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R20082 += 1, R20083 += 1 };
  s0 -> s3 [73, 73] { R20083 += 1 };
  s0 -> s1 [74, 65535] { R20083 += 1 };
  s1 -> s1 [0, 72] { R20083 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [73, 73] { R20083 += 1 };
  s1 -> s1 [74, 65535] { R20083 += 1 };
  s2 -> s1 [0, 72] { R20083 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R20083 += 1, R8 += 1 };
  s2 -> s3 [73, 73] { R20083 += 1 };
  s2 -> s1 [74, 65535] { R20083 += 1 };
  s3 -> s3 [0, 65535] { R20083 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 72] { R20085 += 1, R20023 += 1 };
  s0 -> s2 [0, 65535] { R20085 += 1, R20022 += 1, R20023 += 1 };
  s0 -> s0 [0, 65535] { R20084 += 1, R20085 += 1 };
  s0 -> s1 [74, 65535] { R20085 += 1, R20023 += 1 };
  s1 -> s1 [0, 72] { R20085 += 1, R20023 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R20085 += 1 };
  s1 -> s1 [74, 65535] { R20085 += 1, R20023 += 1 };
  s2 -> s1 [0, 72] { R20085 += 1, R20023 += 1 };
  s2 -> s2 [0, 65535] { R20085 += 1, R20022 += 1, R20023 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [74, 65535] { R20085 += 1, R20023 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s0 [0, 65535] { R20086 += 1, R20087 += 1 };
  s0 -> s1 [0, 65535] { R20087 += 1, R20024 += 1, R20025 += 1 };
  s0 -> s2 [0, 65535] { R20087 += 1, R20025 += 1, R17 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R20087 += 1, R20024 += 1, R20025 += 1 };
  s1 -> s2 [0, 65535] { R20087 += 1, R20025 += 1, R17 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R20087 += 1 };
  s2 -> s2 [0, 65535] { R20087 += 1, R20025 += 1, R17 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R20087 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 73] { R20089 += 1, R20027 += 1 };
  s0 -> s0 [0, 65535] { R20088 += 1, R20089 += 1 };
  s0 -> s2 [0, 65535] { R20089 += 1, R20026 += 1, R20027 += 1 };
  s0 -> s1 [77, 65535] { R20089 += 1, R20027 += 1 };
  s1 -> s1 [0, 73] { R20089 += 1, R20027 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R20089 += 1 };
  s1 -> s1 [77, 65535] { R20089 += 1, R20027 += 1 };
  s2 -> s1 [0, 73] { R20089 += 1, R20027 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R20089 += 1, R20026 += 1, R20027 += 1 };
  s2 -> s1 [77, 65535] { R20089 += 1, R20027 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R20091 += 1, R20028 += 1, R20029 += 1 };
  s0 -> s2 [0, 65535] { R20091 += 1, R20029 += 1, R67 += 1 };
  s0 -> s0 [0, 65535] { R20090 += 1, R20091 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R20091 += 1, R20028 += 1, R20029 += 1 };
  s1 -> s2 [0, 65535] { R20091 += 1, R20029 += 1, R67 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R20091 += 1 };
  s2 -> s2 [0, 65535] { R20091 += 1, R20029 += 1, R67 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R20091 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 76] { R20093 += 1, R20031 += 1 };
  s0 -> s0 [0, 65535] { R20092 += 1, R20093 += 1 };
  s0 -> s2 [0, 65535] { R20093 += 1, R20031 += 1, R69 += 1 };
  s0 -> s3 [0, 65535] { R20093 += 1, R20030 += 1, R20031 += 1 };
  s0 -> s1 [78, 65535] { R20093 += 1, R20031 += 1 };
  s1 -> s1 [0, 76] { R20093 += 1, R20031 += 1 };
  s1 -> s1 [0, 65535] { R20093 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [78, 65535] { R20093 += 1, R20031 += 1 };
  s2 -> s1 [0, 76] { R20093 += 1, R20031 += 1 };
  s2 -> s5 [0, 65535] { R20093 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R20093 += 1, R20031 += 1, R69 += 1 };
  s2 -> s1 [78, 65535] { R20093 += 1, R20031 += 1 };
  s3 -> s1 [0, 76] { R20093 += 1, R20031 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R20093 += 1, R20031 += 1, R69 += 1 };
  s3 -> s3 [0, 65535] { R20093 += 1, R20030 += 1, R20031 += 1 };
  s3 -> s1 [78, 65535] { R20093 += 1, R20031 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R20093 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 76] { R20095 += 1, R20033 += 1, R11525 += 1 };
  s0 -> s0 [0, 65535] { R20094 += 1, R20095 += 1 };
  s0 -> s2 [0, 65535] { R20095 += 1, R20032 += 1, R20033 += 1 };
  s0 -> s1 [0, 65535] { R20095 += 1, R20033 += 1 };
  s0 -> s1 [78, 65535] { R20095 += 1, R20033 += 1, R11525 += 1 };
  s1 -> s1 [0, 76] { R20095 += 1, R20033 += 1, R11525 += 1 };
  s1 -> s4 [0, 65535] { R20095 += 1 };
  s1 -> s1 [0, 65535] { R20095 += 1, R20033 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [78, 65535] { R20095 += 1, R20033 += 1, R11525 += 1 };
  s2 -> s1 [0, 76] { R20095 += 1, R20033 += 1, R11525 += 1 };
  s2 -> s2 [0, 65535] { R20095 += 1, R20032 += 1, R20033 += 1 };
  s2 -> s1 [0, 65535] { R20095 += 1, R20033 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [78, 65535] { R20095 += 1, R20033 += 1, R11525 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R20095 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s0 [0, 65535] { R20096 += 1, R20097 += 1 };
  s0 -> s1 [0, 65535] { R20097 += 1, R20035 += 1 };
  s0 -> s2 [0, 65535] { R20097 += 1, R20034 += 1, R20035 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R20097 += 1, R20035 += 1 };
  s1 -> s4 [0, 65535] { R20097 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R20097 += 1, R20035 += 1 };
  s2 -> s2 [0, 65535] { R20097 += 1, R20034 += 1, R20035 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R20097 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 77] { R20099 += 1, R20037 += 1, R19167 += 1 };
  s0 -> s2 [0, 65535] { R20099 += 1, R20036 += 1, R20037 += 1 };
  s0 -> s0 [0, 65535] { R20098 += 1, R20099 += 1 };
  s0 -> s1 [0, 65535] { R20099 += 1, R20037 += 1 };
  s0 -> s1 [90, 65535] { R20099 += 1, R20037 += 1, R19167 += 1 };
  s1 -> s1 [0, 77] { R20099 += 1, R20037 += 1, R19167 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R20099 += 1, R20037 += 1 };
  s1 -> s4 [0, 65535] { R20099 += 1 };
  s1 -> s1 [90, 65535] { R20099 += 1, R20037 += 1, R19167 += 1 };
  s2 -> s1 [0, 77] { R20099 += 1, R20037 += 1, R19167 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R20099 += 1, R20036 += 1, R20037 += 1 };
  s2 -> s1 [0, 65535] { R20099 += 1, R20037 += 1 };
  s2 -> s1 [90, 65535] { R20099 += 1, R20037 += 1, R19167 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R20099 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R20101 += 1, R20038 += 1, R20039 += 1 };
  s0 -> s0 [0, 65535] { R20100 += 1, R20101 += 1 };
  s0 -> s2 [0, 65535] { R20101 += 1, R20039 += 1 };
  s1 -> s1 [0, 65535] { R20101 += 1, R20038 += 1, R20039 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R20101 += 1, R20039 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R20101 += 1, R20039 += 1 };
  s2 -> s4 [0, 65535] { R20101 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R20101 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 76] { R20103 += 1, R20041 += 1, R20021 += 1 };
  s0 -> s2 [0, 65535] { R20103 += 1, R20041 += 1, R20020 += 1, R20021 += 1 };
  s0 -> s3 [0, 65535] { R20103 += 1, R20040 += 1, R20041 += 1 };
  s0 -> s0 [0, 65535] { R20102 += 1, R20103 += 1 };
  s0 -> s4 [77, 77] { R20103 += 1, R20041 += 1, R20021 += 1 };
  s0 -> s5 [77, 77] { R20103 += 1, R20041 += 1, R20021 += 1 };
  s0 -> s1 [91, 65535] { R20103 += 1, R20041 += 1, R20021 += 1 };
  s1 -> s1 [0, 76] { R20103 += 1, R20041 += 1, R20021 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R20103 += 1 };
  s1 -> s1 [0, 65535] { R20103 += 1, R20041 += 1 };
  s1 -> s4 [77, 77] { R20103 += 1, R20041 += 1, R20021 += 1 };
  s1 -> s5 [77, 77] { R20103 += 1, R20041 += 1, R20021 += 1 };
  s1 -> s1 [91, 65535] { R20103 += 1, R20041 += 1, R20021 += 1 };
  s2 -> s1 [0, 76] { R20103 += 1, R20041 += 1, R20021 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s7 [0, 65535] { R20103 += 1 };
  s2 -> s2 [0, 65535] { R20103 += 1, R20041 += 1, R20020 += 1, R20021 += 1 };
  s2 -> s4 [77, 77] { R20103 += 1, R20041 += 1, R20021 += 1 };
  s2 -> s5 [77, 77] { R20103 += 1, R20041 += 1, R20021 += 1 };
  s2 -> s1 [91, 65535] { R20103 += 1, R20041 += 1, R20021 += 1 };
  s3 -> s1 [0, 76] { R20103 += 1, R20041 += 1, R20021 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s2 [0, 65535] { R20103 += 1, R20041 += 1, R20020 += 1, R20021 += 1 };
  s3 -> s3 [0, 65535] { R20103 += 1, R20040 += 1, R20041 += 1 };
  s3 -> s4 [77, 77] { R20103 += 1, R20041 += 1, R20021 += 1 };
  s3 -> s5 [77, 77] { R20103 += 1, R20041 += 1, R20021 += 1 };
  s3 -> s1 [91, 65535] { R20103 += 1, R20041 += 1, R20021 += 1 };
  s4 -> s4 [0, 77] { R20103 += 1, R20041 += 1, R20021 += 1 };
  s4 -> s4 [0, 65535] { R20103 += 1, R20041 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R20103 += 1 };
  s4 -> s4 [91, 65535] { R20103 += 1, R20041 += 1, R20021 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R20103 += 1 };
  s5 -> s5 [0, 65535] { R20103 += 1, R20041 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R20103 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R20105 += 1, R20060 += 1, R20061 += 1 };
  s0 -> s2 [0, 65535] { R20105 += 1, R20061 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R20104 += 1, R20105 += 1 };
  s1 -> s1 [0, 65535] { R20105 += 1, R20060 += 1, R20061 += 1 };
  s1 -> s2 [0, 65535] { R20105 += 1, R20061 += 1, R18 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R20105 += 1, R20061 += 1, R18 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R20105 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R20105 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 72] { R20107 += 1, R20063 += 1 };
  s0 -> s0 [0, 65535] { R20106 += 1, R20107 += 1 };
  s0 -> s2 [0, 65535] { R20107 += 1, R20062 += 1, R20063 += 1 };
  s0 -> s3 [73, 73] { R20107 += 1, R20063 += 1 };
  s0 -> s4 [73, 73] { R20107 += 1, R20063 += 1 };
  s0 -> s5 [77, 77] { R20107 += 1, R20063 += 1 };
  s0 -> s1 [78, 65535] { R20107 += 1, R20063 += 1 };
  s1 -> s1 [0, 72] { R20107 += 1, R20063 += 1 };
  s1 -> s3 [73, 73] { R20107 += 1, R20063 += 1 };
  s1 -> s4 [73, 73] { R20107 += 1, R20063 += 1 };
  s1 -> s5 [77, 77] { R20107 += 1, R20063 += 1 };
  s1 -> s1 [78, 65535] { R20107 += 1, R20063 += 1 };
  s2 -> s1 [0, 72] { R20107 += 1, R20063 += 1 };
  s2 -> s2 [0, 65535] { R20107 += 1, R20062 += 1, R20063 += 1 };
  s2 -> s3 [73, 73] { R20107 += 1, R20063 += 1 };
  s2 -> s4 [73, 73] { R20107 += 1, R20063 += 1 };
  s2 -> s5 [77, 77] { R20107 += 1, R20063 += 1 };
  s2 -> s1 [78, 65535] { R20107 += 1, R20063 += 1 };
  s3 -> s3 [0, 73] { R20107 += 1, R20063 += 1 };
  s3 -> s7 [77, 77] { R20107 += 1, R20063 += 1 };
  s3 -> s3 [78, 65535] { R20107 += 1, R20063 += 1 };
  s5 -> s5 [0, 72] { R20107 += 1, R20063 += 1 };
  s5 -> s5 [0, 65535] { R20107 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [73, 73] { R20107 += 1, R20063 += 1 };
  s5 -> s8 [73, 73] { R20107 += 1, R20063 += 1 };
  s5 -> s5 [77, 65535] { R20107 += 1, R20063 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 73] { R20107 += 1, R20063 += 1 };
  s7 -> s7 [0, 65535] { R20107 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [77, 65535] { R20107 += 1, R20063 += 1 };
  s8 -> s8 [0, 65535] { R20107 += 1 };
  s8 -> s6 [0, 65535];
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 72] { R20109 += 1, R20065 += 1, R66 += 1 };
  s0 -> s2 [0, 65535] { R20109 += 1, R20064 += 1, R20065 += 1 };
  s0 -> s0 [0, 65535] { R20108 += 1, R20109 += 1 };
  s0 -> s3 [73, 73] { R20109 += 1, R20065 += 1, R66 += 1 };
  s0 -> s4 [73, 73] { R20109 += 1, R20065 += 1, R66 += 1 };
  s0 -> s1 [74, 65535] { R20109 += 1, R20065 += 1, R66 += 1 };
  s1 -> s1 [0, 72] { R20109 += 1, R20065 += 1, R66 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R20109 += 1 };
  s1 -> s3 [73, 73] { R20109 += 1, R20065 += 1, R66 += 1 };
  s1 -> s4 [73, 73] { R20109 += 1, R20065 += 1, R66 += 1 };
  s1 -> s1 [74, 65535] { R20109 += 1, R20065 += 1, R66 += 1 };
  s2 -> s1 [0, 72] { R20109 += 1, R20065 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R20109 += 1, R20064 += 1, R20065 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R20109 += 1, R20065 += 1, R66 += 1 };
  s2 -> s4 [73, 73] { R20109 += 1, R20065 += 1, R66 += 1 };
  s2 -> s1 [74, 65535] { R20109 += 1, R20065 += 1, R66 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R20109 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R20109 += 1, R20065 += 1, R66 += 1 };
  s4 -> s6 [0, 65535] { R20109 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R20109 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 72] { R20111 += 1, R20067 += 1, R68 += 1 };
  s0 -> s2 [0, 65535] { R20111 += 1, R20066 += 1, R20067 += 1 };
  s0 -> s0 [0, 65535] { R20110 += 1, R20111 += 1 };
  s0 -> s3 [73, 73] { R20111 += 1, R20067 += 1, R68 += 1 };
  s0 -> s4 [73, 73] { R20111 += 1, R20067 += 1, R68 += 1 };
  s0 -> s1 [74, 65535] { R20111 += 1, R20067 += 1, R68 += 1 };
  s1 -> s1 [0, 72] { R20111 += 1, R20067 += 1, R68 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R20111 += 1 };
  s1 -> s3 [73, 73] { R20111 += 1, R20067 += 1, R68 += 1 };
  s1 -> s4 [73, 73] { R20111 += 1, R20067 += 1, R68 += 1 };
  s1 -> s1 [74, 65535] { R20111 += 1, R20067 += 1, R68 += 1 };
  s2 -> s1 [0, 72] { R20111 += 1, R20067 += 1, R68 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R20111 += 1, R20066 += 1, R20067 += 1 };
  s2 -> s3 [73, 73] { R20111 += 1, R20067 += 1, R68 += 1 };
  s2 -> s4 [73, 73] { R20111 += 1, R20067 += 1, R68 += 1 };
  s2 -> s1 [74, 65535] { R20111 += 1, R20067 += 1, R68 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R20111 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R20111 += 1 };
  s4 -> s4 [0, 65535] { R20111 += 1, R20067 += 1, R68 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R20111 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 72] { R20113 += 1, R20069 += 1, R11523 += 1 };
  s0 -> s2 [0, 72] { R20113 += 1, R20069 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s3 [0, 65535] { R20113 += 1, R20068 += 1, R20069 += 1 };
  s0 -> s0 [0, 65535] { R20112 += 1, R20113 += 1 };
  s0 -> s4 [73, 73] { R20113 += 1, R20069 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s5 [73, 73] { R20113 += 1, R20069 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s6 [73, 73] { R20113 += 1, R20069 += 1, R11523 += 1 };
  s0 -> s7 [73, 73] { R20113 += 1, R20069 += 1, R11523 += 1 };
  s0 -> s1 [74, 76] { R20113 += 1, R20069 += 1, R11523 += 1 };
  s0 -> s2 [74, 65535] { R20113 += 1, R20069 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s1 [78, 65535] { R20113 += 1, R20069 += 1, R11523 += 1 };
  s1 -> s1 [0, 72] { R20113 += 1, R20069 += 1, R11523 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s1 [0, 65535] { R20113 += 1 };
  s1 -> s6 [73, 73] { R20113 += 1, R20069 += 1 };
  s1 -> s7 [73, 73] { R20113 += 1, R20069 += 1 };
  s1 -> s1 [74, 76] { R20113 += 1, R20069 += 1, R11523 += 1 };
  s1 -> s1 [74, 65535] { R20113 += 1, R20069 += 1 };
  s1 -> s1 [78, 65535] { R20113 += 1, R20069 += 1, R11523 += 1 };
  s2 -> s1 [0, 72] { R20113 += 1, R20069 += 1, R11523 += 1 };
  s2 -> s2 [0, 72] { R20113 += 1, R20069 += 1, R11522 += 1, R11523 += 1 };
  s2 -> s4 [73, 73] { R20113 += 1, R20069 += 1, R11522 += 1, R11523 += 1 };
  s2 -> s5 [73, 73] { R20113 += 1, R20069 += 1, R11522 += 1, R11523 += 1 };
  s2 -> s6 [73, 73] { R20113 += 1, R20069 += 1, R11523 += 1 };
  s2 -> s7 [73, 73] { R20113 += 1, R20069 += 1, R11523 += 1 };
  s2 -> s1 [74, 76] { R20113 += 1, R20069 += 1, R11523 += 1 };
  s2 -> s2 [74, 65535] { R20113 += 1, R20069 += 1, R11522 += 1, R11523 += 1 };
  s2 -> s1 [78, 65535] { R20113 += 1, R20069 += 1, R11523 += 1 };
  s3 -> s1 [0, 72] { R20113 += 1, R20069 += 1, R11523 += 1 };
  s3 -> s2 [0, 72] { R20113 += 1, R20069 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s3 [0, 65535] { R20113 += 1, R20068 += 1, R20069 += 1 };
  s3 -> s4 [73, 73] { R20113 += 1, R20069 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s5 [73, 73] { R20113 += 1, R20069 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s6 [73, 73] { R20113 += 1, R20069 += 1, R11523 += 1 };
  s3 -> s7 [73, 73] { R20113 += 1, R20069 += 1, R11523 += 1 };
  s3 -> s1 [74, 76] { R20113 += 1, R20069 += 1, R11523 += 1 };
  s3 -> s2 [74, 65535] { R20113 += 1, R20069 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s1 [78, 65535] { R20113 += 1, R20069 += 1, R11523 += 1 };
  s4 -> s6 [0, 76] { R20113 += 1, R20069 += 1, R11523 += 1 };
  s4 -> s4 [0, 65535] { R20113 += 1, R20069 += 1, R11522 += 1, R11523 += 1 };
  s4 -> s6 [78, 65535] { R20113 += 1, R20069 += 1, R11523 += 1 };
  s6 -> s6 [0, 76] { R20113 += 1, R20069 += 1, R11523 += 1 };
  s6 -> s6 [0, 65535] { R20113 += 1, R20069 += 1 };
  s6 -> s9 [0, 65535] { R20113 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [78, 65535] { R20113 += 1, R20069 += 1, R11523 += 1 };
  s7 -> s7 [0, 65535] { R20113 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R20113 += 1 };
  s9 -> s8 [0, 65535];
  accepting s8, s9, s6, s1, s7;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 72] { R20115 += 1, R20071 += 1, R19158 += 1, R19159 += 1 };
  s0 -> s2 [0, 72] { R20115 += 1, R20071 += 1, R19159 += 1, R19160 += 1 };
  s0 -> s3 [0, 65535] { R20115 += 1, R20070 += 1, R20071 += 1 };
  s0 -> s0 [0, 65535] { R20114 += 1, R20115 += 1 };
  s0 -> s4 [73, 73] { R20115 += 1, R20071 += 1, R19158 += 1, R19159 += 1 };
  s0 -> s5 [73, 73] { R20115 += 1, R20071 += 1, R19159 += 1, R19160 += 1 };
  s0 -> s6 [73, 73] { R20115 += 1, R20071 += 1, R19158 += 1, R19159 += 1 };
  s0 -> s7 [73, 73] { R20115 += 1, R20071 += 1, R19159 += 1, R19160 += 1 };
  s0 -> s1 [74, 65535] { R20115 += 1, R20071 += 1, R19158 += 1, R19159 += 1 };
  s0 -> s2 [74, 65535] { R20115 += 1, R20071 += 1, R19159 += 1, R19160 += 1 };
  s1 -> s1 [0, 72] { R20115 += 1, R20071 += 1, R19158 += 1, R19159 += 1 };
  s1 -> s2 [0, 72] { R20115 += 1, R20071 += 1, R19159 += 1, R19160 += 1 };
  s1 -> s4 [73, 73] { R20115 += 1, R20071 += 1, R19158 += 1, R19159 += 1 };
  s1 -> s5 [73, 73] { R20115 += 1, R20071 += 1, R19159 += 1, R19160 += 1 };
  s1 -> s6 [73, 73] { R20115 += 1, R20071 += 1, R19158 += 1, R19159 += 1 };
  s1 -> s7 [73, 73] { R20115 += 1, R20071 += 1, R19159 += 1, R19160 += 1 };
  s1 -> s1 [74, 65535] { R20115 += 1, R20071 += 1, R19158 += 1, R19159 += 1 };
  s1 -> s2 [74, 65535] { R20115 += 1, R20071 += 1, R19159 += 1, R19160 += 1 };
  s2 -> s2 [0, 72] { R20115 += 1, R20071 += 1, R19159 += 1, R19160 += 1 };
  s2 -> s11 [0, 72] { R20115 += 1, R20071 += 1 };
  s2 -> s5 [73, 73] { R20115 += 1, R20071 += 1, R19159 += 1, R19160 += 1 };
  s2 -> s7 [73, 73] { R20115 += 1, R20071 += 1, R19159 += 1, R19160 += 1 };
  s2 -> s12 [73, 73] { R20115 += 1, R20071 += 1 };
  s2 -> s8 [73, 73] { R20115 += 1, R20071 += 1 };
  s2 -> s2 [74, 65535] { R20115 += 1, R20071 += 1, R19159 += 1, R19160 += 1 };
  s2 -> s11 [74, 65535] { R20115 += 1, R20071 += 1 };
  s3 -> s1 [0, 72] { R20115 += 1, R20071 += 1, R19158 += 1, R19159 += 1 };
  s3 -> s2 [0, 72] { R20115 += 1, R20071 += 1, R19159 += 1, R19160 += 1 };
  s3 -> s3 [0, 65535] { R20115 += 1, R20070 += 1, R20071 += 1 };
  s3 -> s4 [73, 73] { R20115 += 1, R20071 += 1, R19158 += 1, R19159 += 1 };
  s3 -> s5 [73, 73] { R20115 += 1, R20071 += 1, R19159 += 1, R19160 += 1 };
  s3 -> s6 [73, 73] { R20115 += 1, R20071 += 1, R19158 += 1, R19159 += 1 };
  s3 -> s7 [73, 73] { R20115 += 1, R20071 += 1, R19159 += 1, R19160 += 1 };
  s3 -> s1 [74, 65535] { R20115 += 1, R20071 += 1, R19158 += 1, R19159 += 1 };
  s3 -> s2 [74, 65535] { R20115 += 1, R20071 += 1, R19159 += 1, R19160 += 1 };
  s6 -> s6 [0, 65535] { R20115 += 1, R20071 += 1, R19158 += 1, R19159 += 1 };
  s6 -> s7 [0, 65535] { R20115 += 1, R20071 += 1, R19159 += 1, R19160 += 1 };
  s7 -> s7 [0, 65535] { R20115 += 1, R20071 += 1, R19159 += 1, R19160 += 1 };
  s7 -> s8 [0, 65535] { R20115 += 1, R20071 += 1 };
  s8 -> s9 [0, 65535] { R20115 += 1 };
  s8 -> s10 [0, 65535];
  s8 -> s8 [0, 65535] { R20115 += 1, R20071 += 1 };
  s9 -> s9 [0, 65535] { R20115 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s11 [0, 72] { R20115 += 1, R20071 += 1 };
  s11 -> s11 [0, 65535] { R20115 += 1 };
  s11 -> s10 [0, 65535];
  s11 -> s12 [73, 73] { R20115 += 1, R20071 += 1 };
  s11 -> s8 [73, 73] { R20115 += 1, R20071 += 1 };
  s11 -> s11 [74, 65535] { R20115 += 1, R20071 += 1 };
  s12 -> s10 [0, 65535];
  s12 -> s12 [0, 65535] { R20115 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 72] { R20117 += 1, R20073 += 1, R19165 += 1 };
  s0 -> s2 [0, 72] { R20117 += 1, R20073 += 1, R19164 += 1, R19165 += 1 };
  s0 -> s0 [0, 65535] { R20116 += 1, R20117 += 1 };
  s0 -> s3 [0, 65535] { R20117 += 1, R20072 += 1, R20073 += 1 };
  s0 -> s4 [73, 73] { R20117 += 1, R20073 += 1, R19164 += 1, R19165 += 1 };
  s0 -> s5 [73, 73] { R20117 += 1, R20073 += 1, R19165 += 1 };
  s0 -> s6 [73, 73] { R20117 += 1, R20073 += 1, R19164 += 1, R19165 += 1 };
  s0 -> s7 [73, 73] { R20117 += 1, R20073 += 1, R19165 += 1 };
  s0 -> s1 [74, 77] { R20117 += 1, R20073 += 1, R19165 += 1 };
  s0 -> s2 [74, 65535] { R20117 += 1, R20073 += 1, R19164 += 1, R19165 += 1 };
  s0 -> s8 [90, 90] { R20117 += 1, R20073 += 1, R19165 += 1 };
  s0 -> s1 [91, 65535] { R20117 += 1, R20073 += 1, R19165 += 1 };
  s1 -> s1 [0, 72] { R20117 += 1, R20073 += 1, R19165 += 1 };
  s1 -> s5 [73, 73] { R20117 += 1, R20073 += 1, R19165 += 1 };
  s1 -> s7 [73, 73] { R20117 += 1, R20073 += 1, R19165 += 1 };
  s1 -> s1 [74, 77] { R20117 += 1, R20073 += 1, R19165 += 1 };
  s1 -> s8 [90, 90] { R20117 += 1, R20073 += 1, R19165 += 1 };
  s1 -> s1 [91, 65535] { R20117 += 1, R20073 += 1, R19165 += 1 };
  s2 -> s1 [0, 72] { R20117 += 1, R20073 += 1, R19165 += 1 };
  s2 -> s2 [0, 72] { R20117 += 1, R20073 += 1, R19164 += 1, R19165 += 1 };
  s2 -> s4 [73, 73] { R20117 += 1, R20073 += 1, R19164 += 1, R19165 += 1 };
  s2 -> s5 [73, 73] { R20117 += 1, R20073 += 1, R19165 += 1 };
  s2 -> s6 [73, 73] { R20117 += 1, R20073 += 1, R19164 += 1, R19165 += 1 };
  s2 -> s7 [73, 73] { R20117 += 1, R20073 += 1, R19165 += 1 };
  s2 -> s1 [74, 77] { R20117 += 1, R20073 += 1, R19165 += 1 };
  s2 -> s2 [74, 65535] { R20117 += 1, R20073 += 1, R19164 += 1, R19165 += 1 };
  s2 -> s8 [90, 90] { R20117 += 1, R20073 += 1, R19165 += 1 };
  s2 -> s1 [91, 65535] { R20117 += 1, R20073 += 1, R19165 += 1 };
  s3 -> s1 [0, 72] { R20117 += 1, R20073 += 1, R19165 += 1 };
  s3 -> s2 [0, 72] { R20117 += 1, R20073 += 1, R19164 += 1, R19165 += 1 };
  s3 -> s3 [0, 65535] { R20117 += 1, R20072 += 1, R20073 += 1 };
  s3 -> s4 [73, 73] { R20117 += 1, R20073 += 1, R19164 += 1, R19165 += 1 };
  s3 -> s5 [73, 73] { R20117 += 1, R20073 += 1, R19165 += 1 };
  s3 -> s6 [73, 73] { R20117 += 1, R20073 += 1, R19164 += 1, R19165 += 1 };
  s3 -> s7 [73, 73] { R20117 += 1, R20073 += 1, R19165 += 1 };
  s3 -> s1 [74, 77] { R20117 += 1, R20073 += 1, R19165 += 1 };
  s3 -> s2 [74, 65535] { R20117 += 1, R20073 += 1, R19164 += 1, R19165 += 1 };
  s3 -> s8 [90, 90] { R20117 += 1, R20073 += 1, R19165 += 1 };
  s3 -> s1 [91, 65535] { R20117 += 1, R20073 += 1, R19165 += 1 };
  s6 -> s7 [0, 77] { R20117 += 1, R20073 += 1, R19165 += 1 };
  s6 -> s6 [0, 65535] { R20117 += 1, R20073 += 1, R19164 += 1, R19165 += 1 };
  s6 -> s10 [90, 90] { R20117 += 1, R20073 += 1, R19165 += 1 };
  s6 -> s7 [91, 65535] { R20117 += 1, R20073 += 1, R19165 += 1 };
  s7 -> s7 [0, 77] { R20117 += 1, R20073 += 1, R19165 += 1 };
  s7 -> s10 [90, 90] { R20117 += 1, R20073 += 1, R19165 += 1 };
  s7 -> s7 [91, 65535] { R20117 += 1, R20073 += 1, R19165 += 1 };
  s8 -> s8 [0, 72] { R20117 += 1, R20073 += 1, R19165 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R20117 += 1 };
  s8 -> s10 [73, 73] { R20117 += 1, R20073 += 1 };
  s8 -> s11 [73, 73] { R20117 += 1, R20073 += 1 };
  s8 -> s8 [74, 77] { R20117 += 1, R20073 += 1, R19165 += 1 };
  s8 -> s8 [74, 65535] { R20117 += 1, R20073 += 1 };
  s8 -> s8 [90, 65535] { R20117 += 1, R20073 += 1, R19165 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 77] { R20117 += 1, R20073 += 1, R19165 += 1 };
  s10 -> s10 [0, 65535] { R20117 += 1, R20073 += 1 };
  s10 -> s9 [0, 65535];
  s10 -> s12 [0, 65535] { R20117 += 1 };
  s10 -> s10 [90, 65535] { R20117 += 1, R20073 += 1, R19165 += 1 };
  s11 -> s11 [0, 65535] { R20117 += 1 };
  s11 -> s9 [0, 65535];
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R20117 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 72] { R20119 += 1, R20075 += 1, R20013 += 1, R20014 += 1 };
  s0 -> s2 [0, 72] { R20119 += 1, R20075 += 1, R20012 += 1, R20013 += 1 };
  s0 -> s0 [0, 65535] { R20118 += 1, R20119 += 1 };
  s0 -> s3 [0, 65535] { R20119 += 1, R20074 += 1, R20075 += 1 };
  s0 -> s4 [73, 73] { R20119 += 1, R20075 += 1, R20012 += 1, R20013 += 1 };
  s0 -> s5 [73, 73] { R20119 += 1, R20075 += 1, R20012 += 1, R20013 += 1 };
  s0 -> s6 [73, 73] { R20119 += 1, R20075 += 1, R20013 += 1, R20014 += 1 };
  s0 -> s7 [73, 73] { R20119 += 1, R20075 += 1, R20013 += 1, R20014 += 1 };
  s0 -> s1 [74, 65535] { R20119 += 1, R20075 += 1, R20013 += 1, R20014 += 1 };
  s0 -> s2 [74, 65535] { R20119 += 1, R20075 += 1, R20012 += 1, R20013 += 1 };
  s1 -> s11 [0, 72] { R20119 += 1, R20075 += 1 };
  s1 -> s1 [0, 72] { R20119 += 1, R20075 += 1, R20013 += 1, R20014 += 1 };
  s1 -> s8 [73, 73] { R20119 += 1, R20075 += 1 };
  s1 -> s6 [73, 73] { R20119 += 1, R20075 += 1, R20013 += 1, R20014 += 1 };
  s1 -> s7 [73, 73] { R20119 += 1, R20075 += 1, R20013 += 1, R20014 += 1 };
  s1 -> s12 [73, 73] { R20119 += 1, R20075 += 1 };
  s1 -> s11 [74, 65535] { R20119 += 1, R20075 += 1 };
  s1 -> s1 [74, 65535] { R20119 += 1, R20075 += 1, R20013 += 1, R20014 += 1 };
  s2 -> s1 [0, 72] { R20119 += 1, R20075 += 1, R20013 += 1, R20014 += 1 };
  s2 -> s2 [0, 72] { R20119 += 1, R20075 += 1, R20012 += 1, R20013 += 1 };
  s2 -> s4 [73, 73] { R20119 += 1, R20075 += 1, R20012 += 1, R20013 += 1 };
  s2 -> s5 [73, 73] { R20119 += 1, R20075 += 1, R20012 += 1, R20013 += 1 };
  s2 -> s6 [73, 73] { R20119 += 1, R20075 += 1, R20013 += 1, R20014 += 1 };
  s2 -> s7 [73, 73] { R20119 += 1, R20075 += 1, R20013 += 1, R20014 += 1 };
  s2 -> s1 [74, 65535] { R20119 += 1, R20075 += 1, R20013 += 1, R20014 += 1 };
  s2 -> s2 [74, 65535] { R20119 += 1, R20075 += 1, R20012 += 1, R20013 += 1 };
  s3 -> s1 [0, 72] { R20119 += 1, R20075 += 1, R20013 += 1, R20014 += 1 };
  s3 -> s2 [0, 72] { R20119 += 1, R20075 += 1, R20012 += 1, R20013 += 1 };
  s3 -> s3 [0, 65535] { R20119 += 1, R20074 += 1, R20075 += 1 };
  s3 -> s4 [73, 73] { R20119 += 1, R20075 += 1, R20012 += 1, R20013 += 1 };
  s3 -> s5 [73, 73] { R20119 += 1, R20075 += 1, R20012 += 1, R20013 += 1 };
  s3 -> s6 [73, 73] { R20119 += 1, R20075 += 1, R20013 += 1, R20014 += 1 };
  s3 -> s7 [73, 73] { R20119 += 1, R20075 += 1, R20013 += 1, R20014 += 1 };
  s3 -> s1 [74, 65535] { R20119 += 1, R20075 += 1, R20013 += 1, R20014 += 1 };
  s3 -> s2 [74, 65535] { R20119 += 1, R20075 += 1, R20012 += 1, R20013 += 1 };
  s4 -> s4 [0, 65535] { R20119 += 1, R20075 += 1, R20012 += 1, R20013 += 1 };
  s4 -> s6 [0, 65535] { R20119 += 1, R20075 += 1, R20013 += 1, R20014 += 1 };
  s6 -> s8 [0, 65535] { R20119 += 1, R20075 += 1 };
  s6 -> s6 [0, 65535] { R20119 += 1, R20075 += 1, R20013 += 1, R20014 += 1 };
  s8 -> s8 [0, 65535] { R20119 += 1, R20075 += 1 };
  s8 -> s9 [0, 65535] { R20119 += 1 };
  s8 -> s10 [0, 65535];
  s9 -> s9 [0, 65535] { R20119 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s11 [0, 72] { R20119 += 1, R20075 += 1 };
  s11 -> s11 [0, 65535] { R20119 += 1 };
  s11 -> s10 [0, 65535];
  s11 -> s8 [73, 73] { R20119 += 1, R20075 += 1 };
  s11 -> s12 [73, 73] { R20119 += 1, R20075 += 1 };
  s11 -> s11 [74, 65535] { R20119 += 1, R20075 += 1 };
  s12 -> s12 [0, 65535] { R20119 += 1 };
  s12 -> s10 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 72] { R20121 += 1, R20077 += 1, R20018 += 1, R20019 += 1 };
  s0 -> s0 [0, 65535] { R20120 += 1, R20121 += 1 };
  s0 -> s2 [0, 65535] { R20121 += 1, R20076 += 1, R20077 += 1 };
  s0 -> s3 [73, 73] { R20121 += 1, R20077 += 1, R20018 += 1, R20019 += 1 };
  s0 -> s4 [73, 73] { R20121 += 1, R20077 += 1, R20018 += 1, R20019 += 1 };
  s0 -> s1 [74, 65535] { R20121 += 1, R20077 += 1, R20018 += 1, R20019 += 1 };
  s1 -> s1 [0, 72] { R20121 += 1, R20077 += 1, R20018 += 1, R20019 += 1 };
  s1 -> s1 [0, 65535] { R20121 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R20121 += 1, R20077 += 1, R20018 += 1, R20019 += 1 };
  s1 -> s4 [73, 73] { R20121 += 1, R20077 += 1, R20018 += 1, R20019 += 1 };
  s1 -> s1 [74, 65535] { R20121 += 1, R20077 += 1, R20018 += 1, R20019 += 1 };
  s2 -> s1 [0, 72] { R20121 += 1, R20077 += 1, R20018 += 1, R20019 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R20121 += 1, R20076 += 1, R20077 += 1 };
  s2 -> s3 [73, 73] { R20121 += 1, R20077 += 1, R20018 += 1, R20019 += 1 };
  s2 -> s4 [73, 73] { R20121 += 1, R20077 += 1, R20018 += 1, R20019 += 1 };
  s2 -> s1 [74, 65535] { R20121 += 1, R20077 += 1, R20018 += 1, R20019 += 1 };
  s3 -> s3 [0, 65535] { R20121 += 1, R20077 += 1, R20018 += 1, R20019 += 1 };
  s3 -> s6 [0, 65535] { R20121 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R20121 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R20121 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
synchronised {  // Automata constraining P54
automaton P54_0 {
  init s0;
  s0 -> s1 [109, 109];
  accepting s1;
};
};
constraint R2 = R20121 && R20 - R20121 = -1 && R21 = R20121 && R22 - R20121 = -1 && R23 = R20121 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R19167 + -1*R19165 - R53 = 0 && R52 + R19166 + R19164 = 0 && R20062 = 0 && R20063 = 0 && R20068 = 0 && R20069 = 0 && R20070 = 0 && R20071 = 0 && R20072 = 0 && R20073 = 0 && R20074 = 0 && R20075 = 0 && R20078 = 0 && R20079 = R20121 && R20080 = 0 && R20081 = R20121 && R20082 = 0 && R20083 = R20121 && R20084 = 0 && R20085 = R20121 && R20086 = 0 && R20087 = R20121 && R20088 = 0 && R20089 = R20121 && R20090 = 0 && R20091 = R20121 && R20092 = 0 && R20093 = R20121 && R20094 = 0 && R20095 = R20121 && R20096 = 0 && R20097 = R20121 && R20098 = 0 && R20099 = R20121 && R20100 = 0 && R20101 = R20121 && R20102 = 0 && R20103 = R20121 && R20104 = 0 && R20105 = R20121 && R20106 = 0 && R20107 = R20121 && R20108 = 0 && R20109 = R20121 && R20110 = 0 && R20111 = R20121 && R20112 = 0 && R20113 = R20121 && R20114 = 0 && R20115 = R20121 && R20116 = 0 && R20117 = R20121 && R20118 = 0 && R20119 = R20121 && R20120 = 0 && -1 < R1 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R19167 + -1*R19165 - R53 < 1 && 0 < R20121 && (R1 != 0 || R17 = 0 || (R20022 = 0 && R20023 = 0)) && (R1 != 0 || R17 = 0 || (R20024 = 0 && R20025 = 0)) && (R1 != 0 || R17 = 0 || (R20026 = 0 && R20027 = 0)) && (R1 != 0 || R17 = 0 || (R20028 = 0 && R20029 = 0)) && (R1 != 0 || R17 = 0 || (R20030 = 0 && R20031 = 0)) && (R1 != 0 || R17 = 0 || (R20032 = 0 && R20033 = 0)) && (R1 != 0 || R17 = 0 || (R20034 = 0 && R20035 = 0)) && (R1 != 0 || R17 = 0 || (R20036 = 0 && R20037 = 0)) && (R1 != 0 || R17 = 0 || (R20038 = 0 && R20039 = 0)) && (R1 != 0 || R17 = 0 || (R20040 = 0 && R20041 = 0)) && (R48 + R19163 + R19160 != 0 || ((R42 + R11524 + R11522 != 0 || R43 + R11525 + R11523 + -1*R19167 + -1*R19165 - R53 = 0 || R53 + R19167 + R19165 < 1) && (R42 + R11524 + R11522 = 0 || R53 + R19167 + R19165 < 1))) && (R48 + R19163 + R19160 != 0 || ((R46 + R19161 + R19158 != 0 || R47 + R19162 + R19159 + -1*R19167 + -1*R19165 - R53 = 0 || R53 + R19167 + R19165 < 1) && (R46 + R19161 + R19158 = 0 || R53 + R19167 + R19165 < 1))) && (R20022 != 0 || R1 = R20023 || R1 < 1) && (R20024 != 0 || R1 = R20025 || R1 < 1) && (R20026 != 0 || R1 = R20027 || R1 < 1) && (R20028 != 0 || R1 = R20029 || R1 < 1) && (R20030 != 0 || R1 = R20031 || R1 < 1) && (R20032 != 0 || R1 = R20033 || R1 < 1) && (R20034 != 0 || R1 = R20035 || R1 < 1) && (R20036 != 0 || R1 = R20037 || R1 < 1) && (R20038 != 0 || R1 = R20039 || R1 < 1) && (R20040 != 0 || R1 = R20041 || R1 < 1) && (R18 = 0 || (R20060 = 0 && R20061 = 0)) && (R18 = 0 || (R20064 = 0 && R20065 = 0)) && (R18 = 0 || (R20066 = 0 && R20067 = 0)) && (R18 = 0 || (R20076 = 0 && R20077 = 0)) && (R19 = 0 || (R20042 = 0 && R20043 = 0)) && (R19 = 0 || (R20044 = 0 && R20045 = 0)) && (R19 = 0 || (R20046 = 0 && R20047 = 0)) && (R19 = 0 || (R20048 = 0 && R20049 = 0)) && (R19 = 0 || (R20050 = 0 && R20051 = 0)) && (R19 = 0 || (R20052 = 0 && R20053 = 0)) && (R19 = 0 || (R20054 = 0 && R20055 = 0)) && (R19 = 0 || (R20056 = 0 && R20057 = 0)) && (R19 = 0 || (R20058 = 0 && R20059 = 0)) && (R48 + R19163 + R19160 = 0 || (R42 + R11524 + R11522 = 0 && R43 + R11525 + R11523 + -1*R19167 + -1*R19165 - R53 = 0)) && (R48 + R19163 + R19160 = 0 || (R46 + R19161 + R19158 = 0 && R47 + R19162 + R19159 + -1*R19167 + -1*R19165 - R53 = 0)) && (R58 + R20017 + R20014 = 0 || (R56 + R20015 + R20012 = 0 && R57 + R20016 + R20013 = 0)) && (R58 + R20017 + R20014 = 0 || (R62 + R20020 + R20018 = 0 && R63 + R20021 + R20019 = 0)) && (R20022 = 0 || R1 < 1) && (R20024 = 0 || R1 < 1) && (R20026 = 0 || R1 < 1) && (R20028 = 0 || R1 < 1) && (R20030 = 0 || R1 < 1) && (R20032 = 0 || R1 < 1) && (R20034 = 0 || R1 < 1) && (R20036 = 0 || R1 < 1) && (R20038 = 0 || R1 < 1) && (R20040 = 0 || R1 < 1);
// End of Parikh automata intersection problem
