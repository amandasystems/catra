// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R1142, R1143, R1144, R1145, R1146, R1147, R1148, R1149, R1150, R1151, R1152, R1153, R1154, R1155, R1156, R1157, R1158, R1159, R1160, R1161, R1162, R1163, R1164, R1165, R1166, R1167, R1168, R1169, R1170, R1171, R1172, R1173, R1174, R1175, R1176, R1177, R1178, R1179, R1180, R1181, R1182, R1183, R1184, R1185, R1186, R1187, R1188, R1189, R1190, R1191, R1192, R1193, R1194, R1195, R1196, R1197, R1198, R1199, R12, R1200, R1201, R1202, R1203, R1204, R1205, R1206, R1207, R1208, R1209, R1210, R1211, R1212, R1213, R1214, R1215, R1216, R1217, R1218, R1219, R1220, R1221, R1222, R1223, R1224, R1225, R1226, R1227, R1228, R1229, R1230, R1231, R1232, R1233, R1234, R1235, R1236, R1237, R1238, R1239, R1240, R1241, R1242, R1243, R1244, R1245, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R70, R71, R72, R73, R74, R75, R76, R77, R78, R79, R8, R80, R81, R82, R83, R928, R929, R930, R931, R932, R933;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 72];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [73, 73];
  s0 -> s1 [74, 65535];
  s1 -> s1 [0, 72];
  s1 -> s2 [73, 73];
  s1 -> s1 [74, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R21 += 1 };
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R25 += 1 };
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R1167 += 1, R19 += 1 };
  s0 -> s0 [0, 65535] { R1166 += 1, R1167 += 1 };
  s1 -> s1 [0, 65535] { R1167 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 72] { R1169 += 1 };
  s0 -> s0 [0, 65535] { R1168 += 1, R1169 += 1 };
  s0 -> s2 [73, 73] { R1169 += 1 };
  s0 -> s3 [73, 73] { R1169 += 1 };
  s0 -> s1 [78, 65535] { R1169 += 1 };
  s1 -> s1 [0, 72] { R1169 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R1169 += 1 };
  s1 -> s3 [73, 73] { R1169 += 1 };
  s1 -> s1 [78, 65535] { R1169 += 1 };
  s2 -> s2 [0, 73] { R1169 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [78, 65535] { R1169 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 72] { R1171 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R1170 += 1, R1171 += 1 };
  s0 -> s2 [73, 73] { R1171 += 1, R38 += 1 };
  s0 -> s3 [73, 73] { R1171 += 1, R38 += 1 };
  s0 -> s1 [74, 65535] { R1171 += 1, R38 += 1 };
  s1 -> s1 [0, 72] { R1171 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R1171 += 1, R38 += 1 };
  s1 -> s3 [73, 73] { R1171 += 1, R38 += 1 };
  s1 -> s1 [74, 65535] { R1171 += 1, R38 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1171 += 1, R38 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 72] { R1173 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R1172 += 1, R1173 += 1 };
  s0 -> s2 [73, 73] { R1173 += 1, R40 += 1 };
  s0 -> s3 [73, 73] { R1173 += 1, R40 += 1 };
  s0 -> s1 [74, 65535] { R1173 += 1, R40 += 1 };
  s1 -> s1 [0, 72] { R1173 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R1173 += 1, R40 += 1 };
  s1 -> s3 [73, 73] { R1173 += 1, R40 += 1 };
  s1 -> s1 [74, 65535] { R1173 += 1, R40 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1173 += 1, R40 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 72] { R1175 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R1174 += 1, R1175 += 1 };
  s0 -> s2 [73, 73] { R1175 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [73, 73] { R1175 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [74, 65535] { R1175 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 72] { R1175 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R1175 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [73, 73] { R1175 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [74, 65535] { R1175 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R1175 += 1, R42 += 1, R43 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 72] { R1177 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R1176 += 1, R1177 += 1 };
  s0 -> s2 [73, 73] { R1177 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [73, 73] { R1177 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [74, 65535] { R1177 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 72] { R1177 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R1177 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [73, 73] { R1177 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [74, 65535] { R1177 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535] { R1177 += 1, R46 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 72] { R1179 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R1178 += 1, R1179 += 1 };
  s0 -> s2 [73, 73] { R1179 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [73, 73] { R1179 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [74, 65535] { R1179 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 72] { R1179 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R1179 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [73, 73] { R1179 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [74, 65535] { R1179 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535] { R1179 += 1, R52 += 1, R53 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 72] { R1181 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R1180 += 1, R1181 += 1 };
  s0 -> s2 [73, 73] { R1181 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [73, 73] { R1181 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [74, 65535] { R1181 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 72] { R1181 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R1181 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [73, 73] { R1181 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [74, 65535] { R1181 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1181 += 1, R56 += 1, R57 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 72] { R1183 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R1182 += 1, R1183 += 1 };
  s0 -> s2 [73, 73] { R1183 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [73, 73] { R1183 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [74, 65535] { R1183 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 72] { R1183 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R1183 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [73, 73] { R1183 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [74, 65535] { R1183 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535] { R1183 += 1, R62 += 1, R63 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 72] { R1203 += 1 };
  s0 -> s0 [0, 65535] { R1202 += 1, R1203 += 1 };
  s0 -> s2 [73, 73] { R1203 += 1 };
  s0 -> s1 [74, 65535] { R1203 += 1 };
  s1 -> s1 [0, 72] { R1203 += 1 };
  s1 -> s2 [73, 73] { R1203 += 1 };
  s1 -> s1 [74, 65535] { R1203 += 1 };
  s2 -> s2 [0, 65535] { R1203 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R1204 += 1, R1205 += 1 };
  s0 -> s1 [0, 65535] { R1205 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R1205 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 72] { R1207 += 1 };
  s0 -> s0 [0, 65535] { R1206 += 1, R1207 += 1 };
  s0 -> s2 [0, 65535] { R1207 += 1, R8 += 1 };
  s0 -> s3 [73, 73] { R1207 += 1 };
  s0 -> s1 [74, 65535] { R1207 += 1 };
  s1 -> s1 [0, 72] { R1207 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [73, 73] { R1207 += 1 };
  s1 -> s1 [74, 65535] { R1207 += 1 };
  s2 -> s1 [0, 72] { R1207 += 1 };
  s2 -> s2 [0, 65535] { R1207 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [73, 73] { R1207 += 1 };
  s2 -> s1 [74, 65535] { R1207 += 1 };
  s3 -> s3 [0, 65535] { R1207 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 72] { R1209 += 1, R1147 += 1 };
  s0 -> s0 [0, 65535] { R1208 += 1, R1209 += 1 };
  s0 -> s2 [0, 65535] { R1209 += 1, R1146 += 1, R1147 += 1 };
  s0 -> s1 [74, 65535] { R1209 += 1, R1147 += 1 };
  s1 -> s1 [0, 72] { R1209 += 1, R1147 += 1 };
  s1 -> s1 [0, 65535] { R1209 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [74, 65535] { R1209 += 1, R1147 += 1 };
  s2 -> s1 [0, 72] { R1209 += 1, R1147 += 1 };
  s2 -> s2 [0, 65535] { R1209 += 1, R1146 += 1, R1147 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [74, 65535] { R1209 += 1, R1147 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R1211 += 1, R1149 += 1, R17 += 1 };
  s0 -> s2 [0, 65535] { R1211 += 1, R1148 += 1, R1149 += 1 };
  s0 -> s0 [0, 65535] { R1210 += 1, R1211 += 1 };
  s1 -> s1 [0, 65535] { R1211 += 1, R1149 += 1, R17 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R1211 += 1 };
  s2 -> s1 [0, 65535] { R1211 += 1, R1149 += 1, R17 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1211 += 1, R1148 += 1, R1149 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1211 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 73] { R1213 += 1, R1151 += 1 };
  s0 -> s2 [0, 65535] { R1213 += 1, R1150 += 1, R1151 += 1 };
  s0 -> s0 [0, 65535] { R1212 += 1, R1213 += 1 };
  s0 -> s1 [77, 65535] { R1213 += 1, R1151 += 1 };
  s1 -> s1 [0, 73] { R1213 += 1, R1151 += 1 };
  s1 -> s1 [0, 65535] { R1213 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [77, 65535] { R1213 += 1, R1151 += 1 };
  s2 -> s1 [0, 73] { R1213 += 1, R1151 += 1 };
  s2 -> s2 [0, 65535] { R1213 += 1, R1150 += 1, R1151 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [77, 65535] { R1213 += 1, R1151 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R1215 += 1, R1152 += 1, R1153 += 1 };
  s0 -> s0 [0, 65535] { R1214 += 1, R1215 += 1 };
  s0 -> s2 [0, 65535] { R1215 += 1, R1153 += 1, R67 += 1 };
  s1 -> s1 [0, 65535] { R1215 += 1, R1152 += 1, R1153 += 1 };
  s1 -> s2 [0, 65535] { R1215 += 1, R1153 += 1, R67 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R1215 += 1 };
  s2 -> s2 [0, 65535] { R1215 += 1, R1153 += 1, R67 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1215 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 76] { R1217 += 1, R1155 += 1 };
  s0 -> s0 [0, 65535] { R1216 += 1, R1217 += 1 };
  s0 -> s2 [0, 65535] { R1217 += 1, R1155 += 1, R69 += 1 };
  s0 -> s3 [0, 65535] { R1217 += 1, R1154 += 1, R1155 += 1 };
  s0 -> s1 [78, 65535] { R1217 += 1, R1155 += 1 };
  s1 -> s1 [0, 76] { R1217 += 1, R1155 += 1 };
  s1 -> s1 [0, 65535] { R1217 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [78, 65535] { R1217 += 1, R1155 += 1 };
  s2 -> s1 [0, 76] { R1217 += 1, R1155 += 1 };
  s2 -> s2 [0, 65535] { R1217 += 1, R1155 += 1, R69 += 1 };
  s2 -> s5 [0, 65535] { R1217 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [78, 65535] { R1217 += 1, R1155 += 1 };
  s3 -> s1 [0, 76] { R1217 += 1, R1155 += 1 };
  s3 -> s2 [0, 65535] { R1217 += 1, R1155 += 1, R69 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1217 += 1, R1154 += 1, R1155 += 1 };
  s3 -> s1 [78, 65535] { R1217 += 1, R1155 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1217 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 76] { R1219 += 1, R1157 += 1, R73 += 1 };
  s0 -> s0 [0, 65535] { R1218 += 1, R1219 += 1 };
  s0 -> s2 [0, 65535] { R1219 += 1, R1157 += 1, R72 += 1, R73 += 1 };
  s0 -> s3 [0, 65535] { R1219 += 1, R1156 += 1, R1157 += 1 };
  s0 -> s1 [78, 65535] { R1219 += 1, R1157 += 1, R73 += 1 };
  s1 -> s1 [0, 76] { R1219 += 1, R1157 += 1, R73 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R1219 += 1 };
  s1 -> s1 [0, 65535] { R1219 += 1, R1157 += 1 };
  s1 -> s1 [78, 65535] { R1219 += 1, R1157 += 1, R73 += 1 };
  s2 -> s1 [0, 76] { R1219 += 1, R1157 += 1, R73 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1219 += 1, R1157 += 1, R72 += 1, R73 += 1 };
  s2 -> s5 [0, 65535] { R1219 += 1 };
  s2 -> s1 [78, 65535] { R1219 += 1, R1157 += 1, R73 += 1 };
  s3 -> s1 [0, 76] { R1219 += 1, R1157 += 1, R73 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R1219 += 1, R1157 += 1, R72 += 1, R73 += 1 };
  s3 -> s3 [0, 65535] { R1219 += 1, R1156 += 1, R1157 += 1 };
  s3 -> s1 [78, 65535] { R1219 += 1, R1157 += 1, R73 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1219 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R1221 += 1, R1158 += 1, R1159 += 1 };
  s0 -> s2 [0, 65535] { R1221 += 1, R1159 += 1, R78 += 1, R79 += 1 };
  s0 -> s0 [0, 65535] { R1220 += 1, R1221 += 1 };
  s0 -> s3 [0, 65535] { R1221 += 1, R1159 += 1, R77 += 1, R78 += 1 };
  s1 -> s1 [0, 65535] { R1221 += 1, R1158 += 1, R1159 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R1221 += 1, R1159 += 1, R78 += 1, R79 += 1 };
  s1 -> s3 [0, 65535] { R1221 += 1, R1159 += 1, R77 += 1, R78 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1221 += 1, R1159 += 1, R78 += 1, R79 += 1 };
  s2 -> s6 [0, 65535] { R1221 += 1, R1159 += 1 };
  s2 -> s5 [0, 65535] { R1221 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R1221 += 1, R1159 += 1, R78 += 1, R79 += 1 };
  s3 -> s3 [0, 65535] { R1221 += 1, R1159 += 1, R77 += 1, R78 += 1 };
  s3 -> s5 [0, 65535] { R1221 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1221 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R1221 += 1, R1159 += 1 };
  s6 -> s5 [0, 65535] { R1221 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 77] { R1223 += 1, R1161 += 1, R83 += 1 };
  s0 -> s2 [0, 65535] { R1223 += 1, R1160 += 1, R1161 += 1 };
  s0 -> s0 [0, 65535] { R1222 += 1, R1223 += 1 };
  s0 -> s1 [0, 65535] { R1223 += 1, R1161 += 1 };
  s0 -> s1 [90, 65535] { R1223 += 1, R1161 += 1, R83 += 1 };
  s1 -> s1 [0, 77] { R1223 += 1, R1161 += 1, R83 += 1 };
  s1 -> s4 [0, 65535] { R1223 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1223 += 1, R1161 += 1 };
  s1 -> s1 [90, 65535] { R1223 += 1, R1161 += 1, R83 += 1 };
  s2 -> s1 [0, 77] { R1223 += 1, R1161 += 1, R83 += 1 };
  s2 -> s2 [0, 65535] { R1223 += 1, R1160 += 1, R1161 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R1223 += 1, R1161 += 1 };
  s2 -> s1 [90, 65535] { R1223 += 1, R1161 += 1, R83 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1223 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R1225 += 1, R1162 += 1, R1163 += 1 };
  s0 -> s0 [0, 65535] { R1224 += 1, R1225 += 1 };
  s0 -> s2 [0, 65535] { R1225 += 1, R1163 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1225 += 1, R1162 += 1, R1163 += 1 };
  s1 -> s2 [0, 65535] { R1225 += 1, R1163 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R1225 += 1 };
  s2 -> s2 [0, 65535] { R1225 += 1, R1163 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1225 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 65535] { R1227 += 1, R1164 += 1, R1165 += 1 };
  s0 -> s0 [0, 65535] { R1226 += 1, R1227 += 1 };
  s0 -> s2 [0, 65535] { R1227 += 1, R1165 += 1 };
  s1 -> s1 [0, 65535] { R1227 += 1, R1164 += 1, R1165 += 1 };
  s1 -> s2 [0, 65535] { R1227 += 1, R1165 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1227 += 1, R1165 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R1227 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1227 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R1229 += 1, R1185 += 1, R18 += 1 };
  s0 -> s2 [0, 65535] { R1229 += 1, R1184 += 1, R1185 += 1 };
  s0 -> s0 [0, 65535] { R1228 += 1, R1229 += 1 };
  s1 -> s1 [0, 65535] { R1229 += 1, R1185 += 1, R18 += 1 };
  s1 -> s4 [0, 65535] { R1229 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R1229 += 1, R1185 += 1, R18 += 1 };
  s2 -> s2 [0, 65535] { R1229 += 1, R1184 += 1, R1185 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1229 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 72] { R1231 += 1, R1187 += 1 };
  s0 -> s0 [0, 65535] { R1230 += 1, R1231 += 1 };
  s0 -> s2 [0, 65535] { R1231 += 1, R1186 += 1, R1187 += 1 };
  s0 -> s3 [73, 73] { R1231 += 1, R1187 += 1 };
  s0 -> s4 [73, 73] { R1231 += 1, R1187 += 1 };
  s0 -> s5 [77, 77] { R1231 += 1, R1187 += 1 };
  s0 -> s1 [78, 65535] { R1231 += 1, R1187 += 1 };
  s1 -> s1 [0, 72] { R1231 += 1, R1187 += 1 };
  s1 -> s3 [73, 73] { R1231 += 1, R1187 += 1 };
  s1 -> s4 [73, 73] { R1231 += 1, R1187 += 1 };
  s1 -> s5 [77, 77] { R1231 += 1, R1187 += 1 };
  s1 -> s1 [78, 65535] { R1231 += 1, R1187 += 1 };
  s2 -> s1 [0, 72] { R1231 += 1, R1187 += 1 };
  s2 -> s2 [0, 65535] { R1231 += 1, R1186 += 1, R1187 += 1 };
  s2 -> s3 [73, 73] { R1231 += 1, R1187 += 1 };
  s2 -> s4 [73, 73] { R1231 += 1, R1187 += 1 };
  s2 -> s5 [77, 77] { R1231 += 1, R1187 += 1 };
  s2 -> s1 [78, 65535] { R1231 += 1, R1187 += 1 };
  s4 -> s4 [0, 73] { R1231 += 1, R1187 += 1 };
  s4 -> s7 [77, 77] { R1231 += 1, R1187 += 1 };
  s4 -> s4 [78, 65535] { R1231 += 1, R1187 += 1 };
  s5 -> s5 [0, 72] { R1231 += 1, R1187 += 1 };
  s5 -> s5 [0, 65535] { R1231 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [73, 73] { R1231 += 1, R1187 += 1 };
  s5 -> s8 [73, 73] { R1231 += 1, R1187 += 1 };
  s5 -> s5 [77, 65535] { R1231 += 1, R1187 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 73] { R1231 += 1, R1187 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R1231 += 1 };
  s7 -> s7 [77, 65535] { R1231 += 1, R1187 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R1231 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 72] { R1233 += 1, R1189 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R1232 += 1, R1233 += 1 };
  s0 -> s2 [0, 65535] { R1233 += 1, R1188 += 1, R1189 += 1 };
  s0 -> s3 [73, 73] { R1233 += 1, R1189 += 1, R66 += 1 };
  s0 -> s4 [73, 73] { R1233 += 1, R1189 += 1, R66 += 1 };
  s0 -> s1 [74, 65535] { R1233 += 1, R1189 += 1, R66 += 1 };
  s1 -> s1 [0, 72] { R1233 += 1, R1189 += 1, R66 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1233 += 1 };
  s1 -> s3 [73, 73] { R1233 += 1, R1189 += 1, R66 += 1 };
  s1 -> s4 [73, 73] { R1233 += 1, R1189 += 1, R66 += 1 };
  s1 -> s1 [74, 65535] { R1233 += 1, R1189 += 1, R66 += 1 };
  s2 -> s1 [0, 72] { R1233 += 1, R1189 += 1, R66 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1233 += 1, R1188 += 1, R1189 += 1 };
  s2 -> s3 [73, 73] { R1233 += 1, R1189 += 1, R66 += 1 };
  s2 -> s4 [73, 73] { R1233 += 1, R1189 += 1, R66 += 1 };
  s2 -> s1 [74, 65535] { R1233 += 1, R1189 += 1, R66 += 1 };
  s3 -> s3 [0, 65535] { R1233 += 1, R1189 += 1, R66 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R1233 += 1 };
  s4 -> s4 [0, 65535] { R1233 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1233 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 72] { R1235 += 1, R1191 += 1, R68 += 1 };
  s0 -> s2 [0, 65535] { R1235 += 1, R1190 += 1, R1191 += 1 };
  s0 -> s0 [0, 65535] { R1234 += 1, R1235 += 1 };
  s0 -> s3 [73, 73] { R1235 += 1, R1191 += 1, R68 += 1 };
  s0 -> s4 [73, 73] { R1235 += 1, R1191 += 1, R68 += 1 };
  s0 -> s1 [74, 65535] { R1235 += 1, R1191 += 1, R68 += 1 };
  s1 -> s1 [0, 72] { R1235 += 1, R1191 += 1, R68 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1235 += 1 };
  s1 -> s3 [73, 73] { R1235 += 1, R1191 += 1, R68 += 1 };
  s1 -> s4 [73, 73] { R1235 += 1, R1191 += 1, R68 += 1 };
  s1 -> s1 [74, 65535] { R1235 += 1, R1191 += 1, R68 += 1 };
  s2 -> s1 [0, 72] { R1235 += 1, R1191 += 1, R68 += 1 };
  s2 -> s2 [0, 65535] { R1235 += 1, R1190 += 1, R1191 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R1235 += 1, R1191 += 1, R68 += 1 };
  s2 -> s4 [73, 73] { R1235 += 1, R1191 += 1, R68 += 1 };
  s2 -> s1 [74, 65535] { R1235 += 1, R1191 += 1, R68 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R1235 += 1, R1191 += 1, R68 += 1 };
  s3 -> s6 [0, 65535] { R1235 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1235 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1235 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 72] { R1237 += 1, R1193 += 1, R70 += 1, R71 += 1 };
  s0 -> s0 [0, 65535] { R1236 += 1, R1237 += 1 };
  s0 -> s2 [0, 65535] { R1237 += 1, R1192 += 1, R1193 += 1 };
  s0 -> s3 [73, 73] { R1237 += 1, R1193 += 1, R70 += 1, R71 += 1 };
  s0 -> s4 [73, 73] { R1237 += 1, R1193 += 1, R70 += 1, R71 += 1 };
  s0 -> s1 [74, 65535] { R1237 += 1, R1193 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 72] { R1237 += 1, R1193 += 1, R70 += 1, R71 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1237 += 1 };
  s1 -> s3 [73, 73] { R1237 += 1, R1193 += 1, R70 += 1, R71 += 1 };
  s1 -> s4 [73, 73] { R1237 += 1, R1193 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [74, 65535] { R1237 += 1, R1193 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [0, 72] { R1237 += 1, R1193 += 1, R70 += 1, R71 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1237 += 1, R1192 += 1, R1193 += 1 };
  s2 -> s3 [73, 73] { R1237 += 1, R1193 += 1, R70 += 1, R71 += 1 };
  s2 -> s4 [73, 73] { R1237 += 1, R1193 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [74, 65535] { R1237 += 1, R1193 += 1, R70 += 1, R71 += 1 };
  s3 -> s6 [0, 65535] { R1237 += 1 };
  s3 -> s3 [0, 65535] { R1237 += 1, R1193 += 1, R70 += 1, R71 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1237 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1237 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 72] { R1239 += 1, R1195 += 1, R74 += 1, R75 += 1 };
  s0 -> s0 [0, 65535] { R1238 += 1, R1239 += 1 };
  s0 -> s2 [0, 65535] { R1239 += 1, R1194 += 1, R1195 += 1 };
  s0 -> s3 [73, 73] { R1239 += 1, R1195 += 1, R74 += 1, R75 += 1 };
  s0 -> s4 [73, 73] { R1239 += 1, R1195 += 1, R74 += 1, R75 += 1 };
  s0 -> s1 [74, 65535] { R1239 += 1, R1195 += 1, R74 += 1, R75 += 1 };
  s1 -> s1 [0, 72] { R1239 += 1, R1195 += 1, R74 += 1, R75 += 1 };
  s1 -> s1 [0, 65535] { R1239 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R1239 += 1, R1195 += 1, R74 += 1, R75 += 1 };
  s1 -> s4 [73, 73] { R1239 += 1, R1195 += 1, R74 += 1, R75 += 1 };
  s1 -> s1 [74, 65535] { R1239 += 1, R1195 += 1, R74 += 1, R75 += 1 };
  s2 -> s1 [0, 72] { R1239 += 1, R1195 += 1, R74 += 1, R75 += 1 };
  s2 -> s2 [0, 65535] { R1239 += 1, R1194 += 1, R1195 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R1239 += 1, R1195 += 1, R74 += 1, R75 += 1 };
  s2 -> s4 [73, 73] { R1239 += 1, R1195 += 1, R74 += 1, R75 += 1 };
  s2 -> s1 [74, 65535] { R1239 += 1, R1195 += 1, R74 += 1, R75 += 1 };
  s3 -> s3 [0, 65535] { R1239 += 1, R1195 += 1, R74 += 1, R75 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R1239 += 1 };
  s4 -> s4 [0, 65535] { R1239 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1239 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 72] { R1241 += 1, R1197 += 1, R80 += 1, R81 += 1 };
  s0 -> s2 [0, 72] { R1241 += 1, R1197 += 1, R81 += 1 };
  s0 -> s0 [0, 65535] { R1240 += 1, R1241 += 1 };
  s0 -> s3 [0, 65535] { R1241 += 1, R1196 += 1, R1197 += 1 };
  s0 -> s4 [73, 73] { R1241 += 1, R1197 += 1, R80 += 1, R81 += 1 };
  s0 -> s5 [73, 73] { R1241 += 1, R1197 += 1, R81 += 1 };
  s0 -> s6 [73, 73] { R1241 += 1, R1197 += 1, R80 += 1, R81 += 1 };
  s0 -> s7 [73, 73] { R1241 += 1, R1197 += 1, R81 += 1 };
  s0 -> s2 [74, 77] { R1241 += 1, R1197 += 1, R81 += 1 };
  s0 -> s1 [74, 65535] { R1241 += 1, R1197 += 1, R80 += 1, R81 += 1 };
  s0 -> s8 [90, 90] { R1241 += 1, R1197 += 1, R81 += 1 };
  s0 -> s2 [91, 65535] { R1241 += 1, R1197 += 1, R81 += 1 };
  s1 -> s1 [0, 72] { R1241 += 1, R1197 += 1, R80 += 1, R81 += 1 };
  s1 -> s2 [0, 72] { R1241 += 1, R1197 += 1, R81 += 1 };
  s1 -> s4 [73, 73] { R1241 += 1, R1197 += 1, R80 += 1, R81 += 1 };
  s1 -> s5 [73, 73] { R1241 += 1, R1197 += 1, R81 += 1 };
  s1 -> s6 [73, 73] { R1241 += 1, R1197 += 1, R80 += 1, R81 += 1 };
  s1 -> s7 [73, 73] { R1241 += 1, R1197 += 1, R81 += 1 };
  s1 -> s2 [74, 77] { R1241 += 1, R1197 += 1, R81 += 1 };
  s1 -> s1 [74, 65535] { R1241 += 1, R1197 += 1, R80 += 1, R81 += 1 };
  s1 -> s8 [90, 90] { R1241 += 1, R1197 += 1, R81 += 1 };
  s1 -> s2 [91, 65535] { R1241 += 1, R1197 += 1, R81 += 1 };
  s2 -> s2 [0, 72] { R1241 += 1, R1197 += 1, R81 += 1 };
  s2 -> s5 [73, 73] { R1241 += 1, R1197 += 1, R81 += 1 };
  s2 -> s7 [73, 73] { R1241 += 1, R1197 += 1, R81 += 1 };
  s2 -> s2 [74, 77] { R1241 += 1, R1197 += 1, R81 += 1 };
  s2 -> s8 [90, 90] { R1241 += 1, R1197 += 1, R81 += 1 };
  s2 -> s2 [91, 65535] { R1241 += 1, R1197 += 1, R81 += 1 };
  s3 -> s1 [0, 72] { R1241 += 1, R1197 += 1, R80 += 1, R81 += 1 };
  s3 -> s2 [0, 72] { R1241 += 1, R1197 += 1, R81 += 1 };
  s3 -> s3 [0, 65535] { R1241 += 1, R1196 += 1, R1197 += 1 };
  s3 -> s4 [73, 73] { R1241 += 1, R1197 += 1, R80 += 1, R81 += 1 };
  s3 -> s5 [73, 73] { R1241 += 1, R1197 += 1, R81 += 1 };
  s3 -> s6 [73, 73] { R1241 += 1, R1197 += 1, R80 += 1, R81 += 1 };
  s3 -> s7 [73, 73] { R1241 += 1, R1197 += 1, R81 += 1 };
  s3 -> s2 [74, 77] { R1241 += 1, R1197 += 1, R81 += 1 };
  s3 -> s1 [74, 65535] { R1241 += 1, R1197 += 1, R80 += 1, R81 += 1 };
  s3 -> s8 [90, 90] { R1241 += 1, R1197 += 1, R81 += 1 };
  s3 -> s2 [91, 65535] { R1241 += 1, R1197 += 1, R81 += 1 };
  s6 -> s7 [0, 77] { R1241 += 1, R1197 += 1, R81 += 1 };
  s6 -> s6 [0, 65535] { R1241 += 1, R1197 += 1, R80 += 1, R81 += 1 };
  s6 -> s10 [90, 90] { R1241 += 1, R1197 += 1, R81 += 1 };
  s6 -> s7 [91, 65535] { R1241 += 1, R1197 += 1, R81 += 1 };
  s7 -> s7 [0, 77] { R1241 += 1, R1197 += 1, R81 += 1 };
  s7 -> s10 [90, 90] { R1241 += 1, R1197 += 1, R81 += 1 };
  s7 -> s7 [91, 65535] { R1241 += 1, R1197 += 1, R81 += 1 };
  s8 -> s8 [0, 72] { R1241 += 1, R1197 += 1, R81 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R1241 += 1 };
  s8 -> s10 [73, 73] { R1241 += 1, R1197 += 1 };
  s8 -> s11 [73, 73] { R1241 += 1, R1197 += 1 };
  s8 -> s8 [74, 77] { R1241 += 1, R1197 += 1, R81 += 1 };
  s8 -> s8 [74, 65535] { R1241 += 1, R1197 += 1 };
  s8 -> s8 [90, 65535] { R1241 += 1, R1197 += 1, R81 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 77] { R1241 += 1, R1197 += 1, R81 += 1 };
  s10 -> s10 [0, 65535] { R1241 += 1, R1197 += 1 };
  s10 -> s9 [0, 65535];
  s10 -> s12 [0, 65535] { R1241 += 1 };
  s10 -> s10 [90, 65535] { R1241 += 1, R1197 += 1, R81 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R1241 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R1241 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 72] { R1243 += 1, R1199 += 1, R929 += 1, R930 += 1 };
  s0 -> s2 [0, 72] { R1243 += 1, R1199 += 1, R928 += 1, R929 += 1 };
  s0 -> s3 [0, 65535] { R1243 += 1, R1198 += 1, R1199 += 1 };
  s0 -> s0 [0, 65535] { R1242 += 1, R1243 += 1 };
  s0 -> s4 [73, 73] { R1243 += 1, R1199 += 1, R929 += 1, R930 += 1 };
  s0 -> s5 [73, 73] { R1243 += 1, R1199 += 1, R928 += 1, R929 += 1 };
  s0 -> s6 [73, 73] { R1243 += 1, R1199 += 1, R929 += 1, R930 += 1 };
  s0 -> s7 [73, 73] { R1243 += 1, R1199 += 1, R928 += 1, R929 += 1 };
  s0 -> s1 [74, 65535] { R1243 += 1, R1199 += 1, R929 += 1, R930 += 1 };
  s0 -> s2 [74, 65535] { R1243 += 1, R1199 += 1, R928 += 1, R929 += 1 };
  s1 -> s1 [0, 72] { R1243 += 1, R1199 += 1, R929 += 1, R930 += 1 };
  s1 -> s11 [0, 72] { R1243 += 1, R1199 += 1 };
  s1 -> s4 [73, 73] { R1243 += 1, R1199 += 1, R929 += 1, R930 += 1 };
  s1 -> s6 [73, 73] { R1243 += 1, R1199 += 1, R929 += 1, R930 += 1 };
  s1 -> s8 [73, 73] { R1243 += 1, R1199 += 1 };
  s1 -> s12 [73, 73] { R1243 += 1, R1199 += 1 };
  s1 -> s1 [74, 65535] { R1243 += 1, R1199 += 1, R929 += 1, R930 += 1 };
  s1 -> s11 [74, 65535] { R1243 += 1, R1199 += 1 };
  s2 -> s1 [0, 72] { R1243 += 1, R1199 += 1, R929 += 1, R930 += 1 };
  s2 -> s2 [0, 72] { R1243 += 1, R1199 += 1, R928 += 1, R929 += 1 };
  s2 -> s4 [73, 73] { R1243 += 1, R1199 += 1, R929 += 1, R930 += 1 };
  s2 -> s5 [73, 73] { R1243 += 1, R1199 += 1, R928 += 1, R929 += 1 };
  s2 -> s6 [73, 73] { R1243 += 1, R1199 += 1, R929 += 1, R930 += 1 };
  s2 -> s7 [73, 73] { R1243 += 1, R1199 += 1, R928 += 1, R929 += 1 };
  s2 -> s1 [74, 65535] { R1243 += 1, R1199 += 1, R929 += 1, R930 += 1 };
  s2 -> s2 [74, 65535] { R1243 += 1, R1199 += 1, R928 += 1, R929 += 1 };
  s3 -> s1 [0, 72] { R1243 += 1, R1199 += 1, R929 += 1, R930 += 1 };
  s3 -> s2 [0, 72] { R1243 += 1, R1199 += 1, R928 += 1, R929 += 1 };
  s3 -> s3 [0, 65535] { R1243 += 1, R1198 += 1, R1199 += 1 };
  s3 -> s4 [73, 73] { R1243 += 1, R1199 += 1, R929 += 1, R930 += 1 };
  s3 -> s5 [73, 73] { R1243 += 1, R1199 += 1, R928 += 1, R929 += 1 };
  s3 -> s6 [73, 73] { R1243 += 1, R1199 += 1, R929 += 1, R930 += 1 };
  s3 -> s7 [73, 73] { R1243 += 1, R1199 += 1, R928 += 1, R929 += 1 };
  s3 -> s1 [74, 65535] { R1243 += 1, R1199 += 1, R929 += 1, R930 += 1 };
  s3 -> s2 [74, 65535] { R1243 += 1, R1199 += 1, R928 += 1, R929 += 1 };
  s4 -> s4 [0, 65535] { R1243 += 1, R1199 += 1, R929 += 1, R930 += 1 };
  s4 -> s8 [0, 65535] { R1243 += 1, R1199 += 1 };
  s7 -> s4 [0, 65535] { R1243 += 1, R1199 += 1, R929 += 1, R930 += 1 };
  s7 -> s7 [0, 65535] { R1243 += 1, R1199 += 1, R928 += 1, R929 += 1 };
  s8 -> s9 [0, 65535] { R1243 += 1 };
  s8 -> s8 [0, 65535] { R1243 += 1, R1199 += 1 };
  s8 -> s10 [0, 65535];
  s9 -> s9 [0, 65535] { R1243 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s11 [0, 72] { R1243 += 1, R1199 += 1 };
  s11 -> s10 [0, 65535];
  s11 -> s11 [0, 65535] { R1243 += 1 };
  s11 -> s8 [73, 73] { R1243 += 1, R1199 += 1 };
  s11 -> s12 [73, 73] { R1243 += 1, R1199 += 1 };
  s11 -> s11 [74, 65535] { R1243 += 1, R1199 += 1 };
  s12 -> s10 [0, 65535];
  s12 -> s12 [0, 65535] { R1243 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 72] { R1245 += 1, R1201 += 1, R1142 += 1, R1143 += 1 };
  s0 -> s2 [0, 72] { R1245 += 1, R1201 += 1, R1143 += 1 };
  s0 -> s3 [0, 65535] { R1245 += 1, R1200 += 1, R1201 += 1 };
  s0 -> s0 [0, 65535] { R1244 += 1, R1245 += 1 };
  s0 -> s4 [73, 73] { R1245 += 1, R1201 += 1, R1143 += 1 };
  s0 -> s5 [73, 73] { R1245 += 1, R1201 += 1, R1143 += 1 };
  s0 -> s6 [73, 73] { R1245 += 1, R1201 += 1, R1142 += 1, R1143 += 1 };
  s0 -> s7 [73, 73] { R1245 += 1, R1201 += 1, R1142 += 1, R1143 += 1 };
  s0 -> s2 [74, 76] { R1245 += 1, R1201 += 1, R1143 += 1 };
  s0 -> s1 [74, 65535] { R1245 += 1, R1201 += 1, R1142 += 1, R1143 += 1 };
  s0 -> s8 [77, 77] { R1245 += 1, R1201 += 1, R1143 += 1 };
  s0 -> s2 [91, 65535] { R1245 += 1, R1201 += 1, R1143 += 1 };
  s1 -> s1 [0, 72] { R1245 += 1, R1201 += 1, R1142 += 1, R1143 += 1 };
  s1 -> s2 [0, 72] { R1245 += 1, R1201 += 1, R1143 += 1 };
  s1 -> s4 [73, 73] { R1245 += 1, R1201 += 1, R1143 += 1 };
  s1 -> s5 [73, 73] { R1245 += 1, R1201 += 1, R1143 += 1 };
  s1 -> s6 [73, 73] { R1245 += 1, R1201 += 1, R1142 += 1, R1143 += 1 };
  s1 -> s7 [73, 73] { R1245 += 1, R1201 += 1, R1142 += 1, R1143 += 1 };
  s1 -> s2 [74, 76] { R1245 += 1, R1201 += 1, R1143 += 1 };
  s1 -> s1 [74, 65535] { R1245 += 1, R1201 += 1, R1142 += 1, R1143 += 1 };
  s1 -> s8 [77, 77] { R1245 += 1, R1201 += 1, R1143 += 1 };
  s1 -> s2 [91, 65535] { R1245 += 1, R1201 += 1, R1143 += 1 };
  s2 -> s2 [0, 72] { R1245 += 1, R1201 += 1, R1143 += 1 };
  s2 -> s4 [73, 73] { R1245 += 1, R1201 += 1 };
  s2 -> s5 [73, 73] { R1245 += 1, R1201 += 1 };
  s2 -> s2 [74, 76] { R1245 += 1, R1201 += 1, R1143 += 1 };
  s2 -> s2 [74, 65535] { R1245 += 1, R1201 += 1 };
  s2 -> s8 [77, 77] { R1245 += 1, R1201 += 1, R1143 += 1 };
  s2 -> s2 [91, 65535] { R1245 += 1, R1201 += 1, R1143 += 1 };
  s3 -> s1 [0, 72] { R1245 += 1, R1201 += 1, R1142 += 1, R1143 += 1 };
  s3 -> s2 [0, 72] { R1245 += 1, R1201 += 1, R1143 += 1 };
  s3 -> s3 [0, 65535] { R1245 += 1, R1200 += 1, R1201 += 1 };
  s3 -> s4 [73, 73] { R1245 += 1, R1201 += 1, R1143 += 1 };
  s3 -> s5 [73, 73] { R1245 += 1, R1201 += 1, R1143 += 1 };
  s3 -> s6 [73, 73] { R1245 += 1, R1201 += 1, R1142 += 1, R1143 += 1 };
  s3 -> s7 [73, 73] { R1245 += 1, R1201 += 1, R1142 += 1, R1143 += 1 };
  s3 -> s2 [74, 76] { R1245 += 1, R1201 += 1, R1143 += 1 };
  s3 -> s1 [74, 65535] { R1245 += 1, R1201 += 1, R1142 += 1, R1143 += 1 };
  s3 -> s8 [77, 77] { R1245 += 1, R1201 += 1, R1143 += 1 };
  s3 -> s2 [91, 65535] { R1245 += 1, R1201 += 1, R1143 += 1 };
  s4 -> s4 [0, 76] { R1245 += 1, R1201 += 1, R1143 += 1 };
  s4 -> s4 [0, 65535] { R1245 += 1, R1201 += 1 };
  s4 -> s11 [77, 77] { R1245 += 1, R1201 += 1, R1143 += 1 };
  s4 -> s4 [91, 65535] { R1245 += 1, R1201 += 1, R1143 += 1 };
  s6 -> s4 [0, 76] { R1245 += 1, R1201 += 1, R1143 += 1 };
  s6 -> s6 [0, 65535] { R1245 += 1, R1201 += 1, R1142 += 1, R1143 += 1 };
  s6 -> s11 [77, 77] { R1245 += 1, R1201 += 1, R1143 += 1 };
  s6 -> s4 [91, 65535] { R1245 += 1, R1201 += 1, R1143 += 1 };
  s8 -> s8 [0, 72] { R1245 += 1, R1201 += 1 };
  s8 -> s8 [0, 65535] { R1245 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [73, 73] { R1245 += 1, R1201 += 1 };
  s8 -> s11 [73, 73] { R1245 += 1, R1201 += 1 };
  s8 -> s8 [74, 65535] { R1245 += 1, R1201 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R1245 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s12 [0, 65535] { R1245 += 1 };
  s11 -> s11 [0, 65535] { R1245 += 1, R1201 += 1 };
  s11 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R1245 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
synchronised {  // Automata constraining P54
automaton P54_0 {
  init s0;
  s0 -> s1 [109, 109];
  accepting s1;
};
};
constraint R2 = R1245 && R20 - R1245 = -1 && R21 = R1245 && R22 - R1245 = -1 && R23 = R1245 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R83 + -1*R81 - R53 = 0 && R52 + R82 + R80 = 0 && R1186 = 0 && R1187 = 0 && R1196 = 0 && R1197 = 0 && R1198 = 0 && R1199 = 0 && R1200 = 0 && R1201 = 0 && R1202 = 0 && R1203 = R1245 && R1204 = 0 && R1205 = R1245 && R1206 = 0 && R1207 = R1245 && R1208 = 0 && R1209 = R1245 && R1210 = 0 && R1211 = R1245 && R1212 = 0 && R1213 = R1245 && R1214 = 0 && R1215 = R1245 && R1216 = 0 && R1217 = R1245 && R1218 = 0 && R1219 = R1245 && R1220 = 0 && R1221 = R1245 && R1222 = 0 && R1223 = R1245 && R1224 = 0 && R1225 = R1245 && R1226 = 0 && R1227 = R1245 && R1228 = 0 && R1229 = R1245 && R1230 = 0 && R1231 = R1245 && R1232 = 0 && R1233 = R1245 && R1234 = 0 && R1235 = R1245 && R1236 = 0 && R1237 = R1245 && R1238 = 0 && R1239 = R1245 && R1240 = 0 && R1241 = R1245 && R1242 = 0 && R1243 = R1245 && R1244 = 0 && -1 < R1 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R83 + -1*R81 - R53 < 1 && 0 < R1245 && (R1 != 0 || R17 = 0 || (R1146 = 0 && R1147 = 0)) && (R1 != 0 || R17 = 0 || (R1148 = 0 && R1149 = 0)) && (R1 != 0 || R17 = 0 || (R1150 = 0 && R1151 = 0)) && (R1 != 0 || R17 = 0 || (R1152 = 0 && R1153 = 0)) && (R1 != 0 || R17 = 0 || (R1154 = 0 && R1155 = 0)) && (R1 != 0 || R17 = 0 || (R1156 = 0 && R1157 = 0)) && (R1 != 0 || R17 = 0 || (R1158 = 0 && R1159 = 0)) && (R1 != 0 || R17 = 0 || (R1160 = 0 && R1161 = 0)) && (R1 != 0 || R17 = 0 || (R1162 = 0 && R1163 = 0)) && (R1 != 0 || R17 = 0 || (R1164 = 0 && R1165 = 0)) && (R48 + R79 + R76 != 0 || ((R42 + R72 + R70 != 0 || R43 + R73 + R71 + -1*R83 + -1*R81 - R53 = 0 || R53 + R83 + R81 < 1) && (R42 + R72 + R70 = 0 || R53 + R83 + R81 < 1))) && (R48 + R79 + R76 != 0 || ((R46 + R77 + R74 != 0 || R47 + R78 + R75 + -1*R83 + -1*R81 - R53 = 0 || R53 + R83 + R81 < 1) && (R46 + R77 + R74 = 0 || R53 + R83 + R81 < 1))) && (R1146 != 0 || R1 = R1147 || R1 < 1) && (R1148 != 0 || R1 = R1149 || R1 < 1) && (R1150 != 0 || R1 = R1151 || R1 < 1) && (R1152 != 0 || R1 = R1153 || R1 < 1) && (R1154 != 0 || R1 = R1155 || R1 < 1) && (R1156 != 0 || R1 = R1157 || R1 < 1) && (R1158 != 0 || R1 = R1159 || R1 < 1) && (R1160 != 0 || R1 = R1161 || R1 < 1) && (R1162 != 0 || R1 = R1163 || R1 < 1) && (R1164 != 0 || R1 = R1165 || R1 < 1) && (R18 = 0 || (R1184 = 0 && R1185 = 0)) && (R18 = 0 || (R1188 = 0 && R1189 = 0)) && (R18 = 0 || (R1190 = 0 && R1191 = 0)) && (R18 = 0 || (R1192 = 0 && R1193 = 0)) && (R18 = 0 || (R1194 = 0 && R1195 = 0)) && (R19 = 0 || (R1166 = 0 && R1167 = 0)) && (R19 = 0 || (R1168 = 0 && R1169 = 0)) && (R19 = 0 || (R1170 = 0 && R1171 = 0)) && (R19 = 0 || (R1172 = 0 && R1173 = 0)) && (R19 = 0 || (R1174 = 0 && R1175 = 0)) && (R19 = 0 || (R1176 = 0 && R1177 = 0)) && (R19 = 0 || (R1178 = 0 && R1179 = 0)) && (R19 = 0 || (R1180 = 0 && R1181 = 0)) && (R19 = 0 || (R1182 = 0 && R1183 = 0)) && (R48 + R79 + R76 = 0 || (R42 + R72 + R70 = 0 && R43 + R73 + R71 + -1*R83 + -1*R81 - R53 = 0)) && (R48 + R79 + R76 = 0 || (R46 + R77 + R74 = 0 && R47 + R78 + R75 + -1*R83 + -1*R81 - R53 = 0)) && (R58 + R933 + R930 = 0 || (R56 + R931 + R928 = 0 && R57 + R932 + R929 = 0)) && (R58 + R933 + R930 = 0 || (R62 + R1144 + R1142 = 0 && R63 + R1145 + R1143 = 0)) && (R1146 = 0 || R1 < 1) && (R1148 = 0 || R1 < 1) && (R1150 = 0 || R1 < 1) && (R1152 = 0 || R1 < 1) && (R1154 = 0 || R1 < 1) && (R1156 = 0 || R1 < 1) && (R1158 = 0 || R1 < 1) && (R1160 = 0 || R1 < 1) && (R1162 = 0 || R1 < 1) && (R1164 = 0 || R1 < 1);
// End of Parikh automata intersection problem
