// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R12, R16, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R3, R31, R33, R35, R36, R39, R4, R40, R41, R45, R46, R47, R48, R513, R514, R515, R516, R593, R594, R595, R596, R597, R598, R599, R600, R601, R602, R603, R604, R605, R606, R607, R608, R609, R610, R611, R612, R613, R614, R615, R616, R617, R618, R619, R620, R621, R622, R623, R624, R625, R626, R627, R628, R629, R630, R631, R632, R633, R634, R635, R636, R637, R638, R639, R640, R641, R642, R643, R644, R645, R646, R647, R648, R649, R650, R651, R652, R653, R654, R655, R656, R657, R658, R659, R660, R661, R662, R663, R664, R665, R666, R667, R668, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [75, 75];
  s0 -> s0 [76, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [75, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 74];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [75, 75];
  s0 -> s1 [76, 65535];
  s1 -> s1 [0, 74];
  s1 -> s2 [75, 75];
  s1 -> s1 [76, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R20 += 1 };
  s0 -> s0 [0, 65535] { R19 += 1, R20 += 1 };
  s0 -> s2 [9, 13] { R20 += 1 };
  s0 -> s1 [14, 31] { R20 += 1 };
  s0 -> s2 [32, 32] { R20 += 1 };
  s0 -> s1 [33, 65535] { R20 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R20 += 1 };
  s2 -> s1 [0, 65535] { R20 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s0 [0, 65535] { R21 += 1, R22 += 1 };
  s0 -> s1 [0, 65535] { R22 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R22 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R24 += 1 };
  s0 -> s0 [0, 65535] { R23 += 1, R24 += 1 };
  s0 -> s2 [9, 13] { R24 += 1 };
  s0 -> s1 [14, 31] { R24 += 1 };
  s0 -> s2 [32, 32] { R24 += 1 };
  s0 -> s1 [33, 65535] { R24 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R24 += 1 };
  s2 -> s1 [0, 65535] { R24 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R25 += 1, R26 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R613 += 1, R614 += 1 };
  s0 -> s1 [0, 65535] { R614 += 1, R18 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R614 += 1, R18 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 74] { R616 += 1 };
  s0 -> s0 [0, 65535] { R615 += 1, R616 += 1 };
  s0 -> s2 [75, 75] { R616 += 1 };
  s0 -> s3 [75, 75] { R616 += 1 };
  s0 -> s1 [88, 65535] { R616 += 1 };
  s1 -> s1 [0, 74] { R616 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R616 += 1 };
  s1 -> s3 [75, 75] { R616 += 1 };
  s1 -> s1 [88, 65535] { R616 += 1 };
  s2 -> s2 [0, 75] { R616 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [88, 65535] { R616 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 74] { R618 += 1, R31 += 1 };
  s0 -> s0 [0, 65535] { R617 += 1, R618 += 1 };
  s0 -> s2 [75, 75] { R618 += 1, R31 += 1 };
  s0 -> s3 [75, 75] { R618 += 1, R31 += 1 };
  s0 -> s1 [76, 65535] { R618 += 1, R31 += 1 };
  s1 -> s1 [0, 74] { R618 += 1, R31 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R618 += 1, R31 += 1 };
  s1 -> s3 [75, 75] { R618 += 1, R31 += 1 };
  s1 -> s1 [76, 65535] { R618 += 1, R31 += 1 };
  s2 -> s2 [0, 65535] { R618 += 1, R31 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 74] { R620 += 1, R33 += 1 };
  s0 -> s0 [0, 65535] { R619 += 1, R620 += 1 };
  s0 -> s2 [75, 75] { R620 += 1, R33 += 1 };
  s0 -> s3 [75, 75] { R620 += 1, R33 += 1 };
  s0 -> s1 [76, 65535] { R620 += 1, R33 += 1 };
  s1 -> s1 [0, 74] { R620 += 1, R33 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R620 += 1, R33 += 1 };
  s1 -> s3 [75, 75] { R620 += 1, R33 += 1 };
  s1 -> s1 [76, 65535] { R620 += 1, R33 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R620 += 1, R33 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 74] { R622 += 1, R35 += 1, R36 += 1 };
  s0 -> s0 [0, 65535] { R621 += 1, R622 += 1 };
  s0 -> s2 [75, 75] { R622 += 1, R35 += 1, R36 += 1 };
  s0 -> s3 [75, 75] { R622 += 1, R35 += 1, R36 += 1 };
  s0 -> s1 [76, 65535] { R622 += 1, R35 += 1, R36 += 1 };
  s1 -> s1 [0, 74] { R622 += 1, R35 += 1, R36 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R622 += 1, R35 += 1, R36 += 1 };
  s1 -> s3 [75, 75] { R622 += 1, R35 += 1, R36 += 1 };
  s1 -> s1 [76, 65535] { R622 += 1, R35 += 1, R36 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R622 += 1, R35 += 1, R36 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 74] { R624 += 1, R39 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R623 += 1, R624 += 1 };
  s0 -> s2 [75, 75] { R624 += 1, R39 += 1, R40 += 1 };
  s0 -> s3 [75, 75] { R624 += 1, R39 += 1, R40 += 1 };
  s0 -> s1 [76, 65535] { R624 += 1, R39 += 1, R40 += 1 };
  s1 -> s1 [0, 74] { R624 += 1, R39 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R624 += 1, R39 += 1, R40 += 1 };
  s1 -> s3 [75, 75] { R624 += 1, R39 += 1, R40 += 1 };
  s1 -> s1 [76, 65535] { R624 += 1, R39 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R624 += 1, R39 += 1, R40 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 74] { R638 += 1 };
  s0 -> s0 [0, 65535] { R637 += 1, R638 += 1 };
  s0 -> s2 [75, 75] { R638 += 1 };
  s0 -> s1 [76, 65535] { R638 += 1 };
  s1 -> s1 [0, 74] { R638 += 1 };
  s1 -> s2 [75, 75] { R638 += 1 };
  s1 -> s1 [76, 65535] { R638 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R638 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 65535] { R640 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R639 += 1, R640 += 1 };
  s1 -> s1 [0, 65535] { R640 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 74] { R642 += 1 };
  s0 -> s2 [0, 65535] { R642 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R641 += 1, R642 += 1 };
  s0 -> s3 [75, 75] { R642 += 1 };
  s0 -> s1 [76, 65535] { R642 += 1 };
  s1 -> s1 [0, 74] { R642 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [75, 75] { R642 += 1 };
  s1 -> s1 [76, 65535] { R642 += 1 };
  s2 -> s1 [0, 74] { R642 += 1 };
  s2 -> s2 [0, 65535] { R642 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [75, 75] { R642 += 1 };
  s2 -> s1 [76, 65535] { R642 += 1 };
  s3 -> s3 [0, 65535] { R642 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 74] { R644 += 1, R600 += 1 };
  s0 -> s0 [0, 65535] { R643 += 1, R644 += 1 };
  s0 -> s2 [0, 65535] { R644 += 1, R599 += 1, R600 += 1 };
  s0 -> s1 [76, 65535] { R644 += 1, R600 += 1 };
  s1 -> s1 [0, 74] { R644 += 1, R600 += 1 };
  s1 -> s1 [0, 65535] { R644 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [76, 65535] { R644 += 1, R600 += 1 };
  s2 -> s1 [0, 74] { R644 += 1, R600 += 1 };
  s2 -> s2 [0, 65535] { R644 += 1, R599 += 1, R600 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [76, 65535] { R644 += 1, R600 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R646 += 1, R601 += 1, R602 += 1 };
  s0 -> s0 [0, 65535] { R645 += 1, R646 += 1 };
  s0 -> s2 [0, 65535] { R646 += 1, R602 += 1, R16 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R646 += 1, R601 += 1, R602 += 1 };
  s1 -> s2 [0, 65535] { R646 += 1, R602 += 1, R16 += 1 };
  s2 -> s3 [0, 65535] { R646 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R646 += 1, R602 += 1, R16 += 1 };
  s3 -> s3 [0, 65535] { R646 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 75] { R648 += 1, R604 += 1 };
  s0 -> s0 [0, 65535] { R647 += 1, R648 += 1 };
  s0 -> s2 [0, 65535] { R648 += 1, R603 += 1, R604 += 1 };
  s0 -> s1 [87, 65535] { R648 += 1, R604 += 1 };
  s1 -> s1 [0, 75] { R648 += 1, R604 += 1 };
  s1 -> s1 [0, 65535] { R648 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [87, 65535] { R648 += 1, R604 += 1 };
  s2 -> s1 [0, 75] { R648 += 1, R604 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R648 += 1, R603 += 1, R604 += 1 };
  s2 -> s1 [87, 65535] { R648 += 1, R604 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 65535] { R650 += 1, R606 += 1, R46 += 1 };
  s0 -> s0 [0, 65535] { R649 += 1, R650 += 1 };
  s0 -> s2 [0, 65535] { R650 += 1, R605 += 1, R606 += 1 };
  s1 -> s4 [0, 65535] { R650 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R650 += 1, R606 += 1, R46 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R650 += 1, R606 += 1, R46 += 1 };
  s2 -> s2 [0, 65535] { R650 += 1, R605 += 1, R606 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R650 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 86] { R652 += 1, R608 += 1 };
  s0 -> s0 [0, 65535] { R651 += 1, R652 += 1 };
  s0 -> s2 [0, 65535] { R652 += 1, R608 += 1, R48 += 1 };
  s0 -> s3 [0, 65535] { R652 += 1, R607 += 1, R608 += 1 };
  s0 -> s1 [88, 65535] { R652 += 1, R608 += 1 };
  s1 -> s1 [0, 86] { R652 += 1, R608 += 1 };
  s1 -> s1 [0, 65535] { R652 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [88, 65535] { R652 += 1, R608 += 1 };
  s2 -> s1 [0, 86] { R652 += 1, R608 += 1 };
  s2 -> s5 [0, 65535] { R652 += 1 };
  s2 -> s2 [0, 65535] { R652 += 1, R608 += 1, R48 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [88, 65535] { R652 += 1, R608 += 1 };
  s3 -> s1 [0, 86] { R652 += 1, R608 += 1 };
  s3 -> s2 [0, 65535] { R652 += 1, R608 += 1, R48 += 1 };
  s3 -> s3 [0, 65535] { R652 += 1, R607 += 1, R608 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [88, 65535] { R652 += 1, R608 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R652 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 86] { R654 += 1, R610 += 1, R516 += 1 };
  s0 -> s2 [0, 65535] { R654 += 1, R609 += 1, R610 += 1 };
  s0 -> s0 [0, 65535] { R653 += 1, R654 += 1 };
  s0 -> s3 [0, 65535] { R654 += 1, R610 += 1, R515 += 1, R516 += 1 };
  s0 -> s4 [87, 87] { R654 += 1, R610 += 1, R516 += 1 };
  s0 -> s1 [88, 65535] { R654 += 1, R610 += 1, R516 += 1 };
  s1 -> s1 [0, 86] { R654 += 1, R610 += 1, R516 += 1 };
  s1 -> s4 [87, 87] { R654 += 1, R610 += 1, R516 += 1 };
  s1 -> s1 [88, 65535] { R654 += 1, R610 += 1, R516 += 1 };
  s2 -> s1 [0, 86] { R654 += 1, R610 += 1, R516 += 1 };
  s2 -> s2 [0, 65535] { R654 += 1, R609 += 1, R610 += 1 };
  s2 -> s3 [0, 65535] { R654 += 1, R610 += 1, R515 += 1, R516 += 1 };
  s2 -> s4 [87, 87] { R654 += 1, R610 += 1, R516 += 1 };
  s2 -> s1 [88, 65535] { R654 += 1, R610 += 1, R516 += 1 };
  s3 -> s1 [0, 86] { R654 += 1, R610 += 1, R516 += 1 };
  s3 -> s3 [0, 65535] { R654 += 1, R610 += 1, R515 += 1, R516 += 1 };
  s3 -> s4 [87, 87] { R654 += 1, R610 += 1, R516 += 1 };
  s3 -> s1 [88, 65535] { R654 += 1, R610 += 1, R516 += 1 };
  s4 -> s5 [0, 65535] { R654 += 1 };
  s4 -> s4 [0, 65535] { R654 += 1, R610 += 1, R516 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R654 += 1, R610 += 1 };
  s5 -> s5 [0, 65535] { R654 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R654 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R654 += 1, R610 += 1 };
  accepting s4, s5, s6, s7;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R656 += 1, R612 += 1 };
  s0 -> s0 [0, 65535] { R655 += 1, R656 += 1 };
  s0 -> s2 [0, 65535] { R656 += 1, R611 += 1, R612 += 1 };
  s0 -> s3 [0, 65535] { R656 += 1, R612 += 1, R597 += 1, R598 += 1 };
  s1 -> s4 [0, 65535] { R656 += 1 };
  s1 -> s1 [0, 65535] { R656 += 1, R612 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R656 += 1, R612 += 1 };
  s2 -> s2 [0, 65535] { R656 += 1, R611 += 1, R612 += 1 };
  s2 -> s3 [0, 65535] { R656 += 1, R612 += 1, R597 += 1, R598 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s4 [0, 65535] { R656 += 1 };
  s3 -> s1 [0, 65535] { R656 += 1, R612 += 1 };
  s3 -> s3 [0, 65535] { R656 += 1, R612 += 1, R597 += 1, R598 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R656 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s0 [0, 65535] { R657 += 1, R658 += 1 };
  s0 -> s1 [0, 65535] { R658 += 1, R626 += 1, R17 += 1 };
  s0 -> s2 [0, 65535] { R658 += 1, R625 += 1, R626 += 1 };
  s1 -> s1 [0, 65535] { R658 += 1, R626 += 1, R17 += 1 };
  s1 -> s4 [0, 65535] { R658 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R658 += 1, R626 += 1, R17 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R658 += 1, R625 += 1, R626 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R658 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 74] { R660 += 1, R628 += 1 };
  s0 -> s0 [0, 65535] { R659 += 1, R660 += 1 };
  s0 -> s2 [0, 65535] { R660 += 1, R627 += 1, R628 += 1 };
  s0 -> s3 [75, 75] { R660 += 1, R628 += 1 };
  s0 -> s4 [75, 75] { R660 += 1, R628 += 1 };
  s0 -> s5 [87, 87] { R660 += 1, R628 += 1 };
  s0 -> s1 [88, 65535] { R660 += 1, R628 += 1 };
  s1 -> s1 [0, 74] { R660 += 1, R628 += 1 };
  s1 -> s3 [75, 75] { R660 += 1, R628 += 1 };
  s1 -> s4 [75, 75] { R660 += 1, R628 += 1 };
  s1 -> s5 [87, 87] { R660 += 1, R628 += 1 };
  s1 -> s1 [88, 65535] { R660 += 1, R628 += 1 };
  s2 -> s1 [0, 74] { R660 += 1, R628 += 1 };
  s2 -> s2 [0, 65535] { R660 += 1, R627 += 1, R628 += 1 };
  s2 -> s3 [75, 75] { R660 += 1, R628 += 1 };
  s2 -> s4 [75, 75] { R660 += 1, R628 += 1 };
  s2 -> s5 [87, 87] { R660 += 1, R628 += 1 };
  s2 -> s1 [88, 65535] { R660 += 1, R628 += 1 };
  s4 -> s4 [0, 75] { R660 += 1, R628 += 1 };
  s4 -> s8 [87, 87] { R660 += 1, R628 += 1 };
  s4 -> s4 [88, 65535] { R660 += 1, R628 += 1 };
  s5 -> s5 [0, 74] { R660 += 1, R628 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R660 += 1 };
  s5 -> s7 [75, 75] { R660 += 1, R628 += 1 };
  s5 -> s8 [75, 75] { R660 += 1, R628 += 1 };
  s5 -> s5 [87, 65535] { R660 += 1, R628 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R660 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 75] { R660 += 1, R628 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R660 += 1 };
  s8 -> s8 [87, 65535] { R660 += 1, R628 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 74] { R662 += 1, R630 += 1, R45 += 1 };
  s0 -> s2 [0, 65535] { R662 += 1, R629 += 1, R630 += 1 };
  s0 -> s0 [0, 65535] { R661 += 1, R662 += 1 };
  s0 -> s3 [75, 75] { R662 += 1, R630 += 1, R45 += 1 };
  s0 -> s4 [75, 75] { R662 += 1, R630 += 1, R45 += 1 };
  s0 -> s1 [76, 65535] { R662 += 1, R630 += 1, R45 += 1 };
  s1 -> s1 [0, 74] { R662 += 1, R630 += 1, R45 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R662 += 1 };
  s1 -> s3 [75, 75] { R662 += 1, R630 += 1, R45 += 1 };
  s1 -> s4 [75, 75] { R662 += 1, R630 += 1, R45 += 1 };
  s1 -> s1 [76, 65535] { R662 += 1, R630 += 1, R45 += 1 };
  s2 -> s1 [0, 74] { R662 += 1, R630 += 1, R45 += 1 };
  s2 -> s2 [0, 65535] { R662 += 1, R629 += 1, R630 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [75, 75] { R662 += 1, R630 += 1, R45 += 1 };
  s2 -> s4 [75, 75] { R662 += 1, R630 += 1, R45 += 1 };
  s2 -> s1 [76, 65535] { R662 += 1, R630 += 1, R45 += 1 };
  s3 -> s3 [0, 65535] { R662 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R662 += 1, R630 += 1, R45 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R662 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R662 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 74] { R664 += 1, R632 += 1, R47 += 1 };
  s0 -> s2 [0, 65535] { R664 += 1, R631 += 1, R632 += 1 };
  s0 -> s0 [0, 65535] { R663 += 1, R664 += 1 };
  s0 -> s3 [75, 75] { R664 += 1, R632 += 1, R47 += 1 };
  s0 -> s4 [75, 75] { R664 += 1, R632 += 1, R47 += 1 };
  s0 -> s1 [76, 65535] { R664 += 1, R632 += 1, R47 += 1 };
  s1 -> s1 [0, 74] { R664 += 1, R632 += 1, R47 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R664 += 1 };
  s1 -> s3 [75, 75] { R664 += 1, R632 += 1, R47 += 1 };
  s1 -> s4 [75, 75] { R664 += 1, R632 += 1, R47 += 1 };
  s1 -> s1 [76, 65535] { R664 += 1, R632 += 1, R47 += 1 };
  s2 -> s1 [0, 74] { R664 += 1, R632 += 1, R47 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R664 += 1, R631 += 1, R632 += 1 };
  s2 -> s3 [75, 75] { R664 += 1, R632 += 1, R47 += 1 };
  s2 -> s4 [75, 75] { R664 += 1, R632 += 1, R47 += 1 };
  s2 -> s1 [76, 65535] { R664 += 1, R632 += 1, R47 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R664 += 1, R632 += 1, R47 += 1 };
  s3 -> s6 [0, 65535] { R664 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R664 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R664 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 74] { R666 += 1, R634 += 1, R513 += 1, R514 += 1 };
  s0 -> s0 [0, 65535] { R665 += 1, R666 += 1 };
  s0 -> s2 [0, 65535] { R666 += 1, R633 += 1, R634 += 1 };
  s0 -> s3 [75, 75] { R666 += 1, R634 += 1, R513 += 1, R514 += 1 };
  s0 -> s4 [75, 75] { R666 += 1, R634 += 1, R513 += 1, R514 += 1 };
  s0 -> s1 [76, 65535] { R666 += 1, R634 += 1, R513 += 1, R514 += 1 };
  s1 -> s1 [0, 74] { R666 += 1, R634 += 1, R513 += 1, R514 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R666 += 1 };
  s1 -> s3 [75, 75] { R666 += 1, R634 += 1, R513 += 1, R514 += 1 };
  s1 -> s4 [75, 75] { R666 += 1, R634 += 1, R513 += 1, R514 += 1 };
  s1 -> s1 [76, 65535] { R666 += 1, R634 += 1, R513 += 1, R514 += 1 };
  s2 -> s1 [0, 74] { R666 += 1, R634 += 1, R513 += 1, R514 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R666 += 1, R633 += 1, R634 += 1 };
  s2 -> s3 [75, 75] { R666 += 1, R634 += 1, R513 += 1, R514 += 1 };
  s2 -> s4 [75, 75] { R666 += 1, R634 += 1, R513 += 1, R514 += 1 };
  s2 -> s1 [76, 65535] { R666 += 1, R634 += 1, R513 += 1, R514 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R666 += 1, R634 += 1, R513 += 1, R514 += 1 };
  s3 -> s6 [0, 65535] { R666 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R666 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R666 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 74] { R668 += 1, R636 += 1, R594 += 1, R595 += 1 };
  s0 -> s2 [0, 74] { R668 += 1, R636 += 1, R593 += 1, R594 += 1 };
  s0 -> s3 [0, 65535] { R668 += 1, R635 += 1, R636 += 1 };
  s0 -> s0 [0, 65535] { R667 += 1, R668 += 1 };
  s0 -> s4 [75, 75] { R668 += 1, R636 += 1, R593 += 1, R594 += 1 };
  s0 -> s5 [75, 75] { R668 += 1, R636 += 1, R593 += 1, R594 += 1 };
  s0 -> s6 [75, 75] { R668 += 1, R636 += 1, R594 += 1, R595 += 1 };
  s0 -> s7 [75, 75] { R668 += 1, R636 += 1, R594 += 1, R595 += 1 };
  s0 -> s1 [76, 65535] { R668 += 1, R636 += 1, R594 += 1, R595 += 1 };
  s0 -> s2 [76, 65535] { R668 += 1, R636 += 1, R593 += 1, R594 += 1 };
  s1 -> s1 [0, 74] { R668 += 1, R636 += 1, R594 += 1, R595 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s1 [0, 65535] { R668 += 1 };
  s1 -> s6 [75, 75] { R668 += 1, R636 += 1, R594 += 1, R595 += 1 };
  s1 -> s7 [75, 75] { R668 += 1, R636 += 1, R594 += 1, R595 += 1 };
  s1 -> s1 [76, 65535] { R668 += 1, R636 += 1, R594 += 1, R595 += 1 };
  s2 -> s1 [0, 74] { R668 += 1, R636 += 1, R594 += 1, R595 += 1 };
  s2 -> s2 [0, 74] { R668 += 1, R636 += 1, R593 += 1, R594 += 1 };
  s2 -> s4 [75, 75] { R668 += 1, R636 += 1, R593 += 1, R594 += 1 };
  s2 -> s5 [75, 75] { R668 += 1, R636 += 1, R593 += 1, R594 += 1 };
  s2 -> s6 [75, 75] { R668 += 1, R636 += 1, R594 += 1, R595 += 1 };
  s2 -> s7 [75, 75] { R668 += 1, R636 += 1, R594 += 1, R595 += 1 };
  s2 -> s1 [76, 65535] { R668 += 1, R636 += 1, R594 += 1, R595 += 1 };
  s2 -> s2 [76, 65535] { R668 += 1, R636 += 1, R593 += 1, R594 += 1 };
  s3 -> s1 [0, 74] { R668 += 1, R636 += 1, R594 += 1, R595 += 1 };
  s3 -> s2 [0, 74] { R668 += 1, R636 += 1, R593 += 1, R594 += 1 };
  s3 -> s3 [0, 65535] { R668 += 1, R635 += 1, R636 += 1 };
  s3 -> s4 [75, 75] { R668 += 1, R636 += 1, R593 += 1, R594 += 1 };
  s3 -> s5 [75, 75] { R668 += 1, R636 += 1, R593 += 1, R594 += 1 };
  s3 -> s6 [75, 75] { R668 += 1, R636 += 1, R594 += 1, R595 += 1 };
  s3 -> s7 [75, 75] { R668 += 1, R636 += 1, R594 += 1, R595 += 1 };
  s3 -> s1 [76, 65535] { R668 += 1, R636 += 1, R594 += 1, R595 += 1 };
  s3 -> s2 [76, 65535] { R668 += 1, R636 += 1, R593 += 1, R594 += 1 };
  s4 -> s4 [0, 65535] { R668 += 1, R636 += 1, R593 += 1, R594 += 1 };
  s4 -> s6 [0, 65535] { R668 += 1, R636 += 1, R594 += 1, R595 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R668 += 1, R636 += 1, R594 += 1, R595 += 1 };
  s6 -> s9 [0, 65535] { R668 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R668 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R668 += 1 };
  accepting s8, s9, s6, s1, s7;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [107, 107];
  accepting s1;
};
};
constraint R1 = R610 && R2 = R668 && R19 - R668 = -1 && R20 = R668 && R21 - R668 = -1 && R22 = R668 && R23 = 0 && R24 = 1 && R25 = 0 && R26 = 1 && R31 + R46 + R45 + -1*R516 + -1*R514 - R36 = 0 && R35 + R515 + R513 = 0 && R609 = 0 && R627 = 0 && R628 = 0 && R635 = 0 && R636 = 0 && R637 = 0 && R638 = R668 && R639 = 0 && R640 = R668 && R641 = 0 && R642 = R668 && R643 = 0 && R644 = R668 && R645 = 0 && R646 = R668 && R647 = 0 && R648 = R668 && R649 = 0 && R650 = R668 && R651 = 0 && R652 = R668 && R653 = 0 && R654 = R668 && R655 = 0 && R656 = R668 && R657 = 0 && R658 = R668 && R659 = 0 && R660 = R668 && R661 = 0 && R662 = R668 && R663 = 0 && R664 = R668 && R665 = 0 && R666 = R668 && R667 = 0 && R8 < 1 && R11 < 1 && R12 < 1 && R33 + R48 + R47 < 1 && -1*R516 + -1*R514 - R36 < 1 && -1 < R610 && 0 < R668 && (R36 + R516 + R514 != 0 || R41 + R598 + R595 = 0 || (R39 + R596 + R593 = 0 && R40 + R597 + R594 = 0)) && (R39 + R596 + R593 != 0 || R36 + R516 + R514 + -1*R597 + -1*R594 - R40 = 0 || R36 + R516 + R514 < 1) && (R599 != 0 || R600 = R610 || (R16 = 0 && R610 = 0)) && (R601 != 0 || R602 = R610 || (R16 = 0 && R610 = 0)) && (R603 != 0 || R604 = R610 || (R16 = 0 && R610 = 0)) && (R605 != 0 || R606 = R610 || (R16 = 0 && R610 = 0)) && (R607 != 0 || R608 = R610 || (R16 = 0 && R610 = 0)) && (R611 != 0 || R610 = R612 || (R16 = 0 && R610 = 0)) && (R17 = 0 || (R625 = 0 && R626 = 0)) && (R17 = 0 || (R629 = 0 && R630 = 0)) && (R17 = 0 || (R631 = 0 && R632 = 0)) && (R17 = 0 || (R633 = 0 && R634 = 0)) && (R18 = 0 || (R613 = 0 && R614 = 0)) && (R18 = 0 || (R615 = 0 && R616 = 0)) && (R18 = 0 || (R617 = 0 && R618 = 0)) && (R18 = 0 || (R619 = 0 && R620 = 0)) && (R18 = 0 || (R621 = 0 && R622 = 0)) && (R18 = 0 || (R623 = 0 && R624 = 0)) && (R39 + R596 + R593 = 0 || R36 + R516 + R514 < 1) && (R599 = 0 || (R16 = 0 && R610 = 0)) && (R601 = 0 || (R16 = 0 && R610 = 0)) && (R603 = 0 || (R16 = 0 && R610 = 0)) && (R605 = 0 || (R16 = 0 && R610 = 0)) && (R607 = 0 || (R16 = 0 && R610 = 0)) && (R611 = 0 || (R16 = 0 && R610 = 0));
// End of Parikh automata intersection problem
