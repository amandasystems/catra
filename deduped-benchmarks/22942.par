// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R12, R16, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R3, R31, R33, R35, R36, R39, R4, R40, R41, R45, R46, R47, R48, R513, R514, R515, R516, R517, R518, R519, R520, R521, R522, R523, R524, R525, R526, R527, R528, R529, R530, R531, R532, R533, R534, R535, R536, R537, R538, R539, R540, R541, R542, R543, R544, R545, R546, R547, R548, R549, R550, R551, R552, R553, R554, R555, R556, R557, R558, R559, R560, R561, R562, R563, R564, R565, R566, R567, R568, R569, R570, R571, R572, R573, R574, R575, R576, R577, R578, R579, R580, R581, R582, R583, R584, R585, R586, R587, R588, R589, R590, R591, R592, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [75, 75];
  s0 -> s0 [76, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [75, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 74];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [75, 75];
  s0 -> s1 [76, 65535];
  s1 -> s1 [0, 74];
  s1 -> s2 [75, 75];
  s1 -> s1 [76, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R20 += 1 };
  s0 -> s0 [0, 65535] { R19 += 1, R20 += 1 };
  s0 -> s2 [9, 13] { R20 += 1 };
  s0 -> s1 [14, 31] { R20 += 1 };
  s0 -> s2 [32, 32] { R20 += 1 };
  s0 -> s1 [33, 65535] { R20 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R20 += 1 };
  s2 -> s1 [0, 65535] { R20 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s0 [0, 65535] { R21 += 1, R22 += 1 };
  s0 -> s1 [0, 65535] { R22 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R22 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R24 += 1 };
  s0 -> s0 [0, 65535] { R23 += 1, R24 += 1 };
  s0 -> s2 [9, 13] { R24 += 1 };
  s0 -> s1 [14, 31] { R24 += 1 };
  s0 -> s2 [32, 32] { R24 += 1 };
  s0 -> s1 [33, 65535] { R24 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R24 += 1 };
  s2 -> s1 [0, 65535] { R24 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R25 += 1, R26 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R26 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R537 += 1, R538 += 1 };
  s0 -> s1 [0, 65535] { R538 += 1, R18 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R538 += 1, R18 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 74] { R540 += 1 };
  s0 -> s0 [0, 65535] { R539 += 1, R540 += 1 };
  s0 -> s2 [75, 75] { R540 += 1 };
  s0 -> s3 [75, 75] { R540 += 1 };
  s0 -> s1 [88, 65535] { R540 += 1 };
  s1 -> s1 [0, 74] { R540 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R540 += 1 };
  s1 -> s3 [75, 75] { R540 += 1 };
  s1 -> s1 [88, 65535] { R540 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 75] { R540 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [88, 65535] { R540 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 74] { R542 += 1, R31 += 1 };
  s0 -> s0 [0, 65535] { R541 += 1, R542 += 1 };
  s0 -> s2 [75, 75] { R542 += 1, R31 += 1 };
  s0 -> s3 [75, 75] { R542 += 1, R31 += 1 };
  s0 -> s1 [76, 65535] { R542 += 1, R31 += 1 };
  s1 -> s1 [0, 74] { R542 += 1, R31 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R542 += 1, R31 += 1 };
  s1 -> s3 [75, 75] { R542 += 1, R31 += 1 };
  s1 -> s1 [76, 65535] { R542 += 1, R31 += 1 };
  s2 -> s2 [0, 65535] { R542 += 1, R31 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 74] { R544 += 1, R33 += 1 };
  s0 -> s0 [0, 65535] { R543 += 1, R544 += 1 };
  s0 -> s2 [75, 75] { R544 += 1, R33 += 1 };
  s0 -> s3 [75, 75] { R544 += 1, R33 += 1 };
  s0 -> s1 [76, 65535] { R544 += 1, R33 += 1 };
  s1 -> s1 [0, 74] { R544 += 1, R33 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R544 += 1, R33 += 1 };
  s1 -> s3 [75, 75] { R544 += 1, R33 += 1 };
  s1 -> s1 [76, 65535] { R544 += 1, R33 += 1 };
  s2 -> s2 [0, 65535] { R544 += 1, R33 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 74] { R546 += 1, R35 += 1, R36 += 1 };
  s0 -> s0 [0, 65535] { R545 += 1, R546 += 1 };
  s0 -> s2 [75, 75] { R546 += 1, R35 += 1, R36 += 1 };
  s0 -> s3 [75, 75] { R546 += 1, R35 += 1, R36 += 1 };
  s0 -> s1 [76, 65535] { R546 += 1, R35 += 1, R36 += 1 };
  s1 -> s1 [0, 74] { R546 += 1, R35 += 1, R36 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R546 += 1, R35 += 1, R36 += 1 };
  s1 -> s3 [75, 75] { R546 += 1, R35 += 1, R36 += 1 };
  s1 -> s1 [76, 65535] { R546 += 1, R35 += 1, R36 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R546 += 1, R35 += 1, R36 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 74] { R548 += 1, R39 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R547 += 1, R548 += 1 };
  s0 -> s2 [75, 75] { R548 += 1, R39 += 1, R40 += 1 };
  s0 -> s3 [75, 75] { R548 += 1, R39 += 1, R40 += 1 };
  s0 -> s1 [76, 65535] { R548 += 1, R39 += 1, R40 += 1 };
  s1 -> s1 [0, 74] { R548 += 1, R39 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [75, 75] { R548 += 1, R39 += 1, R40 += 1 };
  s1 -> s3 [75, 75] { R548 += 1, R39 += 1, R40 += 1 };
  s1 -> s1 [76, 65535] { R548 += 1, R39 += 1, R40 += 1 };
  s2 -> s2 [0, 65535] { R548 += 1, R39 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 74] { R562 += 1 };
  s0 -> s0 [0, 65535] { R561 += 1, R562 += 1 };
  s0 -> s2 [75, 75] { R562 += 1 };
  s0 -> s1 [76, 65535] { R562 += 1 };
  s1 -> s1 [0, 74] { R562 += 1 };
  s1 -> s2 [75, 75] { R562 += 1 };
  s1 -> s1 [76, 65535] { R562 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R562 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_15 {
  init s0;
  s0 -> s0 [0, 65535] { R563 += 1, R564 += 1 };
  s0 -> s1 [0, 65535] { R564 += 1, R1 += 1 };
  s1 -> s1 [0, 65535] { R564 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 74] { R566 += 1 };
  s0 -> s0 [0, 65535] { R565 += 1, R566 += 1 };
  s0 -> s2 [0, 65535] { R566 += 1, R8 += 1 };
  s0 -> s3 [75, 75] { R566 += 1 };
  s0 -> s1 [76, 65535] { R566 += 1 };
  s1 -> s1 [0, 74] { R566 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [75, 75] { R566 += 1 };
  s1 -> s1 [76, 65535] { R566 += 1 };
  s2 -> s1 [0, 74] { R566 += 1 };
  s2 -> s2 [0, 65535] { R566 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [75, 75] { R566 += 1 };
  s2 -> s1 [76, 65535] { R566 += 1 };
  s3 -> s3 [0, 65535] { R566 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 74] { R568 += 1, R524 += 1 };
  s0 -> s0 [0, 65535] { R567 += 1, R568 += 1 };
  s0 -> s2 [0, 65535] { R568 += 1, R523 += 1, R524 += 1 };
  s0 -> s1 [76, 65535] { R568 += 1, R524 += 1 };
  s1 -> s1 [0, 74] { R568 += 1, R524 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R568 += 1 };
  s1 -> s1 [76, 65535] { R568 += 1, R524 += 1 };
  s2 -> s1 [0, 74] { R568 += 1, R524 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R568 += 1, R523 += 1, R524 += 1 };
  s2 -> s1 [76, 65535] { R568 += 1, R524 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R569 += 1, R570 += 1 };
  s0 -> s1 [0, 65535] { R570 += 1, R526 += 1, R16 += 1 };
  s0 -> s2 [0, 65535] { R570 += 1, R525 += 1, R526 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R570 += 1, R526 += 1, R16 += 1 };
  s1 -> s4 [0, 65535] { R570 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R570 += 1, R526 += 1, R16 += 1 };
  s2 -> s2 [0, 65535] { R570 += 1, R525 += 1, R526 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R570 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 75] { R572 += 1, R528 += 1 };
  s0 -> s0 [0, 65535] { R571 += 1, R572 += 1 };
  s0 -> s2 [0, 65535] { R572 += 1, R527 += 1, R528 += 1 };
  s0 -> s1 [87, 65535] { R572 += 1, R528 += 1 };
  s1 -> s1 [0, 75] { R572 += 1, R528 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R572 += 1 };
  s1 -> s1 [87, 65535] { R572 += 1, R528 += 1 };
  s2 -> s1 [0, 75] { R572 += 1, R528 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R572 += 1, R527 += 1, R528 += 1 };
  s2 -> s1 [87, 65535] { R572 += 1, R528 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 65535] { R574 += 1, R529 += 1, R530 += 1 };
  s0 -> s0 [0, 65535] { R573 += 1, R574 += 1 };
  s0 -> s2 [0, 65535] { R574 += 1, R530 += 1, R46 += 1 };
  s1 -> s1 [0, 65535] { R574 += 1, R529 += 1, R530 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R574 += 1, R530 += 1, R46 += 1 };
  s2 -> s3 [0, 65535] { R574 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R574 += 1, R530 += 1, R46 += 1 };
  s3 -> s3 [0, 65535] { R574 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 86] { R576 += 1, R532 += 1 };
  s0 -> s0 [0, 65535] { R575 += 1, R576 += 1 };
  s0 -> s2 [0, 65535] { R576 += 1, R531 += 1, R532 += 1 };
  s0 -> s3 [0, 65535] { R576 += 1, R532 += 1, R48 += 1 };
  s0 -> s1 [88, 65535] { R576 += 1, R532 += 1 };
  s1 -> s1 [0, 86] { R576 += 1, R532 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R576 += 1 };
  s1 -> s1 [88, 65535] { R576 += 1, R532 += 1 };
  s2 -> s1 [0, 86] { R576 += 1, R532 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R576 += 1, R531 += 1, R532 += 1 };
  s2 -> s3 [0, 65535] { R576 += 1, R532 += 1, R48 += 1 };
  s2 -> s1 [88, 65535] { R576 += 1, R532 += 1 };
  s3 -> s1 [0, 86] { R576 += 1, R532 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R576 += 1 };
  s3 -> s3 [0, 65535] { R576 += 1, R532 += 1, R48 += 1 };
  s3 -> s1 [88, 65535] { R576 += 1, R532 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R576 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 86] { R578 += 1, R534 += 1, R516 += 1 };
  s0 -> s2 [0, 65535] { R578 += 1, R534 += 1, R515 += 1, R516 += 1 };
  s0 -> s3 [0, 65535] { R578 += 1, R533 += 1, R534 += 1 };
  s0 -> s0 [0, 65535] { R577 += 1, R578 += 1 };
  s0 -> s4 [87, 87] { R578 += 1, R534 += 1, R516 += 1 };
  s0 -> s1 [88, 65535] { R578 += 1, R534 += 1, R516 += 1 };
  s1 -> s1 [0, 86] { R578 += 1, R534 += 1, R516 += 1 };
  s1 -> s4 [87, 87] { R578 += 1, R534 += 1, R516 += 1 };
  s1 -> s1 [88, 65535] { R578 += 1, R534 += 1, R516 += 1 };
  s2 -> s1 [0, 86] { R578 += 1, R534 += 1, R516 += 1 };
  s2 -> s2 [0, 65535] { R578 += 1, R534 += 1, R515 += 1, R516 += 1 };
  s2 -> s4 [87, 87] { R578 += 1, R534 += 1, R516 += 1 };
  s2 -> s1 [88, 65535] { R578 += 1, R534 += 1, R516 += 1 };
  s3 -> s1 [0, 86] { R578 += 1, R534 += 1, R516 += 1 };
  s3 -> s2 [0, 65535] { R578 += 1, R534 += 1, R515 += 1, R516 += 1 };
  s3 -> s3 [0, 65535] { R578 += 1, R533 += 1, R534 += 1 };
  s3 -> s4 [87, 87] { R578 += 1, R534 += 1, R516 += 1 };
  s3 -> s1 [88, 65535] { R578 += 1, R534 += 1, R516 += 1 };
  s4 -> s5 [0, 65535] { R578 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R578 += 1, R534 += 1, R516 += 1 };
  s4 -> s7 [0, 65535] { R578 += 1, R534 += 1 };
  s5 -> s5 [0, 65535] { R578 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R578 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R578 += 1, R534 += 1 };
  accepting s4, s5, s6, s7;
};
automaton value2_23 {
  init s0;
  s0 -> s0 [0, 65535] { R579 += 1, R580 += 1 };
  s0 -> s1 [0, 65535] { R580 += 1, R536 += 1, R520 += 1, R521 += 1 };
  s0 -> s2 [0, 65535] { R580 += 1, R535 += 1, R536 += 1 };
  s0 -> s3 [0, 65535] { R580 += 1, R536 += 1, R521 += 1, R522 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R580 += 1, R536 += 1, R520 += 1, R521 += 1 };
  s1 -> s3 [0, 65535] { R580 += 1, R536 += 1, R521 += 1, R522 += 1 };
  s1 -> s5 [0, 65535] { R580 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R580 += 1, R536 += 1, R520 += 1, R521 += 1 };
  s2 -> s2 [0, 65535] { R580 += 1, R535 += 1, R536 += 1 };
  s2 -> s3 [0, 65535] { R580 += 1, R536 += 1, R521 += 1, R522 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R580 += 1, R536 += 1, R521 += 1, R522 += 1 };
  s3 -> s5 [0, 65535] { R580 += 1 };
  s3 -> s6 [0, 65535] { R580 += 1, R536 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R580 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R580 += 1 };
  s6 -> s6 [0, 65535] { R580 += 1, R536 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 65535] { R582 += 1, R549 += 1, R550 += 1 };
  s0 -> s2 [0, 65535] { R582 += 1, R550 += 1, R17 += 1 };
  s0 -> s0 [0, 65535] { R581 += 1, R582 += 1 };
  s1 -> s1 [0, 65535] { R582 += 1, R549 += 1, R550 += 1 };
  s1 -> s2 [0, 65535] { R582 += 1, R550 += 1, R17 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R582 += 1, R550 += 1, R17 += 1 };
  s2 -> s3 [0, 65535] { R582 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R582 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 74] { R584 += 1, R552 += 1 };
  s0 -> s2 [0, 65535] { R584 += 1, R551 += 1, R552 += 1 };
  s0 -> s0 [0, 65535] { R583 += 1, R584 += 1 };
  s0 -> s3 [75, 75] { R584 += 1, R552 += 1 };
  s0 -> s4 [75, 75] { R584 += 1, R552 += 1 };
  s0 -> s5 [87, 87] { R584 += 1, R552 += 1 };
  s0 -> s1 [88, 65535] { R584 += 1, R552 += 1 };
  s1 -> s1 [0, 74] { R584 += 1, R552 += 1 };
  s1 -> s3 [75, 75] { R584 += 1, R552 += 1 };
  s1 -> s4 [75, 75] { R584 += 1, R552 += 1 };
  s1 -> s5 [87, 87] { R584 += 1, R552 += 1 };
  s1 -> s1 [88, 65535] { R584 += 1, R552 += 1 };
  s2 -> s1 [0, 74] { R584 += 1, R552 += 1 };
  s2 -> s2 [0, 65535] { R584 += 1, R551 += 1, R552 += 1 };
  s2 -> s3 [75, 75] { R584 += 1, R552 += 1 };
  s2 -> s4 [75, 75] { R584 += 1, R552 += 1 };
  s2 -> s5 [87, 87] { R584 += 1, R552 += 1 };
  s2 -> s1 [88, 65535] { R584 += 1, R552 += 1 };
  s4 -> s4 [0, 75] { R584 += 1, R552 += 1 };
  s4 -> s8 [87, 87] { R584 += 1, R552 += 1 };
  s4 -> s4 [88, 65535] { R584 += 1, R552 += 1 };
  s5 -> s5 [0, 74] { R584 += 1, R552 += 1 };
  s5 -> s5 [0, 65535] { R584 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [75, 75] { R584 += 1, R552 += 1 };
  s5 -> s8 [75, 75] { R584 += 1, R552 += 1 };
  s5 -> s5 [87, 65535] { R584 += 1, R552 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R584 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 75] { R584 += 1, R552 += 1 };
  s8 -> s8 [0, 65535] { R584 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [87, 65535] { R584 += 1, R552 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 74] { R586 += 1, R554 += 1, R45 += 1 };
  s0 -> s0 [0, 65535] { R585 += 1, R586 += 1 };
  s0 -> s2 [0, 65535] { R586 += 1, R553 += 1, R554 += 1 };
  s0 -> s3 [75, 75] { R586 += 1, R554 += 1, R45 += 1 };
  s0 -> s4 [75, 75] { R586 += 1, R554 += 1, R45 += 1 };
  s0 -> s1 [76, 65535] { R586 += 1, R554 += 1, R45 += 1 };
  s1 -> s1 [0, 74] { R586 += 1, R554 += 1, R45 += 1 };
  s1 -> s1 [0, 65535] { R586 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [75, 75] { R586 += 1, R554 += 1, R45 += 1 };
  s1 -> s4 [75, 75] { R586 += 1, R554 += 1, R45 += 1 };
  s1 -> s1 [76, 65535] { R586 += 1, R554 += 1, R45 += 1 };
  s2 -> s1 [0, 74] { R586 += 1, R554 += 1, R45 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R586 += 1, R553 += 1, R554 += 1 };
  s2 -> s3 [75, 75] { R586 += 1, R554 += 1, R45 += 1 };
  s2 -> s4 [75, 75] { R586 += 1, R554 += 1, R45 += 1 };
  s2 -> s1 [76, 65535] { R586 += 1, R554 += 1, R45 += 1 };
  s3 -> s6 [0, 65535] { R586 += 1 };
  s3 -> s3 [0, 65535] { R586 += 1, R554 += 1, R45 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R586 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R586 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 74] { R588 += 1, R556 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R587 += 1, R588 += 1 };
  s0 -> s2 [0, 65535] { R588 += 1, R555 += 1, R556 += 1 };
  s0 -> s3 [75, 75] { R588 += 1, R556 += 1, R47 += 1 };
  s0 -> s4 [75, 75] { R588 += 1, R556 += 1, R47 += 1 };
  s0 -> s1 [76, 65535] { R588 += 1, R556 += 1, R47 += 1 };
  s1 -> s1 [0, 74] { R588 += 1, R556 += 1, R47 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R588 += 1 };
  s1 -> s3 [75, 75] { R588 += 1, R556 += 1, R47 += 1 };
  s1 -> s4 [75, 75] { R588 += 1, R556 += 1, R47 += 1 };
  s1 -> s1 [76, 65535] { R588 += 1, R556 += 1, R47 += 1 };
  s2 -> s1 [0, 74] { R588 += 1, R556 += 1, R47 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R588 += 1, R555 += 1, R556 += 1 };
  s2 -> s3 [75, 75] { R588 += 1, R556 += 1, R47 += 1 };
  s2 -> s4 [75, 75] { R588 += 1, R556 += 1, R47 += 1 };
  s2 -> s1 [76, 65535] { R588 += 1, R556 += 1, R47 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R588 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R588 += 1 };
  s4 -> s4 [0, 65535] { R588 += 1, R556 += 1, R47 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R588 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 74] { R590 += 1, R558 += 1, R513 += 1, R514 += 1 };
  s0 -> s0 [0, 65535] { R589 += 1, R590 += 1 };
  s0 -> s2 [0, 65535] { R590 += 1, R557 += 1, R558 += 1 };
  s0 -> s3 [75, 75] { R590 += 1, R558 += 1, R513 += 1, R514 += 1 };
  s0 -> s4 [75, 75] { R590 += 1, R558 += 1, R513 += 1, R514 += 1 };
  s0 -> s1 [76, 65535] { R590 += 1, R558 += 1, R513 += 1, R514 += 1 };
  s1 -> s1 [0, 74] { R590 += 1, R558 += 1, R513 += 1, R514 += 1 };
  s1 -> s1 [0, 65535] { R590 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [75, 75] { R590 += 1, R558 += 1, R513 += 1, R514 += 1 };
  s1 -> s4 [75, 75] { R590 += 1, R558 += 1, R513 += 1, R514 += 1 };
  s1 -> s1 [76, 65535] { R590 += 1, R558 += 1, R513 += 1, R514 += 1 };
  s2 -> s1 [0, 74] { R590 += 1, R558 += 1, R513 += 1, R514 += 1 };
  s2 -> s2 [0, 65535] { R590 += 1, R557 += 1, R558 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [75, 75] { R590 += 1, R558 += 1, R513 += 1, R514 += 1 };
  s2 -> s4 [75, 75] { R590 += 1, R558 += 1, R513 += 1, R514 += 1 };
  s2 -> s1 [76, 65535] { R590 += 1, R558 += 1, R513 += 1, R514 += 1 };
  s3 -> s3 [0, 65535] { R590 += 1, R558 += 1, R513 += 1, R514 += 1 };
  s3 -> s6 [0, 65535] { R590 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R590 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R590 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 74] { R592 += 1, R560 += 1, R517 += 1, R518 += 1 };
  s0 -> s2 [0, 65535] { R592 += 1, R559 += 1, R560 += 1 };
  s0 -> s0 [0, 65535] { R591 += 1, R592 += 1 };
  s0 -> s3 [75, 75] { R592 += 1, R560 += 1, R517 += 1, R518 += 1 };
  s0 -> s4 [75, 75] { R592 += 1, R560 += 1, R517 += 1, R518 += 1 };
  s0 -> s1 [76, 65535] { R592 += 1, R560 += 1, R517 += 1, R518 += 1 };
  s1 -> s1 [0, 74] { R592 += 1, R560 += 1, R517 += 1, R518 += 1 };
  s1 -> s1 [0, 65535] { R592 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [75, 75] { R592 += 1, R560 += 1, R517 += 1, R518 += 1 };
  s1 -> s4 [75, 75] { R592 += 1, R560 += 1, R517 += 1, R518 += 1 };
  s1 -> s1 [76, 65535] { R592 += 1, R560 += 1, R517 += 1, R518 += 1 };
  s2 -> s1 [0, 74] { R592 += 1, R560 += 1, R517 += 1, R518 += 1 };
  s2 -> s2 [0, 65535] { R592 += 1, R559 += 1, R560 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [75, 75] { R592 += 1, R560 += 1, R517 += 1, R518 += 1 };
  s2 -> s4 [75, 75] { R592 += 1, R560 += 1, R517 += 1, R518 += 1 };
  s2 -> s1 [76, 65535] { R592 += 1, R560 += 1, R517 += 1, R518 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R592 += 1, R560 += 1, R517 += 1, R518 += 1 };
  s3 -> s6 [0, 65535] { R592 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R592 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R592 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [107, 107];
  accepting s1;
};
};
constraint R1 = R534 && R2 = R592 && R19 - R592 = -1 && R20 = R592 && R21 - R592 = -1 && R22 = R592 && R23 = 0 && R24 = 1 && R25 = 0 && R26 = 1 && R31 + R46 + R45 + -1*R516 + -1*R514 - R36 = 0 && R35 + R515 + R513 = 0 && R533 = 0 && R551 = 0 && R552 = 0 && R561 = 0 && R562 = R592 && R563 = 0 && R564 = R592 && R565 = 0 && R566 = R592 && R567 = 0 && R568 = R592 && R569 = 0 && R570 = R592 && R571 = 0 && R572 = R592 && R573 = 0 && R574 = R592 && R575 = 0 && R576 = R592 && R577 = 0 && R578 = R592 && R579 = 0 && R580 = R592 && R581 = 0 && R582 = R592 && R583 = 0 && R584 = R592 && R585 = 0 && R586 = R592 && R587 = 0 && R588 = R592 && R589 = 0 && R590 = R592 && R591 = 0 && R8 < 1 && R11 < 1 && R12 < 1 && R33 + R48 + R47 < 1 && -1*R516 + -1*R514 - R36 < 1 && -1 < R534 && 0 < R592 && (R36 + R516 + R514 != 0 || R41 + R522 + R519 = 0 || (R39 + R520 + R517 = 0 && R40 + R521 + R518 = 0)) && (R39 + R520 + R517 != 0 || R36 + R516 + R514 + -1*R521 + -1*R518 - R40 = 0 || R36 + R516 + R514 < 1) && (R523 != 0 || R524 = R534 || (R16 = 0 && R534 = 0)) && (R525 != 0 || R526 = R534 || (R16 = 0 && R534 = 0)) && (R527 != 0 || R528 = R534 || (R16 = 0 && R534 = 0)) && (R529 != 0 || R530 = R534 || (R16 = 0 && R534 = 0)) && (R531 != 0 || R532 = R534 || (R16 = 0 && R534 = 0)) && (R535 != 0 || R534 = R536 || (R16 = 0 && R534 = 0)) && (R17 = 0 || (R549 = 0 && R550 = 0)) && (R17 = 0 || (R553 = 0 && R554 = 0)) && (R17 = 0 || (R555 = 0 && R556 = 0)) && (R17 = 0 || (R557 = 0 && R558 = 0)) && (R17 = 0 || (R559 = 0 && R560 = 0)) && (R18 = 0 || (R537 = 0 && R538 = 0)) && (R18 = 0 || (R539 = 0 && R540 = 0)) && (R18 = 0 || (R541 = 0 && R542 = 0)) && (R18 = 0 || (R543 = 0 && R544 = 0)) && (R18 = 0 || (R545 = 0 && R546 = 0)) && (R18 = 0 || (R547 = 0 && R548 = 0)) && (R39 + R520 + R517 = 0 || R36 + R516 + R514 < 1) && (R523 = 0 || (R16 = 0 && R534 = 0)) && (R525 = 0 || (R16 = 0 && R534 = 0)) && (R527 = 0 || (R16 = 0 && R534 = 0)) && (R529 = 0 || (R16 = 0 && R534 = 0)) && (R531 = 0 || (R16 = 0 && R534 = 0)) && (R535 = 0 || (R16 = 0 && R534 = 0));
// End of Parikh automata intersection problem
