// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R12, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R3890, R3891, R3892, R3893, R3894, R3895, R4, R40, R42, R43, R46, R47, R48, R5166, R5167, R5168, R5169, R52, R53, R5592, R5593, R5594, R5595, R5596, R5597, R56, R57, R58, R5806, R5807, R5808, R5809, R5810, R5811, R5812, R5813, R5814, R5815, R5816, R5817, R5818, R5819, R5820, R5821, R5822, R5823, R5824, R5825, R5826, R5827, R5828, R5829, R5830, R5831, R5832, R5833, R5834, R5835, R5836, R5837, R5838, R5839, R5840, R5841, R5842, R5843, R5844, R5845, R5846, R5847, R5848, R5849, R5850, R5851, R5852, R5853, R5854, R5855, R5856, R5857, R5858, R5859, R5860, R5861, R5862, R5863, R5864, R5865, R5866, R5867, R5868, R5869, R5870, R5871, R5872, R5873, R5874, R5875, R5876, R5877, R5878, R5879, R5880, R5881, R5882, R5883, R5884, R5885, R5886, R5887, R5888, R5889, R5890, R5891, R5892, R5893, R5894, R5895, R5896, R5897, R5898, R5899, R5900, R5901, R5902, R5903, R5904, R5905, R5906, R5907, R5908, R5909, R62, R63, R66, R67, R68, R69, R70, R71, R72, R73, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 72];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [73, 73];
  s0 -> s1 [74, 65535];
  s1 -> s1 [0, 72];
  s1 -> s2 [73, 73];
  s1 -> s1 [74, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s1 [0, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R25 += 1 };
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R5831 += 1, R19 += 1 };
  s0 -> s0 [0, 65535] { R5830 += 1, R5831 += 1 };
  s1 -> s1 [0, 65535] { R5831 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 72] { R5833 += 1 };
  s0 -> s0 [0, 65535] { R5832 += 1, R5833 += 1 };
  s0 -> s2 [73, 73] { R5833 += 1 };
  s0 -> s3 [73, 73] { R5833 += 1 };
  s0 -> s1 [78, 65535] { R5833 += 1 };
  s1 -> s1 [0, 72] { R5833 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R5833 += 1 };
  s1 -> s3 [73, 73] { R5833 += 1 };
  s1 -> s1 [78, 65535] { R5833 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 73] { R5833 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [78, 65535] { R5833 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 72] { R5835 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R5834 += 1, R5835 += 1 };
  s0 -> s2 [73, 73] { R5835 += 1, R38 += 1 };
  s0 -> s3 [73, 73] { R5835 += 1, R38 += 1 };
  s0 -> s1 [74, 65535] { R5835 += 1, R38 += 1 };
  s1 -> s1 [0, 72] { R5835 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R5835 += 1, R38 += 1 };
  s1 -> s3 [73, 73] { R5835 += 1, R38 += 1 };
  s1 -> s1 [74, 65535] { R5835 += 1, R38 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R5835 += 1, R38 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 72] { R5837 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R5836 += 1, R5837 += 1 };
  s0 -> s2 [73, 73] { R5837 += 1, R40 += 1 };
  s0 -> s3 [73, 73] { R5837 += 1, R40 += 1 };
  s0 -> s1 [74, 65535] { R5837 += 1, R40 += 1 };
  s1 -> s1 [0, 72] { R5837 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R5837 += 1, R40 += 1 };
  s1 -> s3 [73, 73] { R5837 += 1, R40 += 1 };
  s1 -> s1 [74, 65535] { R5837 += 1, R40 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R5837 += 1, R40 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 72] { R5839 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R5838 += 1, R5839 += 1 };
  s0 -> s2 [73, 73] { R5839 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [73, 73] { R5839 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [74, 65535] { R5839 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 72] { R5839 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R5839 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [73, 73] { R5839 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [74, 65535] { R5839 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535] { R5839 += 1, R42 += 1, R43 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 72] { R5841 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R5840 += 1, R5841 += 1 };
  s0 -> s2 [73, 73] { R5841 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [73, 73] { R5841 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [74, 65535] { R5841 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 72] { R5841 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R5841 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [73, 73] { R5841 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [74, 65535] { R5841 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R5841 += 1, R46 += 1, R47 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 72] { R5843 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R5842 += 1, R5843 += 1 };
  s0 -> s2 [73, 73] { R5843 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [73, 73] { R5843 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [74, 65535] { R5843 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 72] { R5843 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R5843 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [73, 73] { R5843 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [74, 65535] { R5843 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R5843 += 1, R52 += 1, R53 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 72] { R5845 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R5844 += 1, R5845 += 1 };
  s0 -> s2 [73, 73] { R5845 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [73, 73] { R5845 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [74, 65535] { R5845 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 72] { R5845 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R5845 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [73, 73] { R5845 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [74, 65535] { R5845 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R5845 += 1, R56 += 1, R57 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 72] { R5847 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R5846 += 1, R5847 += 1 };
  s0 -> s2 [73, 73] { R5847 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [73, 73] { R5847 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [74, 65535] { R5847 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 72] { R5847 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R5847 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [73, 73] { R5847 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [74, 65535] { R5847 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535] { R5847 += 1, R62 += 1, R63 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 72] { R5867 += 1 };
  s0 -> s0 [0, 65535] { R5866 += 1, R5867 += 1 };
  s0 -> s2 [73, 73] { R5867 += 1 };
  s0 -> s1 [74, 65535] { R5867 += 1 };
  s1 -> s1 [0, 72] { R5867 += 1 };
  s1 -> s2 [73, 73] { R5867 += 1 };
  s1 -> s1 [74, 65535] { R5867 += 1 };
  s2 -> s2 [0, 65535] { R5867 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R5869 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R5868 += 1, R5869 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R5869 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 72] { R5871 += 1 };
  s0 -> s0 [0, 65535] { R5870 += 1, R5871 += 1 };
  s0 -> s2 [0, 65535] { R5871 += 1, R8 += 1 };
  s0 -> s3 [73, 73] { R5871 += 1 };
  s0 -> s1 [74, 65535] { R5871 += 1 };
  s1 -> s1 [0, 72] { R5871 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [73, 73] { R5871 += 1 };
  s1 -> s1 [74, 65535] { R5871 += 1 };
  s2 -> s1 [0, 72] { R5871 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R5871 += 1, R8 += 1 };
  s2 -> s3 [73, 73] { R5871 += 1 };
  s2 -> s1 [74, 65535] { R5871 += 1 };
  s3 -> s3 [0, 65535] { R5871 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 72] { R5873 += 1, R5811 += 1 };
  s0 -> s0 [0, 65535] { R5872 += 1, R5873 += 1 };
  s0 -> s2 [0, 65535] { R5873 += 1, R5810 += 1, R5811 += 1 };
  s0 -> s1 [74, 65535] { R5873 += 1, R5811 += 1 };
  s1 -> s1 [0, 72] { R5873 += 1, R5811 += 1 };
  s1 -> s1 [0, 65535] { R5873 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [74, 65535] { R5873 += 1, R5811 += 1 };
  s2 -> s1 [0, 72] { R5873 += 1, R5811 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R5873 += 1, R5810 += 1, R5811 += 1 };
  s2 -> s1 [74, 65535] { R5873 += 1, R5811 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R5875 += 1, R5813 += 1, R17 += 1 };
  s0 -> s0 [0, 65535] { R5874 += 1, R5875 += 1 };
  s0 -> s2 [0, 65535] { R5875 += 1, R5812 += 1, R5813 += 1 };
  s1 -> s1 [0, 65535] { R5875 += 1, R5813 += 1, R17 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R5875 += 1 };
  s2 -> s1 [0, 65535] { R5875 += 1, R5813 += 1, R17 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R5875 += 1, R5812 += 1, R5813 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R5875 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 73] { R5877 += 1, R5815 += 1 };
  s0 -> s0 [0, 65535] { R5876 += 1, R5877 += 1 };
  s0 -> s2 [0, 65535] { R5877 += 1, R5814 += 1, R5815 += 1 };
  s0 -> s1 [77, 65535] { R5877 += 1, R5815 += 1 };
  s1 -> s1 [0, 73] { R5877 += 1, R5815 += 1 };
  s1 -> s1 [0, 65535] { R5877 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [77, 65535] { R5877 += 1, R5815 += 1 };
  s2 -> s1 [0, 73] { R5877 += 1, R5815 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R5877 += 1, R5814 += 1, R5815 += 1 };
  s2 -> s1 [77, 65535] { R5877 += 1, R5815 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R5879 += 1, R5817 += 1, R67 += 1 };
  s0 -> s2 [0, 65535] { R5879 += 1, R5816 += 1, R5817 += 1 };
  s0 -> s0 [0, 65535] { R5878 += 1, R5879 += 1 };
  s1 -> s1 [0, 65535] { R5879 += 1, R5817 += 1, R67 += 1 };
  s1 -> s4 [0, 65535] { R5879 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R5879 += 1, R5817 += 1, R67 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R5879 += 1, R5816 += 1, R5817 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R5879 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 76] { R5881 += 1, R5819 += 1 };
  s0 -> s2 [0, 65535] { R5881 += 1, R5819 += 1, R69 += 1 };
  s0 -> s0 [0, 65535] { R5880 += 1, R5881 += 1 };
  s0 -> s3 [0, 65535] { R5881 += 1, R5818 += 1, R5819 += 1 };
  s0 -> s1 [78, 65535] { R5881 += 1, R5819 += 1 };
  s1 -> s1 [0, 76] { R5881 += 1, R5819 += 1 };
  s1 -> s1 [0, 65535] { R5881 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [78, 65535] { R5881 += 1, R5819 += 1 };
  s2 -> s1 [0, 76] { R5881 += 1, R5819 += 1 };
  s2 -> s2 [0, 65535] { R5881 += 1, R5819 += 1, R69 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R5881 += 1 };
  s2 -> s1 [78, 65535] { R5881 += 1, R5819 += 1 };
  s3 -> s1 [0, 76] { R5881 += 1, R5819 += 1 };
  s3 -> s2 [0, 65535] { R5881 += 1, R5819 += 1, R69 += 1 };
  s3 -> s3 [0, 65535] { R5881 += 1, R5818 += 1, R5819 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [78, 65535] { R5881 += 1, R5819 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R5881 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 76] { R5883 += 1, R5821 += 1, R73 += 1 };
  s0 -> s2 [0, 65535] { R5883 += 1, R5820 += 1, R5821 += 1 };
  s0 -> s3 [0, 65535] { R5883 += 1, R5821 += 1, R72 += 1, R73 += 1 };
  s0 -> s0 [0, 65535] { R5882 += 1, R5883 += 1 };
  s0 -> s1 [78, 65535] { R5883 += 1, R5821 += 1, R73 += 1 };
  s1 -> s1 [0, 76] { R5883 += 1, R5821 += 1, R73 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R5883 += 1 };
  s1 -> s1 [0, 65535] { R5883 += 1, R5821 += 1 };
  s1 -> s1 [78, 65535] { R5883 += 1, R5821 += 1, R73 += 1 };
  s2 -> s1 [0, 76] { R5883 += 1, R5821 += 1, R73 += 1 };
  s2 -> s2 [0, 65535] { R5883 += 1, R5820 += 1, R5821 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R5883 += 1, R5821 += 1, R72 += 1, R73 += 1 };
  s2 -> s1 [78, 65535] { R5883 += 1, R5821 += 1, R73 += 1 };
  s3 -> s1 [0, 76] { R5883 += 1, R5821 += 1, R73 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R5883 += 1, R5821 += 1, R72 += 1, R73 += 1 };
  s3 -> s5 [0, 65535] { R5883 += 1 };
  s3 -> s1 [78, 65535] { R5883 += 1, R5821 += 1, R73 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R5883 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R5885 += 1, R5823 += 1, R3894 += 1, R3895 += 1 };
  s0 -> s2 [0, 65535] { R5885 += 1, R5823 += 1 };
  s0 -> s3 [0, 65535] { R5885 += 1, R5822 += 1, R5823 += 1 };
  s0 -> s0 [0, 65535] { R5884 += 1, R5885 += 1 };
  s1 -> s5 [0, 65535] { R5885 += 1 };
  s1 -> s1 [0, 65535] { R5885 += 1, R5823 += 1, R3894 += 1, R3895 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R5885 += 1, R5823 += 1 };
  s2 -> s5 [0, 65535] { R5885 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R5885 += 1, R5823 += 1 };
  s3 -> s1 [0, 65535] { R5885 += 1, R5823 += 1, R3894 += 1, R3895 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R5885 += 1, R5823 += 1 };
  s3 -> s3 [0, 65535] { R5885 += 1, R5822 += 1, R5823 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R5885 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 77] { R5887 += 1, R5825 += 1, R5169 += 1 };
  s0 -> s0 [0, 65535] { R5886 += 1, R5887 += 1 };
  s0 -> s2 [0, 65535] { R5887 += 1, R5824 += 1, R5825 += 1 };
  s0 -> s3 [89, 89] { R5887 += 1, R5825 += 1, R5169 += 1 };
  s0 -> s1 [90, 65535] { R5887 += 1, R5825 += 1, R5169 += 1 };
  s1 -> s1 [0, 77] { R5887 += 1, R5825 += 1, R5169 += 1 };
  s1 -> s3 [89, 89] { R5887 += 1, R5825 += 1, R5169 += 1 };
  s1 -> s1 [90, 65535] { R5887 += 1, R5825 += 1, R5169 += 1 };
  s2 -> s1 [0, 77] { R5887 += 1, R5825 += 1, R5169 += 1 };
  s2 -> s2 [0, 65535] { R5887 += 1, R5824 += 1, R5825 += 1 };
  s2 -> s3 [89, 89] { R5887 += 1, R5825 += 1, R5169 += 1 };
  s2 -> s1 [90, 65535] { R5887 += 1, R5825 += 1, R5169 += 1 };
  s3 -> s3 [0, 77] { R5887 += 1, R5825 += 1, R5169 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R5887 += 1 };
  s3 -> s3 [0, 65535] { R5887 += 1, R5825 += 1 };
  s3 -> s3 [89, 65535] { R5887 += 1, R5825 += 1, R5169 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R5887 += 1 };
  accepting s3, s4, s5;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R5889 += 1, R5827 += 1, R5596 += 1, R5597 += 1 };
  s0 -> s0 [0, 65535] { R5888 += 1, R5889 += 1 };
  s0 -> s2 [0, 65535] { R5889 += 1, R5827 += 1 };
  s0 -> s3 [0, 65535] { R5889 += 1, R5826 += 1, R5827 += 1 };
  s1 -> s1 [0, 65535] { R5889 += 1, R5827 += 1, R5596 += 1, R5597 += 1 };
  s1 -> s2 [0, 65535] { R5889 += 1, R5827 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R5889 += 1 };
  s2 -> s2 [0, 65535] { R5889 += 1, R5827 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R5889 += 1 };
  s3 -> s1 [0, 65535] { R5889 += 1, R5827 += 1, R5596 += 1, R5597 += 1 };
  s3 -> s2 [0, 65535] { R5889 += 1, R5827 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R5889 += 1, R5826 += 1, R5827 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R5889 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 65535] { R5891 += 1, R5829 += 1 };
  s0 -> s2 [0, 65535] { R5891 += 1, R5828 += 1, R5829 += 1 };
  s0 -> s0 [0, 65535] { R5890 += 1, R5891 += 1 };
  s1 -> s1 [0, 65535] { R5891 += 1, R5829 += 1 };
  s1 -> s4 [0, 65535] { R5891 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R5891 += 1, R5829 += 1 };
  s2 -> s2 [0, 65535] { R5891 += 1, R5828 += 1, R5829 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R5891 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R5893 += 1, R5848 += 1, R5849 += 1 };
  s0 -> s2 [0, 65535] { R5893 += 1, R5849 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R5892 += 1, R5893 += 1 };
  s1 -> s1 [0, 65535] { R5893 += 1, R5848 += 1, R5849 += 1 };
  s1 -> s2 [0, 65535] { R5893 += 1, R5849 += 1, R18 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R5893 += 1 };
  s2 -> s2 [0, 65535] { R5893 += 1, R5849 += 1, R18 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R5893 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 72] { R5895 += 1, R5851 += 1 };
  s0 -> s0 [0, 65535] { R5894 += 1, R5895 += 1 };
  s0 -> s2 [0, 65535] { R5895 += 1, R5850 += 1, R5851 += 1 };
  s0 -> s3 [73, 73] { R5895 += 1, R5851 += 1 };
  s0 -> s4 [73, 73] { R5895 += 1, R5851 += 1 };
  s0 -> s5 [77, 77] { R5895 += 1, R5851 += 1 };
  s0 -> s1 [78, 65535] { R5895 += 1, R5851 += 1 };
  s1 -> s1 [0, 72] { R5895 += 1, R5851 += 1 };
  s1 -> s3 [73, 73] { R5895 += 1, R5851 += 1 };
  s1 -> s4 [73, 73] { R5895 += 1, R5851 += 1 };
  s1 -> s5 [77, 77] { R5895 += 1, R5851 += 1 };
  s1 -> s1 [78, 65535] { R5895 += 1, R5851 += 1 };
  s2 -> s1 [0, 72] { R5895 += 1, R5851 += 1 };
  s2 -> s2 [0, 65535] { R5895 += 1, R5850 += 1, R5851 += 1 };
  s2 -> s3 [73, 73] { R5895 += 1, R5851 += 1 };
  s2 -> s4 [73, 73] { R5895 += 1, R5851 += 1 };
  s2 -> s5 [77, 77] { R5895 += 1, R5851 += 1 };
  s2 -> s1 [78, 65535] { R5895 += 1, R5851 += 1 };
  s4 -> s4 [0, 73] { R5895 += 1, R5851 += 1 };
  s4 -> s8 [77, 77] { R5895 += 1, R5851 += 1 };
  s4 -> s4 [78, 65535] { R5895 += 1, R5851 += 1 };
  s5 -> s5 [0, 72] { R5895 += 1, R5851 += 1 };
  s5 -> s5 [0, 65535] { R5895 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [73, 73] { R5895 += 1, R5851 += 1 };
  s5 -> s8 [73, 73] { R5895 += 1, R5851 += 1 };
  s5 -> s5 [77, 65535] { R5895 += 1, R5851 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R5895 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 73] { R5895 += 1, R5851 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R5895 += 1 };
  s8 -> s8 [77, 65535] { R5895 += 1, R5851 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 72] { R5897 += 1, R5853 += 1, R66 += 1 };
  s0 -> s2 [0, 65535] { R5897 += 1, R5852 += 1, R5853 += 1 };
  s0 -> s0 [0, 65535] { R5896 += 1, R5897 += 1 };
  s0 -> s3 [73, 73] { R5897 += 1, R5853 += 1, R66 += 1 };
  s0 -> s4 [73, 73] { R5897 += 1, R5853 += 1, R66 += 1 };
  s0 -> s1 [74, 65535] { R5897 += 1, R5853 += 1, R66 += 1 };
  s1 -> s1 [0, 72] { R5897 += 1, R5853 += 1, R66 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R5897 += 1 };
  s1 -> s3 [73, 73] { R5897 += 1, R5853 += 1, R66 += 1 };
  s1 -> s4 [73, 73] { R5897 += 1, R5853 += 1, R66 += 1 };
  s1 -> s1 [74, 65535] { R5897 += 1, R5853 += 1, R66 += 1 };
  s2 -> s1 [0, 72] { R5897 += 1, R5853 += 1, R66 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R5897 += 1, R5852 += 1, R5853 += 1 };
  s2 -> s3 [73, 73] { R5897 += 1, R5853 += 1, R66 += 1 };
  s2 -> s4 [73, 73] { R5897 += 1, R5853 += 1, R66 += 1 };
  s2 -> s1 [74, 65535] { R5897 += 1, R5853 += 1, R66 += 1 };
  s3 -> s3 [0, 65535] { R5897 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R5897 += 1 };
  s4 -> s4 [0, 65535] { R5897 += 1, R5853 += 1, R66 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R5897 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 72] { R5899 += 1, R5855 += 1, R68 += 1 };
  s0 -> s0 [0, 65535] { R5898 += 1, R5899 += 1 };
  s0 -> s2 [0, 65535] { R5899 += 1, R5854 += 1, R5855 += 1 };
  s0 -> s3 [73, 73] { R5899 += 1, R5855 += 1, R68 += 1 };
  s0 -> s4 [73, 73] { R5899 += 1, R5855 += 1, R68 += 1 };
  s0 -> s1 [74, 65535] { R5899 += 1, R5855 += 1, R68 += 1 };
  s1 -> s1 [0, 72] { R5899 += 1, R5855 += 1, R68 += 1 };
  s1 -> s1 [0, 65535] { R5899 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R5899 += 1, R5855 += 1, R68 += 1 };
  s1 -> s4 [73, 73] { R5899 += 1, R5855 += 1, R68 += 1 };
  s1 -> s1 [74, 65535] { R5899 += 1, R5855 += 1, R68 += 1 };
  s2 -> s1 [0, 72] { R5899 += 1, R5855 += 1, R68 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R5899 += 1, R5854 += 1, R5855 += 1 };
  s2 -> s3 [73, 73] { R5899 += 1, R5855 += 1, R68 += 1 };
  s2 -> s4 [73, 73] { R5899 += 1, R5855 += 1, R68 += 1 };
  s2 -> s1 [74, 65535] { R5899 += 1, R5855 += 1, R68 += 1 };
  s3 -> s3 [0, 65535] { R5899 += 1, R5855 += 1, R68 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R5899 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R5899 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R5899 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 72] { R5901 += 1, R5857 += 1, R70 += 1, R71 += 1 };
  s0 -> s2 [0, 65535] { R5901 += 1, R5856 += 1, R5857 += 1 };
  s0 -> s0 [0, 65535] { R5900 += 1, R5901 += 1 };
  s0 -> s3 [73, 73] { R5901 += 1, R5857 += 1, R70 += 1, R71 += 1 };
  s0 -> s4 [73, 73] { R5901 += 1, R5857 += 1, R70 += 1, R71 += 1 };
  s0 -> s1 [74, 65535] { R5901 += 1, R5857 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 72] { R5901 += 1, R5857 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 65535] { R5901 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R5901 += 1, R5857 += 1, R70 += 1, R71 += 1 };
  s1 -> s4 [73, 73] { R5901 += 1, R5857 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [74, 65535] { R5901 += 1, R5857 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [0, 72] { R5901 += 1, R5857 += 1, R70 += 1, R71 += 1 };
  s2 -> s2 [0, 65535] { R5901 += 1, R5856 += 1, R5857 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R5901 += 1, R5857 += 1, R70 += 1, R71 += 1 };
  s2 -> s4 [73, 73] { R5901 += 1, R5857 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [74, 65535] { R5901 += 1, R5857 += 1, R70 += 1, R71 += 1 };
  s3 -> s3 [0, 65535] { R5901 += 1, R5857 += 1, R70 += 1, R71 += 1 };
  s3 -> s6 [0, 65535] { R5901 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R5901 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R5901 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 72] { R5903 += 1, R5859 += 1, R3890 += 1, R3891 += 1 };
  s0 -> s2 [0, 72] { R5903 += 1, R5859 += 1, R3891 += 1, R3892 += 1 };
  s0 -> s0 [0, 65535] { R5902 += 1, R5903 += 1 };
  s0 -> s3 [0, 65535] { R5903 += 1, R5858 += 1, R5859 += 1 };
  s0 -> s4 [73, 73] { R5903 += 1, R5859 += 1, R3890 += 1, R3891 += 1 };
  s0 -> s5 [73, 73] { R5903 += 1, R5859 += 1, R3891 += 1, R3892 += 1 };
  s0 -> s6 [73, 73] { R5903 += 1, R5859 += 1, R3891 += 1, R3892 += 1 };
  s0 -> s7 [73, 73] { R5903 += 1, R5859 += 1, R3890 += 1, R3891 += 1 };
  s0 -> s1 [74, 65535] { R5903 += 1, R5859 += 1, R3890 += 1, R3891 += 1 };
  s0 -> s2 [74, 65535] { R5903 += 1, R5859 += 1, R3891 += 1, R3892 += 1 };
  s1 -> s1 [0, 72] { R5903 += 1, R5859 += 1, R3890 += 1, R3891 += 1 };
  s1 -> s2 [0, 72] { R5903 += 1, R5859 += 1, R3891 += 1, R3892 += 1 };
  s1 -> s4 [73, 73] { R5903 += 1, R5859 += 1, R3890 += 1, R3891 += 1 };
  s1 -> s5 [73, 73] { R5903 += 1, R5859 += 1, R3891 += 1, R3892 += 1 };
  s1 -> s6 [73, 73] { R5903 += 1, R5859 += 1, R3891 += 1, R3892 += 1 };
  s1 -> s7 [73, 73] { R5903 += 1, R5859 += 1, R3890 += 1, R3891 += 1 };
  s1 -> s1 [74, 65535] { R5903 += 1, R5859 += 1, R3890 += 1, R3891 += 1 };
  s1 -> s2 [74, 65535] { R5903 += 1, R5859 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s2 [0, 72] { R5903 += 1, R5859 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s2 [0, 65535] { R5903 += 1 };
  s2 -> s9 [0, 65535];
  s2 -> s5 [73, 73] { R5903 += 1, R5859 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s6 [73, 73] { R5903 += 1, R5859 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s2 [74, 65535] { R5903 += 1, R5859 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s1 [0, 72] { R5903 += 1, R5859 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s2 [0, 72] { R5903 += 1, R5859 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s3 [0, 65535] { R5903 += 1, R5858 += 1, R5859 += 1 };
  s3 -> s4 [73, 73] { R5903 += 1, R5859 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s5 [73, 73] { R5903 += 1, R5859 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s6 [73, 73] { R5903 += 1, R5859 += 1, R3891 += 1, R3892 += 1 };
  s3 -> s7 [73, 73] { R5903 += 1, R5859 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s1 [74, 65535] { R5903 += 1, R5859 += 1, R3890 += 1, R3891 += 1 };
  s3 -> s2 [74, 65535] { R5903 += 1, R5859 += 1, R3891 += 1, R3892 += 1 };
  s5 -> s5 [0, 65535] { R5903 += 1 };
  s5 -> s9 [0, 65535];
  s6 -> s8 [0, 65535] { R5903 += 1 };
  s6 -> s6 [0, 65535] { R5903 += 1, R5859 += 1, R3891 += 1, R3892 += 1 };
  s6 -> s9 [0, 65535];
  s7 -> s6 [0, 65535] { R5903 += 1, R5859 += 1, R3891 += 1, R3892 += 1 };
  s7 -> s7 [0, 65535] { R5903 += 1, R5859 += 1, R3890 += 1, R3891 += 1 };
  s8 -> s8 [0, 65535] { R5903 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s8, s5, s2, s9, s6;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 72] { R5905 += 1, R5861 += 1, R5167 += 1 };
  s0 -> s2 [0, 72] { R5905 += 1, R5861 += 1, R5166 += 1, R5167 += 1 };
  s0 -> s0 [0, 65535] { R5904 += 1, R5905 += 1 };
  s0 -> s3 [0, 65535] { R5905 += 1, R5860 += 1, R5861 += 1 };
  s0 -> s4 [73, 73] { R5905 += 1, R5861 += 1, R5167 += 1 };
  s0 -> s5 [73, 73] { R5905 += 1, R5861 += 1, R5166 += 1, R5167 += 1 };
  s0 -> s6 [73, 73] { R5905 += 1, R5861 += 1, R5167 += 1 };
  s0 -> s7 [73, 73] { R5905 += 1, R5861 += 1, R5166 += 1, R5167 += 1 };
  s0 -> s1 [74, 77] { R5905 += 1, R5861 += 1, R5167 += 1 };
  s0 -> s2 [74, 65535] { R5905 += 1, R5861 += 1, R5166 += 1, R5167 += 1 };
  s0 -> s1 [90, 65535] { R5905 += 1, R5861 += 1, R5167 += 1 };
  s1 -> s1 [0, 72] { R5905 += 1, R5861 += 1, R5167 += 1 };
  s1 -> s1 [0, 65535] { R5905 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s4 [73, 73] { R5905 += 1, R5861 += 1, R5167 += 1 };
  s1 -> s6 [73, 73] { R5905 += 1, R5861 += 1, R5167 += 1 };
  s1 -> s1 [74, 77] { R5905 += 1, R5861 += 1, R5167 += 1 };
  s1 -> s1 [90, 65535] { R5905 += 1, R5861 += 1, R5167 += 1 };
  s2 -> s1 [0, 72] { R5905 += 1, R5861 += 1, R5167 += 1 };
  s2 -> s2 [0, 72] { R5905 += 1, R5861 += 1, R5166 += 1, R5167 += 1 };
  s2 -> s4 [73, 73] { R5905 += 1, R5861 += 1, R5167 += 1 };
  s2 -> s5 [73, 73] { R5905 += 1, R5861 += 1, R5166 += 1, R5167 += 1 };
  s2 -> s6 [73, 73] { R5905 += 1, R5861 += 1, R5167 += 1 };
  s2 -> s7 [73, 73] { R5905 += 1, R5861 += 1, R5166 += 1, R5167 += 1 };
  s2 -> s1 [74, 77] { R5905 += 1, R5861 += 1, R5167 += 1 };
  s2 -> s2 [74, 65535] { R5905 += 1, R5861 += 1, R5166 += 1, R5167 += 1 };
  s2 -> s1 [90, 65535] { R5905 += 1, R5861 += 1, R5167 += 1 };
  s3 -> s1 [0, 72] { R5905 += 1, R5861 += 1, R5167 += 1 };
  s3 -> s2 [0, 72] { R5905 += 1, R5861 += 1, R5166 += 1, R5167 += 1 };
  s3 -> s3 [0, 65535] { R5905 += 1, R5860 += 1, R5861 += 1 };
  s3 -> s4 [73, 73] { R5905 += 1, R5861 += 1, R5167 += 1 };
  s3 -> s5 [73, 73] { R5905 += 1, R5861 += 1, R5166 += 1, R5167 += 1 };
  s3 -> s6 [73, 73] { R5905 += 1, R5861 += 1, R5167 += 1 };
  s3 -> s7 [73, 73] { R5905 += 1, R5861 += 1, R5166 += 1, R5167 += 1 };
  s3 -> s1 [74, 77] { R5905 += 1, R5861 += 1, R5167 += 1 };
  s3 -> s2 [74, 65535] { R5905 += 1, R5861 += 1, R5166 += 1, R5167 += 1 };
  s3 -> s1 [90, 65535] { R5905 += 1, R5861 += 1, R5167 += 1 };
  s4 -> s4 [0, 77] { R5905 += 1, R5861 += 1, R5167 += 1 };
  s4 -> s4 [0, 65535] { R5905 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s4 [90, 65535] { R5905 += 1, R5861 += 1, R5167 += 1 };
  s5 -> s4 [0, 77] { R5905 += 1, R5861 += 1, R5167 += 1 };
  s5 -> s5 [0, 65535] { R5905 += 1, R5861 += 1, R5166 += 1, R5167 += 1 };
  s5 -> s4 [90, 65535] { R5905 += 1, R5861 += 1, R5167 += 1 };
  s6 -> s6 [0, 65535] { R5905 += 1 };
  s6 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  accepting s1, s4, s6, s8;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 72] { R5907 += 1, R5863 += 1, R5593 += 1, R5594 += 1 };
  s0 -> s2 [0, 72] { R5907 += 1, R5863 += 1, R5592 += 1, R5593 += 1 };
  s0 -> s0 [0, 65535] { R5906 += 1, R5907 += 1 };
  s0 -> s3 [0, 65535] { R5907 += 1, R5862 += 1, R5863 += 1 };
  s0 -> s4 [73, 73] { R5907 += 1, R5863 += 1, R5592 += 1, R5593 += 1 };
  s0 -> s5 [73, 73] { R5907 += 1, R5863 += 1, R5593 += 1, R5594 += 1 };
  s0 -> s6 [73, 73] { R5907 += 1, R5863 += 1, R5592 += 1, R5593 += 1 };
  s0 -> s7 [73, 73] { R5907 += 1, R5863 += 1, R5593 += 1, R5594 += 1 };
  s0 -> s1 [74, 65535] { R5907 += 1, R5863 += 1, R5593 += 1, R5594 += 1 };
  s0 -> s2 [74, 65535] { R5907 += 1, R5863 += 1, R5592 += 1, R5593 += 1 };
  s1 -> s1 [0, 72] { R5907 += 1, R5863 += 1, R5593 += 1, R5594 += 1 };
  s1 -> s1 [0, 65535] { R5907 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s5 [73, 73] { R5907 += 1, R5863 += 1, R5593 += 1, R5594 += 1 };
  s1 -> s7 [73, 73] { R5907 += 1, R5863 += 1, R5593 += 1, R5594 += 1 };
  s1 -> s1 [74, 65535] { R5907 += 1, R5863 += 1, R5593 += 1, R5594 += 1 };
  s2 -> s1 [0, 72] { R5907 += 1, R5863 += 1, R5593 += 1, R5594 += 1 };
  s2 -> s2 [0, 72] { R5907 += 1, R5863 += 1, R5592 += 1, R5593 += 1 };
  s2 -> s4 [73, 73] { R5907 += 1, R5863 += 1, R5592 += 1, R5593 += 1 };
  s2 -> s5 [73, 73] { R5907 += 1, R5863 += 1, R5593 += 1, R5594 += 1 };
  s2 -> s6 [73, 73] { R5907 += 1, R5863 += 1, R5592 += 1, R5593 += 1 };
  s2 -> s7 [73, 73] { R5907 += 1, R5863 += 1, R5593 += 1, R5594 += 1 };
  s2 -> s1 [74, 65535] { R5907 += 1, R5863 += 1, R5593 += 1, R5594 += 1 };
  s2 -> s2 [74, 65535] { R5907 += 1, R5863 += 1, R5592 += 1, R5593 += 1 };
  s3 -> s1 [0, 72] { R5907 += 1, R5863 += 1, R5593 += 1, R5594 += 1 };
  s3 -> s2 [0, 72] { R5907 += 1, R5863 += 1, R5592 += 1, R5593 += 1 };
  s3 -> s3 [0, 65535] { R5907 += 1, R5862 += 1, R5863 += 1 };
  s3 -> s4 [73, 73] { R5907 += 1, R5863 += 1, R5592 += 1, R5593 += 1 };
  s3 -> s5 [73, 73] { R5907 += 1, R5863 += 1, R5593 += 1, R5594 += 1 };
  s3 -> s6 [73, 73] { R5907 += 1, R5863 += 1, R5592 += 1, R5593 += 1 };
  s3 -> s7 [73, 73] { R5907 += 1, R5863 += 1, R5593 += 1, R5594 += 1 };
  s3 -> s1 [74, 65535] { R5907 += 1, R5863 += 1, R5593 += 1, R5594 += 1 };
  s3 -> s2 [74, 65535] { R5907 += 1, R5863 += 1, R5592 += 1, R5593 += 1 };
  s5 -> s5 [0, 65535] { R5907 += 1, R5863 += 1, R5593 += 1, R5594 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s9 [0, 65535] { R5907 += 1 };
  s6 -> s5 [0, 65535] { R5907 += 1, R5863 += 1, R5593 += 1, R5594 += 1 };
  s6 -> s6 [0, 65535] { R5907 += 1, R5863 += 1, R5592 += 1, R5593 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R5907 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R5907 += 1 };
  accepting s8, s5, s9, s1, s7;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 72] { R5909 += 1, R5865 += 1, R5807 += 1 };
  s0 -> s2 [0, 72] { R5909 += 1, R5865 += 1, R5806 += 1, R5807 += 1 };
  s0 -> s3 [0, 65535] { R5909 += 1, R5864 += 1, R5865 += 1 };
  s0 -> s0 [0, 65535] { R5908 += 1, R5909 += 1 };
  s0 -> s4 [73, 73] { R5909 += 1, R5865 += 1, R5807 += 1 };
  s0 -> s5 [73, 73] { R5909 += 1, R5865 += 1, R5806 += 1, R5807 += 1 };
  s0 -> s6 [73, 73] { R5909 += 1, R5865 += 1, R5806 += 1, R5807 += 1 };
  s0 -> s7 [73, 73] { R5909 += 1, R5865 += 1, R5807 += 1 };
  s0 -> s1 [74, 76] { R5909 += 1, R5865 += 1, R5807 += 1 };
  s0 -> s2 [74, 65535] { R5909 += 1, R5865 += 1, R5806 += 1, R5807 += 1 };
  s0 -> s8 [77, 77] { R5909 += 1, R5865 += 1, R5807 += 1 };
  s0 -> s1 [90, 65535] { R5909 += 1, R5865 += 1, R5807 += 1 };
  s1 -> s1 [0, 72] { R5909 += 1, R5865 += 1, R5807 += 1 };
  s1 -> s4 [73, 73] { R5909 += 1, R5865 += 1 };
  s1 -> s7 [73, 73] { R5909 += 1, R5865 += 1 };
  s1 -> s1 [74, 76] { R5909 += 1, R5865 += 1, R5807 += 1 };
  s1 -> s1 [74, 65535] { R5909 += 1, R5865 += 1 };
  s1 -> s8 [77, 77] { R5909 += 1, R5865 += 1, R5807 += 1 };
  s1 -> s1 [90, 65535] { R5909 += 1, R5865 += 1, R5807 += 1 };
  s2 -> s1 [0, 72] { R5909 += 1, R5865 += 1, R5807 += 1 };
  s2 -> s2 [0, 72] { R5909 += 1, R5865 += 1, R5806 += 1, R5807 += 1 };
  s2 -> s4 [73, 73] { R5909 += 1, R5865 += 1, R5807 += 1 };
  s2 -> s5 [73, 73] { R5909 += 1, R5865 += 1, R5806 += 1, R5807 += 1 };
  s2 -> s6 [73, 73] { R5909 += 1, R5865 += 1, R5806 += 1, R5807 += 1 };
  s2 -> s7 [73, 73] { R5909 += 1, R5865 += 1, R5807 += 1 };
  s2 -> s1 [74, 76] { R5909 += 1, R5865 += 1, R5807 += 1 };
  s2 -> s2 [74, 65535] { R5909 += 1, R5865 += 1, R5806 += 1, R5807 += 1 };
  s2 -> s8 [77, 77] { R5909 += 1, R5865 += 1, R5807 += 1 };
  s2 -> s1 [90, 65535] { R5909 += 1, R5865 += 1, R5807 += 1 };
  s3 -> s1 [0, 72] { R5909 += 1, R5865 += 1, R5807 += 1 };
  s3 -> s2 [0, 72] { R5909 += 1, R5865 += 1, R5806 += 1, R5807 += 1 };
  s3 -> s3 [0, 65535] { R5909 += 1, R5864 += 1, R5865 += 1 };
  s3 -> s4 [73, 73] { R5909 += 1, R5865 += 1, R5807 += 1 };
  s3 -> s5 [73, 73] { R5909 += 1, R5865 += 1, R5806 += 1, R5807 += 1 };
  s3 -> s6 [73, 73] { R5909 += 1, R5865 += 1, R5806 += 1, R5807 += 1 };
  s3 -> s7 [73, 73] { R5909 += 1, R5865 += 1, R5807 += 1 };
  s3 -> s1 [74, 76] { R5909 += 1, R5865 += 1, R5807 += 1 };
  s3 -> s2 [74, 65535] { R5909 += 1, R5865 += 1, R5806 += 1, R5807 += 1 };
  s3 -> s8 [77, 77] { R5909 += 1, R5865 += 1, R5807 += 1 };
  s3 -> s1 [90, 65535] { R5909 += 1, R5865 += 1, R5807 += 1 };
  s5 -> s7 [0, 76] { R5909 += 1, R5865 += 1, R5807 += 1 };
  s5 -> s5 [0, 65535] { R5909 += 1, R5865 += 1, R5806 += 1, R5807 += 1 };
  s5 -> s11 [77, 77] { R5909 += 1, R5865 += 1, R5807 += 1 };
  s5 -> s7 [90, 65535] { R5909 += 1, R5865 += 1, R5807 += 1 };
  s7 -> s7 [0, 76] { R5909 += 1, R5865 += 1, R5807 += 1 };
  s7 -> s7 [0, 65535] { R5909 += 1, R5865 += 1 };
  s7 -> s11 [77, 77] { R5909 += 1, R5865 += 1, R5807 += 1 };
  s7 -> s7 [90, 65535] { R5909 += 1, R5865 += 1, R5807 += 1 };
  s8 -> s8 [0, 72] { R5909 += 1, R5865 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R5909 += 1 };
  s8 -> s10 [73, 73] { R5909 += 1, R5865 += 1 };
  s8 -> s11 [73, 73] { R5909 += 1, R5865 += 1 };
  s8 -> s8 [74, 65535] { R5909 += 1, R5865 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R5909 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s9 [0, 65535];
  s11 -> s12 [0, 65535] { R5909 += 1 };
  s11 -> s11 [0, 65535] { R5909 += 1, R5865 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R5909 += 1 };
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
synchronised {  // Automata constraining P54
automaton P54_0 {
  init s0;
  s0 -> s1 [109, 109];
  accepting s1;
};
};
constraint R1 = R5825 && R2 = R5909 && R20 - R5909 = -1 && R21 = R5909 && R22 - R5909 = -1 && R23 = R5909 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R5169 + -1*R5167 - R53 = 0 && R52 + R5168 + R5166 = 0 && R5824 = 0 && R5850 = 0 && R5851 = 0 && R5858 = 0 && R5859 = 0 && R5860 = 0 && R5861 = 0 && R5862 = 0 && R5863 = 0 && R5864 = 0 && R5865 = 0 && R5866 = 0 && R5867 = R5909 && R5868 = 0 && R5869 = R5909 && R5870 = 0 && R5871 = R5909 && R5872 = 0 && R5873 = R5909 && R5874 = 0 && R5875 = R5909 && R5876 = 0 && R5877 = R5909 && R5878 = 0 && R5879 = R5909 && R5880 = 0 && R5881 = R5909 && R5882 = 0 && R5883 = R5909 && R5884 = 0 && R5885 = R5909 && R5886 = 0 && R5887 = R5909 && R5888 = 0 && R5889 = R5909 && R5890 = 0 && R5891 = R5909 && R5892 = 0 && R5893 = R5909 && R5894 = 0 && R5895 = R5909 && R5896 = 0 && R5897 = R5909 && R5898 = 0 && R5899 = R5909 && R5900 = 0 && R5901 = R5909 && R5902 = 0 && R5903 = R5909 && R5904 = 0 && R5905 = R5909 && R5906 = 0 && R5907 = R5909 && R5908 = 0 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R5169 + -1*R5167 - R53 < 1 && -1 < R5825 && 0 < R5909 && (R48 + R3895 + R3892 != 0 || ((R42 + R72 + R70 != 0 || R43 + R73 + R71 + -1*R5169 + -1*R5167 - R53 = 0 || R53 + R5169 + R5167 < 1) && (R42 + R72 + R70 = 0 || R53 + R5169 + R5167 < 1))) && (R48 + R3895 + R3892 != 0 || ((R46 + R3893 + R3890 != 0 || R47 + R3894 + R3891 + -1*R5169 + -1*R5167 - R53 = 0 || R53 + R5169 + R5167 < 1) && (R46 + R3893 + R3890 = 0 || R53 + R5169 + R5167 < 1))) && (R5810 != 0 || R5811 = R5825 || (R17 = 0 && R5825 = 0)) && (R5812 != 0 || R5813 = R5825 || (R17 = 0 && R5825 = 0)) && (R5814 != 0 || R5815 = R5825 || (R17 = 0 && R5825 = 0)) && (R5816 != 0 || R5817 = R5825 || (R17 = 0 && R5825 = 0)) && (R5818 != 0 || R5819 = R5825 || (R17 = 0 && R5825 = 0)) && (R5820 != 0 || R5821 = R5825 || (R17 = 0 && R5825 = 0)) && (R5822 != 0 || R5823 = R5825 || (R17 = 0 && R5825 = 0)) && (R5826 != 0 || R5825 = R5827 || (R17 = 0 && R5825 = 0)) && (R5828 != 0 || R5825 = R5829 || (R17 = 0 && R5825 = 0)) && (R18 = 0 || (R5848 = 0 && R5849 = 0)) && (R18 = 0 || (R5852 = 0 && R5853 = 0)) && (R18 = 0 || (R5854 = 0 && R5855 = 0)) && (R18 = 0 || (R5856 = 0 && R5857 = 0)) && (R19 = 0 || (R5830 = 0 && R5831 = 0)) && (R19 = 0 || (R5832 = 0 && R5833 = 0)) && (R19 = 0 || (R5834 = 0 && R5835 = 0)) && (R19 = 0 || (R5836 = 0 && R5837 = 0)) && (R19 = 0 || (R5838 = 0 && R5839 = 0)) && (R19 = 0 || (R5840 = 0 && R5841 = 0)) && (R19 = 0 || (R5842 = 0 && R5843 = 0)) && (R19 = 0 || (R5844 = 0 && R5845 = 0)) && (R19 = 0 || (R5846 = 0 && R5847 = 0)) && (R48 + R3895 + R3892 = 0 || (R42 + R72 + R70 = 0 && R43 + R73 + R71 + -1*R5169 + -1*R5167 - R53 = 0)) && (R48 + R3895 + R3892 = 0 || (R46 + R3893 + R3890 = 0 && R47 + R3894 + R3891 + -1*R5169 + -1*R5167 - R53 = 0)) && (R58 + R5597 + R5594 = 0 || (R56 + R5595 + R5592 = 0 && R57 + R5596 + R5593 = 0)) && (R58 + R5597 + R5594 = 0 || (R62 + R5808 + R5806 = 0 && R63 + R5809 + R5807 = 0)) && (R5810 = 0 || (R17 = 0 && R5825 = 0)) && (R5812 = 0 || (R17 = 0 && R5825 = 0)) && (R5814 = 0 || (R17 = 0 && R5825 = 0)) && (R5816 = 0 || (R17 = 0 && R5825 = 0)) && (R5818 = 0 || (R17 = 0 && R5825 = 0)) && (R5820 = 0 || (R17 = 0 && R5825 = 0)) && (R5822 = 0 || (R17 = 0 && R5825 = 0)) && (R5826 = 0 || (R17 = 0 && R5825 = 0)) && (R5828 = 0 || (R17 = 0 && R5825 = 0));
// End of Parikh automata intersection problem
