// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R12, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R70, R71, R72, R73, R7706, R7707, R7708, R7709, R7710, R7711, R8, R8982, R8983, R8984, R8985, R8986, R8987, R8988, R8989, R8990, R8991, R9304, R9305, R9306, R9307, R9308, R9309, R9310, R9311, R9312, R9313, R9314, R9315, R9316, R9317, R9318, R9319, R9320, R9321, R9322, R9323, R9324, R9325, R9326, R9327, R9328, R9329, R9330, R9331, R9332, R9333, R9334, R9335, R9336, R9337, R9338, R9339, R9340, R9341, R9342, R9343, R9344, R9345, R9346, R9347, R9348, R9349, R9350, R9351, R9352, R9353, R9354, R9355, R9356, R9357, R9358, R9359, R9360, R9361, R9362, R9363, R9364, R9365, R9366, R9367, R9368, R9369, R9370, R9371, R9372, R9373, R9374, R9375, R9376, R9377, R9378, R9379, R9380, R9381, R9382, R9383, R9384, R9385, R9386, R9387, R9388, R9389, R9390, R9391, R9392, R9393, R9394, R9395, R9396, R9397, R9398, R9399, R9400, R9401, R9402, R9403, R9404, R9405, R9406, R9407;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 72];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [73, 73];
  s0 -> s1 [74, 65535];
  s1 -> s1 [0, 72];
  s1 -> s2 [73, 73];
  s1 -> s1 [74, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s1 [0, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R25 += 1 };
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R9329 += 1, R19 += 1 };
  s0 -> s0 [0, 65535] { R9328 += 1, R9329 += 1 };
  s1 -> s1 [0, 65535] { R9329 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 72] { R9331 += 1 };
  s0 -> s0 [0, 65535] { R9330 += 1, R9331 += 1 };
  s0 -> s2 [73, 73] { R9331 += 1 };
  s0 -> s3 [73, 73] { R9331 += 1 };
  s0 -> s1 [78, 65535] { R9331 += 1 };
  s1 -> s1 [0, 72] { R9331 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R9331 += 1 };
  s1 -> s3 [73, 73] { R9331 += 1 };
  s1 -> s1 [78, 65535] { R9331 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 73] { R9331 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [78, 65535] { R9331 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 72] { R9333 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R9332 += 1, R9333 += 1 };
  s0 -> s2 [73, 73] { R9333 += 1, R38 += 1 };
  s0 -> s3 [73, 73] { R9333 += 1, R38 += 1 };
  s0 -> s1 [74, 65535] { R9333 += 1, R38 += 1 };
  s1 -> s1 [0, 72] { R9333 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R9333 += 1, R38 += 1 };
  s1 -> s3 [73, 73] { R9333 += 1, R38 += 1 };
  s1 -> s1 [74, 65535] { R9333 += 1, R38 += 1 };
  s2 -> s2 [0, 65535] { R9333 += 1, R38 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 72] { R9335 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R9334 += 1, R9335 += 1 };
  s0 -> s2 [73, 73] { R9335 += 1, R40 += 1 };
  s0 -> s3 [73, 73] { R9335 += 1, R40 += 1 };
  s0 -> s1 [74, 65535] { R9335 += 1, R40 += 1 };
  s1 -> s1 [0, 72] { R9335 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R9335 += 1, R40 += 1 };
  s1 -> s3 [73, 73] { R9335 += 1, R40 += 1 };
  s1 -> s1 [74, 65535] { R9335 += 1, R40 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R9335 += 1, R40 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 72] { R9337 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R9336 += 1, R9337 += 1 };
  s0 -> s2 [73, 73] { R9337 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [73, 73] { R9337 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [74, 65535] { R9337 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 72] { R9337 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R9337 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [73, 73] { R9337 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [74, 65535] { R9337 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R9337 += 1, R42 += 1, R43 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 72] { R9339 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R9338 += 1, R9339 += 1 };
  s0 -> s2 [73, 73] { R9339 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [73, 73] { R9339 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [74, 65535] { R9339 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 72] { R9339 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R9339 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [73, 73] { R9339 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [74, 65535] { R9339 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R9339 += 1, R46 += 1, R47 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 72] { R9341 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R9340 += 1, R9341 += 1 };
  s0 -> s2 [73, 73] { R9341 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [73, 73] { R9341 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [74, 65535] { R9341 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 72] { R9341 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R9341 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [73, 73] { R9341 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [74, 65535] { R9341 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R9341 += 1, R52 += 1, R53 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 72] { R9343 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R9342 += 1, R9343 += 1 };
  s0 -> s2 [73, 73] { R9343 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [73, 73] { R9343 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [74, 65535] { R9343 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 72] { R9343 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R9343 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [73, 73] { R9343 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [74, 65535] { R9343 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R9343 += 1, R56 += 1, R57 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 72] { R9345 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R9344 += 1, R9345 += 1 };
  s0 -> s2 [73, 73] { R9345 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [73, 73] { R9345 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [74, 65535] { R9345 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 72] { R9345 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R9345 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [73, 73] { R9345 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [74, 65535] { R9345 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R9345 += 1, R62 += 1, R63 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 72] { R9365 += 1 };
  s0 -> s0 [0, 65535] { R9364 += 1, R9365 += 1 };
  s0 -> s2 [73, 73] { R9365 += 1 };
  s0 -> s1 [74, 65535] { R9365 += 1 };
  s1 -> s1 [0, 72] { R9365 += 1 };
  s1 -> s2 [73, 73] { R9365 += 1 };
  s1 -> s1 [74, 65535] { R9365 += 1 };
  s2 -> s2 [0, 65535] { R9365 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R9366 += 1, R9367 += 1 };
  s0 -> s1 [0, 65535] { R9367 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R9367 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 72] { R9369 += 1 };
  s0 -> s2 [0, 65535] { R9369 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R9368 += 1, R9369 += 1 };
  s0 -> s3 [73, 73] { R9369 += 1 };
  s0 -> s1 [74, 65535] { R9369 += 1 };
  s1 -> s1 [0, 72] { R9369 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [73, 73] { R9369 += 1 };
  s1 -> s1 [74, 65535] { R9369 += 1 };
  s2 -> s1 [0, 72] { R9369 += 1 };
  s2 -> s2 [0, 65535] { R9369 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [73, 73] { R9369 += 1 };
  s2 -> s1 [74, 65535] { R9369 += 1 };
  s3 -> s3 [0, 65535] { R9369 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 72] { R9371 += 1, R9309 += 1 };
  s0 -> s0 [0, 65535] { R9370 += 1, R9371 += 1 };
  s0 -> s2 [0, 65535] { R9371 += 1, R9308 += 1, R9309 += 1 };
  s0 -> s1 [74, 65535] { R9371 += 1, R9309 += 1 };
  s1 -> s1 [0, 72] { R9371 += 1, R9309 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R9371 += 1 };
  s1 -> s1 [74, 65535] { R9371 += 1, R9309 += 1 };
  s2 -> s1 [0, 72] { R9371 += 1, R9309 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R9371 += 1, R9308 += 1, R9309 += 1 };
  s2 -> s1 [74, 65535] { R9371 += 1, R9309 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R9373 += 1, R9311 += 1, R17 += 1 };
  s0 -> s2 [0, 65535] { R9373 += 1, R9310 += 1, R9311 += 1 };
  s0 -> s0 [0, 65535] { R9372 += 1, R9373 += 1 };
  s1 -> s4 [0, 65535] { R9373 += 1 };
  s1 -> s1 [0, 65535] { R9373 += 1, R9311 += 1, R17 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R9373 += 1, R9311 += 1, R17 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R9373 += 1, R9310 += 1, R9311 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R9373 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 73] { R9375 += 1, R9313 += 1 };
  s0 -> s2 [0, 65535] { R9375 += 1, R9312 += 1, R9313 += 1 };
  s0 -> s0 [0, 65535] { R9374 += 1, R9375 += 1 };
  s0 -> s1 [77, 65535] { R9375 += 1, R9313 += 1 };
  s1 -> s1 [0, 73] { R9375 += 1, R9313 += 1 };
  s1 -> s1 [0, 65535] { R9375 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [77, 65535] { R9375 += 1, R9313 += 1 };
  s2 -> s1 [0, 73] { R9375 += 1, R9313 += 1 };
  s2 -> s2 [0, 65535] { R9375 += 1, R9312 += 1, R9313 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [77, 65535] { R9375 += 1, R9313 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R9377 += 1, R9315 += 1, R67 += 1 };
  s0 -> s0 [0, 65535] { R9376 += 1, R9377 += 1 };
  s0 -> s2 [0, 65535] { R9377 += 1, R9314 += 1, R9315 += 1 };
  s1 -> s1 [0, 65535] { R9377 += 1, R9315 += 1, R67 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R9377 += 1 };
  s2 -> s1 [0, 65535] { R9377 += 1, R9315 += 1, R67 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R9377 += 1, R9314 += 1, R9315 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R9377 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 76] { R9379 += 1, R9317 += 1 };
  s0 -> s2 [0, 65535] { R9379 += 1, R9317 += 1, R69 += 1 };
  s0 -> s3 [0, 65535] { R9379 += 1, R9316 += 1, R9317 += 1 };
  s0 -> s0 [0, 65535] { R9378 += 1, R9379 += 1 };
  s0 -> s1 [78, 65535] { R9379 += 1, R9317 += 1 };
  s1 -> s1 [0, 76] { R9379 += 1, R9317 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R9379 += 1 };
  s1 -> s1 [78, 65535] { R9379 += 1, R9317 += 1 };
  s2 -> s1 [0, 76] { R9379 += 1, R9317 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R9379 += 1, R9317 += 1, R69 += 1 };
  s2 -> s5 [0, 65535] { R9379 += 1 };
  s2 -> s1 [78, 65535] { R9379 += 1, R9317 += 1 };
  s3 -> s1 [0, 76] { R9379 += 1, R9317 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R9379 += 1, R9317 += 1, R69 += 1 };
  s3 -> s3 [0, 65535] { R9379 += 1, R9316 += 1, R9317 += 1 };
  s3 -> s1 [78, 65535] { R9379 += 1, R9317 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R9379 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 76] { R9381 += 1, R9319 += 1, R73 += 1 };
  s0 -> s2 [0, 65535] { R9381 += 1, R9318 += 1, R9319 += 1 };
  s0 -> s0 [0, 65535] { R9380 += 1, R9381 += 1 };
  s0 -> s3 [0, 65535] { R9381 += 1, R9319 += 1, R72 += 1, R73 += 1 };
  s0 -> s1 [78, 65535] { R9381 += 1, R9319 += 1, R73 += 1 };
  s1 -> s1 [0, 76] { R9381 += 1, R9319 += 1, R73 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R9381 += 1 };
  s1 -> s1 [0, 65535] { R9381 += 1, R9319 += 1 };
  s1 -> s1 [78, 65535] { R9381 += 1, R9319 += 1, R73 += 1 };
  s2 -> s1 [0, 76] { R9381 += 1, R9319 += 1, R73 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R9381 += 1, R9318 += 1, R9319 += 1 };
  s2 -> s3 [0, 65535] { R9381 += 1, R9319 += 1, R72 += 1, R73 += 1 };
  s2 -> s1 [78, 65535] { R9381 += 1, R9319 += 1, R73 += 1 };
  s3 -> s1 [0, 76] { R9381 += 1, R9319 += 1, R73 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R9381 += 1 };
  s3 -> s3 [0, 65535] { R9381 += 1, R9319 += 1, R72 += 1, R73 += 1 };
  s3 -> s1 [78, 65535] { R9381 += 1, R9319 += 1, R73 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R9381 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R9383 += 1, R9320 += 1, R9321 += 1 };
  s0 -> s2 [0, 65535] { R9383 += 1, R9321 += 1 };
  s0 -> s0 [0, 65535] { R9382 += 1, R9383 += 1 };
  s1 -> s1 [0, 65535] { R9383 += 1, R9320 += 1, R9321 += 1 };
  s1 -> s2 [0, 65535] { R9383 += 1, R9321 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R9383 += 1, R9321 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R9383 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R9383 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 77] { R9385 += 1, R9323 += 1, R8985 += 1 };
  s0 -> s2 [0, 65535] { R9385 += 1, R9322 += 1, R9323 += 1 };
  s0 -> s0 [0, 65535] { R9384 += 1, R9385 += 1 };
  s0 -> s3 [89, 89] { R9385 += 1, R9323 += 1, R8985 += 1 };
  s0 -> s1 [90, 65535] { R9385 += 1, R9323 += 1, R8985 += 1 };
  s1 -> s1 [0, 77] { R9385 += 1, R9323 += 1, R8985 += 1 };
  s1 -> s3 [89, 89] { R9385 += 1, R9323 += 1, R8985 += 1 };
  s1 -> s1 [90, 65535] { R9385 += 1, R9323 += 1, R8985 += 1 };
  s2 -> s1 [0, 77] { R9385 += 1, R9323 += 1, R8985 += 1 };
  s2 -> s2 [0, 65535] { R9385 += 1, R9322 += 1, R9323 += 1 };
  s2 -> s3 [89, 89] { R9385 += 1, R9323 += 1, R8985 += 1 };
  s2 -> s1 [90, 65535] { R9385 += 1, R9323 += 1, R8985 += 1 };
  s3 -> s3 [0, 77] { R9385 += 1, R9323 += 1, R8985 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R9385 += 1, R9323 += 1 };
  s3 -> s5 [0, 65535] { R9385 += 1 };
  s3 -> s3 [89, 65535] { R9385 += 1, R9323 += 1, R8985 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R9385 += 1 };
  accepting s3, s4, s5;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R9387 += 1, R9325 += 1, R8990 += 1, R8991 += 1 };
  s0 -> s2 [0, 65535] { R9387 += 1, R9324 += 1, R9325 += 1 };
  s0 -> s3 [0, 65535] { R9387 += 1, R9325 += 1, R8989 += 1, R8990 += 1 };
  s0 -> s0 [0, 65535] { R9386 += 1, R9387 += 1 };
  s1 -> s1 [0, 65535] { R9387 += 1, R9325 += 1, R8990 += 1, R8991 += 1 };
  s1 -> s6 [0, 65535] { R9387 += 1, R9325 += 1 };
  s1 -> s4 [0, 65535] { R9387 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R9387 += 1, R9325 += 1, R8990 += 1, R8991 += 1 };
  s2 -> s2 [0, 65535] { R9387 += 1, R9324 += 1, R9325 += 1 };
  s2 -> s3 [0, 65535] { R9387 += 1, R9325 += 1, R8989 += 1, R8990 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s1 [0, 65535] { R9387 += 1, R9325 += 1, R8990 += 1, R8991 += 1 };
  s3 -> s4 [0, 65535] { R9387 += 1 };
  s3 -> s3 [0, 65535] { R9387 += 1, R9325 += 1, R8989 += 1, R8990 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R9387 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9387 += 1, R9325 += 1 };
  s6 -> s4 [0, 65535] { R9387 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 77] { R9389 += 1, R9327 += 1, R9307 += 1 };
  s0 -> s1 [0, 65535] { R9389 += 1, R9327 += 1 };
  s0 -> s0 [0, 65535] { R9388 += 1, R9389 += 1 };
  s0 -> s2 [0, 65535] { R9389 += 1, R9326 += 1, R9327 += 1 };
  s0 -> s1 [90, 65535] { R9389 += 1, R9327 += 1, R9307 += 1 };
  s1 -> s1 [0, 77] { R9389 += 1, R9327 += 1, R9307 += 1 };
  s1 -> s1 [0, 65535] { R9389 += 1, R9327 += 1 };
  s1 -> s4 [0, 65535] { R9389 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [90, 65535] { R9389 += 1, R9327 += 1, R9307 += 1 };
  s2 -> s1 [0, 77] { R9389 += 1, R9327 += 1, R9307 += 1 };
  s2 -> s1 [0, 65535] { R9389 += 1, R9327 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R9389 += 1, R9326 += 1, R9327 += 1 };
  s2 -> s1 [90, 65535] { R9389 += 1, R9327 += 1, R9307 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R9389 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R9391 += 1, R9346 += 1, R9347 += 1 };
  s0 -> s2 [0, 65535] { R9391 += 1, R9347 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R9390 += 1, R9391 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R9391 += 1, R9346 += 1, R9347 += 1 };
  s1 -> s2 [0, 65535] { R9391 += 1, R9347 += 1, R18 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R9391 += 1 };
  s2 -> s2 [0, 65535] { R9391 += 1, R9347 += 1, R18 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R9391 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 72] { R9393 += 1, R9349 += 1 };
  s0 -> s0 [0, 65535] { R9392 += 1, R9393 += 1 };
  s0 -> s2 [0, 65535] { R9393 += 1, R9348 += 1, R9349 += 1 };
  s0 -> s3 [73, 73] { R9393 += 1, R9349 += 1 };
  s0 -> s4 [73, 73] { R9393 += 1, R9349 += 1 };
  s0 -> s5 [77, 77] { R9393 += 1, R9349 += 1 };
  s0 -> s1 [78, 65535] { R9393 += 1, R9349 += 1 };
  s1 -> s1 [0, 72] { R9393 += 1, R9349 += 1 };
  s1 -> s3 [73, 73] { R9393 += 1, R9349 += 1 };
  s1 -> s4 [73, 73] { R9393 += 1, R9349 += 1 };
  s1 -> s5 [77, 77] { R9393 += 1, R9349 += 1 };
  s1 -> s1 [78, 65535] { R9393 += 1, R9349 += 1 };
  s2 -> s1 [0, 72] { R9393 += 1, R9349 += 1 };
  s2 -> s2 [0, 65535] { R9393 += 1, R9348 += 1, R9349 += 1 };
  s2 -> s3 [73, 73] { R9393 += 1, R9349 += 1 };
  s2 -> s4 [73, 73] { R9393 += 1, R9349 += 1 };
  s2 -> s5 [77, 77] { R9393 += 1, R9349 += 1 };
  s2 -> s1 [78, 65535] { R9393 += 1, R9349 += 1 };
  s3 -> s3 [0, 73] { R9393 += 1, R9349 += 1 };
  s3 -> s7 [77, 77] { R9393 += 1, R9349 += 1 };
  s3 -> s3 [78, 65535] { R9393 += 1, R9349 += 1 };
  s5 -> s5 [0, 72] { R9393 += 1, R9349 += 1 };
  s5 -> s5 [0, 65535] { R9393 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [73, 73] { R9393 += 1, R9349 += 1 };
  s5 -> s8 [73, 73] { R9393 += 1, R9349 += 1 };
  s5 -> s5 [77, 65535] { R9393 += 1, R9349 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 73] { R9393 += 1, R9349 += 1 };
  s7 -> s7 [0, 65535] { R9393 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [77, 65535] { R9393 += 1, R9349 += 1 };
  s8 -> s8 [0, 65535] { R9393 += 1 };
  s8 -> s6 [0, 65535];
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 72] { R9395 += 1, R9351 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R9394 += 1, R9395 += 1 };
  s0 -> s2 [0, 65535] { R9395 += 1, R9350 += 1, R9351 += 1 };
  s0 -> s3 [73, 73] { R9395 += 1, R9351 += 1, R66 += 1 };
  s0 -> s4 [73, 73] { R9395 += 1, R9351 += 1, R66 += 1 };
  s0 -> s1 [74, 65535] { R9395 += 1, R9351 += 1, R66 += 1 };
  s1 -> s1 [0, 72] { R9395 += 1, R9351 += 1, R66 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R9395 += 1 };
  s1 -> s3 [73, 73] { R9395 += 1, R9351 += 1, R66 += 1 };
  s1 -> s4 [73, 73] { R9395 += 1, R9351 += 1, R66 += 1 };
  s1 -> s1 [74, 65535] { R9395 += 1, R9351 += 1, R66 += 1 };
  s2 -> s1 [0, 72] { R9395 += 1, R9351 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R9395 += 1, R9350 += 1, R9351 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R9395 += 1, R9351 += 1, R66 += 1 };
  s2 -> s4 [73, 73] { R9395 += 1, R9351 += 1, R66 += 1 };
  s2 -> s1 [74, 65535] { R9395 += 1, R9351 += 1, R66 += 1 };
  s3 -> s3 [0, 65535] { R9395 += 1, R9351 += 1, R66 += 1 };
  s3 -> s6 [0, 65535] { R9395 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R9395 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9395 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 72] { R9397 += 1, R9353 += 1, R68 += 1 };
  s0 -> s0 [0, 65535] { R9396 += 1, R9397 += 1 };
  s0 -> s2 [0, 65535] { R9397 += 1, R9352 += 1, R9353 += 1 };
  s0 -> s3 [73, 73] { R9397 += 1, R9353 += 1, R68 += 1 };
  s0 -> s4 [73, 73] { R9397 += 1, R9353 += 1, R68 += 1 };
  s0 -> s1 [74, 65535] { R9397 += 1, R9353 += 1, R68 += 1 };
  s1 -> s1 [0, 72] { R9397 += 1, R9353 += 1, R68 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R9397 += 1 };
  s1 -> s3 [73, 73] { R9397 += 1, R9353 += 1, R68 += 1 };
  s1 -> s4 [73, 73] { R9397 += 1, R9353 += 1, R68 += 1 };
  s1 -> s1 [74, 65535] { R9397 += 1, R9353 += 1, R68 += 1 };
  s2 -> s1 [0, 72] { R9397 += 1, R9353 += 1, R68 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R9397 += 1, R9352 += 1, R9353 += 1 };
  s2 -> s3 [73, 73] { R9397 += 1, R9353 += 1, R68 += 1 };
  s2 -> s4 [73, 73] { R9397 += 1, R9353 += 1, R68 += 1 };
  s2 -> s1 [74, 65535] { R9397 += 1, R9353 += 1, R68 += 1 };
  s3 -> s3 [0, 65535] { R9397 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R9397 += 1, R9353 += 1, R68 += 1 };
  s4 -> s5 [0, 65535] { R9397 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R9397 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 72] { R9399 += 1, R9355 += 1, R70 += 1, R71 += 1 };
  s0 -> s2 [0, 65535] { R9399 += 1, R9354 += 1, R9355 += 1 };
  s0 -> s0 [0, 65535] { R9398 += 1, R9399 += 1 };
  s0 -> s3 [73, 73] { R9399 += 1, R9355 += 1, R70 += 1, R71 += 1 };
  s0 -> s4 [73, 73] { R9399 += 1, R9355 += 1, R70 += 1, R71 += 1 };
  s0 -> s1 [74, 65535] { R9399 += 1, R9355 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 72] { R9399 += 1, R9355 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 65535] { R9399 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [73, 73] { R9399 += 1, R9355 += 1, R70 += 1, R71 += 1 };
  s1 -> s4 [73, 73] { R9399 += 1, R9355 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [74, 65535] { R9399 += 1, R9355 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [0, 72] { R9399 += 1, R9355 += 1, R70 += 1, R71 += 1 };
  s2 -> s2 [0, 65535] { R9399 += 1, R9354 += 1, R9355 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [73, 73] { R9399 += 1, R9355 += 1, R70 += 1, R71 += 1 };
  s2 -> s4 [73, 73] { R9399 += 1, R9355 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [74, 65535] { R9399 += 1, R9355 += 1, R70 += 1, R71 += 1 };
  s3 -> s3 [0, 65535] { R9399 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R9399 += 1 };
  s4 -> s4 [0, 65535] { R9399 += 1, R9355 += 1, R70 += 1, R71 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R9399 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 72] { R9401 += 1, R9357 += 1, R7706 += 1, R7707 += 1 };
  s0 -> s2 [0, 72] { R9401 += 1, R9357 += 1, R7707 += 1, R7708 += 1 };
  s0 -> s0 [0, 65535] { R9400 += 1, R9401 += 1 };
  s0 -> s3 [0, 65535] { R9401 += 1, R9356 += 1, R9357 += 1 };
  s0 -> s4 [73, 73] { R9401 += 1, R9357 += 1, R7706 += 1, R7707 += 1 };
  s0 -> s5 [73, 73] { R9401 += 1, R9357 += 1, R7707 += 1, R7708 += 1 };
  s0 -> s6 [73, 73] { R9401 += 1, R9357 += 1, R7707 += 1, R7708 += 1 };
  s0 -> s7 [73, 73] { R9401 += 1, R9357 += 1, R7706 += 1, R7707 += 1 };
  s0 -> s1 [74, 65535] { R9401 += 1, R9357 += 1, R7706 += 1, R7707 += 1 };
  s0 -> s2 [74, 65535] { R9401 += 1, R9357 += 1, R7707 += 1, R7708 += 1 };
  s1 -> s1 [0, 72] { R9401 += 1, R9357 += 1, R7706 += 1, R7707 += 1 };
  s1 -> s2 [0, 72] { R9401 += 1, R9357 += 1, R7707 += 1, R7708 += 1 };
  s1 -> s4 [73, 73] { R9401 += 1, R9357 += 1, R7706 += 1, R7707 += 1 };
  s1 -> s5 [73, 73] { R9401 += 1, R9357 += 1, R7707 += 1, R7708 += 1 };
  s1 -> s6 [73, 73] { R9401 += 1, R9357 += 1, R7707 += 1, R7708 += 1 };
  s1 -> s7 [73, 73] { R9401 += 1, R9357 += 1, R7706 += 1, R7707 += 1 };
  s1 -> s1 [74, 65535] { R9401 += 1, R9357 += 1, R7706 += 1, R7707 += 1 };
  s1 -> s2 [74, 65535] { R9401 += 1, R9357 += 1, R7707 += 1, R7708 += 1 };
  s2 -> s11 [0, 72] { R9401 += 1, R9357 += 1 };
  s2 -> s2 [0, 72] { R9401 += 1, R9357 += 1, R7707 += 1, R7708 += 1 };
  s2 -> s5 [73, 73] { R9401 += 1, R9357 += 1, R7707 += 1, R7708 += 1 };
  s2 -> s6 [73, 73] { R9401 += 1, R9357 += 1, R7707 += 1, R7708 += 1 };
  s2 -> s8 [73, 73] { R9401 += 1, R9357 += 1 };
  s2 -> s12 [73, 73] { R9401 += 1, R9357 += 1 };
  s2 -> s11 [74, 65535] { R9401 += 1, R9357 += 1 };
  s2 -> s2 [74, 65535] { R9401 += 1, R9357 += 1, R7707 += 1, R7708 += 1 };
  s3 -> s1 [0, 72] { R9401 += 1, R9357 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s2 [0, 72] { R9401 += 1, R9357 += 1, R7707 += 1, R7708 += 1 };
  s3 -> s3 [0, 65535] { R9401 += 1, R9356 += 1, R9357 += 1 };
  s3 -> s4 [73, 73] { R9401 += 1, R9357 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s5 [73, 73] { R9401 += 1, R9357 += 1, R7707 += 1, R7708 += 1 };
  s3 -> s6 [73, 73] { R9401 += 1, R9357 += 1, R7707 += 1, R7708 += 1 };
  s3 -> s7 [73, 73] { R9401 += 1, R9357 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s1 [74, 65535] { R9401 += 1, R9357 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s2 [74, 65535] { R9401 += 1, R9357 += 1, R7707 += 1, R7708 += 1 };
  s6 -> s6 [0, 65535] { R9401 += 1, R9357 += 1, R7707 += 1, R7708 += 1 };
  s6 -> s8 [0, 65535] { R9401 += 1, R9357 += 1 };
  s7 -> s6 [0, 65535] { R9401 += 1, R9357 += 1, R7707 += 1, R7708 += 1 };
  s7 -> s7 [0, 65535] { R9401 += 1, R9357 += 1, R7706 += 1, R7707 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R9401 += 1, R9357 += 1 };
  s8 -> s10 [0, 65535] { R9401 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R9401 += 1 };
  s11 -> s11 [0, 72] { R9401 += 1, R9357 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R9401 += 1 };
  s11 -> s8 [73, 73] { R9401 += 1, R9357 += 1 };
  s11 -> s12 [73, 73] { R9401 += 1, R9357 += 1 };
  s11 -> s11 [74, 65535] { R9401 += 1, R9357 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R9401 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 72] { R9403 += 1, R9359 += 1, R8983 += 1 };
  s0 -> s2 [0, 72] { R9403 += 1, R9359 += 1, R8982 += 1, R8983 += 1 };
  s0 -> s0 [0, 65535] { R9402 += 1, R9403 += 1 };
  s0 -> s3 [0, 65535] { R9403 += 1, R9358 += 1, R9359 += 1 };
  s0 -> s4 [73, 73] { R9403 += 1, R9359 += 1, R8982 += 1, R8983 += 1 };
  s0 -> s5 [73, 73] { R9403 += 1, R9359 += 1, R8983 += 1 };
  s0 -> s6 [73, 73] { R9403 += 1, R9359 += 1, R8982 += 1, R8983 += 1 };
  s0 -> s7 [73, 73] { R9403 += 1, R9359 += 1, R8983 += 1 };
  s0 -> s1 [74, 77] { R9403 += 1, R9359 += 1, R8983 += 1 };
  s0 -> s2 [74, 65535] { R9403 += 1, R9359 += 1, R8982 += 1, R8983 += 1 };
  s0 -> s1 [90, 65535] { R9403 += 1, R9359 += 1, R8983 += 1 };
  s1 -> s1 [0, 72] { R9403 += 1, R9359 += 1, R8983 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s1 [0, 65535] { R9403 += 1 };
  s1 -> s5 [73, 73] { R9403 += 1, R9359 += 1, R8983 += 1 };
  s1 -> s7 [73, 73] { R9403 += 1, R9359 += 1, R8983 += 1 };
  s1 -> s1 [74, 77] { R9403 += 1, R9359 += 1, R8983 += 1 };
  s1 -> s1 [90, 65535] { R9403 += 1, R9359 += 1, R8983 += 1 };
  s2 -> s1 [0, 72] { R9403 += 1, R9359 += 1, R8983 += 1 };
  s2 -> s2 [0, 72] { R9403 += 1, R9359 += 1, R8982 += 1, R8983 += 1 };
  s2 -> s4 [73, 73] { R9403 += 1, R9359 += 1, R8982 += 1, R8983 += 1 };
  s2 -> s5 [73, 73] { R9403 += 1, R9359 += 1, R8983 += 1 };
  s2 -> s6 [73, 73] { R9403 += 1, R9359 += 1, R8982 += 1, R8983 += 1 };
  s2 -> s7 [73, 73] { R9403 += 1, R9359 += 1, R8983 += 1 };
  s2 -> s1 [74, 77] { R9403 += 1, R9359 += 1, R8983 += 1 };
  s2 -> s2 [74, 65535] { R9403 += 1, R9359 += 1, R8982 += 1, R8983 += 1 };
  s2 -> s1 [90, 65535] { R9403 += 1, R9359 += 1, R8983 += 1 };
  s3 -> s1 [0, 72] { R9403 += 1, R9359 += 1, R8983 += 1 };
  s3 -> s2 [0, 72] { R9403 += 1, R9359 += 1, R8982 += 1, R8983 += 1 };
  s3 -> s3 [0, 65535] { R9403 += 1, R9358 += 1, R9359 += 1 };
  s3 -> s4 [73, 73] { R9403 += 1, R9359 += 1, R8982 += 1, R8983 += 1 };
  s3 -> s5 [73, 73] { R9403 += 1, R9359 += 1, R8983 += 1 };
  s3 -> s6 [73, 73] { R9403 += 1, R9359 += 1, R8982 += 1, R8983 += 1 };
  s3 -> s7 [73, 73] { R9403 += 1, R9359 += 1, R8983 += 1 };
  s3 -> s1 [74, 77] { R9403 += 1, R9359 += 1, R8983 += 1 };
  s3 -> s2 [74, 65535] { R9403 += 1, R9359 += 1, R8982 += 1, R8983 += 1 };
  s3 -> s1 [90, 65535] { R9403 += 1, R9359 += 1, R8983 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s5 [0, 65535] { R9403 += 1 };
  s6 -> s7 [0, 77] { R9403 += 1, R9359 += 1, R8983 += 1 };
  s6 -> s6 [0, 65535] { R9403 += 1, R9359 += 1, R8982 += 1, R8983 += 1 };
  s6 -> s7 [90, 65535] { R9403 += 1, R9359 += 1, R8983 += 1 };
  s7 -> s7 [0, 77] { R9403 += 1, R9359 += 1, R8983 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R9403 += 1 };
  s7 -> s7 [90, 65535] { R9403 += 1, R9359 += 1, R8983 += 1 };
  s8 -> s8 [0, 65535];
  accepting s1, s5, s7, s8;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 72] { R9405 += 1, R9361 += 1, R8986 += 1, R8987 += 1 };
  s0 -> s0 [0, 65535] { R9404 += 1, R9405 += 1 };
  s0 -> s2 [0, 65535] { R9405 += 1, R9360 += 1, R9361 += 1 };
  s0 -> s3 [73, 73] { R9405 += 1, R9361 += 1, R8986 += 1, R8987 += 1 };
  s0 -> s4 [73, 73] { R9405 += 1, R9361 += 1, R8986 += 1, R8987 += 1 };
  s0 -> s1 [74, 65535] { R9405 += 1, R9361 += 1, R8986 += 1, R8987 += 1 };
  s1 -> s1 [0, 72] { R9405 += 1, R9361 += 1, R8986 += 1, R8987 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R9405 += 1 };
  s1 -> s3 [73, 73] { R9405 += 1, R9361 += 1, R8986 += 1, R8987 += 1 };
  s1 -> s4 [73, 73] { R9405 += 1, R9361 += 1, R8986 += 1, R8987 += 1 };
  s1 -> s1 [74, 65535] { R9405 += 1, R9361 += 1, R8986 += 1, R8987 += 1 };
  s2 -> s1 [0, 72] { R9405 += 1, R9361 += 1, R8986 += 1, R8987 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R9405 += 1, R9360 += 1, R9361 += 1 };
  s2 -> s3 [73, 73] { R9405 += 1, R9361 += 1, R8986 += 1, R8987 += 1 };
  s2 -> s4 [73, 73] { R9405 += 1, R9361 += 1, R8986 += 1, R8987 += 1 };
  s2 -> s1 [74, 65535] { R9405 += 1, R9361 += 1, R8986 += 1, R8987 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R9405 += 1 };
  s3 -> s3 [0, 65535] { R9405 += 1, R9361 += 1, R8986 += 1, R8987 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R9405 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9405 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 72] { R9407 += 1, R9363 += 1, R9305 += 1 };
  s0 -> s2 [0, 72] { R9407 += 1, R9363 += 1, R9304 += 1, R9305 += 1 };
  s0 -> s0 [0, 65535] { R9406 += 1, R9407 += 1 };
  s0 -> s3 [0, 65535] { R9407 += 1, R9362 += 1, R9363 += 1 };
  s0 -> s4 [73, 73] { R9407 += 1, R9363 += 1, R9304 += 1, R9305 += 1 };
  s0 -> s5 [73, 73] { R9407 += 1, R9363 += 1, R9305 += 1 };
  s0 -> s6 [73, 73] { R9407 += 1, R9363 += 1, R9304 += 1, R9305 += 1 };
  s0 -> s7 [73, 73] { R9407 += 1, R9363 += 1, R9305 += 1 };
  s0 -> s1 [74, 76] { R9407 += 1, R9363 += 1, R9305 += 1 };
  s0 -> s2 [74, 65535] { R9407 += 1, R9363 += 1, R9304 += 1, R9305 += 1 };
  s0 -> s8 [77, 77] { R9407 += 1, R9363 += 1, R9305 += 1 };
  s0 -> s1 [90, 65535] { R9407 += 1, R9363 += 1, R9305 += 1 };
  s1 -> s1 [0, 72] { R9407 += 1, R9363 += 1, R9305 += 1 };
  s1 -> s5 [73, 73] { R9407 += 1, R9363 += 1 };
  s1 -> s7 [73, 73] { R9407 += 1, R9363 += 1 };
  s1 -> s1 [74, 76] { R9407 += 1, R9363 += 1, R9305 += 1 };
  s1 -> s1 [74, 65535] { R9407 += 1, R9363 += 1 };
  s1 -> s8 [77, 77] { R9407 += 1, R9363 += 1, R9305 += 1 };
  s1 -> s1 [90, 65535] { R9407 += 1, R9363 += 1, R9305 += 1 };
  s2 -> s1 [0, 72] { R9407 += 1, R9363 += 1, R9305 += 1 };
  s2 -> s2 [0, 72] { R9407 += 1, R9363 += 1, R9304 += 1, R9305 += 1 };
  s2 -> s4 [73, 73] { R9407 += 1, R9363 += 1, R9304 += 1, R9305 += 1 };
  s2 -> s5 [73, 73] { R9407 += 1, R9363 += 1, R9305 += 1 };
  s2 -> s6 [73, 73] { R9407 += 1, R9363 += 1, R9304 += 1, R9305 += 1 };
  s2 -> s7 [73, 73] { R9407 += 1, R9363 += 1, R9305 += 1 };
  s2 -> s1 [74, 76] { R9407 += 1, R9363 += 1, R9305 += 1 };
  s2 -> s2 [74, 65535] { R9407 += 1, R9363 += 1, R9304 += 1, R9305 += 1 };
  s2 -> s8 [77, 77] { R9407 += 1, R9363 += 1, R9305 += 1 };
  s2 -> s1 [90, 65535] { R9407 += 1, R9363 += 1, R9305 += 1 };
  s3 -> s1 [0, 72] { R9407 += 1, R9363 += 1, R9305 += 1 };
  s3 -> s2 [0, 72] { R9407 += 1, R9363 += 1, R9304 += 1, R9305 += 1 };
  s3 -> s3 [0, 65535] { R9407 += 1, R9362 += 1, R9363 += 1 };
  s3 -> s4 [73, 73] { R9407 += 1, R9363 += 1, R9304 += 1, R9305 += 1 };
  s3 -> s5 [73, 73] { R9407 += 1, R9363 += 1, R9305 += 1 };
  s3 -> s6 [73, 73] { R9407 += 1, R9363 += 1, R9304 += 1, R9305 += 1 };
  s3 -> s7 [73, 73] { R9407 += 1, R9363 += 1, R9305 += 1 };
  s3 -> s1 [74, 76] { R9407 += 1, R9363 += 1, R9305 += 1 };
  s3 -> s2 [74, 65535] { R9407 += 1, R9363 += 1, R9304 += 1, R9305 += 1 };
  s3 -> s8 [77, 77] { R9407 += 1, R9363 += 1, R9305 += 1 };
  s3 -> s1 [90, 65535] { R9407 += 1, R9363 += 1, R9305 += 1 };
  s5 -> s5 [0, 76] { R9407 += 1, R9363 += 1, R9305 += 1 };
  s5 -> s5 [0, 65535] { R9407 += 1, R9363 += 1 };
  s5 -> s10 [77, 77] { R9407 += 1, R9363 += 1, R9305 += 1 };
  s5 -> s5 [90, 65535] { R9407 += 1, R9363 += 1, R9305 += 1 };
  s6 -> s5 [0, 76] { R9407 += 1, R9363 += 1, R9305 += 1 };
  s6 -> s6 [0, 65535] { R9407 += 1, R9363 += 1, R9304 += 1, R9305 += 1 };
  s6 -> s10 [77, 77] { R9407 += 1, R9363 += 1, R9305 += 1 };
  s6 -> s5 [90, 65535] { R9407 += 1, R9363 += 1, R9305 += 1 };
  s8 -> s8 [0, 72] { R9407 += 1, R9363 += 1, R9305 += 1 };
  s8 -> s8 [0, 65535] { R9407 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [73, 73] { R9407 += 1, R9363 += 1 };
  s8 -> s11 [73, 73] { R9407 += 1, R9363 += 1 };
  s8 -> s8 [74, 77] { R9407 += 1, R9363 += 1, R9305 += 1 };
  s8 -> s8 [74, 65535] { R9407 += 1, R9363 += 1 };
  s8 -> s8 [90, 65535] { R9407 += 1, R9363 += 1, R9305 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 77] { R9407 += 1, R9363 += 1, R9305 += 1 };
  s10 -> s12 [0, 65535] { R9407 += 1 };
  s10 -> s10 [0, 65535] { R9407 += 1, R9363 += 1 };
  s10 -> s9 [0, 65535];
  s10 -> s10 [90, 65535] { R9407 += 1, R9363 += 1, R9305 += 1 };
  s11 -> s11 [0, 65535] { R9407 += 1 };
  s11 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R9407 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
synchronised {  // Automata constraining P54
automaton P54_0 {
  init s0;
  s0 -> s1 [109, 109];
  accepting s1;
};
};
constraint R1 = R9323 && R2 = R9407 && R20 - R9407 = -1 && R21 = R9407 && R22 - R9407 = -1 && R23 = R9407 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R8985 + -1*R8983 - R53 = 0 && R52 + R8984 + R8982 = 0 && R9322 = 0 && R9348 = 0 && R9349 = 0 && R9356 = 0 && R9357 = 0 && R9358 = 0 && R9359 = 0 && R9362 = 0 && R9363 = 0 && R9364 = 0 && R9365 = R9407 && R9366 = 0 && R9367 = R9407 && R9368 = 0 && R9369 = R9407 && R9370 = 0 && R9371 = R9407 && R9372 = 0 && R9373 = R9407 && R9374 = 0 && R9375 = R9407 && R9376 = 0 && R9377 = R9407 && R9378 = 0 && R9379 = R9407 && R9380 = 0 && R9381 = R9407 && R9382 = 0 && R9383 = R9407 && R9384 = 0 && R9385 = R9407 && R9386 = 0 && R9387 = R9407 && R9388 = 0 && R9389 = R9407 && R9390 = 0 && R9391 = R9407 && R9392 = 0 && R9393 = R9407 && R9394 = 0 && R9395 = R9407 && R9396 = 0 && R9397 = R9407 && R9398 = 0 && R9399 = R9407 && R9400 = 0 && R9401 = R9407 && R9402 = 0 && R9403 = R9407 && R9404 = 0 && R9405 = R9407 && R9406 = 0 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R8985 + -1*R8983 - R53 < 1 && -1 < R9323 && 0 < R9407 && (R48 + R7711 + R7708 != 0 || ((R42 + R72 + R70 != 0 || R43 + R73 + R71 + -1*R8985 + -1*R8983 - R53 = 0 || R53 + R8985 + R8983 < 1) && (R42 + R72 + R70 = 0 || R53 + R8985 + R8983 < 1))) && (R48 + R7711 + R7708 != 0 || ((R46 + R7709 + R7706 != 0 || R47 + R7710 + R7707 + -1*R8985 + -1*R8983 - R53 = 0 || R53 + R8985 + R8983 < 1) && (R46 + R7709 + R7706 = 0 || R53 + R8985 + R8983 < 1))) && (R9308 != 0 || R9309 = R9323 || (R17 = 0 && R9323 = 0)) && (R9310 != 0 || R9311 = R9323 || (R17 = 0 && R9323 = 0)) && (R9312 != 0 || R9313 = R9323 || (R17 = 0 && R9323 = 0)) && (R9314 != 0 || R9315 = R9323 || (R17 = 0 && R9323 = 0)) && (R9316 != 0 || R9317 = R9323 || (R17 = 0 && R9323 = 0)) && (R9318 != 0 || R9319 = R9323 || (R17 = 0 && R9323 = 0)) && (R9320 != 0 || R9321 = R9323 || (R17 = 0 && R9323 = 0)) && (R9324 != 0 || R9323 = R9325 || (R17 = 0 && R9323 = 0)) && (R9326 != 0 || R9323 = R9327 || (R17 = 0 && R9323 = 0)) && (R18 = 0 || (R9346 = 0 && R9347 = 0)) && (R18 = 0 || (R9350 = 0 && R9351 = 0)) && (R18 = 0 || (R9352 = 0 && R9353 = 0)) && (R18 = 0 || (R9354 = 0 && R9355 = 0)) && (R18 = 0 || (R9360 = 0 && R9361 = 0)) && (R19 = 0 || (R9328 = 0 && R9329 = 0)) && (R19 = 0 || (R9330 = 0 && R9331 = 0)) && (R19 = 0 || (R9332 = 0 && R9333 = 0)) && (R19 = 0 || (R9334 = 0 && R9335 = 0)) && (R19 = 0 || (R9336 = 0 && R9337 = 0)) && (R19 = 0 || (R9338 = 0 && R9339 = 0)) && (R19 = 0 || (R9340 = 0 && R9341 = 0)) && (R19 = 0 || (R9342 = 0 && R9343 = 0)) && (R19 = 0 || (R9344 = 0 && R9345 = 0)) && (R48 + R7711 + R7708 = 0 || (R42 + R72 + R70 = 0 && R43 + R73 + R71 + -1*R8985 + -1*R8983 - R53 = 0)) && (R48 + R7711 + R7708 = 0 || (R46 + R7709 + R7706 = 0 && R47 + R7710 + R7707 + -1*R8985 + -1*R8983 - R53 = 0)) && (R58 + R8991 + R8988 = 0 || (R56 + R8989 + R8986 = 0 && R57 + R8990 + R8987 = 0)) && (R58 + R8991 + R8988 = 0 || (R62 + R9306 + R9304 = 0 && R63 + R9307 + R9305 = 0)) && (R9308 = 0 || (R17 = 0 && R9323 = 0)) && (R9310 = 0 || (R17 = 0 && R9323 = 0)) && (R9312 = 0 || (R17 = 0 && R9323 = 0)) && (R9314 = 0 || (R17 = 0 && R9323 = 0)) && (R9316 = 0 || (R17 = 0 && R9323 = 0)) && (R9318 = 0 || (R17 = 0 && R9323 = 0)) && (R9320 = 0 || (R17 = 0 && R9323 = 0)) && (R9324 = 0 || (R17 = 0 && R9323 = 0)) && (R9326 = 0 || (R17 = 0 && R9323 = 0));
// End of Parikh automata intersection problem
