// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R12, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R70, R71, R72, R73, R7706, R7707, R7708, R7709, R7710, R7711, R7712, R7713, R7714, R7715, R8, R8138, R8139, R8140, R8141, R8142, R8143, R8456, R8457, R8458, R8459, R8460, R8461, R8462, R8463, R8464, R8465, R8466, R8467, R8468, R8469, R8470, R8471, R8472, R8473, R8474, R8475, R8476, R8477, R8478, R8479, R8480, R8481, R8482, R8483, R8484, R8485, R8486, R8487, R8488, R8489, R8490, R8491, R8492, R8493, R8494, R8495, R8496, R8497, R8498, R8499, R8500, R8501, R8502, R8503, R8504, R8505, R8506, R8507, R8508, R8509, R8510, R8511, R8512, R8513, R8514, R8515, R8516, R8517, R8518, R8519, R8520, R8521, R8522, R8523, R8524, R8525, R8526, R8527, R8528, R8529, R8530, R8531, R8532, R8533, R8534, R8535, R8536, R8537, R8538, R8539, R8540, R8541, R8542, R8543, R8544, R8545, R8546, R8547, R8548, R8549, R8550, R8551, R8552, R8553, R8554, R8555, R8556, R8557, R8558, R8559;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 72];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [73, 73];
  s0 -> s1 [74, 65535];
  s1 -> s1 [0, 72];
  s1 -> s2 [73, 73];
  s1 -> s1 [74, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s1 [0, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R25 += 1 };
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R8481 += 1, R19 += 1 };
  s0 -> s0 [0, 65535] { R8480 += 1, R8481 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R8481 += 1, R19 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 72] { R8483 += 1 };
  s0 -> s0 [0, 65535] { R8482 += 1, R8483 += 1 };
  s0 -> s2 [73, 73] { R8483 += 1 };
  s0 -> s3 [73, 73] { R8483 += 1 };
  s0 -> s1 [78, 65535] { R8483 += 1 };
  s1 -> s1 [0, 72] { R8483 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R8483 += 1 };
  s1 -> s3 [73, 73] { R8483 += 1 };
  s1 -> s1 [78, 65535] { R8483 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 73] { R8483 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [78, 65535] { R8483 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 72] { R8485 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R8484 += 1, R8485 += 1 };
  s0 -> s2 [73, 73] { R8485 += 1, R38 += 1 };
  s0 -> s3 [73, 73] { R8485 += 1, R38 += 1 };
  s0 -> s1 [74, 65535] { R8485 += 1, R38 += 1 };
  s1 -> s1 [0, 72] { R8485 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R8485 += 1, R38 += 1 };
  s1 -> s3 [73, 73] { R8485 += 1, R38 += 1 };
  s1 -> s1 [74, 65535] { R8485 += 1, R38 += 1 };
  s2 -> s2 [0, 65535] { R8485 += 1, R38 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 72] { R8487 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R8486 += 1, R8487 += 1 };
  s0 -> s2 [73, 73] { R8487 += 1, R40 += 1 };
  s0 -> s3 [73, 73] { R8487 += 1, R40 += 1 };
  s0 -> s1 [74, 65535] { R8487 += 1, R40 += 1 };
  s1 -> s1 [0, 72] { R8487 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R8487 += 1, R40 += 1 };
  s1 -> s3 [73, 73] { R8487 += 1, R40 += 1 };
  s1 -> s1 [74, 65535] { R8487 += 1, R40 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8487 += 1, R40 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 72] { R8489 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R8488 += 1, R8489 += 1 };
  s0 -> s2 [73, 73] { R8489 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [73, 73] { R8489 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [74, 65535] { R8489 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 72] { R8489 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R8489 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [73, 73] { R8489 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [74, 65535] { R8489 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535] { R8489 += 1, R42 += 1, R43 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 72] { R8491 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R8490 += 1, R8491 += 1 };
  s0 -> s2 [73, 73] { R8491 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [73, 73] { R8491 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [74, 65535] { R8491 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 72] { R8491 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R8491 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [73, 73] { R8491 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [74, 65535] { R8491 += 1, R46 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8491 += 1, R46 += 1, R47 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 72] { R8493 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R8492 += 1, R8493 += 1 };
  s0 -> s2 [73, 73] { R8493 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [73, 73] { R8493 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [74, 65535] { R8493 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 72] { R8493 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R8493 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [73, 73] { R8493 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [74, 65535] { R8493 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535] { R8493 += 1, R52 += 1, R53 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 72] { R8495 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R8494 += 1, R8495 += 1 };
  s0 -> s2 [73, 73] { R8495 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [73, 73] { R8495 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [74, 65535] { R8495 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 72] { R8495 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R8495 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [73, 73] { R8495 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [74, 65535] { R8495 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8495 += 1, R56 += 1, R57 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 72] { R8497 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R8496 += 1, R8497 += 1 };
  s0 -> s2 [73, 73] { R8497 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [73, 73] { R8497 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [74, 65535] { R8497 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 72] { R8497 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R8497 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [73, 73] { R8497 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [74, 65535] { R8497 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R8497 += 1, R62 += 1, R63 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 72] { R8517 += 1 };
  s0 -> s0 [0, 65535] { R8516 += 1, R8517 += 1 };
  s0 -> s2 [73, 73] { R8517 += 1 };
  s0 -> s1 [74, 65535] { R8517 += 1 };
  s1 -> s1 [0, 72] { R8517 += 1 };
  s1 -> s2 [73, 73] { R8517 += 1 };
  s1 -> s1 [74, 65535] { R8517 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R8517 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R8519 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R8518 += 1, R8519 += 1 };
  s1 -> s1 [0, 65535] { R8519 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 72] { R8521 += 1 };
  s0 -> s0 [0, 65535] { R8520 += 1, R8521 += 1 };
  s0 -> s2 [0, 65535] { R8521 += 1, R8 += 1 };
  s0 -> s3 [73, 73] { R8521 += 1 };
  s0 -> s1 [74, 65535] { R8521 += 1 };
  s1 -> s1 [0, 72] { R8521 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [73, 73] { R8521 += 1 };
  s1 -> s1 [74, 65535] { R8521 += 1 };
  s2 -> s1 [0, 72] { R8521 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8521 += 1, R8 += 1 };
  s2 -> s3 [73, 73] { R8521 += 1 };
  s2 -> s1 [74, 65535] { R8521 += 1 };
  s3 -> s3 [0, 65535] { R8521 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 72] { R8523 += 1, R8461 += 1 };
  s0 -> s0 [0, 65535] { R8522 += 1, R8523 += 1 };
  s0 -> s2 [0, 65535] { R8523 += 1, R8460 += 1, R8461 += 1 };
  s0 -> s1 [74, 65535] { R8523 += 1, R8461 += 1 };
  s1 -> s1 [0, 72] { R8523 += 1, R8461 += 1 };
  s1 -> s1 [0, 65535] { R8523 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [74, 65535] { R8523 += 1, R8461 += 1 };
  s2 -> s1 [0, 72] { R8523 += 1, R8461 += 1 };
  s2 -> s2 [0, 65535] { R8523 += 1, R8460 += 1, R8461 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [74, 65535] { R8523 += 1, R8461 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R8525 += 1, R8462 += 1, R8463 += 1 };
  s0 -> s0 [0, 65535] { R8524 += 1, R8525 += 1 };
  s0 -> s2 [0, 65535] { R8525 += 1, R8463 += 1, R17 += 1 };
  s1 -> s1 [0, 65535] { R8525 += 1, R8462 += 1, R8463 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R8525 += 1, R8463 += 1, R17 += 1 };
  s2 -> s3 [0, 65535] { R8525 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8525 += 1, R8463 += 1, R17 += 1 };
  s3 -> s3 [0, 65535] { R8525 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 73] { R8527 += 1, R8465 += 1 };
  s0 -> s0 [0, 65535] { R8526 += 1, R8527 += 1 };
  s0 -> s2 [0, 65535] { R8527 += 1, R8464 += 1, R8465 += 1 };
  s0 -> s1 [77, 65535] { R8527 += 1, R8465 += 1 };
  s1 -> s1 [0, 73] { R8527 += 1, R8465 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R8527 += 1 };
  s1 -> s1 [77, 65535] { R8527 += 1, R8465 += 1 };
  s2 -> s1 [0, 73] { R8527 += 1, R8465 += 1 };
  s2 -> s2 [0, 65535] { R8527 += 1, R8464 += 1, R8465 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [77, 65535] { R8527 += 1, R8465 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s0 [0, 65535] { R8528 += 1, R8529 += 1 };
  s0 -> s1 [0, 65535] { R8529 += 1, R8467 += 1, R67 += 1 };
  s0 -> s2 [0, 65535] { R8529 += 1, R8466 += 1, R8467 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R8529 += 1, R8467 += 1, R67 += 1 };
  s1 -> s4 [0, 65535] { R8529 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R8529 += 1, R8467 += 1, R67 += 1 };
  s2 -> s2 [0, 65535] { R8529 += 1, R8466 += 1, R8467 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8529 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 76] { R8531 += 1, R8469 += 1 };
  s0 -> s2 [0, 65535] { R8531 += 1, R8469 += 1, R69 += 1 };
  s0 -> s0 [0, 65535] { R8530 += 1, R8531 += 1 };
  s0 -> s3 [0, 65535] { R8531 += 1, R8468 += 1, R8469 += 1 };
  s0 -> s1 [78, 65535] { R8531 += 1, R8469 += 1 };
  s1 -> s1 [0, 76] { R8531 += 1, R8469 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R8531 += 1 };
  s1 -> s1 [78, 65535] { R8531 += 1, R8469 += 1 };
  s2 -> s1 [0, 76] { R8531 += 1, R8469 += 1 };
  s2 -> s2 [0, 65535] { R8531 += 1, R8469 += 1, R69 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R8531 += 1 };
  s2 -> s1 [78, 65535] { R8531 += 1, R8469 += 1 };
  s3 -> s1 [0, 76] { R8531 += 1, R8469 += 1 };
  s3 -> s2 [0, 65535] { R8531 += 1, R8469 += 1, R69 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8531 += 1, R8468 += 1, R8469 += 1 };
  s3 -> s1 [78, 65535] { R8531 += 1, R8469 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8531 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 76] { R8533 += 1, R8471 += 1, R73 += 1 };
  s0 -> s2 [0, 65535] { R8533 += 1, R8471 += 1, R72 += 1, R73 += 1 };
  s0 -> s0 [0, 65535] { R8532 += 1, R8533 += 1 };
  s0 -> s3 [0, 65535] { R8533 += 1, R8470 += 1, R8471 += 1 };
  s0 -> s1 [78, 65535] { R8533 += 1, R8471 += 1, R73 += 1 };
  s1 -> s1 [0, 76] { R8533 += 1, R8471 += 1, R73 += 1 };
  s1 -> s1 [0, 65535] { R8533 += 1, R8471 += 1 };
  s1 -> s5 [0, 65535] { R8533 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [78, 65535] { R8533 += 1, R8471 += 1, R73 += 1 };
  s2 -> s1 [0, 76] { R8533 += 1, R8471 += 1, R73 += 1 };
  s2 -> s5 [0, 65535] { R8533 += 1 };
  s2 -> s2 [0, 65535] { R8533 += 1, R8471 += 1, R72 += 1, R73 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [78, 65535] { R8533 += 1, R8471 += 1, R73 += 1 };
  s3 -> s1 [0, 76] { R8533 += 1, R8471 += 1, R73 += 1 };
  s3 -> s2 [0, 65535] { R8533 += 1, R8471 += 1, R72 += 1, R73 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8533 += 1, R8470 += 1, R8471 += 1 };
  s3 -> s1 [78, 65535] { R8533 += 1, R8471 += 1, R73 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8533 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R8535 += 1, R8473 += 1 };
  s0 -> s2 [0, 65535] { R8535 += 1, R8472 += 1, R8473 += 1 };
  s0 -> s0 [0, 65535] { R8534 += 1, R8535 += 1 };
  s1 -> s1 [0, 65535] { R8535 += 1, R8473 += 1 };
  s1 -> s4 [0, 65535] { R8535 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R8535 += 1, R8473 += 1 };
  s2 -> s2 [0, 65535] { R8535 += 1, R8472 += 1, R8473 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8535 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 77] { R8537 += 1, R8475 += 1, R7715 += 1 };
  s0 -> s0 [0, 65535] { R8536 += 1, R8537 += 1 };
  s0 -> s2 [0, 65535] { R8537 += 1, R8474 += 1, R8475 += 1 };
  s0 -> s1 [0, 65535] { R8537 += 1, R8475 += 1 };
  s0 -> s1 [89, 65535] { R8537 += 1, R8475 += 1, R7715 += 1 };
  s1 -> s1 [0, 77] { R8537 += 1, R8475 += 1, R7715 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R8537 += 1, R8475 += 1 };
  s1 -> s4 [0, 65535] { R8537 += 1 };
  s1 -> s1 [89, 65535] { R8537 += 1, R8475 += 1, R7715 += 1 };
  s2 -> s1 [0, 77] { R8537 += 1, R8475 += 1, R7715 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R8537 += 1, R8474 += 1, R8475 += 1 };
  s2 -> s1 [0, 65535] { R8537 += 1, R8475 += 1 };
  s2 -> s1 [89, 65535] { R8537 += 1, R8475 += 1, R7715 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8537 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s0 [0, 65535] { R8538 += 1, R8539 += 1 };
  s0 -> s1 [0, 65535] { R8539 += 1, R8476 += 1, R8477 += 1 };
  s0 -> s2 [0, 65535] { R8539 += 1, R8477 += 1, R8142 += 1, R8143 += 1 };
  s0 -> s3 [0, 65535] { R8539 += 1, R8477 += 1 };
  s1 -> s1 [0, 65535] { R8539 += 1, R8476 += 1, R8477 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s2 [0, 65535] { R8539 += 1, R8477 += 1, R8142 += 1, R8143 += 1 };
  s1 -> s3 [0, 65535] { R8539 += 1, R8477 += 1 };
  s2 -> s4 [0, 65535] { R8539 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R8539 += 1, R8477 += 1, R8142 += 1, R8143 += 1 };
  s2 -> s3 [0, 65535] { R8539 += 1, R8477 += 1 };
  s3 -> s4 [0, 65535] { R8539 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R8539 += 1, R8477 += 1 };
  s4 -> s4 [0, 65535] { R8539 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 77] { R8541 += 1, R8479 += 1, R8459 += 1 };
  s0 -> s2 [0, 65535] { R8541 += 1, R8478 += 1, R8479 += 1 };
  s0 -> s0 [0, 65535] { R8540 += 1, R8541 += 1 };
  s0 -> s1 [0, 65535] { R8541 += 1, R8479 += 1 };
  s0 -> s1 [90, 65535] { R8541 += 1, R8479 += 1, R8459 += 1 };
  s1 -> s1 [0, 77] { R8541 += 1, R8479 += 1, R8459 += 1 };
  s1 -> s1 [0, 65535] { R8541 += 1, R8479 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R8541 += 1 };
  s1 -> s1 [90, 65535] { R8541 += 1, R8479 += 1, R8459 += 1 };
  s2 -> s1 [0, 77] { R8541 += 1, R8479 += 1, R8459 += 1 };
  s2 -> s2 [0, 65535] { R8541 += 1, R8478 += 1, R8479 += 1 };
  s2 -> s1 [0, 65535] { R8541 += 1, R8479 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [90, 65535] { R8541 += 1, R8479 += 1, R8459 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8541 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R8543 += 1, R8499 += 1, R18 += 1 };
  s0 -> s2 [0, 65535] { R8543 += 1, R8498 += 1, R8499 += 1 };
  s0 -> s0 [0, 65535] { R8542 += 1, R8543 += 1 };
  s1 -> s4 [0, 65535] { R8543 += 1 };
  s1 -> s1 [0, 65535] { R8543 += 1, R8499 += 1, R18 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R8543 += 1, R8499 += 1, R18 += 1 };
  s2 -> s2 [0, 65535] { R8543 += 1, R8498 += 1, R8499 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8543 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 72] { R8545 += 1, R8501 += 1 };
  s0 -> s2 [0, 65535] { R8545 += 1, R8500 += 1, R8501 += 1 };
  s0 -> s0 [0, 65535] { R8544 += 1, R8545 += 1 };
  s0 -> s3 [73, 73] { R8545 += 1, R8501 += 1 };
  s0 -> s4 [73, 73] { R8545 += 1, R8501 += 1 };
  s0 -> s5 [77, 77] { R8545 += 1, R8501 += 1 };
  s0 -> s1 [78, 65535] { R8545 += 1, R8501 += 1 };
  s1 -> s1 [0, 72] { R8545 += 1, R8501 += 1 };
  s1 -> s3 [73, 73] { R8545 += 1, R8501 += 1 };
  s1 -> s4 [73, 73] { R8545 += 1, R8501 += 1 };
  s1 -> s5 [77, 77] { R8545 += 1, R8501 += 1 };
  s1 -> s1 [78, 65535] { R8545 += 1, R8501 += 1 };
  s2 -> s1 [0, 72] { R8545 += 1, R8501 += 1 };
  s2 -> s2 [0, 65535] { R8545 += 1, R8500 += 1, R8501 += 1 };
  s2 -> s3 [73, 73] { R8545 += 1, R8501 += 1 };
  s2 -> s4 [73, 73] { R8545 += 1, R8501 += 1 };
  s2 -> s5 [77, 77] { R8545 += 1, R8501 += 1 };
  s2 -> s1 [78, 65535] { R8545 += 1, R8501 += 1 };
  s4 -> s4 [0, 73] { R8545 += 1, R8501 += 1 };
  s4 -> s8 [77, 77] { R8545 += 1, R8501 += 1 };
  s4 -> s4 [78, 65535] { R8545 += 1, R8501 += 1 };
  s5 -> s5 [0, 72] { R8545 += 1, R8501 += 1 };
  s5 -> s5 [0, 65535] { R8545 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [73, 73] { R8545 += 1, R8501 += 1 };
  s5 -> s8 [73, 73] { R8545 += 1, R8501 += 1 };
  s5 -> s5 [77, 65535] { R8545 += 1, R8501 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R8545 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 73] { R8545 += 1, R8501 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R8545 += 1 };
  s8 -> s8 [77, 65535] { R8545 += 1, R8501 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 72] { R8547 += 1, R8503 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R8546 += 1, R8547 += 1 };
  s0 -> s2 [0, 65535] { R8547 += 1, R8502 += 1, R8503 += 1 };
  s0 -> s3 [73, 73] { R8547 += 1, R8503 += 1, R66 += 1 };
  s0 -> s4 [73, 73] { R8547 += 1, R8503 += 1, R66 += 1 };
  s0 -> s1 [74, 65535] { R8547 += 1, R8503 += 1, R66 += 1 };
  s1 -> s1 [0, 72] { R8547 += 1, R8503 += 1, R66 += 1 };
  s1 -> s1 [0, 65535] { R8547 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R8547 += 1, R8503 += 1, R66 += 1 };
  s1 -> s4 [73, 73] { R8547 += 1, R8503 += 1, R66 += 1 };
  s1 -> s1 [74, 65535] { R8547 += 1, R8503 += 1, R66 += 1 };
  s2 -> s1 [0, 72] { R8547 += 1, R8503 += 1, R66 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R8547 += 1, R8502 += 1, R8503 += 1 };
  s2 -> s3 [73, 73] { R8547 += 1, R8503 += 1, R66 += 1 };
  s2 -> s4 [73, 73] { R8547 += 1, R8503 += 1, R66 += 1 };
  s2 -> s1 [74, 65535] { R8547 += 1, R8503 += 1, R66 += 1 };
  s3 -> s6 [0, 65535] { R8547 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R8547 += 1, R8503 += 1, R66 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8547 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8547 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 72] { R8549 += 1, R8505 += 1, R68 += 1 };
  s0 -> s2 [0, 65535] { R8549 += 1, R8504 += 1, R8505 += 1 };
  s0 -> s0 [0, 65535] { R8548 += 1, R8549 += 1 };
  s0 -> s3 [73, 73] { R8549 += 1, R8505 += 1, R68 += 1 };
  s0 -> s4 [73, 73] { R8549 += 1, R8505 += 1, R68 += 1 };
  s0 -> s1 [74, 65535] { R8549 += 1, R8505 += 1, R68 += 1 };
  s1 -> s1 [0, 72] { R8549 += 1, R8505 += 1, R68 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R8549 += 1 };
  s1 -> s3 [73, 73] { R8549 += 1, R8505 += 1, R68 += 1 };
  s1 -> s4 [73, 73] { R8549 += 1, R8505 += 1, R68 += 1 };
  s1 -> s1 [74, 65535] { R8549 += 1, R8505 += 1, R68 += 1 };
  s2 -> s1 [0, 72] { R8549 += 1, R8505 += 1, R68 += 1 };
  s2 -> s2 [0, 65535] { R8549 += 1, R8504 += 1, R8505 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R8549 += 1, R8505 += 1, R68 += 1 };
  s2 -> s4 [73, 73] { R8549 += 1, R8505 += 1, R68 += 1 };
  s2 -> s1 [74, 65535] { R8549 += 1, R8505 += 1, R68 += 1 };
  s3 -> s3 [0, 65535] { R8549 += 1, R8505 += 1, R68 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R8549 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8549 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8549 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 72] { R8551 += 1, R8507 += 1, R70 += 1, R71 += 1 };
  s0 -> s0 [0, 65535] { R8550 += 1, R8551 += 1 };
  s0 -> s2 [0, 65535] { R8551 += 1, R8506 += 1, R8507 += 1 };
  s0 -> s3 [73, 73] { R8551 += 1, R8507 += 1, R70 += 1, R71 += 1 };
  s0 -> s4 [73, 73] { R8551 += 1, R8507 += 1, R70 += 1, R71 += 1 };
  s0 -> s1 [74, 65535] { R8551 += 1, R8507 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 72] { R8551 += 1, R8507 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 65535] { R8551 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R8551 += 1, R8507 += 1, R70 += 1, R71 += 1 };
  s1 -> s4 [73, 73] { R8551 += 1, R8507 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [74, 65535] { R8551 += 1, R8507 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [0, 72] { R8551 += 1, R8507 += 1, R70 += 1, R71 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R8551 += 1, R8506 += 1, R8507 += 1 };
  s2 -> s3 [73, 73] { R8551 += 1, R8507 += 1, R70 += 1, R71 += 1 };
  s2 -> s4 [73, 73] { R8551 += 1, R8507 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [74, 65535] { R8551 += 1, R8507 += 1, R70 += 1, R71 += 1 };
  s3 -> s6 [0, 65535] { R8551 += 1 };
  s3 -> s3 [0, 65535] { R8551 += 1, R8507 += 1, R70 += 1, R71 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8551 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8551 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 72] { R8553 += 1, R8509 += 1, R7706 += 1, R7707 += 1 };
  s0 -> s2 [0, 72] { R8553 += 1, R8509 += 1, R7707 += 1, R7708 += 1 };
  s0 -> s0 [0, 65535] { R8552 += 1, R8553 += 1 };
  s0 -> s3 [0, 65535] { R8553 += 1, R8508 += 1, R8509 += 1 };
  s0 -> s4 [73, 73] { R8553 += 1, R8509 += 1, R7706 += 1, R7707 += 1 };
  s0 -> s5 [73, 73] { R8553 += 1, R8509 += 1, R7707 += 1, R7708 += 1 };
  s0 -> s6 [73, 73] { R8553 += 1, R8509 += 1, R7707 += 1, R7708 += 1 };
  s0 -> s7 [73, 73] { R8553 += 1, R8509 += 1, R7706 += 1, R7707 += 1 };
  s0 -> s1 [74, 65535] { R8553 += 1, R8509 += 1, R7706 += 1, R7707 += 1 };
  s0 -> s2 [74, 65535] { R8553 += 1, R8509 += 1, R7707 += 1, R7708 += 1 };
  s1 -> s1 [0, 72] { R8553 += 1, R8509 += 1, R7706 += 1, R7707 += 1 };
  s1 -> s2 [0, 72] { R8553 += 1, R8509 += 1, R7707 += 1, R7708 += 1 };
  s1 -> s4 [73, 73] { R8553 += 1, R8509 += 1, R7706 += 1, R7707 += 1 };
  s1 -> s5 [73, 73] { R8553 += 1, R8509 += 1, R7707 += 1, R7708 += 1 };
  s1 -> s6 [73, 73] { R8553 += 1, R8509 += 1, R7707 += 1, R7708 += 1 };
  s1 -> s7 [73, 73] { R8553 += 1, R8509 += 1, R7706 += 1, R7707 += 1 };
  s1 -> s1 [74, 65535] { R8553 += 1, R8509 += 1, R7706 += 1, R7707 += 1 };
  s1 -> s2 [74, 65535] { R8553 += 1, R8509 += 1, R7707 += 1, R7708 += 1 };
  s2 -> s11 [0, 72] { R8553 += 1, R8509 += 1 };
  s2 -> s2 [0, 72] { R8553 += 1, R8509 += 1, R7707 += 1, R7708 += 1 };
  s2 -> s5 [73, 73] { R8553 += 1, R8509 += 1, R7707 += 1, R7708 += 1 };
  s2 -> s8 [73, 73] { R8553 += 1, R8509 += 1 };
  s2 -> s6 [73, 73] { R8553 += 1, R8509 += 1, R7707 += 1, R7708 += 1 };
  s2 -> s12 [73, 73] { R8553 += 1, R8509 += 1 };
  s2 -> s11 [74, 65535] { R8553 += 1, R8509 += 1 };
  s2 -> s2 [74, 65535] { R8553 += 1, R8509 += 1, R7707 += 1, R7708 += 1 };
  s3 -> s1 [0, 72] { R8553 += 1, R8509 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s2 [0, 72] { R8553 += 1, R8509 += 1, R7707 += 1, R7708 += 1 };
  s3 -> s3 [0, 65535] { R8553 += 1, R8508 += 1, R8509 += 1 };
  s3 -> s4 [73, 73] { R8553 += 1, R8509 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s5 [73, 73] { R8553 += 1, R8509 += 1, R7707 += 1, R7708 += 1 };
  s3 -> s6 [73, 73] { R8553 += 1, R8509 += 1, R7707 += 1, R7708 += 1 };
  s3 -> s7 [73, 73] { R8553 += 1, R8509 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s1 [74, 65535] { R8553 += 1, R8509 += 1, R7706 += 1, R7707 += 1 };
  s3 -> s2 [74, 65535] { R8553 += 1, R8509 += 1, R7707 += 1, R7708 += 1 };
  s4 -> s4 [0, 65535] { R8553 += 1, R8509 += 1, R7706 += 1, R7707 += 1 };
  s4 -> s6 [0, 65535] { R8553 += 1, R8509 += 1, R7707 += 1, R7708 += 1 };
  s6 -> s8 [0, 65535] { R8553 += 1, R8509 += 1 };
  s6 -> s6 [0, 65535] { R8553 += 1, R8509 += 1, R7707 += 1, R7708 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R8553 += 1, R8509 += 1 };
  s8 -> s10 [0, 65535] { R8553 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R8553 += 1 };
  s11 -> s11 [0, 72] { R8553 += 1, R8509 += 1 };
  s11 -> s11 [0, 65535] { R8553 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s8 [73, 73] { R8553 += 1, R8509 += 1 };
  s11 -> s12 [73, 73] { R8553 += 1, R8509 += 1 };
  s11 -> s11 [74, 65535] { R8553 += 1, R8509 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R8553 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 72] { R8555 += 1, R8511 += 1, R7712 += 1, R7713 += 1 };
  s0 -> s2 [0, 72] { R8555 += 1, R8511 += 1, R7713 += 1 };
  s0 -> s3 [0, 65535] { R8555 += 1, R8510 += 1, R8511 += 1 };
  s0 -> s0 [0, 65535] { R8554 += 1, R8555 += 1 };
  s0 -> s4 [73, 73] { R8555 += 1, R8511 += 1, R7713 += 1 };
  s0 -> s5 [73, 73] { R8555 += 1, R8511 += 1, R7713 += 1 };
  s0 -> s6 [73, 73] { R8555 += 1, R8511 += 1, R7712 += 1, R7713 += 1 };
  s0 -> s7 [73, 73] { R8555 += 1, R8511 += 1, R7712 += 1, R7713 += 1 };
  s0 -> s2 [74, 77] { R8555 += 1, R8511 += 1, R7713 += 1 };
  s0 -> s1 [74, 65535] { R8555 += 1, R8511 += 1, R7712 += 1, R7713 += 1 };
  s0 -> s8 [89, 89] { R8555 += 1, R8511 += 1, R7713 += 1 };
  s0 -> s2 [90, 65535] { R8555 += 1, R8511 += 1, R7713 += 1 };
  s1 -> s1 [0, 72] { R8555 += 1, R8511 += 1, R7712 += 1, R7713 += 1 };
  s1 -> s2 [0, 72] { R8555 += 1, R8511 += 1, R7713 += 1 };
  s1 -> s4 [73, 73] { R8555 += 1, R8511 += 1, R7713 += 1 };
  s1 -> s5 [73, 73] { R8555 += 1, R8511 += 1, R7713 += 1 };
  s1 -> s6 [73, 73] { R8555 += 1, R8511 += 1, R7712 += 1, R7713 += 1 };
  s1 -> s7 [73, 73] { R8555 += 1, R8511 += 1, R7712 += 1, R7713 += 1 };
  s1 -> s2 [74, 77] { R8555 += 1, R8511 += 1, R7713 += 1 };
  s1 -> s1 [74, 65535] { R8555 += 1, R8511 += 1, R7712 += 1, R7713 += 1 };
  s1 -> s8 [89, 89] { R8555 += 1, R8511 += 1, R7713 += 1 };
  s1 -> s2 [90, 65535] { R8555 += 1, R8511 += 1, R7713 += 1 };
  s2 -> s2 [0, 72] { R8555 += 1, R8511 += 1, R7713 += 1 };
  s2 -> s4 [73, 73] { R8555 += 1, R8511 += 1, R7713 += 1 };
  s2 -> s5 [73, 73] { R8555 += 1, R8511 += 1, R7713 += 1 };
  s2 -> s2 [74, 77] { R8555 += 1, R8511 += 1, R7713 += 1 };
  s2 -> s8 [89, 89] { R8555 += 1, R8511 += 1, R7713 += 1 };
  s2 -> s2 [90, 65535] { R8555 += 1, R8511 += 1, R7713 += 1 };
  s3 -> s1 [0, 72] { R8555 += 1, R8511 += 1, R7712 += 1, R7713 += 1 };
  s3 -> s2 [0, 72] { R8555 += 1, R8511 += 1, R7713 += 1 };
  s3 -> s3 [0, 65535] { R8555 += 1, R8510 += 1, R8511 += 1 };
  s3 -> s4 [73, 73] { R8555 += 1, R8511 += 1, R7713 += 1 };
  s3 -> s5 [73, 73] { R8555 += 1, R8511 += 1, R7713 += 1 };
  s3 -> s6 [73, 73] { R8555 += 1, R8511 += 1, R7712 += 1, R7713 += 1 };
  s3 -> s7 [73, 73] { R8555 += 1, R8511 += 1, R7712 += 1, R7713 += 1 };
  s3 -> s2 [74, 77] { R8555 += 1, R8511 += 1, R7713 += 1 };
  s3 -> s1 [74, 65535] { R8555 += 1, R8511 += 1, R7712 += 1, R7713 += 1 };
  s3 -> s8 [89, 89] { R8555 += 1, R8511 += 1, R7713 += 1 };
  s3 -> s2 [90, 65535] { R8555 += 1, R8511 += 1, R7713 += 1 };
  s5 -> s5 [0, 77] { R8555 += 1, R8511 += 1, R7713 += 1 };
  s5 -> s11 [89, 89] { R8555 += 1, R8511 += 1, R7713 += 1 };
  s5 -> s5 [90, 65535] { R8555 += 1, R8511 += 1, R7713 += 1 };
  s6 -> s5 [0, 77] { R8555 += 1, R8511 += 1, R7713 += 1 };
  s6 -> s6 [0, 65535] { R8555 += 1, R8511 += 1, R7712 += 1, R7713 += 1 };
  s6 -> s11 [89, 89] { R8555 += 1, R8511 += 1, R7713 += 1 };
  s6 -> s5 [90, 65535] { R8555 += 1, R8511 += 1, R7713 += 1 };
  s8 -> s8 [0, 72] { R8555 += 1, R8511 += 1, R7713 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R8555 += 1 };
  s8 -> s10 [73, 73] { R8555 += 1, R8511 += 1 };
  s8 -> s11 [73, 73] { R8555 += 1, R8511 += 1 };
  s8 -> s8 [74, 77] { R8555 += 1, R8511 += 1, R7713 += 1 };
  s8 -> s8 [74, 65535] { R8555 += 1, R8511 += 1 };
  s8 -> s8 [89, 65535] { R8555 += 1, R8511 += 1, R7713 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R8555 += 1 };
  s11 -> s11 [0, 77] { R8555 += 1, R8511 += 1, R7713 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s12 [0, 65535] { R8555 += 1 };
  s11 -> s11 [0, 65535] { R8555 += 1, R8511 += 1 };
  s11 -> s11 [89, 65535] { R8555 += 1, R8511 += 1, R7713 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R8555 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 72] { R8557 += 1, R8513 += 1, R8138 += 1, R8139 += 1 };
  s0 -> s2 [0, 72] { R8557 += 1, R8513 += 1, R8139 += 1, R8140 += 1 };
  s0 -> s0 [0, 65535] { R8556 += 1, R8557 += 1 };
  s0 -> s3 [0, 65535] { R8557 += 1, R8512 += 1, R8513 += 1 };
  s0 -> s4 [73, 73] { R8557 += 1, R8513 += 1, R8139 += 1, R8140 += 1 };
  s0 -> s5 [73, 73] { R8557 += 1, R8513 += 1, R8139 += 1, R8140 += 1 };
  s0 -> s6 [73, 73] { R8557 += 1, R8513 += 1, R8138 += 1, R8139 += 1 };
  s0 -> s7 [73, 73] { R8557 += 1, R8513 += 1, R8138 += 1, R8139 += 1 };
  s0 -> s1 [74, 65535] { R8557 += 1, R8513 += 1, R8138 += 1, R8139 += 1 };
  s0 -> s2 [74, 65535] { R8557 += 1, R8513 += 1, R8139 += 1, R8140 += 1 };
  s1 -> s1 [0, 72] { R8557 += 1, R8513 += 1, R8138 += 1, R8139 += 1 };
  s1 -> s2 [0, 72] { R8557 += 1, R8513 += 1, R8139 += 1, R8140 += 1 };
  s1 -> s4 [73, 73] { R8557 += 1, R8513 += 1, R8139 += 1, R8140 += 1 };
  s1 -> s5 [73, 73] { R8557 += 1, R8513 += 1, R8139 += 1, R8140 += 1 };
  s1 -> s6 [73, 73] { R8557 += 1, R8513 += 1, R8138 += 1, R8139 += 1 };
  s1 -> s7 [73, 73] { R8557 += 1, R8513 += 1, R8138 += 1, R8139 += 1 };
  s1 -> s1 [74, 65535] { R8557 += 1, R8513 += 1, R8138 += 1, R8139 += 1 };
  s1 -> s2 [74, 65535] { R8557 += 1, R8513 += 1, R8139 += 1, R8140 += 1 };
  s2 -> s2 [0, 72] { R8557 += 1, R8513 += 1, R8139 += 1, R8140 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R8557 += 1 };
  s2 -> s4 [73, 73] { R8557 += 1, R8513 += 1, R8139 += 1, R8140 += 1 };
  s2 -> s5 [73, 73] { R8557 += 1, R8513 += 1, R8139 += 1, R8140 += 1 };
  s2 -> s2 [74, 65535] { R8557 += 1, R8513 += 1, R8139 += 1, R8140 += 1 };
  s3 -> s1 [0, 72] { R8557 += 1, R8513 += 1, R8138 += 1, R8139 += 1 };
  s3 -> s2 [0, 72] { R8557 += 1, R8513 += 1, R8139 += 1, R8140 += 1 };
  s3 -> s3 [0, 65535] { R8557 += 1, R8512 += 1, R8513 += 1 };
  s3 -> s4 [73, 73] { R8557 += 1, R8513 += 1, R8139 += 1, R8140 += 1 };
  s3 -> s5 [73, 73] { R8557 += 1, R8513 += 1, R8139 += 1, R8140 += 1 };
  s3 -> s6 [73, 73] { R8557 += 1, R8513 += 1, R8138 += 1, R8139 += 1 };
  s3 -> s7 [73, 73] { R8557 += 1, R8513 += 1, R8138 += 1, R8139 += 1 };
  s3 -> s1 [74, 65535] { R8557 += 1, R8513 += 1, R8138 += 1, R8139 += 1 };
  s3 -> s2 [74, 65535] { R8557 += 1, R8513 += 1, R8139 += 1, R8140 += 1 };
  s4 -> s4 [0, 65535] { R8557 += 1 };
  s4 -> s8 [0, 65535];
  s5 -> s5 [0, 65535] { R8557 += 1, R8513 += 1, R8139 += 1, R8140 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s9 [0, 65535] { R8557 += 1 };
  s7 -> s5 [0, 65535] { R8557 += 1, R8513 += 1, R8139 += 1, R8140 += 1 };
  s7 -> s7 [0, 65535] { R8557 += 1, R8513 += 1, R8138 += 1, R8139 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R8557 += 1 };
  accepting s4, s8, s5, s2, s9;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 72] { R8559 += 1, R8515 += 1, R8457 += 1 };
  s0 -> s2 [0, 72] { R8559 += 1, R8515 += 1, R8456 += 1, R8457 += 1 };
  s0 -> s3 [0, 65535] { R8559 += 1, R8514 += 1, R8515 += 1 };
  s0 -> s0 [0, 65535] { R8558 += 1, R8559 += 1 };
  s0 -> s4 [73, 73] { R8559 += 1, R8515 += 1, R8457 += 1 };
  s0 -> s5 [73, 73] { R8559 += 1, R8515 += 1, R8456 += 1, R8457 += 1 };
  s0 -> s6 [73, 73] { R8559 += 1, R8515 += 1, R8456 += 1, R8457 += 1 };
  s0 -> s7 [73, 73] { R8559 += 1, R8515 += 1, R8457 += 1 };
  s0 -> s1 [74, 76] { R8559 += 1, R8515 += 1, R8457 += 1 };
  s0 -> s2 [74, 65535] { R8559 += 1, R8515 += 1, R8456 += 1, R8457 += 1 };
  s0 -> s8 [77, 77] { R8559 += 1, R8515 += 1, R8457 += 1 };
  s0 -> s1 [90, 65535] { R8559 += 1, R8515 += 1, R8457 += 1 };
  s1 -> s1 [0, 72] { R8559 += 1, R8515 += 1, R8457 += 1 };
  s1 -> s4 [73, 73] { R8559 += 1, R8515 += 1 };
  s1 -> s7 [73, 73] { R8559 += 1, R8515 += 1 };
  s1 -> s1 [74, 76] { R8559 += 1, R8515 += 1, R8457 += 1 };
  s1 -> s1 [74, 65535] { R8559 += 1, R8515 += 1 };
  s1 -> s8 [77, 77] { R8559 += 1, R8515 += 1, R8457 += 1 };
  s1 -> s1 [90, 65535] { R8559 += 1, R8515 += 1, R8457 += 1 };
  s2 -> s1 [0, 72] { R8559 += 1, R8515 += 1, R8457 += 1 };
  s2 -> s2 [0, 72] { R8559 += 1, R8515 += 1, R8456 += 1, R8457 += 1 };
  s2 -> s4 [73, 73] { R8559 += 1, R8515 += 1, R8457 += 1 };
  s2 -> s5 [73, 73] { R8559 += 1, R8515 += 1, R8456 += 1, R8457 += 1 };
  s2 -> s6 [73, 73] { R8559 += 1, R8515 += 1, R8456 += 1, R8457 += 1 };
  s2 -> s7 [73, 73] { R8559 += 1, R8515 += 1, R8457 += 1 };
  s2 -> s1 [74, 76] { R8559 += 1, R8515 += 1, R8457 += 1 };
  s2 -> s2 [74, 65535] { R8559 += 1, R8515 += 1, R8456 += 1, R8457 += 1 };
  s2 -> s8 [77, 77] { R8559 += 1, R8515 += 1, R8457 += 1 };
  s2 -> s1 [90, 65535] { R8559 += 1, R8515 += 1, R8457 += 1 };
  s3 -> s1 [0, 72] { R8559 += 1, R8515 += 1, R8457 += 1 };
  s3 -> s2 [0, 72] { R8559 += 1, R8515 += 1, R8456 += 1, R8457 += 1 };
  s3 -> s3 [0, 65535] { R8559 += 1, R8514 += 1, R8515 += 1 };
  s3 -> s4 [73, 73] { R8559 += 1, R8515 += 1, R8457 += 1 };
  s3 -> s5 [73, 73] { R8559 += 1, R8515 += 1, R8456 += 1, R8457 += 1 };
  s3 -> s6 [73, 73] { R8559 += 1, R8515 += 1, R8456 += 1, R8457 += 1 };
  s3 -> s7 [73, 73] { R8559 += 1, R8515 += 1, R8457 += 1 };
  s3 -> s1 [74, 76] { R8559 += 1, R8515 += 1, R8457 += 1 };
  s3 -> s2 [74, 65535] { R8559 += 1, R8515 += 1, R8456 += 1, R8457 += 1 };
  s3 -> s8 [77, 77] { R8559 += 1, R8515 += 1, R8457 += 1 };
  s3 -> s1 [90, 65535] { R8559 += 1, R8515 += 1, R8457 += 1 };
  s4 -> s4 [0, 76] { R8559 += 1, R8515 += 1, R8457 += 1 };
  s4 -> s4 [0, 65535] { R8559 += 1, R8515 += 1 };
  s4 -> s11 [77, 77] { R8559 += 1, R8515 += 1, R8457 += 1 };
  s4 -> s4 [90, 65535] { R8559 += 1, R8515 += 1, R8457 += 1 };
  s5 -> s4 [0, 76] { R8559 += 1, R8515 += 1, R8457 += 1 };
  s5 -> s5 [0, 65535] { R8559 += 1, R8515 += 1, R8456 += 1, R8457 += 1 };
  s5 -> s11 [77, 77] { R8559 += 1, R8515 += 1, R8457 += 1 };
  s5 -> s4 [90, 65535] { R8559 += 1, R8515 += 1, R8457 += 1 };
  s8 -> s8 [0, 72] { R8559 += 1, R8515 += 1, R8457 += 1 };
  s8 -> s8 [0, 65535] { R8559 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [73, 73] { R8559 += 1, R8515 += 1 };
  s8 -> s11 [73, 73] { R8559 += 1, R8515 += 1 };
  s8 -> s8 [74, 77] { R8559 += 1, R8515 += 1, R8457 += 1 };
  s8 -> s8 [74, 65535] { R8559 += 1, R8515 += 1 };
  s8 -> s8 [90, 65535] { R8559 += 1, R8515 += 1, R8457 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R8559 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s11 [0, 77] { R8559 += 1, R8515 += 1, R8457 += 1 };
  s11 -> s12 [0, 65535] { R8559 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R8559 += 1, R8515 += 1 };
  s11 -> s11 [90, 65535] { R8559 += 1, R8515 += 1, R8457 += 1 };
  s12 -> s12 [0, 65535] { R8559 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
synchronised {  // Automata constraining P54
automaton P54_0 {
  init s0;
  s0 -> s1 [109, 109];
  accepting s1;
};
};
constraint R2 = R8559 && R20 - R8559 = -1 && R21 = R8559 && R22 - R8559 = -1 && R23 = R8559 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R7715 + -1*R7713 - R53 = 0 && R52 + R7714 + R7712 = 0 && R8500 = 0 && R8501 = 0 && R8508 = 0 && R8509 = 0 && R8510 = 0 && R8511 = 0 && R8512 = 0 && R8513 = 0 && R8514 = 0 && R8515 = 0 && R8516 = 0 && R8517 = R8559 && R8518 = 0 && R8519 = R8559 && R8520 = 0 && R8521 = R8559 && R8522 = 0 && R8523 = R8559 && R8524 = 0 && R8525 = R8559 && R8526 = 0 && R8527 = R8559 && R8528 = 0 && R8529 = R8559 && R8530 = 0 && R8531 = R8559 && R8532 = 0 && R8533 = R8559 && R8534 = 0 && R8535 = R8559 && R8536 = 0 && R8537 = R8559 && R8538 = 0 && R8539 = R8559 && R8540 = 0 && R8541 = R8559 && R8542 = 0 && R8543 = R8559 && R8544 = 0 && R8545 = R8559 && R8546 = 0 && R8547 = R8559 && R8548 = 0 && R8549 = R8559 && R8550 = 0 && R8551 = R8559 && R8552 = 0 && R8553 = R8559 && R8554 = 0 && R8555 = R8559 && R8556 = 0 && R8557 = R8559 && R8558 = 0 && -1 < R1 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R7715 + -1*R7713 - R53 < 1 && 0 < R8559 && (R1 != 0 || R17 = 0 || (R8460 = 0 && R8461 = 0)) && (R1 != 0 || R17 = 0 || (R8462 = 0 && R8463 = 0)) && (R1 != 0 || R17 = 0 || (R8464 = 0 && R8465 = 0)) && (R1 != 0 || R17 = 0 || (R8466 = 0 && R8467 = 0)) && (R1 != 0 || R17 = 0 || (R8468 = 0 && R8469 = 0)) && (R1 != 0 || R17 = 0 || (R8470 = 0 && R8471 = 0)) && (R1 != 0 || R17 = 0 || (R8472 = 0 && R8473 = 0)) && (R1 != 0 || R17 = 0 || (R8474 = 0 && R8475 = 0)) && (R1 != 0 || R17 = 0 || (R8476 = 0 && R8477 = 0)) && (R1 != 0 || R17 = 0 || (R8478 = 0 && R8479 = 0)) && (R48 + R7711 + R7708 != 0 || ((R42 + R72 + R70 != 0 || R43 + R73 + R71 + -1*R7715 + -1*R7713 - R53 = 0 || R53 + R7715 + R7713 < 1) && (R42 + R72 + R70 = 0 || R53 + R7715 + R7713 < 1))) && (R48 + R7711 + R7708 != 0 || ((R46 + R7709 + R7706 != 0 || R47 + R7710 + R7707 + -1*R7715 + -1*R7713 - R53 = 0 || R53 + R7715 + R7713 < 1) && (R46 + R7709 + R7706 = 0 || R53 + R7715 + R7713 < 1))) && (R8460 != 0 || R1 = R8461 || R1 < 1) && (R8462 != 0 || R1 = R8463 || R1 < 1) && (R8464 != 0 || R1 = R8465 || R1 < 1) && (R8466 != 0 || R1 = R8467 || R1 < 1) && (R8468 != 0 || R1 = R8469 || R1 < 1) && (R8470 != 0 || R1 = R8471 || R1 < 1) && (R8472 != 0 || R1 = R8473 || R1 < 1) && (R8474 != 0 || R1 = R8475 || R1 < 1) && (R8476 != 0 || R1 = R8477 || R1 < 1) && (R8478 != 0 || R1 = R8479 || R1 < 1) && (R18 = 0 || (R8498 = 0 && R8499 = 0)) && (R18 = 0 || (R8502 = 0 && R8503 = 0)) && (R18 = 0 || (R8504 = 0 && R8505 = 0)) && (R18 = 0 || (R8506 = 0 && R8507 = 0)) && (R19 = 0 || (R8480 = 0 && R8481 = 0)) && (R19 = 0 || (R8482 = 0 && R8483 = 0)) && (R19 = 0 || (R8484 = 0 && R8485 = 0)) && (R19 = 0 || (R8486 = 0 && R8487 = 0)) && (R19 = 0 || (R8488 = 0 && R8489 = 0)) && (R19 = 0 || (R8490 = 0 && R8491 = 0)) && (R19 = 0 || (R8492 = 0 && R8493 = 0)) && (R19 = 0 || (R8494 = 0 && R8495 = 0)) && (R19 = 0 || (R8496 = 0 && R8497 = 0)) && (R48 + R7711 + R7708 = 0 || (R42 + R72 + R70 = 0 && R43 + R73 + R71 + -1*R7715 + -1*R7713 - R53 = 0)) && (R48 + R7711 + R7708 = 0 || (R46 + R7709 + R7706 = 0 && R47 + R7710 + R7707 + -1*R7715 + -1*R7713 - R53 = 0)) && (R58 + R8143 + R8140 = 0 || (R56 + R8141 + R8138 = 0 && R57 + R8142 + R8139 = 0)) && (R58 + R8143 + R8140 = 0 || (R62 + R8458 + R8456 = 0 && R63 + R8459 + R8457 = 0)) && (R8460 = 0 || R1 < 1) && (R8462 = 0 || R1 < 1) && (R8464 = 0 || R1 < 1) && (R8466 = 0 || R1 < 1) && (R8468 = 0 || R1 < 1) && (R8470 = 0 || R1 < 1) && (R8472 = 0 || R1 < 1) && (R8474 = 0 || R1 < 1) && (R8476 = 0 || R1 < 1) && (R8478 = 0 || R1 < 1);
// End of Parikh automata intersection problem
