// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R11522, R11523, R11524, R11525, R11526, R11527, R11528, R11529, R11530, R11531, R12, R14072, R14073, R14074, R14075, R14920, R14921, R14922, R14923, R14924, R14925, R15030, R15031, R15032, R15033, R15034, R15035, R15036, R15037, R15038, R15039, R15040, R15041, R15042, R15043, R15044, R15045, R15046, R15047, R15048, R15049, R15050, R15051, R15052, R15053, R15054, R15055, R15056, R15057, R15058, R15059, R15060, R15061, R15062, R15063, R15064, R15065, R15066, R15067, R15068, R15069, R15070, R15071, R15072, R15073, R15074, R15075, R15076, R15077, R15078, R15079, R15080, R15081, R15082, R15083, R15084, R15085, R15086, R15087, R15088, R15089, R15090, R15091, R15092, R15093, R15094, R15095, R15096, R15097, R15098, R15099, R15100, R15101, R15102, R15103, R15104, R15105, R15106, R15107, R15108, R15109, R15110, R15111, R15112, R15113, R15114, R15115, R15116, R15117, R15118, R15119, R15120, R15121, R15122, R15123, R15124, R15125, R15126, R15127, R15128, R15129, R15130, R15131, R15132, R15133, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R38, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 72];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [73, 73];
  s0 -> s1 [74, 65535];
  s1 -> s1 [0, 72];
  s1 -> s2 [73, 73];
  s1 -> s1 [74, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s1 [0, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R25 += 1 };
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R15054 += 1, R15055 += 1 };
  s0 -> s1 [0, 65535] { R15055 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R15055 += 1, R19 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 72] { R15057 += 1 };
  s0 -> s0 [0, 65535] { R15056 += 1, R15057 += 1 };
  s0 -> s2 [73, 73] { R15057 += 1 };
  s0 -> s3 [73, 73] { R15057 += 1 };
  s0 -> s1 [78, 65535] { R15057 += 1 };
  s1 -> s1 [0, 72] { R15057 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R15057 += 1 };
  s1 -> s3 [73, 73] { R15057 += 1 };
  s1 -> s1 [78, 65535] { R15057 += 1 };
  s2 -> s2 [0, 73] { R15057 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [78, 65535] { R15057 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 72] { R15059 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R15058 += 1, R15059 += 1 };
  s0 -> s2 [73, 73] { R15059 += 1, R38 += 1 };
  s0 -> s3 [73, 73] { R15059 += 1, R38 += 1 };
  s0 -> s1 [74, 65535] { R15059 += 1, R38 += 1 };
  s1 -> s1 [0, 72] { R15059 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R15059 += 1, R38 += 1 };
  s1 -> s3 [73, 73] { R15059 += 1, R38 += 1 };
  s1 -> s1 [74, 65535] { R15059 += 1, R38 += 1 };
  s2 -> s2 [0, 65535] { R15059 += 1, R38 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 72] { R15061 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R15060 += 1, R15061 += 1 };
  s0 -> s2 [73, 73] { R15061 += 1, R40 += 1 };
  s0 -> s3 [73, 73] { R15061 += 1, R40 += 1 };
  s0 -> s1 [74, 65535] { R15061 += 1, R40 += 1 };
  s1 -> s1 [0, 72] { R15061 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R15061 += 1, R40 += 1 };
  s1 -> s3 [73, 73] { R15061 += 1, R40 += 1 };
  s1 -> s1 [74, 65535] { R15061 += 1, R40 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R15061 += 1, R40 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 72] { R15063 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R15062 += 1, R15063 += 1 };
  s0 -> s2 [73, 73] { R15063 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [73, 73] { R15063 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [74, 65535] { R15063 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 72] { R15063 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R15063 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [73, 73] { R15063 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [74, 65535] { R15063 += 1, R42 += 1, R43 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R15063 += 1, R42 += 1, R43 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 72] { R15065 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R15064 += 1, R15065 += 1 };
  s0 -> s2 [73, 73] { R15065 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [73, 73] { R15065 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [74, 65535] { R15065 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 72] { R15065 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R15065 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [73, 73] { R15065 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [74, 65535] { R15065 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R15065 += 1, R46 += 1, R47 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 72] { R15067 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R15066 += 1, R15067 += 1 };
  s0 -> s2 [73, 73] { R15067 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [73, 73] { R15067 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [74, 65535] { R15067 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 72] { R15067 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R15067 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [73, 73] { R15067 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [74, 65535] { R15067 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R15067 += 1, R52 += 1, R53 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 72] { R15069 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R15068 += 1, R15069 += 1 };
  s0 -> s2 [73, 73] { R15069 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [73, 73] { R15069 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [74, 65535] { R15069 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 72] { R15069 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R15069 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [73, 73] { R15069 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [74, 65535] { R15069 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R15069 += 1, R56 += 1, R57 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 72] { R15071 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R15070 += 1, R15071 += 1 };
  s0 -> s2 [73, 73] { R15071 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [73, 73] { R15071 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [74, 65535] { R15071 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 72] { R15071 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R15071 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [73, 73] { R15071 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [74, 65535] { R15071 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535] { R15071 += 1, R62 += 1, R63 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 72] { R15091 += 1 };
  s0 -> s0 [0, 65535] { R15090 += 1, R15091 += 1 };
  s0 -> s2 [73, 73] { R15091 += 1 };
  s0 -> s1 [74, 65535] { R15091 += 1 };
  s1 -> s1 [0, 72] { R15091 += 1 };
  s1 -> s2 [73, 73] { R15091 += 1 };
  s1 -> s1 [74, 65535] { R15091 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R15091 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R15092 += 1, R15093 += 1 };
  s0 -> s1 [0, 65535] { R15093 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R15093 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 72] { R15095 += 1 };
  s0 -> s0 [0, 65535] { R15094 += 1, R15095 += 1 };
  s0 -> s2 [0, 65535] { R15095 += 1, R8 += 1 };
  s0 -> s3 [73, 73] { R15095 += 1 };
  s0 -> s1 [74, 65535] { R15095 += 1 };
  s1 -> s1 [0, 72] { R15095 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [73, 73] { R15095 += 1 };
  s1 -> s1 [74, 65535] { R15095 += 1 };
  s2 -> s1 [0, 72] { R15095 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R15095 += 1, R8 += 1 };
  s2 -> s3 [73, 73] { R15095 += 1 };
  s2 -> s1 [74, 65535] { R15095 += 1 };
  s3 -> s3 [0, 65535] { R15095 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 72] { R15097 += 1, R15035 += 1 };
  s0 -> s0 [0, 65535] { R15096 += 1, R15097 += 1 };
  s0 -> s2 [0, 65535] { R15097 += 1, R15034 += 1, R15035 += 1 };
  s0 -> s1 [74, 65535] { R15097 += 1, R15035 += 1 };
  s1 -> s1 [0, 72] { R15097 += 1, R15035 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R15097 += 1 };
  s1 -> s1 [74, 65535] { R15097 += 1, R15035 += 1 };
  s2 -> s1 [0, 72] { R15097 += 1, R15035 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R15097 += 1, R15034 += 1, R15035 += 1 };
  s2 -> s1 [74, 65535] { R15097 += 1, R15035 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R15099 += 1, R15036 += 1, R15037 += 1 };
  s0 -> s0 [0, 65535] { R15098 += 1, R15099 += 1 };
  s0 -> s2 [0, 65535] { R15099 += 1, R15037 += 1, R17 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R15099 += 1, R15036 += 1, R15037 += 1 };
  s1 -> s2 [0, 65535] { R15099 += 1, R15037 += 1, R17 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R15099 += 1 };
  s2 -> s2 [0, 65535] { R15099 += 1, R15037 += 1, R17 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R15099 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 73] { R15101 += 1, R15039 += 1 };
  s0 -> s2 [0, 65535] { R15101 += 1, R15038 += 1, R15039 += 1 };
  s0 -> s0 [0, 65535] { R15100 += 1, R15101 += 1 };
  s0 -> s1 [77, 65535] { R15101 += 1, R15039 += 1 };
  s1 -> s1 [0, 73] { R15101 += 1, R15039 += 1 };
  s1 -> s1 [0, 65535] { R15101 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [77, 65535] { R15101 += 1, R15039 += 1 };
  s2 -> s1 [0, 73] { R15101 += 1, R15039 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R15101 += 1, R15038 += 1, R15039 += 1 };
  s2 -> s1 [77, 65535] { R15101 += 1, R15039 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s0 [0, 65535] { R15102 += 1, R15103 += 1 };
  s0 -> s1 [0, 65535] { R15103 += 1, R15040 += 1, R15041 += 1 };
  s0 -> s2 [0, 65535] { R15103 += 1, R15041 += 1, R67 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R15103 += 1, R15040 += 1, R15041 += 1 };
  s1 -> s2 [0, 65535] { R15103 += 1, R15041 += 1, R67 += 1 };
  s2 -> s3 [0, 65535] { R15103 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R15103 += 1, R15041 += 1, R67 += 1 };
  s3 -> s3 [0, 65535] { R15103 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 76] { R15105 += 1, R15043 += 1 };
  s0 -> s2 [0, 65535] { R15105 += 1, R15042 += 1, R15043 += 1 };
  s0 -> s0 [0, 65535] { R15104 += 1, R15105 += 1 };
  s0 -> s3 [0, 65535] { R15105 += 1, R15043 += 1, R69 += 1 };
  s0 -> s1 [78, 65535] { R15105 += 1, R15043 += 1 };
  s1 -> s1 [0, 76] { R15105 += 1, R15043 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R15105 += 1 };
  s1 -> s1 [78, 65535] { R15105 += 1, R15043 += 1 };
  s2 -> s1 [0, 76] { R15105 += 1, R15043 += 1 };
  s2 -> s2 [0, 65535] { R15105 += 1, R15042 += 1, R15043 += 1 };
  s2 -> s3 [0, 65535] { R15105 += 1, R15043 += 1, R69 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [78, 65535] { R15105 += 1, R15043 += 1 };
  s3 -> s1 [0, 76] { R15105 += 1, R15043 += 1 };
  s3 -> s3 [0, 65535] { R15105 += 1, R15043 += 1, R69 += 1 };
  s3 -> s4 [0, 65535] { R15105 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [78, 65535] { R15105 += 1, R15043 += 1 };
  s4 -> s4 [0, 65535] { R15105 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 76] { R15107 += 1, R15045 += 1, R11525 += 1 };
  s0 -> s2 [0, 65535] { R15107 += 1, R15044 += 1, R15045 += 1 };
  s0 -> s1 [0, 65535] { R15107 += 1, R15045 += 1 };
  s0 -> s0 [0, 65535] { R15106 += 1, R15107 += 1 };
  s0 -> s1 [78, 65535] { R15107 += 1, R15045 += 1, R11525 += 1 };
  s1 -> s1 [0, 76] { R15107 += 1, R15045 += 1, R11525 += 1 };
  s1 -> s1 [0, 65535] { R15107 += 1, R15045 += 1 };
  s1 -> s4 [0, 65535] { R15107 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [78, 65535] { R15107 += 1, R15045 += 1, R11525 += 1 };
  s2 -> s1 [0, 76] { R15107 += 1, R15045 += 1, R11525 += 1 };
  s2 -> s2 [0, 65535] { R15107 += 1, R15044 += 1, R15045 += 1 };
  s2 -> s1 [0, 65535] { R15107 += 1, R15045 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [78, 65535] { R15107 += 1, R15045 += 1, R11525 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R15107 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R15109 += 1, R15047 += 1, R11529 += 1, R11530 += 1 };
  s0 -> s2 [0, 65535] { R15109 += 1, R15046 += 1, R15047 += 1 };
  s0 -> s3 [0, 65535] { R15109 += 1, R15047 += 1, R11530 += 1, R11531 += 1 };
  s0 -> s0 [0, 65535] { R15108 += 1, R15109 += 1 };
  s1 -> s1 [0, 65535] { R15109 += 1, R15047 += 1, R11529 += 1, R11530 += 1 };
  s1 -> s3 [0, 65535] { R15109 += 1, R15047 += 1, R11530 += 1, R11531 += 1 };
  s1 -> s5 [0, 65535] { R15109 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s1 [0, 65535] { R15109 += 1, R15047 += 1, R11529 += 1, R11530 += 1 };
  s2 -> s2 [0, 65535] { R15109 += 1, R15046 += 1, R15047 += 1 };
  s2 -> s3 [0, 65535] { R15109 += 1, R15047 += 1, R11530 += 1, R11531 += 1 };
  s2 -> s6 [0, 65535];
  s3 -> s4 [0, 65535] { R15109 += 1, R15047 += 1 };
  s3 -> s3 [0, 65535] { R15109 += 1, R15047 += 1, R11530 += 1, R11531 += 1 };
  s3 -> s5 [0, 65535] { R15109 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R15109 += 1, R15047 += 1 };
  s4 -> s5 [0, 65535] { R15109 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R15109 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 77] { R15111 += 1, R15049 += 1, R14075 += 1 };
  s0 -> s2 [0, 65535] { R15111 += 1, R15048 += 1, R15049 += 1 };
  s0 -> s0 [0, 65535] { R15110 += 1, R15111 += 1 };
  s0 -> s3 [0, 65535] { R15111 += 1, R15049 += 1, R14074 += 1, R14075 += 1 };
  s0 -> s4 [89, 89] { R15111 += 1, R15049 += 1, R14075 += 1 };
  s0 -> s1 [90, 65535] { R15111 += 1, R15049 += 1, R14075 += 1 };
  s1 -> s1 [0, 77] { R15111 += 1, R15049 += 1, R14075 += 1 };
  s1 -> s4 [89, 89] { R15111 += 1, R15049 += 1, R14075 += 1 };
  s1 -> s1 [90, 65535] { R15111 += 1, R15049 += 1, R14075 += 1 };
  s2 -> s1 [0, 77] { R15111 += 1, R15049 += 1, R14075 += 1 };
  s2 -> s2 [0, 65535] { R15111 += 1, R15048 += 1, R15049 += 1 };
  s2 -> s3 [0, 65535] { R15111 += 1, R15049 += 1, R14074 += 1, R14075 += 1 };
  s2 -> s4 [89, 89] { R15111 += 1, R15049 += 1, R14075 += 1 };
  s2 -> s1 [90, 65535] { R15111 += 1, R15049 += 1, R14075 += 1 };
  s3 -> s1 [0, 77] { R15111 += 1, R15049 += 1, R14075 += 1 };
  s3 -> s3 [0, 65535] { R15111 += 1, R15049 += 1, R14074 += 1, R14075 += 1 };
  s3 -> s4 [89, 89] { R15111 += 1, R15049 += 1, R14075 += 1 };
  s3 -> s1 [90, 65535] { R15111 += 1, R15049 += 1, R14075 += 1 };
  s4 -> s4 [0, 77] { R15111 += 1, R15049 += 1, R14075 += 1 };
  s4 -> s5 [0, 65535] { R15111 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R15111 += 1, R15049 += 1 };
  s4 -> s4 [89, 65535] { R15111 += 1, R15049 += 1, R14075 += 1 };
  s5 -> s5 [0, 65535] { R15111 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s4, s5, s6;
};
automaton value2_28 {
  init s0;
  s0 -> s0 [0, 65535] { R15112 += 1, R15113 += 1 };
  s0 -> s1 [0, 65535] { R15113 += 1, R15050 += 1, R15051 += 1 };
  s0 -> s2 [0, 65535] { R15113 += 1, R15051 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R15113 += 1, R15050 += 1, R15051 += 1 };
  s1 -> s2 [0, 65535] { R15113 += 1, R15051 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R15113 += 1, R15051 += 1 };
  s2 -> s4 [0, 65535] { R15113 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R15113 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 76] { R15115 += 1, R15053 += 1, R15033 += 1 };
  s0 -> s0 [0, 65535] { R15114 += 1, R15115 += 1 };
  s0 -> s2 [0, 65535] { R15115 += 1, R15052 += 1, R15053 += 1 };
  s0 -> s1 [0, 65535] { R15115 += 1, R15053 += 1 };
  s0 -> s3 [77, 77] { R15115 += 1, R15053 += 1, R15033 += 1 };
  s0 -> s4 [77, 77] { R15115 += 1, R15053 += 1, R15033 += 1 };
  s0 -> s1 [90, 65535] { R15115 += 1, R15053 += 1, R15033 += 1 };
  s1 -> s1 [0, 76] { R15115 += 1, R15053 += 1, R15033 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R15115 += 1 };
  s1 -> s1 [0, 65535] { R15115 += 1, R15053 += 1 };
  s1 -> s3 [77, 77] { R15115 += 1, R15053 += 1, R15033 += 1 };
  s1 -> s4 [77, 77] { R15115 += 1, R15053 += 1, R15033 += 1 };
  s1 -> s1 [90, 65535] { R15115 += 1, R15053 += 1, R15033 += 1 };
  s2 -> s1 [0, 76] { R15115 += 1, R15053 += 1, R15033 += 1 };
  s2 -> s2 [0, 65535] { R15115 += 1, R15052 += 1, R15053 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R15115 += 1, R15053 += 1 };
  s2 -> s3 [77, 77] { R15115 += 1, R15053 += 1, R15033 += 1 };
  s2 -> s4 [77, 77] { R15115 += 1, R15053 += 1, R15033 += 1 };
  s2 -> s1 [90, 65535] { R15115 += 1, R15053 += 1, R15033 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R15115 += 1, R15053 += 1 };
  s3 -> s6 [0, 65535] { R15115 += 1 };
  s4 -> s4 [0, 77] { R15115 += 1, R15053 += 1, R15033 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R15115 += 1 };
  s4 -> s4 [0, 65535] { R15115 += 1, R15053 += 1 };
  s4 -> s4 [90, 65535] { R15115 += 1, R15053 += 1, R15033 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R15115 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R15117 += 1, R15073 += 1, R18 += 1 };
  s0 -> s2 [0, 65535] { R15117 += 1, R15072 += 1, R15073 += 1 };
  s0 -> s0 [0, 65535] { R15116 += 1, R15117 += 1 };
  s1 -> s1 [0, 65535] { R15117 += 1, R15073 += 1, R18 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R15117 += 1 };
  s2 -> s1 [0, 65535] { R15117 += 1, R15073 += 1, R18 += 1 };
  s2 -> s2 [0, 65535] { R15117 += 1, R15072 += 1, R15073 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R15117 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 72] { R15119 += 1, R15075 += 1 };
  s0 -> s0 [0, 65535] { R15118 += 1, R15119 += 1 };
  s0 -> s2 [0, 65535] { R15119 += 1, R15074 += 1, R15075 += 1 };
  s0 -> s3 [73, 73] { R15119 += 1, R15075 += 1 };
  s0 -> s4 [73, 73] { R15119 += 1, R15075 += 1 };
  s0 -> s5 [77, 77] { R15119 += 1, R15075 += 1 };
  s0 -> s1 [78, 65535] { R15119 += 1, R15075 += 1 };
  s1 -> s1 [0, 72] { R15119 += 1, R15075 += 1 };
  s1 -> s3 [73, 73] { R15119 += 1, R15075 += 1 };
  s1 -> s4 [73, 73] { R15119 += 1, R15075 += 1 };
  s1 -> s5 [77, 77] { R15119 += 1, R15075 += 1 };
  s1 -> s1 [78, 65535] { R15119 += 1, R15075 += 1 };
  s2 -> s1 [0, 72] { R15119 += 1, R15075 += 1 };
  s2 -> s2 [0, 65535] { R15119 += 1, R15074 += 1, R15075 += 1 };
  s2 -> s3 [73, 73] { R15119 += 1, R15075 += 1 };
  s2 -> s4 [73, 73] { R15119 += 1, R15075 += 1 };
  s2 -> s5 [77, 77] { R15119 += 1, R15075 += 1 };
  s2 -> s1 [78, 65535] { R15119 += 1, R15075 += 1 };
  s3 -> s3 [0, 73] { R15119 += 1, R15075 += 1 };
  s3 -> s8 [77, 77] { R15119 += 1, R15075 += 1 };
  s3 -> s3 [78, 65535] { R15119 += 1, R15075 += 1 };
  s5 -> s5 [0, 72] { R15119 += 1, R15075 += 1 };
  s5 -> s5 [0, 65535] { R15119 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [73, 73] { R15119 += 1, R15075 += 1 };
  s5 -> s8 [73, 73] { R15119 += 1, R15075 += 1 };
  s5 -> s5 [77, 65535] { R15119 += 1, R15075 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R15119 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 73] { R15119 += 1, R15075 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R15119 += 1 };
  s8 -> s8 [77, 65535] { R15119 += 1, R15075 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 72] { R15121 += 1, R15077 += 1, R66 += 1 };
  s0 -> s2 [0, 65535] { R15121 += 1, R15076 += 1, R15077 += 1 };
  s0 -> s0 [0, 65535] { R15120 += 1, R15121 += 1 };
  s0 -> s3 [73, 73] { R15121 += 1, R15077 += 1, R66 += 1 };
  s0 -> s4 [73, 73] { R15121 += 1, R15077 += 1, R66 += 1 };
  s0 -> s1 [74, 65535] { R15121 += 1, R15077 += 1, R66 += 1 };
  s1 -> s1 [0, 72] { R15121 += 1, R15077 += 1, R66 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R15121 += 1 };
  s1 -> s3 [73, 73] { R15121 += 1, R15077 += 1, R66 += 1 };
  s1 -> s4 [73, 73] { R15121 += 1, R15077 += 1, R66 += 1 };
  s1 -> s1 [74, 65535] { R15121 += 1, R15077 += 1, R66 += 1 };
  s2 -> s1 [0, 72] { R15121 += 1, R15077 += 1, R66 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R15121 += 1, R15076 += 1, R15077 += 1 };
  s2 -> s3 [73, 73] { R15121 += 1, R15077 += 1, R66 += 1 };
  s2 -> s4 [73, 73] { R15121 += 1, R15077 += 1, R66 += 1 };
  s2 -> s1 [74, 65535] { R15121 += 1, R15077 += 1, R66 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R15121 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R15121 += 1, R15077 += 1, R66 += 1 };
  s4 -> s6 [0, 65535] { R15121 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R15121 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 72] { R15123 += 1, R15079 += 1, R68 += 1 };
  s0 -> s0 [0, 65535] { R15122 += 1, R15123 += 1 };
  s0 -> s2 [0, 65535] { R15123 += 1, R15078 += 1, R15079 += 1 };
  s0 -> s3 [73, 73] { R15123 += 1, R15079 += 1, R68 += 1 };
  s0 -> s4 [73, 73] { R15123 += 1, R15079 += 1, R68 += 1 };
  s0 -> s1 [74, 65535] { R15123 += 1, R15079 += 1, R68 += 1 };
  s1 -> s1 [0, 72] { R15123 += 1, R15079 += 1, R68 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R15123 += 1 };
  s1 -> s3 [73, 73] { R15123 += 1, R15079 += 1, R68 += 1 };
  s1 -> s4 [73, 73] { R15123 += 1, R15079 += 1, R68 += 1 };
  s1 -> s1 [74, 65535] { R15123 += 1, R15079 += 1, R68 += 1 };
  s2 -> s1 [0, 72] { R15123 += 1, R15079 += 1, R68 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R15123 += 1, R15078 += 1, R15079 += 1 };
  s2 -> s3 [73, 73] { R15123 += 1, R15079 += 1, R68 += 1 };
  s2 -> s4 [73, 73] { R15123 += 1, R15079 += 1, R68 += 1 };
  s2 -> s1 [74, 65535] { R15123 += 1, R15079 += 1, R68 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R15123 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R15123 += 1, R15079 += 1, R68 += 1 };
  s4 -> s6 [0, 65535] { R15123 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R15123 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 72] { R15125 += 1, R15081 += 1, R11523 += 1 };
  s0 -> s2 [0, 72] { R15125 += 1, R15081 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s3 [0, 65535] { R15125 += 1, R15080 += 1, R15081 += 1 };
  s0 -> s0 [0, 65535] { R15124 += 1, R15125 += 1 };
  s0 -> s4 [73, 73] { R15125 += 1, R15081 += 1, R11523 += 1 };
  s0 -> s5 [73, 73] { R15125 += 1, R15081 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s6 [73, 73] { R15125 += 1, R15081 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s7 [73, 73] { R15125 += 1, R15081 += 1, R11523 += 1 };
  s0 -> s1 [74, 76] { R15125 += 1, R15081 += 1, R11523 += 1 };
  s0 -> s2 [74, 65535] { R15125 += 1, R15081 += 1, R11522 += 1, R11523 += 1 };
  s0 -> s1 [78, 65535] { R15125 += 1, R15081 += 1, R11523 += 1 };
  s1 -> s1 [0, 72] { R15125 += 1, R15081 += 1, R11523 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s1 [0, 65535] { R15125 += 1 };
  s1 -> s4 [73, 73] { R15125 += 1, R15081 += 1 };
  s1 -> s7 [73, 73] { R15125 += 1, R15081 += 1 };
  s1 -> s1 [74, 76] { R15125 += 1, R15081 += 1, R11523 += 1 };
  s1 -> s1 [74, 65535] { R15125 += 1, R15081 += 1 };
  s1 -> s1 [78, 65535] { R15125 += 1, R15081 += 1, R11523 += 1 };
  s2 -> s1 [0, 72] { R15125 += 1, R15081 += 1, R11523 += 1 };
  s2 -> s2 [0, 72] { R15125 += 1, R15081 += 1, R11522 += 1, R11523 += 1 };
  s2 -> s4 [73, 73] { R15125 += 1, R15081 += 1, R11523 += 1 };
  s2 -> s5 [73, 73] { R15125 += 1, R15081 += 1, R11522 += 1, R11523 += 1 };
  s2 -> s6 [73, 73] { R15125 += 1, R15081 += 1, R11522 += 1, R11523 += 1 };
  s2 -> s7 [73, 73] { R15125 += 1, R15081 += 1, R11523 += 1 };
  s2 -> s1 [74, 76] { R15125 += 1, R15081 += 1, R11523 += 1 };
  s2 -> s2 [74, 65535] { R15125 += 1, R15081 += 1, R11522 += 1, R11523 += 1 };
  s2 -> s1 [78, 65535] { R15125 += 1, R15081 += 1, R11523 += 1 };
  s3 -> s1 [0, 72] { R15125 += 1, R15081 += 1, R11523 += 1 };
  s3 -> s2 [0, 72] { R15125 += 1, R15081 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s3 [0, 65535] { R15125 += 1, R15080 += 1, R15081 += 1 };
  s3 -> s4 [73, 73] { R15125 += 1, R15081 += 1, R11523 += 1 };
  s3 -> s5 [73, 73] { R15125 += 1, R15081 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s6 [73, 73] { R15125 += 1, R15081 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s7 [73, 73] { R15125 += 1, R15081 += 1, R11523 += 1 };
  s3 -> s1 [74, 76] { R15125 += 1, R15081 += 1, R11523 += 1 };
  s3 -> s2 [74, 65535] { R15125 += 1, R15081 += 1, R11522 += 1, R11523 += 1 };
  s3 -> s1 [78, 65535] { R15125 += 1, R15081 += 1, R11523 += 1 };
  s4 -> s4 [0, 76] { R15125 += 1, R15081 += 1, R11523 += 1 };
  s4 -> s4 [0, 65535] { R15125 += 1, R15081 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s9 [0, 65535] { R15125 += 1 };
  s4 -> s4 [78, 65535] { R15125 += 1, R15081 += 1, R11523 += 1 };
  s6 -> s4 [0, 76] { R15125 += 1, R15081 += 1, R11523 += 1 };
  s6 -> s6 [0, 65535] { R15125 += 1, R15081 += 1, R11522 += 1, R11523 += 1 };
  s6 -> s4 [78, 65535] { R15125 += 1, R15081 += 1, R11523 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R15125 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R15125 += 1 };
  accepting s4, s8, s9, s1, s7;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 72] { R15127 += 1, R15083 += 1, R11526 += 1, R11527 += 1 };
  s0 -> s0 [0, 65535] { R15126 += 1, R15127 += 1 };
  s0 -> s2 [0, 65535] { R15127 += 1, R15082 += 1, R15083 += 1 };
  s0 -> s3 [73, 73] { R15127 += 1, R15083 += 1, R11526 += 1, R11527 += 1 };
  s0 -> s4 [73, 73] { R15127 += 1, R15083 += 1, R11526 += 1, R11527 += 1 };
  s0 -> s1 [74, 65535] { R15127 += 1, R15083 += 1, R11526 += 1, R11527 += 1 };
  s1 -> s1 [0, 72] { R15127 += 1, R15083 += 1, R11526 += 1, R11527 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R15127 += 1 };
  s1 -> s3 [73, 73] { R15127 += 1, R15083 += 1, R11526 += 1, R11527 += 1 };
  s1 -> s4 [73, 73] { R15127 += 1, R15083 += 1, R11526 += 1, R11527 += 1 };
  s1 -> s1 [74, 65535] { R15127 += 1, R15083 += 1, R11526 += 1, R11527 += 1 };
  s2 -> s1 [0, 72] { R15127 += 1, R15083 += 1, R11526 += 1, R11527 += 1 };
  s2 -> s2 [0, 65535] { R15127 += 1, R15082 += 1, R15083 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [73, 73] { R15127 += 1, R15083 += 1, R11526 += 1, R11527 += 1 };
  s2 -> s4 [73, 73] { R15127 += 1, R15083 += 1, R11526 += 1, R11527 += 1 };
  s2 -> s1 [74, 65535] { R15127 += 1, R15083 += 1, R11526 += 1, R11527 += 1 };
  s3 -> s3 [0, 65535] { R15127 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R15127 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R15127 += 1, R15083 += 1, R11526 += 1, R11527 += 1 };
  s5 -> s5 [0, 65535] { R15127 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 72] { R15129 += 1, R15085 += 1, R14072 += 1, R14073 += 1 };
  s0 -> s2 [0, 65535] { R15129 += 1, R15084 += 1, R15085 += 1 };
  s0 -> s0 [0, 65535] { R15128 += 1, R15129 += 1 };
  s0 -> s3 [73, 73] { R15129 += 1, R15085 += 1, R14072 += 1, R14073 += 1 };
  s0 -> s4 [73, 73] { R15129 += 1, R15085 += 1, R14072 += 1, R14073 += 1 };
  s0 -> s1 [74, 65535] { R15129 += 1, R15085 += 1, R14072 += 1, R14073 += 1 };
  s1 -> s1 [0, 72] { R15129 += 1, R15085 += 1, R14072 += 1, R14073 += 1 };
  s1 -> s1 [0, 65535] { R15129 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R15129 += 1, R15085 += 1, R14072 += 1, R14073 += 1 };
  s1 -> s4 [73, 73] { R15129 += 1, R15085 += 1, R14072 += 1, R14073 += 1 };
  s1 -> s1 [74, 65535] { R15129 += 1, R15085 += 1, R14072 += 1, R14073 += 1 };
  s2 -> s1 [0, 72] { R15129 += 1, R15085 += 1, R14072 += 1, R14073 += 1 };
  s2 -> s2 [0, 65535] { R15129 += 1, R15084 += 1, R15085 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R15129 += 1, R15085 += 1, R14072 += 1, R14073 += 1 };
  s2 -> s4 [73, 73] { R15129 += 1, R15085 += 1, R14072 += 1, R14073 += 1 };
  s2 -> s1 [74, 65535] { R15129 += 1, R15085 += 1, R14072 += 1, R14073 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R15129 += 1, R15085 += 1, R14072 += 1, R14073 += 1 };
  s3 -> s6 [0, 65535] { R15129 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R15129 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R15129 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 72] { R15131 += 1, R15087 += 1, R14921 += 1, R14922 += 1 };
  s0 -> s2 [0, 72] { R15131 += 1, R15087 += 1, R14920 += 1, R14921 += 1 };
  s0 -> s0 [0, 65535] { R15130 += 1, R15131 += 1 };
  s0 -> s3 [0, 65535] { R15131 += 1, R15086 += 1, R15087 += 1 };
  s0 -> s4 [73, 73] { R15131 += 1, R15087 += 1, R14921 += 1, R14922 += 1 };
  s0 -> s5 [73, 73] { R15131 += 1, R15087 += 1, R14920 += 1, R14921 += 1 };
  s0 -> s6 [73, 73] { R15131 += 1, R15087 += 1, R14920 += 1, R14921 += 1 };
  s0 -> s7 [73, 73] { R15131 += 1, R15087 += 1, R14921 += 1, R14922 += 1 };
  s0 -> s1 [74, 65535] { R15131 += 1, R15087 += 1, R14921 += 1, R14922 += 1 };
  s0 -> s2 [74, 65535] { R15131 += 1, R15087 += 1, R14920 += 1, R14921 += 1 };
  s1 -> s1 [0, 72] { R15131 += 1, R15087 += 1, R14921 += 1, R14922 += 1 };
  s1 -> s11 [0, 72] { R15131 += 1, R15087 += 1 };
  s1 -> s4 [73, 73] { R15131 += 1, R15087 += 1, R14921 += 1, R14922 += 1 };
  s1 -> s12 [73, 73] { R15131 += 1, R15087 += 1 };
  s1 -> s7 [73, 73] { R15131 += 1, R15087 += 1, R14921 += 1, R14922 += 1 };
  s1 -> s8 [73, 73] { R15131 += 1, R15087 += 1 };
  s1 -> s1 [74, 65535] { R15131 += 1, R15087 += 1, R14921 += 1, R14922 += 1 };
  s1 -> s11 [74, 65535] { R15131 += 1, R15087 += 1 };
  s2 -> s1 [0, 72] { R15131 += 1, R15087 += 1, R14921 += 1, R14922 += 1 };
  s2 -> s2 [0, 72] { R15131 += 1, R15087 += 1, R14920 += 1, R14921 += 1 };
  s2 -> s4 [73, 73] { R15131 += 1, R15087 += 1, R14921 += 1, R14922 += 1 };
  s2 -> s5 [73, 73] { R15131 += 1, R15087 += 1, R14920 += 1, R14921 += 1 };
  s2 -> s6 [73, 73] { R15131 += 1, R15087 += 1, R14920 += 1, R14921 += 1 };
  s2 -> s7 [73, 73] { R15131 += 1, R15087 += 1, R14921 += 1, R14922 += 1 };
  s2 -> s1 [74, 65535] { R15131 += 1, R15087 += 1, R14921 += 1, R14922 += 1 };
  s2 -> s2 [74, 65535] { R15131 += 1, R15087 += 1, R14920 += 1, R14921 += 1 };
  s3 -> s1 [0, 72] { R15131 += 1, R15087 += 1, R14921 += 1, R14922 += 1 };
  s3 -> s2 [0, 72] { R15131 += 1, R15087 += 1, R14920 += 1, R14921 += 1 };
  s3 -> s3 [0, 65535] { R15131 += 1, R15086 += 1, R15087 += 1 };
  s3 -> s4 [73, 73] { R15131 += 1, R15087 += 1, R14921 += 1, R14922 += 1 };
  s3 -> s5 [73, 73] { R15131 += 1, R15087 += 1, R14920 += 1, R14921 += 1 };
  s3 -> s6 [73, 73] { R15131 += 1, R15087 += 1, R14920 += 1, R14921 += 1 };
  s3 -> s7 [73, 73] { R15131 += 1, R15087 += 1, R14921 += 1, R14922 += 1 };
  s3 -> s1 [74, 65535] { R15131 += 1, R15087 += 1, R14921 += 1, R14922 += 1 };
  s3 -> s2 [74, 65535] { R15131 += 1, R15087 += 1, R14920 += 1, R14921 += 1 };
  s5 -> s5 [0, 65535] { R15131 += 1, R15087 += 1, R14920 += 1, R14921 += 1 };
  s5 -> s7 [0, 65535] { R15131 += 1, R15087 += 1, R14921 += 1, R14922 += 1 };
  s7 -> s7 [0, 65535] { R15131 += 1, R15087 += 1, R14921 += 1, R14922 += 1 };
  s7 -> s8 [0, 65535] { R15131 += 1, R15087 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R15131 += 1, R15087 += 1 };
  s8 -> s10 [0, 65535] { R15131 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R15131 += 1 };
  s11 -> s11 [0, 72] { R15131 += 1, R15087 += 1 };
  s11 -> s11 [0, 65535] { R15131 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s12 [73, 73] { R15131 += 1, R15087 += 1 };
  s11 -> s8 [73, 73] { R15131 += 1, R15087 += 1 };
  s11 -> s11 [74, 65535] { R15131 += 1, R15087 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R15131 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 72] { R15133 += 1, R15089 += 1, R15030 += 1, R15031 += 1 };
  s0 -> s2 [0, 72] { R15133 += 1, R15089 += 1, R15031 += 1 };
  s0 -> s0 [0, 65535] { R15132 += 1, R15133 += 1 };
  s0 -> s3 [0, 65535] { R15133 += 1, R15088 += 1, R15089 += 1 };
  s0 -> s4 [73, 73] { R15133 += 1, R15089 += 1, R15030 += 1, R15031 += 1 };
  s0 -> s5 [73, 73] { R15133 += 1, R15089 += 1, R15030 += 1, R15031 += 1 };
  s0 -> s6 [73, 73] { R15133 += 1, R15089 += 1, R15031 += 1 };
  s0 -> s7 [73, 73] { R15133 += 1, R15089 += 1, R15031 += 1 };
  s0 -> s2 [74, 76] { R15133 += 1, R15089 += 1, R15031 += 1 };
  s0 -> s1 [74, 65535] { R15133 += 1, R15089 += 1, R15030 += 1, R15031 += 1 };
  s0 -> s2 [90, 65535] { R15133 += 1, R15089 += 1, R15031 += 1 };
  s1 -> s1 [0, 72] { R15133 += 1, R15089 += 1, R15030 += 1, R15031 += 1 };
  s1 -> s2 [0, 72] { R15133 += 1, R15089 += 1, R15031 += 1 };
  s1 -> s4 [73, 73] { R15133 += 1, R15089 += 1, R15030 += 1, R15031 += 1 };
  s1 -> s5 [73, 73] { R15133 += 1, R15089 += 1, R15030 += 1, R15031 += 1 };
  s1 -> s6 [73, 73] { R15133 += 1, R15089 += 1, R15031 += 1 };
  s1 -> s7 [73, 73] { R15133 += 1, R15089 += 1, R15031 += 1 };
  s1 -> s2 [74, 76] { R15133 += 1, R15089 += 1, R15031 += 1 };
  s1 -> s1 [74, 65535] { R15133 += 1, R15089 += 1, R15030 += 1, R15031 += 1 };
  s1 -> s2 [90, 65535] { R15133 += 1, R15089 += 1, R15031 += 1 };
  s2 -> s2 [0, 72] { R15133 += 1, R15089 += 1, R15031 += 1 };
  s2 -> s2 [0, 65535] { R15133 += 1 };
  s2 -> s9 [0, 65535];
  s2 -> s6 [73, 73] { R15133 += 1, R15089 += 1 };
  s2 -> s7 [73, 73] { R15133 += 1, R15089 += 1 };
  s2 -> s2 [74, 76] { R15133 += 1, R15089 += 1, R15031 += 1 };
  s2 -> s2 [74, 65535] { R15133 += 1, R15089 += 1 };
  s2 -> s2 [90, 65535] { R15133 += 1, R15089 += 1, R15031 += 1 };
  s3 -> s1 [0, 72] { R15133 += 1, R15089 += 1, R15030 += 1, R15031 += 1 };
  s3 -> s2 [0, 72] { R15133 += 1, R15089 += 1, R15031 += 1 };
  s3 -> s3 [0, 65535] { R15133 += 1, R15088 += 1, R15089 += 1 };
  s3 -> s4 [73, 73] { R15133 += 1, R15089 += 1, R15030 += 1, R15031 += 1 };
  s3 -> s5 [73, 73] { R15133 += 1, R15089 += 1, R15030 += 1, R15031 += 1 };
  s3 -> s6 [73, 73] { R15133 += 1, R15089 += 1, R15031 += 1 };
  s3 -> s7 [73, 73] { R15133 += 1, R15089 += 1, R15031 += 1 };
  s3 -> s2 [74, 76] { R15133 += 1, R15089 += 1, R15031 += 1 };
  s3 -> s1 [74, 65535] { R15133 += 1, R15089 += 1, R15030 += 1, R15031 += 1 };
  s3 -> s2 [90, 65535] { R15133 += 1, R15089 += 1, R15031 += 1 };
  s5 -> s7 [0, 76] { R15133 += 1, R15089 += 1, R15031 += 1 };
  s5 -> s5 [0, 65535] { R15133 += 1, R15089 += 1, R15030 += 1, R15031 += 1 };
  s5 -> s7 [90, 65535] { R15133 += 1, R15089 += 1, R15031 += 1 };
  s6 -> s6 [0, 65535] { R15133 += 1 };
  s6 -> s9 [0, 65535];
  s7 -> s7 [0, 76] { R15133 += 1, R15089 += 1, R15031 += 1 };
  s7 -> s8 [0, 65535] { R15133 += 1 };
  s7 -> s9 [0, 65535];
  s7 -> s7 [0, 65535] { R15133 += 1, R15089 += 1 };
  s7 -> s7 [90, 65535] { R15133 += 1, R15089 += 1, R15031 += 1 };
  s8 -> s8 [0, 65535] { R15133 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s8, s2, s9, s6, s7;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
synchronised {  // Automata constraining P54
automaton P54_0 {
  init s0;
  s0 -> s1 [109, 109];
  accepting s1;
};
};
constraint R1 = R15049 && R2 = R15133 && R20 - R15133 = -1 && R21 = R15133 && R22 - R15133 = -1 && R23 = R15133 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R14075 + -1*R14073 - R53 = 0 && R52 + R14074 + R14072 = 0 && R15048 = 0 && R15074 = 0 && R15075 = 0 && R15080 = 0 && R15081 = 0 && R15086 = 0 && R15087 = 0 && R15088 = 0 && R15089 = 0 && R15090 = 0 && R15091 = R15133 && R15092 = 0 && R15093 = R15133 && R15094 = 0 && R15095 = R15133 && R15096 = 0 && R15097 = R15133 && R15098 = 0 && R15099 = R15133 && R15100 = 0 && R15101 = R15133 && R15102 = 0 && R15103 = R15133 && R15104 = 0 && R15105 = R15133 && R15106 = 0 && R15107 = R15133 && R15108 = 0 && R15109 = R15133 && R15110 = 0 && R15111 = R15133 && R15112 = 0 && R15113 = R15133 && R15114 = 0 && R15115 = R15133 && R15116 = 0 && R15117 = R15133 && R15118 = 0 && R15119 = R15133 && R15120 = 0 && R15121 = R15133 && R15122 = 0 && R15123 = R15133 && R15124 = 0 && R15125 = R15133 && R15126 = 0 && R15127 = R15133 && R15128 = 0 && R15129 = R15133 && R15130 = 0 && R15131 = R15133 && R15132 = 0 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R14075 + -1*R14073 - R53 < 1 && -1 < R15049 && 0 < R15133 && (R48 + R11531 + R11528 != 0 || ((R42 + R11524 + R11522 != 0 || R43 + R11525 + R11523 + -1*R14075 + -1*R14073 - R53 = 0 || R53 + R14075 + R14073 < 1) && (R42 + R11524 + R11522 = 0 || R53 + R14075 + R14073 < 1))) && (R48 + R11531 + R11528 != 0 || ((R46 + R11529 + R11526 != 0 || R47 + R11530 + R11527 + -1*R14075 + -1*R14073 - R53 = 0 || R53 + R14075 + R14073 < 1) && (R46 + R11529 + R11526 = 0 || R53 + R14075 + R14073 < 1))) && (R15034 != 0 || R15035 = R15049 || (R17 = 0 && R15049 = 0)) && (R15036 != 0 || R15037 = R15049 || (R17 = 0 && R15049 = 0)) && (R15038 != 0 || R15039 = R15049 || (R17 = 0 && R15049 = 0)) && (R15040 != 0 || R15041 = R15049 || (R17 = 0 && R15049 = 0)) && (R15042 != 0 || R15043 = R15049 || (R17 = 0 && R15049 = 0)) && (R15044 != 0 || R15045 = R15049 || (R17 = 0 && R15049 = 0)) && (R15046 != 0 || R15047 = R15049 || (R17 = 0 && R15049 = 0)) && (R15050 != 0 || R15049 = R15051 || (R17 = 0 && R15049 = 0)) && (R15052 != 0 || R15049 = R15053 || (R17 = 0 && R15049 = 0)) && (R18 = 0 || (R15072 = 0 && R15073 = 0)) && (R18 = 0 || (R15076 = 0 && R15077 = 0)) && (R18 = 0 || (R15078 = 0 && R15079 = 0)) && (R18 = 0 || (R15082 = 0 && R15083 = 0)) && (R18 = 0 || (R15084 = 0 && R15085 = 0)) && (R19 = 0 || (R15054 = 0 && R15055 = 0)) && (R19 = 0 || (R15056 = 0 && R15057 = 0)) && (R19 = 0 || (R15058 = 0 && R15059 = 0)) && (R19 = 0 || (R15060 = 0 && R15061 = 0)) && (R19 = 0 || (R15062 = 0 && R15063 = 0)) && (R19 = 0 || (R15064 = 0 && R15065 = 0)) && (R19 = 0 || (R15066 = 0 && R15067 = 0)) && (R19 = 0 || (R15068 = 0 && R15069 = 0)) && (R19 = 0 || (R15070 = 0 && R15071 = 0)) && (R48 + R11531 + R11528 = 0 || (R42 + R11524 + R11522 = 0 && R43 + R11525 + R11523 + -1*R14075 + -1*R14073 - R53 = 0)) && (R48 + R11531 + R11528 = 0 || (R46 + R11529 + R11526 = 0 && R47 + R11530 + R11527 + -1*R14075 + -1*R14073 - R53 = 0)) && (R58 + R14925 + R14922 = 0 || (R56 + R14923 + R14920 = 0 && R57 + R14924 + R14921 = 0)) && (R58 + R14925 + R14922 = 0 || (R62 + R15032 + R15030 = 0 && R63 + R15033 + R15031 = 0)) && (R15034 = 0 || (R17 = 0 && R15049 = 0)) && (R15036 = 0 || (R17 = 0 && R15049 = 0)) && (R15038 = 0 || (R17 = 0 && R15049 = 0)) && (R15040 = 0 || (R17 = 0 && R15049 = 0)) && (R15042 = 0 || (R17 = 0 && R15049 = 0)) && (R15044 = 0 || (R17 = 0 && R15049 = 0)) && (R15046 = 0 || (R17 = 0 && R15049 = 0)) && (R15050 = 0 || (R17 = 0 && R15049 = 0)) && (R15052 = 0 || (R17 = 0 && R15049 = 0));
// End of Parikh automata intersection problem
