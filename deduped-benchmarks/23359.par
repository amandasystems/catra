// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R12, R1350, R1351, R1352, R1353, R17, R1776, R1777, R1778, R1779, R1780, R1781, R18, R19, R1990, R1991, R1992, R1993, R1994, R1995, R1996, R1997, R1998, R1999, R2, R20, R2000, R2001, R2002, R2003, R2004, R2005, R2006, R2007, R2008, R2009, R2010, R2011, R2012, R2013, R2014, R2015, R2016, R2017, R2018, R2019, R2020, R2021, R2022, R2023, R2024, R2025, R2026, R2027, R2028, R2029, R2030, R2031, R2032, R2033, R2034, R2035, R2036, R2037, R2038, R2039, R2040, R2041, R2042, R2043, R2044, R2045, R2046, R2047, R2048, R2049, R2050, R2051, R2052, R2053, R2054, R2055, R2056, R2057, R2058, R2059, R2060, R2061, R2062, R2063, R2064, R2065, R2066, R2067, R2068, R2069, R2070, R2071, R2072, R2073, R2074, R2075, R2076, R2077, R2078, R2079, R2080, R2081, R2082, R2083, R2084, R2085, R2086, R2087, R2088, R2089, R2090, R2091, R2092, R2093, R21, R22, R23, R24, R25, R26, R27, R3, R38, R4, R40, R42, R43, R46, R47, R48, R52, R53, R56, R57, R58, R62, R63, R66, R67, R68, R69, R70, R71, R72, R73, R74, R75, R76, R77, R78, R79, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [73, 73];
  s0 -> s0 [74, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [73, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 72];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [73, 73];
  s0 -> s1 [74, 65535];
  s1 -> s1 [0, 72];
  s1 -> s2 [73, 73];
  s1 -> s1 [74, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s1 [0, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R23 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [9, 13] { R25 += 1 };
  s0 -> s1 [14, 31] { R25 += 1 };
  s0 -> s2 [32, 32] { R25 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R25 += 1 };
  s2 -> s1 [0, 65535] { R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s0 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R27 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R2015 += 1, R19 += 1 };
  s0 -> s0 [0, 65535] { R2014 += 1, R2015 += 1 };
  s1 -> s1 [0, 65535] { R2015 += 1, R19 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 72] { R2017 += 1 };
  s0 -> s0 [0, 65535] { R2016 += 1, R2017 += 1 };
  s0 -> s2 [73, 73] { R2017 += 1 };
  s0 -> s3 [73, 73] { R2017 += 1 };
  s0 -> s1 [78, 65535] { R2017 += 1 };
  s1 -> s1 [0, 72] { R2017 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R2017 += 1 };
  s1 -> s3 [73, 73] { R2017 += 1 };
  s1 -> s1 [78, 65535] { R2017 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 73] { R2017 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [78, 65535] { R2017 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 72] { R2019 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R2018 += 1, R2019 += 1 };
  s0 -> s2 [73, 73] { R2019 += 1, R38 += 1 };
  s0 -> s3 [73, 73] { R2019 += 1, R38 += 1 };
  s0 -> s1 [74, 65535] { R2019 += 1, R38 += 1 };
  s1 -> s1 [0, 72] { R2019 += 1, R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R2019 += 1, R38 += 1 };
  s1 -> s3 [73, 73] { R2019 += 1, R38 += 1 };
  s1 -> s1 [74, 65535] { R2019 += 1, R38 += 1 };
  s2 -> s2 [0, 65535] { R2019 += 1, R38 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 72] { R2021 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R2020 += 1, R2021 += 1 };
  s0 -> s2 [73, 73] { R2021 += 1, R40 += 1 };
  s0 -> s3 [73, 73] { R2021 += 1, R40 += 1 };
  s0 -> s1 [74, 65535] { R2021 += 1, R40 += 1 };
  s1 -> s1 [0, 72] { R2021 += 1, R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R2021 += 1, R40 += 1 };
  s1 -> s3 [73, 73] { R2021 += 1, R40 += 1 };
  s1 -> s1 [74, 65535] { R2021 += 1, R40 += 1 };
  s2 -> s2 [0, 65535] { R2021 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 72] { R2023 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R2022 += 1, R2023 += 1 };
  s0 -> s2 [73, 73] { R2023 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [73, 73] { R2023 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [74, 65535] { R2023 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 72] { R2023 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R2023 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [73, 73] { R2023 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [74, 65535] { R2023 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2023 += 1, R42 += 1, R43 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 72] { R2025 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R2024 += 1, R2025 += 1 };
  s0 -> s2 [73, 73] { R2025 += 1, R46 += 1, R47 += 1 };
  s0 -> s3 [73, 73] { R2025 += 1, R46 += 1, R47 += 1 };
  s0 -> s1 [74, 65535] { R2025 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 72] { R2025 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R2025 += 1, R46 += 1, R47 += 1 };
  s1 -> s3 [73, 73] { R2025 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [74, 65535] { R2025 += 1, R46 += 1, R47 += 1 };
  s2 -> s2 [0, 65535] { R2025 += 1, R46 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 72] { R2027 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R2026 += 1, R2027 += 1 };
  s0 -> s2 [73, 73] { R2027 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [73, 73] { R2027 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [74, 65535] { R2027 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 72] { R2027 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R2027 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [73, 73] { R2027 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [74, 65535] { R2027 += 1, R52 += 1, R53 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2027 += 1, R52 += 1, R53 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 72] { R2029 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R2028 += 1, R2029 += 1 };
  s0 -> s2 [73, 73] { R2029 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [73, 73] { R2029 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [74, 65535] { R2029 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 72] { R2029 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R2029 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [73, 73] { R2029 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [74, 65535] { R2029 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R2029 += 1, R56 += 1, R57 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 72] { R2031 += 1, R62 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R2030 += 1, R2031 += 1 };
  s0 -> s2 [73, 73] { R2031 += 1, R62 += 1, R63 += 1 };
  s0 -> s3 [73, 73] { R2031 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [74, 65535] { R2031 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 72] { R2031 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [73, 73] { R2031 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [73, 73] { R2031 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [74, 65535] { R2031 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535] { R2031 += 1, R62 += 1, R63 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 72] { R2051 += 1 };
  s0 -> s0 [0, 65535] { R2050 += 1, R2051 += 1 };
  s0 -> s2 [73, 73] { R2051 += 1 };
  s0 -> s1 [74, 65535] { R2051 += 1 };
  s1 -> s1 [0, 72] { R2051 += 1 };
  s1 -> s2 [73, 73] { R2051 += 1 };
  s1 -> s1 [74, 65535] { R2051 += 1 };
  s2 -> s2 [0, 65535] { R2051 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R2053 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R2052 += 1, R2053 += 1 };
  s1 -> s1 [0, 65535] { R2053 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 72] { R2055 += 1 };
  s0 -> s0 [0, 65535] { R2054 += 1, R2055 += 1 };
  s0 -> s2 [0, 65535] { R2055 += 1, R8 += 1 };
  s0 -> s3 [73, 73] { R2055 += 1 };
  s0 -> s1 [74, 65535] { R2055 += 1 };
  s1 -> s1 [0, 72] { R2055 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [73, 73] { R2055 += 1 };
  s1 -> s1 [74, 65535] { R2055 += 1 };
  s2 -> s1 [0, 72] { R2055 += 1 };
  s2 -> s2 [0, 65535] { R2055 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [73, 73] { R2055 += 1 };
  s2 -> s1 [74, 65535] { R2055 += 1 };
  s3 -> s3 [0, 65535] { R2055 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 72] { R2057 += 1, R1995 += 1 };
  s0 -> s0 [0, 65535] { R2056 += 1, R2057 += 1 };
  s0 -> s2 [0, 65535] { R2057 += 1, R1994 += 1, R1995 += 1 };
  s0 -> s1 [74, 65535] { R2057 += 1, R1995 += 1 };
  s1 -> s1 [0, 72] { R2057 += 1, R1995 += 1 };
  s1 -> s1 [0, 65535] { R2057 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [74, 65535] { R2057 += 1, R1995 += 1 };
  s2 -> s1 [0, 72] { R2057 += 1, R1995 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R2057 += 1, R1994 += 1, R1995 += 1 };
  s2 -> s1 [74, 65535] { R2057 += 1, R1995 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65535] { R2059 += 1, R1996 += 1, R1997 += 1 };
  s0 -> s2 [0, 65535] { R2059 += 1, R1997 += 1, R17 += 1 };
  s0 -> s0 [0, 65535] { R2058 += 1, R2059 += 1 };
  s1 -> s1 [0, 65535] { R2059 += 1, R1996 += 1, R1997 += 1 };
  s1 -> s2 [0, 65535] { R2059 += 1, R1997 += 1, R17 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R2059 += 1 };
  s2 -> s2 [0, 65535] { R2059 += 1, R1997 += 1, R17 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2059 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 73] { R2061 += 1, R1999 += 1 };
  s0 -> s2 [0, 65535] { R2061 += 1, R1998 += 1, R1999 += 1 };
  s0 -> s0 [0, 65535] { R2060 += 1, R2061 += 1 };
  s0 -> s1 [77, 65535] { R2061 += 1, R1999 += 1 };
  s1 -> s1 [0, 73] { R2061 += 1, R1999 += 1 };
  s1 -> s1 [0, 65535] { R2061 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [77, 65535] { R2061 += 1, R1999 += 1 };
  s2 -> s1 [0, 73] { R2061 += 1, R1999 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R2061 += 1, R1998 += 1, R1999 += 1 };
  s2 -> s1 [77, 65535] { R2061 += 1, R1999 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65535] { R2063 += 1, R2001 += 1, R67 += 1 };
  s0 -> s2 [0, 65535] { R2063 += 1, R2000 += 1, R2001 += 1 };
  s0 -> s0 [0, 65535] { R2062 += 1, R2063 += 1 };
  s1 -> s1 [0, 65535] { R2063 += 1, R2001 += 1, R67 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R2063 += 1 };
  s2 -> s1 [0, 65535] { R2063 += 1, R2001 += 1, R67 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R2063 += 1, R2000 += 1, R2001 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2063 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 76] { R2065 += 1, R2003 += 1 };
  s0 -> s2 [0, 65535] { R2065 += 1, R2003 += 1, R69 += 1 };
  s0 -> s0 [0, 65535] { R2064 += 1, R2065 += 1 };
  s0 -> s3 [0, 65535] { R2065 += 1, R2002 += 1, R2003 += 1 };
  s0 -> s1 [78, 65535] { R2065 += 1, R2003 += 1 };
  s1 -> s1 [0, 76] { R2065 += 1, R2003 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R2065 += 1 };
  s1 -> s1 [78, 65535] { R2065 += 1, R2003 += 1 };
  s2 -> s1 [0, 76] { R2065 += 1, R2003 += 1 };
  s2 -> s5 [0, 65535] { R2065 += 1 };
  s2 -> s2 [0, 65535] { R2065 += 1, R2003 += 1, R69 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [78, 65535] { R2065 += 1, R2003 += 1 };
  s3 -> s1 [0, 76] { R2065 += 1, R2003 += 1 };
  s3 -> s2 [0, 65535] { R2065 += 1, R2003 += 1, R69 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2065 += 1, R2002 += 1, R2003 += 1 };
  s3 -> s1 [78, 65535] { R2065 += 1, R2003 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2065 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 76] { R2067 += 1, R2005 += 1, R73 += 1 };
  s0 -> s0 [0, 65535] { R2066 += 1, R2067 += 1 };
  s0 -> s2 [0, 65535] { R2067 += 1, R2005 += 1, R72 += 1, R73 += 1 };
  s0 -> s3 [0, 65535] { R2067 += 1, R2004 += 1, R2005 += 1 };
  s0 -> s1 [78, 65535] { R2067 += 1, R2005 += 1, R73 += 1 };
  s1 -> s1 [0, 76] { R2067 += 1, R2005 += 1, R73 += 1 };
  s1 -> s5 [0, 65535] { R2067 += 1 };
  s1 -> s1 [0, 65535] { R2067 += 1, R2005 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [78, 65535] { R2067 += 1, R2005 += 1, R73 += 1 };
  s2 -> s1 [0, 76] { R2067 += 1, R2005 += 1, R73 += 1 };
  s2 -> s5 [0, 65535] { R2067 += 1 };
  s2 -> s2 [0, 65535] { R2067 += 1, R2005 += 1, R72 += 1, R73 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [78, 65535] { R2067 += 1, R2005 += 1, R73 += 1 };
  s3 -> s1 [0, 76] { R2067 += 1, R2005 += 1, R73 += 1 };
  s3 -> s2 [0, 65535] { R2067 += 1, R2005 += 1, R72 += 1, R73 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2067 += 1, R2004 += 1, R2005 += 1 };
  s3 -> s1 [78, 65535] { R2067 += 1, R2005 += 1, R73 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2067 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65535] { R2069 += 1, R2007 += 1, R78 += 1, R79 += 1 };
  s0 -> s2 [0, 65535] { R2069 += 1, R2006 += 1, R2007 += 1 };
  s0 -> s3 [0, 65535] { R2069 += 1, R2007 += 1, R77 += 1, R78 += 1 };
  s0 -> s0 [0, 65535] { R2068 += 1, R2069 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R2069 += 1, R2007 += 1, R78 += 1, R79 += 1 };
  s1 -> s5 [0, 65535] { R2069 += 1 };
  s1 -> s6 [0, 65535] { R2069 += 1, R2007 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R2069 += 1, R2007 += 1, R78 += 1, R79 += 1 };
  s2 -> s2 [0, 65535] { R2069 += 1, R2006 += 1, R2007 += 1 };
  s2 -> s3 [0, 65535] { R2069 += 1, R2007 += 1, R77 += 1, R78 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R2069 += 1, R2007 += 1, R78 += 1, R79 += 1 };
  s3 -> s5 [0, 65535] { R2069 += 1 };
  s3 -> s3 [0, 65535] { R2069 += 1, R2007 += 1, R77 += 1, R78 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2069 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R2069 += 1 };
  s6 -> s6 [0, 65535] { R2069 += 1, R2007 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 77] { R2071 += 1, R2009 += 1, R1353 += 1 };
  s0 -> s0 [0, 65535] { R2070 += 1, R2071 += 1 };
  s0 -> s2 [0, 65535] { R2071 += 1, R2008 += 1, R2009 += 1 };
  s0 -> s3 [89, 89] { R2071 += 1, R2009 += 1, R1353 += 1 };
  s0 -> s1 [90, 65535] { R2071 += 1, R2009 += 1, R1353 += 1 };
  s1 -> s1 [0, 77] { R2071 += 1, R2009 += 1, R1353 += 1 };
  s1 -> s3 [89, 89] { R2071 += 1, R2009 += 1, R1353 += 1 };
  s1 -> s1 [90, 65535] { R2071 += 1, R2009 += 1, R1353 += 1 };
  s2 -> s1 [0, 77] { R2071 += 1, R2009 += 1, R1353 += 1 };
  s2 -> s2 [0, 65535] { R2071 += 1, R2008 += 1, R2009 += 1 };
  s2 -> s3 [89, 89] { R2071 += 1, R2009 += 1, R1353 += 1 };
  s2 -> s1 [90, 65535] { R2071 += 1, R2009 += 1, R1353 += 1 };
  s3 -> s3 [0, 77] { R2071 += 1, R2009 += 1, R1353 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2071 += 1, R2009 += 1 };
  s3 -> s5 [0, 65535] { R2071 += 1 };
  s3 -> s3 [89, 65535] { R2071 += 1, R2009 += 1, R1353 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2071 += 1 };
  accepting s3, s4, s5;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 65535] { R2073 += 1, R2011 += 1 };
  s0 -> s2 [0, 65535] { R2073 += 1, R2010 += 1, R2011 += 1 };
  s0 -> s0 [0, 65535] { R2072 += 1, R2073 += 1 };
  s0 -> s3 [0, 65535] { R2073 += 1, R2011 += 1, R1780 += 1, R1781 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R2073 += 1, R2011 += 1 };
  s1 -> s5 [0, 65535] { R2073 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R2073 += 1, R2011 += 1 };
  s2 -> s2 [0, 65535] { R2073 += 1, R2010 += 1, R2011 += 1 };
  s2 -> s3 [0, 65535] { R2073 += 1, R2011 += 1, R1780 += 1, R1781 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R2073 += 1, R2011 += 1 };
  s3 -> s5 [0, 65535] { R2073 += 1 };
  s3 -> s3 [0, 65535] { R2073 += 1, R2011 += 1, R1780 += 1, R1781 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2073 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 65535] { R2075 += 1, R2013 += 1 };
  s0 -> s2 [0, 65535] { R2075 += 1, R2012 += 1, R2013 += 1 };
  s0 -> s0 [0, 65535] { R2074 += 1, R2075 += 1 };
  s1 -> s1 [0, 65535] { R2075 += 1, R2013 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R2075 += 1 };
  s2 -> s1 [0, 65535] { R2075 += 1, R2013 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R2075 += 1, R2012 += 1, R2013 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2075 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 65535] { R2077 += 1, R2033 += 1, R18 += 1 };
  s0 -> s2 [0, 65535] { R2077 += 1, R2032 += 1, R2033 += 1 };
  s0 -> s0 [0, 65535] { R2076 += 1, R2077 += 1 };
  s1 -> s4 [0, 65535] { R2077 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R2077 += 1, R2033 += 1, R18 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R2077 += 1, R2033 += 1, R18 += 1 };
  s2 -> s2 [0, 65535] { R2077 += 1, R2032 += 1, R2033 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2077 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 72] { R2079 += 1, R2035 += 1 };
  s0 -> s2 [0, 65535] { R2079 += 1, R2034 += 1, R2035 += 1 };
  s0 -> s0 [0, 65535] { R2078 += 1, R2079 += 1 };
  s0 -> s3 [73, 73] { R2079 += 1, R2035 += 1 };
  s0 -> s4 [73, 73] { R2079 += 1, R2035 += 1 };
  s0 -> s5 [77, 77] { R2079 += 1, R2035 += 1 };
  s0 -> s1 [78, 65535] { R2079 += 1, R2035 += 1 };
  s1 -> s1 [0, 72] { R2079 += 1, R2035 += 1 };
  s1 -> s3 [73, 73] { R2079 += 1, R2035 += 1 };
  s1 -> s4 [73, 73] { R2079 += 1, R2035 += 1 };
  s1 -> s5 [77, 77] { R2079 += 1, R2035 += 1 };
  s1 -> s1 [78, 65535] { R2079 += 1, R2035 += 1 };
  s2 -> s1 [0, 72] { R2079 += 1, R2035 += 1 };
  s2 -> s2 [0, 65535] { R2079 += 1, R2034 += 1, R2035 += 1 };
  s2 -> s3 [73, 73] { R2079 += 1, R2035 += 1 };
  s2 -> s4 [73, 73] { R2079 += 1, R2035 += 1 };
  s2 -> s5 [77, 77] { R2079 += 1, R2035 += 1 };
  s2 -> s1 [78, 65535] { R2079 += 1, R2035 += 1 };
  s3 -> s3 [0, 73] { R2079 += 1, R2035 += 1 };
  s3 -> s7 [77, 77] { R2079 += 1, R2035 += 1 };
  s3 -> s3 [78, 65535] { R2079 += 1, R2035 += 1 };
  s5 -> s5 [0, 72] { R2079 += 1, R2035 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R2079 += 1 };
  s5 -> s7 [73, 73] { R2079 += 1, R2035 += 1 };
  s5 -> s8 [73, 73] { R2079 += 1, R2035 += 1 };
  s5 -> s5 [77, 65535] { R2079 += 1, R2035 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 73] { R2079 += 1, R2035 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R2079 += 1 };
  s7 -> s7 [77, 65535] { R2079 += 1, R2035 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R2079 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 72] { R2081 += 1, R2037 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R2080 += 1, R2081 += 1 };
  s0 -> s2 [0, 65535] { R2081 += 1, R2036 += 1, R2037 += 1 };
  s0 -> s3 [73, 73] { R2081 += 1, R2037 += 1, R66 += 1 };
  s0 -> s4 [73, 73] { R2081 += 1, R2037 += 1, R66 += 1 };
  s0 -> s1 [74, 65535] { R2081 += 1, R2037 += 1, R66 += 1 };
  s1 -> s1 [0, 72] { R2081 += 1, R2037 += 1, R66 += 1 };
  s1 -> s1 [0, 65535] { R2081 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [73, 73] { R2081 += 1, R2037 += 1, R66 += 1 };
  s1 -> s4 [73, 73] { R2081 += 1, R2037 += 1, R66 += 1 };
  s1 -> s1 [74, 65535] { R2081 += 1, R2037 += 1, R66 += 1 };
  s2 -> s1 [0, 72] { R2081 += 1, R2037 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R2081 += 1, R2036 += 1, R2037 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [73, 73] { R2081 += 1, R2037 += 1, R66 += 1 };
  s2 -> s4 [73, 73] { R2081 += 1, R2037 += 1, R66 += 1 };
  s2 -> s1 [74, 65535] { R2081 += 1, R2037 += 1, R66 += 1 };
  s3 -> s3 [0, 65535] { R2081 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R2081 += 1, R2037 += 1, R66 += 1 };
  s4 -> s5 [0, 65535] { R2081 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R2081 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 72] { R2083 += 1, R2039 += 1, R68 += 1 };
  s0 -> s2 [0, 65535] { R2083 += 1, R2038 += 1, R2039 += 1 };
  s0 -> s0 [0, 65535] { R2082 += 1, R2083 += 1 };
  s0 -> s3 [73, 73] { R2083 += 1, R2039 += 1, R68 += 1 };
  s0 -> s4 [73, 73] { R2083 += 1, R2039 += 1, R68 += 1 };
  s0 -> s1 [74, 65535] { R2083 += 1, R2039 += 1, R68 += 1 };
  s1 -> s1 [0, 72] { R2083 += 1, R2039 += 1, R68 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R2083 += 1 };
  s1 -> s3 [73, 73] { R2083 += 1, R2039 += 1, R68 += 1 };
  s1 -> s4 [73, 73] { R2083 += 1, R2039 += 1, R68 += 1 };
  s1 -> s1 [74, 65535] { R2083 += 1, R2039 += 1, R68 += 1 };
  s2 -> s1 [0, 72] { R2083 += 1, R2039 += 1, R68 += 1 };
  s2 -> s2 [0, 65535] { R2083 += 1, R2038 += 1, R2039 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R2083 += 1, R2039 += 1, R68 += 1 };
  s2 -> s4 [73, 73] { R2083 += 1, R2039 += 1, R68 += 1 };
  s2 -> s1 [74, 65535] { R2083 += 1, R2039 += 1, R68 += 1 };
  s3 -> s3 [0, 65535] { R2083 += 1, R2039 += 1, R68 += 1 };
  s3 -> s6 [0, 65535] { R2083 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2083 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2083 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 72] { R2085 += 1, R2041 += 1, R70 += 1, R71 += 1 };
  s0 -> s0 [0, 65535] { R2084 += 1, R2085 += 1 };
  s0 -> s2 [0, 65535] { R2085 += 1, R2040 += 1, R2041 += 1 };
  s0 -> s3 [73, 73] { R2085 += 1, R2041 += 1, R70 += 1, R71 += 1 };
  s0 -> s4 [73, 73] { R2085 += 1, R2041 += 1, R70 += 1, R71 += 1 };
  s0 -> s1 [74, 65535] { R2085 += 1, R2041 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [0, 72] { R2085 += 1, R2041 += 1, R70 += 1, R71 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R2085 += 1 };
  s1 -> s3 [73, 73] { R2085 += 1, R2041 += 1, R70 += 1, R71 += 1 };
  s1 -> s4 [73, 73] { R2085 += 1, R2041 += 1, R70 += 1, R71 += 1 };
  s1 -> s1 [74, 65535] { R2085 += 1, R2041 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [0, 72] { R2085 += 1, R2041 += 1, R70 += 1, R71 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2085 += 1, R2040 += 1, R2041 += 1 };
  s2 -> s3 [73, 73] { R2085 += 1, R2041 += 1, R70 += 1, R71 += 1 };
  s2 -> s4 [73, 73] { R2085 += 1, R2041 += 1, R70 += 1, R71 += 1 };
  s2 -> s1 [74, 65535] { R2085 += 1, R2041 += 1, R70 += 1, R71 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R2085 += 1, R2041 += 1, R70 += 1, R71 += 1 };
  s3 -> s6 [0, 65535] { R2085 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2085 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2085 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 72] { R2087 += 1, R2043 += 1, R74 += 1, R75 += 1 };
  s0 -> s0 [0, 65535] { R2086 += 1, R2087 += 1 };
  s0 -> s2 [0, 65535] { R2087 += 1, R2042 += 1, R2043 += 1 };
  s0 -> s3 [73, 73] { R2087 += 1, R2043 += 1, R74 += 1, R75 += 1 };
  s0 -> s4 [73, 73] { R2087 += 1, R2043 += 1, R74 += 1, R75 += 1 };
  s0 -> s1 [74, 65535] { R2087 += 1, R2043 += 1, R74 += 1, R75 += 1 };
  s1 -> s1 [0, 72] { R2087 += 1, R2043 += 1, R74 += 1, R75 += 1 };
  s1 -> s1 [0, 65535] { R2087 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [73, 73] { R2087 += 1, R2043 += 1, R74 += 1, R75 += 1 };
  s1 -> s4 [73, 73] { R2087 += 1, R2043 += 1, R74 += 1, R75 += 1 };
  s1 -> s1 [74, 65535] { R2087 += 1, R2043 += 1, R74 += 1, R75 += 1 };
  s2 -> s1 [0, 72] { R2087 += 1, R2043 += 1, R74 += 1, R75 += 1 };
  s2 -> s2 [0, 65535] { R2087 += 1, R2042 += 1, R2043 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [73, 73] { R2087 += 1, R2043 += 1, R74 += 1, R75 += 1 };
  s2 -> s4 [73, 73] { R2087 += 1, R2043 += 1, R74 += 1, R75 += 1 };
  s2 -> s1 [74, 65535] { R2087 += 1, R2043 += 1, R74 += 1, R75 += 1 };
  s3 -> s3 [0, 65535] { R2087 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R2087 += 1 };
  s4 -> s4 [0, 65535] { R2087 += 1, R2043 += 1, R74 += 1, R75 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R2087 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 72] { R2089 += 1, R2045 += 1, R1351 += 1 };
  s0 -> s2 [0, 72] { R2089 += 1, R2045 += 1, R1350 += 1, R1351 += 1 };
  s0 -> s0 [0, 65535] { R2088 += 1, R2089 += 1 };
  s0 -> s3 [0, 65535] { R2089 += 1, R2044 += 1, R2045 += 1 };
  s0 -> s4 [73, 73] { R2089 += 1, R2045 += 1, R1351 += 1 };
  s0 -> s5 [73, 73] { R2089 += 1, R2045 += 1, R1350 += 1, R1351 += 1 };
  s0 -> s6 [73, 73] { R2089 += 1, R2045 += 1, R1350 += 1, R1351 += 1 };
  s0 -> s7 [73, 73] { R2089 += 1, R2045 += 1, R1351 += 1 };
  s0 -> s1 [74, 77] { R2089 += 1, R2045 += 1, R1351 += 1 };
  s0 -> s2 [74, 65535] { R2089 += 1, R2045 += 1, R1350 += 1, R1351 += 1 };
  s0 -> s1 [90, 65535] { R2089 += 1, R2045 += 1, R1351 += 1 };
  s1 -> s1 [0, 72] { R2089 += 1, R2045 += 1, R1351 += 1 };
  s1 -> s1 [0, 65535] { R2089 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s4 [73, 73] { R2089 += 1, R2045 += 1, R1351 += 1 };
  s1 -> s7 [73, 73] { R2089 += 1, R2045 += 1, R1351 += 1 };
  s1 -> s1 [74, 77] { R2089 += 1, R2045 += 1, R1351 += 1 };
  s1 -> s1 [90, 65535] { R2089 += 1, R2045 += 1, R1351 += 1 };
  s2 -> s1 [0, 72] { R2089 += 1, R2045 += 1, R1351 += 1 };
  s2 -> s2 [0, 72] { R2089 += 1, R2045 += 1, R1350 += 1, R1351 += 1 };
  s2 -> s4 [73, 73] { R2089 += 1, R2045 += 1, R1351 += 1 };
  s2 -> s5 [73, 73] { R2089 += 1, R2045 += 1, R1350 += 1, R1351 += 1 };
  s2 -> s6 [73, 73] { R2089 += 1, R2045 += 1, R1350 += 1, R1351 += 1 };
  s2 -> s7 [73, 73] { R2089 += 1, R2045 += 1, R1351 += 1 };
  s2 -> s1 [74, 77] { R2089 += 1, R2045 += 1, R1351 += 1 };
  s2 -> s2 [74, 65535] { R2089 += 1, R2045 += 1, R1350 += 1, R1351 += 1 };
  s2 -> s1 [90, 65535] { R2089 += 1, R2045 += 1, R1351 += 1 };
  s3 -> s1 [0, 72] { R2089 += 1, R2045 += 1, R1351 += 1 };
  s3 -> s2 [0, 72] { R2089 += 1, R2045 += 1, R1350 += 1, R1351 += 1 };
  s3 -> s3 [0, 65535] { R2089 += 1, R2044 += 1, R2045 += 1 };
  s3 -> s4 [73, 73] { R2089 += 1, R2045 += 1, R1351 += 1 };
  s3 -> s5 [73, 73] { R2089 += 1, R2045 += 1, R1350 += 1, R1351 += 1 };
  s3 -> s6 [73, 73] { R2089 += 1, R2045 += 1, R1350 += 1, R1351 += 1 };
  s3 -> s7 [73, 73] { R2089 += 1, R2045 += 1, R1351 += 1 };
  s3 -> s1 [74, 77] { R2089 += 1, R2045 += 1, R1351 += 1 };
  s3 -> s2 [74, 65535] { R2089 += 1, R2045 += 1, R1350 += 1, R1351 += 1 };
  s3 -> s1 [90, 65535] { R2089 += 1, R2045 += 1, R1351 += 1 };
  s4 -> s4 [0, 65535] { R2089 += 1 };
  s4 -> s8 [0, 65535];
  s5 -> s7 [0, 77] { R2089 += 1, R2045 += 1, R1351 += 1 };
  s5 -> s5 [0, 65535] { R2089 += 1, R2045 += 1, R1350 += 1, R1351 += 1 };
  s5 -> s7 [90, 65535] { R2089 += 1, R2045 += 1, R1351 += 1 };
  s7 -> s7 [0, 77] { R2089 += 1, R2045 += 1, R1351 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R2089 += 1 };
  s7 -> s7 [90, 65535] { R2089 += 1, R2045 += 1, R1351 += 1 };
  s8 -> s8 [0, 65535];
  accepting s1, s4, s7, s8;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 72] { R2091 += 1, R2047 += 1, R1777 += 1, R1778 += 1 };
  s0 -> s2 [0, 72] { R2091 += 1, R2047 += 1, R1776 += 1, R1777 += 1 };
  s0 -> s3 [0, 65535] { R2091 += 1, R2046 += 1, R2047 += 1 };
  s0 -> s0 [0, 65535] { R2090 += 1, R2091 += 1 };
  s0 -> s4 [73, 73] { R2091 += 1, R2047 += 1, R1776 += 1, R1777 += 1 };
  s0 -> s5 [73, 73] { R2091 += 1, R2047 += 1, R1777 += 1, R1778 += 1 };
  s0 -> s6 [73, 73] { R2091 += 1, R2047 += 1, R1777 += 1, R1778 += 1 };
  s0 -> s7 [73, 73] { R2091 += 1, R2047 += 1, R1776 += 1, R1777 += 1 };
  s0 -> s1 [74, 65535] { R2091 += 1, R2047 += 1, R1777 += 1, R1778 += 1 };
  s0 -> s2 [74, 65535] { R2091 += 1, R2047 += 1, R1776 += 1, R1777 += 1 };
  s1 -> s1 [0, 72] { R2091 += 1, R2047 += 1, R1777 += 1, R1778 += 1 };
  s1 -> s1 [0, 65535] { R2091 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s5 [73, 73] { R2091 += 1, R2047 += 1, R1777 += 1, R1778 += 1 };
  s1 -> s6 [73, 73] { R2091 += 1, R2047 += 1, R1777 += 1, R1778 += 1 };
  s1 -> s1 [74, 65535] { R2091 += 1, R2047 += 1, R1777 += 1, R1778 += 1 };
  s2 -> s1 [0, 72] { R2091 += 1, R2047 += 1, R1777 += 1, R1778 += 1 };
  s2 -> s2 [0, 72] { R2091 += 1, R2047 += 1, R1776 += 1, R1777 += 1 };
  s2 -> s4 [73, 73] { R2091 += 1, R2047 += 1, R1776 += 1, R1777 += 1 };
  s2 -> s5 [73, 73] { R2091 += 1, R2047 += 1, R1777 += 1, R1778 += 1 };
  s2 -> s6 [73, 73] { R2091 += 1, R2047 += 1, R1777 += 1, R1778 += 1 };
  s2 -> s7 [73, 73] { R2091 += 1, R2047 += 1, R1776 += 1, R1777 += 1 };
  s2 -> s1 [74, 65535] { R2091 += 1, R2047 += 1, R1777 += 1, R1778 += 1 };
  s2 -> s2 [74, 65535] { R2091 += 1, R2047 += 1, R1776 += 1, R1777 += 1 };
  s3 -> s1 [0, 72] { R2091 += 1, R2047 += 1, R1777 += 1, R1778 += 1 };
  s3 -> s2 [0, 72] { R2091 += 1, R2047 += 1, R1776 += 1, R1777 += 1 };
  s3 -> s3 [0, 65535] { R2091 += 1, R2046 += 1, R2047 += 1 };
  s3 -> s4 [73, 73] { R2091 += 1, R2047 += 1, R1776 += 1, R1777 += 1 };
  s3 -> s5 [73, 73] { R2091 += 1, R2047 += 1, R1777 += 1, R1778 += 1 };
  s3 -> s6 [73, 73] { R2091 += 1, R2047 += 1, R1777 += 1, R1778 += 1 };
  s3 -> s7 [73, 73] { R2091 += 1, R2047 += 1, R1776 += 1, R1777 += 1 };
  s3 -> s1 [74, 65535] { R2091 += 1, R2047 += 1, R1777 += 1, R1778 += 1 };
  s3 -> s2 [74, 65535] { R2091 += 1, R2047 += 1, R1776 += 1, R1777 += 1 };
  s5 -> s5 [0, 65535] { R2091 += 1 };
  s5 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R2091 += 1, R2047 += 1, R1777 += 1, R1778 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s9 [0, 65535] { R2091 += 1 };
  s7 -> s6 [0, 65535] { R2091 += 1, R2047 += 1, R1777 += 1, R1778 += 1 };
  s7 -> s7 [0, 65535] { R2091 += 1, R2047 += 1, R1776 += 1, R1777 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R2091 += 1 };
  accepting s8, s5, s9, s6, s1;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 72] { R2093 += 1, R2049 += 1, R1991 += 1 };
  s0 -> s2 [0, 72] { R2093 += 1, R2049 += 1, R1990 += 1, R1991 += 1 };
  s0 -> s0 [0, 65535] { R2092 += 1, R2093 += 1 };
  s0 -> s3 [0, 65535] { R2093 += 1, R2048 += 1, R2049 += 1 };
  s0 -> s4 [73, 73] { R2093 += 1, R2049 += 1, R1991 += 1 };
  s0 -> s5 [73, 73] { R2093 += 1, R2049 += 1, R1990 += 1, R1991 += 1 };
  s0 -> s6 [73, 73] { R2093 += 1, R2049 += 1, R1991 += 1 };
  s0 -> s7 [73, 73] { R2093 += 1, R2049 += 1, R1990 += 1, R1991 += 1 };
  s0 -> s1 [74, 76] { R2093 += 1, R2049 += 1, R1991 += 1 };
  s0 -> s2 [74, 65535] { R2093 += 1, R2049 += 1, R1990 += 1, R1991 += 1 };
  s0 -> s8 [77, 77] { R2093 += 1, R2049 += 1, R1991 += 1 };
  s0 -> s1 [90, 65535] { R2093 += 1, R2049 += 1, R1991 += 1 };
  s1 -> s1 [0, 72] { R2093 += 1, R2049 += 1, R1991 += 1 };
  s1 -> s4 [73, 73] { R2093 += 1, R2049 += 1 };
  s1 -> s6 [73, 73] { R2093 += 1, R2049 += 1 };
  s1 -> s1 [74, 76] { R2093 += 1, R2049 += 1, R1991 += 1 };
  s1 -> s1 [74, 65535] { R2093 += 1, R2049 += 1 };
  s1 -> s8 [77, 77] { R2093 += 1, R2049 += 1, R1991 += 1 };
  s1 -> s1 [90, 65535] { R2093 += 1, R2049 += 1, R1991 += 1 };
  s2 -> s1 [0, 72] { R2093 += 1, R2049 += 1, R1991 += 1 };
  s2 -> s2 [0, 72] { R2093 += 1, R2049 += 1, R1990 += 1, R1991 += 1 };
  s2 -> s4 [73, 73] { R2093 += 1, R2049 += 1, R1991 += 1 };
  s2 -> s5 [73, 73] { R2093 += 1, R2049 += 1, R1990 += 1, R1991 += 1 };
  s2 -> s6 [73, 73] { R2093 += 1, R2049 += 1, R1991 += 1 };
  s2 -> s7 [73, 73] { R2093 += 1, R2049 += 1, R1990 += 1, R1991 += 1 };
  s2 -> s1 [74, 76] { R2093 += 1, R2049 += 1, R1991 += 1 };
  s2 -> s2 [74, 65535] { R2093 += 1, R2049 += 1, R1990 += 1, R1991 += 1 };
  s2 -> s8 [77, 77] { R2093 += 1, R2049 += 1, R1991 += 1 };
  s2 -> s1 [90, 65535] { R2093 += 1, R2049 += 1, R1991 += 1 };
  s3 -> s1 [0, 72] { R2093 += 1, R2049 += 1, R1991 += 1 };
  s3 -> s2 [0, 72] { R2093 += 1, R2049 += 1, R1990 += 1, R1991 += 1 };
  s3 -> s3 [0, 65535] { R2093 += 1, R2048 += 1, R2049 += 1 };
  s3 -> s4 [73, 73] { R2093 += 1, R2049 += 1, R1991 += 1 };
  s3 -> s5 [73, 73] { R2093 += 1, R2049 += 1, R1990 += 1, R1991 += 1 };
  s3 -> s6 [73, 73] { R2093 += 1, R2049 += 1, R1991 += 1 };
  s3 -> s7 [73, 73] { R2093 += 1, R2049 += 1, R1990 += 1, R1991 += 1 };
  s3 -> s1 [74, 76] { R2093 += 1, R2049 += 1, R1991 += 1 };
  s3 -> s2 [74, 65535] { R2093 += 1, R2049 += 1, R1990 += 1, R1991 += 1 };
  s3 -> s8 [77, 77] { R2093 += 1, R2049 += 1, R1991 += 1 };
  s3 -> s1 [90, 65535] { R2093 += 1, R2049 += 1, R1991 += 1 };
  s6 -> s6 [0, 76] { R2093 += 1, R2049 += 1, R1991 += 1 };
  s6 -> s6 [0, 65535] { R2093 += 1, R2049 += 1 };
  s6 -> s11 [77, 77] { R2093 += 1, R2049 += 1, R1991 += 1 };
  s6 -> s6 [90, 65535] { R2093 += 1, R2049 += 1, R1991 += 1 };
  s7 -> s6 [0, 76] { R2093 += 1, R2049 += 1, R1991 += 1 };
  s7 -> s7 [0, 65535] { R2093 += 1, R2049 += 1, R1990 += 1, R1991 += 1 };
  s7 -> s11 [77, 77] { R2093 += 1, R2049 += 1, R1991 += 1 };
  s7 -> s6 [90, 65535] { R2093 += 1, R2049 += 1, R1991 += 1 };
  s8 -> s8 [0, 72] { R2093 += 1, R2049 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R2093 += 1 };
  s8 -> s10 [73, 73] { R2093 += 1, R2049 += 1 };
  s8 -> s11 [73, 73] { R2093 += 1, R2049 += 1 };
  s8 -> s8 [74, 65535] { R2093 += 1, R2049 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R2093 += 1 };
  s11 -> s12 [0, 65535] { R2093 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R2093 += 1, R2049 += 1 };
  s12 -> s12 [0, 65535] { R2093 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining P7
automaton P7_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
synchronised {  // Automata constraining P54
automaton P54_0 {
  init s0;
  s0 -> s1 [109, 109];
  accepting s1;
};
};
constraint R1 = R2009 && R2 = R2093 && R20 - R2093 = -1 && R21 = R2093 && R22 - R2093 = -1 && R23 = R2093 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R38 + R67 + R66 + -1*R1353 + -1*R1351 - R53 = 0 && R52 + R1352 + R1350 = 0 && R2008 = 0 && R2034 = 0 && R2035 = 0 && R2044 = 0 && R2045 = 0 && R2046 = 0 && R2047 = 0 && R2048 = 0 && R2049 = 0 && R2050 = 0 && R2051 = R2093 && R2052 = 0 && R2053 = R2093 && R2054 = 0 && R2055 = R2093 && R2056 = 0 && R2057 = R2093 && R2058 = 0 && R2059 = R2093 && R2060 = 0 && R2061 = R2093 && R2062 = 0 && R2063 = R2093 && R2064 = 0 && R2065 = R2093 && R2066 = 0 && R2067 = R2093 && R2068 = 0 && R2069 = R2093 && R2070 = 0 && R2071 = R2093 && R2072 = 0 && R2073 = R2093 && R2074 = 0 && R2075 = R2093 && R2076 = 0 && R2077 = R2093 && R2078 = 0 && R2079 = R2093 && R2080 = 0 && R2081 = R2093 && R2082 = 0 && R2083 = R2093 && R2084 = 0 && R2085 = R2093 && R2086 = 0 && R2087 = R2093 && R2088 = 0 && R2089 = R2093 && R2090 = 0 && R2091 = R2093 && R2092 = 0 && R8 < 1 && R11 < 1 && R12 < 1 && R40 + R69 + R68 < 1 && -1*R1353 + -1*R1351 - R53 < 1 && -1 < R2009 && 0 < R2093 && (R48 + R79 + R76 != 0 || ((R42 + R72 + R70 != 0 || R43 + R73 + R71 + -1*R1353 + -1*R1351 - R53 = 0 || R53 + R1353 + R1351 < 1) && (R42 + R72 + R70 = 0 || R53 + R1353 + R1351 < 1))) && (R48 + R79 + R76 != 0 || ((R46 + R77 + R74 != 0 || R47 + R78 + R75 + -1*R1353 + -1*R1351 - R53 = 0 || R53 + R1353 + R1351 < 1) && (R46 + R77 + R74 = 0 || R53 + R1353 + R1351 < 1))) && (R1994 != 0 || R1995 = R2009 || (R17 = 0 && R2009 = 0)) && (R1996 != 0 || R1997 = R2009 || (R17 = 0 && R2009 = 0)) && (R1998 != 0 || R1999 = R2009 || (R17 = 0 && R2009 = 0)) && (R2000 != 0 || R2001 = R2009 || (R17 = 0 && R2009 = 0)) && (R2002 != 0 || R2003 = R2009 || (R17 = 0 && R2009 = 0)) && (R2004 != 0 || R2005 = R2009 || (R17 = 0 && R2009 = 0)) && (R2006 != 0 || R2007 = R2009 || (R17 = 0 && R2009 = 0)) && (R2010 != 0 || R2009 = R2011 || (R17 = 0 && R2009 = 0)) && (R2012 != 0 || R2009 = R2013 || (R17 = 0 && R2009 = 0)) && (R18 = 0 || (R2032 = 0 && R2033 = 0)) && (R18 = 0 || (R2036 = 0 && R2037 = 0)) && (R18 = 0 || (R2038 = 0 && R2039 = 0)) && (R18 = 0 || (R2040 = 0 && R2041 = 0)) && (R18 = 0 || (R2042 = 0 && R2043 = 0)) && (R19 = 0 || (R2014 = 0 && R2015 = 0)) && (R19 = 0 || (R2016 = 0 && R2017 = 0)) && (R19 = 0 || (R2018 = 0 && R2019 = 0)) && (R19 = 0 || (R2020 = 0 && R2021 = 0)) && (R19 = 0 || (R2022 = 0 && R2023 = 0)) && (R19 = 0 || (R2024 = 0 && R2025 = 0)) && (R19 = 0 || (R2026 = 0 && R2027 = 0)) && (R19 = 0 || (R2028 = 0 && R2029 = 0)) && (R19 = 0 || (R2030 = 0 && R2031 = 0)) && (R48 + R79 + R76 = 0 || (R42 + R72 + R70 = 0 && R43 + R73 + R71 + -1*R1353 + -1*R1351 - R53 = 0)) && (R48 + R79 + R76 = 0 || (R46 + R77 + R74 = 0 && R47 + R78 + R75 + -1*R1353 + -1*R1351 - R53 = 0)) && (R58 + R1781 + R1778 = 0 || (R56 + R1779 + R1776 = 0 && R57 + R1780 + R1777 = 0)) && (R58 + R1781 + R1778 = 0 || (R62 + R1992 + R1990 = 0 && R63 + R1993 + R1991 = 0)) && (R1994 = 0 || (R17 = 0 && R2009 = 0)) && (R1996 = 0 || (R17 = 0 && R2009 = 0)) && (R1998 = 0 || (R17 = 0 && R2009 = 0)) && (R2000 = 0 || (R17 = 0 && R2009 = 0)) && (R2002 = 0 || (R17 = 0 && R2009 = 0)) && (R2004 = 0 || (R17 = 0 && R2009 = 0)) && (R2006 = 0 || (R17 = 0 && R2009 = 0)) && (R2010 = 0 || (R17 = 0 && R2009 = 0)) && (R2012 = 0 || (R17 = 0 && R2009 = 0));
// End of Parikh automata intersection problem
